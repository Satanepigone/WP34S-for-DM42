ARM GAS  /tmp/ccCvaEE3.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** #ifndef REALBUILD
  59:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  60:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  61:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  62:src/display.c **** char forceDispPlot;
  63:src/display.c **** #endif
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** #ifndef REALBUILD
  79:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  80:src/display.c **** #endif
  81:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  82:src/display.c **** #ifndef REALBUILD
  83:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  84:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
ARM GAS  /tmp/ccCvaEE3.s 			page 3


  88:src/display.c **** #ifndef REALBUILD
  89:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  90:src/display.c **** #endif
  91:src/display.c **** 
  92:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  93:src/display.c **** static const char S7_fract_LT[] = " Lt";
  94:src/display.c **** static const char S7_fract_GT[] = " Gt";
  95:src/display.c **** 
  96:src/display.c **** static const char libname[][5] = {
  97:src/display.c ****   "rAMm", "Lib ", "Bup ",
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c ****   "roMm"
 100:src/display.c **** #endif
 101:src/display.c **** };
 102:src/display.c **** 
 103:src/display.c **** #ifndef REALBUILD
 104:src/display.c **** static const char libname_text[][10] = {
 105:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 106:src/display.c **** };
 107:src/display.c **** static const char libname_shorttext[][5] = {
 108:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 109:src/display.c **** };
 110:src/display.c **** #endif
 111:src/display.c **** 
 112:src/display.c **** 
 113:src/display.c **** /* Set the separator and decimal mode globals
 114:src/display.c ****  */
 115:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 115 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 116:src/display.c ****   // Separators used by various modes
 117:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 117 3 view .LVU1
  35              		.loc 1 117 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 118:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 118 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 117 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 117 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 115:src/display.c ****   // Separators used by various modes
  44              		.loc 1 115 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 117 6 view .LVU7
  50 0010 0ED0     		beq	.L2
ARM GAS  /tmp/ccCvaEE3.s 			page 4


  51              		.loc 1 118 5 is_stmt 1 view .LVU8
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 119 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 120:src/display.c ****   }
 121:src/display.c ****   else {
 122:src/display.c ****     SeparatorMode = SEP_COMMA;
 123:src/display.c ****     DecimalMode = DECIMAL_DOT;
 124:src/display.c ****   }
 125:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 125 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 119 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 118 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 119 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 125 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 118 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 119 5 is_stmt 1 view .LVU16
  67              		.loc 1 125 3 view .LVU17
  68              		.loc 1 125 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 125 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 126:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 126 5 is_stmt 1 view .LVU20
  76              		.loc 1 126 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 127:src/display.c **** }
  80              		.loc 1 127 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 122 5 is_stmt 1 view .LVU23
 123:src/display.c ****   }
  90              		.loc 1 123 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
ARM GAS  /tmp/ccCvaEE3.s 			page 5


 125:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 125 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 123:src/display.c ****   }
  94              		.loc 1 123 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 122 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 125:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 125 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 122 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 123:src/display.c ****   }
 102              		.loc 1 123 5 is_stmt 1 view .LVU30
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 125 3 view .LVU31
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 125 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 125 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 127 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 128:src/display.c **** 
 129:src/display.c **** 
 130:src/display.c **** /* Table of error messages.
 131:src/display.c ****  * These consist of a double string.  The first is displayed in the
 132:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 133:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
ARM GAS  /tmp/ccCvaEE3.s 			page 6


 134:src/display.c ****  */
 135:src/display.c **** void error_message(const unsigned int e) 
 136:src/display.c **** {
 137:src/display.c **** #define MSG1(top) top "\0"
 138:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 139:src/display.c **** 
 140:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 141:src/display.c ****   static const char *const error_table[] = 
 142:src/display.c ****     {
 143:src/display.c ****       // manually get the order correct!
 144:src/display.c ****       MSG2("Running", "ProGraMm"),
 145:src/display.c ****       MSG1("Domain"),
 146:src/display.c ****       MSG2("Bad time", "or dAtE"),
 147:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 148:src/display.c ****       MSG1("+\237"),
 149:src/display.c ****       MSG1("-\237"),
 150:src/display.c ****       MSG2("No such", "LAbEL"),
 151:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 152:src/display.c ****       MSG1("Out of range"),
 153:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 154:src/display.c ****       MSG2("Bad digit", "1"),
 155:src/display.c ****       MSG2("Too long", "1"),
 156:src/display.c **** #else
 157:src/display.c ****       MSG1("Bad digit"),
 158:src/display.c ****       MSG1("Too long"),
 159:src/display.c **** #endif
 160:src/display.c ****       MSG2("RAM is", "FuLL"),
 161:src/display.c ****       MSG2("Stack", "CLASH"),
 162:src/display.c ****       MSG1("Bad mode"),
 163:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 164:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 165:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 166:src/display.c ****       MSG1("I/O"),
 167:src/display.c ****       MSG2("Invalid", "dAtA"),
 168:src/display.c ****       MSG2("Write", "ProtEctEd"),
 169:src/display.c ****       MSG2("No root", "Found"),
 170:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 171:src/display.c ****       MSG1("Singular"),
 172:src/display.c ****       MSG2("Flash is", "FuLL"),
 173:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 174:src/display.c **** #ifndef SHIFT_EXPONENT
 175:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 176:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 177:src/display.c ****       MSG2("Too\007\304 small", "1"),
 178:src/display.c **** #     else
 179:src/display.c ****       MSG2("Too small", "1"),
 180:src/display.c **** #     endif
 181:src/display.c ****       MSG2("Too big", "1"),
 182:src/display.c **** #  else
 183:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 184:src/display.c ****       MSG1("Too\007\304 small"),
 185:src/display.c **** #     else
 186:src/display.c ****       MSG1("Too small"),
 187:src/display.c **** #     endif
 188:src/display.c ****       MSG1("Too big"),
 189:src/display.c **** #  endif
 190:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 7


 191:src/display.c **** #ifdef INCLUDE_C_LOCK
 192:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 193:src/display.c **** #endif
 194:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 195:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 196:src/display.c ****       MSG2("Interrupted", "X"),
 197:src/display.c **** #endif
 198:src/display.c ****     };
 199:src/display.c **** #undef MSG1
 200:src/display.c **** #undef MSG2
 201:src/display.c **** #ifndef REALBUILD
 202:src/display.c ****   static const char *const error_table_text[] =
 203:src/display.c ****     {
 204:src/display.c ****       " P r o g r a m ",
 205:src/display.c ****       "",
 206:src/display.c ****       " o r   d a t e ",
 207:src/display.c ****       " O p - c o d e ",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " L a b e l ",
 211:src/display.c ****       " O p e r a t i o n ",
 212:src/display.c ****       "",
 213:src/display.c ****       "",
 214:src/display.c ****       "",
 215:src/display.c ****       " F u l l ",
 216:src/display.c ****       " C l a s h ",
 217:src/display.c ****       "",
 218:src/display.c ****       " T o o   s m a l l ",
 219:src/display.c ****       " D a t a   p o i n t s ",
 220:src/display.c ****       " P a r a m e t e r ",
 221:src/display.c ****       "",
 222:src/display.c ****       " D a t a ",
 223:src/display.c ****       " P r o t e c t e d ",
 224:src/display.c ****       " F o u n d ",
 225:src/display.c ****       " M i s m a t c h ",
 226:src/display.c ****       "",
 227:src/display.c ****       " F u l l ",
 228:src/display.c ****       " I n s t a l l e d ",
 229:src/display.c **** #ifndef SHIFT_EXPONENT
 230:src/display.c ****       "",
 231:src/display.c ****       "",
 232:src/display.c **** #endif
 233:src/display.c **** #ifdef INCLUDE_C_LOCK
 234:src/display.c ****       "",
 235:src/display.c **** #endif
 236:src/display.c ****       "",
 237:src/display.c ****     };
 238:src/display.c **** #endif
 239:src/display.c **** 
 240:src/display.c ****   if (e != ERR_NONE || Running) {
 241:src/display.c ****     const char *p = error_table[e];
 242:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 243:src/display.c ****     if (*q == '\0')
 244:src/display.c ****       q = S7_ERROR;
 245:src/display.c ****     if (*q == 'X') {
 246:src/display.c ****       DispMsg = p;
 247:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccCvaEE3.s 			page 8


 248:src/display.c ****     }
 249:src/display.c ****     else {
 250:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 251:src/display.c ****       if (*q == '1')
 252:src/display.c **** 	q = CNULL;
 253:src/display.c **** #endif
 254:src/display.c ****       message(p, q);
 255:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 256:src/display.c **** #ifndef REALBUILD
 257:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 258:src/display.c **** #endif
 259:src/display.c ****     }
 260:src/display.c **** #ifdef INFRARED
 261:src/display.c ****     if (Tracing) {
 262:src/display.c ****       if (*q == 'X')
 263:src/display.c **** 	print_reg(regX_idx, p, 0);
 264:src/display.c ****       else {
 265:src/display.c **** 	print_tab(0);
 266:src/display.c **** 	print_line(p, 0);
 267:src/display.c **** 	print(' ');
 268:src/display.c **** 	while (*q != '\0') {
 269:src/display.c **** 	  int c = *q;
 270:src/display.c **** 	  if (c >= 'A')
 271:src/display.c **** 	    c |= 0x60; // ASCII lower case
 272:src/display.c **** 	  print(c);
 273:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 274:src/display.c **** 	    ++q;
 275:src/display.c **** 	  ++q;
 276:src/display.c **** 	}
 277:src/display.c **** 	print_advance( 0 );
 278:src/display.c ****       }
 279:src/display.c ****     }
 280:src/display.c **** #endif
 281:src/display.c ****   }
 282:src/display.c **** }
 283:src/display.c **** 
 284:src/display.c **** 
 285:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 286:src/display.c ****  * display.
 287:src/display.c ****  */
 288:src/display.c **** #define D_TOP 64
 289:src/display.c **** #define D_TL 32
 290:src/display.c **** #define D_TR 8
 291:src/display.c **** #define D_MIDDLE 16
 292:src/display.c **** #define D_BL 4
 293:src/display.c **** #define D_BR 1
 294:src/display.c **** #define D_BOTTOM 2
 295:src/display.c **** 
 296:src/display.c **** #include "charset7.h"
 297:src/display.c **** 
 298:src/display.c **** #ifndef REALBUILD
 299:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 300:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 301:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 302:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 303:src/display.c **** 
 304:src/display.c **** static void set_mant_sign_dot()
ARM GAS  /tmp/ccCvaEE3.s 			page 9


 305:src/display.c **** {
 306:src/display.c ****   LastDisplayedNumber[0]='-';
 307:src/display.c ****   set_dot(MANT_SIGN);
 308:src/display.c **** }
 309:src/display.c **** 
 310:src/display.c **** static void clr_mant_sign_dot()
 311:src/display.c **** {
 312:src/display.c ****   LastDisplayedNumber[0]=' ';
 313:src/display.c ****   clr_dot(MANT_SIGN);
 314:src/display.c **** }
 315:src/display.c **** 
 316:src/display.c **** static void set_exp_sign_dot()
 317:src/display.c **** {
 318:src/display.c ****   LastDisplayedExponent[0]='-';
 319:src/display.c ****   set_dot(EXP_SIGN);
 320:src/display.c **** }
 321:src/display.c **** 
 322:src/display.c **** static void clr_exp_sign_dot()
 323:src/display.c **** {
 324:src/display.c ****   LastDisplayedExponent[0]=' ';
 325:src/display.c ****   clr_dot(EXP_SIGN);
 326:src/display.c **** }
 327:src/display.c **** 
 328:src/display.c **** #else
 329:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 330:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 331:src/display.c **** 
 332:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 333:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 334:src/display.c **** 
 335:src/display.c **** #endif
 336:src/display.c **** 
 337:src/display.c **** #ifndef REALBUILD
 338:src/display.c **** int getdig(int ch)
 339:src/display.c **** #else
 340:src/display.c ****   static int getdig(int ch)
 341:src/display.c **** #endif
 342:src/display.c **** {
 343:src/display.c ****   // perform index lookup
 344:src/display.c ****   return digtbl[ch&0xff];
 345:src/display.c **** }
 346:src/display.c **** 
 347:src/display.c **** void dot(int n, int on) {
 348:src/display.c ****   if (on)	set_dot(n);
 349:src/display.c ****   else	clr_dot(n);
 350:src/display.c **** }
 351:src/display.c **** 
 352:src/display.c **** 
 353:src/display.c **** /* Set the decimal point *after* the indicated digit
 354:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 355:src/display.c ****  * of decimal.
 356:src/display.c ****  */
 357:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 358:src/display.c ****   if (res) {
 359:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 360:src/display.c ****   } else {
 361:src/display.c ****     set_dot(posn+7);
ARM GAS  /tmp/ccCvaEE3.s 			page 10


 362:src/display.c ****     if (decimal != DECIMAL_DOT)
 363:src/display.c ****       set_dot(posn+8);
 364:src/display.c **** #ifndef REALBUILD
 365:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 366:src/display.c **** #endif
 367:src/display.c ****   }
 368:src/display.c ****   return res;
 369:src/display.c **** }
 370:src/display.c **** 
 371:src/display.c **** /* Set the digit group separator *before* the specified digit.
 372:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 373:src/display.c ****  * sep argument.
 374:src/display.c ****  */
 375:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 376:src/display.c ****   if (sep == SEP_NONE)
 377:src/display.c ****     return res;
 378:src/display.c ****   if (res) {
 379:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 380:src/display.c ****     else *res++ = '.';
 381:src/display.c ****   } else {
 382:src/display.c ****     posn -= SEGS_PER_DIGIT;
 383:src/display.c ****     set_dot(posn+7);
 384:src/display.c ****     if (sep == SEP_COMMA)
 385:src/display.c ****       set_dot(posn+8);
 386:src/display.c **** #ifndef REALBUILD
 387:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 388:src/display.c **** #endif
 389:src/display.c ****   }
 390:src/display.c ****   return res;
 391:src/display.c **** }
 392:src/display.c **** 
 393:src/display.c **** /* Set a digit in positions [base, base+6] */
 394:src/display.c **** static void set_dig(int base, int ch)
 395:src/display.c **** {
 136              		.loc 1 395 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/display.c ****   int i;
 140              		.loc 1 396 3 view .LVU36
 397:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 397 3 view .LVU37
 142              	.LBB178:
 143              	.LBI178:
 338:src/display.c **** #else
 144              		.loc 1 338 5 view .LVU38
 145              	.LBB179:
 344:src/display.c **** }
 146              		.loc 1 344 3 view .LVU39
 344:src/display.c **** }
 147              		.loc 1 344 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 344:src/display.c **** }
 149              		.loc 1 344 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE179:
 152              	.LBE178:
ARM GAS  /tmp/ccCvaEE3.s 			page 11


 398:src/display.c **** #ifndef REALBUILD
 399:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 399 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 395:src/display.c ****   int i;
 155              		.loc 1 395 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB181:
 163              	.LBB180:
 344:src/display.c **** }
 164              		.loc 1 344 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 344:src/display.c **** }
 167              		.loc 1 344 16 view .LVU45
 168              	.LBE180:
 169              	.LBE181:
 170              		.loc 1 399 3 is_stmt 1 view .LVU46
 171              		.loc 1 399 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 400:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 400 5 is_stmt 1 view .LVU48
 174              		.loc 1 400 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 400 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 400 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 400 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 400 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 401:src/display.c ****   else
 402:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 403:src/display.c **** #endif
 404:src/display.c ****   for (i=6; i>=0; i--)
 405:src/display.c ****     {
 406:src/display.c ****       //		dot(base, c & (1 << i));
 407:src/display.c ****       if (c & (1 << i))
 408:src/display.c **** 	set_dot(base);
ARM GAS  /tmp/ccCvaEE3.s 			page 12


 196              		.loc 1 408 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 409:src/display.c ****       else
 410:src/display.c **** 	clr_dot(base);
 411:src/display.c ****       base++;
 199              		.loc 1 411 7 is_stmt 1 view .LVU55
 404:src/display.c ****     {
 200              		.loc 1 404 19 view .LVU56
 404:src/display.c ****     {
 201              		.loc 1 404 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 404:src/display.c ****     {
 204              		.loc 1 404 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 408:src/display.c ****       else
 208              		.loc 1 408 2 is_stmt 1 view .LVU59
 410:src/display.c ****       base++;
 209              		.loc 1 410 2 view .LVU60
 407:src/display.c **** 	set_dot(base);
 210              		.loc 1 407 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 407:src/display.c **** 	set_dot(base);
 212              		.loc 1 407 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 407:src/display.c **** 	set_dot(base);
 216              		.loc 1 407 7 is_stmt 1 view .LVU63
 407:src/display.c **** 	set_dot(base);
 217              		.loc 1 407 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 410:src/display.c ****       base++;
 219              		.loc 1 410 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 411 7 is_stmt 1 view .LVU66
 404:src/display.c ****     {
 223              		.loc 1 404 19 view .LVU67
 404:src/display.c ****     {
 224              		.loc 1 404 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 404:src/display.c ****     {
 227              		.loc 1 404 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 412:src/display.c ****     }
 413:src/display.c **** }
 231              		.loc 1 413 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
ARM GAS  /tmp/ccCvaEE3.s 			page 13


 402:src/display.c **** #endif
 235              		.loc 1 402 5 is_stmt 1 view .LVU71
 402:src/display.c **** #endif
 236              		.loc 1 402 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 402:src/display.c **** #endif
 238              		.loc 1 402 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 402:src/display.c **** #endif
 240              		.loc 1 402 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 402:src/display.c **** #endif
 242              		.loc 1 402 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 402:src/display.c **** #endif
 246              		.loc 1 402 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 414:src/display.c **** 
 415:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 416:src/display.c ****   if (res) *res++ = ch;
 417:src/display.c ****   else	set_dig(base, ch);
 418:src/display.c ****   return res;
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** 
 422:src/display.c **** static void set_digits_string(const char *msg, int j) {
 423:src/display.c ****   for (; *msg != '\0'; msg++) {
 424:src/display.c ****     if (*msg == '.' || *msg == ',')
 425:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 426:src/display.c ****     else {
 427:src/display.c ****       set_dig_s(j, *msg, CNULL);
 428:src/display.c ****       j += SEGS_PER_DIGIT;
 429:src/display.c ****     }
ARM GAS  /tmp/ccCvaEE3.s 			page 14


 430:src/display.c ****   }
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 434:src/display.c ****   int i;
 435:src/display.c ****   const int n = res == NULL ? 3 : 4;
 436:src/display.c **** 
 437:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 438:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 439:src/display.c **** }
 440:src/display.c **** 
 441:src/display.c **** /* Force the exponent display
 442:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 443:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 444:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 445:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 446:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 447:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 448:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 449:src/display.c ****  */
 450:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 451:src/display.c ****   union {
 452:src/display.c ****     char buf[4];
 453:src/display.c ****     int i;
 454:src/display.c ****   } u;
 455:src/display.c ****   int negative;
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 457:src/display.c ****   int thousands;
 458:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 459:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 460:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 461:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 462:src/display.c **** #  else
 463:src/display.c ****   const int show_large_exponent = 1;
 464:src/display.c **** #  endif
 465:src/display.c **** #else
 466:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 467:src/display.c ****   int thousands;
 468:src/display.c **** #  endif
 469:src/display.c ****   const int show_large_exponent = 0;
 470:src/display.c **** #endif
 471:src/display.c **** 
 472:src/display.c ****   negative = flags & 2;
 473:src/display.c ****   if (exp < 0) {
 474:src/display.c ****     negative = 1;
 475:src/display.c ****     exp = -exp;
 476:src/display.c ****   }
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c ****   thousands = exp / 1000;
 479:src/display.c **** #endif
 480:src/display.c ****   if (res) {
 481:src/display.c **** #ifdef INCLUDE_YREG_CODE
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 483:src/display.c ****     if (thousands != 0) {
 484:src/display.c **** #else
 485:src/display.c ****       if (exp > 999) {
 486:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 15


 487:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 488:src/display.c **** 	// No exponent separator for large -ve exponents
 489:src/display.c ****       }
 490:src/display.c ****       else *res++ = 'e'; // Normal separator
 491:src/display.c **** #else
 492:src/display.c ****       *res++ = 'e';
 493:src/display.c **** #endif
 494:src/display.c ****       if (negative) *res++ = '-';
 495:src/display.c ****     }
 496:src/display.c ****     else {
 497:src/display.c ****       if (negative) SET_EXP_SIGN;
 498:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 499:src/display.c ****       if (thousands != 0) {
 500:src/display.c **** #else
 501:src/display.c **** 	if (exp > 999) {
 502:src/display.c **** #endif
 503:src/display.c **** 	  if (!show_large_exponent
 504:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 505:src/display.c **** 	      && (flags & 8) == 0
 506:src/display.c **** #endif
 507:src/display.c **** 	      ) {
 508:src/display.c **** #ifdef REALBUILD
 509:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 510:src/display.c **** #else
 511:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 512:src/display.c **** #endif
 513:src/display.c **** 	    goto no_number;
 514:src/display.c **** 	  }
 515:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 516:src/display.c **** 	  else {
 517:src/display.c **** 	    exp -= thousands * 1000;
 518:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 519:src/display.c **** 	    if (flags & 16) {
 520:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 521:src/display.c **** 	      int i;
 522:src/display.c **** 
 523:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 524:src/display.c **** 		// Clear digits and separators
 525:src/display.c **** 		clr_dot(i);
 526:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 527:src/display.c **** 	    }
 528:src/display.c **** #  endif
 529:src/display.c **** 	    if (negative) {
 530:src/display.c **** 	      CLR_EXP_SIGN;
 531:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 532:src/display.c **** 	    }
 533:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 534:src/display.c **** 	    flags = 1;
 535:src/display.c **** 	  }
 536:src/display.c **** #endif
 537:src/display.c **** 	}
 538:src/display.c ****       }
 539:src/display.c **** #ifdef REALBUILD
 540:src/display.c ****       u.i = 0; // Smaller ARM code
 541:src/display.c **** #else
 542:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 543:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 16


 544:src/display.c ****       if (flags & 5) {
 545:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 546:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 547:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 548:src/display.c **** 	  int i;
 549:src/display.c **** 
 550:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 551:src/display.c **** 	    if (u.buf[i] == '0')
 552:src/display.c **** 	      u.buf[i] = ' ';
 553:src/display.c **** 	    else
 554:src/display.c **** 	      break;
 555:src/display.c **** 	  }
 556:src/display.c **** 	  if (i != 0 && negative) {
 557:src/display.c **** 	    // Move minus sign to right in front of exponent
 558:src/display.c **** 	    CLR_EXP_SIGN;
 559:src/display.c **** 	    u.buf[i - 1] = '-';
 560:src/display.c **** 	  }
 561:src/display.c **** 	}
 562:src/display.c **** #endif
 563:src/display.c ****       }
 564:src/display.c ****       else
 565:src/display.c **** 	num_arg(u.buf, exp);
 566:src/display.c ****     no_number:
 567:src/display.c ****       set_exp_digits_string(u.buf, res);
 568:src/display.c ****     }
 569:src/display.c **** 
 570:src/display.c ****     static void carry_overflow(void) {
 571:src/display.c ****       const int base = SEGS_EXP_BASE;
 572:src/display.c ****       int c;
 573:src/display.c ****       unsigned int b;
 574:src/display.c **** 
 575:src/display.c ****       // Figure out the base
 576:src/display.c ****       switch (State2.smode) {
 577:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 578:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 579:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 580:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 581:src/display.c ****       default:	b = UState.int_base+1;	break;
 582:src/display.c ****       }
 583:src/display.c **** 
 584:src/display.c ****       // Display the base as the first exponent digit
 585:src/display.c ****       if (b > 10 && b < 16)
 586:src/display.c **** 	SET_EXP_SIGN;
 587:src/display.c ****       c = "B34567o9D12345h"[b-2];
 588:src/display.c ****       set_dig(base, c);
 589:src/display.c **** 
 590:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 591:src/display.c ****       if (get_carry())
 592:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 593:src/display.c ****       if (get_overflow())
 594:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 595:src/display.c ****     }
 596:src/display.c **** 
 597:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 598:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 599:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 600:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
ARM GAS  /tmp/ccCvaEE3.s 			page 17


 601:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 602:src/display.c **** #endif
 603:src/display.c **** 
 604:src/display.c ****     /* Display the annunicator text line.
 605:src/display.c ****      * Care needs to be taken to keep things aligned.
 606:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 607:src/display.c ****      */
 608:src/display.c **** #ifdef TOP_ROW
 609:src/display.c ****     static void annunciators(void) {
 610:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 611:src/display.c ****       char buf[42], *p = buf, *q="";
 612:src/display.c ****       char buf2[42], *p2 = buf2;
 613:src/display.c ****       int n;
 614:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 615:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 616:src/display.c ****       // Constant variables and code branches depending on a constant variable
 617:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 618:src/display.c ****       // feature run-time configurable if needed.
 619:src/display.c **** #ifdef INCLUDE_YREG_CODE
 620:src/display.c **** #  ifdef YREG_ALWAYS_ON
 621:src/display.c ****       const int yreg_enabled = 1;
 622:src/display.c **** #  else
 623:src/display.c ****       const int yreg_enabled = UState.show_y;
 624:src/display.c **** #  endif
 625:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 626:src/display.c ****       const int yreg_hms = 1;
 627:src/display.c **** #  else
 628:src/display.c ****       const int yreg_hms = 0;
 629:src/display.c **** #  endif
 630:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 631:src/display.c ****       const int yreg_fract = 1;
 632:src/display.c **** #  else
 633:src/display.c ****       const int yreg_fract = 0;
 634:src/display.c **** #  endif
 635:src/display.c **** #else
 636:src/display.c ****       const int yreg_enabled = 0;
 637:src/display.c ****       const int yreg_hms = 0;
 638:src/display.c ****       const int yreg_fract = 0;
 639:src/display.c **** #endif
 640:src/display.c **** #ifdef RP_PREFIX
 641:src/display.c ****       const int rp_prefix = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int rp_prefix = 0;
 644:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 645:src/display.c **** #endif
 646:src/display.c ****       // Indicates whether font escape code is compiled in.
 647:src/display.c ****       // This variable will always be set at compile time.
 648:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 649:src/display.c ****       const int has_FONT_ESCAPE = 1;
 650:src/display.c **** #else
 651:src/display.c ****       const int has_FONT_ESCAPE = 0;
 652:src/display.c **** #endif
 653:src/display.c **** 
 654:src/display.c ****       xset(buf, '\0', sizeof(buf));
 655:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 656:src/display.c ****       
 657:src/display.c ****       if (is_intmode()) {
ARM GAS  /tmp/ccCvaEE3.s 			page 18


 658:src/display.c **** #ifdef SHOW_STACK_SIZE
 659:src/display.c **** 	if (shift_char == ' ') {
 660:src/display.c **** 	  *p2++ = '\007';
 661:src/display.c **** 	  *p2++ = '\346';
 662:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 663:src/display.c **** 	}
 664:src/display.c **** 	else
 665:src/display.c **** #endif
 666:src/display.c **** 	  {
 667:src/display.c **** 	    *p2++ = shift_char;
 668:src/display.c **** 	    *p2++ = '\006';
 669:src/display.c **** 	  }
 670:src/display.c **** 
 671:src/display.c **** 	switch(int_mode()) {
 672:src/display.c **** 	default:
 673:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 674:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 675:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 676:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 677:src/display.c **** 	}
 678:src/display.c **** 	q = scopy(p2, q);
 679:src/display.c **** 	*q++ = '\006';
 680:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 681:src/display.c **** 
 682:src/display.c **** 	if (IntMaxWindow > 0) {
 683:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 684:src/display.c **** 	  if (*q == '1')
 685:src/display.c **** 	    n += 2;
 686:src/display.c **** 	  if (q[1] == '1')
 687:src/display.c **** 	    n += 2;
 688:src/display.c **** 	  while (n-- > 0)
 689:src/display.c **** 	    *p2++ = '\006';
 690:src/display.c **** 
 691:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 692:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 693:src/display.c **** 	}
 694:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 695:src/display.c ****       }
 696:src/display.c **** #ifdef INCLUDE_C_LOCK
 697:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 698:src/display.c **** #else
 699:src/display.c ****       else if (!yreg_enabled
 700:src/display.c **** #endif
 701:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 702:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 703:src/display.c **** #endif
 704:src/display.c **** 	       ) {
 705:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 706:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 707:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 708:src/display.c **** 	if (shift_char == ' ') {
 709:src/display.c **** 	  *p2++ = '\007';
 710:src/display.c **** 	  *p2++ = '\342';
 711:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 712:src/display.c **** 	  *p2++ = '\007';
 713:src/display.c **** 	  *p2++ = '\344';
 714:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
ARM GAS  /tmp/ccCvaEE3.s 			page 19


 715:src/display.c **** 	}
 716:src/display.c **** 	else
 717:src/display.c **** #endif
 718:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 719:src/display.c **** 	    *p2++ = shift_char;
 720:src/display.c **** 	    *p2++ = '\006';
 721:src/display.c **** 	  }
 722:src/display.c **** 	  else {
 723:src/display.c **** 	    *p2++ = 'D';
 724:src/display.c **** 	  }
 725:src/display.c **** 
 726:src/display.c **** 	if (State2.cmplx) {
 727:src/display.c **** 	  *p2++ = ' ';
 728:src/display.c **** 	  *p2 = '\024';
 729:src/display.c **** 	  goto skip;
 730:src/display.c **** 	}
 731:src/display.c **** 	if (State2.arrow) {
 732:src/display.c **** 	  *p2++ = ' ';
 733:src/display.c **** 	  *p2 = '\015';
 734:src/display.c **** 	  goto skip;
 735:src/display.c **** 	}
 736:src/display.c **** 
 737:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 738:src/display.c **** 	  if (State2.wascomplex) {
 739:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 740:src/display.c **** 	  }
 741:src/display.c **** 	  else if (rp_prefix) {
 742:src/display.c **** 	    if (RectPolConv == 1) {
 743:src/display.c **** 	      q = "\007\306<";
 744:src/display.c **** 	    }
 745:src/display.c **** 	    else {
 746:src/display.c **** 	      q = "\007\306y";
 747:src/display.c **** 	    }
 748:src/display.c **** 	  }
 749:src/display.c **** 	  p = scopy(buf, q);
 750:src/display.c **** 
 751:src/display.c **** 	  goto display_yreg;
 752:src/display.c **** 	}
 753:src/display.c **** 
 754:src/display.c **** 	switch (UState.date_mode) {
 755:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 756:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 757:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 758:src/display.c **** #endif
 759:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 760:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 761:src/display.c **** #endif
 762:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 763:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 764:src/display.c **** #endif
 765:src/display.c **** #endif
 766:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 767:src/display.c **** 	}
 768:src/display.c **** 	p2 = scopy(p2, q);
 769:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 770:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 771:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
ARM GAS  /tmp/ccCvaEE3.s 			page 20


 772:src/display.c **** 	}
 773:src/display.c **** #else
 774:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 775:src/display.c **** 	*p2++ = '\007';
 776:src/display.c **** 	*p2++ = '\342';
 777:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 778:src/display.c **** #endif
 779:src/display.c ****       }
 780:src/display.c ****       else { // yreg_enabled
 781:src/display.c **** 	// do top-related things first
 782:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 783:src/display.c **** 	if (State2.cmplx) {
 784:src/display.c **** 	  *p2++ = '\007';
 785:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 786:src/display.c **** 	  *p2++ = shift_char;
 787:src/display.c **** 	  *p2++ = '\024';
 788:src/display.c **** 	}
 789:src/display.c **** 	else {// if (shift_char != ' ') {
 790:src/display.c **** 	  *p2++ = '\007';
 791:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 792:src/display.c **** 	  *p2++ = shift_char;
 793:src/display.c **** 	}
 794:src/display.c **** #endif
 795:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 796:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 797:src/display.c **** 	  *p2++ = '\007';
 798:src/display.c **** 	  *p2++ = '\207';
 799:src/display.c **** 	  *p2++ = '\007';	    
 800:src/display.c **** 	}
 801:src/display.c **** 	else {
 802:src/display.c **** 	  *p2++ = '\007';
 803:src/display.c **** 	  *p2++ = '\207';
 804:src/display.c **** 	  *p2++ = ' ';
 805:src/display.c **** 	}
 806:src/display.c **** #endif
 807:src/display.c **** #ifndef SHOW_STACK_SIZE
 808:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 809:src/display.c **** 	p2 = scopy(p2, q);
 810:src/display.c **** #else
 811:src/display.c **** 	if (is_dblmode()) {
 812:src/display.c **** 	  *p2++ = '\007';
 813:src/display.c **** 	  *p2++ = '\342';
 814:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 815:src/display.c **** 	  *p2++ = '\007';
 816:src/display.c **** 	  *p2++ = '\345';
 817:src/display.c **** 	  *p2++ = 'D';
 818:src/display.c **** 	}
 819:src/display.c **** 	else {
 820:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 821:src/display.c **** 	  p2 = scopy(p2, q);
 822:src/display.c **** 	}
 823:src/display.c **** #endif
 824:src/display.c **** 
 825:src/display.c **** 	switch (UState.date_mode) {
 826:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 827:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 828:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
ARM GAS  /tmp/ccCvaEE3.s 			page 21


 829:src/display.c **** #endif
 830:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 831:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 832:src/display.c **** #endif
 833:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 834:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 835:src/display.c **** #endif
 836:src/display.c **** #endif
 837:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 838:src/display.c **** 	}
 839:src/display.c **** 	  
 840:src/display.c **** 	//      no_copy:
 841:src/display.c **** 	// display either arrow or datemode
 842:src/display.c **** 	if (State2.arrow) {
 843:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 844:src/display.c **** 	} // no need to skip y display with arrow here
 845:src/display.c **** 	else {
 846:src/display.c **** 	  p2 = scopy(p2, q);
 847:src/display.c **** 	}
 848:src/display.c **** 	// now do the annotations, if any, for the middle row:
 849:src/display.c **** #ifdef INCLUDE_C_LOCK
 850:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 851:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 852:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 853:src/display.c **** 	  }
 854:src/display.c **** 	  else {
 855:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 856:src/display.c **** 	  }
 857:src/display.c **** 	  scopy(p, q);
 858:src/display.c **** 	  goto skip;
 859:src/display.c **** 	}
 860:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 861:src/display.c **** 	  q = "\007\307<";
 862:src/display.c **** 	  p = scopy(p, q);
 863:src/display.c **** 	}
 864:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 865:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 866:src/display.c **** 	  p = scopy(p, q);
 867:src/display.c **** 	}
 868:src/display.c **** #else
 869:src/display.c **** 	
 870:src/display.c **** 	if (State2.wascomplex) {
 871:src/display.c **** 	  q = "\007\207i";
 872:src/display.c **** 	  p = scopy(p, q);
 873:src/display.c **** 	  //	    goto no_copy;
 874:src/display.c **** 	}
 875:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 876:src/display.c **** 	  q = "\007\307<";
 877:src/display.c **** 	  p = scopy(p, q);
 878:src/display.c **** 	  //	    goto no_copy;
 879:src/display.c **** 	}
 880:src/display.c **** 	else
 881:src/display.c **** #endif
 882:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 883:src/display.c **** 	    q = "\007\307y";
 884:src/display.c **** 	    p = scopy(p, q);
 885:src/display.c **** 	    //	    goto no_copy;
ARM GAS  /tmp/ccCvaEE3.s 			page 22


 886:src/display.c **** 	  }
 887:src/display.c ****       
 888:src/display.c **** 	if (State2.runmode) {
 889:src/display.c **** 	  decNumber y;
 890:src/display.c **** 	display_yreg:
 891:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 892:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 893:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 894:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 895:src/display.c **** 	   */
 896:src/display.c **** 	  if (is_intmode()) {
 897:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 898:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 899:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 900:src/display.c **** 	    goto skip;
 901:src/display.c **** 	  }
 902:src/display.c **** #ifdef INCLUDE_C_LOCK
 903:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 904:src/display.c **** 	    getRegister(&y, regK_idx);
 905:src/display.c **** 	  }
 906:src/display.c **** 	  else {
 907:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 908:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 909:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 910:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 911:src/display.c **** 	  }
 912:src/display.c **** #else
 913:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 914:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 915:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 916:src/display.c **** #endif
 917:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 918:src/display.c **** #ifdef INCLUDE_C_LOCK
 919:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 920:src/display.c **** #else
 921:src/display.c **** 	    if (yreg_hms && State2.hms) {
 922:src/display.c **** #endif
 923:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 924:src/display.c **** 
 925:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 926:src/display.c **** 	      UState.nothousands = 1;
 927:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 928:src/display.c **** 	      UState.nothousands = saved_nothousands;
 929:src/display.c **** 	      // First replace the '@' character with the degree symbol
 930:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 931:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 932:src/display.c **** 	      // then remove the fractional part of the seconds.
 933:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 934:src/display.c **** 	      while (*p) {
 935:src/display.c **** 		replace_char(buf, p[0], p[1]);
 936:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 937:src/display.c **** 		  goto skip;
 938:src/display.c **** 		}
 939:src/display.c **** 		p += 2;
 940:src/display.c **** 	      }
 941:src/display.c **** 	      goto skip;
 942:src/display.c **** 	    }
ARM GAS  /tmp/ccCvaEE3.s 			page 23


 943:src/display.c **** 	    if (yreg_fract && UState.fract
 944:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 945:src/display.c **** 		&& !State2.cmplx
 946:src/display.c **** #endif
 947:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 948:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 949:src/display.c **** #endif
 950:src/display.c **** 		&& set_x_fract(&y, p)) {
 951:src/display.c **** 	      char ltgteq;
 952:src/display.c **** 
 953:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 954:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 955:src/display.c **** 	      ltgteq = *q;
 956:src/display.c **** 	      switch (ltgteq) {
 957:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 958:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 959:src/display.c **** 	      }
 960:src/display.c **** 	      scopy(q, "\007\344?");
 961:src/display.c **** 	      q[2] = ltgteq;
 962:src/display.c **** 
 963:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 964:src/display.c **** 		goto skip;
 965:src/display.c **** 	      }
 966:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 967:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 968:src/display.c **** 		goto skip;
 969:src/display.c **** 	      }
 970:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 971:src/display.c **** 	    }
 972:src/display.c **** 	  }
 973:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 974:src/display.c **** 	    int extra_pixels;
 975:src/display.c **** 
 976:src/display.c **** 	    set_x_dn(&y, p, &n);
 977:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 978:src/display.c **** 	    if (extra_pixels <= 0)
 979:src/display.c **** 	      break;
 980:src/display.c **** 
 981:src/display.c **** 	    xset(p, '\0', n+10);
 982:src/display.c **** 
 983:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 984:src/display.c **** 	  }
 985:src/display.c **** 	}
 986:src/display.c ****       }
 987:src/display.c ****       
 988:src/display.c ****     skip:
 989:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 990:src/display.c ****       set_status_top_always(buf2);
 991:src/display.c ****       
 992:src/display.c ****     }
 993:src/display.c **** #else
 994:src/display.c ****     static void annunciators(void) {
 995:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 996:src/display.c ****       char buf[42], *p = buf, *q="";
 997:src/display.c ****       int n;
 998:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 999:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
ARM GAS  /tmp/ccCvaEE3.s 			page 24


1000:src/display.c ****       // Constant variables and code branches depending on a constant variable
1001:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
1002:src/display.c ****       // feature run-time configurable if needed.
1003:src/display.c **** #ifdef INCLUDE_YREG_CODE
1004:src/display.c **** #  ifdef YREG_ALWAYS_ON
1005:src/display.c ****       const int yreg_enabled = 1;
1006:src/display.c **** #  else
1007:src/display.c ****       const int yreg_enabled = UState.show_y;
1008:src/display.c **** #  endif
1009:src/display.c **** #  ifdef INCLUDE_YREG_HMS
1010:src/display.c ****       const int yreg_hms = 1;
1011:src/display.c **** #  else
1012:src/display.c ****       const int yreg_hms = 0;
1013:src/display.c **** #  endif
1014:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
1015:src/display.c ****       const int yreg_fract = 1;
1016:src/display.c **** #  else
1017:src/display.c ****       const int yreg_fract = 0;
1018:src/display.c **** #  endif
1019:src/display.c **** #else
1020:src/display.c ****       const int yreg_enabled = 0;
1021:src/display.c ****       const int yreg_hms = 0;
1022:src/display.c ****       const int yreg_fract = 0;
1023:src/display.c **** #endif
1024:src/display.c **** #ifdef RP_PREFIX
1025:src/display.c ****       const int rp_prefix = 1;
1026:src/display.c **** #else
1027:src/display.c ****       const int rp_prefix = 0;
1028:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
1029:src/display.c **** #endif
1030:src/display.c ****       // Indicates whether font escape code is compiled in.
1031:src/display.c ****       // This variable will always be set at compile time.
1032:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1033:src/display.c ****       const int has_FONT_ESCAPE = 1;
1034:src/display.c **** #else
1035:src/display.c ****       const int has_FONT_ESCAPE = 0;
1036:src/display.c **** #endif
1037:src/display.c **** 
1038:src/display.c ****       xset(buf, '\0', sizeof(buf));
1039:src/display.c ****       
1040:src/display.c ****       if (is_intmode()) {
1041:src/display.c **** #ifdef SHOW_STACK_SIZE
1042:src/display.c **** 	if (shift_char == ' ') {
1043:src/display.c **** 	  *p++ = '\007';
1044:src/display.c **** 	  *p++ = '\346';
1045:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1046:src/display.c **** 	}
1047:src/display.c **** 	else
1048:src/display.c **** #endif
1049:src/display.c **** 	  {
1050:src/display.c **** 	    *p++ = shift_char;
1051:src/display.c **** 	    *p++ = '\006';
1052:src/display.c **** 	  }
1053:src/display.c **** 
1054:src/display.c **** 	switch(int_mode()) {
1055:src/display.c **** 	default:
1056:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
ARM GAS  /tmp/ccCvaEE3.s 			page 25


1057:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1058:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1059:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1060:src/display.c **** 	}
1061:src/display.c **** 	q = scopy(p, q);
1062:src/display.c **** 	*q++ = '\006';
1063:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1064:src/display.c **** 
1065:src/display.c **** 	if (IntMaxWindow > 0) {
1066:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1067:src/display.c **** 	  if (*q == '1')
1068:src/display.c **** 	    n += 2;
1069:src/display.c **** 	  if (q[1] == '1')
1070:src/display.c **** 	    n += 2;
1071:src/display.c **** 	  while (n-- > 0)
1072:src/display.c **** 	    *p++ = '\006';
1073:src/display.c **** 
1074:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1075:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1076:src/display.c **** 	}
1077:src/display.c ****       }
1078:src/display.c **** #ifdef INCLUDE_C_LOCK
1079:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1080:src/display.c **** #else
1081:src/display.c ****       else if (!yreg_enabled
1082:src/display.c **** #endif
1083:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1084:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1085:src/display.c **** #endif
1086:src/display.c **** 	       ) {
1087:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1088:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1089:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1090:src/display.c **** 	if (shift_char == ' ') {
1091:src/display.c **** 	  *p++ = '\007';
1092:src/display.c **** 	  *p++ = '\342';
1093:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1094:src/display.c **** 	  *p++ = '\007';
1095:src/display.c **** 	  *p++ = '\344';
1096:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1097:src/display.c **** 	}
1098:src/display.c **** 	else
1099:src/display.c **** #endif
1100:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1101:src/display.c **** 	    *p++ = shift_char;
1102:src/display.c **** 	    *p++ = '\006';
1103:src/display.c **** 	  }
1104:src/display.c **** 	  else {
1105:src/display.c **** 	    *p++ = 'D';
1106:src/display.c **** 	  }
1107:src/display.c **** 
1108:src/display.c **** 	if (State2.cmplx) {
1109:src/display.c **** 	  *p++ = ' ';
1110:src/display.c **** 	  *p = '\024';
1111:src/display.c **** 	  goto skip;
1112:src/display.c **** 	}
1113:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccCvaEE3.s 			page 26


1114:src/display.c **** 	  *p++ = ' ';
1115:src/display.c **** 	  *p = '\015';
1116:src/display.c **** 	  goto skip;
1117:src/display.c **** 	}
1118:src/display.c **** 
1119:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1120:src/display.c **** 	  if (State2.wascomplex) {
1121:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1122:src/display.c **** 	  }
1123:src/display.c **** 	  else if (rp_prefix) {
1124:src/display.c **** 	    if (RectPolConv == 1) {
1125:src/display.c **** 	      q = "\007\306<";
1126:src/display.c **** 	    }
1127:src/display.c **** 	    else {
1128:src/display.c **** 	      q = "\007\306y";
1129:src/display.c **** 	    }
1130:src/display.c **** 	  }
1131:src/display.c **** 	  p = scopy(buf, q);
1132:src/display.c **** 
1133:src/display.c **** 	  goto display_yreg;
1134:src/display.c **** 	}
1135:src/display.c **** 
1136:src/display.c **** 	switch (UState.date_mode) {
1137:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1138:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1139:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1140:src/display.c **** #endif
1141:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1142:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1143:src/display.c **** #endif
1144:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1145:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1146:src/display.c **** #endif
1147:src/display.c **** #endif
1148:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1149:src/display.c **** 	}
1150:src/display.c **** 	p = scopy(p, q);
1151:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1152:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1153:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1154:src/display.c **** 	}
1155:src/display.c **** #else
1156:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1157:src/display.c **** 	*p++ = '\007';
1158:src/display.c **** 	*p++ = '\342';
1159:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1160:src/display.c **** #endif
1161:src/display.c ****       }
1162:src/display.c ****       else { // yreg_enabled
1163:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1164:src/display.c **** 	if (State2.cmplx) {
1165:src/display.c **** 	  *p++ = '\007';
1166:src/display.c **** 	  *p++ = '\344';
1167:src/display.c **** 	  *p++ = shift_char;
1168:src/display.c **** 	  q = "\024";
1169:src/display.c **** 	}
1170:src/display.c **** 	else if (shift_char != ' ') {
ARM GAS  /tmp/ccCvaEE3.s 			page 27


1171:src/display.c **** 	  *p++ = '\007';
1172:src/display.c **** 	  *p++ = '\307';
1173:src/display.c **** 	  *p++ = shift_char;
1174:src/display.c **** 	  goto no_copy;
1175:src/display.c **** 	}
1176:src/display.c **** 	else
1177:src/display.c **** #endif
1178:src/display.c **** #ifdef INCLUDE_C_LOCK
1179:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1180:src/display.c **** 			if ( POLAR_DISPLAY ) {
1181:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1182:src/display.c **** 			}
1183:src/display.c **** 			else {
1184:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1185:src/display.c **** 			}
1186:src/display.c **** 			scopy(p, q);
1187:src/display.c **** 			goto skip;
1188:src/display.c **** 		}
1189:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1190:src/display.c **** 			q = "\007\307<";
1191:src/display.c **** 		}
1192:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1193:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1194:src/display.c **** 		}
1195:src/display.c **** #else
1196:src/display.c **** 	  if (State2.wascomplex) {
1197:src/display.c **** 	    q = "\007\207i";
1198:src/display.c **** 	  }
1199:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1200:src/display.c **** 	    q = "\007\307<";
1201:src/display.c **** 	  }
1202:src/display.c **** #endif
1203:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1204:src/display.c **** 	    q = "\007\307y";
1205:src/display.c **** 	  }
1206:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1207:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1208:src/display.c **** 	    q = "\007\207\007";
1209:src/display.c **** 	  }
1210:src/display.c **** #endif
1211:src/display.c **** 	  else {
1212:src/display.c **** #ifndef SHOW_STACK_SIZE
1213:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1214:src/display.c **** #else
1215:src/display.c **** 	    if (is_dblmode()) {
1216:src/display.c **** 	      *p++ = '\007';
1217:src/display.c **** 	      *p++ = '\342';
1218:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1219:src/display.c **** 	      q = "\007\345D";
1220:src/display.c **** 	    }
1221:src/display.c **** 	    else {
1222:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1223:src/display.c **** 	    }
1224:src/display.c **** #endif
1225:src/display.c **** 	  }
1226:src/display.c **** 	p = scopy(p, q);
1227:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccCvaEE3.s 			page 28


1228:src/display.c ****       no_copy:
1229:src/display.c **** #endif
1230:src/display.c **** 
1231:src/display.c **** 	if (State2.arrow) {
1232:src/display.c **** 	  scopy(p, "\007\204\006\015");
1233:src/display.c **** 	} else if (State2.runmode) {
1234:src/display.c **** 	  decNumber y;
1235:src/display.c **** 	display_yreg:
1236:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1237:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1238:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1239:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1240:src/display.c **** 	   */
1241:src/display.c **** #ifdef INCLUDE_C_LOCK
1242:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1243:src/display.c **** 		    getRegister(&y, regK_idx);
1244:src/display.c **** 		  }
1245:src/display.c **** 		  else {
1246:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1247:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1248:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1249:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1250:src/display.c **** 		  }
1251:src/display.c **** #else
1252:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1253:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1254:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1255:src/display.c **** #endif
1256:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1257:src/display.c **** #ifdef INCLUDE_C_LOCK
1258:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1259:src/display.c **** #else
1260:src/display.c **** 	    if (yreg_hms && State2.hms) {
1261:src/display.c **** #endif
1262:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1263:src/display.c **** 
1264:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1265:src/display.c **** 	      UState.nothousands = 1;
1266:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1267:src/display.c **** 	      UState.nothousands = saved_nothousands;
1268:src/display.c **** 	      // First replace the '@' character with the degree symbol
1269:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1270:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1271:src/display.c **** 	      // then remove the fractional part of the seconds.
1272:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1273:src/display.c **** 	      while (*p) {
1274:src/display.c **** 		replace_char(buf, p[0], p[1]);
1275:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1276:src/display.c **** 		  goto skip;
1277:src/display.c **** 		}
1278:src/display.c **** 		p += 2;
1279:src/display.c **** 	      }
1280:src/display.c **** 	      goto skip;
1281:src/display.c **** 	    }
1282:src/display.c **** 	    if (yreg_fract && UState.fract
1283:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1284:src/display.c **** 		&& !State2.cmplx
ARM GAS  /tmp/ccCvaEE3.s 			page 29


1285:src/display.c **** #endif
1286:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1287:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1288:src/display.c **** #endif
1289:src/display.c **** 		&& set_x_fract(&y, p)) {
1290:src/display.c **** 	      char ltgteq;
1291:src/display.c **** 
1292:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1293:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1294:src/display.c **** 	      ltgteq = *q;
1295:src/display.c **** 	      switch (ltgteq) {
1296:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1297:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1298:src/display.c **** 	      }
1299:src/display.c **** 	      scopy(q, "\007\344?");
1300:src/display.c **** 	      q[2] = ltgteq;
1301:src/display.c **** 
1302:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1303:src/display.c **** 		goto skip;
1304:src/display.c **** 	      }
1305:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1306:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1307:src/display.c **** 		goto skip;
1308:src/display.c **** 	      }
1309:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1310:src/display.c **** 	    }
1311:src/display.c **** 	  }
1312:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1313:src/display.c **** 	    int extra_pixels;
1314:src/display.c **** 
1315:src/display.c **** 	    set_x_dn(&y, p, &n);
1316:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1317:src/display.c **** 	    if (extra_pixels <= 0)
1318:src/display.c **** 	      break;
1319:src/display.c **** 
1320:src/display.c **** 	    xset(p, '\0', n+10);
1321:src/display.c **** 
1322:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1323:src/display.c **** 	  }
1324:src/display.c **** 	}
1325:src/display.c ****       }
1326:src/display.c ****       
1327:src/display.c ****     skip:	set_status_top(buf);
1328:src/display.c ****     }
1329:src/display.c **** #endif //top_row
1330:src/display.c ****     static void disp_x(const char *p) {
1331:src/display.c ****       int i;
1332:src/display.c ****       int gotdot = -1;
1333:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1334:src/display.c ****       const
1335:src/display.c **** #endif
1336:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1337:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1338:src/display.c ****       int overflow_to_left = 0;
1339:src/display.c **** #endif
1340:src/display.c **** 
1341:src/display.c ****       if (*p == '-') {
ARM GAS  /tmp/ccCvaEE3.s 			page 30


1342:src/display.c **** 	SET_MANT_SIGN;
1343:src/display.c **** 	p++;
1344:src/display.c ****       }
1345:src/display.c **** 
1346:src/display.c ****       if (is_intmode()) {
1347:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1348:src/display.c **** 	  set_dig(i, *p);
1349:src/display.c **** 	  i += SEGS_PER_DIGIT;
1350:src/display.c **** 	}
1351:src/display.c **** 	carry_overflow();
1352:src/display.c ****       } else {
1353:src/display.c **** 	set_separator_decimal_modes();
1354:src/display.c **** 
1355:src/display.c **** 	i = 0;
1356:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1357:src/display.c **** 	if ( CmdLineDot > 1 ) {
1358:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1359:src/display.c **** 	  const
1360:src/display.c **** #  endif
1361:src/display.c **** 	    int double_dot = 0;
1362:src/display.c **** 	  int j;
1363:src/display.c **** 
1364:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1365:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1366:src/display.c **** 	      gotdot = j;
1367:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1368:src/display.c **** 	      double_dot = (p[j+1] == '.');
1369:src/display.c **** #  endif
1370:src/display.c **** 	    }
1371:src/display.c **** 	  }
1372:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1373:src/display.c **** 	  if (j > 0) {
1374:src/display.c **** 	    p += j + 1;
1375:src/display.c **** 	    i = SEGS_PER_DIGIT;
1376:src/display.c **** 	    if (gotdot <= j) {
1377:src/display.c **** 	      gotdot = 0;
1378:src/display.c **** 	      if (double_dot)
1379:src/display.c **** 		p++;
1380:src/display.c **** 	    }
1381:src/display.c **** 	    else if (*p == '.') {
1382:src/display.c **** 	      gotdot = 0;
1383:src/display.c **** 	      p++;
1384:src/display.c **** 	      if (!double_dot)
1385:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1386:src/display.c **** 	    }
1387:src/display.c **** 	    else gotdot = -1;
1388:src/display.c **** 	    set_dig(0, '<');
1389:src/display.c **** 	    overflow_to_left = 1;
1390:src/display.c **** 	  }
1391:src/display.c **** 	  else gotdot = -1;
1392:src/display.c **** 	}
1393:src/display.c **** #endif
1394:src/display.c **** 
1395:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1396:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1397:src/display.c **** 	       && *p != 'D'
1398:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 31


1399:src/display.c **** 	       ; p++) {
1400:src/display.c **** 	  if (*p == '.') {
1401:src/display.c **** 	    if (gotdot < 0)
1402:src/display.c **** 	      gotdot = i;
1403:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1404:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1405:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1406:src/display.c **** 	      if ( *(p+1) == '.' ) {
1407:src/display.c **** 		p++;
1408:src/display.c **** 	      }
1409:src/display.c **** #  else
1410:src/display.c **** 	      if ( i != gotdot ) {
1411:src/display.c **** #  endif
1412:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1413:src/display.c **** 		i += segs_per_digit;
1414:src/display.c **** 	      }
1415:src/display.c **** 	      else {
1416:src/display.c **** 		if ( CmdLineDot > 1 ) {
1417:src/display.c **** 		  i += segs_per_digit;
1418:src/display.c **** 		}
1419:src/display.c **** 		else {
1420:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1421:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1422:src/display.c **** 		}
1423:src/display.c **** 	      }
1424:src/display.c **** #else
1425:src/display.c **** 	      if (i > 0)
1426:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1427:src/display.c **** 	      else {
1428:src/display.c **** 		set_dig(i, '0');
1429:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1430:src/display.c **** 		i += segs_per_digit;
1431:src/display.c **** 	      }
1432:src/display.c **** #endif
1433:src/display.c **** 	    } else {
1434:src/display.c **** 	      set_dig(i, *p);
1435:src/display.c **** 	      i += segs_per_digit;
1436:src/display.c **** 	    }
1437:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1438:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1439:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1440:src/display.c **** #endif
1441:src/display.c **** 	  }
1442:src/display.c **** 
1443:src/display.c **** 	  /* Implement a floating comma */
1444:src/display.c **** 	  if (gotdot < 0)
1445:src/display.c **** 	    gotdot = i;
1446:src/display.c **** 	  for (;;) {
1447:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1448:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1449:src/display.c **** 	      break;
1450:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1451:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1452:src/display.c **** 	      break;
1453:src/display.c **** #endif
1454:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1455:src/display.c **** 	  }
ARM GAS  /tmp/ccCvaEE3.s 			page 32


1456:src/display.c **** 
1457:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1458:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1459:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1460:src/display.c **** 	    int flags = 8;
1461:src/display.c **** #  else
1462:src/display.c **** 	    int flags = 12;
1463:src/display.c **** #  endif
1464:src/display.c **** 
1465:src/display.c **** 	    if (*p == 'D')
1466:src/display.c **** 	      flags |= 2;
1467:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1468:src/display.c **** 	      flags |= 16;
1469:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1470:src/display.c **** 	  }
1471:src/display.c **** #else
1472:src/display.c **** 	  if (*p == 'E') {
1473:src/display.c **** 	    p++;
1474:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1475:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1476:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1477:src/display.c **** #  else
1478:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1479:src/display.c **** #  endif
1480:src/display.c **** 	  } 
1481:src/display.c **** #endif
1482:src/display.c **** 	}
1483:src/display.c ****       }
1484:src/display.c **** 
1485:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1486:src/display.c **** 
1487:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1488:src/display.c **** 	const int ws = word_size();
1489:src/display.c **** 	unsigned int b;
1490:src/display.c **** 	long long int vs = value;
1491:src/display.c **** 	unsigned long long int v;
1492:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1493:src/display.c **** 	int i, j, k;
1494:src/display.c **** 	int sign = 0;
1495:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1496:src/display.c **** 
1497:src/display.c **** 	switch (State2.smode) {
1498:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1499:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1500:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1501:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1502:src/display.c **** 	default:	b = int_base();	break;
1503:src/display.c **** 	}
1504:src/display.c **** 
1505:src/display.c **** 	if (!res) {
1506:src/display.c **** 	  IntMaxWindow = 0;
1507:src/display.c **** 	  carry_overflow();
1508:src/display.c **** 	}
1509:src/display.c **** 
1510:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1511:src/display.c **** 	  v = extract_value(value, &sign);
1512:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
ARM GAS  /tmp/ccCvaEE3.s 			page 33


1513:src/display.c **** 	    v = value;
1514:src/display.c **** 	  if (v == 0) {
1515:src/display.c **** 	    if (sign)
1516:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1517:src/display.c **** 	    set_dig_s(dig, '0', res);
1518:src/display.c **** 	    return;
1519:src/display.c **** 	  } else
1520:src/display.c **** 	    for (i=0; v != 0; i++) {
1521:src/display.c **** 	      const int r = v % b;
1522:src/display.c **** 	      v /= b;
1523:src/display.c **** 	      buf[i] = DIGITS[r];
1524:src/display.c **** 	    }
1525:src/display.c **** 	} else {
1526:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1527:src/display.c **** 	  if (ws < 64) {
1528:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1529:src/display.c **** 	    vs &= mask;
1530:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1531:src/display.c **** 	      vs |= ~mask;
1532:src/display.c **** 	  }
1533:src/display.c **** 
1534:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1535:src/display.c **** 	    set_dig_s(dig, '0', res);
1536:src/display.c **** 	    return;
1537:src/display.c **** 	  } else if (!UState.leadzero) {
1538:src/display.c **** 	    v = (unsigned long long int)vs;
1539:src/display.c **** 	    for (i=0; v != 0; i++) {
1540:src/display.c **** 	      const int r = v % b;
1541:src/display.c **** 	      v /= b;
1542:src/display.c **** 	      buf[i] = DIGITS[r];
1543:src/display.c **** 	    }
1544:src/display.c **** 	  } else {
1545:src/display.c **** 	    int n;
1546:src/display.c **** 	    const unsigned int b1 = b >> 1;
1547:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1548:src/display.c **** 	    v = (unsigned long long int)vs;
1549:src/display.c **** 
1550:src/display.c **** 	    n = (ws + fac) / (fac+1);
1551:src/display.c **** 	    for (i=0; i<n; i++) {
1552:src/display.c **** 	      const int r = v % b;
1553:src/display.c **** 	      v /= b;
1554:src/display.c **** 	      buf[i] = DIGITS[r];
1555:src/display.c **** 	    }
1556:src/display.c **** 	  }
1557:src/display.c **** 	}
1558:src/display.c **** #ifdef BIGGER_DISPLAY
1559:src/display.c **** #define MAX_INT_Y_DIG 13
1560:src/display.c **** #else
1561:src/display.c **** #define MAX_INT_Y_DIG 7
1562:src/display.c **** #endif
1563:src/display.c **** 	/* At this point i is the number of digits in the output */
1564:src/display.c **** 	int nd = i;
1565:src/display.c **** 	if (res) {
1566:src/display.c **** 	  if (sign) *res++ = '-';
1567:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1568:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1569:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/ccCvaEE3.s 			page 34


1570:src/display.c **** 	    *res++ = '.';
1571:src/display.c **** 	    *res++ = '.';
1572:src/display.c **** 	  }
1573:src/display.c **** 	  else {
1574:src/display.c **** 	    while (--i >= 0)
1575:src/display.c **** 	      *res++ = buf[i];
1576:src/display.c **** 	  }
1577:src/display.c **** 	} else {
1578:src/display.c **** #if 0
1579:src/display.c **** 	  set_separator_decimal_modes();
1580:src/display.c **** 
1581:src/display.c **** 	  // Allows configuration of digit grouping per base
1582:src/display.c **** 	  static const char grouping[] = 
1583:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1584:src/display.c **** 		    //	   2     3     4     5     6     7     8
1585:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1586:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1587:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1588:src/display.c **** 	    : grouping[b - 2] >> 4;
1589:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1590:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1591:src/display.c **** #else
1592:src/display.c **** 	  // Less flexible but shorter
1593:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1594:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1595:src/display.c **** 	    : b == 16 ? 2 : 3;
1596:src/display.c **** 	  set_separator_decimal_modes();
1597:src/display.c **** #endif
1598:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1599:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1600:src/display.c **** 	    State2.window = 0;
1601:src/display.c **** 	  buf[i] = '\0';
1602:src/display.c **** 
1603:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1604:src/display.c **** 	  for (k = 0; k < 12; k++)
1605:src/display.c **** 	    if (buf[j + k] == '\0')
1606:src/display.c **** 	      break;
1607:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1608:src/display.c **** 	    int ch = buf[j++];
1609:src/display.c **** 	    if (i >= shift)
1610:src/display.c **** 	      ch -= 030;
1611:src/display.c **** 	    set_dig(dig, ch);
1612:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1613:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1614:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1615:src/display.c **** 	  }
1616:src/display.c **** 	  if (sign) {
1617:src/display.c **** 	    if (dig >= 0)
1618:src/display.c **** 	      set_dig(dig, '-');
1619:src/display.c **** 	    else	SET_MANT_SIGN;
1620:src/display.c **** 	  }
1621:src/display.c **** 	}
1622:src/display.c ****       }
1623:src/display.c **** 
1624:src/display.c ****       /* Handle special cases.
1625:src/display.c ****        * return non-zero if the number is special.
1626:src/display.c ****        */
ARM GAS  /tmp/ccCvaEE3.s 			page 35


1627:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1628:src/display.c **** 	if (decNumberIsSpecial(x)) {
1629:src/display.c **** 	  if (decNumberIsNaN(x)) {
1630:src/display.c **** 	    if (res) {
1631:src/display.c **** 	      scopy(res, "NaN");
1632:src/display.c **** 	    } else {
1633:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1634:src/display.c **** #ifndef REALBUILD
1635:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1636:src/display.c **** 	      forceDispPlot=0;
1637:src/display.c **** #endif
1638:src/display.c **** 	    }
1639:src/display.c **** 	    return 1;
1640:src/display.c **** 	  } else {
1641:src/display.c **** 	    if (decNumberIsNegative(x)) {
1642:src/display.c **** 	      if (res) *res++ = '-';
1643:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1644:src/display.c **** 	    }
1645:src/display.c **** 	    if (res)
1646:src/display.c **** 	      *res++ = '\237';
1647:src/display.c **** 	    else {
1648:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1649:src/display.c **** #ifndef REALBUILD
1650:src/display.c **** 	      if (decNumberIsNegative(x)) {
1651:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1652:src/display.c **** 	      }
1653:src/display.c **** 	      else {
1654:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1655:src/display.c **** 	      }
1656:src/display.c **** 	      forceDispPlot=0;
1657:src/display.c **** #endif
1658:src/display.c **** 	    }
1659:src/display.c **** 	    return 1;
1660:src/display.c **** 	  }
1661:src/display.c **** 	}
1662:src/display.c **** 	return 0;
1663:src/display.c ****       }
1664:src/display.c **** 
1665:src/display.c **** 
1666:src/display.c ****       /* Extract the two lowest integral digits from the number
1667:src/display.c ****        */
1668:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1669:src/display.c **** 	decNumber n;
1670:src/display.c **** 
1671:src/display.c **** 	decNumberMod(&n, x, &const_100);
1672:src/display.c **** 	*v = dn_to_int(&n);
1673:src/display.c **** 	dn_mulpow10(&n, x, -2);
1674:src/display.c **** 	decNumberTrunc(res, &n);
1675:src/display.c ****       }
1676:src/display.c **** 
1677:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1677 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1678:src/display.c **** 	char b[32];
 276              		.loc 1 1678 2 view .LVU78
ARM GAS  /tmp/ccCvaEE3.s 			page 36


1679:src/display.c **** 	int i, j;
 277              		.loc 1 1679 2 view .LVU79
1680:src/display.c **** 
1681:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1681 2 view .LVU80
 279              		.loc 1 1681 12 view .LVU81
1677:src/display.c **** 	char b[32];
 280              		.loc 1 1677 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1682:src/display.c **** 	  if (v == 0)
1683:src/display.c **** 	    b[i] = spaces?' ':'0';
1684:src/display.c **** 	  else {
1685:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1685 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1677:src/display.c **** 	char b[32];
 292              		.loc 1 1677 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1677:src/display.c **** 	char b[32];
 295              		.loc 1 1677 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1681:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1681 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1682:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1682 4 is_stmt 1 view .LVU87
 303              		.loc 1 1685 6 view .LVU88
 304              		.loc 1 1685 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1686:src/display.c **** 	    v /= 10;
 311              		.loc 1 1686 6 is_stmt 1 view .LVU90
1687:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1687 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1681:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1681 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1682:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1682 7 view .LVU93
ARM GAS  /tmp/ccCvaEE3.s 			page 37


 318 0024 30B1     		cbz	r0, .L44
1681:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1681 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1687 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1686:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1686 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1687 6 is_stmt 1 view .LVU97
1681:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1681 17 view .LVU98
1681:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1681 12 view .LVU99
1681:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1681 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1681:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1681 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1681:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1681 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1682:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1682 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1683:src/display.c **** 	  else {
 349              		.loc 1 1683 6 is_stmt 1 view .LVU104
1681:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1681 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1681:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1681 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1683:src/display.c **** 	  else {
 355              		.loc 1 1683 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1681:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1681 17 is_stmt 1 view .LVU108
1681:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1681 12 view .LVU109
1681:src/display.c **** 	  if (v == 0)
ARM GAS  /tmp/ccCvaEE3.s 			page 38


 360              		.loc 1 1681 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1681:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1681 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1688:src/display.c **** 	  }
1689:src/display.c **** 	}
1690:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1690 2 is_stmt 1 view .LVU112
 371              		.loc 1 1690 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1691:src/display.c **** 	  b[0] = '0';
1692:src/display.c **** 
1693:src/display.c **** 	/* Copy across and appropriately leading space things
1694:src/display.c **** 	 */
1695:src/display.c **** 	j = *jin;
 374              		.loc 1 1695 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1690:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1690 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1691:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1691 4 is_stmt 1 view .LVU116
1691:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1691 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1695 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1696:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1696 2 view .LVU119
 386              		.loc 1 1696 8 view .LVU120
1695:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1695 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1696 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1697:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1697 4 is_stmt 1 view .LVU123
 395              	.LBB182:
 396              	.LBB183:
 416:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 416 12 view .LVU124
 398              	.LBE183:
 399              	.LBE182:
 400              		.loc 1 1697 24 is_stmt 0 view .LVU125
ARM GAS  /tmp/ccCvaEE3.s 			page 39


 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB187:
 403              	.LBB184:
 416:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 416 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 416:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 416 16 view .LVU127
 408              	.LBE184:
 409              	.LBI182:
 415:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 415 14 is_stmt 1 view .LVU128
 411              	.LBB185:
 416:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 416 3 view .LVU129
 416:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 416 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 416:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 416 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 416:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 416 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 418:src/display.c **** }
 423              		.loc 1 418 3 is_stmt 1 view .LVU133
 418:src/display.c **** }
 424              		.loc 1 418 3 is_stmt 0 view .LVU134
 425              	.LBE185:
 426              	.LBE187:
1698:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1698 4 is_stmt 1 view .LVU135
1696:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1696 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1698 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1696:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1696 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1699:src/display.c **** 	}
1700:src/display.c **** 	*jin = j;
 436              		.loc 1 1700 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1700 2 is_stmt 1 view .LVU140
 440              		.loc 1 1700 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1701:src/display.c **** 	return str;
ARM GAS  /tmp/ccCvaEE3.s 			page 40


1702:src/display.c ****       }
 443              		.loc 1 1702 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1700:src/display.c **** 	return str;
 445              		.loc 1 1700 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1701:src/display.c **** 	return str;
 447              		.loc 1 1701 2 is_stmt 1 view .LVU144
 448              		.loc 1 1702 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB188:
 458              	.LBB186:
 417:src/display.c ****   return res;
 459              		.loc 1 417 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 417:src/display.c ****   return res;
 463              		.loc 1 417 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE186:
 470              	.LBE188:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 433:src/display.c ****   int i;
 485              		.loc 1 433 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 434:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 434 3 view .LVU149
 435:src/display.c **** 
 490              		.loc 1 435 3 view .LVU150
 433:src/display.c ****   int i;
 491              		.loc 1 433 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccCvaEE3.s 			page 41


 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 435:src/display.c **** 
 500              		.loc 1 435 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 437 3 is_stmt 1 view .LVU153
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 437 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB189:
 513              	.LBB190:
 417:src/display.c ****   return res;
 514              		.loc 1 417 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 416:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 416 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 416:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 416 19 view .LVU157
 523              	.LBE190:
 524              	.LBE189:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 437 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB196:
 528              	.LBB191:
 416:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 416 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 418:src/display.c **** }
 532              		.loc 1 418 3 is_stmt 1 view .LVU160
 418:src/display.c **** }
 533              		.loc 1 418 3 is_stmt 0 view .LVU161
 534              	.LBE191:
 535              	.LBE196:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 437 36 is_stmt 1 view .LVU162
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 437 13 view .LVU163
ARM GAS  /tmp/ccCvaEE3.s 			page 42


 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 437 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 438:src/display.c **** }
 542              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB197:
 544              	.LBB192:
 416:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 416 12 discriminator 3 view .LVU166
 416:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 416 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE192:
 548              	.LBE197:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 437 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB198:
 553              	.LBB193:
 416:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 416 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 416:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 416 16 discriminator 3 view .LVU170
 558              	.LBE193:
 559              	.LBI189:
 415:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 415 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB194:
 416:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 416 3 discriminator 3 view .LVU172
 563              	.LBE194:
 564              	.LBE198:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 437 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB199:
 569              	.LBB195:
 416:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 416 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 417:src/display.c ****   return res;
 573              		.loc 1 417 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 418:src/display.c **** }
 578              		.loc 1 418 3 view .LVU176
 418:src/display.c **** }
 579              		.loc 1 418 3 is_stmt 0 view .LVU177
 580              	.LBE195:
ARM GAS  /tmp/ccCvaEE3.s 			page 43


 581              	.LBE199:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 437 36 is_stmt 1 view .LVU178
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 437 13 view .LVU179
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 437 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 439:src/display.c **** 
 589              		.loc 1 439 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 439:src/display.c **** 
 591              		.loc 1 439 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1668:src/display.c **** 	decNumber n;
 606              		.loc 1 1668 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1669:src/display.c **** 
 610              		.loc 1 1669 2 view .LVU184
1671:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1671 2 view .LVU185
1668:src/display.c **** 	decNumber n;
 612              		.loc 1 1668 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1668:src/display.c **** 	decNumber n;
 621              		.loc 1 1668 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1671:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1671 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1671:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1671 2 view .LVU189
ARM GAS  /tmp/ccCvaEE3.s 			page 44


 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1668:src/display.c **** 	decNumber n;
 630              		.loc 1 1668 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1671:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1671 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1672:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1672 2 is_stmt 1 view .LVU192
1672:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1672 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1673:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1673 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1672:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1672 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1673:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1673 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1674:src/display.c ****       }
 649              		.loc 1 1674 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1675:src/display.c **** 
 654              		.loc 1 1675 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1675:src/display.c **** 
 661              		.loc 1 1675 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
ARM GAS  /tmp/ccCvaEE3.s 			page 45


 677              	.LVL56:
 678              	.LFB39:
1703:src/display.c **** 
1704:src/display.c **** 
1705:src/display.c ****       /* Display the number in H.MS mode.
1706:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1707:src/display.c ****        */
1708:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1709:src/display.c **** 	decNumber x, y, a, t, u;
1710:src/display.c **** 	int j=0;
1711:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1712:src/display.c **** 	unsigned int hr, min, sec, fs;
1713:src/display.c **** 
1714:src/display.c **** 	if (check_special_dn(rgx, res)) {
1715:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1716:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1717:src/display.c **** 	  return;
1718:src/display.c **** 	}
1719:src/display.c **** 
1720:src/display.c **** 	set_separator_decimal_modes();
1721:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1722:src/display.c **** 	dn_abs(&a, rgx);
1723:src/display.c **** 	if (decNumberIsNegative(&x)) {
1724:src/display.c **** 	  if (res != NULL)
1725:src/display.c **** 	    *res++ += '-';
1726:src/display.c **** 	  else
1727:src/display.c **** 	    SET_MANT_SIGN;
1728:src/display.c **** 	  dn_minus(&x, &x);
1729:src/display.c **** 	}
1730:src/display.c **** 
1731:src/display.c **** 	decNumberHR2HMS(&y, &x);
1732:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1733:src/display.c **** 	decNumberRound(&u, &t);
1734:src/display.c **** 
1735:src/display.c **** 	hms_step(&t, &u, &fs);
1736:src/display.c **** 	hms_step(&u, &t, &sec);
1737:src/display.c **** 	hms_step(&t, &u, &min);
1738:src/display.c **** 	hr = dn_to_int(&t);
1739:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1740:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1741:src/display.c **** 
1742:src/display.c **** 	// degrees
1743:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1744:src/display.c **** 	res = set_dig_s(j, '@', res);
1745:src/display.c **** 	j += SEGS_PER_DIGIT;
1746:src/display.c **** 
1747:src/display.c **** 	// minutes
1748:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1749:src/display.c **** 	res = set_dig_s(j, '\'', res);
1750:src/display.c **** 	j += SEGS_PER_DIGIT;
1751:src/display.c **** 
1752:src/display.c **** 	// seconds
1753:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1754:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1755:src/display.c **** 
1756:src/display.c **** 	// Fractional seconds
1757:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
ARM GAS  /tmp/ccCvaEE3.s 			page 46


1758:src/display.c **** 
1759:src/display.c **** 	// We're now pointing at the exponent's first digit...
1760:src/display.c **** 	res = set_dig_s(j, '"', res);
1761:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1762:src/display.c **** 
1763:src/display.c **** 	// Check for values too big or small
1764:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1765:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1766:src/display.c **** 	} else if (! dn_eq0(&a)) {
1767:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1768:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1769:src/display.c **** 	  }
1770:src/display.c **** 	}
1771:src/display.c ****       }
1772:src/display.c **** 
1773:src/display.c **** 
1774:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1775:src/display.c **** 	decNumber x, w, n, d, t;
1776:src/display.c **** 	char buf[32], *p = buf;
1777:src/display.c **** 	int j;
1778:src/display.c **** 
1779:src/display.c **** 	if (check_special_dn(rgx, res))
1780:src/display.c **** 	  return 1;
1781:src/display.c **** 	dn_abs(&x, rgx);
1782:src/display.c **** 	if (dn_ge(&x, &const_100000))
1783:src/display.c **** 	  return 0;
1784:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1785:src/display.c **** 	  return 0;
1786:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1787:src/display.c **** 	  if (res != NULL)
1788:src/display.c **** 	    *res++ += '-';
1789:src/display.c **** 	  else
1790:src/display.c **** 	    SET_MANT_SIGN;
1791:src/display.c **** 	}
1792:src/display.c **** 	decNumberFrac(&w, &x);
1793:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1794:src/display.c **** 
1795:src/display.c **** 	dn_divide(&t, &n, &d);
1796:src/display.c **** 	dn_compare(&t, &t, &w);
1797:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1798:src/display.c **** 
1799:src/display.c **** 	if (dn_eq(&n, &d)) {
1800:src/display.c **** 	  dn_inc(&w);
1801:src/display.c **** 	  decNumberZero(&n);
1802:src/display.c **** 	}
1803:src/display.c **** 
1804:src/display.c **** 	if (!UState.improperfrac) {
1805:src/display.c **** 	  if (!dn_eq0(&w)) {
1806:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1807:src/display.c **** 	    *p++ = ' ';
1808:src/display.c **** 	  }
1809:src/display.c **** 	} else {
1810:src/display.c **** 	  dn_multiply(&x, &w, &d);
1811:src/display.c **** 	  dn_add(&n, &n, &x);
1812:src/display.c **** 	}
1813:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1814:src/display.c **** 	*p++ = '/';
ARM GAS  /tmp/ccCvaEE3.s 			page 47


1815:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1816:src/display.c **** 	*p = '\0';
1817:src/display.c **** 	if ((p - 12) > buf) {
1818:src/display.c **** 	  p -= 12;
1819:src/display.c **** 	  *p = '<';
1820:src/display.c **** 	} else	p = buf;
1821:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1822:src/display.c **** 	  res = set_dig_s(j, *p, res);
1823:src/display.c **** 	  j += SEGS_PER_DIGIT;
1824:src/display.c **** 	}
1825:src/display.c **** 
1826:src/display.c **** 	if (dn_eq0(&t))
1827:src/display.c **** 	  p = (char *)S7_fract_EQ;
1828:src/display.c **** 	else if (decNumberIsNegative(&t))
1829:src/display.c **** 	  p = (char *)S7_fract_LT;
1830:src/display.c **** 	else
1831:src/display.c **** 	  p = (char *)S7_fract_GT;
1832:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1833:src/display.c **** 	  res = set_dig_s(j, *p, res);
1834:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1835:src/display.c **** 	}
1836:src/display.c **** 	return 1;
1837:src/display.c ****       }
1838:src/display.c **** 
1839:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1840:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1841:src/display.c **** 	decNumber c;
1842:src/display.c **** 	int true_exp, x=0;
1843:src/display.c **** 	int min_pos_exp, max_neg_exp;
1844:src/display.c **** 
1845:src/display.c **** 	if ( mode != MODE_STD ) {
1846:src/display.c **** 	  min_pos_exp = 9;
1847:src/display.c **** 	  max_neg_exp = -5;
1848:src/display.c **** 	}
1849:src/display.c **** 	else {
1850:src/display.c **** 	  min_pos_exp = 12;
1851:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1852:src/display.c **** 	}
1853:src/display.c **** 
1854:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1855:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1856:src/display.c **** 
1857:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1858:src/display.c **** 	  x = *dd;
1859:src/display.c **** 	}
1860:src/display.c **** 
1861:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1862:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1863:src/display.c **** 	  *dd += -true_exp;
1864:src/display.c **** 	  return MODE_FIX;
1865:src/display.c **** 	}
1866:src/display.c **** 
1867:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1868:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1869:src/display.c **** 	}
1870:src/display.c **** 	else {
1871:src/display.c **** 	  return MODE_STD;
ARM GAS  /tmp/ccCvaEE3.s 			page 48


1872:src/display.c **** 	}
1873:src/display.c ****       }
1874:src/display.c **** #else
1875:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1876:src/display.c **** 	decNumber b, c;
1877:src/display.c **** 
1878:src/display.c **** 	dn_1(&b);
1879:src/display.c **** 	b.exponent -= UState.dispdigs;
1880:src/display.c **** 	dn_abs(&c, z);
1881:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1882:src/display.c **** 	  return MODE_FIX;
1883:src/display.c **** 	return MODE_STD;
1884:src/display.c ****       }
1885:src/display.c **** #endif
1886:src/display.c **** 
1887:src/display.c ****       /* SHOW display mode
1888:src/display.c ****        * in double precision show left or right part
1889:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1890:src/display.c ****        */
1891:src/display.c ****       static void show_x(char *x, int exp) {
1892:src/display.c **** 	const int dbl = is_dblmode();
1893:src/display.c **** 	char *p;
1894:src/display.c **** 	int i, j;
1895:src/display.c **** 	char *upper_str;
1896:src/display.c **** 	enum separator_modes separator_mode;
1897:src/display.c **** 	char decimal_mark;
1898:src/display.c **** 	char thousands_sep;
1899:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1900:src/display.c **** 	const int grouping = 0;
1901:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1902:src/display.c **** 	const int grouping = !UState.nothousands;
1903:src/display.c **** #else
1904:src/display.c **** 	const int grouping = 1;
1905:src/display.c **** #endif
1906:src/display.c **** 	int negative;
1907:src/display.c **** 
1908:src/display.c **** 	if (x[0] == '-') {
1909:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1910:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1911:src/display.c **** 
1912:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1913:src/display.c **** 	  xcopy(x, small_minus, 4);
1914:src/display.c **** 	  x += 4;
1915:src/display.c **** 	  negative = 4;
1916:src/display.c **** #else
1917:src/display.c **** 	  ++x;
1918:src/display.c **** 	  negative = 1;
1919:src/display.c **** #endif
1920:src/display.c **** 	}
1921:src/display.c **** 	else negative = 0;
1922:src/display.c **** 
1923:src/display.c **** 	p = find_char(x, '\0');
1924:src/display.c **** 	xset(p, '0', 34 - (p - x));
1925:src/display.c **** 
1926:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1927:src/display.c **** 	  separator_mode = SEP_COMMA;
1928:src/display.c **** 	  decimal_mark = '.';
ARM GAS  /tmp/ccCvaEE3.s 			page 49


1929:src/display.c **** 	  thousands_sep = ',';
1930:src/display.c **** 	}
1931:src/display.c **** 	else {
1932:src/display.c **** 	  separator_mode = SEP_DOT;
1933:src/display.c **** 	  decimal_mark = ',';
1934:src/display.c **** 	  thousands_sep = '.';
1935:src/display.c **** 	}
1936:src/display.c **** 
1937:src/display.c **** 	if (State2.window) { // right half in double precision mode
1938:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1939:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1940:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1941:src/display.c **** 
1942:src/display.c **** 	  upper_str = x + 3;
1943:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1944:src/display.c **** 	  if (grouping) {
1945:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1946:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1947:src/display.c **** 	    x += 3 + 13 + 7;
1948:src/display.c **** 	  }
1949:src/display.c **** 	  else x += 3 + 13 + 6;
1950:src/display.c **** #else
1951:src/display.c **** 	  upper_str = x + 13;
1952:src/display.c **** 	  xset(upper_str, '.', 3);
1953:src/display.c **** 	  if (grouping) {
1954:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1955:src/display.c **** 	    upper_str[6] = thousands_sep;
1956:src/display.c **** 	    x += 13 + 3 + 7;
1957:src/display.c **** 	  }
1958:src/display.c **** 	  else x += 13 + 3 + 6;
1959:src/display.c **** #endif
1960:src/display.c **** 	  negative = 0;
1961:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1962:src/display.c **** 	}
1963:src/display.c **** 	else {
1964:src/display.c **** 	  upper_str = x;
1965:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1966:src/display.c **** 	  x[1] = decimal_mark;
1967:src/display.c **** 	  if (grouping) {
1968:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1969:src/display.c **** 	    x[5] = thousands_sep;
1970:src/display.c **** 	    x += 9;
1971:src/display.c **** 	  }
1972:src/display.c **** 	  else x += 8;
1973:src/display.c **** 	  if (dbl) {
1974:src/display.c **** 	    if (exp < 0) {
1975:src/display.c **** 	      x[9] = '-';
1976:src/display.c **** 	      exp = -exp;
1977:src/display.c **** 	    }
1978:src/display.c **** 	    else
1979:src/display.c **** 	      x[9] = ' ';
1980:src/display.c **** 	    j = exp / 1000;
1981:src/display.c **** 	    x[10] = '0' + j;
1982:src/display.c **** 	    exp -= 1000 * j;
1983:src/display.c **** 	  }
1984:src/display.c **** 	  else {
1985:src/display.c **** 	    x[9] = '\0';
ARM GAS  /tmp/ccCvaEE3.s 			page 50


1986:src/display.c **** 	    x[10] = '\0';
1987:src/display.c **** 	  }
1988:src/display.c **** 	  xcopy(x + 1, x, 11);
1989:src/display.c **** 	  *x = 0;
1990:src/display.c **** 	  set_exp(exp, 1, CNULL);
1991:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1992:src/display.c **** 	}
1993:src/display.c **** 	if (grouping) {
1994:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1995:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1996:src/display.c **** 	  }
1997:src/display.c **** 	}
1998:src/display.c **** 
1999:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
2000:src/display.c **** 	  set_dig(j, x[i]);
2001:src/display.c **** 
2002:src/display.c **** 	*x = '\0';
2003:src/display.c **** 	set_status(upper_str - negative);
2004:src/display.c ****       }
2005:src/display.c **** 
2006:src/display.c **** 
2007:src/display.c ****       /* Display the X register in the numeric portion of the display.
2008:src/display.c ****        * We have to account for the various display modes and numbers of
2009:src/display.c ****        * digits.
2010:src/display.c ****        */
2011:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
2012:src/display.c **** 	decNumber z;
2013:src/display.c **** 	int digits = DISPLAY_DIGITS;
2014:src/display.c **** 
2015:src/display.c **** 	if (dbl)
2016:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
2017:src/display.c **** 	else
2018:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
2019:src/display.c **** 	set_x_dn(&z, res, &digits);
2020:src/display.c ****       }
2021:src/display.c **** 
2022:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
2023:src/display.c **** 	char x[50], *obp = x;
2024:src/display.c **** 	int odig = 0;
2025:src/display.c **** 	int show_exp = 0;
2026:src/display.c **** 	int j;
2027:src/display.c **** 	char mantissa[64];
2028:src/display.c **** 	int exp = 0;
2029:src/display.c **** 	char *p = mantissa;
2030:src/display.c **** 	char *r;
2031:src/display.c **** 	const char *q;
2032:src/display.c **** 	int count, i;
2033:src/display.c **** 	int extra_digits = 0;
2034:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2035:src/display.c **** 	int dd;
2036:src/display.c **** 	int dispdigs;
2037:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
2038:src/display.c **** #else
2039:src/display.c **** 	int dd = UState.dispdigs;
2040:src/display.c **** 	int mode = UState.dispmode;
2041:src/display.c **** #endif
2042:src/display.c **** 	int c;
ARM GAS  /tmp/ccCvaEE3.s 			page 51


2043:src/display.c **** 	int negative = 0;
2044:src/display.c **** 	int trimzeros = 0;
2045:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
2046:src/display.c **** 	const int show_large_exponent = 0;
2047:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
2048:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
2049:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
2050:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
2051:src/display.c **** #else
2052:src/display.c **** 	const int show_large_exponent = 1;
2053:src/display.c **** #endif
2054:src/display.c **** 
2055:src/display.c **** 	set_separator_decimal_modes();
2056:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2057:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
2058:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
2059:src/display.c **** 	    if (State2.hms) {
2060:src/display.c **** 	      set_x_hms(z, res);
2061:src/display.c **** 	      return;
2062:src/display.c **** 	    }
2063:src/display.c **** 	    else if (UState.fract) {
2064:src/display.c **** 	      if (set_x_fract(z, res))
2065:src/display.c **** 		return;
2066:src/display.c **** 	    }
2067:src/display.c **** 	  }
2068:src/display.c **** 	}		
2069:src/display.c **** #else
2070:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
2071:src/display.c **** 	  if (State2.hms) {
2072:src/display.c **** 	    set_x_hms(z, res);
2073:src/display.c **** 	    State2.hms = 0;
2074:src/display.c **** 	    return;
2075:src/display.c **** 	  } else if (UState.fract) {
2076:src/display.c **** 	    if (set_x_fract(z, res))
2077:src/display.c **** 	      return;
2078:src/display.c **** 	  }
2079:src/display.c **** 	}
2080:src/display.c **** #endif
2081:src/display.c **** 
2082:src/display.c **** 	if (check_special_dn(z, res))
2083:src/display.c **** 	  return;
2084:src/display.c **** 
2085:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2086:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2087:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2088:src/display.c **** 	  z->exponent = 0;
2089:src/display.c **** 	}
2090:src/display.c **** 
2091:src/display.c **** 	xset(x, '\0', sizeof(x));
2092:src/display.c **** 
2093:src/display.c **** 	if (dn_eq0(z)) {
2094:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2095:src/display.c **** 	    x[0] = '-';
2096:src/display.c **** 	    x[1] = '0';
2097:src/display.c **** 	  } else
2098:src/display.c **** 	    x[0] = '0';
2099:src/display.c **** 	} else
ARM GAS  /tmp/ccCvaEE3.s 			page 52


2100:src/display.c **** 	  decNumberToString(z, x);
2101:src/display.c **** 
2102:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2103:src/display.c **** 	  show_x(x, exp);
2104:src/display.c **** 	  return;
2105:src/display.c **** 	}
2106:src/display.c **** 
2107:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2108:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2109:src/display.c **** 	  //  ALL mode: fill the display
2110:src/display.c **** 	  dd = *display_digits - 1;
2111:src/display.c **** 	else
2112:src/display.c **** 	  dd = dispdigs;
2113:src/display.c **** 
2114:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2115:src/display.c **** 	  int orig_mode = mode;
2116:src/display.c **** 
2117:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2118:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2119:src/display.c **** 	    // allow zeros to be trimmed
2120:src/display.c **** 	    trimzeros = 1;
2121:src/display.c **** 	  if (orig_mode == MODE_STD)
2122:src/display.c **** 	    dd = *display_digits - 1;
2123:src/display.c ****  	}
2124:src/display.c **** #else
2125:src/display.c **** 	if (mode == MODE_STD) {
2126:src/display.c **** 	  mode = std_round_fix(z);
2127:src/display.c **** 	  trimzeros = 1;
2128:src/display.c **** 	  dd = *display_digits - 1;
2129:src/display.c **** 	} else if (dd >= *display_digits)
2130:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2131:src/display.c **** 	  dd = *display_digits - 1;
2132:src/display.c **** #endif
2133:src/display.c **** 
2134:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2135:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2136:src/display.c **** 
2137:src/display.c **** 	q = find_char(x, 'E');
2138:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2139:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2140:src/display.c **** 	if (q == NULL) exp = 0;
2141:src/display.c **** 	else {
2142:src/display.c **** 	  exp = s_to_i(q+1);
2143:src/display.c **** 	  if (*q == 'D') exp = -exp;
2144:src/display.c **** 	}
2145:src/display.c **** #else
2146:src/display.c **** 	if (q == NULL) exp = 0;
2147:src/display.c **** 	else exp = s_to_i(q+1);
2148:src/display.c **** #endif
2149:src/display.c **** 
2150:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2151:src/display.c **** 	for (q=x; *q == ' '; q++);
2152:src/display.c **** 	if (!res) {
2153:src/display.c **** 	  CLR_EXP_SIGN;
2154:src/display.c **** 	  CLR_MANT_SIGN;
2155:src/display.c **** 	}
2156:src/display.c **** 	if (*q == '-') {
ARM GAS  /tmp/ccCvaEE3.s 			page 53


2157:src/display.c **** 	  negative = 1;
2158:src/display.c **** 	  q++;
2159:src/display.c **** 	} else if (*q == '+')
2160:src/display.c **** 	  q++;
2161:src/display.c **** 	for (; *q == '0'; q++);
2162:src/display.c **** 	if (*q == '.') {
2163:src/display.c **** 	  do
2164:src/display.c **** 	    exp--;
2165:src/display.c **** 	  while (*++q == '0');
2166:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2167:src/display.c **** 	    *p++ = *q++;
2168:src/display.c **** 	} else {
2169:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2170:src/display.c **** 	    *p++ = *q++;
2171:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2172:src/display.c **** 	    *p++ = *q++;
2173:src/display.c **** 	    exp++;
2174:src/display.c **** 	  }
2175:src/display.c **** 	  if (*q == '.') {
2176:src/display.c **** 	    q++;
2177:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2178:src/display.c **** 	      *p++ = *q++;
2179:src/display.c **** 	  }
2180:src/display.c **** 	}
2181:src/display.c **** 
2182:src/display.c **** 	if (mode == MODE_FIX) {
2183:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2184:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2185:src/display.c **** 	  else {
2186:src/display.c **** 	    extra_digits = exp;
2187:src/display.c **** 	    /* We might have push the fixed decimals off the
2188:src/display.c **** 	     * screen so adjust if so.
2189:src/display.c **** 	     */
2190:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2191:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2192:src/display.c **** 	  }
2193:src/display.c **** 	}
2194:src/display.c **** 
2195:src/display.c **** 	// Round the mantissa to the number of digits desired
2196:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2197:src/display.c **** 	if (*p >= '5') {	// Round up
2198:src/display.c **** 	  *p = '0';
2199:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2200:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2201:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2202:src/display.c **** 	    mantissa[0] = '1';
2203:src/display.c **** 	    exp++;
2204:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2205:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2206:src/display.c **** 	      extra_digits = 0;
2207:src/display.c **** 	    }
2208:src/display.c **** 	  } else {
2209:src/display.c **** 	    while (*--p == '9')
2210:src/display.c **** 	      *p = '0';
2211:src/display.c **** 	    (*p)++;
2212:src/display.c **** 	  }
2213:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 54


2214:src/display.c **** 
2215:src/display.c **** 	// Zap what is left
2216:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2217:src/display.c **** 
2218:src/display.c **** 	p = mantissa;
2219:src/display.c **** 	switch (mode) {
2220:src/display.c **** 	default:
2221:src/display.c **** 	case MODE_STD:   
2222:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2223:src/display.c **** 	  if (count != *display_digits)
2224:src/display.c **** 	    count++;
2225:src/display.c **** 	  // Too big or too small to fit on display
2226:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2227:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2228:src/display.c **** 	    case -1:
2229:src/display.c **** 	    case 2:
2230:src/display.c **** 	      *obp++ = *p++;
2231:src/display.c **** 	      odig++;
2232:src/display.c **** 	      dd--;
2233:src/display.c **** 	      exp--;
2234:src/display.c **** 	    case -2:
2235:src/display.c **** 	    case 1:
2236:src/display.c **** 	      *obp++ = *p++;
2237:src/display.c **** 	      odig++;
2238:src/display.c **** 	      dd--;
2239:src/display.c **** 	      exp--;
2240:src/display.c **** 	    case 0:
2241:src/display.c **** 	      ;
2242:src/display.c **** 	    };
2243:src/display.c **** 	    *obp++ = *p++;
2244:src/display.c **** 	    odig++;
2245:src/display.c **** 	    *obp++ = '.';
2246:src/display.c **** 	    for (i=1; i<count; i++) {
2247:src/display.c **** 	      *obp++ = *p++;
2248:src/display.c **** 	      odig++;
2249:src/display.c **** 	    }
2250:src/display.c **** 	    show_exp = 1;
2251:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2252:src/display.c **** 	    for(i=0; i<=exp; i++) {
2253:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2254:src/display.c **** 		*obp++ = ',';
2255:src/display.c **** 	      *obp++ = *p++;
2256:src/display.c **** 	      odig++;
2257:src/display.c **** 	    }
2258:src/display.c **** 	    *obp++ = '.';
2259:src/display.c **** 	    if (count > (exp + 1)) {
2260:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2261:src/display.c **** 		*obp++ = *p++;
2262:src/display.c **** 		odig++;
2263:src/display.c **** 	      }
2264:src/display.c **** 	    }
2265:src/display.c **** 	  } else {		// All digits to right of decimal point
2266:src/display.c **** 	    *obp++ = '0';
2267:src/display.c **** 	    odig++;
2268:src/display.c **** 	    *obp++ = '.';
2269:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2270:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccCvaEE3.s 			page 55


2271:src/display.c **** 	      odig++;
2272:src/display.c **** 	    }
2273:src/display.c **** 	    for (i=0; i<count; i++) {
2274:src/display.c **** 	      *obp++ = *p++;
2275:src/display.c **** 	      odig++;
2276:src/display.c **** 	    }
2277:src/display.c **** 	  }
2278:src/display.c **** 	  break;
2279:src/display.c **** 
2280:src/display.c **** 	case MODE_FIX:
2281:src/display.c **** 	  j = 0;
2282:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2283:src/display.c **** 	    for (i=0; i<=exp; i++) {
2284:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2285:src/display.c **** 		*obp++ = ',';
2286:src/display.c **** 	      *obp++ = *p++;
2287:src/display.c **** 	      odig++;
2288:src/display.c **** 	    }
2289:src/display.c **** 	    *obp++ = '.';
2290:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2291:src/display.c **** 	      *obp++ = *p++;
2292:src/display.c **** 	      odig++;
2293:src/display.c **** 	    }
2294:src/display.c **** 	  } else {		// All digits to right of decimal point
2295:src/display.c **** 	    *obp++ = '0';
2296:src/display.c **** 	    odig++;
2297:src/display.c **** 	    *obp++ = '.';
2298:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2299:src/display.c **** 	      *obp++ = '0';
2300:src/display.c **** 	      odig++;
2301:src/display.c **** 	      dd--;
2302:src/display.c **** 	    }
2303:src/display.c **** 	    while (dd-- > 0) {
2304:src/display.c **** 	      *obp++ = *p++;
2305:src/display.c **** 	      odig++;
2306:src/display.c **** 	    }
2307:src/display.c **** 	  }
2308:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2309:src/display.c **** 	  if (trimzeros)
2310:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2311:src/display.c **** 	      obp--;
2312:src/display.c **** 	      odig--;
2313:src/display.c **** 	    }
2314:src/display.c **** #endif			
2315:src/display.c **** 	  break;
2316:src/display.c **** 
2317:src/display.c **** 	case MODE_ENG:
2318:src/display.c **** 	  switch (exp % 3) {
2319:src/display.c **** 	  case -1:
2320:src/display.c **** 	  case 2:
2321:src/display.c **** 	    *obp++ = *p++;
2322:src/display.c **** 	    odig++;
2323:src/display.c **** 	    dd--;
2324:src/display.c **** 	    exp--;
2325:src/display.c **** 	  case -2:
2326:src/display.c **** 	  case 1:
2327:src/display.c **** 	    *obp++ = *p++;
ARM GAS  /tmp/ccCvaEE3.s 			page 56


2328:src/display.c **** 	    odig++;
2329:src/display.c **** 	    dd--;
2330:src/display.c **** 	    exp--;
2331:src/display.c **** 	  case 0:
2332:src/display.c **** 	    ;
2333:src/display.c **** 	  };
2334:src/display.c **** 	  // Falling through
2335:src/display.c **** 
2336:src/display.c **** 	case MODE_SCI:
2337:src/display.c **** 	  *obp++ = *p++;
2338:src/display.c **** 	  odig++;
2339:src/display.c **** 	  *obp++ = '.';
2340:src/display.c **** 	  dd--;
2341:src/display.c **** 	  while (dd-- >= 0) {
2342:src/display.c **** 	    *obp++ = *p++;
2343:src/display.c **** 	    odig++;
2344:src/display.c **** 	  }
2345:src/display.c **** 	  show_exp = 1;
2346:src/display.c **** 	}
2347:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2348:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2349:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2350:src/display.c **** 	    obp--;
2351:src/display.c **** 	    odig--;
2352:src/display.c **** 	  }
2353:src/display.c **** #endif	
2354:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2355:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2356:src/display.c **** 	  set_x_dn(z, res, display_digits);
2357:src/display.c **** 	  return;
2358:src/display.c **** 	}
2359:src/display.c **** 	/* Finally, send the output to the display */
2360:src/display.c **** 	*obp = '\0';
2361:src/display.c **** 	if (odig > *display_digits)
2362:src/display.c **** 	  odig = *display_digits;
2363:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2364:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2365:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2366:src/display.c **** 	if (negative) {
2367:src/display.c **** 	  if (res) *res++ = '-';
2368:src/display.c **** 	  else {
2369:src/display.c **** 	    if (j == 0)
2370:src/display.c **** 	      SET_MANT_SIGN;
2371:src/display.c **** 	    else
2372:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2373:src/display.c **** 	  }
2374:src/display.c **** 	}
2375:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2376:src/display.c **** 	  if (c == '.') {
2377:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2378:src/display.c **** 	  } else if (c == ',') {
2379:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2380:src/display.c **** 	  } else {
2381:src/display.c **** 	    res = set_dig_s(j, c, res);
2382:src/display.c **** 	    j += SEGS_PER_DIGIT;
2383:src/display.c **** 	  }
2384:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 57


2385:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2386:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2387:src/display.c **** 	  if ( !res ) {
2388:src/display.c **** 	    set_exp(exp, 4, res);
2389:src/display.c **** 	  }
2390:src/display.c **** 	  else {
2391:src/display.c **** 	    set_exp(exp, 0, res);
2392:src/display.c **** 	  }
2393:src/display.c **** 	}
2394:src/display.c **** #else
2395:src/display.c **** 	if (show_exp)
2396:src/display.c **** 	  set_exp(exp, 0, res);
2397:src/display.c **** #endif
2398:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2399:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2400:src/display.c **** 	*display_digits = odig;
2401:src/display.c ****       }
2402:src/display.c **** 
2403:src/display.c **** #if defined(QTGUI) || defined(IOS)
2404:src/display.c ****       void format_display(char *buf) {
2405:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2406:src/display.c **** 	  {
2407:src/display.c **** 	    const char *p = get_cmdline();
2408:src/display.c **** 	    if (p == NULL) {
2409:src/display.c **** 	      format_reg(regX_idx, buf);
2410:src/display.c **** 	    } else {
2411:src/display.c **** 	      scopy(buf, p);
2412:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2413:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2414:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2415:src/display.c **** 		buf[CmdLineEex] = 'E';
2416:src/display.c **** 		buf[CmdLineEex+1] = '-';
2417:src/display.c **** 	      }
2418:src/display.c **** #  endif
2419:src/display.c **** 	    }
2420:src/display.c **** 	  }
2421:src/display.c **** 	else {
2422:src/display.c **** 	  buf[0]=0;
2423:src/display.c **** 	}
2424:src/display.c ****       }
2425:src/display.c **** #endif
2426:src/display.c **** 
2427:src/display.c ****       void format_reg(int index, char *buf) {
2428:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2429:src/display.c **** 
2430:src/display.c **** 	if (is_intmode())
2431:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2432:src/display.c **** #ifndef HP16C_MODE_CHANGE
2433:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2434:src/display.c **** 	  decNumber x;
2435:src/display.c **** 	  int s;
2436:src/display.c **** 	  unsigned long long int v;
2437:src/display.c **** 
2438:src/display.c **** 	  getRegister(&x, index);
2439:src/display.c **** 	  v = dn_to_ull(&x, &s);
2440:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2441:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 58


2442:src/display.c **** #endif
2443:src/display.c **** 	else
2444:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2445:src/display.c ****       }
2446:src/display.c **** 
2447:src/display.c ****       /* Display the status screen */
2448:src/display.c ****       static void show_status(void) {
2449:src/display.c **** 	int i, n;
2450:src/display.c **** 	int j = SEGS_EXP_BASE;
2451:src/display.c **** 	const int status = State2.status - 3;
2452:src/display.c **** 	char buf[16], *p = buf;
2453:src/display.c **** 	unsigned int pc;
2454:src/display.c **** 
2455:src/display.c **** 	if (status == -2) {
2456:src/display.c **** 	  set_status("Free:");
2457:src/display.c **** 	  p = num_arg(buf, free_mem());
2458:src/display.c **** 	  p = scopy(p, " , FL. ");
2459:src/display.c **** 	  p = num_arg(p, free_flash());
2460:src/display.c **** 	  *p = '\0';
2461:src/display.c **** 	  set_digits_string(buf, 0);
2462:src/display.c **** 	}
2463:src/display.c **** 	else if (status == -1) {
2464:src/display.c **** 	  /* Top line */
2465:src/display.c **** 	  p = scopy(buf, "Regs:");
2466:src/display.c **** 	  if (SizeStatRegs)
2467:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2468:src/display.c **** 	  *p = '\0';
2469:src/display.c **** 	  set_status(buf);
2470:src/display.c **** 
2471:src/display.c **** 	  /* Bottom line */
2472:src/display.c **** 	  p = num_arg(buf, global_regs());
2473:src/display.c **** 	  if (LocalRegs < 0) {
2474:src/display.c **** 	    p = scopy(p, " , Loc. ");
2475:src/display.c **** 	    p = num_arg(p, local_regs());
2476:src/display.c **** 	  }
2477:src/display.c **** 	  *p = '\0';
2478:src/display.c **** 	  set_digits_string(buf, 0);
2479:src/display.c **** 	} else {
2480:src/display.c **** 	  int base;
2481:src/display.c **** 	  int end;
2482:src/display.c **** 	  int group = 10;
2483:src/display.c **** 	  int start = 0;
2484:src/display.c **** 		
2485:src/display.c **** 	  if (status <= 9) {
2486:src/display.c **** 	    base = 10 * status;
2487:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2488:src/display.c **** 	    p = scopy(buf, "FL ");
2489:src/display.c **** 	    p = num_arg_0(p, base, 2);
2490:src/display.c **** 	    *p++ = '-';
2491:src/display.c **** 	    p = num_arg_0(p, end, 2);
2492:src/display.c **** 	    *p = '\0';
2493:src/display.c **** 	    set_status(buf);
2494:src/display.c **** 	  }
2495:src/display.c **** 	  else if (status == 10) {
2496:src/display.c **** 	    base = regX_idx;
2497:src/display.c **** 	    end = regK_idx;
2498:src/display.c **** 	    start = 3;
ARM GAS  /tmp/ccCvaEE3.s 			page 59


2499:src/display.c **** 	    group = 4;
2500:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2501:src/display.c **** 	  }
2502:src/display.c **** 	  else { // status == 11
2503:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2504:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2505:src/display.c **** 	    set_status("FL.00-.15");
2506:src/display.c **** 	  }
2507:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2508:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2509:src/display.c **** 	  j += SEGS_PER_DIGIT;
2510:src/display.c **** 	  for (i = start; i < group + start; i++) {
2511:src/display.c **** 	    int k = i + base - start;
2512:src/display.c **** 	    int l = get_user_flag(k);
2513:src/display.c **** 	    k += group;
2514:src/display.c **** 	    if (end >= k) {
2515:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2516:src/display.c **** 	      k += group;
2517:src/display.c **** 	      if (end >= k)
2518:src/display.c **** 		l |= (get_user_flag(k) << 2);
2519:src/display.c **** 	    }
2520:src/display.c **** 	    set_dig(j, l);
2521:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2522:src/display.c **** 	    j += SEGS_PER_DIGIT;
2523:src/display.c **** 	    if (i == 4) {
2524:src/display.c **** 	      set_dig(j, 8);
2525:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2526:src/display.c **** 	      j += SEGS_PER_DIGIT;
2527:src/display.c **** 	    }
2528:src/display.c **** 	  }
2529:src/display.c **** 	}
2530:src/display.c **** 
2531:src/display.c **** 	j = SEGS_EXP_BASE;
2532:src/display.c **** 	pc = state_pc();
2533:src/display.c **** 	if (isXROM(pc))
2534:src/display.c **** 	  pc = 1;
2535:src/display.c **** 	for (n=i=0; i<4; i++) {
2536:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2537:src/display.c **** 	    if (++n == 4) {
2538:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2539:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2540:src/display.c **** 	    } else {
2541:src/display.c **** 	      set_dig(j, 'A'+i);
2542:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2543:src/display.c **** 	    }
2544:src/display.c **** 	  }
2545:src/display.c **** 	}
2546:src/display.c ****       }
2547:src/display.c **** 
2548:src/display.c **** 
2549:src/display.c ****       /* Display the list of alpha labels */
2550:src/display.c ****       static void show_label(void) {
2551:src/display.c **** 	char buf[16];
2552:src/display.c **** 	unsigned short int pc = State2.digval;
2553:src/display.c **** 	unsigned int op = getprog(pc);
2554:src/display.c **** 	int n = nLIB(pc);
2555:src/display.c **** 	unsigned short int lblpc;
ARM GAS  /tmp/ccCvaEE3.s 			page 60


2556:src/display.c **** 
2557:src/display.c **** 	set_status(prt((opcode)op, buf));
2558:src/display.c **** 	set_digits_string(libname[n], 0);
2559:src/display.c **** #ifndef REALBUILD
2560:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2561:src/display.c **** #endif
2562:src/display.c **** 
2563:src/display.c **** 	if (op & OP_DBL) {
2564:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2565:src/display.c **** 	  if (lblpc != pc) {
2566:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2567:src/display.c **** 	    n = nLIB(lblpc);
2568:src/display.c **** 	    if (n == REGION_RAM)
2569:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2570:src/display.c **** 	    else {
2571:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2572:src/display.c **** #ifndef REALBUILD
2573:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2574:src/display.c **** #endif
2575:src/display.c **** 	    }
2576:src/display.c **** 	  }
2577:src/display.c **** 	}
2578:src/display.c ****       }
2579:src/display.c **** 
2580:src/display.c ****       /* Display a list of register contents */
2581:src/display.c ****       static void show_registers(void) {
2582:src/display.c **** 	char buf[16], *bp;
2583:src/display.c **** 	int n = State2.digval;
2584:src/display.c **** 	
2585:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2586:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2587:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2588:src/display.c **** 	  n;
2589:src/display.c **** #else
2590:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2591:src/display.c **** 	  n;
2592:src/display.c **** #endif
2593:src/display.c **** 
2594:src/display.c **** 	if (State2.disp_as_alpha) {
2595:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2596:src/display.c **** 	}
2597:src/display.c **** 	else {
2598:src/display.c **** 	  xset(buf, '\0', 16);
2599:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2600:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2601:src/display.c **** #else
2602:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2603:src/display.c **** #endif
2604:src/display.c **** 	  if (State2.local) {
2605:src/display.c **** 	    *bp++ = '.';
2606:src/display.c **** 	    if (n >= 100) {
2607:src/display.c **** 	      *bp++ = '1';
2608:src/display.c **** 	      n -= 100;
2609:src/display.c **** 	    }
2610:src/display.c **** 	  }
2611:src/display.c **** 	  if (n < 100)
2612:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
ARM GAS  /tmp/ccCvaEE3.s 			page 61


2613:src/display.c **** 	  else
2614:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2615:src/display.c **** 	  set_status(buf);
2616:src/display.c **** 	}
2617:src/display.c **** 	format_reg(reg, CNULL);
2618:src/display.c ****       }
2619:src/display.c **** 
2620:src/display.c **** 
2621:src/display.c ****       static void set_annunciators(void)
2622:src/display.c ****       {
2623:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2624:src/display.c **** 
2625:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2626:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2627:src/display.c **** 	 * browsing constants.
2628:src/display.c **** 	 */
2629:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2630:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2631:src/display.c **** #else
2632:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2633:src/display.c **** #endif
2634:src/display.c **** #ifdef INCLUDE_C_LOCK
2635:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2636:src/display.c **** #endif
2637:src/display.c **** 
2638:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2639:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2640:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2641:src/display.c **** 	set_IO_annunciator();
2642:src/display.c **** 
2643:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2644:src/display.c **** 	 */
2645:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2646:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2647:src/display.c ****       }
2648:src/display.c **** 
2649:src/display.c **** 
2650:src/display.c ****       /*
2651:src/display.c ****        *  Toggle the little "=" sign
2652:src/display.c ****        */
2653:src/display.c ****       void set_IO_annunciator(void) {
2654:src/display.c **** #ifndef DM42
2655:src/display.c **** 	int on = SerialOn
2656:src/display.c **** #endif
2657:src/display.c **** #ifdef DM42
2658:src/display.c **** 	  int on = 0
2659:src/display.c **** #endif
2660:src/display.c **** #ifdef REALBUILD
2661:src/display.c **** 	  || DebugFlag
2662:src/display.c **** #endif
2663:src/display.c **** #ifdef INFRARED
2664:src/display.c **** 	  || PrinterColumn != 0
2665:src/display.c **** #endif
2666:src/display.c **** 	  ;
2667:src/display.c **** 
2668:src/display.c **** 	if (on != IoAnnunciator) {
2669:src/display.c **** 	  dot(LIT_EQ, on);
ARM GAS  /tmp/ccCvaEE3.s 			page 62


2670:src/display.c **** 	  IoAnnunciator = on;
2671:src/display.c **** 	  finish_display(); //LIT_EQ
2672:src/display.c **** 	}
2673:src/display.c ****       }
2674:src/display.c **** 
2675:src/display.c **** #ifdef TOP_ROW
2676:src/display.c ****       /*
2677:src/display.c ****        *  Update the display
2678:src/display.c ****        */
2679:src/display.c ****       void display(void) {
2680:src/display.c **** 	int i, j;
2681:src/display.c **** 	char buf[40], *bp = buf;
2682:src/display.c **** 	const char *p;
2683:src/display.c **** 	int annuc = 0;
2684:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2685:src/display.c **** 	int skip = 0;
2686:src/display.c **** 	int x_disp = 0;
2687:src/display.c **** 	const int shift = cur_shift();
2688:src/display.c **** 
2689:src/display.c **** 	no_status_top = 0;
2690:src/display.c **** 	if (State2.disp_freeze) {
2691:src/display.c **** 	  State2.disp_freeze = 0;
2692:src/display.c **** 	  State2.disp_temp = 1;
2693:src/display.c **** #ifdef CONSOLE
2694:src/display.c **** 	  JustDisplayed = 1;
2695:src/display.c **** #endif
2696:src/display.c **** 	  ShowRPN = 0;
2697:src/display.c **** 	  return;
2698:src/display.c **** 	}
2699:src/display.c **** 
2700:src/display.c **** 	if (WasDataEntry) {
2701:src/display.c **** #if defined(QTGUI) || defined(IOS)
2702:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2703:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2704:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2705:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2706:src/display.c **** #endif
2707:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2708:src/display.c **** 
2709:src/display.c **** 	  // Erase 7-segment display
2710:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2711:src/display.c **** 	    clr_dot(i);
2712:src/display.c **** 	  }
2713:src/display.c **** 	  goto only_update_x;
2714:src/display.c **** 	}
2715:src/display.c **** #ifdef INCLUDE_YREG_CODE
2716:src/display.c **** #  ifdef YREG_ALWAYS_ON
2717:src/display.c **** 	const int yreg_enabled = 1;
2718:src/display.c **** #  else
2719:src/display.c **** 	const int yreg_enabled = UState.show_y;
2720:src/display.c **** #  endif
2721:src/display.c **** #else
2722:src/display.c **** 	const int yreg_enabled = 0;
2723:src/display.c **** #endif
2724:src/display.c **** 	// Clear display
2725:src/display.c **** 	reset_disp();
2726:src/display.c **** 
ARM GAS  /tmp/ccCvaEE3.s 			page 63


2727:src/display.c **** 	
2728:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2729:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2730:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2731:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2732:src/display.c **** 	/*   set_status(buf); */
2733:src/display.c **** 	/* } */
2734:src/display.c **** 	if (State2.version) {
2735:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2736:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2737:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2738:src/display.c **** #ifndef REALBUILD
2739:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2740:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2741:src/display.c **** #endif
2742:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2743:src/display.c **** 	  set_status(vers);
2744:src/display.c **** 	  skip = 1;
2745:src/display.c **** 	  goto nostk;
2746:src/display.c **** 	} else if (State2.confirm) {
2747:src/display.c **** 	  if (yreg_enabled) {
2748:src/display.c **** 	    set_status_top(S_SURE);
2749:src/display.c **** 	    no_status_top = 1;
2750:src/display.c **** 	    annuc = 1;
2751:src/display.c **** 	  }
2752:src/display.c **** 	  else {
2753:src/display.c **** 	    set_status(S_SURE);
2754:src/display.c **** 	  }
2755:src/display.c **** 	} else if (State2.hyp) {
2756:src/display.c **** 	  bp = scopy(bp, "HYP");
2757:src/display.c **** 	  if (! State2.dot)
2758:src/display.c **** 	    *bp++ = '\235';
2759:src/display.c **** 	  if (yreg_enabled) {
2760:src/display.c **** 	    set_status_top(buf);
2761:src/display.c **** 	    no_status_top = 1;
2762:src/display.c **** 	    annuc = 1;
2763:src/display.c **** 	  }
2764:src/display.c **** 	  else {
2765:src/display.c **** 	    set_status(buf);
2766:src/display.c **** 	  }
2767:src/display.c **** 	} else if (State2.gtodot) {
2768:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2769:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2770:src/display.c **** 	  if (State2.numdigit > 0)
2771:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2772:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2773:src/display.c **** 	  *bp++ = '_';
2774:src/display.c **** 	  if (yreg_enabled) {
2775:src/display.c **** 	    set_status_top(buf);
2776:src/display.c **** 	    no_status_top = 1;
2777:src/display.c **** 	    annuc = 1;
2778:src/display.c **** 	  }
2779:src/display.c **** 	  else {
2780:src/display.c **** 	    set_status(buf);
2781:src/display.c **** 	  }
2782:src/display.c **** 	} else if (State2.rarg) {
2783:src/display.c **** 	  /* Commands with arguments */
ARM GAS  /tmp/ccCvaEE3.s 			page 64


2784:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2785:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2786:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2787:src/display.c **** #endif
2788:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2789:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2790:src/display.c **** 	  if (State2.dot) {
2791:src/display.c **** 	    *bp++ = 's';
2792:src/display.c **** 	    *bp++ = '_';
2793:src/display.c **** 	  } else if (shift == SHIFT_F) {
2794:src/display.c **** 	    *bp++ = '\021';
2795:src/display.c **** 	    *bp++ = '_';
2796:src/display.c **** 	  } else {
2797:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2798:src/display.c **** 	       : State2.ind ? 2 
2799:src/display.c **** 	       : num_arg_digits(CmdBase); */
2800:src/display.c **** 	    if (State2.local)
2801:src/display.c **** 	      *bp++ = '.';
2802:src/display.c **** 	    if (State2.numdigit > 0) {
2803:src/display.c **** 	      if (State2.shuffle)
2804:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2805:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2806:src/display.c **** 	      else
2807:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2808:src/display.c **** 	    }
2809:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2810:src/display.c **** 	    *bp++ = '_';
2811:src/display.c **** 	  }
2812:src/display.c **** 	  if (yreg_enabled) {
2813:src/display.c **** 	    set_status_top(buf);
2814:src/display.c **** 	    no_status_top = 1;
2815:src/display.c **** 	    annuc = 1;
2816:src/display.c **** 	  }
2817:src/display.c **** 	  else {
2818:src/display.c **** 	    set_status(buf);
2819:src/display.c **** 	  }
2820:src/display.c **** 	} else if (State2.test != TST_NONE) {
2821:src/display.c **** 	  *bp++ = 'x';
2822:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2823:src/display.c **** 	  *bp++ = '_';
2824:src/display.c **** 	  *bp++ = '?';
2825:src/display.c **** 	  if (yreg_enabled) {
2826:src/display.c **** 	    set_status_top(buf);
2827:src/display.c **** 	    no_status_top = 1;
2828:src/display.c **** 	    annuc = 1;
2829:src/display.c **** 	  }
2830:src/display.c **** 	  else {
2831:src/display.c **** 	    set_status(buf);
2832:src/display.c **** 	  }
2833:src/display.c **** 	} else if (cata) {
2834:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2835:src/display.c **** 	  char b2[16];
2836:src/display.c **** 	  const char *p;
2837:src/display.c **** 
2838:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2839:src/display.c **** 	  p = catcmd(op, b2);
2840:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
ARM GAS  /tmp/ccCvaEE3.s 			page 65


2841:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2842:src/display.c **** 	  bp = scopy(bp, p);
2843:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2844:src/display.c **** 	    // State2.disp_small = 1;
2845:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2846:src/display.c **** 	      set_digits_string("0 to 255", 0);
2847:src/display.c **** 	    else
2848:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2849:src/display.c **** 	    skip = 1;
2850:src/display.c **** 	  } else if (State2.runmode) {
2851:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2852:src/display.c **** 	      decNumber x, r;
2853:src/display.c **** 	      decimal64 z;
2854:src/display.c **** 
2855:src/display.c **** 	      getX(&x);
2856:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2857:src/display.c **** 		const unsigned int f = argKIND(op);
2858:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2859:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2860:src/display.c **** 		  update_speed(0);
2861:src/display.c **** 		  fp(&r, &x);
2862:src/display.c **** 		}
2863:src/display.c **** 		else
2864:src/display.c **** 		  set_NaN(&r);
2865:src/display.c **** 	      } else
2866:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2867:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2868:src/display.c **** 	      packed_from_number(&z, &r);
2869:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2870:src/display.c **** 	      skip = 1;
2871:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2872:src/display.c **** 	      REGISTER z, *const x = StackBase;
2873:src/display.c **** 	      copyreg(&z, x);
2874:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2875:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2876:src/display.c **** 	      copyreg(x, &z);
2877:src/display.c **** 	      skip = 1;
2878:src/display.c **** 	    }
2879:src/display.c **** 	  }
2880:src/display.c **** 	  if (yreg_enabled) {
2881:src/display.c **** 	    set_status_top(buf);
2882:src/display.c **** 	    no_status_top = 1;
2883:src/display.c **** 	    annuc = 1;
2884:src/display.c **** 	  }
2885:src/display.c **** 	  else {
2886:src/display.c **** 	    set_status(buf);
2887:src/display.c **** 	  }
2888:src/display.c **** 	} else if (State2.multi) {
2889:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2890:src/display.c **** 	  if (State2.numdigit > 0) {
2891:src/display.c **** 	    *bp++ = (char) State2.digval;
2892:src/display.c **** 	    if (State2.numdigit > 1)
2893:src/display.c **** 	      *bp++ = State2.digval2;
2894:src/display.c **** 	  }
2895:src/display.c **** 	  if (yreg_enabled) {
2896:src/display.c **** 	    set_status_top(buf);
2897:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/ccCvaEE3.s 			page 66


2898:src/display.c **** 	    annuc = 1;
2899:src/display.c **** 	  }
2900:src/display.c **** 	  else {
2901:src/display.c **** 	    set_status(buf);
2902:src/display.c **** 	  }
2903:src/display.c **** 	} else if (State2.status) {
2904:src/display.c **** 	  show_status();
2905:src/display.c **** 	  skip = 1;
2906:src/display.c **** 	} else if (State2.labellist) {
2907:src/display.c **** 	  show_label();
2908:src/display.c **** 	  skip = 1;
2909:src/display.c **** 	} else if (State2.registerlist) {
2910:src/display.c **** 	  show_registers();
2911:src/display.c **** 	  skip = 1;
2912:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2913:src/display.c **** 	    annunciators();
2914:src/display.c **** 	  }
2915:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2916:src/display.c **** 	} else if (State2.disp_as_alpha) {
2917:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2918:src/display.c **** #endif
2919:src/display.c **** 	} else if (State2.runmode) {
2920:src/display.c **** 	  if (DispMsg) { 
2921:src/display.c **** 	    set_status(DispMsg);
2922:src/display.c **** 	  } else if (DispPlot) {
2923:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2924:src/display.c **** 	  } else if (State2.alphas) {
2925:src/display.c **** 	    bp = scopy(buf, Alpha);
2926:src/display.c **** 	    j = State2.alpha_pos;
2927:src/display.c **** 	    if (j != 0) {
2928:src/display.c **** 	      i = slen(buf);
2929:src/display.c **** 	      j *= 6;
2930:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2931:src/display.c **** 		{
2932:src/display.c **** 		  buf[ (i - j) ] = '\0';
2933:src/display.c **** 		  set_status_right(buf);
2934:src/display.c **** 		}
2935:src/display.c **** 	      else {
2936:src/display.c **** 		set_status(buf);
2937:src/display.c **** 	      }
2938:src/display.c **** 	    }
2939:src/display.c **** 	    else {
2940:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2941:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2942:src/display.c **** 		*bp++ = '\0';
2943:src/display.c **** 	      }
2944:src/display.c **** 	      set_status_right(buf);
2945:src/display.c **** 	    }
2946:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2947:src/display.c **** 	      bp = buf;
2948:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2949:src/display.c **** 	      *bp++ = '\0';
2950:src/display.c **** 	      set_status_top(buf);
2951:src/display.c **** 	      no_status_top = 1;
2952:src/display.c **** 	      //annuc = 1;
2953:src/display.c **** 	    }
2954:src/display.c **** 	  }
ARM GAS  /tmp/ccCvaEE3.s 			page 67


2955:src/display.c **** 	  else {
2956:src/display.c **** 	    annuc = 1;
2957:src/display.c **** 	  }
2958:src/display.c **** 	}
2959:src/display.c **** 	else {
2960:src/display.c **** #ifndef DM42
2961:src/display.c **** 	  show_progtrace(buf);
2962:src/display.c **** #endif
2963:src/display.c **** 	  i = state_pc();
2964:src/display.c **** 	  if (i > 0)
2965:src/display.c **** 	    set_status(prt(getprog(i), buf));
2966:src/display.c **** 	  else
2967:src/display.c **** 	    set_status("");
2968:src/display.c **** 	  set_dot(STO_annun);
2969:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2970:src/display.c **** 	    annuc = 1;
2971:src/display.c **** 	  goto nostk;
2972:src/display.c **** 	}
2973:src/display.c **** 	show_stack();
2974:src/display.c ****       nostk:
2975:src/display.c **** 	show_flags();
2976:src/display.c **** 	if (!skip) {
2977:src/display.c **** 	  if (State2.runmode) {
2978:src/display.c **** 	  only_update_x:
2979:src/display.c **** 	    p = get_cmdline();
2980:src/display.c **** 	    if (p == NULL || cata) {
2981:src/display.c **** 	      if (ShowRegister != -1) {
2982:src/display.c **** #ifdef INCLUDE_C_LOCK
2983:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2984:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2985:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2986:src/display.c **** 		    SET_POLAR_READY;
2987:src/display.c **** 		  }
2988:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2989:src/display.c **** 		    State2.hms = 0;
2990:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2991:src/display.c **** 		    State2.hms = 1;
2992:src/display.c **** 		  }
2993:src/display.c **** 		  else {
2994:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2995:src/display.c **** 		  }
2996:src/display.c **** 		  x_disp = 1;
2997:src/display.c **** 		}
2998:src/display.c **** 		else {
2999:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3000:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3001:src/display.c **** 		}
3002:src/display.c **** #else		
3003:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3004:src/display.c **** 		format_reg(ShowRegister, CNULL);
3005:src/display.c **** #endif
3006:src/display.c **** 	      }
3007:src/display.c **** 	      else
3008:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3009:src/display.c **** 	    } else {
3010:src/display.c **** 	      disp_x(p);
3011:src/display.c **** 	      x_disp = 1;
ARM GAS  /tmp/ccCvaEE3.s 			page 68


3012:src/display.c **** 	    }
3013:src/display.c **** 	    if (WasDataEntry) {
3014:src/display.c **** 	      goto finish;
3015:src/display.c **** 	    }
3016:src/display.c **** 	  } else {
3017:src/display.c **** 	    unsigned int pc = state_pc();
3018:src/display.c **** 	    unsigned int upc = user_pc(pc);
3019:src/display.c **** 	    const int n = nLIB(pc);
3020:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3021:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3022:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3023:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3024:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3025:src/display.c **** #ifndef REALBUILD
3026:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3027:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3028:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3029:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3030:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3031:src/display.c **** 	      char *b=buf;
3032:src/display.c **** 	      char *l=LastDisplayedNumber;
3033:src/display.c **** 	      *l++=' ';
3034:src/display.c **** 	      while(*b) {
3035:src/display.c **** 		*l++=*b++;
3036:src/display.c **** 		*l++=' ';
3037:src/display.c **** 	      }
3038:src/display.c **** 	      *l=0;
3039:src/display.c **** 	    }
3040:src/display.c **** #endif
3041:src/display.c **** 	  }
3042:src/display.c **** 	}
3043:src/display.c **** 	set_annunciators();
3044:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3045:src/display.c **** 	  ShowRPN = 0;
3046:src/display.c **** 	  dot(RPN, 0);
3047:src/display.c **** 	}
3048:src/display.c **** 	// disp_temp disables the <- key
3049:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3050:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3051:src/display.c **** 
3052:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3053:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3054:src/display.c **** 	  annunciators();
3055:src/display.c ****  	State2.hms = 0;
3056:src/display.c **** #else
3057:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3058:src/display.c **** 	  annunciators();
3059:src/display.c **** #endif
3060:src/display.c **** 
3061:src/display.c ****       finish:
3062:src/display.c **** 	State2.version = 0;
3063:src/display.c **** 	State2.disp_as_alpha = 0;
3064:src/display.c **** 	State2.smode = SDISP_NORMAL;
3065:src/display.c **** 	State2.invalid_disp = 0;
3066:src/display.c **** 	ShowRegister = regX_idx;
3067:src/display.c **** 	DispMsg = CNULL;
3068:src/display.c **** 	DispPlot = 0;
ARM GAS  /tmp/ccCvaEE3.s 			page 69


3069:src/display.c **** 	State2.disp_small = 0;
3070:src/display.c **** 	finish_display();
3071:src/display.c **** 	no_status_top = 0;
3072:src/display.c **** #ifdef CONSOLE
3073:src/display.c **** 	JustDisplayed = 1;
3074:src/display.c **** #endif
3075:src/display.c ****       }
3076:src/display.c **** #else
3077:src/display.c ****       /*
3078:src/display.c ****        *  Update the display
3079:src/display.c ****        */
3080:src/display.c ****       void display(void) {
3081:src/display.c **** 	int i, j;
3082:src/display.c **** 	char buf[40], *bp = buf;
3083:src/display.c **** 	const char *p;
3084:src/display.c **** 	int annuc = 0;
3085:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
3086:src/display.c **** 	int skip = 0;
3087:src/display.c **** 	int x_disp = 0;
3088:src/display.c **** 	const int shift = cur_shift();
3089:src/display.c **** 
3090:src/display.c **** 
3091:src/display.c **** 
3092:src/display.c **** 	if (State2.disp_freeze) {
3093:src/display.c **** 	  State2.disp_freeze = 0;
3094:src/display.c **** 	  State2.disp_temp = 1;
3095:src/display.c **** #ifdef CONSOLE
3096:src/display.c **** 	  JustDisplayed = 1;
3097:src/display.c **** #endif
3098:src/display.c **** 	  ShowRPN = 0;
3099:src/display.c **** 	  return;
3100:src/display.c **** 	}
3101:src/display.c **** 
3102:src/display.c **** 	if (WasDataEntry) {
3103:src/display.c **** #if defined(QTGUI) || defined(IOS)
3104:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3105:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
3106:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
3107:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
3108:src/display.c **** #endif
3109:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3110:src/display.c **** 
3111:src/display.c **** 	  // Erase 7-segment display
3112:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3113:src/display.c **** 	    clr_dot(i);
3114:src/display.c **** 	  }
3115:src/display.c **** 	  goto only_update_x;
3116:src/display.c **** 	}
3117:src/display.c **** 
3118:src/display.c **** 	// Clear display
3119:src/display.c **** 	reset_disp();
3120:src/display.c **** 
3121:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3122:src/display.c **** 	if (State2.cmplx  && !cata) {
3123:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3124:src/display.c **** 	  set_status(buf);
3125:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 70


3126:src/display.c **** 	if (State2.version) {
3127:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3128:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3129:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3130:src/display.c **** #ifndef REALBUILD
3131:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3132:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3133:src/display.c **** #endif
3134:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3135:src/display.c **** 	  set_status(vers);
3136:src/display.c **** 	  skip = 1;
3137:src/display.c **** 	  goto nostk;
3138:src/display.c **** 	} else if (State2.confirm) {
3139:src/display.c **** 	  set_status(S_SURE);
3140:src/display.c **** 	} else if (State2.hyp) {
3141:src/display.c **** 	  bp = scopy(bp, "HYP");
3142:src/display.c **** 	  if (! State2.dot)
3143:src/display.c **** 	    *bp++ = '\235';
3144:src/display.c **** 	  set_status(buf);
3145:src/display.c **** 	} else if (State2.gtodot) {
3146:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3147:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3148:src/display.c **** 	  if (State2.numdigit > 0)
3149:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3150:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3151:src/display.c **** 	  *bp++ = '_';
3152:src/display.c **** 	  set_status(buf);
3153:src/display.c **** 	} else if (State2.rarg) {
3154:src/display.c **** 	  /* Commands with arguments */
3155:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3156:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3157:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3158:src/display.c **** #endif
3159:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3160:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3161:src/display.c **** 	  if (State2.dot) {
3162:src/display.c **** 	    *bp++ = 's';
3163:src/display.c **** 	    *bp++ = '_';
3164:src/display.c **** 	  } else if (shift == SHIFT_F) {
3165:src/display.c **** 	    *bp++ = '\021';
3166:src/display.c **** 	    *bp++ = '_';
3167:src/display.c **** 	  } else {
3168:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3169:src/display.c **** 	       : State2.ind ? 2 
3170:src/display.c **** 	       : num_arg_digits(CmdBase); */
3171:src/display.c **** 	    if (State2.local)
3172:src/display.c **** 	      *bp++ = '.';
3173:src/display.c **** 	    if (State2.numdigit > 0) {
3174:src/display.c **** 	      if (State2.shuffle)
3175:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3176:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3177:src/display.c **** 	      else
3178:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3179:src/display.c **** 	    }
3180:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3181:src/display.c **** 	    *bp++ = '_';
3182:src/display.c **** 	  }
ARM GAS  /tmp/ccCvaEE3.s 			page 71


3183:src/display.c **** 	  set_status(buf);
3184:src/display.c **** 	} else if (State2.test != TST_NONE) {
3185:src/display.c **** 	  *bp++ = 'x';
3186:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3187:src/display.c **** 	  *bp++ = '_';
3188:src/display.c **** 	  *bp++ = '?';
3189:src/display.c **** 	  set_status(buf);
3190:src/display.c **** 	} else if (cata) {
3191:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3192:src/display.c **** 	  char b2[16];
3193:src/display.c **** 	  const char *p;
3194:src/display.c **** 
3195:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3196:src/display.c **** 	  p = catcmd(op, b2);
3197:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3198:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3199:src/display.c **** 	  bp = scopy(bp, p);
3200:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3201:src/display.c **** 	    // State2.disp_small = 1;
3202:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3203:src/display.c **** 	      set_digits_string("0 to 255", 0);
3204:src/display.c **** 	    else
3205:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3206:src/display.c **** 	    skip = 1;
3207:src/display.c **** 	  } else if (State2.runmode) {
3208:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3209:src/display.c **** 	      decNumber x, r;
3210:src/display.c **** 	      decimal64 z;
3211:src/display.c **** 
3212:src/display.c **** 	      getX(&x);
3213:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3214:src/display.c **** 		const unsigned int f = argKIND(op);
3215:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3216:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3217:src/display.c **** 		  update_speed(0);
3218:src/display.c **** 		  fp(&r, &x);
3219:src/display.c **** 		}
3220:src/display.c **** 		else
3221:src/display.c **** 		  set_NaN(&r);
3222:src/display.c **** 	      } else
3223:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3224:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3225:src/display.c **** 	      packed_from_number(&z, &r);
3226:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3227:src/display.c **** 	      skip = 1;
3228:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3229:src/display.c **** 	      REGISTER z, *const x = StackBase;
3230:src/display.c **** 	      copyreg(&z, x);
3231:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3232:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3233:src/display.c **** 	      copyreg(x, &z);
3234:src/display.c **** 	      skip = 1;
3235:src/display.c **** 	    }
3236:src/display.c **** 	  }
3237:src/display.c **** 	  set_status(buf);
3238:src/display.c **** 	} else if (State2.multi) {
3239:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
ARM GAS  /tmp/ccCvaEE3.s 			page 72


3240:src/display.c **** 	  if (State2.numdigit > 0) {
3241:src/display.c **** 	    *bp++ = (char) State2.digval;
3242:src/display.c **** 	    if (State2.numdigit > 1)
3243:src/display.c **** 	      *bp++ = State2.digval2;
3244:src/display.c **** 	  }
3245:src/display.c **** 	  set_status(buf);
3246:src/display.c **** 	} else if (State2.status) {
3247:src/display.c **** 	  show_status();
3248:src/display.c **** 	  skip = 1;
3249:src/display.c **** 	} else if (State2.labellist) {
3250:src/display.c **** 	  show_label();
3251:src/display.c **** 	  skip = 1;
3252:src/display.c **** 	} else if (State2.registerlist) {
3253:src/display.c **** 	  show_registers();
3254:src/display.c **** 	  skip = 1;
3255:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3256:src/display.c **** 	    annunciators();
3257:src/display.c **** 	  }
3258:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3259:src/display.c **** 	} else if (State2.disp_as_alpha) {
3260:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3261:src/display.c **** #endif
3262:src/display.c **** 	} else if (State2.runmode) {
3263:src/display.c **** 	  if (DispMsg) { 
3264:src/display.c **** 	    set_status(DispMsg);
3265:src/display.c **** 	  } else if (DispPlot) {
3266:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3267:src/display.c **** 	  } else if (State2.alphas) {
3268:src/display.c **** #if 0
3269:src/display.c **** 	    set_digits_string("AlpHA", 0);
3270:src/display.c **** #endif
3271:src/display.c **** 	    bp = scopy(buf, Alpha);
3272:src/display.c **** 	    j = State2.alpha_pos;
3273:src/display.c **** 	    if (j != 0) {
3274:src/display.c **** 	      i = slen(buf);
3275:src/display.c **** 	      //				
3276:src/display.c **** 	      j *= 6;
3277:src/display.c **** #ifdef BIGGER_DISPLAY
3278:src/display.c **** 	      if ( i - j >= 20 )
3279:src/display.c **** #else
3280:src/display.c **** 	      if ( i - j >= 12 )
3281:src/display.c **** #endif
3282:src/display.c **** 		{
3283:src/display.c **** 		buf[ (i - j) ] = '\0';
3284:src/display.c **** 		set_status_right(buf);
3285:src/display.c **** 		}
3286:src/display.c **** 	      else {
3287:src/display.c **** 		set_status(buf);
3288:src/display.c **** 	      }
3289:src/display.c **** 	    } else {
3290:src/display.c **** 	      if (shift != SHIFT_N) {
3291:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3292:src/display.c **** 		*bp++ = '\0';
3293:src/display.c **** 	      }
3294:src/display.c **** 	      set_status_right(buf);
3295:src/display.c **** 	    }
3296:src/display.c **** 	  } else {
ARM GAS  /tmp/ccCvaEE3.s 			page 73


3297:src/display.c **** 	    annuc = 1;
3298:src/display.c **** 	  }
3299:src/display.c **** 	} else {
3300:src/display.c **** #ifndef DM42
3301:src/display.c **** 	  show_progtrace(buf);
3302:src/display.c **** #endif
3303:src/display.c **** 	  i = state_pc();
3304:src/display.c **** 	  if (i > 0)
3305:src/display.c **** 	    set_status(prt(getprog(i), buf));
3306:src/display.c **** 	  else
3307:src/display.c **** 	    set_status("");
3308:src/display.c **** 	  set_dot(STO_annun);
3309:src/display.c **** #if 0
3310:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3311:src/display.c **** 	    unsigned short int crc;
3312:src/display.c **** 	    crc = checksum_program();
3313:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3314:src/display.c **** 	    for (i=0; i<4; i++) {
3315:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3316:src/display.c **** 	      crc >>= 4;
3317:src/display.c **** 	      j += SEGS_PER_DIGIT;
3318:src/display.c **** 	    }
3319:src/display.c **** 	    skip = 1;
3320:src/display.c **** 	  }
3321:src/display.c **** 	  else
3322:src/display.c **** #endif
3323:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3324:src/display.c **** 	      annuc = 1;
3325:src/display.c **** 	  goto nostk;
3326:src/display.c **** 	}
3327:src/display.c **** 	show_stack();
3328:src/display.c ****       nostk:	show_flags();
3329:src/display.c **** 	if (!skip) {
3330:src/display.c **** 	  if (State2.runmode) {
3331:src/display.c **** 	  only_update_x:
3332:src/display.c **** 	    p = get_cmdline();
3333:src/display.c **** 	    if (p == NULL || cata) {
3334:src/display.c **** 	      if (ShowRegister != -1) {
3335:src/display.c **** #ifdef INCLUDE_C_LOCK
3336:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3337:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3338:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3339:src/display.c **** 		    SET_POLAR_READY;
3340:src/display.c **** 		  }
3341:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3342:src/display.c **** 		    State2.hms = 0;
3343:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3344:src/display.c **** 		    State2.hms = 1;
3345:src/display.c **** 		  }
3346:src/display.c **** 		  else {
3347:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3348:src/display.c **** 		  }
3349:src/display.c **** 		  x_disp = 1;
3350:src/display.c **** 		}
3351:src/display.c **** 		else {
3352:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3353:src/display.c **** 		  format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/ccCvaEE3.s 			page 74


3354:src/display.c **** 		}
3355:src/display.c **** #else
3356:src/display.c **** 
3357:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3358:src/display.c **** 		format_reg(ShowRegister, CNULL);
3359:src/display.c **** #endif
3360:src/display.c **** 	      }
3361:src/display.c **** 	      else
3362:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3363:src/display.c **** 	    } else {
3364:src/display.c **** 	      disp_x(p);
3365:src/display.c **** 	      x_disp = 1;
3366:src/display.c **** 	    }
3367:src/display.c **** 	    if (WasDataEntry) {
3368:src/display.c **** 	      goto finish;
3369:src/display.c **** 	    }
3370:src/display.c **** 	  } else {
3371:src/display.c **** 	    unsigned int pc = state_pc();
3372:src/display.c **** 	    unsigned int upc = user_pc(pc);
3373:src/display.c **** 	    const int n = nLIB(pc);
3374:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3375:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3376:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3377:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3378:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3379:src/display.c **** #ifndef REALBUILD
3380:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3381:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3382:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3383:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3384:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3385:src/display.c **** 	      char *b=buf;
3386:src/display.c **** 	      char *l=LastDisplayedNumber;
3387:src/display.c **** 	      *l++=' ';
3388:src/display.c **** 	      while(*b) {
3389:src/display.c **** 		*l++=*b++;
3390:src/display.c **** 		*l++=' ';
3391:src/display.c **** 	      }
3392:src/display.c **** 	      *l=0;
3393:src/display.c **** 	    }
3394:src/display.c **** #endif
3395:src/display.c **** 	  }
3396:src/display.c **** 	}
3397:src/display.c **** 	set_annunciators();
3398:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3399:src/display.c **** 	  ShowRPN = 0;
3400:src/display.c **** 	  dot(RPN, 0);
3401:src/display.c **** 	}
3402:src/display.c **** 	// disp_temp disables the <- key
3403:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3404:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3405:src/display.c **** 
3406:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3407:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3408:src/display.c **** 	  annunciators();
3409:src/display.c ****  	State2.hms = 0;
3410:src/display.c **** #else
ARM GAS  /tmp/ccCvaEE3.s 			page 75


3411:src/display.c **** 
3412:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3413:src/display.c **** 	  annunciators();
3414:src/display.c **** 	
3415:src/display.c **** 
3416:src/display.c **** 
3417:src/display.c **** #endif
3418:src/display.c **** 
3419:src/display.c ****       finish:
3420:src/display.c **** 	State2.version = 0;
3421:src/display.c **** 	State2.disp_as_alpha = 0;
3422:src/display.c **** 	State2.smode = SDISP_NORMAL;
3423:src/display.c **** 	State2.invalid_disp = 0;
3424:src/display.c **** 	ShowRegister = regX_idx;
3425:src/display.c **** 	DispMsg = CNULL;
3426:src/display.c **** 	DispPlot = 0;
3427:src/display.c **** 	State2.disp_small = 0;
3428:src/display.c **** 	finish_display();
3429:src/display.c **** #ifdef CONSOLE
3430:src/display.c **** 	JustDisplayed = 1;
3431:src/display.c **** #endif
3432:src/display.c ****       }
3433:src/display.c **** #endif
3434:src/display.c ****       /*
3435:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3436:src/display.c ****        */
3437:src/display.c ****       void frozen_display()
3438:src/display.c ****       {
3439:src/display.c **** 	State2.disp_freeze = 0;
3440:src/display.c **** 	display();
3441:src/display.c **** 	State2.disp_freeze = 1;
3442:src/display.c ****       }
3443:src/display.c **** 
3444:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3445:src/display.c **** 	int glen = *graphic++;
3446:src/display.c **** 	int i, j;
3447:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3448:src/display.c **** 	unsigned long long int mat[6];
3449:src/display.c **** 
3450:src/display.c **** 	xset(mat, 0, sizeof(mat));
3451:src/display.c **** #endif
3452:src/display.c **** #ifndef REALBUILD
3453:src/display.c **** 	forceDispPlot=1;
3454:src/display.c **** #endif
3455:src/display.c **** 	if (glen <= 0)			return;
3456:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3457:src/display.c **** 
3458:src/display.c **** 	for (i=0; i<6; i++)
3459:src/display.c **** 	  for (j=1; j<=glen; j++) {
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	    if (graphic[j] & (1 << i))
3462:src/display.c **** 	      mat[i] |= 1LL << j;
3463:src/display.c **** #else
3464:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3465:src/display.c **** #endif
3466:src/display.c **** 	  }
3467:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccCvaEE3.s 			page 76


3468:src/display.c **** 	set_status_grob(mat);
3469:src/display.c **** #endif
3470:src/display.c ****       }
3471:src/display.c **** 
3472:src/display.c **** 
3473:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3474:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3475:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3476:src/display.c ****        * column is almost always blank.
3477:src/display.c ****        */
3478:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3479:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3480:src/display.c ****       }
3481:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3482:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3483:src/display.c ****       }
3484:src/display.c **** 
3485:src/display.c ****       
3486:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3486 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3487:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3487 2 view .LVU201
3488:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3489:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3490:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3490 2 view .LVU202
3491:src/display.c **** #endif
3492:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3492 2 view .LVU203
3493:src/display.c **** 	int i, j;
 686              		.loc 1 3493 2 view .LVU204
3494:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3494 2 view .LVU205
3486:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3486 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3495:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3496:src/display.c **** 	unsigned long long int mat[6];
3497:src/display.c **** 
3498:src/display.c **** 	xset(mat, 0, sizeof(mat));
3499:src/display.c **** #endif
3500:src/display.c **** #ifndef REALBUILD
3501:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3501 2 view .LVU207
ARM GAS  /tmp/ccCvaEE3.s 			page 77


 701 0004 6B4C     		ldr	r4, .L119
3486:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3486 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3494 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3486:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3486 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3494 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3494 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3501 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3501 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3494 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3501 2 is_stmt 1 view .LVU216
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3494 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3486:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3486 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3501 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3502:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3503:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3503 2 is_stmt 1 view .LVU220
 734              		.loc 1 3503 14 view .LVU221
 735              		.loc 1 3503 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3503 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3503 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3503 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
ARM GAS  /tmp/ccCvaEE3.s 			page 78


3504:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3504 4 is_stmt 1 view .LVU226
 749              		.loc 1 3504 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3504 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3504 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3504 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3505:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3506:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3507:src/display.c **** 	      ++i;
3508:src/display.c **** 	  }
3509:src/display.c **** 	  else {
3510:src/display.c **** 	    ++i;
3511:src/display.c **** 	  }
3512:src/display.c **** 	}
3513:src/display.c **** #endif
3514:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3514 2 is_stmt 1 view .LVU231
3515:src/display.c **** #endif
3516:src/display.c **** #ifdef RP_PREFIX
3517:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3517 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3514:src/display.c **** #endif
 763              		.loc 1 3514 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3517 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3518:src/display.c **** #endif
3519:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3520:src/display.c **** 	findlengths(posns, smallp);
3521:src/display.c **** #endif
3522:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3522 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3514:src/display.c **** #endif
 770              		.loc 1 3514 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3517:src/display.c **** #endif
 772              		.loc 1 3517 2 is_stmt 1 view .LVU237
 773              		.loc 1 3522 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3522 8 view .LVU239
 776              		.loc 1 3522 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3522 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3492:src/display.c **** 	int i, j;
 781              		.loc 1 3492 15 view .LVU242
ARM GAS  /tmp/ccCvaEE3.s 			page 79


 782 0050 9846     		mov	r8, r3
 783              	.LBB200:
3523:src/display.c **** 	  int c;
3524:src/display.c **** 	  int width;
3525:src/display.c **** 	  unsigned char cmap[6];
3526:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3527:src/display.c **** 	  int real_width;
3528:src/display.c **** 	  int current_smallp;
3529:src/display.c **** 
3530:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3531:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3532:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3533:src/display.c **** 	  //           01 -> (not used)
3534:src/display.c **** 	  //           10 -> use big font
3535:src/display.c **** 	  //           11 -> use small font
3536:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3537:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3537 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE200:
3522:src/display.c **** 	  int c;
 787              		.loc 1 3522 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3490:src/display.c **** #endif
 790              		.loc 1 3490 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB209:
3523:src/display.c **** 	  int c;
 794              		.loc 1 3523 4 is_stmt 1 view .LVU246
3524:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3524 4 view .LVU247
3525:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3525 4 view .LVU248
3527:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3527 4 view .LVU249
3528:src/display.c **** 
 798              		.loc 1 3528 4 view .LVU250
 799              		.loc 1 3537 4 view .LVU251
 800              		.loc 1 3537 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3538:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3538 6 is_stmt 1 view .LVU253
 805              		.loc 1 3538 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3539:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3539 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3538:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3538 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
ARM GAS  /tmp/ccCvaEE3.s 			page 80


 814              		.loc 1 3539 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3540:src/display.c **** 	    default:
3541:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3542:src/display.c **** 	      break;
3543:src/display.c **** 	    case 0x40:	current_smallp = 0;
3544:src/display.c **** 	      break;
3545:src/display.c **** 	    case 0x60:	current_smallp = 1;
3546:src/display.c **** 	      break;
3547:src/display.c **** 	    }
3548:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3548 6 view .LVU258
 820              		.loc 1 3548 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3548 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3549:src/display.c **** 	    str += 3;
 831              		.loc 1 3549 6 is_stmt 1 discriminator 4 view .LVU261
3550:src/display.c **** 
3551:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3551 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3549:src/display.c **** 	    str += 3;
 836              		.loc 1 3549 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3551 6 is_stmt 1 discriminator 4 view .LVU264
3552:src/display.c **** 	  } else {
3553:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3554:src/display.c **** 	    real_width = width = charlengths(c);
3555:src/display.c **** 	    current_smallp = smallp;
3556:src/display.c **** 	  }
3557:src/display.c **** 
3558:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3558 4 discriminator 4 view .LVU265
 843              		.loc 1 3558 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3558 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3558 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
ARM GAS  /tmp/ccCvaEE3.s 			page 81


 851              	.L118:
3559:src/display.c **** 	    break;
3560:src/display.c **** 
3561:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3561 4 is_stmt 1 view .LVU269
 853              		.loc 1 3561 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3562:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3562 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3561:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3561 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3562 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3563:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3563 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3564:src/display.c **** 	  }
3565:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3565 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3566:src/display.c **** #else
3567:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3568:src/display.c **** 
3569:src/display.c **** 	  //cmap = &charset[c][0];
3570:src/display.c **** 	  width = charlengths(c);
3571:src/display.c **** 
3572:src/display.c **** 	  if (x + width > b_w+1)
3573:src/display.c **** 	    break;
3574:src/display.c **** 
3575:src/display.c **** 	  /* Decode the packed character bytes */
3576:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3577:src/display.c **** #endif
3578:src/display.c **** 
3579:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3579 4 view .LVU276
 877              		.loc 1 3579 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3579 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
ARM GAS  /tmp/ccCvaEE3.s 			page 82


 886              	.LVL77:
 887              	.L80:
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3580 16 is_stmt 1 view .LVU279
 889              		.loc 1 3580 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3581:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3581 8 is_stmt 1 view .LVU281
 893              		.loc 1 3581 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3580 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3580 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB201:
 907              	.LBB202:
 348:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 348 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 348:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 348 11 view .LVU286
 912              	.LBE202:
 913              	.LBE201:
 914              		.loc 1 3581 8 is_stmt 1 view .LVU287
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3580 25 view .LVU288
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3580 16 view .LVU289
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3580 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3581 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3582:src/display.c **** 		break;
3583:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3584:src/display.c **** 	      if (cmap[i] & (1 << j))
3585:src/display.c **** 		mat[i] |= 1LL << (x+j);
3586:src/display.c **** #else
3587:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3587 8 is_stmt 1 discriminator 2 view .LVU292
ARM GAS  /tmp/ccCvaEE3.s 			page 83


 928              	.LBB206:
 929              	.LBI201:
 347:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 347 6 discriminator 2 view .LVU293
 931              	.LBB203:
 348:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 348 3 discriminator 2 view .LVU294
 348:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 348 11 discriminator 2 view .LVU295
 349:src/display.c **** }
 934              		.loc 1 349 8 discriminator 2 view .LVU296
 935              	.LBE203:
 936              	.LBE206:
 937              		.loc 1 3587 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3587 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB207:
 942              	.LBB204:
 348:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 348 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 348:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 348 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 348:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 348 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE204:
 950              	.LBE207:
3580:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3580 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB208:
 955              	.LBB205:
 349:src/display.c **** }
 956              		.loc 1 349 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 349:src/display.c **** }
 959              		.loc 1 349 8 view .LVU304
 960              	.LBE205:
 961              	.LBE208:
3581:src/display.c **** 		break;
 962              		.loc 1 3581 8 is_stmt 1 view .LVU305
3580:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3580 25 view .LVU306
3580:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3580 16 view .LVU307
3580:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3580 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
ARM GAS  /tmp/ccCvaEE3.s 			page 84


3579:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3579 19 is_stmt 1 view .LVU309
3579:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3579 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3579:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3579 14 is_stmt 1 view .LVU311
3579:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3579 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3588:src/display.c **** #endif
3589:src/display.c **** 	    }
3590:src/display.c **** 	  x += width;
 980              		.loc 1 3590 4 is_stmt 1 view .LVU313
 981              	.LBE209:
3522:src/display.c **** 	  int c;
 982              		.loc 1 3522 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB210:
 986              		.loc 1 3590 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3590 6 view .LVU316
 990              	.LBE210:
3522:src/display.c **** 	  int c;
 991              		.loc 1 3522 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3522:src/display.c **** 	  int c;
 993              		.loc 1 3522 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3522:src/display.c **** 	  int c;
 996              		.loc 1 3522 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB211:
3537:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3537 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE211:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB212:
3523:src/display.c **** 	  int width;
 1005              		.loc 1 3523 4 is_stmt 1 view .LVU321
3524:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3524 4 view .LVU322
3525:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3525 4 view .LVU323
3527:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3527 4 view .LVU324
3528:src/display.c **** 
 1009              		.loc 1 3528 4 view .LVU325
3537:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/ccCvaEE3.s 			page 85


 1010              		.loc 1 3537 4 view .LVU326
3537:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3537 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3553:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3553 6 is_stmt 1 view .LVU328
3553:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3553 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3554:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3554 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3553:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3553 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3554:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3554 6 is_stmt 1 view .LVU332
3554:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3554 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3554:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3554 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3558:src/display.c **** 	    break;
 1034              		.loc 1 3558 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3554:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3554 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3555:src/display.c **** 	  }
 1039              		.loc 1 3555 6 is_stmt 1 view .LVU337
3558:src/display.c **** 	    break;
 1040              		.loc 1 3558 4 view .LVU338
3558:src/display.c **** 	    break;
 1041              		.loc 1 3558 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3558:src/display.c **** 	    break;
 1044              		.loc 1 3558 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3558:src/display.c **** 	    break;
 1049              		.loc 1 3558 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
ARM GAS  /tmp/ccCvaEE3.s 			page 86


 1052              	.LVL95:
3558:src/display.c **** 	    break;
 1053              		.loc 1 3558 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3558:src/display.c **** 	    break;
 1057              		.loc 1 3558 7 view .LVU343
 1058              	.LBE212:
3591:src/display.c **** 	}
3592:src/display.c **** 
3593:src/display.c **** 
3594:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3595:src/display.c **** 	set_status_grob(mat);
3596:src/display.c **** #else
3597:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3597 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3597 20 view .LVU345
 1061              		.loc 1 3597 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3598:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3598 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3597:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3597 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3598 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3597:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3597 27 is_stmt 1 discriminator 3 view .LVU350
3597:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3597 20 discriminator 3 view .LVU351
3597:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3597 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3599:src/display.c **** #endif
3600:src/display.c ****       }
 1081              		.loc 1 3600 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB213:
3545:src/display.c **** 	      break;
 1091              		.loc 1 3545 17 is_stmt 1 view .LVU354
ARM GAS  /tmp/ccCvaEE3.s 			page 87


3546:src/display.c **** 	    }
 1092              		.loc 1 3546 8 view .LVU355
3548:src/display.c **** 	    str += 3;
 1093              		.loc 1 3548 6 view .LVU356
3548:src/display.c **** 	    str += 3;
 1094              		.loc 1 3548 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3545:src/display.c **** 	      break;
 1097              		.loc 1 3545 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3543:src/display.c **** 	      break;
 1104              		.loc 1 3543 17 is_stmt 1 view .LVU359
3544:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3544 8 view .LVU360
3548:src/display.c **** 	    str += 3;
 1106              		.loc 1 3548 6 view .LVU361
3548:src/display.c **** 	    str += 3;
 1107              		.loc 1 3548 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3543:src/display.c **** 	      break;
 1110              		.loc 1 3543 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3543:src/display.c **** 	      break;
 1116              		.loc 1 3543 32 view .LVU364
 1117              	.LBE213:
3505:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3505 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3506:src/display.c **** 	      ++i;
 1123              		.loc 1 3506 6 view .LVU366
3506:src/display.c **** 	      ++i;
 1124              		.loc 1 3506 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB214:
3506:src/display.c **** 	      ++i;
 1133              		.loc 1 3506 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
ARM GAS  /tmp/ccCvaEE3.s 			page 88


 1135              	.LVL104:
3506:src/display.c **** 	      ++i;
 1136              		.loc 1 3506 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3506:src/display.c **** 	      ++i;
 1141              		.loc 1 3506 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE214:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.text.set_exp,"ax",%progbits
 1155              		.align	1
 1156              		.p2align 2,,3
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
 1162              	set_exp:
 1163              	.LVL106:
 1164              	.LFB14:
 450:src/display.c ****   union {
 1165              		.loc 1 450 52 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 451:src/display.c ****     char buf[4];
 1169              		.loc 1 451 3 view .LVU372
 455:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1170              		.loc 1 455 3 view .LVU373
 457:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1171              		.loc 1 457 3 view .LVU374
 463:src/display.c **** #  endif
 1172              		.loc 1 463 3 view .LVU375
 472:src/display.c ****   if (exp < 0) {
 1173              		.loc 1 472 3 view .LVU376
 450:src/display.c ****   union {
 1174              		.loc 1 450 52 is_stmt 0 view .LVU377
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              		.cfi_def_cfa_offset 24
 1177              		.cfi_offset 4, -24
 1178              		.cfi_offset 5, -20
 1179              		.cfi_offset 6, -16
 1180              		.cfi_offset 7, -12
 1181              		.cfi_offset 8, -8
 1182              		.cfi_offset 14, -4
 473:src/display.c ****     negative = 1;
 1183              		.loc 1 473 6 view .LVU378
ARM GAS  /tmp/ccCvaEE3.s 			page 89


 1184 0004 051E     		subs	r5, r0, #0
 450:src/display.c ****   union {
 1185              		.loc 1 450 52 view .LVU379
 1186 0006 82B0     		sub	sp, sp, #8
 1187              		.cfi_def_cfa_offset 32
 450:src/display.c ****   union {
 1188              		.loc 1 450 52 view .LVU380
 1189 0008 0F46     		mov	r7, r1
 1190              	.LVL107:
 473:src/display.c ****     negative = 1;
 1191              		.loc 1 473 3 is_stmt 1 view .LVU381
 473:src/display.c ****     negative = 1;
 1192              		.loc 1 473 6 is_stmt 0 view .LVU382
 1193 000a 67DB     		blt	.L153
 478:src/display.c **** #endif
 1194              		.loc 1 478 13 view .LVU383
 1195 000c 424B     		ldr	r3, .L155
 1196 000e EC17     		asrs	r4, r5, #31
 1197 0010 83FB0513 		smull	r1, r3, r3, r5
 1198              	.LVL108:
 478:src/display.c **** #endif
 1199              		.loc 1 478 13 view .LVU384
 1200 0014 C4EBA314 		rsb	r4, r4, r3, asr #6
 472:src/display.c ****   if (exp < 0) {
 1201              		.loc 1 472 12 view .LVU385
 1202 0018 07F00208 		and	r8, r7, #2
 1203              	.LVL109:
 478:src/display.c **** #endif
 1204              		.loc 1 478 3 is_stmt 1 view .LVU386
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1205              		.loc 1 480 3 view .LVU387
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1206              		.loc 1 480 6 is_stmt 0 view .LVU388
 1207 001c 002A     		cmp	r2, #0
 1208 001e 6CD0     		beq	.L126
 483:src/display.c **** #else
 1209              		.loc 1 483 5 is_stmt 1 view .LVU389
 483:src/display.c **** #else
 1210              		.loc 1 483 8 is_stmt 0 view .LVU390
 1211 0020 3CB1     		cbz	r4, .L127
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1212              		.loc 1 487 2 is_stmt 1 view .LVU391
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 487 5 is_stmt 0 view .LVU392
 1214 0022 B8F1000F 		cmp	r8, #0
 1215 0026 0CD1     		bne	.L124
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 487 17 is_stmt 1 discriminator 1 view .LVU393
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1217              		.loc 1 487 21 is_stmt 0 discriminator 1 view .LVU394
 1218 0028 1446     		mov	r4, r2
 1219              	.LVL110:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1220              		.loc 1 487 24 discriminator 1 view .LVU395
 1221 002a 3A23     		movs	r3, #58
 1222              	.LVL111:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
ARM GAS  /tmp/ccCvaEE3.s 			page 90


 1223              		.loc 1 487 24 discriminator 1 view .LVU396
 1224 002c 04F8013B 		strb	r3, [r4], #1
 1225              	.LVL112:
 494:src/display.c ****     }
 1226              		.loc 1 494 7 is_stmt 1 discriminator 1 view .LVU397
 1227 0030 0BE0     		b	.L128
 1228              	.LVL113:
 1229              	.L127:
 490:src/display.c **** #else
 1230              		.loc 1 490 12 view .LVU398
 490:src/display.c **** #else
 1231              		.loc 1 490 16 is_stmt 0 view .LVU399
 1232 0032 1446     		mov	r4, r2
 1233              	.LVL114:
 490:src/display.c **** #else
 1234              		.loc 1 490 19 view .LVU400
 1235 0034 6523     		movs	r3, #101
 1236              	.LVL115:
 490:src/display.c **** #else
 1237              		.loc 1 490 19 view .LVU401
 1238 0036 04F8013B 		strb	r3, [r4], #1
 1239              	.LVL116:
 494:src/display.c ****     }
 1240              		.loc 1 494 7 is_stmt 1 view .LVU402
 494:src/display.c ****     }
 1241              		.loc 1 494 10 is_stmt 0 view .LVU403
 1242 003a B8F1000F 		cmp	r8, #0
 1243 003e 04D0     		beq	.L128
 490:src/display.c **** #else
 1244              		.loc 1 490 16 view .LVU404
 1245 0040 2246     		mov	r2, r4
 1246              	.LVL117:
 1247              	.L124:
 494:src/display.c ****     }
 1248              		.loc 1 494 21 is_stmt 1 discriminator 1 view .LVU405
 494:src/display.c ****     }
 1249              		.loc 1 494 25 is_stmt 0 discriminator 1 view .LVU406
 1250 0042 1446     		mov	r4, r2
 1251              	.LVL118:
 494:src/display.c ****     }
 1252              		.loc 1 494 28 discriminator 1 view .LVU407
 1253 0044 2D23     		movs	r3, #45
 1254 0046 04F8013B 		strb	r3, [r4], #1
 1255              	.LVL119:
 1256              	.L128:
 542:src/display.c **** #endif
 1257              		.loc 1 542 7 is_stmt 1 view .LVU408
 1258 004a 01AE     		add	r6, sp, #4
 1259 004c 3046     		mov	r0, r6
 1260 004e 0422     		movs	r2, #4
 1261 0050 0021     		movs	r1, #0
 1262 0052 FFF7FEFF 		bl	xset
 1263              	.LVL120:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1264              		.loc 1 544 7 view .LVU409
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1265              		.loc 1 544 10 is_stmt 0 view .LVU410
ARM GAS  /tmp/ccCvaEE3.s 			page 91


 1266 0056 17F0050F 		tst	r7, #5
 1267 005a 33D1     		bne	.L133
 1268              	.L135:
 565:src/display.c ****     no_number:
 1269              		.loc 1 565 2 is_stmt 1 view .LVU411
 1270 005c 2946     		mov	r1, r5
 1271 005e 3046     		mov	r0, r6
 1272 0060 FFF7FEFF 		bl	num_arg
 1273              	.LVL121:
 567:src/display.c ****     }
 1274              		.loc 1 567 7 view .LVU412
 1275 0064 2146     		mov	r1, r4
 1276 0066 3046     		mov	r0, r6
 1277 0068 FFF7FEFF 		bl	set_exp_digits_string
 1278              	.LVL122:
 568:src/display.c **** 
 1279              		.loc 1 568 5 is_stmt 0 view .LVU413
 1280 006c 02B0     		add	sp, sp, #8
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 24
 1283              		@ sp needed
 1284 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1285              	.LVL123:
 1286              	.L136:
 1287              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1288              		.loc 1 474 14 view .LVU414
 1289 0072 4FF00108 		mov	r8, #1
 1290              	.LVL124:
 1291              	.L123:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1292              		.loc 1 497 21 is_stmt 1 view .LVU415
 1293              	.LBB215:
 1294              	.LBI215:
 316:src/display.c **** {
 1295              		.loc 1 316 13 view .LVU416
 1296              	.LBB216:
 318:src/display.c ****   set_dot(EXP_SIGN);
 1297              		.loc 1 318 3 view .LVU417
 318:src/display.c ****   set_dot(EXP_SIGN);
 1298              		.loc 1 318 27 is_stmt 0 view .LVU418
 1299 0076 294B     		ldr	r3, .L155+4
 1300 0078 2D22     		movs	r2, #45
 1301              	.LVL125:
 319:src/display.c **** }
 1302              		.loc 1 319 3 view .LVU419
 1303 007a 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 1304              		.loc 1 318 27 view .LVU420
 1305 007c 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 1306              		.loc 1 319 3 is_stmt 1 view .LVU421
 1307 007e FFF7FEFF 		bl	set_dot
 1308              	.LVL126:
 1309              	.L129:
 319:src/display.c **** }
 1310              		.loc 1 319 3 is_stmt 0 view .LVU422
ARM GAS  /tmp/ccCvaEE3.s 			page 92


 1311              	.LBE216:
 1312              	.LBE215:
 499:src/display.c **** #else
 1313              		.loc 1 499 7 is_stmt 1 view .LVU423
 499:src/display.c **** #else
 1314              		.loc 1 499 10 is_stmt 0 view .LVU424
 1315 0082 002C     		cmp	r4, #0
 1316 0084 E1D0     		beq	.L128
 503:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1317              		.loc 1 503 4 is_stmt 1 view .LVU425
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1318              		.loc 1 517 6 view .LVU426
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1319              		.loc 1 517 23 is_stmt 0 view .LVU427
 1320 0086 264B     		ldr	r3, .L155+8
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1321              		.loc 1 517 10 view .LVU428
 1322 0088 03FB0455 		mla	r5, r3, r4, r5
 1323              	.LVL127:
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1324              		.loc 1 519 6 is_stmt 1 view .LVU429
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1325              		.loc 1 519 9 is_stmt 0 view .LVU430
 1326 008c FB06     		lsls	r3, r7, #27
 1327 008e 0AD5     		bpl	.L130
 1328              	.LBB217:
 523:src/display.c **** 		// Clear digits and separators
 1329              		.loc 1 523 15 view .LVU431
 1330 0090 4F26     		movs	r6, #79
 1331              	.L131:
 1332              	.LVL128:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1333              		.loc 1 525 3 is_stmt 1 discriminator 3 view .LVU432
 1334 0092 3046     		mov	r0, r6
 523:src/display.c **** 		// Clear digits and separators
 1335              		.loc 1 523 66 is_stmt 0 discriminator 3 view .LVU433
 1336 0094 0136     		adds	r6, r6, #1
 1337              	.LVL129:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1338              		.loc 1 525 3 discriminator 3 view .LVU434
 1339 0096 FFF7FEFF 		bl	clr_dot
 1340              	.LVL130:
 523:src/display.c **** 		// Clear digits and separators
 1341              		.loc 1 523 66 is_stmt 1 discriminator 3 view .LVU435
 523:src/display.c **** 		// Clear digits and separators
 1342              		.loc 1 523 41 discriminator 3 view .LVU436
 523:src/display.c **** 		// Clear digits and separators
 1343              		.loc 1 523 8 is_stmt 0 discriminator 3 view .LVU437
 1344 009a 632E     		cmp	r6, #99
 1345 009c F9D1     		bne	.L131
 526:src/display.c **** 	    }
 1346              		.loc 1 526 8 is_stmt 1 view .LVU438
 1347 009e 3E21     		movs	r1, #62
 1348 00a0 5120     		movs	r0, #81
 1349 00a2 FFF7FEFF 		bl	set_dig
 1350              	.LVL131:
 1351              	.L130:
ARM GAS  /tmp/ccCvaEE3.s 			page 93


 526:src/display.c **** 	    }
 1352              		.loc 1 526 8 is_stmt 0 view .LVU439
 1353              	.LBE217:
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1354              		.loc 1 529 6 is_stmt 1 view .LVU440
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1355              		.loc 1 529 9 is_stmt 0 view .LVU441
 1356 00a6 B8F1000F 		cmp	r8, #0
 1357 00aa 2AD1     		bne	.L154
 1358              	.L132:
 533:src/display.c **** 	    flags = 1;
 1359              		.loc 1 533 6 is_stmt 1 view .LVU442
 1360 00ac 04F13001 		add	r1, r4, #48
 1361 00b0 6320     		movs	r0, #99
 542:src/display.c **** #endif
 1362              		.loc 1 542 7 is_stmt 0 view .LVU443
 1363 00b2 01AE     		add	r6, sp, #4
 533:src/display.c **** 	    flags = 1;
 1364              		.loc 1 533 6 view .LVU444
 1365 00b4 FFF7FEFF 		bl	set_dig
 1366              	.LVL132:
 534:src/display.c **** 	  }
 1367              		.loc 1 534 6 is_stmt 1 view .LVU445
 542:src/display.c **** #endif
 1368              		.loc 1 542 7 view .LVU446
 1369 00b8 3046     		mov	r0, r6
 1370 00ba 0422     		movs	r2, #4
 1371 00bc 0021     		movs	r1, #0
 1372 00be FFF7FEFF 		bl	xset
 1373              	.LVL133:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1374              		.loc 1 544 7 view .LVU447
 542:src/display.c **** #endif
 1375              		.loc 1 542 7 is_stmt 0 view .LVU448
 1376 00c2 0024     		movs	r4, #0
 1377              	.LVL134:
 1378              	.L133:
 545:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1379              		.loc 1 545 2 is_stmt 1 view .LVU449
 1380 00c4 2946     		mov	r1, r5
 1381 00c6 0322     		movs	r2, #3
 1382 00c8 3046     		mov	r0, r6
 1383 00ca FFF7FEFF 		bl	num_arg_0
 1384              	.LVL135:
 567:src/display.c ****     }
 1385              		.loc 1 567 7 view .LVU450
 1386 00ce 2146     		mov	r1, r4
 1387 00d0 3046     		mov	r0, r6
 1388 00d2 FFF7FEFF 		bl	set_exp_digits_string
 1389              	.LVL136:
 568:src/display.c **** 
 1390              		.loc 1 568 5 is_stmt 0 view .LVU451
 1391 00d6 02B0     		add	sp, sp, #8
 1392              		.cfi_remember_state
 1393              		.cfi_def_cfa_offset 24
 1394              		@ sp needed
 1395 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccCvaEE3.s 			page 94


 1396              	.LVL137:
 1397              	.L153:
 1398              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1399              		.loc 1 474 5 is_stmt 1 view .LVU452
 475:src/display.c ****   }
 1400              		.loc 1 475 5 view .LVU453
 478:src/display.c **** #endif
 1401              		.loc 1 478 13 is_stmt 0 view .LVU454
 1402 00dc 0E4C     		ldr	r4, .L155
 475:src/display.c ****   }
 1403              		.loc 1 475 9 view .LVU455
 1404 00de 6D42     		rsbs	r5, r5, #0
 1405              	.LVL138:
 478:src/display.c **** #endif
 1406              		.loc 1 478 3 is_stmt 1 view .LVU456
 478:src/display.c **** #endif
 1407              		.loc 1 478 13 is_stmt 0 view .LVU457
 1408 00e0 A4FB0534 		umull	r3, r4, r4, r5
 1409 00e4 A409     		lsrs	r4, r4, #6
 1410              	.LVL139:
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1411              		.loc 1 480 3 is_stmt 1 view .LVU458
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1412              		.loc 1 480 6 is_stmt 0 view .LVU459
 1413 00e6 002A     		cmp	r2, #0
 1414 00e8 C3D0     		beq	.L136
 483:src/display.c **** #else
 1415              		.loc 1 483 5 is_stmt 1 view .LVU460
 483:src/display.c **** #else
 1416              		.loc 1 483 8 is_stmt 0 view .LVU461
 1417 00ea 002C     		cmp	r4, #0
 1418 00ec A9D1     		bne	.L124
 490:src/display.c **** #else
 1419              		.loc 1 490 12 is_stmt 1 view .LVU462
 490:src/display.c **** #else
 1420              		.loc 1 490 16 is_stmt 0 view .LVU463
 1421 00ee 1446     		mov	r4, r2
 1422              	.LVL140:
 490:src/display.c **** #else
 1423              		.loc 1 490 19 view .LVU464
 1424 00f0 6523     		movs	r3, #101
 1425 00f2 04F8013B 		strb	r3, [r4], #1
 1426              	.LVL141:
 494:src/display.c ****     }
 1427              		.loc 1 494 7 is_stmt 1 view .LVU465
 490:src/display.c **** #else
 1428              		.loc 1 490 16 is_stmt 0 view .LVU466
 1429 00f6 2246     		mov	r2, r4
 1430 00f8 A3E7     		b	.L124
 1431              	.LVL142:
 1432              	.L126:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1433              		.loc 1 497 7 is_stmt 1 view .LVU467
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1434              		.loc 1 497 10 is_stmt 0 view .LVU468
 1435 00fa B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 95


 1436 00fe C0D0     		beq	.L129
 1437 0100 B9E7     		b	.L123
 1438              	.LVL143:
 1439              	.L154:
 530:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1440              		.loc 1 530 8 is_stmt 1 view .LVU469
 1441              	.LBB218:
 1442              	.LBI218:
 322:src/display.c **** {
 1443              		.loc 1 322 13 view .LVU470
 1444              	.LBB219:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1445              		.loc 1 324 3 view .LVU471
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1446              		.loc 1 324 27 is_stmt 0 view .LVU472
 1447 0102 064B     		ldr	r3, .L155+4
 1448 0104 2022     		movs	r2, #32
 325:src/display.c **** }
 1449              		.loc 1 325 3 view .LVU473
 1450 0106 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1451              		.loc 1 324 27 view .LVU474
 1452 0108 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 1453              		.loc 1 325 3 is_stmt 1 view .LVU475
 1454 010a FFF7FEFF 		bl	clr_dot
 1455              	.LVL144:
 1456              	.LBE219:
 1457              	.LBE218:
 531:src/display.c **** 	    }
 1458              		.loc 1 531 8 view .LVU476
 1459 010e 2D21     		movs	r1, #45
 1460 0110 5A20     		movs	r0, #90
 1461 0112 FFF7FEFF 		bl	set_dig
 1462              	.LVL145:
 1463 0116 C9E7     		b	.L132
 1464              	.L156:
 1465              		.align	2
 1466              	.L155:
 1467 0118 D34D6210 		.word	274877907
 1468 011c 00000000 		.word	LastDisplayedExponent
 1469 0120 18FCFFFF 		.word	-1000
 1470              		.cfi_endproc
 1471              	.LFE14:
 1473              		.section	.text.set_separator.part.0,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_separator.part.0:
 1482              	.LVL146:
 1483              	.LFB50:
 375:src/display.c ****   if (sep == SEP_NONE)
 1484              		.loc 1 375 14 view -0
 1485              		.cfi_startproc
ARM GAS  /tmp/ccCvaEE3.s 			page 96


 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/display.c ****     set_dot(posn+7);
 1488              		.loc 1 382 5 view .LVU478
 375:src/display.c ****   if (sep == SEP_NONE)
 1489              		.loc 1 375 14 is_stmt 0 view .LVU479
 1490 0000 70B5     		push	{r4, r5, r6, lr}
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 4, -16
 1493              		.cfi_offset 5, -12
 1494              		.cfi_offset 6, -8
 1495              		.cfi_offset 14, -4
 375:src/display.c ****   if (sep == SEP_NONE)
 1496              		.loc 1 375 14 view .LVU480
 1497 0002 0546     		mov	r5, r0
 1498 0004 0E46     		mov	r6, r1
 383:src/display.c ****     if (sep == SEP_COMMA)
 1499              		.loc 1 383 5 view .LVU481
 1500 0006 0238     		subs	r0, r0, #2
 1501              	.LVL147:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1502              		.loc 1 383 5 view .LVU482
 1503 0008 FFF7FEFF 		bl	set_dot
 1504              	.LVL148:
 384:src/display.c ****       set_dot(posn+8);
 1505              		.loc 1 384 8 view .LVU483
 1506 000c 012E     		cmp	r6, #1
 382:src/display.c ****     set_dot(posn+7);
 1507              		.loc 1 382 10 view .LVU484
 1508 000e A5F10904 		sub	r4, r5, #9
 1509              	.LVL149:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1510              		.loc 1 383 5 is_stmt 1 view .LVU485
 384:src/display.c ****       set_dot(posn+8);
 1511              		.loc 1 384 5 view .LVU486
 384:src/display.c ****       set_dot(posn+8);
 1512              		.loc 1 384 8 is_stmt 0 view .LVU487
 1513 0012 0CD0     		beq	.L161
 387:src/display.c **** #endif
 1514              		.loc 1 387 39 view .LVU488
 1515 0014 2E21     		movs	r1, #46
 1516              	.L158:
 387:src/display.c **** #endif
 1517              		.loc 1 387 30 view .LVU489
 1518 0016 084B     		ldr	r3, .L162
 387:src/display.c **** #endif
 1519              		.loc 1 387 39 view .LVU490
 1520 0018 084A     		ldr	r2, .L162+4
 387:src/display.c **** #endif
 1521              		.loc 1 387 30 view .LVU491
 1522 001a 83FB0403 		smull	r0, r3, r3, r4
 1523 001e E417     		asrs	r4, r4, #31
 1524              	.LVL150:
 387:src/display.c **** #endif
 1525              		.loc 1 387 30 view .LVU492
 1526 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 387:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 97


 1527              		.loc 1 387 35 view .LVU493
 1528 0024 0134     		adds	r4, r4, #1
 391:src/display.c **** 
 1529              		.loc 1 391 1 view .LVU494
 1530 0026 0020     		movs	r0, #0
 387:src/display.c **** #endif
 1531              		.loc 1 387 39 view .LVU495
 1532 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1533              	.LVL151:
 391:src/display.c **** 
 1534              		.loc 1 391 1 view .LVU496
 1535 002c 70BD     		pop	{r4, r5, r6, pc}
 1536              	.LVL152:
 1537              	.L161:
 385:src/display.c **** #ifndef REALBUILD
 1538              		.loc 1 385 7 is_stmt 1 view .LVU497
 1539 002e 681E     		subs	r0, r5, #1
 1540 0030 FFF7FEFF 		bl	set_dot
 1541              	.LVL153:
 387:src/display.c **** #endif
 1542              		.loc 1 387 5 view .LVU498
 387:src/display.c **** #endif
 1543              		.loc 1 387 39 is_stmt 0 view .LVU499
 1544 0034 2C21     		movs	r1, #44
 1545 0036 EEE7     		b	.L158
 1546              	.L163:
 1547              		.align	2
 1548              	.L162:
 1549 0038 398EE338 		.word	954437177
 1550 003c 00000000 		.word	LastDisplayedNumber
 1551              		.cfi_endproc
 1552              	.LFE50:
 1554              		.section	.text.set_decimal,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv4-sp-d16
 1562              	set_decimal:
 1563              	.LVL154:
 1564              	.LFB8:
 357:src/display.c ****   if (res) {
 1565              		.loc 1 357 87 is_stmt 1 view -0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1569              		.loc 1 358 3 view .LVU501
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1570              		.loc 1 358 6 is_stmt 0 view .LVU502
 1571 0000 3AB1     		cbz	r2, .L165
 359:src/display.c ****   } else {
 1572              		.loc 1 359 5 is_stmt 1 view .LVU503
 359:src/display.c ****   } else {
 1573              		.loc 1 359 12 is_stmt 0 view .LVU504
 1574 0002 0029     		cmp	r1, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 98


 359:src/display.c ****   } else {
 1575              		.loc 1 359 9 view .LVU505
 1576 0004 1046     		mov	r0, r2
 1577              	.LVL155:
 359:src/display.c ****   } else {
 1578              		.loc 1 359 12 view .LVU506
 1579 0006 0CBF     		ite	eq
 1580 0008 2E23     		moveq	r3, #46
 1581 000a 2C23     		movne	r3, #44
 1582 000c 00F8013B 		strb	r3, [r0], #1
 1583              	.LVL156:
 369:src/display.c **** 
 1584              		.loc 1 369 1 view .LVU507
 1585 0010 7047     		bx	lr
 1586              	.LVL157:
 1587              	.L165:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1588              		.loc 1 361 5 is_stmt 1 view .LVU508
 357:src/display.c ****   if (res) {
 1589              		.loc 1 357 87 is_stmt 0 view .LVU509
 1590 0012 10B5     		push	{r4, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 4, -8
 1593              		.cfi_offset 14, -4
 1594 0014 82B0     		sub	sp, sp, #8
 1595              		.cfi_def_cfa_offset 16
 1596 0016 0446     		mov	r4, r0
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1597              		.loc 1 361 5 view .LVU510
 1598 0018 0730     		adds	r0, r0, #7
 1599              	.LVL158:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1600              		.loc 1 361 5 view .LVU511
 1601 001a 0191     		str	r1, [sp, #4]
 1602 001c FFF7FEFF 		bl	set_dot
 1603              	.LVL159:
 362:src/display.c ****       set_dot(posn+8);
 1604              		.loc 1 362 5 is_stmt 1 view .LVU512
 362:src/display.c ****       set_dot(posn+8);
 1605              		.loc 1 362 8 is_stmt 0 view .LVU513
 1606 0020 0199     		ldr	r1, [sp, #4]
 1607 0022 69B9     		cbnz	r1, .L174
 1608              	.LBB222:
 1609              	.LBB223:
 365:src/display.c **** #endif
 1610              		.loc 1 365 38 view .LVU514
 1611 0024 2E22     		movs	r2, #46
 1612              	.L168:
 365:src/display.c **** #endif
 1613              		.loc 1 365 30 view .LVU515
 1614 0026 0948     		ldr	r0, .L175
 365:src/display.c **** #endif
 1615              		.loc 1 365 38 view .LVU516
 1616 0028 094B     		ldr	r3, .L175+4
 365:src/display.c **** #endif
 1617              		.loc 1 365 30 view .LVU517
 1618 002a 80FB0410 		smull	r1, r0, r0, r4
ARM GAS  /tmp/ccCvaEE3.s 			page 99


 1619 002e E417     		asrs	r4, r4, #31
 1620              	.LVL160:
 365:src/display.c **** #endif
 1621              		.loc 1 365 30 view .LVU518
 1622 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 365:src/display.c **** #endif
 1623              		.loc 1 365 35 view .LVU519
 1624 0034 0134     		adds	r4, r4, #1
 365:src/display.c **** #endif
 1625              		.loc 1 365 38 view .LVU520
 1626 0036 0020     		movs	r0, #0
 1627 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1628              	.LVL161:
 368:src/display.c **** }
 1629              		.loc 1 368 3 is_stmt 1 view .LVU521
 368:src/display.c **** }
 1630              		.loc 1 368 3 is_stmt 0 view .LVU522
 1631              	.LBE223:
 1632              	.LBE222:
 368:src/display.c **** }
 1633              		.loc 1 368 3 is_stmt 1 view .LVU523
 369:src/display.c **** 
 1634              		.loc 1 369 1 is_stmt 0 view .LVU524
 1635 003c 02B0     		add	sp, sp, #8
 1636              		.cfi_remember_state
 1637              		.cfi_def_cfa_offset 8
 1638              		@ sp needed
 1639 003e 10BD     		pop	{r4, pc}
 1640              	.LVL162:
 1641              	.L174:
 1642              		.cfi_restore_state
 363:src/display.c **** #ifndef REALBUILD
 1643              		.loc 1 363 7 is_stmt 1 view .LVU525
 1644 0040 04F10800 		add	r0, r4, #8
 1645 0044 FFF7FEFF 		bl	set_dot
 1646              	.LVL163:
 1647              	.LBB225:
 1648              	.LBI222:
 357:src/display.c ****   if (res) {
 1649              		.loc 1 357 14 view .LVU526
 1650              	.LBB224:
 365:src/display.c **** #endif
 1651              		.loc 1 365 5 view .LVU527
 365:src/display.c **** #endif
 1652              		.loc 1 365 38 is_stmt 0 view .LVU528
 1653 0048 2C22     		movs	r2, #44
 1654 004a ECE7     		b	.L168
 1655              	.L176:
 1656              		.align	2
 1657              	.L175:
 1658 004c 398EE338 		.word	954437177
 1659 0050 00000000 		.word	LastDisplayedNumber
 1660              	.LBE224:
 1661              	.LBE225:
 1662              		.cfi_endproc
 1663              	.LFE8:
 1665              		.section	.text.set_digits_string,"ax",%progbits
ARM GAS  /tmp/ccCvaEE3.s 			page 100


 1666              		.align	1
 1667              		.p2align 2,,3
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	set_digits_string:
 1674              	.LVL164:
 1675              	.LFB12:
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1676              		.loc 1 422 55 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1680              		.loc 1 423 3 view .LVU530
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1681              		.loc 1 422 55 is_stmt 0 view .LVU531
 1682 0000 38B5     		push	{r3, r4, r5, lr}
 1683              		.cfi_def_cfa_offset 16
 1684              		.cfi_offset 3, -16
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 5, -8
 1687              		.cfi_offset 14, -4
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1688              		.loc 1 423 10 view .LVU532
 1689 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1690              		.loc 1 423 10 is_stmt 1 view .LVU533
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1691              		.loc 1 423 3 is_stmt 0 view .LVU534
 1692 0004 E3B1     		cbz	r3, .L177
 1693 0006 0546     		mov	r5, r0
 1694 0008 0C46     		mov	r4, r1
 1695 000a 06E0     		b	.L181
 1696              	.LVL165:
 1697              	.L179:
 1698              	.LBB226:
 1699              	.LBB227:
 417:src/display.c ****   return res;
 1700              		.loc 1 417 8 view .LVU535
 1701 000c 2046     		mov	r0, r4
 1702 000e FFF7FEFF 		bl	set_dig
 1703              	.LVL166:
 418:src/display.c **** }
 1704              		.loc 1 418 3 is_stmt 1 view .LVU536
 418:src/display.c **** }
 1705              		.loc 1 418 3 is_stmt 0 view .LVU537
 1706              	.LBE227:
 1707              	.LBE226:
 428:src/display.c ****     }
 1708              		.loc 1 428 7 is_stmt 1 view .LVU538
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1709              		.loc 1 423 10 is_stmt 0 view .LVU539
 1710 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1711              	.LVL167:
 428:src/display.c ****     }
ARM GAS  /tmp/ccCvaEE3.s 			page 101


 1712              		.loc 1 428 9 view .LVU540
 1713 0016 0934     		adds	r4, r4, #9
 1714              	.LVL168:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1715              		.loc 1 423 24 is_stmt 1 view .LVU541
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1716              		.loc 1 423 10 view .LVU542
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1717              		.loc 1 423 3 is_stmt 0 view .LVU543
 1718 0018 93B1     		cbz	r3, .L177
 1719              	.LVL169:
 1720              	.L181:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1721              		.loc 1 424 5 is_stmt 1 view .LVU544
 425:src/display.c ****     else {
 1722              		.loc 1 425 7 view .LVU545
 427:src/display.c ****       j += SEGS_PER_DIGIT;
 1723              		.loc 1 427 7 view .LVU546
 1724              	.LBB230:
 1725              	.LBI226:
 415:src/display.c ****   if (res) *res++ = ch;
 1726              		.loc 1 415 14 view .LVU547
 1727              	.LBB228:
 416:src/display.c ****   else	set_dig(base, ch);
 1728              		.loc 1 416 3 view .LVU548
 417:src/display.c ****   return res;
 1729              		.loc 1 417 8 view .LVU549
 1730              	.LBE228:
 1731              	.LBE230:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1732              		.loc 1 424 21 is_stmt 0 view .LVU550
 1733 001a 03F0FD02 		and	r2, r3, #253
 1734 001e 2C2A     		cmp	r2, #44
 425:src/display.c ****     else {
 1735              		.loc 1 425 7 view .LVU551
 1736 0020 A4F10900 		sub	r0, r4, #9
 1737 0024 4FF00002 		mov	r2, #0
 1738              	.LBB231:
 1739              	.LBB229:
 417:src/display.c ****   return res;
 1740              		.loc 1 417 8 view .LVU552
 1741 0028 1946     		mov	r1, r3
 1742              	.LBE229:
 1743              	.LBE231:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1744              		.loc 1 424 21 view .LVU553
 1745 002a EFD1     		bne	.L179
 425:src/display.c ****     else {
 1746              		.loc 1 425 7 view .LVU554
 1747 002c B3F12E01 		subs	r1, r3, #46
 1748 0030 18BF     		it	ne
 1749 0032 0121     		movne	r1, #1
 1750 0034 FFF7FEFF 		bl	set_decimal
 1751              	.LVL170:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1752              		.loc 1 423 24 is_stmt 1 view .LVU555
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
ARM GAS  /tmp/ccCvaEE3.s 			page 102


 1753              		.loc 1 423 10 view .LVU556
 1754 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1755              	.LVL171:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1756              		.loc 1 423 3 is_stmt 0 view .LVU557
 1757 003c 002B     		cmp	r3, #0
 1758 003e ECD1     		bne	.L181
 1759              	.LVL172:
 1760              	.L177:
 431:src/display.c **** 
 1761              		.loc 1 431 1 view .LVU558
 1762 0040 38BD     		pop	{r3, r4, r5, pc}
 1763              		.cfi_endproc
 1764              	.LFE12:
 1766 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1767              		.align	2
 1768              	.LC0:
 1769 0000 4E614E00 		.ascii	"NaN\000"
 1770              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1771              		.align	1
 1772              		.p2align 2,,3
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	check_special_dn.isra.0:
 1779              	.LVL173:
 1780              	.LFB52:
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1781              		.loc 1 1627 18 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1628:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1785              		.loc 1 1628 2 view .LVU560
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1786              		.loc 1 1627 18 is_stmt 0 view .LVU561
 1787 0000 38B5     		push	{r3, r4, r5, lr}
 1788              		.cfi_def_cfa_offset 16
 1789              		.cfi_offset 3, -16
 1790              		.cfi_offset 4, -12
 1791              		.cfi_offset 5, -8
 1792              		.cfi_offset 14, -4
1628:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1793              		.loc 1 1628 6 view .LVU562
 1794 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1795              		.loc 1 1627 18 view .LVU563
 1796 0004 0546     		mov	r5, r0
1628:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1797              		.loc 1 1628 5 view .LVU564
 1798 0006 13F07000 		ands	r0, r3, #112
 1799 000a 09D0     		beq	.L187
1629:src/display.c **** 	    if (res) {
 1800              		.loc 1 1629 4 is_stmt 1 view .LVU565
1629:src/display.c **** 	    if (res) {
 1801              		.loc 1 1629 7 is_stmt 0 view .LVU566
ARM GAS  /tmp/ccCvaEE3.s 			page 103


 1802 000c 13F0300F 		tst	r3, #48
 1803 0010 0C46     		mov	r4, r1
 1804 0012 06D0     		beq	.L189
 1805              	.LVL174:
 1806              	.LBB234:
 1807              	.LBI234:
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1808              		.loc 1 1627 18 is_stmt 1 view .LVU567
 1809              	.LBB235:
1630:src/display.c **** 	      scopy(res, "NaN");
 1810              		.loc 1 1630 6 view .LVU568
1630:src/display.c **** 	      scopy(res, "NaN");
 1811              		.loc 1 1630 9 is_stmt 0 view .LVU569
 1812 0014 89B1     		cbz	r1, .L190
1631:src/display.c **** 	    } else {
 1813              		.loc 1 1631 8 is_stmt 1 view .LVU570
 1814 0016 0846     		mov	r0, r1
 1815 0018 1849     		ldr	r1, .L203
 1816              	.LVL175:
1631:src/display.c **** 	    } else {
 1817              		.loc 1 1631 8 is_stmt 0 view .LVU571
 1818 001a FFF7FEFF 		bl	scopy
 1819              	.LVL176:
1631:src/display.c **** 	    } else {
 1820              		.loc 1 1631 8 view .LVU572
 1821 001e 0120     		movs	r0, #1
 1822              	.LVL177:
 1823              	.L187:
1631:src/display.c **** 	    } else {
 1824              		.loc 1 1631 8 view .LVU573
 1825              	.LBE235:
 1826              	.LBE234:
1663:src/display.c **** 
 1827              		.loc 1 1663 7 view .LVU574
 1828 0020 38BD     		pop	{r3, r4, r5, pc}
 1829              	.LVL178:
 1830              	.L189:
1641:src/display.c **** 	      if (res) *res++ = '-';
 1831              		.loc 1 1641 6 is_stmt 1 view .LVU575
1641:src/display.c **** 	      if (res) *res++ = '-';
 1832              		.loc 1 1641 9 is_stmt 0 view .LVU576
 1833 0022 1B06     		lsls	r3, r3, #24
 1834 0024 04D4     		bmi	.L202
1645:src/display.c **** 	      *res++ = '\237';
 1835              		.loc 1 1645 6 is_stmt 1 view .LVU577
1645:src/display.c **** 	      *res++ = '\237';
 1836              		.loc 1 1645 9 is_stmt 0 view .LVU578
 1837 0026 B9B1     		cbz	r1, .L194
 1838              	.LVL179:
 1839              	.L193:
1646:src/display.c **** 	    else {
 1840              		.loc 1 1646 8 is_stmt 1 view .LVU579
1646:src/display.c **** 	    else {
 1841              		.loc 1 1646 15 is_stmt 0 view .LVU580
 1842 0028 9F23     		movs	r3, #159
 1843 002a 2370     		strb	r3, [r4]
1659:src/display.c **** 	  }
ARM GAS  /tmp/ccCvaEE3.s 			page 104


 1844              		.loc 1 1659 13 view .LVU581
 1845 002c 0120     		movs	r0, #1
1663:src/display.c **** 
 1846              		.loc 1 1663 7 view .LVU582
 1847 002e 38BD     		pop	{r3, r4, r5, pc}
 1848              	.LVL180:
 1849              	.L202:
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1850              		.loc 1 1642 8 is_stmt 1 view .LVU583
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1851              		.loc 1 1642 11 is_stmt 0 view .LVU584
 1852 0030 71B1     		cbz	r1, .L192
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1853              		.loc 1 1642 17 is_stmt 1 view .LVU585
 1854              	.LVL181:
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1855              		.loc 1 1642 24 is_stmt 0 view .LVU586
 1856 0032 2D23     		movs	r3, #45
 1857 0034 04F8013B 		strb	r3, [r4], #1
 1858              	.LVL182:
1645:src/display.c **** 	      *res++ = '\237';
 1859              		.loc 1 1645 6 is_stmt 1 view .LVU587
 1860 0038 F6E7     		b	.L193
 1861              	.LVL183:
 1862              	.L190:
 1863              	.LBB237:
 1864              	.LBB236:
1633:src/display.c **** #ifndef REALBUILD
 1865              		.loc 1 1633 8 view .LVU588
 1866 003a 1148     		ldr	r0, .L203+4
 1867 003c FFF7FEFF 		bl	set_digits_string
 1868              	.LVL184:
1635:src/display.c **** 	      forceDispPlot=0;
 1869              		.loc 1 1635 8 view .LVU589
 1870 0040 1049     		ldr	r1, .L203+8
 1871 0042 1148     		ldr	r0, .L203+12
 1872 0044 FFF7FEFF 		bl	scopy
 1873              	.LVL185:
1636:src/display.c **** #endif
 1874              		.loc 1 1636 8 view .LVU590
1636:src/display.c **** #endif
 1875              		.loc 1 1636 21 is_stmt 0 view .LVU591
 1876 0048 104B     		ldr	r3, .L203+16
 1877 004a 1C70     		strb	r4, [r3]
 1878 004c 0120     		movs	r0, #1
 1879              	.LBE236:
 1880              	.LBE237:
1663:src/display.c **** 
 1881              		.loc 1 1663 7 view .LVU592
 1882 004e 38BD     		pop	{r3, r4, r5, pc}
 1883              	.LVL186:
 1884              	.L192:
1643:src/display.c **** 	    }
 1885              		.loc 1 1643 13 is_stmt 1 view .LVU593
 1886 0050 2D21     		movs	r1, #45
 1887              	.LVL187:
1643:src/display.c **** 	    }
ARM GAS  /tmp/ccCvaEE3.s 			page 105


 1888              		.loc 1 1643 13 is_stmt 0 view .LVU594
 1889 0052 0920     		movs	r0, #9
 1890 0054 FFF7FEFF 		bl	set_dig
 1891              	.LVL188:
1645:src/display.c **** 	      *res++ = '\237';
 1892              		.loc 1 1645 6 is_stmt 1 view .LVU595
 1893              	.L194:
1648:src/display.c **** #ifndef REALBUILD
 1894              		.loc 1 1648 8 view .LVU596
 1895 0058 1221     		movs	r1, #18
 1896 005a 0D48     		ldr	r0, .L203+20
 1897 005c FFF7FEFF 		bl	set_digits_string
 1898              	.LVL189:
1650:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1899              		.loc 1 1650 8 view .LVU597
1650:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1900              		.loc 1 1650 11 is_stmt 0 view .LVU598
 1901 0060 95F90030 		ldrsb	r3, [r5]
1654:src/display.c **** 	      }
 1902              		.loc 1 1654 3 view .LVU599
 1903 0064 0848     		ldr	r0, .L203+12
1650:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1904              		.loc 1 1650 11 view .LVU600
 1905 0066 002B     		cmp	r3, #0
1651:src/display.c **** 	      }
 1906              		.loc 1 1651 3 is_stmt 1 view .LVU601
 1907 0068 B4BF     		ite	lt
 1908 006a 0A49     		ldrlt	r1, .L203+24
1654:src/display.c **** 	      }
 1909              		.loc 1 1654 3 view .LVU602
 1910 006c 0A49     		ldrge	r1, .L203+28
 1911 006e FFF7FEFF 		bl	scopy
 1912              	.LVL190:
1656:src/display.c **** #endif
 1913              		.loc 1 1656 8 view .LVU603
1656:src/display.c **** #endif
 1914              		.loc 1 1656 21 is_stmt 0 view .LVU604
 1915 0072 064B     		ldr	r3, .L203+16
 1916 0074 0022     		movs	r2, #0
 1917 0076 1A70     		strb	r2, [r3]
1659:src/display.c **** 	  }
 1918              		.loc 1 1659 13 view .LVU605
 1919 0078 0120     		movs	r0, #1
1663:src/display.c **** 
 1920              		.loc 1 1663 7 view .LVU606
 1921 007a 38BD     		pop	{r3, r4, r5, pc}
 1922              	.L204:
 1923              		.align	2
 1924              	.L203:
 1925 007c 00000000 		.word	.LC0
 1926 0080 00000000 		.word	.LANCHOR3
 1927 0084 00000000 		.word	.LANCHOR4
 1928 0088 00000000 		.word	LastDisplayedNumber
 1929 008c 00000000 		.word	forceDispPlot
 1930 0090 00000000 		.word	.LANCHOR5
 1931 0094 00000000 		.word	.LANCHOR6
 1932 0098 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccCvaEE3.s 			page 106


 1933              		.cfi_endproc
 1934              	.LFE52:
 1936              		.section	.text.set_x_hms,"ax",%progbits
 1937              		.align	1
 1938              		.p2align 2,,3
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	set_x_hms:
 1945              	.LVL191:
 1946              	.LFB22:
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1947              		.loc 1 1708 62 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 200
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1709:src/display.c **** 	int j=0;
 1951              		.loc 1 1709 2 view .LVU608
1710:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1952              		.loc 1 1710 2 view .LVU609
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1953              		.loc 1 1708 62 is_stmt 0 view .LVU610
 1954 0000 30B5     		push	{r4, r5, lr}
 1955              		.cfi_def_cfa_offset 12
 1956              		.cfi_offset 4, -12
 1957              		.cfi_offset 5, -8
 1958              		.cfi_offset 14, -4
 1959 0002 B5B0     		sub	sp, sp, #212
 1960              		.cfi_def_cfa_offset 224
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1961              		.loc 1 1708 62 view .LVU611
 1962 0004 0446     		mov	r4, r0
1710:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1963              		.loc 1 1710 6 view .LVU612
 1964 0006 0023     		movs	r3, #0
1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1965              		.loc 1 1714 6 view .LVU613
 1966 0008 0830     		adds	r0, r0, #8
 1967              	.LVL192:
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1968              		.loc 1 1708 62 view .LVU614
 1969 000a 0D46     		mov	r5, r1
1710:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1970              		.loc 1 1710 6 view .LVU615
 1971 000c 0393     		str	r3, [sp, #12]
1711:src/display.c **** 	unsigned int hr, min, sec, fs;
 1972              		.loc 1 1711 2 is_stmt 1 view .LVU616
 1973              	.LVL193:
1712:src/display.c **** 
 1974              		.loc 1 1712 2 view .LVU617
1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1975              		.loc 1 1714 2 view .LVU618
1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1976              		.loc 1 1714 6 is_stmt 0 view .LVU619
 1977 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1978              	.LVL194:
ARM GAS  /tmp/ccCvaEE3.s 			page 107


1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1979              		.loc 1 1714 5 view .LVU620
 1980 0012 48B1     		cbz	r0, .L206
1715:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1981              		.loc 1 1715 4 is_stmt 1 view .LVU621
1715:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1982              		.loc 1 1715 7 is_stmt 0 view .LVU622
 1983 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1984 0016 5B06     		lsls	r3, r3, #25
 1985 0018 04D5     		bpl	.L205
1716:src/display.c **** 	  return;
 1986              		.loc 1 1716 6 is_stmt 1 view .LVU623
 1987              	.LVL195:
 1988              	.LBB238:
 1989              	.LBI238:
 415:src/display.c ****   if (res) *res++ = ch;
 1990              		.loc 1 415 14 view .LVU624
 1991              	.LBB239:
 416:src/display.c ****   else	set_dig(base, ch);
 1992              		.loc 1 416 3 view .LVU625
 416:src/display.c ****   else	set_dig(base, ch);
 1993              		.loc 1 416 6 is_stmt 0 view .LVU626
 1994 001a 002D     		cmp	r5, #0
 1995 001c 00F0B580 		beq	.L209
 416:src/display.c ****   else	set_dig(base, ch);
 1996              		.loc 1 416 12 is_stmt 1 view .LVU627
 1997              	.LVL196:
 416:src/display.c ****   else	set_dig(base, ch);
 1998              		.loc 1 416 19 is_stmt 0 view .LVU628
 1999 0020 6F23     		movs	r3, #111
 2000 0022 2B70     		strb	r3, [r5]
 2001              	.LVL197:
 2002              	.L205:
 416:src/display.c ****   else	set_dig(base, ch);
 2003              		.loc 1 416 19 view .LVU629
 2004              	.LBE239:
 2005              	.LBE238:
1771:src/display.c **** 
 2006              		.loc 1 1771 7 view .LVU630
 2007 0024 35B0     		add	sp, sp, #212
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 0026 30BD     		pop	{r4, r5, pc}
 2012              	.LVL198:
 2013              	.L206:
 2014              		.cfi_restore_state
1720:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2015              		.loc 1 1720 2 is_stmt 1 view .LVU631
 2016 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2017              	.LVL199:
1721:src/display.c **** 	dn_abs(&a, rgx);
 2018              		.loc 1 1721 2 view .LVU632
 2019 002c 624A     		ldr	r2, .L236
 2020 002e 2146     		mov	r1, r4
 2021 0030 07A8     		add	r0, sp, #28
 2022 0032 FFF7FEFF 		bl	decNumberMod
ARM GAS  /tmp/ccCvaEE3.s 			page 108


 2023              	.LVL200:
1722:src/display.c **** 	if (decNumberIsNegative(&x)) {
 2024              		.loc 1 1722 2 view .LVU633
 2025 0036 2146     		mov	r1, r4
 2026 0038 19A8     		add	r0, sp, #100
 2027 003a FFF7FEFF 		bl	dn_abs
 2028              	.LVL201:
1723:src/display.c **** 	  if (res != NULL)
 2029              		.loc 1 1723 2 view .LVU634
1723:src/display.c **** 	  if (res != NULL)
 2030              		.loc 1 1723 5 is_stmt 0 view .LVU635
 2031 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2032 0042 002B     		cmp	r3, #0
 2033 0044 72DB     		blt	.L234
 2034              	.L210:
1731:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2035              		.loc 1 1731 2 is_stmt 1 view .LVU636
 2036 0046 07A9     		add	r1, sp, #28
 2037 0048 10A8     		add	r0, sp, #64
 2038 004a FFF7FEFF 		bl	decNumberHR2HMS
 2039              	.LVL202:
1732:src/display.c **** 	decNumberRound(&u, &t);
 2040              		.loc 1 1732 2 view .LVU637
 2041 004e 0622     		movs	r2, #6
 2042 0050 10A9     		add	r1, sp, #64
 2043 0052 22A8     		add	r0, sp, #136
 2044 0054 FFF7FEFF 		bl	dn_mulpow10
 2045              	.LVL203:
1733:src/display.c **** 
 2046              		.loc 1 1733 2 view .LVU638
 2047 0058 22A9     		add	r1, sp, #136
 2048 005a 2BA8     		add	r0, sp, #172
 2049 005c FFF7FEFF 		bl	decNumberRound
 2050              	.LVL204:
1735:src/display.c **** 	hms_step(&u, &t, &sec);
 2051              		.loc 1 1735 2 view .LVU639
 2052 0060 2BA9     		add	r1, sp, #172
 2053 0062 22A8     		add	r0, sp, #136
 2054 0064 06AA     		add	r2, sp, #24
 2055 0066 FFF7FEFF 		bl	hms_step
 2056              	.LVL205:
1736:src/display.c **** 	hms_step(&t, &u, &min);
 2057              		.loc 1 1736 2 view .LVU640
 2058 006a 22A9     		add	r1, sp, #136
 2059 006c 2BA8     		add	r0, sp, #172
 2060 006e 05AA     		add	r2, sp, #20
 2061 0070 FFF7FEFF 		bl	hms_step
 2062              	.LVL206:
1737:src/display.c **** 	hr = dn_to_int(&t);
 2063              		.loc 1 1737 2 view .LVU641
 2064 0074 04AA     		add	r2, sp, #16
 2065 0076 2BA9     		add	r1, sp, #172
 2066 0078 22A8     		add	r0, sp, #136
 2067 007a FFF7FEFF 		bl	hms_step
 2068              	.LVL207:
1738:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2069              		.loc 1 1738 2 view .LVU642
ARM GAS  /tmp/ccCvaEE3.s 			page 109


1738:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2070              		.loc 1 1738 7 is_stmt 0 view .LVU643
 2071 007e 22A8     		add	r0, sp, #136
 2072 0080 FFF7FEFF 		bl	dn_to_int
 2073              	.LVL208:
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2074              		.loc 1 1739 33 view .LVU644
 2075 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2076              		.loc 1 1739 5 view .LVU645
 2077 0088 3B2A     		cmp	r2, #59
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2078              		.loc 1 1739 19 is_stmt 1 view .LVU646
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2079              		.loc 1 1739 23 is_stmt 0 view .LVU647
 2080 008a 82BF     		ittt	hi
 2081 008c 3C3A     		subhi	r2, r2, #60
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2082              		.loc 1 1739 33 view .LVU648
 2083 008e 0133     		addhi	r3, r3, #1
 2084 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1740:src/display.c **** 
 2085              		.loc 1 1740 2 is_stmt 1 view .LVU649
1740:src/display.c **** 
 2086              		.loc 1 1740 5 is_stmt 0 view .LVU650
 2087 0094 3B2B     		cmp	r3, #59
 2088 0096 02D9     		bls	.L215
1740:src/display.c **** 
 2089              		.loc 1 1740 19 is_stmt 1 discriminator 1 view .LVU651
1740:src/display.c **** 
 2090              		.loc 1 1740 23 is_stmt 0 discriminator 1 view .LVU652
 2091 0098 3C3B     		subs	r3, r3, #60
 2092 009a 0493     		str	r3, [sp, #16]
1740:src/display.c **** 
 2093              		.loc 1 1740 30 is_stmt 1 discriminator 1 view .LVU653
1740:src/display.c **** 
 2094              		.loc 1 1740 32 is_stmt 0 discriminator 1 view .LVU654
 2095 009c 0130     		adds	r0, r0, #1
 2096              	.LVL209:
 2097              	.L215:
1743:src/display.c **** 	res = set_dig_s(j, '@', res);
 2098              		.loc 1 1743 2 is_stmt 1 view .LVU655
1743:src/display.c **** 	res = set_dig_s(j, '@', res);
 2099              		.loc 1 1743 8 is_stmt 0 view .LVU656
 2100 009e 0123     		movs	r3, #1
 2101 00a0 0093     		str	r3, [sp]
 2102 00a2 2946     		mov	r1, r5
 2103 00a4 03AA     		add	r2, sp, #12
 2104 00a6 0423     		movs	r3, #4
 2105 00a8 FFF7FEFF 		bl	hms_render
 2106              	.LVL210:
1744:src/display.c **** 	j += SEGS_PER_DIGIT;
 2107              		.loc 1 1744 2 is_stmt 1 view .LVU657
 2108              	.LBB241:
 2109              	.LBI241:
 415:src/display.c ****   if (res) *res++ = ch;
 2110              		.loc 1 415 14 view .LVU658
ARM GAS  /tmp/ccCvaEE3.s 			page 110


 2111              	.LBB242:
 416:src/display.c ****   else	set_dig(base, ch);
 2112              		.loc 1 416 3 view .LVU659
 416:src/display.c ****   else	set_dig(base, ch);
 2113              		.loc 1 416 6 is_stmt 0 view .LVU660
 2114 00ac 0446     		mov	r4, r0
 2115              	.LVL211:
 416:src/display.c ****   else	set_dig(base, ch);
 2116              		.loc 1 416 6 view .LVU661
 2117 00ae 0028     		cmp	r0, #0
 2118 00b0 76D0     		beq	.L216
 416:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 416 12 is_stmt 1 view .LVU662
 416:src/display.c ****   else	set_dig(base, ch);
 2120              		.loc 1 416 16 is_stmt 0 view .LVU663
 2121 00b2 0146     		mov	r1, r0
 2122              	.LVL212:
 416:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 416 19 view .LVU664
 2124 00b4 4023     		movs	r3, #64
 2125 00b6 01F8013B 		strb	r3, [r1], #1
 2126              	.LVL213:
 2127              	.L217:
 418:src/display.c **** }
 2128              		.loc 1 418 3 is_stmt 1 view .LVU665
 418:src/display.c **** }
 2129              		.loc 1 418 3 is_stmt 0 view .LVU666
 2130              	.LBE242:
 2131              	.LBE241:
1745:src/display.c **** 
 2132              		.loc 1 1745 2 is_stmt 1 view .LVU667
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2133              		.loc 1 1748 8 is_stmt 0 view .LVU668
 2134 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2135 00be 0122     		movs	r2, #1
1745:src/display.c **** 
 2136              		.loc 1 1745 4 view .LVU669
 2137 00c0 03F10904 		add	r4, r3, #9
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2138              		.loc 1 1748 8 view .LVU670
 2139 00c4 0092     		str	r2, [sp]
 2140 00c6 0223     		movs	r3, #2
 2141 00c8 03AA     		add	r2, sp, #12
1745:src/display.c **** 
 2142              		.loc 1 1745 4 view .LVU671
 2143 00ca 0394     		str	r4, [sp, #12]
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2144              		.loc 1 1748 2 is_stmt 1 view .LVU672
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2145              		.loc 1 1748 8 is_stmt 0 view .LVU673
 2146 00cc FFF7FEFF 		bl	hms_render
 2147              	.LVL214:
1749:src/display.c **** 	j += SEGS_PER_DIGIT;
 2148              		.loc 1 1749 2 is_stmt 1 view .LVU674
 2149              	.LBB244:
 2150              	.LBI244:
 415:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccCvaEE3.s 			page 111


 2151              		.loc 1 415 14 view .LVU675
 2152              	.LBB245:
 416:src/display.c ****   else	set_dig(base, ch);
 2153              		.loc 1 416 3 view .LVU676
 416:src/display.c ****   else	set_dig(base, ch);
 2154              		.loc 1 416 6 is_stmt 0 view .LVU677
 2155 00d0 0446     		mov	r4, r0
 2156 00d2 0028     		cmp	r0, #0
 2157 00d4 5ED0     		beq	.L218
 416:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 416 12 is_stmt 1 view .LVU678
 416:src/display.c ****   else	set_dig(base, ch);
 2159              		.loc 1 416 16 is_stmt 0 view .LVU679
 2160 00d6 0146     		mov	r1, r0
 2161              	.LVL215:
 416:src/display.c ****   else	set_dig(base, ch);
 2162              		.loc 1 416 19 view .LVU680
 2163 00d8 2723     		movs	r3, #39
 2164 00da 01F8013B 		strb	r3, [r1], #1
 2165              	.LVL216:
 2166              	.L219:
 418:src/display.c **** }
 2167              		.loc 1 418 3 is_stmt 1 view .LVU681
 418:src/display.c **** }
 2168              		.loc 1 418 3 is_stmt 0 view .LVU682
 2169              	.LBE245:
 2170              	.LBE244:
1750:src/display.c **** 
 2171              		.loc 1 1750 2 is_stmt 1 view .LVU683
1750:src/display.c **** 
 2172              		.loc 1 1750 4 is_stmt 0 view .LVU684
 2173 00de 039B     		ldr	r3, [sp, #12]
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2174              		.loc 1 1753 8 view .LVU685
 2175 00e0 0598     		ldr	r0, [sp, #20]
 2176 00e2 0122     		movs	r2, #1
1750:src/display.c **** 
 2177              		.loc 1 1750 4 view .LVU686
 2178 00e4 03F10904 		add	r4, r3, #9
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2179              		.loc 1 1753 8 view .LVU687
 2180 00e8 0092     		str	r2, [sp]
 2181 00ea 0223     		movs	r3, #2
 2182 00ec 03AA     		add	r2, sp, #12
1750:src/display.c **** 
 2183              		.loc 1 1750 4 view .LVU688
 2184 00ee 0394     		str	r4, [sp, #12]
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2185              		.loc 1 1753 2 is_stmt 1 view .LVU689
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2186              		.loc 1 1753 8 is_stmt 0 view .LVU690
 2187 00f0 FFF7FEFF 		bl	hms_render
 2188              	.LVL217:
1754:src/display.c **** 
 2189              		.loc 1 1754 8 view .LVU691
 2190 00f4 3149     		ldr	r1, .L236+4
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
ARM GAS  /tmp/ccCvaEE3.s 			page 112


 2191              		.loc 1 1753 8 view .LVU692
 2192 00f6 0246     		mov	r2, r0
 2193              	.LVL218:
1754:src/display.c **** 
 2194              		.loc 1 1754 2 is_stmt 1 view .LVU693
1754:src/display.c **** 
 2195              		.loc 1 1754 8 is_stmt 0 view .LVU694
 2196 00f8 0398     		ldr	r0, [sp, #12]
 2197              	.LVL219:
1754:src/display.c **** 
 2198              		.loc 1 1754 8 view .LVU695
 2199 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2200 00fc 0938     		subs	r0, r0, #9
 2201 00fe FFF7FEFF 		bl	set_decimal
 2202              	.LVL220:
1757:src/display.c **** 
 2203              		.loc 1 1757 8 view .LVU696
 2204 0102 0023     		movs	r3, #0
1754:src/display.c **** 
 2205              		.loc 1 1754 8 view .LVU697
 2206 0104 0146     		mov	r1, r0
 2207              	.LVL221:
1757:src/display.c **** 
 2208              		.loc 1 1757 2 is_stmt 1 view .LVU698
1757:src/display.c **** 
 2209              		.loc 1 1757 8 is_stmt 0 view .LVU699
 2210 0106 0093     		str	r3, [sp]
 2211 0108 0698     		ldr	r0, [sp, #24]
 2212              	.LVL222:
1757:src/display.c **** 
 2213              		.loc 1 1757 8 view .LVU700
 2214 010a 03AA     		add	r2, sp, #12
 2215 010c 0223     		movs	r3, #2
 2216 010e FFF7FEFF 		bl	hms_render
 2217              	.LVL223:
1760:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2218              		.loc 1 1760 2 is_stmt 1 view .LVU701
 2219              	.LBB247:
 2220              	.LBI247:
 415:src/display.c ****   if (res) *res++ = ch;
 2221              		.loc 1 415 14 view .LVU702
 2222              	.LBB248:
 416:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 416 3 view .LVU703
 416:src/display.c ****   else	set_dig(base, ch);
 2224              		.loc 1 416 6 is_stmt 0 view .LVU704
 2225 0112 0446     		mov	r4, r0
 2226 0114 78B3     		cbz	r0, .L220
 416:src/display.c ****   else	set_dig(base, ch);
 2227              		.loc 1 416 12 is_stmt 1 view .LVU705
 2228              	.LVL224:
 416:src/display.c ****   else	set_dig(base, ch);
 2229              		.loc 1 416 19 is_stmt 0 view .LVU706
 2230 0116 2223     		movs	r3, #34
 2231 0118 0370     		strb	r3, [r0]
 2232              	.LVL225:
 418:src/display.c **** }
ARM GAS  /tmp/ccCvaEE3.s 			page 113


 2233              		.loc 1 418 3 is_stmt 1 view .LVU707
 418:src/display.c **** }
 2234              		.loc 1 418 3 is_stmt 0 view .LVU708
 2235              	.LBE248:
 2236              	.LBE247:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2237              		.loc 1 1764 2 is_stmt 1 view .LVU709
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2238              		.loc 1 1764 6 is_stmt 0 view .LVU710
 2239 011a 2749     		ldr	r1, .L236
 2240 011c 19A8     		add	r0, sp, #100
 2241              	.LVL226:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2242              		.loc 1 1764 6 view .LVU711
 2243 011e FFF7FEFF 		bl	dn_lt
 2244              	.LVL227:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2245              		.loc 1 1764 5 view .LVU712
 2246 0122 78B9     		cbnz	r0, .L235
1765:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2247              		.loc 1 1765 4 is_stmt 1 view .LVU713
 2248              	.LVL228:
 2249              	.LBB251:
 2250              	.LBI251:
 415:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 415 14 view .LVU714
 2252              	.LBB252:
 416:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 416 3 view .LVU715
 416:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 416 12 view .LVU716
 416:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 416 19 is_stmt 0 view .LVU717
 2256 0124 6F23     		movs	r3, #111
 2257 0126 6370     		strb	r3, [r4, #1]
 2258              	.LBE252:
 2259              	.LBE251:
1771:src/display.c **** 
 2260              		.loc 1 1771 7 view .LVU718
 2261 0128 35B0     		add	sp, sp, #212
 2262              		.cfi_remember_state
 2263              		.cfi_def_cfa_offset 12
 2264              		@ sp needed
 2265 012a 30BD     		pop	{r4, r5, pc}
 2266              	.LVL229:
 2267              	.L234:
 2268              		.cfi_restore_state
1724:src/display.c **** 	    *res++ += '-';
 2269              		.loc 1 1724 4 is_stmt 1 view .LVU719
1724:src/display.c **** 	    *res++ += '-';
 2270              		.loc 1 1724 7 is_stmt 0 view .LVU720
 2271 012c E5B1     		cbz	r5, .L211
1725:src/display.c **** 	  else
 2272              		.loc 1 1725 6 is_stmt 1 view .LVU721
1725:src/display.c **** 	  else
 2273              		.loc 1 1725 10 is_stmt 0 view .LVU722
 2274 012e 2B46     		mov	r3, r5
ARM GAS  /tmp/ccCvaEE3.s 			page 114


 2275              	.LVL230:
1725:src/display.c **** 	  else
 2276              		.loc 1 1725 13 view .LVU723
 2277 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2278              	.LVL231:
1725:src/display.c **** 	  else
 2279              		.loc 1 1725 13 view .LVU724
 2280 0134 2D32     		adds	r2, r2, #45
 2281 0136 2A70     		strb	r2, [r5]
1725:src/display.c **** 	  else
 2282              		.loc 1 1725 10 view .LVU725
 2283 0138 1D46     		mov	r5, r3
 2284              	.LVL232:
 2285              	.L212:
1728:src/display.c **** 	}
 2286              		.loc 1 1728 4 is_stmt 1 view .LVU726
 2287 013a 07A9     		add	r1, sp, #28
 2288 013c 0846     		mov	r0, r1
 2289 013e FFF7FEFF 		bl	dn_minus
 2290              	.LVL233:
 2291 0142 80E7     		b	.L210
 2292              	.LVL234:
 2293              	.L235:
 2294              	.LBB253:
 2295              	.LBB249:
 416:src/display.c ****   else	set_dig(base, ch);
 2296              		.loc 1 416 16 is_stmt 0 view .LVU727
 2297 0144 0134     		adds	r4, r4, #1
 2298              	.LVL235:
 2299              	.L223:
 416:src/display.c ****   else	set_dig(base, ch);
 2300              		.loc 1 416 16 view .LVU728
 2301              	.LBE249:
 2302              	.LBE253:
1766:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2303              		.loc 1 1766 9 is_stmt 1 view .LVU729
1766:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2304              		.loc 1 1766 15 is_stmt 0 view .LVU730
 2305 0146 19A8     		add	r0, sp, #100
 2306 0148 FFF7FEFF 		bl	dn_eq0
 2307              	.LVL236:
1766:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2308              		.loc 1 1766 12 view .LVU731
 2309 014c 0028     		cmp	r0, #0
 2310 014e 7FF469AF 		bne	.L205
1767:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2311              		.loc 1 1767 4 is_stmt 1 view .LVU732
1767:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2312              		.loc 1 1767 8 is_stmt 0 view .LVU733
 2313 0152 1B48     		ldr	r0, .L236+8
 2314 0154 19A9     		add	r1, sp, #100
 2315 0156 FFF7FEFF 		bl	dn_lt
 2316              	.LVL237:
1767:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2317              		.loc 1 1767 7 view .LVU734
 2318 015a 0028     		cmp	r0, #0
 2319 015c 7FF462AF 		bne	.L205
ARM GAS  /tmp/ccCvaEE3.s 			page 115


1768:src/display.c **** 	  }
 2320              		.loc 1 1768 6 is_stmt 1 view .LVU735
 2321              	.LVL238:
 2322              	.LBB254:
 2323              	.LBI254:
 415:src/display.c ****   if (res) *res++ = ch;
 2324              		.loc 1 415 14 view .LVU736
 2325              	.LBB255:
 416:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 416 3 view .LVU737
 416:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 416 6 is_stmt 0 view .LVU738
 2328 0160 24B3     		cbz	r4, .L225
 416:src/display.c ****   else	set_dig(base, ch);
 2329              		.loc 1 416 12 is_stmt 1 view .LVU739
 2330              	.LVL239:
 416:src/display.c ****   else	set_dig(base, ch);
 2331              		.loc 1 416 19 is_stmt 0 view .LVU740
 2332 0162 7523     		movs	r3, #117
 2333 0164 2370     		strb	r3, [r4]
 2334 0166 5DE7     		b	.L205
 2335              	.LVL240:
 2336              	.L211:
 416:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 416 19 view .LVU741
 2338              	.LBE255:
 2339              	.LBE254:
1727:src/display.c **** 	  dn_minus(&x, &x);
 2340              		.loc 1 1727 6 is_stmt 1 view .LVU742
 2341              	.LBB257:
 2342              	.LBI257:
 304:src/display.c **** {
 2343              		.loc 1 304 13 view .LVU743
 2344              	.LBB258:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2345              		.loc 1 306 3 view .LVU744
 306:src/display.c ****   set_dot(MANT_SIGN);
 2346              		.loc 1 306 25 is_stmt 0 view .LVU745
 2347 0168 164B     		ldr	r3, .L236+12
 2348 016a 2D22     		movs	r2, #45
 307:src/display.c **** }
 2349              		.loc 1 307 3 view .LVU746
 2350 016c 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2351              		.loc 1 306 25 view .LVU747
 2352 016e 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2353              		.loc 1 307 3 is_stmt 1 view .LVU748
 2354 0170 FFF7FEFF 		bl	set_dot
 2355              	.LVL241:
 308:src/display.c **** 
 2356              		.loc 1 308 1 is_stmt 0 view .LVU749
 2357 0174 E1E7     		b	.L212
 2358              	.LVL242:
 2359              	.L220:
 308:src/display.c **** 
 2360              		.loc 1 308 1 view .LVU750
ARM GAS  /tmp/ccCvaEE3.s 			page 116


 2361              	.LBE258:
 2362              	.LBE257:
 2363              	.LBB259:
 2364              	.LBB250:
 417:src/display.c ****   return res;
 2365              		.loc 1 417 8 is_stmt 1 view .LVU751
 2366 0176 0398     		ldr	r0, [sp, #12]
 2367              	.LVL243:
 417:src/display.c ****   return res;
 2368              		.loc 1 417 8 is_stmt 0 view .LVU752
 2369 0178 2221     		movs	r1, #34
 2370 017a FFF7FEFF 		bl	set_dig
 2371              	.LVL244:
 418:src/display.c **** }
 2372              		.loc 1 418 3 is_stmt 1 view .LVU753
 418:src/display.c **** }
 2373              		.loc 1 418 3 is_stmt 0 view .LVU754
 2374              	.LBE250:
 2375              	.LBE259:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2376              		.loc 1 1764 2 is_stmt 1 view .LVU755
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2377              		.loc 1 1764 6 is_stmt 0 view .LVU756
 2378 017e 0E49     		ldr	r1, .L236
 2379 0180 19A8     		add	r0, sp, #100
 2380 0182 FFF7FEFF 		bl	dn_lt
 2381              	.LVL245:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2382              		.loc 1 1764 5 view .LVU757
 2383 0186 0028     		cmp	r0, #0
 2384 0188 DDD1     		bne	.L223
 2385              	.LVL246:
 2386              	.L209:
 2387              	.LBB260:
 2388              	.LBB240:
 417:src/display.c ****   return res;
 2389              		.loc 1 417 8 is_stmt 1 view .LVU758
 2390 018a 6F21     		movs	r1, #111
 2391 018c 7A20     		movs	r0, #122
 2392 018e FFF7FEFF 		bl	set_dig
 2393              	.LVL247:
 2394              	.LBE240:
 2395              	.LBE260:
1717:src/display.c **** 	}
 2396              		.loc 1 1717 4 view .LVU759
 2397 0192 47E7     		b	.L205
 2398              	.LVL248:
 2399              	.L218:
 2400              	.LBB261:
 2401              	.LBB246:
 417:src/display.c ****   return res;
 2402              		.loc 1 417 8 view .LVU760
 2403 0194 2721     		movs	r1, #39
 2404 0196 0398     		ldr	r0, [sp, #12]
 2405              	.LVL249:
 417:src/display.c ****   return res;
 2406              		.loc 1 417 8 is_stmt 0 view .LVU761
ARM GAS  /tmp/ccCvaEE3.s 			page 117


 2407 0198 FFF7FEFF 		bl	set_dig
 2408              	.LVL250:
 417:src/display.c ****   return res;
 2409              		.loc 1 417 8 view .LVU762
 2410 019c 2146     		mov	r1, r4
 2411 019e 9EE7     		b	.L219
 2412              	.LVL251:
 2413              	.L216:
 417:src/display.c ****   return res;
 2414              		.loc 1 417 8 view .LVU763
 2415              	.LBE246:
 2416              	.LBE261:
 2417              	.LBB262:
 2418              	.LBB243:
 417:src/display.c ****   return res;
 2419              		.loc 1 417 8 is_stmt 1 view .LVU764
 2420 01a0 4021     		movs	r1, #64
 2421 01a2 0398     		ldr	r0, [sp, #12]
 2422              	.LVL252:
 417:src/display.c ****   return res;
 2423              		.loc 1 417 8 is_stmt 0 view .LVU765
 2424 01a4 FFF7FEFF 		bl	set_dig
 2425              	.LVL253:
 417:src/display.c ****   return res;
 2426              		.loc 1 417 8 view .LVU766
 2427 01a8 2146     		mov	r1, r4
 2428 01aa 86E7     		b	.L217
 2429              	.LVL254:
 2430              	.L225:
 417:src/display.c ****   return res;
 2431              		.loc 1 417 8 view .LVU767
 2432              	.LBE243:
 2433              	.LBE262:
 2434              	.LBB263:
 2435              	.LBB256:
 417:src/display.c ****   return res;
 2436              		.loc 1 417 8 is_stmt 1 view .LVU768
 2437 01ac 7521     		movs	r1, #117
 2438 01ae 7A20     		movs	r0, #122
 2439 01b0 FFF7FEFF 		bl	set_dig
 2440              	.LVL255:
 2441 01b4 36E7     		b	.L205
 2442              	.L237:
 2443 01b6 00BF     		.align	2
 2444              	.L236:
 2445 01b8 00000000 		.word	const_9000
 2446 01bc 00000000 		.word	.LANCHOR1
 2447 01c0 00000000 		.word	const_hms_threshold
 2448 01c4 00000000 		.word	LastDisplayedNumber
 2449              	.LBE256:
 2450              	.LBE263:
 2451              		.cfi_endproc
 2452              	.LFE22:
 2454              		.section	.text.set_x_fract,"ax",%progbits
 2455              		.align	1
 2456              		.p2align 2,,3
 2457              		.syntax unified
ARM GAS  /tmp/ccCvaEE3.s 			page 118


 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv4-sp-d16
 2462              	set_x_fract:
 2463              	.LVL256:
 2464              	.LFB23:
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2465              		.loc 1 1774 63 view -0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 216
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
1775:src/display.c **** 	char buf[32], *p = buf;
 2469              		.loc 1 1775 2 view .LVU770
1776:src/display.c **** 	int j;
 2470              		.loc 1 1776 2 view .LVU771
1777:src/display.c **** 
 2471              		.loc 1 1777 2 view .LVU772
1779:src/display.c **** 	  return 1;
 2472              		.loc 1 1779 2 view .LVU773
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2473              		.loc 1 1774 63 is_stmt 0 view .LVU774
 2474 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2475              		.cfi_def_cfa_offset 20
 2476              		.cfi_offset 4, -20
 2477              		.cfi_offset 5, -16
 2478              		.cfi_offset 6, -12
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 0646     		mov	r6, r0
 2482 0004 B7B0     		sub	sp, sp, #220
 2483              		.cfi_def_cfa_offset 240
1779:src/display.c **** 	  return 1;
 2484              		.loc 1 1779 6 view .LVU775
 2485 0006 0830     		adds	r0, r0, #8
 2486              	.LVL257:
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2487              		.loc 1 1774 63 view .LVU776
 2488 0008 0C46     		mov	r4, r1
1779:src/display.c **** 	  return 1;
 2489              		.loc 1 1779 6 view .LVU777
 2490 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2491              	.LVL258:
1779:src/display.c **** 	  return 1;
 2492              		.loc 1 1779 5 view .LVU778
 2493 000e 18B1     		cbz	r0, .L269
 2494              	.LVL259:
 2495              	.L258:
1780:src/display.c **** 	dn_abs(&x, rgx);
 2496              		.loc 1 1780 11 view .LVU779
 2497 0010 0125     		movs	r5, #1
 2498              	.L238:
1837:src/display.c **** 
 2499              		.loc 1 1837 7 view .LVU780
 2500 0012 2846     		mov	r0, r5
 2501 0014 37B0     		add	sp, sp, #220
 2502              		.cfi_remember_state
 2503              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccCvaEE3.s 			page 119


 2504              		@ sp needed
 2505 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2506              	.LVL260:
 2507              	.L269:
 2508              		.cfi_restore_state
 2509              	.LBB272:
 2510              	.LBI272:
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2511              		.loc 1 1774 18 is_stmt 1 view .LVU781
 2512              	.LBB273:
1781:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2513              		.loc 1 1781 2 view .LVU782
 2514 0018 3146     		mov	r1, r6
 2515 001a 0546     		mov	r5, r0
 2516 001c 09A8     		add	r0, sp, #36
 2517 001e FFF7FEFF 		bl	dn_abs
 2518              	.LVL261:
1782:src/display.c **** 	  return 0;
 2519              		.loc 1 1782 2 view .LVU783
1782:src/display.c **** 	  return 0;
 2520              		.loc 1 1782 6 is_stmt 0 view .LVU784
 2521 0022 5D49     		ldr	r1, .L274
 2522 0024 09A8     		add	r0, sp, #36
 2523 0026 FFF7FEFF 		bl	dn_lt
 2524              	.LVL262:
1782:src/display.c **** 	  return 0;
 2525              		.loc 1 1782 5 view .LVU785
 2526 002a 0028     		cmp	r0, #0
 2527 002c F1D0     		beq	.L238
1784:src/display.c **** 	  return 0;
 2528              		.loc 1 1784 2 is_stmt 1 view .LVU786
1784:src/display.c **** 	  return 0;
 2529              		.loc 1 1784 6 is_stmt 0 view .LVU787
 2530 002e 5B49     		ldr	r1, .L274+4
 2531 0030 09A8     		add	r0, sp, #36
 2532 0032 FFF7FEFF 		bl	dn_lt
 2533              	.LVL263:
1784:src/display.c **** 	  return 0;
 2534              		.loc 1 1784 5 view .LVU788
 2535 0036 0746     		mov	r7, r0
 2536 0038 0028     		cmp	r0, #0
 2537 003a EAD1     		bne	.L238
1786:src/display.c **** 	  if (res != NULL)
 2538              		.loc 1 1786 2 is_stmt 1 view .LVU789
1786:src/display.c **** 	  if (res != NULL)
 2539              		.loc 1 1786 5 is_stmt 0 view .LVU790
 2540 003c 96F90830 		ldrsb	r3, [r6, #8]
 2541 0040 002B     		cmp	r3, #0
 2542 0042 C0F28680 		blt	.L270
 2543              	.LVL264:
 2544              	.L243:
1792:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2545              		.loc 1 1792 2 is_stmt 1 view .LVU791
 2546 0046 09A9     		add	r1, sp, #36
 2547 0048 12A8     		add	r0, sp, #72
 2548 004a FFF7FEFF 		bl	decNumberFrac
 2549              	.LVL265:
ARM GAS  /tmp/ccCvaEE3.s 			page 120


1793:src/display.c **** 
 2550              		.loc 1 1793 2 view .LVU792
 2551 004e 12AA     		add	r2, sp, #72
 2552 0050 24A9     		add	r1, sp, #144
 2553 0052 1BA8     		add	r0, sp, #108
 2554 0054 FFF7FEFF 		bl	decNumber2Fraction
 2555              	.LVL266:
1795:src/display.c **** 	dn_compare(&t, &t, &w);
 2556              		.loc 1 1795 2 view .LVU793
 2557 0058 24AA     		add	r2, sp, #144
 2558 005a 1BA9     		add	r1, sp, #108
 2559 005c 2DA8     		add	r0, sp, #180
 2560 005e FFF7FEFF 		bl	dn_divide
 2561              	.LVL267:
1796:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2562              		.loc 1 1796 2 view .LVU794
 2563 0062 2DA9     		add	r1, sp, #180
 2564 0064 12AA     		add	r2, sp, #72
 2565 0066 0846     		mov	r0, r1
 2566 0068 FFF7FEFF 		bl	dn_compare
 2567              	.LVL268:
1797:src/display.c **** 
 2568              		.loc 1 1797 2 view .LVU795
 2569 006c 09A9     		add	r1, sp, #36
 2570 006e 12A8     		add	r0, sp, #72
 2571 0070 FFF7FEFF 		bl	decNumberTrunc
 2572              	.LVL269:
1799:src/display.c **** 	  dn_inc(&w);
 2573              		.loc 1 1799 2 view .LVU796
1799:src/display.c **** 	  dn_inc(&w);
 2574              		.loc 1 1799 6 is_stmt 0 view .LVU797
 2575 0074 24A9     		add	r1, sp, #144
 2576 0076 1BA8     		add	r0, sp, #108
 2577 0078 FFF7FEFF 		bl	dn_eq
 2578              	.LVL270:
1799:src/display.c **** 	  dn_inc(&w);
 2579              		.loc 1 1799 5 view .LVU798
 2580 007c 0028     		cmp	r0, #0
 2581 007e 70D1     		bne	.L271
 2582              	.L245:
1804:src/display.c **** 	  if (!dn_eq0(&w)) {
 2583              		.loc 1 1804 2 is_stmt 1 view .LVU799
1804:src/display.c **** 	  if (!dn_eq0(&w)) {
 2584              		.loc 1 1804 6 is_stmt 0 view .LVU800
 2585 0080 474B     		ldr	r3, .L274+8
 2586 0082 1B68     		ldr	r3, [r3]
 2587 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1804:src/display.c **** 	  if (!dn_eq0(&w)) {
 2588              		.loc 1 1804 5 view .LVU801
 2589 0088 DB06     		lsls	r3, r3, #27
 2590 008a 55D4     		bmi	.L246
1805:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2591              		.loc 1 1805 4 is_stmt 1 view .LVU802
1805:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2592              		.loc 1 1805 9 is_stmt 0 view .LVU803
 2593 008c 12A8     		add	r0, sp, #72
 2594 008e FFF7FEFF 		bl	dn_eq0
ARM GAS  /tmp/ccCvaEE3.s 			page 121


 2595              	.LVL271:
1805:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2596              		.loc 1 1805 7 view .LVU804
 2597 0092 0028     		cmp	r0, #0
 2598 0094 6CD0     		beq	.L272
1776:src/display.c **** 	int j;
 2599              		.loc 1 1776 17 view .LVU805
 2600 0096 01AE     		add	r6, sp, #4
 2601              	.LVL272:
1776:src/display.c **** 	int j;
 2602              		.loc 1 1776 17 view .LVU806
 2603 0098 3546     		mov	r5, r6
 2604              	.L247:
 2605              	.LVL273:
1813:src/display.c **** 	*p++ = '/';
 2606              		.loc 1 1813 2 is_stmt 1 view .LVU807
1813:src/display.c **** 	*p++ = '/';
 2607              		.loc 1 1813 17 is_stmt 0 view .LVU808
 2608 009a 1BA8     		add	r0, sp, #108
 2609 009c FFF7FEFF 		bl	dn_to_int
 2610              	.LVL274:
 2611 00a0 0146     		mov	r1, r0
1813:src/display.c **** 	*p++ = '/';
 2612              		.loc 1 1813 6 view .LVU809
 2613 00a2 2846     		mov	r0, r5
 2614 00a4 FFF7FEFF 		bl	num_arg
 2615              	.LVL275:
1814:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2616              		.loc 1 1814 2 is_stmt 1 view .LVU810
1814:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2617              		.loc 1 1814 4 is_stmt 0 view .LVU811
 2618 00a8 0546     		mov	r5, r0
 2619              	.LVL276:
1814:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2620              		.loc 1 1814 7 view .LVU812
 2621 00aa 2F23     		movs	r3, #47
 2622 00ac 05F8013B 		strb	r3, [r5], #1
 2623              	.LVL277:
1815:src/display.c **** 	*p = '\0';
 2624              		.loc 1 1815 2 is_stmt 1 view .LVU813
1815:src/display.c **** 	*p = '\0';
 2625              		.loc 1 1815 17 is_stmt 0 view .LVU814
 2626 00b0 24A8     		add	r0, sp, #144
 2627 00b2 FFF7FEFF 		bl	dn_to_int
 2628              	.LVL278:
 2629 00b6 0146     		mov	r1, r0
1815:src/display.c **** 	*p = '\0';
 2630              		.loc 1 1815 6 view .LVU815
 2631 00b8 2846     		mov	r0, r5
 2632 00ba FFF7FEFF 		bl	num_arg
 2633              	.LVL279:
1816:src/display.c **** 	if ((p - 12) > buf) {
 2634              		.loc 1 1816 2 is_stmt 1 view .LVU816
1816:src/display.c **** 	if ((p - 12) > buf) {
 2635              		.loc 1 1816 5 is_stmt 0 view .LVU817
 2636 00be 0546     		mov	r5, r0
 2637 00c0 0023     		movs	r3, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 122


 2638 00c2 05F80C39 		strb	r3, [r5], #-12
1817:src/display.c **** 	  p -= 12;
 2639              		.loc 1 1817 2 is_stmt 1 view .LVU818
1817:src/display.c **** 	  p -= 12;
 2640              		.loc 1 1817 5 is_stmt 0 view .LVU819
 2641 00c6 B542     		cmp	r5, r6
 2642 00c8 32D8     		bhi	.L248
 2643 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2644              	.LVL280:
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2645              		.loc 1 1821 12 is_stmt 1 view .LVU820
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2646              		.loc 1 1821 2 is_stmt 0 view .LVU821
 2647 00ce 51B1     		cbz	r1, .L250
1820:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2648              		.loc 1 1820 11 view .LVU822
 2649 00d0 3546     		mov	r5, r6
 2650              	.LVL281:
 2651              	.L253:
1822:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2652              		.loc 1 1822 4 is_stmt 1 view .LVU823
 2653              	.LBB274:
 2654              	.LBI274:
 415:src/display.c ****   if (res) *res++ = ch;
 2655              		.loc 1 415 14 view .LVU824
 2656              	.LBB275:
 416:src/display.c ****   else	set_dig(base, ch);
 2657              		.loc 1 416 3 view .LVU825
 416:src/display.c ****   else	set_dig(base, ch);
 2658              		.loc 1 416 12 view .LVU826
 416:src/display.c ****   else	set_dig(base, ch);
 2659              		.loc 1 416 16 is_stmt 0 view .LVU827
 2660 00d2 2346     		mov	r3, r4
 2661              	.LVL282:
 416:src/display.c ****   else	set_dig(base, ch);
 2662              		.loc 1 416 6 view .LVU828
 2663 00d4 34B3     		cbz	r4, .L251
 2664              	.LVL283:
 416:src/display.c ****   else	set_dig(base, ch);
 2665              		.loc 1 416 19 view .LVU829
 2666 00d6 03F8011B 		strb	r1, [r3], #1
 2667              	.LVL284:
 416:src/display.c ****   else	set_dig(base, ch);
 2668              		.loc 1 416 16 view .LVU830
 2669 00da 1C46     		mov	r4, r3
 2670              	.LVL285:
 2671              	.L252:
 418:src/display.c **** }
 2672              		.loc 1 418 3 is_stmt 1 view .LVU831
 418:src/display.c **** }
 2673              		.loc 1 418 3 is_stmt 0 view .LVU832
 2674              	.LBE275:
 2675              	.LBE274:
1823:src/display.c **** 	}
 2676              		.loc 1 1823 4 is_stmt 1 view .LVU833
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2677              		.loc 1 1821 12 is_stmt 0 view .LVU834
ARM GAS  /tmp/ccCvaEE3.s 			page 123


 2678 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2679              	.LVL286:
1823:src/display.c **** 	}
 2680              		.loc 1 1823 6 view .LVU835
 2681 00e0 0937     		adds	r7, r7, #9
 2682              	.LVL287:
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2683              		.loc 1 1821 24 is_stmt 1 view .LVU836
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2684              		.loc 1 1821 12 view .LVU837
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2685              		.loc 1 1821 2 is_stmt 0 view .LVU838
 2686 00e2 0029     		cmp	r1, #0
 2687 00e4 F5D1     		bne	.L253
 2688              	.LVL288:
 2689              	.L250:
1826:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2690              		.loc 1 1826 2 is_stmt 1 view .LVU839
1826:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2691              		.loc 1 1826 6 is_stmt 0 view .LVU840
 2692 00e6 2DA8     		add	r0, sp, #180
 2693 00e8 FFF7FEFF 		bl	dn_eq0
 2694              	.LVL289:
1826:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2695              		.loc 1 1826 5 view .LVU841
 2696 00ec F0B9     		cbnz	r0, .L261
1828:src/display.c **** 	  p = (char *)S7_fract_LT;
 2697              		.loc 1 1828 7 is_stmt 1 view .LVU842
1828:src/display.c **** 	  p = (char *)S7_fract_LT;
 2698              		.loc 1 1828 10 is_stmt 0 view .LVU843
 2699 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1831:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2700              		.loc 1 1831 6 view .LVU844
 2701 00f2 2C4D     		ldr	r5, .L274+12
 2702 00f4 2C4B     		ldr	r3, .L274+16
 2703 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2704 00fa 38BF     		it	cc
 2705 00fc 1D46     		movcc	r5, r3
 2706              	.L254:
 2707              	.LVL290:
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2708              		.loc 1 1832 26 is_stmt 1 view .LVU845
 2709              	.LBB278:
 2710              	.LBB276:
 416:src/display.c ****   else	set_dig(base, ch);
 2711              		.loc 1 416 16 is_stmt 0 view .LVU846
 2712 00fe 6C26     		movs	r6, #108
 2713 0100 2021     		movs	r1, #32
 2714 0102 08E0     		b	.L257
 2715              	.LVL291:
 2716              	.L273:
 416:src/display.c ****   else	set_dig(base, ch);
 2717              		.loc 1 416 16 view .LVU847
 2718              	.LBE276:
 2719              	.LBE278:
 2720              	.LBB279:
 2721              	.LBB280:
ARM GAS  /tmp/ccCvaEE3.s 			page 124


 416:src/display.c ****   else	set_dig(base, ch);
 2722              		.loc 1 416 19 view .LVU848
 2723 0104 03F8011B 		strb	r1, [r3], #1
 2724              	.LVL292:
 416:src/display.c ****   else	set_dig(base, ch);
 2725              		.loc 1 416 16 view .LVU849
 2726 0108 1C46     		mov	r4, r3
 2727              	.LVL293:
 2728              	.L256:
 418:src/display.c **** }
 2729              		.loc 1 418 3 is_stmt 1 view .LVU850
 418:src/display.c **** }
 2730              		.loc 1 418 3 is_stmt 0 view .LVU851
 2731              	.LBE280:
 2732              	.LBE279:
1834:src/display.c **** 	}
 2733              		.loc 1 1834 4 is_stmt 1 view .LVU852
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2734              		.loc 1 1832 26 is_stmt 0 view .LVU853
 2735 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2736              	.LVL294:
1834:src/display.c **** 	}
 2737              		.loc 1 1834 6 view .LVU854
 2738 010e 0736     		adds	r6, r6, #7
 2739              	.LVL295:
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2740              		.loc 1 1832 38 is_stmt 1 view .LVU855
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2741              		.loc 1 1832 26 view .LVU856
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2742              		.loc 1 1832 2 is_stmt 0 view .LVU857
 2743 0110 0029     		cmp	r1, #0
 2744 0112 3FF47DAF 		beq	.L258
 2745              	.LVL296:
 2746              	.L257:
1833:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2747              		.loc 1 1833 4 is_stmt 1 view .LVU858
 2748              	.LBB282:
 2749              	.LBI279:
 415:src/display.c ****   if (res) *res++ = ch;
 2750              		.loc 1 415 14 view .LVU859
 2751              	.LBB281:
 416:src/display.c ****   else	set_dig(base, ch);
 2752              		.loc 1 416 3 view .LVU860
 416:src/display.c ****   else	set_dig(base, ch);
 2753              		.loc 1 416 12 view .LVU861
 416:src/display.c ****   else	set_dig(base, ch);
 2754              		.loc 1 416 16 is_stmt 0 view .LVU862
 2755 0116 2346     		mov	r3, r4
 2756              	.LVL297:
 416:src/display.c ****   else	set_dig(base, ch);
 2757              		.loc 1 416 6 view .LVU863
 2758 0118 002C     		cmp	r4, #0
 2759 011a F3D1     		bne	.L273
 2760              	.LVL298:
 417:src/display.c ****   return res;
 2761              		.loc 1 417 8 is_stmt 1 view .LVU864
ARM GAS  /tmp/ccCvaEE3.s 			page 125


 2762 011c 3046     		mov	r0, r6
 2763 011e FFF7FEFF 		bl	set_dig
 2764              	.LVL299:
 417:src/display.c ****   return res;
 2765              		.loc 1 417 8 is_stmt 0 view .LVU865
 2766 0122 F2E7     		b	.L256
 2767              	.LVL300:
 2768              	.L251:
 417:src/display.c ****   return res;
 2769              		.loc 1 417 8 view .LVU866
 2770              	.LBE281:
 2771              	.LBE282:
 2772              	.LBB283:
 2773              	.LBB277:
 417:src/display.c ****   return res;
 2774              		.loc 1 417 8 is_stmt 1 view .LVU867
 2775 0124 3846     		mov	r0, r7
 2776 0126 FFF7FEFF 		bl	set_dig
 2777              	.LVL301:
 417:src/display.c ****   return res;
 2778              		.loc 1 417 8 is_stmt 0 view .LVU868
 2779 012a D7E7     		b	.L252
 2780              	.LVL302:
 2781              	.L261:
 417:src/display.c ****   return res;
 2782              		.loc 1 417 8 view .LVU869
 2783              	.LBE277:
 2784              	.LBE283:
1827:src/display.c **** 	else if (decNumberIsNegative(&t))
 2785              		.loc 1 1827 6 view .LVU870
 2786 012c 1F4D     		ldr	r5, .L274+20
 2787 012e E6E7     		b	.L254
 2788              	.LVL303:
 2789              	.L248:
1818:src/display.c **** 	  *p = '<';
 2790              		.loc 1 1818 4 is_stmt 1 view .LVU871
1819:src/display.c **** 	} else	p = buf;
 2791              		.loc 1 1819 4 view .LVU872
1819:src/display.c **** 	} else	p = buf;
 2792              		.loc 1 1819 7 is_stmt 0 view .LVU873
 2793 0130 3C21     		movs	r1, #60
 2794 0132 00F80C1C 		strb	r1, [r0, #-12]
 2795              	.LVL304:
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1821 12 is_stmt 1 view .LVU874
 2797 0136 CCE7     		b	.L253
 2798              	.LVL305:
 2799              	.L246:
1810:src/display.c **** 	  dn_add(&n, &n, &x);
 2800              		.loc 1 1810 4 view .LVU875
 2801 0138 12A9     		add	r1, sp, #72
 2802 013a 24AA     		add	r2, sp, #144
 2803 013c 09A8     		add	r0, sp, #36
 2804 013e FFF7FEFF 		bl	dn_multiply
 2805              	.LVL306:
1811:src/display.c **** 	}
 2806              		.loc 1 1811 4 view .LVU876
ARM GAS  /tmp/ccCvaEE3.s 			page 126


 2807 0142 1BA9     		add	r1, sp, #108
 2808 0144 09AA     		add	r2, sp, #36
 2809 0146 0846     		mov	r0, r1
1776:src/display.c **** 	int j;
 2810              		.loc 1 1776 17 is_stmt 0 view .LVU877
 2811 0148 01AE     		add	r6, sp, #4
 2812              	.LVL307:
1811:src/display.c **** 	}
 2813              		.loc 1 1811 4 view .LVU878
 2814 014a FFF7FEFF 		bl	dn_add
 2815              	.LVL308:
1776:src/display.c **** 	int j;
 2816              		.loc 1 1776 17 view .LVU879
 2817 014e 3546     		mov	r5, r6
 2818 0150 A3E7     		b	.L247
 2819              	.LVL309:
 2820              	.L270:
1787:src/display.c **** 	    *res++ += '-';
 2821              		.loc 1 1787 4 is_stmt 1 view .LVU880
1787:src/display.c **** 	    *res++ += '-';
 2822              		.loc 1 1787 7 is_stmt 0 view .LVU881
 2823 0152 D4B1     		cbz	r4, .L244
1788:src/display.c **** 	  else
 2824              		.loc 1 1788 6 is_stmt 1 view .LVU882
1788:src/display.c **** 	  else
 2825              		.loc 1 1788 10 is_stmt 0 view .LVU883
 2826 0154 2346     		mov	r3, r4
 2827              	.LVL310:
1788:src/display.c **** 	  else
 2828              		.loc 1 1788 13 view .LVU884
 2829 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2830              	.LVL311:
1788:src/display.c **** 	  else
 2831              		.loc 1 1788 13 view .LVU885
 2832 015a 2D32     		adds	r2, r2, #45
 2833 015c 2270     		strb	r2, [r4]
1788:src/display.c **** 	  else
 2834              		.loc 1 1788 10 view .LVU886
 2835 015e 1C46     		mov	r4, r3
 2836              	.LVL312:
1788:src/display.c **** 	  else
 2837              		.loc 1 1788 10 view .LVU887
 2838 0160 71E7     		b	.L243
 2839              	.LVL313:
 2840              	.L271:
1800:src/display.c **** 	  decNumberZero(&n);
 2841              		.loc 1 1800 4 is_stmt 1 view .LVU888
 2842 0162 12A8     		add	r0, sp, #72
 2843 0164 FFF7FEFF 		bl	dn_inc
 2844              	.LVL314:
1801:src/display.c **** 	}
 2845              		.loc 1 1801 4 view .LVU889
 2846 0168 1BA8     		add	r0, sp, #108
 2847 016a FFF7FEFF 		bl	decNumberZero
 2848              	.LVL315:
 2849 016e 87E7     		b	.L245
 2850              	.L272:
ARM GAS  /tmp/ccCvaEE3.s 			page 127


1806:src/display.c **** 	    *p++ = ' ';
 2851              		.loc 1 1806 6 view .LVU890
1806:src/display.c **** 	    *p++ = ' ';
 2852              		.loc 1 1806 21 is_stmt 0 view .LVU891
 2853 0170 12A8     		add	r0, sp, #72
 2854 0172 FFF7FEFF 		bl	dn_to_int
 2855              	.LVL316:
1806:src/display.c **** 	    *p++ = ' ';
 2856              		.loc 1 1806 10 view .LVU892
 2857 0176 01AE     		add	r6, sp, #4
 2858              	.LVL317:
1806:src/display.c **** 	    *p++ = ' ';
 2859              		.loc 1 1806 21 view .LVU893
 2860 0178 0146     		mov	r1, r0
1806:src/display.c **** 	    *p++ = ' ';
 2861              		.loc 1 1806 10 view .LVU894
 2862 017a 3046     		mov	r0, r6
 2863 017c FFF7FEFF 		bl	num_arg
 2864              	.LVL318:
1807:src/display.c **** 	  }
 2865              		.loc 1 1807 6 is_stmt 1 view .LVU895
1807:src/display.c **** 	  }
 2866              		.loc 1 1807 8 is_stmt 0 view .LVU896
 2867 0180 0546     		mov	r5, r0
 2868              	.LVL319:
1807:src/display.c **** 	  }
 2869              		.loc 1 1807 11 view .LVU897
 2870 0182 2023     		movs	r3, #32
 2871 0184 05F8013B 		strb	r3, [r5], #1
 2872              	.LVL320:
1807:src/display.c **** 	  }
 2873              		.loc 1 1807 11 view .LVU898
 2874 0188 87E7     		b	.L247
 2875              	.LVL321:
 2876              	.L244:
1790:src/display.c **** 	}
 2877              		.loc 1 1790 6 is_stmt 1 view .LVU899
 2878              	.LBB284:
 2879              	.LBI284:
 304:src/display.c **** {
 2880              		.loc 1 304 13 view .LVU900
 2881              	.LBB285:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2882              		.loc 1 306 3 view .LVU901
 306:src/display.c ****   set_dot(MANT_SIGN);
 2883              		.loc 1 306 25 is_stmt 0 view .LVU902
 2884 018a 094B     		ldr	r3, .L274+24
 2885 018c 2D22     		movs	r2, #45
 307:src/display.c **** }
 2886              		.loc 1 307 3 view .LVU903
 2887 018e 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2888              		.loc 1 306 25 view .LVU904
 2889 0190 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2890              		.loc 1 307 3 is_stmt 1 view .LVU905
 2891 0192 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccCvaEE3.s 			page 128


 2892              	.LVL322:
 308:src/display.c **** 
 2893              		.loc 1 308 1 is_stmt 0 view .LVU906
 2894 0196 56E7     		b	.L243
 2895              	.L275:
 2896              		.align	2
 2897              	.L274:
 2898 0198 00000000 		.word	const_100000
 2899 019c 00000000 		.word	const_0_0001
 2900 01a0 00000000 		.word	main_ram
 2901 01a4 00000000 		.word	.LANCHOR8
 2902 01a8 00000000 		.word	.LANCHOR10
 2903 01ac 00000000 		.word	.LANCHOR9
 2904 01b0 00000000 		.word	LastDisplayedNumber
 2905              	.LBE285:
 2906              	.LBE284:
 2907              	.LBE273:
 2908              	.LBE272:
 2909              		.cfi_endproc
 2910              	.LFE23:
 2912              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2913              		.align	2
 2914              	.LC1:
 2915 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2915      36376F39 
 2915      44313233 
 2915      34356800 
 2916              		.section	.text.carry_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.syntax unified
 2920              		.thumb
 2921              		.thumb_func
 2922              		.fpu fpv4-sp-d16
 2924              	carry_overflow:
 2925              	.LFB15:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2926              		.loc 1 570 38 is_stmt 1 view -0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 571:src/display.c ****       int c;
 2930              		.loc 1 571 7 view .LVU908
 2931              	.LVL323:
 572:src/display.c ****       unsigned int b;
 2932              		.loc 1 572 7 view .LVU909
 573:src/display.c **** 
 2933              		.loc 1 573 7 view .LVU910
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2934              		.loc 1 576 7 view .LVU911
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2935              		.loc 1 570 38 is_stmt 0 view .LVU912
 2936 0000 10B5     		push	{r4, lr}
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 4, -8
 2939              		.cfi_offset 14, -4
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
ARM GAS  /tmp/ccCvaEE3.s 			page 129


 2940              		.loc 1 576 21 view .LVU913
 2941 0002 1B4B     		ldr	r3, .L289
 2942 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0006 023B     		subs	r3, r3, #2
 2944 0008 DBB2     		uxtb	r3, r3
 2945 000a 032B     		cmp	r3, #3
 2946 000c 14D8     		bhi	.L277
 2947 000e 194A     		ldr	r2, .L289+4
 2948 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2949              	.LVL324:
 585:src/display.c **** 	SET_EXP_SIGN;
 2950              		.loc 1 585 7 is_stmt 1 view .LVU914
 585:src/display.c **** 	SET_EXP_SIGN;
 2951              		.loc 1 585 18 is_stmt 0 view .LVU915
 2952 0014 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2953              		.loc 1 585 10 view .LVU916
 2954 0018 042B     		cmp	r3, #4
 2955 001a 17D9     		bls	.L286
 2956              	.L279:
 587:src/display.c ****       set_dig(base, c);
 2957              		.loc 1 587 7 is_stmt 1 view .LVU917
 2958              	.LVL325:
 588:src/display.c **** 
 2959              		.loc 1 588 7 view .LVU918
 587:src/display.c ****       set_dig(base, c);
 2960              		.loc 1 587 28 is_stmt 0 view .LVU919
 2961 001c 164B     		ldr	r3, .L289+8
 2962 001e 1C44     		add	r4, r4, r3
 2963              	.LVL326:
 588:src/display.c **** 
 2964              		.loc 1 588 7 view .LVU920
 2965 0020 6C20     		movs	r0, #108
 2966 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2967 0026 FFF7FEFF 		bl	set_dig
 2968              	.LVL327:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2969              		.loc 1 591 7 is_stmt 1 view .LVU921
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2970              		.loc 1 591 11 is_stmt 0 view .LVU922
 2971 002a FFF7FEFF 		bl	get_carry
 2972              	.LVL328:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2973              		.loc 1 591 10 view .LVU923
 2974 002e D0B9     		cbnz	r0, .L287
 2975              	.L280:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2976              		.loc 1 593 7 is_stmt 1 view .LVU924
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2977              		.loc 1 593 11 is_stmt 0 view .LVU925
 2978 0030 FFF7FEFF 		bl	get_overflow
 2979              	.LVL329:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2980              		.loc 1 593 10 view .LVU926
 2981 0034 88B9     		cbnz	r0, .L288
 595:src/display.c **** 
 2982              		.loc 1 595 5 view .LVU927
ARM GAS  /tmp/ccCvaEE3.s 			page 130


 2983 0036 10BD     		pop	{r4, pc}
 2984              	.LVL330:
 2985              	.L277:
 581:src/display.c ****       }
 2986              		.loc 1 581 16 is_stmt 1 view .LVU928
 581:src/display.c ****       }
 2987              		.loc 1 581 26 is_stmt 0 view .LVU929
 2988 0038 104B     		ldr	r3, .L289+12
 2989 003a 1B68     		ldr	r3, [r3]
 2990 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2991 0040 2409     		lsrs	r4, r4, #4
 581:src/display.c ****       }
 2992              		.loc 1 581 35 view .LVU930
 2993 0042 0134     		adds	r4, r4, #1
 2994              	.LVL331:
 581:src/display.c ****       }
 2995              		.loc 1 581 39 is_stmt 1 view .LVU931
 585:src/display.c **** 	SET_EXP_SIGN;
 2996              		.loc 1 585 7 view .LVU932
 585:src/display.c **** 	SET_EXP_SIGN;
 2997              		.loc 1 585 18 is_stmt 0 view .LVU933
 2998 0044 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2999              		.loc 1 585 10 view .LVU934
 3000 0048 042B     		cmp	r3, #4
 3001 004a E7D8     		bhi	.L279
 3002              	.L286:
 586:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3003              		.loc 1 586 2 is_stmt 1 view .LVU935
 3004              	.LBB292:
 3005              	.LBI292:
 316:src/display.c **** {
 3006              		.loc 1 316 13 view .LVU936
 3007              	.LBB293:
 318:src/display.c ****   set_dot(EXP_SIGN);
 3008              		.loc 1 318 3 view .LVU937
 318:src/display.c ****   set_dot(EXP_SIGN);
 3009              		.loc 1 318 27 is_stmt 0 view .LVU938
 3010 004c 0C4B     		ldr	r3, .L289+16
 3011 004e 2D22     		movs	r2, #45
 319:src/display.c **** }
 3012              		.loc 1 319 3 view .LVU939
 3013 0050 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 3014              		.loc 1 318 27 view .LVU940
 3015 0052 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 3016              		.loc 1 319 3 is_stmt 1 view .LVU941
 3017 0054 FFF7FEFF 		bl	set_dot
 3018              	.LVL332:
 320:src/display.c **** 
 3019              		.loc 1 320 1 is_stmt 0 view .LVU942
 3020 0058 E0E7     		b	.L279
 3021              	.LVL333:
 3022              	.L288:
 320:src/display.c **** 
 3023              		.loc 1 320 1 view .LVU943
ARM GAS  /tmp/ccCvaEE3.s 			page 131


 3024              	.LBE293:
 3025              	.LBE292:
 3026              	.LBB294:
 3027              	.LBI294:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 3028              		.loc 1 570 17 is_stmt 1 view .LVU944
 3029              	.LBB295:
 594:src/display.c ****     }
 3030              		.loc 1 594 2 view .LVU945
 3031              	.LBE295:
 3032              	.LBE294:
 595:src/display.c **** 
 3033              		.loc 1 595 5 is_stmt 0 view .LVU946
 3034 005a BDE81040 		pop	{r4, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 4
 3038              		.cfi_def_cfa_offset 0
 3039              	.LVL334:
 3040              	.LBB297:
 3041              	.LBB296:
 594:src/display.c ****     }
 3042              		.loc 1 594 2 view .LVU947
 3043 005e 6F21     		movs	r1, #111
 3044 0060 7A20     		movs	r0, #122
 3045 0062 FFF7FEBF 		b	set_dig
 3046              	.LVL335:
 3047              	.L287:
 3048              		.cfi_restore_state
 594:src/display.c ****     }
 3049              		.loc 1 594 2 view .LVU948
 3050              	.LBE296:
 3051              	.LBE297:
 592:src/display.c ****       if (get_overflow())
 3052              		.loc 1 592 2 is_stmt 1 view .LVU949
 3053 0066 6321     		movs	r1, #99
 3054 0068 7320     		movs	r0, #115
 3055 006a FFF7FEFF 		bl	set_dig
 3056              	.LVL336:
 3057 006e DFE7     		b	.L280
 3058              	.L290:
 3059              		.align	2
 3060              	.L289:
 3061 0070 00000000 		.word	StateWhileOn
 3062 0074 00000000 		.word	.LANCHOR11
 3063 0078 00000000 		.word	.LC1
 3064 007c 00000000 		.word	main_ram
 3065 0080 00000000 		.word	LastDisplayedExponent
 3066              		.cfi_endproc
 3067              	.LFE15:
 3069              		.global	__aeabi_uldivmod
 3070              		.section	.text.set_int_x,"ax",%progbits
 3071              		.align	1
 3072              		.p2align 2,,3
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
ARM GAS  /tmp/ccCvaEE3.s 			page 132


 3076              		.fpu fpv4-sp-d16
 3078              	set_int_x:
 3079              	.LVL337:
 3080              	.LFB18:
1487:src/display.c **** 	const int ws = word_size();
 3081              		.loc 1 1487 67 view -0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 88
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
1487:src/display.c **** 	const int ws = word_size();
 3085              		.loc 1 1487 67 is_stmt 0 view .LVU951
 3086 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3087              		.cfi_def_cfa_offset 36
 3088              		.cfi_offset 4, -36
 3089              		.cfi_offset 5, -32
 3090              		.cfi_offset 6, -28
 3091              		.cfi_offset 7, -24
 3092              		.cfi_offset 8, -20
 3093              		.cfi_offset 9, -16
 3094              		.cfi_offset 10, -12
 3095              		.cfi_offset 11, -8
 3096              		.cfi_offset 14, -4
 3097 0004 97B0     		sub	sp, sp, #92
 3098              		.cfi_def_cfa_offset 128
1487:src/display.c **** 	const int ws = word_size();
 3099              		.loc 1 1487 67 view .LVU952
 3100 0006 1546     		mov	r5, r2
 3101 0008 0646     		mov	r6, r0
 3102 000a 0F46     		mov	r7, r1
1488:src/display.c **** 	unsigned int b;
 3103              		.loc 1 1488 2 is_stmt 1 view .LVU953
1488:src/display.c **** 	unsigned int b;
 3104              		.loc 1 1488 17 is_stmt 0 view .LVU954
 3105 000c FFF7FEFF 		bl	word_size
 3106              	.LVL338:
1488:src/display.c **** 	unsigned int b;
 3107              		.loc 1 1488 17 view .LVU955
 3108 0010 CD4B     		ldr	r3, .L383
 3109 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3110 0014 023B     		subs	r3, r3, #2
 3111 0016 DBB2     		uxtb	r3, r3
1494:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3112              		.loc 1 1494 6 view .LVU956
 3113 0018 0022     		movs	r2, #0
 3114 001a 032B     		cmp	r3, #3
1488:src/display.c **** 	unsigned int b;
 3115              		.loc 1 1488 17 view .LVU957
 3116 001c 8346     		mov	fp, r0
 3117              	.LVL339:
1489:src/display.c **** 	long long int vs = value;
 3118              		.loc 1 1489 2 is_stmt 1 view .LVU958
1490:src/display.c **** 	unsigned long long int v;
 3119              		.loc 1 1490 2 view .LVU959
1491:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3120              		.loc 1 1491 2 view .LVU960
1492:src/display.c **** 	int i, j, k;
 3121              		.loc 1 1492 2 view .LVU961
ARM GAS  /tmp/ccCvaEE3.s 			page 133


1493:src/display.c **** 	int sign = 0;
 3122              		.loc 1 1493 2 view .LVU962
1494:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3123              		.loc 1 1494 2 view .LVU963
1494:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3124              		.loc 1 1494 6 is_stmt 0 view .LVU964
 3125 001e 0492     		str	r2, [sp, #16]
1495:src/display.c **** 
 3126              		.loc 1 1495 2 is_stmt 1 view .LVU965
 3127              	.LVL340:
1497:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3128              		.loc 1 1497 2 view .LVU966
 3129 0020 00F24181 		bhi	.L292
 3130 0024 C94A     		ldr	r2, .L383+4
 3131 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3132              	.LVL341:
1505:src/display.c **** 	  IntMaxWindow = 0;
 3133              		.loc 1 1505 2 view .LVU967
1505:src/display.c **** 	  IntMaxWindow = 0;
 3134              		.loc 1 1505 5 is_stmt 0 view .LVU968
 3135 002a 002D     		cmp	r5, #0
 3136 002c 00F04181 		beq	.L374
 3137              	.LVL342:
 3138              	.L294:
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3139              		.loc 1 1510 2 is_stmt 1 view .LVU969
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3140              		.loc 1 1510 24 is_stmt 0 view .LVU970
 3141 0030 0AF1FF33 		add	r3, r10, #-1
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3142              		.loc 1 1510 30 view .LVU971
 3143 0034 47F67574 		movw	r4, #32629
 3144 0038 1C41     		asrs	r4, r4, r3
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3145              		.loc 1 1510 5 view .LVU972
 3146 003a 14F00104 		ands	r4, r4, #1
 3147 003e 40F0F380 		bne	.L375
1527:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3148              		.loc 1 1527 4 is_stmt 1 view .LVU973
1527:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3149              		.loc 1 1527 7 is_stmt 0 view .LVU974
 3150 0042 BBF13F0F 		cmp	fp, #63
 3151 0046 17DC     		bgt	.L305
 3152              	.LBB298:
1528:src/display.c **** 	    vs &= mask;
 3153              		.loc 1 1528 6 is_stmt 1 view .LVU975
1528:src/display.c **** 	    vs &= mask;
 3154              		.loc 1 1528 38 is_stmt 0 view .LVU976
 3155 0048 0121     		movs	r1, #1
 3156 004a ABF1200C 		sub	ip, fp, #32
 3157 004e CBF12000 		rsb	r0, fp, #32
 3158 0052 21FA00F0 		lsr	r0, r1, r0
 3159 0056 01FA0CF3 		lsl	r3, r1, ip
 3160 005a 01FA0BF2 		lsl	r2, r1, fp
 3161 005e 0343     		orrs	r3, r3, r0
 3162              	.LVL343:
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
ARM GAS  /tmp/ccCvaEE3.s 			page 134


 3163              		.loc 1 1529 6 is_stmt 1 view .LVU977
1528:src/display.c **** 	    vs &= mask;
 3164              		.loc 1 1528 26 is_stmt 0 view .LVU978
 3165 0060 12F1FF30 		adds	r0, r2, #-1
 3166 0064 43F1FF31 		adc	r1, r3, #-1
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3167              		.loc 1 1529 9 view .LVU979
 3168 0068 3040     		ands	r0, r0, r6
 3169 006a 3940     		ands	r1, r1, r7
 3170              	.LVL344:
1530:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1530 9 view .LVU980
 3172 006c BAF10A0F 		cmp	r10, #10
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3173              		.loc 1 1529 9 view .LVU981
 3174 0070 0646     		mov	r6, r0
 3175              	.LVL345:
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3176              		.loc 1 1529 9 view .LVU982
 3177 0072 0F46     		mov	r7, r1
1530:src/display.c **** 	      vs |= ~mask;
 3178              		.loc 1 1530 6 is_stmt 1 view .LVU983
1530:src/display.c **** 	      vs |= ~mask;
 3179              		.loc 1 1530 9 is_stmt 0 view .LVU984
 3180 0074 00F03D81 		beq	.L376
 3181              	.LVL346:
 3182              	.L305:
1530:src/display.c **** 	      vs |= ~mask;
 3183              		.loc 1 1530 9 view .LVU985
 3184              	.LBE298:
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3185              		.loc 1 1534 4 is_stmt 1 view .LVU986
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3186              		.loc 1 1534 8 is_stmt 0 view .LVU987
 3187 0078 B54B     		ldr	r3, .L383+8
 3188 007a 1B68     		ldr	r3, [r3]
 3189 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3190              		.loc 1 1534 7 view .LVU988
 3191 0080 9A07     		lsls	r2, r3, #30
 3192 0082 41D5     		bpl	.L336
1537:src/display.c **** 	    v = (unsigned long long int)vs;
 3193              		.loc 1 1537 11 is_stmt 1 view .LVU989
 3194              	.LBB299:
1545:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3195              		.loc 1 1545 6 view .LVU990
1546:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3196              		.loc 1 1546 6 view .LVU991
1546:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3197              		.loc 1 1546 25 is_stmt 0 view .LVU992
 3198 0084 4FEA5A02 		lsr	r2, r10, #1
 3199              	.LVL347:
1547:src/display.c **** 	    v = (unsigned long long int)vs;
 3200              		.loc 1 1547 6 is_stmt 1 view .LVU993
1547:src/display.c **** 	    v = (unsigned long long int)vs;
 3201              		.loc 1 1547 43 is_stmt 0 view .LVU994
 3202 0088 12F00A0F 		tst	r2, #10
ARM GAS  /tmp/ccCvaEE3.s 			page 135


 3203 008c 14BF     		ite	ne
 3204 008e 0123     		movne	r3, #1
 3205 0090 0023     		moveq	r3, #0
1547:src/display.c **** 	    v = (unsigned long long int)vs;
 3206              		.loc 1 1547 70 view .LVU995
 3207 0092 12F00C0F 		tst	r2, #12
 3208 0096 18BF     		it	ne
 3209 0098 43F00203 		orrne	r3, r3, #2
 3210              	.LVL348:
 3211              	.L311:
1548:src/display.c **** 
 3212              		.loc 1 1548 6 is_stmt 1 discriminator 4 view .LVU996
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3213              		.loc 1 1550 14 is_stmt 0 discriminator 4 view .LVU997
 3214 009c 0BEB0308 		add	r8, fp, r3
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3215              		.loc 1 1550 27 discriminator 4 view .LVU998
 3216 00a0 0133     		adds	r3, r3, #1
 3217              	.LVL349:
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3218              		.loc 1 1550 21 discriminator 4 view .LVU999
 3219 00a2 B8FBF3F8 		udiv	r8, r8, r3
1551:src/display.c **** 	      const int r = v % b;
 3220              		.loc 1 1551 6 discriminator 4 view .LVU1000
 3221 00a6 B8F1000F 		cmp	r8, #0
1548:src/display.c **** 
 3222              		.loc 1 1548 8 discriminator 4 view .LVU1001
 3223 00aa 3046     		mov	r0, r6
 3224 00ac 3946     		mov	r1, r7
 3225              	.LVL350:
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3226              		.loc 1 1550 6 is_stmt 1 discriminator 4 view .LVU1002
1551:src/display.c **** 	      const int r = v % b;
 3227              		.loc 1 1551 6 discriminator 4 view .LVU1003
1551:src/display.c **** 	      const int r = v % b;
 3228              		.loc 1 1551 16 discriminator 4 view .LVU1004
1551:src/display.c **** 	      const int r = v % b;
 3229              		.loc 1 1551 6 is_stmt 0 discriminator 4 view .LVU1005
 3230 00ae 40F38381 		ble	.L337
 3231 00b2 05AC     		add	r4, sp, #20
 3232 00b4 DFF8A4B2 		ldr	fp, .L383+20
 3233              	.LVL351:
1551:src/display.c **** 	      const int r = v % b;
 3234              		.loc 1 1551 6 discriminator 4 view .LVU1006
 3235 00b8 08EB0406 		add	r6, r8, r4
 3236              	.LVL352:
 3237              	.L312:
 3238              	.LBB300:
1552:src/display.c **** 	      v /= b;
 3239              		.loc 1 1552 8 is_stmt 1 discriminator 3 view .LVU1007
 3240 00bc 5246     		mov	r2, r10
 3241 00be 0023     		movs	r3, #0
 3242 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3243              	.LVL353:
1553:src/display.c **** 	      buf[i] = DIGITS[r];
 3244              		.loc 1 1553 8 discriminator 3 view .LVU1008
1554:src/display.c **** 	    }
ARM GAS  /tmp/ccCvaEE3.s 			page 136


 3245              		.loc 1 1554 15 is_stmt 0 discriminator 3 view .LVU1009
 3246 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3247 00c8 04F8013B 		strb	r3, [r4], #1
 3248              	.LVL354:
1554:src/display.c **** 	    }
 3249              		.loc 1 1554 8 is_stmt 1 discriminator 3 view .LVU1010
 3250              	.LBE300:
1551:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1551 21 discriminator 3 view .LVU1011
1551:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1551 16 discriminator 3 view .LVU1012
1551:src/display.c **** 	      const int r = v % b;
 3253              		.loc 1 1551 6 is_stmt 0 discriminator 3 view .LVU1013
 3254 00cc B442     		cmp	r4, r6
 3255 00ce F5D1     		bne	.L312
 3256 00d0 08F1FF31 		add	r1, r8, #-1
 3257              	.LVL355:
1551:src/display.c **** 	      const int r = v % b;
 3258              		.loc 1 1551 6 view .LVU1014
 3259 00d4 4446     		mov	r4, r8
 3260              	.LVL356:
 3261              	.L304:
1551:src/display.c **** 	      const int r = v % b;
 3262              		.loc 1 1551 6 view .LVU1015
 3263              	.LBE299:
1564:src/display.c **** 	if (res) {
 3264              		.loc 1 1564 2 is_stmt 1 view .LVU1016
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3265              		.loc 1 1565 2 view .LVU1017
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3266              		.loc 1 1565 5 is_stmt 0 view .LVU1018
 3267 00d6 002D     		cmp	r5, #0
 3268 00d8 3ED0     		beq	.L313
 3269              	.LVL357:
 3270              	.L377:
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3271              		.loc 1 1566 4 is_stmt 1 view .LVU1019
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3272              		.loc 1 1566 7 is_stmt 0 view .LVU1020
 3273 00da 049B     		ldr	r3, [sp, #16]
 3274 00dc 13B1     		cbz	r3, .L314
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3275              		.loc 1 1566 14 is_stmt 1 discriminator 1 view .LVU1021
 3276              	.LVL358:
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3277              		.loc 1 1566 21 is_stmt 0 discriminator 1 view .LVU1022
 3278 00de 2D23     		movs	r3, #45
 3279 00e0 05F8013B 		strb	r3, [r5], #1
 3280              	.LVL359:
 3281              	.L314:
1567:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3282              		.loc 1 1567 4 is_stmt 1 view .LVU1023
1567:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3283              		.loc 1 1567 7 is_stmt 0 view .LVU1024
 3284 00e4 0D2C     		cmp	r4, #13
 3285 00e6 00F3E980 		bgt	.L315
1574:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/ccCvaEE3.s 			page 137


 3286              		.loc 1 1574 12 is_stmt 1 view .LVU1025
 3287              	.LVL360:
1574:src/display.c **** 	      *res++ = buf[i];
 3288              		.loc 1 1574 12 is_stmt 0 view .LVU1026
 3289 00ea 481C     		adds	r0, r1, #1
 3290 00ec 09D0     		beq	.L291
 3291 00ee 0131     		adds	r1, r1, #1
 3292 00f0 05AA     		add	r2, sp, #20
 3293 00f2 013D     		subs	r5, r5, #1
 3294 00f4 1144     		add	r1, r1, r2
 3295              	.LVL361:
 3296              	.L318:
1575:src/display.c **** 	  }
 3297              		.loc 1 1575 8 is_stmt 1 view .LVU1027
1575:src/display.c **** 	  }
 3298              		.loc 1 1575 15 is_stmt 0 view .LVU1028
 3299 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3300              	.LVL362:
1575:src/display.c **** 	  }
 3301              		.loc 1 1575 15 view .LVU1029
 3302 00fa 05F8013F 		strb	r3, [r5, #1]!
 3303              	.LVL363:
1574:src/display.c **** 	      *res++ = buf[i];
 3304              		.loc 1 1574 12 is_stmt 1 view .LVU1030
1574:src/display.c **** 	      *res++ = buf[i];
 3305              		.loc 1 1574 12 is_stmt 0 view .LVU1031
 3306 00fe 9142     		cmp	r1, r2
 3307 0100 F9D1     		bne	.L318
 3308              	.LVL364:
 3309              	.L291:
1622:src/display.c **** 
 3310              		.loc 1 1622 7 view .LVU1032
 3311 0102 17B0     		add	sp, sp, #92
 3312              		.cfi_remember_state
 3313              		.cfi_def_cfa_offset 36
 3314              		@ sp needed
 3315 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3316              	.LVL365:
 3317              	.L336:
 3318              		.cfi_restore_state
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3319              		.loc 1 1534 25 discriminator 1 view .LVU1033
 3320 0108 56EA0703 		orrs	r3, r6, r7
 3321 010c 00F0C480 		beq	.L299
1537:src/display.c **** 	    v = (unsigned long long int)vs;
 3322              		.loc 1 1537 11 is_stmt 1 view .LVU1034
1538:src/display.c **** 	    for (i=0; v != 0; i++) {
 3323              		.loc 1 1538 6 view .LVU1035
 3324 0110 DFF848B2 		ldr	fp, .L383+20
 3325              	.LVL366:
1538:src/display.c **** 	    for (i=0; v != 0; i++) {
 3326              		.loc 1 1538 6 is_stmt 0 view .LVU1036
 3327 0114 CDF800A0 		str	r10, [sp]
 3328 0118 0023     		movs	r3, #0
1538:src/display.c **** 	    for (i=0; v != 0; i++) {
 3329              		.loc 1 1538 8 view .LVU1037
 3330 011a B046     		mov	r8, r6
ARM GAS  /tmp/ccCvaEE3.s 			page 138


 3331 011c D946     		mov	r9, fp
 3332 011e 3E46     		mov	r6, r7
1539:src/display.c **** 	      const int r = v % b;
 3333              		.loc 1 1539 6 is_stmt 1 view .LVU1038
 3334              	.LVL367:
1539:src/display.c **** 	      const int r = v % b;
 3335              		.loc 1 1539 16 view .LVU1039
 3336 0120 9B46     		mov	fp, r3
 3337 0122 05AF     		add	r7, sp, #20
 3338              	.LVL368:
 3339              	.L310:
 3340              	.LBB301:
1540:src/display.c **** 	      v /= b;
 3341              		.loc 1 1540 8 discriminator 3 view .LVU1040
 3342 0124 4046     		mov	r0, r8
 3343 0126 3146     		mov	r1, r6
 3344 0128 5246     		mov	r2, r10
 3345 012a 5B46     		mov	r3, fp
 3346 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3347              	.LVL369:
 3348 0130 3346     		mov	r3, r6
 3349 0132 9446     		mov	ip, r2
 3350              	.LVL370:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3351              		.loc 1 1541 8 discriminator 3 view .LVU1041
 3352              	.LBE301:
1539:src/display.c **** 	      const int r = v % b;
 3353              		.loc 1 1539 6 is_stmt 0 discriminator 3 view .LVU1042
 3354 0134 5B45     		cmp	r3, fp
 3355 0136 4246     		mov	r2, r8
 3356              	.LVL371:
 3357              	.LBB302:
1542:src/display.c **** 	    }
 3358              		.loc 1 1542 15 discriminator 3 view .LVU1043
 3359 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3360              	.LVL372:
1542:src/display.c **** 	    }
 3361              		.loc 1 1542 15 discriminator 3 view .LVU1044
 3362 013c 07F801CB 		strb	ip, [r7], #1
 3363              	.LBE302:
1539:src/display.c **** 	      const int r = v % b;
 3364              		.loc 1 1539 6 discriminator 3 view .LVU1045
 3365 0140 08BF     		it	eq
 3366 0142 5245     		cmpeq	r2, r10
 3367              	.LBB303:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3368              		.loc 1 1541 10 discriminator 3 view .LVU1046
 3369 0144 0E46     		mov	r6, r1
 3370              	.LVL373:
1542:src/display.c **** 	    }
 3371              		.loc 1 1542 8 is_stmt 1 discriminator 3 view .LVU1047
 3372              	.LBE303:
1539:src/display.c **** 	      const int r = v % b;
 3373              		.loc 1 1539 24 discriminator 3 view .LVU1048
 3374              	.LBB304:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3375              		.loc 1 1541 10 is_stmt 0 discriminator 3 view .LVU1049
ARM GAS  /tmp/ccCvaEE3.s 			page 139


 3376 0146 8046     		mov	r8, r0
 3377 0148 2146     		mov	r1, r4
 3378              	.LVL374:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1541 10 discriminator 3 view .LVU1050
 3380              	.LBE304:
1539:src/display.c **** 	      const int r = v % b;
 3381              		.loc 1 1539 25 discriminator 3 view .LVU1051
 3382 014a 04F10104 		add	r4, r4, #1
 3383              	.LVL375:
1539:src/display.c **** 	      const int r = v % b;
 3384              		.loc 1 1539 16 is_stmt 1 discriminator 3 view .LVU1052
1539:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1539 6 is_stmt 0 discriminator 3 view .LVU1053
 3386 014e E9D2     		bcs	.L310
 3387 0150 DDF800A0 		ldr	r10, [sp]
 3388              	.LVL376:
1564:src/display.c **** 	if (res) {
 3389              		.loc 1 1564 2 is_stmt 1 view .LVU1054
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3390              		.loc 1 1565 2 view .LVU1055
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3391              		.loc 1 1565 5 is_stmt 0 view .LVU1056
 3392 0154 002D     		cmp	r5, #0
 3393 0156 C0D1     		bne	.L377
 3394              	.LVL377:
 3395              	.L313:
 3396              	.LBB305:
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3397              		.loc 1 1593 4 is_stmt 1 view .LVU1057
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3398              		.loc 1 1593 33 is_stmt 0 view .LVU1058
 3399 0158 BAF1020F 		cmp	r10, #2
 3400 015c 00F0F080 		beq	.L378
 3401              	.LVL378:
1594:src/display.c **** 	    : b == 16 ? 2 : 3;
 3402              		.loc 1 1594 4 is_stmt 1 view .LVU1059
1594:src/display.c **** 	    : b == 16 ? 2 : 3;
 3403              		.loc 1 1594 30 is_stmt 0 view .LVU1060
 3404 0160 BAF1040F 		cmp	r10, #4
 3405 0164 00F01F81 		beq	.L379
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3406              		.loc 1 1593 33 view .LVU1061
 3407 0168 BAF1100F 		cmp	r10, #16
 3408 016c 0CBF     		ite	eq
 3409 016e 4FF0020A 		moveq	r10, #2
 3410 0172 4FF0030A 		movne	r10, #3
 3411 0176 0C26     		movs	r6, #12
 3412              	.LVL379:
 3413              	.L320:
1596:src/display.c **** #endif
 3414              		.loc 1 1596 4 is_stmt 1 view .LVU1062
 3415 0178 0091     		str	r1, [sp]
 3416 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3417              	.LVL380:
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3418              		.loc 1 1598 4 view .LVU1063
ARM GAS  /tmp/ccCvaEE3.s 			page 140


1599:src/display.c **** 	    State2.window = 0;
 3419              		.loc 1 1599 26 is_stmt 0 view .LVU1064
 3420 017e 724B     		ldr	r3, .L383
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3421              		.loc 1 1598 17 view .LVU1065
 3422 0180 744A     		ldr	r2, .L383+12
1599:src/display.c **** 	    State2.window = 0;
 3423              		.loc 1 1599 26 view .LVU1066
 3424 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3425              		.loc 1 1598 27 view .LVU1067
 3426 0184 0099     		ldr	r1, [sp]
 3427 0186 91FBF6F1 		sdiv	r1, r1, r6
1599:src/display.c **** 	    State2.window = 0;
 3428              		.loc 1 1599 8 view .LVU1068
 3429 018a C3F3C207 		ubfx	r7, r3, #3, #3
1599:src/display.c **** 	    State2.window = 0;
 3430              		.loc 1 1599 7 view .LVU1069
 3431 018e B942     		cmp	r1, r7
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3432              		.loc 1 1598 17 view .LVU1070
 3433 0190 1160     		str	r1, [r2]
1599:src/display.c **** 	    State2.window = 0;
 3434              		.loc 1 1599 4 is_stmt 1 view .LVU1071
1599:src/display.c **** 	    State2.window = 0;
 3435              		.loc 1 1599 7 is_stmt 0 view .LVU1072
 3436 0192 C0F2F680 		blt	.L322
 3437 0196 06FB07F7 		mul	r7, r6, r7
 3438              	.L323:
1601:src/display.c **** 
 3439              		.loc 1 1601 4 is_stmt 1 view .LVU1073
1601:src/display.c **** 
 3440              		.loc 1 1601 11 is_stmt 0 view .LVU1074
 3441 019a 16AB     		add	r3, sp, #88
 3442 019c 16AA     		add	r2, sp, #88
 3443 019e 1C44     		add	r4, r4, r3
 3444              	.LVL381:
1601:src/display.c **** 
 3445              		.loc 1 1601 11 view .LVU1075
 3446 01a0 D519     		adds	r5, r2, r7
 3447 01a2 0023     		movs	r3, #0
 3448 01a4 453D     		subs	r5, r5, #69
 3449 01a6 04F8443C 		strb	r3, [r4, #-68]
1603:src/display.c **** 	  for (k = 0; k < 12; k++)
 3450              		.loc 1 1603 4 is_stmt 1 view .LVU1076
 3451              	.LVL382:
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3452              		.loc 1 1604 4 view .LVU1077
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3453              		.loc 1 1604 16 view .LVU1078
1601:src/display.c **** 
 3454              		.loc 1 1601 11 is_stmt 0 view .LVU1079
 3455 01aa 2A46     		mov	r2, r5
 3456              	.LVL383:
 3457              	.L325:
1605:src/display.c **** 	      break;
 3458              		.loc 1 1605 6 is_stmt 1 view .LVU1080
ARM GAS  /tmp/ccCvaEE3.s 			page 141


1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3459              		.loc 1 1604 24 view .LVU1081
1605:src/display.c **** 	      break;
 3460              		.loc 1 1605 9 is_stmt 0 view .LVU1082
 3461 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3462 01b0 0029     		cmp	r1, #0
 3463 01b2 00F0EC80 		beq	.L324
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3464              		.loc 1 1604 25 discriminator 2 view .LVU1083
 3465 01b6 0133     		adds	r3, r3, #1
 3466              	.LVL384:
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3467              		.loc 1 1604 16 is_stmt 1 discriminator 2 view .LVU1084
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3468              		.loc 1 1604 4 is_stmt 0 discriminator 2 view .LVU1085
 3469 01b8 0C2B     		cmp	r3, #12
 3470 01ba F7D1     		bne	.L325
1607:src/display.c **** 	    int ch = buf[j++];
 3471              		.loc 1 1607 4 view .LVU1086
 3472 01bc 4FF00B08 		mov	r8, #11
 3473              	.LVL385:
 3474              	.L326:
1607:src/display.c **** 	    int ch = buf[j++];
 3475              		.loc 1 1607 4 view .LVU1087
 3476 01c0 0137     		adds	r7, r7, #1
 3477 01c2 4744     		add	r7, r7, r8
 3478 01c4 4446     		mov	r4, r8
 3479 01c6 4FF0630B 		mov	fp, #99
 3480 01ca 09E0     		b	.L331
 3481              	.LVL386:
 3482              	.L380:
 3483              	.LBB306:
1613:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3484              		.loc 1 1613 8 view .LVU1088
 3485 01cc 624B     		ldr	r3, .L383+16
 3486 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3487              	.LVL387:
 3488              	.LBB307:
 3489              	.LBI307:
 375:src/display.c ****   if (sep == SEP_NONE)
 3490              		.loc 1 375 14 is_stmt 1 view .LVU1089
 3491              	.LBB308:
 376:src/display.c ****     return res;
 3492              		.loc 1 376 3 view .LVU1090
 376:src/display.c ****     return res;
 3493              		.loc 1 376 6 is_stmt 0 view .LVU1091
 3494 01d0 09B1     		cbz	r1, .L329
 376:src/display.c ****     return res;
 3495              		.loc 1 376 6 view .LVU1092
 3496 01d2 FFF7FEFF 		bl	set_separator.part.0
 3497              	.LVL388:
 3498              	.L329:
 376:src/display.c ****     return res;
 3499              		.loc 1 376 6 view .LVU1093
 3500              	.LBE308:
 3501              	.LBE307:
1614:src/display.c **** 	  }
ARM GAS  /tmp/ccCvaEE3.s 			page 142


 3502              		.loc 1 1614 6 is_stmt 1 discriminator 2 view .LVU1094
 3503              	.LBE306:
1607:src/display.c **** 	    int ch = buf[j++];
 3504              		.loc 1 1607 4 is_stmt 0 discriminator 2 view .LVU1095
 3505 01d6 013C     		subs	r4, r4, #1
1607:src/display.c **** 	    int ch = buf[j++];
 3506              		.loc 1 1607 4 discriminator 2 view .LVU1096
 3507 01d8 621C     		adds	r2, r4, #1
 3508              	.LBB311:
1614:src/display.c **** 	  }
 3509              		.loc 1 1614 10 discriminator 2 view .LVU1097
 3510 01da ABF1090B 		sub	fp, fp, #9
 3511              	.LVL389:
1614:src/display.c **** 	  }
 3512              		.loc 1 1614 10 discriminator 2 view .LVU1098
 3513              	.LBE311:
1607:src/display.c **** 	    int ch = buf[j++];
 3514              		.loc 1 1607 24 is_stmt 1 discriminator 2 view .LVU1099
1607:src/display.c **** 	    int ch = buf[j++];
 3515              		.loc 1 1607 14 discriminator 2 view .LVU1100
1607:src/display.c **** 	    int ch = buf[j++];
 3516              		.loc 1 1607 4 is_stmt 0 discriminator 2 view .LVU1101
 3517 01de 16D0     		beq	.L335
 3518              	.LVL390:
 3519              	.L331:
 3520              	.LBB312:
1608:src/display.c **** 	    if (i >= shift)
 3521              		.loc 1 1608 6 is_stmt 1 view .LVU1102
1610:src/display.c **** 	    set_dig(dig, ch);
 3522              		.loc 1 1610 8 view .LVU1103
1608:src/display.c **** 	    if (i >= shift)
 3523              		.loc 1 1608 10 is_stmt 0 view .LVU1104
 3524 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1609:src/display.c **** 	      ch -= 030;
 3525              		.loc 1 1609 9 view .LVU1105
 3526 01e4 A8EB0402 		sub	r2, r8, r4
 3527 01e8 B242     		cmp	r2, r6
 3528 01ea A7EB0409 		sub	r9, r7, r4
 3529              	.LVL391:
1609:src/display.c **** 	      ch -= 030;
 3530              		.loc 1 1609 6 is_stmt 1 view .LVU1106
1611:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3531              		.loc 1 1611 6 is_stmt 0 view .LVU1107
 3532 01ee 5846     		mov	r0, fp
1610:src/display.c **** 	    set_dig(dig, ch);
 3533              		.loc 1 1610 11 view .LVU1108
 3534 01f0 A8BF     		it	ge
 3535 01f2 1839     		subge	r1, r1, #24
 3536              	.LVL392:
1611:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3537              		.loc 1 1611 6 is_stmt 1 view .LVU1109
 3538 01f4 FFF7FEFF 		bl	set_dig
 3539              	.LVL393:
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3540              		.loc 1 1612 6 view .LVU1110
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3541              		.loc 1 1612 13 is_stmt 0 view .LVU1111
ARM GAS  /tmp/ccCvaEE3.s 			page 143


 3542 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3543 01fc 0AFB1393 		mls	r3, r10, r3, r9
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3544              		.loc 1 1612 9 view .LVU1112
 3545 0200 002B     		cmp	r3, #0
 3546 0202 E8D1     		bne	.L329
1613:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3547              		.loc 1 1613 8 is_stmt 1 discriminator 1 view .LVU1113
 3548              	.LBB310:
 3549              	.LBB309:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3550              		.loc 1 378 3 discriminator 1 view .LVU1114
 3551 0204 5846     		mov	r0, fp
 3552              	.LBE309:
 3553              	.LBE310:
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3554              		.loc 1 1612 27 is_stmt 0 discriminator 1 view .LVU1115
 3555 0206 002C     		cmp	r4, #0
 3556 0208 E0D1     		bne	.L380
1614:src/display.c **** 	  }
 3557              		.loc 1 1614 6 is_stmt 1 view .LVU1116
1614:src/display.c **** 	  }
 3558              		.loc 1 1614 10 is_stmt 0 view .LVU1117
 3559 020a ABF1090B 		sub	fp, fp, #9
 3560              	.LVL394:
1614:src/display.c **** 	  }
 3561              		.loc 1 1614 10 view .LVU1118
 3562              	.LBE312:
1607:src/display.c **** 	    int ch = buf[j++];
 3563              		.loc 1 1607 24 is_stmt 1 view .LVU1119
1607:src/display.c **** 	    int ch = buf[j++];
 3564              		.loc 1 1607 14 view .LVU1120
 3565              	.L335:
1616:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1616 4 view .LVU1121
1616:src/display.c **** 	    if (dig >= 0)
 3567              		.loc 1 1616 7 is_stmt 0 view .LVU1122
 3568 020e 049B     		ldr	r3, [sp, #16]
 3569 0210 002B     		cmp	r3, #0
 3570 0212 3FF476AF 		beq	.L291
1617:src/display.c **** 	      set_dig(dig, '-');
 3571              		.loc 1 1617 6 is_stmt 1 view .LVU1123
1617:src/display.c **** 	      set_dig(dig, '-');
 3572              		.loc 1 1617 9 is_stmt 0 view .LVU1124
 3573 0216 BBF1000F 		cmp	fp, #0
 3574 021a C0F2C680 		blt	.L381
 3575              	.LVL395:
 3576              	.L334:
1618:src/display.c **** 	    else	SET_MANT_SIGN;
 3577              		.loc 1 1618 8 is_stmt 1 view .LVU1125
 3578 021e 5846     		mov	r0, fp
 3579 0220 2D21     		movs	r1, #45
 3580 0222 FFF7FEFF 		bl	set_dig
 3581              	.LVL396:
 3582 0226 6CE7     		b	.L291
 3583              	.LVL397:
 3584              	.L375:
ARM GAS  /tmp/ccCvaEE3.s 			page 144


1618:src/display.c **** 	    else	SET_MANT_SIGN;
 3585              		.loc 1 1618 8 is_stmt 0 view .LVU1126
 3586              	.LBE305:
1511:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3587              		.loc 1 1511 4 is_stmt 1 view .LVU1127
1511:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3588              		.loc 1 1511 8 is_stmt 0 view .LVU1128
 3589 0228 04AA     		add	r2, sp, #16
 3590 022a 3046     		mov	r0, r6
 3591 022c 3946     		mov	r1, r7
 3592 022e FFF7FEFF 		bl	extract_value
 3593              	.LVL398:
 3594 0232 8046     		mov	r8, r0
 3595 0234 8946     		mov	r9, r1
 3596              	.LVL399:
1512:src/display.c **** 	    v = value;
 3597              		.loc 1 1512 4 is_stmt 1 view .LVU1129
1512:src/display.c **** 	    v = value;
 3598              		.loc 1 1512 8 is_stmt 0 view .LVU1130
 3599 0236 FFF7FEFF 		bl	int_mode
 3600              	.LVL400:
1512:src/display.c **** 	    v = value;
 3601              		.loc 1 1512 7 view .LVU1131
 3602 023a 38BB     		cbnz	r0, .L296
1512:src/display.c **** 	    v = value;
 3603              		.loc 1 1512 33 discriminator 1 view .LVU1132
 3604 023c 049B     		ldr	r3, [sp, #16]
 3605 023e 012B     		cmp	r3, #1
 3606 0240 24D1     		bne	.L296
1512:src/display.c **** 	    v = value;
 3607              		.loc 1 1512 46 discriminator 2 view .LVU1133
 3608 0242 58EA0903 		orrs	r3, r8, r9
 3609 0246 00F08B80 		beq	.L382
 3610              	.LVL401:
 3611              	.L297:
1512:src/display.c **** 	    v = value;
 3612              		.loc 1 1512 46 discriminator 2 view .LVU1134
 3613 024a DFF810B1 		ldr	fp, .L383+20
 3614              	.LVL402:
1487:src/display.c **** 	const int ws = word_size();
 3615              		.loc 1 1487 67 discriminator 3 view .LVU1135
 3616 024e 0395     		str	r5, [sp, #12]
 3617 0250 05AB     		add	r3, sp, #20
 3618 0252 5D46     		mov	r5, fp
 3619              	.LVL403:
1487:src/display.c **** 	const int ws = word_size();
 3620              		.loc 1 1487 67 discriminator 3 view .LVU1136
 3621 0254 5646     		mov	r6, r10
 3622 0256 0027     		movs	r7, #0
 3623 0258 0024     		movs	r4, #0
 3624 025a 9B46     		mov	fp, r3
 3625              	.LVL404:
 3626              	.L303:
 3627              	.LBB315:
1521:src/display.c **** 	      v /= b;
 3628              		.loc 1 1521 8 is_stmt 1 discriminator 3 view .LVU1137
 3629 025c 4046     		mov	r0, r8
ARM GAS  /tmp/ccCvaEE3.s 			page 145


 3630 025e 4946     		mov	r1, r9
 3631 0260 3246     		mov	r2, r6
 3632 0262 3B46     		mov	r3, r7
 3633 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3634              	.LVL405:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3635              		.loc 1 1522 8 discriminator 3 view .LVU1138
 3636 0268 CDE90089 		strd	r8, [sp]
1523:src/display.c **** 	    }
 3637              		.loc 1 1523 15 is_stmt 0 discriminator 3 view .LVU1139
 3638 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3639 026e 0BF8013B 		strb	r3, [fp], #1
 3640              	.LBE315:
1520:src/display.c **** 	      const int r = v % b;
 3641              		.loc 1 1520 6 discriminator 3 view .LVU1140
 3642 0272 DDE90023 		ldrd	r2, [sp]
 3643              	.LVL406:
1520:src/display.c **** 	      const int r = v % b;
 3644              		.loc 1 1520 6 discriminator 3 view .LVU1141
 3645 0276 BB42     		cmp	r3, r7
 3646 0278 08BF     		it	eq
 3647 027a B242     		cmpeq	r2, r6
 3648              	.LBB316:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3649              		.loc 1 1522 10 discriminator 3 view .LVU1142
 3650 027c 8946     		mov	r9, r1
 3651              	.LVL407:
1523:src/display.c **** 	    }
 3652              		.loc 1 1523 8 is_stmt 1 discriminator 3 view .LVU1143
 3653              	.LBE316:
1520:src/display.c **** 	      const int r = v % b;
 3654              		.loc 1 1520 24 discriminator 3 view .LVU1144
 3655              	.LBB317:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3656              		.loc 1 1522 10 is_stmt 0 discriminator 3 view .LVU1145
 3657 027e 8046     		mov	r8, r0
 3658 0280 2146     		mov	r1, r4
 3659              	.LVL408:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3660              		.loc 1 1522 10 discriminator 3 view .LVU1146
 3661              	.LBE317:
1520:src/display.c **** 	      const int r = v % b;
 3662              		.loc 1 1520 25 discriminator 3 view .LVU1147
 3663 0282 04F10104 		add	r4, r4, #1
 3664              	.LVL409:
1520:src/display.c **** 	      const int r = v % b;
 3665              		.loc 1 1520 16 is_stmt 1 discriminator 3 view .LVU1148
1520:src/display.c **** 	      const int r = v % b;
 3666              		.loc 1 1520 6 is_stmt 0 discriminator 3 view .LVU1149
 3667 0286 E9D2     		bcs	.L303
 3668 0288 039D     		ldr	r5, [sp, #12]
 3669 028a 24E7     		b	.L304
 3670              	.LVL410:
 3671              	.L296:
1514:src/display.c **** 	    if (sign)
 3672              		.loc 1 1514 4 is_stmt 1 view .LVU1150
1514:src/display.c **** 	    if (sign)
ARM GAS  /tmp/ccCvaEE3.s 			page 146


 3673              		.loc 1 1514 7 is_stmt 0 view .LVU1151
 3674 028c 58EA0903 		orrs	r3, r8, r9
 3675 0290 DBD1     		bne	.L297
1515:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3676              		.loc 1 1515 6 is_stmt 1 view .LVU1152
1515:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3677              		.loc 1 1515 9 is_stmt 0 view .LVU1153
 3678 0292 049B     		ldr	r3, [sp, #16]
 3679 0294 002B     		cmp	r3, #0
 3680 0296 69D1     		bne	.L298
 3681              	.LVL411:
 3682              	.L299:
1517:src/display.c **** 	    return;
 3683              		.loc 1 1517 6 is_stmt 1 view .LVU1154
 3684              	.LBB318:
 3685              	.LBI318:
 415:src/display.c ****   if (res) *res++ = ch;
 3686              		.loc 1 415 14 view .LVU1155
 3687              	.LBB319:
 416:src/display.c ****   else	set_dig(base, ch);
 3688              		.loc 1 416 3 view .LVU1156
 416:src/display.c ****   else	set_dig(base, ch);
 3689              		.loc 1 416 6 is_stmt 0 view .LVU1157
 3690 0298 002D     		cmp	r5, #0
 3691 029a 6DD0     		beq	.L301
 3692              	.LVL412:
 3693              	.L300:
 416:src/display.c ****   else	set_dig(base, ch);
 3694              		.loc 1 416 12 is_stmt 1 view .LVU1158
 416:src/display.c ****   else	set_dig(base, ch);
 3695              		.loc 1 416 19 is_stmt 0 view .LVU1159
 3696 029c 3023     		movs	r3, #48
 3697 029e 2B70     		strb	r3, [r5]
 3698              	.LBE319:
 3699              	.LBE318:
1622:src/display.c **** 
 3700              		.loc 1 1622 7 view .LVU1160
 3701 02a0 17B0     		add	sp, sp, #92
 3702              		.cfi_remember_state
 3703              		.cfi_def_cfa_offset 36
 3704              		@ sp needed
 3705 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3706              	.LVL413:
 3707              	.L292:
 3708              		.cfi_restore_state
1502:src/display.c **** 	}
 3709              		.loc 1 1502 11 is_stmt 1 view .LVU1161
1502:src/display.c **** 	}
 3710              		.loc 1 1502 15 is_stmt 0 view .LVU1162
 3711 02a6 FFF7FEFF 		bl	int_base
 3712              	.LVL414:
1502:src/display.c **** 	}
 3713              		.loc 1 1502 15 view .LVU1163
 3714 02aa 8246     		mov	r10, r0
 3715              	.LVL415:
1502:src/display.c **** 	}
 3716              		.loc 1 1502 27 is_stmt 1 view .LVU1164
ARM GAS  /tmp/ccCvaEE3.s 			page 147


1505:src/display.c **** 	  IntMaxWindow = 0;
 3717              		.loc 1 1505 2 view .LVU1165
1505:src/display.c **** 	  IntMaxWindow = 0;
 3718              		.loc 1 1505 5 is_stmt 0 view .LVU1166
 3719 02ac 002D     		cmp	r5, #0
 3720 02ae 7FF4BFAE 		bne	.L294
 3721              	.LVL416:
 3722              	.L374:
1506:src/display.c **** 	  carry_overflow();
 3723              		.loc 1 1506 4 is_stmt 1 view .LVU1167
1506:src/display.c **** 	  carry_overflow();
 3724              		.loc 1 1506 17 is_stmt 0 view .LVU1168
 3725 02b2 284B     		ldr	r3, .L383+12
 3726 02b4 1D60     		str	r5, [r3]
1507:src/display.c **** 	}
 3727              		.loc 1 1507 4 is_stmt 1 view .LVU1169
 3728 02b6 FFF7FEFF 		bl	carry_overflow
 3729              	.LVL417:
 3730 02ba B9E6     		b	.L294
 3731              	.LVL418:
 3732              	.L315:
1568:src/display.c **** 	      *res++ = buf[i];
 3733              		.loc 1 1568 12 view .LVU1170
1568:src/display.c **** 	      *res++ = buf[i];
 3734              		.loc 1 1568 12 is_stmt 0 view .LVU1171
 3735 02bc 05AB     		add	r3, sp, #20
 3736 02be 5818     		adds	r0, r3, r1
1568:src/display.c **** 	      *res++ = buf[i];
 3737              		.loc 1 1568 24 view .LVU1172
 3738 02c0 A4F10D06 		sub	r6, r4, #13
 3739 02c4 6A1E     		subs	r2, r5, #1
 3740              	.LVL419:
 3741              	.L317:
1569:src/display.c **** 	    *res++ = '.';
 3742              		.loc 1 1569 8 is_stmt 1 view .LVU1173
1569:src/display.c **** 	    *res++ = '.';
 3743              		.loc 1 1569 20 is_stmt 0 view .LVU1174
 3744 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3745              	.LVL420:
1569:src/display.c **** 	    *res++ = '.';
 3746              		.loc 1 1569 15 view .LVU1175
 3747 02ca 02F8013F 		strb	r3, [r2, #1]!
 3748              	.LVL421:
1568:src/display.c **** 	      *res++ = buf[i];
 3749              		.loc 1 1568 12 is_stmt 1 view .LVU1176
1568:src/display.c **** 	      *res++ = buf[i];
 3750              		.loc 1 1568 12 is_stmt 0 view .LVU1177
 3751 02ce D343     		mvns	r3, r2
 3752 02d0 0B44     		add	r3, r3, r1
 3753 02d2 2B44     		add	r3, r3, r5
 3754 02d4 9E42     		cmp	r6, r3
 3755 02d6 F6DD     		ble	.L317
 3756 02d8 01F10E03 		add	r3, r1, #14
 3757 02dc 1C1B     		subs	r4, r3, r4
 3758              	.LVL422:
1568:src/display.c **** 	      *res++ = buf[i];
 3759              		.loc 1 1568 12 view .LVU1178
ARM GAS  /tmp/ccCvaEE3.s 			page 148


 3760 02de 8E42     		cmp	r6, r1
 3761 02e0 C8BF     		it	gt
 3762 02e2 0124     		movgt	r4, #1
 3763 02e4 2A19     		adds	r2, r5, r4
 3764              	.LVL423:
1570:src/display.c **** 	    *res++ = '.';
 3765              		.loc 1 1570 6 is_stmt 1 view .LVU1179
1570:src/display.c **** 	    *res++ = '.';
 3766              		.loc 1 1570 13 is_stmt 0 view .LVU1180
 3767 02e6 2E23     		movs	r3, #46
 3768 02e8 2B55     		strb	r3, [r5, r4]
1571:src/display.c **** 	  }
 3769              		.loc 1 1571 6 is_stmt 1 view .LVU1181
 3770              	.LVL424:
1571:src/display.c **** 	  }
 3771              		.loc 1 1571 13 is_stmt 0 view .LVU1182
 3772 02ea 5370     		strb	r3, [r2, #1]
1622:src/display.c **** 
 3773              		.loc 1 1622 7 view .LVU1183
 3774 02ec 17B0     		add	sp, sp, #92
 3775              		.cfi_remember_state
 3776              		.cfi_def_cfa_offset 36
 3777              		@ sp needed
 3778 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3779              	.LVL425:
 3780              	.L376:
 3781              		.cfi_restore_state
 3782              	.LBB321:
1530:src/display.c **** 	      vs |= ~mask;
 3783              		.loc 1 1530 38 discriminator 1 view .LVU1184
 3784 02f2 0BF1FF31 		add	r1, fp, #-1
1530:src/display.c **** 	      vs |= ~mask;
 3785              		.loc 1 1530 18 discriminator 1 view .LVU1185
 3786 02f6 CBF1210C 		rsb	ip, fp, #33
 3787 02fa C840     		lsrs	r0, r0, r1
 3788 02fc 07FA0CFC 		lsl	ip, r7, ip
 3789 0300 2039     		subs	r1, r1, #32
 3790 0302 40EA0C00 		orr	r0, r0, ip
 3791 0306 5CBF     		itt	pl
 3792 0308 47FA01F1 		asrpl	r1, r7, r1
 3793 030c 0843     		orrpl	r0, r0, r1
 3794 030e 00F00108 		and	r8, r0, #1
 3795 0312 4FF00009 		mov	r9, #0
 3796 0316 58EA0901 		orrs	r1, r8, r9
 3797 031a 08D0     		beq	.L306
1531:src/display.c **** 	  }
 3798              		.loc 1 1531 8 is_stmt 1 view .LVU1186
1531:src/display.c **** 	  }
 3799              		.loc 1 1531 11 is_stmt 0 view .LVU1187
 3800 031c 5042     		rsbs	r0, r2, #0
 3801 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3802 0322 40EA0602 		orr	r2, r0, r6
 3803              	.LVL426:
1531:src/display.c **** 	  }
 3804              		.loc 1 1531 11 view .LVU1188
 3805 0326 41EA0703 		orr	r3, r1, r7
 3806              	.LVL427:
ARM GAS  /tmp/ccCvaEE3.s 			page 149


1531:src/display.c **** 	  }
 3807              		.loc 1 1531 11 view .LVU1189
 3808 032a 1646     		mov	r6, r2
 3809              	.LVL428:
1531:src/display.c **** 	  }
 3810              		.loc 1 1531 11 view .LVU1190
 3811 032c 1F46     		mov	r7, r3
 3812              	.L306:
1531:src/display.c **** 	  }
 3813              		.loc 1 1531 11 view .LVU1191
 3814              	.LBE321:
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3815              		.loc 1 1534 4 is_stmt 1 view .LVU1192
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3816              		.loc 1 1534 8 is_stmt 0 view .LVU1193
 3817 032e 084B     		ldr	r3, .L383+8
 3818 0330 1B68     		ldr	r3, [r3]
 3819 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3820              		.loc 1 1534 7 view .LVU1194
 3821 0336 9B07     		lsls	r3, r3, #30
 3822 0338 7FF5E6AE 		bpl	.L336
 3823 033c 0223     		movs	r3, #2
 3824 033e ADE6     		b	.L311
 3825              	.LVL429:
 3826              	.L378:
 3827              	.LBB322:
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3828              		.loc 1 1593 33 view .LVU1195
 3829 0340 0826     		movs	r6, #8
1595:src/display.c **** 	  set_separator_decimal_modes();
 3830              		.loc 1 1595 6 view .LVU1196
 3831 0342 4FF0040A 		mov	r10, #4
 3832 0346 17E7     		b	.L320
 3833              	.L384:
 3834              		.align	2
 3835              	.L383:
 3836 0348 00000000 		.word	StateWhileOn
 3837 034c 00000000 		.word	CSWTCH.371
 3838 0350 00000000 		.word	main_ram
 3839 0354 00000000 		.word	IntMaxWindow
 3840 0358 00000000 		.word	.LANCHOR0
 3841 035c 00000000 		.word	.LANCHOR12
 3842              	.LVL430:
 3843              	.L382:
1595:src/display.c **** 	  set_separator_decimal_modes();
 3844              		.loc 1 1595 6 view .LVU1197
 3845              	.LBE322:
1513:src/display.c **** 	  if (v == 0) {
 3846              		.loc 1 1513 6 is_stmt 1 view .LVU1198
1513:src/display.c **** 	  if (v == 0) {
 3847              		.loc 1 1513 8 is_stmt 0 view .LVU1199
 3848 0360 B046     		mov	r8, r6
 3849              	.LVL431:
1513:src/display.c **** 	  if (v == 0) {
 3850              		.loc 1 1513 8 view .LVU1200
 3851 0362 B946     		mov	r9, r7
ARM GAS  /tmp/ccCvaEE3.s 			page 150


 3852              	.LVL432:
1514:src/display.c **** 	    if (sign)
 3853              		.loc 1 1514 4 is_stmt 1 view .LVU1201
1514:src/display.c **** 	    if (sign)
 3854              		.loc 1 1514 7 is_stmt 0 view .LVU1202
 3855 0364 58EA0903 		orrs	r3, r8, r9
 3856 0368 7FF46FAF 		bne	.L297
 3857              	.LVL433:
 3858              	.L298:
1516:src/display.c **** 	    set_dig_s(dig, '0', res);
 3859              		.loc 1 1516 8 is_stmt 1 view .LVU1203
 3860              	.LBB323:
 3861              	.LBI323:
 415:src/display.c ****   if (res) *res++ = ch;
 3862              		.loc 1 415 14 view .LVU1204
 3863              	.LBB324:
 416:src/display.c ****   else	set_dig(base, ch);
 3864              		.loc 1 416 3 view .LVU1205
 416:src/display.c ****   else	set_dig(base, ch);
 3865              		.loc 1 416 6 is_stmt 0 view .LVU1206
 3866 036c 002D     		cmp	r5, #0
 3867 036e 95D1     		bne	.L300
 417:src/display.c ****   return res;
 3868              		.loc 1 417 8 is_stmt 1 view .LVU1207
 3869 0370 2D21     		movs	r1, #45
 3870 0372 5A20     		movs	r0, #90
 3871 0374 FFF7FEFF 		bl	set_dig
 3872              	.LVL434:
 417:src/display.c ****   return res;
 3873              		.loc 1 417 8 is_stmt 0 view .LVU1208
 3874              	.LBE324:
 3875              	.LBE323:
1517:src/display.c **** 	    return;
 3876              		.loc 1 1517 6 is_stmt 1 view .LVU1209
 3877              	.LBB325:
 415:src/display.c ****   if (res) *res++ = ch;
 3878              		.loc 1 415 14 view .LVU1210
 3879              	.LBB320:
 416:src/display.c ****   else	set_dig(base, ch);
 3880              		.loc 1 416 3 view .LVU1211
 3881              	.L301:
 417:src/display.c ****   return res;
 3882              		.loc 1 417 8 view .LVU1212
 3883 0378 3021     		movs	r1, #48
 3884 037a 6320     		movs	r0, #99
 3885 037c FFF7FEFF 		bl	set_dig
 3886              	.LVL435:
 3887 0380 BFE6     		b	.L291
 3888              	.LVL436:
 3889              	.L322:
 417:src/display.c ****   return res;
 3890              		.loc 1 417 8 is_stmt 0 view .LVU1213
 3891              	.LBE320:
 3892              	.LBE325:
 3893              	.LBB326:
1600:src/display.c **** 	  buf[i] = '\0';
 3894              		.loc 1 1600 6 is_stmt 1 view .LVU1214
ARM GAS  /tmp/ccCvaEE3.s 			page 151


1600:src/display.c **** 	  buf[i] = '\0';
 3895              		.loc 1 1600 20 is_stmt 0 view .LVU1215
 3896 0382 0F4A     		ldr	r2, .L385
 3897 0384 6FF3C503 		bfc	r3, #3, #3
 3898 0388 1375     		strb	r3, [r2, #20]
 3899 038a 0027     		movs	r7, #0
 3900 038c 05E7     		b	.L323
 3901              	.LVL437:
 3902              	.L324:
1607:src/display.c **** 	    int ch = buf[j++];
 3903              		.loc 1 1607 14 is_stmt 1 discriminator 1 view .LVU1216
1607:src/display.c **** 	    int ch = buf[j++];
 3904              		.loc 1 1607 4 is_stmt 0 discriminator 1 view .LVU1217
 3905 038e 03F1FF38 		add	r8, r3, #-1
 3906              	.LVL438:
1607:src/display.c **** 	    int ch = buf[j++];
 3907              		.loc 1 1607 4 discriminator 1 view .LVU1218
 3908 0392 002B     		cmp	r3, #0
 3909 0394 7FF414AF 		bne	.L326
1616:src/display.c **** 	    if (dig >= 0)
 3910              		.loc 1 1616 4 is_stmt 1 view .LVU1219
1616:src/display.c **** 	    if (dig >= 0)
 3911              		.loc 1 1616 7 is_stmt 0 view .LVU1220
 3912 0398 049B     		ldr	r3, [sp, #16]
 3913 039a 002B     		cmp	r3, #0
 3914 039c 3FF4B1AE 		beq	.L291
 3915 03a0 4FF0630B 		mov	fp, #99
 3916 03a4 3BE7     		b	.L334
 3917              	.LVL439:
 3918              	.L379:
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3919              		.loc 1 1593 33 view .LVU1221
 3920 03a6 0C26     		movs	r6, #12
 3921 03a8 E6E6     		b	.L320
 3922              	.LVL440:
 3923              	.L381:
1619:src/display.c **** 	  }
 3924              		.loc 1 1619 11 is_stmt 1 view .LVU1222
 3925              	.LBB313:
 3926              	.LBI313:
 304:src/display.c **** {
 3927              		.loc 1 304 13 view .LVU1223
 3928              	.LBB314:
 306:src/display.c ****   set_dot(MANT_SIGN);
 3929              		.loc 1 306 3 view .LVU1224
 306:src/display.c ****   set_dot(MANT_SIGN);
 3930              		.loc 1 306 25 is_stmt 0 view .LVU1225
 3931 03aa 064B     		ldr	r3, .L385+4
 3932 03ac 2D22     		movs	r2, #45
 307:src/display.c **** }
 3933              		.loc 1 307 3 view .LVU1226
 3934 03ae 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 3935              		.loc 1 306 25 view .LVU1227
 3936 03b0 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 3937              		.loc 1 307 3 is_stmt 1 view .LVU1228
ARM GAS  /tmp/ccCvaEE3.s 			page 152


 3938 03b2 FFF7FEFF 		bl	set_dot
 3939              	.LVL441:
 308:src/display.c **** 
 3940              		.loc 1 308 1 is_stmt 0 view .LVU1229
 3941 03b6 A4E6     		b	.L291
 3942              	.LVL442:
 3943              	.L337:
 308:src/display.c **** 
 3944              		.loc 1 308 1 view .LVU1230
 3945              	.LBE314:
 3946              	.LBE313:
 3947              	.LBE326:
 3948              	.LBB327:
1551:src/display.c **** 	      const int r = v % b;
 3949              		.loc 1 1551 6 view .LVU1231
 3950 03b8 4FF0FF31 		mov	r1, #-1
 3951 03bc 8BE6     		b	.L304
 3952              	.L386:
 3953 03be 00BF     		.align	2
 3954              	.L385:
 3955 03c0 00000000 		.word	StateWhileOn
 3956 03c4 00000000 		.word	LastDisplayedNumber
 3957              	.LBE327:
 3958              		.cfi_endproc
 3959              	.LFE18:
 3961              		.section	.text.getdig,"ax",%progbits
 3962              		.align	1
 3963              		.p2align 2,,3
 3964              		.global	getdig
 3965              		.syntax unified
 3966              		.thumb
 3967              		.thumb_func
 3968              		.fpu fpv4-sp-d16
 3970              	getdig:
 3971              	.LVL443:
 3972              	.LFB6:
 342:src/display.c ****   // perform index lookup
 3973              		.loc 1 342 1 is_stmt 1 view -0
 3974              		.cfi_startproc
 3975              		@ args = 0, pretend = 0, frame = 0
 3976              		@ frame_needed = 0, uses_anonymous_args = 0
 3977              		@ link register save eliminated.
 344:src/display.c **** }
 3978              		.loc 1 344 3 view .LVU1233
 344:src/display.c **** }
 3979              		.loc 1 344 16 is_stmt 0 view .LVU1234
 3980 0000 014B     		ldr	r3, .L388
 344:src/display.c **** }
 3981              		.loc 1 344 19 view .LVU1235
 3982 0002 C0B2     		uxtb	r0, r0
 3983              	.LVL444:
 345:src/display.c **** 
 3984              		.loc 1 345 1 view .LVU1236
 3985 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 3986 0006 7047     		bx	lr
 3987              	.L389:
 3988              		.align	2
ARM GAS  /tmp/ccCvaEE3.s 			page 153


 3989              	.L388:
 3990 0008 00000000 		.word	.LANCHOR2
 3991              		.cfi_endproc
 3992              	.LFE6:
 3994              		.section	.text.dot,"ax",%progbits
 3995              		.align	1
 3996              		.p2align 2,,3
 3997              		.global	dot
 3998              		.syntax unified
 3999              		.thumb
 4000              		.thumb_func
 4001              		.fpu fpv4-sp-d16
 4003              	dot:
 4004              	.LVL445:
 4005              	.LFB7:
 347:src/display.c ****   if (on)	set_dot(n);
 4006              		.loc 1 347 25 is_stmt 1 view -0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
 4010              		@ link register save eliminated.
 348:src/display.c ****   else	clr_dot(n);
 4011              		.loc 1 348 3 view .LVU1238
 348:src/display.c ****   else	clr_dot(n);
 4012              		.loc 1 348 6 is_stmt 0 view .LVU1239
 4013 0000 09B1     		cbz	r1, .L391
 348:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 348 11 is_stmt 1 discriminator 1 view .LVU1240
 4015 0002 FFF7FEBF 		b	set_dot
 4016              	.LVL446:
 4017              	.L391:
 349:src/display.c **** }
 4018              		.loc 1 349 8 view .LVU1241
 4019 0006 FFF7FEBF 		b	clr_dot
 4020              	.LVL447:
 349:src/display.c **** }
 4021              		.loc 1 349 8 is_stmt 0 view .LVU1242
 4022              		.cfi_endproc
 4023              	.LFE7:
 4025 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4026              		.align	1
 4027              		.p2align 2,,3
 4028              		.global	std_round_fix
 4029              		.syntax unified
 4030              		.thumb
 4031              		.thumb_func
 4032              		.fpu fpv4-sp-d16
 4034              	std_round_fix:
 4035              	.LVL448:
 4036              	.LFB24:
1840:src/display.c **** 	decNumber c;
 4037              		.loc 1 1840 93 is_stmt 1 view -0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 40
 4040              		@ frame_needed = 0, uses_anonymous_args = 0
1840:src/display.c **** 	decNumber c;
 4041              		.loc 1 1840 93 is_stmt 0 view .LVU1244
ARM GAS  /tmp/ccCvaEE3.s 			page 154


 4042 0000 70B5     		push	{r4, r5, r6, lr}
 4043              		.cfi_def_cfa_offset 16
 4044              		.cfi_offset 4, -16
 4045              		.cfi_offset 5, -12
 4046              		.cfi_offset 6, -8
 4047              		.cfi_offset 14, -4
 4048 0002 0E46     		mov	r6, r1
1841:src/display.c **** 	int true_exp, x=0;
 4049              		.loc 1 1841 2 is_stmt 1 view .LVU1245
1842:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4050              		.loc 1 1842 2 view .LVU1246
 4051              	.LVL449:
1843:src/display.c **** 
 4052              		.loc 1 1843 2 view .LVU1247
1845:src/display.c **** 	  min_pos_exp = 9;
 4053              		.loc 1 1845 2 view .LVU1248
1840:src/display.c **** 	decNumber c;
 4054              		.loc 1 1840 93 is_stmt 0 view .LVU1249
 4055 0004 8AB0     		sub	sp, sp, #40
 4056              		.cfi_def_cfa_offset 56
1845:src/display.c **** 	  min_pos_exp = 9;
 4057              		.loc 1 1845 5 view .LVU1250
 4058 0006 92B9     		cbnz	r2, .L393
1850:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4059              		.loc 1 1850 4 is_stmt 1 view .LVU1251
 4060              	.LVL450:
1851:src/display.c **** 	}
 4061              		.loc 1 1851 4 view .LVU1252
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4062              		.loc 1 1854 2 view .LVU1253
 4063 0008 0146     		mov	r1, r0
 4064              	.LVL451:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4065              		.loc 1 1854 2 is_stmt 0 view .LVU1254
 4066 000a 01A8     		add	r0, sp, #4
 4067              	.LVL452:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4068              		.loc 1 1854 2 view .LVU1255
 4069 000c 1D46     		mov	r5, r3
 4070 000e FFF7FEFF 		bl	dn_abs
 4071              	.LVL453:
1855:src/display.c **** 
 4072              		.loc 1 1855 2 is_stmt 1 view .LVU1256
1855:src/display.c **** 
 4073              		.loc 1 1855 24 is_stmt 0 view .LVU1257
 4074 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4075 0016 1844     		add	r0, r0, r3
 4076              	.LVL454:
1857:src/display.c **** 	  x = *dd;
 4077              		.loc 1 1857 2 is_stmt 1 view .LVU1258
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4078              		.loc 1 1861 2 view .LVU1259
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4079              		.loc 1 1861 5 is_stmt 0 view .LVU1260
 4080 0018 0138     		subs	r0, r0, #1
 4081 001a 1AD5     		bpl	.L397
1851:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 155


 4082              		.loc 1 1851 16 view .LVU1261
 4083 001c EB43     		mvns	r3, r5
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4084              		.loc 1 1861 21 view .LVU1262
 4085 001e 8342     		cmp	r3, r0
 4086 0020 17DA     		bge	.L397
 4087              	.LVL455:
 4088              	.L399:
1863:src/display.c **** 	  return MODE_FIX;
 4089              		.loc 1 1863 4 is_stmt 1 view .LVU1263
1863:src/display.c **** 	  return MODE_FIX;
 4090              		.loc 1 1863 8 is_stmt 0 view .LVU1264
 4091 0022 3368     		ldr	r3, [r6]
 4092 0024 181A     		subs	r0, r3, r0
 4093 0026 3060     		str	r0, [r6]
1864:src/display.c **** 	}
 4094              		.loc 1 1864 4 is_stmt 1 view .LVU1265
1864:src/display.c **** 	}
 4095              		.loc 1 1864 11 is_stmt 0 view .LVU1266
 4096 0028 0120     		movs	r0, #1
1873:src/display.c **** #else
 4097              		.loc 1 1873 7 view .LVU1267
 4098 002a 0AB0     		add	sp, sp, #40
 4099              		.cfi_remember_state
 4100              		.cfi_def_cfa_offset 16
 4101              		@ sp needed
 4102 002c 70BD     		pop	{r4, r5, r6, pc}
 4103              	.LVL456:
 4104              	.L393:
 4105              		.cfi_restore_state
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4106              		.loc 1 1854 2 is_stmt 1 view .LVU1268
 4107 002e 0146     		mov	r1, r0
 4108              	.LVL457:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4109              		.loc 1 1854 2 is_stmt 0 view .LVU1269
 4110 0030 01A8     		add	r0, sp, #4
 4111              	.LVL458:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4112              		.loc 1 1854 2 view .LVU1270
 4113 0032 1446     		mov	r4, r2
 4114 0034 FFF7FEFF 		bl	dn_abs
 4115              	.LVL459:
1855:src/display.c **** 
 4116              		.loc 1 1855 2 is_stmt 1 view .LVU1271
1855:src/display.c **** 
 4117              		.loc 1 1855 24 is_stmt 0 view .LVU1272
 4118 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1857:src/display.c **** 	  x = *dd;
 4119              		.loc 1 1857 5 view .LVU1273
 4120 003c 052C     		cmp	r4, #5
1855:src/display.c **** 
 4121              		.loc 1 1855 24 view .LVU1274
 4122 003e 1344     		add	r3, r3, r2
1855:src/display.c **** 
 4123              		.loc 1 1855 11 view .LVU1275
 4124 0040 03F1FF30 		add	r0, r3, #-1
ARM GAS  /tmp/ccCvaEE3.s 			page 156


 4125              	.LVL460:
1857:src/display.c **** 	  x = *dd;
 4126              		.loc 1 1857 2 is_stmt 1 view .LVU1276
1857:src/display.c **** 	  x = *dd;
 4127              		.loc 1 1857 5 is_stmt 0 view .LVU1277
 4128 0044 15D1     		bne	.L401
1858:src/display.c **** 	}
 4129              		.loc 1 1858 4 is_stmt 1 view .LVU1278
1858:src/display.c **** 	}
 4130              		.loc 1 1858 6 is_stmt 0 view .LVU1279
 4131 0046 3268     		ldr	r2, [r6]
 4132              	.LVL461:
 4133              	.L396:
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4134              		.loc 1 1861 2 is_stmt 1 view .LVU1280
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4135              		.loc 1 1861 5 is_stmt 0 view .LVU1281
 4136 0048 8242     		cmp	r2, r0
 4137 004a 05DC     		bgt	.L405
1867:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4138              		.loc 1 1867 53 discriminator 2 view .LVU1282
 4139 004c 0333     		adds	r3, r3, #3
 4140 004e 0C2B     		cmp	r3, #12
 4141 0050 04D8     		bhi	.L400
 4142              	.LVL462:
 4143              	.L397:
1871:src/display.c **** 	}
 4144              		.loc 1 1871 11 view .LVU1283
 4145 0052 0020     		movs	r0, #0
1873:src/display.c **** #else
 4146              		.loc 1 1873 7 view .LVU1284
 4147 0054 0AB0     		add	sp, sp, #40
 4148              		.cfi_remember_state
 4149              		.cfi_def_cfa_offset 16
 4150              		@ sp needed
 4151 0056 70BD     		pop	{r4, r5, r6, pc}
 4152              	.LVL463:
 4153              	.L405:
 4154              		.cfi_restore_state
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4155              		.loc 1 1861 21 view .LVU1285
 4156 0058 031D     		adds	r3, r0, #4
 4157 005a E2DA     		bge	.L399
 4158              	.L400:
 4159              	.LBB330:
 4160              	.LBI330:
1840:src/display.c **** 	decNumber c;
 4161              		.loc 1 1840 26 is_stmt 1 view .LVU1286
 4162              	.LVL464:
 4163              	.LBB331:
1868:src/display.c **** 	}
 4164              		.loc 1 1868 4 view .LVU1287
1868:src/display.c **** 	}
 4165              		.loc 1 1868 24 is_stmt 0 view .LVU1288
 4166 005c 064B     		ldr	r3, .L406
 4167 005e 1B68     		ldr	r3, [r3]
 4168 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
ARM GAS  /tmp/ccCvaEE3.s 			page 157


1868:src/display.c **** 	}
 4169              		.loc 1 1868 33 view .LVU1289
 4170 0064 13F0100F 		tst	r3, #16
 4171 0068 14BF     		ite	ne
 4172 006a 0320     		movne	r0, #3
 4173 006c 0220     		moveq	r0, #2
 4174              	.LBE331:
 4175              	.LBE330:
1873:src/display.c **** #else
 4176              		.loc 1 1873 7 view .LVU1290
 4177 006e 0AB0     		add	sp, sp, #40
 4178              		.cfi_remember_state
 4179              		.cfi_def_cfa_offset 16
 4180              		@ sp needed
 4181 0070 70BD     		pop	{r4, r5, r6, pc}
 4182              	.LVL465:
 4183              	.L401:
 4184              		.cfi_restore_state
1842:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4185              		.loc 1 1842 16 view .LVU1291
 4186 0072 0022     		movs	r2, #0
 4187 0074 E8E7     		b	.L396
 4188              	.L407:
 4189 0076 00BF     		.align	2
 4190              	.L406:
 4191 0078 00000000 		.word	main_ram
 4192              		.cfi_endproc
 4193              	.LFE24:
 4195              		.section	.text.set_IO_annunciator,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	set_IO_annunciator
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	set_IO_annunciator:
 4205              	.LFB33:
2653:src/display.c **** #ifndef DM42
 4206              		.loc 1 2653 37 is_stmt 1 view -0
 4207              		.cfi_startproc
 4208              		@ args = 0, pretend = 0, frame = 0
 4209              		@ frame_needed = 0, uses_anonymous_args = 0
2658:src/display.c **** #endif
 4210              		.loc 1 2658 4 view .LVU1293
2653:src/display.c **** #ifndef DM42
 4211              		.loc 1 2653 37 is_stmt 0 view .LVU1294
 4212 0000 38B5     		push	{r3, r4, r5, lr}
 4213              		.cfi_def_cfa_offset 16
 4214              		.cfi_offset 3, -16
 4215              		.cfi_offset 4, -12
 4216              		.cfi_offset 5, -8
 4217              		.cfi_offset 14, -4
2664:src/display.c **** #endif
 4218              		.loc 1 2664 4 view .LVU1295
 4219 0002 0D4B     		ldr	r3, .L414
2668:src/display.c **** 	  dot(LIT_EQ, on);
ARM GAS  /tmp/ccCvaEE3.s 			page 158


 4220              		.loc 1 2668 9 view .LVU1296
 4221 0004 0D4C     		ldr	r4, .L414+4
2664:src/display.c **** #endif
 4222              		.loc 1 2664 4 view .LVU1297
 4223 0006 1B68     		ldr	r3, [r3]
2668:src/display.c **** 	  dot(LIT_EQ, on);
 4224              		.loc 1 2668 5 view .LVU1298
 4225 0008 2268     		ldr	r2, [r4]
2664:src/display.c **** #endif
 4226              		.loc 1 2664 4 view .LVU1299
 4227 000a 1D1E     		subs	r5, r3, #0
 4228 000c 18BF     		it	ne
 4229 000e 0125     		movne	r5, #1
 4230              	.LVL466:
2668:src/display.c **** 	  dot(LIT_EQ, on);
 4231              		.loc 1 2668 2 is_stmt 1 view .LVU1300
2668:src/display.c **** 	  dot(LIT_EQ, on);
 4232              		.loc 1 2668 5 is_stmt 0 view .LVU1301
 4233 0010 AA42     		cmp	r2, r5
 4234 0012 0FD0     		beq	.L408
2669:src/display.c **** 	  IoAnnunciator = on;
 4235              		.loc 1 2669 4 is_stmt 1 view .LVU1302
 4236              	.LVL467:
 4237              	.LBB332:
 4238              	.LBI332:
 347:src/display.c ****   if (on)	set_dot(n);
 4239              		.loc 1 347 6 view .LVU1303
 4240              	.LBB333:
 348:src/display.c ****   else	clr_dot(n);
 4241              		.loc 1 348 3 view .LVU1304
 348:src/display.c ****   else	clr_dot(n);
 4242              		.loc 1 348 11 is_stmt 0 view .LVU1305
 4243 0014 8420     		movs	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4244              		.loc 1 348 6 view .LVU1306
 4245 0016 33B9     		cbnz	r3, .L413
 349:src/display.c **** }
 4246              		.loc 1 349 8 is_stmt 1 view .LVU1307
 4247 0018 FFF7FEFF 		bl	clr_dot
 4248              	.LVL468:
 349:src/display.c **** }
 4249              		.loc 1 349 8 is_stmt 0 view .LVU1308
 4250              	.LBE333:
 4251              	.LBE332:
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4252              		.loc 1 2670 4 is_stmt 1 view .LVU1309
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4253              		.loc 1 2670 18 is_stmt 0 view .LVU1310
 4254 001c 2560     		str	r5, [r4]
2671:src/display.c **** 	}
 4255              		.loc 1 2671 4 is_stmt 1 view .LVU1311
2673:src/display.c **** 
 4256              		.loc 1 2673 7 is_stmt 0 view .LVU1312
 4257 001e BDE83840 		pop	{r3, r4, r5, lr}
 4258              		.cfi_remember_state
 4259              		.cfi_restore 14
 4260              		.cfi_restore 5
ARM GAS  /tmp/ccCvaEE3.s 			page 159


 4261              		.cfi_restore 4
 4262              		.cfi_restore 3
 4263              		.cfi_def_cfa_offset 0
 4264              	.LVL469:
2671:src/display.c **** 	}
 4265              		.loc 1 2671 4 view .LVU1313
 4266 0022 FFF7FEBF 		b	finish_display
 4267              	.LVL470:
 4268              	.L413:
 4269              		.cfi_restore_state
 4270              	.LBB335:
 4271              	.LBB334:
 348:src/display.c ****   else	clr_dot(n);
 4272              		.loc 1 348 11 is_stmt 1 view .LVU1314
 4273 0026 FFF7FEFF 		bl	set_dot
 4274              	.LVL471:
 348:src/display.c ****   else	clr_dot(n);
 4275              		.loc 1 348 11 is_stmt 0 view .LVU1315
 4276              	.LBE334:
 4277              	.LBE335:
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4278              		.loc 1 2670 4 is_stmt 1 view .LVU1316
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4279              		.loc 1 2670 18 is_stmt 0 view .LVU1317
 4280 002a 2560     		str	r5, [r4]
2671:src/display.c **** 	}
 4281              		.loc 1 2671 4 is_stmt 1 view .LVU1318
2673:src/display.c **** 
 4282              		.loc 1 2673 7 is_stmt 0 view .LVU1319
 4283 002c BDE83840 		pop	{r3, r4, r5, lr}
 4284              		.cfi_remember_state
 4285              		.cfi_restore 14
 4286              		.cfi_restore 5
 4287              		.cfi_restore 4
 4288              		.cfi_restore 3
 4289              		.cfi_def_cfa_offset 0
 4290              	.LVL472:
2671:src/display.c **** 	}
 4291              		.loc 1 2671 4 view .LVU1320
 4292 0030 FFF7FEBF 		b	finish_display
 4293              	.LVL473:
 4294              	.L408:
 4295              		.cfi_restore_state
2673:src/display.c **** 
 4296              		.loc 1 2673 7 view .LVU1321
 4297 0034 38BD     		pop	{r3, r4, r5, pc}
 4298              	.LVL474:
 4299              	.L415:
2673:src/display.c **** 
 4300              		.loc 1 2673 7 view .LVU1322
 4301 0036 00BF     		.align	2
 4302              	.L414:
 4303 0038 00000000 		.word	PrinterColumn
 4304 003c 00000000 		.word	IoAnnunciator
 4305              		.cfi_endproc
 4306              	.LFE33:
 4308              		.section	.text.set_annunciators,"ax",%progbits
ARM GAS  /tmp/ccCvaEE3.s 			page 160


 4309              		.align	1
 4310              		.p2align 2,,3
 4311              		.syntax unified
 4312              		.thumb
 4313              		.thumb_func
 4314              		.fpu fpv4-sp-d16
 4316              	set_annunciators:
 4317              	.LFB32:
2622:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4318              		.loc 1 2622 7 is_stmt 1 view -0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 0
 4321              		@ frame_needed = 0, uses_anonymous_args = 0
2623:src/display.c **** 
 4322              		.loc 1 2623 2 view .LVU1324
2622:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4323              		.loc 1 2622 7 is_stmt 0 view .LVU1325
 4324 0000 70B5     		push	{r4, r5, r6, lr}
 4325              		.cfi_def_cfa_offset 16
 4326              		.cfi_offset 4, -16
 4327              		.cfi_offset 5, -12
 4328              		.cfi_offset 6, -8
 4329              		.cfi_offset 14, -4
2630:src/display.c **** #else
 4330              		.loc 1 2630 11 view .LVU1326
 4331 0002 354C     		ldr	r4, .L442
2623:src/display.c **** 
 4332              		.loc 1 2623 29 view .LVU1327
 4333 0004 FFF7FEFF 		bl	get_trig_mode
 4334              	.LVL475:
2630:src/display.c **** #else
 4335              		.loc 1 2630 11 view .LVU1328
 4336 0008 2368     		ldr	r3, [r4]
 4337 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2630:src/display.c **** #else
 4338              		.loc 1 2630 2 view .LVU1329
 4339 000e 1907     		lsls	r1, r3, #28
2623:src/display.c **** 
 4340              		.loc 1 2623 29 view .LVU1330
 4341 0010 0546     		mov	r5, r0
 4342              	.LVL476:
2630:src/display.c **** #else
 4343              		.loc 1 2630 2 is_stmt 1 view .LVU1331
 4344              	.LBB336:
 4345              	.LBB337:
 348:src/display.c ****   else	clr_dot(n);
 4346              		.loc 1 348 11 is_stmt 0 view .LVU1332
 4347 0012 4FF08800 		mov	r0, #136
 4348              	.LBE337:
 4349              	.LBE336:
2630:src/display.c **** #else
 4350              		.loc 1 2630 2 view .LVU1333
 4351 0016 03D5     		bpl	.L417
2630:src/display.c **** #else
 4352              		.loc 1 2630 33 discriminator 1 view .LVU1334
 4353 0018 304B     		ldr	r3, .L442+4
2630:src/display.c **** #else
ARM GAS  /tmp/ccCvaEE3.s 			page 161


 4354              		.loc 1 2630 2 discriminator 1 view .LVU1335
 4355 001a 1B68     		ldr	r3, [r3]
 4356 001c 002B     		cmp	r3, #0
 4357 001e 58D0     		beq	.L439
 4358              	.L417:
 4359              	.LVL477:
 4360              	.LBB340:
 4361              	.LBI336:
 347:src/display.c ****   if (on)	set_dot(n);
 4362              		.loc 1 347 6 is_stmt 1 view .LVU1336
 4363              	.LBB338:
 348:src/display.c ****   else	clr_dot(n);
 4364              		.loc 1 348 3 view .LVU1337
 349:src/display.c **** }
 4365              		.loc 1 349 8 view .LVU1338
 4366 0020 FFF7FEFF 		bl	clr_dot
 4367              	.LVL478:
 4368              	.L418:
 349:src/display.c **** }
 4369              		.loc 1 349 8 is_stmt 0 view .LVU1339
 4370              	.LBE338:
 4371              	.LBE340:
2635:src/display.c **** #endif
 4372              		.loc 1 2635 2 is_stmt 1 view .LVU1340
 4373              	.LBB341:
 4374              	.LBI341:
 347:src/display.c ****   if (on)	set_dot(n);
 4375              		.loc 1 347 6 view .LVU1341
 4376              	.LBB342:
 348:src/display.c ****   else	clr_dot(n);
 4377              		.loc 1 348 3 view .LVU1342
 4378              	.LBE342:
 4379              	.LBE341:
2635:src/display.c **** #endif
 4380              		.loc 1 2635 14 is_stmt 0 view .LVU1343
 4381 0024 2368     		ldr	r3, [r4]
 4382 0026 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 4383              	.LBB345:
 4384              	.LBB343:
 348:src/display.c ****   else	clr_dot(n);
 4385              		.loc 1 348 6 view .LVU1344
 4386 002a 03F04103 		and	r3, r3, #65
 4387 002e 412B     		cmp	r3, #65
 348:src/display.c ****   else	clr_dot(n);
 4388              		.loc 1 348 11 view .LVU1345
 4389 0030 4FF08400 		mov	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4390              		.loc 1 348 6 view .LVU1346
 4391 0034 44D1     		bne	.L419
 348:src/display.c ****   else	clr_dot(n);
 4392              		.loc 1 348 11 is_stmt 1 view .LVU1347
 4393 0036 FFF7FEFF 		bl	set_dot
 4394              	.LVL479:
 4395              	.L420:
 348:src/display.c ****   else	clr_dot(n);
 4396              		.loc 1 348 11 is_stmt 0 view .LVU1348
 4397              	.LBE343:
ARM GAS  /tmp/ccCvaEE3.s 			page 162


 4398              	.LBE345:
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4399              		.loc 1 2638 2 is_stmt 1 view .LVU1349
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4400              		.loc 1 2638 19 is_stmt 0 view .LVU1350
 4401 003a 294E     		ldr	r6, .L442+8
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4402              		.loc 1 2638 2 view .LVU1351
 4403 003c B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4404              	.LBB346:
 4405              	.LBB347:
 348:src/display.c ****   else	clr_dot(n);
 4406              		.loc 1 348 11 view .LVU1352
 4407 003e 8620     		movs	r0, #134
 4408              	.LBE347:
 4409              	.LBE346:
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4410              		.loc 1 2638 2 view .LVU1353
 4411 0040 23B9     		cbnz	r3, .L421
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4412              		.loc 1 2638 47 discriminator 2 view .LVU1354
 4413 0042 7269     		ldr	r2, [r6, #20]
 4414 0044 274B     		ldr	r3, .L442+12
 4415 0046 1340     		ands	r3, r3, r2
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4416              		.loc 1 2638 2 discriminator 2 view .LVU1355
 4417 0048 002B     		cmp	r3, #0
 4418 004a 3FD0     		beq	.L440
 4419              	.L421:
 4420              	.LBB350:
 4421              	.LBB348:
 348:src/display.c ****   else	clr_dot(n);
 4422              		.loc 1 348 11 is_stmt 1 view .LVU1356
 4423 004c FFF7FEFF 		bl	set_dot
 4424              	.LVL480:
 4425              	.L422:
 4426              	.LBE348:
 4427              	.LBE350:
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4428              		.loc 1 2639 2 view .LVU1357
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4429              		.loc 1 2639 31 is_stmt 0 view .LVU1358
 4430 0050 254A     		ldr	r2, .L442+16
 4431 0052 7369     		ldr	r3, [r6, #20]
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4432              		.loc 1 2639 2 view .LVU1359
 4433 0054 1A42     		tst	r2, r3
 4434              	.LBB351:
 4435              	.LBB352:
 348:src/display.c ****   else	clr_dot(n);
 4436              		.loc 1 348 11 view .LVU1360
 4437 0056 4FF08500 		mov	r0, #133
 4438              	.LBE352:
 4439              	.LBE351:
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4440              		.loc 1 2639 2 view .LVU1361
 4441 005a 02D0     		beq	.L423
ARM GAS  /tmp/ccCvaEE3.s 			page 163


2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4442              		.loc 1 2639 48 discriminator 1 view .LVU1362
 4443 005c B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4444              		.loc 1 2639 2 discriminator 1 view .LVU1363
 4445 005e DA06     		lsls	r2, r3, #27
 4446 0060 31D4     		bmi	.L424
 4447              	.L423:
 4448              	.LVL481:
 4449              	.LBB355:
 4450              	.LBI351:
 347:src/display.c ****   if (on)	set_dot(n);
 4451              		.loc 1 347 6 is_stmt 1 view .LVU1364
 4452              	.LBB353:
 348:src/display.c ****   else	clr_dot(n);
 4453              		.loc 1 348 3 view .LVU1365
 349:src/display.c **** }
 4454              		.loc 1 349 8 view .LVU1366
 4455 0062 FFF7FEFF 		bl	clr_dot
 4456              	.LVL482:
 4457              	.L425:
 349:src/display.c **** }
 4458              		.loc 1 349 8 is_stmt 0 view .LVU1367
 4459              	.LBE353:
 4460              	.LBE355:
2640:src/display.c **** 	set_IO_annunciator();
 4461              		.loc 1 2640 2 is_stmt 1 view .LVU1368
 4462 0066 6820     		movs	r0, #104
 4463 0068 FFF7FEFF 		bl	get_user_flag
 4464              	.LVL483:
 4465              	.LBB356:
 4466              	.LBI356:
 347:src/display.c ****   if (on)	set_dot(n);
 4467              		.loc 1 347 6 view .LVU1369
 4468              	.LBB357:
 348:src/display.c ****   else	clr_dot(n);
 4469              		.loc 1 348 3 view .LVU1370
 348:src/display.c ****   else	clr_dot(n);
 4470              		.loc 1 348 6 is_stmt 0 view .LVU1371
 4471 006c 20B3     		cbz	r0, .L426
 348:src/display.c ****   else	clr_dot(n);
 4472              		.loc 1 348 11 is_stmt 1 view .LVU1372
 4473 006e 8320     		movs	r0, #131
 4474              	.LVL484:
 348:src/display.c ****   else	clr_dot(n);
 4475              		.loc 1 348 11 is_stmt 0 view .LVU1373
 4476 0070 FFF7FEFF 		bl	set_dot
 4477              	.LVL485:
 4478              	.L427:
 348:src/display.c ****   else	clr_dot(n);
 4479              		.loc 1 348 11 view .LVU1374
 4480              	.LBE357:
 4481              	.LBE356:
2641:src/display.c **** 
 4482              		.loc 1 2641 2 is_stmt 1 view .LVU1375
 4483 0074 FFF7FEFF 		bl	set_IO_annunciator
 4484              	.LVL486:
ARM GAS  /tmp/ccCvaEE3.s 			page 164


2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4485              		.loc 1 2645 2 view .LVU1376
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4486              		.loc 1 2645 11 is_stmt 0 view .LVU1377
 4487 0078 2368     		ldr	r3, [r4]
 4488 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4489 007e 03F00103 		and	r3, r3, #1
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4490              		.loc 1 2645 2 view .LVU1378
 4491 0082 2B43     		orrs	r3, r3, r5
 4492 0084 13F0FF0F 		tst	r3, #255
 4493              	.LBB359:
 4494              	.LBB360:
 348:src/display.c ****   else	clr_dot(n);
 4495              		.loc 1 348 11 view .LVU1379
 4496 0088 4FF08C00 		mov	r0, #140
 4497              	.LBE360:
 4498              	.LBE359:
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4499              		.loc 1 2645 2 view .LVU1380
 4500 008c 06D1     		bne	.L441
 4501              	.LVL487:
 4502              	.LBB363:
 4503              	.LBI359:
 347:src/display.c ****   if (on)	set_dot(n);
 4504              		.loc 1 347 6 is_stmt 1 view .LVU1381
 4505              	.LBB361:
 348:src/display.c ****   else	clr_dot(n);
 4506              		.loc 1 348 3 view .LVU1382
 348:src/display.c ****   else	clr_dot(n);
 4507              		.loc 1 348 11 view .LVU1383
 4508 008e FFF7FEFF 		bl	set_dot
 4509              	.LVL488:
 348:src/display.c ****   else	clr_dot(n);
 4510              		.loc 1 348 11 is_stmt 0 view .LVU1384
 4511              	.LBE361:
 4512              	.LBE363:
2646:src/display.c ****       }
 4513              		.loc 1 2646 2 is_stmt 1 view .LVU1385
 4514              	.L430:
 4515              	.LBB364:
 4516              	.LBI364:
 347:src/display.c ****   if (on)	set_dot(n);
 4517              		.loc 1 347 6 view .LVU1386
 4518              	.LBB365:
 348:src/display.c ****   else	clr_dot(n);
 4519              		.loc 1 348 3 view .LVU1387
 349:src/display.c **** }
 4520              		.loc 1 349 8 view .LVU1388
 4521              	.LBE365:
 4522              	.LBE364:
2647:src/display.c **** 
 4523              		.loc 1 2647 7 is_stmt 0 view .LVU1389
 4524 0092 BDE87040 		pop	{r4, r5, r6, lr}
 4525              		.cfi_remember_state
 4526              		.cfi_restore 14
 4527              		.cfi_restore 6
ARM GAS  /tmp/ccCvaEE3.s 			page 165


 4528              		.cfi_restore 5
 4529              		.cfi_restore 4
 4530              		.cfi_def_cfa_offset 0
 4531              	.LVL489:
 4532              	.LBB369:
 4533              	.LBB366:
 349:src/display.c **** }
 4534              		.loc 1 349 8 view .LVU1390
 4535 0096 8B20     		movs	r0, #139
 4536 0098 FFF7FEBF 		b	clr_dot
 4537              	.LVL490:
 4538              	.L441:
 4539              		.cfi_restore_state
 349:src/display.c **** }
 4540              		.loc 1 349 8 view .LVU1391
 4541              	.LBE366:
 4542              	.LBE369:
 4543              	.LBB370:
 347:src/display.c ****   if (on)	set_dot(n);
 4544              		.loc 1 347 6 is_stmt 1 view .LVU1392
 4545              	.LBB362:
 348:src/display.c ****   else	clr_dot(n);
 4546              		.loc 1 348 3 view .LVU1393
 349:src/display.c **** }
 4547              		.loc 1 349 8 view .LVU1394
 4548 009c FFF7FEFF 		bl	clr_dot
 4549              	.LVL491:
 349:src/display.c **** }
 4550              		.loc 1 349 8 is_stmt 0 view .LVU1395
 4551              	.LBE362:
 4552              	.LBE370:
2646:src/display.c ****       }
 4553              		.loc 1 2646 2 is_stmt 1 view .LVU1396
2646:src/display.c ****       }
 4554              		.loc 1 2646 11 is_stmt 0 view .LVU1397
 4555 00a0 2368     		ldr	r3, [r4]
 4556 00a2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2646:src/display.c ****       }
 4557              		.loc 1 2646 2 view .LVU1398
 4558 00a6 DB07     		lsls	r3, r3, #31
 4559 00a8 F3D4     		bmi	.L430
2646:src/display.c ****       }
 4560              		.loc 1 2646 2 discriminator 1 view .LVU1399
 4561 00aa 012D     		cmp	r5, #1
 4562 00ac F1D1     		bne	.L430
 4563              	.LVL492:
 4564              	.LBB371:
 347:src/display.c ****   if (on)	set_dot(n);
 4565              		.loc 1 347 6 is_stmt 1 view .LVU1400
 4566              	.LBB367:
 348:src/display.c ****   else	clr_dot(n);
 4567              		.loc 1 348 3 view .LVU1401
 348:src/display.c ****   else	clr_dot(n);
 4568              		.loc 1 348 11 view .LVU1402
 4569              	.LBE367:
 4570              	.LBE371:
2647:src/display.c **** 
ARM GAS  /tmp/ccCvaEE3.s 			page 166


 4571              		.loc 1 2647 7 is_stmt 0 view .LVU1403
 4572 00ae BDE87040 		pop	{r4, r5, r6, lr}
 4573              		.cfi_remember_state
 4574              		.cfi_restore 14
 4575              		.cfi_restore 6
 4576              		.cfi_restore 5
 4577              		.cfi_restore 4
 4578              		.cfi_def_cfa_offset 0
 4579              	.LVL493:
 4580              	.LBB372:
 4581              	.LBB368:
 348:src/display.c ****   else	clr_dot(n);
 4582              		.loc 1 348 11 view .LVU1404
 4583 00b2 8B20     		movs	r0, #139
 4584 00b4 FFF7FEBF 		b	set_dot
 4585              	.LVL494:
 4586              	.L426:
 4587              		.cfi_restore_state
 348:src/display.c ****   else	clr_dot(n);
 4588              		.loc 1 348 11 view .LVU1405
 4589              	.LBE368:
 4590              	.LBE372:
 4591              	.LBB373:
 4592              	.LBB358:
 349:src/display.c **** }
 4593              		.loc 1 349 8 is_stmt 1 view .LVU1406
 4594 00b8 8320     		movs	r0, #131
 4595              	.LVL495:
 349:src/display.c **** }
 4596              		.loc 1 349 8 is_stmt 0 view .LVU1407
 4597 00ba FFF7FEFF 		bl	clr_dot
 4598              	.LVL496:
 4599 00be D9E7     		b	.L427
 4600              	.LVL497:
 4601              	.L419:
 349:src/display.c **** }
 4602              		.loc 1 349 8 view .LVU1408
 4603              	.LBE358:
 4604              	.LBE373:
 4605              	.LBB374:
 4606              	.LBB344:
 349:src/display.c **** }
 4607              		.loc 1 349 8 is_stmt 1 view .LVU1409
 4608 00c0 FFF7FEFF 		bl	clr_dot
 4609              	.LVL498:
 349:src/display.c **** }
 4610              		.loc 1 349 8 is_stmt 0 view .LVU1410
 4611 00c4 B9E7     		b	.L420
 4612              	.LVL499:
 4613              	.L424:
 349:src/display.c **** }
 4614              		.loc 1 349 8 view .LVU1411
 4615              	.LBE344:
 4616              	.LBE374:
 4617              	.LBB375:
 347:src/display.c ****   if (on)	set_dot(n);
 4618              		.loc 1 347 6 is_stmt 1 view .LVU1412
ARM GAS  /tmp/ccCvaEE3.s 			page 167


 4619              	.LBB354:
 348:src/display.c ****   else	clr_dot(n);
 4620              		.loc 1 348 3 view .LVU1413
 348:src/display.c ****   else	clr_dot(n);
 4621              		.loc 1 348 11 view .LVU1414
 4622 00c6 FFF7FEFF 		bl	set_dot
 4623              	.LVL500:
 4624 00ca CCE7     		b	.L425
 4625              	.LVL501:
 4626              	.L440:
 348:src/display.c ****   else	clr_dot(n);
 4627              		.loc 1 348 11 is_stmt 0 view .LVU1415
 4628              	.LBE354:
 4629              	.LBE375:
 4630              	.LBB376:
 4631              	.LBI346:
 347:src/display.c ****   if (on)	set_dot(n);
 4632              		.loc 1 347 6 is_stmt 1 view .LVU1416
 4633              	.LBB349:
 348:src/display.c ****   else	clr_dot(n);
 4634              		.loc 1 348 3 view .LVU1417
 349:src/display.c **** }
 4635              		.loc 1 349 8 view .LVU1418
 4636 00cc FFF7FEFF 		bl	clr_dot
 4637              	.LVL502:
 4638 00d0 BEE7     		b	.L422
 4639              	.LVL503:
 4640              	.L439:
 349:src/display.c **** }
 4641              		.loc 1 349 8 is_stmt 0 view .LVU1419
 4642              	.LBE349:
 4643              	.LBE376:
 4644              	.LBB377:
 347:src/display.c ****   if (on)	set_dot(n);
 4645              		.loc 1 347 6 is_stmt 1 view .LVU1420
 4646              	.LBB339:
 348:src/display.c ****   else	clr_dot(n);
 4647              		.loc 1 348 3 view .LVU1421
 348:src/display.c ****   else	clr_dot(n);
 4648              		.loc 1 348 11 view .LVU1422
 4649 00d2 FFF7FEFF 		bl	set_dot
 4650              	.LVL504:
 4651 00d6 A5E7     		b	.L418
 4652              	.L443:
 4653              		.align	2
 4654              	.L442:
 4655 00d8 00000000 		.word	main_ram
 4656 00dc 00000000 		.word	Running
 4657 00e0 00000000 		.word	StateWhileOn
 4658 00e4 07000800 		.word	524295
 4659 00e8 00080800 		.word	526336
 4660              	.LBE339:
 4661              	.LBE377:
 4662              		.cfi_endproc
 4663              	.LFE32:
 4665              		.section	.text.pixel_length,"ax",%progbits
 4666              		.align	1
ARM GAS  /tmp/ccCvaEE3.s 			page 168


 4667              		.p2align 2,,3
 4668              		.global	pixel_length
 4669              		.syntax unified
 4670              		.thumb
 4671              		.thumb_func
 4672              		.fpu fpv4-sp-d16
 4674              	pixel_length:
 4675              	.LVL505:
 4676              	.LFB40:
3601:src/display.c **** 
3602:src/display.c **** 
3603:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3604:src/display.c ****        */
3605:src/display.c ****       int pixel_length(const char *s, int smallp)
3606:src/display.c ****       {
 4677              		.loc 1 3606 7 view -0
 4678              		.cfi_startproc
 4679              		@ args = 0, pretend = 0, frame = 0
 4680              		@ frame_needed = 0, uses_anonymous_args = 0
3607:src/display.c **** 	int len = 0;
 4681              		.loc 1 3607 2 view .LVU1424
3608:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4682              		.loc 1 3608 2 view .LVU1425
3606:src/display.c **** 	int len = 0;
 4683              		.loc 1 3606 7 is_stmt 0 view .LVU1426
 4684 0000 70B5     		push	{r4, r5, r6, lr}
 4685              		.cfi_def_cfa_offset 16
 4686              		.cfi_offset 4, -16
 4687              		.cfi_offset 5, -12
 4688              		.cfi_offset 6, -8
 4689              		.cfi_offset 14, -4
3606:src/display.c **** 	int len = 0;
 4690              		.loc 1 3606 7 view .LVU1427
 4691 0002 0446     		mov	r4, r0
3609:src/display.c **** 	while (*s != '\0') {
 4692              		.loc 1 3609 9 view .LVU1428
 4693 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4694              	.LVL506:
3608:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4695              		.loc 1 3608 34 view .LVU1429
 4696 0006 0E1E     		subs	r6, r1, #0
 4697 0008 18BF     		it	ne
 4698 000a 4FF48076 		movne	r6, #256
 4699              	.LVL507:
 4700              		.loc 1 3609 2 is_stmt 1 view .LVU1430
 4701              		.loc 1 3609 8 view .LVU1431
 4702 000e A0B1     		cbz	r0, .L451
3607:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4703              		.loc 1 3607 6 is_stmt 0 view .LVU1432
 4704 0010 0025     		movs	r5, #0
 4705 0012 06E0     		b	.L449
 4706              	.LVL508:
 4707              	.L447:
3610:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3611:src/display.c **** 	  if (s[0] == '\007') {
3612:src/display.c **** 	    len += s[1] & 0x1F;
3613:src/display.c **** 	    s += 3;
ARM GAS  /tmp/ccCvaEE3.s 			page 169


3614:src/display.c **** 	    continue;
3615:src/display.c **** 	  }
3616:src/display.c **** #endif
3617:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4708              		.loc 1 3617 11 view .LVU1433
 4709 0014 3044     		add	r0, r0, r6
 4710 0016 FFF7FEFF 		bl	charlengths
 4711              	.LVL509:
 4712              		.loc 1 3617 42 view .LVU1434
 4713 001a 0134     		adds	r4, r4, #1
 4714              	.LVL510:
 4715              		.loc 1 3617 8 view .LVU1435
 4716 001c 0544     		add	r5, r5, r0
 4717              	.LVL511:
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4718              		.loc 1 3609 8 is_stmt 1 view .LVU1436
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4719              		.loc 1 3609 9 is_stmt 0 view .LVU1437
 4720 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4721              		.loc 1 3609 8 view .LVU1438
 4722 0020 48B1     		cbz	r0, .L444
 4723              	.LVL512:
 4724              	.L449:
3611:src/display.c **** 	    len += s[1] & 0x1F;
 4725              		.loc 1 3611 4 is_stmt 1 view .LVU1439
 4726              		.loc 1 3617 4 view .LVU1440
3611:src/display.c **** 	    len += s[1] & 0x1F;
 4727              		.loc 1 3611 7 is_stmt 0 view .LVU1441
 4728 0022 0728     		cmp	r0, #7
 4729 0024 F6D1     		bne	.L447
3612:src/display.c **** 	    s += 3;
 4730              		.loc 1 3612 6 is_stmt 1 view .LVU1442
3612:src/display.c **** 	    s += 3;
 4731              		.loc 1 3612 18 is_stmt 0 view .LVU1443
 4732 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4733              		.loc 1 3609 9 view .LVU1444
 4734 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3612:src/display.c **** 	    s += 3;
 4735              		.loc 1 3612 18 view .LVU1445
 4736 002a 03F01F03 		and	r3, r3, #31
3613:src/display.c **** 	    continue;
 4737              		.loc 1 3613 8 view .LVU1446
 4738 002e 0334     		adds	r4, r4, #3
 4739              	.LVL513:
3612:src/display.c **** 	    s += 3;
 4740              		.loc 1 3612 10 view .LVU1447
 4741 0030 1D44     		add	r5, r5, r3
 4742              	.LVL514:
3613:src/display.c **** 	    continue;
 4743              		.loc 1 3613 6 is_stmt 1 view .LVU1448
3614:src/display.c **** 	  }
 4744              		.loc 1 3614 6 view .LVU1449
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4745              		.loc 1 3609 8 view .LVU1450
 4746 0032 0028     		cmp	r0, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 170


 4747 0034 F5D1     		bne	.L449
 4748              	.L444:
3618:src/display.c **** 	}
3619:src/display.c **** 	return len;
3620:src/display.c ****       }
 4749              		.loc 1 3620 7 is_stmt 0 view .LVU1451
 4750 0036 2846     		mov	r0, r5
 4751 0038 70BD     		pop	{r4, r5, r6, pc}
 4752              	.LVL515:
 4753              	.L451:
3607:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4754              		.loc 1 3607 6 view .LVU1452
 4755 003a 0546     		mov	r5, r0
3619:src/display.c ****       }
 4756              		.loc 1 3619 2 is_stmt 1 view .LVU1453
 4757              		.loc 1 3620 7 is_stmt 0 view .LVU1454
 4758 003c 2846     		mov	r0, r5
 4759 003e 70BD     		pop	{r4, r5, r6, pc}
 4760              		.loc 1 3620 7 view .LVU1455
 4761              		.cfi_endproc
 4762              	.LFE40:
 4764              		.section	.text.set_status,"ax",%progbits
 4765              		.align	1
 4766              		.p2align 2,,3
 4767              		.syntax unified
 4768              		.thumb
 4769              		.thumb_func
 4770              		.fpu fpv4-sp-d16
 4772              	set_status:
 4773              	.LVL516:
 4774              	.LFB43:
3621:src/display.c **** 
3622:src/display.c **** 
3623:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3624:src/display.c ****        * If this is larger than the display, return true.
3625:src/display.c ****        */
3626:src/display.c ****       static int string_too_large(const char *s) {
3627:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3628:src/display.c ****       }
3629:src/display.c ****       static int string_too_large_top(const char *s) {
3630:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3631:src/display.c ****       }
3632:src/display.c **** 
3633:src/display.c **** 
3634:src/display.c ****       /* Display the given string on the screen.
3635:src/display.c ****        */
3636:src/display.c ****       static void set_status(const char *str) {
 4775              		.loc 1 3636 47 is_stmt 1 view -0
 4776              		.cfi_startproc
 4777              		@ args = 0, pretend = 0, frame = 0
 4778              		@ frame_needed = 0, uses_anonymous_args = 0
3637:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4779              		.loc 1 3637 2 view .LVU1457
3636:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4780              		.loc 1 3636 47 is_stmt 0 view .LVU1458
 4781 0000 10B5     		push	{r4, lr}
 4782              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccCvaEE3.s 			page 171


 4783              		.cfi_offset 4, -8
 4784              		.cfi_offset 14, -4
 4785              		.loc 1 3637 24 view .LVU1459
 4786 0002 0D4B     		ldr	r3, .L459
 4787              		.loc 1 3637 2 view .LVU1460
 4788 0004 93F91630 		ldrsb	r3, [r3, #22]
 4789 0008 002B     		cmp	r3, #0
3636:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4790              		.loc 1 3636 47 view .LVU1461
 4791 000a 82B0     		sub	sp, sp, #8
 4792              		.cfi_def_cfa_offset 16
3636:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4793              		.loc 1 3636 47 view .LVU1462
 4794 000c 0446     		mov	r4, r0
 4795              		.loc 1 3637 2 view .LVU1463
 4796 000e 0ADA     		bge	.L458
 4797 0010 0121     		movs	r1, #1
 4798              	.LVL517:
 4799              	.L455:
 4800              	.LBB378:
 4801              	.LBI378:
3478:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4802              		.loc 1 3478 19 is_stmt 1 discriminator 6 view .LVU1464
 4803              	.LBB379:
3479:src/display.c ****       }
 4804              		.loc 1 3479 2 discriminator 6 view .LVU1465
 4805 0012 40F24A23 		movw	r3, #586
 4806 0016 0093     		str	r3, [sp]
 4807 0018 2046     		mov	r0, r4
 4808 001a 8E23     		movs	r3, #142
 4809 001c 4A22     		movs	r2, #74
 4810 001e FFF7FEFF 		bl	s_s_sized
 4811              	.LVL518:
3479:src/display.c ****       }
 4812              		.loc 1 3479 2 is_stmt 0 discriminator 6 view .LVU1466
 4813              	.LBE379:
 4814              	.LBE378:
3638:src/display.c ****       }
 4815              		.loc 1 3638 7 discriminator 6 view .LVU1467
 4816 0022 02B0     		add	sp, sp, #8
 4817              		.cfi_remember_state
 4818              		.cfi_def_cfa_offset 8
 4819              		@ sp needed
 4820 0024 10BD     		pop	{r4, pc}
 4821              	.LVL519:
 4822              	.L458:
 4823              		.cfi_restore_state
 4824              	.LBB380:
 4825              	.LBI380:
3626:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4826              		.loc 1 3626 18 is_stmt 1 view .LVU1468
 4827              	.LBB381:
3627:src/display.c ****       }
 4828              		.loc 1 3627 2 view .LVU1469
3627:src/display.c ****       }
 4829              		.loc 1 3627 9 is_stmt 0 view .LVU1470
 4830 0026 0021     		movs	r1, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 172


 4831 0028 FFF7FEFF 		bl	pixel_length
 4832              	.LVL520:
3627:src/display.c ****       }
 4833              		.loc 1 3627 9 view .LVU1471
 4834              	.LBE381:
 4835              	.LBE380:
3637:src/display.c ****       }
 4836              		.loc 1 3637 2 view .LVU1472
 4837 002c 4B28     		cmp	r0, #75
 4838 002e D4BF     		ite	le
 4839 0030 0021     		movle	r1, #0
 4840 0032 0121     		movgt	r1, #1
 4841 0034 EDE7     		b	.L455
 4842              	.L460:
 4843 0036 00BF     		.align	2
 4844              	.L459:
 4845 0038 00000000 		.word	StateWhileOn
 4846              		.cfi_endproc
 4847              	.LFE43:
 4849              		.section	.text.set_x_dn,"ax",%progbits
 4850              		.align	1
 4851              		.p2align 2,,3
 4852              		.global	set_x_dn
 4853              		.syntax unified
 4854              		.thumb
 4855              		.thumb_func
 4856              		.fpu fpv4-sp-d16
 4858              	set_x_dn:
 4859              	.LVL521:
 4860              	.LFB27:
2022:src/display.c **** 	char x[50], *obp = x;
 4861              		.loc 1 2022 67 is_stmt 1 view -0
 4862              		.cfi_startproc
 4863              		@ args = 0, pretend = 0, frame = 152
 4864              		@ frame_needed = 0, uses_anonymous_args = 0
2023:src/display.c **** 	int odig = 0;
 4865              		.loc 1 2023 2 view .LVU1474
2022:src/display.c **** 	char x[50], *obp = x;
 4866              		.loc 1 2022 67 is_stmt 0 view .LVU1475
 4867 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4868              		.cfi_def_cfa_offset 36
 4869              		.cfi_offset 4, -36
 4870              		.cfi_offset 5, -32
 4871              		.cfi_offset 6, -28
 4872              		.cfi_offset 7, -24
 4873              		.cfi_offset 8, -20
 4874              		.cfi_offset 9, -16
 4875              		.cfi_offset 10, -12
 4876              		.cfi_offset 11, -8
 4877              		.cfi_offset 14, -4
 4878 0004 A7B0     		sub	sp, sp, #156
 4879              		.cfi_def_cfa_offset 192
 4880              	.LVL522:
2024:src/display.c **** 	int show_exp = 0;
 4881              		.loc 1 2024 2 is_stmt 1 view .LVU1476
2025:src/display.c **** 	int j;
 4882              		.loc 1 2025 2 view .LVU1477
ARM GAS  /tmp/ccCvaEE3.s 			page 173


2026:src/display.c **** 	char mantissa[64];
 4883              		.loc 1 2026 2 view .LVU1478
2027:src/display.c **** 	int exp = 0;
 4884              		.loc 1 2027 2 view .LVU1479
2028:src/display.c **** 	char *p = mantissa;
 4885              		.loc 1 2028 2 view .LVU1480
2029:src/display.c **** 	char *r;
 4886              		.loc 1 2029 2 view .LVU1481
2030:src/display.c **** 	const char *q;
 4887              		.loc 1 2030 2 view .LVU1482
2031:src/display.c **** 	int count, i;
 4888              		.loc 1 2031 2 view .LVU1483
2032:src/display.c **** 	int extra_digits = 0;
 4889              		.loc 1 2032 2 view .LVU1484
2033:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4890              		.loc 1 2033 2 view .LVU1485
2035:src/display.c **** 	int dispdigs;
 4891              		.loc 1 2035 2 view .LVU1486
2036:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4892              		.loc 1 2036 2 view .LVU1487
2037:src/display.c **** #else
 4893              		.loc 1 2037 2 view .LVU1488
2022:src/display.c **** 	char x[50], *obp = x;
 4894              		.loc 1 2022 67 is_stmt 0 view .LVU1489
 4895 0006 0746     		mov	r7, r0
2037:src/display.c **** #else
 4896              		.loc 1 2037 13 view .LVU1490
 4897 0008 08A8     		add	r0, sp, #32
 4898              	.LVL523:
2022:src/display.c **** 	char x[50], *obp = x;
 4899              		.loc 1 2022 67 view .LVU1491
 4900 000a 0C46     		mov	r4, r1
 4901 000c 0192     		str	r2, [sp, #4]
2037:src/display.c **** #else
 4902              		.loc 1 2037 13 view .LVU1492
 4903 000e FFF7FEFF 		bl	get_dispmode_digs
 4904              	.LVL524:
2037:src/display.c **** #else
 4905              		.loc 1 2037 13 view .LVU1493
 4906 0012 0546     		mov	r5, r0
 4907              	.LVL525:
2042:src/display.c **** 	int negative = 0;
 4908              		.loc 1 2042 2 is_stmt 1 view .LVU1494
2043:src/display.c **** 	int trimzeros = 0;
 4909              		.loc 1 2043 2 view .LVU1495
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4910              		.loc 1 2044 2 view .LVU1496
2052:src/display.c **** #endif
 4911              		.loc 1 2052 2 view .LVU1497
2055:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4912              		.loc 1 2055 2 view .LVU1498
 4913 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4914              	.LVL526:
2057:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4915              		.loc 1 2057 2 view .LVU1499
2057:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4916              		.loc 1 2057 5 is_stmt 0 view .LVU1500
ARM GAS  /tmp/ccCvaEE3.s 			page 174


 4917 0018 002C     		cmp	r4, #0
 4918 001a 00F08181 		beq	.L462
 4919              	.L465:
2082:src/display.c **** 	  return;
 4920              		.loc 1 2082 2 is_stmt 1 view .LVU1501
2082:src/display.c **** 	  return;
 4921              		.loc 1 2082 6 is_stmt 0 view .LVU1502
 4922 001e 2146     		mov	r1, r4
 4923 0020 07F10800 		add	r0, r7, #8
 4924 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4925              	.LVL527:
2082:src/display.c **** 	  return;
 4926              		.loc 1 2082 5 view .LVU1503
 4927 0028 8246     		mov	r10, r0
 4928 002a 0028     		cmp	r0, #0
 4929 002c 40F07081 		bne	.L461
2085:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4930              		.loc 1 2085 2 is_stmt 1 view .LVU1504
2085:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4931              		.loc 1 2085 12 is_stmt 0 view .LVU1505
 4932 0030 C94E     		ldr	r6, .L710
2085:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4933              		.loc 1 2085 5 view .LVU1506
 4934 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4935 0034 012B     		cmp	r3, #1
 4936 0036 00F0EC82 		beq	.L687
2028:src/display.c **** 	char *p = mantissa;
 4937              		.loc 1 2028 6 view .LVU1507
 4938 003a 8046     		mov	r8, r0
 4939              	.LVL528:
 4940              	.L468:
2091:src/display.c **** 
 4941              		.loc 1 2091 2 is_stmt 1 view .LVU1508
 4942 003c 0DF1240B 		add	fp, sp, #36
 4943              	.LVL529:
2091:src/display.c **** 
 4944              		.loc 1 2091 2 is_stmt 0 view .LVU1509
 4945 0040 5846     		mov	r0, fp
 4946 0042 3222     		movs	r2, #50
 4947 0044 0021     		movs	r1, #0
 4948 0046 FFF7FEFF 		bl	xset
 4949              	.LVL530:
2093:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4950              		.loc 1 2093 2 is_stmt 1 view .LVU1510
2093:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4951              		.loc 1 2093 6 is_stmt 0 view .LVU1511
 4952 004a 3846     		mov	r0, r7
 4953 004c FFF7FEFF 		bl	dn_eq0
 4954              	.LVL531:
2093:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4955              		.loc 1 2093 5 view .LVU1512
 4956 0050 0028     		cmp	r0, #0
 4957 0052 00F06081 		beq	.L469
2094:src/display.c **** 	    x[0] = '-';
 4958              		.loc 1 2094 4 is_stmt 1 view .LVU1513
2094:src/display.c **** 	    x[0] = '-';
 4959              		.loc 1 2094 7 is_stmt 0 view .LVU1514
ARM GAS  /tmp/ccCvaEE3.s 			page 175


 4960 0056 97F90830 		ldrsb	r3, [r7, #8]
 4961 005a 002B     		cmp	r3, #0
 4962 005c C0F20083 		blt	.L688
 4963              	.L470:
2098:src/display.c **** 	} else
 4964              		.loc 1 2098 6 is_stmt 1 view .LVU1515
2098:src/display.c **** 	} else
 4965              		.loc 1 2098 11 is_stmt 0 view .LVU1516
 4966 0060 3023     		movs	r3, #48
 4967 0062 8DF82430 		strb	r3, [sp, #36]
 4968              	.L471:
2102:src/display.c **** 	  show_x(x, exp);
 4969              		.loc 1 2102 2 is_stmt 1 view .LVU1517
2102:src/display.c **** 	  show_x(x, exp);
 4970              		.loc 1 2102 12 is_stmt 0 view .LVU1518
 4971 0066 96F81190 		ldrb	r9, [r6, #17]	@ zero_extendqisi2
2102:src/display.c **** 	  show_x(x, exp);
 4972              		.loc 1 2102 5 view .LVU1519
 4973 006a B9F1010F 		cmp	r9, #1
 4974 006e 00F04583 		beq	.L689
2108:src/display.c **** 	  //  ALL mode: fill the display
 4975              		.loc 1 2108 2 is_stmt 1 view .LVU1520
2108:src/display.c **** 	  //  ALL mode: fill the display
 4976              		.loc 1 2108 5 is_stmt 0 view .LVU1521
 4977 0072 002D     		cmp	r5, #0
 4978 0074 40F07881 		bne	.L690
2110:src/display.c **** 	else
 4979              		.loc 1 2110 4 is_stmt 1 view .LVU1522
2110:src/display.c **** 	else
 4980              		.loc 1 2110 25 is_stmt 0 view .LVU1523
 4981 0078 019E     		ldr	r6, [sp, #4]
 4982              	.LBB399:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4983              		.loc 1 2117 11 view .LVU1524
 4984 007a 089B     		ldr	r3, [sp, #32]
 4985              	.LBE399:
2110:src/display.c **** 	else
 4986              		.loc 1 2110 25 view .LVU1525
 4987 007c 3168     		ldr	r1, [r6]
 4988              	.LBB400:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4989              		.loc 1 2117 11 view .LVU1526
 4990 007e 2A46     		mov	r2, r5
 4991 0080 3846     		mov	r0, r7
 4992              	.LBE400:
2110:src/display.c **** 	else
 4993              		.loc 1 2110 25 view .LVU1527
 4994 0082 4D1E     		subs	r5, r1, #1
 4995              	.LVL532:
 4996              	.LBB401:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4997              		.loc 1 2117 11 view .LVU1528
 4998 0084 07A9     		add	r1, sp, #28
 4999              	.LBE401:
2110:src/display.c **** 	else
 5000              		.loc 1 2110 7 view .LVU1529
 5001 0086 0795     		str	r5, [sp, #28]
ARM GAS  /tmp/ccCvaEE3.s 			page 176


2114:src/display.c **** 	  int orig_mode = mode;
 5002              		.loc 1 2114 2 is_stmt 1 view .LVU1530
 5003              	.LBB402:
2115:src/display.c **** 
 5004              		.loc 1 2115 4 view .LVU1531
 5005              	.LVL533:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5006              		.loc 1 2117 4 view .LVU1532
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5007              		.loc 1 2117 11 is_stmt 0 view .LVU1533
 5008 0088 FFF7FEFF 		bl	std_round_fix
 5009              	.LVL534:
2122:src/display.c ****  	}
 5010              		.loc 1 2122 27 view .LVU1534
 5011 008c 3368     		ldr	r3, [r6]
 5012 008e 013B     		subs	r3, r3, #1
2122:src/display.c ****  	}
 5013              		.loc 1 2122 9 view .LVU1535
 5014 0090 0793     		str	r3, [sp, #28]
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5015              		.loc 1 2120 16 view .LVU1536
 5016 0092 0123     		movs	r3, #1
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5017              		.loc 1 2117 11 view .LVU1537
 5018 0094 0546     		mov	r5, r0
 5019              	.LVL535:
2118:src/display.c **** 	    // allow zeros to be trimmed
 5020              		.loc 1 2118 4 is_stmt 1 view .LVU1538
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5021              		.loc 1 2120 6 view .LVU1539
2121:src/display.c **** 	    dd = *display_digits - 1;
 5022              		.loc 1 2121 4 view .LVU1540
2122:src/display.c ****  	}
 5023              		.loc 1 2122 6 view .LVU1541
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5024              		.loc 1 2120 16 is_stmt 0 view .LVU1542
 5025 0096 0493     		str	r3, [sp, #16]
 5026              	.LVL536:
 5027              	.L590:
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5028              		.loc 1 2120 16 view .LVU1543
 5029              	.LBE402:
2134:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5030              		.loc 1 2134 2 is_stmt 1 view .LVU1544
 5031 0098 0DF15809 		add	r9, sp, #88
 5032              	.LVL537:
2134:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5033              		.loc 1 2134 2 is_stmt 0 view .LVU1545
 5034 009c 3F22     		movs	r2, #63
 5035 009e 3021     		movs	r1, #48
 5036 00a0 4846     		mov	r0, r9
 5037 00a2 FFF7FEFF 		bl	xset
 5038              	.LVL538:
2135:src/display.c **** 
 5039              		.loc 1 2135 2 is_stmt 1 view .LVU1546
2135:src/display.c **** 
 5040              		.loc 1 2135 31 is_stmt 0 view .LVU1547
ARM GAS  /tmp/ccCvaEE3.s 			page 177


 5041 00a6 0023     		movs	r3, #0
2137:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5042              		.loc 1 2137 6 view .LVU1548
 5043 00a8 4521     		movs	r1, #69
 5044 00aa 5846     		mov	r0, fp
2135:src/display.c **** 
 5045              		.loc 1 2135 31 view .LVU1549
 5046 00ac 8DF89730 		strb	r3, [sp, #151]
2137:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5047              		.loc 1 2137 2 is_stmt 1 view .LVU1550
2137:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5048              		.loc 1 2137 6 is_stmt 0 view .LVU1551
 5049 00b0 FFF7FEFF 		bl	find_char
 5050              	.LVL539:
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5051              		.loc 1 2139 2 is_stmt 1 view .LVU1552
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5052              		.loc 1 2139 5 is_stmt 0 view .LVU1553
 5053 00b4 0646     		mov	r6, r0
 5054 00b6 0028     		cmp	r0, #0
 5055 00b8 00F06481 		beq	.L691
 5056              	.L487:
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5057              		.loc 1 2142 4 is_stmt 1 view .LVU1554
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5058              		.loc 1 2142 10 is_stmt 0 view .LVU1555
 5059 00bc 701C     		adds	r0, r6, #1
 5060              	.LVL540:
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5061              		.loc 1 2142 10 view .LVU1556
 5062 00be FFF7FEFF 		bl	s_to_i
 5063              	.LVL541:
2143:src/display.c **** 	}
 5064              		.loc 1 2143 7 view .LVU1557
 5065 00c2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 5066 00c4 442B     		cmp	r3, #68
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5067              		.loc 1 2142 10 view .LVU1558
 5068 00c6 0646     		mov	r6, r0
 5069              	.LVL542:
2143:src/display.c **** 	}
 5070              		.loc 1 2143 4 is_stmt 1 view .LVU1559
2143:src/display.c **** 	}
 5071              		.loc 1 2143 19 view .LVU1560
2143:src/display.c **** 	}
 5072              		.loc 1 2143 23 is_stmt 0 view .LVU1561
 5073 00c8 08BF     		it	eq
 5074 00ca 4642     		rsbeq	r6, r0, #0
 5075              	.LVL543:
 5076              	.L488:
2151:src/display.c **** 	if (!res) {
 5077              		.loc 1 2151 2 is_stmt 1 view .LVU1562
2151:src/display.c **** 	if (!res) {
 5078              		.loc 1 2151 12 view .LVU1563
2151:src/display.c **** 	if (!res) {
 5079              		.loc 1 2151 2 is_stmt 0 view .LVU1564
 5080 00cc 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
ARM GAS  /tmp/ccCvaEE3.s 			page 178


 5081 00d0 202B     		cmp	r3, #32
2151:src/display.c **** 	if (!res) {
 5082              		.loc 1 2151 8 view .LVU1565
 5083 00d2 D846     		mov	r8, fp
2151:src/display.c **** 	if (!res) {
 5084              		.loc 1 2151 2 view .LVU1566
 5085 00d4 03D1     		bne	.L489
 5086              	.LVL544:
 5087              	.L490:
2151:src/display.c **** 	if (!res) {
 5088              		.loc 1 2151 27 is_stmt 1 discriminator 3 view .LVU1567
2151:src/display.c **** 	if (!res) {
 5089              		.loc 1 2151 23 discriminator 3 view .LVU1568
2151:src/display.c **** 	if (!res) {
 5090              		.loc 1 2151 12 discriminator 3 view .LVU1569
2151:src/display.c **** 	if (!res) {
 5091              		.loc 1 2151 2 is_stmt 0 discriminator 3 view .LVU1570
 5092 00d6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5093              	.LVL545:
2151:src/display.c **** 	if (!res) {
 5094              		.loc 1 2151 2 discriminator 3 view .LVU1571
 5095 00da 202B     		cmp	r3, #32
 5096 00dc FBD0     		beq	.L490
 5097              	.LVL546:
 5098              	.L489:
2152:src/display.c **** 	  CLR_EXP_SIGN;
 5099              		.loc 1 2152 2 is_stmt 1 view .LVU1572
2152:src/display.c **** 	  CLR_EXP_SIGN;
 5100              		.loc 1 2152 5 is_stmt 0 view .LVU1573
 5101 00de 002C     		cmp	r4, #0
 5102 00e0 00F0C982 		beq	.L692
 5103              	.L491:
2156:src/display.c **** 	  negative = 1;
 5104              		.loc 1 2156 2 is_stmt 1 view .LVU1574
2156:src/display.c **** 	  negative = 1;
 5105              		.loc 1 2156 6 is_stmt 0 view .LVU1575
 5106 00e4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2156:src/display.c **** 	  negative = 1;
 5107              		.loc 1 2156 5 view .LVU1576
 5108 00e8 2D2B     		cmp	r3, #45
 5109 00ea 00F0DB81 		beq	.L693
2159:src/display.c **** 	  q++;
 5110              		.loc 1 2159 9 is_stmt 1 view .LVU1577
2159:src/display.c **** 	  q++;
 5111              		.loc 1 2159 12 is_stmt 0 view .LVU1578
 5112 00ee 2B2B     		cmp	r3, #43
 5113 00f0 00F0AF82 		beq	.L694
2043:src/display.c **** 	int trimzeros = 0;
 5114              		.loc 1 2043 6 view .LVU1579
 5115 00f4 0022     		movs	r2, #0
 5116 00f6 0392     		str	r2, [sp, #12]
 5117              	.LVL547:
 5118              	.L493:
2161:src/display.c **** 	if (*q == '.') {
 5119              		.loc 1 2161 9 is_stmt 1 discriminator 1 view .LVU1580
2161:src/display.c **** 	if (*q == '.') {
 5120              		.loc 1 2161 2 is_stmt 0 discriminator 1 view .LVU1581
ARM GAS  /tmp/ccCvaEE3.s 			page 179


 5121 00f8 302B     		cmp	r3, #48
 5122 00fa 03D1     		bne	.L495
 5123              	.LVL548:
 5124              	.L494:
2161:src/display.c **** 	if (*q == '.') {
 5125              		.loc 1 2161 24 is_stmt 1 discriminator 2 view .LVU1582
2161:src/display.c **** 	if (*q == '.') {
 5126              		.loc 1 2161 20 discriminator 2 view .LVU1583
2161:src/display.c **** 	if (*q == '.') {
 5127              		.loc 1 2161 9 discriminator 2 view .LVU1584
 5128 00fc 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5129              	.LVL549:
2161:src/display.c **** 	if (*q == '.') {
 5130              		.loc 1 2161 2 is_stmt 0 discriminator 2 view .LVU1585
 5131 0100 302B     		cmp	r3, #48
 5132 0102 FBD0     		beq	.L494
 5133              	.LVL550:
 5134              	.L495:
2162:src/display.c **** 	  do
 5135              		.loc 1 2162 2 is_stmt 1 view .LVU1586
2162:src/display.c **** 	  do
 5136              		.loc 1 2162 5 is_stmt 0 view .LVU1587
 5137 0104 2E2B     		cmp	r3, #46
 5138 0106 00F0B581 		beq	.L695
2169:src/display.c **** 	    *p++ = *q++;
 5139              		.loc 1 2169 4 is_stmt 1 view .LVU1588
2169:src/display.c **** 	    *p++ = *q++;
 5140              		.loc 1 2169 7 is_stmt 0 view .LVU1589
 5141 010a A3F13002 		sub	r2, r3, #48
 5142 010e 092A     		cmp	r2, #9
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5143              		.loc 1 2170 6 is_stmt 1 view .LVU1590
 5144              	.LVL551:
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5145              		.loc 1 2170 15 is_stmt 0 view .LVU1591
 5146 0110 9CBF     		itt	ls
 5147 0112 08F10108 		addls	r8, r8, #1
 5148              	.LVL552:
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5149              		.loc 1 2170 11 view .LVU1592
 5150 0116 8DF85830 		strbls	r3, [sp, #88]
2171:src/display.c **** 	    *p++ = *q++;
 5151              		.loc 1 2171 11 view .LVU1593
 5152 011a 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2171:src/display.c **** 	    *p++ = *q++;
 5153              		.loc 1 2171 10 view .LVU1594
 5154 011e A2F13003 		sub	r3, r2, #48
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5155              		.loc 1 2170 8 view .LVU1595
 5156 0122 94BF     		ite	ls
 5157 0124 0DF15901 		addls	r1, sp, #89
2029:src/display.c **** 	char *r;
 5158              		.loc 1 2029 8 view .LVU1596
 5159 0128 4946     		movhi	r1, r9
 5160              	.LVL553:
2171:src/display.c **** 	    *p++ = *q++;
 5161              		.loc 1 2171 10 is_stmt 1 view .LVU1597
ARM GAS  /tmp/ccCvaEE3.s 			page 180


 5162 012a 092B     		cmp	r3, #9
 5163 012c 0ED8     		bhi	.L501
 5164 012e A6EB0800 		sub	r0, r6, r8
 5165 0132 08F10103 		add	r3, r8, #1
 5166              	.L502:
 5167              	.LVL554:
2172:src/display.c **** 	    exp++;
 5168              		.loc 1 2172 6 view .LVU1598
2172:src/display.c **** 	    exp++;
 5169              		.loc 1 2172 11 is_stmt 0 view .LVU1599
 5170 0136 01F8012B 		strb	r2, [r1], #1
 5171              	.LVL555:
2172:src/display.c **** 	    exp++;
 5172              		.loc 1 2172 15 view .LVU1600
 5173 013a 9846     		mov	r8, r3
 5174              	.LVL556:
2173:src/display.c **** 	  }
 5175              		.loc 1 2173 6 is_stmt 1 view .LVU1601
 5176 013c C618     		adds	r6, r0, r3
 5177              	.LVL557:
2171:src/display.c **** 	    *p++ = *q++;
 5178              		.loc 1 2171 10 view .LVU1602
2171:src/display.c **** 	    *p++ = *q++;
 5179              		.loc 1 2171 11 is_stmt 0 view .LVU1603
 5180 013e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5181              	.LVL558:
2171:src/display.c **** 	    *p++ = *q++;
 5182              		.loc 1 2171 10 view .LVU1604
 5183 0142 A2F1300C 		sub	ip, r2, #48
 5184 0146 BCF1090F 		cmp	ip, #9
 5185 014a F4D9     		bls	.L502
 5186              	.LVL559:
 5187              	.L501:
2175:src/display.c **** 	    q++;
 5188              		.loc 1 2175 4 is_stmt 1 view .LVU1605
2175:src/display.c **** 	    q++;
 5189              		.loc 1 2175 7 is_stmt 0 view .LVU1606
 5190 014c 2E2A     		cmp	r2, #46
 5191 014e 00F06E82 		beq	.L696
 5192              	.LVL560:
 5193              	.L498:
2182:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5194              		.loc 1 2182 2 is_stmt 1 view .LVU1607
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5195              		.loc 1 2183 12 is_stmt 0 view .LVU1608
 5196 0152 019B     		ldr	r3, [sp, #4]
 5197 0154 079A     		ldr	r2, [sp, #28]
 5198 0156 1B68     		ldr	r3, [r3]
 5199 0158 0293     		str	r3, [sp, #8]
2182:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5200              		.loc 1 2182 5 view .LVU1609
 5201 015a 012D     		cmp	r5, #1
 5202 015c 00F07A81 		beq	.L504
 5203              	.LVL561:
 5204              	.L686:
2184:src/display.c **** 	  else {
 5205              		.loc 1 2184 35 view .LVU1610
ARM GAS  /tmp/ccCvaEE3.s 			page 181


 5206 0160 0021     		movs	r1, #0
 5207              	.LVL562:
 5208              	.L505:
2196:src/display.c **** 	if (*p >= '5') {	// Round up
 5209              		.loc 1 2196 2 is_stmt 1 view .LVU1611
 5210 0162 02F1010E 		add	lr, r2, #1
2196:src/display.c **** 	if (*p >= '5') {	// Round up
 5211              		.loc 1 2196 35 is_stmt 0 view .LVU1612
 5212 0166 7144     		add	r1, r1, lr
2196:src/display.c **** 	if (*p >= '5') {	// Round up
 5213              		.loc 1 2196 4 view .LVU1613
 5214 0168 09EB0103 		add	r3, r9, r1
 5215              	.LVL563:
2197:src/display.c **** 	  *p = '0';
 5216              		.loc 1 2197 2 is_stmt 1 view .LVU1614
2197:src/display.c **** 	  *p = '0';
 5217              		.loc 1 2197 6 is_stmt 0 view .LVU1615
 5218 016c 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2197:src/display.c **** 	  *p = '0';
 5219              		.loc 1 2197 5 view .LVU1616
 5220 0170 3428     		cmp	r0, #52
 5221 0172 26D9     		bls	.L510
2198:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5222              		.loc 1 2198 4 is_stmt 1 view .LVU1617
2198:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5223              		.loc 1 2198 7 is_stmt 0 view .LVU1618
 5224 0174 3020     		movs	r0, #48
 5225 0176 09F80100 		strb	r0, [r9, r1]
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5226              		.loc 1 2199 4 is_stmt 1 view .LVU1619
 5227              	.LVL564:
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5228              		.loc 1 2199 23 view .LVU1620
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5229              		.loc 1 2199 4 is_stmt 0 view .LVU1621
 5230 017a 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5231 017e 3928     		cmp	r0, #57
 5232 0180 40F0DD83 		bne	.L511
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5233              		.loc 1 2199 11 view .LVU1622
 5234 0184 4846     		mov	r0, r9
 5235              	.LVL565:
 5236              	.L512:
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5237              		.loc 1 2199 38 is_stmt 1 discriminator 3 view .LVU1623
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5238              		.loc 1 2199 34 discriminator 3 view .LVU1624
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5239              		.loc 1 2199 23 discriminator 3 view .LVU1625
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5240              		.loc 1 2199 4 is_stmt 0 discriminator 3 view .LVU1626
 5241 0186 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5242              	.LVL566:
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5243              		.loc 1 2199 4 discriminator 3 view .LVU1627
 5244 018a BCF1390F 		cmp	ip, #57
 5245 018e FAD0     		beq	.L512
ARM GAS  /tmp/ccCvaEE3.s 			page 182


2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5246              		.loc 1 2200 4 is_stmt 1 view .LVU1628
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5247              		.loc 1 2200 7 is_stmt 0 view .LVU1629
 5248 0190 8342     		cmp	r3, r0
 5249 0192 00F00D81 		beq	.L697
 5250              	.LVL567:
 5251              	.L588:
2209:src/display.c **** 	      *p = '0';
 5252              		.loc 1 2209 12 is_stmt 1 view .LVU1630
2209:src/display.c **** 	      *p = '0';
 5253              		.loc 1 2209 13 is_stmt 0 view .LVU1631
 5254 0196 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2209:src/display.c **** 	      *p = '0';
 5255              		.loc 1 2209 12 view .LVU1632
 5256 019a BCF1390F 		cmp	ip, #57
 5257 019e 03F1FF30 		add	r0, r3, #-1
 5258              	.LVL568:
2209:src/display.c **** 	      *p = '0';
 5259              		.loc 1 2209 12 view .LVU1633
 5260 01a2 08D1     		bne	.L515
2210:src/display.c **** 	    (*p)++;
 5261              		.loc 1 2210 11 view .LVU1634
 5262 01a4 4FF0300E 		mov	lr, #48
 5263              	.L514:
2210:src/display.c **** 	    (*p)++;
 5264              		.loc 1 2210 8 is_stmt 1 view .LVU1635
2210:src/display.c **** 	    (*p)++;
 5265              		.loc 1 2210 11 is_stmt 0 view .LVU1636
 5266 01a8 80F800E0 		strb	lr, [r0]
2209:src/display.c **** 	      *p = '0';
 5267              		.loc 1 2209 12 is_stmt 1 view .LVU1637
 5268              	.LVL569:
2209:src/display.c **** 	      *p = '0';
 5269              		.loc 1 2209 13 is_stmt 0 view .LVU1638
 5270 01ac 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5271              	.LVL570:
2209:src/display.c **** 	      *p = '0';
 5272              		.loc 1 2209 12 view .LVU1639
 5273 01b0 BCF1390F 		cmp	ip, #57
 5274 01b4 F8D0     		beq	.L514
 5275              	.L515:
2211:src/display.c **** 	  }
 5276              		.loc 1 2211 6 is_stmt 1 view .LVU1640
2211:src/display.c **** 	  }
 5277              		.loc 1 2211 10 is_stmt 0 view .LVU1641
 5278 01b6 0CF1010C 		add	ip, ip, #1
 5279 01ba 80F800C0 		strb	ip, [r0]
 5280              	.LVL571:
 5281              	.L685:
2211:src/display.c **** 	  }
 5282              		.loc 1 2211 10 view .LVU1642
 5283 01be 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5284              	.L510:
2216:src/display.c **** 
 5285              		.loc 1 2216 2 is_stmt 1 view .LVU1643
 5286              	.LVL572:
ARM GAS  /tmp/ccCvaEE3.s 			page 183


2216:src/display.c **** 
 5287              		.loc 1 2216 45 view .LVU1644
2216:src/display.c **** 
 5288              		.loc 1 2216 2 is_stmt 0 view .LVU1645
 5289 01c2 28B1     		cbz	r0, .L521
 5290              	.LVL573:
 5291              	.L587:
2216:src/display.c **** 
 5292              		.loc 1 2216 62 view .LVU1646
 5293 01c4 3020     		movs	r0, #48
 5294              	.L522:
2216:src/display.c **** 
 5295              		.loc 1 2216 68 is_stmt 1 discriminator 3 view .LVU1647
2216:src/display.c **** 
 5296              		.loc 1 2216 57 discriminator 3 view .LVU1648
 5297              	.LVL574:
2216:src/display.c **** 
 5298              		.loc 1 2216 62 is_stmt 0 discriminator 3 view .LVU1649
 5299 01c6 03F8010B 		strb	r0, [r3], #1
 5300              	.LVL575:
2216:src/display.c **** 
 5301              		.loc 1 2216 45 is_stmt 1 discriminator 3 view .LVU1650
2216:src/display.c **** 
 5302              		.loc 1 2216 2 is_stmt 0 discriminator 3 view .LVU1651
 5303 01ca 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5304 01cc 0029     		cmp	r1, #0
 5305 01ce FAD1     		bne	.L522
 5306              	.L521:
2218:src/display.c **** 	switch (mode) {
 5307              		.loc 1 2218 2 is_stmt 1 view .LVU1652
 5308              	.LVL576:
2219:src/display.c **** 	default:
 5309              		.loc 1 2219 2 view .LVU1653
 5310 01d0 022D     		cmp	r5, #2
 5311 01d2 00F06D81 		beq	.L559
 5312 01d6 032D     		cmp	r5, #3
 5313 01d8 00F00F81 		beq	.L524
 5314 01dc 012D     		cmp	r5, #1
 5315 01de 00F0E081 		beq	.L525
2222:src/display.c **** 	  if (count != *display_digits)
 5316              		.loc 1 2222 4 view .LVU1654
 5317              	.LVL577:
2222:src/display.c **** 	  if (count != *display_digits)
 5318              		.loc 1 2222 34 view .LVU1655
2222:src/display.c **** 	  if (count != *display_digits)
 5319              		.loc 1 2222 42 is_stmt 0 view .LVU1656
 5320 01e2 0298     		ldr	r0, [sp, #8]
 5321 01e4 26AB     		add	r3, sp, #152
 5322 01e6 0344     		add	r3, r3, r0
2222:src/display.c **** 	  if (count != *display_digits)
 5323              		.loc 1 2222 4 view .LVU1657
 5324 01e8 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5325 01ec 302B     		cmp	r3, #48
 5326 01ee 40F09983 		bne	.L603
 5327 01f2 411E     		subs	r1, r0, #1
 5328 01f4 4944     		add	r1, r1, r9
 5329              	.LVL578:
ARM GAS  /tmp/ccCvaEE3.s 			page 184


 5330              	.L529:
2222:src/display.c **** 	  if (count != *display_digits)
 5331              		.loc 1 2222 66 is_stmt 1 discriminator 3 view .LVU1658
2222:src/display.c **** 	  if (count != *display_digits)
 5332              		.loc 1 2222 58 discriminator 3 view .LVU1659
2222:src/display.c **** 	  if (count != *display_digits)
 5333              		.loc 1 2222 42 is_stmt 0 discriminator 3 view .LVU1660
 5334 01f6 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2222:src/display.c **** 	  if (count != *display_digits)
 5335              		.loc 1 2222 4 discriminator 3 view .LVU1661
 5336 01fa 302D     		cmp	r5, #48
 5337 01fc 0346     		mov	r3, r0
2222:src/display.c **** 	  if (count != *display_digits)
 5338              		.loc 1 2222 63 discriminator 3 view .LVU1662
 5339 01fe 00F1FF30 		add	r0, r0, #-1
 5340              	.LVL579:
2222:src/display.c **** 	  if (count != *display_digits)
 5341              		.loc 1 2222 34 is_stmt 1 discriminator 3 view .LVU1663
2222:src/display.c **** 	  if (count != *display_digits)
 5342              		.loc 1 2222 4 is_stmt 0 discriminator 3 view .LVU1664
 5343 0202 F8D0     		beq	.L529
2223:src/display.c **** 	    count++;
 5344              		.loc 1 2223 4 is_stmt 1 view .LVU1665
2223:src/display.c **** 	    count++;
 5345              		.loc 1 2223 7 is_stmt 0 view .LVU1666
 5346 0204 0299     		ldr	r1, [sp, #8]
 5347 0206 8842     		cmp	r0, r1
 5348 0208 08BF     		it	eq
 5349 020a 0B46     		moveq	r3, r1
 5350              	.LVL580:
 5351              	.L528:
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5352              		.loc 1 2226 4 is_stmt 1 view .LVU1667
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5353              		.loc 1 2226 7 is_stmt 0 view .LVU1668
 5354 020c 0299     		ldr	r1, [sp, #8]
 5355 020e 8E42     		cmp	r6, r1
 5356 0210 80F20581 		bge	.L530
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5357              		.loc 1 2226 47 discriminator 1 view .LVU1669
 5358 0214 591A     		subs	r1, r3, r1
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5359              		.loc 1 2226 31 discriminator 1 view .LVU1670
 5360 0216 B142     		cmp	r1, r6
 5361 0218 00F30181 		bgt	.L530
2251:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5362              		.loc 1 2251 11 is_stmt 1 view .LVU1671
2251:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5363              		.loc 1 2251 14 is_stmt 0 view .LVU1672
 5364 021c 002E     		cmp	r6, #0
 5365 021e C0F2A483 		blt	.L539
 5366 0222 721C     		adds	r2, r6, #1
2253:src/display.c **** 		*obp++ = ',';
 5367              		.loc 1 2253 31 view .LVU1673
 5368 0224 DFF838E1 		ldr	lr, .L710+8
 5369 0228 0592     		str	r2, [sp, #20]
 5370 022a 09EB0200 		add	r0, r9, r2
ARM GAS  /tmp/ccCvaEE3.s 			page 185


2218:src/display.c **** 	switch (mode) {
 5371              		.loc 1 2218 4 view .LVU1674
 5372 022e CC46     		mov	ip, r9
2023:src/display.c **** 	int odig = 0;
 5373              		.loc 1 2023 15 view .LVU1675
 5374 0230 5946     		mov	r1, fp
 5375 0232 05E0     		b	.L540
 5376              	.LVL581:
 5377              	.L543:
2254:src/display.c **** 	      *obp++ = *p++;
 5378              		.loc 1 2254 3 is_stmt 1 view .LVU1676
2253:src/display.c **** 		*obp++ = ',';
 5379              		.loc 1 2253 18 is_stmt 0 view .LVU1677
 5380 0234 022D     		cmp	r5, #2
2254:src/display.c **** 	      *obp++ = *p++;
 5381              		.loc 1 2254 10 view .LVU1678
 5382 0236 05BF     		ittet	eq
 5383 0238 2C22     		moveq	r2, #44
 5384 023a 4A70     		strbeq	r2, [r1, #1]
2255:src/display.c **** 	      odig++;
 5385              		.loc 1 2255 12 view .LVU1679
 5386 023c 0131     		addne	r1, r1, #1
 5387              	.LVL582:
2254:src/display.c **** 	      *obp++ = *p++;
 5388              		.loc 1 2254 7 view .LVU1680
 5389 023e 0231     		addeq	r1, r1, #2
 5390              	.LVL583:
 5391              	.L540:
2255:src/display.c **** 	      odig++;
 5392              		.loc 1 2255 8 is_stmt 1 discriminator 2 view .LVU1681
2255:src/display.c **** 	      odig++;
 5393              		.loc 1 2255 15 is_stmt 0 discriminator 2 view .LVU1682
 5394 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5395              	.LVL584:
2253:src/display.c **** 		*obp++ = ',';
 5396              		.loc 1 2253 8 is_stmt 1 discriminator 2 view .LVU1683
2255:src/display.c **** 	      odig++;
 5397              		.loc 1 2255 15 is_stmt 0 discriminator 2 view .LVU1684
 5398 0244 0A70     		strb	r2, [r1]
2256:src/display.c **** 	    }
 5399              		.loc 1 2256 8 is_stmt 1 discriminator 2 view .LVU1685
 5400              	.LVL585:
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5401              		.loc 1 2252 23 discriminator 2 view .LVU1686
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5402              		.loc 1 2252 15 discriminator 2 view .LVU1687
2253:src/display.c **** 		*obp++ = ',';
 5403              		.loc 1 2253 31 is_stmt 0 discriminator 2 view .LVU1688
 5404 0246 A9EB0C02 		sub	r2, r9, ip
 5405 024a 3244     		add	r2, r2, r6
 5406 024c 8EFB0285 		smull	r8, r5, lr, r2
 5407 0250 A5EBE275 		sub	r5, r5, r2, asr #31
 5408 0254 05EB4505 		add	r5, r5, r5, lsl #1
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5409              		.loc 1 2252 6 discriminator 2 view .LVU1689
 5410 0258 6045     		cmp	r0, ip
2253:src/display.c **** 		*obp++ = ',';
ARM GAS  /tmp/ccCvaEE3.s 			page 186


 5411              		.loc 1 2253 31 discriminator 2 view .LVU1690
 5412 025a A2EB0505 		sub	r5, r2, r5
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5413              		.loc 1 2252 6 discriminator 2 view .LVU1691
 5414 025e E9D1     		bne	.L543
 5415 0260 059D     		ldr	r5, [sp, #20]
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5416              		.loc 1 2258 6 is_stmt 1 view .LVU1692
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5417              		.loc 1 2258 13 is_stmt 0 view .LVU1693
 5418 0262 2E22     		movs	r2, #46
2259:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5419              		.loc 1 2259 9 view .LVU1694
 5420 0264 AB42     		cmp	r3, r5
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5421              		.loc 1 2258 13 view .LVU1695
 5422 0266 4A70     		strb	r2, [r1, #1]
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5423              		.loc 1 2258 10 view .LVU1696
 5424 0268 01F10208 		add	r8, r1, #2
 5425              	.LVL586:
2259:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5426              		.loc 1 2259 6 is_stmt 1 view .LVU1697
2259:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5427              		.loc 1 2259 9 is_stmt 0 view .LVU1698
 5428 026c 40F34281 		ble	.L537
 5429 0270 9A1B     		subs	r2, r3, r6
 5430 0272 0A44     		add	r2, r2, r1
 5431 0274 0131     		adds	r1, r1, #1
 5432              	.LVL587:
 5433              	.L544:
2261:src/display.c **** 		odig++;
 5434              		.loc 1 2261 3 is_stmt 1 discriminator 3 view .LVU1699
2261:src/display.c **** 		odig++;
 5435              		.loc 1 2261 10 is_stmt 0 discriminator 3 view .LVU1700
 5436 0276 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5437              	.LVL588:
2261:src/display.c **** 		odig++;
 5438              		.loc 1 2261 10 discriminator 3 view .LVU1701
 5439 027a 01F8015F 		strb	r5, [r1, #1]!
2262:src/display.c **** 	      }
 5440              		.loc 1 2262 3 is_stmt 1 discriminator 3 view .LVU1702
2260:src/display.c **** 		*obp++ = *p++;
 5441              		.loc 1 2260 31 discriminator 3 view .LVU1703
2260:src/display.c **** 		*obp++ = *p++;
 5442              		.loc 1 2260 22 discriminator 3 view .LVU1704
2260:src/display.c **** 		*obp++ = *p++;
 5443              		.loc 1 2260 8 is_stmt 0 discriminator 3 view .LVU1705
 5444 027e 9142     		cmp	r1, r2
 5445 0280 F9D1     		bne	.L544
 5446 0282 F243     		mvns	r2, r6
 5447 0284 1A44     		add	r2, r2, r3
 5448 0286 9044     		add	r8, r8, r2
 5449              	.LVL589:
2262:src/display.c **** 	      }
 5450              		.loc 1 2262 7 view .LVU1706
 5451 0288 1D46     		mov	r5, r3
ARM GAS  /tmp/ccCvaEE3.s 			page 187


 5452 028a 33E1     		b	.L537
 5453              	.LVL590:
 5454              	.L607:
2262:src/display.c **** 	      }
 5455              		.loc 1 2262 7 view .LVU1707
 5456 028c D846     		mov	r8, fp
 5457              	.LVL591:
 5458              	.L566:
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5459              		.loc 1 2354 2 is_stmt 1 view .LVU1708
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5460              		.loc 1 2354 5 is_stmt 0 view .LVU1709
 5461 028e 029B     		ldr	r3, [sp, #8]
 5462 0290 0A2B     		cmp	r3, #10
 5463 0292 02DD     		ble	.L569
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5464              		.loc 1 2354 50 discriminator 1 view .LVU1710
 5465 0294 002C     		cmp	r4, #0
 5466 0296 00F0FB81 		beq	.L698
 5467              	.L569:
2360:src/display.c **** 	if (odig > *display_digits)
 5468              		.loc 1 2360 2 is_stmt 1 view .LVU1711
 5469 029a 029B     		ldr	r3, [sp, #8]
 5470 029c 9D42     		cmp	r5, r3
 5471 029e A8BF     		it	ge
 5472 02a0 1D46     		movge	r5, r3
 5473              	.LVL592:
2363:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5474              		.loc 1 2363 23 is_stmt 0 view .LVU1712
 5475 02a2 5F1B     		subs	r7, r3, r5
 5476              	.LVL593:
2363:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5477              		.loc 1 2363 4 view .LVU1713
 5478 02a4 07EBC707 		add	r7, r7, r7, lsl #3
2360:src/display.c **** 	if (odig > *display_digits)
 5479              		.loc 1 2360 7 view .LVU1714
 5480 02a8 0023     		movs	r3, #0
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5481              		.loc 1 2364 5 view .LVU1715
 5482 02aa 9F42     		cmp	r7, r3
2360:src/display.c **** 	if (odig > *display_digits)
 5483              		.loc 1 2360 7 view .LVU1716
 5484 02ac 88F80030 		strb	r3, [r8]
2361:src/display.c **** 	  odig = *display_digits;
 5485              		.loc 1 2361 2 is_stmt 1 view .LVU1717
 5486              	.LVL594:
2363:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5487              		.loc 1 2363 2 view .LVU1718
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5488              		.loc 1 2364 2 view .LVU1719
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5489              		.loc 1 2364 5 is_stmt 0 view .LVU1720
 5490 02b0 03DD     		ble	.L570
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5491              		.loc 1 2364 35 discriminator 1 view .LVU1721
 5492 02b2 16F57A7F 		cmn	r6, #1000
2365:src/display.c **** 	if (negative) {
ARM GAS  /tmp/ccCvaEE3.s 			page 188


 5493              		.loc 1 2365 4 is_stmt 1 discriminator 1 view .LVU1722
2365:src/display.c **** 	if (negative) {
 5494              		.loc 1 2365 6 is_stmt 0 discriminator 1 view .LVU1723
 5495 02b6 D8BF     		it	le
 5496 02b8 093F     		suble	r7, r7, #9
 5497              	.LVL595:
 5498              	.L570:
2366:src/display.c **** 	  if (res) *res++ = '-';
 5499              		.loc 1 2366 2 is_stmt 1 view .LVU1724
2366:src/display.c **** 	  if (res) *res++ = '-';
 5500              		.loc 1 2366 5 is_stmt 0 view .LVU1725
 5501 02ba 039B     		ldr	r3, [sp, #12]
 5502 02bc 2BB1     		cbz	r3, .L571
2367:src/display.c **** 	  else {
 5503              		.loc 1 2367 4 is_stmt 1 view .LVU1726
2367:src/display.c **** 	  else {
 5504              		.loc 1 2367 7 is_stmt 0 view .LVU1727
 5505 02be 002C     		cmp	r4, #0
 5506 02c0 00F0FE81 		beq	.L572
2367:src/display.c **** 	  else {
 5507              		.loc 1 2367 13 is_stmt 1 discriminator 1 view .LVU1728
 5508              	.LVL596:
2367:src/display.c **** 	  else {
 5509              		.loc 1 2367 20 is_stmt 0 discriminator 1 view .LVU1729
 5510 02c4 2D23     		movs	r3, #45
 5511 02c6 04F8013B 		strb	r3, [r4], #1
 5512              	.LVL597:
 5513              	.L571:
2375:src/display.c **** 	  if (c == '.') {
 5514              		.loc 1 2375 12 is_stmt 1 discriminator 1 view .LVU1730
2375:src/display.c **** 	  if (c == '.') {
 5515              		.loc 1 2375 18 is_stmt 0 discriminator 1 view .LVU1731
 5516 02ca 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5517              	.LVL598:
2375:src/display.c **** 	  if (c == '.') {
 5518              		.loc 1 2375 2 discriminator 1 view .LVU1732
 5519 02ce A2B1     		cbz	r2, .L573
2375:src/display.c **** 	  if (c == '.') {
 5520              		.loc 1 2375 31 view .LVU1733
 5521 02d0 6B2F     		cmp	r7, #107
 5522 02d2 12DC     		bgt	.L573
 5523              	.LVL599:
 5524              	.L574:
2377:src/display.c **** 	  } else if (c == ',') {
 5525              		.loc 1 2377 12 view .LVU1734
 5526 02d4 DFF88C90 		ldr	r9, .L710+12
 5527              	.LVL600:
 5528              	.L583:
2376:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5529              		.loc 1 2376 4 is_stmt 1 view .LVU1735
2376:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5530              		.loc 1 2376 7 is_stmt 0 view .LVU1736
 5531 02d8 2E2A     		cmp	r2, #46
 5532 02da 00F02081 		beq	.L699
2378:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5533              		.loc 1 2378 11 is_stmt 1 view .LVU1737
2378:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
ARM GAS  /tmp/ccCvaEE3.s 			page 189


 5534              		.loc 1 2378 14 is_stmt 0 view .LVU1738
 5535 02de 2C2A     		cmp	r2, #44
 5536 02e0 00F04681 		beq	.L700
2381:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5537              		.loc 1 2381 6 is_stmt 1 view .LVU1739
 5538              	.LVL601:
 5539              	.LBB403:
 5540              	.LBI403:
 415:src/display.c ****   if (res) *res++ = ch;
 5541              		.loc 1 415 14 view .LVU1740
 5542              	.LBB404:
 416:src/display.c ****   else	set_dig(base, ch);
 5543              		.loc 1 416 3 view .LVU1741
 416:src/display.c ****   else	set_dig(base, ch);
 5544              		.loc 1 416 6 is_stmt 0 view .LVU1742
 5545 02e4 002C     		cmp	r4, #0
 5546 02e6 00F05281 		beq	.L581
 416:src/display.c ****   else	set_dig(base, ch);
 5547              		.loc 1 416 12 is_stmt 1 view .LVU1743
 5548              	.LVL602:
 416:src/display.c ****   else	set_dig(base, ch);
 5549              		.loc 1 416 19 is_stmt 0 view .LVU1744
 5550 02ea 04F8012B 		strb	r2, [r4], #1
 5551              	.LVL603:
 5552              	.L582:
 418:src/display.c **** }
 5553              		.loc 1 418 3 is_stmt 1 view .LVU1745
 418:src/display.c **** }
 5554              		.loc 1 418 3 is_stmt 0 view .LVU1746
 5555              	.LBE404:
 5556              	.LBE403:
2382:src/display.c **** 	  }
 5557              		.loc 1 2382 6 is_stmt 1 view .LVU1747
2375:src/display.c **** 	  if (c == '.') {
 5558              		.loc 1 2375 18 is_stmt 0 view .LVU1748
 5559 02ee 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 5560              	.LVL604:
2382:src/display.c **** 	  }
 5561              		.loc 1 2382 8 view .LVU1749
 5562 02f2 0937     		adds	r7, r7, #9
 5563              	.LVL605:
2375:src/display.c **** 	  if (c == '.') {
 5564              		.loc 1 2375 53 is_stmt 1 view .LVU1750
2375:src/display.c **** 	  if (c == '.') {
 5565              		.loc 1 2375 12 view .LVU1751
2375:src/display.c **** 	  if (c == '.') {
 5566              		.loc 1 2375 2 is_stmt 0 view .LVU1752
 5567 02f4 0AB1     		cbz	r2, .L573
2375:src/display.c **** 	  if (c == '.') {
 5568              		.loc 1 2375 31 discriminator 3 view .LVU1753
 5569 02f6 6B2F     		cmp	r7, #107
 5570 02f8 EEDD     		ble	.L583
 5571              	.LVL606:
 5572              	.L573:
2395:src/display.c **** 	  set_exp(exp, 0, res);
 5573              		.loc 1 2395 2 is_stmt 1 view .LVU1754
2395:src/display.c **** 	  set_exp(exp, 0, res);
ARM GAS  /tmp/ccCvaEE3.s 			page 190


 5574              		.loc 1 2395 5 is_stmt 0 view .LVU1755
 5575 02fa BAF1000F 		cmp	r10, #0
 5576 02fe 40F01F81 		bne	.L701
 5577              	.L584:
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5578              		.loc 1 2398 2 is_stmt 1 view .LVU1756
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5579              		.loc 1 2398 5 is_stmt 0 view .LVU1757
 5580 0302 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5581 0306 2E2B     		cmp	r3, #46
 5582 0308 00F02481 		beq	.L702
 5583              	.LVL607:
 5584              	.L585:
2400:src/display.c ****       }
 5585              		.loc 1 2400 2 is_stmt 1 view .LVU1758
2400:src/display.c ****       }
 5586              		.loc 1 2400 18 is_stmt 0 view .LVU1759
 5587 030c 019B     		ldr	r3, [sp, #4]
 5588 030e 1D60     		str	r5, [r3]
 5589              	.LVL608:
 5590              	.L461:
2401:src/display.c **** 
 5591              		.loc 1 2401 7 view .LVU1760
 5592 0310 27B0     		add	sp, sp, #156
 5593              		.cfi_remember_state
 5594              		.cfi_def_cfa_offset 36
 5595              		@ sp needed
 5596 0312 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5597              	.LVL609:
 5598              	.L469:
 5599              		.cfi_restore_state
2100:src/display.c **** 
 5600              		.loc 1 2100 4 is_stmt 1 view .LVU1761
 5601 0316 5946     		mov	r1, fp
 5602 0318 3846     		mov	r0, r7
 5603 031a FFF7FEFF 		bl	decNumberToString
 5604              	.LVL610:
 5605 031e A2E6     		b	.L471
 5606              	.LVL611:
 5607              	.L462:
2058:src/display.c **** 	    if (State2.hms) {
 5608              		.loc 1 2058 4 view .LVU1762
2058:src/display.c **** 	    if (State2.hms) {
 5609              		.loc 1 2058 25 is_stmt 0 view .LVU1763
 5610 0320 0D4B     		ldr	r3, .L710
 5611 0322 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
2058:src/display.c **** 	    if (State2.hms) {
 5612              		.loc 1 2058 22 view .LVU1764
 5613 0324 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
2058:src/display.c **** 	    if (State2.hms) {
 5614              		.loc 1 2058 25 view .LVU1765
 5615 0326 01F00201 		and	r1, r1, #2
2058:src/display.c **** 	    if (State2.hms) {
 5616              		.loc 1 2058 22 view .LVU1766
 5617 032a 1143     		orrs	r1, r1, r2
 5618 032c 7FF477AE 		bne	.L465
2059:src/display.c **** 	      set_x_hms(z, res);
ARM GAS  /tmp/ccCvaEE3.s 			page 191


 5619              		.loc 1 2059 6 is_stmt 1 view .LVU1767
2059:src/display.c **** 	      set_x_hms(z, res);
 5620              		.loc 1 2059 10 is_stmt 0 view .LVU1768
 5621 0330 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
2059:src/display.c **** 	      set_x_hms(z, res);
 5622              		.loc 1 2059 9 view .LVU1769
 5623 0332 DE07     		lsls	r6, r3, #31
 5624 0334 00F1F282 		bmi	.L703
2063:src/display.c **** 	      if (set_x_fract(z, res))
 5625              		.loc 1 2063 11 is_stmt 1 view .LVU1770
2063:src/display.c **** 	      if (set_x_fract(z, res))
 5626              		.loc 1 2063 15 is_stmt 0 view .LVU1771
 5627 0338 084B     		ldr	r3, .L710+4
 5628 033a 1B68     		ldr	r3, [r3]
 5629 033c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
2063:src/display.c **** 	      if (set_x_fract(z, res))
 5630              		.loc 1 2063 14 view .LVU1772
 5631 0340 9806     		lsls	r0, r3, #26
 5632 0342 7FF56CAE 		bpl	.L465
2064:src/display.c **** 		return;
 5633              		.loc 1 2064 8 is_stmt 1 view .LVU1773
2064:src/display.c **** 		return;
 5634              		.loc 1 2064 12 is_stmt 0 view .LVU1774
 5635 0346 2146     		mov	r1, r4
 5636 0348 3846     		mov	r0, r7
 5637 034a FFF7FEFF 		bl	set_x_fract
 5638              	.LVL612:
2064:src/display.c **** 		return;
 5639              		.loc 1 2064 11 view .LVU1775
 5640 034e 0028     		cmp	r0, #0
 5641 0350 3FF465AE 		beq	.L465
 5642 0354 DCE7     		b	.L461
 5643              	.L711:
 5644 0356 00BF     		.align	2
 5645              	.L710:
 5646 0358 00000000 		.word	StateWhileOn
 5647 035c 00000000 		.word	main_ram
 5648 0360 56555555 		.word	1431655766
 5649 0364 00000000 		.word	.LANCHOR1
 5650              	.LVL613:
 5651              	.L690:
2108:src/display.c **** 	  //  ALL mode: fill the display
 5652              		.loc 1 2108 38 discriminator 1 view .LVU1776
 5653 0368 019B     		ldr	r3, [sp, #4]
 5654 036a 1A68     		ldr	r2, [r3]
2108:src/display.c **** 	  //  ALL mode: fill the display
 5655              		.loc 1 2108 35 discriminator 1 view .LVU1777
 5656 036c 089B     		ldr	r3, [sp, #32]
2108:src/display.c **** 	  //  ALL mode: fill the display
 5657              		.loc 1 2108 23 discriminator 1 view .LVU1778
 5658 036e 9A42     		cmp	r2, r3
 5659 0370 11DD     		ble	.L484
2112:src/display.c **** 
 5660              		.loc 1 2112 4 is_stmt 1 view .LVU1779
2114:src/display.c **** 	  int orig_mode = mode;
 5661              		.loc 1 2114 23 is_stmt 0 view .LVU1780
 5662 0372 042D     		cmp	r5, #4
ARM GAS  /tmp/ccCvaEE3.s 			page 192


2112:src/display.c **** 
 5663              		.loc 1 2112 7 view .LVU1781
 5664 0374 0793     		str	r3, [sp, #28]
2114:src/display.c **** 	  int orig_mode = mode;
 5665              		.loc 1 2114 2 is_stmt 1 view .LVU1782
2114:src/display.c **** 	  int orig_mode = mode;
 5666              		.loc 1 2114 23 is_stmt 0 view .LVU1783
 5667 0376 12D0     		beq	.L485
 5668              	.L704:
2114:src/display.c **** 	  int orig_mode = mode;
 5669              		.loc 1 2114 43 discriminator 2 view .LVU1784
 5670 0378 052D     		cmp	r5, #5
 5671 037a 00F09881 		beq	.L486
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5672              		.loc 1 2044 6 view .LVU1785
 5673 037e 0023     		movs	r3, #0
 5674 0380 0493     		str	r3, [sp, #16]
 5675 0382 89E6     		b	.L590
 5676              	.LVL614:
 5677              	.L691:
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5678              		.loc 1 2139 17 is_stmt 1 discriminator 1 view .LVU1786
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5679              		.loc 1 2139 21 is_stmt 0 discriminator 1 view .LVU1787
 5680 0384 4421     		movs	r1, #68
 5681 0386 5846     		mov	r0, fp
 5682              	.LVL615:
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5683              		.loc 1 2139 21 discriminator 1 view .LVU1788
 5684 0388 FFF7FEFF 		bl	find_char
 5685              	.LVL616:
2140:src/display.c **** 	else {
 5686              		.loc 1 2140 2 is_stmt 1 discriminator 1 view .LVU1789
2140:src/display.c **** 	else {
 5687              		.loc 1 2140 5 is_stmt 0 discriminator 1 view .LVU1790
 5688 038c 0646     		mov	r6, r0
 5689 038e 0028     		cmp	r0, #0
 5690 0390 3FF49CAE 		beq	.L488
 5691 0394 92E6     		b	.L487
 5692              	.LVL617:
 5693              	.L484:
2110:src/display.c **** 	else
 5694              		.loc 1 2110 4 is_stmt 1 view .LVU1791
2110:src/display.c **** 	else
 5695              		.loc 1 2110 25 is_stmt 0 view .LVU1792
 5696 0396 013A     		subs	r2, r2, #1
2114:src/display.c **** 	  int orig_mode = mode;
 5697              		.loc 1 2114 23 view .LVU1793
 5698 0398 042D     		cmp	r5, #4
2110:src/display.c **** 	else
 5699              		.loc 1 2110 7 view .LVU1794
 5700 039a 0792     		str	r2, [sp, #28]
2114:src/display.c **** 	  int orig_mode = mode;
 5701              		.loc 1 2114 2 is_stmt 1 view .LVU1795
2114:src/display.c **** 	  int orig_mode = mode;
 5702              		.loc 1 2114 23 is_stmt 0 view .LVU1796
 5703 039c ECD1     		bne	.L704
ARM GAS  /tmp/ccCvaEE3.s 			page 193


 5704              	.L485:
 5705              	.LBB406:
2115:src/display.c **** 
 5706              		.loc 1 2115 4 is_stmt 1 view .LVU1797
 5707              	.LVL618:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5708              		.loc 1 2117 4 view .LVU1798
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5709              		.loc 1 2117 11 is_stmt 0 view .LVU1799
 5710 039e 2A46     		mov	r2, r5
 5711 03a0 07A9     		add	r1, sp, #28
 5712 03a2 3846     		mov	r0, r7
 5713 03a4 FFF7FEFF 		bl	std_round_fix
 5714              	.LVL619:
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5715              		.loc 1 2120 16 view .LVU1800
 5716 03a8 0123     		movs	r3, #1
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5717              		.loc 1 2117 11 view .LVU1801
 5718 03aa 0546     		mov	r5, r0
 5719              	.LVL620:
2118:src/display.c **** 	    // allow zeros to be trimmed
 5720              		.loc 1 2118 4 is_stmt 1 view .LVU1802
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5721              		.loc 1 2120 6 view .LVU1803
2121:src/display.c **** 	    dd = *display_digits - 1;
 5722              		.loc 1 2121 4 view .LVU1804
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5723              		.loc 1 2120 16 is_stmt 0 view .LVU1805
 5724 03ac 0493     		str	r3, [sp, #16]
 5725 03ae 73E6     		b	.L590
 5726              	.LVL621:
 5727              	.L697:
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5728              		.loc 1 2120 16 view .LVU1806
 5729              	.LBE406:
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5730              		.loc 1 2200 7 view .LVU1807
 5731 03b0 4846     		mov	r0, r9
 5732              	.LVL622:
2201:src/display.c **** 	    mantissa[0] = '1';
 5733              		.loc 1 2201 41 view .LVU1808
 5734 03b2 4FF03008 		mov	r8, #48
 5735              	.L516:
 5736              	.LVL623:
2201:src/display.c **** 	    mantissa[0] = '1';
 5737              		.loc 1 2201 47 is_stmt 1 discriminator 3 view .LVU1809
2201:src/display.c **** 	    mantissa[0] = '1';
 5738              		.loc 1 2201 36 discriminator 3 view .LVU1810
2201:src/display.c **** 	    mantissa[0] = '1';
 5739              		.loc 1 2201 41 is_stmt 0 discriminator 3 view .LVU1811
 5740 03b6 00F8018B 		strb	r8, [r0], #1
 5741              	.LVL624:
2201:src/display.c **** 	    mantissa[0] = '1';
 5742              		.loc 1 2201 25 is_stmt 1 discriminator 3 view .LVU1812
2201:src/display.c **** 	    mantissa[0] = '1';
 5743              		.loc 1 2201 6 is_stmt 0 discriminator 3 view .LVU1813
ARM GAS  /tmp/ccCvaEE3.s 			page 194


 5744 03ba 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5745 03be BCF1390F 		cmp	ip, #57
 5746 03c2 F8D0     		beq	.L516
 5747              	.LVL625:
 5748              	.L589:
2202:src/display.c **** 	    exp++;
 5749              		.loc 1 2202 6 is_stmt 1 view .LVU1814
2202:src/display.c **** 	    exp++;
 5750              		.loc 1 2202 18 is_stmt 0 view .LVU1815
 5751 03c4 3120     		movs	r0, #49
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5752              		.loc 1 2204 9 view .LVU1816
 5753 03c6 012D     		cmp	r5, #1
2203:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5754              		.loc 1 2203 9 view .LVU1817
 5755 03c8 06F10106 		add	r6, r6, #1
 5756              	.LVL626:
2202:src/display.c **** 	    exp++;
 5757              		.loc 1 2202 18 view .LVU1818
 5758 03cc 8DF85800 		strb	r0, [sp, #88]
2203:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5759              		.loc 1 2203 6 is_stmt 1 view .LVU1819
 5760              	.LVL627:
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5761              		.loc 1 2204 6 view .LVU1820
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5762              		.loc 1 2204 9 is_stmt 0 view .LVU1821
 5763 03d0 7FF4F5AE 		bne	.L685
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5764              		.loc 1 2204 27 discriminator 1 view .LVU1822
 5765 03d4 0298     		ldr	r0, [sp, #8]
 5766 03d6 8642     		cmp	r6, r0
 5767 03d8 C0F2DE80 		blt	.L518
2205:src/display.c **** 	      extra_digits = 0;
 5768              		.loc 1 2205 8 is_stmt 1 view .LVU1823
2205:src/display.c **** 	      extra_digits = 0;
 5769              		.loc 1 2205 28 is_stmt 0 view .LVU1824
 5770 03dc C04B     		ldr	r3, .L712
 5771              	.LVL628:
2205:src/display.c **** 	      extra_digits = 0;
 5772              		.loc 1 2205 28 view .LVU1825
 5773 03de 1B68     		ldr	r3, [r3]
 5774 03e0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2205:src/display.c **** 	      extra_digits = 0;
 5775              		.loc 1 2205 37 view .LVU1826
 5776 03e4 D906     		lsls	r1, r3, #27
 5777              	.LVL629:
2205:src/display.c **** 	      extra_digits = 0;
 5778              		.loc 1 2205 37 view .LVU1827
 5779 03e6 40F1E582 		bpl	.L705
 5780              	.LVL630:
2216:src/display.c **** 
 5781              		.loc 1 2216 2 is_stmt 1 view .LVU1828
 5782 03ea 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2216:src/display.c **** 
 5783              		.loc 1 2216 9 is_stmt 0 view .LVU1829
 5784 03ee 09EB0E03 		add	r3, r9, lr
ARM GAS  /tmp/ccCvaEE3.s 			page 195


 5785              	.LVL631:
2216:src/display.c **** 
 5786              		.loc 1 2216 45 is_stmt 1 view .LVU1830
2205:src/display.c **** 	      extra_digits = 0;
 5787              		.loc 1 2205 37 is_stmt 0 view .LVU1831
 5788 03f2 0325     		movs	r5, #3
2216:src/display.c **** 
 5789              		.loc 1 2216 2 view .LVU1832
 5790 03f4 0029     		cmp	r1, #0
 5791 03f6 7FF4E5AE 		bne	.L587
 5792              	.LVL632:
 5793              	.L524:
2318:src/display.c **** 	  case -1:
 5794              		.loc 1 2318 4 is_stmt 1 view .LVU1833
2318:src/display.c **** 	  case -1:
 5795              		.loc 1 2318 16 is_stmt 0 view .LVU1834
 5796 03fa BA4B     		ldr	r3, .L712+4
 5797 03fc 83FB0613 		smull	r1, r3, r3, r6
 5798 0400 A3EBE673 		sub	r3, r3, r6, asr #31
 5799 0404 03EB4303 		add	r3, r3, r3, lsl #1
 5800 0408 F31A     		subs	r3, r6, r3
 5801 040a 0233     		adds	r3, r3, #2
 5802 040c 042B     		cmp	r3, #4
 5803 040e 4FD8     		bhi	.L559
 5804 0410 DFE813F0 		tbh	[pc, r3, lsl #1]
 5805              	.L561:
 5806 0414 2C02     		.2byte	(.L562-.L561)/2
 5807 0416 1A02     		.2byte	(.L560-.L561)/2
 5808 0418 4E00     		.2byte	(.L559-.L561)/2
 5809 041a 2C02     		.2byte	(.L562-.L561)/2
 5810 041c 1A02     		.2byte	(.L560-.L561)/2
 5811              	.LVL633:
 5812              		.p2align 1
 5813              	.L530:
2227:src/display.c **** 	    case -1:
 5814              		.loc 1 2227 6 is_stmt 1 view .LVU1835
2227:src/display.c **** 	    case -1:
 5815              		.loc 1 2227 32 is_stmt 0 view .LVU1836
 5816 041e B048     		ldr	r0, .L712
2227:src/display.c **** 	    case -1:
 5817              		.loc 1 2227 19 view .LVU1837
 5818 0420 B049     		ldr	r1, .L712+4
2227:src/display.c **** 	    case -1:
 5819              		.loc 1 2227 32 view .LVU1838
 5820 0422 0068     		ldr	r0, [r0]
2227:src/display.c **** 	    case -1:
 5821              		.loc 1 2227 19 view .LVU1839
 5822 0424 81FB0651 		smull	r5, r1, r1, r6
2227:src/display.c **** 	    case -1:
 5823              		.loc 1 2227 32 view .LVU1840
 5824 0428 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2227:src/display.c **** 	    case -1:
 5825              		.loc 1 2227 19 view .LVU1841
 5826 042c A1EBE671 		sub	r1, r1, r6, asr #31
 5827 0430 01EB4101 		add	r1, r1, r1, lsl #1
 5828 0434 711A     		subs	r1, r6, r1
2227:src/display.c **** 	    case -1:
ARM GAS  /tmp/ccCvaEE3.s 			page 196


 5829              		.loc 1 2227 32 view .LVU1842
 5830 0436 C0F30010 		ubfx	r0, r0, #4, #1
2227:src/display.c **** 	    case -1:
 5831              		.loc 1 2227 24 view .LVU1843
 5832 043a 01FB00F1 		mul	r1, r1, r0
 5833 043e 0231     		adds	r1, r1, #2
 5834 0440 0429     		cmp	r1, #4
 5835 0442 00F27182 		bhi	.L604
 5836 0446 DFE811F0 		tbh	[pc, r1, lsl #1]
 5837              	.L534:
 5838 044a 4B02     		.2byte	(.L535-.L534)/2
 5839 044c 2002     		.2byte	(.L533-.L534)/2
 5840 044e 6F02     		.2byte	(.L604-.L534)/2
 5841 0450 4B02     		.2byte	(.L535-.L534)/2
 5842 0452 2002     		.2byte	(.L533-.L534)/2
 5843              	.LVL634:
 5844              		.p2align 1
 5845              	.L504:
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5846              		.loc 1 2183 4 is_stmt 1 view .LVU1844
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5847              		.loc 1 2183 7 is_stmt 0 view .LVU1845
 5848 0454 B342     		cmp	r3, r6
 5849 0456 03DD     		ble	.L507
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5850              		.loc 1 2183 45 discriminator 1 view .LVU1846
 5851 0458 5342     		rsbs	r3, r2, #0
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5852              		.loc 1 2183 36 discriminator 1 view .LVU1847
 5853 045a B342     		cmp	r3, r6
 5854 045c 40F30A82 		ble	.L508
 5855              	.L507:
2184:src/display.c **** 	  else {
 5856              		.loc 1 2184 6 is_stmt 1 view .LVU1848
2184:src/display.c **** 	  else {
 5857              		.loc 1 2184 26 is_stmt 0 view .LVU1849
 5858 0460 9F4B     		ldr	r3, .L712
 5859 0462 1B68     		ldr	r3, [r3]
 5860 0464 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2184:src/display.c **** 	  else {
 5861              		.loc 1 2184 35 view .LVU1850
 5862 0468 13F0100F 		tst	r3, #16
 5863 046c 14BF     		ite	ne
 5864 046e 0325     		movne	r5, #3
 5865              	.LVL635:
2184:src/display.c **** 	  else {
 5866              		.loc 1 2184 35 view .LVU1851
 5867 0470 0225     		moveq	r5, #2
 5868 0472 75E6     		b	.L686
 5869              	.LVL636:
 5870              	.L695:
2184:src/display.c **** 	  else {
 5871              		.loc 1 2184 35 view .LVU1852
 5872 0474 013E     		subs	r6, r6, #1
 5873 0476 08EB0602 		add	r2, r8, r6
 5874              	.L497:
2163:src/display.c **** 	    exp--;
ARM GAS  /tmp/ccCvaEE3.s 			page 197


 5875              		.loc 1 2163 4 is_stmt 1 discriminator 1 view .LVU1853
2164:src/display.c **** 	  while (*++q == '0');
 5876              		.loc 1 2164 6 discriminator 1 view .LVU1854
 5877 047a A2EB0806 		sub	r6, r2, r8
 5878              	.LVL637:
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5879              		.loc 1 2165 10 discriminator 1 view .LVU1855
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5880              		.loc 1 2165 11 is_stmt 0 discriminator 1 view .LVU1856
 5881 047e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5882              	.LVL638:
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5883              		.loc 1 2165 4 discriminator 1 view .LVU1857
 5884 0482 302B     		cmp	r3, #48
 5885 0484 F9D0     		beq	.L497
2166:src/display.c **** 	    *p++ = *q++;
 5886              		.loc 1 2166 10 is_stmt 1 view .LVU1858
 5887 0486 A3F13002 		sub	r2, r3, #48
 5888 048a 092A     		cmp	r2, #9
 5889 048c 3FF661AE 		bhi	.L498
2029:src/display.c **** 	char *r;
 5890              		.loc 1 2029 8 is_stmt 0 view .LVU1859
 5891 0490 4A46     		mov	r2, r9
 5892              	.LVL639:
 5893              	.L499:
2167:src/display.c **** 	} else {
 5894              		.loc 1 2167 6 is_stmt 1 view .LVU1860
2167:src/display.c **** 	} else {
 5895              		.loc 1 2167 11 is_stmt 0 view .LVU1861
 5896 0492 02F8013B 		strb	r3, [r2], #1
 5897              	.LVL640:
2166:src/display.c **** 	    *p++ = *q++;
 5898              		.loc 1 2166 10 is_stmt 1 view .LVU1862
2166:src/display.c **** 	    *p++ = *q++;
 5899              		.loc 1 2166 11 is_stmt 0 view .LVU1863
 5900 0496 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2166:src/display.c **** 	    *p++ = *q++;
 5901              		.loc 1 2166 10 view .LVU1864
 5902 049a A3F13001 		sub	r1, r3, #48
 5903 049e 0929     		cmp	r1, #9
 5904 04a0 F7D9     		bls	.L499
 5905 04a2 56E6     		b	.L498
 5906              	.LVL641:
 5907              	.L693:
2157:src/display.c **** 	  q++;
 5908              		.loc 1 2157 4 is_stmt 1 view .LVU1865
2158:src/display.c **** 	} else if (*q == '+')
 5909              		.loc 1 2158 4 view .LVU1866
2157:src/display.c **** 	  q++;
 5910              		.loc 1 2157 13 is_stmt 0 view .LVU1867
 5911 04a4 0122     		movs	r2, #1
 5912 04a6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5913 04aa 0392     		str	r2, [sp, #12]
2158:src/display.c **** 	} else if (*q == '+')
 5914              		.loc 1 2158 5 view .LVU1868
 5915 04ac 9044     		add	r8, r8, r2
 5916              	.LVL642:
ARM GAS  /tmp/ccCvaEE3.s 			page 198


2158:src/display.c **** 	} else if (*q == '+')
 5917              		.loc 1 2158 5 view .LVU1869
 5918 04ae 23E6     		b	.L493
 5919              	.LVL643:
 5920              	.L559:
2158:src/display.c **** 	} else if (*q == '+')
 5921              		.loc 1 2158 5 view .LVU1870
 5922 04b0 079A     		ldr	r2, [sp, #28]
2318:src/display.c **** 	  case -1:
 5923              		.loc 1 2318 16 view .LVU1871
 5924 04b2 0125     		movs	r5, #1
2023:src/display.c **** 	int odig = 0;
 5925              		.loc 1 2023 15 view .LVU1872
 5926 04b4 5946     		mov	r1, fp
 5927              	.LVL644:
 5928              	.L527:
2332:src/display.c **** 	  };
 5929              		.loc 1 2332 6 is_stmt 1 view .LVU1873
2333:src/display.c **** 	  // Falling through
 5930              		.loc 1 2333 5 view .LVU1874
2337:src/display.c **** 	  odig++;
 5931              		.loc 1 2337 4 view .LVU1875
2337:src/display.c **** 	  odig++;
 5932              		.loc 1 2337 15 is_stmt 0 view .LVU1876
 5933 04b6 4B46     		mov	r3, r9
 5934              	.LVL645:
2337:src/display.c **** 	  odig++;
 5935              		.loc 1 2337 11 view .LVU1877
 5936 04b8 8846     		mov	r8, r1
 5937 04ba 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5938              	.LVL646:
2337:src/display.c **** 	  odig++;
 5939              		.loc 1 2337 11 view .LVU1878
 5940 04be 08F8020B 		strb	r0, [r8], #2
2338:src/display.c **** 	  *obp++ = '.';
 5941              		.loc 1 2338 4 is_stmt 1 view .LVU1879
2339:src/display.c **** 	  dd--;
 5942              		.loc 1 2339 4 view .LVU1880
 5943              	.LVL647:
2339:src/display.c **** 	  dd--;
 5944              		.loc 1 2339 11 is_stmt 0 view .LVU1881
 5945 04c2 4FF02E0C 		mov	ip, #46
2341:src/display.c **** 	    *obp++ = *p++;
 5946              		.loc 1 2341 13 view .LVU1882
 5947 04c6 901E     		subs	r0, r2, #2
2341:src/display.c **** 	    *obp++ = *p++;
 5948              		.loc 1 2341 10 view .LVU1883
 5949 04c8 002A     		cmp	r2, #0
2339:src/display.c **** 	  dd--;
 5950              		.loc 1 2339 11 view .LVU1884
 5951 04ca 81F801C0 		strb	ip, [r1, #1]
2340:src/display.c **** 	  while (dd-- >= 0) {
 5952              		.loc 1 2340 4 is_stmt 1 view .LVU1885
2341:src/display.c **** 	    *obp++ = *p++;
 5953              		.loc 1 2341 4 view .LVU1886
2341:src/display.c **** 	    *obp++ = *p++;
 5954              		.loc 1 2341 10 view .LVU1887
ARM GAS  /tmp/ccCvaEE3.s 			page 199


2341:src/display.c **** 	    *obp++ = *p++;
 5955              		.loc 1 2341 13 is_stmt 0 view .LVU1888
 5956 04ce 0790     		str	r0, [sp, #28]
2341:src/display.c **** 	    *obp++ = *p++;
 5957              		.loc 1 2341 10 view .LVU1889
 5958 04d0 40F32D82 		ble	.L605
2341:src/display.c **** 	    *obp++ = *p++;
 5959              		.loc 1 2341 10 view .LVU1890
 5960 04d4 501C     		adds	r0, r2, #1
 5961 04d6 0131     		adds	r1, r1, #1
 5962 04d8 8144     		add	r9, r9, r0
 5963              	.LVL648:
 5964              	.L565:
2342:src/display.c **** 	    odig++;
 5965              		.loc 1 2342 6 is_stmt 1 view .LVU1891
2342:src/display.c **** 	    odig++;
 5966              		.loc 1 2342 13 is_stmt 0 view .LVU1892
 5967 04da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5968              	.LVL649:
2342:src/display.c **** 	    odig++;
 5969              		.loc 1 2342 13 view .LVU1893
 5970 04de 01F8010F 		strb	r0, [r1, #1]!
2343:src/display.c **** 	  }
 5971              		.loc 1 2343 6 is_stmt 1 view .LVU1894
2341:src/display.c **** 	    *obp++ = *p++;
 5972              		.loc 1 2341 10 view .LVU1895
 5973 04e2 4B45     		cmp	r3, r9
 5974 04e4 F9D1     		bne	.L565
 5975 04e6 6FF00103 		mvn	r3, #1
 5976              	.LVL650:
2341:src/display.c **** 	    *obp++ = *p++;
 5977              		.loc 1 2341 10 is_stmt 0 view .LVU1896
 5978 04ea 9044     		add	r8, r8, r2
 5979 04ec 1544     		add	r5, r5, r2
 5980 04ee 0793     		str	r3, [sp, #28]
2345:src/display.c **** 	}
 5981              		.loc 1 2345 13 view .LVU1897
 5982 04f0 4FF0010A 		mov	r10, #1
 5983              	.L537:
 5984              	.LVL651:
2348:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5985              		.loc 1 2348 2 is_stmt 1 view .LVU1898
2348:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5986              		.loc 1 2348 5 is_stmt 0 view .LVU1899
 5987 04f4 049B     		ldr	r3, [sp, #16]
 5988 04f6 002B     		cmp	r3, #0
 5989 04f8 3FF4C9AE 		beq	.L566
2349:src/display.c **** 	    obp--;
 5990              		.loc 1 2349 10 is_stmt 1 view .LVU1900
 5991 04fc D845     		cmp	r8, fp
 5992 04fe 7FF6C6AE 		bls	.L566
 5993 0502 4346     		mov	r3, r8
 5994 0504 04E0     		b	.L567
 5995              	.LVL652:
 5996              	.L568:
2349:src/display.c **** 	    obp--;
 5997              		.loc 1 2349 10 is_stmt 0 view .LVU1901
ARM GAS  /tmp/ccCvaEE3.s 			page 200


 5998 0506 9B45     		cmp	fp, r3
2351:src/display.c **** 	  }
 5999              		.loc 1 2351 10 view .LVU1902
 6000 0508 05F1FF35 		add	r5, r5, #-1
 6001              	.LVL653:
2349:src/display.c **** 	    obp--;
 6002              		.loc 1 2349 10 is_stmt 1 view .LVU1903
 6003 050c 3FF4BEAE 		beq	.L607
 6004              	.LVL654:
 6005              	.L567:
2350:src/display.c **** 	    odig--;
 6006              		.loc 1 2350 6 discriminator 1 view .LVU1904
 6007 0510 9846     		mov	r8, r3
 6008              	.LVL655:
2350:src/display.c **** 	    odig--;
 6009              		.loc 1 2350 6 is_stmt 0 discriminator 1 view .LVU1905
 6010 0512 013B     		subs	r3, r3, #1
 6011              	.LVL656:
2351:src/display.c **** 	  }
 6012              		.loc 1 2351 6 is_stmt 1 discriminator 1 view .LVU1906
2349:src/display.c **** 	    obp--;
 6013              		.loc 1 2349 19 is_stmt 0 discriminator 1 view .LVU1907
 6014 0514 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 6015 0518 302A     		cmp	r2, #48
 6016 051a F4D0     		beq	.L568
2349:src/display.c **** 	    obp--;
 6017              		.loc 1 2349 19 discriminator 1 view .LVU1908
 6018 051c B7E6     		b	.L566
 6019              	.LVL657:
 6020              	.L699:
2377:src/display.c **** 	  } else if (c == ',') {
 6021              		.loc 1 2377 6 is_stmt 1 view .LVU1909
2377:src/display.c **** 	  } else if (c == ',') {
 6022              		.loc 1 2377 12 is_stmt 0 view .LVU1910
 6023 051e 2246     		mov	r2, r4
 6024              	.LVL658:
2377:src/display.c **** 	  } else if (c == ',') {
 6025              		.loc 1 2377 12 view .LVU1911
 6026 0520 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 6027 0524 A7F10900 		sub	r0, r7, #9
 6028 0528 FFF7FEFF 		bl	set_decimal
 6029              	.LVL659:
 6030 052c 0446     		mov	r4, r0
 6031              	.LVL660:
 6032              	.L577:
2375:src/display.c **** 	  if (c == '.') {
 6033              		.loc 1 2375 53 is_stmt 1 view .LVU1912
2375:src/display.c **** 	  if (c == '.') {
 6034              		.loc 1 2375 12 view .LVU1913
2375:src/display.c **** 	  if (c == '.') {
 6035              		.loc 1 2375 18 is_stmt 0 view .LVU1914
 6036 052e 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 6037              	.LVL661:
2375:src/display.c **** 	  if (c == '.') {
 6038              		.loc 1 2375 2 view .LVU1915
 6039 0532 002A     		cmp	r2, #0
 6040 0534 7FF4D0AE 		bne	.L583
ARM GAS  /tmp/ccCvaEE3.s 			page 201


2395:src/display.c **** 	  set_exp(exp, 0, res);
 6041              		.loc 1 2395 2 is_stmt 1 view .LVU1916
2395:src/display.c **** 	  set_exp(exp, 0, res);
 6042              		.loc 1 2395 5 is_stmt 0 view .LVU1917
 6043 0538 BAF1000F 		cmp	r10, #0
 6044 053c 3FF4E1AE 		beq	.L584
 6045              	.LVL662:
 6046              	.L701:
2396:src/display.c **** #endif
 6047              		.loc 1 2396 4 is_stmt 1 view .LVU1918
 6048 0540 3046     		mov	r0, r6
 6049 0542 2246     		mov	r2, r4
 6050              	.LVL663:
2396:src/display.c **** #endif
 6051              		.loc 1 2396 4 is_stmt 0 view .LVU1919
 6052 0544 0021     		movs	r1, #0
 6053 0546 FFF7FEFF 		bl	set_exp
 6054              	.LVL664:
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6055              		.loc 1 2398 2 is_stmt 1 view .LVU1920
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6056              		.loc 1 2398 5 is_stmt 0 view .LVU1921
 6057 054a 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 6058 054e 2E2B     		cmp	r3, #46
 6059 0550 7FF4DCAE 		bne	.L585
 6060              	.L702:
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6061              		.loc 1 2398 21 discriminator 1 view .LVU1922
 6062 0554 002C     		cmp	r4, #0
 6063 0556 7FF4D9AE 		bne	.L585
2399:src/display.c **** 	*display_digits = odig;
 6064              		.loc 1 2399 4 is_stmt 1 view .LVU1923
2399:src/display.c **** 	*display_digits = odig;
 6065              		.loc 1 2399 33 is_stmt 0 view .LVU1924
 6066 055a 019B     		ldr	r3, [sp, #4]
 6067 055c 1868     		ldr	r0, [r3]
2399:src/display.c **** 	*display_digits = odig;
 6068              		.loc 1 2399 4 view .LVU1925
 6069 055e 624B     		ldr	r3, .L712+8
2399:src/display.c **** 	*display_digits = odig;
 6070              		.loc 1 2399 33 view .LVU1926
 6071 0560 0138     		subs	r0, r0, #1
2399:src/display.c **** 	*display_digits = odig;
 6072              		.loc 1 2399 4 view .LVU1927
 6073 0562 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6074 0564 2246     		mov	r2, r4
 6075 0566 00EBC000 		add	r0, r0, r0, lsl #3
 6076 056a FFF7FEFF 		bl	set_decimal
 6077              	.LVL665:
 6078 056e CDE6     		b	.L585
 6079              	.LVL666:
 6080              	.L700:
2379:src/display.c **** 	  } else {
 6081              		.loc 1 2379 6 is_stmt 1 view .LVU1928
2379:src/display.c **** 	  } else {
 6082              		.loc 1 2379 12 is_stmt 0 view .LVU1929
 6083 0570 5E4B     		ldr	r3, .L712+12
ARM GAS  /tmp/ccCvaEE3.s 			page 202


 6084 0572 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6085              	.LVL667:
 6086              	.LBB407:
 6087              	.LBI407:
 375:src/display.c ****   if (sep == SEP_NONE)
 6088              		.loc 1 375 14 is_stmt 1 view .LVU1930
 6089              	.LBB408:
 376:src/display.c ****     return res;
 6090              		.loc 1 376 3 view .LVU1931
 376:src/display.c ****     return res;
 6091              		.loc 1 376 6 is_stmt 0 view .LVU1932
 6092 0574 0029     		cmp	r1, #0
 6093 0576 DAD0     		beq	.L577
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6094              		.loc 1 378 3 is_stmt 1 view .LVU1933
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6095              		.loc 1 378 6 is_stmt 0 view .LVU1934
 6096 0578 002C     		cmp	r4, #0
 6097 057a 00F0DB81 		beq	.L579
 379:src/display.c ****     else *res++ = '.';
 6098              		.loc 1 379 5 is_stmt 1 view .LVU1935
 379:src/display.c ****     else *res++ = '.';
 6099              		.loc 1 379 8 is_stmt 0 view .LVU1936
 6100 057e 0129     		cmp	r1, #1
 379:src/display.c ****     else *res++ = '.';
 6101              		.loc 1 379 27 is_stmt 1 view .LVU1937
 6102              	.LVL668:
 380:src/display.c ****   } else {
 6103              		.loc 1 380 17 is_stmt 0 view .LVU1938
 6104 0580 16BF     		itet	ne
 6105 0582 2E23     		movne	r3, #46
 379:src/display.c ****     else *res++ = '.';
 6106              		.loc 1 379 34 view .LVU1939
 6107 0584 04F8012B 		strbeq	r2, [r4], #1
 6108              	.LVL669:
 380:src/display.c ****   } else {
 6109              		.loc 1 380 10 is_stmt 1 view .LVU1940
 380:src/display.c ****   } else {
 6110              		.loc 1 380 17 is_stmt 0 view .LVU1941
 6111 0588 04F8013B 		strbne	r3, [r4], #1
 6112              	.LVL670:
 380:src/display.c ****   } else {
 6113              		.loc 1 380 17 view .LVU1942
 6114 058c CFE7     		b	.L577
 6115              	.LVL671:
 6116              	.L581:
 380:src/display.c ****   } else {
 6117              		.loc 1 380 17 view .LVU1943
 6118              	.LBE408:
 6119              	.LBE407:
 6120              	.LBB410:
 6121              	.LBB405:
 417:src/display.c ****   return res;
 6122              		.loc 1 417 8 is_stmt 1 view .LVU1944
 6123 058e 1146     		mov	r1, r2
 6124 0590 3846     		mov	r0, r7
 6125 0592 FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccCvaEE3.s 			page 203


 6126              	.LVL672:
 417:src/display.c ****   return res;
 6127              		.loc 1 417 8 is_stmt 0 view .LVU1945
 6128 0596 AAE6     		b	.L582
 6129              	.LVL673:
 6130              	.L518:
 417:src/display.c ****   return res;
 6131              		.loc 1 417 8 view .LVU1946
 6132              	.LBE405:
 6133              	.LBE410:
2216:src/display.c **** 
 6134              		.loc 1 2216 2 is_stmt 1 view .LVU1947
2216:src/display.c **** 
 6135              		.loc 1 2216 45 view .LVU1948
2216:src/display.c **** 
 6136              		.loc 1 2216 2 is_stmt 0 view .LVU1949
 6137 0598 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6138 059c 0029     		cmp	r1, #0
 6139 059e 7FF411AE 		bne	.L587
 6140              	.LVL674:
 6141              	.L525:
2281:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6142              		.loc 1 2281 4 is_stmt 1 view .LVU1950
2282:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6143              		.loc 1 2282 4 view .LVU1951
2282:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6144              		.loc 1 2282 7 is_stmt 0 view .LVU1952
 6145 05a2 002E     		cmp	r6, #0
 6146 05a4 C0F22181 		blt	.L548
2282:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6147              		.loc 1 2282 7 view .LVU1953
 6148 05a8 731C     		adds	r3, r6, #1
2284:src/display.c **** 		*obp++ = ',';
 6149              		.loc 1 2284 31 view .LVU1954
 6150 05aa DFF838E1 		ldr	lr, .L712+4
 6151 05ae 0593     		str	r3, [sp, #20]
 6152 05b0 09EB030C 		add	ip, r9, r3
2218:src/display.c **** 	switch (mode) {
 6153              		.loc 1 2218 4 view .LVU1955
 6154 05b4 4D46     		mov	r5, r9
2023:src/display.c **** 	int odig = 0;
 6155              		.loc 1 2023 15 view .LVU1956
 6156 05b6 5846     		mov	r0, fp
 6157 05b8 05E0     		b	.L549
 6158              	.LVL675:
 6159              	.L552:
2285:src/display.c **** 	      *obp++ = *p++;
 6160              		.loc 1 2285 3 is_stmt 1 view .LVU1957
2284:src/display.c **** 		*obp++ = ',';
 6161              		.loc 1 2284 18 is_stmt 0 view .LVU1958
 6162 05ba 0229     		cmp	r1, #2
2285:src/display.c **** 	      *obp++ = *p++;
 6163              		.loc 1 2285 10 view .LVU1959
 6164 05bc 05BF     		ittet	eq
 6165 05be 2C23     		moveq	r3, #44
 6166 05c0 4370     		strbeq	r3, [r0, #1]
2286:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccCvaEE3.s 			page 204


 6167              		.loc 1 2286 12 view .LVU1960
 6168 05c2 0130     		addne	r0, r0, #1
 6169              	.LVL676:
2285:src/display.c **** 	      *obp++ = *p++;
 6170              		.loc 1 2285 7 view .LVU1961
 6171 05c4 0230     		addeq	r0, r0, #2
 6172              	.LVL677:
 6173              	.L549:
2286:src/display.c **** 	      odig++;
 6174              		.loc 1 2286 8 is_stmt 1 discriminator 2 view .LVU1962
2286:src/display.c **** 	      odig++;
 6175              		.loc 1 2286 15 is_stmt 0 discriminator 2 view .LVU1963
 6176 05c6 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6177              	.LVL678:
2284:src/display.c **** 		*obp++ = ',';
 6178              		.loc 1 2284 8 is_stmt 1 discriminator 2 view .LVU1964
2286:src/display.c **** 	      odig++;
 6179              		.loc 1 2286 15 is_stmt 0 discriminator 2 view .LVU1965
 6180 05ca 0370     		strb	r3, [r0]
2287:src/display.c **** 	    }
 6181              		.loc 1 2287 8 is_stmt 1 discriminator 2 view .LVU1966
 6182              	.LVL679:
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6183              		.loc 1 2283 24 discriminator 2 view .LVU1967
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6184              		.loc 1 2283 16 discriminator 2 view .LVU1968
2284:src/display.c **** 		*obp++ = ',';
 6185              		.loc 1 2284 31 is_stmt 0 discriminator 2 view .LVU1969
 6186 05cc A9EB0503 		sub	r3, r9, r5
 6187 05d0 3344     		add	r3, r3, r6
 6188 05d2 8EFB0381 		smull	r8, r1, lr, r3
 6189 05d6 A1EBE371 		sub	r1, r1, r3, asr #31
 6190 05da 01EB4101 		add	r1, r1, r1, lsl #1
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6191              		.loc 1 2283 6 discriminator 2 view .LVU1970
 6192 05de AC45     		cmp	ip, r5
2284:src/display.c **** 		*obp++ = ',';
 6193              		.loc 1 2284 31 discriminator 2 view .LVU1971
 6194 05e0 A3EB0101 		sub	r1, r3, r1
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6195              		.loc 1 2283 6 discriminator 2 view .LVU1972
 6196 05e4 E9D1     		bne	.L552
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6197              		.loc 1 2289 13 view .LVU1973
 6198 05e6 2E23     		movs	r3, #46
2290:src/display.c **** 	      *obp++ = *p++;
 6199              		.loc 1 2290 6 view .LVU1974
 6200 05e8 002A     		cmp	r2, #0
 6201 05ea 059D     		ldr	r5, [sp, #20]
 6202              	.LVL680:
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6203              		.loc 1 2289 6 is_stmt 1 view .LVU1975
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6204              		.loc 1 2289 13 is_stmt 0 view .LVU1976
 6205 05ec 4370     		strb	r3, [r0, #1]
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6206              		.loc 1 2289 10 view .LVU1977
ARM GAS  /tmp/ccCvaEE3.s 			page 205


 6207 05ee 00F10208 		add	r8, r0, #2
 6208              	.LVL681:
2290:src/display.c **** 	      *obp++ = *p++;
 6209              		.loc 1 2290 6 is_stmt 1 view .LVU1978
2290:src/display.c **** 	      *obp++ = *p++;
 6210              		.loc 1 2290 16 view .LVU1979
2290:src/display.c **** 	      *obp++ = *p++;
 6211              		.loc 1 2290 6 is_stmt 0 view .LVU1980
 6212 05f2 7FF77FAF 		ble	.L537
 6213 05f6 0130     		adds	r0, r0, #1
 6214 05f8 0CEB0201 		add	r1, ip, r2
 6215              	.LVL682:
 6216              	.L553:
2291:src/display.c **** 	      odig++;
 6217              		.loc 1 2291 8 is_stmt 1 discriminator 4 view .LVU1981
2291:src/display.c **** 	      odig++;
 6218              		.loc 1 2291 15 is_stmt 0 discriminator 4 view .LVU1982
 6219 05fc 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6220              	.LVL683:
2291:src/display.c **** 	      odig++;
 6221              		.loc 1 2291 15 discriminator 4 view .LVU1983
 6222 0600 00F8013F 		strb	r3, [r0, #1]!
2292:src/display.c **** 	    }
 6223              		.loc 1 2292 8 is_stmt 1 discriminator 4 view .LVU1984
2290:src/display.c **** 	      *obp++ = *p++;
 6224              		.loc 1 2290 43 discriminator 4 view .LVU1985
2290:src/display.c **** 	      *obp++ = *p++;
 6225              		.loc 1 2290 16 discriminator 4 view .LVU1986
2290:src/display.c **** 	      *obp++ = *p++;
 6226              		.loc 1 2290 6 is_stmt 0 discriminator 4 view .LVU1987
 6227 0604 8C45     		cmp	ip, r1
 6228 0606 F9D1     		bne	.L553
 6229 0608 059B     		ldr	r3, [sp, #20]
 6230 060a 1344     		add	r3, r3, r2
 6231 060c 9044     		add	r8, r8, r2
 6232              	.LVL684:
2290:src/display.c **** 	      *obp++ = *p++;
 6233              		.loc 1 2290 6 discriminator 4 view .LVU1988
 6234 060e 1D46     		mov	r5, r3
 6235 0610 70E7     		b	.L537
 6236              	.LVL685:
 6237              	.L687:
2086:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6238              		.loc 1 2086 4 is_stmt 1 view .LVU1989
 6239 0612 374A     		ldr	r2, .L712+16
 6240 0614 3946     		mov	r1, r7
 6241 0616 3846     		mov	r0, r7
 6242 0618 FFF7FEFF 		bl	decNumberNormalize
 6243              	.LVL686:
2087:src/display.c **** 	  z->exponent = 0;
 6244              		.loc 1 2087 4 view .LVU1990
2087:src/display.c **** 	  z->exponent = 0;
 6245              		.loc 1 2087 22 is_stmt 0 view .LVU1991
 6246 061c D7E90023 		ldrd	r2, r3, [r7]
 6247 0620 03EB0208 		add	r8, r3, r2
2088:src/display.c **** 	}
 6248              		.loc 1 2088 16 view .LVU1992
ARM GAS  /tmp/ccCvaEE3.s 			page 206


 6249 0624 C7F804A0 		str	r10, [r7, #4]
2087:src/display.c **** 	  z->exponent = 0;
 6250              		.loc 1 2087 8 view .LVU1993
 6251 0628 08F1FF38 		add	r8, r8, #-1
 6252              	.LVL687:
2088:src/display.c **** 	}
 6253              		.loc 1 2088 4 is_stmt 1 view .LVU1994
 6254 062c 06E5     		b	.L468
 6255              	.LVL688:
 6256              	.L696:
2176:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6257              		.loc 1 2176 6 view .LVU1995
2177:src/display.c **** 	      *p++ = *q++;
 6258              		.loc 1 2177 13 is_stmt 0 view .LVU1996
 6259 062e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2177:src/display.c **** 	      *p++ = *q++;
 6260              		.loc 1 2177 12 view .LVU1997
 6261 0632 A3F13002 		sub	r2, r3, #48
 6262 0636 092A     		cmp	r2, #9
2176:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6263              		.loc 1 2176 7 view .LVU1998
 6264 0638 08F10108 		add	r8, r8, #1
 6265              	.LVL689:
2177:src/display.c **** 	      *p++ = *q++;
 6266              		.loc 1 2177 6 is_stmt 1 view .LVU1999
2177:src/display.c **** 	      *p++ = *q++;
 6267              		.loc 1 2177 12 view .LVU2000
 6268 063c 3FF689AD 		bhi	.L498
 6269              	.LVL690:
 6270              	.L503:
2178:src/display.c **** 	  }
 6271              		.loc 1 2178 8 view .LVU2001
2178:src/display.c **** 	  }
 6272              		.loc 1 2178 13 is_stmt 0 view .LVU2002
 6273 0640 01F8013B 		strb	r3, [r1], #1
 6274              	.LVL691:
2177:src/display.c **** 	      *p++ = *q++;
 6275              		.loc 1 2177 12 is_stmt 1 view .LVU2003
2177:src/display.c **** 	      *p++ = *q++;
 6276              		.loc 1 2177 13 is_stmt 0 view .LVU2004
 6277 0644 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2177:src/display.c **** 	      *p++ = *q++;
 6278              		.loc 1 2177 12 view .LVU2005
 6279 0648 A3F13002 		sub	r2, r3, #48
 6280 064c 092A     		cmp	r2, #9
 6281 064e F7D9     		bls	.L503
 6282 0650 7FE5     		b	.L498
 6283              	.LVL692:
 6284              	.L694:
2160:src/display.c **** 	for (; *q == '0'; q++);
 6285              		.loc 1 2160 4 is_stmt 1 view .LVU2006
2043:src/display.c **** 	int trimzeros = 0;
 6286              		.loc 1 2043 6 is_stmt 0 view .LVU2007
 6287 0652 0022     		movs	r2, #0
 6288 0654 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6289 0658 0392     		str	r2, [sp, #12]
2160:src/display.c **** 	for (; *q == '0'; q++);
ARM GAS  /tmp/ccCvaEE3.s 			page 207


 6290              		.loc 1 2160 5 view .LVU2008
 6291 065a 08F10108 		add	r8, r8, #1
 6292              	.LVL693:
2160:src/display.c **** 	for (; *q == '0'; q++);
 6293              		.loc 1 2160 5 view .LVU2009
 6294 065e 4BE5     		b	.L493
 6295              	.LVL694:
 6296              	.L688:
2094:src/display.c **** 	    x[0] = '-';
 6297              		.loc 1 2094 34 discriminator 1 view .LVU2010
 6298 0660 6B20     		movs	r0, #107
 6299 0662 FFF7FEFF 		bl	get_user_flag
 6300              	.LVL695:
2094:src/display.c **** 	    x[0] = '-';
 6301              		.loc 1 2094 31 discriminator 1 view .LVU2011
 6302 0666 0028     		cmp	r0, #0
 6303 0668 3FF4FAAC 		beq	.L470
2095:src/display.c **** 	    x[1] = '0';
 6304              		.loc 1 2095 6 is_stmt 1 view .LVU2012
2096:src/display.c **** 	  } else
 6305              		.loc 1 2096 6 view .LVU2013
2095:src/display.c **** 	    x[1] = '0';
 6306              		.loc 1 2095 11 is_stmt 0 view .LVU2014
 6307 066c 43F22D03 		movw	r3, #12333
 6308 0670 ADF82430 		strh	r3, [sp, #36]	@ movhi
2096:src/display.c **** 	  } else
 6309              		.loc 1 2096 11 view .LVU2015
 6310 0674 F7E4     		b	.L471
 6311              	.LVL696:
 6312              	.L692:
2153:src/display.c **** 	  CLR_MANT_SIGN;
 6313              		.loc 1 2153 4 is_stmt 1 view .LVU2016
 6314              	.LBB411:
 6315              	.LBI411:
 322:src/display.c **** {
 6316              		.loc 1 322 13 view .LVU2017
 6317              	.LBB412:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6318              		.loc 1 324 3 view .LVU2018
 325:src/display.c **** }
 6319              		.loc 1 325 3 view .LVU2019
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6320              		.loc 1 324 27 is_stmt 0 view .LVU2020
 6321 0676 1F4B     		ldr	r3, .L712+20
 6322 0678 2022     		movs	r2, #32
 325:src/display.c **** }
 6323              		.loc 1 325 3 view .LVU2021
 6324 067a 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6325              		.loc 1 324 27 view .LVU2022
 6326 067c 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 6327              		.loc 1 325 3 view .LVU2023
 6328 067e FFF7FEFF 		bl	clr_dot
 6329              	.LVL697:
 6330              	.LBE412:
 6331              	.LBE411:
ARM GAS  /tmp/ccCvaEE3.s 			page 208


2154:src/display.c **** 	}
 6332              		.loc 1 2154 4 is_stmt 1 view .LVU2024
 6333              	.LBB413:
 6334              	.LBI413:
 310:src/display.c **** {
 6335              		.loc 1 310 13 view .LVU2025
 6336              	.LBB414:
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6337              		.loc 1 312 3 view .LVU2026
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6338              		.loc 1 312 25 is_stmt 0 view .LVU2027
 6339 0682 1D4B     		ldr	r3, .L712+24
 6340 0684 2022     		movs	r2, #32
 313:src/display.c **** }
 6341              		.loc 1 313 3 view .LVU2028
 6342 0686 8120     		movs	r0, #129
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6343              		.loc 1 312 25 view .LVU2029
 6344 0688 1A70     		strb	r2, [r3]
 313:src/display.c **** }
 6345              		.loc 1 313 3 is_stmt 1 view .LVU2030
 6346 068a FFF7FEFF 		bl	clr_dot
 6347              	.LVL698:
 314:src/display.c **** 
 6348              		.loc 1 314 1 is_stmt 0 view .LVU2031
 6349 068e 29E5     		b	.L491
 6350              	.LVL699:
 6351              	.L698:
 314:src/display.c **** 
 6352              		.loc 1 314 1 view .LVU2032
 6353              	.LBE414:
 6354              	.LBE413:
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6355              		.loc 1 2354 72 discriminator 2 view .LVU2033
 6356 0690 06F2E732 		addw	r2, r6, #999
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6357              		.loc 1 2354 58 discriminator 2 view .LVU2034
 6358 0694 40F2CE73 		movw	r3, #1998
 6359 0698 9A42     		cmp	r2, r3
 6360 069a 7FF6FEAD 		bls	.L569
2355:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6361              		.loc 1 2355 4 is_stmt 1 view .LVU2035
2355:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6362              		.loc 1 2355 20 is_stmt 0 view .LVU2036
 6363 069e 019A     		ldr	r2, [sp, #4]
 6364 06a0 0A23     		movs	r3, #10
2356:src/display.c **** 	  return;
 6365              		.loc 1 2356 4 view .LVU2037
 6366 06a2 2146     		mov	r1, r4
 6367 06a4 3846     		mov	r0, r7
2355:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6368              		.loc 1 2355 20 view .LVU2038
 6369 06a6 1360     		str	r3, [r2]
2356:src/display.c **** 	  return;
 6370              		.loc 1 2356 4 is_stmt 1 view .LVU2039
 6371 06a8 FFF7FEFF 		bl	set_x_dn
 6372              	.LVL700:
ARM GAS  /tmp/ccCvaEE3.s 			page 209


2357:src/display.c **** 	}
 6373              		.loc 1 2357 4 view .LVU2040
 6374 06ac 30E6     		b	.L461
 6375              	.LVL701:
 6376              	.L486:
 6377              	.LBB415:
2115:src/display.c **** 
 6378              		.loc 1 2115 4 view .LVU2041
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6379              		.loc 1 2117 4 view .LVU2042
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6380              		.loc 1 2117 11 is_stmt 0 view .LVU2043
 6381 06ae 2A46     		mov	r2, r5
 6382 06b0 07A9     		add	r1, sp, #28
 6383 06b2 3846     		mov	r0, r7
 6384 06b4 FFF7FEFF 		bl	std_round_fix
 6385              	.LVL702:
 6386              	.LBE415:
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6387              		.loc 1 2044 6 view .LVU2044
 6388 06b8 0023     		movs	r3, #0
 6389              	.LBB416:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6390              		.loc 1 2117 11 view .LVU2045
 6391 06ba 0546     		mov	r5, r0
 6392              	.LVL703:
2118:src/display.c **** 	    // allow zeros to be trimmed
 6393              		.loc 1 2118 4 is_stmt 1 view .LVU2046
 6394              	.LBE416:
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6395              		.loc 1 2044 6 is_stmt 0 view .LVU2047
 6396 06bc 0493     		str	r3, [sp, #16]
 6397 06be EBE4     		b	.L590
 6398              	.LVL704:
 6399              	.L572:
2369:src/display.c **** 	      SET_MANT_SIGN;
 6400              		.loc 1 2369 6 is_stmt 1 view .LVU2048
2369:src/display.c **** 	      SET_MANT_SIGN;
 6401              		.loc 1 2369 9 is_stmt 0 view .LVU2049
 6402 06c0 002F     		cmp	r7, #0
 6403 06c2 40F01181 		bne	.L575
2370:src/display.c **** 	    else
 6404              		.loc 1 2370 8 is_stmt 1 view .LVU2050
 6405              	.LBB417:
 6406              	.LBI417:
 304:src/display.c **** {
 6407              		.loc 1 304 13 view .LVU2051
 6408              	.LBB418:
 306:src/display.c ****   set_dot(MANT_SIGN);
 6409              		.loc 1 306 3 view .LVU2052
 306:src/display.c ****   set_dot(MANT_SIGN);
 6410              		.loc 1 306 25 is_stmt 0 view .LVU2053
 6411 06c6 0C4B     		ldr	r3, .L712+24
 6412 06c8 2D22     		movs	r2, #45
 307:src/display.c **** }
 6413              		.loc 1 307 3 view .LVU2054
 6414 06ca 8120     		movs	r0, #129
ARM GAS  /tmp/ccCvaEE3.s 			page 210


 306:src/display.c ****   set_dot(MANT_SIGN);
 6415              		.loc 1 306 25 view .LVU2055
 6416 06cc 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 6417              		.loc 1 307 3 is_stmt 1 view .LVU2056
 6418 06ce FFF7FEFF 		bl	set_dot
 6419              	.LVL705:
 307:src/display.c **** }
 6420              		.loc 1 307 3 is_stmt 0 view .LVU2057
 6421              	.LBE418:
 6422              	.LBE417:
2375:src/display.c **** 	  if (c == '.') {
 6423              		.loc 1 2375 12 is_stmt 1 view .LVU2058
2375:src/display.c **** 	  if (c == '.') {
 6424              		.loc 1 2375 18 is_stmt 0 view .LVU2059
 6425 06d2 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6426              	.LVL706:
2375:src/display.c **** 	  if (c == '.') {
 6427              		.loc 1 2375 2 view .LVU2060
 6428 06d6 002A     		cmp	r2, #0
 6429 06d8 7FF4FCAD 		bne	.L574
 6430 06dc 0DE6     		b	.L573
 6431              	.L713:
 6432 06de 00BF     		.align	2
 6433              	.L712:
 6434 06e0 00000000 		.word	main_ram
 6435 06e4 56555555 		.word	1431655766
 6436 06e8 00000000 		.word	.LANCHOR1
 6437 06ec 00000000 		.word	.LANCHOR0
 6438 06f0 00000000 		.word	Ctx
 6439 06f4 00000000 		.word	LastDisplayedExponent
 6440 06f8 00000000 		.word	LastDisplayedNumber
 6441              	.LVL707:
 6442              	.L689:
2103:src/display.c **** 	  return;
 6443              		.loc 1 2103 4 is_stmt 1 view .LVU2061
 6444              	.LBB419:
 6445              	.LBI419:
1891:src/display.c **** 	const int dbl = is_dblmode();
 6446              		.loc 1 1891 19 view .LVU2062
 6447              	.LBB420:
1892:src/display.c **** 	char *p;
 6448              		.loc 1 1892 2 view .LVU2063
1892:src/display.c **** 	char *p;
 6449              		.loc 1 1892 18 is_stmt 0 view .LVU2064
 6450 06fc FFF7FEFF 		bl	is_dblmode
 6451              	.LVL708:
1908:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6452              		.loc 1 1908 5 view .LVU2065
 6453 0700 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6454 0704 2D2B     		cmp	r3, #45
1892:src/display.c **** 	char *p;
 6455              		.loc 1 1892 18 view .LVU2066
 6456 0706 0446     		mov	r4, r0
 6457              	.LVL709:
1893:src/display.c **** 	int i, j;
 6458              		.loc 1 1893 2 is_stmt 1 view .LVU2067
ARM GAS  /tmp/ccCvaEE3.s 			page 211


1894:src/display.c **** 	char *upper_str;
 6459              		.loc 1 1894 2 view .LVU2068
1895:src/display.c **** 	enum separator_modes separator_mode;
 6460              		.loc 1 1895 2 view .LVU2069
1896:src/display.c **** 	char decimal_mark;
 6461              		.loc 1 1896 2 view .LVU2070
1897:src/display.c **** 	char thousands_sep;
 6462              		.loc 1 1897 2 view .LVU2071
1898:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6463              		.loc 1 1898 2 view .LVU2072
1904:src/display.c **** #endif
 6464              		.loc 1 1904 2 view .LVU2073
1906:src/display.c **** 
 6465              		.loc 1 1906 2 view .LVU2074
1908:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6466              		.loc 1 1908 2 view .LVU2075
1908:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6467              		.loc 1 1908 5 is_stmt 0 view .LVU2076
 6468 0708 00F02081 		beq	.L706
1921:src/display.c **** 
 6469              		.loc 1 1921 16 view .LVU2077
 6470 070c 0027     		movs	r7, #0
 6471              	.LVL710:
 6472              	.L473:
1923:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6473              		.loc 1 1923 2 is_stmt 1 view .LVU2078
1923:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6474              		.loc 1 1923 6 is_stmt 0 view .LVU2079
 6475 070e 0021     		movs	r1, #0
 6476 0710 5846     		mov	r0, fp
 6477 0712 FFF7FEFF 		bl	find_char
 6478              	.LVL711:
1924:src/display.c **** 
 6479              		.loc 1 1924 2 is_stmt 1 view .LVU2080
1924:src/display.c **** 
 6480              		.loc 1 1924 23 is_stmt 0 view .LVU2081
 6481 0716 A0EB0B02 		sub	r2, r0, fp
1924:src/display.c **** 
 6482              		.loc 1 1924 2 view .LVU2082
 6483 071a C2F12202 		rsb	r2, r2, #34
 6484 071e 3021     		movs	r1, #48
 6485 0720 FFF7FEFF 		bl	xset
 6486              	.LVL712:
1926:src/display.c **** 	  separator_mode = SEP_COMMA;
 6487              		.loc 1 1926 2 is_stmt 1 view .LVU2083
1926:src/display.c **** 	  separator_mode = SEP_COMMA;
 6488              		.loc 1 1926 18 is_stmt 0 view .LVU2084
 6489 0724 AC4A     		ldr	r2, .L714
1937:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6490              		.loc 1 1937 6 view .LVU2085
 6491 0726 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1926:src/display.c **** 	  separator_mode = SEP_COMMA;
 6492              		.loc 1 1926 5 view .LVU2086
 6493 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1934:src/display.c **** 	}
 6494              		.loc 1 1934 18 view .LVU2087
 6495 072a 002A     		cmp	r2, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 212


 6496 072c 15BF     		itete	ne
 6497 072e 4FF00209 		movne	r9, #2
 6498 0732 2C26     		moveq	r6, #44
 6499 0734 2E26     		movne	r6, #46
 6500              	.LVL713:
1934:src/display.c **** 	}
 6501              		.loc 1 1934 18 view .LVU2088
 6502 0736 2E25     		moveq	r5, #46
 6503              	.LVL714:
1934:src/display.c **** 	}
 6504              		.loc 1 1934 18 view .LVU2089
 6505 0738 18BF     		it	ne
 6506 073a 2C25     		movne	r5, #44
 6507              	.LVL715:
1937:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6508              		.loc 1 1937 2 is_stmt 1 view .LVU2090
1937:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6509              		.loc 1 1937 5 is_stmt 0 view .LVU2091
 6510 073c 13F0380F 		tst	r3, #56
 6511 0740 40F0D880 		bne	.L707
1964:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6512              		.loc 1 1964 4 is_stmt 1 view .LVU2092
 6513              	.LVL716:
1965:src/display.c **** 	  x[1] = decimal_mark;
 6514              		.loc 1 1965 4 view .LVU2093
 6515 0744 1022     		movs	r2, #16
 6516 0746 0BF10101 		add	r1, fp, #1
 6517 074a 0BF10200 		add	r0, fp, #2
 6518 074e FFF7FEFF 		bl	xcopy
 6519              	.LVL717:
1966:src/display.c **** 	  if (grouping) {
 6520              		.loc 1 1966 4 view .LVU2094
1968:src/display.c **** 	    x[5] = thousands_sep;
 6521              		.loc 1 1968 6 is_stmt 0 view .LVU2095
 6522 0752 0D22     		movs	r2, #13
 6523 0754 0BF10501 		add	r1, fp, #5
 6524 0758 0BF10600 		add	r0, fp, #6
1966:src/display.c **** 	  if (grouping) {
 6525              		.loc 1 1966 9 view .LVU2096
 6526 075c 8BF80150 		strb	r5, [fp, #1]
1967:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6527              		.loc 1 1967 4 is_stmt 1 view .LVU2097
1968:src/display.c **** 	    x[5] = thousands_sep;
 6528              		.loc 1 1968 6 view .LVU2098
 6529 0760 FFF7FEFF 		bl	xcopy
 6530              	.LVL718:
1969:src/display.c **** 	    x += 9;
 6531              		.loc 1 1969 6 view .LVU2099
1970:src/display.c **** 	  }
 6532              		.loc 1 1970 8 is_stmt 0 view .LVU2100
 6533 0764 0BF10905 		add	r5, fp, #9
 6534              	.LVL719:
1969:src/display.c **** 	    x += 9;
 6535              		.loc 1 1969 11 view .LVU2101
 6536 0768 8BF80560 		strb	r6, [fp, #5]
1970:src/display.c **** 	  }
 6537              		.loc 1 1970 6 is_stmt 1 view .LVU2102
ARM GAS  /tmp/ccCvaEE3.s 			page 213


 6538              	.LVL720:
1973:src/display.c **** 	    if (exp < 0) {
 6539              		.loc 1 1973 4 view .LVU2103
1973:src/display.c **** 	    if (exp < 0) {
 6540              		.loc 1 1973 7 is_stmt 0 view .LVU2104
 6541 076c 002C     		cmp	r4, #0
 6542 076e 00F0EA80 		beq	.L477
1974:src/display.c **** 	      x[9] = '-';
 6543              		.loc 1 1974 6 is_stmt 1 view .LVU2105
1974:src/display.c **** 	      x[9] = '-';
 6544              		.loc 1 1974 9 is_stmt 0 view .LVU2106
 6545 0772 B8F1000F 		cmp	r8, #0
1975:src/display.c **** 	      exp = -exp;
 6546              		.loc 1 1975 8 is_stmt 1 view .LVU2107
1976:src/display.c **** 	    }
 6547              		.loc 1 1976 8 view .LVU2108
1980:src/display.c **** 	    x[10] = '0' + j;
 6548              		.loc 1 1980 8 is_stmt 0 view .LVU2109
 6549 0776 994B     		ldr	r3, .L714+4
1982:src/display.c **** 	  }
 6550              		.loc 1 1982 18 view .LVU2110
 6551 0778 9949     		ldr	r1, .L714+8
1975:src/display.c **** 	      exp = -exp;
 6552              		.loc 1 1975 13 view .LVU2111
 6553 077a B6BF     		itet	lt
 6554 077c 2D22     		movlt	r2, #45
1979:src/display.c **** 	    j = exp / 1000;
 6555              		.loc 1 1979 13 view .LVU2112
 6556 077e 2022     		movge	r2, #32
1976:src/display.c **** 	    }
 6557              		.loc 1 1976 12 view .LVU2113
 6558 0780 C8F10008 		rsblt	r8, r8, #0
 6559              	.LVL721:
1976:src/display.c **** 	    }
 6560              		.loc 1 1976 12 view .LVU2114
 6561 0784 8BF81220 		strb	r2, [fp, #18]
1980:src/display.c **** 	    x[10] = '0' + j;
 6562              		.loc 1 1980 6 is_stmt 1 view .LVU2115
1980:src/display.c **** 	    x[10] = '0' + j;
 6563              		.loc 1 1980 8 is_stmt 0 view .LVU2116
 6564 0788 A3FB0823 		umull	r2, r3, r3, r8
 6565 078c 9B09     		lsrs	r3, r3, #6
 6566              	.LVL722:
1981:src/display.c **** 	    exp -= 1000 * j;
 6567              		.loc 1 1981 6 is_stmt 1 view .LVU2117
1981:src/display.c **** 	    exp -= 1000 * j;
 6568              		.loc 1 1981 18 is_stmt 0 view .LVU2118
 6569 078e 03F13002 		add	r2, r3, #48
1982:src/display.c **** 	  }
 6570              		.loc 1 1982 10 view .LVU2119
 6571 0792 01FB0388 		mla	r8, r1, r3, r8
 6572              	.LVL723:
1981:src/display.c **** 	    exp -= 1000 * j;
 6573              		.loc 1 1981 12 view .LVU2120
 6574 0796 8BF81320 		strb	r2, [fp, #19]
1982:src/display.c **** 	  }
 6575              		.loc 1 1982 6 is_stmt 1 view .LVU2121
ARM GAS  /tmp/ccCvaEE3.s 			page 214


 6576              	.LVL724:
 6577              	.L479:
1988:src/display.c **** 	  *x = 0;
 6578              		.loc 1 1988 4 view .LVU2122
 6579 079a 0B22     		movs	r2, #11
 6580 079c 2946     		mov	r1, r5
 6581 079e 0BF10A00 		add	r0, fp, #10
 6582 07a2 FFF7FEFF 		bl	xcopy
 6583              	.LVL725:
1989:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6584              		.loc 1 1989 4 view .LVU2123
1989:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6585              		.loc 1 1989 7 is_stmt 0 view .LVU2124
 6586 07a6 0022     		movs	r2, #0
1990:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6587              		.loc 1 1990 4 view .LVU2125
 6588 07a8 4046     		mov	r0, r8
 6589 07aa 0121     		movs	r1, #1
1989:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6590              		.loc 1 1989 7 view .LVU2126
 6591 07ac 8BF80920 		strb	r2, [fp, #9]
1990:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6592              		.loc 1 1990 4 is_stmt 1 view .LVU2127
 6593 07b0 FFF7FEFF 		bl	set_exp
 6594              	.LVL726:
1991:src/display.c **** 	}
 6595              		.loc 1 1991 4 view .LVU2128
1991:src/display.c **** 	}
 6596              		.loc 1 1991 4 is_stmt 0 view .LVU2129
 6597 07b4 ABEB0707 		sub	r7, fp, r7
 6598              	.LVL727:
1991:src/display.c **** 	}
 6599              		.loc 1 1991 6 view .LVU2130
 6600 07b8 0924     		movs	r4, #9
 6601              	.LVL728:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6602              		.loc 1 1994 11 is_stmt 1 view .LVU2131
 6603              	.L480:
1995:src/display.c **** 	  }
 6604              		.loc 1 1995 6 view .LVU2132
 6605              	.LBB421:
 6606              	.LBI421:
 375:src/display.c ****   if (sep == SEP_NONE)
 6607              		.loc 1 375 14 view .LVU2133
 6608              	.LBB422:
 376:src/display.c ****     return res;
 6609              		.loc 1 376 3 view .LVU2134
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6610              		.loc 1 378 3 view .LVU2135
 6611 07ba 2046     		mov	r0, r4
 6612 07bc 4946     		mov	r1, r9
 6613              	.LBE422:
 6614              	.LBE421:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6615              		.loc 1 1994 38 is_stmt 0 view .LVU2136
 6616 07be 1B34     		adds	r4, r4, #27
 6617              	.LVL729:
ARM GAS  /tmp/ccCvaEE3.s 			page 215


 6618              	.LBB424:
 6619              	.LBB423:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6620              		.loc 1 1994 38 view .LVU2137
 6621 07c0 FFF7FEFF 		bl	set_separator.part.0
 6622              	.LVL730:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6623              		.loc 1 1994 38 view .LVU2138
 6624              	.LBE423:
 6625              	.LBE424:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6626              		.loc 1 1994 36 is_stmt 1 view .LVU2139
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6627              		.loc 1 1994 11 view .LVU2140
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6628              		.loc 1 1994 4 is_stmt 0 view .LVU2141
 6629 07c4 512C     		cmp	r4, #81
 6630 07c6 F8DD     		ble	.L480
 6631 07c8 6C1E     		subs	r4, r5, #1
 6632              	.LVL731:
 6633              	.L482:
2000:src/display.c **** 
 6634              		.loc 1 2000 4 is_stmt 1 view .LVU2142
 6635 07ca 5046     		mov	r0, r10
 6636 07cc 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1999:src/display.c **** 	  set_dig(j, x[i]);
 6637              		.loc 1 1999 33 is_stmt 0 view .LVU2143
 6638 07d0 0AF1090A 		add	r10, r10, #9
 6639              	.LVL732:
2000:src/display.c **** 
 6640              		.loc 1 2000 4 view .LVU2144
 6641 07d4 FFF7FEFF 		bl	set_dig
 6642              	.LVL733:
1999:src/display.c **** 	  set_dig(j, x[i]);
 6643              		.loc 1 1999 26 is_stmt 1 view .LVU2145
1999:src/display.c **** 	  set_dig(j, x[i]);
 6644              		.loc 1 1999 18 view .LVU2146
1999:src/display.c **** 	  set_dig(j, x[i]);
 6645              		.loc 1 1999 2 is_stmt 0 view .LVU2147
 6646 07d8 BAF16C0F 		cmp	r10, #108
 6647 07dc F5D1     		bne	.L482
2002:src/display.c **** 	set_status(upper_str - negative);
 6648              		.loc 1 2002 2 is_stmt 1 view .LVU2148
2002:src/display.c **** 	set_status(upper_str - negative);
 6649              		.loc 1 2002 5 is_stmt 0 view .LVU2149
 6650 07de 0023     		movs	r3, #0
2003:src/display.c ****       }
 6651              		.loc 1 2003 2 view .LVU2150
 6652 07e0 3846     		mov	r0, r7
2002:src/display.c **** 	set_status(upper_str - negative);
 6653              		.loc 1 2002 5 view .LVU2151
 6654 07e2 2B70     		strb	r3, [r5]
2003:src/display.c ****       }
 6655              		.loc 1 2003 2 is_stmt 1 view .LVU2152
 6656 07e4 FFF7FEFF 		bl	set_status
 6657              	.LVL734:
2004:src/display.c **** 
ARM GAS  /tmp/ccCvaEE3.s 			page 216


 6658              		.loc 1 2004 7 is_stmt 0 view .LVU2153
 6659 07e8 92E5     		b	.L461
 6660              	.LVL735:
 6661              	.L548:
2004:src/display.c **** 
 6662              		.loc 1 2004 7 view .LVU2154
 6663              	.LBE420:
 6664              	.LBE419:
2295:src/display.c **** 	    odig++;
 6665              		.loc 1 2295 6 is_stmt 1 view .LVU2155
2296:src/display.c **** 	    *obp++ = '.';
 6666              		.loc 1 2296 6 view .LVU2156
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6667              		.loc 1 2297 6 view .LVU2157
2295:src/display.c **** 	    odig++;
 6668              		.loc 1 2295 13 is_stmt 0 view .LVU2158
 6669 07ea 42F63063 		movw	r3, #11824
 6670 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2298:src/display.c **** 	      *obp++ = '0';
 6671              		.loc 1 2298 6 is_stmt 1 view .LVU2159
 6672              	.LVL736:
2298:src/display.c **** 	      *obp++ = '0';
 6673              		.loc 1 2298 20 view .LVU2160
2298:src/display.c **** 	      *obp++ = '0';
 6674              		.loc 1 2298 6 is_stmt 0 view .LVU2161
 6675 07f2 731C     		adds	r3, r6, #1
 6676              	.LVL737:
2298:src/display.c **** 	      *obp++ = '0';
 6677              		.loc 1 2298 6 view .LVU2162
 6678 07f4 00F0E580 		beq	.L708
 6679 07f8 C6F10102 		rsb	r2, r6, #1
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6680              		.loc 1 2297 10 view .LVU2163
 6681 07fc 0DF12600 		add	r0, sp, #38
 6682              	.LVL738:
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6683              		.loc 1 2297 10 view .LVU2164
 6684 0800 079D     		ldr	r5, [sp, #28]
 6685 0802 5A44     		add	r2, r2, fp
 6686 0804 0346     		mov	r3, r0
 6687              	.LVL739:
2299:src/display.c **** 	      odig++;
 6688              		.loc 1 2299 15 view .LVU2165
 6689 0806 3021     		movs	r1, #48
 6690              	.LVL740:
 6691              	.L556:
2299:src/display.c **** 	      odig++;
 6692              		.loc 1 2299 8 is_stmt 1 discriminator 3 view .LVU2166
2299:src/display.c **** 	      odig++;
 6693              		.loc 1 2299 15 is_stmt 0 discriminator 3 view .LVU2167
 6694 0808 03F8011B 		strb	r1, [r3], #1
 6695              	.LVL741:
2300:src/display.c **** 	      dd--;
 6696              		.loc 1 2300 8 is_stmt 1 discriminator 3 view .LVU2168
2301:src/display.c **** 	    }
 6697              		.loc 1 2301 8 discriminator 3 view .LVU2169
2298:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccCvaEE3.s 			page 217


 6698              		.loc 1 2298 25 discriminator 3 view .LVU2170
2298:src/display.c **** 	      *obp++ = '0';
 6699              		.loc 1 2298 20 discriminator 3 view .LVU2171
2298:src/display.c **** 	      *obp++ = '0';
 6700              		.loc 1 2298 6 is_stmt 0 discriminator 3 view .LVU2172
 6701 080c 9342     		cmp	r3, r2
 6702 080e FBD1     		bne	.L556
 6703 0810 AB19     		adds	r3, r5, r6
 6704              	.LVL742:
2298:src/display.c **** 	      *obp++ = '0';
 6705              		.loc 1 2298 6 discriminator 3 view .LVU2173
 6706 0812 6FEA0608 		mvn	r8, r6
 6707 0816 0133     		adds	r3, r3, #1
 6708 0818 8044     		add	r8, r8, r0
 6709 081a 7542     		rsbs	r5, r6, #0
 6710              	.L555:
 6711              	.LVL743:
2303:src/display.c **** 	      *obp++ = *p++;
 6712              		.loc 1 2303 12 is_stmt 1 view .LVU2174
2303:src/display.c **** 	      *obp++ = *p++;
 6713              		.loc 1 2303 15 is_stmt 0 view .LVU2175
 6714 081c 5A1E     		subs	r2, r3, #1
2303:src/display.c **** 	      *obp++ = *p++;
 6715              		.loc 1 2303 12 view .LVU2176
 6716 081e 002B     		cmp	r3, #0
2303:src/display.c **** 	      *obp++ = *p++;
 6717              		.loc 1 2303 15 view .LVU2177
 6718 0820 0792     		str	r2, [sp, #28]
2303:src/display.c **** 	      *obp++ = *p++;
 6719              		.loc 1 2303 12 view .LVU2178
 6720 0822 7FF767AE 		ble	.L537
 6721 0826 4344     		add	r3, r3, r8
 6722 0828 581E     		subs	r0, r3, #1
 6723 082a 08F1FF38 		add	r8, r8, #-1
 6724              	.LVL744:
 6725              	.L557:
2304:src/display.c **** 	      odig++;
 6726              		.loc 1 2304 8 is_stmt 1 view .LVU2179
2304:src/display.c **** 	      odig++;
 6727              		.loc 1 2304 15 is_stmt 0 view .LVU2180
 6728 082e 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6729              	.LVL745:
2304:src/display.c **** 	      odig++;
 6730              		.loc 1 2304 15 view .LVU2181
 6731 0832 08F8011F 		strb	r1, [r8, #1]!
2305:src/display.c **** 	    }
 6732              		.loc 1 2305 8 is_stmt 1 view .LVU2182
2303:src/display.c **** 	      *obp++ = *p++;
 6733              		.loc 1 2303 12 view .LVU2183
 6734 0836 8045     		cmp	r8, r0
 6735 0838 F9D1     		bne	.L557
 6736              	.LVL746:
2303:src/display.c **** 	      *obp++ = *p++;
 6737              		.loc 1 2303 12 is_stmt 0 view .LVU2184
 6738 083a 0135     		adds	r5, r5, #1
 6739 083c 4FF0FF31 		mov	r1, #-1
 6740 0840 1544     		add	r5, r5, r2
ARM GAS  /tmp/ccCvaEE3.s 			page 218


 6741 0842 9846     		mov	r8, r3
 6742 0844 0791     		str	r1, [sp, #28]
 6743 0846 55E6     		b	.L537
 6744              	.LVL747:
 6745              	.L560:
2321:src/display.c **** 	    odig++;
 6746              		.loc 1 2321 6 is_stmt 1 view .LVU2185
2321:src/display.c **** 	    odig++;
 6747              		.loc 1 2321 13 is_stmt 0 view .LVU2186
 6748 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6749 084c 8DF82430 		strb	r3, [sp, #36]
2322:src/display.c **** 	    dd--;
 6750              		.loc 1 2322 6 is_stmt 1 view .LVU2187
 6751              	.LVL748:
2323:src/display.c **** 	    exp--;
 6752              		.loc 1 2323 6 view .LVU2188
2323:src/display.c **** 	    exp--;
 6753              		.loc 1 2323 8 is_stmt 0 view .LVU2189
 6754 0850 013A     		subs	r2, r2, #1
2324:src/display.c **** 	  case -2:
 6755              		.loc 1 2324 6 is_stmt 1 view .LVU2190
2324:src/display.c **** 	  case -2:
 6756              		.loc 1 2324 9 is_stmt 0 view .LVU2191
 6757 0852 013E     		subs	r6, r6, #1
 6758              	.LVL749:
2324:src/display.c **** 	  case -2:
 6759              		.loc 1 2324 9 view .LVU2192
 6760 0854 0325     		movs	r5, #3
2321:src/display.c **** 	    odig++;
 6761              		.loc 1 2321 17 view .LVU2193
 6762 0856 0DF15909 		add	r9, sp, #89
 6763              	.LVL750:
2321:src/display.c **** 	    odig++;
 6764              		.loc 1 2321 10 view .LVU2194
 6765 085a 0DF12501 		add	r1, sp, #37
 6766              	.LVL751:
 6767              	.L563:
2327:src/display.c **** 	    odig++;
 6768              		.loc 1 2327 6 is_stmt 1 view .LVU2195
2327:src/display.c **** 	    odig++;
 6769              		.loc 1 2327 13 is_stmt 0 view .LVU2196
 6770 085e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6771              	.LVL752:
2327:src/display.c **** 	    odig++;
 6772              		.loc 1 2327 13 view .LVU2197
 6773 0862 01F8013B 		strb	r3, [r1], #1
 6774              	.LVL753:
2328:src/display.c **** 	    dd--;
 6775              		.loc 1 2328 6 is_stmt 1 view .LVU2198
2329:src/display.c **** 	    exp--;
 6776              		.loc 1 2329 6 view .LVU2199
2329:src/display.c **** 	    exp--;
 6777              		.loc 1 2329 8 is_stmt 0 view .LVU2200
 6778 0866 013A     		subs	r2, r2, #1
2330:src/display.c **** 	  case 0:
 6779              		.loc 1 2330 6 is_stmt 1 view .LVU2201
2330:src/display.c **** 	  case 0:
ARM GAS  /tmp/ccCvaEE3.s 			page 219


 6780              		.loc 1 2330 9 is_stmt 0 view .LVU2202
 6781 0868 013E     		subs	r6, r6, #1
 6782              	.LVL754:
2330:src/display.c **** 	  case 0:
 6783              		.loc 1 2330 9 view .LVU2203
 6784 086a 24E6     		b	.L527
 6785              	.LVL755:
 6786              	.L562:
2330:src/display.c **** 	  case 0:
 6787              		.loc 1 2330 9 view .LVU2204
 6788 086c 079A     		ldr	r2, [sp, #28]
2318:src/display.c **** 	  case -1:
 6789              		.loc 1 2318 16 view .LVU2205
 6790 086e 0225     		movs	r5, #2
2023:src/display.c **** 	int odig = 0;
 6791              		.loc 1 2023 15 view .LVU2206
 6792 0870 5946     		mov	r1, fp
 6793 0872 F4E7     		b	.L563
 6794              	.LVL756:
 6795              	.L508:
2186:src/display.c **** 	    /* We might have push the fixed decimals off the
 6796              		.loc 1 2186 6 is_stmt 1 view .LVU2207
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6797              		.loc 1 2190 6 view .LVU2208
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6798              		.loc 1 2190 9 is_stmt 0 view .LVU2209
 6799 0874 0299     		ldr	r1, [sp, #8]
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6800              		.loc 1 2190 23 view .LVU2210
 6801 0876 9319     		adds	r3, r2, r6
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6802              		.loc 1 2190 9 view .LVU2211
 6803 0878 9942     		cmp	r1, r3
2191:src/display.c **** 	  }
 6804              		.loc 1 2191 8 is_stmt 1 view .LVU2212
2191:src/display.c **** 	  }
 6805              		.loc 1 2191 30 is_stmt 0 view .LVU2213
 6806 087a DFBF     		itttt	le
 6807 087c 029B     		ldrle	r3, [sp, #8]
 6808 087e 03F1FF32 		addle	r2, r3, #-1
2191:src/display.c **** 	  }
 6809              		.loc 1 2191 35 view .LVU2214
 6810 0882 921B     		suble	r2, r2, r6
2191:src/display.c **** 	  }
 6811              		.loc 1 2191 11 view .LVU2215
 6812 0884 0792     		strle	r2, [sp, #28]
 6813 0886 3146     		mov	r1, r6
 6814 0888 6BE4     		b	.L505
 6815              	.LVL757:
 6816              	.L533:
2230:src/display.c **** 	      odig++;
 6817              		.loc 1 2230 8 is_stmt 1 view .LVU2216
2230:src/display.c **** 	      odig++;
 6818              		.loc 1 2230 15 is_stmt 0 view .LVU2217
 6819 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6820 088e 8DF82410 		strb	r1, [sp, #36]
2231:src/display.c **** 	      dd--;
ARM GAS  /tmp/ccCvaEE3.s 			page 220


 6821              		.loc 1 2231 8 is_stmt 1 view .LVU2218
 6822              	.LVL758:
2232:src/display.c **** 	      exp--;
 6823              		.loc 1 2232 8 view .LVU2219
2232:src/display.c **** 	      exp--;
 6824              		.loc 1 2232 10 is_stmt 0 view .LVU2220
 6825 0892 013A     		subs	r2, r2, #1
2233:src/display.c **** 	    case -2:
 6826              		.loc 1 2233 8 is_stmt 1 view .LVU2221
2233:src/display.c **** 	    case -2:
 6827              		.loc 1 2233 11 is_stmt 0 view .LVU2222
 6828 0894 013E     		subs	r6, r6, #1
 6829              	.LVL759:
2233:src/display.c **** 	    case -2:
 6830              		.loc 1 2233 11 view .LVU2223
 6831 0896 0325     		movs	r5, #3
2230:src/display.c **** 	      odig++;
 6832              		.loc 1 2230 19 view .LVU2224
 6833 0898 0DF15909 		add	r9, sp, #89
 6834              	.LVL760:
2230:src/display.c **** 	      odig++;
 6835              		.loc 1 2230 12 view .LVU2225
 6836 089c 0DF12501 		add	r1, sp, #37
 6837              	.LVL761:
 6838              	.L536:
2236:src/display.c **** 	      odig++;
 6839              		.loc 1 2236 8 is_stmt 1 view .LVU2226
2236:src/display.c **** 	      odig++;
 6840              		.loc 1 2236 15 is_stmt 0 view .LVU2227
 6841 08a0 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6842              	.LVL762:
2236:src/display.c **** 	      odig++;
 6843              		.loc 1 2236 15 view .LVU2228
 6844 08a4 01F8010B 		strb	r0, [r1], #1
 6845              	.LVL763:
2237:src/display.c **** 	      dd--;
 6846              		.loc 1 2237 8 is_stmt 1 view .LVU2229
2238:src/display.c **** 	      exp--;
 6847              		.loc 1 2238 8 view .LVU2230
2239:src/display.c **** 	    case 0:
 6848              		.loc 1 2239 8 view .LVU2231
2238:src/display.c **** 	      exp--;
 6849              		.loc 1 2238 10 is_stmt 0 view .LVU2232
 6850 08a8 013A     		subs	r2, r2, #1
 6851 08aa 0792     		str	r2, [sp, #28]
2239:src/display.c **** 	    case 0:
 6852              		.loc 1 2239 11 view .LVU2233
 6853 08ac 013E     		subs	r6, r6, #1
 6854              	.LVL764:
 6855              	.L532:
2241:src/display.c **** 	    };
 6856              		.loc 1 2241 8 is_stmt 1 view .LVU2234
2242:src/display.c **** 	    *obp++ = *p++;
 6857              		.loc 1 2242 7 view .LVU2235
2243:src/display.c **** 	    odig++;
 6858              		.loc 1 2243 6 view .LVU2236
2243:src/display.c **** 	    odig++;
ARM GAS  /tmp/ccCvaEE3.s 			page 221


 6859              		.loc 1 2243 17 is_stmt 0 view .LVU2237
 6860 08ae 4A46     		mov	r2, r9
 6861              	.LVL765:
2243:src/display.c **** 	    odig++;
 6862              		.loc 1 2243 13 view .LVU2238
 6863 08b0 8846     		mov	r8, r1
 6864 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6865              	.LVL766:
2243:src/display.c **** 	    odig++;
 6866              		.loc 1 2243 13 view .LVU2239
 6867 08b6 08F8020B 		strb	r0, [r8], #2
2244:src/display.c **** 	    *obp++ = '.';
 6868              		.loc 1 2244 6 is_stmt 1 view .LVU2240
2245:src/display.c **** 	    for (i=1; i<count; i++) {
 6869              		.loc 1 2245 6 view .LVU2241
 6870              	.LVL767:
2246:src/display.c **** 	      *obp++ = *p++;
 6871              		.loc 1 2246 6 is_stmt 0 view .LVU2242
 6872 08ba 012B     		cmp	r3, #1
2245:src/display.c **** 	    for (i=1; i<count; i++) {
 6873              		.loc 1 2245 13 view .LVU2243
 6874 08bc 4FF02E00 		mov	r0, #46
 6875 08c0 4870     		strb	r0, [r1, #1]
2246:src/display.c **** 	      *obp++ = *p++;
 6876              		.loc 1 2246 6 is_stmt 1 view .LVU2244
 6877              	.LVL768:
2246:src/display.c **** 	      *obp++ = *p++;
 6878              		.loc 1 2246 16 view .LVU2245
2246:src/display.c **** 	      *obp++ = *p++;
 6879              		.loc 1 2246 6 is_stmt 0 view .LVU2246
 6880 08c2 34DD     		ble	.L605
2246:src/display.c **** 	      *obp++ = *p++;
 6881              		.loc 1 2246 6 view .LVU2247
 6882 08c4 0131     		adds	r1, r1, #1
 6883 08c6 9944     		add	r9, r9, r3
 6884              	.LVL769:
 6885              	.L538:
2247:src/display.c **** 	      odig++;
 6886              		.loc 1 2247 8 is_stmt 1 discriminator 3 view .LVU2248
2247:src/display.c **** 	      odig++;
 6887              		.loc 1 2247 15 is_stmt 0 discriminator 3 view .LVU2249
 6888 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6889              	.LVL770:
2247:src/display.c **** 	      odig++;
 6890              		.loc 1 2247 15 discriminator 3 view .LVU2250
 6891 08cc 01F8010F 		strb	r0, [r1, #1]!
2248:src/display.c **** 	    }
 6892              		.loc 1 2248 8 is_stmt 1 discriminator 3 view .LVU2251
2246:src/display.c **** 	      *obp++ = *p++;
 6893              		.loc 1 2246 25 discriminator 3 view .LVU2252
2246:src/display.c **** 	      *obp++ = *p++;
 6894              		.loc 1 2246 16 discriminator 3 view .LVU2253
2246:src/display.c **** 	      *obp++ = *p++;
 6895              		.loc 1 2246 6 is_stmt 0 discriminator 3 view .LVU2254
 6896 08d0 4A45     		cmp	r2, r9
 6897 08d2 F9D1     		bne	.L538
 6898 08d4 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccCvaEE3.s 			page 222


 6899              	.LVL771:
2246:src/display.c **** 	      *obp++ = *p++;
 6900              		.loc 1 2246 6 discriminator 3 view .LVU2255
 6901 08d6 9844     		add	r8, r8, r3
 6902 08d8 1D44     		add	r5, r5, r3
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6903              		.loc 1 2250 15 view .LVU2256
 6904 08da 4FF0010A 		mov	r10, #1
 6905 08de 09E6     		b	.L537
 6906              	.LVL772:
 6907              	.L535:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6908              		.loc 1 2250 15 view .LVU2257
 6909 08e0 079A     		ldr	r2, [sp, #28]
2227:src/display.c **** 	    case -1:
 6910              		.loc 1 2227 24 view .LVU2258
 6911 08e2 0225     		movs	r5, #2
2023:src/display.c **** 	int odig = 0;
 6912              		.loc 1 2023 15 view .LVU2259
 6913 08e4 5946     		mov	r1, fp
 6914 08e6 DBE7     		b	.L536
 6915              	.LVL773:
 6916              	.L575:
2372:src/display.c **** 	  }
 6917              		.loc 1 2372 8 is_stmt 1 view .LVU2260
 6918 08e8 2D21     		movs	r1, #45
 6919 08ea A7F10900 		sub	r0, r7, #9
 6920 08ee FFF7FEFF 		bl	set_dig
 6921              	.LVL774:
 6922 08f2 EAE4     		b	.L571
 6923              	.LVL775:
 6924              	.L707:
 6925              	.LBB429:
 6926              	.LBB427:
 6927              	.LBB425:
1939:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6928              		.loc 1 1939 4 view .LVU2261
1942:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6929              		.loc 1 1942 4 view .LVU2262
1942:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6930              		.loc 1 1942 14 is_stmt 0 view .LVU2263
 6931 08f4 0BF10307 		add	r7, fp, #3
 6932              	.LVL776:
1943:src/display.c **** 	  if (grouping) {
 6933              		.loc 1 1943 4 is_stmt 1 view .LVU2264
 6934 08f8 3A49     		ldr	r1, .L714+12
 6935 08fa 0D22     		movs	r2, #13
 6936 08fc 3846     		mov	r0, r7
 6937 08fe FFF7FEFF 		bl	xcopy
 6938              	.LVL777:
1944:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6939              		.loc 1 1944 4 view .LVU2265
1945:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6940              		.loc 1 1945 6 view .LVU2266
 6941 0902 1322     		movs	r2, #19
 6942 0904 0BEB0201 		add	r1, fp, r2
 6943 0908 0BF11400 		add	r0, fp, #20
ARM GAS  /tmp/ccCvaEE3.s 			page 223


 6944 090c FFF7FEFF 		bl	xcopy
 6945              	.LVL778:
1946:src/display.c **** 	    x += 3 + 13 + 7;
 6946              		.loc 1 1946 6 view .LVU2267
1947:src/display.c **** 	  }
 6947              		.loc 1 1947 8 is_stmt 0 view .LVU2268
 6948 0910 0BF11705 		add	r5, fp, #23
 6949              	.LVL779:
1946:src/display.c **** 	    x += 3 + 13 + 7;
 6950              		.loc 1 1946 24 view .LVU2269
 6951 0914 8BF81360 		strb	r6, [fp, #19]
1947:src/display.c **** 	  }
 6952              		.loc 1 1947 6 is_stmt 1 view .LVU2270
 6953              	.LVL780:
1960:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6954              		.loc 1 1960 4 view .LVU2271
1961:src/display.c **** 	}
 6955              		.loc 1 1961 4 view .LVU2272
1961:src/display.c **** 	}
 6956              		.loc 1 1961 6 is_stmt 0 view .LVU2273
 6957 0918 1B24     		movs	r4, #27
 6958              	.LVL781:
1961:src/display.c **** 	}
 6959              		.loc 1 1961 6 view .LVU2274
 6960              	.LBE425:
 6961 091a 4EE7     		b	.L480
 6962              	.LVL782:
 6963              	.L703:
1961:src/display.c **** 	}
 6964              		.loc 1 1961 6 view .LVU2275
 6965              	.LBE427:
 6966              	.LBE429:
2060:src/display.c **** 	      return;
 6967              		.loc 1 2060 8 is_stmt 1 view .LVU2276
 6968 091c 3846     		mov	r0, r7
 6969 091e FFF7FEFF 		bl	set_x_hms
 6970              	.LVL783:
2061:src/display.c **** 	    }
 6971              		.loc 1 2061 8 view .LVU2277
 6972 0922 F5E4     		b	.L461
 6973              	.LVL784:
 6974              	.L603:
2222:src/display.c **** 	  if (count != *display_digits)
 6975              		.loc 1 2222 4 is_stmt 0 view .LVU2278
 6976 0924 029B     		ldr	r3, [sp, #8]
 6977 0926 71E4     		b	.L528
 6978              	.LVL785:
 6979              	.L604:
2227:src/display.c **** 	    case -1:
 6980              		.loc 1 2227 24 view .LVU2279
 6981 0928 0125     		movs	r5, #1
 6982 092a 5946     		mov	r1, fp
 6983 092c BFE7     		b	.L532
 6984              	.LVL786:
 6985              	.L605:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6986              		.loc 1 2250 15 view .LVU2280
ARM GAS  /tmp/ccCvaEE3.s 			page 224


 6987 092e 4FF0010A 		mov	r10, #1
 6988 0932 DFE5     		b	.L537
 6989              	.LVL787:
 6990              	.L579:
 6991              	.LBB430:
 6992              	.LBB409:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6993              		.loc 1 2250 15 view .LVU2281
 6994 0934 3846     		mov	r0, r7
 6995 0936 FFF7FEFF 		bl	set_separator.part.0
 6996              	.LVL788:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6997              		.loc 1 2250 15 view .LVU2282
 6998 093a 0446     		mov	r4, r0
 6999              	.LVL789:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7000              		.loc 1 2250 15 view .LVU2283
 7001 093c F7E5     		b	.L577
 7002              	.LVL790:
 7003              	.L511:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7004              		.loc 1 2250 15 view .LVU2284
 7005              	.LBE409:
 7006              	.LBE430:
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7007              		.loc 1 2200 4 is_stmt 1 view .LVU2285
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7008              		.loc 1 2200 7 is_stmt 0 view .LVU2286
 7009 093e 4B45     		cmp	r3, r9
 7010 0940 7FF429AC 		bne	.L588
 7011 0944 3EE5     		b	.L589
 7012              	.LVL791:
 7013              	.L477:
 7014              	.LBB431:
 7015              	.LBB428:
1985:src/display.c **** 	    x[10] = '\0';
 7016              		.loc 1 1985 6 is_stmt 1 view .LVU2287
1986:src/display.c **** 	  }
 7017              		.loc 1 1986 6 view .LVU2288
1985:src/display.c **** 	    x[10] = '\0';
 7018              		.loc 1 1985 11 is_stmt 0 view .LVU2289
 7019 0946 ABF81240 		strh	r4, [fp, #18]	@ movhi
 7020 094a 26E7     		b	.L479
 7021              	.LVL792:
 7022              	.L706:
 7023              	.LBB426:
1910:src/display.c **** 
 7024              		.loc 1 1910 4 is_stmt 1 view .LVU2290
1912:src/display.c **** 	  xcopy(x, small_minus, 4);
 7025              		.loc 1 1912 4 view .LVU2291
 7026 094c 2222     		movs	r2, #34
 7027 094e 0DF12501 		add	r1, sp, #37
 7028 0952 0AA8     		add	r0, sp, #40
 7029              	.LVL793:
1912:src/display.c **** 	  xcopy(x, small_minus, 4);
 7030              		.loc 1 1912 4 is_stmt 0 view .LVU2292
 7031 0954 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccCvaEE3.s 			page 225


 7032              	.LVL794:
1913:src/display.c **** 	  x += 4;
 7033              		.loc 1 1913 4 is_stmt 1 view .LVU2293
 7034 0958 5846     		mov	r0, fp
 7035 095a 2349     		ldr	r1, .L714+16
 7036 095c 0422     		movs	r2, #4
 7037 095e FFF7FEFF 		bl	xcopy
 7038              	.LVL795:
1914:src/display.c **** 	  negative = 4;
 7039              		.loc 1 1914 4 view .LVU2294
1915:src/display.c **** #else
 7040              		.loc 1 1915 4 view .LVU2295
1914:src/display.c **** 	  negative = 4;
 7041              		.loc 1 1914 6 is_stmt 0 view .LVU2296
 7042 0962 0DF1280B 		add	fp, sp, #40
 7043              	.LVL796:
1915:src/display.c **** #else
 7044              		.loc 1 1915 13 view .LVU2297
 7045 0966 0427     		movs	r7, #4
 7046              	.LVL797:
1915:src/display.c **** #else
 7047              		.loc 1 1915 13 view .LVU2298
 7048              	.LBE426:
 7049 0968 D1E6     		b	.L473
 7050              	.LVL798:
 7051              	.L539:
1915:src/display.c **** #else
 7052              		.loc 1 1915 13 view .LVU2299
 7053              	.LBE428:
 7054              	.LBE431:
2266:src/display.c **** 	    odig++;
 7055              		.loc 1 2266 6 is_stmt 1 view .LVU2300
2267:src/display.c **** 	    *obp++ = '.';
 7056              		.loc 1 2267 6 view .LVU2301
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7057              		.loc 1 2268 6 view .LVU2302
2266:src/display.c **** 	    odig++;
 7058              		.loc 1 2266 13 is_stmt 0 view .LVU2303
 7059 096a 42F63062 		movw	r2, #11824
 7060 096e ADF82420 		strh	r2, [sp, #36]	@ movhi
2269:src/display.c **** 	      *obp++ = '0';
 7061              		.loc 1 2269 6 is_stmt 1 view .LVU2304
 7062              	.LVL799:
2269:src/display.c **** 	      *obp++ = '0';
 7063              		.loc 1 2269 20 view .LVU2305
2269:src/display.c **** 	      *obp++ = '0';
 7064              		.loc 1 2269 6 is_stmt 0 view .LVU2306
 7065 0972 721C     		adds	r2, r6, #1
 7066              	.LVL800:
2269:src/display.c **** 	      *obp++ = '0';
 7067              		.loc 1 2269 6 view .LVU2307
 7068 0974 2AD0     		beq	.L606
 7069 0976 C6F10101 		rsb	r1, r6, #1
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7070              		.loc 1 2268 10 view .LVU2308
 7071 097a 0DF12600 		add	r0, sp, #38
 7072              	.LVL801:
ARM GAS  /tmp/ccCvaEE3.s 			page 226


2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7073              		.loc 1 2268 10 view .LVU2309
 7074 097e 5944     		add	r1, r1, fp
 7075 0980 0246     		mov	r2, r0
 7076              	.LVL802:
2270:src/display.c **** 	      odig++;
 7077              		.loc 1 2270 15 view .LVU2310
 7078 0982 3025     		movs	r5, #48
 7079              	.LVL803:
 7080              	.L546:
2270:src/display.c **** 	      odig++;
 7081              		.loc 1 2270 8 is_stmt 1 discriminator 3 view .LVU2311
2270:src/display.c **** 	      odig++;
 7082              		.loc 1 2270 15 is_stmt 0 discriminator 3 view .LVU2312
 7083 0984 02F8015B 		strb	r5, [r2], #1
 7084              	.LVL804:
2271:src/display.c **** 	    }
 7085              		.loc 1 2271 8 is_stmt 1 discriminator 3 view .LVU2313
2269:src/display.c **** 	      *obp++ = '0';
 7086              		.loc 1 2269 25 discriminator 3 view .LVU2314
2269:src/display.c **** 	      *obp++ = '0';
 7087              		.loc 1 2269 20 discriminator 3 view .LVU2315
2269:src/display.c **** 	      *obp++ = '0';
 7088              		.loc 1 2269 6 is_stmt 0 discriminator 3 view .LVU2316
 7089 0988 8A42     		cmp	r2, r1
 7090 098a FBD1     		bne	.L546
 7091 098c 6FEA0608 		mvn	r8, r6
 7092 0990 8044     		add	r8, r8, r0
 7093 0992 7542     		rsbs	r5, r6, #0
 7094              	.LVL805:
 7095              	.L545:
2273:src/display.c **** 	      *obp++ = *p++;
 7096              		.loc 1 2273 16 is_stmt 1 view .LVU2317
2273:src/display.c **** 	      *obp++ = *p++;
 7097              		.loc 1 2273 6 is_stmt 0 view .LVU2318
 7098 0994 002B     		cmp	r3, #0
 7099 0996 7FF7ADAD 		ble	.L537
 7100 099a 581E     		subs	r0, r3, #1
 7101 099c 4044     		add	r0, r0, r8
 7102 099e 08F1FF32 		add	r2, r8, #-1
 7103              	.LVL806:
 7104              	.L547:
2274:src/display.c **** 	      odig++;
 7105              		.loc 1 2274 8 is_stmt 1 discriminator 3 view .LVU2319
2274:src/display.c **** 	      odig++;
 7106              		.loc 1 2274 15 is_stmt 0 discriminator 3 view .LVU2320
 7107 09a2 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 7108              	.LVL807:
2274:src/display.c **** 	      odig++;
 7109              		.loc 1 2274 15 discriminator 3 view .LVU2321
 7110 09a6 02F8011F 		strb	r1, [r2, #1]!
2275:src/display.c **** 	    }
 7111              		.loc 1 2275 8 is_stmt 1 discriminator 3 view .LVU2322
2273:src/display.c **** 	      *obp++ = *p++;
 7112              		.loc 1 2273 25 discriminator 3 view .LVU2323
 7113              	.LVL808:
2273:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccCvaEE3.s 			page 227


 7114              		.loc 1 2273 16 discriminator 3 view .LVU2324
2273:src/display.c **** 	      *obp++ = *p++;
 7115              		.loc 1 2273 6 is_stmt 0 discriminator 3 view .LVU2325
 7116 09aa 9042     		cmp	r0, r2
 7117 09ac F9D1     		bne	.L547
 7118              	.LVL809:
2273:src/display.c **** 	      *obp++ = *p++;
 7119              		.loc 1 2273 6 discriminator 3 view .LVU2326
 7120 09ae 9844     		add	r8, r8, r3
 7121              	.LVL810:
2273:src/display.c **** 	      *obp++ = *p++;
 7122              		.loc 1 2273 6 discriminator 3 view .LVU2327
 7123 09b0 1D44     		add	r5, r5, r3
 7124 09b2 9FE5     		b	.L537
 7125              	.LVL811:
 7126              	.L705:
2216:src/display.c **** 
 7127              		.loc 1 2216 2 is_stmt 1 view .LVU2328
 7128 09b4 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2216:src/display.c **** 
 7129              		.loc 1 2216 9 is_stmt 0 view .LVU2329
 7130 09b8 09EB0E03 		add	r3, r9, lr
 7131              	.LVL812:
2216:src/display.c **** 
 7132              		.loc 1 2216 45 is_stmt 1 view .LVU2330
2216:src/display.c **** 
 7133              		.loc 1 2216 2 is_stmt 0 view .LVU2331
 7134 09bc 51B1     		cbz	r1, .L709
2205:src/display.c **** 	      extra_digits = 0;
 7135              		.loc 1 2205 37 view .LVU2332
 7136 09be 0225     		movs	r5, #2
 7137 09c0 00E4     		b	.L587
 7138              	.LVL813:
 7139              	.L708:
2205:src/display.c **** 	      extra_digits = 0;
 7140              		.loc 1 2205 37 view .LVU2333
 7141 09c2 079B     		ldr	r3, [sp, #28]
 7142              	.LVL814:
2296:src/display.c **** 	    *obp++ = '.';
 7143              		.loc 1 2296 10 view .LVU2334
 7144 09c4 0125     		movs	r5, #1
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7145              		.loc 1 2297 10 view .LVU2335
 7146 09c6 0DF12608 		add	r8, sp, #38
 7147              	.LVL815:
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7148              		.loc 1 2297 10 view .LVU2336
 7149 09ca 27E7     		b	.L555
 7150              	.LVL816:
 7151              	.L606:
2267:src/display.c **** 	    *obp++ = '.';
 7152              		.loc 1 2267 10 view .LVU2337
 7153 09cc 0125     		movs	r5, #1
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7154              		.loc 1 2268 10 view .LVU2338
 7155 09ce 0DF12608 		add	r8, sp, #38
 7156              	.LVL817:
ARM GAS  /tmp/ccCvaEE3.s 			page 228


2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7157              		.loc 1 2268 10 view .LVU2339
 7158 09d2 DFE7     		b	.L545
 7159              	.LVL818:
 7160              	.L709:
2023:src/display.c **** 	int odig = 0;
 7161              		.loc 1 2023 15 view .LVU2340
 7162 09d4 5946     		mov	r1, fp
 7163 09d6 6EE5     		b	.L527
 7164              	.L715:
 7165              		.align	2
 7166              	.L714:
 7167 09d8 00000000 		.word	.LANCHOR1
 7168 09dc D34D6210 		.word	274877907
 7169 09e0 18FCFFFF 		.word	-1000
 7170 09e4 00000000 		.word	.LANCHOR14
 7171 09e8 00000000 		.word	.LANCHOR13
 7172              		.cfi_endproc
 7173              	.LFE27:
 7175              		.section	.text.set_x,"ax",%progbits
 7176              		.align	1
 7177              		.p2align 2,,3
 7178              		.syntax unified
 7179              		.thumb
 7180              		.thumb_func
 7181              		.fpu fpv4-sp-d16
 7183              	set_x:
 7184              	.LVL819:
 7185              	.LFB26:
2011:src/display.c **** 	decNumber z;
 7186              		.loc 1 2011 66 is_stmt 1 view -0
 7187              		.cfi_startproc
 7188              		@ args = 0, pretend = 0, frame = 40
 7189              		@ frame_needed = 0, uses_anonymous_args = 0
2012:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7190              		.loc 1 2012 2 view .LVU2342
2013:src/display.c **** 
 7191              		.loc 1 2013 2 view .LVU2343
2011:src/display.c **** 	decNumber z;
 7192              		.loc 1 2011 66 is_stmt 0 view .LVU2344
 7193 0000 30B5     		push	{r4, r5, lr}
 7194              		.cfi_def_cfa_offset 12
 7195              		.cfi_offset 4, -12
 7196              		.cfi_offset 5, -8
 7197              		.cfi_offset 14, -4
 7198 0002 8BB0     		sub	sp, sp, #44
 7199              		.cfi_def_cfa_offset 56
2013:src/display.c **** 
 7200              		.loc 1 2013 6 view .LVU2345
 7201 0004 0C23     		movs	r3, #12
2016:src/display.c **** 	else
 7202              		.loc 1 2016 4 view .LVU2346
 7203 0006 01AD     		add	r5, sp, #4
2011:src/display.c **** 	decNumber z;
 7204              		.loc 1 2011 66 view .LVU2347
 7205 0008 0C46     		mov	r4, r1
2013:src/display.c **** 
ARM GAS  /tmp/ccCvaEE3.s 			page 229


 7206              		.loc 1 2013 6 view .LVU2348
 7207 000a 0093     		str	r3, [sp]
2015:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7208              		.loc 1 2015 2 is_stmt 1 view .LVU2349
2016:src/display.c **** 	else
 7209              		.loc 1 2016 4 is_stmt 0 view .LVU2350
 7210 000c 2946     		mov	r1, r5
 7211              	.LVL820:
2015:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7212              		.loc 1 2015 5 view .LVU2351
 7213 000e 42B1     		cbz	r2, .L717
2016:src/display.c **** 	else
 7214              		.loc 1 2016 4 is_stmt 1 view .LVU2352
 7215 0010 FFF7FEFF 		bl	decimal128ToNumber
 7216              	.LVL821:
2019:src/display.c ****       }
 7217              		.loc 1 2019 2 view .LVU2353
 7218 0014 2146     		mov	r1, r4
 7219 0016 2846     		mov	r0, r5
 7220 0018 6A46     		mov	r2, sp
 7221 001a FFF7FEFF 		bl	set_x_dn
 7222              	.LVL822:
2020:src/display.c **** 
 7223              		.loc 1 2020 7 is_stmt 0 view .LVU2354
 7224 001e 0BB0     		add	sp, sp, #44
 7225              		.cfi_remember_state
 7226              		.cfi_def_cfa_offset 12
 7227              		@ sp needed
 7228 0020 30BD     		pop	{r4, r5, pc}
 7229              	.LVL823:
 7230              	.L717:
 7231              		.cfi_restore_state
2018:src/display.c **** 	set_x_dn(&z, res, &digits);
 7232              		.loc 1 2018 4 is_stmt 1 view .LVU2355
 7233 0022 FFF7FEFF 		bl	decimal64ToNumber
 7234              	.LVL824:
2019:src/display.c ****       }
 7235              		.loc 1 2019 2 view .LVU2356
 7236 0026 2146     		mov	r1, r4
 7237 0028 2846     		mov	r0, r5
 7238 002a 6A46     		mov	r2, sp
 7239 002c FFF7FEFF 		bl	set_x_dn
 7240              	.LVL825:
2020:src/display.c **** 
 7241              		.loc 1 2020 7 is_stmt 0 view .LVU2357
 7242 0030 0BB0     		add	sp, sp, #44
 7243              		.cfi_def_cfa_offset 12
 7244              		@ sp needed
 7245 0032 30BD     		pop	{r4, r5, pc}
2020:src/display.c **** 
 7246              		.loc 1 2020 7 view .LVU2358
 7247              		.cfi_endproc
 7248              	.LFE26:
 7250              		.section	.text.format_reg,"ax",%progbits
 7251              		.align	1
 7252              		.p2align 2,,3
 7253              		.global	format_reg
ARM GAS  /tmp/ccCvaEE3.s 			page 230


 7254              		.syntax unified
 7255              		.thumb
 7256              		.thumb_func
 7257              		.fpu fpv4-sp-d16
 7259              	format_reg:
 7260              	.LVL826:
 7261              	.LFB28:
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7262              		.loc 1 2427 45 is_stmt 1 view -0
 7263              		.cfi_startproc
 7264              		@ args = 0, pretend = 0, frame = 40
 7265              		@ frame_needed = 0, uses_anonymous_args = 0
2428:src/display.c **** 
 7266              		.loc 1 2428 2 view .LVU2360
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7267              		.loc 1 2427 45 is_stmt 0 view .LVU2361
 7268 0000 30B5     		push	{r4, r5, lr}
 7269              		.cfi_def_cfa_offset 12
 7270              		.cfi_offset 4, -12
 7271              		.cfi_offset 5, -8
 7272              		.cfi_offset 14, -4
 7273 0002 8BB0     		sub	sp, sp, #44
 7274              		.cfi_def_cfa_offset 56
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7275              		.loc 1 2427 45 view .LVU2362
 7276 0004 0C46     		mov	r4, r1
 7277 0006 0546     		mov	r5, r0
2428:src/display.c **** 
 7278              		.loc 1 2428 28 view .LVU2363
 7279 0008 FFF7FEFF 		bl	get_reg_n
 7280              	.LVL827:
2430:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7281              		.loc 1 2430 6 view .LVU2364
 7282 000c 154B     		ldr	r3, .L727
 7283 000e 1B68     		ldr	r3, [r3]
 7284 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7285              	.LVL828:
2430:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7286              		.loc 1 2430 2 is_stmt 1 view .LVU2365
2430:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7287              		.loc 1 2430 5 is_stmt 0 view .LVU2366
 7288 0014 D207     		lsls	r2, r2, #31
 7289 0016 1DD4     		bmi	.L725
2433:src/display.c **** 	  decNumber x;
 7290              		.loc 1 2433 7 is_stmt 1 view .LVU2367
2433:src/display.c **** 	  decNumber x;
 7291              		.loc 1 2433 10 is_stmt 0 view .LVU2368
 7292 0018 44B1     		cbz	r4, .L726
 7293              	.L723:
2444:src/display.c ****       }
 7294              		.loc 1 2444 4 is_stmt 1 view .LVU2369
2444:src/display.c ****       }
 7295              		.loc 1 2444 24 is_stmt 0 view .LVU2370
 7296 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2444:src/display.c ****       }
 7297              		.loc 1 2444 4 view .LVU2371
 7298 001e 2146     		mov	r1, r4
ARM GAS  /tmp/ccCvaEE3.s 			page 231


 7299 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7300 0024 FFF7FEFF 		bl	set_x
 7301              	.LVL829:
2445:src/display.c **** 
 7302              		.loc 1 2445 7 view .LVU2372
 7303 0028 0BB0     		add	sp, sp, #44
 7304              		.cfi_remember_state
 7305              		.cfi_def_cfa_offset 12
 7306              		@ sp needed
 7307 002a 30BD     		pop	{r4, r5, pc}
 7308              	.LVL830:
 7309              	.L726:
 7310              		.cfi_restore_state
2433:src/display.c **** 	  decNumber x;
 7311              		.loc 1 2433 32 discriminator 1 view .LVU2373
 7312 002c 0E4A     		ldr	r2, .L727+4
2433:src/display.c **** 	  decNumber x;
 7313              		.loc 1 2433 23 discriminator 1 view .LVU2374
 7314 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7315 0030 012A     		cmp	r2, #1
 7316 0032 F2D9     		bls	.L723
 7317              	.LVL831:
 7318              	.LBB435:
 7319              	.LBI435:
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7320              		.loc 1 2427 12 is_stmt 1 view .LVU2375
 7321              	.LBB436:
 7322              	.LBB437:
2434:src/display.c **** 	  int s;
 7323              		.loc 1 2434 4 view .LVU2376
2435:src/display.c **** 	  unsigned long long int v;
 7324              		.loc 1 2435 4 view .LVU2377
2436:src/display.c **** 
 7325              		.loc 1 2436 4 view .LVU2378
2438:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7326              		.loc 1 2438 4 view .LVU2379
 7327 0034 2946     		mov	r1, r5
 7328 0036 01A8     		add	r0, sp, #4
 7329              	.LVL832:
2438:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7330              		.loc 1 2438 4 is_stmt 0 view .LVU2380
 7331 0038 FFF7FEFF 		bl	getRegister
 7332              	.LVL833:
2439:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7333              		.loc 1 2439 4 is_stmt 1 view .LVU2381
2439:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7334              		.loc 1 2439 8 is_stmt 0 view .LVU2382
 7335 003c 01A8     		add	r0, sp, #4
 7336 003e 6946     		mov	r1, sp
 7337 0040 FFF7FEFF 		bl	dn_to_ull
 7338              	.LVL834:
2440:src/display.c **** 	}
 7339              		.loc 1 2440 4 is_stmt 1 view .LVU2383
 7340 0044 009A     		ldr	r2, [sp]
 7341 0046 FFF7FEFF 		bl	build_value
 7342              	.LVL835:
2440:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 232


 7343              		.loc 1 2440 4 is_stmt 0 view .LVU2384
 7344 004a 2246     		mov	r2, r4
 7345 004c FFF7FEFF 		bl	set_int_x
 7346              	.LVL836:
 7347              	.LBE437:
 7348              	.LBE436:
 7349              	.LBE435:
2445:src/display.c **** 
 7350              		.loc 1 2445 7 view .LVU2385
 7351 0050 0BB0     		add	sp, sp, #44
 7352              		.cfi_remember_state
 7353              		.cfi_def_cfa_offset 12
 7354              		@ sp needed
 7355 0052 30BD     		pop	{r4, r5, pc}
 7356              	.LVL837:
 7357              	.L725:
 7358              		.cfi_restore_state
2431:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7359              		.loc 1 2431 4 is_stmt 1 view .LVU2386
 7360 0054 2846     		mov	r0, r5
 7361              	.LVL838:
2431:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7362              		.loc 1 2431 4 is_stmt 0 view .LVU2387
 7363 0056 FFF7FEFF 		bl	get_reg_n_int
 7364              	.LVL839:
 7365 005a 2246     		mov	r2, r4
 7366 005c FFF7FEFF 		bl	set_int_x
 7367              	.LVL840:
2445:src/display.c **** 
 7368              		.loc 1 2445 7 view .LVU2388
 7369 0060 0BB0     		add	sp, sp, #44
 7370              		.cfi_def_cfa_offset 12
 7371              		@ sp needed
 7372 0062 30BD     		pop	{r4, r5, pc}
 7373              	.LVL841:
 7374              	.L728:
2445:src/display.c **** 
 7375              		.loc 1 2445 7 view .LVU2389
 7376              		.align	2
 7377              	.L727:
 7378 0064 00000000 		.word	main_ram
 7379 0068 00000000 		.word	StateWhileOn
 7380              		.cfi_endproc
 7381              	.LFE28:
 7383              		.section	.text.set_status_right,"ax",%progbits
 7384              		.align	1
 7385              		.p2align 2,,3
 7386              		.syntax unified
 7387              		.thumb
 7388              		.thumb_func
 7389              		.fpu fpv4-sp-d16
 7391              	set_status_right:
 7392              	.LVL842:
 7393              	.LFB49:
3639:src/display.c ****       static void set_status_top(const char *str) {
3640:src/display.c **** 	if (no_status_top) return;
3641:src/display.c **** 	if (State2.runmode) {
ARM GAS  /tmp/ccCvaEE3.s 			page 233


3642:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3643:src/display.c **** 	}
3644:src/display.c **** 	else {
3645:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3646:src/display.c **** 	}
3647:src/display.c ****       }
3648:src/display.c **** #ifdef TOP_ROW
3649:src/display.c ****       static void set_status_top_always(const char *str) {
3650:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3651:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3652:src/display.c ****       }
3653:src/display.c **** #endif
3654:src/display.c **** 
3655:src/display.c ****       /*
3656:src/display.c ****        *  Display messages (global function)
3657:src/display.c ****        */
3658:src/display.c ****       extern void message(const char *str1, const char *str2)
3659:src/display.c ****       {
3660:src/display.c **** 	State2.disp_freeze = 0;
3661:src/display.c **** 	State2.disp_small = 0;
3662:src/display.c **** 	WasDataEntry = 0;
3663:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3664:src/display.c **** 	  // Complete redraw necessary
3665:src/display.c **** 	  DispMsg = str1;
3666:src/display.c **** 	  display();
3667:src/display.c **** 	}
3668:src/display.c **** 	else {
3669:src/display.c **** 	  if ( str2 != NULL ) {
3670:src/display.c **** 	    reset_disp();
3671:src/display.c **** 	    ShowRPN = 0;
3672:src/display.c **** 	    set_annunciators();
3673:src/display.c **** 	    set_digits_string( str2, 0 );
3674:src/display.c **** 	  }
3675:src/display.c **** 	  set_status( str1 );
3676:src/display.c **** 	  finish_display();// message
3677:src/display.c **** 	}
3678:src/display.c ****       }
3679:src/display.c **** 
3680:src/display.c **** #ifdef INCLUDE_STOPWATCH
3681:src/display.c **** 
3682:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3683:src/display.c **** 	int j = SEGS_EXP_BASE;
3684:src/display.c **** 	for (; *exponent!=0; exponent++) {
3685:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3686:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3687:src/display.c **** 	}
3688:src/display.c ****       }
3689:src/display.c **** 
3690:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3691:src/display.c ****       {
3692:src/display.c **** #ifndef REALBUILD
3693:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3694:src/display.c **** #endif
3695:src/display.c **** 	reset_disp();
3696:src/display.c **** 	set_dot(DEG);
3697:src/display.c **** 	set_digits_string( str2, 0 );
3698:src/display.c **** 	State2.disp_small = force_small;
ARM GAS  /tmp/ccCvaEE3.s 			page 234


3699:src/display.c **** 	if( exponent!=NULL ) {
3700:src/display.c **** 	  stopwatch_exponent(exponent);
3701:src/display.c **** 	}
3702:src/display.c **** 	set_status( str1 );
3703:src/display.c **** 	finish_display();
3704:src/display.c ****       }
3705:src/display.c **** 
3706:src/display.c **** 
3707:src/display.c **** #endif // INCLUDE_STOPWATCH
3708:src/display.c **** 
3709:src/display.c ****       /* Display the right hand characters from the given string.
3710:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3711:src/display.c ****        * and reduce font size if required.
3712:src/display.c ****        */
3713:src/display.c ****       static void set_status_right(const char *str) {
 7394              		.loc 1 3713 53 is_stmt 1 view -0
 7395              		.cfi_startproc
 7396              		@ args = 0, pretend = 0, frame = 0
 7397              		@ frame_needed = 0, uses_anonymous_args = 0
3714:src/display.c **** 	unsigned int x = 0;
 7398              		.loc 1 3714 2 view .LVU2391
3715:src/display.c **** 	const char *p;
 7399              		.loc 1 3715 2 view .LVU2392
3716:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7400              		.loc 1 3716 2 view .LVU2393
3713:src/display.c **** 	unsigned int x = 0;
 7401              		.loc 1 3713 53 is_stmt 0 view .LVU2394
 7402 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7403              		.cfi_def_cfa_offset 28
 7404              		.cfi_offset 4, -28
 7405              		.cfi_offset 5, -24
 7406              		.cfi_offset 6, -20
 7407              		.cfi_offset 7, -16
 7408              		.cfi_offset 8, -12
 7409              		.cfi_offset 9, -8
 7410              		.cfi_offset 14, -4
 7411              		.loc 1 3716 23 view .LVU2395
 7412 0004 194B     		ldr	r3, .L744
 7413              		.loc 1 3716 41 view .LVU2396
 7414 0006 93F91630 		ldrsb	r3, [r3, #22]
 7415 000a 002B     		cmp	r3, #0
3713:src/display.c **** 	unsigned int x = 0;
 7416              		.loc 1 3713 53 view .LVU2397
 7417 000c 83B0     		sub	sp, sp, #12
 7418              		.cfi_def_cfa_offset 40
3713:src/display.c **** 	unsigned int x = 0;
 7419              		.loc 1 3713 53 view .LVU2398
 7420 000e 0646     		mov	r6, r0
 7421              		.loc 1 3716 41 view .LVU2399
 7422 0010 23DA     		bge	.L743
 7423              	.LVL843:
 7424              	.L730:
 7425              		.loc 1 3716 12 view .LVU2400
 7426 0012 4FF00108 		mov	r8, #1
3717:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7427              		.loc 1 3717 36 view .LVU2401
 7428 0016 4FF48077 		mov	r7, #256
ARM GAS  /tmp/ccCvaEE3.s 			page 235


 7429              	.L731:
 7430              	.LVL844:
3718:src/display.c **** 
3719:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7431              		.loc 1 3719 2 is_stmt 1 discriminator 4 view .LVU2402
 7432              		.loc 1 3719 14 discriminator 4 view .LVU2403
 7433              		.loc 1 3719 2 is_stmt 0 discriminator 4 view .LVU2404
 7434 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7435 001c 3446     		mov	r4, r6
 7436 001e 1BB1     		cbz	r3, .L732
 7437              	.LVL845:
 7438              	.L733:
 7439              		.loc 1 3719 30 is_stmt 1 discriminator 3 view .LVU2405
 7440              		.loc 1 3719 26 discriminator 3 view .LVU2406
 7441              		.loc 1 3719 14 discriminator 3 view .LVU2407
 7442              		.loc 1 3719 2 is_stmt 0 discriminator 3 view .LVU2408
 7443 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7444              	.LVL846:
 7445              		.loc 1 3719 2 discriminator 3 view .LVU2409
 7446 0024 002B     		cmp	r3, #0
 7447 0026 FBD1     		bne	.L733
 7448              	.L732:
3714:src/display.c **** 	const char *p;
 7449              		.loc 1 3714 15 view .LVU2410
 7450 0028 0025     		movs	r5, #0
 7451 002a 06E0     		b	.L734
 7452              	.LVL847:
 7453              	.L735:
 7454              	.LBB438:
3720:src/display.c **** 	while (--p >= str) {
3721:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7455              		.loc 1 3721 27 view .LVU2411
 7456 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3722:src/display.c **** 
3723:src/display.c **** 	  x += charlengths(c);
 7457              		.loc 1 3723 9 view .LVU2412
 7458 002e 3844     		add	r0, r0, r7
 7459 0030 FFF7FEFF 		bl	charlengths
 7460              	.LVL848:
 7461              		.loc 1 3723 6 view .LVU2413
 7462 0034 0544     		add	r5, r5, r0
 7463              	.LVL849:
3724:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7464              		.loc 1 3724 4 is_stmt 1 view .LVU2414
 7465              		.loc 1 3724 7 is_stmt 0 view .LVU2415
 7466 0036 4B2D     		cmp	r5, #75
 7467 0038 03D8     		bhi	.L736
 7468              	.LVL850:
 7469              	.L734:
3721:src/display.c **** 
 7470              		.loc 1 3721 4 is_stmt 1 view .LVU2416
3721:src/display.c **** 
 7471              		.loc 1 3721 4 is_stmt 0 view .LVU2417
 7472              	.LBE438:
3720:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7473              		.loc 1 3720 8 is_stmt 1 view .LVU2418
 7474 003a A146     		mov	r9, r4
ARM GAS  /tmp/ccCvaEE3.s 			page 236


 7475 003c 013C     		subs	r4, r4, #1
 7476              	.LVL851:
 7477              	.LBB439:
3723:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7478              		.loc 1 3723 4 view .LVU2419
3723:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7479              		.loc 1 3723 4 is_stmt 0 view .LVU2420
 7480              	.LBE439:
3720:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7481              		.loc 1 3720 8 view .LVU2421
 7482 003e A642     		cmp	r6, r4
 7483 0040 F4D9     		bls	.L735
 7484              	.LVL852:
 7485              	.L736:
3725:src/display.c **** 	    break;
3726:src/display.c **** 	}
3727:src/display.c **** 	set_status_sized(p+1, toolarge);
 7486              		.loc 1 3727 2 is_stmt 1 view .LVU2422
 7487              	.LBB440:
 7488              	.LBI440:
3478:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7489              		.loc 1 3478 19 view .LVU2423
 7490              	.LBB441:
3479:src/display.c ****       }
 7491              		.loc 1 3479 2 view .LVU2424
 7492 0042 40F24A23 		movw	r3, #586
 7493 0046 0093     		str	r3, [sp]
 7494 0048 4146     		mov	r1, r8
 7495 004a 4846     		mov	r0, r9
 7496 004c 8E23     		movs	r3, #142
 7497 004e 4A22     		movs	r2, #74
 7498 0050 FFF7FEFF 		bl	s_s_sized
 7499              	.LVL853:
3479:src/display.c ****       }
 7500              		.loc 1 3479 2 is_stmt 0 view .LVU2425
 7501              	.LBE441:
 7502              	.LBE440:
3728:src/display.c ****       }
 7503              		.loc 1 3728 7 view .LVU2426
 7504 0054 03B0     		add	sp, sp, #12
 7505              		.cfi_remember_state
 7506              		.cfi_def_cfa_offset 28
 7507              		@ sp needed
 7508 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7509              	.LVL854:
 7510              	.L743:
 7511              		.cfi_restore_state
 7512              	.LBB442:
 7513              	.LBI442:
3626:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7514              		.loc 1 3626 18 is_stmt 1 view .LVU2427
 7515              	.LBB443:
3627:src/display.c ****       }
 7516              		.loc 1 3627 2 view .LVU2428
3627:src/display.c ****       }
 7517              		.loc 1 3627 9 is_stmt 0 view .LVU2429
 7518 005a 0021     		movs	r1, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 237


 7519 005c FFF7FEFF 		bl	pixel_length
 7520              	.LVL855:
3627:src/display.c ****       }
 7521              		.loc 1 3627 9 view .LVU2430
 7522              	.LBE443:
 7523              	.LBE442:
3716:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7524              		.loc 1 3716 41 view .LVU2431
 7525 0060 4B28     		cmp	r0, #75
 7526 0062 D6DC     		bgt	.L730
3716:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7527              		.loc 1 3716 12 view .LVU2432
 7528 0064 4FF00008 		mov	r8, #0
3717:src/display.c **** 
 7529              		.loc 1 3717 36 view .LVU2433
 7530 0068 4746     		mov	r7, r8
 7531 006a D6E7     		b	.L731
 7532              	.L745:
 7533              		.align	2
 7534              	.L744:
 7535 006c 00000000 		.word	StateWhileOn
 7536              		.cfi_endproc
 7537              	.LFE49:
 7539              		.section	.text.set_status_top.part.0,"ax",%progbits
 7540              		.align	1
 7541              		.p2align 2,,3
 7542              		.syntax unified
 7543              		.thumb
 7544              		.thumb_func
 7545              		.fpu fpv4-sp-d16
 7547              	set_status_top.part.0:
 7548              	.LVL856:
 7549              	.LFB58:
3639:src/display.c **** 	if (no_status_top) return;
 7550              		.loc 1 3639 19 is_stmt 1 view -0
 7551              		.cfi_startproc
 7552              		@ args = 0, pretend = 0, frame = 0
 7553              		@ frame_needed = 0, uses_anonymous_args = 0
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7554              		.loc 1 3641 2 view .LVU2435
3639:src/display.c **** 	if (no_status_top) return;
 7555              		.loc 1 3639 19 is_stmt 0 view .LVU2436
 7556 0000 10B5     		push	{r4, lr}
 7557              		.cfi_def_cfa_offset 8
 7558              		.cfi_offset 4, -8
 7559              		.cfi_offset 14, -4
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7560              		.loc 1 3641 6 view .LVU2437
 7561 0002 184B     		ldr	r3, .L756
 7562 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7563              		.loc 1 3641 5 view .LVU2438
 7564 0006 13F04001 		ands	r1, r3, #64
3639:src/display.c **** 	if (no_status_top) return;
 7565              		.loc 1 3639 19 view .LVU2439
 7566 000a 82B0     		sub	sp, sp, #8
 7567              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccCvaEE3.s 			page 238


3639:src/display.c **** 	if (no_status_top) return;
 7568              		.loc 1 3639 19 view .LVU2440
 7569 000c 0446     		mov	r4, r0
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7570              		.loc 1 3641 5 view .LVU2441
 7571 000e 0DD0     		beq	.L747
3642:src/display.c **** 	}
 7572              		.loc 1 3642 4 is_stmt 1 view .LVU2442
 7573 0010 1A06     		lsls	r2, r3, #24
 7574 0012 18D5     		bpl	.L754
 7575 0014 0121     		movs	r1, #1
 7576              	.LVL857:
 7577              	.L748:
 7578              	.LBB444:
 7579              	.LBI444:
3481:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7580              		.loc 1 3481 19 view .LVU2443
 7581              	.LBB445:
3482:src/display.c ****       }
 7582              		.loc 1 3482 2 view .LVU2444
 7583 0016 4FF45373 		mov	r3, #844
 7584 001a 0093     		str	r3, [sp]
 7585 001c 2046     		mov	r0, r4
 7586 001e 40F24A23 		movw	r3, #586
 7587 0022 2B22     		movs	r2, #43
 7588 0024 FFF7FEFF 		bl	s_s_sized
 7589              	.LVL858:
3482:src/display.c ****       }
 7590              		.loc 1 3482 2 is_stmt 0 view .LVU2445
 7591              	.LBE445:
 7592              	.LBE444:
3647:src/display.c **** #ifdef TOP_ROW
 7593              		.loc 1 3647 7 view .LVU2446
 7594 0028 02B0     		add	sp, sp, #8
 7595              		.cfi_remember_state
 7596              		.cfi_def_cfa_offset 8
 7597              		@ sp needed
 7598 002a 10BD     		pop	{r4, pc}
 7599              	.LVL859:
 7600              	.L747:
 7601              		.cfi_restore_state
3645:src/display.c **** 	}
 7602              		.loc 1 3645 4 is_stmt 1 view .LVU2447
 7603 002c 1B06     		lsls	r3, r3, #24
 7604 002e 12D5     		bpl	.L755
 7605 0030 0121     		movs	r1, #1
 7606              	.LVL860:
 7607              	.L750:
 7608              	.LBB446:
 7609              	.LBI446:
3478:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7610              		.loc 1 3478 19 view .LVU2448
 7611              	.LBB447:
3479:src/display.c ****       }
 7612              		.loc 1 3479 2 view .LVU2449
 7613 0032 40F24A23 		movw	r3, #586
 7614 0036 0093     		str	r3, [sp]
ARM GAS  /tmp/ccCvaEE3.s 			page 239


 7615 0038 2046     		mov	r0, r4
 7616 003a 8E23     		movs	r3, #142
 7617 003c 4A22     		movs	r2, #74
 7618 003e FFF7FEFF 		bl	s_s_sized
 7619              	.LVL861:
3479:src/display.c ****       }
 7620              		.loc 1 3479 2 is_stmt 0 view .LVU2450
 7621              	.LBE447:
 7622              	.LBE446:
3647:src/display.c **** #ifdef TOP_ROW
 7623              		.loc 1 3647 7 view .LVU2451
 7624 0042 02B0     		add	sp, sp, #8
 7625              		.cfi_remember_state
 7626              		.cfi_def_cfa_offset 8
 7627              		@ sp needed
 7628 0044 10BD     		pop	{r4, pc}
 7629              	.LVL862:
 7630              	.L754:
 7631              		.cfi_restore_state
 7632              	.LBB448:
 7633              	.LBI448:
3629:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7634              		.loc 1 3629 18 is_stmt 1 view .LVU2452
 7635              	.LBB449:
3630:src/display.c ****       }
 7636              		.loc 1 3630 2 view .LVU2453
3630:src/display.c ****       }
 7637              		.loc 1 3630 9 is_stmt 0 view .LVU2454
 7638 0046 0021     		movs	r1, #0
 7639 0048 FFF7FEFF 		bl	pixel_length
 7640              	.LVL863:
3630:src/display.c ****       }
 7641              		.loc 1 3630 9 view .LVU2455
 7642              	.LBE449:
 7643              	.LBE448:
3642:src/display.c **** 	}
 7644              		.loc 1 3642 4 view .LVU2456
 7645 004c 2C28     		cmp	r0, #44
 7646 004e D4BF     		ite	le
 7647 0050 0021     		movle	r1, #0
 7648 0052 0121     		movgt	r1, #1
 7649 0054 DFE7     		b	.L748
 7650              	.LVL864:
 7651              	.L755:
 7652              	.LBB450:
 7653              	.LBI450:
3626:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7654              		.loc 1 3626 18 is_stmt 1 view .LVU2457
 7655              	.LBB451:
3627:src/display.c ****       }
 7656              		.loc 1 3627 2 view .LVU2458
3627:src/display.c ****       }
 7657              		.loc 1 3627 9 is_stmt 0 view .LVU2459
 7658 0056 FFF7FEFF 		bl	pixel_length
 7659              	.LVL865:
3627:src/display.c ****       }
 7660              		.loc 1 3627 9 view .LVU2460
ARM GAS  /tmp/ccCvaEE3.s 			page 240


 7661              	.LBE451:
 7662              	.LBE450:
3645:src/display.c **** 	}
 7663              		.loc 1 3645 4 view .LVU2461
 7664 005a 4B28     		cmp	r0, #75
 7665 005c D4BF     		ite	le
 7666 005e 0021     		movle	r1, #0
 7667 0060 0121     		movgt	r1, #1
 7668 0062 E6E7     		b	.L750
 7669              	.L757:
 7670              		.align	2
 7671              	.L756:
 7672 0064 00000000 		.word	StateWhileOn
 7673              		.cfi_endproc
 7674              	.LFE58:
 7676              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7677              		.align	2
 7678              	.LC2:
 7679 0000 32630600 		.ascii	"2c\006\000"
 7680              		.align	2
 7681              	.LC3:
 7682 0004 07C63C00 		.ascii	"\007\306<\000"
 7683              		.align	2
 7684              	.LC4:
 7685 0008 07876900 		.ascii	"\007\207i\000"
 7686              		.align	2
 7687              	.LC5:
 7688 000c 07C67900 		.ascii	"\007\306y\000"
 7689              		.align	2
 7690              	.LC6:
 7691 0010 07950600 		.ascii	"\007\225\006\000"
 7692              		.align	2
 7693              	.LC7:
 7694 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7694      060600
 7695 001b 00       		.align	2
 7696              	.LC8:
 7697 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7697      060600
 7698 0023 00       		.align	2
 7699              	.LC9:
 7700 0024 07C74400 		.ascii	"\007\307D\000"
 7701              		.align	2
 7702              	.LC10:
 7703 0028 07872000 		.ascii	"\007\207 \000"
 7704              		.align	2
 7705              	.LC11:
 7706 002c 4C656E67 		.ascii	"Length:\000"
 7706      74683A00 
 7707              		.align	2
 7708              	.LC12:
 7709 0034 5265616C 		.ascii	"Real:\000"
 7709      3A00
 7710 003a 0000     		.align	2
 7711              	.LC13:
 7712 003c 416E676C 		.ascii	"Angle:\000"
 7712      653A00
ARM GAS  /tmp/ccCvaEE3.s 			page 241


 7713 0043 00       		.align	2
 7714              	.LC14:
 7715 0044 496D6167 		.ascii	"Imag:\000"
 7715      3A00
 7716 004a 0000     		.align	2
 7717              	.LC15:
 7718 004c 07876A00 		.ascii	"\007\207j\000"
 7719              		.align	2
 7720              	.LC16:
 7721 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7721      0700
 7722 0056 0000     		.align	2
 7723              	.LC17:
 7724 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7724      00
 7725 005d 000000   		.align	2
 7726              	.LC18:
 7727 0060 07C73C00 		.ascii	"\007\307<\000"
 7728              		.align	2
 7729              	.LC19:
 7730 0064 07C77900 		.ascii	"\007\307y\000"
 7731              		.align	2
 7732              	.LC21:
 7733 0068 07E43F00 		.ascii	"\007\344?\000"
 7734              		.section	.text.annunciators,"ax",%progbits
 7735              		.align	1
 7736              		.p2align 2,,3
 7737              		.syntax unified
 7738              		.thumb
 7739              		.thumb_func
 7740              		.fpu fpv4-sp-d16
 7742              	annunciators:
 7743              	.LFB16:
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7744              		.loc 1 609 36 is_stmt 1 view -0
 7745              		.cfi_startproc
 7746              		@ args = 0, pretend = 0, frame = 128
 7747              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 7748              		.loc 1 611 7 view .LVU2463
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7749              		.loc 1 609 36 is_stmt 0 view .LVU2464
 7750 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7751              		.cfi_def_cfa_offset 28
 7752              		.cfi_offset 4, -28
 7753              		.cfi_offset 5, -24
 7754              		.cfi_offset 6, -20
 7755              		.cfi_offset 7, -16
 7756              		.cfi_offset 8, -12
 7757              		.cfi_offset 9, -8
 7758              		.cfi_offset 14, -4
 623:src/display.c **** #  endif
 7759              		.loc 1 623 38 view .LVU2465
 7760 0004 7F4C     		ldr	r4, .L920
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7761              		.loc 1 609 36 view .LVU2466
 7762 0006 A3B0     		sub	sp, sp, #140
ARM GAS  /tmp/ccCvaEE3.s 			page 242


 7763              		.cfi_def_cfa_offset 168
 7764              	.LVL866:
 612:src/display.c ****       int n;
 7765              		.loc 1 612 7 is_stmt 1 view .LVU2467
 613:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7766              		.loc 1 613 7 view .LVU2468
 614:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7767              		.loc 1 614 7 view .LVU2469
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7768              		.loc 1 615 7 view .LVU2470
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7769              		.loc 1 615 43 is_stmt 0 view .LVU2471
 7770 0008 FFF7FEFF 		bl	cur_shift
 7771              	.LVL867:
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7772              		.loc 1 615 18 view .LVU2472
 7773 000c 7E4B     		ldr	r3, .L920+4
 623:src/display.c **** #  endif
 7774              		.loc 1 623 38 view .LVU2473
 7775 000e 2268     		ldr	r2, [r4]
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7776              		.loc 1 615 18 view .LVU2474
 7777 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7778              	.LVL868:
 623:src/display.c **** #  endif
 7779              		.loc 1 623 7 is_stmt 1 view .LVU2475
 623:src/display.c **** #  endif
 7780              		.loc 1 623 38 is_stmt 0 view .LVU2476
 7781 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7782              		.loc 1 654 7 view .LVU2477
 7783 0018 0CAE     		add	r6, sp, #48
 7784              	.LVL869:
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7785              		.loc 1 654 7 view .LVU2478
 7786 001a 2A22     		movs	r2, #42
 7787 001c 0021     		movs	r1, #0
 7788 001e 3046     		mov	r0, r6
 7789 0020 FFF7FEFF 		bl	xset
 7790              	.LVL870:
 655:src/display.c ****       
 7791              		.loc 1 655 7 view .LVU2479
 7792 0024 2A22     		movs	r2, #42
 7793 0026 0021     		movs	r1, #0
 7794 0028 17A8     		add	r0, sp, #92
 7795              	.LVL871:
 655:src/display.c ****       
 7796              		.loc 1 655 7 view .LVU2480
 7797 002a FFF7FEFF 		bl	xset
 7798              	.LVL872:
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7799              		.loc 1 657 11 view .LVU2481
 7800 002e 2368     		ldr	r3, [r4]
 7801 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7802              		.loc 1 657 10 view .LVU2482
 7803 0034 D107     		lsls	r1, r2, #31
ARM GAS  /tmp/ccCvaEE3.s 			page 243


 623:src/display.c **** #  endif
 7804              		.loc 1 623 17 view .LVU2483
 7805 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7806              	.LVL873:
 626:src/display.c **** #  else
 7807              		.loc 1 626 7 is_stmt 1 view .LVU2484
 631:src/display.c **** #  else
 7808              		.loc 1 631 7 view .LVU2485
 641:src/display.c **** #else
 7809              		.loc 1 641 7 view .LVU2486
 649:src/display.c **** #else
 7810              		.loc 1 649 7 view .LVU2487
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7811              		.loc 1 654 7 view .LVU2488
 655:src/display.c ****       
 7812              		.loc 1 655 7 view .LVU2489
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7813              		.loc 1 657 7 view .LVU2490
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7814              		.loc 1 657 10 is_stmt 0 view .LVU2491
 7815 003a 00F1FD80 		bmi	.L902
 697:src/display.c **** #else
 7816              		.loc 1 697 12 is_stmt 1 view .LVU2492
 697:src/display.c **** #else
 7817              		.loc 1 697 15 is_stmt 0 view .LVU2493
 7818 003e 002F     		cmp	r7, #0
 7819 0040 00F09A80 		beq	.L903
 7820              	.L773:
 783:src/display.c **** 	  *p2++ = '\007';
 7821              		.loc 1 783 2 is_stmt 1 view .LVU2494
 783:src/display.c **** 	  *p2++ = '\007';
 7822              		.loc 1 783 6 is_stmt 0 view .LVU2495
 7823 0044 714D     		ldr	r5, .L920+8
 7824 0046 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 783:src/display.c **** 	  *p2++ = '\007';
 7825              		.loc 1 783 5 view .LVU2496
 7826 0048 9A07     		lsls	r2, r3, #30
 7827 004a 40F1B081 		bpl	.L782
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7828              		.loc 1 784 4 is_stmt 1 view .LVU2497
 7829              	.LVL874:
 785:src/display.c **** 	  *p2++ = shift_char;
 7830              		.loc 1 785 4 view .LVU2498
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7831              		.loc 1 784 10 is_stmt 0 view .LVU2499
 7832 004e 4EF20742 		movw	r2, #58375
 787:src/display.c **** 	}
 7833              		.loc 1 787 10 view .LVU2500
 7834 0052 1423     		movs	r3, #20
 786:src/display.c **** 	  *p2++ = '\024';
 7835              		.loc 1 786 10 view .LVU2501
 7836 0054 8DF85E80 		strb	r8, [sp, #94]
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7837              		.loc 1 784 10 view .LVU2502
 7838 0058 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 786:src/display.c **** 	  *p2++ = '\024';
 7839              		.loc 1 786 4 is_stmt 1 view .LVU2503
ARM GAS  /tmp/ccCvaEE3.s 			page 244


 7840              	.LVL875:
 787:src/display.c **** 	}
 7841              		.loc 1 787 4 view .LVU2504
 787:src/display.c **** 	}
 7842              		.loc 1 787 10 is_stmt 0 view .LVU2505
 7843 005c 8DF85F30 		strb	r3, [sp, #95]
 787:src/display.c **** 	}
 7844              		.loc 1 787 7 view .LVU2506
 7845 0060 0DF16008 		add	r8, sp, #96
 7846              	.LVL876:
 7847              	.L783:
 796:src/display.c **** 	  *p2++ = '\007';
 7848              		.loc 1 796 2 is_stmt 1 view .LVU2507
 796:src/display.c **** 	  *p2++ = '\007';
 7849              		.loc 1 796 6 is_stmt 0 view .LVU2508
 7850 0064 FFF7FEFF 		bl	get_trig_mode
 7851              	.LVL877:
 797:src/display.c **** 	  *p2++ = '\207';
 7852              		.loc 1 797 10 view .LVU2509
 7853 0068 0723     		movs	r3, #7
 796:src/display.c **** 	  *p2++ = '\007';
 7854              		.loc 1 796 5 view .LVU2510
 7855 006a 0228     		cmp	r0, #2
 798:src/display.c **** 	  *p2++ = '\007';	    
 7856              		.loc 1 798 10 view .LVU2511
 7857 006c 4FF08702 		mov	r2, #135
 797:src/display.c **** 	  *p2++ = '\207';
 7858              		.loc 1 797 10 view .LVU2512
 7859 0070 88F80030 		strb	r3, [r8]
 796:src/display.c **** 	  *p2++ = '\007';
 7860              		.loc 1 796 5 view .LVU2513
 7861 0074 00F02082 		beq	.L904
 802:src/display.c **** 	  *p2++ = '\207';
 7862              		.loc 1 802 4 is_stmt 1 view .LVU2514
 7863              	.LVL878:
 803:src/display.c **** 	  *p2++ = ' ';
 7864              		.loc 1 803 4 view .LVU2515
 804:src/display.c **** 	}
 7865              		.loc 1 804 10 is_stmt 0 view .LVU2516
 7866 0078 2023     		movs	r3, #32
 803:src/display.c **** 	  *p2++ = ' ';
 7867              		.loc 1 803 10 view .LVU2517
 7868 007a 88F80120 		strb	r2, [r8, #1]
 804:src/display.c **** 	}
 7869              		.loc 1 804 4 is_stmt 1 view .LVU2518
 804:src/display.c **** 	}
 7870              		.loc 1 804 10 is_stmt 0 view .LVU2519
 7871 007e 88F80230 		strb	r3, [r8, #2]
 804:src/display.c **** 	}
 7872              		.loc 1 804 7 view .LVU2520
 7873 0082 08F10308 		add	r8, r8, #3
 7874              	.LVL879:
 7875              	.L785:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7876              		.loc 1 808 2 is_stmt 1 view .LVU2521
 808:src/display.c **** 	p2 = scopy(p2, q);
 7877              		.loc 1 808 7 is_stmt 0 view .LVU2522
ARM GAS  /tmp/ccCvaEE3.s 			page 245


 7878 0086 FFF7FEFF 		bl	is_dblmode
 7879              	.LVL880:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7880              		.loc 1 808 34 view .LVU2523
 7881 008a 614B     		ldr	r3, .L920+12
 7882 008c 614A     		ldr	r2, .L920+16
 808:src/display.c **** 	p2 = scopy(p2, q);
 7883              		.loc 1 808 7 view .LVU2524
 7884 008e 0146     		mov	r1, r0
 7885              	.LVL881:
 809:src/display.c **** #else
 7886              		.loc 1 809 2 is_stmt 1 view .LVU2525
 809:src/display.c **** #else
 7887              		.loc 1 809 7 is_stmt 0 view .LVU2526
 7888 0090 0029     		cmp	r1, #0
 7889 0092 14BF     		ite	ne
 7890 0094 1146     		movne	r1, r2
 7891 0096 1946     		moveq	r1, r3
 7892              	.LVL882:
 809:src/display.c **** #else
 7893              		.loc 1 809 7 view .LVU2527
 7894 0098 4046     		mov	r0, r8
 7895 009a FFF7FEFF 		bl	scopy
 7896              	.LVL883:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7897              		.loc 1 825 16 view .LVU2528
 7898 009e 2368     		ldr	r3, [r4]
 7899 00a0 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7900 00a4 C1F30111 		ubfx	r1, r1, #4, #2
 7901              	.LVL884:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7902              		.loc 1 825 2 is_stmt 1 view .LVU2529
 7903 00a8 0129     		cmp	r1, #1
 7904 00aa 00F00C82 		beq	.L838
 7905 00ae 5A4B     		ldr	r3, .L920+20
 7906 00b0 5A4A     		ldr	r2, .L920+24
 7907 00b2 0229     		cmp	r1, #2
 7908 00b4 14BF     		ite	ne
 7909 00b6 1946     		movne	r1, r3
 7910 00b8 1146     		moveq	r1, r2
 7911              	.L787:
 7912              	.LVL885:
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7913              		.loc 1 842 2 view .LVU2530
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7914              		.loc 1 842 6 is_stmt 0 view .LVU2531
 7915 00ba 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7916              		.loc 1 842 5 view .LVU2532
 7917 00bc 5B07     		lsls	r3, r3, #29
 843:src/display.c **** 	} // no need to skip y display with arrow here
 7918              		.loc 1 843 4 is_stmt 1 view .LVU2533
 7919 00be 48BF     		it	mi
 7920 00c0 5749     		ldrmi	r1, .L920+28
 7921              	.LVL886:
 846:src/display.c **** 	}
 7922              		.loc 1 846 4 view .LVU2534
ARM GAS  /tmp/ccCvaEE3.s 			page 246


 846:src/display.c **** 	}
 7923              		.loc 1 846 9 is_stmt 0 view .LVU2535
 7924 00c2 FFF7FEFF 		bl	scopy
 7925              	.LVL887:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7926              		.loc 1 850 2 is_stmt 1 view .LVU2536
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7927              		.loc 1 850 18 is_stmt 0 view .LVU2537
 7928 00c6 2368     		ldr	r3, [r4]
 7929 00c8 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7930              		.loc 1 850 5 view .LVU2538
 7931 00cc 13F0060F 		tst	r3, #6
 7932 00d0 04D0     		beq	.L790
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7933              		.loc 1 850 32 discriminator 1 view .LVU2539
 7934 00d2 03F04102 		and	r2, r3, #65
 7935 00d6 412A     		cmp	r2, #65
 7936 00d8 00F01882 		beq	.L905
 7937              	.L790:
 860:src/display.c **** 	  q = "\007\307<";
 7938              		.loc 1 860 7 is_stmt 1 view .LVU2540
 860:src/display.c **** 	  q = "\007\307<";
 7939              		.loc 1 860 22 is_stmt 0 view .LVU2541
 7940 00dc DFF85091 		ldr	r9, .L920+44
 7941 00e0 D9F80020 		ldr	r2, [r9]
 860:src/display.c **** 	  q = "\007\307<";
 7942              		.loc 1 860 10 view .LVU2542
 7943 00e4 012A     		cmp	r2, #1
 7944 00e6 00F07481 		beq	.L793
 860:src/display.c **** 	  q = "\007\307<";
 7945              		.loc 1 860 43 discriminator 1 view .LVU2543
 7946 00ea 03F0C101 		and	r1, r3, #193
 7947 00ee C129     		cmp	r1, #193
 7948 00f0 00F06F81 		beq	.L793
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7949              		.loc 1 864 7 is_stmt 1 view .LVU2544
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7950              		.loc 1 864 11 is_stmt 0 view .LVU2545
 7951 00f4 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7952              		.loc 1 864 10 view .LVU2546
 7953 00f6 11F0C00F 		tst	r1, #192
 7954 00fa 00F06381 		beq	.L906
 7955              	.L796:
 865:src/display.c **** 	  p = scopy(p, q);
 7956              		.loc 1 865 4 is_stmt 1 view .LVU2547
 865:src/display.c **** 	  p = scopy(p, q);
 7957              		.loc 1 865 28 is_stmt 0 view .LVU2548
 7958 00fe 494A     		ldr	r2, .L920+32
 7959 0100 4949     		ldr	r1, .L920+36
 7960 0102 13F0200F 		tst	r3, #32
 7961              	.LVL888:
 866:src/display.c **** 	}
 7962              		.loc 1 866 4 is_stmt 1 view .LVU2549
 866:src/display.c **** 	}
 7963              		.loc 1 866 8 is_stmt 0 view .LVU2550
ARM GAS  /tmp/ccCvaEE3.s 			page 247


 7964 0106 08BF     		it	eq
 7965 0108 1146     		moveq	r1, r2
 7966              	.LVL889:
 866:src/display.c **** 	}
 7967              		.loc 1 866 8 view .LVU2551
 7968 010a 3046     		mov	r0, r6
 7969 010c FFF7FEFF 		bl	scopy
 7970              	.LVL890:
 866:src/display.c **** 	}
 7971              		.loc 1 866 8 view .LVU2552
 7972 0110 D9F80020 		ldr	r2, [r9]
 7973 0114 8046     		mov	r8, r0
 7974              	.LVL891:
 7975              	.L795:
 882:src/display.c **** 	    q = "\007\307y";
 7976              		.loc 1 882 4 is_stmt 1 view .LVU2553
 882:src/display.c **** 	    q = "\007\307y";
 7977              		.loc 1 882 7 is_stmt 0 view .LVU2554
 7978 0116 022A     		cmp	r2, #2
 7979 0118 00F0D781 		beq	.L907
 7980              	.L798:
 888:src/display.c **** 	  decNumber y;
 7981              		.loc 1 888 2 is_stmt 1 view .LVU2555
 888:src/display.c **** 	  decNumber y;
 7982              		.loc 1 888 6 is_stmt 0 view .LVU2556
 7983 011c AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 888:src/display.c **** 	  decNumber y;
 7984              		.loc 1 888 5 view .LVU2557
 7985 011e 5906     		lsls	r1, r3, #25
 7986 0120 60D5     		bpl	.L826
 7987              	.LBB462:
 889:src/display.c **** 	display_yreg:
 7988              		.loc 1 889 4 is_stmt 1 view .LVU2558
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7989              		.loc 1 896 4 view .LVU2559
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7990              		.loc 1 896 8 is_stmt 0 view .LVU2560
 7991 0122 2368     		ldr	r3, [r4]
 7992 0124 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7993              		.loc 1 896 7 view .LVU2561
 7994 0128 D207     		lsls	r2, r2, #31
 7995 012a 40F1E380 		bpl	.L800
 7996              	.L915:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7997              		.loc 1 897 6 is_stmt 1 view .LVU2562
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7998              		.loc 1 897 44 is_stmt 0 view .LVU2563
 7999 012e DFF80491 		ldr	r9, .L920+48
 8000 0132 D9F80030 		ldr	r3, [r9]
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8001              		.loc 1 897 6 view .LVU2564
 8002 0136 632B     		cmp	r3, #99
 8003 0138 00F32A82 		bgt	.L908
 8004              	.L801:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8005              		.loc 1 897 6 discriminator 5 view .LVU2565
ARM GAS  /tmp/ccCvaEE3.s 			page 248


 8006 013c 581C     		adds	r0, r3, #1
 8007              	.L805:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8008              		.loc 1 897 6 discriminator 6 view .LVU2566
 8009 013e FFF7FEFF 		bl	get_reg_n_int
 8010              	.LVL892:
 8011 0142 4246     		mov	r2, r8
 8012 0144 FFF7FEFF 		bl	set_int_x
 8013              	.LVL893:
 900:src/display.c **** 	  }
 8014              		.loc 1 900 6 is_stmt 1 discriminator 6 view .LVU2567
 8015              	.LBE462:
 989:src/display.c ****       set_status_top_always(buf2);
 8016              		.loc 1 989 7 discriminator 6 view .LVU2568
 989:src/display.c ****       set_status_top_always(buf2);
 8017              		.loc 1 989 11 is_stmt 0 discriminator 6 view .LVU2569
 8018 0148 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 989:src/display.c ****       set_status_top_always(buf2);
 8019              		.loc 1 989 10 discriminator 6 view .LVU2570
 8020 014a 5906     		lsls	r1, r3, #25
 8021 014c 4AD5     		bpl	.L826
 8022              	.LVL894:
 8023              	.L913:
 989:src/display.c ****       set_status_top_always(buf2);
 8024              		.loc 1 989 27 is_stmt 1 discriminator 1 view .LVU2571
 8025 014e 3046     		mov	r0, r6
 8026 0150 FFF7FEFF 		bl	set_status
 8027              	.LVL895:
 990:src/display.c ****       
 8028              		.loc 1 990 7 discriminator 1 view .LVU2572
 8029              	.LBB469:
 8030              	.LBI469:
3649:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8031              		.loc 1 3649 19 discriminator 1 view .LVU2573
 8032              	.LBB470:
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8033              		.loc 1 3650 2 discriminator 1 view .LVU2574
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8034              		.loc 1 3650 6 is_stmt 0 discriminator 1 view .LVU2575
 8035 0154 354B     		ldr	r3, .L920+40
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8036              		.loc 1 3650 5 discriminator 1 view .LVU2576
 8037 0156 B3F90030 		ldrsh	r3, [r3]
 8038 015a 002B     		cmp	r3, #0
 8039 015c 40F0A581 		bne	.L825
 8040 0160 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
3651:src/display.c ****       }
 8041              		.loc 1 3651 2 is_stmt 1 view .LVU2577
 8042 0162 1B06     		lsls	r3, r3, #24
 8043 0164 40D4     		bmi	.L846
 8044              	.LVL896:
 8045              	.L914:
 8046              	.LBB471:
 8047              	.LBI471:
3629:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8048              		.loc 1 3629 18 view .LVU2578
 8049              	.LBB472:
ARM GAS  /tmp/ccCvaEE3.s 			page 249


3630:src/display.c ****       }
 8050              		.loc 1 3630 2 view .LVU2579
3630:src/display.c ****       }
 8051              		.loc 1 3630 9 is_stmt 0 view .LVU2580
 8052 0166 0021     		movs	r1, #0
 8053 0168 17A8     		add	r0, sp, #92
 8054              	.LVL897:
3630:src/display.c ****       }
 8055              		.loc 1 3630 9 view .LVU2581
 8056 016a FFF7FEFF 		bl	pixel_length
 8057              	.LVL898:
3630:src/display.c ****       }
 8058              		.loc 1 3630 9 view .LVU2582
 8059              	.LBE472:
 8060              	.LBE471:
3651:src/display.c ****       }
 8061              		.loc 1 3651 2 view .LVU2583
 8062 016e 2C28     		cmp	r0, #44
 8063 0170 D4BF     		ite	le
 8064 0172 0021     		movle	r1, #0
 8065 0174 0121     		movgt	r1, #1
 8066 0176 38E0     		b	.L828
 8067              	.LVL899:
 8068              	.L903:
3651:src/display.c ****       }
 8069              		.loc 1 3651 2 view .LVU2584
 8070              	.LBE470:
 8071              	.LBE469:
 697:src/display.c **** #else
 8072              		.loc 1 697 35 discriminator 1 view .LVU2585
 8073 0178 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 697:src/display.c **** #else
 8074              		.loc 1 697 32 discriminator 1 view .LVU2586
 8075 017c 03F04103 		and	r3, r3, #65
 8076 0180 412B     		cmp	r3, #65
 8077 0182 3FF45FAF 		beq	.L773
 718:src/display.c **** 	    *p2++ = shift_char;
 8078              		.loc 1 718 4 is_stmt 1 view .LVU2587
 718:src/display.c **** 	    *p2++ = shift_char;
 8079              		.loc 1 718 7 is_stmt 0 view .LVU2588
 8080 0186 B8F1200F 		cmp	r8, #32
 8081 018a 00F0CD81 		beq	.L774
 8082              	.L776:
 719:src/display.c **** 	    *p2++ = '\006';
 8083              		.loc 1 719 6 is_stmt 1 view .LVU2589
 8084              	.LVL900:
 720:src/display.c **** 	  }
 8085              		.loc 1 720 12 is_stmt 0 view .LVU2590
 8086 018e 0623     		movs	r3, #6
 719:src/display.c **** 	    *p2++ = '\006';
 8087              		.loc 1 719 12 view .LVU2591
 8088 0190 8DF85C80 		strb	r8, [sp, #92]
 720:src/display.c **** 	  }
 8089              		.loc 1 720 6 is_stmt 1 view .LVU2592
 8090              	.LVL901:
 720:src/display.c **** 	  }
 8091              		.loc 1 720 12 is_stmt 0 view .LVU2593
ARM GAS  /tmp/ccCvaEE3.s 			page 250


 8092 0194 8DF85D30 		strb	r3, [sp, #93]
 720:src/display.c **** 	  }
 8093              		.loc 1 720 9 view .LVU2594
 8094 0198 0DF15E00 		add	r0, sp, #94
 8095              	.LVL902:
 8096              	.L775:
 726:src/display.c **** 	  *p2++ = ' ';
 8097              		.loc 1 726 2 is_stmt 1 view .LVU2595
 726:src/display.c **** 	  *p2++ = ' ';
 8098              		.loc 1 726 6 is_stmt 0 view .LVU2596
 8099 019c 1B4D     		ldr	r5, .L920+8
 8100 019e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 726:src/display.c **** 	  *p2++ = ' ';
 8101              		.loc 1 726 5 view .LVU2597
 8102 01a0 9A07     		lsls	r2, r3, #30
 8103 01a2 00F19881 		bmi	.L909
 731:src/display.c **** 	  *p2++ = ' ';
 8104              		.loc 1 731 2 is_stmt 1 view .LVU2598
 731:src/display.c **** 	  *p2++ = ' ';
 8105              		.loc 1 731 5 is_stmt 0 view .LVU2599
 8106 01a6 5907     		lsls	r1, r3, #29
 8107 01a8 00F1C981 		bmi	.L910
 737:src/display.c **** 	  if (State2.wascomplex) {
 8108              		.loc 1 737 2 is_stmt 1 view .LVU2600
 737:src/display.c **** 	  if (State2.wascomplex) {
 8109              		.loc 1 737 5 is_stmt 0 view .LVU2601
 8110 01ac B8F1200F 		cmp	r8, #32
 8111 01b0 00F00082 		beq	.L911
 8112              	.L779:
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8113              		.loc 1 754 2 is_stmt 1 view .LVU2602
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8114              		.loc 1 754 16 is_stmt 0 view .LVU2603
 8115 01b4 2368     		ldr	r3, [r4]
 8116 01b6 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 8117 01ba C3F30113 		ubfx	r3, r3, #4, #2
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8118              		.loc 1 754 2 view .LVU2604
 8119 01be 012B     		cmp	r3, #1
 8120 01c0 00F00B82 		beq	.L835
 8121 01c4 1449     		ldr	r1, .L920+20
 8122 01c6 154A     		ldr	r2, .L920+24
 8123 01c8 022B     		cmp	r3, #2
 8124 01ca 08BF     		it	eq
 8125 01cc 1146     		moveq	r1, r2
 8126              	.L781:
 8127              	.LVL903:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8128              		.loc 1 768 2 is_stmt 1 view .LVU2605
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8129              		.loc 1 768 7 is_stmt 0 view .LVU2606
 8130 01ce FFF7FEFF 		bl	scopy
 8131              	.LVL904:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8132              		.loc 1 768 7 view .LVU2607
 8133 01d2 0446     		mov	r4, r0
 8134              	.LVL905:
ARM GAS  /tmp/ccCvaEE3.s 			page 251


 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8135              		.loc 1 770 2 is_stmt 1 view .LVU2608
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8136              		.loc 1 770 6 is_stmt 0 view .LVU2609
 8137 01d4 FFF7FEFF 		bl	get_trig_mode
 8138              	.LVL906:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8139              		.loc 1 770 5 view .LVU2610
 8140 01d8 0228     		cmp	r0, #2
 8141 01da 00F00282 		beq	.L912
 8142              	.LVL907:
 8143              	.L772:
 989:src/display.c ****       set_status_top_always(buf2);
 8144              		.loc 1 989 7 is_stmt 1 view .LVU2611
 989:src/display.c ****       set_status_top_always(buf2);
 8145              		.loc 1 989 11 is_stmt 0 view .LVU2612
 8146 01de AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 989:src/display.c ****       set_status_top_always(buf2);
 8147              		.loc 1 989 10 view .LVU2613
 8148 01e0 5906     		lsls	r1, r3, #25
 8149 01e2 B4D4     		bmi	.L913
 8150              	.L826:
 8151              	.LBB477:
 8152              	.LBB475:
3651:src/display.c ****       }
 8153              		.loc 1 3651 2 is_stmt 1 view .LVU2614
 8154 01e4 1B06     		lsls	r3, r3, #24
 8155 01e6 BED5     		bpl	.L914
 8156              	.L846:
 8157 01e8 0121     		movs	r1, #1
 8158              	.L828:
 8159              	.LVL908:
 8160              	.LBB473:
 8161              	.LBI473:
3481:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8162              		.loc 1 3481 19 view .LVU2615
 8163              	.LBB474:
3482:src/display.c ****       }
 8164              		.loc 1 3482 2 view .LVU2616
 8165 01ea 4FF45373 		mov	r3, #844
 8166 01ee 0093     		str	r3, [sp]
 8167 01f0 17A8     		add	r0, sp, #92
 8168              	.LVL909:
3482:src/display.c ****       }
 8169              		.loc 1 3482 2 is_stmt 0 view .LVU2617
 8170 01f2 40F24A23 		movw	r3, #586
 8171 01f6 2B22     		movs	r2, #43
 8172 01f8 FFF7FEFF 		bl	s_s_sized
 8173              	.LVL910:
3482:src/display.c ****       }
 8174              		.loc 1 3482 2 view .LVU2618
 8175              	.LBE474:
 8176              	.LBE473:
 8177              	.LBE475:
 8178              	.LBE477:
 992:src/display.c **** #else
 8179              		.loc 1 992 5 view .LVU2619
ARM GAS  /tmp/ccCvaEE3.s 			page 252


 8180 01fc 23B0     		add	sp, sp, #140
 8181              		.cfi_remember_state
 8182              		.cfi_def_cfa_offset 28
 8183              		@ sp needed
 8184 01fe BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8185              	.L921:
 8186 0202 00BF     		.align	2
 8187              	.L920:
 8188 0204 00000000 		.word	main_ram
 8189 0208 00000000 		.word	.LANCHOR15
 8190 020c 00000000 		.word	StateWhileOn
 8191 0210 28000000 		.word	.LC10
 8192 0214 24000000 		.word	.LC9
 8193 0218 10000000 		.word	.LC6
 8194 021c 1C000000 		.word	.LC8
 8195 0220 58000000 		.word	.LC17
 8196 0224 08000000 		.word	.LC4
 8197 0228 4C000000 		.word	.LC15
 8198 022c 00000000 		.word	.LANCHOR18
 8199 0230 00000000 		.word	RectPolConv
 8200 0234 00000000 		.word	ShowRegister
 8201              	.LVL911:
 8202              	.L902:
 8203              		.cfi_restore_state
 667:src/display.c **** 	    *p2++ = '\006';
 8204              		.loc 1 667 6 is_stmt 1 view .LVU2620
 668:src/display.c **** 	  }
 8205              		.loc 1 668 12 is_stmt 0 view .LVU2621
 8206 0238 0623     		movs	r3, #6
 8207 023a 8DF85D30 		strb	r3, [sp, #93]
 667:src/display.c **** 	    *p2++ = '\006';
 8208              		.loc 1 667 12 view .LVU2622
 8209 023e 8DF85C80 		strb	r8, [sp, #92]
 668:src/display.c **** 	  }
 8210              		.loc 1 668 6 is_stmt 1 view .LVU2623
 8211              	.LVL912:
 671:src/display.c **** 	default:
 8212              		.loc 1 671 2 view .LVU2624
 671:src/display.c **** 	default:
 8213              		.loc 1 671 9 is_stmt 0 view .LVU2625
 8214 0242 FFF7FEFF 		bl	int_mode
 8215              	.LVL913:
 8216 0246 0138     		subs	r0, r0, #1
 8217 0248 C0B2     		uxtb	r0, r0
 8218 024a 0228     		cmp	r0, #2
 8219 024c 96BF     		itet	ls
 8220 024e C14B     		ldrls	r3, .L922
 8221 0250 C149     		ldrhi	r1, .L922+4
 8222 0252 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8223              	.LVL914:
 678:src/display.c **** 	*q++ = '\006';
 8224              		.loc 1 678 2 is_stmt 1 view .LVU2626
 678:src/display.c **** 	*q++ = '\006';
 8225              		.loc 1 678 6 is_stmt 0 view .LVU2627
 8226 0256 0DF15E00 		add	r0, sp, #94
 8227              	.LVL915:
 678:src/display.c **** 	*q++ = '\006';
ARM GAS  /tmp/ccCvaEE3.s 			page 253


 8228              		.loc 1 678 6 view .LVU2628
 8229 025a FFF7FEFF 		bl	scopy
 8230              	.LVL916:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8231              		.loc 1 679 7 view .LVU2629
 8232 025e 8046     		mov	r8, r0
 8233              	.LVL917:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8234              		.loc 1 679 7 view .LVU2630
 8235 0260 0623     		movs	r3, #6
 8236 0262 08F8013B 		strb	r3, [r8], #1
 678:src/display.c **** 	*q++ = '\006';
 8237              		.loc 1 678 6 view .LVU2631
 8238 0266 0546     		mov	r5, r0
 8239              	.LVL918:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8240              		.loc 1 679 2 is_stmt 1 view .LVU2632
 680:src/display.c **** 
 8241              		.loc 1 680 2 view .LVU2633
 680:src/display.c **** 
 8242              		.loc 1 680 7 is_stmt 0 view .LVU2634
 8243 0268 FFF7FEFF 		bl	word_size
 8244              	.LVL919:
 8245 026c 0222     		movs	r2, #2
 8246 026e 0146     		mov	r1, r0
 8247 0270 4046     		mov	r0, r8
 8248 0272 FFF7FEFF 		bl	num_arg_0
 8249              	.LVL920:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8250              		.loc 1 682 19 view .LVU2635
 8251 0276 DFF80CC3 		ldr	ip, .L922+48
 8252 027a DCF80030 		ldr	r3, [ip]
 8253              	.LVL921:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8254              		.loc 1 682 2 is_stmt 1 view .LVU2636
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8255              		.loc 1 682 5 is_stmt 0 view .LVU2637
 8256 027e 002B     		cmp	r3, #0
 8257 0280 40F39E80 		ble	.L900
 683:src/display.c **** 	  if (*q == '1')
 8258              		.loc 1 683 4 is_stmt 1 view .LVU2638
 683:src/display.c **** 	  if (*q == '1')
 8259              		.loc 1 683 10 is_stmt 0 view .LVU2639
 8260 0284 C3F10702 		rsb	r2, r3, #7
 8261 0288 5200     		lsls	r2, r2, #1
 683:src/display.c **** 	  if (*q == '1')
 8262              		.loc 1 683 6 view .LVU2640
 8263 028a 0292     		str	r2, [sp, #8]
 684:src/display.c **** 	    n += 2;
 8264              		.loc 1 684 4 is_stmt 1 view .LVU2641
 684:src/display.c **** 	    n += 2;
 8265              		.loc 1 684 7 is_stmt 0 view .LVU2642
 8266 028c 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8267 028e 3129     		cmp	r1, #49
 685:src/display.c **** 	  if (q[1] == '1')
 8268              		.loc 1 685 6 is_stmt 1 view .LVU2643
 685:src/display.c **** 	  if (q[1] == '1')
ARM GAS  /tmp/ccCvaEE3.s 			page 254


 8269              		.loc 1 685 8 is_stmt 0 view .LVU2644
 8270 0290 04BF     		itt	eq
 8271 0292 0232     		addeq	r2, r2, #2
 8272 0294 0292     		streq	r2, [sp, #8]
 686:src/display.c **** 	    n += 2;
 8273              		.loc 1 686 4 is_stmt 1 view .LVU2645
 686:src/display.c **** 	    n += 2;
 8274              		.loc 1 686 7 is_stmt 0 view .LVU2646
 8275 0296 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8276 0298 3129     		cmp	r1, #49
 8277 029a 00D1     		bne	.L765
 687:src/display.c **** 	  while (n-- > 0)
 8278              		.loc 1 687 6 is_stmt 1 view .LVU2647
 687:src/display.c **** 	  while (n-- > 0)
 8279              		.loc 1 687 8 is_stmt 0 view .LVU2648
 8280 029c 0232     		adds	r2, r2, #2
 8281              	.L765:
 688:src/display.c **** 	    *p2++ = '\006';
 8282              		.loc 1 688 10 is_stmt 1 view .LVU2649
 688:src/display.c **** 	    *p2++ = '\006';
 8283              		.loc 1 688 12 is_stmt 0 view .LVU2650
 8284 029e 511E     		subs	r1, r2, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8285              		.loc 1 688 10 view .LVU2651
 8286 02a0 002A     		cmp	r2, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8287              		.loc 1 688 12 view .LVU2652
 8288 02a2 0291     		str	r1, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8289              		.loc 1 688 10 view .LVU2653
 8290 02a4 40F39B81 		ble	.L898
 689:src/display.c **** 
 8291              		.loc 1 689 12 view .LVU2654
 8292 02a8 0621     		movs	r1, #6
 8293              	.L766:
 689:src/display.c **** 
 8294              		.loc 1 689 6 is_stmt 1 view .LVU2655
 8295              	.LVL922:
 689:src/display.c **** 
 8296              		.loc 1 689 12 is_stmt 0 view .LVU2656
 8297 02aa 00F8011B 		strb	r1, [r0], #1
 8298              	.LVL923:
 688:src/display.c **** 	    *p2++ = '\006';
 8299              		.loc 1 688 10 is_stmt 1 view .LVU2657
 688:src/display.c **** 	    *p2++ = '\006';
 8300              		.loc 1 688 12 is_stmt 0 view .LVU2658
 8301 02ae 029B     		ldr	r3, [sp, #8]
 8302 02b0 5A1E     		subs	r2, r3, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8303              		.loc 1 688 10 view .LVU2659
 8304 02b2 002B     		cmp	r3, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8305              		.loc 1 688 12 view .LVU2660
 8306 02b4 0292     		str	r2, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8307              		.loc 1 688 10 view .LVU2661
 8308 02b6 F8DC     		bgt	.L766
ARM GAS  /tmp/ccCvaEE3.s 			page 255


 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8309              		.loc 1 691 4 is_stmt 1 view .LVU2662
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8310              		.loc 1 691 11 is_stmt 0 view .LVU2663
 8311 02b8 DCF80030 		ldr	r3, [ip]
 8312 02bc 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8313              		.loc 1 691 27 is_stmt 1 view .LVU2664
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8314              		.loc 1 691 4 is_stmt 0 view .LVU2665
 8315 02be 002B     		cmp	r3, #0
 8316 02c0 7EDB     		blt	.L900
 8317              	.L829:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8318              		.loc 1 691 4 view .LVU2666
 8319 02c2 A64D     		ldr	r5, .L922+8
 8320              	.L771:
 692:src/display.c **** 	}
 8321              		.loc 1 692 6 is_stmt 1 view .LVU2667
 692:src/display.c **** 	}
 8322              		.loc 1 692 20 is_stmt 0 view .LVU2668
 8323 02c4 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8324 02c6 C2F3C202 		ubfx	r2, r2, #3, #3
 692:src/display.c **** 	}
 8325              		.loc 1 692 12 view .LVU2669
 8326 02ca 9A42     		cmp	r2, r3
 8327 02cc 0CBF     		ite	eq
 8328 02ce 7C23     		moveq	r3, #124
 8329 02d0 2723     		movne	r3, #39
 8330              	.LVL924:
 692:src/display.c **** 	}
 8331              		.loc 1 692 12 view .LVU2670
 8332 02d2 00F8013B 		strb	r3, [r0], #1
 8333              	.LVL925:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8334              		.loc 1 691 35 is_stmt 1 view .LVU2671
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8335              		.loc 1 691 36 is_stmt 0 view .LVU2672
 8336 02d6 029B     		ldr	r3, [sp, #8]
 8337 02d8 013B     		subs	r3, r3, #1
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8338              		.loc 1 691 4 view .LVU2673
 8339 02da 002B     		cmp	r3, #0
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8340              		.loc 1 691 36 view .LVU2674
 8341 02dc 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8342              		.loc 1 691 27 is_stmt 1 view .LVU2675
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8343              		.loc 1 691 4 is_stmt 0 view .LVU2676
 8344 02de F1DA     		bge	.L771
 8345              	.L769:
 694:src/display.c ****       }
 8346              		.loc 1 694 2 is_stmt 1 view .LVU2677
 694:src/display.c ****       }
 8347              		.loc 1 694 5 is_stmt 0 view .LVU2678
 8348 02e0 002F     		cmp	r7, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 256


 8349 02e2 3FF47CAF 		beq	.L772
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8350              		.loc 1 611 22 view .LVU2679
 8351 02e6 B046     		mov	r8, r6
 8352              	.LVL926:
 8353              	.L762:
 8354              	.LBB478:
 889:src/display.c **** 	display_yreg:
 8355              		.loc 1 889 4 is_stmt 1 view .LVU2680
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8356              		.loc 1 896 4 view .LVU2681
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8357              		.loc 1 896 8 is_stmt 0 view .LVU2682
 8358 02e8 2368     		ldr	r3, [r4]
 8359 02ea 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8360              		.loc 1 896 7 view .LVU2683
 8361 02ee D207     		lsls	r2, r2, #31
 8362 02f0 3FF51DAF 		bmi	.L915
 8363              	.L800:
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8364              		.loc 1 903 4 is_stmt 1 view .LVU2684
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8365              		.loc 1 903 35 is_stmt 0 view .LVU2685
 8366 02f4 B3F8AC27 		ldrh	r2, [r3, #1964]
 8367 02f8 40F2C113 		movw	r3, #449
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8368              		.loc 1 903 7 view .LVU2686
 8369 02fc 1340     		ands	r3, r3, r2
 8370 02fe C12B     		cmp	r3, #193
 8371 0300 00F02281 		beq	.L916
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8372              		.loc 1 907 6 is_stmt 1 view .LVU2687
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8373              		.loc 1 907 36 is_stmt 0 view .LVU2688
 8374 0304 DFF88092 		ldr	r9, .L922+52
 8375 0308 D9F80010 		ldr	r1, [r9]
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8376              		.loc 1 907 6 view .LVU2689
 8377 030c 6329     		cmp	r1, #99
 8378 030e 00F3E780 		bgt	.L917
 8379              	.L809:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8380              		.loc 1 907 6 discriminator 3 view .LVU2690
 8381 0312 0131     		adds	r1, r1, #1
 8382              	.L813:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8383              		.loc 1 907 6 discriminator 4 view .LVU2691
 8384 0314 03AF     		add	r7, sp, #12
 8385              	.LVL927:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8386              		.loc 1 907 6 discriminator 4 view .LVU2692
 8387 0316 3846     		mov	r0, r7
 8388 0318 FFF7FEFF 		bl	getRegister
 8389              	.LVL928:
 8390              	.L808:
 917:src/display.c **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccCvaEE3.s 			page 257


 8391              		.loc 1 917 4 is_stmt 1 view .LVU2693
 917:src/display.c **** #ifdef INCLUDE_C_LOCK
 8392              		.loc 1 917 7 is_stmt 0 view .LVU2694
 8393 031c 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8394 0320 13F0700F 		tst	r3, #112
 8395 0324 40F09E80 		bne	.L815
 919:src/display.c **** #else
 8396              		.loc 1 919 6 is_stmt 1 view .LVU2695
 919:src/display.c **** #else
 8397              		.loc 1 919 19 is_stmt 0 view .LVU2696
 8398 0328 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 919:src/display.c **** #else
 8399              		.loc 1 919 9 view .LVU2697
 8400 032a 13F0010F 		tst	r3, #1
 919:src/display.c **** #else
 8401              		.loc 1 919 39 view .LVU2698
 8402 032e 2368     		ldr	r3, [r4]
 919:src/display.c **** #else
 8403              		.loc 1 919 9 view .LVU2699
 8404 0330 57D0     		beq	.L818
 919:src/display.c **** #else
 8405              		.loc 1 919 38 discriminator 1 view .LVU2700
 8406 0332 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 919:src/display.c **** #else
 8407              		.loc 1 919 33 discriminator 1 view .LVU2701
 8408 0336 02F04101 		and	r1, r2, #65
 8409 033a 4129     		cmp	r1, #65
 8410 033c 06D1     		bne	.L817
 919:src/display.c **** #else
 8411              		.loc 1 919 48 discriminator 2 view .LVU2702
 8412 033e 1206     		lsls	r2, r2, #24
 8413 0340 4FD5     		bpl	.L818
 919:src/display.c **** #else
 8414              		.loc 1 919 119 discriminator 3 view .LVU2703
 8415 0342 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 919:src/display.c **** #else
 8416              		.loc 1 919 80 discriminator 3 view .LVU2704
 8417 0346 12F0C00F 		tst	r2, #192
 8418 034a 4AD1     		bne	.L818
 8419              	.L817:
 8420              	.LBB463:
 923:src/display.c **** 
 8421              		.loc 1 923 8 is_stmt 1 view .LVU2705
 925:src/display.c **** 	      UState.nothousands = 1;
 8422              		.loc 1 925 8 is_stmt 0 view .LVU2706
 8423 034c 2A22     		movs	r2, #42
 8424 034e 0021     		movs	r1, #0
 8425 0350 3046     		mov	r0, r6
 923:src/display.c **** 
 8426              		.loc 1 923 44 view .LVU2707
 8427 0352 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 8428 0356 DFF83482 		ldr	r8, .L922+56
 8429              	.LVL929:
 925:src/display.c **** 	      UState.nothousands = 1;
 8430              		.loc 1 925 8 view .LVU2708
 8431 035a FFF7FEFF 		bl	xset
 8432              	.LVL930:
ARM GAS  /tmp/ccCvaEE3.s 			page 258


 926:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8433              		.loc 1 926 27 view .LVU2709
 8434 035e 2268     		ldr	r2, [r4]
 8435 0360 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8436 0364 43F04003 		orr	r3, r3, #64
 8437 0368 82F8E737 		strb	r3, [r2, #2023]
 927:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8438              		.loc 1 927 8 view .LVU2710
 8439 036c 3146     		mov	r1, r6
 8440 036e 3846     		mov	r0, r7
 8441 0370 FFF7FEFF 		bl	set_x_hms
 8442              	.LVL931:
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8443              		.loc 1 928 27 view .LVU2711
 8444 0374 2368     		ldr	r3, [r4]
 8445 0376 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 923:src/display.c **** 
 8446              		.loc 1 923 44 view .LVU2712
 8447 037a C9F38019 		ubfx	r9, r9, #6, #1
 8448              	.LVL932:
 925:src/display.c **** 	      UState.nothousands = 1;
 8449              		.loc 1 925 8 is_stmt 1 view .LVU2713
 926:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8450              		.loc 1 926 8 view .LVU2714
 927:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8451              		.loc 1 927 8 view .LVU2715
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8452              		.loc 1 928 8 view .LVU2716
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8453              		.loc 1 928 27 is_stmt 0 view .LVU2717
 8454 037e 69F38612 		bfi	r2, r9, #6, #1
 8455 0382 83F8E727 		strb	r2, [r3, #2023]
 933:src/display.c **** 	      while (*p) {
 8456              		.loc 1 933 8 is_stmt 1 view .LVU2718
 8457              	.LVL933:
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8458              		.loc 1 934 8 view .LVU2719
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8459              		.loc 1 934 14 view .LVU2720
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8460              		.loc 1 934 15 is_stmt 0 view .LVU2721
 8461 0386 4021     		movs	r1, #64
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8462              		.loc 1 928 27 view .LVU2722
 8463 0388 0522     		movs	r2, #5
 8464 038a 06E0     		b	.L820
 8465              	.LVL934:
 8466              	.L918:
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8467              		.loc 1 934 15 view .LVU2723
 8468 038c 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8469              	.LVL935:
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8470              		.loc 1 934 14 view .LVU2724
 8471 0390 0029     		cmp	r1, #0
 8472 0392 3FF424AF 		beq	.L772
 8473 0396 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccCvaEE3.s 			page 259


 8474              	.LVL936:
 8475              	.L820:
 935:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8476              		.loc 1 935 3 is_stmt 1 view .LVU2725
 8477 039a 3046     		mov	r0, r6
 8478 039c FFF7FEFF 		bl	replace_char
 8479              	.LVL937:
 936:src/display.c **** 		  goto skip;
 8480              		.loc 1 936 3 view .LVU2726
 936:src/display.c **** 		  goto skip;
 8481              		.loc 1 936 7 is_stmt 0 view .LVU2727
 8482 03a0 0121     		movs	r1, #1
 8483 03a2 3046     		mov	r0, r6
 8484 03a4 FFF7FEFF 		bl	pixel_length
 8485              	.LVL938:
 939:src/display.c **** 	      }
 8486              		.loc 1 939 3 is_stmt 1 view .LVU2728
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8487              		.loc 1 934 14 view .LVU2729
 936:src/display.c **** 		  goto skip;
 8488              		.loc 1 936 6 is_stmt 0 view .LVU2730
 8489 03a8 2C28     		cmp	r0, #44
 8490 03aa EFDC     		bgt	.L918
 8491 03ac 17E7     		b	.L772
 8492              	.LVL939:
 8493              	.L782:
 936:src/display.c **** 		  goto skip;
 8494              		.loc 1 936 6 view .LVU2731
 8495              	.LBE463:
 8496              	.LBE478:
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8497              		.loc 1 790 4 is_stmt 1 view .LVU2732
 791:src/display.c **** 	  *p2++ = shift_char;
 8498              		.loc 1 791 4 view .LVU2733
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8499              		.loc 1 790 10 is_stmt 0 view .LVU2734
 8500 03ae 4CF20773 		movw	r3, #50951
 792:src/display.c **** 	}
 8501              		.loc 1 792 10 view .LVU2735
 8502 03b2 8DF85E80 		strb	r8, [sp, #94]
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8503              		.loc 1 790 10 view .LVU2736
 8504 03b6 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 792:src/display.c **** 	}
 8505              		.loc 1 792 4 is_stmt 1 view .LVU2737
 8506              	.LVL940:
 792:src/display.c **** 	}
 8507              		.loc 1 792 7 is_stmt 0 view .LVU2738
 8508 03ba 0DF15F08 		add	r8, sp, #95
 8509              	.LVL941:
 792:src/display.c **** 	}
 8510              		.loc 1 792 7 view .LVU2739
 8511 03be 51E6     		b	.L783
 8512              	.LVL942:
 8513              	.L900:
 792:src/display.c **** 	}
 8514              		.loc 1 792 7 view .LVU2740
ARM GAS  /tmp/ccCvaEE3.s 			page 260


 8515 03c0 664D     		ldr	r5, .L922+8
 8516 03c2 8DE7     		b	.L769
 8517              	.LVL943:
 8518              	.L906:
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8519              		.loc 1 864 29 discriminator 1 view .LVU2741
 8520 03c4 03F04101 		and	r1, r3, #65
 8521 03c8 4129     		cmp	r1, #65
 8522 03ca 3FF498AE 		beq	.L796
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8523              		.loc 1 611 22 view .LVU2742
 8524 03ce B046     		mov	r8, r6
 8525 03d0 A1E6     		b	.L795
 8526              	.L793:
 861:src/display.c **** 	  p = scopy(p, q);
 8527              		.loc 1 861 4 is_stmt 1 view .LVU2743
 8528              	.LVL944:
 862:src/display.c **** 	}
 8529              		.loc 1 862 4 view .LVU2744
 862:src/display.c **** 	}
 8530              		.loc 1 862 8 is_stmt 0 view .LVU2745
 8531 03d2 6349     		ldr	r1, .L922+12
 8532 03d4 3046     		mov	r0, r6
 8533 03d6 FFF7FEFF 		bl	scopy
 8534              	.LVL945:
 8535 03da D9F80020 		ldr	r2, [r9]
 8536 03de 8046     		mov	r8, r0
 8537              	.LVL946:
 862:src/display.c **** 	}
 8538              		.loc 1 862 6 view .LVU2746
 8539 03e0 99E6     		b	.L795
 8540              	.LVL947:
 8541              	.L818:
 8542              	.LBB479:
 943:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8543              		.loc 1 943 6 is_stmt 1 view .LVU2747
 943:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8544              		.loc 1 943 21 is_stmt 0 view .LVU2748
 8545 03e2 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 943:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8546              		.loc 1 943 9 view .LVU2749
 8547 03e6 9806     		lsls	r0, r3, #26
 8548 03e8 3CD5     		bpl	.L815
 945:src/display.c **** #endif
 8549              		.loc 1 945 6 view .LVU2750
 8550 03ea 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 945:src/display.c **** #endif
 8551              		.loc 1 945 3 view .LVU2751
 8552 03ec 13F00204 		ands	r4, r3, #2
 8553 03f0 38D1     		bne	.L815
 948:src/display.c **** #endif
 8554              		.loc 1 948 6 view .LVU2752
 8555 03f2 5C4B     		ldr	r3, .L922+16
 948:src/display.c **** #endif
 8556              		.loc 1 948 3 view .LVU2753
 8557 03f4 1B68     		ldr	r3, [r3]
 8558 03f6 012B     		cmp	r3, #1
ARM GAS  /tmp/ccCvaEE3.s 			page 261


 8559 03f8 34D0     		beq	.L815
 950:src/display.c **** 	      char ltgteq;
 8560              		.loc 1 950 6 view .LVU2754
 8561 03fa 4146     		mov	r1, r8
 8562 03fc 3846     		mov	r0, r7
 8563 03fe FFF7FEFF 		bl	set_x_fract
 8564              	.LVL948:
 950:src/display.c **** 	      char ltgteq;
 8565              		.loc 1 950 3 view .LVU2755
 8566 0402 78B3     		cbz	r0, .L815
 8567              	.LBB464:
 951:src/display.c **** 
 8568              		.loc 1 951 8 is_stmt 1 view .LVU2756
 953:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8569              		.loc 1 953 8 view .LVU2757
 953:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8570              		.loc 1 953 12 is_stmt 0 view .LVU2758
 8571 0404 2146     		mov	r1, r4
 8572 0406 3046     		mov	r0, r6
 8573 0408 FFF7FEFF 		bl	find_char
 8574              	.LVL949:
 8575 040c 0446     		mov	r4, r0
 953:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8576              		.loc 1 953 10 view .LVU2759
 8577 040e 0238     		subs	r0, r0, #2
 8578              	.LVL950:
 955:src/display.c **** 	      switch (ltgteq) {
 8579              		.loc 1 955 8 is_stmt 1 view .LVU2760
 955:src/display.c **** 	      switch (ltgteq) {
 8580              		.loc 1 955 15 is_stmt 0 view .LVU2761
 8581 0410 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8582              	.LVL951:
 956:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8583              		.loc 1 956 8 is_stmt 1 view .LVU2762
 8584 0414 B9F1470F 		cmp	r9, #71
 8585 0418 00F0F080 		beq	.L844
 958:src/display.c **** 	      }
 8586              		.loc 1 958 25 is_stmt 0 view .LVU2763
 8587 041c B9F14C0F 		cmp	r9, #76
 8588 0420 08BF     		it	eq
 8589 0422 4FF03C09 		moveq	r9, #60
 8590              	.LVL952:
 8591              	.L822:
 960:src/display.c **** 	      q[2] = ltgteq;
 8592              		.loc 1 960 8 is_stmt 1 view .LVU2764
 8593 0426 5049     		ldr	r1, .L922+20
 8594 0428 FFF7FEFF 		bl	scopy
 8595              	.LVL953:
 961:src/display.c **** 
 8596              		.loc 1 961 8 view .LVU2765
 961:src/display.c **** 
 8597              		.loc 1 961 13 is_stmt 0 view .LVU2766
 8598 042c 84F80090 		strb	r9, [r4]
 963:src/display.c **** 		goto skip;
 8599              		.loc 1 963 8 is_stmt 1 view .LVU2767
 963:src/display.c **** 		goto skip;
 8600              		.loc 1 963 12 is_stmt 0 view .LVU2768
ARM GAS  /tmp/ccCvaEE3.s 			page 262


 8601 0430 0121     		movs	r1, #1
 8602 0432 3046     		mov	r0, r6
 8603 0434 FFF7FEFF 		bl	pixel_length
 8604              	.LVL954:
 963:src/display.c **** 		goto skip;
 8605              		.loc 1 963 11 view .LVU2769
 8606 0438 2C28     		cmp	r0, #44
 8607 043a 7FF7D0AE 		ble	.L772
 966:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8608              		.loc 1 966 8 is_stmt 1 view .LVU2770
 966:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8609              		.loc 1 966 14 is_stmt 0 view .LVU2771
 8610 043e 4FF00009 		mov	r9, #0
 8611              	.LVL955:
 966:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8612              		.loc 1 966 14 view .LVU2772
 8613 0442 04F8039C 		strb	r9, [r4, #-3]
 967:src/display.c **** 		goto skip;
 8614              		.loc 1 967 8 is_stmt 1 view .LVU2773
 967:src/display.c **** 		goto skip;
 8615              		.loc 1 967 12 is_stmt 0 view .LVU2774
 8616 0446 0121     		movs	r1, #1
 8617 0448 3046     		mov	r0, r6
 8618 044a FFF7FEFF 		bl	pixel_length
 8619              	.LVL956:
 967:src/display.c **** 		goto skip;
 8620              		.loc 1 967 11 view .LVU2775
 8621 044e 2C28     		cmp	r0, #44
 8622 0450 7FF7C5AE 		ble	.L772
 970:src/display.c **** 	    }
 8623              		.loc 1 970 8 is_stmt 1 view .LVU2776
 970:src/display.c **** 	    }
 8624              		.loc 1 970 39 is_stmt 0 view .LVU2777
 8625 0454 A8EB0602 		sub	r2, r8, r6
 970:src/display.c **** 	    }
 8626              		.loc 1 970 8 view .LVU2778
 8627 0458 4946     		mov	r1, r9
 8628 045a C2F12A02 		rsb	r2, r2, #42
 8629 045e 4046     		mov	r0, r8
 8630 0460 FFF7FEFF 		bl	xset
 8631              	.LVL957:
 8632              	.L815:
 970:src/display.c **** 	    }
 8633              		.loc 1 970 8 view .LVU2779
 8634              	.LBE464:
 973:src/display.c **** 	    int extra_pixels;
 8635              		.loc 1 973 4 is_stmt 1 view .LVU2780
 973:src/display.c **** 	    int extra_pixels;
 8636              		.loc 1 973 10 is_stmt 0 view .LVU2781
 8637 0464 0C23     		movs	r3, #12
 8638 0466 0293     		str	r3, [sp, #8]
 973:src/display.c **** 	    int extra_pixels;
 8639              		.loc 1 973 27 is_stmt 1 view .LVU2782
 8640 0468 0FE0     		b	.L824
 8641              	.LVL958:
 8642              	.L919:
 8643              	.LBB465:
ARM GAS  /tmp/ccCvaEE3.s 			page 263


 981:src/display.c **** 
 8644              		.loc 1 981 6 is_stmt 0 view .LVU2783
 8645 046a 029A     		ldr	r2, [sp, #8]
 8646 046c 0A32     		adds	r2, r2, #10
 8647 046e FFF7FEFF 		bl	xset
 8648              	.LVL959:
 983:src/display.c **** 	  }
 8649              		.loc 1 983 6 is_stmt 1 view .LVU2784
 983:src/display.c **** 	  }
 8650              		.loc 1 983 30 is_stmt 0 view .LVU2785
 8651 0472 B4F14802 		subs	r2, r4, #72
 983:src/display.c **** 	  }
 8652              		.loc 1 983 8 view .LVU2786
 8653 0476 029B     		ldr	r3, [sp, #8]
 983:src/display.c **** 	  }
 8654              		.loc 1 983 30 view .LVU2787
 8655 0478 48BF     		it	mi
 8656 047a A4F14502 		submi	r2, r4, #69
 983:src/display.c **** 	  }
 8657              		.loc 1 983 8 view .LVU2788
 8658 047e A3EBA203 		sub	r3, r3, r2, asr #2
 8659              	.LBE465:
 973:src/display.c **** 	    int extra_pixels;
 8660              		.loc 1 973 4 view .LVU2789
 8661 0482 012B     		cmp	r3, #1
 8662              	.LBB466:
 983:src/display.c **** 	  }
 8663              		.loc 1 983 8 view .LVU2790
 8664 0484 0293     		str	r3, [sp, #8]
 8665              	.LBE466:
 973:src/display.c **** 	    int extra_pixels;
 8666              		.loc 1 973 27 is_stmt 1 view .LVU2791
 973:src/display.c **** 	    int extra_pixels;
 8667              		.loc 1 973 4 is_stmt 0 view .LVU2792
 8668 0486 7FF7AAAE 		ble	.L772
 8669              	.LVL960:
 8670              	.L824:
 8671              	.LBB467:
 974:src/display.c **** 
 8672              		.loc 1 974 6 is_stmt 1 view .LVU2793
 976:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8673              		.loc 1 976 6 view .LVU2794
 8674 048a 02AA     		add	r2, sp, #8
 8675 048c 4146     		mov	r1, r8
 8676 048e 3846     		mov	r0, r7
 8677 0490 FFF7FEFF 		bl	set_x_dn
 8678              	.LVL961:
 977:src/display.c **** 	    if (extra_pixels <= 0)
 8679              		.loc 1 977 6 view .LVU2795
 977:src/display.c **** 	    if (extra_pixels <= 0)
 8680              		.loc 1 977 21 is_stmt 0 view .LVU2796
 8681 0494 0121     		movs	r1, #1
 8682 0496 3046     		mov	r0, r6
 8683 0498 FFF7FEFF 		bl	pixel_length
 8684              	.LVL962:
 981:src/display.c **** 
 8685              		.loc 1 981 6 is_stmt 1 view .LVU2797
ARM GAS  /tmp/ccCvaEE3.s 			page 264


 977:src/display.c **** 	    if (extra_pixels <= 0)
 8686              		.loc 1 977 21 is_stmt 0 view .LVU2798
 8687 049c 0446     		mov	r4, r0
 8688              	.LVL963:
 978:src/display.c **** 	      break;
 8689              		.loc 1 978 6 is_stmt 1 view .LVU2799
 978:src/display.c **** 	      break;
 8690              		.loc 1 978 9 is_stmt 0 view .LVU2800
 8691 049e 4B2C     		cmp	r4, #75
 981:src/display.c **** 
 8692              		.loc 1 981 6 view .LVU2801
 8693 04a0 4FF00001 		mov	r1, #0
 8694 04a4 4046     		mov	r0, r8
 8695              	.LVL964:
 978:src/display.c **** 	      break;
 8696              		.loc 1 978 9 view .LVU2802
 8697 04a6 E0DC     		bgt	.L919
 8698              	.LVL965:
 978:src/display.c **** 	      break;
 8699              		.loc 1 978 9 view .LVU2803
 8700              	.LBE467:
 8701 04a8 99E6     		b	.L772
 8702              	.LVL966:
 8703              	.L825:
 978:src/display.c **** 	      break;
 8704              		.loc 1 978 9 view .LVU2804
 8705              	.LBE479:
 8706              	.LBB480:
 8707              	.LBB476:
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8708              		.loc 1 3650 22 view .LVU2805
 8709 04aa AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8710 04ac 5A06     		lsls	r2, r3, #25
 8711 04ae 7FF599AE 		bpl	.L826
 8712              	.LBE476:
 8713              	.LBE480:
 992:src/display.c **** #else
 8714              		.loc 1 992 5 view .LVU2806
 8715 04b2 23B0     		add	sp, sp, #140
 8716              		.cfi_remember_state
 8717              		.cfi_def_cfa_offset 28
 8718              		@ sp needed
 8719 04b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8720              	.LVL967:
 8721              	.L904:
 8722              		.cfi_restore_state
 797:src/display.c **** 	  *p2++ = '\207';
 8723              		.loc 1 797 4 is_stmt 1 view .LVU2807
 798:src/display.c **** 	  *p2++ = '\007';	    
 8724              		.loc 1 798 4 view .LVU2808
 799:src/display.c **** 	}
 8725              		.loc 1 799 10 is_stmt 0 view .LVU2809
 8726 04b8 88F80230 		strb	r3, [r8, #2]
 798:src/display.c **** 	  *p2++ = '\007';	    
 8727              		.loc 1 798 10 view .LVU2810
 8728 04bc 88F80120 		strb	r2, [r8, #1]
 799:src/display.c **** 	}
ARM GAS  /tmp/ccCvaEE3.s 			page 265


 8729              		.loc 1 799 4 is_stmt 1 view .LVU2811
 799:src/display.c **** 	}
 8730              		.loc 1 799 7 is_stmt 0 view .LVU2812
 8731 04c0 08F10308 		add	r8, r8, #3
 8732              	.LVL968:
 799:src/display.c **** 	}
 8733              		.loc 1 799 7 view .LVU2813
 8734 04c4 DFE5     		b	.L785
 8735              	.LVL969:
 8736              	.L838:
 831:src/display.c **** #endif
 8737              		.loc 1 831 19 view .LVU2814
 8738 04c6 2949     		ldr	r1, .L922+24
 8739 04c8 F7E5     		b	.L787
 8740              	.LVL970:
 8741              	.L907:
 883:src/display.c **** 	    p = scopy(p, q);
 8742              		.loc 1 883 6 is_stmt 1 view .LVU2815
 884:src/display.c **** 	    //	    goto no_copy;
 8743              		.loc 1 884 6 view .LVU2816
 884:src/display.c **** 	    //	    goto no_copy;
 8744              		.loc 1 884 10 is_stmt 0 view .LVU2817
 8745 04ca 4046     		mov	r0, r8
 8746 04cc 2849     		ldr	r1, .L922+28
 8747 04ce FFF7FEFF 		bl	scopy
 8748              	.LVL971:
 8749 04d2 8046     		mov	r8, r0
 8750              	.LVL972:
 884:src/display.c **** 	    //	    goto no_copy;
 8751              		.loc 1 884 10 view .LVU2818
 8752 04d4 22E6     		b	.L798
 8753              	.LVL973:
 8754              	.L909:
 727:src/display.c **** 	  *p2 = '\024';
 8755              		.loc 1 727 4 is_stmt 1 view .LVU2819
 727:src/display.c **** 	  *p2 = '\024';
 8756              		.loc 1 727 10 is_stmt 0 view .LVU2820
 8757 04d6 2022     		movs	r2, #32
 728:src/display.c **** 	  goto skip;
 8758              		.loc 1 728 8 view .LVU2821
 8759 04d8 1423     		movs	r3, #20
 727:src/display.c **** 	  *p2 = '\024';
 8760              		.loc 1 727 10 view .LVU2822
 8761 04da 0270     		strb	r2, [r0]
 728:src/display.c **** 	  goto skip;
 8762              		.loc 1 728 4 is_stmt 1 view .LVU2823
 728:src/display.c **** 	  goto skip;
 8763              		.loc 1 728 8 is_stmt 0 view .LVU2824
 8764 04dc 4370     		strb	r3, [r0, #1]
 729:src/display.c **** 	}
 8765              		.loc 1 729 4 is_stmt 1 view .LVU2825
 8766 04de 7EE6     		b	.L772
 8767              	.LVL974:
 8768              	.L917:
 8769              	.LBB481:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8770              		.loc 1 907 77 is_stmt 0 discriminator 2 view .LVU2826
ARM GAS  /tmp/ccCvaEE3.s 			page 266


 8771 04e0 FFF7FEFF 		bl	stack_size
 8772              	.LVL975:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8773              		.loc 1 907 64 discriminator 2 view .LVU2827
 8774 04e4 D9F80010 		ldr	r1, [r9]
 8775 04e8 6330     		adds	r0, r0, #99
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8776              		.loc 1 907 48 discriminator 2 view .LVU2828
 8777 04ea 8842     		cmp	r0, r1
 8778 04ec FFF611AF 		blt	.L809
 908:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8779              		.loc 1 908 13 view .LVU2829
 8780 04f0 FFF7FEFF 		bl	get_cmdline
 8781              	.LVL976:
 908:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8782              		.loc 1 908 9 view .LVU2830
 8783 04f4 0028     		cmp	r0, #0
 8784 04f6 79D0     		beq	.L811
 908:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8785              		.loc 1 908 27 discriminator 1 view .LVU2831
 8786 04f8 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8787 04fa 002B     		cmp	r3, #0
 8788 04fc 76D1     		bne	.L811
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8789              		.loc 1 909 9 view .LVU2832
 8790 04fe 17B1     		cbz	r7, .L812
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8791              		.loc 1 909 30 discriminator 1 view .LVU2833
 8792 0500 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8793              		.loc 1 909 12 discriminator 1 view .LVU2834
 8794 0502 5906     		lsls	r1, r3, #25
 8795 0504 72D5     		bpl	.L811
 8796              	.L812:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8797              		.loc 1 907 6 discriminator 5 view .LVU2835
 8798 0506 D9F80010 		ldr	r1, [r9]
 8799 050a 03E7     		b	.L813
 8800              	.LVL977:
 8801              	.L905:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8802              		.loc 1 907 6 discriminator 5 view .LVU2836
 8803              	.LBE481:
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8804              		.loc 1 851 4 is_stmt 1 view .LVU2837
 852:src/display.c **** 	  }
 8805              		.loc 1 852 6 view .LVU2838
 855:src/display.c **** 	  }
 8806              		.loc 1 855 6 view .LVU2839
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8807              		.loc 1 851 7 is_stmt 0 view .LVU2840
 8808 050c 1806     		lsls	r0, r3, #24
 852:src/display.c **** 	  }
 8809              		.loc 1 852 33 view .LVU2841
 8810 050e 4BBF     		itete	mi
 8811 0510 184A     		ldrmi	r2, .L922+32
 855:src/display.c **** 	  }
ARM GAS  /tmp/ccCvaEE3.s 			page 267


 8812              		.loc 1 855 31 view .LVU2842
 8813 0512 194A     		ldrpl	r2, .L922+36
 852:src/display.c **** 	  }
 8814              		.loc 1 852 33 view .LVU2843
 8815 0514 1949     		ldrmi	r1, .L922+40
 855:src/display.c **** 	  }
 8816              		.loc 1 855 31 view .LVU2844
 8817 0516 1A49     		ldrpl	r1, .L922+44
 8818 0518 13F0020F 		tst	r3, #2
 8819 051c 08BF     		it	eq
 8820 051e 1146     		moveq	r1, r2
 8821              	.LVL978:
 857:src/display.c **** 	  goto skip;
 8822              		.loc 1 857 4 is_stmt 1 view .LVU2845
 8823 0520 3046     		mov	r0, r6
 8824 0522 FFF7FEFF 		bl	scopy
 8825              	.LVL979:
 858:src/display.c **** 	}
 8826              		.loc 1 858 4 view .LVU2846
 8827 0526 5AE6     		b	.L772
 8828              	.LVL980:
 8829              	.L774:
 718:src/display.c **** 	    *p2++ = shift_char;
 8830              		.loc 1 718 30 is_stmt 0 discriminator 1 view .LVU2847
 8831 0528 FFF7FEFF 		bl	is_dblmode
 8832              	.LVL981:
 718:src/display.c **** 	    *p2++ = shift_char;
 8833              		.loc 1 718 26 discriminator 1 view .LVU2848
 8834 052c 0028     		cmp	r0, #0
 8835 052e 3FF42EAE 		beq	.L776
 723:src/display.c **** 	  }
 8836              		.loc 1 723 6 is_stmt 1 view .LVU2849
 8837              	.LVL982:
 723:src/display.c **** 	  }
 8838              		.loc 1 723 12 is_stmt 0 view .LVU2850
 8839 0532 4423     		movs	r3, #68
 8840 0534 8DF85C30 		strb	r3, [sp, #92]
 723:src/display.c **** 	  }
 8841              		.loc 1 723 9 view .LVU2851
 8842 0538 0DF15D00 		add	r0, sp, #93
 8843              	.LVL983:
 723:src/display.c **** 	  }
 8844              		.loc 1 723 9 view .LVU2852
 8845 053c 2EE6     		b	.L775
 8846              	.L910:
 732:src/display.c **** 	  *p2 = '\015';
 8847              		.loc 1 732 4 is_stmt 1 view .LVU2853
 8848              	.LVL984:
 732:src/display.c **** 	  *p2 = '\015';
 8849              		.loc 1 732 10 is_stmt 0 view .LVU2854
 8850 053e 2022     		movs	r2, #32
 733:src/display.c **** 	  goto skip;
 8851              		.loc 1 733 8 view .LVU2855
 8852 0540 0D23     		movs	r3, #13
 732:src/display.c **** 	  *p2 = '\015';
 8853              		.loc 1 732 10 view .LVU2856
 8854 0542 0270     		strb	r2, [r0]
ARM GAS  /tmp/ccCvaEE3.s 			page 268


 733:src/display.c **** 	  goto skip;
 8855              		.loc 1 733 4 is_stmt 1 view .LVU2857
 733:src/display.c **** 	  goto skip;
 8856              		.loc 1 733 8 is_stmt 0 view .LVU2858
 8857 0544 4370     		strb	r3, [r0, #1]
 734:src/display.c **** 	}
 8858              		.loc 1 734 4 is_stmt 1 view .LVU2859
 8859 0546 4AE6     		b	.L772
 8860              	.LVL985:
 8861              	.L916:
 8862              	.LBB482:
 904:src/display.c **** 	  }
 8863              		.loc 1 904 6 view .LVU2860
 8864 0548 03AF     		add	r7, sp, #12
 8865              	.LVL986:
 904:src/display.c **** 	  }
 8866              		.loc 1 904 6 is_stmt 0 view .LVU2861
 8867 054a 3846     		mov	r0, r7
 8868 054c 6F21     		movs	r1, #111
 8869 054e FFF7FEFF 		bl	getRegister
 8870              	.LVL987:
 8871 0552 E3E6     		b	.L808
 8872              	.L923:
 8873              		.align	2
 8874              	.L922:
 8875 0554 00000000 		.word	.LANCHOR16
 8876 0558 00000000 		.word	.LC2
 8877 055c 00000000 		.word	StateWhileOn
 8878 0560 60000000 		.word	.LC18
 8879 0564 00000000 		.word	RectPolConv
 8880 0568 68000000 		.word	.LC21
 8881 056c 14000000 		.word	.LC7
 8882 0570 64000000 		.word	.LC19
 8883 0574 3C000000 		.word	.LC13
 8884 0578 44000000 		.word	.LC14
 8885 057c 2C000000 		.word	.LC11
 8886 0580 34000000 		.word	.LC12
 8887 0584 00000000 		.word	IntMaxWindow
 8888 0588 00000000 		.word	ShowRegister
 8889 058c 00000000 		.word	.LANCHOR17
 8890              	.LVL988:
 8891              	.L908:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8892              		.loc 1 897 85 discriminator 2 view .LVU2862
 8893 0590 FFF7FEFF 		bl	stack_size
 8894              	.LVL989:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8895              		.loc 1 897 72 discriminator 2 view .LVU2863
 8896 0594 D9F80030 		ldr	r3, [r9]
 8897 0598 6330     		adds	r0, r0, #99
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8898              		.loc 1 897 56 discriminator 2 view .LVU2864
 8899 059a 9842     		cmp	r0, r3
 8900 059c FFF6CEAD 		blt	.L801
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8901              		.loc 1 897 101 discriminator 4 view .LVU2865
 8902 05a0 FFF7FEFF 		bl	get_cmdline
ARM GAS  /tmp/ccCvaEE3.s 			page 269


 8903              	.LVL990:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8904              		.loc 1 897 98 discriminator 4 view .LVU2866
 8905 05a4 18B1     		cbz	r0, .L804
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8906              		.loc 1 898 7 view .LVU2867
 8907 05a6 37B3     		cbz	r7, .L803
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8908              		.loc 1 898 28 discriminator 1 view .LVU2868
 8909 05a8 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8910              		.loc 1 898 10 discriminator 1 view .LVU2869
 8911 05aa 5806     		lsls	r0, r3, #25
 8912 05ac 23D4     		bmi	.L803
 8913              	.L804:
 8914 05ae D9F80030 		ldr	r3, [r9]
 8915 05b2 C3E5     		b	.L801
 8916              	.LVL991:
 8917              	.L911:
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8918              		.loc 1 898 10 discriminator 1 view .LVU2870
 8919              	.LBE482:
 737:src/display.c **** 	  if (State2.wascomplex) {
 8920              		.loc 1 737 28 discriminator 1 view .LVU2871
 8921 05b4 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 737:src/display.c **** 	  if (State2.wascomplex) {
 8922              		.loc 1 737 24 discriminator 1 view .LVU2872
 8923 05b6 13F0C00F 		tst	r3, #192
 8924 05ba 1AD1     		bne	.L833
 737:src/display.c **** 	  if (State2.wascomplex) {
 8925              		.loc 1 737 60 discriminator 2 view .LVU2873
 8926 05bc 114B     		ldr	r3, .L924
 8927 05be 1B68     		ldr	r3, [r3]
 737:src/display.c **** 	  if (State2.wascomplex) {
 8928              		.loc 1 737 46 discriminator 2 view .LVU2874
 8929 05c0 002B     		cmp	r3, #0
 8930 05c2 3FF4F7AD 		beq	.L779
 738:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8931              		.loc 1 738 4 is_stmt 1 view .LVU2875
 741:src/display.c **** 	    if (RectPolConv == 1) {
 8932              		.loc 1 741 9 view .LVU2876
 742:src/display.c **** 	      q = "\007\306<";
 8933              		.loc 1 742 6 view .LVU2877
 746:src/display.c **** 	    }
 8934              		.loc 1 746 10 is_stmt 0 view .LVU2878
 8935 05c6 1049     		ldr	r1, .L924+4
 8936 05c8 104A     		ldr	r2, .L924+8
 8937 05ca 012B     		cmp	r3, #1
 8938 05cc 18BF     		it	ne
 8939 05ce 1146     		movne	r1, r2
 8940              	.L780:
 8941              	.LVL992:
 749:src/display.c **** 
 8942              		.loc 1 749 4 is_stmt 1 view .LVU2879
 749:src/display.c **** 
 8943              		.loc 1 749 8 is_stmt 0 view .LVU2880
 8944 05d0 3046     		mov	r0, r6
ARM GAS  /tmp/ccCvaEE3.s 			page 270


 8945              	.LVL993:
 749:src/display.c **** 
 8946              		.loc 1 749 8 view .LVU2881
 8947 05d2 FFF7FEFF 		bl	scopy
 8948              	.LVL994:
 749:src/display.c **** 
 8949              		.loc 1 749 8 view .LVU2882
 8950 05d6 8046     		mov	r8, r0
 8951              	.LVL995:
 751:src/display.c **** 	}
 8952              		.loc 1 751 4 is_stmt 1 view .LVU2883
 8953 05d8 86E6     		b	.L762
 8954              	.LVL996:
 8955              	.L835:
 760:src/display.c **** #endif
 8956              		.loc 1 760 19 is_stmt 0 view .LVU2884
 8957 05da 0D49     		ldr	r1, .L924+12
 8958 05dc F7E5     		b	.L781
 8959              	.LVL997:
 8960              	.L898:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8961              		.loc 1 691 4 is_stmt 1 view .LVU2885
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8962              		.loc 1 691 11 is_stmt 0 view .LVU2886
 8963 05de 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8964              		.loc 1 691 27 is_stmt 1 view .LVU2887
 8965 05e0 6FE6     		b	.L829
 8966              	.LVL998:
 8967              	.L912:
 771:src/display.c **** 	}
 8968              		.loc 1 771 4 view .LVU2888
 8969 05e2 0C49     		ldr	r1, .L924+16
 8970 05e4 2046     		mov	r0, r4
 8971 05e6 FFF7FEFF 		bl	scopy
 8972              	.LVL999:
 8973 05ea F8E5     		b	.L772
 8974              	.LVL1000:
 8975              	.L811:
 771:src/display.c **** 	}
 8976              		.loc 1 771 4 is_stmt 0 view .LVU2889
 8977 05ec D9F80010 		ldr	r1, [r9]
 8978 05f0 8FE6     		b	.L809
 8979              	.LVL1001:
 8980              	.L833:
 739:src/display.c **** 	  }
 8981              		.loc 1 739 8 view .LVU2890
 8982 05f2 0949     		ldr	r1, .L924+20
 8983 05f4 ECE7     		b	.L780
 8984              	.LVL1002:
 8985              	.L803:
 8986              	.LBB483:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8987              		.loc 1 897 6 discriminator 7 view .LVU2891
 8988 05f6 D9F80000 		ldr	r0, [r9]
 8989 05fa A0E5     		b	.L805
 8990              	.LVL1003:
ARM GAS  /tmp/ccCvaEE3.s 			page 271


 8991              	.L844:
 8992              	.LBB468:
 957:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8993              		.loc 1 957 25 view .LVU2892
 8994 05fc 4FF03E09 		mov	r9, #62
 8995              	.LVL1004:
 957:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8996              		.loc 1 957 25 view .LVU2893
 8997 0600 11E7     		b	.L822
 8998              	.L925:
 8999 0602 00BF     		.align	2
 9000              	.L924:
 9001 0604 00000000 		.word	RectPolConv
 9002 0608 04000000 		.word	.LC3
 9003 060c 0C000000 		.word	.LC5
 9004 0610 14000000 		.word	.LC7
 9005 0614 50000000 		.word	.LC16
 9006 0618 08000000 		.word	.LC4
 9007              	.LBE468:
 9008              	.LBE483:
 9009              		.cfi_endproc
 9010              	.LFE16:
 9012              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 9013              		.align	2
 9014              	.LC22:
 9015 0000 0D00     		.ascii	"\015\000"
 9016 0002 0000     		.align	2
 9017              	.LC23:
 9018 0004 060600   		.ascii	"\006\006\000"
 9019 0007 00       		.align	2
 9020              	.LC25:
 9021 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 9021      492C2057 
 9021      77414C74 
 9021      4500
 9022 0016 0000     		.align	2
 9023              	.LC26:
 9024 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 9024      2055204C 
 9024      20492C20 
 9024      20572041 
 9024      204C2054 
 9025 0032 0000     		.align	2
 9026              	.LC27:
 9027 0034 2000     		.ascii	" \000"
 9028 0036 0000     		.align	2
 9029              	.LC28:
 9030 0038 48595000 		.ascii	"HYP\000"
 9031              		.align	2
 9032              	.LC29:
 9033 003c 7F060600 		.ascii	"\177\006\006\000"
 9034              		.align	2
 9035              	.LC32:
 9036 0040 3020746F 		.ascii	"0 to 255\000"
 9036      20323535 
 9036      00
 9037 0049 000000   		.align	2
ARM GAS  /tmp/ccCvaEE3.s 			page 272


 9038              	.LC33:
 9039 004c 46726565 		.ascii	"Free:\000"
 9039      3A00
 9040 0052 0000     		.align	2
 9041              	.LC34:
 9042 0054 202C2046 		.ascii	" , FL. \000"
 9042      4C2E2000 
 9043              		.align	2
 9044              	.LC35:
 9045 005c 52656773 		.ascii	"Regs:\000"
 9045      3A00
 9046 0062 0000     		.align	2
 9047              	.LC36:
 9048 0064 20910606 		.ascii	" \221\006\006+\000"
 9048      2B00
 9049 006a 0000     		.align	2
 9050              	.LC37:
 9051 006c 202C204C 		.ascii	" , Loc. \000"
 9051      6F632E20 
 9051      00
 9052 0075 000000   		.align	2
 9053              	.LC38:
 9054 0078 464C2000 		.ascii	"FL \000"
 9055              		.align	2
 9056              	.LC39:
 9057 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 9057      06413A44 
 9057      064C494A 
 9057      4B00
 9058 008a 0000     		.align	2
 9059              	.LC40:
 9060 008c 464C2E30 		.ascii	"FL.00-.15\000"
 9060      302D2E31 
 9060      3500
 9061 0096 0000     		.align	2
 9062              	.LC41:
 9063 0098 43414C4C 		.ascii	"CALLS\000"
 9063      5300
 9064 009e 0000     		.align	2
 9065              	.LC42:
 9066 00a0 52656720 		.ascii	"Reg \000"
 9066      00
 9067 00a5 000000   		.align	2
 9068              	.LC43:
 9069 00a8 00       		.ascii	"\000"
 9070 00a9 000000   		.align	2
 9071              	.LC44:
 9072 00ac 202D2D2D 		.ascii	" ---\000"
 9072      00
 9073 00b1 000000   		.align	2
 9074              	.LC31:
 9075 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 9075      093E0A00 
 9076              		.align	2
 9077              	.LC30:
 9078 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 9078      41424344 
ARM GAS  /tmp/ccCvaEE3.s 			page 273


 9078      4C494A4B 
 9078      00
 9079              		.section	.text.display,"ax",%progbits
 9080              		.align	1
 9081              		.p2align 2,,3
 9082              		.global	display
 9083              		.syntax unified
 9084              		.thumb
 9085              		.thumb_func
 9086              		.fpu fpv4-sp-d16
 9088              	display:
 9089              	.LFB34:
2679:src/display.c **** 	int i, j;
 9090              		.loc 1 2679 26 is_stmt 1 view -0
 9091              		.cfi_startproc
 9092              		@ args = 0, pretend = 0, frame = 160
 9093              		@ frame_needed = 0, uses_anonymous_args = 0
2680:src/display.c **** 	char buf[40], *bp = buf;
 9094              		.loc 1 2680 2 view .LVU2895
2681:src/display.c **** 	const char *p;
 9095              		.loc 1 2681 2 view .LVU2896
2679:src/display.c **** 	int i, j;
 9096              		.loc 1 2679 26 is_stmt 0 view .LVU2897
 9097 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9098              		.cfi_def_cfa_offset 36
 9099              		.cfi_offset 4, -36
 9100              		.cfi_offset 5, -32
 9101              		.cfi_offset 6, -28
 9102              		.cfi_offset 7, -24
 9103              		.cfi_offset 8, -20
 9104              		.cfi_offset 9, -16
 9105              		.cfi_offset 10, -12
 9106              		.cfi_offset 11, -8
 9107              		.cfi_offset 14, -4
2684:src/display.c **** 	int skip = 0;
 9108              		.loc 1 2684 24 view .LVU2898
 9109 0004 C14C     		ldr	r4, .L1264
2689:src/display.c **** 	if (State2.disp_freeze) {
 9110              		.loc 1 2689 16 view .LVU2899
 9111 0006 DFF83893 		ldr	r9, .L1264+52
2684:src/display.c **** 	int skip = 0;
 9112              		.loc 1 2684 24 view .LVU2900
 9113 000a 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
2679:src/display.c **** 	int i, j;
 9114              		.loc 1 2679 26 view .LVU2901
 9115 000e A9B0     		sub	sp, sp, #164
 9116              		.cfi_def_cfa_offset 200
 9117              	.LVL1005:
2682:src/display.c **** 	int annuc = 0;
 9118              		.loc 1 2682 2 is_stmt 1 view .LVU2902
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9119              		.loc 1 2683 2 view .LVU2903
2684:src/display.c **** 	int skip = 0;
 9120              		.loc 1 2684 2 view .LVU2904
2685:src/display.c **** 	int x_disp = 0;
 9121              		.loc 1 2685 2 view .LVU2905
2686:src/display.c **** 	const int shift = cur_shift();
ARM GAS  /tmp/ccCvaEE3.s 			page 274


 9122              		.loc 1 2686 2 view .LVU2906
2687:src/display.c **** 
 9123              		.loc 1 2687 2 view .LVU2907
2687:src/display.c **** 
 9124              		.loc 1 2687 20 is_stmt 0 view .LVU2908
 9125 0010 FFF7FEFF 		bl	cur_shift
 9126              	.LVL1006:
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9127              		.loc 1 2690 6 view .LVU2909
 9128 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2689:src/display.c **** 	if (State2.disp_freeze) {
 9129              		.loc 1 2689 16 view .LVU2910
 9130 0016 0022     		movs	r2, #0
 9131              	.LVL1007:
2689:src/display.c **** 	if (State2.disp_freeze) {
 9132              		.loc 1 2689 2 is_stmt 1 view .LVU2911
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9133              		.loc 1 2690 5 is_stmt 0 view .LVU2912
 9134 0018 13F01007 		ands	r7, r3, #16
2689:src/display.c **** 	if (State2.disp_freeze) {
 9135              		.loc 1 2689 16 view .LVU2913
 9136 001c A9F80020 		strh	r2, [r9]	@ movhi
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9137              		.loc 1 2690 2 is_stmt 1 view .LVU2914
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9138              		.loc 1 2690 5 is_stmt 0 view .LVU2915
 9139 0020 40F0F780 		bne	.L1224
2700:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9140              		.loc 1 2700 2 is_stmt 1 view .LVU2916
2700:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9141              		.loc 1 2700 6 is_stmt 0 view .LVU2917
 9142 0024 DFF81C83 		ldr	r8, .L1264+56
 9143 0028 D8F80060 		ldr	r6, [r8]
2700:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9144              		.loc 1 2700 5 view .LVU2918
 9145 002c 002E     		cmp	r6, #0
 9146 002e 40F08280 		bne	.L1225
2719:src/display.c **** #  endif
 9147              		.loc 1 2719 2 is_stmt 1 view .LVU2919
2719:src/display.c **** #  endif
 9148              		.loc 1 2719 33 is_stmt 0 view .LVU2920
 9149 0032 B74B     		ldr	r3, .L1264+4
 9150 0034 1B68     		ldr	r3, [r3]
 9151 0036 0546     		mov	r5, r0
 9152 0038 93F8EAB7 		ldrb	fp, [r3, #2026]	@ zero_extendqisi2
2725:src/display.c **** 
 9153              		.loc 1 2725 2 view .LVU2921
 9154 003c FFF7FEFF 		bl	reset_disp
 9155              	.LVL1008:
2728:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9156              		.loc 1 2728 2 view .LVU2922
 9157 0040 3146     		mov	r1, r6
 9158 0042 1EA8     		add	r0, sp, #120
 9159              	.LVL1009:
2728:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9160              		.loc 1 2728 2 view .LVU2923
 9161 0044 2822     		movs	r2, #40
ARM GAS  /tmp/ccCvaEE3.s 			page 275


 9162 0046 FFF7FEFF 		bl	xset
 9163              	.LVL1010:
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9164              		.loc 1 2734 6 view .LVU2924
 9165 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9166              		.loc 1 2734 5 view .LVU2925
 9167 004c D906     		lsls	r1, r3, #27
2719:src/display.c **** #  endif
 9168              		.loc 1 2719 12 view .LVU2926
 9169 004e CBF3800B 		ubfx	fp, fp, #2, #1
 9170              	.LVL1011:
2725:src/display.c **** 
 9171              		.loc 1 2725 2 is_stmt 1 view .LVU2927
2728:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9172              		.loc 1 2728 2 view .LVU2928
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9173              		.loc 1 2734 2 view .LVU2929
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9174              		.loc 1 2734 5 is_stmt 0 view .LVU2930
 9175 0052 00F19D81 		bmi	.L1226
2746:src/display.c **** 	  if (yreg_enabled) {
 9176              		.loc 1 2746 9 is_stmt 1 view .LVU2931
2746:src/display.c **** 	  if (yreg_enabled) {
 9177              		.loc 1 2746 13 is_stmt 0 view .LVU2932
 9178 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2746:src/display.c **** 	  if (yreg_enabled) {
 9179              		.loc 1 2746 12 view .LVU2933
 9180 0058 5207     		lsls	r2, r2, #29
 9181 005a 00F0E480 		beq	.L934
2747:src/display.c **** 	    set_status_top(S_SURE);
 9182              		.loc 1 2747 4 is_stmt 1 view .LVU2934
2747:src/display.c **** 	    set_status_top(S_SURE);
 9183              		.loc 1 2747 7 is_stmt 0 view .LVU2935
 9184 005e BBF1000F 		cmp	fp, #0
 9185 0062 00F0D681 		beq	.L935
2748:src/display.c **** 	    no_status_top = 1;
 9186              		.loc 1 2748 6 is_stmt 1 view .LVU2936
 9187              	.LVL1012:
 9188              	.LBB544:
 9189              	.LBI544:
3639:src/display.c **** 	if (no_status_top) return;
 9190              		.loc 1 3639 19 view .LVU2937
 9191              	.LBB545:
3640:src/display.c **** 	if (State2.runmode) {
 9192              		.loc 1 3640 2 view .LVU2938
3640:src/display.c **** 	if (State2.runmode) {
 9193              		.loc 1 3640 5 is_stmt 0 view .LVU2939
 9194 0066 B9F90030 		ldrsh	r3, [r9]
 9195 006a 13B9     		cbnz	r3, .L937
 9196 006c A948     		ldr	r0, .L1264+8
 9197 006e FFF7FEFF 		bl	set_status_top.part.0
 9198              	.LVL1013:
 9199              	.L937:
3640:src/display.c **** 	if (State2.runmode) {
 9200              		.loc 1 3640 5 view .LVU2940
 9201              	.LBE545:
ARM GAS  /tmp/ccCvaEE3.s 			page 276


 9202              	.LBE544:
2749:src/display.c **** 	    annuc = 1;
 9203              		.loc 1 2749 6 is_stmt 1 view .LVU2941
2749:src/display.c **** 	    annuc = 1;
 9204              		.loc 1 2749 20 is_stmt 0 view .LVU2942
 9205 0072 0126     		movs	r6, #1
 9206 0074 A9F80060 		strh	r6, [r9]	@ movhi
2750:src/display.c **** 	  }
 9207              		.loc 1 2750 6 is_stmt 1 view .LVU2943
 9208              	.LVL1014:
2973:src/display.c ****       nostk:
 9209              		.loc 1 2973 2 view .LVU2944
 9210 0078 FFF7FEFF 		bl	show_stack
 9211              	.LVL1015:
2975:src/display.c **** 	if (!skip) {
 9212              		.loc 1 2975 2 view .LVU2945
 9213 007c A64B     		ldr	r3, .L1264+12
 9214 007e A74F     		ldr	r7, .L1264+16
 9215 0080 0093     		str	r3, [sp]
 9216 0082 FFF7FEFF 		bl	show_flags
 9217              	.LVL1016:
2976:src/display.c **** 	  if (State2.runmode) {
 9218              		.loc 1 2976 2 view .LVU2946
 9219              	.L938:
2977:src/display.c **** 	  only_update_x:
 9220              		.loc 1 2977 4 view .LVU2947
2977:src/display.c **** 	  only_update_x:
 9221              		.loc 1 2977 8 is_stmt 0 view .LVU2948
 9222 0086 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2977:src/display.c **** 	  only_update_x:
 9223              		.loc 1 2977 7 view .LVU2949
 9224 0088 15F04005 		ands	r5, r5, #64
 9225 008c 5FD1     		bne	.L931
 9226              	.LBB546:
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9227              		.loc 1 3017 6 is_stmt 1 view .LVU2950
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9228              		.loc 1 3017 24 is_stmt 0 view .LVU2951
 9229 008e A04B     		ldr	r3, .L1264+4
3021:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9230              		.loc 1 3021 6 view .LVU2952
 9231 0090 DFF8B4A2 		ldr	r10, .L1264+60
 9232              	.LVL1017:
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9233              		.loc 1 3017 24 view .LVU2953
 9234 0094 1B68     		ldr	r3, [r3]
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9235              		.loc 1 3017 19 view .LVU2954
 9236 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 9237              	.LVL1018:
3018:src/display.c **** 	    const int n = nLIB(pc);
 9238              		.loc 1 3018 6 is_stmt 1 view .LVU2955
3018:src/display.c **** 	    const int n = nLIB(pc);
 9239              		.loc 1 3018 25 is_stmt 0 view .LVU2956
 9240 009a 5846     		mov	r0, fp
 9241 009c FFF7FEFF 		bl	user_pc
 9242              	.LVL1019:
ARM GAS  /tmp/ccCvaEE3.s 			page 277


3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9243              		.loc 1 3020 6 view .LVU2957
 9244 00a0 2822     		movs	r2, #40
 9245 00a2 2946     		mov	r1, r5
3018:src/display.c **** 	    const int n = nLIB(pc);
 9246              		.loc 1 3018 25 view .LVU2958
 9247 00a4 8046     		mov	r8, r0
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9248              		.loc 1 3020 6 view .LVU2959
 9249 00a6 1EA8     		add	r0, sp, #120
 9250              	.LVL1020:
3019:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9251              		.loc 1 3019 6 is_stmt 1 view .LVU2960
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9252              		.loc 1 3020 6 is_stmt 0 view .LVU2961
 9253 00a8 FFF7FEFF 		bl	xset
 9254              	.LVL1021:
3019:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9255              		.loc 1 3019 20 view .LVU2962
 9256 00ac 4FEA9B3B 		lsr	fp, fp, #14
 9257              	.LVL1022:
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9258              		.loc 1 3020 6 is_stmt 1 view .LVU2963
3021:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9259              		.loc 1 3021 6 view .LVU2964
 9260 00b0 DAF80000 		ldr	r0, [r10]
 9261 00b4 2A46     		mov	r2, r5
 9262 00b6 0121     		movs	r1, #1
 9263 00b8 FFF7FEFF 		bl	set_exp
 9264              	.LVL1023:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9265              		.loc 1 3022 6 view .LVU2965
 9266 00bc BBF1000F 		cmp	fp, #0
 9267 00c0 40F0E681 		bne	.L1227
 9268 00c4 9649     		ldr	r1, .L1264+20
 9269 00c6 1EA8     		add	r0, sp, #120
 9270 00c8 FFF7FEFF 		bl	scopy_spc
 9271              	.LVL1024:
 9272 00cc 0322     		movs	r2, #3
 9273 00ce 4146     		mov	r1, r8
 9274 00d0 FFF7FEFF 		bl	num_arg_0
 9275              	.LVL1025:
3024:src/display.c **** #ifndef REALBUILD
 9276              		.loc 1 3024 6 view .LVU2966
 9277 00d4 0921     		movs	r1, #9
 9278 00d6 1EA8     		add	r0, sp, #120
 9279 00d8 FFF7FEFF 		bl	set_digits_string
 9280              	.LVL1026:
3026:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9281              		.loc 1 3026 6 view .LVU2967
 9282 00dc 5946     		mov	r1, fp
 9283 00de 2822     		movs	r2, #40
 9284 00e0 1EA8     		add	r0, sp, #120
 9285 00e2 FFF7FEFF 		bl	xset
 9286              	.LVL1027:
3027:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9287              		.loc 1 3027 6 view .LVU2968
ARM GAS  /tmp/ccCvaEE3.s 			page 278


 9288 00e6 5A46     		mov	r2, fp
 9289 00e8 0121     		movs	r1, #1
 9290 00ea DAF80000 		ldr	r0, [r10]
 9291 00ee FFF7FEFF 		bl	set_exp
 9292              	.LVL1028:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9293              		.loc 1 3028 6 view .LVU2969
 9294 00f2 8C49     		ldr	r1, .L1264+24
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9295              		.loc 1 3022 6 is_stmt 0 view .LVU2970
 9296 00f4 4FF0030B 		mov	fp, #3
 9297              	.LVL1029:
 9298              	.L1076:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9299              		.loc 1 3028 6 discriminator 4 view .LVU2971
 9300 00f8 1EA8     		add	r0, sp, #120
 9301 00fa FFF7FEFF 		bl	scopy_spc
 9302              	.LVL1030:
 9303 00fe 4146     		mov	r1, r8
 9304 0100 5A46     		mov	r2, fp
 9305 0102 FFF7FEFF 		bl	num_arg_0
 9306              	.LVL1031:
 9307              	.LBB547:
3031:src/display.c **** 	      char *l=LastDisplayedNumber;
 9308              		.loc 1 3031 8 is_stmt 1 discriminator 4 view .LVU2972
3032:src/display.c **** 	      *l++=' ';
 9309              		.loc 1 3032 8 discriminator 4 view .LVU2973
3033:src/display.c **** 	      while(*b) {
 9310              		.loc 1 3033 8 discriminator 4 view .LVU2974
3033:src/display.c **** 	      while(*b) {
 9311              		.loc 1 3033 12 is_stmt 0 discriminator 4 view .LVU2975
 9312 0106 884B     		ldr	r3, .L1264+28
3034:src/display.c **** 		*l++=*b++;
 9313              		.loc 1 3034 14 discriminator 4 view .LVU2976
 9314 0108 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3033:src/display.c **** 	      while(*b) {
 9315              		.loc 1 3033 12 discriminator 4 view .LVU2977
 9316 010c 2025     		movs	r5, #32
 9317 010e 1D70     		strb	r5, [r3]
3034:src/display.c **** 		*l++=*b++;
 9318              		.loc 1 3034 8 is_stmt 1 discriminator 4 view .LVU2978
3034:src/display.c **** 		*l++=*b++;
 9319              		.loc 1 3034 13 discriminator 4 view .LVU2979
 9320 0110 0029     		cmp	r1, #0
 9321 0112 00F03883 		beq	.L1091
 9322 0116 0333     		adds	r3, r3, #3
 9323 0118 1EA8     		add	r0, sp, #120
 9324              	.LVL1032:
 9325              	.L1069:
3035:src/display.c **** 		*l++=' ';
 9326              		.loc 1 3035 3 view .LVU2980
3035:src/display.c **** 		*l++=' ';
 9327              		.loc 1 3035 7 is_stmt 0 view .LVU2981
 9328 011a 03F8021C 		strb	r1, [r3, #-2]
3036:src/display.c **** 	      }
 9329              		.loc 1 3036 3 is_stmt 1 view .LVU2982
 9330              	.LVL1033:
ARM GAS  /tmp/ccCvaEE3.s 			page 279


3034:src/display.c **** 		*l++=*b++;
 9331              		.loc 1 3034 14 is_stmt 0 view .LVU2983
 9332 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9333              	.LVL1034:
3036:src/display.c **** 	      }
 9334              		.loc 1 3036 7 view .LVU2984
 9335 0122 03F8015C 		strb	r5, [r3, #-1]
3034:src/display.c **** 		*l++=*b++;
 9336              		.loc 1 3034 13 is_stmt 1 view .LVU2985
 9337 0126 1A46     		mov	r2, r3
 9338 0128 0233     		adds	r3, r3, #2
 9339              	.LVL1035:
3034:src/display.c **** 		*l++=*b++;
 9340              		.loc 1 3034 13 is_stmt 0 view .LVU2986
 9341 012a 0029     		cmp	r1, #0
 9342 012c F5D1     		bne	.L1069
 9343              	.LVL1036:
 9344              	.L1068:
3038:src/display.c **** 	    }
 9345              		.loc 1 3038 8 is_stmt 1 view .LVU2987
3038:src/display.c **** 	    }
 9346              		.loc 1 3038 10 is_stmt 0 view .LVU2988
 9347 012e 0023     		movs	r3, #0
 9348 0130 7E4D     		ldr	r5, .L1264+32
 9349 0132 1370     		strb	r3, [r2]
 9350              	.LVL1037:
3038:src/display.c **** 	    }
 9351              		.loc 1 3038 10 view .LVU2989
 9352              	.LBE547:
 9353              	.LBE546:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9354              		.loc 1 3043 2 is_stmt 1 view .LVU2990
 9355 0134 2AE0     		b	.L1223
 9356              	.LVL1038:
 9357              	.L1225:
2707:src/display.c **** 
 9358              		.loc 1 2707 4 view .LVU2991
 9359 0136 FFF7FEFF 		bl	wait_for_display
 9360              	.LVL1039:
2710:src/display.c **** 	    clr_dot(i);
 9361              		.loc 1 2710 4 view .LVU2992
2710:src/display.c **** 	    clr_dot(i);
 9362              		.loc 1 2710 16 view .LVU2993
 9363              	.L930:
2711:src/display.c **** 	  }
 9364              		.loc 1 2711 6 discriminator 3 view .LVU2994
 9365 013a 3846     		mov	r0, r7
2710:src/display.c **** 	    clr_dot(i);
 9366              		.loc 1 2710 31 is_stmt 0 discriminator 3 view .LVU2995
 9367 013c 0137     		adds	r7, r7, #1
 9368              	.LVL1040:
2711:src/display.c **** 	  }
 9369              		.loc 1 2711 6 discriminator 3 view .LVU2996
 9370 013e FFF7FEFF 		bl	clr_dot
 9371              	.LVL1041:
2710:src/display.c **** 	    clr_dot(i);
 9372              		.loc 1 2710 31 is_stmt 1 discriminator 3 view .LVU2997
ARM GAS  /tmp/ccCvaEE3.s 			page 280


2710:src/display.c **** 	    clr_dot(i);
 9373              		.loc 1 2710 16 discriminator 3 view .LVU2998
2710:src/display.c **** 	    clr_dot(i);
 9374              		.loc 1 2710 4 is_stmt 0 discriminator 3 view .LVU2999
 9375 0142 832F     		cmp	r7, #131
 9376 0144 F9D1     		bne	.L930
 9377 0146 744B     		ldr	r3, .L1264+12
 9378 0148 744F     		ldr	r7, .L1264+16
 9379              	.LVL1042:
2710:src/display.c **** 	    clr_dot(i);
 9380              		.loc 1 2710 4 discriminator 3 view .LVU3000
 9381 014a 0093     		str	r3, [sp]
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9382              		.loc 1 2683 6 view .LVU3001
 9383 014c 0026     		movs	r6, #0
 9384              	.LVL1043:
 9385              	.L931:
2979:src/display.c **** 	    if (p == NULL || cata) {
 9386              		.loc 1 2979 6 is_stmt 1 view .LVU3002
2979:src/display.c **** 	    if (p == NULL || cata) {
 9387              		.loc 1 2979 10 is_stmt 0 view .LVU3003
 9388 014e FFF7FEFF 		bl	get_cmdline
 9389              	.LVL1044:
2980:src/display.c **** 	      if (ShowRegister != -1) {
 9390              		.loc 1 2980 6 is_stmt 1 view .LVU3004
2980:src/display.c **** 	      if (ShowRegister != -1) {
 9391              		.loc 1 2980 9 is_stmt 0 view .LVU3005
 9392 0152 0546     		mov	r5, r0
 9393 0154 18B1     		cbz	r0, .L1025
2980:src/display.c **** 	      if (ShowRegister != -1) {
 9394              		.loc 1 2980 20 discriminator 1 view .LVU3006
 9395 0156 BAF1000F 		cmp	r10, #0
 9396 015a 00F09F80 		beq	.L1026
 9397              	.L1025:
2981:src/display.c **** #ifdef INCLUDE_C_LOCK
 9398              		.loc 1 2981 8 is_stmt 1 view .LVU3007
2981:src/display.c **** #ifdef INCLUDE_C_LOCK
 9399              		.loc 1 2981 25 is_stmt 0 view .LVU3008
 9400 015e 734D     		ldr	r5, .L1264+32
 9401 0160 2868     		ldr	r0, [r5]
 9402              	.LVL1045:
2981:src/display.c **** #ifdef INCLUDE_C_LOCK
 9403              		.loc 1 2981 11 view .LVU3009
 9404 0162 411C     		adds	r1, r0, #1
 9405 0164 00F04B81 		beq	.L1027
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9406              		.loc 1 2983 3 is_stmt 1 view .LVU3010
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9407              		.loc 1 2983 8 is_stmt 0 view .LVU3011
 9408 0168 694A     		ldr	r2, .L1264+4
 9409 016a 1168     		ldr	r1, [r2]
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9410              		.loc 1 2983 34 view .LVU3012
 9411 016c 91F8AC37 		ldrb	r3, [r1, #1964]	@ zero_extendqisi2
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9412              		.loc 1 2983 6 view .LVU3013
 9413 0170 03F0C703 		and	r3, r3, #199
ARM GAS  /tmp/ccCvaEE3.s 			page 281


 9414 0174 C12B     		cmp	r3, #193
 9415 0176 00F0E980 		beq	.L1228
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9416              		.loc 1 2999 5 is_stmt 1 view .LVU3014
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9417              		.loc 1 2999 41 is_stmt 0 view .LVU3015
 9418 017a 6428     		cmp	r0, #100
 9419 017c 00F07281 		beq	.L1229
 9420              	.L1034:
3000:src/display.c **** 		}
 9421              		.loc 1 3000 5 is_stmt 1 view .LVU3016
 9422 0180 0021     		movs	r1, #0
 9423 0182 FFF7FEFF 		bl	format_reg
 9424              	.LVL1046:
3013:src/display.c **** 	      goto finish;
 9425              		.loc 1 3013 6 view .LVU3017
3013:src/display.c **** 	      goto finish;
 9426              		.loc 1 3013 9 is_stmt 0 view .LVU3018
 9427 0186 D8F80030 		ldr	r3, [r8]
 9428 018a 73BB     		cbnz	r3, .L1032
 9429              	.LVL1047:
 9430              	.L1223:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9431              		.loc 1 3043 2 view .LVU3019
 9432 018c FFF7FEFF 		bl	set_annunciators
 9433              	.LVL1048:
3044:src/display.c **** 	  ShowRPN = 0;
 9434              		.loc 1 3044 2 is_stmt 1 view .LVU3020
 9435              	.L933:
3045:src/display.c **** 	  dot(RPN, 0);
 9436              		.loc 1 3045 4 view .LVU3021
3045:src/display.c **** 	  dot(RPN, 0);
 9437              		.loc 1 3045 12 is_stmt 0 view .LVU3022
 9438 0190 DFF89C81 		ldr	r8, .L1264+36
 9439 0194 0023     		movs	r3, #0
 9440              	.LBB549:
 9441              	.LBB550:
 349:src/display.c **** }
 9442              		.loc 1 349 8 view .LVU3023
 9443 0196 8D20     		movs	r0, #141
 9444              	.LBE550:
 9445              	.LBE549:
3045:src/display.c **** 	  dot(RPN, 0);
 9446              		.loc 1 3045 12 view .LVU3024
 9447 0198 C8F80030 		str	r3, [r8]
3046:src/display.c **** 	}
 9448              		.loc 1 3046 4 is_stmt 1 view .LVU3025
 9449              	.LVL1049:
 9450              	.LBB552:
 9451              	.LBI549:
 347:src/display.c ****   if (on)	set_dot(n);
 9452              		.loc 1 347 6 view .LVU3026
 9453              	.LBB551:
 348:src/display.c ****   else	clr_dot(n);
 9454              		.loc 1 348 3 view .LVU3027
 349:src/display.c **** }
 9455              		.loc 1 349 8 view .LVU3028
ARM GAS  /tmp/ccCvaEE3.s 			page 282


 9456 019c FFF7FEFF 		bl	clr_dot
 9457              	.LVL1050:
 9458              	.L1070:
 349:src/display.c **** }
 9459              		.loc 1 349 8 is_stmt 0 view .LVU3029
 9460              	.LBE551:
 9461              	.LBE552:
3049:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9462              		.loc 1 3049 2 is_stmt 1 view .LVU3030
3050:src/display.c **** 
 9463              		.loc 1 3050 4 is_stmt 0 view .LVU3031
 9464 01a0 D8F80030 		ldr	r3, [r8]
 9465 01a4 002B     		cmp	r3, #0
 9466 01a6 40F0F180 		bne	.L1092
3049:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9467              		.loc 1 3049 31 view .LVU3032
 9468 01aa A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9469 01ac 12F04003 		ands	r3, r2, #64
 9470 01b0 08D0     		beq	.L1071
3050:src/display.c **** 
 9471              		.loc 1 3050 8 view .LVU3033
 9472 01b2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3050:src/display.c **** 
 9473              		.loc 1 3050 4 view .LVU3034
 9474 01b4 1B07     		lsls	r3, r3, #28
 9475 01b6 40F11581 		bpl	.L1094
3050:src/display.c **** 
 9476              		.loc 1 3050 30 discriminator 3 view .LVU3035
 9477 01ba 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9478 01bc 012B     		cmp	r3, #1
 9479 01be 01D0     		beq	.L1071
3050:src/display.c **** 
 9480              		.loc 1 3050 60 discriminator 5 view .LVU3036
 9481 01c0 C2F38003 		ubfx	r3, r2, #2, #1
 9482              	.L1071:
3049:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9483              		.loc 1 3049 19 discriminator 9 view .LVU3037
 9484 01c4 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9485 01c6 63F34512 		bfi	r2, r3, #5, #1
 9486 01ca E275     		strb	r2, [r4, #23]
3053:src/display.c **** 	  annunciators();
 9487              		.loc 1 3053 2 is_stmt 1 discriminator 9 view .LVU3038
3053:src/display.c **** 	  annunciators();
 9488              		.loc 1 3053 5 is_stmt 0 discriminator 9 view .LVU3039
 9489 01cc 002E     		cmp	r6, #0
 9490 01ce 00F0D780 		beq	.L1072
3053:src/display.c **** 	  annunciators();
 9491              		.loc 1 3053 36 discriminator 1 view .LVU3040
 9492 01d2 D3B2     		uxtb	r3, r2
3053:src/display.c **** 	  annunciators();
 9493              		.loc 1 3053 13 discriminator 1 view .LVU3041
 9494 01d4 03F02103 		and	r3, r3, #33
 9495 01d8 202B     		cmp	r3, #32
 9496 01da 00F0D180 		beq	.L1072
 9497              	.L1073:
3054:src/display.c ****  	State2.hms = 0;
 9498              		.loc 1 3054 4 is_stmt 1 view .LVU3042
ARM GAS  /tmp/ccCvaEE3.s 			page 283


 9499 01de FFF7FEFF 		bl	annunciators
 9500              	.LVL1051:
 9501              	.L1074:
3055:src/display.c **** #else
 9502              		.loc 1 3055 3 view .LVU3043
3055:src/display.c **** #else
 9503              		.loc 1 3055 14 is_stmt 0 view .LVU3044
 9504 01e2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9505 01e4 6FF30003 		bfc	r3, #0, #1
 9506 01e8 E375     		strb	r3, [r4, #23]
 9507              	.L1032:
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9508              		.loc 1 3062 2 is_stmt 1 view .LVU3045
3063:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9509              		.loc 1 3063 2 view .LVU3046
3064:src/display.c **** 	State2.invalid_disp = 0;
 9510              		.loc 1 3064 2 view .LVU3047
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9511              		.loc 1 3062 17 is_stmt 0 view .LVU3048
 9512 01ea 6369     		ldr	r3, [r4, #20]
3068:src/display.c **** 	State2.disp_small = 0;
 9513              		.loc 1 3068 11 view .LVU3049
 9514 01ec 009A     		ldr	r2, [sp]
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9515              		.loc 1 3062 17 view .LVU3050
 9516 01ee 23F02173 		bic	r3, r3, #42205184
 9517 01f2 23F48053 		bic	r3, r3, #4096
3064:src/display.c **** 	State2.invalid_disp = 0;
 9518              		.loc 1 3064 15 view .LVU3051
 9519 01f6 0026     		movs	r6, #0
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9520              		.loc 1 3062 17 view .LVU3052
 9521 01f8 6361     		str	r3, [r4, #20]
3066:src/display.c **** 	DispMsg = CNULL;
 9522              		.loc 1 3066 15 view .LVU3053
 9523 01fa 6423     		movs	r3, #100
3064:src/display.c **** 	State2.invalid_disp = 0;
 9524              		.loc 1 3064 15 view .LVU3054
 9525 01fc 6674     		strb	r6, [r4, #17]
3065:src/display.c **** 	ShowRegister = regX_idx;
 9526              		.loc 1 3065 2 is_stmt 1 view .LVU3055
3066:src/display.c **** 	DispMsg = CNULL;
 9527              		.loc 1 3066 2 view .LVU3056
3067:src/display.c **** 	DispPlot = 0;
 9528              		.loc 1 3067 10 is_stmt 0 view .LVU3057
 9529 01fe 3E60     		str	r6, [r7]
3068:src/display.c **** 	State2.disp_small = 0;
 9530              		.loc 1 3068 11 view .LVU3058
 9531 0200 1680     		strh	r6, [r2]	@ movhi
3066:src/display.c **** 	DispMsg = CNULL;
 9532              		.loc 1 3066 15 view .LVU3059
 9533 0202 2B60     		str	r3, [r5]
3067:src/display.c **** 	DispPlot = 0;
 9534              		.loc 1 3067 2 is_stmt 1 view .LVU3060
3068:src/display.c **** 	State2.disp_small = 0;
 9535              		.loc 1 3068 2 view .LVU3061
3069:src/display.c **** 	finish_display();
ARM GAS  /tmp/ccCvaEE3.s 			page 284


 9536              		.loc 1 3069 2 view .LVU3062
3070:src/display.c **** 	no_status_top = 0;
 9537              		.loc 1 3070 2 view .LVU3063
 9538 0204 FFF7FEFF 		bl	finish_display
 9539              	.LVL1052:
3071:src/display.c **** #ifdef CONSOLE
 9540              		.loc 1 3071 2 view .LVU3064
3071:src/display.c **** #ifdef CONSOLE
 9541              		.loc 1 3071 16 is_stmt 0 view .LVU3065
 9542 0208 A9F80060 		strh	r6, [r9]	@ movhi
3075:src/display.c **** #else
 9543              		.loc 1 3075 7 view .LVU3066
 9544 020c 29B0     		add	sp, sp, #164
 9545              		.cfi_remember_state
 9546              		.cfi_def_cfa_offset 36
 9547              		@ sp needed
 9548 020e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9549              	.LVL1053:
 9550              	.L1224:
 9551              		.cfi_restore_state
2691:src/display.c **** 	  State2.disp_temp = 1;
 9552              		.loc 1 2691 4 is_stmt 1 view .LVU3067
2692:src/display.c **** #ifdef CONSOLE
 9553              		.loc 1 2692 4 view .LVU3068
2696:src/display.c **** 	  return;
 9554              		.loc 1 2696 12 is_stmt 0 view .LVU3069
 9555 0212 4749     		ldr	r1, .L1264+36
2691:src/display.c **** 	  State2.disp_temp = 1;
 9556              		.loc 1 2691 23 view .LVU3070
 9557 0214 23F03003 		bic	r3, r3, #48
 9558 0218 43F02003 		orr	r3, r3, #32
 9559 021c E375     		strb	r3, [r4, #23]
2696:src/display.c **** 	  return;
 9560              		.loc 1 2696 4 is_stmt 1 view .LVU3071
2696:src/display.c **** 	  return;
 9561              		.loc 1 2696 12 is_stmt 0 view .LVU3072
 9562 021e 0A60     		str	r2, [r1]
2697:src/display.c **** 	}
 9563              		.loc 1 2697 4 is_stmt 1 view .LVU3073
3075:src/display.c **** #else
 9564              		.loc 1 3075 7 is_stmt 0 view .LVU3074
 9565 0220 29B0     		add	sp, sp, #164
 9566              		.cfi_remember_state
 9567              		.cfi_def_cfa_offset 36
 9568              		@ sp needed
 9569 0222 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9570              	.LVL1054:
 9571              	.L934:
 9572              		.cfi_restore_state
2755:src/display.c **** 	  bp = scopy(bp, "HYP");
 9573              		.loc 1 2755 9 is_stmt 1 view .LVU3075
2755:src/display.c **** 	  bp = scopy(bp, "HYP");
 9574              		.loc 1 2755 12 is_stmt 0 view .LVU3076
 9575 0226 9F06     		lsls	r7, r3, #26
 9576 0228 00F1DE80 		bmi	.L1230
2767:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9577              		.loc 1 2767 9 is_stmt 1 view .LVU3077
ARM GAS  /tmp/ccCvaEE3.s 			page 285


2767:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9578              		.loc 1 2767 12 is_stmt 0 view .LVU3078
 9579 022c D907     		lsls	r1, r3, #31
 9580 022e 00F17C81 		bmi	.L1231
2782:src/display.c **** 	  /* Commands with arguments */
 9581              		.loc 1 2782 9 is_stmt 1 view .LVU3079
2782:src/display.c **** 	  /* Commands with arguments */
 9582              		.loc 1 2782 13 is_stmt 0 view .LVU3080
 9583 0232 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2782:src/display.c **** 	  /* Commands with arguments */
 9584              		.loc 1 2782 12 view .LVU3081
 9585 0234 8A06     		lsls	r2, r1, #26
 9586 0236 40F1F780 		bpl	.L946
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9587              		.loc 1 2785 4 is_stmt 1 view .LVU3082
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9588              		.loc 1 2785 8 is_stmt 0 view .LVU3083
 9589 023a E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9590              		.loc 1 2785 7 view .LVU3084
 9591 023c 4D2B     		cmp	r3, #77
 9592 023e 00F0A981 		beq	.L947
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9593              		.loc 1 2785 28 discriminator 1 view .LVU3085
 9594 0242 03F16C02 		add	r2, r3, #108
 9595 0246 D2B2     		uxtb	r2, r2
 9596 0248 012A     		cmp	r2, #1
 9597 024a 40F2A381 		bls	.L947
2681:src/display.c **** 	const char *p;
 9598              		.loc 1 2681 17 view .LVU3086
 9599 024e 1EA8     		add	r0, sp, #120
 9600              	.LVL1055:
 9601              	.L948:
2788:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9602              		.loc 1 2788 4 is_stmt 1 view .LVU3087
2788:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9603              		.loc 1 2788 35 is_stmt 0 view .LVU3088
 9604 0250 0622     		movs	r2, #6
 9605 0252 3849     		ldr	r1, .L1264+40
 9606 0254 02EB0313 		add	r3, r2, r3, lsl #4
2788:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9607              		.loc 1 2788 9 view .LVU3089
 9608 0258 1944     		add	r1, r1, r3
 9609 025a FFF7FEFF 		bl	scopy
 9610              	.LVL1056:
2789:src/display.c **** 	  if (State2.dot) {
 9611              		.loc 1 2789 4 is_stmt 1 view .LVU3090
2789:src/display.c **** 	  if (State2.dot) {
 9612              		.loc 1 2789 9 is_stmt 0 view .LVU3091
 9613 025e 364B     		ldr	r3, .L1264+44
 9614 0260 94F91510 		ldrsb	r1, [r4, #21]
 9615 0264 354A     		ldr	r2, .L1264+48
 9616 0266 12EA2101 		ands	r1, r2, r1, asr #32
 9617 026a 38BF     		it	cc
 9618 026c 1946     		movcc	r1, r3
 9619 026e FFF7FEFF 		bl	scopy
 9620              	.LVL1057:
ARM GAS  /tmp/ccCvaEE3.s 			page 286


2790:src/display.c **** 	    *bp++ = 's';
 9621              		.loc 1 2790 8 view .LVU3092
 9622 0272 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9623              	.LVL1058:
2790:src/display.c **** 	    *bp++ = 's';
 9624              		.loc 1 2790 4 is_stmt 1 view .LVU3093
2790:src/display.c **** 	    *bp++ = 's';
 9625              		.loc 1 2790 7 is_stmt 0 view .LVU3094
 9626 0274 5F06     		lsls	r7, r3, #25
 9627 0276 40F19F81 		bpl	.L950
2791:src/display.c **** 	    *bp++ = '_';
 9628              		.loc 1 2791 6 is_stmt 1 view .LVU3095
 9629              	.LVL1059:
2791:src/display.c **** 	    *bp++ = '_';
 9630              		.loc 1 2791 12 is_stmt 0 view .LVU3096
 9631 027a 7322     		movs	r2, #115
2792:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9632              		.loc 1 2792 12 view .LVU3097
 9633 027c 5F23     		movs	r3, #95
2791:src/display.c **** 	    *bp++ = '_';
 9634              		.loc 1 2791 12 view .LVU3098
 9635 027e 0270     		strb	r2, [r0]
2792:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9636              		.loc 1 2792 6 is_stmt 1 view .LVU3099
 9637              	.LVL1060:
2792:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9638              		.loc 1 2792 12 is_stmt 0 view .LVU3100
 9639 0280 4370     		strb	r3, [r0, #1]
 9640              	.LVL1061:
 9641              	.L974:
2895:src/display.c **** 	    set_status_top(buf);
 9642              		.loc 1 2895 4 is_stmt 1 view .LVU3101
2895:src/display.c **** 	    set_status_top(buf);
 9643              		.loc 1 2895 7 is_stmt 0 view .LVU3102
 9644 0282 BBF1000F 		cmp	fp, #0
 9645 0286 00F0E280 		beq	.L941
 9646              	.L1213:
2896:src/display.c **** 	    no_status_top = 1;
 9647              		.loc 1 2896 6 is_stmt 1 view .LVU3103
 9648              	.LVL1062:
 9649              	.LBB553:
 9650              	.LBI553:
3639:src/display.c **** 	if (no_status_top) return;
 9651              		.loc 1 3639 19 view .LVU3104
 9652              	.LBB554:
3640:src/display.c **** 	if (State2.runmode) {
 9653              		.loc 1 3640 2 view .LVU3105
3640:src/display.c **** 	if (State2.runmode) {
 9654              		.loc 1 3640 5 is_stmt 0 view .LVU3106
 9655 028a B9F90030 		ldrsh	r3, [r9]
 9656 028e 002B     		cmp	r3, #0
 9657 0290 7FF4EFAE 		bne	.L937
 9658              	.LBE554:
 9659              	.LBE553:
 9660              	.LBB555:
 9661              	.LBB556:
 9662 0294 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/ccCvaEE3.s 			page 287


 9663              	.LVL1063:
3640:src/display.c **** 	if (State2.runmode) {
 9664              		.loc 1 3640 5 view .LVU3107
 9665 0296 FFF7FEFF 		bl	set_status_top.part.0
 9666              	.LVL1064:
3640:src/display.c **** 	if (State2.runmode) {
 9667              		.loc 1 3640 5 view .LVU3108
 9668 029a EAE6     		b	.L937
 9669              	.LVL1065:
 9670              	.L1026:
3640:src/display.c **** 	if (State2.runmode) {
 9671              		.loc 1 3640 5 view .LVU3109
 9672              	.LBE556:
 9673              	.LBE555:
3010:src/display.c **** 	      x_disp = 1;
 9674              		.loc 1 3010 8 is_stmt 1 view .LVU3110
 9675              	.LBB557:
 9676              	.LBI557:
1330:src/display.c ****       int i;
 9677              		.loc 1 1330 17 view .LVU3111
 9678              	.LBB558:
1331:src/display.c ****       int gotdot = -1;
 9679              		.loc 1 1331 7 view .LVU3112
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9680              		.loc 1 1332 7 view .LVU3113
1334:src/display.c **** #endif
 9681              		.loc 1 1334 7 view .LVU3114
1338:src/display.c **** #endif
 9682              		.loc 1 1338 7 view .LVU3115
1341:src/display.c **** 	SET_MANT_SIGN;
 9683              		.loc 1 1341 7 view .LVU3116
1341:src/display.c **** 	SET_MANT_SIGN;
 9684              		.loc 1 1341 10 is_stmt 0 view .LVU3117
 9685 029c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9686 029e 2D2B     		cmp	r3, #45
 9687 02a0 00F0AA81 		beq	.L1232
 9688              	.LVL1066:
 9689              	.L1037:
1346:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9690              		.loc 1 1346 7 is_stmt 1 view .LVU3118
1346:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9691              		.loc 1 1346 11 is_stmt 0 view .LVU3119
 9692 02a4 1A4B     		ldr	r3, .L1264+4
 9693 02a6 1B68     		ldr	r3, [r3]
 9694 02a8 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1346:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9695              		.loc 1 1346 10 view .LVU3120
 9696 02ac 13F0010B 		ands	fp, r3, #1
 9697 02b0 00F04C81 		beq	.L1038
 9698              	.LVL1067:
1347:src/display.c **** 	  set_dig(i, *p);
 9699              		.loc 1 1347 12 is_stmt 1 view .LVU3121
 9700 02b4 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1347:src/display.c **** 	  set_dig(i, *p);
 9701              		.loc 1 1347 8 is_stmt 0 view .LVU3122
 9702 02b6 4FF0000A 		mov	r10, #0
 9703              	.LVL1068:
ARM GAS  /tmp/ccCvaEE3.s 			page 288


1347:src/display.c **** 	  set_dig(i, *p);
 9704              		.loc 1 1347 2 view .LVU3123
 9705 02ba 41B1     		cbz	r1, .L1040
 9706              	.LVL1069:
 9707              	.L1039:
1348:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9708              		.loc 1 1348 4 is_stmt 1 view .LVU3124
 9709 02bc 5046     		mov	r0, r10
 9710 02be FFF7FEFF 		bl	set_dig
 9711              	.LVL1070:
1349:src/display.c **** 	}
 9712              		.loc 1 1349 4 view .LVU3125
1347:src/display.c **** 	  set_dig(i, *p);
 9713              		.loc 1 1347 12 is_stmt 0 view .LVU3126
 9714 02c2 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9715              	.LVL1071:
1349:src/display.c **** 	}
 9716              		.loc 1 1349 6 view .LVU3127
 9717 02c6 0AF1090A 		add	r10, r10, #9
 9718              	.LVL1072:
1347:src/display.c **** 	  set_dig(i, *p);
 9719              		.loc 1 1347 24 is_stmt 1 view .LVU3128
1347:src/display.c **** 	  set_dig(i, *p);
 9720              		.loc 1 1347 12 view .LVU3129
1347:src/display.c **** 	  set_dig(i, *p);
 9721              		.loc 1 1347 2 is_stmt 0 view .LVU3130
 9722 02ca 0029     		cmp	r1, #0
 9723 02cc F6D1     		bne	.L1039
 9724              	.LVL1073:
 9725              	.L1040:
1351:src/display.c ****       } else {
 9726              		.loc 1 1351 2 is_stmt 1 view .LVU3131
 9727 02ce FFF7FEFF 		bl	carry_overflow
 9728              	.LVL1074:
1351:src/display.c ****       } else {
 9729              		.loc 1 1351 2 is_stmt 0 view .LVU3132
 9730              	.LBE558:
 9731              	.LBE557:
3013:src/display.c **** 	      goto finish;
 9732              		.loc 1 3013 6 is_stmt 1 view .LVU3133
3013:src/display.c **** 	      goto finish;
 9733              		.loc 1 3013 9 is_stmt 0 view .LVU3134
 9734 02d2 D8F80030 		ldr	r3, [r8]
 9735 02d6 002B     		cmp	r3, #0
 9736 02d8 40F02581 		bne	.L1135
 9737              	.LVL1075:
 9738              	.L1221:
3013:src/display.c **** 	      goto finish;
 9739              		.loc 1 3013 9 view .LVU3135
 9740 02dc 134D     		ldr	r5, .L1264+32
 9741              	.LVL1076:
 9742              	.L1031:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9743              		.loc 1 3043 2 is_stmt 1 view .LVU3136
 9744 02de FFF7FEFF 		bl	set_annunciators
 9745              	.LVL1077:
3044:src/display.c **** 	  ShowRPN = 0;
ARM GAS  /tmp/ccCvaEE3.s 			page 289


 9746              		.loc 1 3044 2 view .LVU3137
3044:src/display.c **** 	  ShowRPN = 0;
 9747              		.loc 1 3044 50 is_stmt 0 view .LVU3138
 9748 02e2 3B68     		ldr	r3, [r7]
 9749 02e4 002B     		cmp	r3, #0
 9750 02e6 7FF453AF 		bne	.L933
3044:src/display.c **** 	  ShowRPN = 0;
 9751              		.loc 1 3044 69 discriminator 3 view .LVU3139
 9752 02ea 009B     		ldr	r3, [sp]
 9753 02ec B3F90030 		ldrsh	r3, [r3]
 9754 02f0 002B     		cmp	r3, #0
 9755 02f2 7FF44DAF 		bne	.L933
3044:src/display.c **** 	  ShowRPN = 0;
 9756              		.loc 1 3044 81 discriminator 4 view .LVU3140
 9757 02f6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9758 02f8 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9759 02fa 03F00403 		and	r3, r3, #4
 9760 02fe 1343     		orrs	r3, r3, r2
 9761 0300 7FF446AF 		bne	.L933
 9762 0304 DFF82880 		ldr	r8, .L1264+36
 9763 0308 4AE7     		b	.L1070
 9764              	.L1265:
 9765 030a 00BF     		.align	2
 9766              	.L1264:
 9767 030c 00000000 		.word	StateWhileOn
 9768 0310 00000000 		.word	main_ram
 9769 0314 00000000 		.word	.LANCHOR21
 9770 0318 00000000 		.word	DispPlot
 9771 031c 00000000 		.word	DispMsg
 9772 0320 00000000 		.word	.LANCHOR25
 9773 0324 00000000 		.word	.LANCHOR19
 9774 0328 00000000 		.word	LastDisplayedNumber
 9775 032c 00000000 		.word	ShowRegister
 9776 0330 00000000 		.word	ShowRPN
 9777 0334 00000000 		.word	argcmds
 9778 0338 04000000 		.word	.LC23
 9779 033c 00000000 		.word	.LC22
 9780 0340 00000000 		.word	.LANCHOR18
 9781 0344 00000000 		.word	WasDataEntry
 9782 0348 00000000 		.word	ProgFree
 9783              	.LVL1078:
 9784              	.L1228:
2984:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9785              		.loc 1 2984 5 is_stmt 1 view .LVU3141
2984:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9786              		.loc 1 2984 10 is_stmt 0 view .LVU3142
 9787 034c 91F8AD37 		ldrb	r3, [r1, #1965]	@ zero_extendqisi2
2984:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9788              		.loc 1 2984 8 view .LVU3143
 9789 0350 DA07     		lsls	r2, r3, #31
 9790 0352 00F12581 		bmi	.L1233
 9791              	.L1029:
2988:src/display.c **** 		    State2.hms = 0;
 9792              		.loc 1 2988 5 is_stmt 1 view .LVU3144
2988:src/display.c **** 		    State2.hms = 0;
 9793              		.loc 1 2988 9 is_stmt 0 view .LVU3145
 9794 0356 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccCvaEE3.s 			page 290


2988:src/display.c **** 		    State2.hms = 0;
 9795              		.loc 1 2988 8 view .LVU3146
 9796 0358 13F00101 		ands	r1, r3, #1
 9797 035c 00F08F80 		beq	.L1030
2989:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9798              		.loc 1 2989 7 is_stmt 1 view .LVU3147
2989:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9799              		.loc 1 2989 18 is_stmt 0 view .LVU3148
 9800 0360 6FF30003 		bfc	r3, #0, #1
2990:src/display.c **** 		    State2.hms = 1;
 9801              		.loc 1 2990 7 view .LVU3149
 9802 0364 0021     		movs	r1, #0
 9803 0366 6E20     		movs	r0, #110
2989:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9804              		.loc 1 2989 18 view .LVU3150
 9805 0368 E375     		strb	r3, [r4, #23]
2990:src/display.c **** 		    State2.hms = 1;
 9806              		.loc 1 2990 7 is_stmt 1 view .LVU3151
 9807 036a FFF7FEFF 		bl	format_reg
 9808              	.LVL1079:
2991:src/display.c **** 		  }
 9809              		.loc 1 2991 7 view .LVU3152
2991:src/display.c **** 		  }
 9810              		.loc 1 2991 18 is_stmt 0 view .LVU3153
 9811 036e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3013:src/display.c **** 	      goto finish;
 9812              		.loc 1 3013 9 view .LVU3154
 9813 0370 D8F80020 		ldr	r2, [r8]
2991:src/display.c **** 		  }
 9814              		.loc 1 2991 18 view .LVU3155
 9815 0374 43F00103 		orr	r3, r3, #1
 9816 0378 E375     		strb	r3, [r4, #23]
 9817              	.LVL1080:
3013:src/display.c **** 	      goto finish;
 9818              		.loc 1 3013 6 is_stmt 1 view .LVU3156
3013:src/display.c **** 	      goto finish;
 9819              		.loc 1 3013 9 is_stmt 0 view .LVU3157
 9820 037a 002A     		cmp	r2, #0
 9821 037c AFD0     		beq	.L1031
 9822 037e 34E7     		b	.L1032
 9823              	.LVL1081:
 9824              	.L1072:
3053:src/display.c **** 	  annunciators();
 9825              		.loc 1 3053 52 discriminator 3 view .LVU3158
 9826 0380 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9827 0382 13F0C00F 		tst	r3, #192
 9828 0386 3FF42CAF 		beq	.L1074
 9829 038a 28E7     		b	.L1073
 9830              	.L1092:
 9831 038c 0023     		movs	r3, #0
 9832 038e 19E7     		b	.L1071
 9833              	.LVL1082:
 9834              	.L1226:
 9835              	.LBB589:
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9836              		.loc 1 2735 4 is_stmt 1 view .LVU3159
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
ARM GAS  /tmp/ccCvaEE3.s 			page 291


 9837              		.loc 1 2735 9 is_stmt 0 view .LVU3160
 9838 0390 BD4B     		ldr	r3, .L1266
 9839 0392 CDF85E60 		str	r6, [sp, #94]	@ unaligned
2736:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9840              		.loc 1 2736 4 is_stmt 1 view .LVU3161
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9841              		.loc 1 2735 9 is_stmt 0 view .LVU3162
 9842 0396 93E80700 		ldm	r3, {r0, r1, r2}
 9843 039a 15AB     		add	r3, sp, #84
 9844 039c 03C3     		stmia	r3!, {r0, r1}
2736:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9845              		.loc 1 2736 4 view .LVU3163
 9846 039e 3146     		mov	r1, r6
 9847 03a0 BA48     		ldr	r0, .L1266+4
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9848              		.loc 1 2735 9 view .LVU3164
 9849 03a2 1A80     		strh	r2, [r3]	@ movhi
2736:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9850              		.loc 1 2736 4 view .LVU3165
 9851 03a4 FFF7FEFF 		bl	set_digits_string
 9852              	.LVL1083:
2737:src/display.c **** #ifndef REALBUILD
 9853              		.loc 1 2737 4 is_stmt 1 view .LVU3166
 9854              	.LBB590:
 9855              	.LBI590:
 415:src/display.c ****   if (res) *res++ = ch;
 9856              		.loc 1 415 14 view .LVU3167
 9857              	.LBB591:
 416:src/display.c ****   else	set_dig(base, ch);
 9858              		.loc 1 416 3 view .LVU3168
 417:src/display.c ****   return res;
 9859              		.loc 1 417 8 view .LVU3169
 9860 03a8 7221     		movs	r1, #114
 9861 03aa 6C20     		movs	r0, #108
 9862 03ac FFF7FEFF 		bl	set_dig
 9863              	.LVL1084:
 418:src/display.c **** }
 9864              		.loc 1 418 3 view .LVU3170
 418:src/display.c **** }
 9865              		.loc 1 418 3 is_stmt 0 view .LVU3171
 9866              	.LBE591:
 9867              	.LBE590:
2739:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9868              		.loc 1 2739 4 is_stmt 1 view .LVU3172
 9869 03b0 B749     		ldr	r1, .L1266+8
 9870 03b2 B848     		ldr	r0, .L1266+12
 9871 03b4 B84F     		ldr	r7, .L1266+16
 9872 03b6 B94D     		ldr	r5, .L1266+20
 9873 03b8 FFF7FEFF 		bl	scopy
 9874              	.LVL1085:
2740:src/display.c **** #endif
 9875              		.loc 1 2740 4 view .LVU3173
 9876 03bc B849     		ldr	r1, .L1266+24
 9877 03be B948     		ldr	r0, .L1266+28
 9878 03c0 FFF7FEFF 		bl	scopy
 9879              	.LVL1086:
2742:src/display.c **** 	  set_status(vers);
ARM GAS  /tmp/ccCvaEE3.s 			page 292


 9880              		.loc 1 2742 4 view .LVU3174
 9881 03c4 B849     		ldr	r1, .L1266+32
 9882 03c6 0422     		movs	r2, #4
 9883 03c8 0DF15D00 		add	r0, sp, #93
 9884 03cc FFF7FEFF 		bl	xcopy
 9885              	.LVL1087:
2743:src/display.c **** 	  skip = 1;
 9886              		.loc 1 2743 4 view .LVU3175
 9887 03d0 15A8     		add	r0, sp, #84
 9888 03d2 FFF7FEFF 		bl	set_status
 9889              	.LVL1088:
2744:src/display.c **** 	  goto nostk;
 9890              		.loc 1 2744 4 view .LVU3176
2745:src/display.c **** 	} else if (State2.confirm) {
 9891              		.loc 1 2745 4 view .LVU3177
2745:src/display.c **** 	} else if (State2.confirm) {
 9892              		.loc 1 2745 4 is_stmt 0 view .LVU3178
 9893              	.LBE589:
2975:src/display.c **** 	if (!skip) {
 9894              		.loc 1 2975 2 is_stmt 1 view .LVU3179
 9895 03d6 B54B     		ldr	r3, .L1266+36
 9896 03d8 0093     		str	r3, [sp]
 9897 03da FFF7FEFF 		bl	show_flags
 9898              	.LVL1089:
2976:src/display.c **** 	  if (State2.runmode) {
 9899              		.loc 1 2976 2 view .LVU3180
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9900              		.loc 1 3043 2 view .LVU3181
 9901 03de FFF7FEFF 		bl	set_annunciators
 9902              	.LVL1090:
3044:src/display.c **** 	  ShowRPN = 0;
 9903              		.loc 1 3044 2 view .LVU3182
 9904 03e2 D5E6     		b	.L933
 9905              	.LVL1091:
 9906              	.L1094:
3044:src/display.c **** 	  ShowRPN = 0;
 9907              		.loc 1 3044 2 is_stmt 0 view .LVU3183
 9908 03e4 0123     		movs	r3, #1
 9909 03e6 EDE6     		b	.L1071
 9910              	.LVL1092:
 9911              	.L1230:
2756:src/display.c **** 	  if (! State2.dot)
 9912              		.loc 1 2756 4 is_stmt 1 view .LVU3184
2756:src/display.c **** 	  if (! State2.dot)
 9913              		.loc 1 2756 9 is_stmt 0 view .LVU3185
 9914 03e8 B149     		ldr	r1, .L1266+40
 9915 03ea 1EA8     		add	r0, sp, #120
 9916              	.LVL1093:
2756:src/display.c **** 	  if (! State2.dot)
 9917              		.loc 1 2756 9 view .LVU3186
 9918 03ec FFF7FEFF 		bl	scopy
 9919              	.LVL1094:
2757:src/display.c **** 	    *bp++ = '\235';
 9920              		.loc 1 2757 8 view .LVU3187
 9921 03f0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9922              	.LVL1095:
2757:src/display.c **** 	    *bp++ = '\235';
ARM GAS  /tmp/ccCvaEE3.s 			page 293


 9923              		.loc 1 2757 4 is_stmt 1 view .LVU3188
2757:src/display.c **** 	    *bp++ = '\235';
 9924              		.loc 1 2757 7 is_stmt 0 view .LVU3189
 9925 03f2 5D06     		lsls	r5, r3, #25
 9926 03f4 3FF545AF 		bmi	.L974
2758:src/display.c **** 	  if (yreg_enabled) {
 9927              		.loc 1 2758 6 is_stmt 1 view .LVU3190
 9928              	.LVL1096:
2758:src/display.c **** 	  if (yreg_enabled) {
 9929              		.loc 1 2758 12 is_stmt 0 view .LVU3191
 9930 03f8 9D23     		movs	r3, #157
 9931 03fa 0370     		strb	r3, [r0]
 9932 03fc 41E7     		b	.L974
 9933              	.LVL1097:
 9934              	.L1027:
3008:src/display.c **** 	    } else {
 9935              		.loc 1 3008 3 is_stmt 1 view .LVU3192
 9936 03fe AD48     		ldr	r0, .L1266+44
 9937 0400 2421     		movs	r1, #36
 9938 0402 FFF7FEFF 		bl	set_digits_string
 9939              	.LVL1098:
3013:src/display.c **** 	      goto finish;
 9940              		.loc 1 3013 6 view .LVU3193
3013:src/display.c **** 	      goto finish;
 9941              		.loc 1 3013 9 is_stmt 0 view .LVU3194
 9942 0406 D8F80030 		ldr	r3, [r8]
 9943 040a 002B     		cmp	r3, #0
 9944 040c 3FF4BEAE 		beq	.L1223
 9945 0410 EBE6     		b	.L1032
 9946              	.LVL1099:
 9947              	.L935:
2753:src/display.c **** 	  }
 9948              		.loc 1 2753 6 is_stmt 1 view .LVU3195
 9949 0412 A64B     		ldr	r3, .L1266+36
 9950 0414 A848     		ldr	r0, .L1266+48
 9951 0416 0093     		str	r3, [sp]
 9952 0418 9F4F     		ldr	r7, .L1266+16
 9953 041a FFF7FEFF 		bl	set_status
 9954              	.LVL1100:
2973:src/display.c ****       nostk:
 9955              		.loc 1 2973 2 view .LVU3196
 9956 041e FFF7FEFF 		bl	show_stack
 9957              	.LVL1101:
2975:src/display.c **** 	if (!skip) {
 9958              		.loc 1 2975 2 view .LVU3197
 9959 0422 FFF7FEFF 		bl	show_flags
 9960              	.LVL1102:
2976:src/display.c **** 	  if (State2.runmode) {
 9961              		.loc 1 2976 2 view .LVU3198
 9962 0426 2EE6     		b	.L938
 9963              	.L946:
2820:src/display.c **** 	  *bp++ = 'x';
 9964              		.loc 1 2820 9 view .LVU3199
2820:src/display.c **** 	  *bp++ = 'x';
 9965              		.loc 1 2820 19 is_stmt 0 view .LVU3200
 9966 0428 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2820:src/display.c **** 	  *bp++ = 'x';
ARM GAS  /tmp/ccCvaEE3.s 			page 294


 9967              		.loc 1 2820 12 view .LVU3201
 9968 042a 072A     		cmp	r2, #7
 9969 042c 00F06381 		beq	.L957
2821:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9970              		.loc 1 2821 4 is_stmt 1 view .LVU3202
 9971              	.LVL1103:
2822:src/display.c **** 	  *bp++ = '_';
 9972              		.loc 1 2822 33 is_stmt 0 view .LVU3203
 9973 0430 A24B     		ldr	r3, .L1266+52
2822:src/display.c **** 	  *bp++ = '_';
 9974              		.loc 1 2822 10 view .LVU3204
 9975 0432 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9976 0434 8DF87930 		strb	r3, [sp, #121]
2821:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9977              		.loc 1 2821 10 view .LVU3205
 9978 0438 7822     		movs	r2, #120
2823:src/display.c **** 	  *bp++ = '?';
 9979              		.loc 1 2823 10 view .LVU3206
 9980 043a 43F65F73 		movw	r3, #16223
2821:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9981              		.loc 1 2821 10 view .LVU3207
 9982 043e 8DF87820 		strb	r2, [sp, #120]
2822:src/display.c **** 	  *bp++ = '_';
 9983              		.loc 1 2822 4 is_stmt 1 view .LVU3208
 9984              	.LVL1104:
2823:src/display.c **** 	  *bp++ = '?';
 9985              		.loc 1 2823 4 view .LVU3209
2824:src/display.c **** 	  if (yreg_enabled) {
 9986              		.loc 1 2824 4 view .LVU3210
2823:src/display.c **** 	  *bp++ = '?';
 9987              		.loc 1 2823 10 is_stmt 0 view .LVU3211
 9988 0442 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2825:src/display.c **** 	    set_status_top(buf);
 9989              		.loc 1 2825 4 is_stmt 1 view .LVU3212
2825:src/display.c **** 	    set_status_top(buf);
 9990              		.loc 1 2825 7 is_stmt 0 view .LVU3213
 9991 0446 BBF1000F 		cmp	fp, #0
 9992 044a 7FF41EAF 		bne	.L1213
 9993              	.LVL1105:
 9994              	.L941:
2765:src/display.c **** 	  }
 9995              		.loc 1 2765 6 is_stmt 1 view .LVU3214
 9996 044e 1EA8     		add	r0, sp, #120
 9997 0450 FFF7FEFF 		bl	set_status
 9998              	.LVL1106:
2973:src/display.c ****       nostk:
 9999              		.loc 1 2973 2 view .LVU3215
 10000 0454 954B     		ldr	r3, .L1266+36
 10001 0456 0093     		str	r3, [sp]
 10002 0458 8F4F     		ldr	r7, .L1266+16
 10003 045a FFF7FEFF 		bl	show_stack
 10004              	.LVL1107:
2975:src/display.c **** 	if (!skip) {
 10005              		.loc 1 2975 2 view .LVU3216
 10006 045e FFF7FEFF 		bl	show_flags
 10007              	.LVL1108:
2976:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/ccCvaEE3.s 			page 295


 10008              		.loc 1 2976 2 view .LVU3217
 10009 0462 10E6     		b	.L938
 10010              	.LVL1109:
 10011              	.L1229:
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 10012              		.loc 1 2999 44 is_stmt 0 discriminator 1 view .LVU3218
 10013 0464 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 10014              		.loc 1 2999 41 discriminator 1 view .LVU3219
 10015 0466 13F00101 		ands	r1, r3, #1
 10016 046a 7FF489AE 		bne	.L1034
 10017              	.LVL1110:
3000:src/display.c **** 		}
 10018              		.loc 1 3000 5 is_stmt 1 view .LVU3220
 10019 046e FFF7FEFF 		bl	format_reg
 10020              	.LVL1111:
3013:src/display.c **** 	      goto finish;
 10021              		.loc 1 3013 6 view .LVU3221
3013:src/display.c **** 	      goto finish;
 10022              		.loc 1 3013 9 is_stmt 0 view .LVU3222
 10023 0472 D8F80030 		ldr	r3, [r8]
 10024 0476 002B     		cmp	r3, #0
 10025 0478 3FF431AF 		beq	.L1031
 10026 047c B5E6     		b	.L1032
 10027              	.LVL1112:
 10028              	.L1030:
2994:src/display.c **** 		  }
 10029              		.loc 1 2994 7 is_stmt 1 view .LVU3223
 10030 047e 6E20     		movs	r0, #110
 10031 0480 FFF7FEFF 		bl	format_reg
 10032              	.LVL1113:
3013:src/display.c **** 	      goto finish;
 10033              		.loc 1 3013 6 view .LVU3224
3013:src/display.c **** 	      goto finish;
 10034              		.loc 1 3013 9 is_stmt 0 view .LVU3225
 10035 0484 D8F80030 		ldr	r3, [r8]
 10036 0488 002B     		cmp	r3, #0
 10037 048a 3FF428AF 		beq	.L1031
 10038 048e ACE6     		b	.L1032
 10039              	.LVL1114:
 10040              	.L1227:
 10041              	.LBB592:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10042              		.loc 1 3022 6 discriminator 1 view .LVU3226
 10043 0490 8B49     		ldr	r1, .L1266+56
 10044 0492 0BEB8B03 		add	r3, fp, fp, lsl #2
3023:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 10045              		.loc 1 3023 21 discriminator 1 view .LVU3227
 10046 0496 0BF0010B 		and	fp, fp, #1
 10047              	.LVL1115:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10048              		.loc 1 3022 6 discriminator 1 view .LVU3228
 10049 049a 1944     		add	r1, r1, r3
 10050 049c 1EA8     		add	r0, sp, #120
 10051 049e 0BF1030B 		add	fp, fp, #3
 10052 04a2 0193     		str	r3, [sp, #4]
 10053 04a4 FFF7FEFF 		bl	scopy_spc
ARM GAS  /tmp/ccCvaEE3.s 			page 296


 10054              	.LVL1116:
 10055 04a8 5A46     		mov	r2, fp
 10056 04aa 4146     		mov	r1, r8
 10057 04ac FFF7FEFF 		bl	num_arg_0
 10058              	.LVL1117:
3024:src/display.c **** #ifndef REALBUILD
 10059              		.loc 1 3024 6 is_stmt 1 discriminator 1 view .LVU3229
 10060 04b0 0921     		movs	r1, #9
 10061 04b2 1EA8     		add	r0, sp, #120
 10062 04b4 FFF7FEFF 		bl	set_digits_string
 10063              	.LVL1118:
3026:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 10064              		.loc 1 3026 6 discriminator 1 view .LVU3230
 10065 04b8 2822     		movs	r2, #40
 10066 04ba 2946     		mov	r1, r5
 10067 04bc 1EA8     		add	r0, sp, #120
 10068 04be FFF7FEFF 		bl	xset
 10069              	.LVL1119:
3027:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 10070              		.loc 1 3027 6 discriminator 1 view .LVU3231
 10071 04c2 0121     		movs	r1, #1
 10072 04c4 DAF80000 		ldr	r0, [r10]
 10073 04c8 2A46     		mov	r2, r5
 10074 04ca FFF7FEFF 		bl	set_exp
 10075              	.LVL1120:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10076              		.loc 1 3028 6 discriminator 1 view .LVU3232
 10077 04ce 7D49     		ldr	r1, .L1266+60
 10078 04d0 019B     		ldr	r3, [sp, #4]
 10079 04d2 1944     		add	r1, r1, r3
 10080 04d4 10E6     		b	.L1076
 10081              	.LVL1121:
 10082              	.L1057:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10083              		.loc 1 3028 6 is_stmt 0 discriminator 1 view .LVU3233
 10084              	.LBE592:
 10085              	.LBB593:
 10086              	.LBB579:
1444:src/display.c **** 	    gotdot = i;
 10087              		.loc 1 1444 4 is_stmt 1 view .LVU3234
1444:src/display.c **** 	    gotdot = i;
 10088              		.loc 1 1444 7 is_stmt 0 view .LVU3235
 10089 04d6 BAF1FF3F 		cmp	r10, #-1
 10090 04da 08BF     		it	eq
 10091 04dc DA46     		moveq	r10, fp
 10092              	.LVL1122:
1446:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10093              		.loc 1 1446 4 is_stmt 1 view .LVU3236
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10094              		.loc 1 1447 6 view .LVU3237
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10095              		.loc 1 1447 13 is_stmt 0 view .LVU3238
 10096 04de AAF11B0A 		sub	r10, r10, #27
 10097              	.LVL1123:
1448:src/display.c **** 	      break;
 10098              		.loc 1 1448 6 is_stmt 1 view .LVU3239
1448:src/display.c **** 	      break;
ARM GAS  /tmp/ccCvaEE3.s 			page 297


 10099              		.loc 1 1448 9 is_stmt 0 view .LVU3240
 10100 04e2 BAF1000F 		cmp	r10, #0
 10101 04e6 13DD     		ble	.L1042
1448:src/display.c **** 	      break;
 10102              		.loc 1 1448 9 view .LVU3241
 10103 04e8 0296     		str	r6, [sp, #8]
 10104 04ea 5646     		mov	r6, r10
 10105              	.LVL1124:
1448:src/display.c **** 	      break;
 10106              		.loc 1 1448 9 view .LVU3242
 10107 04ec BA46     		mov	r10, r7
 10108              	.LVL1125:
1448:src/display.c **** 	      break;
 10109              		.loc 1 1448 9 view .LVU3243
 10110 04ee 2F46     		mov	r7, r5
 10111 04f0 019D     		ldr	r5, [sp, #4]
 10112              	.LVL1126:
 10113              	.L1061:
1451:src/display.c **** 	      break;
 10114              		.loc 1 1451 6 is_stmt 1 view .LVU3244
1454:src/display.c **** 	  }
 10115              		.loc 1 1454 6 view .LVU3245
 10116              	.LBB559:
 10117              	.LBB560:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 10118              		.loc 1 378 3 view .LVU3246
 10119 04f2 3046     		mov	r0, r6
 10120              	.LBE560:
 10121              	.LBE559:
1451:src/display.c **** 	      break;
 10122              		.loc 1 1451 9 is_stmt 0 view .LVU3247
 10123 04f4 0DB1     		cbz	r5, .L1062
 10124              	.LVL1127:
1451:src/display.c **** 	      break;
 10125              		.loc 1 1451 27 view .LVU3248
 10126 04f6 092E     		cmp	r6, #9
 10127 04f8 07D0     		beq	.L1210
 10128              	.L1062:
1454:src/display.c **** 	  }
 10129              		.loc 1 1454 6 view .LVU3249
 10130 04fa 734B     		ldr	r3, .L1266+64
 10131 04fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10132              	.LVL1128:
 10133              	.LBB562:
 10134              	.LBI559:
 375:src/display.c ****   if (sep == SEP_NONE)
 10135              		.loc 1 375 14 is_stmt 1 view .LVU3250
 10136              	.LBB561:
 376:src/display.c ****     return res;
 10137              		.loc 1 376 3 view .LVU3251
 376:src/display.c ****     return res;
 10138              		.loc 1 376 6 is_stmt 0 view .LVU3252
 10139 04fe 09B1     		cbz	r1, .L1063
 10140 0500 FFF7FEFF 		bl	set_separator.part.0
 10141              	.LVL1129:
 10142              	.L1063:
 376:src/display.c ****     return res;
ARM GAS  /tmp/ccCvaEE3.s 			page 298


 10143              		.loc 1 376 6 view .LVU3253
 10144              	.LBE561:
 10145              	.LBE562:
1446:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10146              		.loc 1 1446 4 is_stmt 1 view .LVU3254
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10147              		.loc 1 1447 6 view .LVU3255
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10148              		.loc 1 1447 13 is_stmt 0 view .LVU3256
 10149 0504 1B3E     		subs	r6, r6, #27
 10150              	.LVL1130:
1448:src/display.c **** 	      break;
 10151              		.loc 1 1448 6 is_stmt 1 view .LVU3257
1448:src/display.c **** 	      break;
 10152              		.loc 1 1448 9 is_stmt 0 view .LVU3258
 10153 0506 002E     		cmp	r6, #0
 10154 0508 F3DC     		bgt	.L1061
 10155              	.L1210:
1448:src/display.c **** 	      break;
 10156              		.loc 1 1448 9 view .LVU3259
 10157 050a 029E     		ldr	r6, [sp, #8]
 10158              	.LVL1131:
1448:src/display.c **** 	      break;
 10159              		.loc 1 1448 9 view .LVU3260
 10160 050c 3D46     		mov	r5, r7
 10161 050e 5746     		mov	r7, r10
 10162              	.LVL1132:
 10163              	.L1042:
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10164              		.loc 1 1458 4 is_stmt 1 view .LVU3261
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10165              		.loc 1 1458 8 is_stmt 0 view .LVU3262
 10166 0510 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10167              		.loc 1 1458 7 view .LVU3263
 10168 0512 A2F14401 		sub	r1, r2, #68
 10169 0516 0129     		cmp	r1, #1
 10170 0518 40F21581 		bls	.L1234
 10171              	.L1064:
 10172              	.LVL1133:
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10173              		.loc 1 1458 7 view .LVU3264
 10174              	.LBE579:
 10175              	.LBE593:
3013:src/display.c **** 	      goto finish;
 10176              		.loc 1 3013 6 is_stmt 1 view .LVU3265
3013:src/display.c **** 	      goto finish;
 10177              		.loc 1 3013 9 is_stmt 0 view .LVU3266
 10178 051c D8F80030 		ldr	r3, [r8]
 10179 0520 002B     		cmp	r3, #0
 10180 0522 3FF4DBAE 		beq	.L1221
 10181              	.L1135:
 10182 0526 5D4D     		ldr	r5, .L1266+20
 10183 0528 5FE6     		b	.L1032
 10184              	.LVL1134:
 10185              	.L1231:
2769:src/display.c **** 	  if (State2.numdigit > 0)
ARM GAS  /tmp/ccCvaEE3.s 			page 299


 10186              		.loc 1 2769 4 is_stmt 1 view .LVU3267
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10187              		.loc 1 2769 9 is_stmt 0 view .LVU3268
 10188 052a 2E22     		movs	r2, #46
 10189 052c 6749     		ldr	r1, .L1266+68
 10190 052e 1EA8     		add	r0, sp, #120
 10191              	.LVL1135:
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10192              		.loc 1 2769 9 view .LVU3269
 10193 0530 FFF7FEFF 		bl	scopy_char
 10194              	.LVL1136:
2770:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10195              		.loc 1 2770 14 view .LVU3270
 10196 0534 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10197              		.loc 1 2769 9 view .LVU3271
 10198 0536 0346     		mov	r3, r0
 10199              	.LVL1137:
2770:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10200              		.loc 1 2770 4 is_stmt 1 view .LVU3272
2770:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10201              		.loc 1 2770 7 is_stmt 0 view .LVU3273
 10202 0538 002A     		cmp	r2, #0
 10203 053a 40F0FF80 		bne	.L1235
 10204              	.L944:
2773:src/display.c **** 	  if (yreg_enabled) {
 10205              		.loc 1 2773 4 is_stmt 1 view .LVU3274
 10206              	.LVL1138:
2773:src/display.c **** 	  if (yreg_enabled) {
 10207              		.loc 1 2773 10 is_stmt 0 view .LVU3275
 10208 053e 5F22     		movs	r2, #95
 10209 0540 1A70     		strb	r2, [r3]
2774:src/display.c **** 	    set_status_top(buf);
 10210              		.loc 1 2774 4 is_stmt 1 view .LVU3276
2774:src/display.c **** 	    set_status_top(buf);
 10211              		.loc 1 2774 7 is_stmt 0 view .LVU3277
 10212 0542 BBF1000F 		cmp	fp, #0
 10213 0546 7FF4A0AE 		bne	.L1213
2774:src/display.c **** 	    set_status_top(buf);
 10214              		.loc 1 2774 7 view .LVU3278
 10215 054a 80E7     		b	.L941
 10216              	.LVL1139:
 10217              	.L1038:
 10218              	.LBB594:
 10219              	.LBB580:
1353:src/display.c **** 
 10220              		.loc 1 1353 2 is_stmt 1 view .LVU3279
 10221 054c FFF7FEFF 		bl	set_separator_decimal_modes
 10222              	.LVL1140:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10223              		.loc 1 1355 2 view .LVU3280
1357:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10224              		.loc 1 1357 2 view .LVU3281
1357:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10225              		.loc 1 1357 5 is_stmt 0 view .LVU3282
 10226 0550 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10227              	.LBB563:
ARM GAS  /tmp/ccCvaEE3.s 			page 300


1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10228              		.loc 1 1364 15 view .LVU3283
 10229 0552 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 10230              	.LBE563:
1357:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10231              		.loc 1 1357 5 view .LVU3284
 10232 0554 012B     		cmp	r3, #1
 10233 0556 40F20E81 		bls	.L1041
 10234              	.LVL1141:
 10235              	.LBB564:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10236              		.loc 1 1364 14 is_stmt 1 view .LVU3285
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10237              		.loc 1 1364 4 is_stmt 0 view .LVU3286
 10238 055a 0029     		cmp	r1, #0
 10239 055c 00F0A081 		beq	.L1085
1361:src/display.c **** 	  int j;
 10240              		.loc 1 1361 10 view .LVU3287
 10241 0560 5B46     		mov	r3, fp
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10242              		.loc 1 1364 10 view .LVU3288
 10243 0562 5A46     		mov	r2, fp
 10244 0564 AC46     		mov	ip, r5
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10245              		.loc 1 1364 4 view .LVU3289
 10246 0566 0846     		mov	r0, r1
 10247              	.LBE564:
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10248              		.loc 1 1332 11 view .LVU3290
 10249 0568 4FF0FF3E 		mov	lr, #-1
 10250 056c 04E0     		b	.L1044
 10251              	.LVL1142:
 10252              	.L1043:
 10253              	.LBB565:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10254              		.loc 1 1364 28 is_stmt 1 view .LVU3291
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10255              		.loc 1 1364 15 is_stmt 0 view .LVU3292
 10256 056e 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10257              		.loc 1 1364 29 view .LVU3293
 10258 0572 0132     		adds	r2, r2, #1
 10259              	.LVL1143:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10260              		.loc 1 1364 14 is_stmt 1 view .LVU3294
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10261              		.loc 1 1364 4 is_stmt 0 view .LVU3295
 10262 0574 0028     		cmp	r0, #0
 10263 0576 46D0     		beq	.L1236
 10264              	.LVL1144:
 10265              	.L1044:
1365:src/display.c **** 	      gotdot = j;
 10266              		.loc 1 1365 6 is_stmt 1 view .LVU3296
1365:src/display.c **** 	      gotdot = j;
 10267              		.loc 1 1365 9 is_stmt 0 view .LVU3297
 10268 0578 2E28     		cmp	r0, #46
 10269 057a F8D1     		bne	.L1043
ARM GAS  /tmp/ccCvaEE3.s 			page 301


1366:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10270              		.loc 1 1366 8 is_stmt 1 view .LVU3298
 10271              	.LVL1145:
1368:src/display.c **** #  endif
 10272              		.loc 1 1368 8 view .LVU3299
1365:src/display.c **** 	      gotdot = j;
 10273              		.loc 1 1365 22 is_stmt 0 view .LVU3300
 10274 057c BEF1FF3F 		cmp	lr, #-1
 10275 0580 F5D1     		bne	.L1043
1368:src/display.c **** #  endif
 10276              		.loc 1 1368 29 view .LVU3301
 10277 0582 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10278 0586 A3F12E03 		sub	r3, #46
 10279 058a B3FA83F3 		clz	r3, r3
1368:src/display.c **** #  endif
 10280              		.loc 1 1368 19 view .LVU3302
 10281 058e 9646     		mov	lr, r2
1368:src/display.c **** #  endif
 10282              		.loc 1 1368 29 view .LVU3303
 10283 0590 5B09     		lsrs	r3, r3, #5
 10284              	.LVL1146:
1368:src/display.c **** #  endif
 10285              		.loc 1 1368 29 view .LVU3304
 10286 0592 ECE7     		b	.L1043
 10287              	.LVL1147:
 10288              	.L947:
1368:src/display.c **** #  endif
 10289              		.loc 1 1368 29 view .LVU3305
 10290              	.LBE565:
 10291              	.LBE580:
 10292              	.LBE594:
2786:src/display.c **** #endif
 10293              		.loc 1 2786 6 is_stmt 1 view .LVU3306
2786:src/display.c **** #endif
 10294              		.loc 1 2786 11 is_stmt 0 view .LVU3307
 10295 0594 4E49     		ldr	r1, .L1266+72
 10296 0596 1EA8     		add	r0, sp, #120
 10297              	.LVL1148:
2786:src/display.c **** #endif
 10298              		.loc 1 2786 11 view .LVU3308
 10299 0598 FFF7FEFF 		bl	scopy
 10300              	.LVL1149:
2786:src/display.c **** #endif
 10301              		.loc 1 2786 11 view .LVU3309
 10302 059c E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10303 059e 57E6     		b	.L948
 10304              	.LVL1150:
 10305              	.L1233:
2985:src/display.c **** 		    SET_POLAR_READY;
 10306              		.loc 1 2985 7 is_stmt 1 view .LVU3310
 10307 05a0 0020     		movs	r0, #0
 10308 05a2 FFF7FEFF 		bl	op_r2p
 10309              	.LVL1151:
2986:src/display.c **** 		  }
 10310              		.loc 1 2986 7 view .LVU3311
 10311 05a6 4B4A     		ldr	r2, .L1266+76
 10312 05a8 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccCvaEE3.s 			page 302


 10313 05aa 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 10314 05ae 6FF30002 		bfc	r2, #0, #1
 10315 05b2 83F8AD27 		strb	r2, [r3, #1965]
 10316 05b6 CEE6     		b	.L1029
 10317              	.LVL1152:
 10318              	.L950:
2793:src/display.c **** 	    *bp++ = '\021';
 10319              		.loc 1 2793 11 view .LVU3312
2793:src/display.c **** 	    *bp++ = '\021';
 10320              		.loc 1 2793 14 is_stmt 0 view .LVU3313
 10321 05b8 012D     		cmp	r5, #1
 10322 05ba 00F0F080 		beq	.L1237
2800:src/display.c **** 	      *bp++ = '.';
 10323              		.loc 1 2800 6 is_stmt 1 view .LVU3314
2800:src/display.c **** 	      *bp++ = '.';
 10324              		.loc 1 2800 10 is_stmt 0 view .LVU3315
 10325 05be A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2800:src/display.c **** 	      *bp++ = '.';
 10326              		.loc 1 2800 9 view .LVU3316
 10327 05c0 DD07     		lsls	r5, r3, #31
2801:src/display.c **** 	    if (State2.numdigit > 0) {
 10328              		.loc 1 2801 8 is_stmt 1 view .LVU3317
 10329              	.LVL1153:
2801:src/display.c **** 	    if (State2.numdigit > 0) {
 10330              		.loc 1 2801 14 is_stmt 0 view .LVU3318
 10331 05c2 44BF     		itt	mi
 10332 05c4 2E23     		movmi	r3, #46
 10333 05c6 00F8013B 		strbmi	r3, [r0], #1
 10334              	.LVL1154:
2802:src/display.c **** 	      if (State2.shuffle)
 10335              		.loc 1 2802 6 is_stmt 1 view .LVU3319
2802:src/display.c **** 	      if (State2.shuffle)
 10336              		.loc 1 2802 16 is_stmt 0 view .LVU3320
 10337 05ca E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2802:src/display.c **** 	      if (State2.shuffle)
 10338              		.loc 1 2802 9 view .LVU3321
 10339 05cc 8AB1     		cbz	r2, .L954
2803:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10340              		.loc 1 2803 8 is_stmt 1 view .LVU3322
2803:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10341              		.loc 1 2803 12 is_stmt 0 view .LVU3323
 10342 05ce A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2803:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10343              		.loc 1 2803 11 view .LVU3324
 10344 05d0 9907     		lsls	r1, r3, #30
 10345 05d2 40F16781 		bpl	.L955
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10346              		.loc 1 2804 3 is_stmt 1 view .LVU3325
 10347              	.LVL1155:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10348              		.loc 1 2804 17 is_stmt 0 view .LVU3326
 10349 05d6 2289     		ldrh	r2, [r4, #8]
 10350              	.LVL1156:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10351              		.loc 1 2804 34 is_stmt 1 view .LVU3327
 10352 05d8 3F49     		ldr	r1, .L1266+80
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
ARM GAS  /tmp/ccCvaEE3.s 			page 303


 10353              		.loc 1 2804 10 is_stmt 0 view .LVU3328
 10354 05da 0023     		movs	r3, #0
 10355              	.LVL1157:
 10356              	.L956:
2805:src/display.c **** 	      else
 10357              		.loc 1 2805 5 is_stmt 1 discriminator 3 view .LVU3329
2805:src/display.c **** 	      else
 10358              		.loc 1 2805 24 is_stmt 0 discriminator 3 view .LVU3330
 10359 05dc 02F00305 		and	r5, r2, #3
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10360              		.loc 1 2804 54 discriminator 3 view .LVU3331
 10361 05e0 0133     		adds	r3, r3, #1
 10362              	.LVL1158:
2805:src/display.c **** 	      else
 10363              		.loc 1 2805 11 discriminator 3 view .LVU3332
 10364 05e2 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 10365 05e4 00F8015B 		strb	r5, [r0], #1
 10366              	.LVL1159:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10367              		.loc 1 2804 53 is_stmt 1 discriminator 3 view .LVU3333
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10368              		.loc 1 2804 42 is_stmt 0 discriminator 3 view .LVU3334
 10369 05e8 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10370              		.loc 1 2804 3 discriminator 3 view .LVU3335
 10371 05ea 9D42     		cmp	r5, r3
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10372              		.loc 1 2804 60 discriminator 3 view .LVU3336
 10373 05ec 4FEAA202 		asr	r2, r2, #2
 10374              	.LVL1160:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10375              		.loc 1 2804 34 is_stmt 1 discriminator 3 view .LVU3337
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10376              		.loc 1 2804 3 is_stmt 0 discriminator 3 view .LVU3338
 10377 05f0 F4DC     		bgt	.L956
 10378              	.LVL1161:
 10379              	.L954:
2810:src/display.c **** 	  }
 10380              		.loc 1 2810 6 is_stmt 1 view .LVU3339
2810:src/display.c **** 	  }
 10381              		.loc 1 2810 12 is_stmt 0 view .LVU3340
 10382 05f2 5F23     		movs	r3, #95
 10383 05f4 0370     		strb	r3, [r0]
 10384 05f6 44E6     		b	.L974
 10385              	.LVL1162:
 10386              	.L1232:
 10387              	.LBB595:
 10388              	.LBB581:
1342:src/display.c **** 	p++;
 10389              		.loc 1 1342 2 is_stmt 1 view .LVU3341
 10390              	.LBB566:
 10391              	.LBI566:
 304:src/display.c **** {
 10392              		.loc 1 304 13 view .LVU3342
 10393              	.LBB567:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10394              		.loc 1 306 3 view .LVU3343
ARM GAS  /tmp/ccCvaEE3.s 			page 304


 306:src/display.c ****   set_dot(MANT_SIGN);
 10395              		.loc 1 306 25 is_stmt 0 view .LVU3344
 10396 05f8 264A     		ldr	r2, .L1266+12
 307:src/display.c **** }
 10397              		.loc 1 307 3 view .LVU3345
 10398 05fa 8120     		movs	r0, #129
 10399              	.LVL1163:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10400              		.loc 1 306 25 view .LVU3346
 10401 05fc 1370     		strb	r3, [r2]
 307:src/display.c **** }
 10402              		.loc 1 307 3 is_stmt 1 view .LVU3347
 10403              	.LBE567:
 10404              	.LBE566:
1343:src/display.c ****       }
 10405              		.loc 1 1343 3 is_stmt 0 view .LVU3348
 10406 05fe 0135     		adds	r5, r5, #1
 10407              	.LVL1164:
 10408              	.LBB569:
 10409              	.LBB568:
 307:src/display.c **** }
 10410              		.loc 1 307 3 view .LVU3349
 10411 0600 FFF7FEFF 		bl	set_dot
 10412              	.LVL1165:
 10413              	.LBE568:
 10414              	.LBE569:
1343:src/display.c ****       }
 10415              		.loc 1 1343 2 is_stmt 1 view .LVU3350
1343:src/display.c ****       }
 10416              		.loc 1 1343 2 is_stmt 0 view .LVU3351
 10417 0604 4EE6     		b	.L1037
 10418              	.LVL1166:
 10419              	.L1236:
 10420              	.LBB570:
1372:src/display.c **** 	  if (j > 0) {
 10421              		.loc 1 1372 4 is_stmt 1 view .LVU3352
1372:src/display.c **** 	  if (j > 0) {
 10422              		.loc 1 1372 24 is_stmt 0 view .LVU3353
 10423 0606 03F10C0C 		add	ip, r3, #12
1372:src/display.c **** 	  if (j > 0) {
 10424              		.loc 1 1372 6 view .LVU3354
 10425 060a A2EB0C02 		sub	r2, r2, ip
 10426              	.LVL1167:
1373:src/display.c **** 	    p += j + 1;
 10427              		.loc 1 1373 4 is_stmt 1 view .LVU3355
1373:src/display.c **** 	    p += j + 1;
 10428              		.loc 1 1373 7 is_stmt 0 view .LVU3356
 10429 060e 002A     		cmp	r2, #0
 10430 0610 40F3DB80 		ble	.L1086
1374:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10431              		.loc 1 1374 6 is_stmt 1 view .LVU3357
1374:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10432              		.loc 1 1374 8 is_stmt 0 view .LVU3358
 10433 0614 511C     		adds	r1, r2, #1
1376:src/display.c **** 	      gotdot = 0;
 10434              		.loc 1 1376 9 view .LVU3359
 10435 0616 7245     		cmp	r2, lr
ARM GAS  /tmp/ccCvaEE3.s 			page 305


1374:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10436              		.loc 1 1374 8 view .LVU3360
 10437 0618 0D44     		add	r5, r5, r1
 10438              	.LVL1168:
1375:src/display.c **** 	    if (gotdot <= j) {
 10439              		.loc 1 1375 6 is_stmt 1 view .LVU3361
1376:src/display.c **** 	      gotdot = 0;
 10440              		.loc 1 1376 6 view .LVU3362
1376:src/display.c **** 	      gotdot = 0;
 10441              		.loc 1 1376 9 is_stmt 0 view .LVU3363
 10442 061a C0F2C580 		blt	.L1046
1377:src/display.c **** 	      if (double_dot)
 10443              		.loc 1 1377 8 is_stmt 1 view .LVU3364
 10444              	.LVL1169:
1378:src/display.c **** 		p++;
 10445              		.loc 1 1378 8 view .LVU3365
1378:src/display.c **** 		p++;
 10446              		.loc 1 1378 11 is_stmt 0 view .LVU3366
 10447 061e 002B     		cmp	r3, #0
 10448 0620 00F00582 		beq	.L1087
1379:src/display.c **** 	    }
 10449              		.loc 1 1379 3 is_stmt 1 view .LVU3367
1379:src/display.c **** 	    }
 10450              		.loc 1 1379 4 is_stmt 0 view .LVU3368
 10451 0624 0135     		adds	r5, r5, #1
 10452              	.LVL1170:
1375:src/display.c **** 	    if (gotdot <= j) {
 10453              		.loc 1 1375 8 view .LVU3369
 10454 0626 4FF0090B 		mov	fp, #9
 10455              	.LVL1171:
 10456              	.L1047:
1388:src/display.c **** 	    overflow_to_left = 1;
 10457              		.loc 1 1388 6 is_stmt 1 view .LVU3370
 10458 062a 3C21     		movs	r1, #60
 10459              	.LVL1172:
1388:src/display.c **** 	    overflow_to_left = 1;
 10460              		.loc 1 1388 6 is_stmt 0 view .LVU3371
 10461 062c 0020     		movs	r0, #0
 10462 062e FFF7FEFF 		bl	set_dig
 10463              	.LVL1173:
1389:src/display.c **** 	  }
 10464              		.loc 1 1389 6 is_stmt 1 view .LVU3372
1389:src/display.c **** 	  }
 10465              		.loc 1 1389 6 is_stmt 0 view .LVU3373
 10466 0632 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1389:src/display.c **** 	  }
 10467              		.loc 1 1389 6 view .LVU3374
 10468              	.LBE570:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10469              		.loc 1 1395 9 is_stmt 1 view .LVU3375
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10470              		.loc 1 1395 2 is_stmt 0 view .LVU3376
 10471 0634 4FF0000A 		mov	r10, #0
 10472              	.LVL1174:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10473              		.loc 1 1395 2 view .LVU3377
 10474 0638 0029     		cmp	r1, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 306


 10475 063a 3FF46FAF 		beq	.L1064
 10476              	.LVL1175:
 10477              	.L1077:
 10478              	.LBB571:
1389:src/display.c **** 	  }
 10479              		.loc 1 1389 23 view .LVU3378
 10480 063e 0123     		movs	r3, #1
 10481 0640 0193     		str	r3, [sp, #4]
 10482 0642 13E0     		b	.L1056
 10483              	.LVL1176:
 10484              	.L1238:
1389:src/display.c **** 	  }
 10485              		.loc 1 1389 23 view .LVU3379
 10486              	.LBE571:
1401:src/display.c **** 	      gotdot = i;
 10487              		.loc 1 1401 6 is_stmt 1 view .LVU3380
1401:src/display.c **** 	      gotdot = i;
 10488              		.loc 1 1401 9 is_stmt 0 view .LVU3381
 10489 0644 BAF1FF3F 		cmp	r10, #-1
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10490              		.loc 1 1405 9 view .LVU3382
 10491 0648 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1401:src/display.c **** 	      gotdot = i;
 10492              		.loc 1 1401 9 view .LVU3383
 10493 064a 47D0     		beq	.L1050
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10494              		.loc 1 1405 6 is_stmt 1 view .LVU3384
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10495              		.loc 1 1405 9 is_stmt 0 view .LVU3385
 10496 064c 2E2B     		cmp	r3, #46
 10497 064e 50D0     		beq	.L1075
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10498              		.loc 1 1405 25 view .LVU3386
 10499 0650 D345     		cmp	fp, r10
 10500 0652 45D0     		beq	.L1053
 10501              	.L1052:
1412:src/display.c **** 		i += segs_per_digit;
 10502              		.loc 1 1412 3 is_stmt 1 view .LVU3387
 10503 0654 5846     		mov	r0, fp
 10504 0656 2F21     		movs	r1, #47
 10505 0658 FFF7FEFF 		bl	set_dig
 10506              	.LVL1177:
1413:src/display.c **** 	      }
 10507              		.loc 1 1413 3 view .LVU3388
1413:src/display.c **** 	      }
 10508              		.loc 1 1413 5 is_stmt 0 view .LVU3389
 10509 065c 0BF1090B 		add	fp, fp, #9
 10510              	.LVL1178:
1413:src/display.c **** 	      }
 10511              		.loc 1 1413 5 view .LVU3390
 10512 0660 2B46     		mov	r3, r5
 10513              	.LVL1179:
 10514              	.L1054:
1399:src/display.c **** 	  if (*p == '.') {
 10515              		.loc 1 1399 11 is_stmt 1 view .LVU3391
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10516              		.loc 1 1395 9 is_stmt 0 view .LVU3392
ARM GAS  /tmp/ccCvaEE3.s 			page 307


 10517 0662 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1399:src/display.c **** 	  if (*p == '.') {
 10518              		.loc 1 1399 12 view .LVU3393
 10519 0664 0135     		adds	r5, r5, #1
 10520              	.LVL1180:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10521              		.loc 1 1395 9 is_stmt 1 view .LVU3394
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10522              		.loc 1 1395 2 is_stmt 0 view .LVU3395
 10523 0666 0029     		cmp	r1, #0
 10524 0668 3FF435AF 		beq	.L1057
 10525              	.LVL1181:
 10526              	.L1056:
1397:src/display.c **** #endif
 10527              		.loc 1 1397 9 view .LVU3396
 10528 066c A1F14403 		sub	r3, r1, #68
 10529 0670 012B     		cmp	r3, #1
 10530 0672 7FF630AF 		bls	.L1057
1400:src/display.c **** 	    if (gotdot < 0)
 10531              		.loc 1 1400 4 is_stmt 1 view .LVU3397
1400:src/display.c **** 	    if (gotdot < 0)
 10532              		.loc 1 1400 7 is_stmt 0 view .LVU3398
 10533 0676 2E29     		cmp	r1, #46
 10534 0678 E4D0     		beq	.L1238
1434:src/display.c **** 	      i += segs_per_digit;
 10535              		.loc 1 1434 8 is_stmt 1 view .LVU3399
 10536 067a 5846     		mov	r0, fp
 10537 067c FFF7FEFF 		bl	set_dig
 10538              	.LVL1182:
1435:src/display.c **** 	    }
 10539              		.loc 1 1435 8 view .LVU3400
1435:src/display.c **** 	    }
 10540              		.loc 1 1435 10 is_stmt 0 view .LVU3401
 10541 0680 0BF1090B 		add	fp, fp, #9
 10542              	.LVL1183:
1435:src/display.c **** 	    }
 10543              		.loc 1 1435 10 view .LVU3402
 10544 0684 2B46     		mov	r3, r5
 10545 0686 ECE7     		b	.L1054
 10546              	.L1267:
 10547              		.align	2
 10548              	.L1266:
 10549 0688 0C000000 		.word	.LANCHOR17+12
 10550 068c 08000000 		.word	.LC25
 10551 0690 18000000 		.word	.LC26
 10552 0694 00000000 		.word	LastDisplayedNumber
 10553 0698 00000000 		.word	DispMsg
 10554 069c 00000000 		.word	ShowRegister
 10555 06a0 34000000 		.word	.LC27
 10556 06a4 00000000 		.word	LastDisplayedExponent
 10557 06a8 00000000 		.word	.LANCHOR20
 10558 06ac 00000000 		.word	DispPlot
 10559 06b0 38000000 		.word	.LC28
 10560 06b4 AC000000 		.word	.LC44
 10561 06b8 00000000 		.word	.LANCHOR21
 10562 06bc B4000000 		.word	.LC31
 10563 06c0 00000000 		.word	.LANCHOR22
ARM GAS  /tmp/ccCvaEE3.s 			page 308


 10564 06c4 00000000 		.word	.LANCHOR24
 10565 06c8 00000000 		.word	.LANCHOR0
 10566 06cc 56040000 		.word	argcmds+1110
 10567 06d0 3C000000 		.word	.LC29
 10568 06d4 00000000 		.word	main_ram
 10569 06d8 BC000000 		.word	.LC30
 10570              	.L1050:
1402:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10571              		.loc 1 1402 8 is_stmt 1 view .LVU3403
 10572              	.LVL1184:
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10573              		.loc 1 1405 6 view .LVU3404
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10574              		.loc 1 1405 9 is_stmt 0 view .LVU3405
 10575 06dc 2E2B     		cmp	r3, #46
 10576 06de 07D0     		beq	.L1239
 10577              	.LVL1185:
 10578              	.L1053:
1416:src/display.c **** 		  i += segs_per_digit;
 10579              		.loc 1 1416 3 is_stmt 1 view .LVU3406
1416:src/display.c **** 		  i += segs_per_digit;
 10580              		.loc 1 1416 6 is_stmt 0 view .LVU3407
 10581 06e0 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10582 06e2 012B     		cmp	r3, #1
 10583 06e4 51D9     		bls	.L1055
1417:src/display.c **** 		}
 10584              		.loc 1 1417 5 is_stmt 1 view .LVU3408
 10585              	.LVL1186:
1417:src/display.c **** 		}
 10586              		.loc 1 1417 5 is_stmt 0 view .LVU3409
 10587 06e6 DA46     		mov	r10, fp
 10588 06e8 2B46     		mov	r3, r5
1417:src/display.c **** 		}
 10589              		.loc 1 1417 7 view .LVU3410
 10590 06ea 0BF1090B 		add	fp, fp, #9
 10591              	.LVL1187:
1417:src/display.c **** 		}
 10592              		.loc 1 1417 7 view .LVU3411
 10593 06ee B8E7     		b	.L1054
 10594              	.LVL1188:
 10595              	.L1239:
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10596              		.loc 1 1405 9 view .LVU3412
 10597 06f0 DA46     		mov	r10, fp
 10598              	.LVL1189:
 10599              	.L1075:
1406:src/display.c **** 		p++;
 10600              		.loc 1 1406 8 is_stmt 1 view .LVU3413
1407:src/display.c **** 	      }
 10601              		.loc 1 1407 3 view .LVU3414
1407:src/display.c **** 	      }
 10602              		.loc 1 1407 4 is_stmt 0 view .LVU3415
 10603 06f2 0135     		adds	r5, r5, #1
 10604              	.LVL1190:
1407:src/display.c **** 	      }
 10605              		.loc 1 1407 4 view .LVU3416
 10606 06f4 AEE7     		b	.L1052
ARM GAS  /tmp/ccCvaEE3.s 			page 309


 10607              	.LVL1191:
 10608              	.L957:
1407:src/display.c **** 	      }
 10609              		.loc 1 1407 4 view .LVU3417
 10610              	.LBE581:
 10611              	.LBE595:
2833:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10612              		.loc 1 2833 9 is_stmt 1 view .LVU3418
2833:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10613              		.loc 1 2833 12 is_stmt 0 view .LVU3419
 10614 06f6 BAF1000F 		cmp	r10, #0
 10615 06fa 6BD1     		bne	.L1240
2888:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10616              		.loc 1 2888 9 is_stmt 1 view .LVU3420
2888:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10617              		.loc 1 2888 12 is_stmt 0 view .LVU3421
 10618 06fc 1F07     		lsls	r7, r3, #28
 10619 06fe 00F1DE80 		bmi	.L1241
2903:src/display.c **** 	  show_status();
 10620              		.loc 1 2903 9 is_stmt 1 view .LVU3422
2903:src/display.c **** 	  show_status();
 10621              		.loc 1 2903 19 is_stmt 0 view .LVU3423
 10622 0702 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2903:src/display.c **** 	  show_status();
 10623              		.loc 1 2903 12 view .LVU3424
 10624 0704 002F     		cmp	r7, #0
 10625 0706 40F01581 		bne	.L1242
2906:src/display.c **** 	  show_label();
 10626              		.loc 1 2906 9 is_stmt 1 view .LVU3425
2906:src/display.c **** 	  show_label();
 10627              		.loc 1 2906 13 is_stmt 0 view .LVU3426
 10628 070a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2906:src/display.c **** 	  show_label();
 10629              		.loc 1 2906 12 view .LVU3427
 10630 070c 5A07     		lsls	r2, r3, #29
 10631 070e 00F1EC80 		bmi	.L1243
2909:src/display.c **** 	  show_registers();
 10632              		.loc 1 2909 9 is_stmt 1 view .LVU3428
2909:src/display.c **** 	  show_registers();
 10633              		.loc 1 2909 12 is_stmt 0 view .LVU3429
 10634 0712 1F07     		lsls	r7, r3, #28
 10635 0714 00F10A83 		bmi	.L1244
2919:src/display.c **** 	  if (DispMsg) { 
 10636              		.loc 1 2919 9 is_stmt 1 view .LVU3430
2919:src/display.c **** 	  if (DispMsg) { 
 10637              		.loc 1 2919 12 is_stmt 0 view .LVU3431
 10638 0718 4F06     		lsls	r7, r1, #25
 10639 071a 40F1EE82 		bpl	.L1008
2920:src/display.c **** 	    set_status(DispMsg);
 10640              		.loc 1 2920 4 is_stmt 1 view .LVU3432
2920:src/display.c **** 	    set_status(DispMsg);
 10641              		.loc 1 2920 8 is_stmt 0 view .LVU3433
 10642 071e C54F     		ldr	r7, .L1268
 10643 0720 3B68     		ldr	r3, [r7]
2920:src/display.c **** 	    set_status(DispMsg);
 10644              		.loc 1 2920 7 view .LVU3434
 10645 0722 002B     		cmp	r3, #0
ARM GAS  /tmp/ccCvaEE3.s 			page 310


 10646 0724 00F09E81 		beq	.L1009
2921:src/display.c **** 	  } else if (DispPlot) {
 10647              		.loc 1 2921 6 is_stmt 1 view .LVU3435
 10648 0728 1846     		mov	r0, r3
 10649 072a FFF7FEFF 		bl	set_status
 10650              	.LVL1192:
2973:src/display.c ****       nostk:
 10651              		.loc 1 2973 2 view .LVU3436
 10652 072e C24B     		ldr	r3, .L1268+4
 10653 0730 0093     		str	r3, [sp]
 10654 0732 FFF7FEFF 		bl	show_stack
 10655              	.LVL1193:
2975:src/display.c **** 	if (!skip) {
 10656              		.loc 1 2975 2 view .LVU3437
 10657 0736 FFF7FEFF 		bl	show_flags
 10658              	.LVL1194:
2976:src/display.c **** 	  if (State2.runmode) {
 10659              		.loc 1 2976 2 view .LVU3438
 10660 073a A4E4     		b	.L938
 10661              	.LVL1195:
 10662              	.L1235:
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10663              		.loc 1 2771 6 view .LVU3439
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10664              		.loc 1 2771 11 is_stmt 0 view .LVU3440
 10665 073c 2189     		ldrh	r1, [r4, #8]
 10666 073e FFF7FEFF 		bl	num_arg_0
 10667              	.LVL1196:
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10668              		.loc 1 2771 11 view .LVU3441
 10669 0742 0346     		mov	r3, r0
 10670              	.LVL1197:
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10671              		.loc 1 2771 11 view .LVU3442
 10672 0744 FBE6     		b	.L944
 10673              	.LVL1198:
 10674              	.L1234:
 10675              	.LBB596:
 10676              	.LBB582:
 10677              	.LBB572:
1462:src/display.c **** #  endif
 10678              		.loc 1 1462 6 is_stmt 1 view .LVU3443
1465:src/display.c **** 	      flags |= 2;
 10679              		.loc 1 1465 6 view .LVU3444
1466:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10680              		.loc 1 1466 14 is_stmt 0 view .LVU3445
 10681 0746 442A     		cmp	r2, #68
 10682 0748 14BF     		ite	ne
 10683 074a 4FF00C0A 		movne	r10, #12
 10684 074e 4FF00E0A 		moveq	r10, #14
 10685              	.LVL1199:
1467:src/display.c **** 	      flags |= 16;
 10686              		.loc 1 1467 6 is_stmt 1 view .LVU3446
1467:src/display.c **** 	      flags |= 16;
 10687              		.loc 1 1467 9 is_stmt 0 view .LVU3447
 10688 0752 BBF15A0F 		cmp	fp, #90
1468:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
ARM GAS  /tmp/ccCvaEE3.s 			page 311


 10689              		.loc 1 1468 8 is_stmt 1 view .LVU3448
1468:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10690              		.loc 1 1468 14 is_stmt 0 view .LVU3449
 10691 0756 C8BF     		it	gt
 10692 0758 4AF0100A 		orrgt	r10, r10, #16
 10693              	.LVL1200:
1469:src/display.c **** 	  }
 10694              		.loc 1 1469 6 is_stmt 1 view .LVU3450
 10695 075c 681C     		adds	r0, r5, #1
 10696 075e FFF7FEFF 		bl	s_to_i
 10697              	.LVL1201:
 10698 0762 5146     		mov	r1, r10
 10699 0764 0022     		movs	r2, #0
 10700 0766 FFF7FEFF 		bl	set_exp
 10701              	.LVL1202:
1469:src/display.c **** 	  }
 10702              		.loc 1 1469 6 is_stmt 0 view .LVU3451
 10703              	.LBE572:
 10704              	.LBE582:
 10705              	.LBE596:
3013:src/display.c **** 	      goto finish;
 10706              		.loc 1 3013 6 is_stmt 1 view .LVU3452
3013:src/display.c **** 	      goto finish;
 10707              		.loc 1 3013 9 is_stmt 0 view .LVU3453
 10708 076a D8F80030 		ldr	r3, [r8]
 10709 076e 002B     		cmp	r3, #0
 10710 0770 3FF4B4AD 		beq	.L1221
 10711 0774 D7E6     		b	.L1135
 10712              	.LVL1203:
 10713              	.L1041:
 10714              	.LBB597:
 10715              	.LBB583:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10716              		.loc 1 1395 9 is_stmt 1 view .LVU3454
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10717              		.loc 1 1395 2 is_stmt 0 view .LVU3455
 10718 0776 0029     		cmp	r1, #0
 10719 0778 00F09280 		beq	.L1085
1338:src/display.c **** #endif
 10720              		.loc 1 1338 11 view .LVU3456
 10721 077c CDF804B0 		str	fp, [sp, #4]
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10722              		.loc 1 1332 11 view .LVU3457
 10723 0780 4FF0FF3A 		mov	r10, #-1
 10724              	.LVL1204:
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10725              		.loc 1 1332 11 view .LVU3458
 10726 0784 72E7     		b	.L1056
 10727              	.LVL1205:
 10728              	.L1091:
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10729              		.loc 1 1332 11 view .LVU3459
 10730              	.LBE583:
 10731              	.LBE597:
 10732              	.LBB598:
 10733              	.LBB548:
3033:src/display.c **** 	      while(*b) {
ARM GAS  /tmp/ccCvaEE3.s 			page 312


 10734              		.loc 1 3033 10 view .LVU3460
 10735 0786 5A1C     		adds	r2, r3, #1
 10736 0788 D1E4     		b	.L1068
 10737              	.LVL1206:
 10738              	.L1055:
3033:src/display.c **** 	      while(*b) {
 10739              		.loc 1 3033 10 view .LVU3461
 10740              	.LBE548:
 10741              	.LBE598:
 10742              	.LBB599:
 10743              	.LBB584:
1420:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10744              		.loc 1 1420 5 is_stmt 1 view .LVU3462
 10745 078a AC4B     		ldr	r3, .L1268+8
 10746 078c 0022     		movs	r2, #0
 10747 078e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10748 0790 ABF10900 		sub	r0, fp, #9
 10749 0794 FFF7FEFF 		bl	set_decimal
 10750              	.LVL1207:
 10751 0798 DA46     		mov	r10, fp
 10752 079a 2B46     		mov	r3, r5
 10753 079c 61E7     		b	.L1054
 10754              	.LVL1208:
 10755              	.L1237:
1420:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10756              		.loc 1 1420 5 is_stmt 0 view .LVU3463
 10757              	.LBE584:
 10758              	.LBE599:
2794:src/display.c **** 	    *bp++ = '_';
 10759              		.loc 1 2794 6 is_stmt 1 view .LVU3464
2794:src/display.c **** 	    *bp++ = '_';
 10760              		.loc 1 2794 12 is_stmt 0 view .LVU3465
 10761 079e 1122     		movs	r2, #17
2795:src/display.c **** 	  } else {
 10762              		.loc 1 2795 12 view .LVU3466
 10763 07a0 5F23     		movs	r3, #95
2794:src/display.c **** 	    *bp++ = '_';
 10764              		.loc 1 2794 12 view .LVU3467
 10765 07a2 0270     		strb	r2, [r0]
2795:src/display.c **** 	  } else {
 10766              		.loc 1 2795 6 is_stmt 1 view .LVU3468
 10767              	.LVL1209:
2795:src/display.c **** 	  } else {
 10768              		.loc 1 2795 12 is_stmt 0 view .LVU3469
 10769 07a4 4370     		strb	r3, [r0, #1]
 10770 07a6 6CE5     		b	.L974
 10771              	.LVL1210:
 10772              	.L1046:
 10773              	.LBB600:
 10774              	.LBB585:
 10775              	.LBB573:
1381:src/display.c **** 	      gotdot = 0;
 10776              		.loc 1 1381 11 is_stmt 1 view .LVU3470
1381:src/display.c **** 	      gotdot = 0;
 10777              		.loc 1 1381 14 is_stmt 0 view .LVU3471
 10778 07a8 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10779              	.LVL1211:
ARM GAS  /tmp/ccCvaEE3.s 			page 313


1381:src/display.c **** 	      gotdot = 0;
 10780              		.loc 1 1381 14 view .LVU3472
 10781 07aa 2E2A     		cmp	r2, #46
 10782 07ac 7ED0     		beq	.L1245
 10783              	.LVL1212:
1388:src/display.c **** 	    overflow_to_left = 1;
 10784              		.loc 1 1388 6 is_stmt 1 view .LVU3473
 10785 07ae 3C21     		movs	r1, #60
 10786              	.LVL1213:
1388:src/display.c **** 	    overflow_to_left = 1;
 10787              		.loc 1 1388 6 is_stmt 0 view .LVU3474
 10788 07b0 FFF7FEFF 		bl	set_dig
 10789              	.LVL1214:
1389:src/display.c **** 	  }
 10790              		.loc 1 1389 6 is_stmt 1 view .LVU3475
1389:src/display.c **** 	  }
 10791              		.loc 1 1389 6 is_stmt 0 view .LVU3476
 10792 07b4 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1389:src/display.c **** 	  }
 10793              		.loc 1 1389 6 view .LVU3477
 10794              	.LBE573:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10795              		.loc 1 1395 9 is_stmt 1 view .LVU3478
 10796              	.LBB574:
1375:src/display.c **** 	    if (gotdot <= j) {
 10797              		.loc 1 1375 8 is_stmt 0 view .LVU3479
 10798 07b6 4FF0090B 		mov	fp, #9
 10799              	.LBE574:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10800              		.loc 1 1395 2 view .LVU3480
 10801 07ba 0029     		cmp	r1, #0
 10802 07bc 3FF4A8AE 		beq	.L1042
 10803              	.LBB575:
1387:src/display.c **** 	    set_dig(0, '<');
 10804              		.loc 1 1387 18 view .LVU3481
 10805 07c0 4FF0FF3A 		mov	r10, #-1
 10806              	.LVL1215:
1375:src/display.c **** 	    if (gotdot <= j) {
 10807              		.loc 1 1375 8 view .LVU3482
 10808 07c4 4FF0090B 		mov	fp, #9
 10809 07c8 39E7     		b	.L1077
 10810              	.LVL1216:
 10811              	.L1086:
1375:src/display.c **** 	    if (gotdot <= j) {
 10812              		.loc 1 1375 8 view .LVU3483
 10813              	.LBE575:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10814              		.loc 1 1355 4 view .LVU3484
 10815 07ca 8346     		mov	fp, r0
1338:src/display.c **** #endif
 10816              		.loc 1 1338 11 view .LVU3485
 10817 07cc 0190     		str	r0, [sp, #4]
 10818              	.LBB576:
1391:src/display.c **** 	}
 10819              		.loc 1 1391 16 view .LVU3486
 10820 07ce 4FF0FF3A 		mov	r10, #-1
 10821              	.LVL1217:
ARM GAS  /tmp/ccCvaEE3.s 			page 314


1391:src/display.c **** 	}
 10822              		.loc 1 1391 16 view .LVU3487
 10823 07d2 4BE7     		b	.L1056
 10824              	.LVL1218:
 10825              	.L1240:
1391:src/display.c **** 	}
 10826              		.loc 1 1391 16 view .LVU3488
 10827              	.LBE576:
 10828              	.LBE585:
 10829              	.LBE600:
 10830              	.LBB601:
2834:src/display.c **** 	  char b2[16];
 10831              		.loc 1 2834 4 is_stmt 1 view .LVU3489
2834:src/display.c **** 	  char b2[16];
 10832              		.loc 1 2834 45 is_stmt 0 view .LVU3490
 10833 07d4 9A4B     		ldr	r3, .L1268+12
 10834 07d6 1B68     		ldr	r3, [r3]
 10835 07d8 B3F8DC07 		ldrh	r0, [r3, #2012]
2834:src/display.c **** 	  char b2[16];
 10836              		.loc 1 2834 22 view .LVU3491
 10837 07dc C0F34610 		ubfx	r0, r0, #5, #7
 10838 07e0 FFF7FEFF 		bl	current_catalogue
 10839              	.LVL1219:
2838:src/display.c **** 	  p = catcmd(op, b2);
 10840              		.loc 1 2838 9 view .LVU3492
 10841 07e4 9749     		ldr	r1, .L1268+16
2834:src/display.c **** 	  char b2[16];
 10842              		.loc 1 2834 22 view .LVU3493
 10843 07e6 0546     		mov	r5, r0
 10844              	.LVL1220:
2835:src/display.c **** 	  const char *p;
 10845              		.loc 1 2835 4 is_stmt 1 view .LVU3494
2836:src/display.c **** 
 10846              		.loc 1 2836 4 view .LVU3495
2838:src/display.c **** 	  p = catcmd(op, b2);
 10847              		.loc 1 2838 4 view .LVU3496
2838:src/display.c **** 	  p = catcmd(op, b2);
 10848              		.loc 1 2838 9 is_stmt 0 view .LVU3497
 10849 07e8 1EA8     		add	r0, sp, #120
 10850              	.LVL1221:
2838:src/display.c **** 	  p = catcmd(op, b2);
 10851              		.loc 1 2838 9 view .LVU3498
 10852 07ea FFF7FEFF 		bl	scopy
 10853              	.LVL1222:
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10854              		.loc 1 2839 8 view .LVU3499
 10855 07ee 08A9     		add	r1, sp, #32
2838:src/display.c **** 	  p = catcmd(op, b2);
 10856              		.loc 1 2838 9 view .LVU3500
 10857 07f0 0646     		mov	r6, r0
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10858              		.loc 1 2839 8 view .LVU3501
 10859 07f2 2846     		mov	r0, r5
 10860              	.LVL1223:
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10861              		.loc 1 2839 4 is_stmt 1 view .LVU3502
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
ARM GAS  /tmp/ccCvaEE3.s 			page 315


 10862              		.loc 1 2839 8 is_stmt 0 view .LVU3503
 10863 07f4 FFF7FEFF 		bl	catcmd
 10864              	.LVL1224:
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10865              		.loc 1 2840 7 view .LVU3504
 10866 07f8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10867 07fa 142B     		cmp	r3, #20
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10868              		.loc 1 2839 8 view .LVU3505
 10869 07fc 0146     		mov	r1, r0
 10870              	.LVL1225:
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10871              		.loc 1 2840 4 is_stmt 1 view .LVU3506
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10872              		.loc 1 2840 7 is_stmt 0 view .LVU3507
 10873 07fe 07D0     		beq	.L959
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10874              		.loc 1 2840 29 discriminator 1 view .LVU3508
 10875 0800 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10876 0802 9B07     		lsls	r3, r3, #30
 10877 0804 04D5     		bpl	.L959
2841:src/display.c **** 	  bp = scopy(bp, p);
 10878              		.loc 1 2841 6 is_stmt 1 view .LVU3509
2841:src/display.c **** 	  bp = scopy(bp, p);
 10879              		.loc 1 2841 9 is_stmt 0 view .LVU3510
 10880 0806 3346     		mov	r3, r6
 10881              	.LVL1226:
2841:src/display.c **** 	  bp = scopy(bp, p);
 10882              		.loc 1 2841 12 view .LVU3511
 10883 0808 1422     		movs	r2, #20
 10884 080a 03F8012B 		strb	r2, [r3], #1
 10885              	.LVL1227:
2841:src/display.c **** 	  bp = scopy(bp, p);
 10886              		.loc 1 2841 9 view .LVU3512
 10887 080e 1E46     		mov	r6, r3
 10888              	.LVL1228:
 10889              	.L959:
2842:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10890              		.loc 1 2842 4 is_stmt 1 view .LVU3513
2842:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10891              		.loc 1 2842 9 is_stmt 0 view .LVU3514
 10892 0810 3046     		mov	r0, r6
 10893              	.LVL1229:
2842:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10894              		.loc 1 2842 9 view .LVU3515
 10895 0812 FFF7FEFF 		bl	scopy
 10896              	.LVL1230:
2843:src/display.c **** 	    // State2.disp_small = 1;
 10897              		.loc 1 2843 4 is_stmt 1 view .LVU3516
2843:src/display.c **** 	    // State2.disp_small = 1;
 10898              		.loc 1 2843 7 is_stmt 0 view .LVU3517
 10899 0816 AAF11003 		sub	r3, r10, #16
 10900 081a 012B     		cmp	r3, #1
 10901 081c 2DD9     		bls	.L1246
2850:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10902              		.loc 1 2850 11 is_stmt 1 view .LVU3518
2850:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
ARM GAS  /tmp/ccCvaEE3.s 			page 316


 10903              		.loc 1 2850 15 is_stmt 0 view .LVU3519
 10904 081e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2850:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10905              		.loc 1 2850 14 view .LVU3520
 10906 0820 13F04003 		ands	r3, r3, #64
 10907 0824 08D0     		beq	.L1081
2851:src/display.c **** 	      decNumber x, r;
 10908              		.loc 1 2851 6 is_stmt 1 view .LVU3521
2851:src/display.c **** 	      decNumber x, r;
 10909              		.loc 1 2851 9 is_stmt 0 view .LVU3522
 10910 0826 BAF1120F 		cmp	r10, #18
 10911 082a 00F00383 		beq	.L1247
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10912              		.loc 1 2871 13 is_stmt 1 view .LVU3523
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10913              		.loc 1 2871 46 is_stmt 0 view .LVU3524
 10914 082e A5F58873 		sub	r3, r5, #272
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10915              		.loc 1 2871 16 view .LVU3525
 10916 0832 0D2B     		cmp	r3, #13
 10917 0834 40F2E882 		bls	.L1248
 10918              	.L1081:
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10919              		.loc 1 2871 16 view .LVU3526
 10920              	.LBE601:
2685:src/display.c **** 	int x_disp = 0;
 10921              		.loc 1 2685 6 view .LVU3527
 10922 0838 0025     		movs	r5, #0
 10923              	.LVL1231:
 10924              	.L963:
 10925              	.LBB611:
2880:src/display.c **** 	    set_status_top(buf);
 10926              		.loc 1 2880 4 is_stmt 1 view .LVU3528
2880:src/display.c **** 	    set_status_top(buf);
 10927              		.loc 1 2880 7 is_stmt 0 view .LVU3529
 10928 083a BBF1000F 		cmp	fp, #0
 10929 083e 17D0     		beq	.L968
2881:src/display.c **** 	    no_status_top = 1;
 10930              		.loc 1 2881 6 is_stmt 1 view .LVU3530
 10931              	.LVL1232:
 10932              	.LBB602:
 10933              	.LBI602:
3639:src/display.c **** 	if (no_status_top) return;
 10934              		.loc 1 3639 19 view .LVU3531
 10935              	.LBB603:
3640:src/display.c **** 	if (State2.runmode) {
 10936              		.loc 1 3640 2 view .LVU3532
3640:src/display.c **** 	if (State2.runmode) {
 10937              		.loc 1 3640 5 is_stmt 0 view .LVU3533
 10938 0840 B9F90030 		ldrsh	r3, [r9]
 10939 0844 13B9     		cbnz	r3, .L969
 10940 0846 1EA8     		add	r0, sp, #120
 10941              	.LVL1233:
3640:src/display.c **** 	if (State2.runmode) {
 10942              		.loc 1 3640 5 view .LVU3534
 10943 0848 FFF7FEFF 		bl	set_status_top.part.0
 10944              	.LVL1234:
ARM GAS  /tmp/ccCvaEE3.s 			page 317


 10945              	.L969:
3640:src/display.c **** 	if (State2.runmode) {
 10946              		.loc 1 3640 5 view .LVU3535
 10947              	.LBE603:
 10948              	.LBE602:
2882:src/display.c **** 	    annuc = 1;
 10949              		.loc 1 2882 6 is_stmt 1 view .LVU3536
2882:src/display.c **** 	    annuc = 1;
 10950              		.loc 1 2882 20 is_stmt 0 view .LVU3537
 10951 084c 0123     		movs	r3, #1
2883:src/display.c **** 	  }
 10952              		.loc 1 2883 12 view .LVU3538
 10953 084e 5E46     		mov	r6, fp
2882:src/display.c **** 	    annuc = 1;
 10954              		.loc 1 2882 20 view .LVU3539
 10955 0850 A9F80030 		strh	r3, [r9]	@ movhi
2883:src/display.c **** 	  }
 10956              		.loc 1 2883 6 is_stmt 1 view .LVU3540
 10957              	.LVL1235:
 10958              	.L970:
2883:src/display.c **** 	  }
 10959              		.loc 1 2883 6 is_stmt 0 view .LVU3541
 10960              	.LBE611:
2973:src/display.c ****       nostk:
 10961              		.loc 1 2973 2 is_stmt 1 view .LVU3542
 10962 0854 FFF7FEFF 		bl	show_stack
 10963              	.LVL1236:
 10964              	.LDL1:
2975:src/display.c **** 	if (!skip) {
 10965              		.loc 1 2975 2 view .LVU3543
 10966 0858 FFF7FEFF 		bl	show_flags
 10967              	.LVL1237:
2976:src/display.c **** 	  if (State2.runmode) {
 10968              		.loc 1 2976 2 view .LVU3544
2976:src/display.c **** 	  if (State2.runmode) {
 10969              		.loc 1 2976 5 is_stmt 0 view .LVU3545
 10970 085c 002D     		cmp	r5, #0
 10971 085e 00F06082 		beq	.L1219
 10972              	.LVL1238:
 10973              	.L971:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10974              		.loc 1 3043 2 is_stmt 1 view .LVU3546
 10975 0862 FFF7FEFF 		bl	set_annunciators
 10976              	.LVL1239:
3044:src/display.c **** 	  ShowRPN = 0;
 10977              		.loc 1 3044 2 view .LVU3547
 10978 0866 744B     		ldr	r3, .L1268+4
 10979 0868 724F     		ldr	r7, .L1268
 10980 086a 774D     		ldr	r5, .L1268+20
 10981 086c 0093     		str	r3, [sp]
 10982 086e 8FE4     		b	.L933
 10983              	.LVL1240:
 10984              	.L968:
 10985              	.LBB612:
2886:src/display.c **** 	  }
 10986              		.loc 1 2886 6 view .LVU3548
 10987 0870 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/ccCvaEE3.s 			page 318


 10988 0872 FFF7FEFF 		bl	set_status
 10989              	.LVL1241:
 10990              	.LBE612:
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10991              		.loc 1 2683 6 is_stmt 0 view .LVU3549
 10992 0876 5E46     		mov	r6, fp
 10993 0878 ECE7     		b	.L970
 10994              	.LVL1242:
 10995              	.L1246:
 10996              	.LBB613:
2845:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10997              		.loc 1 2845 6 is_stmt 1 view .LVU3550
2845:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10998              		.loc 1 2845 9 is_stmt 0 view .LVU3551
 10999 087a B5F5274F 		cmp	r5, #42752
 11000 087e 00F0FD82 		beq	.L961
2845:src/display.c **** 	      set_digits_string("0 to 255", 0);
 11001              		.loc 1 2845 41 discriminator 1 view .LVU3552
 11002 0882 B5F5284F 		cmp	r5, #43008
 11003 0886 00F0F982 		beq	.L961
2848:src/display.c **** 	    skip = 1;
 11004              		.loc 1 2848 8 is_stmt 1 view .LVU3553
2848:src/display.c **** 	    skip = 1;
 11005              		.loc 1 2848 14 is_stmt 0 view .LVU3554
 11006 088a 05F07F00 		and	r0, r5, #127
 11007 088e 0021     		movs	r1, #0
 11008 0890 FFF7FEFF 		bl	get_const
 11009              	.LVL1243:
2848:src/display.c **** 	    skip = 1;
 11010              		.loc 1 2848 8 view .LVU3555
 11011 0894 0022     		movs	r2, #0
 11012 0896 1146     		mov	r1, r2
 11013 0898 FFF7FEFF 		bl	set_x
 11014              	.LVL1244:
2849:src/display.c **** 	  } else if (State2.runmode) {
 11015              		.loc 1 2849 11 view .LVU3556
 11016 089c 0125     		movs	r5, #1
 11017              	.LVL1245:
2849:src/display.c **** 	  } else if (State2.runmode) {
 11018              		.loc 1 2849 11 view .LVU3557
 11019 089e CCE7     		b	.L963
 11020              	.LVL1246:
 11021              	.L1085:
2849:src/display.c **** 	  } else if (State2.runmode) {
 11022              		.loc 1 2849 11 view .LVU3558
 11023              	.LBE613:
 11024              	.LBB614:
 11025              	.LBB586:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11026              		.loc 1 1355 4 view .LVU3559
 11027 08a0 8B46     		mov	fp, r1
 11028 08a2 35E6     		b	.L1042
 11029              	.LVL1247:
 11030              	.L955:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11031              		.loc 1 1355 4 view .LVU3560
 11032              	.LBE586:
ARM GAS  /tmp/ccCvaEE3.s 			page 319


 11033              	.LBE614:
2807:src/display.c **** 	    }
 11034              		.loc 1 2807 3 is_stmt 1 view .LVU3561
2807:src/display.c **** 	    }
 11035              		.loc 1 2807 8 is_stmt 0 view .LVU3562
 11036 08a4 2189     		ldrh	r1, [r4, #8]
 11037 08a6 FFF7FEFF 		bl	num_arg_0
 11038              	.LVL1248:
2807:src/display.c **** 	    }
 11039              		.loc 1 2807 8 view .LVU3563
 11040 08aa A2E6     		b	.L954
 11041              	.LVL1249:
 11042              	.L1245:
 11043              	.LBB615:
 11044              	.LBB587:
 11045              	.LBB577:
1382:src/display.c **** 	      p++;
 11046              		.loc 1 1382 8 is_stmt 1 view .LVU3564
1383:src/display.c **** 	      if (!double_dot)
 11047              		.loc 1 1383 8 view .LVU3565
1385:src/display.c **** 	    }
 11048              		.loc 1 1385 5 is_stmt 0 view .LVU3566
 11049 08ac 002B     		cmp	r3, #0
1383:src/display.c **** 	      if (!double_dot)
 11050              		.loc 1 1383 9 view .LVU3567
 11051 08ae 05F10105 		add	r5, r5, #1
 11052              	.LVL1250:
1384:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 11053              		.loc 1 1384 8 is_stmt 1 view .LVU3568
1385:src/display.c **** 	    }
 11054              		.loc 1 1385 5 is_stmt 0 view .LVU3569
 11055 08b2 14BF     		ite	ne
 11056 08b4 4FF0090B 		movne	fp, #9
 11057 08b8 4FF0120B 		moveq	fp, #18
 11058 08bc B5E6     		b	.L1047
 11059              	.LVL1251:
 11060              	.L1241:
1385:src/display.c **** 	    }
 11061              		.loc 1 1385 5 view .LVU3570
 11062              	.LBE577:
 11063              	.LBE587:
 11064              	.LBE615:
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11065              		.loc 1 2889 4 is_stmt 1 view .LVU3571
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11066              		.loc 1 2889 42 is_stmt 0 view .LVU3572
 11067 08be E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 11068 08c0 6249     		ldr	r1, .L1268+24
 11069 08c2 0423     		movs	r3, #4
 11070 08c4 03EB0213 		add	r3, r3, r2, lsl #4
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11071              		.loc 1 2889 9 view .LVU3573
 11072 08c8 1944     		add	r1, r1, r3
 11073 08ca 2722     		movs	r2, #39
 11074 08cc 1EA8     		add	r0, sp, #120
 11075              	.LVL1252:
2889:src/display.c **** 	  if (State2.numdigit > 0) {
ARM GAS  /tmp/ccCvaEE3.s 			page 320


 11076              		.loc 1 2889 9 view .LVU3574
 11077 08ce FFF7FEFF 		bl	scopy_char
 11078              	.LVL1253:
2890:src/display.c **** 	    *bp++ = (char) State2.digval;
 11079              		.loc 1 2890 7 view .LVU3575
 11080 08d2 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11081              	.LVL1254:
2890:src/display.c **** 	    *bp++ = (char) State2.digval;
 11082              		.loc 1 2890 4 is_stmt 1 view .LVU3576
2890:src/display.c **** 	    *bp++ = (char) State2.digval;
 11083              		.loc 1 2890 7 is_stmt 0 view .LVU3577
 11084 08d4 002B     		cmp	r3, #0
 11085 08d6 3FF4D4AC 		beq	.L974
2891:src/display.c **** 	    if (State2.numdigit > 1)
 11086              		.loc 1 2891 6 is_stmt 1 view .LVU3578
 11087              	.LVL1255:
2891:src/display.c **** 	    if (State2.numdigit > 1)
 11088              		.loc 1 2891 14 is_stmt 0 view .LVU3579
 11089 08da 2389     		ldrh	r3, [r4, #8]
 11090 08dc 0370     		strb	r3, [r0]
2892:src/display.c **** 	      *bp++ = State2.digval2;
 11091              		.loc 1 2892 6 is_stmt 1 view .LVU3580
2892:src/display.c **** 	      *bp++ = State2.digval2;
 11092              		.loc 1 2892 9 is_stmt 0 view .LVU3581
 11093 08de E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11094 08e0 012B     		cmp	r3, #1
2893:src/display.c **** 	  }
 11095              		.loc 1 2893 8 is_stmt 1 view .LVU3582
 11096              	.LVL1256:
2893:src/display.c **** 	  }
 11097              		.loc 1 2893 22 is_stmt 0 view .LVU3583
 11098 08e2 84BF     		itt	hi
 11099 08e4 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2893:src/display.c **** 	  }
 11100              		.loc 1 2893 14 view .LVU3584
 11101 08e6 4370     		strbhi	r3, [r0, #1]
 11102 08e8 CBE4     		b	.L974
 11103              	.LVL1257:
 11104              	.L1243:
2907:src/display.c **** 	  skip = 1;
 11105              		.loc 1 2907 4 is_stmt 1 view .LVU3585
 11106              	.LBB616:
 11107              	.LBI616:
2550:src/display.c **** 	char buf[16];
 11108              		.loc 1 2550 19 view .LVU3586
 11109              	.LBB617:
2551:src/display.c **** 	unsigned short int pc = State2.digval;
 11110              		.loc 1 2551 2 view .LVU3587
2552:src/display.c **** 	unsigned int op = getprog(pc);
 11111              		.loc 1 2552 2 view .LVU3588
2552:src/display.c **** 	unsigned int op = getprog(pc);
 11112              		.loc 1 2552 21 is_stmt 0 view .LVU3589
 11113 08ea B4F808B0 		ldrh	fp, [r4, #8]
 11114              	.LVL1258:
2553:src/display.c **** 	int n = nLIB(pc);
 11115              		.loc 1 2553 2 is_stmt 1 view .LVU3590
2558:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccCvaEE3.s 			page 321


 11116              		.loc 1 2558 27 is_stmt 0 view .LVU3591
 11117 08ee DFF870A1 		ldr	r10, .L1268+44
 11118              	.LVL1259:
2553:src/display.c **** 	int n = nLIB(pc);
 11119              		.loc 1 2553 20 view .LVU3592
 11120 08f2 5846     		mov	r0, fp
 11121 08f4 FFF7FEFF 		bl	getprog
 11122              	.LVL1260:
 11123 08f8 4FEA9B35 		lsr	r5, fp, #14
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11124              		.loc 1 2557 2 view .LVU3593
 11125 08fc 15A9     		add	r1, sp, #84
2553:src/display.c **** 	int n = nLIB(pc);
 11126              		.loc 1 2553 20 view .LVU3594
 11127 08fe 8046     		mov	r8, r0
 11128              	.LVL1261:
2554:src/display.c **** 	unsigned short int lblpc;
 11129              		.loc 1 2554 2 is_stmt 1 view .LVU3595
2555:src/display.c **** 
 11130              		.loc 1 2555 2 view .LVU3596
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11131              		.loc 1 2557 2 view .LVU3597
2558:src/display.c **** #ifndef REALBUILD
 11132              		.loc 1 2558 27 is_stmt 0 view .LVU3598
 11133 0900 05EB8505 		add	r5, r5, r5, lsl #2
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11134              		.loc 1 2557 2 view .LVU3599
 11135 0904 FFF7FEFF 		bl	prt
 11136              	.LVL1262:
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11137              		.loc 1 2557 2 view .LVU3600
 11138 0908 FFF7FEFF 		bl	set_status
 11139              	.LVL1263:
2558:src/display.c **** #ifndef REALBUILD
 11140              		.loc 1 2558 2 is_stmt 1 view .LVU3601
 11141 090c 0AEB0500 		add	r0, r10, r5
 11142 0910 3946     		mov	r1, r7
 11143 0912 FFF7FEFF 		bl	set_digits_string
 11144              	.LVL1264:
2560:src/display.c **** #endif
 11145              		.loc 1 2560 2 view .LVU3602
 11146 0916 4E4B     		ldr	r3, .L1268+28
 11147 0918 4E48     		ldr	r0, .L1268+32
 11148 091a 03EB4501 		add	r1, r3, r5, lsl #1
 11149 091e FFF7FEFF 		bl	scopy
 11150              	.LVL1265:
2563:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11151              		.loc 1 2563 2 view .LVU3603
2563:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11152              		.loc 1 2563 5 is_stmt 0 view .LVU3604
 11153 0922 18F4704F 		tst	r8, #61440
 11154 0926 40F0FF80 		bne	.L1249
 11155              	.LVL1266:
 11156              	.L1222:
2563:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11157              		.loc 1 2563 5 view .LVU3605
 11158              	.LBE617:
ARM GAS  /tmp/ccCvaEE3.s 			page 322


 11159              	.LBE616:
2973:src/display.c ****       nostk:
 11160              		.loc 1 2973 2 is_stmt 1 view .LVU3606
 11161 092a FFF7FEFF 		bl	show_stack
 11162              	.LVL1267:
2975:src/display.c **** 	if (!skip) {
 11163              		.loc 1 2975 2 view .LVU3607
 11164 092e FFF7FEFF 		bl	show_flags
 11165              	.LVL1268:
2976:src/display.c **** 	  if (State2.runmode) {
 11166              		.loc 1 2976 2 view .LVU3608
 11167 0932 96E7     		b	.L971
 11168              	.LVL1269:
 11169              	.L1242:
2904:src/display.c **** 	  skip = 1;
 11170              		.loc 1 2904 4 view .LVU3609
 11171              	.LBB620:
 11172              	.LBI620:
2448:src/display.c **** 	int i, n;
 11173              		.loc 1 2448 19 view .LVU3610
 11174              	.LBB621:
2449:src/display.c **** 	int j = SEGS_EXP_BASE;
 11175              		.loc 1 2449 2 view .LVU3611
2450:src/display.c **** 	const int status = State2.status - 3;
 11176              		.loc 1 2450 2 view .LVU3612
2451:src/display.c **** 	char buf[16], *p = buf;
 11177              		.loc 1 2451 2 view .LVU3613
2455:src/display.c **** 	  set_status("Free:");
 11178              		.loc 1 2455 5 is_stmt 0 view .LVU3614
 11179 0934 012F     		cmp	r7, #1
2451:src/display.c **** 	char buf[16], *p = buf;
 11180              		.loc 1 2451 12 view .LVU3615
 11181 0936 A7F10303 		sub	r3, r7, #3
 11182              	.LVL1270:
2452:src/display.c **** 	unsigned int pc;
 11183              		.loc 1 2452 2 is_stmt 1 view .LVU3616
2453:src/display.c **** 
 11184              		.loc 1 2453 2 view .LVU3617
2455:src/display.c **** 	  set_status("Free:");
 11185              		.loc 1 2455 2 view .LVU3618
2455:src/display.c **** 	  set_status("Free:");
 11186              		.loc 1 2455 5 is_stmt 0 view .LVU3619
 11187 093a 00F0DB80 		beq	.L1250
2463:src/display.c **** 	  /* Top line */
 11188              		.loc 1 2463 7 is_stmt 1 view .LVU3620
2463:src/display.c **** 	  /* Top line */
 11189              		.loc 1 2463 10 is_stmt 0 view .LVU3621
 11190 093e 581C     		adds	r0, r3, #1
 11191 0940 00F0B981 		beq	.L1251
 11192              	.LBB622:
2480:src/display.c **** 	  int end;
 11193              		.loc 1 2480 4 is_stmt 1 view .LVU3622
2481:src/display.c **** 	  int group = 10;
 11194              		.loc 1 2481 4 view .LVU3623
2482:src/display.c **** 	  int start = 0;
 11195              		.loc 1 2482 4 view .LVU3624
 11196              	.LVL1271:
ARM GAS  /tmp/ccCvaEE3.s 			page 323


2483:src/display.c **** 		
 11197              		.loc 1 2483 4 view .LVU3625
2485:src/display.c **** 	    base = 10 * status;
 11198              		.loc 1 2485 4 view .LVU3626
2485:src/display.c **** 	    base = 10 * status;
 11199              		.loc 1 2485 7 is_stmt 0 view .LVU3627
 11200 0944 092B     		cmp	r3, #9
 11201 0946 40F39381 		ble	.L1252
2495:src/display.c **** 	    base = regX_idx;
 11202              		.loc 1 2495 9 is_stmt 1 view .LVU3628
2495:src/display.c **** 	    base = regX_idx;
 11203              		.loc 1 2495 12 is_stmt 0 view .LVU3629
 11204 094a 0A2B     		cmp	r3, #10
 11205 094c 00F09A80 		beq	.L1253
2503:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11206              		.loc 1 2503 6 is_stmt 1 view .LVU3630
 11207              	.LVL1272:
2504:src/display.c **** 	    set_status("FL.00-.15");
 11208              		.loc 1 2504 6 view .LVU3631
2505:src/display.c **** 	  }
 11209              		.loc 1 2505 6 view .LVU3632
 11210 0950 4148     		ldr	r0, .L1268+36
 11211 0952 FFF7FEFF 		bl	set_status
 11212              	.LVL1273:
2483:src/display.c **** 		
 11213              		.loc 1 2483 8 is_stmt 0 view .LVU3633
 11214 0956 4FF0000B 		mov	fp, #0
2482:src/display.c **** 	  int start = 0;
 11215              		.loc 1 2482 8 view .LVU3634
 11216 095a 4FF00A0A 		mov	r10, #10
 11217              	.LVL1274:
2504:src/display.c **** 	    set_status("FL.00-.15");
 11218              		.loc 1 2504 10 view .LVU3635
 11219 095e 4FF07F08 		mov	r8, #127
2503:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11220              		.loc 1 2503 11 view .LVU3636
 11221 0962 7027     		movs	r7, #112
 11222              	.LVL1275:
 11223              	.L983:
2507:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11224              		.loc 1 2507 4 is_stmt 1 view .LVU3637
2507:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11225              		.loc 1 2507 6 is_stmt 0 view .LVU3638
 11226 0964 0BEBCB05 		add	r5, fp, fp, lsl #3
 11227              	.LVL1276:
2508:src/display.c **** 	  j += SEGS_PER_DIGIT;
 11228              		.loc 1 2508 4 is_stmt 1 view .LVU3639
 11229              	.LBB623:
 11230              	.LBI623:
 357:src/display.c ****   if (res) {
 11231              		.loc 1 357 14 view .LVU3640
 11232              	.LBB624:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11233              		.loc 1 358 3 view .LVU3641
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11234              		.loc 1 361 5 view .LVU3642
 11235              	.LBB625:
ARM GAS  /tmp/ccCvaEE3.s 			page 324


 11236              	.LBB626:
 365:src/display.c **** #endif
 11237              		.loc 1 365 35 is_stmt 0 view .LVU3643
 11238 0968 0BF10103 		add	r3, fp, #1
 11239              	.LBE626:
 11240              	.LBE625:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11241              		.loc 1 361 5 view .LVU3644
 11242 096c E81D     		adds	r0, r5, #7
 11243              	.LBB629:
 11244              	.LBB627:
 365:src/display.c **** #endif
 11245              		.loc 1 365 35 view .LVU3645
 11246 096e 0093     		str	r3, [sp]
 11247              	.LBE627:
 11248              	.LBE629:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11249              		.loc 1 361 5 view .LVU3646
 11250 0970 FFF7FEFF 		bl	set_dot
 11251              	.LVL1277:
 362:src/display.c ****       set_dot(posn+8);
 11252              		.loc 1 362 5 is_stmt 1 view .LVU3647
 11253              	.LBB630:
 11254              	.LBI625:
 357:src/display.c ****   if (res) {
 11255              		.loc 1 357 14 view .LVU3648
 11256              	.LBB628:
 365:src/display.c **** #endif
 11257              		.loc 1 365 5 view .LVU3649
 365:src/display.c **** #endif
 11258              		.loc 1 365 38 is_stmt 0 view .LVU3650
 11259 0974 3749     		ldr	r1, .L1268+32
 11260 0976 009B     		ldr	r3, [sp]
 11261 0978 2E22     		movs	r2, #46
 11262 097a 01F81320 		strb	r2, [r1, r3, lsl #1]
 368:src/display.c **** }
 11263              		.loc 1 368 3 is_stmt 1 view .LVU3651
 11264              	.LVL1278:
 368:src/display.c **** }
 11265              		.loc 1 368 3 is_stmt 0 view .LVU3652
 11266              	.LBE628:
 11267              	.LBE630:
 368:src/display.c **** }
 11268              		.loc 1 368 3 is_stmt 1 view .LVU3653
 368:src/display.c **** }
 11269              		.loc 1 368 3 is_stmt 0 view .LVU3654
 11270              	.LBE624:
 11271              	.LBE623:
2509:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11272              		.loc 1 2509 4 is_stmt 1 view .LVU3655
 11273 097e CBEB4A01 		rsb	r1, fp, r10, lsl #1
 11274 0982 CB19     		adds	r3, r1, r7
 11275 0984 0393     		str	r3, [sp, #12]
2510:src/display.c **** 	    int k = i + base - start;
 11276              		.loc 1 2510 30 is_stmt 0 view .LVU3656
 11277 0986 0BEB0A03 		add	r3, fp, r10
 11278 098a 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccCvaEE3.s 			page 325


 11279 098c A7EB0B03 		sub	r3, r7, fp
 11280 0990 CDE90436 		strd	r3, r6, [sp, #16]
2509:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11281              		.loc 1 2509 6 view .LVU3657
 11282 0994 0935     		adds	r5, r5, #9
 11283              	.LVL1279:
2510:src/display.c **** 	    int k = i + base - start;
 11284              		.loc 1 2510 4 is_stmt 1 view .LVU3658
2510:src/display.c **** 	    int k = i + base - start;
 11285              		.loc 1 2510 20 view .LVU3659
 11286              	.LBB631:
 11287              	.LBB632:
 11288              	.LBB633:
 11289              	.LBB634:
 11290              	.LBB635:
 365:src/display.c **** #endif
 11291              		.loc 1 365 38 is_stmt 0 view .LVU3660
 11292 0996 0192     		str	r2, [sp, #4]
 11293 0998 BA44     		add	r10, r10, r7
 11294              	.LVL1280:
 365:src/display.c **** #endif
 11295              		.loc 1 365 38 view .LVU3661
 11296 099a 1CE0     		b	.L987
 11297              	.LVL1281:
 11298              	.L985:
 365:src/display.c **** #endif
 11299              		.loc 1 365 38 view .LVU3662
 11300              	.LBE635:
 11301              	.LBE634:
 11302              	.LBE633:
 11303              	.LBE632:
2520:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 11304              		.loc 1 2520 6 is_stmt 1 view .LVU3663
 11305 099c 3146     		mov	r1, r6
 11306 099e 2846     		mov	r0, r5
 11307 09a0 FFF7FEFF 		bl	set_dig
 11308              	.LVL1282:
2521:src/display.c **** 	    j += SEGS_PER_DIGIT;
 11309              		.loc 1 2521 6 view .LVU3664
 11310              	.LBB642:
 11311              	.LBI632:
 357:src/display.c ****   if (res) {
 11312              		.loc 1 357 14 view .LVU3665
 11313              	.LBB640:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11314              		.loc 1 358 3 view .LVU3666
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11315              		.loc 1 361 5 view .LVU3667
 11316 09a4 E81D     		adds	r0, r5, #7
 11317 09a6 FFF7FEFF 		bl	set_dot
 11318              	.LVL1283:
 362:src/display.c ****       set_dot(posn+8);
 11319              		.loc 1 362 5 view .LVU3668
 11320              	.LBB638:
 11321              	.LBI634:
 357:src/display.c ****   if (res) {
 11322              		.loc 1 357 14 view .LVU3669
ARM GAS  /tmp/ccCvaEE3.s 			page 326


 11323              	.LBB636:
 365:src/display.c **** #endif
 11324              		.loc 1 365 5 view .LVU3670
 365:src/display.c **** #endif
 11325              		.loc 1 365 30 is_stmt 0 view .LVU3671
 11326 09aa 2C4B     		ldr	r3, .L1268+40
 365:src/display.c **** #endif
 11327              		.loc 1 365 38 view .LVU3672
 11328 09ac 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11329              		.loc 1 365 30 view .LVU3673
 11330 09ae A3FB0523 		umull	r2, r3, r3, r5
 11331 09b2 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11332              		.loc 1 365 38 view .LVU3674
 11333 09b4 274A     		ldr	r2, .L1268+32
 365:src/display.c **** #endif
 11334              		.loc 1 365 35 view .LVU3675
 11335 09b6 0133     		adds	r3, r3, #1
 11336              	.LBE636:
 11337              	.LBE638:
 11338              	.LBE640:
 11339              	.LBE642:
2523:src/display.c **** 	      set_dig(j, 8);
 11340              		.loc 1 2523 9 view .LVU3676
 11341 09b8 BBF1040F 		cmp	fp, #4
 11342              	.LBB643:
 11343              	.LBB641:
 11344              	.LBB639:
 11345              	.LBB637:
 365:src/display.c **** #endif
 11346              		.loc 1 365 38 view .LVU3677
 11347 09bc 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11348              		.loc 1 368 3 is_stmt 1 view .LVU3678
 11349              	.LVL1284:
 368:src/display.c **** }
 11350              		.loc 1 368 3 is_stmt 0 view .LVU3679
 11351              	.LBE637:
 11352              	.LBE639:
 368:src/display.c **** }
 11353              		.loc 1 368 3 is_stmt 1 view .LVU3680
 368:src/display.c **** }
 11354              		.loc 1 368 3 is_stmt 0 view .LVU3681
 11355              	.LBE641:
 11356              	.LBE643:
2522:src/display.c **** 	    if (i == 4) {
 11357              		.loc 1 2522 6 is_stmt 1 view .LVU3682
2523:src/display.c **** 	      set_dig(j, 8);
 11358              		.loc 1 2523 6 view .LVU3683
2523:src/display.c **** 	      set_dig(j, 8);
 11359              		.loc 1 2523 9 is_stmt 0 view .LVU3684
 11360 09c0 22D0     		beq	.L1254
2522:src/display.c **** 	    if (i == 4) {
 11361              		.loc 1 2522 8 view .LVU3685
 11362 09c2 3D46     		mov	r5, r7
 11363              	.LVL1285:
ARM GAS  /tmp/ccCvaEE3.s 			page 327


 11364              	.L986:
2522:src/display.c **** 	    if (i == 4) {
 11365              		.loc 1 2522 8 view .LVU3686
 11366              	.LBE631:
2510:src/display.c **** 	    int k = i + base - start;
 11367              		.loc 1 2510 39 is_stmt 1 view .LVU3687
2510:src/display.c **** 	    int k = i + base - start;
 11368              		.loc 1 2510 40 is_stmt 0 view .LVU3688
 11369 09c4 009B     		ldr	r3, [sp]
2510:src/display.c **** 	    int k = i + base - start;
 11370              		.loc 1 2510 4 view .LVU3689
 11371 09c6 0299     		ldr	r1, [sp, #8]
 11372 09c8 8B42     		cmp	r3, r1
 11373 09ca 0AF1010A 		add	r10, r10, #1
2510:src/display.c **** 	    int k = i + base - start;
 11374              		.loc 1 2510 40 view .LVU3690
 11375 09ce 9B46     		mov	fp, r3
 11376              	.LVL1286:
2510:src/display.c **** 	    int k = i + base - start;
 11377              		.loc 1 2510 20 is_stmt 1 view .LVU3691
2510:src/display.c **** 	    int k = i + base - start;
 11378              		.loc 1 2510 4 is_stmt 0 view .LVU3692
 11379 09d0 63D0     		beq	.L1207
2510:src/display.c **** 	    int k = i + base - start;
 11380              		.loc 1 2510 4 view .LVU3693
 11381 09d2 0133     		adds	r3, r3, #1
 11382              	.LVL1287:
2510:src/display.c **** 	    int k = i + base - start;
 11383              		.loc 1 2510 4 view .LVU3694
 11384 09d4 0093     		str	r3, [sp]
 11385              	.LVL1288:
 11386              	.L987:
 11387              	.LBB652:
2511:src/display.c **** 	    int l = get_user_flag(k);
 11388              		.loc 1 2511 6 is_stmt 1 view .LVU3695
2512:src/display.c **** 	    k += group;
 11389              		.loc 1 2512 6 view .LVU3696
2512:src/display.c **** 	    k += group;
 11390              		.loc 1 2512 14 is_stmt 0 view .LVU3697
 11391 09d6 049B     		ldr	r3, [sp, #16]
 11392 09d8 03EB0B00 		add	r0, r3, fp
 11393 09dc FFF7FEFF 		bl	get_user_flag
 11394              	.LVL1289:
2514:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11395              		.loc 1 2514 9 view .LVU3698
 11396 09e0 C245     		cmp	r10, r8
2512:src/display.c **** 	    k += group;
 11397              		.loc 1 2512 14 view .LVU3699
 11398 09e2 0646     		mov	r6, r0
 11399              	.LVL1290:
2513:src/display.c **** 	    if (end >= k) {
 11400              		.loc 1 2513 6 is_stmt 1 view .LVU3700
2514:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11401              		.loc 1 2514 6 view .LVU3701
2522:src/display.c **** 	    if (i == 4) {
 11402              		.loc 1 2522 8 is_stmt 0 view .LVU3702
 11403 09e4 05F10907 		add	r7, r5, #9
ARM GAS  /tmp/ccCvaEE3.s 			page 328


2514:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11404              		.loc 1 2514 9 view .LVU3703
 11405 09e8 D8DC     		bgt	.L985
2515:src/display.c **** 	      k += group;
 11406              		.loc 1 2515 8 is_stmt 1 view .LVU3704
2515:src/display.c **** 	      k += group;
 11407              		.loc 1 2515 14 is_stmt 0 view .LVU3705
 11408 09ea 5046     		mov	r0, r10
 11409              	.LVL1291:
2515:src/display.c **** 	      k += group;
 11410              		.loc 1 2515 14 view .LVU3706
 11411 09ec FFF7FEFF 		bl	get_user_flag
 11412              	.LVL1292:
 11413 09f0 039B     		ldr	r3, [sp, #12]
 11414 09f2 5B44     		add	r3, r3, fp
2517:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11415              		.loc 1 2517 11 view .LVU3707
 11416 09f4 9845     		cmp	r8, r3
2515:src/display.c **** 	      k += group;
 11417              		.loc 1 2515 10 view .LVU3708
 11418 09f6 46EA4006 		orr	r6, r6, r0, lsl #1
 11419              	.LVL1293:
2516:src/display.c **** 	      if (end >= k)
 11420              		.loc 1 2516 8 is_stmt 1 view .LVU3709
2517:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11421              		.loc 1 2517 8 view .LVU3710
2517:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11422              		.loc 1 2517 11 is_stmt 0 view .LVU3711
 11423 09fa CFDB     		blt	.L985
2518:src/display.c **** 	    }
 11424              		.loc 1 2518 3 is_stmt 1 view .LVU3712
2518:src/display.c **** 	    }
 11425              		.loc 1 2518 9 is_stmt 0 view .LVU3713
 11426 09fc 1846     		mov	r0, r3
 11427 09fe FFF7FEFF 		bl	get_user_flag
 11428              	.LVL1294:
2518:src/display.c **** 	    }
 11429              		.loc 1 2518 5 view .LVU3714
 11430 0a02 46EA8006 		orr	r6, r6, r0, lsl #2
 11431              	.LVL1295:
2518:src/display.c **** 	    }
 11432              		.loc 1 2518 5 view .LVU3715
 11433 0a06 C9E7     		b	.L985
 11434              	.LVL1296:
 11435              	.L1254:
2524:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11436              		.loc 1 2524 8 is_stmt 1 view .LVU3716
 11437 0a08 0821     		movs	r1, #8
 11438 0a0a 3846     		mov	r0, r7
 11439 0a0c FFF7FEFF 		bl	set_dig
 11440              	.LVL1297:
2525:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11441              		.loc 1 2525 8 view .LVU3717
 11442              	.LBB644:
 11443              	.LBI644:
 357:src/display.c ****   if (res) {
 11444              		.loc 1 357 14 view .LVU3718
ARM GAS  /tmp/ccCvaEE3.s 			page 329


 11445              	.LBB645:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11446              		.loc 1 358 3 view .LVU3719
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11447              		.loc 1 361 5 view .LVU3720
 11448 0a10 05F11000 		add	r0, r5, #16
 11449 0a14 FFF7FEFF 		bl	set_dot
 11450              	.LVL1298:
 362:src/display.c ****       set_dot(posn+8);
 11451              		.loc 1 362 5 view .LVU3721
 11452              	.LBB646:
 11453              	.LBI646:
 357:src/display.c ****   if (res) {
 11454              		.loc 1 357 14 view .LVU3722
 11455              	.LBB647:
 365:src/display.c **** #endif
 11456              		.loc 1 365 5 view .LVU3723
 365:src/display.c **** #endif
 11457              		.loc 1 365 30 is_stmt 0 view .LVU3724
 11458 0a18 104B     		ldr	r3, .L1268+40
 365:src/display.c **** #endif
 11459              		.loc 1 365 38 view .LVU3725
 11460 0a1a 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11461              		.loc 1 365 30 view .LVU3726
 11462 0a1c A3FB0723 		umull	r2, r3, r3, r7
 11463 0a20 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11464              		.loc 1 365 38 view .LVU3727
 11465 0a22 0C4A     		ldr	r2, .L1268+32
 365:src/display.c **** #endif
 11466              		.loc 1 365 35 view .LVU3728
 11467 0a24 0133     		adds	r3, r3, #1
 11468              	.LBE647:
 11469              	.LBE646:
 11470              	.LBE645:
 11471              	.LBE644:
2526:src/display.c **** 	    }
 11472              		.loc 1 2526 10 view .LVU3729
 11473 0a26 1235     		adds	r5, r5, #18
 11474              	.LBB651:
 11475              	.LBB650:
 11476              	.LBB649:
 11477              	.LBB648:
 365:src/display.c **** #endif
 11478              		.loc 1 365 38 view .LVU3730
 11479 0a28 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11480              		.loc 1 368 3 is_stmt 1 view .LVU3731
 11481              	.LVL1299:
 368:src/display.c **** }
 11482              		.loc 1 368 3 is_stmt 0 view .LVU3732
 11483              	.LBE648:
 11484              	.LBE649:
 368:src/display.c **** }
 11485              		.loc 1 368 3 is_stmt 1 view .LVU3733
 368:src/display.c **** }
ARM GAS  /tmp/ccCvaEE3.s 			page 330


 11486              		.loc 1 368 3 is_stmt 0 view .LVU3734
 11487              	.LBE650:
 11488              	.LBE651:
2526:src/display.c **** 	    }
 11489              		.loc 1 2526 8 is_stmt 1 view .LVU3735
2526:src/display.c **** 	    }
 11490              		.loc 1 2526 8 is_stmt 0 view .LVU3736
 11491 0a2c CAE7     		b	.L986
 11492              	.LVL1300:
 11493              	.L1087:
2526:src/display.c **** 	    }
 11494              		.loc 1 2526 8 view .LVU3737
 11495              	.LBE652:
 11496              	.LBE622:
 11497              	.LBE621:
 11498              	.LBE620:
 11499              	.LBB658:
 11500              	.LBB588:
 11501              	.LBB578:
1375:src/display.c **** 	    if (gotdot <= j) {
 11502              		.loc 1 1375 8 view .LVU3738
 11503 0a2e 4FF0090B 		mov	fp, #9
 11504 0a32 FAE5     		b	.L1047
 11505              	.L1269:
 11506              		.align	2
 11507              	.L1268:
 11508 0a34 00000000 		.word	DispMsg
 11509 0a38 00000000 		.word	DispPlot
 11510 0a3c 00000000 		.word	.LANCHOR1
 11511 0a40 00000000 		.word	main_ram
 11512 0a44 3C000000 		.word	.LC29
 11513 0a48 00000000 		.word	ShowRegister
 11514 0a4c 00000000 		.word	multicmds
 11515 0a50 00000000 		.word	.LANCHOR23
 11516 0a54 00000000 		.word	LastDisplayedNumber
 11517 0a58 8C000000 		.word	.LC40
 11518 0a5c 398EE338 		.word	954437177
 11519 0a60 00000000 		.word	.LANCHOR22
 11520              	.LVL1301:
 11521              	.L1009:
1375:src/display.c **** 	    if (gotdot <= j) {
 11522              		.loc 1 1375 8 view .LVU3739
 11523              	.LBE578:
 11524              	.LBE588:
 11525              	.LBE658:
2922:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11526              		.loc 1 2922 11 is_stmt 1 view .LVU3740
2922:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11527              		.loc 1 2922 15 is_stmt 0 view .LVU3741
 11528 0a64 C14A     		ldr	r2, .L1270
 11529 0a66 0092     		str	r2, [sp]
 11530 0a68 B2F90020 		ldrsh	r2, [r2]
2922:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11531              		.loc 1 2922 14 view .LVU3742
 11532 0a6c 002A     		cmp	r2, #0
 11533 0a6e 40F0C480 		bne	.L1255
2924:src/display.c **** 	    bp = scopy(buf, Alpha);
ARM GAS  /tmp/ccCvaEE3.s 			page 331


 11534              		.loc 1 2924 11 is_stmt 1 view .LVU3743
2924:src/display.c **** 	    bp = scopy(buf, Alpha);
 11535              		.loc 1 2924 14 is_stmt 0 view .LVU3744
 11536 0a72 0807     		lsls	r0, r1, #28
 11537 0a74 6FD4     		bmi	.L1256
 11538              	.LVL1302:
2973:src/display.c ****       nostk:
 11539              		.loc 1 2973 2 is_stmt 1 view .LVU3745
 11540 0a76 FFF7FEFF 		bl	show_stack
 11541              	.LVL1303:
2975:src/display.c **** 	if (!skip) {
 11542              		.loc 1 2975 2 view .LVU3746
2956:src/display.c **** 	  }
 11543              		.loc 1 2956 12 is_stmt 0 view .LVU3747
 11544 0a7a 0126     		movs	r6, #1
2975:src/display.c **** 	if (!skip) {
 11545              		.loc 1 2975 2 view .LVU3748
 11546 0a7c FFF7FEFF 		bl	show_flags
 11547              	.LVL1304:
2976:src/display.c **** 	  if (State2.runmode) {
 11548              		.loc 1 2976 2 is_stmt 1 view .LVU3749
 11549 0a80 FFF701BB 		b	.L938
 11550              	.LVL1305:
 11551              	.L1253:
 11552              	.LBB659:
 11553              	.LBB655:
 11554              	.LBB653:
2496:src/display.c **** 	    end = regK_idx;
 11555              		.loc 1 2496 6 view .LVU3750
2497:src/display.c **** 	    start = 3;
 11556              		.loc 1 2497 6 view .LVU3751
2498:src/display.c **** 	    group = 4;
 11557              		.loc 1 2498 6 view .LVU3752
2499:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11558              		.loc 1 2499 6 view .LVU3753
2500:src/display.c **** 	  }
 11559              		.loc 1 2500 6 view .LVU3754
 11560 0a84 BA48     		ldr	r0, .L1270+4
 11561 0a86 FFF7FEFF 		bl	set_status
 11562              	.LVL1306:
2498:src/display.c **** 	    group = 4;
 11563              		.loc 1 2498 12 is_stmt 0 view .LVU3755
 11564 0a8a 4FF0030B 		mov	fp, #3
2499:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11565              		.loc 1 2499 12 view .LVU3756
 11566 0a8e 4FF0040A 		mov	r10, #4
 11567              	.LVL1307:
2497:src/display.c **** 	    start = 3;
 11568              		.loc 1 2497 10 view .LVU3757
 11569 0a92 4FF06F08 		mov	r8, #111
2496:src/display.c **** 	    end = regK_idx;
 11570              		.loc 1 2496 11 view .LVU3758
 11571 0a96 6427     		movs	r7, #100
 11572              	.LVL1308:
2496:src/display.c **** 	    end = regK_idx;
 11573              		.loc 1 2496 11 view .LVU3759
 11574 0a98 64E7     		b	.L983
ARM GAS  /tmp/ccCvaEE3.s 			page 332


 11575              	.LVL1309:
 11576              	.L1207:
2496:src/display.c **** 	    end = regK_idx;
 11577              		.loc 1 2496 11 view .LVU3760
 11578 0a9a 059E     		ldr	r6, [sp, #20]
 11579              	.LVL1310:
 11580              	.L978:
2496:src/display.c **** 	    end = regK_idx;
 11581              		.loc 1 2496 11 view .LVU3761
 11582              	.LBE653:
2531:src/display.c **** 	pc = state_pc();
 11583              		.loc 1 2531 2 is_stmt 1 view .LVU3762
2532:src/display.c **** 	if (isXROM(pc))
 11584              		.loc 1 2532 2 view .LVU3763
2532:src/display.c **** 	if (isXROM(pc))
 11585              		.loc 1 2532 7 is_stmt 0 view .LVU3764
 11586 0a9c B54B     		ldr	r3, .L1270+8
 11587 0a9e 1B68     		ldr	r3, [r3]
2532:src/display.c **** 	if (isXROM(pc))
 11588              		.loc 1 2532 5 view .LVU3765
 11589 0aa0 B3F8E077 		ldrh	r7, [r3, #2016]
 11590              	.LVL1311:
2533:src/display.c **** 	  pc = 1;
 11591              		.loc 1 2533 2 is_stmt 1 view .LVU3766
2533:src/display.c **** 	  pc = 1;
 11592              		.loc 1 2533 6 is_stmt 0 view .LVU3767
 11593 0aa4 BB0B     		lsrs	r3, r7, #14
2534:src/display.c **** 	for (n=i=0; i<4; i++) {
 11594              		.loc 1 2534 7 view .LVU3768
 11595 0aa6 032B     		cmp	r3, #3
 11596 0aa8 08BF     		it	eq
 11597 0aaa 0127     		moveq	r7, #1
 11598              	.LVL1312:
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11599              		.loc 1 2535 2 is_stmt 1 view .LVU3769
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11600              		.loc 1 2535 14 view .LVU3770
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11601              		.loc 1 2535 8 is_stmt 0 view .LVU3771
 11602 0aac 4FF0000A 		mov	r10, #0
 11603 0ab0 6425     		movs	r5, #100
2531:src/display.c **** 	pc = state_pc();
 11604              		.loc 1 2531 4 view .LVU3772
 11605 0ab2 4FF06C08 		mov	r8, #108
 11606              	.LVL1313:
 11607              	.L991:
2536:src/display.c **** 	    if (++n == 4) {
 11608              		.loc 1 2536 4 is_stmt 1 view .LVU3773
2536:src/display.c **** 	    if (++n == 4) {
 11609              		.loc 1 2536 8 is_stmt 0 view .LVU3774
 11610 0ab6 0222     		movs	r2, #2
 11611 0ab8 2946     		mov	r1, r5
 11612 0aba 3846     		mov	r0, r7
 11613 0abc FFF7FEFF 		bl	find_label_from
 11614              	.LVL1314:
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11615              		.loc 1 2537 6 is_stmt 1 view .LVU3775
ARM GAS  /tmp/ccCvaEE3.s 			page 333


2536:src/display.c **** 	    if (++n == 4) {
 11616              		.loc 1 2536 7 is_stmt 0 view .LVU3776
 11617 0ac0 58B1     		cbz	r0, .L989
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11618              		.loc 1 2537 9 view .LVU3777
 11619 0ac2 0AF1010A 		add	r10, r10, #1
 11620              	.LVL1315:
2541:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11621              		.loc 1 2541 8 is_stmt 1 view .LVU3778
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11622              		.loc 1 2537 9 is_stmt 0 view .LVU3779
 11623 0ac6 BAF1040F 		cmp	r10, #4
2541:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11624              		.loc 1 2541 8 view .LVU3780
 11625 0aca A5F12301 		sub	r1, r5, #35
 11626 0ace 4046     		mov	r0, r8
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11627              		.loc 1 2537 9 view .LVU3781
 11628 0ad0 07D0     		beq	.L1257
2541:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11629              		.loc 1 2541 8 view .LVU3782
 11630 0ad2 FFF7FEFF 		bl	set_dig
 11631              	.LVL1316:
2542:src/display.c **** 	    }
 11632              		.loc 1 2542 8 is_stmt 1 view .LVU3783
2542:src/display.c **** 	    }
 11633              		.loc 1 2542 10 is_stmt 0 view .LVU3784
 11634 0ad6 08F10708 		add	r8, r8, #7
 11635              	.LVL1317:
 11636              	.L989:
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11637              		.loc 1 2535 19 is_stmt 1 view .LVU3785
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11638              		.loc 1 2535 14 view .LVU3786
 11639 0ada 0135     		adds	r5, r5, #1
 11640              	.LVL1318:
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11641              		.loc 1 2535 2 is_stmt 0 view .LVU3787
 11642 0adc 682D     		cmp	r5, #104
 11643 0ade EAD1     		bne	.L991
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11644              		.loc 1 2535 2 view .LVU3788
 11645 0ae0 23E7     		b	.L1222
 11646              	.LVL1319:
 11647              	.L1257:
2538:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11648              		.loc 1 2538 8 is_stmt 1 view .LVU3789
 11649 0ae2 4C21     		movs	r1, #76
 11650 0ae4 7320     		movs	r0, #115
 11651              	.LVL1320:
2538:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11652              		.loc 1 2538 8 is_stmt 0 view .LVU3790
 11653 0ae6 FFF7FEFF 		bl	set_dig
 11654              	.LVL1321:
2539:src/display.c **** 	    } else {
 11655              		.loc 1 2539 8 is_stmt 1 view .LVU3791
 11656 0aea 4C21     		movs	r1, #76
ARM GAS  /tmp/ccCvaEE3.s 			page 334


 11657 0aec 7A20     		movs	r0, #122
 11658 0aee FFF7FEFF 		bl	set_dig
 11659              	.LVL1322:
 11660 0af2 F2E7     		b	.L989
 11661              	.LVL1323:
 11662              	.L1250:
2456:src/display.c **** 	  p = num_arg(buf, free_mem());
 11663              		.loc 1 2456 4 view .LVU3792
 11664 0af4 A048     		ldr	r0, .L1270+12
 11665 0af6 FFF7FEFF 		bl	set_status
 11666              	.LVL1324:
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 11667              		.loc 1 2457 4 view .LVU3793
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 11668              		.loc 1 2457 21 is_stmt 0 view .LVU3794
 11669 0afa FFF7FEFF 		bl	free_mem
 11670              	.LVL1325:
 11671 0afe 0146     		mov	r1, r0
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 11672              		.loc 1 2457 8 view .LVU3795
 11673 0b00 15A8     		add	r0, sp, #84
 11674              	.LVL1326:
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 11675              		.loc 1 2457 8 view .LVU3796
 11676 0b02 FFF7FEFF 		bl	num_arg
 11677              	.LVL1327:
2458:src/display.c **** 	  p = num_arg(p, free_flash());
 11678              		.loc 1 2458 4 is_stmt 1 view .LVU3797
2458:src/display.c **** 	  p = num_arg(p, free_flash());
 11679              		.loc 1 2458 8 is_stmt 0 view .LVU3798
 11680 0b06 9D49     		ldr	r1, .L1270+16
 11681 0b08 FFF7FEFF 		bl	scopy
 11682              	.LVL1328:
2458:src/display.c **** 	  p = num_arg(p, free_flash());
 11683              		.loc 1 2458 8 view .LVU3799
 11684 0b0c 0546     		mov	r5, r0
 11685              	.LVL1329:
2459:src/display.c **** 	  *p = '\0';
 11686              		.loc 1 2459 4 is_stmt 1 view .LVU3800
2459:src/display.c **** 	  *p = '\0';
 11687              		.loc 1 2459 19 is_stmt 0 view .LVU3801
 11688 0b0e FFF7FEFF 		bl	free_flash
 11689              	.LVL1330:
2459:src/display.c **** 	  *p = '\0';
 11690              		.loc 1 2459 19 view .LVU3802
 11691 0b12 0146     		mov	r1, r0
2459:src/display.c **** 	  *p = '\0';
 11692              		.loc 1 2459 8 view .LVU3803
 11693 0b14 2846     		mov	r0, r5
 11694 0b16 FFF7FEFF 		bl	num_arg
 11695              	.LVL1331:
 11696 0b1a 0346     		mov	r3, r0
 11697              	.LVL1332:
2460:src/display.c **** 	  set_digits_string(buf, 0);
 11698              		.loc 1 2460 4 is_stmt 1 view .LVU3804
2460:src/display.c **** 	  set_digits_string(buf, 0);
 11699              		.loc 1 2460 7 is_stmt 0 view .LVU3805
ARM GAS  /tmp/ccCvaEE3.s 			page 335


 11700 0b1c 0021     		movs	r1, #0
2461:src/display.c **** 	}
 11701              		.loc 1 2461 4 view .LVU3806
 11702 0b1e 15A8     		add	r0, sp, #84
 11703              	.LVL1333:
2460:src/display.c **** 	  set_digits_string(buf, 0);
 11704              		.loc 1 2460 7 view .LVU3807
 11705 0b20 1970     		strb	r1, [r3]
2461:src/display.c **** 	}
 11706              		.loc 1 2461 4 is_stmt 1 view .LVU3808
 11707 0b22 FFF7FEFF 		bl	set_digits_string
 11708              	.LVL1334:
2461:src/display.c **** 	}
 11709              		.loc 1 2461 4 is_stmt 0 view .LVU3809
 11710 0b26 B9E7     		b	.L978
 11711              	.LVL1335:
 11712              	.L1249:
2461:src/display.c **** 	}
 11713              		.loc 1 2461 4 view .LVU3810
 11714              	.LBE655:
 11715              	.LBE659:
 11716              	.LBB660:
 11717              	.LBB618:
2564:src/display.c **** 	  if (lblpc != pc) {
 11718              		.loc 1 2564 4 is_stmt 1 view .LVU3811
2564:src/display.c **** 	  if (lblpc != pc) {
 11719              		.loc 1 2564 12 is_stmt 0 view .LVU3812
 11720 0b28 4046     		mov	r0, r8
 11721 0b2a 3946     		mov	r1, r7
 11722 0b2c FFF7FEFF 		bl	findmultilbl
 11723              	.LVL1336:
2564:src/display.c **** 	  if (lblpc != pc) {
 11724              		.loc 1 2564 10 view .LVU3813
 11725 0b30 85B2     		uxth	r5, r0
 11726              	.LVL1337:
2565:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11727              		.loc 1 2565 4 is_stmt 1 view .LVU3814
2565:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11728              		.loc 1 2565 7 is_stmt 0 view .LVU3815
 11729 0b32 AB45     		cmp	fp, r5
2564:src/display.c **** 	  if (lblpc != pc) {
 11730              		.loc 1 2564 12 view .LVU3816
 11731 0b34 8046     		mov	r8, r0
 11732              	.LVL1338:
2565:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11733              		.loc 1 2565 7 view .LVU3817
 11734 0b36 3FF4F8AE 		beq	.L1222
2566:src/display.c **** 	    n = nLIB(lblpc);
 11735              		.loc 1 2566 6 is_stmt 1 view .LVU3818
 11736 0b3a 9148     		ldr	r0, .L1270+20
 11737 0b3c 3F21     		movs	r1, #63
 11738 0b3e FFF7FEFF 		bl	set_digits_string
 11739              	.LVL1339:
2567:src/display.c **** 	    if (n == REGION_RAM)
 11740              		.loc 1 2567 6 view .LVU3819
2568:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11741              		.loc 1 2568 6 view .LVU3820
ARM GAS  /tmp/ccCvaEE3.s 			page 336


2568:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11742              		.loc 1 2568 9 is_stmt 0 view .LVU3821
 11743 0b42 AD0B     		lsrs	r5, r5, #14
 11744              	.LVL1340:
2568:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11745              		.loc 1 2568 9 view .LVU3822
 11746 0b44 40F08680 		bne	.L996
2569:src/display.c **** 	    else {
 11747              		.loc 1 2569 8 is_stmt 1 view .LVU3823
 11748 0b48 2A46     		mov	r2, r5
 11749 0b4a 1FFA88F0 		uxth	r0, r8
 11750 0b4e 0121     		movs	r1, #1
 11751 0b50 FFF7FEFF 		bl	set_exp
 11752              	.LVL1341:
 11753 0b54 E9E6     		b	.L1222
 11754              	.LVL1342:
 11755              	.L1256:
2569:src/display.c **** 	    else {
 11756              		.loc 1 2569 8 is_stmt 0 view .LVU3824
 11757              	.LBE618:
 11758              	.LBE660:
2925:src/display.c **** 	    j = State2.alpha_pos;
 11759              		.loc 1 2925 6 is_stmt 1 view .LVU3825
2925:src/display.c **** 	    j = State2.alpha_pos;
 11760              		.loc 1 2925 22 is_stmt 0 view .LVU3826
 11761 0b56 874B     		ldr	r3, .L1270+8
 11762 0b58 0192     		str	r2, [sp, #4]
 11763 0b5a 1968     		ldr	r1, [r3]
2925:src/display.c **** 	    j = State2.alpha_pos;
 11764              		.loc 1 2925 11 view .LVU3827
 11765 0b5c 1EA8     		add	r0, sp, #120
 11766              	.LVL1343:
2925:src/display.c **** 	    j = State2.alpha_pos;
 11767              		.loc 1 2925 11 view .LVU3828
 11768 0b5e 01F5F661 		add	r1, r1, #1968
 11769 0b62 FFF7FEFF 		bl	scopy
 11770              	.LVL1344:
2926:src/display.c **** 	    if (j != 0) {
 11771              		.loc 1 2926 16 view .LVU3829
 11772 0b66 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11773              	.LVL1345:
2926:src/display.c **** 	    if (j != 0) {
 11774              		.loc 1 2926 6 is_stmt 1 view .LVU3830
2927:src/display.c **** 	      i = slen(buf);
 11775              		.loc 1 2927 6 view .LVU3831
2927:src/display.c **** 	      i = slen(buf);
 11776              		.loc 1 2927 9 is_stmt 0 view .LVU3832
 11777 0b68 23BB     		cbnz	r3, .L1258
2940:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11778              		.loc 1 2940 8 is_stmt 1 view .LVU3833
2940:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11779              		.loc 1 2940 11 is_stmt 0 view .LVU3834
 11780 0b6a 3DB1     		cbz	r5, .L1020
2940:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11781              		.loc 1 2940 31 discriminator 1 view .LVU3835
 11782 0b6c BBF1000F 		cmp	fp, #0
 11783 0b70 04D1     		bne	.L1020
ARM GAS  /tmp/ccCvaEE3.s 			page 337


2941:src/display.c **** 		*bp++ = '\0';
 11784              		.loc 1 2941 3 is_stmt 1 view .LVU3836
 11785              	.LVL1346:
2941:src/display.c **** 		*bp++ = '\0';
 11786              		.loc 1 2941 23 is_stmt 0 view .LVU3837
 11787 0b72 05F11003 		add	r3, r5, #16
 11788              	.LVL1347:
2942:src/display.c **** 	      }
 11789              		.loc 1 2942 9 view .LVU3838
 11790 0b76 0022     		movs	r2, #0
2941:src/display.c **** 		*bp++ = '\0';
 11791              		.loc 1 2941 9 view .LVU3839
 11792 0b78 0370     		strb	r3, [r0]
 11793              	.LVL1348:
2942:src/display.c **** 	      }
 11794              		.loc 1 2942 3 is_stmt 1 view .LVU3840
2942:src/display.c **** 	      }
 11795              		.loc 1 2942 9 is_stmt 0 view .LVU3841
 11796 0b7a 4270     		strb	r2, [r0, #1]
 11797              	.LVL1349:
 11798              	.L1020:
2944:src/display.c **** 	    }
 11799              		.loc 1 2944 8 is_stmt 1 view .LVU3842
 11800 0b7c 1EA8     		add	r0, sp, #120
 11801 0b7e FFF7FEFF 		bl	set_status_right
 11802              	.LVL1350:
 11803              	.L1019:
2946:src/display.c **** 	      bp = buf;
 11804              		.loc 1 2946 6 view .LVU3843
2946:src/display.c **** 	      bp = buf;
 11805              		.loc 1 2946 9 is_stmt 0 view .LVU3844
 11806 0b82 85B3     		cbz	r5, .L1011
2946:src/display.c **** 	      bp = buf;
 11807              		.loc 1 2946 27 discriminator 1 view .LVU3845
 11808 0b84 BBF1000F 		cmp	fp, #0
 11809 0b88 2DD0     		beq	.L1011
2947:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11810              		.loc 1 2947 8 is_stmt 1 view .LVU3846
 11811              	.LVL1351:
2948:src/display.c **** 	      *bp++ = '\0';
 11812              		.loc 1 2948 8 view .LVU3847
 11813              	.LBB661:
 11814              	.LBB662:
3640:src/display.c **** 	if (State2.runmode) {
 11815              		.loc 1 3640 5 is_stmt 0 view .LVU3848
 11816 0b8a B9F90030 		ldrsh	r3, [r9]
 11817              	.LBE662:
 11818              	.LBE661:
2948:src/display.c **** 	      *bp++ = '\0';
 11819              		.loc 1 2948 28 view .LVU3849
 11820 0b8e 1035     		adds	r5, r5, #16
2949:src/display.c **** 	      set_status_top(buf);
 11821              		.loc 1 2949 14 view .LVU3850
 11822 0b90 0022     		movs	r2, #0
2948:src/display.c **** 	      *bp++ = '\0';
 11823              		.loc 1 2948 14 view .LVU3851
 11824 0b92 8DF87850 		strb	r5, [sp, #120]
ARM GAS  /tmp/ccCvaEE3.s 			page 338


2949:src/display.c **** 	      set_status_top(buf);
 11825              		.loc 1 2949 8 is_stmt 1 view .LVU3852
 11826              	.LVL1352:
2949:src/display.c **** 	      set_status_top(buf);
 11827              		.loc 1 2949 14 is_stmt 0 view .LVU3853
 11828 0b96 8DF87920 		strb	r2, [sp, #121]
2950:src/display.c **** 	      no_status_top = 1;
 11829              		.loc 1 2950 8 is_stmt 1 view .LVU3854
 11830              	.LVL1353:
 11831              	.LBB664:
 11832              	.LBI661:
3639:src/display.c **** 	if (no_status_top) return;
 11833              		.loc 1 3639 19 view .LVU3855
 11834              	.LBB663:
3640:src/display.c **** 	if (State2.runmode) {
 11835              		.loc 1 3640 2 view .LVU3856
3640:src/display.c **** 	if (State2.runmode) {
 11836              		.loc 1 3640 5 is_stmt 0 view .LVU3857
 11837 0b9a 13B9     		cbnz	r3, .L1021
 11838 0b9c 1EA8     		add	r0, sp, #120
 11839              	.LVL1354:
3640:src/display.c **** 	if (State2.runmode) {
 11840              		.loc 1 3640 5 view .LVU3858
 11841 0b9e FFF7FEFF 		bl	set_status_top.part.0
 11842              	.LVL1355:
 11843              	.L1021:
3640:src/display.c **** 	if (State2.runmode) {
 11844              		.loc 1 3640 5 view .LVU3859
 11845              	.LBE663:
 11846              	.LBE664:
2951:src/display.c **** 	      //annuc = 1;
 11847              		.loc 1 2951 8 is_stmt 1 view .LVU3860
2951:src/display.c **** 	      //annuc = 1;
 11848              		.loc 1 2951 22 is_stmt 0 view .LVU3861
 11849 0ba2 0123     		movs	r3, #1
 11850 0ba4 A9F80030 		strh	r3, [r9]	@ movhi
2973:src/display.c ****       nostk:
 11851              		.loc 1 2973 2 is_stmt 1 view .LVU3862
 11852 0ba8 FFF7FEFF 		bl	show_stack
 11853              	.LVL1356:
2975:src/display.c **** 	if (!skip) {
 11854              		.loc 1 2975 2 view .LVU3863
 11855 0bac FFF7FEFF 		bl	show_flags
 11856              	.LVL1357:
2976:src/display.c **** 	  if (State2.runmode) {
 11857              		.loc 1 2976 2 view .LVU3864
 11858 0bb0 FFF769BA 		b	.L938
 11859              	.LVL1358:
 11860              	.L1258:
2928:src/display.c **** 	      j *= 6;
 11861              		.loc 1 2928 8 view .LVU3865
2928:src/display.c **** 	      j *= 6;
 11862              		.loc 1 2928 12 is_stmt 0 view .LVU3866
 11863 0bb4 1EA8     		add	r0, sp, #120
 11864              	.LVL1359:
2928:src/display.c **** 	      j *= 6;
 11865              		.loc 1 2928 12 view .LVU3867
ARM GAS  /tmp/ccCvaEE3.s 			page 339


 11866 0bb6 0293     		str	r3, [sp, #8]
 11867 0bb8 FFF7FEFF 		bl	slen
 11868              	.LVL1360:
2929:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11869              		.loc 1 2929 8 is_stmt 1 view .LVU3868
2930:src/display.c **** 		{
 11870              		.loc 1 2930 8 view .LVU3869
2929:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11871              		.loc 1 2929 10 is_stmt 0 view .LVU3870
 11872 0bbc 029B     		ldr	r3, [sp, #8]
 11873 0bbe 03EB4303 		add	r3, r3, r3, lsl #1
2930:src/display.c **** 		{
 11874              		.loc 1 2930 15 view .LVU3871
 11875 0bc2 A0EB4300 		sub	r0, r0, r3, lsl #1
 11876              	.LVL1361:
2930:src/display.c **** 		{
 11877              		.loc 1 2930 11 view .LVU3872
 11878 0bc6 1328     		cmp	r0, #19
 11879 0bc8 13DD     		ble	.L1018
2932:src/display.c **** 		  set_status_right(buf);
 11880              		.loc 1 2932 5 is_stmt 1 view .LVU3873
2932:src/display.c **** 		  set_status_right(buf);
 11881              		.loc 1 2932 20 is_stmt 0 view .LVU3874
 11882 0bca 28AB     		add	r3, sp, #160
 11883 0bcc 0344     		add	r3, r3, r0
 11884 0bce 019A     		ldr	r2, [sp, #4]
 11885 0bd0 03F8282C 		strb	r2, [r3, #-40]
2933:src/display.c **** 		}
 11886              		.loc 1 2933 5 is_stmt 1 view .LVU3875
 11887 0bd4 1EA8     		add	r0, sp, #120
 11888 0bd6 FFF7FEFF 		bl	set_status_right
 11889              	.LVL1362:
 11890 0bda D2E7     		b	.L1019
 11891              	.LVL1363:
 11892              	.L1259:
 11893              	.LBB665:
 11894              	.LBB666:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11895              		.loc 1 3458 17 view .LVU3876
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11896              		.loc 1 3458 18 is_stmt 0 view .LVU3877
 11897 0bdc 0135     		adds	r5, r5, #1
 11898              	.LVL1364:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11899              		.loc 1 3458 12 is_stmt 1 view .LVU3878
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11900              		.loc 1 3458 2 is_stmt 0 view .LVU3879
 11901 0bde 062D     		cmp	r5, #6
 11902 0be0 21D1     		bne	.L1012
 11903 0be2 DDE90467 		ldrd	r6, r7, [sp, #16]
 11904              	.LVL1365:
 11905              	.L1011:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11906              		.loc 1 3458 2 view .LVU3880
 11907              	.LBE666:
 11908              	.LBE665:
2973:src/display.c ****       nostk:
ARM GAS  /tmp/ccCvaEE3.s 			page 340


 11909              		.loc 1 2973 2 is_stmt 1 view .LVU3881
 11910 0be6 FFF7FEFF 		bl	show_stack
 11911              	.LVL1366:
2975:src/display.c **** 	if (!skip) {
 11912              		.loc 1 2975 2 view .LVU3882
 11913 0bea FFF7FEFF 		bl	show_flags
 11914              	.LVL1367:
2976:src/display.c **** 	  if (State2.runmode) {
 11915              		.loc 1 2976 2 view .LVU3883
 11916 0bee FFF74ABA 		b	.L938
 11917              	.LVL1368:
 11918              	.L1018:
2936:src/display.c **** 	      }
 11919              		.loc 1 2936 3 view .LVU3884
 11920 0bf2 1EA8     		add	r0, sp, #120
 11921 0bf4 FFF7FEFF 		bl	set_status
 11922              	.LVL1369:
 11923 0bf8 C3E7     		b	.L1019
 11924              	.LVL1370:
 11925              	.L1255:
2923:src/display.c **** 	  } else if (State2.alphas) {
 11926              		.loc 1 2923 6 view .LVU3885
2923:src/display.c **** 	  } else if (State2.alphas) {
 11927              		.loc 1 2923 48 is_stmt 0 view .LVU3886
 11928 0bfa 501E     		subs	r0, r2, #1
 11929 0bfc 0293     		str	r3, [sp, #8]
 11930 0bfe FFF7FEFF 		bl	get_reg_n
 11931              	.LVL1371:
 11932              	.LBB674:
 11933              	.LBI665:
3444:src/display.c **** 	int glen = *graphic++;
 11934              		.loc 1 3444 19 is_stmt 1 view .LVU3887
 11935              	.LBB673:
3445:src/display.c **** 	int i, j;
 11936              		.loc 1 3445 2 view .LVU3888
3453:src/display.c **** #endif
 11937              		.loc 1 3453 15 is_stmt 0 view .LVU3889
 11938 0c02 604D     		ldr	r5, .L1270+24
3445:src/display.c **** 	int i, j;
 11939              		.loc 1 3445 6 view .LVU3890
 11940 0c04 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11941              	.LVL1372:
3446:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11942              		.loc 1 3446 2 is_stmt 1 view .LVU3891
3453:src/display.c **** #endif
 11943              		.loc 1 3453 2 view .LVU3892
3453:src/display.c **** #endif
 11944              		.loc 1 3453 15 is_stmt 0 view .LVU3893
 11945 0c06 0122     		movs	r2, #1
 11946 0c08 2A70     		strb	r2, [r5]
3455:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11947              		.loc 1 3455 2 is_stmt 1 view .LVU3894
3455:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11948              		.loc 1 3455 5 is_stmt 0 view .LVU3895
 11949 0c0a 0029     		cmp	r1, #0
 11950 0c0c EBD0     		beq	.L1011
3456:src/display.c **** 
ARM GAS  /tmp/ccCvaEE3.s 			page 341


 11951              		.loc 1 3456 2 is_stmt 1 view .LVU3896
 11952              	.LVL1373:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11953              		.loc 1 3458 2 view .LVU3897
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11954              		.loc 1 3458 12 view .LVU3898
 11955 0c0e 8318     		adds	r3, r0, r2
 11956 0c10 0393     		str	r3, [sp, #12]
 11957 0c12 4A29     		cmp	r1, #74
 11958 0c14 D4BF     		ite	le
 11959 0c16 5B18     		addle	r3, r3, r1
 11960 0c18 4A33     		addgt	r3, r3, #74
 11961 0c1a 0193     		str	r3, [sp, #4]
 11962 0c1c CDE90467 		strd	r6, r7, [sp, #16]
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11963              		.loc 1 3458 8 is_stmt 0 view .LVU3899
 11964 0c20 029B     		ldr	r3, [sp, #8]
 11965 0c22 0292     		str	r2, [sp, #8]
 11966 0c24 1D46     		mov	r5, r3
 11967              	.LVL1374:
 11968              	.L1012:
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11969              		.loc 1 3459 14 is_stmt 1 view .LVU3900
 11970 0c26 029B     		ldr	r3, [sp, #8]
 11971 0c28 039F     		ldr	r7, [sp, #12]
 11972 0c2a 03FA05FB 		lsl	fp, r3, r5
 11973 0c2e 05F19406 		add	r6, r5, #148
 11974 0c32 06E0     		b	.L1015
 11975              	.LVL1375:
 11976              	.L1260:
 11977              	.LBB667:
 11978              	.LBB668:
 348:src/display.c ****   else	clr_dot(n);
 11979              		.loc 1 348 11 is_stmt 0 view .LVU3901
 11980 0c34 FFF7FEFF 		bl	set_dot
 11981              	.LVL1376:
 11982              	.L1014:
 348:src/display.c ****   else	clr_dot(n);
 11983              		.loc 1 348 11 view .LVU3902
 11984              	.LBE668:
 11985              	.LBE667:
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11986              		.loc 1 3459 23 is_stmt 1 view .LVU3903
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11987              		.loc 1 3459 14 view .LVU3904
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11988              		.loc 1 3459 4 is_stmt 0 view .LVU3905
 11989 0c38 019B     		ldr	r3, [sp, #4]
 11990 0c3a BB42     		cmp	r3, r7
 11991 0c3c 06F10606 		add	r6, r6, #6
 11992 0c40 CCD0     		beq	.L1259
 11993              	.LVL1377:
 11994              	.L1015:
3464:src/display.c **** #endif
 11995              		.loc 1 3464 6 is_stmt 1 view .LVU3906
 11996              	.LBB671:
 11997              	.LBI667:
ARM GAS  /tmp/ccCvaEE3.s 			page 342


 347:src/display.c ****   if (on)	set_dot(n);
 11998              		.loc 1 347 6 view .LVU3907
 11999              	.LBB669:
 348:src/display.c ****   else	clr_dot(n);
 12000              		.loc 1 348 3 view .LVU3908
 348:src/display.c ****   else	clr_dot(n);
 12001              		.loc 1 348 11 view .LVU3909
 349:src/display.c **** }
 12002              		.loc 1 349 8 view .LVU3910
 12003              	.LBE669:
 12004              	.LBE671:
3464:src/display.c **** #endif
 12005              		.loc 1 3464 37 is_stmt 0 view .LVU3911
 12006 0c42 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 12007              	.LVL1378:
 12008              	.LBB672:
 12009              	.LBB670:
 348:src/display.c ****   else	clr_dot(n);
 12010              		.loc 1 348 6 view .LVU3912
 12011 0c46 13EA0B0F 		tst	r3, fp
 348:src/display.c ****   else	clr_dot(n);
 12012              		.loc 1 348 11 view .LVU3913
 12013 0c4a 3046     		mov	r0, r6
 348:src/display.c ****   else	clr_dot(n);
 12014              		.loc 1 348 6 view .LVU3914
 12015 0c4c F2D1     		bne	.L1260
 349:src/display.c **** }
 12016              		.loc 1 349 8 view .LVU3915
 12017 0c4e FFF7FEFF 		bl	clr_dot
 12018              	.LVL1379:
 12019 0c52 F1E7     		b	.L1014
 12020              	.LVL1380:
 12021              	.L996:
 349:src/display.c **** }
 12022              		.loc 1 349 8 view .LVU3916
 12023              	.LBE670:
 12024              	.LBE672:
 12025              	.LBE673:
 12026              	.LBE674:
 12027              	.LBB675:
 12028              	.LBB619:
2571:src/display.c **** #ifndef REALBUILD
 12029              		.loc 1 2571 8 is_stmt 1 view .LVU3917
2571:src/display.c **** #ifndef REALBUILD
 12030              		.loc 1 2571 37 is_stmt 0 view .LVU3918
 12031 0c54 05EB8500 		add	r0, r5, r5, lsl #2
2571:src/display.c **** #ifndef REALBUILD
 12032              		.loc 1 2571 8 view .LVU3919
 12033 0c58 3946     		mov	r1, r7
 12034 0c5a 5044     		add	r0, r0, r10
 12035 0c5c FFF7FEFF 		bl	set_exp_digits_string
 12036              	.LVL1381:
2573:src/display.c **** #endif
 12037              		.loc 1 2573 8 is_stmt 1 view .LVU3920
 12038 0c60 494B     		ldr	r3, .L1270+28
 12039 0c62 4A48     		ldr	r0, .L1270+32
2573:src/display.c **** #endif
ARM GAS  /tmp/ccCvaEE3.s 			page 343


 12040              		.loc 1 2573 47 is_stmt 0 view .LVU3921
 12041 0c64 0A21     		movs	r1, #10
2573:src/display.c **** #endif
 12042              		.loc 1 2573 8 view .LVU3922
 12043 0c66 01FB0531 		mla	r1, r1, r5, r3
 12044 0c6a FFF7FEFF 		bl	scopy
 12045              	.LVL1382:
2573:src/display.c **** #endif
 12046              		.loc 1 2573 8 view .LVU3923
 12047              	.LBE619:
 12048              	.LBE675:
2973:src/display.c ****       nostk:
 12049              		.loc 1 2973 2 is_stmt 1 view .LVU3924
 12050 0c6e 5CE6     		b	.L1222
 12051              	.LVL1383:
 12052              	.L1252:
 12053              	.LBB676:
 12054              	.LBB656:
 12055              	.LBB654:
2486:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 12056              		.loc 1 2486 6 view .LVU3925
2486:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 12057              		.loc 1 2486 11 is_stmt 0 view .LVU3926
 12058 0c70 4FF00A0A 		mov	r10, #10
 12059              	.LVL1384:
2486:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 12060              		.loc 1 2486 11 view .LVU3927
 12061 0c74 0AFB03F7 		mul	r7, r10, r3
 12062              	.LVL1385:
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 12063              		.loc 1 2487 6 is_stmt 1 view .LVU3928
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 12064              		.loc 1 2487 28 is_stmt 0 view .LVU3929
 12065 0c78 462F     		cmp	r7, #70
2488:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12066              		.loc 1 2488 10 view .LVU3930
 12067 0c7a 4549     		ldr	r1, .L1270+36
 12068 0c7c 15A8     		add	r0, sp, #84
 12069              	.LVL1386:
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 12070              		.loc 1 2487 28 view .LVU3931
 12071 0c7e B846     		mov	r8, r7
 12072 0c80 A8BF     		it	ge
 12073 0c82 4FF04608 		movge	r8, #70
2488:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12074              		.loc 1 2488 10 view .LVU3932
 12075 0c86 FFF7FEFF 		bl	scopy
 12076              	.LVL1387:
2489:src/display.c **** 	    *p++ = '-';
 12077              		.loc 1 2489 10 view .LVU3933
 12078 0c8a 3946     		mov	r1, r7
 12079 0c8c 0222     		movs	r2, #2
 12080 0c8e FFF7FEFF 		bl	num_arg_0
 12081              	.LVL1388:
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 12082              		.loc 1 2487 10 view .LVU3934
 12083 0c92 08F11D08 		add	r8, r8, #29
ARM GAS  /tmp/ccCvaEE3.s 			page 344


 12084              	.LVL1389:
2488:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12085              		.loc 1 2488 6 is_stmt 1 view .LVU3935
2489:src/display.c **** 	    *p++ = '-';
 12086              		.loc 1 2489 6 view .LVU3936
2490:src/display.c **** 	    p = num_arg_0(p, end, 2);
 12087              		.loc 1 2490 6 view .LVU3937
2490:src/display.c **** 	    p = num_arg_0(p, end, 2);
 12088              		.loc 1 2490 11 is_stmt 0 view .LVU3938
 12089 0c96 2D23     		movs	r3, #45
 12090 0c98 00F8013B 		strb	r3, [r0], #1
 12091              	.LVL1390:
2491:src/display.c **** 	    *p = '\0';
 12092              		.loc 1 2491 6 is_stmt 1 view .LVU3939
2491:src/display.c **** 	    *p = '\0';
 12093              		.loc 1 2491 10 is_stmt 0 view .LVU3940
 12094 0c9c 4146     		mov	r1, r8
 12095 0c9e 0222     		movs	r2, #2
 12096 0ca0 FFF7FEFF 		bl	num_arg_0
 12097              	.LVL1391:
2491:src/display.c **** 	    *p = '\0';
 12098              		.loc 1 2491 10 view .LVU3941
 12099 0ca4 0246     		mov	r2, r0
 12100              	.LVL1392:
2492:src/display.c **** 	    set_status(buf);
 12101              		.loc 1 2492 6 is_stmt 1 view .LVU3942
2492:src/display.c **** 	    set_status(buf);
 12102              		.loc 1 2492 9 is_stmt 0 view .LVU3943
 12103 0ca6 4FF0000B 		mov	fp, #0
2493:src/display.c **** 	  }
 12104              		.loc 1 2493 6 view .LVU3944
 12105 0caa 15A8     		add	r0, sp, #84
 12106              	.LVL1393:
2492:src/display.c **** 	    set_status(buf);
 12107              		.loc 1 2492 9 view .LVU3945
 12108 0cac 82F800B0 		strb	fp, [r2]
2493:src/display.c **** 	  }
 12109              		.loc 1 2493 6 is_stmt 1 view .LVU3946
 12110 0cb0 FFF7FEFF 		bl	set_status
 12111              	.LVL1394:
2493:src/display.c **** 	  }
 12112              		.loc 1 2493 6 is_stmt 0 view .LVU3947
 12113 0cb4 56E6     		b	.L983
 12114              	.LVL1395:
 12115              	.L1251:
2493:src/display.c **** 	  }
 12116              		.loc 1 2493 6 view .LVU3948
 12117              	.LBE654:
2465:src/display.c **** 	  if (SizeStatRegs)
 12118              		.loc 1 2465 4 is_stmt 1 view .LVU3949
2465:src/display.c **** 	  if (SizeStatRegs)
 12119              		.loc 1 2465 8 is_stmt 0 view .LVU3950
 12120 0cb6 15AF     		add	r7, sp, #84
 12121              	.LVL1396:
2465:src/display.c **** 	  if (SizeStatRegs)
 12122              		.loc 1 2465 8 view .LVU3951
 12123 0cb8 3649     		ldr	r1, .L1270+40
ARM GAS  /tmp/ccCvaEE3.s 			page 345


 12124 0cba 3846     		mov	r0, r7
 12125 0cbc FFF7FEFF 		bl	scopy
 12126              	.LVL1397:
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12127              		.loc 1 2466 8 view .LVU3952
 12128 0cc0 354A     		ldr	r2, .L1270+44
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12129              		.loc 1 2466 7 view .LVU3953
 12130 0cc2 1268     		ldr	r2, [r2]
2465:src/display.c **** 	  if (SizeStatRegs)
 12131              		.loc 1 2465 8 view .LVU3954
 12132 0cc4 0346     		mov	r3, r0
 12133              	.LVL1398:
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12134              		.loc 1 2466 4 is_stmt 1 view .LVU3955
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12135              		.loc 1 2466 7 is_stmt 0 view .LVU3956
 12136 0cc6 002A     		cmp	r2, #0
 12137 0cc8 76D1     		bne	.L1261
 12138              	.L980:
2468:src/display.c **** 	  set_status(buf);
 12139              		.loc 1 2468 4 is_stmt 1 view .LVU3957
2468:src/display.c **** 	  set_status(buf);
 12140              		.loc 1 2468 7 is_stmt 0 view .LVU3958
 12141 0cca 0022     		movs	r2, #0
 12142 0ccc 1A70     		strb	r2, [r3]
2469:src/display.c **** 
 12143              		.loc 1 2469 4 is_stmt 1 view .LVU3959
 12144 0cce 3846     		mov	r0, r7
 12145              	.LVL1399:
2469:src/display.c **** 
 12146              		.loc 1 2469 4 is_stmt 0 view .LVU3960
 12147 0cd0 FFF7FEFF 		bl	set_status
 12148              	.LVL1400:
2472:src/display.c **** 	  if (LocalRegs < 0) {
 12149              		.loc 1 2472 4 is_stmt 1 view .LVU3961
2472:src/display.c **** 	  if (LocalRegs < 0) {
 12150              		.loc 1 2472 8 is_stmt 0 view .LVU3962
 12151 0cd4 FFF7FEFF 		bl	global_regs
 12152              	.LVL1401:
 12153 0cd8 0146     		mov	r1, r0
 12154 0cda 3846     		mov	r0, r7
 12155 0cdc FFF7FEFF 		bl	num_arg
 12156              	.LVL1402:
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12157              		.loc 1 2473 8 view .LVU3963
 12158 0ce0 244B     		ldr	r3, .L1270+8
 12159 0ce2 1A68     		ldr	r2, [r3]
 12160 0ce4 B2F8DE27 		ldrh	r2, [r2, #2014]
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12161              		.loc 1 2473 7 view .LVU3964
 12162 0ce8 1104     		lsls	r1, r2, #16
2472:src/display.c **** 	  if (LocalRegs < 0) {
 12163              		.loc 1 2472 8 view .LVU3965
 12164 0cea 0346     		mov	r3, r0
 12165              	.LVL1403:
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
ARM GAS  /tmp/ccCvaEE3.s 			page 346


 12166              		.loc 1 2473 4 is_stmt 1 view .LVU3966
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12167              		.loc 1 2473 7 is_stmt 0 view .LVU3967
 12168 0cec 58D4     		bmi	.L1262
 12169              	.L981:
2477:src/display.c **** 	  set_digits_string(buf, 0);
 12170              		.loc 1 2477 4 is_stmt 1 view .LVU3968
2477:src/display.c **** 	  set_digits_string(buf, 0);
 12171              		.loc 1 2477 7 is_stmt 0 view .LVU3969
 12172 0cee 0021     		movs	r1, #0
2478:src/display.c **** 	} else {
 12173              		.loc 1 2478 4 view .LVU3970
 12174 0cf0 3846     		mov	r0, r7
 12175              	.LVL1404:
2477:src/display.c **** 	  set_digits_string(buf, 0);
 12176              		.loc 1 2477 7 view .LVU3971
 12177 0cf2 1970     		strb	r1, [r3]
2478:src/display.c **** 	} else {
 12178              		.loc 1 2478 4 is_stmt 1 view .LVU3972
 12179 0cf4 FFF7FEFF 		bl	set_digits_string
 12180              	.LVL1405:
2478:src/display.c **** 	} else {
 12181              		.loc 1 2478 4 is_stmt 0 view .LVU3973
 12182 0cf8 D0E6     		b	.L978
 12183              	.LVL1406:
 12184              	.L1008:
2478:src/display.c **** 	} else {
 12185              		.loc 1 2478 4 view .LVU3974
 12186              	.LBE656:
 12187              	.LBE676:
2963:src/display.c **** 	  if (i > 0)
 12188              		.loc 1 2963 4 is_stmt 1 view .LVU3975
2963:src/display.c **** 	  if (i > 0)
 12189              		.loc 1 2963 8 is_stmt 0 view .LVU3976
 12190 0cfa 1E4B     		ldr	r3, .L1270+8
 12191 0cfc 1B68     		ldr	r3, [r3]
 12192 0cfe B3F8E007 		ldrh	r0, [r3, #2016]
 12193              	.LVL1407:
2964:src/display.c **** 	    set_status(prt(getprog(i), buf));
 12194              		.loc 1 2964 4 is_stmt 1 view .LVU3977
2964:src/display.c **** 	    set_status(prt(getprog(i), buf));
 12195              		.loc 1 2964 7 is_stmt 0 view .LVU3978
 12196 0d02 0028     		cmp	r0, #0
 12197 0d04 00F0C080 		beq	.L1022
2965:src/display.c **** 	  else
 12198              		.loc 1 2965 6 is_stmt 1 view .LVU3979
 12199 0d08 FFF7FEFF 		bl	getprog
 12200              	.LVL1408:
2965:src/display.c **** 	  else
 12201              		.loc 1 2965 6 is_stmt 0 view .LVU3980
 12202 0d0c 1EA9     		add	r1, sp, #120
 12203              	.LVL1409:
2965:src/display.c **** 	  else
 12204              		.loc 1 2965 6 view .LVU3981
 12205 0d0e FFF7FEFF 		bl	prt
 12206              	.LVL1410:
2965:src/display.c **** 	  else
ARM GAS  /tmp/ccCvaEE3.s 			page 347


 12207              		.loc 1 2965 6 view .LVU3982
 12208 0d12 FFF7FEFF 		bl	set_status
 12209              	.LVL1411:
 12210              	.L1023:
2968:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 12211              		.loc 1 2968 4 is_stmt 1 view .LVU3983
 12212 0d16 8920     		movs	r0, #137
 12213 0d18 FFF7FEFF 		bl	set_dot
 12214              	.LVL1412:
2970:src/display.c **** 	  goto nostk;
 12215              		.loc 1 2970 6 view .LVU3984
2971:src/display.c **** 	}
 12216              		.loc 1 2971 4 view .LVU3985
2975:src/display.c **** 	if (!skip) {
 12217              		.loc 1 2975 2 view .LVU3986
2970:src/display.c **** 	  goto nostk;
 12218              		.loc 1 2970 12 is_stmt 0 view .LVU3987
 12219 0d1c 0126     		movs	r6, #1
2975:src/display.c **** 	if (!skip) {
 12220              		.loc 1 2975 2 view .LVU3988
 12221 0d1e FFF7FEFF 		bl	show_flags
 12222              	.LVL1413:
 12223              	.L1219:
2976:src/display.c **** 	  if (State2.runmode) {
 12224              		.loc 1 2976 2 is_stmt 1 view .LVU3989
 12225 0d22 124B     		ldr	r3, .L1270
 12226 0d24 1D4F     		ldr	r7, .L1270+48
 12227 0d26 0093     		str	r3, [sp]
 12228 0d28 FFF7ADB9 		b	.L938
 12229              	.LVL1414:
 12230              	.L1244:
2910:src/display.c **** 	  skip = 1;
 12231              		.loc 1 2910 4 view .LVU3990
 12232              	.LBB677:
 12233              	.LBI677:
2581:src/display.c **** 	char buf[16], *bp;
 12234              		.loc 1 2581 19 view .LVU3991
 12235              	.LBB678:
2582:src/display.c **** 	int n = State2.digval;
 12236              		.loc 1 2582 2 view .LVU3992
2583:src/display.c **** 	
 12237              		.loc 1 2583 2 view .LVU3993
2583:src/display.c **** 	
 12238              		.loc 1 2583 6 is_stmt 0 view .LVU3994
 12239 0d2c B4F808A0 		ldrh	r10, [r4, #8]
 12240              	.LVL1415:
2590:src/display.c **** 	  n;
 12241              		.loc 1 2590 2 is_stmt 1 view .LVU3995
2590:src/display.c **** 	  n;
 12242              		.loc 1 2590 54 is_stmt 0 view .LVU3996
 12243 0d30 C807     		lsls	r0, r1, #31
 12244 0d32 4CBF     		ite	mi
 12245 0d34 0AF17008 		addmi	r8, r10, #112
2583:src/display.c **** 	
 12246              		.loc 1 2583 6 view .LVU3997
 12247 0d38 D046     		movpl	r8, r10
 12248              	.LVL1416:
ARM GAS  /tmp/ccCvaEE3.s 			page 348


2594:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12249              		.loc 1 2594 2 is_stmt 1 view .LVU3998
2594:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12250              		.loc 1 2594 5 is_stmt 0 view .LVU3999
 12251 0d3a 11F00401 		ands	r1, r1, #4
 12252 0d3e 49D0     		beq	.L999
2595:src/display.c **** 	}
 12253              		.loc 1 2595 4 is_stmt 1 view .LVU4000
2595:src/display.c **** 	}
 12254              		.loc 1 2595 15 is_stmt 0 view .LVU4001
 12255 0d40 15A9     		add	r1, sp, #84
 12256 0d42 4046     		mov	r0, r8
 12257 0d44 FFF7FEFF 		bl	alpha_rcl_s
 12258              	.LVL1417:
2595:src/display.c **** 	}
 12259              		.loc 1 2595 4 view .LVU4002
 12260 0d48 FFF7FEFF 		bl	set_status
 12261              	.LVL1418:
 12262              	.L1000:
2617:src/display.c ****       }
 12263              		.loc 1 2617 2 is_stmt 1 view .LVU4003
 12264 0d4c 4046     		mov	r0, r8
 12265 0d4e 0021     		movs	r1, #0
 12266 0d50 FFF7FEFF 		bl	format_reg
 12267              	.LVL1419:
2617:src/display.c ****       }
 12268              		.loc 1 2617 2 is_stmt 0 view .LVU4004
 12269              	.LBE678:
 12270              	.LBE677:
2911:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 12271              		.loc 1 2911 4 is_stmt 1 view .LVU4005
2912:src/display.c **** 	    annunciators();
 12272              		.loc 1 2912 4 view .LVU4006
2912:src/display.c **** 	    annunciators();
 12273              		.loc 1 2912 7 is_stmt 0 view .LVU4007
 12274 0d54 002D     		cmp	r5, #0
 12275 0d56 3AD1     		bne	.L1006
2912:src/display.c **** 	    annunciators();
 12276              		.loc 1 2912 25 discriminator 1 view .LVU4008
 12277 0d58 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 12278 0d5a 012B     		cmp	r3, #1
 12279 0d5c 31D0     		beq	.L1263
 12280              	.L1007:
2973:src/display.c ****       nostk:
 12281              		.loc 1 2973 2 is_stmt 1 view .LVU4009
 12282 0d5e FFF7FEFF 		bl	show_stack
 12283              	.LVL1420:
2975:src/display.c **** 	if (!skip) {
 12284              		.loc 1 2975 2 view .LVU4010
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 12285              		.loc 1 2683 6 is_stmt 0 view .LVU4011
 12286 0d62 0026     		movs	r6, #0
2975:src/display.c **** 	if (!skip) {
 12287              		.loc 1 2975 2 view .LVU4012
 12288 0d64 FFF7FEFF 		bl	show_flags
 12289              	.LVL1421:
2976:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/ccCvaEE3.s 			page 349


 12290              		.loc 1 2976 2 is_stmt 1 view .LVU4013
 12291 0d68 7BE5     		b	.L971
 12292              	.L1271:
 12293 0d6a 00BF     		.align	2
 12294              	.L1270:
 12295 0d6c 00000000 		.word	DispPlot
 12296 0d70 7C000000 		.word	.LC39
 12297 0d74 00000000 		.word	main_ram
 12298 0d78 4C000000 		.word	.LC33
 12299 0d7c 54000000 		.word	.LC34
 12300 0d80 98000000 		.word	.LC41
 12301 0d84 00000000 		.word	forceDispPlot
 12302 0d88 00000000 		.word	.LANCHOR23
 12303 0d8c 00000000 		.word	LastDisplayedNumber
 12304 0d90 78000000 		.word	.LC38
 12305 0d94 5C000000 		.word	.LC35
 12306 0d98 00000000 		.word	SizeStatRegs
 12307 0d9c 00000000 		.word	DispMsg
 12308              	.LVL1422:
 12309              	.L1262:
 12310              	.LBB681:
 12311              	.LBB657:
2474:src/display.c **** 	    p = num_arg(p, local_regs());
 12312              		.loc 1 2474 6 view .LVU4014
2474:src/display.c **** 	    p = num_arg(p, local_regs());
 12313              		.loc 1 2474 10 is_stmt 0 view .LVU4015
 12314 0da0 4849     		ldr	r1, .L1272
 12315 0da2 FFF7FEFF 		bl	scopy
 12316              	.LVL1423:
2474:src/display.c **** 	    p = num_arg(p, local_regs());
 12317              		.loc 1 2474 10 view .LVU4016
 12318 0da6 0546     		mov	r5, r0
 12319              	.LVL1424:
2475:src/display.c **** 	  }
 12320              		.loc 1 2475 6 is_stmt 1 view .LVU4017
2475:src/display.c **** 	  }
 12321              		.loc 1 2475 21 is_stmt 0 view .LVU4018
 12322 0da8 FFF7FEFF 		bl	local_regs
 12323              	.LVL1425:
2475:src/display.c **** 	  }
 12324              		.loc 1 2475 21 view .LVU4019
 12325 0dac 0146     		mov	r1, r0
2475:src/display.c **** 	  }
 12326              		.loc 1 2475 10 view .LVU4020
 12327 0dae 2846     		mov	r0, r5
 12328 0db0 FFF7FEFF 		bl	num_arg
 12329              	.LVL1426:
 12330 0db4 0346     		mov	r3, r0
 12331              	.LVL1427:
2475:src/display.c **** 	  }
 12332              		.loc 1 2475 10 view .LVU4021
 12333 0db6 9AE7     		b	.L981
 12334              	.L1261:
2467:src/display.c **** 	  *p = '\0';
 12335              		.loc 1 2467 6 is_stmt 1 view .LVU4022
2467:src/display.c **** 	  *p = '\0';
 12336              		.loc 1 2467 10 is_stmt 0 view .LVU4023
ARM GAS  /tmp/ccCvaEE3.s 			page 350


 12337 0db8 4349     		ldr	r1, .L1272+4
 12338 0dba FFF7FEFF 		bl	scopy
 12339              	.LVL1428:
2467:src/display.c **** 	  *p = '\0';
 12340              		.loc 1 2467 10 view .LVU4024
 12341 0dbe 0346     		mov	r3, r0
 12342              	.LVL1429:
2467:src/display.c **** 	  *p = '\0';
 12343              		.loc 1 2467 10 view .LVU4025
 12344 0dc0 83E7     		b	.L980
 12345              	.LVL1430:
 12346              	.L1263:
2467:src/display.c **** 	  *p = '\0';
 12347              		.loc 1 2467 10 view .LVU4026
 12348              	.LBE657:
 12349              	.LBE681:
2912:src/display.c **** 	    annunciators();
 12350              		.loc 1 2912 56 discriminator 2 view .LVU4027
 12351 0dc2 424B     		ldr	r3, .L1272+8
 12352 0dc4 1B68     		ldr	r3, [r3]
 12353 0dc6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12354 0dca DB07     		lsls	r3, r3, #31
 12355 0dcc C7D5     		bpl	.L1007
 12356              	.L1006:
2913:src/display.c **** 	  }
 12357              		.loc 1 2913 6 is_stmt 1 view .LVU4028
 12358 0dce FFF7FEFF 		bl	annunciators
 12359              	.LVL1431:
 12360 0dd2 AAE5     		b	.L1222
 12361              	.LVL1432:
 12362              	.L999:
 12363              	.LBB682:
 12364              	.LBB679:
2598:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12365              		.loc 1 2598 4 view .LVU4029
 12366 0dd4 15AF     		add	r7, sp, #84
 12367 0dd6 1022     		movs	r2, #16
 12368 0dd8 3846     		mov	r0, r7
 12369 0dda FFF7FEFF 		bl	xset
 12370              	.LVL1433:
2602:src/display.c **** #endif
 12371              		.loc 1 2602 4 view .LVU4030
2602:src/display.c **** #endif
 12372              		.loc 1 2602 9 is_stmt 0 view .LVU4031
 12373 0dde 3C49     		ldr	r1, .L1272+12
 12374 0de0 3846     		mov	r0, r7
 12375 0de2 FFF7FEFF 		bl	scopy_spc
 12376              	.LVL1434:
2604:src/display.c **** 	    *bp++ = '.';
 12377              		.loc 1 2604 8 view .LVU4032
 12378 0de6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12379              	.LVL1435:
2604:src/display.c **** 	    *bp++ = '.';
 12380              		.loc 1 2604 4 is_stmt 1 view .LVU4033
2604:src/display.c **** 	    *bp++ = '.';
 12381              		.loc 1 2604 7 is_stmt 0 view .LVU4034
 12382 0de8 DA07     		lsls	r2, r3, #31
ARM GAS  /tmp/ccCvaEE3.s 			page 351


 12383 0dea 56D5     		bpl	.L1001
2605:src/display.c **** 	    if (n >= 100) {
 12384              		.loc 1 2605 6 is_stmt 1 view .LVU4035
 12385              	.LVL1436:
2605:src/display.c **** 	    if (n >= 100) {
 12386              		.loc 1 2605 12 is_stmt 0 view .LVU4036
 12387 0dec 2E23     		movs	r3, #46
2606:src/display.c **** 	      *bp++ = '1';
 12388              		.loc 1 2606 9 view .LVU4037
 12389 0dee BAF1630F 		cmp	r10, #99
2605:src/display.c **** 	    if (n >= 100) {
 12390              		.loc 1 2605 12 view .LVU4038
 12391 0df2 0370     		strb	r3, [r0]
2606:src/display.c **** 	      *bp++ = '1';
 12392              		.loc 1 2606 6 is_stmt 1 view .LVU4039
2606:src/display.c **** 	      *bp++ = '1';
 12393              		.loc 1 2606 9 is_stmt 0 view .LVU4040
 12394 0df4 4CDC     		bgt	.L1002
2605:src/display.c **** 	    if (n >= 100) {
 12395              		.loc 1 2605 9 view .LVU4041
 12396 0df6 0130     		adds	r0, r0, #1
 12397              	.LVL1437:
 12398              	.L1003:
2612:src/display.c **** 	  else
 12399              		.loc 1 2612 6 is_stmt 1 view .LVU4042
2612:src/display.c **** 	  else
 12400              		.loc 1 2612 11 is_stmt 0 view .LVU4043
 12401 0df8 5146     		mov	r1, r10
 12402 0dfa 0222     		movs	r2, #2
 12403 0dfc FFF7FEFF 		bl	num_arg_0
 12404              	.LVL1438:
 12405              	.L1005:
2615:src/display.c **** 	}
 12406              		.loc 1 2615 4 is_stmt 1 view .LVU4044
 12407 0e00 3846     		mov	r0, r7
 12408 0e02 FFF7FEFF 		bl	set_status
 12409              	.LVL1439:
 12410 0e06 A1E7     		b	.L1000
 12411              	.LVL1440:
 12412              	.L1248:
2615:src/display.c **** 	}
 12413              		.loc 1 2615 4 is_stmt 0 view .LVU4045
 12414              	.LBE679:
 12415              	.LBE682:
 12416              	.LBB683:
 12417              	.LBB604:
2872:src/display.c **** 	      copyreg(&z, x);
 12418              		.loc 1 2872 8 is_stmt 1 view .LVU4046
2872:src/display.c **** 	      copyreg(&z, x);
 12419              		.loc 1 2872 27 is_stmt 0 view .LVU4047
 12420 0e08 324B     		ldr	r3, .L1272+16
 12421 0e0a 1E68     		ldr	r6, [r3]
 12422              	.LVL1441:
2873:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 12423              		.loc 1 2873 8 is_stmt 1 view .LVU4048
 12424 0e0c 15A8     		add	r0, sp, #84
 12425 0e0e 3146     		mov	r1, r6
ARM GAS  /tmp/ccCvaEE3.s 			page 352


 12426 0e10 FFF7FEFF 		bl	copyreg
 12427              	.LVL1442:
2874:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12428              		.loc 1 2874 8 view .LVU4049
 12429 0e14 E8B2     		uxtb	r0, r5
 12430 0e16 FFF7FEFF 		bl	sigma_val
 12431              	.LVL1443:
2875:src/display.c **** 	      copyreg(x, &z);
 12432              		.loc 1 2875 8 view .LVU4050
 12433 0e1a FFF7FEFF 		bl	is_dblmode
 12434              	.LVL1444:
 12435 0e1e 0021     		movs	r1, #0
 12436 0e20 0246     		mov	r2, r0
 12437 0e22 3046     		mov	r0, r6
 12438 0e24 FFF7FEFF 		bl	set_x
 12439              	.LVL1445:
2876:src/display.c **** 	      skip = 1;
 12440              		.loc 1 2876 8 view .LVU4051
 12441 0e28 15A9     		add	r1, sp, #84
 12442 0e2a 3046     		mov	r0, r6
 12443 0e2c FFF7FEFF 		bl	copyreg
 12444              	.LVL1446:
2877:src/display.c **** 	    }
 12445              		.loc 1 2877 8 view .LVU4052
2877:src/display.c **** 	    }
 12446              		.loc 1 2877 13 is_stmt 0 view .LVU4053
 12447 0e30 0125     		movs	r5, #1
 12448              	.LVL1447:
2877:src/display.c **** 	    }
 12449              		.loc 1 2877 13 view .LVU4054
 12450 0e32 02E5     		b	.L963
 12451              	.LVL1448:
 12452              	.L1247:
2877:src/display.c **** 	    }
 12453              		.loc 1 2877 13 view .LVU4055
 12454              	.LBE604:
 12455              	.LBB605:
2852:src/display.c **** 	      decimal64 z;
 12456              		.loc 1 2852 8 is_stmt 1 view .LVU4056
2853:src/display.c **** 
 12457              		.loc 1 2853 8 view .LVU4057
2855:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12458              		.loc 1 2855 8 view .LVU4058
 12459 0e34 0CA8     		add	r0, sp, #48
 12460 0e36 FFF7FEFF 		bl	getX
 12461              	.LVL1449:
2856:src/display.c **** 		const unsigned int f = argKIND(op);
 12462              		.loc 1 2856 8 view .LVU4059
2856:src/display.c **** 		const unsigned int f = argKIND(op);
 12463              		.loc 1 2856 11 is_stmt 0 view .LVU4060
 12464 0e3a C5F30723 		ubfx	r3, r5, #8, #8
 12465 0e3e 022B     		cmp	r3, #2
 12466 0e40 38D1     		bne	.L965
 12467              	.LBB606:
2857:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12468              		.loc 1 2857 3 is_stmt 1 view .LVU4061
2857:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
ARM GAS  /tmp/ccCvaEE3.s 			page 353


 12469              		.loc 1 2857 22 is_stmt 0 view .LVU4062
 12470 0e42 EDB2     		uxtb	r5, r5
 12471              	.LVL1450:
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12472              		.loc 1 2858 3 is_stmt 1 view .LVU4063
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12473              		.loc 1 2858 6 is_stmt 0 view .LVU4064
 12474 0e44 9B2D     		cmp	r5, #155
 12475              	.LBB607:
2861:src/display.c **** 		}
 12476              		.loc 1 2861 5 view .LVU4065
 12477 0e46 15AF     		add	r7, sp, #84
 12478              	.LBE607:
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12479              		.loc 1 2858 6 view .LVU4066
 12480 0e48 30D8     		bhi	.L966
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12481              		.loc 1 2858 28 discriminator 1 view .LVU4067
 12482 0e4a 1823     		movs	r3, #24
 12483 0e4c 224A     		ldr	r2, .L1272+20
 12484 0e4e 03FB05F3 		mul	r3, r3, r5
 12485 0e52 D358     		ldr	r3, [r2, r3]
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12486              		.loc 1 2858 23 discriminator 1 view .LVU4068
 12487 0e54 53B3     		cbz	r3, .L966
 12488              	.LBB608:
2859:src/display.c **** 		  update_speed(0);
 12489              		.loc 1 2859 5 is_stmt 1 view .LVU4069
 12490              	.LVL1451:
2860:src/display.c **** 		  fp(&r, &x);
 12491              		.loc 1 2860 20 view .LVU4070
2861:src/display.c **** 		}
 12492              		.loc 1 2861 5 view .LVU4071
 12493 0e56 0CA9     		add	r1, sp, #48
 12494 0e58 3846     		mov	r0, r7
 12495 0e5a 9847     		blx	r3
 12496              	.LVL1452:
 12497              	.L967:
2861:src/display.c **** 		}
 12498              		.loc 1 2861 5 is_stmt 0 view .LVU4072
 12499              	.LBE608:
 12500              	.LBE606:
2867:src/display.c **** 	      packed_from_number(&z, &r);
 12501              		.loc 1 2867 8 is_stmt 1 discriminator 1 view .LVU4073
 12502 0e5c 1F4A     		ldr	r2, .L1272+24
 12503 0e5e 3946     		mov	r1, r7
 12504 0e60 3846     		mov	r0, r7
 12505 0e62 FFF7FEFF 		bl	decNumberNormalize
 12506              	.LVL1453:
2868:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12507              		.loc 1 2868 8 discriminator 1 view .LVU4074
 12508 0e66 3946     		mov	r1, r7
 12509 0e68 06A8     		add	r0, sp, #24
 12510 0e6a FFF7FEFF 		bl	packed_from_number
 12511              	.LVL1454:
2869:src/display.c **** 	      skip = 1;
 12512              		.loc 1 2869 8 discriminator 1 view .LVU4075
ARM GAS  /tmp/ccCvaEE3.s 			page 354


 12513 0e6e 0022     		movs	r2, #0
 12514 0e70 06A8     		add	r0, sp, #24
 12515 0e72 1146     		mov	r1, r2
 12516 0e74 FFF7FEFF 		bl	set_x
 12517              	.LVL1455:
2870:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12518              		.loc 1 2870 8 discriminator 1 view .LVU4076
2870:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12519              		.loc 1 2870 13 is_stmt 0 discriminator 1 view .LVU4077
 12520 0e78 0125     		movs	r5, #1
 12521              	.LBE605:
 12522 0e7a DEE4     		b	.L963
 12523              	.LVL1456:
 12524              	.L961:
2846:src/display.c **** 	    else
 12525              		.loc 1 2846 8 is_stmt 1 view .LVU4078
 12526 0e7c 1848     		ldr	r0, .L1272+28
 12527 0e7e 0021     		movs	r1, #0
 12528 0e80 FFF7FEFF 		bl	set_digits_string
 12529              	.LVL1457:
2849:src/display.c **** 	  } else if (State2.runmode) {
 12530              		.loc 1 2849 11 is_stmt 0 view .LVU4079
 12531 0e84 0125     		movs	r5, #1
 12532              	.LVL1458:
2846:src/display.c **** 	    else
 12533              		.loc 1 2846 8 view .LVU4080
 12534 0e86 D8E4     		b	.L963
 12535              	.LVL1459:
 12536              	.L1022:
2846:src/display.c **** 	    else
 12537              		.loc 1 2846 8 view .LVU4081
 12538              	.LBE683:
2967:src/display.c **** 	  set_dot(STO_annun);
 12539              		.loc 1 2967 6 is_stmt 1 view .LVU4082
 12540 0e88 1648     		ldr	r0, .L1272+32
 12541              	.LVL1460:
2967:src/display.c **** 	  set_dot(STO_annun);
 12542              		.loc 1 2967 6 is_stmt 0 view .LVU4083
 12543 0e8a FFF7FEFF 		bl	set_status
 12544              	.LVL1461:
2967:src/display.c **** 	  set_dot(STO_annun);
 12545              		.loc 1 2967 6 view .LVU4084
 12546 0e8e 42E7     		b	.L1023
 12547              	.LVL1462:
 12548              	.L1002:
 12549              	.LBB684:
 12550              	.LBB680:
2607:src/display.c **** 	      n -= 100;
 12551              		.loc 1 2607 8 is_stmt 1 view .LVU4085
2607:src/display.c **** 	      n -= 100;
 12552              		.loc 1 2607 14 is_stmt 0 view .LVU4086
 12553 0e90 3123     		movs	r3, #49
 12554 0e92 4370     		strb	r3, [r0, #1]
2608:src/display.c **** 	    }
 12555              		.loc 1 2608 8 is_stmt 1 view .LVU4087
2608:src/display.c **** 	    }
 12556              		.loc 1 2608 10 is_stmt 0 view .LVU4088
ARM GAS  /tmp/ccCvaEE3.s 			page 355


 12557 0e94 AAF1640A 		sub	r10, r10, #100
 12558              	.LVL1463:
2607:src/display.c **** 	      n -= 100;
 12559              		.loc 1 2607 11 view .LVU4089
 12560 0e98 0230     		adds	r0, r0, #2
 12561              	.LVL1464:
 12562              	.L1001:
2611:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12563              		.loc 1 2611 4 is_stmt 1 view .LVU4090
2611:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12564              		.loc 1 2611 7 is_stmt 0 view .LVU4091
 12565 0e9a BAF1630F 		cmp	r10, #99
 12566 0e9e ABDD     		ble	.L1003
2614:src/display.c **** 	  set_status(buf);
 12567              		.loc 1 2614 6 is_stmt 1 view .LVU4092
 12568              	.LVL1465:
2614:src/display.c **** 	  set_status(buf);
 12569              		.loc 1 2614 22 is_stmt 0 view .LVU4093
 12570 0ea0 114B     		ldr	r3, .L1272+36
 12571 0ea2 5344     		add	r3, r3, r10
2614:src/display.c **** 	  set_status(buf);
 12572              		.loc 1 2614 12 view .LVU4094
 12573 0ea4 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12574 0ea8 0370     		strb	r3, [r0]
 12575 0eaa A9E7     		b	.L1005
 12576              	.LVL1466:
 12577              	.L966:
2614:src/display.c **** 	  set_status(buf);
 12578              		.loc 1 2614 12 view .LVU4095
 12579              	.LBE680:
 12580              	.LBE684:
 12581              	.LBB685:
 12582              	.LBB610:
 12583              	.LBB609:
2864:src/display.c **** 	      } else
 12584              		.loc 1 2864 5 is_stmt 1 view .LVU4096
 12585 0eac 3846     		mov	r0, r7
 12586 0eae FFF7FEFF 		bl	set_NaN
 12587              	.LVL1467:
 12588 0eb2 D3E7     		b	.L967
 12589              	.LVL1468:
 12590              	.L965:
2864:src/display.c **** 	      } else
 12591              		.loc 1 2864 5 is_stmt 0 view .LVU4097
 12592              	.LBE609:
2866:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12593              		.loc 1 2866 3 is_stmt 1 view .LVU4098
 12594 0eb4 15AF     		add	r7, sp, #84
 12595 0eb6 0CAA     		add	r2, sp, #48
 12596 0eb8 05F07F01 		and	r1, r5, #127
 12597 0ebc 3846     		mov	r0, r7
 12598 0ebe FFF7FEFF 		bl	do_conv
 12599              	.LVL1469:
 12600 0ec2 CBE7     		b	.L967
 12601              	.L1273:
 12602              		.align	2
 12603              	.L1272:
ARM GAS  /tmp/ccCvaEE3.s 			page 356


 12604 0ec4 6C000000 		.word	.LC37
 12605 0ec8 64000000 		.word	.LC36
 12606 0ecc 00000000 		.word	main_ram
 12607 0ed0 A0000000 		.word	.LC42
 12608 0ed4 00000000 		.word	StackBase
 12609 0ed8 00000000 		.word	monfuncs
 12610 0edc 00000000 		.word	Ctx
 12611 0ee0 40000000 		.word	.LC32
 12612 0ee4 A8000000 		.word	.LC43
 12613 0ee8 BC000000 		.word	.LC30
 12614              	.LBE610:
 12615              	.LBE685:
 12616              		.cfi_endproc
 12617              	.LFE34:
 12619              		.section	.text.frozen_display,"ax",%progbits
 12620              		.align	1
 12621              		.p2align 2,,3
 12622              		.global	frozen_display
 12623              		.syntax unified
 12624              		.thumb
 12625              		.thumb_func
 12626              		.fpu fpv4-sp-d16
 12628              	frozen_display:
 12629              	.LFB35:
3438:src/display.c **** 	State2.disp_freeze = 0;
 12630              		.loc 1 3438 7 view -0
 12631              		.cfi_startproc
 12632              		@ args = 0, pretend = 0, frame = 0
 12633              		@ frame_needed = 0, uses_anonymous_args = 0
3439:src/display.c **** 	display();
 12634              		.loc 1 3439 2 view .LVU4100
3438:src/display.c **** 	State2.disp_freeze = 0;
 12635              		.loc 1 3438 7 is_stmt 0 view .LVU4101
 12636 0000 10B5     		push	{r4, lr}
 12637              		.cfi_def_cfa_offset 8
 12638              		.cfi_offset 4, -8
 12639              		.cfi_offset 14, -4
3439:src/display.c **** 	display();
 12640              		.loc 1 3439 21 view .LVU4102
 12641 0002 064C     		ldr	r4, .L1276
 12642 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12643 0006 6FF30413 		bfc	r3, #4, #1
 12644 000a E375     		strb	r3, [r4, #23]
3440:src/display.c **** 	State2.disp_freeze = 1;
 12645              		.loc 1 3440 2 is_stmt 1 view .LVU4103
 12646 000c FFF7FEFF 		bl	display
 12647              	.LVL1470:
3441:src/display.c ****       }
 12648              		.loc 1 3441 2 view .LVU4104
3441:src/display.c ****       }
 12649              		.loc 1 3441 21 is_stmt 0 view .LVU4105
 12650 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12651 0012 43F01003 		orr	r3, r3, #16
 12652 0016 E375     		strb	r3, [r4, #23]
3442:src/display.c **** 
 12653              		.loc 1 3442 7 view .LVU4106
 12654 0018 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccCvaEE3.s 			page 357


 12655              	.L1277:
 12656 001a 00BF     		.align	2
 12657              	.L1276:
 12658 001c 00000000 		.word	StateWhileOn
 12659              		.cfi_endproc
 12660              	.LFE35:
 12662              		.section	.text.message,"ax",%progbits
 12663              		.align	1
 12664              		.p2align 2,,3
 12665              		.global	message
 12666              		.syntax unified
 12667              		.thumb
 12668              		.thumb_func
 12669              		.fpu fpv4-sp-d16
 12671              	message:
 12672              	.LVL1471:
 12673              	.LFB46:
3659:src/display.c **** 	State2.disp_freeze = 0;
 12674              		.loc 1 3659 7 is_stmt 1 view -0
 12675              		.cfi_startproc
 12676              		@ args = 0, pretend = 0, frame = 0
 12677              		@ frame_needed = 0, uses_anonymous_args = 0
3660:src/display.c **** 	State2.disp_small = 0;
 12678              		.loc 1 3660 2 view .LVU4108
3661:src/display.c **** 	WasDataEntry = 0;
 12679              		.loc 1 3661 2 view .LVU4109
3661:src/display.c **** 	WasDataEntry = 0;
 12680              		.loc 1 3661 20 is_stmt 0 view .LVU4110
 12681 0000 174A     		ldr	r2, .L1288
3659:src/display.c **** 	State2.disp_freeze = 0;
 12682              		.loc 1 3659 7 view .LVU4111
 12683 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12684              		.cfi_def_cfa_offset 24
 12685              		.cfi_offset 3, -24
 12686              		.cfi_offset 4, -20
 12687              		.cfi_offset 5, -16
 12688              		.cfi_offset 6, -12
 12689              		.cfi_offset 7, -8
 12690              		.cfi_offset 14, -4
3661:src/display.c **** 	WasDataEntry = 0;
 12691              		.loc 1 3661 20 view .LVU4112
 12692 0004 D38A     		ldrh	r3, [r2, #22]
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12693              		.loc 1 3662 15 view .LVU4113
 12694 0006 174E     		ldr	r6, .L1288+4
3661:src/display.c **** 	WasDataEntry = 0;
 12695              		.loc 1 3661 20 view .LVU4114
 12696 0008 23F48453 		bic	r3, r3, #4224
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12697              		.loc 1 3662 15 view .LVU4115
 12698 000c 0027     		movs	r7, #0
3661:src/display.c **** 	WasDataEntry = 0;
 12699              		.loc 1 3661 20 view .LVU4116
 12700 000e D382     		strh	r3, [r2, #22]	@ movhi
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12701              		.loc 1 3662 2 is_stmt 1 view .LVU4117
3663:src/display.c **** 	  // Complete redraw necessary
ARM GAS  /tmp/ccCvaEE3.s 			page 358


 12702              		.loc 1 3663 5 is_stmt 0 view .LVU4118
 12703 0010 9B05     		lsls	r3, r3, #22
3659:src/display.c **** 	State2.disp_freeze = 0;
 12704              		.loc 1 3659 7 view .LVU4119
 12705 0012 0546     		mov	r5, r0
 12706 0014 0C46     		mov	r4, r1
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12707              		.loc 1 3662 15 view .LVU4120
 12708 0016 3760     		str	r7, [r6]
3663:src/display.c **** 	  // Complete redraw necessary
 12709              		.loc 1 3663 2 is_stmt 1 view .LVU4121
3663:src/display.c **** 	  // Complete redraw necessary
 12710              		.loc 1 3663 5 is_stmt 0 view .LVU4122
 12711 0018 12D5     		bpl	.L1279
3663:src/display.c **** 	  // Complete redraw necessary
 12712              		.loc 1 3663 27 discriminator 1 view .LVU4123
 12713 001a D1B1     		cbz	r1, .L1287
 12714              	.L1280:
3670:src/display.c **** 	    ShowRPN = 0;
 12715              		.loc 1 3670 6 is_stmt 1 view .LVU4124
 12716 001c FFF7FEFF 		bl	reset_disp
 12717              	.LVL1472:
3671:src/display.c **** 	    set_annunciators();
 12718              		.loc 1 3671 6 view .LVU4125
3671:src/display.c **** 	    set_annunciators();
 12719              		.loc 1 3671 14 is_stmt 0 view .LVU4126
 12720 0020 114B     		ldr	r3, .L1288+8
 12721 0022 0026     		movs	r6, #0
 12722 0024 1E60     		str	r6, [r3]
3672:src/display.c **** 	    set_digits_string( str2, 0 );
 12723              		.loc 1 3672 6 is_stmt 1 view .LVU4127
 12724 0026 FFF7FEFF 		bl	set_annunciators
 12725              	.LVL1473:
3673:src/display.c **** 	  }
 12726              		.loc 1 3673 6 view .LVU4128
 12727 002a 3146     		mov	r1, r6
 12728 002c 2046     		mov	r0, r4
 12729 002e FFF7FEFF 		bl	set_digits_string
 12730              	.LVL1474:
3675:src/display.c **** 	  finish_display();// message
 12731              		.loc 1 3675 4 view .LVU4129
 12732 0032 2846     		mov	r0, r5
 12733 0034 FFF7FEFF 		bl	set_status
 12734              	.LVL1475:
3676:src/display.c **** 	}
 12735              		.loc 1 3676 4 view .LVU4130
3678:src/display.c **** 
 12736              		.loc 1 3678 7 is_stmt 0 view .LVU4131
 12737 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12738              		.cfi_remember_state
 12739              		.cfi_restore 14
 12740              		.cfi_restore 7
 12741              		.cfi_restore 6
 12742              		.cfi_restore 5
 12743              		.cfi_restore 4
 12744              		.cfi_restore 3
 12745              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccCvaEE3.s 			page 359


 12746              	.LVL1476:
3676:src/display.c **** 	}
 12747              		.loc 1 3676 4 view .LVU4132
 12748 003c FFF7FEBF 		b	finish_display
 12749              	.LVL1477:
 12750              	.L1279:
 12751              		.cfi_restore_state
3669:src/display.c **** 	    reset_disp();
 12752              		.loc 1 3669 4 is_stmt 1 view .LVU4133
3669:src/display.c **** 	    reset_disp();
 12753              		.loc 1 3669 7 is_stmt 0 view .LVU4134
 12754 0040 0029     		cmp	r1, #0
 12755 0042 EBD1     		bne	.L1280
3675:src/display.c **** 	  finish_display();// message
 12756              		.loc 1 3675 4 is_stmt 1 view .LVU4135
 12757 0044 2846     		mov	r0, r5
 12758              	.LVL1478:
3675:src/display.c **** 	  finish_display();// message
 12759              		.loc 1 3675 4 is_stmt 0 view .LVU4136
 12760 0046 FFF7FEFF 		bl	set_status
 12761              	.LVL1479:
3676:src/display.c **** 	}
 12762              		.loc 1 3676 4 is_stmt 1 view .LVU4137
3678:src/display.c **** 
 12763              		.loc 1 3678 7 is_stmt 0 view .LVU4138
 12764 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12765              		.cfi_remember_state
 12766              		.cfi_restore 14
 12767              		.cfi_restore 7
 12768              		.cfi_restore 6
 12769              		.cfi_restore 5
 12770              		.cfi_restore 4
 12771              		.cfi_restore 3
 12772              		.cfi_def_cfa_offset 0
 12773              	.LVL1480:
3676:src/display.c **** 	}
 12774              		.loc 1 3676 4 view .LVU4139
 12775 004e FFF7FEBF 		b	finish_display
 12776              	.LVL1481:
 12777              	.L1287:
 12778              		.cfi_restore_state
3665:src/display.c **** 	  display();
 12779              		.loc 1 3665 4 is_stmt 1 view .LVU4140
3665:src/display.c **** 	  display();
 12780              		.loc 1 3665 12 is_stmt 0 view .LVU4141
 12781 0052 064B     		ldr	r3, .L1288+12
 12782 0054 1860     		str	r0, [r3]
3666:src/display.c **** 	}
 12783              		.loc 1 3666 4 is_stmt 1 view .LVU4142
3678:src/display.c **** 
 12784              		.loc 1 3678 7 is_stmt 0 view .LVU4143
 12785 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12786              		.cfi_restore 14
 12787              		.cfi_restore 7
 12788              		.cfi_restore 6
 12789              		.cfi_restore 5
 12790              		.cfi_restore 4
ARM GAS  /tmp/ccCvaEE3.s 			page 360


 12791              		.cfi_restore 3
 12792              		.cfi_def_cfa_offset 0
3666:src/display.c **** 	}
 12793              		.loc 1 3666 4 view .LVU4144
 12794 005a FFF7FEBF 		b	display
 12795              	.LVL1482:
 12796              	.L1289:
3666:src/display.c **** 	}
 12797              		.loc 1 3666 4 view .LVU4145
 12798 005e 00BF     		.align	2
 12799              	.L1288:
 12800 0060 00000000 		.word	StateWhileOn
 12801 0064 00000000 		.word	WasDataEntry
 12802 0068 00000000 		.word	ShowRPN
 12803 006c 00000000 		.word	DispMsg
 12804              		.cfi_endproc
 12805              	.LFE46:
 12807              		.section	.text.error_message,"ax",%progbits
 12808              		.align	1
 12809              		.p2align 2,,3
 12810              		.global	error_message
 12811              		.syntax unified
 12812              		.thumb
 12813              		.thumb_func
 12814              		.fpu fpv4-sp-d16
 12816              	error_message:
 12817              	.LVL1483:
 12818              	.LFB1:
 136:src/display.c **** #define MSG1(top) top "\0"
 12819              		.loc 1 136 1 is_stmt 1 view -0
 12820              		.cfi_startproc
 12821              		@ args = 0, pretend = 0, frame = 0
 12822              		@ frame_needed = 0, uses_anonymous_args = 0
 141:src/display.c ****     {
 12823              		.loc 1 141 3 view .LVU4147
 202:src/display.c ****     {
 12824              		.loc 1 202 3 view .LVU4148
 240:src/display.c ****     const char *p = error_table[e];
 12825              		.loc 1 240 3 view .LVU4149
 240:src/display.c ****     const char *p = error_table[e];
 12826              		.loc 1 240 21 is_stmt 0 view .LVU4150
 12827 0000 364B     		ldr	r3, .L1316
 12828 0002 1B68     		ldr	r3, [r3]
 12829 0004 0343     		orrs	r3, r0, r3
 12830 0006 00D1     		bne	.L1312
 12831 0008 7047     		bx	lr
 12832              	.L1312:
 12833              	.LBB686:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12834              		.loc 1 241 5 is_stmt 1 view .LVU4151
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12835              		.loc 1 241 17 is_stmt 0 view .LVU4152
 12836 000a 354B     		ldr	r3, .L1316+4
 12837              	.LBE686:
 136:src/display.c **** #define MSG1(top) top "\0"
 12838              		.loc 1 136 1 view .LVU4153
 12839 000c 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccCvaEE3.s 			page 361


 12840              		.cfi_def_cfa_offset 16
 12841              		.cfi_offset 4, -16
 12842              		.cfi_offset 5, -12
 12843              		.cfi_offset 6, -8
 12844              		.cfi_offset 14, -4
 12845              	.LBB698:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12846              		.loc 1 241 17 view .LVU4154
 12847 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12848              	.LVL1484:
 242:src/display.c ****     if (*q == '\0')
 12849              		.loc 1 242 5 is_stmt 1 view .LVU4155
 12850 0012 0446     		mov	r4, r0
 242:src/display.c ****     if (*q == '\0')
 12851              		.loc 1 242 21 is_stmt 0 view .LVU4156
 12852 0014 0021     		movs	r1, #0
 12853 0016 3046     		mov	r0, r6
 12854              	.LVL1485:
 242:src/display.c ****     if (*q == '\0')
 12855              		.loc 1 242 21 view .LVU4157
 12856 0018 FFF7FEFF 		bl	find_char
 12857              	.LVL1486:
 243:src/display.c ****       q = S7_ERROR;
 12858              		.loc 1 243 5 is_stmt 1 view .LVU4158
 243:src/display.c ****       q = S7_ERROR;
 12859              		.loc 1 243 9 is_stmt 0 view .LVU4159
 12860 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 243:src/display.c ****       q = S7_ERROR;
 12861              		.loc 1 243 8 view .LVU4160
 12862 001e 002B     		cmp	r3, #0
 12863 0020 3CD0     		beq	.L1301
 245:src/display.c ****       DispMsg = p;
 12864              		.loc 1 245 8 view .LVU4161
 12865 0022 582B     		cmp	r3, #88
 242:src/display.c ****     if (*q == '\0')
 12866              		.loc 1 242 17 view .LVU4162
 12867 0024 00F10105 		add	r5, r0, #1
 12868              	.LVL1487:
 245:src/display.c ****       DispMsg = p;
 12869              		.loc 1 245 5 is_stmt 1 view .LVU4163
 245:src/display.c ****       DispMsg = p;
 12870              		.loc 1 245 8 is_stmt 0 view .LVU4164
 12871 0028 39D1     		bne	.L1293
 246:src/display.c ****       frozen_display();
 12872              		.loc 1 246 7 is_stmt 1 view .LVU4165
 12873              	.LBB687:
 12874              	.LBB688:
3439:src/display.c **** 	display();
 12875              		.loc 1 3439 21 is_stmt 0 view .LVU4166
 12876 002a 2E4C     		ldr	r4, .L1316+8
 12877              	.LVL1488:
3439:src/display.c **** 	display();
 12878              		.loc 1 3439 21 view .LVU4167
 12879              	.LBE688:
 12880              	.LBE687:
 246:src/display.c ****       frozen_display();
 12881              		.loc 1 246 15 view .LVU4168
ARM GAS  /tmp/ccCvaEE3.s 			page 362


 12882 002c 2E4A     		ldr	r2, .L1316+12
 12883              	.LBB692:
 12884              	.LBB689:
3439:src/display.c **** 	display();
 12885              		.loc 1 3439 21 view .LVU4169
 12886 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12887              	.LBE689:
 12888              	.LBE692:
 246:src/display.c ****       frozen_display();
 12889              		.loc 1 246 15 view .LVU4170
 12890 0030 1660     		str	r6, [r2]
 247:src/display.c ****     }
 12891              		.loc 1 247 7 is_stmt 1 view .LVU4171
 12892              	.LBB693:
 12893              	.LBI687:
3437:src/display.c ****       {
 12894              		.loc 1 3437 12 view .LVU4172
 12895              	.LBB690:
3439:src/display.c **** 	display();
 12896              		.loc 1 3439 2 view .LVU4173
3439:src/display.c **** 	display();
 12897              		.loc 1 3439 21 is_stmt 0 view .LVU4174
 12898 0032 6FF30413 		bfc	r3, #4, #1
 12899 0036 E375     		strb	r3, [r4, #23]
3440:src/display.c **** 	State2.disp_freeze = 1;
 12900              		.loc 1 3440 2 is_stmt 1 view .LVU4175
 12901 0038 FFF7FEFF 		bl	display
 12902              	.LVL1489:
3441:src/display.c ****       }
 12903              		.loc 1 3441 2 view .LVU4176
 12904              	.LBE690:
 12905              	.LBE693:
 261:src/display.c ****       if (*q == 'X')
 12906              		.loc 1 261 5 view .LVU4177
 12907              	.LBB694:
 12908              	.LBB691:
3441:src/display.c ****       }
 12909              		.loc 1 3441 21 is_stmt 0 view .LVU4178
 12910 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12911 003e 43F01003 		orr	r3, r3, #16
 12912 0042 E375     		strb	r3, [r4, #23]
 12913              	.LBE691:
 12914              	.LBE694:
 261:src/display.c ****       if (*q == 'X')
 12915              		.loc 1 261 9 view .LVU4179
 12916 0044 294B     		ldr	r3, .L1316+16
 261:src/display.c ****       if (*q == 'X')
 12917              		.loc 1 261 8 view .LVU4180
 12918 0046 1B68     		ldr	r3, [r3]
 12919 0048 002B     		cmp	r3, #0
 12920 004a 3ED0     		beq	.L1290
 12921              	.LVL1490:
 12922              	.L1315:
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12923              		.loc 1 262 7 is_stmt 1 view .LVU4181
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12924              		.loc 1 262 10 is_stmt 0 view .LVU4182
ARM GAS  /tmp/ccCvaEE3.s 			page 363


 12925 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12926 004e 582B     		cmp	r3, #88
 12927 0050 3CD0     		beq	.L1313
 265:src/display.c **** 	print_line(p, 0);
 12928              		.loc 1 265 2 is_stmt 1 view .LVU4183
 12929 0052 0020     		movs	r0, #0
 12930 0054 FFF7FEFF 		bl	print_tab
 12931              	.LVL1491:
 266:src/display.c **** 	print(' ');
 12932              		.loc 1 266 2 view .LVU4184
 12933 0058 3046     		mov	r0, r6
 12934 005a 0021     		movs	r1, #0
 12935 005c FFF7FEFF 		bl	print_line
 12936              	.LVL1492:
 267:src/display.c **** 	while (*q != '\0') {
 12937              		.loc 1 267 2 view .LVU4185
 12938 0060 2020     		movs	r0, #32
 12939 0062 FFF7FEFF 		bl	print
 12940              	.LVL1493:
 268:src/display.c **** 	  int c = *q;
 12941              		.loc 1 268 2 view .LVU4186
 268:src/display.c **** 	  int c = *q;
 12942              		.loc 1 268 8 view .LVU4187
 268:src/display.c **** 	  int c = *q;
 12943              		.loc 1 268 9 is_stmt 0 view .LVU4188
 12944 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 268:src/display.c **** 	  int c = *q;
 12945              		.loc 1 268 8 view .LVU4189
 12946 0068 73B9     		cbnz	r3, .L1297
 12947              	.L1300:
 277:src/display.c ****       }
 12948              		.loc 1 277 2 is_stmt 1 view .LVU4190
 12949              	.LBE698:
 282:src/display.c **** 
 12950              		.loc 1 282 1 is_stmt 0 view .LVU4191
 12951 006a BDE87040 		pop	{r4, r5, r6, lr}
 12952              		.cfi_remember_state
 12953              		.cfi_restore 14
 12954              		.cfi_restore 6
 12955              		.cfi_restore 5
 12956              		.cfi_restore 4
 12957              		.cfi_def_cfa_offset 0
 12958              	.LVL1494:
 12959              	.LBB699:
 277:src/display.c ****       }
 12960              		.loc 1 277 2 view .LVU4192
 12961 006e 0020     		movs	r0, #0
 12962 0070 FFF7FEBF 		b	print_advance
 12963              	.LVL1495:
 12964              	.L1314:
 12965              		.cfi_restore_state
 12966              	.LBB695:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12967              		.loc 1 272 4 view .LVU4193
 12968 0074 FFF7FEFF 		bl	print
 12969              	.LVL1496:
 273:src/display.c **** 	    ++q;
ARM GAS  /tmp/ccCvaEE3.s 			page 364


 12970              		.loc 1 273 4 is_stmt 1 view .LVU4194
 274:src/display.c **** 	  ++q;
 12971              		.loc 1 274 6 view .LVU4195
 273:src/display.c **** 	    ++q;
 12972              		.loc 1 273 7 is_stmt 0 view .LVU4196
 12973 0078 6D2C     		cmp	r4, #109
 274:src/display.c **** 	  ++q;
 12974              		.loc 1 274 6 view .LVU4197
 12975 007a 0CBF     		ite	eq
 12976 007c 691C     		addeq	r1, r5, #1
 12977              	.LVL1497:
 274:src/display.c **** 	  ++q;
 12978              		.loc 1 274 6 view .LVU4198
 12979 007e 2946     		movne	r1, r5
 12980              	.LVL1498:
 12981              	.L1299:
 275:src/display.c **** 	}
 12982              		.loc 1 275 4 is_stmt 1 view .LVU4199
 12983              	.LBE695:
 268:src/display.c **** 	  int c = *q;
 12984              		.loc 1 268 9 is_stmt 0 view .LVU4200
 12985 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12986              	.LBB696:
 275:src/display.c **** 	}
 12987              		.loc 1 275 4 view .LVU4201
 12988 0082 4D1C     		adds	r5, r1, #1
 12989              	.LVL1499:
 275:src/display.c **** 	}
 12990              		.loc 1 275 4 view .LVU4202
 12991              	.LBE696:
 268:src/display.c **** 	  int c = *q;
 12992              		.loc 1 268 8 is_stmt 1 view .LVU4203
 12993 0084 002B     		cmp	r3, #0
 12994 0086 F0D0     		beq	.L1300
 12995              	.LVL1500:
 12996              	.L1297:
 12997              	.LBB697:
 269:src/display.c **** 	  if (c >= 'A')
 12998              		.loc 1 269 4 view .LVU4204
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12999              		.loc 1 270 4 view .LVU4205
 271:src/display.c **** 	  print(c);
 13000              		.loc 1 271 6 view .LVU4206
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13001              		.loc 1 272 4 view .LVU4207
 13002 0088 43F06004 		orr	r4, r3, #96
 13003              	.LVL1501:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13004              		.loc 1 272 4 view .LVU4208
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13005              		.loc 1 270 7 is_stmt 0 view .LVU4209
 13006 008c 402B     		cmp	r3, #64
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13007              		.loc 1 272 4 view .LVU4210
 13008 008e 2046     		mov	r0, r4
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13009              		.loc 1 270 7 view .LVU4211
ARM GAS  /tmp/ccCvaEE3.s 			page 365


 13010 0090 F0DC     		bgt	.L1314
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13011              		.loc 1 272 4 view .LVU4212
 13012 0092 1846     		mov	r0, r3
 13013 0094 FFF7FEFF 		bl	print
 13014              	.LVL1502:
 273:src/display.c **** 	    ++q;
 13015              		.loc 1 273 4 is_stmt 1 view .LVU4213
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13016              		.loc 1 272 4 is_stmt 0 view .LVU4214
 13017 0098 2946     		mov	r1, r5
 13018 009a F1E7     		b	.L1299
 13019              	.LVL1503:
 13020              	.L1301:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13021              		.loc 1 272 4 view .LVU4215
 13022              	.LBE697:
 244:src/display.c ****     if (*q == 'X') {
 13023              		.loc 1 244 9 view .LVU4216
 13024 009c 144D     		ldr	r5, .L1316+20
 13025              	.L1293:
 13026              	.LVL1504:
 254:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 13027              		.loc 1 254 7 is_stmt 1 view .LVU4217
 13028 009e 2946     		mov	r1, r5
 13029 00a0 3046     		mov	r0, r6
 13030 00a2 FFF7FEFF 		bl	message
 13031              	.LVL1505:
 255:src/display.c **** #ifndef REALBUILD
 13032              		.loc 1 255 7 view .LVU4218
 255:src/display.c **** #ifndef REALBUILD
 13033              		.loc 1 255 26 is_stmt 0 view .LVU4219
 13034 00a6 0F4B     		ldr	r3, .L1316+8
 257:src/display.c **** #endif
 13035              		.loc 1 257 7 view .LVU4220
 13036 00a8 1249     		ldr	r1, .L1316+24
 255:src/display.c **** #ifndef REALBUILD
 13037              		.loc 1 255 26 view .LVU4221
 13038 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 257:src/display.c **** #endif
 13039              		.loc 1 257 7 view .LVU4222
 13040 00ac 51F82410 		ldr	r1, [r1, r4, lsl #2]
 13041 00b0 1148     		ldr	r0, .L1316+28
 255:src/display.c **** #ifndef REALBUILD
 13042              		.loc 1 255 31 view .LVU4223
 13043 00b2 003C     		subs	r4, r4, #0
 255:src/display.c **** #ifndef REALBUILD
 13044              		.loc 1 255 31 view .LVU4224
 13045 00b4 18BF     		it	ne
 13046 00b6 0124     		movne	r4, #1
 13047              	.LVL1506:
 255:src/display.c **** #ifndef REALBUILD
 13048              		.loc 1 255 26 view .LVU4225
 13049 00b8 64F30412 		bfi	r2, r4, #4, #1
 13050 00bc DA75     		strb	r2, [r3, #23]
 257:src/display.c **** #endif
 13051              		.loc 1 257 7 is_stmt 1 view .LVU4226
ARM GAS  /tmp/ccCvaEE3.s 			page 366


 13052 00be FFF7FEFF 		bl	scopy
 13053              	.LVL1507:
 261:src/display.c ****       if (*q == 'X')
 13054              		.loc 1 261 5 view .LVU4227
 261:src/display.c ****       if (*q == 'X')
 13055              		.loc 1 261 9 is_stmt 0 view .LVU4228
 13056 00c2 0A4B     		ldr	r3, .L1316+16
 261:src/display.c ****       if (*q == 'X')
 13057              		.loc 1 261 8 view .LVU4229
 13058 00c4 1B68     		ldr	r3, [r3]
 13059 00c6 002B     		cmp	r3, #0
 13060 00c8 C0D1     		bne	.L1315
 13061              	.LVL1508:
 13062              	.L1290:
 261:src/display.c ****       if (*q == 'X')
 13063              		.loc 1 261 8 view .LVU4230
 13064              	.LBE699:
 282:src/display.c **** 
 13065              		.loc 1 282 1 view .LVU4231
 13066 00ca 70BD     		pop	{r4, r5, r6, pc}
 13067              	.LVL1509:
 13068              	.L1313:
 13069              	.LBB700:
 263:src/display.c ****       else {
 13070              		.loc 1 263 2 is_stmt 1 view .LVU4232
 13071 00cc 3146     		mov	r1, r6
 13072 00ce 0022     		movs	r2, #0
 13073              	.LBE700:
 282:src/display.c **** 
 13074              		.loc 1 282 1 is_stmt 0 view .LVU4233
 13075 00d0 BDE87040 		pop	{r4, r5, r6, lr}
 13076              		.cfi_restore 14
 13077              		.cfi_restore 6
 13078              		.cfi_restore 5
 13079              		.cfi_restore 4
 13080              		.cfi_def_cfa_offset 0
 13081              	.LVL1510:
 13082              	.LBB701:
 263:src/display.c ****       else {
 13083              		.loc 1 263 2 view .LVU4234
 13084 00d4 6420     		movs	r0, #100
 13085 00d6 FFF7FEBF 		b	print_reg
 13086              	.LVL1511:
 13087              	.L1317:
 263:src/display.c ****       else {
 13088              		.loc 1 263 2 view .LVU4235
 13089 00da 00BF     		.align	2
 13090              	.L1316:
 13091 00dc 00000000 		.word	Running
 13092 00e0 00000000 		.word	.LANCHOR27
 13093 00e4 00000000 		.word	StateWhileOn
 13094 00e8 00000000 		.word	DispMsg
 13095 00ec 00000000 		.word	Tracing
 13096 00f0 00000000 		.word	.LANCHOR26
 13097 00f4 00000000 		.word	.LANCHOR28
 13098 00f8 00000000 		.word	LastDisplayedNumber
 13099              	.LBE701:
ARM GAS  /tmp/ccCvaEE3.s 			page 367


 13100              		.cfi_endproc
 13101              	.LFE1:
 13103              		.section	.text.stopwatch_message,"ax",%progbits
 13104              		.align	1
 13105              		.p2align 2,,3
 13106              		.global	stopwatch_message
 13107              		.syntax unified
 13108              		.thumb
 13109              		.thumb_func
 13110              		.fpu fpv4-sp-d16
 13112              	stopwatch_message:
 13113              	.LVL1512:
 13114              	.LFB48:
3691:src/display.c **** #ifndef REALBUILD
 13115              		.loc 1 3691 7 is_stmt 1 view -0
 13116              		.cfi_startproc
 13117              		@ args = 0, pretend = 0, frame = 0
 13118              		@ frame_needed = 0, uses_anonymous_args = 0
3693:src/display.c **** #endif
 13119              		.loc 1 3693 2 view .LVU4237
3691:src/display.c **** #ifndef REALBUILD
 13120              		.loc 1 3691 7 is_stmt 0 view .LVU4238
 13121 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 13122              		.cfi_def_cfa_offset 24
 13123              		.cfi_offset 3, -24
 13124              		.cfi_offset 4, -20
 13125              		.cfi_offset 5, -16
 13126              		.cfi_offset 6, -12
 13127              		.cfi_offset 7, -8
 13128              		.cfi_offset 14, -4
3691:src/display.c **** #ifndef REALBUILD
 13129              		.loc 1 3691 7 view .LVU4239
 13130 0002 0F46     		mov	r7, r1
 13131 0004 1446     		mov	r4, r2
3693:src/display.c **** #endif
 13132              		.loc 1 3693 2 view .LVU4240
 13133 0006 2021     		movs	r1, #32
 13134              	.LVL1513:
3693:src/display.c **** #endif
 13135              		.loc 1 3693 2 view .LVU4241
 13136 0008 1922     		movs	r2, #25
 13137              	.LVL1514:
3691:src/display.c **** #ifndef REALBUILD
 13138              		.loc 1 3691 7 view .LVU4242
 13139 000a 0646     		mov	r6, r0
3693:src/display.c **** #endif
 13140              		.loc 1 3693 2 view .LVU4243
 13141 000c 1248     		ldr	r0, .L1329
 13142              	.LVL1515:
3691:src/display.c **** #ifndef REALBUILD
 13143              		.loc 1 3691 7 view .LVU4244
 13144 000e 1D46     		mov	r5, r3
3693:src/display.c **** #endif
 13145              		.loc 1 3693 2 view .LVU4245
 13146 0010 FFF7FEFF 		bl	xset
 13147              	.LVL1516:
3695:src/display.c **** 	set_dot(DEG);
ARM GAS  /tmp/ccCvaEE3.s 			page 368


 13148              		.loc 1 3695 2 is_stmt 1 view .LVU4246
 13149 0014 FFF7FEFF 		bl	reset_disp
 13150              	.LVL1517:
3696:src/display.c **** 	set_digits_string( str2, 0 );
 13151              		.loc 1 3696 2 view .LVU4247
 13152 0018 8C20     		movs	r0, #140
 13153 001a FFF7FEFF 		bl	set_dot
 13154              	.LVL1518:
3697:src/display.c **** 	State2.disp_small = force_small;
 13155              		.loc 1 3697 2 view .LVU4248
 13156 001e 3846     		mov	r0, r7
 13157 0020 0021     		movs	r1, #0
 13158 0022 FFF7FEFF 		bl	set_digits_string
 13159              	.LVL1519:
3698:src/display.c **** 	if( exponent!=NULL ) {
 13160              		.loc 1 3698 2 view .LVU4249
3698:src/display.c **** 	if( exponent!=NULL ) {
 13161              		.loc 1 3698 20 is_stmt 0 view .LVU4250
 13162 0026 0D4B     		ldr	r3, .L1329+4
 13163 0028 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 13164 002a 64F3C712 		bfi	r2, r4, #7, #1
 13165              	.LVL1520:
3698:src/display.c **** 	if( exponent!=NULL ) {
 13166              		.loc 1 3698 20 view .LVU4251
 13167 002e 9A75     		strb	r2, [r3, #22]
3699:src/display.c **** 	  stopwatch_exponent(exponent);
 13168              		.loc 1 3699 2 is_stmt 1 view .LVU4252
3699:src/display.c **** 	  stopwatch_exponent(exponent);
 13169              		.loc 1 3699 4 is_stmt 0 view .LVU4253
 13170 0030 55B1     		cbz	r5, .L1319
 13171              	.LVL1521:
 13172              	.LBB702:
 13173              	.LBB703:
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13174              		.loc 1 3684 9 is_stmt 1 view .LVU4254
 13175 0032 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13176              		.loc 1 3684 2 is_stmt 0 view .LVU4255
 13177 0034 41B1     		cbz	r1, .L1319
3683:src/display.c **** 	for (; *exponent!=0; exponent++) {
 13178              		.loc 1 3683 6 view .LVU4256
 13179 0036 6C24     		movs	r4, #108
 13180              	.LVL1522:
 13181              	.L1320:
3685:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 13182              		.loc 1 3685 4 is_stmt 1 view .LVU4257
 13183              	.LBB704:
 13184              	.LBI704:
 415:src/display.c ****   if (res) *res++ = ch;
 13185              		.loc 1 415 14 view .LVU4258
 13186              	.LBB705:
 416:src/display.c ****   else	set_dig(base, ch);
 13187              		.loc 1 416 3 view .LVU4259
 417:src/display.c ****   return res;
 13188              		.loc 1 417 8 view .LVU4260
 13189 0038 2046     		mov	r0, r4
 13190 003a FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccCvaEE3.s 			page 369


 13191              	.LVL1523:
 418:src/display.c **** }
 13192              		.loc 1 418 3 view .LVU4261
 418:src/display.c **** }
 13193              		.loc 1 418 3 is_stmt 0 view .LVU4262
 13194              	.LBE705:
 13195              	.LBE704:
3686:src/display.c **** 	}
 13196              		.loc 1 3686 4 is_stmt 1 view .LVU4263
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13197              		.loc 1 3684 9 is_stmt 0 view .LVU4264
 13198 003e 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 13199              	.LVL1524:
3686:src/display.c **** 	}
 13200              		.loc 1 3686 6 view .LVU4265
 13201 0042 0734     		adds	r4, r4, #7
 13202              	.LVL1525:
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13203              		.loc 1 3684 23 is_stmt 1 view .LVU4266
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13204              		.loc 1 3684 9 view .LVU4267
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13205              		.loc 1 3684 2 is_stmt 0 view .LVU4268
 13206 0044 0029     		cmp	r1, #0
 13207 0046 F7D1     		bne	.L1320
 13208              	.LVL1526:
 13209              	.L1319:
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13210              		.loc 1 3684 2 view .LVU4269
 13211              	.LBE703:
 13212              	.LBE702:
3702:src/display.c **** 	finish_display();
 13213              		.loc 1 3702 2 is_stmt 1 view .LVU4270
 13214 0048 3046     		mov	r0, r6
 13215 004a FFF7FEFF 		bl	set_status
 13216              	.LVL1527:
3703:src/display.c ****       }
 13217              		.loc 1 3703 2 view .LVU4271
3704:src/display.c **** 
 13218              		.loc 1 3704 7 is_stmt 0 view .LVU4272
 13219 004e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 13220              		.cfi_restore 14
 13221              		.cfi_restore 7
 13222              		.cfi_restore 6
 13223              		.cfi_restore 5
 13224              		.cfi_restore 4
 13225              		.cfi_restore 3
 13226              		.cfi_def_cfa_offset 0
 13227              	.LVL1528:
3703:src/display.c ****       }
 13228              		.loc 1 3703 2 view .LVU4273
 13229 0052 FFF7FEBF 		b	finish_display
 13230              	.LVL1529:
 13231              	.L1330:
 13232 0056 00BF     		.align	2
 13233              	.L1329:
 13234 0058 00000000 		.word	LastDisplayedNumber
ARM GAS  /tmp/ccCvaEE3.s 			page 370


 13235 005c 00000000 		.word	StateWhileOn
 13236              		.cfi_endproc
 13237              	.LFE48:
 13239              		.section	.rodata.str1.4,"aMS",%progbits,1
 13240              		.align	2
 13241              	.LC45:
 13242 0000 06316306 		.ascii	"\0061c\006\006\000"
 13242      0600
 13243 0006 0000     		.align	2
 13244              	.LC46:
 13245 0008 756E0600 		.ascii	"un\006\000"
 13246              		.align	2
 13247              	.LC47:
 13248 000c 736D00   		.ascii	"sm\000"
 13249              		.set	CSWTCH.371,CSWTCH.369
 13250 000f 00       		.align	2
 13251              	.LC48:
 13252 0010 20502072 		.ascii	" P r o g r a m \000"
 13252      206F2067 
 13252      20722061 
 13252      206D2000 
 13253              		.align	2
 13254              	.LC49:
 13255 0020 206F2072 		.ascii	" o r   d a t e \000"
 13255      20202064 
 13255      20612074 
 13255      20652000 
 13256              		.align	2
 13257              	.LC50:
 13258 0030 204F2070 		.ascii	" O p - c o d e \000"
 13258      202D2063 
 13258      206F2064 
 13258      20652000 
 13259              		.align	2
 13260              	.LC51:
 13261 0040 204C2061 		.ascii	" L a b e l \000"
 13261      20622065 
 13261      206C2000 
 13262              		.align	2
 13263              	.LC52:
 13264 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 13264      20652072 
 13264      20612074 
 13264      2069206F 
 13264      206E2000 
 13265              		.align	2
 13266              	.LC53:
 13267 0060 20462075 		.ascii	" F u l l \000"
 13267      206C206C 
 13267      2000
 13268 006a 0000     		.align	2
 13269              	.LC54:
 13270 006c 2043206C 		.ascii	" C l a s h \000"
 13270      20612073 
 13270      20682000 
 13271              		.align	2
 13272              	.LC55:
ARM GAS  /tmp/ccCvaEE3.s 			page 371


 13273 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 13273      206F2020 
 13273      2073206D 
 13273      2061206C 
 13273      206C2000 
 13274              		.align	2
 13275              	.LC56:
 13276 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 13276      20742061 
 13276      20202070 
 13276      206F2069 
 13276      206E2074 
 13277              		.align	2
 13278              	.LC57:
 13279 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 13279      20722061 
 13279      206D2065 
 13279      20742065 
 13279      20722000 
 13280              		.align	2
 13281              	.LC58:
 13282 00b8 20442061 		.ascii	" D a t a \000"
 13282      20742061 
 13282      2000
 13283 00c2 0000     		.align	2
 13284              	.LC59:
 13285 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 13285      206F2074 
 13285      20652063 
 13285      20742065 
 13285      20642000 
 13286              		.align	2
 13287              	.LC60:
 13288 00d8 2046206F 		.ascii	" F o u n d \000"
 13288      2075206E 
 13288      20642000 
 13289              		.align	2
 13290              	.LC61:
 13291 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 13291      2073206D 
 13291      20612074 
 13291      20632068 
 13291      2000
 13292 00f6 0000     		.align	2
 13293              	.LC62:
 13294 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 13294      20732074 
 13294      2061206C 
 13294      206C2065 
 13294      20642000 
 13295              		.global	DIGITS
 13296              		.comm	IoAnnunciator,4,4
 13297              		.comm	IntMaxWindow,4,4
 13298              		.comm	JustDisplayed,4,4
 13299              		.comm	ShowRPN,4,4
 13300              		.comm	forceDispPlot,1,1
 13301              		.comm	LastDisplayedExponent,5,4
ARM GAS  /tmp/ccCvaEE3.s 			page 372


 13302              		.comm	LastDisplayedNumber,26,4
 13303              		.comm	LastDisplayedText,31,4
 13304              		.global	no_status_top
 13305              		.comm	DispPlot,2,2
 13306              		.comm	DispMsg,4,4
 13307              		.global	SvnRevision
 13308              		.section	.rodata
 13309              		.align	2
 13310              		.set	.LANCHOR17,. + 0
 13311              	.LC20:
 13312 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 13312      22002E00 
 13312      00
 13313 0009 000000   		.space	3
 13314              	.LC24:
 13315 000c 33344306 		.ascii	"34C\0063.3\222T\000"
 13315      332E3392 
 13315      5400
 13316 0016 00000000 		.space	4
 13317 001a 0000     		.space	2
 13318              	.LC63:
 13319 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 13319      696E6700 
 13319      50726F47 
 13319      72614D6D 
 13319      00
 13320 002d 000000   		.space	3
 13321              	.LC64:
 13322 0030 446F6D61 		.ascii	"Domain\000\000"
 13322      696E0000 
 13323              	.LC65:
 13324 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 13324      74696D65 
 13324      006F7220 
 13324      64417445 
 13324      00
 13325 0049 000000   		.space	3
 13326              	.LC66:
 13327 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 13327      66696E65 
 13327      64004F70 
 13327      2D434F64 
 13327      4500
 13328 005e 0000     		.space	2
 13329              	.LC67:
 13330 0060 2B9F0000 		.ascii	"+\237\000\000"
 13331              	.LC68:
 13332 0064 2D9F0000 		.ascii	"-\237\000\000"
 13333              	.LC69:
 13334 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 13334      75636800 
 13334      4C416245 
 13334      4C00
 13335 0076 0000     		.space	2
 13336              	.LC70:
 13337 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 13337      67616C00 
ARM GAS  /tmp/ccCvaEE3.s 			page 373


 13337      4F504572 
 13337      4174696F 
 13337      6E00
 13338 008a 0000     		.space	2
 13339              	.LC71:
 13340 008c 4F757420 		.ascii	"Out of range\000\000"
 13340      6F662072 
 13340      616E6765 
 13340      0000
 13341 009a 0000     		.space	2
 13342              	.LC72:
 13343 009c 42616420 		.ascii	"Bad digit\000\000"
 13343      64696769 
 13343      740000
 13344 00a7 00       		.space	1
 13345              	.LC73:
 13346 00a8 546F6F20 		.ascii	"Too long\000\000"
 13346      6C6F6E67 
 13346      0000
 13347 00b2 0000     		.space	2
 13348              	.LC74:
 13349 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 13349      69730046 
 13349      754C4C00 
 13350              	.LC75:
 13351 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 13351      6B00434C 
 13351      41534800 
 13352              	.LC76:
 13353 00cc 42616420 		.ascii	"Bad mode\000\000"
 13353      6D6F6465 
 13353      0000
 13354 00d6 0000     		.space	2
 13355              	.LC77:
 13356 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 13356      06060673 
 13356      697A6500 
 13356      746F6F20 
 13356      534D6D41 
 13357 00ef 00       		.space	1
 13358              	.LC78:
 13359 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 13359      66657700 
 13359      64417441 
 13359      20506F69 
 13359      6E745300 
 13360              	.LC79:
 13361 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 13361      6C696400 
 13361      50617261 
 13361      4D6D4574 
 13361      457200
 13362 0117 00       		.space	1
 13363              	.LC80:
 13364 0118 492F4F00 		.ascii	"I/O\000\000"
 13364      00
 13365 011d 000000   		.space	3
ARM GAS  /tmp/ccCvaEE3.s 			page 374


 13366              	.LC81:
 13367 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 13367      6C696400 
 13367      64417441 
 13367      00
 13368 012d 000000   		.space	3
 13369              	.LC82:
 13370 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 13370      65005072 
 13370      6F744563 
 13370      74456400 
 13371              	.LC83:
 13372 0140 4E6F2072 		.ascii	"No root\000Found\000"
 13372      6F6F7400 
 13372      466F756E 
 13372      6400
 13373 014e 0000     		.space	2
 13374              	.LC84:
 13375 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 13375      6978004D 
 13375      6D49534D 
 13375      6D417443 
 13375      4800
 13376 0162 0000     		.space	2
 13377              	.LC85:
 13378 0164 53696E67 		.ascii	"Singular\000\000"
 13378      756C6172 
 13378      0000
 13379 016e 0000     		.space	2
 13380              	.LC86:
 13381 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 13381      68206973 
 13381      0046754C 
 13381      4C00
 13382 017e 0000     		.space	2
 13383              	.LC87:
 13384 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 13384      72797374 
 13384      616C0049 
 13384      6E537461 
 13384      4C4C4564 
 13385 0195 000000   		.space	3
 13386              	.LC88:
 13387 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 13387      6576656E 
 13387      20726567 
 13387      00666F72 
 13387      20436F4D 
 13388 01b2 0000     		.space	2
 13389              	.LC89:
 13390 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 13390      5800
 13391              		.section	.bss.DecimalMode,"aw",%nobits
 13392              		.set	.LANCHOR1,. + 0
 13395              	DecimalMode:
 13396 0000 00       		.space	1
 13397              		.section	.bss.SeparatorMode,"aw",%nobits
ARM GAS  /tmp/ccCvaEE3.s 			page 375


 13398              		.set	.LANCHOR0,. + 0
 13401              	SeparatorMode:
 13402 0000 00       		.space	1
 13403              		.section	.bss.no_status_top,"aw",%nobits
 13404              		.align	1
 13405              		.set	.LANCHOR18,. + 0
 13408              	no_status_top:
 13409 0000 0000     		.space	2
 13410              		.section	.rodata.CSWTCH.369,"a"
 13411              		.align	2
 13412              		.set	.LANCHOR11,. + 0
 13415              	CSWTCH.369:
 13416 0000 02000000 		.word	2
 13417 0004 08000000 		.word	8
 13418 0008 0A000000 		.word	10
 13419 000c 10000000 		.word	16
 13420              		.section	.rodata.CSWTCH.396,"a"
 13421              		.align	2
 13422              		.set	.LANCHOR16,. + 0
 13425              	CSWTCH.396:
 13426 0000 00000000 		.word	.LC45
 13427 0004 08000000 		.word	.LC46
 13428 0008 0C000000 		.word	.LC47
 13429              		.section	.rodata.DIGITS,"a"
 13430              		.align	2
 13431              		.set	.LANCHOR12,. + 0
 13434              	DIGITS:
 13435 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 13435      34353637 
 13435      38394142 
 13435      43444546 
 13435      00
 13436              		.section	.rodata.S7_ERROR,"a"
 13437              		.align	2
 13438              		.set	.LANCHOR26,. + 0
 13441              	S7_ERROR:
 13442 0000 4572726F 		.ascii	"Error\000"
 13442      7200
 13443              		.section	.rodata.S7_INF,"a"
 13444              		.align	2
 13445              		.set	.LANCHOR5,. + 0
 13448              	S7_INF:
 13449 0000 496E6669 		.ascii	"Infinity\000"
 13449      6E697479 
 13449      00
 13450              		.section	.rodata.S7_INF_Text,"a"
 13451              		.align	2
 13452              		.set	.LANCHOR7,. + 0
 13455              	S7_INF_Text:
 13456 0000 2049206E 		.ascii	" I n f i n i t y \000"
 13456      20662069 
 13456      206E2069 
 13456      20742079 
 13456      2000
 13457              		.section	.rodata.S7_NEG_INF_Text,"a"
 13458              		.align	2
 13459              		.set	.LANCHOR6,. + 0
ARM GAS  /tmp/ccCvaEE3.s 			page 376


 13462              	S7_NEG_INF_Text:
 13463 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 13463      20662069 
 13463      206E2069 
 13463      20742079 
 13463      2000
 13464              		.section	.rodata.S7_NaN,"a"
 13465              		.align	2
 13466              		.set	.LANCHOR3,. + 0
 13469              	S7_NaN:
 13470 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 13470      6E754D6D 
 13470      45726963 
 13470      00
 13471              		.section	.rodata.S7_NaN_Text,"a"
 13472              		.align	2
 13473              		.set	.LANCHOR4,. + 0
 13476              	S7_NaN_Text:
 13477 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 13477      20742020 
 13477      206E2075 
 13477      206D2065 
 13477      20722069 
 13478              		.section	.rodata.S7_STEP,"a"
 13479              		.align	2
 13480              		.set	.LANCHOR25,. + 0
 13483              	S7_STEP:
 13484 0000 53744550 		.ascii	"StEP \000"
 13484      2000
 13485              		.section	.rodata.S7_STEP_ShortText,"a"
 13486              		.align	2
 13487              		.set	.LANCHOR19,. + 0
 13490              	S7_STEP_ShortText:
 13491 0000 53544550 		.ascii	"STEP\000"
 13491      00
 13492              		.section	.rodata.S7_fract_EQ,"a"
 13493              		.align	2
 13494              		.set	.LANCHOR9,. + 0
 13497              	S7_fract_EQ:
 13498 0000 203D2000 		.ascii	" = \000"
 13499              		.section	.rodata.S7_fract_GT,"a"
 13500              		.align	2
 13501              		.set	.LANCHOR10,. + 0
 13504              	S7_fract_GT:
 13505 0000 20477400 		.ascii	" Gt\000"
 13506              		.section	.rodata.S7_fract_LT,"a"
 13507              		.align	2
 13508              		.set	.LANCHOR8,. + 0
 13511              	S7_fract_LT:
 13512 0000 204C7400 		.ascii	" Lt\000"
 13513              		.section	.rodata.S_SURE,"a"
 13514              		.align	2
 13515              		.set	.LANCHOR21,. + 0
 13518              	S_SURE:
 13519 0000 53757265 		.ascii	"Sure?\000"
 13519      3F00
 13520              		.section	.rodata.SvnRevision,"a"
ARM GAS  /tmp/ccCvaEE3.s 			page 377


 13521              		.align	2
 13522              		.set	.LANCHOR20,. + 0
 13525              	SvnRevision:
 13526 0000 38322020 		.ascii	"82  "
 13527              		.section	.rodata.digtbl,"a"
 13528              		.align	2
 13529              		.set	.LANCHOR2,. + 0
 13532              	digtbl:
 13533 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 13533      02421252 
 13533      2D000000 
 13533      00000000 
 13533      00
 13534 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 13534      00000017 
 13534      01000000 
 13534      00
 13535 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 13535      28000000 
 13535      0020664B 
 13535      00000010 
 13536 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 13536      5E5B3973 
 13536      77497F7B 
 13536      00000612 
 13536      0300787D 
 13537 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 13537      673D240F 
 13537      75266C6D 
 13537      6F7C7914 
 13537      73362F00 
 13538 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13538      161F7674 
 13538      6735040F 
 13538      75266915 
 13538      177C7914 
 13539 0076 000F003B 		.ascii	"\000\017\000;"
 13540              		.section	.rodata.error_table.8685,"a"
 13541              		.align	2
 13542              		.set	.LANCHOR27,. + 0
 13545              	error_table.8685:
 13546 0000 1C000000 		.word	.LC63
 13547 0004 30000000 		.word	.LC64
 13548 0008 38000000 		.word	.LC65
 13549 000c 4C000000 		.word	.LC66
 13550 0010 60000000 		.word	.LC67
 13551 0014 64000000 		.word	.LC68
 13552 0018 68000000 		.word	.LC69
 13553 001c 78000000 		.word	.LC70
 13554 0020 8C000000 		.word	.LC71
 13555 0024 9C000000 		.word	.LC72
 13556 0028 A8000000 		.word	.LC73
 13557 002c B4000000 		.word	.LC74
 13558 0030 C0000000 		.word	.LC75
 13559 0034 CC000000 		.word	.LC76
 13560 0038 D8000000 		.word	.LC77
 13561 003c F0000000 		.word	.LC78
ARM GAS  /tmp/ccCvaEE3.s 			page 378


 13562 0040 04010000 		.word	.LC79
 13563 0044 18010000 		.word	.LC80
 13564 0048 20010000 		.word	.LC81
 13565 004c 30010000 		.word	.LC82
 13566 0050 40010000 		.word	.LC83
 13567 0054 50010000 		.word	.LC84
 13568 0058 64010000 		.word	.LC85
 13569 005c 70010000 		.word	.LC86
 13570 0060 80010000 		.word	.LC87
 13571 0064 98010000 		.word	.LC88
 13572 0068 B4010000 		.word	.LC89
 13573              		.section	.rodata.error_table_text.8686,"a"
 13574              		.align	2
 13575              		.set	.LANCHOR28,. + 0
 13578              	error_table_text.8686:
 13579 0000 10000000 		.word	.LC48
 13580 0004 A8000000 		.word	.LC43
 13581 0008 20000000 		.word	.LC49
 13582 000c 30000000 		.word	.LC50
 13583 0010 A8000000 		.word	.LC43
 13584 0014 A8000000 		.word	.LC43
 13585 0018 40000000 		.word	.LC51
 13586 001c 4C000000 		.word	.LC52
 13587 0020 A8000000 		.word	.LC43
 13588 0024 A8000000 		.word	.LC43
 13589 0028 A8000000 		.word	.LC43
 13590 002c 60000000 		.word	.LC53
 13591 0030 6C000000 		.word	.LC54
 13592 0034 A8000000 		.word	.LC43
 13593 0038 78000000 		.word	.LC55
 13594 003c 8C000000 		.word	.LC56
 13595 0040 A4000000 		.word	.LC57
 13596 0044 A8000000 		.word	.LC43
 13597 0048 B8000000 		.word	.LC58
 13598 004c C4000000 		.word	.LC59
 13599 0050 D8000000 		.word	.LC60
 13600 0054 E4000000 		.word	.LC61
 13601 0058 A8000000 		.word	.LC43
 13602 005c 60000000 		.word	.LC53
 13603 0060 F8000000 		.word	.LC62
 13604 0064 A8000000 		.word	.LC43
 13605 0068 A8000000 		.word	.LC43
 13606              		.section	.rodata.libname,"a"
 13607              		.align	2
 13608              		.set	.LANCHOR22,. + 0
 13611              	libname:
 13612 0000 72414D6D 		.ascii	"rAMm\000"
 13612      00
 13613 0005 4C696220 		.ascii	"Lib \000"
 13613      00
 13614 000a 42757020 		.ascii	"Bup \000"
 13614      00
 13615 000f 726F4D6D 		.ascii	"roMm\000"
 13615      00
 13616              		.section	.rodata.libname_shorttext,"a"
 13617              		.align	2
 13618              		.set	.LANCHOR24,. + 0
ARM GAS  /tmp/ccCvaEE3.s 			page 379


 13621              	libname_shorttext:
 13622 0000 52616D00 		.ascii	"Ram\000"
 13623 0004 00       		.space	1
 13624 0005 4C696200 		.ascii	"Lib\000"
 13625 0009 00       		.space	1
 13626 000a 42757000 		.ascii	"Bup\000"
 13627 000e 00       		.space	1
 13628 000f 526F6D00 		.ascii	"Rom\000"
 13629 0013 00       		.space	1
 13630              		.section	.rodata.libname_text,"a"
 13631              		.align	2
 13632              		.set	.LANCHOR23,. + 0
 13635              	libname_text:
 13636 0000 20522061 		.ascii	" R a m \000"
 13636      206D2000 
 13637 0008 0000     		.space	2
 13638 000a 204C2069 		.ascii	" L i b \000"
 13638      20622000 
 13639 0012 0000     		.space	2
 13640 0014 20422075 		.ascii	" B u p \000"
 13640      20702000 
 13641 001c 0000     		.space	2
 13642 001e 2052206F 		.ascii	" R o m \000"
 13642      206D2000 
 13643 0026 0000     		.space	2
 13644              		.section	.rodata.shift_chars.8793,"a"
 13645              		.align	2
 13646              		.set	.LANCHOR15,. + 0
 13649              	shift_chars.8793:
 13650 0000 20111213 		.ascii	" \021\022\023"
 13651              		.section	.rodata.small_dots.8994,"a"
 13652              		.align	2
 13653              		.set	.LANCHOR14,. + 0
 13656              	small_dots.8994:
 13657 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13657      07E12C06 
 13657      07E12C06 
 13657      06
 13658              		.section	.rodata.small_minus.8993,"a"
 13659              		.align	2
 13660              		.set	.LANCHOR13,. + 0
 13663              	small_minus.8993:
 13664 0000 07C22D06 		.ascii	"\007\302-\006"
 13665              		.text
 13666              	.Letext0:
 13667              		.file 2 "src/decNumber/decContext.h"
 13668              		.file 3 "src/decNumber/decNumber.h"
 13669              		.file 4 "src/decNumber/decimal64.h"
 13670              		.file 5 "src/decNumber/decimal128.h"
 13671              		.file 6 "src/xeq.h"
 13672              		.file 7 "src/data.h"
 13673              		.file 8 "src/storage.h"
 13674              		.file 9 "src/display.h"
 13675              		.file 10 "src/consts.h"
 13676              		.file 11 "src/stats.h"
 13677              		.file 12 "src/revision.h"
 13678              		.file 13 "src/printer.h"
ARM GAS  /tmp/ccCvaEE3.s 			page 380


 13679              		.file 14 "src/charset7.h"
 13680              		.file 15 "src/lcd.h"
 13681              		.file 16 "src/decn.h"
 13682              		.file 17 "src/alpha.h"
 13683              		.file 18 "src/int.h"
ARM GAS  /tmp/ccCvaEE3.s 			page 381


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccCvaEE3.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccCvaEE3.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccCvaEE3.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccCvaEE3.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccCvaEE3.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccCvaEE3.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccCvaEE3.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccCvaEE3.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccCvaEE3.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccCvaEE3.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccCvaEE3.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccCvaEE3.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccCvaEE3.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccCvaEE3.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccCvaEE3.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccCvaEE3.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccCvaEE3.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccCvaEE3.s:1155   .text.set_exp:0000000000000000 $t
     /tmp/ccCvaEE3.s:1162   .text.set_exp:0000000000000000 set_exp
     /tmp/ccCvaEE3.s:1467   .text.set_exp:0000000000000118 $d
     /tmp/ccCvaEE3.s:1474   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccCvaEE3.s:1481   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccCvaEE3.s:1549   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccCvaEE3.s:1555   .text.set_decimal:0000000000000000 $t
     /tmp/ccCvaEE3.s:1562   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccCvaEE3.s:1658   .text.set_decimal:000000000000004c $d
     /tmp/ccCvaEE3.s:1666   .text.set_digits_string:0000000000000000 $t
     /tmp/ccCvaEE3.s:1673   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccCvaEE3.s:1767   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccCvaEE3.s:1771   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccCvaEE3.s:1778   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccCvaEE3.s:1925   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccCvaEE3.s:1937   .text.set_x_hms:0000000000000000 $t
     /tmp/ccCvaEE3.s:1944   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccCvaEE3.s:2445   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccCvaEE3.s:2455   .text.set_x_fract:0000000000000000 $t
     /tmp/ccCvaEE3.s:2462   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccCvaEE3.s:2898   .text.set_x_fract:0000000000000198 $d
     /tmp/ccCvaEE3.s:2913   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccCvaEE3.s:2914   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccCvaEE3.s:2917   .text.carry_overflow:0000000000000000 $t
     /tmp/ccCvaEE3.s:2924   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccCvaEE3.s:3061   .text.carry_overflow:0000000000000070 $d
     /tmp/ccCvaEE3.s:3071   .text.set_int_x:0000000000000000 $t
     /tmp/ccCvaEE3.s:3078   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccCvaEE3.s:3836   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.369:0000000000000000 CSWTCH.371
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccCvaEE3.s:3848   .text.set_int_x:0000000000000360 $t
     /tmp/ccCvaEE3.s:3955   .text.set_int_x:00000000000003c0 $d
     /tmp/ccCvaEE3.s:3962   .text.getdig:0000000000000000 $t
ARM GAS  /tmp/ccCvaEE3.s 			page 382


     /tmp/ccCvaEE3.s:3970   .text.getdig:0000000000000000 getdig
     /tmp/ccCvaEE3.s:3990   .text.getdig:0000000000000008 $d
     /tmp/ccCvaEE3.s:3995   .text.dot:0000000000000000 $t
     /tmp/ccCvaEE3.s:4003   .text.dot:0000000000000000 dot
     /tmp/ccCvaEE3.s:4026   .text.std_round_fix:0000000000000000 $t
     /tmp/ccCvaEE3.s:4034   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccCvaEE3.s:4191   .text.std_round_fix:0000000000000078 $d
     /tmp/ccCvaEE3.s:4196   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccCvaEE3.s:4204   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccCvaEE3.s:4303   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccCvaEE3.s:4309   .text.set_annunciators:0000000000000000 $t
     /tmp/ccCvaEE3.s:4316   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccCvaEE3.s:4655   .text.set_annunciators:00000000000000d8 $d
     /tmp/ccCvaEE3.s:4666   .text.pixel_length:0000000000000000 $t
     /tmp/ccCvaEE3.s:4674   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccCvaEE3.s:4765   .text.set_status:0000000000000000 $t
     /tmp/ccCvaEE3.s:4772   .text.set_status:0000000000000000 set_status
     /tmp/ccCvaEE3.s:4845   .text.set_status:0000000000000038 $d
     /tmp/ccCvaEE3.s:4850   .text.set_x_dn:0000000000000000 $t
     /tmp/ccCvaEE3.s:4858   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccCvaEE3.s:5646   .text.set_x_dn:0000000000000358 $d
     /tmp/ccCvaEE3.s:5653   .text.set_x_dn:0000000000000368 $t
     /tmp/ccCvaEE3.s:5806   .text.set_x_dn:0000000000000414 $d
     /tmp/ccCvaEE3.s:5812   .text.set_x_dn:000000000000041e $t
     /tmp/ccCvaEE3.s:5838   .text.set_x_dn:000000000000044a $d
     /tmp/ccCvaEE3.s:5844   .text.set_x_dn:0000000000000454 $t
     /tmp/ccCvaEE3.s:6434   .text.set_x_dn:00000000000006e0 $d
     /tmp/ccCvaEE3.s:6450   .text.set_x_dn:00000000000006fc $t
     /tmp/ccCvaEE3.s:7167   .text.set_x_dn:00000000000009d8 $d
     /tmp/ccCvaEE3.s:7176   .text.set_x:0000000000000000 $t
     /tmp/ccCvaEE3.s:7183   .text.set_x:0000000000000000 set_x
     /tmp/ccCvaEE3.s:7251   .text.format_reg:0000000000000000 $t
     /tmp/ccCvaEE3.s:7259   .text.format_reg:0000000000000000 format_reg
     /tmp/ccCvaEE3.s:7378   .text.format_reg:0000000000000064 $d
     /tmp/ccCvaEE3.s:7384   .text.set_status_right:0000000000000000 $t
     /tmp/ccCvaEE3.s:7391   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccCvaEE3.s:7535   .text.set_status_right:000000000000006c $d
     /tmp/ccCvaEE3.s:7540   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccCvaEE3.s:7547   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccCvaEE3.s:7672   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccCvaEE3.s:7677   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccCvaEE3.s:7735   .text.annunciators:0000000000000000 $t
     /tmp/ccCvaEE3.s:7742   .text.annunciators:0000000000000000 annunciators
     /tmp/ccCvaEE3.s:8188   .text.annunciators:0000000000000204 $d
     /tmp/ccCvaEE3.s:8206   .text.annunciators:0000000000000238 $t
     /tmp/ccCvaEE3.s:8875   .text.annunciators:0000000000000554 $d
     /tmp/ccCvaEE3.s:8893   .text.annunciators:0000000000000590 $t
     /tmp/ccCvaEE3.s:9001   .text.annunciators:0000000000000604 $d
     /tmp/ccCvaEE3.s:9013   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccCvaEE3.s:9080   .text.display:0000000000000000 $t
     /tmp/ccCvaEE3.s:9088   .text.display:0000000000000000 display
     /tmp/ccCvaEE3.s:9767   .text.display:000000000000030c $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccCvaEE3.s:9787   .text.display:000000000000034c $t
ARM GAS  /tmp/ccCvaEE3.s 			page 383


     /tmp/ccCvaEE3.s:10549  .text.display:0000000000000688 $d
     /tmp/ccCvaEE3.s:10575  .text.display:00000000000006dc $t
     /tmp/ccCvaEE3.s:11508  .text.display:0000000000000a34 $d
     /tmp/ccCvaEE3.s:11528  .text.display:0000000000000a64 $t
     /tmp/ccCvaEE3.s:12295  .text.display:0000000000000d6c $d
     /tmp/ccCvaEE3.s:12314  .text.display:0000000000000da0 $t
     /tmp/ccCvaEE3.s:12604  .text.display:0000000000000ec4 $d
     /tmp/ccCvaEE3.s:12620  .text.frozen_display:0000000000000000 $t
     /tmp/ccCvaEE3.s:12628  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccCvaEE3.s:12658  .text.frozen_display:000000000000001c $d
     /tmp/ccCvaEE3.s:12663  .text.message:0000000000000000 $t
     /tmp/ccCvaEE3.s:12671  .text.message:0000000000000000 message
     /tmp/ccCvaEE3.s:12800  .text.message:0000000000000060 $d
     /tmp/ccCvaEE3.s:12808  .text.error_message:0000000000000000 $t
     /tmp/ccCvaEE3.s:12816  .text.error_message:0000000000000000 error_message
     /tmp/ccCvaEE3.s:13091  .text.error_message:00000000000000dc $d
     /tmp/ccCvaEE3.s:13104  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccCvaEE3.s:13112  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccCvaEE3.s:13234  .text.stopwatch_message:0000000000000058 $d
     /tmp/ccCvaEE3.s:13240  .rodata.str1.4:0000000000000000 $d
     /tmp/ccCvaEE3.s:13415  .rodata.CSWTCH.369:0000000000000000 CSWTCH.369
     /tmp/ccCvaEE3.s:13434  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccCvaEE3.s:13408  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccCvaEE3.s:13525  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccCvaEE3.s:13309  .rodata:0000000000000000 $d
     /tmp/ccCvaEE3.s:13395  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccCvaEE3.s:13396  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccCvaEE3.s:13401  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccCvaEE3.s:13402  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccCvaEE3.s:13404  .bss.no_status_top:0000000000000000 $d
     /tmp/ccCvaEE3.s:13411  .rodata.CSWTCH.369:0000000000000000 $d
     /tmp/ccCvaEE3.s:13421  .rodata.CSWTCH.396:0000000000000000 $d
     /tmp/ccCvaEE3.s:13425  .rodata.CSWTCH.396:0000000000000000 CSWTCH.396
     /tmp/ccCvaEE3.s:13430  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccCvaEE3.s:13437  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccCvaEE3.s:13441  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccCvaEE3.s:13444  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccCvaEE3.s:13448  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccCvaEE3.s:13451  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccCvaEE3.s:13455  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccCvaEE3.s:13458  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccCvaEE3.s:13462  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccCvaEE3.s:13465  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccCvaEE3.s:13469  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccCvaEE3.s:13472  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccCvaEE3.s:13476  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccCvaEE3.s:13479  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccCvaEE3.s:13483  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccCvaEE3.s:13486  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccCvaEE3.s:13490  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccCvaEE3.s:13493  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccCvaEE3.s:13497  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccCvaEE3.s:13500  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccCvaEE3.s:13504  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccCvaEE3.s:13507  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccCvaEE3.s:13511  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
ARM GAS  /tmp/ccCvaEE3.s 			page 384


     /tmp/ccCvaEE3.s:13514  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccCvaEE3.s:13518  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccCvaEE3.s:13521  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccCvaEE3.s:13528  .rodata.digtbl:0000000000000000 $d
     /tmp/ccCvaEE3.s:13532  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccCvaEE3.s:13541  .rodata.error_table.8685:0000000000000000 $d
     /tmp/ccCvaEE3.s:13545  .rodata.error_table.8685:0000000000000000 error_table.8685
     /tmp/ccCvaEE3.s:13574  .rodata.error_table_text.8686:0000000000000000 $d
     /tmp/ccCvaEE3.s:13578  .rodata.error_table_text.8686:0000000000000000 error_table_text.8686
     /tmp/ccCvaEE3.s:13607  .rodata.libname:0000000000000000 $d
     /tmp/ccCvaEE3.s:13611  .rodata.libname:0000000000000000 libname
     /tmp/ccCvaEE3.s:13617  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccCvaEE3.s:13621  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccCvaEE3.s:13631  .rodata.libname_text:0000000000000000 $d
     /tmp/ccCvaEE3.s:13635  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccCvaEE3.s:13645  .rodata.shift_chars.8793:0000000000000000 $d
     /tmp/ccCvaEE3.s:13649  .rodata.shift_chars.8793:0000000000000000 shift_chars.8793
     /tmp/ccCvaEE3.s:13652  .rodata.small_dots.8994:0000000000000000 $d
     /tmp/ccCvaEE3.s:13656  .rodata.small_dots.8994:0000000000000000 small_dots.8994
     /tmp/ccCvaEE3.s:13659  .rodata.small_minus.8993:0000000000000000 $d
     /tmp/ccCvaEE3.s:13663  .rodata.small_minus.8993:0000000000000000 small_minus.8993

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
ARM GAS  /tmp/ccCvaEE3.s 			page 385


const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
argcmds
WasDataEntry
ProgFree
scopy_char
op_r2p
current_catalogue
catcmd
get_const
getprog
prt
multicmds
find_label_from
free_mem
free_flash
findmultilbl
slen
global_regs
ARM GAS  /tmp/ccCvaEE3.s 			page 386


alpha_rcl_s
SizeStatRegs
local_regs
copyreg
sigma_val
getX
packed_from_number
set_NaN
do_conv
StackBase
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing

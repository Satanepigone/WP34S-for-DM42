ARM GAS  /tmp/ccDDbRKQ.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/ccDDbRKQ.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  59:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  60:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  61:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  62:src/display.c **** 
  63:src/display.c **** /* Message strings
  64:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  65:src/display.c ****  * are for the upper dot matrix line.
  66:src/display.c ****  */
  67:src/display.c **** static const char S_SURE[] = "Sure?";
  68:src/display.c **** 
  69:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  70:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  71:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  72:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  73:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  74:src/display.c **** static const char S7_fract_LT[] = " Lt";
  75:src/display.c **** static const char S7_fract_GT[] = " Gt";
  76:src/display.c **** 
  77:src/display.c **** static const char libname[][5] = {
  78:src/display.c ****   "rAMm", "Lib ", "Bup ",
  79:src/display.c **** #ifndef REALBUILD
  80:src/display.c ****   "roMm"
  81:src/display.c **** #endif
  82:src/display.c **** };
  83:src/display.c **** 
  84:src/display.c **** 
  85:src/display.c **** /* Set the separator and decimal mode globals
  86:src/display.c ****  */
  87:src/display.c **** static void set_separator_decimal_modes(void) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 3


  29              		.loc 1 87 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  88:src/display.c ****   // Separators used by various modes
  89:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 89 3 view .LVU1
  35              		.loc 1 89 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
  90:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 90 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
  89:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 89 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
  89:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 89 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
  87:src/display.c ****   // Separators used by various modes
  44              		.loc 1 87 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
  89:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 89 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 90 5 is_stmt 1 view .LVU8
  91:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 91 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
  92:src/display.c ****   }
  93:src/display.c ****   else {
  94:src/display.c ****     SeparatorMode = SEP_COMMA;
  95:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96:src/display.c ****   }
  97:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 97 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
  91:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 91 17 view .LVU11
  57 0018 0124     		movs	r4, #1
  90:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 90 19 view .LVU12
  59 001a 0225     		movs	r5, #2
  91:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 91 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 97 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
  90:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 90 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
  91:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 91 5 is_stmt 1 view .LVU16
ARM GAS  /tmp/ccDDbRKQ.s 			page 4


  67              		.loc 1 97 3 view .LVU17
  68              		.loc 1 97 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 97 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
  98:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 98 5 is_stmt 1 view .LVU20
  76              		.loc 1 98 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
  99:src/display.c **** }
  80              		.loc 1 99 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
  94:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 94 5 is_stmt 1 view .LVU23
  95:src/display.c ****   }
  90              		.loc 1 95 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
  97:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 97 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
  95:src/display.c ****   }
  94              		.loc 1 95 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
  94:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 94 19 view .LVU27
  97 0038 0125     		movs	r5, #1
  97:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 97 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
  94:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 94 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
  95:src/display.c ****   }
 102              		.loc 1 95 5 is_stmt 1 view .LVU30
  97:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 97 3 view .LVU31
  97:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 97 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
  97:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 97 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 99 1 view .LVU34
ARM GAS  /tmp/ccDDbRKQ.s 			page 5


 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 100:src/display.c **** 
 101:src/display.c **** 
 102:src/display.c **** /* Table of error messages.
 103:src/display.c ****  * These consist of a double string.  The first is displayed in the
 104:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 105:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 106:src/display.c ****  */
 107:src/display.c **** void error_message(const unsigned int e) 
 108:src/display.c **** {
 109:src/display.c **** #define MSG1(top) top "\0"
 110:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 111:src/display.c **** 
 112:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 113:src/display.c ****   static const char *const error_table[] = 
 114:src/display.c ****     {
 115:src/display.c ****       // manually get the order correct!
 116:src/display.c ****       MSG2("Running", "ProGraMm"),
 117:src/display.c ****       MSG1("Domain"),
 118:src/display.c ****       MSG2("Bad time", "or dAtE"),
 119:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 120:src/display.c ****       MSG1("+\237"),
 121:src/display.c ****       MSG1("-\237"),
 122:src/display.c ****       MSG2("No such", "LAbEL"),
 123:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 124:src/display.c ****       MSG1("Out of range"),
 125:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 126:src/display.c ****       MSG2("Bad digit", "1"),
 127:src/display.c ****       MSG2("Too long", "1"),
 128:src/display.c **** #else
 129:src/display.c ****       MSG1("Bad digit"),
 130:src/display.c ****       MSG1("Too long"),
 131:src/display.c **** #endif
 132:src/display.c ****       MSG2("RAM is", "FuLL"),
 133:src/display.c ****       MSG2("Stack", "CLASH"),
ARM GAS  /tmp/ccDDbRKQ.s 			page 6


 134:src/display.c ****       MSG1("Bad mode"),
 135:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 136:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 137:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 138:src/display.c ****       MSG1("I/O"),
 139:src/display.c ****       MSG2("Invalid", "dAtA"),
 140:src/display.c ****       MSG2("Write", "ProtEctEd"),
 141:src/display.c ****       MSG2("No root", "Found"),
 142:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 143:src/display.c ****       MSG1("Singular"),
 144:src/display.c ****       MSG2("Flash is", "FuLL"),
 145:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 146:src/display.c **** #ifndef SHIFT_EXPONENT
 147:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 148:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 149:src/display.c ****       MSG2("Too\007\304 small", "1"),
 150:src/display.c **** #     else
 151:src/display.c ****       MSG2("Too small", "1"),
 152:src/display.c **** #     endif
 153:src/display.c ****       MSG2("Too big", "1"),
 154:src/display.c **** #  else
 155:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 156:src/display.c ****       MSG1("Too\007\304 small"),
 157:src/display.c **** #     else
 158:src/display.c ****       MSG1("Too small"),
 159:src/display.c **** #     endif
 160:src/display.c ****       MSG1("Too big"),
 161:src/display.c **** #  endif
 162:src/display.c **** #endif
 163:src/display.c **** #ifdef INCLUDE_C_LOCK
 164:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 165:src/display.c **** #endif
 166:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 167:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 168:src/display.c ****       MSG2("Interrupted", "X"),
 169:src/display.c **** #endif
 170:src/display.c ****     };
 171:src/display.c **** #undef MSG1
 172:src/display.c **** #undef MSG2
 173:src/display.c ****   if (e != ERR_NONE || Running) {
 174:src/display.c ****     const char *p = error_table[e];
 175:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 176:src/display.c ****     if (*q == '\0')
 177:src/display.c ****       q = S7_ERROR;
 178:src/display.c ****     if (*q == 'X') {
 179:src/display.c ****       DispMsg = p;
 180:src/display.c ****       frozen_display();
 181:src/display.c ****     }
 182:src/display.c ****     else {
 183:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 184:src/display.c ****       if (*q == '1')
 185:src/display.c **** 	q = CNULL;
 186:src/display.c **** #endif
 187:src/display.c ****       message(p, q);
 188:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 189:src/display.c ****     }
 190:src/display.c **** #ifdef INFRARED
ARM GAS  /tmp/ccDDbRKQ.s 			page 7


 191:src/display.c ****     if (Tracing) {
 192:src/display.c ****       if (*q == 'X')
 193:src/display.c **** 	print_reg(regX_idx, p, 0);
 194:src/display.c ****       else {
 195:src/display.c **** 	print_tab(0);
 196:src/display.c **** 	print_line(p, 0);
 197:src/display.c **** 	print(' ');
 198:src/display.c **** 	while (*q != '\0') {
 199:src/display.c **** 	  int c = *q;
 200:src/display.c **** 	  if (c >= 'A')
 201:src/display.c **** 	    c |= 0x60; // ASCII lower case
 202:src/display.c **** 	  print(c);
 203:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 204:src/display.c **** 	    ++q;
 205:src/display.c **** 	  ++q;
 206:src/display.c **** 	}
 207:src/display.c **** 	print_advance( 0 );
 208:src/display.c ****       }
 209:src/display.c ****     }
 210:src/display.c **** #endif
 211:src/display.c ****   }
 212:src/display.c **** }
 213:src/display.c **** 
 214:src/display.c **** 
 215:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 216:src/display.c ****  * display.
 217:src/display.c ****  */
 218:src/display.c **** #define D_TOP 64
 219:src/display.c **** #define D_TL 32
 220:src/display.c **** #define D_TR 8
 221:src/display.c **** #define D_MIDDLE 16
 222:src/display.c **** #define D_BL 4
 223:src/display.c **** #define D_BR 1
 224:src/display.c **** #define D_BOTTOM 2
 225:src/display.c **** 
 226:src/display.c **** #include "charset7.h"
 227:src/display.c **** 
 228:src/display.c **** #ifndef REALBUILD
 229:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 230:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 231:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 232:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 233:src/display.c **** 
 234:src/display.c **** static void set_mant_sign_dot()
 235:src/display.c **** {
 236:src/display.c ****   set_dot(MANT_SIGN);
 237:src/display.c **** }
 238:src/display.c **** 
 239:src/display.c **** static void clr_mant_sign_dot()
 240:src/display.c **** {
 241:src/display.c ****   clr_dot(MANT_SIGN);
 242:src/display.c **** }
 243:src/display.c **** 
 244:src/display.c **** static void set_exp_sign_dot()
 245:src/display.c **** {
 246:src/display.c ****   set_dot(EXP_SIGN);
 247:src/display.c **** }
ARM GAS  /tmp/ccDDbRKQ.s 			page 8


 248:src/display.c **** 
 249:src/display.c **** static void clr_exp_sign_dot()
 250:src/display.c **** {
 251:src/display.c ****   clr_dot(EXP_SIGN);
 252:src/display.c **** }
 253:src/display.c **** 
 254:src/display.c **** #else
 255:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 256:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 257:src/display.c **** 
 258:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 259:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 260:src/display.c **** 
 261:src/display.c **** #endif
 262:src/display.c **** 
 263:src/display.c **** #ifndef REALBUILD
 264:src/display.c **** int getdig(int ch)
 265:src/display.c **** #else
 266:src/display.c ****   static int getdig(int ch)
 267:src/display.c **** #endif
 268:src/display.c **** {
 269:src/display.c ****   // perform index lookup
 270:src/display.c ****   return digtbl[ch&0xff];
 271:src/display.c **** }
 272:src/display.c **** 
 273:src/display.c **** void dot(int n, int on) {
 274:src/display.c ****   if (on)	set_dot(n);
 275:src/display.c ****   else	clr_dot(n);
 276:src/display.c **** }
 277:src/display.c **** 
 278:src/display.c **** 
 279:src/display.c **** /* Set the decimal point *after* the indicated digit
 280:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 281:src/display.c ****  * of decimal.
 282:src/display.c ****  */
 283:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 284:src/display.c ****   if (res) {
 285:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 286:src/display.c ****   } else {
 287:src/display.c ****     set_dot(posn+7);
 288:src/display.c ****     if (decimal != DECIMAL_DOT)
 289:src/display.c ****       set_dot(posn+8);
 290:src/display.c ****   }
 291:src/display.c ****   return res;
 292:src/display.c **** }
 293:src/display.c **** 
 294:src/display.c **** /* Set the digit group separator *before* the specified digit.
 295:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 296:src/display.c ****  * sep argument.
 297:src/display.c ****  */
 298:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 299:src/display.c ****   if (sep == SEP_NONE)
 300:src/display.c ****     return res;
 301:src/display.c ****   if (res) {
 302:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 303:src/display.c ****     else *res++ = '.';
 304:src/display.c ****   } else {
ARM GAS  /tmp/ccDDbRKQ.s 			page 9


 305:src/display.c ****     posn -= SEGS_PER_DIGIT;
 306:src/display.c ****     set_dot(posn+7);
 307:src/display.c ****     if (sep == SEP_COMMA)
 308:src/display.c ****       set_dot(posn+8);
 309:src/display.c ****   }
 310:src/display.c ****   return res;
 311:src/display.c **** }
 312:src/display.c **** 
 313:src/display.c **** /* Set a digit in positions [base, base+6] */
 314:src/display.c **** static void set_dig(int base, int ch)
 315:src/display.c **** {
 136              		.loc 1 315 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 316:src/display.c ****   int i;
 140              		.loc 1 316 3 view .LVU36
 317:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 317 3 view .LVU37
 142              	.LBB187:
 143              	.LBI187:
 264:src/display.c **** #else
 144              		.loc 1 264 5 view .LVU38
 145              	.LBB188:
 270:src/display.c **** }
 146              		.loc 1 270 3 view .LVU39
 270:src/display.c **** }
 147              		.loc 1 270 16 is_stmt 0 view .LVU40
 148 0000 0A4B     		ldr	r3, .L24
 270:src/display.c **** }
 149              		.loc 1 270 19 view .LVU41
 150 0002 C9B2     		uxtb	r1, r1
 151              	.LVL1:
 270:src/display.c **** }
 152              		.loc 1 270 19 view .LVU42
 153              	.LBE188:
 154              	.LBE187:
 315:src/display.c ****   int i;
 155              		.loc 1 315 1 view .LVU43
 156 0004 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB190:
 163              	.LBB189:
 270:src/display.c **** }
 164              		.loc 1 270 16 view .LVU44
 165 0006 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 166              	.LVL2:
 270:src/display.c **** }
 167              		.loc 1 270 16 view .LVU45
 168              	.LBE189:
 169              	.LBE190:
 318:src/display.c ****   for (i=6; i>=0; i--)
 170              		.loc 1 318 3 is_stmt 1 view .LVU46
ARM GAS  /tmp/ccDDbRKQ.s 			page 10


 171              		.loc 1 318 13 view .LVU47
 172 0008 851D     		adds	r5, r0, #6
 173              		.loc 1 318 9 is_stmt 0 view .LVU48
 174 000a 0624     		movs	r4, #6
 175 000c 03E0     		b	.L19
 176              	.LVL3:
 177              	.L23:
 319:src/display.c ****     {
 320:src/display.c ****       //		dot(base, c & (1 << i));
 321:src/display.c ****       if (c & (1 << i))
 322:src/display.c **** 	set_dot(base);
 178              		.loc 1 322 2 view .LVU49
 179 000e FFF7FEFF 		bl	set_dot
 180              	.LVL4:
 323:src/display.c ****       else
 324:src/display.c **** 	clr_dot(base);
 325:src/display.c ****       base++;
 181              		.loc 1 325 7 is_stmt 1 view .LVU50
 318:src/display.c ****     {
 182              		.loc 1 318 19 view .LVU51
 318:src/display.c ****     {
 183              		.loc 1 318 3 is_stmt 0 view .LVU52
 184 0012 013C     		subs	r4, r4, #1
 185              	.LVL5:
 318:src/display.c ****     {
 186              		.loc 1 318 3 view .LVU53
 187 0014 09D3     		bcc	.L22
 188              	.LVL6:
 189              	.L19:
 322:src/display.c ****       else
 190              		.loc 1 322 2 is_stmt 1 view .LVU54
 324:src/display.c ****       base++;
 191              		.loc 1 324 2 view .LVU55
 321:src/display.c **** 	set_dot(base);
 192              		.loc 1 321 11 is_stmt 0 view .LVU56
 193 0016 46FA04F3 		asr	r3, r6, r4
 321:src/display.c **** 	set_dot(base);
 194              		.loc 1 321 10 view .LVU57
 195 001a DB07     		lsls	r3, r3, #31
 196 001c A5EB0400 		sub	r0, r5, r4
 197              	.LVL7:
 321:src/display.c **** 	set_dot(base);
 198              		.loc 1 321 7 is_stmt 1 view .LVU58
 321:src/display.c **** 	set_dot(base);
 199              		.loc 1 321 10 is_stmt 0 view .LVU59
 200 0020 F5D4     		bmi	.L23
 324:src/display.c ****       base++;
 201              		.loc 1 324 2 view .LVU60
 202 0022 FFF7FEFF 		bl	clr_dot
 203              	.LVL8:
 204              		.loc 1 325 7 is_stmt 1 view .LVU61
 318:src/display.c ****     {
 205              		.loc 1 318 19 view .LVU62
 318:src/display.c ****     {
 206              		.loc 1 318 3 is_stmt 0 view .LVU63
 207 0026 013C     		subs	r4, r4, #1
 208              	.LVL9:
ARM GAS  /tmp/ccDDbRKQ.s 			page 11


 318:src/display.c ****     {
 209              		.loc 1 318 3 view .LVU64
 210 0028 F5D2     		bcs	.L19
 211              	.LVL10:
 212              	.L22:
 326:src/display.c ****     }
 327:src/display.c **** }
 213              		.loc 1 327 1 view .LVU65
 214 002a 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL11:
 216              	.L25:
 217              		.loc 1 327 1 view .LVU66
 218              		.align	2
 219              	.L24:
 220 002c 00000000 		.word	.LANCHOR2
 221              		.cfi_endproc
 222              	.LFE10:
 224              		.section	.text.hms_render,"ax",%progbits
 225              		.align	1
 226              		.p2align 2,,3
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	hms_render:
 233              	.LVL12:
 234              	.LFB21:
 328:src/display.c **** 
 329:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 330:src/display.c ****   if (res) *res++ = ch;
 331:src/display.c ****   else	set_dig(base, ch);
 332:src/display.c ****   return res;
 333:src/display.c **** }
 334:src/display.c **** 
 335:src/display.c **** 
 336:src/display.c **** static void set_digits_string(const char *msg, int j) {
 337:src/display.c ****   for (; *msg != '\0'; msg++) {
 338:src/display.c ****     if (*msg == '.' || *msg == ',')
 339:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 340:src/display.c ****     else {
 341:src/display.c ****       set_dig_s(j, *msg, CNULL);
 342:src/display.c ****       j += SEGS_PER_DIGIT;
 343:src/display.c ****     }
 344:src/display.c ****   }
 345:src/display.c **** }
 346:src/display.c **** 
 347:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 348:src/display.c ****   int i;
 349:src/display.c ****   const int n = res == NULL ? 3 : 4;
 350:src/display.c **** 
 351:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 352:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 353:src/display.c **** }
 354:src/display.c **** 
 355:src/display.c **** /* Force the exponent display
 356:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 357:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
ARM GAS  /tmp/ccDDbRKQ.s 			page 12


 358:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 359:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 360:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 361:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 362:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 363:src/display.c ****  */
 364:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 365:src/display.c ****   union {
 366:src/display.c ****     char buf[4];
 367:src/display.c ****     int i;
 368:src/display.c ****   } u;
 369:src/display.c ****   int negative;
 370:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 371:src/display.c ****   int thousands;
 372:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 373:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 374:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 375:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 376:src/display.c **** #  else
 377:src/display.c ****   const int show_large_exponent = 1;
 378:src/display.c **** #  endif
 379:src/display.c **** #else
 380:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 381:src/display.c ****   int thousands;
 382:src/display.c **** #  endif
 383:src/display.c ****   const int show_large_exponent = 0;
 384:src/display.c **** #endif
 385:src/display.c **** 
 386:src/display.c ****   negative = flags & 2;
 387:src/display.c ****   if (exp < 0) {
 388:src/display.c ****     negative = 1;
 389:src/display.c ****     exp = -exp;
 390:src/display.c ****   }
 391:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 392:src/display.c ****   thousands = exp / 1000;
 393:src/display.c **** #endif
 394:src/display.c ****   if (res) {
 395:src/display.c **** #ifdef INCLUDE_YREG_CODE
 396:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 397:src/display.c ****     if (thousands != 0) {
 398:src/display.c **** #else
 399:src/display.c ****       if (exp > 999) {
 400:src/display.c **** #endif
 401:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 402:src/display.c **** 	// No exponent separator for large -ve exponents
 403:src/display.c ****       }
 404:src/display.c ****       else *res++ = 'e'; // Normal separator
 405:src/display.c **** #else
 406:src/display.c ****       *res++ = 'e';
 407:src/display.c **** #endif
 408:src/display.c ****       if (negative) *res++ = '-';
 409:src/display.c ****     }
 410:src/display.c ****     else {
 411:src/display.c ****       if (negative) SET_EXP_SIGN;
 412:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 413:src/display.c ****       if (thousands != 0) {
 414:src/display.c **** #else
ARM GAS  /tmp/ccDDbRKQ.s 			page 13


 415:src/display.c **** 	if (exp > 999) {
 416:src/display.c **** #endif
 417:src/display.c **** 	  if (!show_large_exponent
 418:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 419:src/display.c **** 	      && (flags & 8) == 0
 420:src/display.c **** #endif
 421:src/display.c **** 	      ) {
 422:src/display.c **** #ifdef REALBUILD
 423:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 424:src/display.c **** #else
 425:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 426:src/display.c **** #endif
 427:src/display.c **** 	    goto no_number;
 428:src/display.c **** 	  }
 429:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 430:src/display.c **** 	  else {
 431:src/display.c **** 	    exp -= thousands * 1000;
 432:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 433:src/display.c **** 	    if (flags & 16) {
 434:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 435:src/display.c **** 	      int i;
 436:src/display.c **** 
 437:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 438:src/display.c **** 		// Clear digits and separators
 439:src/display.c **** 		clr_dot(i);
 440:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 441:src/display.c **** 	    }
 442:src/display.c **** #  endif
 443:src/display.c **** 	    if (negative) {
 444:src/display.c **** 	      CLR_EXP_SIGN;
 445:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 446:src/display.c **** 	    }
 447:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 448:src/display.c **** 	    flags = 1;
 449:src/display.c **** 	  }
 450:src/display.c **** #endif
 451:src/display.c **** 	}
 452:src/display.c ****       }
 453:src/display.c **** #ifdef REALBUILD
 454:src/display.c ****       u.i = 0; // Smaller ARM code
 455:src/display.c **** #else
 456:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 457:src/display.c **** #endif
 458:src/display.c ****       if (flags & 5) {
 459:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 460:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 461:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 462:src/display.c **** 	  int i;
 463:src/display.c **** 
 464:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 465:src/display.c **** 	    if (u.buf[i] == '0')
 466:src/display.c **** 	      u.buf[i] = ' ';
 467:src/display.c **** 	    else
 468:src/display.c **** 	      break;
 469:src/display.c **** 	  }
 470:src/display.c **** 	  if (i != 0 && negative) {
 471:src/display.c **** 	    // Move minus sign to right in front of exponent
ARM GAS  /tmp/ccDDbRKQ.s 			page 14


 472:src/display.c **** 	    CLR_EXP_SIGN;
 473:src/display.c **** 	    u.buf[i - 1] = '-';
 474:src/display.c **** 	  }
 475:src/display.c **** 	}
 476:src/display.c **** #endif
 477:src/display.c ****       }
 478:src/display.c ****       else
 479:src/display.c **** 	num_arg(u.buf, exp);
 480:src/display.c ****     no_number:
 481:src/display.c ****       set_exp_digits_string(u.buf, res);
 482:src/display.c ****     }
 483:src/display.c **** 
 484:src/display.c ****     static void carry_overflow(void) {
 485:src/display.c ****       const int base = SEGS_EXP_BASE;
 486:src/display.c ****       int c;
 487:src/display.c ****       unsigned int b;
 488:src/display.c **** 
 489:src/display.c ****       // Figure out the base
 490:src/display.c ****       switch (State2.smode) {
 491:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 492:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 493:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 494:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 495:src/display.c ****       default:	b = UState.int_base+1;	break;
 496:src/display.c ****       }
 497:src/display.c **** 
 498:src/display.c ****       // Display the base as the first exponent digit
 499:src/display.c ****       if (b > 10 && b < 16)
 500:src/display.c **** 	SET_EXP_SIGN;
 501:src/display.c ****       c = "B34567o9D12345h"[b-2];
 502:src/display.c ****       set_dig(base, c);
 503:src/display.c **** 
 504:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 505:src/display.c ****       if (get_carry())
 506:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 507:src/display.c ****       if (get_overflow())
 508:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 509:src/display.c ****     }
 510:src/display.c **** 
 511:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 512:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 513:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 514:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 515:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 516:src/display.c **** #endif
 517:src/display.c **** 
 518:src/display.c ****     /* Display the annunicator text line.
 519:src/display.c ****      * Care needs to be taken to keep things aligned.
 520:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 521:src/display.c ****      */
 522:src/display.c **** #ifdef TOP_ROW
 523:src/display.c ****     static void annunciators(void) {
 524:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 525:src/display.c ****       char buf[42], *p = buf, *q="";
 526:src/display.c ****       char buf2[42], *p2 = buf2;
 527:src/display.c ****       int n;
 528:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
ARM GAS  /tmp/ccDDbRKQ.s 			page 15


 529:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 530:src/display.c ****       // Constant variables and code branches depending on a constant variable
 531:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 532:src/display.c ****       // feature run-time configurable if needed.
 533:src/display.c **** #ifdef INCLUDE_YREG_CODE
 534:src/display.c **** #  ifdef YREG_ALWAYS_ON
 535:src/display.c ****       const int yreg_enabled = 1;
 536:src/display.c **** #  else
 537:src/display.c ****       const int yreg_enabled = UState.show_y;
 538:src/display.c **** #  endif
 539:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 540:src/display.c ****       const int yreg_hms = 1;
 541:src/display.c **** #  else
 542:src/display.c ****       const int yreg_hms = 0;
 543:src/display.c **** #  endif
 544:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 545:src/display.c ****       const int yreg_fract = 1;
 546:src/display.c **** #  else
 547:src/display.c ****       const int yreg_fract = 0;
 548:src/display.c **** #  endif
 549:src/display.c **** #else
 550:src/display.c ****       const int yreg_enabled = 0;
 551:src/display.c ****       const int yreg_hms = 0;
 552:src/display.c ****       const int yreg_fract = 0;
 553:src/display.c **** #endif
 554:src/display.c **** #ifdef RP_PREFIX
 555:src/display.c ****       const int rp_prefix = 1;
 556:src/display.c **** #else
 557:src/display.c ****       const int rp_prefix = 0;
 558:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 559:src/display.c **** #endif
 560:src/display.c ****       // Indicates whether font escape code is compiled in.
 561:src/display.c ****       // This variable will always be set at compile time.
 562:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 563:src/display.c ****       const int has_FONT_ESCAPE = 1;
 564:src/display.c **** #else
 565:src/display.c ****       const int has_FONT_ESCAPE = 0;
 566:src/display.c **** #endif
 567:src/display.c **** 
 568:src/display.c ****       xset(buf, '\0', sizeof(buf));
 569:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 570:src/display.c ****       
 571:src/display.c ****       if (is_intmode()) {
 572:src/display.c **** #ifdef SHOW_STACK_SIZE
 573:src/display.c **** 	if (shift_char == ' ') {
 574:src/display.c **** 	  *p2++ = '\007';
 575:src/display.c **** 	  *p2++ = '\346';
 576:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 577:src/display.c **** 	}
 578:src/display.c **** 	else
 579:src/display.c **** #endif
 580:src/display.c **** 	  {
 581:src/display.c **** 	    *p2++ = shift_char;
 582:src/display.c **** 	    *p2++ = '\006';
 583:src/display.c **** 	  }
 584:src/display.c **** 
 585:src/display.c **** 	switch(int_mode()) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 16


 586:src/display.c **** 	default:
 587:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 588:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 589:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 590:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 591:src/display.c **** 	}
 592:src/display.c **** 	q = scopy(p2, q);
 593:src/display.c **** 	*q++ = '\006';
 594:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 595:src/display.c **** 
 596:src/display.c **** 	if (IntMaxWindow > 0) {
 597:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 598:src/display.c **** 	  if (*q == '1')
 599:src/display.c **** 	    n += 2;
 600:src/display.c **** 	  if (q[1] == '1')
 601:src/display.c **** 	    n += 2;
 602:src/display.c **** 	  while (n-- > 0)
 603:src/display.c **** 	    *p2++ = '\006';
 604:src/display.c **** 
 605:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 606:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 607:src/display.c **** 	}
 608:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 609:src/display.c ****       }
 610:src/display.c **** #ifdef INCLUDE_C_LOCK
 611:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 612:src/display.c **** #else
 613:src/display.c ****       else if (!yreg_enabled
 614:src/display.c **** #endif
 615:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 616:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 617:src/display.c **** #endif
 618:src/display.c **** 	       ) {
 619:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 620:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 621:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 622:src/display.c **** 	if (shift_char == ' ') {
 623:src/display.c **** 	  *p2++ = '\007';
 624:src/display.c **** 	  *p2++ = '\342';
 625:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 626:src/display.c **** 	  *p2++ = '\007';
 627:src/display.c **** 	  *p2++ = '\344';
 628:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 629:src/display.c **** 	}
 630:src/display.c **** 	else
 631:src/display.c **** #endif
 632:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 633:src/display.c **** 	    *p2++ = shift_char;
 634:src/display.c **** 	    *p2++ = '\006';
 635:src/display.c **** 	  }
 636:src/display.c **** 	  else {
 637:src/display.c **** 	    *p2++ = 'D';
 638:src/display.c **** 	  }
 639:src/display.c **** 
 640:src/display.c **** 	if (State2.cmplx) {
 641:src/display.c **** 	  *p2++ = ' ';
 642:src/display.c **** 	  *p2 = '\024';
ARM GAS  /tmp/ccDDbRKQ.s 			page 17


 643:src/display.c **** 	  goto skip;
 644:src/display.c **** 	}
 645:src/display.c **** 	if (State2.arrow) {
 646:src/display.c **** 	  *p2++ = ' ';
 647:src/display.c **** 	  *p2 = '\015';
 648:src/display.c **** 	  goto skip;
 649:src/display.c **** 	}
 650:src/display.c **** 
 651:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 652:src/display.c **** 	  if (State2.wascomplex) {
 653:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 654:src/display.c **** 	  }
 655:src/display.c **** 	  else if (rp_prefix) {
 656:src/display.c **** 	    if (RectPolConv == 1) {
 657:src/display.c **** 	      q = "\007\306<";
 658:src/display.c **** 	    }
 659:src/display.c **** 	    else {
 660:src/display.c **** 	      q = "\007\306y";
 661:src/display.c **** 	    }
 662:src/display.c **** 	  }
 663:src/display.c **** 	  p = scopy(buf, q);
 664:src/display.c **** 
 665:src/display.c **** 	  goto display_yreg;
 666:src/display.c **** 	}
 667:src/display.c **** 
 668:src/display.c **** 	switch (UState.date_mode) {
 669:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 670:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 671:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 672:src/display.c **** #endif
 673:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 674:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 675:src/display.c **** #endif
 676:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 677:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 678:src/display.c **** #endif
 679:src/display.c **** #endif
 680:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 681:src/display.c **** 	}
 682:src/display.c **** 	p2 = scopy(p2, q);
 683:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 684:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 685:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 686:src/display.c **** 	}
 687:src/display.c **** #else
 688:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 689:src/display.c **** 	*p2++ = '\007';
 690:src/display.c **** 	*p2++ = '\342';
 691:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 692:src/display.c **** #endif
 693:src/display.c ****       }
 694:src/display.c ****       else { // yreg_enabled
 695:src/display.c **** 	// do top-related things first
 696:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 697:src/display.c **** 	if (State2.cmplx) {
 698:src/display.c **** 	  *p2++ = '\007';
 699:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
ARM GAS  /tmp/ccDDbRKQ.s 			page 18


 700:src/display.c **** 	  *p2++ = shift_char;
 701:src/display.c **** 	  *p2++ = '\024';
 702:src/display.c **** 	}
 703:src/display.c **** 	else {// if (shift_char != ' ') {
 704:src/display.c **** 	  *p2++ = '\007';
 705:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 706:src/display.c **** 	  *p2++ = shift_char;
 707:src/display.c **** 	}
 708:src/display.c **** #endif
 709:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 710:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 711:src/display.c **** 	  *p2++ = '\007';
 712:src/display.c **** 	  *p2++ = '\207';
 713:src/display.c **** 	  *p2++ = '\007';	    
 714:src/display.c **** 	}
 715:src/display.c **** 	else {
 716:src/display.c **** 	  *p2++ = '\007';
 717:src/display.c **** 	  *p2++ = '\207';
 718:src/display.c **** 	  *p2++ = ' ';
 719:src/display.c **** 	}
 720:src/display.c **** #endif
 721:src/display.c **** #ifndef SHOW_STACK_SIZE
 722:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 723:src/display.c **** 	p2 = scopy(p2, q);
 724:src/display.c **** #else
 725:src/display.c **** 	if (is_dblmode()) {
 726:src/display.c **** 	  *p2++ = '\007';
 727:src/display.c **** 	  *p2++ = '\342';
 728:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 729:src/display.c **** 	  *p2++ = '\007';
 730:src/display.c **** 	  *p2++ = '\345';
 731:src/display.c **** 	  *p2++ = 'D';
 732:src/display.c **** 	}
 733:src/display.c **** 	else {
 734:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 735:src/display.c **** 	  p2 = scopy(p2, q);
 736:src/display.c **** 	}
 737:src/display.c **** #endif
 738:src/display.c **** 
 739:src/display.c **** 	switch (UState.date_mode) {
 740:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 741:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 742:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 743:src/display.c **** #endif
 744:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 745:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 748:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #endif
 751:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 752:src/display.c **** 	}
 753:src/display.c **** 	  
 754:src/display.c **** 	//      no_copy:
 755:src/display.c **** 	// display either arrow or datemode
 756:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 19


 757:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 758:src/display.c **** 	} // no need to skip y display with arrow here
 759:src/display.c **** 	else {
 760:src/display.c **** 	  p2 = scopy(p2, q);
 761:src/display.c **** 	}
 762:src/display.c **** 	// now do the annotations, if any, for the middle row:
 763:src/display.c **** #ifdef INCLUDE_C_LOCK
 764:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 765:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 766:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 767:src/display.c **** 	  }
 768:src/display.c **** 	  else {
 769:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 770:src/display.c **** 	  }
 771:src/display.c **** 	  scopy(p, q);
 772:src/display.c **** 	  goto skip;
 773:src/display.c **** 	}
 774:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 775:src/display.c **** 	  q = "\007\307<";
 776:src/display.c **** 	  p = scopy(p, q);
 777:src/display.c **** 	}
 778:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 779:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 780:src/display.c **** 	  p = scopy(p, q);
 781:src/display.c **** 	}
 782:src/display.c **** #else
 783:src/display.c **** 	
 784:src/display.c **** 	if (State2.wascomplex) {
 785:src/display.c **** 	  q = "\007\207i";
 786:src/display.c **** 	  p = scopy(p, q);
 787:src/display.c **** 	  //	    goto no_copy;
 788:src/display.c **** 	}
 789:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 790:src/display.c **** 	  q = "\007\307<";
 791:src/display.c **** 	  p = scopy(p, q);
 792:src/display.c **** 	  //	    goto no_copy;
 793:src/display.c **** 	}
 794:src/display.c **** 	else
 795:src/display.c **** #endif
 796:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 797:src/display.c **** 	    q = "\007\307y";
 798:src/display.c **** 	    p = scopy(p, q);
 799:src/display.c **** 	    //	    goto no_copy;
 800:src/display.c **** 	  }
 801:src/display.c ****       
 802:src/display.c **** 	if (State2.runmode) {
 803:src/display.c **** 	  decNumber y;
 804:src/display.c **** 	display_yreg:
 805:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 806:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 807:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 808:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 809:src/display.c **** 	   */
 810:src/display.c **** 	  if (is_intmode()) {
 811:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 812:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 813:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
ARM GAS  /tmp/ccDDbRKQ.s 			page 20


 814:src/display.c **** 	    goto skip;
 815:src/display.c **** 	  }
 816:src/display.c **** #ifdef INCLUDE_C_LOCK
 817:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 818:src/display.c **** 	    getRegister(&y, regK_idx);
 819:src/display.c **** 	  }
 820:src/display.c **** 	  else {
 821:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 822:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 823:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 824:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 825:src/display.c **** 	  }
 826:src/display.c **** #else
 827:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 828:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 829:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 830:src/display.c **** #endif
 831:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 832:src/display.c **** #ifdef INCLUDE_C_LOCK
 833:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 834:src/display.c **** #else
 835:src/display.c **** 	    if (yreg_hms && State2.hms) {
 836:src/display.c **** #endif
 837:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 838:src/display.c **** 
 839:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 840:src/display.c **** 	      UState.nothousands = 1;
 841:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 842:src/display.c **** 	      UState.nothousands = saved_nothousands;
 843:src/display.c **** 	      // First replace the '@' character with the degree symbol
 844:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 845:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 846:src/display.c **** 	      // then remove the fractional part of the seconds.
 847:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 848:src/display.c **** 	      while (*p) {
 849:src/display.c **** 		replace_char(buf, p[0], p[1]);
 850:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 851:src/display.c **** 		  goto skip;
 852:src/display.c **** 		}
 853:src/display.c **** 		p += 2;
 854:src/display.c **** 	      }
 855:src/display.c **** 	      goto skip;
 856:src/display.c **** 	    }
 857:src/display.c **** 	    if (yreg_fract && UState.fract
 858:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 859:src/display.c **** 		&& !State2.cmplx
 860:src/display.c **** #endif
 861:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 862:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 863:src/display.c **** #endif
 864:src/display.c **** 		&& set_x_fract(&y, p)) {
 865:src/display.c **** 	      char ltgteq;
 866:src/display.c **** 
 867:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 868:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 869:src/display.c **** 	      ltgteq = *q;
 870:src/display.c **** 	      switch (ltgteq) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 21


 871:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 872:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 873:src/display.c **** 	      }
 874:src/display.c **** 	      scopy(q, "\007\344?");
 875:src/display.c **** 	      q[2] = ltgteq;
 876:src/display.c **** 
 877:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 878:src/display.c **** 		goto skip;
 879:src/display.c **** 	      }
 880:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 881:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 882:src/display.c **** 		goto skip;
 883:src/display.c **** 	      }
 884:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 885:src/display.c **** 	    }
 886:src/display.c **** 	  }
 887:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 888:src/display.c **** 	    int extra_pixels;
 889:src/display.c **** 
 890:src/display.c **** 	    set_x_dn(&y, p, &n);
 891:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 892:src/display.c **** 	    if (extra_pixels <= 0)
 893:src/display.c **** 	      break;
 894:src/display.c **** 
 895:src/display.c **** 	    xset(p, '\0', n+10);
 896:src/display.c **** 
 897:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 898:src/display.c **** 	  }
 899:src/display.c **** 	}
 900:src/display.c ****       }
 901:src/display.c ****       
 902:src/display.c ****     skip:
 903:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 904:src/display.c ****       set_status_top_always(buf2);
 905:src/display.c ****       
 906:src/display.c ****     }
 907:src/display.c **** #else
 908:src/display.c ****     static void annunciators(void) {
 909:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 910:src/display.c ****       char buf[42], *p = buf, *q="";
 911:src/display.c ****       int n;
 912:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 913:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 914:src/display.c ****       // Constant variables and code branches depending on a constant variable
 915:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 916:src/display.c ****       // feature run-time configurable if needed.
 917:src/display.c **** #ifdef INCLUDE_YREG_CODE
 918:src/display.c **** #  ifdef YREG_ALWAYS_ON
 919:src/display.c ****       const int yreg_enabled = 1;
 920:src/display.c **** #  else
 921:src/display.c ****       const int yreg_enabled = UState.show_y;
 922:src/display.c **** #  endif
 923:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 924:src/display.c ****       const int yreg_hms = 1;
 925:src/display.c **** #  else
 926:src/display.c ****       const int yreg_hms = 0;
 927:src/display.c **** #  endif
ARM GAS  /tmp/ccDDbRKQ.s 			page 22


 928:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 929:src/display.c ****       const int yreg_fract = 1;
 930:src/display.c **** #  else
 931:src/display.c ****       const int yreg_fract = 0;
 932:src/display.c **** #  endif
 933:src/display.c **** #else
 934:src/display.c ****       const int yreg_enabled = 0;
 935:src/display.c ****       const int yreg_hms = 0;
 936:src/display.c ****       const int yreg_fract = 0;
 937:src/display.c **** #endif
 938:src/display.c **** #ifdef RP_PREFIX
 939:src/display.c ****       const int rp_prefix = 1;
 940:src/display.c **** #else
 941:src/display.c ****       const int rp_prefix = 0;
 942:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 943:src/display.c **** #endif
 944:src/display.c ****       // Indicates whether font escape code is compiled in.
 945:src/display.c ****       // This variable will always be set at compile time.
 946:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 947:src/display.c ****       const int has_FONT_ESCAPE = 1;
 948:src/display.c **** #else
 949:src/display.c ****       const int has_FONT_ESCAPE = 0;
 950:src/display.c **** #endif
 951:src/display.c **** 
 952:src/display.c ****       xset(buf, '\0', sizeof(buf));
 953:src/display.c ****       
 954:src/display.c ****       if (is_intmode()) {
 955:src/display.c **** #ifdef SHOW_STACK_SIZE
 956:src/display.c **** 	if (shift_char == ' ') {
 957:src/display.c **** 	  *p++ = '\007';
 958:src/display.c **** 	  *p++ = '\346';
 959:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 960:src/display.c **** 	}
 961:src/display.c **** 	else
 962:src/display.c **** #endif
 963:src/display.c **** 	  {
 964:src/display.c **** 	    *p++ = shift_char;
 965:src/display.c **** 	    *p++ = '\006';
 966:src/display.c **** 	  }
 967:src/display.c **** 
 968:src/display.c **** 	switch(int_mode()) {
 969:src/display.c **** 	default:
 970:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 971:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 972:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 973:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 974:src/display.c **** 	}
 975:src/display.c **** 	q = scopy(p, q);
 976:src/display.c **** 	*q++ = '\006';
 977:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 978:src/display.c **** 
 979:src/display.c **** 	if (IntMaxWindow > 0) {
 980:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 981:src/display.c **** 	  if (*q == '1')
 982:src/display.c **** 	    n += 2;
 983:src/display.c **** 	  if (q[1] == '1')
 984:src/display.c **** 	    n += 2;
ARM GAS  /tmp/ccDDbRKQ.s 			page 23


 985:src/display.c **** 	  while (n-- > 0)
 986:src/display.c **** 	    *p++ = '\006';
 987:src/display.c **** 
 988:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 989:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 990:src/display.c **** 	}
 991:src/display.c ****       }
 992:src/display.c **** #ifdef INCLUDE_C_LOCK
 993:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 994:src/display.c **** #else
 995:src/display.c ****       else if (!yreg_enabled
 996:src/display.c **** #endif
 997:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 998:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 999:src/display.c **** #endif
1000:src/display.c **** 	       ) {
1001:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1002:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1003:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1004:src/display.c **** 	if (shift_char == ' ') {
1005:src/display.c **** 	  *p++ = '\007';
1006:src/display.c **** 	  *p++ = '\342';
1007:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1008:src/display.c **** 	  *p++ = '\007';
1009:src/display.c **** 	  *p++ = '\344';
1010:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1011:src/display.c **** 	}
1012:src/display.c **** 	else
1013:src/display.c **** #endif
1014:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1015:src/display.c **** 	    *p++ = shift_char;
1016:src/display.c **** 	    *p++ = '\006';
1017:src/display.c **** 	  }
1018:src/display.c **** 	  else {
1019:src/display.c **** 	    *p++ = 'D';
1020:src/display.c **** 	  }
1021:src/display.c **** 
1022:src/display.c **** 	if (State2.cmplx) {
1023:src/display.c **** 	  *p++ = ' ';
1024:src/display.c **** 	  *p = '\024';
1025:src/display.c **** 	  goto skip;
1026:src/display.c **** 	}
1027:src/display.c **** 	if (State2.arrow) {
1028:src/display.c **** 	  *p++ = ' ';
1029:src/display.c **** 	  *p = '\015';
1030:src/display.c **** 	  goto skip;
1031:src/display.c **** 	}
1032:src/display.c **** 
1033:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1034:src/display.c **** 	  if (State2.wascomplex) {
1035:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1036:src/display.c **** 	  }
1037:src/display.c **** 	  else if (rp_prefix) {
1038:src/display.c **** 	    if (RectPolConv == 1) {
1039:src/display.c **** 	      q = "\007\306<";
1040:src/display.c **** 	    }
1041:src/display.c **** 	    else {
ARM GAS  /tmp/ccDDbRKQ.s 			page 24


1042:src/display.c **** 	      q = "\007\306y";
1043:src/display.c **** 	    }
1044:src/display.c **** 	  }
1045:src/display.c **** 	  p = scopy(buf, q);
1046:src/display.c **** 
1047:src/display.c **** 	  goto display_yreg;
1048:src/display.c **** 	}
1049:src/display.c **** 
1050:src/display.c **** 	switch (UState.date_mode) {
1051:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1052:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1053:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1054:src/display.c **** #endif
1055:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1056:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1057:src/display.c **** #endif
1058:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1059:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1060:src/display.c **** #endif
1061:src/display.c **** #endif
1062:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1063:src/display.c **** 	}
1064:src/display.c **** 	p = scopy(p, q);
1065:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1066:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1067:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1068:src/display.c **** 	}
1069:src/display.c **** #else
1070:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1071:src/display.c **** 	*p++ = '\007';
1072:src/display.c **** 	*p++ = '\342';
1073:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1074:src/display.c **** #endif
1075:src/display.c ****       }
1076:src/display.c ****       else { // yreg_enabled
1077:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1078:src/display.c **** 	if (State2.cmplx) {
1079:src/display.c **** 	  *p++ = '\007';
1080:src/display.c **** 	  *p++ = '\344';
1081:src/display.c **** 	  *p++ = shift_char;
1082:src/display.c **** 	  q = "\024";
1083:src/display.c **** 	}
1084:src/display.c **** 	else if (shift_char != ' ') {
1085:src/display.c **** 	  *p++ = '\007';
1086:src/display.c **** 	  *p++ = '\307';
1087:src/display.c **** 	  *p++ = shift_char;
1088:src/display.c **** 	  goto no_copy;
1089:src/display.c **** 	}
1090:src/display.c **** 	else
1091:src/display.c **** #endif
1092:src/display.c **** #ifdef INCLUDE_C_LOCK
1093:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1094:src/display.c **** 			if ( POLAR_DISPLAY ) {
1095:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1096:src/display.c **** 			}
1097:src/display.c **** 			else {
1098:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
ARM GAS  /tmp/ccDDbRKQ.s 			page 25


1099:src/display.c **** 			}
1100:src/display.c **** 			scopy(p, q);
1101:src/display.c **** 			goto skip;
1102:src/display.c **** 		}
1103:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1104:src/display.c **** 			q = "\007\307<";
1105:src/display.c **** 		}
1106:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1107:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1108:src/display.c **** 		}
1109:src/display.c **** #else
1110:src/display.c **** 	  if (State2.wascomplex) {
1111:src/display.c **** 	    q = "\007\207i";
1112:src/display.c **** 	  }
1113:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1114:src/display.c **** 	    q = "\007\307<";
1115:src/display.c **** 	  }
1116:src/display.c **** #endif
1117:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1118:src/display.c **** 	    q = "\007\307y";
1119:src/display.c **** 	  }
1120:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1121:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1122:src/display.c **** 	    q = "\007\207\007";
1123:src/display.c **** 	  }
1124:src/display.c **** #endif
1125:src/display.c **** 	  else {
1126:src/display.c **** #ifndef SHOW_STACK_SIZE
1127:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1128:src/display.c **** #else
1129:src/display.c **** 	    if (is_dblmode()) {
1130:src/display.c **** 	      *p++ = '\007';
1131:src/display.c **** 	      *p++ = '\342';
1132:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1133:src/display.c **** 	      q = "\007\345D";
1134:src/display.c **** 	    }
1135:src/display.c **** 	    else {
1136:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1137:src/display.c **** 	    }
1138:src/display.c **** #endif
1139:src/display.c **** 	  }
1140:src/display.c **** 	p = scopy(p, q);
1141:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1142:src/display.c ****       no_copy:
1143:src/display.c **** #endif
1144:src/display.c **** 
1145:src/display.c **** 	if (State2.arrow) {
1146:src/display.c **** 	  scopy(p, "\007\204\006\015");
1147:src/display.c **** 	} else if (State2.runmode) {
1148:src/display.c **** 	  decNumber y;
1149:src/display.c **** 	display_yreg:
1150:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1151:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1152:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1153:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1154:src/display.c **** 	   */
1155:src/display.c **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccDDbRKQ.s 			page 26


1156:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1157:src/display.c **** 		    getRegister(&y, regK_idx);
1158:src/display.c **** 		  }
1159:src/display.c **** 		  else {
1160:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1161:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1162:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1163:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1164:src/display.c **** 		  }
1165:src/display.c **** #else
1166:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1167:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1168:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1169:src/display.c **** #endif
1170:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1171:src/display.c **** #ifdef INCLUDE_C_LOCK
1172:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1173:src/display.c **** #else
1174:src/display.c **** 	    if (yreg_hms && State2.hms) {
1175:src/display.c **** #endif
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1177:src/display.c **** 
1178:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1179:src/display.c **** 	      UState.nothousands = 1;
1180:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1181:src/display.c **** 	      UState.nothousands = saved_nothousands;
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
1183:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1184:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1185:src/display.c **** 	      // then remove the fractional part of the seconds.
1186:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1187:src/display.c **** 	      while (*p) {
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
1189:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1190:src/display.c **** 		  goto skip;
1191:src/display.c **** 		}
1192:src/display.c **** 		p += 2;
1193:src/display.c **** 	      }
1194:src/display.c **** 	      goto skip;
1195:src/display.c **** 	    }
1196:src/display.c **** 	    if (yreg_fract && UState.fract
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1198:src/display.c **** 		&& !State2.cmplx
1199:src/display.c **** #endif
1200:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1201:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1202:src/display.c **** #endif
1203:src/display.c **** 		&& set_x_fract(&y, p)) {
1204:src/display.c **** 	      char ltgteq;
1205:src/display.c **** 
1206:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1208:src/display.c **** 	      ltgteq = *q;
1209:src/display.c **** 	      switch (ltgteq) {
1210:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1211:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1212:src/display.c **** 	      }
ARM GAS  /tmp/ccDDbRKQ.s 			page 27


1213:src/display.c **** 	      scopy(q, "\007\344?");
1214:src/display.c **** 	      q[2] = ltgteq;
1215:src/display.c **** 
1216:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1217:src/display.c **** 		goto skip;
1218:src/display.c **** 	      }
1219:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1221:src/display.c **** 		goto skip;
1222:src/display.c **** 	      }
1223:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1224:src/display.c **** 	    }
1225:src/display.c **** 	  }
1226:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1227:src/display.c **** 	    int extra_pixels;
1228:src/display.c **** 
1229:src/display.c **** 	    set_x_dn(&y, p, &n);
1230:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1231:src/display.c **** 	    if (extra_pixels <= 0)
1232:src/display.c **** 	      break;
1233:src/display.c **** 
1234:src/display.c **** 	    xset(p, '\0', n+10);
1235:src/display.c **** 
1236:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1237:src/display.c **** 	  }
1238:src/display.c **** 	}
1239:src/display.c ****       }
1240:src/display.c ****       
1241:src/display.c ****     skip:	set_status_top(buf);
1242:src/display.c ****     }
1243:src/display.c **** #endif //top_row
1244:src/display.c ****     static void disp_x(const char *p) {
1245:src/display.c ****       int i;
1246:src/display.c ****       int gotdot = -1;
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1248:src/display.c ****       const
1249:src/display.c **** #endif
1250:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1251:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1252:src/display.c ****       int overflow_to_left = 0;
1253:src/display.c **** #endif
1254:src/display.c **** 
1255:src/display.c ****       if (*p == '-') {
1256:src/display.c **** 	SET_MANT_SIGN;
1257:src/display.c **** 	p++;
1258:src/display.c ****       }
1259:src/display.c **** 
1260:src/display.c ****       if (is_intmode()) {
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1262:src/display.c **** 	  set_dig(i, *p);
1263:src/display.c **** 	  i += SEGS_PER_DIGIT;
1264:src/display.c **** 	}
1265:src/display.c **** 	carry_overflow();
1266:src/display.c ****       } else {
1267:src/display.c **** 	set_separator_decimal_modes();
1268:src/display.c **** 
1269:src/display.c **** 	i = 0;
ARM GAS  /tmp/ccDDbRKQ.s 			page 28


1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1271:src/display.c **** 	if ( CmdLineDot > 1 ) {
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1273:src/display.c **** 	  const
1274:src/display.c **** #  endif
1275:src/display.c **** 	    int double_dot = 0;
1276:src/display.c **** 	  int j;
1277:src/display.c **** 
1278:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1280:src/display.c **** 	      gotdot = j;
1281:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1282:src/display.c **** 	      double_dot = (p[j+1] == '.');
1283:src/display.c **** #  endif
1284:src/display.c **** 	    }
1285:src/display.c **** 	  }
1286:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1287:src/display.c **** 	  if (j > 0) {
1288:src/display.c **** 	    p += j + 1;
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
1290:src/display.c **** 	    if (gotdot <= j) {
1291:src/display.c **** 	      gotdot = 0;
1292:src/display.c **** 	      if (double_dot)
1293:src/display.c **** 		p++;
1294:src/display.c **** 	    }
1295:src/display.c **** 	    else if (*p == '.') {
1296:src/display.c **** 	      gotdot = 0;
1297:src/display.c **** 	      p++;
1298:src/display.c **** 	      if (!double_dot)
1299:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1300:src/display.c **** 	    }
1301:src/display.c **** 	    else gotdot = -1;
1302:src/display.c **** 	    set_dig(0, '<');
1303:src/display.c **** 	    overflow_to_left = 1;
1304:src/display.c **** 	  }
1305:src/display.c **** 	  else gotdot = -1;
1306:src/display.c **** 	}
1307:src/display.c **** #endif
1308:src/display.c **** 
1309:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1311:src/display.c **** 	       && *p != 'D'
1312:src/display.c **** #endif
1313:src/display.c **** 	       ; p++) {
1314:src/display.c **** 	  if (*p == '.') {
1315:src/display.c **** 	    if (gotdot < 0)
1316:src/display.c **** 	      gotdot = i;
1317:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1318:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1319:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
1321:src/display.c **** 		p++;
1322:src/display.c **** 	      }
1323:src/display.c **** #  else
1324:src/display.c **** 	      if ( i != gotdot ) {
1325:src/display.c **** #  endif
1326:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
ARM GAS  /tmp/ccDDbRKQ.s 			page 29


1327:src/display.c **** 		i += segs_per_digit;
1328:src/display.c **** 	      }
1329:src/display.c **** 	      else {
1330:src/display.c **** 		if ( CmdLineDot > 1 ) {
1331:src/display.c **** 		  i += segs_per_digit;
1332:src/display.c **** 		}
1333:src/display.c **** 		else {
1334:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1336:src/display.c **** 		}
1337:src/display.c **** 	      }
1338:src/display.c **** #else
1339:src/display.c **** 	      if (i > 0)
1340:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1341:src/display.c **** 	      else {
1342:src/display.c **** 		set_dig(i, '0');
1343:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1344:src/display.c **** 		i += segs_per_digit;
1345:src/display.c **** 	      }
1346:src/display.c **** #endif
1347:src/display.c **** 	    } else {
1348:src/display.c **** 	      set_dig(i, *p);
1349:src/display.c **** 	      i += segs_per_digit;
1350:src/display.c **** 	    }
1351:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1352:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1353:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1354:src/display.c **** #endif
1355:src/display.c **** 	  }
1356:src/display.c **** 
1357:src/display.c **** 	  /* Implement a floating comma */
1358:src/display.c **** 	  if (gotdot < 0)
1359:src/display.c **** 	    gotdot = i;
1360:src/display.c **** 	  for (;;) {
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1363:src/display.c **** 	      break;
1364:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1365:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1366:src/display.c **** 	      break;
1367:src/display.c **** #endif
1368:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1369:src/display.c **** 	  }
1370:src/display.c **** 
1371:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1372:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1373:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1374:src/display.c **** 	    int flags = 8;
1375:src/display.c **** #  else
1376:src/display.c **** 	    int flags = 12;
1377:src/display.c **** #  endif
1378:src/display.c **** 
1379:src/display.c **** 	    if (*p == 'D')
1380:src/display.c **** 	      flags |= 2;
1381:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1382:src/display.c **** 	      flags |= 16;
1383:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
ARM GAS  /tmp/ccDDbRKQ.s 			page 30


1384:src/display.c **** 	  }
1385:src/display.c **** #else
1386:src/display.c **** 	  if (*p == 'E') {
1387:src/display.c **** 	    p++;
1388:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1389:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1390:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1391:src/display.c **** #  else
1392:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1393:src/display.c **** #  endif
1394:src/display.c **** 	  } 
1395:src/display.c **** #endif
1396:src/display.c **** 	}
1397:src/display.c ****       }
1398:src/display.c **** 
1399:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1400:src/display.c **** 
1401:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1402:src/display.c **** 	const int ws = word_size();
1403:src/display.c **** 	unsigned int b;
1404:src/display.c **** 	long long int vs = value;
1405:src/display.c **** 	unsigned long long int v;
1406:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1407:src/display.c **** 	int i, j, k;
1408:src/display.c **** 	int sign = 0;
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1410:src/display.c **** 
1411:src/display.c **** 	switch (State2.smode) {
1412:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1413:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1414:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1415:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1416:src/display.c **** 	default:	b = int_base();	break;
1417:src/display.c **** 	}
1418:src/display.c **** 
1419:src/display.c **** 	if (!res) {
1420:src/display.c **** 	  IntMaxWindow = 0;
1421:src/display.c **** 	  carry_overflow();
1422:src/display.c **** 	}
1423:src/display.c **** 
1424:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1425:src/display.c **** 	  v = extract_value(value, &sign);
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1427:src/display.c **** 	    v = value;
1428:src/display.c **** 	  if (v == 0) {
1429:src/display.c **** 	    if (sign)
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1431:src/display.c **** 	    set_dig_s(dig, '0', res);
1432:src/display.c **** 	    return;
1433:src/display.c **** 	  } else
1434:src/display.c **** 	    for (i=0; v != 0; i++) {
1435:src/display.c **** 	      const int r = v % b;
1436:src/display.c **** 	      v /= b;
1437:src/display.c **** 	      buf[i] = DIGITS[r];
1438:src/display.c **** 	    }
1439:src/display.c **** 	} else {
1440:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
ARM GAS  /tmp/ccDDbRKQ.s 			page 31


1441:src/display.c **** 	  if (ws < 64) {
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1443:src/display.c **** 	    vs &= mask;
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1445:src/display.c **** 	      vs |= ~mask;
1446:src/display.c **** 	  }
1447:src/display.c **** 
1448:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
1450:src/display.c **** 	    return;
1451:src/display.c **** 	  } else if (!UState.leadzero) {
1452:src/display.c **** 	    v = (unsigned long long int)vs;
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
1454:src/display.c **** 	      const int r = v % b;
1455:src/display.c **** 	      v /= b;
1456:src/display.c **** 	      buf[i] = DIGITS[r];
1457:src/display.c **** 	    }
1458:src/display.c **** 	  } else {
1459:src/display.c **** 	    int n;
1460:src/display.c **** 	    const unsigned int b1 = b >> 1;
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1462:src/display.c **** 	    v = (unsigned long long int)vs;
1463:src/display.c **** 
1464:src/display.c **** 	    n = (ws + fac) / (fac+1);
1465:src/display.c **** 	    for (i=0; i<n; i++) {
1466:src/display.c **** 	      const int r = v % b;
1467:src/display.c **** 	      v /= b;
1468:src/display.c **** 	      buf[i] = DIGITS[r];
1469:src/display.c **** 	    }
1470:src/display.c **** 	  }
1471:src/display.c **** 	}
1472:src/display.c **** #ifdef BIGGER_DISPLAY
1473:src/display.c **** #define MAX_INT_Y_DIG 13
1474:src/display.c **** #else
1475:src/display.c **** #define MAX_INT_Y_DIG 7
1476:src/display.c **** #endif
1477:src/display.c **** 	/* At this point i is the number of digits in the output */
1478:src/display.c **** 	int nd = i;
1479:src/display.c **** 	if (res) {
1480:src/display.c **** 	  if (sign) *res++ = '-';
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1483:src/display.c **** 	      *res++ = buf[i];
1484:src/display.c **** 	    *res++ = '.';
1485:src/display.c **** 	    *res++ = '.';
1486:src/display.c **** 	  }
1487:src/display.c **** 	  else {
1488:src/display.c **** 	    while (--i >= 0)
1489:src/display.c **** 	      *res++ = buf[i];
1490:src/display.c **** 	  }
1491:src/display.c **** 	} else {
1492:src/display.c **** #if 0
1493:src/display.c **** 	  set_separator_decimal_modes();
1494:src/display.c **** 
1495:src/display.c **** 	  // Allows configuration of digit grouping per base
1496:src/display.c **** 	  static const char grouping[] = 
1497:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
ARM GAS  /tmp/ccDDbRKQ.s 			page 32


1498:src/display.c **** 		    //	   2     3     4     5     6     7     8
1499:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1500:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1501:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1502:src/display.c **** 	    : grouping[b - 2] >> 4;
1503:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1504:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1505:src/display.c **** #else
1506:src/display.c **** 	  // Less flexible but shorter
1507:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
1510:src/display.c **** 	  set_separator_decimal_modes();
1511:src/display.c **** #endif
1512:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1514:src/display.c **** 	    State2.window = 0;
1515:src/display.c **** 	  buf[i] = '\0';
1516:src/display.c **** 
1517:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1518:src/display.c **** 	  for (k = 0; k < 12; k++)
1519:src/display.c **** 	    if (buf[j + k] == '\0')
1520:src/display.c **** 	      break;
1521:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1522:src/display.c **** 	    int ch = buf[j++];
1523:src/display.c **** 	    if (i >= shift)
1524:src/display.c **** 	      ch -= 030;
1525:src/display.c **** 	    set_dig(dig, ch);
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1529:src/display.c **** 	  }
1530:src/display.c **** 	  if (sign) {
1531:src/display.c **** 	    if (dig >= 0)
1532:src/display.c **** 	      set_dig(dig, '-');
1533:src/display.c **** 	    else	SET_MANT_SIGN;
1534:src/display.c **** 	  }
1535:src/display.c **** 	}
1536:src/display.c ****       }
1537:src/display.c **** 
1538:src/display.c ****       /* Handle special cases.
1539:src/display.c ****        * return non-zero if the number is special.
1540:src/display.c ****        */
1541:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
1544:src/display.c **** 	    if (res) {
1545:src/display.c **** 	      scopy(res, "NaN");
1546:src/display.c **** 	    } else {
1547:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1548:src/display.c **** 	    }
1549:src/display.c **** 	    return 1;
1550:src/display.c **** 	  } else {
1551:src/display.c **** 	    if (decNumberIsNegative(x)) {
1552:src/display.c **** 	      if (res) *res++ = '-';
1553:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1554:src/display.c **** 	    }
ARM GAS  /tmp/ccDDbRKQ.s 			page 33


1555:src/display.c **** 	    if (res)
1556:src/display.c **** 	      *res++ = '\237';
1557:src/display.c **** 	    else {
1558:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1559:src/display.c **** 	    }
1560:src/display.c **** 	    return 1;
1561:src/display.c **** 	  }
1562:src/display.c **** 	}
1563:src/display.c **** 	return 0;
1564:src/display.c ****       }
1565:src/display.c **** 
1566:src/display.c **** 
1567:src/display.c ****       /* Extract the two lowest integral digits from the number
1568:src/display.c ****        */
1569:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1570:src/display.c **** 	decNumber n;
1571:src/display.c **** 
1572:src/display.c **** 	decNumberMod(&n, x, &const_100);
1573:src/display.c **** 	*v = dn_to_int(&n);
1574:src/display.c **** 	dn_mulpow10(&n, x, -2);
1575:src/display.c **** 	decNumberTrunc(res, &n);
1576:src/display.c ****       }
1577:src/display.c **** 
1578:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 235              		.loc 1 1578 87 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 32
 238              		@ frame_needed = 0, uses_anonymous_args = 0
1579:src/display.c **** 	char b[32];
 239              		.loc 1 1579 2 view .LVU68
1580:src/display.c **** 	int i, j;
 240              		.loc 1 1580 2 view .LVU69
1581:src/display.c **** 
1582:src/display.c **** 	for (i=0; i<n; i++) {
 241              		.loc 1 1582 2 view .LVU70
 242              		.loc 1 1582 12 view .LVU71
1578:src/display.c **** 	char b[32];
 243              		.loc 1 1578 87 is_stmt 0 view .LVU72
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              		.cfi_def_cfa_offset 28
 246              		.cfi_offset 4, -28
 247              		.cfi_offset 5, -24
 248              		.cfi_offset 6, -20
 249              		.cfi_offset 7, -16
 250              		.cfi_offset 8, -12
 251              		.cfi_offset 9, -8
 252              		.cfi_offset 14, -4
1583:src/display.c **** 	  if (v == 0)
1584:src/display.c **** 	    b[i] = spaces?' ':'0';
1585:src/display.c **** 	  else {
1586:src/display.c **** 	    j = v % 10;
 253              		.loc 1 1586 12 view .LVU73
 254 0004 DFF89CE0 		ldr	lr, .L42
1578:src/display.c **** 	char b[32];
 255              		.loc 1 1578 87 view .LVU74
 256 0008 89B0     		sub	sp, sp, #36
 257              		.cfi_def_cfa_offset 64
ARM GAS  /tmp/ccDDbRKQ.s 			page 34


1578:src/display.c **** 	char b[32];
 258              		.loc 1 1578 87 view .LVU75
 259 000a 1746     		mov	r7, r2
 260 000c EC46     		mov	ip, sp
1582:src/display.c **** 	  if (v == 0)
 261              		.loc 1 1582 8 view .LVU76
 262 000e 0026     		movs	r6, #0
 263              	.LVL13:
 264              	.L30:
1583:src/display.c **** 	  if (v == 0)
 265              		.loc 1 1583 4 is_stmt 1 view .LVU77
 266              		.loc 1 1586 6 view .LVU78
 267              		.loc 1 1586 12 is_stmt 0 view .LVU79
 268 0010 AEFB0024 		umull	r2, r4, lr, r0
 269 0014 E408     		lsrs	r4, r4, #3
 270 0016 04EB8402 		add	r2, r4, r4, lsl #2
 271 001a 2546     		mov	r5, r4
 272 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 273              	.LVL14:
1587:src/display.c **** 	    v /= 10;
 274              		.loc 1 1587 6 is_stmt 1 view .LVU80
1588:src/display.c **** 	    b[i] = j + '0';
 275              		.loc 1 1588 15 is_stmt 0 view .LVU81
 276 0020 3034     		adds	r4, r4, #48
 277              	.LVL15:
1582:src/display.c **** 	  if (v == 0)
 278              		.loc 1 1582 18 view .LVU82
 279 0022 721C     		adds	r2, r6, #1
1583:src/display.c **** 	    b[i] = spaces?' ':'0';
 280              		.loc 1 1583 7 view .LVU83
 281 0024 30B1     		cbz	r0, .L41
1582:src/display.c **** 	  if (v == 0)
 282              		.loc 1 1582 2 view .LVU84
 283 0026 9342     		cmp	r3, r2
 284              		.loc 1 1588 11 view .LVU85
 285 0028 0CF8014B 		strb	r4, [ip], #1
1587:src/display.c **** 	    b[i] = j + '0';
 286              		.loc 1 1587 8 view .LVU86
 287 002c 2846     		mov	r0, r5
 288              	.LVL16:
 289              		.loc 1 1588 6 is_stmt 1 view .LVU87
1582:src/display.c **** 	  if (v == 0)
 290              		.loc 1 1582 17 view .LVU88
1582:src/display.c **** 	  if (v == 0)
 291              		.loc 1 1582 12 view .LVU89
1582:src/display.c **** 	  if (v == 0)
 292              		.loc 1 1582 2 is_stmt 0 view .LVU90
 293 002e 12D0     		beq	.L31
 294 0030 1646     		mov	r6, r2
 295 0032 EDE7     		b	.L30
 296              	.LVL17:
 297              	.L41:
1582:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1582 2 view .LVU91
 299 0034 109A     		ldr	r2, [sp, #64]
 300 0036 002A     		cmp	r2, #0
 301 0038 14BF     		ite	ne
ARM GAS  /tmp/ccDDbRKQ.s 			page 35


 302 003a 2024     		movne	r4, #32
 303              	.LVL18:
1582:src/display.c **** 	  if (v == 0)
 304              		.loc 1 1582 2 view .LVU92
 305 003c 3024     		moveq	r4, #48
 306 003e 0DEB0600 		add	r0, sp, r6
 307              	.LVL19:
1583:src/display.c **** 	    b[i] = spaces?' ':'0';
 308              		.loc 1 1583 7 view .LVU93
 309 0042 3246     		mov	r2, r6
 310              	.LVL20:
 311              	.L28:
1584:src/display.c **** 	  else {
 312              		.loc 1 1584 6 is_stmt 1 view .LVU94
1582:src/display.c **** 	  if (v == 0)
 313              		.loc 1 1582 18 is_stmt 0 view .LVU95
 314 0044 0132     		adds	r2, r2, #1
 315              	.LVL21:
1582:src/display.c **** 	  if (v == 0)
 316              		.loc 1 1582 2 view .LVU96
 317 0046 9342     		cmp	r3, r2
1584:src/display.c **** 	  else {
 318              		.loc 1 1584 11 view .LVU97
 319 0048 00F8014B 		strb	r4, [r0], #1
 320              	.LVL22:
1582:src/display.c **** 	  if (v == 0)
 321              		.loc 1 1582 17 is_stmt 1 view .LVU98
1582:src/display.c **** 	  if (v == 0)
 322              		.loc 1 1582 12 view .LVU99
1582:src/display.c **** 	  if (v == 0)
 323              		.loc 1 1582 2 is_stmt 0 view .LVU100
 324 004c FADC     		bgt	.L28
 325 004e 5A1E     		subs	r2, r3, #1
 326              	.LVL23:
1582:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1582 2 view .LVU101
 328 0050 B342     		cmp	r3, r6
 329 0052 C8BF     		it	gt
 330 0054 1646     		movgt	r6, r2
 331              	.LVL24:
 332              	.L31:
1589:src/display.c **** 	  }
1590:src/display.c **** 	}
1591:src/display.c **** 	if (b[0] == ' ')
 333              		.loc 1 1591 2 is_stmt 1 view .LVU102
 334              		.loc 1 1591 5 is_stmt 0 view .LVU103
 335 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 336              	.LVL25:
1592:src/display.c **** 	  b[0] = '0';
1593:src/display.c **** 
1594:src/display.c **** 	/* Copy across and appropriately leading space things
1595:src/display.c **** 	 */
1596:src/display.c **** 	j = *jin;
 337              		.loc 1 1596 4 view .LVU104
 338 005a D7F80090 		ldr	r9, [r7]
1591:src/display.c **** 	  b[0] = '0';
 339              		.loc 1 1591 5 view .LVU105
ARM GAS  /tmp/ccDDbRKQ.s 			page 36


 340 005e 202B     		cmp	r3, #32
1592:src/display.c **** 	  b[0] = '0';
 341              		.loc 1 1592 4 is_stmt 1 view .LVU106
1592:src/display.c **** 	  b[0] = '0';
 342              		.loc 1 1592 9 is_stmt 0 view .LVU107
 343 0060 04BF     		itt	eq
 344 0062 3023     		moveq	r3, #48
 345 0064 8DF80030 		strbeq	r3, [sp]
 346              		.loc 1 1596 2 is_stmt 1 view .LVU108
 347              	.LVL26:
1597:src/display.c **** 	while (--i >= 0) {
 348              		.loc 1 1597 2 view .LVU109
 349              		.loc 1 1597 8 view .LVU110
1596:src/display.c **** 	while (--i >= 0) {
 350              		.loc 1 1596 4 is_stmt 0 view .LVU111
 351 0068 0D46     		mov	r5, r1
 352 006a C846     		mov	r8, r9
 353              		.loc 1 1597 8 view .LVU112
 354 006c 3446     		mov	r4, r6
 355              	.LVL27:
 356              	.L35:
1598:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 357              		.loc 1 1598 4 is_stmt 1 view .LVU113
 358              	.LBB191:
 359              	.LBB192:
 330:src/display.c ****   else	set_dig(base, ch);
 360              		.loc 1 330 12 view .LVU114
 361              	.LBE192:
 362              	.LBE191:
 363              		.loc 1 1598 24 is_stmt 0 view .LVU115
 364 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 365              	.LBB196:
 366              	.LBB193:
 330:src/display.c ****   else	set_dig(base, ch);
 367              		.loc 1 330 16 view .LVU116
 368 0072 2B46     		mov	r3, r5
 369              	.LVL28:
 330:src/display.c ****   else	set_dig(base, ch);
 370              		.loc 1 330 16 view .LVU117
 371              	.LBE193:
 372              	.LBI191:
 329:src/display.c ****   if (res) *res++ = ch;
 373              		.loc 1 329 14 is_stmt 1 view .LVU118
 374              	.LBB194:
 330:src/display.c ****   else	set_dig(base, ch);
 375              		.loc 1 330 3 view .LVU119
 330:src/display.c ****   else	set_dig(base, ch);
 376              		.loc 1 330 6 is_stmt 0 view .LVU120
 377 0074 95B1     		cbz	r5, .L33
 378              	.LVL29:
 330:src/display.c ****   else	set_dig(base, ch);
 379              		.loc 1 330 19 view .LVU121
 380 0076 03F8011B 		strb	r1, [r3], #1
 381              	.LVL30:
 330:src/display.c ****   else	set_dig(base, ch);
 382              		.loc 1 330 16 view .LVU122
 383 007a 1D46     		mov	r5, r3
ARM GAS  /tmp/ccDDbRKQ.s 			page 37


 384              	.LVL31:
 385              	.L34:
 332:src/display.c **** }
 386              		.loc 1 332 3 is_stmt 1 view .LVU123
 332:src/display.c **** }
 387              		.loc 1 332 3 is_stmt 0 view .LVU124
 388              	.LBE194:
 389              	.LBE196:
1599:src/display.c **** 	  j += SEGS_PER_DIGIT;
 390              		.loc 1 1599 4 is_stmt 1 view .LVU125
1597:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 391              		.loc 1 1597 8 is_stmt 0 view .LVU126
 392 007c 013C     		subs	r4, r4, #1
 393              	.LVL32:
 394              		.loc 1 1599 6 view .LVU127
 395 007e 08F10908 		add	r8, r8, #9
 396              	.LVL33:
1597:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 397              		.loc 1 1597 8 is_stmt 1 view .LVU128
 398 0082 F4D5     		bpl	.L35
1600:src/display.c **** 	}
1601:src/display.c **** 	*jin = j;
 399              		.loc 1 1601 7 is_stmt 0 view .LVU129
 400 0084 26EAE676 		bic	r6, r6, r6, asr #31
 401 0088 09F10909 		add	r9, r9, #9
 402              		.loc 1 1601 2 is_stmt 1 view .LVU130
 403              		.loc 1 1601 7 is_stmt 0 view .LVU131
 404 008c 06EBC606 		add	r6, r6, r6, lsl #3
 405 0090 4E44     		add	r6, r6, r9
1602:src/display.c **** 	return str;
1603:src/display.c ****       }
 406              		.loc 1 1603 7 view .LVU132
 407 0092 2846     		mov	r0, r5
1601:src/display.c **** 	return str;
 408              		.loc 1 1601 7 view .LVU133
 409 0094 3E60     		str	r6, [r7]
1602:src/display.c **** 	return str;
 410              		.loc 1 1602 2 is_stmt 1 view .LVU134
 411              		.loc 1 1603 7 is_stmt 0 view .LVU135
 412 0096 09B0     		add	sp, sp, #36
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.LVL34:
 418              	.L33:
 419              		.cfi_restore_state
 420              	.LBB197:
 421              	.LBB195:
 331:src/display.c ****   return res;
 422              		.loc 1 331 8 is_stmt 1 view .LVU136
 423 009c 4046     		mov	r0, r8
 424 009e FFF7FEFF 		bl	set_dig
 425              	.LVL35:
 331:src/display.c ****   return res;
 426              		.loc 1 331 8 is_stmt 0 view .LVU137
 427 00a2 EBE7     		b	.L34
ARM GAS  /tmp/ccDDbRKQ.s 			page 38


 428              	.L43:
 429              		.align	2
 430              	.L42:
 431 00a4 CDCCCCCC 		.word	-858993459
 432              	.LBE195:
 433              	.LBE197:
 434              		.cfi_endproc
 435              	.LFE21:
 437              		.section	.text.set_exp_digits_string,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	set_exp_digits_string:
 446              	.LVL36:
 447              	.LFB13:
 347:src/display.c ****   int i;
 448              		.loc 1 347 63 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 348:src/display.c ****   const int n = res == NULL ? 3 : 4;
 452              		.loc 1 348 3 view .LVU139
 349:src/display.c **** 
 453              		.loc 1 349 3 view .LVU140
 347:src/display.c ****   int i;
 454              		.loc 1 347 63 is_stmt 0 view .LVU141
 455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 456              		.cfi_def_cfa_offset 24
 457              		.cfi_offset 3, -24
 458              		.cfi_offset 4, -20
 459              		.cfi_offset 5, -16
 460              		.cfi_offset 6, -12
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 349:src/display.c **** 
 463              		.loc 1 349 33 view .LVU142
 464 0002 0D1E     		subs	r5, r1, #0
 465 0004 0CBF     		ite	eq
 466 0006 0326     		moveq	r6, #3
 467 0008 0426     		movne	r6, #4
 468              	.LVL37:
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 469              		.loc 1 351 3 is_stmt 1 view .LVU143
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 470              		.loc 1 351 13 view .LVU144
 471 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 472 000e 0446     		mov	r4, r0
 473 0010 0644     		add	r6, r6, r0
 474              	.LVL38:
 475              	.LBB198:
 476              	.LBB199:
 331:src/display.c ****   return res;
 477              		.loc 1 331 8 is_stmt 0 view .LVU145
 478 0012 03F16507 		add	r7, r3, #101
ARM GAS  /tmp/ccDDbRKQ.s 			page 39


 479 0016 04E0     		b	.L46
 480              	.LVL39:
 481              	.L54:
 330:src/display.c ****   else	set_dig(base, ch);
 482              		.loc 1 330 19 view .LVU146
 483 0018 03F8011B 		strb	r1, [r3], #1
 484              	.LVL40:
 330:src/display.c ****   else	set_dig(base, ch);
 485              		.loc 1 330 19 view .LVU147
 486              	.LBE199:
 487              	.LBE198:
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 488              		.loc 1 351 3 view .LVU148
 489 001c B442     		cmp	r4, r6
 490              	.LBB205:
 491              	.LBB200:
 330:src/display.c ****   else	set_dig(base, ch);
 492              		.loc 1 330 16 view .LVU149
 493 001e 1D46     		mov	r5, r3
 494              	.LVL41:
 332:src/display.c **** }
 495              		.loc 1 332 3 is_stmt 1 view .LVU150
 332:src/display.c **** }
 496              		.loc 1 332 3 is_stmt 0 view .LVU151
 497              	.LBE200:
 498              	.LBE205:
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 499              		.loc 1 351 36 is_stmt 1 view .LVU152
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 500              		.loc 1 351 13 view .LVU153
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 501              		.loc 1 351 3 is_stmt 0 view .LVU154
 502 0020 0CD0     		beq	.L44
 503              	.LVL42:
 504              	.L46:
 352:src/display.c **** }
 505              		.loc 1 352 5 is_stmt 1 discriminator 3 view .LVU155
 506              	.LBB206:
 507              	.LBB201:
 330:src/display.c ****   else	set_dig(base, ch);
 508              		.loc 1 330 12 discriminator 3 view .LVU156
 330:src/display.c ****   else	set_dig(base, ch);
 509              		.loc 1 330 12 is_stmt 0 discriminator 3 view .LVU157
 510              	.LBE201:
 511              	.LBE206:
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 512              		.loc 1 351 23 discriminator 3 view .LVU158
 513 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 514              	.LVL43:
 515              	.LBB207:
 516              	.LBB202:
 330:src/display.c ****   else	set_dig(base, ch);
 517              		.loc 1 330 16 discriminator 3 view .LVU159
 518 0026 2B46     		mov	r3, r5
 519              	.LVL44:
 330:src/display.c ****   else	set_dig(base, ch);
 520              		.loc 1 330 16 discriminator 3 view .LVU160
ARM GAS  /tmp/ccDDbRKQ.s 			page 40


 521              	.LBE202:
 522              	.LBI198:
 329:src/display.c ****   if (res) *res++ = ch;
 523              		.loc 1 329 14 is_stmt 1 discriminator 3 view .LVU161
 524              	.LBB203:
 330:src/display.c ****   else	set_dig(base, ch);
 525              		.loc 1 330 3 discriminator 3 view .LVU162
 526              	.LBE203:
 527              	.LBE207:
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 528              		.loc 1 351 17 is_stmt 0 discriminator 3 view .LVU163
 529 0028 41B1     		cbz	r1, .L44
 530              	.LVL45:
 531              	.LBB208:
 532              	.LBB204:
 330:src/display.c ****   else	set_dig(base, ch);
 533              		.loc 1 330 6 discriminator 4 view .LVU164
 534 002a 002D     		cmp	r5, #0
 535 002c F4D1     		bne	.L54
 331:src/display.c ****   return res;
 536              		.loc 1 331 8 is_stmt 1 view .LVU165
 537 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 538 0032 3844     		add	r0, r0, r7
 539 0034 FFF7FEFF 		bl	set_dig
 540              	.LVL46:
 332:src/display.c **** }
 541              		.loc 1 332 3 view .LVU166
 332:src/display.c **** }
 542              		.loc 1 332 3 is_stmt 0 view .LVU167
 543              	.LBE204:
 544              	.LBE208:
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 545              		.loc 1 351 36 is_stmt 1 view .LVU168
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 546              		.loc 1 351 13 view .LVU169
 351:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 547              		.loc 1 351 3 is_stmt 0 view .LVU170
 548 0038 B442     		cmp	r4, r6
 549 003a F2D1     		bne	.L46
 550              	.LVL47:
 551              	.L44:
 353:src/display.c **** 
 552              		.loc 1 353 1 view .LVU171
 553 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 353:src/display.c **** 
 554              		.loc 1 353 1 view .LVU172
 555              		.cfi_endproc
 556              	.LFE13:
 558 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 559              		.align	1
 560              		.p2align 2,,3
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	hms_step:
 567              	.LVL48:
ARM GAS  /tmp/ccDDbRKQ.s 			page 41


 568              	.LFB20:
1569:src/display.c **** 	decNumber n;
 569              		.loc 1 1569 75 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 40
 572              		@ frame_needed = 0, uses_anonymous_args = 0
1570:src/display.c **** 
 573              		.loc 1 1570 2 view .LVU174
1572:src/display.c **** 	*v = dn_to_int(&n);
 574              		.loc 1 1572 2 view .LVU175
1569:src/display.c **** 	decNumber n;
 575              		.loc 1 1569 75 is_stmt 0 view .LVU176
 576 0000 70B5     		push	{r4, r5, r6, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 8AB0     		sub	sp, sp, #40
 583              		.cfi_def_cfa_offset 56
1569:src/display.c **** 	decNumber n;
 584              		.loc 1 1569 75 view .LVU177
 585 0004 0446     		mov	r4, r0
 586 0006 1646     		mov	r6, r2
1572:src/display.c **** 	*v = dn_to_int(&n);
 587              		.loc 1 1572 2 view .LVU178
 588 0008 01A8     		add	r0, sp, #4
 589              	.LVL49:
1572:src/display.c **** 	*v = dn_to_int(&n);
 590              		.loc 1 1572 2 view .LVU179
 591 000a 0A4A     		ldr	r2, .L57
 592              	.LVL50:
1569:src/display.c **** 	decNumber n;
 593              		.loc 1 1569 75 view .LVU180
 594 000c 0D46     		mov	r5, r1
1572:src/display.c **** 	*v = dn_to_int(&n);
 595              		.loc 1 1572 2 view .LVU181
 596 000e FFF7FEFF 		bl	decNumberMod
 597              	.LVL51:
1573:src/display.c **** 	dn_mulpow10(&n, x, -2);
 598              		.loc 1 1573 2 is_stmt 1 view .LVU182
1573:src/display.c **** 	dn_mulpow10(&n, x, -2);
 599              		.loc 1 1573 7 is_stmt 0 view .LVU183
 600 0012 01A8     		add	r0, sp, #4
 601 0014 FFF7FEFF 		bl	dn_to_int
 602              	.LVL52:
1574:src/display.c **** 	decNumberTrunc(res, &n);
 603              		.loc 1 1574 2 view .LVU184
 604 0018 2946     		mov	r1, r5
1573:src/display.c **** 	dn_mulpow10(&n, x, -2);
 605              		.loc 1 1573 5 view .LVU185
 606 001a 3060     		str	r0, [r6]
1574:src/display.c **** 	decNumberTrunc(res, &n);
 607              		.loc 1 1574 2 is_stmt 1 view .LVU186
 608 001c 6FF00102 		mvn	r2, #1
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	dn_mulpow10
ARM GAS  /tmp/ccDDbRKQ.s 			page 42


 611              	.LVL53:
1575:src/display.c ****       }
 612              		.loc 1 1575 2 view .LVU187
 613 0026 01A9     		add	r1, sp, #4
 614 0028 2046     		mov	r0, r4
 615 002a FFF7FEFF 		bl	decNumberTrunc
 616              	.LVL54:
1576:src/display.c **** 
 617              		.loc 1 1576 7 is_stmt 0 view .LVU188
 618 002e 0AB0     		add	sp, sp, #40
 619              		.cfi_def_cfa_offset 16
 620              		@ sp needed
 621 0030 70BD     		pop	{r4, r5, r6, pc}
 622              	.LVL55:
 623              	.L58:
1576:src/display.c **** 
 624              		.loc 1 1576 7 view .LVU189
 625 0032 00BF     		.align	2
 626              	.L57:
 627 0034 00000000 		.word	const_100
 628              		.cfi_endproc
 629              	.LFE20:
 631              		.section	.text.s_s_sized,"ax",%progbits
 632              		.align	1
 633              		.p2align 2,,3
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	s_s_sized:
 640              	.LVL56:
 641              	.LFB39:
1604:src/display.c **** 
1605:src/display.c **** 
1606:src/display.c ****       /* Display the number in H.MS mode.
1607:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1608:src/display.c ****        */
1609:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1610:src/display.c **** 	decNumber x, y, a, t, u;
1611:src/display.c **** 	int j=0;
1612:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1613:src/display.c **** 	unsigned int hr, min, sec, fs;
1614:src/display.c **** 
1615:src/display.c **** 	if (check_special_dn(rgx, res)) {
1616:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1617:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1618:src/display.c **** 	  return;
1619:src/display.c **** 	}
1620:src/display.c **** 
1621:src/display.c **** 	set_separator_decimal_modes();
1622:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1623:src/display.c **** 	dn_abs(&a, rgx);
1624:src/display.c **** 	if (decNumberIsNegative(&x)) {
1625:src/display.c **** 	  if (res != NULL)
1626:src/display.c **** 	    *res++ += '-';
1627:src/display.c **** 	  else
1628:src/display.c **** 	    SET_MANT_SIGN;
ARM GAS  /tmp/ccDDbRKQ.s 			page 43


1629:src/display.c **** 	  dn_minus(&x, &x);
1630:src/display.c **** 	}
1631:src/display.c **** 
1632:src/display.c **** 	decNumberHR2HMS(&y, &x);
1633:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1634:src/display.c **** 	decNumberRound(&u, &t);
1635:src/display.c **** 
1636:src/display.c **** 	hms_step(&t, &u, &fs);
1637:src/display.c **** 	hms_step(&u, &t, &sec);
1638:src/display.c **** 	hms_step(&t, &u, &min);
1639:src/display.c **** 	hr = dn_to_int(&t);
1640:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1641:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1642:src/display.c **** 
1643:src/display.c **** 	// degrees
1644:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1645:src/display.c **** 	res = set_dig_s(j, '@', res);
1646:src/display.c **** 	j += SEGS_PER_DIGIT;
1647:src/display.c **** 
1648:src/display.c **** 	// minutes
1649:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1650:src/display.c **** 	res = set_dig_s(j, '\'', res);
1651:src/display.c **** 	j += SEGS_PER_DIGIT;
1652:src/display.c **** 
1653:src/display.c **** 	// seconds
1654:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1655:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1656:src/display.c **** 
1657:src/display.c **** 	// Fractional seconds
1658:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1659:src/display.c **** 
1660:src/display.c **** 	// We're now pointing at the exponent's first digit...
1661:src/display.c **** 	res = set_dig_s(j, '"', res);
1662:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1663:src/display.c **** 
1664:src/display.c **** 	// Check for values too big or small
1665:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1666:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1667:src/display.c **** 	} else if (! dn_eq0(&a)) {
1668:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1669:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1670:src/display.c **** 	  }
1671:src/display.c **** 	}
1672:src/display.c ****       }
1673:src/display.c **** 
1674:src/display.c **** 
1675:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1676:src/display.c **** 	decNumber x, w, n, d, t;
1677:src/display.c **** 	char buf[32], *p = buf;
1678:src/display.c **** 	int j;
1679:src/display.c **** 
1680:src/display.c **** 	if (check_special_dn(rgx, res))
1681:src/display.c **** 	  return 1;
1682:src/display.c **** 	dn_abs(&x, rgx);
1683:src/display.c **** 	if (dn_ge(&x, &const_100000))
1684:src/display.c **** 	  return 0;
1685:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
ARM GAS  /tmp/ccDDbRKQ.s 			page 44


1686:src/display.c **** 	  return 0;
1687:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1688:src/display.c **** 	  if (res != NULL)
1689:src/display.c **** 	    *res++ += '-';
1690:src/display.c **** 	  else
1691:src/display.c **** 	    SET_MANT_SIGN;
1692:src/display.c **** 	}
1693:src/display.c **** 	decNumberFrac(&w, &x);
1694:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1695:src/display.c **** 
1696:src/display.c **** 	dn_divide(&t, &n, &d);
1697:src/display.c **** 	dn_compare(&t, &t, &w);
1698:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1699:src/display.c **** 
1700:src/display.c **** 	if (dn_eq(&n, &d)) {
1701:src/display.c **** 	  dn_inc(&w);
1702:src/display.c **** 	  decNumberZero(&n);
1703:src/display.c **** 	}
1704:src/display.c **** 
1705:src/display.c **** 	if (!UState.improperfrac) {
1706:src/display.c **** 	  if (!dn_eq0(&w)) {
1707:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1708:src/display.c **** 	    *p++ = ' ';
1709:src/display.c **** 	  }
1710:src/display.c **** 	} else {
1711:src/display.c **** 	  dn_multiply(&x, &w, &d);
1712:src/display.c **** 	  dn_add(&n, &n, &x);
1713:src/display.c **** 	}
1714:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1715:src/display.c **** 	*p++ = '/';
1716:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1717:src/display.c **** 	*p = '\0';
1718:src/display.c **** 	if ((p - 12) > buf) {
1719:src/display.c **** 	  p -= 12;
1720:src/display.c **** 	  *p = '<';
1721:src/display.c **** 	} else	p = buf;
1722:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1723:src/display.c **** 	  res = set_dig_s(j, *p, res);
1724:src/display.c **** 	  j += SEGS_PER_DIGIT;
1725:src/display.c **** 	}
1726:src/display.c **** 
1727:src/display.c **** 	if (dn_eq0(&t))
1728:src/display.c **** 	  p = (char *)S7_fract_EQ;
1729:src/display.c **** 	else if (decNumberIsNegative(&t))
1730:src/display.c **** 	  p = (char *)S7_fract_LT;
1731:src/display.c **** 	else
1732:src/display.c **** 	  p = (char *)S7_fract_GT;
1733:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
1735:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1736:src/display.c **** 	}
1737:src/display.c **** 	return 1;
1738:src/display.c ****       }
1739:src/display.c **** 
1740:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1741:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1742:src/display.c **** 	decNumber c;
ARM GAS  /tmp/ccDDbRKQ.s 			page 45


1743:src/display.c **** 	int true_exp, x=0;
1744:src/display.c **** 	int min_pos_exp, max_neg_exp;
1745:src/display.c **** 
1746:src/display.c **** 	if ( mode != MODE_STD ) {
1747:src/display.c **** 	  min_pos_exp = 9;
1748:src/display.c **** 	  max_neg_exp = -5;
1749:src/display.c **** 	}
1750:src/display.c **** 	else {
1751:src/display.c **** 	  min_pos_exp = 12;
1752:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1753:src/display.c **** 	}
1754:src/display.c **** 
1755:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1756:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1757:src/display.c **** 
1758:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1759:src/display.c **** 	  x = *dd;
1760:src/display.c **** 	}
1761:src/display.c **** 
1762:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1763:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1764:src/display.c **** 	  *dd += -true_exp;
1765:src/display.c **** 	  return MODE_FIX;
1766:src/display.c **** 	}
1767:src/display.c **** 
1768:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1769:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1770:src/display.c **** 	}
1771:src/display.c **** 	else {
1772:src/display.c **** 	  return MODE_STD;
1773:src/display.c **** 	}
1774:src/display.c ****       }
1775:src/display.c **** #else
1776:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1777:src/display.c **** 	decNumber b, c;
1778:src/display.c **** 
1779:src/display.c **** 	dn_1(&b);
1780:src/display.c **** 	b.exponent -= UState.dispdigs;
1781:src/display.c **** 	dn_abs(&c, z);
1782:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1783:src/display.c **** 	  return MODE_FIX;
1784:src/display.c **** 	return MODE_STD;
1785:src/display.c ****       }
1786:src/display.c **** #endif
1787:src/display.c **** 
1788:src/display.c ****       /* SHOW display mode
1789:src/display.c ****        * in double precision show left or right part
1790:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1791:src/display.c ****        */
1792:src/display.c ****       static void show_x(char *x, int exp) {
1793:src/display.c **** 	const int dbl = is_dblmode();
1794:src/display.c **** 	char *p;
1795:src/display.c **** 	int i, j;
1796:src/display.c **** 	char *upper_str;
1797:src/display.c **** 	enum separator_modes separator_mode;
1798:src/display.c **** 	char decimal_mark;
1799:src/display.c **** 	char thousands_sep;
ARM GAS  /tmp/ccDDbRKQ.s 			page 46


1800:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1801:src/display.c **** 	const int grouping = 0;
1802:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1803:src/display.c **** 	const int grouping = !UState.nothousands;
1804:src/display.c **** #else
1805:src/display.c **** 	const int grouping = 1;
1806:src/display.c **** #endif
1807:src/display.c **** 	int negative;
1808:src/display.c **** 
1809:src/display.c **** 	if (x[0] == '-') {
1810:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1811:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1812:src/display.c **** 
1813:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1814:src/display.c **** 	  xcopy(x, small_minus, 4);
1815:src/display.c **** 	  x += 4;
1816:src/display.c **** 	  negative = 4;
1817:src/display.c **** #else
1818:src/display.c **** 	  ++x;
1819:src/display.c **** 	  negative = 1;
1820:src/display.c **** #endif
1821:src/display.c **** 	}
1822:src/display.c **** 	else negative = 0;
1823:src/display.c **** 
1824:src/display.c **** 	p = find_char(x, '\0');
1825:src/display.c **** 	xset(p, '0', 34 - (p - x));
1826:src/display.c **** 
1827:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1828:src/display.c **** 	  separator_mode = SEP_COMMA;
1829:src/display.c **** 	  decimal_mark = '.';
1830:src/display.c **** 	  thousands_sep = ',';
1831:src/display.c **** 	}
1832:src/display.c **** 	else {
1833:src/display.c **** 	  separator_mode = SEP_DOT;
1834:src/display.c **** 	  decimal_mark = ',';
1835:src/display.c **** 	  thousands_sep = '.';
1836:src/display.c **** 	}
1837:src/display.c **** 
1838:src/display.c **** 	if (State2.window) { // right half in double precision mode
1839:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1840:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1841:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1842:src/display.c **** 
1843:src/display.c **** 	  upper_str = x + 3;
1844:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1845:src/display.c **** 	  if (grouping) {
1846:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1847:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1848:src/display.c **** 	    x += 3 + 13 + 7;
1849:src/display.c **** 	  }
1850:src/display.c **** 	  else x += 3 + 13 + 6;
1851:src/display.c **** #else
1852:src/display.c **** 	  upper_str = x + 13;
1853:src/display.c **** 	  xset(upper_str, '.', 3);
1854:src/display.c **** 	  if (grouping) {
1855:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1856:src/display.c **** 	    upper_str[6] = thousands_sep;
ARM GAS  /tmp/ccDDbRKQ.s 			page 47


1857:src/display.c **** 	    x += 13 + 3 + 7;
1858:src/display.c **** 	  }
1859:src/display.c **** 	  else x += 13 + 3 + 6;
1860:src/display.c **** #endif
1861:src/display.c **** 	  negative = 0;
1862:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1863:src/display.c **** 	}
1864:src/display.c **** 	else {
1865:src/display.c **** 	  upper_str = x;
1866:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1867:src/display.c **** 	  x[1] = decimal_mark;
1868:src/display.c **** 	  if (grouping) {
1869:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1870:src/display.c **** 	    x[5] = thousands_sep;
1871:src/display.c **** 	    x += 9;
1872:src/display.c **** 	  }
1873:src/display.c **** 	  else x += 8;
1874:src/display.c **** 	  if (dbl) {
1875:src/display.c **** 	    if (exp < 0) {
1876:src/display.c **** 	      x[9] = '-';
1877:src/display.c **** 	      exp = -exp;
1878:src/display.c **** 	    }
1879:src/display.c **** 	    else
1880:src/display.c **** 	      x[9] = ' ';
1881:src/display.c **** 	    j = exp / 1000;
1882:src/display.c **** 	    x[10] = '0' + j;
1883:src/display.c **** 	    exp -= 1000 * j;
1884:src/display.c **** 	  }
1885:src/display.c **** 	  else {
1886:src/display.c **** 	    x[9] = '\0';
1887:src/display.c **** 	    x[10] = '\0';
1888:src/display.c **** 	  }
1889:src/display.c **** 	  xcopy(x + 1, x, 11);
1890:src/display.c **** 	  *x = 0;
1891:src/display.c **** 	  set_exp(exp, 1, CNULL);
1892:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1893:src/display.c **** 	}
1894:src/display.c **** 	if (grouping) {
1895:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1896:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1897:src/display.c **** 	  }
1898:src/display.c **** 	}
1899:src/display.c **** 
1900:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1901:src/display.c **** 	  set_dig(j, x[i]);
1902:src/display.c **** 
1903:src/display.c **** 	*x = '\0';
1904:src/display.c **** 	set_status(upper_str - negative);
1905:src/display.c ****       }
1906:src/display.c **** 
1907:src/display.c **** 
1908:src/display.c ****       /* Display the X register in the numeric portion of the display.
1909:src/display.c ****        * We have to account for the various display modes and numbers of
1910:src/display.c ****        * digits.
1911:src/display.c ****        */
1912:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1913:src/display.c **** 	decNumber z;
ARM GAS  /tmp/ccDDbRKQ.s 			page 48


1914:src/display.c **** 	int digits = DISPLAY_DIGITS;
1915:src/display.c **** 
1916:src/display.c **** 	if (dbl)
1917:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1918:src/display.c **** 	else
1919:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1920:src/display.c **** 	set_x_dn(&z, res, &digits);
1921:src/display.c ****       }
1922:src/display.c **** 
1923:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1924:src/display.c **** 	char x[50], *obp = x;
1925:src/display.c **** 	int odig = 0;
1926:src/display.c **** 	int show_exp = 0;
1927:src/display.c **** 	int j;
1928:src/display.c **** 	char mantissa[64];
1929:src/display.c **** 	int exp = 0;
1930:src/display.c **** 	char *p = mantissa;
1931:src/display.c **** 	char *r;
1932:src/display.c **** 	const char *q;
1933:src/display.c **** 	int count, i;
1934:src/display.c **** 	int extra_digits = 0;
1935:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1936:src/display.c **** 	int dd;
1937:src/display.c **** 	int dispdigs;
1938:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1939:src/display.c **** #else
1940:src/display.c **** 	int dd = UState.dispdigs;
1941:src/display.c **** 	int mode = UState.dispmode;
1942:src/display.c **** #endif
1943:src/display.c **** 	int c;
1944:src/display.c **** 	int negative = 0;
1945:src/display.c **** 	int trimzeros = 0;
1946:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1947:src/display.c **** 	const int show_large_exponent = 0;
1948:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1949:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1950:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1951:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1952:src/display.c **** #else
1953:src/display.c **** 	const int show_large_exponent = 1;
1954:src/display.c **** #endif
1955:src/display.c **** 
1956:src/display.c **** 	set_separator_decimal_modes();
1957:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1958:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1959:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1960:src/display.c **** 	    if (State2.hms) {
1961:src/display.c **** 	      set_x_hms(z, res);
1962:src/display.c **** 	      return;
1963:src/display.c **** 	    }
1964:src/display.c **** 	    else if (UState.fract) {
1965:src/display.c **** 	      if (set_x_fract(z, res))
1966:src/display.c **** 		return;
1967:src/display.c **** 	    }
1968:src/display.c **** 	  }
1969:src/display.c **** 	}		
1970:src/display.c **** #else
ARM GAS  /tmp/ccDDbRKQ.s 			page 49


1971:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1972:src/display.c **** 	  if (State2.hms) {
1973:src/display.c **** 	    set_x_hms(z, res);
1974:src/display.c **** 	    State2.hms = 0;
1975:src/display.c **** 	    return;
1976:src/display.c **** 	  } else if (UState.fract) {
1977:src/display.c **** 	    if (set_x_fract(z, res))
1978:src/display.c **** 	      return;
1979:src/display.c **** 	  }
1980:src/display.c **** 	}
1981:src/display.c **** #endif
1982:src/display.c **** 
1983:src/display.c **** 	if (check_special_dn(z, res))
1984:src/display.c **** 	  return;
1985:src/display.c **** 
1986:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1987:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1988:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1989:src/display.c **** 	  z->exponent = 0;
1990:src/display.c **** 	}
1991:src/display.c **** 
1992:src/display.c **** 	xset(x, '\0', sizeof(x));
1993:src/display.c **** 
1994:src/display.c **** 	if (dn_eq0(z)) {
1995:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1996:src/display.c **** 	    x[0] = '-';
1997:src/display.c **** 	    x[1] = '0';
1998:src/display.c **** 	  } else
1999:src/display.c **** 	    x[0] = '0';
2000:src/display.c **** 	} else
2001:src/display.c **** 	  decNumberToString(z, x);
2002:src/display.c **** 
2003:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2004:src/display.c **** 	  show_x(x, exp);
2005:src/display.c **** 	  return;
2006:src/display.c **** 	}
2007:src/display.c **** 
2008:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2009:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2010:src/display.c **** 	  //  ALL mode: fill the display
2011:src/display.c **** 	  dd = *display_digits - 1;
2012:src/display.c **** 	else
2013:src/display.c **** 	  dd = dispdigs;
2014:src/display.c **** 
2015:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2016:src/display.c **** 	  int orig_mode = mode;
2017:src/display.c **** 
2018:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2019:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2020:src/display.c **** 	    // allow zeros to be trimmed
2021:src/display.c **** 	    trimzeros = 1;
2022:src/display.c **** 	  if (orig_mode == MODE_STD)
2023:src/display.c **** 	    dd = *display_digits - 1;
2024:src/display.c ****  	}
2025:src/display.c **** #else
2026:src/display.c **** 	if (mode == MODE_STD) {
2027:src/display.c **** 	  mode = std_round_fix(z);
ARM GAS  /tmp/ccDDbRKQ.s 			page 50


2028:src/display.c **** 	  trimzeros = 1;
2029:src/display.c **** 	  dd = *display_digits - 1;
2030:src/display.c **** 	} else if (dd >= *display_digits)
2031:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2032:src/display.c **** 	  dd = *display_digits - 1;
2033:src/display.c **** #endif
2034:src/display.c **** 
2035:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2036:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2037:src/display.c **** 
2038:src/display.c **** 	q = find_char(x, 'E');
2039:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2040:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2041:src/display.c **** 	if (q == NULL) exp = 0;
2042:src/display.c **** 	else {
2043:src/display.c **** 	  exp = s_to_i(q+1);
2044:src/display.c **** 	  if (*q == 'D') exp = -exp;
2045:src/display.c **** 	}
2046:src/display.c **** #else
2047:src/display.c **** 	if (q == NULL) exp = 0;
2048:src/display.c **** 	else exp = s_to_i(q+1);
2049:src/display.c **** #endif
2050:src/display.c **** 
2051:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2052:src/display.c **** 	for (q=x; *q == ' '; q++);
2053:src/display.c **** 	if (!res) {
2054:src/display.c **** 	  CLR_EXP_SIGN;
2055:src/display.c **** 	  CLR_MANT_SIGN;
2056:src/display.c **** 	}
2057:src/display.c **** 	if (*q == '-') {
2058:src/display.c **** 	  negative = 1;
2059:src/display.c **** 	  q++;
2060:src/display.c **** 	} else if (*q == '+')
2061:src/display.c **** 	  q++;
2062:src/display.c **** 	for (; *q == '0'; q++);
2063:src/display.c **** 	if (*q == '.') {
2064:src/display.c **** 	  do
2065:src/display.c **** 	    exp--;
2066:src/display.c **** 	  while (*++q == '0');
2067:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2068:src/display.c **** 	    *p++ = *q++;
2069:src/display.c **** 	} else {
2070:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2071:src/display.c **** 	    *p++ = *q++;
2072:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2073:src/display.c **** 	    *p++ = *q++;
2074:src/display.c **** 	    exp++;
2075:src/display.c **** 	  }
2076:src/display.c **** 	  if (*q == '.') {
2077:src/display.c **** 	    q++;
2078:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2079:src/display.c **** 	      *p++ = *q++;
2080:src/display.c **** 	  }
2081:src/display.c **** 	}
2082:src/display.c **** 
2083:src/display.c **** 	if (mode == MODE_FIX) {
2084:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
ARM GAS  /tmp/ccDDbRKQ.s 			page 51


2085:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2086:src/display.c **** 	  else {
2087:src/display.c **** 	    extra_digits = exp;
2088:src/display.c **** 	    /* We might have push the fixed decimals off the
2089:src/display.c **** 	     * screen so adjust if so.
2090:src/display.c **** 	     */
2091:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2092:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2093:src/display.c **** 	  }
2094:src/display.c **** 	}
2095:src/display.c **** 
2096:src/display.c **** 	// Round the mantissa to the number of digits desired
2097:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2098:src/display.c **** 	if (*p >= '5') {	// Round up
2099:src/display.c **** 	  *p = '0';
2100:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2101:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2102:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2103:src/display.c **** 	    mantissa[0] = '1';
2104:src/display.c **** 	    exp++;
2105:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2106:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2107:src/display.c **** 	      extra_digits = 0;
2108:src/display.c **** 	    }
2109:src/display.c **** 	  } else {
2110:src/display.c **** 	    while (*--p == '9')
2111:src/display.c **** 	      *p = '0';
2112:src/display.c **** 	    (*p)++;
2113:src/display.c **** 	  }
2114:src/display.c **** 	}
2115:src/display.c **** 
2116:src/display.c **** 	// Zap what is left
2117:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2118:src/display.c **** 
2119:src/display.c **** 	p = mantissa;
2120:src/display.c **** 	switch (mode) {
2121:src/display.c **** 	default:
2122:src/display.c **** 	case MODE_STD:   
2123:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2124:src/display.c **** 	  if (count != *display_digits)
2125:src/display.c **** 	    count++;
2126:src/display.c **** 	  // Too big or too small to fit on display
2127:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2128:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2129:src/display.c **** 	    case -1:
2130:src/display.c **** 	    case 2:
2131:src/display.c **** 	      *obp++ = *p++;
2132:src/display.c **** 	      odig++;
2133:src/display.c **** 	      dd--;
2134:src/display.c **** 	      exp--;
2135:src/display.c **** 	    case -2:
2136:src/display.c **** 	    case 1:
2137:src/display.c **** 	      *obp++ = *p++;
2138:src/display.c **** 	      odig++;
2139:src/display.c **** 	      dd--;
2140:src/display.c **** 	      exp--;
2141:src/display.c **** 	    case 0:
ARM GAS  /tmp/ccDDbRKQ.s 			page 52


2142:src/display.c **** 	      ;
2143:src/display.c **** 	    };
2144:src/display.c **** 	    *obp++ = *p++;
2145:src/display.c **** 	    odig++;
2146:src/display.c **** 	    *obp++ = '.';
2147:src/display.c **** 	    for (i=1; i<count; i++) {
2148:src/display.c **** 	      *obp++ = *p++;
2149:src/display.c **** 	      odig++;
2150:src/display.c **** 	    }
2151:src/display.c **** 	    show_exp = 1;
2152:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2153:src/display.c **** 	    for(i=0; i<=exp; i++) {
2154:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2155:src/display.c **** 		*obp++ = ',';
2156:src/display.c **** 	      *obp++ = *p++;
2157:src/display.c **** 	      odig++;
2158:src/display.c **** 	    }
2159:src/display.c **** 	    *obp++ = '.';
2160:src/display.c **** 	    if (count > (exp + 1)) {
2161:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2162:src/display.c **** 		*obp++ = *p++;
2163:src/display.c **** 		odig++;
2164:src/display.c **** 	      }
2165:src/display.c **** 	    }
2166:src/display.c **** 	  } else {		// All digits to right of decimal point
2167:src/display.c **** 	    *obp++ = '0';
2168:src/display.c **** 	    odig++;
2169:src/display.c **** 	    *obp++ = '.';
2170:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2171:src/display.c **** 	      *obp++ = '0';
2172:src/display.c **** 	      odig++;
2173:src/display.c **** 	    }
2174:src/display.c **** 	    for (i=0; i<count; i++) {
2175:src/display.c **** 	      *obp++ = *p++;
2176:src/display.c **** 	      odig++;
2177:src/display.c **** 	    }
2178:src/display.c **** 	  }
2179:src/display.c **** 	  break;
2180:src/display.c **** 
2181:src/display.c **** 	case MODE_FIX:
2182:src/display.c **** 	  j = 0;
2183:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2184:src/display.c **** 	    for (i=0; i<=exp; i++) {
2185:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2186:src/display.c **** 		*obp++ = ',';
2187:src/display.c **** 	      *obp++ = *p++;
2188:src/display.c **** 	      odig++;
2189:src/display.c **** 	    }
2190:src/display.c **** 	    *obp++ = '.';
2191:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2192:src/display.c **** 	      *obp++ = *p++;
2193:src/display.c **** 	      odig++;
2194:src/display.c **** 	    }
2195:src/display.c **** 	  } else {		// All digits to right of decimal point
2196:src/display.c **** 	    *obp++ = '0';
2197:src/display.c **** 	    odig++;
2198:src/display.c **** 	    *obp++ = '.';
ARM GAS  /tmp/ccDDbRKQ.s 			page 53


2199:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2200:src/display.c **** 	      *obp++ = '0';
2201:src/display.c **** 	      odig++;
2202:src/display.c **** 	      dd--;
2203:src/display.c **** 	    }
2204:src/display.c **** 	    while (dd-- > 0) {
2205:src/display.c **** 	      *obp++ = *p++;
2206:src/display.c **** 	      odig++;
2207:src/display.c **** 	    }
2208:src/display.c **** 	  }
2209:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2210:src/display.c **** 	  if (trimzeros)
2211:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2212:src/display.c **** 	      obp--;
2213:src/display.c **** 	      odig--;
2214:src/display.c **** 	    }
2215:src/display.c **** #endif			
2216:src/display.c **** 	  break;
2217:src/display.c **** 
2218:src/display.c **** 	case MODE_ENG:
2219:src/display.c **** 	  switch (exp % 3) {
2220:src/display.c **** 	  case -1:
2221:src/display.c **** 	  case 2:
2222:src/display.c **** 	    *obp++ = *p++;
2223:src/display.c **** 	    odig++;
2224:src/display.c **** 	    dd--;
2225:src/display.c **** 	    exp--;
2226:src/display.c **** 	  case -2:
2227:src/display.c **** 	  case 1:
2228:src/display.c **** 	    *obp++ = *p++;
2229:src/display.c **** 	    odig++;
2230:src/display.c **** 	    dd--;
2231:src/display.c **** 	    exp--;
2232:src/display.c **** 	  case 0:
2233:src/display.c **** 	    ;
2234:src/display.c **** 	  };
2235:src/display.c **** 	  // Falling through
2236:src/display.c **** 
2237:src/display.c **** 	case MODE_SCI:
2238:src/display.c **** 	  *obp++ = *p++;
2239:src/display.c **** 	  odig++;
2240:src/display.c **** 	  *obp++ = '.';
2241:src/display.c **** 	  dd--;
2242:src/display.c **** 	  while (dd-- >= 0) {
2243:src/display.c **** 	    *obp++ = *p++;
2244:src/display.c **** 	    odig++;
2245:src/display.c **** 	  }
2246:src/display.c **** 	  show_exp = 1;
2247:src/display.c **** 	}
2248:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2249:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2250:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2251:src/display.c **** 	    obp--;
2252:src/display.c **** 	    odig--;
2253:src/display.c **** 	  }
2254:src/display.c **** #endif	
2255:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 54


2256:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2257:src/display.c **** 	  set_x_dn(z, res, display_digits);
2258:src/display.c **** 	  return;
2259:src/display.c **** 	}
2260:src/display.c **** 	/* Finally, send the output to the display */
2261:src/display.c **** 	*obp = '\0';
2262:src/display.c **** 	if (odig > *display_digits)
2263:src/display.c **** 	  odig = *display_digits;
2264:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2265:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2266:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2267:src/display.c **** 	if (negative) {
2268:src/display.c **** 	  if (res) *res++ = '-';
2269:src/display.c **** 	  else {
2270:src/display.c **** 	    if (j == 0)
2271:src/display.c **** 	      SET_MANT_SIGN;
2272:src/display.c **** 	    else
2273:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2274:src/display.c **** 	  }
2275:src/display.c **** 	}
2276:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2277:src/display.c **** 	  if (c == '.') {
2278:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2279:src/display.c **** 	  } else if (c == ',') {
2280:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2281:src/display.c **** 	  } else {
2282:src/display.c **** 	    res = set_dig_s(j, c, res);
2283:src/display.c **** 	    j += SEGS_PER_DIGIT;
2284:src/display.c **** 	  }
2285:src/display.c **** 	}
2286:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2287:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2288:src/display.c **** 	  if ( !res ) {
2289:src/display.c **** 	    set_exp(exp, 4, res);
2290:src/display.c **** 	  }
2291:src/display.c **** 	  else {
2292:src/display.c **** 	    set_exp(exp, 0, res);
2293:src/display.c **** 	  }
2294:src/display.c **** 	}
2295:src/display.c **** #else
2296:src/display.c **** 	if (show_exp)
2297:src/display.c **** 	  set_exp(exp, 0, res);
2298:src/display.c **** #endif
2299:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2300:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2301:src/display.c **** 	*display_digits = odig;
2302:src/display.c ****       }
2303:src/display.c **** 
2304:src/display.c **** #if defined(QTGUI) || defined(IOS)
2305:src/display.c ****       void format_display(char *buf) {
2306:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2307:src/display.c **** 	  {
2308:src/display.c **** 	    const char *p = get_cmdline();
2309:src/display.c **** 	    if (p == NULL) {
2310:src/display.c **** 	      format_reg(regX_idx, buf);
2311:src/display.c **** 	    } else {
2312:src/display.c **** 	      scopy(buf, p);
ARM GAS  /tmp/ccDDbRKQ.s 			page 55


2313:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2314:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2315:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2316:src/display.c **** 		buf[CmdLineEex] = 'E';
2317:src/display.c **** 		buf[CmdLineEex+1] = '-';
2318:src/display.c **** 	      }
2319:src/display.c **** #  endif
2320:src/display.c **** 	    }
2321:src/display.c **** 	  }
2322:src/display.c **** 	else {
2323:src/display.c **** 	  buf[0]=0;
2324:src/display.c **** 	}
2325:src/display.c ****       }
2326:src/display.c **** #endif
2327:src/display.c **** 
2328:src/display.c ****       void format_reg(int index, char *buf) {
2329:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2330:src/display.c **** 
2331:src/display.c **** 	if (is_intmode())
2332:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2333:src/display.c **** #ifndef HP16C_MODE_CHANGE
2334:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2335:src/display.c **** 	  decNumber x;
2336:src/display.c **** 	  int s;
2337:src/display.c **** 	  unsigned long long int v;
2338:src/display.c **** 
2339:src/display.c **** 	  getRegister(&x, index);
2340:src/display.c **** 	  v = dn_to_ull(&x, &s);
2341:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2342:src/display.c **** 	}
2343:src/display.c **** #endif
2344:src/display.c **** 	else
2345:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2346:src/display.c ****       }
2347:src/display.c **** 
2348:src/display.c ****       /* Display the status screen */
2349:src/display.c ****       static void show_status(void) {
2350:src/display.c **** 	int i, n;
2351:src/display.c **** 	int j = SEGS_EXP_BASE;
2352:src/display.c **** 	const int status = State2.status - 3;
2353:src/display.c **** 	char buf[16], *p = buf;
2354:src/display.c **** 	unsigned int pc;
2355:src/display.c **** 
2356:src/display.c **** 	if (status == -2) {
2357:src/display.c **** 	  set_status("Free:");
2358:src/display.c **** 	  p = num_arg(buf, free_mem());
2359:src/display.c **** 	  p = scopy(p, " , FL. ");
2360:src/display.c **** 	  p = num_arg(p, free_flash());
2361:src/display.c **** 	  *p = '\0';
2362:src/display.c **** 	  set_digits_string(buf, 0);
2363:src/display.c **** 	}
2364:src/display.c **** 	else if (status == -1) {
2365:src/display.c **** 	  /* Top line */
2366:src/display.c **** 	  p = scopy(buf, "Regs:");
2367:src/display.c **** 	  if (SizeStatRegs)
2368:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2369:src/display.c **** 	  *p = '\0';
ARM GAS  /tmp/ccDDbRKQ.s 			page 56


2370:src/display.c **** 	  set_status(buf);
2371:src/display.c **** 
2372:src/display.c **** 	  /* Bottom line */
2373:src/display.c **** 	  p = num_arg(buf, global_regs());
2374:src/display.c **** 	  if (LocalRegs < 0) {
2375:src/display.c **** 	    p = scopy(p, " , Loc. ");
2376:src/display.c **** 	    p = num_arg(p, local_regs());
2377:src/display.c **** 	  }
2378:src/display.c **** 	  *p = '\0';
2379:src/display.c **** 	  set_digits_string(buf, 0);
2380:src/display.c **** 	} else {
2381:src/display.c **** 	  int base;
2382:src/display.c **** 	  int end;
2383:src/display.c **** 	  int group = 10;
2384:src/display.c **** 	  int start = 0;
2385:src/display.c **** 		
2386:src/display.c **** 	  if (status <= 9) {
2387:src/display.c **** 	    base = 10 * status;
2388:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2389:src/display.c **** 	    p = scopy(buf, "FL ");
2390:src/display.c **** 	    p = num_arg_0(p, base, 2);
2391:src/display.c **** 	    *p++ = '-';
2392:src/display.c **** 	    p = num_arg_0(p, end, 2);
2393:src/display.c **** 	    *p = '\0';
2394:src/display.c **** 	    set_status(buf);
2395:src/display.c **** 	  }
2396:src/display.c **** 	  else if (status == 10) {
2397:src/display.c **** 	    base = regX_idx;
2398:src/display.c **** 	    end = regK_idx;
2399:src/display.c **** 	    start = 3;
2400:src/display.c **** 	    group = 4;
2401:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2402:src/display.c **** 	  }
2403:src/display.c **** 	  else { // status == 11
2404:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2405:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2406:src/display.c **** 	    set_status("FL.00-.15");
2407:src/display.c **** 	  }
2408:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2409:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2410:src/display.c **** 	  j += SEGS_PER_DIGIT;
2411:src/display.c **** 	  for (i = start; i < group + start; i++) {
2412:src/display.c **** 	    int k = i + base - start;
2413:src/display.c **** 	    int l = get_user_flag(k);
2414:src/display.c **** 	    k += group;
2415:src/display.c **** 	    if (end >= k) {
2416:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2417:src/display.c **** 	      k += group;
2418:src/display.c **** 	      if (end >= k)
2419:src/display.c **** 		l |= (get_user_flag(k) << 2);
2420:src/display.c **** 	    }
2421:src/display.c **** 	    set_dig(j, l);
2422:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2423:src/display.c **** 	    j += SEGS_PER_DIGIT;
2424:src/display.c **** 	    if (i == 4) {
2425:src/display.c **** 	      set_dig(j, 8);
2426:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
ARM GAS  /tmp/ccDDbRKQ.s 			page 57


2427:src/display.c **** 	      j += SEGS_PER_DIGIT;
2428:src/display.c **** 	    }
2429:src/display.c **** 	  }
2430:src/display.c **** 	}
2431:src/display.c **** 
2432:src/display.c **** 	j = SEGS_EXP_BASE;
2433:src/display.c **** 	pc = state_pc();
2434:src/display.c **** 	if (isXROM(pc))
2435:src/display.c **** 	  pc = 1;
2436:src/display.c **** 	for (n=i=0; i<4; i++) {
2437:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2438:src/display.c **** 	    if (++n == 4) {
2439:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2440:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2441:src/display.c **** 	    } else {
2442:src/display.c **** 	      set_dig(j, 'A'+i);
2443:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2444:src/display.c **** 	    }
2445:src/display.c **** 	  }
2446:src/display.c **** 	}
2447:src/display.c ****       }
2448:src/display.c **** 
2449:src/display.c **** 
2450:src/display.c ****       /* Display the list of alpha labels */
2451:src/display.c ****       static void show_label(void) {
2452:src/display.c **** 	char buf[16];
2453:src/display.c **** 	unsigned short int pc = State2.digval;
2454:src/display.c **** 	unsigned int op = getprog(pc);
2455:src/display.c **** 	int n = nLIB(pc);
2456:src/display.c **** 	unsigned short int lblpc;
2457:src/display.c **** 
2458:src/display.c **** 	set_status(prt((opcode)op, buf));
2459:src/display.c **** 	set_digits_string(libname[n], 0);
2460:src/display.c **** 
2461:src/display.c **** 	if (op & OP_DBL) {
2462:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2463:src/display.c **** 	  if (lblpc != pc) {
2464:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2465:src/display.c **** 	    n = nLIB(lblpc);
2466:src/display.c **** 	    if (n == REGION_RAM)
2467:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2468:src/display.c **** 	    else {
2469:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2470:src/display.c **** 	    }
2471:src/display.c **** 	  }
2472:src/display.c **** 	}
2473:src/display.c ****       }
2474:src/display.c **** 
2475:src/display.c ****       /* Display a list of register contents */
2476:src/display.c ****       static void show_registers(void) {
2477:src/display.c **** 	char buf[16], *bp;
2478:src/display.c **** 	int n = State2.digval;
2479:src/display.c **** 	
2480:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2481:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2482:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2483:src/display.c **** 	  n;
ARM GAS  /tmp/ccDDbRKQ.s 			page 58


2484:src/display.c **** #else
2485:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2486:src/display.c **** 	  n;
2487:src/display.c **** #endif
2488:src/display.c **** 
2489:src/display.c **** 	if (State2.disp_as_alpha) {
2490:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2491:src/display.c **** 	}
2492:src/display.c **** 	else {
2493:src/display.c **** 	  xset(buf, '\0', 16);
2494:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2495:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2496:src/display.c **** #else
2497:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2498:src/display.c **** #endif
2499:src/display.c **** 	  if (State2.local) {
2500:src/display.c **** 	    *bp++ = '.';
2501:src/display.c **** 	    if (n >= 100) {
2502:src/display.c **** 	      *bp++ = '1';
2503:src/display.c **** 	      n -= 100;
2504:src/display.c **** 	    }
2505:src/display.c **** 	  }
2506:src/display.c **** 	  if (n < 100)
2507:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2508:src/display.c **** 	  else
2509:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2510:src/display.c **** 	  set_status(buf);
2511:src/display.c **** 	}
2512:src/display.c **** 	format_reg(reg, CNULL);
2513:src/display.c ****       }
2514:src/display.c **** 
2515:src/display.c **** 
2516:src/display.c ****       static void set_annunciators(void)
2517:src/display.c ****       {
2518:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2519:src/display.c **** 
2520:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2521:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2522:src/display.c **** 	 * browsing constants.
2523:src/display.c **** 	 */
2524:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2525:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2526:src/display.c **** #else
2527:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2528:src/display.c **** #endif
2529:src/display.c **** #ifdef INCLUDE_C_LOCK
2530:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2531:src/display.c **** #endif
2532:src/display.c **** 
2533:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2534:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2535:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2536:src/display.c **** 	set_IO_annunciator();
2537:src/display.c **** 
2538:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2539:src/display.c **** 	 */
2540:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
ARM GAS  /tmp/ccDDbRKQ.s 			page 59


2541:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2542:src/display.c ****       }
2543:src/display.c **** 
2544:src/display.c **** 
2545:src/display.c ****       /*
2546:src/display.c ****        *  Toggle the little "=" sign
2547:src/display.c ****        */
2548:src/display.c ****       void set_IO_annunciator(void) {
2549:src/display.c **** #ifndef DM42
2550:src/display.c **** 	int on = SerialOn
2551:src/display.c **** #endif
2552:src/display.c **** #ifdef DM42
2553:src/display.c **** 	  int on = 0
2554:src/display.c **** #endif
2555:src/display.c **** #ifdef REALBUILD
2556:src/display.c **** 	  || DebugFlag
2557:src/display.c **** #endif
2558:src/display.c **** #ifdef INFRARED
2559:src/display.c **** 	  || PrinterColumn != 0
2560:src/display.c **** #endif
2561:src/display.c **** 	  ;
2562:src/display.c **** 
2563:src/display.c **** 	if (on != IoAnnunciator) {
2564:src/display.c **** 	  dot(LIT_EQ, on);
2565:src/display.c **** 	  IoAnnunciator = on;
2566:src/display.c **** 	  finish_display(); //LIT_EQ
2567:src/display.c **** 	}
2568:src/display.c ****       }
2569:src/display.c **** 
2570:src/display.c **** #ifdef TOP_ROW
2571:src/display.c ****       /*
2572:src/display.c ****        *  Update the display
2573:src/display.c ****        */
2574:src/display.c ****       void display(void) {
2575:src/display.c **** 	int i, j;
2576:src/display.c **** 	char buf[40], *bp = buf;
2577:src/display.c **** 	const char *p;
2578:src/display.c **** 	int annuc = 0;
2579:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2580:src/display.c **** 	int skip = 0;
2581:src/display.c **** 	int x_disp = 0;
2582:src/display.c **** 	const int shift = cur_shift();
2583:src/display.c **** 
2584:src/display.c **** 	no_status_top = 0;
2585:src/display.c **** 	if (State2.disp_freeze) {
2586:src/display.c **** 	  State2.disp_freeze = 0;
2587:src/display.c **** 	  State2.disp_temp = 1;
2588:src/display.c **** #ifdef CONSOLE
2589:src/display.c **** 	  JustDisplayed = 1;
2590:src/display.c **** #endif
2591:src/display.c **** 	  ShowRPN = 0;
2592:src/display.c **** 	  return;
2593:src/display.c **** 	}
2594:src/display.c **** 
2595:src/display.c **** 	if (WasDataEntry) {
2596:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2597:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 60


2598:src/display.c **** 	  // Erase 7-segment display
2599:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2600:src/display.c **** 	    clr_dot(i);
2601:src/display.c **** 	  }
2602:src/display.c **** 	  goto only_update_x;
2603:src/display.c **** 	}
2604:src/display.c **** #ifdef INCLUDE_YREG_CODE
2605:src/display.c **** #  ifdef YREG_ALWAYS_ON
2606:src/display.c **** 	const int yreg_enabled = 1;
2607:src/display.c **** #  else
2608:src/display.c **** 	const int yreg_enabled = UState.show_y;
2609:src/display.c **** #  endif
2610:src/display.c **** #else
2611:src/display.c **** 	const int yreg_enabled = 0;
2612:src/display.c **** #endif
2613:src/display.c **** 	// Clear display
2614:src/display.c **** 	reset_disp();
2615:src/display.c **** 
2616:src/display.c **** 	
2617:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2618:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2619:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2620:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2621:src/display.c **** 	/*   set_status(buf); */
2622:src/display.c **** 	/* } */
2623:src/display.c **** 	if (State2.version) {
2624:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2625:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2626:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2627:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2628:src/display.c **** 	  set_status(vers);
2629:src/display.c **** 	  skip = 1;
2630:src/display.c **** 	  goto nostk;
2631:src/display.c **** 	} else if (State2.confirm) {
2632:src/display.c **** 	  if (yreg_enabled) {
2633:src/display.c **** 	    set_status_top(S_SURE);
2634:src/display.c **** 	    no_status_top = 1;
2635:src/display.c **** 	    annuc = 1;
2636:src/display.c **** 	  }
2637:src/display.c **** 	  else {
2638:src/display.c **** 	    set_status(S_SURE);
2639:src/display.c **** 	  }
2640:src/display.c **** 	} else if (State2.hyp) {
2641:src/display.c **** 	  bp = scopy(bp, "HYP");
2642:src/display.c **** 	  if (! State2.dot)
2643:src/display.c **** 	    *bp++ = '\235';
2644:src/display.c **** 	  if (yreg_enabled) {
2645:src/display.c **** 	    set_status_top(buf);
2646:src/display.c **** 	    no_status_top = 1;
2647:src/display.c **** 	    annuc = 1;
2648:src/display.c **** 	  }
2649:src/display.c **** 	  else {
2650:src/display.c **** 	    set_status(buf);
2651:src/display.c **** 	  }
2652:src/display.c **** 	} else if (State2.gtodot) {
2653:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2654:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
ARM GAS  /tmp/ccDDbRKQ.s 			page 61


2655:src/display.c **** 	  if (State2.numdigit > 0)
2656:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2657:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2658:src/display.c **** 	  *bp++ = '_';
2659:src/display.c **** 	  if (yreg_enabled) {
2660:src/display.c **** 	    set_status_top(buf);
2661:src/display.c **** 	    no_status_top = 1;
2662:src/display.c **** 	    annuc = 1;
2663:src/display.c **** 	  }
2664:src/display.c **** 	  else {
2665:src/display.c **** 	    set_status(buf);
2666:src/display.c **** 	  }
2667:src/display.c **** 	} else if (State2.rarg) {
2668:src/display.c **** 	  /* Commands with arguments */
2669:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2670:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2671:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2672:src/display.c **** #endif
2673:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2674:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2675:src/display.c **** 	  if (State2.dot) {
2676:src/display.c **** 	    *bp++ = 's';
2677:src/display.c **** 	    *bp++ = '_';
2678:src/display.c **** 	  } else if (shift == SHIFT_F) {
2679:src/display.c **** 	    *bp++ = '\021';
2680:src/display.c **** 	    *bp++ = '_';
2681:src/display.c **** 	  } else {
2682:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2683:src/display.c **** 	       : State2.ind ? 2 
2684:src/display.c **** 	       : num_arg_digits(CmdBase); */
2685:src/display.c **** 	    if (State2.local)
2686:src/display.c **** 	      *bp++ = '.';
2687:src/display.c **** 	    if (State2.numdigit > 0) {
2688:src/display.c **** 	      if (State2.shuffle)
2689:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2690:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2691:src/display.c **** 	      else
2692:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2693:src/display.c **** 	    }
2694:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2695:src/display.c **** 	    *bp++ = '_';
2696:src/display.c **** 	  }
2697:src/display.c **** 	  if (yreg_enabled) {
2698:src/display.c **** 	    set_status_top(buf);
2699:src/display.c **** 	    no_status_top = 1;
2700:src/display.c **** 	    annuc = 1;
2701:src/display.c **** 	  }
2702:src/display.c **** 	  else {
2703:src/display.c **** 	    set_status(buf);
2704:src/display.c **** 	  }
2705:src/display.c **** 	} else if (State2.test != TST_NONE) {
2706:src/display.c **** 	  *bp++ = 'x';
2707:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2708:src/display.c **** 	  *bp++ = '_';
2709:src/display.c **** 	  *bp++ = '?';
2710:src/display.c **** 	  if (yreg_enabled) {
2711:src/display.c **** 	    set_status_top(buf);
ARM GAS  /tmp/ccDDbRKQ.s 			page 62


2712:src/display.c **** 	    no_status_top = 1;
2713:src/display.c **** 	    annuc = 1;
2714:src/display.c **** 	  }
2715:src/display.c **** 	  else {
2716:src/display.c **** 	    set_status(buf);
2717:src/display.c **** 	  }
2718:src/display.c **** 	} else if (cata) {
2719:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2720:src/display.c **** 	  char b2[16];
2721:src/display.c **** 	  const char *p;
2722:src/display.c **** 
2723:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2724:src/display.c **** 	  p = catcmd(op, b2);
2725:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2726:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2727:src/display.c **** 	  bp = scopy(bp, p);
2728:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2729:src/display.c **** 	    // State2.disp_small = 1;
2730:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2731:src/display.c **** 	      set_digits_string("0 to 255", 0);
2732:src/display.c **** 	    else
2733:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2734:src/display.c **** 	    skip = 1;
2735:src/display.c **** 	  } else if (State2.runmode) {
2736:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2737:src/display.c **** 	      decNumber x, r;
2738:src/display.c **** 	      decimal64 z;
2739:src/display.c **** 
2740:src/display.c **** 	      getX(&x);
2741:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2742:src/display.c **** 		const unsigned int f = argKIND(op);
2743:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2744:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2745:src/display.c **** 		  update_speed(0);
2746:src/display.c **** 		  fp(&r, &x);
2747:src/display.c **** 		}
2748:src/display.c **** 		else
2749:src/display.c **** 		  set_NaN(&r);
2750:src/display.c **** 	      } else
2751:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2752:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2753:src/display.c **** 	      packed_from_number(&z, &r);
2754:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2755:src/display.c **** 	      skip = 1;
2756:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2757:src/display.c **** 	      REGISTER z, *const x = StackBase;
2758:src/display.c **** 	      copyreg(&z, x);
2759:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2760:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2761:src/display.c **** 	      copyreg(x, &z);
2762:src/display.c **** 	      skip = 1;
2763:src/display.c **** 	    }
2764:src/display.c **** 	  }
2765:src/display.c **** 	  if (yreg_enabled) {
2766:src/display.c **** 	    set_status_top(buf);
2767:src/display.c **** 	    no_status_top = 1;
2768:src/display.c **** 	    annuc = 1;
ARM GAS  /tmp/ccDDbRKQ.s 			page 63


2769:src/display.c **** 	  }
2770:src/display.c **** 	  else {
2771:src/display.c **** 	    set_status(buf);
2772:src/display.c **** 	  }
2773:src/display.c **** 	} else if (State2.multi) {
2774:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2775:src/display.c **** 	  if (State2.numdigit > 0) {
2776:src/display.c **** 	    *bp++ = (char) State2.digval;
2777:src/display.c **** 	    if (State2.numdigit > 1)
2778:src/display.c **** 	      *bp++ = State2.digval2;
2779:src/display.c **** 	  }
2780:src/display.c **** 	  if (yreg_enabled) {
2781:src/display.c **** 	    set_status_top(buf);
2782:src/display.c **** 	    no_status_top = 1;
2783:src/display.c **** 	    annuc = 1;
2784:src/display.c **** 	  }
2785:src/display.c **** 	  else {
2786:src/display.c **** 	    set_status(buf);
2787:src/display.c **** 	  }
2788:src/display.c **** 	} else if (State2.status) {
2789:src/display.c **** 	  show_status();
2790:src/display.c **** 	  skip = 1;
2791:src/display.c **** 	} else if (State2.labellist) {
2792:src/display.c **** 	  show_label();
2793:src/display.c **** 	  skip = 1;
2794:src/display.c **** 	} else if (State2.registerlist) {
2795:src/display.c **** 	  show_registers();
2796:src/display.c **** 	  skip = 1;
2797:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2798:src/display.c **** 	    annunciators();
2799:src/display.c **** 	  }
2800:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2801:src/display.c **** 	} else if (State2.disp_as_alpha) {
2802:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2803:src/display.c **** #endif
2804:src/display.c **** 	} else if (State2.runmode) {
2805:src/display.c **** 	  if (DispMsg) { 
2806:src/display.c **** 	    set_status(DispMsg);
2807:src/display.c **** 	  } else if (DispPlot) {
2808:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2809:src/display.c **** 	  } else if (State2.alphas) {
2810:src/display.c **** 	    bp = scopy(buf, Alpha);
2811:src/display.c **** 	    j = State2.alpha_pos;
2812:src/display.c **** 	    if (j != 0) {
2813:src/display.c **** 	      i = slen(buf);
2814:src/display.c **** 	      j *= 6;
2815:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2816:src/display.c **** 		{
2817:src/display.c **** 		  buf[ (i - j) ] = '\0';
2818:src/display.c **** 		  set_status_right(buf);
2819:src/display.c **** 		}
2820:src/display.c **** 	      else {
2821:src/display.c **** 		set_status(buf);
2822:src/display.c **** 	      }
2823:src/display.c **** 	    }
2824:src/display.c **** 	    else {
2825:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 64


2826:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2827:src/display.c **** 		*bp++ = '\0';
2828:src/display.c **** 	      }
2829:src/display.c **** 	      set_status_right(buf);
2830:src/display.c **** 	    }
2831:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2832:src/display.c **** 	      bp = buf;
2833:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2834:src/display.c **** 	      *bp++ = '\0';
2835:src/display.c **** 	      set_status_top(buf);
2836:src/display.c **** 	      no_status_top = 1;
2837:src/display.c **** 	      //annuc = 1;
2838:src/display.c **** 	    }
2839:src/display.c **** 	  }
2840:src/display.c **** 	  else {
2841:src/display.c **** 	    annuc = 1;
2842:src/display.c **** 	  }
2843:src/display.c **** 	}
2844:src/display.c **** 	else {
2845:src/display.c **** #ifndef DM42
2846:src/display.c **** 	  show_progtrace(buf);
2847:src/display.c **** #endif
2848:src/display.c **** 	  i = state_pc();
2849:src/display.c **** 	  if (i > 0)
2850:src/display.c **** 	    set_status(prt(getprog(i), buf));
2851:src/display.c **** 	  else
2852:src/display.c **** 	    set_status("");
2853:src/display.c **** 	  set_dot(STO_annun);
2854:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2855:src/display.c **** 	    annuc = 1;
2856:src/display.c **** 	  goto nostk;
2857:src/display.c **** 	}
2858:src/display.c **** 	show_stack();
2859:src/display.c ****       nostk:
2860:src/display.c **** 	show_flags();
2861:src/display.c **** 	if (!skip) {
2862:src/display.c **** 	  if (State2.runmode) {
2863:src/display.c **** 	  only_update_x:
2864:src/display.c **** 	    p = get_cmdline();
2865:src/display.c **** 	    if (p == NULL || cata) {
2866:src/display.c **** 	      if (ShowRegister != -1) {
2867:src/display.c **** #ifdef INCLUDE_C_LOCK
2868:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2869:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2870:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2871:src/display.c **** 		    SET_POLAR_READY;
2872:src/display.c **** 		  }
2873:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2874:src/display.c **** 		    State2.hms = 0;
2875:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2876:src/display.c **** 		    State2.hms = 1;
2877:src/display.c **** 		  }
2878:src/display.c **** 		  else {
2879:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2880:src/display.c **** 		  }
2881:src/display.c **** 		  x_disp = 1;
2882:src/display.c **** 		}
ARM GAS  /tmp/ccDDbRKQ.s 			page 65


2883:src/display.c **** 		else {
2884:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2885:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2886:src/display.c **** 		}
2887:src/display.c **** #else		
2888:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2889:src/display.c **** 		format_reg(ShowRegister, CNULL);
2890:src/display.c **** #endif
2891:src/display.c **** 	      }
2892:src/display.c **** 	      else
2893:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2894:src/display.c **** 	    } else {
2895:src/display.c **** 	      disp_x(p);
2896:src/display.c **** 	      x_disp = 1;
2897:src/display.c **** 	    }
2898:src/display.c **** 	    if (WasDataEntry) {
2899:src/display.c **** 	      goto finish;
2900:src/display.c **** 	    }
2901:src/display.c **** 	  } else {
2902:src/display.c **** 	    unsigned int pc = state_pc();
2903:src/display.c **** 	    unsigned int upc = user_pc(pc);
2904:src/display.c **** 	    const int n = nLIB(pc);
2905:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2906:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2907:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2908:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2909:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2910:src/display.c **** #if 0
2911:src/display.c **** #ifndef REALBUILD
2912:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2913:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2914:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2915:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2916:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2917:src/display.c **** 	      char *b=buf;
2918:src/display.c **** 	      char *l=LastDisplayedNumber;
2919:src/display.c **** 	      *l++=' ';
2920:src/display.c **** 	      while(*b) {
2921:src/display.c **** 		*l++=*b++;
2922:src/display.c **** 		*l++=' ';
2923:src/display.c **** 	      }
2924:src/display.c **** 	      *l=0;
2925:src/display.c **** 	    }
2926:src/display.c **** #endif
2927:src/display.c **** #endif
2928:src/display.c **** 	  }
2929:src/display.c **** 	}
2930:src/display.c **** 	set_annunciators();
2931:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2932:src/display.c **** 	  ShowRPN = 0;
2933:src/display.c **** 	  dot(RPN, 0);
2934:src/display.c **** 	}
2935:src/display.c **** 	// disp_temp disables the <- key
2936:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2937:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2938:src/display.c **** 
2939:src/display.c **** #if defined(INCLUDE_YREG_CODE)
ARM GAS  /tmp/ccDDbRKQ.s 			page 66


2940:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2941:src/display.c **** 	  annunciators();
2942:src/display.c ****  	State2.hms = 0;
2943:src/display.c **** #else
2944:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2945:src/display.c **** 	  annunciators();
2946:src/display.c **** #endif
2947:src/display.c **** 
2948:src/display.c ****       finish:
2949:src/display.c **** 	State2.version = 0;
2950:src/display.c **** 	State2.disp_as_alpha = 0;
2951:src/display.c **** 	State2.smode = SDISP_NORMAL;
2952:src/display.c **** 	State2.invalid_disp = 0;
2953:src/display.c **** 	ShowRegister = regX_idx;
2954:src/display.c **** 	DispMsg = CNULL;
2955:src/display.c **** 	DispPlot = 0;
2956:src/display.c **** 	State2.disp_small = 0;
2957:src/display.c **** 	finish_display();
2958:src/display.c **** 	no_status_top = 0;
2959:src/display.c **** #ifdef CONSOLE
2960:src/display.c **** 	JustDisplayed = 1;
2961:src/display.c **** #endif
2962:src/display.c ****       }
2963:src/display.c **** #else
2964:src/display.c ****       /*
2965:src/display.c ****        *  Update the display
2966:src/display.c ****        */
2967:src/display.c ****       void display(void) {
2968:src/display.c **** 	int i, j;
2969:src/display.c **** 	char buf[40], *bp = buf;
2970:src/display.c **** 	const char *p;
2971:src/display.c **** 	int annuc = 0;
2972:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2973:src/display.c **** 	int skip = 0;
2974:src/display.c **** 	int x_disp = 0;
2975:src/display.c **** 	const int shift = cur_shift();
2976:src/display.c **** 
2977:src/display.c **** 
2978:src/display.c **** 
2979:src/display.c **** 	if (State2.disp_freeze) {
2980:src/display.c **** 	  State2.disp_freeze = 0;
2981:src/display.c **** 	  State2.disp_temp = 1;
2982:src/display.c **** #ifdef CONSOLE
2983:src/display.c **** 	  JustDisplayed = 1;
2984:src/display.c **** #endif
2985:src/display.c **** 	  ShowRPN = 0;
2986:src/display.c **** 	  return;
2987:src/display.c **** 	}
2988:src/display.c **** 
2989:src/display.c **** 	if (WasDataEntry) {
2990:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2991:src/display.c **** 
2992:src/display.c **** 	  // Erase 7-segment display
2993:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2994:src/display.c **** 	    clr_dot(i);
2995:src/display.c **** 	  }
2996:src/display.c **** 	  goto only_update_x;
ARM GAS  /tmp/ccDDbRKQ.s 			page 67


2997:src/display.c **** 	}
2998:src/display.c **** 
2999:src/display.c **** 	// Clear display
3000:src/display.c **** 	reset_disp();
3001:src/display.c **** 
3002:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3003:src/display.c **** 	if (State2.cmplx  && !cata) {
3004:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3005:src/display.c **** 	  set_status(buf);
3006:src/display.c **** 	}
3007:src/display.c **** 	if (State2.version) {
3008:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3009:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3010:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3011:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3012:src/display.c **** 	  set_status(vers);
3013:src/display.c **** 	  skip = 1;
3014:src/display.c **** 	  goto nostk;
3015:src/display.c **** 	} else if (State2.confirm) {
3016:src/display.c **** 	  set_status(S_SURE);
3017:src/display.c **** 	} else if (State2.hyp) {
3018:src/display.c **** 	  bp = scopy(bp, "HYP");
3019:src/display.c **** 	  if (! State2.dot)
3020:src/display.c **** 	    *bp++ = '\235';
3021:src/display.c **** 	  set_status(buf);
3022:src/display.c **** 	} else if (State2.gtodot) {
3023:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3024:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3025:src/display.c **** 	  if (State2.numdigit > 0)
3026:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3027:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3028:src/display.c **** 	  *bp++ = '_';
3029:src/display.c **** 	  set_status(buf);
3030:src/display.c **** 	} else if (State2.rarg) {
3031:src/display.c **** 	  /* Commands with arguments */
3032:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3033:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3034:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3035:src/display.c **** #endif
3036:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3037:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3038:src/display.c **** 	  if (State2.dot) {
3039:src/display.c **** 	    *bp++ = 's';
3040:src/display.c **** 	    *bp++ = '_';
3041:src/display.c **** 	  } else if (shift == SHIFT_F) {
3042:src/display.c **** 	    *bp++ = '\021';
3043:src/display.c **** 	    *bp++ = '_';
3044:src/display.c **** 	  } else {
3045:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3046:src/display.c **** 	       : State2.ind ? 2 
3047:src/display.c **** 	       : num_arg_digits(CmdBase); */
3048:src/display.c **** 	    if (State2.local)
3049:src/display.c **** 	      *bp++ = '.';
3050:src/display.c **** 	    if (State2.numdigit > 0) {
3051:src/display.c **** 	      if (State2.shuffle)
3052:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3053:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
ARM GAS  /tmp/ccDDbRKQ.s 			page 68


3054:src/display.c **** 	      else
3055:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3056:src/display.c **** 	    }
3057:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3058:src/display.c **** 	    *bp++ = '_';
3059:src/display.c **** 	  }
3060:src/display.c **** 	  set_status(buf);
3061:src/display.c **** 	} else if (State2.test != TST_NONE) {
3062:src/display.c **** 	  *bp++ = 'x';
3063:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3064:src/display.c **** 	  *bp++ = '_';
3065:src/display.c **** 	  *bp++ = '?';
3066:src/display.c **** 	  set_status(buf);
3067:src/display.c **** 	} else if (cata) {
3068:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3069:src/display.c **** 	  char b2[16];
3070:src/display.c **** 	  const char *p;
3071:src/display.c **** 
3072:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3073:src/display.c **** 	  p = catcmd(op, b2);
3074:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3075:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3076:src/display.c **** 	  bp = scopy(bp, p);
3077:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3078:src/display.c **** 	    // State2.disp_small = 1;
3079:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3080:src/display.c **** 	      set_digits_string("0 to 255", 0);
3081:src/display.c **** 	    else
3082:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3083:src/display.c **** 	    skip = 1;
3084:src/display.c **** 	  } else if (State2.runmode) {
3085:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3086:src/display.c **** 	      decNumber x, r;
3087:src/display.c **** 	      decimal64 z;
3088:src/display.c **** 
3089:src/display.c **** 	      getX(&x);
3090:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3091:src/display.c **** 		const unsigned int f = argKIND(op);
3092:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3093:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3094:src/display.c **** 		  update_speed(0);
3095:src/display.c **** 		  fp(&r, &x);
3096:src/display.c **** 		}
3097:src/display.c **** 		else
3098:src/display.c **** 		  set_NaN(&r);
3099:src/display.c **** 	      } else
3100:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3101:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3102:src/display.c **** 	      packed_from_number(&z, &r);
3103:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3104:src/display.c **** 	      skip = 1;
3105:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3106:src/display.c **** 	      REGISTER z, *const x = StackBase;
3107:src/display.c **** 	      copyreg(&z, x);
3108:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3109:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3110:src/display.c **** 	      copyreg(x, &z);
ARM GAS  /tmp/ccDDbRKQ.s 			page 69


3111:src/display.c **** 	      skip = 1;
3112:src/display.c **** 	    }
3113:src/display.c **** 	  }
3114:src/display.c **** 	  set_status(buf);
3115:src/display.c **** 	} else if (State2.multi) {
3116:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3117:src/display.c **** 	  if (State2.numdigit > 0) {
3118:src/display.c **** 	    *bp++ = (char) State2.digval;
3119:src/display.c **** 	    if (State2.numdigit > 1)
3120:src/display.c **** 	      *bp++ = State2.digval2;
3121:src/display.c **** 	  }
3122:src/display.c **** 	  set_status(buf);
3123:src/display.c **** 	} else if (State2.status) {
3124:src/display.c **** 	  show_status();
3125:src/display.c **** 	  skip = 1;
3126:src/display.c **** 	} else if (State2.labellist) {
3127:src/display.c **** 	  show_label();
3128:src/display.c **** 	  skip = 1;
3129:src/display.c **** 	} else if (State2.registerlist) {
3130:src/display.c **** 	  show_registers();
3131:src/display.c **** 	  skip = 1;
3132:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3133:src/display.c **** 	    annunciators();
3134:src/display.c **** 	  }
3135:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3136:src/display.c **** 	} else if (State2.disp_as_alpha) {
3137:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3138:src/display.c **** #endif
3139:src/display.c **** 	} else if (State2.runmode) {
3140:src/display.c **** 	  if (DispMsg) { 
3141:src/display.c **** 	    set_status(DispMsg);
3142:src/display.c **** 	  } else if (DispPlot) {
3143:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3144:src/display.c **** 	  } else if (State2.alphas) {
3145:src/display.c **** #if 0
3146:src/display.c **** 	    set_digits_string("AlpHA", 0);
3147:src/display.c **** #endif
3148:src/display.c **** 	    bp = scopy(buf, Alpha);
3149:src/display.c **** 	    j = State2.alpha_pos;
3150:src/display.c **** 	    if (j != 0) {
3151:src/display.c **** 	      i = slen(buf);
3152:src/display.c **** 	      //				
3153:src/display.c **** 	      j *= 6;
3154:src/display.c **** #ifdef BIGGER_DISPLAY
3155:src/display.c **** 	      if ( i - j >= 20 )
3156:src/display.c **** #else
3157:src/display.c **** 	      if ( i - j >= 12 )
3158:src/display.c **** #endif
3159:src/display.c **** 		{
3160:src/display.c **** 		buf[ (i - j) ] = '\0';
3161:src/display.c **** 		set_status_right(buf);
3162:src/display.c **** 		}
3163:src/display.c **** 	      else {
3164:src/display.c **** 		set_status(buf);
3165:src/display.c **** 	      }
3166:src/display.c **** 	    } else {
3167:src/display.c **** 	      if (shift != SHIFT_N) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 70


3168:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3169:src/display.c **** 		*bp++ = '\0';
3170:src/display.c **** 	      }
3171:src/display.c **** 	      set_status_right(buf);
3172:src/display.c **** 	    }
3173:src/display.c **** 	  } else {
3174:src/display.c **** 	    annuc = 1;
3175:src/display.c **** 	  }
3176:src/display.c **** 	} else {
3177:src/display.c **** #ifndef DM42
3178:src/display.c **** 	  show_progtrace(buf);
3179:src/display.c **** #endif
3180:src/display.c **** 	  i = state_pc();
3181:src/display.c **** 	  if (i > 0)
3182:src/display.c **** 	    set_status(prt(getprog(i), buf));
3183:src/display.c **** 	  else
3184:src/display.c **** 	    set_status("");
3185:src/display.c **** 	  set_dot(STO_annun);
3186:src/display.c **** #if 0
3187:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3188:src/display.c **** 	    unsigned short int crc;
3189:src/display.c **** 	    crc = checksum_program();
3190:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3191:src/display.c **** 	    for (i=0; i<4; i++) {
3192:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3193:src/display.c **** 	      crc >>= 4;
3194:src/display.c **** 	      j += SEGS_PER_DIGIT;
3195:src/display.c **** 	    }
3196:src/display.c **** 	    skip = 1;
3197:src/display.c **** 	  }
3198:src/display.c **** 	  else
3199:src/display.c **** #endif
3200:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3201:src/display.c **** 	      annuc = 1;
3202:src/display.c **** 	  goto nostk;
3203:src/display.c **** 	}
3204:src/display.c **** 	show_stack();
3205:src/display.c ****       nostk:	show_flags();
3206:src/display.c **** 	if (!skip) {
3207:src/display.c **** 	  if (State2.runmode) {
3208:src/display.c **** 	  only_update_x:
3209:src/display.c **** 	    p = get_cmdline();
3210:src/display.c **** 	    if (p == NULL || cata) {
3211:src/display.c **** 	      if (ShowRegister != -1) {
3212:src/display.c **** #ifdef INCLUDE_C_LOCK
3213:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3214:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3215:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3216:src/display.c **** 		    SET_POLAR_READY;
3217:src/display.c **** 		  }
3218:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3219:src/display.c **** 		    State2.hms = 0;
3220:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3221:src/display.c **** 		    State2.hms = 1;
3222:src/display.c **** 		  }
3223:src/display.c **** 		  else {
3224:src/display.c **** 		    format_reg(regJ_idx, CNULL);
ARM GAS  /tmp/ccDDbRKQ.s 			page 71


3225:src/display.c **** 		  }
3226:src/display.c **** 		  x_disp = 1;
3227:src/display.c **** 		}
3228:src/display.c **** 		else {
3229:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3230:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3231:src/display.c **** 		}
3232:src/display.c **** #else
3233:src/display.c **** 
3234:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3235:src/display.c **** 		format_reg(ShowRegister, CNULL);
3236:src/display.c **** #endif
3237:src/display.c **** 	      }
3238:src/display.c **** 	      else
3239:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3240:src/display.c **** 	    } else {
3241:src/display.c **** 	      disp_x(p);
3242:src/display.c **** 	      x_disp = 1;
3243:src/display.c **** 	    }
3244:src/display.c **** 	    if (WasDataEntry) {
3245:src/display.c **** 	      goto finish;
3246:src/display.c **** 	    }
3247:src/display.c **** 	  } else {
3248:src/display.c **** 	    unsigned int pc = state_pc();
3249:src/display.c **** 	    unsigned int upc = user_pc(pc);
3250:src/display.c **** 	    const int n = nLIB(pc);
3251:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3252:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3253:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3254:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3255:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3256:src/display.c **** #if 0
3257:src/display.c **** #ifndef REALBUILD
3258:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3259:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3260:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3261:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3262:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3263:src/display.c **** 	      char *b=buf;
3264:src/display.c **** 	      char *l=LastDisplayedNumber;
3265:src/display.c **** 	      *l++=' ';
3266:src/display.c **** 	      while(*b) {
3267:src/display.c **** 		*l++=*b++;
3268:src/display.c **** 		*l++=' ';
3269:src/display.c **** 	      }
3270:src/display.c **** 	      *l=0;
3271:src/display.c **** 	    }
3272:src/display.c **** #endif
3273:src/display.c **** #endif
3274:src/display.c **** 	  }
3275:src/display.c **** 	}
3276:src/display.c **** 	set_annunciators();
3277:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3278:src/display.c **** 	  ShowRPN = 0;
3279:src/display.c **** 	  dot(RPN, 0);
3280:src/display.c **** 	}
3281:src/display.c **** 	// disp_temp disables the <- key
ARM GAS  /tmp/ccDDbRKQ.s 			page 72


3282:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3283:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3284:src/display.c **** 
3285:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3286:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3287:src/display.c **** 	  annunciators();
3288:src/display.c ****  	State2.hms = 0;
3289:src/display.c **** #else
3290:src/display.c **** 
3291:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3292:src/display.c **** 	  annunciators();
3293:src/display.c **** 	
3294:src/display.c **** 
3295:src/display.c **** 
3296:src/display.c **** #endif
3297:src/display.c **** 
3298:src/display.c ****       finish:
3299:src/display.c **** 	State2.version = 0;
3300:src/display.c **** 	State2.disp_as_alpha = 0;
3301:src/display.c **** 	State2.smode = SDISP_NORMAL;
3302:src/display.c **** 	State2.invalid_disp = 0;
3303:src/display.c **** 	ShowRegister = regX_idx;
3304:src/display.c **** 	DispMsg = CNULL;
3305:src/display.c **** 	DispPlot = 0;
3306:src/display.c **** 	State2.disp_small = 0;
3307:src/display.c **** 	finish_display();
3308:src/display.c **** #ifdef CONSOLE
3309:src/display.c **** 	JustDisplayed = 1;
3310:src/display.c **** #endif
3311:src/display.c ****       }
3312:src/display.c **** #endif
3313:src/display.c ****       /*
3314:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3315:src/display.c ****        */
3316:src/display.c ****       void frozen_display()
3317:src/display.c ****       {
3318:src/display.c **** 	State2.disp_freeze = 0;
3319:src/display.c **** 	display();
3320:src/display.c **** 	State2.disp_freeze = 1;
3321:src/display.c ****       }
3322:src/display.c **** 
3323:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3324:src/display.c **** 	int glen = *graphic++;
3325:src/display.c **** 	int i, j;
3326:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3327:src/display.c **** 	unsigned long long int mat[6];
3328:src/display.c **** 
3329:src/display.c **** 	xset(mat, 0, sizeof(mat));
3330:src/display.c **** #endif
3331:src/display.c **** 	if (glen <= 0)			return;
3332:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3333:src/display.c **** 
3334:src/display.c **** 	for (i=0; i<6; i++)
3335:src/display.c **** 	  for (j=1; j<=glen; j++) {
3336:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3337:src/display.c **** 	    if (graphic[j] & (1 << i))
3338:src/display.c **** 	      mat[i] |= 1LL << j;
ARM GAS  /tmp/ccDDbRKQ.s 			page 73


3339:src/display.c **** #else
3340:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3341:src/display.c **** #endif
3342:src/display.c **** 	  }
3343:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3344:src/display.c **** 	set_status_grob(mat);
3345:src/display.c **** #endif
3346:src/display.c ****       }
3347:src/display.c **** 
3348:src/display.c **** 
3349:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3350:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3351:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3352:src/display.c ****        * column is almost always blank.
3353:src/display.c ****        */
3354:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3355:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3356:src/display.c ****       }
3357:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3358:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3359:src/display.c ****       }
3360:src/display.c **** 
3361:src/display.c ****       
3362:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 642              		.loc 1 3362 85 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 4, pretend = 0, frame = 560
 645              		@ frame_needed = 0, uses_anonymous_args = 0
3363:src/display.c **** 	unsigned short int posns[257];
 646              		.loc 1 3363 2 view .LVU191
3364:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3365:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3366:src/display.c **** 	int posns_state = 255;
 647              		.loc 1 3366 2 view .LVU192
3367:src/display.c **** #endif
3368:src/display.c **** 	unsigned int x = 0;
 648              		.loc 1 3368 2 view .LVU193
3369:src/display.c **** 	int i, j;
 649              		.loc 1 3369 2 view .LVU194
3370:src/display.c **** 	const int offset = smallp ? 256 : 0;
 650              		.loc 1 3370 2 view .LVU195
3362:src/display.c **** 	unsigned short int posns[257];
 651              		.loc 1 3362 85 is_stmt 0 view .LVU196
 652 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 653              		.cfi_def_cfa_offset 36
 654              		.cfi_offset 4, -36
 655              		.cfi_offset 5, -32
 656              		.cfi_offset 6, -28
 657              		.cfi_offset 7, -24
 658              		.cfi_offset 8, -20
 659              		.cfi_offset 9, -16
 660              		.cfi_offset 10, -12
 661              		.cfi_offset 11, -8
 662              		.cfi_offset 14, -4
 663 0004 ADF50D7D 		sub	sp, sp, #564
 664              		.cfi_def_cfa_offset 600
3371:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccDDbRKQ.s 			page 74


3372:src/display.c **** 	unsigned long long int mat[6];
3373:src/display.c **** 
3374:src/display.c **** 	xset(mat, 0, sizeof(mat));
3375:src/display.c **** #endif
3376:src/display.c **** #ifdef RP_PREFIX
3377:src/display.c **** 	RectPolConv = 0;
 665              		.loc 1 3377 14 view .LVU197
 666 0008 5B4C     		ldr	r4, .L99
3362:src/display.c **** 	unsigned short int posns[257];
 667              		.loc 1 3362 85 view .LVU198
 668 000a 0390     		str	r0, [sp, #12]
 669 000c 0546     		mov	r5, r0
 670              		.loc 1 3377 14 view .LVU199
 671 000e 0020     		movs	r0, #0
 672              	.LVL57:
 673              		.loc 1 3377 14 view .LVU200
 674 0010 2060     		str	r0, [r4]
3370:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 675              		.loc 1 3370 34 view .LVU201
 676 0012 0029     		cmp	r1, #0
3378:src/display.c **** #endif
3379:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3380:src/display.c **** 	findlengths(posns, smallp);
3381:src/display.c **** #endif
3382:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 677              		.loc 1 3382 9 view .LVU202
 678 0014 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
3362:src/display.c **** 	unsigned short int posns[257];
 679              		.loc 1 3362 85 view .LVU203
 680 0016 CDE90531 		strd	r3, r1, [sp, #20]
3370:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 681              		.loc 1 3370 34 view .LVU204
 682 001a 14BF     		ite	ne
 683 001c 4FF48073 		movne	r3, #256
 684              	.LVL58:
3370:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 685              		.loc 1 3370 34 view .LVU205
 686 0020 0346     		moveq	r3, r0
 687 0022 0793     		str	r3, [sp, #28]
 688              	.LVL59:
3377:src/display.c **** #endif
 689              		.loc 1 3377 2 is_stmt 1 view .LVU206
 690              		.loc 1 3382 2 view .LVU207
 691              		.loc 1 3382 8 view .LVU208
 692 0024 002E     		cmp	r6, #0
 693 0026 00F0A480 		beq	.L95
 694              		.loc 1 3382 33 is_stmt 0 view .LVU209
 695 002a 531C     		adds	r3, r2, #1
 696              	.LVL60:
 697              	.LBB209:
3383:src/display.c **** 	  int c;
3384:src/display.c **** 	  int width;
3385:src/display.c **** 	  unsigned char cmap[6];
3386:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3387:src/display.c **** 	  int real_width;
3388:src/display.c **** 	  int current_smallp;
3389:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 75


3390:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3391:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3392:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3393:src/display.c **** 	  //           01 -> (not used)
3394:src/display.c **** 	  //           10 -> use big font
3395:src/display.c **** 	  //           11 -> use small font
3396:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3397:src/display.c **** 	  if (str[0] == '\007') {
 698              		.loc 1 3397 7 view .LVU210
 699 002c 072E     		cmp	r6, #7
 700 002e 9246     		mov	r10, r2
 701              	.LBE209:
3368:src/display.c **** 	int i, j;
 702              		.loc 1 3368 15 view .LVU211
 703 0030 8046     		mov	r8, r0
3382:src/display.c **** 	  int c;
 704              		.loc 1 3382 33 view .LVU212
 705 0032 0493     		str	r3, [sp, #16]
3366:src/display.c **** #endif
 706              		.loc 1 3366 6 view .LVU213
 707 0034 4FF0FF04 		mov	r4, #255
 708              	.LVL61:
 709              	.LBB218:
3383:src/display.c **** 	  int width;
 710              		.loc 1 3383 4 is_stmt 1 view .LVU214
3384:src/display.c **** 	  unsigned char cmap[6];
 711              		.loc 1 3384 4 view .LVU215
3385:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 712              		.loc 1 3385 4 view .LVU216
3387:src/display.c **** 	  int current_smallp;
 713              		.loc 1 3387 4 view .LVU217
3388:src/display.c **** 
 714              		.loc 1 3388 4 view .LVU218
 715              		.loc 1 3397 4 view .LVU219
 716              		.loc 1 3397 7 is_stmt 0 view .LVU220
 717 0038 69D1     		bne	.L63
 718              	.LVL62:
 719              	.L97:
3398:src/display.c **** 	    width = str[1] & 0x1F;
 720              		.loc 1 3398 6 is_stmt 1 view .LVU221
 721              		.loc 1 3398 17 is_stmt 0 view .LVU222
 722 003a 039B     		ldr	r3, [sp, #12]
 723 003c 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 724 003e 05F06003 		and	r3, r5, #96
3399:src/display.c **** 	    switch (str[1] & 0x60) {
 725              		.loc 1 3399 6 view .LVU223
 726 0042 402B     		cmp	r3, #64
3398:src/display.c **** 	    width = str[1] & 0x1F;
 727              		.loc 1 3398 12 view .LVU224
 728 0044 05F01F05 		and	r5, r5, #31
 729              	.LVL63:
 730              		.loc 1 3399 6 is_stmt 1 view .LVU225
 731 0048 00F08480 		beq	.L64
 732 004c 602B     		cmp	r3, #96
 733 004e 00F08680 		beq	.L65
 734              	.LVL64:
3400:src/display.c **** 	    default:
ARM GAS  /tmp/ccDDbRKQ.s 			page 76


3401:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3402:src/display.c **** 	      break;
3403:src/display.c **** 	    case 0x40:	current_smallp = 0;
3404:src/display.c **** 	      break;
3405:src/display.c **** 	    case 0x60:	current_smallp = 1;
3406:src/display.c **** 	      break;
3407:src/display.c **** 	    }
3408:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 735              		.loc 1 3408 6 view .LVU226
 736              		.loc 1 3408 10 is_stmt 0 view .LVU227
 737 0052 039B     		ldr	r3, [sp, #12]
 738 0054 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 739              		.loc 1 3408 57 view .LVU228
 740 0056 069B     		ldr	r3, [sp, #24]
 741 0058 002B     		cmp	r3, #0
 742 005a 00F08780 		beq	.L83
 743 005e 06F58076 		add	r6, r6, #256
 744 0062 0293     		str	r3, [sp, #8]
 745              	.LVL65:
 746              	.L67:
3409:src/display.c **** 	    str += 3;
 747              		.loc 1 3409 6 is_stmt 1 discriminator 4 view .LVU229
3410:src/display.c **** 
3411:src/display.c **** 	    real_width = charlengths(c);
 748              		.loc 1 3411 19 is_stmt 0 discriminator 4 view .LVU230
 749 0064 3046     		mov	r0, r6
 750 0066 FFF7FEFF 		bl	charlengths
 751              	.LVL66:
3409:src/display.c **** 	    str += 3;
 752              		.loc 1 3409 10 discriminator 4 view .LVU231
 753 006a 039B     		ldr	r3, [sp, #12]
 754 006c 0333     		adds	r3, r3, #3
 755 006e 0393     		str	r3, [sp, #12]
 756              	.LVL67:
 757              		.loc 1 3411 6 is_stmt 1 discriminator 4 view .LVU232
3412:src/display.c **** 	  } else {
3413:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3414:src/display.c **** 	    real_width = width = charlengths(c);
3415:src/display.c **** 	    current_smallp = smallp;
3416:src/display.c **** 	  }
3417:src/display.c **** 
3418:src/display.c **** 	  if (x + real_width > b_w + 1)
 758              		.loc 1 3418 4 discriminator 4 view .LVU233
 759              		.loc 1 3418 7 is_stmt 0 discriminator 4 view .LVU234
 760 0070 049B     		ldr	r3, [sp, #16]
 761              	.LVL68:
 762              		.loc 1 3418 10 discriminator 4 view .LVU235
 763 0072 4044     		add	r0, r0, r8
 764              		.loc 1 3418 7 discriminator 4 view .LVU236
 765 0074 9842     		cmp	r0, r3
 766 0076 59D8     		bhi	.L94
 767              	.L98:
3419:src/display.c **** 	    break;
3420:src/display.c **** 
3421:src/display.c **** 	  if (posns_state != current_smallp) {
 768              		.loc 1 3421 4 is_stmt 1 view .LVU237
 769              		.loc 1 3421 7 is_stmt 0 view .LVU238
ARM GAS  /tmp/ccDDbRKQ.s 			page 77


 770 0078 029B     		ldr	r3, [sp, #8]
 771 007a A342     		cmp	r3, r4
3422:src/display.c **** 	    findlengths(posns, current_smallp);
 772              		.loc 1 3422 6 view .LVU239
 773 007c 0BAB     		add	r3, sp, #44
3421:src/display.c **** 	    findlengths(posns, current_smallp);
 774              		.loc 1 3421 7 view .LVU240
 775 007e 05D0     		beq	.L70
 776              		.loc 1 3422 6 is_stmt 1 view .LVU241
 777 0080 1846     		mov	r0, r3
 778 0082 0299     		ldr	r1, [sp, #8]
 779 0084 0193     		str	r3, [sp, #4]
 780 0086 FFF7FEFF 		bl	findlengths
 781              	.LVL69:
 782 008a 019B     		ldr	r3, [sp, #4]
3423:src/display.c **** 	    posns_state = current_smallp;
 783              		.loc 1 3423 6 view .LVU242
 784              	.LVL70:
 785              	.L70:
3424:src/display.c **** 	  }
3425:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 786              		.loc 1 3425 4 view .LVU243
 787 008c 029A     		ldr	r2, [sp, #8]
 788 008e 3046     		mov	r0, r6
 789 0090 09A9     		add	r1, sp, #36
 790 0092 FFF7FEFF 		bl	unpackchar
 791              	.LVL71:
3426:src/display.c **** #else
3427:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3428:src/display.c **** 
3429:src/display.c **** 	  //cmap = &charset[c][0];
3430:src/display.c **** 	  width = charlengths(c);
3431:src/display.c **** 
3432:src/display.c **** 	  if (x + width > b_w+1)
3433:src/display.c **** 	    break;
3434:src/display.c **** 
3435:src/display.c **** 	  /* Decode the packed character bytes */
3436:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3437:src/display.c **** #endif
3438:src/display.c **** 
3439:src/display.c **** 	  for (i=0; i<6; i++)
 792              		.loc 1 3439 4 view .LVU244
 793              		.loc 1 3439 14 view .LVU245
 794 0096 059B     		ldr	r3, [sp, #20]
 795 0098 08EB4809 		add	r9, r8, r8, lsl #1
 796 009c 03EB4903 		add	r3, r3, r9, lsl #1
 797 00a0 09AC     		add	r4, sp, #36
 798 00a2 0193     		str	r3, [sp, #4]
 799              		.loc 1 3439 10 is_stmt 0 view .LVU246
 800 00a4 0027     		movs	r7, #0
 801 00a6 AAEB0806 		sub	r6, r10, r8
 802              	.LVL72:
 803              	.L71:
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 804              		.loc 1 3440 16 is_stmt 1 view .LVU247
 805              		.loc 1 3440 6 is_stmt 0 view .LVU248
 806 00aa 002D     		cmp	r5, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 78


 807 00ac 20DD     		ble	.L77
3441:src/display.c **** 	      if (x+j >= b_w)
 808              		.loc 1 3441 8 is_stmt 1 view .LVU249
 809              		.loc 1 3441 11 is_stmt 0 view .LVU250
 810 00ae C245     		cmp	r10, r8
 811 00b0 1ED9     		bls	.L77
 812 00b2 019B     		ldr	r3, [sp, #4]
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 813              		.loc 1 3440 12 view .LVU251
 814 00b4 4FF00009 		mov	r9, #0
 815 00b8 07EB030B 		add	fp, r7, r3
 816 00bc 09E0     		b	.L72
 817              	.LVL73:
 818              	.L96:
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 819              		.loc 1 3440 26 view .LVU252
 820 00be 09F10109 		add	r9, r9, #1
 821              	.LVL74:
 822              	.LBB210:
 823              	.LBB211:
 274:src/display.c ****   else	clr_dot(n);
 824              		.loc 1 274 11 view .LVU253
 825 00c2 FFF7FEFF 		bl	set_dot
 826              	.LVL75:
 274:src/display.c ****   else	clr_dot(n);
 827              		.loc 1 274 11 view .LVU254
 828              	.LBE211:
 829              	.LBE210:
 830              		.loc 1 3441 8 is_stmt 1 view .LVU255
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 831              		.loc 1 3440 25 view .LVU256
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 832              		.loc 1 3440 16 view .LVU257
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 833              		.loc 1 3440 6 is_stmt 0 view .LVU258
 834 00c6 4D45     		cmp	r5, r9
 835 00c8 0BF1060B 		add	fp, fp, #6
 836 00cc 10D0     		beq	.L77
 837              	.L76:
 838              		.loc 1 3441 11 view .LVU259
 839 00ce 4E45     		cmp	r6, r9
 840 00d0 0ED0     		beq	.L77
 841              	.LVL76:
 842              	.L72:
3442:src/display.c **** 		break;
3443:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3444:src/display.c **** 	      if (cmap[i] & (1 << j))
3445:src/display.c **** 		mat[i] |= 1LL << (x+j);
3446:src/display.c **** #else
3447:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 843              		.loc 1 3447 8 is_stmt 1 discriminator 2 view .LVU260
 844              	.LBB215:
 845              	.LBI210:
 273:src/display.c ****   if (on)	set_dot(n);
 846              		.loc 1 273 6 discriminator 2 view .LVU261
 847              	.LBB212:
 274:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccDDbRKQ.s 			page 79


 848              		.loc 1 274 3 discriminator 2 view .LVU262
 274:src/display.c ****   else	clr_dot(n);
 849              		.loc 1 274 11 discriminator 2 view .LVU263
 275:src/display.c **** }
 850              		.loc 1 275 8 discriminator 2 view .LVU264
 851              	.LBE212:
 852              	.LBE215:
 853              		.loc 1 3447 32 is_stmt 0 discriminator 2 view .LVU265
 854 00d2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 855              		.loc 1 3447 47 discriminator 2 view .LVU266
 856 00d4 43FA09F3 		asr	r3, r3, r9
 857              	.LBB216:
 858              	.LBB213:
 274:src/display.c ****   else	clr_dot(n);
 859              		.loc 1 274 6 discriminator 2 view .LVU267
 860 00d8 13F0010F 		tst	r3, #1
 274:src/display.c ****   else	clr_dot(n);
 861              		.loc 1 274 11 discriminator 2 view .LVU268
 862 00dc 5846     		mov	r0, fp
 274:src/display.c ****   else	clr_dot(n);
 863              		.loc 1 274 6 discriminator 2 view .LVU269
 864 00de EED1     		bne	.L96
 865              	.LBE213:
 866              	.LBE216:
3440:src/display.c **** 	      if (x+j >= b_w)
 867              		.loc 1 3440 26 view .LVU270
 868 00e0 09F10109 		add	r9, r9, #1
 869              	.LVL77:
 870              	.LBB217:
 871              	.LBB214:
 275:src/display.c **** }
 872              		.loc 1 275 8 view .LVU271
 873 00e4 FFF7FEFF 		bl	clr_dot
 874              	.LVL78:
 275:src/display.c **** }
 875              		.loc 1 275 8 view .LVU272
 876              	.LBE214:
 877              	.LBE217:
3441:src/display.c **** 		break;
 878              		.loc 1 3441 8 is_stmt 1 view .LVU273
3440:src/display.c **** 	      if (x+j >= b_w)
 879              		.loc 1 3440 25 view .LVU274
3440:src/display.c **** 	      if (x+j >= b_w)
 880              		.loc 1 3440 16 view .LVU275
3440:src/display.c **** 	      if (x+j >= b_w)
 881              		.loc 1 3440 6 is_stmt 0 view .LVU276
 882 00e8 4D45     		cmp	r5, r9
 883 00ea 0BF1060B 		add	fp, fp, #6
 884 00ee EED1     		bne	.L76
 885              	.LVL79:
 886              	.L77:
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 887              		.loc 1 3439 19 is_stmt 1 view .LVU277
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3439 20 is_stmt 0 view .LVU278
 889 00f0 0137     		adds	r7, r7, #1
 890              	.LVL80:
ARM GAS  /tmp/ccDDbRKQ.s 			page 80


3439:src/display.c **** 	    for (j=0; j<width; j++) {
 891              		.loc 1 3439 14 is_stmt 1 view .LVU279
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 892              		.loc 1 3439 4 is_stmt 0 view .LVU280
 893 00f2 062F     		cmp	r7, #6
 894 00f4 04F10104 		add	r4, r4, #1
 895 00f8 D7D1     		bne	.L71
3448:src/display.c **** #endif
3449:src/display.c **** 	    }
3450:src/display.c **** 	  x += width;
 896              		.loc 1 3450 4 is_stmt 1 view .LVU281
 897              	.LBE218:
3382:src/display.c **** 	  int c;
 898              		.loc 1 3382 9 is_stmt 0 view .LVU282
 899 00fa 039B     		ldr	r3, [sp, #12]
 900 00fc 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 901              	.LBB219:
 902              		.loc 1 3450 6 view .LVU283
 903 00fe A844     		add	r8, r8, r5
 904              	.LVL81:
 905              		.loc 1 3450 6 view .LVU284
 906              	.LBE219:
3382:src/display.c **** 	  int c;
 907              		.loc 1 3382 8 is_stmt 1 view .LVU285
 908 0100 A6B1     		cbz	r6, .L94
3382:src/display.c **** 	  int c;
 909              		.loc 1 3382 22 is_stmt 0 discriminator 1 view .LVU286
 910 0102 049B     		ldr	r3, [sp, #16]
 911              	.LVL82:
3382:src/display.c **** 	  int c;
 912              		.loc 1 3382 22 discriminator 1 view .LVU287
 913 0104 9845     		cmp	r8, r3
 914 0106 11D8     		bhi	.L94
 915              	.LBB220:
3397:src/display.c **** 	    width = str[1] & 0x1F;
 916              		.loc 1 3397 7 view .LVU288
 917 0108 072E     		cmp	r6, #7
 918              	.LBE220:
 919 010a 029C     		ldr	r4, [sp, #8]
 920              	.LBB221:
3383:src/display.c **** 	  int width;
 921              		.loc 1 3383 4 is_stmt 1 view .LVU289
3384:src/display.c **** 	  unsigned char cmap[6];
 922              		.loc 1 3384 4 view .LVU290
3385:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 923              		.loc 1 3385 4 view .LVU291
3387:src/display.c **** 	  int current_smallp;
 924              		.loc 1 3387 4 view .LVU292
3388:src/display.c **** 
 925              		.loc 1 3388 4 view .LVU293
3397:src/display.c **** 	    width = str[1] & 0x1F;
 926              		.loc 1 3397 4 view .LVU294
3397:src/display.c **** 	    width = str[1] & 0x1F;
 927              		.loc 1 3397 7 is_stmt 0 view .LVU295
 928 010c 95D0     		beq	.L97
 929              	.LVL83:
 930              	.L63:
ARM GAS  /tmp/ccDDbRKQ.s 			page 81


3413:src/display.c **** 	    real_width = width = charlengths(c);
 931              		.loc 1 3413 6 is_stmt 1 view .LVU296
3413:src/display.c **** 	    real_width = width = charlengths(c);
 932              		.loc 1 3413 8 is_stmt 0 view .LVU297
 933 010e 079B     		ldr	r3, [sp, #28]
 934 0110 1E44     		add	r6, r6, r3
3414:src/display.c **** 	    current_smallp = smallp;
 935              		.loc 1 3414 27 view .LVU298
 936 0112 3046     		mov	r0, r6
 937 0114 FFF7FEFF 		bl	charlengths
 938              	.LVL84:
3413:src/display.c **** 	    real_width = width = charlengths(c);
 939              		.loc 1 3413 30 view .LVU299
 940 0118 039B     		ldr	r3, [sp, #12]
 941 011a 0133     		adds	r3, r3, #1
 942 011c 0393     		str	r3, [sp, #12]
 943              	.LVL85:
3414:src/display.c **** 	    current_smallp = smallp;
 944              		.loc 1 3414 6 is_stmt 1 view .LVU300
3414:src/display.c **** 	    current_smallp = smallp;
 945              		.loc 1 3414 25 is_stmt 0 view .LVU301
 946 011e 069B     		ldr	r3, [sp, #24]
 947              	.LVL86:
3414:src/display.c **** 	    current_smallp = smallp;
 948              		.loc 1 3414 25 view .LVU302
 949 0120 0293     		str	r3, [sp, #8]
3418:src/display.c **** 	    break;
 950              		.loc 1 3418 7 view .LVU303
 951 0122 049B     		ldr	r3, [sp, #16]
3414:src/display.c **** 	    current_smallp = smallp;
 952              		.loc 1 3414 25 view .LVU304
 953 0124 0546     		mov	r5, r0
 954              	.LVL87:
3415:src/display.c **** 	  }
 955              		.loc 1 3415 6 is_stmt 1 view .LVU305
3418:src/display.c **** 	    break;
 956              		.loc 1 3418 4 view .LVU306
3418:src/display.c **** 	    break;
 957              		.loc 1 3418 10 is_stmt 0 view .LVU307
 958 0126 4044     		add	r0, r0, r8
 959              	.LVL88:
3418:src/display.c **** 	    break;
 960              		.loc 1 3418 7 view .LVU308
 961 0128 9842     		cmp	r0, r3
 962 012a A5D9     		bls	.L98
 963              	.LVL89:
 964              	.L94:
3418:src/display.c **** 	    break;
 965              		.loc 1 3418 7 view .LVU309
 966 012c 059B     		ldr	r3, [sp, #20]
 967 012e 08EB4808 		add	r8, r8, r8, lsl #1
 968              	.LVL90:
3418:src/display.c **** 	    break;
 969              		.loc 1 3418 7 view .LVU310
 970 0132 03EB4808 		add	r8, r3, r8, lsl #1
 971              	.LVL91:
 972              	.L62:
ARM GAS  /tmp/ccDDbRKQ.s 			page 82


3418:src/display.c **** 	    break;
 973              		.loc 1 3418 7 view .LVU311
 974              	.LBE221:
3451:src/display.c **** 	}
3452:src/display.c **** 
3453:src/display.c **** 
3454:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3455:src/display.c **** 	set_status_grob(mat);
3456:src/display.c **** #else
3457:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 975              		.loc 1 3457 2 is_stmt 1 view .LVU312
 976              		.loc 1 3457 20 view .LVU313
 977              		.loc 1 3457 2 is_stmt 0 view .LVU314
 978 0136 969B     		ldr	r3, [sp, #600]
 979 0138 9845     		cmp	r8, r3
 980 013a 07DA     		bge	.L59
 981 013c 1C46     		mov	r4, r3
 982              	.L80:
3458:src/display.c **** 	  clr_dot(i);
 983              		.loc 1 3458 4 is_stmt 1 discriminator 3 view .LVU315
 984 013e 4046     		mov	r0, r8
3457:src/display.c **** 	  clr_dot(i);
 985              		.loc 1 3457 28 is_stmt 0 discriminator 3 view .LVU316
 986 0140 08F10108 		add	r8, r8, #1
 987              	.LVL92:
 988              		.loc 1 3458 4 discriminator 3 view .LVU317
 989 0144 FFF7FEFF 		bl	clr_dot
 990              	.LVL93:
3457:src/display.c **** 	  clr_dot(i);
 991              		.loc 1 3457 27 is_stmt 1 discriminator 3 view .LVU318
3457:src/display.c **** 	  clr_dot(i);
 992              		.loc 1 3457 20 discriminator 3 view .LVU319
3457:src/display.c **** 	  clr_dot(i);
 993              		.loc 1 3457 2 is_stmt 0 discriminator 3 view .LVU320
 994 0148 4445     		cmp	r4, r8
 995 014a F8D1     		bne	.L80
 996              	.L59:
3459:src/display.c **** #endif
3460:src/display.c ****       }
 997              		.loc 1 3460 7 view .LVU321
 998 014c 0DF50D7D 		add	sp, sp, #564
 999              		.cfi_remember_state
 1000              		.cfi_def_cfa_offset 36
 1001              		@ sp needed
 1002 0150 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1003              	.LVL94:
 1004              	.L64:
 1005              		.cfi_restore_state
 1006              	.LBB222:
3403:src/display.c **** 	      break;
 1007              		.loc 1 3403 17 is_stmt 1 view .LVU322
3404:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1008              		.loc 1 3404 8 view .LVU323
3408:src/display.c **** 	    str += 3;
 1009              		.loc 1 3408 6 view .LVU324
3408:src/display.c **** 	    str += 3;
 1010              		.loc 1 3408 10 is_stmt 0 view .LVU325
ARM GAS  /tmp/ccDDbRKQ.s 			page 83


 1011 0154 039B     		ldr	r3, [sp, #12]
 1012 0156 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3403:src/display.c **** 	      break;
 1013              		.loc 1 3403 32 view .LVU326
 1014 0158 0023     		movs	r3, #0
 1015 015a 0293     		str	r3, [sp, #8]
 1016 015c 82E7     		b	.L67
 1017              	.LVL95:
 1018              	.L65:
3405:src/display.c **** 	      break;
 1019              		.loc 1 3405 17 is_stmt 1 view .LVU327
3406:src/display.c **** 	    }
 1020              		.loc 1 3406 8 view .LVU328
3408:src/display.c **** 	    str += 3;
 1021              		.loc 1 3408 6 view .LVU329
3408:src/display.c **** 	    str += 3;
 1022              		.loc 1 3408 10 is_stmt 0 view .LVU330
 1023 015e 039B     		ldr	r3, [sp, #12]
 1024 0160 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3405:src/display.c **** 	      break;
 1025              		.loc 1 3405 32 view .LVU331
 1026 0162 0123     		movs	r3, #1
 1027 0164 0293     		str	r3, [sp, #8]
 1028 0166 06F58076 		add	r6, r6, #256
 1029 016a 7BE7     		b	.L67
 1030              	.LVL96:
 1031              	.L83:
3405:src/display.c **** 	      break;
 1032              		.loc 1 3405 32 view .LVU332
 1033 016c 069B     		ldr	r3, [sp, #24]
 1034              	.LVL97:
3405:src/display.c **** 	      break;
 1035              		.loc 1 3405 32 view .LVU333
 1036 016e 0293     		str	r3, [sp, #8]
 1037 0170 78E7     		b	.L67
 1038              	.LVL98:
 1039              	.L95:
3405:src/display.c **** 	      break;
 1040              		.loc 1 3405 32 view .LVU334
 1041 0172 DDF81480 		ldr	r8, [sp, #20]
 1042 0176 DEE7     		b	.L62
 1043              	.L100:
 1044              		.align	2
 1045              	.L99:
 1046 0178 00000000 		.word	RectPolConv
 1047              	.LBE222:
 1048              		.cfi_endproc
 1049              	.LFE39:
 1051              		.section	.text.set_exp,"ax",%progbits
 1052              		.align	1
 1053              		.p2align 2,,3
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	set_exp:
 1060              	.LVL99:
ARM GAS  /tmp/ccDDbRKQ.s 			page 84


 1061              	.LFB14:
 364:src/display.c ****   union {
 1062              		.loc 1 364 52 is_stmt 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 8
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 365:src/display.c ****     char buf[4];
 1066              		.loc 1 365 3 view .LVU336
 369:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1067              		.loc 1 369 3 view .LVU337
 371:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1068              		.loc 1 371 3 view .LVU338
 377:src/display.c **** #  endif
 1069              		.loc 1 377 3 view .LVU339
 386:src/display.c ****   if (exp < 0) {
 1070              		.loc 1 386 3 view .LVU340
 364:src/display.c ****   union {
 1071              		.loc 1 364 52 is_stmt 0 view .LVU341
 1072 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1073              		.cfi_def_cfa_offset 20
 1074              		.cfi_offset 4, -20
 1075              		.cfi_offset 5, -16
 1076              		.cfi_offset 6, -12
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 387:src/display.c ****     negative = 1;
 1079              		.loc 1 387 6 view .LVU342
 1080 0002 051E     		subs	r5, r0, #0
 364:src/display.c ****   union {
 1081              		.loc 1 364 52 view .LVU343
 1082 0004 83B0     		sub	sp, sp, #12
 1083              		.cfi_def_cfa_offset 32
 364:src/display.c ****   union {
 1084              		.loc 1 364 52 view .LVU344
 1085 0006 0E46     		mov	r6, r1
 1086              	.LVL100:
 387:src/display.c ****     negative = 1;
 1087              		.loc 1 387 3 is_stmt 1 view .LVU345
 387:src/display.c ****     negative = 1;
 1088              		.loc 1 387 6 is_stmt 0 view .LVU346
 1089 0008 5BDB     		blt	.L133
 392:src/display.c **** #endif
 1090              		.loc 1 392 13 view .LVU347
 1091 000a 3B4B     		ldr	r3, .L135
 1092 000c EC17     		asrs	r4, r5, #31
 1093 000e 83FB0513 		smull	r1, r3, r3, r5
 1094              	.LVL101:
 392:src/display.c **** #endif
 1095              		.loc 1 392 13 view .LVU348
 1096 0012 C4EBA314 		rsb	r4, r4, r3, asr #6
 386:src/display.c ****   if (exp < 0) {
 1097              		.loc 1 386 12 view .LVU349
 1098 0016 06F00207 		and	r7, r6, #2
 1099              	.LVL102:
 392:src/display.c **** #endif
 1100              		.loc 1 392 3 is_stmt 1 view .LVU350
 394:src/display.c **** #ifdef INCLUDE_YREG_CODE
ARM GAS  /tmp/ccDDbRKQ.s 			page 85


 1101              		.loc 1 394 3 view .LVU351
 394:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1102              		.loc 1 394 6 is_stmt 0 view .LVU352
 1103 001a 002A     		cmp	r2, #0
 1104 001c 60D0     		beq	.L106
 397:src/display.c **** #else
 1105              		.loc 1 397 5 is_stmt 1 view .LVU353
 397:src/display.c **** #else
 1106              		.loc 1 397 8 is_stmt 0 view .LVU354
 1107 001e 2CB1     		cbz	r4, .L107
 401:src/display.c **** 	// No exponent separator for large -ve exponents
 1108              		.loc 1 401 2 is_stmt 1 view .LVU355
 401:src/display.c **** 	// No exponent separator for large -ve exponents
 1109              		.loc 1 401 5 is_stmt 0 view .LVU356
 1110 0020 57B9     		cbnz	r7, .L104
 401:src/display.c **** 	// No exponent separator for large -ve exponents
 1111              		.loc 1 401 17 is_stmt 1 discriminator 1 view .LVU357
 401:src/display.c **** 	// No exponent separator for large -ve exponents
 1112              		.loc 1 401 21 is_stmt 0 discriminator 1 view .LVU358
 1113 0022 1446     		mov	r4, r2
 1114              	.LVL103:
 401:src/display.c **** 	// No exponent separator for large -ve exponents
 1115              		.loc 1 401 24 discriminator 1 view .LVU359
 1116 0024 3A23     		movs	r3, #58
 1117              	.LVL104:
 401:src/display.c **** 	// No exponent separator for large -ve exponents
 1118              		.loc 1 401 24 discriminator 1 view .LVU360
 1119 0026 04F8013B 		strb	r3, [r4], #1
 1120              	.LVL105:
 408:src/display.c ****     }
 1121              		.loc 1 408 7 is_stmt 1 discriminator 1 view .LVU361
 1122 002a 09E0     		b	.L108
 1123              	.LVL106:
 1124              	.L107:
 404:src/display.c **** #else
 1125              		.loc 1 404 12 view .LVU362
 404:src/display.c **** #else
 1126              		.loc 1 404 16 is_stmt 0 view .LVU363
 1127 002c 1446     		mov	r4, r2
 1128              	.LVL107:
 404:src/display.c **** #else
 1129              		.loc 1 404 19 view .LVU364
 1130 002e 6523     		movs	r3, #101
 1131              	.LVL108:
 404:src/display.c **** #else
 1132              		.loc 1 404 19 view .LVU365
 1133 0030 04F8013B 		strb	r3, [r4], #1
 1134              	.LVL109:
 408:src/display.c ****     }
 1135              		.loc 1 408 7 is_stmt 1 view .LVU366
 408:src/display.c ****     }
 1136              		.loc 1 408 10 is_stmt 0 view .LVU367
 1137 0034 27B1     		cbz	r7, .L108
 404:src/display.c **** #else
 1138              		.loc 1 404 16 view .LVU368
 1139 0036 2246     		mov	r2, r4
 1140              	.LVL110:
ARM GAS  /tmp/ccDDbRKQ.s 			page 86


 1141              	.L104:
 408:src/display.c ****     }
 1142              		.loc 1 408 21 is_stmt 1 discriminator 1 view .LVU369
 408:src/display.c ****     }
 1143              		.loc 1 408 25 is_stmt 0 discriminator 1 view .LVU370
 1144 0038 1446     		mov	r4, r2
 1145              	.LVL111:
 408:src/display.c ****     }
 1146              		.loc 1 408 28 discriminator 1 view .LVU371
 1147 003a 2D23     		movs	r3, #45
 1148 003c 04F8013B 		strb	r3, [r4], #1
 1149              	.LVL112:
 1150              	.L108:
 456:src/display.c **** #endif
 1151              		.loc 1 456 7 is_stmt 1 view .LVU372
 1152 0040 01AF     		add	r7, sp, #4
 1153 0042 3846     		mov	r0, r7
 1154 0044 0422     		movs	r2, #4
 1155 0046 0021     		movs	r1, #0
 1156 0048 FFF7FEFF 		bl	xset
 1157              	.LVL113:
 458:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1158              		.loc 1 458 7 view .LVU373
 458:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1159              		.loc 1 458 10 is_stmt 0 view .LVU374
 1160 004c 16F0050F 		tst	r6, #5
 1161 0050 2CD1     		bne	.L113
 1162              	.L115:
 479:src/display.c ****     no_number:
 1163              		.loc 1 479 2 is_stmt 1 view .LVU375
 1164 0052 2946     		mov	r1, r5
 1165 0054 3846     		mov	r0, r7
 1166 0056 FFF7FEFF 		bl	num_arg
 1167              	.LVL114:
 481:src/display.c ****     }
 1168              		.loc 1 481 7 view .LVU376
 1169 005a 2146     		mov	r1, r4
 1170 005c 3846     		mov	r0, r7
 1171 005e FFF7FEFF 		bl	set_exp_digits_string
 1172              	.LVL115:
 482:src/display.c **** 
 1173              		.loc 1 482 5 is_stmt 0 view .LVU377
 1174 0062 03B0     		add	sp, sp, #12
 1175              		.cfi_remember_state
 1176              		.cfi_def_cfa_offset 20
 1177              		@ sp needed
 1178 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 1179              	.LVL116:
 1180              	.L116:
 1181              		.cfi_restore_state
 388:src/display.c ****     exp = -exp;
 1182              		.loc 1 388 14 view .LVU378
 1183 0066 0127     		movs	r7, #1
 1184              	.LVL117:
 1185              	.L103:
 411:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1186              		.loc 1 411 21 is_stmt 1 view .LVU379
ARM GAS  /tmp/ccDDbRKQ.s 			page 87


 1187              	.LBB223:
 1188              	.LBI223:
 244:src/display.c **** {
 1189              		.loc 1 244 13 view .LVU380
 1190              	.LBB224:
 246:src/display.c **** }
 1191              		.loc 1 246 3 view .LVU381
 1192 0068 8220     		movs	r0, #130
 1193 006a FFF7FEFF 		bl	set_dot
 1194              	.LVL118:
 1195              	.L109:
 246:src/display.c **** }
 1196              		.loc 1 246 3 is_stmt 0 view .LVU382
 1197              	.LBE224:
 1198              	.LBE223:
 413:src/display.c **** #else
 1199              		.loc 1 413 7 is_stmt 1 view .LVU383
 413:src/display.c **** #else
 1200              		.loc 1 413 10 is_stmt 0 view .LVU384
 1201 006e 002C     		cmp	r4, #0
 1202 0070 E6D0     		beq	.L108
 417:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1203              		.loc 1 417 4 is_stmt 1 view .LVU385
 431:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1204              		.loc 1 431 6 view .LVU386
 431:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1205              		.loc 1 431 23 is_stmt 0 view .LVU387
 1206 0072 224B     		ldr	r3, .L135+4
 431:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1207              		.loc 1 431 10 view .LVU388
 1208 0074 03FB0455 		mla	r5, r3, r4, r5
 1209              	.LVL119:
 433:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1210              		.loc 1 433 6 is_stmt 1 view .LVU389
 433:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1211              		.loc 1 433 9 is_stmt 0 view .LVU390
 1212 0078 F306     		lsls	r3, r6, #27
 1213 007a 0AD5     		bpl	.L110
 1214              	.LBB225:
 437:src/display.c **** 		// Clear digits and separators
 1215              		.loc 1 437 15 view .LVU391
 1216 007c 4F26     		movs	r6, #79
 1217              	.LVL120:
 1218              	.L111:
 439:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1219              		.loc 1 439 3 is_stmt 1 discriminator 3 view .LVU392
 1220 007e 3046     		mov	r0, r6
 437:src/display.c **** 		// Clear digits and separators
 1221              		.loc 1 437 66 is_stmt 0 discriminator 3 view .LVU393
 1222 0080 0136     		adds	r6, r6, #1
 1223              	.LVL121:
 439:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1224              		.loc 1 439 3 discriminator 3 view .LVU394
 1225 0082 FFF7FEFF 		bl	clr_dot
 1226              	.LVL122:
 437:src/display.c **** 		// Clear digits and separators
 1227              		.loc 1 437 66 is_stmt 1 discriminator 3 view .LVU395
ARM GAS  /tmp/ccDDbRKQ.s 			page 88


 437:src/display.c **** 		// Clear digits and separators
 1228              		.loc 1 437 41 discriminator 3 view .LVU396
 437:src/display.c **** 		// Clear digits and separators
 1229              		.loc 1 437 8 is_stmt 0 discriminator 3 view .LVU397
 1230 0086 632E     		cmp	r6, #99
 1231 0088 F9D1     		bne	.L111
 440:src/display.c **** 	    }
 1232              		.loc 1 440 8 is_stmt 1 view .LVU398
 1233 008a 3E21     		movs	r1, #62
 1234 008c 5120     		movs	r0, #81
 1235 008e FFF7FEFF 		bl	set_dig
 1236              	.LVL123:
 1237              	.L110:
 440:src/display.c **** 	    }
 1238              		.loc 1 440 8 is_stmt 0 view .LVU399
 1239              	.LBE225:
 443:src/display.c **** 	      CLR_EXP_SIGN;
 1240              		.loc 1 443 6 is_stmt 1 view .LVU400
 443:src/display.c **** 	      CLR_EXP_SIGN;
 1241              		.loc 1 443 9 is_stmt 0 view .LVU401
 1242 0092 47BB     		cbnz	r7, .L134
 1243              	.L112:
 447:src/display.c **** 	    flags = 1;
 1244              		.loc 1 447 6 is_stmt 1 view .LVU402
 1245 0094 04F13001 		add	r1, r4, #48
 1246 0098 6320     		movs	r0, #99
 456:src/display.c **** #endif
 1247              		.loc 1 456 7 is_stmt 0 view .LVU403
 1248 009a 01AF     		add	r7, sp, #4
 447:src/display.c **** 	    flags = 1;
 1249              		.loc 1 447 6 view .LVU404
 1250 009c FFF7FEFF 		bl	set_dig
 1251              	.LVL124:
 448:src/display.c **** 	  }
 1252              		.loc 1 448 6 is_stmt 1 view .LVU405
 456:src/display.c **** #endif
 1253              		.loc 1 456 7 view .LVU406
 1254 00a0 3846     		mov	r0, r7
 1255 00a2 0422     		movs	r2, #4
 1256 00a4 0021     		movs	r1, #0
 1257 00a6 FFF7FEFF 		bl	xset
 1258              	.LVL125:
 458:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1259              		.loc 1 458 7 view .LVU407
 456:src/display.c **** #endif
 1260              		.loc 1 456 7 is_stmt 0 view .LVU408
 1261 00aa 0024     		movs	r4, #0
 1262              	.LVL126:
 1263              	.L113:
 459:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1264              		.loc 1 459 2 is_stmt 1 view .LVU409
 1265 00ac 2946     		mov	r1, r5
 1266 00ae 0322     		movs	r2, #3
 1267 00b0 3846     		mov	r0, r7
 1268 00b2 FFF7FEFF 		bl	num_arg_0
 1269              	.LVL127:
 481:src/display.c ****     }
ARM GAS  /tmp/ccDDbRKQ.s 			page 89


 1270              		.loc 1 481 7 view .LVU410
 1271 00b6 2146     		mov	r1, r4
 1272 00b8 3846     		mov	r0, r7
 1273 00ba FFF7FEFF 		bl	set_exp_digits_string
 1274              	.LVL128:
 482:src/display.c **** 
 1275              		.loc 1 482 5 is_stmt 0 view .LVU411
 1276 00be 03B0     		add	sp, sp, #12
 1277              		.cfi_remember_state
 1278              		.cfi_def_cfa_offset 20
 1279              		@ sp needed
 1280 00c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1281              	.LVL129:
 1282              	.L133:
 1283              		.cfi_restore_state
 388:src/display.c ****     exp = -exp;
 1284              		.loc 1 388 5 is_stmt 1 view .LVU412
 389:src/display.c ****   }
 1285              		.loc 1 389 5 view .LVU413
 392:src/display.c **** #endif
 1286              		.loc 1 392 13 is_stmt 0 view .LVU414
 1287 00c2 0D4C     		ldr	r4, .L135
 389:src/display.c ****   }
 1288              		.loc 1 389 9 view .LVU415
 1289 00c4 6D42     		rsbs	r5, r5, #0
 1290              	.LVL130:
 392:src/display.c **** #endif
 1291              		.loc 1 392 3 is_stmt 1 view .LVU416
 392:src/display.c **** #endif
 1292              		.loc 1 392 13 is_stmt 0 view .LVU417
 1293 00c6 A4FB0534 		umull	r3, r4, r4, r5
 1294 00ca A409     		lsrs	r4, r4, #6
 1295              	.LVL131:
 394:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1296              		.loc 1 394 3 is_stmt 1 view .LVU418
 394:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1297              		.loc 1 394 6 is_stmt 0 view .LVU419
 1298 00cc 002A     		cmp	r2, #0
 1299 00ce CAD0     		beq	.L116
 397:src/display.c **** #else
 1300              		.loc 1 397 5 is_stmt 1 view .LVU420
 397:src/display.c **** #else
 1301              		.loc 1 397 8 is_stmt 0 view .LVU421
 1302 00d0 002C     		cmp	r4, #0
 1303 00d2 B1D1     		bne	.L104
 404:src/display.c **** #else
 1304              		.loc 1 404 12 is_stmt 1 view .LVU422
 404:src/display.c **** #else
 1305              		.loc 1 404 16 is_stmt 0 view .LVU423
 1306 00d4 1446     		mov	r4, r2
 1307              	.LVL132:
 404:src/display.c **** #else
 1308              		.loc 1 404 19 view .LVU424
 1309 00d6 6523     		movs	r3, #101
 1310 00d8 04F8013B 		strb	r3, [r4], #1
 1311              	.LVL133:
 408:src/display.c ****     }
ARM GAS  /tmp/ccDDbRKQ.s 			page 90


 1312              		.loc 1 408 7 is_stmt 1 view .LVU425
 404:src/display.c **** #else
 1313              		.loc 1 404 16 is_stmt 0 view .LVU426
 1314 00dc 2246     		mov	r2, r4
 1315 00de ABE7     		b	.L104
 1316              	.LVL134:
 1317              	.L106:
 411:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1318              		.loc 1 411 7 is_stmt 1 view .LVU427
 411:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1319              		.loc 1 411 10 is_stmt 0 view .LVU428
 1320 00e0 002F     		cmp	r7, #0
 1321 00e2 C4D0     		beq	.L109
 1322 00e4 C0E7     		b	.L103
 1323              	.LVL135:
 1324              	.L134:
 444:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1325              		.loc 1 444 8 is_stmt 1 view .LVU429
 1326              	.LBB226:
 1327              	.LBI226:
 249:src/display.c **** {
 1328              		.loc 1 249 13 view .LVU430
 1329              	.LBB227:
 251:src/display.c **** }
 1330              		.loc 1 251 3 view .LVU431
 1331 00e6 8220     		movs	r0, #130
 1332 00e8 FFF7FEFF 		bl	clr_dot
 1333              	.LVL136:
 1334              	.LBE227:
 1335              	.LBE226:
 445:src/display.c **** 	    }
 1336              		.loc 1 445 8 view .LVU432
 1337 00ec 2D21     		movs	r1, #45
 1338 00ee 5A20     		movs	r0, #90
 1339 00f0 FFF7FEFF 		bl	set_dig
 1340              	.LVL137:
 1341 00f4 CEE7     		b	.L112
 1342              	.L136:
 1343 00f6 00BF     		.align	2
 1344              	.L135:
 1345 00f8 D34D6210 		.word	274877907
 1346 00fc 18FCFFFF 		.word	-1000
 1347              		.cfi_endproc
 1348              	.LFE14:
 1350              		.section	.text.set_separator.part.0,"ax",%progbits
 1351              		.align	1
 1352              		.p2align 2,,3
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	set_separator.part.0:
 1359              	.LVL138:
 1360              	.LFB50:
 298:src/display.c ****   if (sep == SEP_NONE)
 1361              		.loc 1 298 14 view -0
 1362              		.cfi_startproc
ARM GAS  /tmp/ccDDbRKQ.s 			page 91


 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 305:src/display.c ****     set_dot(posn+7);
 1365              		.loc 1 305 5 view .LVU434
 298:src/display.c ****   if (sep == SEP_NONE)
 1366              		.loc 1 298 14 is_stmt 0 view .LVU435
 1367 0000 38B5     		push	{r3, r4, r5, lr}
 1368              		.cfi_def_cfa_offset 16
 1369              		.cfi_offset 3, -16
 1370              		.cfi_offset 4, -12
 1371              		.cfi_offset 5, -8
 1372              		.cfi_offset 14, -4
 298:src/display.c ****   if (sep == SEP_NONE)
 1373              		.loc 1 298 14 view .LVU436
 1374 0002 0D46     		mov	r5, r1
 1375 0004 0446     		mov	r4, r0
 1376              	.LVL139:
 306:src/display.c ****     if (sep == SEP_COMMA)
 1377              		.loc 1 306 5 is_stmt 1 view .LVU437
 1378 0006 0238     		subs	r0, r0, #2
 1379              	.LVL140:
 306:src/display.c ****     if (sep == SEP_COMMA)
 1380              		.loc 1 306 5 is_stmt 0 view .LVU438
 1381 0008 FFF7FEFF 		bl	set_dot
 1382              	.LVL141:
 307:src/display.c ****       set_dot(posn+8);
 1383              		.loc 1 307 5 is_stmt 1 view .LVU439
 307:src/display.c ****       set_dot(posn+8);
 1384              		.loc 1 307 8 is_stmt 0 view .LVU440
 1385 000c 012D     		cmp	r5, #1
 1386 000e 01D0     		beq	.L140
 1387              	.LVL142:
 311:src/display.c **** 
 1388              		.loc 1 311 1 view .LVU441
 1389 0010 0020     		movs	r0, #0
 1390 0012 38BD     		pop	{r3, r4, r5, pc}
 1391              	.LVL143:
 1392              	.L140:
 308:src/display.c ****   }
 1393              		.loc 1 308 7 is_stmt 1 view .LVU442
 1394 0014 601E     		subs	r0, r4, #1
 1395 0016 FFF7FEFF 		bl	set_dot
 1396              	.LVL144:
 311:src/display.c **** 
 1397              		.loc 1 311 1 is_stmt 0 view .LVU443
 1398 001a 0020     		movs	r0, #0
 1399 001c 38BD     		pop	{r3, r4, r5, pc}
 311:src/display.c **** 
 1400              		.loc 1 311 1 view .LVU444
 1401              		.cfi_endproc
 1402              	.LFE50:
 1404 001e 00BF     		.section	.text.set_decimal.part.0,"ax",%progbits
 1405              		.align	1
 1406              		.p2align 2,,3
 1407              		.syntax unified
 1408              		.thumb
 1409              		.thumb_func
ARM GAS  /tmp/ccDDbRKQ.s 			page 92


 1410              		.fpu fpv4-sp-d16
 1412              	set_decimal.part.0:
 1413              	.LVL145:
 1414              	.LFB51:
 283:src/display.c ****   if (res) {
 1415              		.loc 1 283 14 is_stmt 1 view -0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 287:src/display.c ****     if (decimal != DECIMAL_DOT)
 1419              		.loc 1 287 5 view .LVU446
 283:src/display.c ****   if (res) {
 1420              		.loc 1 283 14 is_stmt 0 view .LVU447
 1421 0000 38B5     		push	{r3, r4, r5, lr}
 1422              		.cfi_def_cfa_offset 16
 1423              		.cfi_offset 3, -16
 1424              		.cfi_offset 4, -12
 1425              		.cfi_offset 5, -8
 1426              		.cfi_offset 14, -4
 283:src/display.c ****   if (res) {
 1427              		.loc 1 283 14 view .LVU448
 1428 0002 0446     		mov	r4, r0
 1429 0004 0D46     		mov	r5, r1
 287:src/display.c ****     if (decimal != DECIMAL_DOT)
 1430              		.loc 1 287 5 view .LVU449
 1431 0006 0730     		adds	r0, r0, #7
 1432              	.LVL146:
 287:src/display.c ****     if (decimal != DECIMAL_DOT)
 1433              		.loc 1 287 5 view .LVU450
 1434 0008 FFF7FEFF 		bl	set_dot
 1435              	.LVL147:
 288:src/display.c ****       set_dot(posn+8);
 1436              		.loc 1 288 5 is_stmt 1 view .LVU451
 288:src/display.c ****       set_dot(posn+8);
 1437              		.loc 1 288 8 is_stmt 0 view .LVU452
 1438 000c 0DB9     		cbnz	r5, .L147
 1439              	.LVL148:
 291:src/display.c **** }
 1440              		.loc 1 291 3 is_stmt 1 view .LVU453
 292:src/display.c **** 
 1441              		.loc 1 292 1 is_stmt 0 view .LVU454
 1442 000e 0020     		movs	r0, #0
 1443 0010 38BD     		pop	{r3, r4, r5, pc}
 1444              	.LVL149:
 1445              	.L147:
 289:src/display.c ****   }
 1446              		.loc 1 289 7 is_stmt 1 view .LVU455
 1447 0012 04F10800 		add	r0, r4, #8
 1448 0016 FFF7FEFF 		bl	set_dot
 1449              	.LVL150:
 291:src/display.c **** }
 1450              		.loc 1 291 3 view .LVU456
 292:src/display.c **** 
 1451              		.loc 1 292 1 is_stmt 0 view .LVU457
 1452 001a 0020     		movs	r0, #0
 1453 001c 38BD     		pop	{r3, r4, r5, pc}
 292:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 93


 1454              		.loc 1 292 1 view .LVU458
 1455              		.cfi_endproc
 1456              	.LFE51:
 1458 001e 00BF     		.section	.text.set_digits_string,"ax",%progbits
 1459              		.align	1
 1460              		.p2align 2,,3
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1464              		.fpu fpv4-sp-d16
 1466              	set_digits_string:
 1467              	.LVL151:
 1468              	.LFB12:
 336:src/display.c ****   for (; *msg != '\0'; msg++) {
 1469              		.loc 1 336 55 is_stmt 1 view -0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1473              		.loc 1 337 3 view .LVU460
 336:src/display.c ****   for (; *msg != '\0'; msg++) {
 1474              		.loc 1 336 55 is_stmt 0 view .LVU461
 1475 0000 38B5     		push	{r3, r4, r5, lr}
 1476              		.cfi_def_cfa_offset 16
 1477              		.cfi_offset 3, -16
 1478              		.cfi_offset 4, -12
 1479              		.cfi_offset 5, -8
 1480              		.cfi_offset 14, -4
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1481              		.loc 1 337 10 view .LVU462
 1482 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1483              		.loc 1 337 10 is_stmt 1 view .LVU463
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1484              		.loc 1 337 3 is_stmt 0 view .LVU464
 1485 0004 D3B1     		cbz	r3, .L148
 1486 0006 0546     		mov	r5, r0
 1487 0008 0C46     		mov	r4, r1
 1488 000a 06E0     		b	.L152
 1489              	.LVL152:
 1490              	.L150:
 1491              	.LBB228:
 1492              	.LBB229:
 331:src/display.c ****   return res;
 1493              		.loc 1 331 8 view .LVU465
 1494 000c 2046     		mov	r0, r4
 1495              	.LVL153:
 331:src/display.c ****   return res;
 1496              		.loc 1 331 8 view .LVU466
 1497 000e FFF7FEFF 		bl	set_dig
 1498              	.LVL154:
 332:src/display.c **** }
 1499              		.loc 1 332 3 is_stmt 1 view .LVU467
 332:src/display.c **** }
 1500              		.loc 1 332 3 is_stmt 0 view .LVU468
 1501              	.LBE229:
 1502              	.LBE228:
ARM GAS  /tmp/ccDDbRKQ.s 			page 94


 342:src/display.c ****     }
 1503              		.loc 1 342 7 is_stmt 1 view .LVU469
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1504              		.loc 1 337 10 is_stmt 0 view .LVU470
 1505 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1506              	.LVL155:
 342:src/display.c ****     }
 1507              		.loc 1 342 9 view .LVU471
 1508 0016 0934     		adds	r4, r4, #9
 1509              	.LVL156:
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1510              		.loc 1 337 24 is_stmt 1 view .LVU472
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1511              		.loc 1 337 10 view .LVU473
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1512              		.loc 1 337 3 is_stmt 0 view .LVU474
 1513 0018 83B1     		cbz	r3, .L148
 1514              	.LVL157:
 1515              	.L152:
 338:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1516              		.loc 1 338 5 is_stmt 1 view .LVU475
 339:src/display.c ****     else {
 1517              		.loc 1 339 7 view .LVU476
 1518              	.LBB232:
 1519              	.LBI232:
 283:src/display.c ****   if (res) {
 1520              		.loc 1 283 14 view .LVU477
 1521              	.LBB233:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1522              		.loc 1 284 3 view .LVU478
 1523              	.LBE233:
 1524              	.LBE232:
 341:src/display.c ****       j += SEGS_PER_DIGIT;
 1525              		.loc 1 341 7 view .LVU479
 1526              	.LBB236:
 1527              	.LBI228:
 329:src/display.c ****   if (res) *res++ = ch;
 1528              		.loc 1 329 14 view .LVU480
 1529              	.LBB230:
 330:src/display.c ****   else	set_dig(base, ch);
 1530              		.loc 1 330 3 view .LVU481
 331:src/display.c ****   return res;
 1531              		.loc 1 331 8 view .LVU482
 1532              	.LBE230:
 1533              	.LBE236:
 338:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1534              		.loc 1 338 21 is_stmt 0 view .LVU483
 1535 001a 03F0FD02 		and	r2, r3, #253
 1536 001e 2C2A     		cmp	r2, #44
 1537              	.LBB237:
 1538              	.LBB234:
 1539 0020 A4F10900 		sub	r0, r4, #9
 1540              	.LVL158:
 338:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1541              		.loc 1 338 21 view .LVU484
 1542              	.LBE234:
 1543              	.LBE237:
ARM GAS  /tmp/ccDDbRKQ.s 			page 95


 1544              	.LBB238:
 1545              	.LBB231:
 331:src/display.c ****   return res;
 1546              		.loc 1 331 8 view .LVU485
 1547 0024 1946     		mov	r1, r3
 1548              	.LBE231:
 1549              	.LBE238:
 338:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1550              		.loc 1 338 21 view .LVU486
 1551 0026 F1D1     		bne	.L150
 1552              	.LBB239:
 1553              	.LBB235:
 1554 0028 B3F12E01 		subs	r1, r3, #46
 1555 002c 18BF     		it	ne
 1556 002e 0121     		movne	r1, #1
 1557 0030 FFF7FEFF 		bl	set_decimal.part.0
 1558              	.LVL159:
 291:src/display.c **** }
 1559              		.loc 1 291 3 is_stmt 1 view .LVU487
 291:src/display.c **** }
 1560              		.loc 1 291 3 is_stmt 0 view .LVU488
 1561              	.LBE235:
 1562              	.LBE239:
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1563              		.loc 1 337 24 is_stmt 1 view .LVU489
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1564              		.loc 1 337 10 view .LVU490
 1565 0034 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1566              	.LVL160:
 337:src/display.c ****     if (*msg == '.' || *msg == ',')
 1567              		.loc 1 337 3 is_stmt 0 view .LVU491
 1568 0038 002B     		cmp	r3, #0
 1569 003a EED1     		bne	.L152
 1570              	.LVL161:
 1571              	.L148:
 345:src/display.c **** 
 1572              		.loc 1 345 1 view .LVU492
 1573 003c 38BD     		pop	{r3, r4, r5, pc}
 1574              		.cfi_endproc
 1575              	.LFE12:
 1577 003e 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1578              		.align	2
 1579              	.LC0:
 1580 0000 4E614E00 		.ascii	"NaN\000"
 1581              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1582              		.align	1
 1583              		.p2align 2,,3
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu fpv4-sp-d16
 1589              	check_special_dn.isra.0:
 1590              	.LVL162:
 1591              	.LFB52:
1541:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1592              		.loc 1 1541 18 is_stmt 1 view -0
 1593              		.cfi_startproc
ARM GAS  /tmp/ccDDbRKQ.s 			page 96


 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
1542:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1596              		.loc 1 1542 2 view .LVU494
1542:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1597              		.loc 1 1542 5 is_stmt 0 view .LVU495
 1598 0000 10F07002 		ands	r2, r0, #112
 1599 0004 0BD0     		beq	.L166
1543:src/display.c **** 	    if (res) {
 1600              		.loc 1 1543 4 is_stmt 1 view .LVU496
1543:src/display.c **** 	    if (res) {
 1601              		.loc 1 1543 7 is_stmt 0 view .LVU497
 1602 0006 10F0300F 		tst	r0, #48
1541:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1603              		.loc 1 1541 18 view .LVU498
 1604 000a 08B5     		push	{r3, lr}
 1605              		.cfi_def_cfa_offset 8
 1606              		.cfi_offset 3, -8
 1607              		.cfi_offset 14, -4
 1608 000c 0B46     		mov	r3, r1
1543:src/display.c **** 	    if (res) {
 1609              		.loc 1 1543 7 view .LVU499
 1610 000e 08D0     		beq	.L160
 1611              	.LVL163:
 1612              	.LBB242:
 1613              	.LBI242:
1541:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1614              		.loc 1 1541 18 is_stmt 1 view .LVU500
 1615              	.LBB243:
1544:src/display.c **** 	      scopy(res, "NaN");
 1616              		.loc 1 1544 6 view .LVU501
1544:src/display.c **** 	      scopy(res, "NaN");
 1617              		.loc 1 1544 9 is_stmt 0 view .LVU502
 1618 0010 99B1     		cbz	r1, .L161
1545:src/display.c **** 	    } else {
 1619              		.loc 1 1545 8 is_stmt 1 view .LVU503
 1620 0012 0846     		mov	r0, r1
 1621 0014 1049     		ldr	r1, .L175
 1622              	.LVL164:
1545:src/display.c **** 	    } else {
 1623              		.loc 1 1545 8 is_stmt 0 view .LVU504
 1624 0016 FFF7FEFF 		bl	scopy
 1625              	.LVL165:
1545:src/display.c **** 	    } else {
 1626              		.loc 1 1545 8 view .LVU505
 1627 001a 0120     		movs	r0, #1
 1628              	.LBE243:
 1629              	.LBE242:
1564:src/display.c **** 
 1630              		.loc 1 1564 7 view .LVU506
 1631 001c 08BD     		pop	{r3, pc}
 1632              	.LVL166:
 1633              	.L166:
 1634              		.cfi_def_cfa_offset 0
 1635              		.cfi_restore 3
 1636              		.cfi_restore 14
1563:src/display.c ****       }
ARM GAS  /tmp/ccDDbRKQ.s 			page 97


 1637              		.loc 1 1563 9 view .LVU507
 1638 001e 1046     		mov	r0, r2
1564:src/display.c **** 
 1639              		.loc 1 1564 7 view .LVU508
 1640 0020 7047     		bx	lr
 1641              	.L160:
 1642              		.cfi_def_cfa_offset 8
 1643              		.cfi_offset 3, -8
 1644              		.cfi_offset 14, -4
1551:src/display.c **** 	      if (res) *res++ = '-';
 1645              		.loc 1 1551 6 is_stmt 1 view .LVU509
1551:src/display.c **** 	      if (res) *res++ = '-';
 1646              		.loc 1 1551 9 is_stmt 0 view .LVU510
 1647 0022 0206     		lsls	r2, r0, #24
 1648 0024 04D4     		bmi	.L174
1555:src/display.c **** 	      *res++ = '\237';
 1649              		.loc 1 1555 6 is_stmt 1 view .LVU511
1555:src/display.c **** 	      *res++ = '\237';
 1650              		.loc 1 1555 9 is_stmt 0 view .LVU512
 1651 0026 89B1     		cbz	r1, .L165
 1652              	.LVL167:
 1653              	.L164:
1556:src/display.c **** 	    else {
 1654              		.loc 1 1556 8 is_stmt 1 view .LVU513
1556:src/display.c **** 	    else {
 1655              		.loc 1 1556 15 is_stmt 0 view .LVU514
 1656 0028 9F22     		movs	r2, #159
 1657 002a 1A70     		strb	r2, [r3]
1560:src/display.c **** 	  }
 1658              		.loc 1 1560 13 view .LVU515
 1659 002c 0120     		movs	r0, #1
1564:src/display.c **** 
 1660              		.loc 1 1564 7 view .LVU516
 1661 002e 08BD     		pop	{r3, pc}
 1662              	.LVL168:
 1663              	.L174:
1552:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1664              		.loc 1 1552 8 is_stmt 1 view .LVU517
1552:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1665              		.loc 1 1552 11 is_stmt 0 view .LVU518
 1666 0030 41B1     		cbz	r1, .L163
1552:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1667              		.loc 1 1552 17 is_stmt 1 view .LVU519
 1668              	.LVL169:
1552:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1669              		.loc 1 1552 24 is_stmt 0 view .LVU520
 1670 0032 2D22     		movs	r2, #45
 1671 0034 03F8012B 		strb	r2, [r3], #1
 1672              	.LVL170:
1555:src/display.c **** 	      *res++ = '\237';
 1673              		.loc 1 1555 6 is_stmt 1 view .LVU521
 1674 0038 F6E7     		b	.L164
 1675              	.LVL171:
 1676              	.L161:
 1677              	.LBB245:
 1678              	.LBB244:
1547:src/display.c **** 	    }
ARM GAS  /tmp/ccDDbRKQ.s 			page 98


 1679              		.loc 1 1547 8 view .LVU522
 1680 003a 0848     		ldr	r0, .L175+4
 1681 003c FFF7FEFF 		bl	set_digits_string
 1682              	.LVL172:
1547:src/display.c **** 	    }
 1683              		.loc 1 1547 8 is_stmt 0 view .LVU523
 1684 0040 0120     		movs	r0, #1
 1685              	.LBE244:
 1686              	.LBE245:
1564:src/display.c **** 
 1687              		.loc 1 1564 7 view .LVU524
 1688 0042 08BD     		pop	{r3, pc}
 1689              	.LVL173:
 1690              	.L163:
1553:src/display.c **** 	    }
 1691              		.loc 1 1553 13 is_stmt 1 view .LVU525
 1692 0044 2D21     		movs	r1, #45
 1693              	.LVL174:
1553:src/display.c **** 	    }
 1694              		.loc 1 1553 13 is_stmt 0 view .LVU526
 1695 0046 0920     		movs	r0, #9
 1696 0048 FFF7FEFF 		bl	set_dig
 1697              	.LVL175:
1555:src/display.c **** 	      *res++ = '\237';
 1698              		.loc 1 1555 6 is_stmt 1 view .LVU527
 1699              	.L165:
1558:src/display.c **** 	    }
 1700              		.loc 1 1558 8 view .LVU528
 1701 004c 0448     		ldr	r0, .L175+8
 1702 004e 1221     		movs	r1, #18
 1703 0050 FFF7FEFF 		bl	set_digits_string
 1704              	.LVL176:
1560:src/display.c **** 	  }
 1705              		.loc 1 1560 13 is_stmt 0 view .LVU529
 1706 0054 0120     		movs	r0, #1
1564:src/display.c **** 
 1707              		.loc 1 1564 7 view .LVU530
 1708 0056 08BD     		pop	{r3, pc}
 1709              	.L176:
 1710              		.align	2
 1711              	.L175:
 1712 0058 00000000 		.word	.LC0
 1713 005c 00000000 		.word	.LANCHOR3
 1714 0060 00000000 		.word	.LANCHOR4
 1715              		.cfi_endproc
 1716              	.LFE52:
 1718              		.section	.text.set_x_hms,"ax",%progbits
 1719              		.align	1
 1720              		.p2align 2,,3
 1721              		.syntax unified
 1722              		.thumb
 1723              		.thumb_func
 1724              		.fpu fpv4-sp-d16
 1726              	set_x_hms:
 1727              	.LVL177:
 1728              	.LFB22:
1609:src/display.c **** 	decNumber x, y, a, t, u;
ARM GAS  /tmp/ccDDbRKQ.s 			page 99


 1729              		.loc 1 1609 62 is_stmt 1 view -0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 200
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
1610:src/display.c **** 	int j=0;
 1733              		.loc 1 1610 2 view .LVU532
1611:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1734              		.loc 1 1611 2 view .LVU533
1609:src/display.c **** 	decNumber x, y, a, t, u;
 1735              		.loc 1 1609 62 is_stmt 0 view .LVU534
 1736 0000 30B5     		push	{r4, r5, lr}
 1737              		.cfi_def_cfa_offset 12
 1738              		.cfi_offset 4, -12
 1739              		.cfi_offset 5, -8
 1740              		.cfi_offset 14, -4
 1741 0002 B5B0     		sub	sp, sp, #212
 1742              		.cfi_def_cfa_offset 224
1609:src/display.c **** 	decNumber x, y, a, t, u;
 1743              		.loc 1 1609 62 view .LVU535
 1744 0004 0446     		mov	r4, r0
1611:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1745              		.loc 1 1611 6 view .LVU536
 1746 0006 0023     		movs	r3, #0
1615:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1747              		.loc 1 1615 6 view .LVU537
 1748 0008 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 1749              	.LVL178:
1611:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1750              		.loc 1 1611 6 view .LVU538
 1751 000a 0393     		str	r3, [sp, #12]
1612:src/display.c **** 	unsigned int hr, min, sec, fs;
 1752              		.loc 1 1612 2 is_stmt 1 view .LVU539
 1753              	.LVL179:
1613:src/display.c **** 
 1754              		.loc 1 1613 2 view .LVU540
1615:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1755              		.loc 1 1615 2 view .LVU541
1609:src/display.c **** 	decNumber x, y, a, t, u;
 1756              		.loc 1 1609 62 is_stmt 0 view .LVU542
 1757 000c 0D46     		mov	r5, r1
1615:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1758              		.loc 1 1615 6 view .LVU543
 1759 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1760              	.LVL180:
1615:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1761              		.loc 1 1615 5 view .LVU544
 1762 0012 48B1     		cbz	r0, .L178
1616:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1763              		.loc 1 1616 4 is_stmt 1 view .LVU545
1616:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1764              		.loc 1 1616 7 is_stmt 0 view .LVU546
 1765 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1766 0016 5B06     		lsls	r3, r3, #25
 1767 0018 04D5     		bpl	.L177
1617:src/display.c **** 	  return;
 1768              		.loc 1 1617 6 is_stmt 1 view .LVU547
 1769              	.LVL181:
ARM GAS  /tmp/ccDDbRKQ.s 			page 100


 1770              	.LBB246:
 1771              	.LBI246:
 329:src/display.c ****   if (res) *res++ = ch;
 1772              		.loc 1 329 14 view .LVU548
 1773              	.LBB247:
 330:src/display.c ****   else	set_dig(base, ch);
 1774              		.loc 1 330 3 view .LVU549
 330:src/display.c ****   else	set_dig(base, ch);
 1775              		.loc 1 330 6 is_stmt 0 view .LVU550
 1776 001a 002D     		cmp	r5, #0
 1777 001c 00F0BB80 		beq	.L181
 330:src/display.c ****   else	set_dig(base, ch);
 1778              		.loc 1 330 12 is_stmt 1 view .LVU551
 1779              	.LVL182:
 330:src/display.c ****   else	set_dig(base, ch);
 1780              		.loc 1 330 19 is_stmt 0 view .LVU552
 1781 0020 6F23     		movs	r3, #111
 1782 0022 2B70     		strb	r3, [r5]
 1783              	.LVL183:
 1784              	.L177:
 330:src/display.c ****   else	set_dig(base, ch);
 1785              		.loc 1 330 19 view .LVU553
 1786              	.LBE247:
 1787              	.LBE246:
1672:src/display.c **** 
 1788              		.loc 1 1672 7 view .LVU554
 1789 0024 35B0     		add	sp, sp, #212
 1790              		.cfi_remember_state
 1791              		.cfi_def_cfa_offset 12
 1792              		@ sp needed
 1793 0026 30BD     		pop	{r4, r5, pc}
 1794              	.LVL184:
 1795              	.L178:
 1796              		.cfi_restore_state
1621:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1797              		.loc 1 1621 2 is_stmt 1 view .LVU555
 1798 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1799              	.LVL185:
1622:src/display.c **** 	dn_abs(&a, rgx);
 1800              		.loc 1 1622 2 view .LVU556
 1801 002c 654A     		ldr	r2, .L212
 1802 002e 2146     		mov	r1, r4
 1803 0030 07A8     		add	r0, sp, #28
 1804 0032 FFF7FEFF 		bl	decNumberMod
 1805              	.LVL186:
1623:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1806              		.loc 1 1623 2 view .LVU557
 1807 0036 2146     		mov	r1, r4
 1808 0038 19A8     		add	r0, sp, #100
 1809 003a FFF7FEFF 		bl	dn_abs
 1810              	.LVL187:
1624:src/display.c **** 	  if (res != NULL)
 1811              		.loc 1 1624 2 view .LVU558
1624:src/display.c **** 	  if (res != NULL)
 1812              		.loc 1 1624 5 is_stmt 0 view .LVU559
 1813 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1814 0042 002B     		cmp	r3, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 101


 1815 0044 75DB     		blt	.L210
 1816              	.L182:
1632:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1817              		.loc 1 1632 2 is_stmt 1 view .LVU560
 1818 0046 07A9     		add	r1, sp, #28
 1819 0048 10A8     		add	r0, sp, #64
 1820 004a FFF7FEFF 		bl	decNumberHR2HMS
 1821              	.LVL188:
1633:src/display.c **** 	decNumberRound(&u, &t);
 1822              		.loc 1 1633 2 view .LVU561
 1823 004e 0622     		movs	r2, #6
 1824 0050 10A9     		add	r1, sp, #64
 1825 0052 22A8     		add	r0, sp, #136
 1826 0054 FFF7FEFF 		bl	dn_mulpow10
 1827              	.LVL189:
1634:src/display.c **** 
 1828              		.loc 1 1634 2 view .LVU562
 1829 0058 22A9     		add	r1, sp, #136
 1830 005a 2BA8     		add	r0, sp, #172
 1831 005c FFF7FEFF 		bl	decNumberRound
 1832              	.LVL190:
1636:src/display.c **** 	hms_step(&u, &t, &sec);
 1833              		.loc 1 1636 2 view .LVU563
 1834 0060 2BA9     		add	r1, sp, #172
 1835 0062 22A8     		add	r0, sp, #136
 1836 0064 06AA     		add	r2, sp, #24
 1837 0066 FFF7FEFF 		bl	hms_step
 1838              	.LVL191:
1637:src/display.c **** 	hms_step(&t, &u, &min);
 1839              		.loc 1 1637 2 view .LVU564
 1840 006a 22A9     		add	r1, sp, #136
 1841 006c 2BA8     		add	r0, sp, #172
 1842 006e 05AA     		add	r2, sp, #20
 1843 0070 FFF7FEFF 		bl	hms_step
 1844              	.LVL192:
1638:src/display.c **** 	hr = dn_to_int(&t);
 1845              		.loc 1 1638 2 view .LVU565
 1846 0074 04AA     		add	r2, sp, #16
 1847 0076 2BA9     		add	r1, sp, #172
 1848 0078 22A8     		add	r0, sp, #136
 1849 007a FFF7FEFF 		bl	hms_step
 1850              	.LVL193:
1639:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1851              		.loc 1 1639 2 view .LVU566
1639:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1852              		.loc 1 1639 7 is_stmt 0 view .LVU567
 1853 007e 22A8     		add	r0, sp, #136
 1854 0080 FFF7FEFF 		bl	dn_to_int
 1855              	.LVL194:
1640:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1856              		.loc 1 1640 33 view .LVU568
 1857 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1640:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1858              		.loc 1 1640 5 view .LVU569
 1859 0088 3B2A     		cmp	r2, #59
1640:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1860              		.loc 1 1640 19 is_stmt 1 view .LVU570
ARM GAS  /tmp/ccDDbRKQ.s 			page 102


1640:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1861              		.loc 1 1640 23 is_stmt 0 view .LVU571
 1862 008a 82BF     		ittt	hi
 1863 008c 3C3A     		subhi	r2, r2, #60
1640:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1864              		.loc 1 1640 33 view .LVU572
 1865 008e 0133     		addhi	r3, r3, #1
 1866 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1641:src/display.c **** 
 1867              		.loc 1 1641 2 is_stmt 1 view .LVU573
1641:src/display.c **** 
 1868              		.loc 1 1641 5 is_stmt 0 view .LVU574
 1869 0094 3B2B     		cmp	r3, #59
 1870 0096 02D9     		bls	.L187
1641:src/display.c **** 
 1871              		.loc 1 1641 19 is_stmt 1 discriminator 1 view .LVU575
1641:src/display.c **** 
 1872              		.loc 1 1641 23 is_stmt 0 discriminator 1 view .LVU576
 1873 0098 3C3B     		subs	r3, r3, #60
 1874 009a 0493     		str	r3, [sp, #16]
1641:src/display.c **** 
 1875              		.loc 1 1641 30 is_stmt 1 discriminator 1 view .LVU577
1641:src/display.c **** 
 1876              		.loc 1 1641 32 is_stmt 0 discriminator 1 view .LVU578
 1877 009c 0130     		adds	r0, r0, #1
 1878              	.LVL195:
 1879              	.L187:
1644:src/display.c **** 	res = set_dig_s(j, '@', res);
 1880              		.loc 1 1644 2 is_stmt 1 view .LVU579
1644:src/display.c **** 	res = set_dig_s(j, '@', res);
 1881              		.loc 1 1644 8 is_stmt 0 view .LVU580
 1882 009e 0123     		movs	r3, #1
 1883 00a0 0093     		str	r3, [sp]
 1884 00a2 2946     		mov	r1, r5
 1885 00a4 03AA     		add	r2, sp, #12
 1886 00a6 0423     		movs	r3, #4
 1887 00a8 FFF7FEFF 		bl	hms_render
 1888              	.LVL196:
1645:src/display.c **** 	j += SEGS_PER_DIGIT;
 1889              		.loc 1 1645 2 is_stmt 1 view .LVU581
 1890              	.LBB249:
 1891              	.LBI249:
 329:src/display.c ****   if (res) *res++ = ch;
 1892              		.loc 1 329 14 view .LVU582
 1893              	.LBB250:
 330:src/display.c ****   else	set_dig(base, ch);
 1894              		.loc 1 330 3 view .LVU583
 330:src/display.c ****   else	set_dig(base, ch);
 1895              		.loc 1 330 6 is_stmt 0 view .LVU584
 1896 00ac 0446     		mov	r4, r0
 1897              	.LVL197:
 330:src/display.c ****   else	set_dig(base, ch);
 1898              		.loc 1 330 6 view .LVU585
 1899 00ae 0028     		cmp	r0, #0
 1900 00b0 7CD0     		beq	.L188
 330:src/display.c ****   else	set_dig(base, ch);
 1901              		.loc 1 330 12 is_stmt 1 view .LVU586
ARM GAS  /tmp/ccDDbRKQ.s 			page 103


 330:src/display.c ****   else	set_dig(base, ch);
 1902              		.loc 1 330 16 is_stmt 0 view .LVU587
 1903 00b2 0146     		mov	r1, r0
 1904              	.LVL198:
 330:src/display.c ****   else	set_dig(base, ch);
 1905              		.loc 1 330 19 view .LVU588
 1906 00b4 4023     		movs	r3, #64
 1907 00b6 01F8013B 		strb	r3, [r1], #1
 1908              	.LVL199:
 1909              	.L189:
 332:src/display.c **** }
 1910              		.loc 1 332 3 is_stmt 1 view .LVU589
 332:src/display.c **** }
 1911              		.loc 1 332 3 is_stmt 0 view .LVU590
 1912              	.LBE250:
 1913              	.LBE249:
1646:src/display.c **** 
 1914              		.loc 1 1646 2 is_stmt 1 view .LVU591
1649:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1915              		.loc 1 1649 8 is_stmt 0 view .LVU592
 1916 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 1917 00be 0122     		movs	r2, #1
1646:src/display.c **** 
 1918              		.loc 1 1646 4 view .LVU593
 1919 00c0 03F10904 		add	r4, r3, #9
1649:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1920              		.loc 1 1649 8 view .LVU594
 1921 00c4 0092     		str	r2, [sp]
 1922 00c6 0223     		movs	r3, #2
 1923 00c8 03AA     		add	r2, sp, #12
1646:src/display.c **** 
 1924              		.loc 1 1646 4 view .LVU595
 1925 00ca 0394     		str	r4, [sp, #12]
1649:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1926              		.loc 1 1649 2 is_stmt 1 view .LVU596
1649:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1927              		.loc 1 1649 8 is_stmt 0 view .LVU597
 1928 00cc FFF7FEFF 		bl	hms_render
 1929              	.LVL200:
1650:src/display.c **** 	j += SEGS_PER_DIGIT;
 1930              		.loc 1 1650 2 is_stmt 1 view .LVU598
 1931              	.LBB252:
 1932              	.LBI252:
 329:src/display.c ****   if (res) *res++ = ch;
 1933              		.loc 1 329 14 view .LVU599
 1934              	.LBB253:
 330:src/display.c ****   else	set_dig(base, ch);
 1935              		.loc 1 330 3 view .LVU600
 330:src/display.c ****   else	set_dig(base, ch);
 1936              		.loc 1 330 6 is_stmt 0 view .LVU601
 1937 00d0 0446     		mov	r4, r0
 1938 00d2 0028     		cmp	r0, #0
 1939 00d4 64D0     		beq	.L190
 330:src/display.c ****   else	set_dig(base, ch);
 1940              		.loc 1 330 12 is_stmt 1 view .LVU602
 330:src/display.c ****   else	set_dig(base, ch);
 1941              		.loc 1 330 16 is_stmt 0 view .LVU603
ARM GAS  /tmp/ccDDbRKQ.s 			page 104


 1942 00d6 0146     		mov	r1, r0
 1943              	.LVL201:
 330:src/display.c ****   else	set_dig(base, ch);
 1944              		.loc 1 330 19 view .LVU604
 1945 00d8 2723     		movs	r3, #39
 1946 00da 01F8013B 		strb	r3, [r1], #1
 1947              	.LVL202:
 1948              	.L191:
 332:src/display.c **** }
 1949              		.loc 1 332 3 is_stmt 1 view .LVU605
 332:src/display.c **** }
 1950              		.loc 1 332 3 is_stmt 0 view .LVU606
 1951              	.LBE253:
 1952              	.LBE252:
1651:src/display.c **** 
 1953              		.loc 1 1651 2 is_stmt 1 view .LVU607
1651:src/display.c **** 
 1954              		.loc 1 1651 4 is_stmt 0 view .LVU608
 1955 00de 039B     		ldr	r3, [sp, #12]
1654:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1956              		.loc 1 1654 8 view .LVU609
 1957 00e0 0598     		ldr	r0, [sp, #20]
 1958 00e2 0122     		movs	r2, #1
1651:src/display.c **** 
 1959              		.loc 1 1651 4 view .LVU610
 1960 00e4 03F10904 		add	r4, r3, #9
1654:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1961              		.loc 1 1654 8 view .LVU611
 1962 00e8 0092     		str	r2, [sp]
 1963 00ea 0223     		movs	r3, #2
 1964 00ec 03AA     		add	r2, sp, #12
1651:src/display.c **** 
 1965              		.loc 1 1651 4 view .LVU612
 1966 00ee 0394     		str	r4, [sp, #12]
1654:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1967              		.loc 1 1654 2 is_stmt 1 view .LVU613
1654:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1968              		.loc 1 1654 8 is_stmt 0 view .LVU614
 1969 00f0 FFF7FEFF 		bl	hms_render
 1970              	.LVL203:
1655:src/display.c **** 
 1971              		.loc 1 1655 2 is_stmt 1 view .LVU615
1655:src/display.c **** 
 1972              		.loc 1 1655 8 is_stmt 0 view .LVU616
 1973 00f4 344B     		ldr	r3, .L212+4
 1974 00f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1975              	.LVL204:
 1976              	.LBB255:
 1977              	.LBI255:
 283:src/display.c ****   if (res) {
 1978              		.loc 1 283 14 is_stmt 1 view .LVU617
 1979              	.LBB256:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1980              		.loc 1 284 3 view .LVU618
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1981              		.loc 1 284 6 is_stmt 0 view .LVU619
 1982 00f8 0028     		cmp	r0, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 105


 1983 00fa 38D0     		beq	.L192
 285:src/display.c ****   } else {
 1984              		.loc 1 285 5 is_stmt 1 view .LVU620
 285:src/display.c ****   } else {
 1985              		.loc 1 285 12 is_stmt 0 view .LVU621
 1986 00fc 0029     		cmp	r1, #0
 285:src/display.c ****   } else {
 1987              		.loc 1 285 9 view .LVU622
 1988 00fe 0146     		mov	r1, r0
 1989              	.LVL205:
 285:src/display.c ****   } else {
 1990              		.loc 1 285 12 view .LVU623
 1991 0100 0CBF     		ite	eq
 1992 0102 2E23     		moveq	r3, #46
 1993 0104 2C23     		movne	r3, #44
 1994 0106 01F8013B 		strb	r3, [r1], #1
 1995              	.LVL206:
 1996              	.L194:
 291:src/display.c **** }
 1997              		.loc 1 291 3 is_stmt 1 view .LVU624
 291:src/display.c **** }
 1998              		.loc 1 291 3 is_stmt 0 view .LVU625
 1999              	.LBE256:
 2000              	.LBE255:
1658:src/display.c **** 
 2001              		.loc 1 1658 2 is_stmt 1 view .LVU626
1658:src/display.c **** 
 2002              		.loc 1 1658 8 is_stmt 0 view .LVU627
 2003 010a 0023     		movs	r3, #0
 2004 010c 0093     		str	r3, [sp]
 2005 010e 0698     		ldr	r0, [sp, #24]
 2006 0110 03AA     		add	r2, sp, #12
 2007 0112 0223     		movs	r3, #2
 2008 0114 FFF7FEFF 		bl	hms_render
 2009              	.LVL207:
1661:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2010              		.loc 1 1661 2 is_stmt 1 view .LVU628
 2011              	.LBB258:
 2012              	.LBI258:
 329:src/display.c ****   if (res) *res++ = ch;
 2013              		.loc 1 329 14 view .LVU629
 2014              	.LBB259:
 330:src/display.c ****   else	set_dig(base, ch);
 2015              		.loc 1 330 3 view .LVU630
 330:src/display.c ****   else	set_dig(base, ch);
 2016              		.loc 1 330 6 is_stmt 0 view .LVU631
 2017 0118 0446     		mov	r4, r0
 2018 011a 90B3     		cbz	r0, .L195
 330:src/display.c ****   else	set_dig(base, ch);
 2019              		.loc 1 330 12 is_stmt 1 view .LVU632
 2020              	.LVL208:
 330:src/display.c ****   else	set_dig(base, ch);
 2021              		.loc 1 330 19 is_stmt 0 view .LVU633
 2022 011c 2223     		movs	r3, #34
 2023 011e 0370     		strb	r3, [r0]
 2024              	.LVL209:
 332:src/display.c **** }
ARM GAS  /tmp/ccDDbRKQ.s 			page 106


 2025              		.loc 1 332 3 is_stmt 1 view .LVU634
 332:src/display.c **** }
 2026              		.loc 1 332 3 is_stmt 0 view .LVU635
 2027              	.LBE259:
 2028              	.LBE258:
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2029              		.loc 1 1665 2 is_stmt 1 view .LVU636
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2030              		.loc 1 1665 6 is_stmt 0 view .LVU637
 2031 0120 2849     		ldr	r1, .L212
 2032 0122 19A8     		add	r0, sp, #100
 2033              	.LVL210:
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2034              		.loc 1 1665 6 view .LVU638
 2035 0124 FFF7FEFF 		bl	dn_lt
 2036              	.LVL211:
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2037              		.loc 1 1665 5 view .LVU639
 2038 0128 78B9     		cbnz	r0, .L211
1666:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2039              		.loc 1 1666 4 is_stmt 1 view .LVU640
 2040              	.LVL212:
 2041              	.LBB262:
 2042              	.LBI262:
 329:src/display.c ****   if (res) *res++ = ch;
 2043              		.loc 1 329 14 view .LVU641
 2044              	.LBB263:
 330:src/display.c ****   else	set_dig(base, ch);
 2045              		.loc 1 330 3 view .LVU642
 330:src/display.c ****   else	set_dig(base, ch);
 2046              		.loc 1 330 12 view .LVU643
 330:src/display.c ****   else	set_dig(base, ch);
 2047              		.loc 1 330 19 is_stmt 0 view .LVU644
 2048 012a 6F23     		movs	r3, #111
 2049 012c 6370     		strb	r3, [r4, #1]
 2050              	.LBE263:
 2051              	.LBE262:
1672:src/display.c **** 
 2052              		.loc 1 1672 7 view .LVU645
 2053 012e 35B0     		add	sp, sp, #212
 2054              		.cfi_remember_state
 2055              		.cfi_def_cfa_offset 12
 2056              		@ sp needed
 2057 0130 30BD     		pop	{r4, r5, pc}
 2058              	.LVL213:
 2059              	.L210:
 2060              		.cfi_restore_state
1625:src/display.c **** 	    *res++ += '-';
 2061              		.loc 1 1625 4 is_stmt 1 view .LVU646
1625:src/display.c **** 	    *res++ += '-';
 2062              		.loc 1 1625 7 is_stmt 0 view .LVU647
 2063 0132 15B3     		cbz	r5, .L183
1626:src/display.c **** 	  else
 2064              		.loc 1 1626 6 is_stmt 1 view .LVU648
1626:src/display.c **** 	  else
 2065              		.loc 1 1626 10 is_stmt 0 view .LVU649
 2066 0134 2B46     		mov	r3, r5
ARM GAS  /tmp/ccDDbRKQ.s 			page 107


 2067              	.LVL214:
1626:src/display.c **** 	  else
 2068              		.loc 1 1626 13 view .LVU650
 2069 0136 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2070              	.LVL215:
1626:src/display.c **** 	  else
 2071              		.loc 1 1626 13 view .LVU651
 2072 013a 2D32     		adds	r2, r2, #45
 2073 013c 2A70     		strb	r2, [r5]
1626:src/display.c **** 	  else
 2074              		.loc 1 1626 10 view .LVU652
 2075 013e 1D46     		mov	r5, r3
 2076              	.LVL216:
 2077              	.L184:
1629:src/display.c **** 	}
 2078              		.loc 1 1629 4 is_stmt 1 view .LVU653
 2079 0140 07A9     		add	r1, sp, #28
 2080 0142 0846     		mov	r0, r1
 2081 0144 FFF7FEFF 		bl	dn_minus
 2082              	.LVL217:
 2083 0148 7DE7     		b	.L182
 2084              	.LVL218:
 2085              	.L211:
 2086              	.LBB264:
 2087              	.LBB260:
 330:src/display.c ****   else	set_dig(base, ch);
 2088              		.loc 1 330 16 is_stmt 0 view .LVU654
 2089 014a 0134     		adds	r4, r4, #1
 2090              	.LVL219:
 2091              	.L198:
 330:src/display.c ****   else	set_dig(base, ch);
 2092              		.loc 1 330 16 view .LVU655
 2093              	.LBE260:
 2094              	.LBE264:
1667:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2095              		.loc 1 1667 9 is_stmt 1 view .LVU656
1667:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2096              		.loc 1 1667 15 is_stmt 0 view .LVU657
 2097 014c 19A8     		add	r0, sp, #100
 2098 014e FFF7FEFF 		bl	dn_eq0
 2099              	.LVL220:
1667:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2100              		.loc 1 1667 12 view .LVU658
 2101 0152 0028     		cmp	r0, #0
 2102 0154 7FF466AF 		bne	.L177
1668:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2103              		.loc 1 1668 4 is_stmt 1 view .LVU659
1668:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2104              		.loc 1 1668 8 is_stmt 0 view .LVU660
 2105 0158 1C48     		ldr	r0, .L212+8
 2106 015a 19A9     		add	r1, sp, #100
 2107 015c FFF7FEFF 		bl	dn_lt
 2108              	.LVL221:
1668:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2109              		.loc 1 1668 7 view .LVU661
 2110 0160 0028     		cmp	r0, #0
 2111 0162 7FF45FAF 		bne	.L177
ARM GAS  /tmp/ccDDbRKQ.s 			page 108


1669:src/display.c **** 	  }
 2112              		.loc 1 1669 6 is_stmt 1 view .LVU662
 2113              	.LVL222:
 2114              	.LBB265:
 2115              	.LBI265:
 329:src/display.c ****   if (res) *res++ = ch;
 2116              		.loc 1 329 14 view .LVU663
 2117              	.LBB266:
 330:src/display.c ****   else	set_dig(base, ch);
 2118              		.loc 1 330 3 view .LVU664
 330:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 330 6 is_stmt 0 view .LVU665
 2120 0166 3CB3     		cbz	r4, .L200
 330:src/display.c ****   else	set_dig(base, ch);
 2121              		.loc 1 330 12 is_stmt 1 view .LVU666
 2122              	.LVL223:
 330:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 330 19 is_stmt 0 view .LVU667
 2124 0168 7523     		movs	r3, #117
 2125 016a 2370     		strb	r3, [r4]
 2126 016c 5AE7     		b	.L177
 2127              	.LVL224:
 2128              	.L192:
 330:src/display.c ****   else	set_dig(base, ch);
 2129              		.loc 1 330 19 view .LVU668
 2130              	.LBE266:
 2131              	.LBE265:
1655:src/display.c **** 
 2132              		.loc 1 1655 8 view .LVU669
 2133 016e 0398     		ldr	r0, [sp, #12]
 2134              	.LVL225:
 2135              	.LBB268:
 2136              	.LBB257:
1655:src/display.c **** 
 2137              		.loc 1 1655 8 view .LVU670
 2138 0170 0938     		subs	r0, r0, #9
 2139 0172 FFF7FEFF 		bl	set_decimal.part.0
 2140              	.LVL226:
1655:src/display.c **** 
 2141              		.loc 1 1655 8 view .LVU671
 2142 0176 0146     		mov	r1, r0
 2143 0178 C7E7     		b	.L194
 2144              	.LVL227:
 2145              	.L183:
1655:src/display.c **** 
 2146              		.loc 1 1655 8 view .LVU672
 2147              	.LBE257:
 2148              	.LBE268:
1628:src/display.c **** 	  dn_minus(&x, &x);
 2149              		.loc 1 1628 6 is_stmt 1 view .LVU673
 2150              	.LBB269:
 2151              	.LBI269:
 234:src/display.c **** {
 2152              		.loc 1 234 13 view .LVU674
 2153              	.LBB270:
 236:src/display.c **** }
 2154              		.loc 1 236 3 view .LVU675
ARM GAS  /tmp/ccDDbRKQ.s 			page 109


 2155 017a 8120     		movs	r0, #129
 2156 017c FFF7FEFF 		bl	set_dot
 2157              	.LVL228:
 237:src/display.c **** 
 2158              		.loc 1 237 1 is_stmt 0 view .LVU676
 2159 0180 DEE7     		b	.L184
 2160              	.LVL229:
 2161              	.L195:
 237:src/display.c **** 
 2162              		.loc 1 237 1 view .LVU677
 2163              	.LBE270:
 2164              	.LBE269:
 2165              	.LBB271:
 2166              	.LBB261:
 331:src/display.c ****   return res;
 2167              		.loc 1 331 8 is_stmt 1 view .LVU678
 2168 0182 0398     		ldr	r0, [sp, #12]
 2169              	.LVL230:
 331:src/display.c ****   return res;
 2170              		.loc 1 331 8 is_stmt 0 view .LVU679
 2171 0184 2221     		movs	r1, #34
 2172 0186 FFF7FEFF 		bl	set_dig
 2173              	.LVL231:
 332:src/display.c **** }
 2174              		.loc 1 332 3 is_stmt 1 view .LVU680
 332:src/display.c **** }
 2175              		.loc 1 332 3 is_stmt 0 view .LVU681
 2176              	.LBE261:
 2177              	.LBE271:
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2178              		.loc 1 1665 2 is_stmt 1 view .LVU682
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2179              		.loc 1 1665 6 is_stmt 0 view .LVU683
 2180 018a 0E49     		ldr	r1, .L212
 2181 018c 19A8     		add	r0, sp, #100
 2182 018e FFF7FEFF 		bl	dn_lt
 2183              	.LVL232:
1665:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2184              		.loc 1 1665 5 view .LVU684
 2185 0192 0028     		cmp	r0, #0
 2186 0194 DAD1     		bne	.L198
 2187              	.LVL233:
 2188              	.L181:
 2189              	.LBB272:
 2190              	.LBB248:
 331:src/display.c ****   return res;
 2191              		.loc 1 331 8 is_stmt 1 view .LVU685
 2192 0196 6F21     		movs	r1, #111
 2193 0198 7A20     		movs	r0, #122
 2194 019a FFF7FEFF 		bl	set_dig
 2195              	.LVL234:
 2196              	.LBE248:
 2197              	.LBE272:
1618:src/display.c **** 	}
 2198              		.loc 1 1618 4 view .LVU686
 2199 019e 41E7     		b	.L177
 2200              	.LVL235:
ARM GAS  /tmp/ccDDbRKQ.s 			page 110


 2201              	.L190:
 2202              	.LBB273:
 2203              	.LBB254:
 331:src/display.c ****   return res;
 2204              		.loc 1 331 8 view .LVU687
 2205 01a0 2721     		movs	r1, #39
 2206 01a2 0398     		ldr	r0, [sp, #12]
 2207              	.LVL236:
 331:src/display.c ****   return res;
 2208              		.loc 1 331 8 is_stmt 0 view .LVU688
 2209 01a4 FFF7FEFF 		bl	set_dig
 2210              	.LVL237:
 331:src/display.c ****   return res;
 2211              		.loc 1 331 8 view .LVU689
 2212 01a8 2146     		mov	r1, r4
 2213 01aa 98E7     		b	.L191
 2214              	.LVL238:
 2215              	.L188:
 331:src/display.c ****   return res;
 2216              		.loc 1 331 8 view .LVU690
 2217              	.LBE254:
 2218              	.LBE273:
 2219              	.LBB274:
 2220              	.LBB251:
 331:src/display.c ****   return res;
 2221              		.loc 1 331 8 is_stmt 1 view .LVU691
 2222 01ac 4021     		movs	r1, #64
 2223 01ae 0398     		ldr	r0, [sp, #12]
 2224              	.LVL239:
 331:src/display.c ****   return res;
 2225              		.loc 1 331 8 is_stmt 0 view .LVU692
 2226 01b0 FFF7FEFF 		bl	set_dig
 2227              	.LVL240:
 331:src/display.c ****   return res;
 2228              		.loc 1 331 8 view .LVU693
 2229 01b4 2146     		mov	r1, r4
 2230 01b6 80E7     		b	.L189
 2231              	.LVL241:
 2232              	.L200:
 331:src/display.c ****   return res;
 2233              		.loc 1 331 8 view .LVU694
 2234              	.LBE251:
 2235              	.LBE274:
 2236              	.LBB275:
 2237              	.LBB267:
 331:src/display.c ****   return res;
 2238              		.loc 1 331 8 is_stmt 1 view .LVU695
 2239 01b8 7521     		movs	r1, #117
 2240 01ba 7A20     		movs	r0, #122
 2241 01bc FFF7FEFF 		bl	set_dig
 2242              	.LVL242:
 2243 01c0 30E7     		b	.L177
 2244              	.L213:
 2245 01c2 00BF     		.align	2
 2246              	.L212:
 2247 01c4 00000000 		.word	const_9000
 2248 01c8 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccDDbRKQ.s 			page 111


 2249 01cc 00000000 		.word	const_hms_threshold
 2250              	.LBE267:
 2251              	.LBE275:
 2252              		.cfi_endproc
 2253              	.LFE22:
 2255              		.section	.text.set_x_fract,"ax",%progbits
 2256              		.align	1
 2257              		.p2align 2,,3
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu fpv4-sp-d16
 2263              	set_x_fract:
 2264              	.LVL243:
 2265              	.LFB23:
1675:src/display.c **** 	decNumber x, w, n, d, t;
 2266              		.loc 1 1675 63 view -0
 2267              		.cfi_startproc
 2268              		@ args = 0, pretend = 0, frame = 216
 2269              		@ frame_needed = 0, uses_anonymous_args = 0
1676:src/display.c **** 	char buf[32], *p = buf;
 2270              		.loc 1 1676 2 view .LVU697
1677:src/display.c **** 	int j;
 2271              		.loc 1 1677 2 view .LVU698
1678:src/display.c **** 
 2272              		.loc 1 1678 2 view .LVU699
1680:src/display.c **** 	  return 1;
 2273              		.loc 1 1680 2 view .LVU700
1675:src/display.c **** 	decNumber x, w, n, d, t;
 2274              		.loc 1 1675 63 is_stmt 0 view .LVU701
 2275 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2276              		.cfi_def_cfa_offset 20
 2277              		.cfi_offset 4, -20
 2278              		.cfi_offset 5, -16
 2279              		.cfi_offset 6, -12
 2280              		.cfi_offset 7, -8
 2281              		.cfi_offset 14, -4
 2282 0002 0646     		mov	r6, r0
 2283 0004 B7B0     		sub	sp, sp, #220
 2284              		.cfi_def_cfa_offset 240
1680:src/display.c **** 	  return 1;
 2285              		.loc 1 1680 6 view .LVU702
 2286 0006 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 2287              	.LVL244:
1675:src/display.c **** 	decNumber x, w, n, d, t;
 2288              		.loc 1 1675 63 view .LVU703
 2289 0008 0C46     		mov	r4, r1
1680:src/display.c **** 	  return 1;
 2290              		.loc 1 1680 6 view .LVU704
 2291 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2292              	.LVL245:
1680:src/display.c **** 	  return 1;
 2293              		.loc 1 1680 5 view .LVU705
 2294 000e 18B1     		cbz	r0, .L245
 2295              	.LVL246:
 2296              	.L234:
1681:src/display.c **** 	dn_abs(&x, rgx);
ARM GAS  /tmp/ccDDbRKQ.s 			page 112


 2297              		.loc 1 1681 11 view .LVU706
 2298 0010 0125     		movs	r5, #1
 2299              	.L214:
1738:src/display.c **** 
 2300              		.loc 1 1738 7 view .LVU707
 2301 0012 2846     		mov	r0, r5
 2302 0014 37B0     		add	sp, sp, #220
 2303              		.cfi_remember_state
 2304              		.cfi_def_cfa_offset 20
 2305              		@ sp needed
 2306 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2307              	.LVL247:
 2308              	.L245:
 2309              		.cfi_restore_state
 2310              	.LBB284:
 2311              	.LBI284:
1675:src/display.c **** 	decNumber x, w, n, d, t;
 2312              		.loc 1 1675 18 is_stmt 1 view .LVU708
 2313              	.LBB285:
1682:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2314              		.loc 1 1682 2 view .LVU709
 2315 0018 3146     		mov	r1, r6
 2316 001a 0546     		mov	r5, r0
 2317 001c 09A8     		add	r0, sp, #36
 2318 001e FFF7FEFF 		bl	dn_abs
 2319              	.LVL248:
1683:src/display.c **** 	  return 0;
 2320              		.loc 1 1683 2 view .LVU710
1683:src/display.c **** 	  return 0;
 2321              		.loc 1 1683 6 is_stmt 0 view .LVU711
 2322 0022 5C49     		ldr	r1, .L250
 2323 0024 09A8     		add	r0, sp, #36
 2324 0026 FFF7FEFF 		bl	dn_lt
 2325              	.LVL249:
1683:src/display.c **** 	  return 0;
 2326              		.loc 1 1683 5 view .LVU712
 2327 002a 0028     		cmp	r0, #0
 2328 002c F1D0     		beq	.L214
1685:src/display.c **** 	  return 0;
 2329              		.loc 1 1685 2 is_stmt 1 view .LVU713
1685:src/display.c **** 	  return 0;
 2330              		.loc 1 1685 6 is_stmt 0 view .LVU714
 2331 002e 5A49     		ldr	r1, .L250+4
 2332 0030 09A8     		add	r0, sp, #36
 2333 0032 FFF7FEFF 		bl	dn_lt
 2334              	.LVL250:
1685:src/display.c **** 	  return 0;
 2335              		.loc 1 1685 5 view .LVU715
 2336 0036 0746     		mov	r7, r0
 2337 0038 0028     		cmp	r0, #0
 2338 003a EAD1     		bne	.L214
1687:src/display.c **** 	  if (res != NULL)
 2339              		.loc 1 1687 2 is_stmt 1 view .LVU716
1687:src/display.c **** 	  if (res != NULL)
 2340              		.loc 1 1687 5 is_stmt 0 view .LVU717
 2341 003c 96F90830 		ldrsb	r3, [r6, #8]
 2342 0040 002B     		cmp	r3, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 113


 2343 0042 C0F28680 		blt	.L246
 2344              	.LVL251:
 2345              	.L219:
1693:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2346              		.loc 1 1693 2 is_stmt 1 view .LVU718
 2347 0046 09A9     		add	r1, sp, #36
 2348 0048 12A8     		add	r0, sp, #72
 2349 004a FFF7FEFF 		bl	decNumberFrac
 2350              	.LVL252:
1694:src/display.c **** 
 2351              		.loc 1 1694 2 view .LVU719
 2352 004e 12AA     		add	r2, sp, #72
 2353 0050 24A9     		add	r1, sp, #144
 2354 0052 1BA8     		add	r0, sp, #108
 2355 0054 FFF7FEFF 		bl	decNumber2Fraction
 2356              	.LVL253:
1696:src/display.c **** 	dn_compare(&t, &t, &w);
 2357              		.loc 1 1696 2 view .LVU720
 2358 0058 24AA     		add	r2, sp, #144
 2359 005a 1BA9     		add	r1, sp, #108
 2360 005c 2DA8     		add	r0, sp, #180
 2361 005e FFF7FEFF 		bl	dn_divide
 2362              	.LVL254:
1697:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2363              		.loc 1 1697 2 view .LVU721
 2364 0062 2DA9     		add	r1, sp, #180
 2365 0064 12AA     		add	r2, sp, #72
 2366 0066 0846     		mov	r0, r1
 2367 0068 FFF7FEFF 		bl	dn_compare
 2368              	.LVL255:
1698:src/display.c **** 
 2369              		.loc 1 1698 2 view .LVU722
 2370 006c 09A9     		add	r1, sp, #36
 2371 006e 12A8     		add	r0, sp, #72
 2372 0070 FFF7FEFF 		bl	decNumberTrunc
 2373              	.LVL256:
1700:src/display.c **** 	  dn_inc(&w);
 2374              		.loc 1 1700 2 view .LVU723
1700:src/display.c **** 	  dn_inc(&w);
 2375              		.loc 1 1700 6 is_stmt 0 view .LVU724
 2376 0074 24A9     		add	r1, sp, #144
 2377 0076 1BA8     		add	r0, sp, #108
 2378 0078 FFF7FEFF 		bl	dn_eq
 2379              	.LVL257:
1700:src/display.c **** 	  dn_inc(&w);
 2380              		.loc 1 1700 5 view .LVU725
 2381 007c 0028     		cmp	r0, #0
 2382 007e 70D1     		bne	.L247
 2383              	.L221:
1705:src/display.c **** 	  if (!dn_eq0(&w)) {
 2384              		.loc 1 1705 2 is_stmt 1 view .LVU726
1705:src/display.c **** 	  if (!dn_eq0(&w)) {
 2385              		.loc 1 1705 6 is_stmt 0 view .LVU727
 2386 0080 464B     		ldr	r3, .L250+8
 2387 0082 1B68     		ldr	r3, [r3]
 2388 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1705:src/display.c **** 	  if (!dn_eq0(&w)) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 114


 2389              		.loc 1 1705 5 view .LVU728
 2390 0088 DB06     		lsls	r3, r3, #27
 2391 008a 55D4     		bmi	.L222
1706:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2392              		.loc 1 1706 4 is_stmt 1 view .LVU729
1706:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2393              		.loc 1 1706 9 is_stmt 0 view .LVU730
 2394 008c 12A8     		add	r0, sp, #72
 2395 008e FFF7FEFF 		bl	dn_eq0
 2396              	.LVL258:
1706:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2397              		.loc 1 1706 7 view .LVU731
 2398 0092 0028     		cmp	r0, #0
 2399 0094 6CD0     		beq	.L248
1677:src/display.c **** 	int j;
 2400              		.loc 1 1677 17 view .LVU732
 2401 0096 01AE     		add	r6, sp, #4
 2402              	.LVL259:
1677:src/display.c **** 	int j;
 2403              		.loc 1 1677 17 view .LVU733
 2404 0098 3546     		mov	r5, r6
 2405              	.L223:
 2406              	.LVL260:
1714:src/display.c **** 	*p++ = '/';
 2407              		.loc 1 1714 2 is_stmt 1 view .LVU734
1714:src/display.c **** 	*p++ = '/';
 2408              		.loc 1 1714 17 is_stmt 0 view .LVU735
 2409 009a 1BA8     		add	r0, sp, #108
 2410 009c FFF7FEFF 		bl	dn_to_int
 2411              	.LVL261:
 2412 00a0 0146     		mov	r1, r0
1714:src/display.c **** 	*p++ = '/';
 2413              		.loc 1 1714 6 view .LVU736
 2414 00a2 2846     		mov	r0, r5
 2415 00a4 FFF7FEFF 		bl	num_arg
 2416              	.LVL262:
1715:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2417              		.loc 1 1715 2 is_stmt 1 view .LVU737
1715:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2418              		.loc 1 1715 4 is_stmt 0 view .LVU738
 2419 00a8 0546     		mov	r5, r0
 2420              	.LVL263:
1715:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2421              		.loc 1 1715 7 view .LVU739
 2422 00aa 2F23     		movs	r3, #47
 2423 00ac 05F8013B 		strb	r3, [r5], #1
 2424              	.LVL264:
1716:src/display.c **** 	*p = '\0';
 2425              		.loc 1 1716 2 is_stmt 1 view .LVU740
1716:src/display.c **** 	*p = '\0';
 2426              		.loc 1 1716 17 is_stmt 0 view .LVU741
 2427 00b0 24A8     		add	r0, sp, #144
 2428 00b2 FFF7FEFF 		bl	dn_to_int
 2429              	.LVL265:
 2430 00b6 0146     		mov	r1, r0
1716:src/display.c **** 	*p = '\0';
 2431              		.loc 1 1716 6 view .LVU742
ARM GAS  /tmp/ccDDbRKQ.s 			page 115


 2432 00b8 2846     		mov	r0, r5
 2433 00ba FFF7FEFF 		bl	num_arg
 2434              	.LVL266:
1717:src/display.c **** 	if ((p - 12) > buf) {
 2435              		.loc 1 1717 2 is_stmt 1 view .LVU743
1717:src/display.c **** 	if ((p - 12) > buf) {
 2436              		.loc 1 1717 5 is_stmt 0 view .LVU744
 2437 00be 0546     		mov	r5, r0
 2438 00c0 0023     		movs	r3, #0
 2439 00c2 05F80C39 		strb	r3, [r5], #-12
1718:src/display.c **** 	  p -= 12;
 2440              		.loc 1 1718 2 is_stmt 1 view .LVU745
1718:src/display.c **** 	  p -= 12;
 2441              		.loc 1 1718 5 is_stmt 0 view .LVU746
 2442 00c6 B542     		cmp	r5, r6
 2443 00c8 32D8     		bhi	.L224
 2444 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2445              	.LVL267:
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2446              		.loc 1 1722 12 is_stmt 1 view .LVU747
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2447              		.loc 1 1722 2 is_stmt 0 view .LVU748
 2448 00ce 51B1     		cbz	r1, .L226
1721:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2449              		.loc 1 1721 11 view .LVU749
 2450 00d0 3546     		mov	r5, r6
 2451              	.LVL268:
 2452              	.L229:
1723:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2453              		.loc 1 1723 4 is_stmt 1 view .LVU750
 2454              	.LBB286:
 2455              	.LBI286:
 329:src/display.c ****   if (res) *res++ = ch;
 2456              		.loc 1 329 14 view .LVU751
 2457              	.LBB287:
 330:src/display.c ****   else	set_dig(base, ch);
 2458              		.loc 1 330 3 view .LVU752
 330:src/display.c ****   else	set_dig(base, ch);
 2459              		.loc 1 330 12 view .LVU753
 330:src/display.c ****   else	set_dig(base, ch);
 2460              		.loc 1 330 16 is_stmt 0 view .LVU754
 2461 00d2 2346     		mov	r3, r4
 2462              	.LVL269:
 330:src/display.c ****   else	set_dig(base, ch);
 2463              		.loc 1 330 6 view .LVU755
 2464 00d4 34B3     		cbz	r4, .L227
 2465              	.LVL270:
 330:src/display.c ****   else	set_dig(base, ch);
 2466              		.loc 1 330 19 view .LVU756
 2467 00d6 03F8011B 		strb	r1, [r3], #1
 2468              	.LVL271:
 330:src/display.c ****   else	set_dig(base, ch);
 2469              		.loc 1 330 16 view .LVU757
 2470 00da 1C46     		mov	r4, r3
 2471              	.LVL272:
 2472              	.L228:
 332:src/display.c **** }
ARM GAS  /tmp/ccDDbRKQ.s 			page 116


 2473              		.loc 1 332 3 is_stmt 1 view .LVU758
 332:src/display.c **** }
 2474              		.loc 1 332 3 is_stmt 0 view .LVU759
 2475              	.LBE287:
 2476              	.LBE286:
1724:src/display.c **** 	}
 2477              		.loc 1 1724 4 is_stmt 1 view .LVU760
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2478              		.loc 1 1722 12 is_stmt 0 view .LVU761
 2479 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2480              	.LVL273:
1724:src/display.c **** 	}
 2481              		.loc 1 1724 6 view .LVU762
 2482 00e0 0937     		adds	r7, r7, #9
 2483              	.LVL274:
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2484              		.loc 1 1722 24 is_stmt 1 view .LVU763
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2485              		.loc 1 1722 12 view .LVU764
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2486              		.loc 1 1722 2 is_stmt 0 view .LVU765
 2487 00e2 0029     		cmp	r1, #0
 2488 00e4 F5D1     		bne	.L229
 2489              	.LVL275:
 2490              	.L226:
1727:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2491              		.loc 1 1727 2 is_stmt 1 view .LVU766
1727:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2492              		.loc 1 1727 6 is_stmt 0 view .LVU767
 2493 00e6 2DA8     		add	r0, sp, #180
 2494 00e8 FFF7FEFF 		bl	dn_eq0
 2495              	.LVL276:
1727:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2496              		.loc 1 1727 5 view .LVU768
 2497 00ec F0B9     		cbnz	r0, .L237
1729:src/display.c **** 	  p = (char *)S7_fract_LT;
 2498              		.loc 1 1729 7 is_stmt 1 view .LVU769
1729:src/display.c **** 	  p = (char *)S7_fract_LT;
 2499              		.loc 1 1729 10 is_stmt 0 view .LVU770
 2500 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1732:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2501              		.loc 1 1732 6 view .LVU771
 2502 00f2 2B4D     		ldr	r5, .L250+12
 2503 00f4 2B4B     		ldr	r3, .L250+16
 2504 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2505 00fa 38BF     		it	cc
 2506 00fc 1D46     		movcc	r5, r3
 2507              	.L230:
 2508              	.LVL277:
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2509              		.loc 1 1733 26 is_stmt 1 view .LVU772
 2510              	.LBB290:
 2511              	.LBB288:
 330:src/display.c ****   else	set_dig(base, ch);
 2512              		.loc 1 330 16 is_stmt 0 view .LVU773
 2513 00fe 6C26     		movs	r6, #108
 2514 0100 2021     		movs	r1, #32
ARM GAS  /tmp/ccDDbRKQ.s 			page 117


 2515 0102 08E0     		b	.L233
 2516              	.LVL278:
 2517              	.L249:
 330:src/display.c ****   else	set_dig(base, ch);
 2518              		.loc 1 330 16 view .LVU774
 2519              	.LBE288:
 2520              	.LBE290:
 2521              	.LBB291:
 2522              	.LBB292:
 330:src/display.c ****   else	set_dig(base, ch);
 2523              		.loc 1 330 19 view .LVU775
 2524 0104 03F8011B 		strb	r1, [r3], #1
 2525              	.LVL279:
 330:src/display.c ****   else	set_dig(base, ch);
 2526              		.loc 1 330 16 view .LVU776
 2527 0108 1C46     		mov	r4, r3
 2528              	.LVL280:
 2529              	.L232:
 332:src/display.c **** }
 2530              		.loc 1 332 3 is_stmt 1 view .LVU777
 332:src/display.c **** }
 2531              		.loc 1 332 3 is_stmt 0 view .LVU778
 2532              	.LBE292:
 2533              	.LBE291:
1735:src/display.c **** 	}
 2534              		.loc 1 1735 4 is_stmt 1 view .LVU779
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2535              		.loc 1 1733 26 is_stmt 0 view .LVU780
 2536 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2537              	.LVL281:
1735:src/display.c **** 	}
 2538              		.loc 1 1735 6 view .LVU781
 2539 010e 0736     		adds	r6, r6, #7
 2540              	.LVL282:
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2541              		.loc 1 1733 38 is_stmt 1 view .LVU782
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2542              		.loc 1 1733 26 view .LVU783
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2543              		.loc 1 1733 2 is_stmt 0 view .LVU784
 2544 0110 0029     		cmp	r1, #0
 2545 0112 3FF47DAF 		beq	.L234
 2546              	.LVL283:
 2547              	.L233:
1734:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2548              		.loc 1 1734 4 is_stmt 1 view .LVU785
 2549              	.LBB294:
 2550              	.LBI291:
 329:src/display.c ****   if (res) *res++ = ch;
 2551              		.loc 1 329 14 view .LVU786
 2552              	.LBB293:
 330:src/display.c ****   else	set_dig(base, ch);
 2553              		.loc 1 330 3 view .LVU787
 330:src/display.c ****   else	set_dig(base, ch);
 2554              		.loc 1 330 12 view .LVU788
 330:src/display.c ****   else	set_dig(base, ch);
 2555              		.loc 1 330 16 is_stmt 0 view .LVU789
ARM GAS  /tmp/ccDDbRKQ.s 			page 118


 2556 0116 2346     		mov	r3, r4
 2557              	.LVL284:
 330:src/display.c ****   else	set_dig(base, ch);
 2558              		.loc 1 330 6 view .LVU790
 2559 0118 002C     		cmp	r4, #0
 2560 011a F3D1     		bne	.L249
 2561              	.LVL285:
 331:src/display.c ****   return res;
 2562              		.loc 1 331 8 is_stmt 1 view .LVU791
 2563 011c 3046     		mov	r0, r6
 2564 011e FFF7FEFF 		bl	set_dig
 2565              	.LVL286:
 331:src/display.c ****   return res;
 2566              		.loc 1 331 8 is_stmt 0 view .LVU792
 2567 0122 F2E7     		b	.L232
 2568              	.LVL287:
 2569              	.L227:
 331:src/display.c ****   return res;
 2570              		.loc 1 331 8 view .LVU793
 2571              	.LBE293:
 2572              	.LBE294:
 2573              	.LBB295:
 2574              	.LBB289:
 331:src/display.c ****   return res;
 2575              		.loc 1 331 8 is_stmt 1 view .LVU794
 2576 0124 3846     		mov	r0, r7
 2577 0126 FFF7FEFF 		bl	set_dig
 2578              	.LVL288:
 331:src/display.c ****   return res;
 2579              		.loc 1 331 8 is_stmt 0 view .LVU795
 2580 012a D7E7     		b	.L228
 2581              	.LVL289:
 2582              	.L237:
 331:src/display.c ****   return res;
 2583              		.loc 1 331 8 view .LVU796
 2584              	.LBE289:
 2585              	.LBE295:
1728:src/display.c **** 	else if (decNumberIsNegative(&t))
 2586              		.loc 1 1728 6 view .LVU797
 2587 012c 1E4D     		ldr	r5, .L250+20
 2588 012e E6E7     		b	.L230
 2589              	.LVL290:
 2590              	.L224:
1719:src/display.c **** 	  *p = '<';
 2591              		.loc 1 1719 4 is_stmt 1 view .LVU798
1720:src/display.c **** 	} else	p = buf;
 2592              		.loc 1 1720 4 view .LVU799
1720:src/display.c **** 	} else	p = buf;
 2593              		.loc 1 1720 7 is_stmt 0 view .LVU800
 2594 0130 3C21     		movs	r1, #60
 2595 0132 00F80C1C 		strb	r1, [r0, #-12]
 2596              	.LVL291:
1722:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2597              		.loc 1 1722 12 is_stmt 1 view .LVU801
 2598 0136 CCE7     		b	.L229
 2599              	.LVL292:
 2600              	.L222:
ARM GAS  /tmp/ccDDbRKQ.s 			page 119


1711:src/display.c **** 	  dn_add(&n, &n, &x);
 2601              		.loc 1 1711 4 view .LVU802
 2602 0138 12A9     		add	r1, sp, #72
 2603 013a 24AA     		add	r2, sp, #144
 2604 013c 09A8     		add	r0, sp, #36
 2605 013e FFF7FEFF 		bl	dn_multiply
 2606              	.LVL293:
1712:src/display.c **** 	}
 2607              		.loc 1 1712 4 view .LVU803
 2608 0142 1BA9     		add	r1, sp, #108
 2609 0144 09AA     		add	r2, sp, #36
 2610 0146 0846     		mov	r0, r1
1677:src/display.c **** 	int j;
 2611              		.loc 1 1677 17 is_stmt 0 view .LVU804
 2612 0148 01AE     		add	r6, sp, #4
 2613              	.LVL294:
1712:src/display.c **** 	}
 2614              		.loc 1 1712 4 view .LVU805
 2615 014a FFF7FEFF 		bl	dn_add
 2616              	.LVL295:
1677:src/display.c **** 	int j;
 2617              		.loc 1 1677 17 view .LVU806
 2618 014e 3546     		mov	r5, r6
 2619 0150 A3E7     		b	.L223
 2620              	.LVL296:
 2621              	.L246:
1688:src/display.c **** 	    *res++ += '-';
 2622              		.loc 1 1688 4 is_stmt 1 view .LVU807
1688:src/display.c **** 	    *res++ += '-';
 2623              		.loc 1 1688 7 is_stmt 0 view .LVU808
 2624 0152 D4B1     		cbz	r4, .L220
1689:src/display.c **** 	  else
 2625              		.loc 1 1689 6 is_stmt 1 view .LVU809
1689:src/display.c **** 	  else
 2626              		.loc 1 1689 10 is_stmt 0 view .LVU810
 2627 0154 2346     		mov	r3, r4
 2628              	.LVL297:
1689:src/display.c **** 	  else
 2629              		.loc 1 1689 13 view .LVU811
 2630 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2631              	.LVL298:
1689:src/display.c **** 	  else
 2632              		.loc 1 1689 13 view .LVU812
 2633 015a 2D32     		adds	r2, r2, #45
 2634 015c 2270     		strb	r2, [r4]
1689:src/display.c **** 	  else
 2635              		.loc 1 1689 10 view .LVU813
 2636 015e 1C46     		mov	r4, r3
 2637              	.LVL299:
1689:src/display.c **** 	  else
 2638              		.loc 1 1689 10 view .LVU814
 2639 0160 71E7     		b	.L219
 2640              	.LVL300:
 2641              	.L247:
1701:src/display.c **** 	  decNumberZero(&n);
 2642              		.loc 1 1701 4 is_stmt 1 view .LVU815
 2643 0162 12A8     		add	r0, sp, #72
ARM GAS  /tmp/ccDDbRKQ.s 			page 120


 2644 0164 FFF7FEFF 		bl	dn_inc
 2645              	.LVL301:
1702:src/display.c **** 	}
 2646              		.loc 1 1702 4 view .LVU816
 2647 0168 1BA8     		add	r0, sp, #108
 2648 016a FFF7FEFF 		bl	decNumberZero
 2649              	.LVL302:
 2650 016e 87E7     		b	.L221
 2651              	.L248:
1707:src/display.c **** 	    *p++ = ' ';
 2652              		.loc 1 1707 6 view .LVU817
1707:src/display.c **** 	    *p++ = ' ';
 2653              		.loc 1 1707 21 is_stmt 0 view .LVU818
 2654 0170 12A8     		add	r0, sp, #72
 2655 0172 FFF7FEFF 		bl	dn_to_int
 2656              	.LVL303:
1707:src/display.c **** 	    *p++ = ' ';
 2657              		.loc 1 1707 10 view .LVU819
 2658 0176 01AE     		add	r6, sp, #4
 2659              	.LVL304:
1707:src/display.c **** 	    *p++ = ' ';
 2660              		.loc 1 1707 21 view .LVU820
 2661 0178 0146     		mov	r1, r0
1707:src/display.c **** 	    *p++ = ' ';
 2662              		.loc 1 1707 10 view .LVU821
 2663 017a 3046     		mov	r0, r6
 2664 017c FFF7FEFF 		bl	num_arg
 2665              	.LVL305:
1708:src/display.c **** 	  }
 2666              		.loc 1 1708 6 is_stmt 1 view .LVU822
1708:src/display.c **** 	  }
 2667              		.loc 1 1708 8 is_stmt 0 view .LVU823
 2668 0180 0546     		mov	r5, r0
 2669              	.LVL306:
1708:src/display.c **** 	  }
 2670              		.loc 1 1708 11 view .LVU824
 2671 0182 2023     		movs	r3, #32
 2672 0184 05F8013B 		strb	r3, [r5], #1
 2673              	.LVL307:
1708:src/display.c **** 	  }
 2674              		.loc 1 1708 11 view .LVU825
 2675 0188 87E7     		b	.L223
 2676              	.LVL308:
 2677              	.L220:
1691:src/display.c **** 	}
 2678              		.loc 1 1691 6 is_stmt 1 view .LVU826
 2679              	.LBB296:
 2680              	.LBI296:
 234:src/display.c **** {
 2681              		.loc 1 234 13 view .LVU827
 2682              	.LBB297:
 236:src/display.c **** }
 2683              		.loc 1 236 3 view .LVU828
 2684 018a 8120     		movs	r0, #129
 2685 018c FFF7FEFF 		bl	set_dot
 2686              	.LVL309:
 237:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 121


 2687              		.loc 1 237 1 is_stmt 0 view .LVU829
 2688 0190 59E7     		b	.L219
 2689              	.L251:
 2690 0192 00BF     		.align	2
 2691              	.L250:
 2692 0194 00000000 		.word	const_100000
 2693 0198 00000000 		.word	const_0_0001
 2694 019c 00000000 		.word	main_ram
 2695 01a0 00000000 		.word	.LANCHOR5
 2696 01a4 00000000 		.word	.LANCHOR7
 2697 01a8 00000000 		.word	.LANCHOR6
 2698              	.LBE297:
 2699              	.LBE296:
 2700              	.LBE285:
 2701              	.LBE284:
 2702              		.cfi_endproc
 2703              	.LFE23:
 2705              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2706              		.align	2
 2707              	.LC1:
 2708 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2708      36376F39 
 2708      44313233 
 2708      34356800 
 2709              		.section	.text.carry_overflow,"ax",%progbits
 2710              		.align	1
 2711              		.p2align 2,,3
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu fpv4-sp-d16
 2717              	carry_overflow:
 2718              	.LFB15:
 484:src/display.c ****       const int base = SEGS_EXP_BASE;
 2719              		.loc 1 484 38 is_stmt 1 view -0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 0
 2722              		@ frame_needed = 0, uses_anonymous_args = 0
 485:src/display.c ****       int c;
 2723              		.loc 1 485 7 view .LVU831
 2724              	.LVL310:
 486:src/display.c ****       unsigned int b;
 2725              		.loc 1 486 7 view .LVU832
 487:src/display.c **** 
 2726              		.loc 1 487 7 view .LVU833
 490:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2727              		.loc 1 490 7 view .LVU834
 484:src/display.c ****       const int base = SEGS_EXP_BASE;
 2728              		.loc 1 484 38 is_stmt 0 view .LVU835
 2729 0000 10B5     		push	{r4, lr}
 2730              		.cfi_def_cfa_offset 8
 2731              		.cfi_offset 4, -8
 2732              		.cfi_offset 14, -4
 490:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2733              		.loc 1 490 21 view .LVU836
 2734 0002 1A4B     		ldr	r3, .L265
 2735 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
ARM GAS  /tmp/ccDDbRKQ.s 			page 122


 2736 0006 023B     		subs	r3, r3, #2
 2737 0008 DBB2     		uxtb	r3, r3
 2738 000a 032B     		cmp	r3, #3
 2739 000c 14D8     		bhi	.L253
 2740 000e 184A     		ldr	r2, .L265+4
 2741 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2742              	.LVL311:
 499:src/display.c **** 	SET_EXP_SIGN;
 2743              		.loc 1 499 7 is_stmt 1 view .LVU837
 499:src/display.c **** 	SET_EXP_SIGN;
 2744              		.loc 1 499 18 is_stmt 0 view .LVU838
 2745 0014 A4F10B03 		sub	r3, r4, #11
 499:src/display.c **** 	SET_EXP_SIGN;
 2746              		.loc 1 499 10 view .LVU839
 2747 0018 042B     		cmp	r3, #4
 2748 001a 17D9     		bls	.L262
 2749              	.L255:
 501:src/display.c ****       set_dig(base, c);
 2750              		.loc 1 501 7 is_stmt 1 view .LVU840
 2751              	.LVL312:
 502:src/display.c **** 
 2752              		.loc 1 502 7 view .LVU841
 501:src/display.c ****       set_dig(base, c);
 2753              		.loc 1 501 28 is_stmt 0 view .LVU842
 2754 001c 154B     		ldr	r3, .L265+8
 2755 001e 1C44     		add	r4, r4, r3
 2756              	.LVL313:
 502:src/display.c **** 
 2757              		.loc 1 502 7 view .LVU843
 2758 0020 6C20     		movs	r0, #108
 2759 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2760 0026 FFF7FEFF 		bl	set_dig
 2761              	.LVL314:
 505:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2762              		.loc 1 505 7 is_stmt 1 view .LVU844
 505:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2763              		.loc 1 505 11 is_stmt 0 view .LVU845
 2764 002a FFF7FEFF 		bl	get_carry
 2765              	.LVL315:
 505:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2766              		.loc 1 505 10 view .LVU846
 2767 002e B8B9     		cbnz	r0, .L263
 2768              	.L256:
 507:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2769              		.loc 1 507 7 is_stmt 1 view .LVU847
 507:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2770              		.loc 1 507 11 is_stmt 0 view .LVU848
 2771 0030 FFF7FEFF 		bl	get_overflow
 2772              	.LVL316:
 507:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2773              		.loc 1 507 10 view .LVU849
 2774 0034 70B9     		cbnz	r0, .L264
 509:src/display.c **** 
 2775              		.loc 1 509 5 view .LVU850
 2776 0036 10BD     		pop	{r4, pc}
 2777              	.LVL317:
 2778              	.L253:
ARM GAS  /tmp/ccDDbRKQ.s 			page 123


 495:src/display.c ****       }
 2779              		.loc 1 495 16 is_stmt 1 view .LVU851
 495:src/display.c ****       }
 2780              		.loc 1 495 26 is_stmt 0 view .LVU852
 2781 0038 0F4B     		ldr	r3, .L265+12
 2782 003a 1B68     		ldr	r3, [r3]
 2783 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2784 0040 2409     		lsrs	r4, r4, #4
 495:src/display.c ****       }
 2785              		.loc 1 495 35 view .LVU853
 2786 0042 0134     		adds	r4, r4, #1
 2787              	.LVL318:
 495:src/display.c ****       }
 2788              		.loc 1 495 39 is_stmt 1 view .LVU854
 499:src/display.c **** 	SET_EXP_SIGN;
 2789              		.loc 1 499 7 view .LVU855
 499:src/display.c **** 	SET_EXP_SIGN;
 2790              		.loc 1 499 18 is_stmt 0 view .LVU856
 2791 0044 A4F10B03 		sub	r3, r4, #11
 499:src/display.c **** 	SET_EXP_SIGN;
 2792              		.loc 1 499 10 view .LVU857
 2793 0048 042B     		cmp	r3, #4
 2794 004a E7D8     		bhi	.L255
 2795              	.L262:
 500:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2796              		.loc 1 500 2 is_stmt 1 view .LVU858
 2797              	.LBB304:
 2798              	.LBI304:
 244:src/display.c **** {
 2799              		.loc 1 244 13 view .LVU859
 2800              	.LBB305:
 246:src/display.c **** }
 2801              		.loc 1 246 3 view .LVU860
 2802 004c 8220     		movs	r0, #130
 2803 004e FFF7FEFF 		bl	set_dot
 2804              	.LVL319:
 247:src/display.c **** 
 2805              		.loc 1 247 1 is_stmt 0 view .LVU861
 2806 0052 E3E7     		b	.L255
 2807              	.LVL320:
 2808              	.L264:
 247:src/display.c **** 
 2809              		.loc 1 247 1 view .LVU862
 2810              	.LBE305:
 2811              	.LBE304:
 2812              	.LBB306:
 2813              	.LBI306:
 484:src/display.c ****       const int base = SEGS_EXP_BASE;
 2814              		.loc 1 484 17 is_stmt 1 view .LVU863
 2815              	.LBB307:
 508:src/display.c ****     }
 2816              		.loc 1 508 2 view .LVU864
 2817              	.LBE307:
 2818              	.LBE306:
 509:src/display.c **** 
 2819              		.loc 1 509 5 is_stmt 0 view .LVU865
 2820 0054 BDE81040 		pop	{r4, lr}
ARM GAS  /tmp/ccDDbRKQ.s 			page 124


 2821              		.cfi_remember_state
 2822              		.cfi_restore 14
 2823              		.cfi_restore 4
 2824              		.cfi_def_cfa_offset 0
 2825              	.LVL321:
 2826              	.LBB309:
 2827              	.LBB308:
 508:src/display.c ****     }
 2828              		.loc 1 508 2 view .LVU866
 2829 0058 6F21     		movs	r1, #111
 2830 005a 7A20     		movs	r0, #122
 2831 005c FFF7FEBF 		b	set_dig
 2832              	.LVL322:
 2833              	.L263:
 2834              		.cfi_restore_state
 508:src/display.c ****     }
 2835              		.loc 1 508 2 view .LVU867
 2836              	.LBE308:
 2837              	.LBE309:
 506:src/display.c ****       if (get_overflow())
 2838              		.loc 1 506 2 is_stmt 1 view .LVU868
 2839 0060 6321     		movs	r1, #99
 2840 0062 7320     		movs	r0, #115
 2841 0064 FFF7FEFF 		bl	set_dig
 2842              	.LVL323:
 2843 0068 E2E7     		b	.L256
 2844              	.L266:
 2845 006a 00BF     		.align	2
 2846              	.L265:
 2847 006c 00000000 		.word	StateWhileOn
 2848 0070 00000000 		.word	.LANCHOR8
 2849 0074 00000000 		.word	.LC1
 2850 0078 00000000 		.word	main_ram
 2851              		.cfi_endproc
 2852              	.LFE15:
 2854              		.global	__aeabi_uldivmod
 2855              		.section	.text.set_int_x,"ax",%progbits
 2856              		.align	1
 2857              		.p2align 2,,3
 2858              		.syntax unified
 2859              		.thumb
 2860              		.thumb_func
 2861              		.fpu fpv4-sp-d16
 2863              	set_int_x:
 2864              	.LVL324:
 2865              	.LFB18:
1401:src/display.c **** 	const int ws = word_size();
 2866              		.loc 1 1401 67 view -0
 2867              		.cfi_startproc
 2868              		@ args = 0, pretend = 0, frame = 88
 2869              		@ frame_needed = 0, uses_anonymous_args = 0
1401:src/display.c **** 	const int ws = word_size();
 2870              		.loc 1 1401 67 is_stmt 0 view .LVU870
 2871 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2872              		.cfi_def_cfa_offset 36
 2873              		.cfi_offset 4, -36
 2874              		.cfi_offset 5, -32
ARM GAS  /tmp/ccDDbRKQ.s 			page 125


 2875              		.cfi_offset 6, -28
 2876              		.cfi_offset 7, -24
 2877              		.cfi_offset 8, -20
 2878              		.cfi_offset 9, -16
 2879              		.cfi_offset 10, -12
 2880              		.cfi_offset 11, -8
 2881              		.cfi_offset 14, -4
 2882 0004 97B0     		sub	sp, sp, #92
 2883              		.cfi_def_cfa_offset 128
1401:src/display.c **** 	const int ws = word_size();
 2884              		.loc 1 1401 67 view .LVU871
 2885 0006 1546     		mov	r5, r2
 2886 0008 0646     		mov	r6, r0
 2887 000a 0F46     		mov	r7, r1
1402:src/display.c **** 	unsigned int b;
 2888              		.loc 1 1402 2 is_stmt 1 view .LVU872
1402:src/display.c **** 	unsigned int b;
 2889              		.loc 1 1402 17 is_stmt 0 view .LVU873
 2890 000c FFF7FEFF 		bl	word_size
 2891              	.LVL325:
1402:src/display.c **** 	unsigned int b;
 2892              		.loc 1 1402 17 view .LVU874
 2893 0010 CD4B     		ldr	r3, .L359
 2894 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2895 0014 023B     		subs	r3, r3, #2
 2896 0016 DBB2     		uxtb	r3, r3
1408:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2897              		.loc 1 1408 6 view .LVU875
 2898 0018 0022     		movs	r2, #0
 2899 001a 032B     		cmp	r3, #3
1402:src/display.c **** 	unsigned int b;
 2900              		.loc 1 1402 17 view .LVU876
 2901 001c 8346     		mov	fp, r0
 2902              	.LVL326:
1403:src/display.c **** 	long long int vs = value;
 2903              		.loc 1 1403 2 is_stmt 1 view .LVU877
1404:src/display.c **** 	unsigned long long int v;
 2904              		.loc 1 1404 2 view .LVU878
1405:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 2905              		.loc 1 1405 2 view .LVU879
1406:src/display.c **** 	int i, j, k;
 2906              		.loc 1 1406 2 view .LVU880
1407:src/display.c **** 	int sign = 0;
 2907              		.loc 1 1407 2 view .LVU881
1408:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2908              		.loc 1 1408 2 view .LVU882
1408:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2909              		.loc 1 1408 6 is_stmt 0 view .LVU883
 2910 001e 0492     		str	r2, [sp, #16]
1409:src/display.c **** 
 2911              		.loc 1 1409 2 is_stmt 1 view .LVU884
 2912              	.LVL327:
1411:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2913              		.loc 1 1411 2 view .LVU885
 2914 0020 00F24181 		bhi	.L268
 2915 0024 C94A     		ldr	r2, .L359+4
 2916 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
ARM GAS  /tmp/ccDDbRKQ.s 			page 126


 2917              	.LVL328:
1419:src/display.c **** 	  IntMaxWindow = 0;
 2918              		.loc 1 1419 2 view .LVU886
1419:src/display.c **** 	  IntMaxWindow = 0;
 2919              		.loc 1 1419 5 is_stmt 0 view .LVU887
 2920 002a 002D     		cmp	r5, #0
 2921 002c 00F04181 		beq	.L350
 2922              	.LVL329:
 2923              	.L270:
1424:src/display.c **** 	  v = extract_value(value, &sign);
 2924              		.loc 1 1424 2 is_stmt 1 view .LVU888
1424:src/display.c **** 	  v = extract_value(value, &sign);
 2925              		.loc 1 1424 24 is_stmt 0 view .LVU889
 2926 0030 0AF1FF33 		add	r3, r10, #-1
1424:src/display.c **** 	  v = extract_value(value, &sign);
 2927              		.loc 1 1424 30 view .LVU890
 2928 0034 47F67574 		movw	r4, #32629
 2929 0038 1C41     		asrs	r4, r4, r3
1424:src/display.c **** 	  v = extract_value(value, &sign);
 2930              		.loc 1 1424 5 view .LVU891
 2931 003a 14F00104 		ands	r4, r4, #1
 2932 003e 40F0F380 		bne	.L351
1441:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2933              		.loc 1 1441 4 is_stmt 1 view .LVU892
1441:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2934              		.loc 1 1441 7 is_stmt 0 view .LVU893
 2935 0042 BBF13F0F 		cmp	fp, #63
 2936 0046 17DC     		bgt	.L281
 2937              	.LBB310:
1442:src/display.c **** 	    vs &= mask;
 2938              		.loc 1 1442 6 is_stmt 1 view .LVU894
1442:src/display.c **** 	    vs &= mask;
 2939              		.loc 1 1442 38 is_stmt 0 view .LVU895
 2940 0048 0121     		movs	r1, #1
 2941 004a ABF1200C 		sub	ip, fp, #32
 2942 004e CBF12000 		rsb	r0, fp, #32
 2943 0052 21FA00F0 		lsr	r0, r1, r0
 2944 0056 01FA0CF3 		lsl	r3, r1, ip
 2945 005a 01FA0BF2 		lsl	r2, r1, fp
 2946 005e 0343     		orrs	r3, r3, r0
 2947              	.LVL330:
1443:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2948              		.loc 1 1443 6 is_stmt 1 view .LVU896
1442:src/display.c **** 	    vs &= mask;
 2949              		.loc 1 1442 26 is_stmt 0 view .LVU897
 2950 0060 12F1FF30 		adds	r0, r2, #-1
 2951 0064 43F1FF31 		adc	r1, r3, #-1
1443:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2952              		.loc 1 1443 9 view .LVU898
 2953 0068 3040     		ands	r0, r0, r6
 2954 006a 3940     		ands	r1, r1, r7
 2955              	.LVL331:
1444:src/display.c **** 	      vs |= ~mask;
 2956              		.loc 1 1444 9 view .LVU899
 2957 006c BAF10A0F 		cmp	r10, #10
1443:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2958              		.loc 1 1443 9 view .LVU900
ARM GAS  /tmp/ccDDbRKQ.s 			page 127


 2959 0070 0646     		mov	r6, r0
 2960              	.LVL332:
1443:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2961              		.loc 1 1443 9 view .LVU901
 2962 0072 0F46     		mov	r7, r1
1444:src/display.c **** 	      vs |= ~mask;
 2963              		.loc 1 1444 6 is_stmt 1 view .LVU902
1444:src/display.c **** 	      vs |= ~mask;
 2964              		.loc 1 1444 9 is_stmt 0 view .LVU903
 2965 0074 00F03D81 		beq	.L352
 2966              	.LVL333:
 2967              	.L281:
1444:src/display.c **** 	      vs |= ~mask;
 2968              		.loc 1 1444 9 view .LVU904
 2969              	.LBE310:
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 2970              		.loc 1 1448 4 is_stmt 1 view .LVU905
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 2971              		.loc 1 1448 8 is_stmt 0 view .LVU906
 2972 0078 B54B     		ldr	r3, .L359+8
 2973 007a 1B68     		ldr	r3, [r3]
 2974 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 2975              		.loc 1 1448 7 view .LVU907
 2976 0080 9A07     		lsls	r2, r3, #30
 2977 0082 41D5     		bpl	.L312
1451:src/display.c **** 	    v = (unsigned long long int)vs;
 2978              		.loc 1 1451 11 is_stmt 1 view .LVU908
 2979              	.LBB311:
1459:src/display.c **** 	    const unsigned int b1 = b >> 1;
 2980              		.loc 1 1459 6 view .LVU909
1460:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2981              		.loc 1 1460 6 view .LVU910
1460:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2982              		.loc 1 1460 25 is_stmt 0 view .LVU911
 2983 0084 4FEA5A02 		lsr	r2, r10, #1
 2984              	.LVL334:
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 2985              		.loc 1 1461 6 is_stmt 1 view .LVU912
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 2986              		.loc 1 1461 43 is_stmt 0 view .LVU913
 2987 0088 12F00A0F 		tst	r2, #10
 2988 008c 14BF     		ite	ne
 2989 008e 0123     		movne	r3, #1
 2990 0090 0023     		moveq	r3, #0
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 2991              		.loc 1 1461 70 view .LVU914
 2992 0092 12F00C0F 		tst	r2, #12
 2993 0096 18BF     		it	ne
 2994 0098 43F00203 		orrne	r3, r3, #2
 2995              	.LVL335:
 2996              	.L287:
1462:src/display.c **** 
 2997              		.loc 1 1462 6 is_stmt 1 discriminator 4 view .LVU915
1464:src/display.c **** 	    for (i=0; i<n; i++) {
 2998              		.loc 1 1464 14 is_stmt 0 discriminator 4 view .LVU916
 2999 009c 0BEB0308 		add	r8, fp, r3
ARM GAS  /tmp/ccDDbRKQ.s 			page 128


1464:src/display.c **** 	    for (i=0; i<n; i++) {
 3000              		.loc 1 1464 27 discriminator 4 view .LVU917
 3001 00a0 0133     		adds	r3, r3, #1
 3002              	.LVL336:
1464:src/display.c **** 	    for (i=0; i<n; i++) {
 3003              		.loc 1 1464 21 discriminator 4 view .LVU918
 3004 00a2 B8FBF3F8 		udiv	r8, r8, r3
1465:src/display.c **** 	      const int r = v % b;
 3005              		.loc 1 1465 6 discriminator 4 view .LVU919
 3006 00a6 B8F1000F 		cmp	r8, #0
1462:src/display.c **** 
 3007              		.loc 1 1462 8 discriminator 4 view .LVU920
 3008 00aa 3046     		mov	r0, r6
 3009 00ac 3946     		mov	r1, r7
 3010              	.LVL337:
1464:src/display.c **** 	    for (i=0; i<n; i++) {
 3011              		.loc 1 1464 6 is_stmt 1 discriminator 4 view .LVU921
1465:src/display.c **** 	      const int r = v % b;
 3012              		.loc 1 1465 6 discriminator 4 view .LVU922
1465:src/display.c **** 	      const int r = v % b;
 3013              		.loc 1 1465 16 discriminator 4 view .LVU923
1465:src/display.c **** 	      const int r = v % b;
 3014              		.loc 1 1465 6 is_stmt 0 discriminator 4 view .LVU924
 3015 00ae 40F38081 		ble	.L313
 3016 00b2 05AC     		add	r4, sp, #20
 3017 00b4 DFF8A4B2 		ldr	fp, .L359+20
 3018              	.LVL338:
1465:src/display.c **** 	      const int r = v % b;
 3019              		.loc 1 1465 6 discriminator 4 view .LVU925
 3020 00b8 08EB0406 		add	r6, r8, r4
 3021              	.LVL339:
 3022              	.L288:
 3023              	.LBB312:
1466:src/display.c **** 	      v /= b;
 3024              		.loc 1 1466 8 is_stmt 1 discriminator 3 view .LVU926
 3025 00bc 5246     		mov	r2, r10
 3026 00be 0023     		movs	r3, #0
 3027 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3028              	.LVL340:
1467:src/display.c **** 	      buf[i] = DIGITS[r];
 3029              		.loc 1 1467 8 discriminator 3 view .LVU927
1468:src/display.c **** 	    }
 3030              		.loc 1 1468 15 is_stmt 0 discriminator 3 view .LVU928
 3031 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3032 00c8 04F8013B 		strb	r3, [r4], #1
 3033              	.LVL341:
1468:src/display.c **** 	    }
 3034              		.loc 1 1468 8 is_stmt 1 discriminator 3 view .LVU929
 3035              	.LBE312:
1465:src/display.c **** 	      const int r = v % b;
 3036              		.loc 1 1465 21 discriminator 3 view .LVU930
1465:src/display.c **** 	      const int r = v % b;
 3037              		.loc 1 1465 16 discriminator 3 view .LVU931
1465:src/display.c **** 	      const int r = v % b;
 3038              		.loc 1 1465 6 is_stmt 0 discriminator 3 view .LVU932
 3039 00cc B442     		cmp	r4, r6
 3040 00ce F5D1     		bne	.L288
ARM GAS  /tmp/ccDDbRKQ.s 			page 129


 3041 00d0 08F1FF31 		add	r1, r8, #-1
 3042              	.LVL342:
1465:src/display.c **** 	      const int r = v % b;
 3043              		.loc 1 1465 6 view .LVU933
 3044 00d4 4446     		mov	r4, r8
 3045              	.LVL343:
 3046              	.L280:
1465:src/display.c **** 	      const int r = v % b;
 3047              		.loc 1 1465 6 view .LVU934
 3048              	.LBE311:
1478:src/display.c **** 	if (res) {
 3049              		.loc 1 1478 2 is_stmt 1 view .LVU935
1479:src/display.c **** 	  if (sign) *res++ = '-';
 3050              		.loc 1 1479 2 view .LVU936
1479:src/display.c **** 	  if (sign) *res++ = '-';
 3051              		.loc 1 1479 5 is_stmt 0 view .LVU937
 3052 00d6 002D     		cmp	r5, #0
 3053 00d8 3ED0     		beq	.L289
 3054              	.LVL344:
 3055              	.L353:
1480:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3056              		.loc 1 1480 4 is_stmt 1 view .LVU938
1480:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3057              		.loc 1 1480 7 is_stmt 0 view .LVU939
 3058 00da 049B     		ldr	r3, [sp, #16]
 3059 00dc 13B1     		cbz	r3, .L290
1480:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3060              		.loc 1 1480 14 is_stmt 1 discriminator 1 view .LVU940
 3061              	.LVL345:
1480:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3062              		.loc 1 1480 21 is_stmt 0 discriminator 1 view .LVU941
 3063 00de 2D23     		movs	r3, #45
 3064 00e0 05F8013B 		strb	r3, [r5], #1
 3065              	.LVL346:
 3066              	.L290:
1481:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3067              		.loc 1 1481 4 is_stmt 1 view .LVU942
1481:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3068              		.loc 1 1481 7 is_stmt 0 view .LVU943
 3069 00e4 0D2C     		cmp	r4, #13
 3070 00e6 00F3E980 		bgt	.L291
1488:src/display.c **** 	      *res++ = buf[i];
 3071              		.loc 1 1488 12 is_stmt 1 view .LVU944
 3072              	.LVL347:
1488:src/display.c **** 	      *res++ = buf[i];
 3073              		.loc 1 1488 12 is_stmt 0 view .LVU945
 3074 00ea 481C     		adds	r0, r1, #1
 3075 00ec 09D0     		beq	.L267
 3076 00ee 0131     		adds	r1, r1, #1
 3077 00f0 05AA     		add	r2, sp, #20
 3078 00f2 013D     		subs	r5, r5, #1
 3079 00f4 1144     		add	r1, r1, r2
 3080              	.LVL348:
 3081              	.L294:
1489:src/display.c **** 	  }
 3082              		.loc 1 1489 8 is_stmt 1 view .LVU946
1489:src/display.c **** 	  }
ARM GAS  /tmp/ccDDbRKQ.s 			page 130


 3083              		.loc 1 1489 15 is_stmt 0 view .LVU947
 3084 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3085              	.LVL349:
1489:src/display.c **** 	  }
 3086              		.loc 1 1489 15 view .LVU948
 3087 00fa 05F8013F 		strb	r3, [r5, #1]!
 3088              	.LVL350:
1488:src/display.c **** 	      *res++ = buf[i];
 3089              		.loc 1 1488 12 is_stmt 1 view .LVU949
1488:src/display.c **** 	      *res++ = buf[i];
 3090              		.loc 1 1488 12 is_stmt 0 view .LVU950
 3091 00fe 9142     		cmp	r1, r2
 3092 0100 F9D1     		bne	.L294
 3093              	.LVL351:
 3094              	.L267:
1536:src/display.c **** 
 3095              		.loc 1 1536 7 view .LVU951
 3096 0102 17B0     		add	sp, sp, #92
 3097              		.cfi_remember_state
 3098              		.cfi_def_cfa_offset 36
 3099              		@ sp needed
 3100 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3101              	.LVL352:
 3102              	.L312:
 3103              		.cfi_restore_state
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1448 25 discriminator 1 view .LVU952
 3105 0108 56EA0703 		orrs	r3, r6, r7
 3106 010c 00F0C480 		beq	.L275
1451:src/display.c **** 	    v = (unsigned long long int)vs;
 3107              		.loc 1 1451 11 is_stmt 1 view .LVU953
1452:src/display.c **** 	    for (i=0; v != 0; i++) {
 3108              		.loc 1 1452 6 view .LVU954
 3109 0110 DFF848B2 		ldr	fp, .L359+20
 3110              	.LVL353:
1452:src/display.c **** 	    for (i=0; v != 0; i++) {
 3111              		.loc 1 1452 6 is_stmt 0 view .LVU955
 3112 0114 CDF800A0 		str	r10, [sp]
 3113 0118 0023     		movs	r3, #0
1452:src/display.c **** 	    for (i=0; v != 0; i++) {
 3114              		.loc 1 1452 8 view .LVU956
 3115 011a B046     		mov	r8, r6
 3116 011c D946     		mov	r9, fp
 3117 011e 3E46     		mov	r6, r7
1453:src/display.c **** 	      const int r = v % b;
 3118              		.loc 1 1453 6 is_stmt 1 view .LVU957
 3119              	.LVL354:
1453:src/display.c **** 	      const int r = v % b;
 3120              		.loc 1 1453 16 view .LVU958
 3121 0120 9B46     		mov	fp, r3
 3122 0122 05AF     		add	r7, sp, #20
 3123              	.LVL355:
 3124              	.L286:
 3125              	.LBB313:
1454:src/display.c **** 	      v /= b;
 3126              		.loc 1 1454 8 discriminator 3 view .LVU959
 3127 0124 4046     		mov	r0, r8
ARM GAS  /tmp/ccDDbRKQ.s 			page 131


 3128 0126 3146     		mov	r1, r6
 3129 0128 5246     		mov	r2, r10
 3130 012a 5B46     		mov	r3, fp
 3131 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3132              	.LVL356:
 3133 0130 3346     		mov	r3, r6
 3134 0132 9446     		mov	ip, r2
 3135              	.LVL357:
1455:src/display.c **** 	      buf[i] = DIGITS[r];
 3136              		.loc 1 1455 8 discriminator 3 view .LVU960
 3137              	.LBE313:
1453:src/display.c **** 	      const int r = v % b;
 3138              		.loc 1 1453 6 is_stmt 0 discriminator 3 view .LVU961
 3139 0134 5B45     		cmp	r3, fp
 3140 0136 4246     		mov	r2, r8
 3141              	.LVL358:
 3142              	.LBB314:
1456:src/display.c **** 	    }
 3143              		.loc 1 1456 15 discriminator 3 view .LVU962
 3144 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3145              	.LVL359:
1456:src/display.c **** 	    }
 3146              		.loc 1 1456 15 discriminator 3 view .LVU963
 3147 013c 07F801CB 		strb	ip, [r7], #1
 3148              	.LBE314:
1453:src/display.c **** 	      const int r = v % b;
 3149              		.loc 1 1453 6 discriminator 3 view .LVU964
 3150 0140 08BF     		it	eq
 3151 0142 5245     		cmpeq	r2, r10
 3152              	.LBB315:
1455:src/display.c **** 	      buf[i] = DIGITS[r];
 3153              		.loc 1 1455 10 discriminator 3 view .LVU965
 3154 0144 0E46     		mov	r6, r1
 3155              	.LVL360:
1456:src/display.c **** 	    }
 3156              		.loc 1 1456 8 is_stmt 1 discriminator 3 view .LVU966
 3157              	.LBE315:
1453:src/display.c **** 	      const int r = v % b;
 3158              		.loc 1 1453 24 discriminator 3 view .LVU967
 3159              	.LBB316:
1455:src/display.c **** 	      buf[i] = DIGITS[r];
 3160              		.loc 1 1455 10 is_stmt 0 discriminator 3 view .LVU968
 3161 0146 8046     		mov	r8, r0
 3162 0148 2146     		mov	r1, r4
 3163              	.LVL361:
1455:src/display.c **** 	      buf[i] = DIGITS[r];
 3164              		.loc 1 1455 10 discriminator 3 view .LVU969
 3165              	.LBE316:
1453:src/display.c **** 	      const int r = v % b;
 3166              		.loc 1 1453 25 discriminator 3 view .LVU970
 3167 014a 04F10104 		add	r4, r4, #1
 3168              	.LVL362:
1453:src/display.c **** 	      const int r = v % b;
 3169              		.loc 1 1453 16 is_stmt 1 discriminator 3 view .LVU971
1453:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1453 6 is_stmt 0 discriminator 3 view .LVU972
 3171 014e E9D2     		bcs	.L286
ARM GAS  /tmp/ccDDbRKQ.s 			page 132


 3172 0150 DDF800A0 		ldr	r10, [sp]
 3173              	.LVL363:
1478:src/display.c **** 	if (res) {
 3174              		.loc 1 1478 2 is_stmt 1 view .LVU973
1479:src/display.c **** 	  if (sign) *res++ = '-';
 3175              		.loc 1 1479 2 view .LVU974
1479:src/display.c **** 	  if (sign) *res++ = '-';
 3176              		.loc 1 1479 5 is_stmt 0 view .LVU975
 3177 0154 002D     		cmp	r5, #0
 3178 0156 C0D1     		bne	.L353
 3179              	.LVL364:
 3180              	.L289:
 3181              	.LBB317:
1507:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3182              		.loc 1 1507 4 is_stmt 1 view .LVU976
1507:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3183              		.loc 1 1507 33 is_stmt 0 view .LVU977
 3184 0158 BAF1020F 		cmp	r10, #2
 3185 015c 00F0F080 		beq	.L354
 3186              	.LVL365:
1508:src/display.c **** 	    : b == 16 ? 2 : 3;
 3187              		.loc 1 1508 4 is_stmt 1 view .LVU978
1508:src/display.c **** 	    : b == 16 ? 2 : 3;
 3188              		.loc 1 1508 30 is_stmt 0 view .LVU979
 3189 0160 BAF1040F 		cmp	r10, #4
 3190 0164 00F01F81 		beq	.L355
1507:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3191              		.loc 1 1507 33 view .LVU980
 3192 0168 BAF1100F 		cmp	r10, #16
 3193 016c 0CBF     		ite	eq
 3194 016e 4FF0020A 		moveq	r10, #2
 3195 0172 4FF0030A 		movne	r10, #3
 3196 0176 0C26     		movs	r6, #12
 3197              	.LVL366:
 3198              	.L296:
1510:src/display.c **** #endif
 3199              		.loc 1 1510 4 is_stmt 1 view .LVU981
 3200 0178 0091     		str	r1, [sp]
 3201 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3202              	.LVL367:
1512:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3203              		.loc 1 1512 4 view .LVU982
1513:src/display.c **** 	    State2.window = 0;
 3204              		.loc 1 1513 26 is_stmt 0 view .LVU983
 3205 017e 724B     		ldr	r3, .L359
1512:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3206              		.loc 1 1512 17 view .LVU984
 3207 0180 744A     		ldr	r2, .L359+12
1513:src/display.c **** 	    State2.window = 0;
 3208              		.loc 1 1513 26 view .LVU985
 3209 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1512:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3210              		.loc 1 1512 27 view .LVU986
 3211 0184 0099     		ldr	r1, [sp]
 3212 0186 91FBF6F1 		sdiv	r1, r1, r6
1513:src/display.c **** 	    State2.window = 0;
 3213              		.loc 1 1513 8 view .LVU987
ARM GAS  /tmp/ccDDbRKQ.s 			page 133


 3214 018a C3F3C207 		ubfx	r7, r3, #3, #3
1513:src/display.c **** 	    State2.window = 0;
 3215              		.loc 1 1513 7 view .LVU988
 3216 018e B942     		cmp	r1, r7
1512:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3217              		.loc 1 1512 17 view .LVU989
 3218 0190 1160     		str	r1, [r2]
1513:src/display.c **** 	    State2.window = 0;
 3219              		.loc 1 1513 4 is_stmt 1 view .LVU990
1513:src/display.c **** 	    State2.window = 0;
 3220              		.loc 1 1513 7 is_stmt 0 view .LVU991
 3221 0192 C0F2F680 		blt	.L298
 3222 0196 06FB07F7 		mul	r7, r6, r7
 3223              	.L299:
1515:src/display.c **** 
 3224              		.loc 1 1515 4 is_stmt 1 view .LVU992
1515:src/display.c **** 
 3225              		.loc 1 1515 11 is_stmt 0 view .LVU993
 3226 019a 16AB     		add	r3, sp, #88
 3227 019c 16AA     		add	r2, sp, #88
 3228 019e 1C44     		add	r4, r4, r3
 3229              	.LVL368:
1515:src/display.c **** 
 3230              		.loc 1 1515 11 view .LVU994
 3231 01a0 D519     		adds	r5, r2, r7
 3232 01a2 0023     		movs	r3, #0
 3233 01a4 453D     		subs	r5, r5, #69
 3234 01a6 04F8443C 		strb	r3, [r4, #-68]
1517:src/display.c **** 	  for (k = 0; k < 12; k++)
 3235              		.loc 1 1517 4 is_stmt 1 view .LVU995
 3236              	.LVL369:
1518:src/display.c **** 	    if (buf[j + k] == '\0')
 3237              		.loc 1 1518 4 view .LVU996
1518:src/display.c **** 	    if (buf[j + k] == '\0')
 3238              		.loc 1 1518 16 view .LVU997
1515:src/display.c **** 
 3239              		.loc 1 1515 11 is_stmt 0 view .LVU998
 3240 01aa 2A46     		mov	r2, r5
 3241              	.LVL370:
 3242              	.L301:
1519:src/display.c **** 	      break;
 3243              		.loc 1 1519 6 is_stmt 1 view .LVU999
1518:src/display.c **** 	    if (buf[j + k] == '\0')
 3244              		.loc 1 1518 24 view .LVU1000
1519:src/display.c **** 	      break;
 3245              		.loc 1 1519 9 is_stmt 0 view .LVU1001
 3246 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3247 01b0 0029     		cmp	r1, #0
 3248 01b2 00F0EC80 		beq	.L300
1518:src/display.c **** 	    if (buf[j + k] == '\0')
 3249              		.loc 1 1518 25 discriminator 2 view .LVU1002
 3250 01b6 0133     		adds	r3, r3, #1
 3251              	.LVL371:
1518:src/display.c **** 	    if (buf[j + k] == '\0')
 3252              		.loc 1 1518 16 is_stmt 1 discriminator 2 view .LVU1003
1518:src/display.c **** 	    if (buf[j + k] == '\0')
 3253              		.loc 1 1518 4 is_stmt 0 discriminator 2 view .LVU1004
ARM GAS  /tmp/ccDDbRKQ.s 			page 134


 3254 01b8 0C2B     		cmp	r3, #12
 3255 01ba F7D1     		bne	.L301
1521:src/display.c **** 	    int ch = buf[j++];
 3256              		.loc 1 1521 4 view .LVU1005
 3257 01bc 4FF00B08 		mov	r8, #11
 3258              	.LVL372:
 3259              	.L302:
1521:src/display.c **** 	    int ch = buf[j++];
 3260              		.loc 1 1521 4 view .LVU1006
 3261 01c0 0137     		adds	r7, r7, #1
 3262 01c2 4744     		add	r7, r7, r8
 3263 01c4 4446     		mov	r4, r8
 3264 01c6 4FF0630B 		mov	fp, #99
 3265 01ca 09E0     		b	.L307
 3266              	.LVL373:
 3267              	.L356:
 3268              	.LBB318:
1527:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3269              		.loc 1 1527 8 view .LVU1007
 3270 01cc 624B     		ldr	r3, .L359+16
 3271 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3272              	.LVL374:
 3273              	.LBB319:
 3274              	.LBI319:
 298:src/display.c ****   if (sep == SEP_NONE)
 3275              		.loc 1 298 14 is_stmt 1 view .LVU1008
 3276              	.LBB320:
 299:src/display.c ****     return res;
 3277              		.loc 1 299 3 view .LVU1009
 299:src/display.c ****     return res;
 3278              		.loc 1 299 6 is_stmt 0 view .LVU1010
 3279 01d0 09B1     		cbz	r1, .L305
 299:src/display.c ****     return res;
 3280              		.loc 1 299 6 view .LVU1011
 3281 01d2 FFF7FEFF 		bl	set_separator.part.0
 3282              	.LVL375:
 3283              	.L305:
 299:src/display.c ****     return res;
 3284              		.loc 1 299 6 view .LVU1012
 3285              	.LBE320:
 3286              	.LBE319:
1528:src/display.c **** 	  }
 3287              		.loc 1 1528 6 is_stmt 1 discriminator 2 view .LVU1013
 3288              	.LBE318:
1521:src/display.c **** 	    int ch = buf[j++];
 3289              		.loc 1 1521 4 is_stmt 0 discriminator 2 view .LVU1014
 3290 01d6 013C     		subs	r4, r4, #1
1521:src/display.c **** 	    int ch = buf[j++];
 3291              		.loc 1 1521 4 discriminator 2 view .LVU1015
 3292 01d8 621C     		adds	r2, r4, #1
 3293              	.LBB323:
1528:src/display.c **** 	  }
 3294              		.loc 1 1528 10 discriminator 2 view .LVU1016
 3295 01da ABF1090B 		sub	fp, fp, #9
 3296              	.LVL376:
1528:src/display.c **** 	  }
 3297              		.loc 1 1528 10 discriminator 2 view .LVU1017
ARM GAS  /tmp/ccDDbRKQ.s 			page 135


 3298              	.LBE323:
1521:src/display.c **** 	    int ch = buf[j++];
 3299              		.loc 1 1521 24 is_stmt 1 discriminator 2 view .LVU1018
1521:src/display.c **** 	    int ch = buf[j++];
 3300              		.loc 1 1521 14 discriminator 2 view .LVU1019
1521:src/display.c **** 	    int ch = buf[j++];
 3301              		.loc 1 1521 4 is_stmt 0 discriminator 2 view .LVU1020
 3302 01de 16D0     		beq	.L311
 3303              	.LVL377:
 3304              	.L307:
 3305              	.LBB324:
1522:src/display.c **** 	    if (i >= shift)
 3306              		.loc 1 1522 6 is_stmt 1 view .LVU1021
1524:src/display.c **** 	    set_dig(dig, ch);
 3307              		.loc 1 1524 8 view .LVU1022
1522:src/display.c **** 	    if (i >= shift)
 3308              		.loc 1 1522 10 is_stmt 0 view .LVU1023
 3309 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1523:src/display.c **** 	      ch -= 030;
 3310              		.loc 1 1523 9 view .LVU1024
 3311 01e4 A8EB0402 		sub	r2, r8, r4
 3312 01e8 B242     		cmp	r2, r6
 3313 01ea A7EB0409 		sub	r9, r7, r4
 3314              	.LVL378:
1523:src/display.c **** 	      ch -= 030;
 3315              		.loc 1 1523 6 is_stmt 1 view .LVU1025
1525:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3316              		.loc 1 1525 6 is_stmt 0 view .LVU1026
 3317 01ee 5846     		mov	r0, fp
1524:src/display.c **** 	    set_dig(dig, ch);
 3318              		.loc 1 1524 11 view .LVU1027
 3319 01f0 A8BF     		it	ge
 3320 01f2 1839     		subge	r1, r1, #24
 3321              	.LVL379:
1525:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3322              		.loc 1 1525 6 is_stmt 1 view .LVU1028
 3323 01f4 FFF7FEFF 		bl	set_dig
 3324              	.LVL380:
1526:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3325              		.loc 1 1526 6 view .LVU1029
1526:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3326              		.loc 1 1526 13 is_stmt 0 view .LVU1030
 3327 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3328 01fc 0AFB1393 		mls	r3, r10, r3, r9
1526:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3329              		.loc 1 1526 9 view .LVU1031
 3330 0200 002B     		cmp	r3, #0
 3331 0202 E8D1     		bne	.L305
1527:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3332              		.loc 1 1527 8 is_stmt 1 discriminator 1 view .LVU1032
 3333              	.LBB322:
 3334              	.LBB321:
 301:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3335              		.loc 1 301 3 discriminator 1 view .LVU1033
 3336 0204 5846     		mov	r0, fp
 3337              	.LBE321:
 3338              	.LBE322:
ARM GAS  /tmp/ccDDbRKQ.s 			page 136


1526:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3339              		.loc 1 1526 27 is_stmt 0 discriminator 1 view .LVU1034
 3340 0206 002C     		cmp	r4, #0
 3341 0208 E0D1     		bne	.L356
1528:src/display.c **** 	  }
 3342              		.loc 1 1528 6 is_stmt 1 view .LVU1035
1528:src/display.c **** 	  }
 3343              		.loc 1 1528 10 is_stmt 0 view .LVU1036
 3344 020a ABF1090B 		sub	fp, fp, #9
 3345              	.LVL381:
1528:src/display.c **** 	  }
 3346              		.loc 1 1528 10 view .LVU1037
 3347              	.LBE324:
1521:src/display.c **** 	    int ch = buf[j++];
 3348              		.loc 1 1521 24 is_stmt 1 view .LVU1038
1521:src/display.c **** 	    int ch = buf[j++];
 3349              		.loc 1 1521 14 view .LVU1039
 3350              	.L311:
1530:src/display.c **** 	    if (dig >= 0)
 3351              		.loc 1 1530 4 view .LVU1040
1530:src/display.c **** 	    if (dig >= 0)
 3352              		.loc 1 1530 7 is_stmt 0 view .LVU1041
 3353 020e 049B     		ldr	r3, [sp, #16]
 3354 0210 002B     		cmp	r3, #0
 3355 0212 3FF476AF 		beq	.L267
1531:src/display.c **** 	      set_dig(dig, '-');
 3356              		.loc 1 1531 6 is_stmt 1 view .LVU1042
1531:src/display.c **** 	      set_dig(dig, '-');
 3357              		.loc 1 1531 9 is_stmt 0 view .LVU1043
 3358 0216 BBF1000F 		cmp	fp, #0
 3359 021a C0F2C680 		blt	.L357
 3360              	.LVL382:
 3361              	.L310:
1532:src/display.c **** 	    else	SET_MANT_SIGN;
 3362              		.loc 1 1532 8 is_stmt 1 view .LVU1044
 3363 021e 5846     		mov	r0, fp
 3364 0220 2D21     		movs	r1, #45
 3365 0222 FFF7FEFF 		bl	set_dig
 3366              	.LVL383:
 3367 0226 6CE7     		b	.L267
 3368              	.LVL384:
 3369              	.L351:
1532:src/display.c **** 	    else	SET_MANT_SIGN;
 3370              		.loc 1 1532 8 is_stmt 0 view .LVU1045
 3371              	.LBE317:
1425:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3372              		.loc 1 1425 4 is_stmt 1 view .LVU1046
1425:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3373              		.loc 1 1425 8 is_stmt 0 view .LVU1047
 3374 0228 04AA     		add	r2, sp, #16
 3375 022a 3046     		mov	r0, r6
 3376 022c 3946     		mov	r1, r7
 3377 022e FFF7FEFF 		bl	extract_value
 3378              	.LVL385:
 3379 0232 8046     		mov	r8, r0
 3380 0234 8946     		mov	r9, r1
 3381              	.LVL386:
ARM GAS  /tmp/ccDDbRKQ.s 			page 137


1426:src/display.c **** 	    v = value;
 3382              		.loc 1 1426 4 is_stmt 1 view .LVU1048
1426:src/display.c **** 	    v = value;
 3383              		.loc 1 1426 8 is_stmt 0 view .LVU1049
 3384 0236 FFF7FEFF 		bl	int_mode
 3385              	.LVL387:
1426:src/display.c **** 	    v = value;
 3386              		.loc 1 1426 7 view .LVU1050
 3387 023a 38BB     		cbnz	r0, .L272
1426:src/display.c **** 	    v = value;
 3388              		.loc 1 1426 33 discriminator 1 view .LVU1051
 3389 023c 049B     		ldr	r3, [sp, #16]
 3390 023e 012B     		cmp	r3, #1
 3391 0240 24D1     		bne	.L272
1426:src/display.c **** 	    v = value;
 3392              		.loc 1 1426 46 discriminator 2 view .LVU1052
 3393 0242 58EA0903 		orrs	r3, r8, r9
 3394 0246 00F08B80 		beq	.L358
 3395              	.LVL388:
 3396              	.L273:
1426:src/display.c **** 	    v = value;
 3397              		.loc 1 1426 46 discriminator 2 view .LVU1053
 3398 024a DFF810B1 		ldr	fp, .L359+20
 3399              	.LVL389:
1401:src/display.c **** 	const int ws = word_size();
 3400              		.loc 1 1401 67 discriminator 3 view .LVU1054
 3401 024e 0395     		str	r5, [sp, #12]
 3402 0250 05AB     		add	r3, sp, #20
 3403 0252 5D46     		mov	r5, fp
 3404              	.LVL390:
1401:src/display.c **** 	const int ws = word_size();
 3405              		.loc 1 1401 67 discriminator 3 view .LVU1055
 3406 0254 5646     		mov	r6, r10
 3407 0256 0027     		movs	r7, #0
 3408 0258 0024     		movs	r4, #0
 3409 025a 9B46     		mov	fp, r3
 3410              	.LVL391:
 3411              	.L279:
 3412              	.LBB327:
1435:src/display.c **** 	      v /= b;
 3413              		.loc 1 1435 8 is_stmt 1 discriminator 3 view .LVU1056
 3414 025c 4046     		mov	r0, r8
 3415 025e 4946     		mov	r1, r9
 3416 0260 3246     		mov	r2, r6
 3417 0262 3B46     		mov	r3, r7
 3418 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3419              	.LVL392:
1436:src/display.c **** 	      buf[i] = DIGITS[r];
 3420              		.loc 1 1436 8 discriminator 3 view .LVU1057
 3421 0268 CDE90089 		strd	r8, [sp]
1437:src/display.c **** 	    }
 3422              		.loc 1 1437 15 is_stmt 0 discriminator 3 view .LVU1058
 3423 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3424 026e 0BF8013B 		strb	r3, [fp], #1
 3425              	.LBE327:
1434:src/display.c **** 	      const int r = v % b;
 3426              		.loc 1 1434 6 discriminator 3 view .LVU1059
ARM GAS  /tmp/ccDDbRKQ.s 			page 138


 3427 0272 DDE90023 		ldrd	r2, [sp]
 3428              	.LVL393:
1434:src/display.c **** 	      const int r = v % b;
 3429              		.loc 1 1434 6 discriminator 3 view .LVU1060
 3430 0276 BB42     		cmp	r3, r7
 3431 0278 08BF     		it	eq
 3432 027a B242     		cmpeq	r2, r6
 3433              	.LBB328:
1436:src/display.c **** 	      buf[i] = DIGITS[r];
 3434              		.loc 1 1436 10 discriminator 3 view .LVU1061
 3435 027c 8946     		mov	r9, r1
 3436              	.LVL394:
1437:src/display.c **** 	    }
 3437              		.loc 1 1437 8 is_stmt 1 discriminator 3 view .LVU1062
 3438              	.LBE328:
1434:src/display.c **** 	      const int r = v % b;
 3439              		.loc 1 1434 24 discriminator 3 view .LVU1063
 3440              	.LBB329:
1436:src/display.c **** 	      buf[i] = DIGITS[r];
 3441              		.loc 1 1436 10 is_stmt 0 discriminator 3 view .LVU1064
 3442 027e 8046     		mov	r8, r0
 3443 0280 2146     		mov	r1, r4
 3444              	.LVL395:
1436:src/display.c **** 	      buf[i] = DIGITS[r];
 3445              		.loc 1 1436 10 discriminator 3 view .LVU1065
 3446              	.LBE329:
1434:src/display.c **** 	      const int r = v % b;
 3447              		.loc 1 1434 25 discriminator 3 view .LVU1066
 3448 0282 04F10104 		add	r4, r4, #1
 3449              	.LVL396:
1434:src/display.c **** 	      const int r = v % b;
 3450              		.loc 1 1434 16 is_stmt 1 discriminator 3 view .LVU1067
1434:src/display.c **** 	      const int r = v % b;
 3451              		.loc 1 1434 6 is_stmt 0 discriminator 3 view .LVU1068
 3452 0286 E9D2     		bcs	.L279
 3453 0288 039D     		ldr	r5, [sp, #12]
 3454 028a 24E7     		b	.L280
 3455              	.LVL397:
 3456              	.L272:
1428:src/display.c **** 	    if (sign)
 3457              		.loc 1 1428 4 is_stmt 1 view .LVU1069
1428:src/display.c **** 	    if (sign)
 3458              		.loc 1 1428 7 is_stmt 0 view .LVU1070
 3459 028c 58EA0903 		orrs	r3, r8, r9
 3460 0290 DBD1     		bne	.L273
1429:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3461              		.loc 1 1429 6 is_stmt 1 view .LVU1071
1429:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3462              		.loc 1 1429 9 is_stmt 0 view .LVU1072
 3463 0292 049B     		ldr	r3, [sp, #16]
 3464 0294 002B     		cmp	r3, #0
 3465 0296 69D1     		bne	.L274
 3466              	.LVL398:
 3467              	.L275:
1431:src/display.c **** 	    return;
 3468              		.loc 1 1431 6 is_stmt 1 view .LVU1073
 3469              	.LBB330:
ARM GAS  /tmp/ccDDbRKQ.s 			page 139


 3470              	.LBI330:
 329:src/display.c ****   if (res) *res++ = ch;
 3471              		.loc 1 329 14 view .LVU1074
 3472              	.LBB331:
 330:src/display.c ****   else	set_dig(base, ch);
 3473              		.loc 1 330 3 view .LVU1075
 330:src/display.c ****   else	set_dig(base, ch);
 3474              		.loc 1 330 6 is_stmt 0 view .LVU1076
 3475 0298 002D     		cmp	r5, #0
 3476 029a 6DD0     		beq	.L277
 3477              	.LVL399:
 3478              	.L276:
 330:src/display.c ****   else	set_dig(base, ch);
 3479              		.loc 1 330 12 is_stmt 1 view .LVU1077
 330:src/display.c ****   else	set_dig(base, ch);
 3480              		.loc 1 330 19 is_stmt 0 view .LVU1078
 3481 029c 3023     		movs	r3, #48
 3482 029e 2B70     		strb	r3, [r5]
 3483              	.LBE331:
 3484              	.LBE330:
1536:src/display.c **** 
 3485              		.loc 1 1536 7 view .LVU1079
 3486 02a0 17B0     		add	sp, sp, #92
 3487              		.cfi_remember_state
 3488              		.cfi_def_cfa_offset 36
 3489              		@ sp needed
 3490 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3491              	.LVL400:
 3492              	.L268:
 3493              		.cfi_restore_state
1416:src/display.c **** 	}
 3494              		.loc 1 1416 11 is_stmt 1 view .LVU1080
1416:src/display.c **** 	}
 3495              		.loc 1 1416 15 is_stmt 0 view .LVU1081
 3496 02a6 FFF7FEFF 		bl	int_base
 3497              	.LVL401:
1416:src/display.c **** 	}
 3498              		.loc 1 1416 15 view .LVU1082
 3499 02aa 8246     		mov	r10, r0
 3500              	.LVL402:
1416:src/display.c **** 	}
 3501              		.loc 1 1416 27 is_stmt 1 view .LVU1083
1419:src/display.c **** 	  IntMaxWindow = 0;
 3502              		.loc 1 1419 2 view .LVU1084
1419:src/display.c **** 	  IntMaxWindow = 0;
 3503              		.loc 1 1419 5 is_stmt 0 view .LVU1085
 3504 02ac 002D     		cmp	r5, #0
 3505 02ae 7FF4BFAE 		bne	.L270
 3506              	.LVL403:
 3507              	.L350:
1420:src/display.c **** 	  carry_overflow();
 3508              		.loc 1 1420 4 is_stmt 1 view .LVU1086
1420:src/display.c **** 	  carry_overflow();
 3509              		.loc 1 1420 17 is_stmt 0 view .LVU1087
 3510 02b2 284B     		ldr	r3, .L359+12
 3511 02b4 1D60     		str	r5, [r3]
1421:src/display.c **** 	}
ARM GAS  /tmp/ccDDbRKQ.s 			page 140


 3512              		.loc 1 1421 4 is_stmt 1 view .LVU1088
 3513 02b6 FFF7FEFF 		bl	carry_overflow
 3514              	.LVL404:
 3515 02ba B9E6     		b	.L270
 3516              	.LVL405:
 3517              	.L291:
1482:src/display.c **** 	      *res++ = buf[i];
 3518              		.loc 1 1482 12 view .LVU1089
1482:src/display.c **** 	      *res++ = buf[i];
 3519              		.loc 1 1482 12 is_stmt 0 view .LVU1090
 3520 02bc 05AB     		add	r3, sp, #20
 3521 02be 5818     		adds	r0, r3, r1
1482:src/display.c **** 	      *res++ = buf[i];
 3522              		.loc 1 1482 24 view .LVU1091
 3523 02c0 A4F10D06 		sub	r6, r4, #13
 3524 02c4 6A1E     		subs	r2, r5, #1
 3525              	.LVL406:
 3526              	.L293:
1483:src/display.c **** 	    *res++ = '.';
 3527              		.loc 1 1483 8 is_stmt 1 view .LVU1092
1483:src/display.c **** 	    *res++ = '.';
 3528              		.loc 1 1483 20 is_stmt 0 view .LVU1093
 3529 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3530              	.LVL407:
1483:src/display.c **** 	    *res++ = '.';
 3531              		.loc 1 1483 15 view .LVU1094
 3532 02ca 02F8013F 		strb	r3, [r2, #1]!
 3533              	.LVL408:
1482:src/display.c **** 	      *res++ = buf[i];
 3534              		.loc 1 1482 12 is_stmt 1 view .LVU1095
1482:src/display.c **** 	      *res++ = buf[i];
 3535              		.loc 1 1482 12 is_stmt 0 view .LVU1096
 3536 02ce D343     		mvns	r3, r2
 3537 02d0 0B44     		add	r3, r3, r1
 3538 02d2 2B44     		add	r3, r3, r5
 3539 02d4 9E42     		cmp	r6, r3
 3540 02d6 F6DD     		ble	.L293
 3541 02d8 01F10E03 		add	r3, r1, #14
 3542 02dc 1C1B     		subs	r4, r3, r4
 3543              	.LVL409:
1482:src/display.c **** 	      *res++ = buf[i];
 3544              		.loc 1 1482 12 view .LVU1097
 3545 02de 8E42     		cmp	r6, r1
 3546 02e0 C8BF     		it	gt
 3547 02e2 0124     		movgt	r4, #1
 3548 02e4 2A19     		adds	r2, r5, r4
 3549              	.LVL410:
1484:src/display.c **** 	    *res++ = '.';
 3550              		.loc 1 1484 6 is_stmt 1 view .LVU1098
1484:src/display.c **** 	    *res++ = '.';
 3551              		.loc 1 1484 13 is_stmt 0 view .LVU1099
 3552 02e6 2E23     		movs	r3, #46
 3553 02e8 2B55     		strb	r3, [r5, r4]
1485:src/display.c **** 	  }
 3554              		.loc 1 1485 6 is_stmt 1 view .LVU1100
 3555              	.LVL411:
1485:src/display.c **** 	  }
ARM GAS  /tmp/ccDDbRKQ.s 			page 141


 3556              		.loc 1 1485 13 is_stmt 0 view .LVU1101
 3557 02ea 5370     		strb	r3, [r2, #1]
1536:src/display.c **** 
 3558              		.loc 1 1536 7 view .LVU1102
 3559 02ec 17B0     		add	sp, sp, #92
 3560              		.cfi_remember_state
 3561              		.cfi_def_cfa_offset 36
 3562              		@ sp needed
 3563 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3564              	.LVL412:
 3565              	.L352:
 3566              		.cfi_restore_state
 3567              	.LBB333:
1444:src/display.c **** 	      vs |= ~mask;
 3568              		.loc 1 1444 38 discriminator 1 view .LVU1103
 3569 02f2 0BF1FF31 		add	r1, fp, #-1
1444:src/display.c **** 	      vs |= ~mask;
 3570              		.loc 1 1444 18 discriminator 1 view .LVU1104
 3571 02f6 CBF1210C 		rsb	ip, fp, #33
 3572 02fa C840     		lsrs	r0, r0, r1
 3573 02fc 07FA0CFC 		lsl	ip, r7, ip
 3574 0300 2039     		subs	r1, r1, #32
 3575 0302 40EA0C00 		orr	r0, r0, ip
 3576 0306 5CBF     		itt	pl
 3577 0308 47FA01F1 		asrpl	r1, r7, r1
 3578 030c 0843     		orrpl	r0, r0, r1
 3579 030e 00F00108 		and	r8, r0, #1
 3580 0312 4FF00009 		mov	r9, #0
 3581 0316 58EA0901 		orrs	r1, r8, r9
 3582 031a 08D0     		beq	.L282
1445:src/display.c **** 	  }
 3583              		.loc 1 1445 8 is_stmt 1 view .LVU1105
1445:src/display.c **** 	  }
 3584              		.loc 1 1445 11 is_stmt 0 view .LVU1106
 3585 031c 5042     		rsbs	r0, r2, #0
 3586 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3587 0322 40EA0602 		orr	r2, r0, r6
 3588              	.LVL413:
1445:src/display.c **** 	  }
 3589              		.loc 1 1445 11 view .LVU1107
 3590 0326 41EA0703 		orr	r3, r1, r7
 3591              	.LVL414:
1445:src/display.c **** 	  }
 3592              		.loc 1 1445 11 view .LVU1108
 3593 032a 1646     		mov	r6, r2
 3594              	.LVL415:
1445:src/display.c **** 	  }
 3595              		.loc 1 1445 11 view .LVU1109
 3596 032c 1F46     		mov	r7, r3
 3597              	.L282:
1445:src/display.c **** 	  }
 3598              		.loc 1 1445 11 view .LVU1110
 3599              	.LBE333:
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 3600              		.loc 1 1448 4 is_stmt 1 view .LVU1111
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 3601              		.loc 1 1448 8 is_stmt 0 view .LVU1112
ARM GAS  /tmp/ccDDbRKQ.s 			page 142


 3602 032e 084B     		ldr	r3, .L359+8
 3603 0330 1B68     		ldr	r3, [r3]
 3604 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
 3605              		.loc 1 1448 7 view .LVU1113
 3606 0336 9B07     		lsls	r3, r3, #30
 3607 0338 7FF5E6AE 		bpl	.L312
 3608 033c 0223     		movs	r3, #2
 3609 033e ADE6     		b	.L287
 3610              	.LVL416:
 3611              	.L354:
 3612              	.LBB334:
1507:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3613              		.loc 1 1507 33 view .LVU1114
 3614 0340 0826     		movs	r6, #8
1509:src/display.c **** 	  set_separator_decimal_modes();
 3615              		.loc 1 1509 6 view .LVU1115
 3616 0342 4FF0040A 		mov	r10, #4
 3617 0346 17E7     		b	.L296
 3618              	.L360:
 3619              		.align	2
 3620              	.L359:
 3621 0348 00000000 		.word	StateWhileOn
 3622 034c 00000000 		.word	CSWTCH.374
 3623 0350 00000000 		.word	main_ram
 3624 0354 00000000 		.word	IntMaxWindow
 3625 0358 00000000 		.word	.LANCHOR0
 3626 035c 00000000 		.word	.LANCHOR9
 3627              	.LVL417:
 3628              	.L358:
1509:src/display.c **** 	  set_separator_decimal_modes();
 3629              		.loc 1 1509 6 view .LVU1116
 3630              	.LBE334:
1427:src/display.c **** 	  if (v == 0) {
 3631              		.loc 1 1427 6 is_stmt 1 view .LVU1117
1427:src/display.c **** 	  if (v == 0) {
 3632              		.loc 1 1427 8 is_stmt 0 view .LVU1118
 3633 0360 B046     		mov	r8, r6
 3634              	.LVL418:
1427:src/display.c **** 	  if (v == 0) {
 3635              		.loc 1 1427 8 view .LVU1119
 3636 0362 B946     		mov	r9, r7
 3637              	.LVL419:
1428:src/display.c **** 	    if (sign)
 3638              		.loc 1 1428 4 is_stmt 1 view .LVU1120
1428:src/display.c **** 	    if (sign)
 3639              		.loc 1 1428 7 is_stmt 0 view .LVU1121
 3640 0364 58EA0903 		orrs	r3, r8, r9
 3641 0368 7FF46FAF 		bne	.L273
 3642              	.LVL420:
 3643              	.L274:
1430:src/display.c **** 	    set_dig_s(dig, '0', res);
 3644              		.loc 1 1430 8 is_stmt 1 view .LVU1122
 3645              	.LBB335:
 3646              	.LBI335:
 329:src/display.c ****   if (res) *res++ = ch;
 3647              		.loc 1 329 14 view .LVU1123
ARM GAS  /tmp/ccDDbRKQ.s 			page 143


 3648              	.LBB336:
 330:src/display.c ****   else	set_dig(base, ch);
 3649              		.loc 1 330 3 view .LVU1124
 330:src/display.c ****   else	set_dig(base, ch);
 3650              		.loc 1 330 6 is_stmt 0 view .LVU1125
 3651 036c 002D     		cmp	r5, #0
 3652 036e 95D1     		bne	.L276
 331:src/display.c ****   return res;
 3653              		.loc 1 331 8 is_stmt 1 view .LVU1126
 3654 0370 2D21     		movs	r1, #45
 3655 0372 5A20     		movs	r0, #90
 3656 0374 FFF7FEFF 		bl	set_dig
 3657              	.LVL421:
 331:src/display.c ****   return res;
 3658              		.loc 1 331 8 is_stmt 0 view .LVU1127
 3659              	.LBE336:
 3660              	.LBE335:
1431:src/display.c **** 	    return;
 3661              		.loc 1 1431 6 is_stmt 1 view .LVU1128
 3662              	.LBB337:
 329:src/display.c ****   if (res) *res++ = ch;
 3663              		.loc 1 329 14 view .LVU1129
 3664              	.LBB332:
 330:src/display.c ****   else	set_dig(base, ch);
 3665              		.loc 1 330 3 view .LVU1130
 3666              	.L277:
 331:src/display.c ****   return res;
 3667              		.loc 1 331 8 view .LVU1131
 3668 0378 3021     		movs	r1, #48
 3669 037a 6320     		movs	r0, #99
 3670 037c FFF7FEFF 		bl	set_dig
 3671              	.LVL422:
 3672 0380 BFE6     		b	.L267
 3673              	.LVL423:
 3674              	.L298:
 331:src/display.c ****   return res;
 3675              		.loc 1 331 8 is_stmt 0 view .LVU1132
 3676              	.LBE332:
 3677              	.LBE337:
 3678              	.LBB338:
1514:src/display.c **** 	  buf[i] = '\0';
 3679              		.loc 1 1514 6 is_stmt 1 view .LVU1133
1514:src/display.c **** 	  buf[i] = '\0';
 3680              		.loc 1 1514 20 is_stmt 0 view .LVU1134
 3681 0382 0D4A     		ldr	r2, .L361
 3682 0384 6FF3C503 		bfc	r3, #3, #3
 3683 0388 1375     		strb	r3, [r2, #20]
 3684 038a 0027     		movs	r7, #0
 3685 038c 05E7     		b	.L299
 3686              	.LVL424:
 3687              	.L300:
1521:src/display.c **** 	    int ch = buf[j++];
 3688              		.loc 1 1521 14 is_stmt 1 discriminator 1 view .LVU1135
1521:src/display.c **** 	    int ch = buf[j++];
 3689              		.loc 1 1521 4 is_stmt 0 discriminator 1 view .LVU1136
 3690 038e 03F1FF38 		add	r8, r3, #-1
 3691              	.LVL425:
ARM GAS  /tmp/ccDDbRKQ.s 			page 144


1521:src/display.c **** 	    int ch = buf[j++];
 3692              		.loc 1 1521 4 discriminator 1 view .LVU1137
 3693 0392 002B     		cmp	r3, #0
 3694 0394 7FF414AF 		bne	.L302
1530:src/display.c **** 	    if (dig >= 0)
 3695              		.loc 1 1530 4 is_stmt 1 view .LVU1138
1530:src/display.c **** 	    if (dig >= 0)
 3696              		.loc 1 1530 7 is_stmt 0 view .LVU1139
 3697 0398 049B     		ldr	r3, [sp, #16]
 3698 039a 002B     		cmp	r3, #0
 3699 039c 3FF4B1AE 		beq	.L267
 3700 03a0 4FF0630B 		mov	fp, #99
 3701 03a4 3BE7     		b	.L310
 3702              	.LVL426:
 3703              	.L355:
1507:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3704              		.loc 1 1507 33 view .LVU1140
 3705 03a6 0C26     		movs	r6, #12
 3706 03a8 E6E6     		b	.L296
 3707              	.LVL427:
 3708              	.L357:
1533:src/display.c **** 	  }
 3709              		.loc 1 1533 11 is_stmt 1 view .LVU1141
 3710              	.LBB325:
 3711              	.LBI325:
 234:src/display.c **** {
 3712              		.loc 1 234 13 view .LVU1142
 3713              	.LBB326:
 236:src/display.c **** }
 3714              		.loc 1 236 3 view .LVU1143
 3715 03aa 8120     		movs	r0, #129
 3716 03ac FFF7FEFF 		bl	set_dot
 3717              	.LVL428:
 237:src/display.c **** 
 3718              		.loc 1 237 1 is_stmt 0 view .LVU1144
 3719 03b0 A7E6     		b	.L267
 3720              	.LVL429:
 3721              	.L313:
 237:src/display.c **** 
 3722              		.loc 1 237 1 view .LVU1145
 3723              	.LBE326:
 3724              	.LBE325:
 3725              	.LBE338:
 3726              	.LBB339:
1465:src/display.c **** 	      const int r = v % b;
 3727              		.loc 1 1465 6 view .LVU1146
 3728 03b2 4FF0FF31 		mov	r1, #-1
 3729 03b6 8EE6     		b	.L280
 3730              	.L362:
 3731              		.align	2
 3732              	.L361:
 3733 03b8 00000000 		.word	StateWhileOn
 3734              	.LBE339:
 3735              		.cfi_endproc
 3736              	.LFE18:
 3738              		.section	.text.getdig,"ax",%progbits
 3739              		.align	1
ARM GAS  /tmp/ccDDbRKQ.s 			page 145


 3740              		.p2align 2,,3
 3741              		.global	getdig
 3742              		.syntax unified
 3743              		.thumb
 3744              		.thumb_func
 3745              		.fpu fpv4-sp-d16
 3747              	getdig:
 3748              	.LVL430:
 3749              	.LFB6:
 268:src/display.c ****   // perform index lookup
 3750              		.loc 1 268 1 is_stmt 1 view -0
 3751              		.cfi_startproc
 3752              		@ args = 0, pretend = 0, frame = 0
 3753              		@ frame_needed = 0, uses_anonymous_args = 0
 3754              		@ link register save eliminated.
 270:src/display.c **** }
 3755              		.loc 1 270 3 view .LVU1148
 270:src/display.c **** }
 3756              		.loc 1 270 16 is_stmt 0 view .LVU1149
 3757 0000 014B     		ldr	r3, .L364
 270:src/display.c **** }
 3758              		.loc 1 270 19 view .LVU1150
 3759 0002 C0B2     		uxtb	r0, r0
 3760              	.LVL431:
 271:src/display.c **** 
 3761              		.loc 1 271 1 view .LVU1151
 3762 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 3763 0006 7047     		bx	lr
 3764              	.L365:
 3765              		.align	2
 3766              	.L364:
 3767 0008 00000000 		.word	.LANCHOR2
 3768              		.cfi_endproc
 3769              	.LFE6:
 3771              		.section	.text.dot,"ax",%progbits
 3772              		.align	1
 3773              		.p2align 2,,3
 3774              		.global	dot
 3775              		.syntax unified
 3776              		.thumb
 3777              		.thumb_func
 3778              		.fpu fpv4-sp-d16
 3780              	dot:
 3781              	.LVL432:
 3782              	.LFB7:
 273:src/display.c ****   if (on)	set_dot(n);
 3783              		.loc 1 273 25 is_stmt 1 view -0
 3784              		.cfi_startproc
 3785              		@ args = 0, pretend = 0, frame = 0
 3786              		@ frame_needed = 0, uses_anonymous_args = 0
 3787              		@ link register save eliminated.
 274:src/display.c ****   else	clr_dot(n);
 3788              		.loc 1 274 3 view .LVU1153
 274:src/display.c ****   else	clr_dot(n);
 3789              		.loc 1 274 6 is_stmt 0 view .LVU1154
 3790 0000 09B1     		cbz	r1, .L367
 274:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccDDbRKQ.s 			page 146


 3791              		.loc 1 274 11 is_stmt 1 discriminator 1 view .LVU1155
 3792 0002 FFF7FEBF 		b	set_dot
 3793              	.LVL433:
 3794              	.L367:
 275:src/display.c **** }
 3795              		.loc 1 275 8 view .LVU1156
 3796 0006 FFF7FEBF 		b	clr_dot
 3797              	.LVL434:
 275:src/display.c **** }
 3798              		.loc 1 275 8 is_stmt 0 view .LVU1157
 3799              		.cfi_endproc
 3800              	.LFE7:
 3802 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 3803              		.align	1
 3804              		.p2align 2,,3
 3805              		.global	std_round_fix
 3806              		.syntax unified
 3807              		.thumb
 3808              		.thumb_func
 3809              		.fpu fpv4-sp-d16
 3811              	std_round_fix:
 3812              	.LVL435:
 3813              	.LFB24:
1741:src/display.c **** 	decNumber c;
 3814              		.loc 1 1741 93 is_stmt 1 view -0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 40
 3817              		@ frame_needed = 0, uses_anonymous_args = 0
1741:src/display.c **** 	decNumber c;
 3818              		.loc 1 1741 93 is_stmt 0 view .LVU1159
 3819 0000 70B5     		push	{r4, r5, r6, lr}
 3820              		.cfi_def_cfa_offset 16
 3821              		.cfi_offset 4, -16
 3822              		.cfi_offset 5, -12
 3823              		.cfi_offset 6, -8
 3824              		.cfi_offset 14, -4
 3825 0002 0E46     		mov	r6, r1
1742:src/display.c **** 	int true_exp, x=0;
 3826              		.loc 1 1742 2 is_stmt 1 view .LVU1160
1743:src/display.c **** 	int min_pos_exp, max_neg_exp;
 3827              		.loc 1 1743 2 view .LVU1161
 3828              	.LVL436:
1744:src/display.c **** 
 3829              		.loc 1 1744 2 view .LVU1162
1746:src/display.c **** 	  min_pos_exp = 9;
 3830              		.loc 1 1746 2 view .LVU1163
1741:src/display.c **** 	decNumber c;
 3831              		.loc 1 1741 93 is_stmt 0 view .LVU1164
 3832 0004 8AB0     		sub	sp, sp, #40
 3833              		.cfi_def_cfa_offset 56
1746:src/display.c **** 	  min_pos_exp = 9;
 3834              		.loc 1 1746 5 view .LVU1165
 3835 0006 92B9     		cbnz	r2, .L369
1751:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 3836              		.loc 1 1751 4 is_stmt 1 view .LVU1166
 3837              	.LVL437:
1752:src/display.c **** 	}
ARM GAS  /tmp/ccDDbRKQ.s 			page 147


 3838              		.loc 1 1752 4 view .LVU1167
1755:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3839              		.loc 1 1755 2 view .LVU1168
 3840 0008 0146     		mov	r1, r0
 3841              	.LVL438:
1755:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3842              		.loc 1 1755 2 is_stmt 0 view .LVU1169
 3843 000a 01A8     		add	r0, sp, #4
 3844              	.LVL439:
1755:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3845              		.loc 1 1755 2 view .LVU1170
 3846 000c 1D46     		mov	r5, r3
 3847 000e FFF7FEFF 		bl	dn_abs
 3848              	.LVL440:
1756:src/display.c **** 
 3849              		.loc 1 1756 2 is_stmt 1 view .LVU1171
1756:src/display.c **** 
 3850              		.loc 1 1756 24 is_stmt 0 view .LVU1172
 3851 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 3852 0016 1844     		add	r0, r0, r3
 3853              	.LVL441:
1758:src/display.c **** 	  x = *dd;
 3854              		.loc 1 1758 2 is_stmt 1 view .LVU1173
1762:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3855              		.loc 1 1762 2 view .LVU1174
1762:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3856              		.loc 1 1762 5 is_stmt 0 view .LVU1175
 3857 0018 0138     		subs	r0, r0, #1
 3858 001a 1AD5     		bpl	.L373
1752:src/display.c **** 	}
 3859              		.loc 1 1752 16 view .LVU1176
 3860 001c EB43     		mvns	r3, r5
1762:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3861              		.loc 1 1762 21 view .LVU1177
 3862 001e 8342     		cmp	r3, r0
 3863 0020 17DA     		bge	.L373
 3864              	.LVL442:
 3865              	.L375:
1764:src/display.c **** 	  return MODE_FIX;
 3866              		.loc 1 1764 4 is_stmt 1 view .LVU1178
1764:src/display.c **** 	  return MODE_FIX;
 3867              		.loc 1 1764 8 is_stmt 0 view .LVU1179
 3868 0022 3368     		ldr	r3, [r6]
 3869 0024 181A     		subs	r0, r3, r0
 3870 0026 3060     		str	r0, [r6]
1765:src/display.c **** 	}
 3871              		.loc 1 1765 4 is_stmt 1 view .LVU1180
1765:src/display.c **** 	}
 3872              		.loc 1 1765 11 is_stmt 0 view .LVU1181
 3873 0028 0120     		movs	r0, #1
1774:src/display.c **** #else
 3874              		.loc 1 1774 7 view .LVU1182
 3875 002a 0AB0     		add	sp, sp, #40
 3876              		.cfi_remember_state
 3877              		.cfi_def_cfa_offset 16
 3878              		@ sp needed
 3879 002c 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccDDbRKQ.s 			page 148


 3880              	.LVL443:
 3881              	.L369:
 3882              		.cfi_restore_state
1755:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3883              		.loc 1 1755 2 is_stmt 1 view .LVU1183
 3884 002e 0146     		mov	r1, r0
 3885              	.LVL444:
1755:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3886              		.loc 1 1755 2 is_stmt 0 view .LVU1184
 3887 0030 01A8     		add	r0, sp, #4
 3888              	.LVL445:
1755:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3889              		.loc 1 1755 2 view .LVU1185
 3890 0032 1446     		mov	r4, r2
 3891 0034 FFF7FEFF 		bl	dn_abs
 3892              	.LVL446:
1756:src/display.c **** 
 3893              		.loc 1 1756 2 is_stmt 1 view .LVU1186
1756:src/display.c **** 
 3894              		.loc 1 1756 24 is_stmt 0 view .LVU1187
 3895 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1758:src/display.c **** 	  x = *dd;
 3896              		.loc 1 1758 5 view .LVU1188
 3897 003c 052C     		cmp	r4, #5
1756:src/display.c **** 
 3898              		.loc 1 1756 24 view .LVU1189
 3899 003e 1344     		add	r3, r3, r2
1756:src/display.c **** 
 3900              		.loc 1 1756 11 view .LVU1190
 3901 0040 03F1FF30 		add	r0, r3, #-1
 3902              	.LVL447:
1758:src/display.c **** 	  x = *dd;
 3903              		.loc 1 1758 2 is_stmt 1 view .LVU1191
1758:src/display.c **** 	  x = *dd;
 3904              		.loc 1 1758 5 is_stmt 0 view .LVU1192
 3905 0044 15D1     		bne	.L377
1759:src/display.c **** 	}
 3906              		.loc 1 1759 4 is_stmt 1 view .LVU1193
1759:src/display.c **** 	}
 3907              		.loc 1 1759 6 is_stmt 0 view .LVU1194
 3908 0046 3268     		ldr	r2, [r6]
 3909              	.LVL448:
 3910              	.L372:
1762:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3911              		.loc 1 1762 2 is_stmt 1 view .LVU1195
1762:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3912              		.loc 1 1762 5 is_stmt 0 view .LVU1196
 3913 0048 8242     		cmp	r2, r0
 3914 004a 05DC     		bgt	.L381
1768:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 3915              		.loc 1 1768 53 discriminator 2 view .LVU1197
 3916 004c 0333     		adds	r3, r3, #3
 3917 004e 0C2B     		cmp	r3, #12
 3918 0050 04D8     		bhi	.L376
 3919              	.LVL449:
 3920              	.L373:
1772:src/display.c **** 	}
ARM GAS  /tmp/ccDDbRKQ.s 			page 149


 3921              		.loc 1 1772 11 view .LVU1198
 3922 0052 0020     		movs	r0, #0
1774:src/display.c **** #else
 3923              		.loc 1 1774 7 view .LVU1199
 3924 0054 0AB0     		add	sp, sp, #40
 3925              		.cfi_remember_state
 3926              		.cfi_def_cfa_offset 16
 3927              		@ sp needed
 3928 0056 70BD     		pop	{r4, r5, r6, pc}
 3929              	.LVL450:
 3930              	.L381:
 3931              		.cfi_restore_state
1762:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3932              		.loc 1 1762 21 view .LVU1200
 3933 0058 031D     		adds	r3, r0, #4
 3934 005a E2DA     		bge	.L375
 3935              	.L376:
 3936              	.LBB342:
 3937              	.LBI342:
1741:src/display.c **** 	decNumber c;
 3938              		.loc 1 1741 26 is_stmt 1 view .LVU1201
 3939              	.LVL451:
 3940              	.LBB343:
1769:src/display.c **** 	}
 3941              		.loc 1 1769 4 view .LVU1202
1769:src/display.c **** 	}
 3942              		.loc 1 1769 24 is_stmt 0 view .LVU1203
 3943 005c 064B     		ldr	r3, .L382
 3944 005e 1B68     		ldr	r3, [r3]
 3945 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1769:src/display.c **** 	}
 3946              		.loc 1 1769 33 view .LVU1204
 3947 0064 13F0100F 		tst	r3, #16
 3948 0068 14BF     		ite	ne
 3949 006a 0320     		movne	r0, #3
 3950 006c 0220     		moveq	r0, #2
 3951              	.LBE343:
 3952              	.LBE342:
1774:src/display.c **** #else
 3953              		.loc 1 1774 7 view .LVU1205
 3954 006e 0AB0     		add	sp, sp, #40
 3955              		.cfi_remember_state
 3956              		.cfi_def_cfa_offset 16
 3957              		@ sp needed
 3958 0070 70BD     		pop	{r4, r5, r6, pc}
 3959              	.LVL452:
 3960              	.L377:
 3961              		.cfi_restore_state
1743:src/display.c **** 	int min_pos_exp, max_neg_exp;
 3962              		.loc 1 1743 16 view .LVU1206
 3963 0072 0022     		movs	r2, #0
 3964 0074 E8E7     		b	.L372
 3965              	.L383:
 3966 0076 00BF     		.align	2
 3967              	.L382:
 3968 0078 00000000 		.word	main_ram
 3969              		.cfi_endproc
ARM GAS  /tmp/ccDDbRKQ.s 			page 150


 3970              	.LFE24:
 3972              		.section	.text.set_IO_annunciator,"ax",%progbits
 3973              		.align	1
 3974              		.p2align 2,,3
 3975              		.global	set_IO_annunciator
 3976              		.syntax unified
 3977              		.thumb
 3978              		.thumb_func
 3979              		.fpu fpv4-sp-d16
 3981              	set_IO_annunciator:
 3982              	.LFB33:
2548:src/display.c **** #ifndef DM42
 3983              		.loc 1 2548 37 is_stmt 1 view -0
 3984              		.cfi_startproc
 3985              		@ args = 0, pretend = 0, frame = 0
 3986              		@ frame_needed = 0, uses_anonymous_args = 0
2553:src/display.c **** #endif
 3987              		.loc 1 2553 4 view .LVU1208
2548:src/display.c **** #ifndef DM42
 3988              		.loc 1 2548 37 is_stmt 0 view .LVU1209
 3989 0000 38B5     		push	{r3, r4, r5, lr}
 3990              		.cfi_def_cfa_offset 16
 3991              		.cfi_offset 3, -16
 3992              		.cfi_offset 4, -12
 3993              		.cfi_offset 5, -8
 3994              		.cfi_offset 14, -4
2559:src/display.c **** #endif
 3995              		.loc 1 2559 4 view .LVU1210
 3996 0002 0D4B     		ldr	r3, .L390
2563:src/display.c **** 	  dot(LIT_EQ, on);
 3997              		.loc 1 2563 9 view .LVU1211
 3998 0004 0D4C     		ldr	r4, .L390+4
2559:src/display.c **** #endif
 3999              		.loc 1 2559 4 view .LVU1212
 4000 0006 1B68     		ldr	r3, [r3]
2563:src/display.c **** 	  dot(LIT_EQ, on);
 4001              		.loc 1 2563 5 view .LVU1213
 4002 0008 2268     		ldr	r2, [r4]
2559:src/display.c **** #endif
 4003              		.loc 1 2559 4 view .LVU1214
 4004 000a 1D1E     		subs	r5, r3, #0
 4005 000c 18BF     		it	ne
 4006 000e 0125     		movne	r5, #1
 4007              	.LVL453:
2563:src/display.c **** 	  dot(LIT_EQ, on);
 4008              		.loc 1 2563 2 is_stmt 1 view .LVU1215
2563:src/display.c **** 	  dot(LIT_EQ, on);
 4009              		.loc 1 2563 5 is_stmt 0 view .LVU1216
 4010 0010 AA42     		cmp	r2, r5
 4011 0012 0FD0     		beq	.L384
2564:src/display.c **** 	  IoAnnunciator = on;
 4012              		.loc 1 2564 4 is_stmt 1 view .LVU1217
 4013              	.LVL454:
 4014              	.LBB344:
 4015              	.LBI344:
 273:src/display.c ****   if (on)	set_dot(n);
 4016              		.loc 1 273 6 view .LVU1218
ARM GAS  /tmp/ccDDbRKQ.s 			page 151


 4017              	.LBB345:
 274:src/display.c ****   else	clr_dot(n);
 4018              		.loc 1 274 3 view .LVU1219
 274:src/display.c ****   else	clr_dot(n);
 4019              		.loc 1 274 11 is_stmt 0 view .LVU1220
 4020 0014 8420     		movs	r0, #132
 274:src/display.c ****   else	clr_dot(n);
 4021              		.loc 1 274 6 view .LVU1221
 4022 0016 33B9     		cbnz	r3, .L389
 275:src/display.c **** }
 4023              		.loc 1 275 8 is_stmt 1 view .LVU1222
 4024 0018 FFF7FEFF 		bl	clr_dot
 4025              	.LVL455:
 275:src/display.c **** }
 4026              		.loc 1 275 8 is_stmt 0 view .LVU1223
 4027              	.LBE345:
 4028              	.LBE344:
2565:src/display.c **** 	  finish_display(); //LIT_EQ
 4029              		.loc 1 2565 4 is_stmt 1 view .LVU1224
2565:src/display.c **** 	  finish_display(); //LIT_EQ
 4030              		.loc 1 2565 18 is_stmt 0 view .LVU1225
 4031 001c 2560     		str	r5, [r4]
2566:src/display.c **** 	}
 4032              		.loc 1 2566 4 is_stmt 1 view .LVU1226
2568:src/display.c **** 
 4033              		.loc 1 2568 7 is_stmt 0 view .LVU1227
 4034 001e BDE83840 		pop	{r3, r4, r5, lr}
 4035              		.cfi_remember_state
 4036              		.cfi_restore 14
 4037              		.cfi_restore 5
 4038              		.cfi_restore 4
 4039              		.cfi_restore 3
 4040              		.cfi_def_cfa_offset 0
 4041              	.LVL456:
2566:src/display.c **** 	}
 4042              		.loc 1 2566 4 view .LVU1228
 4043 0022 FFF7FEBF 		b	finish_display
 4044              	.LVL457:
 4045              	.L389:
 4046              		.cfi_restore_state
 4047              	.LBB347:
 4048              	.LBB346:
 274:src/display.c ****   else	clr_dot(n);
 4049              		.loc 1 274 11 is_stmt 1 view .LVU1229
 4050 0026 FFF7FEFF 		bl	set_dot
 4051              	.LVL458:
 274:src/display.c ****   else	clr_dot(n);
 4052              		.loc 1 274 11 is_stmt 0 view .LVU1230
 4053              	.LBE346:
 4054              	.LBE347:
2565:src/display.c **** 	  finish_display(); //LIT_EQ
 4055              		.loc 1 2565 4 is_stmt 1 view .LVU1231
2565:src/display.c **** 	  finish_display(); //LIT_EQ
 4056              		.loc 1 2565 18 is_stmt 0 view .LVU1232
 4057 002a 2560     		str	r5, [r4]
2566:src/display.c **** 	}
 4058              		.loc 1 2566 4 is_stmt 1 view .LVU1233
ARM GAS  /tmp/ccDDbRKQ.s 			page 152


2568:src/display.c **** 
 4059              		.loc 1 2568 7 is_stmt 0 view .LVU1234
 4060 002c BDE83840 		pop	{r3, r4, r5, lr}
 4061              		.cfi_remember_state
 4062              		.cfi_restore 14
 4063              		.cfi_restore 5
 4064              		.cfi_restore 4
 4065              		.cfi_restore 3
 4066              		.cfi_def_cfa_offset 0
 4067              	.LVL459:
2566:src/display.c **** 	}
 4068              		.loc 1 2566 4 view .LVU1235
 4069 0030 FFF7FEBF 		b	finish_display
 4070              	.LVL460:
 4071              	.L384:
 4072              		.cfi_restore_state
2568:src/display.c **** 
 4073              		.loc 1 2568 7 view .LVU1236
 4074 0034 38BD     		pop	{r3, r4, r5, pc}
 4075              	.LVL461:
 4076              	.L391:
2568:src/display.c **** 
 4077              		.loc 1 2568 7 view .LVU1237
 4078 0036 00BF     		.align	2
 4079              	.L390:
 4080 0038 00000000 		.word	PrinterColumn
 4081 003c 00000000 		.word	IoAnnunciator
 4082              		.cfi_endproc
 4083              	.LFE33:
 4085              		.section	.text.set_annunciators,"ax",%progbits
 4086              		.align	1
 4087              		.p2align 2,,3
 4088              		.syntax unified
 4089              		.thumb
 4090              		.thumb_func
 4091              		.fpu fpv4-sp-d16
 4093              	set_annunciators:
 4094              	.LFB32:
2517:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4095              		.loc 1 2517 7 is_stmt 1 view -0
 4096              		.cfi_startproc
 4097              		@ args = 0, pretend = 0, frame = 0
 4098              		@ frame_needed = 0, uses_anonymous_args = 0
2518:src/display.c **** 
 4099              		.loc 1 2518 2 view .LVU1239
2517:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4100              		.loc 1 2517 7 is_stmt 0 view .LVU1240
 4101 0000 70B5     		push	{r4, r5, r6, lr}
 4102              		.cfi_def_cfa_offset 16
 4103              		.cfi_offset 4, -16
 4104              		.cfi_offset 5, -12
 4105              		.cfi_offset 6, -8
 4106              		.cfi_offset 14, -4
2525:src/display.c **** #else
 4107              		.loc 1 2525 11 view .LVU1241
 4108 0002 364C     		ldr	r4, .L422
2518:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 153


 4109              		.loc 1 2518 29 view .LVU1242
 4110 0004 FFF7FEFF 		bl	get_trig_mode
 4111              	.LVL462:
2525:src/display.c **** #else
 4112              		.loc 1 2525 11 view .LVU1243
 4113 0008 2368     		ldr	r3, [r4]
 4114 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2525:src/display.c **** #else
 4115              		.loc 1 2525 2 view .LVU1244
 4116 000e 1B07     		lsls	r3, r3, #28
2518:src/display.c **** 
 4117              		.loc 1 2518 29 view .LVU1245
 4118 0010 0546     		mov	r5, r0
 4119              	.LVL463:
2525:src/display.c **** #else
 4120              		.loc 1 2525 2 is_stmt 1 view .LVU1246
 4121              	.LBB348:
 4122              	.LBB349:
 274:src/display.c ****   else	clr_dot(n);
 4123              		.loc 1 274 11 is_stmt 0 view .LVU1247
 4124 0012 4FF08800 		mov	r0, #136
 4125              	.LBE349:
 4126              	.LBE348:
2525:src/display.c **** #else
 4127              		.loc 1 2525 2 view .LVU1248
 4128 0016 03D5     		bpl	.L393
2525:src/display.c **** #else
 4129              		.loc 1 2525 33 discriminator 1 view .LVU1249
 4130 0018 314B     		ldr	r3, .L422+4
2525:src/display.c **** #else
 4131              		.loc 1 2525 2 discriminator 1 view .LVU1250
 4132 001a 1B68     		ldr	r3, [r3]
 4133 001c 002B     		cmp	r3, #0
 4134 001e 5AD0     		beq	.L419
 4135              	.L393:
 4136              	.LVL464:
 4137              	.LBB352:
 4138              	.LBI348:
 273:src/display.c ****   if (on)	set_dot(n);
 4139              		.loc 1 273 6 is_stmt 1 view .LVU1251
 4140              	.LBB350:
 274:src/display.c ****   else	clr_dot(n);
 4141              		.loc 1 274 3 view .LVU1252
 275:src/display.c **** }
 4142              		.loc 1 275 8 view .LVU1253
 4143 0020 FFF7FEFF 		bl	clr_dot
 4144              	.LVL465:
 4145              	.L394:
 275:src/display.c **** }
 4146              		.loc 1 275 8 is_stmt 0 view .LVU1254
 4147              	.LBE350:
 4148              	.LBE352:
2530:src/display.c **** #endif
 4149              		.loc 1 2530 2 is_stmt 1 view .LVU1255
2530:src/display.c **** #endif
 4150              		.loc 1 2530 14 is_stmt 0 view .LVU1256
 4151 0024 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccDDbRKQ.s 			page 154


 4152 0026 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2530:src/display.c **** #endif
 4153              		.loc 1 2530 2 view .LVU1257
 4154 002a 5607     		lsls	r6, r2, #29
 4155              	.LBB353:
 4156              	.LBB354:
 274:src/display.c ****   else	clr_dot(n);
 4157              		.loc 1 274 11 view .LVU1258
 4158 002c 4FF08400 		mov	r0, #132
 4159              	.LBE354:
 4160              	.LBE353:
2530:src/display.c **** #endif
 4161              		.loc 1 2530 2 view .LVU1259
 4162 0030 03D5     		bpl	.L395
2530:src/display.c **** #endif
 4163              		.loc 1 2530 14 discriminator 1 view .LVU1260
 4164 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
2530:src/display.c **** #endif
 4165              		.loc 1 2530 2 discriminator 1 view .LVU1261
 4166 0036 5907     		lsls	r1, r3, #29
 4167 0038 4AD4     		bmi	.L396
 4168              	.L395:
 4169              	.LVL466:
 4170              	.LBB357:
 4171              	.LBI353:
 273:src/display.c ****   if (on)	set_dot(n);
 4172              		.loc 1 273 6 is_stmt 1 view .LVU1262
 4173              	.LBB355:
 274:src/display.c ****   else	clr_dot(n);
 4174              		.loc 1 274 3 view .LVU1263
 275:src/display.c **** }
 4175              		.loc 1 275 8 view .LVU1264
 4176 003a FFF7FEFF 		bl	clr_dot
 4177              	.LVL467:
 4178              	.L397:
 275:src/display.c **** }
 4179              		.loc 1 275 8 is_stmt 0 view .LVU1265
 4180              	.LBE355:
 4181              	.LBE357:
2533:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4182              		.loc 1 2533 2 is_stmt 1 view .LVU1266
2533:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4183              		.loc 1 2533 19 is_stmt 0 view .LVU1267
 4184 003e 294E     		ldr	r6, .L422+8
2533:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4185              		.loc 1 2533 2 view .LVU1268
 4186 0040 B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4187              	.LBB358:
 4188              	.LBB359:
 274:src/display.c ****   else	clr_dot(n);
 4189              		.loc 1 274 11 view .LVU1269
 4190 0042 8620     		movs	r0, #134
 4191              	.LBE359:
 4192              	.LBE358:
2533:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4193              		.loc 1 2533 2 view .LVU1270
 4194 0044 23B9     		cbnz	r3, .L398
ARM GAS  /tmp/ccDDbRKQ.s 			page 155


2533:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4195              		.loc 1 2533 47 discriminator 2 view .LVU1271
 4196 0046 7269     		ldr	r2, [r6, #20]
 4197 0048 274B     		ldr	r3, .L422+12
 4198 004a 1340     		ands	r3, r3, r2
2533:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4199              		.loc 1 2533 2 discriminator 2 view .LVU1272
 4200 004c 002B     		cmp	r3, #0
 4201 004e 3CD0     		beq	.L420
 4202              	.L398:
 4203              	.LBB362:
 4204              	.LBB360:
 274:src/display.c ****   else	clr_dot(n);
 4205              		.loc 1 274 11 is_stmt 1 view .LVU1273
 4206 0050 FFF7FEFF 		bl	set_dot
 4207              	.LVL468:
 4208              	.L399:
 4209              	.LBE360:
 4210              	.LBE362:
2534:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4211              		.loc 1 2534 2 view .LVU1274
2534:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4212              		.loc 1 2534 31 is_stmt 0 view .LVU1275
 4213 0054 254A     		ldr	r2, .L422+16
 4214 0056 7369     		ldr	r3, [r6, #20]
2534:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4215              		.loc 1 2534 2 view .LVU1276
 4216 0058 1A42     		tst	r2, r3
 4217              	.LBB363:
 4218              	.LBB364:
 274:src/display.c ****   else	clr_dot(n);
 4219              		.loc 1 274 11 view .LVU1277
 4220 005a 4FF08500 		mov	r0, #133
 4221              	.LBE364:
 4222              	.LBE363:
2534:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4223              		.loc 1 2534 2 view .LVU1278
 4224 005e 02D0     		beq	.L400
2534:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4225              		.loc 1 2534 48 discriminator 1 view .LVU1279
 4226 0060 B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2534:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4227              		.loc 1 2534 2 discriminator 1 view .LVU1280
 4228 0062 DA06     		lsls	r2, r3, #27
 4229 0064 2ED4     		bmi	.L401
 4230              	.L400:
 4231              	.LVL469:
 4232              	.LBB367:
 4233              	.LBI363:
 273:src/display.c ****   if (on)	set_dot(n);
 4234              		.loc 1 273 6 is_stmt 1 view .LVU1281
 4235              	.LBB365:
 274:src/display.c ****   else	clr_dot(n);
 4236              		.loc 1 274 3 view .LVU1282
 275:src/display.c **** }
 4237              		.loc 1 275 8 view .LVU1283
 4238 0066 FFF7FEFF 		bl	clr_dot
ARM GAS  /tmp/ccDDbRKQ.s 			page 156


 4239              	.LVL470:
 4240              	.L402:
 275:src/display.c **** }
 4241              		.loc 1 275 8 is_stmt 0 view .LVU1284
 4242              	.LBE365:
 4243              	.LBE367:
2535:src/display.c **** 	set_IO_annunciator();
 4244              		.loc 1 2535 2 is_stmt 1 view .LVU1285
 4245 006a 6820     		movs	r0, #104
 4246 006c FFF7FEFF 		bl	get_user_flag
 4247              	.LVL471:
 4248              	.LBB368:
 4249              	.LBI368:
 273:src/display.c ****   if (on)	set_dot(n);
 4250              		.loc 1 273 6 view .LVU1286
 4251              	.LBB369:
 274:src/display.c ****   else	clr_dot(n);
 4252              		.loc 1 274 3 view .LVU1287
 274:src/display.c ****   else	clr_dot(n);
 4253              		.loc 1 274 6 is_stmt 0 view .LVU1288
 4254 0070 20B3     		cbz	r0, .L403
 274:src/display.c ****   else	clr_dot(n);
 4255              		.loc 1 274 11 is_stmt 1 view .LVU1289
 4256 0072 8320     		movs	r0, #131
 4257              	.LVL472:
 274:src/display.c ****   else	clr_dot(n);
 4258              		.loc 1 274 11 is_stmt 0 view .LVU1290
 4259 0074 FFF7FEFF 		bl	set_dot
 4260              	.LVL473:
 4261              	.L404:
 274:src/display.c ****   else	clr_dot(n);
 4262              		.loc 1 274 11 view .LVU1291
 4263              	.LBE369:
 4264              	.LBE368:
2536:src/display.c **** 
 4265              		.loc 1 2536 2 is_stmt 1 view .LVU1292
 4266 0078 FFF7FEFF 		bl	set_IO_annunciator
 4267              	.LVL474:
2540:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4268              		.loc 1 2540 2 view .LVU1293
2540:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4269              		.loc 1 2540 11 is_stmt 0 view .LVU1294
 4270 007c 2368     		ldr	r3, [r4]
 4271 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4272 0082 03F00103 		and	r3, r3, #1
2540:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4273              		.loc 1 2540 2 view .LVU1295
 4274 0086 2B43     		orrs	r3, r3, r5
 4275 0088 13F0FF0F 		tst	r3, #255
 4276              	.LBB371:
 4277              	.LBB372:
 274:src/display.c ****   else	clr_dot(n);
 4278              		.loc 1 274 11 view .LVU1296
 4279 008c 4FF08C00 		mov	r0, #140
 4280              	.LBE372:
 4281              	.LBE371:
2540:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
ARM GAS  /tmp/ccDDbRKQ.s 			page 157


 4282              		.loc 1 2540 2 view .LVU1297
 4283 0090 06D1     		bne	.L421
 4284              	.LVL475:
 4285              	.LBB375:
 4286              	.LBI371:
 273:src/display.c ****   if (on)	set_dot(n);
 4287              		.loc 1 273 6 is_stmt 1 view .LVU1298
 4288              	.LBB373:
 274:src/display.c ****   else	clr_dot(n);
 4289              		.loc 1 274 3 view .LVU1299
 274:src/display.c ****   else	clr_dot(n);
 4290              		.loc 1 274 11 view .LVU1300
 4291 0092 FFF7FEFF 		bl	set_dot
 4292              	.LVL476:
 274:src/display.c ****   else	clr_dot(n);
 4293              		.loc 1 274 11 is_stmt 0 view .LVU1301
 4294              	.LBE373:
 4295              	.LBE375:
2541:src/display.c ****       }
 4296              		.loc 1 2541 2 is_stmt 1 view .LVU1302
 4297              	.L407:
 4298              	.LBB376:
 4299              	.LBI376:
 273:src/display.c ****   if (on)	set_dot(n);
 4300              		.loc 1 273 6 view .LVU1303
 4301              	.LBB377:
 274:src/display.c ****   else	clr_dot(n);
 4302              		.loc 1 274 3 view .LVU1304
 275:src/display.c **** }
 4303              		.loc 1 275 8 view .LVU1305
 4304              	.LBE377:
 4305              	.LBE376:
2542:src/display.c **** 
 4306              		.loc 1 2542 7 is_stmt 0 view .LVU1306
 4307 0096 BDE87040 		pop	{r4, r5, r6, lr}
 4308              		.cfi_remember_state
 4309              		.cfi_restore 14
 4310              		.cfi_restore 6
 4311              		.cfi_restore 5
 4312              		.cfi_restore 4
 4313              		.cfi_def_cfa_offset 0
 4314              	.LVL477:
 4315              	.LBB381:
 4316              	.LBB378:
 275:src/display.c **** }
 4317              		.loc 1 275 8 view .LVU1307
 4318 009a 8B20     		movs	r0, #139
 4319 009c FFF7FEBF 		b	clr_dot
 4320              	.LVL478:
 4321              	.L421:
 4322              		.cfi_restore_state
 275:src/display.c **** }
 4323              		.loc 1 275 8 view .LVU1308
 4324              	.LBE378:
 4325              	.LBE381:
 4326              	.LBB382:
 273:src/display.c ****   if (on)	set_dot(n);
ARM GAS  /tmp/ccDDbRKQ.s 			page 158


 4327              		.loc 1 273 6 is_stmt 1 view .LVU1309
 4328              	.LBB374:
 274:src/display.c ****   else	clr_dot(n);
 4329              		.loc 1 274 3 view .LVU1310
 275:src/display.c **** }
 4330              		.loc 1 275 8 view .LVU1311
 4331 00a0 FFF7FEFF 		bl	clr_dot
 4332              	.LVL479:
 275:src/display.c **** }
 4333              		.loc 1 275 8 is_stmt 0 view .LVU1312
 4334              	.LBE374:
 4335              	.LBE382:
2541:src/display.c ****       }
 4336              		.loc 1 2541 2 is_stmt 1 view .LVU1313
2541:src/display.c ****       }
 4337              		.loc 1 2541 11 is_stmt 0 view .LVU1314
 4338 00a4 2368     		ldr	r3, [r4]
 4339 00a6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2541:src/display.c ****       }
 4340              		.loc 1 2541 2 view .LVU1315
 4341 00aa DB07     		lsls	r3, r3, #31
 4342 00ac F3D4     		bmi	.L407
2541:src/display.c ****       }
 4343              		.loc 1 2541 2 discriminator 1 view .LVU1316
 4344 00ae 012D     		cmp	r5, #1
 4345 00b0 F1D1     		bne	.L407
 4346              	.LVL480:
 4347              	.LBB383:
 273:src/display.c ****   if (on)	set_dot(n);
 4348              		.loc 1 273 6 is_stmt 1 view .LVU1317
 4349              	.LBB379:
 274:src/display.c ****   else	clr_dot(n);
 4350              		.loc 1 274 3 view .LVU1318
 274:src/display.c ****   else	clr_dot(n);
 4351              		.loc 1 274 11 view .LVU1319
 4352              	.LBE379:
 4353              	.LBE383:
2542:src/display.c **** 
 4354              		.loc 1 2542 7 is_stmt 0 view .LVU1320
 4355 00b2 BDE87040 		pop	{r4, r5, r6, lr}
 4356              		.cfi_remember_state
 4357              		.cfi_restore 14
 4358              		.cfi_restore 6
 4359              		.cfi_restore 5
 4360              		.cfi_restore 4
 4361              		.cfi_def_cfa_offset 0
 4362              	.LVL481:
 4363              	.LBB384:
 4364              	.LBB380:
 274:src/display.c ****   else	clr_dot(n);
 4365              		.loc 1 274 11 view .LVU1321
 4366 00b6 8B20     		movs	r0, #139
 4367 00b8 FFF7FEBF 		b	set_dot
 4368              	.LVL482:
 4369              	.L403:
 4370              		.cfi_restore_state
 274:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccDDbRKQ.s 			page 159


 4371              		.loc 1 274 11 view .LVU1322
 4372              	.LBE380:
 4373              	.LBE384:
 4374              	.LBB385:
 4375              	.LBB370:
 275:src/display.c **** }
 4376              		.loc 1 275 8 is_stmt 1 view .LVU1323
 4377 00bc 8320     		movs	r0, #131
 4378              	.LVL483:
 275:src/display.c **** }
 4379              		.loc 1 275 8 is_stmt 0 view .LVU1324
 4380 00be FFF7FEFF 		bl	clr_dot
 4381              	.LVL484:
 4382 00c2 D9E7     		b	.L404
 4383              	.LVL485:
 4384              	.L401:
 275:src/display.c **** }
 4385              		.loc 1 275 8 view .LVU1325
 4386              	.LBE370:
 4387              	.LBE385:
 4388              	.LBB386:
 273:src/display.c ****   if (on)	set_dot(n);
 4389              		.loc 1 273 6 is_stmt 1 view .LVU1326
 4390              	.LBB366:
 274:src/display.c ****   else	clr_dot(n);
 4391              		.loc 1 274 3 view .LVU1327
 274:src/display.c ****   else	clr_dot(n);
 4392              		.loc 1 274 11 view .LVU1328
 4393 00c4 FFF7FEFF 		bl	set_dot
 4394              	.LVL486:
 4395 00c8 CFE7     		b	.L402
 4396              	.LVL487:
 4397              	.L420:
 274:src/display.c ****   else	clr_dot(n);
 4398              		.loc 1 274 11 is_stmt 0 view .LVU1329
 4399              	.LBE366:
 4400              	.LBE386:
 4401              	.LBB387:
 4402              	.LBI358:
 273:src/display.c ****   if (on)	set_dot(n);
 4403              		.loc 1 273 6 is_stmt 1 view .LVU1330
 4404              	.LBB361:
 274:src/display.c ****   else	clr_dot(n);
 4405              		.loc 1 274 3 view .LVU1331
 275:src/display.c **** }
 4406              		.loc 1 275 8 view .LVU1332
 4407 00ca FFF7FEFF 		bl	clr_dot
 4408              	.LVL488:
 4409 00ce C1E7     		b	.L399
 4410              	.LVL489:
 4411              	.L396:
 275:src/display.c **** }
 4412              		.loc 1 275 8 is_stmt 0 view .LVU1333
 4413              	.LBE361:
 4414              	.LBE387:
 4415              	.LBB388:
 273:src/display.c ****   if (on)	set_dot(n);
ARM GAS  /tmp/ccDDbRKQ.s 			page 160


 4416              		.loc 1 273 6 is_stmt 1 view .LVU1334
 4417              	.LBB356:
 274:src/display.c ****   else	clr_dot(n);
 4418              		.loc 1 274 3 view .LVU1335
 274:src/display.c ****   else	clr_dot(n);
 4419              		.loc 1 274 11 view .LVU1336
 4420 00d0 FFF7FEFF 		bl	set_dot
 4421              	.LVL490:
 4422 00d4 B3E7     		b	.L397
 4423              	.LVL491:
 4424              	.L419:
 274:src/display.c ****   else	clr_dot(n);
 4425              		.loc 1 274 11 is_stmt 0 view .LVU1337
 4426              	.LBE356:
 4427              	.LBE388:
 4428              	.LBB389:
 273:src/display.c ****   if (on)	set_dot(n);
 4429              		.loc 1 273 6 is_stmt 1 view .LVU1338
 4430              	.LBB351:
 274:src/display.c ****   else	clr_dot(n);
 4431              		.loc 1 274 3 view .LVU1339
 274:src/display.c ****   else	clr_dot(n);
 4432              		.loc 1 274 11 view .LVU1340
 4433 00d6 FFF7FEFF 		bl	set_dot
 4434              	.LVL492:
 4435 00da A3E7     		b	.L394
 4436              	.L423:
 4437              		.align	2
 4438              	.L422:
 4439 00dc 00000000 		.word	main_ram
 4440 00e0 00000000 		.word	Running
 4441 00e4 00000000 		.word	StateWhileOn
 4442 00e8 07000800 		.word	524295
 4443 00ec 00080800 		.word	526336
 4444              	.LBE351:
 4445              	.LBE389:
 4446              		.cfi_endproc
 4447              	.LFE32:
 4449              		.section	.text.pixel_length,"ax",%progbits
 4450              		.align	1
 4451              		.p2align 2,,3
 4452              		.global	pixel_length
 4453              		.syntax unified
 4454              		.thumb
 4455              		.thumb_func
 4456              		.fpu fpv4-sp-d16
 4458              	pixel_length:
 4459              	.LVL493:
 4460              	.LFB40:
3461:src/display.c **** 
3462:src/display.c **** 
3463:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3464:src/display.c ****        */
3465:src/display.c ****       int pixel_length(const char *s, int smallp)
3466:src/display.c ****       {
 4461              		.loc 1 3466 7 view -0
 4462              		.cfi_startproc
ARM GAS  /tmp/ccDDbRKQ.s 			page 161


 4463              		@ args = 0, pretend = 0, frame = 0
 4464              		@ frame_needed = 0, uses_anonymous_args = 0
3467:src/display.c **** 	int len = 0;
 4465              		.loc 1 3467 2 view .LVU1342
3468:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4466              		.loc 1 3468 2 view .LVU1343
3466:src/display.c **** 	int len = 0;
 4467              		.loc 1 3466 7 is_stmt 0 view .LVU1344
 4468 0000 70B5     		push	{r4, r5, r6, lr}
 4469              		.cfi_def_cfa_offset 16
 4470              		.cfi_offset 4, -16
 4471              		.cfi_offset 5, -12
 4472              		.cfi_offset 6, -8
 4473              		.cfi_offset 14, -4
3466:src/display.c **** 	int len = 0;
 4474              		.loc 1 3466 7 view .LVU1345
 4475 0002 0446     		mov	r4, r0
3469:src/display.c **** 	while (*s != '\0') {
 4476              		.loc 1 3469 9 view .LVU1346
 4477 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4478              	.LVL494:
3468:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4479              		.loc 1 3468 34 view .LVU1347
 4480 0006 0E1E     		subs	r6, r1, #0
 4481 0008 18BF     		it	ne
 4482 000a 4FF48076 		movne	r6, #256
 4483              	.LVL495:
 4484              		.loc 1 3469 2 is_stmt 1 view .LVU1348
 4485              		.loc 1 3469 8 view .LVU1349
 4486 000e A0B1     		cbz	r0, .L431
3467:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4487              		.loc 1 3467 6 is_stmt 0 view .LVU1350
 4488 0010 0025     		movs	r5, #0
 4489 0012 06E0     		b	.L429
 4490              	.LVL496:
 4491              	.L427:
3470:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3471:src/display.c **** 	  if (s[0] == '\007') {
3472:src/display.c **** 	    len += s[1] & 0x1F;
3473:src/display.c **** 	    s += 3;
3474:src/display.c **** 	    continue;
3475:src/display.c **** 	  }
3476:src/display.c **** #endif
3477:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4492              		.loc 1 3477 11 view .LVU1351
 4493 0014 3044     		add	r0, r0, r6
 4494 0016 FFF7FEFF 		bl	charlengths
 4495              	.LVL497:
 4496              		.loc 1 3477 42 view .LVU1352
 4497 001a 0134     		adds	r4, r4, #1
 4498              	.LVL498:
 4499              		.loc 1 3477 8 view .LVU1353
 4500 001c 0544     		add	r5, r5, r0
 4501              	.LVL499:
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4502              		.loc 1 3469 8 is_stmt 1 view .LVU1354
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccDDbRKQ.s 			page 162


 4503              		.loc 1 3469 9 is_stmt 0 view .LVU1355
 4504 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4505              		.loc 1 3469 8 view .LVU1356
 4506 0020 48B1     		cbz	r0, .L424
 4507              	.LVL500:
 4508              	.L429:
3471:src/display.c **** 	    len += s[1] & 0x1F;
 4509              		.loc 1 3471 4 is_stmt 1 view .LVU1357
 4510              		.loc 1 3477 4 view .LVU1358
3471:src/display.c **** 	    len += s[1] & 0x1F;
 4511              		.loc 1 3471 7 is_stmt 0 view .LVU1359
 4512 0022 0728     		cmp	r0, #7
 4513 0024 F6D1     		bne	.L427
3472:src/display.c **** 	    s += 3;
 4514              		.loc 1 3472 6 is_stmt 1 view .LVU1360
3472:src/display.c **** 	    s += 3;
 4515              		.loc 1 3472 18 is_stmt 0 view .LVU1361
 4516 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4517              		.loc 1 3469 9 view .LVU1362
 4518 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3472:src/display.c **** 	    s += 3;
 4519              		.loc 1 3472 18 view .LVU1363
 4520 002a 03F01F03 		and	r3, r3, #31
3473:src/display.c **** 	    continue;
 4521              		.loc 1 3473 8 view .LVU1364
 4522 002e 0334     		adds	r4, r4, #3
 4523              	.LVL501:
3472:src/display.c **** 	    s += 3;
 4524              		.loc 1 3472 10 view .LVU1365
 4525 0030 1D44     		add	r5, r5, r3
 4526              	.LVL502:
3473:src/display.c **** 	    continue;
 4527              		.loc 1 3473 6 is_stmt 1 view .LVU1366
3474:src/display.c **** 	  }
 4528              		.loc 1 3474 6 view .LVU1367
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4529              		.loc 1 3469 8 view .LVU1368
 4530 0032 0028     		cmp	r0, #0
 4531 0034 F5D1     		bne	.L429
 4532              	.L424:
3478:src/display.c **** 	}
3479:src/display.c **** 	return len;
3480:src/display.c ****       }
 4533              		.loc 1 3480 7 is_stmt 0 view .LVU1369
 4534 0036 2846     		mov	r0, r5
 4535 0038 70BD     		pop	{r4, r5, r6, pc}
 4536              	.LVL503:
 4537              	.L431:
3467:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4538              		.loc 1 3467 6 view .LVU1370
 4539 003a 0546     		mov	r5, r0
3479:src/display.c ****       }
 4540              		.loc 1 3479 2 is_stmt 1 view .LVU1371
 4541              		.loc 1 3480 7 is_stmt 0 view .LVU1372
 4542 003c 2846     		mov	r0, r5
ARM GAS  /tmp/ccDDbRKQ.s 			page 163


 4543 003e 70BD     		pop	{r4, r5, r6, pc}
 4544              		.loc 1 3480 7 view .LVU1373
 4545              		.cfi_endproc
 4546              	.LFE40:
 4548              		.section	.text.set_status,"ax",%progbits
 4549              		.align	1
 4550              		.p2align 2,,3
 4551              		.syntax unified
 4552              		.thumb
 4553              		.thumb_func
 4554              		.fpu fpv4-sp-d16
 4556              	set_status:
 4557              	.LVL504:
 4558              	.LFB43:
3481:src/display.c **** 
3482:src/display.c **** 
3483:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3484:src/display.c ****        * If this is larger than the display, return true.
3485:src/display.c ****        */
3486:src/display.c ****       static int string_too_large(const char *s) {
3487:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3488:src/display.c ****       }
3489:src/display.c ****       static int string_too_large_top(const char *s) {
3490:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3491:src/display.c ****       }
3492:src/display.c **** 
3493:src/display.c **** 
3494:src/display.c ****       /* Display the given string on the screen.
3495:src/display.c ****        */
3496:src/display.c ****       static void set_status(const char *str) {
 4559              		.loc 1 3496 47 is_stmt 1 view -0
 4560              		.cfi_startproc
 4561              		@ args = 0, pretend = 0, frame = 0
 4562              		@ frame_needed = 0, uses_anonymous_args = 0
3497:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4563              		.loc 1 3497 2 view .LVU1375
3496:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4564              		.loc 1 3496 47 is_stmt 0 view .LVU1376
 4565 0000 10B5     		push	{r4, lr}
 4566              		.cfi_def_cfa_offset 8
 4567              		.cfi_offset 4, -8
 4568              		.cfi_offset 14, -4
 4569              		.loc 1 3497 24 view .LVU1377
 4570 0002 0D4B     		ldr	r3, .L439
 4571              		.loc 1 3497 2 view .LVU1378
 4572 0004 93F91630 		ldrsb	r3, [r3, #22]
 4573 0008 002B     		cmp	r3, #0
3496:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4574              		.loc 1 3496 47 view .LVU1379
 4575 000a 82B0     		sub	sp, sp, #8
 4576              		.cfi_def_cfa_offset 16
3496:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4577              		.loc 1 3496 47 view .LVU1380
 4578 000c 0446     		mov	r4, r0
 4579              		.loc 1 3497 2 view .LVU1381
 4580 000e 0ADA     		bge	.L438
 4581 0010 0121     		movs	r1, #1
ARM GAS  /tmp/ccDDbRKQ.s 			page 164


 4582              	.LVL505:
 4583              	.L435:
 4584              	.LBB390:
 4585              	.LBI390:
3354:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4586              		.loc 1 3354 19 is_stmt 1 discriminator 6 view .LVU1382
 4587              	.LBB391:
3355:src/display.c ****       }
 4588              		.loc 1 3355 2 discriminator 6 view .LVU1383
 4589 0012 40F24A23 		movw	r3, #586
 4590 0016 0093     		str	r3, [sp]
 4591 0018 2046     		mov	r0, r4
 4592 001a 8E23     		movs	r3, #142
 4593 001c 4A22     		movs	r2, #74
 4594 001e FFF7FEFF 		bl	s_s_sized
 4595              	.LVL506:
3355:src/display.c ****       }
 4596              		.loc 1 3355 2 is_stmt 0 discriminator 6 view .LVU1384
 4597              	.LBE391:
 4598              	.LBE390:
3498:src/display.c ****       }
 4599              		.loc 1 3498 7 discriminator 6 view .LVU1385
 4600 0022 02B0     		add	sp, sp, #8
 4601              		.cfi_remember_state
 4602              		.cfi_def_cfa_offset 8
 4603              		@ sp needed
 4604 0024 10BD     		pop	{r4, pc}
 4605              	.LVL507:
 4606              	.L438:
 4607              		.cfi_restore_state
 4608              	.LBB392:
 4609              	.LBI392:
3486:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4610              		.loc 1 3486 18 is_stmt 1 view .LVU1386
 4611              	.LBB393:
3487:src/display.c ****       }
 4612              		.loc 1 3487 2 view .LVU1387
3487:src/display.c ****       }
 4613              		.loc 1 3487 9 is_stmt 0 view .LVU1388
 4614 0026 0021     		movs	r1, #0
 4615 0028 FFF7FEFF 		bl	pixel_length
 4616              	.LVL508:
3487:src/display.c ****       }
 4617              		.loc 1 3487 9 view .LVU1389
 4618              	.LBE393:
 4619              	.LBE392:
3497:src/display.c ****       }
 4620              		.loc 1 3497 2 view .LVU1390
 4621 002c 4B28     		cmp	r0, #75
 4622 002e D4BF     		ite	le
 4623 0030 0021     		movle	r1, #0
 4624 0032 0121     		movgt	r1, #1
 4625 0034 EDE7     		b	.L435
 4626              	.L440:
 4627 0036 00BF     		.align	2
 4628              	.L439:
 4629 0038 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccDDbRKQ.s 			page 165


 4630              		.cfi_endproc
 4631              	.LFE43:
 4633              		.section	.text.set_x_dn,"ax",%progbits
 4634              		.align	1
 4635              		.p2align 2,,3
 4636              		.global	set_x_dn
 4637              		.syntax unified
 4638              		.thumb
 4639              		.thumb_func
 4640              		.fpu fpv4-sp-d16
 4642              	set_x_dn:
 4643              	.LVL509:
 4644              	.LFB27:
1923:src/display.c **** 	char x[50], *obp = x;
 4645              		.loc 1 1923 67 is_stmt 1 view -0
 4646              		.cfi_startproc
 4647              		@ args = 0, pretend = 0, frame = 152
 4648              		@ frame_needed = 0, uses_anonymous_args = 0
1924:src/display.c **** 	int odig = 0;
 4649              		.loc 1 1924 2 view .LVU1392
1923:src/display.c **** 	char x[50], *obp = x;
 4650              		.loc 1 1923 67 is_stmt 0 view .LVU1393
 4651 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4652              		.cfi_def_cfa_offset 36
 4653              		.cfi_offset 4, -36
 4654              		.cfi_offset 5, -32
 4655              		.cfi_offset 6, -28
 4656              		.cfi_offset 7, -24
 4657              		.cfi_offset 8, -20
 4658              		.cfi_offset 9, -16
 4659              		.cfi_offset 10, -12
 4660              		.cfi_offset 11, -8
 4661              		.cfi_offset 14, -4
 4662 0004 A7B0     		sub	sp, sp, #156
 4663              		.cfi_def_cfa_offset 192
 4664              	.LVL510:
1925:src/display.c **** 	int show_exp = 0;
 4665              		.loc 1 1925 2 is_stmt 1 view .LVU1394
1926:src/display.c **** 	int j;
 4666              		.loc 1 1926 2 view .LVU1395
1927:src/display.c **** 	char mantissa[64];
 4667              		.loc 1 1927 2 view .LVU1396
1928:src/display.c **** 	int exp = 0;
 4668              		.loc 1 1928 2 view .LVU1397
1929:src/display.c **** 	char *p = mantissa;
 4669              		.loc 1 1929 2 view .LVU1398
1930:src/display.c **** 	char *r;
 4670              		.loc 1 1930 2 view .LVU1399
1931:src/display.c **** 	const char *q;
 4671              		.loc 1 1931 2 view .LVU1400
1932:src/display.c **** 	int count, i;
 4672              		.loc 1 1932 2 view .LVU1401
1933:src/display.c **** 	int extra_digits = 0;
 4673              		.loc 1 1933 2 view .LVU1402
1934:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4674              		.loc 1 1934 2 view .LVU1403
1936:src/display.c **** 	int dispdigs;
ARM GAS  /tmp/ccDDbRKQ.s 			page 166


 4675              		.loc 1 1936 2 view .LVU1404
1937:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4676              		.loc 1 1937 2 view .LVU1405
1938:src/display.c **** #else
 4677              		.loc 1 1938 2 view .LVU1406
1923:src/display.c **** 	char x[50], *obp = x;
 4678              		.loc 1 1923 67 is_stmt 0 view .LVU1407
 4679 0006 8246     		mov	r10, r0
1938:src/display.c **** #else
 4680              		.loc 1 1938 13 view .LVU1408
 4681 0008 08A8     		add	r0, sp, #32
 4682              	.LVL511:
1923:src/display.c **** 	char x[50], *obp = x;
 4683              		.loc 1 1923 67 view .LVU1409
 4684 000a 0C46     		mov	r4, r1
 4685 000c 0192     		str	r2, [sp, #4]
1938:src/display.c **** #else
 4686              		.loc 1 1938 13 view .LVU1410
 4687 000e FFF7FEFF 		bl	get_dispmode_digs
 4688              	.LVL512:
1938:src/display.c **** #else
 4689              		.loc 1 1938 13 view .LVU1411
 4690 0012 0546     		mov	r5, r0
 4691              	.LVL513:
1943:src/display.c **** 	int negative = 0;
 4692              		.loc 1 1943 2 is_stmt 1 view .LVU1412
1944:src/display.c **** 	int trimzeros = 0;
 4693              		.loc 1 1944 2 view .LVU1413
1945:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4694              		.loc 1 1945 2 view .LVU1414
1953:src/display.c **** #endif
 4695              		.loc 1 1953 2 view .LVU1415
1956:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4696              		.loc 1 1956 2 view .LVU1416
 4697 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4698              	.LVL514:
1958:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4699              		.loc 1 1958 2 view .LVU1417
1958:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4700              		.loc 1 1958 5 is_stmt 0 view .LVU1418
 4701 0018 002C     		cmp	r4, #0
 4702 001a 00F08781 		beq	.L442
 4703              	.L445:
1983:src/display.c **** 	  return;
 4704              		.loc 1 1983 2 is_stmt 1 view .LVU1419
1983:src/display.c **** 	  return;
 4705              		.loc 1 1983 6 is_stmt 0 view .LVU1420
 4706 001e 9AF80800 		ldrb	r0, [r10, #8]	@ zero_extendqisi2
 4707 0022 2146     		mov	r1, r4
 4708 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4709              	.LVL515:
1983:src/display.c **** 	  return;
 4710              		.loc 1 1983 5 view .LVU1421
 4711 0028 8146     		mov	r9, r0
 4712 002a 0028     		cmp	r0, #0
 4713 002c 40F07681 		bne	.L441
1986:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
ARM GAS  /tmp/ccDDbRKQ.s 			page 167


 4714              		.loc 1 1986 2 is_stmt 1 view .LVU1422
1986:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4715              		.loc 1 1986 12 is_stmt 0 view .LVU1423
 4716 0030 CC4E     		ldr	r6, .L693
1986:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4717              		.loc 1 1986 5 view .LVU1424
 4718 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4719 0034 012B     		cmp	r3, #1
 4720 0036 00F0FB82 		beq	.L670
1929:src/display.c **** 	char *p = mantissa;
 4721              		.loc 1 1929 6 view .LVU1425
 4722 003a 8046     		mov	r8, r0
 4723              	.LVL516:
 4724              	.L448:
1992:src/display.c **** 
 4725              		.loc 1 1992 2 is_stmt 1 view .LVU1426
 4726 003c 09AF     		add	r7, sp, #36
 4727              	.LVL517:
1992:src/display.c **** 
 4728              		.loc 1 1992 2 is_stmt 0 view .LVU1427
 4729 003e 3846     		mov	r0, r7
 4730 0040 3222     		movs	r2, #50
 4731 0042 0021     		movs	r1, #0
 4732 0044 FFF7FEFF 		bl	xset
 4733              	.LVL518:
1994:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4734              		.loc 1 1994 2 is_stmt 1 view .LVU1428
1994:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4735              		.loc 1 1994 6 is_stmt 0 view .LVU1429
 4736 0048 5046     		mov	r0, r10
 4737 004a FFF7FEFF 		bl	dn_eq0
 4738              	.LVL519:
1994:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4739              		.loc 1 1994 5 view .LVU1430
 4740 004e 0028     		cmp	r0, #0
 4741 0050 00F06781 		beq	.L449
1995:src/display.c **** 	    x[0] = '-';
 4742              		.loc 1 1995 4 is_stmt 1 view .LVU1431
1995:src/display.c **** 	    x[0] = '-';
 4743              		.loc 1 1995 7 is_stmt 0 view .LVU1432
 4744 0054 9AF90830 		ldrsb	r3, [r10, #8]
 4745 0058 002B     		cmp	r3, #0
 4746 005a C0F21083 		blt	.L671
 4747              	.L450:
1999:src/display.c **** 	} else
 4748              		.loc 1 1999 6 is_stmt 1 view .LVU1433
1999:src/display.c **** 	} else
 4749              		.loc 1 1999 11 is_stmt 0 view .LVU1434
 4750 005e 3023     		movs	r3, #48
 4751 0060 8DF82430 		strb	r3, [sp, #36]
 4752              	.L451:
2003:src/display.c **** 	  show_x(x, exp);
 4753              		.loc 1 2003 2 is_stmt 1 view .LVU1435
2003:src/display.c **** 	  show_x(x, exp);
 4754              		.loc 1 2003 12 is_stmt 0 view .LVU1436
 4755 0064 96F811B0 		ldrb	fp, [r6, #17]	@ zero_extendqisi2
2003:src/display.c **** 	  show_x(x, exp);
ARM GAS  /tmp/ccDDbRKQ.s 			page 168


 4756              		.loc 1 2003 5 view .LVU1437
 4757 0068 BBF1010F 		cmp	fp, #1
 4758 006c 00F04883 		beq	.L672
2009:src/display.c **** 	  //  ALL mode: fill the display
 4759              		.loc 1 2009 2 is_stmt 1 view .LVU1438
2009:src/display.c **** 	  //  ALL mode: fill the display
 4760              		.loc 1 2009 5 is_stmt 0 view .LVU1439
 4761 0070 002D     		cmp	r5, #0
 4762 0072 40F08181 		bne	.L673
2011:src/display.c **** 	else
 4763              		.loc 1 2011 4 is_stmt 1 view .LVU1440
2011:src/display.c **** 	else
 4764              		.loc 1 2011 25 is_stmt 0 view .LVU1441
 4765 0076 019E     		ldr	r6, [sp, #4]
 4766              	.LBB415:
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4767              		.loc 1 2018 11 view .LVU1442
 4768 0078 089B     		ldr	r3, [sp, #32]
 4769              	.LBE415:
2011:src/display.c **** 	else
 4770              		.loc 1 2011 25 view .LVU1443
 4771 007a 3168     		ldr	r1, [r6]
 4772              	.LBB416:
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4773              		.loc 1 2018 11 view .LVU1444
 4774 007c 2A46     		mov	r2, r5
 4775 007e 5046     		mov	r0, r10
 4776              	.LBE416:
2011:src/display.c **** 	else
 4777              		.loc 1 2011 25 view .LVU1445
 4778 0080 4D1E     		subs	r5, r1, #1
 4779              	.LVL520:
 4780              	.LBB417:
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4781              		.loc 1 2018 11 view .LVU1446
 4782 0082 07A9     		add	r1, sp, #28
 4783              	.LBE417:
2011:src/display.c **** 	else
 4784              		.loc 1 2011 7 view .LVU1447
 4785 0084 0795     		str	r5, [sp, #28]
2015:src/display.c **** 	  int orig_mode = mode;
 4786              		.loc 1 2015 2 is_stmt 1 view .LVU1448
 4787              	.LBB418:
2016:src/display.c **** 
 4788              		.loc 1 2016 4 view .LVU1449
 4789              	.LVL521:
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4790              		.loc 1 2018 4 view .LVU1450
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4791              		.loc 1 2018 11 is_stmt 0 view .LVU1451
 4792 0086 FFF7FEFF 		bl	std_round_fix
 4793              	.LVL522:
2023:src/display.c ****  	}
 4794              		.loc 1 2023 27 view .LVU1452
 4795 008a 3368     		ldr	r3, [r6]
 4796 008c 013B     		subs	r3, r3, #1
2023:src/display.c ****  	}
ARM GAS  /tmp/ccDDbRKQ.s 			page 169


 4797              		.loc 1 2023 9 view .LVU1453
 4798 008e 0793     		str	r3, [sp, #28]
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 4799              		.loc 1 2021 16 view .LVU1454
 4800 0090 0123     		movs	r3, #1
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4801              		.loc 1 2018 11 view .LVU1455
 4802 0092 0546     		mov	r5, r0
 4803              	.LVL523:
2019:src/display.c **** 	    // allow zeros to be trimmed
 4804              		.loc 1 2019 4 is_stmt 1 view .LVU1456
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 4805              		.loc 1 2021 6 view .LVU1457
2022:src/display.c **** 	    dd = *display_digits - 1;
 4806              		.loc 1 2022 4 view .LVU1458
2023:src/display.c ****  	}
 4807              		.loc 1 2023 6 view .LVU1459
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 4808              		.loc 1 2021 16 is_stmt 0 view .LVU1460
 4809 0094 0493     		str	r3, [sp, #16]
 4810              	.LVL524:
 4811              	.L572:
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 4812              		.loc 1 2021 16 view .LVU1461
 4813              	.LBE418:
2035:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4814              		.loc 1 2035 2 is_stmt 1 view .LVU1462
 4815 0096 0DF1580B 		add	fp, sp, #88
 4816              	.LVL525:
2035:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4817              		.loc 1 2035 2 is_stmt 0 view .LVU1463
 4818 009a 3F22     		movs	r2, #63
 4819 009c 3021     		movs	r1, #48
 4820 009e 5846     		mov	r0, fp
 4821 00a0 FFF7FEFF 		bl	xset
 4822              	.LVL526:
2036:src/display.c **** 
 4823              		.loc 1 2036 2 is_stmt 1 view .LVU1464
2036:src/display.c **** 
 4824              		.loc 1 2036 31 is_stmt 0 view .LVU1465
 4825 00a4 0023     		movs	r3, #0
2038:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4826              		.loc 1 2038 6 view .LVU1466
 4827 00a6 4521     		movs	r1, #69
 4828 00a8 3846     		mov	r0, r7
2036:src/display.c **** 
 4829              		.loc 1 2036 31 view .LVU1467
 4830 00aa 8DF89730 		strb	r3, [sp, #151]
2038:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4831              		.loc 1 2038 2 is_stmt 1 view .LVU1468
2038:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4832              		.loc 1 2038 6 is_stmt 0 view .LVU1469
 4833 00ae FFF7FEFF 		bl	find_char
 4834              	.LVL527:
2040:src/display.c **** 	if (q == NULL) exp = 0;
 4835              		.loc 1 2040 2 is_stmt 1 view .LVU1470
2040:src/display.c **** 	if (q == NULL) exp = 0;
ARM GAS  /tmp/ccDDbRKQ.s 			page 170


 4836              		.loc 1 2040 5 is_stmt 0 view .LVU1471
 4837 00b2 0646     		mov	r6, r0
 4838 00b4 0028     		cmp	r0, #0
 4839 00b6 00F06D81 		beq	.L674
 4840              	.L467:
2043:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4841              		.loc 1 2043 4 is_stmt 1 view .LVU1472
2043:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4842              		.loc 1 2043 10 is_stmt 0 view .LVU1473
 4843 00ba 701C     		adds	r0, r6, #1
 4844              	.LVL528:
2043:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4845              		.loc 1 2043 10 view .LVU1474
 4846 00bc FFF7FEFF 		bl	s_to_i
 4847              	.LVL529:
2044:src/display.c **** 	}
 4848              		.loc 1 2044 7 view .LVU1475
 4849 00c0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4850 00c2 442B     		cmp	r3, #68
2043:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4851              		.loc 1 2043 10 view .LVU1476
 4852 00c4 0646     		mov	r6, r0
 4853              	.LVL530:
2044:src/display.c **** 	}
 4854              		.loc 1 2044 4 is_stmt 1 view .LVU1477
2044:src/display.c **** 	}
 4855              		.loc 1 2044 19 view .LVU1478
2044:src/display.c **** 	}
 4856              		.loc 1 2044 23 is_stmt 0 view .LVU1479
 4857 00c6 08BF     		it	eq
 4858 00c8 4642     		rsbeq	r6, r0, #0
 4859              	.LVL531:
 4860              	.L468:
2052:src/display.c **** 	if (!res) {
 4861              		.loc 1 2052 2 is_stmt 1 view .LVU1480
2052:src/display.c **** 	if (!res) {
 4862              		.loc 1 2052 12 view .LVU1481
2052:src/display.c **** 	if (!res) {
 4863              		.loc 1 2052 2 is_stmt 0 view .LVU1482
 4864 00ca 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4865 00ce 202B     		cmp	r3, #32
2052:src/display.c **** 	if (!res) {
 4866              		.loc 1 2052 8 view .LVU1483
 4867 00d0 B846     		mov	r8, r7
2052:src/display.c **** 	if (!res) {
 4868              		.loc 1 2052 2 view .LVU1484
 4869 00d2 03D1     		bne	.L469
 4870              	.LVL532:
 4871              	.L470:
2052:src/display.c **** 	if (!res) {
 4872              		.loc 1 2052 27 is_stmt 1 discriminator 3 view .LVU1485
2052:src/display.c **** 	if (!res) {
 4873              		.loc 1 2052 23 discriminator 3 view .LVU1486
2052:src/display.c **** 	if (!res) {
 4874              		.loc 1 2052 12 discriminator 3 view .LVU1487
2052:src/display.c **** 	if (!res) {
 4875              		.loc 1 2052 2 is_stmt 0 discriminator 3 view .LVU1488
ARM GAS  /tmp/ccDDbRKQ.s 			page 171


 4876 00d4 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4877              	.LVL533:
2052:src/display.c **** 	if (!res) {
 4878              		.loc 1 2052 2 discriminator 3 view .LVU1489
 4879 00d8 202B     		cmp	r3, #32
 4880 00da FBD0     		beq	.L470
 4881              	.LVL534:
 4882              	.L469:
2053:src/display.c **** 	  CLR_EXP_SIGN;
 4883              		.loc 1 2053 2 is_stmt 1 view .LVU1490
2053:src/display.c **** 	  CLR_EXP_SIGN;
 4884              		.loc 1 2053 5 is_stmt 0 view .LVU1491
 4885 00dc 002C     		cmp	r4, #0
 4886 00de 00F0D982 		beq	.L675
 4887              	.L471:
2057:src/display.c **** 	  negative = 1;
 4888              		.loc 1 2057 2 is_stmt 1 view .LVU1492
2057:src/display.c **** 	  negative = 1;
 4889              		.loc 1 2057 6 is_stmt 0 view .LVU1493
 4890 00e2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2057:src/display.c **** 	  negative = 1;
 4891              		.loc 1 2057 5 view .LVU1494
 4892 00e6 2D2B     		cmp	r3, #45
 4893 00e8 00F0E481 		beq	.L676
2060:src/display.c **** 	  q++;
 4894              		.loc 1 2060 9 is_stmt 1 view .LVU1495
2060:src/display.c **** 	  q++;
 4895              		.loc 1 2060 12 is_stmt 0 view .LVU1496
 4896 00ec 2B2B     		cmp	r3, #43
 4897 00ee 00F0BF82 		beq	.L677
1944:src/display.c **** 	int trimzeros = 0;
 4898              		.loc 1 1944 6 view .LVU1497
 4899 00f2 0022     		movs	r2, #0
 4900 00f4 0392     		str	r2, [sp, #12]
 4901              	.LVL535:
 4902              	.L473:
2062:src/display.c **** 	if (*q == '.') {
 4903              		.loc 1 2062 9 is_stmt 1 discriminator 1 view .LVU1498
2062:src/display.c **** 	if (*q == '.') {
 4904              		.loc 1 2062 2 is_stmt 0 discriminator 1 view .LVU1499
 4905 00f6 302B     		cmp	r3, #48
 4906 00f8 03D1     		bne	.L475
 4907              	.LVL536:
 4908              	.L474:
2062:src/display.c **** 	if (*q == '.') {
 4909              		.loc 1 2062 24 is_stmt 1 discriminator 2 view .LVU1500
2062:src/display.c **** 	if (*q == '.') {
 4910              		.loc 1 2062 20 discriminator 2 view .LVU1501
2062:src/display.c **** 	if (*q == '.') {
 4911              		.loc 1 2062 9 discriminator 2 view .LVU1502
 4912 00fa 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4913              	.LVL537:
2062:src/display.c **** 	if (*q == '.') {
 4914              		.loc 1 2062 2 is_stmt 0 discriminator 2 view .LVU1503
 4915 00fe 302B     		cmp	r3, #48
 4916 0100 FBD0     		beq	.L474
 4917              	.LVL538:
ARM GAS  /tmp/ccDDbRKQ.s 			page 172


 4918              	.L475:
2063:src/display.c **** 	  do
 4919              		.loc 1 2063 2 is_stmt 1 view .LVU1504
2063:src/display.c **** 	  do
 4920              		.loc 1 2063 5 is_stmt 0 view .LVU1505
 4921 0102 2E2B     		cmp	r3, #46
 4922 0104 00F0BE81 		beq	.L678
2070:src/display.c **** 	    *p++ = *q++;
 4923              		.loc 1 2070 4 is_stmt 1 view .LVU1506
2070:src/display.c **** 	    *p++ = *q++;
 4924              		.loc 1 2070 7 is_stmt 0 view .LVU1507
 4925 0108 A3F13002 		sub	r2, r3, #48
 4926 010c 092A     		cmp	r2, #9
2071:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4927              		.loc 1 2071 6 is_stmt 1 view .LVU1508
 4928              	.LVL539:
2071:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4929              		.loc 1 2071 15 is_stmt 0 view .LVU1509
 4930 010e 9CBF     		itt	ls
 4931 0110 08F10108 		addls	r8, r8, #1
 4932              	.LVL540:
2071:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4933              		.loc 1 2071 11 view .LVU1510
 4934 0114 8DF85830 		strbls	r3, [sp, #88]
2072:src/display.c **** 	    *p++ = *q++;
 4935              		.loc 1 2072 11 view .LVU1511
 4936 0118 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2072:src/display.c **** 	    *p++ = *q++;
 4937              		.loc 1 2072 10 view .LVU1512
 4938 011c A2F13003 		sub	r3, r2, #48
2071:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4939              		.loc 1 2071 8 view .LVU1513
 4940 0120 94BF     		ite	ls
 4941 0122 0DF15901 		addls	r1, sp, #89
1930:src/display.c **** 	char *r;
 4942              		.loc 1 1930 8 view .LVU1514
 4943 0126 5946     		movhi	r1, fp
 4944              	.LVL541:
2072:src/display.c **** 	    *p++ = *q++;
 4945              		.loc 1 2072 10 is_stmt 1 view .LVU1515
 4946 0128 092B     		cmp	r3, #9
 4947 012a 0ED8     		bhi	.L481
 4948 012c A6EB0800 		sub	r0, r6, r8
 4949 0130 08F10103 		add	r3, r8, #1
 4950              	.L482:
 4951              	.LVL542:
2073:src/display.c **** 	    exp++;
 4952              		.loc 1 2073 6 view .LVU1516
2073:src/display.c **** 	    exp++;
 4953              		.loc 1 2073 11 is_stmt 0 view .LVU1517
 4954 0134 01F8012B 		strb	r2, [r1], #1
 4955              	.LVL543:
2073:src/display.c **** 	    exp++;
 4956              		.loc 1 2073 15 view .LVU1518
 4957 0138 9846     		mov	r8, r3
 4958              	.LVL544:
2074:src/display.c **** 	  }
ARM GAS  /tmp/ccDDbRKQ.s 			page 173


 4959              		.loc 1 2074 6 is_stmt 1 view .LVU1519
 4960 013a C618     		adds	r6, r0, r3
 4961              	.LVL545:
2072:src/display.c **** 	    *p++ = *q++;
 4962              		.loc 1 2072 10 view .LVU1520
2072:src/display.c **** 	    *p++ = *q++;
 4963              		.loc 1 2072 11 is_stmt 0 view .LVU1521
 4964 013c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4965              	.LVL546:
2072:src/display.c **** 	    *p++ = *q++;
 4966              		.loc 1 2072 10 view .LVU1522
 4967 0140 A2F1300C 		sub	ip, r2, #48
 4968 0144 BCF1090F 		cmp	ip, #9
 4969 0148 F4D9     		bls	.L482
 4970              	.LVL547:
 4971              	.L481:
2076:src/display.c **** 	    q++;
 4972              		.loc 1 2076 4 is_stmt 1 view .LVU1523
2076:src/display.c **** 	    q++;
 4973              		.loc 1 2076 7 is_stmt 0 view .LVU1524
 4974 014a 2E2A     		cmp	r2, #46
 4975 014c 00F07E82 		beq	.L679
 4976              	.LVL548:
 4977              	.L478:
2083:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4978              		.loc 1 2083 2 is_stmt 1 view .LVU1525
2084:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4979              		.loc 1 2084 12 is_stmt 0 view .LVU1526
 4980 0150 019B     		ldr	r3, [sp, #4]
 4981 0152 079A     		ldr	r2, [sp, #28]
 4982 0154 1B68     		ldr	r3, [r3]
 4983 0156 0293     		str	r3, [sp, #8]
2083:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4984              		.loc 1 2083 5 view .LVU1527
 4985 0158 012D     		cmp	r5, #1
 4986 015a 00F08381 		beq	.L484
 4987              	.LVL549:
 4988              	.L669:
2085:src/display.c **** 	  else {
 4989              		.loc 1 2085 35 view .LVU1528
 4990 015e 0021     		movs	r1, #0
 4991              	.LVL550:
 4992              	.L485:
2097:src/display.c **** 	if (*p >= '5') {	// Round up
 4993              		.loc 1 2097 2 is_stmt 1 view .LVU1529
 4994 0160 02F1010E 		add	lr, r2, #1
2097:src/display.c **** 	if (*p >= '5') {	// Round up
 4995              		.loc 1 2097 35 is_stmt 0 view .LVU1530
 4996 0164 7144     		add	r1, r1, lr
2097:src/display.c **** 	if (*p >= '5') {	// Round up
 4997              		.loc 1 2097 4 view .LVU1531
 4998 0166 0BEB0103 		add	r3, fp, r1
 4999              	.LVL551:
2098:src/display.c **** 	  *p = '0';
 5000              		.loc 1 2098 2 is_stmt 1 view .LVU1532
2098:src/display.c **** 	  *p = '0';
 5001              		.loc 1 2098 6 is_stmt 0 view .LVU1533
ARM GAS  /tmp/ccDDbRKQ.s 			page 174


 5002 016a 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
2098:src/display.c **** 	  *p = '0';
 5003              		.loc 1 2098 5 view .LVU1534
 5004 016e 3428     		cmp	r0, #52
 5005 0170 26D9     		bls	.L490
2099:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5006              		.loc 1 2099 4 is_stmt 1 view .LVU1535
2099:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5007              		.loc 1 2099 7 is_stmt 0 view .LVU1536
 5008 0172 3020     		movs	r0, #48
 5009 0174 0BF80100 		strb	r0, [fp, r1]
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5010              		.loc 1 2100 4 is_stmt 1 view .LVU1537
 5011              	.LVL552:
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5012              		.loc 1 2100 23 view .LVU1538
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5013              		.loc 1 2100 4 is_stmt 0 view .LVU1539
 5014 0178 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5015 017c 3928     		cmp	r0, #57
 5016 017e 40F0D783 		bne	.L491
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5017              		.loc 1 2100 11 view .LVU1540
 5018 0182 5846     		mov	r0, fp
 5019              	.LVL553:
 5020              	.L492:
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5021              		.loc 1 2100 38 is_stmt 1 discriminator 3 view .LVU1541
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5022              		.loc 1 2100 34 discriminator 3 view .LVU1542
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5023              		.loc 1 2100 23 discriminator 3 view .LVU1543
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5024              		.loc 1 2100 4 is_stmt 0 discriminator 3 view .LVU1544
 5025 0184 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5026              	.LVL554:
2100:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5027              		.loc 1 2100 4 discriminator 3 view .LVU1545
 5028 0188 BCF1390F 		cmp	ip, #57
 5029 018c FAD0     		beq	.L492
2101:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5030              		.loc 1 2101 4 is_stmt 1 view .LVU1546
2101:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5031              		.loc 1 2101 7 is_stmt 0 view .LVU1547
 5032 018e 8342     		cmp	r3, r0
 5033 0190 00F01681 		beq	.L680
 5034              	.LVL555:
 5035              	.L570:
2110:src/display.c **** 	      *p = '0';
 5036              		.loc 1 2110 12 is_stmt 1 view .LVU1548
2110:src/display.c **** 	      *p = '0';
 5037              		.loc 1 2110 13 is_stmt 0 view .LVU1549
 5038 0194 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2110:src/display.c **** 	      *p = '0';
 5039              		.loc 1 2110 12 view .LVU1550
 5040 0198 BCF1390F 		cmp	ip, #57
 5041 019c 03F1FF30 		add	r0, r3, #-1
ARM GAS  /tmp/ccDDbRKQ.s 			page 175


 5042              	.LVL556:
2110:src/display.c **** 	      *p = '0';
 5043              		.loc 1 2110 12 view .LVU1551
 5044 01a0 08D1     		bne	.L495
2111:src/display.c **** 	    (*p)++;
 5045              		.loc 1 2111 11 view .LVU1552
 5046 01a2 4FF0300E 		mov	lr, #48
 5047              	.L494:
2111:src/display.c **** 	    (*p)++;
 5048              		.loc 1 2111 8 is_stmt 1 view .LVU1553
2111:src/display.c **** 	    (*p)++;
 5049              		.loc 1 2111 11 is_stmt 0 view .LVU1554
 5050 01a6 80F800E0 		strb	lr, [r0]
2110:src/display.c **** 	      *p = '0';
 5051              		.loc 1 2110 12 is_stmt 1 view .LVU1555
 5052              	.LVL557:
2110:src/display.c **** 	      *p = '0';
 5053              		.loc 1 2110 13 is_stmt 0 view .LVU1556
 5054 01aa 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5055              	.LVL558:
2110:src/display.c **** 	      *p = '0';
 5056              		.loc 1 2110 12 view .LVU1557
 5057 01ae BCF1390F 		cmp	ip, #57
 5058 01b2 F8D0     		beq	.L494
 5059              	.L495:
2112:src/display.c **** 	  }
 5060              		.loc 1 2112 6 is_stmt 1 view .LVU1558
2112:src/display.c **** 	  }
 5061              		.loc 1 2112 10 is_stmt 0 view .LVU1559
 5062 01b4 0CF1010C 		add	ip, ip, #1
 5063 01b8 80F800C0 		strb	ip, [r0]
 5064              	.LVL559:
 5065              	.L668:
2112:src/display.c **** 	  }
 5066              		.loc 1 2112 10 view .LVU1560
 5067 01bc 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
 5068              	.L490:
2117:src/display.c **** 
 5069              		.loc 1 2117 2 is_stmt 1 view .LVU1561
 5070              	.LVL560:
2117:src/display.c **** 
 5071              		.loc 1 2117 45 view .LVU1562
2117:src/display.c **** 
 5072              		.loc 1 2117 2 is_stmt 0 view .LVU1563
 5073 01c0 28B1     		cbz	r0, .L501
 5074              	.LVL561:
 5075              	.L569:
2117:src/display.c **** 
 5076              		.loc 1 2117 62 view .LVU1564
 5077 01c2 3020     		movs	r0, #48
 5078              	.L502:
2117:src/display.c **** 
 5079              		.loc 1 2117 68 is_stmt 1 discriminator 3 view .LVU1565
2117:src/display.c **** 
 5080              		.loc 1 2117 57 discriminator 3 view .LVU1566
 5081              	.LVL562:
2117:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 176


 5082              		.loc 1 2117 62 is_stmt 0 discriminator 3 view .LVU1567
 5083 01c4 03F8010B 		strb	r0, [r3], #1
 5084              	.LVL563:
2117:src/display.c **** 
 5085              		.loc 1 2117 45 is_stmt 1 discriminator 3 view .LVU1568
2117:src/display.c **** 
 5086              		.loc 1 2117 2 is_stmt 0 discriminator 3 view .LVU1569
 5087 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5088 01ca 0029     		cmp	r1, #0
 5089 01cc FAD1     		bne	.L502
 5090              	.L501:
2119:src/display.c **** 	switch (mode) {
 5091              		.loc 1 2119 2 is_stmt 1 view .LVU1570
 5092              	.LVL564:
2120:src/display.c **** 	default:
 5093              		.loc 1 2120 2 view .LVU1571
 5094 01ce 022D     		cmp	r5, #2
 5095 01d0 00F07681 		beq	.L539
 5096 01d4 032D     		cmp	r5, #3
 5097 01d6 00F01881 		beq	.L504
 5098 01da 012D     		cmp	r5, #1
 5099 01dc 00F0F081 		beq	.L505
2123:src/display.c **** 	  if (count != *display_digits)
 5100              		.loc 1 2123 4 view .LVU1572
 5101              	.LVL565:
2123:src/display.c **** 	  if (count != *display_digits)
 5102              		.loc 1 2123 34 view .LVU1573
2123:src/display.c **** 	  if (count != *display_digits)
 5103              		.loc 1 2123 42 is_stmt 0 view .LVU1574
 5104 01e0 0298     		ldr	r0, [sp, #8]
 5105 01e2 26AB     		add	r3, sp, #152
 5106 01e4 0344     		add	r3, r3, r0
2123:src/display.c **** 	  if (count != *display_digits)
 5107              		.loc 1 2123 4 view .LVU1575
 5108 01e6 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5109 01ea 302B     		cmp	r3, #48
 5110 01ec 40F09883 		bne	.L585
 5111 01f0 411E     		subs	r1, r0, #1
 5112 01f2 5944     		add	r1, r1, fp
 5113              	.LVL566:
 5114              	.L509:
2123:src/display.c **** 	  if (count != *display_digits)
 5115              		.loc 1 2123 66 is_stmt 1 discriminator 3 view .LVU1576
2123:src/display.c **** 	  if (count != *display_digits)
 5116              		.loc 1 2123 58 discriminator 3 view .LVU1577
2123:src/display.c **** 	  if (count != *display_digits)
 5117              		.loc 1 2123 42 is_stmt 0 discriminator 3 view .LVU1578
 5118 01f4 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2123:src/display.c **** 	  if (count != *display_digits)
 5119              		.loc 1 2123 4 discriminator 3 view .LVU1579
 5120 01f8 302D     		cmp	r5, #48
 5121 01fa 0346     		mov	r3, r0
2123:src/display.c **** 	  if (count != *display_digits)
 5122              		.loc 1 2123 63 discriminator 3 view .LVU1580
 5123 01fc 00F1FF30 		add	r0, r0, #-1
 5124              	.LVL567:
2123:src/display.c **** 	  if (count != *display_digits)
ARM GAS  /tmp/ccDDbRKQ.s 			page 177


 5125              		.loc 1 2123 34 is_stmt 1 discriminator 3 view .LVU1581
2123:src/display.c **** 	  if (count != *display_digits)
 5126              		.loc 1 2123 4 is_stmt 0 discriminator 3 view .LVU1582
 5127 0200 F8D0     		beq	.L509
2124:src/display.c **** 	    count++;
 5128              		.loc 1 2124 4 is_stmt 1 view .LVU1583
2124:src/display.c **** 	    count++;
 5129              		.loc 1 2124 7 is_stmt 0 view .LVU1584
 5130 0202 0299     		ldr	r1, [sp, #8]
 5131 0204 8842     		cmp	r0, r1
 5132 0206 08BF     		it	eq
 5133 0208 0B46     		moveq	r3, r1
 5134              	.LVL568:
 5135              	.L508:
2127:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5136              		.loc 1 2127 4 is_stmt 1 view .LVU1585
2127:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5137              		.loc 1 2127 7 is_stmt 0 view .LVU1586
 5138 020a 0299     		ldr	r1, [sp, #8]
 5139 020c 8E42     		cmp	r6, r1
 5140 020e 80F20E81 		bge	.L510
2127:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5141              		.loc 1 2127 47 discriminator 1 view .LVU1587
 5142 0212 591A     		subs	r1, r3, r1
2127:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5143              		.loc 1 2127 31 discriminator 1 view .LVU1588
 5144 0214 B142     		cmp	r1, r6
 5145 0216 00F30A81 		bgt	.L510
2152:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5146              		.loc 1 2152 11 is_stmt 1 view .LVU1589
2152:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5147              		.loc 1 2152 14 is_stmt 0 view .LVU1590
 5148 021a 002E     		cmp	r6, #0
 5149 021c C0F29D83 		blt	.L519
 5150 0220 721C     		adds	r2, r6, #1
2154:src/display.c **** 		*obp++ = ',';
 5151              		.loc 1 2154 31 view .LVU1591
 5152 0222 DFF84CE1 		ldr	lr, .L693+12
 5153 0226 0592     		str	r2, [sp, #20]
 5154 0228 0BEB0200 		add	r0, fp, r2
2119:src/display.c **** 	switch (mode) {
 5155              		.loc 1 2119 4 view .LVU1592
 5156 022c DC46     		mov	ip, fp
1924:src/display.c **** 	int odig = 0;
 5157              		.loc 1 1924 15 view .LVU1593
 5158 022e 3946     		mov	r1, r7
 5159 0230 05E0     		b	.L520
 5160              	.LVL569:
 5161              	.L523:
2155:src/display.c **** 	      *obp++ = *p++;
 5162              		.loc 1 2155 3 is_stmt 1 view .LVU1594
2154:src/display.c **** 		*obp++ = ',';
 5163              		.loc 1 2154 18 is_stmt 0 view .LVU1595
 5164 0232 022D     		cmp	r5, #2
2155:src/display.c **** 	      *obp++ = *p++;
 5165              		.loc 1 2155 10 view .LVU1596
 5166 0234 05BF     		ittet	eq
ARM GAS  /tmp/ccDDbRKQ.s 			page 178


 5167 0236 2C22     		moveq	r2, #44
 5168 0238 4A70     		strbeq	r2, [r1, #1]
2156:src/display.c **** 	      odig++;
 5169              		.loc 1 2156 12 view .LVU1597
 5170 023a 0131     		addne	r1, r1, #1
 5171              	.LVL570:
2155:src/display.c **** 	      *obp++ = *p++;
 5172              		.loc 1 2155 7 view .LVU1598
 5173 023c 0231     		addeq	r1, r1, #2
 5174              	.LVL571:
 5175              	.L520:
2156:src/display.c **** 	      odig++;
 5176              		.loc 1 2156 8 is_stmt 1 discriminator 2 view .LVU1599
2156:src/display.c **** 	      odig++;
 5177              		.loc 1 2156 15 is_stmt 0 discriminator 2 view .LVU1600
 5178 023e 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5179              	.LVL572:
2154:src/display.c **** 		*obp++ = ',';
 5180              		.loc 1 2154 8 is_stmt 1 discriminator 2 view .LVU1601
2156:src/display.c **** 	      odig++;
 5181              		.loc 1 2156 15 is_stmt 0 discriminator 2 view .LVU1602
 5182 0242 0A70     		strb	r2, [r1]
2157:src/display.c **** 	    }
 5183              		.loc 1 2157 8 is_stmt 1 discriminator 2 view .LVU1603
 5184              	.LVL573:
2153:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5185              		.loc 1 2153 23 discriminator 2 view .LVU1604
2153:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5186              		.loc 1 2153 15 discriminator 2 view .LVU1605
2154:src/display.c **** 		*obp++ = ',';
 5187              		.loc 1 2154 31 is_stmt 0 discriminator 2 view .LVU1606
 5188 0244 ABEB0C02 		sub	r2, fp, ip
 5189 0248 3244     		add	r2, r2, r6
 5190 024a 8EFB0285 		smull	r8, r5, lr, r2
 5191 024e A5EBE275 		sub	r5, r5, r2, asr #31
 5192 0252 05EB4505 		add	r5, r5, r5, lsl #1
2153:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5193              		.loc 1 2153 6 discriminator 2 view .LVU1607
 5194 0256 6045     		cmp	r0, ip
2154:src/display.c **** 		*obp++ = ',';
 5195              		.loc 1 2154 31 discriminator 2 view .LVU1608
 5196 0258 A2EB0505 		sub	r5, r2, r5
2153:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5197              		.loc 1 2153 6 discriminator 2 view .LVU1609
 5198 025c E9D1     		bne	.L523
 5199 025e 059D     		ldr	r5, [sp, #20]
2159:src/display.c **** 	    if (count > (exp + 1)) {
 5200              		.loc 1 2159 6 is_stmt 1 view .LVU1610
2159:src/display.c **** 	    if (count > (exp + 1)) {
 5201              		.loc 1 2159 13 is_stmt 0 view .LVU1611
 5202 0260 2E22     		movs	r2, #46
2160:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5203              		.loc 1 2160 9 view .LVU1612
 5204 0262 AB42     		cmp	r3, r5
2159:src/display.c **** 	    if (count > (exp + 1)) {
 5205              		.loc 1 2159 13 view .LVU1613
 5206 0264 4A70     		strb	r2, [r1, #1]
ARM GAS  /tmp/ccDDbRKQ.s 			page 179


2159:src/display.c **** 	    if (count > (exp + 1)) {
 5207              		.loc 1 2159 10 view .LVU1614
 5208 0266 01F10208 		add	r8, r1, #2
 5209              	.LVL574:
2160:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5210              		.loc 1 2160 6 is_stmt 1 view .LVU1615
2160:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5211              		.loc 1 2160 9 is_stmt 0 view .LVU1616
 5212 026a 40F34B81 		ble	.L517
 5213 026e 9A1B     		subs	r2, r3, r6
 5214 0270 0A44     		add	r2, r2, r1
 5215 0272 0131     		adds	r1, r1, #1
 5216              	.LVL575:
 5217              	.L524:
2162:src/display.c **** 		odig++;
 5218              		.loc 1 2162 3 is_stmt 1 discriminator 3 view .LVU1617
2162:src/display.c **** 		odig++;
 5219              		.loc 1 2162 10 is_stmt 0 discriminator 3 view .LVU1618
 5220 0274 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5221              	.LVL576:
2162:src/display.c **** 		odig++;
 5222              		.loc 1 2162 10 discriminator 3 view .LVU1619
 5223 0278 01F8015F 		strb	r5, [r1, #1]!
2163:src/display.c **** 	      }
 5224              		.loc 1 2163 3 is_stmt 1 discriminator 3 view .LVU1620
2161:src/display.c **** 		*obp++ = *p++;
 5225              		.loc 1 2161 31 discriminator 3 view .LVU1621
2161:src/display.c **** 		*obp++ = *p++;
 5226              		.loc 1 2161 22 discriminator 3 view .LVU1622
2161:src/display.c **** 		*obp++ = *p++;
 5227              		.loc 1 2161 8 is_stmt 0 discriminator 3 view .LVU1623
 5228 027c 9142     		cmp	r1, r2
 5229 027e F9D1     		bne	.L524
 5230 0280 F243     		mvns	r2, r6
 5231 0282 1A44     		add	r2, r2, r3
 5232 0284 9044     		add	r8, r8, r2
 5233              	.LVL577:
2163:src/display.c **** 	      }
 5234              		.loc 1 2163 7 view .LVU1624
 5235 0286 1D46     		mov	r5, r3
 5236 0288 3CE1     		b	.L517
 5237              	.LVL578:
 5238              	.L589:
2163:src/display.c **** 	      }
 5239              		.loc 1 2163 7 view .LVU1625
 5240 028a B846     		mov	r8, r7
 5241              	.LVL579:
 5242              	.L546:
2255:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5243              		.loc 1 2255 2 is_stmt 1 view .LVU1626
2255:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5244              		.loc 1 2255 5 is_stmt 0 view .LVU1627
 5245 028c 029B     		ldr	r3, [sp, #8]
 5246 028e 0A2B     		cmp	r3, #10
 5247 0290 02DD     		ble	.L549
2255:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5248              		.loc 1 2255 50 discriminator 1 view .LVU1628
ARM GAS  /tmp/ccDDbRKQ.s 			page 180


 5249 0292 002C     		cmp	r4, #0
 5250 0294 00F00E82 		beq	.L681
 5251              	.L549:
2261:src/display.c **** 	if (odig > *display_digits)
 5252              		.loc 1 2261 2 is_stmt 1 view .LVU1629
 5253 0298 029B     		ldr	r3, [sp, #8]
 5254 029a 9D42     		cmp	r5, r3
 5255 029c A8BF     		it	ge
 5256 029e 1D46     		movge	r5, r3
 5257              	.LVL580:
2264:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5258              		.loc 1 2264 23 is_stmt 0 view .LVU1630
 5259 02a0 A3EB050A 		sub	r10, r3, r5
 5260              	.LVL581:
2264:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5261              		.loc 1 2264 23 view .LVU1631
 5262 02a4 1A46     		mov	r2, r3
2264:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5263              		.loc 1 2264 4 view .LVU1632
 5264 02a6 0AEBCA0A 		add	r10, r10, r10, lsl #3
2261:src/display.c **** 	if (odig > *display_digits)
 5265              		.loc 1 2261 7 view .LVU1633
 5266 02aa 0023     		movs	r3, #0
2265:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5267              		.loc 1 2265 5 view .LVU1634
 5268 02ac 9A45     		cmp	r10, r3
2261:src/display.c **** 	if (odig > *display_digits)
 5269              		.loc 1 2261 7 view .LVU1635
 5270 02ae 88F80030 		strb	r3, [r8]
2262:src/display.c **** 	  odig = *display_digits;
 5271              		.loc 1 2262 2 is_stmt 1 view .LVU1636
 5272              	.LVL582:
2264:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5273              		.loc 1 2264 2 view .LVU1637
2265:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5274              		.loc 1 2265 2 view .LVU1638
2265:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5275              		.loc 1 2265 5 is_stmt 0 view .LVU1639
 5276 02b2 04DD     		ble	.L550
2265:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5277              		.loc 1 2265 35 discriminator 1 view .LVU1640
 5278 02b4 16F57A7F 		cmn	r6, #1000
2266:src/display.c **** 	if (negative) {
 5279              		.loc 1 2266 4 is_stmt 1 discriminator 1 view .LVU1641
2266:src/display.c **** 	if (negative) {
 5280              		.loc 1 2266 6 is_stmt 0 discriminator 1 view .LVU1642
 5281 02b8 D8BF     		it	le
 5282 02ba AAF1090A 		suble	r10, r10, #9
 5283              	.LVL583:
 5284              	.L550:
2267:src/display.c **** 	  if (res) *res++ = '-';
 5285              		.loc 1 2267 2 is_stmt 1 view .LVU1643
2267:src/display.c **** 	  if (res) *res++ = '-';
 5286              		.loc 1 2267 5 is_stmt 0 view .LVU1644
 5287 02be 039B     		ldr	r3, [sp, #12]
 5288 02c0 2BB1     		cbz	r3, .L551
2268:src/display.c **** 	  else {
ARM GAS  /tmp/ccDDbRKQ.s 			page 181


 5289              		.loc 1 2268 4 is_stmt 1 view .LVU1645
2268:src/display.c **** 	  else {
 5290              		.loc 1 2268 7 is_stmt 0 view .LVU1646
 5291 02c2 002C     		cmp	r4, #0
 5292 02c4 00F00582 		beq	.L552
2268:src/display.c **** 	  else {
 5293              		.loc 1 2268 13 is_stmt 1 discriminator 1 view .LVU1647
 5294              	.LVL584:
2268:src/display.c **** 	  else {
 5295              		.loc 1 2268 20 is_stmt 0 discriminator 1 view .LVU1648
 5296 02c8 2D23     		movs	r3, #45
 5297 02ca 04F8013B 		strb	r3, [r4], #1
 5298              	.LVL585:
 5299              	.L551:
2276:src/display.c **** 	  if (c == '.') {
 5300              		.loc 1 2276 12 is_stmt 1 discriminator 1 view .LVU1649
2276:src/display.c **** 	  if (c == '.') {
 5301              		.loc 1 2276 18 is_stmt 0 discriminator 1 view .LVU1650
 5302 02ce 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 5303              	.LVL586:
2276:src/display.c **** 	  if (c == '.') {
 5304              		.loc 1 2276 2 discriminator 1 view .LVU1651
 5305 02d2 C1B1     		cbz	r1, .L553
2276:src/display.c **** 	  if (c == '.') {
 5306              		.loc 1 2276 31 view .LVU1652
 5307 02d4 BAF16B0F 		cmp	r10, #107
 5308 02d8 15DC     		bgt	.L553
 5309              	.LVL587:
 5310              	.L554:
2280:src/display.c **** 	  } else {
 5311              		.loc 1 2280 12 view .LVU1653
 5312 02da 234B     		ldr	r3, .L693+4
2278:src/display.c **** 	  } else if (c == ',') {
 5313              		.loc 1 2278 12 view .LVU1654
 5314 02dc DFF894B0 		ldr	fp, .L693+16
 5315              	.LVL588:
 5316              	.L565:
2277:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5317              		.loc 1 2277 4 is_stmt 1 view .LVU1655
2277:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5318              		.loc 1 2277 7 is_stmt 0 view .LVU1656
 5319 02e0 2E29     		cmp	r1, #46
 5320 02e2 00F02481 		beq	.L682
2279:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5321              		.loc 1 2279 11 is_stmt 1 view .LVU1657
2279:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5322              		.loc 1 2279 14 is_stmt 0 view .LVU1658
 5323 02e6 2C29     		cmp	r1, #44
 5324 02e8 00F04B81 		beq	.L683
2282:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5325              		.loc 1 2282 6 is_stmt 1 view .LVU1659
 5326              	.LVL589:
 5327              	.LBB419:
 5328              	.LBI419:
 329:src/display.c ****   if (res) *res++ = ch;
 5329              		.loc 1 329 14 view .LVU1660
 5330              	.LBB420:
ARM GAS  /tmp/ccDDbRKQ.s 			page 182


 330:src/display.c ****   else	set_dig(base, ch);
 5331              		.loc 1 330 3 view .LVU1661
 330:src/display.c ****   else	set_dig(base, ch);
 5332              		.loc 1 330 6 is_stmt 0 view .LVU1662
 5333 02ec 002C     		cmp	r4, #0
 5334 02ee 00F05D81 		beq	.L563
 330:src/display.c ****   else	set_dig(base, ch);
 5335              		.loc 1 330 12 is_stmt 1 view .LVU1663
 5336              	.LVL590:
 330:src/display.c ****   else	set_dig(base, ch);
 5337              		.loc 1 330 19 is_stmt 0 view .LVU1664
 5338 02f2 04F8011B 		strb	r1, [r4], #1
 5339              	.LVL591:
 5340              	.L564:
 332:src/display.c **** }
 5341              		.loc 1 332 3 is_stmt 1 view .LVU1665
 332:src/display.c **** }
 5342              		.loc 1 332 3 is_stmt 0 view .LVU1666
 5343              	.LBE420:
 5344              	.LBE419:
2283:src/display.c **** 	  }
 5345              		.loc 1 2283 6 is_stmt 1 view .LVU1667
2276:src/display.c **** 	  if (c == '.') {
 5346              		.loc 1 2276 18 is_stmt 0 view .LVU1668
 5347 02f6 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5348              	.LVL592:
2283:src/display.c **** 	  }
 5349              		.loc 1 2283 8 view .LVU1669
 5350 02fa 0AF1090A 		add	r10, r10, #9
 5351              	.LVL593:
2276:src/display.c **** 	  if (c == '.') {
 5352              		.loc 1 2276 53 is_stmt 1 view .LVU1670
2276:src/display.c **** 	  if (c == '.') {
 5353              		.loc 1 2276 12 view .LVU1671
2276:src/display.c **** 	  if (c == '.') {
 5354              		.loc 1 2276 2 is_stmt 0 view .LVU1672
 5355 02fe 11B1     		cbz	r1, .L553
2276:src/display.c **** 	  if (c == '.') {
 5356              		.loc 1 2276 31 discriminator 3 view .LVU1673
 5357 0300 BAF16B0F 		cmp	r10, #107
 5358 0304 ECDD     		ble	.L565
 5359              	.LVL594:
 5360              	.L553:
2296:src/display.c **** 	  set_exp(exp, 0, res);
 5361              		.loc 1 2296 2 is_stmt 1 view .LVU1674
2296:src/display.c **** 	  set_exp(exp, 0, res);
 5362              		.loc 1 2296 5 is_stmt 0 view .LVU1675
 5363 0306 B9F1000F 		cmp	r9, #0
 5364 030a 40F02381 		bne	.L684
 5365              	.L566:
2299:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5366              		.loc 1 2299 2 is_stmt 1 view .LVU1676
2299:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5367              		.loc 1 2299 5 is_stmt 0 view .LVU1677
 5368 030e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5369 0312 2E2B     		cmp	r3, #46
 5370 0314 00F02881 		beq	.L685
ARM GAS  /tmp/ccDDbRKQ.s 			page 183


 5371              	.LVL595:
 5372              	.L567:
2301:src/display.c ****       }
 5373              		.loc 1 2301 2 is_stmt 1 view .LVU1678
2301:src/display.c ****       }
 5374              		.loc 1 2301 18 is_stmt 0 view .LVU1679
 5375 0318 019B     		ldr	r3, [sp, #4]
 5376 031a 1D60     		str	r5, [r3]
 5377              	.LVL596:
 5378              	.L441:
2302:src/display.c **** 
 5379              		.loc 1 2302 7 view .LVU1680
 5380 031c 27B0     		add	sp, sp, #156
 5381              		.cfi_remember_state
 5382              		.cfi_def_cfa_offset 36
 5383              		@ sp needed
 5384 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5385              	.LVL597:
 5386              	.L449:
 5387              		.cfi_restore_state
2001:src/display.c **** 
 5388              		.loc 1 2001 4 is_stmt 1 view .LVU1681
 5389 0322 3946     		mov	r1, r7
 5390 0324 5046     		mov	r0, r10
 5391 0326 FFF7FEFF 		bl	decNumberToString
 5392              	.LVL598:
 5393 032a 9BE6     		b	.L451
 5394              	.LVL599:
 5395              	.L442:
1959:src/display.c **** 	    if (State2.hms) {
 5396              		.loc 1 1959 4 view .LVU1682
1959:src/display.c **** 	    if (State2.hms) {
 5397              		.loc 1 1959 25 is_stmt 0 view .LVU1683
 5398 032c 0D4B     		ldr	r3, .L693
 5399 032e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1959:src/display.c **** 	    if (State2.hms) {
 5400              		.loc 1 1959 22 view .LVU1684
 5401 0330 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1959:src/display.c **** 	    if (State2.hms) {
 5402              		.loc 1 1959 25 view .LVU1685
 5403 0332 01F00201 		and	r1, r1, #2
1959:src/display.c **** 	    if (State2.hms) {
 5404              		.loc 1 1959 22 view .LVU1686
 5405 0336 1143     		orrs	r1, r1, r2
 5406 0338 7FF471AE 		bne	.L445
1960:src/display.c **** 	      set_x_hms(z, res);
 5407              		.loc 1 1960 6 is_stmt 1 view .LVU1687
1960:src/display.c **** 	      set_x_hms(z, res);
 5408              		.loc 1 1960 10 is_stmt 0 view .LVU1688
 5409 033c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1960:src/display.c **** 	      set_x_hms(z, res);
 5410              		.loc 1 1960 9 view .LVU1689
 5411 033e DE07     		lsls	r6, r3, #31
 5412 0340 00F1EA82 		bmi	.L686
1964:src/display.c **** 	      if (set_x_fract(z, res))
 5413              		.loc 1 1964 11 is_stmt 1 view .LVU1690
1964:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/ccDDbRKQ.s 			page 184


 5414              		.loc 1 1964 15 is_stmt 0 view .LVU1691
 5415 0344 094B     		ldr	r3, .L693+8
 5416 0346 1B68     		ldr	r3, [r3]
 5417 0348 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1964:src/display.c **** 	      if (set_x_fract(z, res))
 5418              		.loc 1 1964 14 view .LVU1692
 5419 034c 9806     		lsls	r0, r3, #26
 5420 034e 7FF566AE 		bpl	.L445
1965:src/display.c **** 		return;
 5421              		.loc 1 1965 8 is_stmt 1 view .LVU1693
1965:src/display.c **** 		return;
 5422              		.loc 1 1965 12 is_stmt 0 view .LVU1694
 5423 0352 2146     		mov	r1, r4
 5424 0354 5046     		mov	r0, r10
 5425 0356 FFF7FEFF 		bl	set_x_fract
 5426              	.LVL600:
1965:src/display.c **** 		return;
 5427              		.loc 1 1965 11 view .LVU1695
 5428 035a 0028     		cmp	r0, #0
 5429 035c 3FF45FAE 		beq	.L445
 5430 0360 DCE7     		b	.L441
 5431              	.L694:
 5432 0362 00BF     		.align	2
 5433              	.L693:
 5434 0364 00000000 		.word	StateWhileOn
 5435 0368 00000000 		.word	.LANCHOR0
 5436 036c 00000000 		.word	main_ram
 5437 0370 56555555 		.word	1431655766
 5438 0374 00000000 		.word	.LANCHOR1
 5439              	.LVL601:
 5440              	.L673:
2009:src/display.c **** 	  //  ALL mode: fill the display
 5441              		.loc 1 2009 38 discriminator 1 view .LVU1696
 5442 0378 019B     		ldr	r3, [sp, #4]
 5443 037a 1A68     		ldr	r2, [r3]
2009:src/display.c **** 	  //  ALL mode: fill the display
 5444              		.loc 1 2009 35 discriminator 1 view .LVU1697
 5445 037c 089B     		ldr	r3, [sp, #32]
2009:src/display.c **** 	  //  ALL mode: fill the display
 5446              		.loc 1 2009 23 discriminator 1 view .LVU1698
 5447 037e 9A42     		cmp	r2, r3
 5448 0380 11DD     		ble	.L464
2013:src/display.c **** 
 5449              		.loc 1 2013 4 is_stmt 1 view .LVU1699
2015:src/display.c **** 	  int orig_mode = mode;
 5450              		.loc 1 2015 23 is_stmt 0 view .LVU1700
 5451 0382 042D     		cmp	r5, #4
2013:src/display.c **** 
 5452              		.loc 1 2013 7 view .LVU1701
 5453 0384 0793     		str	r3, [sp, #28]
2015:src/display.c **** 	  int orig_mode = mode;
 5454              		.loc 1 2015 2 is_stmt 1 view .LVU1702
2015:src/display.c **** 	  int orig_mode = mode;
 5455              		.loc 1 2015 23 is_stmt 0 view .LVU1703
 5456 0386 12D0     		beq	.L465
 5457              	.L687:
2015:src/display.c **** 	  int orig_mode = mode;
ARM GAS  /tmp/ccDDbRKQ.s 			page 185


 5458              		.loc 1 2015 43 discriminator 2 view .LVU1704
 5459 0388 052D     		cmp	r5, #5
 5460 038a 00F08A81 		beq	.L466
1945:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5461              		.loc 1 1945 6 view .LVU1705
 5462 038e 0023     		movs	r3, #0
 5463 0390 0493     		str	r3, [sp, #16]
 5464 0392 80E6     		b	.L572
 5465              	.LVL602:
 5466              	.L674:
2040:src/display.c **** 	if (q == NULL) exp = 0;
 5467              		.loc 1 2040 17 is_stmt 1 discriminator 1 view .LVU1706
2040:src/display.c **** 	if (q == NULL) exp = 0;
 5468              		.loc 1 2040 21 is_stmt 0 discriminator 1 view .LVU1707
 5469 0394 4421     		movs	r1, #68
 5470 0396 3846     		mov	r0, r7
 5471              	.LVL603:
2040:src/display.c **** 	if (q == NULL) exp = 0;
 5472              		.loc 1 2040 21 discriminator 1 view .LVU1708
 5473 0398 FFF7FEFF 		bl	find_char
 5474              	.LVL604:
2041:src/display.c **** 	else {
 5475              		.loc 1 2041 2 is_stmt 1 discriminator 1 view .LVU1709
2041:src/display.c **** 	else {
 5476              		.loc 1 2041 5 is_stmt 0 discriminator 1 view .LVU1710
 5477 039c 0646     		mov	r6, r0
 5478 039e 0028     		cmp	r0, #0
 5479 03a0 3FF493AE 		beq	.L468
 5480 03a4 89E6     		b	.L467
 5481              	.LVL605:
 5482              	.L464:
2011:src/display.c **** 	else
 5483              		.loc 1 2011 4 is_stmt 1 view .LVU1711
2011:src/display.c **** 	else
 5484              		.loc 1 2011 25 is_stmt 0 view .LVU1712
 5485 03a6 013A     		subs	r2, r2, #1
2015:src/display.c **** 	  int orig_mode = mode;
 5486              		.loc 1 2015 23 view .LVU1713
 5487 03a8 042D     		cmp	r5, #4
2011:src/display.c **** 	else
 5488              		.loc 1 2011 7 view .LVU1714
 5489 03aa 0792     		str	r2, [sp, #28]
2015:src/display.c **** 	  int orig_mode = mode;
 5490              		.loc 1 2015 2 is_stmt 1 view .LVU1715
2015:src/display.c **** 	  int orig_mode = mode;
 5491              		.loc 1 2015 23 is_stmt 0 view .LVU1716
 5492 03ac ECD1     		bne	.L687
 5493              	.L465:
 5494              	.LBB422:
2016:src/display.c **** 
 5495              		.loc 1 2016 4 is_stmt 1 view .LVU1717
 5496              	.LVL606:
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5497              		.loc 1 2018 4 view .LVU1718
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5498              		.loc 1 2018 11 is_stmt 0 view .LVU1719
 5499 03ae 2A46     		mov	r2, r5
ARM GAS  /tmp/ccDDbRKQ.s 			page 186


 5500 03b0 07A9     		add	r1, sp, #28
 5501 03b2 5046     		mov	r0, r10
 5502 03b4 FFF7FEFF 		bl	std_round_fix
 5503              	.LVL607:
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 5504              		.loc 1 2021 16 view .LVU1720
 5505 03b8 0123     		movs	r3, #1
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5506              		.loc 1 2018 11 view .LVU1721
 5507 03ba 0546     		mov	r5, r0
 5508              	.LVL608:
2019:src/display.c **** 	    // allow zeros to be trimmed
 5509              		.loc 1 2019 4 is_stmt 1 view .LVU1722
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 5510              		.loc 1 2021 6 view .LVU1723
2022:src/display.c **** 	    dd = *display_digits - 1;
 5511              		.loc 1 2022 4 view .LVU1724
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 5512              		.loc 1 2021 16 is_stmt 0 view .LVU1725
 5513 03bc 0493     		str	r3, [sp, #16]
 5514 03be 6AE6     		b	.L572
 5515              	.LVL609:
 5516              	.L680:
2021:src/display.c **** 	  if (orig_mode == MODE_STD)
 5517              		.loc 1 2021 16 view .LVU1726
 5518              	.LBE422:
2101:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5519              		.loc 1 2101 7 view .LVU1727
 5520 03c0 5846     		mov	r0, fp
 5521              	.LVL610:
2102:src/display.c **** 	    mantissa[0] = '1';
 5522              		.loc 1 2102 41 view .LVU1728
 5523 03c2 4FF03008 		mov	r8, #48
 5524              	.L496:
 5525              	.LVL611:
2102:src/display.c **** 	    mantissa[0] = '1';
 5526              		.loc 1 2102 47 is_stmt 1 discriminator 3 view .LVU1729
2102:src/display.c **** 	    mantissa[0] = '1';
 5527              		.loc 1 2102 36 discriminator 3 view .LVU1730
2102:src/display.c **** 	    mantissa[0] = '1';
 5528              		.loc 1 2102 41 is_stmt 0 discriminator 3 view .LVU1731
 5529 03c6 00F8018B 		strb	r8, [r0], #1
 5530              	.LVL612:
2102:src/display.c **** 	    mantissa[0] = '1';
 5531              		.loc 1 2102 25 is_stmt 1 discriminator 3 view .LVU1732
2102:src/display.c **** 	    mantissa[0] = '1';
 5532              		.loc 1 2102 6 is_stmt 0 discriminator 3 view .LVU1733
 5533 03ca 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5534 03ce BCF1390F 		cmp	ip, #57
 5535 03d2 F8D0     		beq	.L496
 5536              	.LVL613:
 5537              	.L571:
2103:src/display.c **** 	    exp++;
 5538              		.loc 1 2103 6 is_stmt 1 view .LVU1734
2103:src/display.c **** 	    exp++;
 5539              		.loc 1 2103 18 is_stmt 0 view .LVU1735
 5540 03d4 3120     		movs	r0, #49
ARM GAS  /tmp/ccDDbRKQ.s 			page 187


2105:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5541              		.loc 1 2105 9 view .LVU1736
 5542 03d6 012D     		cmp	r5, #1
2104:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5543              		.loc 1 2104 9 view .LVU1737
 5544 03d8 06F10106 		add	r6, r6, #1
 5545              	.LVL614:
2103:src/display.c **** 	    exp++;
 5546              		.loc 1 2103 18 view .LVU1738
 5547 03dc 8DF85800 		strb	r0, [sp, #88]
2104:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5548              		.loc 1 2104 6 is_stmt 1 view .LVU1739
 5549              	.LVL615:
2105:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5550              		.loc 1 2105 6 view .LVU1740
2105:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5551              		.loc 1 2105 9 is_stmt 0 view .LVU1741
 5552 03e0 7FF4ECAE 		bne	.L668
2105:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5553              		.loc 1 2105 27 discriminator 1 view .LVU1742
 5554 03e4 0298     		ldr	r0, [sp, #8]
 5555 03e6 8642     		cmp	r6, r0
 5556 03e8 C0F2E580 		blt	.L498
2106:src/display.c **** 	      extra_digits = 0;
 5557              		.loc 1 2106 8 is_stmt 1 view .LVU1743
2106:src/display.c **** 	      extra_digits = 0;
 5558              		.loc 1 2106 28 is_stmt 0 view .LVU1744
 5559 03ec BF4B     		ldr	r3, .L695
 5560              	.LVL616:
2106:src/display.c **** 	      extra_digits = 0;
 5561              		.loc 1 2106 28 view .LVU1745
 5562 03ee 1B68     		ldr	r3, [r3]
 5563 03f0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2106:src/display.c **** 	      extra_digits = 0;
 5564              		.loc 1 2106 37 view .LVU1746
 5565 03f4 D906     		lsls	r1, r3, #27
 5566              	.LVL617:
2106:src/display.c **** 	      extra_digits = 0;
 5567              		.loc 1 2106 37 view .LVU1747
 5568 03f6 40F1D582 		bpl	.L688
 5569              	.LVL618:
2117:src/display.c **** 
 5570              		.loc 1 2117 2 is_stmt 1 view .LVU1748
 5571 03fa 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2117:src/display.c **** 
 5572              		.loc 1 2117 9 is_stmt 0 view .LVU1749
 5573 03fe 0BEB0E03 		add	r3, fp, lr
 5574              	.LVL619:
2117:src/display.c **** 
 5575              		.loc 1 2117 45 is_stmt 1 view .LVU1750
2106:src/display.c **** 	      extra_digits = 0;
 5576              		.loc 1 2106 37 is_stmt 0 view .LVU1751
 5577 0402 0325     		movs	r5, #3
2117:src/display.c **** 
 5578              		.loc 1 2117 2 view .LVU1752
 5579 0404 0029     		cmp	r1, #0
 5580 0406 7FF4DCAE 		bne	.L569
ARM GAS  /tmp/ccDDbRKQ.s 			page 188


 5581              	.LVL620:
 5582              	.L504:
2219:src/display.c **** 	  case -1:
 5583              		.loc 1 2219 4 is_stmt 1 view .LVU1753
2219:src/display.c **** 	  case -1:
 5584              		.loc 1 2219 16 is_stmt 0 view .LVU1754
 5585 040a B94B     		ldr	r3, .L695+4
 5586 040c 83FB0613 		smull	r1, r3, r3, r6
 5587 0410 A3EBE673 		sub	r3, r3, r6, asr #31
 5588 0414 03EB4303 		add	r3, r3, r3, lsl #1
 5589 0418 F31A     		subs	r3, r6, r3
 5590 041a 0233     		adds	r3, r3, #2
 5591 041c 042B     		cmp	r3, #4
 5592 041e 4FD8     		bhi	.L539
 5593 0420 DFE813F0 		tbh	[pc, r3, lsl #1]
 5594              	.L541:
 5595 0424 2402     		.2byte	(.L542-.L541)/2
 5596 0426 1202     		.2byte	(.L540-.L541)/2
 5597 0428 4E00     		.2byte	(.L539-.L541)/2
 5598 042a 2402     		.2byte	(.L542-.L541)/2
 5599 042c 1202     		.2byte	(.L540-.L541)/2
 5600              	.LVL621:
 5601              		.p2align 1
 5602              	.L510:
2128:src/display.c **** 	    case -1:
 5603              		.loc 1 2128 6 is_stmt 1 view .LVU1755
2128:src/display.c **** 	    case -1:
 5604              		.loc 1 2128 32 is_stmt 0 view .LVU1756
 5605 042e AF48     		ldr	r0, .L695
2128:src/display.c **** 	    case -1:
 5606              		.loc 1 2128 19 view .LVU1757
 5607 0430 AF49     		ldr	r1, .L695+4
2128:src/display.c **** 	    case -1:
 5608              		.loc 1 2128 32 view .LVU1758
 5609 0432 0068     		ldr	r0, [r0]
2128:src/display.c **** 	    case -1:
 5610              		.loc 1 2128 19 view .LVU1759
 5611 0434 81FB0651 		smull	r5, r1, r1, r6
2128:src/display.c **** 	    case -1:
 5612              		.loc 1 2128 32 view .LVU1760
 5613 0438 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2128:src/display.c **** 	    case -1:
 5614              		.loc 1 2128 19 view .LVU1761
 5615 043c A1EBE671 		sub	r1, r1, r6, asr #31
 5616 0440 01EB4101 		add	r1, r1, r1, lsl #1
 5617 0444 711A     		subs	r1, r6, r1
2128:src/display.c **** 	    case -1:
 5618              		.loc 1 2128 32 view .LVU1762
 5619 0446 C0F30010 		ubfx	r0, r0, #4, #1
2128:src/display.c **** 	    case -1:
 5620              		.loc 1 2128 24 view .LVU1763
 5621 044a 01FB00F1 		mul	r1, r1, r0
 5622 044e 0231     		adds	r1, r1, #2
 5623 0450 0429     		cmp	r1, #4
 5624 0452 00F26782 		bhi	.L586
 5625 0456 DFE811F0 		tbh	[pc, r1, lsl #1]
 5626              	.L514:
ARM GAS  /tmp/ccDDbRKQ.s 			page 189


 5627 045a 4302     		.2byte	(.L515-.L514)/2
 5628 045c 1802     		.2byte	(.L513-.L514)/2
 5629 045e 6502     		.2byte	(.L586-.L514)/2
 5630 0460 4302     		.2byte	(.L515-.L514)/2
 5631 0462 1802     		.2byte	(.L513-.L514)/2
 5632              	.LVL622:
 5633              		.p2align 1
 5634              	.L484:
2084:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5635              		.loc 1 2084 4 is_stmt 1 view .LVU1764
2084:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5636              		.loc 1 2084 7 is_stmt 0 view .LVU1765
 5637 0464 B342     		cmp	r3, r6
 5638 0466 03DD     		ble	.L487
2084:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5639              		.loc 1 2084 45 discriminator 1 view .LVU1766
 5640 0468 5342     		rsbs	r3, r2, #0
2084:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5641              		.loc 1 2084 36 discriminator 1 view .LVU1767
 5642 046a B342     		cmp	r3, r6
 5643 046c 40F30282 		ble	.L488
 5644              	.L487:
2085:src/display.c **** 	  else {
 5645              		.loc 1 2085 6 is_stmt 1 view .LVU1768
2085:src/display.c **** 	  else {
 5646              		.loc 1 2085 26 is_stmt 0 view .LVU1769
 5647 0470 9E4B     		ldr	r3, .L695
 5648 0472 1B68     		ldr	r3, [r3]
 5649 0474 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2085:src/display.c **** 	  else {
 5650              		.loc 1 2085 35 view .LVU1770
 5651 0478 13F0100F 		tst	r3, #16
 5652 047c 14BF     		ite	ne
 5653 047e 0325     		movne	r5, #3
 5654              	.LVL623:
2085:src/display.c **** 	  else {
 5655              		.loc 1 2085 35 view .LVU1771
 5656 0480 0225     		moveq	r5, #2
 5657 0482 6CE6     		b	.L669
 5658              	.LVL624:
 5659              	.L678:
2085:src/display.c **** 	  else {
 5660              		.loc 1 2085 35 view .LVU1772
 5661 0484 013E     		subs	r6, r6, #1
 5662 0486 08EB0602 		add	r2, r8, r6
 5663              	.L477:
2064:src/display.c **** 	    exp--;
 5664              		.loc 1 2064 4 is_stmt 1 discriminator 1 view .LVU1773
2065:src/display.c **** 	  while (*++q == '0');
 5665              		.loc 1 2065 6 discriminator 1 view .LVU1774
 5666 048a A2EB0806 		sub	r6, r2, r8
 5667              	.LVL625:
2066:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5668              		.loc 1 2066 10 discriminator 1 view .LVU1775
2066:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5669              		.loc 1 2066 11 is_stmt 0 discriminator 1 view .LVU1776
 5670 048e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccDDbRKQ.s 			page 190


 5671              	.LVL626:
2066:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5672              		.loc 1 2066 4 discriminator 1 view .LVU1777
 5673 0492 302B     		cmp	r3, #48
 5674 0494 F9D0     		beq	.L477
2067:src/display.c **** 	    *p++ = *q++;
 5675              		.loc 1 2067 10 is_stmt 1 view .LVU1778
 5676 0496 A3F13002 		sub	r2, r3, #48
 5677 049a 092A     		cmp	r2, #9
 5678 049c 3FF658AE 		bhi	.L478
1930:src/display.c **** 	char *r;
 5679              		.loc 1 1930 8 is_stmt 0 view .LVU1779
 5680 04a0 5A46     		mov	r2, fp
 5681              	.LVL627:
 5682              	.L479:
2068:src/display.c **** 	} else {
 5683              		.loc 1 2068 6 is_stmt 1 view .LVU1780
2068:src/display.c **** 	} else {
 5684              		.loc 1 2068 11 is_stmt 0 view .LVU1781
 5685 04a2 02F8013B 		strb	r3, [r2], #1
 5686              	.LVL628:
2067:src/display.c **** 	    *p++ = *q++;
 5687              		.loc 1 2067 10 is_stmt 1 view .LVU1782
2067:src/display.c **** 	    *p++ = *q++;
 5688              		.loc 1 2067 11 is_stmt 0 view .LVU1783
 5689 04a6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2067:src/display.c **** 	    *p++ = *q++;
 5690              		.loc 1 2067 10 view .LVU1784
 5691 04aa A3F13001 		sub	r1, r3, #48
 5692 04ae 0929     		cmp	r1, #9
 5693 04b0 F7D9     		bls	.L479
 5694 04b2 4DE6     		b	.L478
 5695              	.LVL629:
 5696              	.L676:
2058:src/display.c **** 	  q++;
 5697              		.loc 1 2058 4 is_stmt 1 view .LVU1785
2059:src/display.c **** 	} else if (*q == '+')
 5698              		.loc 1 2059 4 view .LVU1786
2058:src/display.c **** 	  q++;
 5699              		.loc 1 2058 13 is_stmt 0 view .LVU1787
 5700 04b4 0122     		movs	r2, #1
 5701 04b6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5702 04ba 0392     		str	r2, [sp, #12]
2059:src/display.c **** 	} else if (*q == '+')
 5703              		.loc 1 2059 5 view .LVU1788
 5704 04bc 9044     		add	r8, r8, r2
 5705              	.LVL630:
2059:src/display.c **** 	} else if (*q == '+')
 5706              		.loc 1 2059 5 view .LVU1789
 5707 04be 1AE6     		b	.L473
 5708              	.LVL631:
 5709              	.L539:
2059:src/display.c **** 	} else if (*q == '+')
 5710              		.loc 1 2059 5 view .LVU1790
 5711 04c0 079A     		ldr	r2, [sp, #28]
2219:src/display.c **** 	  case -1:
 5712              		.loc 1 2219 16 view .LVU1791
ARM GAS  /tmp/ccDDbRKQ.s 			page 191


 5713 04c2 0125     		movs	r5, #1
1924:src/display.c **** 	int odig = 0;
 5714              		.loc 1 1924 15 view .LVU1792
 5715 04c4 3946     		mov	r1, r7
 5716              	.LVL632:
 5717              	.L507:
2233:src/display.c **** 	  };
 5718              		.loc 1 2233 6 is_stmt 1 view .LVU1793
2234:src/display.c **** 	  // Falling through
 5719              		.loc 1 2234 5 view .LVU1794
2238:src/display.c **** 	  odig++;
 5720              		.loc 1 2238 4 view .LVU1795
2238:src/display.c **** 	  odig++;
 5721              		.loc 1 2238 15 is_stmt 0 view .LVU1796
 5722 04c6 5B46     		mov	r3, fp
 5723              	.LVL633:
2238:src/display.c **** 	  odig++;
 5724              		.loc 1 2238 11 view .LVU1797
 5725 04c8 8846     		mov	r8, r1
 5726 04ca 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5727              	.LVL634:
2238:src/display.c **** 	  odig++;
 5728              		.loc 1 2238 11 view .LVU1798
 5729 04ce 08F8020B 		strb	r0, [r8], #2
2239:src/display.c **** 	  *obp++ = '.';
 5730              		.loc 1 2239 4 is_stmt 1 view .LVU1799
2240:src/display.c **** 	  dd--;
 5731              		.loc 1 2240 4 view .LVU1800
 5732              	.LVL635:
2240:src/display.c **** 	  dd--;
 5733              		.loc 1 2240 11 is_stmt 0 view .LVU1801
 5734 04d2 4FF02E0C 		mov	ip, #46
2242:src/display.c **** 	    *obp++ = *p++;
 5735              		.loc 1 2242 13 view .LVU1802
 5736 04d6 901E     		subs	r0, r2, #2
2242:src/display.c **** 	    *obp++ = *p++;
 5737              		.loc 1 2242 10 view .LVU1803
 5738 04d8 002A     		cmp	r2, #0
2240:src/display.c **** 	  dd--;
 5739              		.loc 1 2240 11 view .LVU1804
 5740 04da 81F801C0 		strb	ip, [r1, #1]
2241:src/display.c **** 	  while (dd-- >= 0) {
 5741              		.loc 1 2241 4 is_stmt 1 view .LVU1805
2242:src/display.c **** 	    *obp++ = *p++;
 5742              		.loc 1 2242 4 view .LVU1806
2242:src/display.c **** 	    *obp++ = *p++;
 5743              		.loc 1 2242 10 view .LVU1807
2242:src/display.c **** 	    *obp++ = *p++;
 5744              		.loc 1 2242 13 is_stmt 0 view .LVU1808
 5745 04de 0790     		str	r0, [sp, #28]
2242:src/display.c **** 	    *obp++ = *p++;
 5746              		.loc 1 2242 10 view .LVU1809
 5747 04e0 40F32382 		ble	.L587
2242:src/display.c **** 	    *obp++ = *p++;
 5748              		.loc 1 2242 10 view .LVU1810
 5749 04e4 501C     		adds	r0, r2, #1
 5750 04e6 0131     		adds	r1, r1, #1
ARM GAS  /tmp/ccDDbRKQ.s 			page 192


 5751 04e8 8344     		add	fp, fp, r0
 5752              	.LVL636:
 5753              	.L545:
2243:src/display.c **** 	    odig++;
 5754              		.loc 1 2243 6 is_stmt 1 view .LVU1811
2243:src/display.c **** 	    odig++;
 5755              		.loc 1 2243 13 is_stmt 0 view .LVU1812
 5756 04ea 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5757              	.LVL637:
2243:src/display.c **** 	    odig++;
 5758              		.loc 1 2243 13 view .LVU1813
 5759 04ee 01F8010F 		strb	r0, [r1, #1]!
2244:src/display.c **** 	  }
 5760              		.loc 1 2244 6 is_stmt 1 view .LVU1814
2242:src/display.c **** 	    *obp++ = *p++;
 5761              		.loc 1 2242 10 view .LVU1815
 5762 04f2 5B45     		cmp	r3, fp
 5763 04f4 F9D1     		bne	.L545
 5764 04f6 6FF00103 		mvn	r3, #1
 5765              	.LVL638:
2242:src/display.c **** 	    *obp++ = *p++;
 5766              		.loc 1 2242 10 is_stmt 0 view .LVU1816
 5767 04fa 9044     		add	r8, r8, r2
 5768 04fc 1544     		add	r5, r5, r2
 5769 04fe 0793     		str	r3, [sp, #28]
2246:src/display.c **** 	}
 5770              		.loc 1 2246 13 view .LVU1817
 5771 0500 4FF00109 		mov	r9, #1
 5772              	.L517:
 5773              	.LVL639:
2249:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5774              		.loc 1 2249 2 is_stmt 1 view .LVU1818
2249:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5775              		.loc 1 2249 5 is_stmt 0 view .LVU1819
 5776 0504 049B     		ldr	r3, [sp, #16]
 5777 0506 002B     		cmp	r3, #0
 5778 0508 3FF4C0AE 		beq	.L546
2250:src/display.c **** 	    obp--;
 5779              		.loc 1 2250 10 is_stmt 1 view .LVU1820
 5780 050c B845     		cmp	r8, r7
 5781 050e 7FF6BDAE 		bls	.L546
 5782 0512 4346     		mov	r3, r8
 5783 0514 04E0     		b	.L547
 5784              	.LVL640:
 5785              	.L548:
2250:src/display.c **** 	    obp--;
 5786              		.loc 1 2250 10 is_stmt 0 view .LVU1821
 5787 0516 9F42     		cmp	r7, r3
2252:src/display.c **** 	  }
 5788              		.loc 1 2252 10 view .LVU1822
 5789 0518 05F1FF35 		add	r5, r5, #-1
 5790              	.LVL641:
2250:src/display.c **** 	    obp--;
 5791              		.loc 1 2250 10 is_stmt 1 view .LVU1823
 5792 051c 3FF4B5AE 		beq	.L589
 5793              	.LVL642:
 5794              	.L547:
ARM GAS  /tmp/ccDDbRKQ.s 			page 193


2251:src/display.c **** 	    odig--;
 5795              		.loc 1 2251 6 discriminator 1 view .LVU1824
 5796 0520 9846     		mov	r8, r3
 5797              	.LVL643:
2251:src/display.c **** 	    odig--;
 5798              		.loc 1 2251 6 is_stmt 0 discriminator 1 view .LVU1825
 5799 0522 013B     		subs	r3, r3, #1
 5800              	.LVL644:
2252:src/display.c **** 	  }
 5801              		.loc 1 2252 6 is_stmt 1 discriminator 1 view .LVU1826
2250:src/display.c **** 	    obp--;
 5802              		.loc 1 2250 19 is_stmt 0 discriminator 1 view .LVU1827
 5803 0524 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5804 0528 302A     		cmp	r2, #48
 5805 052a F4D0     		beq	.L548
2250:src/display.c **** 	    obp--;
 5806              		.loc 1 2250 19 discriminator 1 view .LVU1828
 5807 052c AEE6     		b	.L546
 5808              	.LVL645:
 5809              	.L682:
2278:src/display.c **** 	  } else if (c == ',') {
 5810              		.loc 1 2278 6 is_stmt 1 view .LVU1829
2278:src/display.c **** 	  } else if (c == ',') {
 5811              		.loc 1 2278 12 is_stmt 0 view .LVU1830
 5812 052e 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 5813              	.LVL646:
 5814              	.LBB423:
 5815              	.LBI423:
 283:src/display.c ****   if (res) {
 5816              		.loc 1 283 14 is_stmt 1 view .LVU1831
 5817              	.LBB424:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5818              		.loc 1 284 3 view .LVU1832
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5819              		.loc 1 284 6 is_stmt 0 view .LVU1833
 5820 0532 002C     		cmp	r4, #0
 5821 0534 33D0     		beq	.L557
 285:src/display.c ****   } else {
 5822              		.loc 1 285 5 is_stmt 1 view .LVU1834
 285:src/display.c ****   } else {
 5823              		.loc 1 285 12 is_stmt 0 view .LVU1835
 5824 0536 0029     		cmp	r1, #0
 5825              	.LVL647:
 285:src/display.c ****   } else {
 5826              		.loc 1 285 12 view .LVU1836
 5827 0538 0CBF     		ite	eq
 5828 053a 2E22     		moveq	r2, #46
 5829 053c 2C22     		movne	r2, #44
 5830 053e 04F8012B 		strb	r2, [r4], #1
 5831              	.LVL648:
 5832              	.L559:
 285:src/display.c ****   } else {
 5833              		.loc 1 285 12 view .LVU1837
 5834              	.LBE424:
 5835              	.LBE423:
2276:src/display.c **** 	  if (c == '.') {
 5836              		.loc 1 2276 53 is_stmt 1 view .LVU1838
ARM GAS  /tmp/ccDDbRKQ.s 			page 194


2276:src/display.c **** 	  if (c == '.') {
 5837              		.loc 1 2276 12 view .LVU1839
2276:src/display.c **** 	  if (c == '.') {
 5838              		.loc 1 2276 18 is_stmt 0 view .LVU1840
 5839 0542 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5840              	.LVL649:
2276:src/display.c **** 	  if (c == '.') {
 5841              		.loc 1 2276 2 view .LVU1841
 5842 0546 0029     		cmp	r1, #0
 5843 0548 7FF4CAAE 		bne	.L565
2296:src/display.c **** 	  set_exp(exp, 0, res);
 5844              		.loc 1 2296 2 is_stmt 1 view .LVU1842
2296:src/display.c **** 	  set_exp(exp, 0, res);
 5845              		.loc 1 2296 5 is_stmt 0 view .LVU1843
 5846 054c B9F1000F 		cmp	r9, #0
 5847 0550 3FF4DDAE 		beq	.L566
 5848              	.LVL650:
 5849              	.L684:
2297:src/display.c **** #endif
 5850              		.loc 1 2297 4 is_stmt 1 view .LVU1844
 5851 0554 3046     		mov	r0, r6
 5852 0556 2246     		mov	r2, r4
 5853 0558 0021     		movs	r1, #0
 5854              	.LVL651:
2297:src/display.c **** #endif
 5855              		.loc 1 2297 4 is_stmt 0 view .LVU1845
 5856 055a FFF7FEFF 		bl	set_exp
 5857              	.LVL652:
2299:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5858              		.loc 1 2299 2 is_stmt 1 view .LVU1846
2299:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5859              		.loc 1 2299 5 is_stmt 0 view .LVU1847
 5860 055e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5861 0562 2E2B     		cmp	r3, #46
 5862 0564 7FF4D8AE 		bne	.L567
 5863              	.L685:
2299:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5864              		.loc 1 2299 21 discriminator 1 view .LVU1848
 5865 0568 002C     		cmp	r4, #0
 5866 056a 7FF4D5AE 		bne	.L567
2300:src/display.c **** 	*display_digits = odig;
 5867              		.loc 1 2300 4 is_stmt 1 view .LVU1849
 5868              	.LVL653:
 5869              	.LBB426:
 5870              	.LBI426:
 283:src/display.c ****   if (res) {
 5871              		.loc 1 283 14 view .LVU1850
 5872              	.LBB427:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5873              		.loc 1 284 3 view .LVU1851
 5874              	.LBE427:
 5875              	.LBE426:
2300:src/display.c **** 	*display_digits = odig;
 5876              		.loc 1 2300 33 is_stmt 0 view .LVU1852
 5877 056e 019B     		ldr	r3, [sp, #4]
 5878 0570 1868     		ldr	r0, [r3]
2300:src/display.c **** 	*display_digits = odig;
ARM GAS  /tmp/ccDDbRKQ.s 			page 195


 5879              		.loc 1 2300 4 view .LVU1853
 5880 0572 604B     		ldr	r3, .L695+8
2300:src/display.c **** 	*display_digits = odig;
 5881              		.loc 1 2300 33 view .LVU1854
 5882 0574 0138     		subs	r0, r0, #1
 5883              	.LBB429:
 5884              	.LBB428:
 5885 0576 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5886 0578 00EBC000 		add	r0, r0, r0, lsl #3
 5887 057c FFF7FEFF 		bl	set_decimal.part.0
 5888              	.LVL654:
 291:src/display.c **** }
 5889              		.loc 1 291 3 is_stmt 1 view .LVU1855
 291:src/display.c **** }
 5890              		.loc 1 291 10 is_stmt 0 view .LVU1856
 5891 0580 CAE6     		b	.L567
 5892              	.LVL655:
 5893              	.L683:
 291:src/display.c **** }
 5894              		.loc 1 291 10 view .LVU1857
 5895              	.LBE428:
 5896              	.LBE429:
2280:src/display.c **** 	  } else {
 5897              		.loc 1 2280 6 is_stmt 1 view .LVU1858
2280:src/display.c **** 	  } else {
 5898              		.loc 1 2280 12 is_stmt 0 view .LVU1859
 5899 0582 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5900              	.LVL656:
 5901              	.LBB430:
 5902              	.LBI430:
 298:src/display.c ****   if (sep == SEP_NONE)
 5903              		.loc 1 298 14 is_stmt 1 view .LVU1860
 5904              	.LBB431:
 299:src/display.c ****     return res;
 5905              		.loc 1 299 3 view .LVU1861
 299:src/display.c ****     return res;
 5906              		.loc 1 299 6 is_stmt 0 view .LVU1862
 5907 0584 002A     		cmp	r2, #0
 5908 0586 DCD0     		beq	.L559
 301:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5909              		.loc 1 301 3 is_stmt 1 view .LVU1863
 301:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5910              		.loc 1 301 6 is_stmt 0 view .LVU1864
 5911 0588 002C     		cmp	r4, #0
 5912 058a 00F02781 		beq	.L561
 302:src/display.c ****     else *res++ = '.';
 5913              		.loc 1 302 5 is_stmt 1 view .LVU1865
 302:src/display.c ****     else *res++ = '.';
 5914              		.loc 1 302 8 is_stmt 0 view .LVU1866
 5915 058e 012A     		cmp	r2, #1
 302:src/display.c ****     else *res++ = '.';
 5916              		.loc 1 302 27 is_stmt 1 view .LVU1867
 5917              	.LVL657:
 303:src/display.c ****   } else {
 5918              		.loc 1 303 17 is_stmt 0 view .LVU1868
 5919 0590 16BF     		itet	ne
 5920 0592 2E22     		movne	r2, #46
ARM GAS  /tmp/ccDDbRKQ.s 			page 196


 5921              	.LVL658:
 302:src/display.c ****     else *res++ = '.';
 5922              		.loc 1 302 34 view .LVU1869
 5923 0594 04F8011B 		strbeq	r1, [r4], #1
 5924              	.LVL659:
 303:src/display.c ****   } else {
 5925              		.loc 1 303 10 is_stmt 1 view .LVU1870
 303:src/display.c ****   } else {
 5926              		.loc 1 303 17 is_stmt 0 view .LVU1871
 5927 0598 04F8012B 		strbne	r2, [r4], #1
 5928              	.LVL660:
 303:src/display.c ****   } else {
 5929              		.loc 1 303 17 view .LVU1872
 5930 059c D1E7     		b	.L559
 5931              	.LVL661:
 5932              	.L557:
 303:src/display.c ****   } else {
 5933              		.loc 1 303 17 view .LVU1873
 5934              	.LBE431:
 5935              	.LBE430:
 5936              	.LBB433:
 5937              	.LBB425:
 5938 059e AAF10900 		sub	r0, r10, #9
 5939 05a2 FFF7FEFF 		bl	set_decimal.part.0
 5940              	.LVL662:
 303:src/display.c ****   } else {
 5941              		.loc 1 303 17 view .LVU1874
 5942 05a6 544B     		ldr	r3, .L695+12
 5943 05a8 0446     		mov	r4, r0
 5944              	.LVL663:
 303:src/display.c ****   } else {
 5945              		.loc 1 303 17 view .LVU1875
 5946 05aa CAE7     		b	.L559
 5947              	.LVL664:
 5948              	.L563:
 303:src/display.c ****   } else {
 5949              		.loc 1 303 17 view .LVU1876
 5950              	.LBE425:
 5951              	.LBE433:
 5952              	.LBB434:
 5953              	.LBB421:
 331:src/display.c ****   return res;
 5954              		.loc 1 331 8 is_stmt 1 view .LVU1877
 5955 05ac 5046     		mov	r0, r10
 5956 05ae FFF7FEFF 		bl	set_dig
 5957              	.LVL665:
 331:src/display.c ****   return res;
 5958              		.loc 1 331 8 is_stmt 0 view .LVU1878
 5959 05b2 514B     		ldr	r3, .L695+12
 5960 05b4 9FE6     		b	.L564
 5961              	.LVL666:
 5962              	.L498:
 331:src/display.c ****   return res;
 5963              		.loc 1 331 8 view .LVU1879
 5964              	.LBE421:
 5965              	.LBE434:
2117:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 197


 5966              		.loc 1 2117 2 is_stmt 1 view .LVU1880
2117:src/display.c **** 
 5967              		.loc 1 2117 45 view .LVU1881
2117:src/display.c **** 
 5968              		.loc 1 2117 2 is_stmt 0 view .LVU1882
 5969 05b6 1BF80110 		ldrb	r1, [fp, r1]	@ zero_extendqisi2
 5970 05ba 0029     		cmp	r1, #0
 5971 05bc 7FF401AE 		bne	.L569
 5972              	.LVL667:
 5973              	.L505:
2182:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5974              		.loc 1 2182 4 is_stmt 1 view .LVU1883
2183:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5975              		.loc 1 2183 4 view .LVU1884
2183:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5976              		.loc 1 2183 7 is_stmt 0 view .LVU1885
 5977 05c0 002E     		cmp	r6, #0
 5978 05c2 C0F21281 		blt	.L528
2183:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5979              		.loc 1 2183 7 view .LVU1886
 5980 05c6 731C     		adds	r3, r6, #1
2185:src/display.c **** 		*obp++ = ',';
 5981              		.loc 1 2185 31 view .LVU1887
 5982 05c8 DFF824E1 		ldr	lr, .L695+4
 5983 05cc 0593     		str	r3, [sp, #20]
 5984 05ce 0BEB030C 		add	ip, fp, r3
2119:src/display.c **** 	switch (mode) {
 5985              		.loc 1 2119 4 view .LVU1888
 5986 05d2 5D46     		mov	r5, fp
1924:src/display.c **** 	int odig = 0;
 5987              		.loc 1 1924 15 view .LVU1889
 5988 05d4 3846     		mov	r0, r7
 5989 05d6 05E0     		b	.L529
 5990              	.LVL668:
 5991              	.L532:
2186:src/display.c **** 	      *obp++ = *p++;
 5992              		.loc 1 2186 3 is_stmt 1 view .LVU1890
2185:src/display.c **** 		*obp++ = ',';
 5993              		.loc 1 2185 18 is_stmt 0 view .LVU1891
 5994 05d8 0229     		cmp	r1, #2
2186:src/display.c **** 	      *obp++ = *p++;
 5995              		.loc 1 2186 10 view .LVU1892
 5996 05da 05BF     		ittet	eq
 5997 05dc 2C23     		moveq	r3, #44
 5998 05de 4370     		strbeq	r3, [r0, #1]
2187:src/display.c **** 	      odig++;
 5999              		.loc 1 2187 12 view .LVU1893
 6000 05e0 0130     		addne	r0, r0, #1
 6001              	.LVL669:
2186:src/display.c **** 	      *obp++ = *p++;
 6002              		.loc 1 2186 7 view .LVU1894
 6003 05e2 0230     		addeq	r0, r0, #2
 6004              	.LVL670:
 6005              	.L529:
2187:src/display.c **** 	      odig++;
 6006              		.loc 1 2187 8 is_stmt 1 discriminator 2 view .LVU1895
2187:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccDDbRKQ.s 			page 198


 6007              		.loc 1 2187 15 is_stmt 0 discriminator 2 view .LVU1896
 6008 05e4 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6009              	.LVL671:
2185:src/display.c **** 		*obp++ = ',';
 6010              		.loc 1 2185 8 is_stmt 1 discriminator 2 view .LVU1897
2187:src/display.c **** 	      odig++;
 6011              		.loc 1 2187 15 is_stmt 0 discriminator 2 view .LVU1898
 6012 05e8 0370     		strb	r3, [r0]
2188:src/display.c **** 	    }
 6013              		.loc 1 2188 8 is_stmt 1 discriminator 2 view .LVU1899
 6014              	.LVL672:
2184:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6015              		.loc 1 2184 24 discriminator 2 view .LVU1900
2184:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6016              		.loc 1 2184 16 discriminator 2 view .LVU1901
2185:src/display.c **** 		*obp++ = ',';
 6017              		.loc 1 2185 31 is_stmt 0 discriminator 2 view .LVU1902
 6018 05ea ABEB0503 		sub	r3, fp, r5
 6019 05ee 3344     		add	r3, r3, r6
 6020 05f0 8EFB0381 		smull	r8, r1, lr, r3
 6021 05f4 A1EBE371 		sub	r1, r1, r3, asr #31
 6022 05f8 01EB4101 		add	r1, r1, r1, lsl #1
2184:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6023              		.loc 1 2184 6 discriminator 2 view .LVU1903
 6024 05fc AC45     		cmp	ip, r5
2185:src/display.c **** 		*obp++ = ',';
 6025              		.loc 1 2185 31 discriminator 2 view .LVU1904
 6026 05fe A3EB0101 		sub	r1, r3, r1
2184:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6027              		.loc 1 2184 6 discriminator 2 view .LVU1905
 6028 0602 E9D1     		bne	.L532
2190:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6029              		.loc 1 2190 13 view .LVU1906
 6030 0604 2E23     		movs	r3, #46
2191:src/display.c **** 	      *obp++ = *p++;
 6031              		.loc 1 2191 6 view .LVU1907
 6032 0606 002A     		cmp	r2, #0
 6033 0608 059D     		ldr	r5, [sp, #20]
 6034              	.LVL673:
2190:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6035              		.loc 1 2190 6 is_stmt 1 view .LVU1908
2190:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6036              		.loc 1 2190 13 is_stmt 0 view .LVU1909
 6037 060a 4370     		strb	r3, [r0, #1]
2190:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6038              		.loc 1 2190 10 view .LVU1910
 6039 060c 00F10208 		add	r8, r0, #2
 6040              	.LVL674:
2191:src/display.c **** 	      *obp++ = *p++;
 6041              		.loc 1 2191 6 is_stmt 1 view .LVU1911
2191:src/display.c **** 	      *obp++ = *p++;
 6042              		.loc 1 2191 16 view .LVU1912
2191:src/display.c **** 	      *obp++ = *p++;
 6043              		.loc 1 2191 6 is_stmt 0 view .LVU1913
 6044 0610 7FF778AF 		ble	.L517
 6045 0614 0130     		adds	r0, r0, #1
 6046 0616 0CEB0201 		add	r1, ip, r2
ARM GAS  /tmp/ccDDbRKQ.s 			page 199


 6047              	.LVL675:
 6048              	.L533:
2192:src/display.c **** 	      odig++;
 6049              		.loc 1 2192 8 is_stmt 1 discriminator 4 view .LVU1914
2192:src/display.c **** 	      odig++;
 6050              		.loc 1 2192 15 is_stmt 0 discriminator 4 view .LVU1915
 6051 061a 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6052              	.LVL676:
2192:src/display.c **** 	      odig++;
 6053              		.loc 1 2192 15 discriminator 4 view .LVU1916
 6054 061e 00F8013F 		strb	r3, [r0, #1]!
2193:src/display.c **** 	    }
 6055              		.loc 1 2193 8 is_stmt 1 discriminator 4 view .LVU1917
2191:src/display.c **** 	      *obp++ = *p++;
 6056              		.loc 1 2191 43 discriminator 4 view .LVU1918
2191:src/display.c **** 	      *obp++ = *p++;
 6057              		.loc 1 2191 16 discriminator 4 view .LVU1919
2191:src/display.c **** 	      *obp++ = *p++;
 6058              		.loc 1 2191 6 is_stmt 0 discriminator 4 view .LVU1920
 6059 0622 8C45     		cmp	ip, r1
 6060 0624 F9D1     		bne	.L533
 6061 0626 059B     		ldr	r3, [sp, #20]
 6062 0628 1344     		add	r3, r3, r2
 6063 062a 9044     		add	r8, r8, r2
 6064              	.LVL677:
2191:src/display.c **** 	      *obp++ = *p++;
 6065              		.loc 1 2191 6 discriminator 4 view .LVU1921
 6066 062c 1D46     		mov	r5, r3
 6067 062e 69E7     		b	.L517
 6068              	.LVL678:
 6069              	.L670:
1987:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6070              		.loc 1 1987 4 is_stmt 1 view .LVU1922
 6071 0630 324A     		ldr	r2, .L695+16
 6072 0632 5146     		mov	r1, r10
 6073 0634 5046     		mov	r0, r10
 6074 0636 FFF7FEFF 		bl	decNumberNormalize
 6075              	.LVL679:
1988:src/display.c **** 	  z->exponent = 0;
 6076              		.loc 1 1988 4 view .LVU1923
1988:src/display.c **** 	  z->exponent = 0;
 6077              		.loc 1 1988 22 is_stmt 0 view .LVU1924
 6078 063a DAE90023 		ldrd	r2, r3, [r10]
 6079 063e 03EB0208 		add	r8, r3, r2
1989:src/display.c **** 	}
 6080              		.loc 1 1989 16 view .LVU1925
 6081 0642 CAF80490 		str	r9, [r10, #4]
1988:src/display.c **** 	  z->exponent = 0;
 6082              		.loc 1 1988 8 view .LVU1926
 6083 0646 08F1FF38 		add	r8, r8, #-1
 6084              	.LVL680:
1989:src/display.c **** 	}
 6085              		.loc 1 1989 4 is_stmt 1 view .LVU1927
 6086 064a F7E4     		b	.L448
 6087              	.LVL681:
 6088              	.L679:
2077:src/display.c **** 	    while (*q >= '0' && *q <= '9')
ARM GAS  /tmp/ccDDbRKQ.s 			page 200


 6089              		.loc 1 2077 6 view .LVU1928
2078:src/display.c **** 	      *p++ = *q++;
 6090              		.loc 1 2078 13 is_stmt 0 view .LVU1929
 6091 064c 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2078:src/display.c **** 	      *p++ = *q++;
 6092              		.loc 1 2078 12 view .LVU1930
 6093 0650 A3F13002 		sub	r2, r3, #48
 6094 0654 092A     		cmp	r2, #9
2077:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6095              		.loc 1 2077 7 view .LVU1931
 6096 0656 08F10108 		add	r8, r8, #1
 6097              	.LVL682:
2078:src/display.c **** 	      *p++ = *q++;
 6098              		.loc 1 2078 6 is_stmt 1 view .LVU1932
2078:src/display.c **** 	      *p++ = *q++;
 6099              		.loc 1 2078 12 view .LVU1933
 6100 065a 3FF679AD 		bhi	.L478
 6101              	.LVL683:
 6102              	.L483:
2079:src/display.c **** 	  }
 6103              		.loc 1 2079 8 view .LVU1934
2079:src/display.c **** 	  }
 6104              		.loc 1 2079 13 is_stmt 0 view .LVU1935
 6105 065e 01F8013B 		strb	r3, [r1], #1
 6106              	.LVL684:
2078:src/display.c **** 	      *p++ = *q++;
 6107              		.loc 1 2078 12 is_stmt 1 view .LVU1936
2078:src/display.c **** 	      *p++ = *q++;
 6108              		.loc 1 2078 13 is_stmt 0 view .LVU1937
 6109 0662 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2078:src/display.c **** 	      *p++ = *q++;
 6110              		.loc 1 2078 12 view .LVU1938
 6111 0666 A3F13002 		sub	r2, r3, #48
 6112 066a 092A     		cmp	r2, #9
 6113 066c F7D9     		bls	.L483
 6114 066e 6FE5     		b	.L478
 6115              	.LVL685:
 6116              	.L677:
2061:src/display.c **** 	for (; *q == '0'; q++);
 6117              		.loc 1 2061 4 is_stmt 1 view .LVU1939
1944:src/display.c **** 	int trimzeros = 0;
 6118              		.loc 1 1944 6 is_stmt 0 view .LVU1940
 6119 0670 0022     		movs	r2, #0
 6120 0672 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6121 0676 0392     		str	r2, [sp, #12]
2061:src/display.c **** 	for (; *q == '0'; q++);
 6122              		.loc 1 2061 5 view .LVU1941
 6123 0678 08F10108 		add	r8, r8, #1
 6124              	.LVL686:
2061:src/display.c **** 	for (; *q == '0'; q++);
 6125              		.loc 1 2061 5 view .LVU1942
 6126 067c 3BE5     		b	.L473
 6127              	.LVL687:
 6128              	.L671:
1995:src/display.c **** 	    x[0] = '-';
 6129              		.loc 1 1995 34 discriminator 1 view .LVU1943
 6130 067e 6B20     		movs	r0, #107
ARM GAS  /tmp/ccDDbRKQ.s 			page 201


 6131 0680 FFF7FEFF 		bl	get_user_flag
 6132              	.LVL688:
1995:src/display.c **** 	    x[0] = '-';
 6133              		.loc 1 1995 31 discriminator 1 view .LVU1944
 6134 0684 0028     		cmp	r0, #0
 6135 0686 3FF4EAAC 		beq	.L450
1996:src/display.c **** 	    x[1] = '0';
 6136              		.loc 1 1996 6 is_stmt 1 view .LVU1945
1997:src/display.c **** 	  } else
 6137              		.loc 1 1997 6 view .LVU1946
1996:src/display.c **** 	    x[1] = '0';
 6138              		.loc 1 1996 11 is_stmt 0 view .LVU1947
 6139 068a 43F22D03 		movw	r3, #12333
 6140 068e ADF82430 		strh	r3, [sp, #36]	@ movhi
1997:src/display.c **** 	  } else
 6141              		.loc 1 1997 11 view .LVU1948
 6142 0692 E7E4     		b	.L451
 6143              	.LVL689:
 6144              	.L675:
2054:src/display.c **** 	  CLR_MANT_SIGN;
 6145              		.loc 1 2054 4 is_stmt 1 view .LVU1949
 6146              	.LBB435:
 6147              	.LBI435:
 249:src/display.c **** {
 6148              		.loc 1 249 13 view .LVU1950
 6149              	.LBB436:
 251:src/display.c **** }
 6150              		.loc 1 251 3 view .LVU1951
 6151 0694 8220     		movs	r0, #130
 6152 0696 FFF7FEFF 		bl	clr_dot
 6153              	.LVL690:
 6154              	.LBE436:
 6155              	.LBE435:
2055:src/display.c **** 	}
 6156              		.loc 1 2055 4 view .LVU1952
 6157              	.LBB437:
 6158              	.LBI437:
 239:src/display.c **** {
 6159              		.loc 1 239 13 view .LVU1953
 6160              	.LBB438:
 241:src/display.c **** }
 6161              		.loc 1 241 3 view .LVU1954
 6162 069a 8120     		movs	r0, #129
 6163 069c FFF7FEFF 		bl	clr_dot
 6164              	.LVL691:
 242:src/display.c **** 
 6165              		.loc 1 242 1 is_stmt 0 view .LVU1955
 6166 06a0 1FE5     		b	.L471
 6167              	.LVL692:
 6168              	.L466:
 242:src/display.c **** 
 6169              		.loc 1 242 1 view .LVU1956
 6170              	.LBE438:
 6171              	.LBE437:
 6172              	.LBB439:
2016:src/display.c **** 
 6173              		.loc 1 2016 4 is_stmt 1 view .LVU1957
ARM GAS  /tmp/ccDDbRKQ.s 			page 202


2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6174              		.loc 1 2018 4 view .LVU1958
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6175              		.loc 1 2018 11 is_stmt 0 view .LVU1959
 6176 06a2 2A46     		mov	r2, r5
 6177 06a4 07A9     		add	r1, sp, #28
 6178 06a6 5046     		mov	r0, r10
 6179 06a8 FFF7FEFF 		bl	std_round_fix
 6180              	.LVL693:
 6181              	.LBE439:
1945:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6182              		.loc 1 1945 6 view .LVU1960
 6183 06ac 0023     		movs	r3, #0
 6184              	.LBB440:
2018:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6185              		.loc 1 2018 11 view .LVU1961
 6186 06ae 0546     		mov	r5, r0
 6187              	.LVL694:
2019:src/display.c **** 	    // allow zeros to be trimmed
 6188              		.loc 1 2019 4 is_stmt 1 view .LVU1962
 6189              	.LBE440:
1945:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6190              		.loc 1 1945 6 is_stmt 0 view .LVU1963
 6191 06b0 0493     		str	r3, [sp, #16]
 6192 06b2 F0E4     		b	.L572
 6193              	.LVL695:
 6194              	.L681:
2255:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6195              		.loc 1 2255 72 discriminator 2 view .LVU1964
 6196 06b4 06F2E732 		addw	r2, r6, #999
2255:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6197              		.loc 1 2255 58 discriminator 2 view .LVU1965
 6198 06b8 40F2CE73 		movw	r3, #1998
 6199 06bc 9A42     		cmp	r2, r3
 6200 06be 7FF6EBAD 		bls	.L549
2256:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6201              		.loc 1 2256 4 is_stmt 1 view .LVU1966
2256:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6202              		.loc 1 2256 20 is_stmt 0 view .LVU1967
 6203 06c2 019A     		ldr	r2, [sp, #4]
 6204 06c4 0A23     		movs	r3, #10
2257:src/display.c **** 	  return;
 6205              		.loc 1 2257 4 view .LVU1968
 6206 06c6 2146     		mov	r1, r4
 6207 06c8 5046     		mov	r0, r10
2256:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6208              		.loc 1 2256 20 view .LVU1969
 6209 06ca 1360     		str	r3, [r2]
2257:src/display.c **** 	  return;
 6210              		.loc 1 2257 4 is_stmt 1 view .LVU1970
 6211 06cc FFF7FEFF 		bl	set_x_dn
 6212              	.LVL696:
2258:src/display.c **** 	}
 6213              		.loc 1 2258 4 view .LVU1971
 6214 06d0 24E6     		b	.L441
 6215              	.LVL697:
 6216              	.L552:
ARM GAS  /tmp/ccDDbRKQ.s 			page 203


2270:src/display.c **** 	      SET_MANT_SIGN;
 6217              		.loc 1 2270 6 view .LVU1972
2270:src/display.c **** 	      SET_MANT_SIGN;
 6218              		.loc 1 2270 9 is_stmt 0 view .LVU1973
 6219 06d2 BAF1000F 		cmp	r10, #0
 6220 06d6 40F00781 		bne	.L555
2271:src/display.c **** 	    else
 6221              		.loc 1 2271 8 is_stmt 1 view .LVU1974
 6222              	.LBB441:
 6223              	.LBI441:
 234:src/display.c **** {
 6224              		.loc 1 234 13 view .LVU1975
 6225              	.LBB442:
 236:src/display.c **** }
 6226              		.loc 1 236 3 view .LVU1976
 6227 06da 8120     		movs	r0, #129
 6228 06dc FFF7FEFF 		bl	set_dot
 6229              	.LVL698:
 236:src/display.c **** }
 6230              		.loc 1 236 3 is_stmt 0 view .LVU1977
 6231              	.LBE442:
 6232              	.LBE441:
2276:src/display.c **** 	  if (c == '.') {
 6233              		.loc 1 2276 12 is_stmt 1 view .LVU1978
2276:src/display.c **** 	  if (c == '.') {
 6234              		.loc 1 2276 18 is_stmt 0 view .LVU1979
 6235 06e0 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 6236              	.LVL699:
2276:src/display.c **** 	  if (c == '.') {
 6237              		.loc 1 2276 2 view .LVU1980
 6238 06e4 0029     		cmp	r1, #0
 6239 06e6 7FF4F8AD 		bne	.L554
 6240 06ea 0CE6     		b	.L553
 6241              	.L696:
 6242              		.align	2
 6243              	.L695:
 6244 06ec 00000000 		.word	main_ram
 6245 06f0 56555555 		.word	1431655766
 6246 06f4 00000000 		.word	.LANCHOR1
 6247 06f8 00000000 		.word	.LANCHOR0
 6248 06fc 00000000 		.word	Ctx
 6249              	.LVL700:
 6250              	.L672:
2004:src/display.c **** 	  return;
 6251              		.loc 1 2004 4 is_stmt 1 view .LVU1981
 6252              	.LBB443:
 6253              	.LBI443:
1792:src/display.c **** 	const int dbl = is_dblmode();
 6254              		.loc 1 1792 19 view .LVU1982
 6255              	.LBB444:
1793:src/display.c **** 	char *p;
 6256              		.loc 1 1793 2 view .LVU1983
1793:src/display.c **** 	char *p;
 6257              		.loc 1 1793 18 is_stmt 0 view .LVU1984
 6258 0700 FFF7FEFF 		bl	is_dblmode
 6259              	.LVL701:
1809:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
ARM GAS  /tmp/ccDDbRKQ.s 			page 204


 6260              		.loc 1 1809 5 view .LVU1985
 6261 0704 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6262 0708 2D2B     		cmp	r3, #45
1793:src/display.c **** 	char *p;
 6263              		.loc 1 1793 18 view .LVU1986
 6264 070a 0446     		mov	r4, r0
 6265              	.LVL702:
1794:src/display.c **** 	int i, j;
 6266              		.loc 1 1794 2 is_stmt 1 view .LVU1987
1795:src/display.c **** 	char *upper_str;
 6267              		.loc 1 1795 2 view .LVU1988
1796:src/display.c **** 	enum separator_modes separator_mode;
 6268              		.loc 1 1796 2 view .LVU1989
1797:src/display.c **** 	char decimal_mark;
 6269              		.loc 1 1797 2 view .LVU1990
1798:src/display.c **** 	char thousands_sep;
 6270              		.loc 1 1798 2 view .LVU1991
1799:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6271              		.loc 1 1799 2 view .LVU1992
1805:src/display.c **** #endif
 6272              		.loc 1 1805 2 view .LVU1993
1807:src/display.c **** 
 6273              		.loc 1 1807 2 view .LVU1994
1809:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6274              		.loc 1 1809 2 view .LVU1995
1809:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6275              		.loc 1 1809 5 is_stmt 0 view .LVU1996
 6276 070c 00F01681 		beq	.L689
1822:src/display.c **** 
 6277              		.loc 1 1822 16 view .LVU1997
 6278 0710 4FF0000A 		mov	r10, #0
 6279              	.LVL703:
 6280              	.L453:
1824:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6281              		.loc 1 1824 2 is_stmt 1 view .LVU1998
1824:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6282              		.loc 1 1824 6 is_stmt 0 view .LVU1999
 6283 0714 0021     		movs	r1, #0
 6284 0716 3846     		mov	r0, r7
 6285 0718 FFF7FEFF 		bl	find_char
 6286              	.LVL704:
1825:src/display.c **** 
 6287              		.loc 1 1825 2 is_stmt 1 view .LVU2000
1825:src/display.c **** 
 6288              		.loc 1 1825 23 is_stmt 0 view .LVU2001
 6289 071c C21B     		subs	r2, r0, r7
1825:src/display.c **** 
 6290              		.loc 1 1825 2 view .LVU2002
 6291 071e C2F12202 		rsb	r2, r2, #34
 6292 0722 3021     		movs	r1, #48
 6293 0724 FFF7FEFF 		bl	xset
 6294              	.LVL705:
1827:src/display.c **** 	  separator_mode = SEP_COMMA;
 6295              		.loc 1 1827 2 is_stmt 1 view .LVU2003
1827:src/display.c **** 	  separator_mode = SEP_COMMA;
 6296              		.loc 1 1827 18 is_stmt 0 view .LVU2004
 6297 0728 A74A     		ldr	r2, .L697
ARM GAS  /tmp/ccDDbRKQ.s 			page 205


1838:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6298              		.loc 1 1838 6 view .LVU2005
 6299 072a 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1827:src/display.c **** 	  separator_mode = SEP_COMMA;
 6300              		.loc 1 1827 5 view .LVU2006
 6301 072c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1835:src/display.c **** 	}
 6302              		.loc 1 1835 18 view .LVU2007
 6303 072e 002A     		cmp	r2, #0
 6304 0730 15BF     		itete	ne
 6305 0732 4FF0020B 		movne	fp, #2
 6306 0736 2C26     		moveq	r6, #44
 6307 0738 2E26     		movne	r6, #46
 6308              	.LVL706:
1835:src/display.c **** 	}
 6309              		.loc 1 1835 18 view .LVU2008
 6310 073a 2E25     		moveq	r5, #46
 6311              	.LVL707:
1835:src/display.c **** 	}
 6312              		.loc 1 1835 18 view .LVU2009
 6313 073c 18BF     		it	ne
 6314 073e 2C25     		movne	r5, #44
 6315              	.LVL708:
1838:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6316              		.loc 1 1838 2 is_stmt 1 view .LVU2010
1838:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6317              		.loc 1 1838 5 is_stmt 0 view .LVU2011
 6318 0740 13F0380F 		tst	r3, #56
 6319 0744 40F0D680 		bne	.L690
1865:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6320              		.loc 1 1865 4 is_stmt 1 view .LVU2012
 6321              	.LVL709:
1866:src/display.c **** 	  x[1] = decimal_mark;
 6322              		.loc 1 1866 4 view .LVU2013
 6323 0748 1022     		movs	r2, #16
 6324 074a 791C     		adds	r1, r7, #1
 6325 074c B81C     		adds	r0, r7, #2
 6326 074e FFF7FEFF 		bl	xcopy
 6327              	.LVL710:
1867:src/display.c **** 	  if (grouping) {
 6328              		.loc 1 1867 4 view .LVU2014
1869:src/display.c **** 	    x[5] = thousands_sep;
 6329              		.loc 1 1869 6 is_stmt 0 view .LVU2015
 6330 0752 0D22     		movs	r2, #13
 6331 0754 791D     		adds	r1, r7, #5
 6332 0756 B81D     		adds	r0, r7, #6
1867:src/display.c **** 	  if (grouping) {
 6333              		.loc 1 1867 9 view .LVU2016
 6334 0758 7D70     		strb	r5, [r7, #1]
1868:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6335              		.loc 1 1868 4 is_stmt 1 view .LVU2017
1869:src/display.c **** 	    x[5] = thousands_sep;
 6336              		.loc 1 1869 6 view .LVU2018
 6337 075a FFF7FEFF 		bl	xcopy
 6338              	.LVL711:
1870:src/display.c **** 	    x += 9;
 6339              		.loc 1 1870 6 view .LVU2019
ARM GAS  /tmp/ccDDbRKQ.s 			page 206


1871:src/display.c **** 	  }
 6340              		.loc 1 1871 8 is_stmt 0 view .LVU2020
 6341 075e 07F10905 		add	r5, r7, #9
 6342              	.LVL712:
1870:src/display.c **** 	    x += 9;
 6343              		.loc 1 1870 11 view .LVU2021
 6344 0762 7E71     		strb	r6, [r7, #5]
1871:src/display.c **** 	  }
 6345              		.loc 1 1871 6 is_stmt 1 view .LVU2022
 6346              	.LVL713:
1874:src/display.c **** 	    if (exp < 0) {
 6347              		.loc 1 1874 4 view .LVU2023
1874:src/display.c **** 	    if (exp < 0) {
 6348              		.loc 1 1874 7 is_stmt 0 view .LVU2024
 6349 0764 002C     		cmp	r4, #0
 6350 0766 00F0E780 		beq	.L457
1875:src/display.c **** 	      x[9] = '-';
 6351              		.loc 1 1875 6 is_stmt 1 view .LVU2025
1875:src/display.c **** 	      x[9] = '-';
 6352              		.loc 1 1875 9 is_stmt 0 view .LVU2026
 6353 076a B8F1000F 		cmp	r8, #0
1876:src/display.c **** 	      exp = -exp;
 6354              		.loc 1 1876 8 is_stmt 1 view .LVU2027
1877:src/display.c **** 	    }
 6355              		.loc 1 1877 8 view .LVU2028
1881:src/display.c **** 	    x[10] = '0' + j;
 6356              		.loc 1 1881 8 is_stmt 0 view .LVU2029
 6357 076e 974B     		ldr	r3, .L697+4
1883:src/display.c **** 	  }
 6358              		.loc 1 1883 18 view .LVU2030
 6359 0770 9749     		ldr	r1, .L697+8
1876:src/display.c **** 	      exp = -exp;
 6360              		.loc 1 1876 13 view .LVU2031
 6361 0772 B6BF     		itet	lt
 6362 0774 2D22     		movlt	r2, #45
1880:src/display.c **** 	    j = exp / 1000;
 6363              		.loc 1 1880 13 view .LVU2032
 6364 0776 2022     		movge	r2, #32
1877:src/display.c **** 	    }
 6365              		.loc 1 1877 12 view .LVU2033
 6366 0778 C8F10008 		rsblt	r8, r8, #0
 6367              	.LVL714:
1877:src/display.c **** 	    }
 6368              		.loc 1 1877 12 view .LVU2034
 6369 077c BA74     		strb	r2, [r7, #18]
1881:src/display.c **** 	    x[10] = '0' + j;
 6370              		.loc 1 1881 6 is_stmt 1 view .LVU2035
1881:src/display.c **** 	    x[10] = '0' + j;
 6371              		.loc 1 1881 8 is_stmt 0 view .LVU2036
 6372 077e A3FB0823 		umull	r2, r3, r3, r8
 6373 0782 9B09     		lsrs	r3, r3, #6
 6374              	.LVL715:
1882:src/display.c **** 	    exp -= 1000 * j;
 6375              		.loc 1 1882 6 is_stmt 1 view .LVU2037
1882:src/display.c **** 	    exp -= 1000 * j;
 6376              		.loc 1 1882 18 is_stmt 0 view .LVU2038
 6377 0784 03F13002 		add	r2, r3, #48
ARM GAS  /tmp/ccDDbRKQ.s 			page 207


1883:src/display.c **** 	  }
 6378              		.loc 1 1883 10 view .LVU2039
 6379 0788 01FB0388 		mla	r8, r1, r3, r8
 6380              	.LVL716:
1882:src/display.c **** 	    exp -= 1000 * j;
 6381              		.loc 1 1882 12 view .LVU2040
 6382 078c FA74     		strb	r2, [r7, #19]
1883:src/display.c **** 	  }
 6383              		.loc 1 1883 6 is_stmt 1 view .LVU2041
 6384              	.LVL717:
 6385              	.L459:
1889:src/display.c **** 	  *x = 0;
 6386              		.loc 1 1889 4 view .LVU2042
 6387 078e 0B22     		movs	r2, #11
 6388 0790 2946     		mov	r1, r5
 6389 0792 07F10A00 		add	r0, r7, #10
 6390 0796 FFF7FEFF 		bl	xcopy
 6391              	.LVL718:
1890:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6392              		.loc 1 1890 4 view .LVU2043
1890:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6393              		.loc 1 1890 7 is_stmt 0 view .LVU2044
 6394 079a 0022     		movs	r2, #0
1891:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6395              		.loc 1 1891 4 view .LVU2045
 6396 079c 4046     		mov	r0, r8
 6397 079e 0121     		movs	r1, #1
1890:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6398              		.loc 1 1890 7 view .LVU2046
 6399 07a0 7A72     		strb	r2, [r7, #9]
1891:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6400              		.loc 1 1891 4 is_stmt 1 view .LVU2047
 6401 07a2 FFF7FEFF 		bl	set_exp
 6402              	.LVL719:
1892:src/display.c **** 	}
 6403              		.loc 1 1892 4 view .LVU2048
1892:src/display.c **** 	}
 6404              		.loc 1 1892 4 is_stmt 0 view .LVU2049
 6405 07a6 A7EB0A0A 		sub	r10, r7, r10
 6406              	.LVL720:
1892:src/display.c **** 	}
 6407              		.loc 1 1892 6 view .LVU2050
 6408 07aa 0924     		movs	r4, #9
 6409              	.LVL721:
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6410              		.loc 1 1895 11 is_stmt 1 view .LVU2051
 6411              	.L460:
1896:src/display.c **** 	  }
 6412              		.loc 1 1896 6 view .LVU2052
 6413              	.LBB445:
 6414              	.LBI445:
 298:src/display.c ****   if (sep == SEP_NONE)
 6415              		.loc 1 298 14 view .LVU2053
 6416              	.LBB446:
 299:src/display.c ****     return res;
 6417              		.loc 1 299 3 view .LVU2054
 301:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
ARM GAS  /tmp/ccDDbRKQ.s 			page 208


 6418              		.loc 1 301 3 view .LVU2055
 6419 07ac 2046     		mov	r0, r4
 6420 07ae 5946     		mov	r1, fp
 6421              	.LBE446:
 6422              	.LBE445:
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6423              		.loc 1 1895 38 is_stmt 0 view .LVU2056
 6424 07b0 1B34     		adds	r4, r4, #27
 6425              	.LVL722:
 6426              	.LBB448:
 6427              	.LBB447:
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6428              		.loc 1 1895 38 view .LVU2057
 6429 07b2 FFF7FEFF 		bl	set_separator.part.0
 6430              	.LVL723:
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6431              		.loc 1 1895 38 view .LVU2058
 6432              	.LBE447:
 6433              	.LBE448:
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6434              		.loc 1 1895 36 is_stmt 1 view .LVU2059
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6435              		.loc 1 1895 11 view .LVU2060
1895:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6436              		.loc 1 1895 4 is_stmt 0 view .LVU2061
 6437 07b6 512C     		cmp	r4, #81
 6438 07b8 F8DD     		ble	.L460
 6439 07ba 6C1E     		subs	r4, r5, #1
 6440              	.LVL724:
 6441              	.L462:
1901:src/display.c **** 
 6442              		.loc 1 1901 4 is_stmt 1 view .LVU2062
 6443 07bc 4846     		mov	r0, r9
 6444 07be 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1900:src/display.c **** 	  set_dig(j, x[i]);
 6445              		.loc 1 1900 33 is_stmt 0 view .LVU2063
 6446 07c2 09F10909 		add	r9, r9, #9
 6447              	.LVL725:
1901:src/display.c **** 
 6448              		.loc 1 1901 4 view .LVU2064
 6449 07c6 FFF7FEFF 		bl	set_dig
 6450              	.LVL726:
1900:src/display.c **** 	  set_dig(j, x[i]);
 6451              		.loc 1 1900 26 is_stmt 1 view .LVU2065
1900:src/display.c **** 	  set_dig(j, x[i]);
 6452              		.loc 1 1900 18 view .LVU2066
1900:src/display.c **** 	  set_dig(j, x[i]);
 6453              		.loc 1 1900 2 is_stmt 0 view .LVU2067
 6454 07ca B9F16C0F 		cmp	r9, #108
 6455 07ce F5D1     		bne	.L462
1903:src/display.c **** 	set_status(upper_str - negative);
 6456              		.loc 1 1903 2 is_stmt 1 view .LVU2068
1903:src/display.c **** 	set_status(upper_str - negative);
 6457              		.loc 1 1903 5 is_stmt 0 view .LVU2069
 6458 07d0 0023     		movs	r3, #0
1904:src/display.c ****       }
 6459              		.loc 1 1904 2 view .LVU2070
ARM GAS  /tmp/ccDDbRKQ.s 			page 209


 6460 07d2 5046     		mov	r0, r10
1903:src/display.c **** 	set_status(upper_str - negative);
 6461              		.loc 1 1903 5 view .LVU2071
 6462 07d4 2B70     		strb	r3, [r5]
1904:src/display.c ****       }
 6463              		.loc 1 1904 2 is_stmt 1 view .LVU2072
 6464 07d6 FFF7FEFF 		bl	set_status
 6465              	.LVL727:
1905:src/display.c **** 
 6466              		.loc 1 1905 7 is_stmt 0 view .LVU2073
 6467 07da 9FE5     		b	.L441
 6468              	.LVL728:
 6469              	.L561:
1905:src/display.c **** 
 6470              		.loc 1 1905 7 view .LVU2074
 6471              	.LBE444:
 6472              	.LBE443:
 6473              	.LBB453:
 6474              	.LBB432:
 6475 07dc 1146     		mov	r1, r2
 6476              	.LVL729:
1905:src/display.c **** 
 6477              		.loc 1 1905 7 view .LVU2075
 6478 07de 5046     		mov	r0, r10
 6479 07e0 FFF7FEFF 		bl	set_separator.part.0
 6480              	.LVL730:
1905:src/display.c **** 
 6481              		.loc 1 1905 7 view .LVU2076
 6482 07e4 7B4B     		ldr	r3, .L697+12
 6483 07e6 0446     		mov	r4, r0
 6484              	.LVL731:
1905:src/display.c **** 
 6485              		.loc 1 1905 7 view .LVU2077
 6486 07e8 ABE6     		b	.L559
 6487              	.LVL732:
 6488              	.L528:
1905:src/display.c **** 
 6489              		.loc 1 1905 7 view .LVU2078
 6490              	.LBE432:
 6491              	.LBE453:
2196:src/display.c **** 	    odig++;
 6492              		.loc 1 2196 6 is_stmt 1 view .LVU2079
2197:src/display.c **** 	    *obp++ = '.';
 6493              		.loc 1 2197 6 view .LVU2080
2198:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6494              		.loc 1 2198 6 view .LVU2081
2196:src/display.c **** 	    odig++;
 6495              		.loc 1 2196 13 is_stmt 0 view .LVU2082
 6496 07ea 42F63063 		movw	r3, #11824
 6497 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2199:src/display.c **** 	      *obp++ = '0';
 6498              		.loc 1 2199 6 is_stmt 1 view .LVU2083
 6499              	.LVL733:
2199:src/display.c **** 	      *obp++ = '0';
 6500              		.loc 1 2199 20 view .LVU2084
2199:src/display.c **** 	      *obp++ = '0';
 6501              		.loc 1 2199 6 is_stmt 0 view .LVU2085
ARM GAS  /tmp/ccDDbRKQ.s 			page 210


 6502 07f2 731C     		adds	r3, r6, #1
 6503              	.LVL734:
2199:src/display.c **** 	      *obp++ = '0';
 6504              		.loc 1 2199 6 view .LVU2086
 6505 07f4 00F0DD80 		beq	.L691
 6506 07f8 C6F10102 		rsb	r2, r6, #1
2198:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6507              		.loc 1 2198 10 view .LVU2087
 6508 07fc 0DF12600 		add	r0, sp, #38
 6509              	.LVL735:
2198:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6510              		.loc 1 2198 10 view .LVU2088
 6511 0800 079D     		ldr	r5, [sp, #28]
 6512 0802 3A44     		add	r2, r2, r7
 6513 0804 0346     		mov	r3, r0
 6514              	.LVL736:
2200:src/display.c **** 	      odig++;
 6515              		.loc 1 2200 15 view .LVU2089
 6516 0806 3021     		movs	r1, #48
 6517              	.LVL737:
 6518              	.L536:
2200:src/display.c **** 	      odig++;
 6519              		.loc 1 2200 8 is_stmt 1 discriminator 3 view .LVU2090
2200:src/display.c **** 	      odig++;
 6520              		.loc 1 2200 15 is_stmt 0 discriminator 3 view .LVU2091
 6521 0808 03F8011B 		strb	r1, [r3], #1
 6522              	.LVL738:
2201:src/display.c **** 	      dd--;
 6523              		.loc 1 2201 8 is_stmt 1 discriminator 3 view .LVU2092
2202:src/display.c **** 	    }
 6524              		.loc 1 2202 8 discriminator 3 view .LVU2093
2199:src/display.c **** 	      *obp++ = '0';
 6525              		.loc 1 2199 25 discriminator 3 view .LVU2094
2199:src/display.c **** 	      *obp++ = '0';
 6526              		.loc 1 2199 20 discriminator 3 view .LVU2095
2199:src/display.c **** 	      *obp++ = '0';
 6527              		.loc 1 2199 6 is_stmt 0 discriminator 3 view .LVU2096
 6528 080c 9342     		cmp	r3, r2
 6529 080e FBD1     		bne	.L536
 6530 0810 7319     		adds	r3, r6, r5
 6531              	.LVL739:
2199:src/display.c **** 	      *obp++ = '0';
 6532              		.loc 1 2199 6 discriminator 3 view .LVU2097
 6533 0812 6FEA0608 		mvn	r8, r6
 6534 0816 0133     		adds	r3, r3, #1
 6535 0818 8044     		add	r8, r8, r0
 6536 081a 7542     		rsbs	r5, r6, #0
 6537              	.L535:
 6538              	.LVL740:
2204:src/display.c **** 	      *obp++ = *p++;
 6539              		.loc 1 2204 12 is_stmt 1 view .LVU2098
2204:src/display.c **** 	      *obp++ = *p++;
 6540              		.loc 1 2204 15 is_stmt 0 view .LVU2099
 6541 081c 5A1E     		subs	r2, r3, #1
2204:src/display.c **** 	      *obp++ = *p++;
 6542              		.loc 1 2204 12 view .LVU2100
 6543 081e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 211


2204:src/display.c **** 	      *obp++ = *p++;
 6544              		.loc 1 2204 15 view .LVU2101
 6545 0820 0792     		str	r2, [sp, #28]
2204:src/display.c **** 	      *obp++ = *p++;
 6546              		.loc 1 2204 12 view .LVU2102
 6547 0822 7FF76FAE 		ble	.L517
 6548 0826 4344     		add	r3, r3, r8
 6549 0828 581E     		subs	r0, r3, #1
 6550 082a 08F1FF38 		add	r8, r8, #-1
 6551              	.LVL741:
 6552              	.L537:
2205:src/display.c **** 	      odig++;
 6553              		.loc 1 2205 8 is_stmt 1 view .LVU2103
2205:src/display.c **** 	      odig++;
 6554              		.loc 1 2205 15 is_stmt 0 view .LVU2104
 6555 082e 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6556              	.LVL742:
2205:src/display.c **** 	      odig++;
 6557              		.loc 1 2205 15 view .LVU2105
 6558 0832 08F8011F 		strb	r1, [r8, #1]!
2206:src/display.c **** 	    }
 6559              		.loc 1 2206 8 is_stmt 1 view .LVU2106
2204:src/display.c **** 	      *obp++ = *p++;
 6560              		.loc 1 2204 12 view .LVU2107
 6561 0836 8045     		cmp	r8, r0
 6562 0838 F9D1     		bne	.L537
 6563              	.LVL743:
2204:src/display.c **** 	      *obp++ = *p++;
 6564              		.loc 1 2204 12 is_stmt 0 view .LVU2108
 6565 083a 681C     		adds	r0, r5, #1
 6566 083c 4FF0FF31 		mov	r1, #-1
 6567 0840 1518     		adds	r5, r2, r0
 6568 0842 9846     		mov	r8, r3
 6569 0844 0791     		str	r1, [sp, #28]
 6570 0846 5DE6     		b	.L517
 6571              	.LVL744:
 6572              	.L540:
2222:src/display.c **** 	    odig++;
 6573              		.loc 1 2222 6 is_stmt 1 view .LVU2109
2222:src/display.c **** 	    odig++;
 6574              		.loc 1 2222 13 is_stmt 0 view .LVU2110
 6575 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6576 084c 8DF82430 		strb	r3, [sp, #36]
2223:src/display.c **** 	    dd--;
 6577              		.loc 1 2223 6 is_stmt 1 view .LVU2111
 6578              	.LVL745:
2224:src/display.c **** 	    exp--;
 6579              		.loc 1 2224 6 view .LVU2112
2224:src/display.c **** 	    exp--;
 6580              		.loc 1 2224 8 is_stmt 0 view .LVU2113
 6581 0850 013A     		subs	r2, r2, #1
2225:src/display.c **** 	  case -2:
 6582              		.loc 1 2225 6 is_stmt 1 view .LVU2114
2225:src/display.c **** 	  case -2:
 6583              		.loc 1 2225 9 is_stmt 0 view .LVU2115
 6584 0852 013E     		subs	r6, r6, #1
 6585              	.LVL746:
ARM GAS  /tmp/ccDDbRKQ.s 			page 212


2225:src/display.c **** 	  case -2:
 6586              		.loc 1 2225 9 view .LVU2116
 6587 0854 0325     		movs	r5, #3
2222:src/display.c **** 	    odig++;
 6588              		.loc 1 2222 17 view .LVU2117
 6589 0856 0DF1590B 		add	fp, sp, #89
 6590              	.LVL747:
2222:src/display.c **** 	    odig++;
 6591              		.loc 1 2222 10 view .LVU2118
 6592 085a 0DF12501 		add	r1, sp, #37
 6593              	.LVL748:
 6594              	.L543:
2228:src/display.c **** 	    odig++;
 6595              		.loc 1 2228 6 is_stmt 1 view .LVU2119
2228:src/display.c **** 	    odig++;
 6596              		.loc 1 2228 13 is_stmt 0 view .LVU2120
 6597 085e 1BF8013B 		ldrb	r3, [fp], #1	@ zero_extendqisi2
 6598              	.LVL749:
2228:src/display.c **** 	    odig++;
 6599              		.loc 1 2228 13 view .LVU2121
 6600 0862 01F8013B 		strb	r3, [r1], #1
 6601              	.LVL750:
2229:src/display.c **** 	    dd--;
 6602              		.loc 1 2229 6 is_stmt 1 view .LVU2122
2230:src/display.c **** 	    exp--;
 6603              		.loc 1 2230 6 view .LVU2123
2230:src/display.c **** 	    exp--;
 6604              		.loc 1 2230 8 is_stmt 0 view .LVU2124
 6605 0866 013A     		subs	r2, r2, #1
2231:src/display.c **** 	  case 0:
 6606              		.loc 1 2231 6 is_stmt 1 view .LVU2125
2231:src/display.c **** 	  case 0:
 6607              		.loc 1 2231 9 is_stmt 0 view .LVU2126
 6608 0868 013E     		subs	r6, r6, #1
 6609              	.LVL751:
2231:src/display.c **** 	  case 0:
 6610              		.loc 1 2231 9 view .LVU2127
 6611 086a 2CE6     		b	.L507
 6612              	.LVL752:
 6613              	.L542:
2231:src/display.c **** 	  case 0:
 6614              		.loc 1 2231 9 view .LVU2128
 6615 086c 079A     		ldr	r2, [sp, #28]
2219:src/display.c **** 	  case -1:
 6616              		.loc 1 2219 16 view .LVU2129
 6617 086e 0225     		movs	r5, #2
1924:src/display.c **** 	int odig = 0;
 6618              		.loc 1 1924 15 view .LVU2130
 6619 0870 3946     		mov	r1, r7
 6620 0872 F4E7     		b	.L543
 6621              	.LVL753:
 6622              	.L488:
2087:src/display.c **** 	    /* We might have push the fixed decimals off the
 6623              		.loc 1 2087 6 is_stmt 1 view .LVU2131
2091:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6624              		.loc 1 2091 6 view .LVU2132
2091:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
ARM GAS  /tmp/ccDDbRKQ.s 			page 213


 6625              		.loc 1 2091 9 is_stmt 0 view .LVU2133
 6626 0874 0299     		ldr	r1, [sp, #8]
2091:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6627              		.loc 1 2091 23 view .LVU2134
 6628 0876 9319     		adds	r3, r2, r6
2091:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6629              		.loc 1 2091 9 view .LVU2135
 6630 0878 9942     		cmp	r1, r3
2092:src/display.c **** 	  }
 6631              		.loc 1 2092 8 is_stmt 1 view .LVU2136
2092:src/display.c **** 	  }
 6632              		.loc 1 2092 30 is_stmt 0 view .LVU2137
 6633 087a DFBF     		itttt	le
 6634 087c 029B     		ldrle	r3, [sp, #8]
 6635 087e 03F1FF32 		addle	r2, r3, #-1
2092:src/display.c **** 	  }
 6636              		.loc 1 2092 35 view .LVU2138
 6637 0882 921B     		suble	r2, r2, r6
2092:src/display.c **** 	  }
 6638              		.loc 1 2092 11 view .LVU2139
 6639 0884 0792     		strle	r2, [sp, #28]
 6640 0886 3146     		mov	r1, r6
 6641 0888 6AE4     		b	.L485
 6642              	.LVL754:
 6643              	.L513:
2131:src/display.c **** 	      odig++;
 6644              		.loc 1 2131 8 is_stmt 1 view .LVU2140
2131:src/display.c **** 	      odig++;
 6645              		.loc 1 2131 15 is_stmt 0 view .LVU2141
 6646 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6647 088e 8DF82410 		strb	r1, [sp, #36]
2132:src/display.c **** 	      dd--;
 6648              		.loc 1 2132 8 is_stmt 1 view .LVU2142
 6649              	.LVL755:
2133:src/display.c **** 	      exp--;
 6650              		.loc 1 2133 8 view .LVU2143
2133:src/display.c **** 	      exp--;
 6651              		.loc 1 2133 10 is_stmt 0 view .LVU2144
 6652 0892 013A     		subs	r2, r2, #1
2134:src/display.c **** 	    case -2:
 6653              		.loc 1 2134 8 is_stmt 1 view .LVU2145
2134:src/display.c **** 	    case -2:
 6654              		.loc 1 2134 11 is_stmt 0 view .LVU2146
 6655 0894 013E     		subs	r6, r6, #1
 6656              	.LVL756:
2134:src/display.c **** 	    case -2:
 6657              		.loc 1 2134 11 view .LVU2147
 6658 0896 0325     		movs	r5, #3
2131:src/display.c **** 	      odig++;
 6659              		.loc 1 2131 19 view .LVU2148
 6660 0898 0DF1590B 		add	fp, sp, #89
 6661              	.LVL757:
2131:src/display.c **** 	      odig++;
 6662              		.loc 1 2131 12 view .LVU2149
 6663 089c 0DF12501 		add	r1, sp, #37
 6664              	.LVL758:
 6665              	.L516:
ARM GAS  /tmp/ccDDbRKQ.s 			page 214


2137:src/display.c **** 	      odig++;
 6666              		.loc 1 2137 8 is_stmt 1 view .LVU2150
2137:src/display.c **** 	      odig++;
 6667              		.loc 1 2137 15 is_stmt 0 view .LVU2151
 6668 08a0 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2
 6669              	.LVL759:
2137:src/display.c **** 	      odig++;
 6670              		.loc 1 2137 15 view .LVU2152
 6671 08a4 01F8010B 		strb	r0, [r1], #1
 6672              	.LVL760:
2138:src/display.c **** 	      dd--;
 6673              		.loc 1 2138 8 is_stmt 1 view .LVU2153
2139:src/display.c **** 	      exp--;
 6674              		.loc 1 2139 8 view .LVU2154
2140:src/display.c **** 	    case 0:
 6675              		.loc 1 2140 8 view .LVU2155
2139:src/display.c **** 	      exp--;
 6676              		.loc 1 2139 10 is_stmt 0 view .LVU2156
 6677 08a8 013A     		subs	r2, r2, #1
 6678 08aa 0792     		str	r2, [sp, #28]
2140:src/display.c **** 	    case 0:
 6679              		.loc 1 2140 11 view .LVU2157
 6680 08ac 013E     		subs	r6, r6, #1
 6681              	.LVL761:
 6682              	.L512:
2142:src/display.c **** 	    };
 6683              		.loc 1 2142 8 is_stmt 1 view .LVU2158
2143:src/display.c **** 	    *obp++ = *p++;
 6684              		.loc 1 2143 7 view .LVU2159
2144:src/display.c **** 	    odig++;
 6685              		.loc 1 2144 6 view .LVU2160
2144:src/display.c **** 	    odig++;
 6686              		.loc 1 2144 17 is_stmt 0 view .LVU2161
 6687 08ae 5A46     		mov	r2, fp
 6688              	.LVL762:
2144:src/display.c **** 	    odig++;
 6689              		.loc 1 2144 13 view .LVU2162
 6690 08b0 8846     		mov	r8, r1
 6691 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6692              	.LVL763:
2144:src/display.c **** 	    odig++;
 6693              		.loc 1 2144 13 view .LVU2163
 6694 08b6 08F8020B 		strb	r0, [r8], #2
2145:src/display.c **** 	    *obp++ = '.';
 6695              		.loc 1 2145 6 is_stmt 1 view .LVU2164
2146:src/display.c **** 	    for (i=1; i<count; i++) {
 6696              		.loc 1 2146 6 view .LVU2165
 6697              	.LVL764:
2147:src/display.c **** 	      *obp++ = *p++;
 6698              		.loc 1 2147 6 is_stmt 0 view .LVU2166
 6699 08ba 012B     		cmp	r3, #1
2146:src/display.c **** 	    for (i=1; i<count; i++) {
 6700              		.loc 1 2146 13 view .LVU2167
 6701 08bc 4FF02E00 		mov	r0, #46
 6702 08c0 4870     		strb	r0, [r1, #1]
2147:src/display.c **** 	      *obp++ = *p++;
 6703              		.loc 1 2147 6 is_stmt 1 view .LVU2168
ARM GAS  /tmp/ccDDbRKQ.s 			page 215


 6704              	.LVL765:
2147:src/display.c **** 	      *obp++ = *p++;
 6705              		.loc 1 2147 16 view .LVU2169
2147:src/display.c **** 	      *obp++ = *p++;
 6706              		.loc 1 2147 6 is_stmt 0 view .LVU2170
 6707 08c2 32DD     		ble	.L587
2147:src/display.c **** 	      *obp++ = *p++;
 6708              		.loc 1 2147 6 view .LVU2171
 6709 08c4 0131     		adds	r1, r1, #1
 6710 08c6 9B44     		add	fp, fp, r3
 6711              	.LVL766:
 6712              	.L518:
2148:src/display.c **** 	      odig++;
 6713              		.loc 1 2148 8 is_stmt 1 discriminator 3 view .LVU2172
2148:src/display.c **** 	      odig++;
 6714              		.loc 1 2148 15 is_stmt 0 discriminator 3 view .LVU2173
 6715 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6716              	.LVL767:
2148:src/display.c **** 	      odig++;
 6717              		.loc 1 2148 15 discriminator 3 view .LVU2174
 6718 08cc 01F8010F 		strb	r0, [r1, #1]!
2149:src/display.c **** 	    }
 6719              		.loc 1 2149 8 is_stmt 1 discriminator 3 view .LVU2175
2147:src/display.c **** 	      *obp++ = *p++;
 6720              		.loc 1 2147 25 discriminator 3 view .LVU2176
2147:src/display.c **** 	      *obp++ = *p++;
 6721              		.loc 1 2147 16 discriminator 3 view .LVU2177
2147:src/display.c **** 	      *obp++ = *p++;
 6722              		.loc 1 2147 6 is_stmt 0 discriminator 3 view .LVU2178
 6723 08d0 5A45     		cmp	r2, fp
 6724 08d2 F9D1     		bne	.L518
 6725 08d4 013B     		subs	r3, r3, #1
 6726              	.LVL768:
2147:src/display.c **** 	      *obp++ = *p++;
 6727              		.loc 1 2147 6 discriminator 3 view .LVU2179
 6728 08d6 9844     		add	r8, r8, r3
 6729 08d8 1D44     		add	r5, r5, r3
2151:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6730              		.loc 1 2151 15 view .LVU2180
 6731 08da 4FF00109 		mov	r9, #1
 6732 08de 11E6     		b	.L517
 6733              	.LVL769:
 6734              	.L515:
2151:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6735              		.loc 1 2151 15 view .LVU2181
 6736 08e0 079A     		ldr	r2, [sp, #28]
2128:src/display.c **** 	    case -1:
 6737              		.loc 1 2128 24 view .LVU2182
 6738 08e2 0225     		movs	r5, #2
1924:src/display.c **** 	int odig = 0;
 6739              		.loc 1 1924 15 view .LVU2183
 6740 08e4 3946     		mov	r1, r7
 6741 08e6 DBE7     		b	.L516
 6742              	.LVL770:
 6743              	.L555:
2273:src/display.c **** 	  }
 6744              		.loc 1 2273 8 is_stmt 1 view .LVU2184
ARM GAS  /tmp/ccDDbRKQ.s 			page 216


 6745 08e8 2D21     		movs	r1, #45
 6746 08ea AAF10900 		sub	r0, r10, #9
 6747 08ee FFF7FEFF 		bl	set_dig
 6748              	.LVL771:
 6749 08f2 ECE4     		b	.L551
 6750              	.LVL772:
 6751              	.L690:
 6752              	.LBB454:
 6753              	.LBB451:
 6754              	.LBB449:
1840:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6755              		.loc 1 1840 4 view .LVU2185
1843:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6756              		.loc 1 1843 4 view .LVU2186
1843:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6757              		.loc 1 1843 14 is_stmt 0 view .LVU2187
 6758 08f4 07F1030A 		add	r10, r7, #3
 6759              	.LVL773:
1844:src/display.c **** 	  if (grouping) {
 6760              		.loc 1 1844 4 is_stmt 1 view .LVU2188
 6761 08f8 3749     		ldr	r1, .L697+16
 6762 08fa 0D22     		movs	r2, #13
 6763 08fc 5046     		mov	r0, r10
 6764 08fe FFF7FEFF 		bl	xcopy
 6765              	.LVL774:
1845:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6766              		.loc 1 1845 4 view .LVU2189
1846:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6767              		.loc 1 1846 6 view .LVU2190
 6768 0902 1322     		movs	r2, #19
 6769 0904 B918     		adds	r1, r7, r2
 6770 0906 07F11400 		add	r0, r7, #20
 6771 090a FFF7FEFF 		bl	xcopy
 6772              	.LVL775:
1847:src/display.c **** 	    x += 3 + 13 + 7;
 6773              		.loc 1 1847 6 view .LVU2191
1848:src/display.c **** 	  }
 6774              		.loc 1 1848 8 is_stmt 0 view .LVU2192
 6775 090e 07F11705 		add	r5, r7, #23
 6776              	.LVL776:
1847:src/display.c **** 	    x += 3 + 13 + 7;
 6777              		.loc 1 1847 24 view .LVU2193
 6778 0912 FE74     		strb	r6, [r7, #19]
1848:src/display.c **** 	  }
 6779              		.loc 1 1848 6 is_stmt 1 view .LVU2194
 6780              	.LVL777:
1861:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6781              		.loc 1 1861 4 view .LVU2195
1862:src/display.c **** 	}
 6782              		.loc 1 1862 4 view .LVU2196
1862:src/display.c **** 	}
 6783              		.loc 1 1862 6 is_stmt 0 view .LVU2197
 6784 0914 1B24     		movs	r4, #27
 6785              	.LVL778:
1862:src/display.c **** 	}
 6786              		.loc 1 1862 6 view .LVU2198
 6787              	.LBE449:
ARM GAS  /tmp/ccDDbRKQ.s 			page 217


 6788 0916 49E7     		b	.L460
 6789              	.LVL779:
 6790              	.L686:
1862:src/display.c **** 	}
 6791              		.loc 1 1862 6 view .LVU2199
 6792              	.LBE451:
 6793              	.LBE454:
1961:src/display.c **** 	      return;
 6794              		.loc 1 1961 8 is_stmt 1 view .LVU2200
 6795 0918 5046     		mov	r0, r10
 6796 091a FFF7FEFF 		bl	set_x_hms
 6797              	.LVL780:
1962:src/display.c **** 	    }
 6798              		.loc 1 1962 8 view .LVU2201
 6799 091e FDE4     		b	.L441
 6800              	.LVL781:
 6801              	.L585:
2123:src/display.c **** 	  if (count != *display_digits)
 6802              		.loc 1 2123 4 is_stmt 0 view .LVU2202
 6803 0920 029B     		ldr	r3, [sp, #8]
 6804 0922 72E4     		b	.L508
 6805              	.LVL782:
 6806              	.L586:
2128:src/display.c **** 	    case -1:
 6807              		.loc 1 2128 24 view .LVU2203
 6808 0924 0125     		movs	r5, #1
 6809 0926 3946     		mov	r1, r7
 6810 0928 C1E7     		b	.L512
 6811              	.LVL783:
 6812              	.L587:
2151:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6813              		.loc 1 2151 15 view .LVU2204
 6814 092a 4FF00109 		mov	r9, #1
 6815 092e E9E5     		b	.L517
 6816              	.LVL784:
 6817              	.L491:
2101:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6818              		.loc 1 2101 4 is_stmt 1 view .LVU2205
2101:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6819              		.loc 1 2101 7 is_stmt 0 view .LVU2206
 6820 0930 5B45     		cmp	r3, fp
 6821 0932 7FF42FAC 		bne	.L570
 6822 0936 4DE5     		b	.L571
 6823              	.LVL785:
 6824              	.L457:
 6825              	.LBB455:
 6826              	.LBB452:
1886:src/display.c **** 	    x[10] = '\0';
 6827              		.loc 1 1886 6 is_stmt 1 view .LVU2207
1887:src/display.c **** 	  }
 6828              		.loc 1 1887 6 view .LVU2208
1886:src/display.c **** 	    x[10] = '\0';
 6829              		.loc 1 1886 11 is_stmt 0 view .LVU2209
 6830 0938 7C82     		strh	r4, [r7, #18]	@ movhi
 6831 093a 28E7     		b	.L459
 6832              	.LVL786:
 6833              	.L689:
ARM GAS  /tmp/ccDDbRKQ.s 			page 218


 6834              	.LBB450:
1811:src/display.c **** 
 6835              		.loc 1 1811 4 is_stmt 1 view .LVU2210
1813:src/display.c **** 	  xcopy(x, small_minus, 4);
 6836              		.loc 1 1813 4 view .LVU2211
 6837 093c 2222     		movs	r2, #34
 6838 093e 0DF12501 		add	r1, sp, #37
 6839 0942 0AA8     		add	r0, sp, #40
 6840              	.LVL787:
1813:src/display.c **** 	  xcopy(x, small_minus, 4);
 6841              		.loc 1 1813 4 is_stmt 0 view .LVU2212
 6842 0944 FFF7FEFF 		bl	xcopy
 6843              	.LVL788:
1814:src/display.c **** 	  x += 4;
 6844              		.loc 1 1814 4 is_stmt 1 view .LVU2213
 6845 0948 3846     		mov	r0, r7
 6846 094a 2449     		ldr	r1, .L697+20
 6847 094c 0422     		movs	r2, #4
 6848 094e FFF7FEFF 		bl	xcopy
 6849              	.LVL789:
1815:src/display.c **** 	  negative = 4;
 6850              		.loc 1 1815 4 view .LVU2214
1816:src/display.c **** #else
 6851              		.loc 1 1816 4 view .LVU2215
1815:src/display.c **** 	  negative = 4;
 6852              		.loc 1 1815 6 is_stmt 0 view .LVU2216
 6853 0952 0AAF     		add	r7, sp, #40
 6854              	.LVL790:
1816:src/display.c **** #else
 6855              		.loc 1 1816 13 view .LVU2217
 6856 0954 4FF0040A 		mov	r10, #4
 6857              	.LVL791:
1816:src/display.c **** #else
 6858              		.loc 1 1816 13 view .LVU2218
 6859              	.LBE450:
 6860 0958 DCE6     		b	.L453
 6861              	.LVL792:
 6862              	.L519:
1816:src/display.c **** #else
 6863              		.loc 1 1816 13 view .LVU2219
 6864              	.LBE452:
 6865              	.LBE455:
2167:src/display.c **** 	    odig++;
 6866              		.loc 1 2167 6 is_stmt 1 view .LVU2220
2168:src/display.c **** 	    *obp++ = '.';
 6867              		.loc 1 2168 6 view .LVU2221
2169:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6868              		.loc 1 2169 6 view .LVU2222
2167:src/display.c **** 	    odig++;
 6869              		.loc 1 2167 13 is_stmt 0 view .LVU2223
 6870 095a 42F63062 		movw	r2, #11824
 6871 095e ADF82420 		strh	r2, [sp, #36]	@ movhi
2170:src/display.c **** 	      *obp++ = '0';
 6872              		.loc 1 2170 6 is_stmt 1 view .LVU2224
 6873              	.LVL793:
2170:src/display.c **** 	      *obp++ = '0';
 6874              		.loc 1 2170 20 view .LVU2225
ARM GAS  /tmp/ccDDbRKQ.s 			page 219


2170:src/display.c **** 	      *obp++ = '0';
 6875              		.loc 1 2170 6 is_stmt 0 view .LVU2226
 6876 0962 721C     		adds	r2, r6, #1
 6877              	.LVL794:
2170:src/display.c **** 	      *obp++ = '0';
 6878              		.loc 1 2170 6 view .LVU2227
 6879 0964 2AD0     		beq	.L588
 6880 0966 C6F10101 		rsb	r1, r6, #1
2169:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6881              		.loc 1 2169 10 view .LVU2228
 6882 096a 0DF12600 		add	r0, sp, #38
 6883              	.LVL795:
2169:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6884              		.loc 1 2169 10 view .LVU2229
 6885 096e 3944     		add	r1, r1, r7
 6886 0970 0246     		mov	r2, r0
 6887              	.LVL796:
2171:src/display.c **** 	      odig++;
 6888              		.loc 1 2171 15 view .LVU2230
 6889 0972 3025     		movs	r5, #48
 6890              	.LVL797:
 6891              	.L526:
2171:src/display.c **** 	      odig++;
 6892              		.loc 1 2171 8 is_stmt 1 discriminator 3 view .LVU2231
2171:src/display.c **** 	      odig++;
 6893              		.loc 1 2171 15 is_stmt 0 discriminator 3 view .LVU2232
 6894 0974 02F8015B 		strb	r5, [r2], #1
 6895              	.LVL798:
2172:src/display.c **** 	    }
 6896              		.loc 1 2172 8 is_stmt 1 discriminator 3 view .LVU2233
2170:src/display.c **** 	      *obp++ = '0';
 6897              		.loc 1 2170 25 discriminator 3 view .LVU2234
2170:src/display.c **** 	      *obp++ = '0';
 6898              		.loc 1 2170 20 discriminator 3 view .LVU2235
2170:src/display.c **** 	      *obp++ = '0';
 6899              		.loc 1 2170 6 is_stmt 0 discriminator 3 view .LVU2236
 6900 0978 8A42     		cmp	r2, r1
 6901 097a FBD1     		bne	.L526
 6902 097c 6FEA0608 		mvn	r8, r6
 6903 0980 8044     		add	r8, r8, r0
 6904 0982 7542     		rsbs	r5, r6, #0
 6905              	.LVL799:
 6906              	.L525:
2174:src/display.c **** 	      *obp++ = *p++;
 6907              		.loc 1 2174 16 is_stmt 1 view .LVU2237
2174:src/display.c **** 	      *obp++ = *p++;
 6908              		.loc 1 2174 6 is_stmt 0 view .LVU2238
 6909 0984 002B     		cmp	r3, #0
 6910 0986 7FF7BDAD 		ble	.L517
 6911 098a 581E     		subs	r0, r3, #1
 6912 098c 4044     		add	r0, r0, r8
 6913 098e 08F1FF32 		add	r2, r8, #-1
 6914              	.LVL800:
 6915              	.L527:
2175:src/display.c **** 	      odig++;
 6916              		.loc 1 2175 8 is_stmt 1 discriminator 3 view .LVU2239
2175:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccDDbRKQ.s 			page 220


 6917              		.loc 1 2175 15 is_stmt 0 discriminator 3 view .LVU2240
 6918 0992 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6919              	.LVL801:
2175:src/display.c **** 	      odig++;
 6920              		.loc 1 2175 15 discriminator 3 view .LVU2241
 6921 0996 02F8011F 		strb	r1, [r2, #1]!
2176:src/display.c **** 	    }
 6922              		.loc 1 2176 8 is_stmt 1 discriminator 3 view .LVU2242
2174:src/display.c **** 	      *obp++ = *p++;
 6923              		.loc 1 2174 25 discriminator 3 view .LVU2243
 6924              	.LVL802:
2174:src/display.c **** 	      *obp++ = *p++;
 6925              		.loc 1 2174 16 discriminator 3 view .LVU2244
2174:src/display.c **** 	      *obp++ = *p++;
 6926              		.loc 1 2174 6 is_stmt 0 discriminator 3 view .LVU2245
 6927 099a 9042     		cmp	r0, r2
 6928 099c F9D1     		bne	.L527
 6929              	.LVL803:
2174:src/display.c **** 	      *obp++ = *p++;
 6930              		.loc 1 2174 6 discriminator 3 view .LVU2246
 6931 099e 9844     		add	r8, r8, r3
 6932              	.LVL804:
2174:src/display.c **** 	      *obp++ = *p++;
 6933              		.loc 1 2174 6 discriminator 3 view .LVU2247
 6934 09a0 1D44     		add	r5, r5, r3
 6935 09a2 AFE5     		b	.L517
 6936              	.LVL805:
 6937              	.L688:
2117:src/display.c **** 
 6938              		.loc 1 2117 2 is_stmt 1 view .LVU2248
 6939 09a4 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2117:src/display.c **** 
 6940              		.loc 1 2117 9 is_stmt 0 view .LVU2249
 6941 09a8 0BEB0E03 		add	r3, fp, lr
 6942              	.LVL806:
2117:src/display.c **** 
 6943              		.loc 1 2117 45 is_stmt 1 view .LVU2250
2117:src/display.c **** 
 6944              		.loc 1 2117 2 is_stmt 0 view .LVU2251
 6945 09ac 51B1     		cbz	r1, .L692
2106:src/display.c **** 	      extra_digits = 0;
 6946              		.loc 1 2106 37 view .LVU2252
 6947 09ae 0225     		movs	r5, #2
 6948 09b0 07E4     		b	.L569
 6949              	.LVL807:
 6950              	.L691:
2106:src/display.c **** 	      extra_digits = 0;
 6951              		.loc 1 2106 37 view .LVU2253
 6952 09b2 079B     		ldr	r3, [sp, #28]
 6953              	.LVL808:
2197:src/display.c **** 	    *obp++ = '.';
 6954              		.loc 1 2197 10 view .LVU2254
 6955 09b4 0125     		movs	r5, #1
2198:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6956              		.loc 1 2198 10 view .LVU2255
 6957 09b6 0DF12608 		add	r8, sp, #38
 6958              	.LVL809:
ARM GAS  /tmp/ccDDbRKQ.s 			page 221


2198:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6959              		.loc 1 2198 10 view .LVU2256
 6960 09ba 2FE7     		b	.L535
 6961              	.LVL810:
 6962              	.L588:
2168:src/display.c **** 	    *obp++ = '.';
 6963              		.loc 1 2168 10 view .LVU2257
 6964 09bc 0125     		movs	r5, #1
2169:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6965              		.loc 1 2169 10 view .LVU2258
 6966 09be 0DF12608 		add	r8, sp, #38
 6967              	.LVL811:
2169:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6968              		.loc 1 2169 10 view .LVU2259
 6969 09c2 DFE7     		b	.L525
 6970              	.LVL812:
 6971              	.L692:
1924:src/display.c **** 	int odig = 0;
 6972              		.loc 1 1924 15 view .LVU2260
 6973 09c4 3946     		mov	r1, r7
 6974 09c6 7EE5     		b	.L507
 6975              	.L698:
 6976              		.align	2
 6977              	.L697:
 6978 09c8 00000000 		.word	.LANCHOR1
 6979 09cc D34D6210 		.word	274877907
 6980 09d0 18FCFFFF 		.word	-1000
 6981 09d4 00000000 		.word	.LANCHOR0
 6982 09d8 00000000 		.word	.LANCHOR11
 6983 09dc 00000000 		.word	.LANCHOR10
 6984              		.cfi_endproc
 6985              	.LFE27:
 6987              		.section	.text.set_x,"ax",%progbits
 6988              		.align	1
 6989              		.p2align 2,,3
 6990              		.syntax unified
 6991              		.thumb
 6992              		.thumb_func
 6993              		.fpu fpv4-sp-d16
 6995              	set_x:
 6996              	.LVL813:
 6997              	.LFB26:
1912:src/display.c **** 	decNumber z;
 6998              		.loc 1 1912 66 is_stmt 1 view -0
 6999              		.cfi_startproc
 7000              		@ args = 0, pretend = 0, frame = 40
 7001              		@ frame_needed = 0, uses_anonymous_args = 0
1913:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7002              		.loc 1 1913 2 view .LVU2262
1914:src/display.c **** 
 7003              		.loc 1 1914 2 view .LVU2263
1912:src/display.c **** 	decNumber z;
 7004              		.loc 1 1912 66 is_stmt 0 view .LVU2264
 7005 0000 30B5     		push	{r4, r5, lr}
 7006              		.cfi_def_cfa_offset 12
 7007              		.cfi_offset 4, -12
 7008              		.cfi_offset 5, -8
ARM GAS  /tmp/ccDDbRKQ.s 			page 222


 7009              		.cfi_offset 14, -4
 7010 0002 8BB0     		sub	sp, sp, #44
 7011              		.cfi_def_cfa_offset 56
1914:src/display.c **** 
 7012              		.loc 1 1914 6 view .LVU2265
 7013 0004 0C23     		movs	r3, #12
1917:src/display.c **** 	else
 7014              		.loc 1 1917 4 view .LVU2266
 7015 0006 01AD     		add	r5, sp, #4
1912:src/display.c **** 	decNumber z;
 7016              		.loc 1 1912 66 view .LVU2267
 7017 0008 0C46     		mov	r4, r1
1914:src/display.c **** 
 7018              		.loc 1 1914 6 view .LVU2268
 7019 000a 0093     		str	r3, [sp]
1916:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7020              		.loc 1 1916 2 is_stmt 1 view .LVU2269
1917:src/display.c **** 	else
 7021              		.loc 1 1917 4 is_stmt 0 view .LVU2270
 7022 000c 2946     		mov	r1, r5
 7023              	.LVL814:
1916:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7024              		.loc 1 1916 5 view .LVU2271
 7025 000e 42B1     		cbz	r2, .L700
1917:src/display.c **** 	else
 7026              		.loc 1 1917 4 is_stmt 1 view .LVU2272
 7027 0010 FFF7FEFF 		bl	decimal128ToNumber
 7028              	.LVL815:
1920:src/display.c ****       }
 7029              		.loc 1 1920 2 view .LVU2273
 7030 0014 2146     		mov	r1, r4
 7031 0016 2846     		mov	r0, r5
 7032 0018 6A46     		mov	r2, sp
 7033 001a FFF7FEFF 		bl	set_x_dn
 7034              	.LVL816:
1921:src/display.c **** 
 7035              		.loc 1 1921 7 is_stmt 0 view .LVU2274
 7036 001e 0BB0     		add	sp, sp, #44
 7037              		.cfi_remember_state
 7038              		.cfi_def_cfa_offset 12
 7039              		@ sp needed
 7040 0020 30BD     		pop	{r4, r5, pc}
 7041              	.LVL817:
 7042              	.L700:
 7043              		.cfi_restore_state
1919:src/display.c **** 	set_x_dn(&z, res, &digits);
 7044              		.loc 1 1919 4 is_stmt 1 view .LVU2275
 7045 0022 FFF7FEFF 		bl	decimal64ToNumber
 7046              	.LVL818:
1920:src/display.c ****       }
 7047              		.loc 1 1920 2 view .LVU2276
 7048 0026 2146     		mov	r1, r4
 7049 0028 2846     		mov	r0, r5
 7050 002a 6A46     		mov	r2, sp
 7051 002c FFF7FEFF 		bl	set_x_dn
 7052              	.LVL819:
1921:src/display.c **** 
ARM GAS  /tmp/ccDDbRKQ.s 			page 223


 7053              		.loc 1 1921 7 is_stmt 0 view .LVU2277
 7054 0030 0BB0     		add	sp, sp, #44
 7055              		.cfi_def_cfa_offset 12
 7056              		@ sp needed
 7057 0032 30BD     		pop	{r4, r5, pc}
1921:src/display.c **** 
 7058              		.loc 1 1921 7 view .LVU2278
 7059              		.cfi_endproc
 7060              	.LFE26:
 7062              		.section	.text.format_reg,"ax",%progbits
 7063              		.align	1
 7064              		.p2align 2,,3
 7065              		.global	format_reg
 7066              		.syntax unified
 7067              		.thumb
 7068              		.thumb_func
 7069              		.fpu fpv4-sp-d16
 7071              	format_reg:
 7072              	.LVL820:
 7073              	.LFB28:
2328:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7074              		.loc 1 2328 45 is_stmt 1 view -0
 7075              		.cfi_startproc
 7076              		@ args = 0, pretend = 0, frame = 40
 7077              		@ frame_needed = 0, uses_anonymous_args = 0
2329:src/display.c **** 
 7078              		.loc 1 2329 2 view .LVU2280
2328:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7079              		.loc 1 2328 45 is_stmt 0 view .LVU2281
 7080 0000 30B5     		push	{r4, r5, lr}
 7081              		.cfi_def_cfa_offset 12
 7082              		.cfi_offset 4, -12
 7083              		.cfi_offset 5, -8
 7084              		.cfi_offset 14, -4
 7085 0002 8BB0     		sub	sp, sp, #44
 7086              		.cfi_def_cfa_offset 56
2328:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7087              		.loc 1 2328 45 view .LVU2282
 7088 0004 0C46     		mov	r4, r1
 7089 0006 0546     		mov	r5, r0
2329:src/display.c **** 
 7090              		.loc 1 2329 28 view .LVU2283
 7091 0008 FFF7FEFF 		bl	get_reg_n
 7092              	.LVL821:
2331:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7093              		.loc 1 2331 6 view .LVU2284
 7094 000c 154B     		ldr	r3, .L710
 7095 000e 1B68     		ldr	r3, [r3]
 7096 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7097              	.LVL822:
2331:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7098              		.loc 1 2331 2 is_stmt 1 view .LVU2285
2331:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7099              		.loc 1 2331 5 is_stmt 0 view .LVU2286
 7100 0014 D207     		lsls	r2, r2, #31
 7101 0016 1DD4     		bmi	.L708
2334:src/display.c **** 	  decNumber x;
ARM GAS  /tmp/ccDDbRKQ.s 			page 224


 7102              		.loc 1 2334 7 is_stmt 1 view .LVU2287
2334:src/display.c **** 	  decNumber x;
 7103              		.loc 1 2334 10 is_stmt 0 view .LVU2288
 7104 0018 44B1     		cbz	r4, .L709
 7105              	.L706:
2345:src/display.c ****       }
 7106              		.loc 1 2345 4 is_stmt 1 view .LVU2289
2345:src/display.c ****       }
 7107              		.loc 1 2345 24 is_stmt 0 view .LVU2290
 7108 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2345:src/display.c ****       }
 7109              		.loc 1 2345 4 view .LVU2291
 7110 001e 2146     		mov	r1, r4
 7111 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7112 0024 FFF7FEFF 		bl	set_x
 7113              	.LVL823:
2346:src/display.c **** 
 7114              		.loc 1 2346 7 view .LVU2292
 7115 0028 0BB0     		add	sp, sp, #44
 7116              		.cfi_remember_state
 7117              		.cfi_def_cfa_offset 12
 7118              		@ sp needed
 7119 002a 30BD     		pop	{r4, r5, pc}
 7120              	.LVL824:
 7121              	.L709:
 7122              		.cfi_restore_state
2334:src/display.c **** 	  decNumber x;
 7123              		.loc 1 2334 32 discriminator 1 view .LVU2293
 7124 002c 0E4A     		ldr	r2, .L710+4
2334:src/display.c **** 	  decNumber x;
 7125              		.loc 1 2334 23 discriminator 1 view .LVU2294
 7126 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7127 0030 012A     		cmp	r2, #1
 7128 0032 F2D9     		bls	.L706
 7129              	.LVL825:
 7130              	.LBB459:
 7131              	.LBI459:
2328:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7132              		.loc 1 2328 12 is_stmt 1 view .LVU2295
 7133              	.LBB460:
 7134              	.LBB461:
2335:src/display.c **** 	  int s;
 7135              		.loc 1 2335 4 view .LVU2296
2336:src/display.c **** 	  unsigned long long int v;
 7136              		.loc 1 2336 4 view .LVU2297
2337:src/display.c **** 
 7137              		.loc 1 2337 4 view .LVU2298
2339:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7138              		.loc 1 2339 4 view .LVU2299
 7139 0034 2946     		mov	r1, r5
 7140 0036 01A8     		add	r0, sp, #4
 7141              	.LVL826:
2339:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7142              		.loc 1 2339 4 is_stmt 0 view .LVU2300
 7143 0038 FFF7FEFF 		bl	getRegister
 7144              	.LVL827:
2340:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
ARM GAS  /tmp/ccDDbRKQ.s 			page 225


 7145              		.loc 1 2340 4 is_stmt 1 view .LVU2301
2340:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7146              		.loc 1 2340 8 is_stmt 0 view .LVU2302
 7147 003c 01A8     		add	r0, sp, #4
 7148 003e 6946     		mov	r1, sp
 7149 0040 FFF7FEFF 		bl	dn_to_ull
 7150              	.LVL828:
2341:src/display.c **** 	}
 7151              		.loc 1 2341 4 is_stmt 1 view .LVU2303
 7152 0044 009A     		ldr	r2, [sp]
 7153 0046 FFF7FEFF 		bl	build_value
 7154              	.LVL829:
2341:src/display.c **** 	}
 7155              		.loc 1 2341 4 is_stmt 0 view .LVU2304
 7156 004a 2246     		mov	r2, r4
 7157 004c FFF7FEFF 		bl	set_int_x
 7158              	.LVL830:
 7159              	.LBE461:
 7160              	.LBE460:
 7161              	.LBE459:
2346:src/display.c **** 
 7162              		.loc 1 2346 7 view .LVU2305
 7163 0050 0BB0     		add	sp, sp, #44
 7164              		.cfi_remember_state
 7165              		.cfi_def_cfa_offset 12
 7166              		@ sp needed
 7167 0052 30BD     		pop	{r4, r5, pc}
 7168              	.LVL831:
 7169              	.L708:
 7170              		.cfi_restore_state
2332:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7171              		.loc 1 2332 4 is_stmt 1 view .LVU2306
 7172 0054 2846     		mov	r0, r5
 7173              	.LVL832:
2332:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7174              		.loc 1 2332 4 is_stmt 0 view .LVU2307
 7175 0056 FFF7FEFF 		bl	get_reg_n_int
 7176              	.LVL833:
 7177 005a 2246     		mov	r2, r4
 7178 005c FFF7FEFF 		bl	set_int_x
 7179              	.LVL834:
2346:src/display.c **** 
 7180              		.loc 1 2346 7 view .LVU2308
 7181 0060 0BB0     		add	sp, sp, #44
 7182              		.cfi_def_cfa_offset 12
 7183              		@ sp needed
 7184 0062 30BD     		pop	{r4, r5, pc}
 7185              	.LVL835:
 7186              	.L711:
2346:src/display.c **** 
 7187              		.loc 1 2346 7 view .LVU2309
 7188              		.align	2
 7189              	.L710:
 7190 0064 00000000 		.word	main_ram
 7191 0068 00000000 		.word	StateWhileOn
 7192              		.cfi_endproc
 7193              	.LFE28:
ARM GAS  /tmp/ccDDbRKQ.s 			page 226


 7195              		.section	.text.set_status_right,"ax",%progbits
 7196              		.align	1
 7197              		.p2align 2,,3
 7198              		.syntax unified
 7199              		.thumb
 7200              		.thumb_func
 7201              		.fpu fpv4-sp-d16
 7203              	set_status_right:
 7204              	.LVL836:
 7205              	.LFB49:
3499:src/display.c ****       static void set_status_top(const char *str) {
3500:src/display.c **** 	if (no_status_top) return;
3501:src/display.c **** 	if (State2.runmode) {
3502:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3503:src/display.c **** 	}
3504:src/display.c **** 	else {
3505:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3506:src/display.c **** 	}
3507:src/display.c ****       }
3508:src/display.c **** #ifdef TOP_ROW
3509:src/display.c ****       static void set_status_top_always(const char *str) {
3510:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3511:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3512:src/display.c ****       }
3513:src/display.c **** #endif
3514:src/display.c **** 
3515:src/display.c ****       /*
3516:src/display.c ****        *  Display messages (global function)
3517:src/display.c ****        */
3518:src/display.c ****       extern void message(const char *str1, const char *str2)
3519:src/display.c ****       {
3520:src/display.c **** 	State2.disp_freeze = 0;
3521:src/display.c **** 	State2.disp_small = 0;
3522:src/display.c **** 	WasDataEntry = 0;
3523:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3524:src/display.c **** 	  // Complete redraw necessary
3525:src/display.c **** 	  DispMsg = str1;
3526:src/display.c **** 	  display();
3527:src/display.c **** 	}
3528:src/display.c **** 	else {
3529:src/display.c **** 	  if ( str2 != NULL ) {
3530:src/display.c **** 	    reset_disp();
3531:src/display.c **** 	    ShowRPN = 0;
3532:src/display.c **** 	    set_annunciators();
3533:src/display.c **** 	    set_digits_string( str2, 0 );
3534:src/display.c **** 	  }
3535:src/display.c **** 	  set_status( str1 );
3536:src/display.c **** 	  finish_display();// message
3537:src/display.c **** 	}
3538:src/display.c ****       }
3539:src/display.c **** 
3540:src/display.c **** #ifdef INCLUDE_STOPWATCH
3541:src/display.c **** 
3542:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3543:src/display.c **** 	int j = SEGS_EXP_BASE;
3544:src/display.c **** 	for (; *exponent!=0; exponent++) {
3545:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
ARM GAS  /tmp/ccDDbRKQ.s 			page 227


3546:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3547:src/display.c **** 	}
3548:src/display.c ****       }
3549:src/display.c **** 
3550:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3551:src/display.c ****       {
3552:src/display.c **** 	reset_disp();
3553:src/display.c **** 	set_dot(DEG);
3554:src/display.c **** 	set_digits_string( str2, 0 );
3555:src/display.c **** 	State2.disp_small = force_small;
3556:src/display.c **** 	if( exponent!=NULL ) {
3557:src/display.c **** 	  stopwatch_exponent(exponent);
3558:src/display.c **** 	}
3559:src/display.c **** 	set_status( str1 );
3560:src/display.c **** 	finish_display();
3561:src/display.c ****       }
3562:src/display.c **** 
3563:src/display.c **** 
3564:src/display.c **** #endif // INCLUDE_STOPWATCH
3565:src/display.c **** 
3566:src/display.c ****       /* Display the right hand characters from the given string.
3567:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3568:src/display.c ****        * and reduce font size if required.
3569:src/display.c ****        */
3570:src/display.c ****       static void set_status_right(const char *str) {
 7206              		.loc 1 3570 53 is_stmt 1 view -0
 7207              		.cfi_startproc
 7208              		@ args = 0, pretend = 0, frame = 0
 7209              		@ frame_needed = 0, uses_anonymous_args = 0
3571:src/display.c **** 	unsigned int x = 0;
 7210              		.loc 1 3571 2 view .LVU2311
3572:src/display.c **** 	const char *p;
 7211              		.loc 1 3572 2 view .LVU2312
3573:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7212              		.loc 1 3573 2 view .LVU2313
3570:src/display.c **** 	unsigned int x = 0;
 7213              		.loc 1 3570 53 is_stmt 0 view .LVU2314
 7214 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7215              		.cfi_def_cfa_offset 28
 7216              		.cfi_offset 4, -28
 7217              		.cfi_offset 5, -24
 7218              		.cfi_offset 6, -20
 7219              		.cfi_offset 7, -16
 7220              		.cfi_offset 8, -12
 7221              		.cfi_offset 9, -8
 7222              		.cfi_offset 14, -4
 7223              		.loc 1 3573 23 view .LVU2315
 7224 0004 194B     		ldr	r3, .L727
 7225              		.loc 1 3573 41 view .LVU2316
 7226 0006 93F91630 		ldrsb	r3, [r3, #22]
 7227 000a 002B     		cmp	r3, #0
3570:src/display.c **** 	unsigned int x = 0;
 7228              		.loc 1 3570 53 view .LVU2317
 7229 000c 83B0     		sub	sp, sp, #12
 7230              		.cfi_def_cfa_offset 40
3570:src/display.c **** 	unsigned int x = 0;
 7231              		.loc 1 3570 53 view .LVU2318
ARM GAS  /tmp/ccDDbRKQ.s 			page 228


 7232 000e 0646     		mov	r6, r0
 7233              		.loc 1 3573 41 view .LVU2319
 7234 0010 23DA     		bge	.L726
 7235              	.LVL837:
 7236              	.L713:
 7237              		.loc 1 3573 12 view .LVU2320
 7238 0012 4FF00108 		mov	r8, #1
3574:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7239              		.loc 1 3574 36 view .LVU2321
 7240 0016 4FF48077 		mov	r7, #256
 7241              	.L714:
 7242              	.LVL838:
3575:src/display.c **** 
3576:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7243              		.loc 1 3576 2 is_stmt 1 discriminator 4 view .LVU2322
 7244              		.loc 1 3576 14 discriminator 4 view .LVU2323
 7245              		.loc 1 3576 2 is_stmt 0 discriminator 4 view .LVU2324
 7246 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7247 001c 3446     		mov	r4, r6
 7248 001e 1BB1     		cbz	r3, .L715
 7249              	.LVL839:
 7250              	.L716:
 7251              		.loc 1 3576 30 is_stmt 1 discriminator 3 view .LVU2325
 7252              		.loc 1 3576 26 discriminator 3 view .LVU2326
 7253              		.loc 1 3576 14 discriminator 3 view .LVU2327
 7254              		.loc 1 3576 2 is_stmt 0 discriminator 3 view .LVU2328
 7255 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7256              	.LVL840:
 7257              		.loc 1 3576 2 discriminator 3 view .LVU2329
 7258 0024 002B     		cmp	r3, #0
 7259 0026 FBD1     		bne	.L716
 7260              	.L715:
3571:src/display.c **** 	const char *p;
 7261              		.loc 1 3571 15 view .LVU2330
 7262 0028 0025     		movs	r5, #0
 7263 002a 06E0     		b	.L717
 7264              	.LVL841:
 7265              	.L718:
 7266              	.LBB462:
3577:src/display.c **** 	while (--p >= str) {
3578:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7267              		.loc 1 3578 27 view .LVU2331
 7268 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3579:src/display.c **** 
3580:src/display.c **** 	  x += charlengths(c);
 7269              		.loc 1 3580 9 view .LVU2332
 7270 002e 3844     		add	r0, r0, r7
 7271 0030 FFF7FEFF 		bl	charlengths
 7272              	.LVL842:
 7273              		.loc 1 3580 6 view .LVU2333
 7274 0034 0544     		add	r5, r5, r0
 7275              	.LVL843:
3581:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7276              		.loc 1 3581 4 is_stmt 1 view .LVU2334
 7277              		.loc 1 3581 7 is_stmt 0 view .LVU2335
 7278 0036 4B2D     		cmp	r5, #75
 7279 0038 03D8     		bhi	.L719
ARM GAS  /tmp/ccDDbRKQ.s 			page 229


 7280              	.LVL844:
 7281              	.L717:
3578:src/display.c **** 
 7282              		.loc 1 3578 4 is_stmt 1 view .LVU2336
3578:src/display.c **** 
 7283              		.loc 1 3578 4 is_stmt 0 view .LVU2337
 7284              	.LBE462:
3577:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7285              		.loc 1 3577 8 is_stmt 1 view .LVU2338
 7286 003a A146     		mov	r9, r4
 7287 003c 013C     		subs	r4, r4, #1
 7288              	.LVL845:
 7289              	.LBB463:
3580:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7290              		.loc 1 3580 4 view .LVU2339
3580:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7291              		.loc 1 3580 4 is_stmt 0 view .LVU2340
 7292              	.LBE463:
3577:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7293              		.loc 1 3577 8 view .LVU2341
 7294 003e A642     		cmp	r6, r4
 7295 0040 F4D9     		bls	.L718
 7296              	.LVL846:
 7297              	.L719:
3582:src/display.c **** 	    break;
3583:src/display.c **** 	}
3584:src/display.c **** 	set_status_sized(p+1, toolarge);
 7298              		.loc 1 3584 2 is_stmt 1 view .LVU2342
 7299              	.LBB464:
 7300              	.LBI464:
3354:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7301              		.loc 1 3354 19 view .LVU2343
 7302              	.LBB465:
3355:src/display.c ****       }
 7303              		.loc 1 3355 2 view .LVU2344
 7304 0042 40F24A23 		movw	r3, #586
 7305 0046 0093     		str	r3, [sp]
 7306 0048 4146     		mov	r1, r8
 7307 004a 4846     		mov	r0, r9
 7308 004c 8E23     		movs	r3, #142
 7309 004e 4A22     		movs	r2, #74
 7310 0050 FFF7FEFF 		bl	s_s_sized
 7311              	.LVL847:
3355:src/display.c ****       }
 7312              		.loc 1 3355 2 is_stmt 0 view .LVU2345
 7313              	.LBE465:
 7314              	.LBE464:
3585:src/display.c ****       }
 7315              		.loc 1 3585 7 view .LVU2346
 7316 0054 03B0     		add	sp, sp, #12
 7317              		.cfi_remember_state
 7318              		.cfi_def_cfa_offset 28
 7319              		@ sp needed
 7320 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7321              	.LVL848:
 7322              	.L726:
 7323              		.cfi_restore_state
ARM GAS  /tmp/ccDDbRKQ.s 			page 230


 7324              	.LBB466:
 7325              	.LBI466:
3486:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7326              		.loc 1 3486 18 is_stmt 1 view .LVU2347
 7327              	.LBB467:
3487:src/display.c ****       }
 7328              		.loc 1 3487 2 view .LVU2348
3487:src/display.c ****       }
 7329              		.loc 1 3487 9 is_stmt 0 view .LVU2349
 7330 005a 0021     		movs	r1, #0
 7331 005c FFF7FEFF 		bl	pixel_length
 7332              	.LVL849:
3487:src/display.c ****       }
 7333              		.loc 1 3487 9 view .LVU2350
 7334              	.LBE467:
 7335              	.LBE466:
3573:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7336              		.loc 1 3573 41 view .LVU2351
 7337 0060 4B28     		cmp	r0, #75
 7338 0062 D6DC     		bgt	.L713
3573:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7339              		.loc 1 3573 12 view .LVU2352
 7340 0064 4FF00008 		mov	r8, #0
3574:src/display.c **** 
 7341              		.loc 1 3574 36 view .LVU2353
 7342 0068 4746     		mov	r7, r8
 7343 006a D6E7     		b	.L714
 7344              	.L728:
 7345              		.align	2
 7346              	.L727:
 7347 006c 00000000 		.word	StateWhileOn
 7348              		.cfi_endproc
 7349              	.LFE49:
 7351              		.section	.text.set_status_top.part.0,"ax",%progbits
 7352              		.align	1
 7353              		.p2align 2,,3
 7354              		.syntax unified
 7355              		.thumb
 7356              		.thumb_func
 7357              		.fpu fpv4-sp-d16
 7359              	set_status_top.part.0:
 7360              	.LVL850:
 7361              	.LFB58:
3499:src/display.c **** 	if (no_status_top) return;
 7362              		.loc 1 3499 19 is_stmt 1 view -0
 7363              		.cfi_startproc
 7364              		@ args = 0, pretend = 0, frame = 0
 7365              		@ frame_needed = 0, uses_anonymous_args = 0
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7366              		.loc 1 3501 2 view .LVU2355
3499:src/display.c **** 	if (no_status_top) return;
 7367              		.loc 1 3499 19 is_stmt 0 view .LVU2356
 7368 0000 10B5     		push	{r4, lr}
 7369              		.cfi_def_cfa_offset 8
 7370              		.cfi_offset 4, -8
 7371              		.cfi_offset 14, -4
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
ARM GAS  /tmp/ccDDbRKQ.s 			page 231


 7372              		.loc 1 3501 6 view .LVU2357
 7373 0002 184B     		ldr	r3, .L739
 7374 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7375              		.loc 1 3501 5 view .LVU2358
 7376 0006 13F04001 		ands	r1, r3, #64
3499:src/display.c **** 	if (no_status_top) return;
 7377              		.loc 1 3499 19 view .LVU2359
 7378 000a 82B0     		sub	sp, sp, #8
 7379              		.cfi_def_cfa_offset 16
3499:src/display.c **** 	if (no_status_top) return;
 7380              		.loc 1 3499 19 view .LVU2360
 7381 000c 0446     		mov	r4, r0
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7382              		.loc 1 3501 5 view .LVU2361
 7383 000e 0DD0     		beq	.L730
3502:src/display.c **** 	}
 7384              		.loc 1 3502 4 is_stmt 1 view .LVU2362
 7385 0010 1A06     		lsls	r2, r3, #24
 7386 0012 18D5     		bpl	.L737
 7387 0014 0121     		movs	r1, #1
 7388              	.LVL851:
 7389              	.L731:
 7390              	.LBB468:
 7391              	.LBI468:
3357:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7392              		.loc 1 3357 19 view .LVU2363
 7393              	.LBB469:
3358:src/display.c ****       }
 7394              		.loc 1 3358 2 view .LVU2364
 7395 0016 4FF45373 		mov	r3, #844
 7396 001a 0093     		str	r3, [sp]
 7397 001c 2046     		mov	r0, r4
 7398 001e 40F24A23 		movw	r3, #586
 7399 0022 2B22     		movs	r2, #43
 7400 0024 FFF7FEFF 		bl	s_s_sized
 7401              	.LVL852:
3358:src/display.c ****       }
 7402              		.loc 1 3358 2 is_stmt 0 view .LVU2365
 7403              	.LBE469:
 7404              	.LBE468:
3507:src/display.c **** #ifdef TOP_ROW
 7405              		.loc 1 3507 7 view .LVU2366
 7406 0028 02B0     		add	sp, sp, #8
 7407              		.cfi_remember_state
 7408              		.cfi_def_cfa_offset 8
 7409              		@ sp needed
 7410 002a 10BD     		pop	{r4, pc}
 7411              	.LVL853:
 7412              	.L730:
 7413              		.cfi_restore_state
3505:src/display.c **** 	}
 7414              		.loc 1 3505 4 is_stmt 1 view .LVU2367
 7415 002c 1B06     		lsls	r3, r3, #24
 7416 002e 12D5     		bpl	.L738
 7417 0030 0121     		movs	r1, #1
 7418              	.LVL854:
ARM GAS  /tmp/ccDDbRKQ.s 			page 232


 7419              	.L733:
 7420              	.LBB470:
 7421              	.LBI470:
3354:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7422              		.loc 1 3354 19 view .LVU2368
 7423              	.LBB471:
3355:src/display.c ****       }
 7424              		.loc 1 3355 2 view .LVU2369
 7425 0032 40F24A23 		movw	r3, #586
 7426 0036 0093     		str	r3, [sp]
 7427 0038 2046     		mov	r0, r4
 7428 003a 8E23     		movs	r3, #142
 7429 003c 4A22     		movs	r2, #74
 7430 003e FFF7FEFF 		bl	s_s_sized
 7431              	.LVL855:
3355:src/display.c ****       }
 7432              		.loc 1 3355 2 is_stmt 0 view .LVU2370
 7433              	.LBE471:
 7434              	.LBE470:
3507:src/display.c **** #ifdef TOP_ROW
 7435              		.loc 1 3507 7 view .LVU2371
 7436 0042 02B0     		add	sp, sp, #8
 7437              		.cfi_remember_state
 7438              		.cfi_def_cfa_offset 8
 7439              		@ sp needed
 7440 0044 10BD     		pop	{r4, pc}
 7441              	.LVL856:
 7442              	.L737:
 7443              		.cfi_restore_state
 7444              	.LBB472:
 7445              	.LBI472:
3489:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7446              		.loc 1 3489 18 is_stmt 1 view .LVU2372
 7447              	.LBB473:
3490:src/display.c ****       }
 7448              		.loc 1 3490 2 view .LVU2373
3490:src/display.c ****       }
 7449              		.loc 1 3490 9 is_stmt 0 view .LVU2374
 7450 0046 0021     		movs	r1, #0
 7451 0048 FFF7FEFF 		bl	pixel_length
 7452              	.LVL857:
3490:src/display.c ****       }
 7453              		.loc 1 3490 9 view .LVU2375
 7454              	.LBE473:
 7455              	.LBE472:
3502:src/display.c **** 	}
 7456              		.loc 1 3502 4 view .LVU2376
 7457 004c 2C28     		cmp	r0, #44
 7458 004e D4BF     		ite	le
 7459 0050 0021     		movle	r1, #0
 7460 0052 0121     		movgt	r1, #1
 7461 0054 DFE7     		b	.L731
 7462              	.LVL858:
 7463              	.L738:
 7464              	.LBB474:
 7465              	.LBI474:
3486:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
ARM GAS  /tmp/ccDDbRKQ.s 			page 233


 7466              		.loc 1 3486 18 is_stmt 1 view .LVU2377
 7467              	.LBB475:
3487:src/display.c ****       }
 7468              		.loc 1 3487 2 view .LVU2378
3487:src/display.c ****       }
 7469              		.loc 1 3487 9 is_stmt 0 view .LVU2379
 7470 0056 FFF7FEFF 		bl	pixel_length
 7471              	.LVL859:
3487:src/display.c ****       }
 7472              		.loc 1 3487 9 view .LVU2380
 7473              	.LBE475:
 7474              	.LBE474:
3505:src/display.c **** 	}
 7475              		.loc 1 3505 4 view .LVU2381
 7476 005a 4B28     		cmp	r0, #75
 7477 005c D4BF     		ite	le
 7478 005e 0021     		movle	r1, #0
 7479 0060 0121     		movgt	r1, #1
 7480 0062 E6E7     		b	.L733
 7481              	.L740:
 7482              		.align	2
 7483              	.L739:
 7484 0064 00000000 		.word	StateWhileOn
 7485              		.cfi_endproc
 7486              	.LFE58:
 7488              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7489              		.align	2
 7490              	.LC2:
 7491 0000 32630600 		.ascii	"2c\006\000"
 7492              		.align	2
 7493              	.LC3:
 7494 0004 07C63C00 		.ascii	"\007\306<\000"
 7495              		.align	2
 7496              	.LC4:
 7497 0008 07876900 		.ascii	"\007\207i\000"
 7498              		.align	2
 7499              	.LC5:
 7500 000c 07C67900 		.ascii	"\007\306y\000"
 7501              		.align	2
 7502              	.LC6:
 7503 0010 07950600 		.ascii	"\007\225\006\000"
 7504              		.align	2
 7505              	.LC7:
 7506 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7506      060600
 7507 001b 00       		.align	2
 7508              	.LC8:
 7509 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7509      060600
 7510 0023 00       		.align	2
 7511              	.LC9:
 7512 0024 07C74400 		.ascii	"\007\307D\000"
 7513              		.align	2
 7514              	.LC10:
 7515 0028 07872000 		.ascii	"\007\207 \000"
 7516              		.align	2
 7517              	.LC11:
ARM GAS  /tmp/ccDDbRKQ.s 			page 234


 7518 002c 4C656E67 		.ascii	"Length:\000"
 7518      74683A00 
 7519              		.align	2
 7520              	.LC12:
 7521 0034 5265616C 		.ascii	"Real:\000"
 7521      3A00
 7522 003a 0000     		.align	2
 7523              	.LC13:
 7524 003c 416E676C 		.ascii	"Angle:\000"
 7524      653A00
 7525 0043 00       		.align	2
 7526              	.LC14:
 7527 0044 496D6167 		.ascii	"Imag:\000"
 7527      3A00
 7528 004a 0000     		.align	2
 7529              	.LC15:
 7530 004c 07876A00 		.ascii	"\007\207j\000"
 7531              		.align	2
 7532              	.LC16:
 7533 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7533      0700
 7534 0056 0000     		.align	2
 7535              	.LC17:
 7536 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7536      00
 7537 005d 000000   		.align	2
 7538              	.LC18:
 7539 0060 07C73C00 		.ascii	"\007\307<\000"
 7540              		.align	2
 7541              	.LC19:
 7542 0064 07C77900 		.ascii	"\007\307y\000"
 7543              		.align	2
 7544              	.LC21:
 7545 0068 07E43F00 		.ascii	"\007\344?\000"
 7546              		.section	.text.annunciators,"ax",%progbits
 7547              		.align	1
 7548              		.p2align 2,,3
 7549              		.syntax unified
 7550              		.thumb
 7551              		.thumb_func
 7552              		.fpu fpv4-sp-d16
 7554              	annunciators:
 7555              	.LFB16:
 523:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7556              		.loc 1 523 36 is_stmt 1 view -0
 7557              		.cfi_startproc
 7558              		@ args = 0, pretend = 0, frame = 128
 7559              		@ frame_needed = 0, uses_anonymous_args = 0
 525:src/display.c ****       char buf2[42], *p2 = buf2;
 7560              		.loc 1 525 7 view .LVU2383
 523:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7561              		.loc 1 523 36 is_stmt 0 view .LVU2384
 7562 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7563              		.cfi_def_cfa_offset 28
 7564              		.cfi_offset 4, -28
 7565              		.cfi_offset 5, -24
 7566              		.cfi_offset 6, -20
ARM GAS  /tmp/ccDDbRKQ.s 			page 235


 7567              		.cfi_offset 7, -16
 7568              		.cfi_offset 8, -12
 7569              		.cfi_offset 9, -8
 7570              		.cfi_offset 14, -4
 537:src/display.c **** #  endif
 7571              		.loc 1 537 38 view .LVU2385
 7572 0004 9D4C     		ldr	r4, .L928
 523:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7573              		.loc 1 523 36 view .LVU2386
 7574 0006 A3B0     		sub	sp, sp, #140
 7575              		.cfi_def_cfa_offset 168
 7576              	.LVL860:
 526:src/display.c ****       int n;
 7577              		.loc 1 526 7 is_stmt 1 view .LVU2387
 527:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7578              		.loc 1 527 7 view .LVU2388
 528:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7579              		.loc 1 528 7 view .LVU2389
 529:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7580              		.loc 1 529 7 view .LVU2390
 529:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7581              		.loc 1 529 43 is_stmt 0 view .LVU2391
 7582 0008 FFF7FEFF 		bl	cur_shift
 7583              	.LVL861:
 529:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7584              		.loc 1 529 18 view .LVU2392
 7585 000c 9C4B     		ldr	r3, .L928+4
 537:src/display.c **** #  endif
 7586              		.loc 1 537 38 view .LVU2393
 7587 000e 2268     		ldr	r2, [r4]
 529:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7588              		.loc 1 529 18 view .LVU2394
 7589 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7590              	.LVL862:
 537:src/display.c **** #  endif
 7591              		.loc 1 537 7 is_stmt 1 view .LVU2395
 537:src/display.c **** #  endif
 7592              		.loc 1 537 38 is_stmt 0 view .LVU2396
 7593 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 568:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7594              		.loc 1 568 7 view .LVU2397
 7595 0018 0CAE     		add	r6, sp, #48
 7596              	.LVL863:
 568:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7597              		.loc 1 568 7 view .LVU2398
 7598 001a 2A22     		movs	r2, #42
 7599 001c 0021     		movs	r1, #0
 7600 001e 3046     		mov	r0, r6
 7601 0020 FFF7FEFF 		bl	xset
 7602              	.LVL864:
 569:src/display.c ****       
 7603              		.loc 1 569 7 view .LVU2399
 7604 0024 2A22     		movs	r2, #42
 7605 0026 17A8     		add	r0, sp, #92
 7606              	.LVL865:
 569:src/display.c ****       
 7607              		.loc 1 569 7 view .LVU2400
ARM GAS  /tmp/ccDDbRKQ.s 			page 236


 7608 0028 0021     		movs	r1, #0
 7609 002a FFF7FEFF 		bl	xset
 7610              	.LVL866:
 571:src/display.c **** #ifdef SHOW_STACK_SIZE
 7611              		.loc 1 571 11 view .LVU2401
 7612 002e 2368     		ldr	r3, [r4]
 7613 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 571:src/display.c **** #ifdef SHOW_STACK_SIZE
 7614              		.loc 1 571 10 view .LVU2402
 7615 0034 D507     		lsls	r5, r2, #31
 537:src/display.c **** #  endif
 7616              		.loc 1 537 17 view .LVU2403
 7617 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7618              	.LVL867:
 540:src/display.c **** #  else
 7619              		.loc 1 540 7 is_stmt 1 view .LVU2404
 545:src/display.c **** #  else
 7620              		.loc 1 545 7 view .LVU2405
 555:src/display.c **** #else
 7621              		.loc 1 555 7 view .LVU2406
 563:src/display.c **** #else
 7622              		.loc 1 563 7 view .LVU2407
 568:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7623              		.loc 1 568 7 view .LVU2408
 569:src/display.c ****       
 7624              		.loc 1 569 7 view .LVU2409
 571:src/display.c **** #ifdef SHOW_STACK_SIZE
 7625              		.loc 1 571 7 view .LVU2410
 571:src/display.c **** #ifdef SHOW_STACK_SIZE
 7626              		.loc 1 571 10 is_stmt 0 view .LVU2411
 7627 003a 00F13B81 		bmi	.L909
 611:src/display.c **** #else
 7628              		.loc 1 611 12 is_stmt 1 view .LVU2412
 611:src/display.c **** #else
 7629              		.loc 1 611 15 is_stmt 0 view .LVU2413
 7630 003e 002F     		cmp	r7, #0
 7631 0040 56D0     		beq	.L910
 7632              	.L756:
 697:src/display.c **** 	  *p2++ = '\007';
 7633              		.loc 1 697 2 is_stmt 1 view .LVU2414
 697:src/display.c **** 	  *p2++ = '\007';
 7634              		.loc 1 697 6 is_stmt 0 view .LVU2415
 7635 0042 904D     		ldr	r5, .L928+8
 7636 0044 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 697:src/display.c **** 	  *p2++ = '\007';
 7637              		.loc 1 697 5 view .LVU2416
 7638 0046 9A07     		lsls	r2, r3, #30
 7639 0048 40F19B81 		bpl	.L766
 698:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7640              		.loc 1 698 4 is_stmt 1 view .LVU2417
 7641              	.LVL868:
 699:src/display.c **** 	  *p2++ = shift_char;
 7642              		.loc 1 699 4 view .LVU2418
 698:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7643              		.loc 1 698 10 is_stmt 0 view .LVU2419
 7644 004c 4EF20742 		movw	r2, #58375
 701:src/display.c **** 	}
ARM GAS  /tmp/ccDDbRKQ.s 			page 237


 7645              		.loc 1 701 10 view .LVU2420
 7646 0050 1423     		movs	r3, #20
 700:src/display.c **** 	  *p2++ = '\024';
 7647              		.loc 1 700 10 view .LVU2421
 7648 0052 8DF85E80 		strb	r8, [sp, #94]
 698:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7649              		.loc 1 698 10 view .LVU2422
 7650 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 700:src/display.c **** 	  *p2++ = '\024';
 7651              		.loc 1 700 4 is_stmt 1 view .LVU2423
 7652              	.LVL869:
 701:src/display.c **** 	}
 7653              		.loc 1 701 4 view .LVU2424
 701:src/display.c **** 	}
 7654              		.loc 1 701 10 is_stmt 0 view .LVU2425
 7655 005a 8DF85F30 		strb	r3, [sp, #95]
 701:src/display.c **** 	}
 7656              		.loc 1 701 7 view .LVU2426
 7657 005e 0DF16008 		add	r8, sp, #96
 7658              	.LVL870:
 7659              	.L767:
 710:src/display.c **** 	  *p2++ = '\007';
 7660              		.loc 1 710 2 is_stmt 1 view .LVU2427
 710:src/display.c **** 	  *p2++ = '\007';
 7661              		.loc 1 710 6 is_stmt 0 view .LVU2428
 7662 0062 FFF7FEFF 		bl	get_trig_mode
 7663              	.LVL871:
 711:src/display.c **** 	  *p2++ = '\207';
 7664              		.loc 1 711 10 view .LVU2429
 7665 0066 0723     		movs	r3, #7
 710:src/display.c **** 	  *p2++ = '\007';
 7666              		.loc 1 710 5 view .LVU2430
 7667 0068 0228     		cmp	r0, #2
 712:src/display.c **** 	  *p2++ = '\007';	    
 7668              		.loc 1 712 10 view .LVU2431
 7669 006a 4FF08702 		mov	r2, #135
 711:src/display.c **** 	  *p2++ = '\207';
 7670              		.loc 1 711 10 view .LVU2432
 7671 006e 88F80030 		strb	r3, [r8]
 710:src/display.c **** 	  *p2++ = '\007';
 7672              		.loc 1 710 5 view .LVU2433
 7673 0072 00F04C82 		beq	.L911
 716:src/display.c **** 	  *p2++ = '\207';
 7674              		.loc 1 716 4 is_stmt 1 view .LVU2434
 7675              	.LVL872:
 717:src/display.c **** 	  *p2++ = ' ';
 7676              		.loc 1 717 4 view .LVU2435
 718:src/display.c **** 	}
 7677              		.loc 1 718 10 is_stmt 0 view .LVU2436
 7678 0076 2023     		movs	r3, #32
 717:src/display.c **** 	  *p2++ = ' ';
 7679              		.loc 1 717 10 view .LVU2437
 7680 0078 88F80120 		strb	r2, [r8, #1]
 718:src/display.c **** 	}
 7681              		.loc 1 718 4 is_stmt 1 view .LVU2438
 718:src/display.c **** 	}
 7682              		.loc 1 718 10 is_stmt 0 view .LVU2439
ARM GAS  /tmp/ccDDbRKQ.s 			page 238


 7683 007c 88F80230 		strb	r3, [r8, #2]
 718:src/display.c **** 	}
 7684              		.loc 1 718 7 view .LVU2440
 7685 0080 08F10308 		add	r8, r8, #3
 7686              	.LVL873:
 7687              	.L769:
 722:src/display.c **** 	p2 = scopy(p2, q);
 7688              		.loc 1 722 2 is_stmt 1 view .LVU2441
 722:src/display.c **** 	p2 = scopy(p2, q);
 7689              		.loc 1 722 7 is_stmt 0 view .LVU2442
 7690 0084 FFF7FEFF 		bl	is_dblmode
 7691              	.LVL874:
 722:src/display.c **** 	p2 = scopy(p2, q);
 7692              		.loc 1 722 34 view .LVU2443
 7693 0088 7F4B     		ldr	r3, .L928+12
 7694 008a 804A     		ldr	r2, .L928+16
 722:src/display.c **** 	p2 = scopy(p2, q);
 7695              		.loc 1 722 7 view .LVU2444
 7696 008c 0146     		mov	r1, r0
 7697              	.LVL875:
 723:src/display.c **** #else
 7698              		.loc 1 723 2 is_stmt 1 view .LVU2445
 723:src/display.c **** #else
 7699              		.loc 1 723 7 is_stmt 0 view .LVU2446
 7700 008e 0029     		cmp	r1, #0
 7701 0090 14BF     		ite	ne
 7702 0092 1146     		movne	r1, r2
 7703 0094 1946     		moveq	r1, r3
 7704              	.LVL876:
 723:src/display.c **** #else
 7705              		.loc 1 723 7 view .LVU2447
 7706 0096 4046     		mov	r0, r8
 7707 0098 FFF7FEFF 		bl	scopy
 7708              	.LVL877:
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7709              		.loc 1 739 16 view .LVU2448
 7710 009c 2368     		ldr	r3, [r4]
 7711 009e 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7712 00a2 C1F30111 		ubfx	r1, r1, #4, #2
 7713              	.LVL878:
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7714              		.loc 1 739 2 is_stmt 1 view .LVU2449
 7715 00a6 0129     		cmp	r1, #1
 7716 00a8 00F03882 		beq	.L827
 7717 00ac 784B     		ldr	r3, .L928+20
 7718 00ae 794A     		ldr	r2, .L928+24
 7719 00b0 0229     		cmp	r1, #2
 7720 00b2 14BF     		ite	ne
 7721 00b4 1946     		movne	r1, r3
 7722 00b6 1146     		moveq	r1, r2
 7723              	.L771:
 7724              	.LVL879:
 756:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7725              		.loc 1 756 2 view .LVU2450
 756:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7726              		.loc 1 756 6 is_stmt 0 view .LVU2451
 7727 00b8 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccDDbRKQ.s 			page 239


 756:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7728              		.loc 1 756 5 view .LVU2452
 7729 00ba 5B07     		lsls	r3, r3, #29
 757:src/display.c **** 	} // no need to skip y display with arrow here
 7730              		.loc 1 757 4 is_stmt 1 view .LVU2453
 7731 00bc 48BF     		it	mi
 7732 00be 7649     		ldrmi	r1, .L928+28
 7733              	.LVL880:
 760:src/display.c **** 	}
 7734              		.loc 1 760 4 view .LVU2454
 760:src/display.c **** 	}
 7735              		.loc 1 760 9 is_stmt 0 view .LVU2455
 7736 00c0 FFF7FEFF 		bl	scopy
 7737              	.LVL881:
 764:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7738              		.loc 1 764 2 is_stmt 1 view .LVU2456
 764:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7739              		.loc 1 764 8 is_stmt 0 view .LVU2457
 7740 00c4 2268     		ldr	r2, [r4]
 7741 00c6 92F8E437 		ldrb	r3, [r2, #2020]	@ zero_extendqisi2
 764:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7742              		.loc 1 764 5 view .LVU2458
 7743 00ca 13F00800 		ands	r0, r3, #8
 7744 00ce 46D1     		bne	.L774
 764:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7745              		.loc 1 764 18 discriminator 2 view .LVU2459
 7746 00d0 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
 7747 00d4 0907     		lsls	r1, r1, #28
 7748 00d6 42D4     		bmi	.L774
 774:src/display.c **** 	  q = "\007\307<";
 7749              		.loc 1 774 7 is_stmt 1 view .LVU2460
 774:src/display.c **** 	  q = "\007\307<";
 7750              		.loc 1 774 22 is_stmt 0 view .LVU2461
 7751 00d8 DFF8CC91 		ldr	r9, .L928+44
 774:src/display.c **** 	  q = "\007\307<";
 7752              		.loc 1 774 10 view .LVU2462
 7753 00dc D9F80010 		ldr	r1, [r9]
 7754 00e0 0129     		cmp	r1, #1
 7755 00e2 00F01D82 		beq	.L780
 774:src/display.c **** 	  q = "\007\307<";
 7756              		.loc 1 774 43 discriminator 1 view .LVU2463
 7757 00e6 5907     		lsls	r1, r3, #29
 7758 00e8 43D5     		bpl	.L781
 7759 00ea 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7760 00ee 63E1     		b	.L818
 7761              	.LVL882:
 7762              	.L910:
 611:src/display.c **** #else
 7763              		.loc 1 611 36 discriminator 1 view .LVU2464
 7764 00f0 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 611:src/display.c **** #else
 7765              		.loc 1 611 32 discriminator 1 view .LVU2465
 7766 00f4 5007     		lsls	r0, r2, #29
 7767 00f6 00F14D81 		bmi	.L912
 7768              	.L757:
 632:src/display.c **** 	    *p2++ = shift_char;
 7769              		.loc 1 632 4 is_stmt 1 view .LVU2466
ARM GAS  /tmp/ccDDbRKQ.s 			page 240


 632:src/display.c **** 	    *p2++ = shift_char;
 7770              		.loc 1 632 7 is_stmt 0 view .LVU2467
 7771 00fa B8F1200F 		cmp	r8, #32
 7772 00fe 00F04382 		beq	.L758
 7773              	.L760:
 633:src/display.c **** 	    *p2++ = '\006';
 7774              		.loc 1 633 6 is_stmt 1 view .LVU2468
 7775              	.LVL883:
 634:src/display.c **** 	  }
 7776              		.loc 1 634 12 is_stmt 0 view .LVU2469
 7777 0102 0623     		movs	r3, #6
 633:src/display.c **** 	    *p2++ = '\006';
 7778              		.loc 1 633 12 view .LVU2470
 7779 0104 8DF85C80 		strb	r8, [sp, #92]
 634:src/display.c **** 	  }
 7780              		.loc 1 634 6 is_stmt 1 view .LVU2471
 7781              	.LVL884:
 634:src/display.c **** 	  }
 7782              		.loc 1 634 12 is_stmt 0 view .LVU2472
 7783 0108 8DF85D30 		strb	r3, [sp, #93]
 634:src/display.c **** 	  }
 7784              		.loc 1 634 9 view .LVU2473
 7785 010c 0DF15E00 		add	r0, sp, #94
 7786              	.LVL885:
 7787              	.L759:
 640:src/display.c **** 	  *p2++ = ' ';
 7788              		.loc 1 640 2 is_stmt 1 view .LVU2474
 640:src/display.c **** 	  *p2++ = ' ';
 7789              		.loc 1 640 6 is_stmt 0 view .LVU2475
 7790 0110 5C4D     		ldr	r5, .L928+8
 7791 0112 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 640:src/display.c **** 	  *p2++ = ' ';
 7792              		.loc 1 640 5 view .LVU2476
 7793 0114 9A07     		lsls	r2, r3, #30
 7794 0116 00F18B81 		bmi	.L913
 645:src/display.c **** 	  *p2++ = ' ';
 7795              		.loc 1 645 2 is_stmt 1 view .LVU2477
 645:src/display.c **** 	  *p2++ = ' ';
 7796              		.loc 1 645 5 is_stmt 0 view .LVU2478
 7797 011a 5907     		lsls	r1, r3, #29
 7798 011c 00F12282 		bmi	.L914
 651:src/display.c **** 	  if (State2.wascomplex) {
 7799              		.loc 1 651 2 is_stmt 1 view .LVU2479
 651:src/display.c **** 	  if (State2.wascomplex) {
 7800              		.loc 1 651 5 is_stmt 0 view .LVU2480
 7801 0120 B8F1200F 		cmp	r8, #32
 7802 0124 00F05A82 		beq	.L915
 7803              	.L763:
 668:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7804              		.loc 1 668 2 is_stmt 1 view .LVU2481
 668:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7805              		.loc 1 668 16 is_stmt 0 view .LVU2482
 7806 0128 2368     		ldr	r3, [r4]
 7807 012a 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7808 012e C1F30111 		ubfx	r1, r1, #4, #2
 668:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7809              		.loc 1 668 2 view .LVU2483
ARM GAS  /tmp/ccDDbRKQ.s 			page 241


 7810 0132 0129     		cmp	r1, #1
 7811 0134 00F07782 		beq	.L824
 7812 0138 554B     		ldr	r3, .L928+20
 7813 013a 564A     		ldr	r2, .L928+24
 7814 013c 0229     		cmp	r1, #2
 7815 013e 14BF     		ite	ne
 7816 0140 1946     		movne	r1, r3
 7817 0142 1146     		moveq	r1, r2
 7818              	.L765:
 7819              	.LVL886:
 682:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7820              		.loc 1 682 2 is_stmt 1 view .LVU2484
 682:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7821              		.loc 1 682 7 is_stmt 0 view .LVU2485
 7822 0144 FFF7FEFF 		bl	scopy
 7823              	.LVL887:
 682:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7824              		.loc 1 682 7 view .LVU2486
 7825 0148 0446     		mov	r4, r0
 7826              	.LVL888:
 684:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7827              		.loc 1 684 2 is_stmt 1 view .LVU2487
 684:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7828              		.loc 1 684 6 is_stmt 0 view .LVU2488
 7829 014a FFF7FEFF 		bl	get_trig_mode
 7830              	.LVL889:
 684:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7831              		.loc 1 684 5 view .LVU2489
 7832 014e 0228     		cmp	r0, #2
 7833 0150 40F00581 		bne	.L755
 685:src/display.c **** 	}
 7834              		.loc 1 685 4 is_stmt 1 view .LVU2490
 7835 0154 5149     		ldr	r1, .L928+32
 7836 0156 2046     		mov	r0, r4
 7837 0158 FFF7FEFF 		bl	scopy
 7838              	.LVL890:
 7839 015c FFE0     		b	.L755
 7840              	.LVL891:
 7841              	.L774:
 764:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7842              		.loc 1 764 32 is_stmt 0 discriminator 3 view .LVU2491
 7843 015e 5907     		lsls	r1, r3, #29
 7844 0160 00F11E81 		bmi	.L916
 774:src/display.c **** 	  q = "\007\307<";
 7845              		.loc 1 774 7 is_stmt 1 view .LVU2492
 774:src/display.c **** 	  q = "\007\307<";
 7846              		.loc 1 774 22 is_stmt 0 view .LVU2493
 7847 0164 DFF84091 		ldr	r9, .L928+44
 774:src/display.c **** 	  q = "\007\307<";
 7848              		.loc 1 774 10 view .LVU2494
 7849 0168 D9F80030 		ldr	r3, [r9]
 7850 016c 012B     		cmp	r3, #1
 7851 016e 00F0D781 		beq	.L780
 7852              	.L781:
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7853              		.loc 1 778 7 is_stmt 1 view .LVU2495
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
ARM GAS  /tmp/ccDDbRKQ.s 			page 242


 7854              		.loc 1 778 11 is_stmt 0 view .LVU2496
 7855 0172 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7856              		.loc 1 778 10 view .LVU2497
 7857 0174 13F0C00F 		tst	r3, #192
 7858 0178 00F02B81 		beq	.L835
 7859 017c 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7860              	.L816:
 779:src/display.c **** 	  p = scopy(p, q);
 7861              		.loc 1 779 4 is_stmt 1 view .LVU2498
 779:src/display.c **** 	  p = scopy(p, q);
 7862              		.loc 1 779 28 is_stmt 0 view .LVU2499
 7863 0180 474A     		ldr	r2, .L928+36
 7864 0182 4849     		ldr	r1, .L928+40
 7865 0184 13F0020F 		tst	r3, #2
 7866              	.LVL892:
 780:src/display.c **** 	}
 7867              		.loc 1 780 4 is_stmt 1 view .LVU2500
 780:src/display.c **** 	}
 7868              		.loc 1 780 8 is_stmt 0 view .LVU2501
 7869 0188 08BF     		it	eq
 7870 018a 1146     		moveq	r1, r2
 7871              	.LVL893:
 780:src/display.c **** 	}
 7872              		.loc 1 780 8 view .LVU2502
 7873 018c 3046     		mov	r0, r6
 7874 018e FFF7FEFF 		bl	scopy
 7875              	.LVL894:
 780:src/display.c **** 	}
 7876              		.loc 1 780 8 view .LVU2503
 7877 0192 8046     		mov	r8, r0
 7878              	.LVL895:
 7879              	.L783:
 796:src/display.c **** 	    q = "\007\307y";
 7880              		.loc 1 796 4 is_stmt 1 view .LVU2504
 796:src/display.c **** 	    q = "\007\307y";
 7881              		.loc 1 796 7 is_stmt 0 view .LVU2505
 7882 0194 D9F80030 		ldr	r3, [r9]
 7883 0198 022B     		cmp	r3, #2
 7884 019a 00F0C781 		beq	.L917
 7885              	.L785:
 802:src/display.c **** 	  decNumber y;
 7886              		.loc 1 802 2 is_stmt 1 view .LVU2506
 802:src/display.c **** 	  decNumber y;
 7887              		.loc 1 802 6 is_stmt 0 view .LVU2507
 7888 019e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 802:src/display.c **** 	  decNumber y;
 7889              		.loc 1 802 5 view .LVU2508
 7890 01a0 5A06     		lsls	r2, r3, #25
 7891 01a2 40F1DF80 		bpl	.L813
 7892              	.L745:
 7893              	.LBB486:
 803:src/display.c **** 	display_yreg:
 7894              		.loc 1 803 4 is_stmt 1 view .LVU2509
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7895              		.loc 1 810 4 view .LVU2510
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
ARM GAS  /tmp/ccDDbRKQ.s 			page 243


 7896              		.loc 1 810 8 is_stmt 0 view .LVU2511
 7897 01a6 2368     		ldr	r3, [r4]
 7898 01a8 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7899              		.loc 1 810 7 view .LVU2512
 7900 01ac D007     		lsls	r0, r2, #31
 7901 01ae 00F11C81 		bmi	.L918
 7902              	.L787:
 817:src/display.c **** 	    getRegister(&y, regK_idx);
 7903              		.loc 1 817 4 is_stmt 1 view .LVU2513
 817:src/display.c **** 	    getRegister(&y, regK_idx);
 7904              		.loc 1 817 9 is_stmt 0 view .LVU2514
 7905 01b2 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 817:src/display.c **** 	    getRegister(&y, regK_idx);
 7906              		.loc 1 817 7 view .LVU2515
 7907 01b6 5207     		lsls	r2, r2, #29
 7908 01b8 06D5     		bpl	.L794
 817:src/display.c **** 	    getRegister(&y, regK_idx);
 7909              		.loc 1 817 35 discriminator 1 view .LVU2516
 7910 01ba 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 7911 01be 03F01C03 		and	r3, r3, #28
 7912 01c2 0C2B     		cmp	r3, #12
 7913 01c4 00F03382 		beq	.L919
 7914              	.L794:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7915              		.loc 1 821 6 is_stmt 1 view .LVU2517
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7916              		.loc 1 821 36 is_stmt 0 view .LVU2518
 7917 01c8 DFF8E090 		ldr	r9, .L928+48
 7918 01cc D9F80010 		ldr	r1, [r9]
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7919              		.loc 1 821 6 view .LVU2519
 7920 01d0 6329     		cmp	r1, #99
 7921 01d2 00F3B181 		bgt	.L920
 7922              	.LVL896:
 7923              	.L796:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7924              		.loc 1 821 6 discriminator 3 view .LVU2520
 7925 01d6 0131     		adds	r1, r1, #1
 7926              	.L800:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7927              		.loc 1 821 6 discriminator 4 view .LVU2521
 7928 01d8 03AF     		add	r7, sp, #12
 7929 01da 3846     		mov	r0, r7
 7930 01dc FFF7FEFF 		bl	getRegister
 7931              	.LVL897:
 7932              	.L795:
 831:src/display.c **** #ifdef INCLUDE_C_LOCK
 7933              		.loc 1 831 4 is_stmt 1 view .LVU2522
 831:src/display.c **** #ifdef INCLUDE_C_LOCK
 7934              		.loc 1 831 7 is_stmt 0 view .LVU2523
 7935 01e0 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 7936 01e4 13F0700F 		tst	r3, #112
 7937 01e8 40F06E81 		bne	.L802
 833:src/display.c **** #else
 7938              		.loc 1 833 6 is_stmt 1 view .LVU2524
 833:src/display.c **** #else
ARM GAS  /tmp/ccDDbRKQ.s 			page 244


 7939              		.loc 1 833 19 is_stmt 0 view .LVU2525
 7940 01ec EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 833:src/display.c **** #else
 7941              		.loc 1 833 9 view .LVU2526
 7942 01ee 13F0010F 		tst	r3, #1
 833:src/display.c **** #else
 7943              		.loc 1 833 39 view .LVU2527
 7944 01f2 2368     		ldr	r3, [r4]
 833:src/display.c **** #else
 7945              		.loc 1 833 9 view .LVU2528
 7946 01f4 00F02781 		beq	.L805
 833:src/display.c **** #else
 7947              		.loc 1 833 39 discriminator 1 view .LVU2529
 7948 01f8 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 833:src/display.c **** #else
 7949              		.loc 1 833 33 discriminator 1 view .LVU2530
 7950 01fc 5007     		lsls	r0, r2, #29
 7951 01fe 0CD5     		bpl	.L804
 833:src/display.c **** #else
 7952              		.loc 1 833 39 discriminator 2 view .LVU2531
 7953 0200 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 833:src/display.c **** #else
 7954              		.loc 1 833 38 discriminator 2 view .LVU2532
 7955 0204 5107     		lsls	r1, r2, #29
 7956 0206 08D5     		bpl	.L804
 833:src/display.c **** #else
 7957              		.loc 1 833 62 discriminator 5 view .LVU2533
 7958 0208 1207     		lsls	r2, r2, #28
 7959 020a 40F11C81 		bpl	.L805
 833:src/display.c **** #else
 7960              		.loc 1 833 119 discriminator 6 view .LVU2534
 7961 020e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 833:src/display.c **** #else
 7962              		.loc 1 833 80 discriminator 6 view .LVU2535
 7963 0212 12F0C00F 		tst	r2, #192
 7964 0216 40F01681 		bne	.L805
 7965              	.L804:
 7966              	.LBB487:
 837:src/display.c **** 
 7967              		.loc 1 837 8 is_stmt 1 view .LVU2536
 839:src/display.c **** 	      UState.nothousands = 1;
 7968              		.loc 1 839 8 is_stmt 0 view .LVU2537
 7969 021a 2A22     		movs	r2, #42
 7970 021c 0021     		movs	r1, #0
 7971 021e 3046     		mov	r0, r6
 837:src/display.c **** 
 7972              		.loc 1 837 44 view .LVU2538
 7973 0220 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 7974 0224 DFF88880 		ldr	r8, .L928+52
 7975              	.LVL898:
 839:src/display.c **** 	      UState.nothousands = 1;
 7976              		.loc 1 839 8 view .LVU2539
 7977 0228 FFF7FEFF 		bl	xset
 7978              	.LVL899:
 840:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7979              		.loc 1 840 27 view .LVU2540
 7980 022c 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccDDbRKQ.s 			page 245


 7981 022e 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 7982 0232 43F04003 		orr	r3, r3, #64
 7983 0236 82F8E737 		strb	r3, [r2, #2023]
 841:src/display.c **** 	      UState.nothousands = saved_nothousands;
 7984              		.loc 1 841 8 view .LVU2541
 7985 023a 3146     		mov	r1, r6
 7986 023c 3846     		mov	r0, r7
 7987 023e FFF7FEFF 		bl	set_x_hms
 7988              	.LVL900:
 842:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7989              		.loc 1 842 27 view .LVU2542
 7990 0242 2368     		ldr	r3, [r4]
 7991 0244 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 837:src/display.c **** 
 7992              		.loc 1 837 44 view .LVU2543
 7993 0248 C9F38019 		ubfx	r9, r9, #6, #1
 7994              	.LVL901:
 839:src/display.c **** 	      UState.nothousands = 1;
 7995              		.loc 1 839 8 is_stmt 1 view .LVU2544
 840:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7996              		.loc 1 840 8 view .LVU2545
 841:src/display.c **** 	      UState.nothousands = saved_nothousands;
 7997              		.loc 1 841 8 view .LVU2546
 842:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7998              		.loc 1 842 8 view .LVU2547
 842:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7999              		.loc 1 842 27 is_stmt 0 view .LVU2548
 8000 024c 69F38612 		bfi	r2, r9, #6, #1
 8001 0250 83F8E727 		strb	r2, [r3, #2023]
 847:src/display.c **** 	      while (*p) {
 8002              		.loc 1 847 8 is_stmt 1 view .LVU2549
 8003              	.LVL902:
 848:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8004              		.loc 1 848 8 view .LVU2550
 848:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8005              		.loc 1 848 14 view .LVU2551
 848:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8006              		.loc 1 848 15 is_stmt 0 view .LVU2552
 8007 0254 4021     		movs	r1, #64
 842:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8008              		.loc 1 842 27 view .LVU2553
 8009 0256 0522     		movs	r2, #5
 8010 0258 05E0     		b	.L807
 8011              	.LVL903:
 8012              	.L921:
 848:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8013              		.loc 1 848 15 view .LVU2554
 8014 025a 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8015              	.LVL904:
 848:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8016              		.loc 1 848 14 view .LVU2555
 8017 025e 0029     		cmp	r1, #0
 8018 0260 7DD0     		beq	.L755
 8019 0262 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8020              	.LVL905:
 8021              	.L807:
 849:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 246


 8022              		.loc 1 849 3 is_stmt 1 view .LVU2556
 8023 0266 3046     		mov	r0, r6
 8024 0268 FFF7FEFF 		bl	replace_char
 8025              	.LVL906:
 850:src/display.c **** 		  goto skip;
 8026              		.loc 1 850 3 view .LVU2557
 850:src/display.c **** 		  goto skip;
 8027              		.loc 1 850 7 is_stmt 0 view .LVU2558
 8028 026c 0121     		movs	r1, #1
 8029 026e 3046     		mov	r0, r6
 8030 0270 FFF7FEFF 		bl	pixel_length
 8031              	.LVL907:
 853:src/display.c **** 	      }
 8032              		.loc 1 853 3 is_stmt 1 view .LVU2559
 848:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8033              		.loc 1 848 14 view .LVU2560
 850:src/display.c **** 		  goto skip;
 8034              		.loc 1 850 6 is_stmt 0 view .LVU2561
 8035 0274 2C28     		cmp	r0, #44
 8036 0276 F0DC     		bgt	.L921
 8037 0278 71E0     		b	.L755
 8038              	.L929:
 8039 027a 00BF     		.align	2
 8040              	.L928:
 8041 027c 00000000 		.word	main_ram
 8042 0280 00000000 		.word	.LANCHOR12
 8043 0284 00000000 		.word	StateWhileOn
 8044 0288 28000000 		.word	.LC10
 8045 028c 24000000 		.word	.LC9
 8046 0290 10000000 		.word	.LC6
 8047 0294 1C000000 		.word	.LC8
 8048 0298 58000000 		.word	.LC17
 8049 029c 50000000 		.word	.LC16
 8050 02a0 08000000 		.word	.LC4
 8051 02a4 4C000000 		.word	.LC15
 8052 02a8 00000000 		.word	RectPolConv
 8053 02ac 00000000 		.word	ShowRegister
 8054 02b0 00000000 		.word	.LANCHOR14
 8055              	.LVL908:
 8056              	.L909:
 850:src/display.c **** 		  goto skip;
 8057              		.loc 1 850 6 view .LVU2562
 8058              	.LBE487:
 8059              	.LBE486:
 581:src/display.c **** 	    *p2++ = '\006';
 8060              		.loc 1 581 6 is_stmt 1 view .LVU2563
 582:src/display.c **** 	  }
 8061              		.loc 1 582 12 is_stmt 0 view .LVU2564
 8062 02b4 0623     		movs	r3, #6
 8063 02b6 8DF85D30 		strb	r3, [sp, #93]
 581:src/display.c **** 	    *p2++ = '\006';
 8064              		.loc 1 581 12 view .LVU2565
 8065 02ba 8DF85C80 		strb	r8, [sp, #92]
 582:src/display.c **** 	  }
 8066              		.loc 1 582 6 is_stmt 1 view .LVU2566
 8067              	.LVL909:
 585:src/display.c **** 	default:
ARM GAS  /tmp/ccDDbRKQ.s 			page 247


 8068              		.loc 1 585 2 view .LVU2567
 585:src/display.c **** 	default:
 8069              		.loc 1 585 9 is_stmt 0 view .LVU2568
 8070 02be FFF7FEFF 		bl	int_mode
 8071              	.LVL910:
 8072 02c2 0138     		subs	r0, r0, #1
 8073 02c4 C0B2     		uxtb	r0, r0
 8074 02c6 0228     		cmp	r0, #2
 8075 02c8 96BF     		itet	ls
 8076 02ca B54B     		ldrls	r3, .L930
 8077 02cc B549     		ldrhi	r1, .L930+4
 8078 02ce 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8079              	.LVL911:
 592:src/display.c **** 	*q++ = '\006';
 8080              		.loc 1 592 2 is_stmt 1 view .LVU2569
 592:src/display.c **** 	*q++ = '\006';
 8081              		.loc 1 592 6 is_stmt 0 view .LVU2570
 8082 02d2 0DF15E00 		add	r0, sp, #94
 8083              	.LVL912:
 592:src/display.c **** 	*q++ = '\006';
 8084              		.loc 1 592 6 view .LVU2571
 8085 02d6 FFF7FEFF 		bl	scopy
 8086              	.LVL913:
 593:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8087              		.loc 1 593 7 view .LVU2572
 8088 02da 8046     		mov	r8, r0
 8089              	.LVL914:
 593:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8090              		.loc 1 593 7 view .LVU2573
 8091 02dc 0623     		movs	r3, #6
 8092 02de 08F8013B 		strb	r3, [r8], #1
 592:src/display.c **** 	*q++ = '\006';
 8093              		.loc 1 592 6 view .LVU2574
 8094 02e2 0546     		mov	r5, r0
 8095              	.LVL915:
 593:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8096              		.loc 1 593 2 is_stmt 1 view .LVU2575
 594:src/display.c **** 
 8097              		.loc 1 594 2 view .LVU2576
 594:src/display.c **** 
 8098              		.loc 1 594 7 is_stmt 0 view .LVU2577
 8099 02e4 FFF7FEFF 		bl	word_size
 8100              	.LVL916:
 8101 02e8 0222     		movs	r2, #2
 8102 02ea 0146     		mov	r1, r0
 8103 02ec 4046     		mov	r0, r8
 8104 02ee FFF7FEFF 		bl	num_arg_0
 8105              	.LVL917:
 596:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8106              		.loc 1 596 19 view .LVU2578
 8107 02f2 DFF8E0C2 		ldr	ip, .L930+52
 8108 02f6 DCF80030 		ldr	r3, [ip]
 8109              	.LVL918:
 596:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8110              		.loc 1 596 2 is_stmt 1 view .LVU2579
 596:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8111              		.loc 1 596 5 is_stmt 0 view .LVU2580
ARM GAS  /tmp/ccDDbRKQ.s 			page 248


 8112 02fa 002B     		cmp	r3, #0
 8113 02fc 6BDD     		ble	.L907
 597:src/display.c **** 	  if (*q == '1')
 8114              		.loc 1 597 4 is_stmt 1 view .LVU2581
 597:src/display.c **** 	  if (*q == '1')
 8115              		.loc 1 597 10 is_stmt 0 view .LVU2582
 8116 02fe C3F10702 		rsb	r2, r3, #7
 8117 0302 5200     		lsls	r2, r2, #1
 597:src/display.c **** 	  if (*q == '1')
 8118              		.loc 1 597 6 view .LVU2583
 8119 0304 0292     		str	r2, [sp, #8]
 598:src/display.c **** 	    n += 2;
 8120              		.loc 1 598 4 is_stmt 1 view .LVU2584
 598:src/display.c **** 	    n += 2;
 8121              		.loc 1 598 7 is_stmt 0 view .LVU2585
 8122 0306 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8123 0308 3129     		cmp	r1, #49
 599:src/display.c **** 	  if (q[1] == '1')
 8124              		.loc 1 599 6 is_stmt 1 view .LVU2586
 599:src/display.c **** 	  if (q[1] == '1')
 8125              		.loc 1 599 8 is_stmt 0 view .LVU2587
 8126 030a 04BF     		itt	eq
 8127 030c 0232     		addeq	r2, r2, #2
 8128 030e 0292     		streq	r2, [sp, #8]
 600:src/display.c **** 	    n += 2;
 8129              		.loc 1 600 4 is_stmt 1 view .LVU2588
 600:src/display.c **** 	    n += 2;
 8130              		.loc 1 600 7 is_stmt 0 view .LVU2589
 8131 0310 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8132 0312 3129     		cmp	r1, #49
 8133 0314 00D1     		bne	.L748
 601:src/display.c **** 	  while (n-- > 0)
 8134              		.loc 1 601 6 is_stmt 1 view .LVU2590
 601:src/display.c **** 	  while (n-- > 0)
 8135              		.loc 1 601 8 is_stmt 0 view .LVU2591
 8136 0316 0232     		adds	r2, r2, #2
 8137              	.L748:
 602:src/display.c **** 	    *p2++ = '\006';
 8138              		.loc 1 602 10 is_stmt 1 view .LVU2592
 602:src/display.c **** 	    *p2++ = '\006';
 8139              		.loc 1 602 12 is_stmt 0 view .LVU2593
 8140 0318 511E     		subs	r1, r2, #1
 602:src/display.c **** 	    *p2++ = '\006';
 8141              		.loc 1 602 10 view .LVU2594
 8142 031a 002A     		cmp	r2, #0
 602:src/display.c **** 	    *p2++ = '\006';
 8143              		.loc 1 602 12 view .LVU2595
 8144 031c 0291     		str	r1, [sp, #8]
 602:src/display.c **** 	    *p2++ = '\006';
 8145              		.loc 1 602 10 view .LVU2596
 8146 031e 40F38481 		ble	.L905
 603:src/display.c **** 
 8147              		.loc 1 603 12 view .LVU2597
 8148 0322 0621     		movs	r1, #6
 8149              	.L749:
 603:src/display.c **** 
 8150              		.loc 1 603 6 is_stmt 1 view .LVU2598
ARM GAS  /tmp/ccDDbRKQ.s 			page 249


 8151              	.LVL919:
 603:src/display.c **** 
 8152              		.loc 1 603 12 is_stmt 0 view .LVU2599
 8153 0324 00F8011B 		strb	r1, [r0], #1
 8154              	.LVL920:
 602:src/display.c **** 	    *p2++ = '\006';
 8155              		.loc 1 602 10 is_stmt 1 view .LVU2600
 602:src/display.c **** 	    *p2++ = '\006';
 8156              		.loc 1 602 12 is_stmt 0 view .LVU2601
 8157 0328 029B     		ldr	r3, [sp, #8]
 8158 032a 5A1E     		subs	r2, r3, #1
 602:src/display.c **** 	    *p2++ = '\006';
 8159              		.loc 1 602 10 view .LVU2602
 8160 032c 002B     		cmp	r3, #0
 602:src/display.c **** 	    *p2++ = '\006';
 8161              		.loc 1 602 12 view .LVU2603
 8162 032e 0292     		str	r2, [sp, #8]
 602:src/display.c **** 	    *p2++ = '\006';
 8163              		.loc 1 602 10 view .LVU2604
 8164 0330 F8DC     		bgt	.L749
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8165              		.loc 1 605 4 is_stmt 1 view .LVU2605
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8166              		.loc 1 605 11 is_stmt 0 view .LVU2606
 8167 0332 DCF80030 		ldr	r3, [ip]
 8168 0336 0293     		str	r3, [sp, #8]
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8169              		.loc 1 605 27 is_stmt 1 view .LVU2607
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8170              		.loc 1 605 4 is_stmt 0 view .LVU2608
 8171 0338 002B     		cmp	r3, #0
 8172 033a 4CDB     		blt	.L907
 8173              	.L817:
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8174              		.loc 1 605 4 view .LVU2609
 8175 033c 9A4D     		ldr	r5, .L930+8
 8176              	.L754:
 606:src/display.c **** 	}
 8177              		.loc 1 606 6 is_stmt 1 view .LVU2610
 606:src/display.c **** 	}
 8178              		.loc 1 606 20 is_stmt 0 view .LVU2611
 8179 033e 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8180 0340 C2F3C202 		ubfx	r2, r2, #3, #3
 606:src/display.c **** 	}
 8181              		.loc 1 606 12 view .LVU2612
 8182 0344 9A42     		cmp	r2, r3
 8183 0346 0CBF     		ite	eq
 8184 0348 7C23     		moveq	r3, #124
 8185 034a 2723     		movne	r3, #39
 8186              	.LVL921:
 606:src/display.c **** 	}
 8187              		.loc 1 606 12 view .LVU2613
 8188 034c 00F8013B 		strb	r3, [r0], #1
 8189              	.LVL922:
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8190              		.loc 1 605 35 is_stmt 1 view .LVU2614
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccDDbRKQ.s 			page 250


 8191              		.loc 1 605 36 is_stmt 0 view .LVU2615
 8192 0350 029B     		ldr	r3, [sp, #8]
 8193 0352 013B     		subs	r3, r3, #1
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8194              		.loc 1 605 4 view .LVU2616
 8195 0354 002B     		cmp	r3, #0
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8196              		.loc 1 605 36 view .LVU2617
 8197 0356 0293     		str	r3, [sp, #8]
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8198              		.loc 1 605 27 is_stmt 1 view .LVU2618
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8199              		.loc 1 605 4 is_stmt 0 view .LVU2619
 8200 0358 F1DA     		bge	.L754
 608:src/display.c ****       }
 8201              		.loc 1 608 2 is_stmt 1 view .LVU2620
 608:src/display.c ****       }
 8202              		.loc 1 608 5 is_stmt 0 view .LVU2621
 8203 035a 002F     		cmp	r7, #0
 8204 035c 3ED1     		bne	.L922
 8205              	.LVL923:
 8206              	.L755:
 903:src/display.c ****       set_status_top_always(buf2);
 8207              		.loc 1 903 7 is_stmt 1 view .LVU2622
 903:src/display.c ****       set_status_top_always(buf2);
 8208              		.loc 1 903 11 is_stmt 0 view .LVU2623
 8209 035e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 903:src/display.c ****       set_status_top_always(buf2);
 8210              		.loc 1 903 10 view .LVU2624
 8211 0360 5906     		lsls	r1, r3, #25
 8212 0362 52D4     		bmi	.L923
 8213              	.L813:
 8214              	.LBB493:
 8215              	.LBB494:
3511:src/display.c ****       }
 8216              		.loc 1 3511 2 is_stmt 1 view .LVU2625
 8217 0364 1B06     		lsls	r3, r3, #24
 8218 0366 5AD5     		bpl	.L924
 8219              	.L834:
 8220 0368 0121     		movs	r1, #1
 8221              	.L815:
 8222              	.LVL924:
 8223              	.LBB495:
 8224              	.LBI495:
3357:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8225              		.loc 1 3357 19 view .LVU2626
 8226              	.LBB496:
3358:src/display.c ****       }
 8227              		.loc 1 3358 2 view .LVU2627
 8228 036a 4FF45373 		mov	r3, #844
 8229 036e 0093     		str	r3, [sp]
 8230 0370 17A8     		add	r0, sp, #92
 8231              	.LVL925:
3358:src/display.c ****       }
 8232              		.loc 1 3358 2 is_stmt 0 view .LVU2628
 8233 0372 40F24A23 		movw	r3, #586
 8234 0376 2B22     		movs	r2, #43
ARM GAS  /tmp/ccDDbRKQ.s 			page 251


 8235 0378 FFF7FEFF 		bl	s_s_sized
 8236              	.LVL926:
3358:src/display.c ****       }
 8237              		.loc 1 3358 2 view .LVU2629
 8238              	.LBE496:
 8239              	.LBE495:
 8240              	.LBE494:
 8241              	.LBE493:
 906:src/display.c **** #else
 8242              		.loc 1 906 5 view .LVU2630
 8243 037c 23B0     		add	sp, sp, #140
 8244              		.cfi_remember_state
 8245              		.cfi_def_cfa_offset 28
 8246              		@ sp needed
 8247 037e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8248              	.LVL927:
 8249              	.L766:
 8250              		.cfi_restore_state
 704:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8251              		.loc 1 704 4 is_stmt 1 view .LVU2631
 705:src/display.c **** 	  *p2++ = shift_char;
 8252              		.loc 1 705 4 view .LVU2632
 704:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8253              		.loc 1 704 10 is_stmt 0 view .LVU2633
 8254 0382 4CF20773 		movw	r3, #50951
 706:src/display.c **** 	}
 8255              		.loc 1 706 10 view .LVU2634
 8256 0386 8DF85E80 		strb	r8, [sp, #94]
 704:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8257              		.loc 1 704 10 view .LVU2635
 8258 038a ADF85C30 		strh	r3, [sp, #92]	@ movhi
 706:src/display.c **** 	}
 8259              		.loc 1 706 4 is_stmt 1 view .LVU2636
 8260              	.LVL928:
 706:src/display.c **** 	}
 8261              		.loc 1 706 7 is_stmt 0 view .LVU2637
 8262 038e 0DF15F08 		add	r8, sp, #95
 8263              	.LVL929:
 706:src/display.c **** 	}
 8264              		.loc 1 706 7 view .LVU2638
 8265 0392 66E6     		b	.L767
 8266              	.LVL930:
 8267              	.L912:
 611:src/display.c **** #else
 8268              		.loc 1 611 36 discriminator 2 view .LVU2639
 8269 0394 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 611:src/display.c **** #else
 8270              		.loc 1 611 35 discriminator 2 view .LVU2640
 8271 0398 5907     		lsls	r1, r3, #29
 8272 039a 3FF552AE 		bmi	.L756
 8273 039e ACE6     		b	.L757
 8274              	.LVL931:
 8275              	.L916:
 764:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 8276              		.loc 1 764 35 discriminator 4 view .LVU2641
 8277 03a0 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 8278 03a4 5A07     		lsls	r2, r3, #29
ARM GAS  /tmp/ccDDbRKQ.s 			page 252


 8279 03a6 00F1E280 		bmi	.L925
 774:src/display.c **** 	  q = "\007\307<";
 8280              		.loc 1 774 7 is_stmt 1 view .LVU2642
 774:src/display.c **** 	  q = "\007\307<";
 8281              		.loc 1 774 22 is_stmt 0 view .LVU2643
 8282 03aa DFF80492 		ldr	r9, .L930+16
 774:src/display.c **** 	  q = "\007\307<";
 8283              		.loc 1 774 10 view .LVU2644
 8284 03ae D9F80020 		ldr	r2, [r9]
 8285 03b2 012A     		cmp	r2, #1
 8286 03b4 00F0B480 		beq	.L780
 8287              	.L818:
 774:src/display.c **** 	  q = "\007\307<";
 8288              		.loc 1 774 56 discriminator 2 view .LVU2645
 8289 03b8 03F00C02 		and	r2, r3, #12
 8290 03bc 0C2A     		cmp	r2, #12
 8291 03be 00F0AF80 		beq	.L780
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8292              		.loc 1 778 7 is_stmt 1 view .LVU2646
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8293              		.loc 1 778 11 is_stmt 0 view .LVU2647
 8294 03c2 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8295              		.loc 1 778 32 view .LVU2648
 8296 03c4 03F00402 		and	r2, r3, #4
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8297              		.loc 1 778 11 view .LVU2649
 8298 03c8 21F03F01 		bic	r1, r1, #63
 778:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8299              		.loc 1 778 32 view .LVU2650
 8300 03cc 0A43     		orrs	r2, r1, r2
 8301 03ce 7FF4D7AE 		bne	.L816
 8302              	.L835:
 525:src/display.c ****       char buf2[42], *p2 = buf2;
 8303              		.loc 1 525 22 view .LVU2651
 8304 03d2 B046     		mov	r8, r6
 8305 03d4 DEE6     		b	.L783
 8306              	.LVL932:
 8307              	.L907:
 525:src/display.c ****       char buf2[42], *p2 = buf2;
 8308              		.loc 1 525 22 view .LVU2652
 8309 03d6 744D     		ldr	r5, .L930+8
 608:src/display.c ****       }
 8310              		.loc 1 608 2 is_stmt 1 view .LVU2653
 608:src/display.c ****       }
 8311              		.loc 1 608 5 is_stmt 0 view .LVU2654
 8312 03d8 002F     		cmp	r7, #0
 8313 03da C0D0     		beq	.L755
 8314              	.L922:
 8315              	.LBB501:
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8316              		.loc 1 810 8 view .LVU2655
 8317 03dc 2368     		ldr	r3, [r4]
 8318 03de 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8319              		.loc 1 810 7 view .LVU2656
 8320 03e2 D007     		lsls	r0, r2, #31
ARM GAS  /tmp/ccDDbRKQ.s 			page 253


 8321              	.LVL933:
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8322              		.loc 1 810 7 view .LVU2657
 8323              	.LBE501:
 525:src/display.c ****       char buf2[42], *p2 = buf2;
 8324              		.loc 1 525 22 view .LVU2658
 8325 03e4 B046     		mov	r8, r6
 8326              	.LVL934:
 8327              	.LBB502:
 803:src/display.c **** 	display_yreg:
 8328              		.loc 1 803 4 is_stmt 1 view .LVU2659
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8329              		.loc 1 810 4 view .LVU2660
 810:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8330              		.loc 1 810 7 is_stmt 0 view .LVU2661
 8331 03e6 7FF5E4AE 		bpl	.L787
 8332              	.L918:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8333              		.loc 1 811 6 is_stmt 1 view .LVU2662
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8334              		.loc 1 811 44 is_stmt 0 view .LVU2663
 8335 03ea DFF8EC91 		ldr	r9, .L930+56
 8336 03ee D9F80030 		ldr	r3, [r9]
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8337              		.loc 1 811 6 view .LVU2664
 8338 03f2 632B     		cmp	r3, #99
 8339 03f4 00F30581 		bgt	.L926
 8340              	.L788:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8341              		.loc 1 811 6 discriminator 5 view .LVU2665
 8342 03f8 581C     		adds	r0, r3, #1
 8343              	.L792:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8344              		.loc 1 811 6 discriminator 6 view .LVU2666
 8345 03fa FFF7FEFF 		bl	get_reg_n_int
 8346              	.LVL935:
 8347 03fe 4246     		mov	r2, r8
 8348 0400 FFF7FEFF 		bl	set_int_x
 8349              	.LVL936:
 814:src/display.c **** 	  }
 8350              		.loc 1 814 6 is_stmt 1 discriminator 6 view .LVU2667
 8351              	.LBE502:
 903:src/display.c ****       set_status_top_always(buf2);
 8352              		.loc 1 903 7 discriminator 6 view .LVU2668
 903:src/display.c ****       set_status_top_always(buf2);
 8353              		.loc 1 903 11 is_stmt 0 discriminator 6 view .LVU2669
 8354 0404 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 903:src/display.c ****       set_status_top_always(buf2);
 8355              		.loc 1 903 10 discriminator 6 view .LVU2670
 8356 0406 5906     		lsls	r1, r3, #25
 8357 0408 ACD5     		bpl	.L813
 8358              	.LVL937:
 8359              	.L923:
 903:src/display.c ****       set_status_top_always(buf2);
 8360              		.loc 1 903 27 is_stmt 1 discriminator 1 view .LVU2671
 8361 040a 3046     		mov	r0, r6
 8362 040c FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccDDbRKQ.s 			page 254


 8363              	.LVL938:
 904:src/display.c ****       
 8364              		.loc 1 904 7 discriminator 1 view .LVU2672
 8365              	.LBB503:
 8366              	.LBI493:
3509:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8367              		.loc 1 3509 19 discriminator 1 view .LVU2673
 8368              	.LBB499:
3510:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8369              		.loc 1 3510 2 discriminator 1 view .LVU2674
3510:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8370              		.loc 1 3510 6 is_stmt 0 discriminator 1 view .LVU2675
 8371 0410 664B     		ldr	r3, .L930+12
3510:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8372              		.loc 1 3510 5 discriminator 1 view .LVU2676
 8373 0412 B3F90030 		ldrsh	r3, [r3]
 8374 0416 83B9     		cbnz	r3, .L812
 8375 0418 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
3511:src/display.c ****       }
 8376              		.loc 1 3511 2 is_stmt 1 view .LVU2677
 8377 041a 1B06     		lsls	r3, r3, #24
 8378 041c A4D4     		bmi	.L834
 8379              	.LVL939:
 8380              	.L924:
 8381              	.LBB497:
 8382              	.LBI497:
3489:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8383              		.loc 1 3489 18 view .LVU2678
 8384              	.LBB498:
3490:src/display.c ****       }
 8385              		.loc 1 3490 2 view .LVU2679
3490:src/display.c ****       }
 8386              		.loc 1 3490 9 is_stmt 0 view .LVU2680
 8387 041e 0021     		movs	r1, #0
 8388 0420 17A8     		add	r0, sp, #92
 8389              	.LVL940:
3490:src/display.c ****       }
 8390              		.loc 1 3490 9 view .LVU2681
 8391 0422 FFF7FEFF 		bl	pixel_length
 8392              	.LVL941:
3490:src/display.c ****       }
 8393              		.loc 1 3490 9 view .LVU2682
 8394              	.LBE498:
 8395              	.LBE497:
3511:src/display.c ****       }
 8396              		.loc 1 3511 2 view .LVU2683
 8397 0426 2C28     		cmp	r0, #44
 8398 0428 D4BF     		ite	le
 8399 042a 0021     		movle	r1, #0
 8400 042c 0121     		movgt	r1, #1
 8401 042e 9CE7     		b	.L815
 8402              	.LVL942:
 8403              	.L913:
3511:src/display.c ****       }
 8404              		.loc 1 3511 2 view .LVU2684
 8405              	.LBE499:
 8406              	.LBE503:
ARM GAS  /tmp/ccDDbRKQ.s 			page 255


 641:src/display.c **** 	  *p2 = '\024';
 8407              		.loc 1 641 4 is_stmt 1 view .LVU2685
 641:src/display.c **** 	  *p2 = '\024';
 8408              		.loc 1 641 10 is_stmt 0 view .LVU2686
 8409 0430 2022     		movs	r2, #32
 642:src/display.c **** 	  goto skip;
 8410              		.loc 1 642 8 view .LVU2687
 8411 0432 1423     		movs	r3, #20
 641:src/display.c **** 	  *p2 = '\024';
 8412              		.loc 1 641 10 view .LVU2688
 8413 0434 0270     		strb	r2, [r0]
 642:src/display.c **** 	  goto skip;
 8414              		.loc 1 642 4 is_stmt 1 view .LVU2689
 642:src/display.c **** 	  goto skip;
 8415              		.loc 1 642 8 is_stmt 0 view .LVU2690
 8416 0436 4370     		strb	r3, [r0, #1]
 643:src/display.c **** 	}
 8417              		.loc 1 643 4 is_stmt 1 view .LVU2691
 8418 0438 91E7     		b	.L755
 8419              	.LVL943:
 8420              	.L812:
 8421              	.LBB504:
 8422              	.LBB500:
3510:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8423              		.loc 1 3510 22 is_stmt 0 view .LVU2692
 8424 043a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8425 043c 5A06     		lsls	r2, r3, #25
 8426 043e 91D5     		bpl	.L813
 8427              	.LBE500:
 8428              	.LBE504:
 906:src/display.c **** #else
 8429              		.loc 1 906 5 view .LVU2693
 8430 0440 23B0     		add	sp, sp, #140
 8431              		.cfi_remember_state
 8432              		.cfi_def_cfa_offset 28
 8433              		@ sp needed
 8434 0442 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8435              	.LVL944:
 8436              	.L805:
 8437              		.cfi_restore_state
 8438              	.LBB505:
 857:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8439              		.loc 1 857 6 is_stmt 1 view .LVU2694
 857:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8440              		.loc 1 857 21 is_stmt 0 view .LVU2695
 8441 0446 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 857:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8442              		.loc 1 857 9 view .LVU2696
 8443 044a 9806     		lsls	r0, r3, #26
 8444 044c 3CD5     		bpl	.L802
 859:src/display.c **** #endif
 8445              		.loc 1 859 6 view .LVU2697
 8446 044e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 859:src/display.c **** #endif
 8447              		.loc 1 859 3 view .LVU2698
 8448 0450 13F00204 		ands	r4, r3, #2
 8449 0454 38D1     		bne	.L802
ARM GAS  /tmp/ccDDbRKQ.s 			page 256


 862:src/display.c **** #endif
 8450              		.loc 1 862 6 view .LVU2699
 8451 0456 564B     		ldr	r3, .L930+16
 862:src/display.c **** #endif
 8452              		.loc 1 862 3 view .LVU2700
 8453 0458 1B68     		ldr	r3, [r3]
 8454 045a 012B     		cmp	r3, #1
 8455 045c 34D0     		beq	.L802
 864:src/display.c **** 	      char ltgteq;
 8456              		.loc 1 864 6 view .LVU2701
 8457 045e 4146     		mov	r1, r8
 8458 0460 3846     		mov	r0, r7
 8459 0462 FFF7FEFF 		bl	set_x_fract
 8460              	.LVL945:
 864:src/display.c **** 	      char ltgteq;
 8461              		.loc 1 864 3 view .LVU2702
 8462 0466 78B3     		cbz	r0, .L802
 8463              	.LBB488:
 865:src/display.c **** 
 8464              		.loc 1 865 8 is_stmt 1 view .LVU2703
 867:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8465              		.loc 1 867 8 view .LVU2704
 867:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8466              		.loc 1 867 12 is_stmt 0 view .LVU2705
 8467 0468 2146     		mov	r1, r4
 8468 046a 3046     		mov	r0, r6
 8469 046c FFF7FEFF 		bl	find_char
 8470              	.LVL946:
 8471 0470 0446     		mov	r4, r0
 867:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8472              		.loc 1 867 10 view .LVU2706
 8473 0472 0238     		subs	r0, r0, #2
 8474              	.LVL947:
 869:src/display.c **** 	      switch (ltgteq) {
 8475              		.loc 1 869 8 is_stmt 1 view .LVU2707
 869:src/display.c **** 	      switch (ltgteq) {
 8476              		.loc 1 869 15 is_stmt 0 view .LVU2708
 8477 0474 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8478              	.LVL948:
 870:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8479              		.loc 1 870 8 is_stmt 1 view .LVU2709
 8480 0478 B9F1470F 		cmp	r9, #71
 8481 047c 00F0E580 		beq	.L832
 872:src/display.c **** 	      }
 8482              		.loc 1 872 25 is_stmt 0 view .LVU2710
 8483 0480 B9F14C0F 		cmp	r9, #76
 8484 0484 08BF     		it	eq
 8485 0486 4FF03C09 		moveq	r9, #60
 8486              	.LVL949:
 8487              	.L809:
 874:src/display.c **** 	      q[2] = ltgteq;
 8488              		.loc 1 874 8 is_stmt 1 view .LVU2711
 8489 048a 4A49     		ldr	r1, .L930+20
 8490 048c FFF7FEFF 		bl	scopy
 8491              	.LVL950:
 875:src/display.c **** 
 8492              		.loc 1 875 8 view .LVU2712
ARM GAS  /tmp/ccDDbRKQ.s 			page 257


 875:src/display.c **** 
 8493              		.loc 1 875 13 is_stmt 0 view .LVU2713
 8494 0490 84F80090 		strb	r9, [r4]
 877:src/display.c **** 		goto skip;
 8495              		.loc 1 877 8 is_stmt 1 view .LVU2714
 877:src/display.c **** 		goto skip;
 8496              		.loc 1 877 12 is_stmt 0 view .LVU2715
 8497 0494 0121     		movs	r1, #1
 8498 0496 3046     		mov	r0, r6
 8499 0498 FFF7FEFF 		bl	pixel_length
 8500              	.LVL951:
 877:src/display.c **** 		goto skip;
 8501              		.loc 1 877 11 view .LVU2716
 8502 049c 2C28     		cmp	r0, #44
 8503 049e 7FF75EAF 		ble	.L755
 880:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8504              		.loc 1 880 8 is_stmt 1 view .LVU2717
 880:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8505              		.loc 1 880 14 is_stmt 0 view .LVU2718
 8506 04a2 4FF00009 		mov	r9, #0
 8507              	.LVL952:
 880:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8508              		.loc 1 880 14 view .LVU2719
 8509 04a6 04F8039C 		strb	r9, [r4, #-3]
 881:src/display.c **** 		goto skip;
 8510              		.loc 1 881 8 is_stmt 1 view .LVU2720
 881:src/display.c **** 		goto skip;
 8511              		.loc 1 881 12 is_stmt 0 view .LVU2721
 8512 04aa 0121     		movs	r1, #1
 8513 04ac 3046     		mov	r0, r6
 8514 04ae FFF7FEFF 		bl	pixel_length
 8515              	.LVL953:
 881:src/display.c **** 		goto skip;
 8516              		.loc 1 881 11 view .LVU2722
 8517 04b2 2C28     		cmp	r0, #44
 8518 04b4 7FF753AF 		ble	.L755
 884:src/display.c **** 	    }
 8519              		.loc 1 884 8 is_stmt 1 view .LVU2723
 884:src/display.c **** 	    }
 8520              		.loc 1 884 39 is_stmt 0 view .LVU2724
 8521 04b8 A8EB0602 		sub	r2, r8, r6
 884:src/display.c **** 	    }
 8522              		.loc 1 884 8 view .LVU2725
 8523 04bc 4946     		mov	r1, r9
 8524 04be C2F12A02 		rsb	r2, r2, #42
 8525 04c2 4046     		mov	r0, r8
 8526 04c4 FFF7FEFF 		bl	xset
 8527              	.LVL954:
 8528              	.L802:
 884:src/display.c **** 	    }
 8529              		.loc 1 884 8 view .LVU2726
 8530              	.LBE488:
 887:src/display.c **** 	    int extra_pixels;
 8531              		.loc 1 887 4 is_stmt 1 view .LVU2727
 887:src/display.c **** 	    int extra_pixels;
 8532              		.loc 1 887 10 is_stmt 0 view .LVU2728
 8533 04c8 0C23     		movs	r3, #12
ARM GAS  /tmp/ccDDbRKQ.s 			page 258


 8534 04ca 0293     		str	r3, [sp, #8]
 887:src/display.c **** 	    int extra_pixels;
 8535              		.loc 1 887 27 is_stmt 1 view .LVU2729
 8536 04cc 0FE0     		b	.L811
 8537              	.LVL955:
 8538              	.L927:
 8539              	.LBB489:
 895:src/display.c **** 
 8540              		.loc 1 895 6 is_stmt 0 view .LVU2730
 8541 04ce 029A     		ldr	r2, [sp, #8]
 8542 04d0 0A32     		adds	r2, r2, #10
 8543 04d2 FFF7FEFF 		bl	xset
 8544              	.LVL956:
 897:src/display.c **** 	  }
 8545              		.loc 1 897 6 is_stmt 1 view .LVU2731
 897:src/display.c **** 	  }
 8546              		.loc 1 897 30 is_stmt 0 view .LVU2732
 8547 04d6 B4F14802 		subs	r2, r4, #72
 897:src/display.c **** 	  }
 8548              		.loc 1 897 8 view .LVU2733
 8549 04da 029B     		ldr	r3, [sp, #8]
 897:src/display.c **** 	  }
 8550              		.loc 1 897 30 view .LVU2734
 8551 04dc 48BF     		it	mi
 8552 04de A4F14502 		submi	r2, r4, #69
 897:src/display.c **** 	  }
 8553              		.loc 1 897 8 view .LVU2735
 8554 04e2 A3EBA203 		sub	r3, r3, r2, asr #2
 8555              	.LBE489:
 887:src/display.c **** 	    int extra_pixels;
 8556              		.loc 1 887 4 view .LVU2736
 8557 04e6 012B     		cmp	r3, #1
 8558              	.LBB490:
 897:src/display.c **** 	  }
 8559              		.loc 1 897 8 view .LVU2737
 8560 04e8 0293     		str	r3, [sp, #8]
 8561              	.LBE490:
 887:src/display.c **** 	    int extra_pixels;
 8562              		.loc 1 887 27 is_stmt 1 view .LVU2738
 887:src/display.c **** 	    int extra_pixels;
 8563              		.loc 1 887 4 is_stmt 0 view .LVU2739
 8564 04ea 7FF738AF 		ble	.L755
 8565              	.LVL957:
 8566              	.L811:
 8567              	.LBB491:
 888:src/display.c **** 
 8568              		.loc 1 888 6 is_stmt 1 view .LVU2740
 890:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8569              		.loc 1 890 6 view .LVU2741
 8570 04ee 02AA     		add	r2, sp, #8
 8571 04f0 4146     		mov	r1, r8
 8572 04f2 3846     		mov	r0, r7
 8573 04f4 FFF7FEFF 		bl	set_x_dn
 8574              	.LVL958:
 891:src/display.c **** 	    if (extra_pixels <= 0)
 8575              		.loc 1 891 6 view .LVU2742
 891:src/display.c **** 	    if (extra_pixels <= 0)
ARM GAS  /tmp/ccDDbRKQ.s 			page 259


 8576              		.loc 1 891 21 is_stmt 0 view .LVU2743
 8577 04f8 0121     		movs	r1, #1
 8578 04fa 3046     		mov	r0, r6
 8579 04fc FFF7FEFF 		bl	pixel_length
 8580              	.LVL959:
 895:src/display.c **** 
 8581              		.loc 1 895 6 is_stmt 1 view .LVU2744
 891:src/display.c **** 	    if (extra_pixels <= 0)
 8582              		.loc 1 891 21 is_stmt 0 view .LVU2745
 8583 0500 0446     		mov	r4, r0
 8584              	.LVL960:
 892:src/display.c **** 	      break;
 8585              		.loc 1 892 6 is_stmt 1 view .LVU2746
 892:src/display.c **** 	      break;
 8586              		.loc 1 892 9 is_stmt 0 view .LVU2747
 8587 0502 4B2C     		cmp	r4, #75
 895:src/display.c **** 
 8588              		.loc 1 895 6 view .LVU2748
 8589 0504 4FF00001 		mov	r1, #0
 8590 0508 4046     		mov	r0, r8
 8591              	.LVL961:
 892:src/display.c **** 	      break;
 8592              		.loc 1 892 9 view .LVU2749
 8593 050a E0DC     		bgt	.L927
 8594              	.LVL962:
 892:src/display.c **** 	      break;
 8595              		.loc 1 892 9 view .LVU2750
 8596              	.LBE491:
 8597 050c 27E7     		b	.L755
 8598              	.LVL963:
 8599              	.L911:
 892:src/display.c **** 	      break;
 8600              		.loc 1 892 9 view .LVU2751
 8601              	.LBE505:
 711:src/display.c **** 	  *p2++ = '\207';
 8602              		.loc 1 711 4 is_stmt 1 view .LVU2752
 712:src/display.c **** 	  *p2++ = '\007';	    
 8603              		.loc 1 712 4 view .LVU2753
 713:src/display.c **** 	}
 8604              		.loc 1 713 10 is_stmt 0 view .LVU2754
 8605 050e 88F80230 		strb	r3, [r8, #2]
 712:src/display.c **** 	  *p2++ = '\007';	    
 8606              		.loc 1 712 10 view .LVU2755
 8607 0512 88F80120 		strb	r2, [r8, #1]
 713:src/display.c **** 	}
 8608              		.loc 1 713 4 is_stmt 1 view .LVU2756
 713:src/display.c **** 	}
 8609              		.loc 1 713 7 is_stmt 0 view .LVU2757
 8610 0516 08F10308 		add	r8, r8, #3
 8611              	.LVL964:
 713:src/display.c **** 	}
 8612              		.loc 1 713 7 view .LVU2758
 8613 051a B3E5     		b	.L769
 8614              	.LVL965:
 8615              	.L827:
 745:src/display.c **** #endif
 8616              		.loc 1 745 19 view .LVU2759
ARM GAS  /tmp/ccDDbRKQ.s 			page 260


 8617 051c 2649     		ldr	r1, .L930+24
 8618 051e CBE5     		b	.L771
 8619              	.LVL966:
 8620              	.L780:
 775:src/display.c **** 	  p = scopy(p, q);
 8621              		.loc 1 775 4 is_stmt 1 view .LVU2760
 776:src/display.c **** 	}
 8622              		.loc 1 776 4 view .LVU2761
 776:src/display.c **** 	}
 8623              		.loc 1 776 8 is_stmt 0 view .LVU2762
 8624 0520 2649     		ldr	r1, .L930+28
 8625 0522 3046     		mov	r0, r6
 8626 0524 FFF7FEFF 		bl	scopy
 8627              	.LVL967:
 8628 0528 8046     		mov	r8, r0
 8629              	.LVL968:
 776:src/display.c **** 	}
 8630              		.loc 1 776 6 view .LVU2763
 8631 052a 33E6     		b	.L783
 8632              	.LVL969:
 8633              	.L917:
 797:src/display.c **** 	    p = scopy(p, q);
 8634              		.loc 1 797 6 is_stmt 1 view .LVU2764
 798:src/display.c **** 	    //	    goto no_copy;
 8635              		.loc 1 798 6 view .LVU2765
 798:src/display.c **** 	    //	    goto no_copy;
 8636              		.loc 1 798 10 is_stmt 0 view .LVU2766
 8637 052c 4046     		mov	r0, r8
 8638 052e 2449     		ldr	r1, .L930+32
 8639 0530 FFF7FEFF 		bl	scopy
 8640              	.LVL970:
 8641 0534 8046     		mov	r8, r0
 8642              	.LVL971:
 798:src/display.c **** 	    //	    goto no_copy;
 8643              		.loc 1 798 10 view .LVU2767
 8644 0536 32E6     		b	.L785
 8645              	.LVL972:
 8646              	.L920:
 8647              	.LBB506:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8648              		.loc 1 821 77 discriminator 2 view .LVU2768
 8649 0538 FFF7FEFF 		bl	stack_size
 8650              	.LVL973:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8651              		.loc 1 821 64 discriminator 2 view .LVU2769
 8652 053c D9F80010 		ldr	r1, [r9]
 8653 0540 6330     		adds	r0, r0, #99
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8654              		.loc 1 821 48 discriminator 2 view .LVU2770
 8655 0542 8842     		cmp	r0, r1
 8656 0544 FFF647AE 		blt	.L796
 822:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8657              		.loc 1 822 13 view .LVU2771
 8658 0548 FFF7FEFF 		bl	get_cmdline
 8659              	.LVL974:
 822:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8660              		.loc 1 822 9 view .LVU2772
ARM GAS  /tmp/ccDDbRKQ.s 			page 261


 8661 054c 0028     		cmp	r0, #0
 8662 054e 74D0     		beq	.L798
 822:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8663              		.loc 1 822 27 discriminator 1 view .LVU2773
 8664 0550 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8665 0552 002B     		cmp	r3, #0
 8666 0554 71D1     		bne	.L798
 823:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8667              		.loc 1 823 9 view .LVU2774
 8668 0556 17B1     		cbz	r7, .L799
 823:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8669              		.loc 1 823 30 discriminator 1 view .LVU2775
 8670 0558 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 823:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8671              		.loc 1 823 12 discriminator 1 view .LVU2776
 8672 055a 5F06     		lsls	r7, r3, #25
 8673              	.LVL975:
 823:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8674              		.loc 1 823 12 discriminator 1 view .LVU2777
 8675 055c 6DD5     		bpl	.L798
 8676              	.L799:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8677              		.loc 1 821 6 discriminator 5 view .LVU2778
 8678 055e D9F80010 		ldr	r1, [r9]
 8679 0562 39E6     		b	.L800
 8680              	.LVL976:
 8681              	.L914:
 821:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8682              		.loc 1 821 6 discriminator 5 view .LVU2779
 8683              	.LBE506:
 646:src/display.c **** 	  *p2 = '\015';
 8684              		.loc 1 646 4 is_stmt 1 view .LVU2780
 646:src/display.c **** 	  *p2 = '\015';
 8685              		.loc 1 646 10 is_stmt 0 view .LVU2781
 8686 0564 2022     		movs	r2, #32
 647:src/display.c **** 	  goto skip;
 8687              		.loc 1 647 8 view .LVU2782
 8688 0566 0D23     		movs	r3, #13
 646:src/display.c **** 	  *p2 = '\015';
 8689              		.loc 1 646 10 view .LVU2783
 8690 0568 0270     		strb	r2, [r0]
 647:src/display.c **** 	  goto skip;
 8691              		.loc 1 647 4 is_stmt 1 view .LVU2784
 647:src/display.c **** 	  goto skip;
 8692              		.loc 1 647 8 is_stmt 0 view .LVU2785
 8693 056a 4370     		strb	r3, [r0, #1]
 648:src/display.c **** 	}
 8694              		.loc 1 648 4 is_stmt 1 view .LVU2786
 8695 056c F7E6     		b	.L755
 8696              	.LVL977:
 8697              	.L925:
 765:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8698              		.loc 1 765 4 view .LVU2787
 766:src/display.c **** 	  }
 8699              		.loc 1 766 6 view .LVU2788
 769:src/display.c **** 	  }
 8700              		.loc 1 769 6 view .LVU2789
ARM GAS  /tmp/ccDDbRKQ.s 			page 262


 765:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8701              		.loc 1 765 7 is_stmt 0 view .LVU2790
 8702 056e 1C07     		lsls	r4, r3, #28
 766:src/display.c **** 	  }
 8703              		.loc 1 766 33 view .LVU2791
 8704 0570 47BF     		ittee	mi
 8705 0572 144B     		ldrmi	r3, .L930+36
 8706 0574 1449     		ldrmi	r1, .L930+40
 769:src/display.c **** 	  }
 8707              		.loc 1 769 31 view .LVU2792
 8708 0576 154B     		ldrpl	r3, .L930+44
 8709 0578 1549     		ldrpl	r1, .L930+48
 8710 057a 0028     		cmp	r0, #0
 8711 057c 18BF     		it	ne
 8712 057e 1946     		movne	r1, r3
 8713              	.LVL978:
 771:src/display.c **** 	  goto skip;
 8714              		.loc 1 771 4 is_stmt 1 view .LVU2793
 8715 0580 3046     		mov	r0, r6
 8716 0582 FFF7FEFF 		bl	scopy
 8717              	.LVL979:
 772:src/display.c **** 	}
 8718              		.loc 1 772 4 view .LVU2794
 8719 0586 EAE6     		b	.L755
 8720              	.LVL980:
 8721              	.L758:
 632:src/display.c **** 	    *p2++ = shift_char;
 8722              		.loc 1 632 30 is_stmt 0 discriminator 1 view .LVU2795
 8723 0588 FFF7FEFF 		bl	is_dblmode
 8724              	.LVL981:
 632:src/display.c **** 	    *p2++ = shift_char;
 8725              		.loc 1 632 26 discriminator 1 view .LVU2796
 8726 058c 0028     		cmp	r0, #0
 8727 058e 3FF4B8AD 		beq	.L760
 637:src/display.c **** 	  }
 8728              		.loc 1 637 6 is_stmt 1 view .LVU2797
 8729              	.LVL982:
 637:src/display.c **** 	  }
 8730              		.loc 1 637 12 is_stmt 0 view .LVU2798
 8731 0592 4423     		movs	r3, #68
 8732 0594 8DF85C30 		strb	r3, [sp, #92]
 637:src/display.c **** 	  }
 8733              		.loc 1 637 9 view .LVU2799
 8734 0598 0DF15D00 		add	r0, sp, #93
 8735              	.LVL983:
 637:src/display.c **** 	  }
 8736              		.loc 1 637 9 view .LVU2800
 8737 059c B8E5     		b	.L759
 8738              	.L931:
 8739 059e 00BF     		.align	2
 8740              	.L930:
 8741 05a0 00000000 		.word	.LANCHOR13
 8742 05a4 00000000 		.word	.LC2
 8743 05a8 00000000 		.word	StateWhileOn
 8744 05ac 00000000 		.word	.LANCHOR15
 8745 05b0 00000000 		.word	RectPolConv
 8746 05b4 68000000 		.word	.LC21
ARM GAS  /tmp/ccDDbRKQ.s 			page 263


 8747 05b8 14000000 		.word	.LC7
 8748 05bc 60000000 		.word	.LC18
 8749 05c0 64000000 		.word	.LC19
 8750 05c4 2C000000 		.word	.LC11
 8751 05c8 3C000000 		.word	.LC13
 8752 05cc 34000000 		.word	.LC12
 8753 05d0 44000000 		.word	.LC14
 8754 05d4 00000000 		.word	IntMaxWindow
 8755 05d8 00000000 		.word	ShowRegister
 8756              	.L915:
 651:src/display.c **** 	  if (State2.wascomplex) {
 8757              		.loc 1 651 28 discriminator 1 view .LVU2801
 8758 05dc 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 651:src/display.c **** 	  if (State2.wascomplex) {
 8759              		.loc 1 651 24 discriminator 1 view .LVU2802
 8760 05de 13F0C00F 		tst	r3, #192
 8761 05e2 2DD1     		bne	.L822
 651:src/display.c **** 	  if (State2.wascomplex) {
 8762              		.loc 1 651 60 discriminator 2 view .LVU2803
 8763 05e4 1A4B     		ldr	r3, .L932
 8764 05e6 1B68     		ldr	r3, [r3]
 651:src/display.c **** 	  if (State2.wascomplex) {
 8765              		.loc 1 651 46 discriminator 2 view .LVU2804
 8766 05e8 002B     		cmp	r3, #0
 8767 05ea 3FF49DAD 		beq	.L763
 652:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8768              		.loc 1 652 4 is_stmt 1 view .LVU2805
 655:src/display.c **** 	    if (RectPolConv == 1) {
 8769              		.loc 1 655 9 view .LVU2806
 656:src/display.c **** 	      q = "\007\306<";
 8770              		.loc 1 656 6 view .LVU2807
 660:src/display.c **** 	    }
 8771              		.loc 1 660 10 is_stmt 0 view .LVU2808
 8772 05ee 1949     		ldr	r1, .L932+4
 8773 05f0 194A     		ldr	r2, .L932+8
 8774 05f2 012B     		cmp	r3, #1
 8775 05f4 18BF     		it	ne
 8776 05f6 1146     		movne	r1, r2
 8777              	.L764:
 8778              	.LVL984:
 663:src/display.c **** 
 8779              		.loc 1 663 4 is_stmt 1 view .LVU2809
 663:src/display.c **** 
 8780              		.loc 1 663 8 is_stmt 0 view .LVU2810
 8781 05f8 3046     		mov	r0, r6
 8782              	.LVL985:
 663:src/display.c **** 
 8783              		.loc 1 663 8 view .LVU2811
 8784 05fa FFF7FEFF 		bl	scopy
 8785              	.LVL986:
 663:src/display.c **** 
 8786              		.loc 1 663 8 view .LVU2812
 8787 05fe 8046     		mov	r8, r0
 8788              	.LVL987:
 665:src/display.c **** 	}
 8789              		.loc 1 665 4 is_stmt 1 view .LVU2813
 8790 0600 D1E5     		b	.L745
ARM GAS  /tmp/ccDDbRKQ.s 			page 264


 8791              	.LVL988:
 8792              	.L926:
 8793              	.LBB507:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8794              		.loc 1 811 85 is_stmt 0 discriminator 2 view .LVU2814
 8795 0602 FFF7FEFF 		bl	stack_size
 8796              	.LVL989:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8797              		.loc 1 811 72 discriminator 2 view .LVU2815
 8798 0606 D9F80030 		ldr	r3, [r9]
 8799 060a 6330     		adds	r0, r0, #99
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8800              		.loc 1 811 56 discriminator 2 view .LVU2816
 8801 060c 9842     		cmp	r0, r3
 8802 060e FFF6F3AE 		blt	.L788
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8803              		.loc 1 811 101 discriminator 4 view .LVU2817
 8804 0612 FFF7FEFF 		bl	get_cmdline
 8805              	.LVL990:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8806              		.loc 1 811 98 discriminator 4 view .LVU2818
 8807 0616 18B1     		cbz	r0, .L791
 812:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8808              		.loc 1 812 7 view .LVU2819
 8809 0618 A7B1     		cbz	r7, .L790
 812:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8810              		.loc 1 812 28 discriminator 1 view .LVU2820
 8811 061a EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 812:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8812              		.loc 1 812 10 discriminator 1 view .LVU2821
 8813 061c 5906     		lsls	r1, r3, #25
 8814 061e 11D4     		bmi	.L790
 8815              	.L791:
 8816 0620 D9F80030 		ldr	r3, [r9]
 8817 0624 E8E6     		b	.L788
 8818              	.LVL991:
 8819              	.L824:
 812:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8820              		.loc 1 812 10 discriminator 1 view .LVU2822
 8821              	.LBE507:
 674:src/display.c **** #endif
 8822              		.loc 1 674 19 view .LVU2823
 8823 0626 0D49     		ldr	r1, .L932+12
 8824 0628 8CE5     		b	.L765
 8825              	.LVL992:
 8826              	.L905:
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8827              		.loc 1 605 4 is_stmt 1 view .LVU2824
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8828              		.loc 1 605 11 is_stmt 0 view .LVU2825
 8829 062a 0293     		str	r3, [sp, #8]
 605:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8830              		.loc 1 605 27 is_stmt 1 view .LVU2826
 8831 062c 86E6     		b	.L817
 8832              	.LVL993:
 8833              	.L919:
 8834              	.LBB508:
ARM GAS  /tmp/ccDDbRKQ.s 			page 265


 818:src/display.c **** 	  }
 8835              		.loc 1 818 6 view .LVU2827
 8836 062e 03AF     		add	r7, sp, #12
 8837              	.LVL994:
 818:src/display.c **** 	  }
 8838              		.loc 1 818 6 is_stmt 0 view .LVU2828
 8839 0630 3846     		mov	r0, r7
 8840 0632 6F21     		movs	r1, #111
 8841 0634 FFF7FEFF 		bl	getRegister
 8842              	.LVL995:
 8843 0638 D2E5     		b	.L795
 8844              	.L798:
 8845 063a D9F80010 		ldr	r1, [r9]
 8846 063e CAE5     		b	.L796
 8847              	.LVL996:
 8848              	.L822:
 818:src/display.c **** 	  }
 8849              		.loc 1 818 6 view .LVU2829
 8850              	.LBE508:
 653:src/display.c **** 	  }
 8851              		.loc 1 653 8 view .LVU2830
 8852 0640 0749     		ldr	r1, .L932+16
 8853 0642 D9E7     		b	.L764
 8854              	.LVL997:
 8855              	.L790:
 8856              	.LBB509:
 811:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8857              		.loc 1 811 6 discriminator 7 view .LVU2831
 8858 0644 D9F80000 		ldr	r0, [r9]
 8859 0648 D7E6     		b	.L792
 8860              	.LVL998:
 8861              	.L832:
 8862              	.LBB492:
 871:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8863              		.loc 1 871 25 view .LVU2832
 8864 064a 4FF03E09 		mov	r9, #62
 8865              	.LVL999:
 871:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8866              		.loc 1 871 25 view .LVU2833
 8867 064e 1CE7     		b	.L809
 8868              	.L933:
 8869              		.align	2
 8870              	.L932:
 8871 0650 00000000 		.word	RectPolConv
 8872 0654 04000000 		.word	.LC3
 8873 0658 0C000000 		.word	.LC5
 8874 065c 14000000 		.word	.LC7
 8875 0660 08000000 		.word	.LC4
 8876              	.LBE492:
 8877              	.LBE509:
 8878              		.cfi_endproc
 8879              	.LFE16:
 8881              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8882              		.align	2
 8883              	.LC22:
 8884 0000 0D00     		.ascii	"\015\000"
 8885 0002 0000     		.align	2
ARM GAS  /tmp/ccDDbRKQ.s 			page 266


 8886              	.LC23:
 8887 0004 060600   		.ascii	"\006\006\000"
 8888 0007 00       		.align	2
 8889              	.LC25:
 8890 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8890      492C2057 
 8890      77414C74 
 8890      4500
 8891 0016 0000     		.align	2
 8892              	.LC26:
 8893 0018 48595000 		.ascii	"HYP\000"
 8894              		.align	2
 8895              	.LC27:
 8896 001c 7F060600 		.ascii	"\177\006\006\000"
 8897              		.align	2
 8898              	.LC30:
 8899 0020 3020746F 		.ascii	"0 to 255\000"
 8899      20323535 
 8899      00
 8900 0029 000000   		.align	2
 8901              	.LC31:
 8902 002c 46726565 		.ascii	"Free:\000"
 8902      3A00
 8903 0032 0000     		.align	2
 8904              	.LC32:
 8905 0034 202C2046 		.ascii	" , FL. \000"
 8905      4C2E2000 
 8906              		.align	2
 8907              	.LC33:
 8908 003c 52656773 		.ascii	"Regs:\000"
 8908      3A00
 8909 0042 0000     		.align	2
 8910              	.LC34:
 8911 0044 20910606 		.ascii	" \221\006\006+\000"
 8911      2B00
 8912 004a 0000     		.align	2
 8913              	.LC35:
 8914 004c 202C204C 		.ascii	" , Loc. \000"
 8914      6F632E20 
 8914      00
 8915 0055 000000   		.align	2
 8916              	.LC36:
 8917 0058 464C2000 		.ascii	"FL \000"
 8918              		.align	2
 8919              	.LC37:
 8920 005c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8920      06413A44 
 8920      064C494A 
 8920      4B00
 8921 006a 0000     		.align	2
 8922              	.LC38:
 8923 006c 464C2E30 		.ascii	"FL.00-.15\000"
 8923      302D2E31 
 8923      3500
 8924 0076 0000     		.align	2
 8925              	.LC39:
 8926 0078 43414C4C 		.ascii	"CALLS\000"
ARM GAS  /tmp/ccDDbRKQ.s 			page 267


 8926      5300
 8927 007e 0000     		.align	2
 8928              	.LC40:
 8929 0080 52656720 		.ascii	"Reg \000"
 8929      00
 8930 0085 000000   		.align	2
 8931              	.LC41:
 8932 0088 00       		.ascii	"\000"
 8933 0089 000000   		.align	2
 8934              	.LC42:
 8935 008c 202D2D2D 		.ascii	" ---\000"
 8935      00
 8936 0091 000000   		.align	2
 8937              	.LC29:
 8938 0094 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8938      093E0A00 
 8939              		.align	2
 8940              	.LC28:
 8941 009c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8941      41424344 
 8941      4C494A4B 
 8941      00
 8942              		.section	.text.display,"ax",%progbits
 8943              		.align	1
 8944              		.p2align 2,,3
 8945              		.global	display
 8946              		.syntax unified
 8947              		.thumb
 8948              		.thumb_func
 8949              		.fpu fpv4-sp-d16
 8951              	display:
 8952              	.LFB34:
2574:src/display.c **** 	int i, j;
 8953              		.loc 1 2574 26 is_stmt 1 view -0
 8954              		.cfi_startproc
 8955              		@ args = 0, pretend = 0, frame = 160
 8956              		@ frame_needed = 0, uses_anonymous_args = 0
2575:src/display.c **** 	char buf[40], *bp = buf;
 8957              		.loc 1 2575 2 view .LVU2835
2576:src/display.c **** 	const char *p;
 8958              		.loc 1 2576 2 view .LVU2836
2574:src/display.c **** 	int i, j;
 8959              		.loc 1 2574 26 is_stmt 0 view .LVU2837
 8960 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8961              		.cfi_def_cfa_offset 36
 8962              		.cfi_offset 4, -36
 8963              		.cfi_offset 5, -32
 8964              		.cfi_offset 6, -28
 8965              		.cfi_offset 7, -24
 8966              		.cfi_offset 8, -20
 8967              		.cfi_offset 9, -16
 8968              		.cfi_offset 10, -12
 8969              		.cfi_offset 11, -8
 8970              		.cfi_offset 14, -4
2579:src/display.c **** 	int skip = 0;
 8971              		.loc 1 2579 24 view .LVU2838
 8972 0004 B94C     		ldr	r4, .L1271
ARM GAS  /tmp/ccDDbRKQ.s 			page 268


2584:src/display.c **** 	if (State2.disp_freeze) {
 8973              		.loc 1 2584 16 view .LVU2839
 8974 0006 BA4F     		ldr	r7, .L1271+4
2579:src/display.c **** 	int skip = 0;
 8975              		.loc 1 2579 24 view .LVU2840
 8976 0008 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
2574:src/display.c **** 	int i, j;
 8977              		.loc 1 2574 26 view .LVU2841
 8978 000a A9B0     		sub	sp, sp, #164
 8979              		.cfi_def_cfa_offset 200
 8980              	.LVL1000:
2577:src/display.c **** 	int annuc = 0;
 8981              		.loc 1 2577 2 is_stmt 1 view .LVU2842
2578:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8982              		.loc 1 2578 2 view .LVU2843
2579:src/display.c **** 	int skip = 0;
 8983              		.loc 1 2579 2 view .LVU2844
2579:src/display.c **** 	int skip = 0;
 8984              		.loc 1 2579 24 is_stmt 0 view .LVU2845
 8985 000c 0193     		str	r3, [sp, #4]
 8986              	.LVL1001:
2580:src/display.c **** 	int x_disp = 0;
 8987              		.loc 1 2580 2 is_stmt 1 view .LVU2846
2581:src/display.c **** 	const int shift = cur_shift();
 8988              		.loc 1 2581 2 view .LVU2847
2582:src/display.c **** 
 8989              		.loc 1 2582 2 view .LVU2848
2582:src/display.c **** 
 8990              		.loc 1 2582 20 is_stmt 0 view .LVU2849
 8991 000e FFF7FEFF 		bl	cur_shift
 8992              	.LVL1002:
2585:src/display.c **** 	  State2.disp_freeze = 0;
 8993              		.loc 1 2585 6 view .LVU2850
 8994 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2584:src/display.c **** 	if (State2.disp_freeze) {
 8995              		.loc 1 2584 16 view .LVU2851
 8996 0014 0022     		movs	r2, #0
 8997              	.LVL1003:
2584:src/display.c **** 	if (State2.disp_freeze) {
 8998              		.loc 1 2584 2 is_stmt 1 view .LVU2852
2585:src/display.c **** 	  State2.disp_freeze = 0;
 8999              		.loc 1 2585 5 is_stmt 0 view .LVU2853
 9000 0016 13F01008 		ands	r8, r3, #16
2584:src/display.c **** 	if (State2.disp_freeze) {
 9001              		.loc 1 2584 16 view .LVU2854
 9002 001a 3A80     		strh	r2, [r7]	@ movhi
2585:src/display.c **** 	  State2.disp_freeze = 0;
 9003              		.loc 1 2585 2 is_stmt 1 view .LVU2855
2585:src/display.c **** 	  State2.disp_freeze = 0;
 9004              		.loc 1 2585 5 is_stmt 0 view .LVU2856
 9005 001c 40F0D580 		bne	.L1230
2595:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 9006              		.loc 1 2595 2 is_stmt 1 view .LVU2857
2595:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 9007              		.loc 1 2595 6 is_stmt 0 view .LVU2858
 9008 0020 DFF8F892 		ldr	r9, .L1271+48
 9009 0024 D9F80060 		ldr	r6, [r9]
ARM GAS  /tmp/ccDDbRKQ.s 			page 269


2595:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 9010              		.loc 1 2595 5 view .LVU2859
 9011 0028 002E     		cmp	r6, #0
 9012 002a 58D1     		bne	.L1231
2608:src/display.c **** #  endif
 9013              		.loc 1 2608 2 is_stmt 1 view .LVU2860
2608:src/display.c **** #  endif
 9014              		.loc 1 2608 33 is_stmt 0 view .LVU2861
 9015 002c DFF8D8B2 		ldr	fp, .L1271+28
 9016 0030 DBF80030 		ldr	r3, [fp]
 9017 0034 0546     		mov	r5, r0
 9018 0036 93F8EAA7 		ldrb	r10, [r3, #2026]	@ zero_extendqisi2
2614:src/display.c **** 
 9019              		.loc 1 2614 2 view .LVU2862
 9020 003a FFF7FEFF 		bl	reset_disp
 9021              	.LVL1004:
2617:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9022              		.loc 1 2617 2 view .LVU2863
 9023 003e 1EA8     		add	r0, sp, #120
 9024              	.LVL1005:
2617:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9025              		.loc 1 2617 2 view .LVU2864
 9026 0040 2822     		movs	r2, #40
 9027 0042 3146     		mov	r1, r6
 9028 0044 FFF7FEFF 		bl	xset
 9029              	.LVL1006:
2623:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9030              		.loc 1 2623 6 view .LVU2865
 9031 0048 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2623:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9032              		.loc 1 2623 5 view .LVU2866
 9033 004a D806     		lsls	r0, r3, #27
2608:src/display.c **** #  endif
 9034              		.loc 1 2608 12 view .LVU2867
 9035 004c CAF3800A 		ubfx	r10, r10, #2, #1
 9036              	.LVL1007:
2614:src/display.c **** 
 9037              		.loc 1 2614 2 is_stmt 1 view .LVU2868
2617:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9038              		.loc 1 2617 2 view .LVU2869
2623:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9039              		.loc 1 2623 2 view .LVU2870
2623:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9040              		.loc 1 2623 5 is_stmt 0 view .LVU2871
 9041 0050 00F16881 		bmi	.L1232
2631:src/display.c **** 	  if (yreg_enabled) {
 9042              		.loc 1 2631 9 is_stmt 1 view .LVU2872
2631:src/display.c **** 	  if (yreg_enabled) {
 9043              		.loc 1 2631 13 is_stmt 0 view .LVU2873
 9044 0054 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2631:src/display.c **** 	  if (yreg_enabled) {
 9045              		.loc 1 2631 12 view .LVU2874
 9046 0056 5107     		lsls	r1, r2, #29
 9047 0058 00F0C180 		beq	.L942
2632:src/display.c **** 	    set_status_top(S_SURE);
 9048              		.loc 1 2632 4 is_stmt 1 view .LVU2875
2632:src/display.c **** 	    set_status_top(S_SURE);
ARM GAS  /tmp/ccDDbRKQ.s 			page 270


 9049              		.loc 1 2632 7 is_stmt 0 view .LVU2876
 9050 005c BAF1000F 		cmp	r10, #0
 9051 0060 00F09281 		beq	.L943
2633:src/display.c **** 	    no_status_top = 1;
 9052              		.loc 1 2633 6 is_stmt 1 view .LVU2877
 9053              	.LVL1008:
 9054              	.LBB571:
 9055              	.LBI571:
3499:src/display.c **** 	if (no_status_top) return;
 9056              		.loc 1 3499 19 view .LVU2878
 9057              	.LBB572:
3500:src/display.c **** 	if (State2.runmode) {
 9058              		.loc 1 3500 2 view .LVU2879
3500:src/display.c **** 	if (State2.runmode) {
 9059              		.loc 1 3500 5 is_stmt 0 view .LVU2880
 9060 0064 B7F90030 		ldrsh	r3, [r7]
 9061 0068 13B9     		cbnz	r3, .L945
 9062 006a A248     		ldr	r0, .L1271+8
 9063 006c FFF7FEFF 		bl	set_status_top.part.0
 9064              	.LVL1009:
 9065              	.L945:
3500:src/display.c **** 	if (State2.runmode) {
 9066              		.loc 1 3500 5 view .LVU2881
 9067              	.LBE572:
 9068              	.LBE571:
2634:src/display.c **** 	    annuc = 1;
 9069              		.loc 1 2634 6 is_stmt 1 view .LVU2882
2634:src/display.c **** 	    annuc = 1;
 9070              		.loc 1 2634 20 is_stmt 0 view .LVU2883
 9071 0070 0126     		movs	r6, #1
 9072 0072 3E80     		strh	r6, [r7]	@ movhi
2635:src/display.c **** 	  }
 9073              		.loc 1 2635 6 is_stmt 1 view .LVU2884
 9074              	.LVL1010:
2858:src/display.c ****       nostk:
 9075              		.loc 1 2858 2 view .LVU2885
 9076 0074 FFF7FEFF 		bl	show_stack
 9077              	.LVL1011:
2860:src/display.c **** 	if (!skip) {
 9078              		.loc 1 2860 2 view .LVU2886
 9079 0078 9F4B     		ldr	r3, .L1271+12
 9080 007a DFF8A482 		ldr	r8, .L1271+52
 9081 007e 0093     		str	r3, [sp]
 9082 0080 FFF7FEFF 		bl	show_flags
 9083              	.LVL1012:
2861:src/display.c **** 	  if (State2.runmode) {
 9084              		.loc 1 2861 2 view .LVU2887
 9085              	.L946:
2862:src/display.c **** 	  only_update_x:
 9086              		.loc 1 2862 4 view .LVU2888
2862:src/display.c **** 	  only_update_x:
 9087              		.loc 1 2862 8 is_stmt 0 view .LVU2889
 9088 0084 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2862:src/display.c **** 	  only_update_x:
 9089              		.loc 1 2862 7 view .LVU2890
 9090 0086 13F04005 		ands	r5, r3, #64
 9091 008a 37D1     		bne	.L939
ARM GAS  /tmp/ccDDbRKQ.s 			page 271


 9092              	.LBB573:
2902:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9093              		.loc 1 2902 6 is_stmt 1 view .LVU2891
2902:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9094              		.loc 1 2902 24 is_stmt 0 view .LVU2892
 9095 008c DBF80030 		ldr	r3, [fp]
2902:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9096              		.loc 1 2902 19 view .LVU2893
 9097 0090 B3F8E097 		ldrh	r9, [r3, #2016]
 9098              	.LVL1013:
2903:src/display.c **** 	    const int n = nLIB(pc);
 9099              		.loc 1 2903 6 is_stmt 1 view .LVU2894
2903:src/display.c **** 	    const int n = nLIB(pc);
 9100              		.loc 1 2903 25 is_stmt 0 view .LVU2895
 9101 0094 4846     		mov	r0, r9
 9102 0096 FFF7FEFF 		bl	user_pc
 9103              	.LVL1014:
2905:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9104              		.loc 1 2905 6 view .LVU2896
 9105 009a 2822     		movs	r2, #40
 9106 009c 2946     		mov	r1, r5
2903:src/display.c **** 	    const int n = nLIB(pc);
 9107              		.loc 1 2903 25 view .LVU2897
 9108 009e 8246     		mov	r10, r0
2905:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9109              		.loc 1 2905 6 view .LVU2898
 9110 00a0 1EA8     		add	r0, sp, #120
 9111              	.LVL1015:
2904:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9112              		.loc 1 2904 6 is_stmt 1 view .LVU2899
2905:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9113              		.loc 1 2905 6 is_stmt 0 view .LVU2900
 9114 00a2 FFF7FEFF 		bl	xset
 9115              	.LVL1016:
2906:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9116              		.loc 1 2906 6 view .LVU2901
 9117 00a6 954B     		ldr	r3, .L1271+16
2904:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9118              		.loc 1 2904 20 view .LVU2902
 9119 00a8 4FEA9939 		lsr	r9, r9, #14
 9120              	.LVL1017:
2905:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9121              		.loc 1 2905 6 is_stmt 1 view .LVU2903
2906:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9122              		.loc 1 2906 6 view .LVU2904
 9123 00ac 1868     		ldr	r0, [r3]
 9124 00ae 2A46     		mov	r2, r5
 9125 00b0 0121     		movs	r1, #1
 9126 00b2 FFF7FEFF 		bl	set_exp
 9127              	.LVL1018:
2907:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9128              		.loc 1 2907 6 view .LVU2905
 9129 00b6 B9F1000F 		cmp	r9, #0
 9130 00ba 40F0BE81 		bne	.L1233
 9131 00be 9049     		ldr	r1, .L1271+20
 9132              	.L1075:
 9133 00c0 904D     		ldr	r5, .L1271+24
ARM GAS  /tmp/ccDDbRKQ.s 			page 272


2907:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9134              		.loc 1 2907 6 is_stmt 0 discriminator 4 view .LVU2906
 9135 00c2 1EA8     		add	r0, sp, #120
 9136 00c4 FFF7FEFF 		bl	scopy_spc
 9137              	.LVL1019:
2908:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9138              		.loc 1 2908 21 discriminator 4 view .LVU2907
 9139 00c8 09F00102 		and	r2, r9, #1
2907:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9140              		.loc 1 2907 6 discriminator 4 view .LVU2908
 9141 00cc 5146     		mov	r1, r10
 9142 00ce 0332     		adds	r2, r2, #3
 9143 00d0 FFF7FEFF 		bl	num_arg_0
 9144              	.LVL1020:
2909:src/display.c **** #if 0
 9145              		.loc 1 2909 6 is_stmt 1 discriminator 4 view .LVU2909
 9146 00d4 1EA8     		add	r0, sp, #120
 9147 00d6 0921     		movs	r1, #9
 9148 00d8 FFF7FEFF 		bl	set_digits_string
 9149              	.LVL1021:
 9150 00dc 32E0     		b	.L1229
 9151              	.LVL1022:
 9152              	.L1231:
2909:src/display.c **** #if 0
 9153              		.loc 1 2909 6 is_stmt 0 discriminator 4 view .LVU2910
 9154              	.LBE573:
2596:src/display.c **** 
 9155              		.loc 1 2596 4 is_stmt 1 view .LVU2911
 9156 00de FFF7FEFF 		bl	wait_for_display
 9157              	.LVL1023:
2599:src/display.c **** 	    clr_dot(i);
 9158              		.loc 1 2599 4 view .LVU2912
2599:src/display.c **** 	    clr_dot(i);
 9159              		.loc 1 2599 16 view .LVU2913
 9160              	.L938:
2600:src/display.c **** 	  }
 9161              		.loc 1 2600 6 discriminator 3 view .LVU2914
 9162 00e2 4046     		mov	r0, r8
2599:src/display.c **** 	    clr_dot(i);
 9163              		.loc 1 2599 31 is_stmt 0 discriminator 3 view .LVU2915
 9164 00e4 08F10108 		add	r8, r8, #1
 9165              	.LVL1024:
2600:src/display.c **** 	  }
 9166              		.loc 1 2600 6 discriminator 3 view .LVU2916
 9167 00e8 FFF7FEFF 		bl	clr_dot
 9168              	.LVL1025:
2599:src/display.c **** 	    clr_dot(i);
 9169              		.loc 1 2599 31 is_stmt 1 discriminator 3 view .LVU2917
2599:src/display.c **** 	    clr_dot(i);
 9170              		.loc 1 2599 16 discriminator 3 view .LVU2918
2599:src/display.c **** 	    clr_dot(i);
 9171              		.loc 1 2599 4 is_stmt 0 discriminator 3 view .LVU2919
 9172 00ec B8F1830F 		cmp	r8, #131
 9173 00f0 F7D1     		bne	.L938
 9174 00f2 814B     		ldr	r3, .L1271+12
 9175 00f4 DFF82882 		ldr	r8, .L1271+52
 9176              	.LVL1026:
ARM GAS  /tmp/ccDDbRKQ.s 			page 273


2599:src/display.c **** 	    clr_dot(i);
 9177              		.loc 1 2599 4 discriminator 3 view .LVU2920
 9178 00f8 0093     		str	r3, [sp]
2578:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9179              		.loc 1 2578 6 view .LVU2921
 9180 00fa 0026     		movs	r6, #0
 9181              	.LVL1027:
 9182              	.L939:
2864:src/display.c **** 	    if (p == NULL || cata) {
 9183              		.loc 1 2864 6 is_stmt 1 view .LVU2922
2864:src/display.c **** 	    if (p == NULL || cata) {
 9184              		.loc 1 2864 10 is_stmt 0 view .LVU2923
 9185 00fc FFF7FEFF 		bl	get_cmdline
 9186              	.LVL1028:
2865:src/display.c **** 	      if (ShowRegister != -1) {
 9187              		.loc 1 2865 6 is_stmt 1 view .LVU2924
2865:src/display.c **** 	      if (ShowRegister != -1) {
 9188              		.loc 1 2865 9 is_stmt 0 view .LVU2925
 9189 0100 0546     		mov	r5, r0
 9190 0102 18B1     		cbz	r0, .L1033
2865:src/display.c **** 	      if (ShowRegister != -1) {
 9191              		.loc 1 2865 20 discriminator 1 view .LVU2926
 9192 0104 019B     		ldr	r3, [sp, #4]
 9193 0106 002B     		cmp	r3, #0
 9194 0108 00F0A480 		beq	.L1034
 9195              	.L1033:
2866:src/display.c **** #ifdef INCLUDE_C_LOCK
 9196              		.loc 1 2866 8 is_stmt 1 view .LVU2927
2866:src/display.c **** #ifdef INCLUDE_C_LOCK
 9197              		.loc 1 2866 25 is_stmt 0 view .LVU2928
 9198 010c 7D4D     		ldr	r5, .L1271+24
 9199 010e 2868     		ldr	r0, [r5]
 9200              	.LVL1029:
2866:src/display.c **** #ifdef INCLUDE_C_LOCK
 9201              		.loc 1 2866 11 view .LVU2929
 9202 0110 431C     		adds	r3, r0, #1
 9203 0112 00F02F81 		beq	.L1035
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9204              		.loc 1 2868 3 is_stmt 1 view .LVU2930
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9205              		.loc 1 2868 8 is_stmt 0 view .LVU2931
 9206 0116 7C49     		ldr	r1, .L1271+28
 9207 0118 0B68     		ldr	r3, [r1]
 9208 011a 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9209              		.loc 1 2868 6 view .LVU2932
 9210 011e 5107     		lsls	r1, r2, #29
 9211 0120 07D5     		bpl	.L1036
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9212              		.loc 1 2868 17 discriminator 1 view .LVU2933
 9213 0122 93F8DEE7 		ldrb	lr, [r3, #2014]	@ zero_extendqisi2
 9214 0126 0EF00C0C 		and	ip, lr, #12
 9215 012a BCF10C0F 		cmp	ip, #12
 9216 012e 00F06181 		beq	.L1234
 9217              	.L1036:
2884:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9218              		.loc 1 2884 5 is_stmt 1 view .LVU2934
ARM GAS  /tmp/ccDDbRKQ.s 			page 274


2884:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9219              		.loc 1 2884 41 is_stmt 0 view .LVU2935
 9220 0132 6428     		cmp	r0, #100
 9221 0134 00F0C680 		beq	.L1235
 9222              	.L1042:
2885:src/display.c **** 		}
 9223              		.loc 1 2885 5 is_stmt 1 view .LVU2936
 9224 0138 0021     		movs	r1, #0
 9225 013a FFF7FEFF 		bl	format_reg
 9226              	.LVL1030:
2898:src/display.c **** 	      goto finish;
 9227              		.loc 1 2898 6 view .LVU2937
2898:src/display.c **** 	      goto finish;
 9228              		.loc 1 2898 9 is_stmt 0 view .LVU2938
 9229 013e D9F80030 		ldr	r3, [r9]
 9230 0142 73BB     		cbnz	r3, .L1040
 9231              	.LVL1031:
 9232              	.L1229:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9233              		.loc 1 2930 2 is_stmt 1 discriminator 4 view .LVU2939
 9234 0144 FFF7FEFF 		bl	set_annunciators
 9235              	.LVL1032:
2931:src/display.c **** 	  ShowRPN = 0;
 9236              		.loc 1 2931 2 discriminator 4 view .LVU2940
 9237              	.L941:
2932:src/display.c **** 	  dot(RPN, 0);
 9238              		.loc 1 2932 4 view .LVU2941
2932:src/display.c **** 	  dot(RPN, 0);
 9239              		.loc 1 2932 12 is_stmt 0 view .LVU2942
 9240 0148 DFF8C091 		ldr	r9, .L1271+32
 9241 014c 0023     		movs	r3, #0
 9242              	.LBB574:
 9243              	.LBB575:
 275:src/display.c **** }
 9244              		.loc 1 275 8 view .LVU2943
 9245 014e 8D20     		movs	r0, #141
 9246              	.LBE575:
 9247              	.LBE574:
2932:src/display.c **** 	  dot(RPN, 0);
 9248              		.loc 1 2932 12 view .LVU2944
 9249 0150 C9F80030 		str	r3, [r9]
2933:src/display.c **** 	}
 9250              		.loc 1 2933 4 is_stmt 1 view .LVU2945
 9251              	.LVL1033:
 9252              	.LBB577:
 9253              	.LBI574:
 273:src/display.c ****   if (on)	set_dot(n);
 9254              		.loc 1 273 6 view .LVU2946
 9255              	.LBB576:
 274:src/display.c ****   else	clr_dot(n);
 9256              		.loc 1 274 3 view .LVU2947
 275:src/display.c **** }
 9257              		.loc 1 275 8 view .LVU2948
 9258 0154 FFF7FEFF 		bl	clr_dot
 9259              	.LVL1034:
 9260              	.L1076:
 275:src/display.c **** }
ARM GAS  /tmp/ccDDbRKQ.s 			page 275


 9261              		.loc 1 275 8 is_stmt 0 view .LVU2949
 9262              	.LBE576:
 9263              	.LBE577:
2936:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9264              		.loc 1 2936 2 is_stmt 1 view .LVU2950
2937:src/display.c **** 
 9265              		.loc 1 2937 4 is_stmt 0 view .LVU2951
 9266 0158 D9F80030 		ldr	r3, [r9]
 9267 015c 002B     		cmp	r3, #0
 9268 015e 40F0C380 		bne	.L1097
2936:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9269              		.loc 1 2936 31 view .LVU2952
 9270 0162 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9271 0164 12F04003 		ands	r3, r2, #64
 9272 0168 08D0     		beq	.L1077
2937:src/display.c **** 
 9273              		.loc 1 2937 8 view .LVU2953
 9274 016a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2937:src/display.c **** 
 9275              		.loc 1 2937 4 view .LVU2954
 9276 016c 1B07     		lsls	r3, r3, #28
 9277 016e 40F1FF80 		bpl	.L1099
2937:src/display.c **** 
 9278              		.loc 1 2937 30 discriminator 3 view .LVU2955
 9279 0172 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9280 0174 012B     		cmp	r3, #1
 9281 0176 01D0     		beq	.L1077
2937:src/display.c **** 
 9282              		.loc 1 2937 60 discriminator 5 view .LVU2956
 9283 0178 C2F38003 		ubfx	r3, r2, #2, #1
 9284              	.L1077:
2936:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9285              		.loc 1 2936 19 discriminator 9 view .LVU2957
 9286 017c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9287 017e 63F34512 		bfi	r2, r3, #5, #1
 9288 0182 E275     		strb	r2, [r4, #23]
2940:src/display.c **** 	  annunciators();
 9289              		.loc 1 2940 2 is_stmt 1 discriminator 9 view .LVU2958
2940:src/display.c **** 	  annunciators();
 9290              		.loc 1 2940 5 is_stmt 0 discriminator 9 view .LVU2959
 9291 0184 002E     		cmp	r6, #0
 9292 0186 00F0A980 		beq	.L1078
2940:src/display.c **** 	  annunciators();
 9293              		.loc 1 2940 36 discriminator 1 view .LVU2960
 9294 018a D3B2     		uxtb	r3, r2
2940:src/display.c **** 	  annunciators();
 9295              		.loc 1 2940 13 discriminator 1 view .LVU2961
 9296 018c 03F02103 		and	r3, r3, #33
 9297 0190 202B     		cmp	r3, #32
 9298 0192 00F0A380 		beq	.L1078
 9299              	.L1079:
2941:src/display.c ****  	State2.hms = 0;
 9300              		.loc 1 2941 4 is_stmt 1 view .LVU2962
 9301 0196 FFF7FEFF 		bl	annunciators
 9302              	.LVL1035:
 9303              	.L1080:
2942:src/display.c **** #else
ARM GAS  /tmp/ccDDbRKQ.s 			page 276


 9304              		.loc 1 2942 3 view .LVU2963
2942:src/display.c **** #else
 9305              		.loc 1 2942 14 is_stmt 0 view .LVU2964
 9306 019a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9307 019c 6FF30003 		bfc	r3, #0, #1
 9308 01a0 E375     		strb	r3, [r4, #23]
 9309              	.L1040:
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9310              		.loc 1 2949 2 is_stmt 1 view .LVU2965
2950:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9311              		.loc 1 2950 2 view .LVU2966
2951:src/display.c **** 	State2.invalid_disp = 0;
 9312              		.loc 1 2951 2 view .LVU2967
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9313              		.loc 1 2949 17 is_stmt 0 view .LVU2968
 9314 01a2 6369     		ldr	r3, [r4, #20]
2955:src/display.c **** 	State2.disp_small = 0;
 9315              		.loc 1 2955 11 view .LVU2969
 9316 01a4 009A     		ldr	r2, [sp]
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9317              		.loc 1 2949 17 view .LVU2970
 9318 01a6 23F02173 		bic	r3, r3, #42205184
 9319 01aa 23F48053 		bic	r3, r3, #4096
2951:src/display.c **** 	State2.invalid_disp = 0;
 9320              		.loc 1 2951 15 view .LVU2971
 9321 01ae 0026     		movs	r6, #0
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9322              		.loc 1 2949 17 view .LVU2972
 9323 01b0 6361     		str	r3, [r4, #20]
2953:src/display.c **** 	DispMsg = CNULL;
 9324              		.loc 1 2953 15 view .LVU2973
 9325 01b2 6423     		movs	r3, #100
2951:src/display.c **** 	State2.invalid_disp = 0;
 9326              		.loc 1 2951 15 view .LVU2974
 9327 01b4 6674     		strb	r6, [r4, #17]
2952:src/display.c **** 	ShowRegister = regX_idx;
 9328              		.loc 1 2952 2 is_stmt 1 view .LVU2975
2953:src/display.c **** 	DispMsg = CNULL;
 9329              		.loc 1 2953 2 view .LVU2976
2954:src/display.c **** 	DispPlot = 0;
 9330              		.loc 1 2954 10 is_stmt 0 view .LVU2977
 9331 01b6 C8F80060 		str	r6, [r8]
2955:src/display.c **** 	State2.disp_small = 0;
 9332              		.loc 1 2955 11 view .LVU2978
 9333 01ba 1680     		strh	r6, [r2]	@ movhi
2953:src/display.c **** 	DispMsg = CNULL;
 9334              		.loc 1 2953 15 view .LVU2979
 9335 01bc 2B60     		str	r3, [r5]
2954:src/display.c **** 	DispPlot = 0;
 9336              		.loc 1 2954 2 is_stmt 1 view .LVU2980
2955:src/display.c **** 	State2.disp_small = 0;
 9337              		.loc 1 2955 2 view .LVU2981
2956:src/display.c **** 	finish_display();
 9338              		.loc 1 2956 2 view .LVU2982
2957:src/display.c **** 	no_status_top = 0;
 9339              		.loc 1 2957 2 view .LVU2983
 9340 01be FFF7FEFF 		bl	finish_display
ARM GAS  /tmp/ccDDbRKQ.s 			page 277


 9341              	.LVL1036:
2958:src/display.c **** #ifdef CONSOLE
 9342              		.loc 1 2958 2 view .LVU2984
2958:src/display.c **** #ifdef CONSOLE
 9343              		.loc 1 2958 16 is_stmt 0 view .LVU2985
 9344 01c2 3E80     		strh	r6, [r7]	@ movhi
2962:src/display.c **** #else
 9345              		.loc 1 2962 7 view .LVU2986
 9346 01c4 29B0     		add	sp, sp, #164
 9347              		.cfi_remember_state
 9348              		.cfi_def_cfa_offset 36
 9349              		@ sp needed
 9350 01c6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9351              	.LVL1037:
 9352              	.L1230:
 9353              		.cfi_restore_state
2586:src/display.c **** 	  State2.disp_temp = 1;
 9354              		.loc 1 2586 4 is_stmt 1 view .LVU2987
2587:src/display.c **** #ifdef CONSOLE
 9355              		.loc 1 2587 4 view .LVU2988
2591:src/display.c **** 	  return;
 9356              		.loc 1 2591 12 is_stmt 0 view .LVU2989
 9357 01ca 5049     		ldr	r1, .L1271+32
2586:src/display.c **** 	  State2.disp_temp = 1;
 9358              		.loc 1 2586 23 view .LVU2990
 9359 01cc 23F03003 		bic	r3, r3, #48
 9360 01d0 43F02003 		orr	r3, r3, #32
 9361 01d4 E375     		strb	r3, [r4, #23]
2591:src/display.c **** 	  return;
 9362              		.loc 1 2591 4 is_stmt 1 view .LVU2991
2591:src/display.c **** 	  return;
 9363              		.loc 1 2591 12 is_stmt 0 view .LVU2992
 9364 01d6 0A60     		str	r2, [r1]
2592:src/display.c **** 	}
 9365              		.loc 1 2592 4 is_stmt 1 view .LVU2993
2962:src/display.c **** #else
 9366              		.loc 1 2962 7 is_stmt 0 view .LVU2994
 9367 01d8 29B0     		add	sp, sp, #164
 9368              		.cfi_remember_state
 9369              		.cfi_def_cfa_offset 36
 9370              		@ sp needed
 9371 01da BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9372              	.LVL1038:
 9373              	.L942:
 9374              		.cfi_restore_state
2640:src/display.c **** 	  bp = scopy(bp, "HYP");
 9375              		.loc 1 2640 9 is_stmt 1 view .LVU2995
2640:src/display.c **** 	  bp = scopy(bp, "HYP");
 9376              		.loc 1 2640 12 is_stmt 0 view .LVU2996
 9377 01de 9A06     		lsls	r2, r3, #26
 9378 01e0 00F1DE80 		bmi	.L1236
2652:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9379              		.loc 1 2652 9 is_stmt 1 view .LVU2997
2652:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9380              		.loc 1 2652 12 is_stmt 0 view .LVU2998
 9381 01e4 D907     		lsls	r1, r3, #31
 9382 01e6 00F15781 		bmi	.L1237
ARM GAS  /tmp/ccDDbRKQ.s 			page 278


2667:src/display.c **** 	  /* Commands with arguments */
 9383              		.loc 1 2667 9 is_stmt 1 view .LVU2999
2667:src/display.c **** 	  /* Commands with arguments */
 9384              		.loc 1 2667 13 is_stmt 0 view .LVU3000
 9385 01ea A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2667:src/display.c **** 	  /* Commands with arguments */
 9386              		.loc 1 2667 12 view .LVU3001
 9387 01ec 8A06     		lsls	r2, r1, #26
 9388 01ee 40F1E280 		bpl	.L954
2670:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9389              		.loc 1 2670 4 is_stmt 1 view .LVU3002
2670:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9390              		.loc 1 2670 8 is_stmt 0 view .LVU3003
 9391 01f2 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2670:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9392              		.loc 1 2670 7 view .LVU3004
 9393 01f4 4D2B     		cmp	r3, #77
 9394 01f6 00F08481 		beq	.L955
2670:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9395              		.loc 1 2670 28 discriminator 1 view .LVU3005
 9396 01fa 03F16C02 		add	r2, r3, #108
 9397 01fe D2B2     		uxtb	r2, r2
 9398 0200 012A     		cmp	r2, #1
 9399 0202 40F27E81 		bls	.L955
2576:src/display.c **** 	const char *p;
 9400              		.loc 1 2576 17 view .LVU3006
 9401 0206 1EA8     		add	r0, sp, #120
 9402              	.LVL1039:
 9403              	.L956:
2673:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9404              		.loc 1 2673 4 is_stmt 1 view .LVU3007
2673:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9405              		.loc 1 2673 35 is_stmt 0 view .LVU3008
 9406 0208 0622     		movs	r2, #6
 9407 020a 4149     		ldr	r1, .L1271+36
 9408 020c 02EB0313 		add	r3, r2, r3, lsl #4
2673:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9409              		.loc 1 2673 9 view .LVU3009
 9410 0210 1944     		add	r1, r1, r3
 9411 0212 FFF7FEFF 		bl	scopy
 9412              	.LVL1040:
2674:src/display.c **** 	  if (State2.dot) {
 9413              		.loc 1 2674 4 is_stmt 1 view .LVU3010
2674:src/display.c **** 	  if (State2.dot) {
 9414              		.loc 1 2674 9 is_stmt 0 view .LVU3011
 9415 0216 3F4B     		ldr	r3, .L1271+40
 9416 0218 94F91510 		ldrsb	r1, [r4, #21]
 9417 021c 3E4A     		ldr	r2, .L1271+44
 9418 021e 12EA2101 		ands	r1, r2, r1, asr #32
 9419 0222 38BF     		it	cc
 9420 0224 1946     		movcc	r1, r3
 9421 0226 FFF7FEFF 		bl	scopy
 9422              	.LVL1041:
2675:src/display.c **** 	    *bp++ = 's';
 9423              		.loc 1 2675 8 view .LVU3012
 9424 022a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9425              	.LVL1042:
ARM GAS  /tmp/ccDDbRKQ.s 			page 279


2675:src/display.c **** 	    *bp++ = 's';
 9426              		.loc 1 2675 4 is_stmt 1 view .LVU3013
2675:src/display.c **** 	    *bp++ = 's';
 9427              		.loc 1 2675 7 is_stmt 0 view .LVU3014
 9428 022c 5B06     		lsls	r3, r3, #25
 9429 022e 40F16E81 		bpl	.L958
2676:src/display.c **** 	    *bp++ = '_';
 9430              		.loc 1 2676 6 is_stmt 1 view .LVU3015
 9431              	.LVL1043:
2676:src/display.c **** 	    *bp++ = '_';
 9432              		.loc 1 2676 12 is_stmt 0 view .LVU3016
 9433 0232 7322     		movs	r2, #115
2677:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9434              		.loc 1 2677 12 view .LVU3017
 9435 0234 5F23     		movs	r3, #95
2676:src/display.c **** 	    *bp++ = '_';
 9436              		.loc 1 2676 12 view .LVU3018
 9437 0236 0270     		strb	r2, [r0]
2677:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9438              		.loc 1 2677 6 is_stmt 1 view .LVU3019
 9439              	.LVL1044:
2677:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9440              		.loc 1 2677 12 is_stmt 0 view .LVU3020
 9441 0238 4370     		strb	r3, [r0, #1]
 9442              	.LVL1045:
 9443              	.L982:
2780:src/display.c **** 	    set_status_top(buf);
 9444              		.loc 1 2780 4 is_stmt 1 view .LVU3021
2780:src/display.c **** 	    set_status_top(buf);
 9445              		.loc 1 2780 7 is_stmt 0 view .LVU3022
 9446 023a BAF1000F 		cmp	r10, #0
 9447 023e 00F0CD80 		beq	.L949
 9448              	.L1219:
2781:src/display.c **** 	    no_status_top = 1;
 9449              		.loc 1 2781 6 is_stmt 1 view .LVU3023
 9450              	.LVL1046:
 9451              	.LBB578:
 9452              	.LBI578:
3499:src/display.c **** 	if (no_status_top) return;
 9453              		.loc 1 3499 19 view .LVU3024
 9454              	.LBB579:
3500:src/display.c **** 	if (State2.runmode) {
 9455              		.loc 1 3500 2 view .LVU3025
3500:src/display.c **** 	if (State2.runmode) {
 9456              		.loc 1 3500 5 is_stmt 0 view .LVU3026
 9457 0242 B7F90030 		ldrsh	r3, [r7]
 9458 0246 002B     		cmp	r3, #0
 9459 0248 7FF412AF 		bne	.L945
 9460              	.LBE579:
 9461              	.LBE578:
 9462              	.LBB580:
 9463              	.LBB581:
 9464 024c 1EA8     		add	r0, sp, #120
 9465              	.LVL1047:
3500:src/display.c **** 	if (State2.runmode) {
 9466              		.loc 1 3500 5 view .LVU3027
 9467 024e FFF7FEFF 		bl	set_status_top.part.0
ARM GAS  /tmp/ccDDbRKQ.s 			page 280


 9468              	.LVL1048:
3500:src/display.c **** 	if (State2.runmode) {
 9469              		.loc 1 3500 5 view .LVU3028
 9470 0252 0DE7     		b	.L945
 9471              	.LVL1049:
 9472              	.L1034:
3500:src/display.c **** 	if (State2.runmode) {
 9473              		.loc 1 3500 5 view .LVU3029
 9474              	.LBE581:
 9475              	.LBE580:
2895:src/display.c **** 	      x_disp = 1;
 9476              		.loc 1 2895 8 is_stmt 1 view .LVU3030
 9477              	.LBB582:
 9478              	.LBI582:
1244:src/display.c ****       int i;
 9479              		.loc 1 1244 17 view .LVU3031
 9480              	.LBB583:
1245:src/display.c ****       int gotdot = -1;
 9481              		.loc 1 1245 7 view .LVU3032
1246:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9482              		.loc 1 1246 7 view .LVU3033
1248:src/display.c **** #endif
 9483              		.loc 1 1248 7 view .LVU3034
1252:src/display.c **** #endif
 9484              		.loc 1 1252 7 view .LVU3035
1255:src/display.c **** 	SET_MANT_SIGN;
 9485              		.loc 1 1255 7 view .LVU3036
1255:src/display.c **** 	SET_MANT_SIGN;
 9486              		.loc 1 1255 10 is_stmt 0 view .LVU3037
 9487 0254 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9488 0256 2D2B     		cmp	r3, #45
 9489 0258 00F07981 		beq	.L1238
 9490              	.LVL1050:
 9491              	.L1045:
1260:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9492              		.loc 1 1260 7 is_stmt 1 view .LVU3038
1260:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9493              		.loc 1 1260 11 is_stmt 0 view .LVU3039
 9494 025c 2A4B     		ldr	r3, .L1271+28
 9495 025e 1B68     		ldr	r3, [r3]
 9496 0260 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1260:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9497              		.loc 1 1260 10 view .LVU3040
 9498 0264 13F0010A 		ands	r10, r3, #1
 9499 0268 00F02781 		beq	.L1046
 9500              	.LVL1051:
1261:src/display.c **** 	  set_dig(i, *p);
 9501              		.loc 1 1261 12 is_stmt 1 view .LVU3041
 9502 026c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1261:src/display.c **** 	  set_dig(i, *p);
 9503              		.loc 1 1261 8 is_stmt 0 view .LVU3042
 9504 026e 4FF0000A 		mov	r10, #0
1261:src/display.c **** 	  set_dig(i, *p);
 9505              		.loc 1 1261 2 view .LVU3043
 9506 0272 41B1     		cbz	r1, .L1048
 9507              	.LVL1052:
 9508              	.L1047:
ARM GAS  /tmp/ccDDbRKQ.s 			page 281


1262:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9509              		.loc 1 1262 4 is_stmt 1 view .LVU3044
 9510 0274 5046     		mov	r0, r10
 9511 0276 FFF7FEFF 		bl	set_dig
 9512              	.LVL1053:
1263:src/display.c **** 	}
 9513              		.loc 1 1263 4 view .LVU3045
1261:src/display.c **** 	  set_dig(i, *p);
 9514              		.loc 1 1261 12 is_stmt 0 view .LVU3046
 9515 027a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9516              	.LVL1054:
1263:src/display.c **** 	}
 9517              		.loc 1 1263 6 view .LVU3047
 9518 027e 0AF1090A 		add	r10, r10, #9
 9519              	.LVL1055:
1261:src/display.c **** 	  set_dig(i, *p);
 9520              		.loc 1 1261 24 is_stmt 1 view .LVU3048
1261:src/display.c **** 	  set_dig(i, *p);
 9521              		.loc 1 1261 12 view .LVU3049
1261:src/display.c **** 	  set_dig(i, *p);
 9522              		.loc 1 1261 2 is_stmt 0 view .LVU3050
 9523 0282 0029     		cmp	r1, #0
 9524 0284 F6D1     		bne	.L1047
 9525              	.LVL1056:
 9526              	.L1048:
1265:src/display.c ****       } else {
 9527              		.loc 1 1265 2 is_stmt 1 view .LVU3051
 9528 0286 FFF7FEFF 		bl	carry_overflow
 9529              	.LVL1057:
1265:src/display.c ****       } else {
 9530              		.loc 1 1265 2 is_stmt 0 view .LVU3052
 9531              	.LBE583:
 9532              	.LBE582:
2898:src/display.c **** 	      goto finish;
 9533              		.loc 1 2898 6 is_stmt 1 view .LVU3053
2898:src/display.c **** 	      goto finish;
 9534              		.loc 1 2898 9 is_stmt 0 view .LVU3054
 9535 028a D9F80030 		ldr	r3, [r9]
 9536 028e 002B     		cmp	r3, #0
 9537 0290 40F00081 		bne	.L1140
 9538              	.LVL1058:
 9539              	.L1227:
2898:src/display.c **** 	      goto finish;
 9540              		.loc 1 2898 9 view .LVU3055
 9541 0294 1B4D     		ldr	r5, .L1271+24
 9542              	.LVL1059:
 9543              	.L1039:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9544              		.loc 1 2930 2 is_stmt 1 view .LVU3056
 9545 0296 FFF7FEFF 		bl	set_annunciators
 9546              	.LVL1060:
2931:src/display.c **** 	  ShowRPN = 0;
 9547              		.loc 1 2931 2 view .LVU3057
2931:src/display.c **** 	  ShowRPN = 0;
 9548              		.loc 1 2931 50 is_stmt 0 view .LVU3058
 9549 029a D8F80030 		ldr	r3, [r8]
 9550 029e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 282


 9551 02a0 7FF452AF 		bne	.L941
2931:src/display.c **** 	  ShowRPN = 0;
 9552              		.loc 1 2931 69 discriminator 3 view .LVU3059
 9553 02a4 009B     		ldr	r3, [sp]
 9554 02a6 B3F90030 		ldrsh	r3, [r3]
 9555 02aa 002B     		cmp	r3, #0
 9556 02ac 7FF44CAF 		bne	.L941
2931:src/display.c **** 	  ShowRPN = 0;
 9557              		.loc 1 2931 81 discriminator 4 view .LVU3060
 9558 02b0 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9559 02b2 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9560 02b4 03F00403 		and	r3, r3, #4
 9561 02b8 1343     		orrs	r3, r3, r2
 9562 02ba 7FF445AF 		bne	.L941
 9563 02be DFF84C90 		ldr	r9, .L1271+32
 9564 02c2 49E7     		b	.L1076
 9565              	.LVL1061:
 9566              	.L1235:
2884:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9567              		.loc 1 2884 44 discriminator 1 view .LVU3061
 9568 02c4 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2884:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9569              		.loc 1 2884 41 discriminator 1 view .LVU3062
 9570 02c6 13F00101 		ands	r1, r3, #1
 9571 02ca 7FF435AF 		bne	.L1042
 9572              	.LVL1062:
2885:src/display.c **** 		}
 9573              		.loc 1 2885 5 is_stmt 1 view .LVU3063
 9574 02ce FFF7FEFF 		bl	format_reg
 9575              	.LVL1063:
2898:src/display.c **** 	      goto finish;
 9576              		.loc 1 2898 6 view .LVU3064
2898:src/display.c **** 	      goto finish;
 9577              		.loc 1 2898 9 is_stmt 0 view .LVU3065
 9578 02d2 D9F80030 		ldr	r3, [r9]
 9579 02d6 002B     		cmp	r3, #0
 9580 02d8 DDD0     		beq	.L1039
 9581 02da 62E7     		b	.L1040
 9582              	.LVL1064:
 9583              	.L1078:
2940:src/display.c **** 	  annunciators();
 9584              		.loc 1 2940 52 discriminator 3 view .LVU3066
 9585 02dc 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9586 02de 13F0C00F 		tst	r3, #192
 9587 02e2 3FF45AAF 		beq	.L1080
 9588 02e6 56E7     		b	.L1079
 9589              	.L1097:
 9590 02e8 0023     		movs	r3, #0
 9591 02ea 47E7     		b	.L1077
 9592              	.L1272:
 9593              		.align	2
 9594              	.L1271:
 9595 02ec 00000000 		.word	StateWhileOn
 9596 02f0 00000000 		.word	.LANCHOR15
 9597 02f4 00000000 		.word	.LANCHOR18
 9598 02f8 00000000 		.word	DispPlot
 9599 02fc 00000000 		.word	ProgFree
ARM GAS  /tmp/ccDDbRKQ.s 			page 283


 9600 0300 00000000 		.word	.LANCHOR16
 9601 0304 00000000 		.word	ShowRegister
 9602 0308 00000000 		.word	main_ram
 9603 030c 00000000 		.word	ShowRPN
 9604 0310 00000000 		.word	argcmds
 9605 0314 04000000 		.word	.LC23
 9606 0318 00000000 		.word	.LC22
 9607 031c 00000000 		.word	WasDataEntry
 9608 0320 00000000 		.word	DispMsg
 9609              	.LVL1065:
 9610              	.L1232:
 9611              	.LBB612:
2624:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9612              		.loc 1 2624 4 is_stmt 1 view .LVU3067
2624:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9613              		.loc 1 2624 9 is_stmt 0 view .LVU3068
 9614 0324 B34B     		ldr	r3, .L1273
 9615 0326 CDF85F60 		str	r6, [sp, #95]	@ unaligned
2625:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9616              		.loc 1 2625 4 is_stmt 1 view .LVU3069
2624:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9617              		.loc 1 2624 9 is_stmt 0 view .LVU3070
 9618 032a 93E80700 		ldm	r3, {r0, r1, r2}
 9619 032e 15AB     		add	r3, sp, #84
 9620 0330 03C3     		stmia	r3!, {r0, r1}
 9621 0332 23F8022B 		strh	r2, [r3], #2	@ movhi
2625:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9622              		.loc 1 2625 4 view .LVU3071
 9623 0336 3146     		mov	r1, r6
2624:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9624              		.loc 1 2624 9 view .LVU3072
 9625 0338 120C     		lsrs	r2, r2, #16
2625:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9626              		.loc 1 2625 4 view .LVU3073
 9627 033a AF48     		ldr	r0, .L1273+4
2624:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9628              		.loc 1 2624 9 view .LVU3074
 9629 033c 1A70     		strb	r2, [r3]
2625:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9630              		.loc 1 2625 4 view .LVU3075
 9631 033e FFF7FEFF 		bl	set_digits_string
 9632              	.LVL1066:
2626:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
 9633              		.loc 1 2626 4 is_stmt 1 view .LVU3076
 9634              	.LBB613:
 9635              	.LBI613:
 329:src/display.c ****   if (res) *res++ = ch;
 9636              		.loc 1 329 14 view .LVU3077
 9637              	.LBB614:
 330:src/display.c ****   else	set_dig(base, ch);
 9638              		.loc 1 330 3 view .LVU3078
 331:src/display.c ****   return res;
 9639              		.loc 1 331 8 view .LVU3079
 9640 0342 7221     		movs	r1, #114
 9641 0344 6C20     		movs	r0, #108
 9642 0346 FFF7FEFF 		bl	set_dig
 9643              	.LVL1067:
ARM GAS  /tmp/ccDDbRKQ.s 			page 284


 332:src/display.c **** }
 9644              		.loc 1 332 3 view .LVU3080
 332:src/display.c **** }
 9645              		.loc 1 332 3 is_stmt 0 view .LVU3081
 9646              	.LBE614:
 9647              	.LBE613:
2627:src/display.c **** 	  set_status(vers);
 9648              		.loc 1 2627 4 is_stmt 1 view .LVU3082
 9649 034a AC49     		ldr	r1, .L1273+8
 9650 034c DFF8DC82 		ldr	r8, .L1273+56
 9651 0350 AB4D     		ldr	r5, .L1273+12
 9652 0352 0422     		movs	r2, #4
 9653 0354 0DF15E00 		add	r0, sp, #94
 9654 0358 FFF7FEFF 		bl	xcopy
 9655              	.LVL1068:
2628:src/display.c **** 	  skip = 1;
 9656              		.loc 1 2628 4 view .LVU3083
 9657 035c 15A8     		add	r0, sp, #84
 9658 035e FFF7FEFF 		bl	set_status
 9659              	.LVL1069:
2629:src/display.c **** 	  goto nostk;
 9660              		.loc 1 2629 4 view .LVU3084
2630:src/display.c **** 	} else if (State2.confirm) {
 9661              		.loc 1 2630 4 view .LVU3085
2630:src/display.c **** 	} else if (State2.confirm) {
 9662              		.loc 1 2630 4 is_stmt 0 view .LVU3086
 9663              	.LBE612:
2860:src/display.c **** 	if (!skip) {
 9664              		.loc 1 2860 2 is_stmt 1 view .LVU3087
 9665 0362 A84B     		ldr	r3, .L1273+16
 9666 0364 0093     		str	r3, [sp]
 9667 0366 FFF7FEFF 		bl	show_flags
 9668              	.LVL1070:
2861:src/display.c **** 	  if (State2.runmode) {
 9669              		.loc 1 2861 2 view .LVU3088
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9670              		.loc 1 2930 2 view .LVU3089
 9671 036a FFF7FEFF 		bl	set_annunciators
 9672              	.LVL1071:
2931:src/display.c **** 	  ShowRPN = 0;
 9673              		.loc 1 2931 2 view .LVU3090
 9674 036e EBE6     		b	.L941
 9675              	.LVL1072:
 9676              	.L1099:
2931:src/display.c **** 	  ShowRPN = 0;
 9677              		.loc 1 2931 2 is_stmt 0 view .LVU3091
 9678 0370 0123     		movs	r3, #1
 9679 0372 03E7     		b	.L1077
 9680              	.LVL1073:
 9681              	.L1035:
2893:src/display.c **** 	    } else {
 9682              		.loc 1 2893 3 is_stmt 1 view .LVU3092
 9683 0374 A448     		ldr	r0, .L1273+20
 9684 0376 2421     		movs	r1, #36
 9685 0378 FFF7FEFF 		bl	set_digits_string
 9686              	.LVL1074:
2898:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccDDbRKQ.s 			page 285


 9687              		.loc 1 2898 6 view .LVU3093
2898:src/display.c **** 	      goto finish;
 9688              		.loc 1 2898 9 is_stmt 0 view .LVU3094
 9689 037c D9F80030 		ldr	r3, [r9]
 9690 0380 002B     		cmp	r3, #0
 9691 0382 3FF4DFAE 		beq	.L1229
 9692 0386 0CE7     		b	.L1040
 9693              	.LVL1075:
 9694              	.L943:
2638:src/display.c **** 	  }
 9695              		.loc 1 2638 6 is_stmt 1 view .LVU3095
 9696 0388 9E4B     		ldr	r3, .L1273+16
 9697 038a A048     		ldr	r0, .L1273+24
 9698 038c 0093     		str	r3, [sp]
 9699 038e DFF89C82 		ldr	r8, .L1273+56
 9700 0392 FFF7FEFF 		bl	set_status
 9701              	.LVL1076:
2858:src/display.c ****       nostk:
 9702              		.loc 1 2858 2 view .LVU3096
 9703 0396 FFF7FEFF 		bl	show_stack
 9704              	.LVL1077:
2860:src/display.c **** 	if (!skip) {
 9705              		.loc 1 2860 2 view .LVU3097
 9706 039a FFF7FEFF 		bl	show_flags
 9707              	.LVL1078:
2861:src/display.c **** 	  if (State2.runmode) {
 9708              		.loc 1 2861 2 view .LVU3098
 9709 039e 71E6     		b	.L946
 9710              	.L1236:
2641:src/display.c **** 	  if (! State2.dot)
 9711              		.loc 1 2641 4 view .LVU3099
2641:src/display.c **** 	  if (! State2.dot)
 9712              		.loc 1 2641 9 is_stmt 0 view .LVU3100
 9713 03a0 9B49     		ldr	r1, .L1273+28
 9714 03a2 1EA8     		add	r0, sp, #120
 9715              	.LVL1079:
2641:src/display.c **** 	  if (! State2.dot)
 9716              		.loc 1 2641 9 view .LVU3101
 9717 03a4 FFF7FEFF 		bl	scopy
 9718              	.LVL1080:
2642:src/display.c **** 	    *bp++ = '\235';
 9719              		.loc 1 2642 8 view .LVU3102
 9720 03a8 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9721              	.LVL1081:
2642:src/display.c **** 	    *bp++ = '\235';
 9722              		.loc 1 2642 4 is_stmt 1 view .LVU3103
2642:src/display.c **** 	    *bp++ = '\235';
 9723              		.loc 1 2642 7 is_stmt 0 view .LVU3104
 9724 03aa 5D06     		lsls	r5, r3, #25
 9725 03ac 3FF545AF 		bmi	.L982
2643:src/display.c **** 	  if (yreg_enabled) {
 9726              		.loc 1 2643 6 is_stmt 1 view .LVU3105
 9727              	.LVL1082:
2643:src/display.c **** 	  if (yreg_enabled) {
 9728              		.loc 1 2643 12 is_stmt 0 view .LVU3106
 9729 03b0 9D23     		movs	r3, #157
 9730 03b2 0370     		strb	r3, [r0]
ARM GAS  /tmp/ccDDbRKQ.s 			page 286


 9731              	.LVL1083:
2643:src/display.c **** 	  if (yreg_enabled) {
 9732              		.loc 1 2643 12 view .LVU3107
 9733 03b4 41E7     		b	.L982
 9734              	.LVL1084:
 9735              	.L954:
2705:src/display.c **** 	  *bp++ = 'x';
 9736              		.loc 1 2705 9 is_stmt 1 view .LVU3108
2705:src/display.c **** 	  *bp++ = 'x';
 9737              		.loc 1 2705 19 is_stmt 0 view .LVU3109
 9738 03b6 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2705:src/display.c **** 	  *bp++ = 'x';
 9739              		.loc 1 2705 12 view .LVU3110
 9740 03b8 072A     		cmp	r2, #7
 9741 03ba 00F03981 		beq	.L965
2706:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9742              		.loc 1 2706 4 is_stmt 1 view .LVU3111
 9743              	.LVL1085:
2707:src/display.c **** 	  *bp++ = '_';
 9744              		.loc 1 2707 33 is_stmt 0 view .LVU3112
 9745 03be 954B     		ldr	r3, .L1273+32
2707:src/display.c **** 	  *bp++ = '_';
 9746              		.loc 1 2707 10 view .LVU3113
 9747 03c0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9748 03c2 8DF87930 		strb	r3, [sp, #121]
2706:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9749              		.loc 1 2706 10 view .LVU3114
 9750 03c6 7822     		movs	r2, #120
2708:src/display.c **** 	  *bp++ = '?';
 9751              		.loc 1 2708 10 view .LVU3115
 9752 03c8 43F65F73 		movw	r3, #16223
2706:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9753              		.loc 1 2706 10 view .LVU3116
 9754 03cc 8DF87820 		strb	r2, [sp, #120]
2707:src/display.c **** 	  *bp++ = '_';
 9755              		.loc 1 2707 4 is_stmt 1 view .LVU3117
 9756              	.LVL1086:
2708:src/display.c **** 	  *bp++ = '?';
 9757              		.loc 1 2708 4 view .LVU3118
2709:src/display.c **** 	  if (yreg_enabled) {
 9758              		.loc 1 2709 4 view .LVU3119
2708:src/display.c **** 	  *bp++ = '?';
 9759              		.loc 1 2708 10 is_stmt 0 view .LVU3120
 9760 03d0 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2710:src/display.c **** 	    set_status_top(buf);
 9761              		.loc 1 2710 4 is_stmt 1 view .LVU3121
2710:src/display.c **** 	    set_status_top(buf);
 9762              		.loc 1 2710 7 is_stmt 0 view .LVU3122
 9763 03d4 BAF1000F 		cmp	r10, #0
 9764 03d8 7FF433AF 		bne	.L1219
 9765              	.LVL1087:
 9766              	.L949:
2650:src/display.c **** 	  }
 9767              		.loc 1 2650 6 is_stmt 1 view .LVU3123
 9768 03dc 1EA8     		add	r0, sp, #120
 9769 03de FFF7FEFF 		bl	set_status
 9770              	.LVL1088:
ARM GAS  /tmp/ccDDbRKQ.s 			page 287


2858:src/display.c ****       nostk:
 9771              		.loc 1 2858 2 view .LVU3124
 9772 03e2 884B     		ldr	r3, .L1273+16
 9773 03e4 0093     		str	r3, [sp]
 9774 03e6 DFF84482 		ldr	r8, .L1273+56
 9775 03ea FFF7FEFF 		bl	show_stack
 9776              	.LVL1089:
2860:src/display.c **** 	if (!skip) {
 9777              		.loc 1 2860 2 view .LVU3125
 9778 03ee FFF7FEFF 		bl	show_flags
 9779              	.LVL1090:
2861:src/display.c **** 	  if (State2.runmode) {
 9780              		.loc 1 2861 2 view .LVU3126
 9781 03f2 47E6     		b	.L946
 9782              	.LVL1091:
 9783              	.L1234:
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9784              		.loc 1 2868 34 is_stmt 0 discriminator 2 view .LVU3127
 9785 03f4 1207     		lsls	r2, r2, #28
 9786 03f6 3FF59CAE 		bmi	.L1036
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9787              		.loc 1 2868 49 discriminator 3 view .LVU3128
 9788 03fa 93F8EBA7 		ldrb	r10, [r3, #2027]	@ zero_extendqisi2
2868:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9789              		.loc 1 2868 37 discriminator 3 view .LVU3129
 9790 03fe 1AF0080A 		ands	r10, r10, #8
 9791 0402 7FF496AE 		bne	.L1036
2869:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9792              		.loc 1 2869 5 is_stmt 1 view .LVU3130
2869:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9793              		.loc 1 2869 8 is_stmt 0 view .LVU3131
 9794 0406 1EF0100F 		tst	lr, #16
 9795 040a 40F09182 		bne	.L1239
 9796              	.L1037:
2873:src/display.c **** 		    State2.hms = 0;
 9797              		.loc 1 2873 5 is_stmt 1 view .LVU3132
2873:src/display.c **** 		    State2.hms = 0;
 9798              		.loc 1 2873 9 is_stmt 0 view .LVU3133
 9799 040e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2873:src/display.c **** 		    State2.hms = 0;
 9800              		.loc 1 2873 8 view .LVU3134
 9801 0410 13F00101 		ands	r1, r3, #1
 9802 0414 00F07881 		beq	.L1038
2874:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9803              		.loc 1 2874 7 is_stmt 1 view .LVU3135
2874:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9804              		.loc 1 2874 18 is_stmt 0 view .LVU3136
 9805 0418 6FF30003 		bfc	r3, #0, #1
2875:src/display.c **** 		    State2.hms = 1;
 9806              		.loc 1 2875 7 view .LVU3137
 9807 041c 0021     		movs	r1, #0
 9808 041e 6E20     		movs	r0, #110
2874:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9809              		.loc 1 2874 18 view .LVU3138
 9810 0420 E375     		strb	r3, [r4, #23]
2875:src/display.c **** 		    State2.hms = 1;
 9811              		.loc 1 2875 7 is_stmt 1 view .LVU3139
ARM GAS  /tmp/ccDDbRKQ.s 			page 288


 9812 0422 FFF7FEFF 		bl	format_reg
 9813              	.LVL1092:
2876:src/display.c **** 		  }
 9814              		.loc 1 2876 7 view .LVU3140
2876:src/display.c **** 		  }
 9815              		.loc 1 2876 18 is_stmt 0 view .LVU3141
 9816 0426 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2898:src/display.c **** 	      goto finish;
 9817              		.loc 1 2898 9 view .LVU3142
 9818 0428 D9F80020 		ldr	r2, [r9]
2876:src/display.c **** 		  }
 9819              		.loc 1 2876 18 view .LVU3143
 9820 042c 43F00103 		orr	r3, r3, #1
 9821 0430 E375     		strb	r3, [r4, #23]
 9822              	.LVL1093:
2898:src/display.c **** 	      goto finish;
 9823              		.loc 1 2898 6 is_stmt 1 view .LVU3144
2898:src/display.c **** 	      goto finish;
 9824              		.loc 1 2898 9 is_stmt 0 view .LVU3145
 9825 0432 002A     		cmp	r2, #0
 9826 0434 3FF42FAF 		beq	.L1039
 9827 0438 B3E6     		b	.L1040
 9828              	.LVL1094:
 9829              	.L1233:
 9830              	.LBB615:
2907:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9831              		.loc 1 2907 6 discriminator 1 view .LVU3146
 9832 043a 7749     		ldr	r1, .L1273+36
 9833 043c 09EB8903 		add	r3, r9, r9, lsl #2
 9834 0440 1944     		add	r1, r1, r3
 9835 0442 3DE6     		b	.L1075
 9836              	.LVL1095:
 9837              	.L1065:
2907:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9838              		.loc 1 2907 6 discriminator 1 view .LVU3147
 9839              	.LBE615:
 9840              	.LBB616:
 9841              	.LBB603:
1358:src/display.c **** 	    gotdot = i;
 9842              		.loc 1 1358 4 is_stmt 1 view .LVU3148
1358:src/display.c **** 	    gotdot = i;
 9843              		.loc 1 1358 7 is_stmt 0 view .LVU3149
 9844 0444 BBF1FF3F 		cmp	fp, #-1
 9845 0448 08BF     		it	eq
 9846 044a D346     		moveq	fp, r10
 9847              	.LVL1096:
1360:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9848              		.loc 1 1360 4 is_stmt 1 view .LVU3150
1361:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9849              		.loc 1 1361 6 view .LVU3151
1361:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9850              		.loc 1 1361 13 is_stmt 0 view .LVU3152
 9851 044c ABF11B0B 		sub	fp, fp, #27
 9852              	.LVL1097:
1362:src/display.c **** 	      break;
 9853              		.loc 1 1362 6 is_stmt 1 view .LVU3153
1362:src/display.c **** 	      break;
ARM GAS  /tmp/ccDDbRKQ.s 			page 289


 9854              		.loc 1 1362 9 is_stmt 0 view .LVU3154
 9855 0450 BBF1000F 		cmp	fp, #0
 9856 0454 13DD     		ble	.L1050
1362:src/display.c **** 	      break;
 9857              		.loc 1 1362 9 view .LVU3155
 9858 0456 0296     		str	r6, [sp, #8]
 9859 0458 5E46     		mov	r6, fp
 9860              	.LVL1098:
1362:src/display.c **** 	      break;
 9861              		.loc 1 1362 9 view .LVU3156
 9862 045a C346     		mov	fp, r8
 9863              	.LVL1099:
1362:src/display.c **** 	      break;
 9864              		.loc 1 1362 9 view .LVU3157
 9865 045c A846     		mov	r8, r5
 9866 045e 019D     		ldr	r5, [sp, #4]
 9867              	.LVL1100:
 9868              	.L1069:
1365:src/display.c **** 	      break;
 9869              		.loc 1 1365 6 is_stmt 1 view .LVU3158
1368:src/display.c **** 	  }
 9870              		.loc 1 1368 6 view .LVU3159
 9871              	.LBB584:
 9872              	.LBB585:
 301:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9873              		.loc 1 301 3 view .LVU3160
 9874 0460 3046     		mov	r0, r6
 9875              	.LBE585:
 9876              	.LBE584:
1365:src/display.c **** 	      break;
 9877              		.loc 1 1365 9 is_stmt 0 view .LVU3161
 9878 0462 0DB1     		cbz	r5, .L1070
 9879              	.LVL1101:
1365:src/display.c **** 	      break;
 9880              		.loc 1 1365 27 view .LVU3162
 9881 0464 092E     		cmp	r6, #9
 9882 0466 07D0     		beq	.L1216
 9883              	.L1070:
1368:src/display.c **** 	  }
 9884              		.loc 1 1368 6 view .LVU3163
 9885 0468 6C4B     		ldr	r3, .L1273+40
 9886 046a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9887              	.LVL1102:
 9888              	.LBB587:
 9889              	.LBI584:
 298:src/display.c ****   if (sep == SEP_NONE)
 9890              		.loc 1 298 14 is_stmt 1 view .LVU3164
 9891              	.LBB586:
 299:src/display.c ****     return res;
 9892              		.loc 1 299 3 view .LVU3165
 299:src/display.c ****     return res;
 9893              		.loc 1 299 6 is_stmt 0 view .LVU3166
 9894 046c 09B1     		cbz	r1, .L1071
 9895 046e FFF7FEFF 		bl	set_separator.part.0
 9896              	.LVL1103:
 9897              	.L1071:
 299:src/display.c ****     return res;
ARM GAS  /tmp/ccDDbRKQ.s 			page 290


 9898              		.loc 1 299 6 view .LVU3167
 9899              	.LBE586:
 9900              	.LBE587:
1360:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9901              		.loc 1 1360 4 is_stmt 1 view .LVU3168
1361:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9902              		.loc 1 1361 6 view .LVU3169
1361:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9903              		.loc 1 1361 13 is_stmt 0 view .LVU3170
 9904 0472 1B3E     		subs	r6, r6, #27
 9905              	.LVL1104:
1362:src/display.c **** 	      break;
 9906              		.loc 1 1362 6 is_stmt 1 view .LVU3171
1362:src/display.c **** 	      break;
 9907              		.loc 1 1362 9 is_stmt 0 view .LVU3172
 9908 0474 002E     		cmp	r6, #0
 9909 0476 F3DC     		bgt	.L1069
 9910              	.L1216:
1362:src/display.c **** 	      break;
 9911              		.loc 1 1362 9 view .LVU3173
 9912 0478 029E     		ldr	r6, [sp, #8]
 9913              	.LVL1105:
1362:src/display.c **** 	      break;
 9914              		.loc 1 1362 9 view .LVU3174
 9915 047a 4546     		mov	r5, r8
 9916 047c D846     		mov	r8, fp
 9917              	.LVL1106:
 9918              	.L1050:
1372:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9919              		.loc 1 1372 4 is_stmt 1 view .LVU3175
1372:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9920              		.loc 1 1372 8 is_stmt 0 view .LVU3176
 9921 047e 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1372:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9922              		.loc 1 1372 7 view .LVU3177
 9923 0480 A3F14401 		sub	r1, r3, #68
 9924 0484 0129     		cmp	r1, #1
 9925 0486 40F20781 		bls	.L1240
 9926              	.L1072:
 9927              	.LVL1107:
1372:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9928              		.loc 1 1372 7 view .LVU3178
 9929              	.LBE603:
 9930              	.LBE616:
2898:src/display.c **** 	      goto finish;
 9931              		.loc 1 2898 6 is_stmt 1 view .LVU3179
2898:src/display.c **** 	      goto finish;
 9932              		.loc 1 2898 9 is_stmt 0 view .LVU3180
 9933 048a D9F80030 		ldr	r3, [r9]
 9934 048e 002B     		cmp	r3, #0
 9935 0490 3FF400AF 		beq	.L1227
 9936              	.L1140:
 9937 0494 5A4D     		ldr	r5, .L1273+12
 9938 0496 84E6     		b	.L1040
 9939              	.LVL1108:
 9940              	.L1237:
2654:src/display.c **** 	  if (State2.numdigit > 0)
ARM GAS  /tmp/ccDDbRKQ.s 			page 291


 9941              		.loc 1 2654 4 is_stmt 1 view .LVU3181
2654:src/display.c **** 	  if (State2.numdigit > 0)
 9942              		.loc 1 2654 9 is_stmt 0 view .LVU3182
 9943 0498 2E22     		movs	r2, #46
 9944 049a 6149     		ldr	r1, .L1273+44
 9945 049c 1EA8     		add	r0, sp, #120
 9946              	.LVL1109:
2654:src/display.c **** 	  if (State2.numdigit > 0)
 9947              		.loc 1 2654 9 view .LVU3183
 9948 049e FFF7FEFF 		bl	scopy_char
 9949              	.LVL1110:
2655:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9950              		.loc 1 2655 14 view .LVU3184
 9951 04a2 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2654:src/display.c **** 	  if (State2.numdigit > 0)
 9952              		.loc 1 2654 9 view .LVU3185
 9953 04a4 0346     		mov	r3, r0
 9954              	.LVL1111:
2655:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9955              		.loc 1 2655 4 is_stmt 1 view .LVU3186
2655:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9956              		.loc 1 2655 7 is_stmt 0 view .LVU3187
 9957 04a6 002A     		cmp	r2, #0
 9958 04a8 40F0E980 		bne	.L1241
 9959              	.L952:
2658:src/display.c **** 	  if (yreg_enabled) {
 9960              		.loc 1 2658 4 is_stmt 1 view .LVU3188
 9961              	.LVL1112:
2658:src/display.c **** 	  if (yreg_enabled) {
 9962              		.loc 1 2658 10 is_stmt 0 view .LVU3189
 9963 04ac 5F22     		movs	r2, #95
 9964 04ae 1A70     		strb	r2, [r3]
2659:src/display.c **** 	    set_status_top(buf);
 9965              		.loc 1 2659 4 is_stmt 1 view .LVU3190
2659:src/display.c **** 	    set_status_top(buf);
 9966              		.loc 1 2659 7 is_stmt 0 view .LVU3191
 9967 04b0 BAF1000F 		cmp	r10, #0
 9968 04b4 7FF4C5AE 		bne	.L1219
2659:src/display.c **** 	    set_status_top(buf);
 9969              		.loc 1 2659 7 view .LVU3192
 9970 04b8 90E7     		b	.L949
 9971              	.LVL1113:
 9972              	.L1046:
 9973              	.LBB617:
 9974              	.LBB604:
1267:src/display.c **** 
 9975              		.loc 1 1267 2 is_stmt 1 view .LVU3193
 9976 04ba FFF7FEFF 		bl	set_separator_decimal_modes
 9977              	.LVL1114:
1269:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9978              		.loc 1 1269 2 view .LVU3194
1271:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9979              		.loc 1 1271 2 view .LVU3195
1271:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9980              		.loc 1 1271 5 is_stmt 0 view .LVU3196
 9981 04be A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9982              	.LBB588:
ARM GAS  /tmp/ccDDbRKQ.s 			page 292


1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9983              		.loc 1 1278 15 view .LVU3197
 9984 04c0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9985              	.LBE588:
1271:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9986              		.loc 1 1271 5 view .LVU3198
 9987 04c2 012B     		cmp	r3, #1
 9988 04c4 40F2E080 		bls	.L1049
 9989              	.LVL1115:
 9990              	.LBB589:
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9991              		.loc 1 1278 14 is_stmt 1 view .LVU3199
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9992              		.loc 1 1278 4 is_stmt 0 view .LVU3200
 9993 04c8 0029     		cmp	r1, #0
 9994 04ca 00F02B82 		beq	.L1090
1275:src/display.c **** 	  int j;
 9995              		.loc 1 1275 10 view .LVU3201
 9996 04ce 5346     		mov	r3, r10
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9997              		.loc 1 1278 10 view .LVU3202
 9998 04d0 5246     		mov	r2, r10
 9999 04d2 AC46     		mov	ip, r5
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10000              		.loc 1 1278 4 view .LVU3203
 10001 04d4 0846     		mov	r0, r1
 10002              	.LBE589:
1246:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10003              		.loc 1 1246 11 view .LVU3204
 10004 04d6 4FF0FF3E 		mov	lr, #-1
 10005 04da 04E0     		b	.L1052
 10006              	.LVL1116:
 10007              	.L1051:
 10008              	.LBB590:
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10009              		.loc 1 1278 28 is_stmt 1 view .LVU3205
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10010              		.loc 1 1278 15 is_stmt 0 view .LVU3206
 10011 04dc 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10012              		.loc 1 1278 29 view .LVU3207
 10013 04e0 0132     		adds	r2, r2, #1
 10014              	.LVL1117:
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10015              		.loc 1 1278 14 is_stmt 1 view .LVU3208
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10016              		.loc 1 1278 4 is_stmt 0 view .LVU3209
 10017 04e2 0028     		cmp	r0, #0
 10018 04e4 38D0     		beq	.L1242
 10019              	.LVL1118:
 10020              	.L1052:
1279:src/display.c **** 	      gotdot = j;
 10021              		.loc 1 1279 6 is_stmt 1 view .LVU3210
1279:src/display.c **** 	      gotdot = j;
 10022              		.loc 1 1279 9 is_stmt 0 view .LVU3211
 10023 04e6 2E28     		cmp	r0, #46
 10024 04e8 F8D1     		bne	.L1051
ARM GAS  /tmp/ccDDbRKQ.s 			page 293


1280:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10025              		.loc 1 1280 8 is_stmt 1 view .LVU3212
 10026              	.LVL1119:
1282:src/display.c **** #  endif
 10027              		.loc 1 1282 8 view .LVU3213
1279:src/display.c **** 	      gotdot = j;
 10028              		.loc 1 1279 22 is_stmt 0 view .LVU3214
 10029 04ea BEF1FF3F 		cmp	lr, #-1
 10030 04ee F5D1     		bne	.L1051
1282:src/display.c **** #  endif
 10031              		.loc 1 1282 29 view .LVU3215
 10032 04f0 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10033 04f4 A3F12E03 		sub	r3, #46
 10034 04f8 B3FA83F3 		clz	r3, r3
1282:src/display.c **** #  endif
 10035              		.loc 1 1282 19 view .LVU3216
 10036 04fc 9646     		mov	lr, r2
1282:src/display.c **** #  endif
 10037              		.loc 1 1282 29 view .LVU3217
 10038 04fe 5B09     		lsrs	r3, r3, #5
 10039              	.LVL1120:
1282:src/display.c **** #  endif
 10040              		.loc 1 1282 29 view .LVU3218
 10041 0500 ECE7     		b	.L1051
 10042              	.LVL1121:
 10043              	.L955:
1282:src/display.c **** #  endif
 10044              		.loc 1 1282 29 view .LVU3219
 10045              	.LBE590:
 10046              	.LBE604:
 10047              	.LBE617:
2671:src/display.c **** #endif
 10048              		.loc 1 2671 6 is_stmt 1 view .LVU3220
2671:src/display.c **** #endif
 10049              		.loc 1 2671 11 is_stmt 0 view .LVU3221
 10050 0502 4849     		ldr	r1, .L1273+48
 10051 0504 1EA8     		add	r0, sp, #120
 10052              	.LVL1122:
2671:src/display.c **** #endif
 10053              		.loc 1 2671 11 view .LVU3222
 10054 0506 FFF7FEFF 		bl	scopy
 10055              	.LVL1123:
2671:src/display.c **** #endif
 10056              		.loc 1 2671 11 view .LVU3223
 10057 050a E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10058 050c 7CE6     		b	.L956
 10059              	.L958:
2678:src/display.c **** 	    *bp++ = '\021';
 10060              		.loc 1 2678 11 is_stmt 1 view .LVU3224
2678:src/display.c **** 	    *bp++ = '\021';
 10061              		.loc 1 2678 14 is_stmt 0 view .LVU3225
 10062 050e 012D     		cmp	r5, #1
 10063 0510 00F0E380 		beq	.L1243
2685:src/display.c **** 	      *bp++ = '.';
 10064              		.loc 1 2685 6 is_stmt 1 view .LVU3226
2685:src/display.c **** 	      *bp++ = '.';
 10065              		.loc 1 2685 10 is_stmt 0 view .LVU3227
ARM GAS  /tmp/ccDDbRKQ.s 			page 294


 10066 0514 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2685:src/display.c **** 	      *bp++ = '.';
 10067              		.loc 1 2685 9 view .LVU3228
 10068 0516 DD07     		lsls	r5, r3, #31
2686:src/display.c **** 	    if (State2.numdigit > 0) {
 10069              		.loc 1 2686 8 is_stmt 1 view .LVU3229
 10070              	.LVL1124:
2686:src/display.c **** 	    if (State2.numdigit > 0) {
 10071              		.loc 1 2686 14 is_stmt 0 view .LVU3230
 10072 0518 44BF     		itt	mi
 10073 051a 2E23     		movmi	r3, #46
 10074 051c 00F8013B 		strbmi	r3, [r0], #1
 10075              	.LVL1125:
2687:src/display.c **** 	      if (State2.shuffle)
 10076              		.loc 1 2687 6 is_stmt 1 view .LVU3231
2687:src/display.c **** 	      if (State2.shuffle)
 10077              		.loc 1 2687 16 is_stmt 0 view .LVU3232
 10078 0520 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2687:src/display.c **** 	      if (State2.shuffle)
 10079              		.loc 1 2687 9 view .LVU3233
 10080 0522 8AB1     		cbz	r2, .L962
2688:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10081              		.loc 1 2688 8 is_stmt 1 view .LVU3234
2688:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10082              		.loc 1 2688 12 is_stmt 0 view .LVU3235
 10083 0524 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2688:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10084              		.loc 1 2688 11 view .LVU3236
 10085 0526 9907     		lsls	r1, r3, #30
 10086 0528 40F1FE81 		bpl	.L963
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10087              		.loc 1 2689 3 is_stmt 1 view .LVU3237
 10088              	.LVL1126:
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10089              		.loc 1 2689 17 is_stmt 0 view .LVU3238
 10090 052c 2289     		ldrh	r2, [r4, #8]
 10091              	.LVL1127:
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10092              		.loc 1 2689 34 is_stmt 1 view .LVU3239
 10093 052e 3E49     		ldr	r1, .L1273+52
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10094              		.loc 1 2689 10 is_stmt 0 view .LVU3240
 10095 0530 0023     		movs	r3, #0
 10096              	.LVL1128:
 10097              	.L964:
2690:src/display.c **** 	      else
 10098              		.loc 1 2690 5 is_stmt 1 discriminator 3 view .LVU3241
2690:src/display.c **** 	      else
 10099              		.loc 1 2690 24 is_stmt 0 discriminator 3 view .LVU3242
 10100 0532 02F00305 		and	r5, r2, #3
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10101              		.loc 1 2689 54 discriminator 3 view .LVU3243
 10102 0536 0133     		adds	r3, r3, #1
 10103              	.LVL1129:
2690:src/display.c **** 	      else
 10104              		.loc 1 2690 11 discriminator 3 view .LVU3244
 10105 0538 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
ARM GAS  /tmp/ccDDbRKQ.s 			page 295


 10106 053a 00F8015B 		strb	r5, [r0], #1
 10107              	.LVL1130:
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10108              		.loc 1 2689 53 is_stmt 1 discriminator 3 view .LVU3245
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10109              		.loc 1 2689 42 is_stmt 0 discriminator 3 view .LVU3246
 10110 053e E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10111              		.loc 1 2689 3 discriminator 3 view .LVU3247
 10112 0540 9D42     		cmp	r5, r3
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10113              		.loc 1 2689 60 discriminator 3 view .LVU3248
 10114 0542 4FEAA202 		asr	r2, r2, #2
 10115              	.LVL1131:
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10116              		.loc 1 2689 34 is_stmt 1 discriminator 3 view .LVU3249
2689:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10117              		.loc 1 2689 3 is_stmt 0 discriminator 3 view .LVU3250
 10118 0546 F4DC     		bgt	.L964
 10119              	.LVL1132:
 10120              	.L962:
2695:src/display.c **** 	  }
 10121              		.loc 1 2695 6 is_stmt 1 view .LVU3251
2695:src/display.c **** 	  }
 10122              		.loc 1 2695 12 is_stmt 0 view .LVU3252
 10123 0548 5F23     		movs	r3, #95
 10124 054a 0370     		strb	r3, [r0]
 10125              	.LVL1133:
2695:src/display.c **** 	  }
 10126              		.loc 1 2695 12 view .LVU3253
 10127 054c 75E6     		b	.L982
 10128              	.LVL1134:
 10129              	.L1238:
 10130              	.LBB618:
 10131              	.LBB605:
1256:src/display.c **** 	p++;
 10132              		.loc 1 1256 2 is_stmt 1 view .LVU3254
 10133              	.LBB591:
 10134              	.LBI591:
 234:src/display.c **** {
 10135              		.loc 1 234 13 view .LVU3255
 10136              	.LBB592:
 236:src/display.c **** }
 10137              		.loc 1 236 3 view .LVU3256
 10138 054e 8120     		movs	r0, #129
 10139              	.LVL1135:
 236:src/display.c **** }
 10140              		.loc 1 236 3 is_stmt 0 view .LVU3257
 10141 0550 FFF7FEFF 		bl	set_dot
 10142              	.LVL1136:
 10143              	.LBE592:
 10144              	.LBE591:
1257:src/display.c ****       }
 10145              		.loc 1 1257 2 is_stmt 1 view .LVU3258
1257:src/display.c ****       }
 10146              		.loc 1 1257 3 is_stmt 0 view .LVU3259
 10147 0554 0135     		adds	r5, r5, #1
ARM GAS  /tmp/ccDDbRKQ.s 			page 296


 10148              	.LVL1137:
1257:src/display.c ****       }
 10149              		.loc 1 1257 3 view .LVU3260
 10150 0556 81E6     		b	.L1045
 10151              	.LVL1138:
 10152              	.L1242:
 10153              	.LBB593:
1286:src/display.c **** 	  if (j > 0) {
 10154              		.loc 1 1286 4 is_stmt 1 view .LVU3261
1286:src/display.c **** 	  if (j > 0) {
 10155              		.loc 1 1286 24 is_stmt 0 view .LVU3262
 10156 0558 03F10C0C 		add	ip, r3, #12
1286:src/display.c **** 	  if (j > 0) {
 10157              		.loc 1 1286 6 view .LVU3263
 10158 055c A2EB0C02 		sub	r2, r2, ip
 10159              	.LVL1139:
1287:src/display.c **** 	    p += j + 1;
 10160              		.loc 1 1287 4 is_stmt 1 view .LVU3264
1287:src/display.c **** 	    p += j + 1;
 10161              		.loc 1 1287 7 is_stmt 0 view .LVU3265
 10162 0560 002A     		cmp	r2, #0
 10163 0562 40F3DA80 		ble	.L1091
1288:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10164              		.loc 1 1288 6 is_stmt 1 view .LVU3266
1288:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10165              		.loc 1 1288 8 is_stmt 0 view .LVU3267
 10166 0566 511C     		adds	r1, r2, #1
1290:src/display.c **** 	      gotdot = 0;
 10167              		.loc 1 1290 9 view .LVU3268
 10168 0568 7245     		cmp	r2, lr
1288:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10169              		.loc 1 1288 8 view .LVU3269
 10170 056a 0D44     		add	r5, r5, r1
 10171              	.LVL1140:
1289:src/display.c **** 	    if (gotdot <= j) {
 10172              		.loc 1 1289 6 is_stmt 1 view .LVU3270
1290:src/display.c **** 	      gotdot = 0;
 10173              		.loc 1 1290 6 view .LVU3271
1290:src/display.c **** 	      gotdot = 0;
 10174              		.loc 1 1290 9 is_stmt 0 view .LVU3272
 10175 056c C0F2BA80 		blt	.L1054
1291:src/display.c **** 	      if (double_dot)
 10176              		.loc 1 1291 8 is_stmt 1 view .LVU3273
 10177              	.LVL1141:
1292:src/display.c **** 		p++;
 10178              		.loc 1 1292 8 view .LVU3274
1292:src/display.c **** 		p++;
 10179              		.loc 1 1292 11 is_stmt 0 view .LVU3275
 10180 0570 002B     		cmp	r3, #0
 10181 0572 00F0F281 		beq	.L1092
1293:src/display.c **** 	    }
 10182              		.loc 1 1293 3 is_stmt 1 view .LVU3276
1293:src/display.c **** 	    }
 10183              		.loc 1 1293 4 is_stmt 0 view .LVU3277
 10184 0576 0135     		adds	r5, r5, #1
 10185              	.LVL1142:
1289:src/display.c **** 	    if (gotdot <= j) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 297


 10186              		.loc 1 1289 8 view .LVU3278
 10187 0578 4FF0090A 		mov	r10, #9
 10188              	.LVL1143:
 10189              	.L1055:
1302:src/display.c **** 	    overflow_to_left = 1;
 10190              		.loc 1 1302 6 is_stmt 1 view .LVU3279
 10191 057c 3C21     		movs	r1, #60
 10192              	.LVL1144:
1302:src/display.c **** 	    overflow_to_left = 1;
 10193              		.loc 1 1302 6 is_stmt 0 view .LVU3280
 10194 057e 0020     		movs	r0, #0
 10195 0580 FFF7FEFF 		bl	set_dig
 10196              	.LVL1145:
1303:src/display.c **** 	  }
 10197              		.loc 1 1303 6 is_stmt 1 view .LVU3281
1303:src/display.c **** 	  }
 10198              		.loc 1 1303 6 is_stmt 0 view .LVU3282
 10199 0584 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1303:src/display.c **** 	  }
 10200              		.loc 1 1303 6 view .LVU3283
 10201              	.LBE593:
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10202              		.loc 1 1309 9 is_stmt 1 view .LVU3284
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10203              		.loc 1 1309 2 is_stmt 0 view .LVU3285
 10204 0586 4FF0000B 		mov	fp, #0
 10205 058a 0029     		cmp	r1, #0
 10206 058c 3FF47DAF 		beq	.L1072
 10207              	.LVL1146:
 10208              	.L1082:
 10209              	.LBB594:
1303:src/display.c **** 	  }
 10210              		.loc 1 1303 23 view .LVU3286
 10211 0590 0123     		movs	r3, #1
 10212 0592 0193     		str	r3, [sp, #4]
 10213 0594 13E0     		b	.L1064
 10214              	.LVL1147:
 10215              	.L1244:
1303:src/display.c **** 	  }
 10216              		.loc 1 1303 23 view .LVU3287
 10217              	.LBE594:
1315:src/display.c **** 	      gotdot = i;
 10218              		.loc 1 1315 6 is_stmt 1 view .LVU3288
1315:src/display.c **** 	      gotdot = i;
 10219              		.loc 1 1315 9 is_stmt 0 view .LVU3289
 10220 0596 BBF1FF3F 		cmp	fp, #-1
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10221              		.loc 1 1319 9 view .LVU3290
 10222 059a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1315:src/display.c **** 	      gotdot = i;
 10223              		.loc 1 1315 9 view .LVU3291
 10224 059c 1DD0     		beq	.L1058
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10225              		.loc 1 1319 6 is_stmt 1 view .LVU3292
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10226              		.loc 1 1319 9 is_stmt 0 view .LVU3293
 10227 059e 2E2B     		cmp	r3, #46
ARM GAS  /tmp/ccDDbRKQ.s 			page 298


 10228 05a0 26D0     		beq	.L1081
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10229              		.loc 1 1319 25 view .LVU3294
 10230 05a2 DA45     		cmp	r10, fp
 10231 05a4 1BD0     		beq	.L1061
 10232              	.L1060:
1326:src/display.c **** 		i += segs_per_digit;
 10233              		.loc 1 1326 3 is_stmt 1 view .LVU3295
 10234 05a6 5046     		mov	r0, r10
 10235 05a8 2F21     		movs	r1, #47
 10236 05aa FFF7FEFF 		bl	set_dig
 10237              	.LVL1148:
1327:src/display.c **** 	      }
 10238              		.loc 1 1327 3 view .LVU3296
1327:src/display.c **** 	      }
 10239              		.loc 1 1327 5 is_stmt 0 view .LVU3297
 10240 05ae 0AF1090A 		add	r10, r10, #9
 10241              	.LVL1149:
1327:src/display.c **** 	      }
 10242              		.loc 1 1327 5 view .LVU3298
 10243 05b2 2B46     		mov	r3, r5
 10244              	.LVL1150:
 10245              	.L1062:
1313:src/display.c **** 	  if (*p == '.') {
 10246              		.loc 1 1313 11 is_stmt 1 view .LVU3299
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10247              		.loc 1 1309 9 is_stmt 0 view .LVU3300
 10248 05b4 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1313:src/display.c **** 	  if (*p == '.') {
 10249              		.loc 1 1313 12 view .LVU3301
 10250 05b6 0135     		adds	r5, r5, #1
 10251              	.LVL1151:
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10252              		.loc 1 1309 9 is_stmt 1 view .LVU3302
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10253              		.loc 1 1309 2 is_stmt 0 view .LVU3303
 10254 05b8 0029     		cmp	r1, #0
 10255 05ba 3FF443AF 		beq	.L1065
 10256              	.LVL1152:
 10257              	.L1064:
1311:src/display.c **** #endif
 10258              		.loc 1 1311 9 view .LVU3304
 10259 05be A1F14403 		sub	r3, r1, #68
 10260 05c2 012B     		cmp	r3, #1
 10261 05c4 7FF63EAF 		bls	.L1065
1314:src/display.c **** 	    if (gotdot < 0)
 10262              		.loc 1 1314 4 is_stmt 1 view .LVU3305
1314:src/display.c **** 	    if (gotdot < 0)
 10263              		.loc 1 1314 7 is_stmt 0 view .LVU3306
 10264 05c8 2E29     		cmp	r1, #46
 10265 05ca E4D0     		beq	.L1244
1348:src/display.c **** 	      i += segs_per_digit;
 10266              		.loc 1 1348 8 is_stmt 1 view .LVU3307
 10267 05cc 5046     		mov	r0, r10
 10268 05ce FFF7FEFF 		bl	set_dig
 10269              	.LVL1153:
1349:src/display.c **** 	    }
ARM GAS  /tmp/ccDDbRKQ.s 			page 299


 10270              		.loc 1 1349 8 view .LVU3308
1349:src/display.c **** 	    }
 10271              		.loc 1 1349 10 is_stmt 0 view .LVU3309
 10272 05d2 0AF1090A 		add	r10, r10, #9
 10273              	.LVL1154:
1349:src/display.c **** 	    }
 10274              		.loc 1 1349 10 view .LVU3310
 10275 05d6 2B46     		mov	r3, r5
 10276 05d8 ECE7     		b	.L1062
 10277              	.L1058:
1316:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10278              		.loc 1 1316 8 is_stmt 1 view .LVU3311
 10279              	.LVL1155:
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10280              		.loc 1 1319 6 view .LVU3312
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10281              		.loc 1 1319 9 is_stmt 0 view .LVU3313
 10282 05da 2E2B     		cmp	r3, #46
 10283 05dc 07D0     		beq	.L1245
 10284              	.LVL1156:
 10285              	.L1061:
1330:src/display.c **** 		  i += segs_per_digit;
 10286              		.loc 1 1330 3 is_stmt 1 view .LVU3314
1330:src/display.c **** 		  i += segs_per_digit;
 10287              		.loc 1 1330 6 is_stmt 0 view .LVU3315
 10288 05de A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10289 05e0 012B     		cmp	r3, #1
 10290 05e2 71D9     		bls	.L1063
1331:src/display.c **** 		}
 10291              		.loc 1 1331 5 is_stmt 1 view .LVU3316
 10292              	.LVL1157:
1331:src/display.c **** 		}
 10293              		.loc 1 1331 5 is_stmt 0 view .LVU3317
 10294 05e4 D346     		mov	fp, r10
 10295 05e6 2B46     		mov	r3, r5
1331:src/display.c **** 		}
 10296              		.loc 1 1331 7 view .LVU3318
 10297 05e8 0AF1090A 		add	r10, r10, #9
 10298              	.LVL1158:
1331:src/display.c **** 		}
 10299              		.loc 1 1331 7 view .LVU3319
 10300 05ec E2E7     		b	.L1062
 10301              	.LVL1159:
 10302              	.L1245:
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10303              		.loc 1 1319 9 view .LVU3320
 10304 05ee D346     		mov	fp, r10
 10305              	.LVL1160:
 10306              	.L1081:
1320:src/display.c **** 		p++;
 10307              		.loc 1 1320 8 is_stmt 1 view .LVU3321
1321:src/display.c **** 	      }
 10308              		.loc 1 1321 3 view .LVU3322
1321:src/display.c **** 	      }
 10309              		.loc 1 1321 4 is_stmt 0 view .LVU3323
 10310 05f0 0135     		adds	r5, r5, #1
 10311              	.LVL1161:
ARM GAS  /tmp/ccDDbRKQ.s 			page 300


1321:src/display.c **** 	      }
 10312              		.loc 1 1321 4 view .LVU3324
 10313 05f2 D8E7     		b	.L1060
 10314              	.L1274:
 10315              		.align	2
 10316              	.L1273:
 10317 05f4 0C000000 		.word	.LANCHOR14+12
 10318 05f8 08000000 		.word	.LC25
 10319 05fc 00000000 		.word	.LANCHOR17
 10320 0600 00000000 		.word	ShowRegister
 10321 0604 00000000 		.word	DispPlot
 10322 0608 8C000000 		.word	.LC42
 10323 060c 00000000 		.word	.LANCHOR18
 10324 0610 18000000 		.word	.LC26
 10325 0614 94000000 		.word	.LC29
 10326 0618 00000000 		.word	.LANCHOR19
 10327 061c 00000000 		.word	.LANCHOR0
 10328 0620 56040000 		.word	argcmds+1110
 10329 0624 1C000000 		.word	.LC27
 10330 0628 9C000000 		.word	.LC28
 10331 062c 00000000 		.word	DispMsg
 10332              	.LVL1162:
 10333              	.L965:
1321:src/display.c **** 	      }
 10334              		.loc 1 1321 4 view .LVU3325
 10335              	.LBE605:
 10336              	.LBE618:
2718:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10337              		.loc 1 2718 9 is_stmt 1 view .LVU3326
2718:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10338              		.loc 1 2718 12 is_stmt 0 view .LVU3327
 10339 0630 019A     		ldr	r2, [sp, #4]
 10340 0632 002A     		cmp	r2, #0
 10341 0634 76D1     		bne	.L1246
2773:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10342              		.loc 1 2773 9 is_stmt 1 view .LVU3328
2773:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10343              		.loc 1 2773 12 is_stmt 0 view .LVU3329
 10344 0636 1B07     		lsls	r3, r3, #28
 10345 0638 00F1DA80 		bmi	.L1247
2788:src/display.c **** 	  show_status();
 10346              		.loc 1 2788 9 is_stmt 1 view .LVU3330
2788:src/display.c **** 	  show_status();
 10347              		.loc 1 2788 19 is_stmt 0 view .LVU3331
 10348 063c 94F80C80 		ldrb	r8, [r4, #12]	@ zero_extendqisi2
2788:src/display.c **** 	  show_status();
 10349              		.loc 1 2788 12 view .LVU3332
 10350 0640 B8F1000F 		cmp	r8, #0
 10351 0644 40F00881 		bne	.L1248
2791:src/display.c **** 	  show_label();
 10352              		.loc 1 2791 9 is_stmt 1 view .LVU3333
2791:src/display.c **** 	  show_label();
 10353              		.loc 1 2791 13 is_stmt 0 view .LVU3334
 10354 0648 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2791:src/display.c **** 	  show_label();
 10355              		.loc 1 2791 12 view .LVU3335
 10356 064a 5A07     		lsls	r2, r3, #29
ARM GAS  /tmp/ccDDbRKQ.s 			page 301


 10357 064c 00F1E680 		bmi	.L1249
2794:src/display.c **** 	  show_registers();
 10358              		.loc 1 2794 9 is_stmt 1 view .LVU3336
2794:src/display.c **** 	  show_registers();
 10359              		.loc 1 2794 12 is_stmt 0 view .LVU3337
 10360 0650 1807     		lsls	r0, r3, #28
 10361 0652 00F1FF82 		bmi	.L1250
2804:src/display.c **** 	  if (DispMsg) { 
 10362              		.loc 1 2804 9 is_stmt 1 view .LVU3338
2804:src/display.c **** 	  if (DispMsg) { 
 10363              		.loc 1 2804 12 is_stmt 0 view .LVU3339
 10364 0656 4806     		lsls	r0, r1, #25
 10365 0658 40F12C82 		bpl	.L1016
2805:src/display.c **** 	    set_status(DispMsg);
 10366              		.loc 1 2805 4 is_stmt 1 view .LVU3340
2805:src/display.c **** 	    set_status(DispMsg);
 10367              		.loc 1 2805 8 is_stmt 0 view .LVU3341
 10368 065c DFF84083 		ldr	r8, .L1275+28
 10369 0660 D8F80020 		ldr	r2, [r8]
2805:src/display.c **** 	    set_status(DispMsg);
 10370              		.loc 1 2805 7 view .LVU3342
 10371 0664 002A     		cmp	r2, #0
 10372 0666 00F07B81 		beq	.L1017
2806:src/display.c **** 	  } else if (DispPlot) {
 10373              		.loc 1 2806 6 is_stmt 1 view .LVU3343
 10374 066a 1046     		mov	r0, r2
 10375 066c FFF7FEFF 		bl	set_status
 10376              	.LVL1163:
2858:src/display.c ****       nostk:
 10377              		.loc 1 2858 2 view .LVU3344
 10378 0670 C44B     		ldr	r3, .L1275
 10379 0672 0093     		str	r3, [sp]
 10380 0674 FFF7FEFF 		bl	show_stack
 10381              	.LVL1164:
2860:src/display.c **** 	if (!skip) {
 10382              		.loc 1 2860 2 view .LVU3345
 10383 0678 FFF7FEFF 		bl	show_flags
 10384              	.LVL1165:
2861:src/display.c **** 	  if (State2.runmode) {
 10385              		.loc 1 2861 2 view .LVU3346
 10386 067c 02E5     		b	.L946
 10387              	.LVL1166:
 10388              	.L1241:
2656:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10389              		.loc 1 2656 6 view .LVU3347
2656:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10390              		.loc 1 2656 11 is_stmt 0 view .LVU3348
 10391 067e 2189     		ldrh	r1, [r4, #8]
 10392 0680 FFF7FEFF 		bl	num_arg_0
 10393              	.LVL1167:
2656:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10394              		.loc 1 2656 11 view .LVU3349
 10395 0684 0346     		mov	r3, r0
 10396              	.LVL1168:
2656:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10397              		.loc 1 2656 11 view .LVU3350
 10398 0686 11E7     		b	.L952
ARM GAS  /tmp/ccDDbRKQ.s 			page 302


 10399              	.LVL1169:
 10400              	.L1049:
 10401              	.LBB619:
 10402              	.LBB606:
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10403              		.loc 1 1309 9 is_stmt 1 view .LVU3351
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10404              		.loc 1 1309 2 is_stmt 0 view .LVU3352
 10405 0688 0029     		cmp	r1, #0
 10406 068a 00F04B81 		beq	.L1090
1252:src/display.c **** #endif
 10407              		.loc 1 1252 11 view .LVU3353
 10408 068e CDF804A0 		str	r10, [sp, #4]
1246:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10409              		.loc 1 1246 11 view .LVU3354
 10410 0692 4FF0FF3B 		mov	fp, #-1
 10411              	.LVL1170:
1246:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10412              		.loc 1 1246 11 view .LVU3355
 10413 0696 92E7     		b	.L1064
 10414              	.LVL1171:
 10415              	.L1240:
 10416              	.LBB595:
1376:src/display.c **** #  endif
 10417              		.loc 1 1376 6 is_stmt 1 view .LVU3356
1379:src/display.c **** 	      flags |= 2;
 10418              		.loc 1 1379 6 view .LVU3357
1380:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10419              		.loc 1 1380 14 is_stmt 0 view .LVU3358
 10420 0698 442B     		cmp	r3, #68
 10421 069a 14BF     		ite	ne
 10422 069c 4FF00C0B 		movne	fp, #12
 10423 06a0 4FF00E0B 		moveq	fp, #14
 10424              	.LVL1172:
1381:src/display.c **** 	      flags |= 16;
 10425              		.loc 1 1381 6 is_stmt 1 view .LVU3359
1381:src/display.c **** 	      flags |= 16;
 10426              		.loc 1 1381 9 is_stmt 0 view .LVU3360
 10427 06a4 BAF15A0F 		cmp	r10, #90
1382:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10428              		.loc 1 1382 8 is_stmt 1 view .LVU3361
1382:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10429              		.loc 1 1382 14 is_stmt 0 view .LVU3362
 10430 06a8 C8BF     		it	gt
 10431 06aa 4BF0100B 		orrgt	fp, fp, #16
 10432              	.LVL1173:
1383:src/display.c **** 	  }
 10433              		.loc 1 1383 6 is_stmt 1 view .LVU3363
 10434 06ae 681C     		adds	r0, r5, #1
 10435 06b0 FFF7FEFF 		bl	s_to_i
 10436              	.LVL1174:
 10437 06b4 5946     		mov	r1, fp
 10438 06b6 0022     		movs	r2, #0
 10439 06b8 FFF7FEFF 		bl	set_exp
 10440              	.LVL1175:
1383:src/display.c **** 	  }
 10441              		.loc 1 1383 6 is_stmt 0 view .LVU3364
ARM GAS  /tmp/ccDDbRKQ.s 			page 303


 10442              	.LBE595:
 10443              	.LBE606:
 10444              	.LBE619:
2898:src/display.c **** 	      goto finish;
 10445              		.loc 1 2898 6 is_stmt 1 view .LVU3365
2898:src/display.c **** 	      goto finish;
 10446              		.loc 1 2898 9 is_stmt 0 view .LVU3366
 10447 06bc D9F80030 		ldr	r3, [r9]
 10448 06c0 002B     		cmp	r3, #0
 10449 06c2 3FF4E7AD 		beq	.L1227
 10450 06c6 E5E6     		b	.L1140
 10451              	.LVL1176:
 10452              	.L1063:
 10453              	.LBB620:
 10454              	.LBB607:
1334:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10455              		.loc 1 1334 5 is_stmt 1 view .LVU3367
 10456              	.LBB596:
 10457              	.LBI596:
 283:src/display.c ****   if (res) {
 10458              		.loc 1 283 14 view .LVU3368
 10459              	.LBB597:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10460              		.loc 1 284 3 view .LVU3369
 10461 06c8 AF4B     		ldr	r3, .L1275+4
 10462 06ca AAF10900 		sub	r0, r10, #9
 10463              	.LVL1177:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10464              		.loc 1 284 3 is_stmt 0 view .LVU3370
 10465 06ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10466 06d0 FFF7FEFF 		bl	set_decimal.part.0
 10467              	.LVL1178:
 291:src/display.c **** }
 10468              		.loc 1 291 3 is_stmt 1 view .LVU3371
 291:src/display.c **** }
 10469              		.loc 1 291 10 is_stmt 0 view .LVU3372
 10470 06d4 D346     		mov	fp, r10
 10471 06d6 2B46     		mov	r3, r5
 10472 06d8 6CE7     		b	.L1062
 10473              	.LVL1179:
 10474              	.L1243:
 291:src/display.c **** }
 10475              		.loc 1 291 10 view .LVU3373
 10476              	.LBE597:
 10477              	.LBE596:
 10478              	.LBE607:
 10479              	.LBE620:
2679:src/display.c **** 	    *bp++ = '_';
 10480              		.loc 1 2679 6 is_stmt 1 view .LVU3374
2679:src/display.c **** 	    *bp++ = '_';
 10481              		.loc 1 2679 12 is_stmt 0 view .LVU3375
 10482 06da 1122     		movs	r2, #17
2680:src/display.c **** 	  } else {
 10483              		.loc 1 2680 12 view .LVU3376
 10484 06dc 5F23     		movs	r3, #95
2679:src/display.c **** 	    *bp++ = '_';
 10485              		.loc 1 2679 12 view .LVU3377
ARM GAS  /tmp/ccDDbRKQ.s 			page 304


 10486 06de 0270     		strb	r2, [r0]
2680:src/display.c **** 	  } else {
 10487              		.loc 1 2680 6 is_stmt 1 view .LVU3378
 10488              	.LVL1180:
2680:src/display.c **** 	  } else {
 10489              		.loc 1 2680 12 is_stmt 0 view .LVU3379
 10490 06e0 4370     		strb	r3, [r0, #1]
 10491              	.LVL1181:
2680:src/display.c **** 	  } else {
 10492              		.loc 1 2680 12 view .LVU3380
 10493 06e2 AAE5     		b	.L982
 10494              	.LVL1182:
 10495              	.L1054:
 10496              	.LBB621:
 10497              	.LBB608:
 10498              	.LBB598:
1295:src/display.c **** 	      gotdot = 0;
 10499              		.loc 1 1295 11 is_stmt 1 view .LVU3381
1295:src/display.c **** 	      gotdot = 0;
 10500              		.loc 1 1295 14 is_stmt 0 view .LVU3382
 10501 06e4 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10502              	.LVL1183:
1295:src/display.c **** 	      gotdot = 0;
 10503              		.loc 1 1295 14 view .LVU3383
 10504 06e6 2E2A     		cmp	r2, #46
 10505 06e8 00F02E81 		beq	.L1251
 10506              	.LVL1184:
1302:src/display.c **** 	    overflow_to_left = 1;
 10507              		.loc 1 1302 6 is_stmt 1 view .LVU3384
 10508 06ec 3C21     		movs	r1, #60
 10509              	.LVL1185:
1302:src/display.c **** 	    overflow_to_left = 1;
 10510              		.loc 1 1302 6 is_stmt 0 view .LVU3385
 10511 06ee FFF7FEFF 		bl	set_dig
 10512              	.LVL1186:
1303:src/display.c **** 	  }
 10513              		.loc 1 1303 6 is_stmt 1 view .LVU3386
1303:src/display.c **** 	  }
 10514              		.loc 1 1303 6 is_stmt 0 view .LVU3387
 10515 06f2 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1303:src/display.c **** 	  }
 10516              		.loc 1 1303 6 view .LVU3388
 10517              	.LBE598:
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10518              		.loc 1 1309 9 is_stmt 1 view .LVU3389
 10519              	.LBB599:
1289:src/display.c **** 	    if (gotdot <= j) {
 10520              		.loc 1 1289 8 is_stmt 0 view .LVU3390
 10521 06f4 4FF0090A 		mov	r10, #9
 10522              	.LBE599:
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10523              		.loc 1 1309 2 view .LVU3391
 10524 06f8 0029     		cmp	r1, #0
 10525 06fa 3FF4C0AE 		beq	.L1050
 10526              	.LBB600:
1301:src/display.c **** 	    set_dig(0, '<');
 10527              		.loc 1 1301 18 view .LVU3392
ARM GAS  /tmp/ccDDbRKQ.s 			page 305


 10528 06fe 4FF0FF3B 		mov	fp, #-1
1289:src/display.c **** 	    if (gotdot <= j) {
 10529              		.loc 1 1289 8 view .LVU3393
 10530 0702 4FF0090A 		mov	r10, #9
 10531 0706 43E7     		b	.L1082
 10532              	.LVL1187:
 10533              	.L1038:
1289:src/display.c **** 	    if (gotdot <= j) {
 10534              		.loc 1 1289 8 view .LVU3394
 10535              	.LBE600:
 10536              	.LBE608:
 10537              	.LBE621:
2879:src/display.c **** 		  }
 10538              		.loc 1 2879 7 is_stmt 1 view .LVU3395
 10539 0708 6E20     		movs	r0, #110
 10540 070a FFF7FEFF 		bl	format_reg
 10541              	.LVL1188:
2898:src/display.c **** 	      goto finish;
 10542              		.loc 1 2898 6 view .LVU3396
2898:src/display.c **** 	      goto finish;
 10543              		.loc 1 2898 9 is_stmt 0 view .LVU3397
 10544 070e D9F80030 		ldr	r3, [r9]
 10545 0712 002B     		cmp	r3, #0
 10546 0714 3FF4BFAD 		beq	.L1039
 10547 0718 43E5     		b	.L1040
 10548              	.LVL1189:
 10549              	.L1091:
 10550              	.LBB622:
 10551              	.LBB609:
1269:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10552              		.loc 1 1269 4 view .LVU3398
 10553 071a 8246     		mov	r10, r0
1252:src/display.c **** #endif
 10554              		.loc 1 1252 11 view .LVU3399
 10555 071c 0190     		str	r0, [sp, #4]
 10556              	.LBB601:
1305:src/display.c **** 	}
 10557              		.loc 1 1305 16 view .LVU3400
 10558 071e 4FF0FF3B 		mov	fp, #-1
 10559 0722 4CE7     		b	.L1064
 10560              	.LVL1190:
 10561              	.L1246:
1305:src/display.c **** 	}
 10562              		.loc 1 1305 16 view .LVU3401
 10563              	.LBE601:
 10564              	.LBE609:
 10565              	.LBE622:
 10566              	.LBB623:
2719:src/display.c **** 	  char b2[16];
 10567              		.loc 1 2719 4 is_stmt 1 view .LVU3402
2719:src/display.c **** 	  char b2[16];
 10568              		.loc 1 2719 45 is_stmt 0 view .LVU3403
 10569 0724 DBF80030 		ldr	r3, [fp]
 10570 0728 B3F8DC07 		ldrh	r0, [r3, #2012]
2719:src/display.c **** 	  char b2[16];
 10571              		.loc 1 2719 22 view .LVU3404
 10572 072c C0F34610 		ubfx	r0, r0, #5, #7
ARM GAS  /tmp/ccDDbRKQ.s 			page 306


 10573 0730 FFF7FEFF 		bl	current_catalogue
 10574              	.LVL1191:
2723:src/display.c **** 	  p = catcmd(op, b2);
 10575              		.loc 1 2723 9 view .LVU3405
 10576 0734 9549     		ldr	r1, .L1275+8
2719:src/display.c **** 	  char b2[16];
 10577              		.loc 1 2719 22 view .LVU3406
 10578 0736 0546     		mov	r5, r0
 10579              	.LVL1192:
2720:src/display.c **** 	  const char *p;
 10580              		.loc 1 2720 4 is_stmt 1 view .LVU3407
2721:src/display.c **** 
 10581              		.loc 1 2721 4 view .LVU3408
2723:src/display.c **** 	  p = catcmd(op, b2);
 10582              		.loc 1 2723 4 view .LVU3409
2723:src/display.c **** 	  p = catcmd(op, b2);
 10583              		.loc 1 2723 9 is_stmt 0 view .LVU3410
 10584 0738 1EA8     		add	r0, sp, #120
 10585              	.LVL1193:
2723:src/display.c **** 	  p = catcmd(op, b2);
 10586              		.loc 1 2723 9 view .LVU3411
 10587 073a FFF7FEFF 		bl	scopy
 10588              	.LVL1194:
2724:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10589              		.loc 1 2724 8 view .LVU3412
 10590 073e 08A9     		add	r1, sp, #32
2723:src/display.c **** 	  p = catcmd(op, b2);
 10591              		.loc 1 2723 9 view .LVU3413
 10592 0740 0646     		mov	r6, r0
2724:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10593              		.loc 1 2724 8 view .LVU3414
 10594 0742 2846     		mov	r0, r5
 10595              	.LVL1195:
2724:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10596              		.loc 1 2724 4 is_stmt 1 view .LVU3415
2724:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10597              		.loc 1 2724 8 is_stmt 0 view .LVU3416
 10598 0744 FFF7FEFF 		bl	catcmd
 10599              	.LVL1196:
2725:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10600              		.loc 1 2725 7 view .LVU3417
 10601 0748 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10602 074a 142B     		cmp	r3, #20
2724:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10603              		.loc 1 2724 8 view .LVU3418
 10604 074c 0146     		mov	r1, r0
 10605              	.LVL1197:
2725:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10606              		.loc 1 2725 4 is_stmt 1 view .LVU3419
2725:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10607              		.loc 1 2725 7 is_stmt 0 view .LVU3420
 10608 074e 07D0     		beq	.L967
2725:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10609              		.loc 1 2725 29 discriminator 1 view .LVU3421
 10610 0750 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10611 0752 9A07     		lsls	r2, r3, #30
 10612 0754 04D5     		bpl	.L967
ARM GAS  /tmp/ccDDbRKQ.s 			page 307


2726:src/display.c **** 	  bp = scopy(bp, p);
 10613              		.loc 1 2726 6 is_stmt 1 view .LVU3422
2726:src/display.c **** 	  bp = scopy(bp, p);
 10614              		.loc 1 2726 9 is_stmt 0 view .LVU3423
 10615 0756 3346     		mov	r3, r6
 10616              	.LVL1198:
2726:src/display.c **** 	  bp = scopy(bp, p);
 10617              		.loc 1 2726 12 view .LVU3424
 10618 0758 1422     		movs	r2, #20
 10619 075a 03F8012B 		strb	r2, [r3], #1
 10620              	.LVL1199:
2726:src/display.c **** 	  bp = scopy(bp, p);
 10621              		.loc 1 2726 9 view .LVU3425
 10622 075e 1E46     		mov	r6, r3
 10623              	.LVL1200:
 10624              	.L967:
2727:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10625              		.loc 1 2727 4 is_stmt 1 view .LVU3426
2727:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10626              		.loc 1 2727 9 is_stmt 0 view .LVU3427
 10627 0760 3046     		mov	r0, r6
 10628              	.LVL1201:
2727:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10629              		.loc 1 2727 9 view .LVU3428
 10630 0762 FFF7FEFF 		bl	scopy
 10631              	.LVL1202:
2728:src/display.c **** 	    // State2.disp_small = 1;
 10632              		.loc 1 2728 4 is_stmt 1 view .LVU3429
2728:src/display.c **** 	    // State2.disp_small = 1;
 10633              		.loc 1 2728 7 is_stmt 0 view .LVU3430
 10634 0766 019B     		ldr	r3, [sp, #4]
 10635 0768 103B     		subs	r3, r3, #16
 10636 076a 012B     		cmp	r3, #1
 10637 076c 2DD9     		bls	.L1252
2735:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10638              		.loc 1 2735 11 is_stmt 1 view .LVU3431
2735:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10639              		.loc 1 2735 15 is_stmt 0 view .LVU3432
 10640 076e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2735:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10641              		.loc 1 2735 14 view .LVU3433
 10642 0770 13F04003 		ands	r3, r3, #64
 10643 0774 08D0     		beq	.L1086
2736:src/display.c **** 	      decNumber x, r;
 10644              		.loc 1 2736 6 is_stmt 1 view .LVU3434
2736:src/display.c **** 	      decNumber x, r;
 10645              		.loc 1 2736 9 is_stmt 0 view .LVU3435
 10646 0776 019B     		ldr	r3, [sp, #4]
 10647 0778 122B     		cmp	r3, #18
 10648 077a 00F0CB82 		beq	.L1253
2756:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10649              		.loc 1 2756 13 is_stmt 1 view .LVU3436
2756:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10650              		.loc 1 2756 46 is_stmt 0 view .LVU3437
 10651 077e A5F58873 		sub	r3, r5, #272
2756:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10652              		.loc 1 2756 16 view .LVU3438
ARM GAS  /tmp/ccDDbRKQ.s 			page 308


 10653 0782 0D2B     		cmp	r3, #13
 10654 0784 40F28682 		bls	.L1254
 10655              	.L1086:
2756:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10656              		.loc 1 2756 16 view .LVU3439
 10657              	.LBE623:
2580:src/display.c **** 	int x_disp = 0;
 10658              		.loc 1 2580 6 view .LVU3440
 10659 0788 0025     		movs	r5, #0
 10660              	.LVL1203:
 10661              	.L971:
 10662              	.LBB633:
2765:src/display.c **** 	    set_status_top(buf);
 10663              		.loc 1 2765 4 is_stmt 1 view .LVU3441
2765:src/display.c **** 	    set_status_top(buf);
 10664              		.loc 1 2765 7 is_stmt 0 view .LVU3442
 10665 078a BAF1000F 		cmp	r10, #0
 10666 078e 17D0     		beq	.L976
2766:src/display.c **** 	    no_status_top = 1;
 10667              		.loc 1 2766 6 is_stmt 1 view .LVU3443
 10668              	.LVL1204:
 10669              	.LBB624:
 10670              	.LBI624:
3499:src/display.c **** 	if (no_status_top) return;
 10671              		.loc 1 3499 19 view .LVU3444
 10672              	.LBB625:
3500:src/display.c **** 	if (State2.runmode) {
 10673              		.loc 1 3500 2 view .LVU3445
3500:src/display.c **** 	if (State2.runmode) {
 10674              		.loc 1 3500 5 is_stmt 0 view .LVU3446
 10675 0790 B7F90030 		ldrsh	r3, [r7]
 10676 0794 13B9     		cbnz	r3, .L977
 10677 0796 1EA8     		add	r0, sp, #120
 10678              	.LVL1205:
3500:src/display.c **** 	if (State2.runmode) {
 10679              		.loc 1 3500 5 view .LVU3447
 10680 0798 FFF7FEFF 		bl	set_status_top.part.0
 10681              	.LVL1206:
 10682              	.L977:
3500:src/display.c **** 	if (State2.runmode) {
 10683              		.loc 1 3500 5 view .LVU3448
 10684              	.LBE625:
 10685              	.LBE624:
2767:src/display.c **** 	    annuc = 1;
 10686              		.loc 1 2767 6 is_stmt 1 view .LVU3449
2767:src/display.c **** 	    annuc = 1;
 10687              		.loc 1 2767 20 is_stmt 0 view .LVU3450
 10688 079c 0123     		movs	r3, #1
2768:src/display.c **** 	  }
 10689              		.loc 1 2768 12 view .LVU3451
 10690 079e 5646     		mov	r6, r10
2767:src/display.c **** 	    annuc = 1;
 10691              		.loc 1 2767 20 view .LVU3452
 10692 07a0 3B80     		strh	r3, [r7]	@ movhi
2768:src/display.c **** 	  }
 10693              		.loc 1 2768 6 is_stmt 1 view .LVU3453
 10694              	.LVL1207:
ARM GAS  /tmp/ccDDbRKQ.s 			page 309


 10695              	.L978:
2768:src/display.c **** 	  }
 10696              		.loc 1 2768 6 is_stmt 0 view .LVU3454
 10697              	.LBE633:
2858:src/display.c ****       nostk:
 10698              		.loc 1 2858 2 is_stmt 1 view .LVU3455
 10699 07a2 FFF7FEFF 		bl	show_stack
 10700              	.LVL1208:
 10701              	.LDL1:
2860:src/display.c **** 	if (!skip) {
 10702              		.loc 1 2860 2 view .LVU3456
 10703 07a6 FFF7FEFF 		bl	show_flags
 10704              	.LVL1209:
2861:src/display.c **** 	  if (State2.runmode) {
 10705              		.loc 1 2861 2 view .LVU3457
2861:src/display.c **** 	  if (State2.runmode) {
 10706              		.loc 1 2861 5 is_stmt 0 view .LVU3458
 10707 07aa 002D     		cmp	r5, #0
 10708 07ac 00F09481 		beq	.L1225
 10709              	.LVL1210:
 10710              	.L979:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10711              		.loc 1 2930 2 is_stmt 1 view .LVU3459
 10712 07b0 FFF7FEFF 		bl	set_annunciators
 10713              	.LVL1211:
2931:src/display.c **** 	  ShowRPN = 0;
 10714              		.loc 1 2931 2 view .LVU3460
 10715 07b4 734B     		ldr	r3, .L1275
 10716 07b6 DFF8E881 		ldr	r8, .L1275+28
 10717 07ba 754D     		ldr	r5, .L1275+12
 10718 07bc 0093     		str	r3, [sp]
 10719 07be C3E4     		b	.L941
 10720              	.LVL1212:
 10721              	.L976:
 10722              	.LBB634:
2771:src/display.c **** 	  }
 10723              		.loc 1 2771 6 view .LVU3461
 10724 07c0 1EA8     		add	r0, sp, #120
 10725 07c2 FFF7FEFF 		bl	set_status
 10726              	.LVL1213:
 10727              	.LBE634:
2578:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10728              		.loc 1 2578 6 is_stmt 0 view .LVU3462
 10729 07c6 5646     		mov	r6, r10
 10730 07c8 EBE7     		b	.L978
 10731              	.LVL1214:
 10732              	.L1252:
 10733              	.LBB635:
2730:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10734              		.loc 1 2730 6 is_stmt 1 view .LVU3463
2730:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10735              		.loc 1 2730 9 is_stmt 0 view .LVU3464
 10736 07ca B5F5274F 		cmp	r5, #42752
 10737 07ce 00F07782 		beq	.L969
2730:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10738              		.loc 1 2730 41 discriminator 1 view .LVU3465
 10739 07d2 B5F5284F 		cmp	r5, #43008
ARM GAS  /tmp/ccDDbRKQ.s 			page 310


 10740 07d6 00F07382 		beq	.L969
2733:src/display.c **** 	    skip = 1;
 10741              		.loc 1 2733 8 is_stmt 1 view .LVU3466
2733:src/display.c **** 	    skip = 1;
 10742              		.loc 1 2733 14 is_stmt 0 view .LVU3467
 10743 07da 05F07F00 		and	r0, r5, #127
 10744 07de 0021     		movs	r1, #0
 10745 07e0 FFF7FEFF 		bl	get_const
 10746              	.LVL1215:
2733:src/display.c **** 	    skip = 1;
 10747              		.loc 1 2733 8 view .LVU3468
 10748 07e4 0022     		movs	r2, #0
 10749 07e6 1146     		mov	r1, r2
 10750 07e8 FFF7FEFF 		bl	set_x
 10751              	.LVL1216:
2734:src/display.c **** 	  } else if (State2.runmode) {
 10752              		.loc 1 2734 11 view .LVU3469
 10753 07ec 0125     		movs	r5, #1
 10754              	.LVL1217:
2734:src/display.c **** 	  } else if (State2.runmode) {
 10755              		.loc 1 2734 11 view .LVU3470
 10756 07ee CCE7     		b	.L971
 10757              	.LVL1218:
 10758              	.L1247:
2734:src/display.c **** 	  } else if (State2.runmode) {
 10759              		.loc 1 2734 11 view .LVU3471
 10760              	.LBE635:
2774:src/display.c **** 	  if (State2.numdigit > 0) {
 10761              		.loc 1 2774 4 is_stmt 1 view .LVU3472
2774:src/display.c **** 	  if (State2.numdigit > 0) {
 10762              		.loc 1 2774 42 is_stmt 0 view .LVU3473
 10763 07f0 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10764 07f2 6849     		ldr	r1, .L1275+16
 10765 07f4 0423     		movs	r3, #4
 10766 07f6 03EB0213 		add	r3, r3, r2, lsl #4
2774:src/display.c **** 	  if (State2.numdigit > 0) {
 10767              		.loc 1 2774 9 view .LVU3474
 10768 07fa 1944     		add	r1, r1, r3
 10769 07fc 2722     		movs	r2, #39
 10770 07fe 1EA8     		add	r0, sp, #120
 10771              	.LVL1219:
2774:src/display.c **** 	  if (State2.numdigit > 0) {
 10772              		.loc 1 2774 9 view .LVU3475
 10773 0800 FFF7FEFF 		bl	scopy_char
 10774              	.LVL1220:
2775:src/display.c **** 	    *bp++ = (char) State2.digval;
 10775              		.loc 1 2775 7 view .LVU3476
 10776 0804 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10777              	.LVL1221:
2775:src/display.c **** 	    *bp++ = (char) State2.digval;
 10778              		.loc 1 2775 4 is_stmt 1 view .LVU3477
2775:src/display.c **** 	    *bp++ = (char) State2.digval;
 10779              		.loc 1 2775 7 is_stmt 0 view .LVU3478
 10780 0806 002B     		cmp	r3, #0
 10781 0808 3FF417AD 		beq	.L982
2776:src/display.c **** 	    if (State2.numdigit > 1)
 10782              		.loc 1 2776 6 is_stmt 1 view .LVU3479
ARM GAS  /tmp/ccDDbRKQ.s 			page 311


 10783              	.LVL1222:
2776:src/display.c **** 	    if (State2.numdigit > 1)
 10784              		.loc 1 2776 14 is_stmt 0 view .LVU3480
 10785 080c 2389     		ldrh	r3, [r4, #8]
 10786 080e 0370     		strb	r3, [r0]
2777:src/display.c **** 	      *bp++ = State2.digval2;
 10787              		.loc 1 2777 6 is_stmt 1 view .LVU3481
2777:src/display.c **** 	      *bp++ = State2.digval2;
 10788              		.loc 1 2777 9 is_stmt 0 view .LVU3482
 10789 0810 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10790 0812 012B     		cmp	r3, #1
2778:src/display.c **** 	  }
 10791              		.loc 1 2778 8 is_stmt 1 view .LVU3483
 10792              	.LVL1223:
2778:src/display.c **** 	  }
 10793              		.loc 1 2778 22 is_stmt 0 view .LVU3484
 10794 0814 84BF     		itt	hi
 10795 0816 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2778:src/display.c **** 	  }
 10796              		.loc 1 2778 14 view .LVU3485
 10797 0818 4370     		strbhi	r3, [r0, #1]
 10798              	.LVL1224:
2778:src/display.c **** 	  }
 10799              		.loc 1 2778 14 view .LVU3486
 10800 081a 0EE5     		b	.L982
 10801              	.LVL1225:
 10802              	.L1249:
2792:src/display.c **** 	  skip = 1;
 10803              		.loc 1 2792 4 is_stmt 1 view .LVU3487
 10804              	.LBB636:
 10805              	.LBI636:
2451:src/display.c **** 	char buf[16];
 10806              		.loc 1 2451 19 view .LVU3488
 10807              	.LBB637:
2452:src/display.c **** 	unsigned short int pc = State2.digval;
 10808              		.loc 1 2452 2 view .LVU3489
2453:src/display.c **** 	unsigned int op = getprog(pc);
 10809              		.loc 1 2453 2 view .LVU3490
2453:src/display.c **** 	unsigned int op = getprog(pc);
 10810              		.loc 1 2453 21 is_stmt 0 view .LVU3491
 10811 081c B4F808B0 		ldrh	fp, [r4, #8]
 10812              	.LVL1226:
2454:src/display.c **** 	int n = nLIB(pc);
 10813              		.loc 1 2454 2 is_stmt 1 view .LVU3492
2459:src/display.c **** 
 10814              		.loc 1 2459 27 is_stmt 0 view .LVU3493
 10815 0820 DFF88091 		ldr	r9, .L1275+32
2454:src/display.c **** 	int n = nLIB(pc);
 10816              		.loc 1 2454 20 view .LVU3494
 10817 0824 5846     		mov	r0, fp
 10818 0826 FFF7FEFF 		bl	getprog
 10819              	.LVL1227:
2458:src/display.c **** 	set_digits_string(libname[n], 0);
 10820              		.loc 1 2458 2 view .LVU3495
 10821 082a 15A9     		add	r1, sp, #84
2454:src/display.c **** 	int n = nLIB(pc);
 10822              		.loc 1 2454 20 view .LVU3496
ARM GAS  /tmp/ccDDbRKQ.s 			page 312


 10823 082c 0546     		mov	r5, r0
 10824              	.LVL1228:
2455:src/display.c **** 	unsigned short int lblpc;
 10825              		.loc 1 2455 2 is_stmt 1 view .LVU3497
2456:src/display.c **** 
 10826              		.loc 1 2456 2 view .LVU3498
2458:src/display.c **** 	set_digits_string(libname[n], 0);
 10827              		.loc 1 2458 2 view .LVU3499
 10828 082e FFF7FEFF 		bl	prt
 10829              	.LVL1229:
2458:src/display.c **** 	set_digits_string(libname[n], 0);
 10830              		.loc 1 2458 2 is_stmt 0 view .LVU3500
 10831 0832 FFF7FEFF 		bl	set_status
 10832              	.LVL1230:
2459:src/display.c **** 
 10833              		.loc 1 2459 2 is_stmt 1 view .LVU3501
2459:src/display.c **** 
 10834              		.loc 1 2459 27 is_stmt 0 view .LVU3502
 10835 0836 4FEA9B30 		lsr	r0, fp, #14
 10836 083a 00EB8000 		add	r0, r0, r0, lsl #2
2459:src/display.c **** 
 10837              		.loc 1 2459 2 view .LVU3503
 10838 083e 4844     		add	r0, r0, r9
 10839 0840 4146     		mov	r1, r8
 10840 0842 FFF7FEFF 		bl	set_digits_string
 10841              	.LVL1231:
2461:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10842              		.loc 1 2461 2 is_stmt 1 view .LVU3504
2461:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10843              		.loc 1 2461 5 is_stmt 0 view .LVU3505
 10844 0846 15F4704F 		tst	r5, #61440
 10845 084a 40F0F081 		bne	.L1255
 10846              	.LVL1232:
 10847              	.L1228:
2461:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10848              		.loc 1 2461 5 view .LVU3506
 10849              	.LBE637:
 10850              	.LBE636:
2858:src/display.c ****       nostk:
 10851              		.loc 1 2858 2 is_stmt 1 view .LVU3507
 10852 084e FFF7FEFF 		bl	show_stack
 10853              	.LVL1233:
2860:src/display.c **** 	if (!skip) {
 10854              		.loc 1 2860 2 view .LVU3508
 10855 0852 FFF7FEFF 		bl	show_flags
 10856              	.LVL1234:
2861:src/display.c **** 	  if (State2.runmode) {
 10857              		.loc 1 2861 2 view .LVU3509
 10858 0856 ABE7     		b	.L979
 10859              	.LVL1235:
 10860              	.L1248:
2789:src/display.c **** 	  skip = 1;
 10861              		.loc 1 2789 4 view .LVU3510
 10862              	.LBB640:
 10863              	.LBI640:
2349:src/display.c **** 	int i, n;
 10864              		.loc 1 2349 19 view .LVU3511
ARM GAS  /tmp/ccDDbRKQ.s 			page 313


 10865              	.LBB641:
2350:src/display.c **** 	int j = SEGS_EXP_BASE;
 10866              		.loc 1 2350 2 view .LVU3512
2351:src/display.c **** 	const int status = State2.status - 3;
 10867              		.loc 1 2351 2 view .LVU3513
2352:src/display.c **** 	char buf[16], *p = buf;
 10868              		.loc 1 2352 2 view .LVU3514
2356:src/display.c **** 	  set_status("Free:");
 10869              		.loc 1 2356 5 is_stmt 0 view .LVU3515
 10870 0858 B8F1010F 		cmp	r8, #1
2352:src/display.c **** 	char buf[16], *p = buf;
 10871              		.loc 1 2352 12 view .LVU3516
 10872 085c A8F10303 		sub	r3, r8, #3
 10873              	.LVL1236:
2353:src/display.c **** 	unsigned int pc;
 10874              		.loc 1 2353 2 is_stmt 1 view .LVU3517
2354:src/display.c **** 
 10875              		.loc 1 2354 2 view .LVU3518
2356:src/display.c **** 	  set_status("Free:");
 10876              		.loc 1 2356 2 view .LVU3519
2356:src/display.c **** 	  set_status("Free:");
 10877              		.loc 1 2356 5 is_stmt 0 view .LVU3520
 10878 0860 00F0CB81 		beq	.L1256
2364:src/display.c **** 	  /* Top line */
 10879              		.loc 1 2364 7 is_stmt 1 view .LVU3521
2364:src/display.c **** 	  /* Top line */
 10880              		.loc 1 2364 10 is_stmt 0 view .LVU3522
 10881 0864 581C     		adds	r0, r3, #1
 10882 0866 00F0C480 		beq	.L1257
 10883              	.LBB642:
2381:src/display.c **** 	  int end;
 10884              		.loc 1 2381 4 is_stmt 1 view .LVU3523
2382:src/display.c **** 	  int group = 10;
 10885              		.loc 1 2382 4 view .LVU3524
2383:src/display.c **** 	  int start = 0;
 10886              		.loc 1 2383 4 view .LVU3525
 10887              	.LVL1237:
2384:src/display.c **** 		
 10888              		.loc 1 2384 4 view .LVU3526
2386:src/display.c **** 	    base = 10 * status;
 10889              		.loc 1 2386 4 view .LVU3527
2386:src/display.c **** 	    base = 10 * status;
 10890              		.loc 1 2386 7 is_stmt 0 view .LVU3528
 10891 086a 092B     		cmp	r3, #9
 10892 086c 40F39C80 		ble	.L1258
2396:src/display.c **** 	    base = regX_idx;
 10893              		.loc 1 2396 9 is_stmt 1 view .LVU3529
2396:src/display.c **** 	    base = regX_idx;
 10894              		.loc 1 2396 12 is_stmt 0 view .LVU3530
 10895 0870 0A2B     		cmp	r3, #10
 10896 0872 00F0B681 		beq	.L1259
2404:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10897              		.loc 1 2404 6 is_stmt 1 view .LVU3531
 10898              	.LVL1238:
2405:src/display.c **** 	    set_status("FL.00-.15");
 10899              		.loc 1 2405 6 view .LVU3532
2406:src/display.c **** 	  }
ARM GAS  /tmp/ccDDbRKQ.s 			page 314


 10900              		.loc 1 2406 6 view .LVU3533
 10901 0876 4848     		ldr	r0, .L1275+20
 10902 0878 FFF7FEFF 		bl	set_status
 10903              	.LVL1239:
2384:src/display.c **** 		
 10904              		.loc 1 2384 8 is_stmt 0 view .LVU3534
 10905 087c 4FF0000A 		mov	r10, #0
2383:src/display.c **** 	  int start = 0;
 10906              		.loc 1 2383 8 view .LVU3535
 10907 0880 0A25     		movs	r5, #10
2405:src/display.c **** 	    set_status("FL.00-.15");
 10908              		.loc 1 2405 10 view .LVU3536
 10909 0882 4FF07F09 		mov	r9, #127
2404:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10910              		.loc 1 2404 11 view .LVU3537
 10911 0886 7023     		movs	r3, #112
 10912              	.LVL1240:
 10913              	.L991:
2408:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10914              		.loc 1 2408 4 is_stmt 1 view .LVU3538
2408:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10915              		.loc 1 2408 6 is_stmt 0 view .LVU3539
 10916 0888 0AEBCA08 		add	r8, r10, r10, lsl #3
 10917              	.LVL1241:
2409:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10918              		.loc 1 2409 4 is_stmt 1 view .LVU3540
 10919              	.LBB643:
 10920              	.LBI643:
 283:src/display.c ****   if (res) {
 10921              		.loc 1 283 14 view .LVU3541
 10922              	.LBE643:
 10923              	.LBE642:
 10924              	.LBE641:
 10925              	.LBE640:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10926              		.loc 1 284 3 view .LVU3542
 10927              	.LBB677:
 10928              	.LBB669:
 10929              	.LBB661:
 10930              	.LBB646:
 10931              	.LBB644:
 10932              	.LBI644:
 283:src/display.c ****   if (res) {
 10933              		.loc 1 283 14 view .LVU3543
 10934              	.LBB645:
 287:src/display.c ****     if (decimal != DECIMAL_DOT)
 10935              		.loc 1 287 5 view .LVU3544
 10936 088c 08F10700 		add	r0, r8, #7
 10937 0890 0093     		str	r3, [sp]
 10938 0892 FFF7FEFF 		bl	set_dot
 10939              	.LVL1242:
 288:src/display.c ****       set_dot(posn+8);
 10940              		.loc 1 288 5 view .LVU3545
 291:src/display.c **** }
 10941              		.loc 1 291 3 view .LVU3546
 291:src/display.c **** }
 10942              		.loc 1 291 3 is_stmt 0 view .LVU3547
ARM GAS  /tmp/ccDDbRKQ.s 			page 315


 10943              	.LBE645:
 10944              	.LBE644:
 10945              	.LBE646:
 10946              	.LBE661:
 10947              	.LBE669:
 10948              	.LBE677:
 291:src/display.c **** }
 10949              		.loc 1 291 3 is_stmt 1 view .LVU3548
 10950              	.LBB678:
 10951              	.LBB670:
 10952              	.LBB662:
2410:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10953              		.loc 1 2410 4 view .LVU3549
 10954 0896 009B     		ldr	r3, [sp]
 10955 0898 CAEB4502 		rsb	r2, r10, r5, lsl #1
 10956 089c 1A44     		add	r2, r2, r3
 10957 089e 0192     		str	r2, [sp, #4]
 10958              	.LVL1243:
2411:src/display.c **** 	    int k = i + base - start;
 10959              		.loc 1 2411 30 is_stmt 0 view .LVU3550
 10960 08a0 0AEB0502 		add	r2, r10, r5
 10961 08a4 1D44     		add	r5, r5, r3
 10962              	.LVL1244:
2411:src/display.c **** 	    int k = i + base - start;
 10963              		.loc 1 2411 30 view .LVU3551
 10964 08a6 A3EB0A03 		sub	r3, r3, r10
 10965 08aa CDE90236 		strd	r3, r6, [sp, #8]
2410:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10966              		.loc 1 2410 6 view .LVU3552
 10967 08ae 08F10908 		add	r8, r8, #9
 10968              	.LVL1245:
2411:src/display.c **** 	    int k = i + base - start;
 10969              		.loc 1 2411 4 is_stmt 1 view .LVU3553
2411:src/display.c **** 	    int k = i + base - start;
 10970              		.loc 1 2411 20 view .LVU3554
2411:src/display.c **** 	    int k = i + base - start;
 10971              		.loc 1 2411 30 is_stmt 0 view .LVU3555
 10972 08b2 0092     		str	r2, [sp]
 10973 08b4 15E0     		b	.L995
 10974              	.LVL1246:
 10975              	.L993:
 10976              	.LBB647:
2421:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10977              		.loc 1 2421 6 is_stmt 1 view .LVU3556
 10978 08b6 3146     		mov	r1, r6
 10979 08b8 4046     		mov	r0, r8
 10980 08ba FFF7FEFF 		bl	set_dig
 10981              	.LVL1247:
2422:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10982              		.loc 1 2422 6 view .LVU3557
 10983              	.LBB648:
 10984              	.LBI648:
 283:src/display.c ****   if (res) {
 10985              		.loc 1 283 14 view .LVU3558
 10986              	.LBE648:
 10987              	.LBE647:
 10988              	.LBE662:
ARM GAS  /tmp/ccDDbRKQ.s 			page 316


 10989              	.LBE670:
 10990              	.LBE678:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10991              		.loc 1 284 3 view .LVU3559
 10992              	.LBB679:
 10993              	.LBB671:
 10994              	.LBB663:
 10995              	.LBB656:
 10996              	.LBB651:
 10997              	.LBB649:
 10998              	.LBI649:
 283:src/display.c ****   if (res) {
 10999              		.loc 1 283 14 view .LVU3560
 11000              	.LBB650:
 287:src/display.c ****     if (decimal != DECIMAL_DOT)
 11001              		.loc 1 287 5 view .LVU3561
 11002 08be 08F10700 		add	r0, r8, #7
 11003 08c2 FFF7FEFF 		bl	set_dot
 11004              	.LVL1248:
 288:src/display.c ****       set_dot(posn+8);
 11005              		.loc 1 288 5 view .LVU3562
 291:src/display.c **** }
 11006              		.loc 1 291 3 view .LVU3563
 291:src/display.c **** }
 11007              		.loc 1 291 3 is_stmt 0 view .LVU3564
 11008              	.LBE650:
 11009              	.LBE649:
 11010              	.LBE651:
 11011              	.LBE656:
 11012              	.LBE663:
 11013              	.LBE671:
 11014              	.LBE679:
 291:src/display.c **** }
 11015              		.loc 1 291 3 is_stmt 1 view .LVU3565
 11016              	.LBB680:
 11017              	.LBB672:
 11018              	.LBB664:
 11019              	.LBB657:
2423:src/display.c **** 	    if (i == 4) {
 11020              		.loc 1 2423 6 view .LVU3566
2424:src/display.c **** 	      set_dig(j, 8);
 11021              		.loc 1 2424 9 is_stmt 0 view .LVU3567
 11022 08c6 BAF1040F 		cmp	r10, #4
2423:src/display.c **** 	    if (i == 4) {
 11023              		.loc 1 2423 8 view .LVU3568
 11024 08ca 08F10900 		add	r0, r8, #9
 11025              	.LVL1249:
2424:src/display.c **** 	      set_dig(j, 8);
 11026              		.loc 1 2424 6 is_stmt 1 view .LVU3569
2424:src/display.c **** 	      set_dig(j, 8);
 11027              		.loc 1 2424 9 is_stmt 0 view .LVU3570
 11028 08ce 1FD0     		beq	.L1260
2423:src/display.c **** 	    if (i == 4) {
 11029              		.loc 1 2423 8 view .LVU3571
 11030 08d0 8046     		mov	r8, r0
 11031              	.LVL1250:
 11032              	.L994:
ARM GAS  /tmp/ccDDbRKQ.s 			page 317


2423:src/display.c **** 	    if (i == 4) {
 11033              		.loc 1 2423 8 view .LVU3572
 11034              	.LBE657:
2411:src/display.c **** 	    int k = i + base - start;
 11035              		.loc 1 2411 39 is_stmt 1 view .LVU3573
2411:src/display.c **** 	    int k = i + base - start;
 11036              		.loc 1 2411 4 is_stmt 0 view .LVU3574
 11037 08d2 009B     		ldr	r3, [sp]
2411:src/display.c **** 	    int k = i + base - start;
 11038              		.loc 1 2411 40 view .LVU3575
 11039 08d4 0AF1010A 		add	r10, r10, #1
 11040              	.LVL1251:
2411:src/display.c **** 	    int k = i + base - start;
 11041              		.loc 1 2411 20 is_stmt 1 view .LVU3576
2411:src/display.c **** 	    int k = i + base - start;
 11042              		.loc 1 2411 4 is_stmt 0 view .LVU3577
 11043 08d8 9A45     		cmp	r10, r3
 11044 08da 05F10105 		add	r5, r5, #1
 11045 08de 00F08A81 		beq	.L1261
 11046              	.LVL1252:
 11047              	.L995:
 11048              	.LBB658:
2412:src/display.c **** 	    int l = get_user_flag(k);
 11049              		.loc 1 2412 6 is_stmt 1 view .LVU3578
2413:src/display.c **** 	    k += group;
 11050              		.loc 1 2413 6 view .LVU3579
2413:src/display.c **** 	    k += group;
 11051              		.loc 1 2413 14 is_stmt 0 view .LVU3580
 11052 08e2 029B     		ldr	r3, [sp, #8]
 11053 08e4 03EB0A00 		add	r0, r3, r10
 11054 08e8 FFF7FEFF 		bl	get_user_flag
 11055              	.LVL1253:
2415:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11056              		.loc 1 2415 9 view .LVU3581
 11057 08ec 4D45     		cmp	r5, r9
2413:src/display.c **** 	    k += group;
 11058              		.loc 1 2413 14 view .LVU3582
 11059 08ee 0646     		mov	r6, r0
 11060              	.LVL1254:
2414:src/display.c **** 	    if (end >= k) {
 11061              		.loc 1 2414 6 is_stmt 1 view .LVU3583
2415:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11062              		.loc 1 2415 6 view .LVU3584
2415:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11063              		.loc 1 2415 9 is_stmt 0 view .LVU3585
 11064 08f0 E1DC     		bgt	.L993
2416:src/display.c **** 	      k += group;
 11065              		.loc 1 2416 8 is_stmt 1 view .LVU3586
2416:src/display.c **** 	      k += group;
 11066              		.loc 1 2416 14 is_stmt 0 view .LVU3587
 11067 08f2 2846     		mov	r0, r5
 11068              	.LVL1255:
2416:src/display.c **** 	      k += group;
 11069              		.loc 1 2416 14 view .LVU3588
 11070 08f4 FFF7FEFF 		bl	get_user_flag
 11071              	.LVL1256:
 11072 08f8 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccDDbRKQ.s 			page 318


 11073 08fa 5344     		add	r3, r3, r10
2418:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11074              		.loc 1 2418 11 view .LVU3589
 11075 08fc 9945     		cmp	r9, r3
2416:src/display.c **** 	      k += group;
 11076              		.loc 1 2416 10 view .LVU3590
 11077 08fe 46EA4006 		orr	r6, r6, r0, lsl #1
 11078              	.LVL1257:
2417:src/display.c **** 	      if (end >= k)
 11079              		.loc 1 2417 8 is_stmt 1 view .LVU3591
2418:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11080              		.loc 1 2418 8 view .LVU3592
2418:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11081              		.loc 1 2418 11 is_stmt 0 view .LVU3593
 11082 0902 D8DB     		blt	.L993
2419:src/display.c **** 	    }
 11083              		.loc 1 2419 3 is_stmt 1 view .LVU3594
2419:src/display.c **** 	    }
 11084              		.loc 1 2419 9 is_stmt 0 view .LVU3595
 11085 0904 1846     		mov	r0, r3
 11086 0906 FFF7FEFF 		bl	get_user_flag
 11087              	.LVL1258:
2419:src/display.c **** 	    }
 11088              		.loc 1 2419 5 view .LVU3596
 11089 090a 46EA8006 		orr	r6, r6, r0, lsl #2
 11090              	.LVL1259:
2419:src/display.c **** 	    }
 11091              		.loc 1 2419 5 view .LVU3597
 11092 090e D2E7     		b	.L993
 11093              	.LVL1260:
 11094              	.L1260:
2425:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11095              		.loc 1 2425 8 is_stmt 1 view .LVU3598
 11096 0910 0821     		movs	r1, #8
 11097 0912 FFF7FEFF 		bl	set_dig
 11098              	.LVL1261:
2426:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11099              		.loc 1 2426 8 view .LVU3599
 11100              	.LBB652:
 11101              	.LBI652:
 283:src/display.c ****   if (res) {
 11102              		.loc 1 283 14 view .LVU3600
 11103              	.LBE652:
 11104              	.LBE658:
 11105              	.LBE664:
 11106              	.LBE672:
 11107              	.LBE680:
 284:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11108              		.loc 1 284 3 view .LVU3601
 11109              	.LBB681:
 11110              	.LBB673:
 11111              	.LBB665:
 11112              	.LBB659:
 11113              	.LBB655:
 11114              	.LBB653:
 11115              	.LBI653:
 283:src/display.c ****   if (res) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 319


 11116              		.loc 1 283 14 view .LVU3602
 11117              	.LBB654:
 287:src/display.c ****     if (decimal != DECIMAL_DOT)
 11118              		.loc 1 287 5 view .LVU3603
 11119 0916 08F11000 		add	r0, r8, #16
 11120 091a FFF7FEFF 		bl	set_dot
 11121              	.LVL1262:
 288:src/display.c ****       set_dot(posn+8);
 11122              		.loc 1 288 5 view .LVU3604
 291:src/display.c **** }
 11123              		.loc 1 291 3 view .LVU3605
 291:src/display.c **** }
 11124              		.loc 1 291 3 is_stmt 0 view .LVU3606
 11125              	.LBE654:
 11126              	.LBE653:
 11127              	.LBE655:
 11128              	.LBE659:
 11129              	.LBE665:
 11130              	.LBE673:
 11131              	.LBE681:
 291:src/display.c **** }
 11132              		.loc 1 291 3 is_stmt 1 view .LVU3607
 11133              	.LBB682:
 11134              	.LBB674:
 11135              	.LBB666:
 11136              	.LBB660:
2427:src/display.c **** 	    }
 11137              		.loc 1 2427 8 view .LVU3608
2427:src/display.c **** 	    }
 11138              		.loc 1 2427 10 is_stmt 0 view .LVU3609
 11139 091e 08F11208 		add	r8, r8, #18
 11140              	.LVL1263:
2427:src/display.c **** 	    }
 11141              		.loc 1 2427 10 view .LVU3610
 11142 0922 D6E7     		b	.L994
 11143              	.LVL1264:
 11144              	.L1090:
2427:src/display.c **** 	    }
 11145              		.loc 1 2427 10 view .LVU3611
 11146              	.LBE660:
 11147              	.LBE666:
 11148              	.LBE674:
 11149              	.LBE682:
 11150              	.LBB683:
 11151              	.LBB610:
1269:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11152              		.loc 1 1269 4 view .LVU3612
 11153 0924 8A46     		mov	r10, r1
 11154 0926 AAE5     		b	.L1050
 11155              	.LVL1265:
 11156              	.L963:
1269:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11157              		.loc 1 1269 4 view .LVU3613
 11158              	.LBE610:
 11159              	.LBE683:
2692:src/display.c **** 	    }
 11160              		.loc 1 2692 3 is_stmt 1 view .LVU3614
ARM GAS  /tmp/ccDDbRKQ.s 			page 320


2692:src/display.c **** 	    }
 11161              		.loc 1 2692 8 is_stmt 0 view .LVU3615
 11162 0928 2189     		ldrh	r1, [r4, #8]
 11163 092a FFF7FEFF 		bl	num_arg_0
 11164              	.LVL1266:
2692:src/display.c **** 	    }
 11165              		.loc 1 2692 8 view .LVU3616
 11166 092e 0BE6     		b	.L962
 11167              	.LVL1267:
 11168              	.L1239:
2870:src/display.c **** 		    SET_POLAR_READY;
 11169              		.loc 1 2870 7 is_stmt 1 view .LVU3617
 11170 0930 5046     		mov	r0, r10
 11171 0932 FFF7FEFF 		bl	op_r2p
 11172              	.LVL1268:
2871:src/display.c **** 		  }
 11173              		.loc 1 2871 7 view .LVU3618
 11174 0936 1949     		ldr	r1, .L1275+24
 11175 0938 0B68     		ldr	r3, [r1]
 11176 093a 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 11177 093e 6AF30412 		bfi	r2, r10, #4, #1
 11178 0942 83F8DE27 		strb	r2, [r3, #2014]
 11179 0946 62E5     		b	.L1037
 11180              	.LVL1269:
 11181              	.L1251:
 11182              	.LBB684:
 11183              	.LBB611:
 11184              	.LBB602:
1296:src/display.c **** 	      p++;
 11185              		.loc 1 1296 8 view .LVU3619
1297:src/display.c **** 	      if (!double_dot)
 11186              		.loc 1 1297 8 view .LVU3620
1299:src/display.c **** 	    }
 11187              		.loc 1 1299 5 is_stmt 0 view .LVU3621
 11188 0948 002B     		cmp	r3, #0
1297:src/display.c **** 	      if (!double_dot)
 11189              		.loc 1 1297 9 view .LVU3622
 11190 094a 05F10105 		add	r5, r5, #1
 11191              	.LVL1270:
1298:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 11192              		.loc 1 1298 8 is_stmt 1 view .LVU3623
1299:src/display.c **** 	    }
 11193              		.loc 1 1299 5 is_stmt 0 view .LVU3624
 11194 094e 14BF     		ite	ne
 11195 0950 4FF0090A 		movne	r10, #9
 11196 0954 4FF0120A 		moveq	r10, #18
 11197 0958 10E6     		b	.L1055
 11198              	.LVL1271:
 11199              	.L1092:
1289:src/display.c **** 	    if (gotdot <= j) {
 11200              		.loc 1 1289 8 view .LVU3625
 11201 095a 4FF0090A 		mov	r10, #9
 11202 095e 0DE6     		b	.L1055
 11203              	.LVL1272:
 11204              	.L1017:
1289:src/display.c **** 	    if (gotdot <= j) {
 11205              		.loc 1 1289 8 view .LVU3626
ARM GAS  /tmp/ccDDbRKQ.s 			page 321


 11206              	.LBE602:
 11207              	.LBE611:
 11208              	.LBE684:
2807:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11209              		.loc 1 2807 11 is_stmt 1 view .LVU3627
2807:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11210              		.loc 1 2807 15 is_stmt 0 view .LVU3628
 11211 0960 084B     		ldr	r3, .L1275
 11212 0962 0093     		str	r3, [sp]
 11213 0964 B3F90030 		ldrsh	r3, [r3]
2807:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11214              		.loc 1 2807 14 view .LVU3629
 11215 0968 002B     		cmp	r3, #0
 11216 096a 40F00281 		bne	.L1262
2809:src/display.c **** 	    bp = scopy(buf, Alpha);
 11217              		.loc 1 2809 11 is_stmt 1 view .LVU3630
2809:src/display.c **** 	    bp = scopy(buf, Alpha);
 11218              		.loc 1 2809 14 is_stmt 0 view .LVU3631
 11219 096e 0A07     		lsls	r2, r1, #28
 11220 0970 00F1BC80 		bmi	.L1263
 11221              	.LVL1273:
2858:src/display.c ****       nostk:
 11222              		.loc 1 2858 2 is_stmt 1 view .LVU3632
 11223 0974 FFF7FEFF 		bl	show_stack
 11224              	.LVL1274:
2860:src/display.c **** 	if (!skip) {
 11225              		.loc 1 2860 2 view .LVU3633
2841:src/display.c **** 	  }
 11226              		.loc 1 2841 12 is_stmt 0 view .LVU3634
 11227 0978 0126     		movs	r6, #1
2860:src/display.c **** 	if (!skip) {
 11228              		.loc 1 2860 2 view .LVU3635
 11229 097a FFF7FEFF 		bl	show_flags
 11230              	.LVL1275:
2861:src/display.c **** 	  if (State2.runmode) {
 11231              		.loc 1 2861 2 is_stmt 1 view .LVU3636
 11232 097e FFF781BB 		b	.L946
 11233              	.L1276:
 11234 0982 00BF     		.align	2
 11235              	.L1275:
 11236 0984 00000000 		.word	DispPlot
 11237 0988 00000000 		.word	.LANCHOR1
 11238 098c 1C000000 		.word	.LC27
 11239 0990 00000000 		.word	ShowRegister
 11240 0994 00000000 		.word	multicmds
 11241 0998 6C000000 		.word	.LC38
 11242 099c 00000000 		.word	main_ram
 11243 09a0 00000000 		.word	DispMsg
 11244 09a4 00000000 		.word	.LANCHOR19
 11245              	.LVL1276:
 11246              	.L1258:
 11247              	.LBB685:
 11248              	.LBB675:
 11249              	.LBB667:
2387:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11250              		.loc 1 2387 6 view .LVU3637
2387:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
ARM GAS  /tmp/ccDDbRKQ.s 			page 322


 11251              		.loc 1 2387 11 is_stmt 0 view .LVU3638
 11252 09a8 0A25     		movs	r5, #10
 11253 09aa 05FB03F3 		mul	r3, r5, r3
 11254              	.LVL1277:
2388:src/display.c **** 	    p = scopy(buf, "FL ");
 11255              		.loc 1 2388 6 is_stmt 1 view .LVU3639
2388:src/display.c **** 	    p = scopy(buf, "FL ");
 11256              		.loc 1 2388 28 is_stmt 0 view .LVU3640
 11257 09ae 462B     		cmp	r3, #70
2389:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11258              		.loc 1 2389 10 view .LVU3641
 11259 09b0 C649     		ldr	r1, .L1277
2388:src/display.c **** 	    p = scopy(buf, "FL ");
 11260              		.loc 1 2388 28 view .LVU3642
 11261 09b2 0093     		str	r3, [sp]
2389:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11262              		.loc 1 2389 10 view .LVU3643
 11263 09b4 15A8     		add	r0, sp, #84
 11264              	.LVL1278:
2388:src/display.c **** 	    p = scopy(buf, "FL ");
 11265              		.loc 1 2388 28 view .LVU3644
 11266 09b6 9946     		mov	r9, r3
 11267 09b8 A8BF     		it	ge
 11268 09ba 4FF04609 		movge	r9, #70
2389:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11269              		.loc 1 2389 10 view .LVU3645
 11270 09be FFF7FEFF 		bl	scopy
 11271              	.LVL1279:
2390:src/display.c **** 	    *p++ = '-';
 11272              		.loc 1 2390 10 view .LVU3646
 11273 09c2 009B     		ldr	r3, [sp]
 11274 09c4 0222     		movs	r2, #2
 11275 09c6 1946     		mov	r1, r3
 11276 09c8 FFF7FEFF 		bl	num_arg_0
 11277              	.LVL1280:
2388:src/display.c **** 	    p = scopy(buf, "FL ");
 11278              		.loc 1 2388 10 view .LVU3647
 11279 09cc 09F11D09 		add	r9, r9, #29
 11280              	.LVL1281:
2389:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11281              		.loc 1 2389 6 is_stmt 1 view .LVU3648
2390:src/display.c **** 	    *p++ = '-';
 11282              		.loc 1 2390 6 view .LVU3649
2391:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11283              		.loc 1 2391 6 view .LVU3650
2391:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11284              		.loc 1 2391 11 is_stmt 0 view .LVU3651
 11285 09d0 2D22     		movs	r2, #45
 11286 09d2 00F8012B 		strb	r2, [r0], #1
 11287              	.LVL1282:
2392:src/display.c **** 	    *p = '\0';
 11288              		.loc 1 2392 6 is_stmt 1 view .LVU3652
2392:src/display.c **** 	    *p = '\0';
 11289              		.loc 1 2392 10 is_stmt 0 view .LVU3653
 11290 09d6 4946     		mov	r1, r9
 11291 09d8 0222     		movs	r2, #2
 11292 09da FFF7FEFF 		bl	num_arg_0
ARM GAS  /tmp/ccDDbRKQ.s 			page 323


 11293              	.LVL1283:
2392:src/display.c **** 	    *p = '\0';
 11294              		.loc 1 2392 10 view .LVU3654
 11295 09de 0146     		mov	r1, r0
 11296              	.LVL1284:
2393:src/display.c **** 	    set_status(buf);
 11297              		.loc 1 2393 6 is_stmt 1 view .LVU3655
2393:src/display.c **** 	    set_status(buf);
 11298              		.loc 1 2393 9 is_stmt 0 view .LVU3656
 11299 09e0 4FF0000A 		mov	r10, #0
2394:src/display.c **** 	  }
 11300              		.loc 1 2394 6 view .LVU3657
 11301 09e4 15A8     		add	r0, sp, #84
 11302              	.LVL1285:
2393:src/display.c **** 	    set_status(buf);
 11303              		.loc 1 2393 9 view .LVU3658
 11304 09e6 81F800A0 		strb	r10, [r1]
2394:src/display.c **** 	  }
 11305              		.loc 1 2394 6 is_stmt 1 view .LVU3659
 11306 09ea FFF7FEFF 		bl	set_status
 11307              	.LVL1286:
2394:src/display.c **** 	  }
 11308              		.loc 1 2394 6 is_stmt 0 view .LVU3660
 11309 09ee 009B     		ldr	r3, [sp]
 11310 09f0 4AE7     		b	.L991
 11311              	.LVL1287:
 11312              	.L1257:
2394:src/display.c **** 	  }
 11313              		.loc 1 2394 6 view .LVU3661
 11314              	.LBE667:
2366:src/display.c **** 	  if (SizeStatRegs)
 11315              		.loc 1 2366 4 is_stmt 1 view .LVU3662
2366:src/display.c **** 	  if (SizeStatRegs)
 11316              		.loc 1 2366 8 is_stmt 0 view .LVU3663
 11317 09f2 0DF15408 		add	r8, sp, #84
 11318              	.LVL1288:
2366:src/display.c **** 	  if (SizeStatRegs)
 11319              		.loc 1 2366 8 view .LVU3664
 11320 09f6 B649     		ldr	r1, .L1277+4
 11321 09f8 4046     		mov	r0, r8
 11322 09fa FFF7FEFF 		bl	scopy
 11323              	.LVL1289:
2367:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11324              		.loc 1 2367 8 view .LVU3665
 11325 09fe B54A     		ldr	r2, .L1277+8
2367:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11326              		.loc 1 2367 7 view .LVU3666
 11327 0a00 1268     		ldr	r2, [r2]
2366:src/display.c **** 	  if (SizeStatRegs)
 11328              		.loc 1 2366 8 view .LVU3667
 11329 0a02 0346     		mov	r3, r0
 11330              	.LVL1290:
2367:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11331              		.loc 1 2367 4 is_stmt 1 view .LVU3668
2367:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11332              		.loc 1 2367 7 is_stmt 0 view .LVU3669
 11333 0a04 002A     		cmp	r2, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 324


 11334 0a06 50D1     		bne	.L1264
 11335              	.L988:
2369:src/display.c **** 	  set_status(buf);
 11336              		.loc 1 2369 4 is_stmt 1 view .LVU3670
2369:src/display.c **** 	  set_status(buf);
 11337              		.loc 1 2369 7 is_stmt 0 view .LVU3671
 11338 0a08 0022     		movs	r2, #0
 11339 0a0a 1A70     		strb	r2, [r3]
2370:src/display.c **** 
 11340              		.loc 1 2370 4 is_stmt 1 view .LVU3672
 11341 0a0c 4046     		mov	r0, r8
 11342              	.LVL1291:
2370:src/display.c **** 
 11343              		.loc 1 2370 4 is_stmt 0 view .LVU3673
 11344 0a0e FFF7FEFF 		bl	set_status
 11345              	.LVL1292:
2373:src/display.c **** 	  if (LocalRegs < 0) {
 11346              		.loc 1 2373 4 is_stmt 1 view .LVU3674
2373:src/display.c **** 	  if (LocalRegs < 0) {
 11347              		.loc 1 2373 8 is_stmt 0 view .LVU3675
 11348 0a12 FFF7FEFF 		bl	global_regs
 11349              	.LVL1293:
 11350 0a16 0146     		mov	r1, r0
 11351 0a18 4046     		mov	r0, r8
 11352 0a1a FFF7FEFF 		bl	num_arg
 11353              	.LVL1294:
2374:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11354              		.loc 1 2374 8 view .LVU3676
 11355 0a1e DBF80020 		ldr	r2, [fp]
 11356 0a22 B2F8DE27 		ldrh	r2, [r2, #2014]
2374:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11357              		.loc 1 2374 7 view .LVU3677
 11358 0a26 1104     		lsls	r1, r2, #16
2373:src/display.c **** 	  if (LocalRegs < 0) {
 11359              		.loc 1 2373 8 view .LVU3678
 11360 0a28 0346     		mov	r3, r0
 11361              	.LVL1295:
2374:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11362              		.loc 1 2374 4 is_stmt 1 view .LVU3679
2374:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11363              		.loc 1 2374 7 is_stmt 0 view .LVU3680
 11364 0a2a 32D4     		bmi	.L1265
 11365              	.L989:
2378:src/display.c **** 	  set_digits_string(buf, 0);
 11366              		.loc 1 2378 4 is_stmt 1 view .LVU3681
2378:src/display.c **** 	  set_digits_string(buf, 0);
 11367              		.loc 1 2378 7 is_stmt 0 view .LVU3682
 11368 0a2c 0021     		movs	r1, #0
2379:src/display.c **** 	} else {
 11369              		.loc 1 2379 4 view .LVU3683
 11370 0a2e 4046     		mov	r0, r8
 11371              	.LVL1296:
2378:src/display.c **** 	  set_digits_string(buf, 0);
 11372              		.loc 1 2378 7 view .LVU3684
 11373 0a30 1970     		strb	r1, [r3]
 11374              	.LVL1297:
2379:src/display.c **** 	} else {
ARM GAS  /tmp/ccDDbRKQ.s 			page 325


 11375              		.loc 1 2379 4 is_stmt 1 view .LVU3685
 11376 0a32 FFF7FEFF 		bl	set_digits_string
 11377              	.LVL1298:
 11378              	.L986:
2432:src/display.c **** 	pc = state_pc();
 11379              		.loc 1 2432 2 view .LVU3686
2433:src/display.c **** 	if (isXROM(pc))
 11380              		.loc 1 2433 2 view .LVU3687
2433:src/display.c **** 	if (isXROM(pc))
 11381              		.loc 1 2433 7 is_stmt 0 view .LVU3688
 11382 0a36 DBF80030 		ldr	r3, [fp]
2433:src/display.c **** 	if (isXROM(pc))
 11383              		.loc 1 2433 5 view .LVU3689
 11384 0a3a B3F8E087 		ldrh	r8, [r3, #2016]
 11385              	.LVL1299:
2434:src/display.c **** 	  pc = 1;
 11386              		.loc 1 2434 2 is_stmt 1 view .LVU3690
2434:src/display.c **** 	  pc = 1;
 11387              		.loc 1 2434 6 is_stmt 0 view .LVU3691
 11388 0a3e 4FEA9833 		lsr	r3, r8, #14
2435:src/display.c **** 	for (n=i=0; i<4; i++) {
 11389              		.loc 1 2435 7 view .LVU3692
 11390 0a42 032B     		cmp	r3, #3
 11391 0a44 08BF     		it	eq
 11392 0a46 4FF00108 		moveq	r8, #1
 11393              	.LVL1300:
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11394              		.loc 1 2436 2 is_stmt 1 view .LVU3693
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11395              		.loc 1 2436 14 view .LVU3694
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11396              		.loc 1 2436 8 is_stmt 0 view .LVU3695
 11397 0a4a 4FF0000A 		mov	r10, #0
 11398 0a4e 6425     		movs	r5, #100
2432:src/display.c **** 	pc = state_pc();
 11399              		.loc 1 2432 4 view .LVU3696
 11400 0a50 4FF06C09 		mov	r9, #108
 11401              	.LVL1301:
 11402              	.L999:
2437:src/display.c **** 	    if (++n == 4) {
 11403              		.loc 1 2437 4 is_stmt 1 view .LVU3697
2437:src/display.c **** 	    if (++n == 4) {
 11404              		.loc 1 2437 8 is_stmt 0 view .LVU3698
 11405 0a54 0222     		movs	r2, #2
 11406 0a56 2946     		mov	r1, r5
 11407 0a58 4046     		mov	r0, r8
 11408 0a5a FFF7FEFF 		bl	find_label_from
 11409              	.LVL1302:
2438:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11410              		.loc 1 2438 6 is_stmt 1 view .LVU3699
2437:src/display.c **** 	    if (++n == 4) {
 11411              		.loc 1 2437 7 is_stmt 0 view .LVU3700
 11412 0a5e 58B1     		cbz	r0, .L997
2438:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11413              		.loc 1 2438 9 view .LVU3701
 11414 0a60 0AF1010A 		add	r10, r10, #1
 11415              	.LVL1303:
ARM GAS  /tmp/ccDDbRKQ.s 			page 326


2442:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11416              		.loc 1 2442 8 is_stmt 1 view .LVU3702
2438:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11417              		.loc 1 2438 9 is_stmt 0 view .LVU3703
 11418 0a64 BAF1040F 		cmp	r10, #4
2442:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11419              		.loc 1 2442 8 view .LVU3704
 11420 0a68 A5F12301 		sub	r1, r5, #35
 11421 0a6c 4846     		mov	r0, r9
2438:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11422              		.loc 1 2438 9 view .LVU3705
 11423 0a6e 07D0     		beq	.L1266
2442:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11424              		.loc 1 2442 8 view .LVU3706
 11425 0a70 FFF7FEFF 		bl	set_dig
 11426              	.LVL1304:
2443:src/display.c **** 	    }
 11427              		.loc 1 2443 8 is_stmt 1 view .LVU3707
2443:src/display.c **** 	    }
 11428              		.loc 1 2443 10 is_stmt 0 view .LVU3708
 11429 0a74 09F10709 		add	r9, r9, #7
 11430              	.LVL1305:
 11431              	.L997:
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11432              		.loc 1 2436 19 is_stmt 1 view .LVU3709
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11433              		.loc 1 2436 14 view .LVU3710
 11434 0a78 0135     		adds	r5, r5, #1
 11435              	.LVL1306:
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11436              		.loc 1 2436 2 is_stmt 0 view .LVU3711
 11437 0a7a 682D     		cmp	r5, #104
 11438 0a7c EAD1     		bne	.L999
2436:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11439              		.loc 1 2436 2 view .LVU3712
 11440 0a7e E6E6     		b	.L1228
 11441              	.LVL1307:
 11442              	.L1266:
2439:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11443              		.loc 1 2439 8 is_stmt 1 view .LVU3713
 11444 0a80 4C21     		movs	r1, #76
 11445 0a82 7320     		movs	r0, #115
 11446              	.LVL1308:
2439:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11447              		.loc 1 2439 8 is_stmt 0 view .LVU3714
 11448 0a84 FFF7FEFF 		bl	set_dig
 11449              	.LVL1309:
2440:src/display.c **** 	    } else {
 11450              		.loc 1 2440 8 is_stmt 1 view .LVU3715
 11451 0a88 4C21     		movs	r1, #76
 11452 0a8a 7A20     		movs	r0, #122
 11453 0a8c FFF7FEFF 		bl	set_dig
 11454              	.LVL1310:
 11455 0a90 F2E7     		b	.L997
 11456              	.LVL1311:
 11457              	.L1265:
2375:src/display.c **** 	    p = num_arg(p, local_regs());
ARM GAS  /tmp/ccDDbRKQ.s 			page 327


 11458              		.loc 1 2375 6 view .LVU3716
2375:src/display.c **** 	    p = num_arg(p, local_regs());
 11459              		.loc 1 2375 10 is_stmt 0 view .LVU3717
 11460 0a92 9149     		ldr	r1, .L1277+12
 11461 0a94 FFF7FEFF 		bl	scopy
 11462              	.LVL1312:
2375:src/display.c **** 	    p = num_arg(p, local_regs());
 11463              		.loc 1 2375 10 view .LVU3718
 11464 0a98 0546     		mov	r5, r0
 11465              	.LVL1313:
2376:src/display.c **** 	  }
 11466              		.loc 1 2376 6 is_stmt 1 view .LVU3719
2376:src/display.c **** 	  }
 11467              		.loc 1 2376 21 is_stmt 0 view .LVU3720
 11468 0a9a FFF7FEFF 		bl	local_regs
 11469              	.LVL1314:
2376:src/display.c **** 	  }
 11470              		.loc 1 2376 21 view .LVU3721
 11471 0a9e 0146     		mov	r1, r0
2376:src/display.c **** 	  }
 11472              		.loc 1 2376 10 view .LVU3722
 11473 0aa0 2846     		mov	r0, r5
 11474 0aa2 FFF7FEFF 		bl	num_arg
 11475              	.LVL1315:
 11476 0aa6 0346     		mov	r3, r0
 11477              	.LVL1316:
2376:src/display.c **** 	  }
 11478              		.loc 1 2376 10 view .LVU3723
 11479 0aa8 C0E7     		b	.L989
 11480              	.L1264:
2368:src/display.c **** 	  *p = '\0';
 11481              		.loc 1 2368 6 is_stmt 1 view .LVU3724
2368:src/display.c **** 	  *p = '\0';
 11482              		.loc 1 2368 10 is_stmt 0 view .LVU3725
 11483 0aaa 8C49     		ldr	r1, .L1277+16
 11484 0aac FFF7FEFF 		bl	scopy
 11485              	.LVL1317:
2368:src/display.c **** 	  *p = '\0';
 11486              		.loc 1 2368 10 view .LVU3726
 11487 0ab0 0346     		mov	r3, r0
 11488              	.LVL1318:
2368:src/display.c **** 	  *p = '\0';
 11489              		.loc 1 2368 10 view .LVU3727
 11490 0ab2 A9E7     		b	.L988
 11491              	.LVL1319:
 11492              	.L1016:
2368:src/display.c **** 	  *p = '\0';
 11493              		.loc 1 2368 10 view .LVU3728
 11494              	.LBE675:
 11495              	.LBE685:
2848:src/display.c **** 	  if (i > 0)
 11496              		.loc 1 2848 4 is_stmt 1 view .LVU3729
2848:src/display.c **** 	  if (i > 0)
 11497              		.loc 1 2848 8 is_stmt 0 view .LVU3730
 11498 0ab4 DBF80030 		ldr	r3, [fp]
 11499 0ab8 B3F8E007 		ldrh	r0, [r3, #2016]
 11500              	.LVL1320:
ARM GAS  /tmp/ccDDbRKQ.s 			page 328


2849:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11501              		.loc 1 2849 4 is_stmt 1 view .LVU3731
2849:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11502              		.loc 1 2849 7 is_stmt 0 view .LVU3732
 11503 0abc 90B1     		cbz	r0, .L1030
2850:src/display.c **** 	  else
 11504              		.loc 1 2850 6 is_stmt 1 view .LVU3733
 11505 0abe FFF7FEFF 		bl	getprog
 11506              	.LVL1321:
2850:src/display.c **** 	  else
 11507              		.loc 1 2850 6 is_stmt 0 view .LVU3734
 11508 0ac2 1EA9     		add	r1, sp, #120
 11509              	.LVL1322:
2850:src/display.c **** 	  else
 11510              		.loc 1 2850 6 view .LVU3735
 11511 0ac4 FFF7FEFF 		bl	prt
 11512              	.LVL1323:
2850:src/display.c **** 	  else
 11513              		.loc 1 2850 6 view .LVU3736
 11514 0ac8 FFF7FEFF 		bl	set_status
 11515              	.LVL1324:
 11516              	.L1031:
2853:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11517              		.loc 1 2853 4 is_stmt 1 view .LVU3737
 11518 0acc 8920     		movs	r0, #137
 11519 0ace FFF7FEFF 		bl	set_dot
 11520              	.LVL1325:
2855:src/display.c **** 	  goto nostk;
 11521              		.loc 1 2855 6 view .LVU3738
2856:src/display.c **** 	}
 11522              		.loc 1 2856 4 view .LVU3739
2860:src/display.c **** 	if (!skip) {
 11523              		.loc 1 2860 2 view .LVU3740
2855:src/display.c **** 	  goto nostk;
 11524              		.loc 1 2855 12 is_stmt 0 view .LVU3741
 11525 0ad2 0126     		movs	r6, #1
2860:src/display.c **** 	if (!skip) {
 11526              		.loc 1 2860 2 view .LVU3742
 11527 0ad4 FFF7FEFF 		bl	show_flags
 11528              	.LVL1326:
 11529              	.L1225:
2861:src/display.c **** 	  if (State2.runmode) {
 11530              		.loc 1 2861 2 is_stmt 1 view .LVU3743
 11531 0ad8 814B     		ldr	r3, .L1277+20
 11532 0ada DFF82482 		ldr	r8, .L1277+52
 11533 0ade 0093     		str	r3, [sp]
 11534 0ae0 FFF7D0BA 		b	.L946
 11535              	.LVL1327:
 11536              	.L1030:
2852:src/display.c **** 	  set_dot(STO_annun);
 11537              		.loc 1 2852 6 view .LVU3744
 11538 0ae4 7F48     		ldr	r0, .L1277+24
 11539              	.LVL1328:
2852:src/display.c **** 	  set_dot(STO_annun);
 11540              		.loc 1 2852 6 is_stmt 0 view .LVU3745
 11541 0ae6 FFF7FEFF 		bl	set_status
 11542              	.LVL1329:
ARM GAS  /tmp/ccDDbRKQ.s 			page 329


2852:src/display.c **** 	  set_dot(STO_annun);
 11543              		.loc 1 2852 6 view .LVU3746
 11544 0aea EFE7     		b	.L1031
 11545              	.L1263:
2810:src/display.c **** 	    j = State2.alpha_pos;
 11546              		.loc 1 2810 6 is_stmt 1 view .LVU3747
2810:src/display.c **** 	    j = State2.alpha_pos;
 11547              		.loc 1 2810 22 is_stmt 0 view .LVU3748
 11548 0aec DBF80010 		ldr	r1, [fp]
 11549 0af0 0293     		str	r3, [sp, #8]
2810:src/display.c **** 	    j = State2.alpha_pos;
 11550              		.loc 1 2810 11 view .LVU3749
 11551 0af2 1EA8     		add	r0, sp, #120
 11552              	.LVL1330:
2810:src/display.c **** 	    j = State2.alpha_pos;
 11553              		.loc 1 2810 11 view .LVU3750
 11554 0af4 01F5F661 		add	r1, r1, #1968
 11555 0af8 FFF7FEFF 		bl	scopy
 11556              	.LVL1331:
2811:src/display.c **** 	    if (j != 0) {
 11557              		.loc 1 2811 16 view .LVU3751
 11558 0afc 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 11559              	.LVL1332:
2811:src/display.c **** 	    if (j != 0) {
 11560              		.loc 1 2811 6 is_stmt 1 view .LVU3752
2812:src/display.c **** 	      i = slen(buf);
 11561              		.loc 1 2812 6 view .LVU3753
2812:src/display.c **** 	      i = slen(buf);
 11562              		.loc 1 2812 9 is_stmt 0 view .LVU3754
 11563 0afe 22BB     		cbnz	r2, .L1267
2825:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11564              		.loc 1 2825 8 is_stmt 1 view .LVU3755
2825:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11565              		.loc 1 2825 11 is_stmt 0 view .LVU3756
 11566 0b00 3DB1     		cbz	r5, .L1028
2825:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11567              		.loc 1 2825 31 discriminator 1 view .LVU3757
 11568 0b02 BAF1000F 		cmp	r10, #0
 11569 0b06 04D1     		bne	.L1028
2826:src/display.c **** 		*bp++ = '\0';
 11570              		.loc 1 2826 3 is_stmt 1 view .LVU3758
 11571              	.LVL1333:
2826:src/display.c **** 		*bp++ = '\0';
 11572              		.loc 1 2826 23 is_stmt 0 view .LVU3759
 11573 0b08 05F11003 		add	r3, r5, #16
2827:src/display.c **** 	      }
 11574              		.loc 1 2827 9 view .LVU3760
 11575 0b0c 0022     		movs	r2, #0
 11576              	.LVL1334:
2826:src/display.c **** 		*bp++ = '\0';
 11577              		.loc 1 2826 9 view .LVU3761
 11578 0b0e 0370     		strb	r3, [r0]
 11579              	.LVL1335:
2827:src/display.c **** 	      }
 11580              		.loc 1 2827 3 is_stmt 1 view .LVU3762
2827:src/display.c **** 	      }
 11581              		.loc 1 2827 9 is_stmt 0 view .LVU3763
ARM GAS  /tmp/ccDDbRKQ.s 			page 330


 11582 0b10 4270     		strb	r2, [r0, #1]
 11583              	.LVL1336:
 11584              	.L1028:
2829:src/display.c **** 	    }
 11585              		.loc 1 2829 8 is_stmt 1 view .LVU3764
 11586 0b12 1EA8     		add	r0, sp, #120
 11587 0b14 FFF7FEFF 		bl	set_status_right
 11588              	.LVL1337:
 11589              	.L1027:
2831:src/display.c **** 	      bp = buf;
 11590              		.loc 1 2831 6 view .LVU3765
2831:src/display.c **** 	      bp = buf;
 11591              		.loc 1 2831 9 is_stmt 0 view .LVU3766
 11592 0b18 002D     		cmp	r5, #0
 11593 0b1a 58D0     		beq	.L1019
2831:src/display.c **** 	      bp = buf;
 11594              		.loc 1 2831 27 discriminator 1 view .LVU3767
 11595 0b1c BAF1000F 		cmp	r10, #0
 11596 0b20 55D0     		beq	.L1019
2832:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11597              		.loc 1 2832 8 is_stmt 1 view .LVU3768
 11598              	.LVL1338:
2833:src/display.c **** 	      *bp++ = '\0';
 11599              		.loc 1 2833 8 view .LVU3769
 11600              	.LBB686:
 11601              	.LBB687:
3500:src/display.c **** 	if (State2.runmode) {
 11602              		.loc 1 3500 5 is_stmt 0 view .LVU3770
 11603 0b22 B7F90030 		ldrsh	r3, [r7]
 11604              	.LBE687:
 11605              	.LBE686:
2833:src/display.c **** 	      *bp++ = '\0';
 11606              		.loc 1 2833 28 view .LVU3771
 11607 0b26 1035     		adds	r5, r5, #16
2834:src/display.c **** 	      set_status_top(buf);
 11608              		.loc 1 2834 14 view .LVU3772
 11609 0b28 0022     		movs	r2, #0
2833:src/display.c **** 	      *bp++ = '\0';
 11610              		.loc 1 2833 14 view .LVU3773
 11611 0b2a 8DF87850 		strb	r5, [sp, #120]
2834:src/display.c **** 	      set_status_top(buf);
 11612              		.loc 1 2834 8 is_stmt 1 view .LVU3774
 11613              	.LVL1339:
2834:src/display.c **** 	      set_status_top(buf);
 11614              		.loc 1 2834 14 is_stmt 0 view .LVU3775
 11615 0b2e 8DF87920 		strb	r2, [sp, #121]
2835:src/display.c **** 	      no_status_top = 1;
 11616              		.loc 1 2835 8 is_stmt 1 view .LVU3776
 11617              	.LVL1340:
 11618              	.LBB689:
 11619              	.LBI686:
3499:src/display.c **** 	if (no_status_top) return;
 11620              		.loc 1 3499 19 view .LVU3777
 11621              	.LBB688:
3500:src/display.c **** 	if (State2.runmode) {
 11622              		.loc 1 3500 2 view .LVU3778
3500:src/display.c **** 	if (State2.runmode) {
ARM GAS  /tmp/ccDDbRKQ.s 			page 331


 11623              		.loc 1 3500 5 is_stmt 0 view .LVU3779
 11624 0b32 13B9     		cbnz	r3, .L1029
 11625 0b34 1EA8     		add	r0, sp, #120
 11626              	.LVL1341:
3500:src/display.c **** 	if (State2.runmode) {
 11627              		.loc 1 3500 5 view .LVU3780
 11628 0b36 FFF7FEFF 		bl	set_status_top.part.0
 11629              	.LVL1342:
 11630              	.L1029:
3500:src/display.c **** 	if (State2.runmode) {
 11631              		.loc 1 3500 5 view .LVU3781
 11632              	.LBE688:
 11633              	.LBE689:
2836:src/display.c **** 	      //annuc = 1;
 11634              		.loc 1 2836 8 is_stmt 1 view .LVU3782
2836:src/display.c **** 	      //annuc = 1;
 11635              		.loc 1 2836 22 is_stmt 0 view .LVU3783
 11636 0b3a 0123     		movs	r3, #1
 11637 0b3c 3B80     		strh	r3, [r7]	@ movhi
2858:src/display.c ****       nostk:
 11638              		.loc 1 2858 2 is_stmt 1 view .LVU3784
 11639 0b3e FFF7FEFF 		bl	show_stack
 11640              	.LVL1343:
2860:src/display.c **** 	if (!skip) {
 11641              		.loc 1 2860 2 view .LVU3785
 11642 0b42 FFF7FEFF 		bl	show_flags
 11643              	.LVL1344:
2861:src/display.c **** 	  if (State2.runmode) {
 11644              		.loc 1 2861 2 view .LVU3786
 11645 0b46 FFF79DBA 		b	.L946
 11646              	.LVL1345:
 11647              	.L1267:
2813:src/display.c **** 	      j *= 6;
 11648              		.loc 1 2813 8 view .LVU3787
2813:src/display.c **** 	      j *= 6;
 11649              		.loc 1 2813 12 is_stmt 0 view .LVU3788
 11650 0b4a 1EA8     		add	r0, sp, #120
 11651              	.LVL1346:
2813:src/display.c **** 	      j *= 6;
 11652              		.loc 1 2813 12 view .LVU3789
 11653 0b4c 0392     		str	r2, [sp, #12]
 11654 0b4e FFF7FEFF 		bl	slen
 11655              	.LVL1347:
2814:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11656              		.loc 1 2814 8 is_stmt 1 view .LVU3790
2815:src/display.c **** 		{
 11657              		.loc 1 2815 8 view .LVU3791
2814:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11658              		.loc 1 2814 10 is_stmt 0 view .LVU3792
 11659 0b52 039A     		ldr	r2, [sp, #12]
 11660 0b54 02EB4202 		add	r2, r2, r2, lsl #1
2815:src/display.c **** 		{
 11661              		.loc 1 2815 15 view .LVU3793
 11662 0b58 A0EB4200 		sub	r0, r0, r2, lsl #1
 11663              	.LVL1348:
2815:src/display.c **** 		{
 11664              		.loc 1 2815 11 view .LVU3794
ARM GAS  /tmp/ccDDbRKQ.s 			page 332


 11665 0b5c 1328     		cmp	r0, #19
 11666 0b5e 3CDD     		ble	.L1026
2817:src/display.c **** 		  set_status_right(buf);
 11667              		.loc 1 2817 5 is_stmt 1 view .LVU3795
2817:src/display.c **** 		  set_status_right(buf);
 11668              		.loc 1 2817 20 is_stmt 0 view .LVU3796
 11669 0b60 28AB     		add	r3, sp, #160
 11670 0b62 1A18     		adds	r2, r3, r0
 11671 0b64 029B     		ldr	r3, [sp, #8]
 11672 0b66 02F8283C 		strb	r3, [r2, #-40]
2818:src/display.c **** 		}
 11673              		.loc 1 2818 5 is_stmt 1 view .LVU3797
 11674 0b6a 1EA8     		add	r0, sp, #120
 11675 0b6c FFF7FEFF 		bl	set_status_right
 11676              	.LVL1349:
 11677 0b70 D2E7     		b	.L1027
 11678              	.LVL1350:
 11679              	.L1262:
2808:src/display.c **** 	  } else if (State2.alphas) {
 11680              		.loc 1 2808 6 view .LVU3798
2808:src/display.c **** 	  } else if (State2.alphas) {
 11681              		.loc 1 2808 48 is_stmt 0 view .LVU3799
 11682 0b72 581E     		subs	r0, r3, #1
 11683 0b74 0492     		str	r2, [sp, #16]
 11684 0b76 FFF7FEFF 		bl	get_reg_n
 11685              	.LVL1351:
 11686              	.LBB690:
 11687              	.LBI690:
3323:src/display.c **** 	int glen = *graphic++;
 11688              		.loc 1 3323 19 is_stmt 1 view .LVU3800
 11689              	.LBB691:
3324:src/display.c **** 	int i, j;
 11690              		.loc 1 3324 2 view .LVU3801
3324:src/display.c **** 	int i, j;
 11691              		.loc 1 3324 6 is_stmt 0 view .LVU3802
 11692 0b7a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 11693              	.LVL1352:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11694              		.loc 1 3325 2 is_stmt 1 view .LVU3803
3331:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11695              		.loc 1 3331 2 view .LVU3804
3331:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11696              		.loc 1 3331 5 is_stmt 0 view .LVU3805
 11697 0b7c 3BB3     		cbz	r3, .L1019
3332:src/display.c **** 
 11698              		.loc 1 3332 2 is_stmt 1 view .LVU3806
 11699              	.LVL1353:
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11700              		.loc 1 3334 2 view .LVU3807
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11701              		.loc 1 3334 12 view .LVU3808
 11702 0b7e 421C     		adds	r2, r0, #1
 11703 0b80 0392     		str	r2, [sp, #12]
 11704 0b82 4A2B     		cmp	r3, #74
 11705 0b84 D4BF     		ite	le
 11706 0b86 D218     		addle	r2, r2, r3
 11707 0b88 4A32     		addgt	r2, r2, #74
ARM GAS  /tmp/ccDDbRKQ.s 			page 333


 11708 0b8a 0292     		str	r2, [sp, #8]
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11709              		.loc 1 3334 8 is_stmt 0 view .LVU3809
 11710 0b8c 049A     		ldr	r2, [sp, #16]
 11711 0b8e CDE90468 		strd	r6, r8, [sp, #16]
 11712 0b92 1546     		mov	r5, r2
 11713              	.LVL1354:
 11714              	.L1020:
3335:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11715              		.loc 1 3335 14 is_stmt 1 view .LVU3810
 11716 0b94 0123     		movs	r3, #1
 11717 0b96 DDF80C80 		ldr	r8, [sp, #12]
 11718 0b9a 03FA05FA 		lsl	r10, r3, r5
 11719 0b9e 05F19406 		add	r6, r5, #148
 11720 0ba2 06E0     		b	.L1023
 11721              	.LVL1355:
 11722              	.L1269:
 11723              	.LBB692:
 11724              	.LBB693:
 274:src/display.c ****   else	clr_dot(n);
 11725              		.loc 1 274 11 is_stmt 0 view .LVU3811
 11726 0ba4 FFF7FEFF 		bl	set_dot
 11727              	.LVL1356:
 11728              	.L1022:
 274:src/display.c ****   else	clr_dot(n);
 11729              		.loc 1 274 11 view .LVU3812
 11730              	.LBE693:
 11731              	.LBE692:
3335:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11732              		.loc 1 3335 23 is_stmt 1 view .LVU3813
3335:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11733              		.loc 1 3335 14 view .LVU3814
3335:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11734              		.loc 1 3335 4 is_stmt 0 view .LVU3815
 11735 0ba8 029B     		ldr	r3, [sp, #8]
 11736 0baa 4345     		cmp	r3, r8
 11737 0bac 06F10606 		add	r6, r6, #6
 11738 0bb0 08D0     		beq	.L1268
 11739              	.LVL1357:
 11740              	.L1023:
3340:src/display.c **** #endif
 11741              		.loc 1 3340 6 is_stmt 1 view .LVU3816
 11742              	.LBB696:
 11743              	.LBI692:
 273:src/display.c ****   if (on)	set_dot(n);
 11744              		.loc 1 273 6 view .LVU3817
 11745              	.LBB694:
 274:src/display.c ****   else	clr_dot(n);
 11746              		.loc 1 274 3 view .LVU3818
 274:src/display.c ****   else	clr_dot(n);
 11747              		.loc 1 274 11 view .LVU3819
 275:src/display.c **** }
 11748              		.loc 1 275 8 view .LVU3820
 11749              	.LBE694:
 11750              	.LBE696:
3340:src/display.c **** #endif
 11751              		.loc 1 3340 37 is_stmt 0 view .LVU3821
ARM GAS  /tmp/ccDDbRKQ.s 			page 334


 11752 0bb2 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 11753              	.LVL1358:
 11754              	.LBB697:
 11755              	.LBB695:
 274:src/display.c ****   else	clr_dot(n);
 11756              		.loc 1 274 6 view .LVU3822
 11757 0bb6 13EA0A0F 		tst	r3, r10
 274:src/display.c ****   else	clr_dot(n);
 11758              		.loc 1 274 11 view .LVU3823
 11759 0bba 3046     		mov	r0, r6
 274:src/display.c ****   else	clr_dot(n);
 11760              		.loc 1 274 6 view .LVU3824
 11761 0bbc F2D1     		bne	.L1269
 275:src/display.c **** }
 11762              		.loc 1 275 8 view .LVU3825
 11763 0bbe FFF7FEFF 		bl	clr_dot
 11764              	.LVL1359:
 11765 0bc2 F1E7     		b	.L1022
 11766              	.LVL1360:
 11767              	.L1268:
 275:src/display.c **** }
 11768              		.loc 1 275 8 view .LVU3826
 11769              	.LBE695:
 11770              	.LBE697:
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11771              		.loc 1 3334 17 is_stmt 1 view .LVU3827
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11772              		.loc 1 3334 18 is_stmt 0 view .LVU3828
 11773 0bc4 0135     		adds	r5, r5, #1
 11774              	.LVL1361:
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11775              		.loc 1 3334 12 is_stmt 1 view .LVU3829
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11776              		.loc 1 3334 2 is_stmt 0 view .LVU3830
 11777 0bc6 062D     		cmp	r5, #6
 11778 0bc8 E4D1     		bne	.L1020
 11779 0bca DDE90468 		ldrd	r6, r8, [sp, #16]
 11780              	.LVL1362:
 11781              	.L1019:
3334:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11782              		.loc 1 3334 2 view .LVU3831
 11783              	.LBE691:
 11784              	.LBE690:
2858:src/display.c ****       nostk:
 11785              		.loc 1 2858 2 is_stmt 1 view .LVU3832
 11786 0bce FFF7FEFF 		bl	show_stack
 11787              	.LVL1363:
2860:src/display.c **** 	if (!skip) {
 11788              		.loc 1 2860 2 view .LVU3833
 11789 0bd2 FFF7FEFF 		bl	show_flags
 11790              	.LVL1364:
2861:src/display.c **** 	  if (State2.runmode) {
 11791              		.loc 1 2861 2 view .LVU3834
 11792 0bd6 FFF755BA 		b	.L946
 11793              	.LVL1365:
 11794              	.L1026:
2821:src/display.c **** 	      }
ARM GAS  /tmp/ccDDbRKQ.s 			page 335


 11795              		.loc 1 2821 3 view .LVU3835
 11796 0bda 1EA8     		add	r0, sp, #120
 11797 0bdc FFF7FEFF 		bl	set_status
 11798              	.LVL1366:
 11799 0be0 9AE7     		b	.L1027
 11800              	.LVL1367:
 11801              	.L1259:
 11802              	.LBB698:
 11803              	.LBB676:
 11804              	.LBB668:
2397:src/display.c **** 	    end = regK_idx;
 11805              		.loc 1 2397 6 view .LVU3836
2398:src/display.c **** 	    start = 3;
 11806              		.loc 1 2398 6 view .LVU3837
2399:src/display.c **** 	    group = 4;
 11807              		.loc 1 2399 6 view .LVU3838
2400:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11808              		.loc 1 2400 6 view .LVU3839
2401:src/display.c **** 	  }
 11809              		.loc 1 2401 6 view .LVU3840
 11810 0be2 4148     		ldr	r0, .L1277+28
 11811 0be4 FFF7FEFF 		bl	set_status
 11812              	.LVL1368:
2399:src/display.c **** 	    group = 4;
 11813              		.loc 1 2399 12 is_stmt 0 view .LVU3841
 11814 0be8 4FF0030A 		mov	r10, #3
2400:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11815              		.loc 1 2400 12 view .LVU3842
 11816 0bec 0425     		movs	r5, #4
2398:src/display.c **** 	    start = 3;
 11817              		.loc 1 2398 10 view .LVU3843
 11818 0bee 4FF06F09 		mov	r9, #111
2397:src/display.c **** 	    end = regK_idx;
 11819              		.loc 1 2397 11 view .LVU3844
 11820 0bf2 6423     		movs	r3, #100
 11821 0bf4 48E6     		b	.L991
 11822              	.LVL1369:
 11823              	.L1261:
2397:src/display.c **** 	    end = regK_idx;
 11824              		.loc 1 2397 11 view .LVU3845
 11825 0bf6 039E     		ldr	r6, [sp, #12]
 11826              	.LVL1370:
2397:src/display.c **** 	    end = regK_idx;
 11827              		.loc 1 2397 11 view .LVU3846
 11828 0bf8 1DE7     		b	.L986
 11829              	.LVL1371:
 11830              	.L1256:
2397:src/display.c **** 	    end = regK_idx;
 11831              		.loc 1 2397 11 view .LVU3847
 11832              	.LBE668:
2357:src/display.c **** 	  p = num_arg(buf, free_mem());
 11833              		.loc 1 2357 4 is_stmt 1 view .LVU3848
 11834 0bfa 3C48     		ldr	r0, .L1277+32
 11835 0bfc FFF7FEFF 		bl	set_status
 11836              	.LVL1372:
2358:src/display.c **** 	  p = scopy(p, " , FL. ");
 11837              		.loc 1 2358 4 view .LVU3849
ARM GAS  /tmp/ccDDbRKQ.s 			page 336


2358:src/display.c **** 	  p = scopy(p, " , FL. ");
 11838              		.loc 1 2358 21 is_stmt 0 view .LVU3850
 11839 0c00 FFF7FEFF 		bl	free_mem
 11840              	.LVL1373:
 11841 0c04 0146     		mov	r1, r0
2358:src/display.c **** 	  p = scopy(p, " , FL. ");
 11842              		.loc 1 2358 8 view .LVU3851
 11843 0c06 15A8     		add	r0, sp, #84
 11844              	.LVL1374:
2358:src/display.c **** 	  p = scopy(p, " , FL. ");
 11845              		.loc 1 2358 8 view .LVU3852
 11846 0c08 FFF7FEFF 		bl	num_arg
 11847              	.LVL1375:
2359:src/display.c **** 	  p = num_arg(p, free_flash());
 11848              		.loc 1 2359 4 is_stmt 1 view .LVU3853
2359:src/display.c **** 	  p = num_arg(p, free_flash());
 11849              		.loc 1 2359 8 is_stmt 0 view .LVU3854
 11850 0c0c 3849     		ldr	r1, .L1277+36
 11851 0c0e FFF7FEFF 		bl	scopy
 11852              	.LVL1376:
2359:src/display.c **** 	  p = num_arg(p, free_flash());
 11853              		.loc 1 2359 8 view .LVU3855
 11854 0c12 0546     		mov	r5, r0
 11855              	.LVL1377:
2360:src/display.c **** 	  *p = '\0';
 11856              		.loc 1 2360 4 is_stmt 1 view .LVU3856
2360:src/display.c **** 	  *p = '\0';
 11857              		.loc 1 2360 19 is_stmt 0 view .LVU3857
 11858 0c14 FFF7FEFF 		bl	free_flash
 11859              	.LVL1378:
2360:src/display.c **** 	  *p = '\0';
 11860              		.loc 1 2360 19 view .LVU3858
 11861 0c18 0146     		mov	r1, r0
2360:src/display.c **** 	  *p = '\0';
 11862              		.loc 1 2360 8 view .LVU3859
 11863 0c1a 2846     		mov	r0, r5
 11864 0c1c FFF7FEFF 		bl	num_arg
 11865              	.LVL1379:
 11866 0c20 0346     		mov	r3, r0
 11867              	.LVL1380:
2361:src/display.c **** 	  set_digits_string(buf, 0);
 11868              		.loc 1 2361 4 is_stmt 1 view .LVU3860
2361:src/display.c **** 	  set_digits_string(buf, 0);
 11869              		.loc 1 2361 7 is_stmt 0 view .LVU3861
 11870 0c22 0021     		movs	r1, #0
2362:src/display.c **** 	}
 11871              		.loc 1 2362 4 view .LVU3862
 11872 0c24 15A8     		add	r0, sp, #84
 11873              	.LVL1381:
2361:src/display.c **** 	  set_digits_string(buf, 0);
 11874              		.loc 1 2361 7 view .LVU3863
 11875 0c26 1970     		strb	r1, [r3]
 11876              	.LVL1382:
2362:src/display.c **** 	}
 11877              		.loc 1 2362 4 is_stmt 1 view .LVU3864
 11878 0c28 FFF7FEFF 		bl	set_digits_string
 11879              	.LVL1383:
ARM GAS  /tmp/ccDDbRKQ.s 			page 337


2362:src/display.c **** 	}
 11880              		.loc 1 2362 4 is_stmt 0 view .LVU3865
 11881 0c2c 03E7     		b	.L986
 11882              	.LVL1384:
 11883              	.L1255:
2362:src/display.c **** 	}
 11884              		.loc 1 2362 4 view .LVU3866
 11885              	.LBE676:
 11886              	.LBE698:
 11887              	.LBB699:
 11888              	.LBB638:
2462:src/display.c **** 	  if (lblpc != pc) {
 11889              		.loc 1 2462 4 is_stmt 1 view .LVU3867
2462:src/display.c **** 	  if (lblpc != pc) {
 11890              		.loc 1 2462 12 is_stmt 0 view .LVU3868
 11891 0c2e 2846     		mov	r0, r5
 11892 0c30 4146     		mov	r1, r8
 11893 0c32 FFF7FEFF 		bl	findmultilbl
 11894              	.LVL1385:
2462:src/display.c **** 	  if (lblpc != pc) {
 11895              		.loc 1 2462 10 view .LVU3869
 11896 0c36 85B2     		uxth	r5, r0
 11897              	.LVL1386:
2463:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11898              		.loc 1 2463 4 is_stmt 1 view .LVU3870
2463:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11899              		.loc 1 2463 7 is_stmt 0 view .LVU3871
 11900 0c38 AB45     		cmp	fp, r5
 11901 0c3a 3FF408AE 		beq	.L1228
2464:src/display.c **** 	    n = nLIB(lblpc);
 11902              		.loc 1 2464 6 is_stmt 1 view .LVU3872
 11903 0c3e 2D48     		ldr	r0, .L1277+40
 11904 0c40 3F21     		movs	r1, #63
 11905 0c42 FFF7FEFF 		bl	set_digits_string
 11906              	.LVL1387:
2465:src/display.c **** 	    if (n == REGION_RAM)
 11907              		.loc 1 2465 6 view .LVU3873
2466:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11908              		.loc 1 2466 6 view .LVU3874
2466:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11909              		.loc 1 2466 9 is_stmt 0 view .LVU3875
 11910 0c46 AA0B     		lsrs	r2, r5, #14
 11911              	.LVL1388:
2466:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11912              		.loc 1 2466 9 view .LVU3876
 11913 0c48 5CD1     		bne	.L1004
2467:src/display.c **** 	    else {
 11914              		.loc 1 2467 8 is_stmt 1 view .LVU3877
 11915 0c4a 2846     		mov	r0, r5
 11916 0c4c 0121     		movs	r1, #1
 11917 0c4e FFF7FEFF 		bl	set_exp
 11918              	.LVL1389:
2467:src/display.c **** 	    else {
 11919              		.loc 1 2467 8 is_stmt 0 view .LVU3878
 11920 0c52 FCE5     		b	.L1228
 11921              	.LVL1390:
 11922              	.L1250:
ARM GAS  /tmp/ccDDbRKQ.s 			page 338


2467:src/display.c **** 	    else {
 11923              		.loc 1 2467 8 view .LVU3879
 11924              	.LBE638:
 11925              	.LBE699:
2795:src/display.c **** 	  skip = 1;
 11926              		.loc 1 2795 4 is_stmt 1 view .LVU3880
 11927              	.LBB700:
 11928              	.LBI700:
2476:src/display.c **** 	char buf[16], *bp;
 11929              		.loc 1 2476 19 view .LVU3881
 11930              	.LBB701:
2477:src/display.c **** 	int n = State2.digval;
 11931              		.loc 1 2477 2 view .LVU3882
2478:src/display.c **** 	
 11932              		.loc 1 2478 2 view .LVU3883
2478:src/display.c **** 	
 11933              		.loc 1 2478 6 is_stmt 0 view .LVU3884
 11934 0c54 B4F808A0 		ldrh	r10, [r4, #8]
 11935              	.LVL1391:
2485:src/display.c **** 	  n;
 11936              		.loc 1 2485 2 is_stmt 1 view .LVU3885
2485:src/display.c **** 	  n;
 11937              		.loc 1 2485 54 is_stmt 0 view .LVU3886
 11938 0c58 CA07     		lsls	r2, r1, #31
 11939 0c5a 4CBF     		ite	mi
 11940 0c5c 0AF17009 		addmi	r9, r10, #112
2478:src/display.c **** 	
 11941              		.loc 1 2478 6 view .LVU3887
 11942 0c60 D146     		movpl	r9, r10
 11943              	.LVL1392:
2489:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11944              		.loc 1 2489 2 is_stmt 1 view .LVU3888
2489:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11945              		.loc 1 2489 5 is_stmt 0 view .LVU3889
 11946 0c62 11F00401 		ands	r1, r1, #4
 11947 0c66 00F08480 		beq	.L1007
2490:src/display.c **** 	}
 11948              		.loc 1 2490 4 is_stmt 1 view .LVU3890
2490:src/display.c **** 	}
 11949              		.loc 1 2490 15 is_stmt 0 view .LVU3891
 11950 0c6a 15A9     		add	r1, sp, #84
 11951 0c6c 4846     		mov	r0, r9
 11952 0c6e FFF7FEFF 		bl	alpha_rcl_s
 11953              	.LVL1393:
2490:src/display.c **** 	}
 11954              		.loc 1 2490 4 view .LVU3892
 11955 0c72 FFF7FEFF 		bl	set_status
 11956              	.LVL1394:
 11957              	.L1008:
2512:src/display.c ****       }
 11958              		.loc 1 2512 2 is_stmt 1 view .LVU3893
 11959 0c76 4846     		mov	r0, r9
 11960 0c78 0021     		movs	r1, #0
 11961 0c7a FFF7FEFF 		bl	format_reg
 11962              	.LVL1395:
2512:src/display.c ****       }
 11963              		.loc 1 2512 2 is_stmt 0 view .LVU3894
ARM GAS  /tmp/ccDDbRKQ.s 			page 339


 11964              	.LBE701:
 11965              	.LBE700:
2796:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 11966              		.loc 1 2796 4 is_stmt 1 view .LVU3895
2797:src/display.c **** 	    annunciators();
 11967              		.loc 1 2797 4 view .LVU3896
2797:src/display.c **** 	    annunciators();
 11968              		.loc 1 2797 7 is_stmt 0 view .LVU3897
 11969 0c7e 002D     		cmp	r5, #0
 11970 0c80 74D1     		bne	.L1014
2797:src/display.c **** 	    annunciators();
 11971              		.loc 1 2797 25 discriminator 1 view .LVU3898
 11972 0c82 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 11973 0c84 012B     		cmp	r3, #1
 11974 0c86 6BD0     		beq	.L1270
 11975              	.L1015:
2858:src/display.c ****       nostk:
 11976              		.loc 1 2858 2 is_stmt 1 view .LVU3899
 11977 0c88 FFF7FEFF 		bl	show_stack
 11978              	.LVL1396:
2860:src/display.c **** 	if (!skip) {
 11979              		.loc 1 2860 2 view .LVU3900
2578:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11980              		.loc 1 2578 6 is_stmt 0 view .LVU3901
 11981 0c8c 0026     		movs	r6, #0
2860:src/display.c **** 	if (!skip) {
 11982              		.loc 1 2860 2 view .LVU3902
 11983 0c8e FFF7FEFF 		bl	show_flags
 11984              	.LVL1397:
2861:src/display.c **** 	  if (State2.runmode) {
 11985              		.loc 1 2861 2 is_stmt 1 view .LVU3903
 11986 0c92 8DE5     		b	.L979
 11987              	.LVL1398:
 11988              	.L1254:
 11989              	.LBB704:
 11990              	.LBB626:
2757:src/display.c **** 	      copyreg(&z, x);
 11991              		.loc 1 2757 8 view .LVU3904
2757:src/display.c **** 	      copyreg(&z, x);
 11992              		.loc 1 2757 27 is_stmt 0 view .LVU3905
 11993 0c94 184B     		ldr	r3, .L1277+44
 11994 0c96 1E68     		ldr	r6, [r3]
 11995              	.LVL1399:
2758:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11996              		.loc 1 2758 8 is_stmt 1 view .LVU3906
 11997 0c98 15A8     		add	r0, sp, #84
 11998 0c9a 3146     		mov	r1, r6
 11999 0c9c FFF7FEFF 		bl	copyreg
 12000              	.LVL1400:
2759:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12001              		.loc 1 2759 8 view .LVU3907
 12002 0ca0 E8B2     		uxtb	r0, r5
 12003 0ca2 FFF7FEFF 		bl	sigma_val
 12004              	.LVL1401:
2760:src/display.c **** 	      copyreg(x, &z);
 12005              		.loc 1 2760 8 view .LVU3908
 12006 0ca6 FFF7FEFF 		bl	is_dblmode
ARM GAS  /tmp/ccDDbRKQ.s 			page 340


 12007              	.LVL1402:
 12008 0caa 0021     		movs	r1, #0
 12009 0cac 0246     		mov	r2, r0
 12010 0cae 3046     		mov	r0, r6
 12011 0cb0 FFF7FEFF 		bl	set_x
 12012              	.LVL1403:
2761:src/display.c **** 	      skip = 1;
 12013              		.loc 1 2761 8 view .LVU3909
 12014 0cb4 15A9     		add	r1, sp, #84
 12015 0cb6 3046     		mov	r0, r6
 12016 0cb8 FFF7FEFF 		bl	copyreg
 12017              	.LVL1404:
2762:src/display.c **** 	    }
 12018              		.loc 1 2762 8 view .LVU3910
2762:src/display.c **** 	    }
 12019              		.loc 1 2762 13 is_stmt 0 view .LVU3911
 12020 0cbc 0125     		movs	r5, #1
 12021              	.LVL1405:
2762:src/display.c **** 	    }
 12022              		.loc 1 2762 13 view .LVU3912
 12023 0cbe 64E5     		b	.L971
 12024              	.LVL1406:
 12025              	.L969:
2762:src/display.c **** 	    }
 12026              		.loc 1 2762 13 view .LVU3913
 12027              	.LBE626:
2731:src/display.c **** 	    else
 12028              		.loc 1 2731 8 is_stmt 1 view .LVU3914
 12029 0cc0 0E48     		ldr	r0, .L1277+48
 12030 0cc2 0021     		movs	r1, #0
 12031 0cc4 FFF7FEFF 		bl	set_digits_string
 12032              	.LVL1407:
2734:src/display.c **** 	  } else if (State2.runmode) {
 12033              		.loc 1 2734 11 is_stmt 0 view .LVU3915
 12034 0cc8 0125     		movs	r5, #1
 12035              	.LVL1408:
2731:src/display.c **** 	    else
 12036              		.loc 1 2731 8 view .LVU3916
 12037 0cca 5EE5     		b	.L971
 12038              	.L1278:
 12039              		.align	2
 12040              	.L1277:
 12041 0ccc 58000000 		.word	.LC36
 12042 0cd0 3C000000 		.word	.LC33
 12043 0cd4 00000000 		.word	SizeStatRegs
 12044 0cd8 4C000000 		.word	.LC35
 12045 0cdc 44000000 		.word	.LC34
 12046 0ce0 00000000 		.word	DispPlot
 12047 0ce4 88000000 		.word	.LC41
 12048 0ce8 5C000000 		.word	.LC37
 12049 0cec 2C000000 		.word	.LC31
 12050 0cf0 34000000 		.word	.LC32
 12051 0cf4 78000000 		.word	.LC39
 12052 0cf8 00000000 		.word	StackBase
 12053 0cfc 20000000 		.word	.LC30
 12054 0d00 00000000 		.word	DispMsg
 12055              	.LVL1409:
ARM GAS  /tmp/ccDDbRKQ.s 			page 341


 12056              	.L1004:
2731:src/display.c **** 	    else
 12057              		.loc 1 2731 8 view .LVU3917
 12058              	.LBE704:
 12059              	.LBB705:
 12060              	.LBB639:
2469:src/display.c **** 	    }
 12061              		.loc 1 2469 8 is_stmt 1 view .LVU3918
2469:src/display.c **** 	    }
 12062              		.loc 1 2469 37 is_stmt 0 view .LVU3919
 12063 0d04 02EB8202 		add	r2, r2, r2, lsl #2
 12064              	.LVL1410:
2469:src/display.c **** 	    }
 12065              		.loc 1 2469 8 view .LVU3920
 12066 0d08 09EB0200 		add	r0, r9, r2
 12067 0d0c 4146     		mov	r1, r8
 12068 0d0e FFF7FEFF 		bl	set_exp_digits_string
 12069              	.LVL1411:
2469:src/display.c **** 	    }
 12070              		.loc 1 2469 8 view .LVU3921
 12071              	.LBE639:
 12072              	.LBE705:
2858:src/display.c ****       nostk:
 12073              		.loc 1 2858 2 is_stmt 1 view .LVU3922
 12074 0d12 9CE5     		b	.L1228
 12075              	.LVL1412:
 12076              	.L1253:
 12077              	.LBB706:
 12078              	.LBB627:
2737:src/display.c **** 	      decimal64 z;
 12079              		.loc 1 2737 8 view .LVU3923
2738:src/display.c **** 
 12080              		.loc 1 2738 8 view .LVU3924
2740:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12081              		.loc 1 2740 8 view .LVU3925
 12082 0d14 0CA8     		add	r0, sp, #48
 12083 0d16 FFF7FEFF 		bl	getX
 12084              	.LVL1413:
2741:src/display.c **** 		const unsigned int f = argKIND(op);
 12085              		.loc 1 2741 8 view .LVU3926
2741:src/display.c **** 		const unsigned int f = argKIND(op);
 12086              		.loc 1 2741 11 is_stmt 0 view .LVU3927
 12087 0d1a C5F30723 		ubfx	r3, r5, #8, #8
 12088 0d1e 022B     		cmp	r3, #2
 12089 0d20 46D1     		bne	.L973
 12090              	.LBB628:
2742:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12091              		.loc 1 2742 3 is_stmt 1 view .LVU3928
2742:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12092              		.loc 1 2742 22 is_stmt 0 view .LVU3929
 12093 0d22 EDB2     		uxtb	r5, r5
 12094              	.LVL1414:
2743:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12095              		.loc 1 2743 3 is_stmt 1 view .LVU3930
2743:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12096              		.loc 1 2743 6 is_stmt 0 view .LVU3931
 12097 0d24 9B2D     		cmp	r5, #155
ARM GAS  /tmp/ccDDbRKQ.s 			page 342


 12098              	.LBB629:
2746:src/display.c **** 		}
 12099              		.loc 1 2746 5 view .LVU3932
 12100 0d26 0DF15408 		add	r8, sp, #84
 12101              	.LBE629:
2743:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12102              		.loc 1 2743 6 view .LVU3933
 12103 0d2a 3DD8     		bhi	.L974
2743:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12104              		.loc 1 2743 28 discriminator 1 view .LVU3934
 12105 0d2c 1823     		movs	r3, #24
 12106 0d2e 2C4A     		ldr	r2, .L1279
 12107 0d30 03FB05F3 		mul	r3, r3, r5
 12108 0d34 D358     		ldr	r3, [r2, r3]
2743:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12109              		.loc 1 2743 23 discriminator 1 view .LVU3935
 12110 0d36 002B     		cmp	r3, #0
 12111 0d38 36D0     		beq	.L974
 12112              	.LBB630:
2744:src/display.c **** 		  update_speed(0);
 12113              		.loc 1 2744 5 is_stmt 1 view .LVU3936
 12114              	.LVL1415:
2745:src/display.c **** 		  fp(&r, &x);
 12115              		.loc 1 2745 20 view .LVU3937
2746:src/display.c **** 		}
 12116              		.loc 1 2746 5 view .LVU3938
 12117 0d3a 0CA9     		add	r1, sp, #48
 12118 0d3c 4046     		mov	r0, r8
 12119 0d3e 9847     		blx	r3
 12120              	.LVL1416:
 12121              	.L975:
2746:src/display.c **** 		}
 12122              		.loc 1 2746 5 is_stmt 0 view .LVU3939
 12123              	.LBE630:
 12124              	.LBE628:
2752:src/display.c **** 	      packed_from_number(&z, &r);
 12125              		.loc 1 2752 8 is_stmt 1 discriminator 1 view .LVU3940
 12126 0d40 284A     		ldr	r2, .L1279+4
 12127 0d42 4146     		mov	r1, r8
 12128 0d44 4046     		mov	r0, r8
 12129 0d46 FFF7FEFF 		bl	decNumberNormalize
 12130              	.LVL1417:
2753:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12131              		.loc 1 2753 8 discriminator 1 view .LVU3941
 12132 0d4a 4146     		mov	r1, r8
 12133 0d4c 06A8     		add	r0, sp, #24
 12134 0d4e FFF7FEFF 		bl	packed_from_number
 12135              	.LVL1418:
2754:src/display.c **** 	      skip = 1;
 12136              		.loc 1 2754 8 discriminator 1 view .LVU3942
 12137 0d52 0022     		movs	r2, #0
 12138 0d54 06A8     		add	r0, sp, #24
 12139 0d56 1146     		mov	r1, r2
 12140 0d58 FFF7FEFF 		bl	set_x
 12141              	.LVL1419:
2755:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12142              		.loc 1 2755 8 discriminator 1 view .LVU3943
ARM GAS  /tmp/ccDDbRKQ.s 			page 343


2755:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12143              		.loc 1 2755 13 is_stmt 0 discriminator 1 view .LVU3944
 12144 0d5c 0125     		movs	r5, #1
 12145              	.LBE627:
 12146 0d5e 14E5     		b	.L971
 12147              	.LVL1420:
 12148              	.L1270:
2755:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12149              		.loc 1 2755 13 discriminator 1 view .LVU3945
 12150              	.LBE706:
2797:src/display.c **** 	    annunciators();
 12151              		.loc 1 2797 56 discriminator 2 view .LVU3946
 12152 0d60 DBF80030 		ldr	r3, [fp]
 12153 0d64 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12154 0d68 DD07     		lsls	r5, r3, #31
 12155 0d6a 8DD5     		bpl	.L1015
 12156              	.L1014:
2798:src/display.c **** 	  }
 12157              		.loc 1 2798 6 is_stmt 1 view .LVU3947
 12158 0d6c FFF7FEFF 		bl	annunciators
 12159              	.LVL1421:
 12160 0d70 6DE5     		b	.L1228
 12161              	.LVL1422:
 12162              	.L1007:
 12163              	.LBB707:
 12164              	.LBB702:
2493:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12165              		.loc 1 2493 4 view .LVU3948
 12166 0d72 0DF15408 		add	r8, sp, #84
 12167 0d76 1022     		movs	r2, #16
 12168 0d78 4046     		mov	r0, r8
 12169 0d7a FFF7FEFF 		bl	xset
 12170              	.LVL1423:
2497:src/display.c **** #endif
 12171              		.loc 1 2497 4 view .LVU3949
2497:src/display.c **** #endif
 12172              		.loc 1 2497 9 is_stmt 0 view .LVU3950
 12173 0d7e 1A49     		ldr	r1, .L1279+8
 12174 0d80 4046     		mov	r0, r8
 12175 0d82 FFF7FEFF 		bl	scopy_spc
 12176              	.LVL1424:
2499:src/display.c **** 	    *bp++ = '.';
 12177              		.loc 1 2499 8 view .LVU3951
 12178 0d86 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12179              	.LVL1425:
2499:src/display.c **** 	    *bp++ = '.';
 12180              		.loc 1 2499 4 is_stmt 1 view .LVU3952
2499:src/display.c **** 	    *bp++ = '.';
 12181              		.loc 1 2499 7 is_stmt 0 view .LVU3953
 12182 0d88 DB07     		lsls	r3, r3, #31
 12183 0d8a 1FD5     		bpl	.L1009
2500:src/display.c **** 	    if (n >= 100) {
 12184              		.loc 1 2500 6 is_stmt 1 view .LVU3954
 12185              	.LVL1426:
2500:src/display.c **** 	    if (n >= 100) {
 12186              		.loc 1 2500 12 is_stmt 0 view .LVU3955
 12187 0d8c 2E23     		movs	r3, #46
ARM GAS  /tmp/ccDDbRKQ.s 			page 344


2501:src/display.c **** 	      *bp++ = '1';
 12188              		.loc 1 2501 9 view .LVU3956
 12189 0d8e BAF1630F 		cmp	r10, #99
2500:src/display.c **** 	    if (n >= 100) {
 12190              		.loc 1 2500 12 view .LVU3957
 12191 0d92 0370     		strb	r3, [r0]
2501:src/display.c **** 	      *bp++ = '1';
 12192              		.loc 1 2501 6 is_stmt 1 view .LVU3958
2501:src/display.c **** 	      *bp++ = '1';
 12193              		.loc 1 2501 9 is_stmt 0 view .LVU3959
 12194 0d94 15DC     		bgt	.L1010
2500:src/display.c **** 	    if (n >= 100) {
 12195              		.loc 1 2500 9 view .LVU3960
 12196 0d96 0130     		adds	r0, r0, #1
 12197              	.LVL1427:
 12198              	.L1011:
2507:src/display.c **** 	  else
 12199              		.loc 1 2507 6 is_stmt 1 view .LVU3961
2507:src/display.c **** 	  else
 12200              		.loc 1 2507 11 is_stmt 0 view .LVU3962
 12201 0d98 5146     		mov	r1, r10
 12202 0d9a 0222     		movs	r2, #2
 12203 0d9c FFF7FEFF 		bl	num_arg_0
 12204              	.LVL1428:
 12205              	.L1013:
2510:src/display.c **** 	}
 12206              		.loc 1 2510 4 is_stmt 1 view .LVU3963
 12207 0da0 4046     		mov	r0, r8
 12208 0da2 FFF7FEFF 		bl	set_status
 12209              	.LVL1429:
 12210 0da6 66E7     		b	.L1008
 12211              	.LVL1430:
 12212              	.L974:
2510:src/display.c **** 	}
 12213              		.loc 1 2510 4 is_stmt 0 view .LVU3964
 12214              	.LBE702:
 12215              	.LBE707:
 12216              	.LBB708:
 12217              	.LBB632:
 12218              	.LBB631:
2749:src/display.c **** 	      } else
 12219              		.loc 1 2749 5 is_stmt 1 view .LVU3965
 12220 0da8 4046     		mov	r0, r8
 12221 0daa FFF7FEFF 		bl	set_NaN
 12222              	.LVL1431:
 12223 0dae C7E7     		b	.L975
 12224              	.LVL1432:
 12225              	.L973:
2749:src/display.c **** 	      } else
 12226              		.loc 1 2749 5 is_stmt 0 view .LVU3966
 12227              	.LBE631:
2751:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12228              		.loc 1 2751 3 is_stmt 1 view .LVU3967
 12229 0db0 0DF15408 		add	r8, sp, #84
 12230 0db4 0CAA     		add	r2, sp, #48
 12231 0db6 05F07F01 		and	r1, r5, #127
 12232 0dba 4046     		mov	r0, r8
ARM GAS  /tmp/ccDDbRKQ.s 			page 345


 12233 0dbc FFF7FEFF 		bl	do_conv
 12234              	.LVL1433:
 12235 0dc0 BEE7     		b	.L975
 12236              	.LVL1434:
 12237              	.L1010:
2751:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12238              		.loc 1 2751 3 is_stmt 0 view .LVU3968
 12239              	.LBE632:
 12240              	.LBE708:
 12241              	.LBB709:
 12242              	.LBB703:
2502:src/display.c **** 	      n -= 100;
 12243              		.loc 1 2502 8 is_stmt 1 view .LVU3969
2502:src/display.c **** 	      n -= 100;
 12244              		.loc 1 2502 14 is_stmt 0 view .LVU3970
 12245 0dc2 3123     		movs	r3, #49
 12246 0dc4 4370     		strb	r3, [r0, #1]
2503:src/display.c **** 	    }
 12247              		.loc 1 2503 8 is_stmt 1 view .LVU3971
2503:src/display.c **** 	    }
 12248              		.loc 1 2503 10 is_stmt 0 view .LVU3972
 12249 0dc6 AAF1640A 		sub	r10, r10, #100
 12250              	.LVL1435:
2502:src/display.c **** 	      n -= 100;
 12251              		.loc 1 2502 11 view .LVU3973
 12252 0dca 0230     		adds	r0, r0, #2
 12253              	.LVL1436:
 12254              	.L1009:
2506:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12255              		.loc 1 2506 4 is_stmt 1 view .LVU3974
2506:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12256              		.loc 1 2506 7 is_stmt 0 view .LVU3975
 12257 0dcc BAF1630F 		cmp	r10, #99
 12258 0dd0 E2DD     		ble	.L1011
2509:src/display.c **** 	  set_status(buf);
 12259              		.loc 1 2509 6 is_stmt 1 view .LVU3976
 12260              	.LVL1437:
2509:src/display.c **** 	  set_status(buf);
 12261              		.loc 1 2509 22 is_stmt 0 view .LVU3977
 12262 0dd2 064B     		ldr	r3, .L1279+12
 12263 0dd4 5344     		add	r3, r3, r10
2509:src/display.c **** 	  set_status(buf);
 12264              		.loc 1 2509 12 view .LVU3978
 12265 0dd6 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12266 0dda 0370     		strb	r3, [r0]
 12267 0ddc E0E7     		b	.L1013
 12268              	.L1280:
 12269 0dde 00BF     		.align	2
 12270              	.L1279:
 12271 0de0 00000000 		.word	monfuncs
 12272 0de4 00000000 		.word	Ctx
 12273 0de8 80000000 		.word	.LC40
 12274 0dec 9C000000 		.word	.LC28
 12275              	.LBE703:
 12276              	.LBE709:
 12277              		.cfi_endproc
 12278              	.LFE34:
ARM GAS  /tmp/ccDDbRKQ.s 			page 346


 12280              		.section	.text.frozen_display,"ax",%progbits
 12281              		.align	1
 12282              		.p2align 2,,3
 12283              		.global	frozen_display
 12284              		.syntax unified
 12285              		.thumb
 12286              		.thumb_func
 12287              		.fpu fpv4-sp-d16
 12289              	frozen_display:
 12290              	.LFB35:
3317:src/display.c **** 	State2.disp_freeze = 0;
 12291              		.loc 1 3317 7 is_stmt 1 view -0
 12292              		.cfi_startproc
 12293              		@ args = 0, pretend = 0, frame = 0
 12294              		@ frame_needed = 0, uses_anonymous_args = 0
3318:src/display.c **** 	display();
 12295              		.loc 1 3318 2 view .LVU3980
3317:src/display.c **** 	State2.disp_freeze = 0;
 12296              		.loc 1 3317 7 is_stmt 0 view .LVU3981
 12297 0000 10B5     		push	{r4, lr}
 12298              		.cfi_def_cfa_offset 8
 12299              		.cfi_offset 4, -8
 12300              		.cfi_offset 14, -4
3318:src/display.c **** 	display();
 12301              		.loc 1 3318 21 view .LVU3982
 12302 0002 064C     		ldr	r4, .L1283
 12303 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12304 0006 6FF30413 		bfc	r3, #4, #1
 12305 000a E375     		strb	r3, [r4, #23]
3319:src/display.c **** 	State2.disp_freeze = 1;
 12306              		.loc 1 3319 2 is_stmt 1 view .LVU3983
 12307 000c FFF7FEFF 		bl	display
 12308              	.LVL1438:
3320:src/display.c ****       }
 12309              		.loc 1 3320 2 view .LVU3984
3320:src/display.c ****       }
 12310              		.loc 1 3320 21 is_stmt 0 view .LVU3985
 12311 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12312 0012 43F01003 		orr	r3, r3, #16
 12313 0016 E375     		strb	r3, [r4, #23]
3321:src/display.c **** 
 12314              		.loc 1 3321 7 view .LVU3986
 12315 0018 10BD     		pop	{r4, pc}
 12316              	.L1284:
 12317 001a 00BF     		.align	2
 12318              	.L1283:
 12319 001c 00000000 		.word	StateWhileOn
 12320              		.cfi_endproc
 12321              	.LFE35:
 12323              		.section	.text.message,"ax",%progbits
 12324              		.align	1
 12325              		.p2align 2,,3
 12326              		.global	message
 12327              		.syntax unified
 12328              		.thumb
 12329              		.thumb_func
 12330              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccDDbRKQ.s 			page 347


 12332              	message:
 12333              	.LVL1439:
 12334              	.LFB46:
3519:src/display.c **** 	State2.disp_freeze = 0;
 12335              		.loc 1 3519 7 is_stmt 1 view -0
 12336              		.cfi_startproc
 12337              		@ args = 0, pretend = 0, frame = 0
 12338              		@ frame_needed = 0, uses_anonymous_args = 0
3520:src/display.c **** 	State2.disp_small = 0;
 12339              		.loc 1 3520 2 view .LVU3988
3521:src/display.c **** 	WasDataEntry = 0;
 12340              		.loc 1 3521 2 view .LVU3989
3521:src/display.c **** 	WasDataEntry = 0;
 12341              		.loc 1 3521 20 is_stmt 0 view .LVU3990
 12342 0000 174A     		ldr	r2, .L1295
3519:src/display.c **** 	State2.disp_freeze = 0;
 12343              		.loc 1 3519 7 view .LVU3991
 12344 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12345              		.cfi_def_cfa_offset 24
 12346              		.cfi_offset 3, -24
 12347              		.cfi_offset 4, -20
 12348              		.cfi_offset 5, -16
 12349              		.cfi_offset 6, -12
 12350              		.cfi_offset 7, -8
 12351              		.cfi_offset 14, -4
3521:src/display.c **** 	WasDataEntry = 0;
 12352              		.loc 1 3521 20 view .LVU3992
 12353 0004 D38A     		ldrh	r3, [r2, #22]
3522:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12354              		.loc 1 3522 15 view .LVU3993
 12355 0006 174E     		ldr	r6, .L1295+4
3521:src/display.c **** 	WasDataEntry = 0;
 12356              		.loc 1 3521 20 view .LVU3994
 12357 0008 23F48453 		bic	r3, r3, #4224
3522:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12358              		.loc 1 3522 15 view .LVU3995
 12359 000c 0027     		movs	r7, #0
3521:src/display.c **** 	WasDataEntry = 0;
 12360              		.loc 1 3521 20 view .LVU3996
 12361 000e D382     		strh	r3, [r2, #22]	@ movhi
3522:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12362              		.loc 1 3522 2 is_stmt 1 view .LVU3997
3523:src/display.c **** 	  // Complete redraw necessary
 12363              		.loc 1 3523 5 is_stmt 0 view .LVU3998
 12364 0010 9B05     		lsls	r3, r3, #22
3519:src/display.c **** 	State2.disp_freeze = 0;
 12365              		.loc 1 3519 7 view .LVU3999
 12366 0012 0546     		mov	r5, r0
 12367 0014 0C46     		mov	r4, r1
3522:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12368              		.loc 1 3522 15 view .LVU4000
 12369 0016 3760     		str	r7, [r6]
3523:src/display.c **** 	  // Complete redraw necessary
 12370              		.loc 1 3523 2 is_stmt 1 view .LVU4001
3523:src/display.c **** 	  // Complete redraw necessary
 12371              		.loc 1 3523 5 is_stmt 0 view .LVU4002
 12372 0018 12D5     		bpl	.L1286
ARM GAS  /tmp/ccDDbRKQ.s 			page 348


3523:src/display.c **** 	  // Complete redraw necessary
 12373              		.loc 1 3523 27 discriminator 1 view .LVU4003
 12374 001a D1B1     		cbz	r1, .L1294
 12375              	.L1287:
3530:src/display.c **** 	    ShowRPN = 0;
 12376              		.loc 1 3530 6 is_stmt 1 view .LVU4004
 12377 001c FFF7FEFF 		bl	reset_disp
 12378              	.LVL1440:
3531:src/display.c **** 	    set_annunciators();
 12379              		.loc 1 3531 6 view .LVU4005
3531:src/display.c **** 	    set_annunciators();
 12380              		.loc 1 3531 14 is_stmt 0 view .LVU4006
 12381 0020 114B     		ldr	r3, .L1295+8
 12382 0022 0026     		movs	r6, #0
 12383 0024 1E60     		str	r6, [r3]
3532:src/display.c **** 	    set_digits_string( str2, 0 );
 12384              		.loc 1 3532 6 is_stmt 1 view .LVU4007
 12385 0026 FFF7FEFF 		bl	set_annunciators
 12386              	.LVL1441:
3533:src/display.c **** 	  }
 12387              		.loc 1 3533 6 view .LVU4008
 12388 002a 3146     		mov	r1, r6
 12389 002c 2046     		mov	r0, r4
 12390 002e FFF7FEFF 		bl	set_digits_string
 12391              	.LVL1442:
3535:src/display.c **** 	  finish_display();// message
 12392              		.loc 1 3535 4 view .LVU4009
 12393 0032 2846     		mov	r0, r5
 12394 0034 FFF7FEFF 		bl	set_status
 12395              	.LVL1443:
3536:src/display.c **** 	}
 12396              		.loc 1 3536 4 view .LVU4010
3538:src/display.c **** 
 12397              		.loc 1 3538 7 is_stmt 0 view .LVU4011
 12398 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12399              		.cfi_remember_state
 12400              		.cfi_restore 14
 12401              		.cfi_restore 7
 12402              		.cfi_restore 6
 12403              		.cfi_restore 5
 12404              		.cfi_restore 4
 12405              		.cfi_restore 3
 12406              		.cfi_def_cfa_offset 0
 12407              	.LVL1444:
3536:src/display.c **** 	}
 12408              		.loc 1 3536 4 view .LVU4012
 12409 003c FFF7FEBF 		b	finish_display
 12410              	.LVL1445:
 12411              	.L1286:
 12412              		.cfi_restore_state
3529:src/display.c **** 	    reset_disp();
 12413              		.loc 1 3529 4 is_stmt 1 view .LVU4013
3529:src/display.c **** 	    reset_disp();
 12414              		.loc 1 3529 7 is_stmt 0 view .LVU4014
 12415 0040 0029     		cmp	r1, #0
 12416 0042 EBD1     		bne	.L1287
3535:src/display.c **** 	  finish_display();// message
ARM GAS  /tmp/ccDDbRKQ.s 			page 349


 12417              		.loc 1 3535 4 is_stmt 1 view .LVU4015
 12418 0044 2846     		mov	r0, r5
 12419              	.LVL1446:
3535:src/display.c **** 	  finish_display();// message
 12420              		.loc 1 3535 4 is_stmt 0 view .LVU4016
 12421 0046 FFF7FEFF 		bl	set_status
 12422              	.LVL1447:
3536:src/display.c **** 	}
 12423              		.loc 1 3536 4 is_stmt 1 view .LVU4017
3538:src/display.c **** 
 12424              		.loc 1 3538 7 is_stmt 0 view .LVU4018
 12425 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12426              		.cfi_remember_state
 12427              		.cfi_restore 14
 12428              		.cfi_restore 7
 12429              		.cfi_restore 6
 12430              		.cfi_restore 5
 12431              		.cfi_restore 4
 12432              		.cfi_restore 3
 12433              		.cfi_def_cfa_offset 0
 12434              	.LVL1448:
3536:src/display.c **** 	}
 12435              		.loc 1 3536 4 view .LVU4019
 12436 004e FFF7FEBF 		b	finish_display
 12437              	.LVL1449:
 12438              	.L1294:
 12439              		.cfi_restore_state
3525:src/display.c **** 	  display();
 12440              		.loc 1 3525 4 is_stmt 1 view .LVU4020
3525:src/display.c **** 	  display();
 12441              		.loc 1 3525 12 is_stmt 0 view .LVU4021
 12442 0052 064B     		ldr	r3, .L1295+12
 12443 0054 1860     		str	r0, [r3]
3526:src/display.c **** 	}
 12444              		.loc 1 3526 4 is_stmt 1 view .LVU4022
3538:src/display.c **** 
 12445              		.loc 1 3538 7 is_stmt 0 view .LVU4023
 12446 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12447              		.cfi_restore 14
 12448              		.cfi_restore 7
 12449              		.cfi_restore 6
 12450              		.cfi_restore 5
 12451              		.cfi_restore 4
 12452              		.cfi_restore 3
 12453              		.cfi_def_cfa_offset 0
3526:src/display.c **** 	}
 12454              		.loc 1 3526 4 view .LVU4024
 12455 005a FFF7FEBF 		b	display
 12456              	.LVL1450:
 12457              	.L1296:
3526:src/display.c **** 	}
 12458              		.loc 1 3526 4 view .LVU4025
 12459 005e 00BF     		.align	2
 12460              	.L1295:
 12461 0060 00000000 		.word	StateWhileOn
 12462 0064 00000000 		.word	WasDataEntry
 12463 0068 00000000 		.word	ShowRPN
ARM GAS  /tmp/ccDDbRKQ.s 			page 350


 12464 006c 00000000 		.word	DispMsg
 12465              		.cfi_endproc
 12466              	.LFE46:
 12468              		.section	.text.error_message,"ax",%progbits
 12469              		.align	1
 12470              		.p2align 2,,3
 12471              		.global	error_message
 12472              		.syntax unified
 12473              		.thumb
 12474              		.thumb_func
 12475              		.fpu fpv4-sp-d16
 12477              	error_message:
 12478              	.LVL1451:
 12479              	.LFB1:
 108:src/display.c **** #define MSG1(top) top "\0"
 12480              		.loc 1 108 1 is_stmt 1 view -0
 12481              		.cfi_startproc
 12482              		@ args = 0, pretend = 0, frame = 0
 12483              		@ frame_needed = 0, uses_anonymous_args = 0
 113:src/display.c ****     {
 12484              		.loc 1 113 3 view .LVU4027
 173:src/display.c ****     const char *p = error_table[e];
 12485              		.loc 1 173 3 view .LVU4028
 173:src/display.c ****     const char *p = error_table[e];
 12486              		.loc 1 173 21 is_stmt 0 view .LVU4029
 12487 0000 334B     		ldr	r3, .L1323
 12488 0002 1B68     		ldr	r3, [r3]
 12489 0004 0343     		orrs	r3, r0, r3
 12490 0006 00D1     		bne	.L1319
 12491 0008 7047     		bx	lr
 12492              	.L1319:
 12493              	.LBB710:
 174:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12494              		.loc 1 174 5 is_stmt 1 view .LVU4030
 174:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12495              		.loc 1 174 17 is_stmt 0 view .LVU4031
 12496 000a 324B     		ldr	r3, .L1323+4
 12497              	.LBE710:
 108:src/display.c **** #define MSG1(top) top "\0"
 12498              		.loc 1 108 1 view .LVU4032
 12499 000c 70B5     		push	{r4, r5, r6, lr}
 12500              		.cfi_def_cfa_offset 16
 12501              		.cfi_offset 4, -16
 12502              		.cfi_offset 5, -12
 12503              		.cfi_offset 6, -8
 12504              		.cfi_offset 14, -4
 12505              	.LBB722:
 174:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12506              		.loc 1 174 17 view .LVU4033
 12507 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12508              	.LVL1452:
 175:src/display.c ****     if (*q == '\0')
 12509              		.loc 1 175 5 is_stmt 1 view .LVU4034
 12510 0012 0446     		mov	r4, r0
 175:src/display.c ****     if (*q == '\0')
 12511              		.loc 1 175 21 is_stmt 0 view .LVU4035
 12512 0014 0021     		movs	r1, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 351


 12513 0016 3046     		mov	r0, r6
 12514              	.LVL1453:
 175:src/display.c ****     if (*q == '\0')
 12515              		.loc 1 175 21 view .LVU4036
 12516 0018 FFF7FEFF 		bl	find_char
 12517              	.LVL1454:
 176:src/display.c ****       q = S7_ERROR;
 12518              		.loc 1 176 5 is_stmt 1 view .LVU4037
 176:src/display.c ****       q = S7_ERROR;
 12519              		.loc 1 176 9 is_stmt 0 view .LVU4038
 12520 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 176:src/display.c ****       q = S7_ERROR;
 12521              		.loc 1 176 8 view .LVU4039
 12522 001e 002B     		cmp	r3, #0
 12523 0020 3CD0     		beq	.L1308
 178:src/display.c ****       DispMsg = p;
 12524              		.loc 1 178 8 view .LVU4040
 12525 0022 582B     		cmp	r3, #88
 175:src/display.c ****     if (*q == '\0')
 12526              		.loc 1 175 17 view .LVU4041
 12527 0024 00F10105 		add	r5, r0, #1
 12528              	.LVL1455:
 178:src/display.c ****       DispMsg = p;
 12529              		.loc 1 178 5 is_stmt 1 view .LVU4042
 178:src/display.c ****       DispMsg = p;
 12530              		.loc 1 178 8 is_stmt 0 view .LVU4043
 12531 0028 39D1     		bne	.L1300
 179:src/display.c ****       frozen_display();
 12532              		.loc 1 179 7 is_stmt 1 view .LVU4044
 12533              	.LBB711:
 12534              	.LBB712:
3318:src/display.c **** 	display();
 12535              		.loc 1 3318 21 is_stmt 0 view .LVU4045
 12536 002a 2B4C     		ldr	r4, .L1323+8
 12537              	.LVL1456:
3318:src/display.c **** 	display();
 12538              		.loc 1 3318 21 view .LVU4046
 12539              	.LBE712:
 12540              	.LBE711:
 179:src/display.c ****       frozen_display();
 12541              		.loc 1 179 15 view .LVU4047
 12542 002c 2B4A     		ldr	r2, .L1323+12
 12543              	.LBB716:
 12544              	.LBB713:
3318:src/display.c **** 	display();
 12545              		.loc 1 3318 21 view .LVU4048
 12546 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12547              	.LBE713:
 12548              	.LBE716:
 179:src/display.c ****       frozen_display();
 12549              		.loc 1 179 15 view .LVU4049
 12550 0030 1660     		str	r6, [r2]
 180:src/display.c ****     }
 12551              		.loc 1 180 7 is_stmt 1 view .LVU4050
 12552              	.LBB717:
 12553              	.LBI711:
3316:src/display.c ****       {
ARM GAS  /tmp/ccDDbRKQ.s 			page 352


 12554              		.loc 1 3316 12 view .LVU4051
 12555              	.LBB714:
3318:src/display.c **** 	display();
 12556              		.loc 1 3318 2 view .LVU4052
3318:src/display.c **** 	display();
 12557              		.loc 1 3318 21 is_stmt 0 view .LVU4053
 12558 0032 6FF30413 		bfc	r3, #4, #1
 12559 0036 E375     		strb	r3, [r4, #23]
3319:src/display.c **** 	State2.disp_freeze = 1;
 12560              		.loc 1 3319 2 is_stmt 1 view .LVU4054
 12561 0038 FFF7FEFF 		bl	display
 12562              	.LVL1457:
3320:src/display.c ****       }
 12563              		.loc 1 3320 2 view .LVU4055
 12564              	.LBE714:
 12565              	.LBE717:
 191:src/display.c ****       if (*q == 'X')
 12566              		.loc 1 191 5 view .LVU4056
 12567              	.LBB718:
 12568              	.LBB715:
3320:src/display.c ****       }
 12569              		.loc 1 3320 21 is_stmt 0 view .LVU4057
 12570 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12571 003e 43F01003 		orr	r3, r3, #16
 12572 0042 E375     		strb	r3, [r4, #23]
 12573              	.LBE715:
 12574              	.LBE718:
 191:src/display.c ****       if (*q == 'X')
 12575              		.loc 1 191 9 view .LVU4058
 12576 0044 264B     		ldr	r3, .L1323+16
 191:src/display.c ****       if (*q == 'X')
 12577              		.loc 1 191 8 view .LVU4059
 12578 0046 1B68     		ldr	r3, [r3]
 12579 0048 002B     		cmp	r3, #0
 12580 004a 38D0     		beq	.L1297
 12581              	.LVL1458:
 12582              	.L1322:
 192:src/display.c **** 	print_reg(regX_idx, p, 0);
 12583              		.loc 1 192 7 is_stmt 1 view .LVU4060
 192:src/display.c **** 	print_reg(regX_idx, p, 0);
 12584              		.loc 1 192 10 is_stmt 0 view .LVU4061
 12585 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12586 004e 582B     		cmp	r3, #88
 12587 0050 36D0     		beq	.L1320
 195:src/display.c **** 	print_line(p, 0);
 12588              		.loc 1 195 2 is_stmt 1 view .LVU4062
 12589 0052 0020     		movs	r0, #0
 12590 0054 FFF7FEFF 		bl	print_tab
 12591              	.LVL1459:
 196:src/display.c **** 	print(' ');
 12592              		.loc 1 196 2 view .LVU4063
 12593 0058 3046     		mov	r0, r6
 12594 005a 0021     		movs	r1, #0
 12595 005c FFF7FEFF 		bl	print_line
 12596              	.LVL1460:
 197:src/display.c **** 	while (*q != '\0') {
 12597              		.loc 1 197 2 view .LVU4064
ARM GAS  /tmp/ccDDbRKQ.s 			page 353


 12598 0060 2020     		movs	r0, #32
 12599 0062 FFF7FEFF 		bl	print
 12600              	.LVL1461:
 198:src/display.c **** 	  int c = *q;
 12601              		.loc 1 198 2 view .LVU4065
 198:src/display.c **** 	  int c = *q;
 12602              		.loc 1 198 8 view .LVU4066
 198:src/display.c **** 	  int c = *q;
 12603              		.loc 1 198 9 is_stmt 0 view .LVU4067
 12604 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 198:src/display.c **** 	  int c = *q;
 12605              		.loc 1 198 8 view .LVU4068
 12606 0068 73B9     		cbnz	r3, .L1304
 12607              	.L1307:
 207:src/display.c ****       }
 12608              		.loc 1 207 2 is_stmt 1 view .LVU4069
 12609              	.LBE722:
 212:src/display.c **** 
 12610              		.loc 1 212 1 is_stmt 0 view .LVU4070
 12611 006a BDE87040 		pop	{r4, r5, r6, lr}
 12612              		.cfi_remember_state
 12613              		.cfi_restore 14
 12614              		.cfi_restore 6
 12615              		.cfi_restore 5
 12616              		.cfi_restore 4
 12617              		.cfi_def_cfa_offset 0
 12618              	.LVL1462:
 12619              	.LBB723:
 207:src/display.c ****       }
 12620              		.loc 1 207 2 view .LVU4071
 12621 006e 0020     		movs	r0, #0
 12622 0070 FFF7FEBF 		b	print_advance
 12623              	.LVL1463:
 12624              	.L1321:
 12625              		.cfi_restore_state
 12626              	.LBB719:
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12627              		.loc 1 202 4 view .LVU4072
 12628 0074 FFF7FEFF 		bl	print
 12629              	.LVL1464:
 203:src/display.c **** 	    ++q;
 12630              		.loc 1 203 4 is_stmt 1 view .LVU4073
 204:src/display.c **** 	  ++q;
 12631              		.loc 1 204 6 view .LVU4074
 203:src/display.c **** 	    ++q;
 12632              		.loc 1 203 7 is_stmt 0 view .LVU4075
 12633 0078 6D2C     		cmp	r4, #109
 204:src/display.c **** 	  ++q;
 12634              		.loc 1 204 6 view .LVU4076
 12635 007a 0CBF     		ite	eq
 12636 007c 691C     		addeq	r1, r5, #1
 12637              	.LVL1465:
 204:src/display.c **** 	  ++q;
 12638              		.loc 1 204 6 view .LVU4077
 12639 007e 2946     		movne	r1, r5
 12640              	.LVL1466:
 12641              	.L1306:
ARM GAS  /tmp/ccDDbRKQ.s 			page 354


 205:src/display.c **** 	}
 12642              		.loc 1 205 4 is_stmt 1 view .LVU4078
 12643              	.LBE719:
 198:src/display.c **** 	  int c = *q;
 12644              		.loc 1 198 9 is_stmt 0 view .LVU4079
 12645 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12646              	.LBB720:
 205:src/display.c **** 	}
 12647              		.loc 1 205 4 view .LVU4080
 12648 0082 4D1C     		adds	r5, r1, #1
 12649              	.LVL1467:
 205:src/display.c **** 	}
 12650              		.loc 1 205 4 view .LVU4081
 12651              	.LBE720:
 198:src/display.c **** 	  int c = *q;
 12652              		.loc 1 198 8 is_stmt 1 view .LVU4082
 12653 0084 002B     		cmp	r3, #0
 12654 0086 F0D0     		beq	.L1307
 12655              	.LVL1468:
 12656              	.L1304:
 12657              	.LBB721:
 199:src/display.c **** 	  if (c >= 'A')
 12658              		.loc 1 199 4 view .LVU4083
 200:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12659              		.loc 1 200 4 view .LVU4084
 201:src/display.c **** 	  print(c);
 12660              		.loc 1 201 6 view .LVU4085
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12661              		.loc 1 202 4 view .LVU4086
 12662 0088 43F06004 		orr	r4, r3, #96
 12663              	.LVL1469:
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12664              		.loc 1 202 4 view .LVU4087
 200:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12665              		.loc 1 200 7 is_stmt 0 view .LVU4088
 12666 008c 402B     		cmp	r3, #64
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12667              		.loc 1 202 4 view .LVU4089
 12668 008e 2046     		mov	r0, r4
 200:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12669              		.loc 1 200 7 view .LVU4090
 12670 0090 F0DC     		bgt	.L1321
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12671              		.loc 1 202 4 view .LVU4091
 12672 0092 1846     		mov	r0, r3
 12673 0094 FFF7FEFF 		bl	print
 12674              	.LVL1470:
 203:src/display.c **** 	    ++q;
 12675              		.loc 1 203 4 is_stmt 1 view .LVU4092
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12676              		.loc 1 202 4 is_stmt 0 view .LVU4093
 12677 0098 2946     		mov	r1, r5
 12678 009a F1E7     		b	.L1306
 12679              	.LVL1471:
 12680              	.L1308:
 202:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12681              		.loc 1 202 4 view .LVU4094
ARM GAS  /tmp/ccDDbRKQ.s 			page 355


 12682              	.LBE721:
 177:src/display.c ****     if (*q == 'X') {
 12683              		.loc 1 177 9 view .LVU4095
 12684 009c 114D     		ldr	r5, .L1323+20
 12685              	.L1300:
 12686              	.LVL1472:
 187:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12687              		.loc 1 187 7 is_stmt 1 view .LVU4096
 12688 009e 2946     		mov	r1, r5
 12689 00a0 3046     		mov	r0, r6
 12690 00a2 FFF7FEFF 		bl	message
 12691              	.LVL1473:
 188:src/display.c ****     }
 12692              		.loc 1 188 7 view .LVU4097
 188:src/display.c ****     }
 12693              		.loc 1 188 26 is_stmt 0 view .LVU4098
 12694 00a6 0C4B     		ldr	r3, .L1323+8
 188:src/display.c ****     }
 12695              		.loc 1 188 31 view .LVU4099
 12696 00a8 003C     		subs	r4, r4, #0
 188:src/display.c ****     }
 12697              		.loc 1 188 26 view .LVU4100
 12698 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 188:src/display.c ****     }
 12699              		.loc 1 188 31 view .LVU4101
 12700 00ac 18BF     		it	ne
 12701 00ae 0124     		movne	r4, #1
 12702              	.LVL1474:
 188:src/display.c ****     }
 12703              		.loc 1 188 26 view .LVU4102
 12704 00b0 64F30412 		bfi	r2, r4, #4, #1
 12705 00b4 DA75     		strb	r2, [r3, #23]
 191:src/display.c ****       if (*q == 'X')
 12706              		.loc 1 191 5 is_stmt 1 view .LVU4103
 191:src/display.c ****       if (*q == 'X')
 12707              		.loc 1 191 9 is_stmt 0 view .LVU4104
 12708 00b6 0A4B     		ldr	r3, .L1323+16
 191:src/display.c ****       if (*q == 'X')
 12709              		.loc 1 191 8 view .LVU4105
 12710 00b8 1B68     		ldr	r3, [r3]
 12711 00ba 002B     		cmp	r3, #0
 12712 00bc C6D1     		bne	.L1322
 12713              	.LVL1475:
 12714              	.L1297:
 191:src/display.c ****       if (*q == 'X')
 12715              		.loc 1 191 8 view .LVU4106
 12716              	.LBE723:
 212:src/display.c **** 
 12717              		.loc 1 212 1 view .LVU4107
 12718 00be 70BD     		pop	{r4, r5, r6, pc}
 12719              	.LVL1476:
 12720              	.L1320:
 12721              	.LBB724:
 193:src/display.c ****       else {
 12722              		.loc 1 193 2 is_stmt 1 view .LVU4108
 12723 00c0 3146     		mov	r1, r6
 12724 00c2 0022     		movs	r2, #0
ARM GAS  /tmp/ccDDbRKQ.s 			page 356


 12725              	.LBE724:
 212:src/display.c **** 
 12726              		.loc 1 212 1 is_stmt 0 view .LVU4109
 12727 00c4 BDE87040 		pop	{r4, r5, r6, lr}
 12728              		.cfi_restore 14
 12729              		.cfi_restore 6
 12730              		.cfi_restore 5
 12731              		.cfi_restore 4
 12732              		.cfi_def_cfa_offset 0
 12733              	.LVL1477:
 12734              	.LBB725:
 193:src/display.c ****       else {
 12735              		.loc 1 193 2 view .LVU4110
 12736 00c8 6420     		movs	r0, #100
 12737 00ca FFF7FEBF 		b	print_reg
 12738              	.LVL1478:
 12739              	.L1324:
 193:src/display.c ****       else {
 12740              		.loc 1 193 2 view .LVU4111
 12741 00ce 00BF     		.align	2
 12742              	.L1323:
 12743 00d0 00000000 		.word	Running
 12744 00d4 00000000 		.word	.LANCHOR21
 12745 00d8 00000000 		.word	StateWhileOn
 12746 00dc 00000000 		.word	DispMsg
 12747 00e0 00000000 		.word	Tracing
 12748 00e4 00000000 		.word	.LANCHOR20
 12749              	.LBE725:
 12750              		.cfi_endproc
 12751              	.LFE1:
 12753              		.section	.text.stopwatch_message,"ax",%progbits
 12754              		.align	1
 12755              		.p2align 2,,3
 12756              		.global	stopwatch_message
 12757              		.syntax unified
 12758              		.thumb
 12759              		.thumb_func
 12760              		.fpu fpv4-sp-d16
 12762              	stopwatch_message:
 12763              	.LVL1479:
 12764              	.LFB48:
3551:src/display.c **** 	reset_disp();
 12765              		.loc 1 3551 7 is_stmt 1 view -0
 12766              		.cfi_startproc
 12767              		@ args = 0, pretend = 0, frame = 0
 12768              		@ frame_needed = 0, uses_anonymous_args = 0
3552:src/display.c **** 	set_dot(DEG);
 12769              		.loc 1 3552 2 view .LVU4113
3551:src/display.c **** 	reset_disp();
 12770              		.loc 1 3551 7 is_stmt 0 view .LVU4114
 12771 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12772              		.cfi_def_cfa_offset 24
 12773              		.cfi_offset 3, -24
 12774              		.cfi_offset 4, -20
 12775              		.cfi_offset 5, -16
 12776              		.cfi_offset 6, -12
 12777              		.cfi_offset 7, -8
ARM GAS  /tmp/ccDDbRKQ.s 			page 357


 12778              		.cfi_offset 14, -4
3551:src/display.c **** 	reset_disp();
 12779              		.loc 1 3551 7 view .LVU4115
 12780 0002 1446     		mov	r4, r2
 12781 0004 0F46     		mov	r7, r1
 12782 0006 1D46     		mov	r5, r3
 12783 0008 0646     		mov	r6, r0
3552:src/display.c **** 	set_dot(DEG);
 12784              		.loc 1 3552 2 view .LVU4116
 12785 000a FFF7FEFF 		bl	reset_disp
 12786              	.LVL1480:
3553:src/display.c **** 	set_digits_string( str2, 0 );
 12787              		.loc 1 3553 2 is_stmt 1 view .LVU4117
 12788 000e 8C20     		movs	r0, #140
 12789 0010 FFF7FEFF 		bl	set_dot
 12790              	.LVL1481:
3554:src/display.c **** 	State2.disp_small = force_small;
 12791              		.loc 1 3554 2 view .LVU4118
 12792 0014 3846     		mov	r0, r7
 12793 0016 0021     		movs	r1, #0
 12794 0018 FFF7FEFF 		bl	set_digits_string
 12795              	.LVL1482:
3555:src/display.c **** 	if( exponent!=NULL ) {
 12796              		.loc 1 3555 2 view .LVU4119
3555:src/display.c **** 	if( exponent!=NULL ) {
 12797              		.loc 1 3555 20 is_stmt 0 view .LVU4120
 12798 001c 0B4B     		ldr	r3, .L1336
 12799 001e 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 12800 0020 64F3C712 		bfi	r2, r4, #7, #1
 12801              	.LVL1483:
3555:src/display.c **** 	if( exponent!=NULL ) {
 12802              		.loc 1 3555 20 view .LVU4121
 12803 0024 9A75     		strb	r2, [r3, #22]
3556:src/display.c **** 	  stopwatch_exponent(exponent);
 12804              		.loc 1 3556 2 is_stmt 1 view .LVU4122
3556:src/display.c **** 	  stopwatch_exponent(exponent);
 12805              		.loc 1 3556 4 is_stmt 0 view .LVU4123
 12806 0026 55B1     		cbz	r5, .L1326
 12807              	.LVL1484:
 12808              	.LBB726:
 12809              	.LBB727:
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12810              		.loc 1 3544 9 is_stmt 1 view .LVU4124
 12811 0028 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12812              		.loc 1 3544 2 is_stmt 0 view .LVU4125
 12813 002a 41B1     		cbz	r1, .L1326
3543:src/display.c **** 	for (; *exponent!=0; exponent++) {
 12814              		.loc 1 3543 6 view .LVU4126
 12815 002c 6C24     		movs	r4, #108
 12816              	.LVL1485:
 12817              	.L1327:
3545:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 12818              		.loc 1 3545 4 is_stmt 1 view .LVU4127
 12819              	.LBB728:
 12820              	.LBI728:
 329:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccDDbRKQ.s 			page 358


 12821              		.loc 1 329 14 view .LVU4128
 12822              	.LBB729:
 330:src/display.c ****   else	set_dig(base, ch);
 12823              		.loc 1 330 3 view .LVU4129
 331:src/display.c ****   return res;
 12824              		.loc 1 331 8 view .LVU4130
 12825 002e 2046     		mov	r0, r4
 12826 0030 FFF7FEFF 		bl	set_dig
 12827              	.LVL1486:
 332:src/display.c **** }
 12828              		.loc 1 332 3 view .LVU4131
 332:src/display.c **** }
 12829              		.loc 1 332 3 is_stmt 0 view .LVU4132
 12830              	.LBE729:
 12831              	.LBE728:
3546:src/display.c **** 	}
 12832              		.loc 1 3546 4 is_stmt 1 view .LVU4133
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12833              		.loc 1 3544 9 is_stmt 0 view .LVU4134
 12834 0034 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 12835              	.LVL1487:
3546:src/display.c **** 	}
 12836              		.loc 1 3546 6 view .LVU4135
 12837 0038 0734     		adds	r4, r4, #7
 12838              	.LVL1488:
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12839              		.loc 1 3544 23 is_stmt 1 view .LVU4136
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12840              		.loc 1 3544 9 view .LVU4137
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12841              		.loc 1 3544 2 is_stmt 0 view .LVU4138
 12842 003a 0029     		cmp	r1, #0
 12843 003c F7D1     		bne	.L1327
 12844              	.LVL1489:
 12845              	.L1326:
3544:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12846              		.loc 1 3544 2 view .LVU4139
 12847              	.LBE727:
 12848              	.LBE726:
3559:src/display.c **** 	finish_display();
 12849              		.loc 1 3559 2 is_stmt 1 view .LVU4140
 12850 003e 3046     		mov	r0, r6
 12851 0040 FFF7FEFF 		bl	set_status
 12852              	.LVL1490:
3560:src/display.c ****       }
 12853              		.loc 1 3560 2 view .LVU4141
3561:src/display.c **** 
 12854              		.loc 1 3561 7 is_stmt 0 view .LVU4142
 12855 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12856              		.cfi_restore 14
 12857              		.cfi_restore 7
 12858              		.cfi_restore 6
 12859              		.cfi_restore 5
 12860              		.cfi_restore 4
 12861              		.cfi_restore 3
 12862              		.cfi_def_cfa_offset 0
 12863              	.LVL1491:
ARM GAS  /tmp/ccDDbRKQ.s 			page 359


3560:src/display.c ****       }
 12864              		.loc 1 3560 2 view .LVU4143
 12865 0048 FFF7FEBF 		b	finish_display
 12866              	.LVL1492:
 12867              	.L1337:
 12868              		.align	2
 12869              	.L1336:
 12870 004c 00000000 		.word	StateWhileOn
 12871              		.cfi_endproc
 12872              	.LFE48:
 12874              		.section	.rodata.str1.4,"aMS",%progbits,1
 12875              		.align	2
 12876              	.LC43:
 12877 0000 06316306 		.ascii	"\0061c\006\006\000"
 12877      0600
 12878 0006 0000     		.align	2
 12879              	.LC44:
 12880 0008 756E0600 		.ascii	"un\006\000"
 12881              		.align	2
 12882              	.LC45:
 12883 000c 736D00   		.ascii	"sm\000"
 12884              		.set	CSWTCH.374,CSWTCH.372
 12885              		.global	DIGITS
 12886              		.comm	IoAnnunciator,4,4
 12887              		.comm	IntMaxWindow,4,4
 12888              		.comm	JustDisplayed,4,4
 12889              		.comm	ShowRPN,4,4
 12890              		.global	no_status_top
 12891              		.comm	DispPlot,2,2
 12892              		.comm	DispMsg,4,4
 12893              		.global	SvnRevision
 12894              		.section	.rodata
 12895              		.align	2
 12896              		.set	.LANCHOR14,. + 0
 12897              	.LC20:
 12898 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12898      22002E00 
 12898      00
 12899 0009 000000   		.space	3
 12900              	.LC24:
 12901 000c 33345306 		.ascii	"34S\0063.3\222TC\000"
 12901      332E3392 
 12901      544300
 12902 0017 00000000 		.space	4
 12903 001b 00       		.space	1
 12904              	.LC46:
 12905 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12905      696E6700 
 12905      50726F47 
 12905      72614D6D 
 12905      00
 12906 002d 000000   		.space	3
 12907              	.LC47:
 12908 0030 446F6D61 		.ascii	"Domain\000\000"
 12908      696E0000 
 12909              	.LC48:
 12910 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
ARM GAS  /tmp/ccDDbRKQ.s 			page 360


 12910      74696D65 
 12910      006F7220 
 12910      64417445 
 12910      00
 12911 0049 000000   		.space	3
 12912              	.LC49:
 12913 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12913      66696E65 
 12913      64004F70 
 12913      2D434F64 
 12913      4500
 12914 005e 0000     		.space	2
 12915              	.LC50:
 12916 0060 2B9F0000 		.ascii	"+\237\000\000"
 12917              	.LC51:
 12918 0064 2D9F0000 		.ascii	"-\237\000\000"
 12919              	.LC52:
 12920 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12920      75636800 
 12920      4C416245 
 12920      4C00
 12921 0076 0000     		.space	2
 12922              	.LC53:
 12923 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12923      67616C00 
 12923      4F504572 
 12923      4174696F 
 12923      6E00
 12924 008a 0000     		.space	2
 12925              	.LC54:
 12926 008c 4F757420 		.ascii	"Out of range\000\000"
 12926      6F662072 
 12926      616E6765 
 12926      0000
 12927 009a 0000     		.space	2
 12928              	.LC55:
 12929 009c 42616420 		.ascii	"Bad digit\000\000"
 12929      64696769 
 12929      740000
 12930 00a7 00       		.space	1
 12931              	.LC56:
 12932 00a8 546F6F20 		.ascii	"Too long\000\000"
 12932      6C6F6E67 
 12932      0000
 12933 00b2 0000     		.space	2
 12934              	.LC57:
 12935 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12935      69730046 
 12935      754C4C00 
 12936              	.LC58:
 12937 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12937      6B00434C 
 12937      41534800 
 12938              	.LC59:
 12939 00cc 42616420 		.ascii	"Bad mode\000\000"
 12939      6D6F6465 
 12939      0000
ARM GAS  /tmp/ccDDbRKQ.s 			page 361


 12940 00d6 0000     		.space	2
 12941              	.LC60:
 12942 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12942      06060673 
 12942      697A6500 
 12942      746F6F20 
 12942      534D6D41 
 12943 00ef 00       		.space	1
 12944              	.LC61:
 12945 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12945      66657700 
 12945      64417441 
 12945      20506F69 
 12945      6E745300 
 12946              	.LC62:
 12947 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12947      6C696400 
 12947      50617261 
 12947      4D6D4574 
 12947      457200
 12948 0117 00       		.space	1
 12949              	.LC63:
 12950 0118 492F4F00 		.ascii	"I/O\000\000"
 12950      00
 12951 011d 000000   		.space	3
 12952              	.LC64:
 12953 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12953      6C696400 
 12953      64417441 
 12953      00
 12954 012d 000000   		.space	3
 12955              	.LC65:
 12956 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12956      65005072 
 12956      6F744563 
 12956      74456400 
 12957              	.LC66:
 12958 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12958      6F6F7400 
 12958      466F756E 
 12958      6400
 12959 014e 0000     		.space	2
 12960              	.LC67:
 12961 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12961      6978004D 
 12961      6D49534D 
 12961      6D417443 
 12961      4800
 12962 0162 0000     		.space	2
 12963              	.LC68:
 12964 0164 53696E67 		.ascii	"Singular\000\000"
 12964      756C6172 
 12964      0000
 12965 016e 0000     		.space	2
 12966              	.LC69:
 12967 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12967      68206973 
ARM GAS  /tmp/ccDDbRKQ.s 			page 362


 12967      0046754C 
 12967      4C00
 12968 017e 0000     		.space	2
 12969              	.LC70:
 12970 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12970      72797374 
 12970      616C0049 
 12970      6E537461 
 12970      4C4C4564 
 12971 0195 000000   		.space	3
 12972              	.LC71:
 12973 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 12973      6576656E 
 12973      20726567 
 12973      00666F72 
 12973      20436F4D 
 12974 01b2 0000     		.space	2
 12975              	.LC72:
 12976 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 12976      5800
 12977              		.section	.bss.DecimalMode,"aw",%nobits
 12978              		.set	.LANCHOR1,. + 0
 12981              	DecimalMode:
 12982 0000 00       		.space	1
 12983              		.section	.bss.SeparatorMode,"aw",%nobits
 12984              		.set	.LANCHOR0,. + 0
 12987              	SeparatorMode:
 12988 0000 00       		.space	1
 12989              		.section	.bss.no_status_top,"aw",%nobits
 12990              		.align	1
 12991              		.set	.LANCHOR15,. + 0
 12994              	no_status_top:
 12995 0000 0000     		.space	2
 12996              		.section	.rodata.CSWTCH.372,"a"
 12997              		.align	2
 12998              		.set	.LANCHOR8,. + 0
 13001              	CSWTCH.372:
 13002 0000 02000000 		.word	2
 13003 0004 08000000 		.word	8
 13004 0008 0A000000 		.word	10
 13005 000c 10000000 		.word	16
 13006              		.section	.rodata.CSWTCH.399,"a"
 13007              		.align	2
 13008              		.set	.LANCHOR13,. + 0
 13011              	CSWTCH.399:
 13012 0000 00000000 		.word	.LC43
 13013 0004 08000000 		.word	.LC44
 13014 0008 0C000000 		.word	.LC45
 13015              		.section	.rodata.DIGITS,"a"
 13016              		.align	2
 13017              		.set	.LANCHOR9,. + 0
 13020              	DIGITS:
 13021 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 13021      34353637 
 13021      38394142 
 13021      43444546 
 13021      00
ARM GAS  /tmp/ccDDbRKQ.s 			page 363


 13022              		.section	.rodata.S7_ERROR,"a"
 13023              		.align	2
 13024              		.set	.LANCHOR20,. + 0
 13027              	S7_ERROR:
 13028 0000 4572726F 		.ascii	"Error\000"
 13028      7200
 13029              		.section	.rodata.S7_INF,"a"
 13030              		.align	2
 13031              		.set	.LANCHOR4,. + 0
 13034              	S7_INF:
 13035 0000 496E6669 		.ascii	"Infinity\000"
 13035      6E697479 
 13035      00
 13036              		.section	.rodata.S7_NaN,"a"
 13037              		.align	2
 13038              		.set	.LANCHOR3,. + 0
 13041              	S7_NaN:
 13042 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 13042      6E754D6D 
 13042      45726963 
 13042      00
 13043              		.section	.rodata.S7_STEP,"a"
 13044              		.align	2
 13045              		.set	.LANCHOR16,. + 0
 13048              	S7_STEP:
 13049 0000 53744550 		.ascii	"StEP \000"
 13049      2000
 13050              		.section	.rodata.S7_fract_EQ,"a"
 13051              		.align	2
 13052              		.set	.LANCHOR6,. + 0
 13055              	S7_fract_EQ:
 13056 0000 203D2000 		.ascii	" = \000"
 13057              		.section	.rodata.S7_fract_GT,"a"
 13058              		.align	2
 13059              		.set	.LANCHOR7,. + 0
 13062              	S7_fract_GT:
 13063 0000 20477400 		.ascii	" Gt\000"
 13064              		.section	.rodata.S7_fract_LT,"a"
 13065              		.align	2
 13066              		.set	.LANCHOR5,. + 0
 13069              	S7_fract_LT:
 13070 0000 204C7400 		.ascii	" Lt\000"
 13071              		.section	.rodata.S_SURE,"a"
 13072              		.align	2
 13073              		.set	.LANCHOR18,. + 0
 13076              	S_SURE:
 13077 0000 53757265 		.ascii	"Sure?\000"
 13077      3F00
 13078              		.section	.rodata.SvnRevision,"a"
 13079              		.align	2
 13080              		.set	.LANCHOR17,. + 0
 13083              	SvnRevision:
 13084 0000 38372020 		.ascii	"87  "
 13085              		.section	.rodata.digtbl,"a"
 13086              		.align	2
 13087              		.set	.LANCHOR2,. + 0
 13090              	digtbl:
ARM GAS  /tmp/ccDDbRKQ.s 			page 364


 13091 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 13091      02421252 
 13091      2D000000 
 13091      00000000 
 13091      00
 13092 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 13092      00000017 
 13092      01000000 
 13092      00
 13093 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 13093      28000000 
 13093      0020664B 
 13093      00000010 
 13094 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 13094      5E5B3973 
 13094      77497F7B 
 13094      00000612 
 13094      0300787D 
 13095 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 13095      673D240F 
 13095      75266C6D 
 13095      6F7C7914 
 13095      73362F00 
 13096 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13096      161F7674 
 13096      6735040F 
 13096      75266915 
 13096      177C7914 
 13097 0076 000F003B 		.ascii	"\000\017\000;"
 13098              		.section	.rodata.error_table.8660,"a"
 13099              		.align	2
 13100              		.set	.LANCHOR21,. + 0
 13103              	error_table.8660:
 13104 0000 1C000000 		.word	.LC46
 13105 0004 30000000 		.word	.LC47
 13106 0008 38000000 		.word	.LC48
 13107 000c 4C000000 		.word	.LC49
 13108 0010 60000000 		.word	.LC50
 13109 0014 64000000 		.word	.LC51
 13110 0018 68000000 		.word	.LC52
 13111 001c 78000000 		.word	.LC53
 13112 0020 8C000000 		.word	.LC54
 13113 0024 9C000000 		.word	.LC55
 13114 0028 A8000000 		.word	.LC56
 13115 002c B4000000 		.word	.LC57
 13116 0030 C0000000 		.word	.LC58
 13117 0034 CC000000 		.word	.LC59
 13118 0038 D8000000 		.word	.LC60
 13119 003c F0000000 		.word	.LC61
 13120 0040 04010000 		.word	.LC62
 13121 0044 18010000 		.word	.LC63
 13122 0048 20010000 		.word	.LC64
 13123 004c 30010000 		.word	.LC65
 13124 0050 40010000 		.word	.LC66
 13125 0054 50010000 		.word	.LC67
 13126 0058 64010000 		.word	.LC68
 13127 005c 70010000 		.word	.LC69
ARM GAS  /tmp/ccDDbRKQ.s 			page 365


 13128 0060 80010000 		.word	.LC70
 13129 0064 98010000 		.word	.LC71
 13130 0068 B4010000 		.word	.LC72
 13131              		.section	.rodata.libname,"a"
 13132              		.align	2
 13133              		.set	.LANCHOR19,. + 0
 13136              	libname:
 13137 0000 72414D6D 		.ascii	"rAMm\000"
 13137      00
 13138 0005 4C696220 		.ascii	"Lib \000"
 13138      00
 13139 000a 42757020 		.ascii	"Bup \000"
 13139      00
 13140 000f 726F4D6D 		.ascii	"roMm\000"
 13140      00
 13141              		.section	.rodata.shift_chars.8767,"a"
 13142              		.align	2
 13143              		.set	.LANCHOR12,. + 0
 13146              	shift_chars.8767:
 13147 0000 20111213 		.ascii	" \021\022\023"
 13148              		.section	.rodata.small_dots.8968,"a"
 13149              		.align	2
 13150              		.set	.LANCHOR11,. + 0
 13153              	small_dots.8968:
 13154 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13154      07E12C06 
 13154      07E12C06 
 13154      06
 13155              		.section	.rodata.small_minus.8967,"a"
 13156              		.align	2
 13157              		.set	.LANCHOR10,. + 0
 13160              	small_minus.8967:
 13161 0000 07C22D06 		.ascii	"\007\302-\006"
 13162              		.text
 13163              	.Letext0:
 13164              		.file 2 "src/decNumber/decContext.h"
 13165              		.file 3 "src/decNumber/decNumber.h"
 13166              		.file 4 "src/decNumber/decimal64.h"
 13167              		.file 5 "src/decNumber/decimal128.h"
 13168              		.file 6 "src/xeq.h"
 13169              		.file 7 "src/data.h"
 13170              		.file 8 "src/storage.h"
 13171              		.file 9 "src/display.h"
 13172              		.file 10 "src/consts.h"
 13173              		.file 11 "src/stats.h"
 13174              		.file 12 "src/revision.h"
 13175              		.file 13 "src/printer.h"
 13176              		.file 14 "src/charset7.h"
 13177              		.file 15 "src/lcd.h"
 13178              		.file 16 "src/decn.h"
 13179              		.file 17 "src/alpha.h"
 13180              		.file 18 "src/int.h"
ARM GAS  /tmp/ccDDbRKQ.s 			page 366


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccDDbRKQ.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccDDbRKQ.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccDDbRKQ.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccDDbRKQ.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccDDbRKQ.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccDDbRKQ.s:220    .text.set_dig:000000000000002c $d
     /tmp/ccDDbRKQ.s:225    .text.hms_render:0000000000000000 $t
     /tmp/ccDDbRKQ.s:232    .text.hms_render:0000000000000000 hms_render
     /tmp/ccDDbRKQ.s:431    .text.hms_render:00000000000000a4 $d
     /tmp/ccDDbRKQ.s:438    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccDDbRKQ.s:445    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccDDbRKQ.s:559    .text.hms_step:0000000000000000 $t
     /tmp/ccDDbRKQ.s:566    .text.hms_step:0000000000000000 hms_step
     /tmp/ccDDbRKQ.s:627    .text.hms_step:0000000000000034 $d
     /tmp/ccDDbRKQ.s:632    .text.s_s_sized:0000000000000000 $t
     /tmp/ccDDbRKQ.s:639    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccDDbRKQ.s:1046   .text.s_s_sized:0000000000000178 $d
     /tmp/ccDDbRKQ.s:1052   .text.set_exp:0000000000000000 $t
     /tmp/ccDDbRKQ.s:1059   .text.set_exp:0000000000000000 set_exp
     /tmp/ccDDbRKQ.s:1345   .text.set_exp:00000000000000f8 $d
     /tmp/ccDDbRKQ.s:1351   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccDDbRKQ.s:1358   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccDDbRKQ.s:1405   .text.set_decimal.part.0:0000000000000000 $t
     /tmp/ccDDbRKQ.s:1412   .text.set_decimal.part.0:0000000000000000 set_decimal.part.0
     /tmp/ccDDbRKQ.s:1459   .text.set_digits_string:0000000000000000 $t
     /tmp/ccDDbRKQ.s:1466   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccDDbRKQ.s:1578   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccDDbRKQ.s:1582   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccDDbRKQ.s:1589   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccDDbRKQ.s:1712   .text.check_special_dn.isra.0:0000000000000058 $d
     /tmp/ccDDbRKQ.s:1719   .text.set_x_hms:0000000000000000 $t
     /tmp/ccDDbRKQ.s:1726   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccDDbRKQ.s:2247   .text.set_x_hms:00000000000001c4 $d
     /tmp/ccDDbRKQ.s:2256   .text.set_x_fract:0000000000000000 $t
     /tmp/ccDDbRKQ.s:2263   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccDDbRKQ.s:2692   .text.set_x_fract:0000000000000194 $d
     /tmp/ccDDbRKQ.s:2706   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccDDbRKQ.s:2707   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccDDbRKQ.s:2710   .text.carry_overflow:0000000000000000 $t
     /tmp/ccDDbRKQ.s:2717   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccDDbRKQ.s:2847   .text.carry_overflow:000000000000006c $d
     /tmp/ccDDbRKQ.s:2856   .text.set_int_x:0000000000000000 $t
     /tmp/ccDDbRKQ.s:2863   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccDDbRKQ.s:3621   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.372:0000000000000000 CSWTCH.374
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccDDbRKQ.s:3633   .text.set_int_x:0000000000000360 $t
     /tmp/ccDDbRKQ.s:3733   .text.set_int_x:00000000000003b8 $d
     /tmp/ccDDbRKQ.s:3739   .text.getdig:0000000000000000 $t
     /tmp/ccDDbRKQ.s:3747   .text.getdig:0000000000000000 getdig
     /tmp/ccDDbRKQ.s:3767   .text.getdig:0000000000000008 $d
     /tmp/ccDDbRKQ.s:3772   .text.dot:0000000000000000 $t
     /tmp/ccDDbRKQ.s:3780   .text.dot:0000000000000000 dot
     /tmp/ccDDbRKQ.s:3803   .text.std_round_fix:0000000000000000 $t
     /tmp/ccDDbRKQ.s:3811   .text.std_round_fix:0000000000000000 std_round_fix
ARM GAS  /tmp/ccDDbRKQ.s 			page 367


     /tmp/ccDDbRKQ.s:3968   .text.std_round_fix:0000000000000078 $d
     /tmp/ccDDbRKQ.s:3973   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccDDbRKQ.s:3981   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccDDbRKQ.s:4080   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccDDbRKQ.s:4086   .text.set_annunciators:0000000000000000 $t
     /tmp/ccDDbRKQ.s:4093   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccDDbRKQ.s:4439   .text.set_annunciators:00000000000000dc $d
     /tmp/ccDDbRKQ.s:4450   .text.pixel_length:0000000000000000 $t
     /tmp/ccDDbRKQ.s:4458   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccDDbRKQ.s:4549   .text.set_status:0000000000000000 $t
     /tmp/ccDDbRKQ.s:4556   .text.set_status:0000000000000000 set_status
     /tmp/ccDDbRKQ.s:4629   .text.set_status:0000000000000038 $d
     /tmp/ccDDbRKQ.s:4634   .text.set_x_dn:0000000000000000 $t
     /tmp/ccDDbRKQ.s:4642   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccDDbRKQ.s:5434   .text.set_x_dn:0000000000000364 $d
     /tmp/ccDDbRKQ.s:5442   .text.set_x_dn:0000000000000378 $t
     /tmp/ccDDbRKQ.s:5595   .text.set_x_dn:0000000000000424 $d
     /tmp/ccDDbRKQ.s:5601   .text.set_x_dn:000000000000042e $t
     /tmp/ccDDbRKQ.s:5627   .text.set_x_dn:000000000000045a $d
     /tmp/ccDDbRKQ.s:5633   .text.set_x_dn:0000000000000464 $t
     /tmp/ccDDbRKQ.s:6244   .text.set_x_dn:00000000000006ec $d
     /tmp/ccDDbRKQ.s:6258   .text.set_x_dn:0000000000000700 $t
     /tmp/ccDDbRKQ.s:6978   .text.set_x_dn:00000000000009c8 $d
     /tmp/ccDDbRKQ.s:6988   .text.set_x:0000000000000000 $t
     /tmp/ccDDbRKQ.s:6995   .text.set_x:0000000000000000 set_x
     /tmp/ccDDbRKQ.s:7063   .text.format_reg:0000000000000000 $t
     /tmp/ccDDbRKQ.s:7071   .text.format_reg:0000000000000000 format_reg
     /tmp/ccDDbRKQ.s:7190   .text.format_reg:0000000000000064 $d
     /tmp/ccDDbRKQ.s:7196   .text.set_status_right:0000000000000000 $t
     /tmp/ccDDbRKQ.s:7203   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccDDbRKQ.s:7347   .text.set_status_right:000000000000006c $d
     /tmp/ccDDbRKQ.s:7352   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccDDbRKQ.s:7359   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccDDbRKQ.s:7484   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccDDbRKQ.s:7489   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccDDbRKQ.s:7547   .text.annunciators:0000000000000000 $t
     /tmp/ccDDbRKQ.s:7554   .text.annunciators:0000000000000000 annunciators
     /tmp/ccDDbRKQ.s:8041   .text.annunciators:000000000000027c $d
     /tmp/ccDDbRKQ.s:8062   .text.annunciators:00000000000002b4 $t
     /tmp/ccDDbRKQ.s:8741   .text.annunciators:00000000000005a0 $d
     /tmp/ccDDbRKQ.s:8758   .text.annunciators:00000000000005dc $t
     /tmp/ccDDbRKQ.s:8871   .text.annunciators:0000000000000650 $d
     /tmp/ccDDbRKQ.s:8882   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccDDbRKQ.s:8943   .text.display:0000000000000000 $t
     /tmp/ccDDbRKQ.s:8951   .text.display:0000000000000000 display
     /tmp/ccDDbRKQ.s:9595   .text.display:00000000000002ec $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000004 DispMsg
     /tmp/ccDDbRKQ.s:9614   .text.display:0000000000000324 $t
     /tmp/ccDDbRKQ.s:10317  .text.display:00000000000005f4 $d
     /tmp/ccDDbRKQ.s:10339  .text.display:0000000000000630 $t
     /tmp/ccDDbRKQ.s:11236  .text.display:0000000000000984 $d
     /tmp/ccDDbRKQ.s:11252  .text.display:00000000000009a8 $t
     /tmp/ccDDbRKQ.s:12041  .text.display:0000000000000ccc $d
     /tmp/ccDDbRKQ.s:12063  .text.display:0000000000000d04 $t
ARM GAS  /tmp/ccDDbRKQ.s 			page 368


     /tmp/ccDDbRKQ.s:12271  .text.display:0000000000000de0 $d
     /tmp/ccDDbRKQ.s:12281  .text.frozen_display:0000000000000000 $t
     /tmp/ccDDbRKQ.s:12289  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccDDbRKQ.s:12319  .text.frozen_display:000000000000001c $d
     /tmp/ccDDbRKQ.s:12324  .text.message:0000000000000000 $t
     /tmp/ccDDbRKQ.s:12332  .text.message:0000000000000000 message
     /tmp/ccDDbRKQ.s:12461  .text.message:0000000000000060 $d
     /tmp/ccDDbRKQ.s:12469  .text.error_message:0000000000000000 $t
     /tmp/ccDDbRKQ.s:12477  .text.error_message:0000000000000000 error_message
     /tmp/ccDDbRKQ.s:12743  .text.error_message:00000000000000d0 $d
     /tmp/ccDDbRKQ.s:12754  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccDDbRKQ.s:12762  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccDDbRKQ.s:12870  .text.stopwatch_message:000000000000004c $d
     /tmp/ccDDbRKQ.s:12875  .rodata.str1.4:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13001  .rodata.CSWTCH.372:0000000000000000 CSWTCH.372
     /tmp/ccDDbRKQ.s:13020  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccDDbRKQ.s:12994  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccDDbRKQ.s:13083  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccDDbRKQ.s:12895  .rodata:0000000000000000 $d
     /tmp/ccDDbRKQ.s:12981  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccDDbRKQ.s:12982  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccDDbRKQ.s:12987  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccDDbRKQ.s:12988  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccDDbRKQ.s:12990  .bss.no_status_top:0000000000000000 $d
     /tmp/ccDDbRKQ.s:12997  .rodata.CSWTCH.372:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13007  .rodata.CSWTCH.399:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13011  .rodata.CSWTCH.399:0000000000000000 CSWTCH.399
     /tmp/ccDDbRKQ.s:13016  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13023  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13027  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccDDbRKQ.s:13030  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13034  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccDDbRKQ.s:13037  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13041  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccDDbRKQ.s:13044  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13048  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccDDbRKQ.s:13051  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13055  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccDDbRKQ.s:13058  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13062  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccDDbRKQ.s:13065  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13069  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccDDbRKQ.s:13072  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13076  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccDDbRKQ.s:13079  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13086  .rodata.digtbl:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13090  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccDDbRKQ.s:13099  .rodata.error_table.8660:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13103  .rodata.error_table.8660:0000000000000000 error_table.8660
     /tmp/ccDDbRKQ.s:13132  .rodata.libname:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13136  .rodata.libname:0000000000000000 libname
     /tmp/ccDDbRKQ.s:13142  .rodata.shift_chars.8767:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13146  .rodata.shift_chars.8767:0000000000000000 shift_chars.8767
     /tmp/ccDDbRKQ.s:13149  .rodata.small_dots.8968:0000000000000000 $d
     /tmp/ccDDbRKQ.s:13153  .rodata.small_dots.8968:0000000000000000 small_dots.8968
     /tmp/ccDDbRKQ.s:13156  .rodata.small_minus.8967:0000000000000000 $d
ARM GAS  /tmp/ccDDbRKQ.s 			page 369


     /tmp/ccDDbRKQ.s:13160  .rodata.small_minus.8967:0000000000000000 small_minus.8967

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
ARM GAS  /tmp/ccDDbRKQ.s 			page 370


is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
replace_char
ShowRegister
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
ProgFree
argcmds
WasDataEntry
scopy_char
current_catalogue
catcmd
get_const
getprog
prt
op_r2p
multicmds
global_regs
find_label_from
local_regs
slen
free_mem
free_flash
findmultilbl
alpha_rcl_s
copyreg
sigma_val
SizeStatRegs
StackBase
getX
packed_from_number
set_NaN
do_conv
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing

ARM GAS  /tmp/ccZdZ92R.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccZdZ92R.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** #ifdef TOP_ROW
  43:src/display.c **** static void set_status_top_always(const char *);
  44:src/display.c **** #endif
  45:src/display.c **** 
  46:src/display.c **** static void set_status_right(const char *);
  47:src/display.c **** static void set_status_graphic(const unsigned char *);
  48:src/display.c **** 
  49:src/display.c **** static void set_int_x(const long long int value, char *res);
  50:src/display.c **** 
  51:src/display.c **** const char *DispMsg; // What to display in message area
  52:src/display.c **** 
  53:src/display.c **** short int DispPlot;
  54:src/display.c **** short int no_status_top = 0;
  55:src/display.c **** 
  56:src/display.c **** #ifndef REALBUILD
  57:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  58:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  59:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  60:src/display.c **** char forceDispPlot;
  61:src/display.c **** #endif
  62:src/display.c **** 
  63:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  64:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  65:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  66:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  67:src/display.c **** 
  68:src/display.c **** /* Message strings
  69:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  70:src/display.c ****  * are for the upper dot matrix line.
  71:src/display.c ****  */
  72:src/display.c **** static const char S_SURE[] = "Sure?";
  73:src/display.c **** 
  74:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  75:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  76:src/display.c **** #ifndef REALBUILD
  77:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  78:src/display.c **** #endif
  79:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  82:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  86:src/display.c **** #ifndef REALBUILD
  87:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
ARM GAS  /tmp/ccZdZ92R.s 			page 3


  88:src/display.c **** #endif
  89:src/display.c **** 
  90:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  91:src/display.c **** static const char S7_fract_LT[] = " Lt";
  92:src/display.c **** static const char S7_fract_GT[] = " Gt";
  93:src/display.c **** 
  94:src/display.c **** static const char libname[][5] = {
  95:src/display.c ****   "rAMm", "Lib ", "Bup ",
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c ****   "roMm"
  98:src/display.c **** #endif
  99:src/display.c **** };
 100:src/display.c **** 
 101:src/display.c **** #ifndef REALBUILD
 102:src/display.c **** static const char libname_text[][10] = {
 103:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 104:src/display.c **** };
 105:src/display.c **** static const char libname_shorttext[][5] = {
 106:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 107:src/display.c **** };
 108:src/display.c **** #endif
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Set the separator and decimal mode globals
 112:src/display.c ****  */
 113:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 113 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 114:src/display.c ****   // Separators used by various modes
 115:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 115 3 view .LVU1
  35              		.loc 1 115 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 116:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 116 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 115 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 115 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 113:src/display.c ****   // Separators used by various modes
  44              		.loc 1 113 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 115 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 116 5 is_stmt 1 view .LVU8
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccZdZ92R.s 			page 4


  52              		.loc 1 117 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 118:src/display.c ****   }
 119:src/display.c ****   else {
 120:src/display.c ****     SeparatorMode = SEP_COMMA;
 121:src/display.c ****     DecimalMode = DECIMAL_DOT;
 122:src/display.c ****   }
 123:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 123 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 117 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 116 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 117 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 123 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 116 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 117 5 is_stmt 1 view .LVU16
  67              		.loc 1 123 3 view .LVU17
  68              		.loc 1 123 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 123 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 124:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 124 5 is_stmt 1 view .LVU20
  76              		.loc 1 124 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 125:src/display.c **** }
  80              		.loc 1 125 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 120 5 is_stmt 1 view .LVU23
 121:src/display.c ****   }
  90              		.loc 1 121 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 123 8 view .LVU25
ARM GAS  /tmp/ccZdZ92R.s 			page 5


  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 121:src/display.c ****   }
  94              		.loc 1 121 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 120 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 123 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 120 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 121:src/display.c ****   }
 102              		.loc 1 121 5 is_stmt 1 view .LVU30
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 123 3 view .LVU31
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 123 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 123 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 125 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 126:src/display.c **** 
 127:src/display.c **** 
 128:src/display.c **** /* Table of error messages.
 129:src/display.c ****  * These consist of a double string.  The first is displayed in the
 130:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 131:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 132:src/display.c ****  */
 133:src/display.c **** void error_message(const unsigned int e) 
ARM GAS  /tmp/ccZdZ92R.s 			page 6


 134:src/display.c **** {
 135:src/display.c **** #define MSG1(top) top "\0"
 136:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 137:src/display.c **** 
 138:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 139:src/display.c ****   static const char *const error_table[] = 
 140:src/display.c ****     {
 141:src/display.c ****       // manually get the order correct!
 142:src/display.c ****       MSG2("Running", "ProGraMm"),
 143:src/display.c ****       MSG1("Domain"),
 144:src/display.c ****       MSG2("Bad time", "or dAtE"),
 145:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 146:src/display.c ****       MSG1("+\237"),
 147:src/display.c ****       MSG1("-\237"),
 148:src/display.c ****       MSG2("No such", "LAbEL"),
 149:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 150:src/display.c ****       MSG1("Out of range"),
 151:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 152:src/display.c ****       MSG2("Bad digit", "1"),
 153:src/display.c ****       MSG2("Too long", "1"),
 154:src/display.c **** #else
 155:src/display.c ****       MSG1("Bad digit"),
 156:src/display.c ****       MSG1("Too long"),
 157:src/display.c **** #endif
 158:src/display.c ****       MSG2("RAM is", "FuLL"),
 159:src/display.c ****       MSG2("Stack", "CLASH"),
 160:src/display.c ****       MSG1("Bad mode"),
 161:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 162:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 163:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 164:src/display.c ****       MSG1("I/O"),
 165:src/display.c ****       MSG2("Invalid", "dAtA"),
 166:src/display.c ****       MSG2("Write", "ProtEctEd"),
 167:src/display.c ****       MSG2("No root", "Found"),
 168:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 169:src/display.c ****       MSG1("Singular"),
 170:src/display.c ****       MSG2("Flash is", "FuLL"),
 171:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 172:src/display.c **** #ifndef SHIFT_EXPONENT
 173:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG2("Too\007\304 small", "1"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG2("Too small", "1"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG2("Too big", "1"),
 180:src/display.c **** #  else
 181:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 182:src/display.c ****       MSG1("Too\007\304 small"),
 183:src/display.c **** #     else
 184:src/display.c ****       MSG1("Too small"),
 185:src/display.c **** #     endif
 186:src/display.c ****       MSG1("Too big"),
 187:src/display.c **** #  endif
 188:src/display.c **** #endif
 189:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 190:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
ARM GAS  /tmp/ccZdZ92R.s 			page 7


 191:src/display.c ****       MSG2("Interrupted", "X"),
 192:src/display.c **** #endif
 193:src/display.c ****     };
 194:src/display.c **** #undef MSG1
 195:src/display.c **** #undef MSG2
 196:src/display.c **** #ifndef REALBUILD
 197:src/display.c ****   static const char *const error_table_text[] =
 198:src/display.c ****     {
 199:src/display.c ****       " P r o g r a m ",
 200:src/display.c ****       "",
 201:src/display.c ****       " o r   d a t e ",
 202:src/display.c ****       " O p - c o d e ",
 203:src/display.c ****       "",
 204:src/display.c ****       "",
 205:src/display.c ****       " L a b e l ",
 206:src/display.c ****       " O p e r a t i o n ",
 207:src/display.c ****       "",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " F u l l ",
 211:src/display.c ****       " C l a s h ",
 212:src/display.c ****       "",
 213:src/display.c ****       " T o o   s m a l l ",
 214:src/display.c ****       " D a t a   p o i n t s ",
 215:src/display.c ****       " P a r a m e t e r ",
 216:src/display.c ****       "",
 217:src/display.c ****       " D a t a ",
 218:src/display.c ****       " P r o t e c t e d ",
 219:src/display.c ****       " F o u n d ",
 220:src/display.c ****       " M i s m a t c h ",
 221:src/display.c ****       "",
 222:src/display.c ****       " F u l l ",
 223:src/display.c ****       " I n s t a l l e d ",
 224:src/display.c **** #ifndef SHIFT_EXPONENT
 225:src/display.c ****       "",
 226:src/display.c ****       "",
 227:src/display.c **** #endif
 228:src/display.c ****       "",
 229:src/display.c ****     };
 230:src/display.c **** #endif
 231:src/display.c **** 
 232:src/display.c ****   if (e != ERR_NONE || Running) {
 233:src/display.c ****     const char *p = error_table[e];
 234:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 235:src/display.c ****     if (*q == '\0')
 236:src/display.c ****       q = S7_ERROR;
 237:src/display.c ****     if (*q == 'X') {
 238:src/display.c ****       DispMsg = p;
 239:src/display.c ****       frozen_display();
 240:src/display.c ****     }
 241:src/display.c ****     else {
 242:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 243:src/display.c ****       if (*q == '1')
 244:src/display.c **** 	q = CNULL;
 245:src/display.c **** #endif
 246:src/display.c ****       message(p, q);
 247:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
ARM GAS  /tmp/ccZdZ92R.s 			page 8


 248:src/display.c **** #ifndef REALBUILD
 249:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 250:src/display.c **** #endif
 251:src/display.c ****     }
 252:src/display.c **** #ifdef INFRARED
 253:src/display.c ****     if (Tracing) {
 254:src/display.c ****       if (*q == 'X')
 255:src/display.c **** 	print_reg(regX_idx, p, 0);
 256:src/display.c ****       else {
 257:src/display.c **** 	print_tab(0);
 258:src/display.c **** 	print_line(p, 0);
 259:src/display.c **** 	print(' ');
 260:src/display.c **** 	while (*q != '\0') {
 261:src/display.c **** 	  int c = *q;
 262:src/display.c **** 	  if (c >= 'A')
 263:src/display.c **** 	    c |= 0x60; // ASCII lower case
 264:src/display.c **** 	  print(c);
 265:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 266:src/display.c **** 	    ++q;
 267:src/display.c **** 	  ++q;
 268:src/display.c **** 	}
 269:src/display.c **** 	print_advance( 0 );
 270:src/display.c ****       }
 271:src/display.c ****     }
 272:src/display.c **** #endif
 273:src/display.c ****   }
 274:src/display.c **** }
 275:src/display.c **** 
 276:src/display.c **** 
 277:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 278:src/display.c ****  * display.
 279:src/display.c ****  */
 280:src/display.c **** #define D_TOP 64
 281:src/display.c **** #define D_TL 32
 282:src/display.c **** #define D_TR 8
 283:src/display.c **** #define D_MIDDLE 16
 284:src/display.c **** #define D_BL 4
 285:src/display.c **** #define D_BR 1
 286:src/display.c **** #define D_BOTTOM 2
 287:src/display.c **** 
 288:src/display.c **** #include "charset7.h"
 289:src/display.c **** 
 290:src/display.c **** #ifndef REALBUILD
 291:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 292:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 293:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 294:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 295:src/display.c **** 
 296:src/display.c **** static void set_mant_sign_dot()
 297:src/display.c **** {
 298:src/display.c ****   LastDisplayedNumber[0]='-';
 299:src/display.c ****   set_dot(MANT_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_mant_sign_dot()
 303:src/display.c **** {
 304:src/display.c ****   LastDisplayedNumber[0]=' ';
ARM GAS  /tmp/ccZdZ92R.s 			page 9


 305:src/display.c ****   clr_dot(MANT_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** static void set_exp_sign_dot()
 309:src/display.c **** {
 310:src/display.c ****   LastDisplayedExponent[0]='-';
 311:src/display.c ****   set_dot(EXP_SIGN);
 312:src/display.c **** }
 313:src/display.c **** 
 314:src/display.c **** static void clr_exp_sign_dot()
 315:src/display.c **** {
 316:src/display.c ****   LastDisplayedExponent[0]=' ';
 317:src/display.c ****   clr_dot(EXP_SIGN);
 318:src/display.c **** }
 319:src/display.c **** 
 320:src/display.c **** #else
 321:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 322:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 325:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 326:src/display.c **** 
 327:src/display.c **** #endif
 328:src/display.c **** 
 329:src/display.c **** #ifndef REALBUILD
 330:src/display.c **** int getdig(int ch)
 331:src/display.c **** #else
 332:src/display.c ****   static int getdig(int ch)
 333:src/display.c **** #endif
 334:src/display.c **** {
 335:src/display.c ****   // perform index lookup
 336:src/display.c ****   return digtbl[ch&0xff];
 337:src/display.c **** }
 338:src/display.c **** 
 339:src/display.c **** void dot(int n, int on) {
 340:src/display.c ****   if (on)	set_dot(n);
 341:src/display.c ****   else	clr_dot(n);
 342:src/display.c **** }
 343:src/display.c **** 
 344:src/display.c **** 
 345:src/display.c **** /* Set the decimal point *after* the indicated digit
 346:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 347:src/display.c ****  * of decimal.
 348:src/display.c ****  */
 349:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 350:src/display.c ****   if (res) {
 351:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 352:src/display.c ****   } else {
 353:src/display.c ****     set_dot(posn+7);
 354:src/display.c ****     if (decimal != DECIMAL_DOT)
 355:src/display.c ****       set_dot(posn+8);
 356:src/display.c **** #ifndef REALBUILD
 357:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 358:src/display.c **** #endif
 359:src/display.c ****   }
 360:src/display.c ****   return res;
 361:src/display.c **** }
ARM GAS  /tmp/ccZdZ92R.s 			page 10


 362:src/display.c **** 
 363:src/display.c **** /* Set the digit group separator *before* the specified digit.
 364:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 365:src/display.c ****  * sep argument.
 366:src/display.c ****  */
 367:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 368:src/display.c ****   if (sep == SEP_NONE)
 369:src/display.c ****     return res;
 370:src/display.c ****   if (res) {
 371:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 372:src/display.c ****     else *res++ = '.';
 373:src/display.c ****   } else {
 374:src/display.c ****     posn -= SEGS_PER_DIGIT;
 375:src/display.c ****     set_dot(posn+7);
 376:src/display.c ****     if (sep == SEP_COMMA)
 377:src/display.c ****       set_dot(posn+8);
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 380:src/display.c **** #endif
 381:src/display.c ****   }
 382:src/display.c ****   return res;
 383:src/display.c **** }
 384:src/display.c **** 
 385:src/display.c **** /* Set a digit in positions [base, base+6] */
 386:src/display.c **** static void set_dig(int base, int ch)
 387:src/display.c **** {
 136              		.loc 1 387 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 388:src/display.c ****   int i;
 140              		.loc 1 388 3 view .LVU36
 389:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 389 3 view .LVU37
 142              	.LBB143:
 143              	.LBI143:
 330:src/display.c **** #else
 144              		.loc 1 330 5 view .LVU38
 145              	.LBB144:
 336:src/display.c **** }
 146              		.loc 1 336 3 view .LVU39
 336:src/display.c **** }
 147              		.loc 1 336 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 336:src/display.c **** }
 149              		.loc 1 336 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE144:
 152              	.LBE143:
 390:src/display.c **** #ifndef REALBUILD
 391:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 391 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 387:src/display.c ****   int i;
 155              		.loc 1 387 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccZdZ92R.s 			page 11


 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB146:
 163              	.LBB145:
 336:src/display.c **** }
 164              		.loc 1 336 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 336:src/display.c **** }
 167              		.loc 1 336 16 view .LVU45
 168              	.LBE145:
 169              	.LBE146:
 170              		.loc 1 391 3 is_stmt 1 view .LVU46
 171              		.loc 1 391 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 392:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 392 5 is_stmt 1 view .LVU48
 174              		.loc 1 392 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 392 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 392 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 392 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 392 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 393:src/display.c ****   else
 394:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 395:src/display.c **** #endif
 396:src/display.c ****   for (i=6; i>=0; i--)
 397:src/display.c ****     {
 398:src/display.c ****       //		dot(base, c & (1 << i));
 399:src/display.c ****       if (c & (1 << i))
 400:src/display.c **** 	set_dot(base);
 196              		.loc 1 400 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 401:src/display.c ****       else
 402:src/display.c **** 	clr_dot(base);
 403:src/display.c ****       base++;
 199              		.loc 1 403 7 is_stmt 1 view .LVU55
 396:src/display.c ****     {
ARM GAS  /tmp/ccZdZ92R.s 			page 12


 200              		.loc 1 396 19 view .LVU56
 396:src/display.c ****     {
 201              		.loc 1 396 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 396:src/display.c ****     {
 204              		.loc 1 396 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 400:src/display.c ****       else
 208              		.loc 1 400 2 is_stmt 1 view .LVU59
 402:src/display.c ****       base++;
 209              		.loc 1 402 2 view .LVU60
 399:src/display.c **** 	set_dot(base);
 210              		.loc 1 399 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 399:src/display.c **** 	set_dot(base);
 212              		.loc 1 399 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 399:src/display.c **** 	set_dot(base);
 216              		.loc 1 399 7 is_stmt 1 view .LVU63
 399:src/display.c **** 	set_dot(base);
 217              		.loc 1 399 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 402:src/display.c ****       base++;
 219              		.loc 1 402 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 403 7 is_stmt 1 view .LVU66
 396:src/display.c ****     {
 223              		.loc 1 396 19 view .LVU67
 396:src/display.c ****     {
 224              		.loc 1 396 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 396:src/display.c ****     {
 227              		.loc 1 396 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 404:src/display.c ****     }
 405:src/display.c **** }
 231              		.loc 1 405 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 394:src/display.c **** #endif
 235              		.loc 1 394 5 is_stmt 1 view .LVU71
 394:src/display.c **** #endif
 236              		.loc 1 394 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 394:src/display.c **** #endif
 238              		.loc 1 394 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
ARM GAS  /tmp/ccZdZ92R.s 			page 13


 394:src/display.c **** #endif
 240              		.loc 1 394 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 394:src/display.c **** #endif
 242              		.loc 1 394 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 394:src/display.c **** #endif
 246              		.loc 1 394 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 406:src/display.c **** 
 407:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 408:src/display.c ****   if (res) *res++ = ch;
 409:src/display.c ****   else	set_dig(base, ch);
 410:src/display.c ****   return res;
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** 
 414:src/display.c **** static void set_digits_string(const char *msg, int j) {
 415:src/display.c ****   for (; *msg != '\0'; msg++) {
 416:src/display.c ****     if (*msg == '.' || *msg == ',')
 417:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 418:src/display.c ****     else {
 419:src/display.c ****       set_dig_s(j, *msg, CNULL);
 420:src/display.c ****       j += SEGS_PER_DIGIT;
 421:src/display.c ****     }
 422:src/display.c ****   }
 423:src/display.c **** }
 424:src/display.c **** 
 425:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 426:src/display.c ****   int i;
 427:src/display.c ****   const int n = res == NULL ? 3 : 4;
 428:src/display.c **** 
 429:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
ARM GAS  /tmp/ccZdZ92R.s 			page 14


 430:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** /* Force the exponent display
 434:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 435:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 436:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 437:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 438:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 439:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 440:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 441:src/display.c ****  */
 442:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 443:src/display.c ****   union {
 444:src/display.c ****     char buf[4];
 445:src/display.c ****     int i;
 446:src/display.c ****   } u;
 447:src/display.c ****   int negative;
 448:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 449:src/display.c ****   int thousands;
 450:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 451:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 452:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 453:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 454:src/display.c **** #  else
 455:src/display.c ****   const int show_large_exponent = 1;
 456:src/display.c **** #  endif
 457:src/display.c **** #else
 458:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 459:src/display.c ****   int thousands;
 460:src/display.c **** #  endif
 461:src/display.c ****   const int show_large_exponent = 0;
 462:src/display.c **** #endif
 463:src/display.c **** 
 464:src/display.c ****   negative = flags & 2;
 465:src/display.c ****   if (exp < 0) {
 466:src/display.c ****     negative = 1;
 467:src/display.c ****     exp = -exp;
 468:src/display.c ****   }
 469:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 470:src/display.c ****   thousands = exp / 1000;
 471:src/display.c **** #endif
 472:src/display.c ****   if (res) {
 473:src/display.c **** #ifdef INCLUDE_YREG_CODE
 474:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 475:src/display.c ****     if (thousands != 0) {
 476:src/display.c **** #else
 477:src/display.c ****       if (exp > 999) {
 478:src/display.c **** #endif
 479:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 480:src/display.c **** 	// No exponent separator for large -ve exponents
 481:src/display.c ****       }
 482:src/display.c ****       else *res++ = 'e'; // Normal separator
 483:src/display.c **** #else
 484:src/display.c ****       *res++ = 'e';
 485:src/display.c **** #endif
 486:src/display.c ****       if (negative) *res++ = '-';
ARM GAS  /tmp/ccZdZ92R.s 			page 15


 487:src/display.c ****     }
 488:src/display.c ****     else {
 489:src/display.c ****       if (negative) SET_EXP_SIGN;
 490:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 491:src/display.c ****       if (thousands != 0) {
 492:src/display.c **** #else
 493:src/display.c **** 	if (exp > 999) {
 494:src/display.c **** #endif
 495:src/display.c **** 	  if (!show_large_exponent
 496:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 497:src/display.c **** 	      && (flags & 8) == 0
 498:src/display.c **** #endif
 499:src/display.c **** 	      ) {
 500:src/display.c **** #ifdef REALBUILD
 501:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 502:src/display.c **** #else
 503:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 504:src/display.c **** #endif
 505:src/display.c **** 	    goto no_number;
 506:src/display.c **** 	  }
 507:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 508:src/display.c **** 	  else {
 509:src/display.c **** 	    exp -= thousands * 1000;
 510:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 511:src/display.c **** 	    if (flags & 16) {
 512:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 513:src/display.c **** 	      int i;
 514:src/display.c **** 
 515:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 516:src/display.c **** 		// Clear digits and separators
 517:src/display.c **** 		clr_dot(i);
 518:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 519:src/display.c **** 	    }
 520:src/display.c **** #  endif
 521:src/display.c **** 	    if (negative) {
 522:src/display.c **** 	      CLR_EXP_SIGN;
 523:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 524:src/display.c **** 	    }
 525:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 526:src/display.c **** 	    flags = 1;
 527:src/display.c **** 	  }
 528:src/display.c **** #endif
 529:src/display.c **** 	}
 530:src/display.c ****       }
 531:src/display.c **** #ifdef REALBUILD
 532:src/display.c ****       u.i = 0; // Smaller ARM code
 533:src/display.c **** #else
 534:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 535:src/display.c **** #endif
 536:src/display.c ****       if (flags & 5) {
 537:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 538:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 539:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 540:src/display.c **** 	  int i;
 541:src/display.c **** 
 542:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 543:src/display.c **** 	    if (u.buf[i] == '0')
ARM GAS  /tmp/ccZdZ92R.s 			page 16


 544:src/display.c **** 	      u.buf[i] = ' ';
 545:src/display.c **** 	    else
 546:src/display.c **** 	      break;
 547:src/display.c **** 	  }
 548:src/display.c **** 	  if (i != 0 && negative) {
 549:src/display.c **** 	    // Move minus sign to right in front of exponent
 550:src/display.c **** 	    CLR_EXP_SIGN;
 551:src/display.c **** 	    u.buf[i - 1] = '-';
 552:src/display.c **** 	  }
 553:src/display.c **** 	}
 554:src/display.c **** #endif
 555:src/display.c ****       }
 556:src/display.c ****       else
 557:src/display.c **** 	num_arg(u.buf, exp);
 558:src/display.c ****     no_number:
 559:src/display.c ****       set_exp_digits_string(u.buf, res);
 560:src/display.c ****     }
 561:src/display.c **** 
 562:src/display.c ****     static void carry_overflow(void) {
 563:src/display.c ****       const int base = SEGS_EXP_BASE;
 564:src/display.c ****       int c;
 565:src/display.c ****       unsigned int b;
 566:src/display.c **** 
 567:src/display.c ****       // Figure out the base
 568:src/display.c ****       switch (State2.smode) {
 569:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 570:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 571:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 572:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 573:src/display.c ****       default:	b = UState.int_base+1;	break;
 574:src/display.c ****       }
 575:src/display.c **** 
 576:src/display.c ****       // Display the base as the first exponent digit
 577:src/display.c ****       if (b > 10 && b < 16)
 578:src/display.c **** 	SET_EXP_SIGN;
 579:src/display.c ****       c = "B34567o9D12345h"[b-2];
 580:src/display.c ****       set_dig(base, c);
 581:src/display.c **** 
 582:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 583:src/display.c ****       if (get_carry())
 584:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 585:src/display.c ****       if (get_overflow())
 586:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 587:src/display.c ****     }
 588:src/display.c **** 
 589:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 590:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 591:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 592:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 593:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 594:src/display.c **** #endif
 595:src/display.c **** 
 596:src/display.c ****     /* Display the annunicator text line.
 597:src/display.c ****      * Care needs to be taken to keep things aligned.
 598:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 599:src/display.c ****      */
 600:src/display.c **** #ifdef TOP_ROW
ARM GAS  /tmp/ccZdZ92R.s 			page 17


 601:src/display.c ****     static void annunciators(void) {
 602:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 603:src/display.c ****       char buf[42], *p = buf, *q="";
 604:src/display.c ****       char buf2[42], *p2 = buf2;
 605:src/display.c ****       int n;
 606:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 607:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 608:src/display.c ****       // Constant variables and code branches depending on a constant variable
 609:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 610:src/display.c ****       // feature run-time configurable if needed.
 611:src/display.c **** #ifdef INCLUDE_YREG_CODE
 612:src/display.c **** #  ifdef YREG_ALWAYS_ON
 613:src/display.c ****       const int yreg_enabled = 1;
 614:src/display.c **** #  else
 615:src/display.c ****       const int yreg_enabled = UState.show_y;
 616:src/display.c **** #  endif
 617:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 618:src/display.c ****       const int yreg_hms = 1;
 619:src/display.c **** #  else
 620:src/display.c ****       const int yreg_hms = 0;
 621:src/display.c **** #  endif
 622:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 623:src/display.c ****       const int yreg_fract = 1;
 624:src/display.c **** #  else
 625:src/display.c ****       const int yreg_fract = 0;
 626:src/display.c **** #  endif
 627:src/display.c **** #else
 628:src/display.c ****       const int yreg_enabled = 0;
 629:src/display.c ****       const int yreg_hms = 0;
 630:src/display.c ****       const int yreg_fract = 0;
 631:src/display.c **** #endif
 632:src/display.c **** #ifdef RP_PREFIX
 633:src/display.c ****       const int rp_prefix = 1;
 634:src/display.c **** #else
 635:src/display.c ****       const int rp_prefix = 0;
 636:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 637:src/display.c **** #endif
 638:src/display.c ****       // Indicates whether font escape code is compiled in.
 639:src/display.c ****       // This variable will always be set at compile time.
 640:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 641:src/display.c ****       const int has_FONT_ESCAPE = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int has_FONT_ESCAPE = 0;
 644:src/display.c **** #endif
 645:src/display.c **** 
 646:src/display.c ****       xset(buf, '\0', sizeof(buf));
 647:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 648:src/display.c ****       
 649:src/display.c ****       if (is_intmode()) {
 650:src/display.c **** #ifdef SHOW_STACK_SIZE
 651:src/display.c **** 	if (shift_char == ' ') {
 652:src/display.c **** 	  *p2++ = '\007';
 653:src/display.c **** 	  *p2++ = '\346';
 654:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 655:src/display.c **** 	}
 656:src/display.c **** 	else
 657:src/display.c **** #endif
ARM GAS  /tmp/ccZdZ92R.s 			page 18


 658:src/display.c **** 	  {
 659:src/display.c **** 	    *p2++ = shift_char;
 660:src/display.c **** 	    *p2++ = '\006';
 661:src/display.c **** 	  }
 662:src/display.c **** 
 663:src/display.c **** 	switch(int_mode()) {
 664:src/display.c **** 	default:
 665:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 666:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 667:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 668:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 669:src/display.c **** 	}
 670:src/display.c **** 	q = scopy(p2, q);
 671:src/display.c **** 	*q++ = '\006';
 672:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 673:src/display.c **** 
 674:src/display.c **** 	if (IntMaxWindow > 0) {
 675:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 676:src/display.c **** 	  if (*q == '1')
 677:src/display.c **** 	    n += 2;
 678:src/display.c **** 	  if (q[1] == '1')
 679:src/display.c **** 	    n += 2;
 680:src/display.c **** 	  while (n-- > 0)
 681:src/display.c **** 	    *p2++ = '\006';
 682:src/display.c **** 
 683:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 684:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 685:src/display.c **** 	}
 686:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 687:src/display.c ****       }
 688:src/display.c ****       else if (!yreg_enabled
 689:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 690:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 691:src/display.c **** #endif
 692:src/display.c **** 	       ) {
 693:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 694:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 695:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 696:src/display.c **** 	if (shift_char == ' ') {
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\342';
 699:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 700:src/display.c **** 	  *p2++ = '\007';
 701:src/display.c **** 	  *p2++ = '\344';
 702:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 703:src/display.c **** 	}
 704:src/display.c **** 	else
 705:src/display.c **** #endif
 706:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 707:src/display.c **** 	    *p2++ = shift_char;
 708:src/display.c **** 	    *p2++ = '\006';
 709:src/display.c **** 	  }
 710:src/display.c **** 	  else {
 711:src/display.c **** 	    *p2++ = 'D';
 712:src/display.c **** 	  }
 713:src/display.c **** 
 714:src/display.c **** 	if (State2.cmplx) {
ARM GAS  /tmp/ccZdZ92R.s 			page 19


 715:src/display.c **** 	  *p2++ = ' ';
 716:src/display.c **** 	  *p2 = '\024';
 717:src/display.c **** 	  goto skip;
 718:src/display.c **** 	}
 719:src/display.c **** 	if (State2.arrow) {
 720:src/display.c **** 	  *p2++ = ' ';
 721:src/display.c **** 	  *p2 = '\015';
 722:src/display.c **** 	  goto skip;
 723:src/display.c **** 	}
 724:src/display.c **** 
 725:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 726:src/display.c **** 	  if (State2.wascomplex) {
 727:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 728:src/display.c **** 	  }
 729:src/display.c **** 	  else if (rp_prefix) {
 730:src/display.c **** 	    if (RectPolConv == 1) {
 731:src/display.c **** 	      q = "\007\306<";
 732:src/display.c **** 	    }
 733:src/display.c **** 	    else {
 734:src/display.c **** 	      q = "\007\306y";
 735:src/display.c **** 	    }
 736:src/display.c **** 	  }
 737:src/display.c **** 	  p = scopy(buf, q);
 738:src/display.c **** 
 739:src/display.c **** 	  goto display_yreg;
 740:src/display.c **** 	}
 741:src/display.c **** 
 742:src/display.c **** 	switch (UState.date_mode) {
 743:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 744:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 745:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 748:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 751:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 752:src/display.c **** #endif
 753:src/display.c **** #endif
 754:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 755:src/display.c **** 	}
 756:src/display.c **** 	p2 = scopy(p2, q);
 757:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 758:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 759:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 760:src/display.c **** 	}
 761:src/display.c **** #else
 762:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 763:src/display.c **** 	*p2++ = '\007';
 764:src/display.c **** 	*p2++ = '\342';
 765:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 766:src/display.c **** #endif
 767:src/display.c ****       }
 768:src/display.c ****       else { // yreg_enabled
 769:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 770:src/display.c **** 	if (State2.cmplx) {
 771:src/display.c **** 	  *p2++ = '\007';
ARM GAS  /tmp/ccZdZ92R.s 			page 20


 772:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 773:src/display.c **** 	  *p2++ = shift_char;
 774:src/display.c **** 	  //	  q = "\024";
 775:src/display.c **** 	  *p2++ = '\024';
 776:src/display.c **** 	}
 777:src/display.c **** 	else {// if (shift_char != ' ') {
 778:src/display.c **** 	  *p2++ = '\007';
 779:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 780:src/display.c **** 	  *p2++ = shift_char;
 781:src/display.c **** 	  //	  goto no_copy;
 782:src/display.c **** 	}
 783:src/display.c **** 	//	else
 784:src/display.c **** #endif
 785:src/display.c **** 	  if (State2.wascomplex) {
 786:src/display.c **** 	    q = "\007\207i";
 787:src/display.c **** 	    p = scopy(p, q);
 788:src/display.c **** 	    //	    goto no_copy;
 789:src/display.c **** 	  }
 790:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 791:src/display.c **** 	    q = "\007\307<";
 792:src/display.c **** 	    p = scopy(p, q);
 793:src/display.c **** 	    //	    goto no_copy;
 794:src/display.c **** 	  }
 795:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 796:src/display.c **** 	    q = "\007\307y";
 797:src/display.c **** 	    p = scopy(p, q);
 798:src/display.c **** 	    //	    goto no_copy;
 799:src/display.c **** 	  }
 800:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 801:src/display.c **** 	  //	  else
 802:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 803:src/display.c **** 	    //	    q = "\007\207\007";
 804:src/display.c **** 	      *p2++ = '\007';
 805:src/display.c **** 	      *p2++ = '\207';
 806:src/display.c **** 	      *p2++ = '\007';	    
 807:src/display.c **** 	    }
 808:src/display.c **** 	    else {
 809:src/display.c **** 	      *p2++ = '\007';
 810:src/display.c **** 	      *p2++ = '\207';
 811:src/display.c **** 	      *p2++ = ' ';
 812:src/display.c **** 	    }
 813:src/display.c **** #endif
 814:src/display.c **** 	    //	else { 
 815:src/display.c **** #ifndef SHOW_STACK_SIZE
 816:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 817:src/display.c **** 	  p2 = scopy(p2, q);
 818:src/display.c **** #else
 819:src/display.c **** 	  if (is_dblmode()) {
 820:src/display.c **** 	    *p2++ = '\007';
 821:src/display.c **** 	    *p2++ = '\342';
 822:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 823:src/display.c **** 	    //	    q = "\007\345D";
 824:src/display.c **** 	    *p2++ = '\007';
 825:src/display.c **** 	    *p2++ = '\345';
 826:src/display.c **** 	    *p2++ = 'D';
 827:src/display.c **** 	  }
 828:src/display.c **** 	  else {
ARM GAS  /tmp/ccZdZ92R.s 			page 21


 829:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 830:src/display.c **** 	    p2 = scopy(p2, q);
 831:src/display.c **** 	  }
 832:src/display.c **** #endif
 833:src/display.c **** 	  //	}
 834:src/display.c **** 	//	p2 = scopy(p2, q);
 835:src/display.c **** 
 836:src/display.c **** 	switch (UState.date_mode) {
 837:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 838:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 839:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 840:src/display.c **** #endif
 841:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 842:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 843:src/display.c **** #endif
 844:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 845:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 846:src/display.c **** #endif
 847:src/display.c **** #endif
 848:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 849:src/display.c **** 	}
 850:src/display.c **** 	  
 851:src/display.c **** 	//      no_copy:
 852:src/display.c **** 	// display either arrow or datemode
 853:src/display.c **** 	if (State2.arrow) {
 854:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 855:src/display.c **** 	} // no need to skip y display with arrow here
 856:src/display.c **** 	else {
 857:src/display.c **** 	  p2 = scopy(p2, q);
 858:src/display.c **** 	}
 859:src/display.c **** 	if (State2.runmode) {
 860:src/display.c **** 	  decNumber y;
 861:src/display.c **** 	display_yreg:
 862:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 863:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 864:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 865:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 866:src/display.c **** 	   */
 867:src/display.c **** 	  if (is_intmode()) {
 868:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 869:src/display.c **** 	    goto skip;
 870:src/display.c **** 	  }
 871:src/display.c **** 		      
 872:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 873:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 874:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 875:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 876:src/display.c **** 	    if (yreg_hms && State2.hms) {
 877:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 878:src/display.c **** 
 879:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 880:src/display.c **** 	      UState.nothousands = 1;
 881:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 882:src/display.c **** 	      UState.nothousands = saved_nothousands;
 883:src/display.c **** 	      // First replace the '@' character with the degree symbol
 884:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 885:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
ARM GAS  /tmp/ccZdZ92R.s 			page 22


 886:src/display.c **** 	      // then remove the fractional part of the seconds.
 887:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 888:src/display.c **** 	      while (*p) {
 889:src/display.c **** 		replace_char(buf, p[0], p[1]);
 890:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 891:src/display.c **** 		  goto skip;
 892:src/display.c **** 		}
 893:src/display.c **** 		p += 2;
 894:src/display.c **** 	      }
 895:src/display.c **** 	      goto skip;
 896:src/display.c **** 	    }
 897:src/display.c **** 	    if (yreg_fract && UState.fract
 898:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 899:src/display.c **** 		&& !State2.cmplx
 900:src/display.c **** #endif
 901:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 902:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 903:src/display.c **** #endif
 904:src/display.c **** 		&& set_x_fract(&y, p)) {
 905:src/display.c **** 	      char ltgteq;
 906:src/display.c **** 
 907:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 908:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 909:src/display.c **** 	      ltgteq = *q;
 910:src/display.c **** 	      switch (ltgteq) {
 911:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 912:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 913:src/display.c **** 	      }
 914:src/display.c **** 	      scopy(q, "\007\344?");
 915:src/display.c **** 	      q[2] = ltgteq;
 916:src/display.c **** 
 917:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 918:src/display.c **** 		goto skip;
 919:src/display.c **** 	      }
 920:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 921:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 922:src/display.c **** 		goto skip;
 923:src/display.c **** 	      }
 924:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 925:src/display.c **** 	    }
 926:src/display.c **** 	  }
 927:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 928:src/display.c **** 	    int extra_pixels;
 929:src/display.c **** 
 930:src/display.c **** 	    set_x_dn(&y, p, &n);
 931:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 932:src/display.c **** 	    if (extra_pixels <= 0)
 933:src/display.c **** 	      break;
 934:src/display.c **** 
 935:src/display.c **** 	    xset(p, '\0', n+10);
 936:src/display.c **** 
 937:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 938:src/display.c **** 	  }
 939:src/display.c **** 	}
 940:src/display.c ****       }
 941:src/display.c ****       
 942:src/display.c ****     skip:
ARM GAS  /tmp/ccZdZ92R.s 			page 23


 943:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 944:src/display.c ****       set_status_top_always(buf2);
 945:src/display.c ****       
 946:src/display.c ****     }
 947:src/display.c **** #else
 948:src/display.c ****     static void annunciators(void) {
 949:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 950:src/display.c ****       char buf[42], *p = buf, *q="";
 951:src/display.c ****       int n;
 952:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 953:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 954:src/display.c ****       // Constant variables and code branches depending on a constant variable
 955:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 956:src/display.c ****       // feature run-time configurable if needed.
 957:src/display.c **** #ifdef INCLUDE_YREG_CODE
 958:src/display.c **** #  ifdef YREG_ALWAYS_ON
 959:src/display.c ****       const int yreg_enabled = 1;
 960:src/display.c **** #  else
 961:src/display.c ****       const int yreg_enabled = UState.show_y;
 962:src/display.c **** #  endif
 963:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 964:src/display.c ****       const int yreg_hms = 1;
 965:src/display.c **** #  else
 966:src/display.c ****       const int yreg_hms = 0;
 967:src/display.c **** #  endif
 968:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 969:src/display.c ****       const int yreg_fract = 1;
 970:src/display.c **** #  else
 971:src/display.c ****       const int yreg_fract = 0;
 972:src/display.c **** #  endif
 973:src/display.c **** #else
 974:src/display.c ****       const int yreg_enabled = 0;
 975:src/display.c ****       const int yreg_hms = 0;
 976:src/display.c ****       const int yreg_fract = 0;
 977:src/display.c **** #endif
 978:src/display.c **** #ifdef RP_PREFIX
 979:src/display.c ****       const int rp_prefix = 1;
 980:src/display.c **** #else
 981:src/display.c ****       const int rp_prefix = 0;
 982:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 983:src/display.c **** #endif
 984:src/display.c ****       // Indicates whether font escape code is compiled in.
 985:src/display.c ****       // This variable will always be set at compile time.
 986:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 987:src/display.c ****       const int has_FONT_ESCAPE = 1;
 988:src/display.c **** #else
 989:src/display.c ****       const int has_FONT_ESCAPE = 0;
 990:src/display.c **** #endif
 991:src/display.c **** 
 992:src/display.c ****       xset(buf, '\0', sizeof(buf));
 993:src/display.c ****       
 994:src/display.c ****       if (is_intmode()) {
 995:src/display.c **** #ifdef SHOW_STACK_SIZE
 996:src/display.c **** 	if (shift_char == ' ') {
 997:src/display.c **** 	  *p++ = '\007';
 998:src/display.c **** 	  *p++ = '\346';
 999:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
ARM GAS  /tmp/ccZdZ92R.s 			page 24


1000:src/display.c **** 	}
1001:src/display.c **** 	else
1002:src/display.c **** #endif
1003:src/display.c **** 	  {
1004:src/display.c **** 	    *p++ = shift_char;
1005:src/display.c **** 	    *p++ = '\006';
1006:src/display.c **** 	  }
1007:src/display.c **** 
1008:src/display.c **** 	switch(int_mode()) {
1009:src/display.c **** 	default:
1010:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1011:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1012:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1013:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1014:src/display.c **** 	}
1015:src/display.c **** 	q = scopy(p, q);
1016:src/display.c **** 	*q++ = '\006';
1017:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1018:src/display.c **** 
1019:src/display.c **** 	if (IntMaxWindow > 0) {
1020:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1021:src/display.c **** 	  if (*q == '1')
1022:src/display.c **** 	    n += 2;
1023:src/display.c **** 	  if (q[1] == '1')
1024:src/display.c **** 	    n += 2;
1025:src/display.c **** 	  while (n-- > 0)
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 
1028:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1029:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1030:src/display.c **** 	}
1031:src/display.c ****       }
1032:src/display.c ****       else if (!yreg_enabled
1033:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1034:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1035:src/display.c **** #endif
1036:src/display.c **** 	       ) {
1037:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1038:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1039:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
1042:src/display.c **** 	  *p++ = '\342';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	  *p++ = '\007';
1045:src/display.c **** 	  *p++ = '\344';
1046:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1047:src/display.c **** 	}
1048:src/display.c **** 	else
1049:src/display.c **** #endif
1050:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1051:src/display.c **** 	    *p++ = shift_char;
1052:src/display.c **** 	    *p++ = '\006';
1053:src/display.c **** 	  }
1054:src/display.c **** 	  else {
1055:src/display.c **** 	    *p++ = 'D';
1056:src/display.c **** 	  }
ARM GAS  /tmp/ccZdZ92R.s 			page 25


1057:src/display.c **** 
1058:src/display.c **** 	if (State2.cmplx) {
1059:src/display.c **** 	  *p++ = ' ';
1060:src/display.c **** 	  *p = '\024';
1061:src/display.c **** 	  goto skip;
1062:src/display.c **** 	}
1063:src/display.c **** 	if (State2.arrow) {
1064:src/display.c **** 	  *p++ = ' ';
1065:src/display.c **** 	  *p = '\015';
1066:src/display.c **** 	  goto skip;
1067:src/display.c **** 	}
1068:src/display.c **** 
1069:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1070:src/display.c **** 	  if (State2.wascomplex) {
1071:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1072:src/display.c **** 	  }
1073:src/display.c **** 	  else if (rp_prefix) {
1074:src/display.c **** 	    if (RectPolConv == 1) {
1075:src/display.c **** 	      q = "\007\306<";
1076:src/display.c **** 	    }
1077:src/display.c **** 	    else {
1078:src/display.c **** 	      q = "\007\306y";
1079:src/display.c **** 	    }
1080:src/display.c **** 	  }
1081:src/display.c **** 	  p = scopy(buf, q);
1082:src/display.c **** 
1083:src/display.c **** 	  goto display_yreg;
1084:src/display.c **** 	}
1085:src/display.c **** 
1086:src/display.c **** 	switch (UState.date_mode) {
1087:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1088:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1089:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1090:src/display.c **** #endif
1091:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1092:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1093:src/display.c **** #endif
1094:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1095:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1096:src/display.c **** #endif
1097:src/display.c **** #endif
1098:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1099:src/display.c **** 	}
1100:src/display.c **** 	p = scopy(p, q);
1101:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1102:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1103:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1104:src/display.c **** 	}
1105:src/display.c **** #else
1106:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1107:src/display.c **** 	*p++ = '\007';
1108:src/display.c **** 	*p++ = '\342';
1109:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1110:src/display.c **** #endif
1111:src/display.c ****       }
1112:src/display.c ****       else { // yreg_enabled
1113:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccZdZ92R.s 			page 26


1114:src/display.c **** 	if (State2.cmplx) {
1115:src/display.c **** 	  *p++ = '\007';
1116:src/display.c **** 	  *p++ = '\344';
1117:src/display.c **** 	  *p++ = shift_char;
1118:src/display.c **** 	  q = "\024";
1119:src/display.c **** 	}
1120:src/display.c **** 	else if (shift_char != ' ') {
1121:src/display.c **** 	  *p++ = '\007';
1122:src/display.c **** 	  *p++ = '\307';
1123:src/display.c **** 	  *p++ = shift_char;
1124:src/display.c **** 	  goto no_copy;
1125:src/display.c **** 	}
1126:src/display.c **** 	else
1127:src/display.c **** #endif
1128:src/display.c **** 	  if (State2.wascomplex) {
1129:src/display.c **** 	    q = "\007\207i";
1130:src/display.c **** 	  }
1131:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1132:src/display.c **** 	    q = "\007\307<";
1133:src/display.c **** 	  }
1134:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1135:src/display.c **** 	    q = "\007\307y";
1136:src/display.c **** 	  }
1137:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1138:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1139:src/display.c **** 	    q = "\007\207\007";
1140:src/display.c **** 	  }
1141:src/display.c **** #endif
1142:src/display.c **** 	  else {
1143:src/display.c **** #ifndef SHOW_STACK_SIZE
1144:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1145:src/display.c **** #else
1146:src/display.c **** 	    if (is_dblmode()) {
1147:src/display.c **** 	      *p++ = '\007';
1148:src/display.c **** 	      *p++ = '\342';
1149:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1150:src/display.c **** 	      q = "\007\345D";
1151:src/display.c **** 	    }
1152:src/display.c **** 	    else {
1153:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1154:src/display.c **** 	    }
1155:src/display.c **** #endif
1156:src/display.c **** 	  }
1157:src/display.c **** 	p = scopy(p, q);
1158:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1159:src/display.c ****       no_copy:
1160:src/display.c **** #endif
1161:src/display.c **** 
1162:src/display.c **** 	if (State2.arrow) {
1163:src/display.c **** 	  scopy(p, "\007\204\006\015");
1164:src/display.c **** 	} else if (State2.runmode) {
1165:src/display.c **** 	  decNumber y;
1166:src/display.c **** 	display_yreg:
1167:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1168:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1169:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1170:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
ARM GAS  /tmp/ccZdZ92R.s 			page 27


1171:src/display.c **** 	   */
1172:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1173:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1174:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1175:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1176:src/display.c **** 	    if (yreg_hms && State2.hms) {
1177:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1178:src/display.c **** 
1179:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1180:src/display.c **** 	      UState.nothousands = 1;
1181:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1182:src/display.c **** 	      UState.nothousands = saved_nothousands;
1183:src/display.c **** 	      // First replace the '@' character with the degree symbol
1184:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1185:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1186:src/display.c **** 	      // then remove the fractional part of the seconds.
1187:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1188:src/display.c **** 	      while (*p) {
1189:src/display.c **** 		replace_char(buf, p[0], p[1]);
1190:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1191:src/display.c **** 		  goto skip;
1192:src/display.c **** 		}
1193:src/display.c **** 		p += 2;
1194:src/display.c **** 	      }
1195:src/display.c **** 	      goto skip;
1196:src/display.c **** 	    }
1197:src/display.c **** 	    if (yreg_fract && UState.fract
1198:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1199:src/display.c **** 		&& !State2.cmplx
1200:src/display.c **** #endif
1201:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1202:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1203:src/display.c **** #endif
1204:src/display.c **** 		&& set_x_fract(&y, p)) {
1205:src/display.c **** 	      char ltgteq;
1206:src/display.c **** 
1207:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1208:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1209:src/display.c **** 	      ltgteq = *q;
1210:src/display.c **** 	      switch (ltgteq) {
1211:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1212:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1213:src/display.c **** 	      }
1214:src/display.c **** 	      scopy(q, "\007\344?");
1215:src/display.c **** 	      q[2] = ltgteq;
1216:src/display.c **** 
1217:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1218:src/display.c **** 		goto skip;
1219:src/display.c **** 	      }
1220:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1221:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1222:src/display.c **** 		goto skip;
1223:src/display.c **** 	      }
1224:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1225:src/display.c **** 	    }
1226:src/display.c **** 	  }
1227:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
ARM GAS  /tmp/ccZdZ92R.s 			page 28


1228:src/display.c **** 	    int extra_pixels;
1229:src/display.c **** 
1230:src/display.c **** 	    set_x_dn(&y, p, &n);
1231:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1232:src/display.c **** 	    if (extra_pixels <= 0)
1233:src/display.c **** 	      break;
1234:src/display.c **** 
1235:src/display.c **** 	    xset(p, '\0', n+10);
1236:src/display.c **** 
1237:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1238:src/display.c **** 	  }
1239:src/display.c **** 	}
1240:src/display.c ****       }
1241:src/display.c ****       
1242:src/display.c ****     skip:	set_status_top(buf);
1243:src/display.c ****     }
1244:src/display.c **** #endif //top_row
1245:src/display.c ****     static void disp_x(const char *p) {
1246:src/display.c ****       int i;
1247:src/display.c ****       int gotdot = -1;
1248:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1249:src/display.c ****       const
1250:src/display.c **** #endif
1251:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1252:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1253:src/display.c ****       int overflow_to_left = 0;
1254:src/display.c **** #endif
1255:src/display.c **** 
1256:src/display.c ****       if (*p == '-') {
1257:src/display.c **** 	SET_MANT_SIGN;
1258:src/display.c **** 	p++;
1259:src/display.c ****       }
1260:src/display.c **** 
1261:src/display.c ****       if (is_intmode()) {
1262:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1263:src/display.c **** 	  set_dig(i, *p);
1264:src/display.c **** 	  i += SEGS_PER_DIGIT;
1265:src/display.c **** 	}
1266:src/display.c **** 	carry_overflow();
1267:src/display.c ****       } else {
1268:src/display.c **** 	set_separator_decimal_modes();
1269:src/display.c **** 
1270:src/display.c **** 	i = 0;
1271:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1272:src/display.c **** 	if ( CmdLineDot > 1 ) {
1273:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1274:src/display.c **** 	  const
1275:src/display.c **** #  endif
1276:src/display.c **** 	    int double_dot = 0;
1277:src/display.c **** 	  int j;
1278:src/display.c **** 
1279:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1280:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1281:src/display.c **** 	      gotdot = j;
1282:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	      double_dot = (p[j+1] == '.');
1284:src/display.c **** #  endif
ARM GAS  /tmp/ccZdZ92R.s 			page 29


1285:src/display.c **** 	    }
1286:src/display.c **** 	  }
1287:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1288:src/display.c **** 	  if (j > 0) {
1289:src/display.c **** 	    p += j + 1;
1290:src/display.c **** 	    i = SEGS_PER_DIGIT;
1291:src/display.c **** 	    if (gotdot <= j) {
1292:src/display.c **** 	      gotdot = 0;
1293:src/display.c **** 	      if (double_dot)
1294:src/display.c **** 		p++;
1295:src/display.c **** 	    }
1296:src/display.c **** 	    else if (*p == '.') {
1297:src/display.c **** 	      gotdot = 0;
1298:src/display.c **** 	      p++;
1299:src/display.c **** 	      if (!double_dot)
1300:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1301:src/display.c **** 	    }
1302:src/display.c **** 	    else gotdot = -1;
1303:src/display.c **** 	    set_dig(0, '<');
1304:src/display.c **** 	    overflow_to_left = 1;
1305:src/display.c **** 	  }
1306:src/display.c **** 	  else gotdot = -1;
1307:src/display.c **** 	}
1308:src/display.c **** #endif
1309:src/display.c **** 
1310:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1311:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1312:src/display.c **** 	       && *p != 'D'
1313:src/display.c **** #endif
1314:src/display.c **** 	       ; p++) {
1315:src/display.c **** 	  if (*p == '.') {
1316:src/display.c **** 	    if (gotdot < 0)
1317:src/display.c **** 	      gotdot = i;
1318:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1319:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1320:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1321:src/display.c **** 	      if ( *(p+1) == '.' ) {
1322:src/display.c **** 		p++;
1323:src/display.c **** 	      }
1324:src/display.c **** #  else
1325:src/display.c **** 	      if ( i != gotdot ) {
1326:src/display.c **** #  endif
1327:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1328:src/display.c **** 		i += segs_per_digit;
1329:src/display.c **** 	      }
1330:src/display.c **** 	      else {
1331:src/display.c **** 		if ( CmdLineDot > 1 ) {
1332:src/display.c **** 		  i += segs_per_digit;
1333:src/display.c **** 		}
1334:src/display.c **** 		else {
1335:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1336:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1337:src/display.c **** 		}
1338:src/display.c **** 	      }
1339:src/display.c **** #else
1340:src/display.c **** 	      if (i > 0)
1341:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
ARM GAS  /tmp/ccZdZ92R.s 			page 30


1342:src/display.c **** 	      else {
1343:src/display.c **** 		set_dig(i, '0');
1344:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1345:src/display.c **** 		i += segs_per_digit;
1346:src/display.c **** 	      }
1347:src/display.c **** #endif
1348:src/display.c **** 	    } else {
1349:src/display.c **** 	      set_dig(i, *p);
1350:src/display.c **** 	      i += segs_per_digit;
1351:src/display.c **** 	    }
1352:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1353:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1354:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1355:src/display.c **** #endif
1356:src/display.c **** 	  }
1357:src/display.c **** 
1358:src/display.c **** 	  /* Implement a floating comma */
1359:src/display.c **** 	  if (gotdot < 0)
1360:src/display.c **** 	    gotdot = i;
1361:src/display.c **** 	  for (;;) {
1362:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1363:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1364:src/display.c **** 	      break;
1365:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1366:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1367:src/display.c **** 	      break;
1368:src/display.c **** #endif
1369:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1370:src/display.c **** 	  }
1371:src/display.c **** 
1372:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1373:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1374:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1375:src/display.c **** 	    int flags = 8;
1376:src/display.c **** #  else
1377:src/display.c **** 	    int flags = 12;
1378:src/display.c **** #  endif
1379:src/display.c **** 
1380:src/display.c **** 	    if (*p == 'D')
1381:src/display.c **** 	      flags |= 2;
1382:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1383:src/display.c **** 	      flags |= 16;
1384:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1385:src/display.c **** 	  }
1386:src/display.c **** #else
1387:src/display.c **** 	  if (*p == 'E') {
1388:src/display.c **** 	    p++;
1389:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1390:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1391:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1392:src/display.c **** #  else
1393:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1394:src/display.c **** #  endif
1395:src/display.c **** 	  } 
1396:src/display.c **** #endif
1397:src/display.c **** 	}
1398:src/display.c ****       }
ARM GAS  /tmp/ccZdZ92R.s 			page 31


1399:src/display.c **** 
1400:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1401:src/display.c **** 
1402:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1403:src/display.c **** 	const int ws = word_size();
1404:src/display.c **** 	unsigned int b;
1405:src/display.c **** 	long long int vs = value;
1406:src/display.c **** 	unsigned long long int v;
1407:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1408:src/display.c **** 	int i, j, k;
1409:src/display.c **** 	int sign = 0;
1410:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1411:src/display.c **** 
1412:src/display.c **** 	switch (State2.smode) {
1413:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1414:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1415:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1416:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1417:src/display.c **** 	default:	b = int_base();	break;
1418:src/display.c **** 	}
1419:src/display.c **** 
1420:src/display.c **** 	if (!res) {
1421:src/display.c **** 	  IntMaxWindow = 0;
1422:src/display.c **** 	  carry_overflow();
1423:src/display.c **** 	}
1424:src/display.c **** 
1425:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1426:src/display.c **** 	  v = extract_value(value, &sign);
1427:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1428:src/display.c **** 	    v = value;
1429:src/display.c **** 	  if (v == 0) {
1430:src/display.c **** 	    if (sign)
1431:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1432:src/display.c **** 	    set_dig_s(dig, '0', res);
1433:src/display.c **** 	    return;
1434:src/display.c **** 	  } else
1435:src/display.c **** 	    for (i=0; v != 0; i++) {
1436:src/display.c **** 	      const int r = v % b;
1437:src/display.c **** 	      v /= b;
1438:src/display.c **** 	      buf[i] = DIGITS[r];
1439:src/display.c **** 	    }
1440:src/display.c **** 	} else {
1441:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1442:src/display.c **** 	  if (ws < 64) {
1443:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1444:src/display.c **** 	    vs &= mask;
1445:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1446:src/display.c **** 	      vs |= ~mask;
1447:src/display.c **** 	  }
1448:src/display.c **** 
1449:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1450:src/display.c **** 	    set_dig_s(dig, '0', res);
1451:src/display.c **** 	    return;
1452:src/display.c **** 	  } else if (!UState.leadzero) {
1453:src/display.c **** 	    v = (unsigned long long int)vs;
1454:src/display.c **** 	    for (i=0; v != 0; i++) {
1455:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccZdZ92R.s 			page 32


1456:src/display.c **** 	      v /= b;
1457:src/display.c **** 	      buf[i] = DIGITS[r];
1458:src/display.c **** 	    }
1459:src/display.c **** 	  } else {
1460:src/display.c **** 	    int n;
1461:src/display.c **** 	    const unsigned int b1 = b >> 1;
1462:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1463:src/display.c **** 	    v = (unsigned long long int)vs;
1464:src/display.c **** 
1465:src/display.c **** 	    n = (ws + fac) / (fac+1);
1466:src/display.c **** 	    for (i=0; i<n; i++) {
1467:src/display.c **** 	      const int r = v % b;
1468:src/display.c **** 	      v /= b;
1469:src/display.c **** 	      buf[i] = DIGITS[r];
1470:src/display.c **** 	    }
1471:src/display.c **** 	  }
1472:src/display.c **** 	}
1473:src/display.c **** #ifdef BIGGER_DISPLAY
1474:src/display.c **** #define MAX_INT_Y_DIG 13
1475:src/display.c **** #else
1476:src/display.c **** #define MAX_INT_Y_DIG 7
1477:src/display.c **** #endif
1478:src/display.c **** 	/* At this point i is the number of digits in the output */
1479:src/display.c **** 	int nd = i;
1480:src/display.c **** 	if (res) {
1481:src/display.c **** 	  if (sign) *res++ = '-';
1482:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1483:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1484:src/display.c **** 	      *res++ = buf[i];
1485:src/display.c **** 	    *res++ = '.';
1486:src/display.c **** 	    *res++ = '.';
1487:src/display.c **** 	  }
1488:src/display.c **** 	  else {
1489:src/display.c **** 	    while (--i >= 0)
1490:src/display.c **** 	      *res++ = buf[i];
1491:src/display.c **** 	  }
1492:src/display.c **** 	} else {
1493:src/display.c **** #if 0
1494:src/display.c **** 	  set_separator_decimal_modes();
1495:src/display.c **** 
1496:src/display.c **** 	  // Allows configuration of digit grouping per base
1497:src/display.c **** 	  static const char grouping[] = 
1498:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1499:src/display.c **** 		    //	   2     3     4     5     6     7     8
1500:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1501:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1502:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1503:src/display.c **** 	    : grouping[b - 2] >> 4;
1504:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1505:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1506:src/display.c **** #else
1507:src/display.c **** 	  // Less flexible but shorter
1508:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1509:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1510:src/display.c **** 	    : b == 16 ? 2 : 3;
1511:src/display.c **** 	  set_separator_decimal_modes();
1512:src/display.c **** #endif
ARM GAS  /tmp/ccZdZ92R.s 			page 33


1513:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1514:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1515:src/display.c **** 	    State2.window = 0;
1516:src/display.c **** 	  buf[i] = '\0';
1517:src/display.c **** 
1518:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1519:src/display.c **** 	  for (k = 0; k < 12; k++)
1520:src/display.c **** 	    if (buf[j + k] == '\0')
1521:src/display.c **** 	      break;
1522:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1523:src/display.c **** 	    int ch = buf[j++];
1524:src/display.c **** 	    if (i >= shift)
1525:src/display.c **** 	      ch -= 030;
1526:src/display.c **** 	    set_dig(dig, ch);
1527:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1528:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1529:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1530:src/display.c **** 	  }
1531:src/display.c **** 	  if (sign) {
1532:src/display.c **** 	    if (dig >= 0)
1533:src/display.c **** 	      set_dig(dig, '-');
1534:src/display.c **** 	    else	SET_MANT_SIGN;
1535:src/display.c **** 	  }
1536:src/display.c **** 	}
1537:src/display.c ****       }
1538:src/display.c **** 
1539:src/display.c ****       /* Handle special cases.
1540:src/display.c ****        * return non-zero if the number is special.
1541:src/display.c ****        */
1542:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1543:src/display.c **** 	if (decNumberIsSpecial(x)) {
1544:src/display.c **** 	  if (decNumberIsNaN(x)) {
1545:src/display.c **** 	    if (res) {
1546:src/display.c **** 	      scopy(res, "NaN");
1547:src/display.c **** 	    } else {
1548:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1549:src/display.c **** #ifndef REALBUILD
1550:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1551:src/display.c **** 	      forceDispPlot=0;
1552:src/display.c **** #endif
1553:src/display.c **** 	    }
1554:src/display.c **** 	    return 1;
1555:src/display.c **** 	  } else {
1556:src/display.c **** 	    if (decNumberIsNegative(x)) {
1557:src/display.c **** 	      if (res) *res++ = '-';
1558:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1559:src/display.c **** 	    }
1560:src/display.c **** 	    if (res)
1561:src/display.c **** 	      *res++ = '\237';
1562:src/display.c **** 	    else {
1563:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1564:src/display.c **** #ifndef REALBUILD
1565:src/display.c **** 	      if (decNumberIsNegative(x)) {
1566:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1567:src/display.c **** 	      }
1568:src/display.c **** 	      else {
1569:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
ARM GAS  /tmp/ccZdZ92R.s 			page 34


1570:src/display.c **** 	      }
1571:src/display.c **** 	      forceDispPlot=0;
1572:src/display.c **** #endif
1573:src/display.c **** 	    }
1574:src/display.c **** 	    return 1;
1575:src/display.c **** 	  }
1576:src/display.c **** 	}
1577:src/display.c **** 	return 0;
1578:src/display.c ****       }
1579:src/display.c **** 
1580:src/display.c **** 
1581:src/display.c ****       /* Extract the two lowest integral digits from the number
1582:src/display.c ****        */
1583:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1584:src/display.c **** 	decNumber n;
1585:src/display.c **** 
1586:src/display.c **** 	decNumberMod(&n, x, &const_100);
1587:src/display.c **** 	*v = dn_to_int(&n);
1588:src/display.c **** 	dn_mulpow10(&n, x, -2);
1589:src/display.c **** 	decNumberTrunc(res, &n);
1590:src/display.c ****       }
1591:src/display.c **** 
1592:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1592 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1593:src/display.c **** 	char b[32];
 276              		.loc 1 1593 2 view .LVU78
1594:src/display.c **** 	int i, j;
 277              		.loc 1 1594 2 view .LVU79
1595:src/display.c **** 
1596:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1596 2 view .LVU80
 279              		.loc 1 1596 12 view .LVU81
1592:src/display.c **** 	char b[32];
 280              		.loc 1 1592 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1597:src/display.c **** 	  if (v == 0)
1598:src/display.c **** 	    b[i] = spaces?' ':'0';
1599:src/display.c **** 	  else {
1600:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1600 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1592:src/display.c **** 	char b[32];
 292              		.loc 1 1592 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1592:src/display.c **** 	char b[32];
ARM GAS  /tmp/ccZdZ92R.s 			page 35


 295              		.loc 1 1592 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1596:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1596 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1597:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1597 4 is_stmt 1 view .LVU87
 303              		.loc 1 1600 6 view .LVU88
 304              		.loc 1 1600 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1601:src/display.c **** 	    v /= 10;
 311              		.loc 1 1601 6 is_stmt 1 view .LVU90
1602:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1602 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1596:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1596 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1597 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1596:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1596 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1602 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1601:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1601 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1602 6 is_stmt 1 view .LVU97
1596:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1596 17 view .LVU98
1596:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1596 12 view .LVU99
1596:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1596 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1596:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1596 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
ARM GAS  /tmp/ccZdZ92R.s 			page 36


 340              	.LVL18:
1596:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1596 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1597 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1598:src/display.c **** 	  else {
 349              		.loc 1 1598 6 is_stmt 1 view .LVU104
1596:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1596 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1596:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1596 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1598:src/display.c **** 	  else {
 355              		.loc 1 1598 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1596:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1596 17 is_stmt 1 view .LVU108
1596:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1596 12 view .LVU109
1596:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1596 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1596:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1596 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1603:src/display.c **** 	  }
1604:src/display.c **** 	}
1605:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1605 2 is_stmt 1 view .LVU112
 371              		.loc 1 1605 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1606:src/display.c **** 	  b[0] = '0';
1607:src/display.c **** 
1608:src/display.c **** 	/* Copy across and appropriately leading space things
1609:src/display.c **** 	 */
1610:src/display.c **** 	j = *jin;
 374              		.loc 1 1610 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1605:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1605 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
ARM GAS  /tmp/ccZdZ92R.s 			page 37


1606:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1606 4 is_stmt 1 view .LVU116
1606:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1606 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1610 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1611:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1611 2 view .LVU119
 386              		.loc 1 1611 8 view .LVU120
1610:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1610 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1611 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1612:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1612 4 is_stmt 1 view .LVU123
 395              	.LBB147:
 396              	.LBB148:
 408:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 408 12 view .LVU124
 398              	.LBE148:
 399              	.LBE147:
 400              		.loc 1 1612 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB152:
 403              	.LBB149:
 408:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 408 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 408:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 408 16 view .LVU127
 408              	.LBE149:
 409              	.LBI147:
 407:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 407 14 is_stmt 1 view .LVU128
 411              	.LBB150:
 408:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 408 3 view .LVU129
 408:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 408 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 408:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 408 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 408:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 408 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
ARM GAS  /tmp/ccZdZ92R.s 			page 38


 422              	.L37:
 410:src/display.c **** }
 423              		.loc 1 410 3 is_stmt 1 view .LVU133
 410:src/display.c **** }
 424              		.loc 1 410 3 is_stmt 0 view .LVU134
 425              	.LBE150:
 426              	.LBE152:
1613:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1613 4 is_stmt 1 view .LVU135
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1611 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1613 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1611 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1614:src/display.c **** 	}
1615:src/display.c **** 	*jin = j;
 436              		.loc 1 1615 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1615 2 is_stmt 1 view .LVU140
 440              		.loc 1 1615 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1616:src/display.c **** 	return str;
1617:src/display.c ****       }
 443              		.loc 1 1617 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1615:src/display.c **** 	return str;
 445              		.loc 1 1615 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1616:src/display.c **** 	return str;
 447              		.loc 1 1616 2 is_stmt 1 view .LVU144
 448              		.loc 1 1617 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB153:
 458              	.LBB151:
 409:src/display.c ****   return res;
 459              		.loc 1 409 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 409:src/display.c ****   return res;
 463              		.loc 1 409 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
ARM GAS  /tmp/ccZdZ92R.s 			page 39


 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE151:
 470              	.LBE153:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 425:src/display.c ****   int i;
 485              		.loc 1 425 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 426:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 426 3 view .LVU149
 427:src/display.c **** 
 490              		.loc 1 427 3 view .LVU150
 425:src/display.c ****   int i;
 491              		.loc 1 425 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 427:src/display.c **** 
 500              		.loc 1 427 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 429 3 is_stmt 1 view .LVU153
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 429 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB154:
 513              	.LBB155:
 409:src/display.c ****   return res;
 514              		.loc 1 409 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
ARM GAS  /tmp/ccZdZ92R.s 			page 40


 517              	.LVL39:
 518              	.L57:
 408:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 408 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 408:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 408 19 view .LVU157
 523              	.LBE155:
 524              	.LBE154:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 429 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB161:
 528              	.LBB156:
 408:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 408 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 410:src/display.c **** }
 532              		.loc 1 410 3 is_stmt 1 view .LVU160
 410:src/display.c **** }
 533              		.loc 1 410 3 is_stmt 0 view .LVU161
 534              	.LBE156:
 535              	.LBE161:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 429 36 is_stmt 1 view .LVU162
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 429 13 view .LVU163
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 429 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 430:src/display.c **** }
 542              		.loc 1 430 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB162:
 544              	.LBB157:
 408:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 408 12 discriminator 3 view .LVU166
 408:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 408 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE157:
 548              	.LBE162:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 429 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB163:
 553              	.LBB158:
 408:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 408 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 408:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 408 16 discriminator 3 view .LVU170
 558              	.LBE158:
ARM GAS  /tmp/ccZdZ92R.s 			page 41


 559              	.LBI154:
 407:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 407 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB159:
 408:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 408 3 discriminator 3 view .LVU172
 563              	.LBE159:
 564              	.LBE163:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 429 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB164:
 569              	.LBB160:
 408:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 408 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 409:src/display.c ****   return res;
 573              		.loc 1 409 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 410:src/display.c **** }
 578              		.loc 1 410 3 view .LVU176
 410:src/display.c **** }
 579              		.loc 1 410 3 is_stmt 0 view .LVU177
 580              	.LBE160:
 581              	.LBE164:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 429 36 is_stmt 1 view .LVU178
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 429 13 view .LVU179
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 429 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 431:src/display.c **** 
 589              		.loc 1 431 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 431:src/display.c **** 
 591              		.loc 1 431 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
ARM GAS  /tmp/ccZdZ92R.s 			page 42


1583:src/display.c **** 	decNumber n;
 606              		.loc 1 1583 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1584:src/display.c **** 
 610              		.loc 1 1584 2 view .LVU184
1586:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1586 2 view .LVU185
1583:src/display.c **** 	decNumber n;
 612              		.loc 1 1583 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1583:src/display.c **** 	decNumber n;
 621              		.loc 1 1583 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1586:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1586 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1586:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1586 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1583:src/display.c **** 	decNumber n;
 630              		.loc 1 1583 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1586:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1586 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1587 2 is_stmt 1 view .LVU192
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1587 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1588:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1588 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1587 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1588:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1588 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
ARM GAS  /tmp/ccZdZ92R.s 			page 43


1589:src/display.c ****       }
 649              		.loc 1 1589 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1590:src/display.c **** 
 654              		.loc 1 1590 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1590:src/display.c **** 
 661              		.loc 1 1590 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 669              		.align	2
 670              	.LC0:
 671 0000 48494700 		.ascii	"HIG\000"
 672              		.section	.text.set_exp,"ax",%progbits
 673              		.align	1
 674              		.p2align 2,,3
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	set_exp:
 681              	.LVL56:
 682              	.LFB14:
 442:src/display.c ****   union {
 683              		.loc 1 442 52 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 8
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/display.c ****     char buf[4];
 687              		.loc 1 443 3 view .LVU201
 447:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 688              		.loc 1 447 3 view .LVU202
 461:src/display.c **** #endif
 689              		.loc 1 461 3 view .LVU203
 464:src/display.c ****   if (exp < 0) {
 690              		.loc 1 464 3 view .LVU204
 442:src/display.c ****   union {
 691              		.loc 1 442 52 is_stmt 0 view .LVU205
 692 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 693              		.cfi_def_cfa_offset 20
 694              		.cfi_offset 4, -20
 695              		.cfi_offset 5, -16
 696              		.cfi_offset 6, -12
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZdZ92R.s 			page 44


 465:src/display.c ****     negative = 1;
 699              		.loc 1 465 6 view .LVU206
 700 0002 051E     		subs	r5, r0, #0
 442:src/display.c ****   union {
 701              		.loc 1 442 52 view .LVU207
 702 0004 83B0     		sub	sp, sp, #12
 703              		.cfi_def_cfa_offset 32
 442:src/display.c ****   union {
 704              		.loc 1 442 52 view .LVU208
 705 0006 0F46     		mov	r7, r1
 706              	.LVL57:
 465:src/display.c ****     negative = 1;
 707              		.loc 1 465 3 is_stmt 1 view .LVU209
 442:src/display.c ****   union {
 708              		.loc 1 442 52 is_stmt 0 view .LVU210
 709 0008 1446     		mov	r4, r2
 465:src/display.c ****     negative = 1;
 710              		.loc 1 465 6 view .LVU211
 711 000a 0ADB     		blt	.L86
 464:src/display.c ****   if (exp < 0) {
 712              		.loc 1 464 12 view .LVU212
 713 000c 01F00203 		and	r3, r1, #2
 714              	.LVL58:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 715              		.loc 1 472 3 is_stmt 1 view .LVU213
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 716              		.loc 1 472 6 is_stmt 0 view .LVU214
 717 0010 A2B3     		cbz	r2, .L67
 477:src/display.c **** #endif
 718              		.loc 1 477 7 is_stmt 1 view .LVU215
 477:src/display.c **** #endif
 719              		.loc 1 477 10 is_stmt 0 view .LVU216
 720 0012 B5F57A7F 		cmp	r5, #1000
 721 0016 2ADB     		blt	.L68
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 722              		.loc 1 479 2 is_stmt 1 view .LVU217
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 723              		.loc 1 479 5 is_stmt 0 view .LVU218
 724 0018 73BB     		cbnz	r3, .L73
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 725              		.loc 1 479 17 is_stmt 1 discriminator 1 view .LVU219
 726              	.LVL59:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 727              		.loc 1 479 24 is_stmt 0 discriminator 1 view .LVU220
 728 001a 3A23     		movs	r3, #58
 729              	.LVL60:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 730              		.loc 1 479 24 discriminator 1 view .LVU221
 731 001c 04F8013B 		strb	r3, [r4], #1
 732              	.LVL61:
 486:src/display.c ****     }
 733              		.loc 1 486 7 is_stmt 1 discriminator 1 view .LVU222
 734 0020 08E0     		b	.L69
 735              	.LVL62:
 736              	.L86:
 466:src/display.c ****     exp = -exp;
 737              		.loc 1 466 5 view .LVU223
ARM GAS  /tmp/ccZdZ92R.s 			page 45


 467:src/display.c ****   }
 738              		.loc 1 467 5 view .LVU224
 467:src/display.c ****   }
 739              		.loc 1 467 9 is_stmt 0 view .LVU225
 740 0022 6E42     		rsbs	r6, r5, #0
 741              	.LVL63:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 742              		.loc 1 472 3 is_stmt 1 view .LVU226
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 743              		.loc 1 472 6 is_stmt 0 view .LVU227
 744 0024 AAB3     		cbz	r2, .L64
 477:src/display.c **** #endif
 745              		.loc 1 477 7 is_stmt 1 view .LVU228
 477:src/display.c **** #endif
 746              		.loc 1 477 10 is_stmt 0 view .LVU229
 747 0026 15F57A7F 		cmn	r5, #1000
 748 002a 2DDC     		bgt	.L87
 749              	.LVL64:
 750              	.L65:
 486:src/display.c ****     }
 751              		.loc 1 486 21 is_stmt 1 discriminator 1 view .LVU230
 486:src/display.c ****     }
 752              		.loc 1 486 28 is_stmt 0 discriminator 1 view .LVU231
 753 002c 2D23     		movs	r3, #45
 754 002e 04F8013B 		strb	r3, [r4], #1
 755              	.LVL65:
 486:src/display.c ****     }
 756              		.loc 1 486 28 discriminator 1 view .LVU232
 757 0032 3546     		mov	r5, r6
 758              	.LVL66:
 759              	.L69:
 534:src/display.c **** #endif
 760              		.loc 1 534 7 is_stmt 1 view .LVU233
 761 0034 01AE     		add	r6, sp, #4
 762 0036 0021     		movs	r1, #0
 763 0038 3046     		mov	r0, r6
 764 003a 0422     		movs	r2, #4
 765 003c FFF7FEFF 		bl	xset
 766              	.LVL67:
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 767              		.loc 1 536 7 view .LVU234
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 768              		.loc 1 536 10 is_stmt 0 view .LVU235
 769 0040 17F0050F 		tst	r7, #5
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 770              		.loc 1 537 2 view .LVU236
 771 0044 2946     		mov	r1, r5
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 772              		.loc 1 536 10 view .LVU237
 773 0046 09D0     		beq	.L72
 774              	.LVL68:
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 775              		.loc 1 537 2 is_stmt 1 view .LVU238
 776 0048 0322     		movs	r2, #3
 777 004a 3046     		mov	r0, r6
 778 004c FFF7FEFF 		bl	num_arg_0
 779              	.LVL69:
ARM GAS  /tmp/ccZdZ92R.s 			page 46


 780              	.L71:
 559:src/display.c ****     }
 781              		.loc 1 559 7 view .LVU239
 782 0050 2146     		mov	r1, r4
 783 0052 3046     		mov	r0, r6
 784 0054 FFF7FEFF 		bl	set_exp_digits_string
 785              	.LVL70:
 560:src/display.c **** 
 786              		.loc 1 560 5 is_stmt 0 view .LVU240
 787 0058 03B0     		add	sp, sp, #12
 788              		.cfi_remember_state
 789              		.cfi_def_cfa_offset 20
 790              		@ sp needed
 791 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 792              	.LVL71:
 793              	.L72:
 794              		.cfi_restore_state
 557:src/display.c ****     no_number:
 795              		.loc 1 557 2 is_stmt 1 view .LVU241
 796 005c 3046     		mov	r0, r6
 797 005e FFF7FEFF 		bl	num_arg
 798              	.LVL72:
 559:src/display.c ****     }
 799              		.loc 1 559 7 view .LVU242
 800 0062 2146     		mov	r1, r4
 801 0064 3046     		mov	r0, r6
 802 0066 FFF7FEFF 		bl	set_exp_digits_string
 803              	.LVL73:
 560:src/display.c **** 
 804              		.loc 1 560 5 is_stmt 0 view .LVU243
 805 006a 03B0     		add	sp, sp, #12
 806              		.cfi_remember_state
 807              		.cfi_def_cfa_offset 20
 808              		@ sp needed
 809 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 810              	.LVL74:
 811              	.L68:
 812              		.cfi_restore_state
 482:src/display.c **** #else
 813              		.loc 1 482 12 is_stmt 1 view .LVU244
 482:src/display.c **** #else
 814              		.loc 1 482 19 is_stmt 0 view .LVU245
 815 006e 6522     		movs	r2, #101
 816              	.LVL75:
 482:src/display.c **** #else
 817              		.loc 1 482 19 view .LVU246
 818 0070 04F8012B 		strb	r2, [r4], #1
 819              	.LVL76:
 486:src/display.c ****     }
 820              		.loc 1 486 7 is_stmt 1 view .LVU247
 486:src/display.c ****     }
 821              		.loc 1 486 10 is_stmt 0 view .LVU248
 822 0074 002B     		cmp	r3, #0
 823 0076 DDD0     		beq	.L69
 824              	.L73:
 486:src/display.c ****     }
 825              		.loc 1 486 10 view .LVU249
ARM GAS  /tmp/ccZdZ92R.s 			page 47


 826 0078 2E46     		mov	r6, r5
 827 007a D7E7     		b	.L65
 828              	.LVL77:
 829              	.L67:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 830              		.loc 1 489 7 is_stmt 1 view .LVU250
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 831              		.loc 1 489 10 is_stmt 0 view .LVU251
 832 007c 43B9     		cbnz	r3, .L88
 833              	.LVL78:
 834              	.L70:
 493:src/display.c **** #endif
 835              		.loc 1 493 2 is_stmt 1 view .LVU252
 493:src/display.c **** #endif
 836              		.loc 1 493 5 is_stmt 0 view .LVU253
 837 007e B5F57A7F 		cmp	r5, #1000
 838 0082 0EDA     		bge	.L89
 493:src/display.c **** #endif
 839              		.loc 1 493 5 view .LVU254
 840 0084 0024     		movs	r4, #0
 841              	.LVL79:
 493:src/display.c **** #endif
 842              		.loc 1 493 5 view .LVU255
 843 0086 D5E7     		b	.L69
 844              	.LVL80:
 845              	.L87:
 482:src/display.c **** #else
 846              		.loc 1 482 12 is_stmt 1 view .LVU256
 482:src/display.c **** #else
 847              		.loc 1 482 19 is_stmt 0 view .LVU257
 848 0088 6523     		movs	r3, #101
 849 008a 04F8013B 		strb	r3, [r4], #1
 850              	.LVL81:
 486:src/display.c ****     }
 851              		.loc 1 486 7 is_stmt 1 view .LVU258
 852 008e CDE7     		b	.L65
 853              	.LVL82:
 854              	.L88:
 486:src/display.c ****     }
 855              		.loc 1 486 7 is_stmt 0 view .LVU259
 856 0090 2E46     		mov	r6, r5
 857              	.LVL83:
 858              	.L64:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 859              		.loc 1 489 21 is_stmt 1 view .LVU260
 860              	.LBB165:
 861              	.LBI165:
 308:src/display.c **** {
 862              		.loc 1 308 13 view .LVU261
 863              	.LBB166:
 310:src/display.c ****   set_dot(EXP_SIGN);
 864              		.loc 1 310 3 view .LVU262
 310:src/display.c ****   set_dot(EXP_SIGN);
 865              		.loc 1 310 27 is_stmt 0 view .LVU263
 866 0092 074B     		ldr	r3, .L90
 867 0094 2D22     		movs	r2, #45
 868              	.LVL84:
ARM GAS  /tmp/ccZdZ92R.s 			page 48


 311:src/display.c **** }
 869              		.loc 1 311 3 view .LVU264
 870 0096 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 871              		.loc 1 310 27 view .LVU265
 872 0098 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 873              		.loc 1 311 3 is_stmt 1 view .LVU266
 312:src/display.c **** 
 874              		.loc 1 312 1 is_stmt 0 view .LVU267
 875 009a 3546     		mov	r5, r6
 311:src/display.c **** }
 876              		.loc 1 311 3 view .LVU268
 877 009c FFF7FEFF 		bl	set_dot
 878              	.LVL85:
 312:src/display.c **** 
 879              		.loc 1 312 1 view .LVU269
 880 00a0 EDE7     		b	.L70
 881              	.LVL86:
 882              	.L89:
 312:src/display.c **** 
 883              		.loc 1 312 1 view .LVU270
 884              	.LBE166:
 885              	.LBE165:
 495:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 886              		.loc 1 495 4 is_stmt 1 view .LVU271
 503:src/display.c **** #endif
 887              		.loc 1 503 6 view .LVU272
 888 00a2 01AE     		add	r6, sp, #4
 889 00a4 0349     		ldr	r1, .L90+4
 890 00a6 3046     		mov	r0, r6
 891 00a8 FFF7FEFF 		bl	scopy
 892              	.LVL87:
 505:src/display.c **** 	  }
 893              		.loc 1 505 6 view .LVU273
 894 00ac 0024     		movs	r4, #0
 895              	.LVL88:
 505:src/display.c **** 	  }
 896              		.loc 1 505 6 is_stmt 0 view .LVU274
 897 00ae CFE7     		b	.L71
 898              	.L91:
 899              		.align	2
 900              	.L90:
 901 00b0 00000000 		.word	LastDisplayedExponent
 902 00b4 00000000 		.word	.LC0
 903              		.cfi_endproc
 904              	.LFE14:
 906              		.section	.text.set_separator.part.0,"ax",%progbits
 907              		.align	1
 908              		.p2align 2,,3
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu fpv4-sp-d16
 914              	set_separator.part.0:
 915              	.LVL89:
 916              	.LFB47:
ARM GAS  /tmp/ccZdZ92R.s 			page 49


 367:src/display.c ****   if (sep == SEP_NONE)
 917              		.loc 1 367 14 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 374:src/display.c ****     set_dot(posn+7);
 921              		.loc 1 374 5 view .LVU276
 367:src/display.c ****   if (sep == SEP_NONE)
 922              		.loc 1 367 14 is_stmt 0 view .LVU277
 923 0000 70B5     		push	{r4, r5, r6, lr}
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 4, -16
 926              		.cfi_offset 5, -12
 927              		.cfi_offset 6, -8
 928              		.cfi_offset 14, -4
 367:src/display.c ****   if (sep == SEP_NONE)
 929              		.loc 1 367 14 view .LVU278
 930 0002 0546     		mov	r5, r0
 931 0004 0E46     		mov	r6, r1
 375:src/display.c ****     if (sep == SEP_COMMA)
 932              		.loc 1 375 5 view .LVU279
 933 0006 0238     		subs	r0, r0, #2
 934              	.LVL90:
 375:src/display.c ****     if (sep == SEP_COMMA)
 935              		.loc 1 375 5 view .LVU280
 936 0008 FFF7FEFF 		bl	set_dot
 937              	.LVL91:
 376:src/display.c ****       set_dot(posn+8);
 938              		.loc 1 376 8 view .LVU281
 939 000c 012E     		cmp	r6, #1
 374:src/display.c ****     set_dot(posn+7);
 940              		.loc 1 374 10 view .LVU282
 941 000e A5F10904 		sub	r4, r5, #9
 942              	.LVL92:
 375:src/display.c ****     if (sep == SEP_COMMA)
 943              		.loc 1 375 5 is_stmt 1 view .LVU283
 376:src/display.c ****       set_dot(posn+8);
 944              		.loc 1 376 5 view .LVU284
 376:src/display.c ****       set_dot(posn+8);
 945              		.loc 1 376 8 is_stmt 0 view .LVU285
 946 0012 0CD0     		beq	.L96
 379:src/display.c **** #endif
 947              		.loc 1 379 39 view .LVU286
 948 0014 2E21     		movs	r1, #46
 949              	.L93:
 379:src/display.c **** #endif
 950              		.loc 1 379 30 view .LVU287
 951 0016 084B     		ldr	r3, .L97
 379:src/display.c **** #endif
 952              		.loc 1 379 39 view .LVU288
 953 0018 084A     		ldr	r2, .L97+4
 379:src/display.c **** #endif
 954              		.loc 1 379 30 view .LVU289
 955 001a 83FB0403 		smull	r0, r3, r3, r4
 956 001e E417     		asrs	r4, r4, #31
 957              	.LVL93:
 379:src/display.c **** #endif
ARM GAS  /tmp/ccZdZ92R.s 			page 50


 958              		.loc 1 379 30 view .LVU290
 959 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 379:src/display.c **** #endif
 960              		.loc 1 379 35 view .LVU291
 961 0024 0134     		adds	r4, r4, #1
 383:src/display.c **** 
 962              		.loc 1 383 1 view .LVU292
 963 0026 0020     		movs	r0, #0
 379:src/display.c **** #endif
 964              		.loc 1 379 39 view .LVU293
 965 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 966              	.LVL94:
 383:src/display.c **** 
 967              		.loc 1 383 1 view .LVU294
 968 002c 70BD     		pop	{r4, r5, r6, pc}
 969              	.LVL95:
 970              	.L96:
 377:src/display.c **** #ifndef REALBUILD
 971              		.loc 1 377 7 is_stmt 1 view .LVU295
 972 002e 681E     		subs	r0, r5, #1
 973 0030 FFF7FEFF 		bl	set_dot
 974              	.LVL96:
 379:src/display.c **** #endif
 975              		.loc 1 379 5 view .LVU296
 379:src/display.c **** #endif
 976              		.loc 1 379 39 is_stmt 0 view .LVU297
 977 0034 2C21     		movs	r1, #44
 978 0036 EEE7     		b	.L93
 979              	.L98:
 980              		.align	2
 981              	.L97:
 982 0038 398EE338 		.word	954437177
 983 003c 00000000 		.word	LastDisplayedNumber
 984              		.cfi_endproc
 985              	.LFE47:
 987              		.section	.text.set_decimal,"ax",%progbits
 988              		.align	1
 989              		.p2align 2,,3
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 993              		.fpu fpv4-sp-d16
 995              	set_decimal:
 996              	.LVL97:
 997              	.LFB8:
 349:src/display.c ****   if (res) {
 998              		.loc 1 349 87 is_stmt 1 view -0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1002              		.loc 1 350 3 view .LVU299
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1003              		.loc 1 350 6 is_stmt 0 view .LVU300
 1004 0000 3AB1     		cbz	r2, .L100
 351:src/display.c ****   } else {
 1005              		.loc 1 351 5 is_stmt 1 view .LVU301
ARM GAS  /tmp/ccZdZ92R.s 			page 51


 351:src/display.c ****   } else {
 1006              		.loc 1 351 12 is_stmt 0 view .LVU302
 1007 0002 0029     		cmp	r1, #0
 351:src/display.c ****   } else {
 1008              		.loc 1 351 9 view .LVU303
 1009 0004 1046     		mov	r0, r2
 1010              	.LVL98:
 351:src/display.c ****   } else {
 1011              		.loc 1 351 12 view .LVU304
 1012 0006 0CBF     		ite	eq
 1013 0008 2E23     		moveq	r3, #46
 1014 000a 2C23     		movne	r3, #44
 1015 000c 00F8013B 		strb	r3, [r0], #1
 1016              	.LVL99:
 361:src/display.c **** 
 1017              		.loc 1 361 1 view .LVU305
 1018 0010 7047     		bx	lr
 1019              	.LVL100:
 1020              	.L100:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1021              		.loc 1 353 5 is_stmt 1 view .LVU306
 349:src/display.c ****   if (res) {
 1022              		.loc 1 349 87 is_stmt 0 view .LVU307
 1023 0012 10B5     		push	{r4, lr}
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 4, -8
 1026              		.cfi_offset 14, -4
 1027 0014 82B0     		sub	sp, sp, #8
 1028              		.cfi_def_cfa_offset 16
 1029 0016 0446     		mov	r4, r0
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1030              		.loc 1 353 5 view .LVU308
 1031 0018 0730     		adds	r0, r0, #7
 1032              	.LVL101:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1033              		.loc 1 353 5 view .LVU309
 1034 001a 0191     		str	r1, [sp, #4]
 1035 001c FFF7FEFF 		bl	set_dot
 1036              	.LVL102:
 354:src/display.c ****       set_dot(posn+8);
 1037              		.loc 1 354 5 is_stmt 1 view .LVU310
 354:src/display.c ****       set_dot(posn+8);
 1038              		.loc 1 354 8 is_stmt 0 view .LVU311
 1039 0020 0199     		ldr	r1, [sp, #4]
 1040 0022 69B9     		cbnz	r1, .L109
 1041              	.LBB169:
 1042              	.LBB170:
 357:src/display.c **** #endif
 1043              		.loc 1 357 38 view .LVU312
 1044 0024 2E22     		movs	r2, #46
 1045              	.L103:
 357:src/display.c **** #endif
 1046              		.loc 1 357 30 view .LVU313
 1047 0026 0948     		ldr	r0, .L110
 357:src/display.c **** #endif
 1048              		.loc 1 357 38 view .LVU314
 1049 0028 094B     		ldr	r3, .L110+4
ARM GAS  /tmp/ccZdZ92R.s 			page 52


 357:src/display.c **** #endif
 1050              		.loc 1 357 30 view .LVU315
 1051 002a 80FB0410 		smull	r1, r0, r0, r4
 1052 002e E417     		asrs	r4, r4, #31
 1053              	.LVL103:
 357:src/display.c **** #endif
 1054              		.loc 1 357 30 view .LVU316
 1055 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 357:src/display.c **** #endif
 1056              		.loc 1 357 35 view .LVU317
 1057 0034 0134     		adds	r4, r4, #1
 357:src/display.c **** #endif
 1058              		.loc 1 357 38 view .LVU318
 1059 0036 0020     		movs	r0, #0
 1060 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1061              	.LVL104:
 360:src/display.c **** }
 1062              		.loc 1 360 3 is_stmt 1 view .LVU319
 360:src/display.c **** }
 1063              		.loc 1 360 3 is_stmt 0 view .LVU320
 1064              	.LBE170:
 1065              	.LBE169:
 360:src/display.c **** }
 1066              		.loc 1 360 3 is_stmt 1 view .LVU321
 361:src/display.c **** 
 1067              		.loc 1 361 1 is_stmt 0 view .LVU322
 1068 003c 02B0     		add	sp, sp, #8
 1069              		.cfi_remember_state
 1070              		.cfi_def_cfa_offset 8
 1071              		@ sp needed
 1072 003e 10BD     		pop	{r4, pc}
 1073              	.LVL105:
 1074              	.L109:
 1075              		.cfi_restore_state
 355:src/display.c **** #ifndef REALBUILD
 1076              		.loc 1 355 7 is_stmt 1 view .LVU323
 1077 0040 04F10800 		add	r0, r4, #8
 1078 0044 FFF7FEFF 		bl	set_dot
 1079              	.LVL106:
 1080              	.LBB172:
 1081              	.LBI169:
 349:src/display.c ****   if (res) {
 1082              		.loc 1 349 14 view .LVU324
 1083              	.LBB171:
 357:src/display.c **** #endif
 1084              		.loc 1 357 5 view .LVU325
 357:src/display.c **** #endif
 1085              		.loc 1 357 38 is_stmt 0 view .LVU326
 1086 0048 2C22     		movs	r2, #44
 1087 004a ECE7     		b	.L103
 1088              	.L111:
 1089              		.align	2
 1090              	.L110:
 1091 004c 398EE338 		.word	954437177
 1092 0050 00000000 		.word	LastDisplayedNumber
 1093              	.LBE171:
 1094              	.LBE172:
ARM GAS  /tmp/ccZdZ92R.s 			page 53


 1095              		.cfi_endproc
 1096              	.LFE8:
 1098              		.section	.text.set_digits_string,"ax",%progbits
 1099              		.align	1
 1100              		.p2align 2,,3
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1104              		.fpu fpv4-sp-d16
 1106              	set_digits_string:
 1107              	.LVL107:
 1108              	.LFB12:
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1109              		.loc 1 414 55 is_stmt 1 view -0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1113              		.loc 1 415 3 view .LVU328
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1114              		.loc 1 414 55 is_stmt 0 view .LVU329
 1115 0000 38B5     		push	{r3, r4, r5, lr}
 1116              		.cfi_def_cfa_offset 16
 1117              		.cfi_offset 3, -16
 1118              		.cfi_offset 4, -12
 1119              		.cfi_offset 5, -8
 1120              		.cfi_offset 14, -4
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1121              		.loc 1 415 10 view .LVU330
 1122 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1123              		.loc 1 415 10 is_stmt 1 view .LVU331
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1124              		.loc 1 415 3 is_stmt 0 view .LVU332
 1125 0004 E3B1     		cbz	r3, .L112
 1126 0006 0546     		mov	r5, r0
 1127 0008 0C46     		mov	r4, r1
 1128 000a 06E0     		b	.L116
 1129              	.LVL108:
 1130              	.L114:
 1131              	.LBB173:
 1132              	.LBB174:
 409:src/display.c ****   return res;
 1133              		.loc 1 409 8 view .LVU333
 1134 000c 2046     		mov	r0, r4
 1135 000e FFF7FEFF 		bl	set_dig
 1136              	.LVL109:
 410:src/display.c **** }
 1137              		.loc 1 410 3 is_stmt 1 view .LVU334
 410:src/display.c **** }
 1138              		.loc 1 410 3 is_stmt 0 view .LVU335
 1139              	.LBE174:
 1140              	.LBE173:
 420:src/display.c ****     }
 1141              		.loc 1 420 7 is_stmt 1 view .LVU336
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1142              		.loc 1 415 10 is_stmt 0 view .LVU337
ARM GAS  /tmp/ccZdZ92R.s 			page 54


 1143 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1144              	.LVL110:
 420:src/display.c ****     }
 1145              		.loc 1 420 9 view .LVU338
 1146 0016 0934     		adds	r4, r4, #9
 1147              	.LVL111:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1148              		.loc 1 415 24 is_stmt 1 view .LVU339
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1149              		.loc 1 415 10 view .LVU340
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1150              		.loc 1 415 3 is_stmt 0 view .LVU341
 1151 0018 93B1     		cbz	r3, .L112
 1152              	.LVL112:
 1153              	.L116:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1154              		.loc 1 416 5 is_stmt 1 view .LVU342
 417:src/display.c ****     else {
 1155              		.loc 1 417 7 view .LVU343
 419:src/display.c ****       j += SEGS_PER_DIGIT;
 1156              		.loc 1 419 7 view .LVU344
 1157              	.LBB177:
 1158              	.LBI173:
 407:src/display.c ****   if (res) *res++ = ch;
 1159              		.loc 1 407 14 view .LVU345
 1160              	.LBB175:
 408:src/display.c ****   else	set_dig(base, ch);
 1161              		.loc 1 408 3 view .LVU346
 409:src/display.c ****   return res;
 1162              		.loc 1 409 8 view .LVU347
 1163              	.LBE175:
 1164              	.LBE177:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1165              		.loc 1 416 21 is_stmt 0 view .LVU348
 1166 001a 03F0FD02 		and	r2, r3, #253
 1167 001e 2C2A     		cmp	r2, #44
 417:src/display.c ****     else {
 1168              		.loc 1 417 7 view .LVU349
 1169 0020 A4F10900 		sub	r0, r4, #9
 1170 0024 4FF00002 		mov	r2, #0
 1171              	.LBB178:
 1172              	.LBB176:
 409:src/display.c ****   return res;
 1173              		.loc 1 409 8 view .LVU350
 1174 0028 1946     		mov	r1, r3
 1175              	.LBE176:
 1176              	.LBE178:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1177              		.loc 1 416 21 view .LVU351
 1178 002a EFD1     		bne	.L114
 417:src/display.c ****     else {
 1179              		.loc 1 417 7 view .LVU352
 1180 002c B3F12E01 		subs	r1, r3, #46
 1181 0030 18BF     		it	ne
 1182 0032 0121     		movne	r1, #1
 1183 0034 FFF7FEFF 		bl	set_decimal
 1184              	.LVL113:
ARM GAS  /tmp/ccZdZ92R.s 			page 55


 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1185              		.loc 1 415 24 is_stmt 1 view .LVU353
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1186              		.loc 1 415 10 view .LVU354
 1187 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1188              	.LVL114:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1189              		.loc 1 415 3 is_stmt 0 view .LVU355
 1190 003c 002B     		cmp	r3, #0
 1191 003e ECD1     		bne	.L116
 1192              	.LVL115:
 1193              	.L112:
 423:src/display.c **** 
 1194              		.loc 1 423 1 view .LVU356
 1195 0040 38BD     		pop	{r3, r4, r5, pc}
 1196              		.cfi_endproc
 1197              	.LFE12:
 1199 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1200              		.align	2
 1201              	.LC1:
 1202 0000 4E614E00 		.ascii	"NaN\000"
 1203              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1204              		.align	1
 1205              		.p2align 2,,3
 1206              		.syntax unified
 1207              		.thumb
 1208              		.thumb_func
 1209              		.fpu fpv4-sp-d16
 1211              	check_special_dn.isra.0:
 1212              	.LVL116:
 1213              	.LFB49:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1214              		.loc 1 1542 18 is_stmt 1 view -0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1218              		.loc 1 1543 2 view .LVU358
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1219              		.loc 1 1542 18 is_stmt 0 view .LVU359
 1220 0000 38B5     		push	{r3, r4, r5, lr}
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 3, -16
 1223              		.cfi_offset 4, -12
 1224              		.cfi_offset 5, -8
 1225              		.cfi_offset 14, -4
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1226              		.loc 1 1543 6 view .LVU360
 1227 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1228              		.loc 1 1542 18 view .LVU361
 1229 0004 0546     		mov	r5, r0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1230              		.loc 1 1543 5 view .LVU362
 1231 0006 13F07000 		ands	r0, r3, #112
 1232 000a 09D0     		beq	.L122
1544:src/display.c **** 	    if (res) {
ARM GAS  /tmp/ccZdZ92R.s 			page 56


 1233              		.loc 1 1544 4 is_stmt 1 view .LVU363
1544:src/display.c **** 	    if (res) {
 1234              		.loc 1 1544 7 is_stmt 0 view .LVU364
 1235 000c 13F0300F 		tst	r3, #48
 1236 0010 0C46     		mov	r4, r1
 1237 0012 06D0     		beq	.L124
 1238              	.LVL117:
 1239              	.LBB181:
 1240              	.LBI181:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1241              		.loc 1 1542 18 is_stmt 1 view .LVU365
 1242              	.LBB182:
1545:src/display.c **** 	      scopy(res, "NaN");
 1243              		.loc 1 1545 6 view .LVU366
1545:src/display.c **** 	      scopy(res, "NaN");
 1244              		.loc 1 1545 9 is_stmt 0 view .LVU367
 1245 0014 89B1     		cbz	r1, .L125
1546:src/display.c **** 	    } else {
 1246              		.loc 1 1546 8 is_stmt 1 view .LVU368
 1247 0016 0846     		mov	r0, r1
 1248 0018 1849     		ldr	r1, .L138
 1249              	.LVL118:
1546:src/display.c **** 	    } else {
 1250              		.loc 1 1546 8 is_stmt 0 view .LVU369
 1251 001a FFF7FEFF 		bl	scopy
 1252              	.LVL119:
1546:src/display.c **** 	    } else {
 1253              		.loc 1 1546 8 view .LVU370
 1254 001e 0120     		movs	r0, #1
 1255              	.LVL120:
 1256              	.L122:
1546:src/display.c **** 	    } else {
 1257              		.loc 1 1546 8 view .LVU371
 1258              	.LBE182:
 1259              	.LBE181:
1578:src/display.c **** 
 1260              		.loc 1 1578 7 view .LVU372
 1261 0020 38BD     		pop	{r3, r4, r5, pc}
 1262              	.LVL121:
 1263              	.L124:
1556:src/display.c **** 	      if (res) *res++ = '-';
 1264              		.loc 1 1556 6 is_stmt 1 view .LVU373
1556:src/display.c **** 	      if (res) *res++ = '-';
 1265              		.loc 1 1556 9 is_stmt 0 view .LVU374
 1266 0022 1B06     		lsls	r3, r3, #24
 1267 0024 04D4     		bmi	.L137
1560:src/display.c **** 	      *res++ = '\237';
 1268              		.loc 1 1560 6 is_stmt 1 view .LVU375
1560:src/display.c **** 	      *res++ = '\237';
 1269              		.loc 1 1560 9 is_stmt 0 view .LVU376
 1270 0026 B9B1     		cbz	r1, .L129
 1271              	.LVL122:
 1272              	.L128:
1561:src/display.c **** 	    else {
 1273              		.loc 1 1561 8 is_stmt 1 view .LVU377
1561:src/display.c **** 	    else {
 1274              		.loc 1 1561 15 is_stmt 0 view .LVU378
ARM GAS  /tmp/ccZdZ92R.s 			page 57


 1275 0028 9F23     		movs	r3, #159
 1276 002a 2370     		strb	r3, [r4]
1574:src/display.c **** 	  }
 1277              		.loc 1 1574 13 view .LVU379
 1278 002c 0120     		movs	r0, #1
1578:src/display.c **** 
 1279              		.loc 1 1578 7 view .LVU380
 1280 002e 38BD     		pop	{r3, r4, r5, pc}
 1281              	.LVL123:
 1282              	.L137:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1283              		.loc 1 1557 8 is_stmt 1 view .LVU381
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1284              		.loc 1 1557 11 is_stmt 0 view .LVU382
 1285 0030 71B1     		cbz	r1, .L127
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1286              		.loc 1 1557 17 is_stmt 1 view .LVU383
 1287              	.LVL124:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1288              		.loc 1 1557 24 is_stmt 0 view .LVU384
 1289 0032 2D23     		movs	r3, #45
 1290 0034 04F8013B 		strb	r3, [r4], #1
 1291              	.LVL125:
1560:src/display.c **** 	      *res++ = '\237';
 1292              		.loc 1 1560 6 is_stmt 1 view .LVU385
 1293 0038 F6E7     		b	.L128
 1294              	.LVL126:
 1295              	.L125:
 1296              	.LBB184:
 1297              	.LBB183:
1548:src/display.c **** #ifndef REALBUILD
 1298              		.loc 1 1548 8 view .LVU386
 1299 003a 1148     		ldr	r0, .L138+4
 1300 003c FFF7FEFF 		bl	set_digits_string
 1301              	.LVL127:
1550:src/display.c **** 	      forceDispPlot=0;
 1302              		.loc 1 1550 8 view .LVU387
 1303 0040 1049     		ldr	r1, .L138+8
 1304 0042 1148     		ldr	r0, .L138+12
 1305 0044 FFF7FEFF 		bl	scopy
 1306              	.LVL128:
1551:src/display.c **** #endif
 1307              		.loc 1 1551 8 view .LVU388
1551:src/display.c **** #endif
 1308              		.loc 1 1551 21 is_stmt 0 view .LVU389
 1309 0048 104B     		ldr	r3, .L138+16
 1310 004a 1C70     		strb	r4, [r3]
 1311 004c 0120     		movs	r0, #1
 1312              	.LBE183:
 1313              	.LBE184:
1578:src/display.c **** 
 1314              		.loc 1 1578 7 view .LVU390
 1315 004e 38BD     		pop	{r3, r4, r5, pc}
 1316              	.LVL129:
 1317              	.L127:
1558:src/display.c **** 	    }
 1318              		.loc 1 1558 13 is_stmt 1 view .LVU391
ARM GAS  /tmp/ccZdZ92R.s 			page 58


 1319 0050 2D21     		movs	r1, #45
 1320              	.LVL130:
1558:src/display.c **** 	    }
 1321              		.loc 1 1558 13 is_stmt 0 view .LVU392
 1322 0052 0920     		movs	r0, #9
 1323 0054 FFF7FEFF 		bl	set_dig
 1324              	.LVL131:
1560:src/display.c **** 	      *res++ = '\237';
 1325              		.loc 1 1560 6 is_stmt 1 view .LVU393
 1326              	.L129:
1563:src/display.c **** #ifndef REALBUILD
 1327              		.loc 1 1563 8 view .LVU394
 1328 0058 1221     		movs	r1, #18
 1329 005a 0D48     		ldr	r0, .L138+20
 1330 005c FFF7FEFF 		bl	set_digits_string
 1331              	.LVL132:
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1332              		.loc 1 1565 8 view .LVU395
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1333              		.loc 1 1565 11 is_stmt 0 view .LVU396
 1334 0060 95F90030 		ldrsb	r3, [r5]
1569:src/display.c **** 	      }
 1335              		.loc 1 1569 3 view .LVU397
 1336 0064 0848     		ldr	r0, .L138+12
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1337              		.loc 1 1565 11 view .LVU398
 1338 0066 002B     		cmp	r3, #0
1566:src/display.c **** 	      }
 1339              		.loc 1 1566 3 is_stmt 1 view .LVU399
 1340 0068 B4BF     		ite	lt
 1341 006a 0A49     		ldrlt	r1, .L138+24
1569:src/display.c **** 	      }
 1342              		.loc 1 1569 3 view .LVU400
 1343 006c 0A49     		ldrge	r1, .L138+28
 1344 006e FFF7FEFF 		bl	scopy
 1345              	.LVL133:
1571:src/display.c **** #endif
 1346              		.loc 1 1571 8 view .LVU401
1571:src/display.c **** #endif
 1347              		.loc 1 1571 21 is_stmt 0 view .LVU402
 1348 0072 064B     		ldr	r3, .L138+16
 1349 0074 0022     		movs	r2, #0
 1350 0076 1A70     		strb	r2, [r3]
1574:src/display.c **** 	  }
 1351              		.loc 1 1574 13 view .LVU403
 1352 0078 0120     		movs	r0, #1
1578:src/display.c **** 
 1353              		.loc 1 1578 7 view .LVU404
 1354 007a 38BD     		pop	{r3, r4, r5, pc}
 1355              	.L139:
 1356              		.align	2
 1357              	.L138:
 1358 007c 00000000 		.word	.LC1
 1359 0080 00000000 		.word	.LANCHOR3
 1360 0084 00000000 		.word	.LANCHOR4
 1361 0088 00000000 		.word	LastDisplayedNumber
 1362 008c 00000000 		.word	forceDispPlot
ARM GAS  /tmp/ccZdZ92R.s 			page 59


 1363 0090 00000000 		.word	.LANCHOR5
 1364 0094 00000000 		.word	.LANCHOR6
 1365 0098 00000000 		.word	.LANCHOR7
 1366              		.cfi_endproc
 1367              	.LFE49:
 1369              		.section	.text.set_x_hms,"ax",%progbits
 1370              		.align	1
 1371              		.p2align 2,,3
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1375              		.fpu fpv4-sp-d16
 1377              	set_x_hms:
 1378              	.LVL134:
 1379              	.LFB22:
1618:src/display.c **** 
1619:src/display.c **** 
1620:src/display.c ****       /* Display the number in H.MS mode.
1621:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1622:src/display.c ****        */
1623:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
 1380              		.loc 1 1623 62 is_stmt 1 view -0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 200
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
1624:src/display.c **** 	decNumber x, y, a, t, u;
 1384              		.loc 1 1624 2 view .LVU406
1625:src/display.c **** 	int j=0;
 1385              		.loc 1 1625 2 view .LVU407
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1386              		.loc 1 1623 62 is_stmt 0 view .LVU408
 1387 0000 30B5     		push	{r4, r5, lr}
 1388              		.cfi_def_cfa_offset 12
 1389              		.cfi_offset 4, -12
 1390              		.cfi_offset 5, -8
 1391              		.cfi_offset 14, -4
 1392 0002 B5B0     		sub	sp, sp, #212
 1393              		.cfi_def_cfa_offset 224
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1394              		.loc 1 1623 62 view .LVU409
 1395 0004 0446     		mov	r4, r0
 1396              		.loc 1 1625 6 view .LVU410
 1397 0006 0023     		movs	r3, #0
1626:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1627:src/display.c **** 	unsigned int hr, min, sec, fs;
1628:src/display.c **** 
1629:src/display.c **** 	if (check_special_dn(rgx, res)) {
 1398              		.loc 1 1629 6 view .LVU411
 1399 0008 0830     		adds	r0, r0, #8
 1400              	.LVL135:
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1401              		.loc 1 1623 62 view .LVU412
 1402 000a 0D46     		mov	r5, r1
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1403              		.loc 1 1625 6 view .LVU413
 1404 000c 0393     		str	r3, [sp, #12]
1626:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccZdZ92R.s 			page 60


 1405              		.loc 1 1626 2 is_stmt 1 view .LVU414
 1406              	.LVL136:
1627:src/display.c **** 
 1407              		.loc 1 1627 2 view .LVU415
 1408              		.loc 1 1629 2 view .LVU416
 1409              		.loc 1 1629 6 is_stmt 0 view .LVU417
 1410 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1411              	.LVL137:
 1412              		.loc 1 1629 5 view .LVU418
 1413 0012 48B1     		cbz	r0, .L141
1630:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1414              		.loc 1 1630 4 is_stmt 1 view .LVU419
 1415              		.loc 1 1630 7 is_stmt 0 view .LVU420
 1416 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1417 0016 5B06     		lsls	r3, r3, #25
 1418 0018 04D5     		bpl	.L140
1631:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1419              		.loc 1 1631 6 is_stmt 1 view .LVU421
 1420              	.LVL138:
 1421              	.LBB185:
 1422              	.LBI185:
 407:src/display.c ****   if (res) *res++ = ch;
 1423              		.loc 1 407 14 view .LVU422
 1424              	.LBB186:
 408:src/display.c ****   else	set_dig(base, ch);
 1425              		.loc 1 408 3 view .LVU423
 408:src/display.c ****   else	set_dig(base, ch);
 1426              		.loc 1 408 6 is_stmt 0 view .LVU424
 1427 001a 002D     		cmp	r5, #0
 1428 001c 00F0B580 		beq	.L144
 408:src/display.c ****   else	set_dig(base, ch);
 1429              		.loc 1 408 12 is_stmt 1 view .LVU425
 1430              	.LVL139:
 408:src/display.c ****   else	set_dig(base, ch);
 1431              		.loc 1 408 19 is_stmt 0 view .LVU426
 1432 0020 6F23     		movs	r3, #111
 1433 0022 2B70     		strb	r3, [r5]
 1434              	.LVL140:
 1435              	.L140:
 408:src/display.c ****   else	set_dig(base, ch);
 1436              		.loc 1 408 19 view .LVU427
 1437              	.LBE186:
 1438              	.LBE185:
1632:src/display.c **** 	  return;
1633:src/display.c **** 	}
1634:src/display.c **** 
1635:src/display.c **** 	set_separator_decimal_modes();
1636:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1637:src/display.c **** 	dn_abs(&a, rgx);
1638:src/display.c **** 	if (decNumberIsNegative(&x)) {
1639:src/display.c **** 	  if (res != NULL)
1640:src/display.c **** 	    *res++ += '-';
1641:src/display.c **** 	  else
1642:src/display.c **** 	    SET_MANT_SIGN;
1643:src/display.c **** 	  dn_minus(&x, &x);
1644:src/display.c **** 	}
1645:src/display.c **** 
ARM GAS  /tmp/ccZdZ92R.s 			page 61


1646:src/display.c **** 	decNumberHR2HMS(&y, &x);
1647:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1648:src/display.c **** 	decNumberRound(&u, &t);
1649:src/display.c **** 
1650:src/display.c **** 	hms_step(&t, &u, &fs);
1651:src/display.c **** 	hms_step(&u, &t, &sec);
1652:src/display.c **** 	hms_step(&t, &u, &min);
1653:src/display.c **** 	hr = dn_to_int(&t);
1654:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1655:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1656:src/display.c **** 
1657:src/display.c **** 	// degrees
1658:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1659:src/display.c **** 	res = set_dig_s(j, '@', res);
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
1661:src/display.c **** 
1662:src/display.c **** 	// minutes
1663:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1664:src/display.c **** 	res = set_dig_s(j, '\'', res);
1665:src/display.c **** 	j += SEGS_PER_DIGIT;
1666:src/display.c **** 
1667:src/display.c **** 	// seconds
1668:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1669:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1670:src/display.c **** 
1671:src/display.c **** 	// Fractional seconds
1672:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1673:src/display.c **** 
1674:src/display.c **** 	// We're now pointing at the exponent's first digit...
1675:src/display.c **** 	res = set_dig_s(j, '"', res);
1676:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1677:src/display.c **** 
1678:src/display.c **** 	// Check for values too big or small
1679:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1680:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1681:src/display.c **** 	} else if (! dn_eq0(&a)) {
1682:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1683:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1684:src/display.c **** 	  }
1685:src/display.c **** 	}
1686:src/display.c ****       }
 1439              		.loc 1 1686 7 view .LVU428
 1440 0024 35B0     		add	sp, sp, #212
 1441              		.cfi_remember_state
 1442              		.cfi_def_cfa_offset 12
 1443              		@ sp needed
 1444 0026 30BD     		pop	{r4, r5, pc}
 1445              	.LVL141:
 1446              	.L141:
 1447              		.cfi_restore_state
1635:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1448              		.loc 1 1635 2 is_stmt 1 view .LVU429
 1449 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1450              	.LVL142:
1636:src/display.c **** 	dn_abs(&a, rgx);
 1451              		.loc 1 1636 2 view .LVU430
 1452 002c 624A     		ldr	r2, .L171
ARM GAS  /tmp/ccZdZ92R.s 			page 62


 1453 002e 2146     		mov	r1, r4
 1454 0030 07A8     		add	r0, sp, #28
 1455 0032 FFF7FEFF 		bl	decNumberMod
 1456              	.LVL143:
1637:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1457              		.loc 1 1637 2 view .LVU431
 1458 0036 2146     		mov	r1, r4
 1459 0038 19A8     		add	r0, sp, #100
 1460 003a FFF7FEFF 		bl	dn_abs
 1461              	.LVL144:
1638:src/display.c **** 	  if (res != NULL)
 1462              		.loc 1 1638 2 view .LVU432
1638:src/display.c **** 	  if (res != NULL)
 1463              		.loc 1 1638 5 is_stmt 0 view .LVU433
 1464 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1465 0042 002B     		cmp	r3, #0
 1466 0044 72DB     		blt	.L169
 1467              	.L145:
1646:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1468              		.loc 1 1646 2 is_stmt 1 view .LVU434
 1469 0046 07A9     		add	r1, sp, #28
 1470 0048 10A8     		add	r0, sp, #64
 1471 004a FFF7FEFF 		bl	decNumberHR2HMS
 1472              	.LVL145:
1647:src/display.c **** 	decNumberRound(&u, &t);
 1473              		.loc 1 1647 2 view .LVU435
 1474 004e 0622     		movs	r2, #6
 1475 0050 10A9     		add	r1, sp, #64
 1476 0052 22A8     		add	r0, sp, #136
 1477 0054 FFF7FEFF 		bl	dn_mulpow10
 1478              	.LVL146:
1648:src/display.c **** 
 1479              		.loc 1 1648 2 view .LVU436
 1480 0058 22A9     		add	r1, sp, #136
 1481 005a 2BA8     		add	r0, sp, #172
 1482 005c FFF7FEFF 		bl	decNumberRound
 1483              	.LVL147:
1650:src/display.c **** 	hms_step(&u, &t, &sec);
 1484              		.loc 1 1650 2 view .LVU437
 1485 0060 2BA9     		add	r1, sp, #172
 1486 0062 22A8     		add	r0, sp, #136
 1487 0064 06AA     		add	r2, sp, #24
 1488 0066 FFF7FEFF 		bl	hms_step
 1489              	.LVL148:
1651:src/display.c **** 	hms_step(&t, &u, &min);
 1490              		.loc 1 1651 2 view .LVU438
 1491 006a 22A9     		add	r1, sp, #136
 1492 006c 2BA8     		add	r0, sp, #172
 1493 006e 05AA     		add	r2, sp, #20
 1494 0070 FFF7FEFF 		bl	hms_step
 1495              	.LVL149:
1652:src/display.c **** 	hr = dn_to_int(&t);
 1496              		.loc 1 1652 2 view .LVU439
 1497 0074 04AA     		add	r2, sp, #16
 1498 0076 2BA9     		add	r1, sp, #172
 1499 0078 22A8     		add	r0, sp, #136
 1500 007a FFF7FEFF 		bl	hms_step
ARM GAS  /tmp/ccZdZ92R.s 			page 63


 1501              	.LVL150:
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1502              		.loc 1 1653 2 view .LVU440
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1503              		.loc 1 1653 7 is_stmt 0 view .LVU441
 1504 007e 22A8     		add	r0, sp, #136
 1505 0080 FFF7FEFF 		bl	dn_to_int
 1506              	.LVL151:
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1507              		.loc 1 1654 33 view .LVU442
 1508 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1509              		.loc 1 1654 5 view .LVU443
 1510 0088 3B2A     		cmp	r2, #59
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1511              		.loc 1 1654 19 is_stmt 1 view .LVU444
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1512              		.loc 1 1654 23 is_stmt 0 view .LVU445
 1513 008a 82BF     		ittt	hi
 1514 008c 3C3A     		subhi	r2, r2, #60
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1515              		.loc 1 1654 33 view .LVU446
 1516 008e 0133     		addhi	r3, r3, #1
 1517 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1655:src/display.c **** 
 1518              		.loc 1 1655 2 is_stmt 1 view .LVU447
1655:src/display.c **** 
 1519              		.loc 1 1655 5 is_stmt 0 view .LVU448
 1520 0094 3B2B     		cmp	r3, #59
 1521 0096 02D9     		bls	.L150
1655:src/display.c **** 
 1522              		.loc 1 1655 19 is_stmt 1 discriminator 1 view .LVU449
1655:src/display.c **** 
 1523              		.loc 1 1655 23 is_stmt 0 discriminator 1 view .LVU450
 1524 0098 3C3B     		subs	r3, r3, #60
 1525 009a 0493     		str	r3, [sp, #16]
1655:src/display.c **** 
 1526              		.loc 1 1655 30 is_stmt 1 discriminator 1 view .LVU451
1655:src/display.c **** 
 1527              		.loc 1 1655 32 is_stmt 0 discriminator 1 view .LVU452
 1528 009c 0130     		adds	r0, r0, #1
 1529              	.LVL152:
 1530              	.L150:
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 1531              		.loc 1 1658 2 is_stmt 1 view .LVU453
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 1532              		.loc 1 1658 8 is_stmt 0 view .LVU454
 1533 009e 0123     		movs	r3, #1
 1534 00a0 0093     		str	r3, [sp]
 1535 00a2 2946     		mov	r1, r5
 1536 00a4 03AA     		add	r2, sp, #12
 1537 00a6 0423     		movs	r3, #4
 1538 00a8 FFF7FEFF 		bl	hms_render
 1539              	.LVL153:
1659:src/display.c **** 	j += SEGS_PER_DIGIT;
 1540              		.loc 1 1659 2 is_stmt 1 view .LVU455
 1541              	.LBB188:
ARM GAS  /tmp/ccZdZ92R.s 			page 64


 1542              	.LBI188:
 407:src/display.c ****   if (res) *res++ = ch;
 1543              		.loc 1 407 14 view .LVU456
 1544              	.LBB189:
 408:src/display.c ****   else	set_dig(base, ch);
 1545              		.loc 1 408 3 view .LVU457
 408:src/display.c ****   else	set_dig(base, ch);
 1546              		.loc 1 408 6 is_stmt 0 view .LVU458
 1547 00ac 0446     		mov	r4, r0
 1548              	.LVL154:
 408:src/display.c ****   else	set_dig(base, ch);
 1549              		.loc 1 408 6 view .LVU459
 1550 00ae 0028     		cmp	r0, #0
 1551 00b0 76D0     		beq	.L151
 408:src/display.c ****   else	set_dig(base, ch);
 1552              		.loc 1 408 12 is_stmt 1 view .LVU460
 408:src/display.c ****   else	set_dig(base, ch);
 1553              		.loc 1 408 16 is_stmt 0 view .LVU461
 1554 00b2 0146     		mov	r1, r0
 1555              	.LVL155:
 408:src/display.c ****   else	set_dig(base, ch);
 1556              		.loc 1 408 19 view .LVU462
 1557 00b4 4023     		movs	r3, #64
 1558 00b6 01F8013B 		strb	r3, [r1], #1
 1559              	.LVL156:
 1560              	.L152:
 410:src/display.c **** }
 1561              		.loc 1 410 3 is_stmt 1 view .LVU463
 410:src/display.c **** }
 1562              		.loc 1 410 3 is_stmt 0 view .LVU464
 1563              	.LBE189:
 1564              	.LBE188:
1660:src/display.c **** 
 1565              		.loc 1 1660 2 is_stmt 1 view .LVU465
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1566              		.loc 1 1663 8 is_stmt 0 view .LVU466
 1567 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 1568 00be 0122     		movs	r2, #1
1660:src/display.c **** 
 1569              		.loc 1 1660 4 view .LVU467
 1570 00c0 03F10904 		add	r4, r3, #9
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1571              		.loc 1 1663 8 view .LVU468
 1572 00c4 0092     		str	r2, [sp]
 1573 00c6 0223     		movs	r3, #2
 1574 00c8 03AA     		add	r2, sp, #12
1660:src/display.c **** 
 1575              		.loc 1 1660 4 view .LVU469
 1576 00ca 0394     		str	r4, [sp, #12]
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1577              		.loc 1 1663 2 is_stmt 1 view .LVU470
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1578              		.loc 1 1663 8 is_stmt 0 view .LVU471
 1579 00cc FFF7FEFF 		bl	hms_render
 1580              	.LVL157:
1664:src/display.c **** 	j += SEGS_PER_DIGIT;
 1581              		.loc 1 1664 2 is_stmt 1 view .LVU472
ARM GAS  /tmp/ccZdZ92R.s 			page 65


 1582              	.LBB191:
 1583              	.LBI191:
 407:src/display.c ****   if (res) *res++ = ch;
 1584              		.loc 1 407 14 view .LVU473
 1585              	.LBB192:
 408:src/display.c ****   else	set_dig(base, ch);
 1586              		.loc 1 408 3 view .LVU474
 408:src/display.c ****   else	set_dig(base, ch);
 1587              		.loc 1 408 6 is_stmt 0 view .LVU475
 1588 00d0 0446     		mov	r4, r0
 1589 00d2 0028     		cmp	r0, #0
 1590 00d4 5ED0     		beq	.L153
 408:src/display.c ****   else	set_dig(base, ch);
 1591              		.loc 1 408 12 is_stmt 1 view .LVU476
 408:src/display.c ****   else	set_dig(base, ch);
 1592              		.loc 1 408 16 is_stmt 0 view .LVU477
 1593 00d6 0146     		mov	r1, r0
 1594              	.LVL158:
 408:src/display.c ****   else	set_dig(base, ch);
 1595              		.loc 1 408 19 view .LVU478
 1596 00d8 2723     		movs	r3, #39
 1597 00da 01F8013B 		strb	r3, [r1], #1
 1598              	.LVL159:
 1599              	.L154:
 410:src/display.c **** }
 1600              		.loc 1 410 3 is_stmt 1 view .LVU479
 410:src/display.c **** }
 1601              		.loc 1 410 3 is_stmt 0 view .LVU480
 1602              	.LBE192:
 1603              	.LBE191:
1665:src/display.c **** 
 1604              		.loc 1 1665 2 is_stmt 1 view .LVU481
1665:src/display.c **** 
 1605              		.loc 1 1665 4 is_stmt 0 view .LVU482
 1606 00de 039B     		ldr	r3, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1607              		.loc 1 1668 8 view .LVU483
 1608 00e0 0598     		ldr	r0, [sp, #20]
 1609 00e2 0122     		movs	r2, #1
1665:src/display.c **** 
 1610              		.loc 1 1665 4 view .LVU484
 1611 00e4 03F10904 		add	r4, r3, #9
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1612              		.loc 1 1668 8 view .LVU485
 1613 00e8 0092     		str	r2, [sp]
 1614 00ea 0223     		movs	r3, #2
 1615 00ec 03AA     		add	r2, sp, #12
1665:src/display.c **** 
 1616              		.loc 1 1665 4 view .LVU486
 1617 00ee 0394     		str	r4, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1618              		.loc 1 1668 2 is_stmt 1 view .LVU487
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1619              		.loc 1 1668 8 is_stmt 0 view .LVU488
 1620 00f0 FFF7FEFF 		bl	hms_render
 1621              	.LVL160:
1669:src/display.c **** 
ARM GAS  /tmp/ccZdZ92R.s 			page 66


 1622              		.loc 1 1669 8 view .LVU489
 1623 00f4 3149     		ldr	r1, .L171+4
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1624              		.loc 1 1668 8 view .LVU490
 1625 00f6 0246     		mov	r2, r0
 1626              	.LVL161:
1669:src/display.c **** 
 1627              		.loc 1 1669 2 is_stmt 1 view .LVU491
1669:src/display.c **** 
 1628              		.loc 1 1669 8 is_stmt 0 view .LVU492
 1629 00f8 0398     		ldr	r0, [sp, #12]
 1630              	.LVL162:
1669:src/display.c **** 
 1631              		.loc 1 1669 8 view .LVU493
 1632 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1633 00fc 0938     		subs	r0, r0, #9
 1634 00fe FFF7FEFF 		bl	set_decimal
 1635              	.LVL163:
1672:src/display.c **** 
 1636              		.loc 1 1672 8 view .LVU494
 1637 0102 0023     		movs	r3, #0
1669:src/display.c **** 
 1638              		.loc 1 1669 8 view .LVU495
 1639 0104 0146     		mov	r1, r0
 1640              	.LVL164:
1672:src/display.c **** 
 1641              		.loc 1 1672 2 is_stmt 1 view .LVU496
1672:src/display.c **** 
 1642              		.loc 1 1672 8 is_stmt 0 view .LVU497
 1643 0106 0093     		str	r3, [sp]
 1644 0108 0698     		ldr	r0, [sp, #24]
 1645              	.LVL165:
1672:src/display.c **** 
 1646              		.loc 1 1672 8 view .LVU498
 1647 010a 03AA     		add	r2, sp, #12
 1648 010c 0223     		movs	r3, #2
 1649 010e FFF7FEFF 		bl	hms_render
 1650              	.LVL166:
1675:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 1651              		.loc 1 1675 2 is_stmt 1 view .LVU499
 1652              	.LBB194:
 1653              	.LBI194:
 407:src/display.c ****   if (res) *res++ = ch;
 1654              		.loc 1 407 14 view .LVU500
 1655              	.LBB195:
 408:src/display.c ****   else	set_dig(base, ch);
 1656              		.loc 1 408 3 view .LVU501
 408:src/display.c ****   else	set_dig(base, ch);
 1657              		.loc 1 408 6 is_stmt 0 view .LVU502
 1658 0112 0446     		mov	r4, r0
 1659 0114 78B3     		cbz	r0, .L155
 408:src/display.c ****   else	set_dig(base, ch);
 1660              		.loc 1 408 12 is_stmt 1 view .LVU503
 1661              	.LVL167:
 408:src/display.c ****   else	set_dig(base, ch);
 1662              		.loc 1 408 19 is_stmt 0 view .LVU504
 1663 0116 2223     		movs	r3, #34
ARM GAS  /tmp/ccZdZ92R.s 			page 67


 1664 0118 0370     		strb	r3, [r0]
 1665              	.LVL168:
 410:src/display.c **** }
 1666              		.loc 1 410 3 is_stmt 1 view .LVU505
 410:src/display.c **** }
 1667              		.loc 1 410 3 is_stmt 0 view .LVU506
 1668              	.LBE195:
 1669              	.LBE194:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1670              		.loc 1 1679 2 is_stmt 1 view .LVU507
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1671              		.loc 1 1679 6 is_stmt 0 view .LVU508
 1672 011a 2749     		ldr	r1, .L171
 1673 011c 19A8     		add	r0, sp, #100
 1674              	.LVL169:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1675              		.loc 1 1679 6 view .LVU509
 1676 011e FFF7FEFF 		bl	dn_lt
 1677              	.LVL170:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1678              		.loc 1 1679 5 view .LVU510
 1679 0122 78B9     		cbnz	r0, .L170
1680:src/display.c **** 	} else if (! dn_eq0(&a)) {
 1680              		.loc 1 1680 4 is_stmt 1 view .LVU511
 1681              	.LVL171:
 1682              	.LBB198:
 1683              	.LBI198:
 407:src/display.c ****   if (res) *res++ = ch;
 1684              		.loc 1 407 14 view .LVU512
 1685              	.LBB199:
 408:src/display.c ****   else	set_dig(base, ch);
 1686              		.loc 1 408 3 view .LVU513
 408:src/display.c ****   else	set_dig(base, ch);
 1687              		.loc 1 408 12 view .LVU514
 408:src/display.c ****   else	set_dig(base, ch);
 1688              		.loc 1 408 19 is_stmt 0 view .LVU515
 1689 0124 6F23     		movs	r3, #111
 1690 0126 6370     		strb	r3, [r4, #1]
 1691              	.LBE199:
 1692              	.LBE198:
 1693              		.loc 1 1686 7 view .LVU516
 1694 0128 35B0     		add	sp, sp, #212
 1695              		.cfi_remember_state
 1696              		.cfi_def_cfa_offset 12
 1697              		@ sp needed
 1698 012a 30BD     		pop	{r4, r5, pc}
 1699              	.LVL172:
 1700              	.L169:
 1701              		.cfi_restore_state
1639:src/display.c **** 	    *res++ += '-';
 1702              		.loc 1 1639 4 is_stmt 1 view .LVU517
1639:src/display.c **** 	    *res++ += '-';
 1703              		.loc 1 1639 7 is_stmt 0 view .LVU518
 1704 012c E5B1     		cbz	r5, .L146
1640:src/display.c **** 	  else
 1705              		.loc 1 1640 6 is_stmt 1 view .LVU519
1640:src/display.c **** 	  else
ARM GAS  /tmp/ccZdZ92R.s 			page 68


 1706              		.loc 1 1640 10 is_stmt 0 view .LVU520
 1707 012e 2B46     		mov	r3, r5
 1708              	.LVL173:
1640:src/display.c **** 	  else
 1709              		.loc 1 1640 13 view .LVU521
 1710 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1711              	.LVL174:
1640:src/display.c **** 	  else
 1712              		.loc 1 1640 13 view .LVU522
 1713 0134 2D32     		adds	r2, r2, #45
 1714 0136 2A70     		strb	r2, [r5]
1640:src/display.c **** 	  else
 1715              		.loc 1 1640 10 view .LVU523
 1716 0138 1D46     		mov	r5, r3
 1717              	.LVL175:
 1718              	.L147:
1643:src/display.c **** 	}
 1719              		.loc 1 1643 4 is_stmt 1 view .LVU524
 1720 013a 07A9     		add	r1, sp, #28
 1721 013c 0846     		mov	r0, r1
 1722 013e FFF7FEFF 		bl	dn_minus
 1723              	.LVL176:
 1724 0142 80E7     		b	.L145
 1725              	.LVL177:
 1726              	.L170:
 1727              	.LBB200:
 1728              	.LBB196:
 408:src/display.c ****   else	set_dig(base, ch);
 1729              		.loc 1 408 16 is_stmt 0 view .LVU525
 1730 0144 0134     		adds	r4, r4, #1
 1731              	.LVL178:
 1732              	.L158:
 408:src/display.c ****   else	set_dig(base, ch);
 1733              		.loc 1 408 16 view .LVU526
 1734              	.LBE196:
 1735              	.LBE200:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1736              		.loc 1 1681 9 is_stmt 1 view .LVU527
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1737              		.loc 1 1681 15 is_stmt 0 view .LVU528
 1738 0146 19A8     		add	r0, sp, #100
 1739 0148 FFF7FEFF 		bl	dn_eq0
 1740              	.LVL179:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1741              		.loc 1 1681 12 view .LVU529
 1742 014c 0028     		cmp	r0, #0
 1743 014e 7FF469AF 		bne	.L140
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1744              		.loc 1 1682 4 is_stmt 1 view .LVU530
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1745              		.loc 1 1682 8 is_stmt 0 view .LVU531
 1746 0152 1B48     		ldr	r0, .L171+8
 1747 0154 19A9     		add	r1, sp, #100
 1748 0156 FFF7FEFF 		bl	dn_lt
 1749              	.LVL180:
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1750              		.loc 1 1682 7 view .LVU532
ARM GAS  /tmp/ccZdZ92R.s 			page 69


 1751 015a 0028     		cmp	r0, #0
 1752 015c 7FF462AF 		bne	.L140
1683:src/display.c **** 	  }
 1753              		.loc 1 1683 6 is_stmt 1 view .LVU533
 1754              	.LVL181:
 1755              	.LBB201:
 1756              	.LBI201:
 407:src/display.c ****   if (res) *res++ = ch;
 1757              		.loc 1 407 14 view .LVU534
 1758              	.LBB202:
 408:src/display.c ****   else	set_dig(base, ch);
 1759              		.loc 1 408 3 view .LVU535
 408:src/display.c ****   else	set_dig(base, ch);
 1760              		.loc 1 408 6 is_stmt 0 view .LVU536
 1761 0160 24B3     		cbz	r4, .L160
 408:src/display.c ****   else	set_dig(base, ch);
 1762              		.loc 1 408 12 is_stmt 1 view .LVU537
 1763              	.LVL182:
 408:src/display.c ****   else	set_dig(base, ch);
 1764              		.loc 1 408 19 is_stmt 0 view .LVU538
 1765 0162 7523     		movs	r3, #117
 1766 0164 2370     		strb	r3, [r4]
 1767 0166 5DE7     		b	.L140
 1768              	.LVL183:
 1769              	.L146:
 408:src/display.c ****   else	set_dig(base, ch);
 1770              		.loc 1 408 19 view .LVU539
 1771              	.LBE202:
 1772              	.LBE201:
1642:src/display.c **** 	  dn_minus(&x, &x);
 1773              		.loc 1 1642 6 is_stmt 1 view .LVU540
 1774              	.LBB204:
 1775              	.LBI204:
 296:src/display.c **** {
 1776              		.loc 1 296 13 view .LVU541
 1777              	.LBB205:
 298:src/display.c ****   set_dot(MANT_SIGN);
 1778              		.loc 1 298 3 view .LVU542
 298:src/display.c ****   set_dot(MANT_SIGN);
 1779              		.loc 1 298 25 is_stmt 0 view .LVU543
 1780 0168 164B     		ldr	r3, .L171+12
 1781 016a 2D22     		movs	r2, #45
 299:src/display.c **** }
 1782              		.loc 1 299 3 view .LVU544
 1783 016c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 1784              		.loc 1 298 25 view .LVU545
 1785 016e 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 1786              		.loc 1 299 3 is_stmt 1 view .LVU546
 1787 0170 FFF7FEFF 		bl	set_dot
 1788              	.LVL184:
 300:src/display.c **** 
 1789              		.loc 1 300 1 is_stmt 0 view .LVU547
 1790 0174 E1E7     		b	.L147
 1791              	.LVL185:
 1792              	.L155:
ARM GAS  /tmp/ccZdZ92R.s 			page 70


 300:src/display.c **** 
 1793              		.loc 1 300 1 view .LVU548
 1794              	.LBE205:
 1795              	.LBE204:
 1796              	.LBB206:
 1797              	.LBB197:
 409:src/display.c ****   return res;
 1798              		.loc 1 409 8 is_stmt 1 view .LVU549
 1799 0176 0398     		ldr	r0, [sp, #12]
 1800              	.LVL186:
 409:src/display.c ****   return res;
 1801              		.loc 1 409 8 is_stmt 0 view .LVU550
 1802 0178 2221     		movs	r1, #34
 1803 017a FFF7FEFF 		bl	set_dig
 1804              	.LVL187:
 410:src/display.c **** }
 1805              		.loc 1 410 3 is_stmt 1 view .LVU551
 410:src/display.c **** }
 1806              		.loc 1 410 3 is_stmt 0 view .LVU552
 1807              	.LBE197:
 1808              	.LBE206:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1809              		.loc 1 1679 2 is_stmt 1 view .LVU553
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1810              		.loc 1 1679 6 is_stmt 0 view .LVU554
 1811 017e 0E49     		ldr	r1, .L171
 1812 0180 19A8     		add	r0, sp, #100
 1813 0182 FFF7FEFF 		bl	dn_lt
 1814              	.LVL188:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1815              		.loc 1 1679 5 view .LVU555
 1816 0186 0028     		cmp	r0, #0
 1817 0188 DDD1     		bne	.L158
 1818              	.LVL189:
 1819              	.L144:
 1820              	.LBB207:
 1821              	.LBB187:
 409:src/display.c ****   return res;
 1822              		.loc 1 409 8 is_stmt 1 view .LVU556
 1823 018a 6F21     		movs	r1, #111
 1824 018c 7A20     		movs	r0, #122
 1825 018e FFF7FEFF 		bl	set_dig
 1826              	.LVL190:
 1827              	.LBE187:
 1828              	.LBE207:
1632:src/display.c **** 	}
 1829              		.loc 1 1632 4 view .LVU557
 1830 0192 47E7     		b	.L140
 1831              	.LVL191:
 1832              	.L153:
 1833              	.LBB208:
 1834              	.LBB193:
 409:src/display.c ****   return res;
 1835              		.loc 1 409 8 view .LVU558
 1836 0194 2721     		movs	r1, #39
 1837 0196 0398     		ldr	r0, [sp, #12]
 1838              	.LVL192:
ARM GAS  /tmp/ccZdZ92R.s 			page 71


 409:src/display.c ****   return res;
 1839              		.loc 1 409 8 is_stmt 0 view .LVU559
 1840 0198 FFF7FEFF 		bl	set_dig
 1841              	.LVL193:
 409:src/display.c ****   return res;
 1842              		.loc 1 409 8 view .LVU560
 1843 019c 2146     		mov	r1, r4
 1844 019e 9EE7     		b	.L154
 1845              	.LVL194:
 1846              	.L151:
 409:src/display.c ****   return res;
 1847              		.loc 1 409 8 view .LVU561
 1848              	.LBE193:
 1849              	.LBE208:
 1850              	.LBB209:
 1851              	.LBB190:
 409:src/display.c ****   return res;
 1852              		.loc 1 409 8 is_stmt 1 view .LVU562
 1853 01a0 4021     		movs	r1, #64
 1854 01a2 0398     		ldr	r0, [sp, #12]
 1855              	.LVL195:
 409:src/display.c ****   return res;
 1856              		.loc 1 409 8 is_stmt 0 view .LVU563
 1857 01a4 FFF7FEFF 		bl	set_dig
 1858              	.LVL196:
 409:src/display.c ****   return res;
 1859              		.loc 1 409 8 view .LVU564
 1860 01a8 2146     		mov	r1, r4
 1861 01aa 86E7     		b	.L152
 1862              	.LVL197:
 1863              	.L160:
 409:src/display.c ****   return res;
 1864              		.loc 1 409 8 view .LVU565
 1865              	.LBE190:
 1866              	.LBE209:
 1867              	.LBB210:
 1868              	.LBB203:
 409:src/display.c ****   return res;
 1869              		.loc 1 409 8 is_stmt 1 view .LVU566
 1870 01ac 7521     		movs	r1, #117
 1871 01ae 7A20     		movs	r0, #122
 1872 01b0 FFF7FEFF 		bl	set_dig
 1873              	.LVL198:
 1874 01b4 36E7     		b	.L140
 1875              	.L172:
 1876 01b6 00BF     		.align	2
 1877              	.L171:
 1878 01b8 00000000 		.word	const_9000
 1879 01bc 00000000 		.word	.LANCHOR1
 1880 01c0 00000000 		.word	const_hms_threshold
 1881 01c4 00000000 		.word	LastDisplayedNumber
 1882              	.LBE203:
 1883              	.LBE210:
 1884              		.cfi_endproc
 1885              	.LFE22:
 1887              		.section	.text.set_x_fract,"ax",%progbits
 1888              		.align	1
ARM GAS  /tmp/ccZdZ92R.s 			page 72


 1889              		.p2align 2,,3
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu fpv4-sp-d16
 1895              	set_x_fract:
 1896              	.LVL199:
 1897              	.LFB23:
1687:src/display.c **** 
1688:src/display.c **** 
1689:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
 1898              		.loc 1 1689 63 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 216
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
1690:src/display.c **** 	decNumber x, w, n, d, t;
 1902              		.loc 1 1690 2 view .LVU568
1691:src/display.c **** 	char buf[32], *p = buf;
 1903              		.loc 1 1691 2 view .LVU569
1692:src/display.c **** 	int j;
 1904              		.loc 1 1692 2 view .LVU570
1693:src/display.c **** 
1694:src/display.c **** 	if (check_special_dn(rgx, res))
 1905              		.loc 1 1694 2 view .LVU571
1689:src/display.c **** 	decNumber x, w, n, d, t;
 1906              		.loc 1 1689 63 is_stmt 0 view .LVU572
 1907 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1908              		.cfi_def_cfa_offset 20
 1909              		.cfi_offset 4, -20
 1910              		.cfi_offset 5, -16
 1911              		.cfi_offset 6, -12
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 0646     		mov	r6, r0
 1915 0004 B7B0     		sub	sp, sp, #220
 1916              		.cfi_def_cfa_offset 240
 1917              		.loc 1 1694 6 view .LVU573
 1918 0006 0830     		adds	r0, r0, #8
 1919              	.LVL200:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 1920              		.loc 1 1689 63 view .LVU574
 1921 0008 0C46     		mov	r4, r1
 1922              		.loc 1 1694 6 view .LVU575
 1923 000a FFF7FEFF 		bl	check_special_dn.isra.0
 1924              	.LVL201:
 1925              		.loc 1 1694 5 view .LVU576
 1926 000e 18B1     		cbz	r0, .L204
 1927              	.LVL202:
 1928              	.L193:
1695:src/display.c **** 	  return 1;
 1929              		.loc 1 1695 11 view .LVU577
 1930 0010 0125     		movs	r5, #1
 1931              	.L173:
1696:src/display.c **** 	dn_abs(&x, rgx);
1697:src/display.c **** 	if (dn_ge(&x, &const_100000))
1698:src/display.c **** 	  return 0;
1699:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
ARM GAS  /tmp/ccZdZ92R.s 			page 73


1700:src/display.c **** 	  return 0;
1701:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1702:src/display.c **** 	  if (res != NULL)
1703:src/display.c **** 	    *res++ += '-';
1704:src/display.c **** 	  else
1705:src/display.c **** 	    SET_MANT_SIGN;
1706:src/display.c **** 	}
1707:src/display.c **** 	decNumberFrac(&w, &x);
1708:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1709:src/display.c **** 
1710:src/display.c **** 	dn_divide(&t, &n, &d);
1711:src/display.c **** 	dn_compare(&t, &t, &w);
1712:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1713:src/display.c **** 
1714:src/display.c **** 	if (dn_eq(&n, &d)) {
1715:src/display.c **** 	  dn_inc(&w);
1716:src/display.c **** 	  decNumberZero(&n);
1717:src/display.c **** 	}
1718:src/display.c **** 
1719:src/display.c **** 	if (!UState.improperfrac) {
1720:src/display.c **** 	  if (!dn_eq0(&w)) {
1721:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1722:src/display.c **** 	    *p++ = ' ';
1723:src/display.c **** 	  }
1724:src/display.c **** 	} else {
1725:src/display.c **** 	  dn_multiply(&x, &w, &d);
1726:src/display.c **** 	  dn_add(&n, &n, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1729:src/display.c **** 	*p++ = '/';
1730:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1731:src/display.c **** 	*p = '\0';
1732:src/display.c **** 	if ((p - 12) > buf) {
1733:src/display.c **** 	  p -= 12;
1734:src/display.c **** 	  *p = '<';
1735:src/display.c **** 	} else	p = buf;
1736:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1737:src/display.c **** 	  res = set_dig_s(j, *p, res);
1738:src/display.c **** 	  j += SEGS_PER_DIGIT;
1739:src/display.c **** 	}
1740:src/display.c **** 
1741:src/display.c **** 	if (dn_eq0(&t))
1742:src/display.c **** 	  p = (char *)S7_fract_EQ;
1743:src/display.c **** 	else if (decNumberIsNegative(&t))
1744:src/display.c **** 	  p = (char *)S7_fract_LT;
1745:src/display.c **** 	else
1746:src/display.c **** 	  p = (char *)S7_fract_GT;
1747:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1748:src/display.c **** 	  res = set_dig_s(j, *p, res);
1749:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1750:src/display.c **** 	}
1751:src/display.c **** 	return 1;
1752:src/display.c ****       }
 1932              		.loc 1 1752 7 view .LVU578
 1933 0012 2846     		mov	r0, r5
 1934 0014 37B0     		add	sp, sp, #220
 1935              		.cfi_remember_state
ARM GAS  /tmp/ccZdZ92R.s 			page 74


 1936              		.cfi_def_cfa_offset 20
 1937              		@ sp needed
 1938 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 1939              	.LVL203:
 1940              	.L204:
 1941              		.cfi_restore_state
 1942              	.LBB219:
 1943              	.LBI219:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 1944              		.loc 1 1689 18 is_stmt 1 view .LVU579
 1945              	.LBB220:
1696:src/display.c **** 	dn_abs(&x, rgx);
 1946              		.loc 1 1696 2 view .LVU580
 1947 0018 3146     		mov	r1, r6
 1948 001a 0546     		mov	r5, r0
 1949 001c 09A8     		add	r0, sp, #36
 1950 001e FFF7FEFF 		bl	dn_abs
 1951              	.LVL204:
1697:src/display.c **** 	  return 0;
 1952              		.loc 1 1697 2 view .LVU581
1697:src/display.c **** 	  return 0;
 1953              		.loc 1 1697 6 is_stmt 0 view .LVU582
 1954 0022 5D49     		ldr	r1, .L209
 1955 0024 09A8     		add	r0, sp, #36
 1956 0026 FFF7FEFF 		bl	dn_lt
 1957              	.LVL205:
1697:src/display.c **** 	  return 0;
 1958              		.loc 1 1697 5 view .LVU583
 1959 002a 0028     		cmp	r0, #0
 1960 002c F1D0     		beq	.L173
1699:src/display.c **** 	  return 0;
 1961              		.loc 1 1699 2 is_stmt 1 view .LVU584
1699:src/display.c **** 	  return 0;
 1962              		.loc 1 1699 6 is_stmt 0 view .LVU585
 1963 002e 5B49     		ldr	r1, .L209+4
 1964 0030 09A8     		add	r0, sp, #36
 1965 0032 FFF7FEFF 		bl	dn_lt
 1966              	.LVL206:
1699:src/display.c **** 	  return 0;
 1967              		.loc 1 1699 5 view .LVU586
 1968 0036 0746     		mov	r7, r0
 1969 0038 0028     		cmp	r0, #0
 1970 003a EAD1     		bne	.L173
1701:src/display.c **** 	  if (res != NULL)
 1971              		.loc 1 1701 2 is_stmt 1 view .LVU587
1701:src/display.c **** 	  if (res != NULL)
 1972              		.loc 1 1701 5 is_stmt 0 view .LVU588
 1973 003c 96F90830 		ldrsb	r3, [r6, #8]
 1974 0040 002B     		cmp	r3, #0
 1975 0042 C0F28680 		blt	.L205
 1976              	.LVL207:
 1977              	.L178:
1707:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 1978              		.loc 1 1707 2 is_stmt 1 view .LVU589
 1979 0046 09A9     		add	r1, sp, #36
 1980 0048 12A8     		add	r0, sp, #72
 1981 004a FFF7FEFF 		bl	decNumberFrac
ARM GAS  /tmp/ccZdZ92R.s 			page 75


 1982              	.LVL208:
1708:src/display.c **** 
 1983              		.loc 1 1708 2 view .LVU590
 1984 004e 12AA     		add	r2, sp, #72
 1985 0050 24A9     		add	r1, sp, #144
 1986 0052 1BA8     		add	r0, sp, #108
 1987 0054 FFF7FEFF 		bl	decNumber2Fraction
 1988              	.LVL209:
1710:src/display.c **** 	dn_compare(&t, &t, &w);
 1989              		.loc 1 1710 2 view .LVU591
 1990 0058 24AA     		add	r2, sp, #144
 1991 005a 1BA9     		add	r1, sp, #108
 1992 005c 2DA8     		add	r0, sp, #180
 1993 005e FFF7FEFF 		bl	dn_divide
 1994              	.LVL210:
1711:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 1995              		.loc 1 1711 2 view .LVU592
 1996 0062 2DA9     		add	r1, sp, #180
 1997 0064 12AA     		add	r2, sp, #72
 1998 0066 0846     		mov	r0, r1
 1999 0068 FFF7FEFF 		bl	dn_compare
 2000              	.LVL211:
1712:src/display.c **** 
 2001              		.loc 1 1712 2 view .LVU593
 2002 006c 09A9     		add	r1, sp, #36
 2003 006e 12A8     		add	r0, sp, #72
 2004 0070 FFF7FEFF 		bl	decNumberTrunc
 2005              	.LVL212:
1714:src/display.c **** 	  dn_inc(&w);
 2006              		.loc 1 1714 2 view .LVU594
1714:src/display.c **** 	  dn_inc(&w);
 2007              		.loc 1 1714 6 is_stmt 0 view .LVU595
 2008 0074 24A9     		add	r1, sp, #144
 2009 0076 1BA8     		add	r0, sp, #108
 2010 0078 FFF7FEFF 		bl	dn_eq
 2011              	.LVL213:
1714:src/display.c **** 	  dn_inc(&w);
 2012              		.loc 1 1714 5 view .LVU596
 2013 007c 0028     		cmp	r0, #0
 2014 007e 70D1     		bne	.L206
 2015              	.L180:
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2016              		.loc 1 1719 2 is_stmt 1 view .LVU597
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2017              		.loc 1 1719 6 is_stmt 0 view .LVU598
 2018 0080 474B     		ldr	r3, .L209+8
 2019 0082 1B68     		ldr	r3, [r3]
 2020 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2021              		.loc 1 1719 5 view .LVU599
 2022 0088 DB06     		lsls	r3, r3, #27
 2023 008a 55D4     		bmi	.L181
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2024              		.loc 1 1720 4 is_stmt 1 view .LVU600
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2025              		.loc 1 1720 9 is_stmt 0 view .LVU601
 2026 008c 12A8     		add	r0, sp, #72
ARM GAS  /tmp/ccZdZ92R.s 			page 76


 2027 008e FFF7FEFF 		bl	dn_eq0
 2028              	.LVL214:
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2029              		.loc 1 1720 7 view .LVU602
 2030 0092 0028     		cmp	r0, #0
 2031 0094 6CD0     		beq	.L207
1691:src/display.c **** 	int j;
 2032              		.loc 1 1691 17 view .LVU603
 2033 0096 01AE     		add	r6, sp, #4
 2034              	.LVL215:
1691:src/display.c **** 	int j;
 2035              		.loc 1 1691 17 view .LVU604
 2036 0098 3546     		mov	r5, r6
 2037              	.L182:
 2038              	.LVL216:
1728:src/display.c **** 	*p++ = '/';
 2039              		.loc 1 1728 2 is_stmt 1 view .LVU605
1728:src/display.c **** 	*p++ = '/';
 2040              		.loc 1 1728 17 is_stmt 0 view .LVU606
 2041 009a 1BA8     		add	r0, sp, #108
 2042 009c FFF7FEFF 		bl	dn_to_int
 2043              	.LVL217:
 2044 00a0 0146     		mov	r1, r0
1728:src/display.c **** 	*p++ = '/';
 2045              		.loc 1 1728 6 view .LVU607
 2046 00a2 2846     		mov	r0, r5
 2047 00a4 FFF7FEFF 		bl	num_arg
 2048              	.LVL218:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2049              		.loc 1 1729 2 is_stmt 1 view .LVU608
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2050              		.loc 1 1729 4 is_stmt 0 view .LVU609
 2051 00a8 0546     		mov	r5, r0
 2052              	.LVL219:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2053              		.loc 1 1729 7 view .LVU610
 2054 00aa 2F23     		movs	r3, #47
 2055 00ac 05F8013B 		strb	r3, [r5], #1
 2056              	.LVL220:
1730:src/display.c **** 	*p = '\0';
 2057              		.loc 1 1730 2 is_stmt 1 view .LVU611
1730:src/display.c **** 	*p = '\0';
 2058              		.loc 1 1730 17 is_stmt 0 view .LVU612
 2059 00b0 24A8     		add	r0, sp, #144
 2060 00b2 FFF7FEFF 		bl	dn_to_int
 2061              	.LVL221:
 2062 00b6 0146     		mov	r1, r0
1730:src/display.c **** 	*p = '\0';
 2063              		.loc 1 1730 6 view .LVU613
 2064 00b8 2846     		mov	r0, r5
 2065 00ba FFF7FEFF 		bl	num_arg
 2066              	.LVL222:
1731:src/display.c **** 	if ((p - 12) > buf) {
 2067              		.loc 1 1731 2 is_stmt 1 view .LVU614
1731:src/display.c **** 	if ((p - 12) > buf) {
 2068              		.loc 1 1731 5 is_stmt 0 view .LVU615
 2069 00be 0546     		mov	r5, r0
ARM GAS  /tmp/ccZdZ92R.s 			page 77


 2070 00c0 0023     		movs	r3, #0
 2071 00c2 05F80C39 		strb	r3, [r5], #-12
1732:src/display.c **** 	  p -= 12;
 2072              		.loc 1 1732 2 is_stmt 1 view .LVU616
1732:src/display.c **** 	  p -= 12;
 2073              		.loc 1 1732 5 is_stmt 0 view .LVU617
 2074 00c6 B542     		cmp	r5, r6
 2075 00c8 32D8     		bhi	.L183
 2076 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2077              	.LVL223:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2078              		.loc 1 1736 12 is_stmt 1 view .LVU618
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2079              		.loc 1 1736 2 is_stmt 0 view .LVU619
 2080 00ce 51B1     		cbz	r1, .L185
1735:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2081              		.loc 1 1735 11 view .LVU620
 2082 00d0 3546     		mov	r5, r6
 2083              	.LVL224:
 2084              	.L188:
1737:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2085              		.loc 1 1737 4 is_stmt 1 view .LVU621
 2086              	.LBB221:
 2087              	.LBI221:
 407:src/display.c ****   if (res) *res++ = ch;
 2088              		.loc 1 407 14 view .LVU622
 2089              	.LBB222:
 408:src/display.c ****   else	set_dig(base, ch);
 2090              		.loc 1 408 3 view .LVU623
 408:src/display.c ****   else	set_dig(base, ch);
 2091              		.loc 1 408 12 view .LVU624
 408:src/display.c ****   else	set_dig(base, ch);
 2092              		.loc 1 408 16 is_stmt 0 view .LVU625
 2093 00d2 2346     		mov	r3, r4
 2094              	.LVL225:
 408:src/display.c ****   else	set_dig(base, ch);
 2095              		.loc 1 408 6 view .LVU626
 2096 00d4 34B3     		cbz	r4, .L186
 2097              	.LVL226:
 408:src/display.c ****   else	set_dig(base, ch);
 2098              		.loc 1 408 19 view .LVU627
 2099 00d6 03F8011B 		strb	r1, [r3], #1
 2100              	.LVL227:
 408:src/display.c ****   else	set_dig(base, ch);
 2101              		.loc 1 408 16 view .LVU628
 2102 00da 1C46     		mov	r4, r3
 2103              	.LVL228:
 2104              	.L187:
 410:src/display.c **** }
 2105              		.loc 1 410 3 is_stmt 1 view .LVU629
 410:src/display.c **** }
 2106              		.loc 1 410 3 is_stmt 0 view .LVU630
 2107              	.LBE222:
 2108              	.LBE221:
1738:src/display.c **** 	}
 2109              		.loc 1 1738 4 is_stmt 1 view .LVU631
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
ARM GAS  /tmp/ccZdZ92R.s 			page 78


 2110              		.loc 1 1736 12 is_stmt 0 view .LVU632
 2111 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2112              	.LVL229:
1738:src/display.c **** 	}
 2113              		.loc 1 1738 6 view .LVU633
 2114 00e0 0937     		adds	r7, r7, #9
 2115              	.LVL230:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2116              		.loc 1 1736 24 is_stmt 1 view .LVU634
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2117              		.loc 1 1736 12 view .LVU635
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2118              		.loc 1 1736 2 is_stmt 0 view .LVU636
 2119 00e2 0029     		cmp	r1, #0
 2120 00e4 F5D1     		bne	.L188
 2121              	.LVL231:
 2122              	.L185:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2123              		.loc 1 1741 2 is_stmt 1 view .LVU637
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2124              		.loc 1 1741 6 is_stmt 0 view .LVU638
 2125 00e6 2DA8     		add	r0, sp, #180
 2126 00e8 FFF7FEFF 		bl	dn_eq0
 2127              	.LVL232:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2128              		.loc 1 1741 5 view .LVU639
 2129 00ec F0B9     		cbnz	r0, .L196
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2130              		.loc 1 1743 7 is_stmt 1 view .LVU640
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2131              		.loc 1 1743 10 is_stmt 0 view .LVU641
 2132 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1746:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2133              		.loc 1 1746 6 view .LVU642
 2134 00f2 2C4D     		ldr	r5, .L209+12
 2135 00f4 2C4B     		ldr	r3, .L209+16
 2136 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2137 00fa 38BF     		it	cc
 2138 00fc 1D46     		movcc	r5, r3
 2139              	.L189:
 2140              	.LVL233:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2141              		.loc 1 1747 26 is_stmt 1 view .LVU643
 2142              	.LBB225:
 2143              	.LBB223:
 408:src/display.c ****   else	set_dig(base, ch);
 2144              		.loc 1 408 16 is_stmt 0 view .LVU644
 2145 00fe 6C26     		movs	r6, #108
 2146 0100 2021     		movs	r1, #32
 2147 0102 08E0     		b	.L192
 2148              	.LVL234:
 2149              	.L208:
 408:src/display.c ****   else	set_dig(base, ch);
 2150              		.loc 1 408 16 view .LVU645
 2151              	.LBE223:
 2152              	.LBE225:
 2153              	.LBB226:
ARM GAS  /tmp/ccZdZ92R.s 			page 79


 2154              	.LBB227:
 408:src/display.c ****   else	set_dig(base, ch);
 2155              		.loc 1 408 19 view .LVU646
 2156 0104 03F8011B 		strb	r1, [r3], #1
 2157              	.LVL235:
 408:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 408 16 view .LVU647
 2159 0108 1C46     		mov	r4, r3
 2160              	.LVL236:
 2161              	.L191:
 410:src/display.c **** }
 2162              		.loc 1 410 3 is_stmt 1 view .LVU648
 410:src/display.c **** }
 2163              		.loc 1 410 3 is_stmt 0 view .LVU649
 2164              	.LBE227:
 2165              	.LBE226:
1749:src/display.c **** 	}
 2166              		.loc 1 1749 4 is_stmt 1 view .LVU650
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2167              		.loc 1 1747 26 is_stmt 0 view .LVU651
 2168 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2169              	.LVL237:
1749:src/display.c **** 	}
 2170              		.loc 1 1749 6 view .LVU652
 2171 010e 0736     		adds	r6, r6, #7
 2172              	.LVL238:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2173              		.loc 1 1747 38 is_stmt 1 view .LVU653
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2174              		.loc 1 1747 26 view .LVU654
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2175              		.loc 1 1747 2 is_stmt 0 view .LVU655
 2176 0110 0029     		cmp	r1, #0
 2177 0112 3FF47DAF 		beq	.L193
 2178              	.LVL239:
 2179              	.L192:
1748:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2180              		.loc 1 1748 4 is_stmt 1 view .LVU656
 2181              	.LBB229:
 2182              	.LBI226:
 407:src/display.c ****   if (res) *res++ = ch;
 2183              		.loc 1 407 14 view .LVU657
 2184              	.LBB228:
 408:src/display.c ****   else	set_dig(base, ch);
 2185              		.loc 1 408 3 view .LVU658
 408:src/display.c ****   else	set_dig(base, ch);
 2186              		.loc 1 408 12 view .LVU659
 408:src/display.c ****   else	set_dig(base, ch);
 2187              		.loc 1 408 16 is_stmt 0 view .LVU660
 2188 0116 2346     		mov	r3, r4
 2189              	.LVL240:
 408:src/display.c ****   else	set_dig(base, ch);
 2190              		.loc 1 408 6 view .LVU661
 2191 0118 002C     		cmp	r4, #0
 2192 011a F3D1     		bne	.L208
 2193              	.LVL241:
 409:src/display.c ****   return res;
ARM GAS  /tmp/ccZdZ92R.s 			page 80


 2194              		.loc 1 409 8 is_stmt 1 view .LVU662
 2195 011c 3046     		mov	r0, r6
 2196 011e FFF7FEFF 		bl	set_dig
 2197              	.LVL242:
 409:src/display.c ****   return res;
 2198              		.loc 1 409 8 is_stmt 0 view .LVU663
 2199 0122 F2E7     		b	.L191
 2200              	.LVL243:
 2201              	.L186:
 409:src/display.c ****   return res;
 2202              		.loc 1 409 8 view .LVU664
 2203              	.LBE228:
 2204              	.LBE229:
 2205              	.LBB230:
 2206              	.LBB224:
 409:src/display.c ****   return res;
 2207              		.loc 1 409 8 is_stmt 1 view .LVU665
 2208 0124 3846     		mov	r0, r7
 2209 0126 FFF7FEFF 		bl	set_dig
 2210              	.LVL244:
 409:src/display.c ****   return res;
 2211              		.loc 1 409 8 is_stmt 0 view .LVU666
 2212 012a D7E7     		b	.L187
 2213              	.LVL245:
 2214              	.L196:
 409:src/display.c ****   return res;
 2215              		.loc 1 409 8 view .LVU667
 2216              	.LBE224:
 2217              	.LBE230:
1742:src/display.c **** 	else if (decNumberIsNegative(&t))
 2218              		.loc 1 1742 6 view .LVU668
 2219 012c 1F4D     		ldr	r5, .L209+20
 2220 012e E6E7     		b	.L189
 2221              	.LVL246:
 2222              	.L183:
1733:src/display.c **** 	  *p = '<';
 2223              		.loc 1 1733 4 is_stmt 1 view .LVU669
1734:src/display.c **** 	} else	p = buf;
 2224              		.loc 1 1734 4 view .LVU670
1734:src/display.c **** 	} else	p = buf;
 2225              		.loc 1 1734 7 is_stmt 0 view .LVU671
 2226 0130 3C21     		movs	r1, #60
 2227 0132 00F80C1C 		strb	r1, [r0, #-12]
 2228              	.LVL247:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2229              		.loc 1 1736 12 is_stmt 1 view .LVU672
 2230 0136 CCE7     		b	.L188
 2231              	.LVL248:
 2232              	.L181:
1725:src/display.c **** 	  dn_add(&n, &n, &x);
 2233              		.loc 1 1725 4 view .LVU673
 2234 0138 12A9     		add	r1, sp, #72
 2235 013a 24AA     		add	r2, sp, #144
 2236 013c 09A8     		add	r0, sp, #36
 2237 013e FFF7FEFF 		bl	dn_multiply
 2238              	.LVL249:
1726:src/display.c **** 	}
ARM GAS  /tmp/ccZdZ92R.s 			page 81


 2239              		.loc 1 1726 4 view .LVU674
 2240 0142 1BA9     		add	r1, sp, #108
 2241 0144 09AA     		add	r2, sp, #36
 2242 0146 0846     		mov	r0, r1
1691:src/display.c **** 	int j;
 2243              		.loc 1 1691 17 is_stmt 0 view .LVU675
 2244 0148 01AE     		add	r6, sp, #4
 2245              	.LVL250:
1726:src/display.c **** 	}
 2246              		.loc 1 1726 4 view .LVU676
 2247 014a FFF7FEFF 		bl	dn_add
 2248              	.LVL251:
1691:src/display.c **** 	int j;
 2249              		.loc 1 1691 17 view .LVU677
 2250 014e 3546     		mov	r5, r6
 2251 0150 A3E7     		b	.L182
 2252              	.LVL252:
 2253              	.L205:
1702:src/display.c **** 	    *res++ += '-';
 2254              		.loc 1 1702 4 is_stmt 1 view .LVU678
1702:src/display.c **** 	    *res++ += '-';
 2255              		.loc 1 1702 7 is_stmt 0 view .LVU679
 2256 0152 D4B1     		cbz	r4, .L179
1703:src/display.c **** 	  else
 2257              		.loc 1 1703 6 is_stmt 1 view .LVU680
1703:src/display.c **** 	  else
 2258              		.loc 1 1703 10 is_stmt 0 view .LVU681
 2259 0154 2346     		mov	r3, r4
 2260              	.LVL253:
1703:src/display.c **** 	  else
 2261              		.loc 1 1703 13 view .LVU682
 2262 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2263              	.LVL254:
1703:src/display.c **** 	  else
 2264              		.loc 1 1703 13 view .LVU683
 2265 015a 2D32     		adds	r2, r2, #45
 2266 015c 2270     		strb	r2, [r4]
1703:src/display.c **** 	  else
 2267              		.loc 1 1703 10 view .LVU684
 2268 015e 1C46     		mov	r4, r3
 2269              	.LVL255:
1703:src/display.c **** 	  else
 2270              		.loc 1 1703 10 view .LVU685
 2271 0160 71E7     		b	.L178
 2272              	.LVL256:
 2273              	.L206:
1715:src/display.c **** 	  decNumberZero(&n);
 2274              		.loc 1 1715 4 is_stmt 1 view .LVU686
 2275 0162 12A8     		add	r0, sp, #72
 2276 0164 FFF7FEFF 		bl	dn_inc
 2277              	.LVL257:
1716:src/display.c **** 	}
 2278              		.loc 1 1716 4 view .LVU687
 2279 0168 1BA8     		add	r0, sp, #108
 2280 016a FFF7FEFF 		bl	decNumberZero
 2281              	.LVL258:
 2282 016e 87E7     		b	.L180
ARM GAS  /tmp/ccZdZ92R.s 			page 82


 2283              	.L207:
1721:src/display.c **** 	    *p++ = ' ';
 2284              		.loc 1 1721 6 view .LVU688
1721:src/display.c **** 	    *p++ = ' ';
 2285              		.loc 1 1721 21 is_stmt 0 view .LVU689
 2286 0170 12A8     		add	r0, sp, #72
 2287 0172 FFF7FEFF 		bl	dn_to_int
 2288              	.LVL259:
1721:src/display.c **** 	    *p++ = ' ';
 2289              		.loc 1 1721 10 view .LVU690
 2290 0176 01AE     		add	r6, sp, #4
 2291              	.LVL260:
1721:src/display.c **** 	    *p++ = ' ';
 2292              		.loc 1 1721 21 view .LVU691
 2293 0178 0146     		mov	r1, r0
1721:src/display.c **** 	    *p++ = ' ';
 2294              		.loc 1 1721 10 view .LVU692
 2295 017a 3046     		mov	r0, r6
 2296 017c FFF7FEFF 		bl	num_arg
 2297              	.LVL261:
1722:src/display.c **** 	  }
 2298              		.loc 1 1722 6 is_stmt 1 view .LVU693
1722:src/display.c **** 	  }
 2299              		.loc 1 1722 8 is_stmt 0 view .LVU694
 2300 0180 0546     		mov	r5, r0
 2301              	.LVL262:
1722:src/display.c **** 	  }
 2302              		.loc 1 1722 11 view .LVU695
 2303 0182 2023     		movs	r3, #32
 2304 0184 05F8013B 		strb	r3, [r5], #1
 2305              	.LVL263:
1722:src/display.c **** 	  }
 2306              		.loc 1 1722 11 view .LVU696
 2307 0188 87E7     		b	.L182
 2308              	.LVL264:
 2309              	.L179:
1705:src/display.c **** 	}
 2310              		.loc 1 1705 6 is_stmt 1 view .LVU697
 2311              	.LBB231:
 2312              	.LBI231:
 296:src/display.c **** {
 2313              		.loc 1 296 13 view .LVU698
 2314              	.LBB232:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2315              		.loc 1 298 3 view .LVU699
 298:src/display.c ****   set_dot(MANT_SIGN);
 2316              		.loc 1 298 25 is_stmt 0 view .LVU700
 2317 018a 094B     		ldr	r3, .L209+24
 2318 018c 2D22     		movs	r2, #45
 299:src/display.c **** }
 2319              		.loc 1 299 3 view .LVU701
 2320 018e 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2321              		.loc 1 298 25 view .LVU702
 2322 0190 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2323              		.loc 1 299 3 is_stmt 1 view .LVU703
ARM GAS  /tmp/ccZdZ92R.s 			page 83


 2324 0192 FFF7FEFF 		bl	set_dot
 2325              	.LVL265:
 300:src/display.c **** 
 2326              		.loc 1 300 1 is_stmt 0 view .LVU704
 2327 0196 56E7     		b	.L178
 2328              	.L210:
 2329              		.align	2
 2330              	.L209:
 2331 0198 00000000 		.word	const_100000
 2332 019c 00000000 		.word	const_0_0001
 2333 01a0 00000000 		.word	main_ram
 2334 01a4 00000000 		.word	.LANCHOR8
 2335 01a8 00000000 		.word	.LANCHOR10
 2336 01ac 00000000 		.word	.LANCHOR9
 2337 01b0 00000000 		.word	LastDisplayedNumber
 2338              	.LBE232:
 2339              	.LBE231:
 2340              	.LBE220:
 2341              	.LBE219:
 2342              		.cfi_endproc
 2343              	.LFE23:
 2345              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2346              		.align	2
 2347              	.LC2:
 2348 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2348      36376F39 
 2348      44313233 
 2348      34356800 
 2349              		.section	.text.carry_overflow,"ax",%progbits
 2350              		.align	1
 2351              		.p2align 2,,3
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2355              		.fpu fpv4-sp-d16
 2357              	carry_overflow:
 2358              	.LFB15:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2359              		.loc 1 562 38 is_stmt 1 view -0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 0
 2362              		@ frame_needed = 0, uses_anonymous_args = 0
 563:src/display.c ****       int c;
 2363              		.loc 1 563 7 view .LVU706
 2364              	.LVL266:
 564:src/display.c ****       unsigned int b;
 2365              		.loc 1 564 7 view .LVU707
 565:src/display.c **** 
 2366              		.loc 1 565 7 view .LVU708
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2367              		.loc 1 568 7 view .LVU709
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2368              		.loc 1 562 38 is_stmt 0 view .LVU710
 2369 0000 10B5     		push	{r4, lr}
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 4, -8
 2372              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZdZ92R.s 			page 84


 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2373              		.loc 1 568 21 view .LVU711
 2374 0002 1B4B     		ldr	r3, .L224
 2375 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2376 0006 023B     		subs	r3, r3, #2
 2377 0008 DBB2     		uxtb	r3, r3
 2378 000a 032B     		cmp	r3, #3
 2379 000c 14D8     		bhi	.L212
 2380 000e 194A     		ldr	r2, .L224+4
 2381 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2382              	.LVL267:
 577:src/display.c **** 	SET_EXP_SIGN;
 2383              		.loc 1 577 7 is_stmt 1 view .LVU712
 577:src/display.c **** 	SET_EXP_SIGN;
 2384              		.loc 1 577 18 is_stmt 0 view .LVU713
 2385 0014 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2386              		.loc 1 577 10 view .LVU714
 2387 0018 042B     		cmp	r3, #4
 2388 001a 17D9     		bls	.L221
 2389              	.L214:
 579:src/display.c ****       set_dig(base, c);
 2390              		.loc 1 579 7 is_stmt 1 view .LVU715
 2391              	.LVL268:
 580:src/display.c **** 
 2392              		.loc 1 580 7 view .LVU716
 579:src/display.c ****       set_dig(base, c);
 2393              		.loc 1 579 28 is_stmt 0 view .LVU717
 2394 001c 164B     		ldr	r3, .L224+8
 2395 001e 1C44     		add	r4, r4, r3
 2396              	.LVL269:
 580:src/display.c **** 
 2397              		.loc 1 580 7 view .LVU718
 2398 0020 6C20     		movs	r0, #108
 2399 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2400 0026 FFF7FEFF 		bl	set_dig
 2401              	.LVL270:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2402              		.loc 1 583 7 is_stmt 1 view .LVU719
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2403              		.loc 1 583 11 is_stmt 0 view .LVU720
 2404 002a FFF7FEFF 		bl	get_carry
 2405              	.LVL271:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2406              		.loc 1 583 10 view .LVU721
 2407 002e D0B9     		cbnz	r0, .L222
 2408              	.L215:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2409              		.loc 1 585 7 is_stmt 1 view .LVU722
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2410              		.loc 1 585 11 is_stmt 0 view .LVU723
 2411 0030 FFF7FEFF 		bl	get_overflow
 2412              	.LVL272:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2413              		.loc 1 585 10 view .LVU724
 2414 0034 88B9     		cbnz	r0, .L223
 587:src/display.c **** 
ARM GAS  /tmp/ccZdZ92R.s 			page 85


 2415              		.loc 1 587 5 view .LVU725
 2416 0036 10BD     		pop	{r4, pc}
 2417              	.LVL273:
 2418              	.L212:
 573:src/display.c ****       }
 2419              		.loc 1 573 16 is_stmt 1 view .LVU726
 573:src/display.c ****       }
 2420              		.loc 1 573 26 is_stmt 0 view .LVU727
 2421 0038 104B     		ldr	r3, .L224+12
 2422 003a 1B68     		ldr	r3, [r3]
 2423 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2424 0040 2409     		lsrs	r4, r4, #4
 573:src/display.c ****       }
 2425              		.loc 1 573 35 view .LVU728
 2426 0042 0134     		adds	r4, r4, #1
 2427              	.LVL274:
 573:src/display.c ****       }
 2428              		.loc 1 573 39 is_stmt 1 view .LVU729
 577:src/display.c **** 	SET_EXP_SIGN;
 2429              		.loc 1 577 7 view .LVU730
 577:src/display.c **** 	SET_EXP_SIGN;
 2430              		.loc 1 577 18 is_stmt 0 view .LVU731
 2431 0044 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2432              		.loc 1 577 10 view .LVU732
 2433 0048 042B     		cmp	r3, #4
 2434 004a E7D8     		bhi	.L214
 2435              	.L221:
 578:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2436              		.loc 1 578 2 is_stmt 1 view .LVU733
 2437              	.LBB239:
 2438              	.LBI239:
 308:src/display.c **** {
 2439              		.loc 1 308 13 view .LVU734
 2440              	.LBB240:
 310:src/display.c ****   set_dot(EXP_SIGN);
 2441              		.loc 1 310 3 view .LVU735
 310:src/display.c ****   set_dot(EXP_SIGN);
 2442              		.loc 1 310 27 is_stmt 0 view .LVU736
 2443 004c 0C4B     		ldr	r3, .L224+16
 2444 004e 2D22     		movs	r2, #45
 311:src/display.c **** }
 2445              		.loc 1 311 3 view .LVU737
 2446 0050 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 2447              		.loc 1 310 27 view .LVU738
 2448 0052 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 2449              		.loc 1 311 3 is_stmt 1 view .LVU739
 2450 0054 FFF7FEFF 		bl	set_dot
 2451              	.LVL275:
 312:src/display.c **** 
 2452              		.loc 1 312 1 is_stmt 0 view .LVU740
 2453 0058 E0E7     		b	.L214
 2454              	.LVL276:
 2455              	.L223:
 312:src/display.c **** 
ARM GAS  /tmp/ccZdZ92R.s 			page 86


 2456              		.loc 1 312 1 view .LVU741
 2457              	.LBE240:
 2458              	.LBE239:
 2459              	.LBB241:
 2460              	.LBI241:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2461              		.loc 1 562 17 is_stmt 1 view .LVU742
 2462              	.LBB242:
 586:src/display.c ****     }
 2463              		.loc 1 586 2 view .LVU743
 2464              	.LBE242:
 2465              	.LBE241:
 587:src/display.c **** 
 2466              		.loc 1 587 5 is_stmt 0 view .LVU744
 2467 005a BDE81040 		pop	{r4, lr}
 2468              		.cfi_remember_state
 2469              		.cfi_restore 14
 2470              		.cfi_restore 4
 2471              		.cfi_def_cfa_offset 0
 2472              	.LVL277:
 2473              	.LBB244:
 2474              	.LBB243:
 586:src/display.c ****     }
 2475              		.loc 1 586 2 view .LVU745
 2476 005e 6F21     		movs	r1, #111
 2477 0060 7A20     		movs	r0, #122
 2478 0062 FFF7FEBF 		b	set_dig
 2479              	.LVL278:
 2480              	.L222:
 2481              		.cfi_restore_state
 586:src/display.c ****     }
 2482              		.loc 1 586 2 view .LVU746
 2483              	.LBE243:
 2484              	.LBE244:
 584:src/display.c ****       if (get_overflow())
 2485              		.loc 1 584 2 is_stmt 1 view .LVU747
 2486 0066 6321     		movs	r1, #99
 2487 0068 7320     		movs	r0, #115
 2488 006a FFF7FEFF 		bl	set_dig
 2489              	.LVL279:
 2490 006e DFE7     		b	.L215
 2491              	.L225:
 2492              		.align	2
 2493              	.L224:
 2494 0070 00000000 		.word	StateWhileOn
 2495 0074 00000000 		.word	.LANCHOR11
 2496 0078 00000000 		.word	.LC2
 2497 007c 00000000 		.word	main_ram
 2498 0080 00000000 		.word	LastDisplayedExponent
 2499              		.cfi_endproc
 2500              	.LFE15:
 2502              		.global	__aeabi_uldivmod
 2503              		.section	.text.set_int_x,"ax",%progbits
 2504              		.align	1
 2505              		.p2align 2,,3
 2506              		.syntax unified
 2507              		.thumb
ARM GAS  /tmp/ccZdZ92R.s 			page 87


 2508              		.thumb_func
 2509              		.fpu fpv4-sp-d16
 2511              	set_int_x:
 2512              	.LVL280:
 2513              	.LFB18:
1402:src/display.c **** 	const int ws = word_size();
 2514              		.loc 1 1402 67 view -0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 80
 2517              		@ frame_needed = 0, uses_anonymous_args = 0
1402:src/display.c **** 	const int ws = word_size();
 2518              		.loc 1 1402 67 is_stmt 0 view .LVU749
 2519 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2520              		.cfi_def_cfa_offset 36
 2521              		.cfi_offset 4, -36
 2522              		.cfi_offset 5, -32
 2523              		.cfi_offset 6, -28
 2524              		.cfi_offset 7, -24
 2525              		.cfi_offset 8, -20
 2526              		.cfi_offset 9, -16
 2527              		.cfi_offset 10, -12
 2528              		.cfi_offset 11, -8
 2529              		.cfi_offset 14, -4
 2530 0004 95B0     		sub	sp, sp, #84
 2531              		.cfi_def_cfa_offset 120
1402:src/display.c **** 	const int ws = word_size();
 2532              		.loc 1 1402 67 view .LVU750
 2533 0006 0646     		mov	r6, r0
 2534 0008 0092     		str	r2, [sp]
 2535 000a 0F46     		mov	r7, r1
1403:src/display.c **** 	unsigned int b;
 2536              		.loc 1 1403 2 is_stmt 1 view .LVU751
1403:src/display.c **** 	unsigned int b;
 2537              		.loc 1 1403 17 is_stmt 0 view .LVU752
 2538 000c FFF7FEFF 		bl	word_size
 2539              	.LVL281:
1403:src/display.c **** 	unsigned int b;
 2540              		.loc 1 1403 17 view .LVU753
 2541 0010 B94B     		ldr	r3, .L318
 2542 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2543 0014 023B     		subs	r3, r3, #2
 2544 0016 DBB2     		uxtb	r3, r3
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2545              		.loc 1 1409 6 view .LVU754
 2546 0018 0022     		movs	r2, #0
 2547 001a 032B     		cmp	r3, #3
1403:src/display.c **** 	unsigned int b;
 2548              		.loc 1 1403 17 view .LVU755
 2549 001c 8346     		mov	fp, r0
 2550              	.LVL282:
1404:src/display.c **** 	long long int vs = value;
 2551              		.loc 1 1404 2 is_stmt 1 view .LVU756
1405:src/display.c **** 	unsigned long long int v;
 2552              		.loc 1 1405 2 view .LVU757
1406:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 2553              		.loc 1 1406 2 view .LVU758
1407:src/display.c **** 	int i, j, k;
ARM GAS  /tmp/ccZdZ92R.s 			page 88


 2554              		.loc 1 1407 2 view .LVU759
1408:src/display.c **** 	int sign = 0;
 2555              		.loc 1 1408 2 view .LVU760
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2556              		.loc 1 1409 2 view .LVU761
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2557              		.loc 1 1409 6 is_stmt 0 view .LVU762
 2558 001e 0292     		str	r2, [sp, #8]
1410:src/display.c **** 
 2559              		.loc 1 1410 2 is_stmt 1 view .LVU763
 2560              	.LVL283:
1412:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2561              		.loc 1 1412 2 view .LVU764
 2562 0020 00F24281 		bhi	.L227
 2563 0024 B54A     		ldr	r2, .L318+4
 2564 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 2565              	.LVL284:
1420:src/display.c **** 	  IntMaxWindow = 0;
 2566              		.loc 1 1420 2 view .LVU765
1420:src/display.c **** 	  IntMaxWindow = 0;
 2567              		.loc 1 1420 5 is_stmt 0 view .LVU766
 2568 002a 009B     		ldr	r3, [sp]
 2569 002c 002B     		cmp	r3, #0
 2570 002e 00F04281 		beq	.L309
 2571              	.LVL285:
 2572              	.L229:
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2573              		.loc 1 1425 2 is_stmt 1 view .LVU767
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2574              		.loc 1 1425 24 is_stmt 0 view .LVU768
 2575 0032 6B1E     		subs	r3, r5, #1
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2576              		.loc 1 1425 30 view .LVU769
 2577 0034 47F67574 		movw	r4, #32629
 2578 0038 1C41     		asrs	r4, r4, r3
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2579              		.loc 1 1425 5 view .LVU770
 2580 003a 14F00104 		ands	r4, r4, #1
 2581 003e 40F0F280 		bne	.L310
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2582              		.loc 1 1442 4 is_stmt 1 view .LVU771
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2583              		.loc 1 1442 7 is_stmt 0 view .LVU772
 2584 0042 BBF13F0F 		cmp	fp, #63
 2585 0046 16DC     		bgt	.L240
 2586              	.LBB245:
1443:src/display.c **** 	    vs &= mask;
 2587              		.loc 1 1443 6 is_stmt 1 view .LVU773
1443:src/display.c **** 	    vs &= mask;
 2588              		.loc 1 1443 38 is_stmt 0 view .LVU774
 2589 0048 0121     		movs	r1, #1
 2590 004a ABF1200C 		sub	ip, fp, #32
 2591 004e CBF12000 		rsb	r0, fp, #32
 2592 0052 21FA00F0 		lsr	r0, r1, r0
 2593 0056 01FA0CF3 		lsl	r3, r1, ip
 2594 005a 01FA0BF2 		lsl	r2, r1, fp
 2595 005e 0343     		orrs	r3, r3, r0
ARM GAS  /tmp/ccZdZ92R.s 			page 89


 2596              	.LVL286:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2597              		.loc 1 1444 6 is_stmt 1 view .LVU775
1443:src/display.c **** 	    vs &= mask;
 2598              		.loc 1 1443 26 is_stmt 0 view .LVU776
 2599 0060 12F1FF30 		adds	r0, r2, #-1
 2600 0064 43F1FF31 		adc	r1, r3, #-1
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2601              		.loc 1 1444 9 view .LVU777
 2602 0068 3040     		ands	r0, r0, r6
 2603 006a 3940     		ands	r1, r1, r7
 2604              	.LVL287:
1445:src/display.c **** 	      vs |= ~mask;
 2605              		.loc 1 1445 9 view .LVU778
 2606 006c 0A2D     		cmp	r5, #10
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2607              		.loc 1 1444 9 view .LVU779
 2608 006e 0646     		mov	r6, r0
 2609              	.LVL288:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2610              		.loc 1 1444 9 view .LVU780
 2611 0070 0F46     		mov	r7, r1
1445:src/display.c **** 	      vs |= ~mask;
 2612              		.loc 1 1445 6 is_stmt 1 view .LVU781
1445:src/display.c **** 	      vs |= ~mask;
 2613              		.loc 1 1445 9 is_stmt 0 view .LVU782
 2614 0072 00F04D81 		beq	.L311
 2615              	.LVL289:
 2616              	.L240:
1445:src/display.c **** 	      vs |= ~mask;
 2617              		.loc 1 1445 9 view .LVU783
 2618              	.LBE245:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2619              		.loc 1 1449 4 is_stmt 1 view .LVU784
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2620              		.loc 1 1449 8 is_stmt 0 view .LVU785
 2621 0076 A24B     		ldr	r3, .L318+8
 2622 0078 1B68     		ldr	r3, [r3]
 2623 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2624              		.loc 1 1449 7 view .LVU786
 2625 007e 9807     		lsls	r0, r3, #30
 2626 0080 46D5     		bpl	.L271
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 2627              		.loc 1 1452 11 is_stmt 1 view .LVU787
 2628              	.LBB246:
1460:src/display.c **** 	    const unsigned int b1 = b >> 1;
 2629              		.loc 1 1460 6 view .LVU788
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2630              		.loc 1 1461 6 view .LVU789
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2631              		.loc 1 1461 25 is_stmt 0 view .LVU790
 2632 0082 6A08     		lsrs	r2, r5, #1
 2633              	.LVL290:
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 2634              		.loc 1 1462 6 is_stmt 1 view .LVU791
1462:src/display.c **** 	    v = (unsigned long long int)vs;
ARM GAS  /tmp/ccZdZ92R.s 			page 90


 2635              		.loc 1 1462 43 is_stmt 0 view .LVU792
 2636 0084 12F00A0F 		tst	r2, #10
 2637 0088 14BF     		ite	ne
 2638 008a 0123     		movne	r3, #1
 2639 008c 0023     		moveq	r3, #0
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 2640              		.loc 1 1462 70 view .LVU793
 2641 008e 12F00C0F 		tst	r2, #12
 2642 0092 18BF     		it	ne
 2643 0094 43F00203 		orrne	r3, r3, #2
 2644              	.LVL291:
 2645              	.L246:
1463:src/display.c **** 
 2646              		.loc 1 1463 6 is_stmt 1 discriminator 4 view .LVU794
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2647              		.loc 1 1465 14 is_stmt 0 discriminator 4 view .LVU795
 2648 0098 0BEB0308 		add	r8, fp, r3
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2649              		.loc 1 1465 27 discriminator 4 view .LVU796
 2650 009c 0133     		adds	r3, r3, #1
 2651              	.LVL292:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2652              		.loc 1 1465 21 discriminator 4 view .LVU797
 2653 009e B8FBF3F8 		udiv	r8, r8, r3
1466:src/display.c **** 	      const int r = v % b;
 2654              		.loc 1 1466 6 discriminator 4 view .LVU798
 2655 00a2 B8F1000F 		cmp	r8, #0
1463:src/display.c **** 
 2656              		.loc 1 1463 8 discriminator 4 view .LVU799
 2657 00a6 3046     		mov	r0, r6
 2658 00a8 3946     		mov	r1, r7
 2659              	.LVL293:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2660              		.loc 1 1465 6 is_stmt 1 discriminator 4 view .LVU800
1466:src/display.c **** 	      const int r = v % b;
 2661              		.loc 1 1466 6 discriminator 4 view .LVU801
1466:src/display.c **** 	      const int r = v % b;
 2662              		.loc 1 1466 16 discriminator 4 view .LVU802
1466:src/display.c **** 	      const int r = v % b;
 2663              		.loc 1 1466 6 is_stmt 0 discriminator 4 view .LVU803
 2664 00aa 40F38A81 		ble	.L272
 2665 00ae 03AC     		add	r4, sp, #12
 2666 00b0 DFF858B2 		ldr	fp, .L318+20
 2667              	.LVL294:
1466:src/display.c **** 	      const int r = v % b;
 2668              		.loc 1 1466 6 discriminator 4 view .LVU804
 2669 00b4 08EB0406 		add	r6, r8, r4
 2670              	.LVL295:
 2671              	.L247:
 2672              	.LBB247:
1467:src/display.c **** 	      v /= b;
 2673              		.loc 1 1467 8 is_stmt 1 discriminator 3 view .LVU805
 2674 00b8 2A46     		mov	r2, r5
 2675 00ba 0023     		movs	r3, #0
 2676 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 2677              	.LVL296:
1468:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/ccZdZ92R.s 			page 91


 2678              		.loc 1 1468 8 discriminator 3 view .LVU806
1469:src/display.c **** 	    }
 2679              		.loc 1 1469 15 is_stmt 0 discriminator 3 view .LVU807
 2680 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 2681 00c4 04F8013B 		strb	r3, [r4], #1
 2682              	.LVL297:
1469:src/display.c **** 	    }
 2683              		.loc 1 1469 8 is_stmt 1 discriminator 3 view .LVU808
 2684              	.LBE247:
1466:src/display.c **** 	      const int r = v % b;
 2685              		.loc 1 1466 21 discriminator 3 view .LVU809
1466:src/display.c **** 	      const int r = v % b;
 2686              		.loc 1 1466 16 discriminator 3 view .LVU810
1466:src/display.c **** 	      const int r = v % b;
 2687              		.loc 1 1466 6 is_stmt 0 discriminator 3 view .LVU811
 2688 00c8 B442     		cmp	r4, r6
 2689 00ca F5D1     		bne	.L247
 2690 00cc 08F1FF33 		add	r3, r8, #-1
1466:src/display.c **** 	      const int r = v % b;
 2691              		.loc 1 1466 6 view .LVU812
 2692 00d0 4446     		mov	r4, r8
 2693              	.LVL298:
 2694              	.L239:
1466:src/display.c **** 	      const int r = v % b;
 2695              		.loc 1 1466 6 view .LVU813
 2696              	.LBE246:
1479:src/display.c **** 	if (res) {
 2697              		.loc 1 1479 2 is_stmt 1 view .LVU814
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2698              		.loc 1 1480 2 view .LVU815
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2699              		.loc 1 1480 5 is_stmt 0 view .LVU816
 2700 00d2 0099     		ldr	r1, [sp]
 2701 00d4 0029     		cmp	r1, #0
 2702 00d6 41D0     		beq	.L248
 2703              	.L312:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2704              		.loc 1 1481 4 is_stmt 1 view .LVU817
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2705              		.loc 1 1481 7 is_stmt 0 view .LVU818
 2706 00d8 029A     		ldr	r2, [sp, #8]
 2707 00da 2AB1     		cbz	r2, .L249
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2708              		.loc 1 1481 14 is_stmt 1 discriminator 1 view .LVU819
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2709              		.loc 1 1481 18 is_stmt 0 discriminator 1 view .LVU820
 2710 00dc 8A46     		mov	r10, r1
 2711              	.LVL299:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2712              		.loc 1 1481 21 discriminator 1 view .LVU821
 2713 00de 2D22     		movs	r2, #45
 2714 00e0 0AF8012B 		strb	r2, [r10], #1
 2715              	.LVL300:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2716              		.loc 1 1481 18 discriminator 1 view .LVU822
 2717 00e4 CDF800A0 		str	r10, [sp]
 2718              	.LVL301:
ARM GAS  /tmp/ccZdZ92R.s 			page 92


 2719              	.L249:
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2720              		.loc 1 1482 4 is_stmt 1 view .LVU823
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2721              		.loc 1 1482 7 is_stmt 0 view .LVU824
 2722 00e8 072C     		cmp	r4, #7
 2723 00ea 00F3EA80 		bgt	.L250
1489:src/display.c **** 	      *res++ = buf[i];
 2724              		.loc 1 1489 12 is_stmt 1 view .LVU825
 2725              	.LVL302:
1489:src/display.c **** 	      *res++ = buf[i];
 2726              		.loc 1 1489 12 is_stmt 0 view .LVU826
 2727 00ee 591C     		adds	r1, r3, #1
 2728 00f0 0BD0     		beq	.L226
 2729 00f2 0099     		ldr	r1, [sp]
 2730 00f4 03AA     		add	r2, sp, #12
 2731 00f6 1A44     		add	r2, r2, r3
 2732 00f8 01F1FF3A 		add	r10, r1, #-1
 2733 00fc 0B44     		add	r3, r3, r1
 2734              	.LVL303:
 2735              	.L253:
1490:src/display.c **** 	  }
 2736              		.loc 1 1490 8 is_stmt 1 view .LVU827
1490:src/display.c **** 	  }
 2737              		.loc 1 1490 20 is_stmt 0 view .LVU828
 2738 00fe 12F80119 		ldrb	r1, [r2], #-1	@ zero_extendqisi2
 2739              	.LVL304:
1490:src/display.c **** 	  }
 2740              		.loc 1 1490 15 view .LVU829
 2741 0102 0AF8011F 		strb	r1, [r10, #1]!
 2742              	.LVL305:
1489:src/display.c **** 	      *res++ = buf[i];
 2743              		.loc 1 1489 12 is_stmt 1 view .LVU830
1489:src/display.c **** 	      *res++ = buf[i];
 2744              		.loc 1 1489 12 is_stmt 0 view .LVU831
 2745 0106 9A45     		cmp	r10, r3
 2746 0108 F9D1     		bne	.L253
 2747              	.LVL306:
 2748              	.L226:
1537:src/display.c **** 
 2749              		.loc 1 1537 7 view .LVU832
 2750 010a 15B0     		add	sp, sp, #84
 2751              		.cfi_remember_state
 2752              		.cfi_def_cfa_offset 36
 2753              		@ sp needed
 2754 010c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2755              	.LVL307:
 2756              	.L271:
 2757              		.cfi_restore_state
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2758              		.loc 1 1449 25 discriminator 1 view .LVU833
 2759 0110 56EA0703 		orrs	r3, r6, r7
 2760 0114 00F0BE80 		beq	.L234
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 2761              		.loc 1 1452 11 is_stmt 1 view .LVU834
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 2762              		.loc 1 1453 6 view .LVU835
ARM GAS  /tmp/ccZdZ92R.s 			page 93


 2763 0118 DFF8F0B1 		ldr	fp, .L318+20
 2764              	.LVL308:
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 2765              		.loc 1 1453 8 is_stmt 0 view .LVU836
 2766 011c B046     		mov	r8, r6
 2767 011e A946     		mov	r9, r5
 2768 0120 3E46     		mov	r6, r7
1454:src/display.c **** 	      const int r = v % b;
 2769              		.loc 1 1454 6 is_stmt 1 view .LVU837
 2770              	.LVL309:
1454:src/display.c **** 	      const int r = v % b;
 2771              		.loc 1 1454 16 view .LVU838
 2772 0122 4FF0000A 		mov	r10, #0
 2773 0126 03AF     		add	r7, sp, #12
 2774              	.LVL310:
 2775              	.L245:
 2776              	.LBB248:
1455:src/display.c **** 	      v /= b;
 2777              		.loc 1 1455 8 discriminator 3 view .LVU839
 2778 0128 4046     		mov	r0, r8
 2779 012a 3146     		mov	r1, r6
 2780 012c 4A46     		mov	r2, r9
 2781 012e 5346     		mov	r3, r10
 2782 0130 FFF7FEFF 		bl	__aeabi_uldivmod
 2783              	.LVL311:
 2784 0134 3346     		mov	r3, r6
 2785 0136 9446     		mov	ip, r2
 2786              	.LVL312:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2787              		.loc 1 1456 8 discriminator 3 view .LVU840
 2788              	.LBE248:
1454:src/display.c **** 	      const int r = v % b;
 2789              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU841
 2790 0138 5345     		cmp	r3, r10
 2791 013a 4246     		mov	r2, r8
 2792              	.LVL313:
 2793              	.LBB249:
1457:src/display.c **** 	    }
 2794              		.loc 1 1457 15 discriminator 3 view .LVU842
 2795 013c 1BF80CC0 		ldrb	ip, [fp, ip]	@ zero_extendqisi2
 2796              	.LVL314:
1457:src/display.c **** 	    }
 2797              		.loc 1 1457 15 discriminator 3 view .LVU843
 2798 0140 07F801CB 		strb	ip, [r7], #1
 2799              	.LBE249:
1454:src/display.c **** 	      const int r = v % b;
 2800              		.loc 1 1454 6 discriminator 3 view .LVU844
 2801 0144 08BF     		it	eq
 2802 0146 4A45     		cmpeq	r2, r9
 2803              	.LBB250:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2804              		.loc 1 1456 10 discriminator 3 view .LVU845
 2805 0148 0E46     		mov	r6, r1
 2806              	.LVL315:
1457:src/display.c **** 	    }
 2807              		.loc 1 1457 8 is_stmt 1 discriminator 3 view .LVU846
 2808              	.LBE250:
ARM GAS  /tmp/ccZdZ92R.s 			page 94


1454:src/display.c **** 	      const int r = v % b;
 2809              		.loc 1 1454 24 discriminator 3 view .LVU847
 2810              	.LBB251:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2811              		.loc 1 1456 10 is_stmt 0 discriminator 3 view .LVU848
 2812 014a 8046     		mov	r8, r0
 2813 014c 2146     		mov	r1, r4
 2814              	.LVL316:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2815              		.loc 1 1456 10 discriminator 3 view .LVU849
 2816              	.LBE251:
1454:src/display.c **** 	      const int r = v % b;
 2817              		.loc 1 1454 25 discriminator 3 view .LVU850
 2818 014e 04F10104 		add	r4, r4, #1
 2819              	.LVL317:
1454:src/display.c **** 	      const int r = v % b;
 2820              		.loc 1 1454 16 is_stmt 1 discriminator 3 view .LVU851
1454:src/display.c **** 	      const int r = v % b;
 2821              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU852
 2822 0152 E9D2     		bcs	.L245
 2823 0154 0B46     		mov	r3, r1
1479:src/display.c **** 	if (res) {
 2824              		.loc 1 1479 2 is_stmt 1 view .LVU853
 2825              	.LVL318:
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2826              		.loc 1 1480 2 view .LVU854
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2827              		.loc 1 1480 5 is_stmt 0 view .LVU855
 2828 0156 0099     		ldr	r1, [sp]
 2829 0158 0029     		cmp	r1, #0
 2830 015a BDD1     		bne	.L312
 2831              	.LVL319:
 2832              	.L248:
 2833              	.LBB252:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2834              		.loc 1 1508 4 is_stmt 1 view .LVU856
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2835              		.loc 1 1508 33 is_stmt 0 view .LVU857
 2836 015c 022D     		cmp	r5, #2
 2837 015e 00F0FE80 		beq	.L313
 2838              	.LVL320:
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 2839              		.loc 1 1509 4 is_stmt 1 view .LVU858
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 2840              		.loc 1 1509 30 is_stmt 0 view .LVU859
 2841 0162 042D     		cmp	r5, #4
 2842 0164 00F02481 		beq	.L314
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2843              		.loc 1 1508 33 view .LVU860
 2844 0168 102D     		cmp	r5, #16
 2845 016a 0CBF     		ite	eq
 2846 016c 0225     		moveq	r5, #2
 2847 016e 0325     		movne	r5, #3
 2848 0170 0C27     		movs	r7, #12
 2849              	.LVL321:
 2850              	.L255:
1511:src/display.c **** #endif
ARM GAS  /tmp/ccZdZ92R.s 			page 95


 2851              		.loc 1 1511 4 is_stmt 1 view .LVU861
 2852 0172 0093     		str	r3, [sp]
 2853              	.LVL322:
1511:src/display.c **** #endif
 2854              		.loc 1 1511 4 is_stmt 0 view .LVU862
 2855 0174 FFF7FEFF 		bl	set_separator_decimal_modes
 2856              	.LVL323:
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2857              		.loc 1 1513 4 is_stmt 1 view .LVU863
1514:src/display.c **** 	    State2.window = 0;
 2858              		.loc 1 1514 26 is_stmt 0 view .LVU864
 2859 0178 5F4A     		ldr	r2, .L318
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2860              		.loc 1 1513 17 view .LVU865
 2861 017a 6249     		ldr	r1, .L318+12
1514:src/display.c **** 	    State2.window = 0;
 2862              		.loc 1 1514 26 view .LVU866
 2863 017c 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2864              		.loc 1 1513 27 view .LVU867
 2865 017e 009B     		ldr	r3, [sp]
 2866 0180 93FBF7F3 		sdiv	r3, r3, r7
1514:src/display.c **** 	    State2.window = 0;
 2867              		.loc 1 1514 8 view .LVU868
 2868 0184 C2F3C208 		ubfx	r8, r2, #3, #3
1514:src/display.c **** 	    State2.window = 0;
 2869              		.loc 1 1514 7 view .LVU869
 2870 0188 4345     		cmp	r3, r8
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2871              		.loc 1 1513 17 view .LVU870
 2872 018a 0B60     		str	r3, [r1]
1514:src/display.c **** 	    State2.window = 0;
 2873              		.loc 1 1514 4 is_stmt 1 view .LVU871
1514:src/display.c **** 	    State2.window = 0;
 2874              		.loc 1 1514 7 is_stmt 0 view .LVU872
 2875 018c C0F2EA80 		blt	.L257
 2876 0190 07FB08F8 		mul	r8, r7, r8
 2877              	.L258:
1516:src/display.c **** 
 2878              		.loc 1 1516 4 is_stmt 1 view .LVU873
1516:src/display.c **** 
 2879              		.loc 1 1516 11 is_stmt 0 view .LVU874
 2880 0194 14AB     		add	r3, sp, #80
 2881 0196 14AA     		add	r2, sp, #80
 2882 0198 1C44     		add	r4, r4, r3
 2883              	.LVL324:
1516:src/display.c **** 
 2884              		.loc 1 1516 11 view .LVU875
 2885 019a 02EB0806 		add	r6, r2, r8
 2886 019e 0023     		movs	r3, #0
 2887 01a0 453E     		subs	r6, r6, #69
 2888 01a2 04F8443C 		strb	r3, [r4, #-68]
1518:src/display.c **** 	  for (k = 0; k < 12; k++)
 2889              		.loc 1 1518 4 is_stmt 1 view .LVU876
 2890              	.LVL325:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2891              		.loc 1 1519 4 view .LVU877
ARM GAS  /tmp/ccZdZ92R.s 			page 96


1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2892              		.loc 1 1519 16 view .LVU878
1516:src/display.c **** 
 2893              		.loc 1 1516 11 is_stmt 0 view .LVU879
 2894 01a6 3246     		mov	r2, r6
 2895              	.LVL326:
 2896              	.L260:
1520:src/display.c **** 	      break;
 2897              		.loc 1 1520 6 is_stmt 1 view .LVU880
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2898              		.loc 1 1519 24 view .LVU881
1520:src/display.c **** 	      break;
 2899              		.loc 1 1520 9 is_stmt 0 view .LVU882
 2900 01a8 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 2901 01ac 0029     		cmp	r1, #0
 2902 01ae 00F0E080 		beq	.L259
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2903              		.loc 1 1519 25 discriminator 2 view .LVU883
 2904 01b2 0133     		adds	r3, r3, #1
 2905              	.LVL327:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2906              		.loc 1 1519 16 is_stmt 1 discriminator 2 view .LVU884
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2907              		.loc 1 1519 4 is_stmt 0 discriminator 2 view .LVU885
 2908 01b4 0C2B     		cmp	r3, #12
 2909 01b6 F7D1     		bne	.L260
1522:src/display.c **** 	    int ch = buf[j++];
 2910              		.loc 1 1522 4 view .LVU886
 2911 01b8 4FF00B09 		mov	r9, #11
 2912              	.LVL328:
 2913              	.L261:
1522:src/display.c **** 	    int ch = buf[j++];
 2914              		.loc 1 1522 4 view .LVU887
 2915 01bc 08F10108 		add	r8, r8, #1
 2916 01c0 C844     		add	r8, r8, r9
 2917 01c2 4C46     		mov	r4, r9
 2918 01c4 4FF0630B 		mov	fp, #99
 2919 01c8 09E0     		b	.L266
 2920              	.LVL329:
 2921              	.L315:
 2922              	.LBB253:
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 2923              		.loc 1 1528 8 view .LVU888
 2924 01ca 4F4B     		ldr	r3, .L318+16
 2925 01cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2926              	.LVL330:
 2927              	.LBB254:
 2928              	.LBI254:
 367:src/display.c ****   if (sep == SEP_NONE)
 2929              		.loc 1 367 14 is_stmt 1 view .LVU889
 2930              	.LBB255:
 368:src/display.c ****     return res;
 2931              		.loc 1 368 3 view .LVU890
 368:src/display.c ****     return res;
 2932              		.loc 1 368 6 is_stmt 0 view .LVU891
 2933 01ce 09B1     		cbz	r1, .L264
 368:src/display.c ****     return res;
ARM GAS  /tmp/ccZdZ92R.s 			page 97


 2934              		.loc 1 368 6 view .LVU892
 2935 01d0 FFF7FEFF 		bl	set_separator.part.0
 2936              	.LVL331:
 2937              	.L264:
 368:src/display.c ****     return res;
 2938              		.loc 1 368 6 view .LVU893
 2939              	.LBE255:
 2940              	.LBE254:
1529:src/display.c **** 	  }
 2941              		.loc 1 1529 6 is_stmt 1 discriminator 2 view .LVU894
 2942              	.LBE253:
1522:src/display.c **** 	    int ch = buf[j++];
 2943              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU895
 2944 01d4 013C     		subs	r4, r4, #1
1522:src/display.c **** 	    int ch = buf[j++];
 2945              		.loc 1 1522 4 discriminator 2 view .LVU896
 2946 01d6 621C     		adds	r2, r4, #1
 2947              	.LBB258:
1529:src/display.c **** 	  }
 2948              		.loc 1 1529 10 discriminator 2 view .LVU897
 2949 01d8 ABF1090B 		sub	fp, fp, #9
 2950              	.LVL332:
1529:src/display.c **** 	  }
 2951              		.loc 1 1529 10 discriminator 2 view .LVU898
 2952              	.LBE258:
1522:src/display.c **** 	    int ch = buf[j++];
 2953              		.loc 1 1522 24 is_stmt 1 discriminator 2 view .LVU899
1522:src/display.c **** 	    int ch = buf[j++];
 2954              		.loc 1 1522 14 discriminator 2 view .LVU900
1522:src/display.c **** 	    int ch = buf[j++];
 2955              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU901
 2956 01dc 16D0     		beq	.L270
 2957              	.LVL333:
 2958              	.L266:
 2959              	.LBB259:
1523:src/display.c **** 	    if (i >= shift)
 2960              		.loc 1 1523 6 is_stmt 1 view .LVU902
1525:src/display.c **** 	    set_dig(dig, ch);
 2961              		.loc 1 1525 8 view .LVU903
1523:src/display.c **** 	    if (i >= shift)
 2962              		.loc 1 1523 10 is_stmt 0 view .LVU904
 2963 01de 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1524:src/display.c **** 	      ch -= 030;
 2964              		.loc 1 1524 9 view .LVU905
 2965 01e2 A9EB0402 		sub	r2, r9, r4
 2966 01e6 BA42     		cmp	r2, r7
 2967 01e8 A8EB040A 		sub	r10, r8, r4
 2968              	.LVL334:
1524:src/display.c **** 	      ch -= 030;
 2969              		.loc 1 1524 6 is_stmt 1 view .LVU906
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 2970              		.loc 1 1526 6 is_stmt 0 view .LVU907
 2971 01ec 5846     		mov	r0, fp
1525:src/display.c **** 	    set_dig(dig, ch);
 2972              		.loc 1 1525 11 view .LVU908
 2973 01ee A8BF     		it	ge
 2974 01f0 1839     		subge	r1, r1, #24
ARM GAS  /tmp/ccZdZ92R.s 			page 98


 2975              	.LVL335:
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 2976              		.loc 1 1526 6 is_stmt 1 view .LVU909
 2977 01f2 FFF7FEFF 		bl	set_dig
 2978              	.LVL336:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2979              		.loc 1 1527 6 view .LVU910
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2980              		.loc 1 1527 13 is_stmt 0 view .LVU911
 2981 01f6 9AFBF5F3 		sdiv	r3, r10, r5
 2982 01fa 05FB13A3 		mls	r3, r5, r3, r10
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2983              		.loc 1 1527 9 view .LVU912
 2984 01fe 002B     		cmp	r3, #0
 2985 0200 E8D1     		bne	.L264
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 2986              		.loc 1 1528 8 is_stmt 1 discriminator 1 view .LVU913
 2987              	.LBB257:
 2988              	.LBB256:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 2989              		.loc 1 370 3 discriminator 1 view .LVU914
 2990 0202 5846     		mov	r0, fp
 2991              	.LBE256:
 2992              	.LBE257:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2993              		.loc 1 1527 27 is_stmt 0 discriminator 1 view .LVU915
 2994 0204 002C     		cmp	r4, #0
 2995 0206 E0D1     		bne	.L315
1529:src/display.c **** 	  }
 2996              		.loc 1 1529 6 is_stmt 1 view .LVU916
1529:src/display.c **** 	  }
 2997              		.loc 1 1529 10 is_stmt 0 view .LVU917
 2998 0208 ABF1090B 		sub	fp, fp, #9
 2999              	.LVL337:
1529:src/display.c **** 	  }
 3000              		.loc 1 1529 10 view .LVU918
 3001              	.LBE259:
1522:src/display.c **** 	    int ch = buf[j++];
 3002              		.loc 1 1522 24 is_stmt 1 view .LVU919
1522:src/display.c **** 	    int ch = buf[j++];
 3003              		.loc 1 1522 14 view .LVU920
 3004              	.L270:
1531:src/display.c **** 	    if (dig >= 0)
 3005              		.loc 1 1531 4 view .LVU921
1531:src/display.c **** 	    if (dig >= 0)
 3006              		.loc 1 1531 7 is_stmt 0 view .LVU922
 3007 020c 029B     		ldr	r3, [sp, #8]
 3008 020e 002B     		cmp	r3, #0
 3009 0210 3FF47BAF 		beq	.L226
1532:src/display.c **** 	      set_dig(dig, '-');
 3010              		.loc 1 1532 6 is_stmt 1 view .LVU923
1532:src/display.c **** 	      set_dig(dig, '-');
 3011              		.loc 1 1532 9 is_stmt 0 view .LVU924
 3012 0214 BBF1000F 		cmp	fp, #0
 3013 0218 C0F2CC80 		blt	.L316
 3014              	.LVL338:
 3015              	.L269:
ARM GAS  /tmp/ccZdZ92R.s 			page 99


1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3016              		.loc 1 1533 8 is_stmt 1 view .LVU925
 3017 021c 5846     		mov	r0, fp
 3018 021e 2D21     		movs	r1, #45
 3019 0220 FFF7FEFF 		bl	set_dig
 3020              	.LVL339:
 3021 0224 71E7     		b	.L226
 3022              	.LVL340:
 3023              	.L310:
1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3024              		.loc 1 1533 8 is_stmt 0 view .LVU926
 3025              	.LBE252:
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3026              		.loc 1 1426 4 is_stmt 1 view .LVU927
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3027              		.loc 1 1426 8 is_stmt 0 view .LVU928
 3028 0226 02AA     		add	r2, sp, #8
 3029 0228 3046     		mov	r0, r6
 3030 022a 3946     		mov	r1, r7
 3031 022c FFF7FEFF 		bl	extract_value
 3032              	.LVL341:
 3033 0230 8046     		mov	r8, r0
 3034 0232 8946     		mov	r9, r1
 3035              	.LVL342:
1427:src/display.c **** 	    v = value;
 3036              		.loc 1 1427 4 is_stmt 1 view .LVU929
1427:src/display.c **** 	    v = value;
 3037              		.loc 1 1427 8 is_stmt 0 view .LVU930
 3038 0234 FFF7FEFF 		bl	int_mode
 3039              	.LVL343:
1427:src/display.c **** 	    v = value;
 3040              		.loc 1 1427 7 view .LVU931
 3041 0238 28BB     		cbnz	r0, .L231
1427:src/display.c **** 	    v = value;
 3042              		.loc 1 1427 33 discriminator 1 view .LVU932
 3043 023a 029B     		ldr	r3, [sp, #8]
 3044 023c 012B     		cmp	r3, #1
 3045 023e 22D1     		bne	.L231
1427:src/display.c **** 	    v = value;
 3046              		.loc 1 1427 46 discriminator 2 view .LVU933
 3047 0240 58EA0903 		orrs	r3, r8, r9
 3048 0244 00F0A180 		beq	.L317
 3049              	.LVL344:
 3050              	.L232:
1427:src/display.c **** 	    v = value;
 3051              		.loc 1 1427 46 discriminator 2 view .LVU934
 3052 0248 DFF8C0B0 		ldr	fp, .L318+20
 3053              	.LVL345:
1402:src/display.c **** 	const int ws = word_size();
 3054              		.loc 1 1402 67 discriminator 3 view .LVU935
 3055 024c 0195     		str	r5, [sp, #4]
 3056 024e 2E46     		mov	r6, r5
 3057 0250 0027     		movs	r7, #0
 3058 0252 0DF10C0A 		add	r10, sp, #12
 3059 0256 0024     		movs	r4, #0
 3060 0258 5D46     		mov	r5, fp
 3061              	.LVL346:
ARM GAS  /tmp/ccZdZ92R.s 			page 100


 3062              	.L238:
 3063              	.LBB262:
1436:src/display.c **** 	      v /= b;
 3064              		.loc 1 1436 8 is_stmt 1 discriminator 3 view .LVU936
 3065 025a 4046     		mov	r0, r8
 3066 025c 4946     		mov	r1, r9
 3067 025e 3246     		mov	r2, r6
 3068 0260 3B46     		mov	r3, r7
 3069 0262 FFF7FEFF 		bl	__aeabi_uldivmod
 3070              	.LVL347:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3071              		.loc 1 1437 8 discriminator 3 view .LVU937
 3072 0266 CC46     		mov	ip, r9
 3073 0268 C346     		mov	fp, r8
 3074              	.LBE262:
1435:src/display.c **** 	      const int r = v % b;
 3075              		.loc 1 1435 6 is_stmt 0 discriminator 3 view .LVU938
 3076 026a BC45     		cmp	ip, r7
 3077              	.LBB263:
1438:src/display.c **** 	    }
 3078              		.loc 1 1438 15 discriminator 3 view .LVU939
 3079 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3080 026e 0AF8013B 		strb	r3, [r10], #1
 3081              	.LBE263:
1435:src/display.c **** 	      const int r = v % b;
 3082              		.loc 1 1435 6 discriminator 3 view .LVU940
 3083 0272 08BF     		it	eq
 3084 0274 B345     		cmpeq	fp, r6
 3085 0276 2346     		mov	r3, r4
 3086              	.LBB264:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3087              		.loc 1 1437 10 discriminator 3 view .LVU941
 3088 0278 8046     		mov	r8, r0
 3089              	.LVL348:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3090              		.loc 1 1437 10 discriminator 3 view .LVU942
 3091 027a 8946     		mov	r9, r1
 3092              	.LVL349:
1438:src/display.c **** 	    }
 3093              		.loc 1 1438 8 is_stmt 1 discriminator 3 view .LVU943
 3094              	.LBE264:
1435:src/display.c **** 	      const int r = v % b;
 3095              		.loc 1 1435 24 discriminator 3 view .LVU944
1435:src/display.c **** 	      const int r = v % b;
 3096              		.loc 1 1435 25 is_stmt 0 discriminator 3 view .LVU945
 3097 027c 04F10104 		add	r4, r4, #1
 3098              	.LVL350:
1435:src/display.c **** 	      const int r = v % b;
 3099              		.loc 1 1435 16 is_stmt 1 discriminator 3 view .LVU946
1435:src/display.c **** 	      const int r = v % b;
 3100              		.loc 1 1435 6 is_stmt 0 discriminator 3 view .LVU947
 3101 0280 EBD2     		bcs	.L238
 3102 0282 019D     		ldr	r5, [sp, #4]
 3103 0284 25E7     		b	.L239
 3104              	.LVL351:
 3105              	.L231:
1429:src/display.c **** 	    if (sign)
ARM GAS  /tmp/ccZdZ92R.s 			page 101


 3106              		.loc 1 1429 4 is_stmt 1 view .LVU948
1429:src/display.c **** 	    if (sign)
 3107              		.loc 1 1429 7 is_stmt 0 view .LVU949
 3108 0286 58EA0903 		orrs	r3, r8, r9
 3109 028a DDD1     		bne	.L232
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3110              		.loc 1 1430 6 is_stmt 1 view .LVU950
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3111              		.loc 1 1430 9 is_stmt 0 view .LVU951
 3112 028c 029B     		ldr	r3, [sp, #8]
 3113 028e 002B     		cmp	r3, #0
 3114 0290 40F08180 		bne	.L233
 3115              	.LVL352:
 3116              	.L234:
1432:src/display.c **** 	    return;
 3117              		.loc 1 1432 6 is_stmt 1 view .LVU952
 3118              	.LBB265:
 3119              	.LBI265:
 407:src/display.c ****   if (res) *res++ = ch;
 3120              		.loc 1 407 14 view .LVU953
 3121              	.LBB266:
 408:src/display.c ****   else	set_dig(base, ch);
 3122              		.loc 1 408 3 view .LVU954
 408:src/display.c ****   else	set_dig(base, ch);
 3123              		.loc 1 408 6 is_stmt 0 view .LVU955
 3124 0294 009B     		ldr	r3, [sp]
 3125 0296 002B     		cmp	r3, #0
 3126 0298 00F08580 		beq	.L236
 3127              	.LVL353:
 3128              	.L235:
 408:src/display.c ****   else	set_dig(base, ch);
 3129              		.loc 1 408 12 is_stmt 1 view .LVU956
 408:src/display.c ****   else	set_dig(base, ch);
 3130              		.loc 1 408 19 is_stmt 0 view .LVU957
 3131 029c 009A     		ldr	r2, [sp]
 3132 029e 3023     		movs	r3, #48
 3133 02a0 1370     		strb	r3, [r2]
 3134              	.LBE266:
 3135              	.LBE265:
1537:src/display.c **** 
 3136              		.loc 1 1537 7 view .LVU958
 3137 02a2 15B0     		add	sp, sp, #84
 3138              		.cfi_remember_state
 3139              		.cfi_def_cfa_offset 36
 3140              	.LVL354:
1537:src/display.c **** 
 3141              		.loc 1 1537 7 view .LVU959
 3142              		@ sp needed
 3143 02a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3144              	.LVL355:
 3145              	.L227:
 3146              		.cfi_restore_state
1417:src/display.c **** 	}
 3147              		.loc 1 1417 11 is_stmt 1 view .LVU960
1417:src/display.c **** 	}
 3148              		.loc 1 1417 15 is_stmt 0 view .LVU961
 3149 02a8 FFF7FEFF 		bl	int_base
ARM GAS  /tmp/ccZdZ92R.s 			page 102


 3150              	.LVL356:
1420:src/display.c **** 	  IntMaxWindow = 0;
 3151              		.loc 1 1420 5 view .LVU962
 3152 02ac 009B     		ldr	r3, [sp]
1417:src/display.c **** 	}
 3153              		.loc 1 1417 15 view .LVU963
 3154 02ae 0546     		mov	r5, r0
 3155              	.LVL357:
1417:src/display.c **** 	}
 3156              		.loc 1 1417 27 is_stmt 1 view .LVU964
1420:src/display.c **** 	  IntMaxWindow = 0;
 3157              		.loc 1 1420 2 view .LVU965
1420:src/display.c **** 	  IntMaxWindow = 0;
 3158              		.loc 1 1420 5 is_stmt 0 view .LVU966
 3159 02b0 002B     		cmp	r3, #0
 3160 02b2 7FF4BEAE 		bne	.L229
 3161              	.LVL358:
 3162              	.L309:
1421:src/display.c **** 	  carry_overflow();
 3163              		.loc 1 1421 4 is_stmt 1 view .LVU967
1421:src/display.c **** 	  carry_overflow();
 3164              		.loc 1 1421 17 is_stmt 0 view .LVU968
 3165 02b6 134B     		ldr	r3, .L318+12
 3166 02b8 009A     		ldr	r2, [sp]
 3167 02ba 1A60     		str	r2, [r3]
1422:src/display.c **** 	}
 3168              		.loc 1 1422 4 is_stmt 1 view .LVU969
 3169 02bc FFF7FEFF 		bl	carry_overflow
 3170              	.LVL359:
 3171 02c0 B7E6     		b	.L229
 3172              	.LVL360:
 3173              	.L250:
1483:src/display.c **** 	      *res++ = buf[i];
 3174              		.loc 1 1483 12 view .LVU970
1483:src/display.c **** 	      *res++ = buf[i];
 3175              		.loc 1 1483 24 is_stmt 0 view .LVU971
 3176 02c2 0098     		ldr	r0, [sp]
 3177 02c4 03AA     		add	r2, sp, #12
 3178 02c6 D118     		adds	r1, r2, r3
 3179 02c8 E51F     		subs	r5, r4, #7
 3180 02ca 0246     		mov	r2, r0
 3181 02cc C618     		adds	r6, r0, r3
 3182              	.LVL361:
 3183              	.L252:
1484:src/display.c **** 	    *res++ = '.';
 3184              		.loc 1 1484 8 is_stmt 1 view .LVU972
1484:src/display.c **** 	    *res++ = '.';
 3185              		.loc 1 1484 20 is_stmt 0 view .LVU973
 3186 02ce 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
 3187              	.LVL362:
1484:src/display.c **** 	    *res++ = '.';
 3188              		.loc 1 1484 15 view .LVU974
 3189 02d2 02F8010B 		strb	r0, [r2], #1
 3190              	.LVL363:
1483:src/display.c **** 	      *res++ = buf[i];
 3191              		.loc 1 1483 12 is_stmt 1 view .LVU975
1483:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/ccZdZ92R.s 			page 103


 3192              		.loc 1 1483 12 is_stmt 0 view .LVU976
 3193 02d6 B01A     		subs	r0, r6, r2
 3194 02d8 8542     		cmp	r5, r0
 3195 02da F8DD     		ble	.L252
 3196 02dc 03F10802 		add	r2, r3, #8
 3197              	.LVL364:
1483:src/display.c **** 	      *res++ = buf[i];
 3198              		.loc 1 1483 12 view .LVU977
 3199 02e0 0099     		ldr	r1, [sp]
 3200              	.LVL365:
1483:src/display.c **** 	      *res++ = buf[i];
 3201              		.loc 1 1483 12 view .LVU978
 3202 02e2 141B     		subs	r4, r2, r4
 3203              	.LVL366:
1483:src/display.c **** 	      *res++ = buf[i];
 3204              		.loc 1 1483 12 view .LVU979
 3205 02e4 9D42     		cmp	r5, r3
 3206 02e6 C8BF     		it	gt
 3207 02e8 0124     		movgt	r4, #1
 3208 02ea 0A19     		adds	r2, r1, r4
1485:src/display.c **** 	    *res++ = '.';
 3209              		.loc 1 1485 6 is_stmt 1 view .LVU980
 3210              	.LVL367:
1485:src/display.c **** 	    *res++ = '.';
 3211              		.loc 1 1485 13 is_stmt 0 view .LVU981
 3212 02ec 2E23     		movs	r3, #46
 3213 02ee 0B55     		strb	r3, [r1, r4]
1486:src/display.c **** 	  }
 3214              		.loc 1 1486 6 is_stmt 1 view .LVU982
 3215              	.LVL368:
1486:src/display.c **** 	  }
 3216              		.loc 1 1486 13 is_stmt 0 view .LVU983
 3217 02f0 5370     		strb	r3, [r2, #1]
1537:src/display.c **** 
 3218              		.loc 1 1537 7 view .LVU984
 3219 02f2 15B0     		add	sp, sp, #84
 3220              		.cfi_remember_state
 3221              		.cfi_def_cfa_offset 36
 3222              		@ sp needed
 3223 02f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3224              	.LVL369:
 3225              	.L319:
1537:src/display.c **** 
 3226              		.loc 1 1537 7 view .LVU985
 3227              		.align	2
 3228              	.L318:
 3229 02f8 00000000 		.word	StateWhileOn
 3230 02fc 00000000 		.word	CSWTCH.315
 3231 0300 00000000 		.word	main_ram
 3232 0304 00000000 		.word	IntMaxWindow
 3233 0308 00000000 		.word	.LANCHOR0
 3234 030c 00000000 		.word	.LANCHOR12
 3235              	.LVL370:
 3236              	.L311:
 3237              		.cfi_restore_state
 3238              	.LBB268:
1445:src/display.c **** 	      vs |= ~mask;
ARM GAS  /tmp/ccZdZ92R.s 			page 104


 3239              		.loc 1 1445 38 discriminator 1 view .LVU986
 3240 0310 0BF1FF31 		add	r1, fp, #-1
1445:src/display.c **** 	      vs |= ~mask;
 3241              		.loc 1 1445 18 discriminator 1 view .LVU987
 3242 0314 CBF1210C 		rsb	ip, fp, #33
 3243 0318 C840     		lsrs	r0, r0, r1
 3244 031a 07FA0CFC 		lsl	ip, r7, ip
 3245 031e 2039     		subs	r1, r1, #32
 3246 0320 40EA0C00 		orr	r0, r0, ip
 3247 0324 5CBF     		itt	pl
 3248 0326 47FA01F1 		asrpl	r1, r7, r1
 3249 032a 0843     		orrpl	r0, r0, r1
 3250 032c 00F00108 		and	r8, r0, #1
 3251 0330 4FF00009 		mov	r9, #0
 3252 0334 58EA0901 		orrs	r1, r8, r9
 3253 0338 08D0     		beq	.L241
1446:src/display.c **** 	  }
 3254              		.loc 1 1446 8 is_stmt 1 view .LVU988
1446:src/display.c **** 	  }
 3255              		.loc 1 1446 11 is_stmt 0 view .LVU989
 3256 033a 5042     		rsbs	r0, r2, #0
 3257 033c 63EB4301 		sbc	r1, r3, r3, lsl #1
 3258 0340 40EA0602 		orr	r2, r0, r6
 3259              	.LVL371:
1446:src/display.c **** 	  }
 3260              		.loc 1 1446 11 view .LVU990
 3261 0344 41EA0703 		orr	r3, r1, r7
 3262              	.LVL372:
1446:src/display.c **** 	  }
 3263              		.loc 1 1446 11 view .LVU991
 3264 0348 1646     		mov	r6, r2
 3265              	.LVL373:
1446:src/display.c **** 	  }
 3266              		.loc 1 1446 11 view .LVU992
 3267 034a 1F46     		mov	r7, r3
 3268              	.L241:
1446:src/display.c **** 	  }
 3269              		.loc 1 1446 11 view .LVU993
 3270              	.LBE268:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3271              		.loc 1 1449 4 is_stmt 1 view .LVU994
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3272              		.loc 1 1449 8 is_stmt 0 view .LVU995
 3273 034c 1E4B     		ldr	r3, .L320
 3274 034e 1B68     		ldr	r3, [r3]
 3275 0350 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3276              		.loc 1 1449 7 view .LVU996
 3277 0354 9B07     		lsls	r3, r3, #30
 3278 0356 7FF5DBAE 		bpl	.L271
 3279 035a 0223     		movs	r3, #2
 3280 035c 9CE6     		b	.L246
 3281              	.LVL374:
 3282              	.L313:
 3283              	.LBB269:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3284              		.loc 1 1508 33 view .LVU997
ARM GAS  /tmp/ccZdZ92R.s 			page 105


 3285 035e 0827     		movs	r7, #8
1510:src/display.c **** 	  set_separator_decimal_modes();
 3286              		.loc 1 1510 6 view .LVU998
 3287 0360 0425     		movs	r5, #4
 3288 0362 06E7     		b	.L255
 3289              	.LVL375:
 3290              	.L257:
1515:src/display.c **** 	  buf[i] = '\0';
 3291              		.loc 1 1515 6 is_stmt 1 view .LVU999
1515:src/display.c **** 	  buf[i] = '\0';
 3292              		.loc 1 1515 20 is_stmt 0 view .LVU1000
 3293 0364 194B     		ldr	r3, .L320+4
 3294 0366 6FF3C502 		bfc	r2, #3, #3
 3295 036a 1A75     		strb	r2, [r3, #20]
 3296 036c 4FF00008 		mov	r8, #0
 3297 0370 10E7     		b	.L258
 3298              	.LVL376:
 3299              	.L259:
1522:src/display.c **** 	    int ch = buf[j++];
 3300              		.loc 1 1522 14 is_stmt 1 discriminator 1 view .LVU1001
1522:src/display.c **** 	    int ch = buf[j++];
 3301              		.loc 1 1522 4 is_stmt 0 discriminator 1 view .LVU1002
 3302 0372 03F1FF39 		add	r9, r3, #-1
 3303              	.LVL377:
1522:src/display.c **** 	    int ch = buf[j++];
 3304              		.loc 1 1522 4 discriminator 1 view .LVU1003
 3305 0376 002B     		cmp	r3, #0
 3306 0378 7FF420AF 		bne	.L261
1531:src/display.c **** 	    if (dig >= 0)
 3307              		.loc 1 1531 4 is_stmt 1 view .LVU1004
1531:src/display.c **** 	    if (dig >= 0)
 3308              		.loc 1 1531 7 is_stmt 0 view .LVU1005
 3309 037c 029B     		ldr	r3, [sp, #8]
 3310 037e 002B     		cmp	r3, #0
 3311 0380 3FF4C3AE 		beq	.L226
 3312 0384 4FF0630B 		mov	fp, #99
 3313 0388 48E7     		b	.L269
 3314              	.LVL378:
 3315              	.L317:
1531:src/display.c **** 	    if (dig >= 0)
 3316              		.loc 1 1531 7 view .LVU1006
 3317              	.LBE269:
1428:src/display.c **** 	  if (v == 0) {
 3318              		.loc 1 1428 6 is_stmt 1 view .LVU1007
1428:src/display.c **** 	  if (v == 0) {
 3319              		.loc 1 1428 8 is_stmt 0 view .LVU1008
 3320 038a B046     		mov	r8, r6
 3321              	.LVL379:
1428:src/display.c **** 	  if (v == 0) {
 3322              		.loc 1 1428 8 view .LVU1009
 3323 038c B946     		mov	r9, r7
 3324              	.LVL380:
1429:src/display.c **** 	    if (sign)
 3325              		.loc 1 1429 4 is_stmt 1 view .LVU1010
1429:src/display.c **** 	    if (sign)
 3326              		.loc 1 1429 7 is_stmt 0 view .LVU1011
 3327 038e 58EA0903 		orrs	r3, r8, r9
ARM GAS  /tmp/ccZdZ92R.s 			page 106


 3328 0392 7FF459AF 		bne	.L232
 3329              	.LVL381:
 3330              	.L233:
1431:src/display.c **** 	    set_dig_s(dig, '0', res);
 3331              		.loc 1 1431 8 is_stmt 1 view .LVU1012
 3332              	.LBB270:
 3333              	.LBI270:
 407:src/display.c ****   if (res) *res++ = ch;
 3334              		.loc 1 407 14 view .LVU1013
 3335              	.LBB271:
 408:src/display.c ****   else	set_dig(base, ch);
 3336              		.loc 1 408 3 view .LVU1014
 408:src/display.c ****   else	set_dig(base, ch);
 3337              		.loc 1 408 6 is_stmt 0 view .LVU1015
 3338 0396 009B     		ldr	r3, [sp]
 3339 0398 002B     		cmp	r3, #0
 3340 039a 7FF47FAF 		bne	.L235
 409:src/display.c ****   return res;
 3341              		.loc 1 409 8 is_stmt 1 view .LVU1016
 3342 039e 2D21     		movs	r1, #45
 3343 03a0 5A20     		movs	r0, #90
 3344 03a2 FFF7FEFF 		bl	set_dig
 3345              	.LVL382:
 409:src/display.c ****   return res;
 3346              		.loc 1 409 8 is_stmt 0 view .LVU1017
 3347              	.LBE271:
 3348              	.LBE270:
1432:src/display.c **** 	    return;
 3349              		.loc 1 1432 6 is_stmt 1 view .LVU1018
 3350              	.LBB272:
 407:src/display.c ****   if (res) *res++ = ch;
 3351              		.loc 1 407 14 view .LVU1019
 3352              	.LBB267:
 408:src/display.c ****   else	set_dig(base, ch);
 3353              		.loc 1 408 3 view .LVU1020
 3354              	.L236:
 409:src/display.c ****   return res;
 3355              		.loc 1 409 8 view .LVU1021
 3356 03a6 3021     		movs	r1, #48
 3357 03a8 6320     		movs	r0, #99
 3358 03aa FFF7FEFF 		bl	set_dig
 3359              	.LVL383:
 3360 03ae ACE6     		b	.L226
 3361              	.LVL384:
 3362              	.L314:
 409:src/display.c ****   return res;
 3363              		.loc 1 409 8 is_stmt 0 view .LVU1022
 3364              	.LBE267:
 3365              	.LBE272:
 3366              	.LBB273:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3367              		.loc 1 1508 33 view .LVU1023
 3368 03b0 0C27     		movs	r7, #12
 3369 03b2 DEE6     		b	.L255
 3370              	.LVL385:
 3371              	.L316:
1534:src/display.c **** 	  }
ARM GAS  /tmp/ccZdZ92R.s 			page 107


 3372              		.loc 1 1534 11 is_stmt 1 view .LVU1024
 3373              	.LBB260:
 3374              	.LBI260:
 296:src/display.c **** {
 3375              		.loc 1 296 13 view .LVU1025
 3376              	.LBB261:
 298:src/display.c ****   set_dot(MANT_SIGN);
 3377              		.loc 1 298 3 view .LVU1026
 298:src/display.c ****   set_dot(MANT_SIGN);
 3378              		.loc 1 298 25 is_stmt 0 view .LVU1027
 3379 03b4 064B     		ldr	r3, .L320+8
 3380 03b6 2D22     		movs	r2, #45
 299:src/display.c **** }
 3381              		.loc 1 299 3 view .LVU1028
 3382 03b8 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 3383              		.loc 1 298 25 view .LVU1029
 3384 03ba 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 3385              		.loc 1 299 3 is_stmt 1 view .LVU1030
 3386 03bc FFF7FEFF 		bl	set_dot
 3387              	.LVL386:
 300:src/display.c **** 
 3388              		.loc 1 300 1 is_stmt 0 view .LVU1031
 3389 03c0 A3E6     		b	.L226
 3390              	.LVL387:
 3391              	.L272:
 300:src/display.c **** 
 3392              		.loc 1 300 1 view .LVU1032
 3393              	.LBE261:
 3394              	.LBE260:
 3395              	.LBE273:
 3396              	.LBB274:
1466:src/display.c **** 	      const int r = v % b;
 3397              		.loc 1 1466 6 view .LVU1033
 3398 03c2 4FF0FF33 		mov	r3, #-1
 3399              	.LVL388:
1466:src/display.c **** 	      const int r = v % b;
 3400              		.loc 1 1466 6 view .LVU1034
 3401 03c6 84E6     		b	.L239
 3402              	.L321:
 3403              		.align	2
 3404              	.L320:
 3405 03c8 00000000 		.word	main_ram
 3406 03cc 00000000 		.word	StateWhileOn
 3407 03d0 00000000 		.word	LastDisplayedNumber
 3408              	.LBE274:
 3409              		.cfi_endproc
 3410              	.LFE18:
 3412              		.section	.text.set_annunciators,"ax",%progbits
 3413              		.align	1
 3414              		.p2align 2,,3
 3415              		.syntax unified
 3416              		.thumb
 3417              		.thumb_func
 3418              		.fpu fpv4-sp-d16
 3420              	set_annunciators:
ARM GAS  /tmp/ccZdZ92R.s 			page 108


 3421              	.LFB32:
1753:src/display.c **** 
1754:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1755:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1756:src/display.c **** 	decNumber c;
1757:src/display.c **** 	int true_exp, x=0;
1758:src/display.c **** 	int min_pos_exp, max_neg_exp;
1759:src/display.c **** 
1760:src/display.c **** 	if ( mode != MODE_STD ) {
1761:src/display.c **** 	  min_pos_exp = 9;
1762:src/display.c **** 	  max_neg_exp = -5;
1763:src/display.c **** 	}
1764:src/display.c **** 	else {
1765:src/display.c **** 	  min_pos_exp = 12;
1766:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1767:src/display.c **** 	}
1768:src/display.c **** 
1769:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1770:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1771:src/display.c **** 
1772:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1773:src/display.c **** 	  x = *dd;
1774:src/display.c **** 	}
1775:src/display.c **** 
1776:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1777:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1778:src/display.c **** 	  *dd += -true_exp;
1779:src/display.c **** 	  return MODE_FIX;
1780:src/display.c **** 	}
1781:src/display.c **** 
1782:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1783:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1784:src/display.c **** 	}
1785:src/display.c **** 	else {
1786:src/display.c **** 	  return MODE_STD;
1787:src/display.c **** 	}
1788:src/display.c ****       }
1789:src/display.c **** #else
1790:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1791:src/display.c **** 	decNumber b, c;
1792:src/display.c **** 
1793:src/display.c **** 	dn_1(&b);
1794:src/display.c **** 	b.exponent -= UState.dispdigs;
1795:src/display.c **** 	dn_abs(&c, z);
1796:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1797:src/display.c **** 	  return MODE_FIX;
1798:src/display.c **** 	return MODE_STD;
1799:src/display.c ****       }
1800:src/display.c **** #endif
1801:src/display.c **** 
1802:src/display.c ****       /* SHOW display mode
1803:src/display.c ****        * in double precision show left or right part
1804:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1805:src/display.c ****        */
1806:src/display.c ****       static void show_x(char *x, int exp) {
1807:src/display.c **** 	const int dbl = is_dblmode();
1808:src/display.c **** 	char *p;
ARM GAS  /tmp/ccZdZ92R.s 			page 109


1809:src/display.c **** 	int i, j;
1810:src/display.c **** 	char *upper_str;
1811:src/display.c **** 	enum separator_modes separator_mode;
1812:src/display.c **** 	char decimal_mark;
1813:src/display.c **** 	char thousands_sep;
1814:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1815:src/display.c **** 	const int grouping = 0;
1816:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1817:src/display.c **** 	const int grouping = !UState.nothousands;
1818:src/display.c **** #else
1819:src/display.c **** 	const int grouping = 1;
1820:src/display.c **** #endif
1821:src/display.c **** 	int negative;
1822:src/display.c **** 
1823:src/display.c **** 	if (x[0] == '-') {
1824:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1825:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1826:src/display.c **** 
1827:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1828:src/display.c **** 	  xcopy(x, small_minus, 4);
1829:src/display.c **** 	  x += 4;
1830:src/display.c **** 	  negative = 4;
1831:src/display.c **** #else
1832:src/display.c **** 	  ++x;
1833:src/display.c **** 	  negative = 1;
1834:src/display.c **** #endif
1835:src/display.c **** 	}
1836:src/display.c **** 	else negative = 0;
1837:src/display.c **** 
1838:src/display.c **** 	p = find_char(x, '\0');
1839:src/display.c **** 	xset(p, '0', 34 - (p - x));
1840:src/display.c **** 
1841:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1842:src/display.c **** 	  separator_mode = SEP_COMMA;
1843:src/display.c **** 	  decimal_mark = '.';
1844:src/display.c **** 	  thousands_sep = ',';
1845:src/display.c **** 	}
1846:src/display.c **** 	else {
1847:src/display.c **** 	  separator_mode = SEP_DOT;
1848:src/display.c **** 	  decimal_mark = ',';
1849:src/display.c **** 	  thousands_sep = '.';
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	if (State2.window) { // right half in double precision mode
1853:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1854:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1855:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1856:src/display.c **** 
1857:src/display.c **** 	  upper_str = x + 3;
1858:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1859:src/display.c **** 	  if (grouping) {
1860:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1861:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1862:src/display.c **** 	    x += 3 + 13 + 7;
1863:src/display.c **** 	  }
1864:src/display.c **** 	  else x += 3 + 13 + 6;
1865:src/display.c **** #else
ARM GAS  /tmp/ccZdZ92R.s 			page 110


1866:src/display.c **** 	  upper_str = x + 13;
1867:src/display.c **** 	  xset(upper_str, '.', 3);
1868:src/display.c **** 	  if (grouping) {
1869:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1870:src/display.c **** 	    upper_str[6] = thousands_sep;
1871:src/display.c **** 	    x += 13 + 3 + 7;
1872:src/display.c **** 	  }
1873:src/display.c **** 	  else x += 13 + 3 + 6;
1874:src/display.c **** #endif
1875:src/display.c **** 	  negative = 0;
1876:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1877:src/display.c **** 	}
1878:src/display.c **** 	else {
1879:src/display.c **** 	  upper_str = x;
1880:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1881:src/display.c **** 	  x[1] = decimal_mark;
1882:src/display.c **** 	  if (grouping) {
1883:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1884:src/display.c **** 	    x[5] = thousands_sep;
1885:src/display.c **** 	    x += 9;
1886:src/display.c **** 	  }
1887:src/display.c **** 	  else x += 8;
1888:src/display.c **** 	  if (dbl) {
1889:src/display.c **** 	    if (exp < 0) {
1890:src/display.c **** 	      x[9] = '-';
1891:src/display.c **** 	      exp = -exp;
1892:src/display.c **** 	    }
1893:src/display.c **** 	    else
1894:src/display.c **** 	      x[9] = ' ';
1895:src/display.c **** 	    j = exp / 1000;
1896:src/display.c **** 	    x[10] = '0' + j;
1897:src/display.c **** 	    exp -= 1000 * j;
1898:src/display.c **** 	  }
1899:src/display.c **** 	  else {
1900:src/display.c **** 	    x[9] = '\0';
1901:src/display.c **** 	    x[10] = '\0';
1902:src/display.c **** 	  }
1903:src/display.c **** 	  xcopy(x + 1, x, 11);
1904:src/display.c **** 	  *x = 0;
1905:src/display.c **** 	  set_exp(exp, 1, CNULL);
1906:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1907:src/display.c **** 	}
1908:src/display.c **** 	if (grouping) {
1909:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1910:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1911:src/display.c **** 	  }
1912:src/display.c **** 	}
1913:src/display.c **** 
1914:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1915:src/display.c **** 	  set_dig(j, x[i]);
1916:src/display.c **** 
1917:src/display.c **** 	*x = '\0';
1918:src/display.c **** 	set_status(upper_str - negative);
1919:src/display.c ****       }
1920:src/display.c **** 
1921:src/display.c **** 
1922:src/display.c ****       /* Display the X register in the numeric portion of the display.
ARM GAS  /tmp/ccZdZ92R.s 			page 111


1923:src/display.c ****        * We have to account for the various display modes and numbers of
1924:src/display.c ****        * digits.
1925:src/display.c ****        */
1926:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1927:src/display.c **** 	decNumber z;
1928:src/display.c **** 	int digits = DISPLAY_DIGITS;
1929:src/display.c **** 
1930:src/display.c **** 	if (dbl)
1931:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1932:src/display.c **** 	else
1933:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1934:src/display.c **** 	set_x_dn(&z, res, &digits);
1935:src/display.c ****       }
1936:src/display.c **** 
1937:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1938:src/display.c **** 	char x[50], *obp = x;
1939:src/display.c **** 	int odig = 0;
1940:src/display.c **** 	int show_exp = 0;
1941:src/display.c **** 	int j;
1942:src/display.c **** 	char mantissa[64];
1943:src/display.c **** 	int exp = 0;
1944:src/display.c **** 	char *p = mantissa;
1945:src/display.c **** 	char *r;
1946:src/display.c **** 	const char *q;
1947:src/display.c **** 	int count, i;
1948:src/display.c **** 	int extra_digits = 0;
1949:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1950:src/display.c **** 	int dd;
1951:src/display.c **** 	int dispdigs;
1952:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1953:src/display.c **** #else
1954:src/display.c **** 	int dd = UState.dispdigs;
1955:src/display.c **** 	int mode = UState.dispmode;
1956:src/display.c **** #endif
1957:src/display.c **** 	int c;
1958:src/display.c **** 	int negative = 0;
1959:src/display.c **** 	int trimzeros = 0;
1960:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1961:src/display.c **** 	const int show_large_exponent = 0;
1962:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1963:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1964:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1965:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1966:src/display.c **** #else
1967:src/display.c **** 	const int show_large_exponent = 1;
1968:src/display.c **** #endif
1969:src/display.c **** 
1970:src/display.c **** 	set_separator_decimal_modes();
1971:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1972:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1973:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1974:src/display.c **** 	    if (State2.hms) {
1975:src/display.c **** 	      set_x_hms(z, res);
1976:src/display.c **** 	      return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	    else if (UState.fract) {
1979:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/ccZdZ92R.s 			page 112


1980:src/display.c **** 		return;
1981:src/display.c **** 	    }
1982:src/display.c **** 	  }
1983:src/display.c **** 	}		
1984:src/display.c **** #else
1985:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1986:src/display.c **** 	  if (State2.hms) {
1987:src/display.c **** 	    set_x_hms(z, res);
1988:src/display.c **** 	    State2.hms = 0;
1989:src/display.c **** 	    return;
1990:src/display.c **** 	  } else if (UState.fract) {
1991:src/display.c **** 	    if (set_x_fract(z, res))
1992:src/display.c **** 	      return;
1993:src/display.c **** 	  }
1994:src/display.c **** 	}
1995:src/display.c **** #endif
1996:src/display.c **** 
1997:src/display.c **** 	if (check_special_dn(z, res))
1998:src/display.c **** 	  return;
1999:src/display.c **** 
2000:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2001:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2002:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2003:src/display.c **** 	  z->exponent = 0;
2004:src/display.c **** 	}
2005:src/display.c **** 
2006:src/display.c **** 	xset(x, '\0', sizeof(x));
2007:src/display.c **** 
2008:src/display.c **** 	if (dn_eq0(z)) {
2009:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2010:src/display.c **** 	    x[0] = '-';
2011:src/display.c **** 	    x[1] = '0';
2012:src/display.c **** 	  } else
2013:src/display.c **** 	    x[0] = '0';
2014:src/display.c **** 	} else
2015:src/display.c **** 	  decNumberToString(z, x);
2016:src/display.c **** 
2017:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2018:src/display.c **** 	  show_x(x, exp);
2019:src/display.c **** 	  return;
2020:src/display.c **** 	}
2021:src/display.c **** 
2022:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2023:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2024:src/display.c **** 	  //  ALL mode: fill the display
2025:src/display.c **** 	  dd = *display_digits - 1;
2026:src/display.c **** 	else
2027:src/display.c **** 	  dd = dispdigs;
2028:src/display.c **** 
2029:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
2030:src/display.c **** 	  int orig_mode = mode;
2031:src/display.c **** 
2032:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2033:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2034:src/display.c **** 	    // allow zeros to be trimmed
2035:src/display.c **** 	    trimzeros = 1;
2036:src/display.c **** 	  if (orig_mode == MODE_STD)
ARM GAS  /tmp/ccZdZ92R.s 			page 113


2037:src/display.c **** 	    dd = *display_digits - 1;
2038:src/display.c ****  	}
2039:src/display.c **** #else
2040:src/display.c **** 	if (mode == MODE_STD) {
2041:src/display.c **** 	  mode = std_round_fix(z);
2042:src/display.c **** 	  trimzeros = 1;
2043:src/display.c **** 	  dd = *display_digits - 1;
2044:src/display.c **** 	} else if (dd >= *display_digits)
2045:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2046:src/display.c **** 	  dd = *display_digits - 1;
2047:src/display.c **** #endif
2048:src/display.c **** 
2049:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2050:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2051:src/display.c **** 
2052:src/display.c **** 	q = find_char(x, 'E');
2053:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2054:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2055:src/display.c **** 	if (q == NULL) exp = 0;
2056:src/display.c **** 	else {
2057:src/display.c **** 	  exp = s_to_i(q+1);
2058:src/display.c **** 	  if (*q == 'D') exp = -exp;
2059:src/display.c **** 	}
2060:src/display.c **** #else
2061:src/display.c **** 	if (q == NULL) exp = 0;
2062:src/display.c **** 	else exp = s_to_i(q+1);
2063:src/display.c **** #endif
2064:src/display.c **** 
2065:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2066:src/display.c **** 	for (q=x; *q == ' '; q++);
2067:src/display.c **** 	if (!res) {
2068:src/display.c **** 	  CLR_EXP_SIGN;
2069:src/display.c **** 	  CLR_MANT_SIGN;
2070:src/display.c **** 	}
2071:src/display.c **** 	if (*q == '-') {
2072:src/display.c **** 	  negative = 1;
2073:src/display.c **** 	  q++;
2074:src/display.c **** 	} else if (*q == '+')
2075:src/display.c **** 	  q++;
2076:src/display.c **** 	for (; *q == '0'; q++);
2077:src/display.c **** 	if (*q == '.') {
2078:src/display.c **** 	  do
2079:src/display.c **** 	    exp--;
2080:src/display.c **** 	  while (*++q == '0');
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2082:src/display.c **** 	    *p++ = *q++;
2083:src/display.c **** 	} else {
2084:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2085:src/display.c **** 	    *p++ = *q++;
2086:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2087:src/display.c **** 	    *p++ = *q++;
2088:src/display.c **** 	    exp++;
2089:src/display.c **** 	  }
2090:src/display.c **** 	  if (*q == '.') {
2091:src/display.c **** 	    q++;
2092:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2093:src/display.c **** 	      *p++ = *q++;
ARM GAS  /tmp/ccZdZ92R.s 			page 114


2094:src/display.c **** 	  }
2095:src/display.c **** 	}
2096:src/display.c **** 
2097:src/display.c **** 	if (mode == MODE_FIX) {
2098:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2099:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2100:src/display.c **** 	  else {
2101:src/display.c **** 	    extra_digits = exp;
2102:src/display.c **** 	    /* We might have push the fixed decimals off the
2103:src/display.c **** 	     * screen so adjust if so.
2104:src/display.c **** 	     */
2105:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2106:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2107:src/display.c **** 	  }
2108:src/display.c **** 	}
2109:src/display.c **** 
2110:src/display.c **** 	// Round the mantissa to the number of digits desired
2111:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2112:src/display.c **** 	if (*p >= '5') {	// Round up
2113:src/display.c **** 	  *p = '0';
2114:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2115:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2116:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2117:src/display.c **** 	    mantissa[0] = '1';
2118:src/display.c **** 	    exp++;
2119:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2120:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2121:src/display.c **** 	      extra_digits = 0;
2122:src/display.c **** 	    }
2123:src/display.c **** 	  } else {
2124:src/display.c **** 	    while (*--p == '9')
2125:src/display.c **** 	      *p = '0';
2126:src/display.c **** 	    (*p)++;
2127:src/display.c **** 	  }
2128:src/display.c **** 	}
2129:src/display.c **** 
2130:src/display.c **** 	// Zap what is left
2131:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2132:src/display.c **** 
2133:src/display.c **** 	p = mantissa;
2134:src/display.c **** 	switch (mode) {
2135:src/display.c **** 	default:
2136:src/display.c **** 	case MODE_STD:   
2137:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2138:src/display.c **** 	  if (count != *display_digits)
2139:src/display.c **** 	    count++;
2140:src/display.c **** 	  // Too big or too small to fit on display
2141:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2142:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2143:src/display.c **** 	    case -1:
2144:src/display.c **** 	    case 2:
2145:src/display.c **** 	      *obp++ = *p++;
2146:src/display.c **** 	      odig++;
2147:src/display.c **** 	      dd--;
2148:src/display.c **** 	      exp--;
2149:src/display.c **** 	    case -2:
2150:src/display.c **** 	    case 1:
ARM GAS  /tmp/ccZdZ92R.s 			page 115


2151:src/display.c **** 	      *obp++ = *p++;
2152:src/display.c **** 	      odig++;
2153:src/display.c **** 	      dd--;
2154:src/display.c **** 	      exp--;
2155:src/display.c **** 	    case 0:
2156:src/display.c **** 	      ;
2157:src/display.c **** 	    };
2158:src/display.c **** 	    *obp++ = *p++;
2159:src/display.c **** 	    odig++;
2160:src/display.c **** 	    *obp++ = '.';
2161:src/display.c **** 	    for (i=1; i<count; i++) {
2162:src/display.c **** 	      *obp++ = *p++;
2163:src/display.c **** 	      odig++;
2164:src/display.c **** 	    }
2165:src/display.c **** 	    show_exp = 1;
2166:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2167:src/display.c **** 	    for(i=0; i<=exp; i++) {
2168:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2169:src/display.c **** 		*obp++ = ',';
2170:src/display.c **** 	      *obp++ = *p++;
2171:src/display.c **** 	      odig++;
2172:src/display.c **** 	    }
2173:src/display.c **** 	    *obp++ = '.';
2174:src/display.c **** 	    if (count > (exp + 1)) {
2175:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2176:src/display.c **** 		*obp++ = *p++;
2177:src/display.c **** 		odig++;
2178:src/display.c **** 	      }
2179:src/display.c **** 	    }
2180:src/display.c **** 	  } else {		// All digits to right of decimal point
2181:src/display.c **** 	    *obp++ = '0';
2182:src/display.c **** 	    odig++;
2183:src/display.c **** 	    *obp++ = '.';
2184:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2185:src/display.c **** 	      *obp++ = '0';
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	    for (i=0; i<count; i++) {
2189:src/display.c **** 	      *obp++ = *p++;
2190:src/display.c **** 	      odig++;
2191:src/display.c **** 	    }
2192:src/display.c **** 	  }
2193:src/display.c **** 	  break;
2194:src/display.c **** 
2195:src/display.c **** 	case MODE_FIX:
2196:src/display.c **** 	  j = 0;
2197:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2198:src/display.c **** 	    for (i=0; i<=exp; i++) {
2199:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2200:src/display.c **** 		*obp++ = ',';
2201:src/display.c **** 	      *obp++ = *p++;
2202:src/display.c **** 	      odig++;
2203:src/display.c **** 	    }
2204:src/display.c **** 	    *obp++ = '.';
2205:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2206:src/display.c **** 	      *obp++ = *p++;
2207:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccZdZ92R.s 			page 116


2208:src/display.c **** 	    }
2209:src/display.c **** 	  } else {		// All digits to right of decimal point
2210:src/display.c **** 	    *obp++ = '0';
2211:src/display.c **** 	    odig++;
2212:src/display.c **** 	    *obp++ = '.';
2213:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2214:src/display.c **** 	      *obp++ = '0';
2215:src/display.c **** 	      odig++;
2216:src/display.c **** 	      dd--;
2217:src/display.c **** 	    }
2218:src/display.c **** 	    while (dd-- > 0) {
2219:src/display.c **** 	      *obp++ = *p++;
2220:src/display.c **** 	      odig++;
2221:src/display.c **** 	    }
2222:src/display.c **** 	  }
2223:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2224:src/display.c **** 	  if (trimzeros)
2225:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2226:src/display.c **** 	      obp--;
2227:src/display.c **** 	      odig--;
2228:src/display.c **** 	    }
2229:src/display.c **** #endif			
2230:src/display.c **** 	  break;
2231:src/display.c **** 
2232:src/display.c **** 	case MODE_ENG:
2233:src/display.c **** 	  switch (exp % 3) {
2234:src/display.c **** 	  case -1:
2235:src/display.c **** 	  case 2:
2236:src/display.c **** 	    *obp++ = *p++;
2237:src/display.c **** 	    odig++;
2238:src/display.c **** 	    dd--;
2239:src/display.c **** 	    exp--;
2240:src/display.c **** 	  case -2:
2241:src/display.c **** 	  case 1:
2242:src/display.c **** 	    *obp++ = *p++;
2243:src/display.c **** 	    odig++;
2244:src/display.c **** 	    dd--;
2245:src/display.c **** 	    exp--;
2246:src/display.c **** 	  case 0:
2247:src/display.c **** 	    ;
2248:src/display.c **** 	  };
2249:src/display.c **** 	  // Falling through
2250:src/display.c **** 
2251:src/display.c **** 	case MODE_SCI:
2252:src/display.c **** 	  *obp++ = *p++;
2253:src/display.c **** 	  odig++;
2254:src/display.c **** 	  *obp++ = '.';
2255:src/display.c **** 	  dd--;
2256:src/display.c **** 	  while (dd-- >= 0) {
2257:src/display.c **** 	    *obp++ = *p++;
2258:src/display.c **** 	    odig++;
2259:src/display.c **** 	  }
2260:src/display.c **** 	  show_exp = 1;
2261:src/display.c **** 	}
2262:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2263:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2264:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
ARM GAS  /tmp/ccZdZ92R.s 			page 117


2265:src/display.c **** 	    obp--;
2266:src/display.c **** 	    odig--;
2267:src/display.c **** 	  }
2268:src/display.c **** #endif	
2269:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2270:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2271:src/display.c **** 	  set_x_dn(z, res, display_digits);
2272:src/display.c **** 	  return;
2273:src/display.c **** 	}
2274:src/display.c **** 	/* Finally, send the output to the display */
2275:src/display.c **** 	*obp = '\0';
2276:src/display.c **** 	if (odig > *display_digits)
2277:src/display.c **** 	  odig = *display_digits;
2278:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2279:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2280:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2281:src/display.c **** 	if (negative) {
2282:src/display.c **** 	  if (res) *res++ = '-';
2283:src/display.c **** 	  else {
2284:src/display.c **** 	    if (j == 0)
2285:src/display.c **** 	      SET_MANT_SIGN;
2286:src/display.c **** 	    else
2287:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2288:src/display.c **** 	  }
2289:src/display.c **** 	}
2290:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2291:src/display.c **** 	  if (c == '.') {
2292:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2293:src/display.c **** 	  } else if (c == ',') {
2294:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2295:src/display.c **** 	  } else {
2296:src/display.c **** 	    res = set_dig_s(j, c, res);
2297:src/display.c **** 	    j += SEGS_PER_DIGIT;
2298:src/display.c **** 	  }
2299:src/display.c **** 	}
2300:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2301:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2302:src/display.c **** 	  if ( !res ) {
2303:src/display.c **** 	    set_exp(exp, 4, res);
2304:src/display.c **** 	  }
2305:src/display.c **** 	  else {
2306:src/display.c **** 	    set_exp(exp, 0, res);
2307:src/display.c **** 	  }
2308:src/display.c **** 	}
2309:src/display.c **** #else
2310:src/display.c **** 	if (show_exp)
2311:src/display.c **** 	  set_exp(exp, 0, res);
2312:src/display.c **** #endif
2313:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2314:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2315:src/display.c **** 	*display_digits = odig;
2316:src/display.c ****       }
2317:src/display.c **** 
2318:src/display.c **** #if defined(QTGUI) || defined(IOS)
2319:src/display.c ****       void format_display(char *buf) {
2320:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2321:src/display.c **** 	  {
ARM GAS  /tmp/ccZdZ92R.s 			page 118


2322:src/display.c **** 	    const char *p = get_cmdline();
2323:src/display.c **** 	    if (p == NULL) {
2324:src/display.c **** 	      format_reg(regX_idx, buf);
2325:src/display.c **** 	    } else {
2326:src/display.c **** 	      scopy(buf, p);
2327:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2328:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2329:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2330:src/display.c **** 		buf[CmdLineEex] = 'E';
2331:src/display.c **** 		buf[CmdLineEex+1] = '-';
2332:src/display.c **** 	      }
2333:src/display.c **** #  endif
2334:src/display.c **** 	    }
2335:src/display.c **** 	  }
2336:src/display.c **** 	else {
2337:src/display.c **** 	  buf[0]=0;
2338:src/display.c **** 	}
2339:src/display.c ****       }
2340:src/display.c **** #endif
2341:src/display.c **** 
2342:src/display.c ****       void format_reg(int index, char *buf) {
2343:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2344:src/display.c **** 
2345:src/display.c **** 	if (is_intmode())
2346:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2347:src/display.c **** #ifndef HP16C_MODE_CHANGE
2348:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2349:src/display.c **** 	  decNumber x;
2350:src/display.c **** 	  int s;
2351:src/display.c **** 	  unsigned long long int v;
2352:src/display.c **** 
2353:src/display.c **** 	  getRegister(&x, index);
2354:src/display.c **** 	  v = dn_to_ull(&x, &s);
2355:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2356:src/display.c **** 	}
2357:src/display.c **** #endif
2358:src/display.c **** 	else
2359:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2360:src/display.c ****       }
2361:src/display.c **** 
2362:src/display.c ****       /* Display the status screen */
2363:src/display.c ****       static void show_status(void) {
2364:src/display.c **** 	int i, n;
2365:src/display.c **** 	int j = SEGS_EXP_BASE;
2366:src/display.c **** 	const int status = State2.status - 3;
2367:src/display.c **** 	char buf[16], *p = buf;
2368:src/display.c **** 	unsigned int pc;
2369:src/display.c **** 
2370:src/display.c **** 	if (status == -2) {
2371:src/display.c **** 	  set_status("Free:");
2372:src/display.c **** 	  p = num_arg(buf, free_mem());
2373:src/display.c **** 	  p = scopy(p, " , FL. ");
2374:src/display.c **** 	  p = num_arg(p, free_flash());
2375:src/display.c **** 	  *p = '\0';
2376:src/display.c **** 	  set_digits_string(buf, 0);
2377:src/display.c **** 	}
2378:src/display.c **** 	else if (status == -1) {
ARM GAS  /tmp/ccZdZ92R.s 			page 119


2379:src/display.c **** 	  /* Top line */
2380:src/display.c **** 	  p = scopy(buf, "Regs:");
2381:src/display.c **** 	  if (SizeStatRegs)
2382:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2383:src/display.c **** 	  *p = '\0';
2384:src/display.c **** 	  set_status(buf);
2385:src/display.c **** 
2386:src/display.c **** 	  /* Bottom line */
2387:src/display.c **** 	  p = num_arg(buf, global_regs());
2388:src/display.c **** 	  if (LocalRegs < 0) {
2389:src/display.c **** 	    p = scopy(p, " , Loc. ");
2390:src/display.c **** 	    p = num_arg(p, local_regs());
2391:src/display.c **** 	  }
2392:src/display.c **** 	  *p = '\0';
2393:src/display.c **** 	  set_digits_string(buf, 0);
2394:src/display.c **** 	} else {
2395:src/display.c **** 	  int base;
2396:src/display.c **** 	  int end;
2397:src/display.c **** 	  int group = 10;
2398:src/display.c **** 	  int start = 0;
2399:src/display.c **** 		
2400:src/display.c **** 	  if (status <= 9) {
2401:src/display.c **** 	    base = 10 * status;
2402:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2403:src/display.c **** 	    p = scopy(buf, "FL ");
2404:src/display.c **** 	    p = num_arg_0(p, base, 2);
2405:src/display.c **** 	    *p++ = '-';
2406:src/display.c **** 	    p = num_arg_0(p, end, 2);
2407:src/display.c **** 	    *p = '\0';
2408:src/display.c **** 	    set_status(buf);
2409:src/display.c **** 	  }
2410:src/display.c **** 	  else if (status == 10) {
2411:src/display.c **** 	    base = regX_idx;
2412:src/display.c **** 	    end = regK_idx;
2413:src/display.c **** 	    start = 3;
2414:src/display.c **** 	    group = 4;
2415:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2416:src/display.c **** 	  }
2417:src/display.c **** 	  else { // status == 11
2418:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2419:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2420:src/display.c **** 	    set_status("FL.00-.15");
2421:src/display.c **** 	  }
2422:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2423:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2424:src/display.c **** 	  j += SEGS_PER_DIGIT;
2425:src/display.c **** 	  for (i = start; i < group + start; i++) {
2426:src/display.c **** 	    int k = i + base - start;
2427:src/display.c **** 	    int l = get_user_flag(k);
2428:src/display.c **** 	    k += group;
2429:src/display.c **** 	    if (end >= k) {
2430:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2431:src/display.c **** 	      k += group;
2432:src/display.c **** 	      if (end >= k)
2433:src/display.c **** 		l |= (get_user_flag(k) << 2);
2434:src/display.c **** 	    }
2435:src/display.c **** 	    set_dig(j, l);
ARM GAS  /tmp/ccZdZ92R.s 			page 120


2436:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	    j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    if (i == 4) {
2439:src/display.c **** 	      set_dig(j, 8);
2440:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2441:src/display.c **** 	      j += SEGS_PER_DIGIT;
2442:src/display.c **** 	    }
2443:src/display.c **** 	  }
2444:src/display.c **** 	}
2445:src/display.c **** 
2446:src/display.c **** 	j = SEGS_EXP_BASE;
2447:src/display.c **** 	pc = state_pc();
2448:src/display.c **** 	if (isXROM(pc))
2449:src/display.c **** 	  pc = 1;
2450:src/display.c **** 	for (n=i=0; i<4; i++) {
2451:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2452:src/display.c **** 	    if (++n == 4) {
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2455:src/display.c **** 	    } else {
2456:src/display.c **** 	      set_dig(j, 'A'+i);
2457:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2458:src/display.c **** 	    }
2459:src/display.c **** 	  }
2460:src/display.c **** 	}
2461:src/display.c ****       }
2462:src/display.c **** 
2463:src/display.c **** 
2464:src/display.c ****       /* Display the list of alpha labels */
2465:src/display.c ****       static void show_label(void) {
2466:src/display.c **** 	char buf[16];
2467:src/display.c **** 	unsigned short int pc = State2.digval;
2468:src/display.c **** 	unsigned int op = getprog(pc);
2469:src/display.c **** 	int n = nLIB(pc);
2470:src/display.c **** 	unsigned short int lblpc;
2471:src/display.c **** 
2472:src/display.c **** 	set_status(prt((opcode)op, buf));
2473:src/display.c **** 	set_digits_string(libname[n], 0);
2474:src/display.c **** #ifndef REALBUILD
2475:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2476:src/display.c **** #endif
2477:src/display.c **** 
2478:src/display.c **** 	if (op & OP_DBL) {
2479:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2480:src/display.c **** 	  if (lblpc != pc) {
2481:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2482:src/display.c **** 	    n = nLIB(lblpc);
2483:src/display.c **** 	    if (n == REGION_RAM)
2484:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2485:src/display.c **** 	    else {
2486:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2487:src/display.c **** #ifndef REALBUILD
2488:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2489:src/display.c **** #endif
2490:src/display.c **** 	    }
2491:src/display.c **** 	  }
2492:src/display.c **** 	}
ARM GAS  /tmp/ccZdZ92R.s 			page 121


2493:src/display.c ****       }
2494:src/display.c **** 
2495:src/display.c ****       /* Display a list of register contents */
2496:src/display.c ****       static void show_registers(void) {
2497:src/display.c **** 	char buf[16], *bp;
2498:src/display.c **** 	int n = State2.digval;
2499:src/display.c **** 	
2500:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2501:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2502:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2503:src/display.c **** 	  n;
2504:src/display.c **** #else
2505:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2506:src/display.c **** 	  n;
2507:src/display.c **** #endif
2508:src/display.c **** 
2509:src/display.c **** 	if (State2.disp_as_alpha) {
2510:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2511:src/display.c **** 	}
2512:src/display.c **** 	else {
2513:src/display.c **** 	  xset(buf, '\0', 16);
2514:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2515:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2516:src/display.c **** #else
2517:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2518:src/display.c **** #endif
2519:src/display.c **** 	  if (State2.local) {
2520:src/display.c **** 	    *bp++ = '.';
2521:src/display.c **** 	    if (n >= 100) {
2522:src/display.c **** 	      *bp++ = '1';
2523:src/display.c **** 	      n -= 100;
2524:src/display.c **** 	    }
2525:src/display.c **** 	  }
2526:src/display.c **** 	  if (n < 100)
2527:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2528:src/display.c **** 	  else
2529:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2530:src/display.c **** 	  set_status(buf);
2531:src/display.c **** 	}
2532:src/display.c **** 	format_reg(reg, CNULL);
2533:src/display.c ****       }
2534:src/display.c **** 
2535:src/display.c **** 
2536:src/display.c ****       static void set_annunciators(void)
2537:src/display.c ****       {
 3422              		.loc 1 2537 7 is_stmt 1 view -0
 3423              		.cfi_startproc
 3424              		@ args = 0, pretend = 0, frame = 0
 3425              		@ frame_needed = 0, uses_anonymous_args = 0
2538:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3426              		.loc 1 2538 2 view .LVU1036
2537:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3427              		.loc 1 2537 7 is_stmt 0 view .LVU1037
 3428 0000 70B5     		push	{r4, r5, r6, lr}
 3429              		.cfi_def_cfa_offset 16
 3430              		.cfi_offset 4, -16
 3431              		.cfi_offset 5, -12
ARM GAS  /tmp/ccZdZ92R.s 			page 122


 3432              		.cfi_offset 6, -8
 3433              		.cfi_offset 14, -4
2539:src/display.c **** 
2540:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2541:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2542:src/display.c **** 	 * browsing constants.
2543:src/display.c **** 	 */
2544:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2545:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2546:src/display.c **** #else
2547:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
 3434              		.loc 1 2547 11 view .LVU1038
 3435 0002 344E     		ldr	r6, .L348
2538:src/display.c **** 
 3436              		.loc 1 2538 29 view .LVU1039
 3437 0004 FFF7FEFF 		bl	get_trig_mode
 3438              	.LVL389:
 3439              		.loc 1 2547 11 view .LVU1040
 3440 0008 3368     		ldr	r3, [r6]
 3441              		.loc 1 2547 2 view .LVU1041
 3442 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3443 000e 012B     		cmp	r3, #1
2538:src/display.c **** 
 3444              		.loc 1 2538 29 view .LVU1042
 3445 0010 0446     		mov	r4, r0
 3446              	.LVL390:
 3447              		.loc 1 2547 2 is_stmt 1 view .LVU1043
 3448              	.LBB293:
 3449              	.LBB294:
 340:src/display.c ****   else	clr_dot(n);
 3450              		.loc 1 340 11 is_stmt 0 view .LVU1044
 3451 0012 4FF08800 		mov	r0, #136
 3452              	.LBE294:
 3453              	.LBE293:
 3454              		.loc 1 2547 2 view .LVU1045
 3455 0016 03D8     		bhi	.L323
 3456              		.loc 1 2547 30 discriminator 1 view .LVU1046
 3457 0018 2F4B     		ldr	r3, .L348+4
 3458              		.loc 1 2547 2 discriminator 1 view .LVU1047
 3459 001a 1B68     		ldr	r3, [r3]
 3460 001c 002B     		cmp	r3, #0
 3461 001e 56D0     		beq	.L344
 3462              	.L323:
 3463              	.LVL391:
 3464              	.LBB297:
 3465              	.LBI293:
 339:src/display.c ****   if (on)	set_dot(n);
 3466              		.loc 1 339 6 is_stmt 1 view .LVU1048
 3467              	.LBB295:
 340:src/display.c ****   else	clr_dot(n);
 3468              		.loc 1 340 3 view .LVU1049
 341:src/display.c **** }
 3469              		.loc 1 341 8 view .LVU1050
 3470 0020 FFF7FEFF 		bl	clr_dot
 3471              	.LVL392:
 3472              	.L324:
 341:src/display.c **** }
ARM GAS  /tmp/ccZdZ92R.s 			page 123


 3473              		.loc 1 341 8 is_stmt 0 view .LVU1051
 3474              	.LBE295:
 3475              	.LBE297:
2548:src/display.c **** #endif
2549:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
 3476              		.loc 1 2549 2 is_stmt 1 view .LVU1052
 3477              		.loc 1 2549 19 is_stmt 0 view .LVU1053
 3478 0024 2D4D     		ldr	r5, .L348+8
 3479              		.loc 1 2549 2 view .LVU1054
 3480 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3481              	.LBB298:
 3482              	.LBB299:
 340:src/display.c ****   else	clr_dot(n);
 3483              		.loc 1 340 11 view .LVU1055
 3484 0028 8620     		movs	r0, #134
 3485              	.LBE299:
 3486              	.LBE298:
 3487              		.loc 1 2549 2 view .LVU1056
 3488 002a 23B9     		cbnz	r3, .L325
 3489              		.loc 1 2549 47 discriminator 2 view .LVU1057
 3490 002c 6A69     		ldr	r2, [r5, #20]
 3491 002e 2C4B     		ldr	r3, .L348+12
 3492 0030 1340     		ands	r3, r3, r2
 3493              		.loc 1 2549 2 discriminator 2 view .LVU1058
 3494 0032 002B     		cmp	r3, #0
 3495 0034 48D0     		beq	.L345
 3496              	.L325:
 3497              	.LBB302:
 3498              	.LBB300:
 340:src/display.c ****   else	clr_dot(n);
 3499              		.loc 1 340 11 is_stmt 1 view .LVU1059
 3500 0036 FFF7FEFF 		bl	set_dot
 3501              	.LVL393:
 3502              	.L326:
 3503              	.LBE300:
 3504              	.LBE302:
2550:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3505              		.loc 1 2550 2 view .LVU1060
 3506              		.loc 1 2550 31 is_stmt 0 view .LVU1061
 3507 003a 2A4A     		ldr	r2, .L348+16
 3508 003c 6B69     		ldr	r3, [r5, #20]
 3509              		.loc 1 2550 2 view .LVU1062
 3510 003e 1A42     		tst	r2, r3
 3511              	.LBB303:
 3512              	.LBB304:
 340:src/display.c ****   else	clr_dot(n);
 3513              		.loc 1 340 11 view .LVU1063
 3514 0040 4FF08500 		mov	r0, #133
 3515              	.LBE304:
 3516              	.LBE303:
 3517              		.loc 1 2550 2 view .LVU1064
 3518 0044 02D0     		beq	.L327
 3519              		.loc 1 2550 48 discriminator 1 view .LVU1065
 3520 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 3521              		.loc 1 2550 2 discriminator 1 view .LVU1066
 3522 0048 DA06     		lsls	r2, r3, #27
 3523 004a 3AD4     		bmi	.L328
ARM GAS  /tmp/ccZdZ92R.s 			page 124


 3524              	.L327:
 3525              	.LVL394:
 3526              	.LBB307:
 3527              	.LBI303:
 339:src/display.c ****   if (on)	set_dot(n);
 3528              		.loc 1 339 6 is_stmt 1 view .LVU1067
 3529              	.LBB305:
 340:src/display.c ****   else	clr_dot(n);
 3530              		.loc 1 340 3 view .LVU1068
 341:src/display.c **** }
 3531              		.loc 1 341 8 view .LVU1069
 3532 004c FFF7FEFF 		bl	clr_dot
 3533              	.LVL395:
 3534              	.L329:
 341:src/display.c **** }
 3535              		.loc 1 341 8 is_stmt 0 view .LVU1070
 3536              	.LBE305:
 3537              	.LBE307:
2551:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3538              		.loc 1 2551 2 is_stmt 1 view .LVU1071
 3539 0050 6820     		movs	r0, #104
 3540 0052 FFF7FEFF 		bl	get_user_flag
 3541              	.LVL396:
 3542              	.LBB308:
 3543              	.LBI308:
 339:src/display.c ****   if (on)	set_dot(n);
 3544              		.loc 1 339 6 view .LVU1072
 3545              	.LBB309:
 340:src/display.c ****   else	clr_dot(n);
 3546              		.loc 1 340 3 view .LVU1073
 340:src/display.c ****   else	clr_dot(n);
 3547              		.loc 1 340 6 is_stmt 0 view .LVU1074
 3548 0056 28B3     		cbz	r0, .L330
 340:src/display.c ****   else	clr_dot(n);
 3549              		.loc 1 340 11 is_stmt 1 view .LVU1075
 3550              	.LBE309:
 3551              	.LBE308:
 3552              	.LBB313:
 3553              	.LBB314:
2552:src/display.c **** 	set_IO_annunciator();
2553:src/display.c **** 
2554:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2555:src/display.c **** 	 */
2556:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2557:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2558:src/display.c ****       }
2559:src/display.c **** 
2560:src/display.c **** 
2561:src/display.c ****       /*
2562:src/display.c ****        *  Toggle the little "=" sign
2563:src/display.c ****        */
2564:src/display.c ****       void set_IO_annunciator(void) {
2565:src/display.c **** #ifndef DM42
2566:src/display.c **** 	int on = SerialOn
2567:src/display.c **** #endif
2568:src/display.c **** #ifdef DM42
2569:src/display.c **** 	  int on = 0
ARM GAS  /tmp/ccZdZ92R.s 			page 125


2570:src/display.c **** #endif
2571:src/display.c **** #ifdef REALBUILD
2572:src/display.c **** 	  || DebugFlag
2573:src/display.c **** #endif
2574:src/display.c **** #ifdef INFRARED
2575:src/display.c **** 	  || PrinterColumn != 0
2576:src/display.c **** #endif
2577:src/display.c **** 	  ;
2578:src/display.c **** 
2579:src/display.c **** 	if (on != IoAnnunciator) {
 3554              		.loc 1 2579 9 is_stmt 0 view .LVU1076
 3555 0058 234D     		ldr	r5, .L348+20
 3556              	.LBE314:
 3557              	.LBE313:
 3558              	.LBB322:
 3559              	.LBB310:
 340:src/display.c ****   else	clr_dot(n);
 3560              		.loc 1 340 11 view .LVU1077
 3561 005a 8320     		movs	r0, #131
 3562              	.LVL397:
 340:src/display.c ****   else	clr_dot(n);
 3563              		.loc 1 340 11 view .LVU1078
 3564 005c FFF7FEFF 		bl	set_dot
 3565              	.LVL398:
 340:src/display.c ****   else	clr_dot(n);
 3566              		.loc 1 340 11 view .LVU1079
 3567              	.LBE310:
 3568              	.LBE322:
2552:src/display.c **** 	set_IO_annunciator();
 3569              		.loc 1 2552 2 is_stmt 1 view .LVU1080
 3570              	.LBB323:
 3571              	.LBI313:
2564:src/display.c **** #ifndef DM42
 3572              		.loc 1 2564 12 view .LVU1081
 3573              	.LBB319:
2569:src/display.c **** #endif
 3574              		.loc 1 2569 4 view .LVU1082
 3575              		.loc 1 2579 2 view .LVU1083
 3576              		.loc 1 2579 5 is_stmt 0 view .LVU1084
 3577 0060 2B68     		ldr	r3, [r5]
 3578 0062 33BB     		cbnz	r3, .L346
 3579              	.L332:
 3580              	.LBE319:
 3581              	.LBE323:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3582              		.loc 1 2556 2 is_stmt 1 view .LVU1085
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3583              		.loc 1 2556 11 is_stmt 0 view .LVU1086
 3584 0064 3368     		ldr	r3, [r6]
 3585 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3586 006a 03F00103 		and	r3, r3, #1
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3587              		.loc 1 2556 2 view .LVU1087
 3588 006e 2343     		orrs	r3, r3, r4
 3589 0070 13F0FF0F 		tst	r3, #255
 3590              	.LBB324:
 3591              	.LBB325:
ARM GAS  /tmp/ccZdZ92R.s 			page 126


 340:src/display.c ****   else	clr_dot(n);
 3592              		.loc 1 340 11 view .LVU1088
 3593 0074 4FF08C00 		mov	r0, #140
 3594              	.LBE325:
 3595              	.LBE324:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3596              		.loc 1 2556 2 view .LVU1089
 3597 0078 06D1     		bne	.L347
 3598              	.LVL399:
 3599              	.LBB328:
 3600              	.LBI324:
 339:src/display.c ****   if (on)	set_dot(n);
 3601              		.loc 1 339 6 is_stmt 1 view .LVU1090
 3602              	.LBB326:
 340:src/display.c ****   else	clr_dot(n);
 3603              		.loc 1 340 3 view .LVU1091
 340:src/display.c ****   else	clr_dot(n);
 3604              		.loc 1 340 11 view .LVU1092
 3605 007a FFF7FEFF 		bl	set_dot
 3606              	.LVL400:
 340:src/display.c ****   else	clr_dot(n);
 3607              		.loc 1 340 11 is_stmt 0 view .LVU1093
 3608              	.LBE326:
 3609              	.LBE328:
2557:src/display.c ****       }
 3610              		.loc 1 2557 2 is_stmt 1 view .LVU1094
 3611              	.L335:
 3612              	.LBB329:
 3613              	.LBI329:
 339:src/display.c ****   if (on)	set_dot(n);
 3614              		.loc 1 339 6 view .LVU1095
 3615              	.LBB330:
 340:src/display.c ****   else	clr_dot(n);
 3616              		.loc 1 340 3 view .LVU1096
 341:src/display.c **** }
 3617              		.loc 1 341 8 view .LVU1097
 3618              	.LBE330:
 3619              	.LBE329:
2558:src/display.c **** 
 3620              		.loc 1 2558 7 is_stmt 0 view .LVU1098
 3621 007e BDE87040 		pop	{r4, r5, r6, lr}
 3622              		.cfi_remember_state
 3623              		.cfi_restore 14
 3624              		.cfi_restore 6
 3625              		.cfi_restore 5
 3626              		.cfi_restore 4
 3627              		.cfi_def_cfa_offset 0
 3628              	.LVL401:
 3629              	.LBB334:
 3630              	.LBB331:
 341:src/display.c **** }
 3631              		.loc 1 341 8 view .LVU1099
 3632 0082 8B20     		movs	r0, #139
 3633 0084 FFF7FEBF 		b	clr_dot
 3634              	.LVL402:
 3635              	.L347:
 3636              		.cfi_restore_state
ARM GAS  /tmp/ccZdZ92R.s 			page 127


 341:src/display.c **** }
 3637              		.loc 1 341 8 view .LVU1100
 3638              	.LBE331:
 3639              	.LBE334:
 3640              	.LBB335:
 339:src/display.c ****   if (on)	set_dot(n);
 3641              		.loc 1 339 6 is_stmt 1 view .LVU1101
 3642              	.LBB327:
 340:src/display.c ****   else	clr_dot(n);
 3643              		.loc 1 340 3 view .LVU1102
 341:src/display.c **** }
 3644              		.loc 1 341 8 view .LVU1103
 3645 0088 FFF7FEFF 		bl	clr_dot
 3646              	.LVL403:
 341:src/display.c **** }
 3647              		.loc 1 341 8 is_stmt 0 view .LVU1104
 3648              	.LBE327:
 3649              	.LBE335:
2557:src/display.c ****       }
 3650              		.loc 1 2557 2 is_stmt 1 view .LVU1105
2557:src/display.c ****       }
 3651              		.loc 1 2557 11 is_stmt 0 view .LVU1106
 3652 008c 3368     		ldr	r3, [r6]
 3653 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2557:src/display.c ****       }
 3654              		.loc 1 2557 2 view .LVU1107
 3655 0092 DB07     		lsls	r3, r3, #31
 3656 0094 F3D4     		bmi	.L335
2557:src/display.c ****       }
 3657              		.loc 1 2557 2 discriminator 1 view .LVU1108
 3658 0096 012C     		cmp	r4, #1
 3659 0098 F1D1     		bne	.L335
 3660              	.LVL404:
 3661              	.LBB336:
 339:src/display.c ****   if (on)	set_dot(n);
 3662              		.loc 1 339 6 is_stmt 1 view .LVU1109
 3663              	.LBB332:
 340:src/display.c ****   else	clr_dot(n);
 3664              		.loc 1 340 3 view .LVU1110
 340:src/display.c ****   else	clr_dot(n);
 3665              		.loc 1 340 11 view .LVU1111
 3666              	.LBE332:
 3667              	.LBE336:
2558:src/display.c **** 
 3668              		.loc 1 2558 7 is_stmt 0 view .LVU1112
 3669 009a BDE87040 		pop	{r4, r5, r6, lr}
 3670              		.cfi_remember_state
 3671              		.cfi_restore 14
 3672              		.cfi_restore 6
 3673              		.cfi_restore 5
 3674              		.cfi_restore 4
 3675              		.cfi_def_cfa_offset 0
 3676              	.LVL405:
 3677              	.LBB337:
 3678              	.LBB333:
 340:src/display.c ****   else	clr_dot(n);
 3679              		.loc 1 340 11 view .LVU1113
ARM GAS  /tmp/ccZdZ92R.s 			page 128


 3680 009e 8B20     		movs	r0, #139
 3681 00a0 FFF7FEBF 		b	set_dot
 3682              	.LVL406:
 3683              	.L330:
 3684              		.cfi_restore_state
 340:src/display.c ****   else	clr_dot(n);
 3685              		.loc 1 340 11 view .LVU1114
 3686              	.LBE333:
 3687              	.LBE337:
 3688              	.LBB338:
 3689              	.LBB311:
 341:src/display.c **** }
 3690              		.loc 1 341 8 is_stmt 1 view .LVU1115
 3691              	.LBE311:
 3692              	.LBE338:
 3693              	.LBB339:
 3694              	.LBB320:
 3695              		.loc 1 2579 9 is_stmt 0 view .LVU1116
 3696 00a4 104D     		ldr	r5, .L348+20
 3697              	.LBE320:
 3698              	.LBE339:
 3699              	.LBB340:
 3700              	.LBB312:
 341:src/display.c **** }
 3701              		.loc 1 341 8 view .LVU1117
 3702 00a6 8320     		movs	r0, #131
 3703              	.LVL407:
 341:src/display.c **** }
 3704              		.loc 1 341 8 view .LVU1118
 3705 00a8 FFF7FEFF 		bl	clr_dot
 3706              	.LVL408:
 341:src/display.c **** }
 3707              		.loc 1 341 8 view .LVU1119
 3708              	.LBE312:
 3709              	.LBE340:
2552:src/display.c **** 
 3710              		.loc 1 2552 2 is_stmt 1 view .LVU1120
 3711              	.LBB341:
2564:src/display.c **** #ifndef DM42
 3712              		.loc 1 2564 12 view .LVU1121
 3713              	.LBB321:
2569:src/display.c **** #endif
 3714              		.loc 1 2569 4 view .LVU1122
 3715              		.loc 1 2579 2 view .LVU1123
 3716              		.loc 1 2579 5 is_stmt 0 view .LVU1124
 3717 00ac 2B68     		ldr	r3, [r5]
 3718 00ae 002B     		cmp	r3, #0
 3719 00b0 D8D0     		beq	.L332
 3720              	.L346:
 3721              	.LBB315:
 3722              	.LBI315:
2564:src/display.c **** #ifndef DM42
 3723              		.loc 1 2564 12 is_stmt 1 view .LVU1125
 3724              	.LBB316:
2580:src/display.c **** 	  dot(LIT_EQ, on);
 3725              		.loc 1 2580 4 view .LVU1126
 3726              	.LVL409:
ARM GAS  /tmp/ccZdZ92R.s 			page 129


 3727              	.LBB317:
 3728              	.LBI317:
 339:src/display.c ****   if (on)	set_dot(n);
 3729              		.loc 1 339 6 view .LVU1127
 3730              	.LBB318:
 340:src/display.c ****   else	clr_dot(n);
 3731              		.loc 1 340 3 view .LVU1128
 341:src/display.c **** }
 3732              		.loc 1 341 8 view .LVU1129
 3733 00b2 8420     		movs	r0, #132
 3734 00b4 FFF7FEFF 		bl	clr_dot
 3735              	.LVL410:
 341:src/display.c **** }
 3736              		.loc 1 341 8 is_stmt 0 view .LVU1130
 3737              	.LBE318:
 3738              	.LBE317:
2581:src/display.c **** 	  IoAnnunciator = on;
 3739              		.loc 1 2581 4 is_stmt 1 view .LVU1131
 3740              		.loc 1 2581 18 is_stmt 0 view .LVU1132
 3741 00b8 0023     		movs	r3, #0
 3742 00ba 2B60     		str	r3, [r5]
2582:src/display.c **** 	  finish_display(); //LIT_EQ
 3743              		.loc 1 2582 4 is_stmt 1 view .LVU1133
 3744 00bc FFF7FEFF 		bl	finish_display
 3745              	.LVL411:
2583:src/display.c **** 	}
2584:src/display.c ****       }
 3746              		.loc 1 2584 7 is_stmt 0 view .LVU1134
 3747 00c0 D0E7     		b	.L332
 3748              	.LVL412:
 3749              	.L328:
 3750              		.loc 1 2584 7 view .LVU1135
 3751              	.LBE316:
 3752              	.LBE315:
 3753              	.LBE321:
 3754              	.LBE341:
 3755              	.LBB342:
 339:src/display.c ****   if (on)	set_dot(n);
 3756              		.loc 1 339 6 is_stmt 1 view .LVU1136
 3757              	.LBB306:
 340:src/display.c ****   else	clr_dot(n);
 3758              		.loc 1 340 3 view .LVU1137
 340:src/display.c ****   else	clr_dot(n);
 3759              		.loc 1 340 11 view .LVU1138
 3760 00c2 FFF7FEFF 		bl	set_dot
 3761              	.LVL413:
 3762 00c6 C3E7     		b	.L329
 3763              	.LVL414:
 3764              	.L345:
 340:src/display.c ****   else	clr_dot(n);
 3765              		.loc 1 340 11 is_stmt 0 view .LVU1139
 3766              	.LBE306:
 3767              	.LBE342:
 3768              	.LBB343:
 3769              	.LBI298:
 339:src/display.c ****   if (on)	set_dot(n);
 3770              		.loc 1 339 6 is_stmt 1 view .LVU1140
ARM GAS  /tmp/ccZdZ92R.s 			page 130


 3771              	.LBB301:
 340:src/display.c ****   else	clr_dot(n);
 3772              		.loc 1 340 3 view .LVU1141
 341:src/display.c **** }
 3773              		.loc 1 341 8 view .LVU1142
 3774 00c8 FFF7FEFF 		bl	clr_dot
 3775              	.LVL415:
 3776 00cc B5E7     		b	.L326
 3777              	.LVL416:
 3778              	.L344:
 341:src/display.c **** }
 3779              		.loc 1 341 8 is_stmt 0 view .LVU1143
 3780              	.LBE301:
 3781              	.LBE343:
 3782              	.LBB344:
 339:src/display.c ****   if (on)	set_dot(n);
 3783              		.loc 1 339 6 is_stmt 1 view .LVU1144
 3784              	.LBB296:
 340:src/display.c ****   else	clr_dot(n);
 3785              		.loc 1 340 3 view .LVU1145
 340:src/display.c ****   else	clr_dot(n);
 3786              		.loc 1 340 11 view .LVU1146
 3787 00ce FFF7FEFF 		bl	set_dot
 3788              	.LVL417:
 3789 00d2 A7E7     		b	.L324
 3790              	.L349:
 3791              		.align	2
 3792              	.L348:
 3793 00d4 00000000 		.word	main_ram
 3794 00d8 00000000 		.word	Running
 3795 00dc 00000000 		.word	StateWhileOn
 3796 00e0 07000800 		.word	524295
 3797 00e4 00080800 		.word	526336
 3798 00e8 00000000 		.word	IoAnnunciator
 3799              	.LBE296:
 3800              	.LBE344:
 3801              		.cfi_endproc
 3802              	.LFE32:
 3804              		.section	.text.s_s_sized.constprop.0,"ax",%progbits
 3805              		.align	1
 3806              		.p2align 2,,3
 3807              		.syntax unified
 3808              		.thumb
 3809              		.thumb_func
 3810              		.fpu fpv4-sp-d16
 3812              	s_s_sized.constprop.0:
 3813              	.LVL418:
 3814              	.LFB55:
2585:src/display.c **** 
2586:src/display.c **** #ifdef TOP_ROW
2587:src/display.c ****       /*
2588:src/display.c ****        *  Update the display
2589:src/display.c ****        */
2590:src/display.c ****       void display(void) {
2591:src/display.c **** 	int i, j;
2592:src/display.c **** 	char buf[40], *bp = buf;
2593:src/display.c **** 	const char *p;
ARM GAS  /tmp/ccZdZ92R.s 			page 131


2594:src/display.c **** 	int annuc = 0;
2595:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2596:src/display.c **** 	int skip = 0;
2597:src/display.c **** 	int x_disp = 0;
2598:src/display.c **** 	const int shift = cur_shift();
2599:src/display.c **** 
2600:src/display.c **** 	no_status_top = 0;
2601:src/display.c **** 	if (State2.disp_freeze) {
2602:src/display.c **** 	  State2.disp_freeze = 0;
2603:src/display.c **** 	  State2.disp_temp = 1;
2604:src/display.c **** #ifdef CONSOLE
2605:src/display.c **** 	  JustDisplayed = 1;
2606:src/display.c **** #endif
2607:src/display.c **** 	  ShowRPN = 0;
2608:src/display.c **** 	  return;
2609:src/display.c **** 	}
2610:src/display.c **** 
2611:src/display.c **** 	if (WasDataEntry) {
2612:src/display.c **** #if defined(QTGUI) || defined(IOS)
2613:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2614:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2615:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2616:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2617:src/display.c **** #endif
2618:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2619:src/display.c **** 
2620:src/display.c **** 	  // Erase 7-segment display
2621:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2622:src/display.c **** 	    clr_dot(i);
2623:src/display.c **** 	  }
2624:src/display.c **** 	  goto only_update_x;
2625:src/display.c **** 	}
2626:src/display.c **** #ifdef INCLUDE_YREG_CODE
2627:src/display.c **** #  ifdef YREG_ALWAYS_ON
2628:src/display.c **** 	const int yreg_enabled = 1;
2629:src/display.c **** #  else
2630:src/display.c **** 	const int yreg_enabled = UState.show_y;
2631:src/display.c **** #  endif
2632:src/display.c **** #else
2633:src/display.c **** 	const int yreg_enabled = 0;
2634:src/display.c **** #endif
2635:src/display.c **** 	// Clear display
2636:src/display.c **** 	reset_disp();
2637:src/display.c **** 
2638:src/display.c **** 	
2639:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2640:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2641:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2642:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2643:src/display.c **** 	/*   set_status(buf); */
2644:src/display.c **** 	/* } */
2645:src/display.c **** 	if (State2.version) {
2646:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2647:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2648:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2649:src/display.c **** #ifndef REALBUILD
2650:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
ARM GAS  /tmp/ccZdZ92R.s 			page 132


2651:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2652:src/display.c **** #endif
2653:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2654:src/display.c **** 	  set_status(vers);
2655:src/display.c **** 	  skip = 1;
2656:src/display.c **** 	  goto nostk;
2657:src/display.c **** 	} else if (State2.confirm) {
2658:src/display.c **** 	  if (yreg_enabled) {
2659:src/display.c **** 	    set_status_top(S_SURE);
2660:src/display.c **** 	    no_status_top = 1;
2661:src/display.c **** 	    annuc = 1;
2662:src/display.c **** 	  }
2663:src/display.c **** 	  else {
2664:src/display.c **** 	    set_status(S_SURE);
2665:src/display.c **** 	  }
2666:src/display.c **** 	} else if (State2.hyp) {
2667:src/display.c **** 	  bp = scopy(bp, "HYP");
2668:src/display.c **** 	  if (! State2.dot)
2669:src/display.c **** 	    *bp++ = '\235';
2670:src/display.c **** 	  if (yreg_enabled) {
2671:src/display.c **** 	    set_status_top(buf);
2672:src/display.c **** 	    no_status_top = 1;
2673:src/display.c **** 	    annuc = 1;
2674:src/display.c **** 	  }
2675:src/display.c **** 	  else {
2676:src/display.c **** 	    set_status(buf);
2677:src/display.c **** 	  }
2678:src/display.c **** 	} else if (State2.gtodot) {
2679:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2680:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2681:src/display.c **** 	  if (State2.numdigit > 0)
2682:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2683:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2684:src/display.c **** 	  *bp++ = '_';
2685:src/display.c **** 	  if (yreg_enabled) {
2686:src/display.c **** 	    set_status_top(buf);
2687:src/display.c **** 	    no_status_top = 1;
2688:src/display.c **** 	    annuc = 1;
2689:src/display.c **** 	  }
2690:src/display.c **** 	  else {
2691:src/display.c **** 	    set_status(buf);
2692:src/display.c **** 	  }
2693:src/display.c **** 	} else if (State2.rarg) {
2694:src/display.c **** 	  /* Commands with arguments */
2695:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2696:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2697:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2698:src/display.c **** #endif
2699:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2700:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2701:src/display.c **** 	  if (State2.dot) {
2702:src/display.c **** 	    *bp++ = 's';
2703:src/display.c **** 	    *bp++ = '_';
2704:src/display.c **** 	  } else if (shift == SHIFT_F) {
2705:src/display.c **** 	    *bp++ = '\021';
2706:src/display.c **** 	    *bp++ = '_';
2707:src/display.c **** 	  } else {
ARM GAS  /tmp/ccZdZ92R.s 			page 133


2708:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2709:src/display.c **** 	       : State2.ind ? 2 
2710:src/display.c **** 	       : num_arg_digits(CmdBase); */
2711:src/display.c **** 	    if (State2.local)
2712:src/display.c **** 	      *bp++ = '.';
2713:src/display.c **** 	    if (State2.numdigit > 0) {
2714:src/display.c **** 	      if (State2.shuffle)
2715:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2716:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2717:src/display.c **** 	      else
2718:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2719:src/display.c **** 	    }
2720:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2721:src/display.c **** 	    *bp++ = '_';
2722:src/display.c **** 	  }
2723:src/display.c **** 	  if (yreg_enabled) {
2724:src/display.c **** 	    set_status_top(buf);
2725:src/display.c **** 	    no_status_top = 1;
2726:src/display.c **** 	    annuc = 1;
2727:src/display.c **** 	  }
2728:src/display.c **** 	  else {
2729:src/display.c **** 	    set_status(buf);
2730:src/display.c **** 	  }
2731:src/display.c **** 	} else if (State2.test != TST_NONE) {
2732:src/display.c **** 	  *bp++ = 'x';
2733:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2734:src/display.c **** 	  *bp++ = '_';
2735:src/display.c **** 	  *bp++ = '?';
2736:src/display.c **** 	  if (yreg_enabled) {
2737:src/display.c **** 	    set_status_top(buf);
2738:src/display.c **** 	    no_status_top = 1;
2739:src/display.c **** 	    annuc = 1;
2740:src/display.c **** 	  }
2741:src/display.c **** 	  else {
2742:src/display.c **** 	    set_status(buf);
2743:src/display.c **** 	  }
2744:src/display.c **** 	} else if (cata) {
2745:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2746:src/display.c **** 	  char b2[16];
2747:src/display.c **** 	  const char *p;
2748:src/display.c **** 
2749:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2750:src/display.c **** 	  p = catcmd(op, b2);
2751:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2752:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2753:src/display.c **** 	  bp = scopy(bp, p);
2754:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2755:src/display.c **** 	    // State2.disp_small = 1;
2756:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2757:src/display.c **** 	      set_digits_string("0 to 255", 0);
2758:src/display.c **** 	    else
2759:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2760:src/display.c **** 	    skip = 1;
2761:src/display.c **** 	  } else if (State2.runmode) {
2762:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2763:src/display.c **** 	      decNumber x, r;
2764:src/display.c **** 	      decimal64 z;
ARM GAS  /tmp/ccZdZ92R.s 			page 134


2765:src/display.c **** 
2766:src/display.c **** 	      getX(&x);
2767:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2768:src/display.c **** 		const unsigned int f = argKIND(op);
2769:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2770:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2771:src/display.c **** 		  update_speed(0);
2772:src/display.c **** 		  fp(&r, &x);
2773:src/display.c **** 		}
2774:src/display.c **** 		else
2775:src/display.c **** 		  set_NaN(&r);
2776:src/display.c **** 	      } else
2777:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2778:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2779:src/display.c **** 	      packed_from_number(&z, &r);
2780:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2781:src/display.c **** 	      skip = 1;
2782:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2783:src/display.c **** 	      REGISTER z, *const x = StackBase;
2784:src/display.c **** 	      copyreg(&z, x);
2785:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2786:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2787:src/display.c **** 	      copyreg(x, &z);
2788:src/display.c **** 	      skip = 1;
2789:src/display.c **** 	    }
2790:src/display.c **** 	  }
2791:src/display.c **** 	  if (yreg_enabled) {
2792:src/display.c **** 	    set_status_top(buf);
2793:src/display.c **** 	    no_status_top = 1;
2794:src/display.c **** 	    annuc = 1;
2795:src/display.c **** 	  }
2796:src/display.c **** 	  else {
2797:src/display.c **** 	    set_status(buf);
2798:src/display.c **** 	  }
2799:src/display.c **** 	} else if (State2.multi) {
2800:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2801:src/display.c **** 	  if (State2.numdigit > 0) {
2802:src/display.c **** 	    *bp++ = (char) State2.digval;
2803:src/display.c **** 	    if (State2.numdigit > 1)
2804:src/display.c **** 	      *bp++ = State2.digval2;
2805:src/display.c **** 	  }
2806:src/display.c **** 	  if (yreg_enabled) {
2807:src/display.c **** 	    set_status_top(buf);
2808:src/display.c **** 	    no_status_top = 1;
2809:src/display.c **** 	    annuc = 1;
2810:src/display.c **** 	  }
2811:src/display.c **** 	  else {
2812:src/display.c **** 	    set_status(buf);
2813:src/display.c **** 	  }
2814:src/display.c **** 	} else if (State2.status) {
2815:src/display.c **** 	  show_status();
2816:src/display.c **** 	  skip = 1;
2817:src/display.c **** 	} else if (State2.labellist) {
2818:src/display.c **** 	  show_label();
2819:src/display.c **** 	  skip = 1;
2820:src/display.c **** 	} else if (State2.registerlist) {
2821:src/display.c **** 	  show_registers();
ARM GAS  /tmp/ccZdZ92R.s 			page 135


2822:src/display.c **** 	  skip = 1;
2823:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2824:src/display.c **** 	    annunciators();
2825:src/display.c **** 	  }
2826:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2827:src/display.c **** 	} else if (State2.disp_as_alpha) {
2828:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2829:src/display.c **** #endif
2830:src/display.c **** 	} else if (State2.runmode) {
2831:src/display.c **** 	  if (DispMsg) { 
2832:src/display.c **** 	    set_status(DispMsg);
2833:src/display.c **** 	  } else if (DispPlot) {
2834:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2835:src/display.c **** 	  } else if (State2.alphas) {
2836:src/display.c **** 	    bp = scopy(buf, Alpha);
2837:src/display.c **** 	    j = State2.alpha_pos;
2838:src/display.c **** 	    if (j != 0) {
2839:src/display.c **** 	      i = slen(buf);
2840:src/display.c **** 	      j *= 6;
2841:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2842:src/display.c **** 		{
2843:src/display.c **** 		  buf[ (i - j) ] = '\0';
2844:src/display.c **** 		  set_status_right(buf);
2845:src/display.c **** 		}
2846:src/display.c **** 	      else {
2847:src/display.c **** 		set_status(buf);
2848:src/display.c **** 	      }
2849:src/display.c **** 	    }
2850:src/display.c **** 	    else {
2851:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2852:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2853:src/display.c **** 		*bp++ = '\0';
2854:src/display.c **** 	      }
2855:src/display.c **** 	      set_status_right(buf);
2856:src/display.c **** 	    }
2857:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2858:src/display.c **** 	      bp = buf;
2859:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2860:src/display.c **** 	      *bp++ = '\0';
2861:src/display.c **** 	      set_status_top(buf);
2862:src/display.c **** 	      no_status_top = 1;
2863:src/display.c **** 	      //annuc = 1;
2864:src/display.c **** 	    }
2865:src/display.c **** 	  }
2866:src/display.c **** 	  else {
2867:src/display.c **** 	    annuc = 1;
2868:src/display.c **** 	  }
2869:src/display.c **** 	}
2870:src/display.c **** 	else {
2871:src/display.c **** #ifndef DM42
2872:src/display.c **** 	  show_progtrace(buf);
2873:src/display.c **** #endif
2874:src/display.c **** 	  i = state_pc();
2875:src/display.c **** 	  if (i > 0)
2876:src/display.c **** 	    set_status(prt(getprog(i), buf));
2877:src/display.c **** 	  else
2878:src/display.c **** 	    set_status("");
ARM GAS  /tmp/ccZdZ92R.s 			page 136


2879:src/display.c **** 	  set_dot(STO_annun);
2880:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  goto nostk;
2883:src/display.c **** 	}
2884:src/display.c **** 	show_stack();
2885:src/display.c ****       nostk:
2886:src/display.c **** 	show_flags();
2887:src/display.c **** 	if (!skip) {
2888:src/display.c **** 	  if (State2.runmode) {
2889:src/display.c **** 	  only_update_x:
2890:src/display.c **** 	    p = get_cmdline();
2891:src/display.c **** 	    if (p == NULL || cata) {
2892:src/display.c **** 	      if (ShowRegister != -1) {
2893:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2894:src/display.c **** 		format_reg(ShowRegister, CNULL);
2895:src/display.c **** 	      }
2896:src/display.c **** 	      else
2897:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2898:src/display.c **** 	    } else {
2899:src/display.c **** 	      disp_x(p);
2900:src/display.c **** 	      x_disp = 1;
2901:src/display.c **** 	    }
2902:src/display.c **** 	    if (WasDataEntry) {
2903:src/display.c **** 	      goto finish;
2904:src/display.c **** 	    }
2905:src/display.c **** 	  } else {
2906:src/display.c **** 	    unsigned int pc = state_pc();
2907:src/display.c **** 	    unsigned int upc = user_pc(pc);
2908:src/display.c **** 	    const int n = nLIB(pc);
2909:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2910:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2911:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2912:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2913:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2914:src/display.c **** #ifndef REALBUILD
2915:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2916:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2917:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2918:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2919:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2920:src/display.c **** 	      char *b=buf;
2921:src/display.c **** 	      char *l=LastDisplayedNumber;
2922:src/display.c **** 	      *l++=' ';
2923:src/display.c **** 	      while(*b) {
2924:src/display.c **** 		*l++=*b++;
2925:src/display.c **** 		*l++=' ';
2926:src/display.c **** 	      }
2927:src/display.c **** 	      *l=0;
2928:src/display.c **** 	    }
2929:src/display.c **** #endif
2930:src/display.c **** 	  }
2931:src/display.c **** 	}
2932:src/display.c **** 	set_annunciators();
2933:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2934:src/display.c **** 	  ShowRPN = 0;
2935:src/display.c **** 	  dot(RPN, 0);
ARM GAS  /tmp/ccZdZ92R.s 			page 137


2936:src/display.c **** 	}
2937:src/display.c **** 	// disp_temp disables the <- key
2938:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2939:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2940:src/display.c **** 
2941:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2942:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2943:src/display.c **** 	  annunciators();
2944:src/display.c ****  	State2.hms = 0;
2945:src/display.c **** #else
2946:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2947:src/display.c **** 	  annunciators();
2948:src/display.c **** #endif
2949:src/display.c **** 
2950:src/display.c ****       finish:
2951:src/display.c **** 	State2.version = 0;
2952:src/display.c **** 	State2.disp_as_alpha = 0;
2953:src/display.c **** 	State2.smode = SDISP_NORMAL;
2954:src/display.c **** 	State2.invalid_disp = 0;
2955:src/display.c **** 	ShowRegister = regX_idx;
2956:src/display.c **** 	DispMsg = CNULL;
2957:src/display.c **** 	DispPlot = 0;
2958:src/display.c **** 	State2.disp_small = 0;
2959:src/display.c **** 	finish_display();
2960:src/display.c **** 	no_status_top = 0;
2961:src/display.c **** #ifdef CONSOLE
2962:src/display.c **** 	JustDisplayed = 1;
2963:src/display.c **** #endif
2964:src/display.c ****       }
2965:src/display.c **** #else
2966:src/display.c ****       /*
2967:src/display.c ****        *  Update the display
2968:src/display.c ****        */
2969:src/display.c ****       void display(void) {
2970:src/display.c **** 	int i, j;
2971:src/display.c **** 	char buf[40], *bp = buf;
2972:src/display.c **** 	const char *p;
2973:src/display.c **** 	int annuc = 0;
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2975:src/display.c **** 	int skip = 0;
2976:src/display.c **** 	int x_disp = 0;
2977:src/display.c **** 	const int shift = cur_shift();
2978:src/display.c **** 
2979:src/display.c **** 
2980:src/display.c **** 
2981:src/display.c **** 	if (State2.disp_freeze) {
2982:src/display.c **** 	  State2.disp_freeze = 0;
2983:src/display.c **** 	  State2.disp_temp = 1;
2984:src/display.c **** #ifdef CONSOLE
2985:src/display.c **** 	  JustDisplayed = 1;
2986:src/display.c **** #endif
2987:src/display.c **** 	  ShowRPN = 0;
2988:src/display.c **** 	  return;
2989:src/display.c **** 	}
2990:src/display.c **** 
2991:src/display.c **** 	if (WasDataEntry) {
2992:src/display.c **** #if defined(QTGUI) || defined(IOS)
ARM GAS  /tmp/ccZdZ92R.s 			page 138


2993:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2994:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2995:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2996:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2997:src/display.c **** #endif
2998:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2999:src/display.c **** 
3000:src/display.c **** 	  // Erase 7-segment display
3001:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3002:src/display.c **** 	    clr_dot(i);
3003:src/display.c **** 	  }
3004:src/display.c **** 	  goto only_update_x;
3005:src/display.c **** 	}
3006:src/display.c **** 
3007:src/display.c **** 	// Clear display
3008:src/display.c **** 	reset_disp();
3009:src/display.c **** 
3010:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3011:src/display.c **** 	if (State2.cmplx  && !cata) {
3012:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3013:src/display.c **** 	  set_status(buf);
3014:src/display.c **** 	}
3015:src/display.c **** 	if (State2.version) {
3016:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3017:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3018:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3019:src/display.c **** #ifndef REALBUILD
3020:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3021:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3022:src/display.c **** #endif
3023:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3024:src/display.c **** 	  set_status(vers);
3025:src/display.c **** 	  skip = 1;
3026:src/display.c **** 	  goto nostk;
3027:src/display.c **** 	} else if (State2.confirm) {
3028:src/display.c **** 	  set_status(S_SURE);
3029:src/display.c **** 	} else if (State2.hyp) {
3030:src/display.c **** 	  bp = scopy(bp, "HYP");
3031:src/display.c **** 	  if (! State2.dot)
3032:src/display.c **** 	    *bp++ = '\235';
3033:src/display.c **** 	  set_status(buf);
3034:src/display.c **** 	} else if (State2.gtodot) {
3035:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3036:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3037:src/display.c **** 	  if (State2.numdigit > 0)
3038:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3039:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3040:src/display.c **** 	  *bp++ = '_';
3041:src/display.c **** 	  set_status(buf);
3042:src/display.c **** 	} else if (State2.rarg) {
3043:src/display.c **** 	  /* Commands with arguments */
3044:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3045:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
3046:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3047:src/display.c **** #endif
3048:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3049:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
ARM GAS  /tmp/ccZdZ92R.s 			page 139


3050:src/display.c **** 	  if (State2.dot) {
3051:src/display.c **** 	    *bp++ = 's';
3052:src/display.c **** 	    *bp++ = '_';
3053:src/display.c **** 	  } else if (shift == SHIFT_F) {
3054:src/display.c **** 	    *bp++ = '\021';
3055:src/display.c **** 	    *bp++ = '_';
3056:src/display.c **** 	  } else {
3057:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3058:src/display.c **** 	       : State2.ind ? 2 
3059:src/display.c **** 	       : num_arg_digits(CmdBase); */
3060:src/display.c **** 	    if (State2.local)
3061:src/display.c **** 	      *bp++ = '.';
3062:src/display.c **** 	    if (State2.numdigit > 0) {
3063:src/display.c **** 	      if (State2.shuffle)
3064:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3065:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3066:src/display.c **** 	      else
3067:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3068:src/display.c **** 	    }
3069:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3070:src/display.c **** 	    *bp++ = '_';
3071:src/display.c **** 	  }
3072:src/display.c **** 	  set_status(buf);
3073:src/display.c **** 	} else if (State2.test != TST_NONE) {
3074:src/display.c **** 	  *bp++ = 'x';
3075:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3076:src/display.c **** 	  *bp++ = '_';
3077:src/display.c **** 	  *bp++ = '?';
3078:src/display.c **** 	  set_status(buf);
3079:src/display.c **** 	} else if (cata) {
3080:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3081:src/display.c **** 	  char b2[16];
3082:src/display.c **** 	  const char *p;
3083:src/display.c **** 
3084:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3085:src/display.c **** 	  p = catcmd(op, b2);
3086:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3087:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3088:src/display.c **** 	  bp = scopy(bp, p);
3089:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3090:src/display.c **** 	    // State2.disp_small = 1;
3091:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3092:src/display.c **** 	      set_digits_string("0 to 255", 0);
3093:src/display.c **** 	    else
3094:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3095:src/display.c **** 	    skip = 1;
3096:src/display.c **** 	  } else if (State2.runmode) {
3097:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3098:src/display.c **** 	      decNumber x, r;
3099:src/display.c **** 	      decimal64 z;
3100:src/display.c **** 
3101:src/display.c **** 	      getX(&x);
3102:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3103:src/display.c **** 		const unsigned int f = argKIND(op);
3104:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3105:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3106:src/display.c **** 		  update_speed(0);
ARM GAS  /tmp/ccZdZ92R.s 			page 140


3107:src/display.c **** 		  fp(&r, &x);
3108:src/display.c **** 		}
3109:src/display.c **** 		else
3110:src/display.c **** 		  set_NaN(&r);
3111:src/display.c **** 	      } else
3112:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3113:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3114:src/display.c **** 	      packed_from_number(&z, &r);
3115:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3116:src/display.c **** 	      skip = 1;
3117:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3118:src/display.c **** 	      REGISTER z, *const x = StackBase;
3119:src/display.c **** 	      copyreg(&z, x);
3120:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3121:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3122:src/display.c **** 	      copyreg(x, &z);
3123:src/display.c **** 	      skip = 1;
3124:src/display.c **** 	    }
3125:src/display.c **** 	  }
3126:src/display.c **** 	  set_status(buf);
3127:src/display.c **** 	} else if (State2.multi) {
3128:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3129:src/display.c **** 	  if (State2.numdigit > 0) {
3130:src/display.c **** 	    *bp++ = (char) State2.digval;
3131:src/display.c **** 	    if (State2.numdigit > 1)
3132:src/display.c **** 	      *bp++ = State2.digval2;
3133:src/display.c **** 	  }
3134:src/display.c **** 	  set_status(buf);
3135:src/display.c **** 	} else if (State2.status) {
3136:src/display.c **** 	  show_status();
3137:src/display.c **** 	  skip = 1;
3138:src/display.c **** 	} else if (State2.labellist) {
3139:src/display.c **** 	  show_label();
3140:src/display.c **** 	  skip = 1;
3141:src/display.c **** 	} else if (State2.registerlist) {
3142:src/display.c **** 	  show_registers();
3143:src/display.c **** 	  skip = 1;
3144:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3145:src/display.c **** 	    annunciators();
3146:src/display.c **** 	  }
3147:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3148:src/display.c **** 	} else if (State2.disp_as_alpha) {
3149:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3150:src/display.c **** #endif
3151:src/display.c **** 	} else if (State2.runmode) {
3152:src/display.c **** 	  if (DispMsg) { 
3153:src/display.c **** 	    set_status(DispMsg);
3154:src/display.c **** 	  } else if (DispPlot) {
3155:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3156:src/display.c **** 	  } else if (State2.alphas) {
3157:src/display.c **** #if 0
3158:src/display.c **** 	    set_digits_string("AlpHA", 0);
3159:src/display.c **** #endif
3160:src/display.c **** 	    bp = scopy(buf, Alpha);
3161:src/display.c **** 	    j = State2.alpha_pos;
3162:src/display.c **** 	    if (j != 0) {
3163:src/display.c **** 	      i = slen(buf);
ARM GAS  /tmp/ccZdZ92R.s 			page 141


3164:src/display.c **** 	      //				
3165:src/display.c **** 	      j *= 6;
3166:src/display.c **** #ifdef BIGGER_DISPLAY
3167:src/display.c **** 	      if ( i - j >= 20 )
3168:src/display.c **** #else
3169:src/display.c **** 	      if ( i - j >= 12 )
3170:src/display.c **** #endif
3171:src/display.c **** 		{
3172:src/display.c **** 		buf[ (i - j) ] = '\0';
3173:src/display.c **** 		set_status_right(buf);
3174:src/display.c **** 		}
3175:src/display.c **** 	      else {
3176:src/display.c **** 		set_status(buf);
3177:src/display.c **** 	      }
3178:src/display.c **** 	    } else {
3179:src/display.c **** 	      if (shift != SHIFT_N) {
3180:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3181:src/display.c **** 		*bp++ = '\0';
3182:src/display.c **** 	      }
3183:src/display.c **** 	      set_status_right(buf);
3184:src/display.c **** 	    }
3185:src/display.c **** 	  } else {
3186:src/display.c **** 	    annuc = 1;
3187:src/display.c **** 	  }
3188:src/display.c **** 	} else {
3189:src/display.c **** #ifndef DM42
3190:src/display.c **** 	  show_progtrace(buf);
3191:src/display.c **** #endif
3192:src/display.c **** 	  i = state_pc();
3193:src/display.c **** 	  if (i > 0)
3194:src/display.c **** 	    set_status(prt(getprog(i), buf));
3195:src/display.c **** 	  else
3196:src/display.c **** 	    set_status("");
3197:src/display.c **** 	  set_dot(STO_annun);
3198:src/display.c **** #if 0
3199:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3200:src/display.c **** 	    unsigned short int crc;
3201:src/display.c **** 	    crc = checksum_program();
3202:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3203:src/display.c **** 	    for (i=0; i<4; i++) {
3204:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3205:src/display.c **** 	      crc >>= 4;
3206:src/display.c **** 	      j += SEGS_PER_DIGIT;
3207:src/display.c **** 	    }
3208:src/display.c **** 	    skip = 1;
3209:src/display.c **** 	  }
3210:src/display.c **** 	  else
3211:src/display.c **** #endif
3212:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3213:src/display.c **** 	      annuc = 1;
3214:src/display.c **** 	  goto nostk;
3215:src/display.c **** 	}
3216:src/display.c **** 	show_stack();
3217:src/display.c ****       nostk:	show_flags();
3218:src/display.c **** 	if (!skip) {
3219:src/display.c **** 	  if (State2.runmode) {
3220:src/display.c **** 	  only_update_x:
ARM GAS  /tmp/ccZdZ92R.s 			page 142


3221:src/display.c **** 	    p = get_cmdline();
3222:src/display.c **** 	    if (p == NULL || cata) {
3223:src/display.c **** 	      if (ShowRegister != -1) {
3224:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3225:src/display.c **** 		format_reg(ShowRegister, CNULL);
3226:src/display.c **** 	      }
3227:src/display.c **** 	      else
3228:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3229:src/display.c **** 	    } else {
3230:src/display.c **** 	      disp_x(p);
3231:src/display.c **** 	      x_disp = 1;
3232:src/display.c **** 	    }
3233:src/display.c **** 	    if (WasDataEntry) {
3234:src/display.c **** 	      goto finish;
3235:src/display.c **** 	    }
3236:src/display.c **** 	  } else {
3237:src/display.c **** 	    unsigned int pc = state_pc();
3238:src/display.c **** 	    unsigned int upc = user_pc(pc);
3239:src/display.c **** 	    const int n = nLIB(pc);
3240:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3241:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3242:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3243:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3244:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3245:src/display.c **** #ifndef REALBUILD
3246:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3247:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3248:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3249:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3250:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3251:src/display.c **** 	      char *b=buf;
3252:src/display.c **** 	      char *l=LastDisplayedNumber;
3253:src/display.c **** 	      *l++=' ';
3254:src/display.c **** 	      while(*b) {
3255:src/display.c **** 		*l++=*b++;
3256:src/display.c **** 		*l++=' ';
3257:src/display.c **** 	      }
3258:src/display.c **** 	      *l=0;
3259:src/display.c **** 	    }
3260:src/display.c **** #endif
3261:src/display.c **** 	  }
3262:src/display.c **** 	}
3263:src/display.c **** 	set_annunciators();
3264:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3265:src/display.c **** 	  ShowRPN = 0;
3266:src/display.c **** 	  dot(RPN, 0);
3267:src/display.c **** 	}
3268:src/display.c **** 	// disp_temp disables the <- key
3269:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3270:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3271:src/display.c **** 
3272:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3273:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3274:src/display.c **** 	  annunciators();
3275:src/display.c ****  	State2.hms = 0;
3276:src/display.c **** #else
3277:src/display.c **** 
ARM GAS  /tmp/ccZdZ92R.s 			page 143


3278:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3279:src/display.c **** 	  annunciators();
3280:src/display.c **** 	
3281:src/display.c **** 
3282:src/display.c **** 
3283:src/display.c **** #endif
3284:src/display.c **** 
3285:src/display.c ****       finish:
3286:src/display.c **** 	State2.version = 0;
3287:src/display.c **** 	State2.disp_as_alpha = 0;
3288:src/display.c **** 	State2.smode = SDISP_NORMAL;
3289:src/display.c **** 	State2.invalid_disp = 0;
3290:src/display.c **** 	ShowRegister = regX_idx;
3291:src/display.c **** 	DispMsg = CNULL;
3292:src/display.c **** 	DispPlot = 0;
3293:src/display.c **** 	State2.disp_small = 0;
3294:src/display.c **** 	finish_display();
3295:src/display.c **** #ifdef CONSOLE
3296:src/display.c **** 	JustDisplayed = 1;
3297:src/display.c **** #endif
3298:src/display.c ****       }
3299:src/display.c **** #endif
3300:src/display.c ****       /*
3301:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3302:src/display.c ****        */
3303:src/display.c ****       void frozen_display()
3304:src/display.c ****       {
3305:src/display.c **** 	State2.disp_freeze = 0;
3306:src/display.c **** 	display();
3307:src/display.c **** 	State2.disp_freeze = 1;
3308:src/display.c ****       }
3309:src/display.c **** 
3310:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3311:src/display.c **** 	int glen = *graphic++;
3312:src/display.c **** 	int i, j;
3313:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3314:src/display.c **** 	unsigned long long int mat[6];
3315:src/display.c **** 
3316:src/display.c **** 	xset(mat, 0, sizeof(mat));
3317:src/display.c **** #endif
3318:src/display.c **** #ifndef REALBUILD
3319:src/display.c **** 	forceDispPlot=1;
3320:src/display.c **** #endif
3321:src/display.c **** 	if (glen <= 0)			return;
3322:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3323:src/display.c **** 
3324:src/display.c **** 	for (i=0; i<6; i++)
3325:src/display.c **** 	  for (j=1; j<=glen; j++) {
3326:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3327:src/display.c **** 	    if (graphic[j] & (1 << i))
3328:src/display.c **** 	      mat[i] |= 1LL << j;
3329:src/display.c **** #else
3330:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3331:src/display.c **** #endif
3332:src/display.c **** 	  }
3333:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3334:src/display.c **** 	set_status_grob(mat);
ARM GAS  /tmp/ccZdZ92R.s 			page 144


3335:src/display.c **** #endif
3336:src/display.c ****       }
3337:src/display.c **** 
3338:src/display.c **** 
3339:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3340:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3341:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3342:src/display.c ****        * column is almost always blank.
3343:src/display.c ****        */
3344:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3345:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3346:src/display.c ****       }
3347:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3348:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3349:src/display.c ****       }
3350:src/display.c **** 
3351:src/display.c ****       
3352:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 3815              		.loc 1 3352 19 view -0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 544
 3818              		@ frame_needed = 0, uses_anonymous_args = 0
3353:src/display.c **** 	unsigned short int posns[257];
 3819              		.loc 1 3353 2 view .LVU1148
3354:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3355:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3356:src/display.c **** 	int posns_state = 255;
 3820              		.loc 1 3356 2 view .LVU1149
3357:src/display.c **** #endif
3358:src/display.c **** 	unsigned int x = 0;
 3821              		.loc 1 3358 2 view .LVU1150
3359:src/display.c **** 	int i, j;
 3822              		.loc 1 3359 2 view .LVU1151
3360:src/display.c **** 	const int offset = smallp ? 256 : 0;
 3823              		.loc 1 3360 2 view .LVU1152
3352:src/display.c **** 	unsigned short int posns[257];
 3824              		.loc 1 3352 19 is_stmt 0 view .LVU1153
 3825 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3826              		.cfi_def_cfa_offset 36
 3827              		.cfi_offset 4, -36
 3828              		.cfi_offset 5, -32
 3829              		.cfi_offset 6, -28
 3830              		.cfi_offset 7, -24
 3831              		.cfi_offset 8, -20
 3832              		.cfi_offset 9, -16
 3833              		.cfi_offset 10, -12
 3834              		.cfi_offset 11, -8
 3835              		.cfi_offset 14, -4
3361:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3362:src/display.c **** 	unsigned long long int mat[6];
3363:src/display.c **** 
3364:src/display.c **** 	xset(mat, 0, sizeof(mat));
3365:src/display.c **** #endif
3366:src/display.c **** #ifndef REALBUILD
3367:src/display.c **** 	scopy(LastDisplayedText, str);
 3836              		.loc 1 3367 2 view .LVU1154
 3837 0004 624C     		ldr	r4, .L401
ARM GAS  /tmp/ccZdZ92R.s 			page 145


3352:src/display.c **** 	unsigned short int posns[257];
 3838              		.loc 1 3352 19 view .LVU1155
 3839 0006 ADF5097D 		sub	sp, sp, #548
 3840              		.cfi_def_cfa_offset 584
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3841              		.loc 1 3360 34 view .LVU1156
 3842 000a 0B1E     		subs	r3, r1, #0
 3843 000c 0293     		str	r3, [sp, #8]
3352:src/display.c **** 	unsigned short int posns[257];
 3844              		.loc 1 3352 19 view .LVU1157
 3845 000e 0090     		str	r0, [sp]
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3846              		.loc 1 3360 34 view .LVU1158
 3847 0010 14BF     		ite	ne
 3848 0012 4FF48073 		movne	r3, #256
 3849 0016 0023     		moveq	r3, #0
 3850              		.loc 1 3367 2 view .LVU1159
 3851 0018 0146     		mov	r1, r0
 3852              	.LVL419:
 3853              		.loc 1 3367 2 view .LVU1160
 3854 001a 2046     		mov	r0, r4
 3855              	.LVL420:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3856              		.loc 1 3360 34 view .LVU1161
 3857 001c 0393     		str	r3, [sp, #12]
 3858              	.LVL421:
 3859              		.loc 1 3367 2 is_stmt 1 view .LVU1162
 3860 001e FFF7FEFF 		bl	scopy
 3861              	.LVL422:
3368:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3369:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 3862              		.loc 1 3369 2 view .LVU1163
 3863              		.loc 1 3369 14 view .LVU1164
 3864              		.loc 1 3369 31 is_stmt 0 view .LVU1165
 3865 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3866              		.loc 1 3369 2 view .LVU1166
 3867 0024 13B9     		cbnz	r3, .L358
 3868 0026 07E0     		b	.L356
 3869              	.LVL423:
 3870              	.L357:
 3871              		.loc 1 3369 14 is_stmt 1 view .LVU1167
 3872 0028 0134     		adds	r4, r4, #1
 3873              		.loc 1 3369 2 is_stmt 0 view .LVU1168
 3874 002a 2BB1     		cbz	r3, .L356
 3875              	.L358:
 3876              	.LVL424:
3370:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 3877              		.loc 1 3370 4 is_stmt 1 view .LVU1169
 3878              		.loc 1 3370 7 is_stmt 0 view .LVU1170
 3879 002c 072B     		cmp	r3, #7
 3880              		.loc 1 3370 39 view .LVU1171
 3881 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 3882              		.loc 1 3370 7 view .LVU1172
 3883 0030 FAD1     		bne	.L357
 3884              		.loc 1 3370 39 view .LVU1173
 3885 0032 002B     		cmp	r3, #0
 3886 0034 40F09E80 		bne	.L397
ARM GAS  /tmp/ccZdZ92R.s 			page 146


 3887              	.LVL425:
 3888              	.L356:
3371:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3372:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3373:src/display.c **** 	      ++i;
3374:src/display.c **** 	  }
3375:src/display.c **** 	  else {
3376:src/display.c **** 	    ++i;
3377:src/display.c **** 	  }
3378:src/display.c **** 	}
3379:src/display.c **** #endif
3380:src/display.c **** 	forceDispPlot=0;
 3889              		.loc 1 3380 2 is_stmt 1 view .LVU1174
3381:src/display.c **** #endif
3382:src/display.c **** #ifdef RP_PREFIX
3383:src/display.c **** 	RectPolConv = 0;
 3890              		.loc 1 3383 14 is_stmt 0 view .LVU1175
 3891 0038 564B     		ldr	r3, .L401+4
3380:src/display.c **** #endif
 3892              		.loc 1 3380 15 view .LVU1176
 3893 003a 574A     		ldr	r2, .L401+8
 3894 003c 0027     		movs	r7, #0
 3895              		.loc 1 3383 14 view .LVU1177
 3896 003e 1F60     		str	r7, [r3]
3384:src/display.c **** #endif
3385:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3386:src/display.c **** 	findlengths(posns, smallp);
3387:src/display.c **** #endif
3388:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 3897              		.loc 1 3388 9 view .LVU1178
 3898 0040 009B     		ldr	r3, [sp]
3380:src/display.c **** #endif
 3899              		.loc 1 3380 15 view .LVU1179
 3900 0042 1770     		strb	r7, [r2]
3383:src/display.c **** #endif
 3901              		.loc 1 3383 2 is_stmt 1 view .LVU1180
 3902              		.loc 1 3388 2 view .LVU1181
 3903              	.LVL426:
 3904              		.loc 1 3388 8 view .LVU1182
 3905              		.loc 1 3388 9 is_stmt 0 view .LVU1183
 3906 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
3389:src/display.c **** 	  int c;
3390:src/display.c **** 	  int width;
3391:src/display.c **** 	  unsigned char cmap[6];
3392:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3393:src/display.c **** 	  int real_width;
3394:src/display.c **** 	  int current_smallp;
3395:src/display.c **** 
3396:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3397:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3398:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3399:src/display.c **** 	  //           01 -> (not used)
3400:src/display.c **** 	  //           10 -> use big font
3401:src/display.c **** 	  //           11 -> use small font
3402:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3403:src/display.c **** 	  if (str[0] == '\007') {
3404:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/ccZdZ92R.s 			page 147


3405:src/display.c **** 	    switch (str[1] & 0x60) {
3406:src/display.c **** 	    default:
3407:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3408:src/display.c **** 	      break;
3409:src/display.c **** 	    case 0x40:	current_smallp = 0;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    case 0x60:	current_smallp = 1;
3412:src/display.c **** 	      break;
3413:src/display.c **** 	    }
3414:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
3415:src/display.c **** 	    str += 3;
3416:src/display.c **** 
3417:src/display.c **** 	    real_width = charlengths(c);
3418:src/display.c **** 	  } else {
3419:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3420:src/display.c **** 	    real_width = width = charlengths(c);
3421:src/display.c **** 	    current_smallp = smallp;
3422:src/display.c **** 	  }
3423:src/display.c **** 
3424:src/display.c **** 	  if (x + real_width > b_w + 1)
3425:src/display.c **** 	    break;
3426:src/display.c **** 
3427:src/display.c **** 	  if (posns_state != current_smallp) {
3428:src/display.c **** 	    findlengths(posns, current_smallp);
3429:src/display.c **** 	    posns_state = current_smallp;
3430:src/display.c **** 	  }
3431:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
3432:src/display.c **** #else
3433:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3434:src/display.c **** 
3435:src/display.c **** 	  //cmap = &charset[c][0];
3436:src/display.c **** 	  width = charlengths(c);
3437:src/display.c **** 
3438:src/display.c **** 	  if (x + width > b_w+1)
3439:src/display.c **** 	    break;
3440:src/display.c **** 
3441:src/display.c **** 	  /* Decode the packed character bytes */
3442:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3443:src/display.c **** #endif
3444:src/display.c **** 
3445:src/display.c **** 	  for (i=0; i<6; i++)
3446:src/display.c **** 	    for (j=0; j<width; j++) {
3447:src/display.c **** 	      if (x+j >= b_w)
3448:src/display.c **** 		break;
3449:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3450:src/display.c **** 	      if (cmap[i] & (1 << j))
3451:src/display.c **** 		mat[i] |= 1LL << (x+j);
3452:src/display.c **** #else
3453:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
3454:src/display.c **** #endif
3455:src/display.c **** 	    }
3456:src/display.c **** 	  x += width;
3457:src/display.c **** 	}
3458:src/display.c **** 
3459:src/display.c **** 
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	set_status_grob(mat);
ARM GAS  /tmp/ccZdZ92R.s 			page 148


3462:src/display.c **** #else
3463:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 3907              		.loc 1 3463 8 view .LVU1184
 3908 0046 8E24     		movs	r4, #142
3388:src/display.c **** 	  int c;
 3909              		.loc 1 3388 8 view .LVU1185
 3910 0048 002D     		cmp	r5, #0
 3911 004a 7CD0     		beq	.L376
 3912              	.LBB345:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3913              		.loc 1 3403 7 view .LVU1186
 3914 004c 072D     		cmp	r5, #7
 3915              	.LBE345:
3356:src/display.c **** #endif
 3916              		.loc 1 3356 6 view .LVU1187
 3917 004e 4FF0FF04 		mov	r4, #255
 3918              	.LVL427:
 3919              	.LBB354:
3389:src/display.c **** 	  int width;
 3920              		.loc 1 3389 4 is_stmt 1 view .LVU1188
3390:src/display.c **** 	  unsigned char cmap[6];
 3921              		.loc 1 3390 4 view .LVU1189
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 3922              		.loc 1 3391 4 view .LVU1190
3393:src/display.c **** 	  int current_smallp;
 3923              		.loc 1 3393 4 view .LVU1191
3394:src/display.c **** 
 3924              		.loc 1 3394 4 view .LVU1192
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3925              		.loc 1 3403 4 view .LVU1193
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3926              		.loc 1 3403 7 is_stmt 0 view .LVU1194
 3927 0052 63D1     		bne	.L359
 3928              	.L399:
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3929              		.loc 1 3404 6 is_stmt 1 view .LVU1195
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3930              		.loc 1 3404 17 is_stmt 0 view .LVU1196
 3931 0054 009B     		ldr	r3, [sp]
 3932              	.LVL428:
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3933              		.loc 1 3404 17 view .LVU1197
 3934 0056 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 3935 0058 06F06003 		and	r3, r6, #96
3405:src/display.c **** 	    default:
 3936              		.loc 1 3405 6 view .LVU1198
 3937 005c 402B     		cmp	r3, #64
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3938              		.loc 1 3404 12 view .LVU1199
 3939 005e 06F01F06 		and	r6, r6, #31
 3940              	.LVL429:
3405:src/display.c **** 	    default:
 3941              		.loc 1 3405 6 is_stmt 1 view .LVU1200
 3942 0062 7BD0     		beq	.L360
 3943 0064 602B     		cmp	r3, #96
 3944 0066 7ED0     		beq	.L361
 3945              	.LVL430:
ARM GAS  /tmp/ccZdZ92R.s 			page 149


3414:src/display.c **** 	    str += 3;
 3946              		.loc 1 3414 6 view .LVU1201
3414:src/display.c **** 	    str += 3;
 3947              		.loc 1 3414 10 is_stmt 0 view .LVU1202
 3948 0068 009B     		ldr	r3, [sp]
 3949 006a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
3414:src/display.c **** 	    str += 3;
 3950              		.loc 1 3414 57 view .LVU1203
 3951 006c 029B     		ldr	r3, [sp, #8]
 3952 006e 002B     		cmp	r3, #0
 3953 0070 00F08A80 		beq	.L380
 3954 0074 05F58075 		add	r5, r5, #256
 3955 0078 9A46     		mov	r10, r3
 3956              	.LVL431:
 3957              	.L363:
3415:src/display.c **** 
 3958              		.loc 1 3415 6 is_stmt 1 view .LVU1204
3417:src/display.c **** 	  } else {
 3959              		.loc 1 3417 19 is_stmt 0 view .LVU1205
 3960 007a 2846     		mov	r0, r5
 3961 007c FFF7FEFF 		bl	charlengths
 3962              	.LVL432:
3415:src/display.c **** 
 3963              		.loc 1 3415 10 view .LVU1206
 3964 0080 009B     		ldr	r3, [sp]
3424:src/display.c **** 	    break;
 3965              		.loc 1 3424 10 view .LVU1207
 3966 0082 3844     		add	r0, r0, r7
3415:src/display.c **** 
 3967              		.loc 1 3415 10 view .LVU1208
 3968 0084 0333     		adds	r3, r3, #3
3424:src/display.c **** 	    break;
 3969              		.loc 1 3424 7 view .LVU1209
 3970 0086 2C28     		cmp	r0, #44
3415:src/display.c **** 
 3971              		.loc 1 3415 10 view .LVU1210
 3972 0088 0093     		str	r3, [sp]
 3973              	.LVL433:
3417:src/display.c **** 	  } else {
 3974              		.loc 1 3417 6 is_stmt 1 view .LVU1211
3424:src/display.c **** 	    break;
 3975              		.loc 1 3424 4 view .LVU1212
3424:src/display.c **** 	    break;
 3976              		.loc 1 3424 7 is_stmt 0 view .LVU1213
 3977 008a 55D8     		bhi	.L375
 3978              	.L400:
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3979              		.loc 1 3427 4 is_stmt 1 view .LVU1214
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3980              		.loc 1 3427 7 is_stmt 0 view .LVU1215
 3981 008c A245     		cmp	r10, r4
3428:src/display.c **** 	    posns_state = current_smallp;
 3982              		.loc 1 3428 6 view .LVU1216
 3983 008e 07AB     		add	r3, sp, #28
 3984              	.LVL434:
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3985              		.loc 1 3427 7 view .LVU1217
ARM GAS  /tmp/ccZdZ92R.s 			page 150


 3986 0090 05D0     		beq	.L366
3428:src/display.c **** 	    posns_state = current_smallp;
 3987              		.loc 1 3428 6 is_stmt 1 view .LVU1218
 3988 0092 1846     		mov	r0, r3
 3989 0094 5146     		mov	r1, r10
 3990 0096 0193     		str	r3, [sp, #4]
 3991 0098 FFF7FEFF 		bl	findlengths
 3992              	.LVL435:
 3993 009c 019B     		ldr	r3, [sp, #4]
3429:src/display.c **** 	  }
 3994              		.loc 1 3429 6 view .LVU1219
 3995              	.LVL436:
 3996              	.L366:
3431:src/display.c **** #else
 3997              		.loc 1 3431 4 view .LVU1220
 3998 009e 2846     		mov	r0, r5
 3999 00a0 05A9     		add	r1, sp, #20
 4000 00a2 5246     		mov	r2, r10
 4001 00a4 07EB4708 		add	r8, r7, r7, lsl #1
 4002 00a8 FFF7FEFF 		bl	unpackchar
 4003              	.LVL437:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4004              		.loc 1 3445 4 view .LVU1221
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4005              		.loc 1 3445 14 view .LVU1222
 4006 00ac 4FEA4808 		lsl	r8, r8, #1
 4007 00b0 05AD     		add	r5, sp, #20
 4008              	.LVL438:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4009              		.loc 1 3445 14 is_stmt 0 view .LVU1223
 4010 00b2 A8F58178 		sub	r8, r8, #258
3431:src/display.c **** #else
 4011              		.loc 1 3431 4 view .LVU1224
 4012 00b6 4FF4C874 		mov	r4, #400
 4013              	.LVL439:
 4014              	.L367:
3446:src/display.c **** 	      if (x+j >= b_w)
 4015              		.loc 1 3446 16 is_stmt 1 view .LVU1225
3446:src/display.c **** 	      if (x+j >= b_w)
 4016              		.loc 1 3446 6 is_stmt 0 view .LVU1226
 4017 00ba 002E     		cmp	r6, #0
 4018 00bc 1FDD     		ble	.L373
3447:src/display.c **** 		break;
 4019              		.loc 1 3447 8 is_stmt 1 view .LVU1227
3447:src/display.c **** 		break;
 4020              		.loc 1 3447 11 is_stmt 0 view .LVU1228
 4021 00be 2A2F     		cmp	r7, #42
 4022 00c0 1DD8     		bhi	.L373
 4023 00c2 08EB0409 		add	r9, r8, r4
3446:src/display.c **** 	      if (x+j >= b_w)
 4024              		.loc 1 3446 12 view .LVU1229
 4025 00c6 4FF0000B 		mov	fp, #0
 4026 00ca 09E0     		b	.L368
 4027              	.LVL440:
 4028              	.L398:
3446:src/display.c **** 	      if (x+j >= b_w)
 4029              		.loc 1 3446 26 view .LVU1230
ARM GAS  /tmp/ccZdZ92R.s 			page 151


 4030 00cc 0BF1010B 		add	fp, fp, #1
 4031              	.LVL441:
 4032              	.LBB346:
 4033              	.LBB347:
 340:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 340 11 view .LVU1231
 4035 00d0 FFF7FEFF 		bl	set_dot
 4036              	.LVL442:
 340:src/display.c ****   else	clr_dot(n);
 4037              		.loc 1 340 11 view .LVU1232
 4038              	.LBE347:
 4039              	.LBE346:
3447:src/display.c **** 		break;
 4040              		.loc 1 3447 8 is_stmt 1 view .LVU1233
3446:src/display.c **** 	      if (x+j >= b_w)
 4041              		.loc 1 3446 25 view .LVU1234
3446:src/display.c **** 	      if (x+j >= b_w)
 4042              		.loc 1 3446 16 view .LVU1235
3446:src/display.c **** 	      if (x+j >= b_w)
 4043              		.loc 1 3446 6 is_stmt 0 view .LVU1236
 4044 00d4 B345     		cmp	fp, r6
 4045 00d6 09F10609 		add	r9, r9, #6
 4046 00da 10D0     		beq	.L373
 4047              	.L372:
3447:src/display.c **** 		break;
 4048              		.loc 1 3447 11 view .LVU1237
 4049 00dc 4C45     		cmp	r4, r9
 4050 00de 0ED0     		beq	.L373
 4051              	.LVL443:
 4052              	.L368:
3453:src/display.c **** #endif
 4053              		.loc 1 3453 8 is_stmt 1 view .LVU1238
 4054              	.LBB351:
 4055              	.LBI346:
 339:src/display.c ****   if (on)	set_dot(n);
 4056              		.loc 1 339 6 view .LVU1239
 4057              	.LBB348:
 340:src/display.c ****   else	clr_dot(n);
 4058              		.loc 1 340 3 view .LVU1240
 340:src/display.c ****   else	clr_dot(n);
 4059              		.loc 1 340 11 view .LVU1241
 341:src/display.c **** }
 4060              		.loc 1 341 8 view .LVU1242
 4061              	.LBE348:
 4062              	.LBE351:
3453:src/display.c **** #endif
 4063              		.loc 1 3453 32 is_stmt 0 view .LVU1243
 4064 00e0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3453:src/display.c **** #endif
 4065              		.loc 1 3453 47 view .LVU1244
 4066 00e2 41FA0BF1 		asr	r1, r1, fp
 4067              	.LBB352:
 4068              	.LBB349:
 340:src/display.c ****   else	clr_dot(n);
 4069              		.loc 1 340 6 view .LVU1245
 4070 00e6 11F0010F 		tst	r1, #1
 340:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccZdZ92R.s 			page 152


 4071              		.loc 1 340 11 view .LVU1246
 4072 00ea 4846     		mov	r0, r9
 340:src/display.c ****   else	clr_dot(n);
 4073              		.loc 1 340 6 view .LVU1247
 4074 00ec EED1     		bne	.L398
 4075              	.LBE349:
 4076              	.LBE352:
3446:src/display.c **** 	      if (x+j >= b_w)
 4077              		.loc 1 3446 26 view .LVU1248
 4078 00ee 0BF1010B 		add	fp, fp, #1
 4079              	.LVL444:
 4080              	.LBB353:
 4081              	.LBB350:
 341:src/display.c **** }
 4082              		.loc 1 341 8 view .LVU1249
 4083 00f2 FFF7FEFF 		bl	clr_dot
 4084              	.LVL445:
 341:src/display.c **** }
 4085              		.loc 1 341 8 view .LVU1250
 4086              	.LBE350:
 4087              	.LBE353:
3447:src/display.c **** 		break;
 4088              		.loc 1 3447 8 is_stmt 1 view .LVU1251
3446:src/display.c **** 	      if (x+j >= b_w)
 4089              		.loc 1 3446 25 view .LVU1252
3446:src/display.c **** 	      if (x+j >= b_w)
 4090              		.loc 1 3446 16 view .LVU1253
3446:src/display.c **** 	      if (x+j >= b_w)
 4091              		.loc 1 3446 6 is_stmt 0 view .LVU1254
 4092 00f6 B345     		cmp	fp, r6
 4093 00f8 09F10609 		add	r9, r9, #6
 4094 00fc EED1     		bne	.L372
 4095              	.LVL446:
 4096              	.L373:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4097              		.loc 1 3445 19 is_stmt 1 view .LVU1255
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4098              		.loc 1 3445 14 view .LVU1256
 4099 00fe 0134     		adds	r4, r4, #1
 4100              	.LVL447:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4101              		.loc 1 3445 4 is_stmt 0 view .LVU1257
 4102 0100 B4F5CB7F 		cmp	r4, #406
 4103 0104 05F10105 		add	r5, r5, #1
 4104 0108 D7D1     		bne	.L367
3456:src/display.c **** 	}
 4105              		.loc 1 3456 4 is_stmt 1 view .LVU1258
 4106              	.LBE354:
3388:src/display.c **** 	  int c;
 4107              		.loc 1 3388 9 is_stmt 0 view .LVU1259
 4108 010a 009B     		ldr	r3, [sp]
 4109 010c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4110              	.LBB355:
3456:src/display.c **** 	}
 4111              		.loc 1 3456 6 view .LVU1260
 4112 010e 3744     		add	r7, r7, r6
 4113              	.LVL448:
ARM GAS  /tmp/ccZdZ92R.s 			page 153


3456:src/display.c **** 	}
 4114              		.loc 1 3456 6 view .LVU1261
 4115              	.LBE355:
3388:src/display.c **** 	  int c;
 4116              		.loc 1 3388 8 is_stmt 1 view .LVU1262
 4117 0110 95B1     		cbz	r5, .L375
3388:src/display.c **** 	  int c;
 4118              		.loc 1 3388 22 is_stmt 0 view .LVU1263
 4119 0112 2C2F     		cmp	r7, #44
 4120 0114 10D8     		bhi	.L375
 4121              	.LBB356:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 4122              		.loc 1 3403 7 view .LVU1264
 4123 0116 072D     		cmp	r5, #7
 4124              	.LBE356:
 4125 0118 5446     		mov	r4, r10
 4126              	.LVL449:
 4127              	.LBB357:
3389:src/display.c **** 	  int width;
 4128              		.loc 1 3389 4 is_stmt 1 view .LVU1265
3390:src/display.c **** 	  unsigned char cmap[6];
 4129              		.loc 1 3390 4 view .LVU1266
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4130              		.loc 1 3391 4 view .LVU1267
3393:src/display.c **** 	  int current_smallp;
 4131              		.loc 1 3393 4 view .LVU1268
3394:src/display.c **** 
 4132              		.loc 1 3394 4 view .LVU1269
3403:src/display.c **** 	    width = str[1] & 0x1F;
 4133              		.loc 1 3403 4 view .LVU1270
3403:src/display.c **** 	    width = str[1] & 0x1F;
 4134              		.loc 1 3403 7 is_stmt 0 view .LVU1271
 4135 011a 9BD0     		beq	.L399
 4136              	.LVL450:
 4137              	.L359:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4138              		.loc 1 3419 6 is_stmt 1 view .LVU1272
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4139              		.loc 1 3419 8 is_stmt 0 view .LVU1273
 4140 011c 039B     		ldr	r3, [sp, #12]
 4141              	.LVL451:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4142              		.loc 1 3419 8 view .LVU1274
 4143 011e 1D44     		add	r5, r5, r3
3420:src/display.c **** 	    current_smallp = smallp;
 4144              		.loc 1 3420 27 view .LVU1275
 4145 0120 2846     		mov	r0, r5
 4146 0122 FFF7FEFF 		bl	charlengths
 4147              	.LVL452:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4148              		.loc 1 3419 30 view .LVU1276
 4149 0126 009B     		ldr	r3, [sp]
3420:src/display.c **** 	    current_smallp = smallp;
 4150              		.loc 1 3420 25 view .LVU1277
 4151 0128 DDF808A0 		ldr	r10, [sp, #8]
 4152 012c 0646     		mov	r6, r0
3424:src/display.c **** 	    break;
ARM GAS  /tmp/ccZdZ92R.s 			page 154


 4153              		.loc 1 3424 10 view .LVU1278
 4154 012e 3844     		add	r0, r0, r7
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4155              		.loc 1 3419 30 view .LVU1279
 4156 0130 0133     		adds	r3, r3, #1
3424:src/display.c **** 	    break;
 4157              		.loc 1 3424 7 view .LVU1280
 4158 0132 2C28     		cmp	r0, #44
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4159              		.loc 1 3419 30 view .LVU1281
 4160 0134 0093     		str	r3, [sp]
 4161              	.LVL453:
3420:src/display.c **** 	    current_smallp = smallp;
 4162              		.loc 1 3420 6 is_stmt 1 view .LVU1282
3421:src/display.c **** 	  }
 4163              		.loc 1 3421 6 view .LVU1283
3424:src/display.c **** 	    break;
 4164              		.loc 1 3424 4 view .LVU1284
3424:src/display.c **** 	    break;
 4165              		.loc 1 3424 7 is_stmt 0 view .LVU1285
 4166 0136 A9D9     		bls	.L400
 4167              	.LVL454:
 4168              	.L375:
3424:src/display.c **** 	    break;
 4169              		.loc 1 3424 7 view .LVU1286
 4170              	.LBE357:
 4171              		.loc 1 3463 2 is_stmt 1 view .LVU1287
 4172              		.loc 1 3463 16 is_stmt 0 view .LVU1288
 4173 0138 07EB4704 		add	r4, r7, r7, lsl #1
 4174 013c 6400     		lsls	r4, r4, #1
 4175              		.loc 1 3463 13 view .LVU1289
 4176 013e 8E34     		adds	r4, r4, #142
 4177              	.LVL455:
 4178              		.loc 1 3463 20 is_stmt 1 view .LVU1290
 4179              		.loc 1 3463 2 is_stmt 0 view .LVU1291
 4180 0140 B4F5C87F 		cmp	r4, #400
 4181 0144 06DA     		bge	.L350
 4182              	.LVL456:
 4183              	.L376:
3464:src/display.c **** 	  clr_dot(i);
 4184              		.loc 1 3464 4 is_stmt 1 view .LVU1292
 4185 0146 2046     		mov	r0, r4
3463:src/display.c **** 	  clr_dot(i);
 4186              		.loc 1 3463 28 is_stmt 0 view .LVU1293
 4187 0148 0134     		adds	r4, r4, #1
 4188              	.LVL457:
 4189              		.loc 1 3464 4 view .LVU1294
 4190 014a FFF7FEFF 		bl	clr_dot
 4191              	.LVL458:
3463:src/display.c **** 	  clr_dot(i);
 4192              		.loc 1 3463 27 is_stmt 1 view .LVU1295
3463:src/display.c **** 	  clr_dot(i);
 4193              		.loc 1 3463 20 view .LVU1296
3463:src/display.c **** 	  clr_dot(i);
 4194              		.loc 1 3463 2 is_stmt 0 view .LVU1297
 4195 014e B4F5C87F 		cmp	r4, #400
 4196 0152 F8D1     		bne	.L376
ARM GAS  /tmp/ccZdZ92R.s 			page 155


 4197              	.L350:
3465:src/display.c **** #endif
3466:src/display.c ****       }
 4198              		.loc 1 3466 7 view .LVU1298
 4199 0154 0DF5097D 		add	sp, sp, #548
 4200              		.cfi_remember_state
 4201              		.cfi_def_cfa_offset 36
 4202              	.LVL459:
 4203              		.loc 1 3466 7 view .LVU1299
 4204              		@ sp needed
 4205 0158 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4206              	.LVL460:
 4207              	.L360:
 4208              		.cfi_restore_state
 4209              	.LBB358:
3409:src/display.c **** 	      break;
 4210              		.loc 1 3409 17 is_stmt 1 view .LVU1300
3410:src/display.c **** 	    case 0x60:	current_smallp = 1;
 4211              		.loc 1 3410 8 view .LVU1301
3414:src/display.c **** 	    str += 3;
 4212              		.loc 1 3414 6 view .LVU1302
3414:src/display.c **** 	    str += 3;
 4213              		.loc 1 3414 10 is_stmt 0 view .LVU1303
 4214 015c 009B     		ldr	r3, [sp]
3409:src/display.c **** 	      break;
 4215              		.loc 1 3409 32 view .LVU1304
 4216 015e 4FF0000A 		mov	r10, #0
3414:src/display.c **** 	    str += 3;
 4217              		.loc 1 3414 10 view .LVU1305
 4218 0162 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 4219 0164 89E7     		b	.L363
 4220              	.LVL461:
 4221              	.L361:
3411:src/display.c **** 	      break;
 4222              		.loc 1 3411 17 is_stmt 1 view .LVU1306
3412:src/display.c **** 	    }
 4223              		.loc 1 3412 8 view .LVU1307
3414:src/display.c **** 	    str += 3;
 4224              		.loc 1 3414 6 view .LVU1308
3414:src/display.c **** 	    str += 3;
 4225              		.loc 1 3414 10 is_stmt 0 view .LVU1309
 4226 0166 009B     		ldr	r3, [sp]
 4227 0168 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
3411:src/display.c **** 	      break;
 4228              		.loc 1 3411 32 view .LVU1310
 4229 016a 4FF0010A 		mov	r10, #1
 4230 016e 00F58075 		add	r5, r0, #256
 4231 0172 82E7     		b	.L363
 4232              	.LVL462:
 4233              	.L397:
3411:src/display.c **** 	      break;
 4234              		.loc 1 3411 32 view .LVU1311
 4235              	.LBE358:
3371:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 4236              		.loc 1 3371 6 is_stmt 1 view .LVU1312
 4237 0174 A11C     		adds	r1, r4, #2
 4238 0176 2046     		mov	r0, r4
ARM GAS  /tmp/ccZdZ92R.s 			page 156


 4239 0178 FFF7FEFF 		bl	scopy
 4240              	.LVL463:
3372:src/display.c **** 	      ++i;
 4241              		.loc 1 3372 6 view .LVU1313
3372:src/display.c **** 	      ++i;
 4242              		.loc 1 3372 9 is_stmt 0 view .LVU1314
 4243 017c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 4244 017e 002B     		cmp	r3, #0
 4245 0180 3FF45AAF 		beq	.L356
 4246 0184 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 4247 0186 4FE7     		b	.L357
 4248              	.LVL464:
 4249              	.L380:
 4250              	.LBB359:
3372:src/display.c **** 	      ++i;
 4251              		.loc 1 3372 9 view .LVU1315
 4252 0188 DDF808A0 		ldr	r10, [sp, #8]
 4253 018c 75E7     		b	.L363
 4254              	.L402:
 4255 018e 00BF     		.align	2
 4256              	.L401:
 4257 0190 00000000 		.word	LastDisplayedText
 4258 0194 00000000 		.word	RectPolConv
 4259 0198 00000000 		.word	forceDispPlot
 4260              	.LBE359:
 4261              		.cfi_endproc
 4262              	.LFE55:
 4264              		.section	.text.getdig,"ax",%progbits
 4265              		.align	1
 4266              		.p2align 2,,3
 4267              		.global	getdig
 4268              		.syntax unified
 4269              		.thumb
 4270              		.thumb_func
 4271              		.fpu fpv4-sp-d16
 4273              	getdig:
 4274              	.LVL465:
 4275              	.LFB6:
 334:src/display.c ****   // perform index lookup
 4276              		.loc 1 334 1 is_stmt 1 view -0
 4277              		.cfi_startproc
 4278              		@ args = 0, pretend = 0, frame = 0
 4279              		@ frame_needed = 0, uses_anonymous_args = 0
 4280              		@ link register save eliminated.
 336:src/display.c **** }
 4281              		.loc 1 336 3 view .LVU1317
 336:src/display.c **** }
 4282              		.loc 1 336 16 is_stmt 0 view .LVU1318
 4283 0000 014B     		ldr	r3, .L404
 336:src/display.c **** }
 4284              		.loc 1 336 19 view .LVU1319
 4285 0002 C0B2     		uxtb	r0, r0
 4286              	.LVL466:
 337:src/display.c **** 
 4287              		.loc 1 337 1 view .LVU1320
 4288 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4289 0006 7047     		bx	lr
ARM GAS  /tmp/ccZdZ92R.s 			page 157


 4290              	.L405:
 4291              		.align	2
 4292              	.L404:
 4293 0008 00000000 		.word	.LANCHOR2
 4294              		.cfi_endproc
 4295              	.LFE6:
 4297              		.section	.text.dot,"ax",%progbits
 4298              		.align	1
 4299              		.p2align 2,,3
 4300              		.global	dot
 4301              		.syntax unified
 4302              		.thumb
 4303              		.thumb_func
 4304              		.fpu fpv4-sp-d16
 4306              	dot:
 4307              	.LVL467:
 4308              	.LFB7:
 339:src/display.c ****   if (on)	set_dot(n);
 4309              		.loc 1 339 25 is_stmt 1 view -0
 4310              		.cfi_startproc
 4311              		@ args = 0, pretend = 0, frame = 0
 4312              		@ frame_needed = 0, uses_anonymous_args = 0
 4313              		@ link register save eliminated.
 340:src/display.c ****   else	clr_dot(n);
 4314              		.loc 1 340 3 view .LVU1322
 340:src/display.c ****   else	clr_dot(n);
 4315              		.loc 1 340 6 is_stmt 0 view .LVU1323
 4316 0000 09B1     		cbz	r1, .L407
 340:src/display.c ****   else	clr_dot(n);
 4317              		.loc 1 340 11 is_stmt 1 discriminator 1 view .LVU1324
 4318 0002 FFF7FEBF 		b	set_dot
 4319              	.LVL468:
 4320              	.L407:
 341:src/display.c **** }
 4321              		.loc 1 341 8 view .LVU1325
 4322 0006 FFF7FEBF 		b	clr_dot
 4323              	.LVL469:
 341:src/display.c **** }
 4324              		.loc 1 341 8 is_stmt 0 view .LVU1326
 4325              		.cfi_endproc
 4326              	.LFE7:
 4328 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4329              		.align	1
 4330              		.p2align 2,,3
 4331              		.global	std_round_fix
 4332              		.syntax unified
 4333              		.thumb
 4334              		.thumb_func
 4335              		.fpu fpv4-sp-d16
 4337              	std_round_fix:
 4338              	.LVL470:
 4339              	.LFB24:
1790:src/display.c **** 	decNumber b, c;
 4340              		.loc 1 1790 60 is_stmt 1 view -0
 4341              		.cfi_startproc
 4342              		@ args = 0, pretend = 0, frame = 80
 4343              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZdZ92R.s 			page 158


1791:src/display.c **** 
 4344              		.loc 1 1791 2 view .LVU1328
1793:src/display.c **** 	b.exponent -= UState.dispdigs;
 4345              		.loc 1 1793 2 view .LVU1329
1790:src/display.c **** 	decNumber b, c;
 4346              		.loc 1 1790 60 is_stmt 0 view .LVU1330
 4347 0000 00B5     		push	{lr}
 4348              		.cfi_def_cfa_offset 4
 4349              		.cfi_offset 14, -4
 4350 0002 95B0     		sub	sp, sp, #84
 4351              		.cfi_def_cfa_offset 88
1790:src/display.c **** 	decNumber b, c;
 4352              		.loc 1 1790 60 view .LVU1331
 4353 0004 0146     		mov	r1, r0
1793:src/display.c **** 	b.exponent -= UState.dispdigs;
 4354              		.loc 1 1793 2 view .LVU1332
 4355 0006 02A8     		add	r0, sp, #8
 4356              	.LVL471:
1790:src/display.c **** 	decNumber b, c;
 4357              		.loc 1 1790 60 view .LVU1333
 4358 0008 0191     		str	r1, [sp, #4]
1793:src/display.c **** 	b.exponent -= UState.dispdigs;
 4359              		.loc 1 1793 2 view .LVU1334
 4360 000a FFF7FEFF 		bl	dn_1
 4361              	.LVL472:
1794:src/display.c **** 	dn_abs(&c, z);
 4362              		.loc 1 1794 2 is_stmt 1 view .LVU1335
1794:src/display.c **** 	dn_abs(&c, z);
 4363              		.loc 1 1794 22 is_stmt 0 view .LVU1336
 4364 000e 0F4A     		ldr	r2, .L413
1794:src/display.c **** 	dn_abs(&c, z);
 4365              		.loc 1 1794 13 view .LVU1337
 4366 0010 039B     		ldr	r3, [sp, #12]
1794:src/display.c **** 	dn_abs(&c, z);
 4367              		.loc 1 1794 22 view .LVU1338
 4368 0012 1268     		ldr	r2, [r2]
1795:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4369              		.loc 1 1795 2 view .LVU1339
 4370 0014 0199     		ldr	r1, [sp, #4]
1794:src/display.c **** 	dn_abs(&c, z);
 4371              		.loc 1 1794 22 view .LVU1340
 4372 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4373 001a 02F00F02 		and	r2, r2, #15
1794:src/display.c **** 	dn_abs(&c, z);
 4374              		.loc 1 1794 13 view .LVU1341
 4375 001e 9B1A     		subs	r3, r3, r2
1795:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4376              		.loc 1 1795 2 view .LVU1342
 4377 0020 0BA8     		add	r0, sp, #44
1794:src/display.c **** 	dn_abs(&c, z);
 4378              		.loc 1 1794 13 view .LVU1343
 4379 0022 0393     		str	r3, [sp, #12]
1795:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4380              		.loc 1 1795 2 is_stmt 1 view .LVU1344
 4381 0024 FFF7FEFF 		bl	dn_abs
 4382              	.LVL473:
1796:src/display.c **** 	  return MODE_FIX;
ARM GAS  /tmp/ccZdZ92R.s 			page 159


 4383              		.loc 1 1796 2 view .LVU1345
1796:src/display.c **** 	  return MODE_FIX;
 4384              		.loc 1 1796 6 is_stmt 0 view .LVU1346
 4385 0028 0BA9     		add	r1, sp, #44
 4386 002a 02A8     		add	r0, sp, #8
 4387 002c FFF7FEFF 		bl	dn_lt
 4388              	.LVL474:
1796:src/display.c **** 	  return MODE_FIX;
 4389              		.loc 1 1796 5 view .LVU1347
 4390 0030 10B9     		cbnz	r0, .L412
1799:src/display.c **** #endif
 4391              		.loc 1 1799 7 view .LVU1348
 4392 0032 15B0     		add	sp, sp, #84
 4393              		.cfi_remember_state
 4394              		.cfi_def_cfa_offset 4
 4395              		@ sp needed
 4396 0034 5DF804FB 		ldr	pc, [sp], #4
 4397              	.LVL475:
 4398              	.L412:
 4399              		.cfi_restore_state
1796:src/display.c **** 	  return MODE_FIX;
 4400              		.loc 1 1796 23 discriminator 1 view .LVU1349
 4401 0038 0549     		ldr	r1, .L413+4
 4402 003a 0BA8     		add	r0, sp, #44
 4403 003c FFF7FEFF 		bl	dn_lt
 4404              	.LVL476:
1797:src/display.c **** 	return MODE_STD;
 4405              		.loc 1 1797 11 discriminator 1 view .LVU1350
 4406 0040 0038     		subs	r0, r0, #0
 4407 0042 18BF     		it	ne
 4408 0044 0120     		movne	r0, #1
1799:src/display.c **** #endif
 4409              		.loc 1 1799 7 discriminator 1 view .LVU1351
 4410 0046 15B0     		add	sp, sp, #84
 4411              		.cfi_def_cfa_offset 4
 4412              		@ sp needed
 4413 0048 5DF804FB 		ldr	pc, [sp], #4
 4414              	.LVL477:
 4415              	.L414:
1799:src/display.c **** #endif
 4416              		.loc 1 1799 7 discriminator 1 view .LVU1352
 4417              		.align	2
 4418              	.L413:
 4419 004c 00000000 		.word	main_ram
 4420 0050 00000000 		.word	const_1
 4421              		.cfi_endproc
 4422              	.LFE24:
 4424              		.section	.text.set_IO_annunciator,"ax",%progbits
 4425              		.align	1
 4426              		.p2align 2,,3
 4427              		.global	set_IO_annunciator
 4428              		.syntax unified
 4429              		.thumb
 4430              		.thumb_func
 4431              		.fpu fpv4-sp-d16
 4433              	set_IO_annunciator:
 4434              	.LFB33:
ARM GAS  /tmp/ccZdZ92R.s 			page 160


2564:src/display.c **** #ifndef DM42
 4435              		.loc 1 2564 37 is_stmt 1 view -0
 4436              		.cfi_startproc
 4437              		@ args = 0, pretend = 0, frame = 0
 4438              		@ frame_needed = 0, uses_anonymous_args = 0
2569:src/display.c **** #endif
 4439              		.loc 1 2569 4 view .LVU1354
 4440              	.LVL478:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4441              		.loc 1 2579 2 view .LVU1355
2564:src/display.c **** #ifndef DM42
 4442              		.loc 1 2564 37 is_stmt 0 view .LVU1356
 4443 0000 10B5     		push	{r4, lr}
 4444              		.cfi_def_cfa_offset 8
 4445              		.cfi_offset 4, -8
 4446              		.cfi_offset 14, -4
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4447              		.loc 1 2579 9 view .LVU1357
 4448 0002 064C     		ldr	r4, .L419
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4449              		.loc 1 2579 5 view .LVU1358
 4450 0004 2368     		ldr	r3, [r4]
 4451 0006 03B9     		cbnz	r3, .L418
2584:src/display.c **** 
 4452              		.loc 1 2584 7 view .LVU1359
 4453 0008 10BD     		pop	{r4, pc}
 4454              	.L418:
 4455              	.LBB364:
 4456              	.LBI364:
2564:src/display.c **** #ifndef DM42
 4457              		.loc 1 2564 12 is_stmt 1 view .LVU1360
 4458              	.LBB365:
2580:src/display.c **** 	  IoAnnunciator = on;
 4459              		.loc 1 2580 4 view .LVU1361
 4460              	.LVL479:
 4461              	.LBB366:
 4462              	.LBI366:
 339:src/display.c ****   if (on)	set_dot(n);
 4463              		.loc 1 339 6 view .LVU1362
 4464              	.LBB367:
 340:src/display.c ****   else	clr_dot(n);
 4465              		.loc 1 340 3 view .LVU1363
 341:src/display.c **** }
 4466              		.loc 1 341 8 view .LVU1364
 4467 000a 8420     		movs	r0, #132
 4468 000c FFF7FEFF 		bl	clr_dot
 4469              	.LVL480:
 341:src/display.c **** }
 4470              		.loc 1 341 8 is_stmt 0 view .LVU1365
 4471              	.LBE367:
 4472              	.LBE366:
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4473              		.loc 1 2581 4 is_stmt 1 view .LVU1366
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4474              		.loc 1 2581 18 is_stmt 0 view .LVU1367
 4475 0010 0023     		movs	r3, #0
 4476 0012 2360     		str	r3, [r4]
ARM GAS  /tmp/ccZdZ92R.s 			page 161


2582:src/display.c **** 	}
 4477              		.loc 1 2582 4 is_stmt 1 view .LVU1368
 4478              	.LBE365:
 4479              	.LBE364:
2584:src/display.c **** 
 4480              		.loc 1 2584 7 is_stmt 0 view .LVU1369
 4481 0014 BDE81040 		pop	{r4, lr}
 4482              		.cfi_restore 14
 4483              		.cfi_restore 4
 4484              		.cfi_def_cfa_offset 0
 4485              	.LBB369:
 4486              	.LBB368:
2582:src/display.c **** 	}
 4487              		.loc 1 2582 4 view .LVU1370
 4488 0018 FFF7FEBF 		b	finish_display
 4489              	.LVL481:
 4490              	.L420:
 4491              		.align	2
 4492              	.L419:
 4493 001c 00000000 		.word	IoAnnunciator
 4494              	.LBE368:
 4495              	.LBE369:
 4496              		.cfi_endproc
 4497              	.LFE33:
 4499              		.section	.text.pixel_length,"ax",%progbits
 4500              		.align	1
 4501              		.p2align 2,,3
 4502              		.global	pixel_length
 4503              		.syntax unified
 4504              		.thumb
 4505              		.thumb_func
 4506              		.fpu fpv4-sp-d16
 4508              	pixel_length:
 4509              	.LVL482:
 4510              	.LFB40:
3467:src/display.c **** 
3468:src/display.c **** 
3469:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3470:src/display.c ****        */
3471:src/display.c ****       int pixel_length(const char *s, int smallp)
3472:src/display.c ****       {
 4511              		.loc 1 3472 7 is_stmt 1 view -0
 4512              		.cfi_startproc
 4513              		@ args = 0, pretend = 0, frame = 0
 4514              		@ frame_needed = 0, uses_anonymous_args = 0
3473:src/display.c **** 	int len = 0;
 4515              		.loc 1 3473 2 view .LVU1372
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4516              		.loc 1 3474 2 view .LVU1373
3472:src/display.c **** 	int len = 0;
 4517              		.loc 1 3472 7 is_stmt 0 view .LVU1374
 4518 0000 70B5     		push	{r4, r5, r6, lr}
 4519              		.cfi_def_cfa_offset 16
 4520              		.cfi_offset 4, -16
 4521              		.cfi_offset 5, -12
 4522              		.cfi_offset 6, -8
 4523              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZdZ92R.s 			page 162


3472:src/display.c **** 	int len = 0;
 4524              		.loc 1 3472 7 view .LVU1375
 4525 0002 0446     		mov	r4, r0
3475:src/display.c **** 	while (*s != '\0') {
 4526              		.loc 1 3475 9 view .LVU1376
 4527 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4528              	.LVL483:
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4529              		.loc 1 3474 34 view .LVU1377
 4530 0006 0E1E     		subs	r6, r1, #0
 4531 0008 18BF     		it	ne
 4532 000a 4FF48076 		movne	r6, #256
 4533              	.LVL484:
 4534              		.loc 1 3475 2 is_stmt 1 view .LVU1378
 4535              		.loc 1 3475 8 view .LVU1379
 4536 000e A0B1     		cbz	r0, .L428
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4537              		.loc 1 3473 6 is_stmt 0 view .LVU1380
 4538 0010 0025     		movs	r5, #0
 4539 0012 06E0     		b	.L426
 4540              	.LVL485:
 4541              	.L424:
3476:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3477:src/display.c **** 	  if (s[0] == '\007') {
3478:src/display.c **** 	    len += s[1] & 0x1F;
3479:src/display.c **** 	    s += 3;
3480:src/display.c **** 	    continue;
3481:src/display.c **** 	  }
3482:src/display.c **** #endif
3483:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4542              		.loc 1 3483 11 view .LVU1381
 4543 0014 3044     		add	r0, r0, r6
 4544 0016 FFF7FEFF 		bl	charlengths
 4545              	.LVL486:
 4546              		.loc 1 3483 42 view .LVU1382
 4547 001a 0134     		adds	r4, r4, #1
 4548              	.LVL487:
 4549              		.loc 1 3483 8 view .LVU1383
 4550 001c 0544     		add	r5, r5, r0
 4551              	.LVL488:
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4552              		.loc 1 3475 8 is_stmt 1 view .LVU1384
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4553              		.loc 1 3475 9 is_stmt 0 view .LVU1385
 4554 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4555              		.loc 1 3475 8 view .LVU1386
 4556 0020 48B1     		cbz	r0, .L421
 4557              	.LVL489:
 4558              	.L426:
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4559              		.loc 1 3477 4 is_stmt 1 view .LVU1387
 4560              		.loc 1 3483 4 view .LVU1388
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4561              		.loc 1 3477 7 is_stmt 0 view .LVU1389
 4562 0022 0728     		cmp	r0, #7
 4563 0024 F6D1     		bne	.L424
ARM GAS  /tmp/ccZdZ92R.s 			page 163


3478:src/display.c **** 	    s += 3;
 4564              		.loc 1 3478 6 is_stmt 1 view .LVU1390
3478:src/display.c **** 	    s += 3;
 4565              		.loc 1 3478 18 is_stmt 0 view .LVU1391
 4566 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4567              		.loc 1 3475 9 view .LVU1392
 4568 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3478:src/display.c **** 	    s += 3;
 4569              		.loc 1 3478 18 view .LVU1393
 4570 002a 03F01F03 		and	r3, r3, #31
3479:src/display.c **** 	    continue;
 4571              		.loc 1 3479 8 view .LVU1394
 4572 002e 0334     		adds	r4, r4, #3
 4573              	.LVL490:
3478:src/display.c **** 	    s += 3;
 4574              		.loc 1 3478 10 view .LVU1395
 4575 0030 1D44     		add	r5, r5, r3
 4576              	.LVL491:
3479:src/display.c **** 	    continue;
 4577              		.loc 1 3479 6 is_stmt 1 view .LVU1396
3480:src/display.c **** 	  }
 4578              		.loc 1 3480 6 view .LVU1397
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4579              		.loc 1 3475 8 view .LVU1398
 4580 0032 0028     		cmp	r0, #0
 4581 0034 F5D1     		bne	.L426
 4582              	.L421:
3484:src/display.c **** 	}
3485:src/display.c **** 	return len;
3486:src/display.c ****       }
 4583              		.loc 1 3486 7 is_stmt 0 view .LVU1399
 4584 0036 2846     		mov	r0, r5
 4585 0038 70BD     		pop	{r4, r5, r6, pc}
 4586              	.LVL492:
 4587              	.L428:
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4588              		.loc 1 3473 6 view .LVU1400
 4589 003a 0546     		mov	r5, r0
3485:src/display.c ****       }
 4590              		.loc 1 3485 2 is_stmt 1 view .LVU1401
 4591              		.loc 1 3486 7 is_stmt 0 view .LVU1402
 4592 003c 2846     		mov	r0, r5
 4593 003e 70BD     		pop	{r4, r5, r6, pc}
 4594              		.loc 1 3486 7 view .LVU1403
 4595              		.cfi_endproc
 4596              	.LFE40:
 4598              		.section	.text.set_status,"ax",%progbits
 4599              		.align	1
 4600              		.p2align 2,,3
 4601              		.syntax unified
 4602              		.thumb
 4603              		.thumb_func
 4604              		.fpu fpv4-sp-d16
 4606              	set_status:
 4607              	.LVL493:
 4608              	.LFB43:
ARM GAS  /tmp/ccZdZ92R.s 			page 164


3487:src/display.c **** 
3488:src/display.c **** 
3489:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3490:src/display.c ****        * If this is larger than the display, return true.
3491:src/display.c ****        */
3492:src/display.c ****       static int string_too_large(const char *s) {
3493:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3494:src/display.c ****       }
3495:src/display.c ****       static int string_too_large_top(const char *s) {
3496:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3497:src/display.c ****       }
3498:src/display.c **** 
3499:src/display.c **** 
3500:src/display.c ****       /* Display the given string on the screen.
3501:src/display.c ****        */
3502:src/display.c ****       static void set_status(const char *str) {
 4609              		.loc 1 3502 47 is_stmt 1 view -0
 4610              		.cfi_startproc
 4611              		@ args = 0, pretend = 0, frame = 0
 4612              		@ frame_needed = 0, uses_anonymous_args = 0
3503:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4613              		.loc 1 3503 2 view .LVU1405
 4614              		.loc 1 3503 24 is_stmt 0 view .LVU1406
 4615 0000 0C4B     		ldr	r3, .L436
 4616              		.loc 1 3503 2 view .LVU1407
 4617 0002 93F91630 		ldrsb	r3, [r3, #22]
 4618 0006 002B     		cmp	r3, #0
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4619              		.loc 1 3502 47 view .LVU1408
 4620 0008 10B5     		push	{r4, lr}
 4621              		.cfi_def_cfa_offset 8
 4622              		.cfi_offset 4, -8
 4623              		.cfi_offset 14, -4
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4624              		.loc 1 3502 47 view .LVU1409
 4625 000a 0446     		mov	r4, r0
 4626              		.loc 1 3503 2 view .LVU1410
 4627 000c 05DA     		bge	.L435
 4628              	.LBB370:
 4629              	.LBB371:
3345:src/display.c ****       }
 4630              		.loc 1 3345 2 view .LVU1411
 4631 000e 2046     		mov	r0, r4
3345:src/display.c ****       }
 4632              		.loc 1 3345 2 view .LVU1412
 4633              	.LBE371:
 4634              	.LBE370:
 4635              		.loc 1 3503 2 view .LVU1413
 4636 0010 0121     		movs	r1, #1
 4637              	.LVL494:
 4638              	.LBB377:
 4639              	.LBI370:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4640              		.loc 1 3344 19 is_stmt 1 view .LVU1414
 4641              	.LBB372:
3345:src/display.c ****       }
 4642              		.loc 1 3345 2 view .LVU1415
ARM GAS  /tmp/ccZdZ92R.s 			page 165


 4643              	.LBE372:
 4644              	.LBE377:
3504:src/display.c ****       }
 4645              		.loc 1 3504 7 is_stmt 0 view .LVU1416
 4646 0012 BDE81040 		pop	{r4, lr}
 4647              		.cfi_remember_state
 4648              		.cfi_restore 14
 4649              		.cfi_restore 4
 4650              		.cfi_def_cfa_offset 0
 4651              	.LBB378:
 4652              	.LBB373:
3345:src/display.c ****       }
 4653              		.loc 1 3345 2 view .LVU1417
 4654 0016 FFF7FEBF 		b	s_s_sized.constprop.0
 4655              	.LVL495:
 4656              	.L435:
 4657              		.cfi_restore_state
3345:src/display.c ****       }
 4658              		.loc 1 3345 2 view .LVU1418
 4659              	.LBE373:
 4660              	.LBE378:
 4661              	.LBB379:
 4662              	.LBI379:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4663              		.loc 1 3492 18 is_stmt 1 view .LVU1419
 4664              	.LBB380:
3493:src/display.c ****       }
 4665              		.loc 1 3493 2 view .LVU1420
3493:src/display.c ****       }
 4666              		.loc 1 3493 9 is_stmt 0 view .LVU1421
 4667 001a 0021     		movs	r1, #0
 4668 001c FFF7FEFF 		bl	pixel_length
 4669              	.LVL496:
3493:src/display.c ****       }
 4670              		.loc 1 3493 9 view .LVU1422
 4671              	.LBE380:
 4672              	.LBE379:
3503:src/display.c ****       }
 4673              		.loc 1 3503 2 view .LVU1423
 4674 0020 2C28     		cmp	r0, #44
 4675 0022 D8BF     		it	le
 4676 0024 0021     		movle	r1, #0
 4677              	.LBB381:
 4678              	.LBB374:
3345:src/display.c ****       }
 4679              		.loc 1 3345 2 view .LVU1424
 4680 0026 2046     		mov	r0, r4
 4681              	.LBE374:
 4682              	.LBE381:
3503:src/display.c ****       }
 4683              		.loc 1 3503 2 view .LVU1425
 4684 0028 C8BF     		it	gt
 4685 002a 0121     		movgt	r1, #1
 4686              	.LVL497:
 4687              	.LBB382:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4688              		.loc 1 3344 19 is_stmt 1 view .LVU1426
ARM GAS  /tmp/ccZdZ92R.s 			page 166


 4689              	.LBB375:
3345:src/display.c ****       }
 4690              		.loc 1 3345 2 view .LVU1427
 4691              	.LBE375:
 4692              	.LBE382:
 4693              		.loc 1 3504 7 is_stmt 0 view .LVU1428
 4694 002c BDE81040 		pop	{r4, lr}
 4695              		.cfi_restore 14
 4696              		.cfi_restore 4
 4697              		.cfi_def_cfa_offset 0
 4698              	.LVL498:
 4699              	.LBB383:
 4700              	.LBB376:
3345:src/display.c ****       }
 4701              		.loc 1 3345 2 view .LVU1429
 4702 0030 FFF7FEBF 		b	s_s_sized.constprop.0
 4703              	.LVL499:
 4704              	.L437:
3345:src/display.c ****       }
 4705              		.loc 1 3345 2 view .LVU1430
 4706              		.align	2
 4707              	.L436:
 4708 0034 00000000 		.word	StateWhileOn
 4709              	.LBE376:
 4710              	.LBE383:
 4711              		.cfi_endproc
 4712              	.LFE43:
 4714              		.section	.text.set_x_dn,"ax",%progbits
 4715              		.align	1
 4716              		.p2align 2,,3
 4717              		.global	set_x_dn
 4718              		.syntax unified
 4719              		.thumb
 4720              		.thumb_func
 4721              		.fpu fpv4-sp-d16
 4723              	set_x_dn:
 4724              	.LVL500:
 4725              	.LFB27:
1937:src/display.c **** 	char x[50], *obp = x;
 4726              		.loc 1 1937 67 is_stmt 1 view -0
 4727              		.cfi_startproc
 4728              		@ args = 0, pretend = 0, frame = 136
 4729              		@ frame_needed = 0, uses_anonymous_args = 0
1938:src/display.c **** 	int odig = 0;
 4730              		.loc 1 1938 2 view .LVU1432
1937:src/display.c **** 	char x[50], *obp = x;
 4731              		.loc 1 1937 67 is_stmt 0 view .LVU1433
 4732 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4733              		.cfi_def_cfa_offset 36
 4734              		.cfi_offset 4, -36
 4735              		.cfi_offset 5, -32
 4736              		.cfi_offset 6, -28
 4737              		.cfi_offset 7, -24
 4738              		.cfi_offset 8, -20
 4739              		.cfi_offset 9, -16
 4740              		.cfi_offset 10, -12
 4741              		.cfi_offset 11, -8
ARM GAS  /tmp/ccZdZ92R.s 			page 167


 4742              		.cfi_offset 14, -4
1954:src/display.c **** 	int mode = UState.dispmode;
 4743              		.loc 1 1954 11 view .LVU1434
 4744 0004 C84B     		ldr	r3, .L673
 4745 0006 1B68     		ldr	r3, [r3]
1937:src/display.c **** 	char x[50], *obp = x;
 4746              		.loc 1 1937 67 view .LVU1435
 4747 0008 A3B0     		sub	sp, sp, #140
 4748              		.cfi_def_cfa_offset 176
 4749              	.LVL501:
1939:src/display.c **** 	int show_exp = 0;
 4750              		.loc 1 1939 2 is_stmt 1 view .LVU1436
1940:src/display.c **** 	int j;
 4751              		.loc 1 1940 2 view .LVU1437
1941:src/display.c **** 	char mantissa[64];
 4752              		.loc 1 1941 2 view .LVU1438
1942:src/display.c **** 	int exp = 0;
 4753              		.loc 1 1942 2 view .LVU1439
1943:src/display.c **** 	char *p = mantissa;
 4754              		.loc 1 1943 2 view .LVU1440
1944:src/display.c **** 	char *r;
 4755              		.loc 1 1944 2 view .LVU1441
1945:src/display.c **** 	const char *q;
 4756              		.loc 1 1945 2 view .LVU1442
1946:src/display.c **** 	int count, i;
 4757              		.loc 1 1946 2 view .LVU1443
1947:src/display.c **** 	int extra_digits = 0;
 4758              		.loc 1 1947 2 view .LVU1444
1948:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4759              		.loc 1 1948 2 view .LVU1445
1954:src/display.c **** 	int mode = UState.dispmode;
 4760              		.loc 1 1954 2 view .LVU1446
1954:src/display.c **** 	int mode = UState.dispmode;
 4761              		.loc 1 1954 17 is_stmt 0 view .LVU1447
 4762 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1955:src/display.c **** #endif
 4763              		.loc 1 1955 19 view .LVU1448
 4764 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1937:src/display.c **** 	char x[50], *obp = x;
 4765              		.loc 1 1937 67 view .LVU1449
 4766 0012 0092     		str	r2, [sp]
 4767 0014 0C46     		mov	r4, r1
 4768 0016 0646     		mov	r6, r0
1954:src/display.c **** 	int mode = UState.dispmode;
 4769              		.loc 1 1954 17 view .LVU1450
 4770 0018 05F00F05 		and	r5, r5, #15
 4771              	.LVL502:
1955:src/display.c **** #endif
 4772              		.loc 1 1955 2 is_stmt 1 view .LVU1451
1955:src/display.c **** #endif
 4773              		.loc 1 1955 19 is_stmt 0 view .LVU1452
 4774 001c BF09     		lsrs	r7, r7, #6
 4775              	.LVL503:
1957:src/display.c **** 	int negative = 0;
 4776              		.loc 1 1957 2 is_stmt 1 view .LVU1453
1958:src/display.c **** 	int trimzeros = 0;
 4777              		.loc 1 1958 2 view .LVU1454
ARM GAS  /tmp/ccZdZ92R.s 			page 168


1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4778              		.loc 1 1959 2 view .LVU1455
1961:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4779              		.loc 1 1961 2 view .LVU1456
1970:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4780              		.loc 1 1970 2 view .LVU1457
 4781 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4782              	.LVL504:
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4783              		.loc 1 1972 2 view .LVU1458
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4784              		.loc 1 1972 5 is_stmt 0 view .LVU1459
 4785 0022 002C     		cmp	r4, #0
 4786 0024 00F08A81 		beq	.L439
 4787              	.L442:
1997:src/display.c **** 	  return;
 4788              		.loc 1 1997 2 is_stmt 1 view .LVU1460
1997:src/display.c **** 	  return;
 4789              		.loc 1 1997 6 is_stmt 0 view .LVU1461
 4790 0028 2146     		mov	r1, r4
 4791 002a 06F10800 		add	r0, r6, #8
 4792 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4793              	.LVL505:
1997:src/display.c **** 	  return;
 4794              		.loc 1 1997 5 view .LVU1462
 4795 0032 8346     		mov	fp, r0
 4796 0034 0028     		cmp	r0, #0
 4797 0036 40F06F81 		bne	.L438
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4798              		.loc 1 2000 2 is_stmt 1 view .LVU1463
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4799              		.loc 1 2000 12 is_stmt 0 view .LVU1464
 4800 003a DFF8F092 		ldr	r9, .L673+4
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4801              		.loc 1 2000 5 view .LVU1465
 4802 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4803 0042 012B     		cmp	r3, #1
 4804 0044 00F0AF82 		beq	.L654
1943:src/display.c **** 	char *p = mantissa;
 4805              		.loc 1 1943 6 view .LVU1466
 4806 0048 0190     		str	r0, [sp, #4]
 4807              	.LVL506:
 4808              	.L445:
2006:src/display.c **** 
 4809              		.loc 1 2006 2 is_stmt 1 view .LVU1467
 4810 004a 0DF11408 		add	r8, sp, #20
 4811              	.LVL507:
2006:src/display.c **** 
 4812              		.loc 1 2006 2 is_stmt 0 view .LVU1468
 4813 004e 4046     		mov	r0, r8
 4814 0050 3222     		movs	r2, #50
 4815 0052 0021     		movs	r1, #0
 4816 0054 FFF7FEFF 		bl	xset
 4817              	.LVL508:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4818              		.loc 1 2008 2 is_stmt 1 view .LVU1469
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
ARM GAS  /tmp/ccZdZ92R.s 			page 169


 4819              		.loc 1 2008 6 is_stmt 0 view .LVU1470
 4820 0058 3046     		mov	r0, r6
 4821 005a FFF7FEFF 		bl	dn_eq0
 4822              	.LVL509:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4823              		.loc 1 2008 5 view .LVU1471
 4824 005e 0028     		cmp	r0, #0
 4825 0060 00F05D81 		beq	.L446
2009:src/display.c **** 	    x[0] = '-';
 4826              		.loc 1 2009 4 is_stmt 1 view .LVU1472
2009:src/display.c **** 	    x[0] = '-';
 4827              		.loc 1 2009 7 is_stmt 0 view .LVU1473
 4828 0064 96F90830 		ldrsb	r3, [r6, #8]
 4829 0068 002B     		cmp	r3, #0
 4830 006a C0F2C182 		blt	.L655
 4831              	.L447:
2013:src/display.c **** 	} else
 4832              		.loc 1 2013 6 is_stmt 1 view .LVU1474
2013:src/display.c **** 	} else
 4833              		.loc 1 2013 11 is_stmt 0 view .LVU1475
 4834 006e 3023     		movs	r3, #48
 4835 0070 8DF81430 		strb	r3, [sp, #20]
 4836              	.L448:
2017:src/display.c **** 	  show_x(x, exp);
 4837              		.loc 1 2017 2 is_stmt 1 view .LVU1476
2017:src/display.c **** 	  show_x(x, exp);
 4838              		.loc 1 2017 12 is_stmt 0 view .LVU1477
 4839 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
2017:src/display.c **** 	  show_x(x, exp);
 4840              		.loc 1 2017 5 view .LVU1478
 4841 0078 BAF1010F 		cmp	r10, #1
 4842 007c 00F0F082 		beq	.L656
2040:src/display.c **** 	  mode = std_round_fix(z);
 4843              		.loc 1 2040 2 is_stmt 1 view .LVU1479
2040:src/display.c **** 	  mode = std_round_fix(z);
 4844              		.loc 1 2040 5 is_stmt 0 view .LVU1480
 4845 0080 002F     		cmp	r7, #0
 4846 0082 00F0FD81 		beq	.L657
2044:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4847              		.loc 1 2044 19 view .LVU1481
 4848 0086 009B     		ldr	r3, [sp]
 4849 0088 1B68     		ldr	r3, [r3]
2044:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4850              		.loc 1 2044 12 view .LVU1482
 4851 008a AB42     		cmp	r3, r5
1954:src/display.c **** 	int mode = UState.dispmode;
 4852              		.loc 1 1954 6 view .LVU1483
 4853 008c AA46     		mov	r10, r5
2044:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4854              		.loc 1 2044 9 is_stmt 1 view .LVU1484
2046:src/display.c **** #endif
 4855              		.loc 1 2046 4 view .LVU1485
2046:src/display.c **** #endif
 4856              		.loc 1 2046 7 is_stmt 0 view .LVU1486
 4857 008e D8BF     		it	le
 4858 0090 03F1FF3A 		addle	r10, r3, #-1
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
ARM GAS  /tmp/ccZdZ92R.s 			page 170


 4859              		.loc 1 1959 6 view .LVU1487
 4860 0094 0023     		movs	r3, #0
 4861 0096 0193     		str	r3, [sp, #4]
 4862              	.LVL510:
 4863              	.L461:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4864              		.loc 1 2049 2 is_stmt 1 view .LVU1488
 4865 0098 0DF14809 		add	r9, sp, #72
 4866              	.LVL511:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4867              		.loc 1 2049 2 is_stmt 0 view .LVU1489
 4868 009c 3021     		movs	r1, #48
 4869 009e 4846     		mov	r0, r9
 4870 00a0 3F22     		movs	r2, #63
 4871 00a2 FFF7FEFF 		bl	xset
 4872              	.LVL512:
2050:src/display.c **** 
 4873              		.loc 1 2050 2 is_stmt 1 view .LVU1490
2050:src/display.c **** 
 4874              		.loc 1 2050 31 is_stmt 0 view .LVU1491
 4875 00a6 0023     		movs	r3, #0
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4876              		.loc 1 2052 6 view .LVU1492
 4877 00a8 4521     		movs	r1, #69
 4878 00aa 4046     		mov	r0, r8
2050:src/display.c **** 
 4879              		.loc 1 2050 31 view .LVU1493
 4880 00ac 8DF88730 		strb	r3, [sp, #135]
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4881              		.loc 1 2052 2 is_stmt 1 view .LVU1494
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4882              		.loc 1 2052 6 is_stmt 0 view .LVU1495
 4883 00b0 FFF7FEFF 		bl	find_char
 4884              	.LVL513:
2061:src/display.c **** 	else exp = s_to_i(q+1);
 4885              		.loc 1 2061 2 is_stmt 1 view .LVU1496
2061:src/display.c **** 	else exp = s_to_i(q+1);
 4886              		.loc 1 2061 5 is_stmt 0 view .LVU1497
 4887 00b4 0028     		cmp	r0, #0
 4888 00b6 00F05C81 		beq	.L562
2062:src/display.c **** #endif
 4889              		.loc 1 2062 7 is_stmt 1 view .LVU1498
2062:src/display.c **** #endif
 4890              		.loc 1 2062 13 is_stmt 0 view .LVU1499
 4891 00ba 0130     		adds	r0, r0, #1
 4892              	.LVL514:
2062:src/display.c **** #endif
 4893              		.loc 1 2062 13 view .LVU1500
 4894 00bc FFF7FEFF 		bl	s_to_i
 4895              	.LVL515:
2062:src/display.c **** #endif
 4896              		.loc 1 2062 13 view .LVU1501
 4897 00c0 0546     		mov	r5, r0
 4898              	.LVL516:
 4899              	.L462:
2066:src/display.c **** 	if (!res) {
 4900              		.loc 1 2066 2 is_stmt 1 view .LVU1502
ARM GAS  /tmp/ccZdZ92R.s 			page 171


2066:src/display.c **** 	if (!res) {
 4901              		.loc 1 2066 12 view .LVU1503
2066:src/display.c **** 	if (!res) {
 4902              		.loc 1 2066 2 is_stmt 0 view .LVU1504
 4903 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4904 00c6 202B     		cmp	r3, #32
2066:src/display.c **** 	if (!res) {
 4905              		.loc 1 2066 8 view .LVU1505
 4906 00c8 4646     		mov	r6, r8
 4907              	.LVL517:
2066:src/display.c **** 	if (!res) {
 4908              		.loc 1 2066 2 view .LVU1506
 4909 00ca 03D1     		bne	.L463
 4910              	.LVL518:
 4911              	.L464:
2066:src/display.c **** 	if (!res) {
 4912              		.loc 1 2066 27 is_stmt 1 discriminator 3 view .LVU1507
2066:src/display.c **** 	if (!res) {
 4913              		.loc 1 2066 23 discriminator 3 view .LVU1508
2066:src/display.c **** 	if (!res) {
 4914              		.loc 1 2066 12 discriminator 3 view .LVU1509
2066:src/display.c **** 	if (!res) {
 4915              		.loc 1 2066 2 is_stmt 0 discriminator 3 view .LVU1510
 4916 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4917              	.LVL519:
2066:src/display.c **** 	if (!res) {
 4918              		.loc 1 2066 2 discriminator 3 view .LVU1511
 4919 00d0 202B     		cmp	r3, #32
 4920 00d2 FBD0     		beq	.L464
 4921              	.LVL520:
 4922              	.L463:
2067:src/display.c **** 	  CLR_EXP_SIGN;
 4923              		.loc 1 2067 2 is_stmt 1 view .LVU1512
2067:src/display.c **** 	  CLR_EXP_SIGN;
 4924              		.loc 1 2067 5 is_stmt 0 view .LVU1513
 4925 00d4 002C     		cmp	r4, #0
 4926 00d6 00F09682 		beq	.L658
 4927              	.L465:
2071:src/display.c **** 	  negative = 1;
 4928              		.loc 1 2071 2 is_stmt 1 view .LVU1514
2071:src/display.c **** 	  negative = 1;
 4929              		.loc 1 2071 6 is_stmt 0 view .LVU1515
 4930 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2071:src/display.c **** 	  negative = 1;
 4931              		.loc 1 2071 5 view .LVU1516
 4932 00dc 2D2B     		cmp	r3, #45
 4933 00de 00F0CA81 		beq	.L659
2074:src/display.c **** 	  q++;
 4934              		.loc 1 2074 9 is_stmt 1 view .LVU1517
2074:src/display.c **** 	  q++;
 4935              		.loc 1 2074 12 is_stmt 0 view .LVU1518
 4936 00e2 2B2B     		cmp	r3, #43
 4937 00e4 00F06E82 		beq	.L660
1958:src/display.c **** 	int trimzeros = 0;
 4938              		.loc 1 1958 6 view .LVU1519
 4939 00e8 4FF0000E 		mov	lr, #0
 4940              	.LVL521:
ARM GAS  /tmp/ccZdZ92R.s 			page 172


 4941              	.L467:
2076:src/display.c **** 	if (*q == '.') {
 4942              		.loc 1 2076 9 is_stmt 1 discriminator 1 view .LVU1520
2076:src/display.c **** 	if (*q == '.') {
 4943              		.loc 1 2076 2 is_stmt 0 discriminator 1 view .LVU1521
 4944 00ec 302B     		cmp	r3, #48
 4945 00ee 03D1     		bne	.L469
 4946              	.LVL522:
 4947              	.L468:
2076:src/display.c **** 	if (*q == '.') {
 4948              		.loc 1 2076 24 is_stmt 1 discriminator 2 view .LVU1522
2076:src/display.c **** 	if (*q == '.') {
 4949              		.loc 1 2076 20 discriminator 2 view .LVU1523
2076:src/display.c **** 	if (*q == '.') {
 4950              		.loc 1 2076 9 discriminator 2 view .LVU1524
 4951 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4952              	.LVL523:
2076:src/display.c **** 	if (*q == '.') {
 4953              		.loc 1 2076 2 is_stmt 0 discriminator 2 view .LVU1525
 4954 00f4 302B     		cmp	r3, #48
 4955 00f6 FBD0     		beq	.L468
 4956              	.LVL524:
 4957              	.L469:
2077:src/display.c **** 	  do
 4958              		.loc 1 2077 2 is_stmt 1 view .LVU1526
2077:src/display.c **** 	  do
 4959              		.loc 1 2077 5 is_stmt 0 view .LVU1527
 4960 00f8 2E2B     		cmp	r3, #46
 4961 00fa 00F0A681 		beq	.L661
2084:src/display.c **** 	    *p++ = *q++;
 4962              		.loc 1 2084 4 is_stmt 1 view .LVU1528
2084:src/display.c **** 	    *p++ = *q++;
 4963              		.loc 1 2084 7 is_stmt 0 view .LVU1529
 4964 00fe A3F13002 		sub	r2, r3, #48
 4965 0102 092A     		cmp	r2, #9
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4966              		.loc 1 2085 6 is_stmt 1 view .LVU1530
 4967              	.LVL525:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4968              		.loc 1 2085 15 is_stmt 0 view .LVU1531
 4969 0104 9CBF     		itt	ls
 4970 0106 0136     		addls	r6, r6, #1
 4971              	.LVL526:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4972              		.loc 1 2085 11 view .LVU1532
 4973 0108 8DF84830 		strbls	r3, [sp, #72]
2086:src/display.c **** 	    *p++ = *q++;
 4974              		.loc 1 2086 11 view .LVU1533
 4975 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2086:src/display.c **** 	    *p++ = *q++;
 4976              		.loc 1 2086 10 view .LVU1534
 4977 010e A2F13003 		sub	r3, r2, #48
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4978              		.loc 1 2085 8 view .LVU1535
 4979 0112 94BF     		ite	ls
 4980 0114 0DF14901 		addls	r1, sp, #73
1944:src/display.c **** 	char *r;
ARM GAS  /tmp/ccZdZ92R.s 			page 173


 4981              		.loc 1 1944 8 view .LVU1536
 4982 0118 4946     		movhi	r1, r9
 4983              	.LVL527:
2086:src/display.c **** 	    *p++ = *q++;
 4984              		.loc 1 2086 10 is_stmt 1 view .LVU1537
 4985 011a 092B     		cmp	r3, #9
 4986 011c 0CD8     		bhi	.L475
 4987 011e A81B     		subs	r0, r5, r6
 4988 0120 731C     		adds	r3, r6, #1
 4989              	.L476:
 4990              	.LVL528:
2087:src/display.c **** 	    exp++;
 4991              		.loc 1 2087 6 view .LVU1538
2087:src/display.c **** 	    exp++;
 4992              		.loc 1 2087 11 is_stmt 0 view .LVU1539
 4993 0122 01F8012B 		strb	r2, [r1], #1
 4994              	.LVL529:
2087:src/display.c **** 	    exp++;
 4995              		.loc 1 2087 15 view .LVU1540
 4996 0126 1E46     		mov	r6, r3
 4997              	.LVL530:
2088:src/display.c **** 	  }
 4998              		.loc 1 2088 6 is_stmt 1 view .LVU1541
 4999 0128 C518     		adds	r5, r0, r3
 5000              	.LVL531:
2086:src/display.c **** 	    *p++ = *q++;
 5001              		.loc 1 2086 10 view .LVU1542
2086:src/display.c **** 	    *p++ = *q++;
 5002              		.loc 1 2086 11 is_stmt 0 view .LVU1543
 5003 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5004              	.LVL532:
2086:src/display.c **** 	    *p++ = *q++;
 5005              		.loc 1 2086 10 view .LVU1544
 5006 012e A2F1300C 		sub	ip, r2, #48
 5007 0132 BCF1090F 		cmp	ip, #9
 5008 0136 F4D9     		bls	.L476
 5009              	.LVL533:
 5010              	.L475:
2090:src/display.c **** 	    q++;
 5011              		.loc 1 2090 4 is_stmt 1 view .LVU1545
2090:src/display.c **** 	    q++;
 5012              		.loc 1 2090 7 is_stmt 0 view .LVU1546
 5013 0138 2E2A     		cmp	r2, #46
 5014 013a 00F04882 		beq	.L662
 5015              	.LVL534:
 5016              	.L472:
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5017              		.loc 1 2097 2 is_stmt 1 view .LVU1547
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5018              		.loc 1 2098 12 is_stmt 0 view .LVU1548
 5019 013e 009B     		ldr	r3, [sp]
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5020              		.loc 1 2097 5 view .LVU1549
 5021 0140 012F     		cmp	r7, #1
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5022              		.loc 1 2098 12 view .LVU1550
 5023 0142 1E68     		ldr	r6, [r3]
ARM GAS  /tmp/ccZdZ92R.s 			page 174


2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5024              		.loc 1 2097 5 view .LVU1551
 5025 0144 00F06F81 		beq	.L663
 5026 0148 0022     		movs	r2, #0
 5027              	.LVL535:
 5028              	.L478:
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5029              		.loc 1 2111 2 is_stmt 1 view .LVU1552
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5030              		.loc 1 2111 20 is_stmt 0 view .LVU1553
 5031 014a 5244     		add	r2, r2, r10
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5032              		.loc 1 2111 35 view .LVU1554
 5033 014c 501C     		adds	r0, r2, #1
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5034              		.loc 1 2111 4 view .LVU1555
 5035 014e 09EB0003 		add	r3, r9, r0
 5036              	.LVL536:
2112:src/display.c **** 	  *p = '0';
 5037              		.loc 1 2112 2 is_stmt 1 view .LVU1556
2112:src/display.c **** 	  *p = '0';
 5038              		.loc 1 2112 6 is_stmt 0 view .LVU1557
 5039 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2112:src/display.c **** 	  *p = '0';
 5040              		.loc 1 2112 5 view .LVU1558
 5041 0156 3429     		cmp	r1, #52
 5042 0158 21D9     		bls	.L482
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5043              		.loc 1 2113 4 is_stmt 1 view .LVU1559
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5044              		.loc 1 2113 7 is_stmt 0 view .LVU1560
 5045 015a 3021     		movs	r1, #48
 5046 015c 09F80010 		strb	r1, [r9, r0]
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5047              		.loc 1 2114 4 is_stmt 1 view .LVU1561
 5048              	.LVL537:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5049              		.loc 1 2114 23 view .LVU1562
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5050              		.loc 1 2114 4 is_stmt 0 view .LVU1563
 5051 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 5052 0164 3929     		cmp	r1, #57
 5053 0166 40F0A683 		bne	.L483
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5054              		.loc 1 2114 11 view .LVU1564
 5055 016a 4946     		mov	r1, r9
 5056              	.LVL538:
 5057              	.L484:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5058              		.loc 1 2114 38 is_stmt 1 discriminator 3 view .LVU1565
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5059              		.loc 1 2114 34 discriminator 3 view .LVU1566
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5060              		.loc 1 2114 23 discriminator 3 view .LVU1567
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5061              		.loc 1 2114 4 is_stmt 0 discriminator 3 view .LVU1568
 5062 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccZdZ92R.s 			page 175


 5063              	.LVL539:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5064              		.loc 1 2114 4 discriminator 3 view .LVU1569
 5065 0170 BCF1390F 		cmp	ip, #57
 5066 0174 FAD0     		beq	.L484
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5067              		.loc 1 2115 4 is_stmt 1 view .LVU1570
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5068              		.loc 1 2115 7 is_stmt 0 view .LVU1571
 5069 0176 8B42     		cmp	r3, r1
 5070 0178 00F0FD80 		beq	.L664
 5071              	.LVL540:
 5072              	.L554:
2124:src/display.c **** 	      *p = '0';
 5073              		.loc 1 2124 12 is_stmt 1 view .LVU1572
2124:src/display.c **** 	      *p = '0';
 5074              		.loc 1 2124 13 is_stmt 0 view .LVU1573
 5075 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2124:src/display.c **** 	      *p = '0';
 5076              		.loc 1 2124 12 view .LVU1574
 5077 0180 3929     		cmp	r1, #57
 5078 0182 4A44     		add	r2, r2, r9
 5079              	.LVL541:
2124:src/display.c **** 	      *p = '0';
 5080              		.loc 1 2124 12 view .LVU1575
 5081 0184 07D1     		bne	.L487
2125:src/display.c **** 	    (*p)++;
 5082              		.loc 1 2125 11 view .LVU1576
 5083 0186 4FF0300C 		mov	ip, #48
 5084              	.L486:
2125:src/display.c **** 	    (*p)++;
 5085              		.loc 1 2125 8 is_stmt 1 view .LVU1577
2125:src/display.c **** 	    (*p)++;
 5086              		.loc 1 2125 11 is_stmt 0 view .LVU1578
 5087 018a 82F800C0 		strb	ip, [r2]
2124:src/display.c **** 	      *p = '0';
 5088              		.loc 1 2124 12 is_stmt 1 view .LVU1579
 5089              	.LVL542:
2124:src/display.c **** 	      *p = '0';
 5090              		.loc 1 2124 13 is_stmt 0 view .LVU1580
 5091 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5092              	.LVL543:
2124:src/display.c **** 	      *p = '0';
 5093              		.loc 1 2124 12 view .LVU1581
 5094 0192 3929     		cmp	r1, #57
 5095 0194 F9D0     		beq	.L486
 5096              	.L487:
2126:src/display.c **** 	  }
 5097              		.loc 1 2126 6 is_stmt 1 view .LVU1582
2126:src/display.c **** 	  }
 5098              		.loc 1 2126 10 is_stmt 0 view .LVU1583
 5099 0196 0131     		adds	r1, r1, #1
 5100 0198 1170     		strb	r1, [r2]
 5101              	.LVL544:
 5102              	.L651:
2126:src/display.c **** 	  }
 5103              		.loc 1 2126 10 view .LVU1584
ARM GAS  /tmp/ccZdZ92R.s 			page 176


 5104 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5105              	.L482:
2131:src/display.c **** 
 5106              		.loc 1 2131 2 is_stmt 1 view .LVU1585
 5107              	.LVL545:
2131:src/display.c **** 
 5108              		.loc 1 2131 45 view .LVU1586
2131:src/display.c **** 
 5109              		.loc 1 2131 2 is_stmt 0 view .LVU1587
 5110 019e 29B1     		cbz	r1, .L493
 5111              	.LVL546:
 5112              	.L553:
2131:src/display.c **** 
 5113              		.loc 1 2131 62 view .LVU1588
 5114 01a0 3021     		movs	r1, #48
 5115              	.L494:
2131:src/display.c **** 
 5116              		.loc 1 2131 68 is_stmt 1 discriminator 3 view .LVU1589
2131:src/display.c **** 
 5117              		.loc 1 2131 57 discriminator 3 view .LVU1590
 5118              	.LVL547:
2131:src/display.c **** 
 5119              		.loc 1 2131 62 is_stmt 0 discriminator 3 view .LVU1591
 5120 01a2 03F8011B 		strb	r1, [r3], #1
 5121              	.LVL548:
2131:src/display.c **** 
 5122              		.loc 1 2131 45 is_stmt 1 discriminator 3 view .LVU1592
2131:src/display.c **** 
 5123              		.loc 1 2131 2 is_stmt 0 discriminator 3 view .LVU1593
 5124 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5125 01a8 002A     		cmp	r2, #0
 5126 01aa FAD1     		bne	.L494
 5127              	.L493:
2133:src/display.c **** 	switch (mode) {
 5128              		.loc 1 2133 2 is_stmt 1 view .LVU1594
 5129              	.LVL549:
2134:src/display.c **** 	default:
 5130              		.loc 1 2134 2 view .LVU1595
 5131 01ac 022F     		cmp	r7, #2
 5132 01ae 5AD0     		beq	.L576
 5133 01b0 032F     		cmp	r7, #3
 5134 01b2 00F00481 		beq	.L496
 5135 01b6 012F     		cmp	r7, #1
 5136 01b8 00F0B681 		beq	.L497
2137:src/display.c **** 	  if (count != *display_digits)
 5137              		.loc 1 2137 4 view .LVU1596
 5138              	.LVL550:
2137:src/display.c **** 	  if (count != *display_digits)
 5139              		.loc 1 2137 34 view .LVU1597
2137:src/display.c **** 	  if (count != *display_digits)
 5140              		.loc 1 2137 42 is_stmt 0 view .LVU1598
 5141 01bc 22AB     		add	r3, sp, #136
 5142 01be 3344     		add	r3, r3, r6
2137:src/display.c **** 	  if (count != *display_digits)
 5143              		.loc 1 2137 4 view .LVU1599
 5144 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5145 01c4 302B     		cmp	r3, #48
ARM GAS  /tmp/ccZdZ92R.s 			page 177


 5146 01c6 40F06783 		bne	.L570
 5147 01ca 711E     		subs	r1, r6, #1
 5148 01cc 4944     		add	r1, r1, r9
2137:src/display.c **** 	  if (count != *display_digits)
 5149              		.loc 1 2137 15 view .LVU1600
 5150 01ce 3346     		mov	r3, r6
 5151              	.LVL551:
 5152              	.L499:
2137:src/display.c **** 	  if (count != *display_digits)
 5153              		.loc 1 2137 66 is_stmt 1 discriminator 3 view .LVU1601
2137:src/display.c **** 	  if (count != *display_digits)
 5154              		.loc 1 2137 58 discriminator 3 view .LVU1602
2137:src/display.c **** 	  if (count != *display_digits)
 5155              		.loc 1 2137 42 is_stmt 0 discriminator 3 view .LVU1603
 5156 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
2137:src/display.c **** 	  if (count != *display_digits)
 5157              		.loc 1 2137 4 discriminator 3 view .LVU1604
 5158 01d4 3028     		cmp	r0, #48
 5159 01d6 1A46     		mov	r2, r3
2137:src/display.c **** 	  if (count != *display_digits)
 5160              		.loc 1 2137 63 discriminator 3 view .LVU1605
 5161 01d8 03F1FF33 		add	r3, r3, #-1
 5162              	.LVL552:
2137:src/display.c **** 	  if (count != *display_digits)
 5163              		.loc 1 2137 34 is_stmt 1 discriminator 3 view .LVU1606
2137:src/display.c **** 	  if (count != *display_digits)
 5164              		.loc 1 2137 4 is_stmt 0 discriminator 3 view .LVU1607
 5165 01dc F8D0     		beq	.L499
2138:src/display.c **** 	    count++;
 5166              		.loc 1 2138 4 is_stmt 1 view .LVU1608
2138:src/display.c **** 	    count++;
 5167              		.loc 1 2138 7 is_stmt 0 view .LVU1609
 5168 01de 9E42     		cmp	r6, r3
 5169 01e0 08BF     		it	eq
 5170 01e2 1A46     		moveq	r2, r3
 5171              	.LVL553:
 5172              	.L498:
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5173              		.loc 1 2141 4 is_stmt 1 view .LVU1610
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5174              		.loc 1 2141 7 is_stmt 0 view .LVU1611
 5175 01e4 B542     		cmp	r5, r6
 5176 01e6 80F20381 		bge	.L500
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5177              		.loc 1 2141 47 discriminator 1 view .LVU1612
 5178 01ea 931B     		subs	r3, r2, r6
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5179              		.loc 1 2141 31 discriminator 1 view .LVU1613
 5180 01ec AB42     		cmp	r3, r5
 5181 01ee 00F3FF80 		bgt	.L500
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5182              		.loc 1 2166 11 is_stmt 1 view .LVU1614
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5183              		.loc 1 2166 14 is_stmt 0 view .LVU1615
 5184 01f2 002D     		cmp	r5, #0
 5185 01f4 C0F27583 		blt	.L508
 5186 01f8 6B1C     		adds	r3, r5, #1
ARM GAS  /tmp/ccZdZ92R.s 			page 178


2168:src/display.c **** 		*obp++ = ',';
 5187              		.loc 1 2168 31 view .LVU1616
 5188 01fa DFF834A1 		ldr	r10, .L673+8
 5189 01fe 0293     		str	r3, [sp, #8]
 5190 0200 09EB0300 		add	r0, r9, r3
2133:src/display.c **** 	switch (mode) {
 5191              		.loc 1 2133 4 view .LVU1617
 5192 0204 CC46     		mov	ip, r9
1938:src/display.c **** 	int odig = 0;
 5193              		.loc 1 1938 15 view .LVU1618
 5194 0206 4146     		mov	r1, r8
 5195 0208 0192     		str	r2, [sp, #4]
 5196              	.LVL554:
1938:src/display.c **** 	int odig = 0;
 5197              		.loc 1 1938 15 view .LVU1619
 5198 020a 05E0     		b	.L509
 5199              	.LVL555:
 5200              	.L512:
2169:src/display.c **** 	      *obp++ = *p++;
 5201              		.loc 1 2169 3 is_stmt 1 view .LVU1620
2168:src/display.c **** 		*obp++ = ',';
 5202              		.loc 1 2168 18 is_stmt 0 view .LVU1621
 5203 020c 022F     		cmp	r7, #2
2169:src/display.c **** 	      *obp++ = *p++;
 5204              		.loc 1 2169 10 view .LVU1622
 5205 020e 05BF     		ittet	eq
 5206 0210 2C23     		moveq	r3, #44
 5207 0212 4B70     		strbeq	r3, [r1, #1]
2170:src/display.c **** 	      odig++;
 5208              		.loc 1 2170 12 view .LVU1623
 5209 0214 0131     		addne	r1, r1, #1
 5210              	.LVL556:
2169:src/display.c **** 	      *obp++ = *p++;
 5211              		.loc 1 2169 7 view .LVU1624
 5212 0216 0231     		addeq	r1, r1, #2
 5213              	.LVL557:
 5214              	.L509:
2170:src/display.c **** 	      odig++;
 5215              		.loc 1 2170 8 is_stmt 1 discriminator 2 view .LVU1625
2170:src/display.c **** 	      odig++;
 5216              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1626
 5217 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5218              	.LVL558:
2168:src/display.c **** 		*obp++ = ',';
 5219              		.loc 1 2168 8 is_stmt 1 discriminator 2 view .LVU1627
2170:src/display.c **** 	      odig++;
 5220              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1628
 5221 021c 0B70     		strb	r3, [r1]
2171:src/display.c **** 	    }
 5222              		.loc 1 2171 8 is_stmt 1 discriminator 2 view .LVU1629
 5223              	.LVL559:
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5224              		.loc 1 2167 23 discriminator 2 view .LVU1630
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5225              		.loc 1 2167 15 discriminator 2 view .LVU1631
2168:src/display.c **** 		*obp++ = ',';
 5226              		.loc 1 2168 31 is_stmt 0 discriminator 2 view .LVU1632
ARM GAS  /tmp/ccZdZ92R.s 			page 179


 5227 021e A9EB0C03 		sub	r3, r9, ip
 5228 0222 2B44     		add	r3, r3, r5
 5229 0224 8AFB0327 		smull	r2, r7, r10, r3
 5230 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5231 022c 07EB4707 		add	r7, r7, r7, lsl #1
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5232              		.loc 1 2167 6 discriminator 2 view .LVU1633
 5233 0230 6045     		cmp	r0, ip
2168:src/display.c **** 		*obp++ = ',';
 5234              		.loc 1 2168 31 discriminator 2 view .LVU1634
 5235 0232 A3EB0707 		sub	r7, r3, r7
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5236              		.loc 1 2167 6 discriminator 2 view .LVU1635
 5237 0236 E9D1     		bne	.L512
 5238 0238 019A     		ldr	r2, [sp, #4]
 5239 023a 029F     		ldr	r7, [sp, #8]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5240              		.loc 1 2173 6 is_stmt 1 view .LVU1636
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5241              		.loc 1 2173 13 is_stmt 0 view .LVU1637
 5242 023c 2E23     		movs	r3, #46
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5243              		.loc 1 2174 9 view .LVU1638
 5244 023e BA42     		cmp	r2, r7
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5245              		.loc 1 2173 13 view .LVU1639
 5246 0240 4B70     		strb	r3, [r1, #1]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5247              		.loc 1 2173 10 view .LVU1640
 5248 0242 01F10203 		add	r3, r1, #2
 5249              	.LVL560:
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5250              		.loc 1 2174 6 is_stmt 1 view .LVU1641
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5251              		.loc 1 2174 9 is_stmt 0 view .LVU1642
 5252 0246 2BDD     		ble	.L506
 5253 0248 A2EB050C 		sub	ip, r2, r5
 5254              	.LVL561:
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5255              		.loc 1 2174 9 view .LVU1643
 5256 024c 8C44     		add	ip, ip, r1
 5257 024e 0131     		adds	r1, r1, #1
 5258              	.LVL562:
 5259              	.L513:
2176:src/display.c **** 		odig++;
 5260              		.loc 1 2176 3 is_stmt 1 discriminator 3 view .LVU1644
2176:src/display.c **** 		odig++;
 5261              		.loc 1 2176 10 is_stmt 0 discriminator 3 view .LVU1645
 5262 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5263              	.LVL563:
2176:src/display.c **** 		odig++;
 5264              		.loc 1 2176 10 discriminator 3 view .LVU1646
 5265 0254 01F8017F 		strb	r7, [r1, #1]!
2177:src/display.c **** 	      }
 5266              		.loc 1 2177 3 is_stmt 1 discriminator 3 view .LVU1647
2175:src/display.c **** 		*obp++ = *p++;
 5267              		.loc 1 2175 31 discriminator 3 view .LVU1648
ARM GAS  /tmp/ccZdZ92R.s 			page 180


2175:src/display.c **** 		*obp++ = *p++;
 5268              		.loc 1 2175 22 discriminator 3 view .LVU1649
2175:src/display.c **** 		*obp++ = *p++;
 5269              		.loc 1 2175 8 is_stmt 0 discriminator 3 view .LVU1650
 5270 0258 8C45     		cmp	ip, r1
 5271 025a F9D1     		bne	.L513
 5272 025c E943     		mvns	r1, r5
 5273 025e 1144     		add	r1, r1, r2
 5274 0260 0B44     		add	r3, r3, r1
 5275              	.LVL564:
2177:src/display.c **** 	      }
 5276              		.loc 1 2177 7 view .LVU1651
 5277 0262 1746     		mov	r7, r2
 5278 0264 1CE0     		b	.L506
 5279              	.LVL565:
 5280              	.L576:
2233:src/display.c **** 	  case -1:
 5281              		.loc 1 2233 16 view .LVU1652
 5282 0266 0127     		movs	r7, #1
 5283              	.LVL566:
 5284              	.L652:
2233:src/display.c **** 	  case -1:
 5285              		.loc 1 2233 16 view .LVU1653
 5286 0268 4146     		mov	r1, r8
 5287              	.LVL567:
 5288              	.L495:
2247:src/display.c **** 	  };
 5289              		.loc 1 2247 6 is_stmt 1 view .LVU1654
2248:src/display.c **** 	  // Falling through
 5290              		.loc 1 2248 5 view .LVU1655
2252:src/display.c **** 	  odig++;
 5291              		.loc 1 2252 4 view .LVU1656
2252:src/display.c **** 	  odig++;
 5292              		.loc 1 2252 15 is_stmt 0 view .LVU1657
 5293 026a 4A46     		mov	r2, r9
 5294              	.LVL568:
2252:src/display.c **** 	  odig++;
 5295              		.loc 1 2252 11 view .LVU1658
 5296 026c 0B46     		mov	r3, r1
 5297 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5298              	.LVL569:
2252:src/display.c **** 	  odig++;
 5299              		.loc 1 2252 11 view .LVU1659
 5300 0272 03F8020B 		strb	r0, [r3], #2
2253:src/display.c **** 	  *obp++ = '.';
 5301              		.loc 1 2253 4 is_stmt 1 view .LVU1660
2254:src/display.c **** 	  dd--;
 5302              		.loc 1 2254 4 view .LVU1661
 5303              	.LVL570:
2256:src/display.c **** 	    *obp++ = *p++;
 5304              		.loc 1 2256 10 is_stmt 0 view .LVU1662
 5305 0276 BAF1000F 		cmp	r10, #0
2254:src/display.c **** 	  dd--;
 5306              		.loc 1 2254 11 view .LVU1663
 5307 027a 4FF02E00 		mov	r0, #46
 5308 027e 4870     		strb	r0, [r1, #1]
2255:src/display.c **** 	  while (dd-- >= 0) {
ARM GAS  /tmp/ccZdZ92R.s 			page 181


 5309              		.loc 1 2255 4 is_stmt 1 view .LVU1664
2256:src/display.c **** 	    *obp++ = *p++;
 5310              		.loc 1 2256 4 view .LVU1665
2256:src/display.c **** 	    *obp++ = *p++;
 5311              		.loc 1 2256 10 view .LVU1666
2256:src/display.c **** 	    *obp++ = *p++;
 5312              		.loc 1 2256 10 is_stmt 0 view .LVU1667
 5313 0280 40F30F83 		ble	.L573
2256:src/display.c **** 	    *obp++ = *p++;
 5314              		.loc 1 2256 10 view .LVU1668
 5315 0284 0AF10100 		add	r0, r10, #1
 5316 0288 0131     		adds	r1, r1, #1
 5317 028a 8144     		add	r9, r9, r0
 5318              	.LVL571:
 5319              	.L536:
2257:src/display.c **** 	    odig++;
 5320              		.loc 1 2257 6 is_stmt 1 view .LVU1669
2257:src/display.c **** 	    odig++;
 5321              		.loc 1 2257 13 is_stmt 0 view .LVU1670
 5322 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5323              	.LVL572:
2257:src/display.c **** 	    odig++;
 5324              		.loc 1 2257 13 view .LVU1671
 5325 0290 01F8010F 		strb	r0, [r1, #1]!
2258:src/display.c **** 	  }
 5326              		.loc 1 2258 6 is_stmt 1 view .LVU1672
2256:src/display.c **** 	    *obp++ = *p++;
 5327              		.loc 1 2256 10 view .LVU1673
2256:src/display.c **** 	    *obp++ = *p++;
 5328              		.loc 1 2256 10 is_stmt 0 view .LVU1674
 5329 0294 4A45     		cmp	r2, r9
 5330 0296 F9D1     		bne	.L536
 5331 0298 5344     		add	r3, r3, r10
 5332 029a 5744     		add	r7, r7, r10
2260:src/display.c **** 	}
 5333              		.loc 1 2260 13 view .LVU1675
 5334 029c 4FF0010B 		mov	fp, #1
 5335              	.LVL573:
 5336              	.L506:
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5337              		.loc 1 2269 2 is_stmt 1 view .LVU1676
2275:src/display.c **** 	if (odig > *display_digits)
 5338              		.loc 1 2275 2 view .LVU1677
 5339 02a0 B742     		cmp	r7, r6
 5340 02a2 A8BF     		it	ge
 5341 02a4 3746     		movge	r7, r6
 5342              	.LVL574:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5343              		.loc 1 2278 23 is_stmt 0 view .LVU1678
 5344 02a6 F61B     		subs	r6, r6, r7
2275:src/display.c **** 	if (odig > *display_digits)
 5345              		.loc 1 2275 7 view .LVU1679
 5346 02a8 0022     		movs	r2, #0
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5347              		.loc 1 2278 4 view .LVU1680
 5348 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2275:src/display.c **** 	if (odig > *display_digits)
ARM GAS  /tmp/ccZdZ92R.s 			page 182


 5349              		.loc 1 2275 7 view .LVU1681
 5350 02ae 1A70     		strb	r2, [r3]
2276:src/display.c **** 	  odig = *display_digits;
 5351              		.loc 1 2276 2 is_stmt 1 view .LVU1682
 5352              	.LVL575:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5353              		.loc 1 2278 2 view .LVU1683
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5354              		.loc 1 2279 2 view .LVU1684
2281:src/display.c **** 	  if (res) *res++ = '-';
 5355              		.loc 1 2281 2 view .LVU1685
2281:src/display.c **** 	  if (res) *res++ = '-';
 5356              		.loc 1 2281 5 is_stmt 0 view .LVU1686
 5357 02b0 BEF1000F 		cmp	lr, #0
 5358 02b4 05D0     		beq	.L537
2282:src/display.c **** 	  else {
 5359              		.loc 1 2282 4 is_stmt 1 view .LVU1687
2282:src/display.c **** 	  else {
 5360              		.loc 1 2282 7 is_stmt 0 view .LVU1688
 5361 02b6 002C     		cmp	r4, #0
 5362 02b8 00F0B281 		beq	.L538
2282:src/display.c **** 	  else {
 5363              		.loc 1 2282 13 is_stmt 1 discriminator 1 view .LVU1689
 5364              	.LVL576:
2282:src/display.c **** 	  else {
 5365              		.loc 1 2282 20 is_stmt 0 discriminator 1 view .LVU1690
 5366 02bc 2D22     		movs	r2, #45
 5367 02be 04F8012B 		strb	r2, [r4], #1
 5368              	.LVL577:
 5369              	.L537:
2290:src/display.c **** 	  if (c == '.') {
 5370              		.loc 1 2290 12 is_stmt 1 discriminator 1 view .LVU1691
2290:src/display.c **** 	  if (c == '.') {
 5371              		.loc 1 2290 18 is_stmt 0 discriminator 1 view .LVU1692
 5372 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5373              	.LVL578:
2290:src/display.c **** 	  if (c == '.') {
 5374              		.loc 1 2290 2 discriminator 1 view .LVU1693
 5375 02c6 E2B1     		cbz	r2, .L539
2290:src/display.c **** 	  if (c == '.') {
 5376              		.loc 1 2290 31 view .LVU1694
 5377 02c8 6B2E     		cmp	r6, #107
 5378 02ca 1ADC     		bgt	.L539
 5379              	.LVL579:
 5380              	.L540:
 5381              	.LBB400:
 5382              	.LBB401:
 372:src/display.c ****   } else {
 5383              		.loc 1 372 17 view .LVU1695
 5384 02cc 3946     		mov	r1, r7
 5385              	.LBE401:
 5386              	.LBE400:
2294:src/display.c **** 	  } else {
 5387              		.loc 1 2294 12 view .LVU1696
 5388 02ce DFF864A0 		ldr	r10, .L673+12
2292:src/display.c **** 	  } else if (c == ',') {
 5389              		.loc 1 2292 12 view .LVU1697
ARM GAS  /tmp/ccZdZ92R.s 			page 183


 5390 02d2 DFF86490 		ldr	r9, .L673+16
 5391              	.LBB405:
 5392              	.LBB402:
 372:src/display.c ****   } else {
 5393              		.loc 1 372 17 view .LVU1698
 5394 02d6 1F46     		mov	r7, r3
 5395              	.LVL580:
 372:src/display.c ****   } else {
 5396              		.loc 1 372 17 view .LVU1699
 5397 02d8 0B46     		mov	r3, r1
 5398              	.LVL581:
 5399              	.L549:
 372:src/display.c ****   } else {
 5400              		.loc 1 372 17 view .LVU1700
 5401              	.LBE402:
 5402              	.LBE405:
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5403              		.loc 1 2291 4 is_stmt 1 view .LVU1701
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5404              		.loc 1 2291 7 is_stmt 0 view .LVU1702
 5405 02da 2E2A     		cmp	r2, #46
 5406 02dc 00F0DB80 		beq	.L665
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5407              		.loc 1 2293 11 is_stmt 1 view .LVU1703
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5408              		.loc 1 2293 14 is_stmt 0 view .LVU1704
 5409 02e0 2C2A     		cmp	r2, #44
 5410 02e2 00F0E880 		beq	.L666
2296:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5411              		.loc 1 2296 6 is_stmt 1 view .LVU1705
 5412              	.LVL582:
 5413              	.LBB406:
 5414              	.LBI406:
 407:src/display.c ****   if (res) *res++ = ch;
 5415              		.loc 1 407 14 view .LVU1706
 5416              	.LBB407:
 408:src/display.c ****   else	set_dig(base, ch);
 5417              		.loc 1 408 3 view .LVU1707
 408:src/display.c ****   else	set_dig(base, ch);
 5418              		.loc 1 408 6 is_stmt 0 view .LVU1708
 5419 02e6 002C     		cmp	r4, #0
 5420 02e8 00F0F280 		beq	.L547
 408:src/display.c ****   else	set_dig(base, ch);
 5421              		.loc 1 408 12 is_stmt 1 view .LVU1709
 5422              	.LVL583:
 408:src/display.c ****   else	set_dig(base, ch);
 5423              		.loc 1 408 19 is_stmt 0 view .LVU1710
 5424 02ec 04F8012B 		strb	r2, [r4], #1
 5425              	.LVL584:
 5426              	.L548:
 410:src/display.c **** }
 5427              		.loc 1 410 3 is_stmt 1 view .LVU1711
 410:src/display.c **** }
 5428              		.loc 1 410 3 is_stmt 0 view .LVU1712
 5429              	.LBE407:
 5430              	.LBE406:
2297:src/display.c **** 	  }
ARM GAS  /tmp/ccZdZ92R.s 			page 184


 5431              		.loc 1 2297 6 is_stmt 1 view .LVU1713
2290:src/display.c **** 	  if (c == '.') {
 5432              		.loc 1 2290 18 is_stmt 0 view .LVU1714
 5433 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5434              	.LVL585:
2297:src/display.c **** 	  }
 5435              		.loc 1 2297 8 view .LVU1715
 5436 02f4 0936     		adds	r6, r6, #9
 5437              	.LVL586:
2290:src/display.c **** 	  if (c == '.') {
 5438              		.loc 1 2290 53 is_stmt 1 view .LVU1716
2290:src/display.c **** 	  if (c == '.') {
 5439              		.loc 1 2290 12 view .LVU1717
2290:src/display.c **** 	  if (c == '.') {
 5440              		.loc 1 2290 2 is_stmt 0 view .LVU1718
 5441 02f6 0AB1     		cbz	r2, .L648
2290:src/display.c **** 	  if (c == '.') {
 5442              		.loc 1 2290 31 discriminator 3 view .LVU1719
 5443 02f8 6B2E     		cmp	r6, #107
 5444 02fa EEDD     		ble	.L549
 5445              	.L648:
2290:src/display.c **** 	  if (c == '.') {
 5446              		.loc 1 2290 31 discriminator 3 view .LVU1720
 5447 02fc 1A46     		mov	r2, r3
 5448              	.LVL587:
2290:src/display.c **** 	  if (c == '.') {
 5449              		.loc 1 2290 31 discriminator 3 view .LVU1721
 5450 02fe 3B46     		mov	r3, r7
 5451 0300 1746     		mov	r7, r2
 5452              	.LVL588:
 5453              	.L539:
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5454              		.loc 1 2310 2 is_stmt 1 view .LVU1722
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5455              		.loc 1 2310 5 is_stmt 0 view .LVU1723
 5456 0302 BBF1000F 		cmp	fp, #0
 5457 0306 40F0F880 		bne	.L667
 5458              	.L550:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5459              		.loc 1 2313 2 is_stmt 1 view .LVU1724
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5460              		.loc 1 2313 5 is_stmt 0 view .LVU1725
 5461 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5462 030e 2E2B     		cmp	r3, #46
 5463 0310 00F0E580 		beq	.L668
 5464              	.L551:
2315:src/display.c ****       }
 5465              		.loc 1 2315 2 is_stmt 1 view .LVU1726
2315:src/display.c ****       }
 5466              		.loc 1 2315 18 is_stmt 0 view .LVU1727
 5467 0314 009B     		ldr	r3, [sp]
 5468 0316 1F60     		str	r7, [r3]
 5469              	.LVL589:
 5470              	.L438:
2316:src/display.c **** 
 5471              		.loc 1 2316 7 view .LVU1728
 5472 0318 23B0     		add	sp, sp, #140
ARM GAS  /tmp/ccZdZ92R.s 			page 185


 5473              		.cfi_remember_state
 5474              		.cfi_def_cfa_offset 36
 5475              	.LVL590:
2316:src/display.c **** 
 5476              		.loc 1 2316 7 view .LVU1729
 5477              		@ sp needed
 5478 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5479              	.LVL591:
 5480              	.L446:
 5481              		.cfi_restore_state
2015:src/display.c **** 
 5482              		.loc 1 2015 4 is_stmt 1 view .LVU1730
 5483 031e 4146     		mov	r1, r8
 5484 0320 3046     		mov	r0, r6
 5485 0322 FFF7FEFF 		bl	decNumberToString
 5486              	.LVL592:
 5487 0326 A5E6     		b	.L448
 5488              	.L674:
 5489              		.align	2
 5490              	.L673:
 5491 0328 00000000 		.word	main_ram
 5492 032c 00000000 		.word	StateWhileOn
 5493 0330 56555555 		.word	1431655766
 5494 0334 00000000 		.word	.LANCHOR0
 5495 0338 00000000 		.word	.LANCHOR1
 5496              	.LVL593:
 5497              	.L439:
1973:src/display.c **** 	    if (State2.hms) {
 5498              		.loc 1 1973 4 view .LVU1731
1973:src/display.c **** 	    if (State2.hms) {
 5499              		.loc 1 1973 25 is_stmt 0 view .LVU1732
 5500 033c C14B     		ldr	r3, .L675
 5501 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5502              		.loc 1 1973 22 view .LVU1733
 5503 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5504              		.loc 1 1973 25 view .LVU1734
 5505 0342 01F00201 		and	r1, r1, #2
1973:src/display.c **** 	    if (State2.hms) {
 5506              		.loc 1 1973 22 view .LVU1735
 5507 0346 1143     		orrs	r1, r1, r2
 5508 0348 7FF46EAE 		bne	.L442
1974:src/display.c **** 	      set_x_hms(z, res);
 5509              		.loc 1 1974 6 is_stmt 1 view .LVU1736
1974:src/display.c **** 	      set_x_hms(z, res);
 5510              		.loc 1 1974 10 is_stmt 0 view .LVU1737
 5511 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1974:src/display.c **** 	      set_x_hms(z, res);
 5512              		.loc 1 1974 9 view .LVU1738
 5513 034e DA07     		lsls	r2, r3, #31
 5514 0350 00F19E82 		bmi	.L669
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5515              		.loc 1 1978 11 is_stmt 1 view .LVU1739
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5516              		.loc 1 1978 15 is_stmt 0 view .LVU1740
 5517 0354 BC4B     		ldr	r3, .L675+4
ARM GAS  /tmp/ccZdZ92R.s 			page 186


 5518 0356 1B68     		ldr	r3, [r3]
 5519 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5520              		.loc 1 1978 14 view .LVU1741
 5521 035c 9B06     		lsls	r3, r3, #26
 5522 035e 7FF563AE 		bpl	.L442
1979:src/display.c **** 		return;
 5523              		.loc 1 1979 8 is_stmt 1 view .LVU1742
1979:src/display.c **** 		return;
 5524              		.loc 1 1979 12 is_stmt 0 view .LVU1743
 5525 0362 2146     		mov	r1, r4
 5526 0364 3046     		mov	r0, r6
 5527 0366 FFF7FEFF 		bl	set_x_fract
 5528              	.LVL594:
1979:src/display.c **** 		return;
 5529              		.loc 1 1979 11 view .LVU1744
 5530 036a 0028     		cmp	r0, #0
 5531 036c 3FF45CAE 		beq	.L442
 5532 0370 D2E7     		b	.L438
 5533              	.LVL595:
 5534              	.L562:
2061:src/display.c **** 	else exp = s_to_i(q+1);
 5535              		.loc 1 2061 21 view .LVU1745
 5536 0372 0546     		mov	r5, r0
 5537 0374 A5E6     		b	.L462
 5538              	.LVL596:
 5539              	.L664:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5540              		.loc 1 2115 7 view .LVU1746
 5541 0376 4A46     		mov	r2, r9
2116:src/display.c **** 	    mantissa[0] = '1';
 5542              		.loc 1 2116 41 view .LVU1747
 5543 0378 4FF0300C 		mov	ip, #48
 5544              	.LVL597:
 5545              	.L488:
2116:src/display.c **** 	    mantissa[0] = '1';
 5546              		.loc 1 2116 47 is_stmt 1 discriminator 3 view .LVU1748
2116:src/display.c **** 	    mantissa[0] = '1';
 5547              		.loc 1 2116 36 discriminator 3 view .LVU1749
2116:src/display.c **** 	    mantissa[0] = '1';
 5548              		.loc 1 2116 41 is_stmt 0 discriminator 3 view .LVU1750
 5549 037c 02F801CB 		strb	ip, [r2], #1
 5550              	.LVL598:
2116:src/display.c **** 	    mantissa[0] = '1';
 5551              		.loc 1 2116 25 is_stmt 1 discriminator 3 view .LVU1751
2116:src/display.c **** 	    mantissa[0] = '1';
 5552              		.loc 1 2116 6 is_stmt 0 discriminator 3 view .LVU1752
 5553 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5554 0382 3929     		cmp	r1, #57
 5555 0384 FAD0     		beq	.L488
 5556              	.LVL599:
 5557              	.L555:
2117:src/display.c **** 	    exp++;
 5558              		.loc 1 2117 6 is_stmt 1 view .LVU1753
2117:src/display.c **** 	    exp++;
 5559              		.loc 1 2117 18 is_stmt 0 view .LVU1754
 5560 0386 3122     		movs	r2, #49
ARM GAS  /tmp/ccZdZ92R.s 			page 187


2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5561              		.loc 1 2119 9 view .LVU1755
 5562 0388 012F     		cmp	r7, #1
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5563              		.loc 1 2118 9 view .LVU1756
 5564 038a 05F10105 		add	r5, r5, #1
 5565              	.LVL600:
2117:src/display.c **** 	    exp++;
 5566              		.loc 1 2117 18 view .LVU1757
 5567 038e 8DF84820 		strb	r2, [sp, #72]
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5568              		.loc 1 2118 6 is_stmt 1 view .LVU1758
 5569              	.LVL601:
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5570              		.loc 1 2119 6 view .LVU1759
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5571              		.loc 1 2119 9 is_stmt 0 view .LVU1760
 5572 0392 7FF402AF 		bne	.L651
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5573              		.loc 1 2119 27 discriminator 1 view .LVU1761
 5574 0396 AE42     		cmp	r6, r5
 5575 0398 00F3C180 		bgt	.L490
2120:src/display.c **** 	      extra_digits = 0;
 5576              		.loc 1 2120 8 is_stmt 1 view .LVU1762
2120:src/display.c **** 	      extra_digits = 0;
 5577              		.loc 1 2120 28 is_stmt 0 view .LVU1763
 5578 039c AA4B     		ldr	r3, .L675+4
 5579              	.LVL602:
2120:src/display.c **** 	      extra_digits = 0;
 5580              		.loc 1 2120 28 view .LVU1764
 5581 039e 1B68     		ldr	r3, [r3]
 5582 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2120:src/display.c **** 	      extra_digits = 0;
 5583              		.loc 1 2120 37 view .LVU1765
 5584 03a4 D806     		lsls	r0, r3, #27
 5585              	.LVL603:
2120:src/display.c **** 	      extra_digits = 0;
 5586              		.loc 1 2120 37 view .LVU1766
 5587 03a6 40F1C082 		bpl	.L670
 5588              	.LVL604:
2131:src/display.c **** 
 5589              		.loc 1 2131 2 is_stmt 1 view .LVU1767
2131:src/display.c **** 
 5590              		.loc 1 2131 40 is_stmt 0 view .LVU1768
 5591 03aa 0AF10102 		add	r2, r10, #1
2131:src/display.c **** 
 5592              		.loc 1 2131 9 view .LVU1769
 5593 03ae 09EB0203 		add	r3, r9, r2
 5594              	.LVL605:
2131:src/display.c **** 
 5595              		.loc 1 2131 45 is_stmt 1 view .LVU1770
2131:src/display.c **** 
 5596              		.loc 1 2131 2 is_stmt 0 view .LVU1771
 5597 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2120:src/display.c **** 	      extra_digits = 0;
 5598              		.loc 1 2120 37 view .LVU1772
 5599 03b6 0327     		movs	r7, #3
ARM GAS  /tmp/ccZdZ92R.s 			page 188


2131:src/display.c **** 
 5600              		.loc 1 2131 2 view .LVU1773
 5601 03b8 002A     		cmp	r2, #0
 5602 03ba 7FF4F1AE 		bne	.L553
 5603              	.LVL606:
 5604              	.L496:
2233:src/display.c **** 	  case -1:
 5605              		.loc 1 2233 4 is_stmt 1 view .LVU1774
2233:src/display.c **** 	  case -1:
 5606              		.loc 1 2233 16 is_stmt 0 view .LVU1775
 5607 03be A34B     		ldr	r3, .L675+8
 5608 03c0 83FB0523 		smull	r2, r3, r3, r5
 5609 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5610 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5611 03cc EB1A     		subs	r3, r5, r3
 5612 03ce 0233     		adds	r3, r3, #2
 5613 03d0 042B     		cmp	r3, #4
 5614 03d2 3FF648AF 		bhi	.L576
 5615 03d6 01A2     		adr	r2, .L533
 5616 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5617              		.p2align 2
 5618              	.L533:
 5619 03dc 0B050000 		.word	.L577+1
 5620 03e0 A7070000 		.word	.L532+1
 5621 03e4 67020000 		.word	.L576+1
 5622 03e8 0B050000 		.word	.L577+1
 5623 03ec A7070000 		.word	.L532+1
 5624              	.LVL607:
 5625              		.p2align 1
 5626              	.L500:
2142:src/display.c **** 	    case -1:
 5627              		.loc 1 2142 6 is_stmt 1 view .LVU1776
2142:src/display.c **** 	    case -1:
 5628              		.loc 1 2142 32 is_stmt 0 view .LVU1777
 5629 03f0 9549     		ldr	r1, .L675+4
2142:src/display.c **** 	    case -1:
 5630              		.loc 1 2142 19 view .LVU1778
 5631 03f2 964B     		ldr	r3, .L675+8
2142:src/display.c **** 	    case -1:
 5632              		.loc 1 2142 32 view .LVU1779
 5633 03f4 0968     		ldr	r1, [r1]
2142:src/display.c **** 	    case -1:
 5634              		.loc 1 2142 19 view .LVU1780
 5635 03f6 83FB0503 		smull	r0, r3, r3, r5
2142:src/display.c **** 	    case -1:
 5636              		.loc 1 2142 32 view .LVU1781
 5637 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2142:src/display.c **** 	    case -1:
 5638              		.loc 1 2142 19 view .LVU1782
 5639 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5640 0402 03EB4303 		add	r3, r3, r3, lsl #1
2142:src/display.c **** 	    case -1:
 5641              		.loc 1 2142 32 view .LVU1783
 5642 0406 C1F30011 		ubfx	r1, r1, #4, #1
2142:src/display.c **** 	    case -1:
 5643              		.loc 1 2142 19 view .LVU1784
 5644 040a EB1A     		subs	r3, r5, r3
ARM GAS  /tmp/ccZdZ92R.s 			page 189


2142:src/display.c **** 	    case -1:
 5645              		.loc 1 2142 24 view .LVU1785
 5646 040c 03FB01F3 		mul	r3, r3, r1
 5647 0410 0233     		adds	r3, r3, #2
 5648 0412 042B     		cmp	r3, #4
 5649 0414 00F24282 		bhi	.L571
 5650 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5651              	.L504:
 5652 041c DC01     		.2byte	(.L572-.L504)/2
 5653 041e FD01     		.2byte	(.L503-.L504)/2
 5654 0420 4002     		.2byte	(.L571-.L504)/2
 5655 0422 DC01     		.2byte	(.L572-.L504)/2
 5656 0424 FD01     		.2byte	(.L503-.L504)/2
 5657              	.LVL608:
 5658              		.p2align 1
 5659              	.L663:
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5660              		.loc 1 2098 4 is_stmt 1 view .LVU1786
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5661              		.loc 1 2098 7 is_stmt 0 view .LVU1787
 5662 0426 AE42     		cmp	r6, r5
 5663 0428 04DD     		ble	.L479
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5664              		.loc 1 2098 45 discriminator 1 view .LVU1788
 5665 042a CAF10003 		rsb	r3, r10, #0
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5666              		.loc 1 2098 36 discriminator 1 view .LVU1789
 5667 042e AB42     		cmp	r3, r5
 5668 0430 40F3C681 		ble	.L480
 5669              	.L479:
2099:src/display.c **** 	  else {
 5670              		.loc 1 2099 6 is_stmt 1 view .LVU1790
2099:src/display.c **** 	  else {
 5671              		.loc 1 2099 26 is_stmt 0 view .LVU1791
 5672 0434 844B     		ldr	r3, .L675+4
 5673 0436 1B68     		ldr	r3, [r3]
 5674 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2099:src/display.c **** 	  else {
 5675              		.loc 1 2099 35 view .LVU1792
 5676 043c 13F0100F 		tst	r3, #16
 5677 0440 14BF     		ite	ne
 5678 0442 0327     		movne	r7, #3
 5679              	.LVL609:
2099:src/display.c **** 	  else {
 5680              		.loc 1 2099 35 view .LVU1793
 5681 0444 0227     		moveq	r7, #2
 5682 0446 0022     		movs	r2, #0
 5683 0448 7FE6     		b	.L478
 5684              	.LVL610:
 5685              	.L661:
2099:src/display.c **** 	  else {
 5686              		.loc 1 2099 35 view .LVU1794
 5687 044a 013D     		subs	r5, r5, #1
 5688 044c 7219     		adds	r2, r6, r5
 5689              	.L471:
2078:src/display.c **** 	    exp--;
 5690              		.loc 1 2078 4 is_stmt 1 discriminator 1 view .LVU1795
ARM GAS  /tmp/ccZdZ92R.s 			page 190


2079:src/display.c **** 	  while (*++q == '0');
 5691              		.loc 1 2079 6 discriminator 1 view .LVU1796
 5692 044e 951B     		subs	r5, r2, r6
 5693              	.LVL611:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5694              		.loc 1 2080 10 discriminator 1 view .LVU1797
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5695              		.loc 1 2080 11 is_stmt 0 discriminator 1 view .LVU1798
 5696 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5697              	.LVL612:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5698              		.loc 1 2080 4 discriminator 1 view .LVU1799
 5699 0454 302B     		cmp	r3, #48
 5700 0456 FAD0     		beq	.L471
2081:src/display.c **** 	    *p++ = *q++;
 5701              		.loc 1 2081 10 is_stmt 1 view .LVU1800
 5702 0458 A3F13002 		sub	r2, r3, #48
 5703 045c 092A     		cmp	r2, #9
 5704 045e 3FF66EAE 		bhi	.L472
1944:src/display.c **** 	char *r;
 5705              		.loc 1 1944 8 is_stmt 0 view .LVU1801
 5706 0462 4A46     		mov	r2, r9
 5707              	.LVL613:
 5708              	.L473:
2082:src/display.c **** 	} else {
 5709              		.loc 1 2082 6 is_stmt 1 view .LVU1802
2082:src/display.c **** 	} else {
 5710              		.loc 1 2082 11 is_stmt 0 view .LVU1803
 5711 0464 02F8013B 		strb	r3, [r2], #1
 5712              	.LVL614:
2081:src/display.c **** 	    *p++ = *q++;
 5713              		.loc 1 2081 10 is_stmt 1 view .LVU1804
2081:src/display.c **** 	    *p++ = *q++;
 5714              		.loc 1 2081 11 is_stmt 0 view .LVU1805
 5715 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2081:src/display.c **** 	    *p++ = *q++;
 5716              		.loc 1 2081 10 view .LVU1806
 5717 046c A3F13001 		sub	r1, r3, #48
 5718 0470 0929     		cmp	r1, #9
 5719 0472 F7D9     		bls	.L473
 5720 0474 63E6     		b	.L472
 5721              	.LVL615:
 5722              	.L659:
2072:src/display.c **** 	  q++;
 5723              		.loc 1 2072 4 is_stmt 1 view .LVU1807
2073:src/display.c **** 	} else if (*q == '+')
 5724              		.loc 1 2073 4 view .LVU1808
2072:src/display.c **** 	  q++;
 5725              		.loc 1 2072 13 is_stmt 0 view .LVU1809
 5726 0476 4FF0010E 		mov	lr, #1
 5727 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2073:src/display.c **** 	} else if (*q == '+')
 5728              		.loc 1 2073 5 view .LVU1810
 5729 047c 7644     		add	r6, r6, lr
 5730              	.LVL616:
2073:src/display.c **** 	} else if (*q == '+')
 5731              		.loc 1 2073 5 view .LVU1811
ARM GAS  /tmp/ccZdZ92R.s 			page 191


 5732 047e 35E6     		b	.L467
 5733              	.LVL617:
 5734              	.L657:
2041:src/display.c **** 	  trimzeros = 1;
 5735              		.loc 1 2041 4 is_stmt 1 view .LVU1812
2041:src/display.c **** 	  trimzeros = 1;
 5736              		.loc 1 2041 11 is_stmt 0 view .LVU1813
 5737 0480 3046     		mov	r0, r6
 5738 0482 FFF7FEFF 		bl	std_round_fix
 5739              	.LVL618:
2043:src/display.c **** 	} else if (dd >= *display_digits)
 5740              		.loc 1 2043 7 view .LVU1814
 5741 0486 009B     		ldr	r3, [sp]
 5742 0488 1D68     		ldr	r5, [r3]
2042:src/display.c **** 	  dd = *display_digits - 1;
 5743              		.loc 1 2042 14 view .LVU1815
 5744 048a 0123     		movs	r3, #1
2041:src/display.c **** 	  trimzeros = 1;
 5745              		.loc 1 2041 11 view .LVU1816
 5746 048c 0746     		mov	r7, r0
 5747              	.LVL619:
2042:src/display.c **** 	  dd = *display_digits - 1;
 5748              		.loc 1 2042 4 is_stmt 1 view .LVU1817
2043:src/display.c **** 	} else if (dd >= *display_digits)
 5749              		.loc 1 2043 4 view .LVU1818
2043:src/display.c **** 	} else if (dd >= *display_digits)
 5750              		.loc 1 2043 7 is_stmt 0 view .LVU1819
 5751 048e 05F1FF3A 		add	r10, r5, #-1
 5752              	.LVL620:
2042:src/display.c **** 	  dd = *display_digits - 1;
 5753              		.loc 1 2042 14 view .LVU1820
 5754 0492 0193     		str	r3, [sp, #4]
 5755              	.LVL621:
2042:src/display.c **** 	  dd = *display_digits - 1;
 5756              		.loc 1 2042 14 view .LVU1821
 5757 0494 00E6     		b	.L461
 5758              	.LVL622:
 5759              	.L665:
2292:src/display.c **** 	  } else if (c == ',') {
 5760              		.loc 1 2292 6 is_stmt 1 view .LVU1822
2292:src/display.c **** 	  } else if (c == ',') {
 5761              		.loc 1 2292 12 is_stmt 0 view .LVU1823
 5762 0496 2246     		mov	r2, r4
 5763              	.LVL623:
2292:src/display.c **** 	  } else if (c == ',') {
 5764              		.loc 1 2292 12 view .LVU1824
 5765 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5766 049c 0193     		str	r3, [sp, #4]
 5767 049e A6F10900 		sub	r0, r6, #9
 5768 04a2 FFF7FEFF 		bl	set_decimal
 5769              	.LVL624:
 5770 04a6 019B     		ldr	r3, [sp, #4]
 5771 04a8 0446     		mov	r4, r0
 5772              	.LVL625:
 5773              	.L543:
2290:src/display.c **** 	  if (c == '.') {
 5774              		.loc 1 2290 53 is_stmt 1 view .LVU1825
ARM GAS  /tmp/ccZdZ92R.s 			page 192


2290:src/display.c **** 	  if (c == '.') {
 5775              		.loc 1 2290 12 view .LVU1826
2290:src/display.c **** 	  if (c == '.') {
 5776              		.loc 1 2290 18 is_stmt 0 view .LVU1827
 5777 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5778              	.LVL626:
2290:src/display.c **** 	  if (c == '.') {
 5779              		.loc 1 2290 2 view .LVU1828
 5780 04ae 002A     		cmp	r2, #0
 5781 04b0 7FF413AF 		bne	.L549
 5782 04b4 22E7     		b	.L648
 5783              	.L666:
2294:src/display.c **** 	  } else {
 5784              		.loc 1 2294 6 is_stmt 1 view .LVU1829
2294:src/display.c **** 	  } else {
 5785              		.loc 1 2294 12 is_stmt 0 view .LVU1830
 5786 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5787              	.LVL627:
 5788              	.LBB409:
 5789              	.LBI400:
 367:src/display.c ****   if (sep == SEP_NONE)
 5790              		.loc 1 367 14 is_stmt 1 view .LVU1831
 5791              	.LBB403:
 368:src/display.c ****     return res;
 5792              		.loc 1 368 3 view .LVU1832
 368:src/display.c ****     return res;
 5793              		.loc 1 368 6 is_stmt 0 view .LVU1833
 5794 04ba 0029     		cmp	r1, #0
 5795 04bc F5D0     		beq	.L543
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5796              		.loc 1 370 3 is_stmt 1 view .LVU1834
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5797              		.loc 1 370 6 is_stmt 0 view .LVU1835
 5798 04be 002C     		cmp	r4, #0
 5799 04c0 00F0F281 		beq	.L545
 371:src/display.c ****     else *res++ = '.';
 5800              		.loc 1 371 5 is_stmt 1 view .LVU1836
 371:src/display.c ****     else *res++ = '.';
 5801              		.loc 1 371 8 is_stmt 0 view .LVU1837
 5802 04c4 0129     		cmp	r1, #1
 371:src/display.c ****     else *res++ = '.';
 5803              		.loc 1 371 27 is_stmt 1 view .LVU1838
 5804              	.LVL628:
 372:src/display.c ****   } else {
 5805              		.loc 1 372 10 view .LVU1839
 372:src/display.c ****   } else {
 5806              		.loc 1 372 17 is_stmt 0 view .LVU1840
 5807 04c6 18BF     		it	ne
 5808 04c8 2E22     		movne	r2, #46
 5809              	.LVL629:
 372:src/display.c ****   } else {
 5810              		.loc 1 372 17 view .LVU1841
 5811 04ca 04F8012B 		strb	r2, [r4], #1
 5812              	.LVL630:
 372:src/display.c ****   } else {
 5813              		.loc 1 372 17 view .LVU1842
 5814 04ce ECE7     		b	.L543
ARM GAS  /tmp/ccZdZ92R.s 			page 193


 5815              	.LVL631:
 5816              	.L547:
 372:src/display.c ****   } else {
 5817              		.loc 1 372 17 view .LVU1843
 5818              	.LBE403:
 5819              	.LBE409:
 5820              	.LBB410:
 5821              	.LBB408:
 409:src/display.c ****   return res;
 5822              		.loc 1 409 8 view .LVU1844
 5823 04d0 1146     		mov	r1, r2
 5824 04d2 3046     		mov	r0, r6
 5825 04d4 0193     		str	r3, [sp, #4]
 409:src/display.c ****   return res;
 5826              		.loc 1 409 8 is_stmt 1 view .LVU1845
 5827 04d6 FFF7FEFF 		bl	set_dig
 5828              	.LVL632:
 409:src/display.c ****   return res;
 5829              		.loc 1 409 8 is_stmt 0 view .LVU1846
 5830 04da 019B     		ldr	r3, [sp, #4]
 5831 04dc 08E7     		b	.L548
 5832              	.LVL633:
 5833              	.L668:
 409:src/display.c ****   return res;
 5834              		.loc 1 409 8 view .LVU1847
 5835              	.LBE408:
 5836              	.LBE410:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5837              		.loc 1 2313 21 discriminator 1 view .LVU1848
 5838 04de 002C     		cmp	r4, #0
 5839 04e0 7FF418AF 		bne	.L551
2314:src/display.c **** 	*display_digits = odig;
 5840              		.loc 1 2314 4 is_stmt 1 view .LVU1849
2314:src/display.c **** 	*display_digits = odig;
 5841              		.loc 1 2314 33 is_stmt 0 view .LVU1850
 5842 04e4 009B     		ldr	r3, [sp]
 5843 04e6 1868     		ldr	r0, [r3]
2314:src/display.c **** 	*display_digits = odig;
 5844              		.loc 1 2314 4 view .LVU1851
 5845 04e8 594B     		ldr	r3, .L675+12
2314:src/display.c **** 	*display_digits = odig;
 5846              		.loc 1 2314 33 view .LVU1852
 5847 04ea 0138     		subs	r0, r0, #1
2314:src/display.c **** 	*display_digits = odig;
 5848              		.loc 1 2314 4 view .LVU1853
 5849 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5850 04ee 2246     		mov	r2, r4
 5851 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5852 04f4 FFF7FEFF 		bl	set_decimal
 5853              	.LVL634:
 5854 04f8 0CE7     		b	.L551
 5855              	.L667:
2311:src/display.c **** #endif
 5856              		.loc 1 2311 4 view .LVU1854
 5857 04fa 2846     		mov	r0, r5
 5858 04fc 2246     		mov	r2, r4
 5859 04fe 0021     		movs	r1, #0
ARM GAS  /tmp/ccZdZ92R.s 			page 194


 5860 0500 0193     		str	r3, [sp, #4]
2311:src/display.c **** #endif
 5861              		.loc 1 2311 4 is_stmt 1 view .LVU1855
 5862 0502 FFF7FEFF 		bl	set_exp
 5863              	.LVL635:
 5864 0506 019B     		ldr	r3, [sp, #4]
 5865 0508 FFE6     		b	.L550
 5866              	.LVL636:
 5867              	.L577:
2233:src/display.c **** 	  case -1:
 5868              		.loc 1 2233 16 is_stmt 0 view .LVU1856
 5869 050a 0227     		movs	r7, #2
 5870 050c 4146     		mov	r1, r8
 5871              	.LVL637:
 5872              	.L534:
2242:src/display.c **** 	    odig++;
 5873              		.loc 1 2242 6 is_stmt 1 view .LVU1857
2242:src/display.c **** 	    odig++;
 5874              		.loc 1 2242 13 is_stmt 0 view .LVU1858
 5875 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5876              	.LVL638:
2242:src/display.c **** 	    odig++;
 5877              		.loc 1 2242 13 view .LVU1859
 5878 0512 01F8013B 		strb	r3, [r1], #1
 5879              	.LVL639:
2243:src/display.c **** 	    dd--;
 5880              		.loc 1 2243 6 is_stmt 1 view .LVU1860
2244:src/display.c **** 	    exp--;
 5881              		.loc 1 2244 6 view .LVU1861
2244:src/display.c **** 	    exp--;
 5882              		.loc 1 2244 8 is_stmt 0 view .LVU1862
 5883 0516 0AF1FF3A 		add	r10, r10, #-1
 5884              	.LVL640:
2245:src/display.c **** 	  case 0:
 5885              		.loc 1 2245 6 is_stmt 1 view .LVU1863
2245:src/display.c **** 	  case 0:
 5886              		.loc 1 2245 9 is_stmt 0 view .LVU1864
 5887 051a 013D     		subs	r5, r5, #1
 5888              	.LVL641:
2245:src/display.c **** 	  case 0:
 5889              		.loc 1 2245 9 view .LVU1865
 5890 051c A5E6     		b	.L495
 5891              	.LVL642:
 5892              	.L490:
2131:src/display.c **** 
 5893              		.loc 1 2131 2 is_stmt 1 view .LVU1866
2131:src/display.c **** 
 5894              		.loc 1 2131 45 view .LVU1867
2131:src/display.c **** 
 5895              		.loc 1 2131 2 is_stmt 0 view .LVU1868
 5896 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5897 0522 002A     		cmp	r2, #0
 5898 0524 7FF43CAE 		bne	.L553
 5899              	.LVL643:
 5900              	.L497:
2196:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5901              		.loc 1 2196 4 is_stmt 1 view .LVU1869
ARM GAS  /tmp/ccZdZ92R.s 			page 195


2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5902              		.loc 1 2197 4 view .LVU1870
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5903              		.loc 1 2197 7 is_stmt 0 view .LVU1871
 5904 0528 002D     		cmp	r5, #0
 5905 052a C0F21081 		blt	.L517
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5906              		.loc 1 2197 7 view .LVU1872
 5907 052e 6B1C     		adds	r3, r5, #1
2199:src/display.c **** 		*obp++ = ',';
 5908              		.loc 1 2199 31 view .LVU1873
 5909 0530 DFF818C1 		ldr	ip, .L675+8
 5910 0534 0293     		str	r3, [sp, #8]
 5911 0536 09EB0300 		add	r0, r9, r3
2133:src/display.c **** 	switch (mode) {
 5912              		.loc 1 2133 4 view .LVU1874
 5913 053a 4F46     		mov	r7, r9
1938:src/display.c **** 	int odig = 0;
 5914              		.loc 1 1938 15 view .LVU1875
 5915 053c 4146     		mov	r1, r8
 5916 053e 0394     		str	r4, [sp, #12]
 5917 0540 05E0     		b	.L518
 5918              	.LVL644:
 5919              	.L521:
2200:src/display.c **** 	      *obp++ = *p++;
 5920              		.loc 1 2200 3 is_stmt 1 view .LVU1876
2199:src/display.c **** 		*obp++ = ',';
 5921              		.loc 1 2199 18 is_stmt 0 view .LVU1877
 5922 0542 022A     		cmp	r2, #2
2200:src/display.c **** 	      *obp++ = *p++;
 5923              		.loc 1 2200 10 view .LVU1878
 5924 0544 05BF     		ittet	eq
 5925 0546 2C23     		moveq	r3, #44
 5926 0548 4B70     		strbeq	r3, [r1, #1]
2201:src/display.c **** 	      odig++;
 5927              		.loc 1 2201 12 view .LVU1879
 5928 054a 0131     		addne	r1, r1, #1
 5929              	.LVL645:
2200:src/display.c **** 	      *obp++ = *p++;
 5930              		.loc 1 2200 7 view .LVU1880
 5931 054c 0231     		addeq	r1, r1, #2
 5932              	.LVL646:
 5933              	.L518:
2201:src/display.c **** 	      odig++;
 5934              		.loc 1 2201 8 is_stmt 1 discriminator 2 view .LVU1881
2201:src/display.c **** 	      odig++;
 5935              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1882
 5936 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5937              	.LVL647:
2199:src/display.c **** 		*obp++ = ',';
 5938              		.loc 1 2199 8 is_stmt 1 discriminator 2 view .LVU1883
2201:src/display.c **** 	      odig++;
 5939              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1884
 5940 0552 0B70     		strb	r3, [r1]
2202:src/display.c **** 	    }
 5941              		.loc 1 2202 8 is_stmt 1 discriminator 2 view .LVU1885
 5942              	.LVL648:
ARM GAS  /tmp/ccZdZ92R.s 			page 196


2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5943              		.loc 1 2198 24 discriminator 2 view .LVU1886
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5944              		.loc 1 2198 16 discriminator 2 view .LVU1887
2199:src/display.c **** 		*obp++ = ',';
 5945              		.loc 1 2199 31 is_stmt 0 discriminator 2 view .LVU1888
 5946 0554 A9EB0703 		sub	r3, r9, r7
 5947 0558 2B44     		add	r3, r3, r5
 5948 055a 8CFB0342 		smull	r4, r2, ip, r3
 5949 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5950 0562 02EB4202 		add	r2, r2, r2, lsl #1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5951              		.loc 1 2198 6 discriminator 2 view .LVU1889
 5952 0566 B842     		cmp	r0, r7
2199:src/display.c **** 		*obp++ = ',';
 5953              		.loc 1 2199 31 discriminator 2 view .LVU1890
 5954 0568 A3EB0202 		sub	r2, r3, r2
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5955              		.loc 1 2198 6 discriminator 2 view .LVU1891
 5956 056c E9D1     		bne	.L521
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5957              		.loc 1 2204 13 view .LVU1892
 5958 056e 2E23     		movs	r3, #46
2205:src/display.c **** 	      *obp++ = *p++;
 5959              		.loc 1 2205 6 view .LVU1893
 5960 0570 BAF1000F 		cmp	r10, #0
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5961              		.loc 1 2204 13 view .LVU1894
 5962 0574 4B70     		strb	r3, [r1, #1]
 5963 0576 039C     		ldr	r4, [sp, #12]
 5964 0578 029F     		ldr	r7, [sp, #8]
 5965              	.LVL649:
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5966              		.loc 1 2204 6 is_stmt 1 view .LVU1895
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5967              		.loc 1 2204 10 is_stmt 0 view .LVU1896
 5968 057a 01F10203 		add	r3, r1, #2
 5969              	.LVL650:
2205:src/display.c **** 	      *obp++ = *p++;
 5970              		.loc 1 2205 6 is_stmt 1 view .LVU1897
2205:src/display.c **** 	      *obp++ = *p++;
 5971              		.loc 1 2205 16 view .LVU1898
2205:src/display.c **** 	      *obp++ = *p++;
 5972              		.loc 1 2205 6 is_stmt 0 view .LVU1899
 5973 057e 0CDD     		ble	.L522
 5974 0580 0131     		adds	r1, r1, #1
 5975 0582 00EB0A07 		add	r7, r0, r10
 5976              	.LVL651:
 5977              	.L523:
2206:src/display.c **** 	      odig++;
 5978              		.loc 1 2206 8 is_stmt 1 discriminator 4 view .LVU1900
2206:src/display.c **** 	      odig++;
 5979              		.loc 1 2206 15 is_stmt 0 discriminator 4 view .LVU1901
 5980 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5981              	.LVL652:
2206:src/display.c **** 	      odig++;
 5982              		.loc 1 2206 15 discriminator 4 view .LVU1902
ARM GAS  /tmp/ccZdZ92R.s 			page 197


 5983 058a 01F8012F 		strb	r2, [r1, #1]!
2207:src/display.c **** 	    }
 5984              		.loc 1 2207 8 is_stmt 1 discriminator 4 view .LVU1903
2205:src/display.c **** 	      *obp++ = *p++;
 5985              		.loc 1 2205 43 discriminator 4 view .LVU1904
2205:src/display.c **** 	      *obp++ = *p++;
 5986              		.loc 1 2205 16 discriminator 4 view .LVU1905
2205:src/display.c **** 	      *obp++ = *p++;
 5987              		.loc 1 2205 6 is_stmt 0 discriminator 4 view .LVU1906
 5988 058e 8742     		cmp	r7, r0
 5989 0590 F9D1     		bne	.L523
 5990 0592 029A     		ldr	r2, [sp, #8]
 5991 0594 5244     		add	r2, r2, r10
 5992 0596 5344     		add	r3, r3, r10
 5993              	.LVL653:
2205:src/display.c **** 	      *obp++ = *p++;
 5994              		.loc 1 2205 6 discriminator 4 view .LVU1907
 5995 0598 1746     		mov	r7, r2
 5996              	.LVL654:
 5997              	.L522:
2224:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5998              		.loc 1 2224 4 is_stmt 1 view .LVU1908
2224:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5999              		.loc 1 2224 7 is_stmt 0 view .LVU1909
 6000 059a 019A     		ldr	r2, [sp, #4]
 6001 059c 002A     		cmp	r2, #0
 6002 059e 40F0C480 		bne	.L528
1940:src/display.c **** 	int j;
 6003              		.loc 1 1940 6 view .LVU1910
 6004 05a2 9346     		mov	fp, r2
 6005 05a4 7CE6     		b	.L506
 6006              	.LVL655:
 6007              	.L654:
2001:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6008              		.loc 1 2001 4 is_stmt 1 view .LVU1911
 6009 05a6 2B4A     		ldr	r2, .L675+16
 6010 05a8 3146     		mov	r1, r6
 6011 05aa 3046     		mov	r0, r6
 6012 05ac FFF7FEFF 		bl	decNumberNormalize
 6013              	.LVL656:
2002:src/display.c **** 	  z->exponent = 0;
 6014              		.loc 1 2002 4 view .LVU1912
2002:src/display.c **** 	  z->exponent = 0;
 6015              		.loc 1 2002 22 is_stmt 0 view .LVU1913
 6016 05b0 D6E90023 		ldrd	r2, r3, [r6]
 6017 05b4 03EB020A 		add	r10, r3, r2
2002:src/display.c **** 	  z->exponent = 0;
 6018              		.loc 1 2002 8 view .LVU1914
 6019 05b8 0AF1FF33 		add	r3, r10, #-1
2003:src/display.c **** 	}
 6020              		.loc 1 2003 16 view .LVU1915
 6021 05bc C6F804B0 		str	fp, [r6, #4]
2002:src/display.c **** 	  z->exponent = 0;
 6022              		.loc 1 2002 8 view .LVU1916
 6023 05c0 0193     		str	r3, [sp, #4]
 6024              	.LVL657:
2003:src/display.c **** 	}
ARM GAS  /tmp/ccZdZ92R.s 			page 198


 6025              		.loc 1 2003 4 is_stmt 1 view .LVU1917
 6026 05c2 42E5     		b	.L445
 6027              	.LVL658:
 6028              	.L660:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6029              		.loc 1 2075 4 view .LVU1918
2075:src/display.c **** 	for (; *q == '0'; q++);
 6030              		.loc 1 2075 4 is_stmt 0 view .LVU1919
 6031 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1958:src/display.c **** 	int trimzeros = 0;
 6032              		.loc 1 1958 6 view .LVU1920
 6033 05c6 4FF0000E 		mov	lr, #0
2075:src/display.c **** 	for (; *q == '0'; q++);
 6034              		.loc 1 2075 5 view .LVU1921
 6035 05ca 0136     		adds	r6, r6, #1
 6036              	.LVL659:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6037              		.loc 1 2075 5 view .LVU1922
 6038 05cc 8EE5     		b	.L467
 6039              	.LVL660:
 6040              	.L662:
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6041              		.loc 1 2091 6 is_stmt 1 view .LVU1923
2092:src/display.c **** 	      *p++ = *q++;
 6042              		.loc 1 2092 13 is_stmt 0 view .LVU1924
 6043 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6044              		.loc 1 2092 12 view .LVU1925
 6045 05d0 A3F13002 		sub	r2, r3, #48
 6046 05d4 092A     		cmp	r2, #9
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6047              		.loc 1 2091 7 view .LVU1926
 6048 05d6 06F10106 		add	r6, r6, #1
 6049              	.LVL661:
2092:src/display.c **** 	      *p++ = *q++;
 6050              		.loc 1 2092 6 is_stmt 1 view .LVU1927
2092:src/display.c **** 	      *p++ = *q++;
 6051              		.loc 1 2092 12 view .LVU1928
 6052 05da 3FF6B0AD 		bhi	.L472
 6053              	.LVL662:
 6054              	.L477:
2093:src/display.c **** 	  }
 6055              		.loc 1 2093 8 view .LVU1929
2093:src/display.c **** 	  }
 6056              		.loc 1 2093 13 is_stmt 0 view .LVU1930
 6057 05de 01F8013B 		strb	r3, [r1], #1
 6058              	.LVL663:
2092:src/display.c **** 	      *p++ = *q++;
 6059              		.loc 1 2092 12 is_stmt 1 view .LVU1931
2092:src/display.c **** 	      *p++ = *q++;
 6060              		.loc 1 2092 13 is_stmt 0 view .LVU1932
 6061 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6062              		.loc 1 2092 12 view .LVU1933
 6063 05e6 A3F13002 		sub	r2, r3, #48
 6064 05ea 092A     		cmp	r2, #9
 6065 05ec F7D9     		bls	.L477
ARM GAS  /tmp/ccZdZ92R.s 			page 199


 6066 05ee A6E5     		b	.L472
 6067              	.LVL664:
 6068              	.L655:
2009:src/display.c **** 	    x[0] = '-';
 6069              		.loc 1 2009 34 discriminator 1 view .LVU1934
 6070 05f0 6B20     		movs	r0, #107
 6071 05f2 FFF7FEFF 		bl	get_user_flag
 6072              	.LVL665:
2009:src/display.c **** 	    x[0] = '-';
 6073              		.loc 1 2009 31 discriminator 1 view .LVU1935
 6074 05f6 0028     		cmp	r0, #0
 6075 05f8 3FF439AD 		beq	.L447
2010:src/display.c **** 	    x[1] = '0';
 6076              		.loc 1 2010 6 is_stmt 1 view .LVU1936
2011:src/display.c **** 	  } else
 6077              		.loc 1 2011 6 view .LVU1937
2010:src/display.c **** 	    x[1] = '0';
 6078              		.loc 1 2010 11 is_stmt 0 view .LVU1938
 6079 05fc 43F22D03 		movw	r3, #12333
 6080 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
2011:src/display.c **** 	  } else
 6081              		.loc 1 2011 11 view .LVU1939
 6082 0604 36E5     		b	.L448
 6083              	.LVL666:
 6084              	.L658:
2068:src/display.c **** 	  CLR_MANT_SIGN;
 6085              		.loc 1 2068 4 is_stmt 1 view .LVU1940
 6086              	.LBB411:
 6087              	.LBI411:
 314:src/display.c **** {
 6088              		.loc 1 314 13 view .LVU1941
 6089              	.LBB412:
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6090              		.loc 1 316 3 view .LVU1942
 317:src/display.c **** }
 6091              		.loc 1 317 3 view .LVU1943
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6092              		.loc 1 316 27 is_stmt 0 view .LVU1944
 6093 0606 144B     		ldr	r3, .L675+20
 6094 0608 2022     		movs	r2, #32
 317:src/display.c **** }
 6095              		.loc 1 317 3 view .LVU1945
 6096 060a 8220     		movs	r0, #130
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6097              		.loc 1 316 27 view .LVU1946
 6098 060c 1A70     		strb	r2, [r3]
 317:src/display.c **** }
 6099              		.loc 1 317 3 view .LVU1947
 6100 060e FFF7FEFF 		bl	clr_dot
 6101              	.LVL667:
 6102              	.LBE412:
 6103              	.LBE411:
2069:src/display.c **** 	}
 6104              		.loc 1 2069 4 is_stmt 1 view .LVU1948
 6105              	.LBB413:
 6106              	.LBI413:
 302:src/display.c **** {
ARM GAS  /tmp/ccZdZ92R.s 			page 200


 6107              		.loc 1 302 13 view .LVU1949
 6108              	.LBB414:
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6109              		.loc 1 304 3 view .LVU1950
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6110              		.loc 1 304 25 is_stmt 0 view .LVU1951
 6111 0612 124B     		ldr	r3, .L675+24
 6112 0614 2022     		movs	r2, #32
 305:src/display.c **** }
 6113              		.loc 1 305 3 view .LVU1952
 6114 0616 8120     		movs	r0, #129
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6115              		.loc 1 304 25 view .LVU1953
 6116 0618 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 6117              		.loc 1 305 3 is_stmt 1 view .LVU1954
 6118 061a FFF7FEFF 		bl	clr_dot
 6119              	.LVL668:
 306:src/display.c **** 
 6120              		.loc 1 306 1 is_stmt 0 view .LVU1955
 6121 061e 5CE5     		b	.L465
 6122              	.LVL669:
 6123              	.L538:
 306:src/display.c **** 
 6124              		.loc 1 306 1 view .LVU1956
 6125              	.LBE414:
 6126              	.LBE413:
2284:src/display.c **** 	      SET_MANT_SIGN;
 6127              		.loc 1 2284 6 is_stmt 1 view .LVU1957
 6128 0620 0193     		str	r3, [sp, #4]
2284:src/display.c **** 	      SET_MANT_SIGN;
 6129              		.loc 1 2284 9 is_stmt 0 view .LVU1958
 6130 0622 002E     		cmp	r6, #0
 6131 0624 40F00281 		bne	.L541
2285:src/display.c **** 	    else
 6132              		.loc 1 2285 8 is_stmt 1 view .LVU1959
 6133              	.LBB415:
 6134              	.LBI415:
 296:src/display.c **** {
 6135              		.loc 1 296 13 view .LVU1960
 6136              	.LBB416:
 298:src/display.c ****   set_dot(MANT_SIGN);
 6137              		.loc 1 298 3 view .LVU1961
 298:src/display.c ****   set_dot(MANT_SIGN);
 6138              		.loc 1 298 25 is_stmt 0 view .LVU1962
 6139 0628 0C4A     		ldr	r2, .L675+24
 6140 062a 2D21     		movs	r1, #45
 299:src/display.c **** }
 6141              		.loc 1 299 3 view .LVU1963
 6142 062c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 6143              		.loc 1 298 25 view .LVU1964
 6144 062e 1170     		strb	r1, [r2]
 299:src/display.c **** }
 6145              		.loc 1 299 3 is_stmt 1 view .LVU1965
 6146 0630 FFF7FEFF 		bl	set_dot
 6147              	.LVL670:
ARM GAS  /tmp/ccZdZ92R.s 			page 201


 299:src/display.c **** }
 6148              		.loc 1 299 3 is_stmt 0 view .LVU1966
 6149              	.LBE416:
 6150              	.LBE415:
2290:src/display.c **** 	  if (c == '.') {
 6151              		.loc 1 2290 12 is_stmt 1 view .LVU1967
2290:src/display.c **** 	  if (c == '.') {
 6152              		.loc 1 2290 18 is_stmt 0 view .LVU1968
 6153 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6154              	.LVL671:
2290:src/display.c **** 	  if (c == '.') {
 6155              		.loc 1 2290 2 view .LVU1969
 6156 0638 019B     		ldr	r3, [sp, #4]
 6157 063a 002A     		cmp	r2, #0
 6158 063c 7FF446AE 		bne	.L540
 6159 0640 5FE6     		b	.L539
 6160              	.L676:
 6161 0642 00BF     		.align	2
 6162              	.L675:
 6163 0644 00000000 		.word	StateWhileOn
 6164 0648 00000000 		.word	main_ram
 6165 064c 56555555 		.word	1431655766
 6166 0650 00000000 		.word	.LANCHOR1
 6167 0654 00000000 		.word	Ctx
 6168 0658 00000000 		.word	LastDisplayedExponent
 6169 065c 00000000 		.word	LastDisplayedNumber
 6170              	.LVL672:
 6171              	.L656:
2018:src/display.c **** 	  return;
 6172              		.loc 1 2018 4 is_stmt 1 view .LVU1970
 6173              	.LBB417:
 6174              	.LBI417:
1806:src/display.c **** 	const int dbl = is_dblmode();
 6175              		.loc 1 1806 19 view .LVU1971
 6176              	.LBB418:
1807:src/display.c **** 	char *p;
 6177              		.loc 1 1807 2 view .LVU1972
1807:src/display.c **** 	char *p;
 6178              		.loc 1 1807 18 is_stmt 0 view .LVU1973
 6179 0660 FFF7FEFF 		bl	is_dblmode
 6180              	.LVL673:
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6181              		.loc 1 1823 5 view .LVU1974
 6182 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6183 0668 2D2B     		cmp	r3, #45
1807:src/display.c **** 	char *p;
 6184              		.loc 1 1807 18 view .LVU1975
 6185 066a 0446     		mov	r4, r0
 6186              	.LVL674:
1808:src/display.c **** 	int i, j;
 6187              		.loc 1 1808 2 is_stmt 1 view .LVU1976
1809:src/display.c **** 	char *upper_str;
 6188              		.loc 1 1809 2 view .LVU1977
1810:src/display.c **** 	enum separator_modes separator_mode;
 6189              		.loc 1 1810 2 view .LVU1978
1811:src/display.c **** 	char decimal_mark;
 6190              		.loc 1 1811 2 view .LVU1979
ARM GAS  /tmp/ccZdZ92R.s 			page 202


1812:src/display.c **** 	char thousands_sep;
 6191              		.loc 1 1812 2 view .LVU1980
1813:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6192              		.loc 1 1813 2 view .LVU1981
1819:src/display.c **** #endif
 6193              		.loc 1 1819 2 view .LVU1982
1821:src/display.c **** 
 6194              		.loc 1 1821 2 view .LVU1983
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6195              		.loc 1 1823 2 view .LVU1984
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6196              		.loc 1 1823 5 is_stmt 0 view .LVU1985
 6197 066c 00F02A81 		beq	.L671
1836:src/display.c **** 
 6198              		.loc 1 1836 16 view .LVU1986
 6199 0670 0026     		movs	r6, #0
 6200              	.LVL675:
 6201              	.L450:
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6202              		.loc 1 1838 2 is_stmt 1 view .LVU1987
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6203              		.loc 1 1838 6 is_stmt 0 view .LVU1988
 6204 0672 0021     		movs	r1, #0
 6205 0674 4046     		mov	r0, r8
 6206 0676 FFF7FEFF 		bl	find_char
 6207              	.LVL676:
1839:src/display.c **** 
 6208              		.loc 1 1839 2 is_stmt 1 view .LVU1989
1839:src/display.c **** 
 6209              		.loc 1 1839 23 is_stmt 0 view .LVU1990
 6210 067a A0EB0802 		sub	r2, r0, r8
1839:src/display.c **** 
 6211              		.loc 1 1839 2 view .LVU1991
 6212 067e C2F12202 		rsb	r2, r2, #34
 6213 0682 3021     		movs	r1, #48
 6214 0684 FFF7FEFF 		bl	xset
 6215              	.LVL677:
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6216              		.loc 1 1841 2 is_stmt 1 view .LVU1992
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6217              		.loc 1 1841 18 is_stmt 0 view .LVU1993
 6218 0688 B14A     		ldr	r2, .L677
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6219              		.loc 1 1852 6 view .LVU1994
 6220 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6221              		.loc 1 1841 5 view .LVU1995
 6222 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1849:src/display.c **** 	}
 6223              		.loc 1 1849 18 view .LVU1996
 6224 0690 002A     		cmp	r2, #0
 6225 0692 15BF     		itete	ne
 6226 0694 4FF0020A 		movne	r10, #2
 6227 0698 2C27     		moveq	r7, #44
 6228 069a 2E27     		movne	r7, #46
 6229              	.LVL678:
1849:src/display.c **** 	}
ARM GAS  /tmp/ccZdZ92R.s 			page 203


 6230              		.loc 1 1849 18 view .LVU1997
 6231 069c 2E25     		moveq	r5, #46
 6232 069e 18BF     		it	ne
 6233 06a0 2C25     		movne	r5, #44
 6234              	.LVL679:
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6235              		.loc 1 1852 2 is_stmt 1 view .LVU1998
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6236              		.loc 1 1852 5 is_stmt 0 view .LVU1999
 6237 06a2 13F0380F 		tst	r3, #56
 6238 06a6 40F0C880 		bne	.L672
1879:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6239              		.loc 1 1879 4 is_stmt 1 view .LVU2000
 6240              	.LVL680:
1880:src/display.c **** 	  x[1] = decimal_mark;
 6241              		.loc 1 1880 4 view .LVU2001
 6242 06aa 1022     		movs	r2, #16
 6243 06ac 08F10101 		add	r1, r8, #1
 6244 06b0 08F10200 		add	r0, r8, #2
 6245 06b4 FFF7FEFF 		bl	xcopy
 6246              	.LVL681:
1881:src/display.c **** 	  if (grouping) {
 6247              		.loc 1 1881 4 view .LVU2002
1883:src/display.c **** 	    x[5] = thousands_sep;
 6248              		.loc 1 1883 6 is_stmt 0 view .LVU2003
 6249 06b8 0D22     		movs	r2, #13
 6250 06ba 08F10501 		add	r1, r8, #5
 6251 06be 08F10600 		add	r0, r8, #6
1881:src/display.c **** 	  if (grouping) {
 6252              		.loc 1 1881 9 view .LVU2004
 6253 06c2 88F80150 		strb	r5, [r8, #1]
1882:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6254              		.loc 1 1882 4 is_stmt 1 view .LVU2005
1883:src/display.c **** 	    x[5] = thousands_sep;
 6255              		.loc 1 1883 6 view .LVU2006
 6256 06c6 FFF7FEFF 		bl	xcopy
 6257              	.LVL682:
1884:src/display.c **** 	    x += 9;
 6258              		.loc 1 1884 6 view .LVU2007
1885:src/display.c **** 	  }
 6259              		.loc 1 1885 8 is_stmt 0 view .LVU2008
 6260 06ca 08F10905 		add	r5, r8, #9
 6261              	.LVL683:
1884:src/display.c **** 	    x += 9;
 6262              		.loc 1 1884 11 view .LVU2009
 6263 06ce 88F80570 		strb	r7, [r8, #5]
1885:src/display.c **** 	  }
 6264              		.loc 1 1885 6 is_stmt 1 view .LVU2010
 6265              	.LVL684:
1888:src/display.c **** 	    if (exp < 0) {
 6266              		.loc 1 1888 4 view .LVU2011
1888:src/display.c **** 	    if (exp < 0) {
 6267              		.loc 1 1888 7 is_stmt 0 view .LVU2012
 6268 06d2 002C     		cmp	r4, #0
 6269 06d4 00F0F380 		beq	.L454
1889:src/display.c **** 	      x[9] = '-';
 6270              		.loc 1 1889 6 is_stmt 1 view .LVU2013
ARM GAS  /tmp/ccZdZ92R.s 			page 204


1889:src/display.c **** 	      x[9] = '-';
 6271              		.loc 1 1889 9 is_stmt 0 view .LVU2014
 6272 06d8 019B     		ldr	r3, [sp, #4]
1897:src/display.c **** 	  }
 6273              		.loc 1 1897 18 view .LVU2015
 6274 06da 9E49     		ldr	r1, .L677+4
1889:src/display.c **** 	      x[9] = '-';
 6275              		.loc 1 1889 9 view .LVU2016
 6276 06dc 002B     		cmp	r3, #0
1890:src/display.c **** 	      exp = -exp;
 6277              		.loc 1 1890 8 is_stmt 1 view .LVU2017
1891:src/display.c **** 	    }
 6278              		.loc 1 1891 8 view .LVU2018
1891:src/display.c **** 	    }
 6279              		.loc 1 1891 12 is_stmt 0 view .LVU2019
 6280 06de BCBF     		itt	lt
 6281 06e0 5B42     		rsblt	r3, r3, #0
 6282 06e2 0193     		strlt	r3, [sp, #4]
 6283              	.LVL685:
1895:src/display.c **** 	    x[10] = '0' + j;
 6284              		.loc 1 1895 8 view .LVU2020
 6285 06e4 0198     		ldr	r0, [sp, #4]
 6286 06e6 9C4B     		ldr	r3, .L677+8
1890:src/display.c **** 	      exp = -exp;
 6287              		.loc 1 1890 13 view .LVU2021
 6288 06e8 B4BF     		ite	lt
 6289 06ea 2D22     		movlt	r2, #45
1894:src/display.c **** 	    j = exp / 1000;
 6290              		.loc 1 1894 13 view .LVU2022
 6291 06ec 2022     		movge	r2, #32
 6292 06ee 88F81220 		strb	r2, [r8, #18]
1895:src/display.c **** 	    x[10] = '0' + j;
 6293              		.loc 1 1895 6 is_stmt 1 view .LVU2023
1895:src/display.c **** 	    x[10] = '0' + j;
 6294              		.loc 1 1895 8 is_stmt 0 view .LVU2024
 6295 06f2 0246     		mov	r2, r0
 6296 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6297 06f8 9B09     		lsrs	r3, r3, #6
 6298              	.LVL686:
1896:src/display.c **** 	    exp -= 1000 * j;
 6299              		.loc 1 1896 6 is_stmt 1 view .LVU2025
1896:src/display.c **** 	    exp -= 1000 * j;
 6300              		.loc 1 1896 18 is_stmt 0 view .LVU2026
 6301 06fa 03F13002 		add	r2, r3, #48
1897:src/display.c **** 	  }
 6302              		.loc 1 1897 10 view .LVU2027
 6303 06fe 01FB0303 		mla	r3, r1, r3, r0
 6304              	.LVL687:
1897:src/display.c **** 	  }
 6305              		.loc 1 1897 10 view .LVU2028
 6306 0702 0193     		str	r3, [sp, #4]
 6307              	.LVL688:
1896:src/display.c **** 	    exp -= 1000 * j;
 6308              		.loc 1 1896 12 view .LVU2029
 6309 0704 88F81320 		strb	r2, [r8, #19]
1897:src/display.c **** 	  }
 6310              		.loc 1 1897 6 is_stmt 1 view .LVU2030
ARM GAS  /tmp/ccZdZ92R.s 			page 205


 6311              	.LVL689:
 6312              	.L456:
1903:src/display.c **** 	  *x = 0;
 6313              		.loc 1 1903 4 view .LVU2031
 6314 0708 0B22     		movs	r2, #11
 6315 070a 2946     		mov	r1, r5
 6316 070c 08F10A00 		add	r0, r8, #10
 6317 0710 FFF7FEFF 		bl	xcopy
 6318              	.LVL690:
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6319              		.loc 1 1904 4 view .LVU2032
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6320              		.loc 1 1904 7 is_stmt 0 view .LVU2033
 6321 0714 0022     		movs	r2, #0
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6322              		.loc 1 1905 4 view .LVU2034
 6323 0716 0198     		ldr	r0, [sp, #4]
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6324              		.loc 1 1904 7 view .LVU2035
 6325 0718 88F80920 		strb	r2, [r8, #9]
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6326              		.loc 1 1905 4 is_stmt 1 view .LVU2036
 6327 071c 0121     		movs	r1, #1
 6328 071e FFF7FEFF 		bl	set_exp
 6329              	.LVL691:
1906:src/display.c **** 	}
 6330              		.loc 1 1906 4 view .LVU2037
1906:src/display.c **** 	}
 6331              		.loc 1 1906 4 is_stmt 0 view .LVU2038
 6332 0722 A8EB0606 		sub	r6, r8, r6
 6333              	.LVL692:
1906:src/display.c **** 	}
 6334              		.loc 1 1906 6 view .LVU2039
 6335 0726 0924     		movs	r4, #9
 6336              	.LVL693:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6337              		.loc 1 1909 11 is_stmt 1 view .LVU2040
 6338 0728 9AE0     		b	.L457
 6339              	.LVL694:
 6340              	.L528:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6341              		.loc 1 1909 11 is_stmt 0 view .LVU2041
 6342              	.LBE418:
 6343              	.LBE417:
2225:src/display.c **** 	      obp--;
 6344              		.loc 1 2225 12 is_stmt 1 view .LVU2042
 6345 072a 4345     		cmp	r3, r8
 6346 072c 88BF     		it	hi
 6347 072e 1A46     		movhi	r2, r3
 6348 0730 7FF6B6AD 		bls	.L506
 6349              	.L530:
2226:src/display.c **** 	      odig--;
 6350              		.loc 1 2226 8 discriminator 1 view .LVU2043
 6351 0734 1346     		mov	r3, r2
 6352              	.LVL695:
2226:src/display.c **** 	      odig--;
 6353              		.loc 1 2226 8 is_stmt 0 discriminator 1 view .LVU2044
ARM GAS  /tmp/ccZdZ92R.s 			page 206


 6354 0736 013A     		subs	r2, r2, #1
 6355              	.LVL696:
2227:src/display.c **** 	    }
 6356              		.loc 1 2227 8 is_stmt 1 discriminator 1 view .LVU2045
2225:src/display.c **** 	      obp--;
 6357              		.loc 1 2225 21 is_stmt 0 discriminator 1 view .LVU2046
 6358 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6359 073c 3029     		cmp	r1, #48
 6360 073e 7FF4AFAD 		bne	.L506
2225:src/display.c **** 	      obp--;
 6361              		.loc 1 2225 12 view .LVU2047
 6362 0742 9045     		cmp	r8, r2
2227:src/display.c **** 	    }
 6363              		.loc 1 2227 12 view .LVU2048
 6364 0744 07F1FF37 		add	r7, r7, #-1
 6365              	.LVL697:
2225:src/display.c **** 	      obp--;
 6366              		.loc 1 2225 12 is_stmt 1 view .LVU2049
 6367 0748 F4D1     		bne	.L530
 6368 074a 4346     		mov	r3, r8
 6369 074c A8E5     		b	.L506
 6370              	.LVL698:
 6371              	.L517:
2210:src/display.c **** 	    odig++;
 6372              		.loc 1 2210 6 view .LVU2050
2211:src/display.c **** 	    *obp++ = '.';
 6373              		.loc 1 2211 6 view .LVU2051
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6374              		.loc 1 2212 6 view .LVU2052
2210:src/display.c **** 	    odig++;
 6375              		.loc 1 2210 13 is_stmt 0 view .LVU2053
 6376 074e 42F63063 		movw	r3, #11824
 6377 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2213:src/display.c **** 	      *obp++ = '0';
 6378              		.loc 1 2213 6 is_stmt 1 view .LVU2054
 6379              	.LVL699:
2213:src/display.c **** 	      *obp++ = '0';
 6380              		.loc 1 2213 20 view .LVU2055
2213:src/display.c **** 	      *obp++ = '0';
 6381              		.loc 1 2213 6 is_stmt 0 view .LVU2056
 6382 0756 6B1C     		adds	r3, r5, #1
 6383              	.LVL700:
2213:src/display.c **** 	      *obp++ = '0';
 6384              		.loc 1 2213 6 view .LVU2057
 6385 0758 00F0F280 		beq	.L575
 6386 075c C5F10101 		rsb	r1, r5, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6387              		.loc 1 2212 10 view .LVU2058
 6388 0760 0DF11603 		add	r3, sp, #22
 6389              	.LVL701:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6390              		.loc 1 2212 10 view .LVU2059
 6391 0764 4144     		add	r1, r1, r8
 6392 0766 1A46     		mov	r2, r3
2214:src/display.c **** 	      odig++;
 6393              		.loc 1 2214 15 view .LVU2060
 6394 0768 3020     		movs	r0, #48
ARM GAS  /tmp/ccZdZ92R.s 			page 207


 6395              	.LVL702:
 6396              	.L526:
2214:src/display.c **** 	      odig++;
 6397              		.loc 1 2214 8 is_stmt 1 discriminator 3 view .LVU2061
2214:src/display.c **** 	      odig++;
 6398              		.loc 1 2214 15 is_stmt 0 discriminator 3 view .LVU2062
 6399 076a 02F8010B 		strb	r0, [r2], #1
 6400              	.LVL703:
2215:src/display.c **** 	      dd--;
 6401              		.loc 1 2215 8 is_stmt 1 discriminator 3 view .LVU2063
2216:src/display.c **** 	    }
 6402              		.loc 1 2216 8 discriminator 3 view .LVU2064
2213:src/display.c **** 	      *obp++ = '0';
 6403              		.loc 1 2213 25 discriminator 3 view .LVU2065
2213:src/display.c **** 	      *obp++ = '0';
 6404              		.loc 1 2213 20 discriminator 3 view .LVU2066
2213:src/display.c **** 	      *obp++ = '0';
 6405              		.loc 1 2213 6 is_stmt 0 discriminator 3 view .LVU2067
 6406 076e 8A42     		cmp	r2, r1
 6407 0770 FBD1     		bne	.L526
 6408 0772 AA44     		add	r10, r10, r5
 6409 0774 EA43     		mvns	r2, r5
 6410              	.LVL704:
2213:src/display.c **** 	      *obp++ = '0';
 6411              		.loc 1 2213 6 discriminator 3 view .LVU2068
 6412 0776 0AF1010A 		add	r10, r10, #1
 6413 077a 1344     		add	r3, r3, r2
 6414 077c 6F42     		rsbs	r7, r5, #0
 6415              	.L525:
 6416              	.LVL705:
2218:src/display.c **** 	      *obp++ = *p++;
 6417              		.loc 1 2218 12 is_stmt 1 view .LVU2069
 6418 077e BAF1000F 		cmp	r10, #0
2218:src/display.c **** 	      *obp++ = *p++;
 6419              		.loc 1 2218 15 is_stmt 0 view .LVU2070
 6420 0782 0AF1FF32 		add	r2, r10, #-1
 6421              	.LVL706:
2218:src/display.c **** 	      *obp++ = *p++;
 6422              		.loc 1 2218 12 view .LVU2071
 6423 0786 7FF708AF 		ble	.L522
 6424 078a 9A44     		add	r10, r10, r3
 6425 078c 0AF1FF30 		add	r0, r10, #-1
 6426 0790 013B     		subs	r3, r3, #1
 6427              	.LVL707:
 6428              	.L527:
2219:src/display.c **** 	      odig++;
 6429              		.loc 1 2219 8 is_stmt 1 view .LVU2072
2219:src/display.c **** 	      odig++;
 6430              		.loc 1 2219 15 is_stmt 0 view .LVU2073
 6431 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6432              	.LVL708:
2219:src/display.c **** 	      odig++;
 6433              		.loc 1 2219 15 view .LVU2074
 6434 0796 03F8011F 		strb	r1, [r3, #1]!
2220:src/display.c **** 	    }
 6435              		.loc 1 2220 8 is_stmt 1 view .LVU2075
2218:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccZdZ92R.s 			page 208


 6436              		.loc 1 2218 12 view .LVU2076
2218:src/display.c **** 	      *obp++ = *p++;
 6437              		.loc 1 2218 12 is_stmt 0 view .LVU2077
 6438 079a 8342     		cmp	r3, r0
 6439 079c F9D1     		bne	.L527
 6440              	.LVL709:
2218:src/display.c **** 	      *obp++ = *p++;
 6441              		.loc 1 2218 12 view .LVU2078
 6442 079e 0137     		adds	r7, r7, #1
 6443 07a0 1744     		add	r7, r7, r2
 6444 07a2 5346     		mov	r3, r10
 6445 07a4 F9E6     		b	.L522
 6446              	.LVL710:
 6447              	.L532:
2236:src/display.c **** 	    odig++;
 6448              		.loc 1 2236 6 is_stmt 1 view .LVU2079
2236:src/display.c **** 	    odig++;
 6449              		.loc 1 2236 13 is_stmt 0 view .LVU2080
 6450 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6451 07aa 8DF81430 		strb	r3, [sp, #20]
2237:src/display.c **** 	    dd--;
 6452              		.loc 1 2237 6 is_stmt 1 view .LVU2081
 6453              	.LVL711:
2238:src/display.c **** 	    exp--;
 6454              		.loc 1 2238 6 view .LVU2082
2238:src/display.c **** 	    exp--;
 6455              		.loc 1 2238 8 is_stmt 0 view .LVU2083
 6456 07ae 0AF1FF3A 		add	r10, r10, #-1
 6457              	.LVL712:
2239:src/display.c **** 	  case -2:
 6458              		.loc 1 2239 6 is_stmt 1 view .LVU2084
2239:src/display.c **** 	  case -2:
 6459              		.loc 1 2239 9 is_stmt 0 view .LVU2085
 6460 07b2 013D     		subs	r5, r5, #1
 6461              	.LVL713:
2239:src/display.c **** 	  case -2:
 6462              		.loc 1 2239 9 view .LVU2086
 6463 07b4 0327     		movs	r7, #3
2236:src/display.c **** 	    odig++;
 6464              		.loc 1 2236 17 view .LVU2087
 6465 07b6 0DF14909 		add	r9, sp, #73
 6466              	.LVL714:
2236:src/display.c **** 	    odig++;
 6467              		.loc 1 2236 10 view .LVU2088
 6468 07ba 0DF11501 		add	r1, sp, #21
 6469              	.LVL715:
2236:src/display.c **** 	    odig++;
 6470              		.loc 1 2236 10 view .LVU2089
 6471 07be A6E6     		b	.L534
 6472              	.LVL716:
 6473              	.L480:
2101:src/display.c **** 	    /* We might have push the fixed decimals off the
 6474              		.loc 1 2101 6 is_stmt 1 view .LVU2090
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6475              		.loc 1 2105 6 view .LVU2091
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6476              		.loc 1 2105 23 is_stmt 0 view .LVU2092
ARM GAS  /tmp/ccZdZ92R.s 			page 209


 6477 07c0 05EB0A03 		add	r3, r5, r10
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6478              		.loc 1 2105 9 view .LVU2093
 6479 07c4 9E42     		cmp	r6, r3
2106:src/display.c **** 	  }
 6480              		.loc 1 2106 8 is_stmt 1 view .LVU2094
2106:src/display.c **** 	  }
 6481              		.loc 1 2106 30 is_stmt 0 view .LVU2095
 6482 07c6 DCBF     		itt	le
 6483 07c8 06F1FF3A 		addle	r10, r6, #-1
 6484              	.LVL717:
2106:src/display.c **** 	  }
 6485              		.loc 1 2106 11 view .LVU2096
 6486 07cc AAEB050A 		suble	r10, r10, r5
 6487              	.LVL718:
2106:src/display.c **** 	  }
 6488              		.loc 1 2106 11 view .LVU2097
 6489 07d0 2A46     		mov	r2, r5
 6490 07d2 BAE4     		b	.L478
 6491              	.LVL719:
 6492              	.L572:
2142:src/display.c **** 	    case -1:
 6493              		.loc 1 2142 24 view .LVU2098
 6494 07d4 0227     		movs	r7, #2
 6495 07d6 4046     		mov	r0, r8
 6496              	.LVL720:
 6497              	.L505:
2151:src/display.c **** 	      odig++;
 6498              		.loc 1 2151 8 is_stmt 1 view .LVU2099
2151:src/display.c **** 	      odig++;
 6499              		.loc 1 2151 15 is_stmt 0 view .LVU2100
 6500 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6501              	.LVL721:
2151:src/display.c **** 	      odig++;
 6502              		.loc 1 2151 15 view .LVU2101
 6503 07dc 00F8013B 		strb	r3, [r0], #1
 6504              	.LVL722:
2152:src/display.c **** 	      dd--;
 6505              		.loc 1 2152 8 is_stmt 1 view .LVU2102
2153:src/display.c **** 	      exp--;
 6506              		.loc 1 2153 8 view .LVU2103
2154:src/display.c **** 	    case 0:
 6507              		.loc 1 2154 8 view .LVU2104
2154:src/display.c **** 	    case 0:
 6508              		.loc 1 2154 11 is_stmt 0 view .LVU2105
 6509 07e0 013D     		subs	r5, r5, #1
 6510              	.LVL723:
 6511              	.L502:
2156:src/display.c **** 	    };
 6512              		.loc 1 2156 8 is_stmt 1 view .LVU2106
2157:src/display.c **** 	    *obp++ = *p++;
 6513              		.loc 1 2157 7 view .LVU2107
2158:src/display.c **** 	    odig++;
 6514              		.loc 1 2158 6 view .LVU2108
2158:src/display.c **** 	    odig++;
 6515              		.loc 1 2158 17 is_stmt 0 view .LVU2109
 6516 07e2 4946     		mov	r1, r9
ARM GAS  /tmp/ccZdZ92R.s 			page 210


 6517              	.LVL724:
2158:src/display.c **** 	    odig++;
 6518              		.loc 1 2158 13 view .LVU2110
 6519 07e4 0346     		mov	r3, r0
 6520 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6521              	.LVL725:
2158:src/display.c **** 	    odig++;
 6522              		.loc 1 2158 13 view .LVU2111
 6523 07ea 03F802CB 		strb	ip, [r3], #2
2159:src/display.c **** 	    *obp++ = '.';
 6524              		.loc 1 2159 6 is_stmt 1 view .LVU2112
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6525              		.loc 1 2160 6 view .LVU2113
 6526              	.LVL726:
2161:src/display.c **** 	      *obp++ = *p++;
 6527              		.loc 1 2161 6 is_stmt 0 view .LVU2114
 6528 07ee 012A     		cmp	r2, #1
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6529              		.loc 1 2160 13 view .LVU2115
 6530 07f0 4FF02E0C 		mov	ip, #46
 6531 07f4 80F801C0 		strb	ip, [r0, #1]
2161:src/display.c **** 	      *obp++ = *p++;
 6532              		.loc 1 2161 6 is_stmt 1 view .LVU2116
 6533              	.LVL727:
2161:src/display.c **** 	      *obp++ = *p++;
 6534              		.loc 1 2161 16 view .LVU2117
2161:src/display.c **** 	      *obp++ = *p++;
 6535              		.loc 1 2161 6 is_stmt 0 view .LVU2118
 6536 07f8 53DD     		ble	.L573
2161:src/display.c **** 	      *obp++ = *p++;
 6537              		.loc 1 2161 6 view .LVU2119
 6538 07fa 0130     		adds	r0, r0, #1
 6539 07fc 9144     		add	r9, r9, r2
 6540              	.LVL728:
 6541              	.L507:
2162:src/display.c **** 	      odig++;
 6542              		.loc 1 2162 8 is_stmt 1 discriminator 3 view .LVU2120
2162:src/display.c **** 	      odig++;
 6543              		.loc 1 2162 15 is_stmt 0 discriminator 3 view .LVU2121
 6544 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6545              	.LVL729:
2162:src/display.c **** 	      odig++;
 6546              		.loc 1 2162 15 discriminator 3 view .LVU2122
 6547 0802 00F801CF 		strb	ip, [r0, #1]!
2163:src/display.c **** 	    }
 6548              		.loc 1 2163 8 is_stmt 1 discriminator 3 view .LVU2123
2161:src/display.c **** 	      *obp++ = *p++;
 6549              		.loc 1 2161 25 discriminator 3 view .LVU2124
2161:src/display.c **** 	      *obp++ = *p++;
 6550              		.loc 1 2161 16 discriminator 3 view .LVU2125
2161:src/display.c **** 	      *obp++ = *p++;
 6551              		.loc 1 2161 6 is_stmt 0 discriminator 3 view .LVU2126
 6552 0806 4945     		cmp	r1, r9
 6553 0808 F9D1     		bne	.L507
 6554 080a 013A     		subs	r2, r2, #1
 6555              	.LVL730:
2161:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccZdZ92R.s 			page 211


 6556              		.loc 1 2161 6 discriminator 3 view .LVU2127
 6557 080c 1344     		add	r3, r3, r2
 6558 080e 1744     		add	r7, r7, r2
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6559              		.loc 1 2165 15 view .LVU2128
 6560 0810 4FF0010B 		mov	fp, #1
 6561 0814 44E5     		b	.L506
 6562              	.LVL731:
 6563              	.L503:
2145:src/display.c **** 	      odig++;
 6564              		.loc 1 2145 8 is_stmt 1 view .LVU2129
2145:src/display.c **** 	      odig++;
 6565              		.loc 1 2145 15 is_stmt 0 view .LVU2130
 6566 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6567 081a 8DF81430 		strb	r3, [sp, #20]
2146:src/display.c **** 	      dd--;
 6568              		.loc 1 2146 8 is_stmt 1 view .LVU2131
 6569              	.LVL732:
2147:src/display.c **** 	      exp--;
 6570              		.loc 1 2147 8 view .LVU2132
2148:src/display.c **** 	    case -2:
 6571              		.loc 1 2148 8 view .LVU2133
2148:src/display.c **** 	    case -2:
 6572              		.loc 1 2148 11 is_stmt 0 view .LVU2134
 6573 081e 013D     		subs	r5, r5, #1
 6574              	.LVL733:
2148:src/display.c **** 	    case -2:
 6575              		.loc 1 2148 11 view .LVU2135
 6576 0820 0327     		movs	r7, #3
2145:src/display.c **** 	      odig++;
 6577              		.loc 1 2145 19 view .LVU2136
 6578 0822 0DF14909 		add	r9, sp, #73
 6579              	.LVL734:
2145:src/display.c **** 	      odig++;
 6580              		.loc 1 2145 12 view .LVU2137
 6581 0826 0DF11500 		add	r0, sp, #21
 6582              	.LVL735:
2145:src/display.c **** 	      odig++;
 6583              		.loc 1 2145 12 view .LVU2138
 6584 082a D5E7     		b	.L505
 6585              	.LVL736:
 6586              	.L541:
2287:src/display.c **** 	  }
 6587              		.loc 1 2287 8 is_stmt 1 view .LVU2139
 6588 082c 2D21     		movs	r1, #45
 6589 082e A6F10900 		sub	r0, r6, #9
 6590 0832 FFF7FEFF 		bl	set_dig
 6591              	.LVL737:
 6592 0836 019B     		ldr	r3, [sp, #4]
 6593 0838 43E5     		b	.L537
 6594              	.LVL738:
 6595              	.L672:
 6596              	.LBB427:
 6597              	.LBB425:
 6598              	.LBB419:
1854:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6599              		.loc 1 1854 4 view .LVU2140
ARM GAS  /tmp/ccZdZ92R.s 			page 212


1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6600              		.loc 1 1857 4 view .LVU2141
1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6601              		.loc 1 1857 14 is_stmt 0 view .LVU2142
 6602 083a 08F10306 		add	r6, r8, #3
 6603              	.LVL739:
1858:src/display.c **** 	  if (grouping) {
 6604              		.loc 1 1858 4 is_stmt 1 view .LVU2143
 6605 083e 4749     		ldr	r1, .L677+12
 6606 0840 0D22     		movs	r2, #13
 6607 0842 3046     		mov	r0, r6
 6608 0844 FFF7FEFF 		bl	xcopy
 6609              	.LVL740:
1859:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6610              		.loc 1 1859 4 view .LVU2144
1860:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6611              		.loc 1 1860 6 view .LVU2145
 6612 0848 1322     		movs	r2, #19
 6613 084a 08EB0201 		add	r1, r8, r2
 6614 084e 08F11400 		add	r0, r8, #20
 6615 0852 FFF7FEFF 		bl	xcopy
 6616              	.LVL741:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6617              		.loc 1 1861 6 view .LVU2146
1862:src/display.c **** 	  }
 6618              		.loc 1 1862 8 is_stmt 0 view .LVU2147
 6619 0856 08F11705 		add	r5, r8, #23
 6620              	.LVL742:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6621              		.loc 1 1861 24 view .LVU2148
 6622 085a 88F81370 		strb	r7, [r8, #19]
1862:src/display.c **** 	  }
 6623              		.loc 1 1862 6 is_stmt 1 view .LVU2149
 6624              	.LVL743:
1875:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6625              		.loc 1 1875 4 view .LVU2150
1876:src/display.c **** 	}
 6626              		.loc 1 1876 4 view .LVU2151
1876:src/display.c **** 	}
 6627              		.loc 1 1876 6 is_stmt 0 view .LVU2152
 6628 085e 1B24     		movs	r4, #27
 6629              	.LVL744:
 6630              	.L457:
1876:src/display.c **** 	}
 6631              		.loc 1 1876 6 view .LVU2153
 6632              	.LBE419:
1910:src/display.c **** 	  }
 6633              		.loc 1 1910 6 is_stmt 1 view .LVU2154
 6634              	.LBB420:
 6635              	.LBI420:
 367:src/display.c ****   if (sep == SEP_NONE)
 6636              		.loc 1 367 14 view .LVU2155
 6637              	.LBB421:
 368:src/display.c ****     return res;
 6638              		.loc 1 368 3 view .LVU2156
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6639              		.loc 1 370 3 view .LVU2157
ARM GAS  /tmp/ccZdZ92R.s 			page 213


 6640 0860 2046     		mov	r0, r4
 6641 0862 5146     		mov	r1, r10
 6642              	.LBE421:
 6643              	.LBE420:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6644              		.loc 1 1909 38 is_stmt 0 view .LVU2158
 6645 0864 1B34     		adds	r4, r4, #27
 6646              	.LVL745:
 6647              	.LBB423:
 6648              	.LBB422:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6649              		.loc 1 1909 38 view .LVU2159
 6650 0866 FFF7FEFF 		bl	set_separator.part.0
 6651              	.LVL746:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6652              		.loc 1 1909 38 view .LVU2160
 6653              	.LBE422:
 6654              	.LBE423:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6655              		.loc 1 1909 36 is_stmt 1 view .LVU2161
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6656              		.loc 1 1909 11 view .LVU2162
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6657              		.loc 1 1909 4 is_stmt 0 view .LVU2163
 6658 086a 512C     		cmp	r4, #81
 6659 086c F8DD     		ble	.L457
 6660 086e 6C1E     		subs	r4, r5, #1
 6661              	.LVL747:
 6662              	.L459:
1915:src/display.c **** 
 6663              		.loc 1 1915 4 is_stmt 1 view .LVU2164
 6664 0870 5846     		mov	r0, fp
 6665 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1914:src/display.c **** 	  set_dig(j, x[i]);
 6666              		.loc 1 1914 33 is_stmt 0 view .LVU2165
 6667 0876 0BF1090B 		add	fp, fp, #9
 6668              	.LVL748:
1915:src/display.c **** 
 6669              		.loc 1 1915 4 view .LVU2166
 6670 087a FFF7FEFF 		bl	set_dig
 6671              	.LVL749:
1914:src/display.c **** 	  set_dig(j, x[i]);
 6672              		.loc 1 1914 26 is_stmt 1 view .LVU2167
1914:src/display.c **** 	  set_dig(j, x[i]);
 6673              		.loc 1 1914 18 view .LVU2168
1914:src/display.c **** 	  set_dig(j, x[i]);
 6674              		.loc 1 1914 2 is_stmt 0 view .LVU2169
 6675 087e BBF16C0F 		cmp	fp, #108
 6676 0882 F5D1     		bne	.L459
1917:src/display.c **** 	set_status(upper_str - negative);
 6677              		.loc 1 1917 2 is_stmt 1 view .LVU2170
1917:src/display.c **** 	set_status(upper_str - negative);
 6678              		.loc 1 1917 5 is_stmt 0 view .LVU2171
 6679 0884 0023     		movs	r3, #0
1918:src/display.c ****       }
 6680              		.loc 1 1918 2 view .LVU2172
 6681 0886 3046     		mov	r0, r6
ARM GAS  /tmp/ccZdZ92R.s 			page 214


1917:src/display.c **** 	set_status(upper_str - negative);
 6682              		.loc 1 1917 5 view .LVU2173
 6683 0888 2B70     		strb	r3, [r5]
1918:src/display.c ****       }
 6684              		.loc 1 1918 2 is_stmt 1 view .LVU2174
 6685 088a FFF7FEFF 		bl	set_status
 6686              	.LVL750:
1919:src/display.c **** 
 6687              		.loc 1 1919 7 is_stmt 0 view .LVU2175
 6688 088e 43E5     		b	.L438
 6689              	.LVL751:
 6690              	.L669:
1919:src/display.c **** 
 6691              		.loc 1 1919 7 view .LVU2176
 6692              	.LBE425:
 6693              	.LBE427:
1975:src/display.c **** 	      return;
 6694              		.loc 1 1975 8 is_stmt 1 view .LVU2177
 6695 0890 3046     		mov	r0, r6
 6696 0892 FFF7FEFF 		bl	set_x_hms
 6697              	.LVL752:
1976:src/display.c **** 	    }
 6698              		.loc 1 1976 8 view .LVU2178
 6699 0896 3FE5     		b	.L438
 6700              	.LVL753:
 6701              	.L570:
2137:src/display.c **** 	  if (count != *display_digits)
 6702              		.loc 1 2137 15 is_stmt 0 view .LVU2179
 6703 0898 3246     		mov	r2, r6
 6704 089a A3E4     		b	.L498
 6705              	.LVL754:
 6706              	.L571:
2142:src/display.c **** 	    case -1:
 6707              		.loc 1 2142 24 view .LVU2180
 6708 089c 0127     		movs	r7, #1
 6709 089e 4046     		mov	r0, r8
 6710 08a0 9FE7     		b	.L502
 6711              	.LVL755:
 6712              	.L573:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6713              		.loc 1 2165 15 view .LVU2181
 6714 08a2 4FF0010B 		mov	fp, #1
 6715 08a6 FBE4     		b	.L506
 6716              	.LVL756:
 6717              	.L545:
 6718              	.LBB428:
 6719              	.LBB404:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6720              		.loc 1 2165 15 view .LVU2182
 6721 08a8 3046     		mov	r0, r6
 6722 08aa 0193     		str	r3, [sp, #4]
 6723 08ac FFF7FEFF 		bl	set_separator.part.0
 6724              	.LVL757:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6725              		.loc 1 2165 15 view .LVU2183
 6726 08b0 019B     		ldr	r3, [sp, #4]
 6727 08b2 0446     		mov	r4, r0
ARM GAS  /tmp/ccZdZ92R.s 			page 215


 6728              	.LVL758:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6729              		.loc 1 2165 15 view .LVU2184
 6730 08b4 F9E5     		b	.L543
 6731              	.LVL759:
 6732              	.L483:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6733              		.loc 1 2165 15 view .LVU2185
 6734              	.LBE404:
 6735              	.LBE428:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6736              		.loc 1 2115 4 is_stmt 1 view .LVU2186
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6737              		.loc 1 2115 7 is_stmt 0 view .LVU2187
 6738 08b6 4B45     		cmp	r3, r9
 6739 08b8 7FF460AC 		bne	.L554
 6740 08bc 63E5     		b	.L555
 6741              	.LVL760:
 6742              	.L454:
 6743              	.LBB429:
 6744              	.LBB426:
1900:src/display.c **** 	    x[10] = '\0';
 6745              		.loc 1 1900 6 is_stmt 1 view .LVU2188
1901:src/display.c **** 	  }
 6746              		.loc 1 1901 6 view .LVU2189
1900:src/display.c **** 	    x[10] = '\0';
 6747              		.loc 1 1900 11 is_stmt 0 view .LVU2190
 6748 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6749 08c2 21E7     		b	.L456
 6750              	.LVL761:
 6751              	.L671:
 6752              	.LBB424:
1825:src/display.c **** 
 6753              		.loc 1 1825 4 is_stmt 1 view .LVU2191
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 6754              		.loc 1 1827 4 view .LVU2192
 6755 08c4 2222     		movs	r2, #34
 6756 08c6 0DF11501 		add	r1, sp, #21
 6757 08ca 06A8     		add	r0, sp, #24
 6758              	.LVL762:
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 6759              		.loc 1 1827 4 is_stmt 0 view .LVU2193
 6760 08cc FFF7FEFF 		bl	xcopy
 6761              	.LVL763:
1828:src/display.c **** 	  x += 4;
 6762              		.loc 1 1828 4 is_stmt 1 view .LVU2194
 6763 08d0 4046     		mov	r0, r8
 6764 08d2 2349     		ldr	r1, .L677+16
 6765 08d4 0422     		movs	r2, #4
 6766 08d6 FFF7FEFF 		bl	xcopy
 6767              	.LVL764:
1829:src/display.c **** 	  negative = 4;
 6768              		.loc 1 1829 4 view .LVU2195
1830:src/display.c **** #else
 6769              		.loc 1 1830 4 view .LVU2196
1829:src/display.c **** 	  negative = 4;
 6770              		.loc 1 1829 6 is_stmt 0 view .LVU2197
ARM GAS  /tmp/ccZdZ92R.s 			page 216


 6771 08da 0DF11808 		add	r8, sp, #24
 6772              	.LVL765:
1830:src/display.c **** #else
 6773              		.loc 1 1830 13 view .LVU2198
 6774 08de 0426     		movs	r6, #4
 6775              	.LVL766:
1830:src/display.c **** #else
 6776              		.loc 1 1830 13 view .LVU2199
 6777              	.LBE424:
 6778 08e0 C7E6     		b	.L450
 6779              	.LVL767:
 6780              	.L508:
1830:src/display.c **** #else
 6781              		.loc 1 1830 13 view .LVU2200
 6782              	.LBE426:
 6783              	.LBE429:
2181:src/display.c **** 	    odig++;
 6784              		.loc 1 2181 6 is_stmt 1 view .LVU2201
2182:src/display.c **** 	    *obp++ = '.';
 6785              		.loc 1 2182 6 view .LVU2202
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6786              		.loc 1 2183 6 view .LVU2203
2181:src/display.c **** 	    odig++;
 6787              		.loc 1 2181 13 is_stmt 0 view .LVU2204
 6788 08e2 42F63063 		movw	r3, #11824
2184:src/display.c **** 	      *obp++ = '0';
 6789              		.loc 1 2184 6 view .LVU2205
 6790 08e6 691C     		adds	r1, r5, #1
2181:src/display.c **** 	    odig++;
 6791              		.loc 1 2181 13 view .LVU2206
 6792 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2184:src/display.c **** 	      *obp++ = '0';
 6793              		.loc 1 2184 6 is_stmt 1 view .LVU2207
 6794              	.LVL768:
2184:src/display.c **** 	      *obp++ = '0';
 6795              		.loc 1 2184 20 view .LVU2208
2184:src/display.c **** 	      *obp++ = '0';
 6796              		.loc 1 2184 6 is_stmt 0 view .LVU2209
 6797 08ec 2CD0     		beq	.L574
 6798 08ee C5F10100 		rsb	r0, r5, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6799              		.loc 1 2183 10 view .LVU2210
 6800 08f2 0DF11603 		add	r3, sp, #22
 6801              	.LVL769:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6802              		.loc 1 2183 10 view .LVU2211
 6803 08f6 4044     		add	r0, r0, r8
 6804 08f8 1946     		mov	r1, r3
 6805              	.LVL770:
2185:src/display.c **** 	      odig++;
 6806              		.loc 1 2185 15 view .LVU2212
 6807 08fa 3027     		movs	r7, #48
 6808              	.LVL771:
 6809              	.L515:
2185:src/display.c **** 	      odig++;
 6810              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2213
2185:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccZdZ92R.s 			page 217


 6811              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2214
 6812 08fc 01F8017B 		strb	r7, [r1], #1
 6813              	.LVL772:
2186:src/display.c **** 	    }
 6814              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2215
2184:src/display.c **** 	      *obp++ = '0';
 6815              		.loc 1 2184 25 discriminator 3 view .LVU2216
2184:src/display.c **** 	      *obp++ = '0';
 6816              		.loc 1 2184 20 discriminator 3 view .LVU2217
2184:src/display.c **** 	      *obp++ = '0';
 6817              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2218
 6818 0900 8142     		cmp	r1, r0
 6819 0902 FBD1     		bne	.L515
 6820 0904 E943     		mvns	r1, r5
 6821              	.LVL773:
2184:src/display.c **** 	      *obp++ = '0';
 6822              		.loc 1 2184 6 discriminator 3 view .LVU2219
 6823 0906 0B44     		add	r3, r3, r1
 6824 0908 6F42     		rsbs	r7, r5, #0
 6825              	.L514:
 6826              	.LVL774:
2188:src/display.c **** 	      *obp++ = *p++;
 6827              		.loc 1 2188 16 is_stmt 1 view .LVU2220
2188:src/display.c **** 	      *obp++ = *p++;
 6828              		.loc 1 2188 6 is_stmt 0 view .LVU2221
 6829 090a 002A     		cmp	r2, #0
 6830 090c 7FF7C8AC 		ble	.L506
 6831 0910 02F1FF3C 		add	ip, r2, #-1
 6832 0914 9C44     		add	ip, ip, r3
 6833 0916 591E     		subs	r1, r3, #1
 6834              	.LVL775:
 6835              	.L516:
2189:src/display.c **** 	      odig++;
 6836              		.loc 1 2189 8 is_stmt 1 discriminator 3 view .LVU2222
2189:src/display.c **** 	      odig++;
 6837              		.loc 1 2189 15 is_stmt 0 discriminator 3 view .LVU2223
 6838 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6839              	.LVL776:
2189:src/display.c **** 	      odig++;
 6840              		.loc 1 2189 15 discriminator 3 view .LVU2224
 6841 091c 01F8010F 		strb	r0, [r1, #1]!
2190:src/display.c **** 	    }
 6842              		.loc 1 2190 8 is_stmt 1 discriminator 3 view .LVU2225
2188:src/display.c **** 	      *obp++ = *p++;
 6843              		.loc 1 2188 25 discriminator 3 view .LVU2226
 6844              	.LVL777:
2188:src/display.c **** 	      *obp++ = *p++;
 6845              		.loc 1 2188 16 discriminator 3 view .LVU2227
2188:src/display.c **** 	      *obp++ = *p++;
 6846              		.loc 1 2188 6 is_stmt 0 discriminator 3 view .LVU2228
 6847 0920 8C45     		cmp	ip, r1
 6848 0922 F9D1     		bne	.L516
 6849              	.LVL778:
2188:src/display.c **** 	      *obp++ = *p++;
 6850              		.loc 1 2188 6 discriminator 3 view .LVU2229
 6851 0924 1344     		add	r3, r3, r2
 6852              	.LVL779:
ARM GAS  /tmp/ccZdZ92R.s 			page 218


2188:src/display.c **** 	      *obp++ = *p++;
 6853              		.loc 1 2188 6 discriminator 3 view .LVU2230
 6854 0926 1744     		add	r7, r7, r2
 6855 0928 BAE4     		b	.L506
 6856              	.LVL780:
 6857              	.L670:
2131:src/display.c **** 
 6858              		.loc 1 2131 2 is_stmt 1 view .LVU2231
2131:src/display.c **** 
 6859              		.loc 1 2131 40 is_stmt 0 view .LVU2232
 6860 092a 0AF10102 		add	r2, r10, #1
2131:src/display.c **** 
 6861              		.loc 1 2131 9 view .LVU2233
 6862 092e 09EB0203 		add	r3, r9, r2
 6863              	.LVL781:
2131:src/display.c **** 
 6864              		.loc 1 2131 45 is_stmt 1 view .LVU2234
2131:src/display.c **** 
 6865              		.loc 1 2131 2 is_stmt 0 view .LVU2235
 6866 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6867 0936 002A     		cmp	r2, #0
 6868 0938 3FF496AC 		beq	.L652
2120:src/display.c **** 	      extra_digits = 0;
 6869              		.loc 1 2120 37 view .LVU2236
 6870 093c 0227     		movs	r7, #2
 6871 093e 2FE4     		b	.L553
 6872              	.LVL782:
 6873              	.L575:
2211:src/display.c **** 	    *obp++ = '.';
 6874              		.loc 1 2211 10 view .LVU2237
 6875 0940 0127     		movs	r7, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6876              		.loc 1 2212 10 view .LVU2238
 6877 0942 0DF11603 		add	r3, sp, #22
 6878              	.LVL783:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6879              		.loc 1 2212 10 view .LVU2239
 6880 0946 1AE7     		b	.L525
 6881              	.LVL784:
 6882              	.L574:
2182:src/display.c **** 	    *obp++ = '.';
 6883              		.loc 1 2182 10 view .LVU2240
 6884 0948 0127     		movs	r7, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6885              		.loc 1 2183 10 view .LVU2241
 6886 094a 0DF11603 		add	r3, sp, #22
 6887              	.LVL785:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6888              		.loc 1 2183 10 view .LVU2242
 6889 094e DCE7     		b	.L514
 6890              	.L678:
 6891              		.align	2
 6892              	.L677:
 6893 0950 00000000 		.word	.LANCHOR1
 6894 0954 18FCFFFF 		.word	-1000
 6895 0958 D34D6210 		.word	274877907
 6896 095c 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/ccZdZ92R.s 			page 219


 6897 0960 00000000 		.word	.LANCHOR13
 6898              		.cfi_endproc
 6899              	.LFE27:
 6901              		.section	.text.set_x,"ax",%progbits
 6902              		.align	1
 6903              		.p2align 2,,3
 6904              		.syntax unified
 6905              		.thumb
 6906              		.thumb_func
 6907              		.fpu fpv4-sp-d16
 6909              	set_x:
 6910              	.LVL786:
 6911              	.LFB26:
1926:src/display.c **** 	decNumber z;
 6912              		.loc 1 1926 66 is_stmt 1 view -0
 6913              		.cfi_startproc
 6914              		@ args = 0, pretend = 0, frame = 40
 6915              		@ frame_needed = 0, uses_anonymous_args = 0
1927:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6916              		.loc 1 1927 2 view .LVU2244
1928:src/display.c **** 
 6917              		.loc 1 1928 2 view .LVU2245
1926:src/display.c **** 	decNumber z;
 6918              		.loc 1 1926 66 is_stmt 0 view .LVU2246
 6919 0000 30B5     		push	{r4, r5, lr}
 6920              		.cfi_def_cfa_offset 12
 6921              		.cfi_offset 4, -12
 6922              		.cfi_offset 5, -8
 6923              		.cfi_offset 14, -4
 6924 0002 8BB0     		sub	sp, sp, #44
 6925              		.cfi_def_cfa_offset 56
1928:src/display.c **** 
 6926              		.loc 1 1928 6 view .LVU2247
 6927 0004 0C23     		movs	r3, #12
1931:src/display.c **** 	else
 6928              		.loc 1 1931 4 view .LVU2248
 6929 0006 01AD     		add	r5, sp, #4
1926:src/display.c **** 	decNumber z;
 6930              		.loc 1 1926 66 view .LVU2249
 6931 0008 0C46     		mov	r4, r1
1928:src/display.c **** 
 6932              		.loc 1 1928 6 view .LVU2250
 6933 000a 0093     		str	r3, [sp]
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6934              		.loc 1 1930 2 is_stmt 1 view .LVU2251
1931:src/display.c **** 	else
 6935              		.loc 1 1931 4 is_stmt 0 view .LVU2252
 6936 000c 2946     		mov	r1, r5
 6937              	.LVL787:
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6938              		.loc 1 1930 5 view .LVU2253
 6939 000e 42B1     		cbz	r2, .L680
1931:src/display.c **** 	else
 6940              		.loc 1 1931 4 is_stmt 1 view .LVU2254
 6941 0010 FFF7FEFF 		bl	decimal128ToNumber
 6942              	.LVL788:
1934:src/display.c ****       }
ARM GAS  /tmp/ccZdZ92R.s 			page 220


 6943              		.loc 1 1934 2 view .LVU2255
 6944 0014 2146     		mov	r1, r4
 6945 0016 2846     		mov	r0, r5
 6946 0018 6A46     		mov	r2, sp
 6947 001a FFF7FEFF 		bl	set_x_dn
 6948              	.LVL789:
1935:src/display.c **** 
 6949              		.loc 1 1935 7 is_stmt 0 view .LVU2256
 6950 001e 0BB0     		add	sp, sp, #44
 6951              		.cfi_remember_state
 6952              		.cfi_def_cfa_offset 12
 6953              		@ sp needed
 6954 0020 30BD     		pop	{r4, r5, pc}
 6955              	.LVL790:
 6956              	.L680:
 6957              		.cfi_restore_state
1933:src/display.c **** 	set_x_dn(&z, res, &digits);
 6958              		.loc 1 1933 4 is_stmt 1 view .LVU2257
 6959 0022 FFF7FEFF 		bl	decimal64ToNumber
 6960              	.LVL791:
1934:src/display.c ****       }
 6961              		.loc 1 1934 2 view .LVU2258
 6962 0026 2146     		mov	r1, r4
 6963 0028 2846     		mov	r0, r5
 6964 002a 6A46     		mov	r2, sp
 6965 002c FFF7FEFF 		bl	set_x_dn
 6966              	.LVL792:
1935:src/display.c **** 
 6967              		.loc 1 1935 7 is_stmt 0 view .LVU2259
 6968 0030 0BB0     		add	sp, sp, #44
 6969              		.cfi_def_cfa_offset 12
 6970              		@ sp needed
 6971 0032 30BD     		pop	{r4, r5, pc}
1935:src/display.c **** 
 6972              		.loc 1 1935 7 view .LVU2260
 6973              		.cfi_endproc
 6974              	.LFE26:
 6976              		.section	.text.format_reg,"ax",%progbits
 6977              		.align	1
 6978              		.p2align 2,,3
 6979              		.global	format_reg
 6980              		.syntax unified
 6981              		.thumb
 6982              		.thumb_func
 6983              		.fpu fpv4-sp-d16
 6985              	format_reg:
 6986              	.LVL793:
 6987              	.LFB28:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6988              		.loc 1 2342 45 is_stmt 1 view -0
 6989              		.cfi_startproc
 6990              		@ args = 0, pretend = 0, frame = 40
 6991              		@ frame_needed = 0, uses_anonymous_args = 0
2343:src/display.c **** 
 6992              		.loc 1 2343 2 view .LVU2262
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6993              		.loc 1 2342 45 is_stmt 0 view .LVU2263
ARM GAS  /tmp/ccZdZ92R.s 			page 221


 6994 0000 30B5     		push	{r4, r5, lr}
 6995              		.cfi_def_cfa_offset 12
 6996              		.cfi_offset 4, -12
 6997              		.cfi_offset 5, -8
 6998              		.cfi_offset 14, -4
 6999 0002 8BB0     		sub	sp, sp, #44
 7000              		.cfi_def_cfa_offset 56
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7001              		.loc 1 2342 45 view .LVU2264
 7002 0004 0C46     		mov	r4, r1
 7003 0006 0546     		mov	r5, r0
2343:src/display.c **** 
 7004              		.loc 1 2343 28 view .LVU2265
 7005 0008 FFF7FEFF 		bl	get_reg_n
 7006              	.LVL794:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7007              		.loc 1 2345 6 view .LVU2266
 7008 000c 154B     		ldr	r3, .L690
 7009 000e 1B68     		ldr	r3, [r3]
 7010 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7011              	.LVL795:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7012              		.loc 1 2345 2 is_stmt 1 view .LVU2267
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7013              		.loc 1 2345 5 is_stmt 0 view .LVU2268
 7014 0014 D207     		lsls	r2, r2, #31
 7015 0016 1DD4     		bmi	.L688
2348:src/display.c **** 	  decNumber x;
 7016              		.loc 1 2348 7 is_stmt 1 view .LVU2269
2348:src/display.c **** 	  decNumber x;
 7017              		.loc 1 2348 10 is_stmt 0 view .LVU2270
 7018 0018 44B1     		cbz	r4, .L689
 7019              	.L686:
2359:src/display.c ****       }
 7020              		.loc 1 2359 4 is_stmt 1 view .LVU2271
2359:src/display.c ****       }
 7021              		.loc 1 2359 24 is_stmt 0 view .LVU2272
 7022 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2359:src/display.c ****       }
 7023              		.loc 1 2359 4 view .LVU2273
 7024 001e 2146     		mov	r1, r4
 7025 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7026 0024 FFF7FEFF 		bl	set_x
 7027              	.LVL796:
2360:src/display.c **** 
 7028              		.loc 1 2360 7 view .LVU2274
 7029 0028 0BB0     		add	sp, sp, #44
 7030              		.cfi_remember_state
 7031              		.cfi_def_cfa_offset 12
 7032              		@ sp needed
 7033 002a 30BD     		pop	{r4, r5, pc}
 7034              	.LVL797:
 7035              	.L689:
 7036              		.cfi_restore_state
2348:src/display.c **** 	  decNumber x;
 7037              		.loc 1 2348 32 discriminator 1 view .LVU2275
 7038 002c 0E4A     		ldr	r2, .L690+4
ARM GAS  /tmp/ccZdZ92R.s 			page 222


2348:src/display.c **** 	  decNumber x;
 7039              		.loc 1 2348 23 discriminator 1 view .LVU2276
 7040 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7041 0030 012A     		cmp	r2, #1
 7042 0032 F2D9     		bls	.L686
 7043              	.LVL798:
 7044              	.LBB433:
 7045              	.LBI433:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7046              		.loc 1 2342 12 is_stmt 1 view .LVU2277
 7047              	.LBB434:
 7048              	.LBB435:
2349:src/display.c **** 	  int s;
 7049              		.loc 1 2349 4 view .LVU2278
2350:src/display.c **** 	  unsigned long long int v;
 7050              		.loc 1 2350 4 view .LVU2279
2351:src/display.c **** 
 7051              		.loc 1 2351 4 view .LVU2280
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7052              		.loc 1 2353 4 view .LVU2281
 7053 0034 2946     		mov	r1, r5
 7054 0036 01A8     		add	r0, sp, #4
 7055              	.LVL799:
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7056              		.loc 1 2353 4 is_stmt 0 view .LVU2282
 7057 0038 FFF7FEFF 		bl	getRegister
 7058              	.LVL800:
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7059              		.loc 1 2354 4 is_stmt 1 view .LVU2283
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7060              		.loc 1 2354 8 is_stmt 0 view .LVU2284
 7061 003c 01A8     		add	r0, sp, #4
 7062 003e 6946     		mov	r1, sp
 7063 0040 FFF7FEFF 		bl	dn_to_ull
 7064              	.LVL801:
2355:src/display.c **** 	}
 7065              		.loc 1 2355 4 is_stmt 1 view .LVU2285
 7066 0044 009A     		ldr	r2, [sp]
 7067 0046 FFF7FEFF 		bl	build_value
 7068              	.LVL802:
2355:src/display.c **** 	}
 7069              		.loc 1 2355 4 is_stmt 0 view .LVU2286
 7070 004a 2246     		mov	r2, r4
 7071 004c FFF7FEFF 		bl	set_int_x
 7072              	.LVL803:
 7073              	.LBE435:
 7074              	.LBE434:
 7075              	.LBE433:
2360:src/display.c **** 
 7076              		.loc 1 2360 7 view .LVU2287
 7077 0050 0BB0     		add	sp, sp, #44
 7078              		.cfi_remember_state
 7079              		.cfi_def_cfa_offset 12
 7080              		@ sp needed
 7081 0052 30BD     		pop	{r4, r5, pc}
 7082              	.LVL804:
 7083              	.L688:
ARM GAS  /tmp/ccZdZ92R.s 			page 223


 7084              		.cfi_restore_state
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7085              		.loc 1 2346 4 is_stmt 1 view .LVU2288
 7086 0054 2846     		mov	r0, r5
 7087              	.LVL805:
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7088              		.loc 1 2346 4 is_stmt 0 view .LVU2289
 7089 0056 FFF7FEFF 		bl	get_reg_n_int
 7090              	.LVL806:
 7091 005a 2246     		mov	r2, r4
 7092 005c FFF7FEFF 		bl	set_int_x
 7093              	.LVL807:
2360:src/display.c **** 
 7094              		.loc 1 2360 7 view .LVU2290
 7095 0060 0BB0     		add	sp, sp, #44
 7096              		.cfi_def_cfa_offset 12
 7097              		@ sp needed
 7098 0062 30BD     		pop	{r4, r5, pc}
 7099              	.LVL808:
 7100              	.L691:
2360:src/display.c **** 
 7101              		.loc 1 2360 7 view .LVU2291
 7102              		.align	2
 7103              	.L690:
 7104 0064 00000000 		.word	main_ram
 7105 0068 00000000 		.word	StateWhileOn
 7106              		.cfi_endproc
 7107              	.LFE28:
 7109              		.section	.text.set_status_right,"ax",%progbits
 7110              		.align	1
 7111              		.p2align 2,,3
 7112              		.syntax unified
 7113              		.thumb
 7114              		.thumb_func
 7115              		.fpu fpv4-sp-d16
 7117              	set_status_right:
 7118              	.LVL809:
 7119              	.LFB46:
3505:src/display.c ****       static void set_status_top(const char *str) {
3506:src/display.c **** 	if (no_status_top) return;
3507:src/display.c **** 	if (State2.runmode) {
3508:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3509:src/display.c **** 	}
3510:src/display.c **** 	else {
3511:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3512:src/display.c **** 	}
3513:src/display.c ****       }
3514:src/display.c **** #ifdef TOP_ROW
3515:src/display.c ****       static void set_status_top_always(const char *str) {
3516:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3517:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3518:src/display.c ****       }
3519:src/display.c **** #endif
3520:src/display.c **** 
3521:src/display.c ****       /*
3522:src/display.c ****        *  Display messages (global function)
3523:src/display.c ****        */
ARM GAS  /tmp/ccZdZ92R.s 			page 224


3524:src/display.c ****       extern void message(const char *str1, const char *str2)
3525:src/display.c ****       {
3526:src/display.c **** 	State2.disp_freeze = 0;
3527:src/display.c **** 	State2.disp_small = 0;
3528:src/display.c **** 	WasDataEntry = 0;
3529:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3530:src/display.c **** 	  // Complete redraw necessary
3531:src/display.c **** 	  DispMsg = str1;
3532:src/display.c **** 	  display();
3533:src/display.c **** 	}
3534:src/display.c **** 	else {
3535:src/display.c **** 	  if ( str2 != NULL ) {
3536:src/display.c **** 	    reset_disp();
3537:src/display.c **** 	    ShowRPN = 0;
3538:src/display.c **** 	    set_annunciators();
3539:src/display.c **** 	    set_digits_string( str2, 0 );
3540:src/display.c **** 	  }
3541:src/display.c **** 	  set_status( str1 );
3542:src/display.c **** 	  finish_display();// message
3543:src/display.c **** 	}
3544:src/display.c ****       }
3545:src/display.c **** 
3546:src/display.c **** #ifdef INCLUDE_STOPWATCH
3547:src/display.c **** 
3548:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3549:src/display.c **** 	int j = SEGS_EXP_BASE;
3550:src/display.c **** 	for (; *exponent!=0; exponent++) {
3551:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3552:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3553:src/display.c **** 	}
3554:src/display.c ****       }
3555:src/display.c **** 
3556:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3557:src/display.c ****       {
3558:src/display.c **** #ifndef REALBUILD
3559:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3560:src/display.c **** #endif
3561:src/display.c **** 	reset_disp();
3562:src/display.c **** 	set_dot(DEG);
3563:src/display.c **** 	set_digits_string( str2, 0 );
3564:src/display.c **** 	State2.disp_small = force_small;
3565:src/display.c **** 	if( exponent!=NULL ) {
3566:src/display.c **** 	  stopwatch_exponent(exponent);
3567:src/display.c **** 	}
3568:src/display.c **** 	set_status( str1 );
3569:src/display.c **** 	finish_display();
3570:src/display.c ****       }
3571:src/display.c **** 
3572:src/display.c **** 
3573:src/display.c **** #endif // INCLUDE_STOPWATCH
3574:src/display.c **** 
3575:src/display.c ****       /* Display the right hand characters from the given string.
3576:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3577:src/display.c ****        * and reduce font size if required.
3578:src/display.c ****        */
3579:src/display.c ****       static void set_status_right(const char *str) {
 7120              		.loc 1 3579 53 is_stmt 1 view -0
ARM GAS  /tmp/ccZdZ92R.s 			page 225


 7121              		.cfi_startproc
 7122              		@ args = 0, pretend = 0, frame = 0
 7123              		@ frame_needed = 0, uses_anonymous_args = 0
3580:src/display.c **** 	unsigned int x = 0;
 7124              		.loc 1 3580 2 view .LVU2293
3581:src/display.c **** 	const char *p;
 7125              		.loc 1 3581 2 view .LVU2294
3582:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7126              		.loc 1 3582 2 view .LVU2295
3579:src/display.c **** 	unsigned int x = 0;
 7127              		.loc 1 3579 53 is_stmt 0 view .LVU2296
 7128 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7129              		.cfi_def_cfa_offset 32
 7130              		.cfi_offset 3, -32
 7131              		.cfi_offset 4, -28
 7132              		.cfi_offset 5, -24
 7133              		.cfi_offset 6, -20
 7134              		.cfi_offset 7, -16
 7135              		.cfi_offset 8, -12
 7136              		.cfi_offset 9, -8
 7137              		.cfi_offset 14, -4
 7138              		.loc 1 3582 23 view .LVU2297
 7139 0004 164B     		ldr	r3, .L706
 7140              		.loc 1 3582 41 view .LVU2298
 7141 0006 93F91630 		ldrsb	r3, [r3, #22]
 7142 000a 002B     		cmp	r3, #0
3579:src/display.c **** 	unsigned int x = 0;
 7143              		.loc 1 3579 53 view .LVU2299
 7144 000c 0646     		mov	r6, r0
 7145              		.loc 1 3582 41 view .LVU2300
 7146 000e 1DDA     		bge	.L705
 7147              	.LVL810:
 7148              	.L693:
 7149              		.loc 1 3582 12 view .LVU2301
 7150 0010 4FF00108 		mov	r8, #1
3583:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7151              		.loc 1 3583 36 view .LVU2302
 7152 0014 4FF48077 		mov	r7, #256
 7153              	.L694:
 7154              	.LVL811:
3584:src/display.c **** 
3585:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7155              		.loc 1 3585 2 is_stmt 1 discriminator 4 view .LVU2303
 7156              		.loc 1 3585 14 discriminator 4 view .LVU2304
 7157              		.loc 1 3585 2 is_stmt 0 discriminator 4 view .LVU2305
 7158 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7159 001a 3446     		mov	r4, r6
 7160 001c 1BB1     		cbz	r3, .L695
 7161              	.LVL812:
 7162              	.L696:
 7163              		.loc 1 3585 30 is_stmt 1 discriminator 3 view .LVU2306
 7164              		.loc 1 3585 26 discriminator 3 view .LVU2307
 7165              		.loc 1 3585 14 discriminator 3 view .LVU2308
 7166              		.loc 1 3585 2 is_stmt 0 discriminator 3 view .LVU2309
 7167 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7168              	.LVL813:
 7169              		.loc 1 3585 2 discriminator 3 view .LVU2310
ARM GAS  /tmp/ccZdZ92R.s 			page 226


 7170 0022 002B     		cmp	r3, #0
 7171 0024 FBD1     		bne	.L696
 7172              	.L695:
3580:src/display.c **** 	const char *p;
 7173              		.loc 1 3580 15 view .LVU2311
 7174 0026 0025     		movs	r5, #0
 7175 0028 06E0     		b	.L697
 7176              	.LVL814:
 7177              	.L698:
 7178              	.LBB436:
3586:src/display.c **** 	while (--p >= str) {
3587:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7179              		.loc 1 3587 27 view .LVU2312
 7180 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3588:src/display.c **** 
3589:src/display.c **** 	  x += charlengths(c);
 7181              		.loc 1 3589 9 view .LVU2313
 7182 002c 3844     		add	r0, r0, r7
 7183 002e FFF7FEFF 		bl	charlengths
 7184              	.LVL815:
 7185              		.loc 1 3589 6 view .LVU2314
 7186 0032 0544     		add	r5, r5, r0
 7187              	.LVL816:
3590:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7188              		.loc 1 3590 4 is_stmt 1 view .LVU2315
 7189              		.loc 1 3590 7 is_stmt 0 view .LVU2316
 7190 0034 2C2D     		cmp	r5, #44
 7191 0036 03D8     		bhi	.L699
 7192              	.LVL817:
 7193              	.L697:
3587:src/display.c **** 
 7194              		.loc 1 3587 4 is_stmt 1 view .LVU2317
3587:src/display.c **** 
 7195              		.loc 1 3587 4 is_stmt 0 view .LVU2318
 7196              	.LBE436:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7197              		.loc 1 3586 8 is_stmt 1 view .LVU2319
 7198 0038 A146     		mov	r9, r4
 7199 003a 013C     		subs	r4, r4, #1
 7200              	.LVL818:
 7201              	.LBB437:
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7202              		.loc 1 3589 4 view .LVU2320
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7203              		.loc 1 3589 4 is_stmt 0 view .LVU2321
 7204              	.LBE437:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7205              		.loc 1 3586 8 view .LVU2322
 7206 003c A642     		cmp	r6, r4
 7207 003e F4D9     		bls	.L698
 7208              	.LVL819:
 7209              	.L699:
3591:src/display.c **** 	    break;
3592:src/display.c **** 	}
3593:src/display.c **** 	set_status_sized(p+1, toolarge);
 7210              		.loc 1 3593 2 is_stmt 1 view .LVU2323
 7211              	.LBB438:
ARM GAS  /tmp/ccZdZ92R.s 			page 227


 7212              	.LBI438:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7213              		.loc 1 3344 19 view .LVU2324
 7214              	.LBB439:
3345:src/display.c ****       }
 7215              		.loc 1 3345 2 view .LVU2325
 7216 0040 4146     		mov	r1, r8
 7217 0042 4846     		mov	r0, r9
 7218              	.LBE439:
 7219              	.LBE438:
3594:src/display.c ****       }
 7220              		.loc 1 3594 7 is_stmt 0 view .LVU2326
 7221 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7222              		.cfi_remember_state
 7223              		.cfi_restore 14
 7224              		.cfi_restore 9
 7225              		.cfi_restore 8
 7226              		.cfi_restore 7
 7227              		.cfi_restore 6
 7228              		.cfi_restore 5
 7229              		.cfi_restore 4
 7230              		.cfi_restore 3
 7231              		.cfi_def_cfa_offset 0
 7232              	.LVL820:
 7233              	.LBB441:
 7234              	.LBB440:
3345:src/display.c ****       }
 7235              		.loc 1 3345 2 view .LVU2327
 7236 0048 FFF7FEBF 		b	s_s_sized.constprop.0
 7237              	.LVL821:
 7238              	.L705:
 7239              		.cfi_restore_state
3345:src/display.c ****       }
 7240              		.loc 1 3345 2 view .LVU2328
 7241              	.LBE440:
 7242              	.LBE441:
 7243              	.LBB442:
 7244              	.LBI442:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7245              		.loc 1 3492 18 is_stmt 1 view .LVU2329
 7246              	.LBB443:
3493:src/display.c ****       }
 7247              		.loc 1 3493 2 view .LVU2330
3493:src/display.c ****       }
 7248              		.loc 1 3493 9 is_stmt 0 view .LVU2331
 7249 004c 0021     		movs	r1, #0
 7250 004e FFF7FEFF 		bl	pixel_length
 7251              	.LVL822:
3493:src/display.c ****       }
 7252              		.loc 1 3493 9 view .LVU2332
 7253              	.LBE443:
 7254              	.LBE442:
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7255              		.loc 1 3582 41 view .LVU2333
 7256 0052 2C28     		cmp	r0, #44
 7257 0054 DCDC     		bgt	.L693
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
ARM GAS  /tmp/ccZdZ92R.s 			page 228


 7258              		.loc 1 3582 12 view .LVU2334
 7259 0056 4FF00008 		mov	r8, #0
3583:src/display.c **** 
 7260              		.loc 1 3583 36 view .LVU2335
 7261 005a 4746     		mov	r7, r8
 7262 005c DCE7     		b	.L694
 7263              	.L707:
 7264 005e 00BF     		.align	2
 7265              	.L706:
 7266 0060 00000000 		.word	StateWhileOn
 7267              		.cfi_endproc
 7268              	.LFE46:
 7270              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7271              		.align	2
 7272              	.LC3:
 7273 0000 32630600 		.ascii	"2c\006\000"
 7274              		.align	2
 7275              	.LC4:
 7276 0004 07C63C00 		.ascii	"\007\306<\000"
 7277              		.align	2
 7278              	.LC5:
 7279 0008 07876900 		.ascii	"\007\207i\000"
 7280              		.align	2
 7281              	.LC6:
 7282 000c 07C67900 		.ascii	"\007\306y\000"
 7283              		.align	2
 7284              	.LC7:
 7285 0010 07950600 		.ascii	"\007\225\006\000"
 7286              		.align	2
 7287              	.LC8:
 7288 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7288      060600
 7289 001b 00       		.align	2
 7290              	.LC9:
 7291 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7291      060600
 7292 0023 00       		.align	2
 7293              	.LC10:
 7294 0024 1400     		.ascii	"\024\000"
 7295 0026 0000     		.align	2
 7296              	.LC11:
 7297 0028 07C77900 		.ascii	"\007\307y\000"
 7298              		.align	2
 7299              	.LC12:
 7300 002c 07870700 		.ascii	"\007\207\007\000"
 7301              		.align	2
 7302              	.LC13:
 7303 0030 07C74400 		.ascii	"\007\307D\000"
 7304              		.align	2
 7305              	.LC14:
 7306 0034 07C73C00 		.ascii	"\007\307<\000"
 7307              		.align	2
 7308              	.LC15:
 7309 0038 07872000 		.ascii	"\007\207 \000"
 7310              		.align	2
 7311              	.LC16:
 7312 003c 06060788 		.ascii	"\006\006\007\210\007\000"
ARM GAS  /tmp/ccZdZ92R.s 			page 229


 7312      0700
 7313 0042 0000     		.align	2
 7314              	.LC17:
 7315 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7315      00
 7316 0049 000000   		.align	2
 7317              	.LC19:
 7318 004c 07E43F00 		.ascii	"\007\344?\000"
 7319              		.section	.text.annunciators,"ax",%progbits
 7320              		.align	1
 7321              		.p2align 2,,3
 7322              		.syntax unified
 7323              		.thumb
 7324              		.thumb_func
 7325              		.fpu fpv4-sp-d16
 7327              	annunciators:
 7328              	.LFB16:
 948:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7329              		.loc 1 948 36 is_stmt 1 view -0
 7330              		.cfi_startproc
 7331              		@ args = 0, pretend = 0, frame = 88
 7332              		@ frame_needed = 0, uses_anonymous_args = 0
 950:src/display.c ****       int n;
 7333              		.loc 1 950 7 view .LVU2337
 948:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7334              		.loc 1 948 36 is_stmt 0 view .LVU2338
 7335 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7336              		.cfi_def_cfa_offset 28
 7337              		.cfi_offset 4, -28
 7338              		.cfi_offset 5, -24
 7339              		.cfi_offset 6, -20
 7340              		.cfi_offset 7, -16
 7341              		.cfi_offset 8, -12
 7342              		.cfi_offset 9, -8
 7343              		.cfi_offset 14, -4
 961:src/display.c **** #  endif
 7344              		.loc 1 961 38 view .LVU2339
 7345 0004 DFF81C83 		ldr	r8, .L819+56
 948:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7346              		.loc 1 948 36 view .LVU2340
 7347 0008 97B0     		sub	sp, sp, #92
 7348              		.cfi_def_cfa_offset 120
 7349              	.LVL823:
 951:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7350              		.loc 1 951 7 is_stmt 1 view .LVU2341
 952:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7351              		.loc 1 952 7 view .LVU2342
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7352              		.loc 1 953 7 view .LVU2343
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7353              		.loc 1 953 43 is_stmt 0 view .LVU2344
 7354 000a FFF7FEFF 		bl	cur_shift
 7355              	.LVL824:
 961:src/display.c **** #  endif
 7356              		.loc 1 961 38 view .LVU2345
 7357 000e D8F80020 		ldr	r2, [r8]
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
ARM GAS  /tmp/ccZdZ92R.s 			page 230


 7358              		.loc 1 953 18 view .LVU2346
 7359 0012 B64B     		ldr	r3, .L819
 961:src/display.c **** #  endif
 7360              		.loc 1 961 38 view .LVU2347
 7361 0014 92F8EA67 		ldrb	r6, [r2, #2026]	@ zero_extendqisi2
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7362              		.loc 1 953 18 view .LVU2348
 7363 0018 1F5C     		ldrb	r7, [r3, r0]	@ zero_extendqisi2
 7364              	.LVL825:
 961:src/display.c **** #  endif
 7365              		.loc 1 961 7 is_stmt 1 view .LVU2349
 992:src/display.c ****       
 7366              		.loc 1 992 7 is_stmt 0 view .LVU2350
 7367 001a 0BAD     		add	r5, sp, #44
 7368              	.LVL826:
 992:src/display.c ****       
 7369              		.loc 1 992 7 view .LVU2351
 7370 001c 0021     		movs	r1, #0
 7371 001e 2846     		mov	r0, r5
 7372 0020 2A22     		movs	r2, #42
 7373 0022 FFF7FEFF 		bl	xset
 7374              	.LVL827:
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7375              		.loc 1 994 11 view .LVU2352
 7376 0026 D8F80030 		ldr	r3, [r8]
 7377 002a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7378              		.loc 1 994 10 view .LVU2353
 7379 002e D907     		lsls	r1, r3, #31
 961:src/display.c **** #  endif
 7380              		.loc 1 961 38 view .LVU2354
 7381 0030 C6F38006 		ubfx	r6, r6, #2, #1
 7382              	.LVL828:
 964:src/display.c **** #  else
 7383              		.loc 1 964 7 is_stmt 1 view .LVU2355
 969:src/display.c **** #  else
 7384              		.loc 1 969 7 view .LVU2356
 979:src/display.c **** #else
 7385              		.loc 1 979 7 view .LVU2357
 987:src/display.c **** #else
 7386              		.loc 1 987 7 view .LVU2358
 992:src/display.c ****       
 7387              		.loc 1 992 7 view .LVU2359
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7388              		.loc 1 994 7 view .LVU2360
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7389              		.loc 1 994 10 is_stmt 0 view .LVU2361
 7390 0034 62D4     		bmi	.L808
1032:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7391              		.loc 1 1032 12 is_stmt 1 view .LVU2362
1032:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7392              		.loc 1 1032 15 is_stmt 0 view .LVU2363
 7393 0036 002E     		cmp	r6, #0
 7394 0038 3BD1     		bne	.L721
1050:src/display.c **** 	    *p++ = shift_char;
 7395              		.loc 1 1050 4 is_stmt 1 view .LVU2364
1050:src/display.c **** 	    *p++ = shift_char;
ARM GAS  /tmp/ccZdZ92R.s 			page 231


 7396              		.loc 1 1050 7 is_stmt 0 view .LVU2365
 7397 003a 202F     		cmp	r7, #32
 7398 003c 00F08D81 		beq	.L722
 7399              	.L724:
1051:src/display.c **** 	    *p++ = '\006';
 7400              		.loc 1 1051 6 is_stmt 1 view .LVU2366
 7401              	.LVL829:
1052:src/display.c **** 	  }
 7402              		.loc 1 1052 11 is_stmt 0 view .LVU2367
 7403 0040 0623     		movs	r3, #6
1051:src/display.c **** 	    *p++ = '\006';
 7404              		.loc 1 1051 11 view .LVU2368
 7405 0042 8DF82C70 		strb	r7, [sp, #44]
1052:src/display.c **** 	  }
 7406              		.loc 1 1052 6 is_stmt 1 view .LVU2369
 7407              	.LVL830:
1052:src/display.c **** 	  }
 7408              		.loc 1 1052 11 is_stmt 0 view .LVU2370
 7409 0046 8DF82D30 		strb	r3, [sp, #45]
1052:src/display.c **** 	  }
 7410              		.loc 1 1052 8 view .LVU2371
 7411 004a 0DF12E00 		add	r0, sp, #46
 7412              	.LVL831:
 7413              	.L723:
1058:src/display.c **** 	  *p++ = ' ';
 7414              		.loc 1 1058 2 is_stmt 1 view .LVU2372
1058:src/display.c **** 	  *p++ = ' ';
 7415              		.loc 1 1058 6 is_stmt 0 view .LVU2373
 7416 004e A84C     		ldr	r4, .L819+4
 7417 0050 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1058:src/display.c **** 	  *p++ = ' ';
 7418              		.loc 1 1058 5 view .LVU2374
 7419 0052 9A07     		lsls	r2, r3, #30
 7420 0054 00F14481 		bmi	.L809
1063:src/display.c **** 	  *p++ = ' ';
 7421              		.loc 1 1063 2 is_stmt 1 view .LVU2375
1063:src/display.c **** 	  *p++ = ' ';
 7422              		.loc 1 1063 5 is_stmt 0 view .LVU2376
 7423 0058 5B07     		lsls	r3, r3, #29
 7424 005a 00F1B480 		bmi	.L810
1069:src/display.c **** 	  if (State2.wascomplex) {
 7425              		.loc 1 1069 2 is_stmt 1 view .LVU2377
1069:src/display.c **** 	  if (State2.wascomplex) {
 7426              		.loc 1 1069 5 is_stmt 0 view .LVU2378
 7427 005e 202F     		cmp	r7, #32
 7428 0060 00F0B680 		beq	.L811
 7429              	.L727:
1086:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7430              		.loc 1 1086 2 is_stmt 1 view .LVU2379
1086:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7431              		.loc 1 1086 16 is_stmt 0 view .LVU2380
 7432 0064 D8F80030 		ldr	r3, [r8]
 7433 0068 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7434 006c C3F30113 		ubfx	r3, r3, #4, #2
1086:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7435              		.loc 1 1086 2 view .LVU2381
 7436 0070 012B     		cmp	r3, #1
ARM GAS  /tmp/ccZdZ92R.s 			page 232


 7437 0072 00F0C781 		beq	.L762
 7438 0076 9F49     		ldr	r1, .L819+8
 7439 0078 9F4A     		ldr	r2, .L819+12
 7440 007a 022B     		cmp	r3, #2
 7441 007c 08BF     		it	eq
 7442 007e 1146     		moveq	r1, r2
 7443              	.L730:
 7444              	.LVL832:
1100:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7445              		.loc 1 1100 2 is_stmt 1 view .LVU2382
1100:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7446              		.loc 1 1100 6 is_stmt 0 view .LVU2383
 7447 0080 FFF7FEFF 		bl	scopy
 7448              	.LVL833:
1100:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7449              		.loc 1 1100 6 view .LVU2384
 7450 0084 0446     		mov	r4, r0
 7451              	.LVL834:
1102:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7452              		.loc 1 1102 2 is_stmt 1 view .LVU2385
1102:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7453              		.loc 1 1102 6 is_stmt 0 view .LVU2386
 7454 0086 FFF7FEFF 		bl	get_trig_mode
 7455              	.LVL835:
1102:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7456              		.loc 1 1102 5 view .LVU2387
 7457 008a 0228     		cmp	r0, #2
 7458 008c 00F07381 		beq	.L812
 7459              	.LVL836:
 7460              	.L712:
1242:src/display.c ****     }
 7461              		.loc 1 1242 11 is_stmt 1 view .LVU2388
 7462              	.LBB458:
 7463              	.LBI458:
3505:src/display.c **** 	if (no_status_top) return;
 7464              		.loc 1 3505 19 view .LVU2389
 7465              	.LBB459:
3506:src/display.c **** 	if (State2.runmode) {
 7466              		.loc 1 3506 2 view .LVU2390
3506:src/display.c **** 	if (State2.runmode) {
 7467              		.loc 1 3506 6 is_stmt 0 view .LVU2391
 7468 0090 9A4B     		ldr	r3, .L819+16
3506:src/display.c **** 	if (State2.runmode) {
 7469              		.loc 1 3506 5 view .LVU2392
 7470 0092 B3F90010 		ldrsh	r1, [r3]
 7471 0096 49B9     		cbnz	r1, .L708
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7472              		.loc 1 3507 2 is_stmt 1 view .LVU2393
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7473              		.loc 1 3507 6 is_stmt 0 view .LVU2394
 7474 0098 954B     		ldr	r3, .L819+4
 7475 009a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7476              		.loc 1 3507 5 view .LVU2395
 7477 009c 5806     		lsls	r0, r3, #25
 7478 009e 22D5     		bpl	.L753
3508:src/display.c **** 	}
ARM GAS  /tmp/ccZdZ92R.s 			page 233


 7479              		.loc 1 3508 4 is_stmt 1 view .LVU2396
 7480 00a0 1A06     		lsls	r2, r3, #24
 7481 00a2 23D5     		bpl	.L807
 7482              	.L772:
3511:src/display.c **** 	}
 7483              		.loc 1 3511 4 is_stmt 0 view .LVU2397
 7484 00a4 0121     		movs	r1, #1
 7485              	.L755:
 7486              	.LVL837:
 7487              	.LBB460:
 7488              	.LBI460:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7489              		.loc 1 3344 19 is_stmt 1 view .LVU2398
 7490              	.LBB461:
3345:src/display.c ****       }
 7491              		.loc 1 3345 2 view .LVU2399
 7492 00a6 2846     		mov	r0, r5
 7493 00a8 FFF7FEFF 		bl	s_s_sized.constprop.0
 7494              	.LVL838:
 7495              	.L708:
3345:src/display.c ****       }
 7496              		.loc 1 3345 2 is_stmt 0 view .LVU2400
 7497              	.LBE461:
 7498              	.LBE460:
 7499              	.LBE459:
 7500              	.LBE458:
1243:src/display.c **** #endif //top_row
 7501              		.loc 1 1243 5 view .LVU2401
 7502 00ac 17B0     		add	sp, sp, #92
 7503              		.cfi_remember_state
 7504              		.cfi_def_cfa_offset 28
 7505              		@ sp needed
 7506 00ae BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7507              	.LVL839:
 7508              	.L721:
 7509              		.cfi_restore_state
1114:src/display.c **** 	  *p++ = '\007';
 7510              		.loc 1 1114 2 is_stmt 1 view .LVU2402
1114:src/display.c **** 	  *p++ = '\007';
 7511              		.loc 1 1114 6 is_stmt 0 view .LVU2403
 7512 00b2 8F4C     		ldr	r4, .L819+4
 7513 00b4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1114:src/display.c **** 	  *p++ = '\007';
 7514              		.loc 1 1114 5 view .LVU2404
 7515 00b6 9807     		lsls	r0, r3, #30
 7516 00b8 71D4     		bmi	.L813
1120:src/display.c **** 	  *p++ = '\007';
 7517              		.loc 1 1120 7 is_stmt 1 view .LVU2405
1120:src/display.c **** 	  *p++ = '\007';
 7518              		.loc 1 1120 10 is_stmt 0 view .LVU2406
 7519 00ba 202F     		cmp	r7, #32
 7520 00bc 00F03681 		beq	.L733
 7521              	.L734:
1121:src/display.c **** 	  *p++ = '\307';
 7522              		.loc 1 1121 4 is_stmt 1 view .LVU2407
 7523              	.LVL840:
1122:src/display.c **** 	  *p++ = shift_char;
ARM GAS  /tmp/ccZdZ92R.s 			page 234


 7524              		.loc 1 1122 4 view .LVU2408
1121:src/display.c **** 	  *p++ = '\307';
 7525              		.loc 1 1121 9 is_stmt 0 view .LVU2409
 7526 00c0 4CF20772 		movw	r2, #50951
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7527              		.loc 1 1162 5 view .LVU2410
 7528 00c4 5907     		lsls	r1, r3, #29
1123:src/display.c **** 	  goto no_copy;
 7529              		.loc 1 1123 9 view .LVU2411
 7530 00c6 8DF82E70 		strb	r7, [sp, #46]
1121:src/display.c **** 	  *p++ = '\307';
 7531              		.loc 1 1121 9 view .LVU2412
 7532 00ca ADF82C20 		strh	r2, [sp, #44]	@ movhi
1123:src/display.c **** 	  goto no_copy;
 7533              		.loc 1 1123 4 is_stmt 1 view .LVU2413
 7534              	.LVL841:
1124:src/display.c **** 	}
 7535              		.loc 1 1124 4 view .LVU2414
1123:src/display.c **** 	  goto no_copy;
 7536              		.loc 1 1123 6 is_stmt 0 view .LVU2415
 7537 00ce 0DF12F07 		add	r7, sp, #47
 7538              	.LVL842:
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7539              		.loc 1 1162 2 is_stmt 1 view .LVU2416
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7540              		.loc 1 1162 5 is_stmt 0 view .LVU2417
 7541 00d2 73D4     		bmi	.L814
 7542              	.LVL843:
 7543              	.L735:
1164:src/display.c **** 	  decNumber y;
 7544              		.loc 1 1164 9 is_stmt 1 view .LVU2418
1164:src/display.c **** 	  decNumber y;
 7545              		.loc 1 1164 13 is_stmt 0 view .LVU2419
 7546 00d4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
1164:src/display.c **** 	  decNumber y;
 7547              		.loc 1 1164 12 view .LVU2420
 7548 00d6 5A06     		lsls	r2, r3, #25
 7549 00d8 00F18D80 		bmi	.L729
1242:src/display.c ****     }
 7550              		.loc 1 1242 11 is_stmt 1 view .LVU2421
 7551              	.LVL844:
 7552              	.LBB465:
3505:src/display.c **** 	if (no_status_top) return;
 7553              		.loc 1 3505 19 view .LVU2422
 7554              	.LBB464:
3506:src/display.c **** 	if (State2.runmode) {
 7555              		.loc 1 3506 2 view .LVU2423
3506:src/display.c **** 	if (State2.runmode) {
 7556              		.loc 1 3506 6 is_stmt 0 view .LVU2424
 7557 00dc 874A     		ldr	r2, .L819+16
3506:src/display.c **** 	if (State2.runmode) {
 7558              		.loc 1 3506 5 view .LVU2425
 7559 00de B2F90020 		ldrsh	r2, [r2]
 7560 00e2 002A     		cmp	r2, #0
 7561 00e4 E2D1     		bne	.L708
 7562              	.LVL845:
 7563              	.L753:
ARM GAS  /tmp/ccZdZ92R.s 			page 235


3511:src/display.c **** 	}
 7564              		.loc 1 3511 4 is_stmt 1 view .LVU2426
 7565 00e6 1B06     		lsls	r3, r3, #24
 7566 00e8 DCD4     		bmi	.L772
 7567              	.LVL846:
 7568              	.LBB462:
 7569              	.LBI462:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7570              		.loc 1 3492 18 view .LVU2427
 7571              	.LBB463:
3493:src/display.c ****       }
 7572              		.loc 1 3493 2 view .LVU2428
3493:src/display.c ****       }
 7573              		.loc 1 3493 9 is_stmt 0 view .LVU2429
 7574 00ea 0021     		movs	r1, #0
 7575              	.LVL847:
 7576              	.L807:
3493:src/display.c ****       }
 7577              		.loc 1 3493 9 view .LVU2430
 7578 00ec 2846     		mov	r0, r5
 7579 00ee FFF7FEFF 		bl	pixel_length
 7580              	.LVL848:
 7581              	.LBE463:
 7582              	.LBE462:
3511:src/display.c **** 	}
 7583              		.loc 1 3511 4 view .LVU2431
 7584 00f2 2C28     		cmp	r0, #44
 7585 00f4 D4BF     		ite	le
 7586 00f6 0021     		movle	r1, #0
 7587 00f8 0121     		movgt	r1, #1
 7588 00fa D4E7     		b	.L755
 7589              	.LVL849:
 7590              	.L808:
3511:src/display.c **** 	}
 7591              		.loc 1 3511 4 view .LVU2432
 7592              	.LBE464:
 7593              	.LBE465:
1004:src/display.c **** 	    *p++ = '\006';
 7594              		.loc 1 1004 6 is_stmt 1 view .LVU2433
1005:src/display.c **** 	  }
 7595              		.loc 1 1005 11 is_stmt 0 view .LVU2434
 7596 00fc 0623     		movs	r3, #6
 7597 00fe 8DF82D30 		strb	r3, [sp, #45]
1004:src/display.c **** 	    *p++ = '\006';
 7598              		.loc 1 1004 11 view .LVU2435
 7599 0102 8DF82C70 		strb	r7, [sp, #44]
1005:src/display.c **** 	  }
 7600              		.loc 1 1005 6 is_stmt 1 view .LVU2436
 7601              	.LVL850:
1008:src/display.c **** 	default:
 7602              		.loc 1 1008 2 view .LVU2437
1008:src/display.c **** 	default:
 7603              		.loc 1 1008 9 is_stmt 0 view .LVU2438
 7604 0106 FFF7FEFF 		bl	int_mode
 7605              	.LVL851:
 7606 010a 0138     		subs	r0, r0, #1
 7607 010c C0B2     		uxtb	r0, r0
ARM GAS  /tmp/ccZdZ92R.s 			page 236


 7608 010e 0228     		cmp	r0, #2
 7609 0110 96BF     		itet	ls
 7610 0112 7B4B     		ldrls	r3, .L819+20
 7611 0114 7B49     		ldrhi	r1, .L819+24
 7612 0116 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7613              	.LVL852:
1015:src/display.c **** 	*q++ = '\006';
 7614              		.loc 1 1015 2 is_stmt 1 view .LVU2439
1015:src/display.c **** 	*q++ = '\006';
 7615              		.loc 1 1015 6 is_stmt 0 view .LVU2440
 7616 011a 0DF12E00 		add	r0, sp, #46
 7617              	.LVL853:
1015:src/display.c **** 	*q++ = '\006';
 7618              		.loc 1 1015 6 view .LVU2441
 7619 011e FFF7FEFF 		bl	scopy
 7620              	.LVL854:
1016:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7621              		.loc 1 1016 7 view .LVU2442
 7622 0122 0646     		mov	r6, r0
 7623 0124 0623     		movs	r3, #6
 7624 0126 06F8013B 		strb	r3, [r6], #1
1015:src/display.c **** 	*q++ = '\006';
 7625              		.loc 1 1015 6 view .LVU2443
 7626 012a 0446     		mov	r4, r0
 7627              	.LVL855:
1016:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7628              		.loc 1 1016 2 is_stmt 1 view .LVU2444
1017:src/display.c **** 
 7629              		.loc 1 1017 2 view .LVU2445
1017:src/display.c **** 
 7630              		.loc 1 1017 6 is_stmt 0 view .LVU2446
 7631 012c FFF7FEFF 		bl	word_size
 7632              	.LVL856:
 7633 0130 0146     		mov	r1, r0
 7634 0132 3046     		mov	r0, r6
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7635              		.loc 1 1019 19 view .LVU2447
 7636 0134 744E     		ldr	r6, .L819+28
 7637              	.LVL857:
1017:src/display.c **** 
 7638              		.loc 1 1017 6 view .LVU2448
 7639 0136 0222     		movs	r2, #2
 7640 0138 FFF7FEFF 		bl	num_arg_0
 7641              	.LVL858:
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7642              		.loc 1 1019 19 view .LVU2449
 7643 013c 3368     		ldr	r3, [r6]
 7644              	.LVL859:
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7645              		.loc 1 1019 2 is_stmt 1 view .LVU2450
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7646              		.loc 1 1019 5 is_stmt 0 view .LVU2451
 7647 013e 002B     		cmp	r3, #0
 7648 0140 A6DD     		ble	.L712
1020:src/display.c **** 	  if (*q == '1')
 7649              		.loc 1 1020 4 is_stmt 1 view .LVU2452
1020:src/display.c **** 	  if (*q == '1')
ARM GAS  /tmp/ccZdZ92R.s 			page 237


 7650              		.loc 1 1020 10 is_stmt 0 view .LVU2453
 7651 0142 C3F10702 		rsb	r2, r3, #7
 7652 0146 5200     		lsls	r2, r2, #1
1020:src/display.c **** 	  if (*q == '1')
 7653              		.loc 1 1020 6 view .LVU2454
 7654 0148 0192     		str	r2, [sp, #4]
1021:src/display.c **** 	    n += 2;
 7655              		.loc 1 1021 4 is_stmt 1 view .LVU2455
1021:src/display.c **** 	    n += 2;
 7656              		.loc 1 1021 7 is_stmt 0 view .LVU2456
 7657 014a 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7658 014c 3129     		cmp	r1, #49
1022:src/display.c **** 	  if (q[1] == '1')
 7659              		.loc 1 1022 6 is_stmt 1 view .LVU2457
1022:src/display.c **** 	  if (q[1] == '1')
 7660              		.loc 1 1022 8 is_stmt 0 view .LVU2458
 7661 014e 04BF     		itt	eq
 7662 0150 0232     		addeq	r2, r2, #2
 7663 0152 0192     		streq	r2, [sp, #4]
1023:src/display.c **** 	    n += 2;
 7664              		.loc 1 1023 4 is_stmt 1 view .LVU2459
1023:src/display.c **** 	    n += 2;
 7665              		.loc 1 1023 7 is_stmt 0 view .LVU2460
 7666 0154 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7667 0156 3129     		cmp	r1, #49
 7668 0158 00D1     		bne	.L714
1024:src/display.c **** 	  while (n-- > 0)
 7669              		.loc 1 1024 6 is_stmt 1 view .LVU2461
1024:src/display.c **** 	  while (n-- > 0)
 7670              		.loc 1 1024 8 is_stmt 0 view .LVU2462
 7671 015a 0232     		adds	r2, r2, #2
 7672              	.L714:
1025:src/display.c **** 	    *p++ = '\006';
 7673              		.loc 1 1025 10 is_stmt 1 view .LVU2463
1025:src/display.c **** 	    *p++ = '\006';
 7674              		.loc 1 1025 12 is_stmt 0 view .LVU2464
 7675 015c 511E     		subs	r1, r2, #1
1025:src/display.c **** 	    *p++ = '\006';
 7676              		.loc 1 1025 10 view .LVU2465
 7677 015e 002A     		cmp	r2, #0
1025:src/display.c **** 	    *p++ = '\006';
 7678              		.loc 1 1025 12 view .LVU2466
 7679 0160 0191     		str	r1, [sp, #4]
1025:src/display.c **** 	    *p++ = '\006';
 7680              		.loc 1 1025 10 view .LVU2467
 7681 0162 40F35181 		ble	.L805
1026:src/display.c **** 
 7682              		.loc 1 1026 11 view .LVU2468
 7683 0166 0621     		movs	r1, #6
 7684              	.L715:
1026:src/display.c **** 
 7685              		.loc 1 1026 6 is_stmt 1 view .LVU2469
 7686              	.LVL860:
1026:src/display.c **** 
 7687              		.loc 1 1026 11 is_stmt 0 view .LVU2470
 7688 0168 00F8011B 		strb	r1, [r0], #1
 7689              	.LVL861:
ARM GAS  /tmp/ccZdZ92R.s 			page 238


1025:src/display.c **** 	    *p++ = '\006';
 7690              		.loc 1 1025 10 is_stmt 1 view .LVU2471
1025:src/display.c **** 	    *p++ = '\006';
 7691              		.loc 1 1025 12 is_stmt 0 view .LVU2472
 7692 016c 019B     		ldr	r3, [sp, #4]
 7693 016e 5A1E     		subs	r2, r3, #1
1025:src/display.c **** 	    *p++ = '\006';
 7694              		.loc 1 1025 10 view .LVU2473
 7695 0170 002B     		cmp	r3, #0
1025:src/display.c **** 	    *p++ = '\006';
 7696              		.loc 1 1025 12 view .LVU2474
 7697 0172 0192     		str	r2, [sp, #4]
1025:src/display.c **** 	    *p++ = '\006';
 7698              		.loc 1 1025 10 view .LVU2475
 7699 0174 F8DC     		bgt	.L715
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7700              		.loc 1 1028 4 is_stmt 1 view .LVU2476
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7701              		.loc 1 1028 11 is_stmt 0 view .LVU2477
 7702 0176 3368     		ldr	r3, [r6]
 7703 0178 0193     		str	r3, [sp, #4]
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7704              		.loc 1 1028 27 is_stmt 1 view .LVU2478
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7705              		.loc 1 1028 4 is_stmt 0 view .LVU2479
 7706 017a 002B     		cmp	r3, #0
 7707 017c 88DB     		blt	.L712
 7708              	.L757:
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7709              		.loc 1 1028 4 view .LVU2480
 7710 017e 5C4C     		ldr	r4, .L819+4
 7711              	.LVL862:
 7712              	.L720:
1029:src/display.c **** 	}
 7713              		.loc 1 1029 6 is_stmt 1 view .LVU2481
1029:src/display.c **** 	}
 7714              		.loc 1 1029 19 is_stmt 0 view .LVU2482
 7715 0180 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7716 0182 C2F3C202 		ubfx	r2, r2, #3, #3
1029:src/display.c **** 	}
 7717              		.loc 1 1029 11 view .LVU2483
 7718 0186 9A42     		cmp	r2, r3
 7719 0188 0CBF     		ite	eq
 7720 018a 7C23     		moveq	r3, #124
 7721 018c 2723     		movne	r3, #39
 7722              	.LVL863:
1029:src/display.c **** 	}
 7723              		.loc 1 1029 11 view .LVU2484
 7724 018e 00F8013B 		strb	r3, [r0], #1
 7725              	.LVL864:
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7726              		.loc 1 1028 35 is_stmt 1 view .LVU2485
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7727              		.loc 1 1028 36 is_stmt 0 view .LVU2486
 7728 0192 019B     		ldr	r3, [sp, #4]
 7729 0194 013B     		subs	r3, r3, #1
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccZdZ92R.s 			page 239


 7730              		.loc 1 1028 4 view .LVU2487
 7731 0196 002B     		cmp	r3, #0
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7732              		.loc 1 1028 36 view .LVU2488
 7733 0198 0193     		str	r3, [sp, #4]
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7734              		.loc 1 1028 27 is_stmt 1 view .LVU2489
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7735              		.loc 1 1028 4 is_stmt 0 view .LVU2490
 7736 019a F1DA     		bge	.L720
 7737 019c 78E7     		b	.L712
 7738              	.LVL865:
 7739              	.L813:
1115:src/display.c **** 	  *p++ = '\344';
 7740              		.loc 1 1115 4 is_stmt 1 view .LVU2491
1116:src/display.c **** 	  *p++ = shift_char;
 7741              		.loc 1 1116 4 view .LVU2492
1115:src/display.c **** 	  *p++ = '\344';
 7742              		.loc 1 1115 9 is_stmt 0 view .LVU2493
 7743 019e 4EF20743 		movw	r3, #58375
1118:src/display.c **** 	}
 7744              		.loc 1 1118 6 view .LVU2494
 7745 01a2 5A49     		ldr	r1, .L819+32
1117:src/display.c **** 	  q = "\024";
 7746              		.loc 1 1117 9 view .LVU2495
 7747 01a4 8DF82E70 		strb	r7, [sp, #46]
1115:src/display.c **** 	  *p++ = '\344';
 7748              		.loc 1 1115 9 view .LVU2496
 7749 01a8 ADF82C30 		strh	r3, [sp, #44]	@ movhi
1117:src/display.c **** 	  q = "\024";
 7750              		.loc 1 1117 4 is_stmt 1 view .LVU2497
 7751              	.LVL866:
1118:src/display.c **** 	}
 7752              		.loc 1 1118 4 view .LVU2498
1117:src/display.c **** 	  q = "\024";
 7753              		.loc 1 1117 6 is_stmt 0 view .LVU2499
 7754 01ac 0DF12F00 		add	r0, sp, #47
 7755              	.LVL867:
 7756              	.L732:
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7757              		.loc 1 1157 2 is_stmt 1 view .LVU2500
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7758              		.loc 1 1157 6 is_stmt 0 view .LVU2501
 7759 01b0 FFF7FEFF 		bl	scopy
 7760              	.LVL868:
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7761              		.loc 1 1157 6 view .LVU2502
 7762 01b4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7763              		.loc 1 1162 5 view .LVU2503
 7764 01b6 5907     		lsls	r1, r3, #29
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7765              		.loc 1 1157 6 view .LVU2504
 7766 01b8 0746     		mov	r7, r0
 7767              	.LVL869:
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7768              		.loc 1 1162 2 is_stmt 1 view .LVU2505
ARM GAS  /tmp/ccZdZ92R.s 			page 240


1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7769              		.loc 1 1162 5 is_stmt 0 view .LVU2506
 7770 01ba 8BD5     		bpl	.L735
 7771              	.LVL870:
 7772              	.L814:
1163:src/display.c **** 	} else if (State2.runmode) {
 7773              		.loc 1 1163 4 is_stmt 1 view .LVU2507
 7774 01bc 5449     		ldr	r1, .L819+36
 7775 01be 3846     		mov	r0, r7
 7776 01c0 FFF7FEFF 		bl	scopy
 7777              	.LVL871:
 7778 01c4 64E7     		b	.L712
 7779              	.LVL872:
 7780              	.L810:
1064:src/display.c **** 	  *p = '\015';
 7781              		.loc 1 1064 4 view .LVU2508
1064:src/display.c **** 	  *p = '\015';
 7782              		.loc 1 1064 9 is_stmt 0 view .LVU2509
 7783 01c6 2022     		movs	r2, #32
1065:src/display.c **** 	  goto skip;
 7784              		.loc 1 1065 7 view .LVU2510
 7785 01c8 0D23     		movs	r3, #13
1064:src/display.c **** 	  *p = '\015';
 7786              		.loc 1 1064 9 view .LVU2511
 7787 01ca 0270     		strb	r2, [r0]
1065:src/display.c **** 	  goto skip;
 7788              		.loc 1 1065 4 is_stmt 1 view .LVU2512
1065:src/display.c **** 	  goto skip;
 7789              		.loc 1 1065 7 is_stmt 0 view .LVU2513
 7790 01cc 4370     		strb	r3, [r0, #1]
1066:src/display.c **** 	}
 7791              		.loc 1 1066 4 is_stmt 1 view .LVU2514
 7792 01ce 5FE7     		b	.L712
 7793              	.LVL873:
 7794              	.L811:
1069:src/display.c **** 	  if (State2.wascomplex) {
 7795              		.loc 1 1069 28 is_stmt 0 discriminator 1 view .LVU2515
 7796 01d0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
1069:src/display.c **** 	  if (State2.wascomplex) {
 7797              		.loc 1 1069 24 discriminator 1 view .LVU2516
 7798 01d2 13F0C00F 		tst	r3, #192
 7799 01d6 40F01981 		bne	.L760
1069:src/display.c **** 	  if (State2.wascomplex) {
 7800              		.loc 1 1069 60 discriminator 2 view .LVU2517
 7801 01da 4E4B     		ldr	r3, .L819+40
 7802 01dc 1B68     		ldr	r3, [r3]
1069:src/display.c **** 	  if (State2.wascomplex) {
 7803              		.loc 1 1069 46 discriminator 2 view .LVU2518
 7804 01de 002B     		cmp	r3, #0
 7805 01e0 3FF440AF 		beq	.L727
1070:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 7806              		.loc 1 1070 4 is_stmt 1 view .LVU2519
1073:src/display.c **** 	    if (RectPolConv == 1) {
 7807              		.loc 1 1073 9 view .LVU2520
1074:src/display.c **** 	      q = "\007\306<";
 7808              		.loc 1 1074 6 view .LVU2521
1078:src/display.c **** 	    }
ARM GAS  /tmp/ccZdZ92R.s 			page 241


 7809              		.loc 1 1078 10 is_stmt 0 view .LVU2522
 7810 01e4 4C49     		ldr	r1, .L819+44
 7811 01e6 4D4A     		ldr	r2, .L819+48
 7812 01e8 012B     		cmp	r3, #1
 7813 01ea 18BF     		it	ne
 7814 01ec 1146     		movne	r1, r2
 7815              	.L728:
 7816              	.LVL874:
1081:src/display.c **** 
 7817              		.loc 1 1081 4 is_stmt 1 view .LVU2523
1081:src/display.c **** 
 7818              		.loc 1 1081 8 is_stmt 0 view .LVU2524
 7819 01ee 2846     		mov	r0, r5
 7820              	.LVL875:
1081:src/display.c **** 
 7821              		.loc 1 1081 8 view .LVU2525
 7822 01f0 FFF7FEFF 		bl	scopy
 7823              	.LVL876:
1081:src/display.c **** 
 7824              		.loc 1 1081 8 view .LVU2526
 7825 01f4 0746     		mov	r7, r0
 7826              	.LVL877:
1083:src/display.c **** 	}
 7827              		.loc 1 1083 4 is_stmt 1 view .LVU2527
 7828              	.L729:
 7829              	.LBB466:
1165:src/display.c **** 	display_yreg:
 7830              		.loc 1 1165 4 view .LVU2528
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7831              		.loc 1 1172 4 view .LVU2529
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7832              		.loc 1 1172 34 is_stmt 0 view .LVU2530
 7833 01f6 DFF83091 		ldr	r9, .L819+60
 7834 01fa D9F80010 		ldr	r1, [r9]
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7835              		.loc 1 1172 4 view .LVU2531
 7836 01fe 6329     		cmp	r1, #99
 7837 0200 00F3EE80 		bgt	.L815
 7838              	.L737:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7839              		.loc 1 1172 4 discriminator 5 view .LVU2532
 7840 0204 0131     		adds	r1, r1, #1
 7841              	.L741:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7842              		.loc 1 1172 4 discriminator 6 view .LVU2533
 7843 0206 02A8     		add	r0, sp, #8
 7844 0208 FFF7FEFF 		bl	getRegister
 7845              	.LVL878:
1175:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7846              		.loc 1 1175 4 is_stmt 1 discriminator 6 view .LVU2534
1175:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7847              		.loc 1 1175 7 is_stmt 0 discriminator 6 view .LVU2535
 7848 020c 9DF81010 		ldrb	r1, [sp, #16]	@ zero_extendqisi2
 7849 0210 11F07001 		ands	r1, r1, #112
 7850 0214 41D1     		bne	.L743
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7851              		.loc 1 1176 6 is_stmt 1 view .LVU2536
ARM GAS  /tmp/ccZdZ92R.s 			page 242


1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7852              		.loc 1 1176 19 is_stmt 0 view .LVU2537
 7853 0216 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7854              		.loc 1 1176 9 view .LVU2538
 7855 0218 13F0010F 		tst	r3, #1
 7856              	.LBB467:
1177:src/display.c **** 
 7857              		.loc 1 1177 44 view .LVU2539
 7858 021c D8F80030 		ldr	r3, [r8]
 7859              	.LBE467:
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7860              		.loc 1 1176 9 view .LVU2540
 7861 0220 40F0AE80 		bne	.L816
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7862              		.loc 1 1197 6 is_stmt 1 view .LVU2541
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7863              		.loc 1 1197 21 is_stmt 0 view .LVU2542
 7864 0224 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7865              		.loc 1 1197 9 view .LVU2543
 7866 0228 9E06     		lsls	r6, r3, #26
 7867 022a 36D5     		bpl	.L743
1199:src/display.c **** #endif
 7868              		.loc 1 1199 6 view .LVU2544
 7869 022c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1199:src/display.c **** #endif
 7870              		.loc 1 1199 3 view .LVU2545
 7871 022e 13F00204 		ands	r4, r3, #2
 7872 0232 32D1     		bne	.L743
1202:src/display.c **** #endif
 7873              		.loc 1 1202 6 view .LVU2546
 7874 0234 374B     		ldr	r3, .L819+40
1202:src/display.c **** #endif
 7875              		.loc 1 1202 3 view .LVU2547
 7876 0236 1B68     		ldr	r3, [r3]
 7877 0238 012B     		cmp	r3, #1
 7878 023a 2ED0     		beq	.L743
1204:src/display.c **** 	      char ltgteq;
 7879              		.loc 1 1204 6 view .LVU2548
 7880 023c 3946     		mov	r1, r7
 7881 023e 02A8     		add	r0, sp, #8
 7882 0240 FFF7FEFF 		bl	set_x_fract
 7883              	.LVL879:
1204:src/display.c **** 	      char ltgteq;
 7884              		.loc 1 1204 3 view .LVU2549
 7885 0244 48B3     		cbz	r0, .L743
 7886              	.LBB468:
1205:src/display.c **** 
 7887              		.loc 1 1205 8 is_stmt 1 view .LVU2550
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7888              		.loc 1 1207 8 view .LVU2551
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7889              		.loc 1 1207 12 is_stmt 0 view .LVU2552
 7890 0246 2146     		mov	r1, r4
 7891 0248 2846     		mov	r0, r5
 7892 024a FFF7FEFF 		bl	find_char
ARM GAS  /tmp/ccZdZ92R.s 			page 243


 7893              	.LVL880:
 7894 024e 0446     		mov	r4, r0
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7895              		.loc 1 1207 10 view .LVU2553
 7896 0250 0238     		subs	r0, r0, #2
 7897              	.LVL881:
1209:src/display.c **** 	      switch (ltgteq) {
 7898              		.loc 1 1209 8 is_stmt 1 view .LVU2554
1209:src/display.c **** 	      switch (ltgteq) {
 7899              		.loc 1 1209 15 is_stmt 0 view .LVU2555
 7900 0252 14F8026C 		ldrb	r6, [r4, #-2]	@ zero_extendqisi2
 7901              	.LVL882:
1210:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7902              		.loc 1 1210 8 is_stmt 1 view .LVU2556
 7903 0256 472E     		cmp	r6, #71
 7904 0258 00F0E680 		beq	.L769
1212:src/display.c **** 	      }
 7905              		.loc 1 1212 25 is_stmt 0 view .LVU2557
 7906 025c 4C2E     		cmp	r6, #76
 7907 025e 08BF     		it	eq
 7908 0260 3C26     		moveq	r6, #60
 7909              	.LVL883:
 7910              	.L748:
1214:src/display.c **** 	      q[2] = ltgteq;
 7911              		.loc 1 1214 8 is_stmt 1 view .LVU2558
 7912 0262 2F49     		ldr	r1, .L819+52
 7913 0264 FFF7FEFF 		bl	scopy
 7914              	.LVL884:
1215:src/display.c **** 
 7915              		.loc 1 1215 8 view .LVU2559
1215:src/display.c **** 
 7916              		.loc 1 1215 13 is_stmt 0 view .LVU2560
 7917 0268 2670     		strb	r6, [r4]
1217:src/display.c **** 		goto skip;
 7918              		.loc 1 1217 8 is_stmt 1 view .LVU2561
1217:src/display.c **** 		goto skip;
 7919              		.loc 1 1217 12 is_stmt 0 view .LVU2562
 7920 026a 0121     		movs	r1, #1
 7921 026c 2846     		mov	r0, r5
 7922 026e FFF7FEFF 		bl	pixel_length
 7923              	.LVL885:
1217:src/display.c **** 		goto skip;
 7924              		.loc 1 1217 11 view .LVU2563
 7925 0272 2C28     		cmp	r0, #44
 7926 0274 7FF70CAF 		ble	.L712
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7927              		.loc 1 1220 8 is_stmt 1 view .LVU2564
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7928              		.loc 1 1220 14 is_stmt 0 view .LVU2565
 7929 0278 0026     		movs	r6, #0
 7930              	.LVL886:
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7931              		.loc 1 1220 14 view .LVU2566
 7932 027a 04F8036C 		strb	r6, [r4, #-3]
1221:src/display.c **** 		goto skip;
 7933              		.loc 1 1221 8 is_stmt 1 view .LVU2567
1221:src/display.c **** 		goto skip;
ARM GAS  /tmp/ccZdZ92R.s 			page 244


 7934              		.loc 1 1221 12 is_stmt 0 view .LVU2568
 7935 027e 0121     		movs	r1, #1
 7936 0280 2846     		mov	r0, r5
 7937 0282 FFF7FEFF 		bl	pixel_length
 7938              	.LVL887:
1221:src/display.c **** 		goto skip;
 7939              		.loc 1 1221 11 view .LVU2569
 7940 0286 2C28     		cmp	r0, #44
 7941 0288 7FF702AF 		ble	.L712
1224:src/display.c **** 	    }
 7942              		.loc 1 1224 8 is_stmt 1 view .LVU2570
1224:src/display.c **** 	    }
 7943              		.loc 1 1224 39 is_stmt 0 view .LVU2571
 7944 028c 7A1B     		subs	r2, r7, r5
1224:src/display.c **** 	    }
 7945              		.loc 1 1224 8 view .LVU2572
 7946 028e 3146     		mov	r1, r6
 7947 0290 C2F12A02 		rsb	r2, r2, #42
 7948 0294 3846     		mov	r0, r7
 7949 0296 FFF7FEFF 		bl	xset
 7950              	.LVL888:
 7951              	.L743:
1224:src/display.c **** 	    }
 7952              		.loc 1 1224 8 view .LVU2573
 7953              	.LBE468:
1227:src/display.c **** 	    int extra_pixels;
 7954              		.loc 1 1227 4 is_stmt 1 view .LVU2574
1227:src/display.c **** 	    int extra_pixels;
 7955              		.loc 1 1227 10 is_stmt 0 view .LVU2575
 7956 029a 0C23     		movs	r3, #12
 7957 029c 0193     		str	r3, [sp, #4]
1227:src/display.c **** 	    int extra_pixels;
 7958              		.loc 1 1227 27 is_stmt 1 view .LVU2576
 7959 029e 0FE0     		b	.L750
 7960              	.LVL889:
 7961              	.L817:
 7962              	.LBB469:
1235:src/display.c **** 
 7963              		.loc 1 1235 6 is_stmt 0 view .LVU2577
 7964 02a0 019A     		ldr	r2, [sp, #4]
 7965 02a2 0A32     		adds	r2, r2, #10
 7966 02a4 FFF7FEFF 		bl	xset
 7967              	.LVL890:
1237:src/display.c **** 	  }
 7968              		.loc 1 1237 6 is_stmt 1 view .LVU2578
1237:src/display.c **** 	  }
 7969              		.loc 1 1237 30 is_stmt 0 view .LVU2579
 7970 02a8 B4F12902 		subs	r2, r4, #41
1237:src/display.c **** 	  }
 7971              		.loc 1 1237 8 view .LVU2580
 7972 02ac 019B     		ldr	r3, [sp, #4]
1237:src/display.c **** 	  }
 7973              		.loc 1 1237 30 view .LVU2581
 7974 02ae 48BF     		it	mi
 7975 02b0 A4F12602 		submi	r2, r4, #38
1237:src/display.c **** 	  }
 7976              		.loc 1 1237 8 view .LVU2582
ARM GAS  /tmp/ccZdZ92R.s 			page 245


 7977 02b4 A3EBA203 		sub	r3, r3, r2, asr #2
 7978              	.LBE469:
1227:src/display.c **** 	    int extra_pixels;
 7979              		.loc 1 1227 4 view .LVU2583
 7980 02b8 012B     		cmp	r3, #1
 7981              	.LBB470:
1237:src/display.c **** 	  }
 7982              		.loc 1 1237 8 view .LVU2584
 7983 02ba 0193     		str	r3, [sp, #4]
 7984              	.LBE470:
1227:src/display.c **** 	    int extra_pixels;
 7985              		.loc 1 1227 27 is_stmt 1 view .LVU2585
1227:src/display.c **** 	    int extra_pixels;
 7986              		.loc 1 1227 4 is_stmt 0 view .LVU2586
 7987 02bc 7FF7E8AE 		ble	.L712
 7988              	.LVL891:
 7989              	.L750:
 7990              	.LBB471:
1228:src/display.c **** 
 7991              		.loc 1 1228 6 is_stmt 1 view .LVU2587
1230:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
 7992              		.loc 1 1230 6 view .LVU2588
 7993 02c0 01AA     		add	r2, sp, #4
 7994 02c2 3946     		mov	r1, r7
 7995 02c4 02A8     		add	r0, sp, #8
 7996 02c6 FFF7FEFF 		bl	set_x_dn
 7997              	.LVL892:
1231:src/display.c **** 	    if (extra_pixels <= 0)
 7998              		.loc 1 1231 6 view .LVU2589
1231:src/display.c **** 	    if (extra_pixels <= 0)
 7999              		.loc 1 1231 21 is_stmt 0 view .LVU2590
 8000 02ca 0121     		movs	r1, #1
 8001 02cc 2846     		mov	r0, r5
 8002 02ce FFF7FEFF 		bl	pixel_length
 8003              	.LVL893:
1235:src/display.c **** 
 8004              		.loc 1 1235 6 is_stmt 1 view .LVU2591
1231:src/display.c **** 	    if (extra_pixels <= 0)
 8005              		.loc 1 1231 21 is_stmt 0 view .LVU2592
 8006 02d2 0446     		mov	r4, r0
 8007              	.LVL894:
1232:src/display.c **** 	      break;
 8008              		.loc 1 1232 6 is_stmt 1 view .LVU2593
1232:src/display.c **** 	      break;
 8009              		.loc 1 1232 9 is_stmt 0 view .LVU2594
 8010 02d4 2C2C     		cmp	r4, #44
1235:src/display.c **** 
 8011              		.loc 1 1235 6 view .LVU2595
 8012 02d6 4FF00001 		mov	r1, #0
 8013 02da 3846     		mov	r0, r7
 8014              	.LVL895:
1232:src/display.c **** 	      break;
 8015              		.loc 1 1232 9 view .LVU2596
 8016 02dc E0DC     		bgt	.L817
 8017              	.LVL896:
1232:src/display.c **** 	      break;
 8018              		.loc 1 1232 9 view .LVU2597
ARM GAS  /tmp/ccZdZ92R.s 			page 246


 8019              	.LBE471:
 8020 02de D7E6     		b	.L712
 8021              	.LVL897:
 8022              	.L809:
1232:src/display.c **** 	      break;
 8023              		.loc 1 1232 9 view .LVU2598
 8024              	.LBE466:
1059:src/display.c **** 	  *p = '\024';
 8025              		.loc 1 1059 4 is_stmt 1 view .LVU2599
1059:src/display.c **** 	  *p = '\024';
 8026              		.loc 1 1059 9 is_stmt 0 view .LVU2600
 8027 02e0 2022     		movs	r2, #32
1060:src/display.c **** 	  goto skip;
 8028              		.loc 1 1060 7 view .LVU2601
 8029 02e2 1423     		movs	r3, #20
1059:src/display.c **** 	  *p = '\024';
 8030              		.loc 1 1059 9 view .LVU2602
 8031 02e4 0270     		strb	r2, [r0]
1060:src/display.c **** 	  goto skip;
 8032              		.loc 1 1060 4 is_stmt 1 view .LVU2603
1060:src/display.c **** 	  goto skip;
 8033              		.loc 1 1060 7 is_stmt 0 view .LVU2604
 8034 02e6 4370     		strb	r3, [r0, #1]
1061:src/display.c **** 	}
 8035              		.loc 1 1061 4 is_stmt 1 view .LVU2605
 8036 02e8 D2E6     		b	.L712
 8037              	.L820:
 8038 02ea 00BF     		.align	2
 8039              	.L819:
 8040 02ec 00000000 		.word	.LANCHOR15
 8041 02f0 00000000 		.word	StateWhileOn
 8042 02f4 10000000 		.word	.LC7
 8043 02f8 1C000000 		.word	.LC9
 8044 02fc 00000000 		.word	.LANCHOR18
 8045 0300 00000000 		.word	.LANCHOR16
 8046 0304 00000000 		.word	.LC3
 8047 0308 00000000 		.word	IntMaxWindow
 8048 030c 24000000 		.word	.LC10
 8049 0310 44000000 		.word	.LC17
 8050 0314 00000000 		.word	RectPolConv
 8051 0318 04000000 		.word	.LC4
 8052 031c 0C000000 		.word	.LC6
 8053 0320 4C000000 		.word	.LC19
 8054 0324 00000000 		.word	main_ram
 8055 0328 00000000 		.word	ShowRegister
 8056              	.LVL898:
 8057              	.L733:
1128:src/display.c **** 	    q = "\007\207i";
 8058              		.loc 1 1128 4 view .LVU2606
1128:src/display.c **** 	    q = "\007\207i";
 8059              		.loc 1 1128 8 is_stmt 0 view .LVU2607
 8060 032c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
1128:src/display.c **** 	    q = "\007\207i";
 8061              		.loc 1 1128 7 view .LVU2608
 8062 032e 13F0C00F 		tst	r3, #192
 8063 0332 1DD1     		bne	.L764
1131:src/display.c **** 	    q = "\007\307<";
ARM GAS  /tmp/ccZdZ92R.s 			page 247


 8064              		.loc 1 1131 9 is_stmt 1 view .LVU2609
1131:src/display.c **** 	    q = "\007\307<";
 8065              		.loc 1 1131 23 is_stmt 0 view .LVU2610
 8066 0334 3D4B     		ldr	r3, .L821
 8067 0336 1B68     		ldr	r3, [r3]
1131:src/display.c **** 	    q = "\007\307<";
 8068              		.loc 1 1131 12 view .LVU2611
 8069 0338 012B     		cmp	r3, #1
 8070 033a 6CD0     		beq	.L765
1134:src/display.c **** 	    q = "\007\307y";
 8071              		.loc 1 1134 9 is_stmt 1 view .LVU2612
1134:src/display.c **** 	    q = "\007\307y";
 8072              		.loc 1 1134 12 is_stmt 0 view .LVU2613
 8073 033c 022B     		cmp	r3, #2
 8074 033e 67D0     		beq	.L766
1138:src/display.c **** 	    q = "\007\207\007";
 8075              		.loc 1 1138 9 is_stmt 1 view .LVU2614
1138:src/display.c **** 	    q = "\007\207\007";
 8076              		.loc 1 1138 13 is_stmt 0 view .LVU2615
 8077 0340 FFF7FEFF 		bl	get_trig_mode
 8078              	.LVL899:
1138:src/display.c **** 	    q = "\007\207\007";
 8079              		.loc 1 1138 12 view .LVU2616
 8080 0344 0228     		cmp	r0, #2
 8081 0346 6CD0     		beq	.L767
1144:src/display.c **** #else
 8082              		.loc 1 1144 6 is_stmt 1 view .LVU2617
1144:src/display.c **** #else
 8083              		.loc 1 1144 11 is_stmt 0 view .LVU2618
 8084 0348 FFF7FEFF 		bl	is_dblmode
 8085              	.LVL900:
1144:src/display.c **** #else
 8086              		.loc 1 1144 38 view .LVU2619
 8087 034c 384B     		ldr	r3, .L821+4
 8088 034e 3949     		ldr	r1, .L821+8
 8089 0350 0028     		cmp	r0, #0
 8090 0352 18BF     		it	ne
 8091 0354 1946     		movne	r1, r3
 8092 0356 2846     		mov	r0, r5
 8093 0358 2AE7     		b	.L732
 8094              	.L722:
1050:src/display.c **** 	    *p++ = shift_char;
 8095              		.loc 1 1050 30 discriminator 1 view .LVU2620
 8096 035a FFF7FEFF 		bl	is_dblmode
 8097              	.LVL901:
1050:src/display.c **** 	    *p++ = shift_char;
 8098              		.loc 1 1050 26 discriminator 1 view .LVU2621
 8099 035e 0028     		cmp	r0, #0
 8100 0360 3FF46EAE 		beq	.L724
1055:src/display.c **** 	  }
 8101              		.loc 1 1055 6 is_stmt 1 view .LVU2622
 8102              	.LVL902:
1055:src/display.c **** 	  }
 8103              		.loc 1 1055 11 is_stmt 0 view .LVU2623
 8104 0364 4423     		movs	r3, #68
 8105 0366 8DF82C30 		strb	r3, [sp, #44]
1055:src/display.c **** 	  }
ARM GAS  /tmp/ccZdZ92R.s 			page 248


 8106              		.loc 1 1055 8 view .LVU2624
 8107 036a 0DF12D00 		add	r0, sp, #45
 8108              	.LVL903:
1055:src/display.c **** 	  }
 8109              		.loc 1 1055 8 view .LVU2625
 8110 036e 6EE6     		b	.L723
 8111              	.LVL904:
 8112              	.L764:
1129:src/display.c **** 	  }
 8113              		.loc 1 1129 8 view .LVU2626
 8114 0370 3149     		ldr	r1, .L821+12
 950:src/display.c ****       int n;
 8115              		.loc 1 950 22 view .LVU2627
 8116 0372 2846     		mov	r0, r5
 8117 0374 1CE7     		b	.L732
 8118              	.LVL905:
 8119              	.L812:
1103:src/display.c **** 	}
 8120              		.loc 1 1103 4 is_stmt 1 view .LVU2628
 8121 0376 3149     		ldr	r1, .L821+16
 8122 0378 2046     		mov	r0, r4
 8123 037a FFF7FEFF 		bl	scopy
 8124              	.LVL906:
 8125 037e 87E6     		b	.L712
 8126              	.LVL907:
 8127              	.L816:
 8128              	.LBB474:
 8129              	.LBB472:
1177:src/display.c **** 
 8130              		.loc 1 1177 8 view .LVU2629
1179:src/display.c **** 	      UState.nothousands = 1;
 8131              		.loc 1 1179 8 is_stmt 0 view .LVU2630
 8132 0380 2A22     		movs	r2, #42
 8133 0382 2846     		mov	r0, r5
1177:src/display.c **** 
 8134              		.loc 1 1177 44 view .LVU2631
 8135 0384 93F8E767 		ldrb	r6, [r3, #2023]	@ zero_extendqisi2
 8136 0388 2D4C     		ldr	r4, .L821+20
1179:src/display.c **** 	      UState.nothousands = 1;
 8137              		.loc 1 1179 8 view .LVU2632
 8138 038a FFF7FEFF 		bl	xset
 8139              	.LVL908:
1180:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8140              		.loc 1 1180 27 view .LVU2633
 8141 038e D8F80020 		ldr	r2, [r8]
 8142 0392 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8143 0396 43F04003 		orr	r3, r3, #64
 8144 039a 82F8E737 		strb	r3, [r2, #2023]
1181:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8145              		.loc 1 1181 8 view .LVU2634
 8146 039e 2946     		mov	r1, r5
 8147 03a0 02A8     		add	r0, sp, #8
 8148 03a2 FFF7FEFF 		bl	set_x_hms
 8149              	.LVL909:
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8150              		.loc 1 1182 27 view .LVU2635
 8151 03a6 D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/ccZdZ92R.s 			page 249


 8152 03aa 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
1177:src/display.c **** 
 8153              		.loc 1 1177 44 view .LVU2636
 8154 03ae C6F38016 		ubfx	r6, r6, #6, #1
 8155              	.LVL910:
1179:src/display.c **** 	      UState.nothousands = 1;
 8156              		.loc 1 1179 8 is_stmt 1 view .LVU2637
1180:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8157              		.loc 1 1180 8 view .LVU2638
1181:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8158              		.loc 1 1181 8 view .LVU2639
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8159              		.loc 1 1182 8 view .LVU2640
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8160              		.loc 1 1182 27 is_stmt 0 view .LVU2641
 8161 03b2 66F38612 		bfi	r2, r6, #6, #1
 8162 03b6 83F8E727 		strb	r2, [r3, #2023]
1187:src/display.c **** 	      while (*p) {
 8163              		.loc 1 1187 8 is_stmt 1 view .LVU2642
 8164              	.LVL911:
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8165              		.loc 1 1188 8 view .LVU2643
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8166              		.loc 1 1188 14 view .LVU2644
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8167              		.loc 1 1188 15 is_stmt 0 view .LVU2645
 8168 03ba 4021     		movs	r1, #64
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8169              		.loc 1 1182 27 view .LVU2646
 8170 03bc 0522     		movs	r2, #5
 8171 03be 05E0     		b	.L746
 8172              	.LVL912:
 8173              	.L818:
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8174              		.loc 1 1188 15 view .LVU2647
 8175 03c0 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8176              	.LVL913:
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8177              		.loc 1 1188 14 view .LVU2648
 8178 03c4 0029     		cmp	r1, #0
 8179 03c6 3FF463AE 		beq	.L712
 8180 03ca 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8181              	.LVL914:
 8182              	.L746:
1189:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8183              		.loc 1 1189 3 is_stmt 1 view .LVU2649
 8184 03cc 2846     		mov	r0, r5
 8185 03ce FFF7FEFF 		bl	replace_char
 8186              	.LVL915:
1190:src/display.c **** 		  goto skip;
 8187              		.loc 1 1190 3 view .LVU2650
1190:src/display.c **** 		  goto skip;
 8188              		.loc 1 1190 7 is_stmt 0 view .LVU2651
 8189 03d2 0121     		movs	r1, #1
 8190 03d4 2846     		mov	r0, r5
 8191 03d6 FFF7FEFF 		bl	pixel_length
 8192              	.LVL916:
ARM GAS  /tmp/ccZdZ92R.s 			page 250


1193:src/display.c **** 	      }
 8193              		.loc 1 1193 3 is_stmt 1 view .LVU2652
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8194              		.loc 1 1188 14 view .LVU2653
1190:src/display.c **** 		  goto skip;
 8195              		.loc 1 1190 6 is_stmt 0 view .LVU2654
 8196 03da 2C28     		cmp	r0, #44
 8197 03dc F0DC     		bgt	.L818
 8198 03de 57E6     		b	.L712
 8199              	.LVL917:
 8200              	.L815:
1190:src/display.c **** 		  goto skip;
 8201              		.loc 1 1190 6 view .LVU2655
 8202              	.LBE472:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8203              		.loc 1 1172 75 discriminator 2 view .LVU2656
 8204 03e0 FFF7FEFF 		bl	stack_size
 8205              	.LVL918:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8206              		.loc 1 1172 62 discriminator 2 view .LVU2657
 8207 03e4 D9F80010 		ldr	r1, [r9]
 8208 03e8 6330     		adds	r0, r0, #99
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8209              		.loc 1 1172 46 discriminator 2 view .LVU2658
 8210 03ea 8842     		cmp	r0, r1
 8211 03ec FFF60AAF 		blt	.L737
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8212              		.loc 1 1172 91 discriminator 4 view .LVU2659
 8213 03f0 FFF7FEFF 		bl	get_cmdline
 8214              	.LVL919:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8215              		.loc 1 1172 88 discriminator 4 view .LVU2660
 8216 03f4 18B1     		cbz	r0, .L740
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8217              		.loc 1 1173 7 view .LVU2661
 8218 03f6 8EB1     		cbz	r6, .L739
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8219              		.loc 1 1173 28 discriminator 1 view .LVU2662
 8220 03f8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8221              		.loc 1 1173 10 discriminator 1 view .LVU2663
 8222 03fa 5B06     		lsls	r3, r3, #25
 8223 03fc 0ED4     		bmi	.L739
 8224              	.L740:
 8225 03fe D9F80010 		ldr	r1, [r9]
 8226 0402 FFE6     		b	.L737
 8227              	.LVL920:
 8228              	.L762:
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8229              		.loc 1 1173 10 discriminator 1 view .LVU2664
 8230              	.LBE474:
1092:src/display.c **** #endif
 8231              		.loc 1 1092 19 view .LVU2665
 8232 0404 0F49     		ldr	r1, .L821+24
 8233 0406 3BE6     		b	.L730
 8234              	.LVL921:
 8235              	.L805:
ARM GAS  /tmp/ccZdZ92R.s 			page 251


1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8236              		.loc 1 1028 4 is_stmt 1 view .LVU2666
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8237              		.loc 1 1028 11 is_stmt 0 view .LVU2667
 8238 0408 0193     		str	r3, [sp, #4]
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8239              		.loc 1 1028 27 is_stmt 1 view .LVU2668
 8240 040a B8E6     		b	.L757
 8241              	.LVL922:
 8242              	.L760:
1071:src/display.c **** 	  }
 8243              		.loc 1 1071 8 is_stmt 0 view .LVU2669
 8244 040c 0A49     		ldr	r1, .L821+12
 8245 040e EEE6     		b	.L728
 8246              	.LVL923:
 8247              	.L766:
1135:src/display.c **** 	  }
 8248              		.loc 1 1135 8 view .LVU2670
 8249 0410 0D49     		ldr	r1, .L821+28
 950:src/display.c ****       int n;
 8250              		.loc 1 950 22 view .LVU2671
 8251 0412 2846     		mov	r0, r5
 8252 0414 CCE6     		b	.L732
 8253              	.L765:
1132:src/display.c **** 	  }
 8254              		.loc 1 1132 8 view .LVU2672
 8255 0416 0D49     		ldr	r1, .L821+32
 950:src/display.c ****       int n;
 8256              		.loc 1 950 22 view .LVU2673
 8257 0418 2846     		mov	r0, r5
 8258 041a C9E6     		b	.L732
 8259              	.LVL924:
 8260              	.L739:
 8261              	.LBB475:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8262              		.loc 1 1172 4 discriminator 7 view .LVU2674
 8263 041c D9F80010 		ldr	r1, [r9]
 8264 0420 F1E6     		b	.L741
 8265              	.LVL925:
 8266              	.L767:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8267              		.loc 1 1172 4 discriminator 7 view .LVU2675
 8268              	.LBE475:
1139:src/display.c **** 	  }
 8269              		.loc 1 1139 8 view .LVU2676
 8270 0422 0B49     		ldr	r1, .L821+36
 950:src/display.c ****       int n;
 8271              		.loc 1 950 22 view .LVU2677
 8272 0424 2846     		mov	r0, r5
 8273 0426 C3E6     		b	.L732
 8274              	.LVL926:
 8275              	.L769:
 8276              	.LBB476:
 8277              	.LBB473:
1211:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8278              		.loc 1 1211 25 view .LVU2678
 8279 0428 3E26     		movs	r6, #62
ARM GAS  /tmp/ccZdZ92R.s 			page 252


 8280              	.LVL927:
1211:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8281              		.loc 1 1211 25 view .LVU2679
 8282 042a 1AE7     		b	.L748
 8283              	.L822:
 8284              		.align	2
 8285              	.L821:
 8286 042c 00000000 		.word	RectPolConv
 8287 0430 30000000 		.word	.LC13
 8288 0434 38000000 		.word	.LC15
 8289 0438 08000000 		.word	.LC5
 8290 043c 3C000000 		.word	.LC16
 8291 0440 00000000 		.word	.LANCHOR17
 8292 0444 14000000 		.word	.LC8
 8293 0448 28000000 		.word	.LC11
 8294 044c 34000000 		.word	.LC14
 8295 0450 2C000000 		.word	.LC12
 8296              	.LBE473:
 8297              	.LBE476:
 8298              		.cfi_endproc
 8299              	.LFE16:
 8301              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8302              		.align	2
 8303              	.LC20:
 8304 0000 0D00     		.ascii	"\015\000"
 8305 0002 0000     		.align	2
 8306              	.LC21:
 8307 0004 060600   		.ascii	"\006\006\000"
 8308 0007 00       		.align	2
 8309              	.LC23:
 8310 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8310      492C2057 
 8310      77414C74 
 8310      4500
 8311 0016 0000     		.align	2
 8312              	.LC24:
 8313 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8313      2055204C 
 8313      20492C20 
 8313      20572041 
 8313      204C2054 
 8314 0032 0000     		.align	2
 8315              	.LC25:
 8316 0034 2000     		.ascii	" \000"
 8317 0036 0000     		.align	2
 8318              	.LC26:
 8319 0038 48595000 		.ascii	"HYP\000"
 8320              		.align	2
 8321              	.LC29:
 8322 003c 7F060600 		.ascii	"\177\006\006\000"
 8323              		.align	2
 8324              	.LC30:
 8325 0040 3020746F 		.ascii	"0 to 255\000"
 8325      20323535 
 8325      00
 8326 0049 000000   		.align	2
 8327              	.LC31:
ARM GAS  /tmp/ccZdZ92R.s 			page 253


 8328 004c 46726565 		.ascii	"Free:\000"
 8328      3A00
 8329 0052 0000     		.align	2
 8330              	.LC32:
 8331 0054 202C2046 		.ascii	" , FL. \000"
 8331      4C2E2000 
 8332              		.align	2
 8333              	.LC33:
 8334 005c 52656773 		.ascii	"Regs:\000"
 8334      3A00
 8335 0062 0000     		.align	2
 8336              	.LC34:
 8337 0064 20910606 		.ascii	" \221\006\006+\000"
 8337      2B00
 8338 006a 0000     		.align	2
 8339              	.LC35:
 8340 006c 202C204C 		.ascii	" , Loc. \000"
 8340      6F632E20 
 8340      00
 8341 0075 000000   		.align	2
 8342              	.LC36:
 8343 0078 464C2000 		.ascii	"FL \000"
 8344              		.align	2
 8345              	.LC37:
 8346 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8346      06413A44 
 8346      064C494A 
 8346      4B00
 8347 008a 0000     		.align	2
 8348              	.LC38:
 8349 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8349      302D2E31 
 8349      3500
 8350 0096 0000     		.align	2
 8351              	.LC39:
 8352 0098 43414C4C 		.ascii	"CALLS\000"
 8352      5300
 8353 009e 0000     		.align	2
 8354              	.LC40:
 8355 00a0 52656720 		.ascii	"Reg \000"
 8355      00
 8356 00a5 000000   		.align	2
 8357              	.LC41:
 8358 00a8 00       		.ascii	"\000"
 8359 00a9 000000   		.align	2
 8360              	.LC42:
 8361 00ac 202D2D2D 		.ascii	" ---\000"
 8361      00
 8362 00b1 000000   		.align	2
 8363              	.LC28:
 8364 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8364      093E0A00 
 8365              		.align	2
 8366              	.LC27:
 8367 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8367      41424344 
 8367      4C494A4B 
ARM GAS  /tmp/ccZdZ92R.s 			page 254


 8367      00
 8368              		.section	.text.display,"ax",%progbits
 8369              		.align	1
 8370              		.p2align 2,,3
 8371              		.global	display
 8372              		.syntax unified
 8373              		.thumb
 8374              		.thumb_func
 8375              		.fpu fpv4-sp-d16
 8377              	display:
 8378              	.LFB34:
2969:src/display.c **** 	int i, j;
 8379              		.loc 1 2969 26 is_stmt 1 view -0
 8380              		.cfi_startproc
 8381              		@ args = 0, pretend = 0, frame = 160
 8382              		@ frame_needed = 0, uses_anonymous_args = 0
2970:src/display.c **** 	char buf[40], *bp = buf;
 8383              		.loc 1 2970 2 view .LVU2681
2971:src/display.c **** 	const char *p;
 8384              		.loc 1 2971 2 view .LVU2682
2969:src/display.c **** 	int i, j;
 8385              		.loc 1 2969 26 is_stmt 0 view .LVU2683
 8386 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8387              		.cfi_def_cfa_offset 36
 8388              		.cfi_offset 4, -36
 8389              		.cfi_offset 5, -32
 8390              		.cfi_offset 6, -28
 8391              		.cfi_offset 7, -24
 8392              		.cfi_offset 8, -20
 8393              		.cfi_offset 9, -16
 8394              		.cfi_offset 10, -12
 8395              		.cfi_offset 11, -8
 8396              		.cfi_offset 14, -4
2974:src/display.c **** 	int skip = 0;
 8397              		.loc 1 2974 24 view .LVU2684
 8398 0004 BE4C     		ldr	r4, .L1115
2969:src/display.c **** 	int i, j;
 8399              		.loc 1 2969 26 view .LVU2685
 8400 0006 A9B0     		sub	sp, sp, #164
 8401              		.cfi_def_cfa_offset 200
 8402              	.LVL928:
2972:src/display.c **** 	int annuc = 0;
 8403              		.loc 1 2972 2 is_stmt 1 view .LVU2686
2973:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8404              		.loc 1 2973 2 view .LVU2687
2974:src/display.c **** 	int skip = 0;
 8405              		.loc 1 2974 2 view .LVU2688
2974:src/display.c **** 	int skip = 0;
 8406              		.loc 1 2974 24 is_stmt 0 view .LVU2689
 8407 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8408              	.LVL929:
2975:src/display.c **** 	int x_disp = 0;
 8409              		.loc 1 2975 2 is_stmt 1 view .LVU2690
2976:src/display.c **** 	const int shift = cur_shift();
 8410              		.loc 1 2976 2 view .LVU2691
2977:src/display.c **** 
 8411              		.loc 1 2977 2 view .LVU2692
ARM GAS  /tmp/ccZdZ92R.s 			page 255


2977:src/display.c **** 
 8412              		.loc 1 2977 20 is_stmt 0 view .LVU2693
 8413 000c FFF7FEFF 		bl	cur_shift
 8414              	.LVL930:
2981:src/display.c **** 	  State2.disp_freeze = 0;
 8415              		.loc 1 2981 6 view .LVU2694
 8416 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8417              	.LVL931:
2981:src/display.c **** 	  State2.disp_freeze = 0;
 8418              		.loc 1 2981 2 is_stmt 1 view .LVU2695
2981:src/display.c **** 	  State2.disp_freeze = 0;
 8419              		.loc 1 2981 5 is_stmt 0 view .LVU2696
 8420 0012 13F01006 		ands	r6, r3, #16
 8421 0016 40F08780 		bne	.L1074
2991:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8422              		.loc 1 2991 2 is_stmt 1 view .LVU2697
2991:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8423              		.loc 1 2991 6 is_stmt 0 view .LVU2698
 8424 001a BA4F     		ldr	r7, .L1115+4
 8425 001c 3D68     		ldr	r5, [r7]
2991:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8426              		.loc 1 2991 5 view .LVU2699
 8427 001e 002D     		cmp	r5, #0
 8428 0020 4BD1     		bne	.L1075
3008:src/display.c **** 
 8429              		.loc 1 3008 2 is_stmt 1 view .LVU2700
 8430 0022 8246     		mov	r10, r0
 8431 0024 FFF7FEFF 		bl	reset_disp
 8432              	.LVL932:
3010:src/display.c **** 	if (State2.cmplx  && !cata) {
 8433              		.loc 1 3010 2 view .LVU2701
 8434 0028 1EA8     		add	r0, sp, #120
 8435              	.LVL933:
3010:src/display.c **** 	if (State2.cmplx  && !cata) {
 8436              		.loc 1 3010 2 is_stmt 0 view .LVU2702
 8437 002a 2822     		movs	r2, #40
 8438 002c 2946     		mov	r1, r5
 8439 002e FFF7FEFF 		bl	xset
 8440              	.LVL934:
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8441              		.loc 1 3011 2 is_stmt 1 view .LVU2703
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8442              		.loc 1 3011 6 is_stmt 0 view .LVU2704
 8443 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8444              		.loc 1 3011 5 view .LVU2705
 8445 0034 9E07     		lsls	r6, r3, #30
 8446 0036 03D5     		bpl	.L958
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8447              		.loc 1 3011 20 discriminator 1 view .LVU2706
 8448 0038 B9F1000F 		cmp	r9, #0
 8449 003c 00F0EC80 		beq	.L1076
 8450              	.L958:
2971:src/display.c **** 	const char *p;
 8451              		.loc 1 2971 17 view .LVU2707
 8452 0040 0DF17808 		add	r8, sp, #120
 8453              	.LVL935:
ARM GAS  /tmp/ccZdZ92R.s 			page 256


 8454              	.L829:
3015:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8455              		.loc 1 3015 2 is_stmt 1 view .LVU2708
3015:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8456              		.loc 1 3015 5 is_stmt 0 view .LVU2709
 8457 0044 D806     		lsls	r0, r3, #27
 8458 0046 00F17581 		bmi	.L1077
3027:src/display.c **** 	  set_status(S_SURE);
 8459              		.loc 1 3027 9 is_stmt 1 view .LVU2710
3027:src/display.c **** 	  set_status(S_SURE);
 8460              		.loc 1 3027 13 is_stmt 0 view .LVU2711
 8461 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
3027:src/display.c **** 	  set_status(S_SURE);
 8462              		.loc 1 3027 12 view .LVU2712
 8463 004c 5107     		lsls	r1, r2, #29
 8464 004e 40F0F480 		bne	.L1078
3029:src/display.c **** 	  bp = scopy(bp, "HYP");
 8465              		.loc 1 3029 9 is_stmt 1 view .LVU2713
3029:src/display.c **** 	  bp = scopy(bp, "HYP");
 8466              		.loc 1 3029 12 is_stmt 0 view .LVU2714
 8467 0052 9A06     		lsls	r2, r3, #26
 8468 0054 00F1C280 		bmi	.L1079
3034:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8469              		.loc 1 3034 9 is_stmt 1 view .LVU2715
3034:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8470              		.loc 1 3034 12 is_stmt 0 view .LVU2716
 8471 0058 DE07     		lsls	r6, r3, #31
 8472 005a 00F1AE81 		bmi	.L1080
3042:src/display.c **** 	  /* Commands with arguments */
 8473              		.loc 1 3042 9 is_stmt 1 view .LVU2717
3042:src/display.c **** 	  /* Commands with arguments */
 8474              		.loc 1 3042 13 is_stmt 0 view .LVU2718
 8475 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
3042:src/display.c **** 	  /* Commands with arguments */
 8476              		.loc 1 3042 12 view .LVU2719
 8477 0060 8806     		lsls	r0, r1, #26
 8478 0062 00F10582 		bmi	.L1081
3073:src/display.c **** 	  *bp++ = 'x';
 8479              		.loc 1 3073 9 is_stmt 1 view .LVU2720
3073:src/display.c **** 	  *bp++ = 'x';
 8480              		.loc 1 3073 19 is_stmt 0 view .LVU2721
 8481 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
3073:src/display.c **** 	  *bp++ = 'x';
 8482              		.loc 1 3073 12 view .LVU2722
 8483 0068 072A     		cmp	r2, #7
 8484 006a 40F0E481 		bne	.L1082
3079:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 8485              		.loc 1 3079 9 is_stmt 1 view .LVU2723
3079:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 8486              		.loc 1 3079 12 is_stmt 0 view .LVU2724
 8487 006e B9F1000F 		cmp	r9, #0
 8488 0072 40F00F83 		bne	.L1083
3127:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8489              		.loc 1 3127 9 is_stmt 1 view .LVU2725
3127:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8490              		.loc 1 3127 12 is_stmt 0 view .LVU2726
 8491 0076 1A07     		lsls	r2, r3, #28
ARM GAS  /tmp/ccZdZ92R.s 			page 257


 8492 0078 00F16083 		bmi	.L1084
3135:src/display.c **** 	  show_status();
 8493              		.loc 1 3135 9 is_stmt 1 view .LVU2727
3135:src/display.c **** 	  show_status();
 8494              		.loc 1 3135 19 is_stmt 0 view .LVU2728
 8495 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
3135:src/display.c **** 	  show_status();
 8496              		.loc 1 3135 12 view .LVU2729
 8497 007e 002B     		cmp	r3, #0
 8498 0080 40F0E583 		bne	.L1085
3138:src/display.c **** 	  show_label();
 8499              		.loc 1 3138 9 is_stmt 1 view .LVU2730
3138:src/display.c **** 	  show_label();
 8500              		.loc 1 3138 13 is_stmt 0 view .LVU2731
 8501 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3138:src/display.c **** 	  show_label();
 8502              		.loc 1 3138 12 view .LVU2732
 8503 0086 5E07     		lsls	r6, r3, #29
 8504 0088 00F1AC83 		bmi	.L1086
3141:src/display.c **** 	  show_registers();
 8505              		.loc 1 3141 9 is_stmt 1 view .LVU2733
3141:src/display.c **** 	  show_registers();
 8506              		.loc 1 3141 12 is_stmt 0 view .LVU2734
 8507 008c 1807     		lsls	r0, r3, #28
 8508 008e 00F1D484 		bmi	.L1087
3151:src/display.c **** 	  if (DispMsg) { 
 8509              		.loc 1 3151 9 is_stmt 1 view .LVU2735
3151:src/display.c **** 	  if (DispMsg) { 
 8510              		.loc 1 3151 12 is_stmt 0 view .LVU2736
 8511 0092 4806     		lsls	r0, r1, #25
 8512 0094 40F1B284 		bpl	.L894
3152:src/display.c **** 	    set_status(DispMsg);
 8513              		.loc 1 3152 4 is_stmt 1 view .LVU2737
3152:src/display.c **** 	    set_status(DispMsg);
 8514              		.loc 1 3152 8 is_stmt 0 view .LVU2738
 8515 0098 9B4E     		ldr	r6, .L1115+8
 8516 009a D6F800B0 		ldr	fp, [r6]
3152:src/display.c **** 	    set_status(DispMsg);
 8517              		.loc 1 3152 7 view .LVU2739
 8518 009e BBF1000F 		cmp	fp, #0
 8519 00a2 00F08184 		beq	.L895
3153:src/display.c **** 	  } else if (DispPlot) {
 8520              		.loc 1 3153 6 is_stmt 1 view .LVU2740
 8521 00a6 5846     		mov	r0, fp
 8522 00a8 FFF7FEFF 		bl	set_status
 8523              	.LVL936:
3216:src/display.c ****       nostk:	show_flags();
 8524              		.loc 1 3216 2 view .LVU2741
 8525 00ac DFF87882 		ldr	r8, .L1115+40
 8526              	.LVL937:
3216:src/display.c ****       nostk:	show_flags();
 8527              		.loc 1 3216 2 is_stmt 0 view .LVU2742
 8528 00b0 FFF7FEFF 		bl	show_stack
 8529              	.LVL938:
3217:src/display.c **** 	if (!skip) {
 8530              		.loc 1 3217 14 is_stmt 1 view .LVU2743
 8531 00b4 FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/ccZdZ92R.s 			page 258


 8532              	.LVL939:
3218:src/display.c **** 	  if (State2.runmode) {
 8533              		.loc 1 3218 2 view .LVU2744
 8534 00b8 C9E0     		b	.L833
 8535              	.LVL940:
 8536              	.L1075:
2998:src/display.c **** 
 8537              		.loc 1 2998 4 view .LVU2745
 8538 00ba FFF7FEFF 		bl	wait_for_display
 8539              	.LVL941:
3001:src/display.c **** 	    clr_dot(i);
 8540              		.loc 1 3001 4 view .LVU2746
3001:src/display.c **** 	    clr_dot(i);
 8541              		.loc 1 3001 16 view .LVU2747
 8542              	.L827:
3002:src/display.c **** 	  }
 8543              		.loc 1 3002 6 discriminator 3 view .LVU2748
 8544 00be 3046     		mov	r0, r6
3001:src/display.c **** 	    clr_dot(i);
 8545              		.loc 1 3001 31 is_stmt 0 discriminator 3 view .LVU2749
 8546 00c0 0136     		adds	r6, r6, #1
 8547              	.LVL942:
3002:src/display.c **** 	  }
 8548              		.loc 1 3002 6 discriminator 3 view .LVU2750
 8549 00c2 FFF7FEFF 		bl	clr_dot
 8550              	.LVL943:
3001:src/display.c **** 	    clr_dot(i);
 8551              		.loc 1 3001 31 is_stmt 1 discriminator 3 view .LVU2751
3001:src/display.c **** 	    clr_dot(i);
 8552              		.loc 1 3001 16 discriminator 3 view .LVU2752
3001:src/display.c **** 	    clr_dot(i);
 8553              		.loc 1 3001 4 is_stmt 0 discriminator 3 view .LVU2753
 8554 00c6 832E     		cmp	r6, #131
 8555 00c8 F9D1     		bne	.L827
 8556 00ca 8F4E     		ldr	r6, .L1115+8
 8557              	.LVL944:
3001:src/display.c **** 	    clr_dot(i);
 8558              		.loc 1 3001 4 discriminator 3 view .LVU2754
 8559 00cc DFF85882 		ldr	r8, .L1115+40
2973:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8560              		.loc 1 2973 6 view .LVU2755
 8561 00d0 0025     		movs	r5, #0
 8562              	.LVL945:
 8563              	.L828:
3221:src/display.c **** 	    if (p == NULL || cata) {
 8564              		.loc 1 3221 6 is_stmt 1 view .LVU2756
3221:src/display.c **** 	    if (p == NULL || cata) {
 8565              		.loc 1 3221 10 is_stmt 0 view .LVU2757
 8566 00d2 FFF7FEFF 		bl	get_cmdline
 8567              	.LVL946:
3222:src/display.c **** 	      if (ShowRegister != -1) {
 8568              		.loc 1 3222 6 is_stmt 1 view .LVU2758
3222:src/display.c **** 	      if (ShowRegister != -1) {
 8569              		.loc 1 3222 9 is_stmt 0 view .LVU2759
 8570 00d6 8246     		mov	r10, r0
 8571 00d8 10B1     		cbz	r0, .L909
3222:src/display.c **** 	      if (ShowRegister != -1) {
ARM GAS  /tmp/ccZdZ92R.s 			page 259


 8572              		.loc 1 3222 20 discriminator 1 view .LVU2760
 8573 00da B9F1000F 		cmp	r9, #0
 8574 00de 2ED0     		beq	.L910
 8575              	.L909:
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8576              		.loc 1 3223 8 is_stmt 1 view .LVU2761
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8577              		.loc 1 3223 25 is_stmt 0 view .LVU2762
 8578 00e0 DFF84892 		ldr	r9, .L1115+44
 8579              	.LVL947:
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8580              		.loc 1 3223 25 view .LVU2763
 8581 00e4 D9F80000 		ldr	r0, [r9]
 8582              	.LVL948:
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8583              		.loc 1 3223 11 view .LVU2764
 8584 00e8 421C     		adds	r2, r0, #1
 8585 00ea 00F05081 		beq	.L911
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8586              		.loc 1 3224 3 is_stmt 1 view .LVU2765
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8587              		.loc 1 3224 39 is_stmt 0 view .LVU2766
 8588 00ee 6428     		cmp	r0, #100
 8589 00f0 00F08780 		beq	.L1088
 8590              	.L912:
3225:src/display.c **** 	      }
 8591              		.loc 1 3225 3 is_stmt 1 view .LVU2767
 8592 00f4 0021     		movs	r1, #0
 8593 00f6 FFF7FEFF 		bl	format_reg
 8594              	.LVL949:
3233:src/display.c **** 	      goto finish;
 8595              		.loc 1 3233 6 view .LVU2768
3233:src/display.c **** 	      goto finish;
 8596              		.loc 1 3233 9 is_stmt 0 view .LVU2769
 8597 00fa 3B68     		ldr	r3, [r7]
 8598 00fc 002B     		cmp	r3, #0
 8599 00fe 00F0FC80 		beq	.L1071
 8600              	.LVL950:
 8601              	.L915:
3286:src/display.c **** 	State2.disp_as_alpha = 0;
 8602              		.loc 1 3286 2 is_stmt 1 view .LVU2770
3287:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8603              		.loc 1 3287 2 view .LVU2771
3288:src/display.c **** 	State2.invalid_disp = 0;
 8604              		.loc 1 3288 2 view .LVU2772
3286:src/display.c **** 	State2.disp_as_alpha = 0;
 8605              		.loc 1 3286 17 is_stmt 0 view .LVU2773
 8606 0102 6369     		ldr	r3, [r4, #20]
 8607 0104 23F02173 		bic	r3, r3, #42205184
 8608 0108 23F48053 		bic	r3, r3, #4096
3288:src/display.c **** 	State2.invalid_disp = 0;
 8609              		.loc 1 3288 15 view .LVU2774
 8610 010c 0022     		movs	r2, #0
3286:src/display.c **** 	State2.disp_as_alpha = 0;
 8611              		.loc 1 3286 17 view .LVU2775
 8612 010e 6361     		str	r3, [r4, #20]
3290:src/display.c **** 	DispMsg = CNULL;
ARM GAS  /tmp/ccZdZ92R.s 			page 260


 8613              		.loc 1 3290 15 view .LVU2776
 8614 0110 6423     		movs	r3, #100
3288:src/display.c **** 	State2.invalid_disp = 0;
 8615              		.loc 1 3288 15 view .LVU2777
 8616 0112 6274     		strb	r2, [r4, #17]
3289:src/display.c **** 	ShowRegister = regX_idx;
 8617              		.loc 1 3289 2 is_stmt 1 view .LVU2778
3290:src/display.c **** 	DispMsg = CNULL;
 8618              		.loc 1 3290 2 view .LVU2779
3291:src/display.c **** 	DispPlot = 0;
 8619              		.loc 1 3291 10 is_stmt 0 view .LVU2780
 8620 0114 3260     		str	r2, [r6]
3292:src/display.c **** 	State2.disp_small = 0;
 8621              		.loc 1 3292 11 view .LVU2781
 8622 0116 A8F80020 		strh	r2, [r8]	@ movhi
3290:src/display.c **** 	DispMsg = CNULL;
 8623              		.loc 1 3290 15 view .LVU2782
 8624 011a C9F80030 		str	r3, [r9]
3291:src/display.c **** 	DispPlot = 0;
 8625              		.loc 1 3291 2 is_stmt 1 view .LVU2783
3292:src/display.c **** 	State2.disp_small = 0;
 8626              		.loc 1 3292 2 view .LVU2784
3293:src/display.c **** 	finish_display();
 8627              		.loc 1 3293 2 view .LVU2785
3294:src/display.c **** #ifdef CONSOLE
 8628              		.loc 1 3294 2 view .LVU2786
 8629 011e FFF7FEFF 		bl	finish_display
 8630              	.LVL951:
3298:src/display.c **** #endif
 8631              		.loc 1 3298 7 is_stmt 0 view .LVU2787
 8632 0122 29B0     		add	sp, sp, #164
 8633              		.cfi_remember_state
 8634              		.cfi_def_cfa_offset 36
 8635              		@ sp needed
 8636 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8637              	.LVL952:
 8638              	.L1074:
 8639              		.cfi_restore_state
2982:src/display.c **** 	  State2.disp_temp = 1;
 8640              		.loc 1 2982 4 is_stmt 1 view .LVU2788
2983:src/display.c **** #ifdef CONSOLE
 8641              		.loc 1 2983 4 view .LVU2789
2987:src/display.c **** 	  return;
 8642              		.loc 1 2987 12 is_stmt 0 view .LVU2790
 8643 0128 784A     		ldr	r2, .L1115+12
2982:src/display.c **** 	  State2.disp_temp = 1;
 8644              		.loc 1 2982 23 view .LVU2791
 8645 012a 23F03003 		bic	r3, r3, #48
 8646 012e 43F02003 		orr	r3, r3, #32
2987:src/display.c **** 	  return;
 8647              		.loc 1 2987 12 view .LVU2792
 8648 0132 0021     		movs	r1, #0
2982:src/display.c **** 	  State2.disp_temp = 1;
 8649              		.loc 1 2982 23 view .LVU2793
 8650 0134 E375     		strb	r3, [r4, #23]
2987:src/display.c **** 	  return;
 8651              		.loc 1 2987 4 is_stmt 1 view .LVU2794
ARM GAS  /tmp/ccZdZ92R.s 			page 261


2987:src/display.c **** 	  return;
 8652              		.loc 1 2987 12 is_stmt 0 view .LVU2795
 8653 0136 1160     		str	r1, [r2]
2988:src/display.c **** 	}
 8654              		.loc 1 2988 4 is_stmt 1 view .LVU2796
3298:src/display.c **** #endif
 8655              		.loc 1 3298 7 is_stmt 0 view .LVU2797
 8656 0138 29B0     		add	sp, sp, #164
 8657              		.cfi_remember_state
 8658              		.cfi_def_cfa_offset 36
 8659              		@ sp needed
 8660 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8661              	.LVL953:
 8662              	.L910:
 8663              		.cfi_restore_state
3230:src/display.c **** 	      x_disp = 1;
 8664              		.loc 1 3230 8 is_stmt 1 view .LVU2798
 8665              	.LBB520:
 8666              	.LBI520:
1245:src/display.c ****       int i;
 8667              		.loc 1 1245 17 view .LVU2799
 8668              	.LBB521:
1246:src/display.c ****       int gotdot = -1;
 8669              		.loc 1 1246 7 view .LVU2800
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8670              		.loc 1 1247 7 view .LVU2801
1249:src/display.c **** #endif
 8671              		.loc 1 1249 7 view .LVU2802
1253:src/display.c **** #endif
 8672              		.loc 1 1253 7 view .LVU2803
1256:src/display.c **** 	SET_MANT_SIGN;
 8673              		.loc 1 1256 7 view .LVU2804
1256:src/display.c **** 	SET_MANT_SIGN;
 8674              		.loc 1 1256 10 is_stmt 0 view .LVU2805
 8675 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8676 0140 2D2B     		cmp	r3, #45
 8677 0142 00F03E82 		beq	.L1089
 8678              	.LVL954:
 8679              	.L916:
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8680              		.loc 1 1261 7 is_stmt 1 view .LVU2806
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8681              		.loc 1 1261 11 is_stmt 0 view .LVU2807
 8682 0146 724B     		ldr	r3, .L1115+16
 8683 0148 1B68     		ldr	r3, [r3]
 8684 014a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8685              		.loc 1 1261 10 view .LVU2808
 8686 014e 13F00109 		ands	r9, r3, #1
 8687              	.LVL955:
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8688              		.loc 1 1261 10 view .LVU2809
 8689 0152 00F0AC81 		beq	.L917
 8690              	.LVL956:
1262:src/display.c **** 	  set_dig(i, *p);
 8691              		.loc 1 1262 12 is_stmt 1 view .LVU2810
 8692 0156 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
ARM GAS  /tmp/ccZdZ92R.s 			page 262


1262:src/display.c **** 	  set_dig(i, *p);
 8693              		.loc 1 1262 8 is_stmt 0 view .LVU2811
 8694 015a 4FF00009 		mov	r9, #0
1262:src/display.c **** 	  set_dig(i, *p);
 8695              		.loc 1 1262 2 view .LVU2812
 8696 015e 41B1     		cbz	r1, .L921
 8697              	.LVL957:
 8698              	.L918:
1263:src/display.c **** 	  i += SEGS_PER_DIGIT;
 8699              		.loc 1 1263 4 is_stmt 1 view .LVU2813
 8700 0160 4846     		mov	r0, r9
 8701 0162 FFF7FEFF 		bl	set_dig
 8702              	.LVL958:
1264:src/display.c **** 	}
 8703              		.loc 1 1264 4 view .LVU2814
1262:src/display.c **** 	  set_dig(i, *p);
 8704              		.loc 1 1262 12 is_stmt 0 view .LVU2815
 8705 0166 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8706              	.LVL959:
1264:src/display.c **** 	}
 8707              		.loc 1 1264 6 view .LVU2816
 8708 016a 09F10909 		add	r9, r9, #9
 8709              	.LVL960:
1262:src/display.c **** 	  set_dig(i, *p);
 8710              		.loc 1 1262 24 is_stmt 1 view .LVU2817
1262:src/display.c **** 	  set_dig(i, *p);
 8711              		.loc 1 1262 12 view .LVU2818
1262:src/display.c **** 	  set_dig(i, *p);
 8712              		.loc 1 1262 2 is_stmt 0 view .LVU2819
 8713 016e 0029     		cmp	r1, #0
 8714 0170 F6D1     		bne	.L918
 8715              	.LVL961:
 8716              	.L921:
1266:src/display.c ****       } else {
 8717              		.loc 1 1266 2 is_stmt 1 view .LVU2820
 8718 0172 FFF7FEFF 		bl	carry_overflow
 8719              	.LVL962:
1266:src/display.c ****       } else {
 8720              		.loc 1 1266 2 is_stmt 0 view .LVU2821
 8721              	.LBE521:
 8722              	.LBE520:
3233:src/display.c **** 	      goto finish;
 8723              		.loc 1 3233 6 is_stmt 1 view .LVU2822
3233:src/display.c **** 	      goto finish;
 8724              		.loc 1 3233 9 is_stmt 0 view .LVU2823
 8725 0176 3B68     		ldr	r3, [r7]
 8726 0178 DFF8B091 		ldr	r9, .L1115+44
 8727 017c 002B     		cmp	r3, #0
 8728 017e C0D1     		bne	.L915
 8729              	.LVL963:
 8730              	.L920:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8731              		.loc 1 3263 2 is_stmt 1 view .LVU2824
 8732 0180 FFF7FEFF 		bl	set_annunciators
 8733              	.LVL964:
3264:src/display.c **** 	  ShowRPN = 0;
 8734              		.loc 1 3264 2 view .LVU2825
ARM GAS  /tmp/ccZdZ92R.s 			page 263


3264:src/display.c **** 	  ShowRPN = 0;
 8735              		.loc 1 3264 50 is_stmt 0 view .LVU2826
 8736 0184 3368     		ldr	r3, [r6]
 8737 0186 002B     		cmp	r3, #0
 8738 0188 00F00981 		beq	.L1090
 8739              	.LVL965:
 8740              	.L831:
3265:src/display.c **** 	  dot(RPN, 0);
 8741              		.loc 1 3265 4 is_stmt 1 view .LVU2827
3265:src/display.c **** 	  dot(RPN, 0);
 8742              		.loc 1 3265 12 is_stmt 0 view .LVU2828
 8743 018c 5F4F     		ldr	r7, .L1115+12
 8744 018e 0023     		movs	r3, #0
 8745              	.LBB544:
 8746              	.LBB545:
 341:src/display.c **** }
 8747              		.loc 1 341 8 view .LVU2829
 8748 0190 8D20     		movs	r0, #141
 8749              	.LBE545:
 8750              	.LBE544:
3265:src/display.c **** 	  dot(RPN, 0);
 8751              		.loc 1 3265 12 view .LVU2830
 8752 0192 3B60     		str	r3, [r7]
3266:src/display.c **** 	}
 8753              		.loc 1 3266 4 is_stmt 1 view .LVU2831
 8754              	.LVL966:
 8755              	.LBB547:
 8756              	.LBI544:
 339:src/display.c ****   if (on)	set_dot(n);
 8757              		.loc 1 339 6 view .LVU2832
 8758              	.LBB546:
 340:src/display.c ****   else	clr_dot(n);
 8759              		.loc 1 340 3 view .LVU2833
 341:src/display.c **** }
 8760              		.loc 1 341 8 view .LVU2834
 8761 0194 FFF7FEFF 		bl	clr_dot
 8762              	.LVL967:
 8763              	.L948:
 341:src/display.c **** }
 8764              		.loc 1 341 8 is_stmt 0 view .LVU2835
 8765              	.LBE546:
 8766              	.LBE547:
3269:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8767              		.loc 1 3269 2 is_stmt 1 view .LVU2836
3270:src/display.c **** 
 8768              		.loc 1 3270 4 is_stmt 0 view .LVU2837
 8769 0198 3B68     		ldr	r3, [r7]
 8770 019a 002B     		cmp	r3, #0
 8771 019c 4BD1     		bne	.L966
3269:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8772              		.loc 1 3269 31 view .LVU2838
 8773 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8774 01a0 12F04003 		ands	r3, r2, #64
 8775 01a4 08D0     		beq	.L949
3270:src/display.c **** 
 8776              		.loc 1 3270 8 view .LVU2839
 8777 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccZdZ92R.s 			page 264


3270:src/display.c **** 
 8778              		.loc 1 3270 4 view .LVU2840
 8779 01a8 1B07     		lsls	r3, r3, #28
 8780 01aa 40F1EE80 		bpl	.L968
3270:src/display.c **** 
 8781              		.loc 1 3270 30 discriminator 3 view .LVU2841
 8782 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8783 01b0 012B     		cmp	r3, #1
 8784 01b2 01D0     		beq	.L949
3270:src/display.c **** 
 8785              		.loc 1 3270 60 discriminator 5 view .LVU2842
 8786 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8787              	.L949:
3269:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8788              		.loc 1 3269 19 discriminator 9 view .LVU2843
 8789 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8790 01ba 63F34512 		bfi	r2, r3, #5, #1
 8791 01be E275     		strb	r2, [r4, #23]
3273:src/display.c **** 	  annunciators();
 8792              		.loc 1 3273 2 is_stmt 1 discriminator 9 view .LVU2844
3273:src/display.c **** 	  annunciators();
 8793              		.loc 1 3273 5 is_stmt 0 discriminator 9 view .LVU2845
 8794 01c0 002D     		cmp	r5, #0
 8795 01c2 33D0     		beq	.L950
3273:src/display.c **** 	  annunciators();
 8796              		.loc 1 3273 36 discriminator 1 view .LVU2846
 8797 01c4 D3B2     		uxtb	r3, r2
3273:src/display.c **** 	  annunciators();
 8798              		.loc 1 3273 13 discriminator 1 view .LVU2847
 8799 01c6 03F02103 		and	r3, r3, #33
 8800 01ca 202B     		cmp	r3, #32
 8801 01cc 2ED0     		beq	.L950
 8802              	.L951:
3274:src/display.c ****  	State2.hms = 0;
 8803              		.loc 1 3274 4 is_stmt 1 view .LVU2848
 8804 01ce FFF7FEFF 		bl	annunciators
 8805              	.LVL968:
 8806              	.L952:
3275:src/display.c **** #else
 8807              		.loc 1 3275 3 view .LVU2849
3275:src/display.c **** #else
 8808              		.loc 1 3275 14 is_stmt 0 view .LVU2850
 8809 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8810 01d4 6FF30003 		bfc	r3, #0, #1
 8811 01d8 E375     		strb	r3, [r4, #23]
 8812 01da 92E7     		b	.L915
 8813              	.LVL969:
 8814              	.L1079:
3030:src/display.c **** 	  if (! State2.dot)
 8815              		.loc 1 3030 4 is_stmt 1 view .LVU2851
3030:src/display.c **** 	  if (! State2.dot)
 8816              		.loc 1 3030 9 is_stmt 0 view .LVU2852
 8817 01dc 4D49     		ldr	r1, .L1115+20
 8818 01de 4046     		mov	r0, r8
 8819 01e0 FFF7FEFF 		bl	scopy
 8820              	.LVL970:
3031:src/display.c **** 	    *bp++ = '\235';
ARM GAS  /tmp/ccZdZ92R.s 			page 265


 8821              		.loc 1 3031 8 view .LVU2853
 8822 01e4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8823              	.LVL971:
3031:src/display.c **** 	    *bp++ = '\235';
 8824              		.loc 1 3031 4 is_stmt 1 view .LVU2854
3031:src/display.c **** 	    *bp++ = '\235';
 8825              		.loc 1 3031 7 is_stmt 0 view .LVU2855
 8826 01e6 5B06     		lsls	r3, r3, #25
 8827 01e8 40F1FD80 		bpl	.L835
 8828              	.LVL972:
 8829              	.L1066:
3031:src/display.c **** 	    *bp++ = '\235';
 8830              		.loc 1 3031 7 view .LVU2856
 8831 01ec 464E     		ldr	r6, .L1115+8
 8832 01ee DFF83881 		ldr	r8, .L1115+40
 8833              	.L836:
3033:src/display.c **** 	} else if (State2.gtodot) {
 8834              		.loc 1 3033 4 is_stmt 1 view .LVU2857
 8835 01f2 1EA8     		add	r0, sp, #120
 8836 01f4 FFF7FEFF 		bl	set_status
 8837              	.LVL973:
3216:src/display.c ****       nostk:	show_flags();
 8838              		.loc 1 3216 2 view .LVU2858
 8839 01f8 FFF7FEFF 		bl	show_stack
 8840              	.LVL974:
3217:src/display.c **** 	if (!skip) {
 8841              		.loc 1 3217 14 view .LVU2859
 8842 01fc FFF7FEFF 		bl	show_flags
 8843              	.LVL975:
3218:src/display.c **** 	  if (State2.runmode) {
 8844              		.loc 1 3218 2 view .LVU2860
 8845 0200 25E0     		b	.L833
 8846              	.LVL976:
 8847              	.L1088:
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8848              		.loc 1 3224 42 is_stmt 0 discriminator 1 view .LVU2861
 8849 0202 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8850              		.loc 1 3224 39 discriminator 1 view .LVU2862
 8851 0204 13F00101 		ands	r1, r3, #1
 8852 0208 7FF474AF 		bne	.L912
 8853              	.LVL977:
3225:src/display.c **** 	      }
 8854              		.loc 1 3225 3 is_stmt 1 view .LVU2863
 8855 020c FFF7FEFF 		bl	format_reg
 8856              	.LVL978:
3233:src/display.c **** 	      goto finish;
 8857              		.loc 1 3233 6 view .LVU2864
3233:src/display.c **** 	      goto finish;
 8858              		.loc 1 3233 9 is_stmt 0 view .LVU2865
 8859 0210 3B68     		ldr	r3, [r7]
 8860 0212 002B     		cmp	r3, #0
 8861 0214 B4D0     		beq	.L920
 8862 0216 74E7     		b	.L915
 8863              	.LVL979:
 8864              	.L1076:
3012:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/ccZdZ92R.s 			page 266


 8865              		.loc 1 3012 4 is_stmt 1 view .LVU2866
3012:src/display.c **** 	  set_status(buf);
 8866              		.loc 1 3012 10 is_stmt 0 view .LVU2867
 8867 0218 1423     		movs	r3, #20
3013:src/display.c **** 	}
 8868              		.loc 1 3013 4 view .LVU2868
 8869 021a 1EA8     		add	r0, sp, #120
3012:src/display.c **** 	  set_status(buf);
 8870              		.loc 1 3012 10 view .LVU2869
 8871 021c 8DF87830 		strb	r3, [sp, #120]
3013:src/display.c **** 	}
 8872              		.loc 1 3013 4 is_stmt 1 view .LVU2870
3012:src/display.c **** 	  set_status(buf);
 8873              		.loc 1 3012 7 is_stmt 0 view .LVU2871
 8874 0220 0DF17908 		add	r8, sp, #121
 8875              	.LVL980:
3013:src/display.c **** 	}
 8876              		.loc 1 3013 4 view .LVU2872
 8877 0224 FFF7FEFF 		bl	set_status
 8878              	.LVL981:
 8879 0228 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8880 022a 0BE7     		b	.L829
 8881              	.LVL982:
 8882              	.L950:
3273:src/display.c **** 	  annunciators();
 8883              		.loc 1 3273 52 discriminator 3 view .LVU2873
 8884 022c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8885 022e 13F0C00F 		tst	r3, #192
 8886 0232 CED0     		beq	.L952
 8887 0234 CBE7     		b	.L951
 8888              	.L966:
 8889 0236 0023     		movs	r3, #0
 8890 0238 BEE7     		b	.L949
 8891              	.LVL983:
 8892              	.L1078:
3028:src/display.c **** 	} else if (State2.hyp) {
 8893              		.loc 1 3028 4 is_stmt 1 view .LVU2874
 8894 023a 3748     		ldr	r0, .L1115+24
 8895 023c 324E     		ldr	r6, .L1115+8
 8896 023e DFF8E880 		ldr	r8, .L1115+40
 8897              	.LVL984:
3028:src/display.c **** 	} else if (State2.hyp) {
 8898              		.loc 1 3028 4 is_stmt 0 view .LVU2875
 8899 0242 FFF7FEFF 		bl	set_status
 8900              	.LVL985:
3216:src/display.c ****       nostk:	show_flags();
 8901              		.loc 1 3216 2 is_stmt 1 view .LVU2876
 8902 0246 FFF7FEFF 		bl	show_stack
 8903              	.LVL986:
3217:src/display.c **** 	if (!skip) {
 8904              		.loc 1 3217 14 view .LVU2877
 8905 024a FFF7FEFF 		bl	show_flags
 8906              	.LVL987:
3218:src/display.c **** 	  if (State2.runmode) {
 8907              		.loc 1 3218 2 view .LVU2878
 8908              	.L833:
3219:src/display.c **** 	  only_update_x:
ARM GAS  /tmp/ccZdZ92R.s 			page 267


 8909              		.loc 1 3219 4 view .LVU2879
3219:src/display.c **** 	  only_update_x:
 8910              		.loc 1 3219 8 is_stmt 0 view .LVU2880
 8911 024e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3219:src/display.c **** 	  only_update_x:
 8912              		.loc 1 3219 7 view .LVU2881
 8913 0250 13F0400A 		ands	r10, r3, #64
 8914 0254 7FF43DAF 		bne	.L828
 8915              	.LBB548:
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8916              		.loc 1 3237 6 is_stmt 1 view .LVU2882
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8917              		.loc 1 3237 24 is_stmt 0 view .LVU2883
 8918 0258 2D4B     		ldr	r3, .L1115+16
3241:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8919              		.loc 1 3241 6 view .LVU2884
 8920 025a DFF8D490 		ldr	r9, .L1115+48
 8921              	.LVL988:
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8922              		.loc 1 3237 24 view .LVU2885
 8923 025e 1B68     		ldr	r3, [r3]
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8924              		.loc 1 3237 19 view .LVU2886
 8925 0260 B3F8E077 		ldrh	r7, [r3, #2016]
 8926              	.LVL989:
3238:src/display.c **** 	    const int n = nLIB(pc);
 8927              		.loc 1 3238 6 is_stmt 1 view .LVU2887
3238:src/display.c **** 	    const int n = nLIB(pc);
 8928              		.loc 1 3238 25 is_stmt 0 view .LVU2888
 8929 0264 3846     		mov	r0, r7
 8930 0266 FFF7FEFF 		bl	user_pc
 8931              	.LVL990:
3240:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8932              		.loc 1 3240 6 view .LVU2889
 8933 026a 2822     		movs	r2, #40
 8934 026c 5146     		mov	r1, r10
3238:src/display.c **** 	    const int n = nLIB(pc);
 8935              		.loc 1 3238 25 view .LVU2890
 8936 026e 8346     		mov	fp, r0
3240:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8937              		.loc 1 3240 6 view .LVU2891
 8938 0270 1EA8     		add	r0, sp, #120
 8939 0272 FFF7FEFF 		bl	xset
 8940              	.LVL991:
3239:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8941              		.loc 1 3239 20 view .LVU2892
 8942 0276 BF0B     		lsrs	r7, r7, #14
 8943              	.LVL992:
3239:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8944              		.loc 1 3239 6 is_stmt 1 view .LVU2893
3240:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8945              		.loc 1 3240 6 view .LVU2894
3241:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8946              		.loc 1 3241 6 view .LVU2895
 8947 0278 D9F80000 		ldr	r0, [r9]
 8948 027c 5246     		mov	r2, r10
 8949 027e 0121     		movs	r1, #1
ARM GAS  /tmp/ccZdZ92R.s 			page 268


 8950 0280 FFF7FEFF 		bl	set_exp
 8951              	.LVL993:
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8952              		.loc 1 3242 6 view .LVU2896
 8953 0284 002F     		cmp	r7, #0
 8954 0286 40F0B480 		bne	.L1091
 8955 028a 2449     		ldr	r1, .L1115+28
 8956 028c 1EA8     		add	r0, sp, #120
 8957 028e FFF7FEFF 		bl	scopy_spc
 8958              	.LVL994:
 8959 0292 0322     		movs	r2, #3
 8960 0294 5946     		mov	r1, fp
 8961 0296 FFF7FEFF 		bl	num_arg_0
 8962              	.LVL995:
3244:src/display.c **** #ifndef REALBUILD
 8963              		.loc 1 3244 6 view .LVU2897
 8964 029a 0921     		movs	r1, #9
 8965 029c 1EA8     		add	r0, sp, #120
 8966 029e FFF7FEFF 		bl	set_digits_string
 8967              	.LVL996:
3246:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8968              		.loc 1 3246 6 view .LVU2898
 8969 02a2 3946     		mov	r1, r7
 8970 02a4 2822     		movs	r2, #40
 8971 02a6 1EA8     		add	r0, sp, #120
 8972 02a8 FFF7FEFF 		bl	xset
 8973              	.LVL997:
3247:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8974              		.loc 1 3247 6 view .LVU2899
 8975 02ac 3A46     		mov	r2, r7
 8976 02ae 0121     		movs	r1, #1
 8977 02b0 D9F80000 		ldr	r0, [r9]
 8978 02b4 FFF7FEFF 		bl	set_exp
 8979              	.LVL998:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8980              		.loc 1 3248 6 view .LVU2900
 8981 02b8 1949     		ldr	r1, .L1115+32
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8982              		.loc 1 3242 6 is_stmt 0 view .LVU2901
 8983 02ba 0327     		movs	r7, #3
 8984              	.LVL999:
 8985              	.L954:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8986              		.loc 1 3248 6 discriminator 4 view .LVU2902
 8987 02bc 1EA8     		add	r0, sp, #120
 8988 02be FFF7FEFF 		bl	scopy_spc
 8989              	.LVL1000:
 8990 02c2 3A46     		mov	r2, r7
 8991 02c4 5946     		mov	r1, fp
 8992 02c6 FFF7FEFF 		bl	num_arg_0
 8993              	.LVL1001:
 8994              	.LBB549:
3251:src/display.c **** 	      char *l=LastDisplayedNumber;
 8995              		.loc 1 3251 8 is_stmt 1 discriminator 4 view .LVU2903
3252:src/display.c **** 	      *l++=' ';
 8996              		.loc 1 3252 8 discriminator 4 view .LVU2904
3253:src/display.c **** 	      while(*b) {
ARM GAS  /tmp/ccZdZ92R.s 			page 269


 8997              		.loc 1 3253 8 discriminator 4 view .LVU2905
3253:src/display.c **** 	      while(*b) {
 8998              		.loc 1 3253 12 is_stmt 0 discriminator 4 view .LVU2906
 8999 02ca 164B     		ldr	r3, .L1115+36
3254:src/display.c **** 		*l++=*b++;
 9000              		.loc 1 3254 14 discriminator 4 view .LVU2907
 9001 02cc 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3253:src/display.c **** 	      while(*b) {
 9002              		.loc 1 3253 12 discriminator 4 view .LVU2908
 9003 02d0 2027     		movs	r7, #32
 9004 02d2 1F70     		strb	r7, [r3]
3254:src/display.c **** 		*l++=*b++;
 9005              		.loc 1 3254 8 is_stmt 1 discriminator 4 view .LVU2909
3254:src/display.c **** 		*l++=*b++;
 9006              		.loc 1 3254 13 discriminator 4 view .LVU2910
 9007 02d4 0029     		cmp	r1, #0
 9008 02d6 00F04782 		beq	.L965
 9009 02da 0333     		adds	r3, r3, #3
 9010 02dc 1EA8     		add	r0, sp, #120
 9011              	.LVL1002:
 9012              	.L947:
3255:src/display.c **** 		*l++=' ';
 9013              		.loc 1 3255 3 view .LVU2911
3255:src/display.c **** 		*l++=' ';
 9014              		.loc 1 3255 7 is_stmt 0 view .LVU2912
 9015 02de 03F8021C 		strb	r1, [r3, #-2]
3256:src/display.c **** 	      }
 9016              		.loc 1 3256 3 is_stmt 1 view .LVU2913
 9017              	.LVL1003:
3254:src/display.c **** 		*l++=*b++;
 9018              		.loc 1 3254 14 is_stmt 0 view .LVU2914
 9019 02e2 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9020              	.LVL1004:
3256:src/display.c **** 	      }
 9021              		.loc 1 3256 7 view .LVU2915
 9022 02e6 03F8017C 		strb	r7, [r3, #-1]
3254:src/display.c **** 		*l++=*b++;
 9023              		.loc 1 3254 13 is_stmt 1 view .LVU2916
 9024 02ea 1A46     		mov	r2, r3
 9025 02ec 0233     		adds	r3, r3, #2
 9026              	.LVL1005:
3254:src/display.c **** 		*l++=*b++;
 9027              		.loc 1 3254 13 is_stmt 0 view .LVU2917
 9028 02ee 0029     		cmp	r1, #0
 9029 02f0 F5D1     		bne	.L947
 9030              	.LVL1006:
 9031              	.L946:
3258:src/display.c **** 	    }
 9032              		.loc 1 3258 8 is_stmt 1 view .LVU2918
3258:src/display.c **** 	    }
 9033              		.loc 1 3258 10 is_stmt 0 view .LVU2919
 9034 02f2 0023     		movs	r3, #0
 9035 02f4 DFF83490 		ldr	r9, .L1115+44
 9036 02f8 1370     		strb	r3, [r2]
 9037              	.LVL1007:
3258:src/display.c **** 	    }
 9038              		.loc 1 3258 10 view .LVU2920
ARM GAS  /tmp/ccZdZ92R.s 			page 270


 9039              	.LBE549:
 9040              	.LBE548:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9041              		.loc 1 3263 2 is_stmt 1 view .LVU2921
 9042              	.L1071:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9043              		.loc 1 3263 2 is_stmt 0 view .LVU2922
 9044 02fa FFF7FEFF 		bl	set_annunciators
 9045              	.LVL1008:
3264:src/display.c **** 	  ShowRPN = 0;
 9046              		.loc 1 3264 2 is_stmt 1 view .LVU2923
 9047 02fe 45E7     		b	.L831
 9048              	.L1116:
 9049              		.align	2
 9050              	.L1115:
 9051 0300 00000000 		.word	StateWhileOn
 9052 0304 00000000 		.word	WasDataEntry
 9053 0308 00000000 		.word	DispMsg
 9054 030c 00000000 		.word	ShowRPN
 9055 0310 00000000 		.word	main_ram
 9056 0314 38000000 		.word	.LC26
 9057 0318 00000000 		.word	.LANCHOR21
 9058 031c 00000000 		.word	.LANCHOR25
 9059 0320 00000000 		.word	.LANCHOR19
 9060 0324 00000000 		.word	LastDisplayedNumber
 9061 0328 00000000 		.word	DispPlot
 9062 032c 00000000 		.word	ShowRegister
 9063 0330 00000000 		.word	ProgFree
 9064              	.LVL1009:
 9065              	.L1077:
 9066              	.LBB551:
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9067              		.loc 1 3016 4 view .LVU2924
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9068              		.loc 1 3016 9 is_stmt 0 view .LVU2925
 9069 0334 C14B     		ldr	r3, .L1117
 9070 0336 C24E     		ldr	r6, .L1117+4
 9071 0338 DFF85083 		ldr	r8, .L1117+80
 9072              	.LVL1010:
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9073              		.loc 1 3016 9 view .LVU2926
 9074 033c DFF85093 		ldr	r9, .L1117+84
 9075              	.LVL1011:
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9076              		.loc 1 3016 9 view .LVU2927
 9077 0340 93E80700 		ldm	r3, {r0, r1, r2}
 9078 0344 15AB     		add	r3, sp, #84
 9079 0346 03C3     		stmia	r3!, {r0, r1}
 9080 0348 0021     		movs	r1, #0
3017:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9081              		.loc 1 3017 4 view .LVU2928
 9082 034a BE48     		ldr	r0, .L1117+8
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9083              		.loc 1 3016 9 view .LVU2929
 9084 034c 1A80     		strh	r2, [r3]	@ movhi
 9085 034e CDF85E10 		str	r1, [sp, #94]	@ unaligned
3017:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
ARM GAS  /tmp/ccZdZ92R.s 			page 271


 9086              		.loc 1 3017 4 is_stmt 1 view .LVU2930
 9087 0352 FFF7FEFF 		bl	set_digits_string
 9088              	.LVL1012:
3018:src/display.c **** #ifndef REALBUILD
 9089              		.loc 1 3018 4 view .LVU2931
 9090              	.LBB552:
 9091              	.LBI552:
 407:src/display.c ****   if (res) *res++ = ch;
 9092              		.loc 1 407 14 view .LVU2932
 9093              	.LBB553:
 408:src/display.c ****   else	set_dig(base, ch);
 9094              		.loc 1 408 3 view .LVU2933
 409:src/display.c ****   return res;
 9095              		.loc 1 409 8 view .LVU2934
 9096 0356 7221     		movs	r1, #114
 9097 0358 6C20     		movs	r0, #108
 9098 035a FFF7FEFF 		bl	set_dig
 9099              	.LVL1013:
 410:src/display.c **** }
 9100              		.loc 1 410 3 view .LVU2935
 410:src/display.c **** }
 9101              		.loc 1 410 3 is_stmt 0 view .LVU2936
 9102              	.LBE553:
 9103              	.LBE552:
3020:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9104              		.loc 1 3020 4 is_stmt 1 view .LVU2937
 9105 035e BA49     		ldr	r1, .L1117+12
 9106 0360 BA48     		ldr	r0, .L1117+16
 9107 0362 FFF7FEFF 		bl	scopy
 9108              	.LVL1014:
3021:src/display.c **** #endif
 9109              		.loc 1 3021 4 view .LVU2938
 9110 0366 BA49     		ldr	r1, .L1117+20
 9111 0368 BA48     		ldr	r0, .L1117+24
 9112 036a FFF7FEFF 		bl	scopy
 9113              	.LVL1015:
3023:src/display.c **** 	  set_status(vers);
 9114              		.loc 1 3023 4 view .LVU2939
 9115 036e BA49     		ldr	r1, .L1117+28
 9116 0370 0422     		movs	r2, #4
 9117 0372 0DF15D00 		add	r0, sp, #93
 9118 0376 FFF7FEFF 		bl	xcopy
 9119              	.LVL1016:
3024:src/display.c **** 	  skip = 1;
 9120              		.loc 1 3024 4 view .LVU2940
 9121 037a 15A8     		add	r0, sp, #84
 9122 037c FFF7FEFF 		bl	set_status
 9123              	.LVL1017:
3025:src/display.c **** 	  goto nostk;
 9124              		.loc 1 3025 4 view .LVU2941
3026:src/display.c **** 	} else if (State2.confirm) {
 9125              		.loc 1 3026 4 view .LVU2942
3026:src/display.c **** 	} else if (State2.confirm) {
 9126              		.loc 1 3026 4 is_stmt 0 view .LVU2943
 9127              	.LBE551:
3217:src/display.c **** 	if (!skip) {
 9128              		.loc 1 3217 14 is_stmt 1 view .LVU2944
ARM GAS  /tmp/ccZdZ92R.s 			page 272


 9129 0380 FFF7FEFF 		bl	show_flags
 9130              	.LVL1018:
3218:src/display.c **** 	  if (State2.runmode) {
 9131              		.loc 1 3218 2 view .LVU2945
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9132              		.loc 1 3263 2 view .LVU2946
 9133 0384 FFF7FEFF 		bl	set_annunciators
 9134              	.LVL1019:
3264:src/display.c **** 	  ShowRPN = 0;
 9135              		.loc 1 3264 2 view .LVU2947
 9136 0388 00E7     		b	.L831
 9137              	.LVL1020:
 9138              	.L968:
3264:src/display.c **** 	  ShowRPN = 0;
 9139              		.loc 1 3264 2 is_stmt 0 view .LVU2948
 9140 038a 0123     		movs	r3, #1
 9141 038c 14E7     		b	.L949
 9142              	.LVL1021:
 9143              	.L911:
3228:src/display.c **** 	    } else {
 9144              		.loc 1 3228 3 is_stmt 1 view .LVU2949
 9145 038e B348     		ldr	r0, .L1117+32
 9146 0390 2421     		movs	r1, #36
 9147 0392 FFF7FEFF 		bl	set_digits_string
 9148              	.LVL1022:
3233:src/display.c **** 	      goto finish;
 9149              		.loc 1 3233 6 view .LVU2950
3233:src/display.c **** 	      goto finish;
 9150              		.loc 1 3233 9 is_stmt 0 view .LVU2951
 9151 0396 3B68     		ldr	r3, [r7]
 9152 0398 002B     		cmp	r3, #0
 9153 039a AED0     		beq	.L1071
 9154 039c B1E6     		b	.L915
 9155              	.LVL1023:
 9156              	.L1090:
3264:src/display.c **** 	  ShowRPN = 0;
 9157              		.loc 1 3264 69 discriminator 3 view .LVU2952
 9158 039e B8F90030 		ldrsh	r3, [r8]
 9159 03a2 002B     		cmp	r3, #0
 9160 03a4 7FF4F2AE 		bne	.L831
3264:src/display.c **** 	  ShowRPN = 0;
 9161              		.loc 1 3264 81 discriminator 4 view .LVU2953
 9162 03a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9163 03aa 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9164 03ac 03F00403 		and	r3, r3, #4
 9165 03b0 1343     		orrs	r3, r3, r2
 9166 03b2 7FF4EBAE 		bne	.L831
 9167 03b6 AA4F     		ldr	r7, .L1117+36
 9168 03b8 EEE6     		b	.L948
 9169              	.LVL1024:
 9170              	.L1080:
3036:src/display.c **** 	  if (State2.numdigit > 0)
 9171              		.loc 1 3036 4 is_stmt 1 view .LVU2954
3036:src/display.c **** 	  if (State2.numdigit > 0)
 9172              		.loc 1 3036 9 is_stmt 0 view .LVU2955
 9173 03ba 2E22     		movs	r2, #46
 9174 03bc A949     		ldr	r1, .L1117+40
ARM GAS  /tmp/ccZdZ92R.s 			page 273


 9175 03be 4046     		mov	r0, r8
 9176 03c0 FFF7FEFF 		bl	scopy_char
 9177              	.LVL1025:
3037:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9178              		.loc 1 3037 14 view .LVU2956
 9179 03c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3036:src/display.c **** 	  if (State2.numdigit > 0)
 9180              		.loc 1 3036 9 view .LVU2957
 9181 03c6 0346     		mov	r3, r0
 9182              	.LVL1026:
3037:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9183              		.loc 1 3037 4 is_stmt 1 view .LVU2958
3037:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9184              		.loc 1 3037 7 is_stmt 0 view .LVU2959
 9185 03c8 002A     		cmp	r2, #0
 9186 03ca 4CD1     		bne	.L1092
 9187              	.L838:
3040:src/display.c **** 	  set_status(buf);
 9188              		.loc 1 3040 4 is_stmt 1 view .LVU2960
 9189              	.LVL1027:
3040:src/display.c **** 	  set_status(buf);
 9190              		.loc 1 3040 10 is_stmt 0 view .LVU2961
 9191 03cc 5F22     		movs	r2, #95
 9192 03ce 1A70     		strb	r2, [r3]
3041:src/display.c **** 	} else if (State2.rarg) {
 9193              		.loc 1 3041 4 is_stmt 1 view .LVU2962
 9194              	.LVL1028:
 9195              	.L854:
 9196              	.LBB554:
3126:src/display.c **** 	} else if (State2.multi) {
 9197              		.loc 1 3126 4 view .LVU2963
 9198 03d0 1EA8     		add	r0, sp, #120
 9199 03d2 FFF7FEFF 		bl	set_status
 9200              	.LVL1029:
3126:src/display.c **** 	} else if (State2.multi) {
 9201              		.loc 1 3126 4 is_stmt 0 view .LVU2964
 9202              	.LBE554:
3216:src/display.c ****       nostk:	show_flags();
 9203              		.loc 1 3216 2 is_stmt 1 view .LVU2965
 9204 03d6 9A4E     		ldr	r6, .L1117+4
 9205 03d8 DFF8B082 		ldr	r8, .L1117+80
 9206 03dc FFF7FEFF 		bl	show_stack
 9207              	.LVL1030:
3217:src/display.c **** 	if (!skip) {
 9208              		.loc 1 3217 14 view .LVU2966
 9209 03e0 FFF7FEFF 		bl	show_flags
 9210              	.LVL1031:
3218:src/display.c **** 	  if (State2.runmode) {
 9211              		.loc 1 3218 2 view .LVU2967
 9212 03e4 33E7     		b	.L833
 9213              	.LVL1032:
 9214              	.L835:
3032:src/display.c **** 	  set_status(buf);
 9215              		.loc 1 3032 6 view .LVU2968
3032:src/display.c **** 	  set_status(buf);
 9216              		.loc 1 3032 12 is_stmt 0 view .LVU2969
 9217 03e6 9D23     		movs	r3, #157
ARM GAS  /tmp/ccZdZ92R.s 			page 274


 9218 03e8 954E     		ldr	r6, .L1117+4
 9219 03ea DFF8A082 		ldr	r8, .L1117+80
 9220 03ee 0370     		strb	r3, [r0]
 9221 03f0 FFE6     		b	.L836
 9222              	.LVL1033:
 9223              	.L1091:
 9224              	.LBB563:
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9225              		.loc 1 3242 6 discriminator 1 view .LVU2970
 9226 03f2 9D49     		ldr	r1, .L1117+44
 9227 03f4 07EB8703 		add	r3, r7, r7, lsl #2
3243:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9228              		.loc 1 3243 21 discriminator 1 view .LVU2971
 9229 03f8 07F00107 		and	r7, r7, #1
 9230              	.LVL1034:
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9231              		.loc 1 3242 6 discriminator 1 view .LVU2972
 9232 03fc 1944     		add	r1, r1, r3
 9233 03fe 1EA8     		add	r0, sp, #120
 9234 0400 0337     		adds	r7, r7, #3
 9235 0402 0193     		str	r3, [sp, #4]
 9236 0404 FFF7FEFF 		bl	scopy_spc
 9237              	.LVL1035:
 9238 0408 3A46     		mov	r2, r7
 9239 040a 5946     		mov	r1, fp
 9240 040c FFF7FEFF 		bl	num_arg_0
 9241              	.LVL1036:
3244:src/display.c **** #ifndef REALBUILD
 9242              		.loc 1 3244 6 is_stmt 1 discriminator 1 view .LVU2973
 9243 0410 0921     		movs	r1, #9
 9244 0412 1EA8     		add	r0, sp, #120
 9245 0414 FFF7FEFF 		bl	set_digits_string
 9246              	.LVL1037:
3246:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9247              		.loc 1 3246 6 discriminator 1 view .LVU2974
 9248 0418 2822     		movs	r2, #40
 9249 041a 5146     		mov	r1, r10
 9250 041c 1EA8     		add	r0, sp, #120
 9251 041e FFF7FEFF 		bl	xset
 9252              	.LVL1038:
3247:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9253              		.loc 1 3247 6 discriminator 1 view .LVU2975
 9254 0422 0121     		movs	r1, #1
 9255 0424 D9F80000 		ldr	r0, [r9]
 9256 0428 5246     		mov	r2, r10
 9257 042a FFF7FEFF 		bl	set_exp
 9258              	.LVL1039:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9259              		.loc 1 3248 6 discriminator 1 view .LVU2976
 9260 042e 8F49     		ldr	r1, .L1117+48
 9261 0430 019B     		ldr	r3, [sp, #4]
 9262 0432 1944     		add	r1, r1, r3
 9263 0434 42E7     		b	.L954
 9264              	.LVL1040:
 9265              	.L1082:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9266              		.loc 1 3248 6 is_stmt 0 discriminator 1 view .LVU2977
ARM GAS  /tmp/ccZdZ92R.s 			page 275


 9267              	.LBE563:
3074:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9268              		.loc 1 3074 4 is_stmt 1 view .LVU2978
3075:src/display.c **** 	  *bp++ = '_';
 9269              		.loc 1 3075 33 is_stmt 0 view .LVU2979
 9270 0436 8E4B     		ldr	r3, .L1117+52
 9271 0438 814E     		ldr	r6, .L1117+4
3075:src/display.c **** 	  *bp++ = '_';
 9272              		.loc 1 3075 10 view .LVU2980
 9273 043a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9274 043c 88F80130 		strb	r3, [r8, #1]
3074:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9275              		.loc 1 3074 10 view .LVU2981
 9276 0440 7823     		movs	r3, #120
3076:src/display.c **** 	  *bp++ = '?';
 9277              		.loc 1 3076 10 view .LVU2982
 9278 0442 5F22     		movs	r2, #95
3074:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9279              		.loc 1 3074 10 view .LVU2983
 9280 0444 88F80030 		strb	r3, [r8]
3075:src/display.c **** 	  *bp++ = '_';
 9281              		.loc 1 3075 4 is_stmt 1 view .LVU2984
 9282              	.LVL1041:
3076:src/display.c **** 	  *bp++ = '?';
 9283              		.loc 1 3076 4 view .LVU2985
3077:src/display.c **** 	  set_status(buf);
 9284              		.loc 1 3077 10 is_stmt 0 view .LVU2986
 9285 0448 3F23     		movs	r3, #63
3076:src/display.c **** 	  *bp++ = '?';
 9286              		.loc 1 3076 10 view .LVU2987
 9287 044a 88F80220 		strb	r2, [r8, #2]
3077:src/display.c **** 	  set_status(buf);
 9288              		.loc 1 3077 4 is_stmt 1 view .LVU2988
 9289              	.LVL1042:
3077:src/display.c **** 	  set_status(buf);
 9290              		.loc 1 3077 10 is_stmt 0 view .LVU2989
 9291 044e 88F80330 		strb	r3, [r8, #3]
3078:src/display.c **** 	} else if (cata) {
 9292              		.loc 1 3078 4 is_stmt 1 view .LVU2990
 9293 0452 1EA8     		add	r0, sp, #120
 9294 0454 DFF83482 		ldr	r8, .L1117+80
 9295              	.LVL1043:
3078:src/display.c **** 	} else if (cata) {
 9296              		.loc 1 3078 4 is_stmt 0 view .LVU2991
 9297 0458 FFF7FEFF 		bl	set_status
 9298              	.LVL1044:
3216:src/display.c ****       nostk:	show_flags();
 9299              		.loc 1 3216 2 is_stmt 1 view .LVU2992
 9300 045c FFF7FEFF 		bl	show_stack
 9301              	.LVL1045:
3217:src/display.c **** 	if (!skip) {
 9302              		.loc 1 3217 14 view .LVU2993
 9303 0460 FFF7FEFF 		bl	show_flags
 9304              	.LVL1046:
3218:src/display.c **** 	  if (State2.runmode) {
 9305              		.loc 1 3218 2 view .LVU2994
 9306 0464 F3E6     		b	.L833
ARM GAS  /tmp/ccZdZ92R.s 			page 276


 9307              	.LVL1047:
 9308              	.L1092:
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9309              		.loc 1 3038 6 view .LVU2995
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9310              		.loc 1 3038 11 is_stmt 0 view .LVU2996
 9311 0466 2189     		ldrh	r1, [r4, #8]
 9312 0468 FFF7FEFF 		bl	num_arg_0
 9313              	.LVL1048:
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9314              		.loc 1 3038 11 view .LVU2997
 9315 046c 0346     		mov	r3, r0
 9316              	.LVL1049:
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9317              		.loc 1 3038 11 view .LVU2998
 9318 046e ADE7     		b	.L838
 9319              	.LVL1050:
 9320              	.L1081:
3048:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9321              		.loc 1 3048 4 is_stmt 1 view .LVU2999
3048:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9322              		.loc 1 3048 35 is_stmt 0 view .LVU3000
 9323 0470 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9324 0472 8049     		ldr	r1, .L1117+56
 9325 0474 0623     		movs	r3, #6
 9326 0476 03EB0213 		add	r3, r3, r2, lsl #4
3048:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9327              		.loc 1 3048 9 view .LVU3001
 9328 047a 1944     		add	r1, r1, r3
 9329 047c 4046     		mov	r0, r8
 9330 047e FFF7FEFF 		bl	scopy
 9331              	.LVL1051:
3049:src/display.c **** 	  if (State2.dot) {
 9332              		.loc 1 3049 4 is_stmt 1 view .LVU3002
3049:src/display.c **** 	  if (State2.dot) {
 9333              		.loc 1 3049 9 is_stmt 0 view .LVU3003
 9334 0482 7D4A     		ldr	r2, .L1117+60
 9335 0484 7D4B     		ldr	r3, .L1117+64
 9336 0486 94F91510 		ldrsb	r1, [r4, #21]
 9337 048a 12EA2101 		ands	r1, r2, r1, asr #32
 9338 048e 38BF     		it	cc
 9339 0490 1946     		movcc	r1, r3
 9340 0492 FFF7FEFF 		bl	scopy
 9341              	.LVL1052:
3050:src/display.c **** 	    *bp++ = 's';
 9342              		.loc 1 3050 8 view .LVU3004
 9343 0496 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9344              	.LVL1053:
3050:src/display.c **** 	    *bp++ = 's';
 9345              		.loc 1 3050 4 is_stmt 1 view .LVU3005
3050:src/display.c **** 	    *bp++ = 's';
 9346              		.loc 1 3050 7 is_stmt 0 view .LVU3006
 9347 0498 5A06     		lsls	r2, r3, #25
 9348 049a 40F19A80 		bpl	.L841
3051:src/display.c **** 	    *bp++ = '_';
 9349              		.loc 1 3051 6 is_stmt 1 view .LVU3007
 9350              	.LVL1054:
ARM GAS  /tmp/ccZdZ92R.s 			page 277


3051:src/display.c **** 	    *bp++ = '_';
 9351              		.loc 1 3051 12 is_stmt 0 view .LVU3008
 9352 049e 7322     		movs	r2, #115
 9353              	.LVL1055:
 9354              	.L1065:
3055:src/display.c **** 	  } else {
 9355              		.loc 1 3055 12 view .LVU3009
 9356 04a0 5F23     		movs	r3, #95
 9357 04a2 674E     		ldr	r6, .L1117+4
 9358 04a4 DFF8E481 		ldr	r8, .L1117+80
3054:src/display.c **** 	    *bp++ = '_';
 9359              		.loc 1 3054 12 view .LVU3010
 9360 04a8 0270     		strb	r2, [r0]
3055:src/display.c **** 	  } else {
 9361              		.loc 1 3055 6 is_stmt 1 view .LVU3011
3055:src/display.c **** 	  } else {
 9362              		.loc 1 3055 12 is_stmt 0 view .LVU3012
 9363 04aa 4370     		strb	r3, [r0, #1]
 9364 04ac A1E6     		b	.L836
 9365              	.LVL1056:
 9366              	.L917:
 9367              	.LBB564:
 9368              	.LBB537:
1268:src/display.c **** 
 9369              		.loc 1 1268 2 is_stmt 1 view .LVU3013
 9370 04ae FFF7FEFF 		bl	set_separator_decimal_modes
 9371              	.LVL1057:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9372              		.loc 1 1270 2 view .LVU3014
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9373              		.loc 1 1272 2 view .LVU3015
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9374              		.loc 1 1272 5 is_stmt 0 view .LVU3016
 9375 04b2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9376              	.LBB522:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9377              		.loc 1 1279 15 view .LVU3017
 9378 04b4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9379              	.LBE522:
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9380              		.loc 1 1272 5 view .LVU3018
 9381 04b8 012B     		cmp	r3, #1
 9382 04ba 40F2B780 		bls	.L922
 9383              	.LVL1058:
 9384              	.LBB523:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9385              		.loc 1 1279 14 is_stmt 1 view .LVU3019
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9386              		.loc 1 1279 4 is_stmt 0 view .LVU3020
 9387 04be BCF1000F 		cmp	ip, #0
 9388 04c2 72D0     		beq	.L923
 9389 04c4 0AF10103 		add	r3, r10, #1
 9390 04c8 6046     		mov	r0, ip
 9391              	.LBE523:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9392              		.loc 1 1247 11 view .LVU3021
 9393 04ca 4FF0FF31 		mov	r1, #-1
ARM GAS  /tmp/ccZdZ92R.s 			page 278


 9394 04ce 6FEA0A0E 		mvn	lr, r10
 9395              	.LVL1059:
 9396              	.L925:
 9397              	.LBB524:
1280:src/display.c **** 	      gotdot = j;
 9398              		.loc 1 1280 9 view .LVU3022
 9399 04d2 2E28     		cmp	r0, #46
 9400 04d4 0EEB0302 		add	r2, lr, r3
 9401              	.LVL1060:
1280:src/display.c **** 	      gotdot = j;
 9402              		.loc 1 1280 6 is_stmt 1 view .LVU3023
1280:src/display.c **** 	      gotdot = j;
 9403              		.loc 1 1280 9 is_stmt 0 view .LVU3024
 9404 04d8 03D1     		bne	.L924
1280:src/display.c **** 	      gotdot = j;
 9405              		.loc 1 1280 22 view .LVU3025
 9406 04da B1F1FF3F 		cmp	r1, #-1
 9407 04de 08BF     		it	eq
 9408 04e0 1146     		moveq	r1, r2
 9409              	.LVL1061:
 9410              	.L924:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9411              		.loc 1 1279 28 is_stmt 1 view .LVU3026
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9412              		.loc 1 1279 14 view .LVU3027
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9413              		.loc 1 1279 15 is_stmt 0 view .LVU3028
 9414 04e2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9415              		.loc 1 1279 4 view .LVU3029
 9416 04e6 0028     		cmp	r0, #0
 9417 04e8 F3D1     		bne	.L925
1287:src/display.c **** 	  if (j > 0) {
 9418              		.loc 1 1287 4 is_stmt 1 view .LVU3030
1287:src/display.c **** 	  if (j > 0) {
 9419              		.loc 1 1287 6 is_stmt 0 view .LVU3031
 9420 04ea A2F10B03 		sub	r3, r2, #11
 9421              	.LVL1062:
1288:src/display.c **** 	    p += j + 1;
 9422              		.loc 1 1288 4 is_stmt 1 view .LVU3032
1288:src/display.c **** 	    p += j + 1;
 9423              		.loc 1 1288 7 is_stmt 0 view .LVU3033
 9424 04ee 002B     		cmp	r3, #0
 9425 04f0 40F34C81 		ble	.L1093
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9426              		.loc 1 1289 6 is_stmt 1 view .LVU3034
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9427              		.loc 1 1289 8 is_stmt 0 view .LVU3035
 9428 04f4 0A3A     		subs	r2, r2, #10
1291:src/display.c **** 	      gotdot = 0;
 9429              		.loc 1 1291 9 view .LVU3036
 9430 04f6 8B42     		cmp	r3, r1
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9431              		.loc 1 1289 8 view .LVU3037
 9432 04f8 9244     		add	r10, r10, r2
 9433              	.LVL1063:
1290:src/display.c **** 	    if (gotdot <= j) {
ARM GAS  /tmp/ccZdZ92R.s 			page 279


 9434              		.loc 1 1290 6 is_stmt 1 view .LVU3038
1291:src/display.c **** 	      gotdot = 0;
 9435              		.loc 1 1291 6 view .LVU3039
1291:src/display.c **** 	      gotdot = 0;
 9436              		.loc 1 1291 9 is_stmt 0 view .LVU3040
 9437 04fa 80F26581 		bge	.L962
1296:src/display.c **** 	      gotdot = 0;
 9438              		.loc 1 1296 11 is_stmt 1 view .LVU3041
1296:src/display.c **** 	      gotdot = 0;
 9439              		.loc 1 1296 14 is_stmt 0 view .LVU3042
 9440 04fe 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9441              	.LVL1064:
1296:src/display.c **** 	      gotdot = 0;
 9442              		.loc 1 1296 14 view .LVU3043
 9443 0502 2E2B     		cmp	r3, #46
 9444 0504 00F0E282 		beq	.L1094
 9445              	.LVL1065:
1303:src/display.c **** 	    overflow_to_left = 1;
 9446              		.loc 1 1303 6 is_stmt 1 view .LVU3044
 9447 0508 3C21     		movs	r1, #60
 9448 050a FFF7FEFF 		bl	set_dig
 9449              	.LVL1066:
1304:src/display.c **** 	  }
 9450              		.loc 1 1304 6 view .LVU3045
1304:src/display.c **** 	  }
 9451              		.loc 1 1304 6 is_stmt 0 view .LVU3046
 9452 050e 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1304:src/display.c **** 	  }
 9453              		.loc 1 1304 6 view .LVU3047
 9454              	.LBE524:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9455              		.loc 1 1310 9 is_stmt 1 view .LVU3048
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9456              		.loc 1 1310 2 is_stmt 0 view .LVU3049
 9457 0512 BCF1000F 		cmp	ip, #0
 9458 0516 48D0     		beq	.L923
 9459              	.LBB525:
1302:src/display.c **** 	    set_dig(0, '<');
 9460              		.loc 1 1302 18 view .LVU3050
 9461 0518 4FF0FF33 		mov	r3, #-1
1290:src/display.c **** 	    if (gotdot <= j) {
 9462              		.loc 1 1290 8 view .LVU3051
 9463 051c 4FF0090B 		mov	fp, #9
 9464              	.LVL1067:
 9465              	.L956:
1304:src/display.c **** 	  }
 9466              		.loc 1 1304 23 view .LVU3052
 9467 0520 4FF00109 		mov	r9, #1
 9468              	.LVL1068:
 9469              	.L935:
1304:src/display.c **** 	  }
 9470              		.loc 1 1304 23 view .LVU3053
 9471              	.LBE525:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9472              		.loc 1 1335 5 view .LVU3054
 9473 0524 0195     		str	r5, [sp, #4]
 9474 0526 1D46     		mov	r5, r3
ARM GAS  /tmp/ccZdZ92R.s 			page 280


 9475              	.LVL1069:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9476              		.loc 1 1335 5 view .LVU3055
 9477 0528 3346     		mov	r3, r6
 9478 052a 6246     		mov	r2, ip
 9479 052c 5646     		mov	r6, r10
 9480 052e 9A46     		mov	r10, r3
 9481 0530 08E0     		b	.L933
 9482              	.LVL1070:
 9483              	.L1095:
1325:src/display.c **** #  endif
 9484              		.loc 1 1325 11 view .LVU3056
 9485 0532 5D45     		cmp	r5, fp
 9486 0534 11D0     		beq	.L930
 9487              	.LVL1071:
 9488              	.L929:
1349:src/display.c **** 	      i += segs_per_digit;
 9489              		.loc 1 1349 8 view .LVU3057
 9490 0536 FFF7FEFF 		bl	set_dig
 9491              	.LVL1072:
1350:src/display.c **** 	    }
 9492              		.loc 1 1350 8 is_stmt 1 view .LVU3058
1350:src/display.c **** 	    }
 9493              		.loc 1 1350 10 is_stmt 0 view .LVU3059
 9494 053a 0BF1090B 		add	fp, fp, #9
 9495              	.LVL1073:
 9496              	.L931:
1314:src/display.c **** 	  if (*p == '.') {
 9497              		.loc 1 1314 11 is_stmt 1 view .LVU3060
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9498              		.loc 1 1310 9 view .LVU3061
 9499 053e 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9500              	.LVL1074:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9501              		.loc 1 1310 2 is_stmt 0 view .LVU3062
 9502 0542 8AB1     		cbz	r2, .L1067
 9503              	.LVL1075:
 9504              	.L933:
1315:src/display.c **** 	    if (gotdot < 0)
 9505              		.loc 1 1315 4 is_stmt 1 view .LVU3063
1316:src/display.c **** 	      gotdot = i;
 9506              		.loc 1 1316 6 view .LVU3064
1349:src/display.c **** 	      i += segs_per_digit;
 9507              		.loc 1 1349 8 view .LVU3065
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9508              		.loc 1 1310 20 is_stmt 0 view .LVU3066
 9509 0544 452A     		cmp	r2, #69
1349:src/display.c **** 	      i += segs_per_digit;
 9510              		.loc 1 1349 8 view .LVU3067
 9511 0546 1146     		mov	r1, r2
 9512 0548 5846     		mov	r0, fp
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9513              		.loc 1 1310 20 view .LVU3068
 9514 054a 0DD0     		beq	.L1067
1315:src/display.c **** 	    if (gotdot < 0)
 9515              		.loc 1 1315 7 view .LVU3069
 9516 054c 2E2A     		cmp	r2, #46
ARM GAS  /tmp/ccZdZ92R.s 			page 281


 9517 054e F2D1     		bne	.L929
1325:src/display.c **** #  endif
 9518              		.loc 1 1325 8 is_stmt 1 view .LVU3070
1327:src/display.c **** 		i += segs_per_digit;
 9519              		.loc 1 1327 3 view .LVU3071
 9520              	.LVL1076:
1331:src/display.c **** 		  i += segs_per_digit;
 9521              		.loc 1 1331 3 view .LVU3072
1316:src/display.c **** 	      gotdot = i;
 9522              		.loc 1 1316 9 is_stmt 0 view .LVU3073
 9523 0550 002D     		cmp	r5, #0
1327:src/display.c **** 		i += segs_per_digit;
 9524              		.loc 1 1327 3 view .LVU3074
 9525 0552 5846     		mov	r0, fp
 9526 0554 4FF02F01 		mov	r1, #47
1316:src/display.c **** 	      gotdot = i;
 9527              		.loc 1 1316 9 view .LVU3075
 9528 0558 EBDA     		bge	.L1095
 9529              	.L930:
1332:src/display.c **** 		}
 9530              		.loc 1 1332 5 is_stmt 1 view .LVU3076
 9531              	.LVL1077:
1331:src/display.c **** 		  i += segs_per_digit;
 9532              		.loc 1 1331 6 is_stmt 0 view .LVU3077
 9533 055a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9534 055c 012A     		cmp	r2, #1
 9535 055e 5CD9     		bls	.L932
 9536 0560 5D46     		mov	r5, fp
1332:src/display.c **** 		}
 9537              		.loc 1 1332 7 view .LVU3078
 9538 0562 0BF1090B 		add	fp, fp, #9
 9539              	.LVL1078:
1332:src/display.c **** 		}
 9540              		.loc 1 1332 7 view .LVU3079
 9541 0566 EAE7     		b	.L931
 9542              	.LVL1079:
 9543              	.L1067:
1359:src/display.c **** 	    gotdot = i;
 9544              		.loc 1 1359 4 is_stmt 1 view .LVU3080
 9545 0568 2B46     		mov	r3, r5
1359:src/display.c **** 	    gotdot = i;
 9546              		.loc 1 1359 7 is_stmt 0 view .LVU3081
 9547 056a 33EA2303 		bics	r3, r3, r3, asr #32
 9548 056e 28BF     		it	cs
 9549 0570 5B46     		movcs	r3, fp
 9550              	.LVL1080:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9551              		.loc 1 1361 4 is_stmt 1 view .LVU3082
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9552              		.loc 1 1362 6 view .LVU3083
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9553              		.loc 1 1362 13 is_stmt 0 view .LVU3084
 9554 0572 A3F11B0B 		sub	fp, r3, #27
 9555              	.LVL1081:
1363:src/display.c **** 	      break;
 9556              		.loc 1 1363 6 is_stmt 1 view .LVU3085
 9557 0576 5246     		mov	r2, r10
ARM GAS  /tmp/ccZdZ92R.s 			page 282


1363:src/display.c **** 	      break;
 9558              		.loc 1 1363 9 is_stmt 0 view .LVU3086
 9559 0578 BBF1000F 		cmp	fp, #0
 9560 057c B246     		mov	r10, r6
 9561 057e 019D     		ldr	r5, [sp, #4]
 9562 0580 1646     		mov	r6, r2
 9563              	.LVL1082:
1363:src/display.c **** 	      break;
 9564              		.loc 1 1363 9 view .LVU3087
 9565 0582 12DD     		ble	.L923
 9566 0584 4B46     		mov	r3, r9
 9567 0586 A946     		mov	r9, r5
 9568 0588 1D46     		mov	r5, r3
 9569              	.L939:
1366:src/display.c **** 	      break;
 9570              		.loc 1 1366 6 is_stmt 1 view .LVU3088
1369:src/display.c **** 	  }
 9571              		.loc 1 1369 6 view .LVU3089
 9572              	.LBB526:
 9573              	.LBB527:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9574              		.loc 1 370 3 view .LVU3090
 9575 058a 5846     		mov	r0, fp
 9576              	.LBE527:
 9577              	.LBE526:
1366:src/display.c **** 	      break;
 9578              		.loc 1 1366 9 is_stmt 0 view .LVU3091
 9579 058c 15B1     		cbz	r5, .L940
 9580              	.LVL1083:
1366:src/display.c **** 	      break;
 9581              		.loc 1 1366 27 view .LVU3092
 9582 058e BBF1090F 		cmp	fp, #9
 9583 0592 09D0     		beq	.L1062
 9584              	.L940:
1369:src/display.c **** 	  }
 9585              		.loc 1 1369 6 view .LVU3093
 9586 0594 3A4B     		ldr	r3, .L1117+68
 9587 0596 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9588              	.LVL1084:
 9589              	.LBB529:
 9590              	.LBI526:
 367:src/display.c ****   if (sep == SEP_NONE)
 9591              		.loc 1 367 14 is_stmt 1 view .LVU3094
 9592              	.LBB528:
 368:src/display.c ****     return res;
 9593              		.loc 1 368 3 view .LVU3095
 368:src/display.c ****     return res;
 9594              		.loc 1 368 6 is_stmt 0 view .LVU3096
 9595 0598 09B1     		cbz	r1, .L941
 9596 059a FFF7FEFF 		bl	set_separator.part.0
 9597              	.LVL1085:
 9598              	.L941:
 368:src/display.c ****     return res;
 9599              		.loc 1 368 6 view .LVU3097
 9600              	.LBE528:
 9601              	.LBE529:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
ARM GAS  /tmp/ccZdZ92R.s 			page 283


 9602              		.loc 1 1361 4 is_stmt 1 view .LVU3098
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9603              		.loc 1 1362 6 view .LVU3099
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9604              		.loc 1 1362 13 is_stmt 0 view .LVU3100
 9605 059e ABF11B0B 		sub	fp, fp, #27
 9606              	.LVL1086:
1363:src/display.c **** 	      break;
 9607              		.loc 1 1363 6 is_stmt 1 view .LVU3101
1363:src/display.c **** 	      break;
 9608              		.loc 1 1363 9 is_stmt 0 view .LVU3102
 9609 05a2 BBF1000F 		cmp	fp, #0
 9610 05a6 F0DC     		bgt	.L939
 9611              	.L1062:
1363:src/display.c **** 	      break;
 9612              		.loc 1 1363 9 view .LVU3103
 9613 05a8 4D46     		mov	r5, r9
 9614              	.LVL1087:
 9615              	.L923:
1387:src/display.c **** 	    p++;
 9616              		.loc 1 1387 4 is_stmt 1 view .LVU3104
1387:src/display.c **** 	    p++;
 9617              		.loc 1 1387 7 is_stmt 0 view .LVU3105
 9618 05aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9619 05ae 452B     		cmp	r3, #69
 9620 05b0 00F0DC80 		beq	.L1096
 9621              	.L1073:
 9622              	.LVL1088:
1387:src/display.c **** 	    p++;
 9623              		.loc 1 1387 7 view .LVU3106
 9624              	.LBE537:
 9625              	.LBE564:
3233:src/display.c **** 	      goto finish;
 9626              		.loc 1 3233 6 is_stmt 1 view .LVU3107
3233:src/display.c **** 	      goto finish;
 9627              		.loc 1 3233 9 is_stmt 0 view .LVU3108
 9628 05b4 3B68     		ldr	r3, [r7]
 9629 05b6 DFF8D890 		ldr	r9, .L1117+84
 9630 05ba 002B     		cmp	r3, #0
 9631 05bc 3FF4E0AD 		beq	.L920
 9632 05c0 9FE5     		b	.L915
 9633              	.LVL1089:
 9634              	.L1089:
 9635              	.LBB565:
 9636              	.LBB538:
1257:src/display.c **** 	p++;
 9637              		.loc 1 1257 2 is_stmt 1 view .LVU3109
 9638              	.LBB530:
 9639              	.LBI530:
 296:src/display.c **** {
 9640              		.loc 1 296 13 view .LVU3110
 9641              	.LBB531:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9642              		.loc 1 298 3 view .LVU3111
 298:src/display.c ****   set_dot(MANT_SIGN);
 9643              		.loc 1 298 25 is_stmt 0 view .LVU3112
 9644 05c2 224A     		ldr	r2, .L1117+16
ARM GAS  /tmp/ccZdZ92R.s 			page 284


 299:src/display.c **** }
 9645              		.loc 1 299 3 view .LVU3113
 9646 05c4 8120     		movs	r0, #129
 9647              	.LVL1090:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9648              		.loc 1 298 25 view .LVU3114
 9649 05c6 1370     		strb	r3, [r2]
 299:src/display.c **** }
 9650              		.loc 1 299 3 is_stmt 1 view .LVU3115
 9651              	.LBE531:
 9652              	.LBE530:
1258:src/display.c ****       }
 9653              		.loc 1 1258 3 is_stmt 0 view .LVU3116
 9654 05c8 0AF1010A 		add	r10, r10, #1
 9655              	.LVL1091:
 9656              	.LBB533:
 9657              	.LBB532:
 299:src/display.c **** }
 9658              		.loc 1 299 3 view .LVU3117
 9659 05cc FFF7FEFF 		bl	set_dot
 9660              	.LVL1092:
 9661              	.LBE532:
 9662              	.LBE533:
1258:src/display.c ****       }
 9663              		.loc 1 1258 2 is_stmt 1 view .LVU3118
1258:src/display.c ****       }
 9664              		.loc 1 1258 2 is_stmt 0 view .LVU3119
 9665 05d0 B9E5     		b	.L916
 9666              	.LVL1093:
 9667              	.L841:
1258:src/display.c ****       }
 9668              		.loc 1 1258 2 view .LVU3120
 9669              	.LBE538:
 9670              	.LBE565:
3053:src/display.c **** 	    *bp++ = '\021';
 9671              		.loc 1 3053 11 is_stmt 1 view .LVU3121
3053:src/display.c **** 	    *bp++ = '\021';
 9672              		.loc 1 3053 14 is_stmt 0 view .LVU3122
 9673 05d2 BAF1010F 		cmp	r10, #1
 9674 05d6 00F0D780 		beq	.L1097
3060:src/display.c **** 	      *bp++ = '.';
 9675              		.loc 1 3060 6 is_stmt 1 view .LVU3123
3060:src/display.c **** 	      *bp++ = '.';
 9676              		.loc 1 3060 10 is_stmt 0 view .LVU3124
 9677 05da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3060:src/display.c **** 	      *bp++ = '.';
 9678              		.loc 1 3060 9 view .LVU3125
 9679 05dc DB07     		lsls	r3, r3, #31
3061:src/display.c **** 	    if (State2.numdigit > 0) {
 9680              		.loc 1 3061 8 is_stmt 1 view .LVU3126
 9681              	.LVL1094:
3061:src/display.c **** 	    if (State2.numdigit > 0) {
 9682              		.loc 1 3061 14 is_stmt 0 view .LVU3127
 9683 05de 44BF     		itt	mi
 9684 05e0 2E23     		movmi	r3, #46
 9685 05e2 00F8013B 		strbmi	r3, [r0], #1
 9686              	.LVL1095:
ARM GAS  /tmp/ccZdZ92R.s 			page 285


3062:src/display.c **** 	      if (State2.shuffle)
 9687              		.loc 1 3062 6 is_stmt 1 view .LVU3128
3062:src/display.c **** 	      if (State2.shuffle)
 9688              		.loc 1 3062 16 is_stmt 0 view .LVU3129
 9689 05e6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3062:src/display.c **** 	      if (State2.shuffle)
 9690              		.loc 1 3062 9 view .LVU3130
 9691 05e8 8AB1     		cbz	r2, .L844
3063:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9692              		.loc 1 3063 8 is_stmt 1 view .LVU3131
3063:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9693              		.loc 1 3063 12 is_stmt 0 view .LVU3132
 9694 05ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3063:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9695              		.loc 1 3063 11 view .LVU3133
 9696 05ec 9E07     		lsls	r6, r3, #30
 9697 05ee 40F1D781 		bpl	.L845
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9698              		.loc 1 3064 3 is_stmt 1 view .LVU3134
 9699              	.LVL1096:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9700              		.loc 1 3064 17 is_stmt 0 view .LVU3135
 9701 05f2 2289     		ldrh	r2, [r4, #8]
 9702              	.LVL1097:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9703              		.loc 1 3064 34 is_stmt 1 view .LVU3136
 9704 05f4 2349     		ldr	r1, .L1117+72
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9705              		.loc 1 3064 10 is_stmt 0 view .LVU3137
 9706 05f6 0023     		movs	r3, #0
 9707              	.LVL1098:
 9708              	.L846:
3065:src/display.c **** 	      else
 9709              		.loc 1 3065 5 is_stmt 1 discriminator 3 view .LVU3138
3065:src/display.c **** 	      else
 9710              		.loc 1 3065 24 is_stmt 0 discriminator 3 view .LVU3139
 9711 05f8 02F00306 		and	r6, r2, #3
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9712              		.loc 1 3064 54 discriminator 3 view .LVU3140
 9713 05fc 0133     		adds	r3, r3, #1
 9714              	.LVL1099:
3065:src/display.c **** 	      else
 9715              		.loc 1 3065 11 discriminator 3 view .LVU3141
 9716 05fe 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9717 0600 00F8016B 		strb	r6, [r0], #1
 9718              	.LVL1100:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9719              		.loc 1 3064 53 is_stmt 1 discriminator 3 view .LVU3142
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9720              		.loc 1 3064 42 is_stmt 0 discriminator 3 view .LVU3143
 9721 0604 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9722              		.loc 1 3064 3 discriminator 3 view .LVU3144
 9723 0606 9E42     		cmp	r6, r3
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9724              		.loc 1 3064 60 discriminator 3 view .LVU3145
 9725 0608 4FEAA202 		asr	r2, r2, #2
ARM GAS  /tmp/ccZdZ92R.s 			page 286


 9726              	.LVL1101:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9727              		.loc 1 3064 34 is_stmt 1 discriminator 3 view .LVU3146
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9728              		.loc 1 3064 3 is_stmt 0 discriminator 3 view .LVU3147
 9729 060c F4DC     		bgt	.L846
 9730              	.LVL1102:
 9731              	.L844:
3070:src/display.c **** 	  }
 9732              		.loc 1 3070 6 is_stmt 1 view .LVU3148
3070:src/display.c **** 	  }
 9733              		.loc 1 3070 12 is_stmt 0 view .LVU3149
 9734 060e 5F23     		movs	r3, #95
 9735 0610 0B4E     		ldr	r6, .L1117+4
 9736 0612 DFF87880 		ldr	r8, .L1117+80
 9737 0616 0370     		strb	r3, [r0]
 9738 0618 EBE5     		b	.L836
 9739              	.LVL1103:
 9740              	.L932:
 9741              	.LBB566:
 9742              	.LBB539:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9743              		.loc 1 1335 5 is_stmt 1 view .LVU3150
 9744 061a 1B4B     		ldr	r3, .L1117+76
 9745 061c 0022     		movs	r2, #0
 9746 061e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9747 0620 ABF10900 		sub	r0, fp, #9
 9748              	.LVL1104:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9749              		.loc 1 1335 5 is_stmt 0 view .LVU3151
 9750 0624 FFF7FEFF 		bl	set_decimal
 9751              	.LVL1105:
 9752 0628 5D46     		mov	r5, fp
 9753 062a 88E7     		b	.L931
 9754              	.LVL1106:
 9755              	.L922:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9756              		.loc 1 1310 9 is_stmt 1 view .LVU3152
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9757              		.loc 1 1310 2 is_stmt 0 view .LVU3153
 9758 062c BCF1000F 		cmp	ip, #0
 9759 0630 BBD0     		beq	.L923
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9760              		.loc 1 1270 4 view .LVU3154
 9761 0632 CB46     		mov	fp, r9
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9762              		.loc 1 1247 11 view .LVU3155
 9763 0634 4FF0FF33 		mov	r3, #-1
 9764 0638 74E7     		b	.L935
 9765              	.L1118:
 9766 063a 00BF     		.align	2
 9767              	.L1117:
 9768 063c 0C000000 		.word	.LANCHOR17+12
 9769 0640 00000000 		.word	DispMsg
 9770 0644 08000000 		.word	.LC23
 9771 0648 18000000 		.word	.LC24
 9772 064c 00000000 		.word	LastDisplayedNumber
ARM GAS  /tmp/ccZdZ92R.s 			page 287


 9773 0650 34000000 		.word	.LC25
 9774 0654 00000000 		.word	LastDisplayedExponent
 9775 0658 00000000 		.word	.LANCHOR20
 9776 065c AC000000 		.word	.LC42
 9777 0660 00000000 		.word	ShowRPN
 9778 0664 56040000 		.word	argcmds+1110
 9779 0668 00000000 		.word	.LANCHOR22
 9780 066c 00000000 		.word	.LANCHOR24
 9781 0670 B4000000 		.word	.LC28
 9782 0674 00000000 		.word	argcmds
 9783 0678 00000000 		.word	.LC20
 9784 067c 04000000 		.word	.LC21
 9785 0680 00000000 		.word	.LANCHOR0
 9786 0684 BC000000 		.word	.LC27
 9787 0688 00000000 		.word	.LANCHOR1
 9788 068c 00000000 		.word	DispPlot
 9789 0690 00000000 		.word	ShowRegister
 9790              	.LVL1107:
 9791              	.L1083:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9792              		.loc 1 1247 11 view .LVU3156
 9793              	.LBE539:
 9794              	.LBE566:
 9795              	.LBB567:
3080:src/display.c **** 	  char b2[16];
 9796              		.loc 1 3080 4 is_stmt 1 view .LVU3157
3080:src/display.c **** 	  char b2[16];
 9797              		.loc 1 3080 45 is_stmt 0 view .LVU3158
 9798 0694 CC4B     		ldr	r3, .L1119
 9799 0696 1B68     		ldr	r3, [r3]
 9800 0698 B3F8DC07 		ldrh	r0, [r3, #2012]
3080:src/display.c **** 	  char b2[16];
 9801              		.loc 1 3080 22 view .LVU3159
 9802 069c C0F34610 		ubfx	r0, r0, #5, #7
 9803 06a0 FFF7FEFF 		bl	current_catalogue
 9804              	.LVL1108:
3084:src/display.c **** 	  p = catcmd(op, b2);
 9805              		.loc 1 3084 9 view .LVU3160
 9806 06a4 C949     		ldr	r1, .L1119+4
3080:src/display.c **** 	  char b2[16];
 9807              		.loc 1 3080 22 view .LVU3161
 9808 06a6 8246     		mov	r10, r0
 9809              	.LVL1109:
3081:src/display.c **** 	  const char *p;
 9810              		.loc 1 3081 4 is_stmt 1 view .LVU3162
3082:src/display.c **** 
 9811              		.loc 1 3082 4 view .LVU3163
3084:src/display.c **** 	  p = catcmd(op, b2);
 9812              		.loc 1 3084 4 view .LVU3164
3084:src/display.c **** 	  p = catcmd(op, b2);
 9813              		.loc 1 3084 9 is_stmt 0 view .LVU3165
 9814 06a8 4046     		mov	r0, r8
 9815              	.LVL1110:
3084:src/display.c **** 	  p = catcmd(op, b2);
 9816              		.loc 1 3084 9 view .LVU3166
 9817 06aa FFF7FEFF 		bl	scopy
 9818              	.LVL1111:
ARM GAS  /tmp/ccZdZ92R.s 			page 288


3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9819              		.loc 1 3085 8 view .LVU3167
 9820 06ae 08A9     		add	r1, sp, #32
3084:src/display.c **** 	  p = catcmd(op, b2);
 9821              		.loc 1 3084 9 view .LVU3168
 9822 06b0 0646     		mov	r6, r0
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9823              		.loc 1 3085 8 view .LVU3169
 9824 06b2 5046     		mov	r0, r10
 9825              	.LVL1112:
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9826              		.loc 1 3085 4 is_stmt 1 view .LVU3170
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9827              		.loc 1 3085 8 is_stmt 0 view .LVU3171
 9828 06b4 FFF7FEFF 		bl	catcmd
 9829              	.LVL1113:
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9830              		.loc 1 3086 7 view .LVU3172
 9831 06b8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9832 06ba 142B     		cmp	r3, #20
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9833              		.loc 1 3085 8 view .LVU3173
 9834 06bc 0146     		mov	r1, r0
 9835              	.LVL1114:
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9836              		.loc 1 3086 4 is_stmt 1 view .LVU3174
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9837              		.loc 1 3086 7 is_stmt 0 view .LVU3175
 9838 06be 05D0     		beq	.L849
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9839              		.loc 1 3086 29 discriminator 1 view .LVU3176
 9840 06c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9841 06c2 9807     		lsls	r0, r3, #30
 9842              	.LVL1115:
3087:src/display.c **** 	  bp = scopy(bp, p);
 9843              		.loc 1 3087 6 is_stmt 1 discriminator 1 view .LVU3177
3087:src/display.c **** 	  bp = scopy(bp, p);
 9844              		.loc 1 3087 12 is_stmt 0 discriminator 1 view .LVU3178
 9845 06c4 44BF     		itt	mi
 9846 06c6 1423     		movmi	r3, #20
 9847 06c8 06F8013B 		strbmi	r3, [r6], #1
 9848              	.LVL1116:
 9849              	.L849:
3088:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9850              		.loc 1 3088 4 is_stmt 1 view .LVU3179
3088:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9851              		.loc 1 3088 9 is_stmt 0 view .LVU3180
 9852 06cc 3046     		mov	r0, r6
 9853 06ce FFF7FEFF 		bl	scopy
 9854              	.LVL1117:
3089:src/display.c **** 	    // State2.disp_small = 1;
 9855              		.loc 1 3089 4 is_stmt 1 view .LVU3181
3089:src/display.c **** 	    // State2.disp_small = 1;
 9856              		.loc 1 3089 7 is_stmt 0 view .LVU3182
 9857 06d2 A9F11003 		sub	r3, r9, #16
 9858 06d6 012B     		cmp	r3, #1
 9859 06d8 5DD9     		bls	.L1098
ARM GAS  /tmp/ccZdZ92R.s 			page 289


3096:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9860              		.loc 1 3096 11 is_stmt 1 view .LVU3183
3096:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9861              		.loc 1 3096 15 is_stmt 0 view .LVU3184
 9862 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3096:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9863              		.loc 1 3096 14 view .LVU3185
 9864 06dc 5906     		lsls	r1, r3, #25
 9865 06de 7FF577AE 		bpl	.L854
3097:src/display.c **** 	      decNumber x, r;
 9866              		.loc 1 3097 6 is_stmt 1 view .LVU3186
3097:src/display.c **** 	      decNumber x, r;
 9867              		.loc 1 3097 9 is_stmt 0 view .LVU3187
 9868 06e2 B9F1120F 		cmp	r9, #18
 9869 06e6 00F00682 		beq	.L1099
3117:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9870              		.loc 1 3117 13 is_stmt 1 view .LVU3188
3117:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9871              		.loc 1 3117 46 is_stmt 0 view .LVU3189
 9872 06ea AAF58873 		sub	r3, r10, #272
3117:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9873              		.loc 1 3117 16 view .LVU3190
 9874 06ee 0D2B     		cmp	r3, #13
 9875 06f0 3FF66EAE 		bhi	.L854
 9876              	.LBB555:
3118:src/display.c **** 	      copyreg(&z, x);
 9877              		.loc 1 3118 8 is_stmt 1 discriminator 3 view .LVU3191
3118:src/display.c **** 	      copyreg(&z, x);
 9878              		.loc 1 3118 27 is_stmt 0 discriminator 3 view .LVU3192
 9879 06f4 B64B     		ldr	r3, .L1119+8
 9880 06f6 1E68     		ldr	r6, [r3]
 9881              	.LVL1118:
3119:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 9882              		.loc 1 3119 8 is_stmt 1 discriminator 3 view .LVU3193
 9883 06f8 15A8     		add	r0, sp, #84
 9884 06fa 3146     		mov	r1, r6
 9885 06fc FFF7FEFF 		bl	copyreg
 9886              	.LVL1119:
3120:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 9887              		.loc 1 3120 8 discriminator 3 view .LVU3194
 9888 0700 5FFA8AF0 		uxtb	r0, r10
 9889 0704 FFF7FEFF 		bl	sigma_val
 9890              	.LVL1120:
3121:src/display.c **** 	      copyreg(x, &z);
 9891              		.loc 1 3121 8 discriminator 3 view .LVU3195
 9892 0708 FFF7FEFF 		bl	is_dblmode
 9893              	.LVL1121:
 9894 070c 0021     		movs	r1, #0
 9895 070e 0246     		mov	r2, r0
 9896 0710 3046     		mov	r0, r6
 9897 0712 FFF7FEFF 		bl	set_x
 9898              	.LVL1122:
3122:src/display.c **** 	      skip = 1;
 9899              		.loc 1 3122 8 discriminator 3 view .LVU3196
 9900 0716 15A9     		add	r1, sp, #84
 9901 0718 3046     		mov	r0, r6
 9902 071a FFF7FEFF 		bl	copyreg
ARM GAS  /tmp/ccZdZ92R.s 			page 290


 9903              	.LVL1123:
3123:src/display.c **** 	    }
 9904              		.loc 1 3123 8 discriminator 3 view .LVU3197
3123:src/display.c **** 	    }
 9905              		.loc 1 3123 8 is_stmt 0 discriminator 3 view .LVU3198
 9906              	.LBE555:
3126:src/display.c **** 	} else if (State2.multi) {
 9907              		.loc 1 3126 4 is_stmt 1 discriminator 3 view .LVU3199
 9908 071e 1EA8     		add	r0, sp, #120
 9909 0720 FFF7FEFF 		bl	set_status
 9910              	.LVL1124:
3126:src/display.c **** 	} else if (State2.multi) {
 9911              		.loc 1 3126 4 is_stmt 0 discriminator 3 view .LVU3200
 9912              	.LBE567:
3216:src/display.c ****       nostk:	show_flags();
 9913              		.loc 1 3216 2 is_stmt 1 discriminator 3 view .LVU3201
 9914 0724 FFF7FEFF 		bl	show_stack
 9915              	.LVL1125:
3217:src/display.c **** 	if (!skip) {
 9916              		.loc 1 3217 14 discriminator 3 view .LVU3202
 9917 0728 FFF7FEFF 		bl	show_flags
 9918              	.LVL1126:
3218:src/display.c **** 	  if (State2.runmode) {
 9919              		.loc 1 3218 2 discriminator 3 view .LVU3203
 9920              	.L853:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9921              		.loc 1 3263 2 view .LVU3204
 9922 072c FFF7FEFF 		bl	set_annunciators
 9923              	.LVL1127:
3264:src/display.c **** 	  ShowRPN = 0;
 9924              		.loc 1 3264 2 view .LVU3205
 9925 0730 A84E     		ldr	r6, .L1119+12
 9926 0732 DFF8BC82 		ldr	r8, .L1119+40
 9927 0736 DFF8BC92 		ldr	r9, .L1119+44
 9928 073a 27E5     		b	.L831
 9929              	.LVL1128:
 9930              	.L1084:
3128:src/display.c **** 	  if (State2.numdigit > 0) {
 9931              		.loc 1 3128 4 view .LVU3206
3128:src/display.c **** 	  if (State2.numdigit > 0) {
 9932              		.loc 1 3128 42 is_stmt 0 view .LVU3207
 9933 073c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9934 073e A649     		ldr	r1, .L1119+16
 9935 0740 0423     		movs	r3, #4
 9936 0742 03EB0213 		add	r3, r3, r2, lsl #4
3128:src/display.c **** 	  if (State2.numdigit > 0) {
 9937              		.loc 1 3128 9 view .LVU3208
 9938 0746 1944     		add	r1, r1, r3
 9939 0748 4046     		mov	r0, r8
 9940 074a 2722     		movs	r2, #39
 9941 074c FFF7FEFF 		bl	scopy_char
 9942              	.LVL1129:
3129:src/display.c **** 	    *bp++ = (char) State2.digval;
 9943              		.loc 1 3129 7 view .LVU3209
 9944 0750 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9945              	.LVL1130:
3129:src/display.c **** 	    *bp++ = (char) State2.digval;
ARM GAS  /tmp/ccZdZ92R.s 			page 291


 9946              		.loc 1 3129 4 is_stmt 1 view .LVU3210
3129:src/display.c **** 	    *bp++ = (char) State2.digval;
 9947              		.loc 1 3129 7 is_stmt 0 view .LVU3211
 9948 0752 002B     		cmp	r3, #0
 9949 0754 3FF44AAD 		beq	.L1066
3130:src/display.c **** 	    if (State2.numdigit > 1)
 9950              		.loc 1 3130 6 is_stmt 1 view .LVU3212
 9951              	.LVL1131:
3130:src/display.c **** 	    if (State2.numdigit > 1)
 9952              		.loc 1 3130 14 is_stmt 0 view .LVU3213
 9953 0758 2389     		ldrh	r3, [r4, #8]
 9954 075a 0370     		strb	r3, [r0]
3131:src/display.c **** 	      *bp++ = State2.digval2;
 9955              		.loc 1 3131 6 is_stmt 1 view .LVU3214
3131:src/display.c **** 	      *bp++ = State2.digval2;
 9956              		.loc 1 3131 9 is_stmt 0 view .LVU3215
 9957 075c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9958 075e 012B     		cmp	r3, #1
3132:src/display.c **** 	  }
 9959              		.loc 1 3132 8 is_stmt 1 view .LVU3216
 9960              	.LVL1132:
3132:src/display.c **** 	  }
 9961              		.loc 1 3132 22 is_stmt 0 view .LVU3217
 9962 0760 84BF     		itt	hi
 9963 0762 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
3132:src/display.c **** 	  }
 9964              		.loc 1 3132 14 view .LVU3218
 9965 0764 4370     		strbhi	r3, [r0, #1]
 9966 0766 41E5     		b	.L1066
 9967              	.LVL1133:
 9968              	.L965:
 9969              	.LBB568:
 9970              	.LBB550:
3253:src/display.c **** 	      while(*b) {
 9971              		.loc 1 3253 10 view .LVU3219
 9972 0768 5A1C     		adds	r2, r3, #1
 9973 076a C2E5     		b	.L946
 9974              	.LVL1134:
 9975              	.L1096:
3253:src/display.c **** 	      while(*b) {
 9976              		.loc 1 3253 10 view .LVU3220
 9977              	.LBE550:
 9978              	.LBE568:
 9979              	.LBB569:
 9980              	.LBB540:
1388:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 9981              		.loc 1 1388 6 is_stmt 1 view .LVU3221
1393:src/display.c **** #  endif
 9982              		.loc 1 1393 6 view .LVU3222
 9983 076c 0AF10100 		add	r0, r10, #1
 9984              	.LVL1135:
1393:src/display.c **** #  endif
 9985              		.loc 1 1393 6 is_stmt 0 view .LVU3223
 9986 0770 FFF7FEFF 		bl	s_to_i
 9987              	.LVL1136:
1393:src/display.c **** #  endif
 9988              		.loc 1 1393 6 view .LVU3224
ARM GAS  /tmp/ccZdZ92R.s 			page 292


 9989 0774 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9990 0778 2D2B     		cmp	r3, #45
 9991 077a 0CBF     		ite	eq
 9992 077c 0621     		moveq	r1, #6
 9993 077e 0421     		movne	r1, #4
 9994 0780 0022     		movs	r2, #0
 9995 0782 FFF7FEFF 		bl	set_exp
 9996              	.LVL1137:
 9997 0786 15E7     		b	.L1073
 9998              	.LVL1138:
 9999              	.L1097:
1393:src/display.c **** #  endif
 10000              		.loc 1 1393 6 view .LVU3225
 10001              	.LBE540:
 10002              	.LBE569:
3054:src/display.c **** 	    *bp++ = '_';
 10003              		.loc 1 3054 6 is_stmt 1 view .LVU3226
3054:src/display.c **** 	    *bp++ = '_';
 10004              		.loc 1 3054 12 is_stmt 0 view .LVU3227
 10005 0788 1122     		movs	r2, #17
 10006 078a 89E6     		b	.L1065
 10007              	.LVL1139:
 10008              	.L1093:
 10009              	.LBB570:
 10010              	.LBB541:
1253:src/display.c **** #endif
 10011              		.loc 1 1253 11 view .LVU3228
 10012 078c 8146     		mov	r9, r0
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10013              		.loc 1 1270 4 view .LVU3229
 10014 078e 8346     		mov	fp, r0
 10015              	.LBB534:
1306:src/display.c **** 	}
 10016              		.loc 1 1306 16 view .LVU3230
 10017 0790 4FF0FF33 		mov	r3, #-1
 10018              	.LVL1140:
1306:src/display.c **** 	}
 10019              		.loc 1 1306 16 view .LVU3231
 10020 0794 C6E6     		b	.L935
 10021              	.LVL1141:
 10022              	.L1098:
1306:src/display.c **** 	}
 10023              		.loc 1 1306 16 view .LVU3232
 10024              	.LBE534:
 10025              	.LBE541:
 10026              	.LBE570:
 10027              	.LBB571:
3091:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10028              		.loc 1 3091 6 is_stmt 1 view .LVU3233
3091:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10029              		.loc 1 3091 9 is_stmt 0 view .LVU3234
 10030 0796 BAF5274F 		cmp	r10, #42752
 10031 079a 00F09C81 		beq	.L851
3091:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10032              		.loc 1 3091 41 discriminator 1 view .LVU3235
 10033 079e BAF5284F 		cmp	r10, #43008
 10034 07a2 00F09881 		beq	.L851
ARM GAS  /tmp/ccZdZ92R.s 			page 293


3094:src/display.c **** 	    skip = 1;
 10035              		.loc 1 3094 8 is_stmt 1 view .LVU3236
3094:src/display.c **** 	    skip = 1;
 10036              		.loc 1 3094 14 is_stmt 0 view .LVU3237
 10037 07a6 0AF07F00 		and	r0, r10, #127
 10038 07aa 0021     		movs	r1, #0
 10039 07ac FFF7FEFF 		bl	get_const
 10040              	.LVL1142:
3094:src/display.c **** 	    skip = 1;
 10041              		.loc 1 3094 8 view .LVU3238
 10042 07b0 0022     		movs	r2, #0
 10043              	.LVL1143:
 10044              	.L1069:
 10045              	.LBB556:
3115:src/display.c **** 	      skip = 1;
 10046              		.loc 1 3115 8 discriminator 1 view .LVU3239
 10047 07b2 1146     		mov	r1, r2
 10048 07b4 FFF7FEFF 		bl	set_x
 10049              	.LVL1144:
3116:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10050              		.loc 1 3116 8 is_stmt 1 discriminator 1 view .LVU3240
3116:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10051              		.loc 1 3116 8 is_stmt 0 discriminator 1 view .LVU3241
 10052              	.LBE556:
3126:src/display.c **** 	} else if (State2.multi) {
 10053              		.loc 1 3126 4 is_stmt 1 discriminator 1 view .LVU3242
 10054 07b8 1EA8     		add	r0, sp, #120
 10055 07ba FFF7FEFF 		bl	set_status
 10056              	.LVL1145:
 10057              	.L1070:
3126:src/display.c **** 	} else if (State2.multi) {
 10058              		.loc 1 3126 4 is_stmt 0 discriminator 1 view .LVU3243
 10059              	.LBE571:
3216:src/display.c ****       nostk:	show_flags();
 10060              		.loc 1 3216 2 is_stmt 1 discriminator 1 view .LVU3244
 10061 07be FFF7FEFF 		bl	show_stack
 10062              	.LVL1146:
3217:src/display.c **** 	if (!skip) {
 10063              		.loc 1 3217 14 discriminator 1 view .LVU3245
 10064 07c2 FFF7FEFF 		bl	show_flags
 10065              	.LVL1147:
3218:src/display.c **** 	  if (State2.runmode) {
 10066              		.loc 1 3218 2 discriminator 1 view .LVU3246
 10067 07c6 B1E7     		b	.L853
 10068              	.LVL1148:
 10069              	.L962:
 10070              	.LBB572:
 10071              	.LBB542:
 10072              	.LBB535:
1290:src/display.c **** 	    if (gotdot <= j) {
 10073              		.loc 1 1290 8 is_stmt 0 view .LVU3247
 10074 07c8 4FF0090B 		mov	fp, #9
 10075              	.LVL1149:
 10076              	.L927:
1303:src/display.c **** 	    overflow_to_left = 1;
 10077              		.loc 1 1303 6 is_stmt 1 view .LVU3248
 10078 07cc 3C21     		movs	r1, #60
ARM GAS  /tmp/ccZdZ92R.s 			page 294


 10079 07ce 0020     		movs	r0, #0
 10080 07d0 FFF7FEFF 		bl	set_dig
 10081              	.LVL1150:
1304:src/display.c **** 	  }
 10082              		.loc 1 1304 6 view .LVU3249
1304:src/display.c **** 	  }
 10083              		.loc 1 1304 6 is_stmt 0 view .LVU3250
 10084 07d4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1304:src/display.c **** 	  }
 10085              		.loc 1 1304 6 view .LVU3251
 10086              	.LBE535:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10087              		.loc 1 1310 9 is_stmt 1 view .LVU3252
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10088              		.loc 1 1310 2 is_stmt 0 view .LVU3253
 10089 07d8 0023     		movs	r3, #0
 10090 07da BCF1000F 		cmp	ip, #0
 10091 07de 7FF49FAE 		bne	.L956
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10092              		.loc 1 1310 2 view .LVU3254
 10093 07e2 E7E6     		b	.L1073
 10094              	.LVL1151:
 10095              	.L1086:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10096              		.loc 1 1310 2 view .LVU3255
 10097              	.LBE542:
 10098              	.LBE572:
3139:src/display.c **** 	  skip = 1;
 10099              		.loc 1 3139 4 is_stmt 1 view .LVU3256
 10100              	.LBB573:
 10101              	.LBI573:
2465:src/display.c **** 	char buf[16];
 10102              		.loc 1 2465 19 view .LVU3257
 10103              	.LBB574:
2466:src/display.c **** 	unsigned short int pc = State2.digval;
 10104              		.loc 1 2466 2 view .LVU3258
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10105              		.loc 1 2467 2 view .LVU3259
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10106              		.loc 1 2467 21 is_stmt 0 view .LVU3260
 10107 07e4 B4F80890 		ldrh	r9, [r4, #8]
 10108              	.LVL1152:
2468:src/display.c **** 	int n = nLIB(pc);
 10109              		.loc 1 2468 2 is_stmt 1 view .LVU3261
2473:src/display.c **** #ifndef REALBUILD
 10110              		.loc 1 2473 27 is_stmt 0 view .LVU3262
 10111 07e8 DFF80C82 		ldr	r8, .L1119+48
 10112              	.LVL1153:
2475:src/display.c **** #endif
 10113              		.loc 1 2475 41 view .LVU3263
 10114 07ec 7B4F     		ldr	r7, .L1119+20
2468:src/display.c **** 	int n = nLIB(pc);
 10115              		.loc 1 2468 20 view .LVU3264
 10116 07ee 4846     		mov	r0, r9
 10117 07f0 FFF7FEFF 		bl	getprog
 10118              	.LVL1154:
 10119 07f4 4FEA9936 		lsr	r6, r9, #14
ARM GAS  /tmp/ccZdZ92R.s 			page 295


2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10120              		.loc 1 2472 2 view .LVU3265
 10121 07f8 15A9     		add	r1, sp, #84
2468:src/display.c **** 	int n = nLIB(pc);
 10122              		.loc 1 2468 20 view .LVU3266
 10123 07fa 8246     		mov	r10, r0
 10124              	.LVL1155:
2469:src/display.c **** 	unsigned short int lblpc;
 10125              		.loc 1 2469 2 is_stmt 1 view .LVU3267
2470:src/display.c **** 
 10126              		.loc 1 2470 2 view .LVU3268
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10127              		.loc 1 2472 2 view .LVU3269
2473:src/display.c **** #ifndef REALBUILD
 10128              		.loc 1 2473 27 is_stmt 0 view .LVU3270
 10129 07fc 06EB8606 		add	r6, r6, r6, lsl #2
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10130              		.loc 1 2472 2 view .LVU3271
 10131 0800 FFF7FEFF 		bl	prt
 10132              	.LVL1156:
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10133              		.loc 1 2472 2 view .LVU3272
 10134 0804 FFF7FEFF 		bl	set_status
 10135              	.LVL1157:
2473:src/display.c **** #ifndef REALBUILD
 10136              		.loc 1 2473 2 is_stmt 1 view .LVU3273
 10137 0808 08EB0600 		add	r0, r8, r6
 10138 080c 0021     		movs	r1, #0
 10139 080e FFF7FEFF 		bl	set_digits_string
 10140              	.LVL1158:
2475:src/display.c **** #endif
 10141              		.loc 1 2475 2 view .LVU3274
 10142 0812 7348     		ldr	r0, .L1119+24
 10143 0814 07EB4601 		add	r1, r7, r6, lsl #1
 10144 0818 FFF7FEFF 		bl	scopy
 10145              	.LVL1159:
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10146              		.loc 1 2478 2 view .LVU3275
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10147              		.loc 1 2478 5 is_stmt 0 view .LVU3276
 10148 081c 1AF4704F 		tst	r10, #61440
 10149 0820 CDD0     		beq	.L1070
2479:src/display.c **** 	  if (lblpc != pc) {
 10150              		.loc 1 2479 4 is_stmt 1 view .LVU3277
2479:src/display.c **** 	  if (lblpc != pc) {
 10151              		.loc 1 2479 12 is_stmt 0 view .LVU3278
 10152 0822 5046     		mov	r0, r10
 10153 0824 0021     		movs	r1, #0
 10154 0826 FFF7FEFF 		bl	findmultilbl
 10155              	.LVL1160:
2479:src/display.c **** 	  if (lblpc != pc) {
 10156              		.loc 1 2479 10 view .LVU3279
 10157 082a 86B2     		uxth	r6, r0
 10158              	.LVL1161:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10159              		.loc 1 2480 4 is_stmt 1 view .LVU3280
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
ARM GAS  /tmp/ccZdZ92R.s 			page 296


 10160              		.loc 1 2480 7 is_stmt 0 view .LVU3281
 10161 082c B145     		cmp	r9, r6
2479:src/display.c **** 	  if (lblpc != pc) {
 10162              		.loc 1 2479 12 view .LVU3282
 10163 082e 8246     		mov	r10, r0
 10164              	.LVL1162:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10165              		.loc 1 2480 7 view .LVU3283
 10166 0830 C5D0     		beq	.L1070
2481:src/display.c **** 	    n = nLIB(lblpc);
 10167              		.loc 1 2481 6 is_stmt 1 view .LVU3284
 10168 0832 6C48     		ldr	r0, .L1119+28
 10169 0834 3F21     		movs	r1, #63
 10170 0836 FFF7FEFF 		bl	set_digits_string
 10171              	.LVL1163:
2482:src/display.c **** 	    if (n == REGION_RAM)
 10172              		.loc 1 2482 6 view .LVU3285
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10173              		.loc 1 2483 6 view .LVU3286
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10174              		.loc 1 2483 9 is_stmt 0 view .LVU3287
 10175 083a B60B     		lsrs	r6, r6, #14
 10176              	.LVL1164:
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10177              		.loc 1 2483 9 view .LVU3288
 10178 083c 40F07D81 		bne	.L882
2484:src/display.c **** 	    else {
 10179              		.loc 1 2484 8 is_stmt 1 view .LVU3289
 10180 0840 3246     		mov	r2, r6
 10181 0842 1FFA8AF0 		uxth	r0, r10
 10182 0846 0121     		movs	r1, #1
 10183 0848 FFF7FEFF 		bl	set_exp
 10184              	.LVL1165:
 10185 084c B7E7     		b	.L1070
 10186              	.LVL1166:
 10187              	.L1085:
2484:src/display.c **** 	    else {
 10188              		.loc 1 2484 8 is_stmt 0 view .LVU3290
 10189              	.LBE574:
 10190              	.LBE573:
3136:src/display.c **** 	  skip = 1;
 10191              		.loc 1 3136 4 is_stmt 1 view .LVU3291
 10192              	.LBB576:
 10193              	.LBI576:
2363:src/display.c **** 	int i, n;
 10194              		.loc 1 2363 19 view .LVU3292
 10195              	.LBB577:
2364:src/display.c **** 	int j = SEGS_EXP_BASE;
 10196              		.loc 1 2364 2 view .LVU3293
2365:src/display.c **** 	const int status = State2.status - 3;
 10197              		.loc 1 2365 2 view .LVU3294
2366:src/display.c **** 	char buf[16], *p = buf;
 10198              		.loc 1 2366 2 view .LVU3295
2370:src/display.c **** 	  set_status("Free:");
 10199              		.loc 1 2370 5 is_stmt 0 view .LVU3296
 10200 084e 012B     		cmp	r3, #1
2366:src/display.c **** 	char buf[16], *p = buf;
ARM GAS  /tmp/ccZdZ92R.s 			page 297


 10201              		.loc 1 2366 12 view .LVU3297
 10202 0850 A3F10307 		sub	r7, r3, #3
 10203              	.LVL1167:
2367:src/display.c **** 	unsigned int pc;
 10204              		.loc 1 2367 2 is_stmt 1 view .LVU3298
2368:src/display.c **** 
 10205              		.loc 1 2368 2 view .LVU3299
2370:src/display.c **** 	  set_status("Free:");
 10206              		.loc 1 2370 2 view .LVU3300
2370:src/display.c **** 	  set_status("Free:");
 10207              		.loc 1 2370 5 is_stmt 0 view .LVU3301
 10208 0854 00F01782 		beq	.L1100
2378:src/display.c **** 	  /* Top line */
 10209              		.loc 1 2378 7 is_stmt 1 view .LVU3302
2378:src/display.c **** 	  /* Top line */
 10210              		.loc 1 2378 10 is_stmt 0 view .LVU3303
 10211 0858 7B1C     		adds	r3, r7, #1
 10212 085a 00F07782 		beq	.L1101
 10213              	.LBB578:
2395:src/display.c **** 	  int end;
 10214              		.loc 1 2395 4 is_stmt 1 view .LVU3304
2396:src/display.c **** 	  int group = 10;
 10215              		.loc 1 2396 4 view .LVU3305
2397:src/display.c **** 	  int start = 0;
 10216              		.loc 1 2397 4 view .LVU3306
 10217              	.LVL1168:
2398:src/display.c **** 		
 10218              		.loc 1 2398 4 view .LVU3307
2400:src/display.c **** 	    base = 10 * status;
 10219              		.loc 1 2400 4 view .LVU3308
2400:src/display.c **** 	    base = 10 * status;
 10220              		.loc 1 2400 7 is_stmt 0 view .LVU3309
 10221 085e 092F     		cmp	r7, #9
 10222 0860 40F32C82 		ble	.L1102
2410:src/display.c **** 	    base = regX_idx;
 10223              		.loc 1 2410 9 is_stmt 1 view .LVU3310
2410:src/display.c **** 	    base = regX_idx;
 10224              		.loc 1 2410 12 is_stmt 0 view .LVU3311
 10225 0864 0A2F     		cmp	r7, #10
 10226 0866 00F0FE81 		beq	.L1103
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10227              		.loc 1 2418 6 is_stmt 1 view .LVU3312
 10228              	.LVL1169:
2419:src/display.c **** 	    set_status("FL.00-.15");
 10229              		.loc 1 2419 6 view .LVU3313
2420:src/display.c **** 	  }
 10230              		.loc 1 2420 6 view .LVU3314
 10231 086a 5F48     		ldr	r0, .L1119+32
 10232 086c 4FF00A0A 		mov	r10, #10
 10233 0870 FFF7FEFF 		bl	set_status
 10234              	.LVL1170:
2397:src/display.c **** 	  int start = 0;
 10235              		.loc 1 2397 8 is_stmt 0 view .LVU3315
 10236 0874 5646     		mov	r6, r10
2398:src/display.c **** 		
 10237              		.loc 1 2398 8 view .LVU3316
 10238 0876 4FF0000B 		mov	fp, #0
ARM GAS  /tmp/ccZdZ92R.s 			page 298


2420:src/display.c **** 	  }
 10239              		.loc 1 2420 6 view .LVU3317
 10240 087a 0222     		movs	r2, #2
 10241 087c 4FF00908 		mov	r8, #9
 10242              	.LVL1171:
2420:src/display.c **** 	  }
 10243              		.loc 1 2420 6 view .LVU3318
 10244 0880 0720     		movs	r0, #7
2419:src/display.c **** 	    set_status("FL.00-.15");
 10245              		.loc 1 2419 10 view .LVU3319
 10246 0882 4FF07F09 		mov	r9, #127
 10247              	.LVL1172:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10248              		.loc 1 2418 11 view .LVU3320
 10249 0886 7027     		movs	r7, #112
 10250              	.LVL1173:
 10251              	.L868:
2422:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10252              		.loc 1 2422 4 is_stmt 1 view .LVU3321
2423:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10253              		.loc 1 2423 4 view .LVU3322
 10254              	.LBB579:
 10255              	.LBI579:
 349:src/display.c ****   if (res) {
 10256              		.loc 1 349 14 view .LVU3323
 10257              	.LBB580:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10258              		.loc 1 350 3 view .LVU3324
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10259              		.loc 1 353 5 view .LVU3325
 10260 0888 0192     		str	r2, [sp, #4]
 10261 088a FFF7FEFF 		bl	set_dot
 10262              	.LVL1174:
 354:src/display.c ****       set_dot(posn+8);
 10263              		.loc 1 354 5 view .LVU3326
 10264              	.LBB581:
 10265              	.LBI581:
 349:src/display.c ****   if (res) {
 10266              		.loc 1 349 14 view .LVU3327
 10267              	.LBB582:
 357:src/display.c **** #endif
 10268              		.loc 1 357 5 view .LVU3328
 357:src/display.c **** #endif
 10269              		.loc 1 357 38 is_stmt 0 view .LVU3329
 10270 088e 019A     		ldr	r2, [sp, #4]
 10271 0890 534B     		ldr	r3, .L1119+24
 10272 0892 2E21     		movs	r1, #46
 10273 0894 9954     		strb	r1, [r3, r2]
 360:src/display.c **** }
 10274              		.loc 1 360 3 is_stmt 1 view .LVU3330
 10275              	.LVL1175:
 360:src/display.c **** }
 10276              		.loc 1 360 3 is_stmt 0 view .LVU3331
 10277              	.LBE582:
 10278              	.LBE581:
 360:src/display.c **** }
 10279              		.loc 1 360 3 is_stmt 1 view .LVU3332
ARM GAS  /tmp/ccZdZ92R.s 			page 299


 360:src/display.c **** }
 10280              		.loc 1 360 3 is_stmt 0 view .LVU3333
 10281              	.LBE580:
 10282              	.LBE579:
2424:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10283              		.loc 1 2424 4 is_stmt 1 view .LVU3334
2425:src/display.c **** 	    int k = i + base - start;
 10284              		.loc 1 2425 4 view .LVU3335
2425:src/display.c **** 	    int k = i + base - start;
 10285              		.loc 1 2425 20 view .LVU3336
 10286 0896 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10287 089a D319     		adds	r3, r2, r7
 10288 089c 0293     		str	r3, [sp, #8]
 10289 089e A7EB0B03 		sub	r3, r7, fp
 10290 08a2 CDE90335 		strd	r3, r5, [sp, #12]
 10291              	.LBB583:
 10292              	.LBB584:
 10293              	.LBB585:
 10294              	.LBB586:
 10295              	.LBB587:
 357:src/display.c **** #endif
 10296              		.loc 1 357 38 is_stmt 0 view .LVU3337
 10297 08a6 0191     		str	r1, [sp, #4]
 10298 08a8 3E44     		add	r6, r6, r7
 10299              	.LVL1176:
 10300              	.L873:
 357:src/display.c **** #endif
 10301              		.loc 1 357 38 view .LVU3338
 10302              	.LBE587:
 10303              	.LBE586:
 10304              	.LBE585:
 10305              	.LBE584:
2426:src/display.c **** 	    int l = get_user_flag(k);
 10306              		.loc 1 2426 6 is_stmt 1 view .LVU3339
2427:src/display.c **** 	    k += group;
 10307              		.loc 1 2427 6 view .LVU3340
2427:src/display.c **** 	    k += group;
 10308              		.loc 1 2427 14 is_stmt 0 view .LVU3341
 10309 08aa 039B     		ldr	r3, [sp, #12]
 10310 08ac 03EB0B00 		add	r0, r3, fp
 10311 08b0 FFF7FEFF 		bl	get_user_flag
 10312              	.LVL1177:
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10313              		.loc 1 2429 9 view .LVU3342
 10314 08b4 4E45     		cmp	r6, r9
2427:src/display.c **** 	    k += group;
 10315              		.loc 1 2427 14 view .LVU3343
 10316 08b6 0546     		mov	r5, r0
 10317              	.LVL1178:
2428:src/display.c **** 	    if (end >= k) {
 10318              		.loc 1 2428 6 is_stmt 1 view .LVU3344
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10319              		.loc 1 2429 6 view .LVU3345
2437:src/display.c **** 	    if (i == 4) {
 10320              		.loc 1 2437 8 is_stmt 0 view .LVU3346
 10321 08b8 08F10907 		add	r7, r8, #9
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
ARM GAS  /tmp/ccZdZ92R.s 			page 300


 10322              		.loc 1 2429 9 view .LVU3347
 10323 08bc 3FDD     		ble	.L1104
 10324              	.LVL1179:
 10325              	.L870:
2435:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10326              		.loc 1 2435 6 is_stmt 1 view .LVU3348
 10327 08be 2946     		mov	r1, r5
 10328 08c0 4046     		mov	r0, r8
 10329 08c2 FFF7FEFF 		bl	set_dig
 10330              	.LVL1180:
2436:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10331              		.loc 1 2436 6 view .LVU3349
 10332              	.LBB597:
 10333              	.LBI584:
 349:src/display.c ****   if (res) {
 10334              		.loc 1 349 14 view .LVU3350
 10335              	.LBB594:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10336              		.loc 1 350 3 view .LVU3351
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10337              		.loc 1 353 5 view .LVU3352
 10338 08c6 08F10700 		add	r0, r8, #7
 10339 08ca FFF7FEFF 		bl	set_dot
 10340              	.LVL1181:
 354:src/display.c ****       set_dot(posn+8);
 10341              		.loc 1 354 5 view .LVU3353
 10342              	.LBB591:
 10343              	.LBI586:
 349:src/display.c ****   if (res) {
 10344              		.loc 1 349 14 view .LVU3354
 10345              	.LBB588:
 357:src/display.c **** #endif
 10346              		.loc 1 357 5 view .LVU3355
 357:src/display.c **** #endif
 10347              		.loc 1 357 5 is_stmt 0 view .LVU3356
 10348              	.LBE588:
 10349              	.LBE591:
 10350              	.LBE594:
 10351              	.LBE597:
 10352              	.LBE583:
2425:src/display.c **** 	    int k = i + base - start;
 10353              		.loc 1 2425 39 is_stmt 1 view .LVU3357
 10354              	.LBB608:
 10355              	.LBB598:
 10356              	.LBB595:
 10357              	.LBB592:
 10358              	.LBB589:
 357:src/display.c **** #endif
 10359              		.loc 1 357 30 is_stmt 0 view .LVU3358
 10360 08ce 474B     		ldr	r3, .L1119+36
 357:src/display.c **** #endif
 10361              		.loc 1 357 38 view .LVU3359
 10362 08d0 0199     		ldr	r1, [sp, #4]
 357:src/display.c **** #endif
 10363              		.loc 1 357 30 view .LVU3360
 10364 08d2 A3FB0832 		umull	r3, r2, r3, r8
 10365 08d6 5208     		lsrs	r2, r2, #1
ARM GAS  /tmp/ccZdZ92R.s 			page 301


 357:src/display.c **** #endif
 10366              		.loc 1 357 38 view .LVU3361
 10367 08d8 414B     		ldr	r3, .L1119+24
 357:src/display.c **** #endif
 10368              		.loc 1 357 35 view .LVU3362
 10369 08da 0132     		adds	r2, r2, #1
 10370              	.LBE589:
 10371              	.LBE592:
 10372              	.LBE595:
 10373              	.LBE598:
2438:src/display.c **** 	      set_dig(j, 8);
 10374              		.loc 1 2438 9 view .LVU3363
 10375 08dc BBF1040F 		cmp	fp, #4
 10376              	.LBB599:
 10377              	.LBB596:
 10378              	.LBB593:
 10379              	.LBB590:
 357:src/display.c **** #endif
 10380              		.loc 1 357 38 view .LVU3364
 10381 08e0 03F81210 		strb	r1, [r3, r2, lsl #1]
 360:src/display.c **** }
 10382              		.loc 1 360 3 is_stmt 1 view .LVU3365
 10383              	.LVL1182:
 360:src/display.c **** }
 10384              		.loc 1 360 3 is_stmt 0 view .LVU3366
 10385              	.LBE590:
 10386              	.LBE593:
 360:src/display.c **** }
 10387              		.loc 1 360 3 is_stmt 1 view .LVU3367
 360:src/display.c **** }
 10388              		.loc 1 360 3 is_stmt 0 view .LVU3368
 10389              	.LBE596:
 10390              	.LBE599:
2437:src/display.c **** 	    if (i == 4) {
 10391              		.loc 1 2437 6 is_stmt 1 view .LVU3369
2438:src/display.c **** 	      set_dig(j, 8);
 10392              		.loc 1 2438 6 view .LVU3370
 10393              	.LBE608:
2425:src/display.c **** 	    int k = i + base - start;
 10394              		.loc 1 2425 40 is_stmt 0 view .LVU3371
 10395 08e4 0BF1010B 		add	fp, fp, #1
 10396              	.LVL1183:
2425:src/display.c **** 	    int k = i + base - start;
 10397              		.loc 1 2425 20 is_stmt 1 view .LVU3372
 10398              	.LBB609:
2438:src/display.c **** 	      set_dig(j, 8);
 10399              		.loc 1 2438 9 is_stmt 0 view .LVU3373
 10400 08e8 42D0     		beq	.L1105
2438:src/display.c **** 	      set_dig(j, 8);
 10401              		.loc 1 2438 9 view .LVU3374
 10402              	.LBE609:
2425:src/display.c **** 	    int k = i + base - start;
 10403              		.loc 1 2425 4 view .LVU3375
 10404 08ea D345     		cmp	fp, r10
 10405 08ec 06F10106 		add	r6, r6, #1
 10406 08f0 01D0     		beq	.L1106
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
ARM GAS  /tmp/ccZdZ92R.s 			page 302


 10407              		.loc 1 2418 11 view .LVU3376
 10408 08f2 B846     		mov	r8, r7
 10409 08f4 D9E7     		b	.L873
 10410              	.L1106:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10411              		.loc 1 2418 11 view .LVU3377
 10412 08f6 049D     		ldr	r5, [sp, #16]
 10413              	.LVL1184:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10414              		.loc 1 2418 11 view .LVU3378
 10415 08f8 334F     		ldr	r7, .L1119
 10416              	.LVL1185:
 10417              	.L863:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10418              		.loc 1 2418 11 view .LVU3379
 10419              	.LBE578:
2446:src/display.c **** 	pc = state_pc();
 10420              		.loc 1 2446 2 is_stmt 1 view .LVU3380
2447:src/display.c **** 	if (isXROM(pc))
 10421              		.loc 1 2447 2 view .LVU3381
2447:src/display.c **** 	if (isXROM(pc))
 10422              		.loc 1 2447 7 is_stmt 0 view .LVU3382
 10423 08fa 3B68     		ldr	r3, [r7]
2447:src/display.c **** 	if (isXROM(pc))
 10424              		.loc 1 2447 5 view .LVU3383
 10425 08fc B3F8E077 		ldrh	r7, [r3, #2016]
 10426              	.LVL1186:
2448:src/display.c **** 	  pc = 1;
 10427              		.loc 1 2448 2 is_stmt 1 view .LVU3384
2448:src/display.c **** 	  pc = 1;
 10428              		.loc 1 2448 6 is_stmt 0 view .LVU3385
 10429 0900 BB0B     		lsrs	r3, r7, #14
2449:src/display.c **** 	for (n=i=0; i<4; i++) {
 10430              		.loc 1 2449 7 view .LVU3386
 10431 0902 032B     		cmp	r3, #3
 10432 0904 08BF     		it	eq
 10433 0906 0127     		moveq	r7, #1
 10434              	.LVL1187:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10435              		.loc 1 2450 2 is_stmt 1 view .LVU3387
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10436              		.loc 1 2450 14 view .LVU3388
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10437              		.loc 1 2450 8 is_stmt 0 view .LVU3389
 10438 0908 4FF00009 		mov	r9, #0
 10439 090c 6426     		movs	r6, #100
2446:src/display.c **** 	pc = state_pc();
 10440              		.loc 1 2446 4 view .LVU3390
 10441 090e 4FF06C08 		mov	r8, #108
 10442              	.LVL1188:
 10443              	.L877:
2451:src/display.c **** 	    if (++n == 4) {
 10444              		.loc 1 2451 4 is_stmt 1 view .LVU3391
2451:src/display.c **** 	    if (++n == 4) {
 10445              		.loc 1 2451 8 is_stmt 0 view .LVU3392
 10446 0912 0222     		movs	r2, #2
 10447 0914 3146     		mov	r1, r6
ARM GAS  /tmp/ccZdZ92R.s 			page 303


 10448 0916 3846     		mov	r0, r7
 10449 0918 FFF7FEFF 		bl	find_label_from
 10450              	.LVL1189:
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10451              		.loc 1 2452 6 is_stmt 1 view .LVU3393
2451:src/display.c **** 	    if (++n == 4) {
 10452              		.loc 1 2451 7 is_stmt 0 view .LVU3394
 10453 091c 58B1     		cbz	r0, .L875
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10454              		.loc 1 2452 9 view .LVU3395
 10455 091e 09F10109 		add	r9, r9, #1
 10456              	.LVL1190:
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10457              		.loc 1 2456 8 is_stmt 1 view .LVU3396
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10458              		.loc 1 2452 9 is_stmt 0 view .LVU3397
 10459 0922 B9F1040F 		cmp	r9, #4
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10460              		.loc 1 2456 8 view .LVU3398
 10461 0926 A6F12301 		sub	r1, r6, #35
 10462 092a 4046     		mov	r0, r8
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10463              		.loc 1 2452 9 view .LVU3399
 10464 092c 17D0     		beq	.L1107
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10465              		.loc 1 2456 8 view .LVU3400
 10466 092e FFF7FEFF 		bl	set_dig
 10467              	.LVL1191:
2457:src/display.c **** 	    }
 10468              		.loc 1 2457 8 is_stmt 1 view .LVU3401
2457:src/display.c **** 	    }
 10469              		.loc 1 2457 10 is_stmt 0 view .LVU3402
 10470 0932 08F10708 		add	r8, r8, #7
 10471              	.LVL1192:
 10472              	.L875:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10473              		.loc 1 2450 19 is_stmt 1 view .LVU3403
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10474              		.loc 1 2450 14 view .LVU3404
 10475 0936 0136     		adds	r6, r6, #1
 10476              	.LVL1193:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10477              		.loc 1 2450 2 is_stmt 0 view .LVU3405
 10478 0938 682E     		cmp	r6, #104
 10479 093a EAD1     		bne	.L877
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10480              		.loc 1 2450 2 view .LVU3406
 10481 093c 3FE7     		b	.L1070
 10482              	.LVL1194:
 10483              	.L1104:
 10484              	.LBB612:
 10485              	.LBB610:
2430:src/display.c **** 	      k += group;
 10486              		.loc 1 2430 8 is_stmt 1 view .LVU3407
2430:src/display.c **** 	      k += group;
 10487              		.loc 1 2430 14 is_stmt 0 view .LVU3408
 10488 093e 3046     		mov	r0, r6
ARM GAS  /tmp/ccZdZ92R.s 			page 304


 10489              	.LVL1195:
2430:src/display.c **** 	      k += group;
 10490              		.loc 1 2430 14 view .LVU3409
 10491 0940 FFF7FEFF 		bl	get_user_flag
 10492              	.LVL1196:
 10493 0944 029B     		ldr	r3, [sp, #8]
 10494 0946 03EB0B02 		add	r2, r3, fp
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10495              		.loc 1 2432 11 view .LVU3410
 10496 094a 4A45     		cmp	r2, r9
2430:src/display.c **** 	      k += group;
 10497              		.loc 1 2430 10 view .LVU3411
 10498 094c 45EA4005 		orr	r5, r5, r0, lsl #1
 10499              	.LVL1197:
2431:src/display.c **** 	      if (end >= k)
 10500              		.loc 1 2431 8 is_stmt 1 view .LVU3412
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10501              		.loc 1 2432 8 view .LVU3413
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10502              		.loc 1 2432 11 is_stmt 0 view .LVU3414
 10503 0950 B5DC     		bgt	.L870
2433:src/display.c **** 	    }
 10504              		.loc 1 2433 3 is_stmt 1 view .LVU3415
2433:src/display.c **** 	    }
 10505              		.loc 1 2433 9 is_stmt 0 view .LVU3416
 10506 0952 1046     		mov	r0, r2
 10507 0954 FFF7FEFF 		bl	get_user_flag
 10508              	.LVL1198:
2433:src/display.c **** 	    }
 10509              		.loc 1 2433 5 view .LVU3417
 10510 0958 45EA8005 		orr	r5, r5, r0, lsl #2
 10511              	.LVL1199:
2433:src/display.c **** 	    }
 10512              		.loc 1 2433 5 view .LVU3418
 10513 095c AFE7     		b	.L870
 10514              	.LVL1200:
 10515              	.L1107:
2433:src/display.c **** 	    }
 10516              		.loc 1 2433 5 view .LVU3419
 10517              	.LBE610:
 10518              	.LBE612:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10519              		.loc 1 2453 8 is_stmt 1 view .LVU3420
 10520 095e 4C21     		movs	r1, #76
 10521 0960 7320     		movs	r0, #115
 10522              	.LVL1201:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10523              		.loc 1 2453 8 is_stmt 0 view .LVU3421
 10524 0962 FFF7FEFF 		bl	set_dig
 10525              	.LVL1202:
2454:src/display.c **** 	    } else {
 10526              		.loc 1 2454 8 is_stmt 1 view .LVU3422
 10527 0966 4C21     		movs	r1, #76
 10528 0968 7A20     		movs	r0, #122
 10529 096a FFF7FEFF 		bl	set_dig
 10530              	.LVL1203:
 10531 096e E2E7     		b	.L875
ARM GAS  /tmp/ccZdZ92R.s 			page 305


 10532              	.LVL1204:
 10533              	.L1105:
 10534              	.LBB613:
 10535              	.LBB611:
2439:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10536              		.loc 1 2439 8 view .LVU3423
 10537 0970 0821     		movs	r1, #8
 10538 0972 3846     		mov	r0, r7
 10539 0974 FFF7FEFF 		bl	set_dig
 10540              	.LVL1205:
2440:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10541              		.loc 1 2440 8 view .LVU3424
 10542              	.LBB600:
 10543              	.LBI600:
 349:src/display.c ****   if (res) {
 10544              		.loc 1 349 14 view .LVU3425
 10545              	.LBB601:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10546              		.loc 1 350 3 view .LVU3426
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10547              		.loc 1 353 5 view .LVU3427
 10548 0978 08F11000 		add	r0, r8, #16
 10549 097c FFF7FEFF 		bl	set_dot
 10550              	.LVL1206:
 354:src/display.c ****       set_dot(posn+8);
 10551              		.loc 1 354 5 view .LVU3428
 10552              	.LBB602:
 10553              	.LBI602:
 349:src/display.c ****   if (res) {
 10554              		.loc 1 349 14 view .LVU3429
 10555              	.LBB603:
 357:src/display.c **** #endif
 10556              		.loc 1 357 5 view .LVU3430
 357:src/display.c **** #endif
 10557              		.loc 1 357 30 is_stmt 0 view .LVU3431
 10558 0980 1A4B     		ldr	r3, .L1119+36
 357:src/display.c **** #endif
 10559              		.loc 1 357 38 view .LVU3432
 10560 0982 0199     		ldr	r1, [sp, #4]
 357:src/display.c **** #endif
 10561              		.loc 1 357 30 view .LVU3433
 10562 0984 A3FB0723 		umull	r2, r3, r3, r7
 10563 0988 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 10564              		.loc 1 357 38 view .LVU3434
 10565 098a 154A     		ldr	r2, .L1119+24
 357:src/display.c **** #endif
 10566              		.loc 1 357 35 view .LVU3435
 10567 098c 0133     		adds	r3, r3, #1
 10568              	.LBE603:
 10569              	.LBE602:
 10570              	.LBE601:
 10571              	.LBE600:
2441:src/display.c **** 	    }
 10572              		.loc 1 2441 10 view .LVU3436
 10573 098e 08F11207 		add	r7, r8, #18
 10574              	.LVL1207:
ARM GAS  /tmp/ccZdZ92R.s 			page 306


 10575              	.LBB607:
 10576              	.LBB606:
 10577              	.LBB605:
 10578              	.LBB604:
 357:src/display.c **** #endif
 10579              		.loc 1 357 38 view .LVU3437
 10580 0992 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 10581              		.loc 1 360 3 is_stmt 1 view .LVU3438
 10582              	.LVL1208:
 360:src/display.c **** }
 10583              		.loc 1 360 3 is_stmt 0 view .LVU3439
 10584              	.LBE604:
 10585              	.LBE605:
 360:src/display.c **** }
 10586              		.loc 1 360 3 is_stmt 1 view .LVU3440
 360:src/display.c **** }
 10587              		.loc 1 360 3 is_stmt 0 view .LVU3441
 10588              	.LBE606:
 10589              	.LBE607:
2441:src/display.c **** 	    }
 10590              		.loc 1 2441 8 is_stmt 1 view .LVU3442
2441:src/display.c **** 	    }
 10591              		.loc 1 2441 8 is_stmt 0 view .LVU3443
 10592              	.LBE611:
2425:src/display.c **** 	    int k = i + base - start;
 10593              		.loc 1 2425 39 is_stmt 1 view .LVU3444
2425:src/display.c **** 	    int k = i + base - start;
 10594              		.loc 1 2425 20 view .LVU3445
 10595 0996 0136     		adds	r6, r6, #1
2425:src/display.c **** 	    int k = i + base - start;
 10596              		.loc 1 2425 40 is_stmt 0 view .LVU3446
 10597 0998 4FF0050B 		mov	fp, #5
 10598              	.LVL1209:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10599              		.loc 1 2418 11 view .LVU3447
 10600 099c B846     		mov	r8, r7
 10601 099e 84E7     		b	.L873
 10602              	.LVL1210:
 10603              	.L845:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10604              		.loc 1 2418 11 view .LVU3448
 10605              	.LBE613:
 10606              	.LBE577:
 10607              	.LBE576:
3067:src/display.c **** 	    }
 10608              		.loc 1 3067 3 is_stmt 1 view .LVU3449
3067:src/display.c **** 	    }
 10609              		.loc 1 3067 8 is_stmt 0 view .LVU3450
 10610 09a0 2189     		ldrh	r1, [r4, #8]
 10611 09a2 FFF7FEFF 		bl	num_arg_0
 10612              	.LVL1211:
3067:src/display.c **** 	    }
 10613              		.loc 1 3067 8 view .LVU3451
 10614 09a6 32E6     		b	.L844
 10615              	.LVL1212:
 10616              	.L895:
ARM GAS  /tmp/ccZdZ92R.s 			page 307


3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10617              		.loc 1 3154 11 is_stmt 1 view .LVU3452
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10618              		.loc 1 3154 15 is_stmt 0 view .LVU3453
 10619 09a8 DFF84480 		ldr	r8, .L1119+40
 10620              	.LVL1213:
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10621              		.loc 1 3154 15 view .LVU3454
 10622 09ac B8F90030 		ldrsh	r3, [r8]
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10623              		.loc 1 3154 14 view .LVU3455
 10624 09b0 002B     		cmp	r3, #0
 10625 09b2 40F01381 		bne	.L1108
3156:src/display.c **** #if 0
 10626              		.loc 1 3156 11 is_stmt 1 view .LVU3456
3156:src/display.c **** #if 0
 10627              		.loc 1 3156 14 is_stmt 0 view .LVU3457
 10628 09b6 0907     		lsls	r1, r1, #28
 10629 09b8 00F1D880 		bmi	.L1109
 10630              	.LVL1214:
3216:src/display.c ****       nostk:	show_flags();
 10631              		.loc 1 3216 2 is_stmt 1 view .LVU3458
 10632 09bc FFF7FEFF 		bl	show_stack
 10633              	.LVL1215:
3217:src/display.c **** 	if (!skip) {
 10634              		.loc 1 3217 14 view .LVU3459
3186:src/display.c **** 	  }
 10635              		.loc 1 3186 12 is_stmt 0 view .LVU3460
 10636 09c0 0125     		movs	r5, #1
3217:src/display.c **** 	if (!skip) {
 10637              		.loc 1 3217 14 view .LVU3461
 10638 09c2 FFF7FEFF 		bl	show_flags
 10639              	.LVL1216:
3218:src/display.c **** 	  if (State2.runmode) {
 10640              		.loc 1 3218 2 is_stmt 1 view .LVU3462
 10641 09c6 42E4     		b	.L833
 10642              	.L1120:
 10643              		.align	2
 10644              	.L1119:
 10645 09c8 00000000 		.word	main_ram
 10646 09cc 3C000000 		.word	.LC29
 10647 09d0 00000000 		.word	StackBase
 10648 09d4 00000000 		.word	DispMsg
 10649 09d8 00000000 		.word	multicmds
 10650 09dc 00000000 		.word	.LANCHOR23
 10651 09e0 00000000 		.word	LastDisplayedNumber
 10652 09e4 98000000 		.word	.LC39
 10653 09e8 8C000000 		.word	.LC38
 10654 09ec 398EE338 		.word	954437177
 10655 09f0 00000000 		.word	DispPlot
 10656 09f4 00000000 		.word	ShowRegister
 10657 09f8 00000000 		.word	.LANCHOR22
 10658              	.LVL1217:
 10659              	.L894:
3192:src/display.c **** 	  if (i > 0)
 10660              		.loc 1 3192 4 view .LVU3463
3192:src/display.c **** 	  if (i > 0)
ARM GAS  /tmp/ccZdZ92R.s 			page 308


 10661              		.loc 1 3192 8 is_stmt 0 view .LVU3464
 10662 09fc C44B     		ldr	r3, .L1121
 10663 09fe 1B68     		ldr	r3, [r3]
 10664 0a00 B3F8E007 		ldrh	r0, [r3, #2016]
 10665              	.LVL1218:
3193:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10666              		.loc 1 3193 4 is_stmt 1 view .LVU3465
3193:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10667              		.loc 1 3193 7 is_stmt 0 view .LVU3466
 10668 0a04 0028     		cmp	r0, #0
 10669 0a06 72D0     		beq	.L905
3194:src/display.c **** 	  else
 10670              		.loc 1 3194 6 is_stmt 1 view .LVU3467
 10671 0a08 FFF7FEFF 		bl	getprog
 10672              	.LVL1219:
3194:src/display.c **** 	  else
 10673              		.loc 1 3194 6 is_stmt 0 view .LVU3468
 10674 0a0c 1EA9     		add	r1, sp, #120
 10675 0a0e FFF7FEFF 		bl	prt
 10676              	.LVL1220:
 10677 0a12 FFF7FEFF 		bl	set_status
 10678              	.LVL1221:
 10679              	.L906:
3197:src/display.c **** #if 0
 10680              		.loc 1 3197 4 is_stmt 1 view .LVU3469
 10681 0a16 8920     		movs	r0, #137
 10682 0a18 FFF7FEFF 		bl	set_dot
 10683              	.LVL1222:
3212:src/display.c **** 	      annuc = 1;
 10684              		.loc 1 3212 6 view .LVU3470
3212:src/display.c **** 	      annuc = 1;
 10685              		.loc 1 3212 10 is_stmt 0 view .LVU3471
 10686 0a1c FFF7FEFF 		bl	cur_shift
 10687              	.LVL1223:
3212:src/display.c **** 	      annuc = 1;
 10688              		.loc 1 3212 49 view .LVU3472
 10689 0a20 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10690 0a22 03F00603 		and	r3, r3, #6
 10691 0a26 1843     		orrs	r0, r0, r3
 10692 0a28 10F0FF0F 		tst	r0, #255
 10693 0a2c 46D1     		bne	.L907
3217:src/display.c **** 	if (!skip) {
 10694              		.loc 1 3217 14 is_stmt 1 view .LVU3473
 10695 0a2e FFF7FEFF 		bl	show_flags
 10696              	.LVL1224:
3218:src/display.c **** 	  if (State2.runmode) {
 10697              		.loc 1 3218 2 view .LVU3474
 10698 0a32 B84E     		ldr	r6, .L1121+4
 10699 0a34 DFF81083 		ldr	r8, .L1121+56
 10700              	.LVL1225:
3218:src/display.c **** 	  if (State2.runmode) {
 10701              		.loc 1 3218 2 is_stmt 0 view .LVU3475
 10702 0a38 09E4     		b	.L833
 10703              	.LVL1226:
 10704              	.L1087:
3142:src/display.c **** 	  skip = 1;
 10705              		.loc 1 3142 4 is_stmt 1 view .LVU3476
ARM GAS  /tmp/ccZdZ92R.s 			page 309


 10706              	.LBB617:
 10707              	.LBI617:
2496:src/display.c **** 	char buf[16], *bp;
 10708              		.loc 1 2496 19 view .LVU3477
 10709              	.LBB618:
2497:src/display.c **** 	int n = State2.digval;
 10710              		.loc 1 2497 2 view .LVU3478
2498:src/display.c **** 	
 10711              		.loc 1 2498 2 view .LVU3479
2498:src/display.c **** 	
 10712              		.loc 1 2498 6 is_stmt 0 view .LVU3480
 10713 0a3a B4F80880 		ldrh	r8, [r4, #8]
 10714              	.LVL1227:
2505:src/display.c **** 	  n;
 10715              		.loc 1 2505 2 is_stmt 1 view .LVU3481
2505:src/display.c **** 	  n;
 10716              		.loc 1 2505 54 is_stmt 0 view .LVU3482
 10717 0a3e CA07     		lsls	r2, r1, #31
 10718 0a40 4CBF     		ite	mi
 10719 0a42 08F17007 		addmi	r7, r8, #112
2498:src/display.c **** 	
 10720              		.loc 1 2498 6 view .LVU3483
 10721 0a46 4746     		movpl	r7, r8
 10722              	.LVL1228:
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10723              		.loc 1 2509 2 is_stmt 1 view .LVU3484
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10724              		.loc 1 2509 5 is_stmt 0 view .LVU3485
 10725 0a48 11F00401 		ands	r1, r1, #4
 10726 0a4c 1AD0     		beq	.L885
2510:src/display.c **** 	}
 10727              		.loc 1 2510 4 is_stmt 1 view .LVU3486
2510:src/display.c **** 	}
 10728              		.loc 1 2510 15 is_stmt 0 view .LVU3487
 10729 0a4e 15A9     		add	r1, sp, #84
 10730 0a50 3846     		mov	r0, r7
 10731 0a52 FFF7FEFF 		bl	alpha_rcl_s
 10732              	.LVL1229:
2510:src/display.c **** 	}
 10733              		.loc 1 2510 4 view .LVU3488
 10734 0a56 FFF7FEFF 		bl	set_status
 10735              	.LVL1230:
 10736              	.L886:
2532:src/display.c ****       }
 10737              		.loc 1 2532 2 is_stmt 1 view .LVU3489
 10738 0a5a 3846     		mov	r0, r7
 10739 0a5c 0021     		movs	r1, #0
 10740 0a5e FFF7FEFF 		bl	format_reg
 10741              	.LVL1231:
 10742              	.LBE618:
 10743              	.LBE617:
3143:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10744              		.loc 1 3143 4 view .LVU3490
3144:src/display.c **** 	    annunciators();
 10745              		.loc 1 3144 4 view .LVU3491
3144:src/display.c **** 	    annunciators();
 10746              		.loc 1 3144 7 is_stmt 0 view .LVU3492
ARM GAS  /tmp/ccZdZ92R.s 			page 310


 10747 0a62 BAF1000F 		cmp	r10, #0
 10748 0a66 0AD1     		bne	.L892
3144:src/display.c **** 	    annunciators();
 10749              		.loc 1 3144 25 discriminator 1 view .LVU3493
 10750 0a68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10751 0a6a 012B     		cmp	r3, #1
 10752 0a6c 7FF4A7AE 		bne	.L1070
3144:src/display.c **** 	    annunciators();
 10753              		.loc 1 3144 56 discriminator 2 view .LVU3494
 10754 0a70 A74B     		ldr	r3, .L1121
 10755 0a72 1B68     		ldr	r3, [r3]
 10756 0a74 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10757 0a78 DE07     		lsls	r6, r3, #31
 10758 0a7a 7FF5A0AE 		bpl	.L1070
 10759              	.L892:
3145:src/display.c **** 	  }
 10760              		.loc 1 3145 6 is_stmt 1 view .LVU3495
 10761 0a7e FFF7FEFF 		bl	annunciators
 10762              	.LVL1232:
3216:src/display.c ****       nostk:	show_flags();
 10763              		.loc 1 3216 2 view .LVU3496
 10764 0a82 9CE6     		b	.L1070
 10765              	.LVL1233:
 10766              	.L885:
 10767              	.LBB621:
 10768              	.LBB619:
2513:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10769              		.loc 1 2513 4 view .LVU3497
 10770 0a84 15AE     		add	r6, sp, #84
 10771 0a86 1022     		movs	r2, #16
 10772 0a88 3046     		mov	r0, r6
 10773 0a8a FFF7FEFF 		bl	xset
 10774              	.LVL1234:
2517:src/display.c **** #endif
 10775              		.loc 1 2517 4 view .LVU3498
2517:src/display.c **** #endif
 10776              		.loc 1 2517 9 is_stmt 0 view .LVU3499
 10777 0a8e A249     		ldr	r1, .L1121+8
 10778 0a90 3046     		mov	r0, r6
 10779 0a92 FFF7FEFF 		bl	scopy_spc
 10780              	.LVL1235:
2519:src/display.c **** 	    *bp++ = '.';
 10781              		.loc 1 2519 8 view .LVU3500
 10782 0a96 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10783              	.LVL1236:
2519:src/display.c **** 	    *bp++ = '.';
 10784              		.loc 1 2519 4 is_stmt 1 view .LVU3501
2519:src/display.c **** 	    *bp++ = '.';
 10785              		.loc 1 2519 7 is_stmt 0 view .LVU3502
 10786 0a98 DB07     		lsls	r3, r3, #31
 10787 0a9a 40F1DA80 		bpl	.L887
2520:src/display.c **** 	    if (n >= 100) {
 10788              		.loc 1 2520 6 is_stmt 1 view .LVU3503
 10789              	.LVL1237:
2520:src/display.c **** 	    if (n >= 100) {
 10790              		.loc 1 2520 12 is_stmt 0 view .LVU3504
 10791 0a9e 2E23     		movs	r3, #46
ARM GAS  /tmp/ccZdZ92R.s 			page 311


2521:src/display.c **** 	      *bp++ = '1';
 10792              		.loc 1 2521 9 view .LVU3505
 10793 0aa0 B8F1630F 		cmp	r8, #99
2520:src/display.c **** 	    if (n >= 100) {
 10794              		.loc 1 2520 12 view .LVU3506
 10795 0aa4 0370     		strb	r3, [r0]
2521:src/display.c **** 	      *bp++ = '1';
 10796              		.loc 1 2521 6 is_stmt 1 view .LVU3507
2521:src/display.c **** 	      *bp++ = '1';
 10797              		.loc 1 2521 9 is_stmt 0 view .LVU3508
 10798 0aa6 00F3CF80 		bgt	.L888
2520:src/display.c **** 	    if (n >= 100) {
 10799              		.loc 1 2520 9 view .LVU3509
 10800 0aaa 0130     		adds	r0, r0, #1
 10801              	.LVL1238:
 10802              	.L889:
2527:src/display.c **** 	  else
 10803              		.loc 1 2527 6 is_stmt 1 view .LVU3510
2527:src/display.c **** 	  else
 10804              		.loc 1 2527 11 is_stmt 0 view .LVU3511
 10805 0aac 4146     		mov	r1, r8
 10806 0aae 0222     		movs	r2, #2
 10807 0ab0 FFF7FEFF 		bl	num_arg_0
 10808              	.LVL1239:
 10809              	.L891:
2530:src/display.c **** 	}
 10810              		.loc 1 2530 4 is_stmt 1 view .LVU3512
 10811 0ab4 3046     		mov	r0, r6
 10812 0ab6 FFF7FEFF 		bl	set_status
 10813              	.LVL1240:
 10814 0aba CEE7     		b	.L886
 10815              	.LVL1241:
 10816              	.L907:
2530:src/display.c **** 	}
 10817              		.loc 1 2530 4 is_stmt 0 view .LVU3513
 10818              	.LBE619:
 10819              	.LBE621:
3213:src/display.c **** 	  goto nostk;
 10820              		.loc 1 3213 8 is_stmt 1 view .LVU3514
3217:src/display.c **** 	if (!skip) {
 10821              		.loc 1 3217 14 view .LVU3515
 10822 0abc FFF7FEFF 		bl	show_flags
 10823              	.LVL1242:
3218:src/display.c **** 	  if (State2.runmode) {
 10824              		.loc 1 3218 2 view .LVU3516
 10825 0ac0 944E     		ldr	r6, .L1121+4
 10826 0ac2 DFF88482 		ldr	r8, .L1121+56
 10827              	.LVL1243:
3213:src/display.c **** 	  goto nostk;
 10828              		.loc 1 3213 14 is_stmt 0 view .LVU3517
 10829 0ac6 0125     		movs	r5, #1
 10830 0ac8 FFF7C1BB 		b	.L833
 10831              	.LVL1244:
 10832              	.L1094:
 10833              	.LBB622:
 10834              	.LBB543:
 10835              	.LBB536:
ARM GAS  /tmp/ccZdZ92R.s 			page 312


1297:src/display.c **** 	      p++;
 10836              		.loc 1 1297 8 is_stmt 1 view .LVU3518
1298:src/display.c **** 	      if (!double_dot)
 10837              		.loc 1 1298 8 view .LVU3519
1298:src/display.c **** 	      if (!double_dot)
 10838              		.loc 1 1298 9 is_stmt 0 view .LVU3520
 10839 0acc 0AF1010A 		add	r10, r10, #1
 10840              	.LVL1245:
1299:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10841              		.loc 1 1299 8 is_stmt 1 view .LVU3521
1300:src/display.c **** 	    }
 10842              		.loc 1 1300 3 view .LVU3522
1300:src/display.c **** 	    }
 10843              		.loc 1 1300 5 is_stmt 0 view .LVU3523
 10844 0ad0 4FF0120B 		mov	fp, #18
 10845 0ad4 7AE6     		b	.L927
 10846              	.LVL1246:
 10847              	.L851:
1300:src/display.c **** 	    }
 10848              		.loc 1 1300 5 view .LVU3524
 10849              	.LBE536:
 10850              	.LBE543:
 10851              	.LBE622:
 10852              	.LBB623:
3092:src/display.c **** 	    else
 10853              		.loc 1 3092 8 is_stmt 1 view .LVU3525
 10854 0ad6 0021     		movs	r1, #0
 10855 0ad8 9048     		ldr	r0, .L1121+12
 10856 0ada FFF7FEFF 		bl	set_digits_string
 10857              	.LVL1247:
3126:src/display.c **** 	} else if (State2.multi) {
 10858              		.loc 1 3126 4 view .LVU3526
 10859 0ade 1EA8     		add	r0, sp, #120
 10860 0ae0 FFF7FEFF 		bl	set_status
 10861              	.LVL1248:
3126:src/display.c **** 	} else if (State2.multi) {
 10862              		.loc 1 3126 4 is_stmt 0 view .LVU3527
 10863              	.LBE623:
3216:src/display.c ****       nostk:	show_flags();
 10864              		.loc 1 3216 2 is_stmt 1 view .LVU3528
 10865 0ae4 FFF7FEFF 		bl	show_stack
 10866              	.LVL1249:
3217:src/display.c **** 	if (!skip) {
 10867              		.loc 1 3217 14 view .LVU3529
 10868 0ae8 FFF7FEFF 		bl	show_flags
 10869              	.LVL1250:
3218:src/display.c **** 	  if (State2.runmode) {
 10870              		.loc 1 3218 2 view .LVU3530
 10871 0aec 1EE6     		b	.L853
 10872              	.LVL1251:
 10873              	.L905:
3196:src/display.c **** 	  set_dot(STO_annun);
 10874              		.loc 1 3196 6 view .LVU3531
 10875 0aee 8C48     		ldr	r0, .L1121+16
 10876              	.LVL1252:
3196:src/display.c **** 	  set_dot(STO_annun);
 10877              		.loc 1 3196 6 is_stmt 0 view .LVU3532
ARM GAS  /tmp/ccZdZ92R.s 			page 313


 10878 0af0 FFF7FEFF 		bl	set_status
 10879              	.LVL1253:
3196:src/display.c **** 	  set_dot(STO_annun);
 10880              		.loc 1 3196 6 view .LVU3533
 10881 0af4 8FE7     		b	.L906
 10882              	.LVL1254:
 10883              	.L1099:
 10884              	.LBB624:
 10885              	.LBB561:
3098:src/display.c **** 	      decimal64 z;
 10886              		.loc 1 3098 8 is_stmt 1 view .LVU3534
3099:src/display.c **** 
 10887              		.loc 1 3099 8 view .LVU3535
3101:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 10888              		.loc 1 3101 8 view .LVU3536
 10889 0af6 0CA8     		add	r0, sp, #48
 10890 0af8 FFF7FEFF 		bl	getX
 10891              	.LVL1255:
3102:src/display.c **** 		const unsigned int f = argKIND(op);
 10892              		.loc 1 3102 8 view .LVU3537
3102:src/display.c **** 		const unsigned int f = argKIND(op);
 10893              		.loc 1 3102 11 is_stmt 0 view .LVU3538
 10894 0afc CAF30723 		ubfx	r3, r10, #8, #8
 10895 0b00 022B     		cmp	r3, #2
 10896 0b02 2BD1     		bne	.L856
 10897              	.LBB557:
3103:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10898              		.loc 1 3103 3 is_stmt 1 view .LVU3539
3103:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10899              		.loc 1 3103 22 is_stmt 0 view .LVU3540
 10900 0b04 5FFA8AFA 		uxtb	r10, r10
 10901              	.LVL1256:
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10902              		.loc 1 3104 3 is_stmt 1 view .LVU3541
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10903              		.loc 1 3104 6 is_stmt 0 view .LVU3542
 10904 0b08 BAF1980F 		cmp	r10, #152
 10905              	.LBB558:
3107:src/display.c **** 		}
 10906              		.loc 1 3107 5 view .LVU3543
 10907 0b0c 15AE     		add	r6, sp, #84
 10908              	.LBE558:
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10909              		.loc 1 3104 6 view .LVU3544
 10910 0b0e 21D8     		bhi	.L857
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10911              		.loc 1 3104 28 discriminator 1 view .LVU3545
 10912 0b10 1823     		movs	r3, #24
 10913 0b12 844A     		ldr	r2, .L1121+20
 10914 0b14 03FB0AF3 		mul	r3, r3, r10
 10915 0b18 D358     		ldr	r3, [r2, r3]
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10916              		.loc 1 3104 23 discriminator 1 view .LVU3546
 10917 0b1a DBB1     		cbz	r3, .L857
 10918              	.LBB559:
3105:src/display.c **** 		  update_speed(0);
 10919              		.loc 1 3105 5 is_stmt 1 view .LVU3547
ARM GAS  /tmp/ccZdZ92R.s 			page 314


 10920              	.LVL1257:
3106:src/display.c **** 		  fp(&r, &x);
 10921              		.loc 1 3106 20 view .LVU3548
3107:src/display.c **** 		}
 10922              		.loc 1 3107 5 view .LVU3549
 10923 0b1c 0CA9     		add	r1, sp, #48
 10924 0b1e 3046     		mov	r0, r6
 10925 0b20 9847     		blx	r3
 10926              	.LVL1258:
 10927              	.L858:
3107:src/display.c **** 		}
 10928              		.loc 1 3107 5 is_stmt 0 view .LVU3550
 10929              	.LBE559:
 10930              	.LBE557:
3113:src/display.c **** 	      packed_from_number(&z, &r);
 10931              		.loc 1 3113 8 is_stmt 1 discriminator 1 view .LVU3551
 10932 0b22 814A     		ldr	r2, .L1121+24
 10933 0b24 3146     		mov	r1, r6
 10934 0b26 3046     		mov	r0, r6
 10935 0b28 FFF7FEFF 		bl	decNumberNormalize
 10936              	.LVL1259:
3114:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 10937              		.loc 1 3114 8 discriminator 1 view .LVU3552
 10938 0b2c 06A8     		add	r0, sp, #24
 10939 0b2e 3146     		mov	r1, r6
 10940 0b30 FFF7FEFF 		bl	packed_from_number
 10941              	.LVL1260:
3115:src/display.c **** 	      skip = 1;
 10942              		.loc 1 3115 8 discriminator 1 view .LVU3553
 10943 0b34 0022     		movs	r2, #0
 10944 0b36 06A8     		add	r0, sp, #24
 10945 0b38 3BE6     		b	.L1069
 10946              	.LVL1261:
 10947              	.L882:
3115:src/display.c **** 	      skip = 1;
 10948              		.loc 1 3115 8 is_stmt 0 discriminator 1 view .LVU3554
 10949              	.LBE561:
 10950              	.LBE624:
 10951              	.LBB625:
 10952              	.LBB575:
2486:src/display.c **** #ifndef REALBUILD
 10953              		.loc 1 2486 8 is_stmt 1 view .LVU3555
2486:src/display.c **** #ifndef REALBUILD
 10954              		.loc 1 2486 37 is_stmt 0 view .LVU3556
 10955 0b3a 06EB8600 		add	r0, r6, r6, lsl #2
2486:src/display.c **** #ifndef REALBUILD
 10956              		.loc 1 2486 8 view .LVU3557
 10957 0b3e 4044     		add	r0, r0, r8
 10958 0b40 0021     		movs	r1, #0
 10959 0b42 FFF7FEFF 		bl	set_exp_digits_string
 10960              	.LVL1262:
2488:src/display.c **** #endif
 10961              		.loc 1 2488 8 is_stmt 1 view .LVU3558
2488:src/display.c **** #endif
 10962              		.loc 1 2488 47 is_stmt 0 view .LVU3559
 10963 0b46 0A21     		movs	r1, #10
2488:src/display.c **** #endif
ARM GAS  /tmp/ccZdZ92R.s 			page 315


 10964              		.loc 1 2488 8 view .LVU3560
 10965 0b48 01FB0671 		mla	r1, r1, r6, r7
 10966 0b4c 7748     		ldr	r0, .L1121+28
 10967 0b4e FFF7FEFF 		bl	scopy
 10968              	.LVL1263:
2488:src/display.c **** #endif
 10969              		.loc 1 2488 8 view .LVU3561
 10970              	.LBE575:
 10971              	.LBE625:
3216:src/display.c ****       nostk:	show_flags();
 10972              		.loc 1 3216 2 is_stmt 1 view .LVU3562
 10973 0b52 34E6     		b	.L1070
 10974              	.LVL1264:
 10975              	.L857:
 10976              	.LBB626:
 10977              	.LBB562:
 10978              	.LBB560:
3110:src/display.c **** 	      } else
 10979              		.loc 1 3110 5 view .LVU3563
 10980 0b54 3046     		mov	r0, r6
 10981 0b56 FFF7FEFF 		bl	set_NaN
 10982              	.LVL1265:
 10983 0b5a E2E7     		b	.L858
 10984              	.LVL1266:
 10985              	.L856:
3110:src/display.c **** 	      } else
 10986              		.loc 1 3110 5 is_stmt 0 view .LVU3564
 10987              	.LBE560:
3112:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 10988              		.loc 1 3112 3 is_stmt 1 view .LVU3565
 10989 0b5c 15AE     		add	r6, sp, #84
 10990 0b5e 0CAA     		add	r2, sp, #48
 10991 0b60 0AF07F01 		and	r1, r10, #127
 10992 0b64 3046     		mov	r0, r6
 10993 0b66 FFF7FEFF 		bl	do_conv
 10994              	.LVL1267:
 10995 0b6a DAE7     		b	.L858
 10996              	.LVL1268:
 10997              	.L1109:
3112:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 10998              		.loc 1 3112 3 is_stmt 0 view .LVU3566
 10999              	.LBE562:
 11000              	.LBE626:
3160:src/display.c **** 	    j = State2.alpha_pos;
 11001              		.loc 1 3160 6 is_stmt 1 view .LVU3567
3160:src/display.c **** 	    j = State2.alpha_pos;
 11002              		.loc 1 3160 22 is_stmt 0 view .LVU3568
 11003 0b6c 684A     		ldr	r2, .L1121
 11004 0b6e 0193     		str	r3, [sp, #4]
 11005 0b70 1168     		ldr	r1, [r2]
3160:src/display.c **** 	    j = State2.alpha_pos;
 11006              		.loc 1 3160 11 view .LVU3569
 11007 0b72 1EA8     		add	r0, sp, #120
 11008 0b74 01F5F661 		add	r1, r1, #1968
 11009 0b78 FFF7FEFF 		bl	scopy
 11010              	.LVL1269:
3161:src/display.c **** 	    if (j != 0) {
ARM GAS  /tmp/ccZdZ92R.s 			page 316


 11011              		.loc 1 3161 16 view .LVU3570
 11012 0b7c 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 11013              	.LVL1270:
3161:src/display.c **** 	    if (j != 0) {
 11014              		.loc 1 3161 6 is_stmt 1 view .LVU3571
3162:src/display.c **** 	      i = slen(buf);
 11015              		.loc 1 3162 6 view .LVU3572
3162:src/display.c **** 	      i = slen(buf);
 11016              		.loc 1 3162 9 is_stmt 0 view .LVU3573
 11017 0b80 BBF1000F 		cmp	fp, #0
 11018 0b84 12D1     		bne	.L1110
3179:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11019              		.loc 1 3179 8 is_stmt 1 view .LVU3574
3179:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11020              		.loc 1 3179 11 is_stmt 0 view .LVU3575
 11021 0b86 BAF1000F 		cmp	r10, #0
 11022 0b8a 05D0     		beq	.L904
3180:src/display.c **** 		*bp++ = '\0';
 11023              		.loc 1 3180 3 is_stmt 1 view .LVU3576
 11024              	.LVL1271:
3180:src/display.c **** 		*bp++ = '\0';
 11025              		.loc 1 3180 23 is_stmt 0 view .LVU3577
 11026 0b8c 0AF1100A 		add	r10, r10, #16
3180:src/display.c **** 		*bp++ = '\0';
 11027              		.loc 1 3180 9 view .LVU3578
 11028 0b90 80F800A0 		strb	r10, [r0]
3181:src/display.c **** 	      }
 11029              		.loc 1 3181 3 is_stmt 1 view .LVU3579
 11030              	.LVL1272:
3181:src/display.c **** 	      }
 11031              		.loc 1 3181 9 is_stmt 0 view .LVU3580
 11032 0b94 80F801B0 		strb	fp, [r0, #1]
 11033              	.LVL1273:
 11034              	.L904:
3183:src/display.c **** 	    }
 11035              		.loc 1 3183 8 is_stmt 1 view .LVU3581
 11036 0b98 1EA8     		add	r0, sp, #120
 11037 0b9a FFF7FEFF 		bl	set_status_right
 11038              	.LVL1274:
3216:src/display.c ****       nostk:	show_flags();
 11039              		.loc 1 3216 2 view .LVU3582
2973:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11040              		.loc 1 2973 6 is_stmt 0 view .LVU3583
 11041 0b9e 0025     		movs	r5, #0
3216:src/display.c ****       nostk:	show_flags();
 11042              		.loc 1 3216 2 view .LVU3584
 11043 0ba0 FFF7FEFF 		bl	show_stack
 11044              	.LVL1275:
3217:src/display.c **** 	if (!skip) {
 11045              		.loc 1 3217 14 is_stmt 1 view .LVU3585
 11046 0ba4 FFF7FEFF 		bl	show_flags
 11047              	.LVL1276:
3218:src/display.c **** 	  if (State2.runmode) {
 11048              		.loc 1 3218 2 view .LVU3586
 11049 0ba8 FFF751BB 		b	.L833
 11050              	.LVL1277:
 11051              	.L1110:
ARM GAS  /tmp/ccZdZ92R.s 			page 317


3163:src/display.c **** 	      //				
 11052              		.loc 1 3163 8 view .LVU3587
3163:src/display.c **** 	      //				
 11053              		.loc 1 3163 12 is_stmt 0 view .LVU3588
 11054 0bac 1EA8     		add	r0, sp, #120
 11055              	.LVL1278:
3163:src/display.c **** 	      //				
 11056              		.loc 1 3163 12 view .LVU3589
 11057 0bae FFF7FEFF 		bl	slen
 11058              	.LVL1279:
3165:src/display.c **** #ifdef BIGGER_DISPLAY
 11059              		.loc 1 3165 8 is_stmt 1 view .LVU3590
3169:src/display.c **** #endif
 11060              		.loc 1 3169 8 view .LVU3591
3165:src/display.c **** #ifdef BIGGER_DISPLAY
 11061              		.loc 1 3165 10 is_stmt 0 view .LVU3592
 11062 0bb2 0BEB4B0B 		add	fp, fp, fp, lsl #1
 11063              	.LVL1280:
3169:src/display.c **** #endif
 11064              		.loc 1 3169 15 view .LVU3593
 11065 0bb6 A0EB4B00 		sub	r0, r0, fp, lsl #1
 11066              	.LVL1281:
3169:src/display.c **** #endif
 11067              		.loc 1 3169 11 view .LVU3594
 11068 0bba 0B28     		cmp	r0, #11
 11069 0bbc 7FF719AB 		ble	.L836
3172:src/display.c **** 		set_status_right(buf);
 11070              		.loc 1 3172 3 is_stmt 1 view .LVU3595
3172:src/display.c **** 		set_status_right(buf);
 11071              		.loc 1 3172 18 is_stmt 0 view .LVU3596
 11072 0bc0 28AB     		add	r3, sp, #160
 11073 0bc2 1A18     		adds	r2, r3, r0
 11074 0bc4 019B     		ldr	r3, [sp, #4]
 11075 0bc6 02F8283C 		strb	r3, [r2, #-40]
3173:src/display.c **** 		}
 11076              		.loc 1 3173 3 is_stmt 1 view .LVU3597
 11077 0bca 1EA8     		add	r0, sp, #120
 11078 0bcc FFF7FEFF 		bl	set_status_right
 11079              	.LVL1282:
3216:src/display.c ****       nostk:	show_flags();
 11080              		.loc 1 3216 2 view .LVU3598
 11081 0bd0 FFF7FEFF 		bl	show_stack
 11082              	.LVL1283:
3217:src/display.c **** 	if (!skip) {
 11083              		.loc 1 3217 14 view .LVU3599
 11084 0bd4 FFF7FEFF 		bl	show_flags
 11085              	.LVL1284:
3218:src/display.c **** 	  if (State2.runmode) {
 11086              		.loc 1 3218 2 view .LVU3600
 11087 0bd8 FFF739BB 		b	.L833
 11088              	.L1108:
3155:src/display.c **** 	  } else if (State2.alphas) {
 11089              		.loc 1 3155 6 view .LVU3601
3155:src/display.c **** 	  } else if (State2.alphas) {
 11090              		.loc 1 3155 48 is_stmt 0 view .LVU3602
 11091 0bdc 581E     		subs	r0, r3, #1
 11092 0bde FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccZdZ92R.s 			page 318


 11093              	.LVL1285:
 11094              	.LBB627:
 11095              	.LBI627:
3310:src/display.c **** 	int glen = *graphic++;
 11096              		.loc 1 3310 19 is_stmt 1 view .LVU3603
 11097              	.LBB628:
3311:src/display.c **** 	int i, j;
 11098              		.loc 1 3311 2 view .LVU3604
3319:src/display.c **** #endif
 11099              		.loc 1 3319 15 is_stmt 0 view .LVU3605
 11100 0be2 5349     		ldr	r1, .L1121+32
3311:src/display.c **** 	int i, j;
 11101              		.loc 1 3311 6 view .LVU3606
 11102 0be4 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 11103              	.LVL1286:
3312:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11104              		.loc 1 3312 2 is_stmt 1 view .LVU3607
3319:src/display.c **** #endif
 11105              		.loc 1 3319 2 view .LVU3608
3319:src/display.c **** #endif
 11106              		.loc 1 3319 15 is_stmt 0 view .LVU3609
 11107 0be6 0123     		movs	r3, #1
 11108 0be8 0B70     		strb	r3, [r1]
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11109              		.loc 1 3321 2 is_stmt 1 view .LVU3610
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11110              		.loc 1 3321 5 is_stmt 0 view .LVU3611
 11111 0bea 3AB3     		cbz	r2, .L897
3322:src/display.c **** 
 11112              		.loc 1 3322 2 is_stmt 1 view .LVU3612
 11113              	.LVL1287:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11114              		.loc 1 3324 2 view .LVU3613
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11115              		.loc 1 3324 12 view .LVU3614
 11116 0bec C118     		adds	r1, r0, r3
 11117 0bee 0391     		str	r1, [sp, #12]
 11118 0bf0 2B2A     		cmp	r2, #43
 11119 0bf2 D4BF     		ite	le
 11120 0bf4 8918     		addle	r1, r1, r2
 11121 0bf6 2B31     		addgt	r1, r1, #43
 11122 0bf8 CDE90113 		strd	r1, r3, [sp, #4]
 11123 0bfc CDE90456 		strd	r5, r6, [sp, #16]
 11124              	.LVL1288:
 11125              	.L898:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11126              		.loc 1 3325 14 view .LVU3615
 11127 0c00 029B     		ldr	r3, [sp, #8]
 11128 0c02 039E     		ldr	r6, [sp, #12]
 11129 0c04 03FA0BFA 		lsl	r10, r3, fp
 11130 0c08 0BF19405 		add	r5, fp, #148
 11131 0c0c 06E0     		b	.L901
 11132              	.LVL1289:
 11133              	.L1112:
 11134              	.LBB629:
 11135              	.LBB630:
 340:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccZdZ92R.s 			page 319


 11136              		.loc 1 340 11 is_stmt 0 view .LVU3616
 11137 0c0e FFF7FEFF 		bl	set_dot
 11138              	.LVL1290:
 11139              	.L900:
 340:src/display.c ****   else	clr_dot(n);
 11140              		.loc 1 340 11 view .LVU3617
 11141              	.LBE630:
 11142              	.LBE629:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11143              		.loc 1 3325 23 is_stmt 1 view .LVU3618
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11144              		.loc 1 3325 14 view .LVU3619
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11145              		.loc 1 3325 4 is_stmt 0 view .LVU3620
 11146 0c12 019B     		ldr	r3, [sp, #4]
 11147 0c14 9E42     		cmp	r6, r3
 11148 0c16 05F10605 		add	r5, r5, #6
 11149 0c1a 08D0     		beq	.L1111
 11150              	.LVL1291:
 11151              	.L901:
3330:src/display.c **** #endif
 11152              		.loc 1 3330 6 is_stmt 1 view .LVU3621
 11153              	.LBB633:
 11154              	.LBI629:
 339:src/display.c ****   if (on)	set_dot(n);
 11155              		.loc 1 339 6 view .LVU3622
 11156              	.LBB631:
 340:src/display.c ****   else	clr_dot(n);
 11157              		.loc 1 340 3 view .LVU3623
 340:src/display.c ****   else	clr_dot(n);
 11158              		.loc 1 340 11 view .LVU3624
 341:src/display.c **** }
 11159              		.loc 1 341 8 view .LVU3625
 11160              	.LBE631:
 11161              	.LBE633:
3330:src/display.c **** #endif
 11162              		.loc 1 3330 37 is_stmt 0 view .LVU3626
 11163 0c1c 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11164              	.LVL1292:
 11165              	.LBB634:
 11166              	.LBB632:
 340:src/display.c ****   else	clr_dot(n);
 11167              		.loc 1 340 6 view .LVU3627
 11168 0c20 13EA0A0F 		tst	r3, r10
 340:src/display.c ****   else	clr_dot(n);
 11169              		.loc 1 340 11 view .LVU3628
 11170 0c24 2846     		mov	r0, r5
 340:src/display.c ****   else	clr_dot(n);
 11171              		.loc 1 340 6 view .LVU3629
 11172 0c26 F2D1     		bne	.L1112
 341:src/display.c **** }
 11173              		.loc 1 341 8 view .LVU3630
 11174 0c28 FFF7FEFF 		bl	clr_dot
 11175              	.LVL1293:
 11176 0c2c F1E7     		b	.L900
 11177              	.LVL1294:
 11178              	.L1111:
ARM GAS  /tmp/ccZdZ92R.s 			page 320


 341:src/display.c **** }
 11179              		.loc 1 341 8 view .LVU3631
 11180              	.LBE632:
 11181              	.LBE634:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11182              		.loc 1 3324 17 is_stmt 1 view .LVU3632
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11183              		.loc 1 3324 18 is_stmt 0 view .LVU3633
 11184 0c2e 0BF1010B 		add	fp, fp, #1
 11185              	.LVL1295:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11186              		.loc 1 3324 12 is_stmt 1 view .LVU3634
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11187              		.loc 1 3324 2 is_stmt 0 view .LVU3635
 11188 0c32 BBF1060F 		cmp	fp, #6
 11189 0c36 E3D1     		bne	.L898
 11190 0c38 DDE90456 		ldrd	r5, r6, [sp, #16]
 11191              	.LVL1296:
 11192              	.L897:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11193              		.loc 1 3324 2 view .LVU3636
 11194              	.LBE628:
 11195              	.LBE627:
3216:src/display.c ****       nostk:	show_flags();
 11196              		.loc 1 3216 2 is_stmt 1 view .LVU3637
 11197 0c3c FFF7FEFF 		bl	show_stack
 11198              	.LVL1297:
3217:src/display.c **** 	if (!skip) {
 11199              		.loc 1 3217 14 view .LVU3638
 11200 0c40 FFF7FEFF 		bl	show_flags
 11201              	.LVL1298:
3218:src/display.c **** 	  if (State2.runmode) {
 11202              		.loc 1 3218 2 view .LVU3639
 11203 0c44 FFF703BB 		b	.L833
 11204              	.LVL1299:
 11205              	.L888:
 11206              	.LBB635:
 11207              	.LBB620:
2522:src/display.c **** 	      n -= 100;
 11208              		.loc 1 2522 8 view .LVU3640
2522:src/display.c **** 	      n -= 100;
 11209              		.loc 1 2522 14 is_stmt 0 view .LVU3641
 11210 0c48 3123     		movs	r3, #49
 11211 0c4a 4370     		strb	r3, [r0, #1]
2523:src/display.c **** 	    }
 11212              		.loc 1 2523 8 is_stmt 1 view .LVU3642
2523:src/display.c **** 	    }
 11213              		.loc 1 2523 10 is_stmt 0 view .LVU3643
 11214 0c4c A8F16408 		sub	r8, r8, #100
 11215              	.LVL1300:
2522:src/display.c **** 	      n -= 100;
 11216              		.loc 1 2522 11 view .LVU3644
 11217 0c50 0230     		adds	r0, r0, #2
 11218              	.LVL1301:
 11219              	.L887:
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11220              		.loc 1 2526 4 is_stmt 1 view .LVU3645
ARM GAS  /tmp/ccZdZ92R.s 			page 321


2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11221              		.loc 1 2526 7 is_stmt 0 view .LVU3646
 11222 0c52 B8F1630F 		cmp	r8, #99
 11223 0c56 7FF729AF 		ble	.L889
2529:src/display.c **** 	  set_status(buf);
 11224              		.loc 1 2529 6 is_stmt 1 view .LVU3647
 11225              	.LVL1302:
2529:src/display.c **** 	  set_status(buf);
 11226              		.loc 1 2529 22 is_stmt 0 view .LVU3648
 11227 0c5a 364B     		ldr	r3, .L1121+36
 11228 0c5c 9844     		add	r8, r8, r3
 11229              	.LVL1303:
2529:src/display.c **** 	  set_status(buf);
 11230              		.loc 1 2529 12 view .LVU3649
 11231 0c5e 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11232 0c62 0370     		strb	r3, [r0]
 11233 0c64 26E7     		b	.L891
 11234              	.LVL1304:
 11235              	.L1103:
2529:src/display.c **** 	  set_status(buf);
 11236              		.loc 1 2529 12 view .LVU3650
 11237              	.LBE620:
 11238              	.LBE635:
 11239              	.LBB636:
 11240              	.LBB616:
 11241              	.LBB614:
2411:src/display.c **** 	    end = regK_idx;
 11242              		.loc 1 2411 6 is_stmt 1 view .LVU3651
2412:src/display.c **** 	    start = 3;
 11243              		.loc 1 2412 6 view .LVU3652
2413:src/display.c **** 	    group = 4;
 11244              		.loc 1 2413 6 view .LVU3653
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11245              		.loc 1 2414 6 view .LVU3654
2415:src/display.c **** 	  }
 11246              		.loc 1 2415 6 view .LVU3655
 11247 0c66 3448     		ldr	r0, .L1121+40
 11248 0c68 FFF7FEFF 		bl	set_status
 11249              	.LVL1305:
 11250 0c6c 4FF0070A 		mov	r10, #7
 11251 0c70 0822     		movs	r2, #8
 11252 0c72 4FF02408 		mov	r8, #36
 11253              	.LVL1306:
2415:src/display.c **** 	  }
 11254              		.loc 1 2415 6 is_stmt 0 view .LVU3656
 11255 0c76 2220     		movs	r0, #34
2413:src/display.c **** 	    group = 4;
 11256              		.loc 1 2413 12 view .LVU3657
 11257 0c78 4FF0030B 		mov	fp, #3
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11258              		.loc 1 2414 12 view .LVU3658
 11259 0c7c 0426     		movs	r6, #4
2412:src/display.c **** 	    start = 3;
 11260              		.loc 1 2412 10 view .LVU3659
 11261 0c7e 4FF06F09 		mov	r9, #111
 11262              	.LVL1307:
2411:src/display.c **** 	    end = regK_idx;
ARM GAS  /tmp/ccZdZ92R.s 			page 322


 11263              		.loc 1 2411 11 view .LVU3660
 11264 0c82 6427     		movs	r7, #100
 11265              	.LVL1308:
2411:src/display.c **** 	    end = regK_idx;
 11266              		.loc 1 2411 11 view .LVU3661
 11267 0c84 00E6     		b	.L868
 11268              	.LVL1309:
 11269              	.L1100:
2411:src/display.c **** 	    end = regK_idx;
 11270              		.loc 1 2411 11 view .LVU3662
 11271              	.LBE614:
2371:src/display.c **** 	  p = num_arg(buf, free_mem());
 11272              		.loc 1 2371 4 is_stmt 1 view .LVU3663
 11273 0c86 2D48     		ldr	r0, .L1121+44
 11274 0c88 214F     		ldr	r7, .L1121
 11275              	.LVL1310:
2371:src/display.c **** 	  p = num_arg(buf, free_mem());
 11276              		.loc 1 2371 4 is_stmt 0 view .LVU3664
 11277 0c8a FFF7FEFF 		bl	set_status
 11278              	.LVL1311:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11279              		.loc 1 2372 4 is_stmt 1 view .LVU3665
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11280              		.loc 1 2372 21 is_stmt 0 view .LVU3666
 11281 0c8e FFF7FEFF 		bl	free_mem
 11282              	.LVL1312:
 11283 0c92 0146     		mov	r1, r0
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11284              		.loc 1 2372 8 view .LVU3667
 11285 0c94 15A8     		add	r0, sp, #84
 11286              	.LVL1313:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11287              		.loc 1 2372 8 view .LVU3668
 11288 0c96 FFF7FEFF 		bl	num_arg
 11289              	.LVL1314:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11290              		.loc 1 2373 4 is_stmt 1 view .LVU3669
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11291              		.loc 1 2373 8 is_stmt 0 view .LVU3670
 11292 0c9a 2949     		ldr	r1, .L1121+48
 11293 0c9c FFF7FEFF 		bl	scopy
 11294              	.LVL1315:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11295              		.loc 1 2373 8 view .LVU3671
 11296 0ca0 0646     		mov	r6, r0
 11297              	.LVL1316:
2374:src/display.c **** 	  *p = '\0';
 11298              		.loc 1 2374 4 is_stmt 1 view .LVU3672
2374:src/display.c **** 	  *p = '\0';
 11299              		.loc 1 2374 19 is_stmt 0 view .LVU3673
 11300 0ca2 FFF7FEFF 		bl	free_flash
 11301              	.LVL1317:
2374:src/display.c **** 	  *p = '\0';
 11302              		.loc 1 2374 19 view .LVU3674
 11303 0ca6 0146     		mov	r1, r0
2374:src/display.c **** 	  *p = '\0';
 11304              		.loc 1 2374 8 view .LVU3675
ARM GAS  /tmp/ccZdZ92R.s 			page 323


 11305 0ca8 3046     		mov	r0, r6
 11306 0caa FFF7FEFF 		bl	num_arg
 11307              	.LVL1318:
 11308 0cae 0346     		mov	r3, r0
 11309              	.LVL1319:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11310              		.loc 1 2375 4 is_stmt 1 view .LVU3676
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11311              		.loc 1 2375 7 is_stmt 0 view .LVU3677
 11312 0cb0 0021     		movs	r1, #0
2376:src/display.c **** 	}
 11313              		.loc 1 2376 4 view .LVU3678
 11314 0cb2 15A8     		add	r0, sp, #84
 11315              	.LVL1320:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11316              		.loc 1 2375 7 view .LVU3679
 11317 0cb4 1970     		strb	r1, [r3]
2376:src/display.c **** 	}
 11318              		.loc 1 2376 4 is_stmt 1 view .LVU3680
 11319 0cb6 FFF7FEFF 		bl	set_digits_string
 11320              	.LVL1321:
2376:src/display.c **** 	}
 11321              		.loc 1 2376 4 is_stmt 0 view .LVU3681
 11322 0cba 1EE6     		b	.L863
 11323              	.LVL1322:
 11324              	.L1102:
 11325              	.LBB615:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11326              		.loc 1 2401 6 is_stmt 1 view .LVU3682
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11327              		.loc 1 2401 11 is_stmt 0 view .LVU3683
 11328 0cbc 07EB8707 		add	r7, r7, r7, lsl #2
 11329              	.LVL1323:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11330              		.loc 1 2401 11 view .LVU3684
 11331 0cc0 7F00     		lsls	r7, r7, #1
 11332              	.LVL1324:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11333              		.loc 1 2402 6 is_stmt 1 view .LVU3685
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11334              		.loc 1 2402 28 is_stmt 0 view .LVU3686
 11335 0cc2 462F     		cmp	r7, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11336              		.loc 1 2403 10 view .LVU3687
 11337 0cc4 1F49     		ldr	r1, .L1121+52
 11338 0cc6 15A8     		add	r0, sp, #84
 11339              	.LVL1325:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11340              		.loc 1 2402 28 view .LVU3688
 11341 0cc8 B946     		mov	r9, r7
 11342              	.LVL1326:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11343              		.loc 1 2402 28 view .LVU3689
 11344 0cca A8BF     		it	ge
 11345 0ccc 4FF04609 		movge	r9, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11346              		.loc 1 2403 10 view .LVU3690
ARM GAS  /tmp/ccZdZ92R.s 			page 324


 11347 0cd0 FFF7FEFF 		bl	scopy
 11348              	.LVL1327:
2404:src/display.c **** 	    *p++ = '-';
 11349              		.loc 1 2404 10 view .LVU3691
 11350 0cd4 3946     		mov	r1, r7
 11351 0cd6 0222     		movs	r2, #2
 11352 0cd8 FFF7FEFF 		bl	num_arg_0
 11353              	.LVL1328:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11354              		.loc 1 2402 10 view .LVU3692
 11355 0cdc 09F11D09 		add	r9, r9, #29
 11356              	.LVL1329:
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11357              		.loc 1 2403 6 is_stmt 1 view .LVU3693
2404:src/display.c **** 	    *p++ = '-';
 11358              		.loc 1 2404 6 view .LVU3694
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11359              		.loc 1 2405 6 view .LVU3695
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11360              		.loc 1 2405 11 is_stmt 0 view .LVU3696
 11361 0ce0 2D23     		movs	r3, #45
 11362 0ce2 00F8013B 		strb	r3, [r0], #1
 11363              	.LVL1330:
2406:src/display.c **** 	    *p = '\0';
 11364              		.loc 1 2406 6 is_stmt 1 view .LVU3697
2406:src/display.c **** 	    *p = '\0';
 11365              		.loc 1 2406 10 is_stmt 0 view .LVU3698
 11366 0ce6 4946     		mov	r1, r9
 11367 0ce8 0222     		movs	r2, #2
 11368 0cea FFF7FEFF 		bl	num_arg_0
 11369              	.LVL1331:
2406:src/display.c **** 	    *p = '\0';
 11370              		.loc 1 2406 10 view .LVU3699
 11371 0cee 0246     		mov	r2, r0
 11372              	.LVL1332:
2407:src/display.c **** 	    set_status(buf);
 11373              		.loc 1 2407 6 is_stmt 1 view .LVU3700
2407:src/display.c **** 	    set_status(buf);
 11374              		.loc 1 2407 9 is_stmt 0 view .LVU3701
 11375 0cf0 4FF0000B 		mov	fp, #0
2408:src/display.c **** 	  }
 11376              		.loc 1 2408 6 view .LVU3702
 11377 0cf4 15A8     		add	r0, sp, #84
 11378              	.LVL1333:
2407:src/display.c **** 	    set_status(buf);
 11379              		.loc 1 2407 9 view .LVU3703
 11380 0cf6 82F800B0 		strb	fp, [r2]
2408:src/display.c **** 	  }
 11381              		.loc 1 2408 6 is_stmt 1 view .LVU3704
 11382 0cfa 4FF00A0A 		mov	r10, #10
 11383 0cfe FFF7FEFF 		bl	set_status
 11384              	.LVL1334:
2397:src/display.c **** 	  int start = 0;
 11385              		.loc 1 2397 8 is_stmt 0 view .LVU3705
 11386 0d02 5646     		mov	r6, r10
 11387 0d04 0222     		movs	r2, #2
 11388 0d06 4FF00908 		mov	r8, #9
ARM GAS  /tmp/ccZdZ92R.s 			page 325


 11389              	.LVL1335:
2397:src/display.c **** 	  int start = 0;
 11390              		.loc 1 2397 8 view .LVU3706
 11391 0d0a 0720     		movs	r0, #7
 11392 0d0c BCE5     		b	.L868
 11393              	.L1122:
 11394 0d0e 00BF     		.align	2
 11395              	.L1121:
 11396 0d10 00000000 		.word	main_ram
 11397 0d14 00000000 		.word	DispMsg
 11398 0d18 A0000000 		.word	.LC40
 11399 0d1c 40000000 		.word	.LC30
 11400 0d20 A8000000 		.word	.LC41
 11401 0d24 00000000 		.word	monfuncs
 11402 0d28 00000000 		.word	Ctx
 11403 0d2c 00000000 		.word	LastDisplayedNumber
 11404 0d30 00000000 		.word	forceDispPlot
 11405 0d34 BC000000 		.word	.LC27
 11406 0d38 7C000000 		.word	.LC37
 11407 0d3c 4C000000 		.word	.LC31
 11408 0d40 54000000 		.word	.LC32
 11409 0d44 78000000 		.word	.LC36
 11410 0d48 00000000 		.word	DispPlot
 11411              	.LVL1336:
 11412              	.L1101:
2397:src/display.c **** 	  int start = 0;
 11413              		.loc 1 2397 8 view .LVU3707
 11414              	.LBE615:
2380:src/display.c **** 	  if (SizeStatRegs)
 11415              		.loc 1 2380 4 is_stmt 1 view .LVU3708
2380:src/display.c **** 	  if (SizeStatRegs)
 11416              		.loc 1 2380 8 is_stmt 0 view .LVU3709
 11417 0d4c 15AE     		add	r6, sp, #84
 11418              	.LVL1337:
2380:src/display.c **** 	  if (SizeStatRegs)
 11419              		.loc 1 2380 8 view .LVU3710
 11420 0d4e 1849     		ldr	r1, .L1123
 11421 0d50 3046     		mov	r0, r6
 11422 0d52 FFF7FEFF 		bl	scopy
 11423              	.LVL1338:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11424              		.loc 1 2381 8 view .LVU3711
 11425 0d56 174A     		ldr	r2, .L1123+4
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11426              		.loc 1 2381 7 view .LVU3712
 11427 0d58 1268     		ldr	r2, [r2]
2380:src/display.c **** 	  if (SizeStatRegs)
 11428              		.loc 1 2380 8 view .LVU3713
 11429 0d5a 0346     		mov	r3, r0
 11430              	.LVL1339:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11431              		.loc 1 2381 4 is_stmt 1 view .LVU3714
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11432              		.loc 1 2381 7 is_stmt 0 view .LVU3715
 11433 0d5c BAB9     		cbnz	r2, .L1113
 11434              	.L865:
2383:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/ccZdZ92R.s 			page 326


 11435              		.loc 1 2383 4 is_stmt 1 view .LVU3716
2383:src/display.c **** 	  set_status(buf);
 11436              		.loc 1 2383 7 is_stmt 0 view .LVU3717
 11437 0d5e 0022     		movs	r2, #0
 11438 0d60 1A70     		strb	r2, [r3]
2384:src/display.c **** 
 11439              		.loc 1 2384 4 is_stmt 1 view .LVU3718
 11440 0d62 3046     		mov	r0, r6
 11441              	.LVL1340:
2384:src/display.c **** 
 11442              		.loc 1 2384 4 is_stmt 0 view .LVU3719
 11443 0d64 FFF7FEFF 		bl	set_status
 11444              	.LVL1341:
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11445              		.loc 1 2387 4 is_stmt 1 view .LVU3720
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11446              		.loc 1 2387 8 is_stmt 0 view .LVU3721
 11447 0d68 FFF7FEFF 		bl	global_regs
 11448              	.LVL1342:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11449              		.loc 1 2388 8 view .LVU3722
 11450 0d6c 124F     		ldr	r7, .L1123+8
 11451              	.LVL1343:
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11452              		.loc 1 2387 8 view .LVU3723
 11453 0d6e 0146     		mov	r1, r0
 11454 0d70 3046     		mov	r0, r6
 11455 0d72 FFF7FEFF 		bl	num_arg
 11456              	.LVL1344:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11457              		.loc 1 2388 8 view .LVU3724
 11458 0d76 3A68     		ldr	r2, [r7]
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11459              		.loc 1 2388 7 view .LVU3725
 11460 0d78 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11461 0d7c 002A     		cmp	r2, #0
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11462              		.loc 1 2387 8 view .LVU3726
 11463 0d7e 0346     		mov	r3, r0
 11464              	.LVL1345:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11465              		.loc 1 2388 4 is_stmt 1 view .LVU3727
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11466              		.loc 1 2388 7 is_stmt 0 view .LVU3728
 11467 0d80 0ADB     		blt	.L1114
 11468              	.LVL1346:
 11469              	.L866:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11470              		.loc 1 2392 4 is_stmt 1 view .LVU3729
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11471              		.loc 1 2392 7 is_stmt 0 view .LVU3730
 11472 0d82 0021     		movs	r1, #0
2393:src/display.c **** 	} else {
 11473              		.loc 1 2393 4 view .LVU3731
 11474 0d84 3046     		mov	r0, r6
 11475              	.LVL1347:
2392:src/display.c **** 	  set_digits_string(buf, 0);
ARM GAS  /tmp/ccZdZ92R.s 			page 327


 11476              		.loc 1 2392 7 view .LVU3732
 11477 0d86 1970     		strb	r1, [r3]
2393:src/display.c **** 	} else {
 11478              		.loc 1 2393 4 is_stmt 1 view .LVU3733
 11479 0d88 FFF7FEFF 		bl	set_digits_string
 11480              	.LVL1348:
2393:src/display.c **** 	} else {
 11481              		.loc 1 2393 4 is_stmt 0 view .LVU3734
 11482 0d8c B5E5     		b	.L863
 11483              	.LVL1349:
 11484              	.L1113:
2382:src/display.c **** 	  *p = '\0';
 11485              		.loc 1 2382 6 is_stmt 1 view .LVU3735
2382:src/display.c **** 	  *p = '\0';
 11486              		.loc 1 2382 10 is_stmt 0 view .LVU3736
 11487 0d8e 0B49     		ldr	r1, .L1123+12
 11488 0d90 FFF7FEFF 		bl	scopy
 11489              	.LVL1350:
2382:src/display.c **** 	  *p = '\0';
 11490              		.loc 1 2382 10 view .LVU3737
 11491 0d94 0346     		mov	r3, r0
 11492              	.LVL1351:
2382:src/display.c **** 	  *p = '\0';
 11493              		.loc 1 2382 10 view .LVU3738
 11494 0d96 E2E7     		b	.L865
 11495              	.LVL1352:
 11496              	.L1114:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 11497              		.loc 1 2389 6 is_stmt 1 view .LVU3739
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 11498              		.loc 1 2389 10 is_stmt 0 view .LVU3740
 11499 0d98 0949     		ldr	r1, .L1123+16
 11500 0d9a FFF7FEFF 		bl	scopy
 11501              	.LVL1353:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 11502              		.loc 1 2389 10 view .LVU3741
 11503 0d9e 8046     		mov	r8, r0
 11504              	.LVL1354:
2390:src/display.c **** 	  }
 11505              		.loc 1 2390 6 is_stmt 1 view .LVU3742
2390:src/display.c **** 	  }
 11506              		.loc 1 2390 21 is_stmt 0 view .LVU3743
 11507 0da0 FFF7FEFF 		bl	local_regs
 11508              	.LVL1355:
2390:src/display.c **** 	  }
 11509              		.loc 1 2390 21 view .LVU3744
 11510 0da4 0146     		mov	r1, r0
2390:src/display.c **** 	  }
 11511              		.loc 1 2390 10 view .LVU3745
 11512 0da6 4046     		mov	r0, r8
 11513 0da8 FFF7FEFF 		bl	num_arg
 11514              	.LVL1356:
 11515 0dac 0346     		mov	r3, r0
 11516              	.LVL1357:
2390:src/display.c **** 	  }
 11517              		.loc 1 2390 10 view .LVU3746
 11518 0dae E8E7     		b	.L866
ARM GAS  /tmp/ccZdZ92R.s 			page 328


 11519              	.L1124:
 11520              		.align	2
 11521              	.L1123:
 11522 0db0 5C000000 		.word	.LC33
 11523 0db4 00000000 		.word	SizeStatRegs
 11524 0db8 00000000 		.word	main_ram
 11525 0dbc 64000000 		.word	.LC34
 11526 0dc0 6C000000 		.word	.LC35
 11527              	.LBE616:
 11528              	.LBE636:
 11529              		.cfi_endproc
 11530              	.LFE34:
 11532              		.section	.text.frozen_display,"ax",%progbits
 11533              		.align	1
 11534              		.p2align 2,,3
 11535              		.global	frozen_display
 11536              		.syntax unified
 11537              		.thumb
 11538              		.thumb_func
 11539              		.fpu fpv4-sp-d16
 11541              	frozen_display:
 11542              	.LFB35:
3304:src/display.c **** 	State2.disp_freeze = 0;
 11543              		.loc 1 3304 7 is_stmt 1 view -0
 11544              		.cfi_startproc
 11545              		@ args = 0, pretend = 0, frame = 0
 11546              		@ frame_needed = 0, uses_anonymous_args = 0
3305:src/display.c **** 	display();
 11547              		.loc 1 3305 2 view .LVU3748
3304:src/display.c **** 	State2.disp_freeze = 0;
 11548              		.loc 1 3304 7 is_stmt 0 view .LVU3749
 11549 0000 10B5     		push	{r4, lr}
 11550              		.cfi_def_cfa_offset 8
 11551              		.cfi_offset 4, -8
 11552              		.cfi_offset 14, -4
3305:src/display.c **** 	display();
 11553              		.loc 1 3305 21 view .LVU3750
 11554 0002 064C     		ldr	r4, .L1127
 11555 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11556 0006 6FF30413 		bfc	r3, #4, #1
 11557 000a E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 11558              		.loc 1 3306 2 is_stmt 1 view .LVU3751
 11559 000c FFF7FEFF 		bl	display
 11560              	.LVL1358:
3307:src/display.c ****       }
 11561              		.loc 1 3307 2 view .LVU3752
3307:src/display.c ****       }
 11562              		.loc 1 3307 21 is_stmt 0 view .LVU3753
 11563 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11564 0012 43F01003 		orr	r3, r3, #16
 11565 0016 E375     		strb	r3, [r4, #23]
3308:src/display.c **** 
 11566              		.loc 1 3308 7 view .LVU3754
 11567 0018 10BD     		pop	{r4, pc}
 11568              	.L1128:
 11569 001a 00BF     		.align	2
ARM GAS  /tmp/ccZdZ92R.s 			page 329


 11570              	.L1127:
 11571 001c 00000000 		.word	StateWhileOn
 11572              		.cfi_endproc
 11573              	.LFE35:
 11575              		.section	.text.message,"ax",%progbits
 11576              		.align	1
 11577              		.p2align 2,,3
 11578              		.global	message
 11579              		.syntax unified
 11580              		.thumb
 11581              		.thumb_func
 11582              		.fpu fpv4-sp-d16
 11584              	message:
 11585              	.LVL1359:
 11586              	.LFB45:
3525:src/display.c **** 	State2.disp_freeze = 0;
 11587              		.loc 1 3525 7 is_stmt 1 view -0
 11588              		.cfi_startproc
 11589              		@ args = 0, pretend = 0, frame = 0
 11590              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	State2.disp_small = 0;
 11591              		.loc 1 3526 2 view .LVU3756
3527:src/display.c **** 	WasDataEntry = 0;
 11592              		.loc 1 3527 2 view .LVU3757
3527:src/display.c **** 	WasDataEntry = 0;
 11593              		.loc 1 3527 20 is_stmt 0 view .LVU3758
 11594 0000 174A     		ldr	r2, .L1139
3525:src/display.c **** 	State2.disp_freeze = 0;
 11595              		.loc 1 3525 7 view .LVU3759
 11596 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11597              		.cfi_def_cfa_offset 24
 11598              		.cfi_offset 3, -24
 11599              		.cfi_offset 4, -20
 11600              		.cfi_offset 5, -16
 11601              		.cfi_offset 6, -12
 11602              		.cfi_offset 7, -8
 11603              		.cfi_offset 14, -4
3527:src/display.c **** 	WasDataEntry = 0;
 11604              		.loc 1 3527 20 view .LVU3760
 11605 0004 D38A     		ldrh	r3, [r2, #22]
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11606              		.loc 1 3528 15 view .LVU3761
 11607 0006 174E     		ldr	r6, .L1139+4
3527:src/display.c **** 	WasDataEntry = 0;
 11608              		.loc 1 3527 20 view .LVU3762
 11609 0008 23F48453 		bic	r3, r3, #4224
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11610              		.loc 1 3528 15 view .LVU3763
 11611 000c 0027     		movs	r7, #0
3527:src/display.c **** 	WasDataEntry = 0;
 11612              		.loc 1 3527 20 view .LVU3764
 11613 000e D382     		strh	r3, [r2, #22]	@ movhi
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11614              		.loc 1 3528 2 is_stmt 1 view .LVU3765
3529:src/display.c **** 	  // Complete redraw necessary
 11615              		.loc 1 3529 5 is_stmt 0 view .LVU3766
 11616 0010 9B05     		lsls	r3, r3, #22
ARM GAS  /tmp/ccZdZ92R.s 			page 330


3525:src/display.c **** 	State2.disp_freeze = 0;
 11617              		.loc 1 3525 7 view .LVU3767
 11618 0012 0546     		mov	r5, r0
 11619 0014 0C46     		mov	r4, r1
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11620              		.loc 1 3528 15 view .LVU3768
 11621 0016 3760     		str	r7, [r6]
3529:src/display.c **** 	  // Complete redraw necessary
 11622              		.loc 1 3529 2 is_stmt 1 view .LVU3769
3529:src/display.c **** 	  // Complete redraw necessary
 11623              		.loc 1 3529 5 is_stmt 0 view .LVU3770
 11624 0018 12D5     		bpl	.L1130
3529:src/display.c **** 	  // Complete redraw necessary
 11625              		.loc 1 3529 27 discriminator 1 view .LVU3771
 11626 001a D1B1     		cbz	r1, .L1138
 11627              	.L1131:
3536:src/display.c **** 	    ShowRPN = 0;
 11628              		.loc 1 3536 6 is_stmt 1 view .LVU3772
 11629 001c FFF7FEFF 		bl	reset_disp
 11630              	.LVL1360:
3537:src/display.c **** 	    set_annunciators();
 11631              		.loc 1 3537 6 view .LVU3773
3537:src/display.c **** 	    set_annunciators();
 11632              		.loc 1 3537 14 is_stmt 0 view .LVU3774
 11633 0020 114B     		ldr	r3, .L1139+8
 11634 0022 0026     		movs	r6, #0
 11635 0024 1E60     		str	r6, [r3]
3538:src/display.c **** 	    set_digits_string( str2, 0 );
 11636              		.loc 1 3538 6 is_stmt 1 view .LVU3775
 11637 0026 FFF7FEFF 		bl	set_annunciators
 11638              	.LVL1361:
3539:src/display.c **** 	  }
 11639              		.loc 1 3539 6 view .LVU3776
 11640 002a 3146     		mov	r1, r6
 11641 002c 2046     		mov	r0, r4
 11642 002e FFF7FEFF 		bl	set_digits_string
 11643              	.LVL1362:
3541:src/display.c **** 	  finish_display();// message
 11644              		.loc 1 3541 4 view .LVU3777
 11645 0032 2846     		mov	r0, r5
 11646 0034 FFF7FEFF 		bl	set_status
 11647              	.LVL1363:
3542:src/display.c **** 	}
 11648              		.loc 1 3542 4 view .LVU3778
3544:src/display.c **** 
 11649              		.loc 1 3544 7 is_stmt 0 view .LVU3779
 11650 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11651              		.cfi_remember_state
 11652              		.cfi_restore 14
 11653              		.cfi_restore 7
 11654              		.cfi_restore 6
 11655              		.cfi_restore 5
 11656              		.cfi_restore 4
 11657              		.cfi_restore 3
 11658              		.cfi_def_cfa_offset 0
 11659              	.LVL1364:
3542:src/display.c **** 	}
ARM GAS  /tmp/ccZdZ92R.s 			page 331


 11660              		.loc 1 3542 4 view .LVU3780
 11661 003c FFF7FEBF 		b	finish_display
 11662              	.LVL1365:
 11663              	.L1130:
 11664              		.cfi_restore_state
3535:src/display.c **** 	    reset_disp();
 11665              		.loc 1 3535 4 is_stmt 1 view .LVU3781
3535:src/display.c **** 	    reset_disp();
 11666              		.loc 1 3535 7 is_stmt 0 view .LVU3782
 11667 0040 0029     		cmp	r1, #0
 11668 0042 EBD1     		bne	.L1131
3541:src/display.c **** 	  finish_display();// message
 11669              		.loc 1 3541 4 is_stmt 1 view .LVU3783
 11670 0044 2846     		mov	r0, r5
 11671              	.LVL1366:
3541:src/display.c **** 	  finish_display();// message
 11672              		.loc 1 3541 4 is_stmt 0 view .LVU3784
 11673 0046 FFF7FEFF 		bl	set_status
 11674              	.LVL1367:
3542:src/display.c **** 	}
 11675              		.loc 1 3542 4 is_stmt 1 view .LVU3785
3544:src/display.c **** 
 11676              		.loc 1 3544 7 is_stmt 0 view .LVU3786
 11677 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11678              		.cfi_remember_state
 11679              		.cfi_restore 14
 11680              		.cfi_restore 7
 11681              		.cfi_restore 6
 11682              		.cfi_restore 5
 11683              		.cfi_restore 4
 11684              		.cfi_restore 3
 11685              		.cfi_def_cfa_offset 0
 11686              	.LVL1368:
3542:src/display.c **** 	}
 11687              		.loc 1 3542 4 view .LVU3787
 11688 004e FFF7FEBF 		b	finish_display
 11689              	.LVL1369:
 11690              	.L1138:
 11691              		.cfi_restore_state
3531:src/display.c **** 	  display();
 11692              		.loc 1 3531 4 is_stmt 1 view .LVU3788
3531:src/display.c **** 	  display();
 11693              		.loc 1 3531 12 is_stmt 0 view .LVU3789
 11694 0052 064B     		ldr	r3, .L1139+12
 11695 0054 1860     		str	r0, [r3]
3532:src/display.c **** 	}
 11696              		.loc 1 3532 4 is_stmt 1 view .LVU3790
3544:src/display.c **** 
 11697              		.loc 1 3544 7 is_stmt 0 view .LVU3791
 11698 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11699              		.cfi_restore 14
 11700              		.cfi_restore 7
 11701              		.cfi_restore 6
 11702              		.cfi_restore 5
 11703              		.cfi_restore 4
 11704              		.cfi_restore 3
 11705              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccZdZ92R.s 			page 332


3532:src/display.c **** 	}
 11706              		.loc 1 3532 4 view .LVU3792
 11707 005a FFF7FEBF 		b	display
 11708              	.LVL1370:
 11709              	.L1140:
3532:src/display.c **** 	}
 11710              		.loc 1 3532 4 view .LVU3793
 11711 005e 00BF     		.align	2
 11712              	.L1139:
 11713 0060 00000000 		.word	StateWhileOn
 11714 0064 00000000 		.word	WasDataEntry
 11715 0068 00000000 		.word	ShowRPN
 11716 006c 00000000 		.word	DispMsg
 11717              		.cfi_endproc
 11718              	.LFE45:
 11720              		.section	.text.error_message,"ax",%progbits
 11721              		.align	1
 11722              		.p2align 2,,3
 11723              		.global	error_message
 11724              		.syntax unified
 11725              		.thumb
 11726              		.thumb_func
 11727              		.fpu fpv4-sp-d16
 11729              	error_message:
 11730              	.LVL1371:
 11731              	.LFB1:
 134:src/display.c **** #define MSG1(top) top "\0"
 11732              		.loc 1 134 1 is_stmt 1 view -0
 11733              		.cfi_startproc
 11734              		@ args = 0, pretend = 0, frame = 0
 11735              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/display.c ****     {
 11736              		.loc 1 139 3 view .LVU3795
 197:src/display.c ****     {
 11737              		.loc 1 197 3 view .LVU3796
 232:src/display.c ****     const char *p = error_table[e];
 11738              		.loc 1 232 3 view .LVU3797
 134:src/display.c **** #define MSG1(top) top "\0"
 11739              		.loc 1 134 1 is_stmt 0 view .LVU3798
 11740 0000 38B5     		push	{r3, r4, r5, lr}
 11741              		.cfi_def_cfa_offset 16
 11742              		.cfi_offset 3, -16
 11743              		.cfi_offset 4, -12
 11744              		.cfi_offset 5, -8
 11745              		.cfi_offset 14, -4
 232:src/display.c ****     const char *p = error_table[e];
 11746              		.loc 1 232 21 view .LVU3799
 11747 0002 1A4B     		ldr	r3, .L1152
 11748 0004 1B68     		ldr	r3, [r3]
 11749 0006 0343     		orrs	r3, r0, r3
 11750 0008 2CD0     		beq	.L1141
 11751              	.LBB637:
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11752              		.loc 1 233 5 is_stmt 1 view .LVU3800
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11753              		.loc 1 233 17 is_stmt 0 view .LVU3801
 11754 000a 194B     		ldr	r3, .L1152+4
ARM GAS  /tmp/ccZdZ92R.s 			page 333


 11755 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11756              	.LVL1372:
 234:src/display.c ****     if (*q == '\0')
 11757              		.loc 1 234 5 is_stmt 1 view .LVU3802
 11758 0010 0446     		mov	r4, r0
 234:src/display.c ****     if (*q == '\0')
 11759              		.loc 1 234 21 is_stmt 0 view .LVU3803
 11760 0012 0021     		movs	r1, #0
 11761 0014 2846     		mov	r0, r5
 11762              	.LVL1373:
 234:src/display.c ****     if (*q == '\0')
 11763              		.loc 1 234 21 view .LVU3804
 11764 0016 FFF7FEFF 		bl	find_char
 11765              	.LVL1374:
 235:src/display.c ****       q = S7_ERROR;
 11766              		.loc 1 235 5 is_stmt 1 view .LVU3805
 235:src/display.c ****       q = S7_ERROR;
 11767              		.loc 1 235 9 is_stmt 0 view .LVU3806
 11768 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 235:src/display.c ****       q = S7_ERROR;
 11769              		.loc 1 235 8 view .LVU3807
 11770 001c 9BB9     		cbnz	r3, .L1150
 236:src/display.c ****     if (*q == 'X') {
 11771              		.loc 1 236 9 view .LVU3808
 11772 001e 1549     		ldr	r1, .L1152+8
 11773              	.L1143:
 11774              	.LVL1375:
 246:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 11775              		.loc 1 246 7 is_stmt 1 view .LVU3809
 11776 0020 2846     		mov	r0, r5
 11777 0022 FFF7FEFF 		bl	message
 11778              	.LVL1376:
 247:src/display.c **** #ifndef REALBUILD
 11779              		.loc 1 247 7 view .LVU3810
 247:src/display.c **** #ifndef REALBUILD
 11780              		.loc 1 247 26 is_stmt 0 view .LVU3811
 11781 0026 144B     		ldr	r3, .L1152+12
 249:src/display.c **** #endif
 11782              		.loc 1 249 7 view .LVU3812
 11783 0028 1449     		ldr	r1, .L1152+16
 247:src/display.c **** #ifndef REALBUILD
 11784              		.loc 1 247 26 view .LVU3813
 11785 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 249:src/display.c **** #endif
 11786              		.loc 1 249 7 view .LVU3814
 11787 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11788 0030 1348     		ldr	r0, .L1152+20
 247:src/display.c **** #ifndef REALBUILD
 11789              		.loc 1 247 31 view .LVU3815
 11790 0032 003C     		subs	r4, r4, #0
 247:src/display.c **** #ifndef REALBUILD
 11791              		.loc 1 247 31 view .LVU3816
 11792 0034 18BF     		it	ne
 11793 0036 0124     		movne	r4, #1
 11794              	.LVL1377:
 247:src/display.c **** #ifndef REALBUILD
 11795              		.loc 1 247 26 view .LVU3817
ARM GAS  /tmp/ccZdZ92R.s 			page 334


 11796 0038 64F30412 		bfi	r2, r4, #4, #1
 11797 003c DA75     		strb	r2, [r3, #23]
 249:src/display.c **** #endif
 11798              		.loc 1 249 7 is_stmt 1 view .LVU3818
 11799              	.LBE637:
 274:src/display.c **** 
 11800              		.loc 1 274 1 is_stmt 0 view .LVU3819
 11801 003e BDE83840 		pop	{r3, r4, r5, lr}
 11802              		.cfi_remember_state
 11803              		.cfi_restore 14
 11804              		.cfi_restore 5
 11805              		.cfi_restore 4
 11806              		.cfi_restore 3
 11807              		.cfi_def_cfa_offset 0
 11808              	.LVL1378:
 11809              	.LBB644:
 249:src/display.c **** #endif
 11810              		.loc 1 249 7 view .LVU3820
 11811 0042 FFF7FEBF 		b	scopy
 11812              	.LVL1379:
 11813              	.L1150:
 11814              		.cfi_restore_state
 237:src/display.c ****       DispMsg = p;
 11815              		.loc 1 237 5 is_stmt 1 view .LVU3821
 237:src/display.c ****       DispMsg = p;
 11816              		.loc 1 237 8 is_stmt 0 view .LVU3822
 11817 0046 582B     		cmp	r3, #88
 11818 0048 0DD1     		bne	.L1151
 238:src/display.c ****       frozen_display();
 11819              		.loc 1 238 7 is_stmt 1 view .LVU3823
 11820              	.LBB638:
 11821              	.LBB639:
3305:src/display.c **** 	display();
 11822              		.loc 1 3305 21 is_stmt 0 view .LVU3824
 11823 004a 0B4C     		ldr	r4, .L1152+12
 11824              	.LVL1380:
3305:src/display.c **** 	display();
 11825              		.loc 1 3305 21 view .LVU3825
 11826              	.LBE639:
 11827              	.LBE638:
 238:src/display.c ****       frozen_display();
 11828              		.loc 1 238 15 view .LVU3826
 11829 004c 0D4A     		ldr	r2, .L1152+24
 11830              	.LBB642:
 11831              	.LBB640:
3305:src/display.c **** 	display();
 11832              		.loc 1 3305 21 view .LVU3827
 11833 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11834              	.LBE640:
 11835              	.LBE642:
 238:src/display.c ****       frozen_display();
 11836              		.loc 1 238 15 view .LVU3828
 11837 0050 1560     		str	r5, [r2]
 239:src/display.c ****     }
 11838              		.loc 1 239 7 is_stmt 1 view .LVU3829
 11839              	.LBB643:
 11840              	.LBI638:
ARM GAS  /tmp/ccZdZ92R.s 			page 335


3303:src/display.c ****       {
 11841              		.loc 1 3303 12 view .LVU3830
 11842              	.LBB641:
3305:src/display.c **** 	display();
 11843              		.loc 1 3305 2 view .LVU3831
3305:src/display.c **** 	display();
 11844              		.loc 1 3305 21 is_stmt 0 view .LVU3832
 11845 0052 6FF30413 		bfc	r3, #4, #1
 11846 0056 E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 11847              		.loc 1 3306 2 is_stmt 1 view .LVU3833
 11848 0058 FFF7FEFF 		bl	display
 11849              	.LVL1381:
3307:src/display.c ****       }
 11850              		.loc 1 3307 2 view .LVU3834
3307:src/display.c ****       }
 11851              		.loc 1 3307 21 is_stmt 0 view .LVU3835
 11852 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11853 005e 43F01003 		orr	r3, r3, #16
 11854 0062 E375     		strb	r3, [r4, #23]
 11855              	.LVL1382:
 11856              	.L1141:
3307:src/display.c ****       }
 11857              		.loc 1 3307 21 view .LVU3836
 11858              	.LBE641:
 11859              	.LBE643:
 11860              	.LBE644:
 274:src/display.c **** 
 11861              		.loc 1 274 1 view .LVU3837
 11862 0064 38BD     		pop	{r3, r4, r5, pc}
 11863              	.LVL1383:
 11864              	.L1151:
 11865              	.LBB645:
 234:src/display.c ****     if (*q == '\0')
 11866              		.loc 1 234 17 view .LVU3838
 11867 0066 411C     		adds	r1, r0, #1
 11868 0068 DAE7     		b	.L1143
 11869              	.L1153:
 11870 006a 00BF     		.align	2
 11871              	.L1152:
 11872 006c 00000000 		.word	Running
 11873 0070 00000000 		.word	.LANCHOR27
 11874 0074 00000000 		.word	.LANCHOR26
 11875 0078 00000000 		.word	StateWhileOn
 11876 007c 00000000 		.word	.LANCHOR28
 11877 0080 00000000 		.word	LastDisplayedNumber
 11878 0084 00000000 		.word	DispMsg
 11879              	.LBE645:
 11880              		.cfi_endproc
 11881              	.LFE1:
 11883              		.section	.rodata.str1.4,"aMS",%progbits,1
 11884              		.align	2
 11885              	.LC43:
 11886 0000 06316306 		.ascii	"\0061c\006\006\000"
 11886      0600
 11887 0006 0000     		.align	2
 11888              	.LC44:
ARM GAS  /tmp/ccZdZ92R.s 			page 336


 11889 0008 756E0600 		.ascii	"un\006\000"
 11890              		.align	2
 11891              	.LC45:
 11892 000c 736D00   		.ascii	"sm\000"
 11893              		.set	CSWTCH.315,CSWTCH.313
 11894 000f 00       		.align	2
 11895              	.LC46:
 11896 0010 20502072 		.ascii	" P r o g r a m \000"
 11896      206F2067 
 11896      20722061 
 11896      206D2000 
 11897              		.align	2
 11898              	.LC47:
 11899 0020 206F2072 		.ascii	" o r   d a t e \000"
 11899      20202064 
 11899      20612074 
 11899      20652000 
 11900              		.align	2
 11901              	.LC48:
 11902 0030 204F2070 		.ascii	" O p - c o d e \000"
 11902      202D2063 
 11902      206F2064 
 11902      20652000 
 11903              		.align	2
 11904              	.LC49:
 11905 0040 204C2061 		.ascii	" L a b e l \000"
 11905      20622065 
 11905      206C2000 
 11906              		.align	2
 11907              	.LC50:
 11908 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11908      20652072 
 11908      20612074 
 11908      2069206F 
 11908      206E2000 
 11909              		.align	2
 11910              	.LC51:
 11911 0060 20462075 		.ascii	" F u l l \000"
 11911      206C206C 
 11911      2000
 11912 006a 0000     		.align	2
 11913              	.LC52:
 11914 006c 2043206C 		.ascii	" C l a s h \000"
 11914      20612073 
 11914      20682000 
 11915              		.align	2
 11916              	.LC53:
 11917 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11917      206F2020 
 11917      2073206D 
 11917      2061206C 
 11917      206C2000 
 11918              		.align	2
 11919              	.LC54:
 11920 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11920      20742061 
 11920      20202070 
ARM GAS  /tmp/ccZdZ92R.s 			page 337


 11920      206F2069 
 11920      206E2074 
 11921              		.align	2
 11922              	.LC55:
 11923 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11923      20722061 
 11923      206D2065 
 11923      20742065 
 11923      20722000 
 11924              		.align	2
 11925              	.LC56:
 11926 00b8 20442061 		.ascii	" D a t a \000"
 11926      20742061 
 11926      2000
 11927 00c2 0000     		.align	2
 11928              	.LC57:
 11929 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11929      206F2074 
 11929      20652063 
 11929      20742065 
 11929      20642000 
 11930              		.align	2
 11931              	.LC58:
 11932 00d8 2046206F 		.ascii	" F o u n d \000"
 11932      2075206E 
 11932      20642000 
 11933              		.align	2
 11934              	.LC59:
 11935 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11935      2073206D 
 11935      20612074 
 11935      20632068 
 11935      2000
 11936 00f6 0000     		.align	2
 11937              	.LC60:
 11938 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11938      20732074 
 11938      2061206C 
 11938      206C2065 
 11938      20642000 
 11939              		.global	DIGITS
 11940              		.comm	IoAnnunciator,4,4
 11941              		.comm	IntMaxWindow,4,4
 11942              		.comm	JustDisplayed,4,4
 11943              		.comm	ShowRPN,4,4
 11944              		.comm	forceDispPlot,1,1
 11945              		.comm	LastDisplayedExponent,5,4
 11946              		.comm	LastDisplayedNumber,26,4
 11947              		.comm	LastDisplayedText,31,4
 11948              		.global	no_status_top
 11949              		.comm	DispPlot,2,2
 11950              		.comm	DispMsg,4,4
 11951              		.global	SvnRevision
 11952              		.section	.rodata
 11953              		.align	2
 11954              		.set	.LANCHOR17,. + 0
 11955              	.LC18:
ARM GAS  /tmp/ccZdZ92R.s 			page 338


 11956 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 11956      22002E00 
 11956      00
 11957 0009 000000   		.space	3
 11958              	.LC22:
 11959 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11959      332E3306 
 11959      0600
 11960 0016 00000000 		.space	4
 11961 001a 0000     		.space	2
 11962              	.LC61:
 11963 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11963      696E6700 
 11963      50726F47 
 11963      72614D6D 
 11963      00
 11964 002d 000000   		.space	3
 11965              	.LC62:
 11966 0030 446F6D61 		.ascii	"Domain\000\000"
 11966      696E0000 
 11967              	.LC63:
 11968 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 11968      74696D65 
 11968      006F7220 
 11968      64417445 
 11968      00
 11969 0049 000000   		.space	3
 11970              	.LC64:
 11971 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11971      66696E65 
 11971      64004F70 
 11971      2D434F64 
 11971      4500
 11972 005e 0000     		.space	2
 11973              	.LC65:
 11974 0060 2B9F0000 		.ascii	"+\237\000\000"
 11975              	.LC66:
 11976 0064 2D9F0000 		.ascii	"-\237\000\000"
 11977              	.LC67:
 11978 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11978      75636800 
 11978      4C416245 
 11978      4C00
 11979 0076 0000     		.space	2
 11980              	.LC68:
 11981 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11981      67616C00 
 11981      4F504572 
 11981      4174696F 
 11981      6E00
 11982 008a 0000     		.space	2
 11983              	.LC69:
 11984 008c 4F757420 		.ascii	"Out of range\000\000"
 11984      6F662072 
 11984      616E6765 
 11984      0000
 11985 009a 0000     		.space	2
ARM GAS  /tmp/ccZdZ92R.s 			page 339


 11986              	.LC70:
 11987 009c 42616420 		.ascii	"Bad digit\000\000"
 11987      64696769 
 11987      740000
 11988 00a7 00       		.space	1
 11989              	.LC71:
 11990 00a8 546F6F20 		.ascii	"Too long\000\000"
 11990      6C6F6E67 
 11990      0000
 11991 00b2 0000     		.space	2
 11992              	.LC72:
 11993 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11993      69730046 
 11993      754C4C00 
 11994              	.LC73:
 11995 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11995      6B00434C 
 11995      41534800 
 11996              	.LC74:
 11997 00cc 42616420 		.ascii	"Bad mode\000\000"
 11997      6D6F6465 
 11997      0000
 11998 00d6 0000     		.space	2
 11999              	.LC75:
 12000 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12000      06060673 
 12000      697A6500 
 12000      746F6F20 
 12000      534D6D41 
 12001 00ef 00       		.space	1
 12002              	.LC76:
 12003 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12003      66657700 
 12003      64417441 
 12003      20506F69 
 12003      6E745300 
 12004              	.LC77:
 12005 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12005      6C696400 
 12005      50617261 
 12005      4D6D4574 
 12005      457200
 12006 0117 00       		.space	1
 12007              	.LC78:
 12008 0118 492F4F00 		.ascii	"I/O\000\000"
 12008      00
 12009 011d 000000   		.space	3
 12010              	.LC79:
 12011 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12011      6C696400 
 12011      64417441 
 12011      00
 12012 012d 000000   		.space	3
 12013              	.LC80:
 12014 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12014      65005072 
 12014      6F744563 
ARM GAS  /tmp/ccZdZ92R.s 			page 340


 12014      74456400 
 12015              	.LC81:
 12016 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12016      6F6F7400 
 12016      466F756E 
 12016      6400
 12017 014e 0000     		.space	2
 12018              	.LC82:
 12019 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12019      6978004D 
 12019      6D49534D 
 12019      6D417443 
 12019      4800
 12020 0162 0000     		.space	2
 12021              	.LC83:
 12022 0164 53696E67 		.ascii	"Singular\000\000"
 12022      756C6172 
 12022      0000
 12023 016e 0000     		.space	2
 12024              	.LC84:
 12025 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12025      68206973 
 12025      0046754C 
 12025      4C00
 12026 017e 0000     		.space	2
 12027              	.LC85:
 12028 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12028      72797374 
 12028      616C0049 
 12028      6E537461 
 12028      4C4C4564 
 12029 0195 000000   		.space	3
 12030              	.LC86:
 12031 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12031      5800
 12032              		.section	.bss.DecimalMode,"aw",%nobits
 12033              		.set	.LANCHOR1,. + 0
 12036              	DecimalMode:
 12037 0000 00       		.space	1
 12038              		.section	.bss.SeparatorMode,"aw",%nobits
 12039              		.set	.LANCHOR0,. + 0
 12042              	SeparatorMode:
 12043 0000 00       		.space	1
 12044              		.section	.bss.no_status_top,"aw",%nobits
 12045              		.align	1
 12046              		.set	.LANCHOR18,. + 0
 12049              	no_status_top:
 12050 0000 0000     		.space	2
 12051              		.section	.rodata.CSWTCH.313,"a"
 12052              		.align	2
 12053              		.set	.LANCHOR11,. + 0
 12056              	CSWTCH.313:
 12057 0000 02000000 		.word	2
 12058 0004 08000000 		.word	8
 12059 0008 0A000000 		.word	10
 12060 000c 10000000 		.word	16
 12061              		.section	.rodata.CSWTCH.339,"a"
ARM GAS  /tmp/ccZdZ92R.s 			page 341


 12062              		.align	2
 12063              		.set	.LANCHOR16,. + 0
 12066              	CSWTCH.339:
 12067 0000 00000000 		.word	.LC43
 12068 0004 08000000 		.word	.LC44
 12069 0008 0C000000 		.word	.LC45
 12070              		.section	.rodata.DIGITS,"a"
 12071              		.align	2
 12072              		.set	.LANCHOR12,. + 0
 12075              	DIGITS:
 12076 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12076      34353637 
 12076      38394142 
 12076      43444546 
 12076      00
 12077              		.section	.rodata.S7_ERROR,"a"
 12078              		.align	2
 12079              		.set	.LANCHOR26,. + 0
 12082              	S7_ERROR:
 12083 0000 4572726F 		.ascii	"Error\000"
 12083      7200
 12084              		.section	.rodata.S7_INF,"a"
 12085              		.align	2
 12086              		.set	.LANCHOR5,. + 0
 12089              	S7_INF:
 12090 0000 496E6669 		.ascii	"Infinity\000"
 12090      6E697479 
 12090      00
 12091              		.section	.rodata.S7_INF_Text,"a"
 12092              		.align	2
 12093              		.set	.LANCHOR7,. + 0
 12096              	S7_INF_Text:
 12097 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12097      20662069 
 12097      206E2069 
 12097      20742079 
 12097      2000
 12098              		.section	.rodata.S7_NEG_INF_Text,"a"
 12099              		.align	2
 12100              		.set	.LANCHOR6,. + 0
 12103              	S7_NEG_INF_Text:
 12104 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12104      20662069 
 12104      206E2069 
 12104      20742079 
 12104      2000
 12105              		.section	.rodata.S7_NaN,"a"
 12106              		.align	2
 12107              		.set	.LANCHOR3,. + 0
 12110              	S7_NaN:
 12111 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12111      6E754D6D 
 12111      45726963 
 12111      00
 12112              		.section	.rodata.S7_NaN_Text,"a"
 12113              		.align	2
 12114              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/ccZdZ92R.s 			page 342


 12117              	S7_NaN_Text:
 12118 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12118      20742020 
 12118      206E2075 
 12118      206D2065 
 12118      20722069 
 12119              		.section	.rodata.S7_STEP,"a"
 12120              		.align	2
 12121              		.set	.LANCHOR25,. + 0
 12124              	S7_STEP:
 12125 0000 53744550 		.ascii	"StEP \000"
 12125      2000
 12126              		.section	.rodata.S7_STEP_ShortText,"a"
 12127              		.align	2
 12128              		.set	.LANCHOR19,. + 0
 12131              	S7_STEP_ShortText:
 12132 0000 53544550 		.ascii	"STEP\000"
 12132      00
 12133              		.section	.rodata.S7_fract_EQ,"a"
 12134              		.align	2
 12135              		.set	.LANCHOR9,. + 0
 12138              	S7_fract_EQ:
 12139 0000 203D2000 		.ascii	" = \000"
 12140              		.section	.rodata.S7_fract_GT,"a"
 12141              		.align	2
 12142              		.set	.LANCHOR10,. + 0
 12145              	S7_fract_GT:
 12146 0000 20477400 		.ascii	" Gt\000"
 12147              		.section	.rodata.S7_fract_LT,"a"
 12148              		.align	2
 12149              		.set	.LANCHOR8,. + 0
 12152              	S7_fract_LT:
 12153 0000 204C7400 		.ascii	" Lt\000"
 12154              		.section	.rodata.S_SURE,"a"
 12155              		.align	2
 12156              		.set	.LANCHOR21,. + 0
 12159              	S_SURE:
 12160 0000 53757265 		.ascii	"Sure?\000"
 12160      3F00
 12161              		.section	.rodata.SvnRevision,"a"
 12162              		.align	2
 12163              		.set	.LANCHOR20,. + 0
 12166              	SvnRevision:
 12167 0000 30202020 		.ascii	"0   "
 12168              		.section	.rodata.digtbl,"a"
 12169              		.align	2
 12170              		.set	.LANCHOR2,. + 0
 12173              	digtbl:
 12174 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12174      02421252 
 12174      2D000000 
 12174      00000000 
 12174      00
 12175 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12175      00000017 
 12175      01000000 
 12175      00
ARM GAS  /tmp/ccZdZ92R.s 			page 343


 12176 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12176      28000000 
 12176      0020664B 
 12176      00000010 
 12177 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12177      5E5B3973 
 12177      77497F7B 
 12177      00000612 
 12177      0300787D 
 12178 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12178      673D240F 
 12178      75266C6D 
 12178      6F7C7914 
 12178      73362F00 
 12179 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12179      161F7674 
 12179      6735040F 
 12179      75266915 
 12179      177C7914 
 12180 0076 000F003B 		.ascii	"\000\017\000;"
 12181              		.section	.rodata.error_table.8493,"a"
 12182              		.align	2
 12183              		.set	.LANCHOR27,. + 0
 12186              	error_table.8493:
 12187 0000 1C000000 		.word	.LC61
 12188 0004 30000000 		.word	.LC62
 12189 0008 38000000 		.word	.LC63
 12190 000c 4C000000 		.word	.LC64
 12191 0010 60000000 		.word	.LC65
 12192 0014 64000000 		.word	.LC66
 12193 0018 68000000 		.word	.LC67
 12194 001c 78000000 		.word	.LC68
 12195 0020 8C000000 		.word	.LC69
 12196 0024 9C000000 		.word	.LC70
 12197 0028 A8000000 		.word	.LC71
 12198 002c B4000000 		.word	.LC72
 12199 0030 C0000000 		.word	.LC73
 12200 0034 CC000000 		.word	.LC74
 12201 0038 D8000000 		.word	.LC75
 12202 003c F0000000 		.word	.LC76
 12203 0040 04010000 		.word	.LC77
 12204 0044 18010000 		.word	.LC78
 12205 0048 20010000 		.word	.LC79
 12206 004c 30010000 		.word	.LC80
 12207 0050 40010000 		.word	.LC81
 12208 0054 50010000 		.word	.LC82
 12209 0058 64010000 		.word	.LC83
 12210 005c 70010000 		.word	.LC84
 12211 0060 80010000 		.word	.LC85
 12212 0064 98010000 		.word	.LC86
 12213              		.section	.rodata.error_table_text.8494,"a"
 12214              		.align	2
 12215              		.set	.LANCHOR28,. + 0
 12218              	error_table_text.8494:
 12219 0000 10000000 		.word	.LC46
 12220 0004 A8000000 		.word	.LC41
 12221 0008 20000000 		.word	.LC47
ARM GAS  /tmp/ccZdZ92R.s 			page 344


 12222 000c 30000000 		.word	.LC48
 12223 0010 A8000000 		.word	.LC41
 12224 0014 A8000000 		.word	.LC41
 12225 0018 40000000 		.word	.LC49
 12226 001c 4C000000 		.word	.LC50
 12227 0020 A8000000 		.word	.LC41
 12228 0024 A8000000 		.word	.LC41
 12229 0028 A8000000 		.word	.LC41
 12230 002c 60000000 		.word	.LC51
 12231 0030 6C000000 		.word	.LC52
 12232 0034 A8000000 		.word	.LC41
 12233 0038 78000000 		.word	.LC53
 12234 003c 8C000000 		.word	.LC54
 12235 0040 A4000000 		.word	.LC55
 12236 0044 A8000000 		.word	.LC41
 12237 0048 B8000000 		.word	.LC56
 12238 004c C4000000 		.word	.LC57
 12239 0050 D8000000 		.word	.LC58
 12240 0054 E4000000 		.word	.LC59
 12241 0058 A8000000 		.word	.LC41
 12242 005c 60000000 		.word	.LC51
 12243 0060 F8000000 		.word	.LC60
 12244 0064 A8000000 		.word	.LC41
 12245              		.section	.rodata.libname,"a"
 12246              		.align	2
 12247              		.set	.LANCHOR22,. + 0
 12250              	libname:
 12251 0000 72414D6D 		.ascii	"rAMm\000"
 12251      00
 12252 0005 4C696220 		.ascii	"Lib \000"
 12252      00
 12253 000a 42757020 		.ascii	"Bup \000"
 12253      00
 12254 000f 726F4D6D 		.ascii	"roMm\000"
 12254      00
 12255              		.section	.rodata.libname_shorttext,"a"
 12256              		.align	2
 12257              		.set	.LANCHOR24,. + 0
 12260              	libname_shorttext:
 12261 0000 52616D00 		.ascii	"Ram\000"
 12262 0004 00       		.space	1
 12263 0005 4C696200 		.ascii	"Lib\000"
 12264 0009 00       		.space	1
 12265 000a 42757000 		.ascii	"Bup\000"
 12266 000e 00       		.space	1
 12267 000f 526F6D00 		.ascii	"Rom\000"
 12268 0013 00       		.space	1
 12269              		.section	.rodata.libname_text,"a"
 12270              		.align	2
 12271              		.set	.LANCHOR23,. + 0
 12274              	libname_text:
 12275 0000 20522061 		.ascii	" R a m \000"
 12275      206D2000 
 12276 0008 0000     		.space	2
 12277 000a 204C2069 		.ascii	" L i b \000"
 12277      20622000 
 12278 0012 0000     		.space	2
ARM GAS  /tmp/ccZdZ92R.s 			page 345


 12279 0014 20422075 		.ascii	" B u p \000"
 12279      20702000 
 12280 001c 0000     		.space	2
 12281 001e 2052206F 		.ascii	" R o m \000"
 12281      206D2000 
 12282 0026 0000     		.space	2
 12283              		.section	.rodata.shift_chars.8590,"a"
 12284              		.align	2
 12285              		.set	.LANCHOR15,. + 0
 12288              	shift_chars.8590:
 12289 0000 20111213 		.ascii	" \021\022\023"
 12290              		.section	.rodata.small_dots.8781,"a"
 12291              		.align	2
 12292              		.set	.LANCHOR14,. + 0
 12295              	small_dots.8781:
 12296 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12296      07E12C06 
 12296      07E12C06 
 12296      06
 12297              		.section	.rodata.small_minus.8780,"a"
 12298              		.align	2
 12299              		.set	.LANCHOR13,. + 0
 12302              	small_minus.8780:
 12303 0000 07C22D06 		.ascii	"\007\302-\006"
 12304              		.text
 12305              	.Letext0:
 12306              		.file 2 "src/decNumber/decContext.h"
 12307              		.file 3 "src/decNumber/decNumber.h"
 12308              		.file 4 "src/decNumber/decimal64.h"
 12309              		.file 5 "src/decNumber/decimal128.h"
 12310              		.file 6 "src/xeq.h"
 12311              		.file 7 "src/data.h"
 12312              		.file 8 "src/storage.h"
 12313              		.file 9 "src/display.h"
 12314              		.file 10 "src/consts.h"
 12315              		.file 11 "src/stats.h"
 12316              		.file 12 "src/revision.h"
 12317              		.file 13 "src/charset7.h"
 12318              		.file 14 "src/lcd.h"
 12319              		.file 15 "src/decn.h"
 12320              		.file 16 "src/alpha.h"
 12321              		.file 17 "src/int.h"
ARM GAS  /tmp/ccZdZ92R.s 			page 346


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccZdZ92R.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccZdZ92R.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccZdZ92R.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccZdZ92R.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccZdZ92R.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccZdZ92R.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccZdZ92R.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccZdZ92R.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccZdZ92R.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccZdZ92R.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccZdZ92R.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccZdZ92R.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccZdZ92R.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccZdZ92R.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccZdZ92R.s:669    .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccZdZ92R.s:673    .text.set_exp:0000000000000000 $t
     /tmp/ccZdZ92R.s:680    .text.set_exp:0000000000000000 set_exp
     /tmp/ccZdZ92R.s:901    .text.set_exp:00000000000000b0 $d
     /tmp/ccZdZ92R.s:907    .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccZdZ92R.s:914    .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccZdZ92R.s:982    .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccZdZ92R.s:988    .text.set_decimal:0000000000000000 $t
     /tmp/ccZdZ92R.s:995    .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccZdZ92R.s:1091   .text.set_decimal:000000000000004c $d
     /tmp/ccZdZ92R.s:1099   .text.set_digits_string:0000000000000000 $t
     /tmp/ccZdZ92R.s:1106   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccZdZ92R.s:1200   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccZdZ92R.s:1204   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccZdZ92R.s:1211   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccZdZ92R.s:1358   .text.check_special_dn.isra.0:000000000000007c $d
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccZdZ92R.s:1370   .text.set_x_hms:0000000000000000 $t
     /tmp/ccZdZ92R.s:1377   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccZdZ92R.s:1878   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccZdZ92R.s:1888   .text.set_x_fract:0000000000000000 $t
     /tmp/ccZdZ92R.s:1895   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccZdZ92R.s:2331   .text.set_x_fract:0000000000000198 $d
     /tmp/ccZdZ92R.s:2346   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccZdZ92R.s:2347   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccZdZ92R.s:2350   .text.carry_overflow:0000000000000000 $t
     /tmp/ccZdZ92R.s:2357   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccZdZ92R.s:2494   .text.carry_overflow:0000000000000070 $d
     /tmp/ccZdZ92R.s:2504   .text.set_int_x:0000000000000000 $t
     /tmp/ccZdZ92R.s:2511   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccZdZ92R.s:3229   .text.set_int_x:00000000000002f8 $d
               .rodata.CSWTCH.313:0000000000000000 CSWTCH.315
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccZdZ92R.s:3240   .text.set_int_x:0000000000000310 $t
     /tmp/ccZdZ92R.s:3405   .text.set_int_x:00000000000003c8 $d
     /tmp/ccZdZ92R.s:3413   .text.set_annunciators:0000000000000000 $t
     /tmp/ccZdZ92R.s:3420   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccZdZ92R.s:3793   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
ARM GAS  /tmp/ccZdZ92R.s 			page 347


     /tmp/ccZdZ92R.s:3805   .text.s_s_sized.constprop.0:0000000000000000 $t
     /tmp/ccZdZ92R.s:3812   .text.s_s_sized.constprop.0:0000000000000000 s_s_sized.constprop.0
     /tmp/ccZdZ92R.s:4257   .text.s_s_sized.constprop.0:0000000000000190 $d
                            *COM*:000000000000001f LastDisplayedText
     /tmp/ccZdZ92R.s:4265   .text.getdig:0000000000000000 $t
     /tmp/ccZdZ92R.s:4273   .text.getdig:0000000000000000 getdig
     /tmp/ccZdZ92R.s:4293   .text.getdig:0000000000000008 $d
     /tmp/ccZdZ92R.s:4298   .text.dot:0000000000000000 $t
     /tmp/ccZdZ92R.s:4306   .text.dot:0000000000000000 dot
     /tmp/ccZdZ92R.s:4329   .text.std_round_fix:0000000000000000 $t
     /tmp/ccZdZ92R.s:4337   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccZdZ92R.s:4419   .text.std_round_fix:000000000000004c $d
     /tmp/ccZdZ92R.s:4425   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccZdZ92R.s:4433   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccZdZ92R.s:4493   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccZdZ92R.s:4500   .text.pixel_length:0000000000000000 $t
     /tmp/ccZdZ92R.s:4508   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccZdZ92R.s:4599   .text.set_status:0000000000000000 $t
     /tmp/ccZdZ92R.s:4606   .text.set_status:0000000000000000 set_status
     /tmp/ccZdZ92R.s:4708   .text.set_status:0000000000000034 $d
     /tmp/ccZdZ92R.s:4715   .text.set_x_dn:0000000000000000 $t
     /tmp/ccZdZ92R.s:4723   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccZdZ92R.s:5491   .text.set_x_dn:0000000000000328 $d
     /tmp/ccZdZ92R.s:5500   .text.set_x_dn:000000000000033c $t
     /tmp/ccZdZ92R.s:5619   .text.set_x_dn:00000000000003dc $d
     /tmp/ccZdZ92R.s:5625   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccZdZ92R.s:5652   .text.set_x_dn:000000000000041c $d
     /tmp/ccZdZ92R.s:5658   .text.set_x_dn:0000000000000426 $t
     /tmp/ccZdZ92R.s:6163   .text.set_x_dn:0000000000000644 $d
     /tmp/ccZdZ92R.s:6179   .text.set_x_dn:0000000000000660 $t
     /tmp/ccZdZ92R.s:6893   .text.set_x_dn:0000000000000950 $d
     /tmp/ccZdZ92R.s:6902   .text.set_x:0000000000000000 $t
     /tmp/ccZdZ92R.s:6909   .text.set_x:0000000000000000 set_x
     /tmp/ccZdZ92R.s:6977   .text.format_reg:0000000000000000 $t
     /tmp/ccZdZ92R.s:6985   .text.format_reg:0000000000000000 format_reg
     /tmp/ccZdZ92R.s:7104   .text.format_reg:0000000000000064 $d
     /tmp/ccZdZ92R.s:7110   .text.set_status_right:0000000000000000 $t
     /tmp/ccZdZ92R.s:7117   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccZdZ92R.s:7266   .text.set_status_right:0000000000000060 $d
     /tmp/ccZdZ92R.s:7271   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccZdZ92R.s:7320   .text.annunciators:0000000000000000 $t
     /tmp/ccZdZ92R.s:7327   .text.annunciators:0000000000000000 annunciators
     /tmp/ccZdZ92R.s:8040   .text.annunciators:00000000000002ec $d
     /tmp/ccZdZ92R.s:8060   .text.annunciators:000000000000032c $t
     /tmp/ccZdZ92R.s:8286   .text.annunciators:000000000000042c $d
     /tmp/ccZdZ92R.s:8302   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccZdZ92R.s:8369   .text.display:0000000000000000 $t
     /tmp/ccZdZ92R.s:8377   .text.display:0000000000000000 display
     /tmp/ccZdZ92R.s:9051   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccZdZ92R.s:9069   .text.display:0000000000000334 $t
     /tmp/ccZdZ92R.s:9768   .text.display:000000000000063c $d
     /tmp/ccZdZ92R.s:9798   .text.display:0000000000000694 $t
     /tmp/ccZdZ92R.s:10645  .text.display:00000000000009c8 $d
     /tmp/ccZdZ92R.s:10662  .text.display:00000000000009fc $t
ARM GAS  /tmp/ccZdZ92R.s 			page 348


     /tmp/ccZdZ92R.s:11396  .text.display:0000000000000d10 $d
     /tmp/ccZdZ92R.s:11417  .text.display:0000000000000d4c $t
     /tmp/ccZdZ92R.s:11522  .text.display:0000000000000db0 $d
     /tmp/ccZdZ92R.s:11533  .text.frozen_display:0000000000000000 $t
     /tmp/ccZdZ92R.s:11541  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccZdZ92R.s:11571  .text.frozen_display:000000000000001c $d
     /tmp/ccZdZ92R.s:11576  .text.message:0000000000000000 $t
     /tmp/ccZdZ92R.s:11584  .text.message:0000000000000000 message
     /tmp/ccZdZ92R.s:11713  .text.message:0000000000000060 $d
     /tmp/ccZdZ92R.s:11721  .text.error_message:0000000000000000 $t
     /tmp/ccZdZ92R.s:11729  .text.error_message:0000000000000000 error_message
     /tmp/ccZdZ92R.s:11872  .text.error_message:000000000000006c $d
     /tmp/ccZdZ92R.s:11884  .rodata.str1.4:0000000000000000 $d
     /tmp/ccZdZ92R.s:12056  .rodata.CSWTCH.313:0000000000000000 CSWTCH.313
     /tmp/ccZdZ92R.s:12075  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccZdZ92R.s:12049  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccZdZ92R.s:12166  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccZdZ92R.s:11953  .rodata:0000000000000000 $d
     /tmp/ccZdZ92R.s:12036  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccZdZ92R.s:12037  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccZdZ92R.s:12042  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccZdZ92R.s:12043  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccZdZ92R.s:12045  .bss.no_status_top:0000000000000000 $d
     /tmp/ccZdZ92R.s:12052  .rodata.CSWTCH.313:0000000000000000 $d
     /tmp/ccZdZ92R.s:12062  .rodata.CSWTCH.339:0000000000000000 $d
     /tmp/ccZdZ92R.s:12066  .rodata.CSWTCH.339:0000000000000000 CSWTCH.339
     /tmp/ccZdZ92R.s:12071  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccZdZ92R.s:12078  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccZdZ92R.s:12082  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccZdZ92R.s:12085  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccZdZ92R.s:12089  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccZdZ92R.s:12092  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccZdZ92R.s:12096  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccZdZ92R.s:12099  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccZdZ92R.s:12103  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccZdZ92R.s:12106  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccZdZ92R.s:12110  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccZdZ92R.s:12113  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccZdZ92R.s:12117  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccZdZ92R.s:12120  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccZdZ92R.s:12124  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccZdZ92R.s:12127  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccZdZ92R.s:12131  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccZdZ92R.s:12134  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccZdZ92R.s:12138  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccZdZ92R.s:12141  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccZdZ92R.s:12145  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccZdZ92R.s:12148  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccZdZ92R.s:12152  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccZdZ92R.s:12155  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccZdZ92R.s:12159  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccZdZ92R.s:12162  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccZdZ92R.s:12169  .rodata.digtbl:0000000000000000 $d
     /tmp/ccZdZ92R.s:12173  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccZdZ92R.s:12182  .rodata.error_table.8493:0000000000000000 $d
     /tmp/ccZdZ92R.s:12186  .rodata.error_table.8493:0000000000000000 error_table.8493
ARM GAS  /tmp/ccZdZ92R.s 			page 349


     /tmp/ccZdZ92R.s:12214  .rodata.error_table_text.8494:0000000000000000 $d
     /tmp/ccZdZ92R.s:12218  .rodata.error_table_text.8494:0000000000000000 error_table_text.8494
     /tmp/ccZdZ92R.s:12246  .rodata.libname:0000000000000000 $d
     /tmp/ccZdZ92R.s:12250  .rodata.libname:0000000000000000 libname
     /tmp/ccZdZ92R.s:12256  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccZdZ92R.s:12260  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccZdZ92R.s:12270  .rodata.libname_text:0000000000000000 $d
     /tmp/ccZdZ92R.s:12274  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccZdZ92R.s:12284  .rodata.shift_chars.8590:0000000000000000 $d
     /tmp/ccZdZ92R.s:12288  .rodata.shift_chars.8590:0000000000000000 shift_chars.8590
     /tmp/ccZdZ92R.s:12291  .rodata.small_dots.8781:0000000000000000 $d
     /tmp/ccZdZ92R.s:12295  .rodata.small_dots.8781:0000000000000000 small_dots.8781
     /tmp/ccZdZ92R.s:12298  .rodata.small_minus.8780:0000000000000000 $d
     /tmp/ccZdZ92R.s:12302  .rodata.small_minus.8780:0000000000000000 small_minus.8780

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
xset
num_arg_0
num_arg
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
ARM GAS  /tmp/ccZdZ92R.s 			page 350


finish_display
Running
charlengths
findlengths
unpackchar
RectPolConv
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
ARM GAS  /tmp/ccZdZ92R.s 			page 351


global_regs
local_regs
SizeStatRegs

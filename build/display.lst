ARM GAS  /tmp/cchf4YwX.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/cchf4YwX.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** #ifdef TOP_ROW
  43:src/display.c **** static void set_status_top_always(const char *);
  44:src/display.c **** #endif
  45:src/display.c **** 
  46:src/display.c **** static void set_status_right(const char *);
  47:src/display.c **** static void set_status_graphic(const unsigned char *);
  48:src/display.c **** 
  49:src/display.c **** static void set_int_x(const long long int value, char *res);
  50:src/display.c **** 
  51:src/display.c **** const char *DispMsg; // What to display in message area
  52:src/display.c **** 
  53:src/display.c **** short int DispPlot;
  54:src/display.c **** short int no_status_top = 0;
  55:src/display.c **** 
  56:src/display.c **** #ifndef REALBUILD
  57:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  58:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  59:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  60:src/display.c **** char forceDispPlot;
  61:src/display.c **** #endif
  62:src/display.c **** 
  63:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  64:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  65:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  66:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  67:src/display.c **** 
  68:src/display.c **** /* Message strings
  69:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  70:src/display.c ****  * are for the upper dot matrix line.
  71:src/display.c ****  */
  72:src/display.c **** static const char S_SURE[] = "Sure?";
  73:src/display.c **** 
  74:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  75:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  76:src/display.c **** #ifndef REALBUILD
  77:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  78:src/display.c **** #endif
  79:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  82:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  86:src/display.c **** #ifndef REALBUILD
  87:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
ARM GAS  /tmp/cchf4YwX.s 			page 3


  88:src/display.c **** #endif
  89:src/display.c **** 
  90:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  91:src/display.c **** static const char S7_fract_LT[] = " Lt";
  92:src/display.c **** static const char S7_fract_GT[] = " Gt";
  93:src/display.c **** 
  94:src/display.c **** static const char libname[][5] = {
  95:src/display.c ****   "rAMm", "Lib ", "Bup ",
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c ****   "roMm"
  98:src/display.c **** #endif
  99:src/display.c **** };
 100:src/display.c **** 
 101:src/display.c **** #ifndef REALBUILD
 102:src/display.c **** static const char libname_text[][10] = {
 103:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 104:src/display.c **** };
 105:src/display.c **** static const char libname_shorttext[][5] = {
 106:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 107:src/display.c **** };
 108:src/display.c **** #endif
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Set the separator and decimal mode globals
 112:src/display.c ****  */
 113:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 113 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 114:src/display.c ****   // Separators used by various modes
 115:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 115 3 view .LVU1
  35              		.loc 1 115 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 116:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 116 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 115 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 115 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 113:src/display.c ****   // Separators used by various modes
  44              		.loc 1 113 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 115 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 116 5 is_stmt 1 view .LVU8
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/cchf4YwX.s 			page 4


  52              		.loc 1 117 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 118:src/display.c ****   }
 119:src/display.c ****   else {
 120:src/display.c ****     SeparatorMode = SEP_COMMA;
 121:src/display.c ****     DecimalMode = DECIMAL_DOT;
 122:src/display.c ****   }
 123:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 123 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 117 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 116 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 117 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 123 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 116 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 117 5 is_stmt 1 view .LVU16
  67              		.loc 1 123 3 view .LVU17
  68              		.loc 1 123 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 123 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 124:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 124 5 is_stmt 1 view .LVU20
  76              		.loc 1 124 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 125:src/display.c **** }
  80              		.loc 1 125 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 120 5 is_stmt 1 view .LVU23
 121:src/display.c ****   }
  90              		.loc 1 121 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 123 8 view .LVU25
ARM GAS  /tmp/cchf4YwX.s 			page 5


  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 121:src/display.c ****   }
  94              		.loc 1 121 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 120 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 123 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 120 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 121:src/display.c ****   }
 102              		.loc 1 121 5 is_stmt 1 view .LVU30
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 123 3 view .LVU31
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 123 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 123 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 125 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 126:src/display.c **** 
 127:src/display.c **** 
 128:src/display.c **** /* Table of error messages.
 129:src/display.c ****  * These consist of a double string.  The first is displayed in the
 130:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 131:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 132:src/display.c ****  */
 133:src/display.c **** void error_message(const unsigned int e) 
ARM GAS  /tmp/cchf4YwX.s 			page 6


 134:src/display.c **** {
 135:src/display.c **** #define MSG1(top) top "\0"
 136:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 137:src/display.c **** 
 138:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 139:src/display.c ****   static const char *const error_table[] = 
 140:src/display.c ****     {
 141:src/display.c ****       // manually get the order correct!
 142:src/display.c ****       MSG2("Running", "ProGraMm"),
 143:src/display.c ****       MSG1("Domain"),
 144:src/display.c ****       MSG2("Bad time", "or dAtE"),
 145:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 146:src/display.c ****       MSG1("+\237"),
 147:src/display.c ****       MSG1("-\237"),
 148:src/display.c ****       MSG2("No such", "LAbEL"),
 149:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 150:src/display.c ****       MSG1("Out of range"),
 151:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 152:src/display.c ****       MSG2("Bad digit", "1"),
 153:src/display.c ****       MSG2("Too long", "1"),
 154:src/display.c **** #else
 155:src/display.c ****       MSG1("Bad digit"),
 156:src/display.c ****       MSG1("Too long"),
 157:src/display.c **** #endif
 158:src/display.c ****       MSG2("RAM is", "FuLL"),
 159:src/display.c ****       MSG2("Stack", "CLASH"),
 160:src/display.c ****       MSG1("Bad mode"),
 161:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 162:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 163:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 164:src/display.c ****       MSG1("I/O"),
 165:src/display.c ****       MSG2("Invalid", "dAtA"),
 166:src/display.c ****       MSG2("Write", "ProtEctEd"),
 167:src/display.c ****       MSG2("No root", "Found"),
 168:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 169:src/display.c ****       MSG1("Singular"),
 170:src/display.c ****       MSG2("Flash is", "FuLL"),
 171:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 172:src/display.c **** #ifndef SHIFT_EXPONENT
 173:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG2("Too\007\304 small", "1"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG2("Too small", "1"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG2("Too big", "1"),
 180:src/display.c **** #  else
 181:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 182:src/display.c ****       MSG1("Too\007\304 small"),
 183:src/display.c **** #     else
 184:src/display.c ****       MSG1("Too small"),
 185:src/display.c **** #     endif
 186:src/display.c ****       MSG1("Too big"),
 187:src/display.c **** #  endif
 188:src/display.c **** #endif
 189:src/display.c **** #ifdef INCLUDE_C_LOCK
 190:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
ARM GAS  /tmp/cchf4YwX.s 			page 7


 191:src/display.c **** #endif
 192:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 193:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 194:src/display.c ****       MSG2("Interrupted", "X"),
 195:src/display.c **** #endif
 196:src/display.c ****     };
 197:src/display.c **** #undef MSG1
 198:src/display.c **** #undef MSG2
 199:src/display.c **** #ifndef REALBUILD
 200:src/display.c ****   static const char *const error_table_text[] =
 201:src/display.c ****     {
 202:src/display.c ****       " P r o g r a m ",
 203:src/display.c ****       "",
 204:src/display.c ****       " o r   d a t e ",
 205:src/display.c ****       " O p - c o d e ",
 206:src/display.c ****       "",
 207:src/display.c ****       "",
 208:src/display.c ****       " L a b e l ",
 209:src/display.c ****       " O p e r a t i o n ",
 210:src/display.c ****       "",
 211:src/display.c ****       "",
 212:src/display.c ****       "",
 213:src/display.c ****       " F u l l ",
 214:src/display.c ****       " C l a s h ",
 215:src/display.c ****       "",
 216:src/display.c ****       " T o o   s m a l l ",
 217:src/display.c ****       " D a t a   p o i n t s ",
 218:src/display.c ****       " P a r a m e t e r ",
 219:src/display.c ****       "",
 220:src/display.c ****       " D a t a ",
 221:src/display.c ****       " P r o t e c t e d ",
 222:src/display.c ****       " F o u n d ",
 223:src/display.c ****       " M i s m a t c h ",
 224:src/display.c ****       "",
 225:src/display.c ****       " F u l l ",
 226:src/display.c ****       " I n s t a l l e d ",
 227:src/display.c **** #ifndef SHIFT_EXPONENT
 228:src/display.c ****       "",
 229:src/display.c ****       "",
 230:src/display.c **** #endif
 231:src/display.c **** #ifdef INCLUDE_C_LOCK
 232:src/display.c ****       "",
 233:src/display.c **** #endif
 234:src/display.c ****       "",
 235:src/display.c ****     };
 236:src/display.c **** #endif
 237:src/display.c **** 
 238:src/display.c ****   if (e != ERR_NONE || Running) {
 239:src/display.c ****     const char *p = error_table[e];
 240:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 241:src/display.c ****     if (*q == '\0')
 242:src/display.c ****       q = S7_ERROR;
 243:src/display.c ****     if (*q == 'X') {
 244:src/display.c ****       DispMsg = p;
 245:src/display.c ****       frozen_display();
 246:src/display.c ****     }
 247:src/display.c ****     else {
ARM GAS  /tmp/cchf4YwX.s 			page 8


 248:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 249:src/display.c ****       if (*q == '1')
 250:src/display.c **** 	q = CNULL;
 251:src/display.c **** #endif
 252:src/display.c ****       message(p, q);
 253:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 254:src/display.c **** #ifndef REALBUILD
 255:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 256:src/display.c **** #endif
 257:src/display.c ****     }
 258:src/display.c **** #ifdef INFRARED
 259:src/display.c ****     if (Tracing) {
 260:src/display.c ****       if (*q == 'X')
 261:src/display.c **** 	print_reg(regX_idx, p, 0);
 262:src/display.c ****       else {
 263:src/display.c **** 	print_tab(0);
 264:src/display.c **** 	print_line(p, 0);
 265:src/display.c **** 	print(' ');
 266:src/display.c **** 	while (*q != '\0') {
 267:src/display.c **** 	  int c = *q;
 268:src/display.c **** 	  if (c >= 'A')
 269:src/display.c **** 	    c |= 0x60; // ASCII lower case
 270:src/display.c **** 	  print(c);
 271:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 272:src/display.c **** 	    ++q;
 273:src/display.c **** 	  ++q;
 274:src/display.c **** 	}
 275:src/display.c **** 	print_advance( 0 );
 276:src/display.c ****       }
 277:src/display.c ****     }
 278:src/display.c **** #endif
 279:src/display.c ****   }
 280:src/display.c **** }
 281:src/display.c **** 
 282:src/display.c **** 
 283:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 284:src/display.c ****  * display.
 285:src/display.c ****  */
 286:src/display.c **** #define D_TOP 64
 287:src/display.c **** #define D_TL 32
 288:src/display.c **** #define D_TR 8
 289:src/display.c **** #define D_MIDDLE 16
 290:src/display.c **** #define D_BL 4
 291:src/display.c **** #define D_BR 1
 292:src/display.c **** #define D_BOTTOM 2
 293:src/display.c **** 
 294:src/display.c **** #include "charset7.h"
 295:src/display.c **** 
 296:src/display.c **** #ifndef REALBUILD
 297:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 298:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 299:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 300:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 301:src/display.c **** 
 302:src/display.c **** static void set_mant_sign_dot()
 303:src/display.c **** {
 304:src/display.c ****   LastDisplayedNumber[0]='-';
ARM GAS  /tmp/cchf4YwX.s 			page 9


 305:src/display.c ****   set_dot(MANT_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** static void clr_mant_sign_dot()
 309:src/display.c **** {
 310:src/display.c ****   LastDisplayedNumber[0]=' ';
 311:src/display.c ****   clr_dot(MANT_SIGN);
 312:src/display.c **** }
 313:src/display.c **** 
 314:src/display.c **** static void set_exp_sign_dot()
 315:src/display.c **** {
 316:src/display.c ****   LastDisplayedExponent[0]='-';
 317:src/display.c ****   set_dot(EXP_SIGN);
 318:src/display.c **** }
 319:src/display.c **** 
 320:src/display.c **** static void clr_exp_sign_dot()
 321:src/display.c **** {
 322:src/display.c ****   LastDisplayedExponent[0]=' ';
 323:src/display.c ****   clr_dot(EXP_SIGN);
 324:src/display.c **** }
 325:src/display.c **** 
 326:src/display.c **** #else
 327:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 328:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 329:src/display.c **** 
 330:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 331:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 332:src/display.c **** 
 333:src/display.c **** #endif
 334:src/display.c **** 
 335:src/display.c **** #ifndef REALBUILD
 336:src/display.c **** int getdig(int ch)
 337:src/display.c **** #else
 338:src/display.c ****   static int getdig(int ch)
 339:src/display.c **** #endif
 340:src/display.c **** {
 341:src/display.c ****   // perform index lookup
 342:src/display.c ****   return digtbl[ch&0xff];
 343:src/display.c **** }
 344:src/display.c **** 
 345:src/display.c **** void dot(int n, int on) {
 346:src/display.c ****   if (on)	set_dot(n);
 347:src/display.c ****   else	clr_dot(n);
 348:src/display.c **** }
 349:src/display.c **** 
 350:src/display.c **** 
 351:src/display.c **** /* Set the decimal point *after* the indicated digit
 352:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 353:src/display.c ****  * of decimal.
 354:src/display.c ****  */
 355:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 356:src/display.c ****   if (res) {
 357:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 358:src/display.c ****   } else {
 359:src/display.c ****     set_dot(posn+7);
 360:src/display.c ****     if (decimal != DECIMAL_DOT)
 361:src/display.c ****       set_dot(posn+8);
ARM GAS  /tmp/cchf4YwX.s 			page 10


 362:src/display.c **** #ifndef REALBUILD
 363:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 364:src/display.c **** #endif
 365:src/display.c ****   }
 366:src/display.c ****   return res;
 367:src/display.c **** }
 368:src/display.c **** 
 369:src/display.c **** /* Set the digit group separator *before* the specified digit.
 370:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 371:src/display.c ****  * sep argument.
 372:src/display.c ****  */
 373:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 374:src/display.c ****   if (sep == SEP_NONE)
 375:src/display.c ****     return res;
 376:src/display.c ****   if (res) {
 377:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 378:src/display.c ****     else *res++ = '.';
 379:src/display.c ****   } else {
 380:src/display.c ****     posn -= SEGS_PER_DIGIT;
 381:src/display.c ****     set_dot(posn+7);
 382:src/display.c ****     if (sep == SEP_COMMA)
 383:src/display.c ****       set_dot(posn+8);
 384:src/display.c **** #ifndef REALBUILD
 385:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 386:src/display.c **** #endif
 387:src/display.c ****   }
 388:src/display.c ****   return res;
 389:src/display.c **** }
 390:src/display.c **** 
 391:src/display.c **** /* Set a digit in positions [base, base+6] */
 392:src/display.c **** static void set_dig(int base, int ch)
 393:src/display.c **** {
 136              		.loc 1 393 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 394:src/display.c ****   int i;
 140              		.loc 1 394 3 view .LVU36
 395:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 395 3 view .LVU37
 142              	.LBB175:
 143              	.LBI175:
 336:src/display.c **** #else
 144              		.loc 1 336 5 view .LVU38
 145              	.LBB176:
 342:src/display.c **** }
 146              		.loc 1 342 3 view .LVU39
 342:src/display.c **** }
 147              		.loc 1 342 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 342:src/display.c **** }
 149              		.loc 1 342 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE176:
 152              	.LBE175:
 396:src/display.c **** #ifndef REALBUILD
 397:src/display.c ****   if(base<SEGS_EXP_BASE)
ARM GAS  /tmp/cchf4YwX.s 			page 11


 153              		.loc 1 397 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 393:src/display.c ****   int i;
 155              		.loc 1 393 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB178:
 163              	.LBB177:
 342:src/display.c **** }
 164              		.loc 1 342 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 342:src/display.c **** }
 167              		.loc 1 342 16 view .LVU45
 168              	.LBE177:
 169              	.LBE178:
 170              		.loc 1 397 3 is_stmt 1 view .LVU46
 171              		.loc 1 397 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 398:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 398 5 is_stmt 1 view .LVU48
 174              		.loc 1 398 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 398 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 398 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 398 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 398 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 399:src/display.c ****   else
 400:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 401:src/display.c **** #endif
 402:src/display.c ****   for (i=6; i>=0; i--)
 403:src/display.c ****     {
 404:src/display.c ****       //		dot(base, c & (1 << i));
 405:src/display.c ****       if (c & (1 << i))
 406:src/display.c **** 	set_dot(base);
 196              		.loc 1 406 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/cchf4YwX.s 			page 12


 198              	.LVL4:
 407:src/display.c ****       else
 408:src/display.c **** 	clr_dot(base);
 409:src/display.c ****       base++;
 199              		.loc 1 409 7 is_stmt 1 view .LVU55
 402:src/display.c ****     {
 200              		.loc 1 402 19 view .LVU56
 402:src/display.c ****     {
 201              		.loc 1 402 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 402:src/display.c ****     {
 204              		.loc 1 402 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 406:src/display.c ****       else
 208              		.loc 1 406 2 is_stmt 1 view .LVU59
 408:src/display.c ****       base++;
 209              		.loc 1 408 2 view .LVU60
 405:src/display.c **** 	set_dot(base);
 210              		.loc 1 405 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 405:src/display.c **** 	set_dot(base);
 212              		.loc 1 405 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 405:src/display.c **** 	set_dot(base);
 216              		.loc 1 405 7 is_stmt 1 view .LVU63
 405:src/display.c **** 	set_dot(base);
 217              		.loc 1 405 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 408:src/display.c ****       base++;
 219              		.loc 1 408 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 409 7 is_stmt 1 view .LVU66
 402:src/display.c ****     {
 223              		.loc 1 402 19 view .LVU67
 402:src/display.c ****     {
 224              		.loc 1 402 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 402:src/display.c ****     {
 227              		.loc 1 402 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 410:src/display.c ****     }
 411:src/display.c **** }
 231              		.loc 1 411 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 400:src/display.c **** #endif
 235              		.loc 1 400 5 is_stmt 1 view .LVU71
ARM GAS  /tmp/cchf4YwX.s 			page 13


 400:src/display.c **** #endif
 236              		.loc 1 400 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 400:src/display.c **** #endif
 238              		.loc 1 400 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 400:src/display.c **** #endif
 240              		.loc 1 400 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 400:src/display.c **** #endif
 242              		.loc 1 400 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 400:src/display.c **** #endif
 246              		.loc 1 400 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 412:src/display.c **** 
 413:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 414:src/display.c ****   if (res) *res++ = ch;
 415:src/display.c ****   else	set_dig(base, ch);
 416:src/display.c ****   return res;
 417:src/display.c **** }
 418:src/display.c **** 
 419:src/display.c **** 
 420:src/display.c **** static void set_digits_string(const char *msg, int j) {
 421:src/display.c ****   for (; *msg != '\0'; msg++) {
 422:src/display.c ****     if (*msg == '.' || *msg == ',')
 423:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 424:src/display.c ****     else {
 425:src/display.c ****       set_dig_s(j, *msg, CNULL);
 426:src/display.c ****       j += SEGS_PER_DIGIT;
 427:src/display.c ****     }
 428:src/display.c ****   }
 429:src/display.c **** }
ARM GAS  /tmp/cchf4YwX.s 			page 14


 430:src/display.c **** 
 431:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 432:src/display.c ****   int i;
 433:src/display.c ****   const int n = res == NULL ? 3 : 4;
 434:src/display.c **** 
 435:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 436:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 437:src/display.c **** }
 438:src/display.c **** 
 439:src/display.c **** /* Force the exponent display
 440:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 441:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 442:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 443:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 444:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 445:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 446:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 447:src/display.c ****  */
 448:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 449:src/display.c ****   union {
 450:src/display.c ****     char buf[4];
 451:src/display.c ****     int i;
 452:src/display.c ****   } u;
 453:src/display.c ****   int negative;
 454:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 455:src/display.c ****   int thousands;
 456:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 457:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 458:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 459:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 460:src/display.c **** #  else
 461:src/display.c ****   const int show_large_exponent = 1;
 462:src/display.c **** #  endif
 463:src/display.c **** #else
 464:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 465:src/display.c ****   int thousands;
 466:src/display.c **** #  endif
 467:src/display.c ****   const int show_large_exponent = 0;
 468:src/display.c **** #endif
 469:src/display.c **** 
 470:src/display.c ****   negative = flags & 2;
 471:src/display.c ****   if (exp < 0) {
 472:src/display.c ****     negative = 1;
 473:src/display.c ****     exp = -exp;
 474:src/display.c ****   }
 475:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 476:src/display.c ****   thousands = exp / 1000;
 477:src/display.c **** #endif
 478:src/display.c ****   if (res) {
 479:src/display.c **** #ifdef INCLUDE_YREG_CODE
 480:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 481:src/display.c ****     if (thousands != 0) {
 482:src/display.c **** #else
 483:src/display.c ****       if (exp > 999) {
 484:src/display.c **** #endif
 485:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 486:src/display.c **** 	// No exponent separator for large -ve exponents
ARM GAS  /tmp/cchf4YwX.s 			page 15


 487:src/display.c ****       }
 488:src/display.c ****       else *res++ = 'e'; // Normal separator
 489:src/display.c **** #else
 490:src/display.c ****       *res++ = 'e';
 491:src/display.c **** #endif
 492:src/display.c ****       if (negative) *res++ = '-';
 493:src/display.c ****     }
 494:src/display.c ****     else {
 495:src/display.c ****       if (negative) SET_EXP_SIGN;
 496:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 497:src/display.c ****       if (thousands != 0) {
 498:src/display.c **** #else
 499:src/display.c **** 	if (exp > 999) {
 500:src/display.c **** #endif
 501:src/display.c **** 	  if (!show_large_exponent
 502:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 503:src/display.c **** 	      && (flags & 8) == 0
 504:src/display.c **** #endif
 505:src/display.c **** 	      ) {
 506:src/display.c **** #ifdef REALBUILD
 507:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 508:src/display.c **** #else
 509:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 510:src/display.c **** #endif
 511:src/display.c **** 	    goto no_number;
 512:src/display.c **** 	  }
 513:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 514:src/display.c **** 	  else {
 515:src/display.c **** 	    exp -= thousands * 1000;
 516:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 517:src/display.c **** 	    if (flags & 16) {
 518:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 519:src/display.c **** 	      int i;
 520:src/display.c **** 
 521:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 522:src/display.c **** 		// Clear digits and separators
 523:src/display.c **** 		clr_dot(i);
 524:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 525:src/display.c **** 	    }
 526:src/display.c **** #  endif
 527:src/display.c **** 	    if (negative) {
 528:src/display.c **** 	      CLR_EXP_SIGN;
 529:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 530:src/display.c **** 	    }
 531:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 532:src/display.c **** 	    flags = 1;
 533:src/display.c **** 	  }
 534:src/display.c **** #endif
 535:src/display.c **** 	}
 536:src/display.c ****       }
 537:src/display.c **** #ifdef REALBUILD
 538:src/display.c ****       u.i = 0; // Smaller ARM code
 539:src/display.c **** #else
 540:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 541:src/display.c **** #endif
 542:src/display.c ****       if (flags & 5) {
 543:src/display.c **** 	num_arg_0(u.buf, exp, 3);
ARM GAS  /tmp/cchf4YwX.s 			page 16


 544:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 545:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 546:src/display.c **** 	  int i;
 547:src/display.c **** 
 548:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 549:src/display.c **** 	    if (u.buf[i] == '0')
 550:src/display.c **** 	      u.buf[i] = ' ';
 551:src/display.c **** 	    else
 552:src/display.c **** 	      break;
 553:src/display.c **** 	  }
 554:src/display.c **** 	  if (i != 0 && negative) {
 555:src/display.c **** 	    // Move minus sign to right in front of exponent
 556:src/display.c **** 	    CLR_EXP_SIGN;
 557:src/display.c **** 	    u.buf[i - 1] = '-';
 558:src/display.c **** 	  }
 559:src/display.c **** 	}
 560:src/display.c **** #endif
 561:src/display.c ****       }
 562:src/display.c ****       else
 563:src/display.c **** 	num_arg(u.buf, exp);
 564:src/display.c ****     no_number:
 565:src/display.c ****       set_exp_digits_string(u.buf, res);
 566:src/display.c ****     }
 567:src/display.c **** 
 568:src/display.c ****     static void carry_overflow(void) {
 569:src/display.c ****       const int base = SEGS_EXP_BASE;
 570:src/display.c ****       int c;
 571:src/display.c ****       unsigned int b;
 572:src/display.c **** 
 573:src/display.c ****       // Figure out the base
 574:src/display.c ****       switch (State2.smode) {
 575:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 576:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 577:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 578:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 579:src/display.c ****       default:	b = UState.int_base+1;	break;
 580:src/display.c ****       }
 581:src/display.c **** 
 582:src/display.c ****       // Display the base as the first exponent digit
 583:src/display.c ****       if (b > 10 && b < 16)
 584:src/display.c **** 	SET_EXP_SIGN;
 585:src/display.c ****       c = "B34567o9D12345h"[b-2];
 586:src/display.c ****       set_dig(base, c);
 587:src/display.c **** 
 588:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 589:src/display.c ****       if (get_carry())
 590:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 591:src/display.c ****       if (get_overflow())
 592:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 593:src/display.c ****     }
 594:src/display.c **** 
 595:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 596:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 597:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 598:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 599:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 600:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 17


 601:src/display.c **** 
 602:src/display.c ****     /* Display the annunicator text line.
 603:src/display.c ****      * Care needs to be taken to keep things aligned.
 604:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 605:src/display.c ****      */
 606:src/display.c **** #ifdef TOP_ROW
 607:src/display.c ****     static void annunciators(void) {
 608:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 609:src/display.c ****       char buf[42], *p = buf, *q="";
 610:src/display.c ****       char buf2[42], *p2 = buf2;
 611:src/display.c ****       int n;
 612:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 613:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 614:src/display.c ****       // Constant variables and code branches depending on a constant variable
 615:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 616:src/display.c ****       // feature run-time configurable if needed.
 617:src/display.c **** #ifdef INCLUDE_YREG_CODE
 618:src/display.c **** #  ifdef YREG_ALWAYS_ON
 619:src/display.c ****       const int yreg_enabled = 1;
 620:src/display.c **** #  else
 621:src/display.c ****       const int yreg_enabled = UState.show_y;
 622:src/display.c **** #  endif
 623:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 624:src/display.c ****       const int yreg_hms = 1;
 625:src/display.c **** #  else
 626:src/display.c ****       const int yreg_hms = 0;
 627:src/display.c **** #  endif
 628:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 629:src/display.c ****       const int yreg_fract = 1;
 630:src/display.c **** #  else
 631:src/display.c ****       const int yreg_fract = 0;
 632:src/display.c **** #  endif
 633:src/display.c **** #else
 634:src/display.c ****       const int yreg_enabled = 0;
 635:src/display.c ****       const int yreg_hms = 0;
 636:src/display.c ****       const int yreg_fract = 0;
 637:src/display.c **** #endif
 638:src/display.c **** #ifdef RP_PREFIX
 639:src/display.c ****       const int rp_prefix = 1;
 640:src/display.c **** #else
 641:src/display.c ****       const int rp_prefix = 0;
 642:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 643:src/display.c **** #endif
 644:src/display.c ****       // Indicates whether font escape code is compiled in.
 645:src/display.c ****       // This variable will always be set at compile time.
 646:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 647:src/display.c ****       const int has_FONT_ESCAPE = 1;
 648:src/display.c **** #else
 649:src/display.c ****       const int has_FONT_ESCAPE = 0;
 650:src/display.c **** #endif
 651:src/display.c **** 
 652:src/display.c ****       xset(buf, '\0', sizeof(buf));
 653:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 654:src/display.c ****       
 655:src/display.c ****       if (is_intmode()) {
 656:src/display.c **** #ifdef SHOW_STACK_SIZE
 657:src/display.c **** 	if (shift_char == ' ') {
ARM GAS  /tmp/cchf4YwX.s 			page 18


 658:src/display.c **** 	  *p2++ = '\007';
 659:src/display.c **** 	  *p2++ = '\346';
 660:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 661:src/display.c **** 	}
 662:src/display.c **** 	else
 663:src/display.c **** #endif
 664:src/display.c **** 	  {
 665:src/display.c **** 	    *p2++ = shift_char;
 666:src/display.c **** 	    *p2++ = '\006';
 667:src/display.c **** 	  }
 668:src/display.c **** 
 669:src/display.c **** 	switch(int_mode()) {
 670:src/display.c **** 	default:
 671:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 672:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 673:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 674:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 675:src/display.c **** 	}
 676:src/display.c **** 	q = scopy(p2, q);
 677:src/display.c **** 	*q++ = '\006';
 678:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 679:src/display.c **** 
 680:src/display.c **** 	if (IntMaxWindow > 0) {
 681:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 682:src/display.c **** 	  if (*q == '1')
 683:src/display.c **** 	    n += 2;
 684:src/display.c **** 	  if (q[1] == '1')
 685:src/display.c **** 	    n += 2;
 686:src/display.c **** 	  while (n-- > 0)
 687:src/display.c **** 	    *p2++ = '\006';
 688:src/display.c **** 
 689:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 690:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 691:src/display.c **** 	}
 692:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 693:src/display.c ****       }
 694:src/display.c **** #ifdef INCLUDE_C_LOCK
 695:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 696:src/display.c **** #else
 697:src/display.c ****       else if (!yreg_enabled
 698:src/display.c **** #endif
 699:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 700:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 701:src/display.c **** #endif
 702:src/display.c **** 	       ) {
 703:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 704:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 705:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 706:src/display.c **** 	if (shift_char == ' ') {
 707:src/display.c **** 	  *p2++ = '\007';
 708:src/display.c **** 	  *p2++ = '\342';
 709:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 710:src/display.c **** 	  *p2++ = '\007';
 711:src/display.c **** 	  *p2++ = '\344';
 712:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 713:src/display.c **** 	}
 714:src/display.c **** 	else
ARM GAS  /tmp/cchf4YwX.s 			page 19


 715:src/display.c **** #endif
 716:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 717:src/display.c **** 	    *p2++ = shift_char;
 718:src/display.c **** 	    *p2++ = '\006';
 719:src/display.c **** 	  }
 720:src/display.c **** 	  else {
 721:src/display.c **** 	    *p2++ = 'D';
 722:src/display.c **** 	  }
 723:src/display.c **** 
 724:src/display.c **** 	if (State2.cmplx) {
 725:src/display.c **** 	  *p2++ = ' ';
 726:src/display.c **** 	  *p2 = '\024';
 727:src/display.c **** 	  goto skip;
 728:src/display.c **** 	}
 729:src/display.c **** 	if (State2.arrow) {
 730:src/display.c **** 	  *p2++ = ' ';
 731:src/display.c **** 	  *p2 = '\015';
 732:src/display.c **** 	  goto skip;
 733:src/display.c **** 	}
 734:src/display.c **** 
 735:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 736:src/display.c **** 	  if (State2.wascomplex) {
 737:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 738:src/display.c **** 	  }
 739:src/display.c **** 	  else if (rp_prefix) {
 740:src/display.c **** 	    if (RectPolConv == 1) {
 741:src/display.c **** 	      q = "\007\306<";
 742:src/display.c **** 	    }
 743:src/display.c **** 	    else {
 744:src/display.c **** 	      q = "\007\306y";
 745:src/display.c **** 	    }
 746:src/display.c **** 	  }
 747:src/display.c **** 	  p = scopy(buf, q);
 748:src/display.c **** 
 749:src/display.c **** 	  goto display_yreg;
 750:src/display.c **** 	}
 751:src/display.c **** 
 752:src/display.c **** 	switch (UState.date_mode) {
 753:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 754:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 755:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 756:src/display.c **** #endif
 757:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 758:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 759:src/display.c **** #endif
 760:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 761:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 762:src/display.c **** #endif
 763:src/display.c **** #endif
 764:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 765:src/display.c **** 	}
 766:src/display.c **** 	p2 = scopy(p2, q);
 767:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 768:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 769:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 770:src/display.c **** 	}
 771:src/display.c **** #else
ARM GAS  /tmp/cchf4YwX.s 			page 20


 772:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 773:src/display.c **** 	*p2++ = '\007';
 774:src/display.c **** 	*p2++ = '\342';
 775:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 776:src/display.c **** #endif
 777:src/display.c ****       }
 778:src/display.c ****       else { // yreg_enabled
 779:src/display.c **** 	// do top-related things first
 780:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 781:src/display.c **** 	if (State2.cmplx) {
 782:src/display.c **** 	  *p2++ = '\007';
 783:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 784:src/display.c **** 	  *p2++ = shift_char;
 785:src/display.c **** 	  *p2++ = '\024';
 786:src/display.c **** 	}
 787:src/display.c **** 	else {// if (shift_char != ' ') {
 788:src/display.c **** 	  *p2++ = '\007';
 789:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 790:src/display.c **** 	  *p2++ = shift_char;
 791:src/display.c **** 	}
 792:src/display.c **** #endif
 793:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 794:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 795:src/display.c **** 	  *p2++ = '\007';
 796:src/display.c **** 	  *p2++ = '\207';
 797:src/display.c **** 	  *p2++ = '\007';	    
 798:src/display.c **** 	}
 799:src/display.c **** 	else {
 800:src/display.c **** 	  *p2++ = '\007';
 801:src/display.c **** 	  *p2++ = '\207';
 802:src/display.c **** 	  *p2++ = ' ';
 803:src/display.c **** 	}
 804:src/display.c **** #endif
 805:src/display.c **** #ifndef SHOW_STACK_SIZE
 806:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 807:src/display.c **** 	p2 = scopy(p2, q);
 808:src/display.c **** #else
 809:src/display.c **** 	if (is_dblmode()) {
 810:src/display.c **** 	  *p2++ = '\007';
 811:src/display.c **** 	  *p2++ = '\342';
 812:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 813:src/display.c **** 	  *p2++ = '\007';
 814:src/display.c **** 	  *p2++ = '\345';
 815:src/display.c **** 	  *p2++ = 'D';
 816:src/display.c **** 	}
 817:src/display.c **** 	else {
 818:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 819:src/display.c **** 	  p2 = scopy(p2, q);
 820:src/display.c **** 	}
 821:src/display.c **** #endif
 822:src/display.c **** 
 823:src/display.c **** 	switch (UState.date_mode) {
 824:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 825:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 826:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 827:src/display.c **** #endif
 828:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
ARM GAS  /tmp/cchf4YwX.s 			page 21


 829:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 830:src/display.c **** #endif
 831:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 832:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 833:src/display.c **** #endif
 834:src/display.c **** #endif
 835:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 836:src/display.c **** 	}
 837:src/display.c **** 	  
 838:src/display.c **** 	//      no_copy:
 839:src/display.c **** 	// display either arrow or datemode
 840:src/display.c **** 	if (State2.arrow) {
 841:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 842:src/display.c **** 	} // no need to skip y display with arrow here
 843:src/display.c **** 	else {
 844:src/display.c **** 	  p2 = scopy(p2, q);
 845:src/display.c **** 	}
 846:src/display.c **** 	// now do the annotations, if any, for the middle row:
 847:src/display.c **** #ifdef INCLUDE_C_LOCK
 848:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 849:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 850:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 851:src/display.c **** 	  }
 852:src/display.c **** 	  else {
 853:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 854:src/display.c **** 	  }
 855:src/display.c **** 	  scopy(p, q);
 856:src/display.c **** 	  goto skip;
 857:src/display.c **** 	}
 858:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 859:src/display.c **** 	  q = "\007\307<";
 860:src/display.c **** 	  p = scopy(p, q);
 861:src/display.c **** 	}
 862:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 863:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 864:src/display.c **** 	  p = scopy(p, q);
 865:src/display.c **** 	}
 866:src/display.c **** #else
 867:src/display.c **** 	
 868:src/display.c **** 	if (State2.wascomplex) {
 869:src/display.c **** 	  q = "\007\207i";
 870:src/display.c **** 	  p = scopy(p, q);
 871:src/display.c **** 	  //	    goto no_copy;
 872:src/display.c **** 	}
 873:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 874:src/display.c **** 	  q = "\007\307<";
 875:src/display.c **** 	  p = scopy(p, q);
 876:src/display.c **** 	  //	    goto no_copy;
 877:src/display.c **** 	}
 878:src/display.c **** 	else
 879:src/display.c **** #endif
 880:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 881:src/display.c **** 	    q = "\007\307y";
 882:src/display.c **** 	    p = scopy(p, q);
 883:src/display.c **** 	    //	    goto no_copy;
 884:src/display.c **** 	  }
 885:src/display.c ****       
ARM GAS  /tmp/cchf4YwX.s 			page 22


 886:src/display.c **** 	if (State2.runmode) {
 887:src/display.c **** 	  decNumber y;
 888:src/display.c **** 	display_yreg:
 889:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 890:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 891:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 892:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 893:src/display.c **** 	   */
 894:src/display.c **** 	  if (is_intmode()) {
 895:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 896:src/display.c **** 	    goto skip;
 897:src/display.c **** 	  }
 898:src/display.c **** #ifdef INCLUDE_C_LOCK
 899:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 900:src/display.c **** 	    getRegister(&y, regK_idx);
 901:src/display.c **** 	  }
 902:src/display.c **** 	  else {
 903:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmd
 904:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 905:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 906:src/display.c **** 	  }
 907:src/display.c **** #else
 908:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 909:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 910:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 911:src/display.c **** #endif
 912:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 913:src/display.c **** #ifdef INCLUDE_C_LOCK
 914:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 915:src/display.c **** #else
 916:src/display.c **** 	    if (yreg_hms && State2.hms) {
 917:src/display.c **** #endif
 918:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 919:src/display.c **** 
 920:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 921:src/display.c **** 	      UState.nothousands = 1;
 922:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 923:src/display.c **** 	      UState.nothousands = saved_nothousands;
 924:src/display.c **** 	      // First replace the '@' character with the degree symbol
 925:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 926:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 927:src/display.c **** 	      // then remove the fractional part of the seconds.
 928:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 929:src/display.c **** 	      while (*p) {
 930:src/display.c **** 		replace_char(buf, p[0], p[1]);
 931:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 932:src/display.c **** 		  goto skip;
 933:src/display.c **** 		}
 934:src/display.c **** 		p += 2;
 935:src/display.c **** 	      }
 936:src/display.c **** 	      goto skip;
 937:src/display.c **** 	    }
 938:src/display.c **** 	    if (yreg_fract && UState.fract
 939:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 940:src/display.c **** 		&& !State2.cmplx
 941:src/display.c **** #endif
 942:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
ARM GAS  /tmp/cchf4YwX.s 			page 23


 943:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 944:src/display.c **** #endif
 945:src/display.c **** 		&& set_x_fract(&y, p)) {
 946:src/display.c **** 	      char ltgteq;
 947:src/display.c **** 
 948:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 949:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 950:src/display.c **** 	      ltgteq = *q;
 951:src/display.c **** 	      switch (ltgteq) {
 952:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 953:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 954:src/display.c **** 	      }
 955:src/display.c **** 	      scopy(q, "\007\344?");
 956:src/display.c **** 	      q[2] = ltgteq;
 957:src/display.c **** 
 958:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 959:src/display.c **** 		goto skip;
 960:src/display.c **** 	      }
 961:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 962:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 963:src/display.c **** 		goto skip;
 964:src/display.c **** 	      }
 965:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 966:src/display.c **** 	    }
 967:src/display.c **** 	  }
 968:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 969:src/display.c **** 	    int extra_pixels;
 970:src/display.c **** 
 971:src/display.c **** 	    set_x_dn(&y, p, &n);
 972:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 973:src/display.c **** 	    if (extra_pixels <= 0)
 974:src/display.c **** 	      break;
 975:src/display.c **** 
 976:src/display.c **** 	    xset(p, '\0', n+10);
 977:src/display.c **** 
 978:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 979:src/display.c **** 	  }
 980:src/display.c **** 	}
 981:src/display.c ****       }
 982:src/display.c ****       
 983:src/display.c ****     skip:
 984:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 985:src/display.c ****       set_status_top_always(buf2);
 986:src/display.c ****       
 987:src/display.c ****     }
 988:src/display.c **** #else
 989:src/display.c ****     static void annunciators(void) {
 990:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 991:src/display.c ****       char buf[42], *p = buf, *q="";
 992:src/display.c ****       int n;
 993:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 994:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 995:src/display.c ****       // Constant variables and code branches depending on a constant variable
 996:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 997:src/display.c ****       // feature run-time configurable if needed.
 998:src/display.c **** #ifdef INCLUDE_YREG_CODE
 999:src/display.c **** #  ifdef YREG_ALWAYS_ON
ARM GAS  /tmp/cchf4YwX.s 			page 24


1000:src/display.c ****       const int yreg_enabled = 1;
1001:src/display.c **** #  else
1002:src/display.c ****       const int yreg_enabled = UState.show_y;
1003:src/display.c **** #  endif
1004:src/display.c **** #  ifdef INCLUDE_YREG_HMS
1005:src/display.c ****       const int yreg_hms = 1;
1006:src/display.c **** #  else
1007:src/display.c ****       const int yreg_hms = 0;
1008:src/display.c **** #  endif
1009:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
1010:src/display.c ****       const int yreg_fract = 1;
1011:src/display.c **** #  else
1012:src/display.c ****       const int yreg_fract = 0;
1013:src/display.c **** #  endif
1014:src/display.c **** #else
1015:src/display.c ****       const int yreg_enabled = 0;
1016:src/display.c ****       const int yreg_hms = 0;
1017:src/display.c ****       const int yreg_fract = 0;
1018:src/display.c **** #endif
1019:src/display.c **** #ifdef RP_PREFIX
1020:src/display.c ****       const int rp_prefix = 1;
1021:src/display.c **** #else
1022:src/display.c ****       const int rp_prefix = 0;
1023:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
1024:src/display.c **** #endif
1025:src/display.c ****       // Indicates whether font escape code is compiled in.
1026:src/display.c ****       // This variable will always be set at compile time.
1027:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1028:src/display.c ****       const int has_FONT_ESCAPE = 1;
1029:src/display.c **** #else
1030:src/display.c ****       const int has_FONT_ESCAPE = 0;
1031:src/display.c **** #endif
1032:src/display.c **** 
1033:src/display.c ****       xset(buf, '\0', sizeof(buf));
1034:src/display.c ****       
1035:src/display.c ****       if (is_intmode()) {
1036:src/display.c **** #ifdef SHOW_STACK_SIZE
1037:src/display.c **** 	if (shift_char == ' ') {
1038:src/display.c **** 	  *p++ = '\007';
1039:src/display.c **** 	  *p++ = '\346';
1040:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1041:src/display.c **** 	}
1042:src/display.c **** 	else
1043:src/display.c **** #endif
1044:src/display.c **** 	  {
1045:src/display.c **** 	    *p++ = shift_char;
1046:src/display.c **** 	    *p++ = '\006';
1047:src/display.c **** 	  }
1048:src/display.c **** 
1049:src/display.c **** 	switch(int_mode()) {
1050:src/display.c **** 	default:
1051:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1052:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1053:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1054:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1055:src/display.c **** 	}
1056:src/display.c **** 	q = scopy(p, q);
ARM GAS  /tmp/cchf4YwX.s 			page 25


1057:src/display.c **** 	*q++ = '\006';
1058:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1059:src/display.c **** 
1060:src/display.c **** 	if (IntMaxWindow > 0) {
1061:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1062:src/display.c **** 	  if (*q == '1')
1063:src/display.c **** 	    n += 2;
1064:src/display.c **** 	  if (q[1] == '1')
1065:src/display.c **** 	    n += 2;
1066:src/display.c **** 	  while (n-- > 0)
1067:src/display.c **** 	    *p++ = '\006';
1068:src/display.c **** 
1069:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1070:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1071:src/display.c **** 	}
1072:src/display.c ****       }
1073:src/display.c **** #ifdef INCLUDE_C_LOCK
1074:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1075:src/display.c **** #else
1076:src/display.c ****       else if (!yreg_enabled
1077:src/display.c **** #endif
1078:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1079:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1080:src/display.c **** #endif
1081:src/display.c **** 	       ) {
1082:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1083:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1084:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1085:src/display.c **** 	if (shift_char == ' ') {
1086:src/display.c **** 	  *p++ = '\007';
1087:src/display.c **** 	  *p++ = '\342';
1088:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\344';
1091:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1092:src/display.c **** 	}
1093:src/display.c **** 	else
1094:src/display.c **** #endif
1095:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1096:src/display.c **** 	    *p++ = shift_char;
1097:src/display.c **** 	    *p++ = '\006';
1098:src/display.c **** 	  }
1099:src/display.c **** 	  else {
1100:src/display.c **** 	    *p++ = 'D';
1101:src/display.c **** 	  }
1102:src/display.c **** 
1103:src/display.c **** 	if (State2.cmplx) {
1104:src/display.c **** 	  *p++ = ' ';
1105:src/display.c **** 	  *p = '\024';
1106:src/display.c **** 	  goto skip;
1107:src/display.c **** 	}
1108:src/display.c **** 	if (State2.arrow) {
1109:src/display.c **** 	  *p++ = ' ';
1110:src/display.c **** 	  *p = '\015';
1111:src/display.c **** 	  goto skip;
1112:src/display.c **** 	}
1113:src/display.c **** 
ARM GAS  /tmp/cchf4YwX.s 			page 26


1114:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1115:src/display.c **** 	  if (State2.wascomplex) {
1116:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1117:src/display.c **** 	  }
1118:src/display.c **** 	  else if (rp_prefix) {
1119:src/display.c **** 	    if (RectPolConv == 1) {
1120:src/display.c **** 	      q = "\007\306<";
1121:src/display.c **** 	    }
1122:src/display.c **** 	    else {
1123:src/display.c **** 	      q = "\007\306y";
1124:src/display.c **** 	    }
1125:src/display.c **** 	  }
1126:src/display.c **** 	  p = scopy(buf, q);
1127:src/display.c **** 
1128:src/display.c **** 	  goto display_yreg;
1129:src/display.c **** 	}
1130:src/display.c **** 
1131:src/display.c **** 	switch (UState.date_mode) {
1132:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1133:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1134:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1135:src/display.c **** #endif
1136:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1137:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1138:src/display.c **** #endif
1139:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1140:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1141:src/display.c **** #endif
1142:src/display.c **** #endif
1143:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1144:src/display.c **** 	}
1145:src/display.c **** 	p = scopy(p, q);
1146:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1147:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1148:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1149:src/display.c **** 	}
1150:src/display.c **** #else
1151:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1152:src/display.c **** 	*p++ = '\007';
1153:src/display.c **** 	*p++ = '\342';
1154:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1155:src/display.c **** #endif
1156:src/display.c ****       }
1157:src/display.c ****       else { // yreg_enabled
1158:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1159:src/display.c **** 	if (State2.cmplx) {
1160:src/display.c **** 	  *p++ = '\007';
1161:src/display.c **** 	  *p++ = '\344';
1162:src/display.c **** 	  *p++ = shift_char;
1163:src/display.c **** 	  q = "\024";
1164:src/display.c **** 	}
1165:src/display.c **** 	else if (shift_char != ' ') {
1166:src/display.c **** 	  *p++ = '\007';
1167:src/display.c **** 	  *p++ = '\307';
1168:src/display.c **** 	  *p++ = shift_char;
1169:src/display.c **** 	  goto no_copy;
1170:src/display.c **** 	}
ARM GAS  /tmp/cchf4YwX.s 			page 27


1171:src/display.c **** 	else
1172:src/display.c **** #endif
1173:src/display.c **** #ifdef INCLUDE_C_LOCK
1174:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1175:src/display.c **** 			if ( POLAR_DISPLAY ) {
1176:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1177:src/display.c **** 			}
1178:src/display.c **** 			else {
1179:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1180:src/display.c **** 			}
1181:src/display.c **** 			scopy(p, q);
1182:src/display.c **** 			goto skip;
1183:src/display.c **** 		}
1184:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1185:src/display.c **** 			q = "\007\307<";
1186:src/display.c **** 		}
1187:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1188:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1189:src/display.c **** 		}
1190:src/display.c **** #else
1191:src/display.c **** 	  if (State2.wascomplex) {
1192:src/display.c **** 	    q = "\007\207i";
1193:src/display.c **** 	  }
1194:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1195:src/display.c **** 	    q = "\007\307<";
1196:src/display.c **** 	  }
1197:src/display.c **** #endif
1198:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1199:src/display.c **** 	    q = "\007\307y";
1200:src/display.c **** 	  }
1201:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1202:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1203:src/display.c **** 	    q = "\007\207\007";
1204:src/display.c **** 	  }
1205:src/display.c **** #endif
1206:src/display.c **** 	  else {
1207:src/display.c **** #ifndef SHOW_STACK_SIZE
1208:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1209:src/display.c **** #else
1210:src/display.c **** 	    if (is_dblmode()) {
1211:src/display.c **** 	      *p++ = '\007';
1212:src/display.c **** 	      *p++ = '\342';
1213:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1214:src/display.c **** 	      q = "\007\345D";
1215:src/display.c **** 	    }
1216:src/display.c **** 	    else {
1217:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1218:src/display.c **** 	    }
1219:src/display.c **** #endif
1220:src/display.c **** 	  }
1221:src/display.c **** 	p = scopy(p, q);
1222:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1223:src/display.c ****       no_copy:
1224:src/display.c **** #endif
1225:src/display.c **** 
1226:src/display.c **** 	if (State2.arrow) {
1227:src/display.c **** 	  scopy(p, "\007\204\006\015");
ARM GAS  /tmp/cchf4YwX.s 			page 28


1228:src/display.c **** 	} else if (State2.runmode) {
1229:src/display.c **** 	  decNumber y;
1230:src/display.c **** 	display_yreg:
1231:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1232:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1233:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1234:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1235:src/display.c **** 	   */
1236:src/display.c **** #ifdef INCLUDE_C_LOCK
1237:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1238:src/display.c **** 		    getRegister(&y, regK_idx);
1239:src/display.c **** 		  }
1240:src/display.c **** 		  else {
1241:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cm
1242:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1243:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1244:src/display.c **** 		  }
1245:src/display.c **** #else
1246:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1247:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1248:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1249:src/display.c **** #endif
1250:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1251:src/display.c **** #ifdef INCLUDE_C_LOCK
1252:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1253:src/display.c **** #else
1254:src/display.c **** 	    if (yreg_hms && State2.hms) {
1255:src/display.c **** #endif
1256:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1257:src/display.c **** 
1258:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1259:src/display.c **** 	      UState.nothousands = 1;
1260:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1261:src/display.c **** 	      UState.nothousands = saved_nothousands;
1262:src/display.c **** 	      // First replace the '@' character with the degree symbol
1263:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1264:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1265:src/display.c **** 	      // then remove the fractional part of the seconds.
1266:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1267:src/display.c **** 	      while (*p) {
1268:src/display.c **** 		replace_char(buf, p[0], p[1]);
1269:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1270:src/display.c **** 		  goto skip;
1271:src/display.c **** 		}
1272:src/display.c **** 		p += 2;
1273:src/display.c **** 	      }
1274:src/display.c **** 	      goto skip;
1275:src/display.c **** 	    }
1276:src/display.c **** 	    if (yreg_fract && UState.fract
1277:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1278:src/display.c **** 		&& !State2.cmplx
1279:src/display.c **** #endif
1280:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1281:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1282:src/display.c **** #endif
1283:src/display.c **** 		&& set_x_fract(&y, p)) {
1284:src/display.c **** 	      char ltgteq;
ARM GAS  /tmp/cchf4YwX.s 			page 29


1285:src/display.c **** 
1286:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1287:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1288:src/display.c **** 	      ltgteq = *q;
1289:src/display.c **** 	      switch (ltgteq) {
1290:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1291:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1292:src/display.c **** 	      }
1293:src/display.c **** 	      scopy(q, "\007\344?");
1294:src/display.c **** 	      q[2] = ltgteq;
1295:src/display.c **** 
1296:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1297:src/display.c **** 		goto skip;
1298:src/display.c **** 	      }
1299:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1300:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1301:src/display.c **** 		goto skip;
1302:src/display.c **** 	      }
1303:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1304:src/display.c **** 	    }
1305:src/display.c **** 	  }
1306:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1307:src/display.c **** 	    int extra_pixels;
1308:src/display.c **** 
1309:src/display.c **** 	    set_x_dn(&y, p, &n);
1310:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1311:src/display.c **** 	    if (extra_pixels <= 0)
1312:src/display.c **** 	      break;
1313:src/display.c **** 
1314:src/display.c **** 	    xset(p, '\0', n+10);
1315:src/display.c **** 
1316:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1317:src/display.c **** 	  }
1318:src/display.c **** 	}
1319:src/display.c ****       }
1320:src/display.c ****       
1321:src/display.c ****     skip:	set_status_top(buf);
1322:src/display.c ****     }
1323:src/display.c **** #endif //top_row
1324:src/display.c ****     static void disp_x(const char *p) {
1325:src/display.c ****       int i;
1326:src/display.c ****       int gotdot = -1;
1327:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1328:src/display.c ****       const
1329:src/display.c **** #endif
1330:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1331:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1332:src/display.c ****       int overflow_to_left = 0;
1333:src/display.c **** #endif
1334:src/display.c **** 
1335:src/display.c ****       if (*p == '-') {
1336:src/display.c **** 	SET_MANT_SIGN;
1337:src/display.c **** 	p++;
1338:src/display.c ****       }
1339:src/display.c **** 
1340:src/display.c ****       if (is_intmode()) {
1341:src/display.c **** 	for (i=0; *p != '\0'; p++) {
ARM GAS  /tmp/cchf4YwX.s 			page 30


1342:src/display.c **** 	  set_dig(i, *p);
1343:src/display.c **** 	  i += SEGS_PER_DIGIT;
1344:src/display.c **** 	}
1345:src/display.c **** 	carry_overflow();
1346:src/display.c ****       } else {
1347:src/display.c **** 	set_separator_decimal_modes();
1348:src/display.c **** 
1349:src/display.c **** 	i = 0;
1350:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1351:src/display.c **** 	if ( CmdLineDot > 1 ) {
1352:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1353:src/display.c **** 	  const
1354:src/display.c **** #  endif
1355:src/display.c **** 	    int double_dot = 0;
1356:src/display.c **** 	  int j;
1357:src/display.c **** 
1358:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1359:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1360:src/display.c **** 	      gotdot = j;
1361:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1362:src/display.c **** 	      double_dot = (p[j+1] == '.');
1363:src/display.c **** #  endif
1364:src/display.c **** 	    }
1365:src/display.c **** 	  }
1366:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1367:src/display.c **** 	  if (j > 0) {
1368:src/display.c **** 	    p += j + 1;
1369:src/display.c **** 	    i = SEGS_PER_DIGIT;
1370:src/display.c **** 	    if (gotdot <= j) {
1371:src/display.c **** 	      gotdot = 0;
1372:src/display.c **** 	      if (double_dot)
1373:src/display.c **** 		p++;
1374:src/display.c **** 	    }
1375:src/display.c **** 	    else if (*p == '.') {
1376:src/display.c **** 	      gotdot = 0;
1377:src/display.c **** 	      p++;
1378:src/display.c **** 	      if (!double_dot)
1379:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1380:src/display.c **** 	    }
1381:src/display.c **** 	    else gotdot = -1;
1382:src/display.c **** 	    set_dig(0, '<');
1383:src/display.c **** 	    overflow_to_left = 1;
1384:src/display.c **** 	  }
1385:src/display.c **** 	  else gotdot = -1;
1386:src/display.c **** 	}
1387:src/display.c **** #endif
1388:src/display.c **** 
1389:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1390:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1391:src/display.c **** 	       && *p != 'D'
1392:src/display.c **** #endif
1393:src/display.c **** 	       ; p++) {
1394:src/display.c **** 	  if (*p == '.') {
1395:src/display.c **** 	    if (gotdot < 0)
1396:src/display.c **** 	      gotdot = i;
1397:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1398:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/cchf4YwX.s 			page 31


1399:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1400:src/display.c **** 	      if ( *(p+1) == '.' ) {
1401:src/display.c **** 		p++;
1402:src/display.c **** 	      }
1403:src/display.c **** #  else
1404:src/display.c **** 	      if ( i != gotdot ) {
1405:src/display.c **** #  endif
1406:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1407:src/display.c **** 		i += segs_per_digit;
1408:src/display.c **** 	      }
1409:src/display.c **** 	      else {
1410:src/display.c **** 		if ( CmdLineDot > 1 ) {
1411:src/display.c **** 		  i += segs_per_digit;
1412:src/display.c **** 		}
1413:src/display.c **** 		else {
1414:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1415:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1416:src/display.c **** 		}
1417:src/display.c **** 	      }
1418:src/display.c **** #else
1419:src/display.c **** 	      if (i > 0)
1420:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1421:src/display.c **** 	      else {
1422:src/display.c **** 		set_dig(i, '0');
1423:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1424:src/display.c **** 		i += segs_per_digit;
1425:src/display.c **** 	      }
1426:src/display.c **** #endif
1427:src/display.c **** 	    } else {
1428:src/display.c **** 	      set_dig(i, *p);
1429:src/display.c **** 	      i += segs_per_digit;
1430:src/display.c **** 	    }
1431:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1432:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1433:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1434:src/display.c **** #endif
1435:src/display.c **** 	  }
1436:src/display.c **** 
1437:src/display.c **** 	  /* Implement a floating comma */
1438:src/display.c **** 	  if (gotdot < 0)
1439:src/display.c **** 	    gotdot = i;
1440:src/display.c **** 	  for (;;) {
1441:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1442:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1443:src/display.c **** 	      break;
1444:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1445:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1446:src/display.c **** 	      break;
1447:src/display.c **** #endif
1448:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1449:src/display.c **** 	  }
1450:src/display.c **** 
1451:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1452:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1453:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1454:src/display.c **** 	    int flags = 8;
1455:src/display.c **** #  else
ARM GAS  /tmp/cchf4YwX.s 			page 32


1456:src/display.c **** 	    int flags = 12;
1457:src/display.c **** #  endif
1458:src/display.c **** 
1459:src/display.c **** 	    if (*p == 'D')
1460:src/display.c **** 	      flags |= 2;
1461:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1462:src/display.c **** 	      flags |= 16;
1463:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1464:src/display.c **** 	  }
1465:src/display.c **** #else
1466:src/display.c **** 	  if (*p == 'E') {
1467:src/display.c **** 	    p++;
1468:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1469:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1470:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1471:src/display.c **** #  else
1472:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1473:src/display.c **** #  endif
1474:src/display.c **** 	  } 
1475:src/display.c **** #endif
1476:src/display.c **** 	}
1477:src/display.c ****       }
1478:src/display.c **** 
1479:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1480:src/display.c **** 
1481:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1482:src/display.c **** 	const int ws = word_size();
1483:src/display.c **** 	unsigned int b;
1484:src/display.c **** 	long long int vs = value;
1485:src/display.c **** 	unsigned long long int v;
1486:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1487:src/display.c **** 	int i, j, k;
1488:src/display.c **** 	int sign = 0;
1489:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1490:src/display.c **** 
1491:src/display.c **** 	switch (State2.smode) {
1492:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1493:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1494:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1495:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1496:src/display.c **** 	default:	b = int_base();	break;
1497:src/display.c **** 	}
1498:src/display.c **** 
1499:src/display.c **** 	if (!res) {
1500:src/display.c **** 	  IntMaxWindow = 0;
1501:src/display.c **** 	  carry_overflow();
1502:src/display.c **** 	}
1503:src/display.c **** 
1504:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1505:src/display.c **** 	  v = extract_value(value, &sign);
1506:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1507:src/display.c **** 	    v = value;
1508:src/display.c **** 	  if (v == 0) {
1509:src/display.c **** 	    if (sign)
1510:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1511:src/display.c **** 	    set_dig_s(dig, '0', res);
1512:src/display.c **** 	    return;
ARM GAS  /tmp/cchf4YwX.s 			page 33


1513:src/display.c **** 	  } else
1514:src/display.c **** 	    for (i=0; v != 0; i++) {
1515:src/display.c **** 	      const int r = v % b;
1516:src/display.c **** 	      v /= b;
1517:src/display.c **** 	      buf[i] = DIGITS[r];
1518:src/display.c **** 	    }
1519:src/display.c **** 	} else {
1520:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1521:src/display.c **** 	  if (ws < 64) {
1522:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1523:src/display.c **** 	    vs &= mask;
1524:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1525:src/display.c **** 	      vs |= ~mask;
1526:src/display.c **** 	  }
1527:src/display.c **** 
1528:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1529:src/display.c **** 	    set_dig_s(dig, '0', res);
1530:src/display.c **** 	    return;
1531:src/display.c **** 	  } else if (!UState.leadzero) {
1532:src/display.c **** 	    v = (unsigned long long int)vs;
1533:src/display.c **** 	    for (i=0; v != 0; i++) {
1534:src/display.c **** 	      const int r = v % b;
1535:src/display.c **** 	      v /= b;
1536:src/display.c **** 	      buf[i] = DIGITS[r];
1537:src/display.c **** 	    }
1538:src/display.c **** 	  } else {
1539:src/display.c **** 	    int n;
1540:src/display.c **** 	    const unsigned int b1 = b >> 1;
1541:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1542:src/display.c **** 	    v = (unsigned long long int)vs;
1543:src/display.c **** 
1544:src/display.c **** 	    n = (ws + fac) / (fac+1);
1545:src/display.c **** 	    for (i=0; i<n; i++) {
1546:src/display.c **** 	      const int r = v % b;
1547:src/display.c **** 	      v /= b;
1548:src/display.c **** 	      buf[i] = DIGITS[r];
1549:src/display.c **** 	    }
1550:src/display.c **** 	  }
1551:src/display.c **** 	}
1552:src/display.c **** #ifdef BIGGER_DISPLAY
1553:src/display.c **** #define MAX_INT_Y_DIG 13
1554:src/display.c **** #else
1555:src/display.c **** #define MAX_INT_Y_DIG 7
1556:src/display.c **** #endif
1557:src/display.c **** 	/* At this point i is the number of digits in the output */
1558:src/display.c **** 	int nd = i;
1559:src/display.c **** 	if (res) {
1560:src/display.c **** 	  if (sign) *res++ = '-';
1561:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1562:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1563:src/display.c **** 	      *res++ = buf[i];
1564:src/display.c **** 	    *res++ = '.';
1565:src/display.c **** 	    *res++ = '.';
1566:src/display.c **** 	  }
1567:src/display.c **** 	  else {
1568:src/display.c **** 	    while (--i >= 0)
1569:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/cchf4YwX.s 			page 34


1570:src/display.c **** 	  }
1571:src/display.c **** 	} else {
1572:src/display.c **** #if 0
1573:src/display.c **** 	  set_separator_decimal_modes();
1574:src/display.c **** 
1575:src/display.c **** 	  // Allows configuration of digit grouping per base
1576:src/display.c **** 	  static const char grouping[] = 
1577:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1578:src/display.c **** 		    //	   2     3     4     5     6     7     8
1579:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1580:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1581:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1582:src/display.c **** 	    : grouping[b - 2] >> 4;
1583:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1584:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1585:src/display.c **** #else
1586:src/display.c **** 	  // Less flexible but shorter
1587:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1588:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1589:src/display.c **** 	    : b == 16 ? 2 : 3;
1590:src/display.c **** 	  set_separator_decimal_modes();
1591:src/display.c **** #endif
1592:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1593:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1594:src/display.c **** 	    State2.window = 0;
1595:src/display.c **** 	  buf[i] = '\0';
1596:src/display.c **** 
1597:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1598:src/display.c **** 	  for (k = 0; k < 12; k++)
1599:src/display.c **** 	    if (buf[j + k] == '\0')
1600:src/display.c **** 	      break;
1601:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1602:src/display.c **** 	    int ch = buf[j++];
1603:src/display.c **** 	    if (i >= shift)
1604:src/display.c **** 	      ch -= 030;
1605:src/display.c **** 	    set_dig(dig, ch);
1606:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1607:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1608:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1609:src/display.c **** 	  }
1610:src/display.c **** 	  if (sign) {
1611:src/display.c **** 	    if (dig >= 0)
1612:src/display.c **** 	      set_dig(dig, '-');
1613:src/display.c **** 	    else	SET_MANT_SIGN;
1614:src/display.c **** 	  }
1615:src/display.c **** 	}
1616:src/display.c ****       }
1617:src/display.c **** 
1618:src/display.c ****       /* Handle special cases.
1619:src/display.c ****        * return non-zero if the number is special.
1620:src/display.c ****        */
1621:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1622:src/display.c **** 	if (decNumberIsSpecial(x)) {
1623:src/display.c **** 	  if (decNumberIsNaN(x)) {
1624:src/display.c **** 	    if (res) {
1625:src/display.c **** 	      scopy(res, "NaN");
1626:src/display.c **** 	    } else {
ARM GAS  /tmp/cchf4YwX.s 			page 35


1627:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1628:src/display.c **** #ifndef REALBUILD
1629:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1630:src/display.c **** 	      forceDispPlot=0;
1631:src/display.c **** #endif
1632:src/display.c **** 	    }
1633:src/display.c **** 	    return 1;
1634:src/display.c **** 	  } else {
1635:src/display.c **** 	    if (decNumberIsNegative(x)) {
1636:src/display.c **** 	      if (res) *res++ = '-';
1637:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1638:src/display.c **** 	    }
1639:src/display.c **** 	    if (res)
1640:src/display.c **** 	      *res++ = '\237';
1641:src/display.c **** 	    else {
1642:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1643:src/display.c **** #ifndef REALBUILD
1644:src/display.c **** 	      if (decNumberIsNegative(x)) {
1645:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1646:src/display.c **** 	      }
1647:src/display.c **** 	      else {
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1649:src/display.c **** 	      }
1650:src/display.c **** 	      forceDispPlot=0;
1651:src/display.c **** #endif
1652:src/display.c **** 	    }
1653:src/display.c **** 	    return 1;
1654:src/display.c **** 	  }
1655:src/display.c **** 	}
1656:src/display.c **** 	return 0;
1657:src/display.c ****       }
1658:src/display.c **** 
1659:src/display.c **** 
1660:src/display.c ****       /* Extract the two lowest integral digits from the number
1661:src/display.c ****        */
1662:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1663:src/display.c **** 	decNumber n;
1664:src/display.c **** 
1665:src/display.c **** 	decNumberMod(&n, x, &const_100);
1666:src/display.c **** 	*v = dn_to_int(&n);
1667:src/display.c **** 	dn_mulpow10(&n, x, -2);
1668:src/display.c **** 	decNumberTrunc(res, &n);
1669:src/display.c ****       }
1670:src/display.c **** 
1671:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1671 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1672:src/display.c **** 	char b[32];
 276              		.loc 1 1672 2 view .LVU78
1673:src/display.c **** 	int i, j;
 277              		.loc 1 1673 2 view .LVU79
1674:src/display.c **** 
1675:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1675 2 view .LVU80
 279              		.loc 1 1675 12 view .LVU81
ARM GAS  /tmp/cchf4YwX.s 			page 36


1671:src/display.c **** 	char b[32];
 280              		.loc 1 1671 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1676:src/display.c **** 	  if (v == 0)
1677:src/display.c **** 	    b[i] = spaces?' ':'0';
1678:src/display.c **** 	  else {
1679:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1679 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1671:src/display.c **** 	char b[32];
 292              		.loc 1 1671 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1671:src/display.c **** 	char b[32];
 295              		.loc 1 1671 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1675:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1675 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1676:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1676 4 is_stmt 1 view .LVU87
 303              		.loc 1 1679 6 view .LVU88
 304              		.loc 1 1679 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1680:src/display.c **** 	    v /= 10;
 311              		.loc 1 1680 6 is_stmt 1 view .LVU90
1681:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1681 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1675:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1675 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1676:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1676 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1675:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1675 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1681 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
ARM GAS  /tmp/cchf4YwX.s 			page 37


1680:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1680 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1681 6 is_stmt 1 view .LVU97
1675:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1675 17 view .LVU98
1675:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1675 12 view .LVU99
1675:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1675 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1675:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1675 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1675:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1675 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1676:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1676 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1677:src/display.c **** 	  else {
 349              		.loc 1 1677 6 is_stmt 1 view .LVU104
1675:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1675 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1675:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1675 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1677:src/display.c **** 	  else {
 355              		.loc 1 1677 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1675:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1675 17 is_stmt 1 view .LVU108
1675:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1675 12 view .LVU109
1675:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1675 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1675:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1675 2 view .LVU111
ARM GAS  /tmp/cchf4YwX.s 			page 38


 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1682:src/display.c **** 	  }
1683:src/display.c **** 	}
1684:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1684 2 is_stmt 1 view .LVU112
 371              		.loc 1 1684 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1685:src/display.c **** 	  b[0] = '0';
1686:src/display.c **** 
1687:src/display.c **** 	/* Copy across and appropriately leading space things
1688:src/display.c **** 	 */
1689:src/display.c **** 	j = *jin;
 374              		.loc 1 1689 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1684:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1684 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1685:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1685 4 is_stmt 1 view .LVU116
1685:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1685 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1689 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1690:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1690 2 view .LVU119
 386              		.loc 1 1690 8 view .LVU120
1689:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1689 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1690 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1691:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1691 4 is_stmt 1 view .LVU123
 395              	.LBB179:
 396              	.LBB180:
 414:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 414 12 view .LVU124
 398              	.LBE180:
 399              	.LBE179:
 400              		.loc 1 1691 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB184:
 403              	.LBB181:
 414:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 414 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
ARM GAS  /tmp/cchf4YwX.s 			page 39


 406              	.LVL28:
 414:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 414 16 view .LVU127
 408              	.LBE181:
 409              	.LBI179:
 413:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 413 14 is_stmt 1 view .LVU128
 411              	.LBB182:
 414:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 414 3 view .LVU129
 414:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 414 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 414:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 414 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 414:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 414 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 416:src/display.c **** }
 423              		.loc 1 416 3 is_stmt 1 view .LVU133
 416:src/display.c **** }
 424              		.loc 1 416 3 is_stmt 0 view .LVU134
 425              	.LBE182:
 426              	.LBE184:
1692:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1692 4 is_stmt 1 view .LVU135
1690:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1690 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1692 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1690:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1690 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1693:src/display.c **** 	}
1694:src/display.c **** 	*jin = j;
 436              		.loc 1 1694 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1694 2 is_stmt 1 view .LVU140
 440              		.loc 1 1694 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1695:src/display.c **** 	return str;
1696:src/display.c ****       }
 443              		.loc 1 1696 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1694:src/display.c **** 	return str;
 445              		.loc 1 1694 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
ARM GAS  /tmp/cchf4YwX.s 			page 40


1695:src/display.c **** 	return str;
 447              		.loc 1 1695 2 is_stmt 1 view .LVU144
 448              		.loc 1 1696 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB185:
 458              	.LBB183:
 415:src/display.c ****   return res;
 459              		.loc 1 415 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 415:src/display.c ****   return res;
 463              		.loc 1 415 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE183:
 470              	.LBE185:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 431:src/display.c ****   int i;
 485              		.loc 1 431 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 432:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 432 3 view .LVU149
 433:src/display.c **** 
 490              		.loc 1 433 3 view .LVU150
 431:src/display.c ****   int i;
 491              		.loc 1 431 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
ARM GAS  /tmp/cchf4YwX.s 			page 41


 499              		.cfi_offset 14, -4
 433:src/display.c **** 
 500              		.loc 1 433 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 435 3 is_stmt 1 view .LVU153
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 435 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB186:
 513              	.LBB187:
 415:src/display.c ****   return res;
 514              		.loc 1 415 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 414:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 414 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 414:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 414 19 view .LVU157
 523              	.LBE187:
 524              	.LBE186:
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 435 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB193:
 528              	.LBB188:
 414:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 414 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 416:src/display.c **** }
 532              		.loc 1 416 3 is_stmt 1 view .LVU160
 416:src/display.c **** }
 533              		.loc 1 416 3 is_stmt 0 view .LVU161
 534              	.LBE188:
 535              	.LBE193:
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 435 36 is_stmt 1 view .LVU162
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 435 13 view .LVU163
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 435 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 436:src/display.c **** }
ARM GAS  /tmp/cchf4YwX.s 			page 42


 542              		.loc 1 436 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB194:
 544              	.LBB189:
 414:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 414 12 discriminator 3 view .LVU166
 414:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 414 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE189:
 548              	.LBE194:
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 435 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB195:
 553              	.LBB190:
 414:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 414 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 414:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 414 16 discriminator 3 view .LVU170
 558              	.LBE190:
 559              	.LBI186:
 413:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 413 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB191:
 414:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 414 3 discriminator 3 view .LVU172
 563              	.LBE191:
 564              	.LBE195:
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 435 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB196:
 569              	.LBB192:
 414:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 414 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 415:src/display.c ****   return res;
 573              		.loc 1 415 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 416:src/display.c **** }
 578              		.loc 1 416 3 view .LVU176
 416:src/display.c **** }
 579              		.loc 1 416 3 is_stmt 0 view .LVU177
 580              	.LBE192:
 581              	.LBE196:
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 435 36 is_stmt 1 view .LVU178
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 435 13 view .LVU179
 435:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/cchf4YwX.s 			page 43


 584              		.loc 1 435 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 437:src/display.c **** 
 589              		.loc 1 437 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 437:src/display.c **** 
 591              		.loc 1 437 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1662:src/display.c **** 	decNumber n;
 606              		.loc 1 1662 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1663:src/display.c **** 
 610              		.loc 1 1663 2 view .LVU184
1665:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1665 2 view .LVU185
1662:src/display.c **** 	decNumber n;
 612              		.loc 1 1662 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1662:src/display.c **** 	decNumber n;
 621              		.loc 1 1662 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1665:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1665 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1665:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1665 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1662:src/display.c **** 	decNumber n;
 630              		.loc 1 1662 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1665:src/display.c **** 	*v = dn_to_int(&n);
ARM GAS  /tmp/cchf4YwX.s 			page 44


 632              		.loc 1 1665 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1666:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1666 2 is_stmt 1 view .LVU192
1666:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1666 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1667:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1667 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1666:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1666 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1667:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1667 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1668:src/display.c ****       }
 649              		.loc 1 1668 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1669:src/display.c **** 
 654              		.loc 1 1669 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1669:src/display.c **** 
 661              		.loc 1 1669 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1697:src/display.c **** 
1698:src/display.c **** 
1699:src/display.c ****       /* Display the number in H.MS mode.
1700:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
ARM GAS  /tmp/cchf4YwX.s 			page 45


1701:src/display.c ****        */
1702:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1703:src/display.c **** 	decNumber x, y, a, t, u;
1704:src/display.c **** 	int j=0;
1705:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1706:src/display.c **** 	unsigned int hr, min, sec, fs;
1707:src/display.c **** 
1708:src/display.c **** 	if (check_special_dn(rgx, res)) {
1709:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1710:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1711:src/display.c **** 	  return;
1712:src/display.c **** 	}
1713:src/display.c **** 
1714:src/display.c **** 	set_separator_decimal_modes();
1715:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1716:src/display.c **** 	dn_abs(&a, rgx);
1717:src/display.c **** 	if (decNumberIsNegative(&x)) {
1718:src/display.c **** 	  if (res != NULL)
1719:src/display.c **** 	    *res++ += '-';
1720:src/display.c **** 	  else
1721:src/display.c **** 	    SET_MANT_SIGN;
1722:src/display.c **** 	  dn_minus(&x, &x);
1723:src/display.c **** 	}
1724:src/display.c **** 
1725:src/display.c **** 	decNumberHR2HMS(&y, &x);
1726:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1727:src/display.c **** 	decNumberRound(&u, &t);
1728:src/display.c **** 
1729:src/display.c **** 	hms_step(&t, &u, &fs);
1730:src/display.c **** 	hms_step(&u, &t, &sec);
1731:src/display.c **** 	hms_step(&t, &u, &min);
1732:src/display.c **** 	hr = dn_to_int(&t);
1733:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1734:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1735:src/display.c **** 
1736:src/display.c **** 	// degrees
1737:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1738:src/display.c **** 	res = set_dig_s(j, '@', res);
1739:src/display.c **** 	j += SEGS_PER_DIGIT;
1740:src/display.c **** 
1741:src/display.c **** 	// minutes
1742:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1743:src/display.c **** 	res = set_dig_s(j, '\'', res);
1744:src/display.c **** 	j += SEGS_PER_DIGIT;
1745:src/display.c **** 
1746:src/display.c **** 	// seconds
1747:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1748:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1749:src/display.c **** 
1750:src/display.c **** 	// Fractional seconds
1751:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1752:src/display.c **** 
1753:src/display.c **** 	// We're now pointing at the exponent's first digit...
1754:src/display.c **** 	res = set_dig_s(j, '"', res);
1755:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1756:src/display.c **** 
1757:src/display.c **** 	// Check for values too big or small
ARM GAS  /tmp/cchf4YwX.s 			page 46


1758:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1759:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1760:src/display.c **** 	} else if (! dn_eq0(&a)) {
1761:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1762:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1763:src/display.c **** 	  }
1764:src/display.c **** 	}
1765:src/display.c ****       }
1766:src/display.c **** 
1767:src/display.c **** 
1768:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1769:src/display.c **** 	decNumber x, w, n, d, t;
1770:src/display.c **** 	char buf[32], *p = buf;
1771:src/display.c **** 	int j;
1772:src/display.c **** 
1773:src/display.c **** 	if (check_special_dn(rgx, res))
1774:src/display.c **** 	  return 1;
1775:src/display.c **** 	dn_abs(&x, rgx);
1776:src/display.c **** 	if (dn_ge(&x, &const_100000))
1777:src/display.c **** 	  return 0;
1778:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1779:src/display.c **** 	  return 0;
1780:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1781:src/display.c **** 	  if (res != NULL)
1782:src/display.c **** 	    *res++ += '-';
1783:src/display.c **** 	  else
1784:src/display.c **** 	    SET_MANT_SIGN;
1785:src/display.c **** 	}
1786:src/display.c **** 	decNumberFrac(&w, &x);
1787:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1788:src/display.c **** 
1789:src/display.c **** 	dn_divide(&t, &n, &d);
1790:src/display.c **** 	dn_compare(&t, &t, &w);
1791:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1792:src/display.c **** 
1793:src/display.c **** 	if (dn_eq(&n, &d)) {
1794:src/display.c **** 	  dn_inc(&w);
1795:src/display.c **** 	  decNumberZero(&n);
1796:src/display.c **** 	}
1797:src/display.c **** 
1798:src/display.c **** 	if (!UState.improperfrac) {
1799:src/display.c **** 	  if (!dn_eq0(&w)) {
1800:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1801:src/display.c **** 	    *p++ = ' ';
1802:src/display.c **** 	  }
1803:src/display.c **** 	} else {
1804:src/display.c **** 	  dn_multiply(&x, &w, &d);
1805:src/display.c **** 	  dn_add(&n, &n, &x);
1806:src/display.c **** 	}
1807:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1808:src/display.c **** 	*p++ = '/';
1809:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1810:src/display.c **** 	*p = '\0';
1811:src/display.c **** 	if ((p - 12) > buf) {
1812:src/display.c **** 	  p -= 12;
1813:src/display.c **** 	  *p = '<';
1814:src/display.c **** 	} else	p = buf;
ARM GAS  /tmp/cchf4YwX.s 			page 47


1815:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1816:src/display.c **** 	  res = set_dig_s(j, *p, res);
1817:src/display.c **** 	  j += SEGS_PER_DIGIT;
1818:src/display.c **** 	}
1819:src/display.c **** 
1820:src/display.c **** 	if (dn_eq0(&t))
1821:src/display.c **** 	  p = (char *)S7_fract_EQ;
1822:src/display.c **** 	else if (decNumberIsNegative(&t))
1823:src/display.c **** 	  p = (char *)S7_fract_LT;
1824:src/display.c **** 	else
1825:src/display.c **** 	  p = (char *)S7_fract_GT;
1826:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1827:src/display.c **** 	  res = set_dig_s(j, *p, res);
1828:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1829:src/display.c **** 	}
1830:src/display.c **** 	return 1;
1831:src/display.c ****       }
1832:src/display.c **** 
1833:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1834:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1835:src/display.c **** 	decNumber c;
1836:src/display.c **** 	int true_exp, x=0;
1837:src/display.c **** 	int min_pos_exp, max_neg_exp;
1838:src/display.c **** 
1839:src/display.c **** 	if ( mode != MODE_STD ) {
1840:src/display.c **** 	  min_pos_exp = 9;
1841:src/display.c **** 	  max_neg_exp = -5;
1842:src/display.c **** 	}
1843:src/display.c **** 	else {
1844:src/display.c **** 	  min_pos_exp = 12;
1845:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1846:src/display.c **** 	}
1847:src/display.c **** 
1848:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1849:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1850:src/display.c **** 
1851:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1852:src/display.c **** 	  x = *dd;
1853:src/display.c **** 	}
1854:src/display.c **** 
1855:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1856:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1857:src/display.c **** 	  *dd += -true_exp;
1858:src/display.c **** 	  return MODE_FIX;
1859:src/display.c **** 	}
1860:src/display.c **** 
1861:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1862:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1863:src/display.c **** 	}
1864:src/display.c **** 	else {
1865:src/display.c **** 	  return MODE_STD;
1866:src/display.c **** 	}
1867:src/display.c ****       }
1868:src/display.c **** #else
1869:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1870:src/display.c **** 	decNumber b, c;
1871:src/display.c **** 
ARM GAS  /tmp/cchf4YwX.s 			page 48


1872:src/display.c **** 	dn_1(&b);
1873:src/display.c **** 	b.exponent -= UState.dispdigs;
1874:src/display.c **** 	dn_abs(&c, z);
1875:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1876:src/display.c **** 	  return MODE_FIX;
1877:src/display.c **** 	return MODE_STD;
1878:src/display.c ****       }
1879:src/display.c **** #endif
1880:src/display.c **** 
1881:src/display.c ****       /* SHOW display mode
1882:src/display.c ****        * in double precision show left or right part
1883:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1884:src/display.c ****        */
1885:src/display.c ****       static void show_x(char *x, int exp) {
1886:src/display.c **** 	const int dbl = is_dblmode();
1887:src/display.c **** 	char *p;
1888:src/display.c **** 	int i, j;
1889:src/display.c **** 	char *upper_str;
1890:src/display.c **** 	enum separator_modes separator_mode;
1891:src/display.c **** 	char decimal_mark;
1892:src/display.c **** 	char thousands_sep;
1893:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1894:src/display.c **** 	const int grouping = 0;
1895:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1896:src/display.c **** 	const int grouping = !UState.nothousands;
1897:src/display.c **** #else
1898:src/display.c **** 	const int grouping = 1;
1899:src/display.c **** #endif
1900:src/display.c **** 	int negative;
1901:src/display.c **** 
1902:src/display.c **** 	if (x[0] == '-') {
1903:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1904:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1905:src/display.c **** 
1906:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1907:src/display.c **** 	  xcopy(x, small_minus, 4);
1908:src/display.c **** 	  x += 4;
1909:src/display.c **** 	  negative = 4;
1910:src/display.c **** #else
1911:src/display.c **** 	  ++x;
1912:src/display.c **** 	  negative = 1;
1913:src/display.c **** #endif
1914:src/display.c **** 	}
1915:src/display.c **** 	else negative = 0;
1916:src/display.c **** 
1917:src/display.c **** 	p = find_char(x, '\0');
1918:src/display.c **** 	xset(p, '0', 34 - (p - x));
1919:src/display.c **** 
1920:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1921:src/display.c **** 	  separator_mode = SEP_COMMA;
1922:src/display.c **** 	  decimal_mark = '.';
1923:src/display.c **** 	  thousands_sep = ',';
1924:src/display.c **** 	}
1925:src/display.c **** 	else {
1926:src/display.c **** 	  separator_mode = SEP_DOT;
1927:src/display.c **** 	  decimal_mark = ',';
1928:src/display.c **** 	  thousands_sep = '.';
ARM GAS  /tmp/cchf4YwX.s 			page 49


1929:src/display.c **** 	}
1930:src/display.c **** 
1931:src/display.c **** 	if (State2.window) { // right half in double precision mode
1932:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1933:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1934:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1935:src/display.c **** 
1936:src/display.c **** 	  upper_str = x + 3;
1937:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1938:src/display.c **** 	  if (grouping) {
1939:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1940:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1941:src/display.c **** 	    x += 3 + 13 + 7;
1942:src/display.c **** 	  }
1943:src/display.c **** 	  else x += 3 + 13 + 6;
1944:src/display.c **** #else
1945:src/display.c **** 	  upper_str = x + 13;
1946:src/display.c **** 	  xset(upper_str, '.', 3);
1947:src/display.c **** 	  if (grouping) {
1948:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1949:src/display.c **** 	    upper_str[6] = thousands_sep;
1950:src/display.c **** 	    x += 13 + 3 + 7;
1951:src/display.c **** 	  }
1952:src/display.c **** 	  else x += 13 + 3 + 6;
1953:src/display.c **** #endif
1954:src/display.c **** 	  negative = 0;
1955:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1956:src/display.c **** 	}
1957:src/display.c **** 	else {
1958:src/display.c **** 	  upper_str = x;
1959:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1960:src/display.c **** 	  x[1] = decimal_mark;
1961:src/display.c **** 	  if (grouping) {
1962:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1963:src/display.c **** 	    x[5] = thousands_sep;
1964:src/display.c **** 	    x += 9;
1965:src/display.c **** 	  }
1966:src/display.c **** 	  else x += 8;
1967:src/display.c **** 	  if (dbl) {
1968:src/display.c **** 	    if (exp < 0) {
1969:src/display.c **** 	      x[9] = '-';
1970:src/display.c **** 	      exp = -exp;
1971:src/display.c **** 	    }
1972:src/display.c **** 	    else
1973:src/display.c **** 	      x[9] = ' ';
1974:src/display.c **** 	    j = exp / 1000;
1975:src/display.c **** 	    x[10] = '0' + j;
1976:src/display.c **** 	    exp -= 1000 * j;
1977:src/display.c **** 	  }
1978:src/display.c **** 	  else {
1979:src/display.c **** 	    x[9] = '\0';
1980:src/display.c **** 	    x[10] = '\0';
1981:src/display.c **** 	  }
1982:src/display.c **** 	  xcopy(x + 1, x, 11);
1983:src/display.c **** 	  *x = 0;
1984:src/display.c **** 	  set_exp(exp, 1, CNULL);
1985:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
ARM GAS  /tmp/cchf4YwX.s 			page 50


1986:src/display.c **** 	}
1987:src/display.c **** 	if (grouping) {
1988:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1989:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1990:src/display.c **** 	  }
1991:src/display.c **** 	}
1992:src/display.c **** 
1993:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1994:src/display.c **** 	  set_dig(j, x[i]);
1995:src/display.c **** 
1996:src/display.c **** 	*x = '\0';
1997:src/display.c **** 	set_status(upper_str - negative);
1998:src/display.c ****       }
1999:src/display.c **** 
2000:src/display.c **** 
2001:src/display.c ****       /* Display the X register in the numeric portion of the display.
2002:src/display.c ****        * We have to account for the various display modes and numbers of
2003:src/display.c ****        * digits.
2004:src/display.c ****        */
2005:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
2006:src/display.c **** 	decNumber z;
2007:src/display.c **** 	int digits = DISPLAY_DIGITS;
2008:src/display.c **** 
2009:src/display.c **** 	if (dbl)
2010:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
2011:src/display.c **** 	else
2012:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
2013:src/display.c **** 	set_x_dn(&z, res, &digits);
2014:src/display.c ****       }
2015:src/display.c **** 
2016:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
2017:src/display.c **** 	char x[50], *obp = x;
2018:src/display.c **** 	int odig = 0;
2019:src/display.c **** 	int show_exp = 0;
2020:src/display.c **** 	int j;
2021:src/display.c **** 	char mantissa[64];
2022:src/display.c **** 	int exp = 0;
2023:src/display.c **** 	char *p = mantissa;
2024:src/display.c **** 	char *r;
2025:src/display.c **** 	const char *q;
2026:src/display.c **** 	int count, i;
2027:src/display.c **** 	int extra_digits = 0;
2028:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2029:src/display.c **** 	int dd;
2030:src/display.c **** 	int dispdigs;
2031:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
2032:src/display.c **** #else
2033:src/display.c **** 	int dd = UState.dispdigs;
2034:src/display.c **** 	int mode = UState.dispmode;
2035:src/display.c **** #endif
2036:src/display.c **** 	int c;
2037:src/display.c **** 	int negative = 0;
2038:src/display.c **** 	int trimzeros = 0;
2039:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
2040:src/display.c **** 	const int show_large_exponent = 0;
2041:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
2042:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
ARM GAS  /tmp/cchf4YwX.s 			page 51


2043:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
2044:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
2045:src/display.c **** #else
2046:src/display.c **** 	const int show_large_exponent = 1;
2047:src/display.c **** #endif
2048:src/display.c **** 
2049:src/display.c **** 	set_separator_decimal_modes();
2050:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2051:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
2052:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
2053:src/display.c **** 	    if (State2.hms) {
2054:src/display.c **** 	      set_x_hms(z, res);
2055:src/display.c **** 	      return;
2056:src/display.c **** 	    }
2057:src/display.c **** 	    else if (UState.fract) {
2058:src/display.c **** 	      if (set_x_fract(z, res))
2059:src/display.c **** 		return;
2060:src/display.c **** 	    }
2061:src/display.c **** 	  }
2062:src/display.c **** 	}		
2063:src/display.c **** #else
2064:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
2065:src/display.c **** 	  if (State2.hms) {
2066:src/display.c **** 	    set_x_hms(z, res);
2067:src/display.c **** 	    State2.hms = 0;
2068:src/display.c **** 	    return;
2069:src/display.c **** 	  } else if (UState.fract) {
2070:src/display.c **** 	    if (set_x_fract(z, res))
2071:src/display.c **** 	      return;
2072:src/display.c **** 	  }
2073:src/display.c **** 	}
2074:src/display.c **** #endif
2075:src/display.c **** 
2076:src/display.c **** 	if (check_special_dn(z, res))
2077:src/display.c **** 	  return;
2078:src/display.c **** 
2079:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2080:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2081:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2082:src/display.c **** 	  z->exponent = 0;
2083:src/display.c **** 	}
2084:src/display.c **** 
2085:src/display.c **** 	xset(x, '\0', sizeof(x));
2086:src/display.c **** 
2087:src/display.c **** 	if (dn_eq0(z)) {
2088:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2089:src/display.c **** 	    x[0] = '-';
2090:src/display.c **** 	    x[1] = '0';
2091:src/display.c **** 	  } else
2092:src/display.c **** 	    x[0] = '0';
2093:src/display.c **** 	} else
2094:src/display.c **** 	  decNumberToString(z, x);
2095:src/display.c **** 
2096:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2097:src/display.c **** 	  show_x(x, exp);
2098:src/display.c **** 	  return;
2099:src/display.c **** 	}
ARM GAS  /tmp/cchf4YwX.s 			page 52


2100:src/display.c **** 
2101:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2102:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2103:src/display.c **** 	  //  ALL mode: fill the display
2104:src/display.c **** 	  dd = *display_digits - 1;
2105:src/display.c **** 	else
2106:src/display.c **** 	  dd = dispdigs;
2107:src/display.c **** 
2108:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2109:src/display.c **** 	  int orig_mode = mode;
2110:src/display.c **** 
2111:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2112:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2113:src/display.c **** 	    // allow zeros to be trimmed
2114:src/display.c **** 	    trimzeros = 1;
2115:src/display.c **** 	  if (orig_mode == MODE_STD)
2116:src/display.c **** 	    dd = *display_digits - 1;
2117:src/display.c ****  	}
2118:src/display.c **** #else
2119:src/display.c **** 	if (mode == MODE_STD) {
2120:src/display.c **** 	  mode = std_round_fix(z);
2121:src/display.c **** 	  trimzeros = 1;
2122:src/display.c **** 	  dd = *display_digits - 1;
2123:src/display.c **** 	} else if (dd >= *display_digits)
2124:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2125:src/display.c **** 	  dd = *display_digits - 1;
2126:src/display.c **** #endif
2127:src/display.c **** 
2128:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2129:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2130:src/display.c **** 
2131:src/display.c **** 	q = find_char(x, 'E');
2132:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2133:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2134:src/display.c **** 	if (q == NULL) exp = 0;
2135:src/display.c **** 	else {
2136:src/display.c **** 	  exp = s_to_i(q+1);
2137:src/display.c **** 	  if (*q == 'D') exp = -exp;
2138:src/display.c **** 	}
2139:src/display.c **** #else
2140:src/display.c **** 	if (q == NULL) exp = 0;
2141:src/display.c **** 	else exp = s_to_i(q+1);
2142:src/display.c **** #endif
2143:src/display.c **** 
2144:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2145:src/display.c **** 	for (q=x; *q == ' '; q++);
2146:src/display.c **** 	if (!res) {
2147:src/display.c **** 	  CLR_EXP_SIGN;
2148:src/display.c **** 	  CLR_MANT_SIGN;
2149:src/display.c **** 	}
2150:src/display.c **** 	if (*q == '-') {
2151:src/display.c **** 	  negative = 1;
2152:src/display.c **** 	  q++;
2153:src/display.c **** 	} else if (*q == '+')
2154:src/display.c **** 	  q++;
2155:src/display.c **** 	for (; *q == '0'; q++);
2156:src/display.c **** 	if (*q == '.') {
ARM GAS  /tmp/cchf4YwX.s 			page 53


2157:src/display.c **** 	  do
2158:src/display.c **** 	    exp--;
2159:src/display.c **** 	  while (*++q == '0');
2160:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2161:src/display.c **** 	    *p++ = *q++;
2162:src/display.c **** 	} else {
2163:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2164:src/display.c **** 	    *p++ = *q++;
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2166:src/display.c **** 	    *p++ = *q++;
2167:src/display.c **** 	    exp++;
2168:src/display.c **** 	  }
2169:src/display.c **** 	  if (*q == '.') {
2170:src/display.c **** 	    q++;
2171:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2172:src/display.c **** 	      *p++ = *q++;
2173:src/display.c **** 	  }
2174:src/display.c **** 	}
2175:src/display.c **** 
2176:src/display.c **** 	if (mode == MODE_FIX) {
2177:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2178:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2179:src/display.c **** 	  else {
2180:src/display.c **** 	    extra_digits = exp;
2181:src/display.c **** 	    /* We might have push the fixed decimals off the
2182:src/display.c **** 	     * screen so adjust if so.
2183:src/display.c **** 	     */
2184:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2185:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2186:src/display.c **** 	  }
2187:src/display.c **** 	}
2188:src/display.c **** 
2189:src/display.c **** 	// Round the mantissa to the number of digits desired
2190:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2191:src/display.c **** 	if (*p >= '5') {	// Round up
2192:src/display.c **** 	  *p = '0';
2193:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2194:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2195:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2196:src/display.c **** 	    mantissa[0] = '1';
2197:src/display.c **** 	    exp++;
2198:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2199:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2200:src/display.c **** 	      extra_digits = 0;
2201:src/display.c **** 	    }
2202:src/display.c **** 	  } else {
2203:src/display.c **** 	    while (*--p == '9')
2204:src/display.c **** 	      *p = '0';
2205:src/display.c **** 	    (*p)++;
2206:src/display.c **** 	  }
2207:src/display.c **** 	}
2208:src/display.c **** 
2209:src/display.c **** 	// Zap what is left
2210:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2211:src/display.c **** 
2212:src/display.c **** 	p = mantissa;
2213:src/display.c **** 	switch (mode) {
ARM GAS  /tmp/cchf4YwX.s 			page 54


2214:src/display.c **** 	default:
2215:src/display.c **** 	case MODE_STD:   
2216:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2217:src/display.c **** 	  if (count != *display_digits)
2218:src/display.c **** 	    count++;
2219:src/display.c **** 	  // Too big or too small to fit on display
2220:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2221:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2222:src/display.c **** 	    case -1:
2223:src/display.c **** 	    case 2:
2224:src/display.c **** 	      *obp++ = *p++;
2225:src/display.c **** 	      odig++;
2226:src/display.c **** 	      dd--;
2227:src/display.c **** 	      exp--;
2228:src/display.c **** 	    case -2:
2229:src/display.c **** 	    case 1:
2230:src/display.c **** 	      *obp++ = *p++;
2231:src/display.c **** 	      odig++;
2232:src/display.c **** 	      dd--;
2233:src/display.c **** 	      exp--;
2234:src/display.c **** 	    case 0:
2235:src/display.c **** 	      ;
2236:src/display.c **** 	    };
2237:src/display.c **** 	    *obp++ = *p++;
2238:src/display.c **** 	    odig++;
2239:src/display.c **** 	    *obp++ = '.';
2240:src/display.c **** 	    for (i=1; i<count; i++) {
2241:src/display.c **** 	      *obp++ = *p++;
2242:src/display.c **** 	      odig++;
2243:src/display.c **** 	    }
2244:src/display.c **** 	    show_exp = 1;
2245:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2246:src/display.c **** 	    for(i=0; i<=exp; i++) {
2247:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2248:src/display.c **** 		*obp++ = ',';
2249:src/display.c **** 	      *obp++ = *p++;
2250:src/display.c **** 	      odig++;
2251:src/display.c **** 	    }
2252:src/display.c **** 	    *obp++ = '.';
2253:src/display.c **** 	    if (count > (exp + 1)) {
2254:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2255:src/display.c **** 		*obp++ = *p++;
2256:src/display.c **** 		odig++;
2257:src/display.c **** 	      }
2258:src/display.c **** 	    }
2259:src/display.c **** 	  } else {		// All digits to right of decimal point
2260:src/display.c **** 	    *obp++ = '0';
2261:src/display.c **** 	    odig++;
2262:src/display.c **** 	    *obp++ = '.';
2263:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2264:src/display.c **** 	      *obp++ = '0';
2265:src/display.c **** 	      odig++;
2266:src/display.c **** 	    }
2267:src/display.c **** 	    for (i=0; i<count; i++) {
2268:src/display.c **** 	      *obp++ = *p++;
2269:src/display.c **** 	      odig++;
2270:src/display.c **** 	    }
ARM GAS  /tmp/cchf4YwX.s 			page 55


2271:src/display.c **** 	  }
2272:src/display.c **** 	  break;
2273:src/display.c **** 
2274:src/display.c **** 	case MODE_FIX:
2275:src/display.c **** 	  j = 0;
2276:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2277:src/display.c **** 	    for (i=0; i<=exp; i++) {
2278:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2279:src/display.c **** 		*obp++ = ',';
2280:src/display.c **** 	      *obp++ = *p++;
2281:src/display.c **** 	      odig++;
2282:src/display.c **** 	    }
2283:src/display.c **** 	    *obp++ = '.';
2284:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2285:src/display.c **** 	      *obp++ = *p++;
2286:src/display.c **** 	      odig++;
2287:src/display.c **** 	    }
2288:src/display.c **** 	  } else {		// All digits to right of decimal point
2289:src/display.c **** 	    *obp++ = '0';
2290:src/display.c **** 	    odig++;
2291:src/display.c **** 	    *obp++ = '.';
2292:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2293:src/display.c **** 	      *obp++ = '0';
2294:src/display.c **** 	      odig++;
2295:src/display.c **** 	      dd--;
2296:src/display.c **** 	    }
2297:src/display.c **** 	    while (dd-- > 0) {
2298:src/display.c **** 	      *obp++ = *p++;
2299:src/display.c **** 	      odig++;
2300:src/display.c **** 	    }
2301:src/display.c **** 	  }
2302:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2303:src/display.c **** 	  if (trimzeros)
2304:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2305:src/display.c **** 	      obp--;
2306:src/display.c **** 	      odig--;
2307:src/display.c **** 	    }
2308:src/display.c **** #endif			
2309:src/display.c **** 	  break;
2310:src/display.c **** 
2311:src/display.c **** 	case MODE_ENG:
2312:src/display.c **** 	  switch (exp % 3) {
2313:src/display.c **** 	  case -1:
2314:src/display.c **** 	  case 2:
2315:src/display.c **** 	    *obp++ = *p++;
2316:src/display.c **** 	    odig++;
2317:src/display.c **** 	    dd--;
2318:src/display.c **** 	    exp--;
2319:src/display.c **** 	  case -2:
2320:src/display.c **** 	  case 1:
2321:src/display.c **** 	    *obp++ = *p++;
2322:src/display.c **** 	    odig++;
2323:src/display.c **** 	    dd--;
2324:src/display.c **** 	    exp--;
2325:src/display.c **** 	  case 0:
2326:src/display.c **** 	    ;
2327:src/display.c **** 	  };
ARM GAS  /tmp/cchf4YwX.s 			page 56


2328:src/display.c **** 	  // Falling through
2329:src/display.c **** 
2330:src/display.c **** 	case MODE_SCI:
2331:src/display.c **** 	  *obp++ = *p++;
2332:src/display.c **** 	  odig++;
2333:src/display.c **** 	  *obp++ = '.';
2334:src/display.c **** 	  dd--;
2335:src/display.c **** 	  while (dd-- >= 0) {
2336:src/display.c **** 	    *obp++ = *p++;
2337:src/display.c **** 	    odig++;
2338:src/display.c **** 	  }
2339:src/display.c **** 	  show_exp = 1;
2340:src/display.c **** 	}
2341:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2342:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2343:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2344:src/display.c **** 	    obp--;
2345:src/display.c **** 	    odig--;
2346:src/display.c **** 	  }
2347:src/display.c **** #endif	
2348:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2349:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2350:src/display.c **** 	  set_x_dn(z, res, display_digits);
2351:src/display.c **** 	  return;
2352:src/display.c **** 	}
2353:src/display.c **** 	/* Finally, send the output to the display */
2354:src/display.c **** 	*obp = '\0';
2355:src/display.c **** 	if (odig > *display_digits)
2356:src/display.c **** 	  odig = *display_digits;
2357:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2358:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2359:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2360:src/display.c **** 	if (negative) {
2361:src/display.c **** 	  if (res) *res++ = '-';
2362:src/display.c **** 	  else {
2363:src/display.c **** 	    if (j == 0)
2364:src/display.c **** 	      SET_MANT_SIGN;
2365:src/display.c **** 	    else
2366:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2367:src/display.c **** 	  }
2368:src/display.c **** 	}
2369:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2370:src/display.c **** 	  if (c == '.') {
2371:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2372:src/display.c **** 	  } else if (c == ',') {
2373:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2374:src/display.c **** 	  } else {
2375:src/display.c **** 	    res = set_dig_s(j, c, res);
2376:src/display.c **** 	    j += SEGS_PER_DIGIT;
2377:src/display.c **** 	  }
2378:src/display.c **** 	}
2379:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2380:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2381:src/display.c **** 	  if ( !res ) {
2382:src/display.c **** 	    set_exp(exp, 4, res);
2383:src/display.c **** 	  }
2384:src/display.c **** 	  else {
ARM GAS  /tmp/cchf4YwX.s 			page 57


2385:src/display.c **** 	    set_exp(exp, 0, res);
2386:src/display.c **** 	  }
2387:src/display.c **** 	}
2388:src/display.c **** #else
2389:src/display.c **** 	if (show_exp)
2390:src/display.c **** 	  set_exp(exp, 0, res);
2391:src/display.c **** #endif
2392:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2393:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2394:src/display.c **** 	*display_digits = odig;
2395:src/display.c ****       }
2396:src/display.c **** 
2397:src/display.c **** #if defined(QTGUI) || defined(IOS)
2398:src/display.c ****       void format_display(char *buf) {
2399:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2400:src/display.c **** 	  {
2401:src/display.c **** 	    const char *p = get_cmdline();
2402:src/display.c **** 	    if (p == NULL) {
2403:src/display.c **** 	      format_reg(regX_idx, buf);
2404:src/display.c **** 	    } else {
2405:src/display.c **** 	      scopy(buf, p);
2406:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2407:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2408:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2409:src/display.c **** 		buf[CmdLineEex] = 'E';
2410:src/display.c **** 		buf[CmdLineEex+1] = '-';
2411:src/display.c **** 	      }
2412:src/display.c **** #  endif
2413:src/display.c **** 	    }
2414:src/display.c **** 	  }
2415:src/display.c **** 	else {
2416:src/display.c **** 	  buf[0]=0;
2417:src/display.c **** 	}
2418:src/display.c ****       }
2419:src/display.c **** #endif
2420:src/display.c **** 
2421:src/display.c ****       void format_reg(int index, char *buf) {
2422:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2423:src/display.c **** 
2424:src/display.c **** 	if (is_intmode())
2425:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2426:src/display.c **** #ifndef HP16C_MODE_CHANGE
2427:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2428:src/display.c **** 	  decNumber x;
2429:src/display.c **** 	  int s;
2430:src/display.c **** 	  unsigned long long int v;
2431:src/display.c **** 
2432:src/display.c **** 	  getRegister(&x, index);
2433:src/display.c **** 	  v = dn_to_ull(&x, &s);
2434:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2435:src/display.c **** 	}
2436:src/display.c **** #endif
2437:src/display.c **** 	else
2438:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2439:src/display.c ****       }
2440:src/display.c **** 
2441:src/display.c ****       /* Display the status screen */
ARM GAS  /tmp/cchf4YwX.s 			page 58


2442:src/display.c ****       static void show_status(void) {
2443:src/display.c **** 	int i, n;
2444:src/display.c **** 	int j = SEGS_EXP_BASE;
2445:src/display.c **** 	const int status = State2.status - 3;
2446:src/display.c **** 	char buf[16], *p = buf;
2447:src/display.c **** 	unsigned int pc;
2448:src/display.c **** 
2449:src/display.c **** 	if (status == -2) {
2450:src/display.c **** 	  set_status("Free:");
2451:src/display.c **** 	  p = num_arg(buf, free_mem());
2452:src/display.c **** 	  p = scopy(p, " , FL. ");
2453:src/display.c **** 	  p = num_arg(p, free_flash());
2454:src/display.c **** 	  *p = '\0';
2455:src/display.c **** 	  set_digits_string(buf, 0);
2456:src/display.c **** 	}
2457:src/display.c **** 	else if (status == -1) {
2458:src/display.c **** 	  /* Top line */
2459:src/display.c **** 	  p = scopy(buf, "Regs:");
2460:src/display.c **** 	  if (SizeStatRegs)
2461:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2462:src/display.c **** 	  *p = '\0';
2463:src/display.c **** 	  set_status(buf);
2464:src/display.c **** 
2465:src/display.c **** 	  /* Bottom line */
2466:src/display.c **** 	  p = num_arg(buf, global_regs());
2467:src/display.c **** 	  if (LocalRegs < 0) {
2468:src/display.c **** 	    p = scopy(p, " , Loc. ");
2469:src/display.c **** 	    p = num_arg(p, local_regs());
2470:src/display.c **** 	  }
2471:src/display.c **** 	  *p = '\0';
2472:src/display.c **** 	  set_digits_string(buf, 0);
2473:src/display.c **** 	} else {
2474:src/display.c **** 	  int base;
2475:src/display.c **** 	  int end;
2476:src/display.c **** 	  int group = 10;
2477:src/display.c **** 	  int start = 0;
2478:src/display.c **** 		
2479:src/display.c **** 	  if (status <= 9) {
2480:src/display.c **** 	    base = 10 * status;
2481:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2482:src/display.c **** 	    p = scopy(buf, "FL ");
2483:src/display.c **** 	    p = num_arg_0(p, base, 2);
2484:src/display.c **** 	    *p++ = '-';
2485:src/display.c **** 	    p = num_arg_0(p, end, 2);
2486:src/display.c **** 	    *p = '\0';
2487:src/display.c **** 	    set_status(buf);
2488:src/display.c **** 	  }
2489:src/display.c **** 	  else if (status == 10) {
2490:src/display.c **** 	    base = regX_idx;
2491:src/display.c **** 	    end = regK_idx;
2492:src/display.c **** 	    start = 3;
2493:src/display.c **** 	    group = 4;
2494:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2495:src/display.c **** 	  }
2496:src/display.c **** 	  else { // status == 11
2497:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2498:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
ARM GAS  /tmp/cchf4YwX.s 			page 59


2499:src/display.c **** 	    set_status("FL.00-.15");
2500:src/display.c **** 	  }
2501:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2502:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2503:src/display.c **** 	  j += SEGS_PER_DIGIT;
2504:src/display.c **** 	  for (i = start; i < group + start; i++) {
2505:src/display.c **** 	    int k = i + base - start;
2506:src/display.c **** 	    int l = get_user_flag(k);
2507:src/display.c **** 	    k += group;
2508:src/display.c **** 	    if (end >= k) {
2509:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2510:src/display.c **** 	      k += group;
2511:src/display.c **** 	      if (end >= k)
2512:src/display.c **** 		l |= (get_user_flag(k) << 2);
2513:src/display.c **** 	    }
2514:src/display.c **** 	    set_dig(j, l);
2515:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2516:src/display.c **** 	    j += SEGS_PER_DIGIT;
2517:src/display.c **** 	    if (i == 4) {
2518:src/display.c **** 	      set_dig(j, 8);
2519:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2520:src/display.c **** 	      j += SEGS_PER_DIGIT;
2521:src/display.c **** 	    }
2522:src/display.c **** 	  }
2523:src/display.c **** 	}
2524:src/display.c **** 
2525:src/display.c **** 	j = SEGS_EXP_BASE;
2526:src/display.c **** 	pc = state_pc();
2527:src/display.c **** 	if (isXROM(pc))
2528:src/display.c **** 	  pc = 1;
2529:src/display.c **** 	for (n=i=0; i<4; i++) {
2530:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2531:src/display.c **** 	    if (++n == 4) {
2532:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2533:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2534:src/display.c **** 	    } else {
2535:src/display.c **** 	      set_dig(j, 'A'+i);
2536:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2537:src/display.c **** 	    }
2538:src/display.c **** 	  }
2539:src/display.c **** 	}
2540:src/display.c ****       }
2541:src/display.c **** 
2542:src/display.c **** 
2543:src/display.c ****       /* Display the list of alpha labels */
2544:src/display.c ****       static void show_label(void) {
2545:src/display.c **** 	char buf[16];
2546:src/display.c **** 	unsigned short int pc = State2.digval;
2547:src/display.c **** 	unsigned int op = getprog(pc);
2548:src/display.c **** 	int n = nLIB(pc);
2549:src/display.c **** 	unsigned short int lblpc;
2550:src/display.c **** 
2551:src/display.c **** 	set_status(prt((opcode)op, buf));
2552:src/display.c **** 	set_digits_string(libname[n], 0);
2553:src/display.c **** #ifndef REALBUILD
2554:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2555:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 60


2556:src/display.c **** 
2557:src/display.c **** 	if (op & OP_DBL) {
2558:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2559:src/display.c **** 	  if (lblpc != pc) {
2560:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2561:src/display.c **** 	    n = nLIB(lblpc);
2562:src/display.c **** 	    if (n == REGION_RAM)
2563:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2564:src/display.c **** 	    else {
2565:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2566:src/display.c **** #ifndef REALBUILD
2567:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2568:src/display.c **** #endif
2569:src/display.c **** 	    }
2570:src/display.c **** 	  }
2571:src/display.c **** 	}
2572:src/display.c ****       }
2573:src/display.c **** 
2574:src/display.c ****       /* Display a list of register contents */
2575:src/display.c ****       static void show_registers(void) {
2576:src/display.c **** 	char buf[16], *bp;
2577:src/display.c **** 	int n = State2.digval;
2578:src/display.c **** 	
2579:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2580:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2581:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2582:src/display.c **** 	  n;
2583:src/display.c **** #else
2584:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2585:src/display.c **** 	  n;
2586:src/display.c **** #endif
2587:src/display.c **** 
2588:src/display.c **** 	if (State2.disp_as_alpha) {
2589:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2590:src/display.c **** 	}
2591:src/display.c **** 	else {
2592:src/display.c **** 	  xset(buf, '\0', 16);
2593:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2594:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2595:src/display.c **** #else
2596:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2597:src/display.c **** #endif
2598:src/display.c **** 	  if (State2.local) {
2599:src/display.c **** 	    *bp++ = '.';
2600:src/display.c **** 	    if (n >= 100) {
2601:src/display.c **** 	      *bp++ = '1';
2602:src/display.c **** 	      n -= 100;
2603:src/display.c **** 	    }
2604:src/display.c **** 	  }
2605:src/display.c **** 	  if (n < 100)
2606:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2607:src/display.c **** 	  else
2608:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2609:src/display.c **** 	  set_status(buf);
2610:src/display.c **** 	}
2611:src/display.c **** 	format_reg(reg, CNULL);
2612:src/display.c ****       }
ARM GAS  /tmp/cchf4YwX.s 			page 61


2613:src/display.c **** 
2614:src/display.c **** 
2615:src/display.c ****       static void set_annunciators(void)
2616:src/display.c ****       {
2617:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2618:src/display.c **** 
2619:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2620:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2621:src/display.c **** 	 * browsing constants.
2622:src/display.c **** 	 */
2623:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2624:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2625:src/display.c **** #else
2626:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2627:src/display.c **** #endif
2628:src/display.c **** #ifdef INCLUDE_C_LOCK
2629:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2630:src/display.c **** #endif
2631:src/display.c **** 
2632:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2633:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2634:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2635:src/display.c **** 	set_IO_annunciator();
2636:src/display.c **** 
2637:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2638:src/display.c **** 	 */
2639:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2640:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2641:src/display.c ****       }
2642:src/display.c **** 
2643:src/display.c **** 
2644:src/display.c ****       /*
2645:src/display.c ****        *  Toggle the little "=" sign
2646:src/display.c ****        */
2647:src/display.c ****       void set_IO_annunciator(void) {
2648:src/display.c **** #ifndef DM42
2649:src/display.c **** 	int on = SerialOn
2650:src/display.c **** #endif
2651:src/display.c **** #ifdef DM42
2652:src/display.c **** 	  int on = 0
2653:src/display.c **** #endif
2654:src/display.c **** #ifdef REALBUILD
2655:src/display.c **** 	  || DebugFlag
2656:src/display.c **** #endif
2657:src/display.c **** #ifdef INFRARED
2658:src/display.c **** 	  || PrinterColumn != 0
2659:src/display.c **** #endif
2660:src/display.c **** 	  ;
2661:src/display.c **** 
2662:src/display.c **** 	if (on != IoAnnunciator) {
2663:src/display.c **** 	  dot(LIT_EQ, on);
2664:src/display.c **** 	  IoAnnunciator = on;
2665:src/display.c **** 	  finish_display(); //LIT_EQ
2666:src/display.c **** 	}
2667:src/display.c ****       }
2668:src/display.c **** 
2669:src/display.c **** #ifdef TOP_ROW
ARM GAS  /tmp/cchf4YwX.s 			page 62


2670:src/display.c ****       /*
2671:src/display.c ****        *  Update the display
2672:src/display.c ****        */
2673:src/display.c ****       void display(void) {
2674:src/display.c **** 	int i, j;
2675:src/display.c **** 	char buf[40], *bp = buf;
2676:src/display.c **** 	const char *p;
2677:src/display.c **** 	int annuc = 0;
2678:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2679:src/display.c **** 	int skip = 0;
2680:src/display.c **** 	int x_disp = 0;
2681:src/display.c **** 	const int shift = cur_shift();
2682:src/display.c **** 
2683:src/display.c **** 	no_status_top = 0;
2684:src/display.c **** 	if (State2.disp_freeze) {
2685:src/display.c **** 	  State2.disp_freeze = 0;
2686:src/display.c **** 	  State2.disp_temp = 1;
2687:src/display.c **** #ifdef CONSOLE
2688:src/display.c **** 	  JustDisplayed = 1;
2689:src/display.c **** #endif
2690:src/display.c **** 	  ShowRPN = 0;
2691:src/display.c **** 	  return;
2692:src/display.c **** 	}
2693:src/display.c **** 
2694:src/display.c **** 	if (WasDataEntry) {
2695:src/display.c **** #if defined(QTGUI) || defined(IOS)
2696:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2697:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2698:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2699:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2700:src/display.c **** #endif
2701:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2702:src/display.c **** 
2703:src/display.c **** 	  // Erase 7-segment display
2704:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2705:src/display.c **** 	    clr_dot(i);
2706:src/display.c **** 	  }
2707:src/display.c **** 	  goto only_update_x;
2708:src/display.c **** 	}
2709:src/display.c **** #ifdef INCLUDE_YREG_CODE
2710:src/display.c **** #  ifdef YREG_ALWAYS_ON
2711:src/display.c **** 	const int yreg_enabled = 1;
2712:src/display.c **** #  else
2713:src/display.c **** 	const int yreg_enabled = UState.show_y;
2714:src/display.c **** #  endif
2715:src/display.c **** #else
2716:src/display.c **** 	const int yreg_enabled = 0;
2717:src/display.c **** #endif
2718:src/display.c **** 	// Clear display
2719:src/display.c **** 	reset_disp();
2720:src/display.c **** 
2721:src/display.c **** 	
2722:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2723:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2724:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2725:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2726:src/display.c **** 	/*   set_status(buf); */
ARM GAS  /tmp/cchf4YwX.s 			page 63


2727:src/display.c **** 	/* } */
2728:src/display.c **** 	if (State2.version) {
2729:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2730:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2731:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2732:src/display.c **** #ifndef REALBUILD
2733:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2734:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2735:src/display.c **** #endif
2736:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2737:src/display.c **** 	  set_status(vers);
2738:src/display.c **** 	  skip = 1;
2739:src/display.c **** 	  goto nostk;
2740:src/display.c **** 	} else if (State2.confirm) {
2741:src/display.c **** 	  if (yreg_enabled) {
2742:src/display.c **** 	    set_status_top(S_SURE);
2743:src/display.c **** 	    no_status_top = 1;
2744:src/display.c **** 	    annuc = 1;
2745:src/display.c **** 	  }
2746:src/display.c **** 	  else {
2747:src/display.c **** 	    set_status(S_SURE);
2748:src/display.c **** 	  }
2749:src/display.c **** 	} else if (State2.hyp) {
2750:src/display.c **** 	  bp = scopy(bp, "HYP");
2751:src/display.c **** 	  if (! State2.dot)
2752:src/display.c **** 	    *bp++ = '\235';
2753:src/display.c **** 	  if (yreg_enabled) {
2754:src/display.c **** 	    set_status_top(buf);
2755:src/display.c **** 	    no_status_top = 1;
2756:src/display.c **** 	    annuc = 1;
2757:src/display.c **** 	  }
2758:src/display.c **** 	  else {
2759:src/display.c **** 	    set_status(buf);
2760:src/display.c **** 	  }
2761:src/display.c **** 	} else if (State2.gtodot) {
2762:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2763:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2764:src/display.c **** 	  if (State2.numdigit > 0)
2765:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2766:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2767:src/display.c **** 	  *bp++ = '_';
2768:src/display.c **** 	  if (yreg_enabled) {
2769:src/display.c **** 	    set_status_top(buf);
2770:src/display.c **** 	    no_status_top = 1;
2771:src/display.c **** 	    annuc = 1;
2772:src/display.c **** 	  }
2773:src/display.c **** 	  else {
2774:src/display.c **** 	    set_status(buf);
2775:src/display.c **** 	  }
2776:src/display.c **** 	} else if (State2.rarg) {
2777:src/display.c **** 	  /* Commands with arguments */
2778:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2779:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2780:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2781:src/display.c **** #endif
2782:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2783:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
ARM GAS  /tmp/cchf4YwX.s 			page 64


2784:src/display.c **** 	  if (State2.dot) {
2785:src/display.c **** 	    *bp++ = 's';
2786:src/display.c **** 	    *bp++ = '_';
2787:src/display.c **** 	  } else if (shift == SHIFT_F) {
2788:src/display.c **** 	    *bp++ = '\021';
2789:src/display.c **** 	    *bp++ = '_';
2790:src/display.c **** 	  } else {
2791:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2792:src/display.c **** 	       : State2.ind ? 2 
2793:src/display.c **** 	       : num_arg_digits(CmdBase); */
2794:src/display.c **** 	    if (State2.local)
2795:src/display.c **** 	      *bp++ = '.';
2796:src/display.c **** 	    if (State2.numdigit > 0) {
2797:src/display.c **** 	      if (State2.shuffle)
2798:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2799:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2800:src/display.c **** 	      else
2801:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2802:src/display.c **** 	    }
2803:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2804:src/display.c **** 	    *bp++ = '_';
2805:src/display.c **** 	  }
2806:src/display.c **** 	  if (yreg_enabled) {
2807:src/display.c **** 	    set_status_top(buf);
2808:src/display.c **** 	    no_status_top = 1;
2809:src/display.c **** 	    annuc = 1;
2810:src/display.c **** 	  }
2811:src/display.c **** 	  else {
2812:src/display.c **** 	    set_status(buf);
2813:src/display.c **** 	  }
2814:src/display.c **** 	} else if (State2.test != TST_NONE) {
2815:src/display.c **** 	  *bp++ = 'x';
2816:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2817:src/display.c **** 	  *bp++ = '_';
2818:src/display.c **** 	  *bp++ = '?';
2819:src/display.c **** 	  if (yreg_enabled) {
2820:src/display.c **** 	    set_status_top(buf);
2821:src/display.c **** 	    no_status_top = 1;
2822:src/display.c **** 	    annuc = 1;
2823:src/display.c **** 	  }
2824:src/display.c **** 	  else {
2825:src/display.c **** 	    set_status(buf);
2826:src/display.c **** 	  }
2827:src/display.c **** 	} else if (cata) {
2828:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2829:src/display.c **** 	  char b2[16];
2830:src/display.c **** 	  const char *p;
2831:src/display.c **** 
2832:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2833:src/display.c **** 	  p = catcmd(op, b2);
2834:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2835:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2836:src/display.c **** 	  bp = scopy(bp, p);
2837:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2838:src/display.c **** 	    // State2.disp_small = 1;
2839:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2840:src/display.c **** 	      set_digits_string("0 to 255", 0);
ARM GAS  /tmp/cchf4YwX.s 			page 65


2841:src/display.c **** 	    else
2842:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2843:src/display.c **** 	    skip = 1;
2844:src/display.c **** 	  } else if (State2.runmode) {
2845:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2846:src/display.c **** 	      decNumber x, r;
2847:src/display.c **** 	      decimal64 z;
2848:src/display.c **** 
2849:src/display.c **** 	      getX(&x);
2850:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2851:src/display.c **** 		const unsigned int f = argKIND(op);
2852:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2853:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2854:src/display.c **** 		  update_speed(0);
2855:src/display.c **** 		  fp(&r, &x);
2856:src/display.c **** 		}
2857:src/display.c **** 		else
2858:src/display.c **** 		  set_NaN(&r);
2859:src/display.c **** 	      } else
2860:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2861:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2862:src/display.c **** 	      packed_from_number(&z, &r);
2863:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2864:src/display.c **** 	      skip = 1;
2865:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2866:src/display.c **** 	      REGISTER z, *const x = StackBase;
2867:src/display.c **** 	      copyreg(&z, x);
2868:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2869:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2870:src/display.c **** 	      copyreg(x, &z);
2871:src/display.c **** 	      skip = 1;
2872:src/display.c **** 	    }
2873:src/display.c **** 	  }
2874:src/display.c **** 	  if (yreg_enabled) {
2875:src/display.c **** 	    set_status_top(buf);
2876:src/display.c **** 	    no_status_top = 1;
2877:src/display.c **** 	    annuc = 1;
2878:src/display.c **** 	  }
2879:src/display.c **** 	  else {
2880:src/display.c **** 	    set_status(buf);
2881:src/display.c **** 	  }
2882:src/display.c **** 	} else if (State2.multi) {
2883:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2884:src/display.c **** 	  if (State2.numdigit > 0) {
2885:src/display.c **** 	    *bp++ = (char) State2.digval;
2886:src/display.c **** 	    if (State2.numdigit > 1)
2887:src/display.c **** 	      *bp++ = State2.digval2;
2888:src/display.c **** 	  }
2889:src/display.c **** 	  if (yreg_enabled) {
2890:src/display.c **** 	    set_status_top(buf);
2891:src/display.c **** 	    no_status_top = 1;
2892:src/display.c **** 	    annuc = 1;
2893:src/display.c **** 	  }
2894:src/display.c **** 	  else {
2895:src/display.c **** 	    set_status(buf);
2896:src/display.c **** 	  }
2897:src/display.c **** 	} else if (State2.status) {
ARM GAS  /tmp/cchf4YwX.s 			page 66


2898:src/display.c **** 	  show_status();
2899:src/display.c **** 	  skip = 1;
2900:src/display.c **** 	} else if (State2.labellist) {
2901:src/display.c **** 	  show_label();
2902:src/display.c **** 	  skip = 1;
2903:src/display.c **** 	} else if (State2.registerlist) {
2904:src/display.c **** 	  show_registers();
2905:src/display.c **** 	  skip = 1;
2906:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2907:src/display.c **** 	    annunciators();
2908:src/display.c **** 	  }
2909:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2910:src/display.c **** 	} else if (State2.disp_as_alpha) {
2911:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2912:src/display.c **** #endif
2913:src/display.c **** 	} else if (State2.runmode) {
2914:src/display.c **** 	  if (DispMsg) { 
2915:src/display.c **** 	    set_status(DispMsg);
2916:src/display.c **** 	  } else if (DispPlot) {
2917:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2918:src/display.c **** 	  } else if (State2.alphas) {
2919:src/display.c **** 	    bp = scopy(buf, Alpha);
2920:src/display.c **** 	    j = State2.alpha_pos;
2921:src/display.c **** 	    if (j != 0) {
2922:src/display.c **** 	      i = slen(buf);
2923:src/display.c **** 	      j *= 6;
2924:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2925:src/display.c **** 		{
2926:src/display.c **** 		  buf[ (i - j) ] = '\0';
2927:src/display.c **** 		  set_status_right(buf);
2928:src/display.c **** 		}
2929:src/display.c **** 	      else {
2930:src/display.c **** 		set_status(buf);
2931:src/display.c **** 	      }
2932:src/display.c **** 	    }
2933:src/display.c **** 	    else {
2934:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2935:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2936:src/display.c **** 		*bp++ = '\0';
2937:src/display.c **** 	      }
2938:src/display.c **** 	      set_status_right(buf);
2939:src/display.c **** 	    }
2940:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2941:src/display.c **** 	      bp = buf;
2942:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2943:src/display.c **** 	      *bp++ = '\0';
2944:src/display.c **** 	      set_status_top(buf);
2945:src/display.c **** 	      no_status_top = 1;
2946:src/display.c **** 	      //annuc = 1;
2947:src/display.c **** 	    }
2948:src/display.c **** 	  }
2949:src/display.c **** 	  else {
2950:src/display.c **** 	    annuc = 1;
2951:src/display.c **** 	  }
2952:src/display.c **** 	}
2953:src/display.c **** 	else {
2954:src/display.c **** #ifndef DM42
ARM GAS  /tmp/cchf4YwX.s 			page 67


2955:src/display.c **** 	  show_progtrace(buf);
2956:src/display.c **** #endif
2957:src/display.c **** 	  i = state_pc();
2958:src/display.c **** 	  if (i > 0)
2959:src/display.c **** 	    set_status(prt(getprog(i), buf));
2960:src/display.c **** 	  else
2961:src/display.c **** 	    set_status("");
2962:src/display.c **** 	  set_dot(STO_annun);
2963:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2964:src/display.c **** 	    annuc = 1;
2965:src/display.c **** 	  goto nostk;
2966:src/display.c **** 	}
2967:src/display.c **** 	show_stack();
2968:src/display.c ****       nostk:
2969:src/display.c **** 	show_flags();
2970:src/display.c **** 	if (!skip) {
2971:src/display.c **** 	  if (State2.runmode) {
2972:src/display.c **** 	  only_update_x:
2973:src/display.c **** 	    p = get_cmdline();
2974:src/display.c **** 	    if (p == NULL || cata) {
2975:src/display.c **** 	      if (ShowRegister != -1) {
2976:src/display.c **** #ifdef INCLUDE_C_LOCK
2977:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2978:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2979:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2980:src/display.c **** 		    SET_POLAR_READY;
2981:src/display.c **** 		  }
2982:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2983:src/display.c **** 		    State2.hms = 0;
2984:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2985:src/display.c **** 		    State2.hms = 1;
2986:src/display.c **** 		  }
2987:src/display.c **** 		  else {
2988:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2989:src/display.c **** 		  }
2990:src/display.c **** 		  x_disp = 1;
2991:src/display.c **** 		}
2992:src/display.c **** 		else {
2993:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2994:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2995:src/display.c **** 		}
2996:src/display.c **** #else		
2997:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2998:src/display.c **** 		format_reg(ShowRegister, CNULL);
2999:src/display.c **** #endif
3000:src/display.c **** 	      }
3001:src/display.c **** 	      else
3002:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3003:src/display.c **** 	    } else {
3004:src/display.c **** 	      disp_x(p);
3005:src/display.c **** 	      x_disp = 1;
3006:src/display.c **** 	    }
3007:src/display.c **** 	    if (WasDataEntry) {
3008:src/display.c **** 	      goto finish;
3009:src/display.c **** 	    }
3010:src/display.c **** 	  } else {
3011:src/display.c **** 	    unsigned int pc = state_pc();
ARM GAS  /tmp/cchf4YwX.s 			page 68


3012:src/display.c **** 	    unsigned int upc = user_pc(pc);
3013:src/display.c **** 	    const int n = nLIB(pc);
3014:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3015:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3016:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3017:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3018:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3019:src/display.c **** #ifndef REALBUILD
3020:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3021:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3022:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3023:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3024:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3025:src/display.c **** 	      char *b=buf;
3026:src/display.c **** 	      char *l=LastDisplayedNumber;
3027:src/display.c **** 	      *l++=' ';
3028:src/display.c **** 	      while(*b) {
3029:src/display.c **** 		*l++=*b++;
3030:src/display.c **** 		*l++=' ';
3031:src/display.c **** 	      }
3032:src/display.c **** 	      *l=0;
3033:src/display.c **** 	    }
3034:src/display.c **** #endif
3035:src/display.c **** 	  }
3036:src/display.c **** 	}
3037:src/display.c **** 	set_annunciators();
3038:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3039:src/display.c **** 	  ShowRPN = 0;
3040:src/display.c **** 	  dot(RPN, 0);
3041:src/display.c **** 	}
3042:src/display.c **** 	// disp_temp disables the <- key
3043:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3044:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3045:src/display.c **** 
3046:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3047:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3048:src/display.c **** 	  annunciators();
3049:src/display.c ****  	State2.hms = 0;
3050:src/display.c **** #else
3051:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3052:src/display.c **** 	  annunciators();
3053:src/display.c **** #endif
3054:src/display.c **** 
3055:src/display.c ****       finish:
3056:src/display.c **** 	State2.version = 0;
3057:src/display.c **** 	State2.disp_as_alpha = 0;
3058:src/display.c **** 	State2.smode = SDISP_NORMAL;
3059:src/display.c **** 	State2.invalid_disp = 0;
3060:src/display.c **** 	ShowRegister = regX_idx;
3061:src/display.c **** 	DispMsg = CNULL;
3062:src/display.c **** 	DispPlot = 0;
3063:src/display.c **** 	State2.disp_small = 0;
3064:src/display.c **** 	finish_display();
3065:src/display.c **** 	no_status_top = 0;
3066:src/display.c **** #ifdef CONSOLE
3067:src/display.c **** 	JustDisplayed = 1;
3068:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 69


3069:src/display.c ****       }
3070:src/display.c **** #else
3071:src/display.c ****       /*
3072:src/display.c ****        *  Update the display
3073:src/display.c ****        */
3074:src/display.c ****       void display(void) {
3075:src/display.c **** 	int i, j;
3076:src/display.c **** 	char buf[40], *bp = buf;
3077:src/display.c **** 	const char *p;
3078:src/display.c **** 	int annuc = 0;
3079:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
3080:src/display.c **** 	int skip = 0;
3081:src/display.c **** 	int x_disp = 0;
3082:src/display.c **** 	const int shift = cur_shift();
3083:src/display.c **** 
3084:src/display.c **** 
3085:src/display.c **** 
3086:src/display.c **** 	if (State2.disp_freeze) {
3087:src/display.c **** 	  State2.disp_freeze = 0;
3088:src/display.c **** 	  State2.disp_temp = 1;
3089:src/display.c **** #ifdef CONSOLE
3090:src/display.c **** 	  JustDisplayed = 1;
3091:src/display.c **** #endif
3092:src/display.c **** 	  ShowRPN = 0;
3093:src/display.c **** 	  return;
3094:src/display.c **** 	}
3095:src/display.c **** 
3096:src/display.c **** 	if (WasDataEntry) {
3097:src/display.c **** #if defined(QTGUI) || defined(IOS)
3098:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3099:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
3100:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
3101:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
3102:src/display.c **** #endif
3103:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3104:src/display.c **** 
3105:src/display.c **** 	  // Erase 7-segment display
3106:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3107:src/display.c **** 	    clr_dot(i);
3108:src/display.c **** 	  }
3109:src/display.c **** 	  goto only_update_x;
3110:src/display.c **** 	}
3111:src/display.c **** 
3112:src/display.c **** 	// Clear display
3113:src/display.c **** 	reset_disp();
3114:src/display.c **** 
3115:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3116:src/display.c **** 	if (State2.cmplx  && !cata) {
3117:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3118:src/display.c **** 	  set_status(buf);
3119:src/display.c **** 	}
3120:src/display.c **** 	if (State2.version) {
3121:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3122:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3123:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3124:src/display.c **** #ifndef REALBUILD
3125:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
ARM GAS  /tmp/cchf4YwX.s 			page 70


3126:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3127:src/display.c **** #endif
3128:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3129:src/display.c **** 	  set_status(vers);
3130:src/display.c **** 	  skip = 1;
3131:src/display.c **** 	  goto nostk;
3132:src/display.c **** 	} else if (State2.confirm) {
3133:src/display.c **** 	  set_status(S_SURE);
3134:src/display.c **** 	} else if (State2.hyp) {
3135:src/display.c **** 	  bp = scopy(bp, "HYP");
3136:src/display.c **** 	  if (! State2.dot)
3137:src/display.c **** 	    *bp++ = '\235';
3138:src/display.c **** 	  set_status(buf);
3139:src/display.c **** 	} else if (State2.gtodot) {
3140:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3141:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3142:src/display.c **** 	  if (State2.numdigit > 0)
3143:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3144:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3145:src/display.c **** 	  *bp++ = '_';
3146:src/display.c **** 	  set_status(buf);
3147:src/display.c **** 	} else if (State2.rarg) {
3148:src/display.c **** 	  /* Commands with arguments */
3149:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3150:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3151:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3152:src/display.c **** #endif
3153:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3154:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3155:src/display.c **** 	  if (State2.dot) {
3156:src/display.c **** 	    *bp++ = 's';
3157:src/display.c **** 	    *bp++ = '_';
3158:src/display.c **** 	  } else if (shift == SHIFT_F) {
3159:src/display.c **** 	    *bp++ = '\021';
3160:src/display.c **** 	    *bp++ = '_';
3161:src/display.c **** 	  } else {
3162:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3163:src/display.c **** 	       : State2.ind ? 2 
3164:src/display.c **** 	       : num_arg_digits(CmdBase); */
3165:src/display.c **** 	    if (State2.local)
3166:src/display.c **** 	      *bp++ = '.';
3167:src/display.c **** 	    if (State2.numdigit > 0) {
3168:src/display.c **** 	      if (State2.shuffle)
3169:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3170:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3171:src/display.c **** 	      else
3172:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3173:src/display.c **** 	    }
3174:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3175:src/display.c **** 	    *bp++ = '_';
3176:src/display.c **** 	  }
3177:src/display.c **** 	  set_status(buf);
3178:src/display.c **** 	} else if (State2.test != TST_NONE) {
3179:src/display.c **** 	  *bp++ = 'x';
3180:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3181:src/display.c **** 	  *bp++ = '_';
3182:src/display.c **** 	  *bp++ = '?';
ARM GAS  /tmp/cchf4YwX.s 			page 71


3183:src/display.c **** 	  set_status(buf);
3184:src/display.c **** 	} else if (cata) {
3185:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3186:src/display.c **** 	  char b2[16];
3187:src/display.c **** 	  const char *p;
3188:src/display.c **** 
3189:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3190:src/display.c **** 	  p = catcmd(op, b2);
3191:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3192:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3193:src/display.c **** 	  bp = scopy(bp, p);
3194:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3195:src/display.c **** 	    // State2.disp_small = 1;
3196:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3197:src/display.c **** 	      set_digits_string("0 to 255", 0);
3198:src/display.c **** 	    else
3199:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3200:src/display.c **** 	    skip = 1;
3201:src/display.c **** 	  } else if (State2.runmode) {
3202:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3203:src/display.c **** 	      decNumber x, r;
3204:src/display.c **** 	      decimal64 z;
3205:src/display.c **** 
3206:src/display.c **** 	      getX(&x);
3207:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3208:src/display.c **** 		const unsigned int f = argKIND(op);
3209:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3210:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3211:src/display.c **** 		  update_speed(0);
3212:src/display.c **** 		  fp(&r, &x);
3213:src/display.c **** 		}
3214:src/display.c **** 		else
3215:src/display.c **** 		  set_NaN(&r);
3216:src/display.c **** 	      } else
3217:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3218:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3219:src/display.c **** 	      packed_from_number(&z, &r);
3220:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3221:src/display.c **** 	      skip = 1;
3222:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3223:src/display.c **** 	      REGISTER z, *const x = StackBase;
3224:src/display.c **** 	      copyreg(&z, x);
3225:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3226:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3227:src/display.c **** 	      copyreg(x, &z);
3228:src/display.c **** 	      skip = 1;
3229:src/display.c **** 	    }
3230:src/display.c **** 	  }
3231:src/display.c **** 	  set_status(buf);
3232:src/display.c **** 	} else if (State2.multi) {
3233:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3234:src/display.c **** 	  if (State2.numdigit > 0) {
3235:src/display.c **** 	    *bp++ = (char) State2.digval;
3236:src/display.c **** 	    if (State2.numdigit > 1)
3237:src/display.c **** 	      *bp++ = State2.digval2;
3238:src/display.c **** 	  }
3239:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/cchf4YwX.s 			page 72


3240:src/display.c **** 	} else if (State2.status) {
3241:src/display.c **** 	  show_status();
3242:src/display.c **** 	  skip = 1;
3243:src/display.c **** 	} else if (State2.labellist) {
3244:src/display.c **** 	  show_label();
3245:src/display.c **** 	  skip = 1;
3246:src/display.c **** 	} else if (State2.registerlist) {
3247:src/display.c **** 	  show_registers();
3248:src/display.c **** 	  skip = 1;
3249:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3250:src/display.c **** 	    annunciators();
3251:src/display.c **** 	  }
3252:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3253:src/display.c **** 	} else if (State2.disp_as_alpha) {
3254:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3255:src/display.c **** #endif
3256:src/display.c **** 	} else if (State2.runmode) {
3257:src/display.c **** 	  if (DispMsg) { 
3258:src/display.c **** 	    set_status(DispMsg);
3259:src/display.c **** 	  } else if (DispPlot) {
3260:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3261:src/display.c **** 	  } else if (State2.alphas) {
3262:src/display.c **** #if 0
3263:src/display.c **** 	    set_digits_string("AlpHA", 0);
3264:src/display.c **** #endif
3265:src/display.c **** 	    bp = scopy(buf, Alpha);
3266:src/display.c **** 	    j = State2.alpha_pos;
3267:src/display.c **** 	    if (j != 0) {
3268:src/display.c **** 	      i = slen(buf);
3269:src/display.c **** 	      //				
3270:src/display.c **** 	      j *= 6;
3271:src/display.c **** #ifdef BIGGER_DISPLAY
3272:src/display.c **** 	      if ( i - j >= 20 )
3273:src/display.c **** #else
3274:src/display.c **** 	      if ( i - j >= 12 )
3275:src/display.c **** #endif
3276:src/display.c **** 		{
3277:src/display.c **** 		buf[ (i - j) ] = '\0';
3278:src/display.c **** 		set_status_right(buf);
3279:src/display.c **** 		}
3280:src/display.c **** 	      else {
3281:src/display.c **** 		set_status(buf);
3282:src/display.c **** 	      }
3283:src/display.c **** 	    } else {
3284:src/display.c **** 	      if (shift != SHIFT_N) {
3285:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3286:src/display.c **** 		*bp++ = '\0';
3287:src/display.c **** 	      }
3288:src/display.c **** 	      set_status_right(buf);
3289:src/display.c **** 	    }
3290:src/display.c **** 	  } else {
3291:src/display.c **** 	    annuc = 1;
3292:src/display.c **** 	  }
3293:src/display.c **** 	} else {
3294:src/display.c **** #ifndef DM42
3295:src/display.c **** 	  show_progtrace(buf);
3296:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 73


3297:src/display.c **** 	  i = state_pc();
3298:src/display.c **** 	  if (i > 0)
3299:src/display.c **** 	    set_status(prt(getprog(i), buf));
3300:src/display.c **** 	  else
3301:src/display.c **** 	    set_status("");
3302:src/display.c **** 	  set_dot(STO_annun);
3303:src/display.c **** #if 0
3304:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3305:src/display.c **** 	    unsigned short int crc;
3306:src/display.c **** 	    crc = checksum_program();
3307:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3308:src/display.c **** 	    for (i=0; i<4; i++) {
3309:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3310:src/display.c **** 	      crc >>= 4;
3311:src/display.c **** 	      j += SEGS_PER_DIGIT;
3312:src/display.c **** 	    }
3313:src/display.c **** 	    skip = 1;
3314:src/display.c **** 	  }
3315:src/display.c **** 	  else
3316:src/display.c **** #endif
3317:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3318:src/display.c **** 	      annuc = 1;
3319:src/display.c **** 	  goto nostk;
3320:src/display.c **** 	}
3321:src/display.c **** 	show_stack();
3322:src/display.c ****       nostk:	show_flags();
3323:src/display.c **** 	if (!skip) {
3324:src/display.c **** 	  if (State2.runmode) {
3325:src/display.c **** 	  only_update_x:
3326:src/display.c **** 	    p = get_cmdline();
3327:src/display.c **** 	    if (p == NULL || cata) {
3328:src/display.c **** 	      if (ShowRegister != -1) {
3329:src/display.c **** #ifdef INCLUDE_C_LOCK
3330:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3331:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3332:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3333:src/display.c **** 		    SET_POLAR_READY;
3334:src/display.c **** 		  }
3335:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3336:src/display.c **** 		    State2.hms = 0;
3337:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3338:src/display.c **** 		    State2.hms = 1;
3339:src/display.c **** 		  }
3340:src/display.c **** 		  else {
3341:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3342:src/display.c **** 		  }
3343:src/display.c **** 		  x_disp = 1;
3344:src/display.c **** 		}
3345:src/display.c **** 		else {
3346:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3347:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3348:src/display.c **** 		}
3349:src/display.c **** #else
3350:src/display.c **** 
3351:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3352:src/display.c **** 		format_reg(ShowRegister, CNULL);
3353:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 74


3354:src/display.c **** 	      }
3355:src/display.c **** 	      else
3356:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3357:src/display.c **** 	    } else {
3358:src/display.c **** 	      disp_x(p);
3359:src/display.c **** 	      x_disp = 1;
3360:src/display.c **** 	    }
3361:src/display.c **** 	    if (WasDataEntry) {
3362:src/display.c **** 	      goto finish;
3363:src/display.c **** 	    }
3364:src/display.c **** 	  } else {
3365:src/display.c **** 	    unsigned int pc = state_pc();
3366:src/display.c **** 	    unsigned int upc = user_pc(pc);
3367:src/display.c **** 	    const int n = nLIB(pc);
3368:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3369:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3370:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3371:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3372:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3373:src/display.c **** #ifndef REALBUILD
3374:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3375:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3376:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3377:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3378:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3379:src/display.c **** 	      char *b=buf;
3380:src/display.c **** 	      char *l=LastDisplayedNumber;
3381:src/display.c **** 	      *l++=' ';
3382:src/display.c **** 	      while(*b) {
3383:src/display.c **** 		*l++=*b++;
3384:src/display.c **** 		*l++=' ';
3385:src/display.c **** 	      }
3386:src/display.c **** 	      *l=0;
3387:src/display.c **** 	    }
3388:src/display.c **** #endif
3389:src/display.c **** 	  }
3390:src/display.c **** 	}
3391:src/display.c **** 	set_annunciators();
3392:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3393:src/display.c **** 	  ShowRPN = 0;
3394:src/display.c **** 	  dot(RPN, 0);
3395:src/display.c **** 	}
3396:src/display.c **** 	// disp_temp disables the <- key
3397:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3398:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3399:src/display.c **** 
3400:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3401:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3402:src/display.c **** 	  annunciators();
3403:src/display.c ****  	State2.hms = 0;
3404:src/display.c **** #else
3405:src/display.c **** 
3406:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3407:src/display.c **** 	  annunciators();
3408:src/display.c **** 	
3409:src/display.c **** 
3410:src/display.c **** 
ARM GAS  /tmp/cchf4YwX.s 			page 75


3411:src/display.c **** #endif
3412:src/display.c **** 
3413:src/display.c ****       finish:
3414:src/display.c **** 	State2.version = 0;
3415:src/display.c **** 	State2.disp_as_alpha = 0;
3416:src/display.c **** 	State2.smode = SDISP_NORMAL;
3417:src/display.c **** 	State2.invalid_disp = 0;
3418:src/display.c **** 	ShowRegister = regX_idx;
3419:src/display.c **** 	DispMsg = CNULL;
3420:src/display.c **** 	DispPlot = 0;
3421:src/display.c **** 	State2.disp_small = 0;
3422:src/display.c **** 	finish_display();
3423:src/display.c **** #ifdef CONSOLE
3424:src/display.c **** 	JustDisplayed = 1;
3425:src/display.c **** #endif
3426:src/display.c ****       }
3427:src/display.c **** #endif
3428:src/display.c ****       /*
3429:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3430:src/display.c ****        */
3431:src/display.c ****       void frozen_display()
3432:src/display.c ****       {
3433:src/display.c **** 	State2.disp_freeze = 0;
3434:src/display.c **** 	display();
3435:src/display.c **** 	State2.disp_freeze = 1;
3436:src/display.c ****       }
3437:src/display.c **** 
3438:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3439:src/display.c **** 	int glen = *graphic++;
3440:src/display.c **** 	int i, j;
3441:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3442:src/display.c **** 	unsigned long long int mat[6];
3443:src/display.c **** 
3444:src/display.c **** 	xset(mat, 0, sizeof(mat));
3445:src/display.c **** #endif
3446:src/display.c **** #ifndef REALBUILD
3447:src/display.c **** 	forceDispPlot=1;
3448:src/display.c **** #endif
3449:src/display.c **** 	if (glen <= 0)			return;
3450:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3451:src/display.c **** 
3452:src/display.c **** 	for (i=0; i<6; i++)
3453:src/display.c **** 	  for (j=1; j<=glen; j++) {
3454:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3455:src/display.c **** 	    if (graphic[j] & (1 << i))
3456:src/display.c **** 	      mat[i] |= 1LL << j;
3457:src/display.c **** #else
3458:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3459:src/display.c **** #endif
3460:src/display.c **** 	  }
3461:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3462:src/display.c **** 	set_status_grob(mat);
3463:src/display.c **** #endif
3464:src/display.c ****       }
3465:src/display.c **** 
3466:src/display.c **** 
3467:src/display.c ****       /* Take the given string and display as much of it as possible on the top
ARM GAS  /tmp/cchf4YwX.s 			page 76


3468:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3469:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3470:src/display.c ****        * column is almost always blank.
3471:src/display.c ****        */
3472:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3473:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3474:src/display.c ****       }
3475:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3476:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3477:src/display.c ****       }
3478:src/display.c **** 
3479:src/display.c ****       
3480:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3480 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3481:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3481 2 view .LVU201
3482:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3483:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3484:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3484 2 view .LVU202
3485:src/display.c **** #endif
3486:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3486 2 view .LVU203
3487:src/display.c **** 	int i, j;
 686              		.loc 1 3487 2 view .LVU204
3488:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3488 2 view .LVU205
3480:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3480 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3489:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3490:src/display.c **** 	unsigned long long int mat[6];
3491:src/display.c **** 
3492:src/display.c **** 	xset(mat, 0, sizeof(mat));
3493:src/display.c **** #endif
3494:src/display.c **** #ifndef REALBUILD
3495:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3495 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3480:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3480 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3488:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/cchf4YwX.s 			page 77


 705              		.loc 1 3488 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3480:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3480 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3488:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3488 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3488:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3488 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3495 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3495 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3488:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3488 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3495 2 is_stmt 1 view .LVU216
3488:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3488 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3480:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3480 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3495 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3496:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3497:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3497 2 is_stmt 1 view .LVU220
 734              		.loc 1 3497 14 view .LVU221
 735              		.loc 1 3497 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3497 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3497 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3497 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3498:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3498 4 is_stmt 1 view .LVU226
 749              		.loc 1 3498 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3498 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cchf4YwX.s 			page 78


 753              		.loc 1 3498 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3498 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3499:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3500:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3501:src/display.c **** 	      ++i;
3502:src/display.c **** 	  }
3503:src/display.c **** 	  else {
3504:src/display.c **** 	    ++i;
3505:src/display.c **** 	  }
3506:src/display.c **** 	}
3507:src/display.c **** #endif
3508:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3508 2 is_stmt 1 view .LVU231
3509:src/display.c **** #endif
3510:src/display.c **** #ifdef RP_PREFIX
3511:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3511 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3508:src/display.c **** #endif
 763              		.loc 1 3508 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3511 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3512:src/display.c **** #endif
3513:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3514:src/display.c **** 	findlengths(posns, smallp);
3515:src/display.c **** #endif
3516:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3516 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3508:src/display.c **** #endif
 770              		.loc 1 3508 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3511:src/display.c **** #endif
 772              		.loc 1 3511 2 is_stmt 1 view .LVU237
 773              		.loc 1 3516 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3516 8 view .LVU239
 776              		.loc 1 3516 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3516 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3486:src/display.c **** 	int i, j;
 781              		.loc 1 3486 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB197:
3517:src/display.c **** 	  int c;
3518:src/display.c **** 	  int width;
3519:src/display.c **** 	  unsigned char cmap[6];
3520:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/cchf4YwX.s 			page 79


3521:src/display.c **** 	  int real_width;
3522:src/display.c **** 	  int current_smallp;
3523:src/display.c **** 
3524:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3525:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3526:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3527:src/display.c **** 	  //           01 -> (not used)
3528:src/display.c **** 	  //           10 -> use big font
3529:src/display.c **** 	  //           11 -> use small font
3530:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3531:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3531 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE197:
3516:src/display.c **** 	  int c;
 787              		.loc 1 3516 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3484:src/display.c **** #endif
 790              		.loc 1 3484 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB206:
3517:src/display.c **** 	  int c;
 794              		.loc 1 3517 4 is_stmt 1 view .LVU246
3518:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3518 4 view .LVU247
3519:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3519 4 view .LVU248
3521:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3521 4 view .LVU249
3522:src/display.c **** 
 798              		.loc 1 3522 4 view .LVU250
 799              		.loc 1 3531 4 view .LVU251
 800              		.loc 1 3531 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3532:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3532 6 is_stmt 1 view .LVU253
 805              		.loc 1 3532 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3533:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3533 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3532:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3532 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3533 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3534:src/display.c **** 	    default:
ARM GAS  /tmp/cchf4YwX.s 			page 80


3535:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3536:src/display.c **** 	      break;
3537:src/display.c **** 	    case 0x40:	current_smallp = 0;
3538:src/display.c **** 	      break;
3539:src/display.c **** 	    case 0x60:	current_smallp = 1;
3540:src/display.c **** 	      break;
3541:src/display.c **** 	    }
3542:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3542 6 view .LVU258
 820              		.loc 1 3542 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3542 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3543:src/display.c **** 	    str += 3;
 831              		.loc 1 3543 6 is_stmt 1 discriminator 4 view .LVU261
3544:src/display.c **** 
3545:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3545 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3543:src/display.c **** 	    str += 3;
 836              		.loc 1 3543 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3545 6 is_stmt 1 discriminator 4 view .LVU264
3546:src/display.c **** 	  } else {
3547:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3548:src/display.c **** 	    real_width = width = charlengths(c);
3549:src/display.c **** 	    current_smallp = smallp;
3550:src/display.c **** 	  }
3551:src/display.c **** 
3552:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3552 4 discriminator 4 view .LVU265
 843              		.loc 1 3552 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3552 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3552 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3553:src/display.c **** 	    break;
3554:src/display.c **** 
3555:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3555 4 is_stmt 1 view .LVU269
 853              		.loc 1 3555 7 is_stmt 0 view .LVU270
ARM GAS  /tmp/cchf4YwX.s 			page 81


 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3556:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3556 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3555:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3555 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3556 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3557:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3557 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3558:src/display.c **** 	  }
3559:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3559 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3560:src/display.c **** #else
3561:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3562:src/display.c **** 
3563:src/display.c **** 	  //cmap = &charset[c][0];
3564:src/display.c **** 	  width = charlengths(c);
3565:src/display.c **** 
3566:src/display.c **** 	  if (x + width > b_w+1)
3567:src/display.c **** 	    break;
3568:src/display.c **** 
3569:src/display.c **** 	  /* Decode the packed character bytes */
3570:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3571:src/display.c **** #endif
3572:src/display.c **** 
3573:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3573 4 view .LVU276
 877              		.loc 1 3573 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3573 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3574:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3574 16 is_stmt 1 view .LVU279
 889              		.loc 1 3574 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
ARM GAS  /tmp/cchf4YwX.s 			page 82


 891 00d2 20DD     		ble	.L86
3575:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3575 8 is_stmt 1 view .LVU281
 893              		.loc 1 3575 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3574:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3574 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3574:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3574 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB198:
 907              	.LBB199:
 346:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 346 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 346:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 346 11 view .LVU286
 912              	.LBE199:
 913              	.LBE198:
 914              		.loc 1 3575 8 is_stmt 1 view .LVU287
3574:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3574 25 view .LVU288
3574:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3574 16 view .LVU289
3574:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3574 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3575 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3576:src/display.c **** 		break;
3577:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3578:src/display.c **** 	      if (cmap[i] & (1 << j))
3579:src/display.c **** 		mat[i] |= 1LL << (x+j);
3580:src/display.c **** #else
3581:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3581 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB203:
 929              	.LBI198:
 345:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 345 6 discriminator 2 view .LVU293
 931              	.LBB200:
 346:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/cchf4YwX.s 			page 83


 932              		.loc 1 346 3 discriminator 2 view .LVU294
 346:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 346 11 discriminator 2 view .LVU295
 347:src/display.c **** }
 934              		.loc 1 347 8 discriminator 2 view .LVU296
 935              	.LBE200:
 936              	.LBE203:
 937              		.loc 1 3581 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3581 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB204:
 942              	.LBB201:
 346:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 346 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 346:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 346 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 346:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 346 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE201:
 950              	.LBE204:
3574:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3574 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB205:
 955              	.LBB202:
 347:src/display.c **** }
 956              		.loc 1 347 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 347:src/display.c **** }
 959              		.loc 1 347 8 view .LVU304
 960              	.LBE202:
 961              	.LBE205:
3575:src/display.c **** 		break;
 962              		.loc 1 3575 8 is_stmt 1 view .LVU305
3574:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3574 25 view .LVU306
3574:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3574 16 view .LVU307
3574:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3574 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3573:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3573 19 is_stmt 1 view .LVU309
3573:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3573 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
ARM GAS  /tmp/cchf4YwX.s 			page 84


3573:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3573 14 is_stmt 1 view .LVU311
3573:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3573 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3582:src/display.c **** #endif
3583:src/display.c **** 	    }
3584:src/display.c **** 	  x += width;
 980              		.loc 1 3584 4 is_stmt 1 view .LVU313
 981              	.LBE206:
3516:src/display.c **** 	  int c;
 982              		.loc 1 3516 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB207:
 986              		.loc 1 3584 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3584 6 view .LVU316
 990              	.LBE207:
3516:src/display.c **** 	  int c;
 991              		.loc 1 3516 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3516:src/display.c **** 	  int c;
 993              		.loc 1 3516 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3516:src/display.c **** 	  int c;
 996              		.loc 1 3516 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB208:
3531:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3531 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE208:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB209:
3517:src/display.c **** 	  int width;
 1005              		.loc 1 3517 4 is_stmt 1 view .LVU321
3518:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3518 4 view .LVU322
3519:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3519 4 view .LVU323
3521:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3521 4 view .LVU324
3522:src/display.c **** 
 1009              		.loc 1 3522 4 view .LVU325
3531:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3531 4 view .LVU326
3531:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3531 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
ARM GAS  /tmp/cchf4YwX.s 			page 85


3547:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3547 6 is_stmt 1 view .LVU328
3547:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3547 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3548:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3548 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3547:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3547 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3548:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3548 6 is_stmt 1 view .LVU332
3548:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3548 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3548:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3548 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3552:src/display.c **** 	    break;
 1034              		.loc 1 3552 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3548:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3548 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3549:src/display.c **** 	  }
 1039              		.loc 1 3549 6 is_stmt 1 view .LVU337
3552:src/display.c **** 	    break;
 1040              		.loc 1 3552 4 view .LVU338
3552:src/display.c **** 	    break;
 1041              		.loc 1 3552 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3552:src/display.c **** 	    break;
 1044              		.loc 1 3552 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3552:src/display.c **** 	    break;
 1049              		.loc 1 3552 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3552:src/display.c **** 	    break;
 1053              		.loc 1 3552 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
ARM GAS  /tmp/cchf4YwX.s 			page 86


3552:src/display.c **** 	    break;
 1057              		.loc 1 3552 7 view .LVU343
 1058              	.LBE209:
3585:src/display.c **** 	}
3586:src/display.c **** 
3587:src/display.c **** 
3588:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3589:src/display.c **** 	set_status_grob(mat);
3590:src/display.c **** #else
3591:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3591 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3591 20 view .LVU345
 1061              		.loc 1 3591 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3592:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3592 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3591:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3591 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3592 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3591:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3591 27 is_stmt 1 discriminator 3 view .LVU350
3591:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3591 20 discriminator 3 view .LVU351
3591:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3591 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3593:src/display.c **** #endif
3594:src/display.c ****       }
 1081              		.loc 1 3594 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB210:
3539:src/display.c **** 	      break;
 1091              		.loc 1 3539 17 is_stmt 1 view .LVU354
3540:src/display.c **** 	    }
 1092              		.loc 1 3540 8 view .LVU355
3542:src/display.c **** 	    str += 3;
 1093              		.loc 1 3542 6 view .LVU356
3542:src/display.c **** 	    str += 3;
 1094              		.loc 1 3542 10 is_stmt 0 view .LVU357
ARM GAS  /tmp/cchf4YwX.s 			page 87


 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3539:src/display.c **** 	      break;
 1097              		.loc 1 3539 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3537:src/display.c **** 	      break;
 1104              		.loc 1 3537 17 is_stmt 1 view .LVU359
3538:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3538 8 view .LVU360
3542:src/display.c **** 	    str += 3;
 1106              		.loc 1 3542 6 view .LVU361
3542:src/display.c **** 	    str += 3;
 1107              		.loc 1 3542 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3537:src/display.c **** 	      break;
 1110              		.loc 1 3537 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3537:src/display.c **** 	      break;
 1116              		.loc 1 3537 32 view .LVU364
 1117              	.LBE210:
3499:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3499 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3500:src/display.c **** 	      ++i;
 1123              		.loc 1 3500 6 view .LVU366
3500:src/display.c **** 	      ++i;
 1124              		.loc 1 3500 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB211:
3500:src/display.c **** 	      ++i;
 1133              		.loc 1 3500 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3500:src/display.c **** 	      ++i;
 1136              		.loc 1 3500 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
ARM GAS  /tmp/cchf4YwX.s 			page 88


 1140              	.L115:
3500:src/display.c **** 	      ++i;
 1141              		.loc 1 3500 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE211:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.text.set_exp,"ax",%progbits
 1155              		.align	1
 1156              		.p2align 2,,3
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
 1162              	set_exp:
 1163              	.LVL106:
 1164              	.LFB14:
 448:src/display.c ****   union {
 1165              		.loc 1 448 52 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 449:src/display.c ****     char buf[4];
 1169              		.loc 1 449 3 view .LVU372
 453:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1170              		.loc 1 453 3 view .LVU373
 455:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1171              		.loc 1 455 3 view .LVU374
 461:src/display.c **** #  endif
 1172              		.loc 1 461 3 view .LVU375
 470:src/display.c ****   if (exp < 0) {
 1173              		.loc 1 470 3 view .LVU376
 448:src/display.c ****   union {
 1174              		.loc 1 448 52 is_stmt 0 view .LVU377
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              		.cfi_def_cfa_offset 24
 1177              		.cfi_offset 4, -24
 1178              		.cfi_offset 5, -20
 1179              		.cfi_offset 6, -16
 1180              		.cfi_offset 7, -12
 1181              		.cfi_offset 8, -8
 1182              		.cfi_offset 14, -4
 471:src/display.c ****     negative = 1;
 1183              		.loc 1 471 6 view .LVU378
 1184 0004 051E     		subs	r5, r0, #0
 448:src/display.c ****   union {
 1185              		.loc 1 448 52 view .LVU379
 1186 0006 82B0     		sub	sp, sp, #8
 1187              		.cfi_def_cfa_offset 32
 448:src/display.c ****   union {
ARM GAS  /tmp/cchf4YwX.s 			page 89


 1188              		.loc 1 448 52 view .LVU380
 1189 0008 0F46     		mov	r7, r1
 1190              	.LVL107:
 471:src/display.c ****     negative = 1;
 1191              		.loc 1 471 3 is_stmt 1 view .LVU381
 471:src/display.c ****     negative = 1;
 1192              		.loc 1 471 6 is_stmt 0 view .LVU382
 1193 000a 67DB     		blt	.L153
 476:src/display.c **** #endif
 1194              		.loc 1 476 13 view .LVU383
 1195 000c 424B     		ldr	r3, .L155
 1196 000e EC17     		asrs	r4, r5, #31
 1197 0010 83FB0513 		smull	r1, r3, r3, r5
 1198              	.LVL108:
 476:src/display.c **** #endif
 1199              		.loc 1 476 13 view .LVU384
 1200 0014 C4EBA314 		rsb	r4, r4, r3, asr #6
 470:src/display.c ****   if (exp < 0) {
 1201              		.loc 1 470 12 view .LVU385
 1202 0018 07F00208 		and	r8, r7, #2
 1203              	.LVL109:
 476:src/display.c **** #endif
 1204              		.loc 1 476 3 is_stmt 1 view .LVU386
 478:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1205              		.loc 1 478 3 view .LVU387
 478:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1206              		.loc 1 478 6 is_stmt 0 view .LVU388
 1207 001c 002A     		cmp	r2, #0
 1208 001e 6CD0     		beq	.L126
 481:src/display.c **** #else
 1209              		.loc 1 481 5 is_stmt 1 view .LVU389
 481:src/display.c **** #else
 1210              		.loc 1 481 8 is_stmt 0 view .LVU390
 1211 0020 3CB1     		cbz	r4, .L127
 485:src/display.c **** 	// No exponent separator for large -ve exponents
 1212              		.loc 1 485 2 is_stmt 1 view .LVU391
 485:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 485 5 is_stmt 0 view .LVU392
 1214 0022 B8F1000F 		cmp	r8, #0
 1215 0026 0CD1     		bne	.L124
 485:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 485 17 is_stmt 1 discriminator 1 view .LVU393
 485:src/display.c **** 	// No exponent separator for large -ve exponents
 1217              		.loc 1 485 21 is_stmt 0 discriminator 1 view .LVU394
 1218 0028 1446     		mov	r4, r2
 1219              	.LVL110:
 485:src/display.c **** 	// No exponent separator for large -ve exponents
 1220              		.loc 1 485 24 discriminator 1 view .LVU395
 1221 002a 3A23     		movs	r3, #58
 1222              	.LVL111:
 485:src/display.c **** 	// No exponent separator for large -ve exponents
 1223              		.loc 1 485 24 discriminator 1 view .LVU396
 1224 002c 04F8013B 		strb	r3, [r4], #1
 1225              	.LVL112:
 492:src/display.c ****     }
 1226              		.loc 1 492 7 is_stmt 1 discriminator 1 view .LVU397
 1227 0030 0BE0     		b	.L128
ARM GAS  /tmp/cchf4YwX.s 			page 90


 1228              	.LVL113:
 1229              	.L127:
 488:src/display.c **** #else
 1230              		.loc 1 488 12 view .LVU398
 488:src/display.c **** #else
 1231              		.loc 1 488 16 is_stmt 0 view .LVU399
 1232 0032 1446     		mov	r4, r2
 1233              	.LVL114:
 488:src/display.c **** #else
 1234              		.loc 1 488 19 view .LVU400
 1235 0034 6523     		movs	r3, #101
 1236              	.LVL115:
 488:src/display.c **** #else
 1237              		.loc 1 488 19 view .LVU401
 1238 0036 04F8013B 		strb	r3, [r4], #1
 1239              	.LVL116:
 492:src/display.c ****     }
 1240              		.loc 1 492 7 is_stmt 1 view .LVU402
 492:src/display.c ****     }
 1241              		.loc 1 492 10 is_stmt 0 view .LVU403
 1242 003a B8F1000F 		cmp	r8, #0
 1243 003e 04D0     		beq	.L128
 488:src/display.c **** #else
 1244              		.loc 1 488 16 view .LVU404
 1245 0040 2246     		mov	r2, r4
 1246              	.LVL117:
 1247              	.L124:
 492:src/display.c ****     }
 1248              		.loc 1 492 21 is_stmt 1 discriminator 1 view .LVU405
 492:src/display.c ****     }
 1249              		.loc 1 492 25 is_stmt 0 discriminator 1 view .LVU406
 1250 0042 1446     		mov	r4, r2
 1251              	.LVL118:
 492:src/display.c ****     }
 1252              		.loc 1 492 28 discriminator 1 view .LVU407
 1253 0044 2D23     		movs	r3, #45
 1254 0046 04F8013B 		strb	r3, [r4], #1
 1255              	.LVL119:
 1256              	.L128:
 540:src/display.c **** #endif
 1257              		.loc 1 540 7 is_stmt 1 view .LVU408
 1258 004a 01AE     		add	r6, sp, #4
 1259 004c 3046     		mov	r0, r6
 1260 004e 0422     		movs	r2, #4
 1261 0050 0021     		movs	r1, #0
 1262 0052 FFF7FEFF 		bl	xset
 1263              	.LVL120:
 542:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1264              		.loc 1 542 7 view .LVU409
 542:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1265              		.loc 1 542 10 is_stmt 0 view .LVU410
 1266 0056 17F0050F 		tst	r7, #5
 1267 005a 33D1     		bne	.L133
 1268              	.L135:
 563:src/display.c ****     no_number:
 1269              		.loc 1 563 2 is_stmt 1 view .LVU411
 1270 005c 2946     		mov	r1, r5
ARM GAS  /tmp/cchf4YwX.s 			page 91


 1271 005e 3046     		mov	r0, r6
 1272 0060 FFF7FEFF 		bl	num_arg
 1273              	.LVL121:
 565:src/display.c ****     }
 1274              		.loc 1 565 7 view .LVU412
 1275 0064 2146     		mov	r1, r4
 1276 0066 3046     		mov	r0, r6
 1277 0068 FFF7FEFF 		bl	set_exp_digits_string
 1278              	.LVL122:
 566:src/display.c **** 
 1279              		.loc 1 566 5 is_stmt 0 view .LVU413
 1280 006c 02B0     		add	sp, sp, #8
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 24
 1283              		@ sp needed
 1284 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1285              	.LVL123:
 1286              	.L136:
 1287              		.cfi_restore_state
 472:src/display.c ****     exp = -exp;
 1288              		.loc 1 472 14 view .LVU414
 1289 0072 4FF00108 		mov	r8, #1
 1290              	.LVL124:
 1291              	.L123:
 495:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1292              		.loc 1 495 21 is_stmt 1 view .LVU415
 1293              	.LBB212:
 1294              	.LBI212:
 314:src/display.c **** {
 1295              		.loc 1 314 13 view .LVU416
 1296              	.LBB213:
 316:src/display.c ****   set_dot(EXP_SIGN);
 1297              		.loc 1 316 3 view .LVU417
 316:src/display.c ****   set_dot(EXP_SIGN);
 1298              		.loc 1 316 27 is_stmt 0 view .LVU418
 1299 0076 294B     		ldr	r3, .L155+4
 1300 0078 2D22     		movs	r2, #45
 1301              	.LVL125:
 317:src/display.c **** }
 1302              		.loc 1 317 3 view .LVU419
 1303 007a 8220     		movs	r0, #130
 316:src/display.c ****   set_dot(EXP_SIGN);
 1304              		.loc 1 316 27 view .LVU420
 1305 007c 1A70     		strb	r2, [r3]
 317:src/display.c **** }
 1306              		.loc 1 317 3 is_stmt 1 view .LVU421
 1307 007e FFF7FEFF 		bl	set_dot
 1308              	.LVL126:
 1309              	.L129:
 317:src/display.c **** }
 1310              		.loc 1 317 3 is_stmt 0 view .LVU422
 1311              	.LBE213:
 1312              	.LBE212:
 497:src/display.c **** #else
 1313              		.loc 1 497 7 is_stmt 1 view .LVU423
 497:src/display.c **** #else
 1314              		.loc 1 497 10 is_stmt 0 view .LVU424
ARM GAS  /tmp/cchf4YwX.s 			page 92


 1315 0082 002C     		cmp	r4, #0
 1316 0084 E1D0     		beq	.L128
 501:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1317              		.loc 1 501 4 is_stmt 1 view .LVU425
 515:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1318              		.loc 1 515 6 view .LVU426
 515:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1319              		.loc 1 515 23 is_stmt 0 view .LVU427
 1320 0086 264B     		ldr	r3, .L155+8
 515:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1321              		.loc 1 515 10 view .LVU428
 1322 0088 03FB0455 		mla	r5, r3, r4, r5
 1323              	.LVL127:
 517:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1324              		.loc 1 517 6 is_stmt 1 view .LVU429
 517:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1325              		.loc 1 517 9 is_stmt 0 view .LVU430
 1326 008c FB06     		lsls	r3, r7, #27
 1327 008e 0AD5     		bpl	.L130
 1328              	.LBB214:
 521:src/display.c **** 		// Clear digits and separators
 1329              		.loc 1 521 15 view .LVU431
 1330 0090 4F26     		movs	r6, #79
 1331              	.L131:
 1332              	.LVL128:
 523:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1333              		.loc 1 523 3 is_stmt 1 discriminator 3 view .LVU432
 1334 0092 3046     		mov	r0, r6
 521:src/display.c **** 		// Clear digits and separators
 1335              		.loc 1 521 66 is_stmt 0 discriminator 3 view .LVU433
 1336 0094 0136     		adds	r6, r6, #1
 1337              	.LVL129:
 523:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1338              		.loc 1 523 3 discriminator 3 view .LVU434
 1339 0096 FFF7FEFF 		bl	clr_dot
 1340              	.LVL130:
 521:src/display.c **** 		// Clear digits and separators
 1341              		.loc 1 521 66 is_stmt 1 discriminator 3 view .LVU435
 521:src/display.c **** 		// Clear digits and separators
 1342              		.loc 1 521 41 discriminator 3 view .LVU436
 521:src/display.c **** 		// Clear digits and separators
 1343              		.loc 1 521 8 is_stmt 0 discriminator 3 view .LVU437
 1344 009a 632E     		cmp	r6, #99
 1345 009c F9D1     		bne	.L131
 524:src/display.c **** 	    }
 1346              		.loc 1 524 8 is_stmt 1 view .LVU438
 1347 009e 3E21     		movs	r1, #62
 1348 00a0 5120     		movs	r0, #81
 1349 00a2 FFF7FEFF 		bl	set_dig
 1350              	.LVL131:
 1351              	.L130:
 524:src/display.c **** 	    }
 1352              		.loc 1 524 8 is_stmt 0 view .LVU439
 1353              	.LBE214:
 527:src/display.c **** 	      CLR_EXP_SIGN;
 1354              		.loc 1 527 6 is_stmt 1 view .LVU440
 527:src/display.c **** 	      CLR_EXP_SIGN;
ARM GAS  /tmp/cchf4YwX.s 			page 93


 1355              		.loc 1 527 9 is_stmt 0 view .LVU441
 1356 00a6 B8F1000F 		cmp	r8, #0
 1357 00aa 2AD1     		bne	.L154
 1358              	.L132:
 531:src/display.c **** 	    flags = 1;
 1359              		.loc 1 531 6 is_stmt 1 view .LVU442
 1360 00ac 04F13001 		add	r1, r4, #48
 1361 00b0 6320     		movs	r0, #99
 540:src/display.c **** #endif
 1362              		.loc 1 540 7 is_stmt 0 view .LVU443
 1363 00b2 01AE     		add	r6, sp, #4
 531:src/display.c **** 	    flags = 1;
 1364              		.loc 1 531 6 view .LVU444
 1365 00b4 FFF7FEFF 		bl	set_dig
 1366              	.LVL132:
 532:src/display.c **** 	  }
 1367              		.loc 1 532 6 is_stmt 1 view .LVU445
 540:src/display.c **** #endif
 1368              		.loc 1 540 7 view .LVU446
 1369 00b8 3046     		mov	r0, r6
 1370 00ba 0422     		movs	r2, #4
 1371 00bc 0021     		movs	r1, #0
 1372 00be FFF7FEFF 		bl	xset
 1373              	.LVL133:
 542:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1374              		.loc 1 542 7 view .LVU447
 540:src/display.c **** #endif
 1375              		.loc 1 540 7 is_stmt 0 view .LVU448
 1376 00c2 0024     		movs	r4, #0
 1377              	.LVL134:
 1378              	.L133:
 543:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1379              		.loc 1 543 2 is_stmt 1 view .LVU449
 1380 00c4 2946     		mov	r1, r5
 1381 00c6 0322     		movs	r2, #3
 1382 00c8 3046     		mov	r0, r6
 1383 00ca FFF7FEFF 		bl	num_arg_0
 1384              	.LVL135:
 565:src/display.c ****     }
 1385              		.loc 1 565 7 view .LVU450
 1386 00ce 2146     		mov	r1, r4
 1387 00d0 3046     		mov	r0, r6
 1388 00d2 FFF7FEFF 		bl	set_exp_digits_string
 1389              	.LVL136:
 566:src/display.c **** 
 1390              		.loc 1 566 5 is_stmt 0 view .LVU451
 1391 00d6 02B0     		add	sp, sp, #8
 1392              		.cfi_remember_state
 1393              		.cfi_def_cfa_offset 24
 1394              		@ sp needed
 1395 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1396              	.LVL137:
 1397              	.L153:
 1398              		.cfi_restore_state
 472:src/display.c ****     exp = -exp;
 1399              		.loc 1 472 5 is_stmt 1 view .LVU452
 473:src/display.c ****   }
ARM GAS  /tmp/cchf4YwX.s 			page 94


 1400              		.loc 1 473 5 view .LVU453
 476:src/display.c **** #endif
 1401              		.loc 1 476 13 is_stmt 0 view .LVU454
 1402 00dc 0E4C     		ldr	r4, .L155
 473:src/display.c ****   }
 1403              		.loc 1 473 9 view .LVU455
 1404 00de 6D42     		rsbs	r5, r5, #0
 1405              	.LVL138:
 476:src/display.c **** #endif
 1406              		.loc 1 476 3 is_stmt 1 view .LVU456
 476:src/display.c **** #endif
 1407              		.loc 1 476 13 is_stmt 0 view .LVU457
 1408 00e0 A4FB0534 		umull	r3, r4, r4, r5
 1409 00e4 A409     		lsrs	r4, r4, #6
 1410              	.LVL139:
 478:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1411              		.loc 1 478 3 is_stmt 1 view .LVU458
 478:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1412              		.loc 1 478 6 is_stmt 0 view .LVU459
 1413 00e6 002A     		cmp	r2, #0
 1414 00e8 C3D0     		beq	.L136
 481:src/display.c **** #else
 1415              		.loc 1 481 5 is_stmt 1 view .LVU460
 481:src/display.c **** #else
 1416              		.loc 1 481 8 is_stmt 0 view .LVU461
 1417 00ea 002C     		cmp	r4, #0
 1418 00ec A9D1     		bne	.L124
 488:src/display.c **** #else
 1419              		.loc 1 488 12 is_stmt 1 view .LVU462
 488:src/display.c **** #else
 1420              		.loc 1 488 16 is_stmt 0 view .LVU463
 1421 00ee 1446     		mov	r4, r2
 1422              	.LVL140:
 488:src/display.c **** #else
 1423              		.loc 1 488 19 view .LVU464
 1424 00f0 6523     		movs	r3, #101
 1425 00f2 04F8013B 		strb	r3, [r4], #1
 1426              	.LVL141:
 492:src/display.c ****     }
 1427              		.loc 1 492 7 is_stmt 1 view .LVU465
 488:src/display.c **** #else
 1428              		.loc 1 488 16 is_stmt 0 view .LVU466
 1429 00f6 2246     		mov	r2, r4
 1430 00f8 A3E7     		b	.L124
 1431              	.LVL142:
 1432              	.L126:
 495:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1433              		.loc 1 495 7 is_stmt 1 view .LVU467
 495:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1434              		.loc 1 495 10 is_stmt 0 view .LVU468
 1435 00fa B8F1000F 		cmp	r8, #0
 1436 00fe C0D0     		beq	.L129
 1437 0100 B9E7     		b	.L123
 1438              	.LVL143:
 1439              	.L154:
 528:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1440              		.loc 1 528 8 is_stmt 1 view .LVU469
ARM GAS  /tmp/cchf4YwX.s 			page 95


 1441              	.LBB215:
 1442              	.LBI215:
 320:src/display.c **** {
 1443              		.loc 1 320 13 view .LVU470
 1444              	.LBB216:
 322:src/display.c ****   clr_dot(EXP_SIGN);
 1445              		.loc 1 322 3 view .LVU471
 322:src/display.c ****   clr_dot(EXP_SIGN);
 1446              		.loc 1 322 27 is_stmt 0 view .LVU472
 1447 0102 064B     		ldr	r3, .L155+4
 1448 0104 2022     		movs	r2, #32
 323:src/display.c **** }
 1449              		.loc 1 323 3 view .LVU473
 1450 0106 8220     		movs	r0, #130
 322:src/display.c ****   clr_dot(EXP_SIGN);
 1451              		.loc 1 322 27 view .LVU474
 1452 0108 1A70     		strb	r2, [r3]
 323:src/display.c **** }
 1453              		.loc 1 323 3 is_stmt 1 view .LVU475
 1454 010a FFF7FEFF 		bl	clr_dot
 1455              	.LVL144:
 1456              	.LBE216:
 1457              	.LBE215:
 529:src/display.c **** 	    }
 1458              		.loc 1 529 8 view .LVU476
 1459 010e 2D21     		movs	r1, #45
 1460 0110 5A20     		movs	r0, #90
 1461 0112 FFF7FEFF 		bl	set_dig
 1462              	.LVL145:
 1463 0116 C9E7     		b	.L132
 1464              	.L156:
 1465              		.align	2
 1466              	.L155:
 1467 0118 D34D6210 		.word	274877907
 1468 011c 00000000 		.word	LastDisplayedExponent
 1469 0120 18FCFFFF 		.word	-1000
 1470              		.cfi_endproc
 1471              	.LFE14:
 1473              		.section	.text.set_separator.part.0,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_separator.part.0:
 1482              	.LVL146:
 1483              	.LFB48:
 373:src/display.c ****   if (sep == SEP_NONE)
 1484              		.loc 1 373 14 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 380:src/display.c ****     set_dot(posn+7);
 1488              		.loc 1 380 5 view .LVU478
 373:src/display.c ****   if (sep == SEP_NONE)
 1489              		.loc 1 373 14 is_stmt 0 view .LVU479
ARM GAS  /tmp/cchf4YwX.s 			page 96


 1490 0000 70B5     		push	{r4, r5, r6, lr}
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 4, -16
 1493              		.cfi_offset 5, -12
 1494              		.cfi_offset 6, -8
 1495              		.cfi_offset 14, -4
 373:src/display.c ****   if (sep == SEP_NONE)
 1496              		.loc 1 373 14 view .LVU480
 1497 0002 0546     		mov	r5, r0
 1498 0004 0E46     		mov	r6, r1
 381:src/display.c ****     if (sep == SEP_COMMA)
 1499              		.loc 1 381 5 view .LVU481
 1500 0006 0238     		subs	r0, r0, #2
 1501              	.LVL147:
 381:src/display.c ****     if (sep == SEP_COMMA)
 1502              		.loc 1 381 5 view .LVU482
 1503 0008 FFF7FEFF 		bl	set_dot
 1504              	.LVL148:
 382:src/display.c ****       set_dot(posn+8);
 1505              		.loc 1 382 8 view .LVU483
 1506 000c 012E     		cmp	r6, #1
 380:src/display.c ****     set_dot(posn+7);
 1507              		.loc 1 380 10 view .LVU484
 1508 000e A5F10904 		sub	r4, r5, #9
 1509              	.LVL149:
 381:src/display.c ****     if (sep == SEP_COMMA)
 1510              		.loc 1 381 5 is_stmt 1 view .LVU485
 382:src/display.c ****       set_dot(posn+8);
 1511              		.loc 1 382 5 view .LVU486
 382:src/display.c ****       set_dot(posn+8);
 1512              		.loc 1 382 8 is_stmt 0 view .LVU487
 1513 0012 0CD0     		beq	.L161
 385:src/display.c **** #endif
 1514              		.loc 1 385 39 view .LVU488
 1515 0014 2E21     		movs	r1, #46
 1516              	.L158:
 385:src/display.c **** #endif
 1517              		.loc 1 385 30 view .LVU489
 1518 0016 084B     		ldr	r3, .L162
 385:src/display.c **** #endif
 1519              		.loc 1 385 39 view .LVU490
 1520 0018 084A     		ldr	r2, .L162+4
 385:src/display.c **** #endif
 1521              		.loc 1 385 30 view .LVU491
 1522 001a 83FB0403 		smull	r0, r3, r3, r4
 1523 001e E417     		asrs	r4, r4, #31
 1524              	.LVL150:
 385:src/display.c **** #endif
 1525              		.loc 1 385 30 view .LVU492
 1526 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 385:src/display.c **** #endif
 1527              		.loc 1 385 35 view .LVU493
 1528 0024 0134     		adds	r4, r4, #1
 389:src/display.c **** 
 1529              		.loc 1 389 1 view .LVU494
 1530 0026 0020     		movs	r0, #0
 385:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 97


 1531              		.loc 1 385 39 view .LVU495
 1532 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1533              	.LVL151:
 389:src/display.c **** 
 1534              		.loc 1 389 1 view .LVU496
 1535 002c 70BD     		pop	{r4, r5, r6, pc}
 1536              	.LVL152:
 1537              	.L161:
 383:src/display.c **** #ifndef REALBUILD
 1538              		.loc 1 383 7 is_stmt 1 view .LVU497
 1539 002e 681E     		subs	r0, r5, #1
 1540 0030 FFF7FEFF 		bl	set_dot
 1541              	.LVL153:
 385:src/display.c **** #endif
 1542              		.loc 1 385 5 view .LVU498
 385:src/display.c **** #endif
 1543              		.loc 1 385 39 is_stmt 0 view .LVU499
 1544 0034 2C21     		movs	r1, #44
 1545 0036 EEE7     		b	.L158
 1546              	.L163:
 1547              		.align	2
 1548              	.L162:
 1549 0038 398EE338 		.word	954437177
 1550 003c 00000000 		.word	LastDisplayedNumber
 1551              		.cfi_endproc
 1552              	.LFE48:
 1554              		.section	.text.set_decimal,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv4-sp-d16
 1562              	set_decimal:
 1563              	.LVL154:
 1564              	.LFB8:
 355:src/display.c ****   if (res) {
 1565              		.loc 1 355 87 is_stmt 1 view -0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 356:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1569              		.loc 1 356 3 view .LVU501
 356:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1570              		.loc 1 356 6 is_stmt 0 view .LVU502
 1571 0000 3AB1     		cbz	r2, .L165
 357:src/display.c ****   } else {
 1572              		.loc 1 357 5 is_stmt 1 view .LVU503
 357:src/display.c ****   } else {
 1573              		.loc 1 357 12 is_stmt 0 view .LVU504
 1574 0002 0029     		cmp	r1, #0
 357:src/display.c ****   } else {
 1575              		.loc 1 357 9 view .LVU505
 1576 0004 1046     		mov	r0, r2
 1577              	.LVL155:
 357:src/display.c ****   } else {
 1578              		.loc 1 357 12 view .LVU506
ARM GAS  /tmp/cchf4YwX.s 			page 98


 1579 0006 0CBF     		ite	eq
 1580 0008 2E23     		moveq	r3, #46
 1581 000a 2C23     		movne	r3, #44
 1582 000c 00F8013B 		strb	r3, [r0], #1
 1583              	.LVL156:
 367:src/display.c **** 
 1584              		.loc 1 367 1 view .LVU507
 1585 0010 7047     		bx	lr
 1586              	.LVL157:
 1587              	.L165:
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 1588              		.loc 1 359 5 is_stmt 1 view .LVU508
 355:src/display.c ****   if (res) {
 1589              		.loc 1 355 87 is_stmt 0 view .LVU509
 1590 0012 10B5     		push	{r4, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 4, -8
 1593              		.cfi_offset 14, -4
 1594 0014 82B0     		sub	sp, sp, #8
 1595              		.cfi_def_cfa_offset 16
 1596 0016 0446     		mov	r4, r0
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 1597              		.loc 1 359 5 view .LVU510
 1598 0018 0730     		adds	r0, r0, #7
 1599              	.LVL158:
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 1600              		.loc 1 359 5 view .LVU511
 1601 001a 0191     		str	r1, [sp, #4]
 1602 001c FFF7FEFF 		bl	set_dot
 1603              	.LVL159:
 360:src/display.c ****       set_dot(posn+8);
 1604              		.loc 1 360 5 is_stmt 1 view .LVU512
 360:src/display.c ****       set_dot(posn+8);
 1605              		.loc 1 360 8 is_stmt 0 view .LVU513
 1606 0020 0199     		ldr	r1, [sp, #4]
 1607 0022 69B9     		cbnz	r1, .L174
 1608              	.LBB219:
 1609              	.LBB220:
 363:src/display.c **** #endif
 1610              		.loc 1 363 38 view .LVU514
 1611 0024 2E22     		movs	r2, #46
 1612              	.L168:
 363:src/display.c **** #endif
 1613              		.loc 1 363 30 view .LVU515
 1614 0026 0948     		ldr	r0, .L175
 363:src/display.c **** #endif
 1615              		.loc 1 363 38 view .LVU516
 1616 0028 094B     		ldr	r3, .L175+4
 363:src/display.c **** #endif
 1617              		.loc 1 363 30 view .LVU517
 1618 002a 80FB0410 		smull	r1, r0, r0, r4
 1619 002e E417     		asrs	r4, r4, #31
 1620              	.LVL160:
 363:src/display.c **** #endif
 1621              		.loc 1 363 30 view .LVU518
 1622 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 363:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 99


 1623              		.loc 1 363 35 view .LVU519
 1624 0034 0134     		adds	r4, r4, #1
 363:src/display.c **** #endif
 1625              		.loc 1 363 38 view .LVU520
 1626 0036 0020     		movs	r0, #0
 1627 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1628              	.LVL161:
 366:src/display.c **** }
 1629              		.loc 1 366 3 is_stmt 1 view .LVU521
 366:src/display.c **** }
 1630              		.loc 1 366 3 is_stmt 0 view .LVU522
 1631              	.LBE220:
 1632              	.LBE219:
 366:src/display.c **** }
 1633              		.loc 1 366 3 is_stmt 1 view .LVU523
 367:src/display.c **** 
 1634              		.loc 1 367 1 is_stmt 0 view .LVU524
 1635 003c 02B0     		add	sp, sp, #8
 1636              		.cfi_remember_state
 1637              		.cfi_def_cfa_offset 8
 1638              		@ sp needed
 1639 003e 10BD     		pop	{r4, pc}
 1640              	.LVL162:
 1641              	.L174:
 1642              		.cfi_restore_state
 361:src/display.c **** #ifndef REALBUILD
 1643              		.loc 1 361 7 is_stmt 1 view .LVU525
 1644 0040 04F10800 		add	r0, r4, #8
 1645 0044 FFF7FEFF 		bl	set_dot
 1646              	.LVL163:
 1647              	.LBB222:
 1648              	.LBI219:
 355:src/display.c ****   if (res) {
 1649              		.loc 1 355 14 view .LVU526
 1650              	.LBB221:
 363:src/display.c **** #endif
 1651              		.loc 1 363 5 view .LVU527
 363:src/display.c **** #endif
 1652              		.loc 1 363 38 is_stmt 0 view .LVU528
 1653 0048 2C22     		movs	r2, #44
 1654 004a ECE7     		b	.L168
 1655              	.L176:
 1656              		.align	2
 1657              	.L175:
 1658 004c 398EE338 		.word	954437177
 1659 0050 00000000 		.word	LastDisplayedNumber
 1660              	.LBE221:
 1661              	.LBE222:
 1662              		.cfi_endproc
 1663              	.LFE8:
 1665              		.section	.text.set_digits_string,"ax",%progbits
 1666              		.align	1
 1667              		.p2align 2,,3
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cchf4YwX.s 			page 100


 1673              	set_digits_string:
 1674              	.LVL164:
 1675              	.LFB12:
 420:src/display.c ****   for (; *msg != '\0'; msg++) {
 1676              		.loc 1 420 55 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1680              		.loc 1 421 3 view .LVU530
 420:src/display.c ****   for (; *msg != '\0'; msg++) {
 1681              		.loc 1 420 55 is_stmt 0 view .LVU531
 1682 0000 38B5     		push	{r3, r4, r5, lr}
 1683              		.cfi_def_cfa_offset 16
 1684              		.cfi_offset 3, -16
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 5, -8
 1687              		.cfi_offset 14, -4
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1688              		.loc 1 421 10 view .LVU532
 1689 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1690              		.loc 1 421 10 is_stmt 1 view .LVU533
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1691              		.loc 1 421 3 is_stmt 0 view .LVU534
 1692 0004 E3B1     		cbz	r3, .L177
 1693 0006 0546     		mov	r5, r0
 1694 0008 0C46     		mov	r4, r1
 1695 000a 06E0     		b	.L181
 1696              	.LVL165:
 1697              	.L179:
 1698              	.LBB223:
 1699              	.LBB224:
 415:src/display.c ****   return res;
 1700              		.loc 1 415 8 view .LVU535
 1701 000c 2046     		mov	r0, r4
 1702 000e FFF7FEFF 		bl	set_dig
 1703              	.LVL166:
 416:src/display.c **** }
 1704              		.loc 1 416 3 is_stmt 1 view .LVU536
 416:src/display.c **** }
 1705              		.loc 1 416 3 is_stmt 0 view .LVU537
 1706              	.LBE224:
 1707              	.LBE223:
 426:src/display.c ****     }
 1708              		.loc 1 426 7 is_stmt 1 view .LVU538
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1709              		.loc 1 421 10 is_stmt 0 view .LVU539
 1710 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1711              	.LVL167:
 426:src/display.c ****     }
 1712              		.loc 1 426 9 view .LVU540
 1713 0016 0934     		adds	r4, r4, #9
 1714              	.LVL168:
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1715              		.loc 1 421 24 is_stmt 1 view .LVU541
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
ARM GAS  /tmp/cchf4YwX.s 			page 101


 1716              		.loc 1 421 10 view .LVU542
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1717              		.loc 1 421 3 is_stmt 0 view .LVU543
 1718 0018 93B1     		cbz	r3, .L177
 1719              	.LVL169:
 1720              	.L181:
 422:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1721              		.loc 1 422 5 is_stmt 1 view .LVU544
 423:src/display.c ****     else {
 1722              		.loc 1 423 7 view .LVU545
 425:src/display.c ****       j += SEGS_PER_DIGIT;
 1723              		.loc 1 425 7 view .LVU546
 1724              	.LBB227:
 1725              	.LBI223:
 413:src/display.c ****   if (res) *res++ = ch;
 1726              		.loc 1 413 14 view .LVU547
 1727              	.LBB225:
 414:src/display.c ****   else	set_dig(base, ch);
 1728              		.loc 1 414 3 view .LVU548
 415:src/display.c ****   return res;
 1729              		.loc 1 415 8 view .LVU549
 1730              	.LBE225:
 1731              	.LBE227:
 422:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1732              		.loc 1 422 21 is_stmt 0 view .LVU550
 1733 001a 03F0FD02 		and	r2, r3, #253
 1734 001e 2C2A     		cmp	r2, #44
 423:src/display.c ****     else {
 1735              		.loc 1 423 7 view .LVU551
 1736 0020 A4F10900 		sub	r0, r4, #9
 1737 0024 4FF00002 		mov	r2, #0
 1738              	.LBB228:
 1739              	.LBB226:
 415:src/display.c ****   return res;
 1740              		.loc 1 415 8 view .LVU552
 1741 0028 1946     		mov	r1, r3
 1742              	.LBE226:
 1743              	.LBE228:
 422:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1744              		.loc 1 422 21 view .LVU553
 1745 002a EFD1     		bne	.L179
 423:src/display.c ****     else {
 1746              		.loc 1 423 7 view .LVU554
 1747 002c B3F12E01 		subs	r1, r3, #46
 1748 0030 18BF     		it	ne
 1749 0032 0121     		movne	r1, #1
 1750 0034 FFF7FEFF 		bl	set_decimal
 1751              	.LVL170:
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1752              		.loc 1 421 24 is_stmt 1 view .LVU555
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1753              		.loc 1 421 10 view .LVU556
 1754 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1755              	.LVL171:
 421:src/display.c ****     if (*msg == '.' || *msg == ',')
 1756              		.loc 1 421 3 is_stmt 0 view .LVU557
 1757 003c 002B     		cmp	r3, #0
ARM GAS  /tmp/cchf4YwX.s 			page 102


 1758 003e ECD1     		bne	.L181
 1759              	.LVL172:
 1760              	.L177:
 429:src/display.c **** 
 1761              		.loc 1 429 1 view .LVU558
 1762 0040 38BD     		pop	{r3, r4, r5, pc}
 1763              		.cfi_endproc
 1764              	.LFE12:
 1766 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1767              		.align	2
 1768              	.LC0:
 1769 0000 4E614E00 		.ascii	"NaN\000"
 1770              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1771              		.align	1
 1772              		.p2align 2,,3
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	check_special_dn.isra.0:
 1779              	.LVL173:
 1780              	.LFB50:
1621:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1781              		.loc 1 1621 18 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1622:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1785              		.loc 1 1622 2 view .LVU560
1621:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1786              		.loc 1 1621 18 is_stmt 0 view .LVU561
 1787 0000 38B5     		push	{r3, r4, r5, lr}
 1788              		.cfi_def_cfa_offset 16
 1789              		.cfi_offset 3, -16
 1790              		.cfi_offset 4, -12
 1791              		.cfi_offset 5, -8
 1792              		.cfi_offset 14, -4
1622:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1793              		.loc 1 1622 6 view .LVU562
 1794 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1621:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1795              		.loc 1 1621 18 view .LVU563
 1796 0004 0546     		mov	r5, r0
1622:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1797              		.loc 1 1622 5 view .LVU564
 1798 0006 13F07000 		ands	r0, r3, #112
 1799 000a 09D0     		beq	.L187
1623:src/display.c **** 	    if (res) {
 1800              		.loc 1 1623 4 is_stmt 1 view .LVU565
1623:src/display.c **** 	    if (res) {
 1801              		.loc 1 1623 7 is_stmt 0 view .LVU566
 1802 000c 13F0300F 		tst	r3, #48
 1803 0010 0C46     		mov	r4, r1
 1804 0012 06D0     		beq	.L189
 1805              	.LVL174:
 1806              	.LBB231:
 1807              	.LBI231:
ARM GAS  /tmp/cchf4YwX.s 			page 103


1621:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1808              		.loc 1 1621 18 is_stmt 1 view .LVU567
 1809              	.LBB232:
1624:src/display.c **** 	      scopy(res, "NaN");
 1810              		.loc 1 1624 6 view .LVU568
1624:src/display.c **** 	      scopy(res, "NaN");
 1811              		.loc 1 1624 9 is_stmt 0 view .LVU569
 1812 0014 89B1     		cbz	r1, .L190
1625:src/display.c **** 	    } else {
 1813              		.loc 1 1625 8 is_stmt 1 view .LVU570
 1814 0016 0846     		mov	r0, r1
 1815 0018 1849     		ldr	r1, .L203
 1816              	.LVL175:
1625:src/display.c **** 	    } else {
 1817              		.loc 1 1625 8 is_stmt 0 view .LVU571
 1818 001a FFF7FEFF 		bl	scopy
 1819              	.LVL176:
1625:src/display.c **** 	    } else {
 1820              		.loc 1 1625 8 view .LVU572
 1821 001e 0120     		movs	r0, #1
 1822              	.LVL177:
 1823              	.L187:
1625:src/display.c **** 	    } else {
 1824              		.loc 1 1625 8 view .LVU573
 1825              	.LBE232:
 1826              	.LBE231:
1657:src/display.c **** 
 1827              		.loc 1 1657 7 view .LVU574
 1828 0020 38BD     		pop	{r3, r4, r5, pc}
 1829              	.LVL178:
 1830              	.L189:
1635:src/display.c **** 	      if (res) *res++ = '-';
 1831              		.loc 1 1635 6 is_stmt 1 view .LVU575
1635:src/display.c **** 	      if (res) *res++ = '-';
 1832              		.loc 1 1635 9 is_stmt 0 view .LVU576
 1833 0022 1B06     		lsls	r3, r3, #24
 1834 0024 04D4     		bmi	.L202
1639:src/display.c **** 	      *res++ = '\237';
 1835              		.loc 1 1639 6 is_stmt 1 view .LVU577
1639:src/display.c **** 	      *res++ = '\237';
 1836              		.loc 1 1639 9 is_stmt 0 view .LVU578
 1837 0026 B9B1     		cbz	r1, .L194
 1838              	.LVL179:
 1839              	.L193:
1640:src/display.c **** 	    else {
 1840              		.loc 1 1640 8 is_stmt 1 view .LVU579
1640:src/display.c **** 	    else {
 1841              		.loc 1 1640 15 is_stmt 0 view .LVU580
 1842 0028 9F23     		movs	r3, #159
 1843 002a 2370     		strb	r3, [r4]
1653:src/display.c **** 	  }
 1844              		.loc 1 1653 13 view .LVU581
 1845 002c 0120     		movs	r0, #1
1657:src/display.c **** 
 1846              		.loc 1 1657 7 view .LVU582
 1847 002e 38BD     		pop	{r3, r4, r5, pc}
 1848              	.LVL180:
ARM GAS  /tmp/cchf4YwX.s 			page 104


 1849              	.L202:
1636:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1850              		.loc 1 1636 8 is_stmt 1 view .LVU583
1636:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1851              		.loc 1 1636 11 is_stmt 0 view .LVU584
 1852 0030 71B1     		cbz	r1, .L192
1636:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1853              		.loc 1 1636 17 is_stmt 1 view .LVU585
 1854              	.LVL181:
1636:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1855              		.loc 1 1636 24 is_stmt 0 view .LVU586
 1856 0032 2D23     		movs	r3, #45
 1857 0034 04F8013B 		strb	r3, [r4], #1
 1858              	.LVL182:
1639:src/display.c **** 	      *res++ = '\237';
 1859              		.loc 1 1639 6 is_stmt 1 view .LVU587
 1860 0038 F6E7     		b	.L193
 1861              	.LVL183:
 1862              	.L190:
 1863              	.LBB234:
 1864              	.LBB233:
1627:src/display.c **** #ifndef REALBUILD
 1865              		.loc 1 1627 8 view .LVU588
 1866 003a 1148     		ldr	r0, .L203+4
 1867 003c FFF7FEFF 		bl	set_digits_string
 1868              	.LVL184:
1629:src/display.c **** 	      forceDispPlot=0;
 1869              		.loc 1 1629 8 view .LVU589
 1870 0040 1049     		ldr	r1, .L203+8
 1871 0042 1148     		ldr	r0, .L203+12
 1872 0044 FFF7FEFF 		bl	scopy
 1873              	.LVL185:
1630:src/display.c **** #endif
 1874              		.loc 1 1630 8 view .LVU590
1630:src/display.c **** #endif
 1875              		.loc 1 1630 21 is_stmt 0 view .LVU591
 1876 0048 104B     		ldr	r3, .L203+16
 1877 004a 1C70     		strb	r4, [r3]
 1878 004c 0120     		movs	r0, #1
 1879              	.LBE233:
 1880              	.LBE234:
1657:src/display.c **** 
 1881              		.loc 1 1657 7 view .LVU592
 1882 004e 38BD     		pop	{r3, r4, r5, pc}
 1883              	.LVL186:
 1884              	.L192:
1637:src/display.c **** 	    }
 1885              		.loc 1 1637 13 is_stmt 1 view .LVU593
 1886 0050 2D21     		movs	r1, #45
 1887              	.LVL187:
1637:src/display.c **** 	    }
 1888              		.loc 1 1637 13 is_stmt 0 view .LVU594
 1889 0052 0920     		movs	r0, #9
 1890 0054 FFF7FEFF 		bl	set_dig
 1891              	.LVL188:
1639:src/display.c **** 	      *res++ = '\237';
 1892              		.loc 1 1639 6 is_stmt 1 view .LVU595
ARM GAS  /tmp/cchf4YwX.s 			page 105


 1893              	.L194:
1642:src/display.c **** #ifndef REALBUILD
 1894              		.loc 1 1642 8 view .LVU596
 1895 0058 1221     		movs	r1, #18
 1896 005a 0D48     		ldr	r0, .L203+20
 1897 005c FFF7FEFF 		bl	set_digits_string
 1898              	.LVL189:
1644:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1899              		.loc 1 1644 8 view .LVU597
1644:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1900              		.loc 1 1644 11 is_stmt 0 view .LVU598
 1901 0060 95F90030 		ldrsb	r3, [r5]
1648:src/display.c **** 	      }
 1902              		.loc 1 1648 3 view .LVU599
 1903 0064 0848     		ldr	r0, .L203+12
1644:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1904              		.loc 1 1644 11 view .LVU600
 1905 0066 002B     		cmp	r3, #0
1645:src/display.c **** 	      }
 1906              		.loc 1 1645 3 is_stmt 1 view .LVU601
 1907 0068 B4BF     		ite	lt
 1908 006a 0A49     		ldrlt	r1, .L203+24
1648:src/display.c **** 	      }
 1909              		.loc 1 1648 3 view .LVU602
 1910 006c 0A49     		ldrge	r1, .L203+28
 1911 006e FFF7FEFF 		bl	scopy
 1912              	.LVL190:
1650:src/display.c **** #endif
 1913              		.loc 1 1650 8 view .LVU603
1650:src/display.c **** #endif
 1914              		.loc 1 1650 21 is_stmt 0 view .LVU604
 1915 0072 064B     		ldr	r3, .L203+16
 1916 0074 0022     		movs	r2, #0
 1917 0076 1A70     		strb	r2, [r3]
1653:src/display.c **** 	  }
 1918              		.loc 1 1653 13 view .LVU605
 1919 0078 0120     		movs	r0, #1
1657:src/display.c **** 
 1920              		.loc 1 1657 7 view .LVU606
 1921 007a 38BD     		pop	{r3, r4, r5, pc}
 1922              	.L204:
 1923              		.align	2
 1924              	.L203:
 1925 007c 00000000 		.word	.LC0
 1926 0080 00000000 		.word	.LANCHOR3
 1927 0084 00000000 		.word	.LANCHOR4
 1928 0088 00000000 		.word	LastDisplayedNumber
 1929 008c 00000000 		.word	forceDispPlot
 1930 0090 00000000 		.word	.LANCHOR5
 1931 0094 00000000 		.word	.LANCHOR6
 1932 0098 00000000 		.word	.LANCHOR7
 1933              		.cfi_endproc
 1934              	.LFE50:
 1936              		.section	.text.set_x_hms,"ax",%progbits
 1937              		.align	1
 1938              		.p2align 2,,3
 1939              		.syntax unified
ARM GAS  /tmp/cchf4YwX.s 			page 106


 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	set_x_hms:
 1945              	.LVL191:
 1946              	.LFB22:
1702:src/display.c **** 	decNumber x, y, a, t, u;
 1947              		.loc 1 1702 62 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 200
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1703:src/display.c **** 	int j=0;
 1951              		.loc 1 1703 2 view .LVU608
1704:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1952              		.loc 1 1704 2 view .LVU609
1702:src/display.c **** 	decNumber x, y, a, t, u;
 1953              		.loc 1 1702 62 is_stmt 0 view .LVU610
 1954 0000 30B5     		push	{r4, r5, lr}
 1955              		.cfi_def_cfa_offset 12
 1956              		.cfi_offset 4, -12
 1957              		.cfi_offset 5, -8
 1958              		.cfi_offset 14, -4
 1959 0002 B5B0     		sub	sp, sp, #212
 1960              		.cfi_def_cfa_offset 224
1702:src/display.c **** 	decNumber x, y, a, t, u;
 1961              		.loc 1 1702 62 view .LVU611
 1962 0004 0446     		mov	r4, r0
1704:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1963              		.loc 1 1704 6 view .LVU612
 1964 0006 0023     		movs	r3, #0
1708:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1965              		.loc 1 1708 6 view .LVU613
 1966 0008 0830     		adds	r0, r0, #8
 1967              	.LVL192:
1702:src/display.c **** 	decNumber x, y, a, t, u;
 1968              		.loc 1 1702 62 view .LVU614
 1969 000a 0D46     		mov	r5, r1
1704:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1970              		.loc 1 1704 6 view .LVU615
 1971 000c 0393     		str	r3, [sp, #12]
1705:src/display.c **** 	unsigned int hr, min, sec, fs;
 1972              		.loc 1 1705 2 is_stmt 1 view .LVU616
 1973              	.LVL193:
1706:src/display.c **** 
 1974              		.loc 1 1706 2 view .LVU617
1708:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1975              		.loc 1 1708 2 view .LVU618
1708:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1976              		.loc 1 1708 6 is_stmt 0 view .LVU619
 1977 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1978              	.LVL194:
1708:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1979              		.loc 1 1708 5 view .LVU620
 1980 0012 48B1     		cbz	r0, .L206
1709:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1981              		.loc 1 1709 4 is_stmt 1 view .LVU621
1709:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
ARM GAS  /tmp/cchf4YwX.s 			page 107


 1982              		.loc 1 1709 7 is_stmt 0 view .LVU622
 1983 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1984 0016 5B06     		lsls	r3, r3, #25
 1985 0018 04D5     		bpl	.L205
1710:src/display.c **** 	  return;
 1986              		.loc 1 1710 6 is_stmt 1 view .LVU623
 1987              	.LVL195:
 1988              	.LBB235:
 1989              	.LBI235:
 413:src/display.c ****   if (res) *res++ = ch;
 1990              		.loc 1 413 14 view .LVU624
 1991              	.LBB236:
 414:src/display.c ****   else	set_dig(base, ch);
 1992              		.loc 1 414 3 view .LVU625
 414:src/display.c ****   else	set_dig(base, ch);
 1993              		.loc 1 414 6 is_stmt 0 view .LVU626
 1994 001a 002D     		cmp	r5, #0
 1995 001c 00F0B580 		beq	.L209
 414:src/display.c ****   else	set_dig(base, ch);
 1996              		.loc 1 414 12 is_stmt 1 view .LVU627
 1997              	.LVL196:
 414:src/display.c ****   else	set_dig(base, ch);
 1998              		.loc 1 414 19 is_stmt 0 view .LVU628
 1999 0020 6F23     		movs	r3, #111
 2000 0022 2B70     		strb	r3, [r5]
 2001              	.LVL197:
 2002              	.L205:
 414:src/display.c ****   else	set_dig(base, ch);
 2003              		.loc 1 414 19 view .LVU629
 2004              	.LBE236:
 2005              	.LBE235:
1765:src/display.c **** 
 2006              		.loc 1 1765 7 view .LVU630
 2007 0024 35B0     		add	sp, sp, #212
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 0026 30BD     		pop	{r4, r5, pc}
 2012              	.LVL198:
 2013              	.L206:
 2014              		.cfi_restore_state
1714:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2015              		.loc 1 1714 2 is_stmt 1 view .LVU631
 2016 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2017              	.LVL199:
1715:src/display.c **** 	dn_abs(&a, rgx);
 2018              		.loc 1 1715 2 view .LVU632
 2019 002c 624A     		ldr	r2, .L236
 2020 002e 2146     		mov	r1, r4
 2021 0030 07A8     		add	r0, sp, #28
 2022 0032 FFF7FEFF 		bl	decNumberMod
 2023              	.LVL200:
1716:src/display.c **** 	if (decNumberIsNegative(&x)) {
 2024              		.loc 1 1716 2 view .LVU633
 2025 0036 2146     		mov	r1, r4
 2026 0038 19A8     		add	r0, sp, #100
 2027 003a FFF7FEFF 		bl	dn_abs
ARM GAS  /tmp/cchf4YwX.s 			page 108


 2028              	.LVL201:
1717:src/display.c **** 	  if (res != NULL)
 2029              		.loc 1 1717 2 view .LVU634
1717:src/display.c **** 	  if (res != NULL)
 2030              		.loc 1 1717 5 is_stmt 0 view .LVU635
 2031 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2032 0042 002B     		cmp	r3, #0
 2033 0044 72DB     		blt	.L234
 2034              	.L210:
1725:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2035              		.loc 1 1725 2 is_stmt 1 view .LVU636
 2036 0046 07A9     		add	r1, sp, #28
 2037 0048 10A8     		add	r0, sp, #64
 2038 004a FFF7FEFF 		bl	decNumberHR2HMS
 2039              	.LVL202:
1726:src/display.c **** 	decNumberRound(&u, &t);
 2040              		.loc 1 1726 2 view .LVU637
 2041 004e 0622     		movs	r2, #6
 2042 0050 10A9     		add	r1, sp, #64
 2043 0052 22A8     		add	r0, sp, #136
 2044 0054 FFF7FEFF 		bl	dn_mulpow10
 2045              	.LVL203:
1727:src/display.c **** 
 2046              		.loc 1 1727 2 view .LVU638
 2047 0058 22A9     		add	r1, sp, #136
 2048 005a 2BA8     		add	r0, sp, #172
 2049 005c FFF7FEFF 		bl	decNumberRound
 2050              	.LVL204:
1729:src/display.c **** 	hms_step(&u, &t, &sec);
 2051              		.loc 1 1729 2 view .LVU639
 2052 0060 2BA9     		add	r1, sp, #172
 2053 0062 22A8     		add	r0, sp, #136
 2054 0064 06AA     		add	r2, sp, #24
 2055 0066 FFF7FEFF 		bl	hms_step
 2056              	.LVL205:
1730:src/display.c **** 	hms_step(&t, &u, &min);
 2057              		.loc 1 1730 2 view .LVU640
 2058 006a 22A9     		add	r1, sp, #136
 2059 006c 2BA8     		add	r0, sp, #172
 2060 006e 05AA     		add	r2, sp, #20
 2061 0070 FFF7FEFF 		bl	hms_step
 2062              	.LVL206:
1731:src/display.c **** 	hr = dn_to_int(&t);
 2063              		.loc 1 1731 2 view .LVU641
 2064 0074 04AA     		add	r2, sp, #16
 2065 0076 2BA9     		add	r1, sp, #172
 2066 0078 22A8     		add	r0, sp, #136
 2067 007a FFF7FEFF 		bl	hms_step
 2068              	.LVL207:
1732:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2069              		.loc 1 1732 2 view .LVU642
1732:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2070              		.loc 1 1732 7 is_stmt 0 view .LVU643
 2071 007e 22A8     		add	r0, sp, #136
 2072 0080 FFF7FEFF 		bl	dn_to_int
 2073              	.LVL208:
1733:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
ARM GAS  /tmp/cchf4YwX.s 			page 109


 2074              		.loc 1 1733 33 view .LVU644
 2075 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1733:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2076              		.loc 1 1733 5 view .LVU645
 2077 0088 3B2A     		cmp	r2, #59
1733:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2078              		.loc 1 1733 19 is_stmt 1 view .LVU646
1733:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2079              		.loc 1 1733 23 is_stmt 0 view .LVU647
 2080 008a 82BF     		ittt	hi
 2081 008c 3C3A     		subhi	r2, r2, #60
1733:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2082              		.loc 1 1733 33 view .LVU648
 2083 008e 0133     		addhi	r3, r3, #1
 2084 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1734:src/display.c **** 
 2085              		.loc 1 1734 2 is_stmt 1 view .LVU649
1734:src/display.c **** 
 2086              		.loc 1 1734 5 is_stmt 0 view .LVU650
 2087 0094 3B2B     		cmp	r3, #59
 2088 0096 02D9     		bls	.L215
1734:src/display.c **** 
 2089              		.loc 1 1734 19 is_stmt 1 discriminator 1 view .LVU651
1734:src/display.c **** 
 2090              		.loc 1 1734 23 is_stmt 0 discriminator 1 view .LVU652
 2091 0098 3C3B     		subs	r3, r3, #60
 2092 009a 0493     		str	r3, [sp, #16]
1734:src/display.c **** 
 2093              		.loc 1 1734 30 is_stmt 1 discriminator 1 view .LVU653
1734:src/display.c **** 
 2094              		.loc 1 1734 32 is_stmt 0 discriminator 1 view .LVU654
 2095 009c 0130     		adds	r0, r0, #1
 2096              	.LVL209:
 2097              	.L215:
1737:src/display.c **** 	res = set_dig_s(j, '@', res);
 2098              		.loc 1 1737 2 is_stmt 1 view .LVU655
1737:src/display.c **** 	res = set_dig_s(j, '@', res);
 2099              		.loc 1 1737 8 is_stmt 0 view .LVU656
 2100 009e 0123     		movs	r3, #1
 2101 00a0 0093     		str	r3, [sp]
 2102 00a2 2946     		mov	r1, r5
 2103 00a4 03AA     		add	r2, sp, #12
 2104 00a6 0423     		movs	r3, #4
 2105 00a8 FFF7FEFF 		bl	hms_render
 2106              	.LVL210:
1738:src/display.c **** 	j += SEGS_PER_DIGIT;
 2107              		.loc 1 1738 2 is_stmt 1 view .LVU657
 2108              	.LBB238:
 2109              	.LBI238:
 413:src/display.c ****   if (res) *res++ = ch;
 2110              		.loc 1 413 14 view .LVU658
 2111              	.LBB239:
 414:src/display.c ****   else	set_dig(base, ch);
 2112              		.loc 1 414 3 view .LVU659
 414:src/display.c ****   else	set_dig(base, ch);
 2113              		.loc 1 414 6 is_stmt 0 view .LVU660
 2114 00ac 0446     		mov	r4, r0
ARM GAS  /tmp/cchf4YwX.s 			page 110


 2115              	.LVL211:
 414:src/display.c ****   else	set_dig(base, ch);
 2116              		.loc 1 414 6 view .LVU661
 2117 00ae 0028     		cmp	r0, #0
 2118 00b0 76D0     		beq	.L216
 414:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 414 12 is_stmt 1 view .LVU662
 414:src/display.c ****   else	set_dig(base, ch);
 2120              		.loc 1 414 16 is_stmt 0 view .LVU663
 2121 00b2 0146     		mov	r1, r0
 2122              	.LVL212:
 414:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 414 19 view .LVU664
 2124 00b4 4023     		movs	r3, #64
 2125 00b6 01F8013B 		strb	r3, [r1], #1
 2126              	.LVL213:
 2127              	.L217:
 416:src/display.c **** }
 2128              		.loc 1 416 3 is_stmt 1 view .LVU665
 416:src/display.c **** }
 2129              		.loc 1 416 3 is_stmt 0 view .LVU666
 2130              	.LBE239:
 2131              	.LBE238:
1739:src/display.c **** 
 2132              		.loc 1 1739 2 is_stmt 1 view .LVU667
1742:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2133              		.loc 1 1742 8 is_stmt 0 view .LVU668
 2134 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2135 00be 0122     		movs	r2, #1
1739:src/display.c **** 
 2136              		.loc 1 1739 4 view .LVU669
 2137 00c0 03F10904 		add	r4, r3, #9
1742:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2138              		.loc 1 1742 8 view .LVU670
 2139 00c4 0092     		str	r2, [sp]
 2140 00c6 0223     		movs	r3, #2
 2141 00c8 03AA     		add	r2, sp, #12
1739:src/display.c **** 
 2142              		.loc 1 1739 4 view .LVU671
 2143 00ca 0394     		str	r4, [sp, #12]
1742:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2144              		.loc 1 1742 2 is_stmt 1 view .LVU672
1742:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2145              		.loc 1 1742 8 is_stmt 0 view .LVU673
 2146 00cc FFF7FEFF 		bl	hms_render
 2147              	.LVL214:
1743:src/display.c **** 	j += SEGS_PER_DIGIT;
 2148              		.loc 1 1743 2 is_stmt 1 view .LVU674
 2149              	.LBB241:
 2150              	.LBI241:
 413:src/display.c ****   if (res) *res++ = ch;
 2151              		.loc 1 413 14 view .LVU675
 2152              	.LBB242:
 414:src/display.c ****   else	set_dig(base, ch);
 2153              		.loc 1 414 3 view .LVU676
 414:src/display.c ****   else	set_dig(base, ch);
 2154              		.loc 1 414 6 is_stmt 0 view .LVU677
ARM GAS  /tmp/cchf4YwX.s 			page 111


 2155 00d0 0446     		mov	r4, r0
 2156 00d2 0028     		cmp	r0, #0
 2157 00d4 5ED0     		beq	.L218
 414:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 414 12 is_stmt 1 view .LVU678
 414:src/display.c ****   else	set_dig(base, ch);
 2159              		.loc 1 414 16 is_stmt 0 view .LVU679
 2160 00d6 0146     		mov	r1, r0
 2161              	.LVL215:
 414:src/display.c ****   else	set_dig(base, ch);
 2162              		.loc 1 414 19 view .LVU680
 2163 00d8 2723     		movs	r3, #39
 2164 00da 01F8013B 		strb	r3, [r1], #1
 2165              	.LVL216:
 2166              	.L219:
 416:src/display.c **** }
 2167              		.loc 1 416 3 is_stmt 1 view .LVU681
 416:src/display.c **** }
 2168              		.loc 1 416 3 is_stmt 0 view .LVU682
 2169              	.LBE242:
 2170              	.LBE241:
1744:src/display.c **** 
 2171              		.loc 1 1744 2 is_stmt 1 view .LVU683
1744:src/display.c **** 
 2172              		.loc 1 1744 4 is_stmt 0 view .LVU684
 2173 00de 039B     		ldr	r3, [sp, #12]
1747:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2174              		.loc 1 1747 8 view .LVU685
 2175 00e0 0598     		ldr	r0, [sp, #20]
 2176 00e2 0122     		movs	r2, #1
1744:src/display.c **** 
 2177              		.loc 1 1744 4 view .LVU686
 2178 00e4 03F10904 		add	r4, r3, #9
1747:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2179              		.loc 1 1747 8 view .LVU687
 2180 00e8 0092     		str	r2, [sp]
 2181 00ea 0223     		movs	r3, #2
 2182 00ec 03AA     		add	r2, sp, #12
1744:src/display.c **** 
 2183              		.loc 1 1744 4 view .LVU688
 2184 00ee 0394     		str	r4, [sp, #12]
1747:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2185              		.loc 1 1747 2 is_stmt 1 view .LVU689
1747:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2186              		.loc 1 1747 8 is_stmt 0 view .LVU690
 2187 00f0 FFF7FEFF 		bl	hms_render
 2188              	.LVL217:
1748:src/display.c **** 
 2189              		.loc 1 1748 8 view .LVU691
 2190 00f4 3149     		ldr	r1, .L236+4
1747:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2191              		.loc 1 1747 8 view .LVU692
 2192 00f6 0246     		mov	r2, r0
 2193              	.LVL218:
1748:src/display.c **** 
 2194              		.loc 1 1748 2 is_stmt 1 view .LVU693
1748:src/display.c **** 
ARM GAS  /tmp/cchf4YwX.s 			page 112


 2195              		.loc 1 1748 8 is_stmt 0 view .LVU694
 2196 00f8 0398     		ldr	r0, [sp, #12]
 2197              	.LVL219:
1748:src/display.c **** 
 2198              		.loc 1 1748 8 view .LVU695
 2199 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2200 00fc 0938     		subs	r0, r0, #9
 2201 00fe FFF7FEFF 		bl	set_decimal
 2202              	.LVL220:
1751:src/display.c **** 
 2203              		.loc 1 1751 8 view .LVU696
 2204 0102 0023     		movs	r3, #0
1748:src/display.c **** 
 2205              		.loc 1 1748 8 view .LVU697
 2206 0104 0146     		mov	r1, r0
 2207              	.LVL221:
1751:src/display.c **** 
 2208              		.loc 1 1751 2 is_stmt 1 view .LVU698
1751:src/display.c **** 
 2209              		.loc 1 1751 8 is_stmt 0 view .LVU699
 2210 0106 0093     		str	r3, [sp]
 2211 0108 0698     		ldr	r0, [sp, #24]
 2212              	.LVL222:
1751:src/display.c **** 
 2213              		.loc 1 1751 8 view .LVU700
 2214 010a 03AA     		add	r2, sp, #12
 2215 010c 0223     		movs	r3, #2
 2216 010e FFF7FEFF 		bl	hms_render
 2217              	.LVL223:
1754:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2218              		.loc 1 1754 2 is_stmt 1 view .LVU701
 2219              	.LBB244:
 2220              	.LBI244:
 413:src/display.c ****   if (res) *res++ = ch;
 2221              		.loc 1 413 14 view .LVU702
 2222              	.LBB245:
 414:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 414 3 view .LVU703
 414:src/display.c ****   else	set_dig(base, ch);
 2224              		.loc 1 414 6 is_stmt 0 view .LVU704
 2225 0112 0446     		mov	r4, r0
 2226 0114 78B3     		cbz	r0, .L220
 414:src/display.c ****   else	set_dig(base, ch);
 2227              		.loc 1 414 12 is_stmt 1 view .LVU705
 2228              	.LVL224:
 414:src/display.c ****   else	set_dig(base, ch);
 2229              		.loc 1 414 19 is_stmt 0 view .LVU706
 2230 0116 2223     		movs	r3, #34
 2231 0118 0370     		strb	r3, [r0]
 2232              	.LVL225:
 416:src/display.c **** }
 2233              		.loc 1 416 3 is_stmt 1 view .LVU707
 416:src/display.c **** }
 2234              		.loc 1 416 3 is_stmt 0 view .LVU708
 2235              	.LBE245:
 2236              	.LBE244:
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
ARM GAS  /tmp/cchf4YwX.s 			page 113


 2237              		.loc 1 1758 2 is_stmt 1 view .LVU709
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2238              		.loc 1 1758 6 is_stmt 0 view .LVU710
 2239 011a 2749     		ldr	r1, .L236
 2240 011c 19A8     		add	r0, sp, #100
 2241              	.LVL226:
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2242              		.loc 1 1758 6 view .LVU711
 2243 011e FFF7FEFF 		bl	dn_lt
 2244              	.LVL227:
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2245              		.loc 1 1758 5 view .LVU712
 2246 0122 78B9     		cbnz	r0, .L235
1759:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2247              		.loc 1 1759 4 is_stmt 1 view .LVU713
 2248              	.LVL228:
 2249              	.LBB248:
 2250              	.LBI248:
 413:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 413 14 view .LVU714
 2252              	.LBB249:
 414:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 414 3 view .LVU715
 414:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 414 12 view .LVU716
 414:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 414 19 is_stmt 0 view .LVU717
 2256 0124 6F23     		movs	r3, #111
 2257 0126 6370     		strb	r3, [r4, #1]
 2258              	.LBE249:
 2259              	.LBE248:
1765:src/display.c **** 
 2260              		.loc 1 1765 7 view .LVU718
 2261 0128 35B0     		add	sp, sp, #212
 2262              		.cfi_remember_state
 2263              		.cfi_def_cfa_offset 12
 2264              		@ sp needed
 2265 012a 30BD     		pop	{r4, r5, pc}
 2266              	.LVL229:
 2267              	.L234:
 2268              		.cfi_restore_state
1718:src/display.c **** 	    *res++ += '-';
 2269              		.loc 1 1718 4 is_stmt 1 view .LVU719
1718:src/display.c **** 	    *res++ += '-';
 2270              		.loc 1 1718 7 is_stmt 0 view .LVU720
 2271 012c E5B1     		cbz	r5, .L211
1719:src/display.c **** 	  else
 2272              		.loc 1 1719 6 is_stmt 1 view .LVU721
1719:src/display.c **** 	  else
 2273              		.loc 1 1719 10 is_stmt 0 view .LVU722
 2274 012e 2B46     		mov	r3, r5
 2275              	.LVL230:
1719:src/display.c **** 	  else
 2276              		.loc 1 1719 13 view .LVU723
 2277 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2278              	.LVL231:
1719:src/display.c **** 	  else
ARM GAS  /tmp/cchf4YwX.s 			page 114


 2279              		.loc 1 1719 13 view .LVU724
 2280 0134 2D32     		adds	r2, r2, #45
 2281 0136 2A70     		strb	r2, [r5]
1719:src/display.c **** 	  else
 2282              		.loc 1 1719 10 view .LVU725
 2283 0138 1D46     		mov	r5, r3
 2284              	.LVL232:
 2285              	.L212:
1722:src/display.c **** 	}
 2286              		.loc 1 1722 4 is_stmt 1 view .LVU726
 2287 013a 07A9     		add	r1, sp, #28
 2288 013c 0846     		mov	r0, r1
 2289 013e FFF7FEFF 		bl	dn_minus
 2290              	.LVL233:
 2291 0142 80E7     		b	.L210
 2292              	.LVL234:
 2293              	.L235:
 2294              	.LBB250:
 2295              	.LBB246:
 414:src/display.c ****   else	set_dig(base, ch);
 2296              		.loc 1 414 16 is_stmt 0 view .LVU727
 2297 0144 0134     		adds	r4, r4, #1
 2298              	.LVL235:
 2299              	.L223:
 414:src/display.c ****   else	set_dig(base, ch);
 2300              		.loc 1 414 16 view .LVU728
 2301              	.LBE246:
 2302              	.LBE250:
1760:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2303              		.loc 1 1760 9 is_stmt 1 view .LVU729
1760:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2304              		.loc 1 1760 15 is_stmt 0 view .LVU730
 2305 0146 19A8     		add	r0, sp, #100
 2306 0148 FFF7FEFF 		bl	dn_eq0
 2307              	.LVL236:
1760:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2308              		.loc 1 1760 12 view .LVU731
 2309 014c 0028     		cmp	r0, #0
 2310 014e 7FF469AF 		bne	.L205
1761:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2311              		.loc 1 1761 4 is_stmt 1 view .LVU732
1761:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2312              		.loc 1 1761 8 is_stmt 0 view .LVU733
 2313 0152 1B48     		ldr	r0, .L236+8
 2314 0154 19A9     		add	r1, sp, #100
 2315 0156 FFF7FEFF 		bl	dn_lt
 2316              	.LVL237:
1761:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2317              		.loc 1 1761 7 view .LVU734
 2318 015a 0028     		cmp	r0, #0
 2319 015c 7FF462AF 		bne	.L205
1762:src/display.c **** 	  }
 2320              		.loc 1 1762 6 is_stmt 1 view .LVU735
 2321              	.LVL238:
 2322              	.LBB251:
 2323              	.LBI251:
 413:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/cchf4YwX.s 			page 115


 2324              		.loc 1 413 14 view .LVU736
 2325              	.LBB252:
 414:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 414 3 view .LVU737
 414:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 414 6 is_stmt 0 view .LVU738
 2328 0160 24B3     		cbz	r4, .L225
 414:src/display.c ****   else	set_dig(base, ch);
 2329              		.loc 1 414 12 is_stmt 1 view .LVU739
 2330              	.LVL239:
 414:src/display.c ****   else	set_dig(base, ch);
 2331              		.loc 1 414 19 is_stmt 0 view .LVU740
 2332 0162 7523     		movs	r3, #117
 2333 0164 2370     		strb	r3, [r4]
 2334 0166 5DE7     		b	.L205
 2335              	.LVL240:
 2336              	.L211:
 414:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 414 19 view .LVU741
 2338              	.LBE252:
 2339              	.LBE251:
1721:src/display.c **** 	  dn_minus(&x, &x);
 2340              		.loc 1 1721 6 is_stmt 1 view .LVU742
 2341              	.LBB254:
 2342              	.LBI254:
 302:src/display.c **** {
 2343              		.loc 1 302 13 view .LVU743
 2344              	.LBB255:
 304:src/display.c ****   set_dot(MANT_SIGN);
 2345              		.loc 1 304 3 view .LVU744
 304:src/display.c ****   set_dot(MANT_SIGN);
 2346              		.loc 1 304 25 is_stmt 0 view .LVU745
 2347 0168 164B     		ldr	r3, .L236+12
 2348 016a 2D22     		movs	r2, #45
 305:src/display.c **** }
 2349              		.loc 1 305 3 view .LVU746
 2350 016c 8120     		movs	r0, #129
 304:src/display.c ****   set_dot(MANT_SIGN);
 2351              		.loc 1 304 25 view .LVU747
 2352 016e 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 2353              		.loc 1 305 3 is_stmt 1 view .LVU748
 2354 0170 FFF7FEFF 		bl	set_dot
 2355              	.LVL241:
 306:src/display.c **** 
 2356              		.loc 1 306 1 is_stmt 0 view .LVU749
 2357 0174 E1E7     		b	.L212
 2358              	.LVL242:
 2359              	.L220:
 306:src/display.c **** 
 2360              		.loc 1 306 1 view .LVU750
 2361              	.LBE255:
 2362              	.LBE254:
 2363              	.LBB256:
 2364              	.LBB247:
 415:src/display.c ****   return res;
 2365              		.loc 1 415 8 is_stmt 1 view .LVU751
ARM GAS  /tmp/cchf4YwX.s 			page 116


 2366 0176 0398     		ldr	r0, [sp, #12]
 2367              	.LVL243:
 415:src/display.c ****   return res;
 2368              		.loc 1 415 8 is_stmt 0 view .LVU752
 2369 0178 2221     		movs	r1, #34
 2370 017a FFF7FEFF 		bl	set_dig
 2371              	.LVL244:
 416:src/display.c **** }
 2372              		.loc 1 416 3 is_stmt 1 view .LVU753
 416:src/display.c **** }
 2373              		.loc 1 416 3 is_stmt 0 view .LVU754
 2374              	.LBE247:
 2375              	.LBE256:
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2376              		.loc 1 1758 2 is_stmt 1 view .LVU755
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2377              		.loc 1 1758 6 is_stmt 0 view .LVU756
 2378 017e 0E49     		ldr	r1, .L236
 2379 0180 19A8     		add	r0, sp, #100
 2380 0182 FFF7FEFF 		bl	dn_lt
 2381              	.LVL245:
1758:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2382              		.loc 1 1758 5 view .LVU757
 2383 0186 0028     		cmp	r0, #0
 2384 0188 DDD1     		bne	.L223
 2385              	.LVL246:
 2386              	.L209:
 2387              	.LBB257:
 2388              	.LBB237:
 415:src/display.c ****   return res;
 2389              		.loc 1 415 8 is_stmt 1 view .LVU758
 2390 018a 6F21     		movs	r1, #111
 2391 018c 7A20     		movs	r0, #122
 2392 018e FFF7FEFF 		bl	set_dig
 2393              	.LVL247:
 2394              	.LBE237:
 2395              	.LBE257:
1711:src/display.c **** 	}
 2396              		.loc 1 1711 4 view .LVU759
 2397 0192 47E7     		b	.L205
 2398              	.LVL248:
 2399              	.L218:
 2400              	.LBB258:
 2401              	.LBB243:
 415:src/display.c ****   return res;
 2402              		.loc 1 415 8 view .LVU760
 2403 0194 2721     		movs	r1, #39
 2404 0196 0398     		ldr	r0, [sp, #12]
 2405              	.LVL249:
 415:src/display.c ****   return res;
 2406              		.loc 1 415 8 is_stmt 0 view .LVU761
 2407 0198 FFF7FEFF 		bl	set_dig
 2408              	.LVL250:
 415:src/display.c ****   return res;
 2409              		.loc 1 415 8 view .LVU762
 2410 019c 2146     		mov	r1, r4
 2411 019e 9EE7     		b	.L219
ARM GAS  /tmp/cchf4YwX.s 			page 117


 2412              	.LVL251:
 2413              	.L216:
 415:src/display.c ****   return res;
 2414              		.loc 1 415 8 view .LVU763
 2415              	.LBE243:
 2416              	.LBE258:
 2417              	.LBB259:
 2418              	.LBB240:
 415:src/display.c ****   return res;
 2419              		.loc 1 415 8 is_stmt 1 view .LVU764
 2420 01a0 4021     		movs	r1, #64
 2421 01a2 0398     		ldr	r0, [sp, #12]
 2422              	.LVL252:
 415:src/display.c ****   return res;
 2423              		.loc 1 415 8 is_stmt 0 view .LVU765
 2424 01a4 FFF7FEFF 		bl	set_dig
 2425              	.LVL253:
 415:src/display.c ****   return res;
 2426              		.loc 1 415 8 view .LVU766
 2427 01a8 2146     		mov	r1, r4
 2428 01aa 86E7     		b	.L217
 2429              	.LVL254:
 2430              	.L225:
 415:src/display.c ****   return res;
 2431              		.loc 1 415 8 view .LVU767
 2432              	.LBE240:
 2433              	.LBE259:
 2434              	.LBB260:
 2435              	.LBB253:
 415:src/display.c ****   return res;
 2436              		.loc 1 415 8 is_stmt 1 view .LVU768
 2437 01ac 7521     		movs	r1, #117
 2438 01ae 7A20     		movs	r0, #122
 2439 01b0 FFF7FEFF 		bl	set_dig
 2440              	.LVL255:
 2441 01b4 36E7     		b	.L205
 2442              	.L237:
 2443 01b6 00BF     		.align	2
 2444              	.L236:
 2445 01b8 00000000 		.word	const_9000
 2446 01bc 00000000 		.word	.LANCHOR1
 2447 01c0 00000000 		.word	const_hms_threshold
 2448 01c4 00000000 		.word	LastDisplayedNumber
 2449              	.LBE253:
 2450              	.LBE260:
 2451              		.cfi_endproc
 2452              	.LFE22:
 2454              		.section	.text.set_x_fract,"ax",%progbits
 2455              		.align	1
 2456              		.p2align 2,,3
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv4-sp-d16
 2462              	set_x_fract:
 2463              	.LVL256:
 2464              	.LFB23:
ARM GAS  /tmp/cchf4YwX.s 			page 118


1768:src/display.c **** 	decNumber x, w, n, d, t;
 2465              		.loc 1 1768 63 view -0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 216
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
1769:src/display.c **** 	char buf[32], *p = buf;
 2469              		.loc 1 1769 2 view .LVU770
1770:src/display.c **** 	int j;
 2470              		.loc 1 1770 2 view .LVU771
1771:src/display.c **** 
 2471              		.loc 1 1771 2 view .LVU772
1773:src/display.c **** 	  return 1;
 2472              		.loc 1 1773 2 view .LVU773
1768:src/display.c **** 	decNumber x, w, n, d, t;
 2473              		.loc 1 1768 63 is_stmt 0 view .LVU774
 2474 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2475              		.cfi_def_cfa_offset 20
 2476              		.cfi_offset 4, -20
 2477              		.cfi_offset 5, -16
 2478              		.cfi_offset 6, -12
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 0646     		mov	r6, r0
 2482 0004 B7B0     		sub	sp, sp, #220
 2483              		.cfi_def_cfa_offset 240
1773:src/display.c **** 	  return 1;
 2484              		.loc 1 1773 6 view .LVU775
 2485 0006 0830     		adds	r0, r0, #8
 2486              	.LVL257:
1768:src/display.c **** 	decNumber x, w, n, d, t;
 2487              		.loc 1 1768 63 view .LVU776
 2488 0008 0C46     		mov	r4, r1
1773:src/display.c **** 	  return 1;
 2489              		.loc 1 1773 6 view .LVU777
 2490 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2491              	.LVL258:
1773:src/display.c **** 	  return 1;
 2492              		.loc 1 1773 5 view .LVU778
 2493 000e 18B1     		cbz	r0, .L269
 2494              	.LVL259:
 2495              	.L258:
1774:src/display.c **** 	dn_abs(&x, rgx);
 2496              		.loc 1 1774 11 view .LVU779
 2497 0010 0125     		movs	r5, #1
 2498              	.L238:
1831:src/display.c **** 
 2499              		.loc 1 1831 7 view .LVU780
 2500 0012 2846     		mov	r0, r5
 2501 0014 37B0     		add	sp, sp, #220
 2502              		.cfi_remember_state
 2503              		.cfi_def_cfa_offset 20
 2504              		@ sp needed
 2505 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2506              	.LVL260:
 2507              	.L269:
 2508              		.cfi_restore_state
 2509              	.LBB269:
ARM GAS  /tmp/cchf4YwX.s 			page 119


 2510              	.LBI269:
1768:src/display.c **** 	decNumber x, w, n, d, t;
 2511              		.loc 1 1768 18 is_stmt 1 view .LVU781
 2512              	.LBB270:
1775:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2513              		.loc 1 1775 2 view .LVU782
 2514 0018 3146     		mov	r1, r6
 2515 001a 0546     		mov	r5, r0
 2516 001c 09A8     		add	r0, sp, #36
 2517 001e FFF7FEFF 		bl	dn_abs
 2518              	.LVL261:
1776:src/display.c **** 	  return 0;
 2519              		.loc 1 1776 2 view .LVU783
1776:src/display.c **** 	  return 0;
 2520              		.loc 1 1776 6 is_stmt 0 view .LVU784
 2521 0022 5D49     		ldr	r1, .L274
 2522 0024 09A8     		add	r0, sp, #36
 2523 0026 FFF7FEFF 		bl	dn_lt
 2524              	.LVL262:
1776:src/display.c **** 	  return 0;
 2525              		.loc 1 1776 5 view .LVU785
 2526 002a 0028     		cmp	r0, #0
 2527 002c F1D0     		beq	.L238
1778:src/display.c **** 	  return 0;
 2528              		.loc 1 1778 2 is_stmt 1 view .LVU786
1778:src/display.c **** 	  return 0;
 2529              		.loc 1 1778 6 is_stmt 0 view .LVU787
 2530 002e 5B49     		ldr	r1, .L274+4
 2531 0030 09A8     		add	r0, sp, #36
 2532 0032 FFF7FEFF 		bl	dn_lt
 2533              	.LVL263:
1778:src/display.c **** 	  return 0;
 2534              		.loc 1 1778 5 view .LVU788
 2535 0036 0746     		mov	r7, r0
 2536 0038 0028     		cmp	r0, #0
 2537 003a EAD1     		bne	.L238
1780:src/display.c **** 	  if (res != NULL)
 2538              		.loc 1 1780 2 is_stmt 1 view .LVU789
1780:src/display.c **** 	  if (res != NULL)
 2539              		.loc 1 1780 5 is_stmt 0 view .LVU790
 2540 003c 96F90830 		ldrsb	r3, [r6, #8]
 2541 0040 002B     		cmp	r3, #0
 2542 0042 C0F28680 		blt	.L270
 2543              	.LVL264:
 2544              	.L243:
1786:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2545              		.loc 1 1786 2 is_stmt 1 view .LVU791
 2546 0046 09A9     		add	r1, sp, #36
 2547 0048 12A8     		add	r0, sp, #72
 2548 004a FFF7FEFF 		bl	decNumberFrac
 2549              	.LVL265:
1787:src/display.c **** 
 2550              		.loc 1 1787 2 view .LVU792
 2551 004e 12AA     		add	r2, sp, #72
 2552 0050 24A9     		add	r1, sp, #144
 2553 0052 1BA8     		add	r0, sp, #108
 2554 0054 FFF7FEFF 		bl	decNumber2Fraction
ARM GAS  /tmp/cchf4YwX.s 			page 120


 2555              	.LVL266:
1789:src/display.c **** 	dn_compare(&t, &t, &w);
 2556              		.loc 1 1789 2 view .LVU793
 2557 0058 24AA     		add	r2, sp, #144
 2558 005a 1BA9     		add	r1, sp, #108
 2559 005c 2DA8     		add	r0, sp, #180
 2560 005e FFF7FEFF 		bl	dn_divide
 2561              	.LVL267:
1790:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2562              		.loc 1 1790 2 view .LVU794
 2563 0062 2DA9     		add	r1, sp, #180
 2564 0064 12AA     		add	r2, sp, #72
 2565 0066 0846     		mov	r0, r1
 2566 0068 FFF7FEFF 		bl	dn_compare
 2567              	.LVL268:
1791:src/display.c **** 
 2568              		.loc 1 1791 2 view .LVU795
 2569 006c 09A9     		add	r1, sp, #36
 2570 006e 12A8     		add	r0, sp, #72
 2571 0070 FFF7FEFF 		bl	decNumberTrunc
 2572              	.LVL269:
1793:src/display.c **** 	  dn_inc(&w);
 2573              		.loc 1 1793 2 view .LVU796
1793:src/display.c **** 	  dn_inc(&w);
 2574              		.loc 1 1793 6 is_stmt 0 view .LVU797
 2575 0074 24A9     		add	r1, sp, #144
 2576 0076 1BA8     		add	r0, sp, #108
 2577 0078 FFF7FEFF 		bl	dn_eq
 2578              	.LVL270:
1793:src/display.c **** 	  dn_inc(&w);
 2579              		.loc 1 1793 5 view .LVU798
 2580 007c 0028     		cmp	r0, #0
 2581 007e 70D1     		bne	.L271
 2582              	.L245:
1798:src/display.c **** 	  if (!dn_eq0(&w)) {
 2583              		.loc 1 1798 2 is_stmt 1 view .LVU799
1798:src/display.c **** 	  if (!dn_eq0(&w)) {
 2584              		.loc 1 1798 6 is_stmt 0 view .LVU800
 2585 0080 474B     		ldr	r3, .L274+8
 2586 0082 1B68     		ldr	r3, [r3]
 2587 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1798:src/display.c **** 	  if (!dn_eq0(&w)) {
 2588              		.loc 1 1798 5 view .LVU801
 2589 0088 DB06     		lsls	r3, r3, #27
 2590 008a 55D4     		bmi	.L246
1799:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2591              		.loc 1 1799 4 is_stmt 1 view .LVU802
1799:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2592              		.loc 1 1799 9 is_stmt 0 view .LVU803
 2593 008c 12A8     		add	r0, sp, #72
 2594 008e FFF7FEFF 		bl	dn_eq0
 2595              	.LVL271:
1799:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2596              		.loc 1 1799 7 view .LVU804
 2597 0092 0028     		cmp	r0, #0
 2598 0094 6CD0     		beq	.L272
1770:src/display.c **** 	int j;
ARM GAS  /tmp/cchf4YwX.s 			page 121


 2599              		.loc 1 1770 17 view .LVU805
 2600 0096 01AE     		add	r6, sp, #4
 2601              	.LVL272:
1770:src/display.c **** 	int j;
 2602              		.loc 1 1770 17 view .LVU806
 2603 0098 3546     		mov	r5, r6
 2604              	.L247:
 2605              	.LVL273:
1807:src/display.c **** 	*p++ = '/';
 2606              		.loc 1 1807 2 is_stmt 1 view .LVU807
1807:src/display.c **** 	*p++ = '/';
 2607              		.loc 1 1807 17 is_stmt 0 view .LVU808
 2608 009a 1BA8     		add	r0, sp, #108
 2609 009c FFF7FEFF 		bl	dn_to_int
 2610              	.LVL274:
 2611 00a0 0146     		mov	r1, r0
1807:src/display.c **** 	*p++ = '/';
 2612              		.loc 1 1807 6 view .LVU809
 2613 00a2 2846     		mov	r0, r5
 2614 00a4 FFF7FEFF 		bl	num_arg
 2615              	.LVL275:
1808:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2616              		.loc 1 1808 2 is_stmt 1 view .LVU810
1808:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2617              		.loc 1 1808 4 is_stmt 0 view .LVU811
 2618 00a8 0546     		mov	r5, r0
 2619              	.LVL276:
1808:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2620              		.loc 1 1808 7 view .LVU812
 2621 00aa 2F23     		movs	r3, #47
 2622 00ac 05F8013B 		strb	r3, [r5], #1
 2623              	.LVL277:
1809:src/display.c **** 	*p = '\0';
 2624              		.loc 1 1809 2 is_stmt 1 view .LVU813
1809:src/display.c **** 	*p = '\0';
 2625              		.loc 1 1809 17 is_stmt 0 view .LVU814
 2626 00b0 24A8     		add	r0, sp, #144
 2627 00b2 FFF7FEFF 		bl	dn_to_int
 2628              	.LVL278:
 2629 00b6 0146     		mov	r1, r0
1809:src/display.c **** 	*p = '\0';
 2630              		.loc 1 1809 6 view .LVU815
 2631 00b8 2846     		mov	r0, r5
 2632 00ba FFF7FEFF 		bl	num_arg
 2633              	.LVL279:
1810:src/display.c **** 	if ((p - 12) > buf) {
 2634              		.loc 1 1810 2 is_stmt 1 view .LVU816
1810:src/display.c **** 	if ((p - 12) > buf) {
 2635              		.loc 1 1810 5 is_stmt 0 view .LVU817
 2636 00be 0546     		mov	r5, r0
 2637 00c0 0023     		movs	r3, #0
 2638 00c2 05F80C39 		strb	r3, [r5], #-12
1811:src/display.c **** 	  p -= 12;
 2639              		.loc 1 1811 2 is_stmt 1 view .LVU818
1811:src/display.c **** 	  p -= 12;
 2640              		.loc 1 1811 5 is_stmt 0 view .LVU819
 2641 00c6 B542     		cmp	r5, r6
ARM GAS  /tmp/cchf4YwX.s 			page 122


 2642 00c8 32D8     		bhi	.L248
 2643 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2644              	.LVL280:
1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2645              		.loc 1 1815 12 is_stmt 1 view .LVU820
1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2646              		.loc 1 1815 2 is_stmt 0 view .LVU821
 2647 00ce 51B1     		cbz	r1, .L250
1814:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2648              		.loc 1 1814 11 view .LVU822
 2649 00d0 3546     		mov	r5, r6
 2650              	.LVL281:
 2651              	.L253:
1816:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2652              		.loc 1 1816 4 is_stmt 1 view .LVU823
 2653              	.LBB271:
 2654              	.LBI271:
 413:src/display.c ****   if (res) *res++ = ch;
 2655              		.loc 1 413 14 view .LVU824
 2656              	.LBB272:
 414:src/display.c ****   else	set_dig(base, ch);
 2657              		.loc 1 414 3 view .LVU825
 414:src/display.c ****   else	set_dig(base, ch);
 2658              		.loc 1 414 12 view .LVU826
 414:src/display.c ****   else	set_dig(base, ch);
 2659              		.loc 1 414 16 is_stmt 0 view .LVU827
 2660 00d2 2346     		mov	r3, r4
 2661              	.LVL282:
 414:src/display.c ****   else	set_dig(base, ch);
 2662              		.loc 1 414 6 view .LVU828
 2663 00d4 34B3     		cbz	r4, .L251
 2664              	.LVL283:
 414:src/display.c ****   else	set_dig(base, ch);
 2665              		.loc 1 414 19 view .LVU829
 2666 00d6 03F8011B 		strb	r1, [r3], #1
 2667              	.LVL284:
 414:src/display.c ****   else	set_dig(base, ch);
 2668              		.loc 1 414 16 view .LVU830
 2669 00da 1C46     		mov	r4, r3
 2670              	.LVL285:
 2671              	.L252:
 416:src/display.c **** }
 2672              		.loc 1 416 3 is_stmt 1 view .LVU831
 416:src/display.c **** }
 2673              		.loc 1 416 3 is_stmt 0 view .LVU832
 2674              	.LBE272:
 2675              	.LBE271:
1817:src/display.c **** 	}
 2676              		.loc 1 1817 4 is_stmt 1 view .LVU833
1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2677              		.loc 1 1815 12 is_stmt 0 view .LVU834
 2678 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2679              	.LVL286:
1817:src/display.c **** 	}
 2680              		.loc 1 1817 6 view .LVU835
 2681 00e0 0937     		adds	r7, r7, #9
 2682              	.LVL287:
ARM GAS  /tmp/cchf4YwX.s 			page 123


1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2683              		.loc 1 1815 24 is_stmt 1 view .LVU836
1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2684              		.loc 1 1815 12 view .LVU837
1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2685              		.loc 1 1815 2 is_stmt 0 view .LVU838
 2686 00e2 0029     		cmp	r1, #0
 2687 00e4 F5D1     		bne	.L253
 2688              	.LVL288:
 2689              	.L250:
1820:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2690              		.loc 1 1820 2 is_stmt 1 view .LVU839
1820:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2691              		.loc 1 1820 6 is_stmt 0 view .LVU840
 2692 00e6 2DA8     		add	r0, sp, #180
 2693 00e8 FFF7FEFF 		bl	dn_eq0
 2694              	.LVL289:
1820:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2695              		.loc 1 1820 5 view .LVU841
 2696 00ec F0B9     		cbnz	r0, .L261
1822:src/display.c **** 	  p = (char *)S7_fract_LT;
 2697              		.loc 1 1822 7 is_stmt 1 view .LVU842
1822:src/display.c **** 	  p = (char *)S7_fract_LT;
 2698              		.loc 1 1822 10 is_stmt 0 view .LVU843
 2699 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1825:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2700              		.loc 1 1825 6 view .LVU844
 2701 00f2 2C4D     		ldr	r5, .L274+12
 2702 00f4 2C4B     		ldr	r3, .L274+16
 2703 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2704 00fa 38BF     		it	cc
 2705 00fc 1D46     		movcc	r5, r3
 2706              	.L254:
 2707              	.LVL290:
1826:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2708              		.loc 1 1826 26 is_stmt 1 view .LVU845
 2709              	.LBB275:
 2710              	.LBB273:
 414:src/display.c ****   else	set_dig(base, ch);
 2711              		.loc 1 414 16 is_stmt 0 view .LVU846
 2712 00fe 6C26     		movs	r6, #108
 2713 0100 2021     		movs	r1, #32
 2714 0102 08E0     		b	.L257
 2715              	.LVL291:
 2716              	.L273:
 414:src/display.c ****   else	set_dig(base, ch);
 2717              		.loc 1 414 16 view .LVU847
 2718              	.LBE273:
 2719              	.LBE275:
 2720              	.LBB276:
 2721              	.LBB277:
 414:src/display.c ****   else	set_dig(base, ch);
 2722              		.loc 1 414 19 view .LVU848
 2723 0104 03F8011B 		strb	r1, [r3], #1
 2724              	.LVL292:
 414:src/display.c ****   else	set_dig(base, ch);
 2725              		.loc 1 414 16 view .LVU849
ARM GAS  /tmp/cchf4YwX.s 			page 124


 2726 0108 1C46     		mov	r4, r3
 2727              	.LVL293:
 2728              	.L256:
 416:src/display.c **** }
 2729              		.loc 1 416 3 is_stmt 1 view .LVU850
 416:src/display.c **** }
 2730              		.loc 1 416 3 is_stmt 0 view .LVU851
 2731              	.LBE277:
 2732              	.LBE276:
1828:src/display.c **** 	}
 2733              		.loc 1 1828 4 is_stmt 1 view .LVU852
1826:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2734              		.loc 1 1826 26 is_stmt 0 view .LVU853
 2735 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2736              	.LVL294:
1828:src/display.c **** 	}
 2737              		.loc 1 1828 6 view .LVU854
 2738 010e 0736     		adds	r6, r6, #7
 2739              	.LVL295:
1826:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2740              		.loc 1 1826 38 is_stmt 1 view .LVU855
1826:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2741              		.loc 1 1826 26 view .LVU856
1826:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2742              		.loc 1 1826 2 is_stmt 0 view .LVU857
 2743 0110 0029     		cmp	r1, #0
 2744 0112 3FF47DAF 		beq	.L258
 2745              	.LVL296:
 2746              	.L257:
1827:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2747              		.loc 1 1827 4 is_stmt 1 view .LVU858
 2748              	.LBB279:
 2749              	.LBI276:
 413:src/display.c ****   if (res) *res++ = ch;
 2750              		.loc 1 413 14 view .LVU859
 2751              	.LBB278:
 414:src/display.c ****   else	set_dig(base, ch);
 2752              		.loc 1 414 3 view .LVU860
 414:src/display.c ****   else	set_dig(base, ch);
 2753              		.loc 1 414 12 view .LVU861
 414:src/display.c ****   else	set_dig(base, ch);
 2754              		.loc 1 414 16 is_stmt 0 view .LVU862
 2755 0116 2346     		mov	r3, r4
 2756              	.LVL297:
 414:src/display.c ****   else	set_dig(base, ch);
 2757              		.loc 1 414 6 view .LVU863
 2758 0118 002C     		cmp	r4, #0
 2759 011a F3D1     		bne	.L273
 2760              	.LVL298:
 415:src/display.c ****   return res;
 2761              		.loc 1 415 8 is_stmt 1 view .LVU864
 2762 011c 3046     		mov	r0, r6
 2763 011e FFF7FEFF 		bl	set_dig
 2764              	.LVL299:
 415:src/display.c ****   return res;
 2765              		.loc 1 415 8 is_stmt 0 view .LVU865
 2766 0122 F2E7     		b	.L256
ARM GAS  /tmp/cchf4YwX.s 			page 125


 2767              	.LVL300:
 2768              	.L251:
 415:src/display.c ****   return res;
 2769              		.loc 1 415 8 view .LVU866
 2770              	.LBE278:
 2771              	.LBE279:
 2772              	.LBB280:
 2773              	.LBB274:
 415:src/display.c ****   return res;
 2774              		.loc 1 415 8 is_stmt 1 view .LVU867
 2775 0124 3846     		mov	r0, r7
 2776 0126 FFF7FEFF 		bl	set_dig
 2777              	.LVL301:
 415:src/display.c ****   return res;
 2778              		.loc 1 415 8 is_stmt 0 view .LVU868
 2779 012a D7E7     		b	.L252
 2780              	.LVL302:
 2781              	.L261:
 415:src/display.c ****   return res;
 2782              		.loc 1 415 8 view .LVU869
 2783              	.LBE274:
 2784              	.LBE280:
1821:src/display.c **** 	else if (decNumberIsNegative(&t))
 2785              		.loc 1 1821 6 view .LVU870
 2786 012c 1F4D     		ldr	r5, .L274+20
 2787 012e E6E7     		b	.L254
 2788              	.LVL303:
 2789              	.L248:
1812:src/display.c **** 	  *p = '<';
 2790              		.loc 1 1812 4 is_stmt 1 view .LVU871
1813:src/display.c **** 	} else	p = buf;
 2791              		.loc 1 1813 4 view .LVU872
1813:src/display.c **** 	} else	p = buf;
 2792              		.loc 1 1813 7 is_stmt 0 view .LVU873
 2793 0130 3C21     		movs	r1, #60
 2794 0132 00F80C1C 		strb	r1, [r0, #-12]
 2795              	.LVL304:
1815:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1815 12 is_stmt 1 view .LVU874
 2797 0136 CCE7     		b	.L253
 2798              	.LVL305:
 2799              	.L246:
1804:src/display.c **** 	  dn_add(&n, &n, &x);
 2800              		.loc 1 1804 4 view .LVU875
 2801 0138 12A9     		add	r1, sp, #72
 2802 013a 24AA     		add	r2, sp, #144
 2803 013c 09A8     		add	r0, sp, #36
 2804 013e FFF7FEFF 		bl	dn_multiply
 2805              	.LVL306:
1805:src/display.c **** 	}
 2806              		.loc 1 1805 4 view .LVU876
 2807 0142 1BA9     		add	r1, sp, #108
 2808 0144 09AA     		add	r2, sp, #36
 2809 0146 0846     		mov	r0, r1
1770:src/display.c **** 	int j;
 2810              		.loc 1 1770 17 is_stmt 0 view .LVU877
 2811 0148 01AE     		add	r6, sp, #4
ARM GAS  /tmp/cchf4YwX.s 			page 126


 2812              	.LVL307:
1805:src/display.c **** 	}
 2813              		.loc 1 1805 4 view .LVU878
 2814 014a FFF7FEFF 		bl	dn_add
 2815              	.LVL308:
1770:src/display.c **** 	int j;
 2816              		.loc 1 1770 17 view .LVU879
 2817 014e 3546     		mov	r5, r6
 2818 0150 A3E7     		b	.L247
 2819              	.LVL309:
 2820              	.L270:
1781:src/display.c **** 	    *res++ += '-';
 2821              		.loc 1 1781 4 is_stmt 1 view .LVU880
1781:src/display.c **** 	    *res++ += '-';
 2822              		.loc 1 1781 7 is_stmt 0 view .LVU881
 2823 0152 D4B1     		cbz	r4, .L244
1782:src/display.c **** 	  else
 2824              		.loc 1 1782 6 is_stmt 1 view .LVU882
1782:src/display.c **** 	  else
 2825              		.loc 1 1782 10 is_stmt 0 view .LVU883
 2826 0154 2346     		mov	r3, r4
 2827              	.LVL310:
1782:src/display.c **** 	  else
 2828              		.loc 1 1782 13 view .LVU884
 2829 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2830              	.LVL311:
1782:src/display.c **** 	  else
 2831              		.loc 1 1782 13 view .LVU885
 2832 015a 2D32     		adds	r2, r2, #45
 2833 015c 2270     		strb	r2, [r4]
1782:src/display.c **** 	  else
 2834              		.loc 1 1782 10 view .LVU886
 2835 015e 1C46     		mov	r4, r3
 2836              	.LVL312:
1782:src/display.c **** 	  else
 2837              		.loc 1 1782 10 view .LVU887
 2838 0160 71E7     		b	.L243
 2839              	.LVL313:
 2840              	.L271:
1794:src/display.c **** 	  decNumberZero(&n);
 2841              		.loc 1 1794 4 is_stmt 1 view .LVU888
 2842 0162 12A8     		add	r0, sp, #72
 2843 0164 FFF7FEFF 		bl	dn_inc
 2844              	.LVL314:
1795:src/display.c **** 	}
 2845              		.loc 1 1795 4 view .LVU889
 2846 0168 1BA8     		add	r0, sp, #108
 2847 016a FFF7FEFF 		bl	decNumberZero
 2848              	.LVL315:
 2849 016e 87E7     		b	.L245
 2850              	.L272:
1800:src/display.c **** 	    *p++ = ' ';
 2851              		.loc 1 1800 6 view .LVU890
1800:src/display.c **** 	    *p++ = ' ';
 2852              		.loc 1 1800 21 is_stmt 0 view .LVU891
 2853 0170 12A8     		add	r0, sp, #72
 2854 0172 FFF7FEFF 		bl	dn_to_int
ARM GAS  /tmp/cchf4YwX.s 			page 127


 2855              	.LVL316:
1800:src/display.c **** 	    *p++ = ' ';
 2856              		.loc 1 1800 10 view .LVU892
 2857 0176 01AE     		add	r6, sp, #4
 2858              	.LVL317:
1800:src/display.c **** 	    *p++ = ' ';
 2859              		.loc 1 1800 21 view .LVU893
 2860 0178 0146     		mov	r1, r0
1800:src/display.c **** 	    *p++ = ' ';
 2861              		.loc 1 1800 10 view .LVU894
 2862 017a 3046     		mov	r0, r6
 2863 017c FFF7FEFF 		bl	num_arg
 2864              	.LVL318:
1801:src/display.c **** 	  }
 2865              		.loc 1 1801 6 is_stmt 1 view .LVU895
1801:src/display.c **** 	  }
 2866              		.loc 1 1801 8 is_stmt 0 view .LVU896
 2867 0180 0546     		mov	r5, r0
 2868              	.LVL319:
1801:src/display.c **** 	  }
 2869              		.loc 1 1801 11 view .LVU897
 2870 0182 2023     		movs	r3, #32
 2871 0184 05F8013B 		strb	r3, [r5], #1
 2872              	.LVL320:
1801:src/display.c **** 	  }
 2873              		.loc 1 1801 11 view .LVU898
 2874 0188 87E7     		b	.L247
 2875              	.LVL321:
 2876              	.L244:
1784:src/display.c **** 	}
 2877              		.loc 1 1784 6 is_stmt 1 view .LVU899
 2878              	.LBB281:
 2879              	.LBI281:
 302:src/display.c **** {
 2880              		.loc 1 302 13 view .LVU900
 2881              	.LBB282:
 304:src/display.c ****   set_dot(MANT_SIGN);
 2882              		.loc 1 304 3 view .LVU901
 304:src/display.c ****   set_dot(MANT_SIGN);
 2883              		.loc 1 304 25 is_stmt 0 view .LVU902
 2884 018a 094B     		ldr	r3, .L274+24
 2885 018c 2D22     		movs	r2, #45
 305:src/display.c **** }
 2886              		.loc 1 305 3 view .LVU903
 2887 018e 8120     		movs	r0, #129
 304:src/display.c ****   set_dot(MANT_SIGN);
 2888              		.loc 1 304 25 view .LVU904
 2889 0190 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 2890              		.loc 1 305 3 is_stmt 1 view .LVU905
 2891 0192 FFF7FEFF 		bl	set_dot
 2892              	.LVL322:
 306:src/display.c **** 
 2893              		.loc 1 306 1 is_stmt 0 view .LVU906
 2894 0196 56E7     		b	.L243
 2895              	.L275:
 2896              		.align	2
ARM GAS  /tmp/cchf4YwX.s 			page 128


 2897              	.L274:
 2898 0198 00000000 		.word	const_100000
 2899 019c 00000000 		.word	const_0_0001
 2900 01a0 00000000 		.word	main_ram
 2901 01a4 00000000 		.word	.LANCHOR8
 2902 01a8 00000000 		.word	.LANCHOR10
 2903 01ac 00000000 		.word	.LANCHOR9
 2904 01b0 00000000 		.word	LastDisplayedNumber
 2905              	.LBE282:
 2906              	.LBE281:
 2907              	.LBE270:
 2908              	.LBE269:
 2909              		.cfi_endproc
 2910              	.LFE23:
 2912              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2913              		.align	2
 2914              	.LC1:
 2915 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2915      36376F39 
 2915      44313233 
 2915      34356800 
 2916              		.section	.text.carry_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.syntax unified
 2920              		.thumb
 2921              		.thumb_func
 2922              		.fpu fpv4-sp-d16
 2924              	carry_overflow:
 2925              	.LFB15:
 568:src/display.c ****       const int base = SEGS_EXP_BASE;
 2926              		.loc 1 568 38 is_stmt 1 view -0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 569:src/display.c ****       int c;
 2930              		.loc 1 569 7 view .LVU908
 2931              	.LVL323:
 570:src/display.c ****       unsigned int b;
 2932              		.loc 1 570 7 view .LVU909
 571:src/display.c **** 
 2933              		.loc 1 571 7 view .LVU910
 574:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2934              		.loc 1 574 7 view .LVU911
 568:src/display.c ****       const int base = SEGS_EXP_BASE;
 2935              		.loc 1 568 38 is_stmt 0 view .LVU912
 2936 0000 10B5     		push	{r4, lr}
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 4, -8
 2939              		.cfi_offset 14, -4
 574:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2940              		.loc 1 574 21 view .LVU913
 2941 0002 1B4B     		ldr	r3, .L289
 2942 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0006 023B     		subs	r3, r3, #2
 2944 0008 DBB2     		uxtb	r3, r3
 2945 000a 032B     		cmp	r3, #3
ARM GAS  /tmp/cchf4YwX.s 			page 129


 2946 000c 14D8     		bhi	.L277
 2947 000e 194A     		ldr	r2, .L289+4
 2948 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2949              	.LVL324:
 583:src/display.c **** 	SET_EXP_SIGN;
 2950              		.loc 1 583 7 is_stmt 1 view .LVU914
 583:src/display.c **** 	SET_EXP_SIGN;
 2951              		.loc 1 583 18 is_stmt 0 view .LVU915
 2952 0014 A4F10B03 		sub	r3, r4, #11
 583:src/display.c **** 	SET_EXP_SIGN;
 2953              		.loc 1 583 10 view .LVU916
 2954 0018 042B     		cmp	r3, #4
 2955 001a 17D9     		bls	.L286
 2956              	.L279:
 585:src/display.c ****       set_dig(base, c);
 2957              		.loc 1 585 7 is_stmt 1 view .LVU917
 2958              	.LVL325:
 586:src/display.c **** 
 2959              		.loc 1 586 7 view .LVU918
 585:src/display.c ****       set_dig(base, c);
 2960              		.loc 1 585 28 is_stmt 0 view .LVU919
 2961 001c 164B     		ldr	r3, .L289+8
 2962 001e 1C44     		add	r4, r4, r3
 2963              	.LVL326:
 586:src/display.c **** 
 2964              		.loc 1 586 7 view .LVU920
 2965 0020 6C20     		movs	r0, #108
 2966 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2967 0026 FFF7FEFF 		bl	set_dig
 2968              	.LVL327:
 589:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2969              		.loc 1 589 7 is_stmt 1 view .LVU921
 589:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2970              		.loc 1 589 11 is_stmt 0 view .LVU922
 2971 002a FFF7FEFF 		bl	get_carry
 2972              	.LVL328:
 589:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2973              		.loc 1 589 10 view .LVU923
 2974 002e D0B9     		cbnz	r0, .L287
 2975              	.L280:
 591:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2976              		.loc 1 591 7 is_stmt 1 view .LVU924
 591:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2977              		.loc 1 591 11 is_stmt 0 view .LVU925
 2978 0030 FFF7FEFF 		bl	get_overflow
 2979              	.LVL329:
 591:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2980              		.loc 1 591 10 view .LVU926
 2981 0034 88B9     		cbnz	r0, .L288
 593:src/display.c **** 
 2982              		.loc 1 593 5 view .LVU927
 2983 0036 10BD     		pop	{r4, pc}
 2984              	.LVL330:
 2985              	.L277:
 579:src/display.c ****       }
 2986              		.loc 1 579 16 is_stmt 1 view .LVU928
 579:src/display.c ****       }
ARM GAS  /tmp/cchf4YwX.s 			page 130


 2987              		.loc 1 579 26 is_stmt 0 view .LVU929
 2988 0038 104B     		ldr	r3, .L289+12
 2989 003a 1B68     		ldr	r3, [r3]
 2990 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2991 0040 2409     		lsrs	r4, r4, #4
 579:src/display.c ****       }
 2992              		.loc 1 579 35 view .LVU930
 2993 0042 0134     		adds	r4, r4, #1
 2994              	.LVL331:
 579:src/display.c ****       }
 2995              		.loc 1 579 39 is_stmt 1 view .LVU931
 583:src/display.c **** 	SET_EXP_SIGN;
 2996              		.loc 1 583 7 view .LVU932
 583:src/display.c **** 	SET_EXP_SIGN;
 2997              		.loc 1 583 18 is_stmt 0 view .LVU933
 2998 0044 A4F10B03 		sub	r3, r4, #11
 583:src/display.c **** 	SET_EXP_SIGN;
 2999              		.loc 1 583 10 view .LVU934
 3000 0048 042B     		cmp	r3, #4
 3001 004a E7D8     		bhi	.L279
 3002              	.L286:
 584:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3003              		.loc 1 584 2 is_stmt 1 view .LVU935
 3004              	.LBB289:
 3005              	.LBI289:
 314:src/display.c **** {
 3006              		.loc 1 314 13 view .LVU936
 3007              	.LBB290:
 316:src/display.c ****   set_dot(EXP_SIGN);
 3008              		.loc 1 316 3 view .LVU937
 316:src/display.c ****   set_dot(EXP_SIGN);
 3009              		.loc 1 316 27 is_stmt 0 view .LVU938
 3010 004c 0C4B     		ldr	r3, .L289+16
 3011 004e 2D22     		movs	r2, #45
 317:src/display.c **** }
 3012              		.loc 1 317 3 view .LVU939
 3013 0050 8220     		movs	r0, #130
 316:src/display.c ****   set_dot(EXP_SIGN);
 3014              		.loc 1 316 27 view .LVU940
 3015 0052 1A70     		strb	r2, [r3]
 317:src/display.c **** }
 3016              		.loc 1 317 3 is_stmt 1 view .LVU941
 3017 0054 FFF7FEFF 		bl	set_dot
 3018              	.LVL332:
 318:src/display.c **** 
 3019              		.loc 1 318 1 is_stmt 0 view .LVU942
 3020 0058 E0E7     		b	.L279
 3021              	.LVL333:
 3022              	.L288:
 318:src/display.c **** 
 3023              		.loc 1 318 1 view .LVU943
 3024              	.LBE290:
 3025              	.LBE289:
 3026              	.LBB291:
 3027              	.LBI291:
 568:src/display.c ****       const int base = SEGS_EXP_BASE;
 3028              		.loc 1 568 17 is_stmt 1 view .LVU944
ARM GAS  /tmp/cchf4YwX.s 			page 131


 3029              	.LBB292:
 592:src/display.c ****     }
 3030              		.loc 1 592 2 view .LVU945
 3031              	.LBE292:
 3032              	.LBE291:
 593:src/display.c **** 
 3033              		.loc 1 593 5 is_stmt 0 view .LVU946
 3034 005a BDE81040 		pop	{r4, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 4
 3038              		.cfi_def_cfa_offset 0
 3039              	.LVL334:
 3040              	.LBB294:
 3041              	.LBB293:
 592:src/display.c ****     }
 3042              		.loc 1 592 2 view .LVU947
 3043 005e 6F21     		movs	r1, #111
 3044 0060 7A20     		movs	r0, #122
 3045 0062 FFF7FEBF 		b	set_dig
 3046              	.LVL335:
 3047              	.L287:
 3048              		.cfi_restore_state
 592:src/display.c ****     }
 3049              		.loc 1 592 2 view .LVU948
 3050              	.LBE293:
 3051              	.LBE294:
 590:src/display.c ****       if (get_overflow())
 3052              		.loc 1 590 2 is_stmt 1 view .LVU949
 3053 0066 6321     		movs	r1, #99
 3054 0068 7320     		movs	r0, #115
 3055 006a FFF7FEFF 		bl	set_dig
 3056              	.LVL336:
 3057 006e DFE7     		b	.L280
 3058              	.L290:
 3059              		.align	2
 3060              	.L289:
 3061 0070 00000000 		.word	StateWhileOn
 3062 0074 00000000 		.word	.LANCHOR11
 3063 0078 00000000 		.word	.LC1
 3064 007c 00000000 		.word	main_ram
 3065 0080 00000000 		.word	LastDisplayedExponent
 3066              		.cfi_endproc
 3067              	.LFE15:
 3069              		.global	__aeabi_uldivmod
 3070              		.section	.text.set_int_x,"ax",%progbits
 3071              		.align	1
 3072              		.p2align 2,,3
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv4-sp-d16
 3078              	set_int_x:
 3079              	.LVL337:
 3080              	.LFB18:
1481:src/display.c **** 	const int ws = word_size();
 3081              		.loc 1 1481 67 view -0
ARM GAS  /tmp/cchf4YwX.s 			page 132


 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 88
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
1481:src/display.c **** 	const int ws = word_size();
 3085              		.loc 1 1481 67 is_stmt 0 view .LVU951
 3086 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3087              		.cfi_def_cfa_offset 36
 3088              		.cfi_offset 4, -36
 3089              		.cfi_offset 5, -32
 3090              		.cfi_offset 6, -28
 3091              		.cfi_offset 7, -24
 3092              		.cfi_offset 8, -20
 3093              		.cfi_offset 9, -16
 3094              		.cfi_offset 10, -12
 3095              		.cfi_offset 11, -8
 3096              		.cfi_offset 14, -4
 3097 0004 97B0     		sub	sp, sp, #92
 3098              		.cfi_def_cfa_offset 128
1481:src/display.c **** 	const int ws = word_size();
 3099              		.loc 1 1481 67 view .LVU952
 3100 0006 1546     		mov	r5, r2
 3101 0008 0646     		mov	r6, r0
 3102 000a 0F46     		mov	r7, r1
1482:src/display.c **** 	unsigned int b;
 3103              		.loc 1 1482 2 is_stmt 1 view .LVU953
1482:src/display.c **** 	unsigned int b;
 3104              		.loc 1 1482 17 is_stmt 0 view .LVU954
 3105 000c FFF7FEFF 		bl	word_size
 3106              	.LVL338:
1482:src/display.c **** 	unsigned int b;
 3107              		.loc 1 1482 17 view .LVU955
 3108 0010 CD4B     		ldr	r3, .L383
 3109 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3110 0014 023B     		subs	r3, r3, #2
 3111 0016 DBB2     		uxtb	r3, r3
1488:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3112              		.loc 1 1488 6 view .LVU956
 3113 0018 0022     		movs	r2, #0
 3114 001a 032B     		cmp	r3, #3
1482:src/display.c **** 	unsigned int b;
 3115              		.loc 1 1482 17 view .LVU957
 3116 001c 8346     		mov	fp, r0
 3117              	.LVL339:
1483:src/display.c **** 	long long int vs = value;
 3118              		.loc 1 1483 2 is_stmt 1 view .LVU958
1484:src/display.c **** 	unsigned long long int v;
 3119              		.loc 1 1484 2 view .LVU959
1485:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3120              		.loc 1 1485 2 view .LVU960
1486:src/display.c **** 	int i, j, k;
 3121              		.loc 1 1486 2 view .LVU961
1487:src/display.c **** 	int sign = 0;
 3122              		.loc 1 1487 2 view .LVU962
1488:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3123              		.loc 1 1488 2 view .LVU963
1488:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3124              		.loc 1 1488 6 is_stmt 0 view .LVU964
ARM GAS  /tmp/cchf4YwX.s 			page 133


 3125 001e 0492     		str	r2, [sp, #16]
1489:src/display.c **** 
 3126              		.loc 1 1489 2 is_stmt 1 view .LVU965
 3127              	.LVL340:
1491:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3128              		.loc 1 1491 2 view .LVU966
 3129 0020 00F24181 		bhi	.L292
 3130 0024 C94A     		ldr	r2, .L383+4
 3131 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3132              	.LVL341:
1499:src/display.c **** 	  IntMaxWindow = 0;
 3133              		.loc 1 1499 2 view .LVU967
1499:src/display.c **** 	  IntMaxWindow = 0;
 3134              		.loc 1 1499 5 is_stmt 0 view .LVU968
 3135 002a 002D     		cmp	r5, #0
 3136 002c 00F04181 		beq	.L374
 3137              	.LVL342:
 3138              	.L294:
1504:src/display.c **** 	  v = extract_value(value, &sign);
 3139              		.loc 1 1504 2 is_stmt 1 view .LVU969
1504:src/display.c **** 	  v = extract_value(value, &sign);
 3140              		.loc 1 1504 24 is_stmt 0 view .LVU970
 3141 0030 0AF1FF33 		add	r3, r10, #-1
1504:src/display.c **** 	  v = extract_value(value, &sign);
 3142              		.loc 1 1504 30 view .LVU971
 3143 0034 47F67574 		movw	r4, #32629
 3144 0038 1C41     		asrs	r4, r4, r3
1504:src/display.c **** 	  v = extract_value(value, &sign);
 3145              		.loc 1 1504 5 view .LVU972
 3146 003a 14F00104 		ands	r4, r4, #1
 3147 003e 40F0F380 		bne	.L375
1521:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3148              		.loc 1 1521 4 is_stmt 1 view .LVU973
1521:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3149              		.loc 1 1521 7 is_stmt 0 view .LVU974
 3150 0042 BBF13F0F 		cmp	fp, #63
 3151 0046 17DC     		bgt	.L305
 3152              	.LBB295:
1522:src/display.c **** 	    vs &= mask;
 3153              		.loc 1 1522 6 is_stmt 1 view .LVU975
1522:src/display.c **** 	    vs &= mask;
 3154              		.loc 1 1522 38 is_stmt 0 view .LVU976
 3155 0048 0121     		movs	r1, #1
 3156 004a ABF1200C 		sub	ip, fp, #32
 3157 004e CBF12000 		rsb	r0, fp, #32
 3158 0052 21FA00F0 		lsr	r0, r1, r0
 3159 0056 01FA0CF3 		lsl	r3, r1, ip
 3160 005a 01FA0BF2 		lsl	r2, r1, fp
 3161 005e 0343     		orrs	r3, r3, r0
 3162              	.LVL343:
1523:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3163              		.loc 1 1523 6 is_stmt 1 view .LVU977
1522:src/display.c **** 	    vs &= mask;
 3164              		.loc 1 1522 26 is_stmt 0 view .LVU978
 3165 0060 12F1FF30 		adds	r0, r2, #-1
 3166 0064 43F1FF31 		adc	r1, r3, #-1
1523:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
ARM GAS  /tmp/cchf4YwX.s 			page 134


 3167              		.loc 1 1523 9 view .LVU979
 3168 0068 3040     		ands	r0, r0, r6
 3169 006a 3940     		ands	r1, r1, r7
 3170              	.LVL344:
1524:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1524 9 view .LVU980
 3172 006c BAF10A0F 		cmp	r10, #10
1523:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3173              		.loc 1 1523 9 view .LVU981
 3174 0070 0646     		mov	r6, r0
 3175              	.LVL345:
1523:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3176              		.loc 1 1523 9 view .LVU982
 3177 0072 0F46     		mov	r7, r1
1524:src/display.c **** 	      vs |= ~mask;
 3178              		.loc 1 1524 6 is_stmt 1 view .LVU983
1524:src/display.c **** 	      vs |= ~mask;
 3179              		.loc 1 1524 9 is_stmt 0 view .LVU984
 3180 0074 00F03D81 		beq	.L376
 3181              	.LVL346:
 3182              	.L305:
1524:src/display.c **** 	      vs |= ~mask;
 3183              		.loc 1 1524 9 view .LVU985
 3184              	.LBE295:
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3185              		.loc 1 1528 4 is_stmt 1 view .LVU986
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3186              		.loc 1 1528 8 is_stmt 0 view .LVU987
 3187 0078 B54B     		ldr	r3, .L383+8
 3188 007a 1B68     		ldr	r3, [r3]
 3189 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3190              		.loc 1 1528 7 view .LVU988
 3191 0080 9A07     		lsls	r2, r3, #30
 3192 0082 41D5     		bpl	.L336
1531:src/display.c **** 	    v = (unsigned long long int)vs;
 3193              		.loc 1 1531 11 is_stmt 1 view .LVU989
 3194              	.LBB296:
1539:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3195              		.loc 1 1539 6 view .LVU990
1540:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3196              		.loc 1 1540 6 view .LVU991
1540:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3197              		.loc 1 1540 25 is_stmt 0 view .LVU992
 3198 0084 4FEA5A02 		lsr	r2, r10, #1
 3199              	.LVL347:
1541:src/display.c **** 	    v = (unsigned long long int)vs;
 3200              		.loc 1 1541 6 is_stmt 1 view .LVU993
1541:src/display.c **** 	    v = (unsigned long long int)vs;
 3201              		.loc 1 1541 43 is_stmt 0 view .LVU994
 3202 0088 12F00A0F 		tst	r2, #10
 3203 008c 14BF     		ite	ne
 3204 008e 0123     		movne	r3, #1
 3205 0090 0023     		moveq	r3, #0
1541:src/display.c **** 	    v = (unsigned long long int)vs;
 3206              		.loc 1 1541 70 view .LVU995
 3207 0092 12F00C0F 		tst	r2, #12
ARM GAS  /tmp/cchf4YwX.s 			page 135


 3208 0096 18BF     		it	ne
 3209 0098 43F00203 		orrne	r3, r3, #2
 3210              	.LVL348:
 3211              	.L311:
1542:src/display.c **** 
 3212              		.loc 1 1542 6 is_stmt 1 discriminator 4 view .LVU996
1544:src/display.c **** 	    for (i=0; i<n; i++) {
 3213              		.loc 1 1544 14 is_stmt 0 discriminator 4 view .LVU997
 3214 009c 0BEB0308 		add	r8, fp, r3
1544:src/display.c **** 	    for (i=0; i<n; i++) {
 3215              		.loc 1 1544 27 discriminator 4 view .LVU998
 3216 00a0 0133     		adds	r3, r3, #1
 3217              	.LVL349:
1544:src/display.c **** 	    for (i=0; i<n; i++) {
 3218              		.loc 1 1544 21 discriminator 4 view .LVU999
 3219 00a2 B8FBF3F8 		udiv	r8, r8, r3
1545:src/display.c **** 	      const int r = v % b;
 3220              		.loc 1 1545 6 discriminator 4 view .LVU1000
 3221 00a6 B8F1000F 		cmp	r8, #0
1542:src/display.c **** 
 3222              		.loc 1 1542 8 discriminator 4 view .LVU1001
 3223 00aa 3046     		mov	r0, r6
 3224 00ac 3946     		mov	r1, r7
 3225              	.LVL350:
1544:src/display.c **** 	    for (i=0; i<n; i++) {
 3226              		.loc 1 1544 6 is_stmt 1 discriminator 4 view .LVU1002
1545:src/display.c **** 	      const int r = v % b;
 3227              		.loc 1 1545 6 discriminator 4 view .LVU1003
1545:src/display.c **** 	      const int r = v % b;
 3228              		.loc 1 1545 16 discriminator 4 view .LVU1004
1545:src/display.c **** 	      const int r = v % b;
 3229              		.loc 1 1545 6 is_stmt 0 discriminator 4 view .LVU1005
 3230 00ae 40F38381 		ble	.L337
 3231 00b2 05AC     		add	r4, sp, #20
 3232 00b4 DFF8A4B2 		ldr	fp, .L383+20
 3233              	.LVL351:
1545:src/display.c **** 	      const int r = v % b;
 3234              		.loc 1 1545 6 discriminator 4 view .LVU1006
 3235 00b8 08EB0406 		add	r6, r8, r4
 3236              	.LVL352:
 3237              	.L312:
 3238              	.LBB297:
1546:src/display.c **** 	      v /= b;
 3239              		.loc 1 1546 8 is_stmt 1 discriminator 3 view .LVU1007
 3240 00bc 5246     		mov	r2, r10
 3241 00be 0023     		movs	r3, #0
 3242 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3243              	.LVL353:
1547:src/display.c **** 	      buf[i] = DIGITS[r];
 3244              		.loc 1 1547 8 discriminator 3 view .LVU1008
1548:src/display.c **** 	    }
 3245              		.loc 1 1548 15 is_stmt 0 discriminator 3 view .LVU1009
 3246 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3247 00c8 04F8013B 		strb	r3, [r4], #1
 3248              	.LVL354:
1548:src/display.c **** 	    }
 3249              		.loc 1 1548 8 is_stmt 1 discriminator 3 view .LVU1010
ARM GAS  /tmp/cchf4YwX.s 			page 136


 3250              	.LBE297:
1545:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1545 21 discriminator 3 view .LVU1011
1545:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1545 16 discriminator 3 view .LVU1012
1545:src/display.c **** 	      const int r = v % b;
 3253              		.loc 1 1545 6 is_stmt 0 discriminator 3 view .LVU1013
 3254 00cc B442     		cmp	r4, r6
 3255 00ce F5D1     		bne	.L312
 3256 00d0 08F1FF31 		add	r1, r8, #-1
 3257              	.LVL355:
1545:src/display.c **** 	      const int r = v % b;
 3258              		.loc 1 1545 6 view .LVU1014
 3259 00d4 4446     		mov	r4, r8
 3260              	.LVL356:
 3261              	.L304:
1545:src/display.c **** 	      const int r = v % b;
 3262              		.loc 1 1545 6 view .LVU1015
 3263              	.LBE296:
1558:src/display.c **** 	if (res) {
 3264              		.loc 1 1558 2 is_stmt 1 view .LVU1016
1559:src/display.c **** 	  if (sign) *res++ = '-';
 3265              		.loc 1 1559 2 view .LVU1017
1559:src/display.c **** 	  if (sign) *res++ = '-';
 3266              		.loc 1 1559 5 is_stmt 0 view .LVU1018
 3267 00d6 002D     		cmp	r5, #0
 3268 00d8 3ED0     		beq	.L313
 3269              	.LVL357:
 3270              	.L377:
1560:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3271              		.loc 1 1560 4 is_stmt 1 view .LVU1019
1560:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3272              		.loc 1 1560 7 is_stmt 0 view .LVU1020
 3273 00da 049B     		ldr	r3, [sp, #16]
 3274 00dc 13B1     		cbz	r3, .L314
1560:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3275              		.loc 1 1560 14 is_stmt 1 discriminator 1 view .LVU1021
 3276              	.LVL358:
1560:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3277              		.loc 1 1560 21 is_stmt 0 discriminator 1 view .LVU1022
 3278 00de 2D23     		movs	r3, #45
 3279 00e0 05F8013B 		strb	r3, [r5], #1
 3280              	.LVL359:
 3281              	.L314:
1561:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3282              		.loc 1 1561 4 is_stmt 1 view .LVU1023
1561:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3283              		.loc 1 1561 7 is_stmt 0 view .LVU1024
 3284 00e4 0D2C     		cmp	r4, #13
 3285 00e6 00F3E980 		bgt	.L315
1568:src/display.c **** 	      *res++ = buf[i];
 3286              		.loc 1 1568 12 is_stmt 1 view .LVU1025
 3287              	.LVL360:
1568:src/display.c **** 	      *res++ = buf[i];
 3288              		.loc 1 1568 12 is_stmt 0 view .LVU1026
 3289 00ea 481C     		adds	r0, r1, #1
 3290 00ec 09D0     		beq	.L291
ARM GAS  /tmp/cchf4YwX.s 			page 137


 3291 00ee 0131     		adds	r1, r1, #1
 3292 00f0 05AA     		add	r2, sp, #20
 3293 00f2 013D     		subs	r5, r5, #1
 3294 00f4 1144     		add	r1, r1, r2
 3295              	.LVL361:
 3296              	.L318:
1569:src/display.c **** 	  }
 3297              		.loc 1 1569 8 is_stmt 1 view .LVU1027
1569:src/display.c **** 	  }
 3298              		.loc 1 1569 15 is_stmt 0 view .LVU1028
 3299 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3300              	.LVL362:
1569:src/display.c **** 	  }
 3301              		.loc 1 1569 15 view .LVU1029
 3302 00fa 05F8013F 		strb	r3, [r5, #1]!
 3303              	.LVL363:
1568:src/display.c **** 	      *res++ = buf[i];
 3304              		.loc 1 1568 12 is_stmt 1 view .LVU1030
1568:src/display.c **** 	      *res++ = buf[i];
 3305              		.loc 1 1568 12 is_stmt 0 view .LVU1031
 3306 00fe 9142     		cmp	r1, r2
 3307 0100 F9D1     		bne	.L318
 3308              	.LVL364:
 3309              	.L291:
1616:src/display.c **** 
 3310              		.loc 1 1616 7 view .LVU1032
 3311 0102 17B0     		add	sp, sp, #92
 3312              		.cfi_remember_state
 3313              		.cfi_def_cfa_offset 36
 3314              		@ sp needed
 3315 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3316              	.LVL365:
 3317              	.L336:
 3318              		.cfi_restore_state
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3319              		.loc 1 1528 25 discriminator 1 view .LVU1033
 3320 0108 56EA0703 		orrs	r3, r6, r7
 3321 010c 00F0C480 		beq	.L299
1531:src/display.c **** 	    v = (unsigned long long int)vs;
 3322              		.loc 1 1531 11 is_stmt 1 view .LVU1034
1532:src/display.c **** 	    for (i=0; v != 0; i++) {
 3323              		.loc 1 1532 6 view .LVU1035
 3324 0110 DFF848B2 		ldr	fp, .L383+20
 3325              	.LVL366:
1532:src/display.c **** 	    for (i=0; v != 0; i++) {
 3326              		.loc 1 1532 6 is_stmt 0 view .LVU1036
 3327 0114 CDF800A0 		str	r10, [sp]
 3328 0118 0023     		movs	r3, #0
1532:src/display.c **** 	    for (i=0; v != 0; i++) {
 3329              		.loc 1 1532 8 view .LVU1037
 3330 011a B046     		mov	r8, r6
 3331 011c D946     		mov	r9, fp
 3332 011e 3E46     		mov	r6, r7
1533:src/display.c **** 	      const int r = v % b;
 3333              		.loc 1 1533 6 is_stmt 1 view .LVU1038
 3334              	.LVL367:
1533:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/cchf4YwX.s 			page 138


 3335              		.loc 1 1533 16 view .LVU1039
 3336 0120 9B46     		mov	fp, r3
 3337 0122 05AF     		add	r7, sp, #20
 3338              	.LVL368:
 3339              	.L310:
 3340              	.LBB298:
1534:src/display.c **** 	      v /= b;
 3341              		.loc 1 1534 8 discriminator 3 view .LVU1040
 3342 0124 4046     		mov	r0, r8
 3343 0126 3146     		mov	r1, r6
 3344 0128 5246     		mov	r2, r10
 3345 012a 5B46     		mov	r3, fp
 3346 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3347              	.LVL369:
 3348 0130 3346     		mov	r3, r6
 3349 0132 9446     		mov	ip, r2
 3350              	.LVL370:
1535:src/display.c **** 	      buf[i] = DIGITS[r];
 3351              		.loc 1 1535 8 discriminator 3 view .LVU1041
 3352              	.LBE298:
1533:src/display.c **** 	      const int r = v % b;
 3353              		.loc 1 1533 6 is_stmt 0 discriminator 3 view .LVU1042
 3354 0134 5B45     		cmp	r3, fp
 3355 0136 4246     		mov	r2, r8
 3356              	.LVL371:
 3357              	.LBB299:
1536:src/display.c **** 	    }
 3358              		.loc 1 1536 15 discriminator 3 view .LVU1043
 3359 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3360              	.LVL372:
1536:src/display.c **** 	    }
 3361              		.loc 1 1536 15 discriminator 3 view .LVU1044
 3362 013c 07F801CB 		strb	ip, [r7], #1
 3363              	.LBE299:
1533:src/display.c **** 	      const int r = v % b;
 3364              		.loc 1 1533 6 discriminator 3 view .LVU1045
 3365 0140 08BF     		it	eq
 3366 0142 5245     		cmpeq	r2, r10
 3367              	.LBB300:
1535:src/display.c **** 	      buf[i] = DIGITS[r];
 3368              		.loc 1 1535 10 discriminator 3 view .LVU1046
 3369 0144 0E46     		mov	r6, r1
 3370              	.LVL373:
1536:src/display.c **** 	    }
 3371              		.loc 1 1536 8 is_stmt 1 discriminator 3 view .LVU1047
 3372              	.LBE300:
1533:src/display.c **** 	      const int r = v % b;
 3373              		.loc 1 1533 24 discriminator 3 view .LVU1048
 3374              	.LBB301:
1535:src/display.c **** 	      buf[i] = DIGITS[r];
 3375              		.loc 1 1535 10 is_stmt 0 discriminator 3 view .LVU1049
 3376 0146 8046     		mov	r8, r0
 3377 0148 2146     		mov	r1, r4
 3378              	.LVL374:
1535:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1535 10 discriminator 3 view .LVU1050
 3380              	.LBE301:
ARM GAS  /tmp/cchf4YwX.s 			page 139


1533:src/display.c **** 	      const int r = v % b;
 3381              		.loc 1 1533 25 discriminator 3 view .LVU1051
 3382 014a 04F10104 		add	r4, r4, #1
 3383              	.LVL375:
1533:src/display.c **** 	      const int r = v % b;
 3384              		.loc 1 1533 16 is_stmt 1 discriminator 3 view .LVU1052
1533:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1533 6 is_stmt 0 discriminator 3 view .LVU1053
 3386 014e E9D2     		bcs	.L310
 3387 0150 DDF800A0 		ldr	r10, [sp]
 3388              	.LVL376:
1558:src/display.c **** 	if (res) {
 3389              		.loc 1 1558 2 is_stmt 1 view .LVU1054
1559:src/display.c **** 	  if (sign) *res++ = '-';
 3390              		.loc 1 1559 2 view .LVU1055
1559:src/display.c **** 	  if (sign) *res++ = '-';
 3391              		.loc 1 1559 5 is_stmt 0 view .LVU1056
 3392 0154 002D     		cmp	r5, #0
 3393 0156 C0D1     		bne	.L377
 3394              	.LVL377:
 3395              	.L313:
 3396              	.LBB302:
1587:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3397              		.loc 1 1587 4 is_stmt 1 view .LVU1057
1587:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3398              		.loc 1 1587 33 is_stmt 0 view .LVU1058
 3399 0158 BAF1020F 		cmp	r10, #2
 3400 015c 00F0F080 		beq	.L378
 3401              	.LVL378:
1588:src/display.c **** 	    : b == 16 ? 2 : 3;
 3402              		.loc 1 1588 4 is_stmt 1 view .LVU1059
1588:src/display.c **** 	    : b == 16 ? 2 : 3;
 3403              		.loc 1 1588 30 is_stmt 0 view .LVU1060
 3404 0160 BAF1040F 		cmp	r10, #4
 3405 0164 00F01F81 		beq	.L379
1587:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3406              		.loc 1 1587 33 view .LVU1061
 3407 0168 BAF1100F 		cmp	r10, #16
 3408 016c 0CBF     		ite	eq
 3409 016e 4FF0020A 		moveq	r10, #2
 3410 0172 4FF0030A 		movne	r10, #3
 3411 0176 0C26     		movs	r6, #12
 3412              	.LVL379:
 3413              	.L320:
1590:src/display.c **** #endif
 3414              		.loc 1 1590 4 is_stmt 1 view .LVU1062
 3415 0178 0091     		str	r1, [sp]
 3416 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3417              	.LVL380:
1592:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3418              		.loc 1 1592 4 view .LVU1063
1593:src/display.c **** 	    State2.window = 0;
 3419              		.loc 1 1593 26 is_stmt 0 view .LVU1064
 3420 017e 724B     		ldr	r3, .L383
1592:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3421              		.loc 1 1592 17 view .LVU1065
 3422 0180 744A     		ldr	r2, .L383+12
ARM GAS  /tmp/cchf4YwX.s 			page 140


1593:src/display.c **** 	    State2.window = 0;
 3423              		.loc 1 1593 26 view .LVU1066
 3424 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1592:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3425              		.loc 1 1592 27 view .LVU1067
 3426 0184 0099     		ldr	r1, [sp]
 3427 0186 91FBF6F1 		sdiv	r1, r1, r6
1593:src/display.c **** 	    State2.window = 0;
 3428              		.loc 1 1593 8 view .LVU1068
 3429 018a C3F3C207 		ubfx	r7, r3, #3, #3
1593:src/display.c **** 	    State2.window = 0;
 3430              		.loc 1 1593 7 view .LVU1069
 3431 018e B942     		cmp	r1, r7
1592:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3432              		.loc 1 1592 17 view .LVU1070
 3433 0190 1160     		str	r1, [r2]
1593:src/display.c **** 	    State2.window = 0;
 3434              		.loc 1 1593 4 is_stmt 1 view .LVU1071
1593:src/display.c **** 	    State2.window = 0;
 3435              		.loc 1 1593 7 is_stmt 0 view .LVU1072
 3436 0192 C0F2F680 		blt	.L322
 3437 0196 06FB07F7 		mul	r7, r6, r7
 3438              	.L323:
1595:src/display.c **** 
 3439              		.loc 1 1595 4 is_stmt 1 view .LVU1073
1595:src/display.c **** 
 3440              		.loc 1 1595 11 is_stmt 0 view .LVU1074
 3441 019a 16AB     		add	r3, sp, #88
 3442 019c 16AA     		add	r2, sp, #88
 3443 019e 1C44     		add	r4, r4, r3
 3444              	.LVL381:
1595:src/display.c **** 
 3445              		.loc 1 1595 11 view .LVU1075
 3446 01a0 D519     		adds	r5, r2, r7
 3447 01a2 0023     		movs	r3, #0
 3448 01a4 453D     		subs	r5, r5, #69
 3449 01a6 04F8443C 		strb	r3, [r4, #-68]
1597:src/display.c **** 	  for (k = 0; k < 12; k++)
 3450              		.loc 1 1597 4 is_stmt 1 view .LVU1076
 3451              	.LVL382:
1598:src/display.c **** 	    if (buf[j + k] == '\0')
 3452              		.loc 1 1598 4 view .LVU1077
1598:src/display.c **** 	    if (buf[j + k] == '\0')
 3453              		.loc 1 1598 16 view .LVU1078
1595:src/display.c **** 
 3454              		.loc 1 1595 11 is_stmt 0 view .LVU1079
 3455 01aa 2A46     		mov	r2, r5
 3456              	.LVL383:
 3457              	.L325:
1599:src/display.c **** 	      break;
 3458              		.loc 1 1599 6 is_stmt 1 view .LVU1080
1598:src/display.c **** 	    if (buf[j + k] == '\0')
 3459              		.loc 1 1598 24 view .LVU1081
1599:src/display.c **** 	      break;
 3460              		.loc 1 1599 9 is_stmt 0 view .LVU1082
 3461 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3462 01b0 0029     		cmp	r1, #0
ARM GAS  /tmp/cchf4YwX.s 			page 141


 3463 01b2 00F0EC80 		beq	.L324
1598:src/display.c **** 	    if (buf[j + k] == '\0')
 3464              		.loc 1 1598 25 discriminator 2 view .LVU1083
 3465 01b6 0133     		adds	r3, r3, #1
 3466              	.LVL384:
1598:src/display.c **** 	    if (buf[j + k] == '\0')
 3467              		.loc 1 1598 16 is_stmt 1 discriminator 2 view .LVU1084
1598:src/display.c **** 	    if (buf[j + k] == '\0')
 3468              		.loc 1 1598 4 is_stmt 0 discriminator 2 view .LVU1085
 3469 01b8 0C2B     		cmp	r3, #12
 3470 01ba F7D1     		bne	.L325
1601:src/display.c **** 	    int ch = buf[j++];
 3471              		.loc 1 1601 4 view .LVU1086
 3472 01bc 4FF00B08 		mov	r8, #11
 3473              	.LVL385:
 3474              	.L326:
1601:src/display.c **** 	    int ch = buf[j++];
 3475              		.loc 1 1601 4 view .LVU1087
 3476 01c0 0137     		adds	r7, r7, #1
 3477 01c2 4744     		add	r7, r7, r8
 3478 01c4 4446     		mov	r4, r8
 3479 01c6 4FF0630B 		mov	fp, #99
 3480 01ca 09E0     		b	.L331
 3481              	.LVL386:
 3482              	.L380:
 3483              	.LBB303:
1607:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3484              		.loc 1 1607 8 view .LVU1088
 3485 01cc 624B     		ldr	r3, .L383+16
 3486 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3487              	.LVL387:
 3488              	.LBB304:
 3489              	.LBI304:
 373:src/display.c ****   if (sep == SEP_NONE)
 3490              		.loc 1 373 14 is_stmt 1 view .LVU1089
 3491              	.LBB305:
 374:src/display.c ****     return res;
 3492              		.loc 1 374 3 view .LVU1090
 374:src/display.c ****     return res;
 3493              		.loc 1 374 6 is_stmt 0 view .LVU1091
 3494 01d0 09B1     		cbz	r1, .L329
 374:src/display.c ****     return res;
 3495              		.loc 1 374 6 view .LVU1092
 3496 01d2 FFF7FEFF 		bl	set_separator.part.0
 3497              	.LVL388:
 3498              	.L329:
 374:src/display.c ****     return res;
 3499              		.loc 1 374 6 view .LVU1093
 3500              	.LBE305:
 3501              	.LBE304:
1608:src/display.c **** 	  }
 3502              		.loc 1 1608 6 is_stmt 1 discriminator 2 view .LVU1094
 3503              	.LBE303:
1601:src/display.c **** 	    int ch = buf[j++];
 3504              		.loc 1 1601 4 is_stmt 0 discriminator 2 view .LVU1095
 3505 01d6 013C     		subs	r4, r4, #1
1601:src/display.c **** 	    int ch = buf[j++];
ARM GAS  /tmp/cchf4YwX.s 			page 142


 3506              		.loc 1 1601 4 discriminator 2 view .LVU1096
 3507 01d8 621C     		adds	r2, r4, #1
 3508              	.LBB308:
1608:src/display.c **** 	  }
 3509              		.loc 1 1608 10 discriminator 2 view .LVU1097
 3510 01da ABF1090B 		sub	fp, fp, #9
 3511              	.LVL389:
1608:src/display.c **** 	  }
 3512              		.loc 1 1608 10 discriminator 2 view .LVU1098
 3513              	.LBE308:
1601:src/display.c **** 	    int ch = buf[j++];
 3514              		.loc 1 1601 24 is_stmt 1 discriminator 2 view .LVU1099
1601:src/display.c **** 	    int ch = buf[j++];
 3515              		.loc 1 1601 14 discriminator 2 view .LVU1100
1601:src/display.c **** 	    int ch = buf[j++];
 3516              		.loc 1 1601 4 is_stmt 0 discriminator 2 view .LVU1101
 3517 01de 16D0     		beq	.L335
 3518              	.LVL390:
 3519              	.L331:
 3520              	.LBB309:
1602:src/display.c **** 	    if (i >= shift)
 3521              		.loc 1 1602 6 is_stmt 1 view .LVU1102
1604:src/display.c **** 	    set_dig(dig, ch);
 3522              		.loc 1 1604 8 view .LVU1103
1602:src/display.c **** 	    if (i >= shift)
 3523              		.loc 1 1602 10 is_stmt 0 view .LVU1104
 3524 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1603:src/display.c **** 	      ch -= 030;
 3525              		.loc 1 1603 9 view .LVU1105
 3526 01e4 A8EB0402 		sub	r2, r8, r4
 3527 01e8 B242     		cmp	r2, r6
 3528 01ea A7EB0409 		sub	r9, r7, r4
 3529              	.LVL391:
1603:src/display.c **** 	      ch -= 030;
 3530              		.loc 1 1603 6 is_stmt 1 view .LVU1106
1605:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3531              		.loc 1 1605 6 is_stmt 0 view .LVU1107
 3532 01ee 5846     		mov	r0, fp
1604:src/display.c **** 	    set_dig(dig, ch);
 3533              		.loc 1 1604 11 view .LVU1108
 3534 01f0 A8BF     		it	ge
 3535 01f2 1839     		subge	r1, r1, #24
 3536              	.LVL392:
1605:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3537              		.loc 1 1605 6 is_stmt 1 view .LVU1109
 3538 01f4 FFF7FEFF 		bl	set_dig
 3539              	.LVL393:
1606:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3540              		.loc 1 1606 6 view .LVU1110
1606:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3541              		.loc 1 1606 13 is_stmt 0 view .LVU1111
 3542 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3543 01fc 0AFB1393 		mls	r3, r10, r3, r9
1606:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3544              		.loc 1 1606 9 view .LVU1112
 3545 0200 002B     		cmp	r3, #0
 3546 0202 E8D1     		bne	.L329
ARM GAS  /tmp/cchf4YwX.s 			page 143


1607:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3547              		.loc 1 1607 8 is_stmt 1 discriminator 1 view .LVU1113
 3548              	.LBB307:
 3549              	.LBB306:
 376:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3550              		.loc 1 376 3 discriminator 1 view .LVU1114
 3551 0204 5846     		mov	r0, fp
 3552              	.LBE306:
 3553              	.LBE307:
1606:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3554              		.loc 1 1606 27 is_stmt 0 discriminator 1 view .LVU1115
 3555 0206 002C     		cmp	r4, #0
 3556 0208 E0D1     		bne	.L380
1608:src/display.c **** 	  }
 3557              		.loc 1 1608 6 is_stmt 1 view .LVU1116
1608:src/display.c **** 	  }
 3558              		.loc 1 1608 10 is_stmt 0 view .LVU1117
 3559 020a ABF1090B 		sub	fp, fp, #9
 3560              	.LVL394:
1608:src/display.c **** 	  }
 3561              		.loc 1 1608 10 view .LVU1118
 3562              	.LBE309:
1601:src/display.c **** 	    int ch = buf[j++];
 3563              		.loc 1 1601 24 is_stmt 1 view .LVU1119
1601:src/display.c **** 	    int ch = buf[j++];
 3564              		.loc 1 1601 14 view .LVU1120
 3565              	.L335:
1610:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1610 4 view .LVU1121
1610:src/display.c **** 	    if (dig >= 0)
 3567              		.loc 1 1610 7 is_stmt 0 view .LVU1122
 3568 020e 049B     		ldr	r3, [sp, #16]
 3569 0210 002B     		cmp	r3, #0
 3570 0212 3FF476AF 		beq	.L291
1611:src/display.c **** 	      set_dig(dig, '-');
 3571              		.loc 1 1611 6 is_stmt 1 view .LVU1123
1611:src/display.c **** 	      set_dig(dig, '-');
 3572              		.loc 1 1611 9 is_stmt 0 view .LVU1124
 3573 0216 BBF1000F 		cmp	fp, #0
 3574 021a C0F2C680 		blt	.L381
 3575              	.LVL395:
 3576              	.L334:
1612:src/display.c **** 	    else	SET_MANT_SIGN;
 3577              		.loc 1 1612 8 is_stmt 1 view .LVU1125
 3578 021e 5846     		mov	r0, fp
 3579 0220 2D21     		movs	r1, #45
 3580 0222 FFF7FEFF 		bl	set_dig
 3581              	.LVL396:
 3582 0226 6CE7     		b	.L291
 3583              	.LVL397:
 3584              	.L375:
1612:src/display.c **** 	    else	SET_MANT_SIGN;
 3585              		.loc 1 1612 8 is_stmt 0 view .LVU1126
 3586              	.LBE302:
1505:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3587              		.loc 1 1505 4 is_stmt 1 view .LVU1127
1505:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
ARM GAS  /tmp/cchf4YwX.s 			page 144


 3588              		.loc 1 1505 8 is_stmt 0 view .LVU1128
 3589 0228 04AA     		add	r2, sp, #16
 3590 022a 3046     		mov	r0, r6
 3591 022c 3946     		mov	r1, r7
 3592 022e FFF7FEFF 		bl	extract_value
 3593              	.LVL398:
 3594 0232 8046     		mov	r8, r0
 3595 0234 8946     		mov	r9, r1
 3596              	.LVL399:
1506:src/display.c **** 	    v = value;
 3597              		.loc 1 1506 4 is_stmt 1 view .LVU1129
1506:src/display.c **** 	    v = value;
 3598              		.loc 1 1506 8 is_stmt 0 view .LVU1130
 3599 0236 FFF7FEFF 		bl	int_mode
 3600              	.LVL400:
1506:src/display.c **** 	    v = value;
 3601              		.loc 1 1506 7 view .LVU1131
 3602 023a 38BB     		cbnz	r0, .L296
1506:src/display.c **** 	    v = value;
 3603              		.loc 1 1506 33 discriminator 1 view .LVU1132
 3604 023c 049B     		ldr	r3, [sp, #16]
 3605 023e 012B     		cmp	r3, #1
 3606 0240 24D1     		bne	.L296
1506:src/display.c **** 	    v = value;
 3607              		.loc 1 1506 46 discriminator 2 view .LVU1133
 3608 0242 58EA0903 		orrs	r3, r8, r9
 3609 0246 00F08B80 		beq	.L382
 3610              	.LVL401:
 3611              	.L297:
1506:src/display.c **** 	    v = value;
 3612              		.loc 1 1506 46 discriminator 2 view .LVU1134
 3613 024a DFF810B1 		ldr	fp, .L383+20
 3614              	.LVL402:
1481:src/display.c **** 	const int ws = word_size();
 3615              		.loc 1 1481 67 discriminator 3 view .LVU1135
 3616 024e 0395     		str	r5, [sp, #12]
 3617 0250 05AB     		add	r3, sp, #20
 3618 0252 5D46     		mov	r5, fp
 3619              	.LVL403:
1481:src/display.c **** 	const int ws = word_size();
 3620              		.loc 1 1481 67 discriminator 3 view .LVU1136
 3621 0254 5646     		mov	r6, r10
 3622 0256 0027     		movs	r7, #0
 3623 0258 0024     		movs	r4, #0
 3624 025a 9B46     		mov	fp, r3
 3625              	.LVL404:
 3626              	.L303:
 3627              	.LBB312:
1515:src/display.c **** 	      v /= b;
 3628              		.loc 1 1515 8 is_stmt 1 discriminator 3 view .LVU1137
 3629 025c 4046     		mov	r0, r8
 3630 025e 4946     		mov	r1, r9
 3631 0260 3246     		mov	r2, r6
 3632 0262 3B46     		mov	r3, r7
 3633 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3634              	.LVL405:
1516:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/cchf4YwX.s 			page 145


 3635              		.loc 1 1516 8 discriminator 3 view .LVU1138
 3636 0268 CDE90089 		strd	r8, [sp]
1517:src/display.c **** 	    }
 3637              		.loc 1 1517 15 is_stmt 0 discriminator 3 view .LVU1139
 3638 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3639 026e 0BF8013B 		strb	r3, [fp], #1
 3640              	.LBE312:
1514:src/display.c **** 	      const int r = v % b;
 3641              		.loc 1 1514 6 discriminator 3 view .LVU1140
 3642 0272 DDE90023 		ldrd	r2, [sp]
 3643              	.LVL406:
1514:src/display.c **** 	      const int r = v % b;
 3644              		.loc 1 1514 6 discriminator 3 view .LVU1141
 3645 0276 BB42     		cmp	r3, r7
 3646 0278 08BF     		it	eq
 3647 027a B242     		cmpeq	r2, r6
 3648              	.LBB313:
1516:src/display.c **** 	      buf[i] = DIGITS[r];
 3649              		.loc 1 1516 10 discriminator 3 view .LVU1142
 3650 027c 8946     		mov	r9, r1
 3651              	.LVL407:
1517:src/display.c **** 	    }
 3652              		.loc 1 1517 8 is_stmt 1 discriminator 3 view .LVU1143
 3653              	.LBE313:
1514:src/display.c **** 	      const int r = v % b;
 3654              		.loc 1 1514 24 discriminator 3 view .LVU1144
 3655              	.LBB314:
1516:src/display.c **** 	      buf[i] = DIGITS[r];
 3656              		.loc 1 1516 10 is_stmt 0 discriminator 3 view .LVU1145
 3657 027e 8046     		mov	r8, r0
 3658 0280 2146     		mov	r1, r4
 3659              	.LVL408:
1516:src/display.c **** 	      buf[i] = DIGITS[r];
 3660              		.loc 1 1516 10 discriminator 3 view .LVU1146
 3661              	.LBE314:
1514:src/display.c **** 	      const int r = v % b;
 3662              		.loc 1 1514 25 discriminator 3 view .LVU1147
 3663 0282 04F10104 		add	r4, r4, #1
 3664              	.LVL409:
1514:src/display.c **** 	      const int r = v % b;
 3665              		.loc 1 1514 16 is_stmt 1 discriminator 3 view .LVU1148
1514:src/display.c **** 	      const int r = v % b;
 3666              		.loc 1 1514 6 is_stmt 0 discriminator 3 view .LVU1149
 3667 0286 E9D2     		bcs	.L303
 3668 0288 039D     		ldr	r5, [sp, #12]
 3669 028a 24E7     		b	.L304
 3670              	.LVL410:
 3671              	.L296:
1508:src/display.c **** 	    if (sign)
 3672              		.loc 1 1508 4 is_stmt 1 view .LVU1150
1508:src/display.c **** 	    if (sign)
 3673              		.loc 1 1508 7 is_stmt 0 view .LVU1151
 3674 028c 58EA0903 		orrs	r3, r8, r9
 3675 0290 DBD1     		bne	.L297
1509:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3676              		.loc 1 1509 6 is_stmt 1 view .LVU1152
1509:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
ARM GAS  /tmp/cchf4YwX.s 			page 146


 3677              		.loc 1 1509 9 is_stmt 0 view .LVU1153
 3678 0292 049B     		ldr	r3, [sp, #16]
 3679 0294 002B     		cmp	r3, #0
 3680 0296 69D1     		bne	.L298
 3681              	.LVL411:
 3682              	.L299:
1511:src/display.c **** 	    return;
 3683              		.loc 1 1511 6 is_stmt 1 view .LVU1154
 3684              	.LBB315:
 3685              	.LBI315:
 413:src/display.c ****   if (res) *res++ = ch;
 3686              		.loc 1 413 14 view .LVU1155
 3687              	.LBB316:
 414:src/display.c ****   else	set_dig(base, ch);
 3688              		.loc 1 414 3 view .LVU1156
 414:src/display.c ****   else	set_dig(base, ch);
 3689              		.loc 1 414 6 is_stmt 0 view .LVU1157
 3690 0298 002D     		cmp	r5, #0
 3691 029a 6DD0     		beq	.L301
 3692              	.LVL412:
 3693              	.L300:
 414:src/display.c ****   else	set_dig(base, ch);
 3694              		.loc 1 414 12 is_stmt 1 view .LVU1158
 414:src/display.c ****   else	set_dig(base, ch);
 3695              		.loc 1 414 19 is_stmt 0 view .LVU1159
 3696 029c 3023     		movs	r3, #48
 3697 029e 2B70     		strb	r3, [r5]
 3698              	.LBE316:
 3699              	.LBE315:
1616:src/display.c **** 
 3700              		.loc 1 1616 7 view .LVU1160
 3701 02a0 17B0     		add	sp, sp, #92
 3702              		.cfi_remember_state
 3703              		.cfi_def_cfa_offset 36
 3704              		@ sp needed
 3705 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3706              	.LVL413:
 3707              	.L292:
 3708              		.cfi_restore_state
1496:src/display.c **** 	}
 3709              		.loc 1 1496 11 is_stmt 1 view .LVU1161
1496:src/display.c **** 	}
 3710              		.loc 1 1496 15 is_stmt 0 view .LVU1162
 3711 02a6 FFF7FEFF 		bl	int_base
 3712              	.LVL414:
1496:src/display.c **** 	}
 3713              		.loc 1 1496 15 view .LVU1163
 3714 02aa 8246     		mov	r10, r0
 3715              	.LVL415:
1496:src/display.c **** 	}
 3716              		.loc 1 1496 27 is_stmt 1 view .LVU1164
1499:src/display.c **** 	  IntMaxWindow = 0;
 3717              		.loc 1 1499 2 view .LVU1165
1499:src/display.c **** 	  IntMaxWindow = 0;
 3718              		.loc 1 1499 5 is_stmt 0 view .LVU1166
 3719 02ac 002D     		cmp	r5, #0
 3720 02ae 7FF4BFAE 		bne	.L294
ARM GAS  /tmp/cchf4YwX.s 			page 147


 3721              	.LVL416:
 3722              	.L374:
1500:src/display.c **** 	  carry_overflow();
 3723              		.loc 1 1500 4 is_stmt 1 view .LVU1167
1500:src/display.c **** 	  carry_overflow();
 3724              		.loc 1 1500 17 is_stmt 0 view .LVU1168
 3725 02b2 284B     		ldr	r3, .L383+12
 3726 02b4 1D60     		str	r5, [r3]
1501:src/display.c **** 	}
 3727              		.loc 1 1501 4 is_stmt 1 view .LVU1169
 3728 02b6 FFF7FEFF 		bl	carry_overflow
 3729              	.LVL417:
 3730 02ba B9E6     		b	.L294
 3731              	.LVL418:
 3732              	.L315:
1562:src/display.c **** 	      *res++ = buf[i];
 3733              		.loc 1 1562 12 view .LVU1170
1562:src/display.c **** 	      *res++ = buf[i];
 3734              		.loc 1 1562 12 is_stmt 0 view .LVU1171
 3735 02bc 05AB     		add	r3, sp, #20
 3736 02be 5818     		adds	r0, r3, r1
1562:src/display.c **** 	      *res++ = buf[i];
 3737              		.loc 1 1562 24 view .LVU1172
 3738 02c0 A4F10D06 		sub	r6, r4, #13
 3739 02c4 6A1E     		subs	r2, r5, #1
 3740              	.LVL419:
 3741              	.L317:
1563:src/display.c **** 	    *res++ = '.';
 3742              		.loc 1 1563 8 is_stmt 1 view .LVU1173
1563:src/display.c **** 	    *res++ = '.';
 3743              		.loc 1 1563 20 is_stmt 0 view .LVU1174
 3744 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3745              	.LVL420:
1563:src/display.c **** 	    *res++ = '.';
 3746              		.loc 1 1563 15 view .LVU1175
 3747 02ca 02F8013F 		strb	r3, [r2, #1]!
 3748              	.LVL421:
1562:src/display.c **** 	      *res++ = buf[i];
 3749              		.loc 1 1562 12 is_stmt 1 view .LVU1176
1562:src/display.c **** 	      *res++ = buf[i];
 3750              		.loc 1 1562 12 is_stmt 0 view .LVU1177
 3751 02ce D343     		mvns	r3, r2
 3752 02d0 0B44     		add	r3, r3, r1
 3753 02d2 2B44     		add	r3, r3, r5
 3754 02d4 9E42     		cmp	r6, r3
 3755 02d6 F6DD     		ble	.L317
 3756 02d8 01F10E03 		add	r3, r1, #14
 3757 02dc 1C1B     		subs	r4, r3, r4
 3758              	.LVL422:
1562:src/display.c **** 	      *res++ = buf[i];
 3759              		.loc 1 1562 12 view .LVU1178
 3760 02de 8E42     		cmp	r6, r1
 3761 02e0 C8BF     		it	gt
 3762 02e2 0124     		movgt	r4, #1
 3763 02e4 2A19     		adds	r2, r5, r4
 3764              	.LVL423:
1564:src/display.c **** 	    *res++ = '.';
ARM GAS  /tmp/cchf4YwX.s 			page 148


 3765              		.loc 1 1564 6 is_stmt 1 view .LVU1179
1564:src/display.c **** 	    *res++ = '.';
 3766              		.loc 1 1564 13 is_stmt 0 view .LVU1180
 3767 02e6 2E23     		movs	r3, #46
 3768 02e8 2B55     		strb	r3, [r5, r4]
1565:src/display.c **** 	  }
 3769              		.loc 1 1565 6 is_stmt 1 view .LVU1181
 3770              	.LVL424:
1565:src/display.c **** 	  }
 3771              		.loc 1 1565 13 is_stmt 0 view .LVU1182
 3772 02ea 5370     		strb	r3, [r2, #1]
1616:src/display.c **** 
 3773              		.loc 1 1616 7 view .LVU1183
 3774 02ec 17B0     		add	sp, sp, #92
 3775              		.cfi_remember_state
 3776              		.cfi_def_cfa_offset 36
 3777              		@ sp needed
 3778 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3779              	.LVL425:
 3780              	.L376:
 3781              		.cfi_restore_state
 3782              	.LBB318:
1524:src/display.c **** 	      vs |= ~mask;
 3783              		.loc 1 1524 38 discriminator 1 view .LVU1184
 3784 02f2 0BF1FF31 		add	r1, fp, #-1
1524:src/display.c **** 	      vs |= ~mask;
 3785              		.loc 1 1524 18 discriminator 1 view .LVU1185
 3786 02f6 CBF1210C 		rsb	ip, fp, #33
 3787 02fa C840     		lsrs	r0, r0, r1
 3788 02fc 07FA0CFC 		lsl	ip, r7, ip
 3789 0300 2039     		subs	r1, r1, #32
 3790 0302 40EA0C00 		orr	r0, r0, ip
 3791 0306 5CBF     		itt	pl
 3792 0308 47FA01F1 		asrpl	r1, r7, r1
 3793 030c 0843     		orrpl	r0, r0, r1
 3794 030e 00F00108 		and	r8, r0, #1
 3795 0312 4FF00009 		mov	r9, #0
 3796 0316 58EA0901 		orrs	r1, r8, r9
 3797 031a 08D0     		beq	.L306
1525:src/display.c **** 	  }
 3798              		.loc 1 1525 8 is_stmt 1 view .LVU1186
1525:src/display.c **** 	  }
 3799              		.loc 1 1525 11 is_stmt 0 view .LVU1187
 3800 031c 5042     		rsbs	r0, r2, #0
 3801 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3802 0322 40EA0602 		orr	r2, r0, r6
 3803              	.LVL426:
1525:src/display.c **** 	  }
 3804              		.loc 1 1525 11 view .LVU1188
 3805 0326 41EA0703 		orr	r3, r1, r7
 3806              	.LVL427:
1525:src/display.c **** 	  }
 3807              		.loc 1 1525 11 view .LVU1189
 3808 032a 1646     		mov	r6, r2
 3809              	.LVL428:
1525:src/display.c **** 	  }
 3810              		.loc 1 1525 11 view .LVU1190
ARM GAS  /tmp/cchf4YwX.s 			page 149


 3811 032c 1F46     		mov	r7, r3
 3812              	.L306:
1525:src/display.c **** 	  }
 3813              		.loc 1 1525 11 view .LVU1191
 3814              	.LBE318:
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3815              		.loc 1 1528 4 is_stmt 1 view .LVU1192
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3816              		.loc 1 1528 8 is_stmt 0 view .LVU1193
 3817 032e 084B     		ldr	r3, .L383+8
 3818 0330 1B68     		ldr	r3, [r3]
 3819 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1528:src/display.c **** 	    set_dig_s(dig, '0', res);
 3820              		.loc 1 1528 7 view .LVU1194
 3821 0336 9B07     		lsls	r3, r3, #30
 3822 0338 7FF5E6AE 		bpl	.L336
 3823 033c 0223     		movs	r3, #2
 3824 033e ADE6     		b	.L311
 3825              	.LVL429:
 3826              	.L378:
 3827              	.LBB319:
1587:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3828              		.loc 1 1587 33 view .LVU1195
 3829 0340 0826     		movs	r6, #8
1589:src/display.c **** 	  set_separator_decimal_modes();
 3830              		.loc 1 1589 6 view .LVU1196
 3831 0342 4FF0040A 		mov	r10, #4
 3832 0346 17E7     		b	.L320
 3833              	.L384:
 3834              		.align	2
 3835              	.L383:
 3836 0348 00000000 		.word	StateWhileOn
 3837 034c 00000000 		.word	CSWTCH.364
 3838 0350 00000000 		.word	main_ram
 3839 0354 00000000 		.word	IntMaxWindow
 3840 0358 00000000 		.word	.LANCHOR0
 3841 035c 00000000 		.word	.LANCHOR12
 3842              	.LVL430:
 3843              	.L382:
1589:src/display.c **** 	  set_separator_decimal_modes();
 3844              		.loc 1 1589 6 view .LVU1197
 3845              	.LBE319:
1507:src/display.c **** 	  if (v == 0) {
 3846              		.loc 1 1507 6 is_stmt 1 view .LVU1198
1507:src/display.c **** 	  if (v == 0) {
 3847              		.loc 1 1507 8 is_stmt 0 view .LVU1199
 3848 0360 B046     		mov	r8, r6
 3849              	.LVL431:
1507:src/display.c **** 	  if (v == 0) {
 3850              		.loc 1 1507 8 view .LVU1200
 3851 0362 B946     		mov	r9, r7
 3852              	.LVL432:
1508:src/display.c **** 	    if (sign)
 3853              		.loc 1 1508 4 is_stmt 1 view .LVU1201
1508:src/display.c **** 	    if (sign)
 3854              		.loc 1 1508 7 is_stmt 0 view .LVU1202
 3855 0364 58EA0903 		orrs	r3, r8, r9
ARM GAS  /tmp/cchf4YwX.s 			page 150


 3856 0368 7FF46FAF 		bne	.L297
 3857              	.LVL433:
 3858              	.L298:
1510:src/display.c **** 	    set_dig_s(dig, '0', res);
 3859              		.loc 1 1510 8 is_stmt 1 view .LVU1203
 3860              	.LBB320:
 3861              	.LBI320:
 413:src/display.c ****   if (res) *res++ = ch;
 3862              		.loc 1 413 14 view .LVU1204
 3863              	.LBB321:
 414:src/display.c ****   else	set_dig(base, ch);
 3864              		.loc 1 414 3 view .LVU1205
 414:src/display.c ****   else	set_dig(base, ch);
 3865              		.loc 1 414 6 is_stmt 0 view .LVU1206
 3866 036c 002D     		cmp	r5, #0
 3867 036e 95D1     		bne	.L300
 415:src/display.c ****   return res;
 3868              		.loc 1 415 8 is_stmt 1 view .LVU1207
 3869 0370 2D21     		movs	r1, #45
 3870 0372 5A20     		movs	r0, #90
 3871 0374 FFF7FEFF 		bl	set_dig
 3872              	.LVL434:
 415:src/display.c ****   return res;
 3873              		.loc 1 415 8 is_stmt 0 view .LVU1208
 3874              	.LBE321:
 3875              	.LBE320:
1511:src/display.c **** 	    return;
 3876              		.loc 1 1511 6 is_stmt 1 view .LVU1209
 3877              	.LBB322:
 413:src/display.c ****   if (res) *res++ = ch;
 3878              		.loc 1 413 14 view .LVU1210
 3879              	.LBB317:
 414:src/display.c ****   else	set_dig(base, ch);
 3880              		.loc 1 414 3 view .LVU1211
 3881              	.L301:
 415:src/display.c ****   return res;
 3882              		.loc 1 415 8 view .LVU1212
 3883 0378 3021     		movs	r1, #48
 3884 037a 6320     		movs	r0, #99
 3885 037c FFF7FEFF 		bl	set_dig
 3886              	.LVL435:
 3887 0380 BFE6     		b	.L291
 3888              	.LVL436:
 3889              	.L322:
 415:src/display.c ****   return res;
 3890              		.loc 1 415 8 is_stmt 0 view .LVU1213
 3891              	.LBE317:
 3892              	.LBE322:
 3893              	.LBB323:
1594:src/display.c **** 	  buf[i] = '\0';
 3894              		.loc 1 1594 6 is_stmt 1 view .LVU1214
1594:src/display.c **** 	  buf[i] = '\0';
 3895              		.loc 1 1594 20 is_stmt 0 view .LVU1215
 3896 0382 0F4A     		ldr	r2, .L385
 3897 0384 6FF3C503 		bfc	r3, #3, #3
 3898 0388 1375     		strb	r3, [r2, #20]
 3899 038a 0027     		movs	r7, #0
ARM GAS  /tmp/cchf4YwX.s 			page 151


 3900 038c 05E7     		b	.L323
 3901              	.LVL437:
 3902              	.L324:
1601:src/display.c **** 	    int ch = buf[j++];
 3903              		.loc 1 1601 14 is_stmt 1 discriminator 1 view .LVU1216
1601:src/display.c **** 	    int ch = buf[j++];
 3904              		.loc 1 1601 4 is_stmt 0 discriminator 1 view .LVU1217
 3905 038e 03F1FF38 		add	r8, r3, #-1
 3906              	.LVL438:
1601:src/display.c **** 	    int ch = buf[j++];
 3907              		.loc 1 1601 4 discriminator 1 view .LVU1218
 3908 0392 002B     		cmp	r3, #0
 3909 0394 7FF414AF 		bne	.L326
1610:src/display.c **** 	    if (dig >= 0)
 3910              		.loc 1 1610 4 is_stmt 1 view .LVU1219
1610:src/display.c **** 	    if (dig >= 0)
 3911              		.loc 1 1610 7 is_stmt 0 view .LVU1220
 3912 0398 049B     		ldr	r3, [sp, #16]
 3913 039a 002B     		cmp	r3, #0
 3914 039c 3FF4B1AE 		beq	.L291
 3915 03a0 4FF0630B 		mov	fp, #99
 3916 03a4 3BE7     		b	.L334
 3917              	.LVL439:
 3918              	.L379:
1587:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3919              		.loc 1 1587 33 view .LVU1221
 3920 03a6 0C26     		movs	r6, #12
 3921 03a8 E6E6     		b	.L320
 3922              	.LVL440:
 3923              	.L381:
1613:src/display.c **** 	  }
 3924              		.loc 1 1613 11 is_stmt 1 view .LVU1222
 3925              	.LBB310:
 3926              	.LBI310:
 302:src/display.c **** {
 3927              		.loc 1 302 13 view .LVU1223
 3928              	.LBB311:
 304:src/display.c ****   set_dot(MANT_SIGN);
 3929              		.loc 1 304 3 view .LVU1224
 304:src/display.c ****   set_dot(MANT_SIGN);
 3930              		.loc 1 304 25 is_stmt 0 view .LVU1225
 3931 03aa 064B     		ldr	r3, .L385+4
 3932 03ac 2D22     		movs	r2, #45
 305:src/display.c **** }
 3933              		.loc 1 305 3 view .LVU1226
 3934 03ae 8120     		movs	r0, #129
 304:src/display.c ****   set_dot(MANT_SIGN);
 3935              		.loc 1 304 25 view .LVU1227
 3936 03b0 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 3937              		.loc 1 305 3 is_stmt 1 view .LVU1228
 3938 03b2 FFF7FEFF 		bl	set_dot
 3939              	.LVL441:
 306:src/display.c **** 
 3940              		.loc 1 306 1 is_stmt 0 view .LVU1229
 3941 03b6 A4E6     		b	.L291
 3942              	.LVL442:
ARM GAS  /tmp/cchf4YwX.s 			page 152


 3943              	.L337:
 306:src/display.c **** 
 3944              		.loc 1 306 1 view .LVU1230
 3945              	.LBE311:
 3946              	.LBE310:
 3947              	.LBE323:
 3948              	.LBB324:
1545:src/display.c **** 	      const int r = v % b;
 3949              		.loc 1 1545 6 view .LVU1231
 3950 03b8 4FF0FF31 		mov	r1, #-1
 3951 03bc 8BE6     		b	.L304
 3952              	.L386:
 3953 03be 00BF     		.align	2
 3954              	.L385:
 3955 03c0 00000000 		.word	StateWhileOn
 3956 03c4 00000000 		.word	LastDisplayedNumber
 3957              	.LBE324:
 3958              		.cfi_endproc
 3959              	.LFE18:
 3961              		.section	.text.set_annunciators,"ax",%progbits
 3962              		.align	1
 3963              		.p2align 2,,3
 3964              		.syntax unified
 3965              		.thumb
 3966              		.thumb_func
 3967              		.fpu fpv4-sp-d16
 3969              	set_annunciators:
 3970              	.LFB32:
2616:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3971              		.loc 1 2616 7 is_stmt 1 view -0
 3972              		.cfi_startproc
 3973              		@ args = 0, pretend = 0, frame = 0
 3974              		@ frame_needed = 0, uses_anonymous_args = 0
2617:src/display.c **** 
 3975              		.loc 1 2617 2 view .LVU1233
2616:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3976              		.loc 1 2616 7 is_stmt 0 view .LVU1234
 3977 0000 70B5     		push	{r4, r5, r6, lr}
 3978              		.cfi_def_cfa_offset 16
 3979              		.cfi_offset 4, -16
 3980              		.cfi_offset 5, -12
 3981              		.cfi_offset 6, -8
 3982              		.cfi_offset 14, -4
2624:src/display.c **** #else
 3983              		.loc 1 2624 11 view .LVU1235
 3984 0002 3B4C     		ldr	r4, .L418
2617:src/display.c **** 
 3985              		.loc 1 2617 29 view .LVU1236
 3986 0004 FFF7FEFF 		bl	get_trig_mode
 3987              	.LVL443:
2624:src/display.c **** #else
 3988              		.loc 1 2624 11 view .LVU1237
 3989 0008 2368     		ldr	r3, [r4]
 3990 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2624:src/display.c **** #else
 3991              		.loc 1 2624 2 view .LVU1238
 3992 000e 1907     		lsls	r1, r3, #28
ARM GAS  /tmp/cchf4YwX.s 			page 153


2617:src/display.c **** 
 3993              		.loc 1 2617 29 view .LVU1239
 3994 0010 0546     		mov	r5, r0
 3995              	.LVL444:
2624:src/display.c **** #else
 3996              		.loc 1 2624 2 is_stmt 1 view .LVU1240
 3997              	.LBB345:
 3998              	.LBB346:
 346:src/display.c ****   else	clr_dot(n);
 3999              		.loc 1 346 11 is_stmt 0 view .LVU1241
 4000 0012 4FF08800 		mov	r0, #136
 4001              	.LBE346:
 4002              	.LBE345:
2624:src/display.c **** #else
 4003              		.loc 1 2624 2 view .LVU1242
 4004 0016 03D5     		bpl	.L388
2624:src/display.c **** #else
 4005              		.loc 1 2624 33 discriminator 1 view .LVU1243
 4006 0018 364B     		ldr	r3, .L418+4
2624:src/display.c **** #else
 4007              		.loc 1 2624 2 discriminator 1 view .LVU1244
 4008 001a 1B68     		ldr	r3, [r3]
 4009 001c 002B     		cmp	r3, #0
 4010 001e 64D0     		beq	.L414
 4011              	.L388:
 4012              	.LVL445:
 4013              	.LBB349:
 4014              	.LBI345:
 345:src/display.c ****   if (on)	set_dot(n);
 4015              		.loc 1 345 6 is_stmt 1 view .LVU1245
 4016              	.LBB347:
 346:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 346 3 view .LVU1246
 347:src/display.c **** }
 4018              		.loc 1 347 8 view .LVU1247
 4019 0020 FFF7FEFF 		bl	clr_dot
 4020              	.LVL446:
 4021              	.L389:
 347:src/display.c **** }
 4022              		.loc 1 347 8 is_stmt 0 view .LVU1248
 4023              	.LBE347:
 4024              	.LBE349:
2629:src/display.c **** #endif
 4025              		.loc 1 2629 2 is_stmt 1 view .LVU1249
 4026              	.LBB350:
 4027              	.LBI350:
 345:src/display.c ****   if (on)	set_dot(n);
 4028              		.loc 1 345 6 view .LVU1250
 4029              	.LBB351:
 346:src/display.c ****   else	clr_dot(n);
 4030              		.loc 1 346 3 view .LVU1251
 4031              	.LBE351:
 4032              	.LBE350:
2629:src/display.c **** #endif
 4033              		.loc 1 2629 14 is_stmt 0 view .LVU1252
 4034 0024 2368     		ldr	r3, [r4]
 4035 0026 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
ARM GAS  /tmp/cchf4YwX.s 			page 154


 4036              	.LBB354:
 4037              	.LBB352:
 346:src/display.c ****   else	clr_dot(n);
 4038              		.loc 1 346 6 view .LVU1253
 4039 002a 03F04103 		and	r3, r3, #65
 4040 002e 412B     		cmp	r3, #65
 346:src/display.c ****   else	clr_dot(n);
 4041              		.loc 1 346 11 view .LVU1254
 4042 0030 4FF08400 		mov	r0, #132
 346:src/display.c ****   else	clr_dot(n);
 4043              		.loc 1 346 6 view .LVU1255
 4044 0034 50D1     		bne	.L390
 346:src/display.c ****   else	clr_dot(n);
 4045              		.loc 1 346 11 is_stmt 1 view .LVU1256
 4046 0036 FFF7FEFF 		bl	set_dot
 4047              	.LVL447:
 4048              	.L391:
 346:src/display.c ****   else	clr_dot(n);
 4049              		.loc 1 346 11 is_stmt 0 view .LVU1257
 4050              	.LBE352:
 4051              	.LBE354:
2632:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4052              		.loc 1 2632 2 is_stmt 1 view .LVU1258
2632:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4053              		.loc 1 2632 19 is_stmt 0 view .LVU1259
 4054 003a 2F4E     		ldr	r6, .L418+8
2632:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4055              		.loc 1 2632 2 view .LVU1260
 4056 003c B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4057              	.LBB355:
 4058              	.LBB356:
 346:src/display.c ****   else	clr_dot(n);
 4059              		.loc 1 346 11 view .LVU1261
 4060 003e 8620     		movs	r0, #134
 4061              	.LBE356:
 4062              	.LBE355:
2632:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4063              		.loc 1 2632 2 view .LVU1262
 4064 0040 23B9     		cbnz	r3, .L392
2632:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4065              		.loc 1 2632 47 discriminator 2 view .LVU1263
 4066 0042 7269     		ldr	r2, [r6, #20]
 4067 0044 2D4B     		ldr	r3, .L418+12
 4068 0046 1340     		ands	r3, r3, r2
2632:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4069              		.loc 1 2632 2 discriminator 2 view .LVU1264
 4070 0048 002B     		cmp	r3, #0
 4071 004a 4BD0     		beq	.L415
 4072              	.L392:
 4073              	.LBB359:
 4074              	.LBB357:
 346:src/display.c ****   else	clr_dot(n);
 4075              		.loc 1 346 11 is_stmt 1 view .LVU1265
 4076 004c FFF7FEFF 		bl	set_dot
 4077              	.LVL448:
 4078              	.L393:
 4079              	.LBE357:
ARM GAS  /tmp/cchf4YwX.s 			page 155


 4080              	.LBE359:
2633:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4081              		.loc 1 2633 2 view .LVU1266
2633:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4082              		.loc 1 2633 31 is_stmt 0 view .LVU1267
 4083 0050 2B4A     		ldr	r2, .L418+16
 4084 0052 7369     		ldr	r3, [r6, #20]
2633:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4085              		.loc 1 2633 2 view .LVU1268
 4086 0054 1A42     		tst	r2, r3
 4087              	.LBB360:
 4088              	.LBB361:
 346:src/display.c ****   else	clr_dot(n);
 4089              		.loc 1 346 11 view .LVU1269
 4090 0056 4FF08500 		mov	r0, #133
 4091              	.LBE361:
 4092              	.LBE360:
2633:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4093              		.loc 1 2633 2 view .LVU1270
 4094 005a 02D0     		beq	.L394
2633:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4095              		.loc 1 2633 48 discriminator 1 view .LVU1271
 4096 005c B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2633:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4097              		.loc 1 2633 2 discriminator 1 view .LVU1272
 4098 005e DA06     		lsls	r2, r3, #27
 4099 0060 3DD4     		bmi	.L395
 4100              	.L394:
 4101              	.LVL449:
 4102              	.LBB364:
 4103              	.LBI360:
 345:src/display.c ****   if (on)	set_dot(n);
 4104              		.loc 1 345 6 is_stmt 1 view .LVU1273
 4105              	.LBB362:
 346:src/display.c ****   else	clr_dot(n);
 4106              		.loc 1 346 3 view .LVU1274
 347:src/display.c **** }
 4107              		.loc 1 347 8 view .LVU1275
 4108 0062 FFF7FEFF 		bl	clr_dot
 4109              	.LVL450:
 4110              	.L396:
 347:src/display.c **** }
 4111              		.loc 1 347 8 is_stmt 0 view .LVU1276
 4112              	.LBE362:
 4113              	.LBE364:
2634:src/display.c **** 	set_IO_annunciator();
 4114              		.loc 1 2634 2 is_stmt 1 view .LVU1277
 4115 0066 6820     		movs	r0, #104
 4116 0068 FFF7FEFF 		bl	get_user_flag
 4117              	.LVL451:
 4118              	.LBB365:
 4119              	.LBI365:
 345:src/display.c ****   if (on)	set_dot(n);
 4120              		.loc 1 345 6 view .LVU1278
 4121              	.LBB366:
 346:src/display.c ****   else	clr_dot(n);
 4122              		.loc 1 346 3 view .LVU1279
ARM GAS  /tmp/cchf4YwX.s 			page 156


 346:src/display.c ****   else	clr_dot(n);
 4123              		.loc 1 346 6 is_stmt 0 view .LVU1280
 4124 006c 28B3     		cbz	r0, .L397
 346:src/display.c ****   else	clr_dot(n);
 4125              		.loc 1 346 11 is_stmt 1 view .LVU1281
 4126              	.LBE366:
 4127              	.LBE365:
 4128              	.LBB370:
 4129              	.LBB371:
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4130              		.loc 1 2662 9 is_stmt 0 view .LVU1282
 4131 006e 254E     		ldr	r6, .L418+20
 4132              	.LBE371:
 4133              	.LBE370:
 4134              	.LBB379:
 4135              	.LBB367:
 346:src/display.c ****   else	clr_dot(n);
 4136              		.loc 1 346 11 view .LVU1283
 4137 0070 8320     		movs	r0, #131
 4138              	.LVL452:
 346:src/display.c ****   else	clr_dot(n);
 4139              		.loc 1 346 11 view .LVU1284
 4140 0072 FFF7FEFF 		bl	set_dot
 4141              	.LVL453:
 346:src/display.c ****   else	clr_dot(n);
 4142              		.loc 1 346 11 view .LVU1285
 4143              	.LBE367:
 4144              	.LBE379:
2635:src/display.c **** 
 4145              		.loc 1 2635 2 is_stmt 1 view .LVU1286
 4146              	.LBB380:
 4147              	.LBI370:
2647:src/display.c **** #ifndef DM42
 4148              		.loc 1 2647 12 view .LVU1287
 4149              	.LBB376:
2652:src/display.c **** #endif
 4150              		.loc 1 2652 4 view .LVU1288
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4151              		.loc 1 2662 2 view .LVU1289
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4152              		.loc 1 2662 5 is_stmt 0 view .LVU1290
 4153 0076 3368     		ldr	r3, [r6]
 4154 0078 33BB     		cbnz	r3, .L416
 4155              	.L399:
 4156              	.LBE376:
 4157              	.LBE380:
2639:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4158              		.loc 1 2639 2 is_stmt 1 view .LVU1291
2639:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4159              		.loc 1 2639 11 is_stmt 0 view .LVU1292
 4160 007a 2368     		ldr	r3, [r4]
 4161 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4162 0080 03F00103 		and	r3, r3, #1
2639:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4163              		.loc 1 2639 2 view .LVU1293
 4164 0084 2B43     		orrs	r3, r3, r5
 4165 0086 13F0FF0F 		tst	r3, #255
ARM GAS  /tmp/cchf4YwX.s 			page 157


 4166              	.LBB381:
 4167              	.LBB382:
 346:src/display.c ****   else	clr_dot(n);
 4168              		.loc 1 346 11 view .LVU1294
 4169 008a 4FF08C00 		mov	r0, #140
 4170              	.LBE382:
 4171              	.LBE381:
2639:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4172              		.loc 1 2639 2 view .LVU1295
 4173 008e 06D1     		bne	.L417
 4174              	.LVL454:
 4175              	.LBB385:
 4176              	.LBI381:
 345:src/display.c ****   if (on)	set_dot(n);
 4177              		.loc 1 345 6 is_stmt 1 view .LVU1296
 4178              	.LBB383:
 346:src/display.c ****   else	clr_dot(n);
 4179              		.loc 1 346 3 view .LVU1297
 346:src/display.c ****   else	clr_dot(n);
 4180              		.loc 1 346 11 view .LVU1298
 4181 0090 FFF7FEFF 		bl	set_dot
 4182              	.LVL455:
 346:src/display.c ****   else	clr_dot(n);
 4183              		.loc 1 346 11 is_stmt 0 view .LVU1299
 4184              	.LBE383:
 4185              	.LBE385:
2640:src/display.c ****       }
 4186              		.loc 1 2640 2 is_stmt 1 view .LVU1300
 4187              	.L402:
 4188              	.LBB386:
 4189              	.LBI386:
 345:src/display.c ****   if (on)	set_dot(n);
 4190              		.loc 1 345 6 view .LVU1301
 4191              	.LBB387:
 346:src/display.c ****   else	clr_dot(n);
 4192              		.loc 1 346 3 view .LVU1302
 347:src/display.c **** }
 4193              		.loc 1 347 8 view .LVU1303
 4194              	.LBE387:
 4195              	.LBE386:
2641:src/display.c **** 
 4196              		.loc 1 2641 7 is_stmt 0 view .LVU1304
 4197 0094 BDE87040 		pop	{r4, r5, r6, lr}
 4198              		.cfi_remember_state
 4199              		.cfi_restore 14
 4200              		.cfi_restore 6
 4201              		.cfi_restore 5
 4202              		.cfi_restore 4
 4203              		.cfi_def_cfa_offset 0
 4204              	.LVL456:
 4205              	.LBB391:
 4206              	.LBB388:
 347:src/display.c **** }
 4207              		.loc 1 347 8 view .LVU1305
 4208 0098 8B20     		movs	r0, #139
 4209 009a FFF7FEBF 		b	clr_dot
 4210              	.LVL457:
ARM GAS  /tmp/cchf4YwX.s 			page 158


 4211              	.L417:
 4212              		.cfi_restore_state
 347:src/display.c **** }
 4213              		.loc 1 347 8 view .LVU1306
 4214              	.LBE388:
 4215              	.LBE391:
 4216              	.LBB392:
 345:src/display.c ****   if (on)	set_dot(n);
 4217              		.loc 1 345 6 is_stmt 1 view .LVU1307
 4218              	.LBB384:
 346:src/display.c ****   else	clr_dot(n);
 4219              		.loc 1 346 3 view .LVU1308
 347:src/display.c **** }
 4220              		.loc 1 347 8 view .LVU1309
 4221 009e FFF7FEFF 		bl	clr_dot
 4222              	.LVL458:
 347:src/display.c **** }
 4223              		.loc 1 347 8 is_stmt 0 view .LVU1310
 4224              	.LBE384:
 4225              	.LBE392:
2640:src/display.c ****       }
 4226              		.loc 1 2640 2 is_stmt 1 view .LVU1311
2640:src/display.c ****       }
 4227              		.loc 1 2640 11 is_stmt 0 view .LVU1312
 4228 00a2 2368     		ldr	r3, [r4]
 4229 00a4 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2640:src/display.c ****       }
 4230              		.loc 1 2640 2 view .LVU1313
 4231 00a8 DB07     		lsls	r3, r3, #31
 4232 00aa F3D4     		bmi	.L402
2640:src/display.c ****       }
 4233              		.loc 1 2640 2 discriminator 1 view .LVU1314
 4234 00ac 012D     		cmp	r5, #1
 4235 00ae F1D1     		bne	.L402
 4236              	.LVL459:
 4237              	.LBB393:
 345:src/display.c ****   if (on)	set_dot(n);
 4238              		.loc 1 345 6 is_stmt 1 view .LVU1315
 4239              	.LBB389:
 346:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 346 3 view .LVU1316
 346:src/display.c ****   else	clr_dot(n);
 4241              		.loc 1 346 11 view .LVU1317
 4242              	.LBE389:
 4243              	.LBE393:
2641:src/display.c **** 
 4244              		.loc 1 2641 7 is_stmt 0 view .LVU1318
 4245 00b0 BDE87040 		pop	{r4, r5, r6, lr}
 4246              		.cfi_remember_state
 4247              		.cfi_restore 14
 4248              		.cfi_restore 6
 4249              		.cfi_restore 5
 4250              		.cfi_restore 4
 4251              		.cfi_def_cfa_offset 0
 4252              	.LVL460:
 4253              	.LBB394:
 4254              	.LBB390:
ARM GAS  /tmp/cchf4YwX.s 			page 159


 346:src/display.c ****   else	clr_dot(n);
 4255              		.loc 1 346 11 view .LVU1319
 4256 00b4 8B20     		movs	r0, #139
 4257 00b6 FFF7FEBF 		b	set_dot
 4258              	.LVL461:
 4259              	.L397:
 4260              		.cfi_restore_state
 346:src/display.c ****   else	clr_dot(n);
 4261              		.loc 1 346 11 view .LVU1320
 4262              	.LBE390:
 4263              	.LBE394:
 4264              	.LBB395:
 4265              	.LBB368:
 347:src/display.c **** }
 4266              		.loc 1 347 8 is_stmt 1 view .LVU1321
 4267              	.LBE368:
 4268              	.LBE395:
 4269              	.LBB396:
 4270              	.LBB377:
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4271              		.loc 1 2662 9 is_stmt 0 view .LVU1322
 4272 00ba 124E     		ldr	r6, .L418+20
 4273              	.LBE377:
 4274              	.LBE396:
 4275              	.LBB397:
 4276              	.LBB369:
 347:src/display.c **** }
 4277              		.loc 1 347 8 view .LVU1323
 4278 00bc 8320     		movs	r0, #131
 4279              	.LVL462:
 347:src/display.c **** }
 4280              		.loc 1 347 8 view .LVU1324
 4281 00be FFF7FEFF 		bl	clr_dot
 4282              	.LVL463:
 347:src/display.c **** }
 4283              		.loc 1 347 8 view .LVU1325
 4284              	.LBE369:
 4285              	.LBE397:
2635:src/display.c **** 
 4286              		.loc 1 2635 2 is_stmt 1 view .LVU1326
 4287              	.LBB398:
2647:src/display.c **** #ifndef DM42
 4288              		.loc 1 2647 12 view .LVU1327
 4289              	.LBB378:
2652:src/display.c **** #endif
 4290              		.loc 1 2652 4 view .LVU1328
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4291              		.loc 1 2662 2 view .LVU1329
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4292              		.loc 1 2662 5 is_stmt 0 view .LVU1330
 4293 00c2 3368     		ldr	r3, [r6]
 4294 00c4 002B     		cmp	r3, #0
 4295 00c6 D8D0     		beq	.L399
 4296              	.L416:
 4297              	.LBB372:
 4298              	.LBI372:
2647:src/display.c **** #ifndef DM42
ARM GAS  /tmp/cchf4YwX.s 			page 160


 4299              		.loc 1 2647 12 is_stmt 1 view .LVU1331
 4300              	.LBB373:
2663:src/display.c **** 	  IoAnnunciator = on;
 4301              		.loc 1 2663 4 view .LVU1332
 4302              	.LVL464:
 4303              	.LBB374:
 4304              	.LBI374:
 345:src/display.c ****   if (on)	set_dot(n);
 4305              		.loc 1 345 6 view .LVU1333
 4306              	.LBB375:
 346:src/display.c ****   else	clr_dot(n);
 4307              		.loc 1 346 3 view .LVU1334
 347:src/display.c **** }
 4308              		.loc 1 347 8 view .LVU1335
 4309 00c8 8420     		movs	r0, #132
 4310 00ca FFF7FEFF 		bl	clr_dot
 4311              	.LVL465:
 347:src/display.c **** }
 4312              		.loc 1 347 8 is_stmt 0 view .LVU1336
 4313              	.LBE375:
 4314              	.LBE374:
2664:src/display.c **** 	  finish_display(); //LIT_EQ
 4315              		.loc 1 2664 4 is_stmt 1 view .LVU1337
2664:src/display.c **** 	  finish_display(); //LIT_EQ
 4316              		.loc 1 2664 18 is_stmt 0 view .LVU1338
 4317 00ce 0023     		movs	r3, #0
 4318 00d0 3360     		str	r3, [r6]
2665:src/display.c **** 	}
 4319              		.loc 1 2665 4 is_stmt 1 view .LVU1339
 4320 00d2 FFF7FEFF 		bl	finish_display
 4321              	.LVL466:
2667:src/display.c **** 
 4322              		.loc 1 2667 7 is_stmt 0 view .LVU1340
 4323 00d6 D0E7     		b	.L399
 4324              	.LVL467:
 4325              	.L390:
2667:src/display.c **** 
 4326              		.loc 1 2667 7 view .LVU1341
 4327              	.LBE373:
 4328              	.LBE372:
 4329              	.LBE378:
 4330              	.LBE398:
 4331              	.LBB399:
 4332              	.LBB353:
 347:src/display.c **** }
 4333              		.loc 1 347 8 is_stmt 1 view .LVU1342
 4334 00d8 FFF7FEFF 		bl	clr_dot
 4335              	.LVL468:
 347:src/display.c **** }
 4336              		.loc 1 347 8 is_stmt 0 view .LVU1343
 4337 00dc ADE7     		b	.L391
 4338              	.LVL469:
 4339              	.L395:
 347:src/display.c **** }
 4340              		.loc 1 347 8 view .LVU1344
 4341              	.LBE353:
 4342              	.LBE399:
ARM GAS  /tmp/cchf4YwX.s 			page 161


 4343              	.LBB400:
 345:src/display.c ****   if (on)	set_dot(n);
 4344              		.loc 1 345 6 is_stmt 1 view .LVU1345
 4345              	.LBB363:
 346:src/display.c ****   else	clr_dot(n);
 4346              		.loc 1 346 3 view .LVU1346
 346:src/display.c ****   else	clr_dot(n);
 4347              		.loc 1 346 11 view .LVU1347
 4348 00de FFF7FEFF 		bl	set_dot
 4349              	.LVL470:
 4350 00e2 C0E7     		b	.L396
 4351              	.LVL471:
 4352              	.L415:
 346:src/display.c ****   else	clr_dot(n);
 4353              		.loc 1 346 11 is_stmt 0 view .LVU1348
 4354              	.LBE363:
 4355              	.LBE400:
 4356              	.LBB401:
 4357              	.LBI355:
 345:src/display.c ****   if (on)	set_dot(n);
 4358              		.loc 1 345 6 is_stmt 1 view .LVU1349
 4359              	.LBB358:
 346:src/display.c ****   else	clr_dot(n);
 4360              		.loc 1 346 3 view .LVU1350
 347:src/display.c **** }
 4361              		.loc 1 347 8 view .LVU1351
 4362 00e4 FFF7FEFF 		bl	clr_dot
 4363              	.LVL472:
 4364 00e8 B2E7     		b	.L393
 4365              	.LVL473:
 4366              	.L414:
 347:src/display.c **** }
 4367              		.loc 1 347 8 is_stmt 0 view .LVU1352
 4368              	.LBE358:
 4369              	.LBE401:
 4370              	.LBB402:
 345:src/display.c ****   if (on)	set_dot(n);
 4371              		.loc 1 345 6 is_stmt 1 view .LVU1353
 4372              	.LBB348:
 346:src/display.c ****   else	clr_dot(n);
 4373              		.loc 1 346 3 view .LVU1354
 346:src/display.c ****   else	clr_dot(n);
 4374              		.loc 1 346 11 view .LVU1355
 4375 00ea FFF7FEFF 		bl	set_dot
 4376              	.LVL474:
 4377 00ee 99E7     		b	.L389
 4378              	.L419:
 4379              		.align	2
 4380              	.L418:
 4381 00f0 00000000 		.word	main_ram
 4382 00f4 00000000 		.word	Running
 4383 00f8 00000000 		.word	StateWhileOn
 4384 00fc 07000800 		.word	524295
 4385 0100 00080800 		.word	526336
 4386 0104 00000000 		.word	IoAnnunciator
 4387              	.LBE348:
 4388              	.LBE402:
ARM GAS  /tmp/cchf4YwX.s 			page 162


 4389              		.cfi_endproc
 4390              	.LFE32:
 4392              		.section	.text.getdig,"ax",%progbits
 4393              		.align	1
 4394              		.p2align 2,,3
 4395              		.global	getdig
 4396              		.syntax unified
 4397              		.thumb
 4398              		.thumb_func
 4399              		.fpu fpv4-sp-d16
 4401              	getdig:
 4402              	.LVL475:
 4403              	.LFB6:
 340:src/display.c ****   // perform index lookup
 4404              		.loc 1 340 1 view -0
 4405              		.cfi_startproc
 4406              		@ args = 0, pretend = 0, frame = 0
 4407              		@ frame_needed = 0, uses_anonymous_args = 0
 4408              		@ link register save eliminated.
 342:src/display.c **** }
 4409              		.loc 1 342 3 view .LVU1357
 342:src/display.c **** }
 4410              		.loc 1 342 16 is_stmt 0 view .LVU1358
 4411 0000 014B     		ldr	r3, .L421
 342:src/display.c **** }
 4412              		.loc 1 342 19 view .LVU1359
 4413 0002 C0B2     		uxtb	r0, r0
 4414              	.LVL476:
 343:src/display.c **** 
 4415              		.loc 1 343 1 view .LVU1360
 4416 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4417 0006 7047     		bx	lr
 4418              	.L422:
 4419              		.align	2
 4420              	.L421:
 4421 0008 00000000 		.word	.LANCHOR2
 4422              		.cfi_endproc
 4423              	.LFE6:
 4425              		.section	.text.dot,"ax",%progbits
 4426              		.align	1
 4427              		.p2align 2,,3
 4428              		.global	dot
 4429              		.syntax unified
 4430              		.thumb
 4431              		.thumb_func
 4432              		.fpu fpv4-sp-d16
 4434              	dot:
 4435              	.LVL477:
 4436              	.LFB7:
 345:src/display.c ****   if (on)	set_dot(n);
 4437              		.loc 1 345 25 is_stmt 1 view -0
 4438              		.cfi_startproc
 4439              		@ args = 0, pretend = 0, frame = 0
 4440              		@ frame_needed = 0, uses_anonymous_args = 0
 4441              		@ link register save eliminated.
 346:src/display.c ****   else	clr_dot(n);
 4442              		.loc 1 346 3 view .LVU1362
ARM GAS  /tmp/cchf4YwX.s 			page 163


 346:src/display.c ****   else	clr_dot(n);
 4443              		.loc 1 346 6 is_stmt 0 view .LVU1363
 4444 0000 09B1     		cbz	r1, .L424
 346:src/display.c ****   else	clr_dot(n);
 4445              		.loc 1 346 11 is_stmt 1 discriminator 1 view .LVU1364
 4446 0002 FFF7FEBF 		b	set_dot
 4447              	.LVL478:
 4448              	.L424:
 347:src/display.c **** }
 4449              		.loc 1 347 8 view .LVU1365
 4450 0006 FFF7FEBF 		b	clr_dot
 4451              	.LVL479:
 347:src/display.c **** }
 4452              		.loc 1 347 8 is_stmt 0 view .LVU1366
 4453              		.cfi_endproc
 4454              	.LFE7:
 4456 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4457              		.align	1
 4458              		.p2align 2,,3
 4459              		.global	std_round_fix
 4460              		.syntax unified
 4461              		.thumb
 4462              		.thumb_func
 4463              		.fpu fpv4-sp-d16
 4465              	std_round_fix:
 4466              	.LVL480:
 4467              	.LFB24:
1834:src/display.c **** 	decNumber c;
 4468              		.loc 1 1834 93 is_stmt 1 view -0
 4469              		.cfi_startproc
 4470              		@ args = 0, pretend = 0, frame = 40
 4471              		@ frame_needed = 0, uses_anonymous_args = 0
1834:src/display.c **** 	decNumber c;
 4472              		.loc 1 1834 93 is_stmt 0 view .LVU1368
 4473 0000 70B5     		push	{r4, r5, r6, lr}
 4474              		.cfi_def_cfa_offset 16
 4475              		.cfi_offset 4, -16
 4476              		.cfi_offset 5, -12
 4477              		.cfi_offset 6, -8
 4478              		.cfi_offset 14, -4
 4479 0002 0E46     		mov	r6, r1
1835:src/display.c **** 	int true_exp, x=0;
 4480              		.loc 1 1835 2 is_stmt 1 view .LVU1369
1836:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4481              		.loc 1 1836 2 view .LVU1370
 4482              	.LVL481:
1837:src/display.c **** 
 4483              		.loc 1 1837 2 view .LVU1371
1839:src/display.c **** 	  min_pos_exp = 9;
 4484              		.loc 1 1839 2 view .LVU1372
1834:src/display.c **** 	decNumber c;
 4485              		.loc 1 1834 93 is_stmt 0 view .LVU1373
 4486 0004 8AB0     		sub	sp, sp, #40
 4487              		.cfi_def_cfa_offset 56
1839:src/display.c **** 	  min_pos_exp = 9;
 4488              		.loc 1 1839 5 view .LVU1374
 4489 0006 92B9     		cbnz	r2, .L426
ARM GAS  /tmp/cchf4YwX.s 			page 164


1844:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4490              		.loc 1 1844 4 is_stmt 1 view .LVU1375
 4491              	.LVL482:
1845:src/display.c **** 	}
 4492              		.loc 1 1845 4 view .LVU1376
1848:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4493              		.loc 1 1848 2 view .LVU1377
 4494 0008 0146     		mov	r1, r0
 4495              	.LVL483:
1848:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4496              		.loc 1 1848 2 is_stmt 0 view .LVU1378
 4497 000a 01A8     		add	r0, sp, #4
 4498              	.LVL484:
1848:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4499              		.loc 1 1848 2 view .LVU1379
 4500 000c 1D46     		mov	r5, r3
 4501 000e FFF7FEFF 		bl	dn_abs
 4502              	.LVL485:
1849:src/display.c **** 
 4503              		.loc 1 1849 2 is_stmt 1 view .LVU1380
1849:src/display.c **** 
 4504              		.loc 1 1849 24 is_stmt 0 view .LVU1381
 4505 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4506 0016 1844     		add	r0, r0, r3
 4507              	.LVL486:
1851:src/display.c **** 	  x = *dd;
 4508              		.loc 1 1851 2 is_stmt 1 view .LVU1382
1855:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4509              		.loc 1 1855 2 view .LVU1383
1855:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4510              		.loc 1 1855 5 is_stmt 0 view .LVU1384
 4511 0018 0138     		subs	r0, r0, #1
 4512 001a 1AD5     		bpl	.L430
1845:src/display.c **** 	}
 4513              		.loc 1 1845 16 view .LVU1385
 4514 001c EB43     		mvns	r3, r5
1855:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4515              		.loc 1 1855 21 view .LVU1386
 4516 001e 8342     		cmp	r3, r0
 4517 0020 17DA     		bge	.L430
 4518              	.LVL487:
 4519              	.L432:
1857:src/display.c **** 	  return MODE_FIX;
 4520              		.loc 1 1857 4 is_stmt 1 view .LVU1387
1857:src/display.c **** 	  return MODE_FIX;
 4521              		.loc 1 1857 8 is_stmt 0 view .LVU1388
 4522 0022 3368     		ldr	r3, [r6]
 4523 0024 181A     		subs	r0, r3, r0
 4524 0026 3060     		str	r0, [r6]
1858:src/display.c **** 	}
 4525              		.loc 1 1858 4 is_stmt 1 view .LVU1389
1858:src/display.c **** 	}
 4526              		.loc 1 1858 11 is_stmt 0 view .LVU1390
 4527 0028 0120     		movs	r0, #1
1867:src/display.c **** #else
 4528              		.loc 1 1867 7 view .LVU1391
 4529 002a 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/cchf4YwX.s 			page 165


 4530              		.cfi_remember_state
 4531              		.cfi_def_cfa_offset 16
 4532              		@ sp needed
 4533 002c 70BD     		pop	{r4, r5, r6, pc}
 4534              	.LVL488:
 4535              	.L426:
 4536              		.cfi_restore_state
1848:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4537              		.loc 1 1848 2 is_stmt 1 view .LVU1392
 4538 002e 0146     		mov	r1, r0
 4539              	.LVL489:
1848:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4540              		.loc 1 1848 2 is_stmt 0 view .LVU1393
 4541 0030 01A8     		add	r0, sp, #4
 4542              	.LVL490:
1848:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4543              		.loc 1 1848 2 view .LVU1394
 4544 0032 1446     		mov	r4, r2
 4545 0034 FFF7FEFF 		bl	dn_abs
 4546              	.LVL491:
1849:src/display.c **** 
 4547              		.loc 1 1849 2 is_stmt 1 view .LVU1395
1849:src/display.c **** 
 4548              		.loc 1 1849 24 is_stmt 0 view .LVU1396
 4549 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1851:src/display.c **** 	  x = *dd;
 4550              		.loc 1 1851 5 view .LVU1397
 4551 003c 052C     		cmp	r4, #5
1849:src/display.c **** 
 4552              		.loc 1 1849 24 view .LVU1398
 4553 003e 1344     		add	r3, r3, r2
1849:src/display.c **** 
 4554              		.loc 1 1849 11 view .LVU1399
 4555 0040 03F1FF30 		add	r0, r3, #-1
 4556              	.LVL492:
1851:src/display.c **** 	  x = *dd;
 4557              		.loc 1 1851 2 is_stmt 1 view .LVU1400
1851:src/display.c **** 	  x = *dd;
 4558              		.loc 1 1851 5 is_stmt 0 view .LVU1401
 4559 0044 15D1     		bne	.L434
1852:src/display.c **** 	}
 4560              		.loc 1 1852 4 is_stmt 1 view .LVU1402
1852:src/display.c **** 	}
 4561              		.loc 1 1852 6 is_stmt 0 view .LVU1403
 4562 0046 3268     		ldr	r2, [r6]
 4563              	.LVL493:
 4564              	.L429:
1855:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4565              		.loc 1 1855 2 is_stmt 1 view .LVU1404
1855:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4566              		.loc 1 1855 5 is_stmt 0 view .LVU1405
 4567 0048 8242     		cmp	r2, r0
 4568 004a 05DC     		bgt	.L438
1861:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4569              		.loc 1 1861 53 discriminator 2 view .LVU1406
 4570 004c 0333     		adds	r3, r3, #3
 4571 004e 0C2B     		cmp	r3, #12
ARM GAS  /tmp/cchf4YwX.s 			page 166


 4572 0050 04D8     		bhi	.L433
 4573              	.LVL494:
 4574              	.L430:
1865:src/display.c **** 	}
 4575              		.loc 1 1865 11 view .LVU1407
 4576 0052 0020     		movs	r0, #0
1867:src/display.c **** #else
 4577              		.loc 1 1867 7 view .LVU1408
 4578 0054 0AB0     		add	sp, sp, #40
 4579              		.cfi_remember_state
 4580              		.cfi_def_cfa_offset 16
 4581              		@ sp needed
 4582 0056 70BD     		pop	{r4, r5, r6, pc}
 4583              	.LVL495:
 4584              	.L438:
 4585              		.cfi_restore_state
1855:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4586              		.loc 1 1855 21 view .LVU1409
 4587 0058 031D     		adds	r3, r0, #4
 4588 005a E2DA     		bge	.L432
 4589              	.L433:
 4590              	.LBB405:
 4591              	.LBI405:
1834:src/display.c **** 	decNumber c;
 4592              		.loc 1 1834 26 is_stmt 1 view .LVU1410
 4593              	.LVL496:
 4594              	.LBB406:
1862:src/display.c **** 	}
 4595              		.loc 1 1862 4 view .LVU1411
1862:src/display.c **** 	}
 4596              		.loc 1 1862 24 is_stmt 0 view .LVU1412
 4597 005c 064B     		ldr	r3, .L439
 4598 005e 1B68     		ldr	r3, [r3]
 4599 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1862:src/display.c **** 	}
 4600              		.loc 1 1862 33 view .LVU1413
 4601 0064 13F0100F 		tst	r3, #16
 4602 0068 14BF     		ite	ne
 4603 006a 0320     		movne	r0, #3
 4604 006c 0220     		moveq	r0, #2
 4605              	.LBE406:
 4606              	.LBE405:
1867:src/display.c **** #else
 4607              		.loc 1 1867 7 view .LVU1414
 4608 006e 0AB0     		add	sp, sp, #40
 4609              		.cfi_remember_state
 4610              		.cfi_def_cfa_offset 16
 4611              		@ sp needed
 4612 0070 70BD     		pop	{r4, r5, r6, pc}
 4613              	.LVL497:
 4614              	.L434:
 4615              		.cfi_restore_state
1836:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4616              		.loc 1 1836 16 view .LVU1415
 4617 0072 0022     		movs	r2, #0
 4618 0074 E8E7     		b	.L429
 4619              	.L440:
ARM GAS  /tmp/cchf4YwX.s 			page 167


 4620 0076 00BF     		.align	2
 4621              	.L439:
 4622 0078 00000000 		.word	main_ram
 4623              		.cfi_endproc
 4624              	.LFE24:
 4626              		.section	.text.set_IO_annunciator,"ax",%progbits
 4627              		.align	1
 4628              		.p2align 2,,3
 4629              		.global	set_IO_annunciator
 4630              		.syntax unified
 4631              		.thumb
 4632              		.thumb_func
 4633              		.fpu fpv4-sp-d16
 4635              	set_IO_annunciator:
 4636              	.LFB33:
2647:src/display.c **** #ifndef DM42
 4637              		.loc 1 2647 37 is_stmt 1 view -0
 4638              		.cfi_startproc
 4639              		@ args = 0, pretend = 0, frame = 0
 4640              		@ frame_needed = 0, uses_anonymous_args = 0
2652:src/display.c **** #endif
 4641              		.loc 1 2652 4 view .LVU1417
 4642              	.LVL498:
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4643              		.loc 1 2662 2 view .LVU1418
2647:src/display.c **** #ifndef DM42
 4644              		.loc 1 2647 37 is_stmt 0 view .LVU1419
 4645 0000 10B5     		push	{r4, lr}
 4646              		.cfi_def_cfa_offset 8
 4647              		.cfi_offset 4, -8
 4648              		.cfi_offset 14, -4
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4649              		.loc 1 2662 9 view .LVU1420
 4650 0002 064C     		ldr	r4, .L445
2662:src/display.c **** 	  dot(LIT_EQ, on);
 4651              		.loc 1 2662 5 view .LVU1421
 4652 0004 2368     		ldr	r3, [r4]
 4653 0006 03B9     		cbnz	r3, .L444
2667:src/display.c **** 
 4654              		.loc 1 2667 7 view .LVU1422
 4655 0008 10BD     		pop	{r4, pc}
 4656              	.L444:
 4657              	.LBB411:
 4658              	.LBI411:
2647:src/display.c **** #ifndef DM42
 4659              		.loc 1 2647 12 is_stmt 1 view .LVU1423
 4660              	.LBB412:
2663:src/display.c **** 	  IoAnnunciator = on;
 4661              		.loc 1 2663 4 view .LVU1424
 4662              	.LVL499:
 4663              	.LBB413:
 4664              	.LBI413:
 345:src/display.c ****   if (on)	set_dot(n);
 4665              		.loc 1 345 6 view .LVU1425
 4666              	.LBB414:
 346:src/display.c ****   else	clr_dot(n);
 4667              		.loc 1 346 3 view .LVU1426
ARM GAS  /tmp/cchf4YwX.s 			page 168


 347:src/display.c **** }
 4668              		.loc 1 347 8 view .LVU1427
 4669 000a 8420     		movs	r0, #132
 4670 000c FFF7FEFF 		bl	clr_dot
 4671              	.LVL500:
 347:src/display.c **** }
 4672              		.loc 1 347 8 is_stmt 0 view .LVU1428
 4673              	.LBE414:
 4674              	.LBE413:
2664:src/display.c **** 	  finish_display(); //LIT_EQ
 4675              		.loc 1 2664 4 is_stmt 1 view .LVU1429
2664:src/display.c **** 	  finish_display(); //LIT_EQ
 4676              		.loc 1 2664 18 is_stmt 0 view .LVU1430
 4677 0010 0023     		movs	r3, #0
 4678 0012 2360     		str	r3, [r4]
2665:src/display.c **** 	}
 4679              		.loc 1 2665 4 is_stmt 1 view .LVU1431
 4680              	.LBE412:
 4681              	.LBE411:
2667:src/display.c **** 
 4682              		.loc 1 2667 7 is_stmt 0 view .LVU1432
 4683 0014 BDE81040 		pop	{r4, lr}
 4684              		.cfi_restore 14
 4685              		.cfi_restore 4
 4686              		.cfi_def_cfa_offset 0
 4687              	.LBB416:
 4688              	.LBB415:
2665:src/display.c **** 	}
 4689              		.loc 1 2665 4 view .LVU1433
 4690 0018 FFF7FEBF 		b	finish_display
 4691              	.LVL501:
 4692              	.L446:
 4693              		.align	2
 4694              	.L445:
 4695 001c 00000000 		.word	IoAnnunciator
 4696              	.LBE415:
 4697              	.LBE416:
 4698              		.cfi_endproc
 4699              	.LFE33:
 4701              		.section	.text.pixel_length,"ax",%progbits
 4702              		.align	1
 4703              		.p2align 2,,3
 4704              		.global	pixel_length
 4705              		.syntax unified
 4706              		.thumb
 4707              		.thumb_func
 4708              		.fpu fpv4-sp-d16
 4710              	pixel_length:
 4711              	.LVL502:
 4712              	.LFB40:
3595:src/display.c **** 
3596:src/display.c **** 
3597:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3598:src/display.c ****        */
3599:src/display.c ****       int pixel_length(const char *s, int smallp)
3600:src/display.c ****       {
 4713              		.loc 1 3600 7 is_stmt 1 view -0
ARM GAS  /tmp/cchf4YwX.s 			page 169


 4714              		.cfi_startproc
 4715              		@ args = 0, pretend = 0, frame = 0
 4716              		@ frame_needed = 0, uses_anonymous_args = 0
3601:src/display.c **** 	int len = 0;
 4717              		.loc 1 3601 2 view .LVU1435
3602:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4718              		.loc 1 3602 2 view .LVU1436
3600:src/display.c **** 	int len = 0;
 4719              		.loc 1 3600 7 is_stmt 0 view .LVU1437
 4720 0000 70B5     		push	{r4, r5, r6, lr}
 4721              		.cfi_def_cfa_offset 16
 4722              		.cfi_offset 4, -16
 4723              		.cfi_offset 5, -12
 4724              		.cfi_offset 6, -8
 4725              		.cfi_offset 14, -4
3600:src/display.c **** 	int len = 0;
 4726              		.loc 1 3600 7 view .LVU1438
 4727 0002 0446     		mov	r4, r0
3603:src/display.c **** 	while (*s != '\0') {
 4728              		.loc 1 3603 9 view .LVU1439
 4729 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4730              	.LVL503:
3602:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4731              		.loc 1 3602 34 view .LVU1440
 4732 0006 0E1E     		subs	r6, r1, #0
 4733 0008 18BF     		it	ne
 4734 000a 4FF48076 		movne	r6, #256
 4735              	.LVL504:
 4736              		.loc 1 3603 2 is_stmt 1 view .LVU1441
 4737              		.loc 1 3603 8 view .LVU1442
 4738 000e A0B1     		cbz	r0, .L454
3601:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4739              		.loc 1 3601 6 is_stmt 0 view .LVU1443
 4740 0010 0025     		movs	r5, #0
 4741 0012 06E0     		b	.L452
 4742              	.LVL505:
 4743              	.L450:
3604:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3605:src/display.c **** 	  if (s[0] == '\007') {
3606:src/display.c **** 	    len += s[1] & 0x1F;
3607:src/display.c **** 	    s += 3;
3608:src/display.c **** 	    continue;
3609:src/display.c **** 	  }
3610:src/display.c **** #endif
3611:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4744              		.loc 1 3611 11 view .LVU1444
 4745 0014 3044     		add	r0, r0, r6
 4746 0016 FFF7FEFF 		bl	charlengths
 4747              	.LVL506:
 4748              		.loc 1 3611 42 view .LVU1445
 4749 001a 0134     		adds	r4, r4, #1
 4750              	.LVL507:
 4751              		.loc 1 3611 8 view .LVU1446
 4752 001c 0544     		add	r5, r5, r0
 4753              	.LVL508:
3603:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4754              		.loc 1 3603 8 is_stmt 1 view .LVU1447
ARM GAS  /tmp/cchf4YwX.s 			page 170


3603:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4755              		.loc 1 3603 9 is_stmt 0 view .LVU1448
 4756 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3603:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4757              		.loc 1 3603 8 view .LVU1449
 4758 0020 48B1     		cbz	r0, .L447
 4759              	.LVL509:
 4760              	.L452:
3605:src/display.c **** 	    len += s[1] & 0x1F;
 4761              		.loc 1 3605 4 is_stmt 1 view .LVU1450
 4762              		.loc 1 3611 4 view .LVU1451
3605:src/display.c **** 	    len += s[1] & 0x1F;
 4763              		.loc 1 3605 7 is_stmt 0 view .LVU1452
 4764 0022 0728     		cmp	r0, #7
 4765 0024 F6D1     		bne	.L450
3606:src/display.c **** 	    s += 3;
 4766              		.loc 1 3606 6 is_stmt 1 view .LVU1453
3606:src/display.c **** 	    s += 3;
 4767              		.loc 1 3606 18 is_stmt 0 view .LVU1454
 4768 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3603:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4769              		.loc 1 3603 9 view .LVU1455
 4770 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3606:src/display.c **** 	    s += 3;
 4771              		.loc 1 3606 18 view .LVU1456
 4772 002a 03F01F03 		and	r3, r3, #31
3607:src/display.c **** 	    continue;
 4773              		.loc 1 3607 8 view .LVU1457
 4774 002e 0334     		adds	r4, r4, #3
 4775              	.LVL510:
3606:src/display.c **** 	    s += 3;
 4776              		.loc 1 3606 10 view .LVU1458
 4777 0030 1D44     		add	r5, r5, r3
 4778              	.LVL511:
3607:src/display.c **** 	    continue;
 4779              		.loc 1 3607 6 is_stmt 1 view .LVU1459
3608:src/display.c **** 	  }
 4780              		.loc 1 3608 6 view .LVU1460
3603:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4781              		.loc 1 3603 8 view .LVU1461
 4782 0032 0028     		cmp	r0, #0
 4783 0034 F5D1     		bne	.L452
 4784              	.L447:
3612:src/display.c **** 	}
3613:src/display.c **** 	return len;
3614:src/display.c ****       }
 4785              		.loc 1 3614 7 is_stmt 0 view .LVU1462
 4786 0036 2846     		mov	r0, r5
 4787 0038 70BD     		pop	{r4, r5, r6, pc}
 4788              	.LVL512:
 4789              	.L454:
3601:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4790              		.loc 1 3601 6 view .LVU1463
 4791 003a 0546     		mov	r5, r0
3613:src/display.c ****       }
 4792              		.loc 1 3613 2 is_stmt 1 view .LVU1464
 4793              		.loc 1 3614 7 is_stmt 0 view .LVU1465
ARM GAS  /tmp/cchf4YwX.s 			page 171


 4794 003c 2846     		mov	r0, r5
 4795 003e 70BD     		pop	{r4, r5, r6, pc}
 4796              		.loc 1 3614 7 view .LVU1466
 4797              		.cfi_endproc
 4798              	.LFE40:
 4800              		.section	.text.set_status,"ax",%progbits
 4801              		.align	1
 4802              		.p2align 2,,3
 4803              		.syntax unified
 4804              		.thumb
 4805              		.thumb_func
 4806              		.fpu fpv4-sp-d16
 4808              	set_status:
 4809              	.LVL513:
 4810              	.LFB43:
3615:src/display.c **** 
3616:src/display.c **** 
3617:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3618:src/display.c ****        * If this is larger than the display, return true.
3619:src/display.c ****        */
3620:src/display.c ****       static int string_too_large(const char *s) {
3621:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3622:src/display.c ****       }
3623:src/display.c ****       static int string_too_large_top(const char *s) {
3624:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3625:src/display.c ****       }
3626:src/display.c **** 
3627:src/display.c **** 
3628:src/display.c ****       /* Display the given string on the screen.
3629:src/display.c ****        */
3630:src/display.c ****       static void set_status(const char *str) {
 4811              		.loc 1 3630 47 is_stmt 1 view -0
 4812              		.cfi_startproc
 4813              		@ args = 0, pretend = 0, frame = 0
 4814              		@ frame_needed = 0, uses_anonymous_args = 0
3631:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4815              		.loc 1 3631 2 view .LVU1468
3630:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4816              		.loc 1 3630 47 is_stmt 0 view .LVU1469
 4817 0000 10B5     		push	{r4, lr}
 4818              		.cfi_def_cfa_offset 8
 4819              		.cfi_offset 4, -8
 4820              		.cfi_offset 14, -4
 4821              		.loc 1 3631 24 view .LVU1470
 4822 0002 0D4B     		ldr	r3, .L462
 4823              		.loc 1 3631 2 view .LVU1471
 4824 0004 93F91630 		ldrsb	r3, [r3, #22]
 4825 0008 002B     		cmp	r3, #0
3630:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4826              		.loc 1 3630 47 view .LVU1472
 4827 000a 82B0     		sub	sp, sp, #8
 4828              		.cfi_def_cfa_offset 16
3630:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4829              		.loc 1 3630 47 view .LVU1473
 4830 000c 0446     		mov	r4, r0
 4831              		.loc 1 3631 2 view .LVU1474
 4832 000e 0ADA     		bge	.L461
ARM GAS  /tmp/cchf4YwX.s 			page 172


 4833 0010 0121     		movs	r1, #1
 4834              	.LVL514:
 4835              	.L458:
 4836              	.LBB417:
 4837              	.LBI417:
3472:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4838              		.loc 1 3472 19 is_stmt 1 discriminator 6 view .LVU1475
 4839              	.LBB418:
3473:src/display.c ****       }
 4840              		.loc 1 3473 2 discriminator 6 view .LVU1476
 4841 0012 40F24A23 		movw	r3, #586
 4842 0016 0093     		str	r3, [sp]
 4843 0018 2046     		mov	r0, r4
 4844 001a 8E23     		movs	r3, #142
 4845 001c 4A22     		movs	r2, #74
 4846 001e FFF7FEFF 		bl	s_s_sized
 4847              	.LVL515:
3473:src/display.c ****       }
 4848              		.loc 1 3473 2 is_stmt 0 discriminator 6 view .LVU1477
 4849              	.LBE418:
 4850              	.LBE417:
3632:src/display.c ****       }
 4851              		.loc 1 3632 7 discriminator 6 view .LVU1478
 4852 0022 02B0     		add	sp, sp, #8
 4853              		.cfi_remember_state
 4854              		.cfi_def_cfa_offset 8
 4855              		@ sp needed
 4856 0024 10BD     		pop	{r4, pc}
 4857              	.LVL516:
 4858              	.L461:
 4859              		.cfi_restore_state
 4860              	.LBB419:
 4861              	.LBI419:
3620:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4862              		.loc 1 3620 18 is_stmt 1 view .LVU1479
 4863              	.LBB420:
3621:src/display.c ****       }
 4864              		.loc 1 3621 2 view .LVU1480
3621:src/display.c ****       }
 4865              		.loc 1 3621 9 is_stmt 0 view .LVU1481
 4866 0026 0021     		movs	r1, #0
 4867 0028 FFF7FEFF 		bl	pixel_length
 4868              	.LVL517:
3621:src/display.c ****       }
 4869              		.loc 1 3621 9 view .LVU1482
 4870              	.LBE420:
 4871              	.LBE419:
3631:src/display.c ****       }
 4872              		.loc 1 3631 2 view .LVU1483
 4873 002c 4B28     		cmp	r0, #75
 4874 002e D4BF     		ite	le
 4875 0030 0021     		movle	r1, #0
 4876 0032 0121     		movgt	r1, #1
 4877 0034 EDE7     		b	.L458
 4878              	.L463:
 4879 0036 00BF     		.align	2
 4880              	.L462:
ARM GAS  /tmp/cchf4YwX.s 			page 173


 4881 0038 00000000 		.word	StateWhileOn
 4882              		.cfi_endproc
 4883              	.LFE43:
 4885              		.section	.text.set_x_dn,"ax",%progbits
 4886              		.align	1
 4887              		.p2align 2,,3
 4888              		.global	set_x_dn
 4889              		.syntax unified
 4890              		.thumb
 4891              		.thumb_func
 4892              		.fpu fpv4-sp-d16
 4894              	set_x_dn:
 4895              	.LVL518:
 4896              	.LFB27:
2016:src/display.c **** 	char x[50], *obp = x;
 4897              		.loc 1 2016 67 is_stmt 1 view -0
 4898              		.cfi_startproc
 4899              		@ args = 0, pretend = 0, frame = 152
 4900              		@ frame_needed = 0, uses_anonymous_args = 0
2017:src/display.c **** 	int odig = 0;
 4901              		.loc 1 2017 2 view .LVU1485
2016:src/display.c **** 	char x[50], *obp = x;
 4902              		.loc 1 2016 67 is_stmt 0 view .LVU1486
 4903 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4904              		.cfi_def_cfa_offset 36
 4905              		.cfi_offset 4, -36
 4906              		.cfi_offset 5, -32
 4907              		.cfi_offset 6, -28
 4908              		.cfi_offset 7, -24
 4909              		.cfi_offset 8, -20
 4910              		.cfi_offset 9, -16
 4911              		.cfi_offset 10, -12
 4912              		.cfi_offset 11, -8
 4913              		.cfi_offset 14, -4
 4914 0004 A7B0     		sub	sp, sp, #156
 4915              		.cfi_def_cfa_offset 192
 4916              	.LVL519:
2018:src/display.c **** 	int show_exp = 0;
 4917              		.loc 1 2018 2 is_stmt 1 view .LVU1487
2019:src/display.c **** 	int j;
 4918              		.loc 1 2019 2 view .LVU1488
2020:src/display.c **** 	char mantissa[64];
 4919              		.loc 1 2020 2 view .LVU1489
2021:src/display.c **** 	int exp = 0;
 4920              		.loc 1 2021 2 view .LVU1490
2022:src/display.c **** 	char *p = mantissa;
 4921              		.loc 1 2022 2 view .LVU1491
2023:src/display.c **** 	char *r;
 4922              		.loc 1 2023 2 view .LVU1492
2024:src/display.c **** 	const char *q;
 4923              		.loc 1 2024 2 view .LVU1493
2025:src/display.c **** 	int count, i;
 4924              		.loc 1 2025 2 view .LVU1494
2026:src/display.c **** 	int extra_digits = 0;
 4925              		.loc 1 2026 2 view .LVU1495
2027:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4926              		.loc 1 2027 2 view .LVU1496
ARM GAS  /tmp/cchf4YwX.s 			page 174


2029:src/display.c **** 	int dispdigs;
 4927              		.loc 1 2029 2 view .LVU1497
2030:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4928              		.loc 1 2030 2 view .LVU1498
2031:src/display.c **** #else
 4929              		.loc 1 2031 2 view .LVU1499
2016:src/display.c **** 	char x[50], *obp = x;
 4930              		.loc 1 2016 67 is_stmt 0 view .LVU1500
 4931 0006 0746     		mov	r7, r0
2031:src/display.c **** #else
 4932              		.loc 1 2031 13 view .LVU1501
 4933 0008 08A8     		add	r0, sp, #32
 4934              	.LVL520:
2016:src/display.c **** 	char x[50], *obp = x;
 4935              		.loc 1 2016 67 view .LVU1502
 4936 000a 0C46     		mov	r4, r1
 4937 000c 0192     		str	r2, [sp, #4]
2031:src/display.c **** #else
 4938              		.loc 1 2031 13 view .LVU1503
 4939 000e FFF7FEFF 		bl	get_dispmode_digs
 4940              	.LVL521:
2031:src/display.c **** #else
 4941              		.loc 1 2031 13 view .LVU1504
 4942 0012 0546     		mov	r5, r0
 4943              	.LVL522:
2036:src/display.c **** 	int negative = 0;
 4944              		.loc 1 2036 2 is_stmt 1 view .LVU1505
2037:src/display.c **** 	int trimzeros = 0;
 4945              		.loc 1 2037 2 view .LVU1506
2038:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4946              		.loc 1 2038 2 view .LVU1507
2046:src/display.c **** #endif
 4947              		.loc 1 2046 2 view .LVU1508
2049:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4948              		.loc 1 2049 2 view .LVU1509
 4949 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4950              	.LVL523:
2051:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4951              		.loc 1 2051 2 view .LVU1510
2051:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4952              		.loc 1 2051 5 is_stmt 0 view .LVU1511
 4953 0018 002C     		cmp	r4, #0
 4954 001a 00F08181 		beq	.L465
 4955              	.L468:
2076:src/display.c **** 	  return;
 4956              		.loc 1 2076 2 is_stmt 1 view .LVU1512
2076:src/display.c **** 	  return;
 4957              		.loc 1 2076 6 is_stmt 0 view .LVU1513
 4958 001e 2146     		mov	r1, r4
 4959 0020 07F10800 		add	r0, r7, #8
 4960 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4961              	.LVL524:
2076:src/display.c **** 	  return;
 4962              		.loc 1 2076 5 view .LVU1514
 4963 0028 8246     		mov	r10, r0
 4964 002a 0028     		cmp	r0, #0
 4965 002c 40F07081 		bne	.L464
ARM GAS  /tmp/cchf4YwX.s 			page 175


2079:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4966              		.loc 1 2079 2 is_stmt 1 view .LVU1515
2079:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4967              		.loc 1 2079 12 is_stmt 0 view .LVU1516
 4968 0030 C94E     		ldr	r6, .L713
2079:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4969              		.loc 1 2079 5 view .LVU1517
 4970 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4971 0034 012B     		cmp	r3, #1
 4972 0036 00F0EC82 		beq	.L690
2022:src/display.c **** 	char *p = mantissa;
 4973              		.loc 1 2022 6 view .LVU1518
 4974 003a 8046     		mov	r8, r0
 4975              	.LVL525:
 4976              	.L471:
2085:src/display.c **** 
 4977              		.loc 1 2085 2 is_stmt 1 view .LVU1519
 4978 003c 0DF1240B 		add	fp, sp, #36
 4979              	.LVL526:
2085:src/display.c **** 
 4980              		.loc 1 2085 2 is_stmt 0 view .LVU1520
 4981 0040 5846     		mov	r0, fp
 4982 0042 3222     		movs	r2, #50
 4983 0044 0021     		movs	r1, #0
 4984 0046 FFF7FEFF 		bl	xset
 4985              	.LVL527:
2087:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4986              		.loc 1 2087 2 is_stmt 1 view .LVU1521
2087:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4987              		.loc 1 2087 6 is_stmt 0 view .LVU1522
 4988 004a 3846     		mov	r0, r7
 4989 004c FFF7FEFF 		bl	dn_eq0
 4990              	.LVL528:
2087:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4991              		.loc 1 2087 5 view .LVU1523
 4992 0050 0028     		cmp	r0, #0
 4993 0052 00F06081 		beq	.L472
2088:src/display.c **** 	    x[0] = '-';
 4994              		.loc 1 2088 4 is_stmt 1 view .LVU1524
2088:src/display.c **** 	    x[0] = '-';
 4995              		.loc 1 2088 7 is_stmt 0 view .LVU1525
 4996 0056 97F90830 		ldrsb	r3, [r7, #8]
 4997 005a 002B     		cmp	r3, #0
 4998 005c C0F20083 		blt	.L691
 4999              	.L473:
2092:src/display.c **** 	} else
 5000              		.loc 1 2092 6 is_stmt 1 view .LVU1526
2092:src/display.c **** 	} else
 5001              		.loc 1 2092 11 is_stmt 0 view .LVU1527
 5002 0060 3023     		movs	r3, #48
 5003 0062 8DF82430 		strb	r3, [sp, #36]
 5004              	.L474:
2096:src/display.c **** 	  show_x(x, exp);
 5005              		.loc 1 2096 2 is_stmt 1 view .LVU1528
2096:src/display.c **** 	  show_x(x, exp);
 5006              		.loc 1 2096 12 is_stmt 0 view .LVU1529
 5007 0066 96F81190 		ldrb	r9, [r6, #17]	@ zero_extendqisi2
ARM GAS  /tmp/cchf4YwX.s 			page 176


2096:src/display.c **** 	  show_x(x, exp);
 5008              		.loc 1 2096 5 view .LVU1530
 5009 006a B9F1010F 		cmp	r9, #1
 5010 006e 00F04583 		beq	.L692
2102:src/display.c **** 	  //  ALL mode: fill the display
 5011              		.loc 1 2102 2 is_stmt 1 view .LVU1531
2102:src/display.c **** 	  //  ALL mode: fill the display
 5012              		.loc 1 2102 5 is_stmt 0 view .LVU1532
 5013 0072 002D     		cmp	r5, #0
 5014 0074 40F07881 		bne	.L693
2104:src/display.c **** 	else
 5015              		.loc 1 2104 4 is_stmt 1 view .LVU1533
2104:src/display.c **** 	else
 5016              		.loc 1 2104 25 is_stmt 0 view .LVU1534
 5017 0078 019E     		ldr	r6, [sp, #4]
 5018              	.LBB438:
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5019              		.loc 1 2111 11 view .LVU1535
 5020 007a 089B     		ldr	r3, [sp, #32]
 5021              	.LBE438:
2104:src/display.c **** 	else
 5022              		.loc 1 2104 25 view .LVU1536
 5023 007c 3168     		ldr	r1, [r6]
 5024              	.LBB439:
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5025              		.loc 1 2111 11 view .LVU1537
 5026 007e 2A46     		mov	r2, r5
 5027 0080 3846     		mov	r0, r7
 5028              	.LBE439:
2104:src/display.c **** 	else
 5029              		.loc 1 2104 25 view .LVU1538
 5030 0082 4D1E     		subs	r5, r1, #1
 5031              	.LVL529:
 5032              	.LBB440:
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5033              		.loc 1 2111 11 view .LVU1539
 5034 0084 07A9     		add	r1, sp, #28
 5035              	.LBE440:
2104:src/display.c **** 	else
 5036              		.loc 1 2104 7 view .LVU1540
 5037 0086 0795     		str	r5, [sp, #28]
2108:src/display.c **** 	  int orig_mode = mode;
 5038              		.loc 1 2108 2 is_stmt 1 view .LVU1541
 5039              	.LBB441:
2109:src/display.c **** 
 5040              		.loc 1 2109 4 view .LVU1542
 5041              	.LVL530:
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5042              		.loc 1 2111 4 view .LVU1543
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5043              		.loc 1 2111 11 is_stmt 0 view .LVU1544
 5044 0088 FFF7FEFF 		bl	std_round_fix
 5045              	.LVL531:
2116:src/display.c ****  	}
 5046              		.loc 1 2116 27 view .LVU1545
 5047 008c 3368     		ldr	r3, [r6]
 5048 008e 013B     		subs	r3, r3, #1
ARM GAS  /tmp/cchf4YwX.s 			page 177


2116:src/display.c ****  	}
 5049              		.loc 1 2116 9 view .LVU1546
 5050 0090 0793     		str	r3, [sp, #28]
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5051              		.loc 1 2114 16 view .LVU1547
 5052 0092 0123     		movs	r3, #1
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5053              		.loc 1 2111 11 view .LVU1548
 5054 0094 0546     		mov	r5, r0
 5055              	.LVL532:
2112:src/display.c **** 	    // allow zeros to be trimmed
 5056              		.loc 1 2112 4 is_stmt 1 view .LVU1549
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5057              		.loc 1 2114 6 view .LVU1550
2115:src/display.c **** 	    dd = *display_digits - 1;
 5058              		.loc 1 2115 4 view .LVU1551
2116:src/display.c ****  	}
 5059              		.loc 1 2116 6 view .LVU1552
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5060              		.loc 1 2114 16 is_stmt 0 view .LVU1553
 5061 0096 0493     		str	r3, [sp, #16]
 5062              	.LVL533:
 5063              	.L593:
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5064              		.loc 1 2114 16 view .LVU1554
 5065              	.LBE441:
2128:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5066              		.loc 1 2128 2 is_stmt 1 view .LVU1555
 5067 0098 0DF15809 		add	r9, sp, #88
 5068              	.LVL534:
2128:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5069              		.loc 1 2128 2 is_stmt 0 view .LVU1556
 5070 009c 3F22     		movs	r2, #63
 5071 009e 3021     		movs	r1, #48
 5072 00a0 4846     		mov	r0, r9
 5073 00a2 FFF7FEFF 		bl	xset
 5074              	.LVL535:
2129:src/display.c **** 
 5075              		.loc 1 2129 2 is_stmt 1 view .LVU1557
2129:src/display.c **** 
 5076              		.loc 1 2129 31 is_stmt 0 view .LVU1558
 5077 00a6 0023     		movs	r3, #0
2131:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5078              		.loc 1 2131 6 view .LVU1559
 5079 00a8 4521     		movs	r1, #69
 5080 00aa 5846     		mov	r0, fp
2129:src/display.c **** 
 5081              		.loc 1 2129 31 view .LVU1560
 5082 00ac 8DF89730 		strb	r3, [sp, #151]
2131:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5083              		.loc 1 2131 2 is_stmt 1 view .LVU1561
2131:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5084              		.loc 1 2131 6 is_stmt 0 view .LVU1562
 5085 00b0 FFF7FEFF 		bl	find_char
 5086              	.LVL536:
2133:src/display.c **** 	if (q == NULL) exp = 0;
 5087              		.loc 1 2133 2 is_stmt 1 view .LVU1563
ARM GAS  /tmp/cchf4YwX.s 			page 178


2133:src/display.c **** 	if (q == NULL) exp = 0;
 5088              		.loc 1 2133 5 is_stmt 0 view .LVU1564
 5089 00b4 0646     		mov	r6, r0
 5090 00b6 0028     		cmp	r0, #0
 5091 00b8 00F06481 		beq	.L694
 5092              	.L490:
2136:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5093              		.loc 1 2136 4 is_stmt 1 view .LVU1565
2136:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5094              		.loc 1 2136 10 is_stmt 0 view .LVU1566
 5095 00bc 701C     		adds	r0, r6, #1
 5096              	.LVL537:
2136:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5097              		.loc 1 2136 10 view .LVU1567
 5098 00be FFF7FEFF 		bl	s_to_i
 5099              	.LVL538:
2137:src/display.c **** 	}
 5100              		.loc 1 2137 7 view .LVU1568
 5101 00c2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 5102 00c4 442B     		cmp	r3, #68
2136:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5103              		.loc 1 2136 10 view .LVU1569
 5104 00c6 0646     		mov	r6, r0
 5105              	.LVL539:
2137:src/display.c **** 	}
 5106              		.loc 1 2137 4 is_stmt 1 view .LVU1570
2137:src/display.c **** 	}
 5107              		.loc 1 2137 19 view .LVU1571
2137:src/display.c **** 	}
 5108              		.loc 1 2137 23 is_stmt 0 view .LVU1572
 5109 00c8 08BF     		it	eq
 5110 00ca 4642     		rsbeq	r6, r0, #0
 5111              	.LVL540:
 5112              	.L491:
2145:src/display.c **** 	if (!res) {
 5113              		.loc 1 2145 2 is_stmt 1 view .LVU1573
2145:src/display.c **** 	if (!res) {
 5114              		.loc 1 2145 12 view .LVU1574
2145:src/display.c **** 	if (!res) {
 5115              		.loc 1 2145 2 is_stmt 0 view .LVU1575
 5116 00cc 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 5117 00d0 202B     		cmp	r3, #32
2145:src/display.c **** 	if (!res) {
 5118              		.loc 1 2145 8 view .LVU1576
 5119 00d2 D846     		mov	r8, fp
2145:src/display.c **** 	if (!res) {
 5120              		.loc 1 2145 2 view .LVU1577
 5121 00d4 03D1     		bne	.L492
 5122              	.LVL541:
 5123              	.L493:
2145:src/display.c **** 	if (!res) {
 5124              		.loc 1 2145 27 is_stmt 1 discriminator 3 view .LVU1578
2145:src/display.c **** 	if (!res) {
 5125              		.loc 1 2145 23 discriminator 3 view .LVU1579
2145:src/display.c **** 	if (!res) {
 5126              		.loc 1 2145 12 discriminator 3 view .LVU1580
2145:src/display.c **** 	if (!res) {
ARM GAS  /tmp/cchf4YwX.s 			page 179


 5127              		.loc 1 2145 2 is_stmt 0 discriminator 3 view .LVU1581
 5128 00d6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5129              	.LVL542:
2145:src/display.c **** 	if (!res) {
 5130              		.loc 1 2145 2 discriminator 3 view .LVU1582
 5131 00da 202B     		cmp	r3, #32
 5132 00dc FBD0     		beq	.L493
 5133              	.LVL543:
 5134              	.L492:
2146:src/display.c **** 	  CLR_EXP_SIGN;
 5135              		.loc 1 2146 2 is_stmt 1 view .LVU1583
2146:src/display.c **** 	  CLR_EXP_SIGN;
 5136              		.loc 1 2146 5 is_stmt 0 view .LVU1584
 5137 00de 002C     		cmp	r4, #0
 5138 00e0 00F0C982 		beq	.L695
 5139              	.L494:
2150:src/display.c **** 	  negative = 1;
 5140              		.loc 1 2150 2 is_stmt 1 view .LVU1585
2150:src/display.c **** 	  negative = 1;
 5141              		.loc 1 2150 6 is_stmt 0 view .LVU1586
 5142 00e4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2150:src/display.c **** 	  negative = 1;
 5143              		.loc 1 2150 5 view .LVU1587
 5144 00e8 2D2B     		cmp	r3, #45
 5145 00ea 00F0DB81 		beq	.L696
2153:src/display.c **** 	  q++;
 5146              		.loc 1 2153 9 is_stmt 1 view .LVU1588
2153:src/display.c **** 	  q++;
 5147              		.loc 1 2153 12 is_stmt 0 view .LVU1589
 5148 00ee 2B2B     		cmp	r3, #43
 5149 00f0 00F0AF82 		beq	.L697
2037:src/display.c **** 	int trimzeros = 0;
 5150              		.loc 1 2037 6 view .LVU1590
 5151 00f4 0022     		movs	r2, #0
 5152 00f6 0392     		str	r2, [sp, #12]
 5153              	.LVL544:
 5154              	.L496:
2155:src/display.c **** 	if (*q == '.') {
 5155              		.loc 1 2155 9 is_stmt 1 discriminator 1 view .LVU1591
2155:src/display.c **** 	if (*q == '.') {
 5156              		.loc 1 2155 2 is_stmt 0 discriminator 1 view .LVU1592
 5157 00f8 302B     		cmp	r3, #48
 5158 00fa 03D1     		bne	.L498
 5159              	.LVL545:
 5160              	.L497:
2155:src/display.c **** 	if (*q == '.') {
 5161              		.loc 1 2155 24 is_stmt 1 discriminator 2 view .LVU1593
2155:src/display.c **** 	if (*q == '.') {
 5162              		.loc 1 2155 20 discriminator 2 view .LVU1594
2155:src/display.c **** 	if (*q == '.') {
 5163              		.loc 1 2155 9 discriminator 2 view .LVU1595
 5164 00fc 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5165              	.LVL546:
2155:src/display.c **** 	if (*q == '.') {
 5166              		.loc 1 2155 2 is_stmt 0 discriminator 2 view .LVU1596
 5167 0100 302B     		cmp	r3, #48
 5168 0102 FBD0     		beq	.L497
ARM GAS  /tmp/cchf4YwX.s 			page 180


 5169              	.LVL547:
 5170              	.L498:
2156:src/display.c **** 	  do
 5171              		.loc 1 2156 2 is_stmt 1 view .LVU1597
2156:src/display.c **** 	  do
 5172              		.loc 1 2156 5 is_stmt 0 view .LVU1598
 5173 0104 2E2B     		cmp	r3, #46
 5174 0106 00F0B581 		beq	.L698
2163:src/display.c **** 	    *p++ = *q++;
 5175              		.loc 1 2163 4 is_stmt 1 view .LVU1599
2163:src/display.c **** 	    *p++ = *q++;
 5176              		.loc 1 2163 7 is_stmt 0 view .LVU1600
 5177 010a A3F13002 		sub	r2, r3, #48
 5178 010e 092A     		cmp	r2, #9
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5179              		.loc 1 2164 6 is_stmt 1 view .LVU1601
 5180              	.LVL548:
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5181              		.loc 1 2164 15 is_stmt 0 view .LVU1602
 5182 0110 9CBF     		itt	ls
 5183 0112 08F10108 		addls	r8, r8, #1
 5184              	.LVL549:
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5185              		.loc 1 2164 11 view .LVU1603
 5186 0116 8DF85830 		strbls	r3, [sp, #88]
2165:src/display.c **** 	    *p++ = *q++;
 5187              		.loc 1 2165 11 view .LVU1604
 5188 011a 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2165:src/display.c **** 	    *p++ = *q++;
 5189              		.loc 1 2165 10 view .LVU1605
 5190 011e A2F13003 		sub	r3, r2, #48
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5191              		.loc 1 2164 8 view .LVU1606
 5192 0122 94BF     		ite	ls
 5193 0124 0DF15901 		addls	r1, sp, #89
2023:src/display.c **** 	char *r;
 5194              		.loc 1 2023 8 view .LVU1607
 5195 0128 4946     		movhi	r1, r9
 5196              	.LVL550:
2165:src/display.c **** 	    *p++ = *q++;
 5197              		.loc 1 2165 10 is_stmt 1 view .LVU1608
 5198 012a 092B     		cmp	r3, #9
 5199 012c 0ED8     		bhi	.L504
 5200 012e A6EB0800 		sub	r0, r6, r8
 5201 0132 08F10103 		add	r3, r8, #1
 5202              	.L505:
 5203              	.LVL551:
2166:src/display.c **** 	    exp++;
 5204              		.loc 1 2166 6 view .LVU1609
2166:src/display.c **** 	    exp++;
 5205              		.loc 1 2166 11 is_stmt 0 view .LVU1610
 5206 0136 01F8012B 		strb	r2, [r1], #1
 5207              	.LVL552:
2166:src/display.c **** 	    exp++;
 5208              		.loc 1 2166 15 view .LVU1611
 5209 013a 9846     		mov	r8, r3
 5210              	.LVL553:
ARM GAS  /tmp/cchf4YwX.s 			page 181


2167:src/display.c **** 	  }
 5211              		.loc 1 2167 6 is_stmt 1 view .LVU1612
 5212 013c C618     		adds	r6, r0, r3
 5213              	.LVL554:
2165:src/display.c **** 	    *p++ = *q++;
 5214              		.loc 1 2165 10 view .LVU1613
2165:src/display.c **** 	    *p++ = *q++;
 5215              		.loc 1 2165 11 is_stmt 0 view .LVU1614
 5216 013e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5217              	.LVL555:
2165:src/display.c **** 	    *p++ = *q++;
 5218              		.loc 1 2165 10 view .LVU1615
 5219 0142 A2F1300C 		sub	ip, r2, #48
 5220 0146 BCF1090F 		cmp	ip, #9
 5221 014a F4D9     		bls	.L505
 5222              	.LVL556:
 5223              	.L504:
2169:src/display.c **** 	    q++;
 5224              		.loc 1 2169 4 is_stmt 1 view .LVU1616
2169:src/display.c **** 	    q++;
 5225              		.loc 1 2169 7 is_stmt 0 view .LVU1617
 5226 014c 2E2A     		cmp	r2, #46
 5227 014e 00F06E82 		beq	.L699
 5228              	.LVL557:
 5229              	.L501:
2176:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5230              		.loc 1 2176 2 is_stmt 1 view .LVU1618
2177:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5231              		.loc 1 2177 12 is_stmt 0 view .LVU1619
 5232 0152 019B     		ldr	r3, [sp, #4]
 5233 0154 079A     		ldr	r2, [sp, #28]
 5234 0156 1B68     		ldr	r3, [r3]
 5235 0158 0293     		str	r3, [sp, #8]
2176:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5236              		.loc 1 2176 5 view .LVU1620
 5237 015a 012D     		cmp	r5, #1
 5238 015c 00F07A81 		beq	.L507
 5239              	.LVL558:
 5240              	.L689:
2178:src/display.c **** 	  else {
 5241              		.loc 1 2178 35 view .LVU1621
 5242 0160 0021     		movs	r1, #0
 5243              	.LVL559:
 5244              	.L508:
2190:src/display.c **** 	if (*p >= '5') {	// Round up
 5245              		.loc 1 2190 2 is_stmt 1 view .LVU1622
 5246 0162 02F1010E 		add	lr, r2, #1
2190:src/display.c **** 	if (*p >= '5') {	// Round up
 5247              		.loc 1 2190 35 is_stmt 0 view .LVU1623
 5248 0166 7144     		add	r1, r1, lr
2190:src/display.c **** 	if (*p >= '5') {	// Round up
 5249              		.loc 1 2190 4 view .LVU1624
 5250 0168 09EB0103 		add	r3, r9, r1
 5251              	.LVL560:
2191:src/display.c **** 	  *p = '0';
 5252              		.loc 1 2191 2 is_stmt 1 view .LVU1625
2191:src/display.c **** 	  *p = '0';
ARM GAS  /tmp/cchf4YwX.s 			page 182


 5253              		.loc 1 2191 6 is_stmt 0 view .LVU1626
 5254 016c 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2191:src/display.c **** 	  *p = '0';
 5255              		.loc 1 2191 5 view .LVU1627
 5256 0170 3428     		cmp	r0, #52
 5257 0172 26D9     		bls	.L513
2192:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5258              		.loc 1 2192 4 is_stmt 1 view .LVU1628
2192:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5259              		.loc 1 2192 7 is_stmt 0 view .LVU1629
 5260 0174 3020     		movs	r0, #48
 5261 0176 09F80100 		strb	r0, [r9, r1]
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5262              		.loc 1 2193 4 is_stmt 1 view .LVU1630
 5263              	.LVL561:
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5264              		.loc 1 2193 23 view .LVU1631
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5265              		.loc 1 2193 4 is_stmt 0 view .LVU1632
 5266 017a 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5267 017e 3928     		cmp	r0, #57
 5268 0180 40F0DD83 		bne	.L514
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5269              		.loc 1 2193 11 view .LVU1633
 5270 0184 4846     		mov	r0, r9
 5271              	.LVL562:
 5272              	.L515:
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5273              		.loc 1 2193 38 is_stmt 1 discriminator 3 view .LVU1634
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5274              		.loc 1 2193 34 discriminator 3 view .LVU1635
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5275              		.loc 1 2193 23 discriminator 3 view .LVU1636
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5276              		.loc 1 2193 4 is_stmt 0 discriminator 3 view .LVU1637
 5277 0186 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5278              	.LVL563:
2193:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5279              		.loc 1 2193 4 discriminator 3 view .LVU1638
 5280 018a BCF1390F 		cmp	ip, #57
 5281 018e FAD0     		beq	.L515
2194:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5282              		.loc 1 2194 4 is_stmt 1 view .LVU1639
2194:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5283              		.loc 1 2194 7 is_stmt 0 view .LVU1640
 5284 0190 8342     		cmp	r3, r0
 5285 0192 00F00D81 		beq	.L700
 5286              	.LVL564:
 5287              	.L591:
2203:src/display.c **** 	      *p = '0';
 5288              		.loc 1 2203 12 is_stmt 1 view .LVU1641
2203:src/display.c **** 	      *p = '0';
 5289              		.loc 1 2203 13 is_stmt 0 view .LVU1642
 5290 0196 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2203:src/display.c **** 	      *p = '0';
 5291              		.loc 1 2203 12 view .LVU1643
 5292 019a BCF1390F 		cmp	ip, #57
ARM GAS  /tmp/cchf4YwX.s 			page 183


 5293 019e 03F1FF30 		add	r0, r3, #-1
 5294              	.LVL565:
2203:src/display.c **** 	      *p = '0';
 5295              		.loc 1 2203 12 view .LVU1644
 5296 01a2 08D1     		bne	.L518
2204:src/display.c **** 	    (*p)++;
 5297              		.loc 1 2204 11 view .LVU1645
 5298 01a4 4FF0300E 		mov	lr, #48
 5299              	.L517:
2204:src/display.c **** 	    (*p)++;
 5300              		.loc 1 2204 8 is_stmt 1 view .LVU1646
2204:src/display.c **** 	    (*p)++;
 5301              		.loc 1 2204 11 is_stmt 0 view .LVU1647
 5302 01a8 80F800E0 		strb	lr, [r0]
2203:src/display.c **** 	      *p = '0';
 5303              		.loc 1 2203 12 is_stmt 1 view .LVU1648
 5304              	.LVL566:
2203:src/display.c **** 	      *p = '0';
 5305              		.loc 1 2203 13 is_stmt 0 view .LVU1649
 5306 01ac 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5307              	.LVL567:
2203:src/display.c **** 	      *p = '0';
 5308              		.loc 1 2203 12 view .LVU1650
 5309 01b0 BCF1390F 		cmp	ip, #57
 5310 01b4 F8D0     		beq	.L517
 5311              	.L518:
2205:src/display.c **** 	  }
 5312              		.loc 1 2205 6 is_stmt 1 view .LVU1651
2205:src/display.c **** 	  }
 5313              		.loc 1 2205 10 is_stmt 0 view .LVU1652
 5314 01b6 0CF1010C 		add	ip, ip, #1
 5315 01ba 80F800C0 		strb	ip, [r0]
 5316              	.LVL568:
 5317              	.L688:
2205:src/display.c **** 	  }
 5318              		.loc 1 2205 10 view .LVU1653
 5319 01be 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5320              	.L513:
2210:src/display.c **** 
 5321              		.loc 1 2210 2 is_stmt 1 view .LVU1654
 5322              	.LVL569:
2210:src/display.c **** 
 5323              		.loc 1 2210 45 view .LVU1655
2210:src/display.c **** 
 5324              		.loc 1 2210 2 is_stmt 0 view .LVU1656
 5325 01c2 28B1     		cbz	r0, .L524
 5326              	.LVL570:
 5327              	.L590:
2210:src/display.c **** 
 5328              		.loc 1 2210 62 view .LVU1657
 5329 01c4 3020     		movs	r0, #48
 5330              	.L525:
2210:src/display.c **** 
 5331              		.loc 1 2210 68 is_stmt 1 discriminator 3 view .LVU1658
2210:src/display.c **** 
 5332              		.loc 1 2210 57 discriminator 3 view .LVU1659
 5333              	.LVL571:
ARM GAS  /tmp/cchf4YwX.s 			page 184


2210:src/display.c **** 
 5334              		.loc 1 2210 62 is_stmt 0 discriminator 3 view .LVU1660
 5335 01c6 03F8010B 		strb	r0, [r3], #1
 5336              	.LVL572:
2210:src/display.c **** 
 5337              		.loc 1 2210 45 is_stmt 1 discriminator 3 view .LVU1661
2210:src/display.c **** 
 5338              		.loc 1 2210 2 is_stmt 0 discriminator 3 view .LVU1662
 5339 01ca 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5340 01cc 0029     		cmp	r1, #0
 5341 01ce FAD1     		bne	.L525
 5342              	.L524:
2212:src/display.c **** 	switch (mode) {
 5343              		.loc 1 2212 2 is_stmt 1 view .LVU1663
 5344              	.LVL573:
2213:src/display.c **** 	default:
 5345              		.loc 1 2213 2 view .LVU1664
 5346 01d0 022D     		cmp	r5, #2
 5347 01d2 00F06D81 		beq	.L562
 5348 01d6 032D     		cmp	r5, #3
 5349 01d8 00F00F81 		beq	.L527
 5350 01dc 012D     		cmp	r5, #1
 5351 01de 00F0E081 		beq	.L528
2216:src/display.c **** 	  if (count != *display_digits)
 5352              		.loc 1 2216 4 view .LVU1665
 5353              	.LVL574:
2216:src/display.c **** 	  if (count != *display_digits)
 5354              		.loc 1 2216 34 view .LVU1666
2216:src/display.c **** 	  if (count != *display_digits)
 5355              		.loc 1 2216 42 is_stmt 0 view .LVU1667
 5356 01e2 0298     		ldr	r0, [sp, #8]
 5357 01e4 26AB     		add	r3, sp, #152
 5358 01e6 0344     		add	r3, r3, r0
2216:src/display.c **** 	  if (count != *display_digits)
 5359              		.loc 1 2216 4 view .LVU1668
 5360 01e8 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5361 01ec 302B     		cmp	r3, #48
 5362 01ee 40F09983 		bne	.L606
 5363 01f2 411E     		subs	r1, r0, #1
 5364 01f4 4944     		add	r1, r1, r9
 5365              	.LVL575:
 5366              	.L532:
2216:src/display.c **** 	  if (count != *display_digits)
 5367              		.loc 1 2216 66 is_stmt 1 discriminator 3 view .LVU1669
2216:src/display.c **** 	  if (count != *display_digits)
 5368              		.loc 1 2216 58 discriminator 3 view .LVU1670
2216:src/display.c **** 	  if (count != *display_digits)
 5369              		.loc 1 2216 42 is_stmt 0 discriminator 3 view .LVU1671
 5370 01f6 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2216:src/display.c **** 	  if (count != *display_digits)
 5371              		.loc 1 2216 4 discriminator 3 view .LVU1672
 5372 01fa 302D     		cmp	r5, #48
 5373 01fc 0346     		mov	r3, r0
2216:src/display.c **** 	  if (count != *display_digits)
 5374              		.loc 1 2216 63 discriminator 3 view .LVU1673
 5375 01fe 00F1FF30 		add	r0, r0, #-1
 5376              	.LVL576:
ARM GAS  /tmp/cchf4YwX.s 			page 185


2216:src/display.c **** 	  if (count != *display_digits)
 5377              		.loc 1 2216 34 is_stmt 1 discriminator 3 view .LVU1674
2216:src/display.c **** 	  if (count != *display_digits)
 5378              		.loc 1 2216 4 is_stmt 0 discriminator 3 view .LVU1675
 5379 0202 F8D0     		beq	.L532
2217:src/display.c **** 	    count++;
 5380              		.loc 1 2217 4 is_stmt 1 view .LVU1676
2217:src/display.c **** 	    count++;
 5381              		.loc 1 2217 7 is_stmt 0 view .LVU1677
 5382 0204 0299     		ldr	r1, [sp, #8]
 5383 0206 8842     		cmp	r0, r1
 5384 0208 08BF     		it	eq
 5385 020a 0B46     		moveq	r3, r1
 5386              	.LVL577:
 5387              	.L531:
2220:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5388              		.loc 1 2220 4 is_stmt 1 view .LVU1678
2220:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5389              		.loc 1 2220 7 is_stmt 0 view .LVU1679
 5390 020c 0299     		ldr	r1, [sp, #8]
 5391 020e 8E42     		cmp	r6, r1
 5392 0210 80F20581 		bge	.L533
2220:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5393              		.loc 1 2220 47 discriminator 1 view .LVU1680
 5394 0214 591A     		subs	r1, r3, r1
2220:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5395              		.loc 1 2220 31 discriminator 1 view .LVU1681
 5396 0216 B142     		cmp	r1, r6
 5397 0218 00F30181 		bgt	.L533
2245:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5398              		.loc 1 2245 11 is_stmt 1 view .LVU1682
2245:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5399              		.loc 1 2245 14 is_stmt 0 view .LVU1683
 5400 021c 002E     		cmp	r6, #0
 5401 021e C0F2A483 		blt	.L542
 5402 0222 721C     		adds	r2, r6, #1
2247:src/display.c **** 		*obp++ = ',';
 5403              		.loc 1 2247 31 view .LVU1684
 5404 0224 DFF838E1 		ldr	lr, .L713+8
 5405 0228 0592     		str	r2, [sp, #20]
 5406 022a 09EB0200 		add	r0, r9, r2
2212:src/display.c **** 	switch (mode) {
 5407              		.loc 1 2212 4 view .LVU1685
 5408 022e CC46     		mov	ip, r9
2017:src/display.c **** 	int odig = 0;
 5409              		.loc 1 2017 15 view .LVU1686
 5410 0230 5946     		mov	r1, fp
 5411 0232 05E0     		b	.L543
 5412              	.LVL578:
 5413              	.L546:
2248:src/display.c **** 	      *obp++ = *p++;
 5414              		.loc 1 2248 3 is_stmt 1 view .LVU1687
2247:src/display.c **** 		*obp++ = ',';
 5415              		.loc 1 2247 18 is_stmt 0 view .LVU1688
 5416 0234 022D     		cmp	r5, #2
2248:src/display.c **** 	      *obp++ = *p++;
 5417              		.loc 1 2248 10 view .LVU1689
ARM GAS  /tmp/cchf4YwX.s 			page 186


 5418 0236 05BF     		ittet	eq
 5419 0238 2C22     		moveq	r2, #44
 5420 023a 4A70     		strbeq	r2, [r1, #1]
2249:src/display.c **** 	      odig++;
 5421              		.loc 1 2249 12 view .LVU1690
 5422 023c 0131     		addne	r1, r1, #1
 5423              	.LVL579:
2248:src/display.c **** 	      *obp++ = *p++;
 5424              		.loc 1 2248 7 view .LVU1691
 5425 023e 0231     		addeq	r1, r1, #2
 5426              	.LVL580:
 5427              	.L543:
2249:src/display.c **** 	      odig++;
 5428              		.loc 1 2249 8 is_stmt 1 discriminator 2 view .LVU1692
2249:src/display.c **** 	      odig++;
 5429              		.loc 1 2249 15 is_stmt 0 discriminator 2 view .LVU1693
 5430 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5431              	.LVL581:
2247:src/display.c **** 		*obp++ = ',';
 5432              		.loc 1 2247 8 is_stmt 1 discriminator 2 view .LVU1694
2249:src/display.c **** 	      odig++;
 5433              		.loc 1 2249 15 is_stmt 0 discriminator 2 view .LVU1695
 5434 0244 0A70     		strb	r2, [r1]
2250:src/display.c **** 	    }
 5435              		.loc 1 2250 8 is_stmt 1 discriminator 2 view .LVU1696
 5436              	.LVL582:
2246:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5437              		.loc 1 2246 23 discriminator 2 view .LVU1697
2246:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5438              		.loc 1 2246 15 discriminator 2 view .LVU1698
2247:src/display.c **** 		*obp++ = ',';
 5439              		.loc 1 2247 31 is_stmt 0 discriminator 2 view .LVU1699
 5440 0246 A9EB0C02 		sub	r2, r9, ip
 5441 024a 3244     		add	r2, r2, r6
 5442 024c 8EFB0285 		smull	r8, r5, lr, r2
 5443 0250 A5EBE275 		sub	r5, r5, r2, asr #31
 5444 0254 05EB4505 		add	r5, r5, r5, lsl #1
2246:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5445              		.loc 1 2246 6 discriminator 2 view .LVU1700
 5446 0258 6045     		cmp	r0, ip
2247:src/display.c **** 		*obp++ = ',';
 5447              		.loc 1 2247 31 discriminator 2 view .LVU1701
 5448 025a A2EB0505 		sub	r5, r2, r5
2246:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5449              		.loc 1 2246 6 discriminator 2 view .LVU1702
 5450 025e E9D1     		bne	.L546
 5451 0260 059D     		ldr	r5, [sp, #20]
2252:src/display.c **** 	    if (count > (exp + 1)) {
 5452              		.loc 1 2252 6 is_stmt 1 view .LVU1703
2252:src/display.c **** 	    if (count > (exp + 1)) {
 5453              		.loc 1 2252 13 is_stmt 0 view .LVU1704
 5454 0262 2E22     		movs	r2, #46
2253:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5455              		.loc 1 2253 9 view .LVU1705
 5456 0264 AB42     		cmp	r3, r5
2252:src/display.c **** 	    if (count > (exp + 1)) {
 5457              		.loc 1 2252 13 view .LVU1706
ARM GAS  /tmp/cchf4YwX.s 			page 187


 5458 0266 4A70     		strb	r2, [r1, #1]
2252:src/display.c **** 	    if (count > (exp + 1)) {
 5459              		.loc 1 2252 10 view .LVU1707
 5460 0268 01F10208 		add	r8, r1, #2
 5461              	.LVL583:
2253:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5462              		.loc 1 2253 6 is_stmt 1 view .LVU1708
2253:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5463              		.loc 1 2253 9 is_stmt 0 view .LVU1709
 5464 026c 40F34281 		ble	.L540
 5465 0270 9A1B     		subs	r2, r3, r6
 5466 0272 0A44     		add	r2, r2, r1
 5467 0274 0131     		adds	r1, r1, #1
 5468              	.LVL584:
 5469              	.L547:
2255:src/display.c **** 		odig++;
 5470              		.loc 1 2255 3 is_stmt 1 discriminator 3 view .LVU1710
2255:src/display.c **** 		odig++;
 5471              		.loc 1 2255 10 is_stmt 0 discriminator 3 view .LVU1711
 5472 0276 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5473              	.LVL585:
2255:src/display.c **** 		odig++;
 5474              		.loc 1 2255 10 discriminator 3 view .LVU1712
 5475 027a 01F8015F 		strb	r5, [r1, #1]!
2256:src/display.c **** 	      }
 5476              		.loc 1 2256 3 is_stmt 1 discriminator 3 view .LVU1713
2254:src/display.c **** 		*obp++ = *p++;
 5477              		.loc 1 2254 31 discriminator 3 view .LVU1714
2254:src/display.c **** 		*obp++ = *p++;
 5478              		.loc 1 2254 22 discriminator 3 view .LVU1715
2254:src/display.c **** 		*obp++ = *p++;
 5479              		.loc 1 2254 8 is_stmt 0 discriminator 3 view .LVU1716
 5480 027e 9142     		cmp	r1, r2
 5481 0280 F9D1     		bne	.L547
 5482 0282 F243     		mvns	r2, r6
 5483 0284 1A44     		add	r2, r2, r3
 5484 0286 9044     		add	r8, r8, r2
 5485              	.LVL586:
2256:src/display.c **** 	      }
 5486              		.loc 1 2256 7 view .LVU1717
 5487 0288 1D46     		mov	r5, r3
 5488 028a 33E1     		b	.L540
 5489              	.LVL587:
 5490              	.L610:
2256:src/display.c **** 	      }
 5491              		.loc 1 2256 7 view .LVU1718
 5492 028c D846     		mov	r8, fp
 5493              	.LVL588:
 5494              	.L569:
2348:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5495              		.loc 1 2348 2 is_stmt 1 view .LVU1719
2348:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5496              		.loc 1 2348 5 is_stmt 0 view .LVU1720
 5497 028e 029B     		ldr	r3, [sp, #8]
 5498 0290 0A2B     		cmp	r3, #10
 5499 0292 02DD     		ble	.L572
2348:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
ARM GAS  /tmp/cchf4YwX.s 			page 188


 5500              		.loc 1 2348 50 discriminator 1 view .LVU1721
 5501 0294 002C     		cmp	r4, #0
 5502 0296 00F0FB81 		beq	.L701
 5503              	.L572:
2354:src/display.c **** 	if (odig > *display_digits)
 5504              		.loc 1 2354 2 is_stmt 1 view .LVU1722
 5505 029a 029B     		ldr	r3, [sp, #8]
 5506 029c 9D42     		cmp	r5, r3
 5507 029e A8BF     		it	ge
 5508 02a0 1D46     		movge	r5, r3
 5509              	.LVL589:
2357:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5510              		.loc 1 2357 23 is_stmt 0 view .LVU1723
 5511 02a2 5F1B     		subs	r7, r3, r5
 5512              	.LVL590:
2357:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5513              		.loc 1 2357 4 view .LVU1724
 5514 02a4 07EBC707 		add	r7, r7, r7, lsl #3
2354:src/display.c **** 	if (odig > *display_digits)
 5515              		.loc 1 2354 7 view .LVU1725
 5516 02a8 0023     		movs	r3, #0
2358:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5517              		.loc 1 2358 5 view .LVU1726
 5518 02aa 9F42     		cmp	r7, r3
2354:src/display.c **** 	if (odig > *display_digits)
 5519              		.loc 1 2354 7 view .LVU1727
 5520 02ac 88F80030 		strb	r3, [r8]
2355:src/display.c **** 	  odig = *display_digits;
 5521              		.loc 1 2355 2 is_stmt 1 view .LVU1728
 5522              	.LVL591:
2357:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5523              		.loc 1 2357 2 view .LVU1729
2358:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5524              		.loc 1 2358 2 view .LVU1730
2358:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5525              		.loc 1 2358 5 is_stmt 0 view .LVU1731
 5526 02b0 03DD     		ble	.L573
2358:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5527              		.loc 1 2358 35 discriminator 1 view .LVU1732
 5528 02b2 16F57A7F 		cmn	r6, #1000
2359:src/display.c **** 	if (negative) {
 5529              		.loc 1 2359 4 is_stmt 1 discriminator 1 view .LVU1733
2359:src/display.c **** 	if (negative) {
 5530              		.loc 1 2359 6 is_stmt 0 discriminator 1 view .LVU1734
 5531 02b6 D8BF     		it	le
 5532 02b8 093F     		suble	r7, r7, #9
 5533              	.LVL592:
 5534              	.L573:
2360:src/display.c **** 	  if (res) *res++ = '-';
 5535              		.loc 1 2360 2 is_stmt 1 view .LVU1735
2360:src/display.c **** 	  if (res) *res++ = '-';
 5536              		.loc 1 2360 5 is_stmt 0 view .LVU1736
 5537 02ba 039B     		ldr	r3, [sp, #12]
 5538 02bc 2BB1     		cbz	r3, .L574
2361:src/display.c **** 	  else {
 5539              		.loc 1 2361 4 is_stmt 1 view .LVU1737
2361:src/display.c **** 	  else {
ARM GAS  /tmp/cchf4YwX.s 			page 189


 5540              		.loc 1 2361 7 is_stmt 0 view .LVU1738
 5541 02be 002C     		cmp	r4, #0
 5542 02c0 00F0FE81 		beq	.L575
2361:src/display.c **** 	  else {
 5543              		.loc 1 2361 13 is_stmt 1 discriminator 1 view .LVU1739
 5544              	.LVL593:
2361:src/display.c **** 	  else {
 5545              		.loc 1 2361 20 is_stmt 0 discriminator 1 view .LVU1740
 5546 02c4 2D23     		movs	r3, #45
 5547 02c6 04F8013B 		strb	r3, [r4], #1
 5548              	.LVL594:
 5549              	.L574:
2369:src/display.c **** 	  if (c == '.') {
 5550              		.loc 1 2369 12 is_stmt 1 discriminator 1 view .LVU1741
2369:src/display.c **** 	  if (c == '.') {
 5551              		.loc 1 2369 18 is_stmt 0 discriminator 1 view .LVU1742
 5552 02ca 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5553              	.LVL595:
2369:src/display.c **** 	  if (c == '.') {
 5554              		.loc 1 2369 2 discriminator 1 view .LVU1743
 5555 02ce A2B1     		cbz	r2, .L576
2369:src/display.c **** 	  if (c == '.') {
 5556              		.loc 1 2369 31 view .LVU1744
 5557 02d0 6B2F     		cmp	r7, #107
 5558 02d2 12DC     		bgt	.L576
 5559              	.LVL596:
 5560              	.L577:
2371:src/display.c **** 	  } else if (c == ',') {
 5561              		.loc 1 2371 12 view .LVU1745
 5562 02d4 DFF88C90 		ldr	r9, .L713+12
 5563              	.LVL597:
 5564              	.L586:
2370:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5565              		.loc 1 2370 4 is_stmt 1 view .LVU1746
2370:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5566              		.loc 1 2370 7 is_stmt 0 view .LVU1747
 5567 02d8 2E2A     		cmp	r2, #46
 5568 02da 00F02081 		beq	.L702
2372:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5569              		.loc 1 2372 11 is_stmt 1 view .LVU1748
2372:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5570              		.loc 1 2372 14 is_stmt 0 view .LVU1749
 5571 02de 2C2A     		cmp	r2, #44
 5572 02e0 00F04681 		beq	.L703
2375:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5573              		.loc 1 2375 6 is_stmt 1 view .LVU1750
 5574              	.LVL598:
 5575              	.LBB442:
 5576              	.LBI442:
 413:src/display.c ****   if (res) *res++ = ch;
 5577              		.loc 1 413 14 view .LVU1751
 5578              	.LBB443:
 414:src/display.c ****   else	set_dig(base, ch);
 5579              		.loc 1 414 3 view .LVU1752
 414:src/display.c ****   else	set_dig(base, ch);
 5580              		.loc 1 414 6 is_stmt 0 view .LVU1753
 5581 02e4 002C     		cmp	r4, #0
ARM GAS  /tmp/cchf4YwX.s 			page 190


 5582 02e6 00F05281 		beq	.L584
 414:src/display.c ****   else	set_dig(base, ch);
 5583              		.loc 1 414 12 is_stmt 1 view .LVU1754
 5584              	.LVL599:
 414:src/display.c ****   else	set_dig(base, ch);
 5585              		.loc 1 414 19 is_stmt 0 view .LVU1755
 5586 02ea 04F8012B 		strb	r2, [r4], #1
 5587              	.LVL600:
 5588              	.L585:
 416:src/display.c **** }
 5589              		.loc 1 416 3 is_stmt 1 view .LVU1756
 416:src/display.c **** }
 5590              		.loc 1 416 3 is_stmt 0 view .LVU1757
 5591              	.LBE443:
 5592              	.LBE442:
2376:src/display.c **** 	  }
 5593              		.loc 1 2376 6 is_stmt 1 view .LVU1758
2369:src/display.c **** 	  if (c == '.') {
 5594              		.loc 1 2369 18 is_stmt 0 view .LVU1759
 5595 02ee 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 5596              	.LVL601:
2376:src/display.c **** 	  }
 5597              		.loc 1 2376 8 view .LVU1760
 5598 02f2 0937     		adds	r7, r7, #9
 5599              	.LVL602:
2369:src/display.c **** 	  if (c == '.') {
 5600              		.loc 1 2369 53 is_stmt 1 view .LVU1761
2369:src/display.c **** 	  if (c == '.') {
 5601              		.loc 1 2369 12 view .LVU1762
2369:src/display.c **** 	  if (c == '.') {
 5602              		.loc 1 2369 2 is_stmt 0 view .LVU1763
 5603 02f4 0AB1     		cbz	r2, .L576
2369:src/display.c **** 	  if (c == '.') {
 5604              		.loc 1 2369 31 discriminator 3 view .LVU1764
 5605 02f6 6B2F     		cmp	r7, #107
 5606 02f8 EEDD     		ble	.L586
 5607              	.LVL603:
 5608              	.L576:
2389:src/display.c **** 	  set_exp(exp, 0, res);
 5609              		.loc 1 2389 2 is_stmt 1 view .LVU1765
2389:src/display.c **** 	  set_exp(exp, 0, res);
 5610              		.loc 1 2389 5 is_stmt 0 view .LVU1766
 5611 02fa BAF1000F 		cmp	r10, #0
 5612 02fe 40F01F81 		bne	.L704
 5613              	.L587:
2392:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5614              		.loc 1 2392 2 is_stmt 1 view .LVU1767
2392:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5615              		.loc 1 2392 5 is_stmt 0 view .LVU1768
 5616 0302 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5617 0306 2E2B     		cmp	r3, #46
 5618 0308 00F02481 		beq	.L705
 5619              	.LVL604:
 5620              	.L588:
2394:src/display.c ****       }
 5621              		.loc 1 2394 2 is_stmt 1 view .LVU1769
2394:src/display.c ****       }
ARM GAS  /tmp/cchf4YwX.s 			page 191


 5622              		.loc 1 2394 18 is_stmt 0 view .LVU1770
 5623 030c 019B     		ldr	r3, [sp, #4]
 5624 030e 1D60     		str	r5, [r3]
 5625              	.LVL605:
 5626              	.L464:
2395:src/display.c **** 
 5627              		.loc 1 2395 7 view .LVU1771
 5628 0310 27B0     		add	sp, sp, #156
 5629              		.cfi_remember_state
 5630              		.cfi_def_cfa_offset 36
 5631              		@ sp needed
 5632 0312 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5633              	.LVL606:
 5634              	.L472:
 5635              		.cfi_restore_state
2094:src/display.c **** 
 5636              		.loc 1 2094 4 is_stmt 1 view .LVU1772
 5637 0316 5946     		mov	r1, fp
 5638 0318 3846     		mov	r0, r7
 5639 031a FFF7FEFF 		bl	decNumberToString
 5640              	.LVL607:
 5641 031e A2E6     		b	.L474
 5642              	.LVL608:
 5643              	.L465:
2052:src/display.c **** 	    if (State2.hms) {
 5644              		.loc 1 2052 4 view .LVU1773
2052:src/display.c **** 	    if (State2.hms) {
 5645              		.loc 1 2052 25 is_stmt 0 view .LVU1774
 5646 0320 0D4B     		ldr	r3, .L713
 5647 0322 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
2052:src/display.c **** 	    if (State2.hms) {
 5648              		.loc 1 2052 22 view .LVU1775
 5649 0324 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
2052:src/display.c **** 	    if (State2.hms) {
 5650              		.loc 1 2052 25 view .LVU1776
 5651 0326 01F00201 		and	r1, r1, #2
2052:src/display.c **** 	    if (State2.hms) {
 5652              		.loc 1 2052 22 view .LVU1777
 5653 032a 1143     		orrs	r1, r1, r2
 5654 032c 7FF477AE 		bne	.L468
2053:src/display.c **** 	      set_x_hms(z, res);
 5655              		.loc 1 2053 6 is_stmt 1 view .LVU1778
2053:src/display.c **** 	      set_x_hms(z, res);
 5656              		.loc 1 2053 10 is_stmt 0 view .LVU1779
 5657 0330 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
2053:src/display.c **** 	      set_x_hms(z, res);
 5658              		.loc 1 2053 9 view .LVU1780
 5659 0332 DE07     		lsls	r6, r3, #31
 5660 0334 00F1F282 		bmi	.L706
2057:src/display.c **** 	      if (set_x_fract(z, res))
 5661              		.loc 1 2057 11 is_stmt 1 view .LVU1781
2057:src/display.c **** 	      if (set_x_fract(z, res))
 5662              		.loc 1 2057 15 is_stmt 0 view .LVU1782
 5663 0338 084B     		ldr	r3, .L713+4
 5664 033a 1B68     		ldr	r3, [r3]
 5665 033c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
2057:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/cchf4YwX.s 			page 192


 5666              		.loc 1 2057 14 view .LVU1783
 5667 0340 9806     		lsls	r0, r3, #26
 5668 0342 7FF56CAE 		bpl	.L468
2058:src/display.c **** 		return;
 5669              		.loc 1 2058 8 is_stmt 1 view .LVU1784
2058:src/display.c **** 		return;
 5670              		.loc 1 2058 12 is_stmt 0 view .LVU1785
 5671 0346 2146     		mov	r1, r4
 5672 0348 3846     		mov	r0, r7
 5673 034a FFF7FEFF 		bl	set_x_fract
 5674              	.LVL609:
2058:src/display.c **** 		return;
 5675              		.loc 1 2058 11 view .LVU1786
 5676 034e 0028     		cmp	r0, #0
 5677 0350 3FF465AE 		beq	.L468
 5678 0354 DCE7     		b	.L464
 5679              	.L714:
 5680 0356 00BF     		.align	2
 5681              	.L713:
 5682 0358 00000000 		.word	StateWhileOn
 5683 035c 00000000 		.word	main_ram
 5684 0360 56555555 		.word	1431655766
 5685 0364 00000000 		.word	.LANCHOR1
 5686              	.LVL610:
 5687              	.L693:
2102:src/display.c **** 	  //  ALL mode: fill the display
 5688              		.loc 1 2102 38 discriminator 1 view .LVU1787
 5689 0368 019B     		ldr	r3, [sp, #4]
 5690 036a 1A68     		ldr	r2, [r3]
2102:src/display.c **** 	  //  ALL mode: fill the display
 5691              		.loc 1 2102 35 discriminator 1 view .LVU1788
 5692 036c 089B     		ldr	r3, [sp, #32]
2102:src/display.c **** 	  //  ALL mode: fill the display
 5693              		.loc 1 2102 23 discriminator 1 view .LVU1789
 5694 036e 9A42     		cmp	r2, r3
 5695 0370 11DD     		ble	.L487
2106:src/display.c **** 
 5696              		.loc 1 2106 4 is_stmt 1 view .LVU1790
2108:src/display.c **** 	  int orig_mode = mode;
 5697              		.loc 1 2108 23 is_stmt 0 view .LVU1791
 5698 0372 042D     		cmp	r5, #4
2106:src/display.c **** 
 5699              		.loc 1 2106 7 view .LVU1792
 5700 0374 0793     		str	r3, [sp, #28]
2108:src/display.c **** 	  int orig_mode = mode;
 5701              		.loc 1 2108 2 is_stmt 1 view .LVU1793
2108:src/display.c **** 	  int orig_mode = mode;
 5702              		.loc 1 2108 23 is_stmt 0 view .LVU1794
 5703 0376 12D0     		beq	.L488
 5704              	.L707:
2108:src/display.c **** 	  int orig_mode = mode;
 5705              		.loc 1 2108 43 discriminator 2 view .LVU1795
 5706 0378 052D     		cmp	r5, #5
 5707 037a 00F09881 		beq	.L489
2038:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5708              		.loc 1 2038 6 view .LVU1796
 5709 037e 0023     		movs	r3, #0
ARM GAS  /tmp/cchf4YwX.s 			page 193


 5710 0380 0493     		str	r3, [sp, #16]
 5711 0382 89E6     		b	.L593
 5712              	.LVL611:
 5713              	.L694:
2133:src/display.c **** 	if (q == NULL) exp = 0;
 5714              		.loc 1 2133 17 is_stmt 1 discriminator 1 view .LVU1797
2133:src/display.c **** 	if (q == NULL) exp = 0;
 5715              		.loc 1 2133 21 is_stmt 0 discriminator 1 view .LVU1798
 5716 0384 4421     		movs	r1, #68
 5717 0386 5846     		mov	r0, fp
 5718              	.LVL612:
2133:src/display.c **** 	if (q == NULL) exp = 0;
 5719              		.loc 1 2133 21 discriminator 1 view .LVU1799
 5720 0388 FFF7FEFF 		bl	find_char
 5721              	.LVL613:
2134:src/display.c **** 	else {
 5722              		.loc 1 2134 2 is_stmt 1 discriminator 1 view .LVU1800
2134:src/display.c **** 	else {
 5723              		.loc 1 2134 5 is_stmt 0 discriminator 1 view .LVU1801
 5724 038c 0646     		mov	r6, r0
 5725 038e 0028     		cmp	r0, #0
 5726 0390 3FF49CAE 		beq	.L491
 5727 0394 92E6     		b	.L490
 5728              	.LVL614:
 5729              	.L487:
2104:src/display.c **** 	else
 5730              		.loc 1 2104 4 is_stmt 1 view .LVU1802
2104:src/display.c **** 	else
 5731              		.loc 1 2104 25 is_stmt 0 view .LVU1803
 5732 0396 013A     		subs	r2, r2, #1
2108:src/display.c **** 	  int orig_mode = mode;
 5733              		.loc 1 2108 23 view .LVU1804
 5734 0398 042D     		cmp	r5, #4
2104:src/display.c **** 	else
 5735              		.loc 1 2104 7 view .LVU1805
 5736 039a 0792     		str	r2, [sp, #28]
2108:src/display.c **** 	  int orig_mode = mode;
 5737              		.loc 1 2108 2 is_stmt 1 view .LVU1806
2108:src/display.c **** 	  int orig_mode = mode;
 5738              		.loc 1 2108 23 is_stmt 0 view .LVU1807
 5739 039c ECD1     		bne	.L707
 5740              	.L488:
 5741              	.LBB445:
2109:src/display.c **** 
 5742              		.loc 1 2109 4 is_stmt 1 view .LVU1808
 5743              	.LVL615:
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5744              		.loc 1 2111 4 view .LVU1809
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5745              		.loc 1 2111 11 is_stmt 0 view .LVU1810
 5746 039e 2A46     		mov	r2, r5
 5747 03a0 07A9     		add	r1, sp, #28
 5748 03a2 3846     		mov	r0, r7
 5749 03a4 FFF7FEFF 		bl	std_round_fix
 5750              	.LVL616:
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5751              		.loc 1 2114 16 view .LVU1811
ARM GAS  /tmp/cchf4YwX.s 			page 194


 5752 03a8 0123     		movs	r3, #1
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5753              		.loc 1 2111 11 view .LVU1812
 5754 03aa 0546     		mov	r5, r0
 5755              	.LVL617:
2112:src/display.c **** 	    // allow zeros to be trimmed
 5756              		.loc 1 2112 4 is_stmt 1 view .LVU1813
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5757              		.loc 1 2114 6 view .LVU1814
2115:src/display.c **** 	    dd = *display_digits - 1;
 5758              		.loc 1 2115 4 view .LVU1815
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5759              		.loc 1 2114 16 is_stmt 0 view .LVU1816
 5760 03ac 0493     		str	r3, [sp, #16]
 5761 03ae 73E6     		b	.L593
 5762              	.LVL618:
 5763              	.L700:
2114:src/display.c **** 	  if (orig_mode == MODE_STD)
 5764              		.loc 1 2114 16 view .LVU1817
 5765              	.LBE445:
2194:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5766              		.loc 1 2194 7 view .LVU1818
 5767 03b0 4846     		mov	r0, r9
 5768              	.LVL619:
2195:src/display.c **** 	    mantissa[0] = '1';
 5769              		.loc 1 2195 41 view .LVU1819
 5770 03b2 4FF03008 		mov	r8, #48
 5771              	.L519:
 5772              	.LVL620:
2195:src/display.c **** 	    mantissa[0] = '1';
 5773              		.loc 1 2195 47 is_stmt 1 discriminator 3 view .LVU1820
2195:src/display.c **** 	    mantissa[0] = '1';
 5774              		.loc 1 2195 36 discriminator 3 view .LVU1821
2195:src/display.c **** 	    mantissa[0] = '1';
 5775              		.loc 1 2195 41 is_stmt 0 discriminator 3 view .LVU1822
 5776 03b6 00F8018B 		strb	r8, [r0], #1
 5777              	.LVL621:
2195:src/display.c **** 	    mantissa[0] = '1';
 5778              		.loc 1 2195 25 is_stmt 1 discriminator 3 view .LVU1823
2195:src/display.c **** 	    mantissa[0] = '1';
 5779              		.loc 1 2195 6 is_stmt 0 discriminator 3 view .LVU1824
 5780 03ba 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5781 03be BCF1390F 		cmp	ip, #57
 5782 03c2 F8D0     		beq	.L519
 5783              	.LVL622:
 5784              	.L592:
2196:src/display.c **** 	    exp++;
 5785              		.loc 1 2196 6 is_stmt 1 view .LVU1825
2196:src/display.c **** 	    exp++;
 5786              		.loc 1 2196 18 is_stmt 0 view .LVU1826
 5787 03c4 3120     		movs	r0, #49
2198:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5788              		.loc 1 2198 9 view .LVU1827
 5789 03c6 012D     		cmp	r5, #1
2197:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5790              		.loc 1 2197 9 view .LVU1828
 5791 03c8 06F10106 		add	r6, r6, #1
ARM GAS  /tmp/cchf4YwX.s 			page 195


 5792              	.LVL623:
2196:src/display.c **** 	    exp++;
 5793              		.loc 1 2196 18 view .LVU1829
 5794 03cc 8DF85800 		strb	r0, [sp, #88]
2197:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5795              		.loc 1 2197 6 is_stmt 1 view .LVU1830
 5796              	.LVL624:
2198:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5797              		.loc 1 2198 6 view .LVU1831
2198:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5798              		.loc 1 2198 9 is_stmt 0 view .LVU1832
 5799 03d0 7FF4F5AE 		bne	.L688
2198:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5800              		.loc 1 2198 27 discriminator 1 view .LVU1833
 5801 03d4 0298     		ldr	r0, [sp, #8]
 5802 03d6 8642     		cmp	r6, r0
 5803 03d8 C0F2DE80 		blt	.L521
2199:src/display.c **** 	      extra_digits = 0;
 5804              		.loc 1 2199 8 is_stmt 1 view .LVU1834
2199:src/display.c **** 	      extra_digits = 0;
 5805              		.loc 1 2199 28 is_stmt 0 view .LVU1835
 5806 03dc C04B     		ldr	r3, .L715
 5807              	.LVL625:
2199:src/display.c **** 	      extra_digits = 0;
 5808              		.loc 1 2199 28 view .LVU1836
 5809 03de 1B68     		ldr	r3, [r3]
 5810 03e0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2199:src/display.c **** 	      extra_digits = 0;
 5811              		.loc 1 2199 37 view .LVU1837
 5812 03e4 D906     		lsls	r1, r3, #27
 5813              	.LVL626:
2199:src/display.c **** 	      extra_digits = 0;
 5814              		.loc 1 2199 37 view .LVU1838
 5815 03e6 40F1E582 		bpl	.L708
 5816              	.LVL627:
2210:src/display.c **** 
 5817              		.loc 1 2210 2 is_stmt 1 view .LVU1839
 5818 03ea 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2210:src/display.c **** 
 5819              		.loc 1 2210 9 is_stmt 0 view .LVU1840
 5820 03ee 09EB0E03 		add	r3, r9, lr
 5821              	.LVL628:
2210:src/display.c **** 
 5822              		.loc 1 2210 45 is_stmt 1 view .LVU1841
2199:src/display.c **** 	      extra_digits = 0;
 5823              		.loc 1 2199 37 is_stmt 0 view .LVU1842
 5824 03f2 0325     		movs	r5, #3
2210:src/display.c **** 
 5825              		.loc 1 2210 2 view .LVU1843
 5826 03f4 0029     		cmp	r1, #0
 5827 03f6 7FF4E5AE 		bne	.L590
 5828              	.LVL629:
 5829              	.L527:
2312:src/display.c **** 	  case -1:
 5830              		.loc 1 2312 4 is_stmt 1 view .LVU1844
2312:src/display.c **** 	  case -1:
 5831              		.loc 1 2312 16 is_stmt 0 view .LVU1845
ARM GAS  /tmp/cchf4YwX.s 			page 196


 5832 03fa BA4B     		ldr	r3, .L715+4
 5833 03fc 83FB0613 		smull	r1, r3, r3, r6
 5834 0400 A3EBE673 		sub	r3, r3, r6, asr #31
 5835 0404 03EB4303 		add	r3, r3, r3, lsl #1
 5836 0408 F31A     		subs	r3, r6, r3
 5837 040a 0233     		adds	r3, r3, #2
 5838 040c 042B     		cmp	r3, #4
 5839 040e 4FD8     		bhi	.L562
 5840 0410 DFE813F0 		tbh	[pc, r3, lsl #1]
 5841              	.L564:
 5842 0414 2C02     		.2byte	(.L565-.L564)/2
 5843 0416 1A02     		.2byte	(.L563-.L564)/2
 5844 0418 4E00     		.2byte	(.L562-.L564)/2
 5845 041a 2C02     		.2byte	(.L565-.L564)/2
 5846 041c 1A02     		.2byte	(.L563-.L564)/2
 5847              	.LVL630:
 5848              		.p2align 1
 5849              	.L533:
2221:src/display.c **** 	    case -1:
 5850              		.loc 1 2221 6 is_stmt 1 view .LVU1846
2221:src/display.c **** 	    case -1:
 5851              		.loc 1 2221 32 is_stmt 0 view .LVU1847
 5852 041e B048     		ldr	r0, .L715
2221:src/display.c **** 	    case -1:
 5853              		.loc 1 2221 19 view .LVU1848
 5854 0420 B049     		ldr	r1, .L715+4
2221:src/display.c **** 	    case -1:
 5855              		.loc 1 2221 32 view .LVU1849
 5856 0422 0068     		ldr	r0, [r0]
2221:src/display.c **** 	    case -1:
 5857              		.loc 1 2221 19 view .LVU1850
 5858 0424 81FB0651 		smull	r5, r1, r1, r6
2221:src/display.c **** 	    case -1:
 5859              		.loc 1 2221 32 view .LVU1851
 5860 0428 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2221:src/display.c **** 	    case -1:
 5861              		.loc 1 2221 19 view .LVU1852
 5862 042c A1EBE671 		sub	r1, r1, r6, asr #31
 5863 0430 01EB4101 		add	r1, r1, r1, lsl #1
 5864 0434 711A     		subs	r1, r6, r1
2221:src/display.c **** 	    case -1:
 5865              		.loc 1 2221 32 view .LVU1853
 5866 0436 C0F30010 		ubfx	r0, r0, #4, #1
2221:src/display.c **** 	    case -1:
 5867              		.loc 1 2221 24 view .LVU1854
 5868 043a 01FB00F1 		mul	r1, r1, r0
 5869 043e 0231     		adds	r1, r1, #2
 5870 0440 0429     		cmp	r1, #4
 5871 0442 00F27182 		bhi	.L607
 5872 0446 DFE811F0 		tbh	[pc, r1, lsl #1]
 5873              	.L537:
 5874 044a 4B02     		.2byte	(.L538-.L537)/2
 5875 044c 2002     		.2byte	(.L536-.L537)/2
 5876 044e 6F02     		.2byte	(.L607-.L537)/2
 5877 0450 4B02     		.2byte	(.L538-.L537)/2
 5878 0452 2002     		.2byte	(.L536-.L537)/2
 5879              	.LVL631:
ARM GAS  /tmp/cchf4YwX.s 			page 197


 5880              		.p2align 1
 5881              	.L507:
2177:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5882              		.loc 1 2177 4 is_stmt 1 view .LVU1855
2177:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5883              		.loc 1 2177 7 is_stmt 0 view .LVU1856
 5884 0454 B342     		cmp	r3, r6
 5885 0456 03DD     		ble	.L510
2177:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5886              		.loc 1 2177 45 discriminator 1 view .LVU1857
 5887 0458 5342     		rsbs	r3, r2, #0
2177:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5888              		.loc 1 2177 36 discriminator 1 view .LVU1858
 5889 045a B342     		cmp	r3, r6
 5890 045c 40F30A82 		ble	.L511
 5891              	.L510:
2178:src/display.c **** 	  else {
 5892              		.loc 1 2178 6 is_stmt 1 view .LVU1859
2178:src/display.c **** 	  else {
 5893              		.loc 1 2178 26 is_stmt 0 view .LVU1860
 5894 0460 9F4B     		ldr	r3, .L715
 5895 0462 1B68     		ldr	r3, [r3]
 5896 0464 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2178:src/display.c **** 	  else {
 5897              		.loc 1 2178 35 view .LVU1861
 5898 0468 13F0100F 		tst	r3, #16
 5899 046c 14BF     		ite	ne
 5900 046e 0325     		movne	r5, #3
 5901              	.LVL632:
2178:src/display.c **** 	  else {
 5902              		.loc 1 2178 35 view .LVU1862
 5903 0470 0225     		moveq	r5, #2
 5904 0472 75E6     		b	.L689
 5905              	.LVL633:
 5906              	.L698:
2178:src/display.c **** 	  else {
 5907              		.loc 1 2178 35 view .LVU1863
 5908 0474 013E     		subs	r6, r6, #1
 5909 0476 08EB0602 		add	r2, r8, r6
 5910              	.L500:
2157:src/display.c **** 	    exp--;
 5911              		.loc 1 2157 4 is_stmt 1 discriminator 1 view .LVU1864
2158:src/display.c **** 	  while (*++q == '0');
 5912              		.loc 1 2158 6 discriminator 1 view .LVU1865
 5913 047a A2EB0806 		sub	r6, r2, r8
 5914              	.LVL634:
2159:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5915              		.loc 1 2159 10 discriminator 1 view .LVU1866
2159:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5916              		.loc 1 2159 11 is_stmt 0 discriminator 1 view .LVU1867
 5917 047e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5918              	.LVL635:
2159:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5919              		.loc 1 2159 4 discriminator 1 view .LVU1868
 5920 0482 302B     		cmp	r3, #48
 5921 0484 F9D0     		beq	.L500
2160:src/display.c **** 	    *p++ = *q++;
ARM GAS  /tmp/cchf4YwX.s 			page 198


 5922              		.loc 1 2160 10 is_stmt 1 view .LVU1869
 5923 0486 A3F13002 		sub	r2, r3, #48
 5924 048a 092A     		cmp	r2, #9
 5925 048c 3FF661AE 		bhi	.L501
2023:src/display.c **** 	char *r;
 5926              		.loc 1 2023 8 is_stmt 0 view .LVU1870
 5927 0490 4A46     		mov	r2, r9
 5928              	.LVL636:
 5929              	.L502:
2161:src/display.c **** 	} else {
 5930              		.loc 1 2161 6 is_stmt 1 view .LVU1871
2161:src/display.c **** 	} else {
 5931              		.loc 1 2161 11 is_stmt 0 view .LVU1872
 5932 0492 02F8013B 		strb	r3, [r2], #1
 5933              	.LVL637:
2160:src/display.c **** 	    *p++ = *q++;
 5934              		.loc 1 2160 10 is_stmt 1 view .LVU1873
2160:src/display.c **** 	    *p++ = *q++;
 5935              		.loc 1 2160 11 is_stmt 0 view .LVU1874
 5936 0496 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2160:src/display.c **** 	    *p++ = *q++;
 5937              		.loc 1 2160 10 view .LVU1875
 5938 049a A3F13001 		sub	r1, r3, #48
 5939 049e 0929     		cmp	r1, #9
 5940 04a0 F7D9     		bls	.L502
 5941 04a2 56E6     		b	.L501
 5942              	.LVL638:
 5943              	.L696:
2151:src/display.c **** 	  q++;
 5944              		.loc 1 2151 4 is_stmt 1 view .LVU1876
2152:src/display.c **** 	} else if (*q == '+')
 5945              		.loc 1 2152 4 view .LVU1877
2151:src/display.c **** 	  q++;
 5946              		.loc 1 2151 13 is_stmt 0 view .LVU1878
 5947 04a4 0122     		movs	r2, #1
 5948 04a6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5949 04aa 0392     		str	r2, [sp, #12]
2152:src/display.c **** 	} else if (*q == '+')
 5950              		.loc 1 2152 5 view .LVU1879
 5951 04ac 9044     		add	r8, r8, r2
 5952              	.LVL639:
2152:src/display.c **** 	} else if (*q == '+')
 5953              		.loc 1 2152 5 view .LVU1880
 5954 04ae 23E6     		b	.L496
 5955              	.LVL640:
 5956              	.L562:
2152:src/display.c **** 	} else if (*q == '+')
 5957              		.loc 1 2152 5 view .LVU1881
 5958 04b0 079A     		ldr	r2, [sp, #28]
2312:src/display.c **** 	  case -1:
 5959              		.loc 1 2312 16 view .LVU1882
 5960 04b2 0125     		movs	r5, #1
2017:src/display.c **** 	int odig = 0;
 5961              		.loc 1 2017 15 view .LVU1883
 5962 04b4 5946     		mov	r1, fp
 5963              	.LVL641:
 5964              	.L530:
ARM GAS  /tmp/cchf4YwX.s 			page 199


2326:src/display.c **** 	  };
 5965              		.loc 1 2326 6 is_stmt 1 view .LVU1884
2327:src/display.c **** 	  // Falling through
 5966              		.loc 1 2327 5 view .LVU1885
2331:src/display.c **** 	  odig++;
 5967              		.loc 1 2331 4 view .LVU1886
2331:src/display.c **** 	  odig++;
 5968              		.loc 1 2331 15 is_stmt 0 view .LVU1887
 5969 04b6 4B46     		mov	r3, r9
 5970              	.LVL642:
2331:src/display.c **** 	  odig++;
 5971              		.loc 1 2331 11 view .LVU1888
 5972 04b8 8846     		mov	r8, r1
 5973 04ba 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5974              	.LVL643:
2331:src/display.c **** 	  odig++;
 5975              		.loc 1 2331 11 view .LVU1889
 5976 04be 08F8020B 		strb	r0, [r8], #2
2332:src/display.c **** 	  *obp++ = '.';
 5977              		.loc 1 2332 4 is_stmt 1 view .LVU1890
2333:src/display.c **** 	  dd--;
 5978              		.loc 1 2333 4 view .LVU1891
 5979              	.LVL644:
2333:src/display.c **** 	  dd--;
 5980              		.loc 1 2333 11 is_stmt 0 view .LVU1892
 5981 04c2 4FF02E0C 		mov	ip, #46
2335:src/display.c **** 	    *obp++ = *p++;
 5982              		.loc 1 2335 13 view .LVU1893
 5983 04c6 901E     		subs	r0, r2, #2
2335:src/display.c **** 	    *obp++ = *p++;
 5984              		.loc 1 2335 10 view .LVU1894
 5985 04c8 002A     		cmp	r2, #0
2333:src/display.c **** 	  dd--;
 5986              		.loc 1 2333 11 view .LVU1895
 5987 04ca 81F801C0 		strb	ip, [r1, #1]
2334:src/display.c **** 	  while (dd-- >= 0) {
 5988              		.loc 1 2334 4 is_stmt 1 view .LVU1896
2335:src/display.c **** 	    *obp++ = *p++;
 5989              		.loc 1 2335 4 view .LVU1897
2335:src/display.c **** 	    *obp++ = *p++;
 5990              		.loc 1 2335 10 view .LVU1898
2335:src/display.c **** 	    *obp++ = *p++;
 5991              		.loc 1 2335 13 is_stmt 0 view .LVU1899
 5992 04ce 0790     		str	r0, [sp, #28]
2335:src/display.c **** 	    *obp++ = *p++;
 5993              		.loc 1 2335 10 view .LVU1900
 5994 04d0 40F32D82 		ble	.L608
2335:src/display.c **** 	    *obp++ = *p++;
 5995              		.loc 1 2335 10 view .LVU1901
 5996 04d4 501C     		adds	r0, r2, #1
 5997 04d6 0131     		adds	r1, r1, #1
 5998 04d8 8144     		add	r9, r9, r0
 5999              	.LVL645:
 6000              	.L568:
2336:src/display.c **** 	    odig++;
 6001              		.loc 1 2336 6 is_stmt 1 view .LVU1902
2336:src/display.c **** 	    odig++;
ARM GAS  /tmp/cchf4YwX.s 			page 200


 6002              		.loc 1 2336 13 is_stmt 0 view .LVU1903
 6003 04da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 6004              	.LVL646:
2336:src/display.c **** 	    odig++;
 6005              		.loc 1 2336 13 view .LVU1904
 6006 04de 01F8010F 		strb	r0, [r1, #1]!
2337:src/display.c **** 	  }
 6007              		.loc 1 2337 6 is_stmt 1 view .LVU1905
2335:src/display.c **** 	    *obp++ = *p++;
 6008              		.loc 1 2335 10 view .LVU1906
 6009 04e2 4B45     		cmp	r3, r9
 6010 04e4 F9D1     		bne	.L568
 6011 04e6 6FF00103 		mvn	r3, #1
 6012              	.LVL647:
2335:src/display.c **** 	    *obp++ = *p++;
 6013              		.loc 1 2335 10 is_stmt 0 view .LVU1907
 6014 04ea 9044     		add	r8, r8, r2
 6015 04ec 1544     		add	r5, r5, r2
 6016 04ee 0793     		str	r3, [sp, #28]
2339:src/display.c **** 	}
 6017              		.loc 1 2339 13 view .LVU1908
 6018 04f0 4FF0010A 		mov	r10, #1
 6019              	.L540:
 6020              	.LVL648:
2342:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 6021              		.loc 1 2342 2 is_stmt 1 view .LVU1909
2342:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 6022              		.loc 1 2342 5 is_stmt 0 view .LVU1910
 6023 04f4 049B     		ldr	r3, [sp, #16]
 6024 04f6 002B     		cmp	r3, #0
 6025 04f8 3FF4C9AE 		beq	.L569
2343:src/display.c **** 	    obp--;
 6026              		.loc 1 2343 10 is_stmt 1 view .LVU1911
 6027 04fc D845     		cmp	r8, fp
 6028 04fe 7FF6C6AE 		bls	.L569
 6029 0502 4346     		mov	r3, r8
 6030 0504 04E0     		b	.L570
 6031              	.LVL649:
 6032              	.L571:
2343:src/display.c **** 	    obp--;
 6033              		.loc 1 2343 10 is_stmt 0 view .LVU1912
 6034 0506 9B45     		cmp	fp, r3
2345:src/display.c **** 	  }
 6035              		.loc 1 2345 10 view .LVU1913
 6036 0508 05F1FF35 		add	r5, r5, #-1
 6037              	.LVL650:
2343:src/display.c **** 	    obp--;
 6038              		.loc 1 2343 10 is_stmt 1 view .LVU1914
 6039 050c 3FF4BEAE 		beq	.L610
 6040              	.LVL651:
 6041              	.L570:
2344:src/display.c **** 	    odig--;
 6042              		.loc 1 2344 6 discriminator 1 view .LVU1915
 6043 0510 9846     		mov	r8, r3
 6044              	.LVL652:
2344:src/display.c **** 	    odig--;
 6045              		.loc 1 2344 6 is_stmt 0 discriminator 1 view .LVU1916
ARM GAS  /tmp/cchf4YwX.s 			page 201


 6046 0512 013B     		subs	r3, r3, #1
 6047              	.LVL653:
2345:src/display.c **** 	  }
 6048              		.loc 1 2345 6 is_stmt 1 discriminator 1 view .LVU1917
2343:src/display.c **** 	    obp--;
 6049              		.loc 1 2343 19 is_stmt 0 discriminator 1 view .LVU1918
 6050 0514 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 6051 0518 302A     		cmp	r2, #48
 6052 051a F4D0     		beq	.L571
2343:src/display.c **** 	    obp--;
 6053              		.loc 1 2343 19 discriminator 1 view .LVU1919
 6054 051c B7E6     		b	.L569
 6055              	.LVL654:
 6056              	.L702:
2371:src/display.c **** 	  } else if (c == ',') {
 6057              		.loc 1 2371 6 is_stmt 1 view .LVU1920
2371:src/display.c **** 	  } else if (c == ',') {
 6058              		.loc 1 2371 12 is_stmt 0 view .LVU1921
 6059 051e 2246     		mov	r2, r4
 6060              	.LVL655:
2371:src/display.c **** 	  } else if (c == ',') {
 6061              		.loc 1 2371 12 view .LVU1922
 6062 0520 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 6063 0524 A7F10900 		sub	r0, r7, #9
 6064 0528 FFF7FEFF 		bl	set_decimal
 6065              	.LVL656:
 6066 052c 0446     		mov	r4, r0
 6067              	.LVL657:
 6068              	.L580:
2369:src/display.c **** 	  if (c == '.') {
 6069              		.loc 1 2369 53 is_stmt 1 view .LVU1923
2369:src/display.c **** 	  if (c == '.') {
 6070              		.loc 1 2369 12 view .LVU1924
2369:src/display.c **** 	  if (c == '.') {
 6071              		.loc 1 2369 18 is_stmt 0 view .LVU1925
 6072 052e 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 6073              	.LVL658:
2369:src/display.c **** 	  if (c == '.') {
 6074              		.loc 1 2369 2 view .LVU1926
 6075 0532 002A     		cmp	r2, #0
 6076 0534 7FF4D0AE 		bne	.L586
2389:src/display.c **** 	  set_exp(exp, 0, res);
 6077              		.loc 1 2389 2 is_stmt 1 view .LVU1927
2389:src/display.c **** 	  set_exp(exp, 0, res);
 6078              		.loc 1 2389 5 is_stmt 0 view .LVU1928
 6079 0538 BAF1000F 		cmp	r10, #0
 6080 053c 3FF4E1AE 		beq	.L587
 6081              	.LVL659:
 6082              	.L704:
2390:src/display.c **** #endif
 6083              		.loc 1 2390 4 is_stmt 1 view .LVU1929
 6084 0540 3046     		mov	r0, r6
 6085 0542 2246     		mov	r2, r4
 6086              	.LVL660:
2390:src/display.c **** #endif
 6087              		.loc 1 2390 4 is_stmt 0 view .LVU1930
 6088 0544 0021     		movs	r1, #0
ARM GAS  /tmp/cchf4YwX.s 			page 202


 6089 0546 FFF7FEFF 		bl	set_exp
 6090              	.LVL661:
2392:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6091              		.loc 1 2392 2 is_stmt 1 view .LVU1931
2392:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6092              		.loc 1 2392 5 is_stmt 0 view .LVU1932
 6093 054a 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 6094 054e 2E2B     		cmp	r3, #46
 6095 0550 7FF4DCAE 		bne	.L588
 6096              	.L705:
2392:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6097              		.loc 1 2392 21 discriminator 1 view .LVU1933
 6098 0554 002C     		cmp	r4, #0
 6099 0556 7FF4D9AE 		bne	.L588
2393:src/display.c **** 	*display_digits = odig;
 6100              		.loc 1 2393 4 is_stmt 1 view .LVU1934
2393:src/display.c **** 	*display_digits = odig;
 6101              		.loc 1 2393 33 is_stmt 0 view .LVU1935
 6102 055a 019B     		ldr	r3, [sp, #4]
 6103 055c 1868     		ldr	r0, [r3]
2393:src/display.c **** 	*display_digits = odig;
 6104              		.loc 1 2393 4 view .LVU1936
 6105 055e 624B     		ldr	r3, .L715+8
2393:src/display.c **** 	*display_digits = odig;
 6106              		.loc 1 2393 33 view .LVU1937
 6107 0560 0138     		subs	r0, r0, #1
2393:src/display.c **** 	*display_digits = odig;
 6108              		.loc 1 2393 4 view .LVU1938
 6109 0562 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6110 0564 2246     		mov	r2, r4
 6111 0566 00EBC000 		add	r0, r0, r0, lsl #3
 6112 056a FFF7FEFF 		bl	set_decimal
 6113              	.LVL662:
 6114 056e CDE6     		b	.L588
 6115              	.LVL663:
 6116              	.L703:
2373:src/display.c **** 	  } else {
 6117              		.loc 1 2373 6 is_stmt 1 view .LVU1939
2373:src/display.c **** 	  } else {
 6118              		.loc 1 2373 12 is_stmt 0 view .LVU1940
 6119 0570 5E4B     		ldr	r3, .L715+12
 6120 0572 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6121              	.LVL664:
 6122              	.LBB446:
 6123              	.LBI446:
 373:src/display.c ****   if (sep == SEP_NONE)
 6124              		.loc 1 373 14 is_stmt 1 view .LVU1941
 6125              	.LBB447:
 374:src/display.c ****     return res;
 6126              		.loc 1 374 3 view .LVU1942
 374:src/display.c ****     return res;
 6127              		.loc 1 374 6 is_stmt 0 view .LVU1943
 6128 0574 0029     		cmp	r1, #0
 6129 0576 DAD0     		beq	.L580
 376:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6130              		.loc 1 376 3 is_stmt 1 view .LVU1944
 376:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
ARM GAS  /tmp/cchf4YwX.s 			page 203


 6131              		.loc 1 376 6 is_stmt 0 view .LVU1945
 6132 0578 002C     		cmp	r4, #0
 6133 057a 00F0DB81 		beq	.L582
 377:src/display.c ****     else *res++ = '.';
 6134              		.loc 1 377 5 is_stmt 1 view .LVU1946
 377:src/display.c ****     else *res++ = '.';
 6135              		.loc 1 377 8 is_stmt 0 view .LVU1947
 6136 057e 0129     		cmp	r1, #1
 377:src/display.c ****     else *res++ = '.';
 6137              		.loc 1 377 27 is_stmt 1 view .LVU1948
 6138              	.LVL665:
 378:src/display.c ****   } else {
 6139              		.loc 1 378 17 is_stmt 0 view .LVU1949
 6140 0580 16BF     		itet	ne
 6141 0582 2E23     		movne	r3, #46
 377:src/display.c ****     else *res++ = '.';
 6142              		.loc 1 377 34 view .LVU1950
 6143 0584 04F8012B 		strbeq	r2, [r4], #1
 6144              	.LVL666:
 378:src/display.c ****   } else {
 6145              		.loc 1 378 10 is_stmt 1 view .LVU1951
 378:src/display.c ****   } else {
 6146              		.loc 1 378 17 is_stmt 0 view .LVU1952
 6147 0588 04F8013B 		strbne	r3, [r4], #1
 6148              	.LVL667:
 378:src/display.c ****   } else {
 6149              		.loc 1 378 17 view .LVU1953
 6150 058c CFE7     		b	.L580
 6151              	.LVL668:
 6152              	.L584:
 378:src/display.c ****   } else {
 6153              		.loc 1 378 17 view .LVU1954
 6154              	.LBE447:
 6155              	.LBE446:
 6156              	.LBB449:
 6157              	.LBB444:
 415:src/display.c ****   return res;
 6158              		.loc 1 415 8 is_stmt 1 view .LVU1955
 6159 058e 1146     		mov	r1, r2
 6160 0590 3846     		mov	r0, r7
 6161 0592 FFF7FEFF 		bl	set_dig
 6162              	.LVL669:
 415:src/display.c ****   return res;
 6163              		.loc 1 415 8 is_stmt 0 view .LVU1956
 6164 0596 AAE6     		b	.L585
 6165              	.LVL670:
 6166              	.L521:
 415:src/display.c ****   return res;
 6167              		.loc 1 415 8 view .LVU1957
 6168              	.LBE444:
 6169              	.LBE449:
2210:src/display.c **** 
 6170              		.loc 1 2210 2 is_stmt 1 view .LVU1958
2210:src/display.c **** 
 6171              		.loc 1 2210 45 view .LVU1959
2210:src/display.c **** 
 6172              		.loc 1 2210 2 is_stmt 0 view .LVU1960
ARM GAS  /tmp/cchf4YwX.s 			page 204


 6173 0598 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6174 059c 0029     		cmp	r1, #0
 6175 059e 7FF411AE 		bne	.L590
 6176              	.LVL671:
 6177              	.L528:
2275:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6178              		.loc 1 2275 4 is_stmt 1 view .LVU1961
2276:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6179              		.loc 1 2276 4 view .LVU1962
2276:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6180              		.loc 1 2276 7 is_stmt 0 view .LVU1963
 6181 05a2 002E     		cmp	r6, #0
 6182 05a4 C0F22181 		blt	.L551
2276:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6183              		.loc 1 2276 7 view .LVU1964
 6184 05a8 731C     		adds	r3, r6, #1
2278:src/display.c **** 		*obp++ = ',';
 6185              		.loc 1 2278 31 view .LVU1965
 6186 05aa DFF838E1 		ldr	lr, .L715+4
 6187 05ae 0593     		str	r3, [sp, #20]
 6188 05b0 09EB030C 		add	ip, r9, r3
2212:src/display.c **** 	switch (mode) {
 6189              		.loc 1 2212 4 view .LVU1966
 6190 05b4 4D46     		mov	r5, r9
2017:src/display.c **** 	int odig = 0;
 6191              		.loc 1 2017 15 view .LVU1967
 6192 05b6 5846     		mov	r0, fp
 6193 05b8 05E0     		b	.L552
 6194              	.LVL672:
 6195              	.L555:
2279:src/display.c **** 	      *obp++ = *p++;
 6196              		.loc 1 2279 3 is_stmt 1 view .LVU1968
2278:src/display.c **** 		*obp++ = ',';
 6197              		.loc 1 2278 18 is_stmt 0 view .LVU1969
 6198 05ba 0229     		cmp	r1, #2
2279:src/display.c **** 	      *obp++ = *p++;
 6199              		.loc 1 2279 10 view .LVU1970
 6200 05bc 05BF     		ittet	eq
 6201 05be 2C23     		moveq	r3, #44
 6202 05c0 4370     		strbeq	r3, [r0, #1]
2280:src/display.c **** 	      odig++;
 6203              		.loc 1 2280 12 view .LVU1971
 6204 05c2 0130     		addne	r0, r0, #1
 6205              	.LVL673:
2279:src/display.c **** 	      *obp++ = *p++;
 6206              		.loc 1 2279 7 view .LVU1972
 6207 05c4 0230     		addeq	r0, r0, #2
 6208              	.LVL674:
 6209              	.L552:
2280:src/display.c **** 	      odig++;
 6210              		.loc 1 2280 8 is_stmt 1 discriminator 2 view .LVU1973
2280:src/display.c **** 	      odig++;
 6211              		.loc 1 2280 15 is_stmt 0 discriminator 2 view .LVU1974
 6212 05c6 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6213              	.LVL675:
2278:src/display.c **** 		*obp++ = ',';
 6214              		.loc 1 2278 8 is_stmt 1 discriminator 2 view .LVU1975
ARM GAS  /tmp/cchf4YwX.s 			page 205


2280:src/display.c **** 	      odig++;
 6215              		.loc 1 2280 15 is_stmt 0 discriminator 2 view .LVU1976
 6216 05ca 0370     		strb	r3, [r0]
2281:src/display.c **** 	    }
 6217              		.loc 1 2281 8 is_stmt 1 discriminator 2 view .LVU1977
 6218              	.LVL676:
2277:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6219              		.loc 1 2277 24 discriminator 2 view .LVU1978
2277:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6220              		.loc 1 2277 16 discriminator 2 view .LVU1979
2278:src/display.c **** 		*obp++ = ',';
 6221              		.loc 1 2278 31 is_stmt 0 discriminator 2 view .LVU1980
 6222 05cc A9EB0503 		sub	r3, r9, r5
 6223 05d0 3344     		add	r3, r3, r6
 6224 05d2 8EFB0381 		smull	r8, r1, lr, r3
 6225 05d6 A1EBE371 		sub	r1, r1, r3, asr #31
 6226 05da 01EB4101 		add	r1, r1, r1, lsl #1
2277:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6227              		.loc 1 2277 6 discriminator 2 view .LVU1981
 6228 05de AC45     		cmp	ip, r5
2278:src/display.c **** 		*obp++ = ',';
 6229              		.loc 1 2278 31 discriminator 2 view .LVU1982
 6230 05e0 A3EB0101 		sub	r1, r3, r1
2277:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6231              		.loc 1 2277 6 discriminator 2 view .LVU1983
 6232 05e4 E9D1     		bne	.L555
2283:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6233              		.loc 1 2283 13 view .LVU1984
 6234 05e6 2E23     		movs	r3, #46
2284:src/display.c **** 	      *obp++ = *p++;
 6235              		.loc 1 2284 6 view .LVU1985
 6236 05e8 002A     		cmp	r2, #0
 6237 05ea 059D     		ldr	r5, [sp, #20]
 6238              	.LVL677:
2283:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6239              		.loc 1 2283 6 is_stmt 1 view .LVU1986
2283:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6240              		.loc 1 2283 13 is_stmt 0 view .LVU1987
 6241 05ec 4370     		strb	r3, [r0, #1]
2283:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6242              		.loc 1 2283 10 view .LVU1988
 6243 05ee 00F10208 		add	r8, r0, #2
 6244              	.LVL678:
2284:src/display.c **** 	      *obp++ = *p++;
 6245              		.loc 1 2284 6 is_stmt 1 view .LVU1989
2284:src/display.c **** 	      *obp++ = *p++;
 6246              		.loc 1 2284 16 view .LVU1990
2284:src/display.c **** 	      *obp++ = *p++;
 6247              		.loc 1 2284 6 is_stmt 0 view .LVU1991
 6248 05f2 7FF77FAF 		ble	.L540
 6249 05f6 0130     		adds	r0, r0, #1
 6250 05f8 0CEB0201 		add	r1, ip, r2
 6251              	.LVL679:
 6252              	.L556:
2285:src/display.c **** 	      odig++;
 6253              		.loc 1 2285 8 is_stmt 1 discriminator 4 view .LVU1992
2285:src/display.c **** 	      odig++;
ARM GAS  /tmp/cchf4YwX.s 			page 206


 6254              		.loc 1 2285 15 is_stmt 0 discriminator 4 view .LVU1993
 6255 05fc 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6256              	.LVL680:
2285:src/display.c **** 	      odig++;
 6257              		.loc 1 2285 15 discriminator 4 view .LVU1994
 6258 0600 00F8013F 		strb	r3, [r0, #1]!
2286:src/display.c **** 	    }
 6259              		.loc 1 2286 8 is_stmt 1 discriminator 4 view .LVU1995
2284:src/display.c **** 	      *obp++ = *p++;
 6260              		.loc 1 2284 43 discriminator 4 view .LVU1996
2284:src/display.c **** 	      *obp++ = *p++;
 6261              		.loc 1 2284 16 discriminator 4 view .LVU1997
2284:src/display.c **** 	      *obp++ = *p++;
 6262              		.loc 1 2284 6 is_stmt 0 discriminator 4 view .LVU1998
 6263 0604 8C45     		cmp	ip, r1
 6264 0606 F9D1     		bne	.L556
 6265 0608 059B     		ldr	r3, [sp, #20]
 6266 060a 1344     		add	r3, r3, r2
 6267 060c 9044     		add	r8, r8, r2
 6268              	.LVL681:
2284:src/display.c **** 	      *obp++ = *p++;
 6269              		.loc 1 2284 6 discriminator 4 view .LVU1999
 6270 060e 1D46     		mov	r5, r3
 6271 0610 70E7     		b	.L540
 6272              	.LVL682:
 6273              	.L690:
2080:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6274              		.loc 1 2080 4 is_stmt 1 view .LVU2000
 6275 0612 374A     		ldr	r2, .L715+16
 6276 0614 3946     		mov	r1, r7
 6277 0616 3846     		mov	r0, r7
 6278 0618 FFF7FEFF 		bl	decNumberNormalize
 6279              	.LVL683:
2081:src/display.c **** 	  z->exponent = 0;
 6280              		.loc 1 2081 4 view .LVU2001
2081:src/display.c **** 	  z->exponent = 0;
 6281              		.loc 1 2081 22 is_stmt 0 view .LVU2002
 6282 061c D7E90023 		ldrd	r2, r3, [r7]
 6283 0620 03EB0208 		add	r8, r3, r2
2082:src/display.c **** 	}
 6284              		.loc 1 2082 16 view .LVU2003
 6285 0624 C7F804A0 		str	r10, [r7, #4]
2081:src/display.c **** 	  z->exponent = 0;
 6286              		.loc 1 2081 8 view .LVU2004
 6287 0628 08F1FF38 		add	r8, r8, #-1
 6288              	.LVL684:
2082:src/display.c **** 	}
 6289              		.loc 1 2082 4 is_stmt 1 view .LVU2005
 6290 062c 06E5     		b	.L471
 6291              	.LVL685:
 6292              	.L699:
2170:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6293              		.loc 1 2170 6 view .LVU2006
2171:src/display.c **** 	      *p++ = *q++;
 6294              		.loc 1 2171 13 is_stmt 0 view .LVU2007
 6295 062e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2171:src/display.c **** 	      *p++ = *q++;
ARM GAS  /tmp/cchf4YwX.s 			page 207


 6296              		.loc 1 2171 12 view .LVU2008
 6297 0632 A3F13002 		sub	r2, r3, #48
 6298 0636 092A     		cmp	r2, #9
2170:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6299              		.loc 1 2170 7 view .LVU2009
 6300 0638 08F10108 		add	r8, r8, #1
 6301              	.LVL686:
2171:src/display.c **** 	      *p++ = *q++;
 6302              		.loc 1 2171 6 is_stmt 1 view .LVU2010
2171:src/display.c **** 	      *p++ = *q++;
 6303              		.loc 1 2171 12 view .LVU2011
 6304 063c 3FF689AD 		bhi	.L501
 6305              	.LVL687:
 6306              	.L506:
2172:src/display.c **** 	  }
 6307              		.loc 1 2172 8 view .LVU2012
2172:src/display.c **** 	  }
 6308              		.loc 1 2172 13 is_stmt 0 view .LVU2013
 6309 0640 01F8013B 		strb	r3, [r1], #1
 6310              	.LVL688:
2171:src/display.c **** 	      *p++ = *q++;
 6311              		.loc 1 2171 12 is_stmt 1 view .LVU2014
2171:src/display.c **** 	      *p++ = *q++;
 6312              		.loc 1 2171 13 is_stmt 0 view .LVU2015
 6313 0644 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2171:src/display.c **** 	      *p++ = *q++;
 6314              		.loc 1 2171 12 view .LVU2016
 6315 0648 A3F13002 		sub	r2, r3, #48
 6316 064c 092A     		cmp	r2, #9
 6317 064e F7D9     		bls	.L506
 6318 0650 7FE5     		b	.L501
 6319              	.LVL689:
 6320              	.L697:
2154:src/display.c **** 	for (; *q == '0'; q++);
 6321              		.loc 1 2154 4 is_stmt 1 view .LVU2017
2037:src/display.c **** 	int trimzeros = 0;
 6322              		.loc 1 2037 6 is_stmt 0 view .LVU2018
 6323 0652 0022     		movs	r2, #0
 6324 0654 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6325 0658 0392     		str	r2, [sp, #12]
2154:src/display.c **** 	for (; *q == '0'; q++);
 6326              		.loc 1 2154 5 view .LVU2019
 6327 065a 08F10108 		add	r8, r8, #1
 6328              	.LVL690:
2154:src/display.c **** 	for (; *q == '0'; q++);
 6329              		.loc 1 2154 5 view .LVU2020
 6330 065e 4BE5     		b	.L496
 6331              	.LVL691:
 6332              	.L691:
2088:src/display.c **** 	    x[0] = '-';
 6333              		.loc 1 2088 34 discriminator 1 view .LVU2021
 6334 0660 6B20     		movs	r0, #107
 6335 0662 FFF7FEFF 		bl	get_user_flag
 6336              	.LVL692:
2088:src/display.c **** 	    x[0] = '-';
 6337              		.loc 1 2088 31 discriminator 1 view .LVU2022
 6338 0666 0028     		cmp	r0, #0
ARM GAS  /tmp/cchf4YwX.s 			page 208


 6339 0668 3FF4FAAC 		beq	.L473
2089:src/display.c **** 	    x[1] = '0';
 6340              		.loc 1 2089 6 is_stmt 1 view .LVU2023
2090:src/display.c **** 	  } else
 6341              		.loc 1 2090 6 view .LVU2024
2089:src/display.c **** 	    x[1] = '0';
 6342              		.loc 1 2089 11 is_stmt 0 view .LVU2025
 6343 066c 43F22D03 		movw	r3, #12333
 6344 0670 ADF82430 		strh	r3, [sp, #36]	@ movhi
2090:src/display.c **** 	  } else
 6345              		.loc 1 2090 11 view .LVU2026
 6346 0674 F7E4     		b	.L474
 6347              	.LVL693:
 6348              	.L695:
2147:src/display.c **** 	  CLR_MANT_SIGN;
 6349              		.loc 1 2147 4 is_stmt 1 view .LVU2027
 6350              	.LBB450:
 6351              	.LBI450:
 320:src/display.c **** {
 6352              		.loc 1 320 13 view .LVU2028
 6353              	.LBB451:
 322:src/display.c ****   clr_dot(EXP_SIGN);
 6354              		.loc 1 322 3 view .LVU2029
 323:src/display.c **** }
 6355              		.loc 1 323 3 view .LVU2030
 322:src/display.c ****   clr_dot(EXP_SIGN);
 6356              		.loc 1 322 27 is_stmt 0 view .LVU2031
 6357 0676 1F4B     		ldr	r3, .L715+20
 6358 0678 2022     		movs	r2, #32
 323:src/display.c **** }
 6359              		.loc 1 323 3 view .LVU2032
 6360 067a 8220     		movs	r0, #130
 322:src/display.c ****   clr_dot(EXP_SIGN);
 6361              		.loc 1 322 27 view .LVU2033
 6362 067c 1A70     		strb	r2, [r3]
 323:src/display.c **** }
 6363              		.loc 1 323 3 view .LVU2034
 6364 067e FFF7FEFF 		bl	clr_dot
 6365              	.LVL694:
 6366              	.LBE451:
 6367              	.LBE450:
2148:src/display.c **** 	}
 6368              		.loc 1 2148 4 is_stmt 1 view .LVU2035
 6369              	.LBB452:
 6370              	.LBI452:
 308:src/display.c **** {
 6371              		.loc 1 308 13 view .LVU2036
 6372              	.LBB453:
 310:src/display.c ****   clr_dot(MANT_SIGN);
 6373              		.loc 1 310 3 view .LVU2037
 310:src/display.c ****   clr_dot(MANT_SIGN);
 6374              		.loc 1 310 25 is_stmt 0 view .LVU2038
 6375 0682 1D4B     		ldr	r3, .L715+24
 6376 0684 2022     		movs	r2, #32
 311:src/display.c **** }
 6377              		.loc 1 311 3 view .LVU2039
 6378 0686 8120     		movs	r0, #129
ARM GAS  /tmp/cchf4YwX.s 			page 209


 310:src/display.c ****   clr_dot(MANT_SIGN);
 6379              		.loc 1 310 25 view .LVU2040
 6380 0688 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 6381              		.loc 1 311 3 is_stmt 1 view .LVU2041
 6382 068a FFF7FEFF 		bl	clr_dot
 6383              	.LVL695:
 312:src/display.c **** 
 6384              		.loc 1 312 1 is_stmt 0 view .LVU2042
 6385 068e 29E5     		b	.L494
 6386              	.LVL696:
 6387              	.L701:
 312:src/display.c **** 
 6388              		.loc 1 312 1 view .LVU2043
 6389              	.LBE453:
 6390              	.LBE452:
2348:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6391              		.loc 1 2348 72 discriminator 2 view .LVU2044
 6392 0690 06F2E732 		addw	r2, r6, #999
2348:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6393              		.loc 1 2348 58 discriminator 2 view .LVU2045
 6394 0694 40F2CE73 		movw	r3, #1998
 6395 0698 9A42     		cmp	r2, r3
 6396 069a 7FF6FEAD 		bls	.L572
2349:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6397              		.loc 1 2349 4 is_stmt 1 view .LVU2046
2349:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6398              		.loc 1 2349 20 is_stmt 0 view .LVU2047
 6399 069e 019A     		ldr	r2, [sp, #4]
 6400 06a0 0A23     		movs	r3, #10
2350:src/display.c **** 	  return;
 6401              		.loc 1 2350 4 view .LVU2048
 6402 06a2 2146     		mov	r1, r4
 6403 06a4 3846     		mov	r0, r7
2349:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6404              		.loc 1 2349 20 view .LVU2049
 6405 06a6 1360     		str	r3, [r2]
2350:src/display.c **** 	  return;
 6406              		.loc 1 2350 4 is_stmt 1 view .LVU2050
 6407 06a8 FFF7FEFF 		bl	set_x_dn
 6408              	.LVL697:
2351:src/display.c **** 	}
 6409              		.loc 1 2351 4 view .LVU2051
 6410 06ac 30E6     		b	.L464
 6411              	.LVL698:
 6412              	.L489:
 6413              	.LBB454:
2109:src/display.c **** 
 6414              		.loc 1 2109 4 view .LVU2052
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6415              		.loc 1 2111 4 view .LVU2053
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6416              		.loc 1 2111 11 is_stmt 0 view .LVU2054
 6417 06ae 2A46     		mov	r2, r5
 6418 06b0 07A9     		add	r1, sp, #28
 6419 06b2 3846     		mov	r0, r7
 6420 06b4 FFF7FEFF 		bl	std_round_fix
ARM GAS  /tmp/cchf4YwX.s 			page 210


 6421              	.LVL699:
 6422              	.LBE454:
2038:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6423              		.loc 1 2038 6 view .LVU2055
 6424 06b8 0023     		movs	r3, #0
 6425              	.LBB455:
2111:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6426              		.loc 1 2111 11 view .LVU2056
 6427 06ba 0546     		mov	r5, r0
 6428              	.LVL700:
2112:src/display.c **** 	    // allow zeros to be trimmed
 6429              		.loc 1 2112 4 is_stmt 1 view .LVU2057
 6430              	.LBE455:
2038:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6431              		.loc 1 2038 6 is_stmt 0 view .LVU2058
 6432 06bc 0493     		str	r3, [sp, #16]
 6433 06be EBE4     		b	.L593
 6434              	.LVL701:
 6435              	.L575:
2363:src/display.c **** 	      SET_MANT_SIGN;
 6436              		.loc 1 2363 6 is_stmt 1 view .LVU2059
2363:src/display.c **** 	      SET_MANT_SIGN;
 6437              		.loc 1 2363 9 is_stmt 0 view .LVU2060
 6438 06c0 002F     		cmp	r7, #0
 6439 06c2 40F01181 		bne	.L578
2364:src/display.c **** 	    else
 6440              		.loc 1 2364 8 is_stmt 1 view .LVU2061
 6441              	.LBB456:
 6442              	.LBI456:
 302:src/display.c **** {
 6443              		.loc 1 302 13 view .LVU2062
 6444              	.LBB457:
 304:src/display.c ****   set_dot(MANT_SIGN);
 6445              		.loc 1 304 3 view .LVU2063
 304:src/display.c ****   set_dot(MANT_SIGN);
 6446              		.loc 1 304 25 is_stmt 0 view .LVU2064
 6447 06c6 0C4B     		ldr	r3, .L715+24
 6448 06c8 2D22     		movs	r2, #45
 305:src/display.c **** }
 6449              		.loc 1 305 3 view .LVU2065
 6450 06ca 8120     		movs	r0, #129
 304:src/display.c ****   set_dot(MANT_SIGN);
 6451              		.loc 1 304 25 view .LVU2066
 6452 06cc 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 6453              		.loc 1 305 3 is_stmt 1 view .LVU2067
 6454 06ce FFF7FEFF 		bl	set_dot
 6455              	.LVL702:
 305:src/display.c **** }
 6456              		.loc 1 305 3 is_stmt 0 view .LVU2068
 6457              	.LBE457:
 6458              	.LBE456:
2369:src/display.c **** 	  if (c == '.') {
 6459              		.loc 1 2369 12 is_stmt 1 view .LVU2069
2369:src/display.c **** 	  if (c == '.') {
 6460              		.loc 1 2369 18 is_stmt 0 view .LVU2070
 6461 06d2 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
ARM GAS  /tmp/cchf4YwX.s 			page 211


 6462              	.LVL703:
2369:src/display.c **** 	  if (c == '.') {
 6463              		.loc 1 2369 2 view .LVU2071
 6464 06d6 002A     		cmp	r2, #0
 6465 06d8 7FF4FCAD 		bne	.L577
 6466 06dc 0DE6     		b	.L576
 6467              	.L716:
 6468 06de 00BF     		.align	2
 6469              	.L715:
 6470 06e0 00000000 		.word	main_ram
 6471 06e4 56555555 		.word	1431655766
 6472 06e8 00000000 		.word	.LANCHOR1
 6473 06ec 00000000 		.word	.LANCHOR0
 6474 06f0 00000000 		.word	Ctx
 6475 06f4 00000000 		.word	LastDisplayedExponent
 6476 06f8 00000000 		.word	LastDisplayedNumber
 6477              	.LVL704:
 6478              	.L692:
2097:src/display.c **** 	  return;
 6479              		.loc 1 2097 4 is_stmt 1 view .LVU2072
 6480              	.LBB458:
 6481              	.LBI458:
1885:src/display.c **** 	const int dbl = is_dblmode();
 6482              		.loc 1 1885 19 view .LVU2073
 6483              	.LBB459:
1886:src/display.c **** 	char *p;
 6484              		.loc 1 1886 2 view .LVU2074
1886:src/display.c **** 	char *p;
 6485              		.loc 1 1886 18 is_stmt 0 view .LVU2075
 6486 06fc FFF7FEFF 		bl	is_dblmode
 6487              	.LVL705:
1902:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6488              		.loc 1 1902 5 view .LVU2076
 6489 0700 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6490 0704 2D2B     		cmp	r3, #45
1886:src/display.c **** 	char *p;
 6491              		.loc 1 1886 18 view .LVU2077
 6492 0706 0446     		mov	r4, r0
 6493              	.LVL706:
1887:src/display.c **** 	int i, j;
 6494              		.loc 1 1887 2 is_stmt 1 view .LVU2078
1888:src/display.c **** 	char *upper_str;
 6495              		.loc 1 1888 2 view .LVU2079
1889:src/display.c **** 	enum separator_modes separator_mode;
 6496              		.loc 1 1889 2 view .LVU2080
1890:src/display.c **** 	char decimal_mark;
 6497              		.loc 1 1890 2 view .LVU2081
1891:src/display.c **** 	char thousands_sep;
 6498              		.loc 1 1891 2 view .LVU2082
1892:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6499              		.loc 1 1892 2 view .LVU2083
1898:src/display.c **** #endif
 6500              		.loc 1 1898 2 view .LVU2084
1900:src/display.c **** 
 6501              		.loc 1 1900 2 view .LVU2085
1902:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6502              		.loc 1 1902 2 view .LVU2086
ARM GAS  /tmp/cchf4YwX.s 			page 212


1902:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6503              		.loc 1 1902 5 is_stmt 0 view .LVU2087
 6504 0708 00F02081 		beq	.L709
1915:src/display.c **** 
 6505              		.loc 1 1915 16 view .LVU2088
 6506 070c 0027     		movs	r7, #0
 6507              	.LVL707:
 6508              	.L476:
1917:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6509              		.loc 1 1917 2 is_stmt 1 view .LVU2089
1917:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6510              		.loc 1 1917 6 is_stmt 0 view .LVU2090
 6511 070e 0021     		movs	r1, #0
 6512 0710 5846     		mov	r0, fp
 6513 0712 FFF7FEFF 		bl	find_char
 6514              	.LVL708:
1918:src/display.c **** 
 6515              		.loc 1 1918 2 is_stmt 1 view .LVU2091
1918:src/display.c **** 
 6516              		.loc 1 1918 23 is_stmt 0 view .LVU2092
 6517 0716 A0EB0B02 		sub	r2, r0, fp
1918:src/display.c **** 
 6518              		.loc 1 1918 2 view .LVU2093
 6519 071a C2F12202 		rsb	r2, r2, #34
 6520 071e 3021     		movs	r1, #48
 6521 0720 FFF7FEFF 		bl	xset
 6522              	.LVL709:
1920:src/display.c **** 	  separator_mode = SEP_COMMA;
 6523              		.loc 1 1920 2 is_stmt 1 view .LVU2094
1920:src/display.c **** 	  separator_mode = SEP_COMMA;
 6524              		.loc 1 1920 18 is_stmt 0 view .LVU2095
 6525 0724 AC4A     		ldr	r2, .L717
1931:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6526              		.loc 1 1931 6 view .LVU2096
 6527 0726 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1920:src/display.c **** 	  separator_mode = SEP_COMMA;
 6528              		.loc 1 1920 5 view .LVU2097
 6529 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1928:src/display.c **** 	}
 6530              		.loc 1 1928 18 view .LVU2098
 6531 072a 002A     		cmp	r2, #0
 6532 072c 15BF     		itete	ne
 6533 072e 4FF00209 		movne	r9, #2
 6534 0732 2C26     		moveq	r6, #44
 6535 0734 2E26     		movne	r6, #46
 6536              	.LVL710:
1928:src/display.c **** 	}
 6537              		.loc 1 1928 18 view .LVU2099
 6538 0736 2E25     		moveq	r5, #46
 6539              	.LVL711:
1928:src/display.c **** 	}
 6540              		.loc 1 1928 18 view .LVU2100
 6541 0738 18BF     		it	ne
 6542 073a 2C25     		movne	r5, #44
 6543              	.LVL712:
1931:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6544              		.loc 1 1931 2 is_stmt 1 view .LVU2101
ARM GAS  /tmp/cchf4YwX.s 			page 213


1931:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6545              		.loc 1 1931 5 is_stmt 0 view .LVU2102
 6546 073c 13F0380F 		tst	r3, #56
 6547 0740 40F0D880 		bne	.L710
1958:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6548              		.loc 1 1958 4 is_stmt 1 view .LVU2103
 6549              	.LVL713:
1959:src/display.c **** 	  x[1] = decimal_mark;
 6550              		.loc 1 1959 4 view .LVU2104
 6551 0744 1022     		movs	r2, #16
 6552 0746 0BF10101 		add	r1, fp, #1
 6553 074a 0BF10200 		add	r0, fp, #2
 6554 074e FFF7FEFF 		bl	xcopy
 6555              	.LVL714:
1960:src/display.c **** 	  if (grouping) {
 6556              		.loc 1 1960 4 view .LVU2105
1962:src/display.c **** 	    x[5] = thousands_sep;
 6557              		.loc 1 1962 6 is_stmt 0 view .LVU2106
 6558 0752 0D22     		movs	r2, #13
 6559 0754 0BF10501 		add	r1, fp, #5
 6560 0758 0BF10600 		add	r0, fp, #6
1960:src/display.c **** 	  if (grouping) {
 6561              		.loc 1 1960 9 view .LVU2107
 6562 075c 8BF80150 		strb	r5, [fp, #1]
1961:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6563              		.loc 1 1961 4 is_stmt 1 view .LVU2108
1962:src/display.c **** 	    x[5] = thousands_sep;
 6564              		.loc 1 1962 6 view .LVU2109
 6565 0760 FFF7FEFF 		bl	xcopy
 6566              	.LVL715:
1963:src/display.c **** 	    x += 9;
 6567              		.loc 1 1963 6 view .LVU2110
1964:src/display.c **** 	  }
 6568              		.loc 1 1964 8 is_stmt 0 view .LVU2111
 6569 0764 0BF10905 		add	r5, fp, #9
 6570              	.LVL716:
1963:src/display.c **** 	    x += 9;
 6571              		.loc 1 1963 11 view .LVU2112
 6572 0768 8BF80560 		strb	r6, [fp, #5]
1964:src/display.c **** 	  }
 6573              		.loc 1 1964 6 is_stmt 1 view .LVU2113
 6574              	.LVL717:
1967:src/display.c **** 	    if (exp < 0) {
 6575              		.loc 1 1967 4 view .LVU2114
1967:src/display.c **** 	    if (exp < 0) {
 6576              		.loc 1 1967 7 is_stmt 0 view .LVU2115
 6577 076c 002C     		cmp	r4, #0
 6578 076e 00F0EA80 		beq	.L480
1968:src/display.c **** 	      x[9] = '-';
 6579              		.loc 1 1968 6 is_stmt 1 view .LVU2116
1968:src/display.c **** 	      x[9] = '-';
 6580              		.loc 1 1968 9 is_stmt 0 view .LVU2117
 6581 0772 B8F1000F 		cmp	r8, #0
1969:src/display.c **** 	      exp = -exp;
 6582              		.loc 1 1969 8 is_stmt 1 view .LVU2118
1970:src/display.c **** 	    }
 6583              		.loc 1 1970 8 view .LVU2119
ARM GAS  /tmp/cchf4YwX.s 			page 214


1974:src/display.c **** 	    x[10] = '0' + j;
 6584              		.loc 1 1974 8 is_stmt 0 view .LVU2120
 6585 0776 994B     		ldr	r3, .L717+4
1976:src/display.c **** 	  }
 6586              		.loc 1 1976 18 view .LVU2121
 6587 0778 9949     		ldr	r1, .L717+8
1969:src/display.c **** 	      exp = -exp;
 6588              		.loc 1 1969 13 view .LVU2122
 6589 077a B6BF     		itet	lt
 6590 077c 2D22     		movlt	r2, #45
1973:src/display.c **** 	    j = exp / 1000;
 6591              		.loc 1 1973 13 view .LVU2123
 6592 077e 2022     		movge	r2, #32
1970:src/display.c **** 	    }
 6593              		.loc 1 1970 12 view .LVU2124
 6594 0780 C8F10008 		rsblt	r8, r8, #0
 6595              	.LVL718:
1970:src/display.c **** 	    }
 6596              		.loc 1 1970 12 view .LVU2125
 6597 0784 8BF81220 		strb	r2, [fp, #18]
1974:src/display.c **** 	    x[10] = '0' + j;
 6598              		.loc 1 1974 6 is_stmt 1 view .LVU2126
1974:src/display.c **** 	    x[10] = '0' + j;
 6599              		.loc 1 1974 8 is_stmt 0 view .LVU2127
 6600 0788 A3FB0823 		umull	r2, r3, r3, r8
 6601 078c 9B09     		lsrs	r3, r3, #6
 6602              	.LVL719:
1975:src/display.c **** 	    exp -= 1000 * j;
 6603              		.loc 1 1975 6 is_stmt 1 view .LVU2128
1975:src/display.c **** 	    exp -= 1000 * j;
 6604              		.loc 1 1975 18 is_stmt 0 view .LVU2129
 6605 078e 03F13002 		add	r2, r3, #48
1976:src/display.c **** 	  }
 6606              		.loc 1 1976 10 view .LVU2130
 6607 0792 01FB0388 		mla	r8, r1, r3, r8
 6608              	.LVL720:
1975:src/display.c **** 	    exp -= 1000 * j;
 6609              		.loc 1 1975 12 view .LVU2131
 6610 0796 8BF81320 		strb	r2, [fp, #19]
1976:src/display.c **** 	  }
 6611              		.loc 1 1976 6 is_stmt 1 view .LVU2132
 6612              	.LVL721:
 6613              	.L482:
1982:src/display.c **** 	  *x = 0;
 6614              		.loc 1 1982 4 view .LVU2133
 6615 079a 0B22     		movs	r2, #11
 6616 079c 2946     		mov	r1, r5
 6617 079e 0BF10A00 		add	r0, fp, #10
 6618 07a2 FFF7FEFF 		bl	xcopy
 6619              	.LVL722:
1983:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6620              		.loc 1 1983 4 view .LVU2134
1983:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6621              		.loc 1 1983 7 is_stmt 0 view .LVU2135
 6622 07a6 0022     		movs	r2, #0
1984:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6623              		.loc 1 1984 4 view .LVU2136
ARM GAS  /tmp/cchf4YwX.s 			page 215


 6624 07a8 4046     		mov	r0, r8
 6625 07aa 0121     		movs	r1, #1
1983:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6626              		.loc 1 1983 7 view .LVU2137
 6627 07ac 8BF80920 		strb	r2, [fp, #9]
1984:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6628              		.loc 1 1984 4 is_stmt 1 view .LVU2138
 6629 07b0 FFF7FEFF 		bl	set_exp
 6630              	.LVL723:
1985:src/display.c **** 	}
 6631              		.loc 1 1985 4 view .LVU2139
1985:src/display.c **** 	}
 6632              		.loc 1 1985 4 is_stmt 0 view .LVU2140
 6633 07b4 ABEB0707 		sub	r7, fp, r7
 6634              	.LVL724:
1985:src/display.c **** 	}
 6635              		.loc 1 1985 6 view .LVU2141
 6636 07b8 0924     		movs	r4, #9
 6637              	.LVL725:
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6638              		.loc 1 1988 11 is_stmt 1 view .LVU2142
 6639              	.L483:
1989:src/display.c **** 	  }
 6640              		.loc 1 1989 6 view .LVU2143
 6641              	.LBB460:
 6642              	.LBI460:
 373:src/display.c ****   if (sep == SEP_NONE)
 6643              		.loc 1 373 14 view .LVU2144
 6644              	.LBB461:
 374:src/display.c ****     return res;
 6645              		.loc 1 374 3 view .LVU2145
 376:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6646              		.loc 1 376 3 view .LVU2146
 6647 07ba 2046     		mov	r0, r4
 6648 07bc 4946     		mov	r1, r9
 6649              	.LBE461:
 6650              	.LBE460:
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6651              		.loc 1 1988 38 is_stmt 0 view .LVU2147
 6652 07be 1B34     		adds	r4, r4, #27
 6653              	.LVL726:
 6654              	.LBB463:
 6655              	.LBB462:
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6656              		.loc 1 1988 38 view .LVU2148
 6657 07c0 FFF7FEFF 		bl	set_separator.part.0
 6658              	.LVL727:
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6659              		.loc 1 1988 38 view .LVU2149
 6660              	.LBE462:
 6661              	.LBE463:
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6662              		.loc 1 1988 36 is_stmt 1 view .LVU2150
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6663              		.loc 1 1988 11 view .LVU2151
1988:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6664              		.loc 1 1988 4 is_stmt 0 view .LVU2152
ARM GAS  /tmp/cchf4YwX.s 			page 216


 6665 07c4 512C     		cmp	r4, #81
 6666 07c6 F8DD     		ble	.L483
 6667 07c8 6C1E     		subs	r4, r5, #1
 6668              	.LVL728:
 6669              	.L485:
1994:src/display.c **** 
 6670              		.loc 1 1994 4 is_stmt 1 view .LVU2153
 6671 07ca 5046     		mov	r0, r10
 6672 07cc 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1993:src/display.c **** 	  set_dig(j, x[i]);
 6673              		.loc 1 1993 33 is_stmt 0 view .LVU2154
 6674 07d0 0AF1090A 		add	r10, r10, #9
 6675              	.LVL729:
1994:src/display.c **** 
 6676              		.loc 1 1994 4 view .LVU2155
 6677 07d4 FFF7FEFF 		bl	set_dig
 6678              	.LVL730:
1993:src/display.c **** 	  set_dig(j, x[i]);
 6679              		.loc 1 1993 26 is_stmt 1 view .LVU2156
1993:src/display.c **** 	  set_dig(j, x[i]);
 6680              		.loc 1 1993 18 view .LVU2157
1993:src/display.c **** 	  set_dig(j, x[i]);
 6681              		.loc 1 1993 2 is_stmt 0 view .LVU2158
 6682 07d8 BAF16C0F 		cmp	r10, #108
 6683 07dc F5D1     		bne	.L485
1996:src/display.c **** 	set_status(upper_str - negative);
 6684              		.loc 1 1996 2 is_stmt 1 view .LVU2159
1996:src/display.c **** 	set_status(upper_str - negative);
 6685              		.loc 1 1996 5 is_stmt 0 view .LVU2160
 6686 07de 0023     		movs	r3, #0
1997:src/display.c ****       }
 6687              		.loc 1 1997 2 view .LVU2161
 6688 07e0 3846     		mov	r0, r7
1996:src/display.c **** 	set_status(upper_str - negative);
 6689              		.loc 1 1996 5 view .LVU2162
 6690 07e2 2B70     		strb	r3, [r5]
1997:src/display.c ****       }
 6691              		.loc 1 1997 2 is_stmt 1 view .LVU2163
 6692 07e4 FFF7FEFF 		bl	set_status
 6693              	.LVL731:
1998:src/display.c **** 
 6694              		.loc 1 1998 7 is_stmt 0 view .LVU2164
 6695 07e8 92E5     		b	.L464
 6696              	.LVL732:
 6697              	.L551:
1998:src/display.c **** 
 6698              		.loc 1 1998 7 view .LVU2165
 6699              	.LBE459:
 6700              	.LBE458:
2289:src/display.c **** 	    odig++;
 6701              		.loc 1 2289 6 is_stmt 1 view .LVU2166
2290:src/display.c **** 	    *obp++ = '.';
 6702              		.loc 1 2290 6 view .LVU2167
2291:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6703              		.loc 1 2291 6 view .LVU2168
2289:src/display.c **** 	    odig++;
 6704              		.loc 1 2289 13 is_stmt 0 view .LVU2169
ARM GAS  /tmp/cchf4YwX.s 			page 217


 6705 07ea 42F63063 		movw	r3, #11824
 6706 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2292:src/display.c **** 	      *obp++ = '0';
 6707              		.loc 1 2292 6 is_stmt 1 view .LVU2170
 6708              	.LVL733:
2292:src/display.c **** 	      *obp++ = '0';
 6709              		.loc 1 2292 20 view .LVU2171
2292:src/display.c **** 	      *obp++ = '0';
 6710              		.loc 1 2292 6 is_stmt 0 view .LVU2172
 6711 07f2 731C     		adds	r3, r6, #1
 6712              	.LVL734:
2292:src/display.c **** 	      *obp++ = '0';
 6713              		.loc 1 2292 6 view .LVU2173
 6714 07f4 00F0E580 		beq	.L711
 6715 07f8 C6F10102 		rsb	r2, r6, #1
2291:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6716              		.loc 1 2291 10 view .LVU2174
 6717 07fc 0DF12600 		add	r0, sp, #38
 6718              	.LVL735:
2291:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6719              		.loc 1 2291 10 view .LVU2175
 6720 0800 079D     		ldr	r5, [sp, #28]
 6721 0802 5A44     		add	r2, r2, fp
 6722 0804 0346     		mov	r3, r0
 6723              	.LVL736:
2293:src/display.c **** 	      odig++;
 6724              		.loc 1 2293 15 view .LVU2176
 6725 0806 3021     		movs	r1, #48
 6726              	.LVL737:
 6727              	.L559:
2293:src/display.c **** 	      odig++;
 6728              		.loc 1 2293 8 is_stmt 1 discriminator 3 view .LVU2177
2293:src/display.c **** 	      odig++;
 6729              		.loc 1 2293 15 is_stmt 0 discriminator 3 view .LVU2178
 6730 0808 03F8011B 		strb	r1, [r3], #1
 6731              	.LVL738:
2294:src/display.c **** 	      dd--;
 6732              		.loc 1 2294 8 is_stmt 1 discriminator 3 view .LVU2179
2295:src/display.c **** 	    }
 6733              		.loc 1 2295 8 discriminator 3 view .LVU2180
2292:src/display.c **** 	      *obp++ = '0';
 6734              		.loc 1 2292 25 discriminator 3 view .LVU2181
2292:src/display.c **** 	      *obp++ = '0';
 6735              		.loc 1 2292 20 discriminator 3 view .LVU2182
2292:src/display.c **** 	      *obp++ = '0';
 6736              		.loc 1 2292 6 is_stmt 0 discriminator 3 view .LVU2183
 6737 080c 9342     		cmp	r3, r2
 6738 080e FBD1     		bne	.L559
 6739 0810 AB19     		adds	r3, r5, r6
 6740              	.LVL739:
2292:src/display.c **** 	      *obp++ = '0';
 6741              		.loc 1 2292 6 discriminator 3 view .LVU2184
 6742 0812 6FEA0608 		mvn	r8, r6
 6743 0816 0133     		adds	r3, r3, #1
 6744 0818 8044     		add	r8, r8, r0
 6745 081a 7542     		rsbs	r5, r6, #0
 6746              	.L558:
ARM GAS  /tmp/cchf4YwX.s 			page 218


 6747              	.LVL740:
2297:src/display.c **** 	      *obp++ = *p++;
 6748              		.loc 1 2297 12 is_stmt 1 view .LVU2185
2297:src/display.c **** 	      *obp++ = *p++;
 6749              		.loc 1 2297 15 is_stmt 0 view .LVU2186
 6750 081c 5A1E     		subs	r2, r3, #1
2297:src/display.c **** 	      *obp++ = *p++;
 6751              		.loc 1 2297 12 view .LVU2187
 6752 081e 002B     		cmp	r3, #0
2297:src/display.c **** 	      *obp++ = *p++;
 6753              		.loc 1 2297 15 view .LVU2188
 6754 0820 0792     		str	r2, [sp, #28]
2297:src/display.c **** 	      *obp++ = *p++;
 6755              		.loc 1 2297 12 view .LVU2189
 6756 0822 7FF767AE 		ble	.L540
 6757 0826 4344     		add	r3, r3, r8
 6758 0828 581E     		subs	r0, r3, #1
 6759 082a 08F1FF38 		add	r8, r8, #-1
 6760              	.LVL741:
 6761              	.L560:
2298:src/display.c **** 	      odig++;
 6762              		.loc 1 2298 8 is_stmt 1 view .LVU2190
2298:src/display.c **** 	      odig++;
 6763              		.loc 1 2298 15 is_stmt 0 view .LVU2191
 6764 082e 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6765              	.LVL742:
2298:src/display.c **** 	      odig++;
 6766              		.loc 1 2298 15 view .LVU2192
 6767 0832 08F8011F 		strb	r1, [r8, #1]!
2299:src/display.c **** 	    }
 6768              		.loc 1 2299 8 is_stmt 1 view .LVU2193
2297:src/display.c **** 	      *obp++ = *p++;
 6769              		.loc 1 2297 12 view .LVU2194
 6770 0836 8045     		cmp	r8, r0
 6771 0838 F9D1     		bne	.L560
 6772              	.LVL743:
2297:src/display.c **** 	      *obp++ = *p++;
 6773              		.loc 1 2297 12 is_stmt 0 view .LVU2195
 6774 083a 0135     		adds	r5, r5, #1
 6775 083c 4FF0FF31 		mov	r1, #-1
 6776 0840 1544     		add	r5, r5, r2
 6777 0842 9846     		mov	r8, r3
 6778 0844 0791     		str	r1, [sp, #28]
 6779 0846 55E6     		b	.L540
 6780              	.LVL744:
 6781              	.L563:
2315:src/display.c **** 	    odig++;
 6782              		.loc 1 2315 6 is_stmt 1 view .LVU2196
2315:src/display.c **** 	    odig++;
 6783              		.loc 1 2315 13 is_stmt 0 view .LVU2197
 6784 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6785 084c 8DF82430 		strb	r3, [sp, #36]
2316:src/display.c **** 	    dd--;
 6786              		.loc 1 2316 6 is_stmt 1 view .LVU2198
 6787              	.LVL745:
2317:src/display.c **** 	    exp--;
 6788              		.loc 1 2317 6 view .LVU2199
ARM GAS  /tmp/cchf4YwX.s 			page 219


2317:src/display.c **** 	    exp--;
 6789              		.loc 1 2317 8 is_stmt 0 view .LVU2200
 6790 0850 013A     		subs	r2, r2, #1
2318:src/display.c **** 	  case -2:
 6791              		.loc 1 2318 6 is_stmt 1 view .LVU2201
2318:src/display.c **** 	  case -2:
 6792              		.loc 1 2318 9 is_stmt 0 view .LVU2202
 6793 0852 013E     		subs	r6, r6, #1
 6794              	.LVL746:
2318:src/display.c **** 	  case -2:
 6795              		.loc 1 2318 9 view .LVU2203
 6796 0854 0325     		movs	r5, #3
2315:src/display.c **** 	    odig++;
 6797              		.loc 1 2315 17 view .LVU2204
 6798 0856 0DF15909 		add	r9, sp, #89
 6799              	.LVL747:
2315:src/display.c **** 	    odig++;
 6800              		.loc 1 2315 10 view .LVU2205
 6801 085a 0DF12501 		add	r1, sp, #37
 6802              	.LVL748:
 6803              	.L566:
2321:src/display.c **** 	    odig++;
 6804              		.loc 1 2321 6 is_stmt 1 view .LVU2206
2321:src/display.c **** 	    odig++;
 6805              		.loc 1 2321 13 is_stmt 0 view .LVU2207
 6806 085e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6807              	.LVL749:
2321:src/display.c **** 	    odig++;
 6808              		.loc 1 2321 13 view .LVU2208
 6809 0862 01F8013B 		strb	r3, [r1], #1
 6810              	.LVL750:
2322:src/display.c **** 	    dd--;
 6811              		.loc 1 2322 6 is_stmt 1 view .LVU2209
2323:src/display.c **** 	    exp--;
 6812              		.loc 1 2323 6 view .LVU2210
2323:src/display.c **** 	    exp--;
 6813              		.loc 1 2323 8 is_stmt 0 view .LVU2211
 6814 0866 013A     		subs	r2, r2, #1
2324:src/display.c **** 	  case 0:
 6815              		.loc 1 2324 6 is_stmt 1 view .LVU2212
2324:src/display.c **** 	  case 0:
 6816              		.loc 1 2324 9 is_stmt 0 view .LVU2213
 6817 0868 013E     		subs	r6, r6, #1
 6818              	.LVL751:
2324:src/display.c **** 	  case 0:
 6819              		.loc 1 2324 9 view .LVU2214
 6820 086a 24E6     		b	.L530
 6821              	.LVL752:
 6822              	.L565:
2324:src/display.c **** 	  case 0:
 6823              		.loc 1 2324 9 view .LVU2215
 6824 086c 079A     		ldr	r2, [sp, #28]
2312:src/display.c **** 	  case -1:
 6825              		.loc 1 2312 16 view .LVU2216
 6826 086e 0225     		movs	r5, #2
2017:src/display.c **** 	int odig = 0;
 6827              		.loc 1 2017 15 view .LVU2217
ARM GAS  /tmp/cchf4YwX.s 			page 220


 6828 0870 5946     		mov	r1, fp
 6829 0872 F4E7     		b	.L566
 6830              	.LVL753:
 6831              	.L511:
2180:src/display.c **** 	    /* We might have push the fixed decimals off the
 6832              		.loc 1 2180 6 is_stmt 1 view .LVU2218
2184:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6833              		.loc 1 2184 6 view .LVU2219
2184:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6834              		.loc 1 2184 9 is_stmt 0 view .LVU2220
 6835 0874 0299     		ldr	r1, [sp, #8]
2184:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6836              		.loc 1 2184 23 view .LVU2221
 6837 0876 9319     		adds	r3, r2, r6
2184:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6838              		.loc 1 2184 9 view .LVU2222
 6839 0878 9942     		cmp	r1, r3
2185:src/display.c **** 	  }
 6840              		.loc 1 2185 8 is_stmt 1 view .LVU2223
2185:src/display.c **** 	  }
 6841              		.loc 1 2185 30 is_stmt 0 view .LVU2224
 6842 087a DFBF     		itttt	le
 6843 087c 029B     		ldrle	r3, [sp, #8]
 6844 087e 03F1FF32 		addle	r2, r3, #-1
2185:src/display.c **** 	  }
 6845              		.loc 1 2185 35 view .LVU2225
 6846 0882 921B     		suble	r2, r2, r6
2185:src/display.c **** 	  }
 6847              		.loc 1 2185 11 view .LVU2226
 6848 0884 0792     		strle	r2, [sp, #28]
 6849 0886 3146     		mov	r1, r6
 6850 0888 6BE4     		b	.L508
 6851              	.LVL754:
 6852              	.L536:
2224:src/display.c **** 	      odig++;
 6853              		.loc 1 2224 8 is_stmt 1 view .LVU2227
2224:src/display.c **** 	      odig++;
 6854              		.loc 1 2224 15 is_stmt 0 view .LVU2228
 6855 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6856 088e 8DF82410 		strb	r1, [sp, #36]
2225:src/display.c **** 	      dd--;
 6857              		.loc 1 2225 8 is_stmt 1 view .LVU2229
 6858              	.LVL755:
2226:src/display.c **** 	      exp--;
 6859              		.loc 1 2226 8 view .LVU2230
2226:src/display.c **** 	      exp--;
 6860              		.loc 1 2226 10 is_stmt 0 view .LVU2231
 6861 0892 013A     		subs	r2, r2, #1
2227:src/display.c **** 	    case -2:
 6862              		.loc 1 2227 8 is_stmt 1 view .LVU2232
2227:src/display.c **** 	    case -2:
 6863              		.loc 1 2227 11 is_stmt 0 view .LVU2233
 6864 0894 013E     		subs	r6, r6, #1
 6865              	.LVL756:
2227:src/display.c **** 	    case -2:
 6866              		.loc 1 2227 11 view .LVU2234
 6867 0896 0325     		movs	r5, #3
ARM GAS  /tmp/cchf4YwX.s 			page 221


2224:src/display.c **** 	      odig++;
 6868              		.loc 1 2224 19 view .LVU2235
 6869 0898 0DF15909 		add	r9, sp, #89
 6870              	.LVL757:
2224:src/display.c **** 	      odig++;
 6871              		.loc 1 2224 12 view .LVU2236
 6872 089c 0DF12501 		add	r1, sp, #37
 6873              	.LVL758:
 6874              	.L539:
2230:src/display.c **** 	      odig++;
 6875              		.loc 1 2230 8 is_stmt 1 view .LVU2237
2230:src/display.c **** 	      odig++;
 6876              		.loc 1 2230 15 is_stmt 0 view .LVU2238
 6877 08a0 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6878              	.LVL759:
2230:src/display.c **** 	      odig++;
 6879              		.loc 1 2230 15 view .LVU2239
 6880 08a4 01F8010B 		strb	r0, [r1], #1
 6881              	.LVL760:
2231:src/display.c **** 	      dd--;
 6882              		.loc 1 2231 8 is_stmt 1 view .LVU2240
2232:src/display.c **** 	      exp--;
 6883              		.loc 1 2232 8 view .LVU2241
2233:src/display.c **** 	    case 0:
 6884              		.loc 1 2233 8 view .LVU2242
2232:src/display.c **** 	      exp--;
 6885              		.loc 1 2232 10 is_stmt 0 view .LVU2243
 6886 08a8 013A     		subs	r2, r2, #1
 6887 08aa 0792     		str	r2, [sp, #28]
2233:src/display.c **** 	    case 0:
 6888              		.loc 1 2233 11 view .LVU2244
 6889 08ac 013E     		subs	r6, r6, #1
 6890              	.LVL761:
 6891              	.L535:
2235:src/display.c **** 	    };
 6892              		.loc 1 2235 8 is_stmt 1 view .LVU2245
2236:src/display.c **** 	    *obp++ = *p++;
 6893              		.loc 1 2236 7 view .LVU2246
2237:src/display.c **** 	    odig++;
 6894              		.loc 1 2237 6 view .LVU2247
2237:src/display.c **** 	    odig++;
 6895              		.loc 1 2237 17 is_stmt 0 view .LVU2248
 6896 08ae 4A46     		mov	r2, r9
 6897              	.LVL762:
2237:src/display.c **** 	    odig++;
 6898              		.loc 1 2237 13 view .LVU2249
 6899 08b0 8846     		mov	r8, r1
 6900 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6901              	.LVL763:
2237:src/display.c **** 	    odig++;
 6902              		.loc 1 2237 13 view .LVU2250
 6903 08b6 08F8020B 		strb	r0, [r8], #2
2238:src/display.c **** 	    *obp++ = '.';
 6904              		.loc 1 2238 6 is_stmt 1 view .LVU2251
2239:src/display.c **** 	    for (i=1; i<count; i++) {
 6905              		.loc 1 2239 6 view .LVU2252
 6906              	.LVL764:
ARM GAS  /tmp/cchf4YwX.s 			page 222


2240:src/display.c **** 	      *obp++ = *p++;
 6907              		.loc 1 2240 6 is_stmt 0 view .LVU2253
 6908 08ba 012B     		cmp	r3, #1
2239:src/display.c **** 	    for (i=1; i<count; i++) {
 6909              		.loc 1 2239 13 view .LVU2254
 6910 08bc 4FF02E00 		mov	r0, #46
 6911 08c0 4870     		strb	r0, [r1, #1]
2240:src/display.c **** 	      *obp++ = *p++;
 6912              		.loc 1 2240 6 is_stmt 1 view .LVU2255
 6913              	.LVL765:
2240:src/display.c **** 	      *obp++ = *p++;
 6914              		.loc 1 2240 16 view .LVU2256
2240:src/display.c **** 	      *obp++ = *p++;
 6915              		.loc 1 2240 6 is_stmt 0 view .LVU2257
 6916 08c2 34DD     		ble	.L608
2240:src/display.c **** 	      *obp++ = *p++;
 6917              		.loc 1 2240 6 view .LVU2258
 6918 08c4 0131     		adds	r1, r1, #1
 6919 08c6 9944     		add	r9, r9, r3
 6920              	.LVL766:
 6921              	.L541:
2241:src/display.c **** 	      odig++;
 6922              		.loc 1 2241 8 is_stmt 1 discriminator 3 view .LVU2259
2241:src/display.c **** 	      odig++;
 6923              		.loc 1 2241 15 is_stmt 0 discriminator 3 view .LVU2260
 6924 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6925              	.LVL767:
2241:src/display.c **** 	      odig++;
 6926              		.loc 1 2241 15 discriminator 3 view .LVU2261
 6927 08cc 01F8010F 		strb	r0, [r1, #1]!
2242:src/display.c **** 	    }
 6928              		.loc 1 2242 8 is_stmt 1 discriminator 3 view .LVU2262
2240:src/display.c **** 	      *obp++ = *p++;
 6929              		.loc 1 2240 25 discriminator 3 view .LVU2263
2240:src/display.c **** 	      *obp++ = *p++;
 6930              		.loc 1 2240 16 discriminator 3 view .LVU2264
2240:src/display.c **** 	      *obp++ = *p++;
 6931              		.loc 1 2240 6 is_stmt 0 discriminator 3 view .LVU2265
 6932 08d0 4A45     		cmp	r2, r9
 6933 08d2 F9D1     		bne	.L541
 6934 08d4 013B     		subs	r3, r3, #1
 6935              	.LVL768:
2240:src/display.c **** 	      *obp++ = *p++;
 6936              		.loc 1 2240 6 discriminator 3 view .LVU2266
 6937 08d6 9844     		add	r8, r8, r3
 6938 08d8 1D44     		add	r5, r5, r3
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6939              		.loc 1 2244 15 view .LVU2267
 6940 08da 4FF0010A 		mov	r10, #1
 6941 08de 09E6     		b	.L540
 6942              	.LVL769:
 6943              	.L538:
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6944              		.loc 1 2244 15 view .LVU2268
 6945 08e0 079A     		ldr	r2, [sp, #28]
2221:src/display.c **** 	    case -1:
 6946              		.loc 1 2221 24 view .LVU2269
ARM GAS  /tmp/cchf4YwX.s 			page 223


 6947 08e2 0225     		movs	r5, #2
2017:src/display.c **** 	int odig = 0;
 6948              		.loc 1 2017 15 view .LVU2270
 6949 08e4 5946     		mov	r1, fp
 6950 08e6 DBE7     		b	.L539
 6951              	.LVL770:
 6952              	.L578:
2366:src/display.c **** 	  }
 6953              		.loc 1 2366 8 is_stmt 1 view .LVU2271
 6954 08e8 2D21     		movs	r1, #45
 6955 08ea A7F10900 		sub	r0, r7, #9
 6956 08ee FFF7FEFF 		bl	set_dig
 6957              	.LVL771:
 6958 08f2 EAE4     		b	.L574
 6959              	.LVL772:
 6960              	.L710:
 6961              	.LBB468:
 6962              	.LBB466:
 6963              	.LBB464:
1933:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6964              		.loc 1 1933 4 view .LVU2272
1936:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6965              		.loc 1 1936 4 view .LVU2273
1936:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6966              		.loc 1 1936 14 is_stmt 0 view .LVU2274
 6967 08f4 0BF10307 		add	r7, fp, #3
 6968              	.LVL773:
1937:src/display.c **** 	  if (grouping) {
 6969              		.loc 1 1937 4 is_stmt 1 view .LVU2275
 6970 08f8 3A49     		ldr	r1, .L717+12
 6971 08fa 0D22     		movs	r2, #13
 6972 08fc 3846     		mov	r0, r7
 6973 08fe FFF7FEFF 		bl	xcopy
 6974              	.LVL774:
1938:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6975              		.loc 1 1938 4 view .LVU2276
1939:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6976              		.loc 1 1939 6 view .LVU2277
 6977 0902 1322     		movs	r2, #19
 6978 0904 0BEB0201 		add	r1, fp, r2
 6979 0908 0BF11400 		add	r0, fp, #20
 6980 090c FFF7FEFF 		bl	xcopy
 6981              	.LVL775:
1940:src/display.c **** 	    x += 3 + 13 + 7;
 6982              		.loc 1 1940 6 view .LVU2278
1941:src/display.c **** 	  }
 6983              		.loc 1 1941 8 is_stmt 0 view .LVU2279
 6984 0910 0BF11705 		add	r5, fp, #23
 6985              	.LVL776:
1940:src/display.c **** 	    x += 3 + 13 + 7;
 6986              		.loc 1 1940 24 view .LVU2280
 6987 0914 8BF81360 		strb	r6, [fp, #19]
1941:src/display.c **** 	  }
 6988              		.loc 1 1941 6 is_stmt 1 view .LVU2281
 6989              	.LVL777:
1954:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6990              		.loc 1 1954 4 view .LVU2282
ARM GAS  /tmp/cchf4YwX.s 			page 224


1955:src/display.c **** 	}
 6991              		.loc 1 1955 4 view .LVU2283
1955:src/display.c **** 	}
 6992              		.loc 1 1955 6 is_stmt 0 view .LVU2284
 6993 0918 1B24     		movs	r4, #27
 6994              	.LVL778:
1955:src/display.c **** 	}
 6995              		.loc 1 1955 6 view .LVU2285
 6996              	.LBE464:
 6997 091a 4EE7     		b	.L483
 6998              	.LVL779:
 6999              	.L706:
1955:src/display.c **** 	}
 7000              		.loc 1 1955 6 view .LVU2286
 7001              	.LBE466:
 7002              	.LBE468:
2054:src/display.c **** 	      return;
 7003              		.loc 1 2054 8 is_stmt 1 view .LVU2287
 7004 091c 3846     		mov	r0, r7
 7005 091e FFF7FEFF 		bl	set_x_hms
 7006              	.LVL780:
2055:src/display.c **** 	    }
 7007              		.loc 1 2055 8 view .LVU2288
 7008 0922 F5E4     		b	.L464
 7009              	.LVL781:
 7010              	.L606:
2216:src/display.c **** 	  if (count != *display_digits)
 7011              		.loc 1 2216 4 is_stmt 0 view .LVU2289
 7012 0924 029B     		ldr	r3, [sp, #8]
 7013 0926 71E4     		b	.L531
 7014              	.LVL782:
 7015              	.L607:
2221:src/display.c **** 	    case -1:
 7016              		.loc 1 2221 24 view .LVU2290
 7017 0928 0125     		movs	r5, #1
 7018 092a 5946     		mov	r1, fp
 7019 092c BFE7     		b	.L535
 7020              	.LVL783:
 7021              	.L608:
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7022              		.loc 1 2244 15 view .LVU2291
 7023 092e 4FF0010A 		mov	r10, #1
 7024 0932 DFE5     		b	.L540
 7025              	.LVL784:
 7026              	.L582:
 7027              	.LBB469:
 7028              	.LBB448:
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7029              		.loc 1 2244 15 view .LVU2292
 7030 0934 3846     		mov	r0, r7
 7031 0936 FFF7FEFF 		bl	set_separator.part.0
 7032              	.LVL785:
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7033              		.loc 1 2244 15 view .LVU2293
 7034 093a 0446     		mov	r4, r0
 7035              	.LVL786:
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
ARM GAS  /tmp/cchf4YwX.s 			page 225


 7036              		.loc 1 2244 15 view .LVU2294
 7037 093c F7E5     		b	.L580
 7038              	.LVL787:
 7039              	.L514:
2244:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7040              		.loc 1 2244 15 view .LVU2295
 7041              	.LBE448:
 7042              	.LBE469:
2194:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7043              		.loc 1 2194 4 is_stmt 1 view .LVU2296
2194:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7044              		.loc 1 2194 7 is_stmt 0 view .LVU2297
 7045 093e 4B45     		cmp	r3, r9
 7046 0940 7FF429AC 		bne	.L591
 7047 0944 3EE5     		b	.L592
 7048              	.LVL788:
 7049              	.L480:
 7050              	.LBB470:
 7051              	.LBB467:
1979:src/display.c **** 	    x[10] = '\0';
 7052              		.loc 1 1979 6 is_stmt 1 view .LVU2298
1980:src/display.c **** 	  }
 7053              		.loc 1 1980 6 view .LVU2299
1979:src/display.c **** 	    x[10] = '\0';
 7054              		.loc 1 1979 11 is_stmt 0 view .LVU2300
 7055 0946 ABF81240 		strh	r4, [fp, #18]	@ movhi
 7056 094a 26E7     		b	.L482
 7057              	.LVL789:
 7058              	.L709:
 7059              	.LBB465:
1904:src/display.c **** 
 7060              		.loc 1 1904 4 is_stmt 1 view .LVU2301
1906:src/display.c **** 	  xcopy(x, small_minus, 4);
 7061              		.loc 1 1906 4 view .LVU2302
 7062 094c 2222     		movs	r2, #34
 7063 094e 0DF12501 		add	r1, sp, #37
 7064 0952 0AA8     		add	r0, sp, #40
 7065              	.LVL790:
1906:src/display.c **** 	  xcopy(x, small_minus, 4);
 7066              		.loc 1 1906 4 is_stmt 0 view .LVU2303
 7067 0954 FFF7FEFF 		bl	xcopy
 7068              	.LVL791:
1907:src/display.c **** 	  x += 4;
 7069              		.loc 1 1907 4 is_stmt 1 view .LVU2304
 7070 0958 5846     		mov	r0, fp
 7071 095a 2349     		ldr	r1, .L717+16
 7072 095c 0422     		movs	r2, #4
 7073 095e FFF7FEFF 		bl	xcopy
 7074              	.LVL792:
1908:src/display.c **** 	  negative = 4;
 7075              		.loc 1 1908 4 view .LVU2305
1909:src/display.c **** #else
 7076              		.loc 1 1909 4 view .LVU2306
1908:src/display.c **** 	  negative = 4;
 7077              		.loc 1 1908 6 is_stmt 0 view .LVU2307
 7078 0962 0DF1280B 		add	fp, sp, #40
 7079              	.LVL793:
ARM GAS  /tmp/cchf4YwX.s 			page 226


1909:src/display.c **** #else
 7080              		.loc 1 1909 13 view .LVU2308
 7081 0966 0427     		movs	r7, #4
 7082              	.LVL794:
1909:src/display.c **** #else
 7083              		.loc 1 1909 13 view .LVU2309
 7084              	.LBE465:
 7085 0968 D1E6     		b	.L476
 7086              	.LVL795:
 7087              	.L542:
1909:src/display.c **** #else
 7088              		.loc 1 1909 13 view .LVU2310
 7089              	.LBE467:
 7090              	.LBE470:
2260:src/display.c **** 	    odig++;
 7091              		.loc 1 2260 6 is_stmt 1 view .LVU2311
2261:src/display.c **** 	    *obp++ = '.';
 7092              		.loc 1 2261 6 view .LVU2312
2262:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7093              		.loc 1 2262 6 view .LVU2313
2260:src/display.c **** 	    odig++;
 7094              		.loc 1 2260 13 is_stmt 0 view .LVU2314
 7095 096a 42F63062 		movw	r2, #11824
 7096 096e ADF82420 		strh	r2, [sp, #36]	@ movhi
2263:src/display.c **** 	      *obp++ = '0';
 7097              		.loc 1 2263 6 is_stmt 1 view .LVU2315
 7098              	.LVL796:
2263:src/display.c **** 	      *obp++ = '0';
 7099              		.loc 1 2263 20 view .LVU2316
2263:src/display.c **** 	      *obp++ = '0';
 7100              		.loc 1 2263 6 is_stmt 0 view .LVU2317
 7101 0972 721C     		adds	r2, r6, #1
 7102              	.LVL797:
2263:src/display.c **** 	      *obp++ = '0';
 7103              		.loc 1 2263 6 view .LVU2318
 7104 0974 2AD0     		beq	.L609
 7105 0976 C6F10101 		rsb	r1, r6, #1
2262:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7106              		.loc 1 2262 10 view .LVU2319
 7107 097a 0DF12600 		add	r0, sp, #38
 7108              	.LVL798:
2262:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7109              		.loc 1 2262 10 view .LVU2320
 7110 097e 5944     		add	r1, r1, fp
 7111 0980 0246     		mov	r2, r0
 7112              	.LVL799:
2264:src/display.c **** 	      odig++;
 7113              		.loc 1 2264 15 view .LVU2321
 7114 0982 3025     		movs	r5, #48
 7115              	.LVL800:
 7116              	.L549:
2264:src/display.c **** 	      odig++;
 7117              		.loc 1 2264 8 is_stmt 1 discriminator 3 view .LVU2322
2264:src/display.c **** 	      odig++;
 7118              		.loc 1 2264 15 is_stmt 0 discriminator 3 view .LVU2323
 7119 0984 02F8015B 		strb	r5, [r2], #1
 7120              	.LVL801:
ARM GAS  /tmp/cchf4YwX.s 			page 227


2265:src/display.c **** 	    }
 7121              		.loc 1 2265 8 is_stmt 1 discriminator 3 view .LVU2324
2263:src/display.c **** 	      *obp++ = '0';
 7122              		.loc 1 2263 25 discriminator 3 view .LVU2325
2263:src/display.c **** 	      *obp++ = '0';
 7123              		.loc 1 2263 20 discriminator 3 view .LVU2326
2263:src/display.c **** 	      *obp++ = '0';
 7124              		.loc 1 2263 6 is_stmt 0 discriminator 3 view .LVU2327
 7125 0988 8A42     		cmp	r2, r1
 7126 098a FBD1     		bne	.L549
 7127 098c 6FEA0608 		mvn	r8, r6
 7128 0990 8044     		add	r8, r8, r0
 7129 0992 7542     		rsbs	r5, r6, #0
 7130              	.LVL802:
 7131              	.L548:
2267:src/display.c **** 	      *obp++ = *p++;
 7132              		.loc 1 2267 16 is_stmt 1 view .LVU2328
2267:src/display.c **** 	      *obp++ = *p++;
 7133              		.loc 1 2267 6 is_stmt 0 view .LVU2329
 7134 0994 002B     		cmp	r3, #0
 7135 0996 7FF7ADAD 		ble	.L540
 7136 099a 581E     		subs	r0, r3, #1
 7137 099c 4044     		add	r0, r0, r8
 7138 099e 08F1FF32 		add	r2, r8, #-1
 7139              	.LVL803:
 7140              	.L550:
2268:src/display.c **** 	      odig++;
 7141              		.loc 1 2268 8 is_stmt 1 discriminator 3 view .LVU2330
2268:src/display.c **** 	      odig++;
 7142              		.loc 1 2268 15 is_stmt 0 discriminator 3 view .LVU2331
 7143 09a2 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 7144              	.LVL804:
2268:src/display.c **** 	      odig++;
 7145              		.loc 1 2268 15 discriminator 3 view .LVU2332
 7146 09a6 02F8011F 		strb	r1, [r2, #1]!
2269:src/display.c **** 	    }
 7147              		.loc 1 2269 8 is_stmt 1 discriminator 3 view .LVU2333
2267:src/display.c **** 	      *obp++ = *p++;
 7148              		.loc 1 2267 25 discriminator 3 view .LVU2334
 7149              	.LVL805:
2267:src/display.c **** 	      *obp++ = *p++;
 7150              		.loc 1 2267 16 discriminator 3 view .LVU2335
2267:src/display.c **** 	      *obp++ = *p++;
 7151              		.loc 1 2267 6 is_stmt 0 discriminator 3 view .LVU2336
 7152 09aa 9042     		cmp	r0, r2
 7153 09ac F9D1     		bne	.L550
 7154              	.LVL806:
2267:src/display.c **** 	      *obp++ = *p++;
 7155              		.loc 1 2267 6 discriminator 3 view .LVU2337
 7156 09ae 9844     		add	r8, r8, r3
 7157              	.LVL807:
2267:src/display.c **** 	      *obp++ = *p++;
 7158              		.loc 1 2267 6 discriminator 3 view .LVU2338
 7159 09b0 1D44     		add	r5, r5, r3
 7160 09b2 9FE5     		b	.L540
 7161              	.LVL808:
 7162              	.L708:
ARM GAS  /tmp/cchf4YwX.s 			page 228


2210:src/display.c **** 
 7163              		.loc 1 2210 2 is_stmt 1 view .LVU2339
 7164 09b4 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2210:src/display.c **** 
 7165              		.loc 1 2210 9 is_stmt 0 view .LVU2340
 7166 09b8 09EB0E03 		add	r3, r9, lr
 7167              	.LVL809:
2210:src/display.c **** 
 7168              		.loc 1 2210 45 is_stmt 1 view .LVU2341
2210:src/display.c **** 
 7169              		.loc 1 2210 2 is_stmt 0 view .LVU2342
 7170 09bc 51B1     		cbz	r1, .L712
2199:src/display.c **** 	      extra_digits = 0;
 7171              		.loc 1 2199 37 view .LVU2343
 7172 09be 0225     		movs	r5, #2
 7173 09c0 00E4     		b	.L590
 7174              	.LVL810:
 7175              	.L711:
2199:src/display.c **** 	      extra_digits = 0;
 7176              		.loc 1 2199 37 view .LVU2344
 7177 09c2 079B     		ldr	r3, [sp, #28]
 7178              	.LVL811:
2290:src/display.c **** 	    *obp++ = '.';
 7179              		.loc 1 2290 10 view .LVU2345
 7180 09c4 0125     		movs	r5, #1
2291:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7181              		.loc 1 2291 10 view .LVU2346
 7182 09c6 0DF12608 		add	r8, sp, #38
 7183              	.LVL812:
2291:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7184              		.loc 1 2291 10 view .LVU2347
 7185 09ca 27E7     		b	.L558
 7186              	.LVL813:
 7187              	.L609:
2261:src/display.c **** 	    *obp++ = '.';
 7188              		.loc 1 2261 10 view .LVU2348
 7189 09cc 0125     		movs	r5, #1
2262:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7190              		.loc 1 2262 10 view .LVU2349
 7191 09ce 0DF12608 		add	r8, sp, #38
 7192              	.LVL814:
2262:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7193              		.loc 1 2262 10 view .LVU2350
 7194 09d2 DFE7     		b	.L548
 7195              	.LVL815:
 7196              	.L712:
2017:src/display.c **** 	int odig = 0;
 7197              		.loc 1 2017 15 view .LVU2351
 7198 09d4 5946     		mov	r1, fp
 7199 09d6 6EE5     		b	.L530
 7200              	.L718:
 7201              		.align	2
 7202              	.L717:
 7203 09d8 00000000 		.word	.LANCHOR1
 7204 09dc D34D6210 		.word	274877907
 7205 09e0 18FCFFFF 		.word	-1000
 7206 09e4 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/cchf4YwX.s 			page 229


 7207 09e8 00000000 		.word	.LANCHOR13
 7208              		.cfi_endproc
 7209              	.LFE27:
 7211              		.section	.text.set_x,"ax",%progbits
 7212              		.align	1
 7213              		.p2align 2,,3
 7214              		.syntax unified
 7215              		.thumb
 7216              		.thumb_func
 7217              		.fpu fpv4-sp-d16
 7219              	set_x:
 7220              	.LVL816:
 7221              	.LFB26:
2005:src/display.c **** 	decNumber z;
 7222              		.loc 1 2005 66 is_stmt 1 view -0
 7223              		.cfi_startproc
 7224              		@ args = 0, pretend = 0, frame = 40
 7225              		@ frame_needed = 0, uses_anonymous_args = 0
2006:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7226              		.loc 1 2006 2 view .LVU2353
2007:src/display.c **** 
 7227              		.loc 1 2007 2 view .LVU2354
2005:src/display.c **** 	decNumber z;
 7228              		.loc 1 2005 66 is_stmt 0 view .LVU2355
 7229 0000 30B5     		push	{r4, r5, lr}
 7230              		.cfi_def_cfa_offset 12
 7231              		.cfi_offset 4, -12
 7232              		.cfi_offset 5, -8
 7233              		.cfi_offset 14, -4
 7234 0002 8BB0     		sub	sp, sp, #44
 7235              		.cfi_def_cfa_offset 56
2007:src/display.c **** 
 7236              		.loc 1 2007 6 view .LVU2356
 7237 0004 0C23     		movs	r3, #12
2010:src/display.c **** 	else
 7238              		.loc 1 2010 4 view .LVU2357
 7239 0006 01AD     		add	r5, sp, #4
2005:src/display.c **** 	decNumber z;
 7240              		.loc 1 2005 66 view .LVU2358
 7241 0008 0C46     		mov	r4, r1
2007:src/display.c **** 
 7242              		.loc 1 2007 6 view .LVU2359
 7243 000a 0093     		str	r3, [sp]
2009:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7244              		.loc 1 2009 2 is_stmt 1 view .LVU2360
2010:src/display.c **** 	else
 7245              		.loc 1 2010 4 is_stmt 0 view .LVU2361
 7246 000c 2946     		mov	r1, r5
 7247              	.LVL817:
2009:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7248              		.loc 1 2009 5 view .LVU2362
 7249 000e 42B1     		cbz	r2, .L720
2010:src/display.c **** 	else
 7250              		.loc 1 2010 4 is_stmt 1 view .LVU2363
 7251 0010 FFF7FEFF 		bl	decimal128ToNumber
 7252              	.LVL818:
2013:src/display.c ****       }
ARM GAS  /tmp/cchf4YwX.s 			page 230


 7253              		.loc 1 2013 2 view .LVU2364
 7254 0014 2146     		mov	r1, r4
 7255 0016 2846     		mov	r0, r5
 7256 0018 6A46     		mov	r2, sp
 7257 001a FFF7FEFF 		bl	set_x_dn
 7258              	.LVL819:
2014:src/display.c **** 
 7259              		.loc 1 2014 7 is_stmt 0 view .LVU2365
 7260 001e 0BB0     		add	sp, sp, #44
 7261              		.cfi_remember_state
 7262              		.cfi_def_cfa_offset 12
 7263              		@ sp needed
 7264 0020 30BD     		pop	{r4, r5, pc}
 7265              	.LVL820:
 7266              	.L720:
 7267              		.cfi_restore_state
2012:src/display.c **** 	set_x_dn(&z, res, &digits);
 7268              		.loc 1 2012 4 is_stmt 1 view .LVU2366
 7269 0022 FFF7FEFF 		bl	decimal64ToNumber
 7270              	.LVL821:
2013:src/display.c ****       }
 7271              		.loc 1 2013 2 view .LVU2367
 7272 0026 2146     		mov	r1, r4
 7273 0028 2846     		mov	r0, r5
 7274 002a 6A46     		mov	r2, sp
 7275 002c FFF7FEFF 		bl	set_x_dn
 7276              	.LVL822:
2014:src/display.c **** 
 7277              		.loc 1 2014 7 is_stmt 0 view .LVU2368
 7278 0030 0BB0     		add	sp, sp, #44
 7279              		.cfi_def_cfa_offset 12
 7280              		@ sp needed
 7281 0032 30BD     		pop	{r4, r5, pc}
2014:src/display.c **** 
 7282              		.loc 1 2014 7 view .LVU2369
 7283              		.cfi_endproc
 7284              	.LFE26:
 7286              		.section	.text.format_reg,"ax",%progbits
 7287              		.align	1
 7288              		.p2align 2,,3
 7289              		.global	format_reg
 7290              		.syntax unified
 7291              		.thumb
 7292              		.thumb_func
 7293              		.fpu fpv4-sp-d16
 7295              	format_reg:
 7296              	.LVL823:
 7297              	.LFB28:
2421:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7298              		.loc 1 2421 45 is_stmt 1 view -0
 7299              		.cfi_startproc
 7300              		@ args = 0, pretend = 0, frame = 40
 7301              		@ frame_needed = 0, uses_anonymous_args = 0
2422:src/display.c **** 
 7302              		.loc 1 2422 2 view .LVU2371
2421:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7303              		.loc 1 2421 45 is_stmt 0 view .LVU2372
ARM GAS  /tmp/cchf4YwX.s 			page 231


 7304 0000 30B5     		push	{r4, r5, lr}
 7305              		.cfi_def_cfa_offset 12
 7306              		.cfi_offset 4, -12
 7307              		.cfi_offset 5, -8
 7308              		.cfi_offset 14, -4
 7309 0002 8BB0     		sub	sp, sp, #44
 7310              		.cfi_def_cfa_offset 56
2421:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7311              		.loc 1 2421 45 view .LVU2373
 7312 0004 0C46     		mov	r4, r1
 7313 0006 0546     		mov	r5, r0
2422:src/display.c **** 
 7314              		.loc 1 2422 28 view .LVU2374
 7315 0008 FFF7FEFF 		bl	get_reg_n
 7316              	.LVL824:
2424:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7317              		.loc 1 2424 6 view .LVU2375
 7318 000c 154B     		ldr	r3, .L730
 7319 000e 1B68     		ldr	r3, [r3]
 7320 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7321              	.LVL825:
2424:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7322              		.loc 1 2424 2 is_stmt 1 view .LVU2376
2424:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7323              		.loc 1 2424 5 is_stmt 0 view .LVU2377
 7324 0014 D207     		lsls	r2, r2, #31
 7325 0016 1DD4     		bmi	.L728
2427:src/display.c **** 	  decNumber x;
 7326              		.loc 1 2427 7 is_stmt 1 view .LVU2378
2427:src/display.c **** 	  decNumber x;
 7327              		.loc 1 2427 10 is_stmt 0 view .LVU2379
 7328 0018 44B1     		cbz	r4, .L729
 7329              	.L726:
2438:src/display.c ****       }
 7330              		.loc 1 2438 4 is_stmt 1 view .LVU2380
2438:src/display.c ****       }
 7331              		.loc 1 2438 24 is_stmt 0 view .LVU2381
 7332 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2438:src/display.c ****       }
 7333              		.loc 1 2438 4 view .LVU2382
 7334 001e 2146     		mov	r1, r4
 7335 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7336 0024 FFF7FEFF 		bl	set_x
 7337              	.LVL826:
2439:src/display.c **** 
 7338              		.loc 1 2439 7 view .LVU2383
 7339 0028 0BB0     		add	sp, sp, #44
 7340              		.cfi_remember_state
 7341              		.cfi_def_cfa_offset 12
 7342              		@ sp needed
 7343 002a 30BD     		pop	{r4, r5, pc}
 7344              	.LVL827:
 7345              	.L729:
 7346              		.cfi_restore_state
2427:src/display.c **** 	  decNumber x;
 7347              		.loc 1 2427 32 discriminator 1 view .LVU2384
 7348 002c 0E4A     		ldr	r2, .L730+4
ARM GAS  /tmp/cchf4YwX.s 			page 232


2427:src/display.c **** 	  decNumber x;
 7349              		.loc 1 2427 23 discriminator 1 view .LVU2385
 7350 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7351 0030 012A     		cmp	r2, #1
 7352 0032 F2D9     		bls	.L726
 7353              	.LVL828:
 7354              	.LBB474:
 7355              	.LBI474:
2421:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7356              		.loc 1 2421 12 is_stmt 1 view .LVU2386
 7357              	.LBB475:
 7358              	.LBB476:
2428:src/display.c **** 	  int s;
 7359              		.loc 1 2428 4 view .LVU2387
2429:src/display.c **** 	  unsigned long long int v;
 7360              		.loc 1 2429 4 view .LVU2388
2430:src/display.c **** 
 7361              		.loc 1 2430 4 view .LVU2389
2432:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7362              		.loc 1 2432 4 view .LVU2390
 7363 0034 2946     		mov	r1, r5
 7364 0036 01A8     		add	r0, sp, #4
 7365              	.LVL829:
2432:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7366              		.loc 1 2432 4 is_stmt 0 view .LVU2391
 7367 0038 FFF7FEFF 		bl	getRegister
 7368              	.LVL830:
2433:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7369              		.loc 1 2433 4 is_stmt 1 view .LVU2392
2433:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7370              		.loc 1 2433 8 is_stmt 0 view .LVU2393
 7371 003c 01A8     		add	r0, sp, #4
 7372 003e 6946     		mov	r1, sp
 7373 0040 FFF7FEFF 		bl	dn_to_ull
 7374              	.LVL831:
2434:src/display.c **** 	}
 7375              		.loc 1 2434 4 is_stmt 1 view .LVU2394
 7376 0044 009A     		ldr	r2, [sp]
 7377 0046 FFF7FEFF 		bl	build_value
 7378              	.LVL832:
2434:src/display.c **** 	}
 7379              		.loc 1 2434 4 is_stmt 0 view .LVU2395
 7380 004a 2246     		mov	r2, r4
 7381 004c FFF7FEFF 		bl	set_int_x
 7382              	.LVL833:
 7383              	.LBE476:
 7384              	.LBE475:
 7385              	.LBE474:
2439:src/display.c **** 
 7386              		.loc 1 2439 7 view .LVU2396
 7387 0050 0BB0     		add	sp, sp, #44
 7388              		.cfi_remember_state
 7389              		.cfi_def_cfa_offset 12
 7390              		@ sp needed
 7391 0052 30BD     		pop	{r4, r5, pc}
 7392              	.LVL834:
 7393              	.L728:
ARM GAS  /tmp/cchf4YwX.s 			page 233


 7394              		.cfi_restore_state
2425:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7395              		.loc 1 2425 4 is_stmt 1 view .LVU2397
 7396 0054 2846     		mov	r0, r5
 7397              	.LVL835:
2425:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7398              		.loc 1 2425 4 is_stmt 0 view .LVU2398
 7399 0056 FFF7FEFF 		bl	get_reg_n_int
 7400              	.LVL836:
 7401 005a 2246     		mov	r2, r4
 7402 005c FFF7FEFF 		bl	set_int_x
 7403              	.LVL837:
2439:src/display.c **** 
 7404              		.loc 1 2439 7 view .LVU2399
 7405 0060 0BB0     		add	sp, sp, #44
 7406              		.cfi_def_cfa_offset 12
 7407              		@ sp needed
 7408 0062 30BD     		pop	{r4, r5, pc}
 7409              	.LVL838:
 7410              	.L731:
2439:src/display.c **** 
 7411              		.loc 1 2439 7 view .LVU2400
 7412              		.align	2
 7413              	.L730:
 7414 0064 00000000 		.word	main_ram
 7415 0068 00000000 		.word	StateWhileOn
 7416              		.cfi_endproc
 7417              	.LFE28:
 7419              		.section	.text.set_status_right,"ax",%progbits
 7420              		.align	1
 7421              		.p2align 2,,3
 7422              		.syntax unified
 7423              		.thumb
 7424              		.thumb_func
 7425              		.fpu fpv4-sp-d16
 7427              	set_status_right:
 7428              	.LVL839:
 7429              	.LFB47:
3633:src/display.c ****       static void set_status_top(const char *str) {
3634:src/display.c **** 	if (no_status_top) return;
3635:src/display.c **** 	if (State2.runmode) {
3636:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3637:src/display.c **** 	}
3638:src/display.c **** 	else {
3639:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3640:src/display.c **** 	}
3641:src/display.c ****       }
3642:src/display.c **** #ifdef TOP_ROW
3643:src/display.c ****       static void set_status_top_always(const char *str) {
3644:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3645:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3646:src/display.c ****       }
3647:src/display.c **** #endif
3648:src/display.c **** 
3649:src/display.c ****       /*
3650:src/display.c ****        *  Display messages (global function)
3651:src/display.c ****        */
ARM GAS  /tmp/cchf4YwX.s 			page 234


3652:src/display.c ****       extern void message(const char *str1, const char *str2)
3653:src/display.c ****       {
3654:src/display.c **** 	State2.disp_freeze = 0;
3655:src/display.c **** 	State2.disp_small = 0;
3656:src/display.c **** 	WasDataEntry = 0;
3657:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3658:src/display.c **** 	  // Complete redraw necessary
3659:src/display.c **** 	  DispMsg = str1;
3660:src/display.c **** 	  display();
3661:src/display.c **** 	}
3662:src/display.c **** 	else {
3663:src/display.c **** 	  if ( str2 != NULL ) {
3664:src/display.c **** 	    reset_disp();
3665:src/display.c **** 	    ShowRPN = 0;
3666:src/display.c **** 	    set_annunciators();
3667:src/display.c **** 	    set_digits_string( str2, 0 );
3668:src/display.c **** 	  }
3669:src/display.c **** 	  set_status( str1 );
3670:src/display.c **** 	  finish_display();// message
3671:src/display.c **** 	}
3672:src/display.c ****       }
3673:src/display.c **** 
3674:src/display.c **** #ifdef INCLUDE_STOPWATCH
3675:src/display.c **** 
3676:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3677:src/display.c **** 	int j = SEGS_EXP_BASE;
3678:src/display.c **** 	for (; *exponent!=0; exponent++) {
3679:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3680:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3681:src/display.c **** 	}
3682:src/display.c ****       }
3683:src/display.c **** 
3684:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3685:src/display.c ****       {
3686:src/display.c **** #ifndef REALBUILD
3687:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3688:src/display.c **** #endif
3689:src/display.c **** 	reset_disp();
3690:src/display.c **** 	set_dot(DEG);
3691:src/display.c **** 	set_digits_string( str2, 0 );
3692:src/display.c **** 	State2.disp_small = force_small;
3693:src/display.c **** 	if( exponent!=NULL ) {
3694:src/display.c **** 	  stopwatch_exponent(exponent);
3695:src/display.c **** 	}
3696:src/display.c **** 	set_status( str1 );
3697:src/display.c **** 	finish_display();
3698:src/display.c ****       }
3699:src/display.c **** 
3700:src/display.c **** 
3701:src/display.c **** #endif // INCLUDE_STOPWATCH
3702:src/display.c **** 
3703:src/display.c ****       /* Display the right hand characters from the given string.
3704:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3705:src/display.c ****        * and reduce font size if required.
3706:src/display.c ****        */
3707:src/display.c ****       static void set_status_right(const char *str) {
 7430              		.loc 1 3707 53 is_stmt 1 view -0
ARM GAS  /tmp/cchf4YwX.s 			page 235


 7431              		.cfi_startproc
 7432              		@ args = 0, pretend = 0, frame = 0
 7433              		@ frame_needed = 0, uses_anonymous_args = 0
3708:src/display.c **** 	unsigned int x = 0;
 7434              		.loc 1 3708 2 view .LVU2402
3709:src/display.c **** 	const char *p;
 7435              		.loc 1 3709 2 view .LVU2403
3710:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7436              		.loc 1 3710 2 view .LVU2404
3707:src/display.c **** 	unsigned int x = 0;
 7437              		.loc 1 3707 53 is_stmt 0 view .LVU2405
 7438 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7439              		.cfi_def_cfa_offset 28
 7440              		.cfi_offset 4, -28
 7441              		.cfi_offset 5, -24
 7442              		.cfi_offset 6, -20
 7443              		.cfi_offset 7, -16
 7444              		.cfi_offset 8, -12
 7445              		.cfi_offset 9, -8
 7446              		.cfi_offset 14, -4
 7447              		.loc 1 3710 23 view .LVU2406
 7448 0004 194B     		ldr	r3, .L747
 7449              		.loc 1 3710 41 view .LVU2407
 7450 0006 93F91630 		ldrsb	r3, [r3, #22]
 7451 000a 002B     		cmp	r3, #0
3707:src/display.c **** 	unsigned int x = 0;
 7452              		.loc 1 3707 53 view .LVU2408
 7453 000c 83B0     		sub	sp, sp, #12
 7454              		.cfi_def_cfa_offset 40
3707:src/display.c **** 	unsigned int x = 0;
 7455              		.loc 1 3707 53 view .LVU2409
 7456 000e 0646     		mov	r6, r0
 7457              		.loc 1 3710 41 view .LVU2410
 7458 0010 23DA     		bge	.L746
 7459              	.LVL840:
 7460              	.L733:
 7461              		.loc 1 3710 12 view .LVU2411
 7462 0012 4FF00108 		mov	r8, #1
3711:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7463              		.loc 1 3711 36 view .LVU2412
 7464 0016 4FF48077 		mov	r7, #256
 7465              	.L734:
 7466              	.LVL841:
3712:src/display.c **** 
3713:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7467              		.loc 1 3713 2 is_stmt 1 discriminator 4 view .LVU2413
 7468              		.loc 1 3713 14 discriminator 4 view .LVU2414
 7469              		.loc 1 3713 2 is_stmt 0 discriminator 4 view .LVU2415
 7470 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7471 001c 3446     		mov	r4, r6
 7472 001e 1BB1     		cbz	r3, .L735
 7473              	.LVL842:
 7474              	.L736:
 7475              		.loc 1 3713 30 is_stmt 1 discriminator 3 view .LVU2416
 7476              		.loc 1 3713 26 discriminator 3 view .LVU2417
 7477              		.loc 1 3713 14 discriminator 3 view .LVU2418
 7478              		.loc 1 3713 2 is_stmt 0 discriminator 3 view .LVU2419
ARM GAS  /tmp/cchf4YwX.s 			page 236


 7479 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7480              	.LVL843:
 7481              		.loc 1 3713 2 discriminator 3 view .LVU2420
 7482 0024 002B     		cmp	r3, #0
 7483 0026 FBD1     		bne	.L736
 7484              	.L735:
3708:src/display.c **** 	const char *p;
 7485              		.loc 1 3708 15 view .LVU2421
 7486 0028 0025     		movs	r5, #0
 7487 002a 06E0     		b	.L737
 7488              	.LVL844:
 7489              	.L738:
 7490              	.LBB477:
3714:src/display.c **** 	while (--p >= str) {
3715:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7491              		.loc 1 3715 27 view .LVU2422
 7492 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3716:src/display.c **** 
3717:src/display.c **** 	  x += charlengths(c);
 7493              		.loc 1 3717 9 view .LVU2423
 7494 002e 3844     		add	r0, r0, r7
 7495 0030 FFF7FEFF 		bl	charlengths
 7496              	.LVL845:
 7497              		.loc 1 3717 6 view .LVU2424
 7498 0034 0544     		add	r5, r5, r0
 7499              	.LVL846:
3718:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7500              		.loc 1 3718 4 is_stmt 1 view .LVU2425
 7501              		.loc 1 3718 7 is_stmt 0 view .LVU2426
 7502 0036 4B2D     		cmp	r5, #75
 7503 0038 03D8     		bhi	.L739
 7504              	.LVL847:
 7505              	.L737:
3715:src/display.c **** 
 7506              		.loc 1 3715 4 is_stmt 1 view .LVU2427
3715:src/display.c **** 
 7507              		.loc 1 3715 4 is_stmt 0 view .LVU2428
 7508              	.LBE477:
3714:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7509              		.loc 1 3714 8 is_stmt 1 view .LVU2429
 7510 003a A146     		mov	r9, r4
 7511 003c 013C     		subs	r4, r4, #1
 7512              	.LVL848:
 7513              	.LBB478:
3717:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7514              		.loc 1 3717 4 view .LVU2430
3717:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7515              		.loc 1 3717 4 is_stmt 0 view .LVU2431
 7516              	.LBE478:
3714:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7517              		.loc 1 3714 8 view .LVU2432
 7518 003e A642     		cmp	r6, r4
 7519 0040 F4D9     		bls	.L738
 7520              	.LVL849:
 7521              	.L739:
3719:src/display.c **** 	    break;
3720:src/display.c **** 	}
ARM GAS  /tmp/cchf4YwX.s 			page 237


3721:src/display.c **** 	set_status_sized(p+1, toolarge);
 7522              		.loc 1 3721 2 is_stmt 1 view .LVU2433
 7523              	.LBB479:
 7524              	.LBI479:
3472:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7525              		.loc 1 3472 19 view .LVU2434
 7526              	.LBB480:
3473:src/display.c ****       }
 7527              		.loc 1 3473 2 view .LVU2435
 7528 0042 40F24A23 		movw	r3, #586
 7529 0046 0093     		str	r3, [sp]
 7530 0048 4146     		mov	r1, r8
 7531 004a 4846     		mov	r0, r9
 7532 004c 8E23     		movs	r3, #142
 7533 004e 4A22     		movs	r2, #74
 7534 0050 FFF7FEFF 		bl	s_s_sized
 7535              	.LVL850:
3473:src/display.c ****       }
 7536              		.loc 1 3473 2 is_stmt 0 view .LVU2436
 7537              	.LBE480:
 7538              	.LBE479:
3722:src/display.c ****       }
 7539              		.loc 1 3722 7 view .LVU2437
 7540 0054 03B0     		add	sp, sp, #12
 7541              		.cfi_remember_state
 7542              		.cfi_def_cfa_offset 28
 7543              		@ sp needed
 7544 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7545              	.LVL851:
 7546              	.L746:
 7547              		.cfi_restore_state
 7548              	.LBB481:
 7549              	.LBI481:
3620:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7550              		.loc 1 3620 18 is_stmt 1 view .LVU2438
 7551              	.LBB482:
3621:src/display.c ****       }
 7552              		.loc 1 3621 2 view .LVU2439
3621:src/display.c ****       }
 7553              		.loc 1 3621 9 is_stmt 0 view .LVU2440
 7554 005a 0021     		movs	r1, #0
 7555 005c FFF7FEFF 		bl	pixel_length
 7556              	.LVL852:
3621:src/display.c ****       }
 7557              		.loc 1 3621 9 view .LVU2441
 7558              	.LBE482:
 7559              	.LBE481:
3710:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7560              		.loc 1 3710 41 view .LVU2442
 7561 0060 4B28     		cmp	r0, #75
 7562 0062 D6DC     		bgt	.L733
3710:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7563              		.loc 1 3710 12 view .LVU2443
 7564 0064 4FF00008 		mov	r8, #0
3711:src/display.c **** 
 7565              		.loc 1 3711 36 view .LVU2444
 7566 0068 4746     		mov	r7, r8
ARM GAS  /tmp/cchf4YwX.s 			page 238


 7567 006a D6E7     		b	.L734
 7568              	.L748:
 7569              		.align	2
 7570              	.L747:
 7571 006c 00000000 		.word	StateWhileOn
 7572              		.cfi_endproc
 7573              	.LFE47:
 7575              		.section	.text.set_status_top.part.0,"ax",%progbits
 7576              		.align	1
 7577              		.p2align 2,,3
 7578              		.syntax unified
 7579              		.thumb
 7580              		.thumb_func
 7581              		.fpu fpv4-sp-d16
 7583              	set_status_top.part.0:
 7584              	.LVL853:
 7585              	.LFB57:
3633:src/display.c **** 	if (no_status_top) return;
 7586              		.loc 1 3633 19 is_stmt 1 view -0
 7587              		.cfi_startproc
 7588              		@ args = 0, pretend = 0, frame = 0
 7589              		@ frame_needed = 0, uses_anonymous_args = 0
3635:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7590              		.loc 1 3635 2 view .LVU2446
3633:src/display.c **** 	if (no_status_top) return;
 7591              		.loc 1 3633 19 is_stmt 0 view .LVU2447
 7592 0000 10B5     		push	{r4, lr}
 7593              		.cfi_def_cfa_offset 8
 7594              		.cfi_offset 4, -8
 7595              		.cfi_offset 14, -4
3635:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7596              		.loc 1 3635 6 view .LVU2448
 7597 0002 184B     		ldr	r3, .L759
 7598 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3635:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7599              		.loc 1 3635 5 view .LVU2449
 7600 0006 13F04001 		ands	r1, r3, #64
3633:src/display.c **** 	if (no_status_top) return;
 7601              		.loc 1 3633 19 view .LVU2450
 7602 000a 82B0     		sub	sp, sp, #8
 7603              		.cfi_def_cfa_offset 16
3633:src/display.c **** 	if (no_status_top) return;
 7604              		.loc 1 3633 19 view .LVU2451
 7605 000c 0446     		mov	r4, r0
3635:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7606              		.loc 1 3635 5 view .LVU2452
 7607 000e 0DD0     		beq	.L750
3636:src/display.c **** 	}
 7608              		.loc 1 3636 4 is_stmt 1 view .LVU2453
 7609 0010 1A06     		lsls	r2, r3, #24
 7610 0012 18D5     		bpl	.L757
 7611 0014 0121     		movs	r1, #1
 7612              	.LVL854:
 7613              	.L751:
 7614              	.LBB483:
 7615              	.LBI483:
3475:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
ARM GAS  /tmp/cchf4YwX.s 			page 239


 7616              		.loc 1 3475 19 view .LVU2454
 7617              	.LBB484:
3476:src/display.c ****       }
 7618              		.loc 1 3476 2 view .LVU2455
 7619 0016 4FF45373 		mov	r3, #844
 7620 001a 0093     		str	r3, [sp]
 7621 001c 2046     		mov	r0, r4
 7622 001e 40F24A23 		movw	r3, #586
 7623 0022 2B22     		movs	r2, #43
 7624 0024 FFF7FEFF 		bl	s_s_sized
 7625              	.LVL855:
3476:src/display.c ****       }
 7626              		.loc 1 3476 2 is_stmt 0 view .LVU2456
 7627              	.LBE484:
 7628              	.LBE483:
3641:src/display.c **** #ifdef TOP_ROW
 7629              		.loc 1 3641 7 view .LVU2457
 7630 0028 02B0     		add	sp, sp, #8
 7631              		.cfi_remember_state
 7632              		.cfi_def_cfa_offset 8
 7633              		@ sp needed
 7634 002a 10BD     		pop	{r4, pc}
 7635              	.LVL856:
 7636              	.L750:
 7637              		.cfi_restore_state
3639:src/display.c **** 	}
 7638              		.loc 1 3639 4 is_stmt 1 view .LVU2458
 7639 002c 1B06     		lsls	r3, r3, #24
 7640 002e 12D5     		bpl	.L758
 7641 0030 0121     		movs	r1, #1
 7642              	.LVL857:
 7643              	.L753:
 7644              	.LBB485:
 7645              	.LBI485:
3472:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7646              		.loc 1 3472 19 view .LVU2459
 7647              	.LBB486:
3473:src/display.c ****       }
 7648              		.loc 1 3473 2 view .LVU2460
 7649 0032 40F24A23 		movw	r3, #586
 7650 0036 0093     		str	r3, [sp]
 7651 0038 2046     		mov	r0, r4
 7652 003a 8E23     		movs	r3, #142
 7653 003c 4A22     		movs	r2, #74
 7654 003e FFF7FEFF 		bl	s_s_sized
 7655              	.LVL858:
3473:src/display.c ****       }
 7656              		.loc 1 3473 2 is_stmt 0 view .LVU2461
 7657              	.LBE486:
 7658              	.LBE485:
3641:src/display.c **** #ifdef TOP_ROW
 7659              		.loc 1 3641 7 view .LVU2462
 7660 0042 02B0     		add	sp, sp, #8
 7661              		.cfi_remember_state
 7662              		.cfi_def_cfa_offset 8
 7663              		@ sp needed
 7664 0044 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cchf4YwX.s 			page 240


 7665              	.LVL859:
 7666              	.L757:
 7667              		.cfi_restore_state
 7668              	.LBB487:
 7669              	.LBI487:
3623:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7670              		.loc 1 3623 18 is_stmt 1 view .LVU2463
 7671              	.LBB488:
3624:src/display.c ****       }
 7672              		.loc 1 3624 2 view .LVU2464
3624:src/display.c ****       }
 7673              		.loc 1 3624 9 is_stmt 0 view .LVU2465
 7674 0046 0021     		movs	r1, #0
 7675 0048 FFF7FEFF 		bl	pixel_length
 7676              	.LVL860:
3624:src/display.c ****       }
 7677              		.loc 1 3624 9 view .LVU2466
 7678              	.LBE488:
 7679              	.LBE487:
3636:src/display.c **** 	}
 7680              		.loc 1 3636 4 view .LVU2467
 7681 004c 2C28     		cmp	r0, #44
 7682 004e D4BF     		ite	le
 7683 0050 0021     		movle	r1, #0
 7684 0052 0121     		movgt	r1, #1
 7685 0054 DFE7     		b	.L751
 7686              	.LVL861:
 7687              	.L758:
 7688              	.LBB489:
 7689              	.LBI489:
3620:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7690              		.loc 1 3620 18 is_stmt 1 view .LVU2468
 7691              	.LBB490:
3621:src/display.c ****       }
 7692              		.loc 1 3621 2 view .LVU2469
3621:src/display.c ****       }
 7693              		.loc 1 3621 9 is_stmt 0 view .LVU2470
 7694 0056 FFF7FEFF 		bl	pixel_length
 7695              	.LVL862:
3621:src/display.c ****       }
 7696              		.loc 1 3621 9 view .LVU2471
 7697              	.LBE490:
 7698              	.LBE489:
3639:src/display.c **** 	}
 7699              		.loc 1 3639 4 view .LVU2472
 7700 005a 4B28     		cmp	r0, #75
 7701 005c D4BF     		ite	le
 7702 005e 0021     		movle	r1, #0
 7703 0060 0121     		movgt	r1, #1
 7704 0062 E6E7     		b	.L753
 7705              	.L760:
 7706              		.align	2
 7707              	.L759:
 7708 0064 00000000 		.word	StateWhileOn
 7709              		.cfi_endproc
 7710              	.LFE57:
 7712              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cchf4YwX.s 			page 241


 7713              		.align	2
 7714              	.LC2:
 7715 0000 32630600 		.ascii	"2c\006\000"
 7716              		.align	2
 7717              	.LC3:
 7718 0004 07C63C00 		.ascii	"\007\306<\000"
 7719              		.align	2
 7720              	.LC4:
 7721 0008 07876900 		.ascii	"\007\207i\000"
 7722              		.align	2
 7723              	.LC5:
 7724 000c 07C67900 		.ascii	"\007\306y\000"
 7725              		.align	2
 7726              	.LC6:
 7727 0010 07950600 		.ascii	"\007\225\006\000"
 7728              		.align	2
 7729              	.LC7:
 7730 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7730      060600
 7731 001b 00       		.align	2
 7732              	.LC8:
 7733 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7733      060600
 7734 0023 00       		.align	2
 7735              	.LC9:
 7736 0024 07C74400 		.ascii	"\007\307D\000"
 7737              		.align	2
 7738              	.LC10:
 7739 0028 07872000 		.ascii	"\007\207 \000"
 7740              		.align	2
 7741              	.LC11:
 7742 002c 4C656E67 		.ascii	"Length:\000"
 7742      74683A00 
 7743              		.align	2
 7744              	.LC12:
 7745 0034 5265616C 		.ascii	"Real:\000"
 7745      3A00
 7746 003a 0000     		.align	2
 7747              	.LC13:
 7748 003c 416E676C 		.ascii	"Angle:\000"
 7748      653A00
 7749 0043 00       		.align	2
 7750              	.LC14:
 7751 0044 496D6167 		.ascii	"Imag:\000"
 7751      3A00
 7752 004a 0000     		.align	2
 7753              	.LC15:
 7754 004c 07876A00 		.ascii	"\007\207j\000"
 7755              		.align	2
 7756              	.LC16:
 7757 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7757      0700
 7758 0056 0000     		.align	2
 7759              	.LC17:
 7760 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7760      00
 7761 005d 000000   		.align	2
ARM GAS  /tmp/cchf4YwX.s 			page 242


 7762              	.LC18:
 7763 0060 07C73C00 		.ascii	"\007\307<\000"
 7764              		.align	2
 7765              	.LC19:
 7766 0064 07C77900 		.ascii	"\007\307y\000"
 7767              		.align	2
 7768              	.LC21:
 7769 0068 07E43F00 		.ascii	"\007\344?\000"
 7770              		.section	.text.annunciators,"ax",%progbits
 7771              		.align	1
 7772              		.p2align 2,,3
 7773              		.syntax unified
 7774              		.thumb
 7775              		.thumb_func
 7776              		.fpu fpv4-sp-d16
 7778              	annunciators:
 7779              	.LFB16:
 607:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7780              		.loc 1 607 36 is_stmt 1 view -0
 7781              		.cfi_startproc
 7782              		@ args = 0, pretend = 0, frame = 128
 7783              		@ frame_needed = 0, uses_anonymous_args = 0
 609:src/display.c ****       char buf2[42], *p2 = buf2;
 7784              		.loc 1 609 7 view .LVU2474
 607:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7785              		.loc 1 607 36 is_stmt 0 view .LVU2475
 7786 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7787              		.cfi_def_cfa_offset 28
 7788              		.cfi_offset 4, -28
 7789              		.cfi_offset 5, -24
 7790              		.cfi_offset 6, -20
 7791              		.cfi_offset 7, -16
 7792              		.cfi_offset 8, -12
 7793              		.cfi_offset 9, -8
 7794              		.cfi_offset 14, -4
 621:src/display.c **** #  endif
 7795              		.loc 1 621 38 view .LVU2476
 7796 0004 C44C     		ldr	r4, .L912
 607:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7797              		.loc 1 607 36 view .LVU2477
 7798 0006 A3B0     		sub	sp, sp, #140
 7799              		.cfi_def_cfa_offset 168
 7800              	.LVL863:
 610:src/display.c ****       int n;
 7801              		.loc 1 610 7 is_stmt 1 view .LVU2478
 611:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7802              		.loc 1 611 7 view .LVU2479
 612:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7803              		.loc 1 612 7 view .LVU2480
 613:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7804              		.loc 1 613 7 view .LVU2481
 613:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7805              		.loc 1 613 43 is_stmt 0 view .LVU2482
 7806 0008 FFF7FEFF 		bl	cur_shift
 7807              	.LVL864:
 613:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7808              		.loc 1 613 18 view .LVU2483
ARM GAS  /tmp/cchf4YwX.s 			page 243


 7809 000c C34B     		ldr	r3, .L912+4
 621:src/display.c **** #  endif
 7810              		.loc 1 621 38 view .LVU2484
 7811 000e 2268     		ldr	r2, [r4]
 613:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7812              		.loc 1 613 18 view .LVU2485
 7813 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7814              	.LVL865:
 621:src/display.c **** #  endif
 7815              		.loc 1 621 7 is_stmt 1 view .LVU2486
 621:src/display.c **** #  endif
 7816              		.loc 1 621 38 is_stmt 0 view .LVU2487
 7817 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 652:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7818              		.loc 1 652 7 view .LVU2488
 7819 0018 0CAD     		add	r5, sp, #48
 7820              	.LVL866:
 652:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7821              		.loc 1 652 7 view .LVU2489
 7822 001a 2A22     		movs	r2, #42
 7823 001c 0021     		movs	r1, #0
 7824 001e 2846     		mov	r0, r5
 7825 0020 FFF7FEFF 		bl	xset
 7826              	.LVL867:
 653:src/display.c ****       
 7827              		.loc 1 653 7 view .LVU2490
 7828 0024 2A22     		movs	r2, #42
 7829 0026 0021     		movs	r1, #0
 7830 0028 17A8     		add	r0, sp, #92
 7831              	.LVL868:
 653:src/display.c ****       
 7832              		.loc 1 653 7 view .LVU2491
 7833 002a FFF7FEFF 		bl	xset
 7834              	.LVL869:
 655:src/display.c **** #ifdef SHOW_STACK_SIZE
 7835              		.loc 1 655 11 view .LVU2492
 7836 002e 2368     		ldr	r3, [r4]
 7837 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 655:src/display.c **** #ifdef SHOW_STACK_SIZE
 7838              		.loc 1 655 10 view .LVU2493
 7839 0034 D107     		lsls	r1, r2, #31
 621:src/display.c **** #  endif
 7840              		.loc 1 621 17 view .LVU2494
 7841 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7842              	.LVL870:
 624:src/display.c **** #  else
 7843              		.loc 1 624 7 is_stmt 1 view .LVU2495
 629:src/display.c **** #  else
 7844              		.loc 1 629 7 view .LVU2496
 639:src/display.c **** #else
 7845              		.loc 1 639 7 view .LVU2497
 647:src/display.c **** #else
 7846              		.loc 1 647 7 view .LVU2498
 652:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7847              		.loc 1 652 7 view .LVU2499
 653:src/display.c ****       
 7848              		.loc 1 653 7 view .LVU2500
ARM GAS  /tmp/cchf4YwX.s 			page 244


 655:src/display.c **** #ifdef SHOW_STACK_SIZE
 7849              		.loc 1 655 7 view .LVU2501
 655:src/display.c **** #ifdef SHOW_STACK_SIZE
 7850              		.loc 1 655 10 is_stmt 0 view .LVU2502
 7851 003a 00F1C380 		bmi	.L895
 695:src/display.c **** #else
 7852              		.loc 1 695 12 is_stmt 1 view .LVU2503
 695:src/display.c **** #else
 7853              		.loc 1 695 15 is_stmt 0 view .LVU2504
 7854 003e 002F     		cmp	r7, #0
 7855 0040 79D0     		beq	.L896
 7856              	.L776:
 781:src/display.c **** 	  *p2++ = '\007';
 7857              		.loc 1 781 2 is_stmt 1 view .LVU2505
 781:src/display.c **** 	  *p2++ = '\007';
 7858              		.loc 1 781 6 is_stmt 0 view .LVU2506
 7859 0042 B74E     		ldr	r6, .L912+8
 7860 0044 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 781:src/display.c **** 	  *p2++ = '\007';
 7861              		.loc 1 781 5 view .LVU2507
 7862 0046 9A07     		lsls	r2, r3, #30
 7863 0048 40F19781 		bpl	.L785
 782:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7864              		.loc 1 782 4 is_stmt 1 view .LVU2508
 7865              	.LVL871:
 783:src/display.c **** 	  *p2++ = shift_char;
 7866              		.loc 1 783 4 view .LVU2509
 782:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7867              		.loc 1 782 10 is_stmt 0 view .LVU2510
 7868 004c 4EF20742 		movw	r2, #58375
 785:src/display.c **** 	}
 7869              		.loc 1 785 10 view .LVU2511
 7870 0050 1423     		movs	r3, #20
 784:src/display.c **** 	  *p2++ = '\024';
 7871              		.loc 1 784 10 view .LVU2512
 7872 0052 8DF85E80 		strb	r8, [sp, #94]
 782:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7873              		.loc 1 782 10 view .LVU2513
 7874 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 784:src/display.c **** 	  *p2++ = '\024';
 7875              		.loc 1 784 4 is_stmt 1 view .LVU2514
 7876              	.LVL872:
 785:src/display.c **** 	}
 7877              		.loc 1 785 4 view .LVU2515
 785:src/display.c **** 	}
 7878              		.loc 1 785 10 is_stmt 0 view .LVU2516
 7879 005a 8DF85F30 		strb	r3, [sp, #95]
 785:src/display.c **** 	}
 7880              		.loc 1 785 7 view .LVU2517
 7881 005e 0DF16008 		add	r8, sp, #96
 7882              	.LVL873:
 7883              	.L786:
 794:src/display.c **** 	  *p2++ = '\007';
 7884              		.loc 1 794 2 is_stmt 1 view .LVU2518
 794:src/display.c **** 	  *p2++ = '\007';
 7885              		.loc 1 794 6 is_stmt 0 view .LVU2519
 7886 0062 FFF7FEFF 		bl	get_trig_mode
ARM GAS  /tmp/cchf4YwX.s 			page 245


 7887              	.LVL874:
 795:src/display.c **** 	  *p2++ = '\207';
 7888              		.loc 1 795 10 view .LVU2520
 7889 0066 0723     		movs	r3, #7
 794:src/display.c **** 	  *p2++ = '\007';
 7890              		.loc 1 794 5 view .LVU2521
 7891 0068 0228     		cmp	r0, #2
 796:src/display.c **** 	  *p2++ = '\007';	    
 7892              		.loc 1 796 10 view .LVU2522
 7893 006a 4FF08702 		mov	r2, #135
 795:src/display.c **** 	  *p2++ = '\207';
 7894              		.loc 1 795 10 view .LVU2523
 7895 006e 88F80030 		strb	r3, [r8]
 794:src/display.c **** 	  *p2++ = '\007';
 7896              		.loc 1 794 5 view .LVU2524
 7897 0072 00F01182 		beq	.L897
 800:src/display.c **** 	  *p2++ = '\207';
 7898              		.loc 1 800 4 is_stmt 1 view .LVU2525
 7899              	.LVL875:
 801:src/display.c **** 	  *p2++ = ' ';
 7900              		.loc 1 801 4 view .LVU2526
 802:src/display.c **** 	}
 7901              		.loc 1 802 10 is_stmt 0 view .LVU2527
 7902 0076 2023     		movs	r3, #32
 801:src/display.c **** 	  *p2++ = ' ';
 7903              		.loc 1 801 10 view .LVU2528
 7904 0078 88F80120 		strb	r2, [r8, #1]
 802:src/display.c **** 	}
 7905              		.loc 1 802 4 is_stmt 1 view .LVU2529
 802:src/display.c **** 	}
 7906              		.loc 1 802 10 is_stmt 0 view .LVU2530
 7907 007c 88F80230 		strb	r3, [r8, #2]
 802:src/display.c **** 	}
 7908              		.loc 1 802 7 view .LVU2531
 7909 0080 08F10308 		add	r8, r8, #3
 7910              	.LVL876:
 7911              	.L788:
 806:src/display.c **** 	p2 = scopy(p2, q);
 7912              		.loc 1 806 2 is_stmt 1 view .LVU2532
 806:src/display.c **** 	p2 = scopy(p2, q);
 7913              		.loc 1 806 7 is_stmt 0 view .LVU2533
 7914 0084 FFF7FEFF 		bl	is_dblmode
 7915              	.LVL877:
 806:src/display.c **** 	p2 = scopy(p2, q);
 7916              		.loc 1 806 34 view .LVU2534
 7917 0088 A64B     		ldr	r3, .L912+12
 7918 008a A74A     		ldr	r2, .L912+16
 806:src/display.c **** 	p2 = scopy(p2, q);
 7919              		.loc 1 806 7 view .LVU2535
 7920 008c 0146     		mov	r1, r0
 7921              	.LVL878:
 807:src/display.c **** #else
 7922              		.loc 1 807 2 is_stmt 1 view .LVU2536
 807:src/display.c **** #else
 7923              		.loc 1 807 7 is_stmt 0 view .LVU2537
 7924 008e 0029     		cmp	r1, #0
 7925 0090 14BF     		ite	ne
ARM GAS  /tmp/cchf4YwX.s 			page 246


 7926 0092 1146     		movne	r1, r2
 7927 0094 1946     		moveq	r1, r3
 7928              	.LVL879:
 807:src/display.c **** #else
 7929              		.loc 1 807 7 view .LVU2538
 7930 0096 4046     		mov	r0, r8
 7931 0098 FFF7FEFF 		bl	scopy
 7932              	.LVL880:
 823:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7933              		.loc 1 823 16 view .LVU2539
 7934 009c 2368     		ldr	r3, [r4]
 7935 009e 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7936 00a2 C3F30113 		ubfx	r3, r3, #4, #2
 7937              	.LVL881:
 823:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7938              		.loc 1 823 2 is_stmt 1 view .LVU2540
 7939 00a6 012B     		cmp	r3, #1
 7940 00a8 00F0FD81 		beq	.L836
 7941 00ac 9F49     		ldr	r1, .L912+20
 7942 00ae A04A     		ldr	r2, .L912+24
 7943 00b0 022B     		cmp	r3, #2
 7944 00b2 08BF     		it	eq
 7945 00b4 1146     		moveq	r1, r2
 7946              	.L790:
 7947              	.LVL882:
 840:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7948              		.loc 1 840 2 view .LVU2541
 840:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7949              		.loc 1 840 6 is_stmt 0 view .LVU2542
 7950 00b6 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 840:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7951              		.loc 1 840 5 view .LVU2543
 7952 00b8 5B07     		lsls	r3, r3, #29
 841:src/display.c **** 	} // no need to skip y display with arrow here
 7953              		.loc 1 841 4 is_stmt 1 view .LVU2544
 7954 00ba 48BF     		it	mi
 7955 00bc 9D49     		ldrmi	r1, .L912+28
 7956              	.LVL883:
 844:src/display.c **** 	}
 7957              		.loc 1 844 4 view .LVU2545
 844:src/display.c **** 	}
 7958              		.loc 1 844 9 is_stmt 0 view .LVU2546
 7959 00be FFF7FEFF 		bl	scopy
 7960              	.LVL884:
 848:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7961              		.loc 1 848 2 is_stmt 1 view .LVU2547
 848:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7962              		.loc 1 848 18 is_stmt 0 view .LVU2548
 7963 00c2 2368     		ldr	r3, [r4]
 7964 00c4 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 848:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7965              		.loc 1 848 5 view .LVU2549
 7966 00c8 13F0060F 		tst	r3, #6
 7967 00cc 04D0     		beq	.L793
 848:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7968              		.loc 1 848 32 discriminator 1 view .LVU2550
 7969 00ce 03F04102 		and	r2, r3, #65
ARM GAS  /tmp/cchf4YwX.s 			page 247


 7970 00d2 412A     		cmp	r2, #65
 7971 00d4 00F01482 		beq	.L898
 7972              	.L793:
 858:src/display.c **** 	  q = "\007\307<";
 7973              		.loc 1 858 7 is_stmt 1 view .LVU2551
 858:src/display.c **** 	  q = "\007\307<";
 7974              		.loc 1 858 22 is_stmt 0 view .LVU2552
 7975 00d8 DFF86C92 		ldr	r9, .L912+48
 7976 00dc D9F80020 		ldr	r2, [r9]
 858:src/display.c **** 	  q = "\007\307<";
 7977              		.loc 1 858 10 view .LVU2553
 7978 00e0 012A     		cmp	r2, #1
 7979 00e2 00F0CA81 		beq	.L796
 858:src/display.c **** 	  q = "\007\307<";
 7980              		.loc 1 858 43 discriminator 1 view .LVU2554
 7981 00e6 03F0C101 		and	r1, r3, #193
 7982 00ea C129     		cmp	r1, #193
 7983 00ec 00F0C581 		beq	.L796
 862:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7984              		.loc 1 862 7 is_stmt 1 view .LVU2555
 862:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7985              		.loc 1 862 11 is_stmt 0 view .LVU2556
 7986 00f0 317D     		ldrb	r1, [r6, #20]	@ zero_extendqisi2
 862:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7987              		.loc 1 862 10 view .LVU2557
 7988 00f2 11F0C00F 		tst	r1, #192
 7989 00f6 00F04B81 		beq	.L899
 7990              	.L799:
 863:src/display.c **** 	  p = scopy(p, q);
 7991              		.loc 1 863 4 is_stmt 1 view .LVU2558
 863:src/display.c **** 	  p = scopy(p, q);
 7992              		.loc 1 863 28 is_stmt 0 view .LVU2559
 7993 00fa 8F4A     		ldr	r2, .L912+32
 7994 00fc 8F49     		ldr	r1, .L912+36
 7995 00fe 13F0200F 		tst	r3, #32
 7996              	.LVL885:
 864:src/display.c **** 	}
 7997              		.loc 1 864 4 is_stmt 1 view .LVU2560
 864:src/display.c **** 	}
 7998              		.loc 1 864 8 is_stmt 0 view .LVU2561
 7999 0102 08BF     		it	eq
 8000 0104 1146     		moveq	r1, r2
 8001              	.LVL886:
 864:src/display.c **** 	}
 8002              		.loc 1 864 8 view .LVU2562
 8003 0106 2846     		mov	r0, r5
 8004 0108 FFF7FEFF 		bl	scopy
 8005              	.LVL887:
 864:src/display.c **** 	}
 8006              		.loc 1 864 8 view .LVU2563
 8007 010c D9F80020 		ldr	r2, [r9]
 8008 0110 8046     		mov	r8, r0
 8009              	.LVL888:
 8010              	.L798:
 880:src/display.c **** 	    q = "\007\307y";
 8011              		.loc 1 880 4 is_stmt 1 view .LVU2564
 880:src/display.c **** 	    q = "\007\307y";
ARM GAS  /tmp/cchf4YwX.s 			page 248


 8012              		.loc 1 880 7 is_stmt 0 view .LVU2565
 8013 0112 022A     		cmp	r2, #2
 8014 0114 00F0C981 		beq	.L900
 8015              	.L801:
 886:src/display.c **** 	  decNumber y;
 8016              		.loc 1 886 2 is_stmt 1 view .LVU2566
 886:src/display.c **** 	  decNumber y;
 8017              		.loc 1 886 6 is_stmt 0 view .LVU2567
 8018 0118 B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
 886:src/display.c **** 	  decNumber y;
 8019              		.loc 1 886 5 view .LVU2568
 8020 011a 5A06     		lsls	r2, r3, #25
 8021 011c 00F1AA80 		bmi	.L765
 8022              	.LBB501:
 8023              	.LBB502:
3645:src/display.c ****       }
 8024              		.loc 1 3645 2 is_stmt 1 view .LVU2569
 8025 0120 1B06     		lsls	r3, r3, #24
 8026 0122 42D4     		bmi	.L844
 8027              	.LVL889:
 8028              	.L906:
 8029              	.LBB503:
 8030              	.LBI503:
3623:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8031              		.loc 1 3623 18 view .LVU2570
 8032              	.LBB504:
3624:src/display.c ****       }
 8033              		.loc 1 3624 2 view .LVU2571
3624:src/display.c ****       }
 8034              		.loc 1 3624 9 is_stmt 0 view .LVU2572
 8035 0124 0021     		movs	r1, #0
 8036 0126 17A8     		add	r0, sp, #92
 8037              	.LVL890:
3624:src/display.c ****       }
 8038              		.loc 1 3624 9 view .LVU2573
 8039 0128 FFF7FEFF 		bl	pixel_length
 8040              	.LVL891:
3624:src/display.c ****       }
 8041              		.loc 1 3624 9 view .LVU2574
 8042              	.LBE504:
 8043              	.LBE503:
3645:src/display.c ****       }
 8044              		.loc 1 3645 2 view .LVU2575
 8045 012c 2C28     		cmp	r0, #44
 8046 012e D4BF     		ite	le
 8047 0130 0021     		movle	r1, #0
 8048 0132 0121     		movgt	r1, #1
 8049 0134 3AE0     		b	.L826
 8050              	.LVL892:
 8051              	.L896:
3645:src/display.c ****       }
 8052              		.loc 1 3645 2 view .LVU2576
 8053              	.LBE502:
 8054              	.LBE501:
 695:src/display.c **** #else
 8055              		.loc 1 695 35 discriminator 1 view .LVU2577
 8056 0136 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
ARM GAS  /tmp/cchf4YwX.s 			page 249


 695:src/display.c **** #else
 8057              		.loc 1 695 32 discriminator 1 view .LVU2578
 8058 013a 03F04103 		and	r3, r3, #65
 8059 013e 412B     		cmp	r3, #65
 8060 0140 3FF47FAF 		beq	.L776
 716:src/display.c **** 	    *p2++ = shift_char;
 8061              		.loc 1 716 4 is_stmt 1 view .LVU2579
 716:src/display.c **** 	    *p2++ = shift_char;
 8062              		.loc 1 716 7 is_stmt 0 view .LVU2580
 8063 0144 B8F1200F 		cmp	r8, #32
 8064 0148 00F0E881 		beq	.L777
 8065              	.L779:
 717:src/display.c **** 	    *p2++ = '\006';
 8066              		.loc 1 717 6 is_stmt 1 view .LVU2581
 8067              	.LVL893:
 718:src/display.c **** 	  }
 8068              		.loc 1 718 12 is_stmt 0 view .LVU2582
 8069 014c 0623     		movs	r3, #6
 717:src/display.c **** 	    *p2++ = '\006';
 8070              		.loc 1 717 12 view .LVU2583
 8071 014e 8DF85C80 		strb	r8, [sp, #92]
 718:src/display.c **** 	  }
 8072              		.loc 1 718 6 is_stmt 1 view .LVU2584
 8073              	.LVL894:
 718:src/display.c **** 	  }
 8074              		.loc 1 718 12 is_stmt 0 view .LVU2585
 8075 0152 8DF85D30 		strb	r3, [sp, #93]
 718:src/display.c **** 	  }
 8076              		.loc 1 718 9 view .LVU2586
 8077 0156 0DF15E00 		add	r0, sp, #94
 8078              	.LVL895:
 8079              	.L778:
 724:src/display.c **** 	  *p2++ = ' ';
 8080              		.loc 1 724 2 is_stmt 1 view .LVU2587
 724:src/display.c **** 	  *p2++ = ' ';
 8081              		.loc 1 724 6 is_stmt 0 view .LVU2588
 8082 015a 714E     		ldr	r6, .L912+8
 8083 015c 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 724:src/display.c **** 	  *p2++ = ' ';
 8084              		.loc 1 724 5 view .LVU2589
 8085 015e 9A07     		lsls	r2, r3, #30
 8086 0160 00F1A981 		bmi	.L901
 729:src/display.c **** 	  *p2++ = ' ';
 8087              		.loc 1 729 2 is_stmt 1 view .LVU2590
 729:src/display.c **** 	  *p2++ = ' ';
 8088              		.loc 1 729 5 is_stmt 0 view .LVU2591
 8089 0164 5907     		lsls	r1, r3, #29
 8090 0166 00F1E481 		bmi	.L902
 735:src/display.c **** 	  if (State2.wascomplex) {
 8091              		.loc 1 735 2 is_stmt 1 view .LVU2592
 735:src/display.c **** 	  if (State2.wascomplex) {
 8092              		.loc 1 735 5 is_stmt 0 view .LVU2593
 8093 016a B8F1200F 		cmp	r8, #32
 8094 016e 00F0E581 		beq	.L903
 8095              	.L782:
 752:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8096              		.loc 1 752 2 is_stmt 1 view .LVU2594
ARM GAS  /tmp/cchf4YwX.s 			page 250


 752:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8097              		.loc 1 752 16 is_stmt 0 view .LVU2595
 8098 0172 2368     		ldr	r3, [r4]
 8099 0174 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 8100 0178 C1F30111 		ubfx	r1, r1, #4, #2
 752:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8101              		.loc 1 752 2 view .LVU2596
 8102 017c 0129     		cmp	r1, #1
 8103 017e 00F0F081 		beq	.L833
 8104 0182 6A4B     		ldr	r3, .L912+20
 8105 0184 6A4A     		ldr	r2, .L912+24
 8106 0186 0229     		cmp	r1, #2
 8107 0188 14BF     		ite	ne
 8108 018a 1946     		movne	r1, r3
 8109 018c 1146     		moveq	r1, r2
 8110              	.L784:
 8111              	.LVL896:
 766:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8112              		.loc 1 766 2 is_stmt 1 view .LVU2597
 766:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8113              		.loc 1 766 7 is_stmt 0 view .LVU2598
 8114 018e FFF7FEFF 		bl	scopy
 8115              	.LVL897:
 766:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8116              		.loc 1 766 7 view .LVU2599
 8117 0192 0446     		mov	r4, r0
 8118              	.LVL898:
 768:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8119              		.loc 1 768 2 is_stmt 1 view .LVU2600
 768:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8120              		.loc 1 768 6 is_stmt 0 view .LVU2601
 8121 0194 FFF7FEFF 		bl	get_trig_mode
 8122              	.LVL899:
 768:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8123              		.loc 1 768 5 view .LVU2602
 8124 0198 0228     		cmp	r0, #2
 8125 019a 00F0E681 		beq	.L904
 8126              	.LVL900:
 8127              	.L775:
 984:src/display.c ****       set_status_top_always(buf2);
 8128              		.loc 1 984 7 is_stmt 1 view .LVU2603
 984:src/display.c ****       set_status_top_always(buf2);
 8129              		.loc 1 984 11 is_stmt 0 view .LVU2604
 8130 019e B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
 984:src/display.c ****       set_status_top_always(buf2);
 8131              		.loc 1 984 10 view .LVU2605
 8132 01a0 5906     		lsls	r1, r3, #25
 8133 01a2 00F1FC80 		bmi	.L905
 8134              	.L824:
 8135              	.LBB510:
 8136              	.LBB507:
3645:src/display.c ****       }
 8137              		.loc 1 3645 2 is_stmt 1 view .LVU2606
 8138 01a6 1B06     		lsls	r3, r3, #24
 8139 01a8 BCD5     		bpl	.L906
 8140              	.L844:
 8141 01aa 0121     		movs	r1, #1
ARM GAS  /tmp/cchf4YwX.s 			page 251


 8142              	.L826:
 8143              	.LVL901:
 8144              	.LBB505:
 8145              	.LBI505:
3475:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8146              		.loc 1 3475 19 view .LVU2607
 8147              	.LBB506:
3476:src/display.c ****       }
 8148              		.loc 1 3476 2 view .LVU2608
 8149 01ac 4FF45373 		mov	r3, #844
 8150 01b0 0093     		str	r3, [sp]
 8151 01b2 17A8     		add	r0, sp, #92
 8152              	.LVL902:
3476:src/display.c ****       }
 8153              		.loc 1 3476 2 is_stmt 0 view .LVU2609
 8154 01b4 40F24A23 		movw	r3, #586
 8155 01b8 2B22     		movs	r2, #43
 8156 01ba FFF7FEFF 		bl	s_s_sized
 8157              	.LVL903:
3476:src/display.c ****       }
 8158              		.loc 1 3476 2 view .LVU2610
 8159              	.LBE506:
 8160              	.LBE505:
 8161              	.LBE507:
 8162              	.LBE510:
 987:src/display.c **** #else
 8163              		.loc 1 987 5 view .LVU2611
 8164 01be 23B0     		add	sp, sp, #140
 8165              		.cfi_remember_state
 8166              		.cfi_def_cfa_offset 28
 8167              		@ sp needed
 8168 01c0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8169              	.LVL904:
 8170              	.L895:
 8171              		.cfi_restore_state
 665:src/display.c **** 	    *p2++ = '\006';
 8172              		.loc 1 665 6 is_stmt 1 view .LVU2612
 666:src/display.c **** 	  }
 8173              		.loc 1 666 12 is_stmt 0 view .LVU2613
 8174 01c4 0623     		movs	r3, #6
 8175 01c6 8DF85D30 		strb	r3, [sp, #93]
 665:src/display.c **** 	    *p2++ = '\006';
 8176              		.loc 1 665 12 view .LVU2614
 8177 01ca 8DF85C80 		strb	r8, [sp, #92]
 666:src/display.c **** 	  }
 8178              		.loc 1 666 6 is_stmt 1 view .LVU2615
 8179              	.LVL905:
 669:src/display.c **** 	default:
 8180              		.loc 1 669 2 view .LVU2616
 669:src/display.c **** 	default:
 8181              		.loc 1 669 9 is_stmt 0 view .LVU2617
 8182 01ce FFF7FEFF 		bl	int_mode
 8183              	.LVL906:
 8184 01d2 0138     		subs	r0, r0, #1
 8185 01d4 C0B2     		uxtb	r0, r0
 8186 01d6 0228     		cmp	r0, #2
 8187 01d8 96BF     		itet	ls
ARM GAS  /tmp/cchf4YwX.s 			page 252


 8188 01da 594B     		ldrls	r3, .L912+40
 8189 01dc 5949     		ldrhi	r1, .L912+44
 8190 01de 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8191              	.LVL907:
 676:src/display.c **** 	*q++ = '\006';
 8192              		.loc 1 676 2 is_stmt 1 view .LVU2618
 676:src/display.c **** 	*q++ = '\006';
 8193              		.loc 1 676 6 is_stmt 0 view .LVU2619
 8194 01e2 0DF15E00 		add	r0, sp, #94
 8195              	.LVL908:
 676:src/display.c **** 	*q++ = '\006';
 8196              		.loc 1 676 6 view .LVU2620
 8197 01e6 FFF7FEFF 		bl	scopy
 8198              	.LVL909:
 677:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8199              		.loc 1 677 7 view .LVU2621
 8200 01ea 8046     		mov	r8, r0
 8201              	.LVL910:
 677:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8202              		.loc 1 677 7 view .LVU2622
 8203 01ec 0623     		movs	r3, #6
 8204 01ee 08F8013B 		strb	r3, [r8], #1
 676:src/display.c **** 	*q++ = '\006';
 8205              		.loc 1 676 6 view .LVU2623
 8206 01f2 0646     		mov	r6, r0
 8207              	.LVL911:
 677:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8208              		.loc 1 677 2 is_stmt 1 view .LVU2624
 678:src/display.c **** 
 8209              		.loc 1 678 2 view .LVU2625
 678:src/display.c **** 
 8210              		.loc 1 678 7 is_stmt 0 view .LVU2626
 8211 01f4 FFF7FEFF 		bl	word_size
 8212              	.LVL912:
 8213 01f8 0222     		movs	r2, #2
 8214 01fa 0146     		mov	r1, r0
 8215 01fc 4046     		mov	r0, r8
 8216 01fe FFF7FEFF 		bl	num_arg_0
 8217              	.LVL913:
 680:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8218              		.loc 1 680 19 view .LVU2627
 8219 0202 DFF848C1 		ldr	ip, .L912+52
 8220 0206 DCF80030 		ldr	r3, [ip]
 8221              	.LVL914:
 680:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8222              		.loc 1 680 2 is_stmt 1 view .LVU2628
 680:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8223              		.loc 1 680 5 is_stmt 0 view .LVU2629
 8224 020a 002B     		cmp	r3, #0
 8225 020c 40F3BE80 		ble	.L892
 681:src/display.c **** 	  if (*q == '1')
 8226              		.loc 1 681 4 is_stmt 1 view .LVU2630
 681:src/display.c **** 	  if (*q == '1')
 8227              		.loc 1 681 10 is_stmt 0 view .LVU2631
 8228 0210 C3F10702 		rsb	r2, r3, #7
 8229 0214 5200     		lsls	r2, r2, #1
 681:src/display.c **** 	  if (*q == '1')
ARM GAS  /tmp/cchf4YwX.s 			page 253


 8230              		.loc 1 681 6 view .LVU2632
 8231 0216 0292     		str	r2, [sp, #8]
 682:src/display.c **** 	    n += 2;
 8232              		.loc 1 682 4 is_stmt 1 view .LVU2633
 682:src/display.c **** 	    n += 2;
 8233              		.loc 1 682 7 is_stmt 0 view .LVU2634
 8234 0218 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 8235 021a 3129     		cmp	r1, #49
 683:src/display.c **** 	  if (q[1] == '1')
 8236              		.loc 1 683 6 is_stmt 1 view .LVU2635
 683:src/display.c **** 	  if (q[1] == '1')
 8237              		.loc 1 683 8 is_stmt 0 view .LVU2636
 8238 021c 04BF     		itt	eq
 8239 021e 0232     		addeq	r2, r2, #2
 8240 0220 0292     		streq	r2, [sp, #8]
 684:src/display.c **** 	    n += 2;
 8241              		.loc 1 684 4 is_stmt 1 view .LVU2637
 684:src/display.c **** 	    n += 2;
 8242              		.loc 1 684 7 is_stmt 0 view .LVU2638
 8243 0222 B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 8244 0224 3129     		cmp	r1, #49
 8245 0226 00D1     		bne	.L768
 685:src/display.c **** 	  while (n-- > 0)
 8246              		.loc 1 685 6 is_stmt 1 view .LVU2639
 685:src/display.c **** 	  while (n-- > 0)
 8247              		.loc 1 685 8 is_stmt 0 view .LVU2640
 8248 0228 0232     		adds	r2, r2, #2
 8249              	.L768:
 686:src/display.c **** 	    *p2++ = '\006';
 8250              		.loc 1 686 10 is_stmt 1 view .LVU2641
 686:src/display.c **** 	    *p2++ = '\006';
 8251              		.loc 1 686 12 is_stmt 0 view .LVU2642
 8252 022a 511E     		subs	r1, r2, #1
 686:src/display.c **** 	    *p2++ = '\006';
 8253              		.loc 1 686 10 view .LVU2643
 8254 022c 002A     		cmp	r2, #0
 686:src/display.c **** 	    *p2++ = '\006';
 8255              		.loc 1 686 12 view .LVU2644
 8256 022e 0291     		str	r1, [sp, #8]
 686:src/display.c **** 	    *p2++ = '\006';
 8257              		.loc 1 686 10 view .LVU2645
 8258 0230 40F39981 		ble	.L890
 687:src/display.c **** 
 8259              		.loc 1 687 12 view .LVU2646
 8260 0234 0621     		movs	r1, #6
 8261              	.L769:
 687:src/display.c **** 
 8262              		.loc 1 687 6 is_stmt 1 view .LVU2647
 8263              	.LVL915:
 687:src/display.c **** 
 8264              		.loc 1 687 12 is_stmt 0 view .LVU2648
 8265 0236 00F8011B 		strb	r1, [r0], #1
 8266              	.LVL916:
 686:src/display.c **** 	    *p2++ = '\006';
 8267              		.loc 1 686 10 is_stmt 1 view .LVU2649
 686:src/display.c **** 	    *p2++ = '\006';
 8268              		.loc 1 686 12 is_stmt 0 view .LVU2650
ARM GAS  /tmp/cchf4YwX.s 			page 254


 8269 023a 029B     		ldr	r3, [sp, #8]
 8270 023c 5A1E     		subs	r2, r3, #1
 686:src/display.c **** 	    *p2++ = '\006';
 8271              		.loc 1 686 10 view .LVU2651
 8272 023e 002B     		cmp	r3, #0
 686:src/display.c **** 	    *p2++ = '\006';
 8273              		.loc 1 686 12 view .LVU2652
 8274 0240 0292     		str	r2, [sp, #8]
 686:src/display.c **** 	    *p2++ = '\006';
 8275              		.loc 1 686 10 view .LVU2653
 8276 0242 F8DC     		bgt	.L769
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8277              		.loc 1 689 4 is_stmt 1 view .LVU2654
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8278              		.loc 1 689 11 is_stmt 0 view .LVU2655
 8279 0244 DCF80030 		ldr	r3, [ip]
 8280 0248 0293     		str	r3, [sp, #8]
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8281              		.loc 1 689 27 is_stmt 1 view .LVU2656
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8282              		.loc 1 689 4 is_stmt 0 view .LVU2657
 8283 024a 002B     		cmp	r3, #0
 8284 024c C0F29E80 		blt	.L892
 8285              	.L827:
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8286              		.loc 1 689 4 view .LVU2658
 8287 0250 334E     		ldr	r6, .L912+8
 8288              	.L774:
 690:src/display.c **** 	}
 8289              		.loc 1 690 6 is_stmt 1 view .LVU2659
 690:src/display.c **** 	}
 8290              		.loc 1 690 20 is_stmt 0 view .LVU2660
 8291 0252 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 8292 0254 C2F3C202 		ubfx	r2, r2, #3, #3
 690:src/display.c **** 	}
 8293              		.loc 1 690 12 view .LVU2661
 8294 0258 9A42     		cmp	r2, r3
 8295 025a 0CBF     		ite	eq
 8296 025c 7C23     		moveq	r3, #124
 8297 025e 2723     		movne	r3, #39
 8298              	.LVL917:
 690:src/display.c **** 	}
 8299              		.loc 1 690 12 view .LVU2662
 8300 0260 00F8013B 		strb	r3, [r0], #1
 8301              	.LVL918:
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8302              		.loc 1 689 35 is_stmt 1 view .LVU2663
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8303              		.loc 1 689 36 is_stmt 0 view .LVU2664
 8304 0264 029B     		ldr	r3, [sp, #8]
 8305 0266 013B     		subs	r3, r3, #1
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8306              		.loc 1 689 4 view .LVU2665
 8307 0268 002B     		cmp	r3, #0
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8308              		.loc 1 689 36 view .LVU2666
 8309 026a 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/cchf4YwX.s 			page 255


 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8310              		.loc 1 689 27 is_stmt 1 view .LVU2667
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8311              		.loc 1 689 4 is_stmt 0 view .LVU2668
 8312 026c F1DA     		bge	.L774
 8313              	.L772:
 692:src/display.c ****       }
 8314              		.loc 1 692 2 is_stmt 1 view .LVU2669
 692:src/display.c ****       }
 8315              		.loc 1 692 5 is_stmt 0 view .LVU2670
 8316 026e 002F     		cmp	r7, #0
 8317 0270 95D0     		beq	.L775
 609:src/display.c ****       char buf2[42], *p2 = buf2;
 8318              		.loc 1 609 22 view .LVU2671
 8319 0272 A846     		mov	r8, r5
 8320              	.LVL919:
 8321              	.L765:
 8322              	.LBB511:
 887:src/display.c **** 	display_yreg:
 8323              		.loc 1 887 4 is_stmt 1 view .LVU2672
 894:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8324              		.loc 1 894 4 view .LVU2673
 894:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8325              		.loc 1 894 8 is_stmt 0 view .LVU2674
 8326 0274 2368     		ldr	r3, [r4]
 8327 0276 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 894:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8328              		.loc 1 894 7 view .LVU2675
 8329 027a D007     		lsls	r0, r2, #31
 8330 027c 00F13381 		bmi	.L907
 899:src/display.c **** 	    getRegister(&y, regK_idx);
 8331              		.loc 1 899 4 is_stmt 1 view .LVU2676
 899:src/display.c **** 	    getRegister(&y, regK_idx);
 8332              		.loc 1 899 35 is_stmt 0 view .LVU2677
 8333 0280 B3F8AC27 		ldrh	r2, [r3, #1964]
 8334 0284 40F2C113 		movw	r3, #449
 899:src/display.c **** 	    getRegister(&y, regK_idx);
 8335              		.loc 1 899 7 view .LVU2678
 8336 0288 1340     		ands	r3, r3, r2
 8337 028a C12B     		cmp	r3, #193
 8338 028c 00F03281 		beq	.L908
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8339              		.loc 1 903 6 is_stmt 1 view .LVU2679
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8340              		.loc 1 903 36 is_stmt 0 view .LVU2680
 8341 0290 DFF8BC90 		ldr	r9, .L912+56
 8342 0294 D9F80010 		ldr	r1, [r9]
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8343              		.loc 1 903 6 view .LVU2681
 8344 0298 6329     		cmp	r1, #99
 8345 029a 00F31181 		bgt	.L909
 8346              	.L807:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8347              		.loc 1 903 6 discriminator 5 view .LVU2682
 8348 029e 0131     		adds	r1, r1, #1
 8349              	.L811:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
ARM GAS  /tmp/cchf4YwX.s 			page 256


 8350              		.loc 1 903 6 discriminator 6 view .LVU2683
 8351 02a0 03AF     		add	r7, sp, #12
 8352              	.LVL920:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8353              		.loc 1 903 6 discriminator 6 view .LVU2684
 8354 02a2 3846     		mov	r0, r7
 8355 02a4 FFF7FEFF 		bl	getRegister
 8356              	.LVL921:
 8357              	.L806:
 912:src/display.c **** #ifdef INCLUDE_C_LOCK
 8358              		.loc 1 912 4 is_stmt 1 view .LVU2685
 912:src/display.c **** #ifdef INCLUDE_C_LOCK
 8359              		.loc 1 912 7 is_stmt 0 view .LVU2686
 8360 02a8 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8361 02ac 13F0700F 		tst	r3, #112
 8362 02b0 40F0C080 		bne	.L813
 914:src/display.c **** #else
 8363              		.loc 1 914 6 is_stmt 1 view .LVU2687
 914:src/display.c **** #else
 8364              		.loc 1 914 19 is_stmt 0 view .LVU2688
 8365 02b4 F37D     		ldrb	r3, [r6, #23]	@ zero_extendqisi2
 914:src/display.c **** #else
 8366              		.loc 1 914 9 view .LVU2689
 8367 02b6 13F0010F 		tst	r3, #1
 914:src/display.c **** #else
 8368              		.loc 1 914 39 view .LVU2690
 8369 02ba 2368     		ldr	r3, [r4]
 914:src/display.c **** #else
 8370              		.loc 1 914 9 view .LVU2691
 8371 02bc 79D0     		beq	.L816
 914:src/display.c **** #else
 8372              		.loc 1 914 38 discriminator 1 view .LVU2692
 8373 02be 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 914:src/display.c **** #else
 8374              		.loc 1 914 33 discriminator 1 view .LVU2693
 8375 02c2 02F04101 		and	r1, r2, #65
 8376 02c6 4129     		cmp	r1, #65
 8377 02c8 06D1     		bne	.L815
 914:src/display.c **** #else
 8378              		.loc 1 914 48 discriminator 2 view .LVU2694
 8379 02ca 1206     		lsls	r2, r2, #24
 8380 02cc 71D5     		bpl	.L816
 914:src/display.c **** #else
 8381              		.loc 1 914 119 discriminator 3 view .LVU2695
 8382 02ce 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 914:src/display.c **** #else
 8383              		.loc 1 914 80 discriminator 3 view .LVU2696
 8384 02d2 12F0C00F 		tst	r2, #192
 8385 02d6 6CD1     		bne	.L816
 8386              	.L815:
 8387              	.LBB512:
 918:src/display.c **** 
 8388              		.loc 1 918 8 is_stmt 1 view .LVU2697
 920:src/display.c **** 	      UState.nothousands = 1;
 8389              		.loc 1 920 8 is_stmt 0 view .LVU2698
 8390 02d8 2A22     		movs	r2, #42
 8391 02da 0021     		movs	r1, #0
ARM GAS  /tmp/cchf4YwX.s 			page 257


 8392 02dc 2846     		mov	r0, r5
 918:src/display.c **** 
 8393              		.loc 1 918 44 view .LVU2699
 8394 02de 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 8395 02e2 DFF87080 		ldr	r8, .L912+60
 8396              	.LVL922:
 920:src/display.c **** 	      UState.nothousands = 1;
 8397              		.loc 1 920 8 view .LVU2700
 8398 02e6 FFF7FEFF 		bl	xset
 8399              	.LVL923:
 921:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8400              		.loc 1 921 27 view .LVU2701
 8401 02ea 2268     		ldr	r2, [r4]
 8402 02ec 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8403 02f0 43F04003 		orr	r3, r3, #64
 8404 02f4 82F8E737 		strb	r3, [r2, #2023]
 922:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8405              		.loc 1 922 8 view .LVU2702
 8406 02f8 2946     		mov	r1, r5
 8407 02fa 3846     		mov	r0, r7
 8408 02fc FFF7FEFF 		bl	set_x_hms
 8409              	.LVL924:
 923:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8410              		.loc 1 923 27 view .LVU2703
 8411 0300 2368     		ldr	r3, [r4]
 8412 0302 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 918:src/display.c **** 
 8413              		.loc 1 918 44 view .LVU2704
 8414 0306 C9F38019 		ubfx	r9, r9, #6, #1
 8415              	.LVL925:
 920:src/display.c **** 	      UState.nothousands = 1;
 8416              		.loc 1 920 8 is_stmt 1 view .LVU2705
 921:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8417              		.loc 1 921 8 view .LVU2706
 922:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8418              		.loc 1 922 8 view .LVU2707
 923:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8419              		.loc 1 923 8 view .LVU2708
 923:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8420              		.loc 1 923 27 is_stmt 0 view .LVU2709
 8421 030a 69F38612 		bfi	r2, r9, #6, #1
 8422 030e 83F8E727 		strb	r2, [r3, #2023]
 928:src/display.c **** 	      while (*p) {
 8423              		.loc 1 928 8 is_stmt 1 view .LVU2710
 8424              	.LVL926:
 929:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8425              		.loc 1 929 8 view .LVU2711
 929:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8426              		.loc 1 929 14 view .LVU2712
 929:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8427              		.loc 1 929 15 is_stmt 0 view .LVU2713
 8428 0312 4021     		movs	r1, #64
 923:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8429              		.loc 1 923 27 view .LVU2714
 8430 0314 0522     		movs	r2, #5
 8431 0316 26E0     		b	.L818
 8432              	.L913:
ARM GAS  /tmp/cchf4YwX.s 			page 258


 8433              		.align	2
 8434              	.L912:
 8435 0318 00000000 		.word	main_ram
 8436 031c 00000000 		.word	.LANCHOR15
 8437 0320 00000000 		.word	StateWhileOn
 8438 0324 28000000 		.word	.LC10
 8439 0328 24000000 		.word	.LC9
 8440 032c 10000000 		.word	.LC6
 8441 0330 1C000000 		.word	.LC8
 8442 0334 58000000 		.word	.LC17
 8443 0338 08000000 		.word	.LC4
 8444 033c 4C000000 		.word	.LC15
 8445 0340 00000000 		.word	.LANCHOR16
 8446 0344 00000000 		.word	.LC2
 8447 0348 00000000 		.word	RectPolConv
 8448 034c 00000000 		.word	IntMaxWindow
 8449 0350 00000000 		.word	ShowRegister
 8450 0354 00000000 		.word	.LANCHOR17
 8451              	.LVL927:
 8452              	.L910:
 929:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8453              		.loc 1 929 15 view .LVU2715
 8454 0358 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8455              	.LVL928:
 929:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8456              		.loc 1 929 14 view .LVU2716
 8457 035c 0029     		cmp	r1, #0
 8458 035e 3FF41EAF 		beq	.L775
 8459 0362 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8460              	.LVL929:
 8461              	.L818:
 930:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8462              		.loc 1 930 3 is_stmt 1 view .LVU2717
 8463 0366 2846     		mov	r0, r5
 8464 0368 FFF7FEFF 		bl	replace_char
 8465              	.LVL930:
 931:src/display.c **** 		  goto skip;
 8466              		.loc 1 931 3 view .LVU2718
 931:src/display.c **** 		  goto skip;
 8467              		.loc 1 931 7 is_stmt 0 view .LVU2719
 8468 036c 0121     		movs	r1, #1
 8469 036e 2846     		mov	r0, r5
 8470 0370 FFF7FEFF 		bl	pixel_length
 8471              	.LVL931:
 934:src/display.c **** 	      }
 8472              		.loc 1 934 3 is_stmt 1 view .LVU2720
 929:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8473              		.loc 1 929 14 view .LVU2721
 931:src/display.c **** 		  goto skip;
 8474              		.loc 1 931 6 is_stmt 0 view .LVU2722
 8475 0374 2C28     		cmp	r0, #44
 8476 0376 EFDC     		bgt	.L910
 8477 0378 11E7     		b	.L775
 8478              	.LVL932:
 8479              	.L785:
 931:src/display.c **** 		  goto skip;
 8480              		.loc 1 931 6 view .LVU2723
ARM GAS  /tmp/cchf4YwX.s 			page 259


 8481              	.LBE512:
 8482              	.LBE511:
 788:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8483              		.loc 1 788 4 is_stmt 1 view .LVU2724
 789:src/display.c **** 	  *p2++ = shift_char;
 8484              		.loc 1 789 4 view .LVU2725
 788:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8485              		.loc 1 788 10 is_stmt 0 view .LVU2726
 8486 037a 4CF20773 		movw	r3, #50951
 790:src/display.c **** 	}
 8487              		.loc 1 790 10 view .LVU2727
 8488 037e 8DF85E80 		strb	r8, [sp, #94]
 788:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8489              		.loc 1 788 10 view .LVU2728
 8490 0382 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 790:src/display.c **** 	}
 8491              		.loc 1 790 4 is_stmt 1 view .LVU2729
 8492              	.LVL933:
 790:src/display.c **** 	}
 8493              		.loc 1 790 7 is_stmt 0 view .LVU2730
 8494 0386 0DF15F08 		add	r8, sp, #95
 8495              	.LVL934:
 790:src/display.c **** 	}
 8496              		.loc 1 790 7 view .LVU2731
 8497 038a 6AE6     		b	.L786
 8498              	.LVL935:
 8499              	.L892:
 790:src/display.c **** 	}
 8500              		.loc 1 790 7 view .LVU2732
 8501 038c 7D4E     		ldr	r6, .L914
 8502 038e 6EE7     		b	.L772
 8503              	.LVL936:
 8504              	.L899:
 862:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8505              		.loc 1 862 29 discriminator 1 view .LVU2733
 8506 0390 03F04101 		and	r1, r3, #65
 8507 0394 4129     		cmp	r1, #65
 8508 0396 3FF4B0AE 		beq	.L799
 609:src/display.c ****       char buf2[42], *p2 = buf2;
 8509              		.loc 1 609 22 view .LVU2734
 8510 039a A846     		mov	r8, r5
 8511 039c B9E6     		b	.L798
 8512              	.LVL937:
 8513              	.L905:
 984:src/display.c ****       set_status_top_always(buf2);
 8514              		.loc 1 984 27 is_stmt 1 discriminator 1 view .LVU2735
 8515 039e 2846     		mov	r0, r5
 8516 03a0 FFF7FEFF 		bl	set_status
 8517              	.LVL938:
 985:src/display.c ****       
 8518              		.loc 1 985 7 discriminator 1 view .LVU2736
 8519              	.LBB518:
 8520              	.LBI501:
3643:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8521              		.loc 1 3643 19 discriminator 1 view .LVU2737
 8522              	.LBB508:
3644:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
ARM GAS  /tmp/cchf4YwX.s 			page 260


 8523              		.loc 1 3644 2 discriminator 1 view .LVU2738
3644:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8524              		.loc 1 3644 6 is_stmt 0 discriminator 1 view .LVU2739
 8525 03a4 784B     		ldr	r3, .L914+4
3644:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8526              		.loc 1 3644 5 discriminator 1 view .LVU2740
 8527 03a6 B3F90030 		ldrsh	r3, [r3]
 8528 03aa 002B     		cmp	r3, #0
 8529 03ac 6DD1     		bne	.L823
 8530 03ae B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
 8531 03b0 F9E6     		b	.L824
 8532              	.LVL939:
 8533              	.L816:
3644:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8534              		.loc 1 3644 5 discriminator 1 view .LVU2741
 8535              	.LBE508:
 8536              	.LBE518:
 8537              	.LBB519:
 938:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8538              		.loc 1 938 6 is_stmt 1 view .LVU2742
 938:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8539              		.loc 1 938 21 is_stmt 0 view .LVU2743
 8540 03b2 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 938:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8541              		.loc 1 938 9 view .LVU2744
 8542 03b6 9806     		lsls	r0, r3, #26
 8543 03b8 3CD5     		bpl	.L813
 940:src/display.c **** #endif
 8544              		.loc 1 940 6 view .LVU2745
 8545 03ba 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 940:src/display.c **** #endif
 8546              		.loc 1 940 3 view .LVU2746
 8547 03bc 13F00204 		ands	r4, r3, #2
 8548 03c0 38D1     		bne	.L813
 943:src/display.c **** #endif
 8549              		.loc 1 943 6 view .LVU2747
 8550 03c2 724B     		ldr	r3, .L914+8
 943:src/display.c **** #endif
 8551              		.loc 1 943 3 view .LVU2748
 8552 03c4 1B68     		ldr	r3, [r3]
 8553 03c6 012B     		cmp	r3, #1
 8554 03c8 34D0     		beq	.L813
 945:src/display.c **** 	      char ltgteq;
 8555              		.loc 1 945 6 view .LVU2749
 8556 03ca 4146     		mov	r1, r8
 8557 03cc 3846     		mov	r0, r7
 8558 03ce FFF7FEFF 		bl	set_x_fract
 8559              	.LVL940:
 945:src/display.c **** 	      char ltgteq;
 8560              		.loc 1 945 3 view .LVU2750
 8561 03d2 78B3     		cbz	r0, .L813
 8562              	.LBB513:
 946:src/display.c **** 
 8563              		.loc 1 946 8 is_stmt 1 view .LVU2751
 948:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8564              		.loc 1 948 8 view .LVU2752
 948:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
ARM GAS  /tmp/cchf4YwX.s 			page 261


 8565              		.loc 1 948 12 is_stmt 0 view .LVU2753
 8566 03d4 2146     		mov	r1, r4
 8567 03d6 2846     		mov	r0, r5
 8568 03d8 FFF7FEFF 		bl	find_char
 8569              	.LVL941:
 8570 03dc 0446     		mov	r4, r0
 948:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8571              		.loc 1 948 10 view .LVU2754
 8572 03de 0238     		subs	r0, r0, #2
 8573              	.LVL942:
 950:src/display.c **** 	      switch (ltgteq) {
 8574              		.loc 1 950 8 is_stmt 1 view .LVU2755
 950:src/display.c **** 	      switch (ltgteq) {
 8575              		.loc 1 950 15 is_stmt 0 view .LVU2756
 8576 03e0 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8577              	.LVL943:
 951:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8578              		.loc 1 951 8 is_stmt 1 view .LVU2757
 8579 03e4 B9F1470F 		cmp	r9, #71
 8580 03e8 00F0C980 		beq	.L842
 953:src/display.c **** 	      }
 8581              		.loc 1 953 25 is_stmt 0 view .LVU2758
 8582 03ec B9F14C0F 		cmp	r9, #76
 8583 03f0 08BF     		it	eq
 8584 03f2 4FF03C09 		moveq	r9, #60
 8585              	.LVL944:
 8586              	.L820:
 955:src/display.c **** 	      q[2] = ltgteq;
 8587              		.loc 1 955 8 is_stmt 1 view .LVU2759
 8588 03f6 6649     		ldr	r1, .L914+12
 8589 03f8 FFF7FEFF 		bl	scopy
 8590              	.LVL945:
 956:src/display.c **** 
 8591              		.loc 1 956 8 view .LVU2760
 956:src/display.c **** 
 8592              		.loc 1 956 13 is_stmt 0 view .LVU2761
 8593 03fc 84F80090 		strb	r9, [r4]
 958:src/display.c **** 		goto skip;
 8594              		.loc 1 958 8 is_stmt 1 view .LVU2762
 958:src/display.c **** 		goto skip;
 8595              		.loc 1 958 12 is_stmt 0 view .LVU2763
 8596 0400 0121     		movs	r1, #1
 8597 0402 2846     		mov	r0, r5
 8598 0404 FFF7FEFF 		bl	pixel_length
 8599              	.LVL946:
 958:src/display.c **** 		goto skip;
 8600              		.loc 1 958 11 view .LVU2764
 8601 0408 2C28     		cmp	r0, #44
 8602 040a 7FF7C8AE 		ble	.L775
 961:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8603              		.loc 1 961 8 is_stmt 1 view .LVU2765
 961:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8604              		.loc 1 961 14 is_stmt 0 view .LVU2766
 8605 040e 4FF00009 		mov	r9, #0
 8606              	.LVL947:
 961:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8607              		.loc 1 961 14 view .LVU2767
ARM GAS  /tmp/cchf4YwX.s 			page 262


 8608 0412 04F8039C 		strb	r9, [r4, #-3]
 962:src/display.c **** 		goto skip;
 8609              		.loc 1 962 8 is_stmt 1 view .LVU2768
 962:src/display.c **** 		goto skip;
 8610              		.loc 1 962 12 is_stmt 0 view .LVU2769
 8611 0416 0121     		movs	r1, #1
 8612 0418 2846     		mov	r0, r5
 8613 041a FFF7FEFF 		bl	pixel_length
 8614              	.LVL948:
 962:src/display.c **** 		goto skip;
 8615              		.loc 1 962 11 view .LVU2770
 8616 041e 2C28     		cmp	r0, #44
 8617 0420 7FF7BDAE 		ble	.L775
 965:src/display.c **** 	    }
 8618              		.loc 1 965 8 is_stmt 1 view .LVU2771
 965:src/display.c **** 	    }
 8619              		.loc 1 965 39 is_stmt 0 view .LVU2772
 8620 0424 A8EB0502 		sub	r2, r8, r5
 965:src/display.c **** 	    }
 8621              		.loc 1 965 8 view .LVU2773
 8622 0428 4946     		mov	r1, r9
 8623 042a C2F12A02 		rsb	r2, r2, #42
 8624 042e 4046     		mov	r0, r8
 8625 0430 FFF7FEFF 		bl	xset
 8626              	.LVL949:
 8627              	.L813:
 965:src/display.c **** 	    }
 8628              		.loc 1 965 8 view .LVU2774
 8629              	.LBE513:
 968:src/display.c **** 	    int extra_pixels;
 8630              		.loc 1 968 4 is_stmt 1 view .LVU2775
 968:src/display.c **** 	    int extra_pixels;
 8631              		.loc 1 968 10 is_stmt 0 view .LVU2776
 8632 0434 0C23     		movs	r3, #12
 8633 0436 0293     		str	r3, [sp, #8]
 968:src/display.c **** 	    int extra_pixels;
 8634              		.loc 1 968 27 is_stmt 1 view .LVU2777
 8635 0438 0FE0     		b	.L822
 8636              	.LVL950:
 8637              	.L911:
 8638              	.LBB514:
 976:src/display.c **** 
 8639              		.loc 1 976 6 is_stmt 0 view .LVU2778
 8640 043a 029A     		ldr	r2, [sp, #8]
 8641 043c 0A32     		adds	r2, r2, #10
 8642 043e FFF7FEFF 		bl	xset
 8643              	.LVL951:
 978:src/display.c **** 	  }
 8644              		.loc 1 978 6 is_stmt 1 view .LVU2779
 978:src/display.c **** 	  }
 8645              		.loc 1 978 30 is_stmt 0 view .LVU2780
 8646 0442 B4F14802 		subs	r2, r4, #72
 978:src/display.c **** 	  }
 8647              		.loc 1 978 8 view .LVU2781
 8648 0446 029B     		ldr	r3, [sp, #8]
 978:src/display.c **** 	  }
 8649              		.loc 1 978 30 view .LVU2782
ARM GAS  /tmp/cchf4YwX.s 			page 263


 8650 0448 48BF     		it	mi
 8651 044a A4F14502 		submi	r2, r4, #69
 978:src/display.c **** 	  }
 8652              		.loc 1 978 8 view .LVU2783
 8653 044e A3EBA203 		sub	r3, r3, r2, asr #2
 8654              	.LBE514:
 968:src/display.c **** 	    int extra_pixels;
 8655              		.loc 1 968 4 view .LVU2784
 8656 0452 012B     		cmp	r3, #1
 8657              	.LBB515:
 978:src/display.c **** 	  }
 8658              		.loc 1 978 8 view .LVU2785
 8659 0454 0293     		str	r3, [sp, #8]
 8660              	.LBE515:
 968:src/display.c **** 	    int extra_pixels;
 8661              		.loc 1 968 27 is_stmt 1 view .LVU2786
 968:src/display.c **** 	    int extra_pixels;
 8662              		.loc 1 968 4 is_stmt 0 view .LVU2787
 8663 0456 7FF7A2AE 		ble	.L775
 8664              	.LVL952:
 8665              	.L822:
 8666              	.LBB516:
 969:src/display.c **** 
 8667              		.loc 1 969 6 is_stmt 1 view .LVU2788
 971:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8668              		.loc 1 971 6 view .LVU2789
 8669 045a 02AA     		add	r2, sp, #8
 8670 045c 4146     		mov	r1, r8
 8671 045e 3846     		mov	r0, r7
 8672 0460 FFF7FEFF 		bl	set_x_dn
 8673              	.LVL953:
 972:src/display.c **** 	    if (extra_pixels <= 0)
 8674              		.loc 1 972 6 view .LVU2790
 972:src/display.c **** 	    if (extra_pixels <= 0)
 8675              		.loc 1 972 21 is_stmt 0 view .LVU2791
 8676 0464 0121     		movs	r1, #1
 8677 0466 2846     		mov	r0, r5
 8678 0468 FFF7FEFF 		bl	pixel_length
 8679              	.LVL954:
 976:src/display.c **** 
 8680              		.loc 1 976 6 is_stmt 1 view .LVU2792
 972:src/display.c **** 	    if (extra_pixels <= 0)
 8681              		.loc 1 972 21 is_stmt 0 view .LVU2793
 8682 046c 0446     		mov	r4, r0
 8683              	.LVL955:
 973:src/display.c **** 	      break;
 8684              		.loc 1 973 6 is_stmt 1 view .LVU2794
 973:src/display.c **** 	      break;
 8685              		.loc 1 973 9 is_stmt 0 view .LVU2795
 8686 046e 4B2C     		cmp	r4, #75
 976:src/display.c **** 
 8687              		.loc 1 976 6 view .LVU2796
 8688 0470 4FF00001 		mov	r1, #0
 8689 0474 4046     		mov	r0, r8
 8690              	.LVL956:
 973:src/display.c **** 	      break;
 8691              		.loc 1 973 9 view .LVU2797
ARM GAS  /tmp/cchf4YwX.s 			page 264


 8692 0476 E0DC     		bgt	.L911
 8693              	.LVL957:
 973:src/display.c **** 	      break;
 8694              		.loc 1 973 9 view .LVU2798
 8695              	.LBE516:
 8696 0478 91E6     		b	.L775
 8697              	.LVL958:
 8698              	.L796:
 973:src/display.c **** 	      break;
 8699              		.loc 1 973 9 view .LVU2799
 8700              	.LBE519:
 859:src/display.c **** 	  p = scopy(p, q);
 8701              		.loc 1 859 4 is_stmt 1 view .LVU2800
 860:src/display.c **** 	}
 8702              		.loc 1 860 4 view .LVU2801
 860:src/display.c **** 	}
 8703              		.loc 1 860 8 is_stmt 0 view .LVU2802
 8704 047a 4649     		ldr	r1, .L914+16
 8705 047c 2846     		mov	r0, r5
 8706 047e FFF7FEFF 		bl	scopy
 8707              	.LVL959:
 8708 0482 D9F80020 		ldr	r2, [r9]
 8709 0486 8046     		mov	r8, r0
 8710              	.LVL960:
 860:src/display.c **** 	}
 8711              		.loc 1 860 6 view .LVU2803
 8712 0488 43E6     		b	.L798
 8713              	.LVL961:
 8714              	.L823:
 8715              	.LBB520:
 8716              	.LBB509:
3644:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8717              		.loc 1 3644 22 view .LVU2804
 8718 048a B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
 8719 048c 5A06     		lsls	r2, r3, #25
 8720 048e 7FF58AAE 		bpl	.L824
 8721              	.LBE509:
 8722              	.LBE520:
 987:src/display.c **** #else
 8723              		.loc 1 987 5 view .LVU2805
 8724 0492 23B0     		add	sp, sp, #140
 8725              		.cfi_remember_state
 8726              		.cfi_def_cfa_offset 28
 8727              		@ sp needed
 8728 0494 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8729              	.LVL962:
 8730              	.L897:
 8731              		.cfi_restore_state
 795:src/display.c **** 	  *p2++ = '\207';
 8732              		.loc 1 795 4 is_stmt 1 view .LVU2806
 796:src/display.c **** 	  *p2++ = '\007';	    
 8733              		.loc 1 796 4 view .LVU2807
 797:src/display.c **** 	}
 8734              		.loc 1 797 10 is_stmt 0 view .LVU2808
 8735 0498 88F80230 		strb	r3, [r8, #2]
 796:src/display.c **** 	  *p2++ = '\007';	    
 8736              		.loc 1 796 10 view .LVU2809
ARM GAS  /tmp/cchf4YwX.s 			page 265


 8737 049c 88F80120 		strb	r2, [r8, #1]
 797:src/display.c **** 	}
 8738              		.loc 1 797 4 is_stmt 1 view .LVU2810
 797:src/display.c **** 	}
 8739              		.loc 1 797 7 is_stmt 0 view .LVU2811
 8740 04a0 08F10308 		add	r8, r8, #3
 8741              	.LVL963:
 797:src/display.c **** 	}
 8742              		.loc 1 797 7 view .LVU2812
 8743 04a4 EEE5     		b	.L788
 8744              	.LVL964:
 8745              	.L836:
 829:src/display.c **** #endif
 8746              		.loc 1 829 19 view .LVU2813
 8747 04a6 3C49     		ldr	r1, .L914+20
 8748 04a8 05E6     		b	.L790
 8749              	.LVL965:
 8750              	.L900:
 881:src/display.c **** 	    p = scopy(p, q);
 8751              		.loc 1 881 6 is_stmt 1 view .LVU2814
 882:src/display.c **** 	    //	    goto no_copy;
 8752              		.loc 1 882 6 view .LVU2815
 882:src/display.c **** 	    //	    goto no_copy;
 8753              		.loc 1 882 10 is_stmt 0 view .LVU2816
 8754 04aa 4046     		mov	r0, r8
 8755 04ac 3B49     		ldr	r1, .L914+24
 8756 04ae FFF7FEFF 		bl	scopy
 8757              	.LVL966:
 8758 04b2 8046     		mov	r8, r0
 8759              	.LVL967:
 882:src/display.c **** 	    //	    goto no_copy;
 8760              		.loc 1 882 10 view .LVU2817
 8761 04b4 30E6     		b	.L801
 8762              	.LVL968:
 8763              	.L901:
 725:src/display.c **** 	  *p2 = '\024';
 8764              		.loc 1 725 4 is_stmt 1 view .LVU2818
 725:src/display.c **** 	  *p2 = '\024';
 8765              		.loc 1 725 10 is_stmt 0 view .LVU2819
 8766 04b6 2022     		movs	r2, #32
 726:src/display.c **** 	  goto skip;
 8767              		.loc 1 726 8 view .LVU2820
 8768 04b8 1423     		movs	r3, #20
 725:src/display.c **** 	  *p2 = '\024';
 8769              		.loc 1 725 10 view .LVU2821
 8770 04ba 0270     		strb	r2, [r0]
 726:src/display.c **** 	  goto skip;
 8771              		.loc 1 726 4 is_stmt 1 view .LVU2822
 726:src/display.c **** 	  goto skip;
 8772              		.loc 1 726 8 is_stmt 0 view .LVU2823
 8773 04bc 4370     		strb	r3, [r0, #1]
 727:src/display.c **** 	}
 8774              		.loc 1 727 4 is_stmt 1 view .LVU2824
 8775 04be 6EE6     		b	.L775
 8776              	.LVL969:
 8777              	.L909:
 8778              	.LBB521:
ARM GAS  /tmp/cchf4YwX.s 			page 266


 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8779              		.loc 1 903 77 is_stmt 0 discriminator 2 view .LVU2825
 8780 04c0 FFF7FEFF 		bl	stack_size
 8781              	.LVL970:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8782              		.loc 1 903 64 discriminator 2 view .LVU2826
 8783 04c4 D9F80010 		ldr	r1, [r9]
 8784 04c8 6330     		adds	r0, r0, #99
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8785              		.loc 1 903 48 discriminator 2 view .LVU2827
 8786 04ca 8842     		cmp	r0, r1
 8787 04cc FFF6E7AE 		blt	.L807
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8788              		.loc 1 903 93 discriminator 4 view .LVU2828
 8789 04d0 FFF7FEFF 		bl	get_cmdline
 8790              	.LVL971:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8791              		.loc 1 903 90 discriminator 4 view .LVU2829
 8792 04d4 20B1     		cbz	r0, .L810
 904:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8793              		.loc 1 904 9 view .LVU2830
 8794 04d6 002F     		cmp	r7, #0
 8795 04d8 4CD0     		beq	.L809
 904:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8796              		.loc 1 904 30 discriminator 1 view .LVU2831
 8797 04da F37D     		ldrb	r3, [r6, #23]	@ zero_extendqisi2
 904:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8798              		.loc 1 904 12 discriminator 1 view .LVU2832
 8799 04dc 5906     		lsls	r1, r3, #25
 8800 04de 49D4     		bmi	.L809
 8801              	.L810:
 8802 04e0 D9F80010 		ldr	r1, [r9]
 8803 04e4 DBE6     		b	.L807
 8804              	.L907:
 895:src/display.c **** 	    goto skip;
 8805              		.loc 1 895 6 is_stmt 1 view .LVU2833
 8806 04e6 6520     		movs	r0, #101
 8807 04e8 FFF7FEFF 		bl	get_reg_n_int
 8808              	.LVL972:
 8809 04ec 4246     		mov	r2, r8
 8810 04ee FFF7FEFF 		bl	set_int_x
 8811              	.LVL973:
 896:src/display.c **** 	  }
 8812              		.loc 1 896 6 view .LVU2834
 8813 04f2 54E6     		b	.L775
 8814              	.L908:
 900:src/display.c **** 	  }
 8815              		.loc 1 900 6 view .LVU2835
 8816 04f4 03AF     		add	r7, sp, #12
 8817              	.LVL974:
 900:src/display.c **** 	  }
 8818              		.loc 1 900 6 is_stmt 0 view .LVU2836
 8819 04f6 3846     		mov	r0, r7
 8820 04f8 6F21     		movs	r1, #111
 8821 04fa FFF7FEFF 		bl	getRegister
 8822              	.LVL975:
 8823 04fe D3E6     		b	.L806
ARM GAS  /tmp/cchf4YwX.s 			page 267


 8824              	.LVL976:
 8825              	.L898:
 900:src/display.c **** 	  }
 8826              		.loc 1 900 6 view .LVU2837
 8827              	.LBE521:
 849:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8828              		.loc 1 849 4 is_stmt 1 view .LVU2838
 850:src/display.c **** 	  }
 8829              		.loc 1 850 6 view .LVU2839
 853:src/display.c **** 	  }
 8830              		.loc 1 853 6 view .LVU2840
 849:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8831              		.loc 1 849 7 is_stmt 0 view .LVU2841
 8832 0500 1906     		lsls	r1, r3, #24
 850:src/display.c **** 	  }
 8833              		.loc 1 850 33 view .LVU2842
 8834 0502 4BBF     		itete	mi
 8835 0504 264A     		ldrmi	r2, .L914+28
 853:src/display.c **** 	  }
 8836              		.loc 1 853 31 view .LVU2843
 8837 0506 274A     		ldrpl	r2, .L914+32
 850:src/display.c **** 	  }
 8838              		.loc 1 850 33 view .LVU2844
 8839 0508 2749     		ldrmi	r1, .L914+36
 853:src/display.c **** 	  }
 8840              		.loc 1 853 31 view .LVU2845
 8841 050a 2849     		ldrpl	r1, .L914+40
 8842 050c 13F0020F 		tst	r3, #2
 8843 0510 08BF     		it	eq
 8844 0512 1146     		moveq	r1, r2
 8845              	.LVL977:
 855:src/display.c **** 	  goto skip;
 8846              		.loc 1 855 4 is_stmt 1 view .LVU2846
 8847 0514 2846     		mov	r0, r5
 8848 0516 FFF7FEFF 		bl	scopy
 8849              	.LVL978:
 856:src/display.c **** 	}
 8850              		.loc 1 856 4 view .LVU2847
 8851 051a 40E6     		b	.L775
 8852              	.LVL979:
 8853              	.L777:
 716:src/display.c **** 	    *p2++ = shift_char;
 8854              		.loc 1 716 30 is_stmt 0 discriminator 1 view .LVU2848
 8855 051c FFF7FEFF 		bl	is_dblmode
 8856              	.LVL980:
 716:src/display.c **** 	    *p2++ = shift_char;
 8857              		.loc 1 716 26 discriminator 1 view .LVU2849
 8858 0520 0028     		cmp	r0, #0
 8859 0522 3FF413AE 		beq	.L779
 721:src/display.c **** 	  }
 8860              		.loc 1 721 6 is_stmt 1 view .LVU2850
 8861              	.LVL981:
 721:src/display.c **** 	  }
 8862              		.loc 1 721 12 is_stmt 0 view .LVU2851
 8863 0526 4423     		movs	r3, #68
 8864 0528 8DF85C30 		strb	r3, [sp, #92]
 721:src/display.c **** 	  }
ARM GAS  /tmp/cchf4YwX.s 			page 268


 8865              		.loc 1 721 9 view .LVU2852
 8866 052c 0DF15D00 		add	r0, sp, #93
 8867              	.LVL982:
 721:src/display.c **** 	  }
 8868              		.loc 1 721 9 view .LVU2853
 8869 0530 13E6     		b	.L778
 8870              	.L902:
 730:src/display.c **** 	  *p2 = '\015';
 8871              		.loc 1 730 4 is_stmt 1 view .LVU2854
 8872              	.LVL983:
 730:src/display.c **** 	  *p2 = '\015';
 8873              		.loc 1 730 10 is_stmt 0 view .LVU2855
 8874 0532 2022     		movs	r2, #32
 731:src/display.c **** 	  goto skip;
 8875              		.loc 1 731 8 view .LVU2856
 8876 0534 0D23     		movs	r3, #13
 730:src/display.c **** 	  *p2 = '\015';
 8877              		.loc 1 730 10 view .LVU2857
 8878 0536 0270     		strb	r2, [r0]
 731:src/display.c **** 	  goto skip;
 8879              		.loc 1 731 4 is_stmt 1 view .LVU2858
 731:src/display.c **** 	  goto skip;
 8880              		.loc 1 731 8 is_stmt 0 view .LVU2859
 8881 0538 4370     		strb	r3, [r0, #1]
 732:src/display.c **** 	}
 8882              		.loc 1 732 4 is_stmt 1 view .LVU2860
 8883 053a 30E6     		b	.L775
 8884              	.LVL984:
 8885              	.L903:
 735:src/display.c **** 	  if (State2.wascomplex) {
 8886              		.loc 1 735 28 is_stmt 0 discriminator 1 view .LVU2861
 8887 053c 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
 735:src/display.c **** 	  if (State2.wascomplex) {
 8888              		.loc 1 735 24 discriminator 1 view .LVU2862
 8889 053e 13F0C00F 		tst	r3, #192
 8890 0542 1AD1     		bne	.L831
 735:src/display.c **** 	  if (State2.wascomplex) {
 8891              		.loc 1 735 60 discriminator 2 view .LVU2863
 8892 0544 114B     		ldr	r3, .L914+8
 8893 0546 1B68     		ldr	r3, [r3]
 735:src/display.c **** 	  if (State2.wascomplex) {
 8894              		.loc 1 735 46 discriminator 2 view .LVU2864
 8895 0548 002B     		cmp	r3, #0
 8896 054a 3FF412AE 		beq	.L782
 736:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8897              		.loc 1 736 4 is_stmt 1 view .LVU2865
 739:src/display.c **** 	    if (RectPolConv == 1) {
 8898              		.loc 1 739 9 view .LVU2866
 740:src/display.c **** 	      q = "\007\306<";
 8899              		.loc 1 740 6 view .LVU2867
 744:src/display.c **** 	    }
 8900              		.loc 1 744 10 is_stmt 0 view .LVU2868
 8901 054e 1849     		ldr	r1, .L914+44
 8902 0550 184A     		ldr	r2, .L914+48
 8903 0552 012B     		cmp	r3, #1
 8904 0554 18BF     		it	ne
 8905 0556 1146     		movne	r1, r2
ARM GAS  /tmp/cchf4YwX.s 			page 269


 8906              	.L783:
 8907              	.LVL985:
 747:src/display.c **** 
 8908              		.loc 1 747 4 is_stmt 1 view .LVU2869
 747:src/display.c **** 
 8909              		.loc 1 747 8 is_stmt 0 view .LVU2870
 8910 0558 2846     		mov	r0, r5
 8911              	.LVL986:
 747:src/display.c **** 
 8912              		.loc 1 747 8 view .LVU2871
 8913 055a FFF7FEFF 		bl	scopy
 8914              	.LVL987:
 747:src/display.c **** 
 8915              		.loc 1 747 8 view .LVU2872
 8916 055e 8046     		mov	r8, r0
 8917              	.LVL988:
 749:src/display.c **** 	}
 8918              		.loc 1 749 4 is_stmt 1 view .LVU2873
 8919 0560 88E6     		b	.L765
 8920              	.LVL989:
 8921              	.L833:
 758:src/display.c **** #endif
 8922              		.loc 1 758 19 is_stmt 0 view .LVU2874
 8923 0562 0D49     		ldr	r1, .L914+20
 8924 0564 13E6     		b	.L784
 8925              	.LVL990:
 8926              	.L890:
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8927              		.loc 1 689 4 is_stmt 1 view .LVU2875
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8928              		.loc 1 689 11 is_stmt 0 view .LVU2876
 8929 0566 0293     		str	r3, [sp, #8]
 689:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8930              		.loc 1 689 27 is_stmt 1 view .LVU2877
 8931 0568 72E6     		b	.L827
 8932              	.LVL991:
 8933              	.L904:
 769:src/display.c **** 	}
 8934              		.loc 1 769 4 view .LVU2878
 8935 056a 1349     		ldr	r1, .L914+52
 8936 056c 2046     		mov	r0, r4
 8937 056e FFF7FEFF 		bl	scopy
 8938              	.LVL992:
 8939 0572 14E6     		b	.L775
 8940              	.LVL993:
 8941              	.L809:
 8942              	.LBB522:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8943              		.loc 1 903 6 is_stmt 0 discriminator 7 view .LVU2879
 8944 0574 D9F80010 		ldr	r1, [r9]
 8945 0578 92E6     		b	.L811
 8946              	.LVL994:
 8947              	.L831:
 903:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8948              		.loc 1 903 6 discriminator 7 view .LVU2880
 8949              	.LBE522:
 737:src/display.c **** 	  }
ARM GAS  /tmp/cchf4YwX.s 			page 270


 8950              		.loc 1 737 8 view .LVU2881
 8951 057a 1049     		ldr	r1, .L914+56
 8952 057c ECE7     		b	.L783
 8953              	.LVL995:
 8954              	.L842:
 8955              	.LBB523:
 8956              	.LBB517:
 952:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8957              		.loc 1 952 25 view .LVU2882
 8958 057e 4FF03E09 		mov	r9, #62
 8959              	.LVL996:
 952:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8960              		.loc 1 952 25 view .LVU2883
 8961 0582 38E7     		b	.L820
 8962              	.L915:
 8963              		.align	2
 8964              	.L914:
 8965 0584 00000000 		.word	StateWhileOn
 8966 0588 00000000 		.word	.LANCHOR18
 8967 058c 00000000 		.word	RectPolConv
 8968 0590 68000000 		.word	.LC21
 8969 0594 60000000 		.word	.LC18
 8970 0598 14000000 		.word	.LC7
 8971 059c 64000000 		.word	.LC19
 8972 05a0 3C000000 		.word	.LC13
 8973 05a4 44000000 		.word	.LC14
 8974 05a8 2C000000 		.word	.LC11
 8975 05ac 34000000 		.word	.LC12
 8976 05b0 04000000 		.word	.LC3
 8977 05b4 0C000000 		.word	.LC5
 8978 05b8 50000000 		.word	.LC16
 8979 05bc 08000000 		.word	.LC4
 8980              	.LBE517:
 8981              	.LBE523:
 8982              		.cfi_endproc
 8983              	.LFE16:
 8985              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8986              		.align	2
 8987              	.LC22:
 8988 0000 0D00     		.ascii	"\015\000"
 8989 0002 0000     		.align	2
 8990              	.LC23:
 8991 0004 060600   		.ascii	"\006\006\000"
 8992 0007 00       		.align	2
 8993              	.LC25:
 8994 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8994      492C2057 
 8994      77414C74 
 8994      4500
 8995 0016 0000     		.align	2
 8996              	.LC26:
 8997 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8997      2055204C 
 8997      20492C20 
 8997      20572041 
 8997      204C2054 
 8998 0032 0000     		.align	2
ARM GAS  /tmp/cchf4YwX.s 			page 271


 8999              	.LC27:
 9000 0034 2000     		.ascii	" \000"
 9001 0036 0000     		.align	2
 9002              	.LC28:
 9003 0038 48595000 		.ascii	"HYP\000"
 9004              		.align	2
 9005              	.LC29:
 9006 003c 7F060600 		.ascii	"\177\006\006\000"
 9007              		.align	2
 9008              	.LC32:
 9009 0040 3020746F 		.ascii	"0 to 255\000"
 9009      20323535 
 9009      00
 9010 0049 000000   		.align	2
 9011              	.LC33:
 9012 004c 46726565 		.ascii	"Free:\000"
 9012      3A00
 9013 0052 0000     		.align	2
 9014              	.LC34:
 9015 0054 202C2046 		.ascii	" , FL. \000"
 9015      4C2E2000 
 9016              		.align	2
 9017              	.LC35:
 9018 005c 52656773 		.ascii	"Regs:\000"
 9018      3A00
 9019 0062 0000     		.align	2
 9020              	.LC36:
 9021 0064 20910606 		.ascii	" \221\006\006+\000"
 9021      2B00
 9022 006a 0000     		.align	2
 9023              	.LC37:
 9024 006c 202C204C 		.ascii	" , Loc. \000"
 9024      6F632E20 
 9024      00
 9025 0075 000000   		.align	2
 9026              	.LC38:
 9027 0078 464C2000 		.ascii	"FL \000"
 9028              		.align	2
 9029              	.LC39:
 9030 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 9030      06413A44 
 9030      064C494A 
 9030      4B00
 9031 008a 0000     		.align	2
 9032              	.LC40:
 9033 008c 464C2E30 		.ascii	"FL.00-.15\000"
 9033      302D2E31 
 9033      3500
 9034 0096 0000     		.align	2
 9035              	.LC41:
 9036 0098 43414C4C 		.ascii	"CALLS\000"
 9036      5300
 9037 009e 0000     		.align	2
 9038              	.LC42:
 9039 00a0 52656720 		.ascii	"Reg \000"
 9039      00
 9040 00a5 000000   		.align	2
ARM GAS  /tmp/cchf4YwX.s 			page 272


 9041              	.LC43:
 9042 00a8 00       		.ascii	"\000"
 9043 00a9 000000   		.align	2
 9044              	.LC44:
 9045 00ac 202D2D2D 		.ascii	" ---\000"
 9045      00
 9046 00b1 000000   		.align	2
 9047              	.LC31:
 9048 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 9048      093E0A00 
 9049              		.align	2
 9050              	.LC30:
 9051 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 9051      41424344 
 9051      4C494A4B 
 9051      00
 9052              		.section	.text.display,"ax",%progbits
 9053              		.align	1
 9054              		.p2align 2,,3
 9055              		.global	display
 9056              		.syntax unified
 9057              		.thumb
 9058              		.thumb_func
 9059              		.fpu fpv4-sp-d16
 9061              	display:
 9062              	.LFB34:
2673:src/display.c **** 	int i, j;
 9063              		.loc 1 2673 26 is_stmt 1 view -0
 9064              		.cfi_startproc
 9065              		@ args = 0, pretend = 0, frame = 160
 9066              		@ frame_needed = 0, uses_anonymous_args = 0
2674:src/display.c **** 	char buf[40], *bp = buf;
 9067              		.loc 1 2674 2 view .LVU2885
2675:src/display.c **** 	const char *p;
 9068              		.loc 1 2675 2 view .LVU2886
2673:src/display.c **** 	int i, j;
 9069              		.loc 1 2673 26 is_stmt 0 view .LVU2887
 9070 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9071              		.cfi_def_cfa_offset 36
 9072              		.cfi_offset 4, -36
 9073              		.cfi_offset 5, -32
 9074              		.cfi_offset 6, -28
 9075              		.cfi_offset 7, -24
 9076              		.cfi_offset 8, -20
 9077              		.cfi_offset 9, -16
 9078              		.cfi_offset 10, -12
 9079              		.cfi_offset 11, -8
 9080              		.cfi_offset 14, -4
2678:src/display.c **** 	int skip = 0;
 9081              		.loc 1 2678 24 view .LVU2888
 9082 0004 C14C     		ldr	r4, .L1254
2683:src/display.c **** 	if (State2.disp_freeze) {
 9083              		.loc 1 2683 16 view .LVU2889
 9084 0006 DFF83893 		ldr	r9, .L1254+52
2678:src/display.c **** 	int skip = 0;
 9085              		.loc 1 2678 24 view .LVU2890
 9086 000a 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
ARM GAS  /tmp/cchf4YwX.s 			page 273


2673:src/display.c **** 	int i, j;
 9087              		.loc 1 2673 26 view .LVU2891
 9088 000e A9B0     		sub	sp, sp, #164
 9089              		.cfi_def_cfa_offset 200
 9090              	.LVL997:
2676:src/display.c **** 	int annuc = 0;
 9091              		.loc 1 2676 2 is_stmt 1 view .LVU2892
2677:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9092              		.loc 1 2677 2 view .LVU2893
2678:src/display.c **** 	int skip = 0;
 9093              		.loc 1 2678 2 view .LVU2894
2679:src/display.c **** 	int x_disp = 0;
 9094              		.loc 1 2679 2 view .LVU2895
2680:src/display.c **** 	const int shift = cur_shift();
 9095              		.loc 1 2680 2 view .LVU2896
2681:src/display.c **** 
 9096              		.loc 1 2681 2 view .LVU2897
2681:src/display.c **** 
 9097              		.loc 1 2681 20 is_stmt 0 view .LVU2898
 9098 0010 FFF7FEFF 		bl	cur_shift
 9099              	.LVL998:
2684:src/display.c **** 	  State2.disp_freeze = 0;
 9100              		.loc 1 2684 6 view .LVU2899
 9101 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2683:src/display.c **** 	if (State2.disp_freeze) {
 9102              		.loc 1 2683 16 view .LVU2900
 9103 0016 0022     		movs	r2, #0
 9104              	.LVL999:
2683:src/display.c **** 	if (State2.disp_freeze) {
 9105              		.loc 1 2683 2 is_stmt 1 view .LVU2901
2684:src/display.c **** 	  State2.disp_freeze = 0;
 9106              		.loc 1 2684 5 is_stmt 0 view .LVU2902
 9107 0018 13F01007 		ands	r7, r3, #16
2683:src/display.c **** 	if (State2.disp_freeze) {
 9108              		.loc 1 2683 16 view .LVU2903
 9109 001c A9F80020 		strh	r2, [r9]	@ movhi
2684:src/display.c **** 	  State2.disp_freeze = 0;
 9110              		.loc 1 2684 2 is_stmt 1 view .LVU2904
2684:src/display.c **** 	  State2.disp_freeze = 0;
 9111              		.loc 1 2684 5 is_stmt 0 view .LVU2905
 9112 0020 40F0F780 		bne	.L1214
2694:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9113              		.loc 1 2694 2 is_stmt 1 view .LVU2906
2694:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9114              		.loc 1 2694 6 is_stmt 0 view .LVU2907
 9115 0024 DFF81C83 		ldr	r8, .L1254+56
 9116 0028 D8F80060 		ldr	r6, [r8]
2694:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9117              		.loc 1 2694 5 view .LVU2908
 9118 002c 002E     		cmp	r6, #0
 9119 002e 40F08280 		bne	.L1215
2713:src/display.c **** #  endif
 9120              		.loc 1 2713 2 is_stmt 1 view .LVU2909
2713:src/display.c **** #  endif
 9121              		.loc 1 2713 33 is_stmt 0 view .LVU2910
 9122 0032 B74B     		ldr	r3, .L1254+4
 9123 0034 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cchf4YwX.s 			page 274


 9124 0036 0546     		mov	r5, r0
 9125 0038 93F8EAB7 		ldrb	fp, [r3, #2026]	@ zero_extendqisi2
2719:src/display.c **** 
 9126              		.loc 1 2719 2 view .LVU2911
 9127 003c FFF7FEFF 		bl	reset_disp
 9128              	.LVL1000:
2722:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9129              		.loc 1 2722 2 view .LVU2912
 9130 0040 1EA8     		add	r0, sp, #120
 9131              	.LVL1001:
2722:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9132              		.loc 1 2722 2 view .LVU2913
 9133 0042 2822     		movs	r2, #40
 9134 0044 3146     		mov	r1, r6
 9135 0046 FFF7FEFF 		bl	xset
 9136              	.LVL1002:
2728:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9137              		.loc 1 2728 6 view .LVU2914
 9138 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2728:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9139              		.loc 1 2728 5 view .LVU2915
 9140 004c D806     		lsls	r0, r3, #27
2713:src/display.c **** #  endif
 9141              		.loc 1 2713 12 view .LVU2916
 9142 004e CBF3800B 		ubfx	fp, fp, #2, #1
 9143              	.LVL1003:
2719:src/display.c **** 
 9144              		.loc 1 2719 2 is_stmt 1 view .LVU2917
2722:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9145              		.loc 1 2722 2 view .LVU2918
2728:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9146              		.loc 1 2728 2 view .LVU2919
2728:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9147              		.loc 1 2728 5 is_stmt 0 view .LVU2920
 9148 0052 00F19D81 		bmi	.L1216
2740:src/display.c **** 	  if (yreg_enabled) {
 9149              		.loc 1 2740 9 is_stmt 1 view .LVU2921
2740:src/display.c **** 	  if (yreg_enabled) {
 9150              		.loc 1 2740 13 is_stmt 0 view .LVU2922
 9151 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2740:src/display.c **** 	  if (yreg_enabled) {
 9152              		.loc 1 2740 12 view .LVU2923
 9153 0058 5107     		lsls	r1, r2, #29
 9154 005a 00F0E480 		beq	.L924
2741:src/display.c **** 	    set_status_top(S_SURE);
 9155              		.loc 1 2741 4 is_stmt 1 view .LVU2924
2741:src/display.c **** 	    set_status_top(S_SURE);
 9156              		.loc 1 2741 7 is_stmt 0 view .LVU2925
 9157 005e BBF1000F 		cmp	fp, #0
 9158 0062 00F0D681 		beq	.L925
2742:src/display.c **** 	    no_status_top = 1;
 9159              		.loc 1 2742 6 is_stmt 1 view .LVU2926
 9160              	.LVL1004:
 9161              	.LBB584:
 9162              	.LBI584:
3633:src/display.c **** 	if (no_status_top) return;
 9163              		.loc 1 3633 19 view .LVU2927
ARM GAS  /tmp/cchf4YwX.s 			page 275


 9164              	.LBB585:
3634:src/display.c **** 	if (State2.runmode) {
 9165              		.loc 1 3634 2 view .LVU2928
3634:src/display.c **** 	if (State2.runmode) {
 9166              		.loc 1 3634 5 is_stmt 0 view .LVU2929
 9167 0066 B9F90030 		ldrsh	r3, [r9]
 9168 006a 13B9     		cbnz	r3, .L927
 9169 006c A948     		ldr	r0, .L1254+8
 9170 006e FFF7FEFF 		bl	set_status_top.part.0
 9171              	.LVL1005:
 9172              	.L927:
3634:src/display.c **** 	if (State2.runmode) {
 9173              		.loc 1 3634 5 view .LVU2930
 9174              	.LBE585:
 9175              	.LBE584:
2743:src/display.c **** 	    annuc = 1;
 9176              		.loc 1 2743 6 is_stmt 1 view .LVU2931
2743:src/display.c **** 	    annuc = 1;
 9177              		.loc 1 2743 20 is_stmt 0 view .LVU2932
 9178 0072 0126     		movs	r6, #1
 9179 0074 A9F80060 		strh	r6, [r9]	@ movhi
2744:src/display.c **** 	  }
 9180              		.loc 1 2744 6 is_stmt 1 view .LVU2933
 9181              	.LVL1006:
2967:src/display.c ****       nostk:
 9182              		.loc 1 2967 2 view .LVU2934
 9183 0078 FFF7FEFF 		bl	show_stack
 9184              	.LVL1007:
2969:src/display.c **** 	if (!skip) {
 9185              		.loc 1 2969 2 view .LVU2935
 9186 007c A64B     		ldr	r3, .L1254+12
 9187 007e A74F     		ldr	r7, .L1254+16
 9188 0080 0093     		str	r3, [sp]
 9189 0082 FFF7FEFF 		bl	show_flags
 9190              	.LVL1008:
2970:src/display.c **** 	  if (State2.runmode) {
 9191              		.loc 1 2970 2 view .LVU2936
 9192              	.L928:
2971:src/display.c **** 	  only_update_x:
 9193              		.loc 1 2971 4 view .LVU2937
2971:src/display.c **** 	  only_update_x:
 9194              		.loc 1 2971 8 is_stmt 0 view .LVU2938
 9195 0086 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2971:src/display.c **** 	  only_update_x:
 9196              		.loc 1 2971 7 view .LVU2939
 9197 0088 15F04005 		ands	r5, r5, #64
 9198 008c 5FD1     		bne	.L921
 9199              	.LBB586:
3011:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9200              		.loc 1 3011 6 is_stmt 1 view .LVU2940
3011:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9201              		.loc 1 3011 24 is_stmt 0 view .LVU2941
 9202 008e A04B     		ldr	r3, .L1254+4
3015:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9203              		.loc 1 3015 6 view .LVU2942
 9204 0090 DFF8B4A2 		ldr	r10, .L1254+60
 9205              	.LVL1009:
ARM GAS  /tmp/cchf4YwX.s 			page 276


3011:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9206              		.loc 1 3011 24 view .LVU2943
 9207 0094 1B68     		ldr	r3, [r3]
3011:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9208              		.loc 1 3011 19 view .LVU2944
 9209 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 9210              	.LVL1010:
3012:src/display.c **** 	    const int n = nLIB(pc);
 9211              		.loc 1 3012 6 is_stmt 1 view .LVU2945
3012:src/display.c **** 	    const int n = nLIB(pc);
 9212              		.loc 1 3012 25 is_stmt 0 view .LVU2946
 9213 009a 5846     		mov	r0, fp
 9214 009c FFF7FEFF 		bl	user_pc
 9215              	.LVL1011:
3014:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9216              		.loc 1 3014 6 view .LVU2947
 9217 00a0 2822     		movs	r2, #40
 9218 00a2 2946     		mov	r1, r5
3012:src/display.c **** 	    const int n = nLIB(pc);
 9219              		.loc 1 3012 25 view .LVU2948
 9220 00a4 8046     		mov	r8, r0
3014:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9221              		.loc 1 3014 6 view .LVU2949
 9222 00a6 1EA8     		add	r0, sp, #120
 9223              	.LVL1012:
3013:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9224              		.loc 1 3013 6 is_stmt 1 view .LVU2950
3014:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9225              		.loc 1 3014 6 is_stmt 0 view .LVU2951
 9226 00a8 FFF7FEFF 		bl	xset
 9227              	.LVL1013:
3013:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9228              		.loc 1 3013 20 view .LVU2952
 9229 00ac 4FEA9B3B 		lsr	fp, fp, #14
 9230              	.LVL1014:
3014:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9231              		.loc 1 3014 6 is_stmt 1 view .LVU2953
3015:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9232              		.loc 1 3015 6 view .LVU2954
 9233 00b0 DAF80000 		ldr	r0, [r10]
 9234 00b4 2A46     		mov	r2, r5
 9235 00b6 0121     		movs	r1, #1
 9236 00b8 FFF7FEFF 		bl	set_exp
 9237              	.LVL1015:
3016:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9238              		.loc 1 3016 6 view .LVU2955
 9239 00bc BBF1000F 		cmp	fp, #0
 9240 00c0 40F0E681 		bne	.L1217
 9241 00c4 9649     		ldr	r1, .L1254+20
 9242 00c6 1EA8     		add	r0, sp, #120
 9243 00c8 FFF7FEFF 		bl	scopy_spc
 9244              	.LVL1016:
 9245 00cc 0322     		movs	r2, #3
 9246 00ce 4146     		mov	r1, r8
 9247 00d0 FFF7FEFF 		bl	num_arg_0
 9248              	.LVL1017:
3018:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/cchf4YwX.s 			page 277


 9249              		.loc 1 3018 6 view .LVU2956
 9250 00d4 0921     		movs	r1, #9
 9251 00d6 1EA8     		add	r0, sp, #120
 9252 00d8 FFF7FEFF 		bl	set_digits_string
 9253              	.LVL1018:
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9254              		.loc 1 3020 6 view .LVU2957
 9255 00dc 5946     		mov	r1, fp
 9256 00de 2822     		movs	r2, #40
 9257 00e0 1EA8     		add	r0, sp, #120
 9258 00e2 FFF7FEFF 		bl	xset
 9259              	.LVL1019:
3021:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9260              		.loc 1 3021 6 view .LVU2958
 9261 00e6 5A46     		mov	r2, fp
 9262 00e8 0121     		movs	r1, #1
 9263 00ea DAF80000 		ldr	r0, [r10]
 9264 00ee FFF7FEFF 		bl	set_exp
 9265              	.LVL1020:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9266              		.loc 1 3022 6 view .LVU2959
 9267 00f2 8C49     		ldr	r1, .L1254+24
3016:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9268              		.loc 1 3016 6 is_stmt 0 view .LVU2960
 9269 00f4 4FF0030B 		mov	fp, #3
 9270              	.LVL1021:
 9271              	.L1066:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9272              		.loc 1 3022 6 discriminator 4 view .LVU2961
 9273 00f8 1EA8     		add	r0, sp, #120
 9274 00fa FFF7FEFF 		bl	scopy_spc
 9275              	.LVL1022:
 9276 00fe 4146     		mov	r1, r8
 9277 0100 5A46     		mov	r2, fp
 9278 0102 FFF7FEFF 		bl	num_arg_0
 9279              	.LVL1023:
 9280              	.LBB587:
3025:src/display.c **** 	      char *l=LastDisplayedNumber;
 9281              		.loc 1 3025 8 is_stmt 1 discriminator 4 view .LVU2962
3026:src/display.c **** 	      *l++=' ';
 9282              		.loc 1 3026 8 discriminator 4 view .LVU2963
3027:src/display.c **** 	      while(*b) {
 9283              		.loc 1 3027 8 discriminator 4 view .LVU2964
3027:src/display.c **** 	      while(*b) {
 9284              		.loc 1 3027 12 is_stmt 0 discriminator 4 view .LVU2965
 9285 0106 884B     		ldr	r3, .L1254+28
3028:src/display.c **** 		*l++=*b++;
 9286              		.loc 1 3028 14 discriminator 4 view .LVU2966
 9287 0108 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3027:src/display.c **** 	      while(*b) {
 9288              		.loc 1 3027 12 discriminator 4 view .LVU2967
 9289 010c 2025     		movs	r5, #32
 9290 010e 1D70     		strb	r5, [r3]
3028:src/display.c **** 		*l++=*b++;
 9291              		.loc 1 3028 8 is_stmt 1 discriminator 4 view .LVU2968
3028:src/display.c **** 		*l++=*b++;
 9292              		.loc 1 3028 13 discriminator 4 view .LVU2969
ARM GAS  /tmp/cchf4YwX.s 			page 278


 9293 0110 0029     		cmp	r1, #0
 9294 0112 00F03883 		beq	.L1081
 9295 0116 0333     		adds	r3, r3, #3
 9296 0118 1EA8     		add	r0, sp, #120
 9297              	.LVL1024:
 9298              	.L1059:
3029:src/display.c **** 		*l++=' ';
 9299              		.loc 1 3029 3 view .LVU2970
3029:src/display.c **** 		*l++=' ';
 9300              		.loc 1 3029 7 is_stmt 0 view .LVU2971
 9301 011a 03F8021C 		strb	r1, [r3, #-2]
3030:src/display.c **** 	      }
 9302              		.loc 1 3030 3 is_stmt 1 view .LVU2972
 9303              	.LVL1025:
3028:src/display.c **** 		*l++=*b++;
 9304              		.loc 1 3028 14 is_stmt 0 view .LVU2973
 9305 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9306              	.LVL1026:
3030:src/display.c **** 	      }
 9307              		.loc 1 3030 7 view .LVU2974
 9308 0122 03F8015C 		strb	r5, [r3, #-1]
3028:src/display.c **** 		*l++=*b++;
 9309              		.loc 1 3028 13 is_stmt 1 view .LVU2975
 9310 0126 1A46     		mov	r2, r3
 9311 0128 0233     		adds	r3, r3, #2
 9312              	.LVL1027:
3028:src/display.c **** 		*l++=*b++;
 9313              		.loc 1 3028 13 is_stmt 0 view .LVU2976
 9314 012a 0029     		cmp	r1, #0
 9315 012c F5D1     		bne	.L1059
 9316              	.LVL1028:
 9317              	.L1058:
3032:src/display.c **** 	    }
 9318              		.loc 1 3032 8 is_stmt 1 view .LVU2977
3032:src/display.c **** 	    }
 9319              		.loc 1 3032 10 is_stmt 0 view .LVU2978
 9320 012e 0023     		movs	r3, #0
 9321 0130 7E4D     		ldr	r5, .L1254+32
 9322 0132 1370     		strb	r3, [r2]
 9323              	.LVL1029:
3032:src/display.c **** 	    }
 9324              		.loc 1 3032 10 view .LVU2979
 9325              	.LBE587:
 9326              	.LBE586:
3037:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9327              		.loc 1 3037 2 is_stmt 1 view .LVU2980
 9328 0134 2AE0     		b	.L1213
 9329              	.LVL1030:
 9330              	.L1215:
2701:src/display.c **** 
 9331              		.loc 1 2701 4 view .LVU2981
 9332 0136 FFF7FEFF 		bl	wait_for_display
 9333              	.LVL1031:
2704:src/display.c **** 	    clr_dot(i);
 9334              		.loc 1 2704 4 view .LVU2982
2704:src/display.c **** 	    clr_dot(i);
 9335              		.loc 1 2704 16 view .LVU2983
ARM GAS  /tmp/cchf4YwX.s 			page 279


 9336              	.L920:
2705:src/display.c **** 	  }
 9337              		.loc 1 2705 6 discriminator 3 view .LVU2984
 9338 013a 3846     		mov	r0, r7
2704:src/display.c **** 	    clr_dot(i);
 9339              		.loc 1 2704 31 is_stmt 0 discriminator 3 view .LVU2985
 9340 013c 0137     		adds	r7, r7, #1
 9341              	.LVL1032:
2705:src/display.c **** 	  }
 9342              		.loc 1 2705 6 discriminator 3 view .LVU2986
 9343 013e FFF7FEFF 		bl	clr_dot
 9344              	.LVL1033:
2704:src/display.c **** 	    clr_dot(i);
 9345              		.loc 1 2704 31 is_stmt 1 discriminator 3 view .LVU2987
2704:src/display.c **** 	    clr_dot(i);
 9346              		.loc 1 2704 16 discriminator 3 view .LVU2988
2704:src/display.c **** 	    clr_dot(i);
 9347              		.loc 1 2704 4 is_stmt 0 discriminator 3 view .LVU2989
 9348 0142 832F     		cmp	r7, #131
 9349 0144 F9D1     		bne	.L920
 9350 0146 744B     		ldr	r3, .L1254+12
 9351 0148 744F     		ldr	r7, .L1254+16
 9352              	.LVL1034:
2704:src/display.c **** 	    clr_dot(i);
 9353              		.loc 1 2704 4 discriminator 3 view .LVU2990
 9354 014a 0093     		str	r3, [sp]
2677:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9355              		.loc 1 2677 6 view .LVU2991
 9356 014c 0026     		movs	r6, #0
 9357              	.LVL1035:
 9358              	.L921:
2973:src/display.c **** 	    if (p == NULL || cata) {
 9359              		.loc 1 2973 6 is_stmt 1 view .LVU2992
2973:src/display.c **** 	    if (p == NULL || cata) {
 9360              		.loc 1 2973 10 is_stmt 0 view .LVU2993
 9361 014e FFF7FEFF 		bl	get_cmdline
 9362              	.LVL1036:
2974:src/display.c **** 	      if (ShowRegister != -1) {
 9363              		.loc 1 2974 6 is_stmt 1 view .LVU2994
2974:src/display.c **** 	      if (ShowRegister != -1) {
 9364              		.loc 1 2974 9 is_stmt 0 view .LVU2995
 9365 0152 0546     		mov	r5, r0
 9366 0154 18B1     		cbz	r0, .L1015
2974:src/display.c **** 	      if (ShowRegister != -1) {
 9367              		.loc 1 2974 20 discriminator 1 view .LVU2996
 9368 0156 BAF1000F 		cmp	r10, #0
 9369 015a 00F09F80 		beq	.L1016
 9370              	.L1015:
2975:src/display.c **** #ifdef INCLUDE_C_LOCK
 9371              		.loc 1 2975 8 is_stmt 1 view .LVU2997
2975:src/display.c **** #ifdef INCLUDE_C_LOCK
 9372              		.loc 1 2975 25 is_stmt 0 view .LVU2998
 9373 015e 734D     		ldr	r5, .L1254+32
 9374 0160 2868     		ldr	r0, [r5]
 9375              	.LVL1037:
2975:src/display.c **** #ifdef INCLUDE_C_LOCK
 9376              		.loc 1 2975 11 view .LVU2999
ARM GAS  /tmp/cchf4YwX.s 			page 280


 9377 0162 411C     		adds	r1, r0, #1
 9378 0164 00F04B81 		beq	.L1017
2977:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9379              		.loc 1 2977 3 is_stmt 1 view .LVU3000
2977:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9380              		.loc 1 2977 8 is_stmt 0 view .LVU3001
 9381 0168 694A     		ldr	r2, .L1254+4
 9382 016a 1168     		ldr	r1, [r2]
2977:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9383              		.loc 1 2977 34 view .LVU3002
 9384 016c 91F8AC37 		ldrb	r3, [r1, #1964]	@ zero_extendqisi2
2977:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9385              		.loc 1 2977 6 view .LVU3003
 9386 0170 03F0C703 		and	r3, r3, #199
 9387 0174 C12B     		cmp	r3, #193
 9388 0176 00F0E980 		beq	.L1218
2993:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9389              		.loc 1 2993 5 is_stmt 1 view .LVU3004
2993:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9390              		.loc 1 2993 41 is_stmt 0 view .LVU3005
 9391 017a 6428     		cmp	r0, #100
 9392 017c 00F07281 		beq	.L1219
 9393              	.L1024:
2994:src/display.c **** 		}
 9394              		.loc 1 2994 5 is_stmt 1 view .LVU3006
 9395 0180 0021     		movs	r1, #0
 9396 0182 FFF7FEFF 		bl	format_reg
 9397              	.LVL1038:
3007:src/display.c **** 	      goto finish;
 9398              		.loc 1 3007 6 view .LVU3007
3007:src/display.c **** 	      goto finish;
 9399              		.loc 1 3007 9 is_stmt 0 view .LVU3008
 9400 0186 D8F80030 		ldr	r3, [r8]
 9401 018a 73BB     		cbnz	r3, .L1022
 9402              	.LVL1039:
 9403              	.L1213:
3037:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9404              		.loc 1 3037 2 view .LVU3009
 9405 018c FFF7FEFF 		bl	set_annunciators
 9406              	.LVL1040:
3038:src/display.c **** 	  ShowRPN = 0;
 9407              		.loc 1 3038 2 is_stmt 1 view .LVU3010
 9408              	.L923:
3039:src/display.c **** 	  dot(RPN, 0);
 9409              		.loc 1 3039 4 view .LVU3011
3039:src/display.c **** 	  dot(RPN, 0);
 9410              		.loc 1 3039 12 is_stmt 0 view .LVU3012
 9411 0190 DFF89C81 		ldr	r8, .L1254+36
 9412 0194 0023     		movs	r3, #0
 9413              	.LBB589:
 9414              	.LBB590:
 347:src/display.c **** }
 9415              		.loc 1 347 8 view .LVU3013
 9416 0196 8D20     		movs	r0, #141
 9417              	.LBE590:
 9418              	.LBE589:
3039:src/display.c **** 	  dot(RPN, 0);
ARM GAS  /tmp/cchf4YwX.s 			page 281


 9419              		.loc 1 3039 12 view .LVU3014
 9420 0198 C8F80030 		str	r3, [r8]
3040:src/display.c **** 	}
 9421              		.loc 1 3040 4 is_stmt 1 view .LVU3015
 9422              	.LVL1041:
 9423              	.LBB592:
 9424              	.LBI589:
 345:src/display.c ****   if (on)	set_dot(n);
 9425              		.loc 1 345 6 view .LVU3016
 9426              	.LBB591:
 346:src/display.c ****   else	clr_dot(n);
 9427              		.loc 1 346 3 view .LVU3017
 347:src/display.c **** }
 9428              		.loc 1 347 8 view .LVU3018
 9429 019c FFF7FEFF 		bl	clr_dot
 9430              	.LVL1042:
 9431              	.L1060:
 347:src/display.c **** }
 9432              		.loc 1 347 8 is_stmt 0 view .LVU3019
 9433              	.LBE591:
 9434              	.LBE592:
3043:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9435              		.loc 1 3043 2 is_stmt 1 view .LVU3020
3044:src/display.c **** 
 9436              		.loc 1 3044 4 is_stmt 0 view .LVU3021
 9437 01a0 D8F80030 		ldr	r3, [r8]
 9438 01a4 002B     		cmp	r3, #0
 9439 01a6 40F0F180 		bne	.L1082
3043:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9440              		.loc 1 3043 31 view .LVU3022
 9441 01aa A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9442 01ac 12F04003 		ands	r3, r2, #64
 9443 01b0 08D0     		beq	.L1061
3044:src/display.c **** 
 9444              		.loc 1 3044 8 view .LVU3023
 9445 01b2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3044:src/display.c **** 
 9446              		.loc 1 3044 4 view .LVU3024
 9447 01b4 1B07     		lsls	r3, r3, #28
 9448 01b6 40F11581 		bpl	.L1084
3044:src/display.c **** 
 9449              		.loc 1 3044 30 discriminator 3 view .LVU3025
 9450 01ba 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9451 01bc 012B     		cmp	r3, #1
 9452 01be 01D0     		beq	.L1061
3044:src/display.c **** 
 9453              		.loc 1 3044 60 discriminator 5 view .LVU3026
 9454 01c0 C2F38003 		ubfx	r3, r2, #2, #1
 9455              	.L1061:
3043:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9456              		.loc 1 3043 19 discriminator 9 view .LVU3027
 9457 01c4 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9458 01c6 63F34512 		bfi	r2, r3, #5, #1
 9459 01ca E275     		strb	r2, [r4, #23]
3047:src/display.c **** 	  annunciators();
 9460              		.loc 1 3047 2 is_stmt 1 discriminator 9 view .LVU3028
3047:src/display.c **** 	  annunciators();
ARM GAS  /tmp/cchf4YwX.s 			page 282


 9461              		.loc 1 3047 5 is_stmt 0 discriminator 9 view .LVU3029
 9462 01cc 002E     		cmp	r6, #0
 9463 01ce 00F0D780 		beq	.L1062
3047:src/display.c **** 	  annunciators();
 9464              		.loc 1 3047 36 discriminator 1 view .LVU3030
 9465 01d2 D3B2     		uxtb	r3, r2
3047:src/display.c **** 	  annunciators();
 9466              		.loc 1 3047 13 discriminator 1 view .LVU3031
 9467 01d4 03F02103 		and	r3, r3, #33
 9468 01d8 202B     		cmp	r3, #32
 9469 01da 00F0D180 		beq	.L1062
 9470              	.L1063:
3048:src/display.c ****  	State2.hms = 0;
 9471              		.loc 1 3048 4 is_stmt 1 view .LVU3032
 9472 01de FFF7FEFF 		bl	annunciators
 9473              	.LVL1043:
 9474              	.L1064:
3049:src/display.c **** #else
 9475              		.loc 1 3049 3 view .LVU3033
3049:src/display.c **** #else
 9476              		.loc 1 3049 14 is_stmt 0 view .LVU3034
 9477 01e2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9478 01e4 6FF30003 		bfc	r3, #0, #1
 9479 01e8 E375     		strb	r3, [r4, #23]
 9480              	.L1022:
3056:src/display.c **** 	State2.disp_as_alpha = 0;
 9481              		.loc 1 3056 2 is_stmt 1 view .LVU3035
3057:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9482              		.loc 1 3057 2 view .LVU3036
3058:src/display.c **** 	State2.invalid_disp = 0;
 9483              		.loc 1 3058 2 view .LVU3037
3056:src/display.c **** 	State2.disp_as_alpha = 0;
 9484              		.loc 1 3056 17 is_stmt 0 view .LVU3038
 9485 01ea 6369     		ldr	r3, [r4, #20]
3062:src/display.c **** 	State2.disp_small = 0;
 9486              		.loc 1 3062 11 view .LVU3039
 9487 01ec 009A     		ldr	r2, [sp]
3056:src/display.c **** 	State2.disp_as_alpha = 0;
 9488              		.loc 1 3056 17 view .LVU3040
 9489 01ee 23F02173 		bic	r3, r3, #42205184
 9490 01f2 23F48053 		bic	r3, r3, #4096
3058:src/display.c **** 	State2.invalid_disp = 0;
 9491              		.loc 1 3058 15 view .LVU3041
 9492 01f6 0026     		movs	r6, #0
3056:src/display.c **** 	State2.disp_as_alpha = 0;
 9493              		.loc 1 3056 17 view .LVU3042
 9494 01f8 6361     		str	r3, [r4, #20]
3060:src/display.c **** 	DispMsg = CNULL;
 9495              		.loc 1 3060 15 view .LVU3043
 9496 01fa 6423     		movs	r3, #100
3058:src/display.c **** 	State2.invalid_disp = 0;
 9497              		.loc 1 3058 15 view .LVU3044
 9498 01fc 6674     		strb	r6, [r4, #17]
3059:src/display.c **** 	ShowRegister = regX_idx;
 9499              		.loc 1 3059 2 is_stmt 1 view .LVU3045
3060:src/display.c **** 	DispMsg = CNULL;
 9500              		.loc 1 3060 2 view .LVU3046
ARM GAS  /tmp/cchf4YwX.s 			page 283


3061:src/display.c **** 	DispPlot = 0;
 9501              		.loc 1 3061 10 is_stmt 0 view .LVU3047
 9502 01fe 3E60     		str	r6, [r7]
3062:src/display.c **** 	State2.disp_small = 0;
 9503              		.loc 1 3062 11 view .LVU3048
 9504 0200 1680     		strh	r6, [r2]	@ movhi
3060:src/display.c **** 	DispMsg = CNULL;
 9505              		.loc 1 3060 15 view .LVU3049
 9506 0202 2B60     		str	r3, [r5]
3061:src/display.c **** 	DispPlot = 0;
 9507              		.loc 1 3061 2 is_stmt 1 view .LVU3050
3062:src/display.c **** 	State2.disp_small = 0;
 9508              		.loc 1 3062 2 view .LVU3051
3063:src/display.c **** 	finish_display();
 9509              		.loc 1 3063 2 view .LVU3052
3064:src/display.c **** 	no_status_top = 0;
 9510              		.loc 1 3064 2 view .LVU3053
 9511 0204 FFF7FEFF 		bl	finish_display
 9512              	.LVL1044:
3065:src/display.c **** #ifdef CONSOLE
 9513              		.loc 1 3065 2 view .LVU3054
3065:src/display.c **** #ifdef CONSOLE
 9514              		.loc 1 3065 16 is_stmt 0 view .LVU3055
 9515 0208 A9F80060 		strh	r6, [r9]	@ movhi
3069:src/display.c **** #else
 9516              		.loc 1 3069 7 view .LVU3056
 9517 020c 29B0     		add	sp, sp, #164
 9518              		.cfi_remember_state
 9519              		.cfi_def_cfa_offset 36
 9520              		@ sp needed
 9521 020e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9522              	.LVL1045:
 9523              	.L1214:
 9524              		.cfi_restore_state
2685:src/display.c **** 	  State2.disp_temp = 1;
 9525              		.loc 1 2685 4 is_stmt 1 view .LVU3057
2686:src/display.c **** #ifdef CONSOLE
 9526              		.loc 1 2686 4 view .LVU3058
2690:src/display.c **** 	  return;
 9527              		.loc 1 2690 12 is_stmt 0 view .LVU3059
 9528 0212 4749     		ldr	r1, .L1254+36
2685:src/display.c **** 	  State2.disp_temp = 1;
 9529              		.loc 1 2685 23 view .LVU3060
 9530 0214 23F03003 		bic	r3, r3, #48
 9531 0218 43F02003 		orr	r3, r3, #32
 9532 021c E375     		strb	r3, [r4, #23]
2690:src/display.c **** 	  return;
 9533              		.loc 1 2690 4 is_stmt 1 view .LVU3061
2690:src/display.c **** 	  return;
 9534              		.loc 1 2690 12 is_stmt 0 view .LVU3062
 9535 021e 0A60     		str	r2, [r1]
2691:src/display.c **** 	}
 9536              		.loc 1 2691 4 is_stmt 1 view .LVU3063
3069:src/display.c **** #else
 9537              		.loc 1 3069 7 is_stmt 0 view .LVU3064
 9538 0220 29B0     		add	sp, sp, #164
 9539              		.cfi_remember_state
ARM GAS  /tmp/cchf4YwX.s 			page 284


 9540              		.cfi_def_cfa_offset 36
 9541              		@ sp needed
 9542 0222 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9543              	.LVL1046:
 9544              	.L924:
 9545              		.cfi_restore_state
2749:src/display.c **** 	  bp = scopy(bp, "HYP");
 9546              		.loc 1 2749 9 is_stmt 1 view .LVU3065
2749:src/display.c **** 	  bp = scopy(bp, "HYP");
 9547              		.loc 1 2749 12 is_stmt 0 view .LVU3066
 9548 0226 9A06     		lsls	r2, r3, #26
 9549 0228 00F1DE80 		bmi	.L1220
2761:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9550              		.loc 1 2761 9 is_stmt 1 view .LVU3067
2761:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9551              		.loc 1 2761 12 is_stmt 0 view .LVU3068
 9552 022c DF07     		lsls	r7, r3, #31
 9553 022e 00F17C81 		bmi	.L1221
2776:src/display.c **** 	  /* Commands with arguments */
 9554              		.loc 1 2776 9 is_stmt 1 view .LVU3069
2776:src/display.c **** 	  /* Commands with arguments */
 9555              		.loc 1 2776 13 is_stmt 0 view .LVU3070
 9556 0232 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2776:src/display.c **** 	  /* Commands with arguments */
 9557              		.loc 1 2776 12 view .LVU3071
 9558 0234 8806     		lsls	r0, r1, #26
 9559 0236 40F1F780 		bpl	.L936
2779:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9560              		.loc 1 2779 4 is_stmt 1 view .LVU3072
2779:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9561              		.loc 1 2779 8 is_stmt 0 view .LVU3073
 9562 023a E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2779:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9563              		.loc 1 2779 7 view .LVU3074
 9564 023c 4D2B     		cmp	r3, #77
 9565 023e 00F0A981 		beq	.L937
2779:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9566              		.loc 1 2779 28 discriminator 1 view .LVU3075
 9567 0242 03F17302 		add	r2, r3, #115
 9568 0246 D2B2     		uxtb	r2, r2
 9569 0248 012A     		cmp	r2, #1
 9570 024a 40F2A381 		bls	.L937
2675:src/display.c **** 	const char *p;
 9571              		.loc 1 2675 17 view .LVU3076
 9572 024e 1EA8     		add	r0, sp, #120
 9573              	.LVL1047:
 9574              	.L938:
2782:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9575              		.loc 1 2782 4 is_stmt 1 view .LVU3077
2782:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9576              		.loc 1 2782 35 is_stmt 0 view .LVU3078
 9577 0250 0622     		movs	r2, #6
 9578 0252 3849     		ldr	r1, .L1254+40
 9579 0254 02EB0313 		add	r3, r2, r3, lsl #4
2782:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9580              		.loc 1 2782 9 view .LVU3079
 9581 0258 1944     		add	r1, r1, r3
ARM GAS  /tmp/cchf4YwX.s 			page 285


 9582 025a FFF7FEFF 		bl	scopy
 9583              	.LVL1048:
2783:src/display.c **** 	  if (State2.dot) {
 9584              		.loc 1 2783 4 is_stmt 1 view .LVU3080
2783:src/display.c **** 	  if (State2.dot) {
 9585              		.loc 1 2783 9 is_stmt 0 view .LVU3081
 9586 025e 364B     		ldr	r3, .L1254+44
 9587 0260 94F91510 		ldrsb	r1, [r4, #21]
 9588 0264 354A     		ldr	r2, .L1254+48
 9589 0266 12EA2101 		ands	r1, r2, r1, asr #32
 9590 026a 38BF     		it	cc
 9591 026c 1946     		movcc	r1, r3
 9592 026e FFF7FEFF 		bl	scopy
 9593              	.LVL1049:
2784:src/display.c **** 	    *bp++ = 's';
 9594              		.loc 1 2784 8 view .LVU3082
 9595 0272 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9596              	.LVL1050:
2784:src/display.c **** 	    *bp++ = 's';
 9597              		.loc 1 2784 4 is_stmt 1 view .LVU3083
2784:src/display.c **** 	    *bp++ = 's';
 9598              		.loc 1 2784 7 is_stmt 0 view .LVU3084
 9599 0274 5906     		lsls	r1, r3, #25
 9600 0276 40F19F81 		bpl	.L940
2785:src/display.c **** 	    *bp++ = '_';
 9601              		.loc 1 2785 6 is_stmt 1 view .LVU3085
 9602              	.LVL1051:
2785:src/display.c **** 	    *bp++ = '_';
 9603              		.loc 1 2785 12 is_stmt 0 view .LVU3086
 9604 027a 7322     		movs	r2, #115
2786:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9605              		.loc 1 2786 12 view .LVU3087
 9606 027c 5F23     		movs	r3, #95
2785:src/display.c **** 	    *bp++ = '_';
 9607              		.loc 1 2785 12 view .LVU3088
 9608 027e 0270     		strb	r2, [r0]
2786:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9609              		.loc 1 2786 6 is_stmt 1 view .LVU3089
 9610              	.LVL1052:
2786:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9611              		.loc 1 2786 12 is_stmt 0 view .LVU3090
 9612 0280 4370     		strb	r3, [r0, #1]
 9613              	.LVL1053:
 9614              	.L964:
2889:src/display.c **** 	    set_status_top(buf);
 9615              		.loc 1 2889 4 is_stmt 1 view .LVU3091
2889:src/display.c **** 	    set_status_top(buf);
 9616              		.loc 1 2889 7 is_stmt 0 view .LVU3092
 9617 0282 BBF1000F 		cmp	fp, #0
 9618 0286 00F0E280 		beq	.L931
 9619              	.L1203:
2890:src/display.c **** 	    no_status_top = 1;
 9620              		.loc 1 2890 6 is_stmt 1 view .LVU3093
 9621              	.LVL1054:
 9622              	.LBB593:
 9623              	.LBI593:
3633:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/cchf4YwX.s 			page 286


 9624              		.loc 1 3633 19 view .LVU3094
 9625              	.LBB594:
3634:src/display.c **** 	if (State2.runmode) {
 9626              		.loc 1 3634 2 view .LVU3095
3634:src/display.c **** 	if (State2.runmode) {
 9627              		.loc 1 3634 5 is_stmt 0 view .LVU3096
 9628 028a B9F90030 		ldrsh	r3, [r9]
 9629 028e 002B     		cmp	r3, #0
 9630 0290 7FF4EFAE 		bne	.L927
 9631              	.LBE594:
 9632              	.LBE593:
 9633              	.LBB595:
 9634              	.LBB596:
 9635 0294 1EA8     		add	r0, sp, #120
 9636              	.LVL1055:
3634:src/display.c **** 	if (State2.runmode) {
 9637              		.loc 1 3634 5 view .LVU3097
 9638 0296 FFF7FEFF 		bl	set_status_top.part.0
 9639              	.LVL1056:
3634:src/display.c **** 	if (State2.runmode) {
 9640              		.loc 1 3634 5 view .LVU3098
 9641 029a EAE6     		b	.L927
 9642              	.LVL1057:
 9643              	.L1016:
3634:src/display.c **** 	if (State2.runmode) {
 9644              		.loc 1 3634 5 view .LVU3099
 9645              	.LBE596:
 9646              	.LBE595:
3004:src/display.c **** 	      x_disp = 1;
 9647              		.loc 1 3004 8 is_stmt 1 view .LVU3100
 9648              	.LBB597:
 9649              	.LBI597:
1324:src/display.c ****       int i;
 9650              		.loc 1 1324 17 view .LVU3101
 9651              	.LBB598:
1325:src/display.c ****       int gotdot = -1;
 9652              		.loc 1 1325 7 view .LVU3102
1326:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9653              		.loc 1 1326 7 view .LVU3103
1328:src/display.c **** #endif
 9654              		.loc 1 1328 7 view .LVU3104
1332:src/display.c **** #endif
 9655              		.loc 1 1332 7 view .LVU3105
1335:src/display.c **** 	SET_MANT_SIGN;
 9656              		.loc 1 1335 7 view .LVU3106
1335:src/display.c **** 	SET_MANT_SIGN;
 9657              		.loc 1 1335 10 is_stmt 0 view .LVU3107
 9658 029c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9659 029e 2D2B     		cmp	r3, #45
 9660 02a0 00F0AA81 		beq	.L1222
 9661              	.LVL1058:
 9662              	.L1027:
1340:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9663              		.loc 1 1340 7 is_stmt 1 view .LVU3108
1340:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9664              		.loc 1 1340 11 is_stmt 0 view .LVU3109
 9665 02a4 1A4B     		ldr	r3, .L1254+4
ARM GAS  /tmp/cchf4YwX.s 			page 287


 9666 02a6 1B68     		ldr	r3, [r3]
 9667 02a8 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1340:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9668              		.loc 1 1340 10 view .LVU3110
 9669 02ac 13F0010B 		ands	fp, r3, #1
 9670 02b0 00F04C81 		beq	.L1028
 9671              	.LVL1059:
1341:src/display.c **** 	  set_dig(i, *p);
 9672              		.loc 1 1341 12 is_stmt 1 view .LVU3111
 9673 02b4 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1341:src/display.c **** 	  set_dig(i, *p);
 9674              		.loc 1 1341 8 is_stmt 0 view .LVU3112
 9675 02b6 4FF0000A 		mov	r10, #0
 9676              	.LVL1060:
1341:src/display.c **** 	  set_dig(i, *p);
 9677              		.loc 1 1341 2 view .LVU3113
 9678 02ba 41B1     		cbz	r1, .L1030
 9679              	.LVL1061:
 9680              	.L1029:
1342:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9681              		.loc 1 1342 4 is_stmt 1 view .LVU3114
 9682 02bc 5046     		mov	r0, r10
 9683 02be FFF7FEFF 		bl	set_dig
 9684              	.LVL1062:
1343:src/display.c **** 	}
 9685              		.loc 1 1343 4 view .LVU3115
1341:src/display.c **** 	  set_dig(i, *p);
 9686              		.loc 1 1341 12 is_stmt 0 view .LVU3116
 9687 02c2 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9688              	.LVL1063:
1343:src/display.c **** 	}
 9689              		.loc 1 1343 6 view .LVU3117
 9690 02c6 0AF1090A 		add	r10, r10, #9
 9691              	.LVL1064:
1341:src/display.c **** 	  set_dig(i, *p);
 9692              		.loc 1 1341 24 is_stmt 1 view .LVU3118
1341:src/display.c **** 	  set_dig(i, *p);
 9693              		.loc 1 1341 12 view .LVU3119
1341:src/display.c **** 	  set_dig(i, *p);
 9694              		.loc 1 1341 2 is_stmt 0 view .LVU3120
 9695 02ca 0029     		cmp	r1, #0
 9696 02cc F6D1     		bne	.L1029
 9697              	.LVL1065:
 9698              	.L1030:
1345:src/display.c ****       } else {
 9699              		.loc 1 1345 2 is_stmt 1 view .LVU3121
 9700 02ce FFF7FEFF 		bl	carry_overflow
 9701              	.LVL1066:
1345:src/display.c ****       } else {
 9702              		.loc 1 1345 2 is_stmt 0 view .LVU3122
 9703              	.LBE598:
 9704              	.LBE597:
3007:src/display.c **** 	      goto finish;
 9705              		.loc 1 3007 6 is_stmt 1 view .LVU3123
3007:src/display.c **** 	      goto finish;
 9706              		.loc 1 3007 9 is_stmt 0 view .LVU3124
 9707 02d2 D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/cchf4YwX.s 			page 288


 9708 02d6 002B     		cmp	r3, #0
 9709 02d8 40F02581 		bne	.L1125
 9710              	.LVL1067:
 9711              	.L1211:
3007:src/display.c **** 	      goto finish;
 9712              		.loc 1 3007 9 view .LVU3125
 9713 02dc 134D     		ldr	r5, .L1254+32
 9714              	.LVL1068:
 9715              	.L1021:
3037:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9716              		.loc 1 3037 2 is_stmt 1 view .LVU3126
 9717 02de FFF7FEFF 		bl	set_annunciators
 9718              	.LVL1069:
3038:src/display.c **** 	  ShowRPN = 0;
 9719              		.loc 1 3038 2 view .LVU3127
3038:src/display.c **** 	  ShowRPN = 0;
 9720              		.loc 1 3038 50 is_stmt 0 view .LVU3128
 9721 02e2 3B68     		ldr	r3, [r7]
 9722 02e4 002B     		cmp	r3, #0
 9723 02e6 7FF453AF 		bne	.L923
3038:src/display.c **** 	  ShowRPN = 0;
 9724              		.loc 1 3038 69 discriminator 3 view .LVU3129
 9725 02ea 009B     		ldr	r3, [sp]
 9726 02ec B3F90030 		ldrsh	r3, [r3]
 9727 02f0 002B     		cmp	r3, #0
 9728 02f2 7FF44DAF 		bne	.L923
3038:src/display.c **** 	  ShowRPN = 0;
 9729              		.loc 1 3038 81 discriminator 4 view .LVU3130
 9730 02f6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9731 02f8 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9732 02fa 03F00403 		and	r3, r3, #4
 9733 02fe 1343     		orrs	r3, r3, r2
 9734 0300 7FF446AF 		bne	.L923
 9735 0304 DFF82880 		ldr	r8, .L1254+36
 9736 0308 4AE7     		b	.L1060
 9737              	.L1255:
 9738 030a 00BF     		.align	2
 9739              	.L1254:
 9740 030c 00000000 		.word	StateWhileOn
 9741 0310 00000000 		.word	main_ram
 9742 0314 00000000 		.word	.LANCHOR21
 9743 0318 00000000 		.word	DispPlot
 9744 031c 00000000 		.word	DispMsg
 9745 0320 00000000 		.word	.LANCHOR25
 9746 0324 00000000 		.word	.LANCHOR19
 9747 0328 00000000 		.word	LastDisplayedNumber
 9748 032c 00000000 		.word	ShowRegister
 9749 0330 00000000 		.word	ShowRPN
 9750 0334 00000000 		.word	argcmds
 9751 0338 04000000 		.word	.LC23
 9752 033c 00000000 		.word	.LC22
 9753 0340 00000000 		.word	.LANCHOR18
 9754 0344 00000000 		.word	WasDataEntry
 9755 0348 00000000 		.word	ProgFree
 9756              	.LVL1070:
 9757              	.L1218:
2978:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
ARM GAS  /tmp/cchf4YwX.s 			page 289


 9758              		.loc 1 2978 5 is_stmt 1 view .LVU3131
2978:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9759              		.loc 1 2978 10 is_stmt 0 view .LVU3132
 9760 034c 91F8AD37 		ldrb	r3, [r1, #1965]	@ zero_extendqisi2
2978:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9761              		.loc 1 2978 8 view .LVU3133
 9762 0350 DA07     		lsls	r2, r3, #31
 9763 0352 00F12581 		bmi	.L1223
 9764              	.L1019:
2982:src/display.c **** 		    State2.hms = 0;
 9765              		.loc 1 2982 5 is_stmt 1 view .LVU3134
2982:src/display.c **** 		    State2.hms = 0;
 9766              		.loc 1 2982 9 is_stmt 0 view .LVU3135
 9767 0356 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2982:src/display.c **** 		    State2.hms = 0;
 9768              		.loc 1 2982 8 view .LVU3136
 9769 0358 13F00101 		ands	r1, r3, #1
 9770 035c 00F08F80 		beq	.L1020
2983:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9771              		.loc 1 2983 7 is_stmt 1 view .LVU3137
2983:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9772              		.loc 1 2983 18 is_stmt 0 view .LVU3138
 9773 0360 6FF30003 		bfc	r3, #0, #1
2984:src/display.c **** 		    State2.hms = 1;
 9774              		.loc 1 2984 7 view .LVU3139
 9775 0364 0021     		movs	r1, #0
 9776 0366 6E20     		movs	r0, #110
2983:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9777              		.loc 1 2983 18 view .LVU3140
 9778 0368 E375     		strb	r3, [r4, #23]
2984:src/display.c **** 		    State2.hms = 1;
 9779              		.loc 1 2984 7 is_stmt 1 view .LVU3141
 9780 036a FFF7FEFF 		bl	format_reg
 9781              	.LVL1071:
2985:src/display.c **** 		  }
 9782              		.loc 1 2985 7 view .LVU3142
2985:src/display.c **** 		  }
 9783              		.loc 1 2985 18 is_stmt 0 view .LVU3143
 9784 036e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3007:src/display.c **** 	      goto finish;
 9785              		.loc 1 3007 9 view .LVU3144
 9786 0370 D8F80020 		ldr	r2, [r8]
2985:src/display.c **** 		  }
 9787              		.loc 1 2985 18 view .LVU3145
 9788 0374 43F00103 		orr	r3, r3, #1
 9789 0378 E375     		strb	r3, [r4, #23]
 9790              	.LVL1072:
3007:src/display.c **** 	      goto finish;
 9791              		.loc 1 3007 6 is_stmt 1 view .LVU3146
3007:src/display.c **** 	      goto finish;
 9792              		.loc 1 3007 9 is_stmt 0 view .LVU3147
 9793 037a 002A     		cmp	r2, #0
 9794 037c AFD0     		beq	.L1021
 9795 037e 34E7     		b	.L1022
 9796              	.LVL1073:
 9797              	.L1062:
3047:src/display.c **** 	  annunciators();
ARM GAS  /tmp/cchf4YwX.s 			page 290


 9798              		.loc 1 3047 52 discriminator 3 view .LVU3148
 9799 0380 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9800 0382 13F0C00F 		tst	r3, #192
 9801 0386 3FF42CAF 		beq	.L1064
 9802 038a 28E7     		b	.L1063
 9803              	.L1082:
 9804 038c 0023     		movs	r3, #0
 9805 038e 19E7     		b	.L1061
 9806              	.LVL1074:
 9807              	.L1216:
 9808              	.LBB629:
2729:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9809              		.loc 1 2729 4 is_stmt 1 view .LVU3149
2729:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9810              		.loc 1 2729 9 is_stmt 0 view .LVU3150
 9811 0390 BD4B     		ldr	r3, .L1256
 9812 0392 CDF85E60 		str	r6, [sp, #94]	@ unaligned
2730:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9813              		.loc 1 2730 4 is_stmt 1 view .LVU3151
2729:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9814              		.loc 1 2729 9 is_stmt 0 view .LVU3152
 9815 0396 93E80700 		ldm	r3, {r0, r1, r2}
 9816 039a 15AB     		add	r3, sp, #84
 9817 039c 03C3     		stmia	r3!, {r0, r1}
2730:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9818              		.loc 1 2730 4 view .LVU3153
 9819 039e 3146     		mov	r1, r6
 9820 03a0 BA48     		ldr	r0, .L1256+4
2729:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9821              		.loc 1 2729 9 view .LVU3154
 9822 03a2 1A80     		strh	r2, [r3]	@ movhi
2730:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9823              		.loc 1 2730 4 view .LVU3155
 9824 03a4 FFF7FEFF 		bl	set_digits_string
 9825              	.LVL1075:
2731:src/display.c **** #ifndef REALBUILD
 9826              		.loc 1 2731 4 is_stmt 1 view .LVU3156
 9827              	.LBB630:
 9828              	.LBI630:
 413:src/display.c ****   if (res) *res++ = ch;
 9829              		.loc 1 413 14 view .LVU3157
 9830              	.LBB631:
 414:src/display.c ****   else	set_dig(base, ch);
 9831              		.loc 1 414 3 view .LVU3158
 415:src/display.c ****   return res;
 9832              		.loc 1 415 8 view .LVU3159
 9833 03a8 7221     		movs	r1, #114
 9834 03aa 6C20     		movs	r0, #108
 9835 03ac FFF7FEFF 		bl	set_dig
 9836              	.LVL1076:
 416:src/display.c **** }
 9837              		.loc 1 416 3 view .LVU3160
 416:src/display.c **** }
 9838              		.loc 1 416 3 is_stmt 0 view .LVU3161
 9839              	.LBE631:
 9840              	.LBE630:
2733:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
ARM GAS  /tmp/cchf4YwX.s 			page 291


 9841              		.loc 1 2733 4 is_stmt 1 view .LVU3162
 9842 03b0 B749     		ldr	r1, .L1256+8
 9843 03b2 B848     		ldr	r0, .L1256+12
 9844 03b4 B84F     		ldr	r7, .L1256+16
 9845 03b6 B94D     		ldr	r5, .L1256+20
 9846 03b8 FFF7FEFF 		bl	scopy
 9847              	.LVL1077:
2734:src/display.c **** #endif
 9848              		.loc 1 2734 4 view .LVU3163
 9849 03bc B849     		ldr	r1, .L1256+24
 9850 03be B948     		ldr	r0, .L1256+28
 9851 03c0 FFF7FEFF 		bl	scopy
 9852              	.LVL1078:
2736:src/display.c **** 	  set_status(vers);
 9853              		.loc 1 2736 4 view .LVU3164
 9854 03c4 B849     		ldr	r1, .L1256+32
 9855 03c6 0422     		movs	r2, #4
 9856 03c8 0DF15D00 		add	r0, sp, #93
 9857 03cc FFF7FEFF 		bl	xcopy
 9858              	.LVL1079:
2737:src/display.c **** 	  skip = 1;
 9859              		.loc 1 2737 4 view .LVU3165
 9860 03d0 15A8     		add	r0, sp, #84
 9861 03d2 FFF7FEFF 		bl	set_status
 9862              	.LVL1080:
2738:src/display.c **** 	  goto nostk;
 9863              		.loc 1 2738 4 view .LVU3166
2739:src/display.c **** 	} else if (State2.confirm) {
 9864              		.loc 1 2739 4 view .LVU3167
2739:src/display.c **** 	} else if (State2.confirm) {
 9865              		.loc 1 2739 4 is_stmt 0 view .LVU3168
 9866              	.LBE629:
2969:src/display.c **** 	if (!skip) {
 9867              		.loc 1 2969 2 is_stmt 1 view .LVU3169
 9868 03d6 B54B     		ldr	r3, .L1256+36
 9869 03d8 0093     		str	r3, [sp]
 9870 03da FFF7FEFF 		bl	show_flags
 9871              	.LVL1081:
2970:src/display.c **** 	  if (State2.runmode) {
 9872              		.loc 1 2970 2 view .LVU3170
3037:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9873              		.loc 1 3037 2 view .LVU3171
 9874 03de FFF7FEFF 		bl	set_annunciators
 9875              	.LVL1082:
3038:src/display.c **** 	  ShowRPN = 0;
 9876              		.loc 1 3038 2 view .LVU3172
 9877 03e2 D5E6     		b	.L923
 9878              	.LVL1083:
 9879              	.L1084:
3038:src/display.c **** 	  ShowRPN = 0;
 9880              		.loc 1 3038 2 is_stmt 0 view .LVU3173
 9881 03e4 0123     		movs	r3, #1
 9882 03e6 EDE6     		b	.L1061
 9883              	.LVL1084:
 9884              	.L1220:
2750:src/display.c **** 	  if (! State2.dot)
 9885              		.loc 1 2750 4 is_stmt 1 view .LVU3174
ARM GAS  /tmp/cchf4YwX.s 			page 292


2750:src/display.c **** 	  if (! State2.dot)
 9886              		.loc 1 2750 9 is_stmt 0 view .LVU3175
 9887 03e8 B149     		ldr	r1, .L1256+40
 9888 03ea 1EA8     		add	r0, sp, #120
 9889              	.LVL1085:
2750:src/display.c **** 	  if (! State2.dot)
 9890              		.loc 1 2750 9 view .LVU3176
 9891 03ec FFF7FEFF 		bl	scopy
 9892              	.LVL1086:
2751:src/display.c **** 	    *bp++ = '\235';
 9893              		.loc 1 2751 8 view .LVU3177
 9894 03f0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9895              	.LVL1087:
2751:src/display.c **** 	    *bp++ = '\235';
 9896              		.loc 1 2751 4 is_stmt 1 view .LVU3178
2751:src/display.c **** 	    *bp++ = '\235';
 9897              		.loc 1 2751 7 is_stmt 0 view .LVU3179
 9898 03f2 5B06     		lsls	r3, r3, #25
 9899 03f4 3FF545AF 		bmi	.L964
2752:src/display.c **** 	  if (yreg_enabled) {
 9900              		.loc 1 2752 6 is_stmt 1 view .LVU3180
 9901              	.LVL1088:
2752:src/display.c **** 	  if (yreg_enabled) {
 9902              		.loc 1 2752 12 is_stmt 0 view .LVU3181
 9903 03f8 9D23     		movs	r3, #157
 9904 03fa 0370     		strb	r3, [r0]
 9905 03fc 41E7     		b	.L964
 9906              	.LVL1089:
 9907              	.L1017:
3002:src/display.c **** 	    } else {
 9908              		.loc 1 3002 3 is_stmt 1 view .LVU3182
 9909 03fe AD48     		ldr	r0, .L1256+44
 9910 0400 2421     		movs	r1, #36
 9911 0402 FFF7FEFF 		bl	set_digits_string
 9912              	.LVL1090:
3007:src/display.c **** 	      goto finish;
 9913              		.loc 1 3007 6 view .LVU3183
3007:src/display.c **** 	      goto finish;
 9914              		.loc 1 3007 9 is_stmt 0 view .LVU3184
 9915 0406 D8F80030 		ldr	r3, [r8]
 9916 040a 002B     		cmp	r3, #0
 9917 040c 3FF4BEAE 		beq	.L1213
 9918 0410 EBE6     		b	.L1022
 9919              	.LVL1091:
 9920              	.L925:
2747:src/display.c **** 	  }
 9921              		.loc 1 2747 6 is_stmt 1 view .LVU3185
 9922 0412 A64B     		ldr	r3, .L1256+36
 9923 0414 A848     		ldr	r0, .L1256+48
 9924 0416 0093     		str	r3, [sp]
 9925 0418 9F4F     		ldr	r7, .L1256+16
 9926 041a FFF7FEFF 		bl	set_status
 9927              	.LVL1092:
2967:src/display.c ****       nostk:
 9928              		.loc 1 2967 2 view .LVU3186
 9929 041e FFF7FEFF 		bl	show_stack
 9930              	.LVL1093:
ARM GAS  /tmp/cchf4YwX.s 			page 293


2969:src/display.c **** 	if (!skip) {
 9931              		.loc 1 2969 2 view .LVU3187
 9932 0422 FFF7FEFF 		bl	show_flags
 9933              	.LVL1094:
2970:src/display.c **** 	  if (State2.runmode) {
 9934              		.loc 1 2970 2 view .LVU3188
 9935 0426 2EE6     		b	.L928
 9936              	.L936:
2814:src/display.c **** 	  *bp++ = 'x';
 9937              		.loc 1 2814 9 view .LVU3189
2814:src/display.c **** 	  *bp++ = 'x';
 9938              		.loc 1 2814 19 is_stmt 0 view .LVU3190
 9939 0428 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2814:src/display.c **** 	  *bp++ = 'x';
 9940              		.loc 1 2814 12 view .LVU3191
 9941 042a 072A     		cmp	r2, #7
 9942 042c 00F06381 		beq	.L947
2815:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9943              		.loc 1 2815 4 is_stmt 1 view .LVU3192
 9944              	.LVL1095:
2816:src/display.c **** 	  *bp++ = '_';
 9945              		.loc 1 2816 33 is_stmt 0 view .LVU3193
 9946 0430 A24B     		ldr	r3, .L1256+52
2816:src/display.c **** 	  *bp++ = '_';
 9947              		.loc 1 2816 10 view .LVU3194
 9948 0432 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9949 0434 8DF87930 		strb	r3, [sp, #121]
2815:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9950              		.loc 1 2815 10 view .LVU3195
 9951 0438 7822     		movs	r2, #120
2817:src/display.c **** 	  *bp++ = '?';
 9952              		.loc 1 2817 10 view .LVU3196
 9953 043a 43F65F73 		movw	r3, #16223
2815:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9954              		.loc 1 2815 10 view .LVU3197
 9955 043e 8DF87820 		strb	r2, [sp, #120]
2816:src/display.c **** 	  *bp++ = '_';
 9956              		.loc 1 2816 4 is_stmt 1 view .LVU3198
 9957              	.LVL1096:
2817:src/display.c **** 	  *bp++ = '?';
 9958              		.loc 1 2817 4 view .LVU3199
2818:src/display.c **** 	  if (yreg_enabled) {
 9959              		.loc 1 2818 4 view .LVU3200
2817:src/display.c **** 	  *bp++ = '?';
 9960              		.loc 1 2817 10 is_stmt 0 view .LVU3201
 9961 0442 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2819:src/display.c **** 	    set_status_top(buf);
 9962              		.loc 1 2819 4 is_stmt 1 view .LVU3202
2819:src/display.c **** 	    set_status_top(buf);
 9963              		.loc 1 2819 7 is_stmt 0 view .LVU3203
 9964 0446 BBF1000F 		cmp	fp, #0
 9965 044a 7FF41EAF 		bne	.L1203
 9966              	.LVL1097:
 9967              	.L931:
2759:src/display.c **** 	  }
 9968              		.loc 1 2759 6 is_stmt 1 view .LVU3204
 9969 044e 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/cchf4YwX.s 			page 294


 9970 0450 FFF7FEFF 		bl	set_status
 9971              	.LVL1098:
2967:src/display.c ****       nostk:
 9972              		.loc 1 2967 2 view .LVU3205
 9973 0454 954B     		ldr	r3, .L1256+36
 9974 0456 0093     		str	r3, [sp]
 9975 0458 8F4F     		ldr	r7, .L1256+16
 9976 045a FFF7FEFF 		bl	show_stack
 9977              	.LVL1099:
2969:src/display.c **** 	if (!skip) {
 9978              		.loc 1 2969 2 view .LVU3206
 9979 045e FFF7FEFF 		bl	show_flags
 9980              	.LVL1100:
2970:src/display.c **** 	  if (State2.runmode) {
 9981              		.loc 1 2970 2 view .LVU3207
 9982 0462 10E6     		b	.L928
 9983              	.LVL1101:
 9984              	.L1219:
2993:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9985              		.loc 1 2993 44 is_stmt 0 discriminator 1 view .LVU3208
 9986 0464 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2993:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9987              		.loc 1 2993 41 discriminator 1 view .LVU3209
 9988 0466 13F00101 		ands	r1, r3, #1
 9989 046a 7FF489AE 		bne	.L1024
 9990              	.LVL1102:
2994:src/display.c **** 		}
 9991              		.loc 1 2994 5 is_stmt 1 view .LVU3210
 9992 046e FFF7FEFF 		bl	format_reg
 9993              	.LVL1103:
3007:src/display.c **** 	      goto finish;
 9994              		.loc 1 3007 6 view .LVU3211
3007:src/display.c **** 	      goto finish;
 9995              		.loc 1 3007 9 is_stmt 0 view .LVU3212
 9996 0472 D8F80030 		ldr	r3, [r8]
 9997 0476 002B     		cmp	r3, #0
 9998 0478 3FF431AF 		beq	.L1021
 9999 047c B5E6     		b	.L1022
 10000              	.LVL1104:
 10001              	.L1020:
2988:src/display.c **** 		  }
 10002              		.loc 1 2988 7 is_stmt 1 view .LVU3213
 10003 047e 6E20     		movs	r0, #110
 10004 0480 FFF7FEFF 		bl	format_reg
 10005              	.LVL1105:
3007:src/display.c **** 	      goto finish;
 10006              		.loc 1 3007 6 view .LVU3214
3007:src/display.c **** 	      goto finish;
 10007              		.loc 1 3007 9 is_stmt 0 view .LVU3215
 10008 0484 D8F80030 		ldr	r3, [r8]
 10009 0488 002B     		cmp	r3, #0
 10010 048a 3FF428AF 		beq	.L1021
 10011 048e ACE6     		b	.L1022
 10012              	.LVL1106:
 10013              	.L1217:
 10014              	.LBB632:
3016:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
ARM GAS  /tmp/cchf4YwX.s 			page 295


 10015              		.loc 1 3016 6 discriminator 1 view .LVU3216
 10016 0490 8B49     		ldr	r1, .L1256+56
 10017 0492 0BEB8B03 		add	r3, fp, fp, lsl #2
3017:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 10018              		.loc 1 3017 21 discriminator 1 view .LVU3217
 10019 0496 0BF0010B 		and	fp, fp, #1
 10020              	.LVL1107:
3016:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10021              		.loc 1 3016 6 discriminator 1 view .LVU3218
 10022 049a 1944     		add	r1, r1, r3
 10023 049c 1EA8     		add	r0, sp, #120
 10024 049e 0BF1030B 		add	fp, fp, #3
 10025 04a2 0193     		str	r3, [sp, #4]
 10026 04a4 FFF7FEFF 		bl	scopy_spc
 10027              	.LVL1108:
 10028 04a8 5A46     		mov	r2, fp
 10029 04aa 4146     		mov	r1, r8
 10030 04ac FFF7FEFF 		bl	num_arg_0
 10031              	.LVL1109:
3018:src/display.c **** #ifndef REALBUILD
 10032              		.loc 1 3018 6 is_stmt 1 discriminator 1 view .LVU3219
 10033 04b0 0921     		movs	r1, #9
 10034 04b2 1EA8     		add	r0, sp, #120
 10035 04b4 FFF7FEFF 		bl	set_digits_string
 10036              	.LVL1110:
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 10037              		.loc 1 3020 6 discriminator 1 view .LVU3220
 10038 04b8 2822     		movs	r2, #40
 10039 04ba 2946     		mov	r1, r5
 10040 04bc 1EA8     		add	r0, sp, #120
 10041 04be FFF7FEFF 		bl	xset
 10042              	.LVL1111:
3021:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 10043              		.loc 1 3021 6 discriminator 1 view .LVU3221
 10044 04c2 0121     		movs	r1, #1
 10045 04c4 DAF80000 		ldr	r0, [r10]
 10046 04c8 2A46     		mov	r2, r5
 10047 04ca FFF7FEFF 		bl	set_exp
 10048              	.LVL1112:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10049              		.loc 1 3022 6 discriminator 1 view .LVU3222
 10050 04ce 7D49     		ldr	r1, .L1256+60
 10051 04d0 019B     		ldr	r3, [sp, #4]
 10052 04d2 1944     		add	r1, r1, r3
 10053 04d4 10E6     		b	.L1066
 10054              	.LVL1113:
 10055              	.L1047:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10056              		.loc 1 3022 6 is_stmt 0 discriminator 1 view .LVU3223
 10057              	.LBE632:
 10058              	.LBB633:
 10059              	.LBB619:
1438:src/display.c **** 	    gotdot = i;
 10060              		.loc 1 1438 4 is_stmt 1 view .LVU3224
1438:src/display.c **** 	    gotdot = i;
 10061              		.loc 1 1438 7 is_stmt 0 view .LVU3225
 10062 04d6 BAF1FF3F 		cmp	r10, #-1
ARM GAS  /tmp/cchf4YwX.s 			page 296


 10063 04da 08BF     		it	eq
 10064 04dc DA46     		moveq	r10, fp
 10065              	.LVL1114:
1440:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10066              		.loc 1 1440 4 is_stmt 1 view .LVU3226
1441:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10067              		.loc 1 1441 6 view .LVU3227
1441:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10068              		.loc 1 1441 13 is_stmt 0 view .LVU3228
 10069 04de AAF11B0A 		sub	r10, r10, #27
 10070              	.LVL1115:
1442:src/display.c **** 	      break;
 10071              		.loc 1 1442 6 is_stmt 1 view .LVU3229
1442:src/display.c **** 	      break;
 10072              		.loc 1 1442 9 is_stmt 0 view .LVU3230
 10073 04e2 BAF1000F 		cmp	r10, #0
 10074 04e6 13DD     		ble	.L1032
1442:src/display.c **** 	      break;
 10075              		.loc 1 1442 9 view .LVU3231
 10076 04e8 0296     		str	r6, [sp, #8]
 10077 04ea 5646     		mov	r6, r10
 10078              	.LVL1116:
1442:src/display.c **** 	      break;
 10079              		.loc 1 1442 9 view .LVU3232
 10080 04ec BA46     		mov	r10, r7
 10081              	.LVL1117:
1442:src/display.c **** 	      break;
 10082              		.loc 1 1442 9 view .LVU3233
 10083 04ee 2F46     		mov	r7, r5
 10084 04f0 019D     		ldr	r5, [sp, #4]
 10085              	.LVL1118:
 10086              	.L1051:
1445:src/display.c **** 	      break;
 10087              		.loc 1 1445 6 is_stmt 1 view .LVU3234
1448:src/display.c **** 	  }
 10088              		.loc 1 1448 6 view .LVU3235
 10089              	.LBB599:
 10090              	.LBB600:
 376:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 10091              		.loc 1 376 3 view .LVU3236
 10092 04f2 3046     		mov	r0, r6
 10093              	.LBE600:
 10094              	.LBE599:
1445:src/display.c **** 	      break;
 10095              		.loc 1 1445 9 is_stmt 0 view .LVU3237
 10096 04f4 0DB1     		cbz	r5, .L1052
 10097              	.LVL1119:
1445:src/display.c **** 	      break;
 10098              		.loc 1 1445 27 view .LVU3238
 10099 04f6 092E     		cmp	r6, #9
 10100 04f8 07D0     		beq	.L1200
 10101              	.L1052:
1448:src/display.c **** 	  }
 10102              		.loc 1 1448 6 view .LVU3239
 10103 04fa 734B     		ldr	r3, .L1256+64
 10104 04fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10105              	.LVL1120:
ARM GAS  /tmp/cchf4YwX.s 			page 297


 10106              	.LBB602:
 10107              	.LBI599:
 373:src/display.c ****   if (sep == SEP_NONE)
 10108              		.loc 1 373 14 is_stmt 1 view .LVU3240
 10109              	.LBB601:
 374:src/display.c ****     return res;
 10110              		.loc 1 374 3 view .LVU3241
 374:src/display.c ****     return res;
 10111              		.loc 1 374 6 is_stmt 0 view .LVU3242
 10112 04fe 09B1     		cbz	r1, .L1053
 10113 0500 FFF7FEFF 		bl	set_separator.part.0
 10114              	.LVL1121:
 10115              	.L1053:
 374:src/display.c ****     return res;
 10116              		.loc 1 374 6 view .LVU3243
 10117              	.LBE601:
 10118              	.LBE602:
1440:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10119              		.loc 1 1440 4 is_stmt 1 view .LVU3244
1441:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10120              		.loc 1 1441 6 view .LVU3245
1441:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10121              		.loc 1 1441 13 is_stmt 0 view .LVU3246
 10122 0504 1B3E     		subs	r6, r6, #27
 10123              	.LVL1122:
1442:src/display.c **** 	      break;
 10124              		.loc 1 1442 6 is_stmt 1 view .LVU3247
1442:src/display.c **** 	      break;
 10125              		.loc 1 1442 9 is_stmt 0 view .LVU3248
 10126 0506 002E     		cmp	r6, #0
 10127 0508 F3DC     		bgt	.L1051
 10128              	.L1200:
1442:src/display.c **** 	      break;
 10129              		.loc 1 1442 9 view .LVU3249
 10130 050a 029E     		ldr	r6, [sp, #8]
 10131              	.LVL1123:
1442:src/display.c **** 	      break;
 10132              		.loc 1 1442 9 view .LVU3250
 10133 050c 3D46     		mov	r5, r7
 10134 050e 5746     		mov	r7, r10
 10135              	.LVL1124:
 10136              	.L1032:
1452:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10137              		.loc 1 1452 4 is_stmt 1 view .LVU3251
1452:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10138              		.loc 1 1452 8 is_stmt 0 view .LVU3252
 10139 0510 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1452:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10140              		.loc 1 1452 7 view .LVU3253
 10141 0512 A2F14401 		sub	r1, r2, #68
 10142 0516 0129     		cmp	r1, #1
 10143 0518 40F21581 		bls	.L1224
 10144              	.L1054:
 10145              	.LVL1125:
1452:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10146              		.loc 1 1452 7 view .LVU3254
 10147              	.LBE619:
ARM GAS  /tmp/cchf4YwX.s 			page 298


 10148              	.LBE633:
3007:src/display.c **** 	      goto finish;
 10149              		.loc 1 3007 6 is_stmt 1 view .LVU3255
3007:src/display.c **** 	      goto finish;
 10150              		.loc 1 3007 9 is_stmt 0 view .LVU3256
 10151 051c D8F80030 		ldr	r3, [r8]
 10152 0520 002B     		cmp	r3, #0
 10153 0522 3FF4DBAE 		beq	.L1211
 10154              	.L1125:
 10155 0526 5D4D     		ldr	r5, .L1256+20
 10156 0528 5FE6     		b	.L1022
 10157              	.LVL1126:
 10158              	.L1221:
2763:src/display.c **** 	  if (State2.numdigit > 0)
 10159              		.loc 1 2763 4 is_stmt 1 view .LVU3257
2763:src/display.c **** 	  if (State2.numdigit > 0)
 10160              		.loc 1 2763 9 is_stmt 0 view .LVU3258
 10161 052a 2E22     		movs	r2, #46
 10162 052c 6749     		ldr	r1, .L1256+68
 10163 052e 1EA8     		add	r0, sp, #120
 10164              	.LVL1127:
2763:src/display.c **** 	  if (State2.numdigit > 0)
 10165              		.loc 1 2763 9 view .LVU3259
 10166 0530 FFF7FEFF 		bl	scopy_char
 10167              	.LVL1128:
2764:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10168              		.loc 1 2764 14 view .LVU3260
 10169 0534 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2763:src/display.c **** 	  if (State2.numdigit > 0)
 10170              		.loc 1 2763 9 view .LVU3261
 10171 0536 0346     		mov	r3, r0
 10172              	.LVL1129:
2764:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10173              		.loc 1 2764 4 is_stmt 1 view .LVU3262
2764:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10174              		.loc 1 2764 7 is_stmt 0 view .LVU3263
 10175 0538 002A     		cmp	r2, #0
 10176 053a 40F0FF80 		bne	.L1225
 10177              	.L934:
2767:src/display.c **** 	  if (yreg_enabled) {
 10178              		.loc 1 2767 4 is_stmt 1 view .LVU3264
 10179              	.LVL1130:
2767:src/display.c **** 	  if (yreg_enabled) {
 10180              		.loc 1 2767 10 is_stmt 0 view .LVU3265
 10181 053e 5F22     		movs	r2, #95
 10182 0540 1A70     		strb	r2, [r3]
2768:src/display.c **** 	    set_status_top(buf);
 10183              		.loc 1 2768 4 is_stmt 1 view .LVU3266
2768:src/display.c **** 	    set_status_top(buf);
 10184              		.loc 1 2768 7 is_stmt 0 view .LVU3267
 10185 0542 BBF1000F 		cmp	fp, #0
 10186 0546 7FF4A0AE 		bne	.L1203
2768:src/display.c **** 	    set_status_top(buf);
 10187              		.loc 1 2768 7 view .LVU3268
 10188 054a 80E7     		b	.L931
 10189              	.LVL1131:
 10190              	.L1028:
ARM GAS  /tmp/cchf4YwX.s 			page 299


 10191              	.LBB634:
 10192              	.LBB620:
1347:src/display.c **** 
 10193              		.loc 1 1347 2 is_stmt 1 view .LVU3269
 10194 054c FFF7FEFF 		bl	set_separator_decimal_modes
 10195              	.LVL1132:
1349:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10196              		.loc 1 1349 2 view .LVU3270
1351:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10197              		.loc 1 1351 2 view .LVU3271
1351:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10198              		.loc 1 1351 5 is_stmt 0 view .LVU3272
 10199 0550 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10200              	.LBB603:
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10201              		.loc 1 1358 15 view .LVU3273
 10202 0552 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 10203              	.LBE603:
1351:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10204              		.loc 1 1351 5 view .LVU3274
 10205 0554 012B     		cmp	r3, #1
 10206 0556 40F20E81 		bls	.L1031
 10207              	.LVL1133:
 10208              	.LBB604:
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10209              		.loc 1 1358 14 is_stmt 1 view .LVU3275
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10210              		.loc 1 1358 4 is_stmt 0 view .LVU3276
 10211 055a 0029     		cmp	r1, #0
 10212 055c 00F0A081 		beq	.L1075
1355:src/display.c **** 	  int j;
 10213              		.loc 1 1355 10 view .LVU3277
 10214 0560 5B46     		mov	r3, fp
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10215              		.loc 1 1358 10 view .LVU3278
 10216 0562 5A46     		mov	r2, fp
 10217 0564 AC46     		mov	ip, r5
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10218              		.loc 1 1358 4 view .LVU3279
 10219 0566 0846     		mov	r0, r1
 10220              	.LBE604:
1326:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10221              		.loc 1 1326 11 view .LVU3280
 10222 0568 4FF0FF3E 		mov	lr, #-1
 10223 056c 04E0     		b	.L1034
 10224              	.LVL1134:
 10225              	.L1033:
 10226              	.LBB605:
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10227              		.loc 1 1358 28 is_stmt 1 view .LVU3281
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10228              		.loc 1 1358 15 is_stmt 0 view .LVU3282
 10229 056e 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10230              		.loc 1 1358 29 view .LVU3283
 10231 0572 0132     		adds	r2, r2, #1
 10232              	.LVL1135:
ARM GAS  /tmp/cchf4YwX.s 			page 300


1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10233              		.loc 1 1358 14 is_stmt 1 view .LVU3284
1358:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10234              		.loc 1 1358 4 is_stmt 0 view .LVU3285
 10235 0574 0028     		cmp	r0, #0
 10236 0576 46D0     		beq	.L1226
 10237              	.LVL1136:
 10238              	.L1034:
1359:src/display.c **** 	      gotdot = j;
 10239              		.loc 1 1359 6 is_stmt 1 view .LVU3286
1359:src/display.c **** 	      gotdot = j;
 10240              		.loc 1 1359 9 is_stmt 0 view .LVU3287
 10241 0578 2E28     		cmp	r0, #46
 10242 057a F8D1     		bne	.L1033
1360:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10243              		.loc 1 1360 8 is_stmt 1 view .LVU3288
 10244              	.LVL1137:
1362:src/display.c **** #  endif
 10245              		.loc 1 1362 8 view .LVU3289
1359:src/display.c **** 	      gotdot = j;
 10246              		.loc 1 1359 22 is_stmt 0 view .LVU3290
 10247 057c BEF1FF3F 		cmp	lr, #-1
 10248 0580 F5D1     		bne	.L1033
1362:src/display.c **** #  endif
 10249              		.loc 1 1362 29 view .LVU3291
 10250 0582 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10251 0586 A3F12E03 		sub	r3, #46
 10252 058a B3FA83F3 		clz	r3, r3
1362:src/display.c **** #  endif
 10253              		.loc 1 1362 19 view .LVU3292
 10254 058e 9646     		mov	lr, r2
1362:src/display.c **** #  endif
 10255              		.loc 1 1362 29 view .LVU3293
 10256 0590 5B09     		lsrs	r3, r3, #5
 10257              	.LVL1138:
1362:src/display.c **** #  endif
 10258              		.loc 1 1362 29 view .LVU3294
 10259 0592 ECE7     		b	.L1033
 10260              	.LVL1139:
 10261              	.L937:
1362:src/display.c **** #  endif
 10262              		.loc 1 1362 29 view .LVU3295
 10263              	.LBE605:
 10264              	.LBE620:
 10265              	.LBE634:
2780:src/display.c **** #endif
 10266              		.loc 1 2780 6 is_stmt 1 view .LVU3296
2780:src/display.c **** #endif
 10267              		.loc 1 2780 11 is_stmt 0 view .LVU3297
 10268 0594 4E49     		ldr	r1, .L1256+72
 10269 0596 1EA8     		add	r0, sp, #120
 10270              	.LVL1140:
2780:src/display.c **** #endif
 10271              		.loc 1 2780 11 view .LVU3298
 10272 0598 FFF7FEFF 		bl	scopy
 10273              	.LVL1141:
2780:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 301


 10274              		.loc 1 2780 11 view .LVU3299
 10275 059c E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10276 059e 57E6     		b	.L938
 10277              	.LVL1142:
 10278              	.L1223:
2979:src/display.c **** 		    SET_POLAR_READY;
 10279              		.loc 1 2979 7 is_stmt 1 view .LVU3300
 10280 05a0 0020     		movs	r0, #0
 10281 05a2 FFF7FEFF 		bl	op_r2p
 10282              	.LVL1143:
2980:src/display.c **** 		  }
 10283              		.loc 1 2980 7 view .LVU3301
 10284 05a6 4B4A     		ldr	r2, .L1256+76
 10285 05a8 1368     		ldr	r3, [r2]
 10286 05aa 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 10287 05ae 6FF30002 		bfc	r2, #0, #1
 10288 05b2 83F8AD27 		strb	r2, [r3, #1965]
 10289 05b6 CEE6     		b	.L1019
 10290              	.LVL1144:
 10291              	.L940:
2787:src/display.c **** 	    *bp++ = '\021';
 10292              		.loc 1 2787 11 view .LVU3302
2787:src/display.c **** 	    *bp++ = '\021';
 10293              		.loc 1 2787 14 is_stmt 0 view .LVU3303
 10294 05b8 012D     		cmp	r5, #1
 10295 05ba 00F0F080 		beq	.L1227
2794:src/display.c **** 	      *bp++ = '.';
 10296              		.loc 1 2794 6 is_stmt 1 view .LVU3304
2794:src/display.c **** 	      *bp++ = '.';
 10297              		.loc 1 2794 10 is_stmt 0 view .LVU3305
 10298 05be A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2794:src/display.c **** 	      *bp++ = '.';
 10299              		.loc 1 2794 9 view .LVU3306
 10300 05c0 DA07     		lsls	r2, r3, #31
2795:src/display.c **** 	    if (State2.numdigit > 0) {
 10301              		.loc 1 2795 8 is_stmt 1 view .LVU3307
 10302              	.LVL1145:
2795:src/display.c **** 	    if (State2.numdigit > 0) {
 10303              		.loc 1 2795 14 is_stmt 0 view .LVU3308
 10304 05c2 44BF     		itt	mi
 10305 05c4 2E23     		movmi	r3, #46
 10306 05c6 00F8013B 		strbmi	r3, [r0], #1
 10307              	.LVL1146:
2796:src/display.c **** 	      if (State2.shuffle)
 10308              		.loc 1 2796 6 is_stmt 1 view .LVU3309
2796:src/display.c **** 	      if (State2.shuffle)
 10309              		.loc 1 2796 16 is_stmt 0 view .LVU3310
 10310 05ca E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2796:src/display.c **** 	      if (State2.shuffle)
 10311              		.loc 1 2796 9 view .LVU3311
 10312 05cc 8AB1     		cbz	r2, .L944
2797:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10313              		.loc 1 2797 8 is_stmt 1 view .LVU3312
2797:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10314              		.loc 1 2797 12 is_stmt 0 view .LVU3313
 10315 05ce A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2797:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
ARM GAS  /tmp/cchf4YwX.s 			page 302


 10316              		.loc 1 2797 11 view .LVU3314
 10317 05d0 9B07     		lsls	r3, r3, #30
 10318 05d2 40F16781 		bpl	.L945
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10319              		.loc 1 2798 3 is_stmt 1 view .LVU3315
 10320              	.LVL1147:
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10321              		.loc 1 2798 17 is_stmt 0 view .LVU3316
 10322 05d6 2289     		ldrh	r2, [r4, #8]
 10323              	.LVL1148:
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10324              		.loc 1 2798 34 is_stmt 1 view .LVU3317
 10325 05d8 3F49     		ldr	r1, .L1256+80
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10326              		.loc 1 2798 10 is_stmt 0 view .LVU3318
 10327 05da 0023     		movs	r3, #0
 10328              	.LVL1149:
 10329              	.L946:
2799:src/display.c **** 	      else
 10330              		.loc 1 2799 5 is_stmt 1 discriminator 3 view .LVU3319
2799:src/display.c **** 	      else
 10331              		.loc 1 2799 24 is_stmt 0 discriminator 3 view .LVU3320
 10332 05dc 02F00305 		and	r5, r2, #3
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10333              		.loc 1 2798 54 discriminator 3 view .LVU3321
 10334 05e0 0133     		adds	r3, r3, #1
 10335              	.LVL1150:
2799:src/display.c **** 	      else
 10336              		.loc 1 2799 11 discriminator 3 view .LVU3322
 10337 05e2 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 10338 05e4 00F8015B 		strb	r5, [r0], #1
 10339              	.LVL1151:
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10340              		.loc 1 2798 53 is_stmt 1 discriminator 3 view .LVU3323
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10341              		.loc 1 2798 42 is_stmt 0 discriminator 3 view .LVU3324
 10342 05e8 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10343              		.loc 1 2798 3 discriminator 3 view .LVU3325
 10344 05ea 9D42     		cmp	r5, r3
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10345              		.loc 1 2798 60 discriminator 3 view .LVU3326
 10346 05ec 4FEAA202 		asr	r2, r2, #2
 10347              	.LVL1152:
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10348              		.loc 1 2798 34 is_stmt 1 discriminator 3 view .LVU3327
2798:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10349              		.loc 1 2798 3 is_stmt 0 discriminator 3 view .LVU3328
 10350 05f0 F4DC     		bgt	.L946
 10351              	.LVL1153:
 10352              	.L944:
2804:src/display.c **** 	  }
 10353              		.loc 1 2804 6 is_stmt 1 view .LVU3329
2804:src/display.c **** 	  }
 10354              		.loc 1 2804 12 is_stmt 0 view .LVU3330
 10355 05f2 5F23     		movs	r3, #95
 10356 05f4 0370     		strb	r3, [r0]
ARM GAS  /tmp/cchf4YwX.s 			page 303


 10357 05f6 44E6     		b	.L964
 10358              	.LVL1154:
 10359              	.L1222:
 10360              	.LBB635:
 10361              	.LBB621:
1336:src/display.c **** 	p++;
 10362              		.loc 1 1336 2 is_stmt 1 view .LVU3331
 10363              	.LBB606:
 10364              	.LBI606:
 302:src/display.c **** {
 10365              		.loc 1 302 13 view .LVU3332
 10366              	.LBB607:
 304:src/display.c ****   set_dot(MANT_SIGN);
 10367              		.loc 1 304 3 view .LVU3333
 304:src/display.c ****   set_dot(MANT_SIGN);
 10368              		.loc 1 304 25 is_stmt 0 view .LVU3334
 10369 05f8 264A     		ldr	r2, .L1256+12
 305:src/display.c **** }
 10370              		.loc 1 305 3 view .LVU3335
 10371 05fa 8120     		movs	r0, #129
 10372              	.LVL1155:
 304:src/display.c ****   set_dot(MANT_SIGN);
 10373              		.loc 1 304 25 view .LVU3336
 10374 05fc 1370     		strb	r3, [r2]
 305:src/display.c **** }
 10375              		.loc 1 305 3 is_stmt 1 view .LVU3337
 10376              	.LBE607:
 10377              	.LBE606:
1337:src/display.c ****       }
 10378              		.loc 1 1337 3 is_stmt 0 view .LVU3338
 10379 05fe 0135     		adds	r5, r5, #1
 10380              	.LVL1156:
 10381              	.LBB609:
 10382              	.LBB608:
 305:src/display.c **** }
 10383              		.loc 1 305 3 view .LVU3339
 10384 0600 FFF7FEFF 		bl	set_dot
 10385              	.LVL1157:
 10386              	.LBE608:
 10387              	.LBE609:
1337:src/display.c ****       }
 10388              		.loc 1 1337 2 is_stmt 1 view .LVU3340
1337:src/display.c ****       }
 10389              		.loc 1 1337 2 is_stmt 0 view .LVU3341
 10390 0604 4EE6     		b	.L1027
 10391              	.LVL1158:
 10392              	.L1226:
 10393              	.LBB610:
1366:src/display.c **** 	  if (j > 0) {
 10394              		.loc 1 1366 4 is_stmt 1 view .LVU3342
1366:src/display.c **** 	  if (j > 0) {
 10395              		.loc 1 1366 24 is_stmt 0 view .LVU3343
 10396 0606 03F10C0C 		add	ip, r3, #12
1366:src/display.c **** 	  if (j > 0) {
 10397              		.loc 1 1366 6 view .LVU3344
 10398 060a A2EB0C02 		sub	r2, r2, ip
 10399              	.LVL1159:
ARM GAS  /tmp/cchf4YwX.s 			page 304


1367:src/display.c **** 	    p += j + 1;
 10400              		.loc 1 1367 4 is_stmt 1 view .LVU3345
1367:src/display.c **** 	    p += j + 1;
 10401              		.loc 1 1367 7 is_stmt 0 view .LVU3346
 10402 060e 002A     		cmp	r2, #0
 10403 0610 40F3DB80 		ble	.L1076
1368:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10404              		.loc 1 1368 6 is_stmt 1 view .LVU3347
1368:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10405              		.loc 1 1368 8 is_stmt 0 view .LVU3348
 10406 0614 511C     		adds	r1, r2, #1
1370:src/display.c **** 	      gotdot = 0;
 10407              		.loc 1 1370 9 view .LVU3349
 10408 0616 7245     		cmp	r2, lr
1368:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10409              		.loc 1 1368 8 view .LVU3350
 10410 0618 0D44     		add	r5, r5, r1
 10411              	.LVL1160:
1369:src/display.c **** 	    if (gotdot <= j) {
 10412              		.loc 1 1369 6 is_stmt 1 view .LVU3351
1370:src/display.c **** 	      gotdot = 0;
 10413              		.loc 1 1370 6 view .LVU3352
1370:src/display.c **** 	      gotdot = 0;
 10414              		.loc 1 1370 9 is_stmt 0 view .LVU3353
 10415 061a C0F2C580 		blt	.L1036
1371:src/display.c **** 	      if (double_dot)
 10416              		.loc 1 1371 8 is_stmt 1 view .LVU3354
 10417              	.LVL1161:
1372:src/display.c **** 		p++;
 10418              		.loc 1 1372 8 view .LVU3355
1372:src/display.c **** 		p++;
 10419              		.loc 1 1372 11 is_stmt 0 view .LVU3356
 10420 061e 002B     		cmp	r3, #0
 10421 0620 00F00582 		beq	.L1077
1373:src/display.c **** 	    }
 10422              		.loc 1 1373 3 is_stmt 1 view .LVU3357
1373:src/display.c **** 	    }
 10423              		.loc 1 1373 4 is_stmt 0 view .LVU3358
 10424 0624 0135     		adds	r5, r5, #1
 10425              	.LVL1162:
1369:src/display.c **** 	    if (gotdot <= j) {
 10426              		.loc 1 1369 8 view .LVU3359
 10427 0626 4FF0090B 		mov	fp, #9
 10428              	.LVL1163:
 10429              	.L1037:
1382:src/display.c **** 	    overflow_to_left = 1;
 10430              		.loc 1 1382 6 is_stmt 1 view .LVU3360
 10431 062a 3C21     		movs	r1, #60
 10432              	.LVL1164:
1382:src/display.c **** 	    overflow_to_left = 1;
 10433              		.loc 1 1382 6 is_stmt 0 view .LVU3361
 10434 062c 0020     		movs	r0, #0
 10435 062e FFF7FEFF 		bl	set_dig
 10436              	.LVL1165:
1383:src/display.c **** 	  }
 10437              		.loc 1 1383 6 is_stmt 1 view .LVU3362
1383:src/display.c **** 	  }
ARM GAS  /tmp/cchf4YwX.s 			page 305


 10438              		.loc 1 1383 6 is_stmt 0 view .LVU3363
 10439 0632 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1383:src/display.c **** 	  }
 10440              		.loc 1 1383 6 view .LVU3364
 10441              	.LBE610:
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10442              		.loc 1 1389 9 is_stmt 1 view .LVU3365
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10443              		.loc 1 1389 2 is_stmt 0 view .LVU3366
 10444 0634 4FF0000A 		mov	r10, #0
 10445              	.LVL1166:
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10446              		.loc 1 1389 2 view .LVU3367
 10447 0638 0029     		cmp	r1, #0
 10448 063a 3FF46FAF 		beq	.L1054
 10449              	.LVL1167:
 10450              	.L1067:
 10451              	.LBB611:
1383:src/display.c **** 	  }
 10452              		.loc 1 1383 23 view .LVU3368
 10453 063e 0123     		movs	r3, #1
 10454 0640 0193     		str	r3, [sp, #4]
 10455 0642 13E0     		b	.L1046
 10456              	.LVL1168:
 10457              	.L1228:
1383:src/display.c **** 	  }
 10458              		.loc 1 1383 23 view .LVU3369
 10459              	.LBE611:
1395:src/display.c **** 	      gotdot = i;
 10460              		.loc 1 1395 6 is_stmt 1 view .LVU3370
1395:src/display.c **** 	      gotdot = i;
 10461              		.loc 1 1395 9 is_stmt 0 view .LVU3371
 10462 0644 BAF1FF3F 		cmp	r10, #-1
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10463              		.loc 1 1399 9 view .LVU3372
 10464 0648 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1395:src/display.c **** 	      gotdot = i;
 10465              		.loc 1 1395 9 view .LVU3373
 10466 064a 47D0     		beq	.L1040
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10467              		.loc 1 1399 6 is_stmt 1 view .LVU3374
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10468              		.loc 1 1399 9 is_stmt 0 view .LVU3375
 10469 064c 2E2B     		cmp	r3, #46
 10470 064e 50D0     		beq	.L1065
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10471              		.loc 1 1399 25 view .LVU3376
 10472 0650 D345     		cmp	fp, r10
 10473 0652 45D0     		beq	.L1043
 10474              	.L1042:
1406:src/display.c **** 		i += segs_per_digit;
 10475              		.loc 1 1406 3 is_stmt 1 view .LVU3377
 10476 0654 5846     		mov	r0, fp
 10477 0656 2F21     		movs	r1, #47
 10478 0658 FFF7FEFF 		bl	set_dig
 10479              	.LVL1169:
1407:src/display.c **** 	      }
ARM GAS  /tmp/cchf4YwX.s 			page 306


 10480              		.loc 1 1407 3 view .LVU3378
1407:src/display.c **** 	      }
 10481              		.loc 1 1407 5 is_stmt 0 view .LVU3379
 10482 065c 0BF1090B 		add	fp, fp, #9
 10483              	.LVL1170:
1407:src/display.c **** 	      }
 10484              		.loc 1 1407 5 view .LVU3380
 10485 0660 2B46     		mov	r3, r5
 10486              	.LVL1171:
 10487              	.L1044:
1393:src/display.c **** 	  if (*p == '.') {
 10488              		.loc 1 1393 11 is_stmt 1 view .LVU3381
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10489              		.loc 1 1389 9 is_stmt 0 view .LVU3382
 10490 0662 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1393:src/display.c **** 	  if (*p == '.') {
 10491              		.loc 1 1393 12 view .LVU3383
 10492 0664 0135     		adds	r5, r5, #1
 10493              	.LVL1172:
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10494              		.loc 1 1389 9 is_stmt 1 view .LVU3384
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10495              		.loc 1 1389 2 is_stmt 0 view .LVU3385
 10496 0666 0029     		cmp	r1, #0
 10497 0668 3FF435AF 		beq	.L1047
 10498              	.LVL1173:
 10499              	.L1046:
1391:src/display.c **** #endif
 10500              		.loc 1 1391 9 view .LVU3386
 10501 066c A1F14403 		sub	r3, r1, #68
 10502 0670 012B     		cmp	r3, #1
 10503 0672 7FF630AF 		bls	.L1047
1394:src/display.c **** 	    if (gotdot < 0)
 10504              		.loc 1 1394 4 is_stmt 1 view .LVU3387
1394:src/display.c **** 	    if (gotdot < 0)
 10505              		.loc 1 1394 7 is_stmt 0 view .LVU3388
 10506 0676 2E29     		cmp	r1, #46
 10507 0678 E4D0     		beq	.L1228
1428:src/display.c **** 	      i += segs_per_digit;
 10508              		.loc 1 1428 8 is_stmt 1 view .LVU3389
 10509 067a 5846     		mov	r0, fp
 10510 067c FFF7FEFF 		bl	set_dig
 10511              	.LVL1174:
1429:src/display.c **** 	    }
 10512              		.loc 1 1429 8 view .LVU3390
1429:src/display.c **** 	    }
 10513              		.loc 1 1429 10 is_stmt 0 view .LVU3391
 10514 0680 0BF1090B 		add	fp, fp, #9
 10515              	.LVL1175:
1429:src/display.c **** 	    }
 10516              		.loc 1 1429 10 view .LVU3392
 10517 0684 2B46     		mov	r3, r5
 10518 0686 ECE7     		b	.L1044
 10519              	.L1257:
 10520              		.align	2
 10521              	.L1256:
 10522 0688 0C000000 		.word	.LANCHOR17+12
ARM GAS  /tmp/cchf4YwX.s 			page 307


 10523 068c 08000000 		.word	.LC25
 10524 0690 18000000 		.word	.LC26
 10525 0694 00000000 		.word	LastDisplayedNumber
 10526 0698 00000000 		.word	DispMsg
 10527 069c 00000000 		.word	ShowRegister
 10528 06a0 34000000 		.word	.LC27
 10529 06a4 00000000 		.word	LastDisplayedExponent
 10530 06a8 00000000 		.word	.LANCHOR20
 10531 06ac 00000000 		.word	DispPlot
 10532 06b0 38000000 		.word	.LC28
 10533 06b4 AC000000 		.word	.LC44
 10534 06b8 00000000 		.word	.LANCHOR21
 10535 06bc B4000000 		.word	.LC31
 10536 06c0 00000000 		.word	.LANCHOR22
 10537 06c4 00000000 		.word	.LANCHOR24
 10538 06c8 00000000 		.word	.LANCHOR0
 10539 06cc 56040000 		.word	argcmds+1110
 10540 06d0 3C000000 		.word	.LC29
 10541 06d4 00000000 		.word	main_ram
 10542 06d8 BC000000 		.word	.LC30
 10543              	.L1040:
1396:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10544              		.loc 1 1396 8 is_stmt 1 view .LVU3393
 10545              	.LVL1176:
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10546              		.loc 1 1399 6 view .LVU3394
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10547              		.loc 1 1399 9 is_stmt 0 view .LVU3395
 10548 06dc 2E2B     		cmp	r3, #46
 10549 06de 07D0     		beq	.L1229
 10550              	.LVL1177:
 10551              	.L1043:
1410:src/display.c **** 		  i += segs_per_digit;
 10552              		.loc 1 1410 3 is_stmt 1 view .LVU3396
1410:src/display.c **** 		  i += segs_per_digit;
 10553              		.loc 1 1410 6 is_stmt 0 view .LVU3397
 10554 06e0 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10555 06e2 012B     		cmp	r3, #1
 10556 06e4 51D9     		bls	.L1045
1411:src/display.c **** 		}
 10557              		.loc 1 1411 5 is_stmt 1 view .LVU3398
 10558              	.LVL1178:
1411:src/display.c **** 		}
 10559              		.loc 1 1411 5 is_stmt 0 view .LVU3399
 10560 06e6 DA46     		mov	r10, fp
 10561 06e8 2B46     		mov	r3, r5
1411:src/display.c **** 		}
 10562              		.loc 1 1411 7 view .LVU3400
 10563 06ea 0BF1090B 		add	fp, fp, #9
 10564              	.LVL1179:
1411:src/display.c **** 		}
 10565              		.loc 1 1411 7 view .LVU3401
 10566 06ee B8E7     		b	.L1044
 10567              	.LVL1180:
 10568              	.L1229:
1399:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10569              		.loc 1 1399 9 view .LVU3402
ARM GAS  /tmp/cchf4YwX.s 			page 308


 10570 06f0 DA46     		mov	r10, fp
 10571              	.LVL1181:
 10572              	.L1065:
1400:src/display.c **** 		p++;
 10573              		.loc 1 1400 8 is_stmt 1 view .LVU3403
1401:src/display.c **** 	      }
 10574              		.loc 1 1401 3 view .LVU3404
1401:src/display.c **** 	      }
 10575              		.loc 1 1401 4 is_stmt 0 view .LVU3405
 10576 06f2 0135     		adds	r5, r5, #1
 10577              	.LVL1182:
1401:src/display.c **** 	      }
 10578              		.loc 1 1401 4 view .LVU3406
 10579 06f4 AEE7     		b	.L1042
 10580              	.LVL1183:
 10581              	.L947:
1401:src/display.c **** 	      }
 10582              		.loc 1 1401 4 view .LVU3407
 10583              	.LBE621:
 10584              	.LBE635:
2827:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10585              		.loc 1 2827 9 is_stmt 1 view .LVU3408
2827:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10586              		.loc 1 2827 12 is_stmt 0 view .LVU3409
 10587 06f6 BAF1000F 		cmp	r10, #0
 10588 06fa 6BD1     		bne	.L1230
2882:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10589              		.loc 1 2882 9 is_stmt 1 view .LVU3410
2882:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10590              		.loc 1 2882 12 is_stmt 0 view .LVU3411
 10591 06fc 1807     		lsls	r0, r3, #28
 10592 06fe 00F1DE80 		bmi	.L1231
2897:src/display.c **** 	  show_status();
 10593              		.loc 1 2897 9 is_stmt 1 view .LVU3412
2897:src/display.c **** 	  show_status();
 10594              		.loc 1 2897 19 is_stmt 0 view .LVU3413
 10595 0702 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2897:src/display.c **** 	  show_status();
 10596              		.loc 1 2897 12 view .LVU3414
 10597 0704 002F     		cmp	r7, #0
 10598 0706 40F01581 		bne	.L1232
2900:src/display.c **** 	  show_label();
 10599              		.loc 1 2900 9 is_stmt 1 view .LVU3415
2900:src/display.c **** 	  show_label();
 10600              		.loc 1 2900 13 is_stmt 0 view .LVU3416
 10601 070a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2900:src/display.c **** 	  show_label();
 10602              		.loc 1 2900 12 view .LVU3417
 10603 070c 5A07     		lsls	r2, r3, #29
 10604 070e 00F1EC80 		bmi	.L1233
2903:src/display.c **** 	  show_registers();
 10605              		.loc 1 2903 9 is_stmt 1 view .LVU3418
2903:src/display.c **** 	  show_registers();
 10606              		.loc 1 2903 12 is_stmt 0 view .LVU3419
 10607 0712 1F07     		lsls	r7, r3, #28
 10608 0714 00F10A83 		bmi	.L1234
2913:src/display.c **** 	  if (DispMsg) { 
ARM GAS  /tmp/cchf4YwX.s 			page 309


 10609              		.loc 1 2913 9 is_stmt 1 view .LVU3420
2913:src/display.c **** 	  if (DispMsg) { 
 10610              		.loc 1 2913 12 is_stmt 0 view .LVU3421
 10611 0718 4F06     		lsls	r7, r1, #25
 10612 071a 40F1EE82 		bpl	.L998
2914:src/display.c **** 	    set_status(DispMsg);
 10613              		.loc 1 2914 4 is_stmt 1 view .LVU3422
2914:src/display.c **** 	    set_status(DispMsg);
 10614              		.loc 1 2914 8 is_stmt 0 view .LVU3423
 10615 071e C54F     		ldr	r7, .L1258
 10616 0720 3B68     		ldr	r3, [r7]
2914:src/display.c **** 	    set_status(DispMsg);
 10617              		.loc 1 2914 7 view .LVU3424
 10618 0722 002B     		cmp	r3, #0
 10619 0724 00F09E81 		beq	.L999
2915:src/display.c **** 	  } else if (DispPlot) {
 10620              		.loc 1 2915 6 is_stmt 1 view .LVU3425
 10621 0728 1846     		mov	r0, r3
 10622 072a FFF7FEFF 		bl	set_status
 10623              	.LVL1184:
2967:src/display.c ****       nostk:
 10624              		.loc 1 2967 2 view .LVU3426
 10625 072e C24B     		ldr	r3, .L1258+4
 10626 0730 0093     		str	r3, [sp]
 10627 0732 FFF7FEFF 		bl	show_stack
 10628              	.LVL1185:
2969:src/display.c **** 	if (!skip) {
 10629              		.loc 1 2969 2 view .LVU3427
 10630 0736 FFF7FEFF 		bl	show_flags
 10631              	.LVL1186:
2970:src/display.c **** 	  if (State2.runmode) {
 10632              		.loc 1 2970 2 view .LVU3428
 10633 073a A4E4     		b	.L928
 10634              	.LVL1187:
 10635              	.L1225:
2765:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10636              		.loc 1 2765 6 view .LVU3429
2765:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10637              		.loc 1 2765 11 is_stmt 0 view .LVU3430
 10638 073c 2189     		ldrh	r1, [r4, #8]
 10639 073e FFF7FEFF 		bl	num_arg_0
 10640              	.LVL1188:
2765:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10641              		.loc 1 2765 11 view .LVU3431
 10642 0742 0346     		mov	r3, r0
 10643              	.LVL1189:
2765:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10644              		.loc 1 2765 11 view .LVU3432
 10645 0744 FBE6     		b	.L934
 10646              	.LVL1190:
 10647              	.L1224:
 10648              	.LBB636:
 10649              	.LBB622:
 10650              	.LBB612:
1456:src/display.c **** #  endif
 10651              		.loc 1 1456 6 is_stmt 1 view .LVU3433
1459:src/display.c **** 	      flags |= 2;
ARM GAS  /tmp/cchf4YwX.s 			page 310


 10652              		.loc 1 1459 6 view .LVU3434
1460:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10653              		.loc 1 1460 14 is_stmt 0 view .LVU3435
 10654 0746 442A     		cmp	r2, #68
 10655 0748 14BF     		ite	ne
 10656 074a 4FF00C0A 		movne	r10, #12
 10657 074e 4FF00E0A 		moveq	r10, #14
 10658              	.LVL1191:
1461:src/display.c **** 	      flags |= 16;
 10659              		.loc 1 1461 6 is_stmt 1 view .LVU3436
1461:src/display.c **** 	      flags |= 16;
 10660              		.loc 1 1461 9 is_stmt 0 view .LVU3437
 10661 0752 BBF15A0F 		cmp	fp, #90
1462:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10662              		.loc 1 1462 8 is_stmt 1 view .LVU3438
1462:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10663              		.loc 1 1462 14 is_stmt 0 view .LVU3439
 10664 0756 C8BF     		it	gt
 10665 0758 4AF0100A 		orrgt	r10, r10, #16
 10666              	.LVL1192:
1463:src/display.c **** 	  }
 10667              		.loc 1 1463 6 is_stmt 1 view .LVU3440
 10668 075c 681C     		adds	r0, r5, #1
 10669 075e FFF7FEFF 		bl	s_to_i
 10670              	.LVL1193:
 10671 0762 5146     		mov	r1, r10
 10672 0764 0022     		movs	r2, #0
 10673 0766 FFF7FEFF 		bl	set_exp
 10674              	.LVL1194:
1463:src/display.c **** 	  }
 10675              		.loc 1 1463 6 is_stmt 0 view .LVU3441
 10676              	.LBE612:
 10677              	.LBE622:
 10678              	.LBE636:
3007:src/display.c **** 	      goto finish;
 10679              		.loc 1 3007 6 is_stmt 1 view .LVU3442
3007:src/display.c **** 	      goto finish;
 10680              		.loc 1 3007 9 is_stmt 0 view .LVU3443
 10681 076a D8F80030 		ldr	r3, [r8]
 10682 076e 002B     		cmp	r3, #0
 10683 0770 3FF4B4AD 		beq	.L1211
 10684 0774 D7E6     		b	.L1125
 10685              	.LVL1195:
 10686              	.L1031:
 10687              	.LBB637:
 10688              	.LBB623:
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10689              		.loc 1 1389 9 is_stmt 1 view .LVU3444
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10690              		.loc 1 1389 2 is_stmt 0 view .LVU3445
 10691 0776 0029     		cmp	r1, #0
 10692 0778 00F09280 		beq	.L1075
1332:src/display.c **** #endif
 10693              		.loc 1 1332 11 view .LVU3446
 10694 077c CDF804B0 		str	fp, [sp, #4]
1326:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10695              		.loc 1 1326 11 view .LVU3447
ARM GAS  /tmp/cchf4YwX.s 			page 311


 10696 0780 4FF0FF3A 		mov	r10, #-1
 10697              	.LVL1196:
1326:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10698              		.loc 1 1326 11 view .LVU3448
 10699 0784 72E7     		b	.L1046
 10700              	.LVL1197:
 10701              	.L1081:
1326:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10702              		.loc 1 1326 11 view .LVU3449
 10703              	.LBE623:
 10704              	.LBE637:
 10705              	.LBB638:
 10706              	.LBB588:
3027:src/display.c **** 	      while(*b) {
 10707              		.loc 1 3027 10 view .LVU3450
 10708 0786 5A1C     		adds	r2, r3, #1
 10709 0788 D1E4     		b	.L1058
 10710              	.LVL1198:
 10711              	.L1045:
3027:src/display.c **** 	      while(*b) {
 10712              		.loc 1 3027 10 view .LVU3451
 10713              	.LBE588:
 10714              	.LBE638:
 10715              	.LBB639:
 10716              	.LBB624:
1414:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10717              		.loc 1 1414 5 is_stmt 1 view .LVU3452
 10718 078a AC4B     		ldr	r3, .L1258+8
 10719 078c 0022     		movs	r2, #0
 10720 078e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10721 0790 ABF10900 		sub	r0, fp, #9
 10722 0794 FFF7FEFF 		bl	set_decimal
 10723              	.LVL1199:
 10724 0798 DA46     		mov	r10, fp
 10725 079a 2B46     		mov	r3, r5
 10726 079c 61E7     		b	.L1044
 10727              	.LVL1200:
 10728              	.L1227:
1414:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10729              		.loc 1 1414 5 is_stmt 0 view .LVU3453
 10730              	.LBE624:
 10731              	.LBE639:
2788:src/display.c **** 	    *bp++ = '_';
 10732              		.loc 1 2788 6 is_stmt 1 view .LVU3454
2788:src/display.c **** 	    *bp++ = '_';
 10733              		.loc 1 2788 12 is_stmt 0 view .LVU3455
 10734 079e 1122     		movs	r2, #17
2789:src/display.c **** 	  } else {
 10735              		.loc 1 2789 12 view .LVU3456
 10736 07a0 5F23     		movs	r3, #95
2788:src/display.c **** 	    *bp++ = '_';
 10737              		.loc 1 2788 12 view .LVU3457
 10738 07a2 0270     		strb	r2, [r0]
2789:src/display.c **** 	  } else {
 10739              		.loc 1 2789 6 is_stmt 1 view .LVU3458
 10740              	.LVL1201:
2789:src/display.c **** 	  } else {
ARM GAS  /tmp/cchf4YwX.s 			page 312


 10741              		.loc 1 2789 12 is_stmt 0 view .LVU3459
 10742 07a4 4370     		strb	r3, [r0, #1]
 10743 07a6 6CE5     		b	.L964
 10744              	.LVL1202:
 10745              	.L1036:
 10746              	.LBB640:
 10747              	.LBB625:
 10748              	.LBB613:
1375:src/display.c **** 	      gotdot = 0;
 10749              		.loc 1 1375 11 is_stmt 1 view .LVU3460
1375:src/display.c **** 	      gotdot = 0;
 10750              		.loc 1 1375 14 is_stmt 0 view .LVU3461
 10751 07a8 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10752              	.LVL1203:
1375:src/display.c **** 	      gotdot = 0;
 10753              		.loc 1 1375 14 view .LVU3462
 10754 07aa 2E2A     		cmp	r2, #46
 10755 07ac 7ED0     		beq	.L1235
 10756              	.LVL1204:
1382:src/display.c **** 	    overflow_to_left = 1;
 10757              		.loc 1 1382 6 is_stmt 1 view .LVU3463
 10758 07ae 3C21     		movs	r1, #60
 10759              	.LVL1205:
1382:src/display.c **** 	    overflow_to_left = 1;
 10760              		.loc 1 1382 6 is_stmt 0 view .LVU3464
 10761 07b0 FFF7FEFF 		bl	set_dig
 10762              	.LVL1206:
1383:src/display.c **** 	  }
 10763              		.loc 1 1383 6 is_stmt 1 view .LVU3465
1383:src/display.c **** 	  }
 10764              		.loc 1 1383 6 is_stmt 0 view .LVU3466
 10765 07b4 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1383:src/display.c **** 	  }
 10766              		.loc 1 1383 6 view .LVU3467
 10767              	.LBE613:
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10768              		.loc 1 1389 9 is_stmt 1 view .LVU3468
 10769              	.LBB614:
1369:src/display.c **** 	    if (gotdot <= j) {
 10770              		.loc 1 1369 8 is_stmt 0 view .LVU3469
 10771 07b6 4FF0090B 		mov	fp, #9
 10772              	.LBE614:
1389:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10773              		.loc 1 1389 2 view .LVU3470
 10774 07ba 0029     		cmp	r1, #0
 10775 07bc 3FF4A8AE 		beq	.L1032
 10776              	.LBB615:
1381:src/display.c **** 	    set_dig(0, '<');
 10777              		.loc 1 1381 18 view .LVU3471
 10778 07c0 4FF0FF3A 		mov	r10, #-1
 10779              	.LVL1207:
1369:src/display.c **** 	    if (gotdot <= j) {
 10780              		.loc 1 1369 8 view .LVU3472
 10781 07c4 4FF0090B 		mov	fp, #9
 10782 07c8 39E7     		b	.L1067
 10783              	.LVL1208:
 10784              	.L1076:
ARM GAS  /tmp/cchf4YwX.s 			page 313


1369:src/display.c **** 	    if (gotdot <= j) {
 10785              		.loc 1 1369 8 view .LVU3473
 10786              	.LBE615:
1349:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10787              		.loc 1 1349 4 view .LVU3474
 10788 07ca 8346     		mov	fp, r0
1332:src/display.c **** #endif
 10789              		.loc 1 1332 11 view .LVU3475
 10790 07cc 0190     		str	r0, [sp, #4]
 10791              	.LBB616:
1385:src/display.c **** 	}
 10792              		.loc 1 1385 16 view .LVU3476
 10793 07ce 4FF0FF3A 		mov	r10, #-1
 10794              	.LVL1209:
1385:src/display.c **** 	}
 10795              		.loc 1 1385 16 view .LVU3477
 10796 07d2 4BE7     		b	.L1046
 10797              	.LVL1210:
 10798              	.L1230:
1385:src/display.c **** 	}
 10799              		.loc 1 1385 16 view .LVU3478
 10800              	.LBE616:
 10801              	.LBE625:
 10802              	.LBE640:
 10803              	.LBB641:
2828:src/display.c **** 	  char b2[16];
 10804              		.loc 1 2828 4 is_stmt 1 view .LVU3479
2828:src/display.c **** 	  char b2[16];
 10805              		.loc 1 2828 45 is_stmt 0 view .LVU3480
 10806 07d4 9A4B     		ldr	r3, .L1258+12
 10807 07d6 1B68     		ldr	r3, [r3]
 10808 07d8 B3F8DC07 		ldrh	r0, [r3, #2012]
2828:src/display.c **** 	  char b2[16];
 10809              		.loc 1 2828 22 view .LVU3481
 10810 07dc C0F34610 		ubfx	r0, r0, #5, #7
 10811 07e0 FFF7FEFF 		bl	current_catalogue
 10812              	.LVL1211:
2832:src/display.c **** 	  p = catcmd(op, b2);
 10813              		.loc 1 2832 9 view .LVU3482
 10814 07e4 9749     		ldr	r1, .L1258+16
2828:src/display.c **** 	  char b2[16];
 10815              		.loc 1 2828 22 view .LVU3483
 10816 07e6 0546     		mov	r5, r0
 10817              	.LVL1212:
2829:src/display.c **** 	  const char *p;
 10818              		.loc 1 2829 4 is_stmt 1 view .LVU3484
2830:src/display.c **** 
 10819              		.loc 1 2830 4 view .LVU3485
2832:src/display.c **** 	  p = catcmd(op, b2);
 10820              		.loc 1 2832 4 view .LVU3486
2832:src/display.c **** 	  p = catcmd(op, b2);
 10821              		.loc 1 2832 9 is_stmt 0 view .LVU3487
 10822 07e8 1EA8     		add	r0, sp, #120
 10823              	.LVL1213:
2832:src/display.c **** 	  p = catcmd(op, b2);
 10824              		.loc 1 2832 9 view .LVU3488
 10825 07ea FFF7FEFF 		bl	scopy
ARM GAS  /tmp/cchf4YwX.s 			page 314


 10826              	.LVL1214:
2833:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10827              		.loc 1 2833 8 view .LVU3489
 10828 07ee 08A9     		add	r1, sp, #32
2832:src/display.c **** 	  p = catcmd(op, b2);
 10829              		.loc 1 2832 9 view .LVU3490
 10830 07f0 0646     		mov	r6, r0
2833:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10831              		.loc 1 2833 8 view .LVU3491
 10832 07f2 2846     		mov	r0, r5
 10833              	.LVL1215:
2833:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10834              		.loc 1 2833 4 is_stmt 1 view .LVU3492
2833:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10835              		.loc 1 2833 8 is_stmt 0 view .LVU3493
 10836 07f4 FFF7FEFF 		bl	catcmd
 10837              	.LVL1216:
2834:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10838              		.loc 1 2834 7 view .LVU3494
 10839 07f8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10840 07fa 142B     		cmp	r3, #20
2833:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10841              		.loc 1 2833 8 view .LVU3495
 10842 07fc 0146     		mov	r1, r0
 10843              	.LVL1217:
2834:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10844              		.loc 1 2834 4 is_stmt 1 view .LVU3496
2834:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10845              		.loc 1 2834 7 is_stmt 0 view .LVU3497
 10846 07fe 07D0     		beq	.L949
2834:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10847              		.loc 1 2834 29 discriminator 1 view .LVU3498
 10848 0800 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10849 0802 9F07     		lsls	r7, r3, #30
 10850 0804 04D5     		bpl	.L949
2835:src/display.c **** 	  bp = scopy(bp, p);
 10851              		.loc 1 2835 6 is_stmt 1 view .LVU3499
2835:src/display.c **** 	  bp = scopy(bp, p);
 10852              		.loc 1 2835 9 is_stmt 0 view .LVU3500
 10853 0806 3346     		mov	r3, r6
 10854              	.LVL1218:
2835:src/display.c **** 	  bp = scopy(bp, p);
 10855              		.loc 1 2835 12 view .LVU3501
 10856 0808 1422     		movs	r2, #20
 10857 080a 03F8012B 		strb	r2, [r3], #1
 10858              	.LVL1219:
2835:src/display.c **** 	  bp = scopy(bp, p);
 10859              		.loc 1 2835 9 view .LVU3502
 10860 080e 1E46     		mov	r6, r3
 10861              	.LVL1220:
 10862              	.L949:
2836:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10863              		.loc 1 2836 4 is_stmt 1 view .LVU3503
2836:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10864              		.loc 1 2836 9 is_stmt 0 view .LVU3504
 10865 0810 3046     		mov	r0, r6
 10866              	.LVL1221:
ARM GAS  /tmp/cchf4YwX.s 			page 315


2836:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10867              		.loc 1 2836 9 view .LVU3505
 10868 0812 FFF7FEFF 		bl	scopy
 10869              	.LVL1222:
2837:src/display.c **** 	    // State2.disp_small = 1;
 10870              		.loc 1 2837 4 is_stmt 1 view .LVU3506
2837:src/display.c **** 	    // State2.disp_small = 1;
 10871              		.loc 1 2837 7 is_stmt 0 view .LVU3507
 10872 0816 AAF11003 		sub	r3, r10, #16
 10873 081a 012B     		cmp	r3, #1
 10874 081c 2DD9     		bls	.L1236
2844:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10875              		.loc 1 2844 11 is_stmt 1 view .LVU3508
2844:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10876              		.loc 1 2844 15 is_stmt 0 view .LVU3509
 10877 081e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2844:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10878              		.loc 1 2844 14 view .LVU3510
 10879 0820 13F04003 		ands	r3, r3, #64
 10880 0824 08D0     		beq	.L1071
2845:src/display.c **** 	      decNumber x, r;
 10881              		.loc 1 2845 6 is_stmt 1 view .LVU3511
2845:src/display.c **** 	      decNumber x, r;
 10882              		.loc 1 2845 9 is_stmt 0 view .LVU3512
 10883 0826 BAF1120F 		cmp	r10, #18
 10884 082a 00F00383 		beq	.L1237
2865:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10885              		.loc 1 2865 13 is_stmt 1 view .LVU3513
2865:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10886              		.loc 1 2865 46 is_stmt 0 view .LVU3514
 10887 082e A5F58873 		sub	r3, r5, #272
2865:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10888              		.loc 1 2865 16 view .LVU3515
 10889 0832 0D2B     		cmp	r3, #13
 10890 0834 40F2E882 		bls	.L1238
 10891              	.L1071:
2865:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10892              		.loc 1 2865 16 view .LVU3516
 10893              	.LBE641:
2679:src/display.c **** 	int x_disp = 0;
 10894              		.loc 1 2679 6 view .LVU3517
 10895 0838 0025     		movs	r5, #0
 10896              	.LVL1223:
 10897              	.L953:
 10898              	.LBB651:
2874:src/display.c **** 	    set_status_top(buf);
 10899              		.loc 1 2874 4 is_stmt 1 view .LVU3518
2874:src/display.c **** 	    set_status_top(buf);
 10900              		.loc 1 2874 7 is_stmt 0 view .LVU3519
 10901 083a BBF1000F 		cmp	fp, #0
 10902 083e 17D0     		beq	.L958
2875:src/display.c **** 	    no_status_top = 1;
 10903              		.loc 1 2875 6 is_stmt 1 view .LVU3520
 10904              	.LVL1224:
 10905              	.LBB642:
 10906              	.LBI642:
3633:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/cchf4YwX.s 			page 316


 10907              		.loc 1 3633 19 view .LVU3521
 10908              	.LBB643:
3634:src/display.c **** 	if (State2.runmode) {
 10909              		.loc 1 3634 2 view .LVU3522
3634:src/display.c **** 	if (State2.runmode) {
 10910              		.loc 1 3634 5 is_stmt 0 view .LVU3523
 10911 0840 B9F90030 		ldrsh	r3, [r9]
 10912 0844 13B9     		cbnz	r3, .L959
 10913 0846 1EA8     		add	r0, sp, #120
 10914              	.LVL1225:
3634:src/display.c **** 	if (State2.runmode) {
 10915              		.loc 1 3634 5 view .LVU3524
 10916 0848 FFF7FEFF 		bl	set_status_top.part.0
 10917              	.LVL1226:
 10918              	.L959:
3634:src/display.c **** 	if (State2.runmode) {
 10919              		.loc 1 3634 5 view .LVU3525
 10920              	.LBE643:
 10921              	.LBE642:
2876:src/display.c **** 	    annuc = 1;
 10922              		.loc 1 2876 6 is_stmt 1 view .LVU3526
2876:src/display.c **** 	    annuc = 1;
 10923              		.loc 1 2876 20 is_stmt 0 view .LVU3527
 10924 084c 0123     		movs	r3, #1
2877:src/display.c **** 	  }
 10925              		.loc 1 2877 12 view .LVU3528
 10926 084e 5E46     		mov	r6, fp
2876:src/display.c **** 	    annuc = 1;
 10927              		.loc 1 2876 20 view .LVU3529
 10928 0850 A9F80030 		strh	r3, [r9]	@ movhi
2877:src/display.c **** 	  }
 10929              		.loc 1 2877 6 is_stmt 1 view .LVU3530
 10930              	.LVL1227:
 10931              	.L960:
2877:src/display.c **** 	  }
 10932              		.loc 1 2877 6 is_stmt 0 view .LVU3531
 10933              	.LBE651:
2967:src/display.c ****       nostk:
 10934              		.loc 1 2967 2 is_stmt 1 view .LVU3532
 10935 0854 FFF7FEFF 		bl	show_stack
 10936              	.LVL1228:
 10937              	.LDL1:
2969:src/display.c **** 	if (!skip) {
 10938              		.loc 1 2969 2 view .LVU3533
 10939 0858 FFF7FEFF 		bl	show_flags
 10940              	.LVL1229:
2970:src/display.c **** 	  if (State2.runmode) {
 10941              		.loc 1 2970 2 view .LVU3534
2970:src/display.c **** 	  if (State2.runmode) {
 10942              		.loc 1 2970 5 is_stmt 0 view .LVU3535
 10943 085c 002D     		cmp	r5, #0
 10944 085e 00F06082 		beq	.L1209
 10945              	.LVL1230:
 10946              	.L961:
3037:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10947              		.loc 1 3037 2 is_stmt 1 view .LVU3536
 10948 0862 FFF7FEFF 		bl	set_annunciators
ARM GAS  /tmp/cchf4YwX.s 			page 317


 10949              	.LVL1231:
3038:src/display.c **** 	  ShowRPN = 0;
 10950              		.loc 1 3038 2 view .LVU3537
 10951 0866 744B     		ldr	r3, .L1258+4
 10952 0868 724F     		ldr	r7, .L1258
 10953 086a 774D     		ldr	r5, .L1258+20
 10954 086c 0093     		str	r3, [sp]
 10955 086e 8FE4     		b	.L923
 10956              	.LVL1232:
 10957              	.L958:
 10958              	.LBB652:
2880:src/display.c **** 	  }
 10959              		.loc 1 2880 6 view .LVU3538
 10960 0870 1EA8     		add	r0, sp, #120
 10961 0872 FFF7FEFF 		bl	set_status
 10962              	.LVL1233:
 10963              	.LBE652:
2677:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10964              		.loc 1 2677 6 is_stmt 0 view .LVU3539
 10965 0876 5E46     		mov	r6, fp
 10966 0878 ECE7     		b	.L960
 10967              	.LVL1234:
 10968              	.L1236:
 10969              	.LBB653:
2839:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10970              		.loc 1 2839 6 is_stmt 1 view .LVU3540
2839:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10971              		.loc 1 2839 9 is_stmt 0 view .LVU3541
 10972 087a B5F5274F 		cmp	r5, #42752
 10973 087e 00F0FD82 		beq	.L951
2839:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10974              		.loc 1 2839 41 discriminator 1 view .LVU3542
 10975 0882 B5F5284F 		cmp	r5, #43008
 10976 0886 00F0F982 		beq	.L951
2842:src/display.c **** 	    skip = 1;
 10977              		.loc 1 2842 8 is_stmt 1 view .LVU3543
2842:src/display.c **** 	    skip = 1;
 10978              		.loc 1 2842 14 is_stmt 0 view .LVU3544
 10979 088a 05F07F00 		and	r0, r5, #127
 10980 088e 0021     		movs	r1, #0
 10981 0890 FFF7FEFF 		bl	get_const
 10982              	.LVL1235:
2842:src/display.c **** 	    skip = 1;
 10983              		.loc 1 2842 8 view .LVU3545
 10984 0894 0022     		movs	r2, #0
 10985 0896 1146     		mov	r1, r2
 10986 0898 FFF7FEFF 		bl	set_x
 10987              	.LVL1236:
2843:src/display.c **** 	  } else if (State2.runmode) {
 10988              		.loc 1 2843 11 view .LVU3546
 10989 089c 0125     		movs	r5, #1
 10990              	.LVL1237:
2843:src/display.c **** 	  } else if (State2.runmode) {
 10991              		.loc 1 2843 11 view .LVU3547
 10992 089e CCE7     		b	.L953
 10993              	.LVL1238:
 10994              	.L1075:
ARM GAS  /tmp/cchf4YwX.s 			page 318


2843:src/display.c **** 	  } else if (State2.runmode) {
 10995              		.loc 1 2843 11 view .LVU3548
 10996              	.LBE653:
 10997              	.LBB654:
 10998              	.LBB626:
1349:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10999              		.loc 1 1349 4 view .LVU3549
 11000 08a0 8B46     		mov	fp, r1
 11001 08a2 35E6     		b	.L1032
 11002              	.LVL1239:
 11003              	.L945:
1349:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11004              		.loc 1 1349 4 view .LVU3550
 11005              	.LBE626:
 11006              	.LBE654:
2801:src/display.c **** 	    }
 11007              		.loc 1 2801 3 is_stmt 1 view .LVU3551
2801:src/display.c **** 	    }
 11008              		.loc 1 2801 8 is_stmt 0 view .LVU3552
 11009 08a4 2189     		ldrh	r1, [r4, #8]
 11010 08a6 FFF7FEFF 		bl	num_arg_0
 11011              	.LVL1240:
2801:src/display.c **** 	    }
 11012              		.loc 1 2801 8 view .LVU3553
 11013 08aa A2E6     		b	.L944
 11014              	.LVL1241:
 11015              	.L1235:
 11016              	.LBB655:
 11017              	.LBB627:
 11018              	.LBB617:
1376:src/display.c **** 	      p++;
 11019              		.loc 1 1376 8 is_stmt 1 view .LVU3554
1377:src/display.c **** 	      if (!double_dot)
 11020              		.loc 1 1377 8 view .LVU3555
1379:src/display.c **** 	    }
 11021              		.loc 1 1379 5 is_stmt 0 view .LVU3556
 11022 08ac 002B     		cmp	r3, #0
1377:src/display.c **** 	      if (!double_dot)
 11023              		.loc 1 1377 9 view .LVU3557
 11024 08ae 05F10105 		add	r5, r5, #1
 11025              	.LVL1242:
1378:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 11026              		.loc 1 1378 8 is_stmt 1 view .LVU3558
1379:src/display.c **** 	    }
 11027              		.loc 1 1379 5 is_stmt 0 view .LVU3559
 11028 08b2 14BF     		ite	ne
 11029 08b4 4FF0090B 		movne	fp, #9
 11030 08b8 4FF0120B 		moveq	fp, #18
 11031 08bc B5E6     		b	.L1037
 11032              	.LVL1243:
 11033              	.L1231:
1379:src/display.c **** 	    }
 11034              		.loc 1 1379 5 view .LVU3560
 11035              	.LBE617:
 11036              	.LBE627:
 11037              	.LBE655:
2883:src/display.c **** 	  if (State2.numdigit > 0) {
ARM GAS  /tmp/cchf4YwX.s 			page 319


 11038              		.loc 1 2883 4 is_stmt 1 view .LVU3561
2883:src/display.c **** 	  if (State2.numdigit > 0) {
 11039              		.loc 1 2883 42 is_stmt 0 view .LVU3562
 11040 08be E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 11041 08c0 6249     		ldr	r1, .L1258+24
 11042 08c2 0423     		movs	r3, #4
 11043 08c4 03EB0213 		add	r3, r3, r2, lsl #4
2883:src/display.c **** 	  if (State2.numdigit > 0) {
 11044              		.loc 1 2883 9 view .LVU3563
 11045 08c8 1944     		add	r1, r1, r3
 11046 08ca 2722     		movs	r2, #39
 11047 08cc 1EA8     		add	r0, sp, #120
 11048              	.LVL1244:
2883:src/display.c **** 	  if (State2.numdigit > 0) {
 11049              		.loc 1 2883 9 view .LVU3564
 11050 08ce FFF7FEFF 		bl	scopy_char
 11051              	.LVL1245:
2884:src/display.c **** 	    *bp++ = (char) State2.digval;
 11052              		.loc 1 2884 7 view .LVU3565
 11053 08d2 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11054              	.LVL1246:
2884:src/display.c **** 	    *bp++ = (char) State2.digval;
 11055              		.loc 1 2884 4 is_stmt 1 view .LVU3566
2884:src/display.c **** 	    *bp++ = (char) State2.digval;
 11056              		.loc 1 2884 7 is_stmt 0 view .LVU3567
 11057 08d4 002B     		cmp	r3, #0
 11058 08d6 3FF4D4AC 		beq	.L964
2885:src/display.c **** 	    if (State2.numdigit > 1)
 11059              		.loc 1 2885 6 is_stmt 1 view .LVU3568
 11060              	.LVL1247:
2885:src/display.c **** 	    if (State2.numdigit > 1)
 11061              		.loc 1 2885 14 is_stmt 0 view .LVU3569
 11062 08da 2389     		ldrh	r3, [r4, #8]
 11063 08dc 0370     		strb	r3, [r0]
2886:src/display.c **** 	      *bp++ = State2.digval2;
 11064              		.loc 1 2886 6 is_stmt 1 view .LVU3570
2886:src/display.c **** 	      *bp++ = State2.digval2;
 11065              		.loc 1 2886 9 is_stmt 0 view .LVU3571
 11066 08de E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11067 08e0 012B     		cmp	r3, #1
2887:src/display.c **** 	  }
 11068              		.loc 1 2887 8 is_stmt 1 view .LVU3572
 11069              	.LVL1248:
2887:src/display.c **** 	  }
 11070              		.loc 1 2887 22 is_stmt 0 view .LVU3573
 11071 08e2 84BF     		itt	hi
 11072 08e4 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2887:src/display.c **** 	  }
 11073              		.loc 1 2887 14 view .LVU3574
 11074 08e6 4370     		strbhi	r3, [r0, #1]
 11075 08e8 CBE4     		b	.L964
 11076              	.LVL1249:
 11077              	.L1233:
2901:src/display.c **** 	  skip = 1;
 11078              		.loc 1 2901 4 is_stmt 1 view .LVU3575
 11079              	.LBB656:
 11080              	.LBI656:
ARM GAS  /tmp/cchf4YwX.s 			page 320


2544:src/display.c **** 	char buf[16];
 11081              		.loc 1 2544 19 view .LVU3576
 11082              	.LBB657:
2545:src/display.c **** 	unsigned short int pc = State2.digval;
 11083              		.loc 1 2545 2 view .LVU3577
2546:src/display.c **** 	unsigned int op = getprog(pc);
 11084              		.loc 1 2546 2 view .LVU3578
2546:src/display.c **** 	unsigned int op = getprog(pc);
 11085              		.loc 1 2546 21 is_stmt 0 view .LVU3579
 11086 08ea B4F808B0 		ldrh	fp, [r4, #8]
 11087              	.LVL1250:
2547:src/display.c **** 	int n = nLIB(pc);
 11088              		.loc 1 2547 2 is_stmt 1 view .LVU3580
2552:src/display.c **** #ifndef REALBUILD
 11089              		.loc 1 2552 27 is_stmt 0 view .LVU3581
 11090 08ee DFF870A1 		ldr	r10, .L1258+44
 11091              	.LVL1251:
2547:src/display.c **** 	int n = nLIB(pc);
 11092              		.loc 1 2547 20 view .LVU3582
 11093 08f2 5846     		mov	r0, fp
 11094 08f4 FFF7FEFF 		bl	getprog
 11095              	.LVL1252:
 11096 08f8 4FEA9B35 		lsr	r5, fp, #14
2551:src/display.c **** 	set_digits_string(libname[n], 0);
 11097              		.loc 1 2551 2 view .LVU3583
 11098 08fc 15A9     		add	r1, sp, #84
2547:src/display.c **** 	int n = nLIB(pc);
 11099              		.loc 1 2547 20 view .LVU3584
 11100 08fe 8046     		mov	r8, r0
 11101              	.LVL1253:
2548:src/display.c **** 	unsigned short int lblpc;
 11102              		.loc 1 2548 2 is_stmt 1 view .LVU3585
2549:src/display.c **** 
 11103              		.loc 1 2549 2 view .LVU3586
2551:src/display.c **** 	set_digits_string(libname[n], 0);
 11104              		.loc 1 2551 2 view .LVU3587
2552:src/display.c **** #ifndef REALBUILD
 11105              		.loc 1 2552 27 is_stmt 0 view .LVU3588
 11106 0900 05EB8505 		add	r5, r5, r5, lsl #2
2551:src/display.c **** 	set_digits_string(libname[n], 0);
 11107              		.loc 1 2551 2 view .LVU3589
 11108 0904 FFF7FEFF 		bl	prt
 11109              	.LVL1254:
2551:src/display.c **** 	set_digits_string(libname[n], 0);
 11110              		.loc 1 2551 2 view .LVU3590
 11111 0908 FFF7FEFF 		bl	set_status
 11112              	.LVL1255:
2552:src/display.c **** #ifndef REALBUILD
 11113              		.loc 1 2552 2 is_stmt 1 view .LVU3591
 11114 090c 0AEB0500 		add	r0, r10, r5
 11115 0910 3946     		mov	r1, r7
 11116 0912 FFF7FEFF 		bl	set_digits_string
 11117              	.LVL1256:
2554:src/display.c **** #endif
 11118              		.loc 1 2554 2 view .LVU3592
 11119 0916 4E4B     		ldr	r3, .L1258+28
 11120 0918 4E48     		ldr	r0, .L1258+32
ARM GAS  /tmp/cchf4YwX.s 			page 321


 11121 091a 03EB4501 		add	r1, r3, r5, lsl #1
 11122 091e FFF7FEFF 		bl	scopy
 11123              	.LVL1257:
2557:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11124              		.loc 1 2557 2 view .LVU3593
2557:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11125              		.loc 1 2557 5 is_stmt 0 view .LVU3594
 11126 0922 18F4704F 		tst	r8, #61440
 11127 0926 40F0FF80 		bne	.L1239
 11128              	.LVL1258:
 11129              	.L1212:
2557:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11130              		.loc 1 2557 5 view .LVU3595
 11131              	.LBE657:
 11132              	.LBE656:
2967:src/display.c ****       nostk:
 11133              		.loc 1 2967 2 is_stmt 1 view .LVU3596
 11134 092a FFF7FEFF 		bl	show_stack
 11135              	.LVL1259:
2969:src/display.c **** 	if (!skip) {
 11136              		.loc 1 2969 2 view .LVU3597
 11137 092e FFF7FEFF 		bl	show_flags
 11138              	.LVL1260:
2970:src/display.c **** 	  if (State2.runmode) {
 11139              		.loc 1 2970 2 view .LVU3598
 11140 0932 96E7     		b	.L961
 11141              	.LVL1261:
 11142              	.L1232:
2898:src/display.c **** 	  skip = 1;
 11143              		.loc 1 2898 4 view .LVU3599
 11144              	.LBB660:
 11145              	.LBI660:
2442:src/display.c **** 	int i, n;
 11146              		.loc 1 2442 19 view .LVU3600
 11147              	.LBB661:
2443:src/display.c **** 	int j = SEGS_EXP_BASE;
 11148              		.loc 1 2443 2 view .LVU3601
2444:src/display.c **** 	const int status = State2.status - 3;
 11149              		.loc 1 2444 2 view .LVU3602
2445:src/display.c **** 	char buf[16], *p = buf;
 11150              		.loc 1 2445 2 view .LVU3603
2449:src/display.c **** 	  set_status("Free:");
 11151              		.loc 1 2449 5 is_stmt 0 view .LVU3604
 11152 0934 012F     		cmp	r7, #1
2445:src/display.c **** 	char buf[16], *p = buf;
 11153              		.loc 1 2445 12 view .LVU3605
 11154 0936 A7F10303 		sub	r3, r7, #3
 11155              	.LVL1262:
2446:src/display.c **** 	unsigned int pc;
 11156              		.loc 1 2446 2 is_stmt 1 view .LVU3606
2447:src/display.c **** 
 11157              		.loc 1 2447 2 view .LVU3607
2449:src/display.c **** 	  set_status("Free:");
 11158              		.loc 1 2449 2 view .LVU3608
2449:src/display.c **** 	  set_status("Free:");
 11159              		.loc 1 2449 5 is_stmt 0 view .LVU3609
 11160 093a 00F0DB80 		beq	.L1240
ARM GAS  /tmp/cchf4YwX.s 			page 322


2457:src/display.c **** 	  /* Top line */
 11161              		.loc 1 2457 7 is_stmt 1 view .LVU3610
2457:src/display.c **** 	  /* Top line */
 11162              		.loc 1 2457 10 is_stmt 0 view .LVU3611
 11163 093e 591C     		adds	r1, r3, #1
 11164 0940 00F0B981 		beq	.L1241
 11165              	.LBB662:
2474:src/display.c **** 	  int end;
 11166              		.loc 1 2474 4 is_stmt 1 view .LVU3612
2475:src/display.c **** 	  int group = 10;
 11167              		.loc 1 2475 4 view .LVU3613
2476:src/display.c **** 	  int start = 0;
 11168              		.loc 1 2476 4 view .LVU3614
 11169              	.LVL1263:
2477:src/display.c **** 		
 11170              		.loc 1 2477 4 view .LVU3615
2479:src/display.c **** 	    base = 10 * status;
 11171              		.loc 1 2479 4 view .LVU3616
2479:src/display.c **** 	    base = 10 * status;
 11172              		.loc 1 2479 7 is_stmt 0 view .LVU3617
 11173 0944 092B     		cmp	r3, #9
 11174 0946 40F39381 		ble	.L1242
2489:src/display.c **** 	    base = regX_idx;
 11175              		.loc 1 2489 9 is_stmt 1 view .LVU3618
2489:src/display.c **** 	    base = regX_idx;
 11176              		.loc 1 2489 12 is_stmt 0 view .LVU3619
 11177 094a 0A2B     		cmp	r3, #10
 11178 094c 00F09A80 		beq	.L1243
2497:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11179              		.loc 1 2497 6 is_stmt 1 view .LVU3620
 11180              	.LVL1264:
2498:src/display.c **** 	    set_status("FL.00-.15");
 11181              		.loc 1 2498 6 view .LVU3621
2499:src/display.c **** 	  }
 11182              		.loc 1 2499 6 view .LVU3622
 11183 0950 4148     		ldr	r0, .L1258+36
 11184 0952 FFF7FEFF 		bl	set_status
 11185              	.LVL1265:
2477:src/display.c **** 		
 11186              		.loc 1 2477 8 is_stmt 0 view .LVU3623
 11187 0956 4FF0000B 		mov	fp, #0
2476:src/display.c **** 	  int start = 0;
 11188              		.loc 1 2476 8 view .LVU3624
 11189 095a 4FF00A0A 		mov	r10, #10
 11190              	.LVL1266:
2498:src/display.c **** 	    set_status("FL.00-.15");
 11191              		.loc 1 2498 10 view .LVU3625
 11192 095e 4FF07F08 		mov	r8, #127
2497:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11193              		.loc 1 2497 11 view .LVU3626
 11194 0962 7027     		movs	r7, #112
 11195              	.LVL1267:
 11196              	.L973:
2501:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11197              		.loc 1 2501 4 is_stmt 1 view .LVU3627
2501:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11198              		.loc 1 2501 6 is_stmt 0 view .LVU3628
ARM GAS  /tmp/cchf4YwX.s 			page 323


 11199 0964 0BEBCB05 		add	r5, fp, fp, lsl #3
 11200              	.LVL1268:
2502:src/display.c **** 	  j += SEGS_PER_DIGIT;
 11201              		.loc 1 2502 4 is_stmt 1 view .LVU3629
 11202              	.LBB663:
 11203              	.LBI663:
 355:src/display.c ****   if (res) {
 11204              		.loc 1 355 14 view .LVU3630
 11205              	.LBB664:
 356:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11206              		.loc 1 356 3 view .LVU3631
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 11207              		.loc 1 359 5 view .LVU3632
 11208              	.LBB665:
 11209              	.LBB666:
 363:src/display.c **** #endif
 11210              		.loc 1 363 35 is_stmt 0 view .LVU3633
 11211 0968 0BF10103 		add	r3, fp, #1
 11212              	.LBE666:
 11213              	.LBE665:
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 11214              		.loc 1 359 5 view .LVU3634
 11215 096c E81D     		adds	r0, r5, #7
 11216              	.LBB669:
 11217              	.LBB667:
 363:src/display.c **** #endif
 11218              		.loc 1 363 35 view .LVU3635
 11219 096e 0093     		str	r3, [sp]
 11220              	.LBE667:
 11221              	.LBE669:
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 11222              		.loc 1 359 5 view .LVU3636
 11223 0970 FFF7FEFF 		bl	set_dot
 11224              	.LVL1269:
 360:src/display.c ****       set_dot(posn+8);
 11225              		.loc 1 360 5 is_stmt 1 view .LVU3637
 11226              	.LBB670:
 11227              	.LBI665:
 355:src/display.c ****   if (res) {
 11228              		.loc 1 355 14 view .LVU3638
 11229              	.LBB668:
 363:src/display.c **** #endif
 11230              		.loc 1 363 5 view .LVU3639
 363:src/display.c **** #endif
 11231              		.loc 1 363 38 is_stmt 0 view .LVU3640
 11232 0974 3749     		ldr	r1, .L1258+32
 11233 0976 009B     		ldr	r3, [sp]
 11234 0978 2E22     		movs	r2, #46
 11235 097a 01F81320 		strb	r2, [r1, r3, lsl #1]
 366:src/display.c **** }
 11236              		.loc 1 366 3 is_stmt 1 view .LVU3641
 11237              	.LVL1270:
 366:src/display.c **** }
 11238              		.loc 1 366 3 is_stmt 0 view .LVU3642
 11239              	.LBE668:
 11240              	.LBE670:
 366:src/display.c **** }
ARM GAS  /tmp/cchf4YwX.s 			page 324


 11241              		.loc 1 366 3 is_stmt 1 view .LVU3643
 366:src/display.c **** }
 11242              		.loc 1 366 3 is_stmt 0 view .LVU3644
 11243              	.LBE664:
 11244              	.LBE663:
2503:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11245              		.loc 1 2503 4 is_stmt 1 view .LVU3645
 11246 097e CBEB4A01 		rsb	r1, fp, r10, lsl #1
 11247 0982 CB19     		adds	r3, r1, r7
 11248 0984 0393     		str	r3, [sp, #12]
2504:src/display.c **** 	    int k = i + base - start;
 11249              		.loc 1 2504 30 is_stmt 0 view .LVU3646
 11250 0986 0BEB0A03 		add	r3, fp, r10
 11251 098a 0293     		str	r3, [sp, #8]
 11252 098c A7EB0B03 		sub	r3, r7, fp
 11253 0990 CDE90436 		strd	r3, r6, [sp, #16]
2503:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11254              		.loc 1 2503 6 view .LVU3647
 11255 0994 0935     		adds	r5, r5, #9
 11256              	.LVL1271:
2504:src/display.c **** 	    int k = i + base - start;
 11257              		.loc 1 2504 4 is_stmt 1 view .LVU3648
2504:src/display.c **** 	    int k = i + base - start;
 11258              		.loc 1 2504 20 view .LVU3649
 11259              	.LBB671:
 11260              	.LBB672:
 11261              	.LBB673:
 11262              	.LBB674:
 11263              	.LBB675:
 363:src/display.c **** #endif
 11264              		.loc 1 363 38 is_stmt 0 view .LVU3650
 11265 0996 0192     		str	r2, [sp, #4]
 11266 0998 BA44     		add	r10, r10, r7
 11267              	.LVL1272:
 363:src/display.c **** #endif
 11268              		.loc 1 363 38 view .LVU3651
 11269 099a 1CE0     		b	.L977
 11270              	.LVL1273:
 11271              	.L975:
 363:src/display.c **** #endif
 11272              		.loc 1 363 38 view .LVU3652
 11273              	.LBE675:
 11274              	.LBE674:
 11275              	.LBE673:
 11276              	.LBE672:
2514:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 11277              		.loc 1 2514 6 is_stmt 1 view .LVU3653
 11278 099c 3146     		mov	r1, r6
 11279 099e 2846     		mov	r0, r5
 11280 09a0 FFF7FEFF 		bl	set_dig
 11281              	.LVL1274:
2515:src/display.c **** 	    j += SEGS_PER_DIGIT;
 11282              		.loc 1 2515 6 view .LVU3654
 11283              	.LBB682:
 11284              	.LBI672:
 355:src/display.c ****   if (res) {
 11285              		.loc 1 355 14 view .LVU3655
ARM GAS  /tmp/cchf4YwX.s 			page 325


 11286              	.LBB680:
 356:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11287              		.loc 1 356 3 view .LVU3656
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 11288              		.loc 1 359 5 view .LVU3657
 11289 09a4 E81D     		adds	r0, r5, #7
 11290 09a6 FFF7FEFF 		bl	set_dot
 11291              	.LVL1275:
 360:src/display.c ****       set_dot(posn+8);
 11292              		.loc 1 360 5 view .LVU3658
 11293              	.LBB678:
 11294              	.LBI674:
 355:src/display.c ****   if (res) {
 11295              		.loc 1 355 14 view .LVU3659
 11296              	.LBB676:
 363:src/display.c **** #endif
 11297              		.loc 1 363 5 view .LVU3660
 363:src/display.c **** #endif
 11298              		.loc 1 363 30 is_stmt 0 view .LVU3661
 11299 09aa 2C4B     		ldr	r3, .L1258+40
 363:src/display.c **** #endif
 11300              		.loc 1 363 38 view .LVU3662
 11301 09ac 0199     		ldr	r1, [sp, #4]
 363:src/display.c **** #endif
 11302              		.loc 1 363 30 view .LVU3663
 11303 09ae A3FB0523 		umull	r2, r3, r3, r5
 11304 09b2 5B08     		lsrs	r3, r3, #1
 363:src/display.c **** #endif
 11305              		.loc 1 363 38 view .LVU3664
 11306 09b4 274A     		ldr	r2, .L1258+32
 363:src/display.c **** #endif
 11307              		.loc 1 363 35 view .LVU3665
 11308 09b6 0133     		adds	r3, r3, #1
 11309              	.LBE676:
 11310              	.LBE678:
 11311              	.LBE680:
 11312              	.LBE682:
2517:src/display.c **** 	      set_dig(j, 8);
 11313              		.loc 1 2517 9 view .LVU3666
 11314 09b8 BBF1040F 		cmp	fp, #4
 11315              	.LBB683:
 11316              	.LBB681:
 11317              	.LBB679:
 11318              	.LBB677:
 363:src/display.c **** #endif
 11319              		.loc 1 363 38 view .LVU3667
 11320 09bc 02F81310 		strb	r1, [r2, r3, lsl #1]
 366:src/display.c **** }
 11321              		.loc 1 366 3 is_stmt 1 view .LVU3668
 11322              	.LVL1276:
 366:src/display.c **** }
 11323              		.loc 1 366 3 is_stmt 0 view .LVU3669
 11324              	.LBE677:
 11325              	.LBE679:
 366:src/display.c **** }
 11326              		.loc 1 366 3 is_stmt 1 view .LVU3670
 366:src/display.c **** }
ARM GAS  /tmp/cchf4YwX.s 			page 326


 11327              		.loc 1 366 3 is_stmt 0 view .LVU3671
 11328              	.LBE681:
 11329              	.LBE683:
2516:src/display.c **** 	    if (i == 4) {
 11330              		.loc 1 2516 6 is_stmt 1 view .LVU3672
2517:src/display.c **** 	      set_dig(j, 8);
 11331              		.loc 1 2517 6 view .LVU3673
2517:src/display.c **** 	      set_dig(j, 8);
 11332              		.loc 1 2517 9 is_stmt 0 view .LVU3674
 11333 09c0 22D0     		beq	.L1244
2516:src/display.c **** 	    if (i == 4) {
 11334              		.loc 1 2516 8 view .LVU3675
 11335 09c2 3D46     		mov	r5, r7
 11336              	.LVL1277:
 11337              	.L976:
2516:src/display.c **** 	    if (i == 4) {
 11338              		.loc 1 2516 8 view .LVU3676
 11339              	.LBE671:
2504:src/display.c **** 	    int k = i + base - start;
 11340              		.loc 1 2504 39 is_stmt 1 view .LVU3677
2504:src/display.c **** 	    int k = i + base - start;
 11341              		.loc 1 2504 40 is_stmt 0 view .LVU3678
 11342 09c4 009B     		ldr	r3, [sp]
2504:src/display.c **** 	    int k = i + base - start;
 11343              		.loc 1 2504 4 view .LVU3679
 11344 09c6 0299     		ldr	r1, [sp, #8]
 11345 09c8 8B42     		cmp	r3, r1
 11346 09ca 0AF1010A 		add	r10, r10, #1
2504:src/display.c **** 	    int k = i + base - start;
 11347              		.loc 1 2504 40 view .LVU3680
 11348 09ce 9B46     		mov	fp, r3
 11349              	.LVL1278:
2504:src/display.c **** 	    int k = i + base - start;
 11350              		.loc 1 2504 20 is_stmt 1 view .LVU3681
2504:src/display.c **** 	    int k = i + base - start;
 11351              		.loc 1 2504 4 is_stmt 0 view .LVU3682
 11352 09d0 63D0     		beq	.L1197
2504:src/display.c **** 	    int k = i + base - start;
 11353              		.loc 1 2504 4 view .LVU3683
 11354 09d2 0133     		adds	r3, r3, #1
 11355              	.LVL1279:
2504:src/display.c **** 	    int k = i + base - start;
 11356              		.loc 1 2504 4 view .LVU3684
 11357 09d4 0093     		str	r3, [sp]
 11358              	.LVL1280:
 11359              	.L977:
 11360              	.LBB692:
2505:src/display.c **** 	    int l = get_user_flag(k);
 11361              		.loc 1 2505 6 is_stmt 1 view .LVU3685
2506:src/display.c **** 	    k += group;
 11362              		.loc 1 2506 6 view .LVU3686
2506:src/display.c **** 	    k += group;
 11363              		.loc 1 2506 14 is_stmt 0 view .LVU3687
 11364 09d6 049B     		ldr	r3, [sp, #16]
 11365 09d8 03EB0B00 		add	r0, r3, fp
 11366 09dc FFF7FEFF 		bl	get_user_flag
 11367              	.LVL1281:
ARM GAS  /tmp/cchf4YwX.s 			page 327


2508:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11368              		.loc 1 2508 9 view .LVU3688
 11369 09e0 C245     		cmp	r10, r8
2506:src/display.c **** 	    k += group;
 11370              		.loc 1 2506 14 view .LVU3689
 11371 09e2 0646     		mov	r6, r0
 11372              	.LVL1282:
2507:src/display.c **** 	    if (end >= k) {
 11373              		.loc 1 2507 6 is_stmt 1 view .LVU3690
2508:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11374              		.loc 1 2508 6 view .LVU3691
2516:src/display.c **** 	    if (i == 4) {
 11375              		.loc 1 2516 8 is_stmt 0 view .LVU3692
 11376 09e4 05F10907 		add	r7, r5, #9
2508:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11377              		.loc 1 2508 9 view .LVU3693
 11378 09e8 D8DC     		bgt	.L975
2509:src/display.c **** 	      k += group;
 11379              		.loc 1 2509 8 is_stmt 1 view .LVU3694
2509:src/display.c **** 	      k += group;
 11380              		.loc 1 2509 14 is_stmt 0 view .LVU3695
 11381 09ea 5046     		mov	r0, r10
 11382              	.LVL1283:
2509:src/display.c **** 	      k += group;
 11383              		.loc 1 2509 14 view .LVU3696
 11384 09ec FFF7FEFF 		bl	get_user_flag
 11385              	.LVL1284:
 11386 09f0 039B     		ldr	r3, [sp, #12]
 11387 09f2 5B44     		add	r3, r3, fp
2511:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11388              		.loc 1 2511 11 view .LVU3697
 11389 09f4 9845     		cmp	r8, r3
2509:src/display.c **** 	      k += group;
 11390              		.loc 1 2509 10 view .LVU3698
 11391 09f6 46EA4006 		orr	r6, r6, r0, lsl #1
 11392              	.LVL1285:
2510:src/display.c **** 	      if (end >= k)
 11393              		.loc 1 2510 8 is_stmt 1 view .LVU3699
2511:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11394              		.loc 1 2511 8 view .LVU3700
2511:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11395              		.loc 1 2511 11 is_stmt 0 view .LVU3701
 11396 09fa CFDB     		blt	.L975
2512:src/display.c **** 	    }
 11397              		.loc 1 2512 3 is_stmt 1 view .LVU3702
2512:src/display.c **** 	    }
 11398              		.loc 1 2512 9 is_stmt 0 view .LVU3703
 11399 09fc 1846     		mov	r0, r3
 11400 09fe FFF7FEFF 		bl	get_user_flag
 11401              	.LVL1286:
2512:src/display.c **** 	    }
 11402              		.loc 1 2512 5 view .LVU3704
 11403 0a02 46EA8006 		orr	r6, r6, r0, lsl #2
 11404              	.LVL1287:
2512:src/display.c **** 	    }
 11405              		.loc 1 2512 5 view .LVU3705
 11406 0a06 C9E7     		b	.L975
ARM GAS  /tmp/cchf4YwX.s 			page 328


 11407              	.LVL1288:
 11408              	.L1244:
2518:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11409              		.loc 1 2518 8 is_stmt 1 view .LVU3706
 11410 0a08 0821     		movs	r1, #8
 11411 0a0a 3846     		mov	r0, r7
 11412 0a0c FFF7FEFF 		bl	set_dig
 11413              	.LVL1289:
2519:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11414              		.loc 1 2519 8 view .LVU3707
 11415              	.LBB684:
 11416              	.LBI684:
 355:src/display.c ****   if (res) {
 11417              		.loc 1 355 14 view .LVU3708
 11418              	.LBB685:
 356:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11419              		.loc 1 356 3 view .LVU3709
 359:src/display.c ****     if (decimal != DECIMAL_DOT)
 11420              		.loc 1 359 5 view .LVU3710
 11421 0a10 05F11000 		add	r0, r5, #16
 11422 0a14 FFF7FEFF 		bl	set_dot
 11423              	.LVL1290:
 360:src/display.c ****       set_dot(posn+8);
 11424              		.loc 1 360 5 view .LVU3711
 11425              	.LBB686:
 11426              	.LBI686:
 355:src/display.c ****   if (res) {
 11427              		.loc 1 355 14 view .LVU3712
 11428              	.LBB687:
 363:src/display.c **** #endif
 11429              		.loc 1 363 5 view .LVU3713
 363:src/display.c **** #endif
 11430              		.loc 1 363 30 is_stmt 0 view .LVU3714
 11431 0a18 104B     		ldr	r3, .L1258+40
 363:src/display.c **** #endif
 11432              		.loc 1 363 38 view .LVU3715
 11433 0a1a 0199     		ldr	r1, [sp, #4]
 363:src/display.c **** #endif
 11434              		.loc 1 363 30 view .LVU3716
 11435 0a1c A3FB0723 		umull	r2, r3, r3, r7
 11436 0a20 5B08     		lsrs	r3, r3, #1
 363:src/display.c **** #endif
 11437              		.loc 1 363 38 view .LVU3717
 11438 0a22 0C4A     		ldr	r2, .L1258+32
 363:src/display.c **** #endif
 11439              		.loc 1 363 35 view .LVU3718
 11440 0a24 0133     		adds	r3, r3, #1
 11441              	.LBE687:
 11442              	.LBE686:
 11443              	.LBE685:
 11444              	.LBE684:
2520:src/display.c **** 	    }
 11445              		.loc 1 2520 10 view .LVU3719
 11446 0a26 1235     		adds	r5, r5, #18
 11447              	.LBB691:
 11448              	.LBB690:
 11449              	.LBB689:
ARM GAS  /tmp/cchf4YwX.s 			page 329


 11450              	.LBB688:
 363:src/display.c **** #endif
 11451              		.loc 1 363 38 view .LVU3720
 11452 0a28 02F81310 		strb	r1, [r2, r3, lsl #1]
 366:src/display.c **** }
 11453              		.loc 1 366 3 is_stmt 1 view .LVU3721
 11454              	.LVL1291:
 366:src/display.c **** }
 11455              		.loc 1 366 3 is_stmt 0 view .LVU3722
 11456              	.LBE688:
 11457              	.LBE689:
 366:src/display.c **** }
 11458              		.loc 1 366 3 is_stmt 1 view .LVU3723
 366:src/display.c **** }
 11459              		.loc 1 366 3 is_stmt 0 view .LVU3724
 11460              	.LBE690:
 11461              	.LBE691:
2520:src/display.c **** 	    }
 11462              		.loc 1 2520 8 is_stmt 1 view .LVU3725
2520:src/display.c **** 	    }
 11463              		.loc 1 2520 8 is_stmt 0 view .LVU3726
 11464 0a2c CAE7     		b	.L976
 11465              	.LVL1292:
 11466              	.L1077:
2520:src/display.c **** 	    }
 11467              		.loc 1 2520 8 view .LVU3727
 11468              	.LBE692:
 11469              	.LBE662:
 11470              	.LBE661:
 11471              	.LBE660:
 11472              	.LBB698:
 11473              	.LBB628:
 11474              	.LBB618:
1369:src/display.c **** 	    if (gotdot <= j) {
 11475              		.loc 1 1369 8 view .LVU3728
 11476 0a2e 4FF0090B 		mov	fp, #9
 11477 0a32 FAE5     		b	.L1037
 11478              	.L1259:
 11479              		.align	2
 11480              	.L1258:
 11481 0a34 00000000 		.word	DispMsg
 11482 0a38 00000000 		.word	DispPlot
 11483 0a3c 00000000 		.word	.LANCHOR1
 11484 0a40 00000000 		.word	main_ram
 11485 0a44 3C000000 		.word	.LC29
 11486 0a48 00000000 		.word	ShowRegister
 11487 0a4c 00000000 		.word	multicmds
 11488 0a50 00000000 		.word	.LANCHOR23
 11489 0a54 00000000 		.word	LastDisplayedNumber
 11490 0a58 8C000000 		.word	.LC40
 11491 0a5c 398EE338 		.word	954437177
 11492 0a60 00000000 		.word	.LANCHOR22
 11493              	.LVL1293:
 11494              	.L999:
1369:src/display.c **** 	    if (gotdot <= j) {
 11495              		.loc 1 1369 8 view .LVU3729
 11496              	.LBE618:
ARM GAS  /tmp/cchf4YwX.s 			page 330


 11497              	.LBE628:
 11498              	.LBE698:
2916:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11499              		.loc 1 2916 11 is_stmt 1 view .LVU3730
2916:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11500              		.loc 1 2916 15 is_stmt 0 view .LVU3731
 11501 0a64 C14A     		ldr	r2, .L1260
 11502 0a66 0092     		str	r2, [sp]
 11503 0a68 B2F90020 		ldrsh	r2, [r2]
2916:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11504              		.loc 1 2916 14 view .LVU3732
 11505 0a6c 002A     		cmp	r2, #0
 11506 0a6e 40F0C480 		bne	.L1245
2918:src/display.c **** 	    bp = scopy(buf, Alpha);
 11507              		.loc 1 2918 11 is_stmt 1 view .LVU3733
2918:src/display.c **** 	    bp = scopy(buf, Alpha);
 11508              		.loc 1 2918 14 is_stmt 0 view .LVU3734
 11509 0a72 0807     		lsls	r0, r1, #28
 11510 0a74 6FD4     		bmi	.L1246
 11511              	.LVL1294:
2967:src/display.c ****       nostk:
 11512              		.loc 1 2967 2 is_stmt 1 view .LVU3735
 11513 0a76 FFF7FEFF 		bl	show_stack
 11514              	.LVL1295:
2969:src/display.c **** 	if (!skip) {
 11515              		.loc 1 2969 2 view .LVU3736
2950:src/display.c **** 	  }
 11516              		.loc 1 2950 12 is_stmt 0 view .LVU3737
 11517 0a7a 0126     		movs	r6, #1
2969:src/display.c **** 	if (!skip) {
 11518              		.loc 1 2969 2 view .LVU3738
 11519 0a7c FFF7FEFF 		bl	show_flags
 11520              	.LVL1296:
2970:src/display.c **** 	  if (State2.runmode) {
 11521              		.loc 1 2970 2 is_stmt 1 view .LVU3739
 11522 0a80 FFF701BB 		b	.L928
 11523              	.LVL1297:
 11524              	.L1243:
 11525              	.LBB699:
 11526              	.LBB695:
 11527              	.LBB693:
2490:src/display.c **** 	    end = regK_idx;
 11528              		.loc 1 2490 6 view .LVU3740
2491:src/display.c **** 	    start = 3;
 11529              		.loc 1 2491 6 view .LVU3741
2492:src/display.c **** 	    group = 4;
 11530              		.loc 1 2492 6 view .LVU3742
2493:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11531              		.loc 1 2493 6 view .LVU3743
2494:src/display.c **** 	  }
 11532              		.loc 1 2494 6 view .LVU3744
 11533 0a84 BA48     		ldr	r0, .L1260+4
 11534 0a86 FFF7FEFF 		bl	set_status
 11535              	.LVL1298:
2492:src/display.c **** 	    group = 4;
 11536              		.loc 1 2492 12 is_stmt 0 view .LVU3745
 11537 0a8a 4FF0030B 		mov	fp, #3
ARM GAS  /tmp/cchf4YwX.s 			page 331


2493:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11538              		.loc 1 2493 12 view .LVU3746
 11539 0a8e 4FF0040A 		mov	r10, #4
 11540              	.LVL1299:
2491:src/display.c **** 	    start = 3;
 11541              		.loc 1 2491 10 view .LVU3747
 11542 0a92 4FF06F08 		mov	r8, #111
2490:src/display.c **** 	    end = regK_idx;
 11543              		.loc 1 2490 11 view .LVU3748
 11544 0a96 6427     		movs	r7, #100
 11545              	.LVL1300:
2490:src/display.c **** 	    end = regK_idx;
 11546              		.loc 1 2490 11 view .LVU3749
 11547 0a98 64E7     		b	.L973
 11548              	.LVL1301:
 11549              	.L1197:
2490:src/display.c **** 	    end = regK_idx;
 11550              		.loc 1 2490 11 view .LVU3750
 11551 0a9a 059E     		ldr	r6, [sp, #20]
 11552              	.LVL1302:
 11553              	.L968:
2490:src/display.c **** 	    end = regK_idx;
 11554              		.loc 1 2490 11 view .LVU3751
 11555              	.LBE693:
2525:src/display.c **** 	pc = state_pc();
 11556              		.loc 1 2525 2 is_stmt 1 view .LVU3752
2526:src/display.c **** 	if (isXROM(pc))
 11557              		.loc 1 2526 2 view .LVU3753
2526:src/display.c **** 	if (isXROM(pc))
 11558              		.loc 1 2526 7 is_stmt 0 view .LVU3754
 11559 0a9c B54B     		ldr	r3, .L1260+8
 11560 0a9e 1B68     		ldr	r3, [r3]
2526:src/display.c **** 	if (isXROM(pc))
 11561              		.loc 1 2526 5 view .LVU3755
 11562 0aa0 B3F8E077 		ldrh	r7, [r3, #2016]
 11563              	.LVL1303:
2527:src/display.c **** 	  pc = 1;
 11564              		.loc 1 2527 2 is_stmt 1 view .LVU3756
2527:src/display.c **** 	  pc = 1;
 11565              		.loc 1 2527 6 is_stmt 0 view .LVU3757
 11566 0aa4 BB0B     		lsrs	r3, r7, #14
2528:src/display.c **** 	for (n=i=0; i<4; i++) {
 11567              		.loc 1 2528 7 view .LVU3758
 11568 0aa6 032B     		cmp	r3, #3
 11569 0aa8 08BF     		it	eq
 11570 0aaa 0127     		moveq	r7, #1
 11571              	.LVL1304:
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11572              		.loc 1 2529 2 is_stmt 1 view .LVU3759
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11573              		.loc 1 2529 14 view .LVU3760
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11574              		.loc 1 2529 8 is_stmt 0 view .LVU3761
 11575 0aac 4FF0000A 		mov	r10, #0
 11576 0ab0 6425     		movs	r5, #100
2525:src/display.c **** 	pc = state_pc();
 11577              		.loc 1 2525 4 view .LVU3762
ARM GAS  /tmp/cchf4YwX.s 			page 332


 11578 0ab2 4FF06C08 		mov	r8, #108
 11579              	.LVL1305:
 11580              	.L981:
2530:src/display.c **** 	    if (++n == 4) {
 11581              		.loc 1 2530 4 is_stmt 1 view .LVU3763
2530:src/display.c **** 	    if (++n == 4) {
 11582              		.loc 1 2530 8 is_stmt 0 view .LVU3764
 11583 0ab6 0222     		movs	r2, #2
 11584 0ab8 2946     		mov	r1, r5
 11585 0aba 3846     		mov	r0, r7
 11586 0abc FFF7FEFF 		bl	find_label_from
 11587              	.LVL1306:
2531:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11588              		.loc 1 2531 6 is_stmt 1 view .LVU3765
2530:src/display.c **** 	    if (++n == 4) {
 11589              		.loc 1 2530 7 is_stmt 0 view .LVU3766
 11590 0ac0 58B1     		cbz	r0, .L979
2531:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11591              		.loc 1 2531 9 view .LVU3767
 11592 0ac2 0AF1010A 		add	r10, r10, #1
 11593              	.LVL1307:
2535:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11594              		.loc 1 2535 8 is_stmt 1 view .LVU3768
2531:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11595              		.loc 1 2531 9 is_stmt 0 view .LVU3769
 11596 0ac6 BAF1040F 		cmp	r10, #4
2535:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11597              		.loc 1 2535 8 view .LVU3770
 11598 0aca A5F12301 		sub	r1, r5, #35
 11599 0ace 4046     		mov	r0, r8
2531:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11600              		.loc 1 2531 9 view .LVU3771
 11601 0ad0 07D0     		beq	.L1247
2535:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11602              		.loc 1 2535 8 view .LVU3772
 11603 0ad2 FFF7FEFF 		bl	set_dig
 11604              	.LVL1308:
2536:src/display.c **** 	    }
 11605              		.loc 1 2536 8 is_stmt 1 view .LVU3773
2536:src/display.c **** 	    }
 11606              		.loc 1 2536 10 is_stmt 0 view .LVU3774
 11607 0ad6 08F10708 		add	r8, r8, #7
 11608              	.LVL1309:
 11609              	.L979:
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11610              		.loc 1 2529 19 is_stmt 1 view .LVU3775
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11611              		.loc 1 2529 14 view .LVU3776
 11612 0ada 0135     		adds	r5, r5, #1
 11613              	.LVL1310:
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11614              		.loc 1 2529 2 is_stmt 0 view .LVU3777
 11615 0adc 682D     		cmp	r5, #104
 11616 0ade EAD1     		bne	.L981
2529:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11617              		.loc 1 2529 2 view .LVU3778
 11618 0ae0 23E7     		b	.L1212
ARM GAS  /tmp/cchf4YwX.s 			page 333


 11619              	.LVL1311:
 11620              	.L1247:
2532:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11621              		.loc 1 2532 8 is_stmt 1 view .LVU3779
 11622 0ae2 4C21     		movs	r1, #76
 11623 0ae4 7320     		movs	r0, #115
 11624              	.LVL1312:
2532:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11625              		.loc 1 2532 8 is_stmt 0 view .LVU3780
 11626 0ae6 FFF7FEFF 		bl	set_dig
 11627              	.LVL1313:
2533:src/display.c **** 	    } else {
 11628              		.loc 1 2533 8 is_stmt 1 view .LVU3781
 11629 0aea 4C21     		movs	r1, #76
 11630 0aec 7A20     		movs	r0, #122
 11631 0aee FFF7FEFF 		bl	set_dig
 11632              	.LVL1314:
 11633 0af2 F2E7     		b	.L979
 11634              	.LVL1315:
 11635              	.L1240:
2450:src/display.c **** 	  p = num_arg(buf, free_mem());
 11636              		.loc 1 2450 4 view .LVU3782
 11637 0af4 A048     		ldr	r0, .L1260+12
 11638 0af6 FFF7FEFF 		bl	set_status
 11639              	.LVL1316:
2451:src/display.c **** 	  p = scopy(p, " , FL. ");
 11640              		.loc 1 2451 4 view .LVU3783
2451:src/display.c **** 	  p = scopy(p, " , FL. ");
 11641              		.loc 1 2451 21 is_stmt 0 view .LVU3784
 11642 0afa FFF7FEFF 		bl	free_mem
 11643              	.LVL1317:
 11644 0afe 0146     		mov	r1, r0
2451:src/display.c **** 	  p = scopy(p, " , FL. ");
 11645              		.loc 1 2451 8 view .LVU3785
 11646 0b00 15A8     		add	r0, sp, #84
 11647              	.LVL1318:
2451:src/display.c **** 	  p = scopy(p, " , FL. ");
 11648              		.loc 1 2451 8 view .LVU3786
 11649 0b02 FFF7FEFF 		bl	num_arg
 11650              	.LVL1319:
2452:src/display.c **** 	  p = num_arg(p, free_flash());
 11651              		.loc 1 2452 4 is_stmt 1 view .LVU3787
2452:src/display.c **** 	  p = num_arg(p, free_flash());
 11652              		.loc 1 2452 8 is_stmt 0 view .LVU3788
 11653 0b06 9D49     		ldr	r1, .L1260+16
 11654 0b08 FFF7FEFF 		bl	scopy
 11655              	.LVL1320:
2452:src/display.c **** 	  p = num_arg(p, free_flash());
 11656              		.loc 1 2452 8 view .LVU3789
 11657 0b0c 0546     		mov	r5, r0
 11658              	.LVL1321:
2453:src/display.c **** 	  *p = '\0';
 11659              		.loc 1 2453 4 is_stmt 1 view .LVU3790
2453:src/display.c **** 	  *p = '\0';
 11660              		.loc 1 2453 19 is_stmt 0 view .LVU3791
 11661 0b0e FFF7FEFF 		bl	free_flash
 11662              	.LVL1322:
ARM GAS  /tmp/cchf4YwX.s 			page 334


2453:src/display.c **** 	  *p = '\0';
 11663              		.loc 1 2453 19 view .LVU3792
 11664 0b12 0146     		mov	r1, r0
2453:src/display.c **** 	  *p = '\0';
 11665              		.loc 1 2453 8 view .LVU3793
 11666 0b14 2846     		mov	r0, r5
 11667 0b16 FFF7FEFF 		bl	num_arg
 11668              	.LVL1323:
 11669 0b1a 0346     		mov	r3, r0
 11670              	.LVL1324:
2454:src/display.c **** 	  set_digits_string(buf, 0);
 11671              		.loc 1 2454 4 is_stmt 1 view .LVU3794
2454:src/display.c **** 	  set_digits_string(buf, 0);
 11672              		.loc 1 2454 7 is_stmt 0 view .LVU3795
 11673 0b1c 0021     		movs	r1, #0
2455:src/display.c **** 	}
 11674              		.loc 1 2455 4 view .LVU3796
 11675 0b1e 15A8     		add	r0, sp, #84
 11676              	.LVL1325:
2454:src/display.c **** 	  set_digits_string(buf, 0);
 11677              		.loc 1 2454 7 view .LVU3797
 11678 0b20 1970     		strb	r1, [r3]
2455:src/display.c **** 	}
 11679              		.loc 1 2455 4 is_stmt 1 view .LVU3798
 11680 0b22 FFF7FEFF 		bl	set_digits_string
 11681              	.LVL1326:
2455:src/display.c **** 	}
 11682              		.loc 1 2455 4 is_stmt 0 view .LVU3799
 11683 0b26 B9E7     		b	.L968
 11684              	.LVL1327:
 11685              	.L1239:
2455:src/display.c **** 	}
 11686              		.loc 1 2455 4 view .LVU3800
 11687              	.LBE695:
 11688              	.LBE699:
 11689              	.LBB700:
 11690              	.LBB658:
2558:src/display.c **** 	  if (lblpc != pc) {
 11691              		.loc 1 2558 4 is_stmt 1 view .LVU3801
2558:src/display.c **** 	  if (lblpc != pc) {
 11692              		.loc 1 2558 12 is_stmt 0 view .LVU3802
 11693 0b28 4046     		mov	r0, r8
 11694 0b2a 3946     		mov	r1, r7
 11695 0b2c FFF7FEFF 		bl	findmultilbl
 11696              	.LVL1328:
2558:src/display.c **** 	  if (lblpc != pc) {
 11697              		.loc 1 2558 10 view .LVU3803
 11698 0b30 85B2     		uxth	r5, r0
 11699              	.LVL1329:
2559:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11700              		.loc 1 2559 4 is_stmt 1 view .LVU3804
2559:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11701              		.loc 1 2559 7 is_stmt 0 view .LVU3805
 11702 0b32 AB45     		cmp	fp, r5
2558:src/display.c **** 	  if (lblpc != pc) {
 11703              		.loc 1 2558 12 view .LVU3806
 11704 0b34 8046     		mov	r8, r0
ARM GAS  /tmp/cchf4YwX.s 			page 335


 11705              	.LVL1330:
2559:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11706              		.loc 1 2559 7 view .LVU3807
 11707 0b36 3FF4F8AE 		beq	.L1212
2560:src/display.c **** 	    n = nLIB(lblpc);
 11708              		.loc 1 2560 6 is_stmt 1 view .LVU3808
 11709 0b3a 9148     		ldr	r0, .L1260+20
 11710 0b3c 3F21     		movs	r1, #63
 11711 0b3e FFF7FEFF 		bl	set_digits_string
 11712              	.LVL1331:
2561:src/display.c **** 	    if (n == REGION_RAM)
 11713              		.loc 1 2561 6 view .LVU3809
2562:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11714              		.loc 1 2562 6 view .LVU3810
2562:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11715              		.loc 1 2562 9 is_stmt 0 view .LVU3811
 11716 0b42 AD0B     		lsrs	r5, r5, #14
 11717              	.LVL1332:
2562:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11718              		.loc 1 2562 9 view .LVU3812
 11719 0b44 40F08680 		bne	.L986
2563:src/display.c **** 	    else {
 11720              		.loc 1 2563 8 is_stmt 1 view .LVU3813
 11721 0b48 2A46     		mov	r2, r5
 11722 0b4a 1FFA88F0 		uxth	r0, r8
 11723 0b4e 0121     		movs	r1, #1
 11724 0b50 FFF7FEFF 		bl	set_exp
 11725              	.LVL1333:
 11726 0b54 E9E6     		b	.L1212
 11727              	.LVL1334:
 11728              	.L1246:
2563:src/display.c **** 	    else {
 11729              		.loc 1 2563 8 is_stmt 0 view .LVU3814
 11730              	.LBE658:
 11731              	.LBE700:
2919:src/display.c **** 	    j = State2.alpha_pos;
 11732              		.loc 1 2919 6 is_stmt 1 view .LVU3815
2919:src/display.c **** 	    j = State2.alpha_pos;
 11733              		.loc 1 2919 22 is_stmt 0 view .LVU3816
 11734 0b56 874B     		ldr	r3, .L1260+8
 11735 0b58 0192     		str	r2, [sp, #4]
 11736 0b5a 1968     		ldr	r1, [r3]
2919:src/display.c **** 	    j = State2.alpha_pos;
 11737              		.loc 1 2919 11 view .LVU3817
 11738 0b5c 1EA8     		add	r0, sp, #120
 11739              	.LVL1335:
2919:src/display.c **** 	    j = State2.alpha_pos;
 11740              		.loc 1 2919 11 view .LVU3818
 11741 0b5e 01F5F661 		add	r1, r1, #1968
 11742 0b62 FFF7FEFF 		bl	scopy
 11743              	.LVL1336:
2920:src/display.c **** 	    if (j != 0) {
 11744              		.loc 1 2920 16 view .LVU3819
 11745 0b66 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11746              	.LVL1337:
2920:src/display.c **** 	    if (j != 0) {
 11747              		.loc 1 2920 6 is_stmt 1 view .LVU3820
ARM GAS  /tmp/cchf4YwX.s 			page 336


2921:src/display.c **** 	      i = slen(buf);
 11748              		.loc 1 2921 6 view .LVU3821
2921:src/display.c **** 	      i = slen(buf);
 11749              		.loc 1 2921 9 is_stmt 0 view .LVU3822
 11750 0b68 23BB     		cbnz	r3, .L1248
2934:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11751              		.loc 1 2934 8 is_stmt 1 view .LVU3823
2934:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11752              		.loc 1 2934 11 is_stmt 0 view .LVU3824
 11753 0b6a 3DB1     		cbz	r5, .L1010
2934:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11754              		.loc 1 2934 31 discriminator 1 view .LVU3825
 11755 0b6c BBF1000F 		cmp	fp, #0
 11756 0b70 04D1     		bne	.L1010
2935:src/display.c **** 		*bp++ = '\0';
 11757              		.loc 1 2935 3 is_stmt 1 view .LVU3826
 11758              	.LVL1338:
2935:src/display.c **** 		*bp++ = '\0';
 11759              		.loc 1 2935 23 is_stmt 0 view .LVU3827
 11760 0b72 05F11003 		add	r3, r5, #16
 11761              	.LVL1339:
2936:src/display.c **** 	      }
 11762              		.loc 1 2936 9 view .LVU3828
 11763 0b76 0022     		movs	r2, #0
2935:src/display.c **** 		*bp++ = '\0';
 11764              		.loc 1 2935 9 view .LVU3829
 11765 0b78 0370     		strb	r3, [r0]
 11766              	.LVL1340:
2936:src/display.c **** 	      }
 11767              		.loc 1 2936 3 is_stmt 1 view .LVU3830
2936:src/display.c **** 	      }
 11768              		.loc 1 2936 9 is_stmt 0 view .LVU3831
 11769 0b7a 4270     		strb	r2, [r0, #1]
 11770              	.LVL1341:
 11771              	.L1010:
2938:src/display.c **** 	    }
 11772              		.loc 1 2938 8 is_stmt 1 view .LVU3832
 11773 0b7c 1EA8     		add	r0, sp, #120
 11774 0b7e FFF7FEFF 		bl	set_status_right
 11775              	.LVL1342:
 11776              	.L1009:
2940:src/display.c **** 	      bp = buf;
 11777              		.loc 1 2940 6 view .LVU3833
2940:src/display.c **** 	      bp = buf;
 11778              		.loc 1 2940 9 is_stmt 0 view .LVU3834
 11779 0b82 85B3     		cbz	r5, .L1001
2940:src/display.c **** 	      bp = buf;
 11780              		.loc 1 2940 27 discriminator 1 view .LVU3835
 11781 0b84 BBF1000F 		cmp	fp, #0
 11782 0b88 2DD0     		beq	.L1001
2941:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11783              		.loc 1 2941 8 is_stmt 1 view .LVU3836
 11784              	.LVL1343:
2942:src/display.c **** 	      *bp++ = '\0';
 11785              		.loc 1 2942 8 view .LVU3837
 11786              	.LBB701:
 11787              	.LBB702:
ARM GAS  /tmp/cchf4YwX.s 			page 337


3634:src/display.c **** 	if (State2.runmode) {
 11788              		.loc 1 3634 5 is_stmt 0 view .LVU3838
 11789 0b8a B9F90030 		ldrsh	r3, [r9]
 11790              	.LBE702:
 11791              	.LBE701:
2942:src/display.c **** 	      *bp++ = '\0';
 11792              		.loc 1 2942 28 view .LVU3839
 11793 0b8e 1035     		adds	r5, r5, #16
2943:src/display.c **** 	      set_status_top(buf);
 11794              		.loc 1 2943 14 view .LVU3840
 11795 0b90 0022     		movs	r2, #0
2942:src/display.c **** 	      *bp++ = '\0';
 11796              		.loc 1 2942 14 view .LVU3841
 11797 0b92 8DF87850 		strb	r5, [sp, #120]
2943:src/display.c **** 	      set_status_top(buf);
 11798              		.loc 1 2943 8 is_stmt 1 view .LVU3842
 11799              	.LVL1344:
2943:src/display.c **** 	      set_status_top(buf);
 11800              		.loc 1 2943 14 is_stmt 0 view .LVU3843
 11801 0b96 8DF87920 		strb	r2, [sp, #121]
2944:src/display.c **** 	      no_status_top = 1;
 11802              		.loc 1 2944 8 is_stmt 1 view .LVU3844
 11803              	.LVL1345:
 11804              	.LBB704:
 11805              	.LBI701:
3633:src/display.c **** 	if (no_status_top) return;
 11806              		.loc 1 3633 19 view .LVU3845
 11807              	.LBB703:
3634:src/display.c **** 	if (State2.runmode) {
 11808              		.loc 1 3634 2 view .LVU3846
3634:src/display.c **** 	if (State2.runmode) {
 11809              		.loc 1 3634 5 is_stmt 0 view .LVU3847
 11810 0b9a 13B9     		cbnz	r3, .L1011
 11811 0b9c 1EA8     		add	r0, sp, #120
 11812              	.LVL1346:
3634:src/display.c **** 	if (State2.runmode) {
 11813              		.loc 1 3634 5 view .LVU3848
 11814 0b9e FFF7FEFF 		bl	set_status_top.part.0
 11815              	.LVL1347:
 11816              	.L1011:
3634:src/display.c **** 	if (State2.runmode) {
 11817              		.loc 1 3634 5 view .LVU3849
 11818              	.LBE703:
 11819              	.LBE704:
2945:src/display.c **** 	      //annuc = 1;
 11820              		.loc 1 2945 8 is_stmt 1 view .LVU3850
2945:src/display.c **** 	      //annuc = 1;
 11821              		.loc 1 2945 22 is_stmt 0 view .LVU3851
 11822 0ba2 0123     		movs	r3, #1
 11823 0ba4 A9F80030 		strh	r3, [r9]	@ movhi
2967:src/display.c ****       nostk:
 11824              		.loc 1 2967 2 is_stmt 1 view .LVU3852
 11825 0ba8 FFF7FEFF 		bl	show_stack
 11826              	.LVL1348:
2969:src/display.c **** 	if (!skip) {
 11827              		.loc 1 2969 2 view .LVU3853
 11828 0bac FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/cchf4YwX.s 			page 338


 11829              	.LVL1349:
2970:src/display.c **** 	  if (State2.runmode) {
 11830              		.loc 1 2970 2 view .LVU3854
 11831 0bb0 FFF769BA 		b	.L928
 11832              	.LVL1350:
 11833              	.L1248:
2922:src/display.c **** 	      j *= 6;
 11834              		.loc 1 2922 8 view .LVU3855
2922:src/display.c **** 	      j *= 6;
 11835              		.loc 1 2922 12 is_stmt 0 view .LVU3856
 11836 0bb4 1EA8     		add	r0, sp, #120
 11837              	.LVL1351:
2922:src/display.c **** 	      j *= 6;
 11838              		.loc 1 2922 12 view .LVU3857
 11839 0bb6 0293     		str	r3, [sp, #8]
 11840 0bb8 FFF7FEFF 		bl	slen
 11841              	.LVL1352:
2923:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11842              		.loc 1 2923 8 is_stmt 1 view .LVU3858
2924:src/display.c **** 		{
 11843              		.loc 1 2924 8 view .LVU3859
2923:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11844              		.loc 1 2923 10 is_stmt 0 view .LVU3860
 11845 0bbc 029B     		ldr	r3, [sp, #8]
 11846 0bbe 03EB4303 		add	r3, r3, r3, lsl #1
2924:src/display.c **** 		{
 11847              		.loc 1 2924 15 view .LVU3861
 11848 0bc2 A0EB4300 		sub	r0, r0, r3, lsl #1
 11849              	.LVL1353:
2924:src/display.c **** 		{
 11850              		.loc 1 2924 11 view .LVU3862
 11851 0bc6 1328     		cmp	r0, #19
 11852 0bc8 13DD     		ble	.L1008
2926:src/display.c **** 		  set_status_right(buf);
 11853              		.loc 1 2926 5 is_stmt 1 view .LVU3863
2926:src/display.c **** 		  set_status_right(buf);
 11854              		.loc 1 2926 20 is_stmt 0 view .LVU3864
 11855 0bca 28AB     		add	r3, sp, #160
 11856 0bcc 0344     		add	r3, r3, r0
 11857 0bce 019A     		ldr	r2, [sp, #4]
 11858 0bd0 03F8282C 		strb	r2, [r3, #-40]
2927:src/display.c **** 		}
 11859              		.loc 1 2927 5 is_stmt 1 view .LVU3865
 11860 0bd4 1EA8     		add	r0, sp, #120
 11861 0bd6 FFF7FEFF 		bl	set_status_right
 11862              	.LVL1354:
 11863 0bda D2E7     		b	.L1009
 11864              	.LVL1355:
 11865              	.L1249:
 11866              	.LBB705:
 11867              	.LBB706:
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11868              		.loc 1 3452 17 view .LVU3866
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11869              		.loc 1 3452 18 is_stmt 0 view .LVU3867
 11870 0bdc 0135     		adds	r5, r5, #1
 11871              	.LVL1356:
ARM GAS  /tmp/cchf4YwX.s 			page 339


3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11872              		.loc 1 3452 12 is_stmt 1 view .LVU3868
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11873              		.loc 1 3452 2 is_stmt 0 view .LVU3869
 11874 0bde 062D     		cmp	r5, #6
 11875 0be0 21D1     		bne	.L1002
 11876 0be2 DDE90467 		ldrd	r6, r7, [sp, #16]
 11877              	.LVL1357:
 11878              	.L1001:
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11879              		.loc 1 3452 2 view .LVU3870
 11880              	.LBE706:
 11881              	.LBE705:
2967:src/display.c ****       nostk:
 11882              		.loc 1 2967 2 is_stmt 1 view .LVU3871
 11883 0be6 FFF7FEFF 		bl	show_stack
 11884              	.LVL1358:
2969:src/display.c **** 	if (!skip) {
 11885              		.loc 1 2969 2 view .LVU3872
 11886 0bea FFF7FEFF 		bl	show_flags
 11887              	.LVL1359:
2970:src/display.c **** 	  if (State2.runmode) {
 11888              		.loc 1 2970 2 view .LVU3873
 11889 0bee FFF74ABA 		b	.L928
 11890              	.LVL1360:
 11891              	.L1008:
2930:src/display.c **** 	      }
 11892              		.loc 1 2930 3 view .LVU3874
 11893 0bf2 1EA8     		add	r0, sp, #120
 11894 0bf4 FFF7FEFF 		bl	set_status
 11895              	.LVL1361:
 11896 0bf8 C3E7     		b	.L1009
 11897              	.LVL1362:
 11898              	.L1245:
2917:src/display.c **** 	  } else if (State2.alphas) {
 11899              		.loc 1 2917 6 view .LVU3875
2917:src/display.c **** 	  } else if (State2.alphas) {
 11900              		.loc 1 2917 48 is_stmt 0 view .LVU3876
 11901 0bfa 501E     		subs	r0, r2, #1
 11902 0bfc 0293     		str	r3, [sp, #8]
 11903 0bfe FFF7FEFF 		bl	get_reg_n
 11904              	.LVL1363:
 11905              	.LBB714:
 11906              	.LBI705:
3438:src/display.c **** 	int glen = *graphic++;
 11907              		.loc 1 3438 19 is_stmt 1 view .LVU3877
 11908              	.LBB713:
3439:src/display.c **** 	int i, j;
 11909              		.loc 1 3439 2 view .LVU3878
3447:src/display.c **** #endif
 11910              		.loc 1 3447 15 is_stmt 0 view .LVU3879
 11911 0c02 604D     		ldr	r5, .L1260+24
3439:src/display.c **** 	int i, j;
 11912              		.loc 1 3439 6 view .LVU3880
 11913 0c04 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11914              	.LVL1364:
3440:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/cchf4YwX.s 			page 340


 11915              		.loc 1 3440 2 is_stmt 1 view .LVU3881
3447:src/display.c **** #endif
 11916              		.loc 1 3447 2 view .LVU3882
3447:src/display.c **** #endif
 11917              		.loc 1 3447 15 is_stmt 0 view .LVU3883
 11918 0c06 0122     		movs	r2, #1
 11919 0c08 2A70     		strb	r2, [r5]
3449:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11920              		.loc 1 3449 2 is_stmt 1 view .LVU3884
3449:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11921              		.loc 1 3449 5 is_stmt 0 view .LVU3885
 11922 0c0a 0029     		cmp	r1, #0
 11923 0c0c EBD0     		beq	.L1001
3450:src/display.c **** 
 11924              		.loc 1 3450 2 is_stmt 1 view .LVU3886
 11925              	.LVL1365:
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11926              		.loc 1 3452 2 view .LVU3887
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11927              		.loc 1 3452 12 view .LVU3888
 11928 0c0e 8318     		adds	r3, r0, r2
 11929 0c10 0393     		str	r3, [sp, #12]
 11930 0c12 4A29     		cmp	r1, #74
 11931 0c14 D4BF     		ite	le
 11932 0c16 5B18     		addle	r3, r3, r1
 11933 0c18 4A33     		addgt	r3, r3, #74
 11934 0c1a 0193     		str	r3, [sp, #4]
 11935 0c1c CDE90467 		strd	r6, r7, [sp, #16]
3452:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11936              		.loc 1 3452 8 is_stmt 0 view .LVU3889
 11937 0c20 029B     		ldr	r3, [sp, #8]
 11938 0c22 0292     		str	r2, [sp, #8]
 11939 0c24 1D46     		mov	r5, r3
 11940              	.LVL1366:
 11941              	.L1002:
3453:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11942              		.loc 1 3453 14 is_stmt 1 view .LVU3890
 11943 0c26 029B     		ldr	r3, [sp, #8]
 11944 0c28 039F     		ldr	r7, [sp, #12]
 11945 0c2a 03FA05FB 		lsl	fp, r3, r5
 11946 0c2e 05F19406 		add	r6, r5, #148
 11947 0c32 06E0     		b	.L1005
 11948              	.LVL1367:
 11949              	.L1250:
 11950              	.LBB707:
 11951              	.LBB708:
 346:src/display.c ****   else	clr_dot(n);
 11952              		.loc 1 346 11 is_stmt 0 view .LVU3891
 11953 0c34 FFF7FEFF 		bl	set_dot
 11954              	.LVL1368:
 11955              	.L1004:
 346:src/display.c ****   else	clr_dot(n);
 11956              		.loc 1 346 11 view .LVU3892
 11957              	.LBE708:
 11958              	.LBE707:
3453:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11959              		.loc 1 3453 23 is_stmt 1 view .LVU3893
ARM GAS  /tmp/cchf4YwX.s 			page 341


3453:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11960              		.loc 1 3453 14 view .LVU3894
3453:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11961              		.loc 1 3453 4 is_stmt 0 view .LVU3895
 11962 0c38 019B     		ldr	r3, [sp, #4]
 11963 0c3a BB42     		cmp	r3, r7
 11964 0c3c 06F10606 		add	r6, r6, #6
 11965 0c40 CCD0     		beq	.L1249
 11966              	.LVL1369:
 11967              	.L1005:
3458:src/display.c **** #endif
 11968              		.loc 1 3458 6 is_stmt 1 view .LVU3896
 11969              	.LBB711:
 11970              	.LBI707:
 345:src/display.c ****   if (on)	set_dot(n);
 11971              		.loc 1 345 6 view .LVU3897
 11972              	.LBB709:
 346:src/display.c ****   else	clr_dot(n);
 11973              		.loc 1 346 3 view .LVU3898
 346:src/display.c ****   else	clr_dot(n);
 11974              		.loc 1 346 11 view .LVU3899
 347:src/display.c **** }
 11975              		.loc 1 347 8 view .LVU3900
 11976              	.LBE709:
 11977              	.LBE711:
3458:src/display.c **** #endif
 11978              		.loc 1 3458 37 is_stmt 0 view .LVU3901
 11979 0c42 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11980              	.LVL1370:
 11981              	.LBB712:
 11982              	.LBB710:
 346:src/display.c ****   else	clr_dot(n);
 11983              		.loc 1 346 6 view .LVU3902
 11984 0c46 13EA0B0F 		tst	r3, fp
 346:src/display.c ****   else	clr_dot(n);
 11985              		.loc 1 346 11 view .LVU3903
 11986 0c4a 3046     		mov	r0, r6
 346:src/display.c ****   else	clr_dot(n);
 11987              		.loc 1 346 6 view .LVU3904
 11988 0c4c F2D1     		bne	.L1250
 347:src/display.c **** }
 11989              		.loc 1 347 8 view .LVU3905
 11990 0c4e FFF7FEFF 		bl	clr_dot
 11991              	.LVL1371:
 11992 0c52 F1E7     		b	.L1004
 11993              	.LVL1372:
 11994              	.L986:
 347:src/display.c **** }
 11995              		.loc 1 347 8 view .LVU3906
 11996              	.LBE710:
 11997              	.LBE712:
 11998              	.LBE713:
 11999              	.LBE714:
 12000              	.LBB715:
 12001              	.LBB659:
2565:src/display.c **** #ifndef REALBUILD
 12002              		.loc 1 2565 8 is_stmt 1 view .LVU3907
ARM GAS  /tmp/cchf4YwX.s 			page 342


2565:src/display.c **** #ifndef REALBUILD
 12003              		.loc 1 2565 37 is_stmt 0 view .LVU3908
 12004 0c54 05EB8500 		add	r0, r5, r5, lsl #2
2565:src/display.c **** #ifndef REALBUILD
 12005              		.loc 1 2565 8 view .LVU3909
 12006 0c58 3946     		mov	r1, r7
 12007 0c5a 5044     		add	r0, r0, r10
 12008 0c5c FFF7FEFF 		bl	set_exp_digits_string
 12009              	.LVL1373:
2567:src/display.c **** #endif
 12010              		.loc 1 2567 8 is_stmt 1 view .LVU3910
 12011 0c60 494B     		ldr	r3, .L1260+28
 12012 0c62 4A48     		ldr	r0, .L1260+32
2567:src/display.c **** #endif
 12013              		.loc 1 2567 47 is_stmt 0 view .LVU3911
 12014 0c64 0A21     		movs	r1, #10
2567:src/display.c **** #endif
 12015              		.loc 1 2567 8 view .LVU3912
 12016 0c66 01FB0531 		mla	r1, r1, r5, r3
 12017 0c6a FFF7FEFF 		bl	scopy
 12018              	.LVL1374:
2567:src/display.c **** #endif
 12019              		.loc 1 2567 8 view .LVU3913
 12020              	.LBE659:
 12021              	.LBE715:
2967:src/display.c ****       nostk:
 12022              		.loc 1 2967 2 is_stmt 1 view .LVU3914
 12023 0c6e 5CE6     		b	.L1212
 12024              	.LVL1375:
 12025              	.L1242:
 12026              	.LBB716:
 12027              	.LBB696:
 12028              	.LBB694:
2480:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 12029              		.loc 1 2480 6 view .LVU3915
2480:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 12030              		.loc 1 2480 11 is_stmt 0 view .LVU3916
 12031 0c70 4FF00A0A 		mov	r10, #10
 12032              	.LVL1376:
2480:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 12033              		.loc 1 2480 11 view .LVU3917
 12034 0c74 0AFB03F7 		mul	r7, r10, r3
 12035              	.LVL1377:
2481:src/display.c **** 	    p = scopy(buf, "FL ");
 12036              		.loc 1 2481 6 is_stmt 1 view .LVU3918
2481:src/display.c **** 	    p = scopy(buf, "FL ");
 12037              		.loc 1 2481 28 is_stmt 0 view .LVU3919
 12038 0c78 462F     		cmp	r7, #70
2482:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12039              		.loc 1 2482 10 view .LVU3920
 12040 0c7a 4549     		ldr	r1, .L1260+36
 12041 0c7c 15A8     		add	r0, sp, #84
 12042              	.LVL1378:
2481:src/display.c **** 	    p = scopy(buf, "FL ");
 12043              		.loc 1 2481 28 view .LVU3921
 12044 0c7e B846     		mov	r8, r7
 12045 0c80 A8BF     		it	ge
ARM GAS  /tmp/cchf4YwX.s 			page 343


 12046 0c82 4FF04608 		movge	r8, #70
2482:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12047              		.loc 1 2482 10 view .LVU3922
 12048 0c86 FFF7FEFF 		bl	scopy
 12049              	.LVL1379:
2483:src/display.c **** 	    *p++ = '-';
 12050              		.loc 1 2483 10 view .LVU3923
 12051 0c8a 3946     		mov	r1, r7
 12052 0c8c 0222     		movs	r2, #2
 12053 0c8e FFF7FEFF 		bl	num_arg_0
 12054              	.LVL1380:
2481:src/display.c **** 	    p = scopy(buf, "FL ");
 12055              		.loc 1 2481 10 view .LVU3924
 12056 0c92 08F11D08 		add	r8, r8, #29
 12057              	.LVL1381:
2482:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12058              		.loc 1 2482 6 is_stmt 1 view .LVU3925
2483:src/display.c **** 	    *p++ = '-';
 12059              		.loc 1 2483 6 view .LVU3926
2484:src/display.c **** 	    p = num_arg_0(p, end, 2);
 12060              		.loc 1 2484 6 view .LVU3927
2484:src/display.c **** 	    p = num_arg_0(p, end, 2);
 12061              		.loc 1 2484 11 is_stmt 0 view .LVU3928
 12062 0c96 2D23     		movs	r3, #45
 12063 0c98 00F8013B 		strb	r3, [r0], #1
 12064              	.LVL1382:
2485:src/display.c **** 	    *p = '\0';
 12065              		.loc 1 2485 6 is_stmt 1 view .LVU3929
2485:src/display.c **** 	    *p = '\0';
 12066              		.loc 1 2485 10 is_stmt 0 view .LVU3930
 12067 0c9c 4146     		mov	r1, r8
 12068 0c9e 0222     		movs	r2, #2
 12069 0ca0 FFF7FEFF 		bl	num_arg_0
 12070              	.LVL1383:
2485:src/display.c **** 	    *p = '\0';
 12071              		.loc 1 2485 10 view .LVU3931
 12072 0ca4 0246     		mov	r2, r0
 12073              	.LVL1384:
2486:src/display.c **** 	    set_status(buf);
 12074              		.loc 1 2486 6 is_stmt 1 view .LVU3932
2486:src/display.c **** 	    set_status(buf);
 12075              		.loc 1 2486 9 is_stmt 0 view .LVU3933
 12076 0ca6 4FF0000B 		mov	fp, #0
2487:src/display.c **** 	  }
 12077              		.loc 1 2487 6 view .LVU3934
 12078 0caa 15A8     		add	r0, sp, #84
 12079              	.LVL1385:
2486:src/display.c **** 	    set_status(buf);
 12080              		.loc 1 2486 9 view .LVU3935
 12081 0cac 82F800B0 		strb	fp, [r2]
2487:src/display.c **** 	  }
 12082              		.loc 1 2487 6 is_stmt 1 view .LVU3936
 12083 0cb0 FFF7FEFF 		bl	set_status
 12084              	.LVL1386:
2487:src/display.c **** 	  }
 12085              		.loc 1 2487 6 is_stmt 0 view .LVU3937
 12086 0cb4 56E6     		b	.L973
ARM GAS  /tmp/cchf4YwX.s 			page 344


 12087              	.LVL1387:
 12088              	.L1241:
2487:src/display.c **** 	  }
 12089              		.loc 1 2487 6 view .LVU3938
 12090              	.LBE694:
2459:src/display.c **** 	  if (SizeStatRegs)
 12091              		.loc 1 2459 4 is_stmt 1 view .LVU3939
2459:src/display.c **** 	  if (SizeStatRegs)
 12092              		.loc 1 2459 8 is_stmt 0 view .LVU3940
 12093 0cb6 15AF     		add	r7, sp, #84
 12094              	.LVL1388:
2459:src/display.c **** 	  if (SizeStatRegs)
 12095              		.loc 1 2459 8 view .LVU3941
 12096 0cb8 3649     		ldr	r1, .L1260+40
 12097 0cba 3846     		mov	r0, r7
 12098 0cbc FFF7FEFF 		bl	scopy
 12099              	.LVL1389:
2460:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12100              		.loc 1 2460 8 view .LVU3942
 12101 0cc0 354A     		ldr	r2, .L1260+44
2460:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12102              		.loc 1 2460 7 view .LVU3943
 12103 0cc2 1268     		ldr	r2, [r2]
2459:src/display.c **** 	  if (SizeStatRegs)
 12104              		.loc 1 2459 8 view .LVU3944
 12105 0cc4 0346     		mov	r3, r0
 12106              	.LVL1390:
2460:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12107              		.loc 1 2460 4 is_stmt 1 view .LVU3945
2460:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12108              		.loc 1 2460 7 is_stmt 0 view .LVU3946
 12109 0cc6 002A     		cmp	r2, #0
 12110 0cc8 76D1     		bne	.L1251
 12111              	.L970:
2462:src/display.c **** 	  set_status(buf);
 12112              		.loc 1 2462 4 is_stmt 1 view .LVU3947
2462:src/display.c **** 	  set_status(buf);
 12113              		.loc 1 2462 7 is_stmt 0 view .LVU3948
 12114 0cca 0022     		movs	r2, #0
 12115 0ccc 1A70     		strb	r2, [r3]
2463:src/display.c **** 
 12116              		.loc 1 2463 4 is_stmt 1 view .LVU3949
 12117 0cce 3846     		mov	r0, r7
 12118              	.LVL1391:
2463:src/display.c **** 
 12119              		.loc 1 2463 4 is_stmt 0 view .LVU3950
 12120 0cd0 FFF7FEFF 		bl	set_status
 12121              	.LVL1392:
2466:src/display.c **** 	  if (LocalRegs < 0) {
 12122              		.loc 1 2466 4 is_stmt 1 view .LVU3951
2466:src/display.c **** 	  if (LocalRegs < 0) {
 12123              		.loc 1 2466 8 is_stmt 0 view .LVU3952
 12124 0cd4 FFF7FEFF 		bl	global_regs
 12125              	.LVL1393:
 12126 0cd8 0146     		mov	r1, r0
 12127 0cda 3846     		mov	r0, r7
 12128 0cdc FFF7FEFF 		bl	num_arg
ARM GAS  /tmp/cchf4YwX.s 			page 345


 12129              	.LVL1394:
2467:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12130              		.loc 1 2467 8 view .LVU3953
 12131 0ce0 244B     		ldr	r3, .L1260+8
 12132 0ce2 1A68     		ldr	r2, [r3]
2467:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12133              		.loc 1 2467 7 view .LVU3954
 12134 0ce4 B2F9DE27 		ldrsh	r2, [r2, #2014]
 12135 0ce8 002A     		cmp	r2, #0
2466:src/display.c **** 	  if (LocalRegs < 0) {
 12136              		.loc 1 2466 8 view .LVU3955
 12137 0cea 0346     		mov	r3, r0
 12138              	.LVL1395:
2467:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12139              		.loc 1 2467 4 is_stmt 1 view .LVU3956
2467:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12140              		.loc 1 2467 7 is_stmt 0 view .LVU3957
 12141 0cec 58DB     		blt	.L1252
 12142              	.L971:
2471:src/display.c **** 	  set_digits_string(buf, 0);
 12143              		.loc 1 2471 4 is_stmt 1 view .LVU3958
2471:src/display.c **** 	  set_digits_string(buf, 0);
 12144              		.loc 1 2471 7 is_stmt 0 view .LVU3959
 12145 0cee 0021     		movs	r1, #0
2472:src/display.c **** 	} else {
 12146              		.loc 1 2472 4 view .LVU3960
 12147 0cf0 3846     		mov	r0, r7
 12148              	.LVL1396:
2471:src/display.c **** 	  set_digits_string(buf, 0);
 12149              		.loc 1 2471 7 view .LVU3961
 12150 0cf2 1970     		strb	r1, [r3]
2472:src/display.c **** 	} else {
 12151              		.loc 1 2472 4 is_stmt 1 view .LVU3962
 12152 0cf4 FFF7FEFF 		bl	set_digits_string
 12153              	.LVL1397:
2472:src/display.c **** 	} else {
 12154              		.loc 1 2472 4 is_stmt 0 view .LVU3963
 12155 0cf8 D0E6     		b	.L968
 12156              	.LVL1398:
 12157              	.L998:
2472:src/display.c **** 	} else {
 12158              		.loc 1 2472 4 view .LVU3964
 12159              	.LBE696:
 12160              	.LBE716:
2957:src/display.c **** 	  if (i > 0)
 12161              		.loc 1 2957 4 is_stmt 1 view .LVU3965
2957:src/display.c **** 	  if (i > 0)
 12162              		.loc 1 2957 8 is_stmt 0 view .LVU3966
 12163 0cfa 1E4B     		ldr	r3, .L1260+8
 12164 0cfc 1B68     		ldr	r3, [r3]
 12165 0cfe B3F8E007 		ldrh	r0, [r3, #2016]
 12166              	.LVL1399:
2958:src/display.c **** 	    set_status(prt(getprog(i), buf));
 12167              		.loc 1 2958 4 is_stmt 1 view .LVU3967
2958:src/display.c **** 	    set_status(prt(getprog(i), buf));
 12168              		.loc 1 2958 7 is_stmt 0 view .LVU3968
 12169 0d02 0028     		cmp	r0, #0
ARM GAS  /tmp/cchf4YwX.s 			page 346


 12170 0d04 00F0C080 		beq	.L1012
2959:src/display.c **** 	  else
 12171              		.loc 1 2959 6 is_stmt 1 view .LVU3969
 12172 0d08 FFF7FEFF 		bl	getprog
 12173              	.LVL1400:
2959:src/display.c **** 	  else
 12174              		.loc 1 2959 6 is_stmt 0 view .LVU3970
 12175 0d0c 1EA9     		add	r1, sp, #120
 12176              	.LVL1401:
2959:src/display.c **** 	  else
 12177              		.loc 1 2959 6 view .LVU3971
 12178 0d0e FFF7FEFF 		bl	prt
 12179              	.LVL1402:
2959:src/display.c **** 	  else
 12180              		.loc 1 2959 6 view .LVU3972
 12181 0d12 FFF7FEFF 		bl	set_status
 12182              	.LVL1403:
 12183              	.L1013:
2962:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 12184              		.loc 1 2962 4 is_stmt 1 view .LVU3973
 12185 0d16 8920     		movs	r0, #137
 12186 0d18 FFF7FEFF 		bl	set_dot
 12187              	.LVL1404:
2964:src/display.c **** 	  goto nostk;
 12188              		.loc 1 2964 6 view .LVU3974
2965:src/display.c **** 	}
 12189              		.loc 1 2965 4 view .LVU3975
2969:src/display.c **** 	if (!skip) {
 12190              		.loc 1 2969 2 view .LVU3976
2964:src/display.c **** 	  goto nostk;
 12191              		.loc 1 2964 12 is_stmt 0 view .LVU3977
 12192 0d1c 0126     		movs	r6, #1
2969:src/display.c **** 	if (!skip) {
 12193              		.loc 1 2969 2 view .LVU3978
 12194 0d1e FFF7FEFF 		bl	show_flags
 12195              	.LVL1405:
 12196              	.L1209:
2970:src/display.c **** 	  if (State2.runmode) {
 12197              		.loc 1 2970 2 is_stmt 1 view .LVU3979
 12198 0d22 124B     		ldr	r3, .L1260
 12199 0d24 1D4F     		ldr	r7, .L1260+48
 12200 0d26 0093     		str	r3, [sp]
 12201 0d28 FFF7ADB9 		b	.L928
 12202              	.LVL1406:
 12203              	.L1234:
2904:src/display.c **** 	  skip = 1;
 12204              		.loc 1 2904 4 view .LVU3980
 12205              	.LBB717:
 12206              	.LBI717:
2575:src/display.c **** 	char buf[16], *bp;
 12207              		.loc 1 2575 19 view .LVU3981
 12208              	.LBB718:
2576:src/display.c **** 	int n = State2.digval;
 12209              		.loc 1 2576 2 view .LVU3982
2577:src/display.c **** 	
 12210              		.loc 1 2577 2 view .LVU3983
2577:src/display.c **** 	
ARM GAS  /tmp/cchf4YwX.s 			page 347


 12211              		.loc 1 2577 6 is_stmt 0 view .LVU3984
 12212 0d2c B4F808A0 		ldrh	r10, [r4, #8]
 12213              	.LVL1407:
2584:src/display.c **** 	  n;
 12214              		.loc 1 2584 2 is_stmt 1 view .LVU3985
2584:src/display.c **** 	  n;
 12215              		.loc 1 2584 54 is_stmt 0 view .LVU3986
 12216 0d30 C807     		lsls	r0, r1, #31
 12217 0d32 4CBF     		ite	mi
 12218 0d34 0AF17008 		addmi	r8, r10, #112
2577:src/display.c **** 	
 12219              		.loc 1 2577 6 view .LVU3987
 12220 0d38 D046     		movpl	r8, r10
 12221              	.LVL1408:
2588:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12222              		.loc 1 2588 2 is_stmt 1 view .LVU3988
2588:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12223              		.loc 1 2588 5 is_stmt 0 view .LVU3989
 12224 0d3a 11F00401 		ands	r1, r1, #4
 12225 0d3e 49D0     		beq	.L989
2589:src/display.c **** 	}
 12226              		.loc 1 2589 4 is_stmt 1 view .LVU3990
2589:src/display.c **** 	}
 12227              		.loc 1 2589 15 is_stmt 0 view .LVU3991
 12228 0d40 15A9     		add	r1, sp, #84
 12229 0d42 4046     		mov	r0, r8
 12230 0d44 FFF7FEFF 		bl	alpha_rcl_s
 12231              	.LVL1409:
2589:src/display.c **** 	}
 12232              		.loc 1 2589 4 view .LVU3992
 12233 0d48 FFF7FEFF 		bl	set_status
 12234              	.LVL1410:
 12235              	.L990:
2611:src/display.c ****       }
 12236              		.loc 1 2611 2 is_stmt 1 view .LVU3993
 12237 0d4c 4046     		mov	r0, r8
 12238 0d4e 0021     		movs	r1, #0
 12239 0d50 FFF7FEFF 		bl	format_reg
 12240              	.LVL1411:
2611:src/display.c ****       }
 12241              		.loc 1 2611 2 is_stmt 0 view .LVU3994
 12242              	.LBE718:
 12243              	.LBE717:
2905:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 12244              		.loc 1 2905 4 is_stmt 1 view .LVU3995
2906:src/display.c **** 	    annunciators();
 12245              		.loc 1 2906 4 view .LVU3996
2906:src/display.c **** 	    annunciators();
 12246              		.loc 1 2906 7 is_stmt 0 view .LVU3997
 12247 0d54 002D     		cmp	r5, #0
 12248 0d56 3AD1     		bne	.L996
2906:src/display.c **** 	    annunciators();
 12249              		.loc 1 2906 25 discriminator 1 view .LVU3998
 12250 0d58 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 12251 0d5a 012B     		cmp	r3, #1
 12252 0d5c 31D0     		beq	.L1253
 12253              	.L997:
ARM GAS  /tmp/cchf4YwX.s 			page 348


2967:src/display.c ****       nostk:
 12254              		.loc 1 2967 2 is_stmt 1 view .LVU3999
 12255 0d5e FFF7FEFF 		bl	show_stack
 12256              	.LVL1412:
2969:src/display.c **** 	if (!skip) {
 12257              		.loc 1 2969 2 view .LVU4000
2677:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 12258              		.loc 1 2677 6 is_stmt 0 view .LVU4001
 12259 0d62 0026     		movs	r6, #0
2969:src/display.c **** 	if (!skip) {
 12260              		.loc 1 2969 2 view .LVU4002
 12261 0d64 FFF7FEFF 		bl	show_flags
 12262              	.LVL1413:
2970:src/display.c **** 	  if (State2.runmode) {
 12263              		.loc 1 2970 2 is_stmt 1 view .LVU4003
 12264 0d68 7BE5     		b	.L961
 12265              	.L1261:
 12266 0d6a 00BF     		.align	2
 12267              	.L1260:
 12268 0d6c 00000000 		.word	DispPlot
 12269 0d70 7C000000 		.word	.LC39
 12270 0d74 00000000 		.word	main_ram
 12271 0d78 4C000000 		.word	.LC33
 12272 0d7c 54000000 		.word	.LC34
 12273 0d80 98000000 		.word	.LC41
 12274 0d84 00000000 		.word	forceDispPlot
 12275 0d88 00000000 		.word	.LANCHOR23
 12276 0d8c 00000000 		.word	LastDisplayedNumber
 12277 0d90 78000000 		.word	.LC38
 12278 0d94 5C000000 		.word	.LC35
 12279 0d98 00000000 		.word	SizeStatRegs
 12280 0d9c 00000000 		.word	DispMsg
 12281              	.LVL1414:
 12282              	.L1252:
 12283              	.LBB721:
 12284              	.LBB697:
2468:src/display.c **** 	    p = num_arg(p, local_regs());
 12285              		.loc 1 2468 6 view .LVU4004
2468:src/display.c **** 	    p = num_arg(p, local_regs());
 12286              		.loc 1 2468 10 is_stmt 0 view .LVU4005
 12287 0da0 4849     		ldr	r1, .L1262
 12288 0da2 FFF7FEFF 		bl	scopy
 12289              	.LVL1415:
2468:src/display.c **** 	    p = num_arg(p, local_regs());
 12290              		.loc 1 2468 10 view .LVU4006
 12291 0da6 0546     		mov	r5, r0
 12292              	.LVL1416:
2469:src/display.c **** 	  }
 12293              		.loc 1 2469 6 is_stmt 1 view .LVU4007
2469:src/display.c **** 	  }
 12294              		.loc 1 2469 21 is_stmt 0 view .LVU4008
 12295 0da8 FFF7FEFF 		bl	local_regs
 12296              	.LVL1417:
2469:src/display.c **** 	  }
 12297              		.loc 1 2469 21 view .LVU4009
 12298 0dac 0146     		mov	r1, r0
2469:src/display.c **** 	  }
ARM GAS  /tmp/cchf4YwX.s 			page 349


 12299              		.loc 1 2469 10 view .LVU4010
 12300 0dae 2846     		mov	r0, r5
 12301 0db0 FFF7FEFF 		bl	num_arg
 12302              	.LVL1418:
 12303 0db4 0346     		mov	r3, r0
 12304              	.LVL1419:
2469:src/display.c **** 	  }
 12305              		.loc 1 2469 10 view .LVU4011
 12306 0db6 9AE7     		b	.L971
 12307              	.L1251:
2461:src/display.c **** 	  *p = '\0';
 12308              		.loc 1 2461 6 is_stmt 1 view .LVU4012
2461:src/display.c **** 	  *p = '\0';
 12309              		.loc 1 2461 10 is_stmt 0 view .LVU4013
 12310 0db8 4349     		ldr	r1, .L1262+4
 12311 0dba FFF7FEFF 		bl	scopy
 12312              	.LVL1420:
2461:src/display.c **** 	  *p = '\0';
 12313              		.loc 1 2461 10 view .LVU4014
 12314 0dbe 0346     		mov	r3, r0
 12315              	.LVL1421:
2461:src/display.c **** 	  *p = '\0';
 12316              		.loc 1 2461 10 view .LVU4015
 12317 0dc0 83E7     		b	.L970
 12318              	.LVL1422:
 12319              	.L1253:
2461:src/display.c **** 	  *p = '\0';
 12320              		.loc 1 2461 10 view .LVU4016
 12321              	.LBE697:
 12322              	.LBE721:
2906:src/display.c **** 	    annunciators();
 12323              		.loc 1 2906 56 discriminator 2 view .LVU4017
 12324 0dc2 424B     		ldr	r3, .L1262+8
 12325 0dc4 1B68     		ldr	r3, [r3]
 12326 0dc6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12327 0dca DB07     		lsls	r3, r3, #31
 12328 0dcc C7D5     		bpl	.L997
 12329              	.L996:
2907:src/display.c **** 	  }
 12330              		.loc 1 2907 6 is_stmt 1 view .LVU4018
 12331 0dce FFF7FEFF 		bl	annunciators
 12332              	.LVL1423:
 12333 0dd2 AAE5     		b	.L1212
 12334              	.LVL1424:
 12335              	.L989:
 12336              	.LBB722:
 12337              	.LBB719:
2592:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12338              		.loc 1 2592 4 view .LVU4019
 12339 0dd4 15AF     		add	r7, sp, #84
 12340 0dd6 1022     		movs	r2, #16
 12341 0dd8 3846     		mov	r0, r7
 12342 0dda FFF7FEFF 		bl	xset
 12343              	.LVL1425:
2596:src/display.c **** #endif
 12344              		.loc 1 2596 4 view .LVU4020
2596:src/display.c **** #endif
ARM GAS  /tmp/cchf4YwX.s 			page 350


 12345              		.loc 1 2596 9 is_stmt 0 view .LVU4021
 12346 0dde 3C49     		ldr	r1, .L1262+12
 12347 0de0 3846     		mov	r0, r7
 12348 0de2 FFF7FEFF 		bl	scopy_spc
 12349              	.LVL1426:
2598:src/display.c **** 	    *bp++ = '.';
 12350              		.loc 1 2598 8 view .LVU4022
 12351 0de6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12352              	.LVL1427:
2598:src/display.c **** 	    *bp++ = '.';
 12353              		.loc 1 2598 4 is_stmt 1 view .LVU4023
2598:src/display.c **** 	    *bp++ = '.';
 12354              		.loc 1 2598 7 is_stmt 0 view .LVU4024
 12355 0de8 DA07     		lsls	r2, r3, #31
 12356 0dea 56D5     		bpl	.L991
2599:src/display.c **** 	    if (n >= 100) {
 12357              		.loc 1 2599 6 is_stmt 1 view .LVU4025
 12358              	.LVL1428:
2599:src/display.c **** 	    if (n >= 100) {
 12359              		.loc 1 2599 12 is_stmt 0 view .LVU4026
 12360 0dec 2E23     		movs	r3, #46
2600:src/display.c **** 	      *bp++ = '1';
 12361              		.loc 1 2600 9 view .LVU4027
 12362 0dee BAF1630F 		cmp	r10, #99
2599:src/display.c **** 	    if (n >= 100) {
 12363              		.loc 1 2599 12 view .LVU4028
 12364 0df2 0370     		strb	r3, [r0]
2600:src/display.c **** 	      *bp++ = '1';
 12365              		.loc 1 2600 6 is_stmt 1 view .LVU4029
2600:src/display.c **** 	      *bp++ = '1';
 12366              		.loc 1 2600 9 is_stmt 0 view .LVU4030
 12367 0df4 4CDC     		bgt	.L992
2599:src/display.c **** 	    if (n >= 100) {
 12368              		.loc 1 2599 9 view .LVU4031
 12369 0df6 0130     		adds	r0, r0, #1
 12370              	.LVL1429:
 12371              	.L993:
2606:src/display.c **** 	  else
 12372              		.loc 1 2606 6 is_stmt 1 view .LVU4032
2606:src/display.c **** 	  else
 12373              		.loc 1 2606 11 is_stmt 0 view .LVU4033
 12374 0df8 5146     		mov	r1, r10
 12375 0dfa 0222     		movs	r2, #2
 12376 0dfc FFF7FEFF 		bl	num_arg_0
 12377              	.LVL1430:
 12378              	.L995:
2609:src/display.c **** 	}
 12379              		.loc 1 2609 4 is_stmt 1 view .LVU4034
 12380 0e00 3846     		mov	r0, r7
 12381 0e02 FFF7FEFF 		bl	set_status
 12382              	.LVL1431:
 12383 0e06 A1E7     		b	.L990
 12384              	.LVL1432:
 12385              	.L1238:
2609:src/display.c **** 	}
 12386              		.loc 1 2609 4 is_stmt 0 view .LVU4035
 12387              	.LBE719:
ARM GAS  /tmp/cchf4YwX.s 			page 351


 12388              	.LBE722:
 12389              	.LBB723:
 12390              	.LBB644:
2866:src/display.c **** 	      copyreg(&z, x);
 12391              		.loc 1 2866 8 is_stmt 1 view .LVU4036
2866:src/display.c **** 	      copyreg(&z, x);
 12392              		.loc 1 2866 27 is_stmt 0 view .LVU4037
 12393 0e08 324B     		ldr	r3, .L1262+16
 12394 0e0a 1E68     		ldr	r6, [r3]
 12395              	.LVL1433:
2867:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 12396              		.loc 1 2867 8 is_stmt 1 view .LVU4038
 12397 0e0c 15A8     		add	r0, sp, #84
 12398 0e0e 3146     		mov	r1, r6
 12399 0e10 FFF7FEFF 		bl	copyreg
 12400              	.LVL1434:
2868:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12401              		.loc 1 2868 8 view .LVU4039
 12402 0e14 E8B2     		uxtb	r0, r5
 12403 0e16 FFF7FEFF 		bl	sigma_val
 12404              	.LVL1435:
2869:src/display.c **** 	      copyreg(x, &z);
 12405              		.loc 1 2869 8 view .LVU4040
 12406 0e1a FFF7FEFF 		bl	is_dblmode
 12407              	.LVL1436:
 12408 0e1e 0021     		movs	r1, #0
 12409 0e20 0246     		mov	r2, r0
 12410 0e22 3046     		mov	r0, r6
 12411 0e24 FFF7FEFF 		bl	set_x
 12412              	.LVL1437:
2870:src/display.c **** 	      skip = 1;
 12413              		.loc 1 2870 8 view .LVU4041
 12414 0e28 15A9     		add	r1, sp, #84
 12415 0e2a 3046     		mov	r0, r6
 12416 0e2c FFF7FEFF 		bl	copyreg
 12417              	.LVL1438:
2871:src/display.c **** 	    }
 12418              		.loc 1 2871 8 view .LVU4042
2871:src/display.c **** 	    }
 12419              		.loc 1 2871 13 is_stmt 0 view .LVU4043
 12420 0e30 0125     		movs	r5, #1
 12421              	.LVL1439:
2871:src/display.c **** 	    }
 12422              		.loc 1 2871 13 view .LVU4044
 12423 0e32 02E5     		b	.L953
 12424              	.LVL1440:
 12425              	.L1237:
2871:src/display.c **** 	    }
 12426              		.loc 1 2871 13 view .LVU4045
 12427              	.LBE644:
 12428              	.LBB645:
2846:src/display.c **** 	      decimal64 z;
 12429              		.loc 1 2846 8 is_stmt 1 view .LVU4046
2847:src/display.c **** 
 12430              		.loc 1 2847 8 view .LVU4047
2849:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12431              		.loc 1 2849 8 view .LVU4048
ARM GAS  /tmp/cchf4YwX.s 			page 352


 12432 0e34 0CA8     		add	r0, sp, #48
 12433 0e36 FFF7FEFF 		bl	getX
 12434              	.LVL1441:
2850:src/display.c **** 		const unsigned int f = argKIND(op);
 12435              		.loc 1 2850 8 view .LVU4049
2850:src/display.c **** 		const unsigned int f = argKIND(op);
 12436              		.loc 1 2850 11 is_stmt 0 view .LVU4050
 12437 0e3a C5F30723 		ubfx	r3, r5, #8, #8
 12438 0e3e 022B     		cmp	r3, #2
 12439 0e40 38D1     		bne	.L955
 12440              	.LBB646:
2851:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12441              		.loc 1 2851 3 is_stmt 1 view .LVU4051
2851:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12442              		.loc 1 2851 22 is_stmt 0 view .LVU4052
 12443 0e42 EDB2     		uxtb	r5, r5
 12444              	.LVL1442:
2852:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12445              		.loc 1 2852 3 is_stmt 1 view .LVU4053
2852:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12446              		.loc 1 2852 6 is_stmt 0 view .LVU4054
 12447 0e44 9B2D     		cmp	r5, #155
 12448              	.LBB647:
2855:src/display.c **** 		}
 12449              		.loc 1 2855 5 view .LVU4055
 12450 0e46 15AF     		add	r7, sp, #84
 12451              	.LBE647:
2852:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12452              		.loc 1 2852 6 view .LVU4056
 12453 0e48 30D8     		bhi	.L956
2852:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12454              		.loc 1 2852 28 discriminator 1 view .LVU4057
 12455 0e4a 1823     		movs	r3, #24
 12456 0e4c 224A     		ldr	r2, .L1262+20
 12457 0e4e 03FB05F3 		mul	r3, r3, r5
 12458 0e52 D358     		ldr	r3, [r2, r3]
2852:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12459              		.loc 1 2852 23 discriminator 1 view .LVU4058
 12460 0e54 53B3     		cbz	r3, .L956
 12461              	.LBB648:
2853:src/display.c **** 		  update_speed(0);
 12462              		.loc 1 2853 5 is_stmt 1 view .LVU4059
 12463              	.LVL1443:
2854:src/display.c **** 		  fp(&r, &x);
 12464              		.loc 1 2854 20 view .LVU4060
2855:src/display.c **** 		}
 12465              		.loc 1 2855 5 view .LVU4061
 12466 0e56 0CA9     		add	r1, sp, #48
 12467 0e58 3846     		mov	r0, r7
 12468 0e5a 9847     		blx	r3
 12469              	.LVL1444:
 12470              	.L957:
2855:src/display.c **** 		}
 12471              		.loc 1 2855 5 is_stmt 0 view .LVU4062
 12472              	.LBE648:
 12473              	.LBE646:
2861:src/display.c **** 	      packed_from_number(&z, &r);
ARM GAS  /tmp/cchf4YwX.s 			page 353


 12474              		.loc 1 2861 8 is_stmt 1 discriminator 1 view .LVU4063
 12475 0e5c 1F4A     		ldr	r2, .L1262+24
 12476 0e5e 3946     		mov	r1, r7
 12477 0e60 3846     		mov	r0, r7
 12478 0e62 FFF7FEFF 		bl	decNumberNormalize
 12479              	.LVL1445:
2862:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12480              		.loc 1 2862 8 discriminator 1 view .LVU4064
 12481 0e66 3946     		mov	r1, r7
 12482 0e68 06A8     		add	r0, sp, #24
 12483 0e6a FFF7FEFF 		bl	packed_from_number
 12484              	.LVL1446:
2863:src/display.c **** 	      skip = 1;
 12485              		.loc 1 2863 8 discriminator 1 view .LVU4065
 12486 0e6e 0022     		movs	r2, #0
 12487 0e70 06A8     		add	r0, sp, #24
 12488 0e72 1146     		mov	r1, r2
 12489 0e74 FFF7FEFF 		bl	set_x
 12490              	.LVL1447:
2864:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12491              		.loc 1 2864 8 discriminator 1 view .LVU4066
2864:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12492              		.loc 1 2864 13 is_stmt 0 discriminator 1 view .LVU4067
 12493 0e78 0125     		movs	r5, #1
 12494              	.LBE645:
 12495 0e7a DEE4     		b	.L953
 12496              	.LVL1448:
 12497              	.L951:
2840:src/display.c **** 	    else
 12498              		.loc 1 2840 8 is_stmt 1 view .LVU4068
 12499 0e7c 1848     		ldr	r0, .L1262+28
 12500 0e7e 0021     		movs	r1, #0
 12501 0e80 FFF7FEFF 		bl	set_digits_string
 12502              	.LVL1449:
2843:src/display.c **** 	  } else if (State2.runmode) {
 12503              		.loc 1 2843 11 is_stmt 0 view .LVU4069
 12504 0e84 0125     		movs	r5, #1
 12505              	.LVL1450:
2840:src/display.c **** 	    else
 12506              		.loc 1 2840 8 view .LVU4070
 12507 0e86 D8E4     		b	.L953
 12508              	.LVL1451:
 12509              	.L1012:
2840:src/display.c **** 	    else
 12510              		.loc 1 2840 8 view .LVU4071
 12511              	.LBE723:
2961:src/display.c **** 	  set_dot(STO_annun);
 12512              		.loc 1 2961 6 is_stmt 1 view .LVU4072
 12513 0e88 1648     		ldr	r0, .L1262+32
 12514              	.LVL1452:
2961:src/display.c **** 	  set_dot(STO_annun);
 12515              		.loc 1 2961 6 is_stmt 0 view .LVU4073
 12516 0e8a FFF7FEFF 		bl	set_status
 12517              	.LVL1453:
2961:src/display.c **** 	  set_dot(STO_annun);
 12518              		.loc 1 2961 6 view .LVU4074
 12519 0e8e 42E7     		b	.L1013
ARM GAS  /tmp/cchf4YwX.s 			page 354


 12520              	.LVL1454:
 12521              	.L992:
 12522              	.LBB724:
 12523              	.LBB720:
2601:src/display.c **** 	      n -= 100;
 12524              		.loc 1 2601 8 is_stmt 1 view .LVU4075
2601:src/display.c **** 	      n -= 100;
 12525              		.loc 1 2601 14 is_stmt 0 view .LVU4076
 12526 0e90 3123     		movs	r3, #49
 12527 0e92 4370     		strb	r3, [r0, #1]
2602:src/display.c **** 	    }
 12528              		.loc 1 2602 8 is_stmt 1 view .LVU4077
2602:src/display.c **** 	    }
 12529              		.loc 1 2602 10 is_stmt 0 view .LVU4078
 12530 0e94 AAF1640A 		sub	r10, r10, #100
 12531              	.LVL1455:
2601:src/display.c **** 	      n -= 100;
 12532              		.loc 1 2601 11 view .LVU4079
 12533 0e98 0230     		adds	r0, r0, #2
 12534              	.LVL1456:
 12535              	.L991:
2605:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12536              		.loc 1 2605 4 is_stmt 1 view .LVU4080
2605:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12537              		.loc 1 2605 7 is_stmt 0 view .LVU4081
 12538 0e9a BAF1630F 		cmp	r10, #99
 12539 0e9e ABDD     		ble	.L993
2608:src/display.c **** 	  set_status(buf);
 12540              		.loc 1 2608 6 is_stmt 1 view .LVU4082
 12541              	.LVL1457:
2608:src/display.c **** 	  set_status(buf);
 12542              		.loc 1 2608 22 is_stmt 0 view .LVU4083
 12543 0ea0 114B     		ldr	r3, .L1262+36
 12544 0ea2 5344     		add	r3, r3, r10
2608:src/display.c **** 	  set_status(buf);
 12545              		.loc 1 2608 12 view .LVU4084
 12546 0ea4 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12547 0ea8 0370     		strb	r3, [r0]
 12548 0eaa A9E7     		b	.L995
 12549              	.LVL1458:
 12550              	.L956:
2608:src/display.c **** 	  set_status(buf);
 12551              		.loc 1 2608 12 view .LVU4085
 12552              	.LBE720:
 12553              	.LBE724:
 12554              	.LBB725:
 12555              	.LBB650:
 12556              	.LBB649:
2858:src/display.c **** 	      } else
 12557              		.loc 1 2858 5 is_stmt 1 view .LVU4086
 12558 0eac 3846     		mov	r0, r7
 12559 0eae FFF7FEFF 		bl	set_NaN
 12560              	.LVL1459:
 12561 0eb2 D3E7     		b	.L957
 12562              	.LVL1460:
 12563              	.L955:
2858:src/display.c **** 	      } else
ARM GAS  /tmp/cchf4YwX.s 			page 355


 12564              		.loc 1 2858 5 is_stmt 0 view .LVU4087
 12565              	.LBE649:
2860:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12566              		.loc 1 2860 3 is_stmt 1 view .LVU4088
 12567 0eb4 15AF     		add	r7, sp, #84
 12568 0eb6 0CAA     		add	r2, sp, #48
 12569 0eb8 05F07F01 		and	r1, r5, #127
 12570 0ebc 3846     		mov	r0, r7
 12571 0ebe FFF7FEFF 		bl	do_conv
 12572              	.LVL1461:
 12573 0ec2 CBE7     		b	.L957
 12574              	.L1263:
 12575              		.align	2
 12576              	.L1262:
 12577 0ec4 6C000000 		.word	.LC37
 12578 0ec8 64000000 		.word	.LC36
 12579 0ecc 00000000 		.word	main_ram
 12580 0ed0 A0000000 		.word	.LC42
 12581 0ed4 00000000 		.word	StackBase
 12582 0ed8 00000000 		.word	monfuncs
 12583 0edc 00000000 		.word	Ctx
 12584 0ee0 40000000 		.word	.LC32
 12585 0ee4 A8000000 		.word	.LC43
 12586 0ee8 BC000000 		.word	.LC30
 12587              	.LBE650:
 12588              	.LBE725:
 12589              		.cfi_endproc
 12590              	.LFE34:
 12592              		.section	.text.frozen_display,"ax",%progbits
 12593              		.align	1
 12594              		.p2align 2,,3
 12595              		.global	frozen_display
 12596              		.syntax unified
 12597              		.thumb
 12598              		.thumb_func
 12599              		.fpu fpv4-sp-d16
 12601              	frozen_display:
 12602              	.LFB35:
3432:src/display.c **** 	State2.disp_freeze = 0;
 12603              		.loc 1 3432 7 view -0
 12604              		.cfi_startproc
 12605              		@ args = 0, pretend = 0, frame = 0
 12606              		@ frame_needed = 0, uses_anonymous_args = 0
3433:src/display.c **** 	display();
 12607              		.loc 1 3433 2 view .LVU4090
3432:src/display.c **** 	State2.disp_freeze = 0;
 12608              		.loc 1 3432 7 is_stmt 0 view .LVU4091
 12609 0000 10B5     		push	{r4, lr}
 12610              		.cfi_def_cfa_offset 8
 12611              		.cfi_offset 4, -8
 12612              		.cfi_offset 14, -4
3433:src/display.c **** 	display();
 12613              		.loc 1 3433 21 view .LVU4092
 12614 0002 064C     		ldr	r4, .L1266
 12615 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12616 0006 6FF30413 		bfc	r3, #4, #1
 12617 000a E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/cchf4YwX.s 			page 356


3434:src/display.c **** 	State2.disp_freeze = 1;
 12618              		.loc 1 3434 2 is_stmt 1 view .LVU4093
 12619 000c FFF7FEFF 		bl	display
 12620              	.LVL1462:
3435:src/display.c ****       }
 12621              		.loc 1 3435 2 view .LVU4094
3435:src/display.c ****       }
 12622              		.loc 1 3435 21 is_stmt 0 view .LVU4095
 12623 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12624 0012 43F01003 		orr	r3, r3, #16
 12625 0016 E375     		strb	r3, [r4, #23]
3436:src/display.c **** 
 12626              		.loc 1 3436 7 view .LVU4096
 12627 0018 10BD     		pop	{r4, pc}
 12628              	.L1267:
 12629 001a 00BF     		.align	2
 12630              	.L1266:
 12631 001c 00000000 		.word	StateWhileOn
 12632              		.cfi_endproc
 12633              	.LFE35:
 12635              		.section	.text.message,"ax",%progbits
 12636              		.align	1
 12637              		.p2align 2,,3
 12638              		.global	message
 12639              		.syntax unified
 12640              		.thumb
 12641              		.thumb_func
 12642              		.fpu fpv4-sp-d16
 12644              	message:
 12645              	.LVL1463:
 12646              	.LFB46:
3653:src/display.c **** 	State2.disp_freeze = 0;
 12647              		.loc 1 3653 7 is_stmt 1 view -0
 12648              		.cfi_startproc
 12649              		@ args = 0, pretend = 0, frame = 0
 12650              		@ frame_needed = 0, uses_anonymous_args = 0
3654:src/display.c **** 	State2.disp_small = 0;
 12651              		.loc 1 3654 2 view .LVU4098
3655:src/display.c **** 	WasDataEntry = 0;
 12652              		.loc 1 3655 2 view .LVU4099
3655:src/display.c **** 	WasDataEntry = 0;
 12653              		.loc 1 3655 20 is_stmt 0 view .LVU4100
 12654 0000 174A     		ldr	r2, .L1278
3653:src/display.c **** 	State2.disp_freeze = 0;
 12655              		.loc 1 3653 7 view .LVU4101
 12656 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12657              		.cfi_def_cfa_offset 24
 12658              		.cfi_offset 3, -24
 12659              		.cfi_offset 4, -20
 12660              		.cfi_offset 5, -16
 12661              		.cfi_offset 6, -12
 12662              		.cfi_offset 7, -8
 12663              		.cfi_offset 14, -4
3655:src/display.c **** 	WasDataEntry = 0;
 12664              		.loc 1 3655 20 view .LVU4102
 12665 0004 D38A     		ldrh	r3, [r2, #22]
3656:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
ARM GAS  /tmp/cchf4YwX.s 			page 357


 12666              		.loc 1 3656 15 view .LVU4103
 12667 0006 174E     		ldr	r6, .L1278+4
3655:src/display.c **** 	WasDataEntry = 0;
 12668              		.loc 1 3655 20 view .LVU4104
 12669 0008 23F48453 		bic	r3, r3, #4224
3656:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12670              		.loc 1 3656 15 view .LVU4105
 12671 000c 0027     		movs	r7, #0
3655:src/display.c **** 	WasDataEntry = 0;
 12672              		.loc 1 3655 20 view .LVU4106
 12673 000e D382     		strh	r3, [r2, #22]	@ movhi
3656:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12674              		.loc 1 3656 2 is_stmt 1 view .LVU4107
3657:src/display.c **** 	  // Complete redraw necessary
 12675              		.loc 1 3657 5 is_stmt 0 view .LVU4108
 12676 0010 9B05     		lsls	r3, r3, #22
3653:src/display.c **** 	State2.disp_freeze = 0;
 12677              		.loc 1 3653 7 view .LVU4109
 12678 0012 0546     		mov	r5, r0
 12679 0014 0C46     		mov	r4, r1
3656:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12680              		.loc 1 3656 15 view .LVU4110
 12681 0016 3760     		str	r7, [r6]
3657:src/display.c **** 	  // Complete redraw necessary
 12682              		.loc 1 3657 2 is_stmt 1 view .LVU4111
3657:src/display.c **** 	  // Complete redraw necessary
 12683              		.loc 1 3657 5 is_stmt 0 view .LVU4112
 12684 0018 12D5     		bpl	.L1269
3657:src/display.c **** 	  // Complete redraw necessary
 12685              		.loc 1 3657 27 discriminator 1 view .LVU4113
 12686 001a D1B1     		cbz	r1, .L1277
 12687              	.L1270:
3664:src/display.c **** 	    ShowRPN = 0;
 12688              		.loc 1 3664 6 is_stmt 1 view .LVU4114
 12689 001c FFF7FEFF 		bl	reset_disp
 12690              	.LVL1464:
3665:src/display.c **** 	    set_annunciators();
 12691              		.loc 1 3665 6 view .LVU4115
3665:src/display.c **** 	    set_annunciators();
 12692              		.loc 1 3665 14 is_stmt 0 view .LVU4116
 12693 0020 114B     		ldr	r3, .L1278+8
 12694 0022 0026     		movs	r6, #0
 12695 0024 1E60     		str	r6, [r3]
3666:src/display.c **** 	    set_digits_string( str2, 0 );
 12696              		.loc 1 3666 6 is_stmt 1 view .LVU4117
 12697 0026 FFF7FEFF 		bl	set_annunciators
 12698              	.LVL1465:
3667:src/display.c **** 	  }
 12699              		.loc 1 3667 6 view .LVU4118
 12700 002a 3146     		mov	r1, r6
 12701 002c 2046     		mov	r0, r4
 12702 002e FFF7FEFF 		bl	set_digits_string
 12703              	.LVL1466:
3669:src/display.c **** 	  finish_display();// message
 12704              		.loc 1 3669 4 view .LVU4119
 12705 0032 2846     		mov	r0, r5
 12706 0034 FFF7FEFF 		bl	set_status
ARM GAS  /tmp/cchf4YwX.s 			page 358


 12707              	.LVL1467:
3670:src/display.c **** 	}
 12708              		.loc 1 3670 4 view .LVU4120
3672:src/display.c **** 
 12709              		.loc 1 3672 7 is_stmt 0 view .LVU4121
 12710 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12711              		.cfi_remember_state
 12712              		.cfi_restore 14
 12713              		.cfi_restore 7
 12714              		.cfi_restore 6
 12715              		.cfi_restore 5
 12716              		.cfi_restore 4
 12717              		.cfi_restore 3
 12718              		.cfi_def_cfa_offset 0
 12719              	.LVL1468:
3670:src/display.c **** 	}
 12720              		.loc 1 3670 4 view .LVU4122
 12721 003c FFF7FEBF 		b	finish_display
 12722              	.LVL1469:
 12723              	.L1269:
 12724              		.cfi_restore_state
3663:src/display.c **** 	    reset_disp();
 12725              		.loc 1 3663 4 is_stmt 1 view .LVU4123
3663:src/display.c **** 	    reset_disp();
 12726              		.loc 1 3663 7 is_stmt 0 view .LVU4124
 12727 0040 0029     		cmp	r1, #0
 12728 0042 EBD1     		bne	.L1270
3669:src/display.c **** 	  finish_display();// message
 12729              		.loc 1 3669 4 is_stmt 1 view .LVU4125
 12730 0044 2846     		mov	r0, r5
 12731              	.LVL1470:
3669:src/display.c **** 	  finish_display();// message
 12732              		.loc 1 3669 4 is_stmt 0 view .LVU4126
 12733 0046 FFF7FEFF 		bl	set_status
 12734              	.LVL1471:
3670:src/display.c **** 	}
 12735              		.loc 1 3670 4 is_stmt 1 view .LVU4127
3672:src/display.c **** 
 12736              		.loc 1 3672 7 is_stmt 0 view .LVU4128
 12737 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12738              		.cfi_remember_state
 12739              		.cfi_restore 14
 12740              		.cfi_restore 7
 12741              		.cfi_restore 6
 12742              		.cfi_restore 5
 12743              		.cfi_restore 4
 12744              		.cfi_restore 3
 12745              		.cfi_def_cfa_offset 0
 12746              	.LVL1472:
3670:src/display.c **** 	}
 12747              		.loc 1 3670 4 view .LVU4129
 12748 004e FFF7FEBF 		b	finish_display
 12749              	.LVL1473:
 12750              	.L1277:
 12751              		.cfi_restore_state
3659:src/display.c **** 	  display();
 12752              		.loc 1 3659 4 is_stmt 1 view .LVU4130
ARM GAS  /tmp/cchf4YwX.s 			page 359


3659:src/display.c **** 	  display();
 12753              		.loc 1 3659 12 is_stmt 0 view .LVU4131
 12754 0052 064B     		ldr	r3, .L1278+12
 12755 0054 1860     		str	r0, [r3]
3660:src/display.c **** 	}
 12756              		.loc 1 3660 4 is_stmt 1 view .LVU4132
3672:src/display.c **** 
 12757              		.loc 1 3672 7 is_stmt 0 view .LVU4133
 12758 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12759              		.cfi_restore 14
 12760              		.cfi_restore 7
 12761              		.cfi_restore 6
 12762              		.cfi_restore 5
 12763              		.cfi_restore 4
 12764              		.cfi_restore 3
 12765              		.cfi_def_cfa_offset 0
3660:src/display.c **** 	}
 12766              		.loc 1 3660 4 view .LVU4134
 12767 005a FFF7FEBF 		b	display
 12768              	.LVL1474:
 12769              	.L1279:
3660:src/display.c **** 	}
 12770              		.loc 1 3660 4 view .LVU4135
 12771 005e 00BF     		.align	2
 12772              	.L1278:
 12773 0060 00000000 		.word	StateWhileOn
 12774 0064 00000000 		.word	WasDataEntry
 12775 0068 00000000 		.word	ShowRPN
 12776 006c 00000000 		.word	DispMsg
 12777              		.cfi_endproc
 12778              	.LFE46:
 12780              		.section	.text.error_message,"ax",%progbits
 12781              		.align	1
 12782              		.p2align 2,,3
 12783              		.global	error_message
 12784              		.syntax unified
 12785              		.thumb
 12786              		.thumb_func
 12787              		.fpu fpv4-sp-d16
 12789              	error_message:
 12790              	.LVL1475:
 12791              	.LFB1:
 134:src/display.c **** #define MSG1(top) top "\0"
 12792              		.loc 1 134 1 is_stmt 1 view -0
 12793              		.cfi_startproc
 12794              		@ args = 0, pretend = 0, frame = 0
 12795              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/display.c ****     {
 12796              		.loc 1 139 3 view .LVU4137
 200:src/display.c ****     {
 12797              		.loc 1 200 3 view .LVU4138
 238:src/display.c ****     const char *p = error_table[e];
 12798              		.loc 1 238 3 view .LVU4139
 134:src/display.c **** #define MSG1(top) top "\0"
 12799              		.loc 1 134 1 is_stmt 0 view .LVU4140
 12800 0000 38B5     		push	{r3, r4, r5, lr}
 12801              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cchf4YwX.s 			page 360


 12802              		.cfi_offset 3, -16
 12803              		.cfi_offset 4, -12
 12804              		.cfi_offset 5, -8
 12805              		.cfi_offset 14, -4
 238:src/display.c ****     const char *p = error_table[e];
 12806              		.loc 1 238 21 view .LVU4141
 12807 0002 1A4B     		ldr	r3, .L1291
 12808 0004 1B68     		ldr	r3, [r3]
 12809 0006 0343     		orrs	r3, r0, r3
 12810 0008 2CD0     		beq	.L1280
 12811              	.LBB726:
 239:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12812              		.loc 1 239 5 is_stmt 1 view .LVU4142
 239:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12813              		.loc 1 239 17 is_stmt 0 view .LVU4143
 12814 000a 194B     		ldr	r3, .L1291+4
 12815 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 12816              	.LVL1476:
 240:src/display.c ****     if (*q == '\0')
 12817              		.loc 1 240 5 is_stmt 1 view .LVU4144
 12818 0010 0446     		mov	r4, r0
 240:src/display.c ****     if (*q == '\0')
 12819              		.loc 1 240 21 is_stmt 0 view .LVU4145
 12820 0012 0021     		movs	r1, #0
 12821 0014 2846     		mov	r0, r5
 12822              	.LVL1477:
 240:src/display.c ****     if (*q == '\0')
 12823              		.loc 1 240 21 view .LVU4146
 12824 0016 FFF7FEFF 		bl	find_char
 12825              	.LVL1478:
 241:src/display.c ****       q = S7_ERROR;
 12826              		.loc 1 241 5 is_stmt 1 view .LVU4147
 241:src/display.c ****       q = S7_ERROR;
 12827              		.loc 1 241 9 is_stmt 0 view .LVU4148
 12828 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 241:src/display.c ****       q = S7_ERROR;
 12829              		.loc 1 241 8 view .LVU4149
 12830 001c 9BB9     		cbnz	r3, .L1289
 242:src/display.c ****     if (*q == 'X') {
 12831              		.loc 1 242 9 view .LVU4150
 12832 001e 1549     		ldr	r1, .L1291+8
 12833              	.L1282:
 12834              	.LVL1479:
 252:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12835              		.loc 1 252 7 is_stmt 1 view .LVU4151
 12836 0020 2846     		mov	r0, r5
 12837 0022 FFF7FEFF 		bl	message
 12838              	.LVL1480:
 253:src/display.c **** #ifndef REALBUILD
 12839              		.loc 1 253 7 view .LVU4152
 253:src/display.c **** #ifndef REALBUILD
 12840              		.loc 1 253 26 is_stmt 0 view .LVU4153
 12841 0026 144B     		ldr	r3, .L1291+12
 255:src/display.c **** #endif
 12842              		.loc 1 255 7 view .LVU4154
 12843 0028 1449     		ldr	r1, .L1291+16
 253:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/cchf4YwX.s 			page 361


 12844              		.loc 1 253 26 view .LVU4155
 12845 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 255:src/display.c **** #endif
 12846              		.loc 1 255 7 view .LVU4156
 12847 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12848 0030 1348     		ldr	r0, .L1291+20
 253:src/display.c **** #ifndef REALBUILD
 12849              		.loc 1 253 31 view .LVU4157
 12850 0032 003C     		subs	r4, r4, #0
 253:src/display.c **** #ifndef REALBUILD
 12851              		.loc 1 253 31 view .LVU4158
 12852 0034 18BF     		it	ne
 12853 0036 0124     		movne	r4, #1
 12854              	.LVL1481:
 253:src/display.c **** #ifndef REALBUILD
 12855              		.loc 1 253 26 view .LVU4159
 12856 0038 64F30412 		bfi	r2, r4, #4, #1
 12857 003c DA75     		strb	r2, [r3, #23]
 255:src/display.c **** #endif
 12858              		.loc 1 255 7 is_stmt 1 view .LVU4160
 12859              	.LBE726:
 280:src/display.c **** 
 12860              		.loc 1 280 1 is_stmt 0 view .LVU4161
 12861 003e BDE83840 		pop	{r3, r4, r5, lr}
 12862              		.cfi_remember_state
 12863              		.cfi_restore 14
 12864              		.cfi_restore 5
 12865              		.cfi_restore 4
 12866              		.cfi_restore 3
 12867              		.cfi_def_cfa_offset 0
 12868              	.LVL1482:
 12869              	.LBB733:
 255:src/display.c **** #endif
 12870              		.loc 1 255 7 view .LVU4162
 12871 0042 FFF7FEBF 		b	scopy
 12872              	.LVL1483:
 12873              	.L1289:
 12874              		.cfi_restore_state
 243:src/display.c ****       DispMsg = p;
 12875              		.loc 1 243 5 is_stmt 1 view .LVU4163
 243:src/display.c ****       DispMsg = p;
 12876              		.loc 1 243 8 is_stmt 0 view .LVU4164
 12877 0046 582B     		cmp	r3, #88
 12878 0048 0DD1     		bne	.L1290
 244:src/display.c ****       frozen_display();
 12879              		.loc 1 244 7 is_stmt 1 view .LVU4165
 12880              	.LBB727:
 12881              	.LBB728:
3433:src/display.c **** 	display();
 12882              		.loc 1 3433 21 is_stmt 0 view .LVU4166
 12883 004a 0B4C     		ldr	r4, .L1291+12
 12884              	.LVL1484:
3433:src/display.c **** 	display();
 12885              		.loc 1 3433 21 view .LVU4167
 12886              	.LBE728:
 12887              	.LBE727:
 244:src/display.c ****       frozen_display();
ARM GAS  /tmp/cchf4YwX.s 			page 362


 12888              		.loc 1 244 15 view .LVU4168
 12889 004c 0D4A     		ldr	r2, .L1291+24
 12890              	.LBB731:
 12891              	.LBB729:
3433:src/display.c **** 	display();
 12892              		.loc 1 3433 21 view .LVU4169
 12893 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12894              	.LBE729:
 12895              	.LBE731:
 244:src/display.c ****       frozen_display();
 12896              		.loc 1 244 15 view .LVU4170
 12897 0050 1560     		str	r5, [r2]
 245:src/display.c ****     }
 12898              		.loc 1 245 7 is_stmt 1 view .LVU4171
 12899              	.LBB732:
 12900              	.LBI727:
3431:src/display.c ****       {
 12901              		.loc 1 3431 12 view .LVU4172
 12902              	.LBB730:
3433:src/display.c **** 	display();
 12903              		.loc 1 3433 2 view .LVU4173
3433:src/display.c **** 	display();
 12904              		.loc 1 3433 21 is_stmt 0 view .LVU4174
 12905 0052 6FF30413 		bfc	r3, #4, #1
 12906 0056 E375     		strb	r3, [r4, #23]
3434:src/display.c **** 	State2.disp_freeze = 1;
 12907              		.loc 1 3434 2 is_stmt 1 view .LVU4175
 12908 0058 FFF7FEFF 		bl	display
 12909              	.LVL1485:
3435:src/display.c ****       }
 12910              		.loc 1 3435 2 view .LVU4176
3435:src/display.c ****       }
 12911              		.loc 1 3435 21 is_stmt 0 view .LVU4177
 12912 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12913 005e 43F01003 		orr	r3, r3, #16
 12914 0062 E375     		strb	r3, [r4, #23]
 12915              	.LVL1486:
 12916              	.L1280:
3435:src/display.c ****       }
 12917              		.loc 1 3435 21 view .LVU4178
 12918              	.LBE730:
 12919              	.LBE732:
 12920              	.LBE733:
 280:src/display.c **** 
 12921              		.loc 1 280 1 view .LVU4179
 12922 0064 38BD     		pop	{r3, r4, r5, pc}
 12923              	.LVL1487:
 12924              	.L1290:
 12925              	.LBB734:
 240:src/display.c ****     if (*q == '\0')
 12926              		.loc 1 240 17 view .LVU4180
 12927 0066 411C     		adds	r1, r0, #1
 12928 0068 DAE7     		b	.L1282
 12929              	.L1292:
 12930 006a 00BF     		.align	2
 12931              	.L1291:
 12932 006c 00000000 		.word	Running
ARM GAS  /tmp/cchf4YwX.s 			page 363


 12933 0070 00000000 		.word	.LANCHOR27
 12934 0074 00000000 		.word	.LANCHOR26
 12935 0078 00000000 		.word	StateWhileOn
 12936 007c 00000000 		.word	.LANCHOR28
 12937 0080 00000000 		.word	LastDisplayedNumber
 12938 0084 00000000 		.word	DispMsg
 12939              	.LBE734:
 12940              		.cfi_endproc
 12941              	.LFE1:
 12943              		.section	.rodata.str1.4,"aMS",%progbits,1
 12944              		.align	2
 12945              	.LC45:
 12946 0000 06316306 		.ascii	"\0061c\006\006\000"
 12946      0600
 12947 0006 0000     		.align	2
 12948              	.LC46:
 12949 0008 756E0600 		.ascii	"un\006\000"
 12950              		.align	2
 12951              	.LC47:
 12952 000c 736D00   		.ascii	"sm\000"
 12953              		.set	CSWTCH.364,CSWTCH.362
 12954 000f 00       		.align	2
 12955              	.LC48:
 12956 0010 20502072 		.ascii	" P r o g r a m \000"
 12956      206F2067 
 12956      20722061 
 12956      206D2000 
 12957              		.align	2
 12958              	.LC49:
 12959 0020 206F2072 		.ascii	" o r   d a t e \000"
 12959      20202064 
 12959      20612074 
 12959      20652000 
 12960              		.align	2
 12961              	.LC50:
 12962 0030 204F2070 		.ascii	" O p - c o d e \000"
 12962      202D2063 
 12962      206F2064 
 12962      20652000 
 12963              		.align	2
 12964              	.LC51:
 12965 0040 204C2061 		.ascii	" L a b e l \000"
 12965      20622065 
 12965      206C2000 
 12966              		.align	2
 12967              	.LC52:
 12968 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12968      20652072 
 12968      20612074 
 12968      2069206F 
 12968      206E2000 
 12969              		.align	2
 12970              	.LC53:
 12971 0060 20462075 		.ascii	" F u l l \000"
 12971      206C206C 
 12971      2000
 12972 006a 0000     		.align	2
ARM GAS  /tmp/cchf4YwX.s 			page 364


 12973              	.LC54:
 12974 006c 2043206C 		.ascii	" C l a s h \000"
 12974      20612073 
 12974      20682000 
 12975              		.align	2
 12976              	.LC55:
 12977 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12977      206F2020 
 12977      2073206D 
 12977      2061206C 
 12977      206C2000 
 12978              		.align	2
 12979              	.LC56:
 12980 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12980      20742061 
 12980      20202070 
 12980      206F2069 
 12980      206E2074 
 12981              		.align	2
 12982              	.LC57:
 12983 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12983      20722061 
 12983      206D2065 
 12983      20742065 
 12983      20722000 
 12984              		.align	2
 12985              	.LC58:
 12986 00b8 20442061 		.ascii	" D a t a \000"
 12986      20742061 
 12986      2000
 12987 00c2 0000     		.align	2
 12988              	.LC59:
 12989 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12989      206F2074 
 12989      20652063 
 12989      20742065 
 12989      20642000 
 12990              		.align	2
 12991              	.LC60:
 12992 00d8 2046206F 		.ascii	" F o u n d \000"
 12992      2075206E 
 12992      20642000 
 12993              		.align	2
 12994              	.LC61:
 12995 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12995      2073206D 
 12995      20612074 
 12995      20632068 
 12995      2000
 12996 00f6 0000     		.align	2
 12997              	.LC62:
 12998 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12998      20732074 
 12998      2061206C 
 12998      206C2065 
 12998      20642000 
 12999              		.global	DIGITS
ARM GAS  /tmp/cchf4YwX.s 			page 365


 13000              		.comm	IoAnnunciator,4,4
 13001              		.comm	IntMaxWindow,4,4
 13002              		.comm	JustDisplayed,4,4
 13003              		.comm	ShowRPN,4,4
 13004              		.comm	forceDispPlot,1,1
 13005              		.comm	LastDisplayedExponent,5,4
 13006              		.comm	LastDisplayedNumber,26,4
 13007              		.comm	LastDisplayedText,31,4
 13008              		.global	no_status_top
 13009              		.comm	DispPlot,2,2
 13010              		.comm	DispMsg,4,4
 13011              		.global	SvnRevision
 13012              		.section	.rodata
 13013              		.align	2
 13014              		.set	.LANCHOR17,. + 0
 13015              	.LC20:
 13016 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 13016      22002E00 
 13016      00
 13017 0009 000000   		.space	3
 13018              	.LC24:
 13019 000c 33344306 		.ascii	"34C\0063.3\006\006\000"
 13019      332E3306 
 13019      0600
 13020 0016 00000000 		.space	4
 13021 001a 0000     		.space	2
 13022              	.LC63:
 13023 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 13023      696E6700 
 13023      50726F47 
 13023      72614D6D 
 13023      00
 13024 002d 000000   		.space	3
 13025              	.LC64:
 13026 0030 446F6D61 		.ascii	"Domain\000\000"
 13026      696E0000 
 13027              	.LC65:
 13028 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 13028      74696D65 
 13028      006F7220 
 13028      64417445 
 13028      00
 13029 0049 000000   		.space	3
 13030              	.LC66:
 13031 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 13031      66696E65 
 13031      64004F70 
 13031      2D434F64 
 13031      4500
 13032 005e 0000     		.space	2
 13033              	.LC67:
 13034 0060 2B9F0000 		.ascii	"+\237\000\000"
 13035              	.LC68:
 13036 0064 2D9F0000 		.ascii	"-\237\000\000"
 13037              	.LC69:
 13038 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 13038      75636800 
ARM GAS  /tmp/cchf4YwX.s 			page 366


 13038      4C416245 
 13038      4C00
 13039 0076 0000     		.space	2
 13040              	.LC70:
 13041 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 13041      67616C00 
 13041      4F504572 
 13041      4174696F 
 13041      6E00
 13042 008a 0000     		.space	2
 13043              	.LC71:
 13044 008c 4F757420 		.ascii	"Out of range\000\000"
 13044      6F662072 
 13044      616E6765 
 13044      0000
 13045 009a 0000     		.space	2
 13046              	.LC72:
 13047 009c 42616420 		.ascii	"Bad digit\000\000"
 13047      64696769 
 13047      740000
 13048 00a7 00       		.space	1
 13049              	.LC73:
 13050 00a8 546F6F20 		.ascii	"Too long\000\000"
 13050      6C6F6E67 
 13050      0000
 13051 00b2 0000     		.space	2
 13052              	.LC74:
 13053 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 13053      69730046 
 13053      754C4C00 
 13054              	.LC75:
 13055 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 13055      6B00434C 
 13055      41534800 
 13056              	.LC76:
 13057 00cc 42616420 		.ascii	"Bad mode\000\000"
 13057      6D6F6465 
 13057      0000
 13058 00d6 0000     		.space	2
 13059              	.LC77:
 13060 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 13060      06060673 
 13060      697A6500 
 13060      746F6F20 
 13060      534D6D41 
 13061 00ef 00       		.space	1
 13062              	.LC78:
 13063 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 13063      66657700 
 13063      64417441 
 13063      20506F69 
 13063      6E745300 
 13064              	.LC79:
 13065 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 13065      6C696400 
 13065      50617261 
 13065      4D6D4574 
ARM GAS  /tmp/cchf4YwX.s 			page 367


 13065      457200
 13066 0117 00       		.space	1
 13067              	.LC80:
 13068 0118 492F4F00 		.ascii	"I/O\000\000"
 13068      00
 13069 011d 000000   		.space	3
 13070              	.LC81:
 13071 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 13071      6C696400 
 13071      64417441 
 13071      00
 13072 012d 000000   		.space	3
 13073              	.LC82:
 13074 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 13074      65005072 
 13074      6F744563 
 13074      74456400 
 13075              	.LC83:
 13076 0140 4E6F2072 		.ascii	"No root\000Found\000"
 13076      6F6F7400 
 13076      466F756E 
 13076      6400
 13077 014e 0000     		.space	2
 13078              	.LC84:
 13079 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 13079      6978004D 
 13079      6D49534D 
 13079      6D417443 
 13079      4800
 13080 0162 0000     		.space	2
 13081              	.LC85:
 13082 0164 53696E67 		.ascii	"Singular\000\000"
 13082      756C6172 
 13082      0000
 13083 016e 0000     		.space	2
 13084              	.LC86:
 13085 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 13085      68206973 
 13085      0046754C 
 13085      4C00
 13086 017e 0000     		.space	2
 13087              	.LC87:
 13088 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 13088      72797374 
 13088      616C0049 
 13088      6E537461 
 13088      4C4C4564 
 13089 0195 000000   		.space	3
 13090              	.LC88:
 13091 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 13091      6576656E 
 13091      20726567 
 13091      00666F72 
 13091      20436F4D 
 13092 01b2 0000     		.space	2
 13093              	.LC89:
 13094 01b4 04201D00 		.ascii	"\004 \035\000X\000"
ARM GAS  /tmp/cchf4YwX.s 			page 368


 13094      5800
 13095              		.section	.bss.DecimalMode,"aw",%nobits
 13096              		.set	.LANCHOR1,. + 0
 13099              	DecimalMode:
 13100 0000 00       		.space	1
 13101              		.section	.bss.SeparatorMode,"aw",%nobits
 13102              		.set	.LANCHOR0,. + 0
 13105              	SeparatorMode:
 13106 0000 00       		.space	1
 13107              		.section	.bss.no_status_top,"aw",%nobits
 13108              		.align	1
 13109              		.set	.LANCHOR18,. + 0
 13112              	no_status_top:
 13113 0000 0000     		.space	2
 13114              		.section	.rodata.CSWTCH.362,"a"
 13115              		.align	2
 13116              		.set	.LANCHOR11,. + 0
 13119              	CSWTCH.362:
 13120 0000 02000000 		.word	2
 13121 0004 08000000 		.word	8
 13122 0008 0A000000 		.word	10
 13123 000c 10000000 		.word	16
 13124              		.section	.rodata.CSWTCH.389,"a"
 13125              		.align	2
 13126              		.set	.LANCHOR16,. + 0
 13129              	CSWTCH.389:
 13130 0000 00000000 		.word	.LC45
 13131 0004 08000000 		.word	.LC46
 13132 0008 0C000000 		.word	.LC47
 13133              		.section	.rodata.DIGITS,"a"
 13134              		.align	2
 13135              		.set	.LANCHOR12,. + 0
 13138              	DIGITS:
 13139 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 13139      34353637 
 13139      38394142 
 13139      43444546 
 13139      00
 13140              		.section	.rodata.S7_ERROR,"a"
 13141              		.align	2
 13142              		.set	.LANCHOR26,. + 0
 13145              	S7_ERROR:
 13146 0000 4572726F 		.ascii	"Error\000"
 13146      7200
 13147              		.section	.rodata.S7_INF,"a"
 13148              		.align	2
 13149              		.set	.LANCHOR5,. + 0
 13152              	S7_INF:
 13153 0000 496E6669 		.ascii	"Infinity\000"
 13153      6E697479 
 13153      00
 13154              		.section	.rodata.S7_INF_Text,"a"
 13155              		.align	2
 13156              		.set	.LANCHOR7,. + 0
 13159              	S7_INF_Text:
 13160 0000 2049206E 		.ascii	" I n f i n i t y \000"
 13160      20662069 
ARM GAS  /tmp/cchf4YwX.s 			page 369


 13160      206E2069 
 13160      20742079 
 13160      2000
 13161              		.section	.rodata.S7_NEG_INF_Text,"a"
 13162              		.align	2
 13163              		.set	.LANCHOR6,. + 0
 13166              	S7_NEG_INF_Text:
 13167 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 13167      20662069 
 13167      206E2069 
 13167      20742079 
 13167      2000
 13168              		.section	.rodata.S7_NaN,"a"
 13169              		.align	2
 13170              		.set	.LANCHOR3,. + 0
 13173              	S7_NaN:
 13174 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 13174      6E754D6D 
 13174      45726963 
 13174      00
 13175              		.section	.rodata.S7_NaN_Text,"a"
 13176              		.align	2
 13177              		.set	.LANCHOR4,. + 0
 13180              	S7_NaN_Text:
 13181 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 13181      20742020 
 13181      206E2075 
 13181      206D2065 
 13181      20722069 
 13182              		.section	.rodata.S7_STEP,"a"
 13183              		.align	2
 13184              		.set	.LANCHOR25,. + 0
 13187              	S7_STEP:
 13188 0000 53744550 		.ascii	"StEP \000"
 13188      2000
 13189              		.section	.rodata.S7_STEP_ShortText,"a"
 13190              		.align	2
 13191              		.set	.LANCHOR19,. + 0
 13194              	S7_STEP_ShortText:
 13195 0000 53544550 		.ascii	"STEP\000"
 13195      00
 13196              		.section	.rodata.S7_fract_EQ,"a"
 13197              		.align	2
 13198              		.set	.LANCHOR9,. + 0
 13201              	S7_fract_EQ:
 13202 0000 203D2000 		.ascii	" = \000"
 13203              		.section	.rodata.S7_fract_GT,"a"
 13204              		.align	2
 13205              		.set	.LANCHOR10,. + 0
 13208              	S7_fract_GT:
 13209 0000 20477400 		.ascii	" Gt\000"
 13210              		.section	.rodata.S7_fract_LT,"a"
 13211              		.align	2
 13212              		.set	.LANCHOR8,. + 0
 13215              	S7_fract_LT:
 13216 0000 204C7400 		.ascii	" Lt\000"
 13217              		.section	.rodata.S_SURE,"a"
ARM GAS  /tmp/cchf4YwX.s 			page 370


 13218              		.align	2
 13219              		.set	.LANCHOR21,. + 0
 13222              	S_SURE:
 13223 0000 53757265 		.ascii	"Sure?\000"
 13223      3F00
 13224              		.section	.rodata.SvnRevision,"a"
 13225              		.align	2
 13226              		.set	.LANCHOR20,. + 0
 13229              	SvnRevision:
 13230 0000 30202020 		.ascii	"0   "
 13231              		.section	.rodata.digtbl,"a"
 13232              		.align	2
 13233              		.set	.LANCHOR2,. + 0
 13236              	digtbl:
 13237 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 13237      02421252 
 13237      2D000000 
 13237      00000000 
 13237      00
 13238 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 13238      00000017 
 13238      01000000 
 13238      00
 13239 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 13239      28000000 
 13239      0020664B 
 13239      00000010 
 13240 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 13240      5E5B3973 
 13240      77497F7B 
 13240      00000612 
 13240      0300787D 
 13241 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 13241      673D240F 
 13241      75266C6D 
 13241      6F7C7914 
 13241      73362F00 
 13242 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13242      161F7674 
 13242      6735040F 
 13242      75266915 
 13242      177C7914 
 13243 0076 000F003B 		.ascii	"\000\017\000;"
 13244              		.section	.rodata.error_table.8570,"a"
 13245              		.align	2
 13246              		.set	.LANCHOR27,. + 0
 13249              	error_table.8570:
 13250 0000 1C000000 		.word	.LC63
 13251 0004 30000000 		.word	.LC64
 13252 0008 38000000 		.word	.LC65
 13253 000c 4C000000 		.word	.LC66
 13254 0010 60000000 		.word	.LC67
 13255 0014 64000000 		.word	.LC68
 13256 0018 68000000 		.word	.LC69
 13257 001c 78000000 		.word	.LC70
 13258 0020 8C000000 		.word	.LC71
 13259 0024 9C000000 		.word	.LC72
ARM GAS  /tmp/cchf4YwX.s 			page 371


 13260 0028 A8000000 		.word	.LC73
 13261 002c B4000000 		.word	.LC74
 13262 0030 C0000000 		.word	.LC75
 13263 0034 CC000000 		.word	.LC76
 13264 0038 D8000000 		.word	.LC77
 13265 003c F0000000 		.word	.LC78
 13266 0040 04010000 		.word	.LC79
 13267 0044 18010000 		.word	.LC80
 13268 0048 20010000 		.word	.LC81
 13269 004c 30010000 		.word	.LC82
 13270 0050 40010000 		.word	.LC83
 13271 0054 50010000 		.word	.LC84
 13272 0058 64010000 		.word	.LC85
 13273 005c 70010000 		.word	.LC86
 13274 0060 80010000 		.word	.LC87
 13275 0064 98010000 		.word	.LC88
 13276 0068 B4010000 		.word	.LC89
 13277              		.section	.rodata.error_table_text.8571,"a"
 13278              		.align	2
 13279              		.set	.LANCHOR28,. + 0
 13282              	error_table_text.8571:
 13283 0000 10000000 		.word	.LC48
 13284 0004 A8000000 		.word	.LC43
 13285 0008 20000000 		.word	.LC49
 13286 000c 30000000 		.word	.LC50
 13287 0010 A8000000 		.word	.LC43
 13288 0014 A8000000 		.word	.LC43
 13289 0018 40000000 		.word	.LC51
 13290 001c 4C000000 		.word	.LC52
 13291 0020 A8000000 		.word	.LC43
 13292 0024 A8000000 		.word	.LC43
 13293 0028 A8000000 		.word	.LC43
 13294 002c 60000000 		.word	.LC53
 13295 0030 6C000000 		.word	.LC54
 13296 0034 A8000000 		.word	.LC43
 13297 0038 78000000 		.word	.LC55
 13298 003c 8C000000 		.word	.LC56
 13299 0040 A4000000 		.word	.LC57
 13300 0044 A8000000 		.word	.LC43
 13301 0048 B8000000 		.word	.LC58
 13302 004c C4000000 		.word	.LC59
 13303 0050 D8000000 		.word	.LC60
 13304 0054 E4000000 		.word	.LC61
 13305 0058 A8000000 		.word	.LC43
 13306 005c 60000000 		.word	.LC53
 13307 0060 F8000000 		.word	.LC62
 13308 0064 A8000000 		.word	.LC43
 13309 0068 A8000000 		.word	.LC43
 13310              		.section	.rodata.libname,"a"
 13311              		.align	2
 13312              		.set	.LANCHOR22,. + 0
 13315              	libname:
 13316 0000 72414D6D 		.ascii	"rAMm\000"
 13316      00
 13317 0005 4C696220 		.ascii	"Lib \000"
 13317      00
 13318 000a 42757020 		.ascii	"Bup \000"
ARM GAS  /tmp/cchf4YwX.s 			page 372


 13318      00
 13319 000f 726F4D6D 		.ascii	"roMm\000"
 13319      00
 13320              		.section	.rodata.libname_shorttext,"a"
 13321              		.align	2
 13322              		.set	.LANCHOR24,. + 0
 13325              	libname_shorttext:
 13326 0000 52616D00 		.ascii	"Ram\000"
 13327 0004 00       		.space	1
 13328 0005 4C696200 		.ascii	"Lib\000"
 13329 0009 00       		.space	1
 13330 000a 42757000 		.ascii	"Bup\000"
 13331 000e 00       		.space	1
 13332 000f 526F6D00 		.ascii	"Rom\000"
 13333 0013 00       		.space	1
 13334              		.section	.rodata.libname_text,"a"
 13335              		.align	2
 13336              		.set	.LANCHOR23,. + 0
 13339              	libname_text:
 13340 0000 20522061 		.ascii	" R a m \000"
 13340      206D2000 
 13341 0008 0000     		.space	2
 13342 000a 204C2069 		.ascii	" L i b \000"
 13342      20622000 
 13343 0012 0000     		.space	2
 13344 0014 20422075 		.ascii	" B u p \000"
 13344      20702000 
 13345 001c 0000     		.space	2
 13346 001e 2052206F 		.ascii	" R o m \000"
 13346      206D2000 
 13347 0026 0000     		.space	2
 13348              		.section	.rodata.shift_chars.8674,"a"
 13349              		.align	2
 13350              		.set	.LANCHOR15,. + 0
 13353              	shift_chars.8674:
 13354 0000 20111213 		.ascii	" \021\022\023"
 13355              		.section	.rodata.small_dots.8875,"a"
 13356              		.align	2
 13357              		.set	.LANCHOR14,. + 0
 13360              	small_dots.8875:
 13361 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13361      07E12C06 
 13361      07E12C06 
 13361      06
 13362              		.section	.rodata.small_minus.8874,"a"
 13363              		.align	2
 13364              		.set	.LANCHOR13,. + 0
 13367              	small_minus.8874:
 13368 0000 07C22D06 		.ascii	"\007\302-\006"
 13369              		.text
 13370              	.Letext0:
 13371              		.file 2 "src/decNumber/decContext.h"
 13372              		.file 3 "src/decNumber/decNumber.h"
 13373              		.file 4 "src/decNumber/decimal64.h"
 13374              		.file 5 "src/decNumber/decimal128.h"
 13375              		.file 6 "src/xeq.h"
 13376              		.file 7 "src/data.h"
ARM GAS  /tmp/cchf4YwX.s 			page 373


 13377              		.file 8 "src/storage.h"
 13378              		.file 9 "src/display.h"
 13379              		.file 10 "src/consts.h"
 13380              		.file 11 "src/stats.h"
 13381              		.file 12 "src/revision.h"
 13382              		.file 13 "src/charset7.h"
 13383              		.file 14 "src/lcd.h"
 13384              		.file 15 "src/decn.h"
 13385              		.file 16 "src/alpha.h"
 13386              		.file 17 "src/int.h"
ARM GAS  /tmp/cchf4YwX.s 			page 374


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/cchf4YwX.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/cchf4YwX.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/cchf4YwX.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/cchf4YwX.s:126    .text.set_dig:0000000000000000 $t
     /tmp/cchf4YwX.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/cchf4YwX.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/cchf4YwX.s:262    .text.hms_render:0000000000000000 $t
     /tmp/cchf4YwX.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/cchf4YwX.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/cchf4YwX.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/cchf4YwX.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/cchf4YwX.s:596    .text.hms_step:0000000000000000 $t
     /tmp/cchf4YwX.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/cchf4YwX.s:664    .text.hms_step:0000000000000034 $d
     /tmp/cchf4YwX.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/cchf4YwX.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/cchf4YwX.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/cchf4YwX.s:1155   .text.set_exp:0000000000000000 $t
     /tmp/cchf4YwX.s:1162   .text.set_exp:0000000000000000 set_exp
     /tmp/cchf4YwX.s:1467   .text.set_exp:0000000000000118 $d
     /tmp/cchf4YwX.s:1474   .text.set_separator.part.0:0000000000000000 $t
     /tmp/cchf4YwX.s:1481   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/cchf4YwX.s:1549   .text.set_separator.part.0:0000000000000038 $d
     /tmp/cchf4YwX.s:1555   .text.set_decimal:0000000000000000 $t
     /tmp/cchf4YwX.s:1562   .text.set_decimal:0000000000000000 set_decimal
     /tmp/cchf4YwX.s:1658   .text.set_decimal:000000000000004c $d
     /tmp/cchf4YwX.s:1666   .text.set_digits_string:0000000000000000 $t
     /tmp/cchf4YwX.s:1673   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/cchf4YwX.s:1767   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/cchf4YwX.s:1771   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/cchf4YwX.s:1778   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/cchf4YwX.s:1925   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/cchf4YwX.s:1937   .text.set_x_hms:0000000000000000 $t
     /tmp/cchf4YwX.s:1944   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/cchf4YwX.s:2445   .text.set_x_hms:00000000000001b8 $d
     /tmp/cchf4YwX.s:2455   .text.set_x_fract:0000000000000000 $t
     /tmp/cchf4YwX.s:2462   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/cchf4YwX.s:2898   .text.set_x_fract:0000000000000198 $d
     /tmp/cchf4YwX.s:2913   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/cchf4YwX.s:2914   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/cchf4YwX.s:2917   .text.carry_overflow:0000000000000000 $t
     /tmp/cchf4YwX.s:2924   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/cchf4YwX.s:3061   .text.carry_overflow:0000000000000070 $d
     /tmp/cchf4YwX.s:3071   .text.set_int_x:0000000000000000 $t
     /tmp/cchf4YwX.s:3078   .text.set_int_x:0000000000000000 set_int_x
     /tmp/cchf4YwX.s:3836   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.362:0000000000000000 CSWTCH.364
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/cchf4YwX.s:3848   .text.set_int_x:0000000000000360 $t
     /tmp/cchf4YwX.s:3955   .text.set_int_x:00000000000003c0 $d
     /tmp/cchf4YwX.s:3962   .text.set_annunciators:0000000000000000 $t
ARM GAS  /tmp/cchf4YwX.s 			page 375


     /tmp/cchf4YwX.s:3969   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/cchf4YwX.s:4381   .text.set_annunciators:00000000000000f0 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/cchf4YwX.s:4393   .text.getdig:0000000000000000 $t
     /tmp/cchf4YwX.s:4401   .text.getdig:0000000000000000 getdig
     /tmp/cchf4YwX.s:4421   .text.getdig:0000000000000008 $d
     /tmp/cchf4YwX.s:4426   .text.dot:0000000000000000 $t
     /tmp/cchf4YwX.s:4434   .text.dot:0000000000000000 dot
     /tmp/cchf4YwX.s:4457   .text.std_round_fix:0000000000000000 $t
     /tmp/cchf4YwX.s:4465   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/cchf4YwX.s:4622   .text.std_round_fix:0000000000000078 $d
     /tmp/cchf4YwX.s:4627   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/cchf4YwX.s:4635   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/cchf4YwX.s:4695   .text.set_IO_annunciator:000000000000001c $d
     /tmp/cchf4YwX.s:4702   .text.pixel_length:0000000000000000 $t
     /tmp/cchf4YwX.s:4710   .text.pixel_length:0000000000000000 pixel_length
     /tmp/cchf4YwX.s:4801   .text.set_status:0000000000000000 $t
     /tmp/cchf4YwX.s:4808   .text.set_status:0000000000000000 set_status
     /tmp/cchf4YwX.s:4881   .text.set_status:0000000000000038 $d
     /tmp/cchf4YwX.s:4886   .text.set_x_dn:0000000000000000 $t
     /tmp/cchf4YwX.s:4894   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/cchf4YwX.s:5682   .text.set_x_dn:0000000000000358 $d
     /tmp/cchf4YwX.s:5689   .text.set_x_dn:0000000000000368 $t
     /tmp/cchf4YwX.s:5842   .text.set_x_dn:0000000000000414 $d
     /tmp/cchf4YwX.s:5848   .text.set_x_dn:000000000000041e $t
     /tmp/cchf4YwX.s:5874   .text.set_x_dn:000000000000044a $d
     /tmp/cchf4YwX.s:5880   .text.set_x_dn:0000000000000454 $t
     /tmp/cchf4YwX.s:6470   .text.set_x_dn:00000000000006e0 $d
     /tmp/cchf4YwX.s:6486   .text.set_x_dn:00000000000006fc $t
     /tmp/cchf4YwX.s:7203   .text.set_x_dn:00000000000009d8 $d
     /tmp/cchf4YwX.s:7212   .text.set_x:0000000000000000 $t
     /tmp/cchf4YwX.s:7219   .text.set_x:0000000000000000 set_x
     /tmp/cchf4YwX.s:7287   .text.format_reg:0000000000000000 $t
     /tmp/cchf4YwX.s:7295   .text.format_reg:0000000000000000 format_reg
     /tmp/cchf4YwX.s:7414   .text.format_reg:0000000000000064 $d
     /tmp/cchf4YwX.s:7420   .text.set_status_right:0000000000000000 $t
     /tmp/cchf4YwX.s:7427   .text.set_status_right:0000000000000000 set_status_right
     /tmp/cchf4YwX.s:7571   .text.set_status_right:000000000000006c $d
     /tmp/cchf4YwX.s:7576   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/cchf4YwX.s:7583   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/cchf4YwX.s:7708   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/cchf4YwX.s:7713   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/cchf4YwX.s:7771   .text.annunciators:0000000000000000 $t
     /tmp/cchf4YwX.s:7778   .text.annunciators:0000000000000000 annunciators
     /tmp/cchf4YwX.s:8435   .text.annunciators:0000000000000318 $d
     /tmp/cchf4YwX.s:8454   .text.annunciators:0000000000000358 $t
     /tmp/cchf4YwX.s:8965   .text.annunciators:0000000000000584 $d
     /tmp/cchf4YwX.s:8986   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cchf4YwX.s:9053   .text.display:0000000000000000 $t
     /tmp/cchf4YwX.s:9061   .text.display:0000000000000000 display
     /tmp/cchf4YwX.s:9740   .text.display:000000000000030c $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/cchf4YwX.s:9760   .text.display:000000000000034c $t
     /tmp/cchf4YwX.s:10522  .text.display:0000000000000688 $d
     /tmp/cchf4YwX.s:10548  .text.display:00000000000006dc $t
ARM GAS  /tmp/cchf4YwX.s 			page 376


     /tmp/cchf4YwX.s:11481  .text.display:0000000000000a34 $d
     /tmp/cchf4YwX.s:11501  .text.display:0000000000000a64 $t
     /tmp/cchf4YwX.s:12268  .text.display:0000000000000d6c $d
     /tmp/cchf4YwX.s:12287  .text.display:0000000000000da0 $t
     /tmp/cchf4YwX.s:12577  .text.display:0000000000000ec4 $d
     /tmp/cchf4YwX.s:12593  .text.frozen_display:0000000000000000 $t
     /tmp/cchf4YwX.s:12601  .text.frozen_display:0000000000000000 frozen_display
     /tmp/cchf4YwX.s:12631  .text.frozen_display:000000000000001c $d
     /tmp/cchf4YwX.s:12636  .text.message:0000000000000000 $t
     /tmp/cchf4YwX.s:12644  .text.message:0000000000000000 message
     /tmp/cchf4YwX.s:12773  .text.message:0000000000000060 $d
     /tmp/cchf4YwX.s:12781  .text.error_message:0000000000000000 $t
     /tmp/cchf4YwX.s:12789  .text.error_message:0000000000000000 error_message
     /tmp/cchf4YwX.s:12932  .text.error_message:000000000000006c $d
     /tmp/cchf4YwX.s:12944  .rodata.str1.4:0000000000000000 $d
     /tmp/cchf4YwX.s:13119  .rodata.CSWTCH.362:0000000000000000 CSWTCH.362
     /tmp/cchf4YwX.s:13138  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/cchf4YwX.s:13112  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/cchf4YwX.s:13229  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/cchf4YwX.s:13013  .rodata:0000000000000000 $d
     /tmp/cchf4YwX.s:13099  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/cchf4YwX.s:13100  .bss.DecimalMode:0000000000000000 $d
     /tmp/cchf4YwX.s:13105  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/cchf4YwX.s:13106  .bss.SeparatorMode:0000000000000000 $d
     /tmp/cchf4YwX.s:13108  .bss.no_status_top:0000000000000000 $d
     /tmp/cchf4YwX.s:13115  .rodata.CSWTCH.362:0000000000000000 $d
     /tmp/cchf4YwX.s:13125  .rodata.CSWTCH.389:0000000000000000 $d
     /tmp/cchf4YwX.s:13129  .rodata.CSWTCH.389:0000000000000000 CSWTCH.389
     /tmp/cchf4YwX.s:13134  .rodata.DIGITS:0000000000000000 $d
     /tmp/cchf4YwX.s:13141  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/cchf4YwX.s:13145  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/cchf4YwX.s:13148  .rodata.S7_INF:0000000000000000 $d
     /tmp/cchf4YwX.s:13152  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/cchf4YwX.s:13155  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/cchf4YwX.s:13159  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/cchf4YwX.s:13162  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/cchf4YwX.s:13166  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/cchf4YwX.s:13169  .rodata.S7_NaN:0000000000000000 $d
     /tmp/cchf4YwX.s:13173  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/cchf4YwX.s:13176  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/cchf4YwX.s:13180  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/cchf4YwX.s:13183  .rodata.S7_STEP:0000000000000000 $d
     /tmp/cchf4YwX.s:13187  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/cchf4YwX.s:13190  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/cchf4YwX.s:13194  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/cchf4YwX.s:13197  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/cchf4YwX.s:13201  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/cchf4YwX.s:13204  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/cchf4YwX.s:13208  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/cchf4YwX.s:13211  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/cchf4YwX.s:13215  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/cchf4YwX.s:13218  .rodata.S_SURE:0000000000000000 $d
     /tmp/cchf4YwX.s:13222  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/cchf4YwX.s:13225  .rodata.SvnRevision:0000000000000000 $d
     /tmp/cchf4YwX.s:13232  .rodata.digtbl:0000000000000000 $d
     /tmp/cchf4YwX.s:13236  .rodata.digtbl:0000000000000000 digtbl
ARM GAS  /tmp/cchf4YwX.s 			page 377


     /tmp/cchf4YwX.s:13245  .rodata.error_table.8570:0000000000000000 $d
     /tmp/cchf4YwX.s:13249  .rodata.error_table.8570:0000000000000000 error_table.8570
     /tmp/cchf4YwX.s:13278  .rodata.error_table_text.8571:0000000000000000 $d
     /tmp/cchf4YwX.s:13282  .rodata.error_table_text.8571:0000000000000000 error_table_text.8571
     /tmp/cchf4YwX.s:13311  .rodata.libname:0000000000000000 $d
     /tmp/cchf4YwX.s:13315  .rodata.libname:0000000000000000 libname
     /tmp/cchf4YwX.s:13321  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/cchf4YwX.s:13325  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/cchf4YwX.s:13335  .rodata.libname_text:0000000000000000 $d
     /tmp/cchf4YwX.s:13339  .rodata.libname_text:0000000000000000 libname_text
     /tmp/cchf4YwX.s:13349  .rodata.shift_chars.8674:0000000000000000 $d
     /tmp/cchf4YwX.s:13353  .rodata.shift_chars.8674:0000000000000000 shift_chars.8674
     /tmp/cchf4YwX.s:13356  .rodata.small_dots.8875:0000000000000000 $d
     /tmp/cchf4YwX.s:13360  .rodata.small_dots.8875:0000000000000000 small_dots.8875
     /tmp/cchf4YwX.s:13363  .rodata.small_minus.8874:0000000000000000 $d
     /tmp/cchf4YwX.s:13367  .rodata.small_minus.8874:0000000000000000 small_minus.8874

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
ARM GAS  /tmp/cchf4YwX.s 			page 378


word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
argcmds
WasDataEntry
ProgFree
scopy_char
op_r2p
current_catalogue
catcmd
get_const
getprog
prt
multicmds
find_label_from
free_mem
free_flash
findmultilbl
slen
global_regs
alpha_rcl_s
SizeStatRegs
local_regs
copyreg
sigma_val
getX
ARM GAS  /tmp/cchf4YwX.s 			page 379


packed_from_number
set_NaN
do_conv
StackBase
monfuncs

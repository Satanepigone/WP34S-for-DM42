ARM GAS  /tmp/ccjGZi8K.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"int.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_uldivmod
  18              		.section	.text.multiply_with_overflow,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	multiply_with_overflow:
  28              	.LVL0:
  29              	.LFB18:
  30              		.file 1 "src/int.c"
   1:src/int.c     **** /* This file is part of 34S.
   2:src/int.c     ****  *
   3:src/int.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/int.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/int.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/int.c     ****  * (at your option) any later version.
   7:src/int.c     ****  *
   8:src/int.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/int.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/int.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/int.c     ****  * GNU General Public License for more details.
  12:src/int.c     ****  *
  13:src/int.c     ****  * You should have received a copy of the GNU General Public License
  14:src/int.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/int.c     ****  */
  16:src/int.c     **** 
  17:src/int.c     **** #include "int.h"
  18:src/int.c     **** #include "xeq.h"
  19:src/int.c     **** #include "storage.h"
  20:src/int.c     **** #ifndef DM42
  21:src/int.c     **** #include "serial.h"
  22:src/int.c     **** #endif
  23:src/int.c     **** 
  24:src/int.c     **** static int check_intmode(void) {
  25:src/int.c     **** 	if (! is_intmode())
  26:src/int.c     **** 		return report_err(ERR_BAD_MODE);
  27:src/int.c     **** 	return 0;
  28:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 2


  29:src/int.c     **** 
  30:src/int.c     **** /* Some utility routines to extract bits of long longs */
  31:src/int.c     **** 
  32:src/int.c     **** unsigned int int_base(void) {
  33:src/int.c     **** 	const unsigned int b = UState.int_base + 1;
  34:src/int.c     **** 	if (b < 2)
  35:src/int.c     **** 		return 10;
  36:src/int.c     **** 	return b;
  37:src/int.c     **** }
  38:src/int.c     **** 
  39:src/int.c     **** enum arithmetic_modes int_mode(void) {
  40:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
  41:src/int.c     **** }
  42:src/int.c     **** 
  43:src/int.c     **** unsigned int word_size(void) {
  44:src/int.c     **** 	unsigned int il = UState.int_len;
  45:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  46:src/int.c     **** 		return MAX_WORD_SIZE;
  47:src/int.c     **** 	return il;
  48:src/int.c     **** }
  49:src/int.c     **** 
  50:src/int.c     **** int get_carry(void) {
  51:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
  52:src/int.c     **** }
  53:src/int.c     **** 
  54:src/int.c     **** void set_carry(int c) {
  55:src/int.c     **** #ifndef TINY_BUILD
  56:src/int.c     **** 	if (c)
  57:src/int.c     **** 		set_user_flag(CARRY_FLAG);
  58:src/int.c     **** 	else
  59:src/int.c     **** 		clr_user_flag(CARRY_FLAG);
  60:src/int.c     **** #endif
  61:src/int.c     **** }
  62:src/int.c     **** 
  63:src/int.c     **** int get_overflow(void) {
  64:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
  65:src/int.c     **** }
  66:src/int.c     **** 
  67:src/int.c     **** void set_overflow(int o) {
  68:src/int.c     **** #ifndef TINY_BUILD
  69:src/int.c     **** 	if (o)
  70:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
  71:src/int.c     **** 	else
  72:src/int.c     **** 		clr_user_flag(OVERFLOW_FLAG);
  73:src/int.c     **** #endif
  74:src/int.c     **** }
  75:src/int.c     **** 
  76:src/int.c     **** #ifndef TINY_BUILD
  77:src/int.c     **** /* Some utility routines for saving and restoring carry and overflow.
  78:src/int.c     ****  * Some operations don't change these flags but their subcomponents might.
  79:src/int.c     ****  */
  80:src/int.c     **** static int save_flags(void) {
  81:src/int.c     **** 	return (get_overflow() << 1) | get_carry();
  82:src/int.c     **** }
  83:src/int.c     **** 
  84:src/int.c     **** static void restore_flags(int co) {
  85:src/int.c     **** 	set_carry(co & 1);
ARM GAS  /tmp/ccjGZi8K.s 			page 3


  86:src/int.c     **** 	set_overflow(co & 2);
  87:src/int.c     **** }
  88:src/int.c     **** #endif
  89:src/int.c     **** 
  90:src/int.c     **** /* Utility routine for trimming a value to the current word size
  91:src/int.c     ****  */
  92:src/int.c     **** long long int mask_value(const long long int v) {
  93:src/int.c     **** #ifndef TINY_BUILD
  94:src/int.c     **** 	const unsigned int ws = word_size();
  95:src/int.c     **** 	long long int mask;
  96:src/int.c     **** 
  97:src/int.c     **** 	if (MAX_WORD_SIZE == 64 && ws == 64)
  98:src/int.c     **** 		return v;
  99:src/int.c     **** 	mask = (1LL << ws) - 1;
 100:src/int.c     **** 	return v & mask;
 101:src/int.c     **** #else
 102:src/int.c     **** 	return v;
 103:src/int.c     **** #endif
 104:src/int.c     **** }
 105:src/int.c     **** 
 106:src/int.c     **** #ifndef TINY_BUILD
 107:src/int.c     **** /* Ulility routine for returning a bit mask to get the topmost (sign)
 108:src/int.c     ****  * bit from a number.
 109:src/int.c     ****  */
 110:src/int.c     **** static long long int topbit_mask(void) {
 111:src/int.c     **** 	const unsigned int ws = word_size();
 112:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 113:src/int.c     **** 	return bit;
 114:src/int.c     **** }
 115:src/int.c     **** #endif
 116:src/int.c     **** 
 117:src/int.c     **** /* Utility routine to convert a binary integer into separate sign and
 118:src/int.c     ****  * value components.  The sign returned is 1 for negative and 0 for positive.
 119:src/int.c     ****  */
 120:src/int.c     **** unsigned long long int extract_value(const long long int val, int *const sign) {
 121:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 122:src/int.c     **** 	long long int v = mask_value(val);
 123:src/int.c     **** 	long long int tbm;
 124:src/int.c     **** 
 125:src/int.c     **** 	if (mode == MODE_UNSIGNED) {
 126:src/int.c     **** 		*sign = 0;
 127:src/int.c     **** 		return v;
 128:src/int.c     **** 	}
 129:src/int.c     **** 
 130:src/int.c     **** 	tbm = topbit_mask();
 131:src/int.c     **** 
 132:src/int.c     **** 	if (v & tbm) {
 133:src/int.c     **** 		*sign = 1;
 134:src/int.c     **** 		if (mode == MODE_2COMP)
 135:src/int.c     **** 			v = -v;
 136:src/int.c     **** 		else if (mode == MODE_1COMP)
 137:src/int.c     **** 			v = ~v;
 138:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 139:src/int.c     **** 			v ^= tbm;
 140:src/int.c     **** 	} else
 141:src/int.c     **** 		*sign = 0;
 142:src/int.c     ****     return mask_value(v);
ARM GAS  /tmp/ccjGZi8K.s 			page 4


 143:src/int.c     **** }
 144:src/int.c     **** 
 145:src/int.c     **** /* Helper routine to construct a value from the magnitude and sign
 146:src/int.c     ****  */
 147:src/int.c     **** long long int build_value(const unsigned long long int x, const int sign) {
 148:src/int.c     **** #ifndef TINY_BUILD
 149:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 150:src/int.c     **** 	long long int v = mask_value(x);
 151:src/int.c     **** 
 152:src/int.c     **** 	if (sign == 0 || mode == MODE_UNSIGNED)
 153:src/int.c     **** 		return v;
 154:src/int.c     **** 
 155:src/int.c     **** 	if (mode == MODE_2COMP)
 156:src/int.c     **** 		return mask_value(-(signed long long int)v);
 157:src/int.c     **** 	if (mode == MODE_1COMP)
 158:src/int.c     **** 		return mask_value(~v);
 159:src/int.c     **** 	return v | topbit_mask();
 160:src/int.c     **** #else
 161:src/int.c     **** 	return x;
 162:src/int.c     **** #endif
 163:src/int.c     **** }
 164:src/int.c     **** 
 165:src/int.c     **** 
 166:src/int.c     **** /* Utility routine to check if a value has overflowed or not */
 167:src/int.c     **** int check_overflow(long long int x) {
 168:src/int.c     **** 	return mask_value(x) != x ||
 169:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 170:src/int.c     **** }
 171:src/int.c     **** 
 172:src/int.c     **** 
 173:src/int.c     **** #ifndef TINY_BUILD
 174:src/int.c     **** /* Helper routine for addition and subtraction that detemines the proper
 175:src/int.c     ****  * setting for the overflow bit.  This routine should only be called when
 176:src/int.c     ****  * the signs of the operands are the same for addition and different
 177:src/int.c     ****  * for subtraction.  Overflow isn't possible if the signs are opposite.
 178:src/int.c     ****  * The arguments of the operator should be passed in after conversion
 179:src/int.c     ****  * to positive unsigned quantities nominally in two's complement.
 180:src/int.c     ****  */
 181:src/int.c     **** static int calc_overflow(unsigned long long int xv,
 182:src/int.c     **** 		unsigned long long int yv, enum arithmetic_modes mode, int neg) {
 183:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 184:src/int.c     **** 	unsigned long long int u;
 185:src/int.c     **** 	int i;
 186:src/int.c     **** 
 187:src/int.c     **** 	switch (mode) {
 188:src/int.c     **** 	case MODE_UNSIGNED:
 189:src/int.c     **** 		// C doesn't expose the processor's status bits to us so we
 190:src/int.c     **** 		// break the addition down so we don't lose the overflow.
 191:src/int.c     **** 		u = (yv & (tbm-1)) + (xv & (tbm-1));
 192:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 193:src/int.c     **** 		if (i > 1)
 194:src/int.c     **** 			break;
 195:src/int.c     **** 		return 0;
 196:src/int.c     **** 
 197:src/int.c     **** 	case MODE_2COMP:
 198:src/int.c     **** 		u = xv + yv;
 199:src/int.c     **** 		if (neg && u == tbm)
ARM GAS  /tmp/ccjGZi8K.s 			page 5


 200:src/int.c     **** 			return 0;
 201:src/int.c     **** 		if (tbm & u)
 202:src/int.c     **** 			break;
 203:src/int.c     **** 		if ((xv == tbm && yv !=0) || (yv == tbm && xv != 0))
 204:src/int.c     **** 			break;
 205:src/int.c     **** 		return 0;
 206:src/int.c     **** 
 207:src/int.c     **** 	case MODE_SGNMANT:
 208:src/int.c     **** 	case MODE_1COMP:
 209:src/int.c     **** 		if (tbm & (xv + yv))
 210:src/int.c     **** 			break;
 211:src/int.c     **** 		return 0;
 212:src/int.c     **** 	}
 213:src/int.c     **** 	set_overflow(1);
 214:src/int.c     **** 	return 1;
 215:src/int.c     **** }
 216:src/int.c     **** #endif
 217:src/int.c     **** 
 218:src/int.c     **** 
 219:src/int.c     **** long long int intAdd(long long int y, long long int x) {
 220:src/int.c     **** #ifndef TINY_BUILD
 221:src/int.c     **** 	int sx, sy;
 222:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 223:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 224:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 225:src/int.c     **** 	long long int v;
 226:src/int.c     **** 	int overflow;
 227:src/int.c     **** 
 228:src/int.c     **** 	set_overflow(0);
 229:src/int.c     **** 	if (sx == sy)
 230:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 231:src/int.c     **** 	else
 232:src/int.c     **** 		overflow = 0;
 233:src/int.c     **** 
 234:src/int.c     **** 	if (mode == MODE_SGNMANT) {
 235:src/int.c     **** 		const long long int tbm = topbit_mask();
 236:src/int.c     **** 		const long long int x2 = (x & tbm)?-(x ^ tbm):x;
 237:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 238:src/int.c     **** 
 239:src/int.c     **** 		set_carry(overflow);
 240:src/int.c     **** 
 241:src/int.c     **** 		v = y2 + x2;
 242:src/int.c     **** 		if (v & tbm)
 243:src/int.c     **** 			v = -v | tbm;
 244:src/int.c     **** 	} else {
 245:src/int.c     **** 		int carry;
 246:src/int.c     **** 		const unsigned long long int u = mask_value(y + x);
 247:src/int.c     **** 
 248:src/int.c     **** 		if (u < (unsigned long long int)mask_value(y)) {
 249:src/int.c     **** 			set_carry(1);
 250:src/int.c     **** 			carry = 1;
 251:src/int.c     **** 		} else {
 252:src/int.c     **** 			set_carry(0);
 253:src/int.c     **** 			carry = 0;
 254:src/int.c     **** 		}
 255:src/int.c     **** 
 256:src/int.c     **** 		v = y + x;
ARM GAS  /tmp/ccjGZi8K.s 			page 6


 257:src/int.c     **** 		if (carry && mode == MODE_1COMP)
 258:src/int.c     **** 			v++;
 259:src/int.c     **** 	}
 260:src/int.c     **** 	return mask_value(v);
 261:src/int.c     **** #else
 262:src/int.c     **** 	return y+x;
 263:src/int.c     **** #endif
 264:src/int.c     **** }
 265:src/int.c     **** 
 266:src/int.c     **** long long int intSubtract(long long int y, long long int x) {
 267:src/int.c     **** #ifndef TINY_BUILD
 268:src/int.c     **** 	int sx, sy;
 269:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 270:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 271:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 272:src/int.c     **** 	long long int v, tbm;
 273:src/int.c     **** 
 274:src/int.c     **** 	set_overflow(0);
 275:src/int.c     **** 	if (sx != sy)
 276:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 277:src/int.c     **** 
 278:src/int.c     **** 	if (mode == MODE_SGNMANT) {
 279:src/int.c     **** 		long long int x2, y2;
 280:src/int.c     **** 		set_carry((sx == 0 && sy == 0 && xv > yv) ||
 281:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 282:src/int.c     **** 
 283:src/int.c     **** 		tbm = topbit_mask();
 284:src/int.c     **** 		x2 = (x & tbm)?-(x ^ tbm):x;
 285:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 286:src/int.c     **** 
 287:src/int.c     **** 		v = y2 - x2;
 288:src/int.c     **** 		if (v & tbm)
 289:src/int.c     **** 			v = -v | tbm;
 290:src/int.c     **** 	} else {
 291:src/int.c     **** 		int borrow;
 292:src/int.c     **** 
 293:src/int.c     **** 		if ((unsigned long long int)y < (unsigned long long int)x) {
 294:src/int.c     **** 			set_carry(1);
 295:src/int.c     **** 			if (mode == MODE_UNSIGNED)
 296:src/int.c     **** 				set_overflow(1);
 297:src/int.c     **** 			borrow = 1;
 298:src/int.c     **** 		} else {
 299:src/int.c     **** 			set_carry(0);
 300:src/int.c     **** 			borrow = 0;
 301:src/int.c     **** 		}
 302:src/int.c     **** 
 303:src/int.c     **** 		v = y - x;
 304:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 305:src/int.c     **** 			v--;
 306:src/int.c     **** 	}
 307:src/int.c     **** 	return mask_value(v);
 308:src/int.c     **** #else
 309:src/int.c     **** 	return y-x;
 310:src/int.c     **** #endif
 311:src/int.c     **** }
 312:src/int.c     **** 
 313:src/int.c     **** static unsigned long long int multiply_with_overflow(unsigned long long int x, unsigned long long i
ARM GAS  /tmp/ccjGZi8K.s 			page 7


  31              		.loc 1 313 121 view -0
  32              		.cfi_startproc
  33              		@ args = 4, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
 314:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  35              		.loc 1 314 2 view .LVU1
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  36              		.loc 1 313 121 is_stmt 0 view .LVU2
  37 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  38              		.cfi_def_cfa_offset 40
  39              		.cfi_offset 3, -40
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49              	.LBB571:
  50              	.LBB572:
  51              	.LBB573:
  52              	.LBB574:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  53              		.loc 1 44 20 view .LVU3
  54 0004 314C     		ldr	r4, .L17
  55              	.LBE574:
  56              	.LBE573:
  57              	.LBE572:
  58              	.LBE571:
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  59              		.loc 1 313 121 view .LVU4
  60 0006 DDF828A0 		ldr	r10, [sp, #40]
  61              	.LBB593:
  62              	.LBB587:
  63              	.LBB581:
  64              	.LBB575:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  65              		.loc 1 44 20 view .LVU5
  66 000a D4F800C0 		ldr	ip, [r4]
  67              	.LBE575:
  68              	.LBE581:
  69              	.LBE587:
  70              	.LBE593:
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  71              		.loc 1 313 121 view .LVU6
  72 000e 9946     		mov	r9, r3
  73              	.LBB594:
  74              	.LBB588:
  75              	.LBB582:
  76              	.LBB576:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  77              		.loc 1 44 26 view .LVU7
  78 0010 9CF8E937 		ldrb	r3, [ip, #2025]	@ zero_extendqisi2
  79              	.LBE576:
  80              	.LBE582:
ARM GAS  /tmp/ccjGZi8K.s 			page 8


  81              	.LBE588:
  82              	.LBE594:
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  83              		.loc 1 313 121 view .LVU8
  84 0014 9046     		mov	r8, r2
  85              	.LBB595:
  86              	.LBB589:
  87              	.LBB583:
  88              	.LBB577:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  89              		.loc 1 44 15 view .LVU9
  90 0016 03F03F0B 		and	fp, r3, #63
  91              	.LBE577:
  92              	.LBE583:
  93              	.LBE589:
  94              	.LBE595:
  95              		.loc 1 314 48 view .LVU10
  96 001a 00FB09F2 		mul	r2, r0, r9
  97              	.LVL1:
  98              		.loc 1 314 48 view .LVU11
  99 001e A0FB0845 		umull	r4, r5, r0, r8
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
 100              		.loc 1 313 121 view .LVU12
 101 0022 0646     		mov	r6, r0
 102              	.LBB596:
 103              	.LBB590:
 104              	.LBB584:
 105              	.LBB578:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 106              		.loc 1 45 26 view .LVU13
 107 0024 0BF1FF30 		add	r0, fp, #-1
 108              	.LVL2:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 109              		.loc 1 45 26 view .LVU14
 110              	.LBE578:
 111              	.LBE584:
 112              	.LBE590:
 113              	.LBE596:
 114              		.loc 1 314 48 view .LVU15
 115 0028 08FB0122 		mla	r2, r8, r1, r2
 116              	.LBB597:
 117              	.LBB591:
 118              	.LBB585:
 119              	.LBB579:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 120              		.loc 1 45 5 view .LVU16
 121 002c 3E28     		cmp	r0, #62
 122              	.LBE579:
 123              	.LBE585:
 124              	.LBE591:
 125              	.LBE597:
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
 126              		.loc 1 313 121 view .LVU17
 127 002e 0F46     		mov	r7, r1
 128              		.loc 1 314 48 view .LVU18
 129 0030 2A44     		add	r2, r2, r5
 130              	.LVL3:
ARM GAS  /tmp/ccjGZi8K.s 			page 9


 131              	.LBB598:
 132              	.LBI571:
  92:src/int.c     **** #ifndef TINY_BUILD
 133              		.loc 1 92 15 is_stmt 1 view .LVU19
 134              	.LBB592:
  94:src/int.c     **** 	long long int mask;
 135              		.loc 1 94 2 view .LVU20
 136              	.LBB586:
 137              	.LBI573:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 138              		.loc 1 43 14 view .LVU21
 139              	.LBB580:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 140              		.loc 1 44 2 view .LVU22
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 141              		.loc 1 45 2 view .LVU23
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 142              		.loc 1 45 5 is_stmt 0 view .LVU24
 143 0032 3AD8     		bhi	.L14
 144              	.LVL4:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 145              		.loc 1 45 5 view .LVU25
 146              	.LBE580:
 147              	.LBE586:
  95:src/int.c     **** 
 148              		.loc 1 95 2 is_stmt 1 view .LVU26
  97:src/int.c     **** 		return v;
 149              		.loc 1 97 2 view .LVU27
  99:src/int.c     **** 	return v & mask;
 150              		.loc 1 99 2 view .LVU28
 100:src/int.c     **** #else
 151              		.loc 1 100 2 view .LVU29
  99:src/int.c     **** 	return v & mask;
 152              		.loc 1 99 14 is_stmt 0 view .LVU30
 153 0034 0123     		movs	r3, #1
 154              	.LVL5:
  99:src/int.c     **** 	return v & mask;
 155              		.loc 1 99 14 view .LVU31
 156 0036 ABF12001 		sub	r1, fp, #32
 157 003a CBF1200E 		rsb	lr, fp, #32
 158 003e 03FA01F1 		lsl	r1, r3, r1
 159 0042 23FA0EFE 		lsr	lr, r3, lr
 160 0046 03FA0BF3 		lsl	r3, r3, fp
  99:src/int.c     **** 	return v & mask;
 161              		.loc 1 99 7 view .LVU32
 162 004a 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 163              		.loc 1 99 14 view .LVU33
 164 004e 41EA0E01 		orr	r1, r1, lr
  99:src/int.c     **** 	return v & mask;
 165              		.loc 1 99 7 view .LVU34
 166 0052 41F1FF31 		adc	r1, r1, #-1
 100:src/int.c     **** #else
 167              		.loc 1 100 11 view .LVU35
 168 0056 1C40     		ands	r4, r4, r3
 169              	.LVL6:
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 10


 170              		.loc 1 100 11 view .LVU36
 171 0058 01EA0205 		and	r5, r1, r2
 172              	.LVL7:
 173              	.L2:
 100:src/int.c     **** #else
 174              		.loc 1 100 11 view .LVU37
 175              	.LBE592:
 176              	.LBE598:
 315:src/int.c     **** 
 316:src/int.c     **** 	if (! *overflow && y != 0) {
 177              		.loc 1 316 2 is_stmt 1 view .LVU38
 178              		.loc 1 316 5 is_stmt 0 view .LVU39
 179 005c DAF80030 		ldr	r3, [r10]
 180 0060 FBB9     		cbnz	r3, .L1
 181              		.loc 1 316 18 discriminator 1 view .LVU40
 182 0062 58EA0902 		orrs	r2, r8, r9
 183 0066 1CD0     		beq	.L1
 184              	.LBB599:
 317:src/int.c     **** 		const enum arithmetic_modes mode = int_mode();
 185              		.loc 1 317 3 is_stmt 1 view .LVU41
 186              	.LBB600:
 187              	.LBI600:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 188              		.loc 1 39 23 view .LVU42
 189              	.LBB601:
  40:src/int.c     **** }
 190              		.loc 1 40 2 view .LVU43
 191              	.LVL8:
  40:src/int.c     **** }
 192              		.loc 1 40 2 is_stmt 0 view .LVU44
 193              	.LBE601:
 194              	.LBE600:
 318:src/int.c     **** 		const unsigned long long int tbm = (mode == MODE_UNSIGNED) ? 0 : topbit_mask();
 195              		.loc 1 318 3 is_stmt 1 view .LVU45
 196              	.LBB603:
 197              	.LBB602:
  40:src/int.c     **** }
 198              		.loc 1 40 39 is_stmt 0 view .LVU46
 199 0068 9CF8E827 		ldrb	r2, [ip, #2024]	@ zero_extendqisi2
 200              	.LBE602:
 201              	.LBE603:
 202              		.loc 1 318 66 view .LVU47
 203 006c C2F38102 		ubfx	r2, r2, #2, #2
 204 0070 022A     		cmp	r2, #2
 205 0072 1CD0     		beq	.L4
 206              	.LBB604:
 207              	.LBI604:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 208              		.loc 1 110 22 is_stmt 1 view .LVU48
 209              	.LBB605:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 210              		.loc 1 111 2 view .LVU49
 211              	.LBB606:
 212              	.LBI606:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 213              		.loc 1 43 14 view .LVU50
 214              	.LBB607:
ARM GAS  /tmp/ccjGZi8K.s 			page 11


  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 215              		.loc 1 44 2 view .LVU51
 216              	.LVL9:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 217              		.loc 1 45 2 view .LVU52
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 218              		.loc 1 45 5 is_stmt 0 view .LVU53
 219 0074 3E28     		cmp	r0, #62
 220 0076 25D8     		bhi	.L7
 221 0078 0123     		movs	r3, #1
 222 007a A0F12001 		sub	r1, r0, #32
 223 007e C0F12002 		rsb	r2, r0, #32
 224 0082 03FA01F1 		lsl	r1, r3, r1
 225 0086 23FA02F2 		lsr	r2, r3, r2
 226 008a 1143     		orrs	r1, r1, r2
 227 008c 03FA00F0 		lsl	r0, r3, r0
 228              	.L5:
 229              	.LVL10:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 230              		.loc 1 45 5 view .LVU54
 231              	.LBE607:
 232              	.LBE606:
 112:src/int.c     **** 	return bit;
 233              		.loc 1 112 2 is_stmt 1 view .LVU55
 113:src/int.c     **** }
 234              		.loc 1 113 2 view .LVU56
 113:src/int.c     **** }
 235              		.loc 1 113 2 is_stmt 0 view .LVU57
 236              	.LBE605:
 237              	.LBE604:
 319:src/int.c     **** 
 320:src/int.c     **** 		if ((t & tbm) != 0 || t / y != x)
 238              		.loc 1 320 3 is_stmt 1 view .LVU58
 239              		.loc 1 320 10 is_stmt 0 view .LVU59
 240 0090 00EA0402 		and	r2, r0, r4
 241 0094 01EA0503 		and	r3, r1, r5
 242              		.loc 1 320 6 view .LVU60
 243 0098 1343     		orrs	r3, r2, r3
 244 009a 08D0     		beq	.L4
 245              	.LVL11:
 246              	.L6:
 321:src/int.c     **** 			*overflow = 1;
 247              		.loc 1 321 4 is_stmt 1 view .LVU61
 248              		.loc 1 321 14 is_stmt 0 view .LVU62
 249 009c 0123     		movs	r3, #1
 250 009e CAF80030 		str	r3, [r10]
 251              	.LBE599:
 322:src/int.c     **** 	}
 323:src/int.c     **** 	return t;
 252              		.loc 1 323 2 is_stmt 1 view .LVU63
 253              	.L1:
 324:src/int.c     **** }
 254              		.loc 1 324 1 is_stmt 0 view .LVU64
 255 00a2 2046     		mov	r0, r4
 256 00a4 2946     		mov	r1, r5
 257 00a6 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 258              	.LVL12:
ARM GAS  /tmp/ccjGZi8K.s 			page 12


 259              	.L14:
 260              		.loc 1 324 1 view .LVU65
 261 00aa 1546     		mov	r5, r2
 262 00ac D6E7     		b	.L2
 263              	.LVL13:
 264              	.L4:
 265              	.LBB612:
 320:src/int.c     **** 			*overflow = 1;
 266              		.loc 1 320 27 discriminator 1 view .LVU66
 267 00ae 4246     		mov	r2, r8
 268 00b0 4B46     		mov	r3, r9
 269 00b2 2046     		mov	r0, r4
 270 00b4 2946     		mov	r1, r5
 271 00b6 FFF7FEFF 		bl	__aeabi_uldivmod
 272              	.LVL14:
 320:src/int.c     **** 			*overflow = 1;
 273              		.loc 1 320 22 discriminator 1 view .LVU67
 274 00ba B942     		cmp	r1, r7
 275 00bc 08BF     		it	eq
 276 00be B042     		cmpeq	r0, r6
 277 00c0 ECD1     		bne	.L6
 278 00c2 EEE7     		b	.L1
 279              	.LVL15:
 280              	.L7:
 281              	.LBB611:
 282              	.LBB610:
 283              	.LBB609:
 284              	.LBB608:
 320:src/int.c     **** 			*overflow = 1;
 285              		.loc 1 320 22 discriminator 1 view .LVU68
 286 00c4 1846     		mov	r0, r3
 287 00c6 4FF00041 		mov	r1, #-2147483648
 288 00ca E1E7     		b	.L5
 289              	.L18:
 290              		.align	2
 291              	.L17:
 292 00cc 00000000 		.word	main_ram
 293              	.LBE608:
 294              	.LBE609:
 295              	.LBE610:
 296              	.LBE611:
 297              	.LBE612:
 298              		.cfi_endproc
 299              	.LFE18:
 301              		.section	.text.expmod,"ax",%progbits
 302              		.align	1
 303              		.p2align 2,,3
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 307              		.fpu fpv4-sp-d16
 309              	expmod:
 310              	.LVL16:
 311              	.LFB70:
 325:src/int.c     **** 
 326:src/int.c     **** long long int intMultiply(long long int y, long long int x) {
 327:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccjGZi8K.s 			page 13


 328:src/int.c     **** 	unsigned long long int u;
 329:src/int.c     **** 	int sx, sy;
 330:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 331:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 332:src/int.c     **** 	int overflow = 0;
 333:src/int.c     **** 
 334:src/int.c     **** 	u = multiply_with_overflow(xv, yv, &overflow);
 335:src/int.c     **** 	set_overflow(overflow);
 336:src/int.c     **** 
 337:src/int.c     **** 	if (int_mode() == MODE_UNSIGNED)
 338:src/int.c     **** 		return u;
 339:src/int.c     **** 	return build_value(u & ~topbit_mask(), sx ^ sy);
 340:src/int.c     **** #else
 341:src/int.c     **** 	return x*y;
 342:src/int.c     **** #endif
 343:src/int.c     **** }
 344:src/int.c     **** 
 345:src/int.c     **** #ifndef TINY_BUILD
 346:src/int.c     **** static void err_div0(unsigned long long int num, int sn, int sd) {
 347:src/int.c     **** 	if (num == 0)
 348:src/int.c     **** 		report_err(ERR_DOMAIN);
 349:src/int.c     **** 	else if (sn == sd)
 350:src/int.c     **** 		report_err(ERR_INFINITY);
 351:src/int.c     **** 	else
 352:src/int.c     **** 		report_err(ERR_MINFINITY);
 353:src/int.c     **** }
 354:src/int.c     **** #endif
 355:src/int.c     **** 
 356:src/int.c     **** long long int intDivide(long long int y, long long int x) {
 357:src/int.c     **** #ifndef TINY_BUILD
 358:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 359:src/int.c     **** 	int sx, sy;
 360:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 361:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 362:src/int.c     **** 	unsigned long long int r;
 363:src/int.c     **** 	long long int tbm;
 364:src/int.c     **** 
 365:src/int.c     **** 	if (xv == 0) {
 366:src/int.c     **** 		err_div0(yv, sy, sx);
 367:src/int.c     **** 		return 0;
 368:src/int.c     **** 	}
 369:src/int.c     **** 	set_overflow(0);
 370:src/int.c     **** 	r = mask_value(yv / xv);
 371:src/int.c     **** 	// Set carry if there is a remainder
 372:src/int.c     **** 	set_carry(r * xv != yv);
 373:src/int.c     **** 
 374:src/int.c     **** 	if (mode != MODE_UNSIGNED) {
 375:src/int.c     **** 		tbm = topbit_mask();
 376:src/int.c     **** 		if (r & tbm)
 377:src/int.c     **** 			set_carry(1);
 378:src/int.c     **** 		// Special case for 0x8000...00 / -1 in 2's complement
 379:src/int.c     **** 		if (mode == MODE_2COMP && sx && xv == 1 && y == tbm)
 380:src/int.c     **** 			set_overflow(1);
 381:src/int.c     **** 	}
 382:src/int.c     **** 	return build_value(r, sx ^ sy);
 383:src/int.c     **** #else
 384:src/int.c     **** 	return y/x;
ARM GAS  /tmp/ccjGZi8K.s 			page 14


 385:src/int.c     **** #endif
 386:src/int.c     **** }
 387:src/int.c     **** 
 388:src/int.c     **** long long int intMod(long long int y, long long int x) {
 389:src/int.c     **** #ifndef TINY_BUILD
 390:src/int.c     **** 	int sx, sy;
 391:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 392:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 393:src/int.c     **** 	unsigned long long int r;
 394:src/int.c     **** 
 395:src/int.c     **** 	if (xv == 0) {
 396:src/int.c     **** 		err_div0(yv, sy, sx);
 397:src/int.c     **** 		return 0;
 398:src/int.c     **** 	}
 399:src/int.c     **** 	r = yv % xv;
 400:src/int.c     **** #ifdef INCLUDE_MOD41
 401:src/int.c     **** 	if (XeqOpCode == (OP_DYA | OP_MOD41) && sx != sy) {
 402:src/int.c     ****         if (r != 0)
 403:src/int.c     **** 		    r = xv - r;
 404:src/int.c     **** 		sy = sx;
 405:src/int.c     **** 	}
 406:src/int.c     **** #endif
 407:src/int.c     **** 	return build_value(r, sy);
 408:src/int.c     **** #else
 409:src/int.c     **** 	return y%x;
 410:src/int.c     **** #endif
 411:src/int.c     **** }
 412:src/int.c     **** 
 413:src/int.c     **** 
 414:src/int.c     **** long long int intMin(long long int y, long long int x) {
 415:src/int.c     **** #ifndef TINY_BUILD
 416:src/int.c     **** 	int sx, sy;
 417:src/int.c     **** 	const unsigned long long int xv = extract_value(x, &sx);
 418:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 419:src/int.c     **** 
 420:src/int.c     **** 	if (sx != sy) {			// different signs
 421:src/int.c     **** 		if (sx)
 422:src/int.c     **** 			return x;
 423:src/int.c     **** 	} else if (sx) {		// both negative
 424:src/int.c     **** 		if (xv > yv)
 425:src/int.c     **** 			return x;
 426:src/int.c     **** 	} else {			// both positive
 427:src/int.c     **** 		if (xv < yv)
 428:src/int.c     **** 			return x;
 429:src/int.c     **** 	}
 430:src/int.c     **** 	return y;
 431:src/int.c     **** #else
 432:src/int.c     **** 	return 0;
 433:src/int.c     **** #endif
 434:src/int.c     **** }
 435:src/int.c     **** 
 436:src/int.c     **** long long int intMax(long long int y, long long int x) {
 437:src/int.c     **** #ifndef TINY_BUILD
 438:src/int.c     **** 	int sx, sy;
 439:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 440:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 441:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 15


 442:src/int.c     **** 	if (sx != sy) {			// different signs
 443:src/int.c     **** 		if (sx)
 444:src/int.c     **** 			return y;
 445:src/int.c     **** 	} else if (sx) {		// both negative
 446:src/int.c     **** 		if (xv > yv)
 447:src/int.c     **** 			return y;
 448:src/int.c     **** 	} else {			// both positive
 449:src/int.c     **** 		if (xv < yv)
 450:src/int.c     **** 			return y;
 451:src/int.c     **** 	}
 452:src/int.c     **** 	return x;
 453:src/int.c     **** #else
 454:src/int.c     **** 	return 0;
 455:src/int.c     **** #endif
 456:src/int.c     **** }
 457:src/int.c     **** 
 458:src/int.c     **** 
 459:src/int.c     **** #ifdef INCLUDE_MULADD
 460:src/int.c     **** long long int intMAdd(long long int z, long long int y, long long int x) {
 461:src/int.c     **** #ifndef TINY_BUILD
 462:src/int.c     **** 	long long int t = intMultiply(x, y);
 463:src/int.c     **** 	const int of = get_overflow();
 464:src/int.c     **** 
 465:src/int.c     **** 	t = intAdd(t, z);
 466:src/int.c     **** 	if (of)
 467:src/int.c     **** 		set_overflow(1);
 468:src/int.c     **** 	return t;
 469:src/int.c     **** #else
 470:src/int.c     **** 	return 0;
 471:src/int.c     **** #endif
 472:src/int.c     **** }
 473:src/int.c     **** #endif
 474:src/int.c     **** 
 475:src/int.c     **** 
 476:src/int.c     **** static unsigned long long int int_gcd(unsigned long long int a, unsigned long long int b) {
 477:src/int.c     **** 	while (b != 0) {
 478:src/int.c     **** 		const unsigned long long int t = b;
 479:src/int.c     **** 		b = a % b;
 480:src/int.c     **** 		a = t;
 481:src/int.c     **** 	}
 482:src/int.c     **** 	return a;
 483:src/int.c     **** }
 484:src/int.c     **** 
 485:src/int.c     **** long long int intGCD(long long int y, long long int x) {
 486:src/int.c     **** 	int s;
 487:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 488:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 489:src/int.c     **** 	unsigned long long int v;
 490:src/int.c     **** 
 491:src/int.c     **** 	if (xv == 0)
 492:src/int.c     **** 		v = yv;
 493:src/int.c     **** 	else if (yv == 0)
 494:src/int.c     **** 		v = xv;
 495:src/int.c     **** 	else
 496:src/int.c     **** 		v = int_gcd(xv, yv);
 497:src/int.c     **** 	return build_value(v, 0);
 498:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 16


 499:src/int.c     **** 
 500:src/int.c     **** long long int intLCM(long long int y, long long int x) {
 501:src/int.c     **** 	int s;
 502:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 503:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 504:src/int.c     **** 	unsigned long long int gcd;
 505:src/int.c     **** 
 506:src/int.c     **** 	if (xv == 0 || yv == 0)
 507:src/int.c     **** 		return 0;
 508:src/int.c     **** 	gcd = int_gcd(xv, yv);
 509:src/int.c     **** 	return intMultiply(mask_value(xv / gcd), build_value(yv, 0));
 510:src/int.c     **** }
 511:src/int.c     **** 
 512:src/int.c     **** long long int intSqr(long long int x) {
 513:src/int.c     **** 	return intMultiply(x, x);
 514:src/int.c     **** }
 515:src/int.c     **** 
 516:src/int.c     **** long long int intCube(long long int x) {
 517:src/int.c     **** #ifndef TINY_BUILD
 518:src/int.c     **** 	long long int y = intMultiply(x, x);
 519:src/int.c     **** 	int overflow = get_overflow();
 520:src/int.c     **** 
 521:src/int.c     **** 	y = intMultiply(x, y);
 522:src/int.c     **** 	if (overflow)
 523:src/int.c     **** 		set_overflow(1);
 524:src/int.c     **** 	return y;
 525:src/int.c     **** #else
 526:src/int.c     **** 	return 0;
 527:src/int.c     **** #endif
 528:src/int.c     **** }
 529:src/int.c     **** 
 530:src/int.c     **** long long int intChs(long long int x) {
 531:src/int.c     **** #ifndef TINY_BUILD
 532:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 533:src/int.c     **** 	int sx;
 534:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 535:src/int.c     **** 
 536:src/int.c     **** 	if (mode == MODE_UNSIGNED || (mode == MODE_2COMP && x == topbit_mask())) {
 537:src/int.c     **** 		set_overflow(1);
 538:src/int.c     **** 		return mask_value(-(signed long long int)xv);
 539:src/int.c     **** 	}
 540:src/int.c     **** 	set_overflow(0);
 541:src/int.c     **** 	return build_value(xv, !sx);
 542:src/int.c     **** #else
 543:src/int.c     **** 	return x;
 544:src/int.c     **** #endif
 545:src/int.c     **** }
 546:src/int.c     **** 
 547:src/int.c     **** long long int intAbs(long long int x) {
 548:src/int.c     **** #ifndef TINY_BUILD
 549:src/int.c     **** 	int sx;
 550:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 551:src/int.c     **** 
 552:src/int.c     **** 	set_overflow(0);
 553:src/int.c     **** 	if (int_mode() == MODE_2COMP && x == topbit_mask()) {
 554:src/int.c     **** 		set_overflow(1);
 555:src/int.c     **** 		return x;
ARM GAS  /tmp/ccjGZi8K.s 			page 17


 556:src/int.c     **** 	}
 557:src/int.c     **** 	return build_value(xv, 0);
 558:src/int.c     **** #else
 559:src/int.c     **** 	return x;
 560:src/int.c     **** #endif
 561:src/int.c     **** }
 562:src/int.c     **** 
 563:src/int.c     **** #ifndef TINY_BUILD
 564:src/int.c     **** static void breakup(unsigned long long int x, unsigned short xv[4]) {
 565:src/int.c     **** 	xv[0] = x & 0xffff;
 566:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 567:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 568:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 569:src/int.c     **** }
 570:src/int.c     **** 
 571:src/int.c     **** static unsigned long long int packup(unsigned short int x[4]) {
 572:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 573:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 574:src/int.c     **** 			(((unsigned long int)x[1]) << 16) |
 575:src/int.c     **** 			x[0];
 576:src/int.c     **** }
 577:src/int.c     **** #endif
 578:src/int.c     **** 
 579:src/int.c     **** void intDblMul(enum nilop op) {
 580:src/int.c     **** #ifndef TINY_BUILD
 581:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 582:src/int.c     **** 	unsigned long long int xv, yv;
 583:src/int.c     **** 	int s;	
 584:src/int.c     **** 	unsigned short int xa[4], ya[4];
 585:src/int.c     **** 	unsigned int t[8];
 586:src/int.c     **** 	unsigned short int r[8];
 587:src/int.c     **** 	int i, j;
 588:src/int.c     **** 
 589:src/int.c     **** 	{
 590:src/int.c     **** 		long long int xr, yr;
 591:src/int.c     **** 		int sx, sy;
 592:src/int.c     **** 
 593:src/int.c     **** 		xr = getX_int();
 594:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 595:src/int.c     **** 
 596:src/int.c     **** 		xv = extract_value(xr, &sx);
 597:src/int.c     **** 		yv = extract_value(yr, &sy);
 598:src/int.c     **** 
 599:src/int.c     **** 		s = sx != sy;
 600:src/int.c     **** 	}
 601:src/int.c     **** 
 602:src/int.c     **** 	/* Do the multiplication by breaking the values into unsigned shorts
 603:src/int.c     **** 	 * multiplying them all out and accumulating into unsigned ints.
 604:src/int.c     **** 	 * Then perform a second pass over the ints to propogate carry.
 605:src/int.c     **** 	 * Finally, repack into unsigned long long ints.
 606:src/int.c     **** 	 *
 607:src/int.c     **** 	 * This isn't terribly efficient especially for shorter word
 608:src/int.c     **** 	 * sizes but it works.  Special cases for WS <= 16 and/or WS <= 32
 609:src/int.c     **** 	 * might be worthwhile since the CPU supports these multiplications
 610:src/int.c     **** 	 * natively.
 611:src/int.c     **** 	 */
 612:src/int.c     **** 	breakup(xv, xa);
ARM GAS  /tmp/ccjGZi8K.s 			page 18


 613:src/int.c     **** 	breakup(yv, ya);
 614:src/int.c     **** 
 615:src/int.c     **** 	for (i=0; i<8; i++)
 616:src/int.c     **** 		t[i] = 0;
 617:src/int.c     **** 
 618:src/int.c     **** 	for (i=0; i<4; i++)
 619:src/int.c     **** 		for (j=0; j<4; j++)
 620:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 621:src/int.c     **** 
 622:src/int.c     **** 	for (i=0; i<8; i++) {
 623:src/int.c     **** 		if (t[i] >= 65536)
 624:src/int.c     **** 			t[i+1] += t[i] >> 16;
 625:src/int.c     **** 		r[i] = t[i];
 626:src/int.c     **** 	}
 627:src/int.c     **** 
 628:src/int.c     **** 	yv = packup(r);
 629:src/int.c     **** 	xv = packup(r+4);
 630:src/int.c     **** 
 631:src/int.c     **** 	i = word_size();
 632:src/int.c     **** 	if (i != 64)
 633:src/int.c     **** 		xv = (xv << (64-i)) | (yv >> i);
 634:src/int.c     **** 
 635:src/int.c     **** 	setlastX();
 636:src/int.c     **** 
 637:src/int.c     **** 	if (s != 0) {
 638:src/int.c     **** 		if (mode == MODE_2COMP) {
 639:src/int.c     **** 			yv = mask_value(1 + ~yv);
 640:src/int.c     **** 			xv = ~xv;
 641:src/int.c     **** 			if (yv == 0)
 642:src/int.c     **** 				xv++;
 643:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 644:src/int.c     **** 			yv = ~yv;
 645:src/int.c     **** 			xv = ~xv;
 646:src/int.c     **** 		} else
 647:src/int.c     **** 			xv |= topbit_mask();
 648:src/int.c     **** 	}
 649:src/int.c     **** 
 650:src/int.c     **** 	set_reg_n_int(regY_idx, mask_value(yv));
 651:src/int.c     **** 	setX_int(mask_value(xv));
 652:src/int.c     **** 	set_overflow(0);
 653:src/int.c     **** #endif
 654:src/int.c     **** }
 655:src/int.c     **** 
 656:src/int.c     **** 
 657:src/int.c     **** #ifndef TINY_BUILD
 658:src/int.c     **** static int nlz(unsigned short int x) {
 659:src/int.c     ****    int n;
 660:src/int.c     **** 
 661:src/int.c     ****    if (x == 0)
 662:src/int.c     **** 	   return 16;
 663:src/int.c     ****    n = 0;
 664:src/int.c     ****    if (x <= 0x00ff) {n = n + 8; x = x << 8;}
 665:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 666:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 667:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 668:src/int.c     ****    return n;
 669:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 19


 670:src/int.c     **** 
 671:src/int.c     **** /* q[0], r[0], u[0], and v[0] contain the LEAST significant halfwords.
 672:src/int.c     **** (The sequence is in little-endian order).
 673:src/int.c     **** 
 674:src/int.c     **** This first version is a fairly precise implementation of Knuth's
 675:src/int.c     **** Algorithm D, for a binary computer with base b = 2**16.  The caller
 676:src/int.c     **** supplies
 677:src/int.c     ****    1. Space q for the quotient, m - n + 1 halfwords (at least one).
 678:src/int.c     ****    2. Space r for the remainder (optional), n halfwords.
 679:src/int.c     ****    3. The dividend u, m halfwords, m >= 1.
 680:src/int.c     ****    4. The divisor v, n halfwords, n >= 2.
 681:src/int.c     **** The most significant digit of the divisor, v[n-1], must be nonzero.  The
 682:src/int.c     **** dividend u may have leading zeros; this just makes the algorithm take
 683:src/int.c     **** longer and makes the quotient contain more leading zeros.  A value of
 684:src/int.c     **** NULL may be given for the address of the remainder to signify that the
 685:src/int.c     **** caller does not want the remainder.
 686:src/int.c     ****    The program does not alter the input parameters u and v.
 687:src/int.c     ****    The quotient and remainder returned may have leading zeros.
 688:src/int.c     ****    For now, we must have m >= n.  Knuth's Algorithm D also requires
 689:src/int.c     **** that the dividend be at least as long as the divisor.  (In his terms,
 690:src/int.c     **** m >= 0 (unstated).  Therefore m+n >= n.) */
 691:src/int.c     **** 
 692:src/int.c     **** static void divmnu(unsigned short q[], unsigned short r[],
 693:src/int.c     **** 		const unsigned short u[], const unsigned short v[],
 694:src/int.c     **** 		const int m, const int n) {
 695:src/int.c     **** 	const unsigned int b = 65536;			// Number base (16 bits).
 696:src/int.c     **** 	unsigned qhat;					// Estimated quotient digit.
 697:src/int.c     **** 	unsigned rhat;					// A remainder.
 698:src/int.c     **** 	unsigned p;					// Product of two digits.
 699:src/int.c     **** 	int s, i, j, t, k;
 700:src/int.c     **** 	unsigned short vn[8];				// Normalised denominator
 701:src/int.c     **** 	unsigned short un[18];				// Normalised numerator
 702:src/int.c     **** 
 703:src/int.c     **** 	if (n == 1) {					// Take care of
 704:src/int.c     **** 		k = 0;					// the case of a
 705:src/int.c     **** 		for (j = m - 1; j >= 0; j--) {		// single-digit
 706:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 707:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 708:src/int.c     **** 		}
 709:src/int.c     **** 		r[0] = k;
 710:src/int.c     **** 		return;
 711:src/int.c     **** 	}
 712:src/int.c     **** 
 713:src/int.c     **** 	// Normalize by shifting v left just enough so that
 714:src/int.c     **** 	// its high-order bit is on, and shift u left the
 715:src/int.c     **** 	// same amount.  We may have to append a high-order
 716:src/int.c     **** 	// digit on the dividend; we do that unconditionally.
 717:src/int.c     **** 
 718:src/int.c     **** 	s = nlz(v[n-1]);       				 // 0 <= s <= 16.
 719:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 720:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 721:src/int.c     **** 	vn[0] = v[0] << s;
 722:src/int.c     **** 
 723:src/int.c     **** 	un[m] = u[m-1] >> (16-s);
 724:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 725:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 726:src/int.c     **** 	un[0] = u[0] << s;
ARM GAS  /tmp/ccjGZi8K.s 			page 20


 727:src/int.c     **** 
 728:src/int.c     **** 	for (j = m - n; j >= 0; j--) {       		// Main loop.
 729:src/int.c     **** 	// Compute estimate qhat of q[j].
 730:src/int.c     **** 	qhat = (un[j+n]*b + un[j+n-1])/vn[n-1];
 731:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 732:src/int.c     **** 	again:
 733:src/int.c     **** 	if (qhat >= b || qhat*vn[n-2] > b*rhat + un[j+n-2]) {
 734:src/int.c     **** 		qhat = qhat - 1;
 735:src/int.c     **** 		rhat = rhat + vn[n-1];
 736:src/int.c     **** 		if (rhat < b) goto again;
 737:src/int.c     **** 	}
 738:src/int.c     **** 
 739:src/int.c     **** 	// Multiply and subtract.
 740:src/int.c     **** 	k = 0;
 741:src/int.c     **** 	for (i = 0; i < n; i++) {
 742:src/int.c     **** 		p = qhat*vn[i];
 743:src/int.c     **** 		t = un[i+j] - k - (p & 0xFFFF);
 744:src/int.c     **** 		un[i+j] = t;
 745:src/int.c     **** 		k = (p >> 16) - (t >> 16);
 746:src/int.c     **** 	}
 747:src/int.c     **** 	t = un[j+n] - k;
 748:src/int.c     **** 	un[j+n] = t;
 749:src/int.c     **** 
 750:src/int.c     **** 	q[j] = qhat;					// Store quotient digit.
 751:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 752:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 753:src/int.c     **** 		k = 0;
 754:src/int.c     **** 		for (i = 0; i < n; i++) {
 755:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 756:src/int.c     **** 			un[i+j] = t;
 757:src/int.c     **** 			k = t >> 16;
 758:src/int.c     **** 		}
 759:src/int.c     **** 		un[j+n] = un[j+n] + k;
 760:src/int.c     **** 		}
 761:src/int.c     **** 	} // End j.
 762:src/int.c     **** 	// Unnormalize remainder
 763:src/int.c     **** 	for (i = 0; i < n; i++)
 764:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 765:src/int.c     **** }
 766:src/int.c     **** 
 767:src/int.c     **** static unsigned long long int divmod(const long long int z, const long long int y,
 768:src/int.c     **** 		const long long int x, int *sx, int *sy, unsigned long long *rem) {
 769:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 770:src/int.c     **** 	const unsigned int ws = word_size();
 771:src/int.c     **** 	const long long int tbm = topbit_mask();
 772:src/int.c     **** 	unsigned long long int d, h, l;
 773:src/int.c     **** 	unsigned short denom[4];
 774:src/int.c     **** 	unsigned short numer[8];
 775:src/int.c     **** 	unsigned short quot[5];
 776:src/int.c     **** 	unsigned short rmdr[4];
 777:src/int.c     **** 	int num_denom;
 778:src/int.c     **** 	int num_numer;
 779:src/int.c     **** 
 780:src/int.c     **** 	l = (unsigned long long int)z;		// Numerator low
 781:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 782:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 783:src/int.c     **** 		if (mode == MODE_2COMP) {
ARM GAS  /tmp/ccjGZi8K.s 			page 21


 784:src/int.c     **** 			l = mask_value(1 + ~l);
 785:src/int.c     **** 			h = ~h;
 786:src/int.c     **** 			if (l == 0)
 787:src/int.c     **** 				h++;
 788:src/int.c     **** 			h = mask_value(h);
 789:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 790:src/int.c     **** 			l = mask_value(~l);
 791:src/int.c     **** 			h = mask_value(~h);
 792:src/int.c     **** 		} else {
 793:src/int.c     **** 			h ^= tbm;
 794:src/int.c     **** 		}
 795:src/int.c     **** 		*sy = 1;
 796:src/int.c     **** 	} else
 797:src/int.c     **** 		*sy = 0;
 798:src/int.c     **** 	d = extract_value(x, sx);		// Demonimator
 799:src/int.c     **** 	if (d == 0) {
 800:src/int.c     **** 		err_div0(h|l, *sx, *sy);
 801:src/int.c     **** 		return 0;
 802:src/int.c     **** 	}
 803:src/int.c     **** 
 804:src/int.c     **** 	if (ws != 64) {
 805:src/int.c     **** 		l |= h << ws;
 806:src/int.c     **** 		h >>= (64 - ws);
 807:src/int.c     **** 	}
 808:src/int.c     **** 
 809:src/int.c     **** 	if (h == 0 && l == 0) {				// zero over
 810:src/int.c     **** 		*rem = 0;
 811:src/int.c     **** 		return 0;
 812:src/int.c     **** 	}
 813:src/int.c     **** 
 814:src/int.c     **** 	xset(quot, 0, sizeof(quot));
 815:src/int.c     **** 	xset(rmdr, 0, sizeof(rmdr));
 816:src/int.c     **** 
 817:src/int.c     **** 	breakup(d, denom);
 818:src/int.c     **** 	breakup(l, numer);
 819:src/int.c     **** 	breakup(h, numer+4);
 820:src/int.c     **** 
 821:src/int.c     **** 	for (num_denom = 4; num_denom > 1 && denom[num_denom-1] == 0; num_denom--);
 822:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 823:src/int.c     **** 
 824:src/int.c     **** 	divmnu(quot, rmdr, numer, denom, num_numer, num_denom);
 825:src/int.c     **** 
 826:src/int.c     **** 	*rem = packup(rmdr);
 827:src/int.c     **** 	return packup(quot);
 828:src/int.c     **** }
 829:src/int.c     **** #endif
 830:src/int.c     **** 
 831:src/int.c     **** long long int intDblDiv(long long int z, long long int y, long long int x) {
 832:src/int.c     **** #ifndef TINY_BUILD
 833:src/int.c     **** 	unsigned long long int q, r;
 834:src/int.c     **** 	int sx, sy;
 835:src/int.c     **** 
 836:src/int.c     **** 	q = divmod(z, y, x, &sx, &sy, &r);
 837:src/int.c     **** 	set_overflow(0);
 838:src/int.c     **** 	set_carry(r != 0);
 839:src/int.c     **** 	return build_value(q, sx != sy);
 840:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 22


 841:src/int.c     **** 	return 0;
 842:src/int.c     **** #endif
 843:src/int.c     **** }
 844:src/int.c     **** 
 845:src/int.c     **** long long int intDblRmdr(long long int z, long long int y, long long int x) {
 846:src/int.c     **** #ifndef TINY_BUILD
 847:src/int.c     **** 	unsigned long long int r;
 848:src/int.c     **** 	int sx, sy;
 849:src/int.c     **** 
 850:src/int.c     **** 	divmod(z, y, x, &sx, &sy, &r);
 851:src/int.c     **** 	return build_value(r, sy);
 852:src/int.c     **** #else
 853:src/int.c     **** 	return 0;
 854:src/int.c     **** #endif
 855:src/int.c     **** }
 856:src/int.c     **** 
 857:src/int.c     **** 
 858:src/int.c     **** long long int intNot(long long int x) {
 859:src/int.c     **** 	return mask_value(~x);
 860:src/int.c     **** }
 861:src/int.c     **** 
 862:src/int.c     **** long long int intBooleanOp(long long int y, long long int x) {
 863:src/int.c     **** 	long long result;
 864:src/int.c     **** 	const int op = XeqOpCode - (OP_DYA | OP_LAND);
 865:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 866:src/int.c     **** 
 867:src/int.c     **** 	switch (op - not) {
 868:src/int.c     **** 	case 0:  result = y & x; break;
 869:src/int.c     **** 	case 1:  result = y | x; break;
 870:src/int.c     **** 	default: result = y ^ x; break;
 871:src/int.c     **** 	}
 872:src/int.c     **** 	if (not)
 873:src/int.c     **** 		result = ~result;
 874:src/int.c     **** 	return mask_value(result);
 875:src/int.c     **** }
 876:src/int.c     **** 
 877:src/int.c     **** /* Fraction and integer parts are very easy for integers.
 878:src/int.c     ****  */
 879:src/int.c     **** long long int intFP(long long int x) {
 880:src/int.c     **** 	return 0;
 881:src/int.c     **** }
 882:src/int.c     **** 
 883:src/int.c     **** 
 884:src/int.c     **** long long int intSign(long long int x) {
 885:src/int.c     **** 	int sgn;
 886:src/int.c     **** 	unsigned long long int v = extract_value(x, &sgn);
 887:src/int.c     **** 
 888:src/int.c     **** 	if (v == 0)
 889:src/int.c     **** 		sgn = 0;
 890:src/int.c     **** 	else
 891:src/int.c     **** 		v = 1;
 892:src/int.c     **** 	return build_value(v, sgn);
 893:src/int.c     **** }
 894:src/int.c     **** 
 895:src/int.c     **** 
 896:src/int.c     **** /* Single bit shifts are special internal version.
 897:src/int.c     ****  * The multi-bit shifts vector through these.
ARM GAS  /tmp/ccjGZi8K.s 			page 23


 898:src/int.c     ****  */
 899:src/int.c     **** 
 900:src/int.c     **** #ifndef TINY_BUILD
 901:src/int.c     **** static long long int intLSL(long long int x) {
 902:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 903:src/int.c     **** 	return mask_value((x << 1) & ~1);
 904:src/int.c     **** }
 905:src/int.c     **** 
 906:src/int.c     **** static long long int intLSR(long long int x) {
 907:src/int.c     **** 	set_carry(0 != (x & 1));
 908:src/int.c     **** 	return mask_value((x >> 1) & ~topbit_mask());
 909:src/int.c     **** }
 910:src/int.c     **** 
 911:src/int.c     **** static long long int intASR(long long int x) {
 912:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 913:src/int.c     **** 	const long long int tbm = topbit_mask();
 914:src/int.c     **** 	long long int y;
 915:src/int.c     **** 
 916:src/int.c     **** 	set_carry(x & 1);
 917:src/int.c     **** 	if (mode == MODE_SGNMANT)
 918:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 919:src/int.c     **** 
 920:src/int.c     **** 	y = x >> 1;
 921:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 922:src/int.c     **** 		y |= tbm;
 923:src/int.c     **** 	return y;
 924:src/int.c     **** }
 925:src/int.c     **** 
 926:src/int.c     **** static long long int intRL(long long int x) {
 927:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 928:src/int.c     **** 
 929:src/int.c     **** 	set_carry(cry);
 930:src/int.c     **** 	return mask_value(intLSL(x) | cry);
 931:src/int.c     **** }
 932:src/int.c     **** 
 933:src/int.c     **** static long long int intRR(long long int x) {
 934:src/int.c     **** 	const int cry = x & 1;
 935:src/int.c     **** 
 936:src/int.c     **** 	set_carry(cry);
 937:src/int.c     **** 	x = intLSR(x);
 938:src/int.c     **** 	if (cry)
 939:src/int.c     **** 		x |= topbit_mask();
 940:src/int.c     **** 	return mask_value(x);
 941:src/int.c     **** }
 942:src/int.c     **** 
 943:src/int.c     **** static long long int intRLC(long long int x) {
 944:src/int.c     **** 	const int cin = get_carry();
 945:src/int.c     **** 	set_carry((topbit_mask() & x)?1:0);
 946:src/int.c     **** 	return mask_value(intLSL(x) | cin);
 947:src/int.c     **** }
 948:src/int.c     **** 
 949:src/int.c     **** static long long int intRRC(long long int x) {
 950:src/int.c     **** 	const int cin = get_carry();
 951:src/int.c     **** 
 952:src/int.c     **** 	set_carry(x&1);
 953:src/int.c     **** 	x = intLSR(x);
 954:src/int.c     **** 	if (cin)
ARM GAS  /tmp/ccjGZi8K.s 			page 24


 955:src/int.c     **** 		x |= topbit_mask();
 956:src/int.c     **** 	return mask_value(x);
 957:src/int.c     **** }
 958:src/int.c     **** #endif
 959:src/int.c     **** 
 960:src/int.c     **** /* Like the above but taking the count argument from the opcode.
 961:src/int.c     ****  * Also possibly register indirect but that is dealt with elsewhere.
 962:src/int.c     ****  */
 963:src/int.c     **** void introt(unsigned int arg, enum rarg op) {
 964:src/int.c     **** #ifndef TINY_BUILD
 965:src/int.c     **** 	long long int (*f)(long long int);
 966:src/int.c     **** 	unsigned int mod;
 967:src/int.c     **** 	unsigned int ws;
 968:src/int.c     **** 	long long int x;
 969:src/int.c     **** 	unsigned int i;
 970:src/int.c     **** 	
 971:src/int.c     **** 	if (check_intmode())
 972:src/int.c     **** 		return;
 973:src/int.c     **** 
 974:src/int.c     **** 	ws = word_size();
 975:src/int.c     **** 	x = getX_int();
 976:src/int.c     **** 
 977:src/int.c     **** 	if (arg != 0) {
 978:src/int.c     **** 		switch (op) {
 979:src/int.c     **** 		case RARG_RL:	f = &intRL;	mod = ws;	break;
 980:src/int.c     **** 		case RARG_RR:	f = &intRR;	mod = ws;	break;
 981:src/int.c     **** 		case RARG_RLC:	f = &intRLC;	mod = ws + 1;	break;
 982:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 983:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 984:src/int.c     **** 		case RARG_SR:	f = &intLSR;	mod = 0;	break;
 985:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 986:src/int.c     **** 		default:
 987:src/int.c     **** 			return;
 988:src/int.c     **** 		}
 989:src/int.c     **** 		if (arg > ws) {
 990:src/int.c     **** 			if (mod)
 991:src/int.c     **** 				arg = arg % mod;
 992:src/int.c     **** 			else
 993:src/int.c     **** 				arg = ws;
 994:src/int.c     **** 		}
 995:src/int.c     **** 		for (i=0; i<arg; i++)
 996:src/int.c     **** 			x = (*f)(x);
 997:src/int.c     **** 	}
 998:src/int.c     **** 	setlastX();
 999:src/int.c     **** 	setX_int(mask_value(x));
1000:src/int.c     **** #endif
1001:src/int.c     **** }
1002:src/int.c     **** 
1003:src/int.c     **** 
1004:src/int.c     **** #ifndef TINY_BUILD
1005:src/int.c     **** /* Some code to count bits.  We start with a routine to count bits in a single
1006:src/int.c     ****  * 32 bit word and call this twice.
1007:src/int.c     ****  */
1008:src/int.c     **** static unsigned int count32bits(unsigned long int v) {
1009:src/int.c     **** 	v = v - ((v >> 1) & 0x55555555);
1010:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
1011:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
ARM GAS  /tmp/ccjGZi8K.s 			page 25


1012:src/int.c     **** }
1013:src/int.c     **** 
1014:src/int.c     **** static unsigned int count64bits(long long int x) {
1015:src/int.c     **** 	return count32bits(x & 0xffffffff) + count32bits((x >> 32) & 0xffffffff);
1016:src/int.c     **** }
1017:src/int.c     **** #endif
1018:src/int.c     **** 
1019:src/int.c     **** long long int intNumBits(long long int x) {
1020:src/int.c     **** #ifndef TINY_BUILD
1021:src/int.c     **** 	return mask_value(count64bits(x));
1022:src/int.c     **** #else
1023:src/int.c     **** 	return 0;
1024:src/int.c     **** #endif
1025:src/int.c     **** }
1026:src/int.c     **** 
1027:src/int.c     **** 
1028:src/int.c     **** /* Integer floor(sqrt())
1029:src/int.c     ****  */
1030:src/int.c     **** long long int intSqrt(long long int x) {
1031:src/int.c     **** #if !defined(TINY_BUILD)
1032:src/int.c     **** 	int sx;
1033:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1034:src/int.c     **** 	unsigned long long int n0, n1;
1035:src/int.c     **** 
1036:src/int.c     **** 	if (sx) {
1037:src/int.c     **** 		report_err(ERR_DOMAIN);
1038:src/int.c     **** 		return 0;
1039:src/int.c     **** 	}
1040:src/int.c     **** 	if (v == 0)
1041:src/int.c     **** 		n1 = 0;
1042:src/int.c     **** 	else {
1043:src/int.c     **** 		n0 = v / 2 + 1;
1044:src/int.c     **** 		n1 = v / n0 + n0 / 2;
1045:src/int.c     **** 		while (n1 < n0) {
1046:src/int.c     **** 			n0 = n1;
1047:src/int.c     **** 			n1 = (n0 + v / n0) / 2;
1048:src/int.c     **** 		}
1049:src/int.c     **** 		n0 = n1 * n1;
1050:src/int.c     **** 		if (n0 > v)
1051:src/int.c     **** 			n1--;
1052:src/int.c     **** 		set_carry((n0 != v)?1:0);
1053:src/int.c     **** 	}
1054:src/int.c     **** 	return build_value(n1, sx);
1055:src/int.c     **** #else
1056:src/int.c     **** 	return 0;
1057:src/int.c     **** #endif
1058:src/int.c     **** }
1059:src/int.c     **** 
1060:src/int.c     **** long long int int_power_helper(unsigned long long int vy, unsigned long long int vx, int overflow) 
1061:src/int.c     **** 	unsigned long long int r = 1;
1062:src/int.c     **** 	unsigned int i;
1063:src/int.c     **** 	unsigned int ws;
1064:src/int.c     **** 	int overflow_next = 0;
1065:src/int.c     **** 
1066:src/int.c     **** 	ws = word_size();
1067:src/int.c     **** 	for (i=0; i<ws && vx != 0; i++) {
1068:src/int.c     **** 		if (vx & 1) {
ARM GAS  /tmp/ccjGZi8K.s 			page 26


1069:src/int.c     **** 			if (overflow_next)
1070:src/int.c     **** 				overflow = 1;
1071:src/int.c     **** 			r = multiply_with_overflow(r, vy, &overflow);
1072:src/int.c     **** 		}
1073:src/int.c     **** 		vx >>= 1;
1074:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
1075:src/int.c     **** 	}
1076:src/int.c     **** 	set_overflow(overflow);
1077:src/int.c     **** 	return r;
1078:src/int.c     **** }
1079:src/int.c     **** 
1080:src/int.c     **** /* Integer power y^x
1081:src/int.c     ****  */
1082:src/int.c     **** long long int intPower(long long int y, long long int x) {
1083:src/int.c     **** #ifndef TINY_BUILD
1084:src/int.c     **** 	int sx, sy, sr;
1085:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
1086:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
1087:src/int.c     **** 
1088:src/int.c     **** 	if (vx == 0 && vy == 0) {
1089:src/int.c     **** 		report_err(ERR_DOMAIN);
1090:src/int.c     **** 		return 0;
1091:src/int.c     **** 	}
1092:src/int.c     **** 	set_carry(0);
1093:src/int.c     **** 	set_overflow(0);
1094:src/int.c     **** 
1095:src/int.c     **** 	if (vx == 0) {
1096:src/int.c     **** 		if (vy == 0) {
1097:src/int.c     **** 			set_overflow(1);
1098:src/int.c     **** 			return 0;
1099:src/int.c     **** 		}
1100:src/int.c     **** 		return 1;
1101:src/int.c     **** 	} else if (vy == 0)
1102:src/int.c     **** 		return 0;
1103:src/int.c     **** 
1104:src/int.c     **** 	if (sx) {
1105:src/int.c     **** 		set_carry(1);
1106:src/int.c     **** 		return 0;
1107:src/int.c     **** 	}
1108:src/int.c     **** 
1109:src/int.c     **** 	sr = (sy && (vx & 1))?1:0;	// Determine the sign of the result
1110:src/int.c     **** 
1111:src/int.c     **** 	return build_value(int_power_helper(vy, vx, 0), sr);
1112:src/int.c     **** #else
1113:src/int.c     **** 	return 0;
1114:src/int.c     **** #endif
1115:src/int.c     **** }
1116:src/int.c     **** 
1117:src/int.c     **** 
1118:src/int.c     **** /* Integer floor(log2())
1119:src/int.c     ****  */
1120:src/int.c     **** long long int intLog2(long long int x) {
1121:src/int.c     **** #ifndef TINY_BUILD
1122:src/int.c     **** 	int sx;
1123:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1124:src/int.c     **** 	unsigned int r = 0;
1125:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 27


1126:src/int.c     **** 	if (v == 0 || sx) {
1127:src/int.c     **** 		report_err(ERR_DOMAIN);
1128:src/int.c     **** 		return 0;
1129:src/int.c     **** 	}
1130:src/int.c     **** 	set_carry((v & (v-1))?1:0);
1131:src/int.c     **** 	if (v != 0)
1132:src/int.c     **** 		while (v >>= 1)
1133:src/int.c     **** 			r++;
1134:src/int.c     **** 	return build_value(r, sx);
1135:src/int.c     **** #else
1136:src/int.c     **** 	return 0;
1137:src/int.c     **** #endif
1138:src/int.c     **** }
1139:src/int.c     **** 
1140:src/int.c     **** 
1141:src/int.c     **** /* 2^x
1142:src/int.c     ****  */
1143:src/int.c     **** long long int int2pow(long long int x) {
1144:src/int.c     **** #ifndef TINY_BUILD
1145:src/int.c     **** 	int sx;
1146:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1147:src/int.c     **** 	unsigned int ws;
1148:src/int.c     **** 
1149:src/int.c     **** 	set_overflow(0);
1150:src/int.c     **** 	set_carry(sx && v == 1);
1151:src/int.c     **** 	if (sx && v != 0)
1152:src/int.c     **** 		return 0;
1153:src/int.c     **** 
1154:src/int.c     **** 	ws = word_size();
1155:src/int.c     **** 	if (int_mode() != MODE_UNSIGNED)
1156:src/int.c     **** 		ws--;
1157:src/int.c     **** 	if (v >= ws) {
1158:src/int.c     **** 		set_carry(v == ws);
1159:src/int.c     **** 		set_overflow(1);
1160:src/int.c     **** 		return 0;
1161:src/int.c     **** 	}
1162:src/int.c     **** 
1163:src/int.c     **** 	return 1LL << (unsigned int)(v & 0xff);
1164:src/int.c     **** #else
1165:src/int.c     **** 	return 0;
1166:src/int.c     **** #endif
1167:src/int.c     **** }
1168:src/int.c     **** 
1169:src/int.c     **** 
1170:src/int.c     **** /* Integer floor(log10())
1171:src/int.c     ****  */
1172:src/int.c     **** long long int intLog10(long long int x) {
1173:src/int.c     **** #ifndef TINY_BUILD
1174:src/int.c     **** 	int sx;
1175:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1176:src/int.c     **** 	int r = 0;
1177:src/int.c     **** 	int c = 0;
1178:src/int.c     **** 
1179:src/int.c     **** 	if (v == 0 || sx) {
1180:src/int.c     **** 		report_err(ERR_DOMAIN);
1181:src/int.c     **** 		return 0;
1182:src/int.c     **** 	}
ARM GAS  /tmp/ccjGZi8K.s 			page 28


1183:src/int.c     **** 	while (v >= 10) {
1184:src/int.c     **** 		r++;
1185:src/int.c     **** 		if (v % 10)
1186:src/int.c     **** 			c = 1;
1187:src/int.c     **** 		v /= 10;
1188:src/int.c     **** 	}
1189:src/int.c     **** 	set_carry(c || v != 1);
1190:src/int.c     **** 	return build_value(r, sx);
1191:src/int.c     **** #else
1192:src/int.c     **** 	return 0;
1193:src/int.c     **** #endif
1194:src/int.c     **** }
1195:src/int.c     **** 
1196:src/int.c     **** 
1197:src/int.c     **** /* 10^x
1198:src/int.c     ****  */
1199:src/int.c     **** long long int int10pow(long long int x) {
1200:src/int.c     **** 	int sx;
1201:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
1202:src/int.c     **** 	const unsigned int ws = word_size();
1203:src/int.c     **** 	int overflow = 0;
1204:src/int.c     **** 	
1205:src/int.c     **** 	set_carry(0);
1206:src/int.c     **** 	if (vx == 0) {
1207:src/int.c     **** 		set_overflow(0);
1208:src/int.c     **** 		return 1;
1209:src/int.c     **** 	}
1210:src/int.c     **** 	if (sx) {
1211:src/int.c     **** 		set_carry(1);
1212:src/int.c     **** 		return 0;
1213:src/int.c     **** 	}
1214:src/int.c     **** 
1215:src/int.c     **** 	if (ws <= 3 || (int_mode() != MODE_UNSIGNED && ws == 4))
1216:src/int.c     **** 		overflow = 1;
1217:src/int.c     **** 	return build_value(int_power_helper(10, x, overflow), 0);
1218:src/int.c     **** }
1219:src/int.c     **** 
1220:src/int.c     **** 
1221:src/int.c     **** /* -1^x
1222:src/int.c     ****  */
1223:src/int.c     **** long long int int_1pow(long long int x) {
1224:src/int.c     **** #ifndef TINY_BUILD
1225:src/int.c     **** 	int sx;
1226:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
1227:src/int.c     **** 	int odd = xv & 1;
1228:src/int.c     **** 
1229:src/int.c     **** 	set_overflow((int_mode() == MODE_UNSIGNED && odd) ? 1 : 0);
1230:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
1231:src/int.c     **** #else
1232:src/int.c     **** 	return 0;
1233:src/int.c     **** #endif
1234:src/int.c     **** }
1235:src/int.c     **** 
1236:src/int.c     **** 
1237:src/int.c     **** /* Mirror - reverse the bits in the word
1238:src/int.c     ****  */
1239:src/int.c     **** long long int intMirror(long long int x) {
ARM GAS  /tmp/ccjGZi8K.s 			page 29


1240:src/int.c     **** #ifndef TINY_BUILD
1241:src/int.c     **** 	long long int r = 0;
1242:src/int.c     **** 	unsigned int n = word_size();
1243:src/int.c     **** 	unsigned int i;
1244:src/int.c     **** 
1245:src/int.c     **** 	if (x == 0)
1246:src/int.c     **** 		return 0;
1247:src/int.c     **** 
1248:src/int.c     **** 	for (i=0; i<n; i++)
1249:src/int.c     **** 		if (x & (1LL << i))
1250:src/int.c     **** 			r |= 1LL << (n-i-1);
1251:src/int.c     **** 	return r;
1252:src/int.c     **** #else
1253:src/int.c     **** 	return 0;
1254:src/int.c     **** #endif
1255:src/int.c     **** }
1256:src/int.c     **** 
1257:src/int.c     **** 
1258:src/int.c     **** /* Justify to the end of the register
1259:src/int.c     ****  */
1260:src/int.c     **** static void justify(long long int (*shift)(long long int), const long long int mask) {
1261:src/int.c     **** 	unsigned int c = 0;
1262:src/int.c     **** 	long long int v;
1263:src/int.c     **** 
1264:src/int.c     **** 	v = getX_int();
1265:src/int.c     **** 	setlastX();
1266:src/int.c     **** 	lift();
1267:src/int.c     **** 	if (v != 0) {
1268:src/int.c     **** 		const int flags = save_flags();
1269:src/int.c     **** 		while ((v & mask) == 0) {
1270:src/int.c     **** 			v = (*shift)(v);
1271:src/int.c     **** 			c++;
1272:src/int.c     **** 		}
1273:src/int.c     **** 		restore_flags(flags);
1274:src/int.c     **** 		set_reg_n_int(regY_idx, v);
1275:src/int.c     **** 	}
1276:src/int.c     **** 	setX_int((long long int)c);
1277:src/int.c     **** }
1278:src/int.c     **** 
1279:src/int.c     **** void int_justify(enum nilop op) {
1280:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
1281:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
1282:src/int.c     **** }
1283:src/int.c     **** 
1284:src/int.c     **** 
1285:src/int.c     **** /* Create n bit masks at either end of the word.
1286:src/int.c     ****  * If the n is negative, the mask is created at the other end of the
1287:src/int.c     ****  * word.
1288:src/int.c     ****  */
1289:src/int.c     **** void intmsks(unsigned int arg, enum rarg op) {
1290:src/int.c     **** #ifndef TINY_BUILD
1291:src/int.c     **** 	long long int mask;
1292:src/int.c     **** 	long long int x;
1293:src/int.c     **** 	unsigned int i;
1294:src/int.c     **** 	long long int (*f)(long long int);
1295:src/int.c     **** 	const int carry = get_carry();
1296:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 30


1297:src/int.c     **** 	lift();
1298:src/int.c     **** 
1299:src/int.c     **** 	if (op == RARG_MASKL) {
1300:src/int.c     **** 		mask = topbit_mask();
1301:src/int.c     **** 		f = &intLSR;
1302:src/int.c     **** 	} else {
1303:src/int.c     **** 		mask = 1LL;
1304:src/int.c     **** 		f = &intLSL;
1305:src/int.c     **** 	}
1306:src/int.c     **** 	if (arg >= word_size()) {
1307:src/int.c     **** 		x = mask_value(-1);
1308:src/int.c     **** 	} else {
1309:src/int.c     **** 		x = 0;
1310:src/int.c     **** 		for (i=0; i<arg; i++) {
1311:src/int.c     **** 			x |= mask;
1312:src/int.c     **** 			mask = (*f)(mask);
1313:src/int.c     **** 		}
1314:src/int.c     **** 	}
1315:src/int.c     **** 	setX_int(x);
1316:src/int.c     **** 	set_carry(carry);
1317:src/int.c     **** #endif
1318:src/int.c     **** }
1319:src/int.c     **** 
1320:src/int.c     **** 
1321:src/int.c     **** /* Set, clear, flip and test bits */
1322:src/int.c     **** void intbits(unsigned int arg, enum rarg op) {
1323:src/int.c     **** #ifndef TINY_BUILD
1324:src/int.c     **** 	long long int m, x;
1325:src/int.c     **** 
1326:src/int.c     **** 	if (check_intmode())
1327:src/int.c     **** 		return;
1328:src/int.c     **** 
1329:src/int.c     **** 	m =  (arg >= word_size())?0:(1LL << arg);
1330:src/int.c     **** 	x = getX_int();
1331:src/int.c     **** 
1332:src/int.c     **** 	switch (op) {
1333:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
1334:src/int.c     **** 	case RARG_CB:	x &= ~m;	setlastX();		break;
1335:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
1336:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
1337:src/int.c     **** 	case RARG_BC:	fin_tst((m != 0 && (x&m) != 0)?0:1);	break;
1338:src/int.c     **** 	default:
1339:src/int.c     **** 		return;
1340:src/int.c     **** 	}
1341:src/int.c     **** 
1342:src/int.c     **** 	setX_int(x);
1343:src/int.c     **** #endif
1344:src/int.c     **** }
1345:src/int.c     **** 
1346:src/int.c     **** long long int intFib(long long int x) {
1347:src/int.c     **** #ifndef TINY_BUILD
1348:src/int.c     **** 	int sx, s;
1349:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1350:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
1351:src/int.c     **** 	unsigned long long int a0, a1;
1352:src/int.c     **** 	unsigned int n, i;
1353:src/int.c     **** 	long long int tbm;
ARM GAS  /tmp/ccjGZi8K.s 			page 31


1354:src/int.c     **** 
1355:src/int.c     **** 	/* Limit things so we don't loop for too long.
1356:src/int.c     **** 	 * The actual largest non-overflowing values for 64 bit integers
1357:src/int.c     **** 	 * are Fib(92) for signed quantities and Fib(93) for unsigned.
1358:src/int.c     **** 	 * We allow a bit more and maintain the low order digits.
1359:src/int.c     **** 	 */
1360:src/int.c     **** 	if (v >= 100) {
1361:src/int.c     **** 		set_overflow(1);
1362:src/int.c     **** 		return 0;
1363:src/int.c     **** 	}
1364:src/int.c     **** 	set_overflow(0);
1365:src/int.c     **** 	n = v & 0xff;
1366:src/int.c     **** 	if (n <= 1)
1367:src/int.c     **** 		return build_value(n, 0);
1368:src/int.c     **** 
1369:src/int.c     **** 	/* Negative integers produce the same values as positive
1370:src/int.c     **** 	 * except the sign for negative evens is negative.
1371:src/int.c     **** 	 */
1372:src/int.c     **** 	s = (sx && (n & 1) == 0)?1:0;
1373:src/int.c     **** 
1374:src/int.c     **** 	/* Mask to check for overflow */
1375:src/int.c     **** 	tbm = topbit_mask();
1376:src/int.c     **** 	if (mode == MODE_UNSIGNED)
1377:src/int.c     **** 		tbm <<= 1;
1378:src/int.c     **** 
1379:src/int.c     **** 	/* Down to the computation.
1380:src/int.c     **** 	 */
1381:src/int.c     **** 	a0 = 0;
1382:src/int.c     **** 	a1 = 1;
1383:src/int.c     **** 	for (i=1; i<n; i++) {
1384:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
1385:src/int.c     **** 		if ((anew & tbm) || anew < a1)
1386:src/int.c     **** 			set_overflow(1);
1387:src/int.c     **** 		a0 = a1;
1388:src/int.c     **** 		a1 = anew;
1389:src/int.c     **** 	}
1390:src/int.c     **** 	return build_value(a1, s);
1391:src/int.c     **** #else
1392:src/int.c     **** 	return 0;
1393:src/int.c     **** #endif
1394:src/int.c     **** }
1395:src/int.c     **** 
1396:src/int.c     **** 
1397:src/int.c     **** /* Calculate (a . b) mod c taking care to avoid overflow */
1398:src/int.c     **** static unsigned long long mulmod(const unsigned long long int a, unsigned long long int b, const un
1399:src/int.c     **** 	unsigned long long int x=0, y=a%c;
1400:src/int.c     **** 	while (b > 0) {
1401:src/int.c     **** 		if ((b & 1))
1402:src/int.c     **** 			x = (x+y)%c;
1403:src/int.c     **** 		y = (y+y)%c;
1404:src/int.c     **** 		b /= 2;
1405:src/int.c     **** 	}
1406:src/int.c     **** 	return x % c;
1407:src/int.c     **** }
1408:src/int.c     **** 
1409:src/int.c     **** /* Calculate (a ^ b) mod c */
1410:src/int.c     **** static unsigned long long int expmod(const unsigned long long int a, unsigned long long int b, cons
ARM GAS  /tmp/ccjGZi8K.s 			page 32


 312              		.loc 1 1410 128 is_stmt 1 view -0
 313              		.cfi_startproc
 314              		@ args = 8, pretend = 0, frame = 56
 315              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/int.c     **** 	unsigned long long int x=1, y=a;
 316              		.loc 1 1411 2 view .LVU70
1410:src/int.c     **** 	unsigned long long int x=1, y=a;
 317              		.loc 1 1410 128 is_stmt 0 view .LVU71
 318 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 319              		.cfi_def_cfa_offset 36
 320              		.cfi_offset 4, -36
 321              		.cfi_offset 5, -32
 322              		.cfi_offset 6, -28
 323              		.cfi_offset 7, -24
 324              		.cfi_offset 8, -20
 325              		.cfi_offset 9, -16
 326              		.cfi_offset 10, -12
 327              		.cfi_offset 11, -8
 328              		.cfi_offset 14, -4
 329 0004 2DED028B 		vpush.64	{d8}
 330              		.cfi_def_cfa_offset 44
 331              		.cfi_offset 80, -44
 332              		.cfi_offset 81, -40
 333 0008 8FB0     		sub	sp, sp, #60
 334              		.cfi_def_cfa_offset 104
1410:src/int.c     **** 	unsigned long long int x=1, y=a;
 335              		.loc 1 1410 128 view .LVU72
 336 000a CDE90623 		strd	r2, r3, [sp, #24]
1412:src/int.c     **** 	while (b > 0) {
 337              		.loc 1 1412 2 is_stmt 1 view .LVU73
 338              	.LVL17:
 339              		.loc 1 1412 8 view .LVU74
 340 000e DDE90623 		ldrd	r2, [sp, #24]
 341 0012 1343     		orrs	r3, r2, r3
1410:src/int.c     **** 	unsigned long long int x=1, y=a;
 342              		.loc 1 1410 128 is_stmt 0 view .LVU75
 343 0014 DDE91AAB 		ldrd	r10, [sp, #104]
 344              		.loc 1 1412 8 view .LVU76
 345 0018 00F0CC80 		beq	.L20
1411:src/int.c     **** 	unsigned long long int x=1, y=a;
 346              		.loc 1 1411 25 view .LVU77
 347 001c 0123     		movs	r3, #1
 348 001e 08EE103A 		vmov	s16, r3	@ int
 349 0022 0023     		movs	r3, #0
 350 0024 08EE903A 		vmov	s17, r3	@ int
 351 0028 0446     		mov	r4, r0
 352 002a 0D46     		mov	r5, r1
 353              	.LVL18:
 354              	.L28:
1413:src/int.c     **** 		if ((b & 1))
 355              		.loc 1 1413 3 is_stmt 1 view .LVU78
 356              		.loc 1 1413 10 is_stmt 0 view .LVU79
 357 002c 069B     		ldr	r3, [sp, #24]
 358 002e 03F00103 		and	r3, r3, #1
 359 0032 0893     		str	r3, [sp, #32]
 360 0034 0023     		movs	r3, #0
 361 0036 0993     		str	r3, [sp, #36]
ARM GAS  /tmp/ccjGZi8K.s 			page 33


 362              		.loc 1 1413 6 view .LVU80
 363 0038 DDE90823 		ldrd	r2, [sp, #32]
 364 003c 1343     		orrs	r3, r2, r3
 365 003e 5CD1     		bne	.L21
 366 0040 18EE100A 		vmov	r0, s16	@ int
 367 0044 18EE901A 		vmov	r1, s17	@ int
 368 0048 5246     		mov	r2, r10
 369 004a 5B46     		mov	r3, fp
 370 004c FFF7FEFF 		bl	__aeabi_uldivmod
 371              	.LVL19:
 372              	.LBB613:
 373              	.LBB614:
1399:src/int.c     **** 	while (b > 0) {
 374              		.loc 1 1399 30 view .LVU81
 375 0050 2046     		mov	r0, r4
 376 0052 CDE90C23 		strd	r2, r3, [sp, #48]
1399:src/int.c     **** 	while (b > 0) {
 377              		.loc 1 1399 30 view .LVU82
 378              	.LBE614:
 379              	.LBE613:
1414:src/int.c     **** 			x = mulmod(x, y, c);
1415:src/int.c     **** 		y = mulmod(y, y, c);
 380              		.loc 1 1415 3 is_stmt 1 view .LVU83
 381              	.LVL20:
 382              	.LBB619:
 383              	.LBI613:
1398:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 384              		.loc 1 1398 27 view .LVU84
 385              	.LBB615:
1399:src/int.c     **** 	while (b > 0) {
 386              		.loc 1 1399 2 view .LVU85
1399:src/int.c     **** 	while (b > 0) {
 387              		.loc 1 1399 30 is_stmt 0 view .LVU86
 388 0056 2946     		mov	r1, r5
 389 0058 5246     		mov	r2, r10
 390 005a 5B46     		mov	r3, fp
 391 005c FFF7FEFF 		bl	__aeabi_uldivmod
 392              	.LVL21:
 393 0060 1F46     		mov	r7, r3
1400:src/int.c     **** 		if ((b & 1))
 394              		.loc 1 1400 8 view .LVU87
 395 0062 54EA0503 		orrs	r3, r4, r5
1399:src/int.c     **** 	while (b > 0) {
 396              		.loc 1 1399 30 view .LVU88
 397 0066 1646     		mov	r6, r2
 398              	.LVL22:
1400:src/int.c     **** 		if ((b & 1))
 399              		.loc 1 1400 2 is_stmt 1 view .LVU89
1400:src/int.c     **** 		if ((b & 1))
 400              		.loc 1 1400 8 view .LVU90
 401 0068 34D0     		beq	.L23
 402              	.LVL23:
 403              	.L22:
1399:src/int.c     **** 	while (b > 0) {
 404              		.loc 1 1399 30 is_stmt 0 view .LVU91
 405 006a 4FF00008 		mov	r8, #0
 406 006e CDE90188 		strd	r8, r8, [sp, #4]
ARM GAS  /tmp/ccjGZi8K.s 			page 34


 407              	.LVL24:
 408              	.L27:
1401:src/int.c     **** 			x = (x+y)%c;
 409              		.loc 1 1401 3 is_stmt 1 view .LVU92
1402:src/int.c     **** 		y = (y+y)%c;
 410              		.loc 1 1402 4 view .LVU93
1401:src/int.c     **** 			x = (x+y)%c;
 411              		.loc 1 1401 10 is_stmt 0 view .LVU94
 412 0072 04F00108 		and	r8, r4, #1
 413 0076 4FF00009 		mov	r9, #0
1401:src/int.c     **** 			x = (x+y)%c;
 414              		.loc 1 1401 6 view .LVU95
 415 007a 58EA0903 		orrs	r3, r8, r9
 416 007e 0AD0     		beq	.L26
1402:src/int.c     **** 		y = (y+y)%c;
 417              		.loc 1 1402 6 view .LVU96
 418 0080 019B     		ldr	r3, [sp, #4]
 419 0082 0299     		ldr	r1, [sp, #8]
 420 0084 9819     		adds	r0, r3, r6
 421 0086 47EB0101 		adc	r1, r7, r1
 422 008a 5246     		mov	r2, r10
 423 008c 5B46     		mov	r3, fp
 424 008e FFF7FEFF 		bl	__aeabi_uldivmod
 425              	.LVL25:
 426 0092 CDE90123 		strd	r2, r3, [sp, #4]
 427              	.LVL26:
 428              	.L26:
1403:src/int.c     **** 		b /= 2;
 429              		.loc 1 1403 3 is_stmt 1 view .LVU97
1403:src/int.c     **** 		b /= 2;
 430              		.loc 1 1403 9 is_stmt 0 view .LVU98
 431 0096 B019     		adds	r0, r6, r6
 432 0098 47EB0701 		adc	r1, r7, r7
1403:src/int.c     **** 		b /= 2;
 433              		.loc 1 1403 5 view .LVU99
 434 009c 5246     		mov	r2, r10
 435 009e 5B46     		mov	r3, fp
 436 00a0 FFF7FEFF 		bl	__aeabi_uldivmod
 437              	.LVL27:
1404:src/int.c     **** 	}
 438              		.loc 1 1404 5 view .LVU100
 439 00a4 4FEA540C 		lsr	ip, r4, #1
 440 00a8 4CEAC57C 		orr	ip, ip, r5, lsl #31
 441 00ac 6908     		lsrs	r1, r5, #1
 442 00ae 6446     		mov	r4, ip
 443              	.LVL28:
1404:src/int.c     **** 	}
 444              		.loc 1 1404 5 view .LVU101
 445 00b0 0D46     		mov	r5, r1
1403:src/int.c     **** 		b /= 2;
 446              		.loc 1 1403 5 view .LVU102
 447 00b2 1F46     		mov	r7, r3
 448              	.LVL29:
1400:src/int.c     **** 		if ((b & 1))
 449              		.loc 1 1400 8 view .LVU103
 450 00b4 54EA0503 		orrs	r3, r4, r5
1403:src/int.c     **** 		b /= 2;
ARM GAS  /tmp/ccjGZi8K.s 			page 35


 451              		.loc 1 1403 5 view .LVU104
 452 00b8 1646     		mov	r6, r2
 453              	.LVL30:
1404:src/int.c     **** 	}
 454              		.loc 1 1404 3 is_stmt 1 view .LVU105
1400:src/int.c     **** 		if ((b & 1))
 455              		.loc 1 1400 8 view .LVU106
 456 00ba DAD1     		bne	.L27
 457 00bc CDE90A89 		strd	r8, [sp, #40]
 458 00c0 DDE90189 		ldrd	r8, r9, [sp, #4]
 459 00c4 5246     		mov	r2, r10
 460              	.LVL31:
1400:src/int.c     **** 		if ((b & 1))
 461              		.loc 1 1400 8 is_stmt 0 view .LVU107
 462 00c6 4046     		mov	r0, r8
 463 00c8 4946     		mov	r1, r9
 464 00ca 5B46     		mov	r3, fp
 465 00cc FFF7FEFF 		bl	__aeabi_uldivmod
 466              	.LVL32:
 467 00d0 1446     		mov	r4, r2
 468              	.LVL33:
1400:src/int.c     **** 		if ((b & 1))
 469              		.loc 1 1400 8 view .LVU108
 470 00d2 1D46     		mov	r5, r3
 471              	.LVL34:
 472              	.L23:
1406:src/int.c     **** }
 473              		.loc 1 1406 2 is_stmt 1 view .LVU109
1406:src/int.c     **** }
 474              		.loc 1 1406 2 is_stmt 0 view .LVU110
 475              	.LBE615:
 476              	.LBE619:
1416:src/int.c     **** 		b /= 2;
 477              		.loc 1 1416 3 is_stmt 1 view .LVU111
 478              		.loc 1 1416 5 is_stmt 0 view .LVU112
 479 00d4 DDE90601 		ldrd	r0, [sp, #24]
 480 00d8 4308     		lsrs	r3, r0, #1
 481 00da 43EAC173 		orr	r3, r3, r1, lsl #31
 482 00de 4A08     		lsrs	r2, r1, #1
 483 00e0 CDE90632 		strd	r3, r2, [sp, #24]
 484              	.LVL35:
1412:src/int.c     **** 		if ((b & 1))
 485              		.loc 1 1412 8 is_stmt 1 view .LVU113
 486 00e4 DDE90623 		ldrd	r2, [sp, #24]
 487 00e8 1343     		orrs	r3, r2, r3
 488 00ea 9FD1     		bne	.L28
1417:src/int.c     **** 	}
1418:src/int.c     **** 	return (x % c);
1419:src/int.c     **** }
 489              		.loc 1 1419 1 is_stmt 0 view .LVU114
 490 00ec DDE90C01 		ldrd	r0, r1, [sp, #48]
 491 00f0 0FB0     		add	sp, sp, #60
 492              		.cfi_remember_state
 493              		.cfi_def_cfa_offset 44
 494              		@ sp needed
 495 00f2 BDEC028B 		vldm	sp!, {d8}
 496              		.cfi_restore 80
ARM GAS  /tmp/ccjGZi8K.s 			page 36


 497              		.cfi_restore 81
 498              		.cfi_def_cfa_offset 36
 499              	.LVL36:
 500              		.loc 1 1419 1 view .LVU115
 501 00f6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 502              	.LVL37:
 503              	.L21:
 504              		.cfi_restore_state
1414:src/int.c     **** 		y = mulmod(y, y, c);
 505              		.loc 1 1414 4 is_stmt 1 view .LVU116
 506              	.LBB620:
 507              	.LBI620:
1398:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 508              		.loc 1 1398 27 view .LVU117
 509              	.LBB621:
1399:src/int.c     **** 	while (b > 0) {
 510              		.loc 1 1399 2 view .LVU118
1399:src/int.c     **** 	while (b > 0) {
 511              		.loc 1 1399 30 is_stmt 0 view .LVU119
 512 00fa 18EE100A 		vmov	r0, s16	@ int
 513 00fe 18EE901A 		vmov	r1, s17	@ int
 514 0102 5246     		mov	r2, r10
 515 0104 5B46     		mov	r3, fp
 516 0106 FFF7FEFF 		bl	__aeabi_uldivmod
 517              	.LVL38:
 518 010a 1F46     		mov	r7, r3
1400:src/int.c     **** 		if ((b & 1))
 519              		.loc 1 1400 8 view .LVU120
 520 010c 54EA0503 		orrs	r3, r4, r5
1399:src/int.c     **** 	while (b > 0) {
 521              		.loc 1 1399 30 view .LVU121
 522 0110 1646     		mov	r6, r2
 523              	.LVL39:
1400:src/int.c     **** 		if ((b & 1))
 524              		.loc 1 1400 2 is_stmt 1 view .LVU122
1400:src/int.c     **** 		if ((b & 1))
 525              		.loc 1 1400 8 view .LVU123
 526 0112 48D0     		beq	.L30
1399:src/int.c     **** 	while (b > 0) {
 527              		.loc 1 1399 25 is_stmt 0 view .LVU124
 528 0114 0023     		movs	r3, #0
 529 0116 CDE90245 		strd	r4, [sp, #8]
1400:src/int.c     **** 		if ((b & 1))
 530              		.loc 1 1400 8 view .LVU125
 531 011a A946     		mov	r9, r5
 532 011c A046     		mov	r8, r4
1399:src/int.c     **** 	while (b > 0) {
 533              		.loc 1 1399 25 view .LVU126
 534 011e 0193     		str	r3, [sp, #4]
 535 0120 1D46     		mov	r5, r3
 536              	.LVL40:
 537              	.L25:
1401:src/int.c     **** 			x = (x+y)%c;
 538              		.loc 1 1401 3 is_stmt 1 view .LVU127
1402:src/int.c     **** 		y = (y+y)%c;
 539              		.loc 1 1402 4 view .LVU128
1401:src/int.c     **** 			x = (x+y)%c;
ARM GAS  /tmp/ccjGZi8K.s 			page 37


 540              		.loc 1 1401 10 is_stmt 0 view .LVU129
 541 0122 08F00103 		and	r3, r8, #1
 542 0126 0493     		str	r3, [sp, #16]
 543 0128 0023     		movs	r3, #0
 544 012a 0593     		str	r3, [sp, #20]
1401:src/int.c     **** 			x = (x+y)%c;
 545              		.loc 1 1401 6 view .LVU130
 546 012c DDE90434 		ldrd	r3, [sp, #16]
 547 0130 2343     		orrs	r3, r3, r4
 548 0132 09D0     		beq	.L24
1402:src/int.c     **** 		y = (y+y)%c;
 549              		.loc 1 1402 6 view .LVU131
 550 0134 0199     		ldr	r1, [sp, #4]
 551 0136 A819     		adds	r0, r5, r6
 552 0138 47EB0101 		adc	r1, r7, r1
 553 013c 5246     		mov	r2, r10
 554 013e 5B46     		mov	r3, fp
 555 0140 FFF7FEFF 		bl	__aeabi_uldivmod
 556              	.LVL41:
 557 0144 1546     		mov	r5, r2
 558              	.LVL42:
1402:src/int.c     **** 		y = (y+y)%c;
 559              		.loc 1 1402 6 view .LVU132
 560 0146 0193     		str	r3, [sp, #4]
 561              	.LVL43:
 562              	.L24:
1403:src/int.c     **** 		b /= 2;
 563              		.loc 1 1403 3 is_stmt 1 view .LVU133
1403:src/int.c     **** 		b /= 2;
 564              		.loc 1 1403 9 is_stmt 0 view .LVU134
 565 0148 B019     		adds	r0, r6, r6
 566 014a 47EB0701 		adc	r1, r7, r7
1403:src/int.c     **** 		b /= 2;
 567              		.loc 1 1403 5 view .LVU135
 568 014e 5246     		mov	r2, r10
 569 0150 5B46     		mov	r3, fp
 570 0152 FFF7FEFF 		bl	__aeabi_uldivmod
 571              	.LVL44:
1404:src/int.c     **** 	}
 572              		.loc 1 1404 5 view .LVU136
 573 0156 4FEA580C 		lsr	ip, r8, #1
 574 015a 4CEAC97C 		orr	ip, ip, r9, lsl #31
 575 015e 4FEA5901 		lsr	r1, r9, #1
 576 0162 E046     		mov	r8, ip
 577              	.LVL45:
1404:src/int.c     **** 	}
 578              		.loc 1 1404 5 view .LVU137
 579 0164 8946     		mov	r9, r1
1403:src/int.c     **** 		b /= 2;
 580              		.loc 1 1403 5 view .LVU138
 581 0166 1F46     		mov	r7, r3
 582              	.LVL46:
1400:src/int.c     **** 		if ((b & 1))
 583              		.loc 1 1400 8 view .LVU139
 584 0168 58EA0903 		orrs	r3, r8, r9
1403:src/int.c     **** 		b /= 2;
 585              		.loc 1 1403 5 view .LVU140
ARM GAS  /tmp/ccjGZi8K.s 			page 38


 586 016c 1646     		mov	r6, r2
 587              	.LVL47:
1404:src/int.c     **** 	}
 588              		.loc 1 1404 3 is_stmt 1 view .LVU141
1400:src/int.c     **** 		if ((b & 1))
 589              		.loc 1 1400 8 view .LVU142
 590 016e D8D1     		bne	.L25
 591 0170 2846     		mov	r0, r5
 592 0172 0199     		ldr	r1, [sp, #4]
 593 0174 5246     		mov	r2, r10
 594              	.LVL48:
1400:src/int.c     **** 		if ((b & 1))
 595              		.loc 1 1400 8 is_stmt 0 view .LVU143
 596 0176 5B46     		mov	r3, fp
 597 0178 FFF7FEFF 		bl	__aeabi_uldivmod
 598              	.LVL49:
 599 017c DDE90245 		ldrd	r4, [sp, #8]
 600              	.LVL50:
1400:src/int.c     **** 		if ((b & 1))
 601              		.loc 1 1400 8 view .LVU144
 602 0180 1746     		mov	r7, r2
 603              	.LVL51:
1400:src/int.c     **** 		if ((b & 1))
 604              		.loc 1 1400 8 view .LVU145
 605 0182 1E46     		mov	r6, r3
1400:src/int.c     **** 		if ((b & 1))
 606              		.loc 1 1400 8 view .LVU146
 607              	.LBE621:
 608              	.LBE620:
 609              	.LBB624:
 610              	.LBB616:
1399:src/int.c     **** 	while (b > 0) {
 611              		.loc 1 1399 30 view .LVU147
 612 0184 2046     		mov	r0, r4
 613 0186 2946     		mov	r1, r5
 614 0188 5246     		mov	r2, r10
 615 018a 5B46     		mov	r3, fp
 616 018c 0C97     		str	r7, [sp, #48]
 617 018e 0D96     		str	r6, [sp, #52]
 618              	.LBE616:
 619              	.LBE624:
 620              	.LBB625:
 621              	.LBB622:
1406:src/int.c     **** }
 622              		.loc 1 1406 2 is_stmt 1 view .LVU148
 623              	.LVL52:
1406:src/int.c     **** }
 624              		.loc 1 1406 2 is_stmt 0 view .LVU149
 625              	.LBE622:
 626              	.LBE625:
 627              	.LBB626:
 628              	.LBB617:
1399:src/int.c     **** 	while (b > 0) {
 629              		.loc 1 1399 30 view .LVU150
 630 0190 FFF7FEFF 		bl	__aeabi_uldivmod
 631              	.LVL53:
 632 0194 B946     		mov	r9, r7
ARM GAS  /tmp/ccjGZi8K.s 			page 39


 633 0196 B046     		mov	r8, r6
 634              	.LVL54:
1399:src/int.c     **** 	while (b > 0) {
 635              		.loc 1 1399 30 view .LVU151
 636              	.LBE617:
 637              	.LBE626:
1415:src/int.c     **** 		b /= 2;
 638              		.loc 1 1415 3 is_stmt 1 view .LVU152
 639              	.LBB627:
1398:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 640              		.loc 1 1398 27 view .LVU153
 641              	.LBB618:
1399:src/int.c     **** 	while (b > 0) {
 642              		.loc 1 1399 2 view .LVU154
1399:src/int.c     **** 	while (b > 0) {
 643              		.loc 1 1399 30 is_stmt 0 view .LVU155
 644 0198 08EE109A 		vmov	s16, r9	@ int
 645 019c 08EE908A 		vmov	s17, r8	@ int
 646 01a0 1646     		mov	r6, r2
 647              	.LVL55:
1399:src/int.c     **** 	while (b > 0) {
 648              		.loc 1 1399 30 view .LVU156
 649 01a2 1F46     		mov	r7, r3
 650              	.LVL56:
1400:src/int.c     **** 		if ((b & 1))
 651              		.loc 1 1400 2 is_stmt 1 view .LVU157
1400:src/int.c     **** 		if ((b & 1))
 652              		.loc 1 1400 8 view .LVU158
 653 01a4 61E7     		b	.L22
 654              	.LVL57:
 655              	.L30:
1400:src/int.c     **** 		if ((b & 1))
 656              		.loc 1 1400 8 is_stmt 0 view .LVU159
 657              	.LBE618:
 658              	.LBE627:
 659              	.LBB628:
 660              	.LBB623:
 661 01a6 CDE90C45 		strd	r4, r5, [sp, #48]
 662 01aa 08EE104A 		vmov	s16, r4	@ int
 663              	.LVL58:
1400:src/int.c     **** 		if ((b & 1))
 664              		.loc 1 1400 8 view .LVU160
 665 01ae 08EE905A 		vmov	s17, r5	@ int
 666 01b2 8FE7     		b	.L23
 667              	.LVL59:
 668              	.L20:
1400:src/int.c     **** 		if ((b & 1))
 669              		.loc 1 1400 8 view .LVU161
 670 01b4 5246     		mov	r2, r10
 671              	.LVL60:
1400:src/int.c     **** 		if ((b & 1))
 672              		.loc 1 1400 8 view .LVU162
 673 01b6 5B46     		mov	r3, fp
 674 01b8 0120     		movs	r0, #1
 675              	.LVL61:
1400:src/int.c     **** 		if ((b & 1))
 676              		.loc 1 1400 8 view .LVU163
ARM GAS  /tmp/ccjGZi8K.s 			page 40


 677 01ba 0021     		movs	r1, #0
 678 01bc FFF7FEFF 		bl	__aeabi_uldivmod
 679              	.LVL62:
 680 01c0 CDE90C23 		strd	r2, r3, [sp, #48]
 681              	.LBE623:
 682              	.LBE628:
1418:src/int.c     **** }
 683              		.loc 1 1418 2 is_stmt 1 view .LVU164
 684              		.loc 1 1419 1 is_stmt 0 view .LVU165
 685 01c4 DDE90C01 		ldrd	r0, r1, [sp, #48]
 686 01c8 0FB0     		add	sp, sp, #60
 687              		.cfi_def_cfa_offset 44
 688              		@ sp needed
 689 01ca BDEC028B 		vldm	sp!, {d8}
 690              		.cfi_restore 80
 691              		.cfi_restore 81
 692              		.cfi_def_cfa_offset 36
 693 01ce BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              		.loc 1 1419 1 view .LVU166
 695              		.cfi_endproc
 696              	.LFE70:
 698 01d2 00BF     		.section	.text.set_carry.part.0,"ax",%progbits
 699              		.align	1
 700              		.p2align 2,,3
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	set_carry.part.0:
 707              	.LFB78:
  54:src/int.c     **** #ifndef TINY_BUILD
 708              		.loc 1 54 6 is_stmt 1 view -0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              		@ link register save eliminated.
 713              	.LVL63:
  57:src/int.c     **** 	else
 714              		.loc 1 57 3 view .LVU168
 715 0000 5121     		movs	r1, #81
 716 0002 6A20     		movs	r0, #106
 717 0004 FFF7FEBF 		b	cmdflag
 718              	.LVL64:
 719              		.cfi_endproc
 720              	.LFE78:
 722              		.section	.text.intASR,"ax",%progbits
 723              		.align	1
 724              		.p2align 2,,3
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv4-sp-d16
 730              	intASR:
 731              	.LVL65:
 732              	.LFB46:
 911:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 733              		.loc 1 911 46 view -0
ARM GAS  /tmp/ccjGZi8K.s 			page 41


 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 912:src/int.c     **** 	const long long int tbm = topbit_mask();
 737              		.loc 1 912 2 view .LVU170
 738              	.LBB629:
 739              	.LBI629:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 740              		.loc 1 39 23 view .LVU171
 741              	.LBB630:
  40:src/int.c     **** }
 742              		.loc 1 40 2 view .LVU172
  40:src/int.c     **** }
 743              		.loc 1 40 33 is_stmt 0 view .LVU173
 744 0000 264B     		ldr	r3, .L57
 745 0002 1A68     		ldr	r2, [r3]
 746              	.LBE630:
 747              	.LBE629:
 748              	.LBB633:
 749              	.LBB634:
 750              	.LBB635:
 751              	.LBB636:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 752              		.loc 1 44 26 view .LVU174
 753 0004 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 754              		.loc 1 44 15 view .LVU175
 755 0008 03F03F03 		and	r3, r3, #63
 756              	.LBE636:
 757              	.LBE635:
 758              	.LBE634:
 759              	.LBE633:
 911:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 760              		.loc 1 911 46 view .LVU176
 761 000c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 762              		.cfi_def_cfa_offset 24
 763              		.cfi_offset 4, -24
 764              		.cfi_offset 5, -20
 765              		.cfi_offset 6, -16
 766              		.cfi_offset 7, -12
 767              		.cfi_offset 8, -8
 768              		.cfi_offset 14, -4
 769              	.LBB646:
 770              	.LBB631:
  40:src/int.c     **** }
 771              		.loc 1 40 39 view .LVU177
 772 0010 92F8E887 		ldrb	r8, [r2, #2024]	@ zero_extendqisi2
 773              	.LBE631:
 774              	.LBE646:
 775              	.LBB647:
 776              	.LBB643:
 777              	.LBB640:
 778              	.LBB637:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 779              		.loc 1 45 26 view .LVU178
 780 0014 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccjGZi8K.s 			page 42


 781              		.loc 1 45 5 view .LVU179
 782 0016 3E2A     		cmp	r2, #62
 783              	.LBE637:
 784              	.LBE640:
 785              	.LBE643:
 786              	.LBE647:
 911:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 787              		.loc 1 911 46 view .LVU180
 788 0018 0646     		mov	r6, r0
 789 001a 0F46     		mov	r7, r1
 790              	.LBB648:
 791              	.LBB632:
  40:src/int.c     **** }
 792              		.loc 1 40 9 view .LVU181
 793 001c C8F38108 		ubfx	r8, r8, #2, #2
 794              	.LVL66:
  40:src/int.c     **** }
 795              		.loc 1 40 9 view .LVU182
 796              	.LBE632:
 797              	.LBE648:
 913:src/int.c     **** 	long long int y;
 798              		.loc 1 913 2 is_stmt 1 view .LVU183
 799              	.LBB649:
 800              	.LBI633:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 801              		.loc 1 110 22 view .LVU184
 802              	.LBB644:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 803              		.loc 1 111 2 view .LVU185
 804              	.LBB641:
 805              	.LBI635:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 806              		.loc 1 43 14 view .LVU186
 807              	.LBB638:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 808              		.loc 1 44 2 view .LVU187
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 809              		.loc 1 45 2 view .LVU188
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 810              		.loc 1 45 5 is_stmt 0 view .LVU189
 811 0020 38D8     		bhi	.L48
 812 0022 0125     		movs	r5, #1
 813 0024 213B     		subs	r3, r3, #33
 814 0026 C2F12001 		rsb	r1, r2, #32
 815 002a 05FA03F4 		lsl	r4, r5, r3
 816 002e 25FA01F1 		lsr	r1, r5, r1
 817 0032 0C43     		orrs	r4, r4, r1
 818 0034 9540     		lsls	r5, r5, r2
 819              	.L43:
 820              	.LVL67:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 821              		.loc 1 45 5 view .LVU190
 822              	.LBE638:
 823              	.LBE641:
 112:src/int.c     **** 	return bit;
 824              		.loc 1 112 2 is_stmt 1 view .LVU191
 113:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 43


 825              		.loc 1 113 2 view .LVU192
 113:src/int.c     **** }
 826              		.loc 1 113 2 is_stmt 0 view .LVU193
 827              	.LBE644:
 828              	.LBE649:
 914:src/int.c     **** 
 829              		.loc 1 914 2 is_stmt 1 view .LVU194
 916:src/int.c     **** 	if (mode == MODE_SGNMANT)
 830              		.loc 1 916 2 view .LVU195
 831              	.LBB650:
 832              	.LBI650:
  54:src/int.c     **** #ifndef TINY_BUILD
 833              		.loc 1 54 6 view .LVU196
 834              	.LBB651:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 835              		.loc 1 56 2 view .LVU197
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 836              		.loc 1 56 5 is_stmt 0 view .LVU198
 837 0036 F307     		lsls	r3, r6, #31
 838 0038 16D5     		bpl	.L44
 839 003a FFF7FEFF 		bl	set_carry.part.0
 840              	.LVL68:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 841              		.loc 1 56 5 view .LVU199
 842              	.LBE651:
 843              	.LBE650:
 917:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 844              		.loc 1 917 2 is_stmt 1 view .LVU200
 917:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 845              		.loc 1 917 5 is_stmt 0 view .LVU201
 846 003e B8F1030F 		cmp	r8, #3
 847 0042 18D0     		beq	.L56
 848              	.L46:
 920:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 849              		.loc 1 920 2 is_stmt 1 view .LVU202
 920:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 850              		.loc 1 920 4 is_stmt 0 view .LVU203
 851 0044 7008     		lsrs	r0, r6, #1
 921:src/int.c     **** 		y |= tbm;
 852              		.loc 1 921 5 view .LVU204
 853 0046 B8F1020F 		cmp	r8, #2
 920:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 854              		.loc 1 920 4 view .LVU205
 855 004a 40EAC770 		orr	r0, r0, r7, lsl #31
 856 004e 4FEA6701 		asr	r1, r7, #1
 857              	.LVL69:
 921:src/int.c     **** 		y |= tbm;
 858              		.loc 1 921 2 is_stmt 1 view .LVU206
 921:src/int.c     **** 		y |= tbm;
 859              		.loc 1 921 5 is_stmt 0 view .LVU207
 860 0052 07D0     		beq	.L42
 922:src/int.c     **** 	return y;
 861              		.loc 1 922 3 is_stmt 1 discriminator 1 view .LVU208
 921:src/int.c     **** 		y |= tbm;
 862              		.loc 1 921 34 is_stmt 0 discriminator 1 view .LVU209
 863 0054 06EA0502 		and	r2, r6, r5
 864 0058 07EA0403 		and	r3, r7, r4
ARM GAS  /tmp/ccjGZi8K.s 			page 44


 921:src/int.c     **** 		y |= tbm;
 865              		.loc 1 921 28 discriminator 1 view .LVU210
 866 005c 1343     		orrs	r3, r2, r3
 922:src/int.c     **** 	return y;
 867              		.loc 1 922 5 discriminator 1 view .LVU211
 868 005e 1CBF     		itt	ne
 869 0060 2843     		orrne	r0, r0, r5
 870              	.LVL70:
 922:src/int.c     **** 	return y;
 871              		.loc 1 922 5 discriminator 1 view .LVU212
 872 0062 2143     		orrne	r1, r1, r4
 873              	.LVL71:
 874              	.L42:
 924:src/int.c     **** 
 875              		.loc 1 924 1 view .LVU213
 876 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 877              	.LVL72:
 878              	.L44:
 879              	.LBB653:
 880              	.LBB652:
  59:src/int.c     **** #endif
 881              		.loc 1 59 3 is_stmt 1 view .LVU214
 882 0068 5221     		movs	r1, #82
 883 006a 6A20     		movs	r0, #106
 884              	.LVL73:
  59:src/int.c     **** #endif
 885              		.loc 1 59 3 is_stmt 0 view .LVU215
 886 006c FFF7FEFF 		bl	cmdflag
 887              	.LVL74:
  59:src/int.c     **** #endif
 888              		.loc 1 59 3 view .LVU216
 889              	.LBE652:
 890              	.LBE653:
 917:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 891              		.loc 1 917 2 is_stmt 1 view .LVU217
 917:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 892              		.loc 1 917 5 is_stmt 0 view .LVU218
 893 0070 B8F1030F 		cmp	r8, #3
 894 0074 E6D1     		bne	.L46
 895              	.L56:
 918:src/int.c     **** 
 896              		.loc 1 918 3 is_stmt 1 view .LVU219
 918:src/int.c     **** 
 897              		.loc 1 918 14 is_stmt 0 view .LVU220
 898 0076 26EA0503 		bic	r3, r6, r5
 899 007a 27EA0401 		bic	r1, r7, r4
 918:src/int.c     **** 
 900              		.loc 1 918 22 view .LVU221
 901 007e 5B08     		lsrs	r3, r3, #1
 902 0080 43EAC173 		orr	r3, r3, r1, lsl #31
 918:src/int.c     **** 
 903              		.loc 1 918 33 view .LVU222
 904 0084 3540     		ands	r5, r5, r6
 905 0086 3C40     		ands	r4, r4, r7
 918:src/int.c     **** 
 906              		.loc 1 918 28 view .LVU223
 907 0088 43EA0500 		orr	r0, r3, r5
ARM GAS  /tmp/ccjGZi8K.s 			page 45


 908 008c 44EA6101 		orr	r1, r4, r1, asr #1
 924:src/int.c     **** 
 909              		.loc 1 924 1 view .LVU224
 910 0090 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 911              	.LVL75:
 912              	.L48:
 913              	.LBB654:
 914              	.LBB645:
 915              	.LBB642:
 916              	.LBB639:
 924:src/int.c     **** 
 917              		.loc 1 924 1 view .LVU225
 918 0094 0025     		movs	r5, #0
 919 0096 4FF00044 		mov	r4, #-2147483648
 920 009a CCE7     		b	.L43
 921              	.L58:
 922              		.align	2
 923              	.L57:
 924 009c 00000000 		.word	main_ram
 925              	.LBE639:
 926              	.LBE642:
 927              	.LBE645:
 928              	.LBE654:
 929              		.cfi_endproc
 930              	.LFE46:
 932              		.section	.text.intLSR,"ax",%progbits
 933              		.align	1
 934              		.p2align 2,,3
 935              		.syntax unified
 936              		.thumb
 937              		.thumb_func
 938              		.fpu fpv4-sp-d16
 940              	intLSR:
 941              	.LVL76:
 942              	.LFB45:
 906:src/int.c     **** 	set_carry(0 != (x & 1));
 943              		.loc 1 906 46 is_stmt 1 view -0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 907:src/int.c     **** 	return mask_value((x >> 1) & ~topbit_mask());
 947              		.loc 1 907 2 view .LVU227
 906:src/int.c     **** 	set_carry(0 != (x & 1));
 948              		.loc 1 906 46 is_stmt 0 view .LVU228
 949 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 950              		.cfi_def_cfa_offset 24
 951              		.cfi_offset 3, -24
 952              		.cfi_offset 4, -20
 953              		.cfi_offset 5, -16
 954              		.cfi_offset 6, -12
 955              		.cfi_offset 7, -8
 956              		.cfi_offset 14, -4
 907:src/int.c     **** 	return mask_value((x >> 1) & ~topbit_mask());
 957              		.loc 1 907 20 view .LVU229
 958 0002 00F00102 		and	r2, r0, #1
 959 0006 0023     		movs	r3, #0
 960              	.LBB655:
ARM GAS  /tmp/ccjGZi8K.s 			page 46


 961              	.LBB656:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 962              		.loc 1 56 5 view .LVU230
 963 0008 1343     		orrs	r3, r2, r3
 964              	.LBE656:
 965              	.LBE655:
 906:src/int.c     **** 	set_carry(0 != (x & 1));
 966              		.loc 1 906 46 view .LVU231
 967 000a 0546     		mov	r5, r0
 968 000c 0C46     		mov	r4, r1
 969              	.LVL77:
 970              	.LBB659:
 971              	.LBI655:
  54:src/int.c     **** #ifndef TINY_BUILD
 972              		.loc 1 54 6 is_stmt 1 view .LVU232
 973              	.LBB657:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 974              		.loc 1 56 2 view .LVU233
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 975              		.loc 1 56 5 is_stmt 0 view .LVU234
 976 000e 32D0     		beq	.L60
 977 0010 FFF7FEFF 		bl	set_carry.part.0
 978              	.LVL78:
 979              	.L61:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 980              		.loc 1 56 5 view .LVU235
 981              	.LBE657:
 982              	.LBE659:
 908:src/int.c     **** }
 983              		.loc 1 908 2 is_stmt 1 view .LVU236
 984              	.LBB660:
 985              	.LBB661:
 986              	.LBB662:
 987              	.LBB663:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 988              		.loc 1 44 26 is_stmt 0 view .LVU237
 989 0014 1C4B     		ldr	r3, .L66
 990 0016 1B68     		ldr	r3, [r3]
 991 0018 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 992              		.loc 1 44 15 view .LVU238
 993 001c 03F03F03 		and	r3, r3, #63
 994              	.LBE663:
 995              	.LBE662:
 996              	.LBE661:
 997              	.LBE660:
 908:src/int.c     **** }
 998              		.loc 1 908 23 view .LVU239
 999 0020 6808     		lsrs	r0, r5, #1
 1000              	.LBB676:
 1001              	.LBB670:
 1002              	.LBB667:
 1003              	.LBB664:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1004              		.loc 1 45 26 view .LVU240
 1005 0022 5D1E     		subs	r5, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccjGZi8K.s 			page 47


 1006              		.loc 1 45 5 view .LVU241
 1007 0024 3E2D     		cmp	r5, #62
 1008              	.LBE664:
 1009              	.LBE667:
 1010              	.LBE670:
 1011              	.LBE676:
 908:src/int.c     **** }
 1012              		.loc 1 908 23 view .LVU242
 1013 0026 40EAC470 		orr	r0, r0, r4, lsl #31
 1014 002a 4FEA6401 		asr	r1, r4, #1
 1015              	.LBB677:
 1016              	.LBI660:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 1017              		.loc 1 110 22 is_stmt 1 view .LVU243
 1018              	.LBB671:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1019              		.loc 1 111 2 view .LVU244
 1020              	.LBB668:
 1021              	.LBI662:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1022              		.loc 1 43 14 view .LVU245
 1023              	.LBB665:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1024              		.loc 1 44 2 view .LVU246
 1025              	.LVL79:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1026              		.loc 1 45 2 view .LVU247
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1027              		.loc 1 45 5 is_stmt 0 view .LVU248
 1028 002e 27D8     		bhi	.L62
 1029              	.LVL80:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1030              		.loc 1 45 5 view .LVU249
 1031              	.LBE665:
 1032              	.LBE668:
 112:src/int.c     **** 	return bit;
 1033              		.loc 1 112 2 is_stmt 1 view .LVU250
 113:src/int.c     **** }
 1034              		.loc 1 113 2 view .LVU251
 113:src/int.c     **** }
 1035              		.loc 1 113 2 is_stmt 0 view .LVU252
 1036              	.LBE671:
 1037              	.LBE677:
 1038              	.LBB678:
 1039              	.LBI678:
  92:src/int.c     **** #ifndef TINY_BUILD
 1040              		.loc 1 92 15 is_stmt 1 view .LVU253
 1041              	.LBB679:
  94:src/int.c     **** 	long long int mask;
 1042              		.loc 1 94 2 view .LVU254
 1043              	.LBE679:
 1044              	.LBE678:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1045              		.loc 1 44 2 view .LVU255
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1046              		.loc 1 45 2 view .LVU256
 1047              	.LBB685:
ARM GAS  /tmp/ccjGZi8K.s 			page 48


 1048              	.LBB680:
  95:src/int.c     **** 
 1049              		.loc 1 95 2 view .LVU257
  97:src/int.c     **** 		return v;
 1050              		.loc 1 97 2 view .LVU258
  99:src/int.c     **** 	return v & mask;
 1051              		.loc 1 99 2 view .LVU259
 100:src/int.c     **** #else
 1052              		.loc 1 100 2 view .LVU260
  99:src/int.c     **** 	return v & mask;
 1053              		.loc 1 99 14 is_stmt 0 view .LVU261
 1054 0030 0126     		movs	r6, #1
 1055 0032 A3F12002 		sub	r2, r3, #32
 1056 0036 C3F12007 		rsb	r7, r3, #32
 1057 003a 26FA07F7 		lsr	r7, r6, r7
 1058 003e 06FA03F4 		lsl	r4, r6, r3
 1059 0042 06FA02F2 		lsl	r2, r6, r2
  99:src/int.c     **** 	return v & mask;
 1060              		.loc 1 99 7 view .LVU262
 1061 0046 14F1FF34 		adds	r4, r4, #-1
  99:src/int.c     **** 	return v & mask;
 1062              		.loc 1 99 14 view .LVU263
 1063 004a 42EA0702 		orr	r2, r2, r7
 1064              	.LBE680:
 1065              	.LBE685:
 1066              	.LBB686:
 1067              	.LBB672:
 112:src/int.c     **** 	return bit;
 1068              		.loc 1 112 16 view .LVU264
 1069 004e A3F12103 		sub	r3, r3, #33
 1070              	.LVL81:
 112:src/int.c     **** 	return bit;
 1071              		.loc 1 112 16 view .LVU265
 1072 0052 C5F12007 		rsb	r7, r5, #32
 1073              	.LBE672:
 1074              	.LBE686:
 1075              	.LBB687:
 1076              	.LBB681:
  99:src/int.c     **** 	return v & mask;
 1077              		.loc 1 99 7 view .LVU266
 1078 0056 42F1FF32 		adc	r2, r2, #-1
 1079              	.LBE681:
 1080              	.LBE687:
 1081              	.LBB688:
 1082              	.LBB673:
 112:src/int.c     **** 	return bit;
 1083              		.loc 1 112 16 view .LVU267
 1084 005a 06FA03F3 		lsl	r3, r6, r3
 1085              	.LVL82:
 112:src/int.c     **** 	return bit;
 1086              		.loc 1 112 16 view .LVU268
 1087 005e 26FA07F7 		lsr	r7, r6, r7
 1088              	.LBE673:
 1089              	.LBE688:
 1090              	.LBB689:
 1091              	.LBB682:
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 49


 1092              		.loc 1 100 11 view .LVU269
 1093 0062 0440     		ands	r4, r4, r0
 1094 0064 1140     		ands	r1, r1, r2
 1095              	.LVL83:
 100:src/int.c     **** #else
 1096              		.loc 1 100 11 view .LVU270
 1097              	.LBE682:
 1098              	.LBE689:
 1099              	.LBB690:
 1100              	.LBB674:
 112:src/int.c     **** 	return bit;
 1101              		.loc 1 112 16 view .LVU271
 1102 0066 3B43     		orrs	r3, r3, r7
 1103 0068 06FA05F0 		lsl	r0, r6, r5
 112:src/int.c     **** 	return bit;
 1104              		.loc 1 112 16 view .LVU272
 1105              	.LBE674:
 1106              	.LBE690:
 1107              	.LBB691:
 1108              	.LBB683:
 100:src/int.c     **** #else
 1109              		.loc 1 100 11 view .LVU273
 1110 006c 21EA0301 		bic	r1, r1, r3
 1111 0070 24EA0000 		bic	r0, r4, r0
 1112              	.LBE683:
 1113              	.LBE691:
 909:src/int.c     **** 
 1114              		.loc 1 909 1 view .LVU274
 1115 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1116              	.LVL84:
 1117              	.L60:
 1118              	.LBB692:
 1119              	.LBB658:
  59:src/int.c     **** #endif
 1120              		.loc 1 59 3 is_stmt 1 view .LVU275
 1121 0076 5221     		movs	r1, #82
 1122              	.LVL85:
  59:src/int.c     **** #endif
 1123              		.loc 1 59 3 is_stmt 0 view .LVU276
 1124 0078 6A20     		movs	r0, #106
 1125              	.LVL86:
  59:src/int.c     **** #endif
 1126              		.loc 1 59 3 view .LVU277
 1127 007a FFF7FEFF 		bl	cmdflag
 1128              	.LVL87:
 1129 007e C9E7     		b	.L61
 1130              	.LVL88:
 1131              	.L62:
  59:src/int.c     **** #endif
 1132              		.loc 1 59 3 view .LVU278
 1133              	.LBE658:
 1134              	.LBE692:
 1135              	.LBB693:
 1136              	.LBB675:
 1137              	.LBB669:
 1138              	.LBB666:
  46:src/int.c     **** 	return il;
ARM GAS  /tmp/ccjGZi8K.s 			page 50


 1139              		.loc 1 46 3 is_stmt 1 view .LVU279
  46:src/int.c     **** 	return il;
 1140              		.loc 1 46 3 is_stmt 0 view .LVU280
 1141              	.LBE666:
 1142              	.LBE669:
 112:src/int.c     **** 	return bit;
 1143              		.loc 1 112 2 is_stmt 1 view .LVU281
 113:src/int.c     **** }
 1144              		.loc 1 113 2 view .LVU282
 113:src/int.c     **** }
 1145              		.loc 1 113 2 is_stmt 0 view .LVU283
 1146              	.LBE675:
 1147              	.LBE693:
 908:src/int.c     **** }
 1148              		.loc 1 908 9 view .LVU284
 1149 0080 21F00041 		bic	r1, r1, #-2147483648
 1150              	.LVL89:
 1151              	.LBB694:
  92:src/int.c     **** #ifndef TINY_BUILD
 1152              		.loc 1 92 15 is_stmt 1 view .LVU285
 1153              	.LBB684:
  94:src/int.c     **** 	long long int mask;
 1154              		.loc 1 94 2 view .LVU286
 1155              	.LBE684:
 1156              	.LBE694:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1157              		.loc 1 44 2 view .LVU287
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1158              		.loc 1 45 2 view .LVU288
 909:src/int.c     **** 
 1159              		.loc 1 909 1 is_stmt 0 view .LVU289
 1160 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1161              	.L67:
 1162 0086 00BF     		.align	2
 1163              	.L66:
 1164 0088 00000000 		.word	main_ram
 1165              		.cfi_endproc
 1166              	.LFE45:
 1168              		.section	.text.intLSL,"ax",%progbits
 1169              		.align	1
 1170              		.p2align 2,,3
 1171              		.syntax unified
 1172              		.thumb
 1173              		.thumb_func
 1174              		.fpu fpv4-sp-d16
 1176              	intLSL:
 1177              	.LVL90:
 1178              	.LFB44:
 901:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 1179              		.loc 1 901 46 is_stmt 1 view -0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 0
 1182              		@ frame_needed = 0, uses_anonymous_args = 0
 902:src/int.c     **** 	return mask_value((x << 1) & ~1);
 1183              		.loc 1 902 2 view .LVU291
 1184              	.LBB695:
 1185              	.LBI695:
ARM GAS  /tmp/ccjGZi8K.s 			page 51


 110:src/int.c     **** 	const unsigned int ws = word_size();
 1186              		.loc 1 110 22 view .LVU292
 1187              	.LBB696:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1188              		.loc 1 111 2 view .LVU293
 1189              	.LBB697:
 1190              	.LBI697:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1191              		.loc 1 43 14 view .LVU294
 1192              	.LBB698:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1193              		.loc 1 44 2 view .LVU295
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1194              		.loc 1 45 2 view .LVU296
 1195              	.LBE698:
 1196              	.LBE697:
 1197              	.LBE696:
 1198              	.LBE695:
 901:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 1199              		.loc 1 901 46 is_stmt 0 view .LVU297
 1200 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1201              		.cfi_def_cfa_offset 24
 1202              		.cfi_offset 3, -24
 1203              		.cfi_offset 4, -20
 1204              		.cfi_offset 5, -16
 1205              		.cfi_offset 6, -12
 1206              		.cfi_offset 7, -8
 1207              		.cfi_offset 14, -4
 1208              	.LBB708:
 1209              	.LBB705:
 1210              	.LBB702:
 1211              	.LBB699:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1212              		.loc 1 44 26 view .LVU298
 1213 0002 244E     		ldr	r6, .L75
 1214              	.LVL91:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1215              		.loc 1 44 26 view .LVU299
 1216 0004 3368     		ldr	r3, [r6]
 1217 0006 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1218              		.loc 1 44 15 view .LVU300
 1219 000a 03F03F03 		and	r3, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1220              		.loc 1 45 26 view .LVU301
 1221 000e 5F1E     		subs	r7, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1222              		.loc 1 45 5 view .LVU302
 1223 0010 3E2F     		cmp	r7, #62
 1224              	.LBE699:
 1225              	.LBE702:
 1226              	.LBE705:
 1227              	.LBE708:
 901:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 1228              		.loc 1 901 46 view .LVU303
 1229 0012 0446     		mov	r4, r0
 1230 0014 0D46     		mov	r5, r1
ARM GAS  /tmp/ccjGZi8K.s 			page 52


 1231              	.LBB709:
 1232              	.LBB706:
 1233              	.LBB703:
 1234              	.LBB700:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1235              		.loc 1 45 5 view .LVU304
 1236 0016 38D8     		bhi	.L73
 1237 0018 0122     		movs	r2, #1
 1238 001a 213B     		subs	r3, r3, #33
 1239 001c C7F12001 		rsb	r1, r7, #32
 1240 0020 02FA03F3 		lsl	r3, r2, r3
 1241 0024 22FA01F1 		lsr	r1, r2, r1
 1242 0028 0B43     		orrs	r3, r3, r1
 1243 002a BA40     		lsls	r2, r2, r7
 1244              	.L69:
 1245              	.LVL92:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1246              		.loc 1 45 5 view .LVU305
 1247              	.LBE700:
 1248              	.LBE703:
 112:src/int.c     **** 	return bit;
 1249              		.loc 1 112 2 is_stmt 1 view .LVU306
 113:src/int.c     **** }
 1250              		.loc 1 113 2 view .LVU307
 113:src/int.c     **** }
 1251              		.loc 1 113 2 is_stmt 0 view .LVU308
 1252              	.LBE706:
 1253              	.LBE709:
 1254              	.LBB710:
 1255              	.LBI710:
  54:src/int.c     **** #ifndef TINY_BUILD
 1256              		.loc 1 54 6 is_stmt 1 view .LVU309
 1257              	.LBB711:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1258              		.loc 1 56 2 view .LVU310
 1259              	.LBE711:
 1260              	.LBE710:
 902:src/int.c     **** 	return mask_value((x << 1) & ~1);
 1261              		.loc 1 902 32 is_stmt 0 view .LVU311
 1262 002c 04EA0200 		and	r0, r4, r2
 1263              	.LVL93:
 902:src/int.c     **** 	return mask_value((x << 1) & ~1);
 1264              		.loc 1 902 32 view .LVU312
 1265 0030 05EA0301 		and	r1, r5, r3
 1266              	.LBB714:
 1267              	.LBB712:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1268              		.loc 1 56 5 view .LVU313
 1269 0034 50EA0103 		orrs	r3, r0, r1
 1270              	.LVL94:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1271              		.loc 1 56 5 view .LVU314
 1272 0038 22D0     		beq	.L70
 1273 003a FFF7FEFF 		bl	set_carry.part.0
 1274              	.LVL95:
 1275              	.L71:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
ARM GAS  /tmp/ccjGZi8K.s 			page 53


 1276              		.loc 1 56 5 view .LVU315
 1277              	.LBE712:
 1278              	.LBE714:
 903:src/int.c     **** }
 1279              		.loc 1 903 2 is_stmt 1 view .LVU316
 1280              	.LBB715:
 1281              	.LBB716:
 1282              	.LBB717:
 1283              	.LBB718:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1284              		.loc 1 44 26 is_stmt 0 view .LVU317
 1285 003e 3368     		ldr	r3, [r6]
 1286 0040 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1287              		.loc 1 44 15 view .LVU318
 1288 0044 03F03F06 		and	r6, r3, #63
 1289              	.LBE718:
 1290              	.LBE717:
 1291              	.LBE716:
 1292              	.LBE715:
 903:src/int.c     **** }
 1293              		.loc 1 903 9 view .LVU319
 1294 0048 2419     		adds	r4, r4, r4
 1295              	.LBB728:
 1296              	.LBB725:
 1297              	.LBB722:
 1298              	.LBB719:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1299              		.loc 1 45 26 view .LVU320
 1300 004a 06F1FF33 		add	r3, r6, #-1
 1301              	.LBE719:
 1302              	.LBE722:
 1303              	.LBE725:
 1304              	.LBE728:
 903:src/int.c     **** }
 1305              		.loc 1 903 9 view .LVU321
 1306 004e 6D41     		adcs	r5, r5, r5
 1307              	.LBB729:
 1308              	.LBB726:
 1309              	.LBB723:
 1310              	.LBB720:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1311              		.loc 1 45 5 view .LVU322
 1312 0050 3E2B     		cmp	r3, #62
 1313              	.LBE720:
 1314              	.LBE723:
 1315              	.LBE726:
 1316              	.LBE729:
 903:src/int.c     **** }
 1317              		.loc 1 903 9 view .LVU323
 1318 0052 2946     		mov	r1, r5
 1319 0054 2046     		mov	r0, r4
 1320              	.LVL96:
 1321              	.LBB730:
 1322              	.LBI715:
  92:src/int.c     **** #ifndef TINY_BUILD
 1323              		.loc 1 92 15 is_stmt 1 view .LVU324
ARM GAS  /tmp/ccjGZi8K.s 			page 54


 1324              	.LBB727:
  94:src/int.c     **** 	long long int mask;
 1325              		.loc 1 94 2 view .LVU325
 1326              	.LBB724:
 1327              	.LBI717:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1328              		.loc 1 43 14 view .LVU326
 1329              	.LBB721:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1330              		.loc 1 44 2 view .LVU327
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1331              		.loc 1 45 2 view .LVU328
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1332              		.loc 1 45 5 is_stmt 0 view .LVU329
 1333 0056 12D8     		bhi	.L68
 1334              	.LVL97:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1335              		.loc 1 45 5 view .LVU330
 1336              	.LBE721:
 1337              	.LBE724:
  95:src/int.c     **** 
 1338              		.loc 1 95 2 is_stmt 1 view .LVU331
  97:src/int.c     **** 		return v;
 1339              		.loc 1 97 2 view .LVU332
  99:src/int.c     **** 	return v & mask;
 1340              		.loc 1 99 2 view .LVU333
 100:src/int.c     **** #else
 1341              		.loc 1 100 2 view .LVU334
  99:src/int.c     **** 	return v & mask;
 1342              		.loc 1 99 14 is_stmt 0 view .LVU335
 1343 0058 0123     		movs	r3, #1
 1344 005a A6F12002 		sub	r2, r6, #32
 1345 005e C6F12001 		rsb	r1, r6, #32
 1346              	.LVL98:
  99:src/int.c     **** 	return v & mask;
 1347              		.loc 1 99 14 view .LVU336
 1348 0062 23FA01F1 		lsr	r1, r3, r1
 1349 0066 03FA02F2 		lsl	r2, r3, r2
 1350 006a B340     		lsls	r3, r3, r6
 1351 006c 0A43     		orrs	r2, r2, r1
  99:src/int.c     **** 	return v & mask;
 1352              		.loc 1 99 7 view .LVU337
 1353 006e 13F1FF33 		adds	r3, r3, #-1
 1354 0072 42F1FF32 		adc	r2, r2, #-1
 100:src/int.c     **** #else
 1355              		.loc 1 100 11 view .LVU338
 1356 0076 02EA0501 		and	r1, r2, r5
 1357              	.LVL99:
 100:src/int.c     **** #else
 1358              		.loc 1 100 11 view .LVU339
 1359 007a 03EA0400 		and	r0, r3, r4
 1360              	.L68:
 1361              	.LBE727:
 1362              	.LBE730:
 904:src/int.c     **** 
 1363              		.loc 1 904 1 view .LVU340
 1364 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccjGZi8K.s 			page 55


 1365              	.L70:
 1366              	.LBB731:
 1367              	.LBB713:
  59:src/int.c     **** #endif
 1368              		.loc 1 59 3 is_stmt 1 view .LVU341
 1369 0080 5221     		movs	r1, #82
 1370 0082 6A20     		movs	r0, #106
 1371 0084 FFF7FEFF 		bl	cmdflag
 1372              	.LVL100:
  59:src/int.c     **** #endif
 1373              		.loc 1 59 3 is_stmt 0 view .LVU342
 1374 0088 D9E7     		b	.L71
 1375              	.LVL101:
 1376              	.L73:
  59:src/int.c     **** #endif
 1377              		.loc 1 59 3 view .LVU343
 1378              	.LBE713:
 1379              	.LBE731:
 1380              	.LBB732:
 1381              	.LBB707:
 1382              	.LBB704:
 1383              	.LBB701:
 1384 008a 0022     		movs	r2, #0
 1385 008c 4FF00043 		mov	r3, #-2147483648
 1386 0090 CCE7     		b	.L69
 1387              	.L76:
 1388 0092 00BF     		.align	2
 1389              	.L75:
 1390 0094 00000000 		.word	main_ram
 1391              	.LBE701:
 1392              	.LBE704:
 1393              	.LBE707:
 1394              	.LBE732:
 1395              		.cfi_endproc
 1396              	.LFE44:
 1398              		.section	.text.intRRC,"ax",%progbits
 1399              		.align	1
 1400              		.p2align 2,,3
 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu fpv4-sp-d16
 1406              	intRRC:
 1407              	.LVL102:
 1408              	.LFB50:
 949:src/int.c     **** 	const int cin = get_carry();
 1409              		.loc 1 949 46 is_stmt 1 view -0
 1410              		.cfi_startproc
 1411              		@ args = 0, pretend = 0, frame = 0
 1412              		@ frame_needed = 0, uses_anonymous_args = 0
 950:src/int.c     **** 
 1413              		.loc 1 950 2 view .LVU345
 1414              	.LBB733:
 1415              	.LBI733:
  50:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 1416              		.loc 1 50 5 view .LVU346
 1417              	.LBB734:
ARM GAS  /tmp/ccjGZi8K.s 			page 56


  51:src/int.c     **** }
 1418              		.loc 1 51 2 view .LVU347
 1419              	.LBE734:
 1420              	.LBE733:
 949:src/int.c     **** 	const int cin = get_carry();
 1421              		.loc 1 949 46 is_stmt 0 view .LVU348
 1422 0000 70B5     		push	{r4, r5, r6, lr}
 1423              		.cfi_def_cfa_offset 16
 1424              		.cfi_offset 4, -16
 1425              		.cfi_offset 5, -12
 1426              		.cfi_offset 6, -8
 1427              		.cfi_offset 14, -4
 949:src/int.c     **** 	const int cin = get_carry();
 1428              		.loc 1 949 46 view .LVU349
 1429 0002 0446     		mov	r4, r0
 1430              	.LBB738:
 1431              	.LBB735:
  51:src/int.c     **** }
 1432              		.loc 1 51 9 view .LVU350
 1433 0004 6A20     		movs	r0, #106
 1434              	.LVL103:
  51:src/int.c     **** }
 1435              		.loc 1 51 9 view .LVU351
 1436              	.LBE735:
 1437              	.LBE738:
 949:src/int.c     **** 	const int cin = get_carry();
 1438              		.loc 1 949 46 view .LVU352
 1439 0006 0E46     		mov	r6, r1
 1440              	.LBB739:
 1441              	.LBB736:
  51:src/int.c     **** }
 1442              		.loc 1 51 9 view .LVU353
 1443 0008 FFF7FEFF 		bl	get_user_flag
 1444              	.LVL104:
 1445              	.LBE736:
 1446              	.LBE739:
 1447              	.LBB740:
 1448              	.LBB741:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1449              		.loc 1 56 5 view .LVU354
 1450 000c E307     		lsls	r3, r4, #31
 1451              	.LBE741:
 1452              	.LBE740:
 1453              	.LBB744:
 1454              	.LBB737:
  51:src/int.c     **** }
 1455              		.loc 1 51 9 view .LVU355
 1456 000e 0546     		mov	r5, r0
 1457              	.LVL105:
  51:src/int.c     **** }
 1458              		.loc 1 51 9 view .LVU356
 1459              	.LBE737:
 1460              	.LBE744:
 952:src/int.c     **** 	x = intLSR(x);
 1461              		.loc 1 952 2 is_stmt 1 view .LVU357
 1462              	.LBB745:
 1463              	.LBI740:
ARM GAS  /tmp/ccjGZi8K.s 			page 57


  54:src/int.c     **** #ifndef TINY_BUILD
 1464              		.loc 1 54 6 view .LVU358
 1465              	.LBB742:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1466              		.loc 1 56 2 view .LVU359
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1467              		.loc 1 56 5 is_stmt 0 view .LVU360
 1468 0010 31D5     		bpl	.L78
 1469 0012 FFF7FEFF 		bl	set_carry.part.0
 1470              	.LVL106:
 1471              	.L79:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1472              		.loc 1 56 5 view .LVU361
 1473              	.LBE742:
 1474              	.LBE745:
 953:src/int.c     **** 	if (cin)
 1475              		.loc 1 953 2 is_stmt 1 view .LVU362
 953:src/int.c     **** 	if (cin)
 1476              		.loc 1 953 6 is_stmt 0 view .LVU363
 1477 0016 2046     		mov	r0, r4
 1478 0018 3146     		mov	r1, r6
 1479 001a FFF7FEFF 		bl	intLSR
 1480              	.LVL107:
 954:src/int.c     **** 		x |= topbit_mask();
 1481              		.loc 1 954 2 is_stmt 1 view .LVU364
 1482              	.LBB746:
 1483              	.LBB747:
 1484              	.LBB748:
 1485              	.LBB749:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1486              		.loc 1 44 26 is_stmt 0 view .LVU365
 1487 001e 1A4B     		ldr	r3, .L86
 1488 0020 1B68     		ldr	r3, [r3]
 1489 0022 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1490              		.loc 1 44 15 view .LVU366
 1491 0026 03F03F02 		and	r2, r3, #63
 1492              	.LVL108:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1493              		.loc 1 45 2 is_stmt 1 view .LVU367
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1494              		.loc 1 45 26 is_stmt 0 view .LVU368
 1495 002a 541E     		subs	r4, r2, #1
 1496              	.LBE749:
 1497              	.LBE748:
 1498              	.LBE747:
 1499              	.LBE746:
 954:src/int.c     **** 		x |= topbit_mask();
 1500              		.loc 1 954 5 view .LVU369
 1501 002c 75B1     		cbz	r5, .L81
 955:src/int.c     **** 	return mask_value(x);
 1502              		.loc 1 955 3 is_stmt 1 view .LVU370
 1503              	.LBB756:
 1504              	.LBI746:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 1505              		.loc 1 110 22 view .LVU371
 1506              	.LBB754:
ARM GAS  /tmp/ccjGZi8K.s 			page 58


 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1507              		.loc 1 111 2 view .LVU372
 1508              	.LBB752:
 1509              	.LBI748:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1510              		.loc 1 43 14 view .LVU373
 1511              	.LBB750:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1512              		.loc 1 44 2 view .LVU374
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1513              		.loc 1 45 5 is_stmt 0 view .LVU375
 1514 002e 3E2C     		cmp	r4, #62
 1515 0030 26D8     		bhi	.L84
 1516 0032 0125     		movs	r5, #1
 1517              	.LVL109:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1518              		.loc 1 45 5 view .LVU376
 1519 0034 A2F12103 		sub	r3, r2, #33
 1520 0038 C4F12006 		rsb	r6, r4, #32
 1521 003c 05FA03F3 		lsl	r3, r5, r3
 1522 0040 25FA06F6 		lsr	r6, r5, r6
 1523 0044 3343     		orrs	r3, r3, r6
 1524 0046 A540     		lsls	r5, r5, r4
 1525              	.L82:
 1526              	.LVL110:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1527              		.loc 1 45 5 view .LVU377
 1528              	.LBE750:
 1529              	.LBE752:
 112:src/int.c     **** 	return bit;
 1530              		.loc 1 112 2 is_stmt 1 view .LVU378
 113:src/int.c     **** }
 1531              		.loc 1 113 2 view .LVU379
 113:src/int.c     **** }
 1532              		.loc 1 113 2 is_stmt 0 view .LVU380
 1533              	.LBE754:
 1534              	.LBE756:
 955:src/int.c     **** 	return mask_value(x);
 1535              		.loc 1 955 5 view .LVU381
 1536 0048 2843     		orrs	r0, r0, r5
 1537              	.LVL111:
 955:src/int.c     **** 	return mask_value(x);
 1538              		.loc 1 955 5 view .LVU382
 1539 004a 1943     		orrs	r1, r1, r3
 1540              	.LVL112:
 1541              	.L81:
 956:src/int.c     **** }
 1542              		.loc 1 956 2 is_stmt 1 view .LVU383
 1543              	.LBB757:
 1544              	.LBI757:
  92:src/int.c     **** #ifndef TINY_BUILD
 1545              		.loc 1 92 15 view .LVU384
 1546              	.LBB758:
  94:src/int.c     **** 	long long int mask;
 1547              		.loc 1 94 2 view .LVU385
 1548              	.LBB759:
 1549              	.LBI759:
ARM GAS  /tmp/ccjGZi8K.s 			page 59


  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1550              		.loc 1 43 14 view .LVU386
 1551              	.LBB760:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1552              		.loc 1 44 2 view .LVU387
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1553              		.loc 1 45 2 view .LVU388
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1554              		.loc 1 45 5 is_stmt 0 view .LVU389
 1555 004c 3E2C     		cmp	r4, #62
 1556 004e 11D8     		bhi	.L77
 1557              	.LVL113:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1558              		.loc 1 45 5 view .LVU390
 1559              	.LBE760:
 1560              	.LBE759:
  95:src/int.c     **** 
 1561              		.loc 1 95 2 is_stmt 1 view .LVU391
  97:src/int.c     **** 		return v;
 1562              		.loc 1 97 2 view .LVU392
  99:src/int.c     **** 	return v & mask;
 1563              		.loc 1 99 2 view .LVU393
 100:src/int.c     **** #else
 1564              		.loc 1 100 2 view .LVU394
  99:src/int.c     **** 	return v & mask;
 1565              		.loc 1 99 14 is_stmt 0 view .LVU395
 1566 0050 0123     		movs	r3, #1
 1567 0052 A2F12004 		sub	r4, r2, #32
 1568 0056 C2F12005 		rsb	r5, r2, #32
 1569 005a 03FA04F4 		lsl	r4, r3, r4
 1570 005e 23FA05F5 		lsr	r5, r3, r5
 1571 0062 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 1572              		.loc 1 99 7 view .LVU396
 1573 0064 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 1574              		.loc 1 99 14 view .LVU397
 1575 0068 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 1576              		.loc 1 99 7 view .LVU398
 1577 006c 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 1578              		.loc 1 100 11 view .LVU399
 1579 0070 2140     		ands	r1, r1, r4
 1580              	.LVL114:
 100:src/int.c     **** #else
 1581              		.loc 1 100 11 view .LVU400
 1582 0072 1840     		ands	r0, r0, r3
 1583              	.L77:
 100:src/int.c     **** #else
 1584              		.loc 1 100 11 view .LVU401
 1585              	.LBE758:
 1586              	.LBE757:
 957:src/int.c     **** #endif
 1587              		.loc 1 957 1 view .LVU402
 1588 0074 70BD     		pop	{r4, r5, r6, pc}
 1589              	.LVL115:
ARM GAS  /tmp/ccjGZi8K.s 			page 60


 1590              	.L78:
 1591              	.LBB761:
 1592              	.LBB743:
  59:src/int.c     **** #endif
 1593              		.loc 1 59 3 is_stmt 1 view .LVU403
 1594 0076 5221     		movs	r1, #82
 1595 0078 6A20     		movs	r0, #106
 1596              	.LVL116:
  59:src/int.c     **** #endif
 1597              		.loc 1 59 3 is_stmt 0 view .LVU404
 1598 007a FFF7FEFF 		bl	cmdflag
 1599              	.LVL117:
 1600 007e CAE7     		b	.L79
 1601              	.LVL118:
 1602              	.L84:
  59:src/int.c     **** #endif
 1603              		.loc 1 59 3 view .LVU405
 1604              	.LBE743:
 1605              	.LBE761:
 1606              	.LBB762:
 1607              	.LBB755:
 1608              	.LBB753:
 1609              	.LBB751:
 1610 0080 0025     		movs	r5, #0
 1611              	.LVL119:
  59:src/int.c     **** #endif
 1612              		.loc 1 59 3 view .LVU406
 1613 0082 4FF00043 		mov	r3, #-2147483648
 1614 0086 DFE7     		b	.L82
 1615              	.L87:
 1616              		.align	2
 1617              	.L86:
 1618 0088 00000000 		.word	main_ram
 1619              	.LBE751:
 1620              	.LBE753:
 1621              	.LBE755:
 1622              	.LBE762:
 1623              		.cfi_endproc
 1624              	.LFE50:
 1626              		.section	.text.intRLC,"ax",%progbits
 1627              		.align	1
 1628              		.p2align 2,,3
 1629              		.syntax unified
 1630              		.thumb
 1631              		.thumb_func
 1632              		.fpu fpv4-sp-d16
 1634              	intRLC:
 1635              	.LVL120:
 1636              	.LFB49:
 943:src/int.c     **** 	const int cin = get_carry();
 1637              		.loc 1 943 46 is_stmt 1 view -0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 944:src/int.c     **** 	set_carry((topbit_mask() & x)?1:0);
 1641              		.loc 1 944 2 view .LVU408
 1642              	.LBB763:
ARM GAS  /tmp/ccjGZi8K.s 			page 61


 1643              	.LBI763:
  50:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 1644              		.loc 1 50 5 view .LVU409
 1645              	.LBB764:
  51:src/int.c     **** }
 1646              		.loc 1 51 2 view .LVU410
 1647              	.LBE764:
 1648              	.LBE763:
 943:src/int.c     **** 	const int cin = get_carry();
 1649              		.loc 1 943 46 is_stmt 0 view .LVU411
 1650 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1651              		.cfi_def_cfa_offset 24
 1652              		.cfi_offset 3, -24
 1653              		.cfi_offset 4, -20
 1654              		.cfi_offset 5, -16
 1655              		.cfi_offset 6, -12
 1656              		.cfi_offset 7, -8
 1657              		.cfi_offset 14, -4
 1658              	.LBB768:
 1659              	.LBB769:
 1660              	.LBB770:
 1661              	.LBB771:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1662              		.loc 1 44 26 view .LVU412
 1663 0002 274E     		ldr	r6, .L95
 1664              	.LBE771:
 1665              	.LBE770:
 1666              	.LBE769:
 1667              	.LBE768:
 943:src/int.c     **** 	const int cin = get_carry();
 1668              		.loc 1 943 46 view .LVU413
 1669 0004 0746     		mov	r7, r0
 1670              	.LBB781:
 1671              	.LBB765:
  51:src/int.c     **** }
 1672              		.loc 1 51 9 view .LVU414
 1673 0006 6A20     		movs	r0, #106
 1674              	.LVL121:
  51:src/int.c     **** }
 1675              		.loc 1 51 9 view .LVU415
 1676              	.LBE765:
 1677              	.LBE781:
 943:src/int.c     **** 	const int cin = get_carry();
 1678              		.loc 1 943 46 view .LVU416
 1679 0008 0D46     		mov	r5, r1
 1680              	.LBB782:
 1681              	.LBB766:
  51:src/int.c     **** }
 1682              		.loc 1 51 9 view .LVU417
 1683 000a FFF7FEFF 		bl	get_user_flag
 1684              	.LVL122:
 1685              	.LBE766:
 1686              	.LBE782:
 1687              	.LBB783:
 1688              	.LBB778:
 1689              	.LBB775:
 1690              	.LBB772:
ARM GAS  /tmp/ccjGZi8K.s 			page 62


  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1691              		.loc 1 44 26 view .LVU418
 1692 000e 3368     		ldr	r3, [r6]
 1693 0010 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1694              		.loc 1 44 15 view .LVU419
 1695 0014 03F03F03 		and	r3, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1696              		.loc 1 45 26 view .LVU420
 1697 0018 591E     		subs	r1, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1698              		.loc 1 45 5 view .LVU421
 1699 001a 3E29     		cmp	r1, #62
 1700              	.LBE772:
 1701              	.LBE775:
 1702              	.LBE778:
 1703              	.LBE783:
 1704              	.LBB784:
 1705              	.LBB767:
  51:src/int.c     **** }
 1706              		.loc 1 51 9 view .LVU422
 1707 001c 0446     		mov	r4, r0
 1708              	.LVL123:
  51:src/int.c     **** }
 1709              		.loc 1 51 9 view .LVU423
 1710              	.LBE767:
 1711              	.LBE784:
 945:src/int.c     **** 	return mask_value(intLSL(x) | cin);
 1712              		.loc 1 945 2 is_stmt 1 view .LVU424
 1713              	.LBB785:
 1714              	.LBI768:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 1715              		.loc 1 110 22 view .LVU425
 1716              	.LBB779:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1717              		.loc 1 111 2 view .LVU426
 1718              	.LBB776:
 1719              	.LBI770:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1720              		.loc 1 43 14 view .LVU427
 1721              	.LBB773:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1722              		.loc 1 44 2 view .LVU428
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1723              		.loc 1 45 2 view .LVU429
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1724              		.loc 1 45 5 is_stmt 0 view .LVU430
 1725 001e 3BD8     		bhi	.L93
 1726 0020 0122     		movs	r2, #1
 1727 0022 213B     		subs	r3, r3, #33
 1728 0024 C1F12000 		rsb	r0, r1, #32
 1729              	.LVL124:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1730              		.loc 1 45 5 view .LVU431
 1731 0028 02FA03F3 		lsl	r3, r2, r3
 1732 002c 22FA00F0 		lsr	r0, r2, r0
 1733 0030 0343     		orrs	r3, r3, r0
ARM GAS  /tmp/ccjGZi8K.s 			page 63


 1734 0032 8A40     		lsls	r2, r2, r1
 1735              	.L89:
 1736              	.LVL125:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1737              		.loc 1 45 5 view .LVU432
 1738              	.LBE773:
 1739              	.LBE776:
 112:src/int.c     **** 	return bit;
 1740              		.loc 1 112 2 is_stmt 1 view .LVU433
 113:src/int.c     **** }
 1741              		.loc 1 113 2 view .LVU434
 113:src/int.c     **** }
 1742              		.loc 1 113 2 is_stmt 0 view .LVU435
 1743              	.LBE779:
 1744              	.LBE785:
 1745              	.LBB786:
 1746              	.LBI786:
  54:src/int.c     **** #ifndef TINY_BUILD
 1747              		.loc 1 54 6 is_stmt 1 view .LVU436
 1748              	.LBB787:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1749              		.loc 1 56 2 view .LVU437
 1750              	.LBE787:
 1751              	.LBE786:
 945:src/int.c     **** 	return mask_value(intLSL(x) | cin);
 1752              		.loc 1 945 27 is_stmt 0 view .LVU438
 1753 0034 07EA0200 		and	r0, r7, r2
 1754 0038 05EA0301 		and	r1, r5, r3
 1755              	.LBB790:
 1756              	.LBB788:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1757              		.loc 1 56 5 view .LVU439
 1758 003c 50EA0103 		orrs	r3, r0, r1
 1759              	.LVL126:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1760              		.loc 1 56 5 view .LVU440
 1761 0040 25D0     		beq	.L90
 1762 0042 FFF7FEFF 		bl	set_carry.part.0
 1763              	.LVL127:
 1764              	.L91:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1765              		.loc 1 56 5 view .LVU441
 1766              	.LBE788:
 1767              	.LBE790:
 946:src/int.c     **** }
 1768              		.loc 1 946 2 is_stmt 1 view .LVU442
 946:src/int.c     **** }
 1769              		.loc 1 946 20 is_stmt 0 view .LVU443
 1770 0046 3846     		mov	r0, r7
 1771 0048 2946     		mov	r1, r5
 1772 004a FFF7FEFF 		bl	intLSL
 1773              	.LVL128:
 1774              	.LBB791:
 1775              	.LBB792:
 1776              	.LBB793:
 1777              	.LBB794:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
ARM GAS  /tmp/ccjGZi8K.s 			page 64


 1778              		.loc 1 44 26 view .LVU444
 1779 004e 3368     		ldr	r3, [r6]
 1780 0050 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1781              		.loc 1 44 15 view .LVU445
 1782 0054 03F03F02 		and	r2, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1783              		.loc 1 45 26 view .LVU446
 1784 0058 531E     		subs	r3, r2, #1
 1785              	.LBE794:
 1786              	.LBE793:
 1787              	.LBE792:
 1788              	.LBE791:
 946:src/int.c     **** }
 1789              		.loc 1 946 9 view .LVU447
 1790 005a E717     		asrs	r7, r4, #31
 1791              	.LBB801:
 1792              	.LBB799:
 1793              	.LBB797:
 1794              	.LBB795:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1795              		.loc 1 45 5 view .LVU448
 1796 005c 3E2B     		cmp	r3, #62
 1797              	.LBE795:
 1798              	.LBE797:
 1799              	.LBE799:
 1800              	.LBE801:
 946:src/int.c     **** }
 1801              		.loc 1 946 9 view .LVU449
 1802 005e 41EA0701 		orr	r1, r1, r7
 1803 0062 40EA0400 		orr	r0, r0, r4
 1804              	.LVL129:
 1805              	.LBB802:
 1806              	.LBI791:
  92:src/int.c     **** #ifndef TINY_BUILD
 1807              		.loc 1 92 15 is_stmt 1 view .LVU450
 1808              	.LBB800:
  94:src/int.c     **** 	long long int mask;
 1809              		.loc 1 94 2 view .LVU451
 1810              	.LBB798:
 1811              	.LBI793:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1812              		.loc 1 43 14 view .LVU452
 1813              	.LBB796:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1814              		.loc 1 44 2 view .LVU453
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1815              		.loc 1 45 2 view .LVU454
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1816              		.loc 1 45 5 is_stmt 0 view .LVU455
 1817 0066 11D8     		bhi	.L88
 1818              	.LVL130:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1819              		.loc 1 45 5 view .LVU456
 1820              	.LBE796:
 1821              	.LBE798:
  95:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 65


 1822              		.loc 1 95 2 is_stmt 1 view .LVU457
  97:src/int.c     **** 		return v;
 1823              		.loc 1 97 2 view .LVU458
  99:src/int.c     **** 	return v & mask;
 1824              		.loc 1 99 2 view .LVU459
 100:src/int.c     **** #else
 1825              		.loc 1 100 2 view .LVU460
  99:src/int.c     **** 	return v & mask;
 1826              		.loc 1 99 14 is_stmt 0 view .LVU461
 1827 0068 0123     		movs	r3, #1
 1828 006a A2F12004 		sub	r4, r2, #32
 1829              	.LVL131:
  99:src/int.c     **** 	return v & mask;
 1830              		.loc 1 99 14 view .LVU462
 1831 006e C2F12005 		rsb	r5, r2, #32
 1832 0072 03FA04F4 		lsl	r4, r3, r4
 1833 0076 23FA05F5 		lsr	r5, r3, r5
 1834 007a 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 1835              		.loc 1 99 7 view .LVU463
 1836 007c 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 1837              		.loc 1 99 14 view .LVU464
 1838 0080 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 1839              		.loc 1 99 7 view .LVU465
 1840 0084 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 1841              		.loc 1 100 11 view .LVU466
 1842 0088 2140     		ands	r1, r1, r4
 1843              	.LVL132:
 100:src/int.c     **** #else
 1844              		.loc 1 100 11 view .LVU467
 1845 008a 1840     		ands	r0, r0, r3
 1846              	.L88:
 1847              	.LBE800:
 1848              	.LBE802:
 947:src/int.c     **** 
 1849              		.loc 1 947 1 view .LVU468
 1850 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1851              	.LVL133:
 1852              	.L90:
 1853              	.LBB803:
 1854              	.LBB789:
  59:src/int.c     **** #endif
 1855              		.loc 1 59 3 is_stmt 1 view .LVU469
 1856 008e 5221     		movs	r1, #82
 1857 0090 6A20     		movs	r0, #106
 1858 0092 FFF7FEFF 		bl	cmdflag
 1859              	.LVL134:
  59:src/int.c     **** #endif
 1860              		.loc 1 59 3 is_stmt 0 view .LVU470
 1861 0096 D6E7     		b	.L91
 1862              	.LVL135:
 1863              	.L93:
  59:src/int.c     **** #endif
 1864              		.loc 1 59 3 view .LVU471
ARM GAS  /tmp/ccjGZi8K.s 			page 66


 1865              	.LBE789:
 1866              	.LBE803:
 1867              	.LBB804:
 1868              	.LBB780:
 1869              	.LBB777:
 1870              	.LBB774:
 1871 0098 0022     		movs	r2, #0
 1872 009a 4FF00043 		mov	r3, #-2147483648
 1873 009e C9E7     		b	.L89
 1874              	.L96:
 1875              		.align	2
 1876              	.L95:
 1877 00a0 00000000 		.word	main_ram
 1878              	.LBE774:
 1879              	.LBE777:
 1880              	.LBE780:
 1881              	.LBE804:
 1882              		.cfi_endproc
 1883              	.LFE49:
 1885              		.section	.text.intRR,"ax",%progbits
 1886              		.align	1
 1887              		.p2align 2,,3
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1891              		.fpu fpv4-sp-d16
 1893              	intRR:
 1894              	.LVL136:
 1895              	.LFB48:
 933:src/int.c     **** 	const int cry = x & 1;
 1896              		.loc 1 933 45 is_stmt 1 view -0
 1897              		.cfi_startproc
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 0, uses_anonymous_args = 0
 934:src/int.c     **** 
 1900              		.loc 1 934 2 view .LVU473
 1901              	.LBB805:
 1902              	.LBB806:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1903              		.loc 1 56 5 is_stmt 0 view .LVU474
 1904 0000 C307     		lsls	r3, r0, #31
 1905              	.LBE806:
 1906              	.LBE805:
 933:src/int.c     **** 	const int cry = x & 1;
 1907              		.loc 1 933 45 view .LVU475
 1908 0002 70B5     		push	{r4, r5, r6, lr}
 1909              		.cfi_def_cfa_offset 16
 1910              		.cfi_offset 4, -16
 1911              		.cfi_offset 5, -12
 1912              		.cfi_offset 6, -8
 1913              		.cfi_offset 14, -4
 933:src/int.c     **** 	const int cry = x & 1;
 1914              		.loc 1 933 45 view .LVU476
 1915 0004 0446     		mov	r4, r0
 1916              	.LVL137:
 936:src/int.c     **** 	x = intLSR(x);
 1917              		.loc 1 936 2 is_stmt 1 view .LVU477
ARM GAS  /tmp/ccjGZi8K.s 			page 67


 1918              	.LBB810:
 1919              	.LBI805:
  54:src/int.c     **** #ifndef TINY_BUILD
 1920              		.loc 1 54 6 view .LVU478
 1921              	.LBB807:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1922              		.loc 1 56 2 view .LVU479
 1923              	.LBE807:
 1924              	.LBE810:
 933:src/int.c     **** 	const int cry = x & 1;
 1925              		.loc 1 933 45 is_stmt 0 view .LVU480
 1926 0006 0D46     		mov	r5, r1
 1927              	.LBB811:
 1928              	.LBB808:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1929              		.loc 1 56 5 view .LVU481
 1930 0008 20D5     		bpl	.L98
 1931 000a FFF7FEFF 		bl	set_carry.part.0
 1932              	.LVL138:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1933              		.loc 1 56 5 view .LVU482
 1934              	.LBE808:
 1935              	.LBE811:
 937:src/int.c     **** 	if (cry)
 1936              		.loc 1 937 2 is_stmt 1 view .LVU483
 937:src/int.c     **** 	if (cry)
 1937              		.loc 1 937 6 is_stmt 0 view .LVU484
 1938 000e 2046     		mov	r0, r4
 1939 0010 2946     		mov	r1, r5
 1940 0012 FFF7FEFF 		bl	intLSR
 1941              	.LVL139:
 1942              	.LBB812:
 1943              	.LBB813:
 1944              	.LBB814:
 1945              	.LBB815:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1946              		.loc 1 44 26 view .LVU485
 1947 0016 214B     		ldr	r3, .L108
 1948 0018 1B68     		ldr	r3, [r3]
 1949 001a 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1950              		.loc 1 44 15 view .LVU486
 1951 001e 03F03F02 		and	r2, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1952              		.loc 1 45 26 view .LVU487
 1953 0022 541E     		subs	r4, r2, #1
 1954              	.LVL140:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1955              		.loc 1 45 26 view .LVU488
 1956              	.LBE815:
 1957              	.LBE814:
 1958              	.LBE813:
 1959              	.LBE812:
 938:src/int.c     **** 		x |= topbit_mask();
 1960              		.loc 1 938 2 is_stmt 1 view .LVU489
 939:src/int.c     **** 	return mask_value(x);
 1961              		.loc 1 939 3 view .LVU490
ARM GAS  /tmp/ccjGZi8K.s 			page 68


 1962              	.LBB822:
 1963              	.LBI812:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 1964              		.loc 1 110 22 view .LVU491
 1965              	.LBB820:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1966              		.loc 1 111 2 view .LVU492
 1967              	.LBB818:
 1968              	.LBI814:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 1969              		.loc 1 43 14 view .LVU493
 1970              	.LBB816:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1971              		.loc 1 44 2 view .LVU494
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1972              		.loc 1 45 2 view .LVU495
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1973              		.loc 1 45 5 is_stmt 0 view .LVU496
 1974 0024 3E2C     		cmp	r4, #62
 1975 0026 35D8     		bhi	.L106
 1976 0028 0125     		movs	r5, #1
 1977 002a A2F12103 		sub	r3, r2, #33
 1978 002e C4F12006 		rsb	r6, r4, #32
 1979 0032 05FA03F3 		lsl	r3, r5, r3
 1980 0036 25FA06F6 		lsr	r6, r5, r6
 1981 003a 3343     		orrs	r3, r3, r6
 1982 003c A540     		lsls	r5, r5, r4
 1983              	.L99:
 1984              	.LVL141:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1985              		.loc 1 45 5 view .LVU497
 1986              	.LBE816:
 1987              	.LBE818:
 112:src/int.c     **** 	return bit;
 1988              		.loc 1 112 2 is_stmt 1 view .LVU498
 113:src/int.c     **** }
 1989              		.loc 1 113 2 view .LVU499
 113:src/int.c     **** }
 1990              		.loc 1 113 2 is_stmt 0 view .LVU500
 1991              	.LBE820:
 1992              	.LBE822:
 1993              	.LBB823:
 1994              	.LBB824:
 1995              	.LBB825:
 1996              	.LBB826:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 1997              		.loc 1 45 5 view .LVU501
 1998 003e 3E2C     		cmp	r4, #62
 1999              	.LBE826:
 2000              	.LBE825:
 2001              	.LBE824:
 2002              	.LBE823:
 939:src/int.c     **** 	return mask_value(x);
 2003              		.loc 1 939 5 view .LVU502
 2004 0040 40EA0500 		orr	r0, r0, r5
 2005              	.LVL142:
 939:src/int.c     **** 	return mask_value(x);
ARM GAS  /tmp/ccjGZi8K.s 			page 69


 2006              		.loc 1 939 5 view .LVU503
 2007 0044 41EA0301 		orr	r1, r1, r3
 2008              	.LVL143:
 940:src/int.c     **** }
 2009              		.loc 1 940 2 is_stmt 1 view .LVU504
 2010              	.LBB833:
 2011              	.LBI823:
  92:src/int.c     **** #ifndef TINY_BUILD
 2012              		.loc 1 92 15 view .LVU505
 2013              	.LBB831:
  94:src/int.c     **** 	long long int mask;
 2014              		.loc 1 94 2 view .LVU506
 2015              	.LBB829:
 2016              	.LBI825:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2017              		.loc 1 43 14 view .LVU507
 2018              	.LBB827:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2019              		.loc 1 44 2 view .LVU508
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2020              		.loc 1 45 2 view .LVU509
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2021              		.loc 1 45 5 is_stmt 0 view .LVU510
 2022 0048 11D9     		bls	.L107
 2023              	.LVL144:
 2024              	.L97:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2025              		.loc 1 45 5 view .LVU511
 2026              	.LBE827:
 2027              	.LBE829:
 2028              	.LBE831:
 2029              	.LBE833:
 941:src/int.c     **** 
 2030              		.loc 1 941 1 view .LVU512
 2031 004a 70BD     		pop	{r4, r5, r6, pc}
 2032              	.LVL145:
 2033              	.L98:
 2034              	.LBB834:
 2035              	.LBB809:
  59:src/int.c     **** #endif
 2036              		.loc 1 59 3 is_stmt 1 view .LVU513
 2037 004c 5221     		movs	r1, #82
 2038 004e 6A20     		movs	r0, #106
 2039              	.LVL146:
  59:src/int.c     **** #endif
 2040              		.loc 1 59 3 is_stmt 0 view .LVU514
 2041 0050 FFF7FEFF 		bl	cmdflag
 2042              	.LVL147:
  59:src/int.c     **** #endif
 2043              		.loc 1 59 3 view .LVU515
 2044              	.LBE809:
 2045              	.LBE834:
 937:src/int.c     **** 	if (cry)
 2046              		.loc 1 937 2 is_stmt 1 view .LVU516
 937:src/int.c     **** 	if (cry)
 2047              		.loc 1 937 6 is_stmt 0 view .LVU517
 2048 0054 2046     		mov	r0, r4
ARM GAS  /tmp/ccjGZi8K.s 			page 70


 2049 0056 2946     		mov	r1, r5
 2050 0058 FFF7FEFF 		bl	intLSR
 2051              	.LVL148:
 2052 005c 0F4B     		ldr	r3, .L108
 2053 005e 1B68     		ldr	r3, [r3]
 2054 0060 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 2055 0064 03F03F02 		and	r2, r3, #63
 2056              	.LVL149:
 938:src/int.c     **** 		x |= topbit_mask();
 2057              		.loc 1 938 2 is_stmt 1 view .LVU518
 2058 0068 541E     		subs	r4, r2, #1
 2059              	.LVL150:
 940:src/int.c     **** }
 2060              		.loc 1 940 2 view .LVU519
 2061              	.LBB835:
  92:src/int.c     **** #ifndef TINY_BUILD
 2062              		.loc 1 92 15 view .LVU520
 2063              	.LBB832:
  94:src/int.c     **** 	long long int mask;
 2064              		.loc 1 94 2 view .LVU521
 2065              	.LBB830:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2066              		.loc 1 43 14 view .LVU522
 2067              	.LBB828:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2068              		.loc 1 44 2 view .LVU523
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2069              		.loc 1 45 2 view .LVU524
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2070              		.loc 1 45 5 is_stmt 0 view .LVU525
 2071 006a 3E2C     		cmp	r4, #62
 2072 006c EDD8     		bhi	.L97
 2073              	.LVL151:
 2074              	.L107:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2075              		.loc 1 45 5 view .LVU526
 2076              	.LBE828:
 2077              	.LBE830:
  95:src/int.c     **** 
 2078              		.loc 1 95 2 is_stmt 1 view .LVU527
  97:src/int.c     **** 		return v;
 2079              		.loc 1 97 2 view .LVU528
  99:src/int.c     **** 	return v & mask;
 2080              		.loc 1 99 2 view .LVU529
 100:src/int.c     **** #else
 2081              		.loc 1 100 2 view .LVU530
  99:src/int.c     **** 	return v & mask;
 2082              		.loc 1 99 14 is_stmt 0 view .LVU531
 2083 006e 0123     		movs	r3, #1
 2084 0070 A2F12004 		sub	r4, r2, #32
 2085 0074 C2F12005 		rsb	r5, r2, #32
 2086 0078 23FA05F5 		lsr	r5, r3, r5
 2087 007c 03FA04F4 		lsl	r4, r3, r4
 2088 0080 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 2089              		.loc 1 99 7 view .LVU532
 2090 0082 13F1FF33 		adds	r3, r3, #-1
ARM GAS  /tmp/ccjGZi8K.s 			page 71


  99:src/int.c     **** 	return v & mask;
 2091              		.loc 1 99 14 view .LVU533
 2092 0086 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 2093              		.loc 1 99 7 view .LVU534
 2094 008a 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 2095              		.loc 1 100 11 view .LVU535
 2096 008e 2140     		ands	r1, r1, r4
 2097              	.LVL152:
 100:src/int.c     **** #else
 2098              		.loc 1 100 11 view .LVU536
 2099 0090 1840     		ands	r0, r0, r3
 2100              	.LBE832:
 2101              	.LBE835:
 941:src/int.c     **** 
 2102              		.loc 1 941 1 view .LVU537
 2103 0092 70BD     		pop	{r4, r5, r6, pc}
 2104              	.LVL153:
 2105              	.L106:
 2106              	.LBB836:
 2107              	.LBB821:
 2108              	.LBB819:
 2109              	.LBB817:
 941:src/int.c     **** 
 2110              		.loc 1 941 1 view .LVU538
 2111 0094 0025     		movs	r5, #0
 2112 0096 4FF00043 		mov	r3, #-2147483648
 2113 009a D0E7     		b	.L99
 2114              	.L109:
 2115              		.align	2
 2116              	.L108:
 2117 009c 00000000 		.word	main_ram
 2118              	.LBE817:
 2119              	.LBE819:
 2120              	.LBE821:
 2121              	.LBE836:
 2122              		.cfi_endproc
 2123              	.LFE48:
 2125              		.section	.text.intRL,"ax",%progbits
 2126              		.align	1
 2127              		.p2align 2,,3
 2128              		.syntax unified
 2129              		.thumb
 2130              		.thumb_func
 2131              		.fpu fpv4-sp-d16
 2133              	intRL:
 2134              	.LVL154:
 2135              	.LFB47:
 926:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2136              		.loc 1 926 45 is_stmt 1 view -0
 2137              		.cfi_startproc
 2138              		@ args = 0, pretend = 0, frame = 8
 2139              		@ frame_needed = 0, uses_anonymous_args = 0
 927:src/int.c     **** 
 2140              		.loc 1 927 2 view .LVU540
 2141              	.LBB837:
ARM GAS  /tmp/ccjGZi8K.s 			page 72


 2142              	.LBI837:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 2143              		.loc 1 110 22 view .LVU541
 2144              	.LBB838:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 2145              		.loc 1 111 2 view .LVU542
 2146              	.LBB839:
 2147              	.LBI839:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2148              		.loc 1 43 14 view .LVU543
 2149              	.LBB840:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2150              		.loc 1 44 2 view .LVU544
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2151              		.loc 1 45 2 view .LVU545
 2152              	.LBE840:
 2153              	.LBE839:
 2154              	.LBE838:
 2155              	.LBE837:
 926:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2156              		.loc 1 926 45 is_stmt 0 view .LVU546
 2157 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2158              		.cfi_def_cfa_offset 28
 2159              		.cfi_offset 4, -28
 2160              		.cfi_offset 5, -24
 2161              		.cfi_offset 6, -20
 2162              		.cfi_offset 7, -16
 2163              		.cfi_offset 8, -12
 2164              		.cfi_offset 9, -8
 2165              		.cfi_offset 14, -4
 2166              	.LBB856:
 2167              	.LBB851:
 2168              	.LBB846:
 2169              	.LBB841:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2170              		.loc 1 44 26 view .LVU547
 2171 0004 284E     		ldr	r6, .L117
 2172              	.LVL155:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2173              		.loc 1 44 26 view .LVU548
 2174 0006 3368     		ldr	r3, [r6]
 2175 0008 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 2176              	.LBE841:
 2177              	.LBE846:
 2178              	.LBE851:
 2179              	.LBE856:
 926:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2180              		.loc 1 926 45 view .LVU549
 2181 000c 83B0     		sub	sp, sp, #12
 2182              		.cfi_def_cfa_offset 40
 2183              	.LBB857:
 2184              	.LBB852:
 2185              	.LBB847:
 2186              	.LBB842:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2187              		.loc 1 44 15 view .LVU550
 2188 000e 03F03F03 		and	r3, r3, #63
ARM GAS  /tmp/ccjGZi8K.s 			page 73


 2189              	.LBE842:
 2190              	.LBE847:
 2191              	.LBE852:
 2192              	.LBE857:
 926:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2193              		.loc 1 926 45 view .LVU551
 2194 0012 0190     		str	r0, [sp, #4]
 2195              	.LBB858:
 2196              	.LBB853:
 2197              	.LBB848:
 2198              	.LBB843:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2199              		.loc 1 45 26 view .LVU552
 2200 0014 581E     		subs	r0, r3, #1
 2201              	.LVL156:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2202              		.loc 1 45 5 view .LVU553
 2203 0016 3E28     		cmp	r0, #62
 2204              	.LBE843:
 2205              	.LBE848:
 2206              	.LBE853:
 2207              	.LBE858:
 926:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2208              		.loc 1 926 45 view .LVU554
 2209 0018 DDF80490 		ldr	r9, [sp, #4]
 2210 001c 8846     		mov	r8, r1
 2211              	.LBB859:
 2212              	.LBB854:
 2213              	.LBB849:
 2214              	.LBB844:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2215              		.loc 1 45 5 view .LVU555
 2216 001e 3FD8     		bhi	.L115
 2217 0020 0122     		movs	r2, #1
 2218 0022 213B     		subs	r3, r3, #33
 2219 0024 C0F12001 		rsb	r1, r0, #32
 2220 0028 02FA03F3 		lsl	r3, r2, r3
 2221 002c 22FA01F1 		lsr	r1, r2, r1
 2222 0030 0B43     		orrs	r3, r3, r1
 2223 0032 8240     		lsls	r2, r2, r0
 2224              	.L111:
 2225              	.LVL157:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2226              		.loc 1 45 5 view .LVU556
 2227              	.LBE844:
 2228              	.LBE849:
 112:src/int.c     **** 	return bit;
 2229              		.loc 1 112 2 is_stmt 1 view .LVU557
 113:src/int.c     **** }
 2230              		.loc 1 113 2 view .LVU558
 113:src/int.c     **** }
 2231              		.loc 1 113 2 is_stmt 0 view .LVU559
 2232              	.LBE854:
 2233              	.LBE859:
 927:src/int.c     **** 
 2234              		.loc 1 927 33 view .LVU560
 2235 0034 09EA0204 		and	r4, r9, r2
ARM GAS  /tmp/ccjGZi8K.s 			page 74


 2236 0038 08EA0305 		and	r5, r8, r3
 927:src/int.c     **** 
 2237              		.loc 1 927 39 view .LVU561
 2238 003c 54EA0503 		orrs	r3, r4, r5
 2239 0040 14BF     		ite	ne
 2240 0042 0127     		movne	r7, #1
 2241 0044 0027     		moveq	r7, #0
 2242              	.LVL158:
 929:src/int.c     **** 	return mask_value(intLSL(x) | cry);
 2243              		.loc 1 929 2 is_stmt 1 view .LVU562
 2244              	.LBB860:
 2245              	.LBI860:
  54:src/int.c     **** #ifndef TINY_BUILD
 2246              		.loc 1 54 6 view .LVU563
 2247              	.LBB861:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2248              		.loc 1 56 2 view .LVU564
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2249              		.loc 1 56 5 is_stmt 0 view .LVU565
 2250 0046 54EA0503 		orrs	r3, r4, r5
 2251 004a 24D0     		beq	.L112
 2252 004c FFF7FEFF 		bl	set_carry.part.0
 2253              	.LVL159:
 2254              	.L113:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2255              		.loc 1 56 5 view .LVU566
 2256              	.LBE861:
 2257              	.LBE860:
 930:src/int.c     **** }
 2258              		.loc 1 930 2 is_stmt 1 view .LVU567
 930:src/int.c     **** }
 2259              		.loc 1 930 20 is_stmt 0 view .LVU568
 2260 0050 4846     		mov	r0, r9
 2261 0052 4146     		mov	r1, r8
 2262 0054 FFF7FEFF 		bl	intLSL
 2263              	.LVL160:
 2264              	.LBB863:
 2265              	.LBB864:
 2266              	.LBB865:
 2267              	.LBB866:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2268              		.loc 1 44 26 view .LVU569
 2269 0058 3368     		ldr	r3, [r6]
 2270 005a 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2271              		.loc 1 44 15 view .LVU570
 2272 005e 03F03F02 		and	r2, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2273              		.loc 1 45 26 view .LVU571
 2274 0062 531E     		subs	r3, r2, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2275              		.loc 1 45 5 view .LVU572
 2276 0064 3E2B     		cmp	r3, #62
 2277              	.LBE866:
 2278              	.LBE865:
 2279              	.LBE864:
 2280              	.LBE863:
ARM GAS  /tmp/ccjGZi8K.s 			page 75


 930:src/int.c     **** }
 2281              		.loc 1 930 9 view .LVU573
 2282 0066 40EA0700 		orr	r0, r0, r7
 2283              	.LVL161:
 2284              	.LBB870:
 2285              	.LBI863:
  92:src/int.c     **** #ifndef TINY_BUILD
 2286              		.loc 1 92 15 is_stmt 1 view .LVU574
 2287              	.LBB869:
  94:src/int.c     **** 	long long int mask;
 2288              		.loc 1 94 2 view .LVU575
 2289              	.LBB868:
 2290              	.LBI865:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2291              		.loc 1 43 14 view .LVU576
 2292              	.LBB867:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2293              		.loc 1 44 2 view .LVU577
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2294              		.loc 1 45 2 view .LVU578
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2295              		.loc 1 45 5 is_stmt 0 view .LVU579
 2296 006a 11D8     		bhi	.L110
 2297              	.LVL162:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2298              		.loc 1 45 5 view .LVU580
 2299              	.LBE867:
 2300              	.LBE868:
  95:src/int.c     **** 
 2301              		.loc 1 95 2 is_stmt 1 view .LVU581
  97:src/int.c     **** 		return v;
 2302              		.loc 1 97 2 view .LVU582
  99:src/int.c     **** 	return v & mask;
 2303              		.loc 1 99 2 view .LVU583
 100:src/int.c     **** #else
 2304              		.loc 1 100 2 view .LVU584
  99:src/int.c     **** 	return v & mask;
 2305              		.loc 1 99 14 is_stmt 0 view .LVU585
 2306 006c 0123     		movs	r3, #1
 2307 006e A2F12004 		sub	r4, r2, #32
 2308 0072 C2F12005 		rsb	r5, r2, #32
 2309 0076 03FA04F4 		lsl	r4, r3, r4
 2310 007a 23FA05F5 		lsr	r5, r3, r5
 2311 007e 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 2312              		.loc 1 99 7 view .LVU586
 2313 0080 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 2314              		.loc 1 99 14 view .LVU587
 2315 0084 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 2316              		.loc 1 99 7 view .LVU588
 2317 0088 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 2318              		.loc 1 100 11 view .LVU589
 2319 008c 2140     		ands	r1, r1, r4
 2320              	.LVL163:
ARM GAS  /tmp/ccjGZi8K.s 			page 76


 100:src/int.c     **** #else
 2321              		.loc 1 100 11 view .LVU590
 2322 008e 1840     		ands	r0, r0, r3
 2323              	.L110:
 2324              	.LBE869:
 2325              	.LBE870:
 931:src/int.c     **** 
 2326              		.loc 1 931 1 view .LVU591
 2327 0090 03B0     		add	sp, sp, #12
 2328              		.cfi_remember_state
 2329              		.cfi_def_cfa_offset 28
 2330              		@ sp needed
 2331 0092 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2332              	.LVL164:
 2333              	.L112:
 2334              		.cfi_restore_state
 2335              	.LBB871:
 2336              	.LBB862:
  59:src/int.c     **** #endif
 2337              		.loc 1 59 3 is_stmt 1 view .LVU592
 2338 0096 5221     		movs	r1, #82
 2339 0098 6A20     		movs	r0, #106
 2340 009a FFF7FEFF 		bl	cmdflag
 2341              	.LVL165:
 2342 009e D7E7     		b	.L113
 2343              	.LVL166:
 2344              	.L115:
  59:src/int.c     **** #endif
 2345              		.loc 1 59 3 is_stmt 0 view .LVU593
 2346              	.LBE862:
 2347              	.LBE871:
 2348              	.LBB872:
 2349              	.LBB855:
 2350              	.LBB850:
 2351              	.LBB845:
 2352 00a0 0022     		movs	r2, #0
 2353 00a2 4FF00043 		mov	r3, #-2147483648
 2354 00a6 C5E7     		b	.L111
 2355              	.L118:
 2356              		.align	2
 2357              	.L117:
 2358 00a8 00000000 		.word	main_ram
 2359              	.LBE845:
 2360              	.LBE850:
 2361              	.LBE855:
 2362              	.LBE872:
 2363              		.cfi_endproc
 2364              	.LFE47:
 2366              		.section	.text.set_overflow.part.0,"ax",%progbits
 2367              		.align	1
 2368              		.p2align 2,,3
 2369              		.syntax unified
 2370              		.thumb
 2371              		.thumb_func
 2372              		.fpu fpv4-sp-d16
 2374              	set_overflow.part.0:
 2375              	.LFB79:
ARM GAS  /tmp/ccjGZi8K.s 			page 77


  67:src/int.c     **** #ifndef TINY_BUILD
 2376              		.loc 1 67 6 is_stmt 1 view -0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 0
 2379              		@ frame_needed = 0, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
 2381              	.LVL167:
  70:src/int.c     **** 	else
 2382              		.loc 1 70 3 view .LVU595
 2383 0000 5121     		movs	r1, #81
 2384 0002 6920     		movs	r0, #105
 2385 0004 FFF7FEBF 		b	cmdflag
 2386              	.LVL168:
 2387              		.cfi_endproc
 2388              	.LFE79:
 2390              		.section	.text.calc_overflow,"ax",%progbits
 2391              		.align	1
 2392              		.p2align 2,,3
 2393              		.syntax unified
 2394              		.thumb
 2395              		.thumb_func
 2396              		.fpu fpv4-sp-d16
 2398              	calc_overflow:
 2399              	.LVL169:
 2400              	.LFB15:
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2401              		.loc 1 182 67 view -0
 2402              		.cfi_startproc
 2403              		@ args = 8, pretend = 0, frame = 16
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
 183:src/int.c     **** 	unsigned long long int u;
 2405              		.loc 1 183 2 view .LVU597
 2406              	.LBB873:
 2407              	.LBI873:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 2408              		.loc 1 110 22 view .LVU598
 2409              	.LBB874:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 2410              		.loc 1 111 2 view .LVU599
 2411              	.LBB875:
 2412              	.LBI875:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2413              		.loc 1 43 14 view .LVU600
 2414              	.LBB876:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2415              		.loc 1 44 2 view .LVU601
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2416              		.loc 1 45 2 view .LVU602
 2417              	.LBE876:
 2418              	.LBE875:
 2419              	.LBE874:
 2420              	.LBE873:
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2421              		.loc 1 182 67 is_stmt 0 view .LVU603
 2422 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2423              		.cfi_def_cfa_offset 32
 2424              		.cfi_offset 4, -32
ARM GAS  /tmp/ccjGZi8K.s 			page 78


 2425              		.cfi_offset 5, -28
 2426              		.cfi_offset 6, -24
 2427              		.cfi_offset 7, -20
 2428              		.cfi_offset 8, -16
 2429              		.cfi_offset 9, -12
 2430              		.cfi_offset 10, -8
 2431              		.cfi_offset 14, -4
 2432              	.LBB892:
 2433              	.LBB887:
 2434              	.LBB882:
 2435              	.LBB877:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2436              		.loc 1 44 26 view .LVU604
 2437 0004 534C     		ldr	r4, .L142
 2438              	.LVL170:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2439              		.loc 1 44 26 view .LVU605
 2440 0006 2468     		ldr	r4, [r4]
 2441              	.LVL171:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2442              		.loc 1 44 26 view .LVU606
 2443 0008 94F8E9E7 		ldrb	lr, [r4, #2025]	@ zero_extendqisi2
 2444              	.LBE877:
 2445              	.LBE882:
 2446              	.LBE887:
 2447              	.LBE892:
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2448              		.loc 1 182 67 view .LVU607
 2449 000c 84B0     		sub	sp, sp, #16
 2450              		.cfi_def_cfa_offset 48
 2451              	.LBB893:
 2452              	.LBB888:
 2453              	.LBB883:
 2454              	.LBB878:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2455              		.loc 1 44 15 view .LVU608
 2456 000e 0EF03F0E 		and	lr, lr, #63
 2457              	.LBE878:
 2458              	.LBE883:
 2459              	.LBE888:
 2460              	.LBE893:
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2461              		.loc 1 182 67 view .LVU609
 2462 0012 0391     		str	r1, [sp, #12]
 2463              	.LBB894:
 2464              	.LBB889:
 2465              	.LBB884:
 2466              	.LBB879:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2467              		.loc 1 45 26 view .LVU610
 2468 0014 0EF1FF31 		add	r1, lr, #-1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2469              		.loc 1 45 5 view .LVU611
 2470 0018 3E29     		cmp	r1, #62
 2471              	.LBE879:
 2472              	.LBE884:
 2473              	.LBE889:
ARM GAS  /tmp/ccjGZi8K.s 			page 79


 2474              	.LBE894:
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2475              		.loc 1 182 67 view .LVU612
 2476 001a 9DF830C0 		ldrb	ip, [sp, #48]	@ zero_extendqisi2
 2477 001e 0290     		str	r0, [sp, #8]
 2478 0020 1446     		mov	r4, r2
 2479              	.LVL172:
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2480              		.loc 1 182 67 view .LVU613
 2481 0022 1D46     		mov	r5, r3
 2482              	.LBB895:
 2483              	.LBB890:
 2484              	.LBB885:
 2485              	.LBB880:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2486              		.loc 1 45 5 view .LVU614
 2487 0024 7BD8     		bhi	.L129
 2488 0026 0120     		movs	r0, #1
 2489              	.LVL173:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2490              		.loc 1 45 5 view .LVU615
 2491 0028 AEF1210E 		sub	lr, lr, #33
 2492 002c C1F1200A 		rsb	r10, r1, #32
 2493 0030 00FA0EF3 		lsl	r3, r0, lr
 2494 0034 20FA0AFA 		lsr	r10, r0, r10
 2495 0038 43EA0A03 		orr	r3, r3, r10
 2496 003c 0193     		str	r3, [sp, #4]
 2497 003e 00FA01F3 		lsl	r3, r0, r1
 2498 0042 0093     		str	r3, [sp]
 2499              	.LVL174:
 2500              	.L121:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2501              		.loc 1 45 5 view .LVU616
 2502              	.LBE880:
 2503              	.LBE885:
 112:src/int.c     **** 	return bit;
 2504              		.loc 1 112 2 is_stmt 1 view .LVU617
 113:src/int.c     **** }
 2505              		.loc 1 113 2 view .LVU618
 113:src/int.c     **** }
 2506              		.loc 1 113 2 is_stmt 0 view .LVU619
 2507              	.LBE890:
 2508              	.LBE895:
 184:src/int.c     **** 	int i;
 2509              		.loc 1 184 2 is_stmt 1 view .LVU620
 185:src/int.c     **** 
 2510              		.loc 1 185 2 view .LVU621
 187:src/int.c     **** 	case MODE_UNSIGNED:
 2511              		.loc 1 187 2 view .LVU622
 2512 0044 BCF1020F 		cmp	ip, #2
 2513 0048 34D0     		beq	.L122
 2514 004a 1CF0FD0C 		ands	ip, ip, #253
 2515 004e 1CD1     		bne	.L138
 198:src/int.c     **** 		if (neg && u == tbm)
 2516              		.loc 1 198 3 view .LVU623
 198:src/int.c     **** 		if (neg && u == tbm)
 2517              		.loc 1 198 5 is_stmt 0 view .LVU624
ARM GAS  /tmp/ccjGZi8K.s 			page 80


 2518 0050 DDE90212 		ldrd	r1, [sp, #8]
 199:src/int.c     **** 			return 0;
 2519              		.loc 1 199 6 view .LVU625
 2520 0054 0D9B     		ldr	r3, [sp, #52]
 198:src/int.c     **** 		if (neg && u == tbm)
 2521              		.loc 1 198 5 view .LVU626
 2522 0056 14EB0108 		adds	r8, r4, r1
 2523 005a 45EB0209 		adc	r9, r5, r2
 2524              	.LVL175:
 199:src/int.c     **** 			return 0;
 2525              		.loc 1 199 3 is_stmt 1 view .LVU627
 199:src/int.c     **** 			return 0;
 2526              		.loc 1 199 6 is_stmt 0 view .LVU628
 2527 005e 2BB1     		cbz	r3, .L127
 199:src/int.c     **** 			return 0;
 2528              		.loc 1 199 11 discriminator 1 view .LVU629
 2529 0060 DDE90023 		ldrd	r2, [sp]
 2530 0064 9945     		cmp	r9, r3
 2531 0066 08BF     		it	eq
 2532 0068 9045     		cmpeq	r8, r2
 2533 006a 1FD0     		beq	.L132
 2534              	.L127:
 201:src/int.c     **** 			break;
 2535              		.loc 1 201 3 is_stmt 1 view .LVU630
 201:src/int.c     **** 			break;
 2536              		.loc 1 201 11 is_stmt 0 view .LVU631
 2537 006c DDE90067 		ldrd	r6, [sp]
 2538 0070 08EA0600 		and	r0, r8, r6
 2539 0074 09EA0701 		and	r1, r9, r7
 201:src/int.c     **** 			break;
 2540              		.loc 1 201 6 view .LVU632
 2541 0078 50EA0103 		orrs	r3, r0, r1
 2542 007c 55D0     		beq	.L139
 2543              	.LVL176:
 2544              	.L125:
 213:src/int.c     **** 	return 1;
 2545              		.loc 1 213 2 is_stmt 1 view .LVU633
 2546              	.LBB896:
 2547              	.LBI896:
  67:src/int.c     **** #ifndef TINY_BUILD
 2548              		.loc 1 67 6 view .LVU634
 2549              	.LBB897:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2550              		.loc 1 69 2 view .LVU635
 2551 007e FFF7FEFF 		bl	set_overflow.part.0
 2552              	.LVL177:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2553              		.loc 1 69 2 is_stmt 0 view .LVU636
 2554              	.LBE897:
 2555              	.LBE896:
 214:src/int.c     **** }
 2556              		.loc 1 214 2 is_stmt 1 view .LVU637
 214:src/int.c     **** }
 2557              		.loc 1 214 9 is_stmt 0 view .LVU638
 2558 0082 0120     		movs	r0, #1
 215:src/int.c     **** #endif
 2559              		.loc 1 215 1 view .LVU639
ARM GAS  /tmp/ccjGZi8K.s 			page 81


 2560 0084 04B0     		add	sp, sp, #16
 2561              		.cfi_remember_state
 2562              		.cfi_def_cfa_offset 32
 2563              		@ sp needed
 2564 0086 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2565              	.LVL178:
 2566              	.L138:
 2567              		.cfi_restore_state
 209:src/int.c     **** 			break;
 2568              		.loc 1 209 3 is_stmt 1 view .LVU640
 209:src/int.c     **** 			break;
 2569              		.loc 1 209 17 is_stmt 0 view .LVU641
 2570 008a DDE90212 		ldrd	r1, [sp, #8]
 209:src/int.c     **** 			break;
 2571              		.loc 1 209 11 view .LVU642
 2572 008e DDE90078 		ldrd	r7, [sp]
 209:src/int.c     **** 			break;
 2573              		.loc 1 209 17 view .LVU643
 2574 0092 6618     		adds	r6, r4, r1
 2575 0094 1346     		mov	r3, r2
 2576 0096 45EB0303 		adc	r3, r5, r3
 2577 009a 1C46     		mov	r4, r3
 209:src/int.c     **** 			break;
 2578              		.loc 1 209 11 view .LVU644
 2579 009c 4346     		mov	r3, r8
 2580 009e 2340     		ands	r3, r3, r4
 2581 00a0 06EA0700 		and	r0, r6, r7
 2582 00a4 1946     		mov	r1, r3
 209:src/int.c     **** 			break;
 2583              		.loc 1 209 6 view .LVU645
 2584 00a6 50EA0103 		orrs	r3, r0, r1
 2585 00aa E8D1     		bne	.L125
 2586              	.L132:
 195:src/int.c     **** 
 2587              		.loc 1 195 10 view .LVU646
 2588 00ac 0020     		movs	r0, #0
 2589              	.L140:
 215:src/int.c     **** #endif
 2590              		.loc 1 215 1 view .LVU647
 2591 00ae 04B0     		add	sp, sp, #16
 2592              		.cfi_remember_state
 2593              		.cfi_def_cfa_offset 32
 2594              		@ sp needed
 2595 00b0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2596              	.LVL179:
 2597              	.L122:
 2598              		.cfi_restore_state
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2599              		.loc 1 191 3 is_stmt 1 view .LVU648
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2600              		.loc 1 191 17 is_stmt 0 view .LVU649
 2601 00b4 DDE90067 		ldrd	r6, [sp]
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2602              		.loc 1 191 28 view .LVU650
 2603 00b8 DDE9029A 		ldrd	r9, [sp, #8]
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2604              		.loc 1 191 17 view .LVU651
ARM GAS  /tmp/ccjGZi8K.s 			page 82


 2605 00bc 16F1FF3C 		adds	ip, r6, #-1
 2606 00c0 47F1FF3E 		adc	lr, r7, #-1
 2607              	.LVL180:
 192:src/int.c     **** 		if (i > 1)
 2608              		.loc 1 192 3 is_stmt 1 view .LVU652
 193:src/int.c     **** 			break;
 2609              		.loc 1 193 3 view .LVU653
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2610              		.loc 1 191 11 is_stmt 0 view .LVU654
 2611 00c4 0CEA0401 		and	r1, ip, r4
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2612              		.loc 1 191 28 view .LVU655
 2613 00c8 0CEA090C 		and	ip, ip, r9
 2614              	.LVL181:
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2615              		.loc 1 191 5 view .LVU656
 2616 00cc 11EB0C01 		adds	r1, r1, ip
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2617              		.loc 1 191 11 view .LVU657
 2618 00d0 0EEA0500 		and	r0, lr, r5
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2619              		.loc 1 191 28 view .LVU658
 2620 00d4 0EEA0A0E 		and	lr, lr, r10
 2621              	.LVL182:
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2622              		.loc 1 191 5 view .LVU659
 2623 00d8 40EB0E00 		adc	r0, r0, lr
 192:src/int.c     **** 		if (i > 1)
 2624              		.loc 1 192 11 view .LVU660
 2625 00dc 3140     		ands	r1, r1, r6
 2626 00de 3840     		ands	r0, r0, r7
 192:src/int.c     **** 		if (i > 1)
 2627              		.loc 1 192 30 view .LVU661
 2628 00e0 B846     		mov	r8, r7
 192:src/int.c     **** 		if (i > 1)
 2629              		.loc 1 192 19 view .LVU662
 2630 00e2 51EA0003 		orrs	r3, r1, r0
 192:src/int.c     **** 		if (i > 1)
 2631              		.loc 1 192 30 view .LVU663
 2632 00e6 3746     		mov	r7, r6
 2633              	.LVL183:
 192:src/int.c     **** 		if (i > 1)
 2634              		.loc 1 192 30 view .LVU664
 2635 00e8 09EA0600 		and	r0, r9, r6
 2636 00ec 4346     		mov	r3, r8
 2637 00ee 5646     		mov	r6, r10
 2638              	.LVL184:
 192:src/int.c     **** 		if (i > 1)
 2639              		.loc 1 192 30 view .LVU665
 2640 00f0 06EA0306 		and	r6, r6, r3
 192:src/int.c     **** 		if (i > 1)
 2641              		.loc 1 192 49 view .LVU666
 2642 00f4 03EA0503 		and	r3, r3, r5
 192:src/int.c     **** 		if (i > 1)
 2643              		.loc 1 192 19 view .LVU667
 2644 00f8 14BF     		ite	ne
 2645 00fa 0121     		movne	r1, #1
ARM GAS  /tmp/ccjGZi8K.s 			page 83


 2646 00fc 0021     		moveq	r1, #0
 192:src/int.c     **** 		if (i > 1)
 2647              		.loc 1 192 49 view .LVU668
 2648 00fe 07EA0402 		and	r2, r7, r4
 192:src/int.c     **** 		if (i > 1)
 2649              		.loc 1 192 38 view .LVU669
 2650 0102 3043     		orrs	r0, r0, r6
 192:src/int.c     **** 		if (i > 1)
 2651              		.loc 1 192 49 view .LVU670
 2652 0104 1C46     		mov	r4, r3
 2653              	.LVL185:
 192:src/int.c     **** 		if (i > 1)
 2654              		.loc 1 192 57 view .LVU671
 2655 0106 2243     		orrs	r2, r2, r4
 192:src/int.c     **** 		if (i > 1)
 2656              		.loc 1 192 23 view .LVU672
 2657 0108 0028     		cmp	r0, #0
 2658 010a 0CBF     		ite	eq
 2659 010c 0B46     		moveq	r3, r1
 2660 010e 4B1C     		addne	r3, r1, #1
 192:src/int.c     **** 		if (i > 1)
 2661              		.loc 1 192 5 view .LVU673
 2662 0110 002A     		cmp	r2, #0
 2663 0112 18BF     		it	ne
 2664 0114 0133     		addne	r3, r3, #1
 193:src/int.c     **** 			break;
 2665              		.loc 1 193 6 view .LVU674
 2666 0116 012B     		cmp	r3, #1
 2667 0118 B1DC     		bgt	.L125
 195:src/int.c     **** 
 2668              		.loc 1 195 10 view .LVU675
 2669 011a 0020     		movs	r0, #0
 2670 011c C7E7     		b	.L140
 2671              	.LVL186:
 2672              	.L129:
 2673              	.LBB898:
 2674              	.LBB891:
 2675              	.LBB886:
 2676              	.LBB881:
 195:src/int.c     **** 
 2677              		.loc 1 195 10 view .LVU676
 2678 011e 0022     		movs	r2, #0
 2679              	.LVL187:
 195:src/int.c     **** 
 2680              		.loc 1 195 10 view .LVU677
 2681 0120 4FF00043 		mov	r3, #-2147483648
 2682 0124 CDE90023 		strd	r2, [sp]
 2683 0128 8CE7     		b	.L121
 2684              	.LVL188:
 2685              	.L139:
 195:src/int.c     **** 
 2686              		.loc 1 195 10 view .LVU678
 2687              	.LBE881:
 2688              	.LBE886:
 2689              	.LBE891:
 2690              	.LBE898:
 203:src/int.c     **** 			break;
ARM GAS  /tmp/ccjGZi8K.s 			page 84


 2691              		.loc 1 203 3 is_stmt 1 view .LVU679
 203:src/int.c     **** 			break;
 2692              		.loc 1 203 6 is_stmt 0 view .LVU680
 2693 012a DDE90223 		ldrd	r2, [sp, #8]
 2694 012e BB42     		cmp	r3, r7
 2695 0130 08BF     		it	eq
 2696 0132 B242     		cmpeq	r2, r6
 2697 0134 0AD0     		beq	.L141
 203:src/int.c     **** 			break;
 2698              		.loc 1 203 29 discriminator 3 view .LVU681
 2699 0136 DDE90023 		ldrd	r2, [sp]
 2700 013a 9D42     		cmp	r5, r3
 2701 013c 08BF     		it	eq
 2702 013e 9442     		cmpeq	r4, r2
 2703 0140 B4D1     		bne	.L132
 203:src/int.c     **** 			break;
 2704              		.loc 1 203 43 discriminator 4 view .LVU682
 2705 0142 DDE90234 		ldrd	r3, [sp, #8]
 2706 0146 2343     		orrs	r3, r3, r4
 2707 0148 99D1     		bne	.L125
 2708 014a AFE7     		b	.L132
 2709              	.L141:
 203:src/int.c     **** 			break;
 2710              		.loc 1 203 18 discriminator 1 view .LVU683
 2711 014c 54EA0503 		orrs	r3, r4, r5
 2712 0150 95D1     		bne	.L125
 2713 0152 ABE7     		b	.L132
 2714              	.L143:
 2715              		.align	2
 2716              	.L142:
 2717 0154 00000000 		.word	main_ram
 2718              		.cfi_endproc
 2719              	.LFE15:
 2721              		.section	.text.int_base,"ax",%progbits
 2722              		.align	1
 2723              		.p2align 2,,3
 2724              		.global	int_base
 2725              		.syntax unified
 2726              		.thumb
 2727              		.thumb_func
 2728              		.fpu fpv4-sp-d16
 2730              	int_base:
 2731              	.LFB1:
  32:src/int.c     **** 	const unsigned int b = UState.int_base + 1;
 2732              		.loc 1 32 29 is_stmt 1 view -0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 0
 2735              		@ frame_needed = 0, uses_anonymous_args = 0
 2736              		@ link register save eliminated.
  33:src/int.c     **** 	if (b < 2)
 2737              		.loc 1 33 2 view .LVU685
  33:src/int.c     **** 	if (b < 2)
 2738              		.loc 1 33 31 is_stmt 0 view .LVU686
 2739 0000 054B     		ldr	r3, .L146
 2740 0002 1B68     		ldr	r3, [r3]
 2741 0004 93F8E807 		ldrb	r0, [r3, #2024]	@ zero_extendqisi2
 2742 0008 0009     		lsrs	r0, r0, #4
ARM GAS  /tmp/ccjGZi8K.s 			page 85


  34:src/int.c     **** 		return 10;
 2743              		.loc 1 34 5 view .LVU687
 2744 000a 0028     		cmp	r0, #0
  33:src/int.c     **** 	if (b < 2)
 2745              		.loc 1 33 41 view .LVU688
 2746 000c 00F10100 		add	r0, r0, #1
 2747              	.LVL189:
  34:src/int.c     **** 		return 10;
 2748              		.loc 1 34 2 is_stmt 1 view .LVU689
  37:src/int.c     **** 
 2749              		.loc 1 37 1 is_stmt 0 view .LVU690
 2750 0010 08BF     		it	eq
 2751 0012 0A20     		moveq	r0, #10
 2752              	.LVL190:
  37:src/int.c     **** 
 2753              		.loc 1 37 1 view .LVU691
 2754 0014 7047     		bx	lr
 2755              	.L147:
 2756 0016 00BF     		.align	2
 2757              	.L146:
 2758 0018 00000000 		.word	main_ram
 2759              		.cfi_endproc
 2760              	.LFE1:
 2762              		.section	.text.int_mode,"ax",%progbits
 2763              		.align	1
 2764              		.p2align 2,,3
 2765              		.global	int_mode
 2766              		.syntax unified
 2767              		.thumb
 2768              		.thumb_func
 2769              		.fpu fpv4-sp-d16
 2771              	int_mode:
 2772              	.LFB2:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 2773              		.loc 1 39 38 is_stmt 1 view -0
 2774              		.cfi_startproc
 2775              		@ args = 0, pretend = 0, frame = 0
 2776              		@ frame_needed = 0, uses_anonymous_args = 0
 2777              		@ link register save eliminated.
  40:src/int.c     **** }
 2778              		.loc 1 40 2 view .LVU693
  40:src/int.c     **** }
 2779              		.loc 1 40 39 is_stmt 0 view .LVU694
 2780 0000 034B     		ldr	r3, .L149
 2781 0002 1B68     		ldr	r3, [r3]
 2782 0004 93F8E807 		ldrb	r0, [r3, #2024]	@ zero_extendqisi2
  41:src/int.c     **** 
 2783              		.loc 1 41 1 view .LVU695
 2784 0008 C0F38100 		ubfx	r0, r0, #2, #2
 2785 000c 7047     		bx	lr
 2786              	.L150:
 2787 000e 00BF     		.align	2
 2788              	.L149:
 2789 0010 00000000 		.word	main_ram
 2790              		.cfi_endproc
 2791              	.LFE2:
 2793              		.section	.text.word_size,"ax",%progbits
ARM GAS  /tmp/ccjGZi8K.s 			page 86


 2794              		.align	1
 2795              		.p2align 2,,3
 2796              		.global	word_size
 2797              		.syntax unified
 2798              		.thumb
 2799              		.thumb_func
 2800              		.fpu fpv4-sp-d16
 2802              	word_size:
 2803              	.LFB3:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2804              		.loc 1 43 30 is_stmt 1 view -0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 0
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
 2808              		@ link register save eliminated.
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2809              		.loc 1 44 2 view .LVU697
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2810              		.loc 1 44 26 is_stmt 0 view .LVU698
 2811 0000 054B     		ldr	r3, .L153
 2812 0002 1B68     		ldr	r3, [r3]
 2813 0004 93F8E907 		ldrb	r0, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2814              		.loc 1 44 15 view .LVU699
 2815 0008 00F03F00 		and	r0, r0, #63
 2816              	.LVL191:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2817              		.loc 1 45 2 is_stmt 1 view .LVU700
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2818              		.loc 1 45 26 is_stmt 0 view .LVU701
 2819 000c 431E     		subs	r3, r0, #1
  46:src/int.c     **** 	return il;
 2820              		.loc 1 46 10 view .LVU702
 2821 000e 3F2B     		cmp	r3, #63
  48:src/int.c     **** 
 2822              		.loc 1 48 1 view .LVU703
 2823 0010 28BF     		it	cs
 2824 0012 4020     		movcs	r0, #64
 2825              	.LVL192:
  48:src/int.c     **** 
 2826              		.loc 1 48 1 view .LVU704
 2827 0014 7047     		bx	lr
 2828              	.L154:
 2829 0016 00BF     		.align	2
 2830              	.L153:
 2831 0018 00000000 		.word	main_ram
 2832              		.cfi_endproc
 2833              	.LFE3:
 2835              		.section	.text.get_carry,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.global	get_carry
 2839              		.syntax unified
 2840              		.thumb
 2841              		.thumb_func
 2842              		.fpu fpv4-sp-d16
 2844              	get_carry:
ARM GAS  /tmp/ccjGZi8K.s 			page 87


 2845              	.LFB4:
  50:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 2846              		.loc 1 50 21 is_stmt 1 view -0
 2847              		.cfi_startproc
 2848              		@ args = 0, pretend = 0, frame = 0
 2849              		@ frame_needed = 0, uses_anonymous_args = 0
 2850              		@ link register save eliminated.
  51:src/int.c     **** }
 2851              		.loc 1 51 2 view .LVU706
  51:src/int.c     **** }
 2852              		.loc 1 51 9 is_stmt 0 view .LVU707
 2853 0000 6A20     		movs	r0, #106
 2854 0002 FFF7FEBF 		b	get_user_flag
 2855              	.LVL193:
 2856              		.cfi_endproc
 2857              	.LFE4:
 2859 0006 00BF     		.section	.text.set_carry,"ax",%progbits
 2860              		.align	1
 2861              		.p2align 2,,3
 2862              		.global	set_carry
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	set_carry:
 2869              	.LVL194:
 2870              	.LFB5:
  54:src/int.c     **** #ifndef TINY_BUILD
 2871              		.loc 1 54 23 is_stmt 1 view -0
 2872              		.cfi_startproc
 2873              		@ args = 0, pretend = 0, frame = 0
 2874              		@ frame_needed = 0, uses_anonymous_args = 0
 2875              		@ link register save eliminated.
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2876              		.loc 1 56 2 view .LVU709
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2877              		.loc 1 56 5 is_stmt 0 view .LVU710
 2878 0000 08B1     		cbz	r0, .L157
 2879 0002 FFF7FEBF 		b	set_carry.part.0
 2880              	.LVL195:
 2881              	.L157:
  59:src/int.c     **** #endif
 2882              		.loc 1 59 3 is_stmt 1 view .LVU711
 2883 0006 5221     		movs	r1, #82
 2884 0008 6A20     		movs	r0, #106
 2885              	.LVL196:
  59:src/int.c     **** #endif
 2886              		.loc 1 59 3 is_stmt 0 view .LVU712
 2887 000a FFF7FEBF 		b	cmdflag
 2888              	.LVL197:
 2889              		.cfi_endproc
 2890              	.LFE5:
 2892 000e 00BF     		.section	.text.get_overflow,"ax",%progbits
 2893              		.align	1
 2894              		.p2align 2,,3
 2895              		.global	get_overflow
 2896              		.syntax unified
ARM GAS  /tmp/ccjGZi8K.s 			page 88


 2897              		.thumb
 2898              		.thumb_func
 2899              		.fpu fpv4-sp-d16
 2901              	get_overflow:
 2902              	.LFB6:
  63:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
 2903              		.loc 1 63 24 is_stmt 1 view -0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 2907              		@ link register save eliminated.
  64:src/int.c     **** }
 2908              		.loc 1 64 2 view .LVU714
  64:src/int.c     **** }
 2909              		.loc 1 64 9 is_stmt 0 view .LVU715
 2910 0000 6920     		movs	r0, #105
 2911 0002 FFF7FEBF 		b	get_user_flag
 2912              	.LVL198:
 2913              		.cfi_endproc
 2914              	.LFE6:
 2916 0006 00BF     		.section	.text.set_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.global	set_overflow
 2920              		.syntax unified
 2921              		.thumb
 2922              		.thumb_func
 2923              		.fpu fpv4-sp-d16
 2925              	set_overflow:
 2926              	.LVL199:
 2927              	.LFB7:
  67:src/int.c     **** #ifndef TINY_BUILD
 2928              		.loc 1 67 26 is_stmt 1 view -0
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 0
 2931              		@ frame_needed = 0, uses_anonymous_args = 0
 2932              		@ link register save eliminated.
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2933              		.loc 1 69 2 view .LVU717
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2934              		.loc 1 69 5 is_stmt 0 view .LVU718
 2935 0000 08B1     		cbz	r0, .L160
 2936 0002 FFF7FEBF 		b	set_overflow.part.0
 2937              	.LVL200:
 2938              	.L160:
  72:src/int.c     **** #endif
 2939              		.loc 1 72 3 is_stmt 1 view .LVU719
 2940 0006 5221     		movs	r1, #82
 2941 0008 6920     		movs	r0, #105
 2942              	.LVL201:
  72:src/int.c     **** #endif
 2943              		.loc 1 72 3 is_stmt 0 view .LVU720
 2944 000a FFF7FEBF 		b	cmdflag
 2945              	.LVL202:
 2946              		.cfi_endproc
 2947              	.LFE7:
 2949 000e 00BF     		.section	.text.mask_value,"ax",%progbits
ARM GAS  /tmp/ccjGZi8K.s 			page 89


 2950              		.align	1
 2951              		.p2align 2,,3
 2952              		.global	mask_value
 2953              		.syntax unified
 2954              		.thumb
 2955              		.thumb_func
 2956              		.fpu fpv4-sp-d16
 2958              	mask_value:
 2959              	.LVL203:
 2960              	.LFB10:
  92:src/int.c     **** #ifndef TINY_BUILD
 2961              		.loc 1 92 49 is_stmt 1 view -0
 2962              		.cfi_startproc
 2963              		@ args = 0, pretend = 0, frame = 0
 2964              		@ frame_needed = 0, uses_anonymous_args = 0
 2965              		@ link register save eliminated.
  94:src/int.c     **** 	long long int mask;
 2966              		.loc 1 94 2 view .LVU722
 2967              	.LBB899:
 2968              	.LBI899:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 2969              		.loc 1 43 14 view .LVU723
 2970              	.LBB900:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2971              		.loc 1 44 2 view .LVU724
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2972              		.loc 1 44 26 is_stmt 0 view .LVU725
 2973 0000 0E4B     		ldr	r3, .L168
 2974 0002 1B68     		ldr	r3, [r3]
 2975 0004 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2976              		.loc 1 44 15 view .LVU726
 2977 0008 03F03F02 		and	r2, r3, #63
 2978              	.LVL204:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2979              		.loc 1 45 2 is_stmt 1 view .LVU727
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2980              		.loc 1 45 26 is_stmt 0 view .LVU728
 2981 000c 531E     		subs	r3, r2, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2982              		.loc 1 45 5 view .LVU729
 2983 000e 3E2B     		cmp	r3, #62
 2984 0010 13D8     		bhi	.L165
 2985              	.LVL205:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 2986              		.loc 1 45 5 view .LVU730
 2987              	.LBE900:
 2988              	.LBE899:
  95:src/int.c     **** 
 2989              		.loc 1 95 2 is_stmt 1 view .LVU731
  97:src/int.c     **** 		return v;
 2990              		.loc 1 97 2 view .LVU732
  99:src/int.c     **** 	return v & mask;
 2991              		.loc 1 99 2 view .LVU733
 100:src/int.c     **** #else
 2992              		.loc 1 100 2 view .LVU734
  92:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccjGZi8K.s 			page 90


 2993              		.loc 1 92 49 is_stmt 0 view .LVU735
 2994 0012 70B4     		push	{r4, r5, r6}
 2995              		.cfi_def_cfa_offset 12
 2996              		.cfi_offset 4, -12
 2997              		.cfi_offset 5, -8
 2998              		.cfi_offset 6, -4
  99:src/int.c     **** 	return v & mask;
 2999              		.loc 1 99 14 view .LVU736
 3000 0014 0123     		movs	r3, #1
 3001 0016 A2F12005 		sub	r5, r2, #32
 3002 001a C2F12006 		rsb	r6, r2, #32
 3003 001e 03FA05F4 		lsl	r4, r3, r5
 3004 0022 23FA06F6 		lsr	r6, r3, r6
 3005 0026 9340     		lsls	r3, r3, r2
 3006 0028 3443     		orrs	r4, r4, r6
  99:src/int.c     **** 	return v & mask;
 3007              		.loc 1 99 7 view .LVU737
 3008 002a 13F1FF33 		adds	r3, r3, #-1
 3009 002e 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 3010              		.loc 1 100 11 view .LVU738
 3011 0032 2140     		ands	r1, r1, r4
 3012 0034 1840     		ands	r0, r0, r3
 3013              	.LVL206:
 104:src/int.c     **** 
 3014              		.loc 1 104 1 view .LVU739
 3015 0036 70BC     		pop	{r4, r5, r6}
 3016              		.cfi_restore 6
 3017              		.cfi_restore 5
 3018              		.cfi_restore 4
 3019              		.cfi_def_cfa_offset 0
 3020 0038 7047     		bx	lr
 3021              	.LVL207:
 3022              	.L165:
 104:src/int.c     **** 
 3023              		.loc 1 104 1 view .LVU740
 3024 003a 7047     		bx	lr
 3025              	.L169:
 3026              		.align	2
 3027              	.L168:
 3028 003c 00000000 		.word	main_ram
 3029              		.cfi_endproc
 3030              	.LFE10:
 3032              		.section	.text.extract_value,"ax",%progbits
 3033              		.align	1
 3034              		.p2align 2,,3
 3035              		.global	extract_value
 3036              		.syntax unified
 3037              		.thumb
 3038              		.thumb_func
 3039              		.fpu fpv4-sp-d16
 3041              	extract_value:
 3042              	.LVL208:
 3043              	.LFB12:
 120:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3044              		.loc 1 120 80 is_stmt 1 view -0
 3045              		.cfi_startproc
ARM GAS  /tmp/ccjGZi8K.s 			page 91


 3046              		@ args = 0, pretend = 0, frame = 0
 3047              		@ frame_needed = 0, uses_anonymous_args = 0
 121:src/int.c     **** 	long long int v = mask_value(val);
 3048              		.loc 1 121 2 view .LVU742
 3049              	.LBB901:
 3050              	.LBI901:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 3051              		.loc 1 39 23 view .LVU743
 3052              	.LBB902:
  40:src/int.c     **** }
 3053              		.loc 1 40 2 view .LVU744
  40:src/int.c     **** }
 3054              		.loc 1 40 33 is_stmt 0 view .LVU745
 3055 0000 3C4B     		ldr	r3, .L188
 3056 0002 1B68     		ldr	r3, [r3]
 3057              	.LBE902:
 3058              	.LBE901:
 120:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3059              		.loc 1 120 80 view .LVU746
 3060 0004 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3061              		.cfi_def_cfa_offset 28
 3062              		.cfi_offset 4, -28
 3063              		.cfi_offset 5, -24
 3064              		.cfi_offset 6, -20
 3065              		.cfi_offset 7, -16
 3066              		.cfi_offset 8, -12
 3067              		.cfi_offset 9, -8
 3068              		.cfi_offset 14, -4
 3069              	.LBB905:
 3070              	.LBB906:
 3071              	.LBB907:
 3072              	.LBB908:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3073              		.loc 1 44 26 view .LVU747
 3074 0008 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 3075              	.LBE908:
 3076              	.LBE907:
 3077              	.LBE906:
 3078              	.LBE905:
 3079              	.LBB916:
 3080              	.LBB903:
  40:src/int.c     **** }
 3081              		.loc 1 40 39 view .LVU748
 3082 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3083              	.LBE903:
 3084              	.LBE916:
 3085              	.LBB917:
 3086              	.LBB913:
 3087              	.LBB911:
 3088              	.LBB909:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3089              		.loc 1 44 15 view .LVU749
 3090 0010 06F03F06 		and	r6, r6, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3091              		.loc 1 45 26 view .LVU750
 3092 0014 771E     		subs	r7, r6, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccjGZi8K.s 			page 92


 3093              		.loc 1 45 5 view .LVU751
 3094 0016 3E2F     		cmp	r7, #62
 3095              	.LBE909:
 3096              	.LBE911:
 3097              	.LBE913:
 3098              	.LBE917:
 120:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3099              		.loc 1 120 80 view .LVU752
 3100 0018 0446     		mov	r4, r0
 3101 001a 0D46     		mov	r5, r1
 3102              	.LBB918:
 3103              	.LBB904:
  40:src/int.c     **** }
 3104              		.loc 1 40 9 view .LVU753
 3105 001c C3F38100 		ubfx	r0, r3, #2, #2
 3106              	.LVL209:
  40:src/int.c     **** }
 3107              		.loc 1 40 9 view .LVU754
 3108              	.LBE904:
 3109              	.LBE918:
 122:src/int.c     **** 	long long int tbm;
 3110              		.loc 1 122 2 is_stmt 1 view .LVU755
 3111              	.LBB919:
 3112              	.LBI905:
  92:src/int.c     **** #ifndef TINY_BUILD
 3113              		.loc 1 92 15 view .LVU756
 3114              	.LBB914:
  94:src/int.c     **** 	long long int mask;
 3115              		.loc 1 94 2 view .LVU757
 3116              	.LBB912:
 3117              	.LBI907:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 3118              		.loc 1 43 14 view .LVU758
 3119              	.LBB910:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3120              		.loc 1 44 2 view .LVU759
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3121              		.loc 1 45 2 view .LVU760
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3122              		.loc 1 45 5 is_stmt 0 view .LVU761
 3123 0020 52D8     		bhi	.L171
 3124              	.LVL210:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3125              		.loc 1 45 5 view .LVU762
 3126              	.LBE910:
 3127              	.LBE912:
  95:src/int.c     **** 
 3128              		.loc 1 95 2 is_stmt 1 view .LVU763
  97:src/int.c     **** 		return v;
 3129              		.loc 1 97 2 view .LVU764
  99:src/int.c     **** 	return v & mask;
 3130              		.loc 1 99 2 view .LVU765
 100:src/int.c     **** #else
 3131              		.loc 1 100 2 view .LVU766
  99:src/int.c     **** 	return v & mask;
 3132              		.loc 1 99 14 is_stmt 0 view .LVU767
 3133 0022 0121     		movs	r1, #1
ARM GAS  /tmp/ccjGZi8K.s 			page 93


 3134 0024 A6F12003 		sub	r3, r6, #32
 3135              	.LVL211:
  99:src/int.c     **** 	return v & mask;
 3136              		.loc 1 99 14 view .LVU768
 3137 0028 C6F1200E 		rsb	lr, r6, #32
 3138 002c 01FA03F3 		lsl	r3, r1, r3
 3139 0030 21FA0EFE 		lsr	lr, r1, lr
 3140 0034 01FA06FC 		lsl	ip, r1, r6
  99:src/int.c     **** 	return v & mask;
 3141              		.loc 1 99 7 view .LVU769
 3142 0038 1CF1FF3C 		adds	ip, ip, #-1
  99:src/int.c     **** 	return v & mask;
 3143              		.loc 1 99 14 view .LVU770
 3144 003c 43EA0E03 		orr	r3, r3, lr
  99:src/int.c     **** 	return v & mask;
 3145              		.loc 1 99 7 view .LVU771
 3146 0040 43F1FF33 		adc	r3, r3, #-1
 100:src/int.c     **** #else
 3147              		.loc 1 100 11 view .LVU772
 3148 0044 2B40     		ands	r3, r3, r5
 3149 0046 0CEA040C 		and	ip, ip, r4
 3150              	.LBE914:
 3151              	.LBE919:
 125:src/int.c     **** 		*sign = 0;
 3152              		.loc 1 125 5 view .LVU773
 3153 004a 0228     		cmp	r0, #2
 3154              	.LBB920:
 3155              	.LBB915:
 100:src/int.c     **** #else
 3156              		.loc 1 100 11 view .LVU774
 3157 004c 6446     		mov	r4, ip
 3158              	.LVL212:
 100:src/int.c     **** #else
 3159              		.loc 1 100 11 view .LVU775
 3160 004e 1D46     		mov	r5, r3
 3161              	.LVL213:
 100:src/int.c     **** #else
 3162              		.loc 1 100 11 view .LVU776
 3163              	.LBE915:
 3164              	.LBE920:
 123:src/int.c     **** 
 3165              		.loc 1 123 2 is_stmt 1 view .LVU777
 125:src/int.c     **** 		*sign = 0;
 3166              		.loc 1 125 2 view .LVU778
 125:src/int.c     **** 		*sign = 0;
 3167              		.loc 1 125 5 is_stmt 0 view .LVU779
 3168 0050 40D0     		beq	.L179
 3169 0052 A6F12103 		sub	r3, r6, #33
 3170 0056 C7F1200C 		rsb	ip, r7, #32
 3171 005a 01FA03F3 		lsl	r3, r1, r3
 3172 005e 21FA0CFC 		lsr	ip, r1, ip
 3173 0062 43EA0C03 		orr	r3, r3, ip
 3174 0066 B940     		lsls	r1, r1, r7
 3175              	.L180:
 112:src/int.c     **** 	return bit;
 3176              		.loc 1 112 2 is_stmt 1 view .LVU780
 3177              	.LVL214:
ARM GAS  /tmp/ccjGZi8K.s 			page 94


 113:src/int.c     **** }
 3178              		.loc 1 113 2 view .LVU781
 132:src/int.c     **** 		*sign = 1;
 3179              		.loc 1 132 2 view .LVU782
 132:src/int.c     **** 		*sign = 1;
 3180              		.loc 1 132 8 is_stmt 0 view .LVU783
 3181 0068 01EA0408 		and	r8, r1, r4
 3182 006c 03EA0509 		and	r9, r3, r5
 132:src/int.c     **** 		*sign = 1;
 3183              		.loc 1 132 5 view .LVU784
 3184 0070 58EA090C 		orrs	ip, r8, r9
 3185 0074 1CD1     		bne	.L185
 141:src/int.c     ****     return mask_value(v);
 3186              		.loc 1 141 3 is_stmt 1 view .LVU785
 141:src/int.c     ****     return mask_value(v);
 3187              		.loc 1 141 9 is_stmt 0 view .LVU786
 3188 0076 0023     		movs	r3, #0
 3189 0078 1360     		str	r3, [r2]
 3190              	.LVL215:
 3191              	.L176:
 142:src/int.c     **** }
 3192              		.loc 1 142 5 is_stmt 1 view .LVU787
 3193              	.LBB921:
 3194              	.LBI921:
  92:src/int.c     **** #ifndef TINY_BUILD
 3195              		.loc 1 92 15 view .LVU788
 3196              	.LBB922:
  94:src/int.c     **** 	long long int mask;
 3197              		.loc 1 94 2 view .LVU789
 3198              	.LBB923:
 3199              	.LBI923:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 3200              		.loc 1 43 14 view .LVU790
 3201              	.LBB924:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3202              		.loc 1 44 2 view .LVU791
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3203              		.loc 1 45 2 view .LVU792
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3204              		.loc 1 45 5 is_stmt 0 view .LVU793
 3205 007a 3E2F     		cmp	r7, #62
 3206 007c 14D8     		bhi	.L170
 3207              	.LVL216:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3208              		.loc 1 45 5 view .LVU794
 3209              	.LBE924:
 3210              	.LBE923:
  95:src/int.c     **** 
 3211              		.loc 1 95 2 is_stmt 1 view .LVU795
  97:src/int.c     **** 		return v;
 3212              		.loc 1 97 2 view .LVU796
  99:src/int.c     **** 	return v & mask;
 3213              		.loc 1 99 2 view .LVU797
 100:src/int.c     **** #else
 3214              		.loc 1 100 2 view .LVU798
  99:src/int.c     **** 	return v & mask;
 3215              		.loc 1 99 14 is_stmt 0 view .LVU799
ARM GAS  /tmp/ccjGZi8K.s 			page 95


 3216 007e 0123     		movs	r3, #1
 3217 0080 A6F12002 		sub	r2, r6, #32
 3218 0084 C6F12001 		rsb	r1, r6, #32
 3219 0088 03FA02F2 		lsl	r2, r3, r2
 3220 008c 23FA01F1 		lsr	r1, r3, r1
 3221 0090 03FA06F6 		lsl	r6, r3, r6
 3222              	.LVL217:
  99:src/int.c     **** 	return v & mask;
 3223              		.loc 1 99 7 view .LVU800
 3224 0094 16F1FF36 		adds	r6, r6, #-1
  99:src/int.c     **** 	return v & mask;
 3225              		.loc 1 99 14 view .LVU801
 3226 0098 42EA0102 		orr	r2, r2, r1
  99:src/int.c     **** 	return v & mask;
 3227              		.loc 1 99 7 view .LVU802
 3228 009c 42F1FF32 		adc	r2, r2, #-1
 100:src/int.c     **** #else
 3229              		.loc 1 100 11 view .LVU803
 3230 00a0 2A40     		ands	r2, r2, r5
 3231 00a2 2640     		ands	r6, r6, r4
 3232 00a4 3446     		mov	r4, r6
 3233              	.LVL218:
 100:src/int.c     **** #else
 3234              		.loc 1 100 11 view .LVU804
 3235 00a6 1546     		mov	r5, r2
 3236              	.LVL219:
 3237              	.L170:
 100:src/int.c     **** #else
 3238              		.loc 1 100 11 view .LVU805
 3239              	.LBE922:
 3240              	.LBE921:
 143:src/int.c     **** 
 3241              		.loc 1 143 1 view .LVU806
 3242 00a8 2046     		mov	r0, r4
 3243 00aa 2946     		mov	r1, r5
 3244 00ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3245              	.LVL220:
 3246              	.L185:
 133:src/int.c     **** 		if (mode == MODE_2COMP)
 3247              		.loc 1 133 3 is_stmt 1 view .LVU807
 133:src/int.c     **** 		if (mode == MODE_2COMP)
 3248              		.loc 1 133 9 is_stmt 0 view .LVU808
 3249 00b0 4FF0010C 		mov	ip, #1
 3250 00b4 C2F800C0 		str	ip, [r2]
 3251              	.LVL221:
 134:src/int.c     **** 			v = -v;
 3252              		.loc 1 134 3 is_stmt 1 view .LVU809
 134:src/int.c     **** 			v = -v;
 3253              		.loc 1 134 6 is_stmt 0 view .LVU810
 3254 00b8 90B1     		cbz	r0, .L186
 136:src/int.c     **** 			v = ~v;
 3255              		.loc 1 136 8 is_stmt 1 view .LVU811
 136:src/int.c     **** 			v = ~v;
 3256              		.loc 1 136 11 is_stmt 0 view .LVU812
 3257 00ba 0128     		cmp	r0, #1
 3258 00bc 14D0     		beq	.L187
 139:src/int.c     **** 	} else
ARM GAS  /tmp/ccjGZi8K.s 			page 96


 3259              		.loc 1 139 4 is_stmt 1 view .LVU813
 139:src/int.c     **** 	} else
 3260              		.loc 1 139 6 is_stmt 0 view .LVU814
 3261 00be 6140     		eors	r1, r1, r4
 3262 00c0 6B40     		eors	r3, r3, r5
 3263 00c2 0C46     		mov	r4, r1
 3264              	.LVL222:
 139:src/int.c     **** 	} else
 3265              		.loc 1 139 6 view .LVU815
 3266 00c4 1D46     		mov	r5, r3
 3267              	.LVL223:
 139:src/int.c     **** 	} else
 3268              		.loc 1 139 6 view .LVU816
 3269 00c6 D8E7     		b	.L176
 3270              	.LVL224:
 3271              	.L171:
 123:src/int.c     **** 
 3272              		.loc 1 123 2 is_stmt 1 view .LVU817
 125:src/int.c     **** 		*sign = 0;
 3273              		.loc 1 125 2 view .LVU818
 125:src/int.c     **** 		*sign = 0;
 3274              		.loc 1 125 5 is_stmt 0 view .LVU819
 3275 00c8 0228     		cmp	r0, #2
 3276 00ca 03D0     		beq	.L179
 3277 00cc 0021     		movs	r1, #0
 3278 00ce 4FF00043 		mov	r3, #-2147483648
 3279              	.LVL225:
 125:src/int.c     **** 		*sign = 0;
 3280              		.loc 1 125 5 view .LVU820
 3281 00d2 C9E7     		b	.L180
 3282              	.L179:
 126:src/int.c     **** 		return v;
 3283              		.loc 1 126 3 is_stmt 1 view .LVU821
 126:src/int.c     **** 		return v;
 3284              		.loc 1 126 9 is_stmt 0 view .LVU822
 3285 00d4 0023     		movs	r3, #0
 3286 00d6 1360     		str	r3, [r2]
 3287              	.LVL226:
 127:src/int.c     **** 	}
 3288              		.loc 1 127 3 is_stmt 1 view .LVU823
 143:src/int.c     **** 
 3289              		.loc 1 143 1 is_stmt 0 view .LVU824
 3290 00d8 2046     		mov	r0, r4
 3291 00da 2946     		mov	r1, r5
 3292 00dc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3293              	.LVL227:
 3294              	.L186:
 135:src/int.c     **** 		else if (mode == MODE_1COMP)
 3295              		.loc 1 135 4 is_stmt 1 view .LVU825
 135:src/int.c     **** 		else if (mode == MODE_1COMP)
 3296              		.loc 1 135 6 is_stmt 0 view .LVU826
 3297 00e0 6442     		rsbs	r4, r4, #0
 3298              	.LVL228:
 135:src/int.c     **** 		else if (mode == MODE_1COMP)
 3299              		.loc 1 135 6 view .LVU827
 3300 00e2 65EB4505 		sbc	r5, r5, r5, lsl #1
 3301              	.LVL229:
ARM GAS  /tmp/ccjGZi8K.s 			page 97


 135:src/int.c     **** 		else if (mode == MODE_1COMP)
 3302              		.loc 1 135 6 view .LVU828
 3303 00e6 C8E7     		b	.L176
 3304              	.L187:
 137:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3305              		.loc 1 137 4 is_stmt 1 view .LVU829
 137:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3306              		.loc 1 137 6 is_stmt 0 view .LVU830
 3307 00e8 E243     		mvns	r2, r4
 3308              	.LVL230:
 137:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3309              		.loc 1 137 6 view .LVU831
 3310 00ea EB43     		mvns	r3, r5
 3311 00ec 1446     		mov	r4, r2
 3312              	.LVL231:
 137:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3313              		.loc 1 137 6 view .LVU832
 3314 00ee 1D46     		mov	r5, r3
 3315              	.LVL232:
 137:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3316              		.loc 1 137 6 view .LVU833
 3317 00f0 C3E7     		b	.L176
 3318              	.L189:
 3319 00f2 00BF     		.align	2
 3320              	.L188:
 3321 00f4 00000000 		.word	main_ram
 3322              		.cfi_endproc
 3323              	.LFE12:
 3325              		.section	.text.divmod,"ax",%progbits
 3326              		.align	1
 3327              		.p2align 2,,3
 3328              		.syntax unified
 3329              		.thumb
 3330              		.thumb_func
 3331              		.fpu fpv4-sp-d16
 3333              	divmod:
 3334              	.LVL233:
 3335              	.LFB37:
 768:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3336              		.loc 1 768 69 is_stmt 1 view -0
 3337              		.cfi_startproc
 3338              		@ args = 20, pretend = 0, frame = 120
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 769:src/int.c     **** 	const unsigned int ws = word_size();
 3340              		.loc 1 769 2 view .LVU835
 3341              	.LBB965:
 3342              	.LBI965:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 3343              		.loc 1 39 23 view .LVU836
 3344              	.LBB966:
  40:src/int.c     **** }
 3345              		.loc 1 40 2 view .LVU837
 3346              	.LBE966:
 3347              	.LBE965:
 768:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3348              		.loc 1 768 69 is_stmt 0 view .LVU838
 3349 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/ccjGZi8K.s 			page 98


 3350              		.cfi_def_cfa_offset 36
 3351              		.cfi_offset 4, -36
 3352              		.cfi_offset 5, -32
 3353              		.cfi_offset 6, -28
 3354              		.cfi_offset 7, -24
 3355              		.cfi_offset 8, -20
 3356              		.cfi_offset 9, -16
 3357              		.cfi_offset 10, -12
 3358              		.cfi_offset 11, -8
 3359              		.cfi_offset 14, -4
 3360              	.LBB970:
 3361              	.LBB967:
  40:src/int.c     **** }
 3362              		.loc 1 40 33 view .LVU839
 3363 0004 D34C     		ldr	r4, .L277
 3364 0006 2468     		ldr	r4, [r4]
 3365              	.LBE967:
 3366              	.LBE970:
 3367              	.LBB971:
 3368              	.LBB972:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3369              		.loc 1 44 26 view .LVU840
 3370 0008 94F8E9E7 		ldrb	lr, [r4, #2025]	@ zero_extendqisi2
 3371              	.LBE972:
 3372              	.LBE971:
 3373              	.LBB976:
 3374              	.LBB968:
  40:src/int.c     **** }
 3375              		.loc 1 40 39 view .LVU841
 3376 000c 94F8E897 		ldrb	r9, [r4, #2024]	@ zero_extendqisi2
 3377              	.LBE968:
 3378              	.LBE976:
 3379              	.LBB977:
 3380              	.LBB973:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3381              		.loc 1 44 15 view .LVU842
 3382 0010 0EF03F0E 		and	lr, lr, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3383              		.loc 1 45 26 view .LVU843
 3384 0014 0EF1FF3B 		add	fp, lr, #-1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3385              		.loc 1 45 5 view .LVU844
 3386 0018 BBF13E0F 		cmp	fp, #62
 3387              	.LBE973:
 3388              	.LBE977:
 768:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3389              		.loc 1 768 69 view .LVU845
 3390 001c 9FB0     		sub	sp, sp, #124
 3391              		.cfi_def_cfa_offset 160
 3392              	.LBB978:
 3393              	.LBB969:
  40:src/int.c     **** }
 3394              		.loc 1 40 9 view .LVU846
 3395 001e C9F38109 		ubfx	r9, r9, #2, #2
 3396              	.LVL234:
  40:src/int.c     **** }
 3397              		.loc 1 40 9 view .LVU847
ARM GAS  /tmp/ccjGZi8K.s 			page 99


 3398              	.LBE969:
 3399              	.LBE978:
 770:src/int.c     **** 	const long long int tbm = topbit_mask();
 3400              		.loc 1 770 2 is_stmt 1 view .LVU848
 3401              	.LBB979:
 3402              	.LBI971:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 3403              		.loc 1 43 14 view .LVU849
 3404              	.LBB974:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3405              		.loc 1 44 2 view .LVU850
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3406              		.loc 1 45 2 view .LVU851
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3407              		.loc 1 45 5 is_stmt 0 view .LVU852
 3408 0022 00F2F281 		bhi	.L242
 3409 0026 4FF00108 		mov	r8, #1
 3410 002a AEF1210C 		sub	ip, lr, #33
 3411 002e CBF12004 		rsb	r4, fp, #32
 3412              	.LVL235:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3413              		.loc 1 45 5 view .LVU853
 3414 0032 08FA0CFC 		lsl	ip, r8, ip
 3415 0036 28FA04F4 		lsr	r4, r8, r4
 3416 003a 4CEA040C 		orr	ip, ip, r4
 3417 003e 08FA0BF8 		lsl	r8, r8, fp
 3418 0042 F246     		mov	r10, lr
 3419              	.L191:
 3420              	.LVL236:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3421              		.loc 1 45 5 view .LVU854
 3422              	.LBE974:
 3423              	.LBE979:
 771:src/int.c     **** 	unsigned long long int d, h, l;
 3424              		.loc 1 771 2 is_stmt 1 view .LVU855
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 3425              		.loc 1 111 2 view .LVU856
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3426              		.loc 1 44 2 view .LVU857
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 3427              		.loc 1 45 2 view .LVU858
 112:src/int.c     **** 	return bit;
 3428              		.loc 1 112 2 view .LVU859
 113:src/int.c     **** }
 3429              		.loc 1 113 2 view .LVU860
 772:src/int.c     **** 	unsigned short denom[4];
 3430              		.loc 1 772 2 view .LVU861
 773:src/int.c     **** 	unsigned short numer[8];
 3431              		.loc 1 773 2 view .LVU862
 774:src/int.c     **** 	unsigned short quot[5];
 3432              		.loc 1 774 2 view .LVU863
 775:src/int.c     **** 	unsigned short rmdr[4];
 3433              		.loc 1 775 2 view .LVU864
 776:src/int.c     **** 	int num_denom;
 3434              		.loc 1 776 2 view .LVU865
 777:src/int.c     **** 	int num_numer;
 3435              		.loc 1 777 2 view .LVU866
ARM GAS  /tmp/ccjGZi8K.s 			page 100


 778:src/int.c     **** 
 3436              		.loc 1 778 2 view .LVU867
 780:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 3437              		.loc 1 780 2 view .LVU868
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 3438              		.loc 1 782 5 is_stmt 0 view .LVU869
 3439 0044 B9F1020F 		cmp	r9, #2
 780:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 3440              		.loc 1 780 4 view .LVU870
 3441 0048 0446     		mov	r4, r0
 781:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 3442              		.loc 1 781 4 view .LVU871
 3443 004a 1646     		mov	r6, r2
 780:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 3444              		.loc 1 780 4 view .LVU872
 3445 004c 0D46     		mov	r5, r1
 3446              	.LVL237:
 781:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 3447              		.loc 1 781 2 is_stmt 1 view .LVU873
 781:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 3448              		.loc 1 781 4 is_stmt 0 view .LVU874
 3449 004e 1F46     		mov	r7, r3
 3450              	.LVL238:
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 3451              		.loc 1 782 2 is_stmt 1 view .LVU875
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 3452              		.loc 1 782 5 is_stmt 0 view .LVU876
 3453 0050 06D0     		beq	.L192
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 3454              		.loc 1 782 34 discriminator 1 view .LVU877
 3455 0052 08EA0202 		and	r2, r8, r2
 3456              	.LVL239:
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 3457              		.loc 1 782 34 discriminator 1 view .LVU878
 3458 0056 0CEA0303 		and	r3, ip, r3
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 3459              		.loc 1 782 28 discriminator 1 view .LVU879
 3460 005a 1343     		orrs	r3, r2, r3
 3461 005c 40F07C81 		bne	.L267
 3462              	.L192:
 797:src/int.c     **** 	d = extract_value(x, sx);		// Demonimator
 3463              		.loc 1 797 3 is_stmt 1 view .LVU880
 797:src/int.c     **** 	d = extract_value(x, sx);		// Demonimator
 3464              		.loc 1 797 7 is_stmt 0 view .LVU881
 3465 0060 2B9A     		ldr	r2, [sp, #172]
 3466 0062 0023     		movs	r3, #0
 3467 0064 1360     		str	r3, [r2]
 3468              	.LVL240:
 3469              	.L200:
 798:src/int.c     **** 	if (d == 0) {
 3470              		.loc 1 798 2 is_stmt 1 view .LVU882
 798:src/int.c     **** 	if (d == 0) {
 3471              		.loc 1 798 6 is_stmt 0 view .LVU883
 3472 0066 DDE92801 		ldrd	r0, [sp, #160]
 3473 006a 2A9A     		ldr	r2, [sp, #168]
 3474 006c FFF7FEFF 		bl	extract_value
 3475              	.LVL241:
ARM GAS  /tmp/ccjGZi8K.s 			page 101


 3476 0070 8046     		mov	r8, r0
 3477 0072 8946     		mov	r9, r1
 3478              	.LVL242:
 799:src/int.c     **** 		err_div0(h|l, *sx, *sy);
 3479              		.loc 1 799 2 is_stmt 1 view .LVU884
 799:src/int.c     **** 		err_div0(h|l, *sx, *sy);
 3480              		.loc 1 799 5 is_stmt 0 view .LVU885
 3481 0074 58EA0903 		orrs	r3, r8, r9
 3482 0078 00F0B281 		beq	.L268
 804:src/int.c     **** 		l |= h << ws;
 3483              		.loc 1 804 2 is_stmt 1 view .LVU886
 804:src/int.c     **** 		l |= h << ws;
 3484              		.loc 1 804 5 is_stmt 0 view .LVU887
 3485 007c BAF1400F 		cmp	r10, #64
 3486 0080 24D0     		beq	.L205
 805:src/int.c     **** 		h >>= (64 - ws);
 3487              		.loc 1 805 3 is_stmt 1 view .LVU888
 805:src/int.c     **** 		h >>= (64 - ws);
 3488              		.loc 1 805 10 is_stmt 0 view .LVU889
 3489 0082 AAF12002 		sub	r2, r10, #32
 3490 0086 06FA02F2 		lsl	r2, r6, r2
 3491 008a 07FA0AF3 		lsl	r3, r7, r10
 3492 008e CAF12001 		rsb	r1, r10, #32
 3493 0092 26FA01F1 		lsr	r1, r6, r1
 3494 0096 1343     		orrs	r3, r3, r2
 806:src/int.c     **** 	}
 3495              		.loc 1 806 5 view .LVU890
 3496 0098 AAF12000 		sub	r0, r10, #32
 806:src/int.c     **** 	}
 3497              		.loc 1 806 13 view .LVU891
 3498 009c CAF14002 		rsb	r2, r10, #64
 805:src/int.c     **** 		h >>= (64 - ws);
 3499              		.loc 1 805 10 view .LVU892
 3500 00a0 06FA0AFC 		lsl	ip, r6, r10
 3501 00a4 0B43     		orrs	r3, r3, r1
 806:src/int.c     **** 	}
 3502              		.loc 1 806 5 view .LVU893
 3503 00a6 07FA00F0 		lsl	r0, r7, r0
 3504 00aa 26FA02F1 		lsr	r1, r6, r2
 3505 00ae CAF1200A 		rsb	r10, r10, #32
 3506              	.LVL243:
 806:src/int.c     **** 	}
 3507              		.loc 1 806 5 view .LVU894
 3508 00b2 27FA0AFA 		lsr	r10, r7, r10
 805:src/int.c     **** 		h >>= (64 - ws);
 3509              		.loc 1 805 5 view .LVU895
 3510 00b6 2B43     		orrs	r3, r3, r5
 3511 00b8 4CEA040C 		orr	ip, ip, r4
 806:src/int.c     **** 	}
 3512              		.loc 1 806 5 view .LVU896
 3513 00bc 27FA02F2 		lsr	r2, r7, r2
 3514 00c0 0143     		orrs	r1, r1, r0
 805:src/int.c     **** 		h >>= (64 - ws);
 3515              		.loc 1 805 5 view .LVU897
 3516 00c2 6446     		mov	r4, ip
 3517              	.LVL244:
 806:src/int.c     **** 	}
ARM GAS  /tmp/ccjGZi8K.s 			page 102


 3518              		.loc 1 806 5 view .LVU898
 3519 00c4 41EA0A06 		orr	r6, r1, r10
 3520              	.LVL245:
 805:src/int.c     **** 		h >>= (64 - ws);
 3521              		.loc 1 805 5 view .LVU899
 3522 00c8 1D46     		mov	r5, r3
 3523              	.LVL246:
 806:src/int.c     **** 	}
 3524              		.loc 1 806 3 is_stmt 1 view .LVU900
 806:src/int.c     **** 	}
 3525              		.loc 1 806 5 is_stmt 0 view .LVU901
 3526 00ca 1746     		mov	r7, r2
 3527              	.LVL247:
 3528              	.L205:
 809:src/int.c     **** 		*rem = 0;
 3529              		.loc 1 809 2 is_stmt 1 view .LVU902
 3530 00cc 46EA0402 		orr	r2, r6, r4
 3531 00d0 47EA0503 		orr	r3, r7, r5
 809:src/int.c     **** 		*rem = 0;
 3532              		.loc 1 809 5 is_stmt 0 view .LVU903
 3533 00d4 52EA0301 		orrs	r1, r2, r3
 3534 00d8 09D1     		bne	.L206
 810:src/int.c     **** 		return 0;
 3535              		.loc 1 810 3 is_stmt 1 view .LVU904
 810:src/int.c     **** 		return 0;
 3536              		.loc 1 810 8 is_stmt 0 view .LVU905
 3537 00da 2C99     		ldr	r1, [sp, #176]
 811:src/int.c     **** 	}
 3538              		.loc 1 811 10 view .LVU906
 3539 00dc 9046     		mov	r8, r2
 3540              	.LVL248:
 811:src/int.c     **** 	}
 3541              		.loc 1 811 10 view .LVU907
 3542 00de 9946     		mov	r9, r3
 810:src/int.c     **** 		return 0;
 3543              		.loc 1 810 8 view .LVU908
 3544 00e0 C1E90023 		strd	r2, [r1]
 811:src/int.c     **** 	}
 3545              		.loc 1 811 3 is_stmt 1 view .LVU909
 828:src/int.c     **** #endif
 3546              		.loc 1 828 1 is_stmt 0 view .LVU910
 3547 00e4 4046     		mov	r0, r8
 3548 00e6 4946     		mov	r1, r9
 3549 00e8 1FB0     		add	sp, sp, #124
 3550              		.cfi_remember_state
 3551              		.cfi_def_cfa_offset 36
 3552              		@ sp needed
 3553 00ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3554              	.LVL249:
 3555              	.L206:
 3556              		.cfi_restore_state
 814:src/int.c     **** 	xset(rmdr, 0, sizeof(rmdr));
 3557              		.loc 1 814 2 is_stmt 1 view .LVU911
 3558 00ee 0A22     		movs	r2, #10
 3559 00f0 0021     		movs	r1, #0
 3560 00f2 0AA8     		add	r0, sp, #40
 3561 00f4 FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccjGZi8K.s 			page 103


 3562              	.LVL250:
 815:src/int.c     **** 
 3563              		.loc 1 815 2 view .LVU912
 3564 00f8 0822     		movs	r2, #8
 3565 00fa 0021     		movs	r1, #0
 3566 00fc 08A8     		add	r0, sp, #32
 3567 00fe FFF7FEFF 		bl	xset
 3568              	.LVL251:
 817:src/int.c     **** 	breakup(l, numer);
 3569              		.loc 1 817 2 view .LVU913
 3570              	.LBB980:
 3571              	.LBI980:
 564:src/int.c     **** 	xv[0] = x & 0xffff;
 3572              		.loc 1 564 13 view .LVU914
 3573              	.LBB981:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3574              		.loc 1 565 2 view .LVU915
 3575              	.LBE981:
 3576              	.LBE980:
 3577              	.LBB988:
 3578              	.LBB989:
 568:src/int.c     **** }
 3579              		.loc 1 568 8 is_stmt 0 view .LVU916
 3580 0102 3B0C     		lsrs	r3, r7, #16
 3581              	.LBE989:
 3582              	.LBE988:
 3583              	.LBB992:
 3584              	.LBB982:
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3585              		.loc 1 567 8 view .LVU917
 3586 0104 1FFA89F1 		uxth	r1, r9
 568:src/int.c     **** }
 3587              		.loc 1 568 8 view .LVU918
 3588 0108 4FEA1942 		lsr	r2, r9, #16
 3589              	.LBE982:
 3590              	.LBE992:
 3591              	.LBB993:
 3592              	.LBB994:
 568:src/int.c     **** }
 3593              		.loc 1 568 20 view .LVU919
 3594 010c 280C     		lsrs	r0, r5, #16
 3595              	.LBE994:
 3596              	.LBE993:
 3597              	.LBB1000:
 3598              	.LBB983:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3599              		.loc 1 565 8 view .LVU920
 3600 010e CDF81880 		str	r8, [sp, #24]
 3601              	.LBE983:
 3602              	.LBE1000:
 3603              	.LBB1001:
 3604              	.LBB995:
 3605 0112 0D94     		str	r4, [sp, #52]
 3606              	.LBE995:
 3607              	.LBE1001:
 3608              	.LBB1002:
 3609              	.LBB984:
ARM GAS  /tmp/ccjGZi8K.s 			page 104


 3610 0114 1FFA88FE 		uxth	lr, r8
 3611              	.LBE984:
 3612              	.LBE1002:
 3613              	.LBB1003:
 3614              	.LBB996:
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3615              		.loc 1 567 8 view .LVU921
 3616 0118 ADF83850 		strh	r5, [sp, #56]	@ movhi
 3617              	.LBE996:
 3618              	.LBE1003:
 3619              	.LBB1004:
 3620              	.LBB990:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3621              		.loc 1 565 8 view .LVU922
 3622 011c 0F96     		str	r6, [sp, #60]
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3623              		.loc 1 567 8 view .LVU923
 3624 011e ADF84070 		strh	r7, [sp, #64]	@ movhi
 568:src/int.c     **** }
 3625              		.loc 1 568 8 view .LVU924
 3626 0122 ADF84230 		strh	r3, [sp, #66]	@ movhi
 3627              	.LBE990:
 3628              	.LBE1004:
 3629              	.LBB1005:
 3630              	.LBB985:
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3631              		.loc 1 567 8 view .LVU925
 3632 0126 ADF81C10 		strh	r1, [sp, #28]	@ movhi
 568:src/int.c     **** }
 3633              		.loc 1 568 8 view .LVU926
 3634 012a ADF81E20 		strh	r2, [sp, #30]	@ movhi
 3635              	.LBE985:
 3636              	.LBE1005:
 3637              	.LBB1006:
 3638              	.LBB997:
 3639 012e ADF83A00 		strh	r0, [sp, #58]	@ movhi
 3640              	.LBE997:
 3641              	.LBE1006:
 3642              	.LBB1007:
 3643              	.LBB986:
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3644              		.loc 1 566 2 is_stmt 1 view .LVU927
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3645              		.loc 1 567 2 view .LVU928
 568:src/int.c     **** }
 3646              		.loc 1 568 2 view .LVU929
 3647              	.LVL252:
 568:src/int.c     **** }
 3648              		.loc 1 568 2 is_stmt 0 view .LVU930
 3649              	.LBE986:
 3650              	.LBE1007:
 818:src/int.c     **** 	breakup(h, numer+4);
 3651              		.loc 1 818 2 is_stmt 1 view .LVU931
 3652              	.LBB1008:
 3653              	.LBI993:
 564:src/int.c     **** 	xv[0] = x & 0xffff;
 3654              		.loc 1 564 13 view .LVU932
ARM GAS  /tmp/ccjGZi8K.s 			page 105


 3655              	.LBB998:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3656              		.loc 1 565 2 view .LVU933
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3657              		.loc 1 566 2 view .LVU934
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3658              		.loc 1 567 2 view .LVU935
 568:src/int.c     **** }
 3659              		.loc 1 568 2 view .LVU936
 568:src/int.c     **** }
 3660              		.loc 1 568 2 is_stmt 0 view .LVU937
 3661              	.LBE998:
 3662              	.LBE1008:
 819:src/int.c     **** 
 3663              		.loc 1 819 2 is_stmt 1 view .LVU938
 3664              	.LBB1009:
 3665              	.LBI988:
 564:src/int.c     **** 	xv[0] = x & 0xffff;
 3666              		.loc 1 564 13 view .LVU939
 3667              	.LBB991:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3668              		.loc 1 565 2 view .LVU940
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3669              		.loc 1 566 2 view .LVU941
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3670              		.loc 1 567 2 view .LVU942
 568:src/int.c     **** }
 3671              		.loc 1 568 2 view .LVU943
 568:src/int.c     **** }
 3672              		.loc 1 568 2 is_stmt 0 view .LVU944
 3673              	.LBE991:
 3674              	.LBE1009:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3675              		.loc 1 821 2 is_stmt 1 view .LVU945
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3676              		.loc 1 821 22 view .LVU946
 3677              	.LBB1010:
 3678              	.LBB999:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3679              		.loc 1 565 8 is_stmt 0 view .LVU947
 3680 0132 A4B2     		uxth	r4, r4
 3681              	.LVL253:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3682              		.loc 1 565 8 view .LVU948
 3683              	.LBE999:
 3684              	.LBE1010:
 3685              	.LBB1011:
 3686              	.LBB987:
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3687              		.loc 1 566 8 view .LVU949
 3688 0134 4FEA1848 		lsr	r8, r8, #16
 3689              	.LVL254:
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3690              		.loc 1 566 8 view .LVU950
 3691              	.LBE987:
 3692              	.LBE1011:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
ARM GAS  /tmp/ccjGZi8K.s 			page 106


 3693              		.loc 1 821 36 view .LVU951
 3694 0138 002A     		cmp	r2, #0
 3695 013a 40F0C981 		bne	.L243
 3696              	.LVL255:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3697              		.loc 1 821 22 is_stmt 1 view .LVU952
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3698              		.loc 1 821 36 is_stmt 0 view .LVU953
 3699 013e 0029     		cmp	r1, #0
 3700 0140 40F0D781 		bne	.L244
 3701              	.LVL256:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3702              		.loc 1 821 22 is_stmt 1 view .LVU954
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3703              		.loc 1 821 54 is_stmt 0 view .LVU955
 3704 0144 B8F1000F 		cmp	r8, #0
 3705 0148 14BF     		ite	ne
 3706 014a 0221     		movne	r1, #2
 3707 014c 0121     		moveq	r1, #1
 3708              	.LVL257:
 3709              	.L207:
 822:src/int.c     **** 
 3710              		.loc 1 822 22 is_stmt 1 discriminator 1 view .LVU956
 3711 014e 10AA     		add	r2, sp, #64
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3712              		.loc 1 821 54 is_stmt 0 discriminator 1 view .LVU957
 3713 0150 0825     		movs	r5, #8
 3714 0152 02E0     		b	.L208
 3715              	.LVL258:
 3716              	.L209:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3717              		.loc 1 821 54 discriminator 1 view .LVU958
 3718 0154 32F80239 		ldrh	r3, [r2], #-2
 822:src/int.c     **** 
 3719              		.loc 1 822 2 view .LVU959
 3720 0158 0546     		mov	r5, r0
 3721              	.LVL259:
 3722              	.L208:
 822:src/int.c     **** 
 3723              		.loc 1 822 62 discriminator 3 view .LVU960
 3724 015a 681E     		subs	r0, r5, #1
 3725              	.LVL260:
 822:src/int.c     **** 
 3726              		.loc 1 822 22 is_stmt 1 discriminator 3 view .LVU961
 822:src/int.c     **** 
 3727              		.loc 1 822 44 is_stmt 0 discriminator 3 view .LVU962
 3728 015c 1BB9     		cbnz	r3, .L210
 822:src/int.c     **** 
 3729              		.loc 1 822 2 discriminator 1 view .LVU963
 3730 015e 8842     		cmp	r0, r1
 3731 0160 F8D1     		bne	.L209
 3732 0162 481E     		subs	r0, r1, #1
 3733              	.LVL261:
 822:src/int.c     **** 
 3734              		.loc 1 822 2 view .LVU964
 3735 0164 0D46     		mov	r5, r1
 3736              	.LVL262:
ARM GAS  /tmp/ccjGZi8K.s 			page 107


 3737              	.L210:
 824:src/int.c     **** 
 3738              		.loc 1 824 2 is_stmt 1 view .LVU965
 3739              	.LBB1012:
 3740              	.LBI1012:
 692:src/int.c     **** 		const unsigned short u[], const unsigned short v[],
 3741              		.loc 1 692 13 view .LVU966
 3742              	.LBB1013:
 695:src/int.c     **** 	unsigned qhat;					// Estimated quotient digit.
 3743              		.loc 1 695 2 view .LVU967
 696:src/int.c     **** 	unsigned rhat;					// A remainder.
 3744              		.loc 1 696 2 view .LVU968
 697:src/int.c     **** 	unsigned p;					// Product of two digits.
 3745              		.loc 1 697 2 view .LVU969
 698:src/int.c     **** 	int s, i, j, t, k;
 3746              		.loc 1 698 2 view .LVU970
 699:src/int.c     **** 	unsigned short vn[8];				// Normalised denominator
 3747              		.loc 1 699 2 view .LVU971
 700:src/int.c     **** 	unsigned short un[18];				// Normalised numerator
 3748              		.loc 1 700 2 view .LVU972
 701:src/int.c     **** 
 3749              		.loc 1 701 2 view .LVU973
 703:src/int.c     **** 		k = 0;					// the case of a
 3750              		.loc 1 703 2 view .LVU974
 703:src/int.c     **** 		k = 0;					// the case of a
 3751              		.loc 1 703 5 is_stmt 0 view .LVU975
 3752 0166 0129     		cmp	r1, #1
 3753 0168 00F07281 		beq	.L269
 718:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3754              		.loc 1 718 2 is_stmt 1 view .LVU976
 718:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3755              		.loc 1 718 11 is_stmt 0 view .LVU977
 3756 016c 01F10042 		add	r2, r1, #-2147483648
 3757 0170 013A     		subs	r2, r2, #1
 3758 0172 0DF1180A 		add	r10, sp, #24
 3759              	.LVL263:
 718:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3760              		.loc 1 718 11 view .LVU978
 3761 0176 5600     		lsls	r6, r2, #1
 3762              	.LVL264:
 718:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3763              		.loc 1 718 6 view .LVU979
 3764 0178 3AF81230 		ldrh	r3, [r10, r2, lsl #1]
 3765              	.LVL265:
 3766              	.LBB1014:
 3767              	.LBI1014:
 658:src/int.c     ****    int n;
 3768              		.loc 1 658 12 is_stmt 1 view .LVU980
 3769              	.LBB1015:
 659:src/int.c     **** 
 3770              		.loc 1 659 4 view .LVU981
 661:src/int.c     **** 	   return 16;
 3771              		.loc 1 661 4 view .LVU982
 3772              	.LBE1015:
 3773              	.LBE1014:
 718:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3774              		.loc 1 718 11 is_stmt 0 view .LVU983
ARM GAS  /tmp/ccjGZi8K.s 			page 108


 3775 017c 0AEB4202 		add	r2, r10, r2, lsl #1
 3776              	.LBB1020:
 3777              	.LBB1016:
 661:src/int.c     **** 	   return 16;
 3778              		.loc 1 661 7 view .LVU984
 3779 0180 002B     		cmp	r3, #0
 3780 0182 00F07D81 		beq	.L246
 663:src/int.c     ****    if (x <= 0x00ff) {n = n + 8; x = x << 8;}
 3781              		.loc 1 663 4 is_stmt 1 view .LVU985
 3782              	.LVL266:
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3783              		.loc 1 664 4 view .LVU986
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3784              		.loc 1 664 7 is_stmt 0 view .LVU987
 3785 0186 FF2B     		cmp	r3, #255
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3786              		.loc 1 664 22 is_stmt 1 view .LVU988
 3787              	.LVL267:
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3788              		.loc 1 664 33 view .LVU989
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3789              		.loc 1 664 35 is_stmt 0 view .LVU990
 3790 0188 9DBF     		ittte	ls
 3791 018a 4FEA0328 		lslls	r8, r3, #8
 3792 018e 1FFA88F3 		uxthls	r3, r8
 3793              	.LVL268:
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3794              		.loc 1 664 24 view .LVU991
 3795 0192 4FF00809 		movls	r9, #8
 663:src/int.c     ****    if (x <= 0x00ff) {n = n + 8; x = x << 8;}
 3796              		.loc 1 663 6 view .LVU992
 3797 0196 4FF00009 		movhi	r9, #0
 3798              	.LVL269:
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3799              		.loc 1 665 4 is_stmt 1 view .LVU993
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3800              		.loc 1 665 7 is_stmt 0 view .LVU994
 3801 019a B3F5805F 		cmp	r3, #4096
 3802 019e 05D2     		bcs	.L217
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3803              		.loc 1 665 22 is_stmt 1 view .LVU995
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3804              		.loc 1 665 35 is_stmt 0 view .LVU996
 3805 01a0 4FEA0318 		lsl	r8, r3, #4
 3806 01a4 1FFA88F3 		uxth	r3, r8
 3807              	.LVL270:
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3808              		.loc 1 665 24 view .LVU997
 3809 01a8 09F10409 		add	r9, r9, #4
 3810              	.LVL271:
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3811              		.loc 1 665 33 is_stmt 1 view .LVU998
 3812              	.L217:
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 3813              		.loc 1 666 4 view .LVU999
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 3814              		.loc 1 666 7 is_stmt 0 view .LVU1000
ARM GAS  /tmp/ccjGZi8K.s 			page 109


 3815 01ac B3F5804F 		cmp	r3, #16384
 3816 01b0 C0F03F81 		bcc	.L270
 3817              	.L218:
 667:src/int.c     ****    return n;
 3818              		.loc 1 667 4 is_stmt 1 view .LVU1001
 667:src/int.c     ****    return n;
 3819              		.loc 1 667 7 is_stmt 0 view .LVU1002
 3820 01b4 1F04     		lsls	r7, r3, #16
 667:src/int.c     ****    return n;
 3821              		.loc 1 667 22 is_stmt 1 view .LVU1003
 667:src/int.c     ****    return n;
 3822              		.loc 1 667 24 is_stmt 0 view .LVU1004
 3823 01b6 58BF     		it	pl
 3824 01b8 09F10109 		addpl	r9, r9, #1
 3825              	.LVL272:
 667:src/int.c     ****    return n;
 3826              		.loc 1 667 24 view .LVU1005
 3827 01bc C9F11008 		rsb	r8, r9, #16
 3828              	.LVL273:
 3829              	.L215:
 667:src/int.c     ****    return n;
 3830              		.loc 1 667 24 view .LVU1006
 3831              	.LBE1016:
 3832              	.LBE1020:
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3833              		.loc 1 719 2 is_stmt 1 view .LVU1007
 3834 01c0 11AB     		add	r3, sp, #68
 3835 01c2 03EB060C 		add	ip, r3, r6
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3836              		.loc 1 719 9 is_stmt 0 view .LVU1008
 3837 01c6 4F1E     		subs	r7, r1, #1
 3838              	.LVL274:
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3839              		.loc 1 719 18 is_stmt 1 view .LVU1009
 3840              	.L220:
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3841              		.loc 1 720 3 view .LVU1010
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3842              		.loc 1 720 13 is_stmt 0 view .LVU1011
 3843 01c8 1388     		ldrh	r3, [r2]
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3844              		.loc 1 720 27 view .LVU1012
 3845 01ca 32F802BD 		ldrh	fp, [r2, #-2]!
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3846              		.loc 1 720 17 view .LVU1013
 3847 01ce 03FA09F3 		lsl	r3, r3, r9
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3848              		.loc 1 720 33 view .LVU1014
 3849 01d2 4BFA08FB 		asr	fp, fp, r8
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3850              		.loc 1 720 23 view .LVU1015
 3851 01d6 43EA0B03 		orr	r3, r3, fp
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3852              		.loc 1 719 2 view .LVU1016
 3853 01da 9245     		cmp	r10, r2
 720:src/int.c     **** 	vn[0] = v[0] << s;
 3854              		.loc 1 720 9 view .LVU1017
ARM GAS  /tmp/ccjGZi8K.s 			page 110


 3855 01dc 2CF80239 		strh	r3, [ip], #-2	@ movhi
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3856              		.loc 1 719 25 is_stmt 1 view .LVU1018
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3857              		.loc 1 719 18 view .LVU1019
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3858              		.loc 1 719 2 is_stmt 0 view .LVU1020
 3859 01e0 F2D1     		bne	.L220
 721:src/int.c     **** 
 3860              		.loc 1 721 2 is_stmt 1 view .LVU1021
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3861              		.loc 1 723 11 is_stmt 0 view .LVU1022
 3862 01e2 1EAB     		add	r3, sp, #120
 3863 01e4 03EB4503 		add	r3, r3, r5, lsl #1
 721:src/int.c     **** 
 3864              		.loc 1 721 15 view .LVU1023
 3865 01e8 0EFA09FE 		lsl	lr, lr, r9
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3866              		.loc 1 723 11 view .LVU1024
 3867 01ec 33F8462C 		ldrh	r2, [r3, #-70]
 721:src/int.c     **** 
 3868              		.loc 1 721 8 view .LVU1025
 3869 01f0 1FFA8EF3 		uxth	r3, lr
 3870 01f4 0193     		str	r3, [sp, #4]
 3871 01f6 ADF84430 		strh	r3, [sp, #68]	@ movhi
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3872              		.loc 1 723 2 is_stmt 1 view .LVU1026
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3873              		.loc 1 723 8 is_stmt 0 view .LVU1027
 3874 01fa 1EAB     		add	r3, sp, #120
 3875 01fc 03EB4503 		add	r3, r3, r5, lsl #1
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3876              		.loc 1 723 17 view .LVU1028
 3877 0200 42FA08F2 		asr	r2, r2, r8
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3878              		.loc 1 723 8 view .LVU1029
 3879 0204 23F8242C 		strh	r2, [r3, #-36]	@ movhi
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3880              		.loc 1 724 2 is_stmt 1 view .LVU1030
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3881              		.loc 1 724 18 view .LVU1031
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3882              		.loc 1 724 2 is_stmt 0 view .LVU1032
 3883 0208 A0B1     		cbz	r0, .L225
 3884 020a 0DF1340C 		add	ip, sp, #52
 3885              	.LVL275:
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3886              		.loc 1 724 2 view .LVU1033
 3887 020e 15AB     		add	r3, sp, #84
 3888 0210 0CEB4002 		add	r2, ip, r0, lsl #1
 3889 0214 03EB4000 		add	r0, r3, r0, lsl #1
 3890              	.L224:
 725:src/int.c     **** 	un[0] = u[0] << s;
 3891              		.loc 1 725 3 is_stmt 1 view .LVU1034
 725:src/int.c     **** 	un[0] = u[0] << s;
 3892              		.loc 1 725 13 is_stmt 0 view .LVU1035
 3893 0218 B2F800E0 		ldrh	lr, [r2]
ARM GAS  /tmp/ccjGZi8K.s 			page 111


 725:src/int.c     **** 	un[0] = u[0] << s;
 3894              		.loc 1 725 27 view .LVU1036
 3895 021c 32F8023D 		ldrh	r3, [r2, #-2]!
 725:src/int.c     **** 	un[0] = u[0] << s;
 3896              		.loc 1 725 17 view .LVU1037
 3897 0220 0EFA09FE 		lsl	lr, lr, r9
 725:src/int.c     **** 	un[0] = u[0] << s;
 3898              		.loc 1 725 33 view .LVU1038
 3899 0224 43FA08F3 		asr	r3, r3, r8
 725:src/int.c     **** 	un[0] = u[0] << s;
 3900              		.loc 1 725 23 view .LVU1039
 3901 0228 43EA0E03 		orr	r3, r3, lr
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3902              		.loc 1 724 2 view .LVU1040
 3903 022c 9445     		cmp	ip, r2
 725:src/int.c     **** 	un[0] = u[0] << s;
 3904              		.loc 1 725 9 view .LVU1041
 3905 022e 20F80239 		strh	r3, [r0], #-2	@ movhi
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3906              		.loc 1 724 25 is_stmt 1 view .LVU1042
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3907              		.loc 1 724 18 view .LVU1043
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3908              		.loc 1 724 2 is_stmt 0 view .LVU1044
 3909 0232 F1D1     		bne	.L224
 3910              	.LVL276:
 3911              	.L225:
 726:src/int.c     **** 
 3912              		.loc 1 726 2 is_stmt 1 view .LVU1045
 726:src/int.c     **** 
 3913              		.loc 1 726 15 is_stmt 0 view .LVU1046
 3914 0234 04FA09F4 		lsl	r4, r4, r9
 726:src/int.c     **** 
 3915              		.loc 1 726 8 view .LVU1047
 3916 0238 A4B2     		uxth	r4, r4
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 3917              		.loc 1 728 2 view .LVU1048
 3918 023a 6D1A     		subs	r5, r5, r1
 726:src/int.c     **** 
 3919              		.loc 1 726 8 view .LVU1049
 3920 023c ADF85440 		strh	r4, [sp, #84]	@ movhi
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 3921              		.loc 1 728 2 is_stmt 1 view .LVU1050
 3922              	.LVL277:
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 3923              		.loc 1 728 18 view .LVU1051
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 3924              		.loc 1 728 2 is_stmt 0 view .LVU1052
 3925 0240 00F14D81 		bmi	.L271
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3926              		.loc 1 730 35 view .LVU1053
 3927 0244 1EAB     		add	r3, sp, #120
 3928 0246 03EB4707 		add	r7, r3, r7, lsl #1
 3929 024a C1EBC173 		rsb	r3, r1, r1, lsl #31
 3930 024e 5B00     		lsls	r3, r3, #1
 3931 0250 0233     		adds	r3, r3, #2
 3932 0252 B21C     		adds	r2, r6, #2
ARM GAS  /tmp/ccjGZi8K.s 			page 112


 3933 0254 4C19     		adds	r4, r1, r5
 3934 0256 11A8     		add	r0, sp, #68
 3935 0258 0293     		str	r3, [sp, #8]
 3936 025a 15AB     		add	r3, sp, #84
 3937 025c 0392     		str	r2, [sp, #12]
 733:src/int.c     **** 		qhat = qhat - 1;
 3938              		.loc 1 733 26 view .LVU1054
 3939 025e 0239     		subs	r1, r1, #2
 3940              	.LVL278:
 733:src/int.c     **** 		qhat = qhat - 1;
 3941              		.loc 1 733 26 view .LVU1055
 3942 0260 8218     		adds	r2, r0, r2
 3943 0262 03EB4404 		add	r4, r3, r4, lsl #1
 3944 0266 0AA8     		add	r0, sp, #40
 3945              	.LVL279:
 733:src/int.c     **** 		qhat = qhat - 1;
 3946              		.loc 1 733 26 view .LVU1056
 3947 0268 1EAB     		add	r3, sp, #120
 3948 026a 00EB4500 		add	r0, r0, r5, lsl #1
 3949              	.LVL280:
 733:src/int.c     **** 		qhat = qhat - 1;
 3950              		.loc 1 733 26 view .LVU1057
 3951 026e 03EB4103 		add	r3, r3, r1, lsl #1
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3952              		.loc 1 730 35 view .LVU1058
 3953 0272 37F834AC 		ldrh	r10, [r7, #-52]
 3954              	.LVL281:
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3955              		.loc 1 730 35 view .LVU1059
 3956 0276 CDF81090 		str	r9, [sp, #16]
 3957 027a CDF81480 		str	r8, [sp, #20]
 733:src/int.c     **** 		qhat = qhat - 1;
 3958              		.loc 1 733 26 view .LVU1060
 3959 027e 0093     		str	r3, [sp]
 3960 0280 9146     		mov	r9, r2
 3961              	.LVL282:
 733:src/int.c     **** 		qhat = qhat - 1;
 3962              		.loc 1 733 26 view .LVU1061
 3963 0282 8046     		mov	r8, r0
 3964              	.LVL283:
 3965              	.L235:
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3966              		.loc 1 730 2 is_stmt 1 view .LVU1062
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3967              		.loc 1 730 12 is_stmt 0 view .LVU1063
 3968 0284 2288     		ldrh	r2, [r4]
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3969              		.loc 1 730 24 view .LVU1064
 3970 0286 34F8023D 		ldrh	r3, [r4, #-2]!
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3971              		.loc 1 730 20 view .LVU1065
 3972 028a 03EB0243 		add	r3, r3, r2, lsl #16
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3973              		.loc 1 730 7 view .LVU1066
 3974 028e B3FBFAF1 		udiv	r1, r3, r10
 3975              	.LVL284:
 731:src/int.c     **** 	again:
ARM GAS  /tmp/ccjGZi8K.s 			page 113


 3976              		.loc 1 731 2 is_stmt 1 view .LVU1067
 3977 0292 0AFB1133 		mls	r3, r10, r1, r3
 3978              	.LVL285:
 731:src/int.c     **** 	again:
 3979              		.loc 1 731 2 is_stmt 0 view .LVU1068
 3980 0296 05E0     		b	.L226
 3981              	.L227:
 735:src/int.c     **** 		if (rhat < b) goto again;
 3982              		.loc 1 735 8 view .LVU1069
 3983 0298 5344     		add	r3, r3, r10
 3984              	.LVL286:
 736:src/int.c     **** 	}
 3985              		.loc 1 736 6 view .LVU1070
 3986 029a B3F5803F 		cmp	r3, #65536
 734:src/int.c     **** 		rhat = rhat + vn[n-1];
 3987              		.loc 1 734 8 view .LVU1071
 3988 029e 01F1FF31 		add	r1, r1, #-1
 3989              	.LVL287:
 735:src/int.c     **** 		if (rhat < b) goto again;
 3990              		.loc 1 735 3 is_stmt 1 view .LVU1072
 736:src/int.c     **** 	}
 3991              		.loc 1 736 3 view .LVU1073
 736:src/int.c     **** 	}
 3992              		.loc 1 736 6 is_stmt 0 view .LVU1074
 3993 02a2 0DD2     		bcs	.L228
 3994              	.L226:
 733:src/int.c     **** 		qhat = qhat - 1;
 3995              		.loc 1 733 2 is_stmt 1 view .LVU1075
 734:src/int.c     **** 		rhat = rhat + vn[n-1];
 3996              		.loc 1 734 3 view .LVU1076
 733:src/int.c     **** 		qhat = qhat - 1;
 3997              		.loc 1 733 5 is_stmt 0 view .LVU1077
 3998 02a4 B1F5803F 		cmp	r1, #65536
 3999 02a8 F6D2     		bcs	.L227
 733:src/int.c     **** 		qhat = qhat - 1;
 4000              		.loc 1 733 26 view .LVU1078
 4001 02aa 009A     		ldr	r2, [sp]
 4002 02ac 32F8340C 		ldrh	r0, [r2, #-52]
 733:src/int.c     **** 		qhat = qhat - 1;
 4003              		.loc 1 733 45 view .LVU1079
 4004 02b0 34F8022C 		ldrh	r2, [r4, #-2]
 733:src/int.c     **** 		qhat = qhat - 1;
 4005              		.loc 1 733 23 view .LVU1080
 4006 02b4 01FB00F0 		mul	r0, r1, r0
 733:src/int.c     **** 		qhat = qhat - 1;
 4007              		.loc 1 733 41 view .LVU1081
 4008 02b8 02EB0342 		add	r2, r2, r3, lsl #16
 733:src/int.c     **** 		qhat = qhat - 1;
 4009              		.loc 1 733 16 view .LVU1082
 4010 02bc 9042     		cmp	r0, r2
 4011 02be EBD8     		bhi	.L227
 4012              	.L228:
 740:src/int.c     **** 	for (i = 0; i < n; i++) {
 4013              		.loc 1 740 2 is_stmt 1 view .LVU1083
 4014              	.LVL288:
 741:src/int.c     **** 		p = qhat*vn[i];
 4015              		.loc 1 741 2 view .LVU1084
ARM GAS  /tmp/ccjGZi8K.s 			page 114


 741:src/int.c     **** 		p = qhat*vn[i];
 4016              		.loc 1 741 14 view .LVU1085
 4017 02c0 029B     		ldr	r3, [sp, #8]
 4018              	.LVL289:
 4019              	.LBB1021:
 4020              	.LBB1017:
 662:src/int.c     ****    n = 0;
 4021              		.loc 1 662 12 is_stmt 0 view .LVU1086
 4022 02c2 0198     		ldr	r0, [sp, #4]
 4023 02c4 1E19     		adds	r6, r3, r4
 4024 02c6 0DF1460E 		add	lr, sp, #70
 4025 02ca B446     		mov	ip, r6
 4026 02cc 7746     		mov	r7, lr
 4027              	.LBE1017:
 4028              	.LBE1021:
 740:src/int.c     **** 	for (i = 0; i < n; i++) {
 4029              		.loc 1 740 4 view .LVU1087
 4030 02ce 0023     		movs	r3, #0
 4031 02d0 01E0     		b	.L230
 4032              	.LVL290:
 4033              	.L272:
 740:src/int.c     **** 	for (i = 0; i < n; i++) {
 4034              		.loc 1 740 4 view .LVU1088
 4035 02d2 37F8020B 		ldrh	r0, [r7], #2
 4036              	.LVL291:
 4037              	.L230:
 742:src/int.c     **** 		t = un[i+j] - k - (p & 0xFFFF);
 4038              		.loc 1 742 3 is_stmt 1 view .LVU1089
 743:src/int.c     **** 		un[i+j] = t;
 4039              		.loc 1 743 9 is_stmt 0 view .LVU1090
 4040 02d6 BCF80020 		ldrh	r2, [ip]
 742:src/int.c     **** 		t = un[i+j] - k - (p & 0xFFFF);
 4041              		.loc 1 742 5 view .LVU1091
 4042 02da 01FB00F0 		mul	r0, r1, r0
 4043              	.LVL292:
 743:src/int.c     **** 		un[i+j] = t;
 4044              		.loc 1 743 3 is_stmt 1 view .LVU1092
 743:src/int.c     **** 		un[i+j] = t;
 4045              		.loc 1 743 15 is_stmt 0 view .LVU1093
 4046 02de D21A     		subs	r2, r2, r3
 743:src/int.c     **** 		un[i+j] = t;
 4047              		.loc 1 743 24 view .LVU1094
 4048 02e0 1FFA80FB 		uxth	fp, r0
 743:src/int.c     **** 		un[i+j] = t;
 4049              		.loc 1 743 19 view .LVU1095
 4050 02e4 A2EB0B02 		sub	r2, r2, fp
 4051              	.LVL293:
 744:src/int.c     **** 		k = (p >> 16) - (t >> 16);
 4052              		.loc 1 744 3 is_stmt 1 view .LVU1096
 745:src/int.c     **** 	}
 4053              		.loc 1 745 22 is_stmt 0 view .LVU1097
 4054 02e8 1314     		asrs	r3, r2, #16
 4055              	.LVL294:
 741:src/int.c     **** 		p = qhat*vn[i];
 4056              		.loc 1 741 2 view .LVU1098
 4057 02ea B945     		cmp	r9, r7
 744:src/int.c     **** 		k = (p >> 16) - (t >> 16);
ARM GAS  /tmp/ccjGZi8K.s 			page 115


 4058              		.loc 1 744 11 view .LVU1099
 4059 02ec 2CF8022B 		strh	r2, [ip], #2	@ movhi
 745:src/int.c     **** 	}
 4060              		.loc 1 745 3 is_stmt 1 view .LVU1100
 745:src/int.c     **** 	}
 4061              		.loc 1 745 17 is_stmt 0 view .LVU1101
 4062 02f0 C3EB1043 		rsb	r3, r3, r0, lsr #16
 4063              	.LVL295:
 741:src/int.c     **** 		p = qhat*vn[i];
 4064              		.loc 1 741 21 is_stmt 1 view .LVU1102
 741:src/int.c     **** 		p = qhat*vn[i];
 4065              		.loc 1 741 14 view .LVU1103
 741:src/int.c     **** 		p = qhat*vn[i];
 4066              		.loc 1 741 2 is_stmt 0 view .LVU1104
 4067 02f4 EDD1     		bne	.L272
 747:src/int.c     **** 	un[j+n] = t;
 4068              		.loc 1 747 2 is_stmt 1 view .LVU1105
 747:src/int.c     **** 	un[j+n] = t;
 4069              		.loc 1 747 8 is_stmt 0 view .LVU1106
 4070 02f6 6288     		ldrh	r2, [r4, #2]
 4071              	.LVL296:
 747:src/int.c     **** 	un[j+n] = t;
 4072              		.loc 1 747 4 view .LVU1107
 4073 02f8 D31A     		subs	r3, r2, r3
 4074              	.LVL297:
 748:src/int.c     **** 
 4075              		.loc 1 748 2 is_stmt 1 view .LVU1108
 751:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 4076              		.loc 1 751 5 is_stmt 0 view .LVU1109
 4077 02fa 002B     		cmp	r3, #0
 750:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 4078              		.loc 1 750 7 view .LVU1110
 4079 02fc 89B2     		uxth	r1, r1
 4080              	.LVL298:
 748:src/int.c     **** 
 4081              		.loc 1 748 10 view .LVU1111
 4082 02fe 6380     		strh	r3, [r4, #2]	@ movhi
 750:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 4083              		.loc 1 750 2 is_stmt 1 view .LVU1112
 751:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 4084              		.loc 1 751 2 view .LVU1113
 751:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 4085              		.loc 1 751 5 is_stmt 0 view .LVU1114
 4086 0300 59DB     		blt	.L231
 750:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 4087              		.loc 1 750 7 view .LVU1115
 4088 0302 A8F80010 		strh	r1, [r8]	@ movhi
 4089              	.LVL299:
 4090              	.L232:
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 4091              		.loc 1 728 26 is_stmt 1 view .LVU1116
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 4092              		.loc 1 728 27 is_stmt 0 view .LVU1117
 4093 0306 013D     		subs	r5, r5, #1
 4094              	.LVL300:
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 4095              		.loc 1 728 18 is_stmt 1 view .LVU1118
ARM GAS  /tmp/ccjGZi8K.s 			page 116


 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 4096              		.loc 1 728 2 is_stmt 0 view .LVU1119
 4097 0308 6B1C     		adds	r3, r5, #1
 4098 030a A8F10208 		sub	r8, r8, #2
 4099 030e B9D1     		bne	.L235
 4100 0310 DDE90498 		ldrd	r9, r8, [sp, #16]
 4101 0314 BDF85440 		ldrh	r4, [sp, #84]
 4102              	.LVL301:
 4103              	.L223:
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 4104              		.loc 1 728 2 view .LVU1120
 4105 0318 039B     		ldr	r3, [sp, #12]
 4106 031a 08AA     		add	r2, sp, #32
 4107              	.LVL302:
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 4108              		.loc 1 728 2 view .LVU1121
 4109 031c 1344     		add	r3, r3, r2
 4110 031e 1D46     		mov	r5, r3
 4111 0320 0DF15601 		add	r1, sp, #86
 4112              	.LVL303:
 4113              	.L236:
 764:src/int.c     **** }
 4114              		.loc 1 764 3 is_stmt 1 view .LVU1122
 764:src/int.c     **** }
 4115              		.loc 1 764 17 is_stmt 0 view .LVU1123
 4116 0324 44FA09F3 		asr	r3, r4, r9
 764:src/int.c     **** }
 4117              		.loc 1 764 28 view .LVU1124
 4118 0328 31F8024B 		ldrh	r4, [r1], #2
 764:src/int.c     **** }
 4119              		.loc 1 764 34 view .LVU1125
 4120 032c 04FA08F0 		lsl	r0, r4, r8
 764:src/int.c     **** }
 4121              		.loc 1 764 23 view .LVU1126
 4122 0330 0343     		orrs	r3, r3, r0
 764:src/int.c     **** }
 4123              		.loc 1 764 8 view .LVU1127
 4124 0332 22F8023B 		strh	r3, [r2], #2	@ movhi
 763:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4125              		.loc 1 763 21 is_stmt 1 view .LVU1128
 763:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4126              		.loc 1 763 14 view .LVU1129
 763:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4127              		.loc 1 763 2 is_stmt 0 view .LVU1130
 4128 0336 AA42     		cmp	r2, r5
 4129 0338 F4D1     		bne	.L236
 4130              	.L214:
 4131              	.LVL304:
 763:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4132              		.loc 1 763 2 view .LVU1131
 4133              	.LBE1013:
 4134              	.LBE1012:
 826:src/int.c     **** 	return packup(quot);
 4135              		.loc 1 826 2 is_stmt 1 view .LVU1132
 4136              	.LBB1027:
 4137              	.LBI1027:
 571:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
ARM GAS  /tmp/ccjGZi8K.s 			page 117


 4138              		.loc 1 571 31 view .LVU1133
 4139              	.LBB1028:
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4140              		.loc 1 572 2 view .LVU1134
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4141              		.loc 1 572 2 is_stmt 0 view .LVU1135
 4142              	.LBE1028:
 4143              	.LBE1027:
 4144              	.LBB1029:
 4145              	.LBB1030:
 574:src/int.c     **** 			x[0];
 4146              		.loc 1 574 38 view .LVU1136
 4147 033a DDE90A89 		ldrd	r8, [sp, #40]
 4148              	.LBE1030:
 4149              	.LBE1029:
 826:src/int.c     **** 	return packup(quot);
 4150              		.loc 1 826 7 view .LVU1137
 4151 033e DDE90823 		ldrd	r2, [sp, #32]
 4152 0342 2C99     		ldr	r1, [sp, #176]
 828:src/int.c     **** #endif
 4153              		.loc 1 828 1 view .LVU1138
 4154 0344 4046     		mov	r0, r8
 826:src/int.c     **** 	return packup(quot);
 4155              		.loc 1 826 7 view .LVU1139
 4156 0346 C1E90023 		strd	r2, [r1]
 827:src/int.c     **** }
 4157              		.loc 1 827 2 is_stmt 1 view .LVU1140
 4158              	.LVL305:
 4159              	.LBB1032:
 4160              	.LBI1029:
 571:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 4161              		.loc 1 571 31 view .LVU1141
 4162              	.LBB1031:
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4163              		.loc 1 572 2 view .LVU1142
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4164              		.loc 1 572 2 is_stmt 0 view .LVU1143
 4165              	.LBE1031:
 4166              	.LBE1032:
 828:src/int.c     **** #endif
 4167              		.loc 1 828 1 view .LVU1144
 4168 034a 4946     		mov	r1, r9
 4169 034c 1FB0     		add	sp, sp, #124
 4170              		.cfi_remember_state
 4171              		.cfi_def_cfa_offset 36
 4172              		@ sp needed
 4173 034e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4174              	.LVL306:
 4175              	.L278:
 828:src/int.c     **** #endif
 4176              		.loc 1 828 1 view .LVU1145
 4177 0352 00BF     		.align	2
 4178              	.L277:
 4179 0354 00000000 		.word	main_ram
 4180              	.LVL307:
 4181              	.L267:
 4182              		.cfi_restore_state
ARM GAS  /tmp/ccjGZi8K.s 			page 118


 783:src/int.c     **** 			l = mask_value(1 + ~l);
 4183              		.loc 1 783 3 is_stmt 1 view .LVU1146
 783:src/int.c     **** 			l = mask_value(1 + ~l);
 4184              		.loc 1 783 6 is_stmt 0 view .LVU1147
 4185 0358 B9F1000F 		cmp	r9, #0
 4186 035c 5CD1     		bne	.L193
 784:src/int.c     **** 			h = ~h;
 4187              		.loc 1 784 4 is_stmt 1 view .LVU1148
 784:src/int.c     **** 			h = ~h;
 4188              		.loc 1 784 21 is_stmt 0 view .LVU1149
 4189 035e 4442     		rsbs	r4, r0, #0
 4190              	.LVL308:
 784:src/int.c     **** 			h = ~h;
 4191              		.loc 1 784 21 view .LVU1150
 4192 0360 61EB4105 		sbc	r5, r1, r1, lsl #1
 4193              	.LVL309:
 4194              	.LBB1033:
 4195              	.LBI1033:
  92:src/int.c     **** #ifndef TINY_BUILD
 4196              		.loc 1 92 15 is_stmt 1 view .LVU1151
 4197              	.LBB1034:
  94:src/int.c     **** 	long long int mask;
 4198              		.loc 1 94 2 view .LVU1152
 4199              	.LBB1035:
 4200              	.LBI1035:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 4201              		.loc 1 43 14 view .LVU1153
 4202              	.LBB1036:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4203              		.loc 1 44 2 view .LVU1154
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4204              		.loc 1 45 2 view .LVU1155
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4205              		.loc 1 45 5 is_stmt 0 view .LVU1156
 4206 0364 BBF13E0F 		cmp	fp, #62
 4207 0368 00F2BC80 		bhi	.L194
 4208              	.LVL310:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4209              		.loc 1 45 5 view .LVU1157
 4210              	.LBE1036:
 4211              	.LBE1035:
  95:src/int.c     **** 
 4212              		.loc 1 95 2 is_stmt 1 view .LVU1158
  97:src/int.c     **** 		return v;
 4213              		.loc 1 97 2 view .LVU1159
  99:src/int.c     **** 	return v & mask;
 4214              		.loc 1 99 2 view .LVU1160
  99:src/int.c     **** 	return v & mask;
 4215              		.loc 1 99 14 is_stmt 0 view .LVU1161
 4216 036c 0120     		movs	r0, #1
 4217              	.LVL311:
  99:src/int.c     **** 	return v & mask;
 4218              		.loc 1 99 14 view .LVU1162
 4219 036e AEF1200C 		sub	ip, lr, #32
 4220 0372 00FA0CFC 		lsl	ip, r0, ip
 4221 0376 CEF12003 		rsb	r3, lr, #32
 4222 037a 20FA03F3 		lsr	r3, r0, r3
ARM GAS  /tmp/ccjGZi8K.s 			page 119


 4223 037e 6146     		mov	r1, ip
 4224 0380 00FA0EFE 		lsl	lr, r0, lr
  99:src/int.c     **** 	return v & mask;
 4225              		.loc 1 99 7 view .LVU1163
 4226 0384 1EF1FF30 		adds	r0, lr, #-1
  99:src/int.c     **** 	return v & mask;
 4227              		.loc 1 99 14 view .LVU1164
 4228 0388 41EA0301 		orr	r1, r1, r3
  99:src/int.c     **** 	return v & mask;
 4229              		.loc 1 99 7 view .LVU1165
 4230 038c 41F1FF31 		adc	r1, r1, #-1
 4231              	.LVL312:
 100:src/int.c     **** #else
 4232              		.loc 1 100 2 is_stmt 1 view .LVU1166
 100:src/int.c     **** #else
 4233              		.loc 1 100 11 is_stmt 0 view .LVU1167
 4234 0390 0440     		ands	r4, r4, r0
 4235 0392 0D40     		ands	r5, r5, r1
 4236              	.LVL313:
 100:src/int.c     **** #else
 4237              		.loc 1 100 11 view .LVU1168
 4238              	.LBE1034:
 4239              	.LBE1033:
 785:src/int.c     **** 			if (l == 0)
 4240              		.loc 1 785 4 is_stmt 1 view .LVU1169
 786:src/int.c     **** 				h++;
 4241              		.loc 1 786 4 view .LVU1170
 786:src/int.c     **** 				h++;
 4242              		.loc 1 786 7 is_stmt 0 view .LVU1171
 4243 0394 54EA0502 		orrs	r2, r4, r5
 4244 0398 76D1     		bne	.L273
 787:src/int.c     **** 			h = mask_value(h);
 4245              		.loc 1 787 5 is_stmt 1 view .LVU1172
 4246              	.LVL314:
 788:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4247              		.loc 1 788 4 view .LVU1173
 787:src/int.c     **** 			h = mask_value(h);
 4248              		.loc 1 787 6 is_stmt 0 view .LVU1174
 4249 039a 7242     		rsbs	r2, r6, #0
 4250 039c 4CEA030C 		orr	ip, ip, r3
 4251 03a0 67EB4703 		sbc	r3, r7, r7, lsl #1
 4252              	.LVL315:
 4253              	.LBB1037:
 4254              	.LBI1037:
  92:src/int.c     **** #ifndef TINY_BUILD
 4255              		.loc 1 92 15 is_stmt 1 view .LVU1175
 4256              	.LBB1038:
  94:src/int.c     **** 	long long int mask;
 4257              		.loc 1 94 2 view .LVU1176
 4258              	.LBE1038:
 4259              	.LBE1037:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4260              		.loc 1 44 2 view .LVU1177
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4261              		.loc 1 45 2 view .LVU1178
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4262              		.loc 1 45 2 is_stmt 0 view .LVU1179
ARM GAS  /tmp/ccjGZi8K.s 			page 120


 4263 03a4 1EF1FF30 		adds	r0, lr, #-1
 4264 03a8 4CF1FF31 		adc	r1, ip, #-1
 4265              	.LVL316:
 4266              	.L238:
 4267              	.LBB1043:
 4268              	.LBB1039:
  95:src/int.c     **** 
 4269              		.loc 1 95 2 is_stmt 1 view .LVU1180
  97:src/int.c     **** 		return v;
 4270              		.loc 1 97 2 view .LVU1181
  99:src/int.c     **** 	return v & mask;
 4271              		.loc 1 99 2 view .LVU1182
 100:src/int.c     **** #else
 4272              		.loc 1 100 2 view .LVU1183
 100:src/int.c     **** #else
 4273              		.loc 1 100 11 is_stmt 0 view .LVU1184
 4274 03ac 02EA0006 		and	r6, r2, r0
 4275 03b0 03EA0107 		and	r7, r3, r1
 4276              	.LVL317:
 100:src/int.c     **** #else
 4277              		.loc 1 100 11 view .LVU1185
 4278 03b4 39E0     		b	.L197
 4279              	.LVL318:
 4280              	.L231:
 100:src/int.c     **** #else
 4281              		.loc 1 100 11 view .LVU1186
 4282              	.LBE1039:
 4283              	.LBE1043:
 4284              	.LBB1044:
 4285              	.LBB1024:
 752:src/int.c     **** 		k = 0;
 4286              		.loc 1 752 3 is_stmt 1 view .LVU1187
 752:src/int.c     **** 		k = 0;
 4287              		.loc 1 752 15 is_stmt 0 view .LVU1188
 4288 03b6 0139     		subs	r1, r1, #1
 752:src/int.c     **** 		k = 0;
 4289              		.loc 1 752 8 view .LVU1189
 4290 03b8 A8F80010 		strh	r1, [r8]	@ movhi
 753:src/int.c     **** 		for (i = 0; i < n; i++) {
 4291              		.loc 1 753 3 is_stmt 1 view .LVU1190
 4292              	.LVL319:
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4293              		.loc 1 754 3 view .LVU1191
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4294              		.loc 1 754 15 view .LVU1192
 753:src/int.c     **** 		for (i = 0; i < n; i++) {
 4295              		.loc 1 753 5 is_stmt 0 view .LVU1193
 4296 03bc 0023     		movs	r3, #0
 4297              	.LVL320:
 752:src/int.c     **** 		k = 0;
 4298              		.loc 1 752 8 view .LVU1194
 4299 03be 0199     		ldr	r1, [sp, #4]
 4300 03c0 01E0     		b	.L234
 4301              	.LVL321:
 4302              	.L274:
 752:src/int.c     **** 		k = 0;
 4303              		.loc 1 752 8 view .LVU1195
ARM GAS  /tmp/ccjGZi8K.s 			page 121


 4304 03c2 3EF8021B 		ldrh	r1, [lr], #2
 4305              	.LVL322:
 4306              	.L234:
 755:src/int.c     **** 			un[i+j] = t;
 4307              		.loc 1 755 4 is_stmt 1 view .LVU1196
 755:src/int.c     **** 			un[i+j] = t;
 4308              		.loc 1 755 10 is_stmt 0 view .LVU1197
 4309 03c6 3288     		ldrh	r2, [r6]
 755:src/int.c     **** 			un[i+j] = t;
 4310              		.loc 1 755 16 view .LVU1198
 4311 03c8 1144     		add	r1, r1, r2
 755:src/int.c     **** 			un[i+j] = t;
 4312              		.loc 1 755 6 view .LVU1199
 4313 03ca 0B44     		add	r3, r3, r1
 4314              	.LVL323:
 756:src/int.c     **** 			k = t >> 16;
 4315              		.loc 1 756 4 is_stmt 1 view .LVU1200
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4316              		.loc 1 754 3 is_stmt 0 view .LVU1201
 4317 03cc F145     		cmp	r9, lr
 756:src/int.c     **** 			k = t >> 16;
 4318              		.loc 1 756 12 view .LVU1202
 4319 03ce 26F8023B 		strh	r3, [r6], #2	@ movhi
 757:src/int.c     **** 		}
 4320              		.loc 1 757 4 is_stmt 1 view .LVU1203
 757:src/int.c     **** 		}
 4321              		.loc 1 757 6 is_stmt 0 view .LVU1204
 4322 03d2 4FEA2343 		asr	r3, r3, #16
 4323              	.LVL324:
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4324              		.loc 1 754 22 is_stmt 1 view .LVU1205
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4325              		.loc 1 754 15 view .LVU1206
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4326              		.loc 1 754 3 is_stmt 0 view .LVU1207
 4327 03d6 F4D1     		bne	.L274
 759:src/int.c     **** 		}
 4328              		.loc 1 759 3 is_stmt 1 view .LVU1208
 759:src/int.c     **** 		}
 4329              		.loc 1 759 21 is_stmt 0 view .LVU1209
 4330 03d8 6288     		ldrh	r2, [r4, #2]
 4331 03da 1344     		add	r3, r3, r2
 4332              	.LVL325:
 759:src/int.c     **** 		}
 4333              		.loc 1 759 11 view .LVU1210
 4334 03dc 6380     		strh	r3, [r4, #2]	@ movhi
 4335 03de 92E7     		b	.L232
 4336              	.LVL326:
 4337              	.L268:
 759:src/int.c     **** 		}
 4338              		.loc 1 759 11 view .LVU1211
 4339              	.LBE1024:
 4340              	.LBE1044:
 800:src/int.c     **** 		return 0;
 4341              		.loc 1 800 3 is_stmt 1 view .LVU1212
 4342 03e0 46EA0402 		orr	r2, r6, r4
 4343 03e4 47EA0503 		orr	r3, r7, r5
ARM GAS  /tmp/ccjGZi8K.s 			page 122


 4344              	.LVL327:
 4345              	.LBB1045:
 4346              	.LBI1045:
 346:src/int.c     **** 	if (num == 0)
 4347              		.loc 1 346 13 view .LVU1213
 4348              	.LBB1046:
 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 4349              		.loc 1 347 2 view .LVU1214
 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 4350              		.loc 1 347 5 is_stmt 0 view .LVU1215
 4351 03e8 1343     		orrs	r3, r2, r3
 4352 03ea 29D0     		beq	.L275
 4353              	.LVL328:
 4354              	.LBB1047:
 4355              	.LBI1047:
 346:src/int.c     **** 	if (num == 0)
 4356              		.loc 1 346 13 is_stmt 1 view .LVU1216
 4357              	.LBB1048:
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 4358              		.loc 1 349 7 view .LVU1217
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 4359              		.loc 1 349 10 is_stmt 0 view .LVU1218
 4360 03ec 2A9B     		ldr	r3, [sp, #168]
 4361 03ee 1A68     		ldr	r2, [r3]
 4362 03f0 2B9B     		ldr	r3, [sp, #172]
 4363 03f2 1B68     		ldr	r3, [r3]
 4364 03f4 9A42     		cmp	r2, r3
 350:src/int.c     **** 	else
 4365              		.loc 1 350 3 is_stmt 1 view .LVU1219
 4366 03f6 0CBF     		ite	eq
 4367 03f8 0420     		moveq	r0, #4
 352:src/int.c     **** }
 4368              		.loc 1 352 3 view .LVU1220
 4369 03fa 0520     		movne	r0, #5
 4370 03fc FFF7FEFF 		bl	report_err
 4371              	.LVL329:
 352:src/int.c     **** }
 4372              		.loc 1 352 3 is_stmt 0 view .LVU1221
 4373              	.LBE1048:
 4374              	.LBE1047:
 4375              	.LBE1046:
 4376              	.LBE1045:
 828:src/int.c     **** #endif
 4377              		.loc 1 828 1 view .LVU1222
 4378 0400 4046     		mov	r0, r8
 4379 0402 4946     		mov	r1, r9
 4380 0404 1FB0     		add	sp, sp, #124
 4381              		.cfi_remember_state
 4382              		.cfi_def_cfa_offset 36
 4383              		@ sp needed
 4384 0406 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4385              	.LVL330:
 4386              	.L242:
 4387              		.cfi_restore_state
 4388              	.LBB1050:
 4389              	.LBB975:
 828:src/int.c     **** #endif
ARM GAS  /tmp/ccjGZi8K.s 			page 123


 4390              		.loc 1 828 1 view .LVU1223
 4391 040a 4FF00008 		mov	r8, #0
 4392 040e 4FF0004C 		mov	ip, #-2147483648
  46:src/int.c     **** 	return il;
 4393              		.loc 1 46 10 view .LVU1224
 4394 0412 4FF0400A 		mov	r10, #64
 4395 0416 15E6     		b	.L191
 4396              	.LVL331:
 4397              	.L193:
  46:src/int.c     **** 	return il;
 4398              		.loc 1 46 10 view .LVU1225
 4399              	.LBE975:
 4400              	.LBE1050:
 789:src/int.c     **** 			l = mask_value(~l);
 4401              		.loc 1 789 10 is_stmt 1 view .LVU1226
 789:src/int.c     **** 			l = mask_value(~l);
 4402              		.loc 1 789 13 is_stmt 0 view .LVU1227
 4403 0418 B9F1010F 		cmp	r9, #1
 4404 041c 37D0     		beq	.L276
 793:src/int.c     **** 		}
 4405              		.loc 1 793 4 is_stmt 1 view .LVU1228
 793:src/int.c     **** 		}
 4406              		.loc 1 793 6 is_stmt 0 view .LVU1229
 4407 041e 88EA0608 		eor	r8, r8, r6
 4408 0422 8CEA070C 		eor	ip, ip, r7
 4409 0426 4646     		mov	r6, r8
 4410              	.LVL332:
 793:src/int.c     **** 		}
 4411              		.loc 1 793 6 view .LVU1230
 4412 0428 6746     		mov	r7, ip
 4413              	.LVL333:
 4414              	.L197:
 795:src/int.c     **** 	} else
 4415              		.loc 1 795 3 is_stmt 1 view .LVU1231
 795:src/int.c     **** 	} else
 4416              		.loc 1 795 7 is_stmt 0 view .LVU1232
 4417 042a 2B9A     		ldr	r2, [sp, #172]
 4418 042c 0123     		movs	r3, #1
 4419 042e 1360     		str	r3, [r2]
 4420              	.LVL334:
 795:src/int.c     **** 	} else
 4421              		.loc 1 795 7 view .LVU1233
 4422 0430 19E6     		b	.L200
 4423              	.LVL335:
 4424              	.L270:
 4425              	.LBB1051:
 4426              	.LBB1025:
 4427              	.LBB1022:
 4428              	.LBB1018:
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4429              		.loc 1 666 22 is_stmt 1 view .LVU1234
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4430              		.loc 1 666 35 is_stmt 0 view .LVU1235
 4431 0432 4FEA8308 		lsl	r8, r3, #2
 4432 0436 1FFA88F3 		uxth	r3, r8
 4433              	.LVL336:
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
ARM GAS  /tmp/ccjGZi8K.s 			page 124


 4434              		.loc 1 666 24 view .LVU1236
 4435 043a 09F10209 		add	r9, r9, #2
 4436              	.LVL337:
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4437              		.loc 1 666 33 is_stmt 1 view .LVU1237
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4438              		.loc 1 666 33 is_stmt 0 view .LVU1238
 4439 043e B9E6     		b	.L218
 4440              	.LVL338:
 4441              	.L275:
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4442              		.loc 1 666 33 view .LVU1239
 4443              	.LBE1018:
 4444              	.LBE1022:
 4445              	.LBE1025:
 4446              	.LBE1051:
 4447              	.LBB1052:
 4448              	.LBB1049:
 348:src/int.c     **** 	else if (sn == sd)
 4449              		.loc 1 348 3 is_stmt 1 view .LVU1240
 4450 0440 0120     		movs	r0, #1
 4451 0442 FFF7FEFF 		bl	report_err
 4452              	.LVL339:
 348:src/int.c     **** 	else if (sn == sd)
 4453              		.loc 1 348 3 is_stmt 0 view .LVU1241
 4454              	.LBE1049:
 4455              	.LBE1052:
 828:src/int.c     **** #endif
 4456              		.loc 1 828 1 view .LVU1242
 4457 0446 4046     		mov	r0, r8
 4458 0448 4946     		mov	r1, r9
 4459 044a 1FB0     		add	sp, sp, #124
 4460              		.cfi_remember_state
 4461              		.cfi_def_cfa_offset 36
 4462              		@ sp needed
 4463 044c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4464              	.LVL340:
 4465              	.L269:
 4466              		.cfi_restore_state
 4467              	.LBB1053:
 4468              	.LBB1026:
 704:src/int.c     **** 		for (j = m - 1; j >= 0; j--) {		// single-digit
 4469              		.loc 1 704 3 is_stmt 1 view .LVU1243
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4470              		.loc 1 705 3 view .LVU1244
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4471              		.loc 1 705 19 view .LVU1245
 4472 0450 0AAB     		add	r3, sp, #40
 4473              	.LVL341:
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4474              		.loc 1 705 19 is_stmt 0 view .LVU1246
 4475 0452 03EB4004 		add	r4, r3, r0, lsl #1
 4476 0456 0DAB     		add	r3, sp, #52
 4477              	.LVL342:
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4478              		.loc 1 705 19 view .LVU1247
 4479 0458 03EB4001 		add	r1, r3, r0, lsl #1
ARM GAS  /tmp/ccjGZi8K.s 			page 125


 4480              	.LVL343:
 704:src/int.c     **** 		for (j = m - 1; j >= 0; j--) {		// single-digit
 4481              		.loc 1 704 5 view .LVU1248
 4482 045c 0023     		movs	r3, #0
 4483              	.LVL344:
 4484              	.L213:
 706:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4485              		.loc 1 706 4 is_stmt 1 view .LVU1249
 706:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4486              		.loc 1 706 19 is_stmt 0 view .LVU1250
 4487 045e 31F80229 		ldrh	r2, [r1], #-2
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4488              		.loc 1 705 28 view .LVU1251
 4489 0462 0138     		subs	r0, r0, #1
 4490              	.LVL345:
 706:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4491              		.loc 1 706 16 view .LVU1252
 4492 0464 02EB0343 		add	r3, r2, r3, lsl #16
 4493              	.LVL346:
 706:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4494              		.loc 1 706 23 view .LVU1253
 4495 0468 B3FBFEF2 		udiv	r2, r3, lr
 707:src/int.c     **** 		}
 4496              		.loc 1 707 24 view .LVU1254
 4497 046c 95B2     		uxth	r5, r2
 706:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4498              		.loc 1 706 9 view .LVU1255
 4499 046e 24F80229 		strh	r2, [r4], #-2	@ movhi
 707:src/int.c     **** 		}
 4500              		.loc 1 707 4 is_stmt 1 view .LVU1256
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4501              		.loc 1 705 3 is_stmt 0 view .LVU1257
 4502 0472 421C     		adds	r2, r0, #1
 707:src/int.c     **** 		}
 4503              		.loc 1 707 21 view .LVU1258
 4504 0474 0EFB1533 		mls	r3, lr, r5, r3
 4505              	.LVL347:
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4506              		.loc 1 705 27 is_stmt 1 view .LVU1259
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4507              		.loc 1 705 19 view .LVU1260
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4508              		.loc 1 705 3 is_stmt 0 view .LVU1261
 4509 0478 F1D1     		bne	.L213
 709:src/int.c     **** 		return;
 4510              		.loc 1 709 3 is_stmt 1 view .LVU1262
 709:src/int.c     **** 		return;
 4511              		.loc 1 709 8 is_stmt 0 view .LVU1263
 4512 047a ADF82030 		strh	r3, [sp, #32]	@ movhi
 710:src/int.c     **** 	}
 4513              		.loc 1 710 3 is_stmt 1 view .LVU1264
 4514 047e 5CE7     		b	.L214
 4515              	.LVL348:
 4516              	.L246:
 4517              	.LBB1023:
 4518              	.LBB1019:
 710:src/int.c     **** 	}
ARM GAS  /tmp/ccjGZi8K.s 			page 126


 4519              		.loc 1 710 3 is_stmt 0 view .LVU1265
 4520 0480 9846     		mov	r8, r3
 662:src/int.c     ****    n = 0;
 4521              		.loc 1 662 12 view .LVU1266
 4522 0482 4FF01009 		mov	r9, #16
 4523 0486 9BE6     		b	.L215
 4524              	.LVL349:
 4525              	.L273:
 662:src/int.c     ****    n = 0;
 4526              		.loc 1 662 12 view .LVU1267
 4527              	.LBE1019:
 4528              	.LBE1023:
 4529              	.LBE1026:
 4530              	.LBE1053:
 788:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4531              		.loc 1 788 4 is_stmt 1 view .LVU1268
 785:src/int.c     **** 			if (l == 0)
 4532              		.loc 1 785 6 is_stmt 0 view .LVU1269
 4533 0488 F243     		mvns	r2, r6
 4534 048a FB43     		mvns	r3, r7
 4535              	.LVL350:
 4536              	.LBB1054:
  92:src/int.c     **** #ifndef TINY_BUILD
 4537              		.loc 1 92 15 is_stmt 1 view .LVU1270
 4538              	.LBB1040:
  94:src/int.c     **** 	long long int mask;
 4539              		.loc 1 94 2 view .LVU1271
 4540              	.LBE1040:
 4541              	.LBE1054:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4542              		.loc 1 44 2 view .LVU1272
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4543              		.loc 1 45 2 view .LVU1273
 4544 048c 8EE7     		b	.L238
 4545              	.LVL351:
 4546              	.L276:
 790:src/int.c     **** 			h = mask_value(~h);
 4547              		.loc 1 790 4 view .LVU1274
 790:src/int.c     **** 			h = mask_value(~h);
 4548              		.loc 1 790 19 is_stmt 0 view .LVU1275
 4549 048e C343     		mvns	r3, r0
 4550 0490 CA43     		mvns	r2, r1
 4551              	.LBB1055:
 4552              	.LBB1056:
 4553              	.LBB1057:
 4554              	.LBB1058:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4555              		.loc 1 45 5 view .LVU1276
 4556 0492 BBF13E0F 		cmp	fp, #62
 4557              	.LBE1058:
 4558              	.LBE1057:
 4559              	.LBE1056:
 4560              	.LBE1055:
 790:src/int.c     **** 			h = mask_value(~h);
 4561              		.loc 1 790 19 view .LVU1277
 4562 0496 1C46     		mov	r4, r3
 4563              	.LVL352:
ARM GAS  /tmp/ccjGZi8K.s 			page 127


 790:src/int.c     **** 			h = mask_value(~h);
 4564              		.loc 1 790 19 view .LVU1278
 4565 0498 1546     		mov	r5, r2
 4566              	.LVL353:
 4567              	.LBB1064:
 4568              	.LBI1055:
  92:src/int.c     **** #ifndef TINY_BUILD
 4569              		.loc 1 92 15 is_stmt 1 view .LVU1279
 4570              	.LBB1061:
  94:src/int.c     **** 	long long int mask;
 4571              		.loc 1 94 2 view .LVU1280
 4572              	.LBB1060:
 4573              	.LBI1057:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 4574              		.loc 1 43 14 view .LVU1281
 4575              	.LBB1059:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4576              		.loc 1 44 2 view .LVU1282
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4577              		.loc 1 45 2 view .LVU1283
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4578              		.loc 1 45 5 is_stmt 0 view .LVU1284
 4579 049a 1BD8     		bhi	.L264
 4580              	.LVL354:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4581              		.loc 1 45 5 view .LVU1285
 4582              	.LBE1059:
 4583              	.LBE1060:
  95:src/int.c     **** 
 4584              		.loc 1 95 2 is_stmt 1 view .LVU1286
  97:src/int.c     **** 		return v;
 4585              		.loc 1 97 2 view .LVU1287
  99:src/int.c     **** 	return v & mask;
 4586              		.loc 1 99 2 view .LVU1288
  99:src/int.c     **** 	return v & mask;
 4587              		.loc 1 99 14 is_stmt 0 view .LVU1289
 4588 049c AEF12003 		sub	r3, lr, #32
 4589              	.LVL355:
  99:src/int.c     **** 	return v & mask;
 4590              		.loc 1 99 14 view .LVU1290
 4591 04a0 CEF12001 		rsb	r1, lr, #32
 4592 04a4 29FA01F1 		lsr	r1, r9, r1
 4593 04a8 09FA03F3 		lsl	r3, r9, r3
 4594 04ac 09FA0EFE 		lsl	lr, r9, lr
  99:src/int.c     **** 	return v & mask;
 4595              		.loc 1 99 7 view .LVU1291
 4596 04b0 1EF1FF3E 		adds	lr, lr, #-1
  99:src/int.c     **** 	return v & mask;
 4597              		.loc 1 99 14 view .LVU1292
 4598 04b4 43EA0103 		orr	r3, r3, r1
  99:src/int.c     **** 	return v & mask;
 4599              		.loc 1 99 7 view .LVU1293
 4600 04b8 43F1FF33 		adc	r3, r3, #-1
 4601              	.LVL356:
 100:src/int.c     **** #else
 4602              		.loc 1 100 2 is_stmt 1 view .LVU1294
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 128


 4603              		.loc 1 100 2 is_stmt 0 view .LVU1295
 4604              	.LBE1061:
 4605              	.LBE1064:
 791:src/int.c     **** 		} else {
 4606              		.loc 1 791 19 view .LVU1296
 4607 04bc F943     		mvns	r1, r7
 4608              	.LBB1065:
 4609              	.LBB1062:
 100:src/int.c     **** #else
 4610              		.loc 1 100 11 view .LVU1297
 4611 04be 04EA0E04 		and	r4, r4, lr
 4612              	.LBE1062:
 4613              	.LBE1065:
 4614              	.LBB1066:
 4615              	.LBB1067:
 4616 04c2 2EEA0606 		bic	r6, lr, r6
 4617              	.LVL357:
 100:src/int.c     **** #else
 4618              		.loc 1 100 11 view .LVU1298
 4619              	.LBE1067:
 4620              	.LBE1066:
 4621              	.LBB1070:
 4622              	.LBB1063:
 4623 04c6 02EA0305 		and	r5, r2, r3
 4624              	.LVL358:
 100:src/int.c     **** #else
 4625              		.loc 1 100 11 view .LVU1299
 4626              	.LBE1063:
 4627              	.LBE1070:
 791:src/int.c     **** 		} else {
 4628              		.loc 1 791 4 is_stmt 1 view .LVU1300
 4629              	.LBB1071:
 4630              	.LBI1066:
  92:src/int.c     **** #ifndef TINY_BUILD
 4631              		.loc 1 92 15 view .LVU1301
 4632              	.LBB1068:
  94:src/int.c     **** 	long long int mask;
 4633              		.loc 1 94 2 view .LVU1302
 4634              	.LBE1068:
 4635              	.LBE1071:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4636              		.loc 1 44 2 view .LVU1303
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4637              		.loc 1 45 2 view .LVU1304
 4638              	.LBB1072:
 4639              	.LBB1069:
  95:src/int.c     **** 
 4640              		.loc 1 95 2 view .LVU1305
  97:src/int.c     **** 		return v;
 4641              		.loc 1 97 2 view .LVU1306
  99:src/int.c     **** 	return v & mask;
 4642              		.loc 1 99 2 view .LVU1307
 100:src/int.c     **** #else
 4643              		.loc 1 100 2 view .LVU1308
 100:src/int.c     **** #else
 4644              		.loc 1 100 11 is_stmt 0 view .LVU1309
 4645 04ca 01EA0307 		and	r7, r1, r3
ARM GAS  /tmp/ccjGZi8K.s 			page 129


 4646              	.LVL359:
 100:src/int.c     **** #else
 4647              		.loc 1 100 11 view .LVU1310
 4648 04ce ACE7     		b	.L197
 4649              	.LVL360:
 4650              	.L243:
 100:src/int.c     **** #else
 4651              		.loc 1 100 11 view .LVU1311
 4652              	.LBE1069:
 4653              	.LBE1072:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 4654              		.loc 1 821 17 view .LVU1312
 4655 04d0 0421     		movs	r1, #4
 4656 04d2 3CE6     		b	.L207
 4657              	.LVL361:
 4658              	.L264:
 785:src/int.c     **** 			if (l == 0)
 4659              		.loc 1 785 6 view .LVU1313
 4660 04d4 F243     		mvns	r2, r6
 4661 04d6 FB43     		mvns	r3, r7
 4662 04d8 1646     		mov	r6, r2
 4663 04da 1F46     		mov	r7, r3
 788:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4664              		.loc 1 788 4 is_stmt 1 view .LVU1314
 4665              	.LVL362:
 4666              	.LBB1073:
  92:src/int.c     **** #ifndef TINY_BUILD
 4667              		.loc 1 92 15 view .LVU1315
 4668              	.LBB1041:
  94:src/int.c     **** 	long long int mask;
 4669              		.loc 1 94 2 view .LVU1316
 4670              	.LBE1041:
 4671              	.LBE1073:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4672              		.loc 1 44 2 view .LVU1317
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4673              		.loc 1 45 2 view .LVU1318
 4674 04dc A5E7     		b	.L197
 4675              	.LVL363:
 4676              	.L271:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4677              		.loc 1 45 2 is_stmt 0 view .LVU1319
 4678 04de B31C     		adds	r3, r6, #2
 4679 04e0 0393     		str	r3, [sp, #12]
 4680 04e2 19E7     		b	.L223
 4681              	.LVL364:
 4682              	.L194:
 785:src/int.c     **** 			if (l == 0)
 4683              		.loc 1 785 4 is_stmt 1 view .LVU1320
 786:src/int.c     **** 				h++;
 4684              		.loc 1 786 4 view .LVU1321
 786:src/int.c     **** 				h++;
 4685              		.loc 1 786 7 is_stmt 0 view .LVU1322
 4686 04e4 54EA0503 		orrs	r3, r4, r5
 4687 04e8 F4D1     		bne	.L264
 787:src/int.c     **** 			h = mask_value(h);
 4688              		.loc 1 787 5 is_stmt 1 view .LVU1323
ARM GAS  /tmp/ccjGZi8K.s 			page 130


 787:src/int.c     **** 			h = mask_value(h);
 4689              		.loc 1 787 6 is_stmt 0 view .LVU1324
 4690 04ea 7642     		rsbs	r6, r6, #0
 4691              	.LVL365:
 787:src/int.c     **** 			h = mask_value(h);
 4692              		.loc 1 787 6 view .LVU1325
 4693 04ec 67EB4707 		sbc	r7, r7, r7, lsl #1
 4694              	.LVL366:
 788:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4695              		.loc 1 788 4 is_stmt 1 view .LVU1326
 4696              	.LBB1074:
  92:src/int.c     **** #ifndef TINY_BUILD
 4697              		.loc 1 92 15 view .LVU1327
 4698              	.LBB1042:
  94:src/int.c     **** 	long long int mask;
 4699              		.loc 1 94 2 view .LVU1328
 4700              	.LBE1042:
 4701              	.LBE1074:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4702              		.loc 1 44 2 view .LVU1329
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4703              		.loc 1 45 2 view .LVU1330
 4704 04f0 9BE7     		b	.L197
 4705              	.LVL367:
 4706              	.L244:
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 4707              		.loc 1 821 54 is_stmt 0 view .LVU1331
 4708 04f2 0321     		movs	r1, #3
 4709 04f4 2BE6     		b	.L207
 4710              		.cfi_endproc
 4711              	.LFE37:
 4713 04f6 00BF     		.section	.text.build_value,"ax",%progbits
 4714              		.align	1
 4715              		.p2align 2,,3
 4716              		.global	build_value
 4717              		.syntax unified
 4718              		.thumb
 4719              		.thumb_func
 4720              		.fpu fpv4-sp-d16
 4722              	build_value:
 4723              	.LVL368:
 4724              	.LFB13:
 147:src/int.c     **** #ifndef TINY_BUILD
 4725              		.loc 1 147 75 is_stmt 1 view -0
 4726              		.cfi_startproc
 4727              		@ args = 0, pretend = 0, frame = 0
 4728              		@ frame_needed = 0, uses_anonymous_args = 0
 4729              		@ link register save eliminated.
 149:src/int.c     **** 	long long int v = mask_value(x);
 4730              		.loc 1 149 2 view .LVU1333
 4731              	.LBB1075:
 4732              	.LBI1075:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 4733              		.loc 1 39 23 view .LVU1334
 4734              	.LBB1076:
  40:src/int.c     **** }
 4735              		.loc 1 40 2 view .LVU1335
ARM GAS  /tmp/ccjGZi8K.s 			page 131


  40:src/int.c     **** }
 4736              		.loc 1 40 33 is_stmt 0 view .LVU1336
 4737 0000 3E4B     		ldr	r3, .L295
 4738 0002 1B68     		ldr	r3, [r3]
 4739              	.LBE1076:
 4740              	.LBE1075:
 147:src/int.c     **** #ifndef TINY_BUILD
 4741              		.loc 1 147 75 view .LVU1337
 4742 0004 F0B4     		push	{r4, r5, r6, r7}
 4743              		.cfi_def_cfa_offset 16
 4744              		.cfi_offset 4, -16
 4745              		.cfi_offset 5, -12
 4746              		.cfi_offset 6, -8
 4747              		.cfi_offset 7, -4
 4748              	.LBB1079:
 4749              	.LBB1080:
 4750              	.LBB1081:
 4751              	.LBB1082:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4752              		.loc 1 44 26 view .LVU1338
 4753 0006 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 4754              	.LBE1082:
 4755              	.LBE1081:
 4756              	.LBE1080:
 4757              	.LBE1079:
 4758              	.LBB1089:
 4759              	.LBB1077:
  40:src/int.c     **** }
 4760              		.loc 1 40 39 view .LVU1339
 4761 000a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4762              	.LBE1077:
 4763              	.LBE1089:
 4764              	.LBB1090:
 4765              	.LBB1087:
 4766              	.LBB1085:
 4767              	.LBB1083:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4768              		.loc 1 44 15 view .LVU1340
 4769 000e 06F03F06 		and	r6, r6, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4770              		.loc 1 45 26 view .LVU1341
 4771 0012 771E     		subs	r7, r6, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4772              		.loc 1 45 5 view .LVU1342
 4773 0014 3E2F     		cmp	r7, #62
 4774              	.LBE1083:
 4775              	.LBE1085:
 4776              	.LBE1087:
 4777              	.LBE1090:
 150:src/int.c     **** 
 4778              		.loc 1 150 20 view .LVU1343
 4779 0016 0446     		mov	r4, r0
 4780 0018 0D46     		mov	r5, r1
 4781              	.LBB1091:
 4782              	.LBB1078:
  40:src/int.c     **** }
 4783              		.loc 1 40 39 view .LVU1344
ARM GAS  /tmp/ccjGZi8K.s 			page 132


 4784 001a C3F38100 		ubfx	r0, r3, #2, #2
 4785              	.LVL369:
  40:src/int.c     **** }
 4786              		.loc 1 40 39 view .LVU1345
 4787              	.LBE1078:
 4788              	.LBE1091:
 150:src/int.c     **** 
 4789              		.loc 1 150 2 is_stmt 1 view .LVU1346
 4790              	.LBB1092:
 4791              	.LBI1079:
  92:src/int.c     **** #ifndef TINY_BUILD
 4792              		.loc 1 92 15 view .LVU1347
 4793              	.LBB1088:
  94:src/int.c     **** 	long long int mask;
 4794              		.loc 1 94 2 view .LVU1348
 4795              	.LBB1086:
 4796              	.LBI1081:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 4797              		.loc 1 43 14 view .LVU1349
 4798              	.LBB1084:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4799              		.loc 1 44 2 view .LVU1350
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4800              		.loc 1 45 2 view .LVU1351
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4801              		.loc 1 45 5 is_stmt 0 view .LVU1352
 4802 001e 13D8     		bhi	.L280
 4803              	.LVL370:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4804              		.loc 1 45 5 view .LVU1353
 4805              	.LBE1084:
 4806              	.LBE1086:
  95:src/int.c     **** 
 4807              		.loc 1 95 2 is_stmt 1 view .LVU1354
  97:src/int.c     **** 		return v;
 4808              		.loc 1 97 2 view .LVU1355
  99:src/int.c     **** 	return v & mask;
 4809              		.loc 1 99 2 view .LVU1356
 100:src/int.c     **** #else
 4810              		.loc 1 100 2 view .LVU1357
  99:src/int.c     **** 	return v & mask;
 4811              		.loc 1 99 14 is_stmt 0 view .LVU1358
 4812 0020 0121     		movs	r1, #1
 4813 0022 A6F12003 		sub	r3, r6, #32
 4814              	.LVL371:
  99:src/int.c     **** 	return v & mask;
 4815              		.loc 1 99 14 view .LVU1359
 4816 0026 C6F1200C 		rsb	ip, r6, #32
 4817 002a 01FA03F3 		lsl	r3, r1, r3
 4818 002e 21FA0CFC 		lsr	ip, r1, ip
 4819 0032 B140     		lsls	r1, r1, r6
  99:src/int.c     **** 	return v & mask;
 4820              		.loc 1 99 7 view .LVU1360
 4821 0034 11F1FF31 		adds	r1, r1, #-1
  99:src/int.c     **** 	return v & mask;
 4822              		.loc 1 99 14 view .LVU1361
 4823 0038 43EA0C03 		orr	r3, r3, ip
ARM GAS  /tmp/ccjGZi8K.s 			page 133


  99:src/int.c     **** 	return v & mask;
 4824              		.loc 1 99 7 view .LVU1362
 4825 003c 43F1FF33 		adc	r3, r3, #-1
 100:src/int.c     **** #else
 4826              		.loc 1 100 11 view .LVU1363
 4827 0040 2B40     		ands	r3, r3, r5
 4828 0042 2140     		ands	r1, r1, r4
 4829 0044 0C46     		mov	r4, r1
 4830              	.LVL372:
 100:src/int.c     **** #else
 4831              		.loc 1 100 11 view .LVU1364
 4832 0046 1D46     		mov	r5, r3
 4833              	.LVL373:
 4834              	.L280:
 100:src/int.c     **** #else
 4835              		.loc 1 100 11 view .LVU1365
 4836              	.LBE1088:
 4837              	.LBE1092:
 152:src/int.c     **** 		return v;
 4838              		.loc 1 152 2 is_stmt 1 view .LVU1366
 152:src/int.c     **** 		return v;
 4839              		.loc 1 152 5 is_stmt 0 view .LVU1367
 4840 0048 B2B1     		cbz	r2, .L279
 152:src/int.c     **** 		return v;
 4841              		.loc 1 152 16 discriminator 1 view .LVU1368
 4842 004a 0228     		cmp	r0, #2
 4843 004c 14D0     		beq	.L279
 155:src/int.c     **** 		return mask_value(-(signed long long int)v);
 4844              		.loc 1 155 2 is_stmt 1 view .LVU1369
 155:src/int.c     **** 		return mask_value(-(signed long long int)v);
 4845              		.loc 1 155 5 is_stmt 0 view .LVU1370
 4846 004e B8B1     		cbz	r0, .L293
 157:src/int.c     **** 		return mask_value(~v);
 4847              		.loc 1 157 2 is_stmt 1 view .LVU1371
 157:src/int.c     **** 		return mask_value(~v);
 4848              		.loc 1 157 5 is_stmt 0 view .LVU1372
 4849 0050 0128     		cmp	r0, #1
 4850 0052 32D0     		beq	.L294
 159:src/int.c     **** #else
 4851              		.loc 1 159 2 is_stmt 1 view .LVU1373
 4852              	.LBB1093:
 4853              	.LBI1093:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 4854              		.loc 1 110 22 view .LVU1374
 4855              	.LBB1094:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 4856              		.loc 1 111 2 view .LVU1375
 4857              	.LBB1095:
 4858              	.LBI1095:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 4859              		.loc 1 43 14 view .LVU1376
 4860              	.LBB1096:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4861              		.loc 1 44 2 view .LVU1377
 4862              	.LVL374:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4863              		.loc 1 45 2 view .LVU1378
ARM GAS  /tmp/ccjGZi8K.s 			page 134


  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4864              		.loc 1 45 5 is_stmt 0 view .LVU1379
 4865 0054 3E2F     		cmp	r7, #62
 4866 0056 4CD8     		bhi	.L285
 4867 0058 0122     		movs	r2, #1
 4868              	.LVL375:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4869              		.loc 1 45 5 view .LVU1380
 4870 005a A7F12003 		sub	r3, r7, #32
 4871 005e C7F12001 		rsb	r1, r7, #32
 4872 0062 02FA03F3 		lsl	r3, r2, r3
 4873 0066 22FA01F1 		lsr	r1, r2, r1
 4874 006a 0B43     		orrs	r3, r3, r1
 4875 006c 02FA07F7 		lsl	r7, r2, r7
 4876              	.L284:
 4877              	.LVL376:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4878              		.loc 1 45 5 view .LVU1381
 4879              	.LBE1096:
 4880              	.LBE1095:
 112:src/int.c     **** 	return bit;
 4881              		.loc 1 112 2 is_stmt 1 view .LVU1382
 113:src/int.c     **** }
 4882              		.loc 1 113 2 view .LVU1383
 113:src/int.c     **** }
 4883              		.loc 1 113 2 is_stmt 0 view .LVU1384
 4884              	.LBE1094:
 4885              	.LBE1093:
 159:src/int.c     **** #else
 4886              		.loc 1 159 11 view .LVU1385
 4887 0070 2743     		orrs	r7, r7, r4
 4888 0072 2B43     		orrs	r3, r3, r5
 4889 0074 3C46     		mov	r4, r7
 4890              	.LVL377:
 159:src/int.c     **** #else
 4891              		.loc 1 159 11 view .LVU1386
 4892 0076 1D46     		mov	r5, r3
 4893              	.L279:
 163:src/int.c     **** 
 4894              		.loc 1 163 1 view .LVU1387
 4895 0078 2046     		mov	r0, r4
 4896 007a 2946     		mov	r1, r5
 4897 007c F0BC     		pop	{r4, r5, r6, r7}
 4898              		.cfi_remember_state
 4899              		.cfi_restore 7
 4900              		.cfi_restore 6
 4901              		.cfi_restore 5
 4902              		.cfi_restore 4
 4903              		.cfi_def_cfa_offset 0
 4904 007e 7047     		bx	lr
 4905              	.LVL378:
 4906              	.L293:
 4907              		.cfi_restore_state
 156:src/int.c     **** 	if (mode == MODE_1COMP)
 4908              		.loc 1 156 3 is_stmt 1 view .LVU1388
 156:src/int.c     **** 	if (mode == MODE_1COMP)
 4909              		.loc 1 156 10 is_stmt 0 view .LVU1389
ARM GAS  /tmp/ccjGZi8K.s 			page 135


 4910 0080 6442     		rsbs	r4, r4, #0
 4911              	.LVL379:
 156:src/int.c     **** 	if (mode == MODE_1COMP)
 4912              		.loc 1 156 10 view .LVU1390
 4913 0082 65EB4505 		sbc	r5, r5, r5, lsl #1
 4914              	.LVL380:
 4915              	.LBB1100:
 4916              	.LBI1100:
  92:src/int.c     **** #ifndef TINY_BUILD
 4917              		.loc 1 92 15 is_stmt 1 view .LVU1391
 4918              	.LBB1101:
  94:src/int.c     **** 	long long int mask;
 4919              		.loc 1 94 2 view .LVU1392
 4920              	.LBB1102:
 4921              	.LBI1102:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 4922              		.loc 1 43 14 view .LVU1393
 4923              	.LBB1103:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4924              		.loc 1 44 2 view .LVU1394
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4925              		.loc 1 45 2 view .LVU1395
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4926              		.loc 1 45 5 is_stmt 0 view .LVU1396
 4927 0086 3E2F     		cmp	r7, #62
 4928 0088 F6D8     		bhi	.L279
 4929              	.LVL381:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4930              		.loc 1 45 5 view .LVU1397
 4931              	.LBE1103:
 4932              	.LBE1102:
  95:src/int.c     **** 
 4933              		.loc 1 95 2 is_stmt 1 view .LVU1398
  97:src/int.c     **** 		return v;
 4934              		.loc 1 97 2 view .LVU1399
  99:src/int.c     **** 	return v & mask;
 4935              		.loc 1 99 2 view .LVU1400
 100:src/int.c     **** #else
 4936              		.loc 1 100 2 view .LVU1401
  99:src/int.c     **** 	return v & mask;
 4937              		.loc 1 99 14 is_stmt 0 view .LVU1402
 4938 008a 0123     		movs	r3, #1
 4939 008c A6F12002 		sub	r2, r6, #32
 4940              	.LVL382:
  99:src/int.c     **** 	return v & mask;
 4941              		.loc 1 99 14 view .LVU1403
 4942 0090 C6F12001 		rsb	r1, r6, #32
 4943 0094 23FA01F1 		lsr	r1, r3, r1
 4944 0098 03FA02F2 		lsl	r2, r3, r2
 4945 009c 03FA06F6 		lsl	r6, r3, r6
 4946 00a0 0A43     		orrs	r2, r2, r1
  99:src/int.c     **** 	return v & mask;
 4947              		.loc 1 99 7 view .LVU1404
 4948 00a2 16F1FF36 		adds	r6, r6, #-1
 4949 00a6 42F1FF32 		adc	r2, r2, #-1
 100:src/int.c     **** #else
 4950              		.loc 1 100 11 view .LVU1405
ARM GAS  /tmp/ccjGZi8K.s 			page 136


 4951 00aa 2640     		ands	r6, r6, r4
 4952 00ac 2A40     		ands	r2, r2, r5
 4953 00ae 3446     		mov	r4, r6
 4954              	.LVL383:
 100:src/int.c     **** #else
 4955              		.loc 1 100 11 view .LVU1406
 4956 00b0 1546     		mov	r5, r2
 4957              	.LBE1101:
 4958              	.LBE1100:
 163:src/int.c     **** 
 4959              		.loc 1 163 1 view .LVU1407
 4960 00b2 2046     		mov	r0, r4
 4961 00b4 2946     		mov	r1, r5
 4962 00b6 F0BC     		pop	{r4, r5, r6, r7}
 4963              		.cfi_remember_state
 4964              		.cfi_restore 7
 4965              		.cfi_restore 6
 4966              		.cfi_restore 5
 4967              		.cfi_restore 4
 4968              		.cfi_def_cfa_offset 0
 4969 00b8 7047     		bx	lr
 4970              	.LVL384:
 4971              	.L294:
 4972              		.cfi_restore_state
 158:src/int.c     **** 	return v | topbit_mask();
 4973              		.loc 1 158 3 is_stmt 1 view .LVU1408
 158:src/int.c     **** 	return v | topbit_mask();
 4974              		.loc 1 158 10 is_stmt 0 view .LVU1409
 4975 00ba E243     		mvns	r2, r4
 4976              	.LVL385:
 158:src/int.c     **** 	return v | topbit_mask();
 4977              		.loc 1 158 10 view .LVU1410
 4978 00bc EB43     		mvns	r3, r5
 4979              	.LBB1104:
 4980              	.LBB1105:
 4981              	.LBB1106:
 4982              	.LBB1107:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 4983              		.loc 1 45 5 view .LVU1411
 4984 00be 3E2F     		cmp	r7, #62
 4985              	.LBE1107:
 4986              	.LBE1106:
 4987              	.LBE1105:
 4988              	.LBE1104:
 158:src/int.c     **** 	return v | topbit_mask();
 4989              		.loc 1 158 10 view .LVU1412
 4990 00c0 1446     		mov	r4, r2
 4991              	.LVL386:
 158:src/int.c     **** 	return v | topbit_mask();
 4992              		.loc 1 158 10 view .LVU1413
 4993 00c2 1D46     		mov	r5, r3
 4994              	.LVL387:
 4995              	.LBB1111:
 4996              	.LBI1104:
  92:src/int.c     **** #ifndef TINY_BUILD
 4997              		.loc 1 92 15 is_stmt 1 view .LVU1414
 4998              	.LBB1110:
ARM GAS  /tmp/ccjGZi8K.s 			page 137


  94:src/int.c     **** 	long long int mask;
 4999              		.loc 1 94 2 view .LVU1415
 5000              	.LBB1109:
 5001              	.LBI1106:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 5002              		.loc 1 43 14 view .LVU1416
 5003              	.LBB1108:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5004              		.loc 1 44 2 view .LVU1417
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5005              		.loc 1 45 2 view .LVU1418
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5006              		.loc 1 45 5 is_stmt 0 view .LVU1419
 5007 00c4 D8D8     		bhi	.L279
 5008              	.LVL388:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5009              		.loc 1 45 5 view .LVU1420
 5010              	.LBE1108:
 5011              	.LBE1109:
  95:src/int.c     **** 
 5012              		.loc 1 95 2 is_stmt 1 view .LVU1421
  97:src/int.c     **** 		return v;
 5013              		.loc 1 97 2 view .LVU1422
  99:src/int.c     **** 	return v & mask;
 5014              		.loc 1 99 2 view .LVU1423
 100:src/int.c     **** #else
 5015              		.loc 1 100 2 view .LVU1424
  99:src/int.c     **** 	return v & mask;
 5016              		.loc 1 99 14 is_stmt 0 view .LVU1425
 5017 00c6 A6F12003 		sub	r3, r6, #32
 5018 00ca C6F12002 		rsb	r2, r6, #32
 5019 00ce 00FA03F3 		lsl	r3, r0, r3
 5020 00d2 20FA02F2 		lsr	r2, r0, r2
 5021 00d6 00FA06F6 		lsl	r6, r0, r6
  99:src/int.c     **** 	return v & mask;
 5022              		.loc 1 99 7 view .LVU1426
 5023 00da 16F1FF36 		adds	r6, r6, #-1
  99:src/int.c     **** 	return v & mask;
 5024              		.loc 1 99 14 view .LVU1427
 5025 00de 43EA0203 		orr	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 5026              		.loc 1 99 7 view .LVU1428
 5027 00e2 43F1FF33 		adc	r3, r3, #-1
 100:src/int.c     **** #else
 5028              		.loc 1 100 11 view .LVU1429
 5029 00e6 2B40     		ands	r3, r3, r5
 5030 00e8 06EA0400 		and	r0, r6, r4
 5031 00ec 0446     		mov	r4, r0
 5032              	.LVL389:
 100:src/int.c     **** #else
 5033              		.loc 1 100 11 view .LVU1430
 5034 00ee 1D46     		mov	r5, r3
 5035 00f0 C2E7     		b	.L279
 5036              	.LVL390:
 5037              	.L285:
 100:src/int.c     **** #else
 5038              		.loc 1 100 11 view .LVU1431
ARM GAS  /tmp/ccjGZi8K.s 			page 138


 5039              	.LBE1110:
 5040              	.LBE1111:
 5041              	.LBB1112:
 5042              	.LBB1099:
 5043              	.LBB1098:
 5044              	.LBB1097:
 5045 00f2 0027     		movs	r7, #0
 5046 00f4 4FF00043 		mov	r3, #-2147483648
 5047 00f8 BAE7     		b	.L284
 5048              	.L296:
 5049 00fa 00BF     		.align	2
 5050              	.L295:
 5051 00fc 00000000 		.word	main_ram
 5052              	.LBE1097:
 5053              	.LBE1098:
 5054              	.LBE1099:
 5055              	.LBE1112:
 5056              		.cfi_endproc
 5057              	.LFE13:
 5059              		.section	.text.check_overflow,"ax",%progbits
 5060              		.align	1
 5061              		.p2align 2,,3
 5062              		.global	check_overflow
 5063              		.syntax unified
 5064              		.thumb
 5065              		.thumb_func
 5066              		.fpu fpv4-sp-d16
 5068              	check_overflow:
 5069              	.LVL391:
 5070              	.LFB14:
 167:src/int.c     **** 	return mask_value(x) != x ||
 5071              		.loc 1 167 37 is_stmt 1 view -0
 5072              		.cfi_startproc
 5073              		@ args = 0, pretend = 0, frame = 0
 5074              		@ frame_needed = 0, uses_anonymous_args = 0
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5075              		.loc 1 168 2 view .LVU1433
 5076              	.LBB1113:
 5077              	.LBB1114:
 5078              	.LBB1115:
 5079              	.LBB1116:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5080              		.loc 1 44 20 is_stmt 0 view .LVU1434
 5081 0000 274B     		ldr	r3, .L308
 5082 0002 D3F800C0 		ldr	ip, [r3]
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5083              		.loc 1 44 26 view .LVU1435
 5084 0006 9CF8E927 		ldrb	r2, [ip, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5085              		.loc 1 44 15 view .LVU1436
 5086 000a 02F03F02 		and	r2, r2, #63
 5087              	.LBE1116:
 5088              	.LBE1115:
 5089              	.LBE1114:
 5090              	.LBE1113:
 167:src/int.c     **** 	return mask_value(x) != x ||
 5091              		.loc 1 167 37 view .LVU1437
ARM GAS  /tmp/ccjGZi8K.s 			page 139


 5092 000e F0B5     		push	{r4, r5, r6, r7, lr}
 5093              		.cfi_def_cfa_offset 20
 5094              		.cfi_offset 4, -20
 5095              		.cfi_offset 5, -16
 5096              		.cfi_offset 6, -12
 5097              		.cfi_offset 7, -8
 5098              		.cfi_offset 14, -4
 5099              	.LBB1124:
 5100              	.LBB1121:
 5101              	.LBB1119:
 5102              	.LBB1117:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5103              		.loc 1 45 26 view .LVU1438
 5104 0010 02F1FF3E 		add	lr, r2, #-1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5105              		.loc 1 45 5 view .LVU1439
 5106 0014 BEF13E0F 		cmp	lr, #62
 5107              	.LBE1117:
 5108              	.LBE1119:
 5109              	.LBE1121:
 5110              	.LBE1124:
 167:src/int.c     **** 	return mask_value(x) != x ||
 5111              		.loc 1 167 37 view .LVU1440
 5112 0018 0446     		mov	r4, r0
 5113 001a 0D46     		mov	r5, r1
 5114              	.LVL392:
 5115              	.LBB1125:
 5116              	.LBI1113:
  92:src/int.c     **** #ifndef TINY_BUILD
 5117              		.loc 1 92 15 is_stmt 1 view .LVU1441
 5118              	.LBB1122:
  94:src/int.c     **** 	long long int mask;
 5119              		.loc 1 94 2 view .LVU1442
 5120              	.LBB1120:
 5121              	.LBI1115:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 5122              		.loc 1 43 14 view .LVU1443
 5123              	.LBB1118:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5124              		.loc 1 44 2 view .LVU1444
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5125              		.loc 1 45 2 view .LVU1445
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5126              		.loc 1 45 5 is_stmt 0 view .LVU1446
 5127 001c 1BD8     		bhi	.L298
 5128              	.LVL393:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5129              		.loc 1 45 5 view .LVU1447
 5130              	.LBE1118:
 5131              	.LBE1120:
  95:src/int.c     **** 
 5132              		.loc 1 95 2 is_stmt 1 view .LVU1448
  97:src/int.c     **** 		return v;
 5133              		.loc 1 97 2 view .LVU1449
  99:src/int.c     **** 	return v & mask;
 5134              		.loc 1 99 2 view .LVU1450
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 140


 5135              		.loc 1 100 2 view .LVU1451
  99:src/int.c     **** 	return v & mask;
 5136              		.loc 1 99 14 is_stmt 0 view .LVU1452
 5137 001e 0120     		movs	r0, #1
 5138              	.LVL394:
  99:src/int.c     **** 	return v & mask;
 5139              		.loc 1 99 14 view .LVU1453
 5140 0020 A2F12003 		sub	r3, r2, #32
 5141 0024 C2F12006 		rsb	r6, r2, #32
 5142 0028 20FA06F6 		lsr	r6, r0, r6
 5143 002c 00FA03F3 		lsl	r3, r0, r3
 5144 0030 00FA02F1 		lsl	r1, r0, r2
  99:src/int.c     **** 	return v & mask;
 5145              		.loc 1 99 7 view .LVU1454
 5146 0034 11F1FF31 		adds	r1, r1, #-1
  99:src/int.c     **** 	return v & mask;
 5147              		.loc 1 99 14 view .LVU1455
 5148 0038 43EA0603 		orr	r3, r3, r6
  99:src/int.c     **** 	return v & mask;
 5149              		.loc 1 99 7 view .LVU1456
 5150 003c 43F1FF33 		adc	r3, r3, #-1
 100:src/int.c     **** #else
 5151              		.loc 1 100 11 view .LVU1457
 5152 0040 03EA0507 		and	r7, r3, r5
 5153 0044 01EA0406 		and	r6, r1, r4
 5154              	.LBE1122:
 5155              	.LBE1125:
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5156              		.loc 1 168 28 view .LVU1458
 5157 0048 BD42     		cmp	r5, r7
 5158 004a 08BF     		it	eq
 5159 004c B442     		cmpeq	r4, r6
 5160              	.LBB1126:
 5161              	.LBB1123:
  99:src/int.c     **** 	return v & mask;
 5162              		.loc 1 99 14 view .LVU1459
 5163 004e 4FF00003 		mov	r3, #0
 5164              	.LBE1123:
 5165              	.LBE1126:
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5166              		.loc 1 168 28 view .LVU1460
 5167 0052 0BD0     		beq	.L307
 5168              	.L297:
 170:src/int.c     **** 
 5169              		.loc 1 170 1 view .LVU1461
 5170 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 5171              	.LVL395:
 5172              	.L298:
 5173              	.LBB1127:
 5174              	.LBI1127:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5175              		.loc 1 39 23 is_stmt 1 view .LVU1462
 5176              	.LBB1128:
  40:src/int.c     **** }
 5177              		.loc 1 40 2 view .LVU1463
  40:src/int.c     **** }
 5178              		.loc 1 40 39 is_stmt 0 view .LVU1464
ARM GAS  /tmp/ccjGZi8K.s 			page 141


 5179 0056 9CF8E837 		ldrb	r3, [ip, #2024]	@ zero_extendqisi2
 5180              	.LBE1128:
 5181              	.LBE1127:
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5182              		.loc 1 168 28 view .LVU1465
 5183 005a C3F38103 		ubfx	r3, r3, #2, #2
 5184 005e 022B     		cmp	r3, #2
 5185 0060 4FF00000 		mov	r0, #0
 5186              	.LVL396:
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5187              		.loc 1 168 28 view .LVU1466
 5188 0064 F6D0     		beq	.L297
 5189 0066 4FF00042 		mov	r2, #-2147483648
 5190 006a 11E0     		b	.L302
 5191              	.L307:
 5192              	.LBB1130:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5193              		.loc 1 39 23 is_stmt 1 view .LVU1467
 5194              	.LBB1129:
  40:src/int.c     **** }
 5195              		.loc 1 40 2 view .LVU1468
  40:src/int.c     **** }
 5196              		.loc 1 40 39 is_stmt 0 view .LVU1469
 5197 006c 9CF8E817 		ldrb	r1, [ip, #2024]	@ zero_extendqisi2
 5198              	.LBE1129:
 5199              	.LBE1130:
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5200              		.loc 1 168 28 view .LVU1470
 5201 0070 C1F38101 		ubfx	r1, r1, #2, #2
 5202 0074 0229     		cmp	r1, #2
 5203 0076 08BF     		it	eq
 5204 0078 1846     		moveq	r0, r3
 5205 007a EBD0     		beq	.L297
 5206 007c 213A     		subs	r2, r2, #33
 5207 007e CEF12003 		rsb	r3, lr, #32
 5208 0082 00FA02F2 		lsl	r2, r0, r2
 5209 0086 20FA03F3 		lsr	r3, r0, r3
 5210 008a 1A43     		orrs	r2, r2, r3
 5211 008c 00FA0EF0 		lsl	r0, r0, lr
 5212              	.L302:
 112:src/int.c     **** 	return bit;
 5213              		.loc 1 112 2 is_stmt 1 view .LVU1471
 5214              	.LVL397:
 113:src/int.c     **** }
 5215              		.loc 1 113 2 view .LVU1472
 169:src/int.c     **** }
 5216              		.loc 1 169 38 is_stmt 0 view .LVU1473
 5217 0090 2040     		ands	r0, r0, r4
 5218 0092 2A40     		ands	r2, r2, r5
 169:src/int.c     **** }
 5219              		.loc 1 169 32 view .LVU1474
 5220 0094 50EA0203 		orrs	r3, r0, r2
 5221 0098 14BF     		ite	ne
 5222 009a 0120     		movne	r0, #1
 5223 009c 0020     		moveq	r0, #0
 170:src/int.c     **** 
 5224              		.loc 1 170 1 view .LVU1475
ARM GAS  /tmp/ccjGZi8K.s 			page 142


 5225 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 5226              	.L309:
 5227              		.align	2
 5228              	.L308:
 5229 00a0 00000000 		.word	main_ram
 5230              		.cfi_endproc
 5231              	.LFE14:
 5233              		.section	.text.intAdd,"ax",%progbits
 5234              		.align	1
 5235              		.p2align 2,,3
 5236              		.global	intAdd
 5237              		.syntax unified
 5238              		.thumb
 5239              		.thumb_func
 5240              		.fpu fpv4-sp-d16
 5242              	intAdd:
 5243              	.LVL398:
 5244              	.LFB16:
 219:src/int.c     **** #ifndef TINY_BUILD
 5245              		.loc 1 219 56 is_stmt 1 view -0
 5246              		.cfi_startproc
 5247              		@ args = 0, pretend = 0, frame = 24
 5248              		@ frame_needed = 0, uses_anonymous_args = 0
 221:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 5249              		.loc 1 221 2 view .LVU1477
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5250              		.loc 1 222 2 view .LVU1478
 219:src/int.c     **** #ifndef TINY_BUILD
 5251              		.loc 1 219 56 is_stmt 0 view .LVU1479
 5252 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5253              		.cfi_def_cfa_offset 36
 5254              		.cfi_offset 4, -36
 5255              		.cfi_offset 5, -32
 5256              		.cfi_offset 6, -28
 5257              		.cfi_offset 7, -24
 5258              		.cfi_offset 8, -20
 5259              		.cfi_offset 9, -16
 5260              		.cfi_offset 10, -12
 5261              		.cfi_offset 11, -8
 5262              		.cfi_offset 14, -4
 5263 0004 89B0     		sub	sp, sp, #36
 5264              		.cfi_def_cfa_offset 72
 219:src/int.c     **** #ifndef TINY_BUILD
 5265              		.loc 1 219 56 view .LVU1480
 5266 0006 0446     		mov	r4, r0
 5267 0008 0D46     		mov	r5, r1
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5268              		.loc 1 222 30 view .LVU1481
 5269 000a 1046     		mov	r0, r2
 5270              	.LVL399:
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5271              		.loc 1 222 30 view .LVU1482
 5272 000c 1946     		mov	r1, r3
 219:src/int.c     **** #ifndef TINY_BUILD
 5273              		.loc 1 219 56 view .LVU1483
 5274 000e 9046     		mov	r8, r2
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
ARM GAS  /tmp/ccjGZi8K.s 			page 143


 5275              		.loc 1 222 30 view .LVU1484
 5276 0010 06AA     		add	r2, sp, #24
 5277              	.LVL400:
 219:src/int.c     **** #ifndef TINY_BUILD
 5278              		.loc 1 219 56 view .LVU1485
 5279 0012 9946     		mov	r9, r3
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5280              		.loc 1 222 30 view .LVU1486
 5281 0014 FFF7FEFF 		bl	extract_value
 5282              	.LVL401:
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5283              		.loc 1 223 30 view .LVU1487
 5284 0018 07AA     		add	r2, sp, #28
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5285              		.loc 1 222 30 view .LVU1488
 5286 001a 8446     		mov	ip, r0
 5287 001c 0B46     		mov	r3, r1
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5288              		.loc 1 223 30 view .LVU1489
 5289 001e 2046     		mov	r0, r4
 5290 0020 2946     		mov	r1, r5
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5291              		.loc 1 222 30 view .LVU1490
 5292 0022 CDE902C3 		strd	ip, r3, [sp, #8]
 5293              	.LVL402:
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5294              		.loc 1 223 2 is_stmt 1 view .LVU1491
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5295              		.loc 1 223 30 is_stmt 0 view .LVU1492
 5296 0026 FFF7FEFF 		bl	extract_value
 5297              	.LVL403:
 5298              	.LBB1131:
 5299              	.LBB1132:
  40:src/int.c     **** }
 5300              		.loc 1 40 39 view .LVU1493
 5301 002a DFF8A8B1 		ldr	fp, .L340
 5302              	.LBE1132:
 5303              	.LBE1131:
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5304              		.loc 1 223 30 view .LVU1494
 5305 002e 0B46     		mov	r3, r1
 5306              	.LBB1137:
 5307              	.LBB1133:
  40:src/int.c     **** }
 5308              		.loc 1 40 39 view .LVU1495
 5309 0030 DBF80010 		ldr	r1, [fp]
 5310              	.LBE1133:
 5311              	.LBE1137:
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5312              		.loc 1 223 30 view .LVU1496
 5313 0034 0246     		mov	r2, r0
 5314              	.LBB1138:
 5315              	.LBB1134:
  40:src/int.c     **** }
 5316              		.loc 1 40 39 view .LVU1497
 5317 0036 91F8E8A7 		ldrb	r10, [r1, #2024]	@ zero_extendqisi2
 5318              	.LBE1134:
ARM GAS  /tmp/ccjGZi8K.s 			page 144


 5319              	.LBE1138:
 5320              	.LBB1139:
 5321              	.LBB1140:
  72:src/int.c     **** #endif
 5322              		.loc 1 72 3 view .LVU1498
 5323 003a 6920     		movs	r0, #105
 5324 003c 5221     		movs	r1, #82
 5325              	.LBE1140:
 5326              	.LBE1139:
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5327              		.loc 1 223 30 view .LVU1499
 5328 003e CDE90423 		strd	r2, r3, [sp, #16]
 5329              	.LVL404:
 224:src/int.c     **** 	long long int v;
 5330              		.loc 1 224 2 is_stmt 1 view .LVU1500
 5331              	.LBB1143:
 5332              	.LBI1131:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5333              		.loc 1 39 23 view .LVU1501
 5334              	.LBB1135:
  40:src/int.c     **** }
 5335              		.loc 1 40 2 view .LVU1502
 5336              	.LBE1135:
 5337              	.LBE1143:
 5338              	.LBB1144:
 5339              	.LBB1141:
  72:src/int.c     **** #endif
 5340              		.loc 1 72 3 is_stmt 0 view .LVU1503
 5341 0042 FFF7FEFF 		bl	cmdflag
 5342              	.LVL405:
  72:src/int.c     **** #endif
 5343              		.loc 1 72 3 view .LVU1504
 5344              	.LBE1141:
 5345              	.LBE1144:
 229:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 5346              		.loc 1 229 5 view .LVU1505
 5347 0046 DDE90632 		ldrd	r3, r2, [sp, #24]
 5348 004a 9342     		cmp	r3, r2
 5349              	.LBB1145:
 5350              	.LBB1136:
  40:src/int.c     **** }
 5351              		.loc 1 40 9 view .LVU1506
 5352 004c CAF3810A 		ubfx	r10, r10, #2, #2
 5353              	.LVL406:
  40:src/int.c     **** }
 5354              		.loc 1 40 9 view .LVU1507
 5355              	.LBE1136:
 5356              	.LBE1145:
 225:src/int.c     **** 	int overflow;
 5357              		.loc 1 225 2 is_stmt 1 view .LVU1508
 226:src/int.c     **** 
 5358              		.loc 1 226 2 view .LVU1509
 228:src/int.c     **** 	if (sx == sy)
 5359              		.loc 1 228 2 view .LVU1510
 5360              	.LBB1146:
 5361              	.LBI1139:
  67:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccjGZi8K.s 			page 145


 5362              		.loc 1 67 6 view .LVU1511
 5363              	.LBB1142:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 5364              		.loc 1 69 2 view .LVU1512
  72:src/int.c     **** #endif
 5365              		.loc 1 72 3 view .LVU1513
  72:src/int.c     **** #endif
 5366              		.loc 1 72 3 is_stmt 0 view .LVU1514
 5367              	.LBE1142:
 5368              	.LBE1146:
 229:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 5369              		.loc 1 229 2 is_stmt 1 view .LVU1515
 229:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 5370              		.loc 1 229 5 is_stmt 0 view .LVU1516
 5371 0050 00F0AA80 		beq	.L336
 232:src/int.c     **** 
 5372              		.loc 1 232 12 view .LVU1517
 5373 0054 0022     		movs	r2, #0
 5374              	.L311:
 5375              	.LVL407:
 234:src/int.c     **** 		const long long int tbm = topbit_mask();
 5376              		.loc 1 234 2 is_stmt 1 view .LVU1518
 234:src/int.c     **** 		const long long int tbm = topbit_mask();
 5377              		.loc 1 234 5 is_stmt 0 view .LVU1519
 5378 0056 BAF1030F 		cmp	r10, #3
 5379              	.LBB1147:
 5380              	.LBB1148:
 5381              	.LBB1149:
 5382              	.LBB1150:
 5383              	.LBB1151:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5384              		.loc 1 44 26 view .LVU1520
 5385 005a DBF80030 		ldr	r3, [fp]
 5386              	.LBE1151:
 5387              	.LBE1150:
 5388              	.LBE1149:
 5389              	.LBE1148:
 5390              	.LBE1147:
 234:src/int.c     **** 		const long long int tbm = topbit_mask();
 5391              		.loc 1 234 5 view .LVU1521
 5392 005e 59D0     		beq	.L337
 5393              	.LBB1164:
 245:src/int.c     **** 		const unsigned long long int u = mask_value(y + x);
 5394              		.loc 1 245 3 is_stmt 1 view .LVU1522
 246:src/int.c     **** 
 5395              		.loc 1 246 3 view .LVU1523
 5396              	.LBB1165:
 5397              	.LBB1166:
 5398              	.LBB1167:
 5399              	.LBB1168:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5400              		.loc 1 44 26 is_stmt 0 view .LVU1524
 5401 0060 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5402              		.loc 1 44 15 view .LVU1525
 5403 0064 03F03F01 		and	r1, r3, #63
 5404              	.LBE1168:
ARM GAS  /tmp/ccjGZi8K.s 			page 146


 5405              	.LBE1167:
 5406              	.LBE1166:
 5407              	.LBE1165:
 246:src/int.c     **** 
 5408              		.loc 1 246 36 view .LVU1526
 5409 0068 18EB0406 		adds	r6, r8, r4
 5410              	.LBB1177:
 5411              	.LBB1173:
 5412              	.LBB1171:
 5413              	.LBB1169:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5414              		.loc 1 45 26 view .LVU1527
 5415 006c 01F1FF33 		add	r3, r1, #-1
 5416              	.LBE1169:
 5417              	.LBE1171:
 5418              	.LBE1173:
 5419              	.LBE1177:
 246:src/int.c     **** 
 5420              		.loc 1 246 36 view .LVU1528
 5421 0070 49EB0507 		adc	r7, r9, r5
 5422              	.LVL408:
 5423              	.LBB1178:
 5424              	.LBI1165:
  92:src/int.c     **** #ifndef TINY_BUILD
 5425              		.loc 1 92 15 is_stmt 1 view .LVU1529
 5426              	.LBB1174:
  94:src/int.c     **** 	long long int mask;
 5427              		.loc 1 94 2 view .LVU1530
 5428              	.LBB1172:
 5429              	.LBI1167:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 5430              		.loc 1 43 14 view .LVU1531
 5431              	.LBB1170:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5432              		.loc 1 44 2 view .LVU1532
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5433              		.loc 1 45 2 view .LVU1533
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5434              		.loc 1 45 5 is_stmt 0 view .LVU1534
 5435 0074 3E2B     		cmp	r3, #62
 5436 0076 00F2A580 		bhi	.L319
 5437              	.LVL409:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5438              		.loc 1 45 5 view .LVU1535
 5439              	.LBE1170:
 5440              	.LBE1172:
  95:src/int.c     **** 
 5441              		.loc 1 95 2 is_stmt 1 view .LVU1536
  97:src/int.c     **** 		return v;
 5442              		.loc 1 97 2 view .LVU1537
  99:src/int.c     **** 	return v & mask;
 5443              		.loc 1 99 2 view .LVU1538
  99:src/int.c     **** 	return v & mask;
 5444              		.loc 1 99 14 is_stmt 0 view .LVU1539
 5445 007a 0123     		movs	r3, #1
 5446 007c A1F12002 		sub	r2, r1, #32
 5447 0080 C1F12000 		rsb	r0, r1, #32
ARM GAS  /tmp/ccjGZi8K.s 			page 147


 5448 0084 23FA00F0 		lsr	r0, r3, r0
 5449 0088 03FA02F2 		lsl	r2, r3, r2
 5450 008c 8B40     		lsls	r3, r3, r1
  99:src/int.c     **** 	return v & mask;
 5451              		.loc 1 99 7 view .LVU1540
 5452 008e 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 5453              		.loc 1 99 14 view .LVU1541
 5454 0092 42EA0002 		orr	r2, r2, r0
  99:src/int.c     **** 	return v & mask;
 5455              		.loc 1 99 7 view .LVU1542
 5456 0096 42F1FF32 		adc	r2, r2, #-1
 5457              	.LVL410:
 100:src/int.c     **** #else
 5458              		.loc 1 100 2 is_stmt 1 view .LVU1543
 100:src/int.c     **** #else
 5459              		.loc 1 100 2 is_stmt 0 view .LVU1544
 5460              	.LBE1174:
 5461              	.LBE1178:
 5462              	.LBB1179:
 5463              	.LBB1180:
 100:src/int.c     **** #else
 5464              		.loc 1 100 11 view .LVU1545
 5465 009a 05EA020C 		and	ip, r5, r2
 5466 009e 04EA030E 		and	lr, r4, r3
 5467              	.LBE1180:
 5468              	.LBE1179:
 5469              	.LBB1185:
 5470              	.LBB1175:
 5471 00a2 06EA0300 		and	r0, r6, r3
 5472              	.LBE1175:
 5473              	.LBE1185:
 5474              	.LBB1186:
 5475              	.LBB1181:
 5476 00a6 7446     		mov	r4, lr
 5477 00a8 6546     		mov	r5, ip
 5478              	.LBE1181:
 5479              	.LBE1186:
 5480              	.LBB1187:
 5481              	.LBB1176:
 5482 00aa 07EA0201 		and	r1, r7, r2
 5483              	.LVL411:
 100:src/int.c     **** #else
 5484              		.loc 1 100 11 view .LVU1546
 5485              	.LBE1176:
 5486              	.LBE1187:
 248:src/int.c     **** 			set_carry(1);
 5487              		.loc 1 248 3 is_stmt 1 view .LVU1547
 5488              	.LBB1188:
 5489              	.LBI1179:
  92:src/int.c     **** #ifndef TINY_BUILD
 5490              		.loc 1 92 15 view .LVU1548
 5491              	.LBB1182:
  94:src/int.c     **** 	long long int mask;
 5492              		.loc 1 94 2 view .LVU1549
 5493              	.LBE1182:
 5494              	.LBE1188:
ARM GAS  /tmp/ccjGZi8K.s 			page 148


 5495              	.LBE1164:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5496              		.loc 1 44 2 view .LVU1550
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5497              		.loc 1 45 2 view .LVU1551
 5498              	.LBB1195:
 5499              	.LBB1189:
 5500              	.LBB1183:
  95:src/int.c     **** 
 5501              		.loc 1 95 2 view .LVU1552
  97:src/int.c     **** 		return v;
 5502              		.loc 1 97 2 view .LVU1553
  99:src/int.c     **** 	return v & mask;
 5503              		.loc 1 99 2 view .LVU1554
 100:src/int.c     **** #else
 5504              		.loc 1 100 2 view .LVU1555
 5505              	.L323:
 100:src/int.c     **** #else
 5506              		.loc 1 100 2 is_stmt 0 view .LVU1556
 5507              	.LBE1183:
 5508              	.LBE1189:
 248:src/int.c     **** 			set_carry(1);
 5509              		.loc 1 248 6 view .LVU1557
 5510 00ae A942     		cmp	r1, r5
 5511 00b0 08BF     		it	eq
 5512 00b2 A042     		cmpeq	r0, r4
 5513 00b4 25D3     		bcc	.L338
 252:src/int.c     **** 			carry = 0;
 5514              		.loc 1 252 4 is_stmt 1 view .LVU1558
 5515              	.LVL412:
 5516              	.LBB1190:
 5517              	.LBI1190:
  54:src/int.c     **** #ifndef TINY_BUILD
 5518              		.loc 1 54 6 view .LVU1559
 5519              	.LBB1191:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5520              		.loc 1 56 2 view .LVU1560
  59:src/int.c     **** #endif
 5521              		.loc 1 59 3 view .LVU1561
 5522 00b6 5221     		movs	r1, #82
 5523 00b8 6A20     		movs	r0, #106
 5524 00ba FFF7FEFF 		bl	cmdflag
 5525              	.LVL413:
  59:src/int.c     **** #endif
 5526              		.loc 1 59 3 is_stmt 0 view .LVU1562
 5527              	.LBE1191:
 5528              	.LBE1190:
 253:src/int.c     **** 		}
 5529              		.loc 1 253 4 is_stmt 1 view .LVU1563
 256:src/int.c     **** 		if (carry && mode == MODE_1COMP)
 5530              		.loc 1 256 3 view .LVU1564
 257:src/int.c     **** 			v++;
 5531              		.loc 1 257 3 view .LVU1565
 5532              	.L318:
 257:src/int.c     **** 			v++;
 5533              		.loc 1 257 3 is_stmt 0 view .LVU1566
 5534              	.LBE1195:
ARM GAS  /tmp/ccjGZi8K.s 			page 149


 260:src/int.c     **** #else
 5535              		.loc 1 260 2 is_stmt 1 view .LVU1567
 5536              	.LBB1196:
 5537              	.LBI1196:
  92:src/int.c     **** #ifndef TINY_BUILD
 5538              		.loc 1 92 15 view .LVU1568
 5539              	.LBB1197:
  94:src/int.c     **** 	long long int mask;
 5540              		.loc 1 94 2 view .LVU1569
 5541              	.LBB1198:
 5542              	.LBI1198:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 5543              		.loc 1 43 14 view .LVU1570
 5544              	.LBB1199:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5545              		.loc 1 44 2 view .LVU1571
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5546              		.loc 1 44 26 is_stmt 0 view .LVU1572
 5547 00be DBF80030 		ldr	r3, [fp]
 5548 00c2 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5549              		.loc 1 44 15 view .LVU1573
 5550 00c6 03F03F01 		and	r1, r3, #63
 5551              	.LVL414:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5552              		.loc 1 45 2 is_stmt 1 view .LVU1574
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5553              		.loc 1 45 26 is_stmt 0 view .LVU1575
 5554 00ca 4B1E     		subs	r3, r1, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5555              		.loc 1 45 5 view .LVU1576
 5556 00cc 3E2B     		cmp	r3, #62
 5557 00ce 13D8     		bhi	.L310
 5558              	.LVL415:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5559              		.loc 1 45 5 view .LVU1577
 5560              	.LBE1199:
 5561              	.LBE1198:
  95:src/int.c     **** 
 5562              		.loc 1 95 2 is_stmt 1 view .LVU1578
  97:src/int.c     **** 		return v;
 5563              		.loc 1 97 2 view .LVU1579
  99:src/int.c     **** 	return v & mask;
 5564              		.loc 1 99 2 view .LVU1580
 100:src/int.c     **** #else
 5565              		.loc 1 100 2 view .LVU1581
  99:src/int.c     **** 	return v & mask;
 5566              		.loc 1 99 14 is_stmt 0 view .LVU1582
 5567 00d0 0123     		movs	r3, #1
 5568 00d2 A1F12002 		sub	r2, r1, #32
 5569 00d6 C1F12000 		rsb	r0, r1, #32
 5570 00da 03FA02F2 		lsl	r2, r3, r2
 5571 00de 23FA00F0 		lsr	r0, r3, r0
 5572 00e2 8B40     		lsls	r3, r3, r1
  99:src/int.c     **** 	return v & mask;
 5573              		.loc 1 99 7 view .LVU1583
 5574 00e4 13F1FF33 		adds	r3, r3, #-1
ARM GAS  /tmp/ccjGZi8K.s 			page 150


  99:src/int.c     **** 	return v & mask;
 5575              		.loc 1 99 14 view .LVU1584
 5576 00e8 42EA0002 		orr	r2, r2, r0
  99:src/int.c     **** 	return v & mask;
 5577              		.loc 1 99 7 view .LVU1585
 5578 00ec 42F1FF32 		adc	r2, r2, #-1
 100:src/int.c     **** #else
 5579              		.loc 1 100 11 view .LVU1586
 5580 00f0 3A40     		ands	r2, r2, r7
 5581 00f2 3340     		ands	r3, r3, r6
 5582 00f4 1E46     		mov	r6, r3
 5583              	.LVL416:
 100:src/int.c     **** #else
 5584              		.loc 1 100 11 view .LVU1587
 5585 00f6 1746     		mov	r7, r2
 5586              	.LVL417:
 5587              	.L310:
 100:src/int.c     **** #else
 5588              		.loc 1 100 11 view .LVU1588
 5589              	.LBE1197:
 5590              	.LBE1196:
 264:src/int.c     **** 
 5591              		.loc 1 264 1 view .LVU1589
 5592 00f8 3046     		mov	r0, r6
 5593 00fa 3946     		mov	r1, r7
 5594 00fc 09B0     		add	sp, sp, #36
 5595              		.cfi_remember_state
 5596              		.cfi_def_cfa_offset 36
 5597              		@ sp needed
 5598 00fe BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5599              	.LVL418:
 5600              	.L338:
 5601              		.cfi_restore_state
 5602              	.LBB1200:
 249:src/int.c     **** 			carry = 1;
 5603              		.loc 1 249 4 is_stmt 1 view .LVU1590
 5604              	.LBB1192:
 5605              	.LBI1192:
  54:src/int.c     **** #ifndef TINY_BUILD
 5606              		.loc 1 54 6 view .LVU1591
 5607              	.LBB1193:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5608              		.loc 1 56 2 view .LVU1592
 5609 0102 FFF7FEFF 		bl	set_carry.part.0
 5610              	.LVL419:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5611              		.loc 1 56 2 is_stmt 0 view .LVU1593
 5612              	.LBE1193:
 5613              	.LBE1192:
 250:src/int.c     **** 		} else {
 5614              		.loc 1 250 4 is_stmt 1 view .LVU1594
 256:src/int.c     **** 		if (carry && mode == MODE_1COMP)
 5615              		.loc 1 256 3 view .LVU1595
 257:src/int.c     **** 			v++;
 5616              		.loc 1 257 3 view .LVU1596
 257:src/int.c     **** 			v++;
 5617              		.loc 1 257 13 is_stmt 0 view .LVU1597
ARM GAS  /tmp/ccjGZi8K.s 			page 151


 5618 0106 BAF1010F 		cmp	r10, #1
 5619 010a D8D1     		bne	.L318
 258:src/int.c     **** 	}
 5620              		.loc 1 258 4 is_stmt 1 view .LVU1598
 258:src/int.c     **** 	}
 5621              		.loc 1 258 5 is_stmt 0 view .LVU1599
 5622 010c 0136     		adds	r6, r6, #1
 5623              	.LVL420:
 258:src/int.c     **** 	}
 5624              		.loc 1 258 5 view .LVU1600
 5625 010e 47F10007 		adc	r7, r7, #0
 5626              	.LVL421:
 258:src/int.c     **** 	}
 5627              		.loc 1 258 5 view .LVU1601
 5628 0112 D4E7     		b	.L318
 5629              	.LVL422:
 5630              	.L337:
 258:src/int.c     **** 	}
 5631              		.loc 1 258 5 view .LVU1602
 5632              	.LBE1200:
 5633              	.LBB1201:
 235:src/int.c     **** 		const long long int x2 = (x & tbm)?-(x ^ tbm):x;
 5634              		.loc 1 235 3 is_stmt 1 view .LVU1603
 5635              	.LBB1158:
 5636              	.LBI1148:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 5637              		.loc 1 110 22 view .LVU1604
 5638              	.LBB1156:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 5639              		.loc 1 111 2 view .LVU1605
 5640              	.LBB1154:
 5641              	.LBI1150:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 5642              		.loc 1 43 14 view .LVU1606
 5643              	.LBB1152:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5644              		.loc 1 44 2 view .LVU1607
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5645              		.loc 1 45 2 view .LVU1608
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5646              		.loc 1 44 26 is_stmt 0 view .LVU1609
 5647 0114 93F8E9A7 		ldrb	r10, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5648              		.loc 1 44 15 view .LVU1610
 5649 0118 0AF03F0A 		and	r10, r10, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5650              		.loc 1 45 26 view .LVU1611
 5651 011c 0AF1FF33 		add	r3, r10, #-1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5652              		.loc 1 45 5 view .LVU1612
 5653 0120 3E2B     		cmp	r3, #62
 5654 0122 52D8     		bhi	.L325
 5655 0124 0121     		movs	r1, #1
 5656 0126 C3F12000 		rsb	r0, r3, #32
 5657 012a AAF1210A 		sub	r10, r10, #33
 5658 012e 01FA0AFA 		lsl	r10, r1, r10
 5659 0132 21FA00F0 		lsr	r0, r1, r0
ARM GAS  /tmp/ccjGZi8K.s 			page 152


 5660 0136 4AEA000A 		orr	r10, r10, r0
 5661 013a 01FA03F3 		lsl	r3, r1, r3
 5662              	.L313:
 5663              	.LVL423:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5664              		.loc 1 45 5 view .LVU1613
 5665              	.LBE1152:
 5666              	.LBE1154:
 112:src/int.c     **** 	return bit;
 5667              		.loc 1 112 2 is_stmt 1 view .LVU1614
 113:src/int.c     **** }
 5668              		.loc 1 113 2 view .LVU1615
 113:src/int.c     **** }
 5669              		.loc 1 113 2 is_stmt 0 view .LVU1616
 5670              	.LBE1156:
 5671              	.LBE1158:
 236:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5672              		.loc 1 236 3 is_stmt 1 view .LVU1617
 236:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5673              		.loc 1 236 31 is_stmt 0 view .LVU1618
 5674 013e 08EA0300 		and	r0, r8, r3
 5675 0142 09EA0A01 		and	r1, r9, r10
 236:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5676              		.loc 1 236 48 view .LVU1619
 5677 0146 0143     		orrs	r1, r0, r1
 5678 0148 07D0     		beq	.L314
 236:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5679              		.loc 1 236 42 discriminator 1 view .LVU1620
 5680 014a 88EA0300 		eor	r0, r8, r3
 5681 014e 89EA0A01 		eor	r1, r9, r10
 236:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5682              		.loc 1 236 48 discriminator 1 view .LVU1621
 5683 0152 D0F10008 		rsbs	r8, r0, #0
 5684 0156 61EB4109 		sbc	r9, r1, r1, lsl #1
 5685              	.L314:
 5686              	.LVL424:
 237:src/int.c     **** 
 5687              		.loc 1 237 3 is_stmt 1 discriminator 4 view .LVU1622
 237:src/int.c     **** 
 5688              		.loc 1 237 31 is_stmt 0 discriminator 4 view .LVU1623
 5689 015a 04EA0300 		and	r0, r4, r3
 5690 015e 05EA0A01 		and	r1, r5, r10
 237:src/int.c     **** 
 5691              		.loc 1 237 48 discriminator 4 view .LVU1624
 5692 0162 0143     		orrs	r1, r0, r1
 5693 0164 06D0     		beq	.L315
 237:src/int.c     **** 
 5694              		.loc 1 237 42 discriminator 1 view .LVU1625
 5695 0166 84EA0300 		eor	r0, r4, r3
 5696 016a 85EA0A01 		eor	r1, r5, r10
 237:src/int.c     **** 
 5697              		.loc 1 237 48 discriminator 1 view .LVU1626
 5698 016e 4442     		rsbs	r4, r0, #0
 5699 0170 61EB4105 		sbc	r5, r1, r1, lsl #1
 5700              	.L315:
 5701              	.LVL425:
 239:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 153


 5702              		.loc 1 239 3 is_stmt 1 discriminator 4 view .LVU1627
 5703              	.LBB1159:
 5704              	.LBI1159:
  54:src/int.c     **** #ifndef TINY_BUILD
 5705              		.loc 1 54 6 discriminator 4 view .LVU1628
 5706              	.LBB1160:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5707              		.loc 1 56 2 discriminator 4 view .LVU1629
 5708 0174 0293     		str	r3, [sp, #8]
 5709              	.LVL426:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5710              		.loc 1 56 5 is_stmt 0 discriminator 4 view .LVU1630
 5711 0176 0ABB     		cbnz	r2, .L339
  59:src/int.c     **** #endif
 5712              		.loc 1 59 3 is_stmt 1 view .LVU1631
 5713 0178 5221     		movs	r1, #82
 5714 017a 6A20     		movs	r0, #106
 5715 017c FFF7FEFF 		bl	cmdflag
 5716              	.LVL427:
 5717 0180 029B     		ldr	r3, [sp, #8]
 5718              	.L317:
  59:src/int.c     **** #endif
 5719              		.loc 1 59 3 is_stmt 0 view .LVU1632
 5720              	.LBE1160:
 5721              	.LBE1159:
 241:src/int.c     **** 		if (v & tbm)
 5722              		.loc 1 241 3 is_stmt 1 view .LVU1633
 241:src/int.c     **** 		if (v & tbm)
 5723              		.loc 1 241 5 is_stmt 0 view .LVU1634
 5724 0182 18EB0406 		adds	r6, r8, r4
 5725 0186 49EB0507 		adc	r7, r9, r5
 5726              	.LVL428:
 242:src/int.c     **** 			v = -v | tbm;
 5727              		.loc 1 242 3 is_stmt 1 view .LVU1635
 242:src/int.c     **** 			v = -v | tbm;
 5728              		.loc 1 242 9 is_stmt 0 view .LVU1636
 5729 018a 06EA0300 		and	r0, r6, r3
 5730 018e 07EA0A01 		and	r1, r7, r10
 242:src/int.c     **** 			v = -v | tbm;
 5731              		.loc 1 242 6 view .LVU1637
 5732 0192 50EA0102 		orrs	r2, r0, r1
 5733 0196 92D0     		beq	.L318
 243:src/int.c     **** 	} else {
 5734              		.loc 1 243 4 is_stmt 1 view .LVU1638
 243:src/int.c     **** 	} else {
 5735              		.loc 1 243 8 is_stmt 0 view .LVU1639
 5736 0198 7042     		rsbs	r0, r6, #0
 5737 019a 67EB4701 		sbc	r1, r7, r7, lsl #1
 243:src/int.c     **** 	} else {
 5738              		.loc 1 243 6 view .LVU1640
 5739 019e 40EA0306 		orr	r6, r0, r3
 5740              	.LVL429:
 243:src/int.c     **** 	} else {
 5741              		.loc 1 243 6 view .LVU1641
 5742 01a2 41EA0A07 		orr	r7, r1, r10
 5743              	.LVL430:
 243:src/int.c     **** 	} else {
ARM GAS  /tmp/ccjGZi8K.s 			page 154


 5744              		.loc 1 243 6 view .LVU1642
 5745 01a6 8AE7     		b	.L318
 5746              	.LVL431:
 5747              	.L336:
 243:src/int.c     **** 	} else {
 5748              		.loc 1 243 6 view .LVU1643
 5749              	.LBE1201:
 230:src/int.c     **** 	else
 5750              		.loc 1 230 3 is_stmt 1 view .LVU1644
 230:src/int.c     **** 	else
 5751              		.loc 1 230 14 is_stmt 0 view .LVU1645
 5752 01a8 CDE900A3 		strd	r10, r3, [sp]
 5753 01ac DDE90201 		ldrd	r0, r1, [sp, #8]
 5754 01b0 DDE90423 		ldrd	r2, r3, [sp, #16]
 5755 01b4 FFF7FEFF 		bl	calc_overflow
 5756              	.LVL432:
 5757 01b8 0246     		mov	r2, r0
 5758              	.LVL433:
 230:src/int.c     **** 	else
 5759              		.loc 1 230 14 view .LVU1646
 5760 01ba 4CE7     		b	.L311
 5761              	.LVL434:
 5762              	.L339:
 5763              	.LBB1202:
 5764              	.LBB1162:
 5765              	.LBB1161:
 230:src/int.c     **** 	else
 5766              		.loc 1 230 14 view .LVU1647
 5767 01bc FFF7FEFF 		bl	set_carry.part.0
 5768              	.LVL435:
 5769 01c0 029B     		ldr	r3, [sp, #8]
 5770 01c2 DEE7     		b	.L317
 5771              	.LVL436:
 5772              	.L319:
 230:src/int.c     **** 	else
 5773              		.loc 1 230 14 view .LVU1648
 5774              	.LBE1161:
 5775              	.LBE1162:
 5776              	.LBE1202:
 5777              	.LBB1203:
 246:src/int.c     **** 
 5778              		.loc 1 246 32 view .LVU1649
 5779 01c4 3046     		mov	r0, r6
 5780 01c6 3946     		mov	r1, r7
 5781              	.LVL437:
 248:src/int.c     **** 			set_carry(1);
 5782              		.loc 1 248 3 is_stmt 1 view .LVU1650
 5783              	.LBB1194:
  92:src/int.c     **** #ifndef TINY_BUILD
 5784              		.loc 1 92 15 view .LVU1651
 5785              	.LBB1184:
  94:src/int.c     **** 	long long int mask;
 5786              		.loc 1 94 2 view .LVU1652
 5787              	.LBE1184:
 5788              	.LBE1194:
 5789              	.LBE1203:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
ARM GAS  /tmp/ccjGZi8K.s 			page 155


 5790              		.loc 1 44 2 view .LVU1653
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5791              		.loc 1 45 2 view .LVU1654
 5792 01c8 71E7     		b	.L323
 5793              	.LVL438:
 5794              	.L325:
 5795              	.LBB1204:
 5796              	.LBB1163:
 5797              	.LBB1157:
 5798              	.LBB1155:
 5799              	.LBB1153:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 5800              		.loc 1 45 2 is_stmt 0 view .LVU1655
 5801 01ca 0023     		movs	r3, #0
 5802 01cc 4FF0004A 		mov	r10, #-2147483648
 5803 01d0 B5E7     		b	.L313
 5804              	.L341:
 5805 01d2 00BF     		.align	2
 5806              	.L340:
 5807 01d4 00000000 		.word	main_ram
 5808              	.LBE1153:
 5809              	.LBE1155:
 5810              	.LBE1157:
 5811              	.LBE1163:
 5812              	.LBE1204:
 5813              		.cfi_endproc
 5814              	.LFE16:
 5816              		.section	.text.intSubtract,"ax",%progbits
 5817              		.align	1
 5818              		.p2align 2,,3
 5819              		.global	intSubtract
 5820              		.syntax unified
 5821              		.thumb
 5822              		.thumb_func
 5823              		.fpu fpv4-sp-d16
 5825              	intSubtract:
 5826              	.LVL439:
 5827              	.LFB17:
 266:src/int.c     **** #ifndef TINY_BUILD
 5828              		.loc 1 266 61 is_stmt 1 view -0
 5829              		.cfi_startproc
 5830              		@ args = 0, pretend = 0, frame = 16
 5831              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 5832              		.loc 1 268 2 view .LVU1657
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5833              		.loc 1 269 2 view .LVU1658
 266:src/int.c     **** #ifndef TINY_BUILD
 5834              		.loc 1 266 61 is_stmt 0 view .LVU1659
 5835 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5836              		.cfi_def_cfa_offset 36
 5837              		.cfi_offset 4, -36
 5838              		.cfi_offset 5, -32
 5839              		.cfi_offset 6, -28
 5840              		.cfi_offset 7, -24
 5841              		.cfi_offset 8, -20
 5842              		.cfi_offset 9, -16
ARM GAS  /tmp/ccjGZi8K.s 			page 156


 5843              		.cfi_offset 10, -12
 5844              		.cfi_offset 11, -8
 5845              		.cfi_offset 14, -4
 5846 0004 87B0     		sub	sp, sp, #28
 5847              		.cfi_def_cfa_offset 64
 266:src/int.c     **** #ifndef TINY_BUILD
 5848              		.loc 1 266 61 view .LVU1660
 5849 0006 0446     		mov	r4, r0
 5850 0008 0D46     		mov	r5, r1
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5851              		.loc 1 269 30 view .LVU1661
 5852 000a 1046     		mov	r0, r2
 5853              	.LVL440:
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5854              		.loc 1 269 30 view .LVU1662
 5855 000c 1946     		mov	r1, r3
 266:src/int.c     **** #ifndef TINY_BUILD
 5856              		.loc 1 266 61 view .LVU1663
 5857 000e 9246     		mov	r10, r2
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5858              		.loc 1 269 30 view .LVU1664
 5859 0010 04AA     		add	r2, sp, #16
 5860              	.LVL441:
 266:src/int.c     **** #ifndef TINY_BUILD
 5861              		.loc 1 266 61 view .LVU1665
 5862 0012 9B46     		mov	fp, r3
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5863              		.loc 1 269 30 view .LVU1666
 5864 0014 FFF7FEFF 		bl	extract_value
 5865              	.LVL442:
 5866 0018 0246     		mov	r2, r0
 5867 001a 0B46     		mov	r3, r1
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5868              		.loc 1 270 30 view .LVU1667
 5869 001c 2046     		mov	r0, r4
 5870 001e 2946     		mov	r1, r5
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5871              		.loc 1 269 30 view .LVU1668
 5872 0020 1646     		mov	r6, r2
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5873              		.loc 1 270 30 view .LVU1669
 5874 0022 05AA     		add	r2, sp, #20
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5875              		.loc 1 269 30 view .LVU1670
 5876 0024 1F46     		mov	r7, r3
 5877              	.LVL443:
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5878              		.loc 1 270 2 is_stmt 1 view .LVU1671
 5879              	.LBB1205:
 5880              	.LBB1206:
  40:src/int.c     **** }
 5881              		.loc 1 40 39 is_stmt 0 view .LVU1672
 5882 0026 DFF89491 		ldr	r9, .L375
 5883              	.LBE1206:
 5884              	.LBE1205:
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5885              		.loc 1 270 30 view .LVU1673
ARM GAS  /tmp/ccjGZi8K.s 			page 157


 5886 002a FFF7FEFF 		bl	extract_value
 5887              	.LVL444:
 5888              	.LBB1211:
 5889              	.LBB1207:
  40:src/int.c     **** }
 5890              		.loc 1 40 39 view .LVU1674
 5891 002e D9F80020 		ldr	r2, [r9]
 5892              	.LBE1207:
 5893              	.LBE1211:
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5894              		.loc 1 270 30 view .LVU1675
 5895 0032 0290     		str	r0, [sp, #8]
 5896 0034 0B46     		mov	r3, r1
 5897              	.LBB1212:
 5898              	.LBB1213:
  72:src/int.c     **** #endif
 5899              		.loc 1 72 3 view .LVU1676
 5900 0036 6920     		movs	r0, #105
 5901 0038 5221     		movs	r1, #82
 5902              	.LBE1213:
 5903              	.LBE1212:
 5904              	.LBB1216:
 5905              	.LBB1208:
  40:src/int.c     **** }
 5906              		.loc 1 40 39 view .LVU1677
 5907 003a 92F8E887 		ldrb	r8, [r2, #2024]	@ zero_extendqisi2
 5908              	.LBE1208:
 5909              	.LBE1216:
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5910              		.loc 1 270 30 view .LVU1678
 5911 003e 0393     		str	r3, [sp, #12]
 5912              	.LVL445:
 271:src/int.c     **** 	long long int v, tbm;
 5913              		.loc 1 271 2 is_stmt 1 view .LVU1679
 5914              	.LBB1217:
 5915              	.LBI1205:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5916              		.loc 1 39 23 view .LVU1680
 5917              	.LBB1209:
  40:src/int.c     **** }
 5918              		.loc 1 40 2 view .LVU1681
 5919              	.LBE1209:
 5920              	.LBE1217:
 5921              	.LBB1218:
 5922              	.LBB1214:
  72:src/int.c     **** #endif
 5923              		.loc 1 72 3 is_stmt 0 view .LVU1682
 5924 0040 FFF7FEFF 		bl	cmdflag
 5925              	.LVL446:
 5926              	.LBE1214:
 5927              	.LBE1218:
 275:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 5928              		.loc 1 275 5 view .LVU1683
 5929 0044 DDE90423 		ldrd	r2, r3, [sp, #16]
 5930 0048 9A42     		cmp	r2, r3
 5931              	.LBB1219:
 5932              	.LBB1210:
ARM GAS  /tmp/ccjGZi8K.s 			page 158


  40:src/int.c     **** }
 5933              		.loc 1 40 9 view .LVU1684
 5934 004a C8F38108 		ubfx	r8, r8, #2, #2
 5935              	.LVL447:
  40:src/int.c     **** }
 5936              		.loc 1 40 9 view .LVU1685
 5937              	.LBE1210:
 5938              	.LBE1219:
 272:src/int.c     **** 
 5939              		.loc 1 272 2 is_stmt 1 view .LVU1686
 274:src/int.c     **** 	if (sx != sy)
 5940              		.loc 1 274 2 view .LVU1687
 5941              	.LBB1220:
 5942              	.LBI1212:
  67:src/int.c     **** #ifndef TINY_BUILD
 5943              		.loc 1 67 6 view .LVU1688
 5944              	.LBB1215:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 5945              		.loc 1 69 2 view .LVU1689
  72:src/int.c     **** #endif
 5946              		.loc 1 72 3 view .LVU1690
  72:src/int.c     **** #endif
 5947              		.loc 1 72 3 is_stmt 0 view .LVU1691
 5948              	.LBE1215:
 5949              	.LBE1220:
 275:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 5950              		.loc 1 275 2 is_stmt 1 view .LVU1692
 275:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 5951              		.loc 1 275 5 is_stmt 0 view .LVU1693
 5952 004e 07D0     		beq	.L343
 276:src/int.c     **** 
 5953              		.loc 1 276 3 is_stmt 1 view .LVU1694
 5954 0050 CDE90083 		strd	r8, r3, [sp]
 5955 0054 3046     		mov	r0, r6
 5956 0056 DDE90223 		ldrd	r2, [sp, #8]
 5957 005a 3946     		mov	r1, r7
 5958 005c FFF7FEFF 		bl	calc_overflow
 5959              	.LVL448:
 5960              	.L343:
 278:src/int.c     **** 		long long int x2, y2;
 5961              		.loc 1 278 2 view .LVU1695
 278:src/int.c     **** 		long long int x2, y2;
 5962              		.loc 1 278 5 is_stmt 0 view .LVU1696
 5963 0060 B8F1030F 		cmp	r8, #3
 5964 0064 3FD0     		beq	.L372
 5965              	.LBB1221:
 291:src/int.c     **** 
 5966              		.loc 1 291 3 is_stmt 1 view .LVU1697
 293:src/int.c     **** 			set_carry(1);
 5967              		.loc 1 293 3 view .LVU1698
 293:src/int.c     **** 			set_carry(1);
 5968              		.loc 1 293 6 is_stmt 0 view .LVU1699
 5969 0066 5D45     		cmp	r5, fp
 5970 0068 08BF     		it	eq
 5971 006a 5445     		cmpeq	r4, r10
 5972 006c 27D3     		bcc	.L373
 299:src/int.c     **** 			borrow = 0;
ARM GAS  /tmp/ccjGZi8K.s 			page 159


 5973              		.loc 1 299 4 is_stmt 1 view .LVU1700
 5974              	.LVL449:
 5975              	.LBB1222:
 5976              	.LBI1222:
  54:src/int.c     **** #ifndef TINY_BUILD
 5977              		.loc 1 54 6 view .LVU1701
 5978              	.LBB1223:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5979              		.loc 1 56 2 view .LVU1702
  59:src/int.c     **** #endif
 5980              		.loc 1 59 3 view .LVU1703
 5981 006e 5221     		movs	r1, #82
 5982 0070 6A20     		movs	r0, #106
 5983 0072 FFF7FEFF 		bl	cmdflag
 5984              	.LVL450:
 5985              	.L371:
  59:src/int.c     **** #endif
 5986              		.loc 1 59 3 is_stmt 0 view .LVU1704
 5987              	.LBE1223:
 5988              	.LBE1222:
 300:src/int.c     **** 		}
 5989              		.loc 1 300 4 is_stmt 1 view .LVU1705
 303:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 5990              		.loc 1 303 3 view .LVU1706
 5991 0076 D9F80030 		ldr	r3, [r9]
 5992 007a 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 303:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 5993              		.loc 1 303 5 is_stmt 0 view .LVU1707
 5994 007e B4EB0A00 		subs	r0, r4, r10
 5995 0082 03F03F03 		and	r3, r3, #63
 5996 0086 03F1FF37 		add	r7, r3, #-1
 5997 008a 65EB0B01 		sbc	r1, r5, fp
 5998              	.LVL451:
 304:src/int.c     **** 			v--;
 5999              		.loc 1 304 3 is_stmt 1 view .LVU1708
 6000              	.L352:
 304:src/int.c     **** 			v--;
 6001              		.loc 1 304 3 is_stmt 0 view .LVU1709
 6002              	.LBE1221:
 307:src/int.c     **** #else
 6003              		.loc 1 307 2 is_stmt 1 view .LVU1710
 6004              	.LBB1228:
 6005              	.LBI1228:
  92:src/int.c     **** #ifndef TINY_BUILD
 6006              		.loc 1 92 15 view .LVU1711
 6007              	.LBB1229:
  94:src/int.c     **** 	long long int mask;
 6008              		.loc 1 94 2 view .LVU1712
 6009              	.LBB1230:
 6010              	.LBI1230:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 6011              		.loc 1 43 14 view .LVU1713
 6012              	.LBB1231:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6013              		.loc 1 44 2 view .LVU1714
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6014              		.loc 1 45 2 view .LVU1715
ARM GAS  /tmp/ccjGZi8K.s 			page 160


  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6015              		.loc 1 45 5 is_stmt 0 view .LVU1716
 6016 008e 3E2F     		cmp	r7, #62
 6017 0090 12D8     		bhi	.L342
 6018              	.LVL452:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6019              		.loc 1 45 5 view .LVU1717
 6020              	.LBE1231:
 6021              	.LBE1230:
  95:src/int.c     **** 
 6022              		.loc 1 95 2 is_stmt 1 view .LVU1718
  97:src/int.c     **** 		return v;
 6023              		.loc 1 97 2 view .LVU1719
  99:src/int.c     **** 	return v & mask;
 6024              		.loc 1 99 2 view .LVU1720
 100:src/int.c     **** #else
 6025              		.loc 1 100 2 view .LVU1721
  99:src/int.c     **** 	return v & mask;
 6026              		.loc 1 99 14 is_stmt 0 view .LVU1722
 6027 0092 0122     		movs	r2, #1
 6028 0094 A3F12004 		sub	r4, r3, #32
 6029 0098 C3F12005 		rsb	r5, r3, #32
 6030 009c 02FA04F4 		lsl	r4, r2, r4
 6031 00a0 22FA05F5 		lsr	r5, r2, r5
 6032 00a4 02FA03F3 		lsl	r3, r2, r3
 6033              	.LVL453:
  99:src/int.c     **** 	return v & mask;
 6034              		.loc 1 99 7 view .LVU1723
 6035 00a8 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 6036              		.loc 1 99 14 view .LVU1724
 6037 00ac 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 6038              		.loc 1 99 7 view .LVU1725
 6039 00b0 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 6040              		.loc 1 100 11 view .LVU1726
 6041 00b4 2140     		ands	r1, r1, r4
 6042              	.LVL454:
 100:src/int.c     **** #else
 6043              		.loc 1 100 11 view .LVU1727
 6044 00b6 1840     		ands	r0, r0, r3
 6045              	.LVL455:
 6046              	.L342:
 100:src/int.c     **** #else
 6047              		.loc 1 100 11 view .LVU1728
 6048              	.LBE1229:
 6049              	.LBE1228:
 311:src/int.c     **** 
 6050              		.loc 1 311 1 view .LVU1729
 6051 00b8 07B0     		add	sp, sp, #28
 6052              		.cfi_remember_state
 6053              		.cfi_def_cfa_offset 36
 6054              		@ sp needed
 6055 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6056              	.LVL456:
 6057              	.L373:
ARM GAS  /tmp/ccjGZi8K.s 			page 161


 6058              		.cfi_restore_state
 6059              	.LBB1232:
 294:src/int.c     **** 			if (mode == MODE_UNSIGNED)
 6060              		.loc 1 294 4 is_stmt 1 view .LVU1730
 6061              	.LBB1224:
 6062              	.LBI1224:
  54:src/int.c     **** #ifndef TINY_BUILD
 6063              		.loc 1 54 6 view .LVU1731
 6064              	.LBB1225:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6065              		.loc 1 56 2 view .LVU1732
 6066 00be FFF7FEFF 		bl	set_carry.part.0
 6067              	.LVL457:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6068              		.loc 1 56 2 is_stmt 0 view .LVU1733
 6069              	.LBE1225:
 6070              	.LBE1224:
 295:src/int.c     **** 				set_overflow(1);
 6071              		.loc 1 295 4 is_stmt 1 view .LVU1734
 295:src/int.c     **** 				set_overflow(1);
 6072              		.loc 1 295 7 is_stmt 0 view .LVU1735
 6073 00c2 B8F1020F 		cmp	r8, #2
 6074 00c6 76D0     		beq	.L374
 297:src/int.c     **** 		} else {
 6075              		.loc 1 297 4 is_stmt 1 view .LVU1736
 6076              	.LVL458:
 303:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 6077              		.loc 1 303 3 view .LVU1737
 303:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 6078              		.loc 1 303 5 is_stmt 0 view .LVU1738
 6079 00c8 B4EB0A00 		subs	r0, r4, r10
 6080 00cc D9F80030 		ldr	r3, [r9]
 6081 00d0 65EB0B01 		sbc	r1, r5, fp
 6082              	.LVL459:
 304:src/int.c     **** 			v--;
 6083              		.loc 1 304 3 is_stmt 1 view .LVU1739
 304:src/int.c     **** 			v--;
 6084              		.loc 1 304 14 is_stmt 0 view .LVU1740
 6085 00d4 B8F1010F 		cmp	r8, #1
 6086 00d8 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 6087 00dc 5FD0     		beq	.L355
 6088 00de 03F03F03 		and	r3, r3, #63
 6089 00e2 5F1E     		subs	r7, r3, #1
 6090 00e4 D3E7     		b	.L352
 6091              	.LVL460:
 6092              	.L372:
 304:src/int.c     **** 			v--;
 6093              		.loc 1 304 14 view .LVU1741
 6094              	.LBE1232:
 6095              	.LBB1233:
 279:src/int.c     **** 		set_carry((sx == 0 && sy == 0 && xv > yv) ||
 6096              		.loc 1 279 3 is_stmt 1 view .LVU1742
 280:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 6097              		.loc 1 280 3 view .LVU1743
 6098 00e6 049B     		ldr	r3, [sp, #16]
 6099 00e8 002B     		cmp	r3, #0
 6100 00ea 4CD1     		bne	.L345
ARM GAS  /tmp/ccjGZi8K.s 			page 162


 280:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 6101              		.loc 1 280 22 is_stmt 0 discriminator 1 view .LVU1744
 6102 00ec 059B     		ldr	r3, [sp, #20]
 6103 00ee 2BB9     		cbnz	r3, .L346
 280:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 6104              		.loc 1 280 33 discriminator 3 view .LVU1745
 6105 00f0 DDE90223 		ldrd	r2, [sp, #8]
 6106 00f4 BB42     		cmp	r3, r7
 6107 00f6 08BF     		it	eq
 6108 00f8 B242     		cmpeq	r2, r6
 6109 00fa 4DD3     		bcc	.L347
 6110              	.L346:
 6111              	.LVL461:
 6112              	.LBB1234:
 6113              	.LBI1234:
  54:src/int.c     **** #ifndef TINY_BUILD
 6114              		.loc 1 54 6 is_stmt 1 view .LVU1746
 6115              	.LBB1235:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6116              		.loc 1 56 2 view .LVU1747
  59:src/int.c     **** #endif
 6117              		.loc 1 59 3 view .LVU1748
 6118 00fc 5221     		movs	r1, #82
 6119 00fe 6A20     		movs	r0, #106
 6120 0100 FFF7FEFF 		bl	cmdflag
 6121              	.LVL462:
 6122              	.L348:
  59:src/int.c     **** #endif
 6123              		.loc 1 59 3 is_stmt 0 view .LVU1749
 6124              	.LBE1235:
 6125              	.LBE1234:
 283:src/int.c     **** 		x2 = (x & tbm)?-(x ^ tbm):x;
 6126              		.loc 1 283 3 is_stmt 1 view .LVU1750
 6127              	.LBB1237:
 6128              	.LBI1237:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 6129              		.loc 1 110 22 view .LVU1751
 6130              	.LBB1238:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 6131              		.loc 1 111 2 view .LVU1752
 6132              	.LBB1239:
 6133              	.LBI1239:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 6134              		.loc 1 43 14 view .LVU1753
 6135              	.LBB1240:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6136              		.loc 1 44 2 view .LVU1754
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6137              		.loc 1 44 26 is_stmt 0 view .LVU1755
 6138 0104 D9F80030 		ldr	r3, [r9]
 6139 0108 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6140              		.loc 1 44 15 view .LVU1756
 6141 010c 03F03F03 		and	r3, r3, #63
 6142              	.LVL463:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6143              		.loc 1 45 2 is_stmt 1 view .LVU1757
ARM GAS  /tmp/ccjGZi8K.s 			page 163


  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6144              		.loc 1 45 26 is_stmt 0 view .LVU1758
 6145 0110 5F1E     		subs	r7, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6146              		.loc 1 45 5 view .LVU1759
 6147 0112 3E2F     		cmp	r7, #62
 6148 0114 4BD8     		bhi	.L357
 6149 0116 0126     		movs	r6, #1
 6150              	.LVL464:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6151              		.loc 1 45 5 view .LVU1760
 6152 0118 A3F12102 		sub	r2, r3, #33
 6153 011c C7F12001 		rsb	r1, r7, #32
 6154 0120 06FA02F2 		lsl	r2, r6, r2
 6155 0124 26FA01F1 		lsr	r1, r6, r1
 6156 0128 0A43     		orrs	r2, r2, r1
 6157 012a BE40     		lsls	r6, r6, r7
 6158              	.L349:
 6159              	.LVL465:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6160              		.loc 1 45 5 view .LVU1761
 6161              	.LBE1240:
 6162              	.LBE1239:
 112:src/int.c     **** 	return bit;
 6163              		.loc 1 112 2 is_stmt 1 view .LVU1762
 113:src/int.c     **** }
 6164              		.loc 1 113 2 view .LVU1763
 113:src/int.c     **** }
 6165              		.loc 1 113 2 is_stmt 0 view .LVU1764
 6166              	.LBE1238:
 6167              	.LBE1237:
 284:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6168              		.loc 1 284 3 is_stmt 1 view .LVU1765
 284:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6169              		.loc 1 284 11 is_stmt 0 view .LVU1766
 6170 012c 0AEA0600 		and	r0, r10, r6
 6171 0130 0BEA0201 		and	r1, fp, r2
 284:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6172              		.loc 1 284 28 view .LVU1767
 6173 0134 0143     		orrs	r1, r0, r1
 6174 0136 07D0     		beq	.L350
 284:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6175              		.loc 1 284 22 discriminator 1 view .LVU1768
 6176 0138 8AEA0600 		eor	r0, r10, r6
 6177 013c 8BEA0201 		eor	r1, fp, r2
 284:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6178              		.loc 1 284 28 discriminator 1 view .LVU1769
 6179 0140 D0F1000A 		rsbs	r10, r0, #0
 6180 0144 61EB410B 		sbc	fp, r1, r1, lsl #1
 6181              	.L350:
 6182              	.LVL466:
 285:src/int.c     **** 
 6183              		.loc 1 285 3 is_stmt 1 discriminator 4 view .LVU1770
 285:src/int.c     **** 
 6184              		.loc 1 285 11 is_stmt 0 discriminator 4 view .LVU1771
 6185 0148 04EA0600 		and	r0, r4, r6
 6186 014c 05EA0201 		and	r1, r5, r2
ARM GAS  /tmp/ccjGZi8K.s 			page 164


 285:src/int.c     **** 
 6187              		.loc 1 285 28 discriminator 4 view .LVU1772
 6188 0150 0143     		orrs	r1, r0, r1
 6189 0152 06D0     		beq	.L351
 285:src/int.c     **** 
 6190              		.loc 1 285 22 discriminator 1 view .LVU1773
 6191 0154 84EA0600 		eor	r0, r4, r6
 6192 0158 85EA0201 		eor	r1, r5, r2
 285:src/int.c     **** 
 6193              		.loc 1 285 28 discriminator 1 view .LVU1774
 6194 015c 4442     		rsbs	r4, r0, #0
 6195 015e 61EB4105 		sbc	r5, r1, r1, lsl #1
 6196              	.L351:
 6197              	.LVL467:
 287:src/int.c     **** 		if (v & tbm)
 6198              		.loc 1 287 3 is_stmt 1 discriminator 4 view .LVU1775
 287:src/int.c     **** 		if (v & tbm)
 6199              		.loc 1 287 5 is_stmt 0 discriminator 4 view .LVU1776
 6200 0162 B4EB0A00 		subs	r0, r4, r10
 6201 0166 65EB0B01 		sbc	r1, r5, fp
 6202              	.LVL468:
 288:src/int.c     **** 			v = -v | tbm;
 6203              		.loc 1 288 3 is_stmt 1 discriminator 4 view .LVU1777
 288:src/int.c     **** 			v = -v | tbm;
 6204              		.loc 1 288 9 is_stmt 0 discriminator 4 view .LVU1778
 6205 016a 00EA0608 		and	r8, r0, r6
 6206 016e 01EA0209 		and	r9, r1, r2
 288:src/int.c     **** 			v = -v | tbm;
 6207              		.loc 1 288 6 discriminator 4 view .LVU1779
 6208 0172 58EA090C 		orrs	ip, r8, r9
 6209 0176 8AD0     		beq	.L352
 289:src/int.c     **** 	} else {
 6210              		.loc 1 289 4 is_stmt 1 view .LVU1780
 289:src/int.c     **** 	} else {
 6211              		.loc 1 289 8 is_stmt 0 view .LVU1781
 6212 0178 BAEB0400 		subs	r0, r10, r4
 6213              	.LVL469:
 289:src/int.c     **** 	} else {
 6214              		.loc 1 289 8 view .LVU1782
 6215 017c 6BEB0501 		sbc	r1, fp, r5
 6216              	.LVL470:
 289:src/int.c     **** 	} else {
 6217              		.loc 1 289 6 view .LVU1783
 6218 0180 1143     		orrs	r1, r1, r2
 6219 0182 3043     		orrs	r0, r0, r6
 6220              	.LVL471:
 289:src/int.c     **** 	} else {
 6221              		.loc 1 289 6 view .LVU1784
 6222 0184 83E7     		b	.L352
 6223              	.LVL472:
 6224              	.L345:
 281:src/int.c     **** 
 6225              		.loc 1 281 14 view .LVU1785
 6226 0186 059B     		ldr	r3, [sp, #20]
 6227 0188 002B     		cmp	r3, #0
 6228 018a B7D0     		beq	.L346
 281:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 165


 6229              		.loc 1 281 25 discriminator 1 view .LVU1786
 6230 018c DDE90223 		ldrd	r2, [sp, #8]
 6231 0190 9F42     		cmp	r7, r3
 6232 0192 08BF     		it	eq
 6233 0194 9642     		cmpeq	r6, r2
 6234 0196 B1D2     		bcs	.L346
 6235              	.L347:
 6236              	.LBB1244:
 6237              	.LBB1236:
 6238 0198 FFF7FEFF 		bl	set_carry.part.0
 6239              	.LVL473:
 6240 019c B2E7     		b	.L348
 6241              	.LVL474:
 6242              	.L355:
 281:src/int.c     **** 
 6243              		.loc 1 281 25 discriminator 1 view .LVU1787
 6244              	.LBE1236:
 6245              	.LBE1244:
 6246              	.LBE1233:
 6247              	.LBB1246:
 305:src/int.c     **** 	}
 6248              		.loc 1 305 4 is_stmt 1 view .LVU1788
 305:src/int.c     **** 	}
 6249              		.loc 1 305 5 is_stmt 0 view .LVU1789
 6250 019e 10F1FF30 		adds	r0, r0, #-1
 6251              	.LVL475:
 305:src/int.c     **** 	}
 6252              		.loc 1 305 5 view .LVU1790
 6253 01a2 03F03F03 		and	r3, r3, #63
 6254 01a6 41F1FF31 		adc	r1, r1, #-1
 6255              	.LVL476:
 305:src/int.c     **** 	}
 6256              		.loc 1 305 5 view .LVU1791
 6257 01aa 5F1E     		subs	r7, r3, #1
 6258 01ac 6FE7     		b	.L352
 6259              	.LVL477:
 6260              	.L357:
 305:src/int.c     **** 	}
 6261              		.loc 1 305 5 view .LVU1792
 6262              	.LBE1246:
 6263              	.LBB1247:
 6264              	.LBB1245:
 6265              	.LBB1243:
 6266              	.LBB1242:
 6267              	.LBB1241:
 6268 01ae 0026     		movs	r6, #0
 6269              	.LVL478:
 305:src/int.c     **** 	}
 6270              		.loc 1 305 5 view .LVU1793
 6271 01b0 4FF00042 		mov	r2, #-2147483648
 6272 01b4 BAE7     		b	.L349
 6273              	.LVL479:
 6274              	.L374:
 305:src/int.c     **** 	}
 6275              		.loc 1 305 5 view .LVU1794
 6276              	.LBE1241:
 6277              	.LBE1242:
ARM GAS  /tmp/ccjGZi8K.s 			page 166


 6278              	.LBE1243:
 6279              	.LBE1245:
 6280              	.LBE1247:
 6281              	.LBB1248:
 296:src/int.c     **** 			borrow = 1;
 6282              		.loc 1 296 5 is_stmt 1 view .LVU1795
 6283              	.LBB1226:
 6284              	.LBI1226:
  67:src/int.c     **** #ifndef TINY_BUILD
 6285              		.loc 1 67 6 view .LVU1796
 6286              	.LBB1227:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6287              		.loc 1 69 2 view .LVU1797
 6288 01b6 FFF7FEFF 		bl	set_overflow.part.0
 6289              	.LVL480:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6290              		.loc 1 69 2 is_stmt 0 view .LVU1798
 6291              	.LBE1227:
 6292              	.LBE1226:
 297:src/int.c     **** 		} else {
 6293              		.loc 1 297 4 is_stmt 1 view .LVU1799
 303:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 6294              		.loc 1 303 3 view .LVU1800
 6295 01ba 5CE7     		b	.L371
 6296              	.L376:
 6297              		.align	2
 6298              	.L375:
 6299 01bc 00000000 		.word	main_ram
 6300              	.LBE1248:
 6301              		.cfi_endproc
 6302              	.LFE17:
 6304              		.section	.text.intMultiply,"ax",%progbits
 6305              		.align	1
 6306              		.p2align 2,,3
 6307              		.global	intMultiply
 6308              		.syntax unified
 6309              		.thumb
 6310              		.thumb_func
 6311              		.fpu fpv4-sp-d16
 6313              	intMultiply:
 6314              	.LVL481:
 6315              	.LFB19:
 326:src/int.c     **** #ifndef TINY_BUILD
 6316              		.loc 1 326 61 view -0
 6317              		.cfi_startproc
 6318              		@ args = 0, pretend = 0, frame = 16
 6319              		@ frame_needed = 0, uses_anonymous_args = 0
 328:src/int.c     **** 	int sx, sy;
 6320              		.loc 1 328 2 view .LVU1802
 329:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 6321              		.loc 1 329 2 view .LVU1803
 330:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6322              		.loc 1 330 2 view .LVU1804
 326:src/int.c     **** #ifndef TINY_BUILD
 6323              		.loc 1 326 61 is_stmt 0 view .LVU1805
 6324 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6325              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccjGZi8K.s 			page 167


 6326              		.cfi_offset 4, -20
 6327              		.cfi_offset 5, -16
 6328              		.cfi_offset 6, -12
 6329              		.cfi_offset 7, -8
 6330              		.cfi_offset 14, -4
 6331 0002 87B0     		sub	sp, sp, #28
 6332              		.cfi_def_cfa_offset 48
 326:src/int.c     **** #ifndef TINY_BUILD
 6333              		.loc 1 326 61 view .LVU1806
 6334 0004 0E46     		mov	r6, r1
 6335 0006 0746     		mov	r7, r0
 330:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6336              		.loc 1 330 30 view .LVU1807
 6337 0008 1946     		mov	r1, r3
 6338 000a 1046     		mov	r0, r2
 6339              	.LVL482:
 330:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6340              		.loc 1 330 30 view .LVU1808
 6341 000c 03AA     		add	r2, sp, #12
 6342              	.LVL483:
 330:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6343              		.loc 1 330 30 view .LVU1809
 6344 000e FFF7FEFF 		bl	extract_value
 6345              	.LVL484:
 331:src/int.c     **** 	int overflow = 0;
 6346              		.loc 1 331 30 view .LVU1810
 6347 0012 04AA     		add	r2, sp, #16
 330:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6348              		.loc 1 330 30 view .LVU1811
 6349 0014 0546     		mov	r5, r0
 6350 0016 0C46     		mov	r4, r1
 6351              	.LVL485:
 331:src/int.c     **** 	int overflow = 0;
 6352              		.loc 1 331 2 is_stmt 1 view .LVU1812
 331:src/int.c     **** 	int overflow = 0;
 6353              		.loc 1 331 30 is_stmt 0 view .LVU1813
 6354 0018 3846     		mov	r0, r7
 6355              	.LVL486:
 331:src/int.c     **** 	int overflow = 0;
 6356              		.loc 1 331 30 view .LVU1814
 6357 001a 3146     		mov	r1, r6
 6358              	.LVL487:
 331:src/int.c     **** 	int overflow = 0;
 6359              		.loc 1 331 30 view .LVU1815
 6360 001c FFF7FEFF 		bl	extract_value
 6361              	.LVL488:
 334:src/int.c     **** 	set_overflow(overflow);
 6362              		.loc 1 334 6 view .LVU1816
 6363 0020 05AE     		add	r6, sp, #20
 331:src/int.c     **** 	int overflow = 0;
 6364              		.loc 1 331 30 view .LVU1817
 6365 0022 0B46     		mov	r3, r1
 6366 0024 0246     		mov	r2, r0
 6367              	.LVL489:
 332:src/int.c     **** 
 6368              		.loc 1 332 2 is_stmt 1 view .LVU1818
 334:src/int.c     **** 	set_overflow(overflow);
ARM GAS  /tmp/ccjGZi8K.s 			page 168


 6369              		.loc 1 334 6 is_stmt 0 view .LVU1819
 6370 0026 2146     		mov	r1, r4
 6371 0028 2846     		mov	r0, r5
 332:src/int.c     **** 
 6372              		.loc 1 332 6 view .LVU1820
 6373 002a 0024     		movs	r4, #0
 6374              	.LVL490:
 334:src/int.c     **** 	set_overflow(overflow);
 6375              		.loc 1 334 6 view .LVU1821
 6376 002c 0096     		str	r6, [sp]
 332:src/int.c     **** 
 6377              		.loc 1 332 6 view .LVU1822
 6378 002e 0594     		str	r4, [sp, #20]
 334:src/int.c     **** 	set_overflow(overflow);
 6379              		.loc 1 334 2 is_stmt 1 view .LVU1823
 334:src/int.c     **** 	set_overflow(overflow);
 6380              		.loc 1 334 6 is_stmt 0 view .LVU1824
 6381 0030 FFF7FEFF 		bl	multiply_with_overflow
 6382              	.LVL491:
 6383              	.LBB1249:
 6384              	.LBB1250:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6385              		.loc 1 69 5 view .LVU1825
 6386 0034 059B     		ldr	r3, [sp, #20]
 6387              	.LBE1250:
 6388              	.LBE1249:
 334:src/int.c     **** 	set_overflow(overflow);
 6389              		.loc 1 334 6 view .LVU1826
 6390 0036 0C46     		mov	r4, r1
 6391 0038 0546     		mov	r5, r0
 6392              	.LVL492:
 335:src/int.c     **** 
 6393              		.loc 1 335 2 is_stmt 1 view .LVU1827
 6394              	.LBB1253:
 6395              	.LBI1249:
  67:src/int.c     **** #ifndef TINY_BUILD
 6396              		.loc 1 67 6 view .LVU1828
 6397              	.LBB1251:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6398              		.loc 1 69 2 view .LVU1829
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6399              		.loc 1 69 5 is_stmt 0 view .LVU1830
 6400 003a 2BB3     		cbz	r3, .L378
 6401 003c FFF7FEFF 		bl	set_overflow.part.0
 6402              	.LVL493:
 6403              	.L379:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6404              		.loc 1 69 5 view .LVU1831
 6405              	.LBE1251:
 6406              	.LBE1253:
 337:src/int.c     **** 		return u;
 6407              		.loc 1 337 2 is_stmt 1 view .LVU1832
 6408              	.LBB1254:
 6409              	.LBI1254:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 6410              		.loc 1 39 23 view .LVU1833
 6411              	.LBB1255:
ARM GAS  /tmp/ccjGZi8K.s 			page 169


  40:src/int.c     **** }
 6412              		.loc 1 40 2 view .LVU1834
  40:src/int.c     **** }
 6413              		.loc 1 40 33 is_stmt 0 view .LVU1835
 6414 0040 184B     		ldr	r3, .L386
 6415 0042 1A68     		ldr	r2, [r3]
  40:src/int.c     **** }
 6416              		.loc 1 40 39 view .LVU1836
 6417 0044 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 6418              	.LBE1255:
 6419              	.LBE1254:
 337:src/int.c     **** 		return u;
 6420              		.loc 1 337 5 view .LVU1837
 6421 0048 C3F38103 		ubfx	r3, r3, #2, #2
 6422 004c 022B     		cmp	r3, #2
 6423 004e 20D0     		beq	.L385
 339:src/int.c     **** #else
 6424              		.loc 1 339 2 is_stmt 1 view .LVU1838
 6425              	.LBB1256:
 6426              	.LBI1256:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 6427              		.loc 1 110 22 view .LVU1839
 6428              	.LBB1257:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 6429              		.loc 1 111 2 view .LVU1840
 6430              	.LBB1258:
 6431              	.LBI1258:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 6432              		.loc 1 43 14 view .LVU1841
 6433              	.LBB1259:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6434              		.loc 1 44 2 view .LVU1842
 6435              	.LVL494:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6436              		.loc 1 45 2 view .LVU1843
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6437              		.loc 1 44 26 is_stmt 0 view .LVU1844
 6438 0050 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 6439              	.LVL495:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6440              		.loc 1 44 15 view .LVU1845
 6441 0054 03F03F03 		and	r3, r3, #63
 6442              	.LVL496:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6443              		.loc 1 45 26 view .LVU1846
 6444 0058 5A1E     		subs	r2, r3, #1
 6445              	.LVL497:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6446              		.loc 1 45 5 view .LVU1847
 6447 005a 3E2A     		cmp	r2, #62
 6448 005c 1DD8     		bhi	.L383
 6449 005e 0120     		movs	r0, #1
 6450 0060 213B     		subs	r3, r3, #33
 6451 0062 C2F12001 		rsb	r1, r2, #32
 6452 0066 20FA01F1 		lsr	r1, r0, r1
 6453 006a 00FA03F3 		lsl	r3, r0, r3
 6454 006e 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccjGZi8K.s 			page 170


 6455 0070 9040     		lsls	r0, r0, r2
 6456 0072 D943     		mvns	r1, r3
 6457 0074 C043     		mvns	r0, r0
 6458              	.L382:
 6459              	.LVL498:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6460              		.loc 1 45 5 view .LVU1848
 6461              	.LBE1259:
 6462              	.LBE1258:
 112:src/int.c     **** 	return bit;
 6463              		.loc 1 112 2 is_stmt 1 view .LVU1849
 113:src/int.c     **** }
 6464              		.loc 1 113 2 view .LVU1850
 113:src/int.c     **** }
 6465              		.loc 1 113 2 is_stmt 0 view .LVU1851
 6466              	.LBE1257:
 6467              	.LBE1256:
 339:src/int.c     **** #else
 6468              		.loc 1 339 9 view .LVU1852
 6469 0076 DDE90362 		ldrd	r6, r2, [sp, #12]
 6470 007a 2840     		ands	r0, r0, r5
 6471 007c 2140     		ands	r1, r1, r4
 6472 007e 7240     		eors	r2, r2, r6
 6473 0080 FFF7FEFF 		bl	build_value
 6474              	.LVL499:
 343:src/int.c     **** 
 6475              		.loc 1 343 1 view .LVU1853
 6476 0084 07B0     		add	sp, sp, #28
 6477              		.cfi_remember_state
 6478              		.cfi_def_cfa_offset 20
 6479              		@ sp needed
 6480 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 6481              	.LVL500:
 6482              	.L378:
 6483              		.cfi_restore_state
 6484              	.LBB1263:
 6485              	.LBB1252:
  72:src/int.c     **** #endif
 6486              		.loc 1 72 3 is_stmt 1 view .LVU1854
 6487 0088 5221     		movs	r1, #82
 6488              	.LVL501:
  72:src/int.c     **** #endif
 6489              		.loc 1 72 3 is_stmt 0 view .LVU1855
 6490 008a 6920     		movs	r0, #105
 6491              	.LVL502:
  72:src/int.c     **** #endif
 6492              		.loc 1 72 3 view .LVU1856
 6493 008c FFF7FEFF 		bl	cmdflag
 6494              	.LVL503:
  72:src/int.c     **** #endif
 6495              		.loc 1 72 3 view .LVU1857
 6496 0090 D6E7     		b	.L379
 6497              	.L385:
  72:src/int.c     **** #endif
 6498              		.loc 1 72 3 view .LVU1858
 6499              	.LBE1252:
 6500              	.LBE1263:
ARM GAS  /tmp/ccjGZi8K.s 			page 171


 338:src/int.c     **** 	return build_value(u & ~topbit_mask(), sx ^ sy);
 6501              		.loc 1 338 3 is_stmt 1 view .LVU1859
 338:src/int.c     **** 	return build_value(u & ~topbit_mask(), sx ^ sy);
 6502              		.loc 1 338 10 is_stmt 0 view .LVU1860
 6503 0092 2846     		mov	r0, r5
 6504 0094 2146     		mov	r1, r4
 343:src/int.c     **** 
 6505              		.loc 1 343 1 view .LVU1861
 6506 0096 07B0     		add	sp, sp, #28
 6507              		.cfi_remember_state
 6508              		.cfi_def_cfa_offset 20
 6509              		@ sp needed
 6510 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 6511              	.LVL504:
 6512              	.L383:
 6513              		.cfi_restore_state
 6514              	.LBB1264:
 6515              	.LBB1262:
 6516              	.LBB1261:
 6517              	.LBB1260:
 343:src/int.c     **** 
 6518              		.loc 1 343 1 view .LVU1862
 6519 009a 4FF0FF30 		mov	r0, #-1
 6520 009e 6FF00041 		mvn	r1, #-2147483648
 6521 00a2 E8E7     		b	.L382
 6522              	.L387:
 6523              		.align	2
 6524              	.L386:
 6525 00a4 00000000 		.word	main_ram
 6526              	.LBE1260:
 6527              	.LBE1261:
 6528              	.LBE1262:
 6529              	.LBE1264:
 6530              		.cfi_endproc
 6531              	.LFE19:
 6533              		.section	.text.intDivide,"ax",%progbits
 6534              		.align	1
 6535              		.p2align 2,,3
 6536              		.global	intDivide
 6537              		.syntax unified
 6538              		.thumb
 6539              		.thumb_func
 6540              		.fpu fpv4-sp-d16
 6542              	intDivide:
 6543              	.LVL505:
 6544              	.LFB21:
 356:src/int.c     **** #ifndef TINY_BUILD
 6545              		.loc 1 356 59 is_stmt 1 view -0
 6546              		.cfi_startproc
 6547              		@ args = 0, pretend = 0, frame = 16
 6548              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/int.c     **** 	int sx, sy;
 6549              		.loc 1 358 2 view .LVU1864
 6550              	.LBB1287:
 6551              	.LBI1287:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 6552              		.loc 1 39 23 view .LVU1865
ARM GAS  /tmp/ccjGZi8K.s 			page 172


 6553              	.LBB1288:
  40:src/int.c     **** }
 6554              		.loc 1 40 2 view .LVU1866
 6555              	.LBE1288:
 6556              	.LBE1287:
 356:src/int.c     **** #ifndef TINY_BUILD
 6557              		.loc 1 356 59 is_stmt 0 view .LVU1867
 6558 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6559              		.cfi_def_cfa_offset 36
 6560              		.cfi_offset 4, -36
 6561              		.cfi_offset 5, -32
 6562              		.cfi_offset 6, -28
 6563              		.cfi_offset 7, -24
 6564              		.cfi_offset 8, -20
 6565              		.cfi_offset 9, -16
 6566              		.cfi_offset 10, -12
 6567              		.cfi_offset 11, -8
 6568              		.cfi_offset 14, -4
 6569              	.LBB1293:
 6570              	.LBB1289:
  40:src/int.c     **** }
 6571              		.loc 1 40 39 view .LVU1868
 6572 0004 DFF870B1 		ldr	fp, .L412
 6573 0008 DBF80040 		ldr	r4, [fp]
 6574              	.LBE1289:
 6575              	.LBE1293:
 356:src/int.c     **** #ifndef TINY_BUILD
 6576              		.loc 1 356 59 view .LVU1869
 6577 000c 1F46     		mov	r7, r3
 6578              	.LBB1294:
 6579              	.LBB1290:
  40:src/int.c     **** }
 6580              		.loc 1 40 39 view .LVU1870
 6581 000e 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
 6582              	.LBE1290:
 6583              	.LBE1294:
 356:src/int.c     **** #ifndef TINY_BUILD
 6584              		.loc 1 356 59 view .LVU1871
 6585 0012 85B0     		sub	sp, sp, #20
 6586              		.cfi_def_cfa_offset 56
 6587              	.LBB1295:
 6588              	.LBB1291:
  40:src/int.c     **** }
 6589              		.loc 1 40 39 view .LVU1872
 6590 0014 C3F38103 		ubfx	r3, r3, #2, #2
 6591              	.LBE1291:
 6592              	.LBE1295:
 356:src/int.c     **** #ifndef TINY_BUILD
 6593              		.loc 1 356 59 view .LVU1873
 6594 0018 8046     		mov	r8, r0
 6595 001a 8946     		mov	r9, r1
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6596              		.loc 1 360 30 view .LVU1874
 6597 001c 1046     		mov	r0, r2
 6598              	.LVL506:
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6599              		.loc 1 360 30 view .LVU1875
ARM GAS  /tmp/ccjGZi8K.s 			page 173


 6600 001e 3946     		mov	r1, r7
 6601 0020 02AA     		add	r2, sp, #8
 6602              	.LVL507:
 6603              	.LBB1296:
 6604              	.LBB1292:
  40:src/int.c     **** }
 6605              		.loc 1 40 39 view .LVU1876
 6606 0022 0193     		str	r3, [sp, #4]
 6607              	.LVL508:
  40:src/int.c     **** }
 6608              		.loc 1 40 39 view .LVU1877
 6609              	.LBE1292:
 6610              	.LBE1296:
 359:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 6611              		.loc 1 359 2 is_stmt 1 view .LVU1878
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6612              		.loc 1 360 2 view .LVU1879
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6613              		.loc 1 360 30 is_stmt 0 view .LVU1880
 6614 0024 FFF7FEFF 		bl	extract_value
 6615              	.LVL509:
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6616              		.loc 1 360 30 view .LVU1881
 6617 0028 0246     		mov	r2, r0
 6618 002a 0B46     		mov	r3, r1
 6619 002c 1446     		mov	r4, r2
 361:src/int.c     **** 	unsigned long long int r;
 6620              		.loc 1 361 30 view .LVU1882
 6621 002e 4046     		mov	r0, r8
 6622 0030 4946     		mov	r1, r9
 6623 0032 03AA     		add	r2, sp, #12
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6624              		.loc 1 360 30 view .LVU1883
 6625 0034 1D46     		mov	r5, r3
 6626              	.LVL510:
 361:src/int.c     **** 	unsigned long long int r;
 6627              		.loc 1 361 2 is_stmt 1 view .LVU1884
 361:src/int.c     **** 	unsigned long long int r;
 6628              		.loc 1 361 30 is_stmt 0 view .LVU1885
 6629 0036 FFF7FEFF 		bl	extract_value
 6630              	.LVL511:
 365:src/int.c     **** 		err_div0(yv, sy, sx);
 6631              		.loc 1 365 5 view .LVU1886
 6632 003a 54EA0503 		orrs	r3, r4, r5
 361:src/int.c     **** 	unsigned long long int r;
 6633              		.loc 1 361 30 view .LVU1887
 6634 003e 0646     		mov	r6, r0
 6635 0040 0F46     		mov	r7, r1
 6636              	.LVL512:
 362:src/int.c     **** 	long long int tbm;
 6637              		.loc 1 362 2 is_stmt 1 view .LVU1888
 363:src/int.c     **** 
 6638              		.loc 1 363 2 view .LVU1889
 365:src/int.c     **** 		err_div0(yv, sy, sx);
 6639              		.loc 1 365 2 view .LVU1890
 365:src/int.c     **** 		err_div0(yv, sy, sx);
 6640              		.loc 1 365 5 is_stmt 0 view .LVU1891
ARM GAS  /tmp/ccjGZi8K.s 			page 174


 6641 0042 10D1     		bne	.L389
 366:src/int.c     **** 		return 0;
 6642              		.loc 1 366 3 is_stmt 1 view .LVU1892
 6643              	.LVL513:
 6644              	.LBB1297:
 6645              	.LBI1297:
 346:src/int.c     **** 	if (num == 0)
 6646              		.loc 1 346 13 view .LVU1893
 6647              	.LBB1298:
 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 6648              		.loc 1 347 2 view .LVU1894
 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 6649              		.loc 1 347 5 is_stmt 0 view .LVU1895
 6650 0044 56EA0703 		orrs	r3, r6, r7
 6651 0048 00F08480 		beq	.L410
 6652              	.LVL514:
 6653              	.LBB1299:
 6654              	.LBI1299:
 346:src/int.c     **** 	if (num == 0)
 6655              		.loc 1 346 13 is_stmt 1 view .LVU1896
 6656              	.LBB1300:
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 6657              		.loc 1 349 7 view .LVU1897
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 6658              		.loc 1 349 10 is_stmt 0 view .LVU1898
 6659 004c DDE90232 		ldrd	r3, r2, [sp, #8]
 6660 0050 9A42     		cmp	r2, r3
 350:src/int.c     **** 	else
 6661              		.loc 1 350 3 is_stmt 1 view .LVU1899
 6662 0052 0CBF     		ite	eq
 6663 0054 0420     		moveq	r0, #4
 6664              	.LVL515:
 352:src/int.c     **** }
 6665              		.loc 1 352 3 view .LVU1900
 6666 0056 0520     		movne	r0, #5
 6667 0058 FFF7FEFF 		bl	report_err
 6668              	.LVL516:
 352:src/int.c     **** }
 6669              		.loc 1 352 3 is_stmt 0 view .LVU1901
 6670              	.LBE1300:
 6671              	.LBE1299:
 6672              	.LBE1298:
 6673              	.LBE1297:
 367:src/int.c     **** 	}
 6674              		.loc 1 367 10 view .LVU1902
 6675 005c 2046     		mov	r0, r4
 6676 005e 2946     		mov	r1, r5
 386:src/int.c     **** 
 6677              		.loc 1 386 1 view .LVU1903
 6678 0060 05B0     		add	sp, sp, #20
 6679              		.cfi_remember_state
 6680              		.cfi_def_cfa_offset 36
 6681              		@ sp needed
 6682 0062 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6683              	.LVL517:
 6684              	.L389:
 6685              		.cfi_restore_state
ARM GAS  /tmp/ccjGZi8K.s 			page 175


 369:src/int.c     **** 	r = mask_value(yv / xv);
 6686              		.loc 1 369 2 is_stmt 1 view .LVU1904
 6687              	.LBB1302:
 6688              	.LBI1302:
  67:src/int.c     **** #ifndef TINY_BUILD
 6689              		.loc 1 67 6 view .LVU1905
 6690              	.LBB1303:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6691              		.loc 1 69 2 view .LVU1906
  72:src/int.c     **** #endif
 6692              		.loc 1 72 3 view .LVU1907
 6693 0066 5221     		movs	r1, #82
 6694 0068 6920     		movs	r0, #105
 6695              	.LVL518:
  72:src/int.c     **** #endif
 6696              		.loc 1 72 3 is_stmt 0 view .LVU1908
 6697 006a FFF7FEFF 		bl	cmdflag
 6698              	.LVL519:
  72:src/int.c     **** #endif
 6699              		.loc 1 72 3 view .LVU1909
 6700              	.LBE1303:
 6701              	.LBE1302:
 370:src/int.c     **** 	// Set carry if there is a remainder
 6702              		.loc 1 370 2 is_stmt 1 view .LVU1910
 370:src/int.c     **** 	// Set carry if there is a remainder
 6703              		.loc 1 370 20 is_stmt 0 view .LVU1911
 6704 006e 2246     		mov	r2, r4
 6705 0070 2B46     		mov	r3, r5
 6706 0072 3046     		mov	r0, r6
 6707 0074 3946     		mov	r1, r7
 6708 0076 FFF7FEFF 		bl	__aeabi_uldivmod
 6709              	.LVL520:
 6710              	.LBB1304:
 6711              	.LBB1305:
 6712              	.LBB1306:
 6713              	.LBB1307:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6714              		.loc 1 44 26 view .LVU1912
 6715 007a DBF80030 		ldr	r3, [fp]
 6716              	.LBE1307:
 6717              	.LBE1306:
 6718              	.LBE1305:
 6719              	.LBE1304:
 370:src/int.c     **** 	// Set carry if there is a remainder
 6720              		.loc 1 370 20 view .LVU1913
 6721 007e 0091     		str	r1, [sp]
 6722              	.LVL521:
 6723              	.LBB1314:
 6724              	.LBI1304:
  92:src/int.c     **** #ifndef TINY_BUILD
 6725              		.loc 1 92 15 is_stmt 1 view .LVU1914
 6726              	.LBB1312:
  94:src/int.c     **** 	long long int mask;
 6727              		.loc 1 94 2 view .LVU1915
 6728              	.LBB1310:
 6729              	.LBI1306:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
ARM GAS  /tmp/ccjGZi8K.s 			page 176


 6730              		.loc 1 43 14 view .LVU1916
 6731              	.LBB1308:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6732              		.loc 1 44 2 view .LVU1917
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6733              		.loc 1 44 26 is_stmt 0 view .LVU1918
 6734 0080 93F8E9A7 		ldrb	r10, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6735              		.loc 1 44 15 view .LVU1919
 6736 0084 0AF03F03 		and	r3, r10, #63
 6737              	.LVL522:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6738              		.loc 1 45 2 is_stmt 1 view .LVU1920
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6739              		.loc 1 45 26 is_stmt 0 view .LVU1921
 6740 0088 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6741              		.loc 1 45 5 view .LVU1922
 6742 008a 3E2A     		cmp	r2, #62
 6743              	.LBE1308:
 6744              	.LBE1310:
 6745              	.LBE1312:
 6746              	.LBE1314:
 370:src/int.c     **** 	// Set carry if there is a remainder
 6747              		.loc 1 370 20 view .LVU1923
 6748 008c 8246     		mov	r10, r0
 6749              	.LBB1315:
 6750              	.LBB1313:
 6751              	.LBB1311:
 6752              	.LBB1309:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6753              		.loc 1 45 5 view .LVU1924
 6754 008e 16D8     		bhi	.L393
 6755              	.LVL523:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6756              		.loc 1 45 5 view .LVU1925
 6757              	.LBE1309:
 6758              	.LBE1311:
  95:src/int.c     **** 
 6759              		.loc 1 95 2 is_stmt 1 view .LVU1926
  97:src/int.c     **** 		return v;
 6760              		.loc 1 97 2 view .LVU1927
  99:src/int.c     **** 	return v & mask;
 6761              		.loc 1 99 2 view .LVU1928
 100:src/int.c     **** #else
 6762              		.loc 1 100 2 view .LVU1929
  99:src/int.c     **** 	return v & mask;
 6763              		.loc 1 99 14 is_stmt 0 view .LVU1930
 6764 0090 4FF0010A 		mov	r10, #1
 6765 0094 A3F12002 		sub	r2, r3, #32
 6766 0098 C3F1200C 		rsb	ip, r3, #32
 6767 009c 0AFA02F2 		lsl	r2, r10, r2
 6768 00a0 2AFA0CFC 		lsr	ip, r10, ip
 6769 00a4 0AFA03FA 		lsl	r10, r10, r3
  99:src/int.c     **** 	return v & mask;
 6770              		.loc 1 99 7 view .LVU1931
 6771 00a8 1AF1FF3A 		adds	r10, r10, #-1
ARM GAS  /tmp/ccjGZi8K.s 			page 177


  99:src/int.c     **** 	return v & mask;
 6772              		.loc 1 99 14 view .LVU1932
 6773 00ac 42EA0C02 		orr	r2, r2, ip
  99:src/int.c     **** 	return v & mask;
 6774              		.loc 1 99 7 view .LVU1933
 6775 00b0 42F1FF32 		adc	r2, r2, #-1
 100:src/int.c     **** #else
 6776              		.loc 1 100 11 view .LVU1934
 6777 00b4 02EA0103 		and	r3, r2, r1
 6778              	.LVL524:
 100:src/int.c     **** #else
 6779              		.loc 1 100 11 view .LVU1935
 6780 00b8 0093     		str	r3, [sp]
 6781 00ba 0AEA000A 		and	r10, r10, r0
 6782              	.LVL525:
 6783              	.L393:
 100:src/int.c     **** #else
 6784              		.loc 1 100 11 view .LVU1936
 6785              	.LBE1313:
 6786              	.LBE1315:
 372:src/int.c     **** 
 6787              		.loc 1 372 2 is_stmt 1 view .LVU1937
 6788              	.LBB1316:
 6789              	.LBI1316:
  54:src/int.c     **** #ifndef TINY_BUILD
 6790              		.loc 1 54 6 view .LVU1938
 6791              	.LBB1317:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6792              		.loc 1 56 2 view .LVU1939
 6793              	.LBE1317:
 6794              	.LBE1316:
 372:src/int.c     **** 
 6795              		.loc 1 372 14 is_stmt 0 view .LVU1940
 6796 00be 009B     		ldr	r3, [sp]
 6797 00c0 04FB03F1 		mul	r1, r4, r3
 6798 00c4 0AFB0511 		mla	r1, r10, r5, r1
 6799 00c8 A4FB0A23 		umull	r2, r3, r4, r10
 6800 00cc 0B44     		add	r3, r3, r1
 6801              	.LBB1320:
 6802              	.LBB1318:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6803              		.loc 1 56 5 view .LVU1941
 6804 00ce BB42     		cmp	r3, r7
 6805 00d0 08BF     		it	eq
 6806 00d2 B242     		cmpeq	r2, r6
 6807 00d4 39D0     		beq	.L394
 6808 00d6 FFF7FEFF 		bl	set_carry.part.0
 6809              	.LVL526:
 6810              	.L395:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6811              		.loc 1 56 5 view .LVU1942
 6812              	.LBE1318:
 6813              	.LBE1320:
 374:src/int.c     **** 		tbm = topbit_mask();
 6814              		.loc 1 374 2 is_stmt 1 view .LVU1943
 374:src/int.c     **** 		tbm = topbit_mask();
 6815              		.loc 1 374 5 is_stmt 0 view .LVU1944
ARM GAS  /tmp/ccjGZi8K.s 			page 178


 6816 00da 019B     		ldr	r3, [sp, #4]
 6817 00dc 022B     		cmp	r3, #2
 6818 00de 2AD0     		beq	.L409
 375:src/int.c     **** 		if (r & tbm)
 6819              		.loc 1 375 3 is_stmt 1 view .LVU1945
 6820              	.LBB1321:
 6821              	.LBI1321:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 6822              		.loc 1 110 22 view .LVU1946
 6823              	.LBB1322:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 6824              		.loc 1 111 2 view .LVU1947
 6825              	.LBB1323:
 6826              	.LBI1323:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 6827              		.loc 1 43 14 view .LVU1948
 6828              	.LBB1324:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6829              		.loc 1 44 2 view .LVU1949
 6830              	.LVL527:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6831              		.loc 1 45 2 view .LVU1950
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6832              		.loc 1 44 26 is_stmt 0 view .LVU1951
 6833 00e0 DBF80030 		ldr	r3, [fp]
 6834 00e4 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6835              		.loc 1 44 15 view .LVU1952
 6836 00e8 03F03F03 		and	r3, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6837              		.loc 1 45 26 view .LVU1953
 6838 00ec 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6839              		.loc 1 45 5 view .LVU1954
 6840 00ee 3E2A     		cmp	r2, #62
 6841 00f0 3BD8     		bhi	.L401
 6842 00f2 0121     		movs	r1, #1
 6843 00f4 213B     		subs	r3, r3, #33
 6844 00f6 C2F12000 		rsb	r0, r2, #32
 6845 00fa 21FA00F0 		lsr	r0, r1, r0
 6846 00fe 01FA03F7 		lsl	r7, r1, r3
 6847 0102 0743     		orrs	r7, r7, r0
 6848 0104 01FA02F6 		lsl	r6, r1, r2
 6849 0108 3046     		mov	r0, r6
 6850 010a 3946     		mov	r1, r7
 6851              	.L398:
 6852              	.LVL528:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 6853              		.loc 1 45 5 view .LVU1955
 6854              	.LBE1324:
 6855              	.LBE1323:
 112:src/int.c     **** 	return bit;
 6856              		.loc 1 112 2 is_stmt 1 view .LVU1956
 113:src/int.c     **** }
 6857              		.loc 1 113 2 view .LVU1957
 113:src/int.c     **** }
 6858              		.loc 1 113 2 is_stmt 0 view .LVU1958
ARM GAS  /tmp/ccjGZi8K.s 			page 179


 6859              	.LBE1322:
 6860              	.LBE1321:
 376:src/int.c     **** 			set_carry(1);
 6861              		.loc 1 376 3 is_stmt 1 view .LVU1959
 376:src/int.c     **** 			set_carry(1);
 6862              		.loc 1 376 9 is_stmt 0 view .LVU1960
 6863 010c 0AEA0002 		and	r2, r10, r0
 6864 0110 0098     		ldr	r0, [sp]
 6865 0112 00EA0103 		and	r3, r0, r1
 376:src/int.c     **** 			set_carry(1);
 6866              		.loc 1 376 6 view .LVU1961
 6867 0116 1343     		orrs	r3, r2, r3
 6868 0118 24D1     		bne	.L411
 6869              	.L399:
 379:src/int.c     **** 			set_overflow(1);
 6870              		.loc 1 379 3 is_stmt 1 view .LVU1962
 379:src/int.c     **** 			set_overflow(1);
 6871              		.loc 1 379 6 is_stmt 0 view .LVU1963
 6872 011a 019B     		ldr	r3, [sp, #4]
 6873 011c 5BB9     		cbnz	r3, .L409
 379:src/int.c     **** 			set_overflow(1);
 6874              		.loc 1 379 26 discriminator 1 view .LVU1964
 6875 011e 029B     		ldr	r3, [sp, #8]
 6876 0120 53B1     		cbz	r3, .L397
 379:src/int.c     **** 			set_overflow(1);
 6877              		.loc 1 379 32 discriminator 2 view .LVU1965
 6878 0122 002D     		cmp	r5, #0
 6879 0124 08BF     		it	eq
 6880 0126 012C     		cmpeq	r4, #1
 6881 0128 06D1     		bne	.L397
 379:src/int.c     **** 			set_overflow(1);
 6882              		.loc 1 379 43 discriminator 3 view .LVU1966
 6883 012a B945     		cmp	r9, r7
 6884 012c 08BF     		it	eq
 6885 012e B045     		cmpeq	r8, r6
 6886 0130 02D1     		bne	.L397
 380:src/int.c     **** 	}
 6887              		.loc 1 380 4 is_stmt 1 view .LVU1967
 6888              	.LVL529:
 6889              	.LBB1328:
 6890              	.LBI1328:
  67:src/int.c     **** #ifndef TINY_BUILD
 6891              		.loc 1 67 6 view .LVU1968
 6892              	.LBB1329:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6893              		.loc 1 69 2 view .LVU1969
 6894 0132 FFF7FEFF 		bl	set_overflow.part.0
 6895              	.LVL530:
 6896              	.L409:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6897              		.loc 1 69 2 is_stmt 0 view .LVU1970
 6898 0136 029B     		ldr	r3, [sp, #8]
 6899              	.L397:
 6900              	.LBE1329:
 6901              	.LBE1328:
 382:src/int.c     **** #else
 6902              		.loc 1 382 2 is_stmt 1 view .LVU1971
ARM GAS  /tmp/ccjGZi8K.s 			page 180


 382:src/int.c     **** #else
 6903              		.loc 1 382 9 is_stmt 0 view .LVU1972
 6904 0138 039A     		ldr	r2, [sp, #12]
 6905 013a 0099     		ldr	r1, [sp]
 6906 013c 5046     		mov	r0, r10
 6907 013e 5A40     		eors	r2, r2, r3
 6908 0140 FFF7FEFF 		bl	build_value
 6909              	.LVL531:
 386:src/int.c     **** 
 6910              		.loc 1 386 1 view .LVU1973
 6911 0144 05B0     		add	sp, sp, #20
 6912              		.cfi_remember_state
 6913              		.cfi_def_cfa_offset 36
 6914              		@ sp needed
 6915 0146 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6916              	.LVL532:
 6917              	.L394:
 6918              		.cfi_restore_state
 6919              	.LBB1330:
 6920              	.LBB1319:
  59:src/int.c     **** #endif
 6921              		.loc 1 59 3 is_stmt 1 view .LVU1974
 6922 014a 5221     		movs	r1, #82
 6923 014c 6A20     		movs	r0, #106
 6924 014e FFF7FEFF 		bl	cmdflag
 6925              	.LVL533:
 6926 0152 C2E7     		b	.L395
 6927              	.LVL534:
 6928              	.L410:
  59:src/int.c     **** #endif
 6929              		.loc 1 59 3 is_stmt 0 view .LVU1975
 6930              	.LBE1319:
 6931              	.LBE1330:
 6932              	.LBB1331:
 6933              	.LBB1301:
 348:src/int.c     **** 	else if (sn == sd)
 6934              		.loc 1 348 3 is_stmt 1 view .LVU1976
 6935 0154 0120     		movs	r0, #1
 6936              	.LVL535:
 348:src/int.c     **** 	else if (sn == sd)
 6937              		.loc 1 348 3 is_stmt 0 view .LVU1977
 6938 0156 FFF7FEFF 		bl	report_err
 6939              	.LVL536:
 348:src/int.c     **** 	else if (sn == sd)
 6940              		.loc 1 348 3 view .LVU1978
 6941              	.LBE1301:
 6942              	.LBE1331:
 367:src/int.c     **** 	}
 6943              		.loc 1 367 10 view .LVU1979
 6944 015a 3046     		mov	r0, r6
 6945 015c 3946     		mov	r1, r7
 386:src/int.c     **** 
 6946              		.loc 1 386 1 view .LVU1980
 6947 015e 05B0     		add	sp, sp, #20
 6948              		.cfi_remember_state
 6949              		.cfi_def_cfa_offset 36
 6950              		@ sp needed
ARM GAS  /tmp/ccjGZi8K.s 			page 181


 6951 0160 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6952              	.LVL537:
 6953              	.L411:
 6954              		.cfi_restore_state
 377:src/int.c     **** 		// Special case for 0x8000...00 / -1 in 2's complement
 6955              		.loc 1 377 4 is_stmt 1 view .LVU1981
 6956              	.LBB1332:
 6957              	.LBI1332:
  54:src/int.c     **** #ifndef TINY_BUILD
 6958              		.loc 1 54 6 view .LVU1982
 6959              	.LBB1333:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6960              		.loc 1 56 2 view .LVU1983
 6961 0164 FFF7FEFF 		bl	set_carry.part.0
 6962              	.LVL538:
  61:src/int.c     **** 
 6963              		.loc 1 61 1 is_stmt 0 view .LVU1984
 6964 0168 D7E7     		b	.L399
 6965              	.LVL539:
 6966              	.L401:
  61:src/int.c     **** 
 6967              		.loc 1 61 1 view .LVU1985
 6968              	.LBE1333:
 6969              	.LBE1332:
 6970              	.LBB1334:
 6971              	.LBB1327:
 6972              	.LBB1326:
 6973              	.LBB1325:
 6974 016a 0026     		movs	r6, #0
 6975 016c 4FF00047 		mov	r7, #-2147483648
 6976 0170 0020     		movs	r0, #0
 6977 0172 4FF00041 		mov	r1, #-2147483648
 6978 0176 C9E7     		b	.L398
 6979              	.L413:
 6980              		.align	2
 6981              	.L412:
 6982 0178 00000000 		.word	main_ram
 6983              	.LBE1325:
 6984              	.LBE1326:
 6985              	.LBE1327:
 6986              	.LBE1334:
 6987              		.cfi_endproc
 6988              	.LFE21:
 6990              		.section	.text.intMod,"ax",%progbits
 6991              		.align	1
 6992              		.p2align 2,,3
 6993              		.global	intMod
 6994              		.syntax unified
 6995              		.thumb
 6996              		.thumb_func
 6997              		.fpu fpv4-sp-d16
 6999              	intMod:
 7000              	.LVL540:
 7001              	.LFB22:
 388:src/int.c     **** #ifndef TINY_BUILD
 7002              		.loc 1 388 56 is_stmt 1 view -0
 7003              		.cfi_startproc
ARM GAS  /tmp/ccjGZi8K.s 			page 182


 7004              		@ args = 0, pretend = 0, frame = 8
 7005              		@ frame_needed = 0, uses_anonymous_args = 0
 390:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 7006              		.loc 1 390 2 view .LVU1987
 391:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7007              		.loc 1 391 2 view .LVU1988
 388:src/int.c     **** #ifndef TINY_BUILD
 7008              		.loc 1 388 56 is_stmt 0 view .LVU1989
 7009 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7010              		.cfi_def_cfa_offset 20
 7011              		.cfi_offset 4, -20
 7012              		.cfi_offset 5, -16
 7013              		.cfi_offset 6, -12
 7014              		.cfi_offset 7, -8
 7015              		.cfi_offset 14, -4
 7016 0002 83B0     		sub	sp, sp, #12
 7017              		.cfi_def_cfa_offset 32
 388:src/int.c     **** #ifndef TINY_BUILD
 7018              		.loc 1 388 56 view .LVU1990
 7019 0004 0746     		mov	r7, r0
 7020 0006 0E46     		mov	r6, r1
 391:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7021              		.loc 1 391 30 view .LVU1991
 7022 0008 1046     		mov	r0, r2
 7023              	.LVL541:
 391:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7024              		.loc 1 391 30 view .LVU1992
 7025 000a 1946     		mov	r1, r3
 7026 000c 6A46     		mov	r2, sp
 7027              	.LVL542:
 391:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7028              		.loc 1 391 30 view .LVU1993
 7029 000e FFF7FEFF 		bl	extract_value
 7030              	.LVL543:
 7031 0012 0B46     		mov	r3, r1
 7032 0014 0246     		mov	r2, r0
 7033 0016 1446     		mov	r4, r2
 7034 0018 1D46     		mov	r5, r3
 7035              	.LVL544:
 392:src/int.c     **** 	unsigned long long int r;
 7036              		.loc 1 392 2 is_stmt 1 view .LVU1994
 392:src/int.c     **** 	unsigned long long int r;
 7037              		.loc 1 392 30 is_stmt 0 view .LVU1995
 7038 001a 3846     		mov	r0, r7
 7039 001c 3146     		mov	r1, r6
 7040 001e 01AA     		add	r2, sp, #4
 7041 0020 FFF7FEFF 		bl	extract_value
 7042              	.LVL545:
 393:src/int.c     **** 
 7043              		.loc 1 393 2 is_stmt 1 view .LVU1996
 395:src/int.c     **** 		err_div0(yv, sy, sx);
 7044              		.loc 1 395 2 view .LVU1997
 395:src/int.c     **** 		err_div0(yv, sy, sx);
 7045              		.loc 1 395 5 is_stmt 0 view .LVU1998
 7046 0024 54EA0503 		orrs	r3, r4, r5
 7047 0028 1DD0     		beq	.L426
 399:src/int.c     **** #ifdef INCLUDE_MOD41
ARM GAS  /tmp/ccjGZi8K.s 			page 183


 7048              		.loc 1 399 2 is_stmt 1 view .LVU1999
 399:src/int.c     **** #ifdef INCLUDE_MOD41
 7049              		.loc 1 399 4 is_stmt 0 view .LVU2000
 7050 002a 2246     		mov	r2, r4
 7051 002c 2B46     		mov	r3, r5
 7052 002e FFF7FEFF 		bl	__aeabi_uldivmod
 7053              	.LVL546:
 401:src/int.c     ****         if (r != 0)
 7054              		.loc 1 401 16 view .LVU2001
 7055 0032 194E     		ldr	r6, .L428
 401:src/int.c     ****         if (r != 0)
 7056              		.loc 1 401 5 view .LVU2002
 7057 0034 3688     		ldrh	r6, [r6]
 399:src/int.c     **** #ifdef INCLUDE_MOD41
 7058              		.loc 1 399 4 view .LVU2003
 7059 0036 1046     		mov	r0, r2
 401:src/int.c     ****         if (r != 0)
 7060              		.loc 1 401 5 view .LVU2004
 7061 0038 40F20732 		movw	r2, #775
 7062 003c 9642     		cmp	r6, r2
 399:src/int.c     **** #ifdef INCLUDE_MOD41
 7063              		.loc 1 399 4 view .LVU2005
 7064 003e 1946     		mov	r1, r3
 7065              	.LVL547:
 401:src/int.c     ****         if (r != 0)
 7066              		.loc 1 401 2 is_stmt 1 view .LVU2006
 401:src/int.c     ****         if (r != 0)
 7067              		.loc 1 401 5 is_stmt 0 view .LVU2007
 7068 0040 04D0     		beq	.L419
 7069 0042 019A     		ldr	r2, [sp, #4]
 7070              	.L420:
 407:src/int.c     **** #else
 7071              		.loc 1 407 2 is_stmt 1 view .LVU2008
 407:src/int.c     **** #else
 7072              		.loc 1 407 9 is_stmt 0 view .LVU2009
 7073 0044 FFF7FEFF 		bl	build_value
 7074              	.LVL548:
 411:src/int.c     **** 
 7075              		.loc 1 411 1 view .LVU2010
 7076 0048 03B0     		add	sp, sp, #12
 7077              		.cfi_remember_state
 7078              		.cfi_def_cfa_offset 20
 7079              		@ sp needed
 7080 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 7081              	.LVL549:
 7082              	.L419:
 7083              		.cfi_restore_state
 401:src/int.c     ****         if (r != 0)
 7084              		.loc 1 401 45 discriminator 1 view .LVU2011
 7085 004c DDE90032 		ldrd	r3, r2, [sp]
 401:src/int.c     ****         if (r != 0)
 7086              		.loc 1 401 39 discriminator 1 view .LVU2012
 7087 0050 9342     		cmp	r3, r2
 7088 0052 F7D0     		beq	.L420
 402:src/int.c     **** 		    r = xv - r;
 7089              		.loc 1 402 9 is_stmt 1 view .LVU2013
 402:src/int.c     **** 		    r = xv - r;
ARM GAS  /tmp/ccjGZi8K.s 			page 184


 7090              		.loc 1 402 12 is_stmt 0 view .LVU2014
 7091 0054 50EA0102 		orrs	r2, r0, r1
 7092 0058 02D0     		beq	.L421
 403:src/int.c     **** 		sy = sx;
 7093              		.loc 1 403 7 is_stmt 1 view .LVU2015
 403:src/int.c     **** 		sy = sx;
 7094              		.loc 1 403 9 is_stmt 0 view .LVU2016
 7095 005a 201A     		subs	r0, r4, r0
 7096              	.LVL550:
 403:src/int.c     **** 		sy = sx;
 7097              		.loc 1 403 9 view .LVU2017
 7098 005c 65EB0101 		sbc	r1, r5, r1
 7099              	.LVL551:
 7100              	.L421:
 404:src/int.c     **** 	}
 7101              		.loc 1 404 3 is_stmt 1 view .LVU2018
 404:src/int.c     **** 	}
 7102              		.loc 1 404 6 is_stmt 0 view .LVU2019
 7103 0060 0193     		str	r3, [sp, #4]
 7104 0062 1A46     		mov	r2, r3
 7105 0064 EEE7     		b	.L420
 7106              	.LVL552:
 7107              	.L426:
 404:src/int.c     **** 	}
 7108              		.loc 1 404 6 view .LVU2020
 7109 0066 0646     		mov	r6, r0
 7110 0068 0F46     		mov	r7, r1
 396:src/int.c     **** 		return 0;
 7111              		.loc 1 396 3 is_stmt 1 view .LVU2021
 7112              	.LVL553:
 7113              	.LBB1339:
 7114              	.LBI1339:
 346:src/int.c     **** 	if (num == 0)
 7115              		.loc 1 346 13 view .LVU2022
 7116              	.LBB1340:
 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 7117              		.loc 1 347 2 view .LVU2023
 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 7118              		.loc 1 347 5 is_stmt 0 view .LVU2024
 7119 006a 56EA0703 		orrs	r3, r6, r7
 7120 006e 0BD0     		beq	.L427
 7121              	.LVL554:
 7122              	.LBB1341:
 7123              	.LBI1341:
 346:src/int.c     **** 	if (num == 0)
 7124              		.loc 1 346 13 is_stmt 1 view .LVU2025
 7125              	.LBB1342:
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 7126              		.loc 1 349 7 view .LVU2026
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 7127              		.loc 1 349 10 is_stmt 0 view .LVU2027
 7128 0070 DDE90032 		ldrd	r3, r2, [sp]
 7129 0074 9A42     		cmp	r2, r3
 350:src/int.c     **** 	else
 7130              		.loc 1 350 3 is_stmt 1 view .LVU2028
 7131 0076 0CBF     		ite	eq
 7132 0078 0420     		moveq	r0, #4
ARM GAS  /tmp/ccjGZi8K.s 			page 185


 7133              	.LVL555:
 352:src/int.c     **** }
 7134              		.loc 1 352 3 view .LVU2029
 7135 007a 0520     		movne	r0, #5
 7136 007c FFF7FEFF 		bl	report_err
 7137              	.LVL556:
 352:src/int.c     **** }
 7138              		.loc 1 352 3 is_stmt 0 view .LVU2030
 7139              	.LBE1342:
 7140              	.LBE1341:
 7141              	.LBE1340:
 7142              	.LBE1339:
 397:src/int.c     **** 	}
 7143              		.loc 1 397 10 view .LVU2031
 7144 0080 2046     		mov	r0, r4
 7145 0082 2946     		mov	r1, r5
 411:src/int.c     **** 
 7146              		.loc 1 411 1 view .LVU2032
 7147 0084 03B0     		add	sp, sp, #12
 7148              		.cfi_remember_state
 7149              		.cfi_def_cfa_offset 20
 7150              		@ sp needed
 7151 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 7152              	.LVL557:
 7153              	.L427:
 7154              		.cfi_restore_state
 7155              	.LBB1344:
 7156              	.LBB1343:
 348:src/int.c     **** 	else if (sn == sd)
 7157              		.loc 1 348 3 is_stmt 1 view .LVU2033
 7158 0088 0120     		movs	r0, #1
 7159              	.LVL558:
 348:src/int.c     **** 	else if (sn == sd)
 7160              		.loc 1 348 3 is_stmt 0 view .LVU2034
 7161 008a FFF7FEFF 		bl	report_err
 7162              	.LVL559:
 348:src/int.c     **** 	else if (sn == sd)
 7163              		.loc 1 348 3 view .LVU2035
 7164              	.LBE1343:
 7165              	.LBE1344:
 397:src/int.c     **** 	}
 7166              		.loc 1 397 10 view .LVU2036
 7167 008e 3046     		mov	r0, r6
 7168 0090 3946     		mov	r1, r7
 411:src/int.c     **** 
 7169              		.loc 1 411 1 view .LVU2037
 7170 0092 03B0     		add	sp, sp, #12
 7171              		.cfi_def_cfa_offset 20
 7172              		@ sp needed
 7173 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 7174              	.LVL560:
 7175              	.L429:
 411:src/int.c     **** 
 7176              		.loc 1 411 1 view .LVU2038
 7177 0096 00BF     		.align	2
 7178              	.L428:
 7179 0098 00000000 		.word	XeqOpCode
ARM GAS  /tmp/ccjGZi8K.s 			page 186


 7180              		.cfi_endproc
 7181              	.LFE22:
 7183              		.section	.text.intMin,"ax",%progbits
 7184              		.align	1
 7185              		.p2align 2,,3
 7186              		.global	intMin
 7187              		.syntax unified
 7188              		.thumb
 7189              		.thumb_func
 7190              		.fpu fpv4-sp-d16
 7192              	intMin:
 7193              	.LVL561:
 7194              	.LFB23:
 414:src/int.c     **** #ifndef TINY_BUILD
 7195              		.loc 1 414 56 is_stmt 1 view -0
 7196              		.cfi_startproc
 7197              		@ args = 0, pretend = 0, frame = 8
 7198              		@ frame_needed = 0, uses_anonymous_args = 0
 416:src/int.c     **** 	const unsigned long long int xv = extract_value(x, &sx);
 7199              		.loc 1 416 2 view .LVU2040
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7200              		.loc 1 417 2 view .LVU2041
 414:src/int.c     **** #ifndef TINY_BUILD
 7201              		.loc 1 414 56 is_stmt 0 view .LVU2042
 7202 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7203              		.cfi_def_cfa_offset 28
 7204              		.cfi_offset 4, -28
 7205              		.cfi_offset 5, -24
 7206              		.cfi_offset 6, -20
 7207              		.cfi_offset 7, -16
 7208              		.cfi_offset 8, -12
 7209              		.cfi_offset 9, -8
 7210              		.cfi_offset 14, -4
 7211 0004 83B0     		sub	sp, sp, #12
 7212              		.cfi_def_cfa_offset 40
 414:src/int.c     **** #ifndef TINY_BUILD
 7213              		.loc 1 414 56 view .LVU2043
 7214 0006 0546     		mov	r5, r0
 7215 0008 0C46     		mov	r4, r1
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7216              		.loc 1 417 36 view .LVU2044
 7217 000a 1046     		mov	r0, r2
 7218              	.LVL562:
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7219              		.loc 1 417 36 view .LVU2045
 7220 000c 1946     		mov	r1, r3
 414:src/int.c     **** #ifndef TINY_BUILD
 7221              		.loc 1 414 56 view .LVU2046
 7222 000e 1746     		mov	r7, r2
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7223              		.loc 1 417 36 view .LVU2047
 7224 0010 6A46     		mov	r2, sp
 7225              	.LVL563:
 414:src/int.c     **** #ifndef TINY_BUILD
 7226              		.loc 1 414 56 view .LVU2048
 7227 0012 1E46     		mov	r6, r3
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
ARM GAS  /tmp/ccjGZi8K.s 			page 187


 7228              		.loc 1 417 36 view .LVU2049
 7229 0014 FFF7FEFF 		bl	extract_value
 7230              	.LVL564:
 7231 0018 0246     		mov	r2, r0
 7232 001a 0B46     		mov	r3, r1
 418:src/int.c     **** 
 7233              		.loc 1 418 36 view .LVU2050
 7234 001c 2846     		mov	r0, r5
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7235              		.loc 1 417 36 view .LVU2051
 7236 001e 9046     		mov	r8, r2
 418:src/int.c     **** 
 7237              		.loc 1 418 36 view .LVU2052
 7238 0020 2146     		mov	r1, r4
 7239 0022 01AA     		add	r2, sp, #4
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7240              		.loc 1 417 36 view .LVU2053
 7241 0024 9946     		mov	r9, r3
 7242              	.LVL565:
 418:src/int.c     **** 
 7243              		.loc 1 418 2 is_stmt 1 view .LVU2054
 418:src/int.c     **** 
 7244              		.loc 1 418 36 is_stmt 0 view .LVU2055
 7245 0026 FFF7FEFF 		bl	extract_value
 7246              	.LVL566:
 420:src/int.c     **** 		if (sx)
 7247              		.loc 1 420 9 view .LVU2056
 7248 002a DDF800C0 		ldr	ip, [sp]
 418:src/int.c     **** 
 7249              		.loc 1 418 36 view .LVU2057
 7250 002e 0B46     		mov	r3, r1
 420:src/int.c     **** 		if (sx)
 7251              		.loc 1 420 2 is_stmt 1 view .LVU2058
 420:src/int.c     **** 		if (sx)
 7252              		.loc 1 420 5 is_stmt 0 view .LVU2059
 7253 0030 0199     		ldr	r1, [sp, #4]
 7254 0032 8C45     		cmp	ip, r1
 7255 0034 07D0     		beq	.L431
 421:src/int.c     **** 			return x;
 7256              		.loc 1 421 3 is_stmt 1 view .LVU2060
 421:src/int.c     **** 			return x;
 7257              		.loc 1 421 6 is_stmt 0 view .LVU2061
 7258 0036 BCF1000F 		cmp	ip, #0
 7259 003a 0BD1     		bne	.L438
 7260              	.L432:
 434:src/int.c     **** 
 7261              		.loc 1 434 1 view .LVU2062
 7262 003c 2846     		mov	r0, r5
 7263 003e 2146     		mov	r1, r4
 7264 0040 03B0     		add	sp, sp, #12
 7265              		.cfi_remember_state
 7266              		.cfi_def_cfa_offset 28
 7267              		@ sp needed
 7268 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7269              	.LVL567:
 7270              	.L431:
 7271              		.cfi_restore_state
ARM GAS  /tmp/ccjGZi8K.s 			page 188


 423:src/int.c     **** 		if (xv > yv)
 7272              		.loc 1 423 9 is_stmt 1 view .LVU2063
 423:src/int.c     **** 		if (xv > yv)
 7273              		.loc 1 423 12 is_stmt 0 view .LVU2064
 7274 0046 BCF1000F 		cmp	ip, #0
 7275 004a 0AD1     		bne	.L440
 427:src/int.c     **** 			return x;
 7276              		.loc 1 427 3 is_stmt 1 view .LVU2065
 427:src/int.c     **** 			return x;
 7277              		.loc 1 427 6 is_stmt 0 view .LVU2066
 7278 004c 9945     		cmp	r9, r3
 7279 004e 08BF     		it	eq
 7280 0050 8045     		cmpeq	r8, r0
 7281 0052 F3D2     		bcs	.L432
 7282              	.L438:
 422:src/int.c     **** 	} else if (sx) {		// both negative
 7283              		.loc 1 422 11 view .LVU2067
 7284 0054 3D46     		mov	r5, r7
 7285 0056 3446     		mov	r4, r6
 434:src/int.c     **** 
 7286              		.loc 1 434 1 view .LVU2068
 7287 0058 2846     		mov	r0, r5
 7288 005a 2146     		mov	r1, r4
 7289 005c 03B0     		add	sp, sp, #12
 7290              		.cfi_remember_state
 7291              		.cfi_def_cfa_offset 28
 7292              		@ sp needed
 7293 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7294              	.LVL568:
 7295              	.L440:
 7296              		.cfi_restore_state
 424:src/int.c     **** 			return x;
 7297              		.loc 1 424 3 is_stmt 1 view .LVU2069
 424:src/int.c     **** 			return x;
 7298              		.loc 1 424 6 is_stmt 0 view .LVU2070
 7299 0062 4B45     		cmp	r3, r9
 7300 0064 08BF     		it	eq
 7301 0066 4045     		cmpeq	r0, r8
 7302 0068 F4D3     		bcc	.L438
 434:src/int.c     **** 
 7303              		.loc 1 434 1 view .LVU2071
 7304 006a 2846     		mov	r0, r5
 7305 006c 2146     		mov	r1, r4
 7306 006e 03B0     		add	sp, sp, #12
 7307              		.cfi_def_cfa_offset 28
 7308              		@ sp needed
 7309 0070 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 434:src/int.c     **** 
 7310              		.loc 1 434 1 view .LVU2072
 7311              		.cfi_endproc
 7312              	.LFE23:
 7314              		.section	.text.intMax,"ax",%progbits
 7315              		.align	1
 7316              		.p2align 2,,3
 7317              		.global	intMax
 7318              		.syntax unified
 7319              		.thumb
ARM GAS  /tmp/ccjGZi8K.s 			page 189


 7320              		.thumb_func
 7321              		.fpu fpv4-sp-d16
 7323              	intMax:
 7324              	.LVL569:
 7325              	.LFB24:
 436:src/int.c     **** #ifndef TINY_BUILD
 7326              		.loc 1 436 56 is_stmt 1 view -0
 7327              		.cfi_startproc
 7328              		@ args = 0, pretend = 0, frame = 8
 7329              		@ frame_needed = 0, uses_anonymous_args = 0
 438:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 7330              		.loc 1 438 2 view .LVU2074
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7331              		.loc 1 439 2 view .LVU2075
 436:src/int.c     **** #ifndef TINY_BUILD
 7332              		.loc 1 436 56 is_stmt 0 view .LVU2076
 7333 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7334              		.cfi_def_cfa_offset 28
 7335              		.cfi_offset 4, -28
 7336              		.cfi_offset 5, -24
 7337              		.cfi_offset 6, -20
 7338              		.cfi_offset 7, -16
 7339              		.cfi_offset 8, -12
 7340              		.cfi_offset 9, -8
 7341              		.cfi_offset 14, -4
 7342 0004 83B0     		sub	sp, sp, #12
 7343              		.cfi_def_cfa_offset 40
 436:src/int.c     **** #ifndef TINY_BUILD
 7344              		.loc 1 436 56 view .LVU2077
 7345 0006 0746     		mov	r7, r0
 7346 0008 0E46     		mov	r6, r1
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7347              		.loc 1 439 30 view .LVU2078
 7348 000a 1046     		mov	r0, r2
 7349              	.LVL570:
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7350              		.loc 1 439 30 view .LVU2079
 7351 000c 1946     		mov	r1, r3
 436:src/int.c     **** #ifndef TINY_BUILD
 7352              		.loc 1 436 56 view .LVU2080
 7353 000e 1546     		mov	r5, r2
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7354              		.loc 1 439 30 view .LVU2081
 7355 0010 6A46     		mov	r2, sp
 7356              	.LVL571:
 436:src/int.c     **** #ifndef TINY_BUILD
 7357              		.loc 1 436 56 view .LVU2082
 7358 0012 1C46     		mov	r4, r3
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7359              		.loc 1 439 30 view .LVU2083
 7360 0014 FFF7FEFF 		bl	extract_value
 7361              	.LVL572:
 7362 0018 0246     		mov	r2, r0
 7363 001a 0B46     		mov	r3, r1
 440:src/int.c     **** 
 7364              		.loc 1 440 30 view .LVU2084
 7365 001c 3846     		mov	r0, r7
ARM GAS  /tmp/ccjGZi8K.s 			page 190


 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7366              		.loc 1 439 30 view .LVU2085
 7367 001e 9046     		mov	r8, r2
 440:src/int.c     **** 
 7368              		.loc 1 440 30 view .LVU2086
 7369 0020 3146     		mov	r1, r6
 7370 0022 01AA     		add	r2, sp, #4
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7371              		.loc 1 439 30 view .LVU2087
 7372 0024 9946     		mov	r9, r3
 7373              	.LVL573:
 440:src/int.c     **** 
 7374              		.loc 1 440 2 is_stmt 1 view .LVU2088
 440:src/int.c     **** 
 7375              		.loc 1 440 30 is_stmt 0 view .LVU2089
 7376 0026 FFF7FEFF 		bl	extract_value
 7377              	.LVL574:
 442:src/int.c     **** 		if (sx)
 7378              		.loc 1 442 9 view .LVU2090
 7379 002a DDF800C0 		ldr	ip, [sp]
 440:src/int.c     **** 
 7380              		.loc 1 440 30 view .LVU2091
 7381 002e 0B46     		mov	r3, r1
 442:src/int.c     **** 		if (sx)
 7382              		.loc 1 442 2 is_stmt 1 view .LVU2092
 442:src/int.c     **** 		if (sx)
 7383              		.loc 1 442 5 is_stmt 0 view .LVU2093
 7384 0030 0199     		ldr	r1, [sp, #4]
 7385 0032 8C45     		cmp	ip, r1
 7386 0034 07D0     		beq	.L442
 443:src/int.c     **** 			return y;
 7387              		.loc 1 443 3 is_stmt 1 view .LVU2094
 443:src/int.c     **** 			return y;
 7388              		.loc 1 443 6 is_stmt 0 view .LVU2095
 7389 0036 BCF1000F 		cmp	ip, #0
 7390 003a 0BD1     		bne	.L449
 7391              	.L443:
 456:src/int.c     **** 
 7392              		.loc 1 456 1 view .LVU2096
 7393 003c 2846     		mov	r0, r5
 7394 003e 2146     		mov	r1, r4
 7395 0040 03B0     		add	sp, sp, #12
 7396              		.cfi_remember_state
 7397              		.cfi_def_cfa_offset 28
 7398              		@ sp needed
 7399 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7400              	.LVL575:
 7401              	.L442:
 7402              		.cfi_restore_state
 445:src/int.c     **** 		if (xv > yv)
 7403              		.loc 1 445 9 is_stmt 1 view .LVU2097
 445:src/int.c     **** 		if (xv > yv)
 7404              		.loc 1 445 12 is_stmt 0 view .LVU2098
 7405 0046 BCF1000F 		cmp	ip, #0
 7406 004a 0AD1     		bne	.L451
 449:src/int.c     **** 			return y;
 7407              		.loc 1 449 3 is_stmt 1 view .LVU2099
ARM GAS  /tmp/ccjGZi8K.s 			page 191


 449:src/int.c     **** 			return y;
 7408              		.loc 1 449 6 is_stmt 0 view .LVU2100
 7409 004c 9945     		cmp	r9, r3
 7410 004e 08BF     		it	eq
 7411 0050 8045     		cmpeq	r8, r0
 7412 0052 F3D2     		bcs	.L443
 7413              	.L449:
 444:src/int.c     **** 	} else if (sx) {		// both negative
 7414              		.loc 1 444 11 view .LVU2101
 7415 0054 3D46     		mov	r5, r7
 7416 0056 3446     		mov	r4, r6
 456:src/int.c     **** 
 7417              		.loc 1 456 1 view .LVU2102
 7418 0058 2846     		mov	r0, r5
 7419 005a 2146     		mov	r1, r4
 7420 005c 03B0     		add	sp, sp, #12
 7421              		.cfi_remember_state
 7422              		.cfi_def_cfa_offset 28
 7423              		@ sp needed
 7424 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7425              	.LVL576:
 7426              	.L451:
 7427              		.cfi_restore_state
 446:src/int.c     **** 			return y;
 7428              		.loc 1 446 3 is_stmt 1 view .LVU2103
 446:src/int.c     **** 			return y;
 7429              		.loc 1 446 6 is_stmt 0 view .LVU2104
 7430 0062 4B45     		cmp	r3, r9
 7431 0064 08BF     		it	eq
 7432 0066 4045     		cmpeq	r0, r8
 7433 0068 F4D3     		bcc	.L449
 456:src/int.c     **** 
 7434              		.loc 1 456 1 view .LVU2105
 7435 006a 2846     		mov	r0, r5
 7436 006c 2146     		mov	r1, r4
 7437 006e 03B0     		add	sp, sp, #12
 7438              		.cfi_def_cfa_offset 28
 7439              		@ sp needed
 7440 0070 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 456:src/int.c     **** 
 7441              		.loc 1 456 1 view .LVU2106
 7442              		.cfi_endproc
 7443              	.LFE24:
 7445              		.section	.text.intGCD,"ax",%progbits
 7446              		.align	1
 7447              		.p2align 2,,3
 7448              		.global	intGCD
 7449              		.syntax unified
 7450              		.thumb
 7451              		.thumb_func
 7452              		.fpu fpv4-sp-d16
 7454              	intGCD:
 7455              	.LVL577:
 7456              	.LFB26:
 485:src/int.c     **** 	int s;
 7457              		.loc 1 485 56 is_stmt 1 view -0
 7458              		.cfi_startproc
ARM GAS  /tmp/ccjGZi8K.s 			page 192


 7459              		@ args = 0, pretend = 0, frame = 8
 7460              		@ frame_needed = 0, uses_anonymous_args = 0
 486:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 7461              		.loc 1 486 2 view .LVU2108
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7462              		.loc 1 487 2 view .LVU2109
 485:src/int.c     **** 	int s;
 7463              		.loc 1 485 56 is_stmt 0 view .LVU2110
 7464 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7465              		.cfi_def_cfa_offset 20
 7466              		.cfi_offset 4, -20
 7467              		.cfi_offset 5, -16
 7468              		.cfi_offset 6, -12
 7469              		.cfi_offset 7, -8
 7470              		.cfi_offset 14, -4
 7471 0002 83B0     		sub	sp, sp, #12
 7472              		.cfi_def_cfa_offset 32
 485:src/int.c     **** 	int s;
 7473              		.loc 1 485 56 view .LVU2111
 7474 0004 0546     		mov	r5, r0
 7475 0006 0C46     		mov	r4, r1
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7476              		.loc 1 487 30 view .LVU2112
 7477 0008 1046     		mov	r0, r2
 7478              	.LVL578:
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7479              		.loc 1 487 30 view .LVU2113
 7480 000a 1946     		mov	r1, r3
 7481 000c 01AA     		add	r2, sp, #4
 7482              	.LVL579:
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7483              		.loc 1 487 30 view .LVU2114
 7484 000e FFF7FEFF 		bl	extract_value
 7485              	.LVL580:
 488:src/int.c     **** 	unsigned long long int v;
 7486              		.loc 1 488 30 view .LVU2115
 7487 0012 01AA     		add	r2, sp, #4
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7488              		.loc 1 487 30 view .LVU2116
 7489 0014 0B46     		mov	r3, r1
 7490 0016 8446     		mov	ip, r0
 488:src/int.c     **** 	unsigned long long int v;
 7491              		.loc 1 488 30 view .LVU2117
 7492 0018 2146     		mov	r1, r4
 7493 001a 2846     		mov	r0, r5
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7494              		.loc 1 487 30 view .LVU2118
 7495 001c 6646     		mov	r6, ip
 7496 001e 1F46     		mov	r7, r3
 7497              	.LVL581:
 488:src/int.c     **** 	unsigned long long int v;
 7498              		.loc 1 488 2 is_stmt 1 view .LVU2119
 488:src/int.c     **** 	unsigned long long int v;
 7499              		.loc 1 488 30 is_stmt 0 view .LVU2120
 7500 0020 FFF7FEFF 		bl	extract_value
 7501              	.LVL582:
 491:src/int.c     **** 		v = yv;
ARM GAS  /tmp/ccjGZi8K.s 			page 193


 7502              		.loc 1 491 5 view .LVU2121
 7503 0024 56EA0703 		orrs	r3, r6, r7
 488:src/int.c     **** 	unsigned long long int v;
 7504              		.loc 1 488 30 view .LVU2122
 7505 0028 0446     		mov	r4, r0
 7506 002a 0D46     		mov	r5, r1
 7507              	.LVL583:
 489:src/int.c     **** 
 7508              		.loc 1 489 2 is_stmt 1 view .LVU2123
 491:src/int.c     **** 		v = yv;
 7509              		.loc 1 491 2 view .LVU2124
 491:src/int.c     **** 		v = yv;
 7510              		.loc 1 491 5 is_stmt 0 view .LVU2125
 7511 002c 04D0     		beq	.L453
 493:src/int.c     **** 		v = xv;
 7512              		.loc 1 493 7 is_stmt 1 view .LVU2126
 493:src/int.c     **** 		v = xv;
 7513              		.loc 1 493 10 is_stmt 0 view .LVU2127
 7514 002e 54EA0503 		orrs	r3, r4, r5
 7515 0032 22D1     		bne	.L454
 7516 0034 3446     		mov	r4, r6
 7517              	.LVL584:
 493:src/int.c     **** 		v = xv;
 7518              		.loc 1 493 10 view .LVU2128
 7519 0036 3D46     		mov	r5, r7
 7520              	.LVL585:
 7521              	.L453:
 497:src/int.c     **** }
 7522              		.loc 1 497 2 is_stmt 1 view .LVU2129
 7523              	.LBB1345:
 7524              	.LBI1345:
 147:src/int.c     **** #ifndef TINY_BUILD
 7525              		.loc 1 147 15 view .LVU2130
 7526              	.LBB1346:
 149:src/int.c     **** 	long long int v = mask_value(x);
 7527              		.loc 1 149 2 view .LVU2131
 7528              	.LBB1347:
 7529              	.LBI1347:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 7530              		.loc 1 39 23 view .LVU2132
 7531              	.LBB1348:
  40:src/int.c     **** }
 7532              		.loc 1 40 2 view .LVU2133
  40:src/int.c     **** }
 7533              		.loc 1 40 2 is_stmt 0 view .LVU2134
 7534              	.LBE1348:
 7535              	.LBE1347:
 150:src/int.c     **** 
 7536              		.loc 1 150 2 is_stmt 1 view .LVU2135
 7537              	.LBB1349:
 7538              	.LBB1350:
 7539              	.LBB1351:
 7540              	.LBB1352:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7541              		.loc 1 44 26 is_stmt 0 view .LVU2136
 7542 0038 174B     		ldr	r3, .L462
 7543              	.LVL586:
ARM GAS  /tmp/ccjGZi8K.s 			page 194


  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7544              		.loc 1 44 26 view .LVU2137
 7545 003a 1B68     		ldr	r3, [r3]
 7546              	.LVL587:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7547              		.loc 1 44 26 view .LVU2138
 7548 003c 93F8E907 		ldrb	r0, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7549              		.loc 1 44 15 view .LVU2139
 7550 0040 00F03F03 		and	r3, r0, #63
 7551              	.LVL588:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7552              		.loc 1 45 26 view .LVU2140
 7553 0044 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7554              		.loc 1 45 5 view .LVU2141
 7555 0046 3E2A     		cmp	r2, #62
 7556              	.LBE1352:
 7557              	.LBE1351:
 7558              	.LBE1350:
 7559              	.LBE1349:
 150:src/int.c     **** 
 7560              		.loc 1 150 20 view .LVU2142
 7561 0048 2046     		mov	r0, r4
 7562 004a 2946     		mov	r1, r5
 7563              	.LVL589:
 7564              	.LBB1357:
 7565              	.LBI1349:
  92:src/int.c     **** #ifndef TINY_BUILD
 7566              		.loc 1 92 15 is_stmt 1 view .LVU2143
 7567              	.LBB1355:
  94:src/int.c     **** 	long long int mask;
 7568              		.loc 1 94 2 view .LVU2144
 7569              	.LBB1354:
 7570              	.LBI1351:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 7571              		.loc 1 43 14 view .LVU2145
 7572              	.LBB1353:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7573              		.loc 1 44 2 view .LVU2146
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7574              		.loc 1 45 2 view .LVU2147
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7575              		.loc 1 45 5 is_stmt 0 view .LVU2148
 7576 004c 11D8     		bhi	.L452
 7577              	.LVL590:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7578              		.loc 1 45 5 view .LVU2149
 7579              	.LBE1353:
 7580              	.LBE1354:
  95:src/int.c     **** 
 7581              		.loc 1 95 2 is_stmt 1 view .LVU2150
  97:src/int.c     **** 		return v;
 7582              		.loc 1 97 2 view .LVU2151
  99:src/int.c     **** 	return v & mask;
 7583              		.loc 1 99 2 view .LVU2152
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 195


 7584              		.loc 1 100 2 view .LVU2153
  99:src/int.c     **** 	return v & mask;
 7585              		.loc 1 99 14 is_stmt 0 view .LVU2154
 7586 004e 0120     		movs	r0, #1
 7587              	.LVL591:
  99:src/int.c     **** 	return v & mask;
 7588              		.loc 1 99 14 view .LVU2155
 7589 0050 A3F12001 		sub	r1, r3, #32
 7590              	.LVL592:
  99:src/int.c     **** 	return v & mask;
 7591              		.loc 1 99 14 view .LVU2156
 7592 0054 C3F12002 		rsb	r2, r3, #32
 7593 0058 00FA01F1 		lsl	r1, r0, r1
 7594 005c 20FA02F2 		lsr	r2, r0, r2
 7595 0060 9840     		lsls	r0, r0, r3
  99:src/int.c     **** 	return v & mask;
 7596              		.loc 1 99 7 view .LVU2157
 7597 0062 10F1FF30 		adds	r0, r0, #-1
  99:src/int.c     **** 	return v & mask;
 7598              		.loc 1 99 14 view .LVU2158
 7599 0066 41EA0201 		orr	r1, r1, r2
  99:src/int.c     **** 	return v & mask;
 7600              		.loc 1 99 7 view .LVU2159
 7601 006a 41F1FF31 		adc	r1, r1, #-1
 100:src/int.c     **** #else
 7602              		.loc 1 100 11 view .LVU2160
 7603 006e 2940     		ands	r1, r1, r5
 7604              	.LVL593:
 100:src/int.c     **** #else
 7605              		.loc 1 100 11 view .LVU2161
 7606              	.LBE1355:
 7607              	.LBE1357:
 152:src/int.c     **** 		return v;
 7608              		.loc 1 152 2 is_stmt 1 view .LVU2162
 7609              	.LBB1358:
 7610              	.LBB1356:
 100:src/int.c     **** #else
 7611              		.loc 1 100 11 is_stmt 0 view .LVU2163
 7612 0070 2040     		ands	r0, r0, r4
 7613              	.LVL594:
 7614              	.L452:
 100:src/int.c     **** #else
 7615              		.loc 1 100 11 view .LVU2164
 7616              	.LBE1356:
 7617              	.LBE1358:
 7618              	.LBE1346:
 7619              	.LBE1345:
 498:src/int.c     **** 
 7620              		.loc 1 498 1 view .LVU2165
 7621 0072 03B0     		add	sp, sp, #12
 7622              		.cfi_remember_state
 7623              		.cfi_def_cfa_offset 20
 7624              		@ sp needed
 7625 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 7626              	.LVL595:
 7627              	.L457:
 7628              		.cfi_restore_state
ARM GAS  /tmp/ccjGZi8K.s 			page 196


 7629              	.LBB1359:
 7630              	.LBB1360:
 498:src/int.c     **** 
 7631              		.loc 1 498 1 view .LVU2166
 7632 0076 0446     		mov	r4, r0
 7633              	.LVL596:
 498:src/int.c     **** 
 7634              		.loc 1 498 1 view .LVU2167
 7635 0078 0D46     		mov	r5, r1
 7636              	.LVL597:
 7637              	.L454:
 7638              	.LBB1361:
 478:src/int.c     **** 		b = a % b;
 7639              		.loc 1 478 3 is_stmt 1 view .LVU2168
 479:src/int.c     **** 		a = t;
 7640              		.loc 1 479 3 view .LVU2169
 479:src/int.c     **** 		a = t;
 7641              		.loc 1 479 5 is_stmt 0 view .LVU2170
 7642 007a 3046     		mov	r0, r6
 7643 007c 3946     		mov	r1, r7
 7644 007e 2246     		mov	r2, r4
 7645 0080 2B46     		mov	r3, r5
 7646 0082 FFF7FEFF 		bl	__aeabi_uldivmod
 7647              	.LVL598:
 7648 0086 1046     		mov	r0, r2
 7649 0088 1946     		mov	r1, r3
 7650              	.LVL599:
 480:src/int.c     **** 	}
 7651              		.loc 1 480 3 is_stmt 1 view .LVU2171
 480:src/int.c     **** 	}
 7652              		.loc 1 480 3 is_stmt 0 view .LVU2172
 7653              	.LBE1361:
 477:src/int.c     **** 		const unsigned long long int t = b;
 7654              		.loc 1 477 8 is_stmt 1 view .LVU2173
 7655 008a 50EA0103 		orrs	r3, r0, r1
 7656 008e 2646     		mov	r6, r4
 7657 0090 2F46     		mov	r7, r5
 7658 0092 F0D1     		bne	.L457
 7659 0094 D0E7     		b	.L453
 7660              	.L463:
 7661 0096 00BF     		.align	2
 7662              	.L462:
 7663 0098 00000000 		.word	main_ram
 7664              	.LBE1360:
 7665              	.LBE1359:
 7666              		.cfi_endproc
 7667              	.LFE26:
 7669              		.section	.text.intLCM,"ax",%progbits
 7670              		.align	1
 7671              		.p2align 2,,3
 7672              		.global	intLCM
 7673              		.syntax unified
 7674              		.thumb
 7675              		.thumb_func
 7676              		.fpu fpv4-sp-d16
 7678              	intLCM:
 7679              	.LVL600:
ARM GAS  /tmp/ccjGZi8K.s 			page 197


 7680              	.LFB27:
 500:src/int.c     **** 	int s;
 7681              		.loc 1 500 56 view -0
 7682              		.cfi_startproc
 7683              		@ args = 0, pretend = 0, frame = 8
 7684              		@ frame_needed = 0, uses_anonymous_args = 0
 501:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 7685              		.loc 1 501 2 view .LVU2175
 502:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7686              		.loc 1 502 2 view .LVU2176
 500:src/int.c     **** 	int s;
 7687              		.loc 1 500 56 is_stmt 0 view .LVU2177
 7688 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7689              		.cfi_def_cfa_offset 36
 7690              		.cfi_offset 4, -36
 7691              		.cfi_offset 5, -32
 7692              		.cfi_offset 6, -28
 7693              		.cfi_offset 7, -24
 7694              		.cfi_offset 8, -20
 7695              		.cfi_offset 9, -16
 7696              		.cfi_offset 10, -12
 7697              		.cfi_offset 11, -8
 7698              		.cfi_offset 14, -4
 7699 0004 83B0     		sub	sp, sp, #12
 7700              		.cfi_def_cfa_offset 48
 500:src/int.c     **** 	int s;
 7701              		.loc 1 500 56 view .LVU2178
 7702 0006 0546     		mov	r5, r0
 7703 0008 0C46     		mov	r4, r1
 502:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7704              		.loc 1 502 30 view .LVU2179
 7705 000a 1046     		mov	r0, r2
 7706              	.LVL601:
 502:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7707              		.loc 1 502 30 view .LVU2180
 7708 000c 1946     		mov	r1, r3
 7709 000e 01AA     		add	r2, sp, #4
 7710              	.LVL602:
 502:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7711              		.loc 1 502 30 view .LVU2181
 7712 0010 FFF7FEFF 		bl	extract_value
 7713              	.LVL603:
 7714 0014 0B46     		mov	r3, r1
 7715 0016 8446     		mov	ip, r0
 7716 0018 6646     		mov	r6, ip
 7717 001a 1F46     		mov	r7, r3
 7718              	.LVL604:
 503:src/int.c     **** 	unsigned long long int gcd;
 7719              		.loc 1 503 2 is_stmt 1 view .LVU2182
 503:src/int.c     **** 	unsigned long long int gcd;
 7720              		.loc 1 503 30 is_stmt 0 view .LVU2183
 7721 001c 2846     		mov	r0, r5
 7722 001e 01AA     		add	r2, sp, #4
 7723 0020 2146     		mov	r1, r4
 7724 0022 FFF7FEFF 		bl	extract_value
 7725              	.LVL605:
 504:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 198


 7726              		.loc 1 504 2 is_stmt 1 view .LVU2184
 506:src/int.c     **** 		return 0;
 7727              		.loc 1 506 2 view .LVU2185
 506:src/int.c     **** 		return 0;
 7728              		.loc 1 506 5 is_stmt 0 view .LVU2186
 7729 0026 56EA0703 		orrs	r3, r6, r7
 7730 002a 45D0     		beq	.L469
 7731 002c 8046     		mov	r8, r0
 7732 002e 8946     		mov	r9, r1
 506:src/int.c     **** 		return 0;
 7733              		.loc 1 506 14 discriminator 1 view .LVU2187
 7734 0030 58EA0903 		orrs	r3, r8, r9
 7735 0034 3DD0     		beq	.L464
 7736 0036 0446     		mov	r4, r0
 7737 0038 0D46     		mov	r5, r1
 7738 003a 3046     		mov	r0, r6
 7739 003c 3946     		mov	r1, r7
 7740              	.L466:
 7741              	.LVL606:
 7742              	.LBB1362:
 7743              	.LBB1363:
 7744              	.LBB1364:
 478:src/int.c     **** 		b = a % b;
 7745              		.loc 1 478 3 is_stmt 1 view .LVU2188
 479:src/int.c     **** 		a = t;
 7746              		.loc 1 479 3 view .LVU2189
 479:src/int.c     **** 		a = t;
 7747              		.loc 1 479 5 is_stmt 0 view .LVU2190
 7748 003e 2246     		mov	r2, r4
 7749 0040 2B46     		mov	r3, r5
 7750 0042 FFF7FEFF 		bl	__aeabi_uldivmod
 7751              	.LVL607:
 479:src/int.c     **** 		a = t;
 7752              		.loc 1 479 5 view .LVU2191
 7753 0046 A346     		mov	fp, r4
 7754 0048 AA46     		mov	r10, r5
 7755 004a 1446     		mov	r4, r2
 7756              	.LVL608:
 479:src/int.c     **** 		a = t;
 7757              		.loc 1 479 5 view .LVU2192
 7758 004c 1D46     		mov	r5, r3
 7759              	.LVL609:
 480:src/int.c     **** 	}
 7760              		.loc 1 480 3 is_stmt 1 view .LVU2193
 480:src/int.c     **** 	}
 7761              		.loc 1 480 3 is_stmt 0 view .LVU2194
 7762              	.LBE1364:
 477:src/int.c     **** 		const unsigned long long int t = b;
 7763              		.loc 1 477 8 is_stmt 1 view .LVU2195
 7764 004e 54EA0503 		orrs	r3, r4, r5
 7765 0052 5846     		mov	r0, fp
 7766 0054 5146     		mov	r1, r10
 7767 0056 F2D1     		bne	.L466
 482:src/int.c     **** }
 7768              		.loc 1 482 2 view .LVU2196
 7769              	.LVL610:
 482:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 199


 7770              		.loc 1 482 2 is_stmt 0 view .LVU2197
 7771              	.LBE1363:
 7772              	.LBE1362:
 509:src/int.c     **** }
 7773              		.loc 1 509 2 is_stmt 1 view .LVU2198
 509:src/int.c     **** }
 7774              		.loc 1 509 35 is_stmt 0 view .LVU2199
 7775 0058 5A46     		mov	r2, fp
 7776 005a 5346     		mov	r3, r10
 7777 005c 3046     		mov	r0, r6
 7778 005e 3946     		mov	r1, r7
 7779 0060 FFF7FEFF 		bl	__aeabi_uldivmod
 7780              	.LVL611:
 7781              	.LBB1365:
 7782              	.LBB1366:
 7783              	.LBB1367:
 7784              	.LBB1368:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7785              		.loc 1 44 26 view .LVU2200
 7786 0064 184B     		ldr	r3, .L473
 7787 0066 1B68     		ldr	r3, [r3]
 7788 0068 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7789              		.loc 1 44 15 view .LVU2201
 7790 006c 02F03F04 		and	r4, r2, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7791              		.loc 1 45 26 view .LVU2202
 7792 0070 631E     		subs	r3, r4, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7793              		.loc 1 45 5 view .LVU2203
 7794 0072 3E2B     		cmp	r3, #62
 7795              	.LBE1368:
 7796              	.LBE1367:
 7797              	.LBE1366:
 7798              	.LBE1365:
 509:src/int.c     **** }
 7799              		.loc 1 509 9 view .LVU2204
 7800 0074 0546     		mov	r5, r0
 7801 0076 0E46     		mov	r6, r1
 7802              	.LVL612:
 7803              	.LBB1373:
 7804              	.LBI1365:
  92:src/int.c     **** #ifndef TINY_BUILD
 7805              		.loc 1 92 15 is_stmt 1 view .LVU2205
 7806              	.LBB1371:
  94:src/int.c     **** 	long long int mask;
 7807              		.loc 1 94 2 view .LVU2206
 7808              	.LBB1370:
 7809              	.LBI1367:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 7810              		.loc 1 43 14 view .LVU2207
 7811              	.LBB1369:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7812              		.loc 1 44 2 view .LVU2208
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7813              		.loc 1 45 2 view .LVU2209
  45:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccjGZi8K.s 			page 200


 7814              		.loc 1 45 5 is_stmt 0 view .LVU2210
 7815 0078 23D8     		bhi	.L467
 7816              	.LVL613:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7817              		.loc 1 45 5 view .LVU2211
 7818              	.LBE1369:
 7819              	.LBE1370:
  95:src/int.c     **** 
 7820              		.loc 1 95 2 is_stmt 1 view .LVU2212
  97:src/int.c     **** 		return v;
 7821              		.loc 1 97 2 view .LVU2213
  99:src/int.c     **** 	return v & mask;
 7822              		.loc 1 99 2 view .LVU2214
  99:src/int.c     **** 	return v & mask;
 7823              		.loc 1 99 14 is_stmt 0 view .LVU2215
 7824 007a 0122     		movs	r2, #1
 7825              	.LVL614:
  99:src/int.c     **** 	return v & mask;
 7826              		.loc 1 99 14 view .LVU2216
 7827 007c A4F12003 		sub	r3, r4, #32
 7828 0080 C4F12005 		rsb	r5, r4, #32
 7829 0084 22FA05F5 		lsr	r5, r2, r5
 7830 0088 02FA03F3 		lsl	r3, r2, r3
 7831 008c A240     		lsls	r2, r2, r4
  99:src/int.c     **** 	return v & mask;
 7832              		.loc 1 99 7 view .LVU2217
 7833 008e 12F1FF32 		adds	r2, r2, #-1
  99:src/int.c     **** 	return v & mask;
 7834              		.loc 1 99 14 view .LVU2218
 7835 0092 43EA0503 		orr	r3, r3, r5
  99:src/int.c     **** 	return v & mask;
 7836              		.loc 1 99 7 view .LVU2219
 7837 0096 43F1FF33 		adc	r3, r3, #-1
 7838              	.LVL615:
 100:src/int.c     **** #else
 7839              		.loc 1 100 2 is_stmt 1 view .LVU2220
 100:src/int.c     **** #else
 7840              		.loc 1 100 11 is_stmt 0 view .LVU2221
 7841 009a 01EA0306 		and	r6, r1, r3
 7842              	.LVL616:
 100:src/int.c     **** #else
 7843              		.loc 1 100 11 view .LVU2222
 7844              	.LBE1371:
 7845              	.LBE1373:
 7846              	.LBB1374:
 7847              	.LBI1374:
 147:src/int.c     **** #ifndef TINY_BUILD
 7848              		.loc 1 147 15 is_stmt 1 view .LVU2223
 7849              	.LBB1375:
 149:src/int.c     **** 	long long int v = mask_value(x);
 7850              		.loc 1 149 2 view .LVU2224
 7851              	.LBE1375:
 7852              	.LBE1374:
  40:src/int.c     **** }
 7853              		.loc 1 40 2 view .LVU2225
 7854              	.LBB1389:
 7855              	.LBB1384:
ARM GAS  /tmp/ccjGZi8K.s 			page 201


 150:src/int.c     **** 
 7856              		.loc 1 150 2 view .LVU2226
 7857              	.LBB1376:
 7858              	.LBI1376:
  92:src/int.c     **** #ifndef TINY_BUILD
 7859              		.loc 1 92 15 view .LVU2227
 7860              	.LBB1377:
  94:src/int.c     **** 	long long int mask;
 7861              		.loc 1 94 2 view .LVU2228
 7862              	.LBE1377:
 7863              	.LBE1376:
 7864              	.LBE1384:
 7865              	.LBE1389:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7866              		.loc 1 44 2 view .LVU2229
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7867              		.loc 1 45 2 view .LVU2230
 7868              	.LBB1390:
 7869              	.LBB1385:
 7870              	.LBB1381:
 7871              	.LBB1378:
  95:src/int.c     **** 
 7872              		.loc 1 95 2 view .LVU2231
  97:src/int.c     **** 		return v;
 7873              		.loc 1 97 2 view .LVU2232
  99:src/int.c     **** 	return v & mask;
 7874              		.loc 1 99 2 view .LVU2233
 100:src/int.c     **** #else
 7875              		.loc 1 100 2 view .LVU2234
 7876              	.LBE1378:
 7877              	.LBE1381:
 7878              	.LBE1385:
 7879              	.LBE1390:
 7880              	.LBB1391:
 7881              	.LBB1372:
 100:src/int.c     **** #else
 7882              		.loc 1 100 11 is_stmt 0 view .LVU2235
 7883 009e 00EA0205 		and	r5, r0, r2
 7884              	.LBE1372:
 7885              	.LBE1391:
 7886              	.LBB1392:
 7887              	.LBB1386:
 7888              	.LBB1382:
 7889              	.LBB1379:
 7890 00a2 09EA0303 		and	r3, r9, r3
 7891              	.LVL617:
 100:src/int.c     **** #else
 7892              		.loc 1 100 11 view .LVU2236
 7893 00a6 08EA0202 		and	r2, r8, r2
 7894              	.LVL618:
 7895              	.L468:
 100:src/int.c     **** #else
 7896              		.loc 1 100 11 view .LVU2237
 7897              	.LBE1379:
 7898              	.LBE1382:
 152:src/int.c     **** 		return v;
 7899              		.loc 1 152 2 is_stmt 1 view .LVU2238
ARM GAS  /tmp/ccjGZi8K.s 			page 202


 152:src/int.c     **** 		return v;
 7900              		.loc 1 152 2 is_stmt 0 view .LVU2239
 7901              	.LBE1386:
 7902              	.LBE1392:
 509:src/int.c     **** }
 7903              		.loc 1 509 9 view .LVU2240
 7904 00aa 2846     		mov	r0, r5
 7905 00ac 3146     		mov	r1, r6
 7906 00ae FFF7FEFF 		bl	intMultiply
 7907              	.LVL619:
 7908              	.L464:
 510:src/int.c     **** 
 7909              		.loc 1 510 1 view .LVU2241
 7910 00b2 03B0     		add	sp, sp, #12
 7911              		.cfi_remember_state
 7912              		.cfi_def_cfa_offset 36
 7913              		@ sp needed
 7914 00b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7915              	.LVL620:
 7916              	.L469:
 7917              		.cfi_restore_state
 507:src/int.c     **** 	gcd = int_gcd(xv, yv);
 7918              		.loc 1 507 10 view .LVU2242
 7919 00b8 3046     		mov	r0, r6
 7920 00ba 3946     		mov	r1, r7
 510:src/int.c     **** 
 7921              		.loc 1 510 1 view .LVU2243
 7922 00bc 03B0     		add	sp, sp, #12
 7923              		.cfi_remember_state
 7924              		.cfi_def_cfa_offset 36
 7925              		@ sp needed
 7926 00be BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7927              	.LVL621:
 7928              	.L467:
 7929              		.cfi_restore_state
 7930              	.LBB1393:
 147:src/int.c     **** #ifndef TINY_BUILD
 7931              		.loc 1 147 15 is_stmt 1 view .LVU2244
 7932              	.LBB1387:
 149:src/int.c     **** 	long long int v = mask_value(x);
 7933              		.loc 1 149 2 view .LVU2245
 7934              	.LBE1387:
 7935              	.LBE1393:
  40:src/int.c     **** }
 7936              		.loc 1 40 2 view .LVU2246
 7937              	.LBB1394:
 7938              	.LBB1388:
 150:src/int.c     **** 
 7939              		.loc 1 150 2 view .LVU2247
 150:src/int.c     **** 
 7940              		.loc 1 150 20 is_stmt 0 view .LVU2248
 7941 00c2 4246     		mov	r2, r8
 7942 00c4 4B46     		mov	r3, r9
 7943              	.LVL622:
 7944              	.LBB1383:
  92:src/int.c     **** #ifndef TINY_BUILD
 7945              		.loc 1 92 15 is_stmt 1 view .LVU2249
ARM GAS  /tmp/ccjGZi8K.s 			page 203


 7946              	.LBB1380:
  94:src/int.c     **** 	long long int mask;
 7947              		.loc 1 94 2 view .LVU2250
 7948              	.LBE1380:
 7949              	.LBE1383:
 7950              	.LBE1388:
 7951              	.LBE1394:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7952              		.loc 1 44 2 view .LVU2251
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 7953              		.loc 1 45 2 view .LVU2252
 7954 00c6 F0E7     		b	.L468
 7955              	.L474:
 7956              		.align	2
 7957              	.L473:
 7958 00c8 00000000 		.word	main_ram
 7959              		.cfi_endproc
 7960              	.LFE27:
 7962              		.section	.text.intSqr,"ax",%progbits
 7963              		.align	1
 7964              		.p2align 2,,3
 7965              		.global	intSqr
 7966              		.syntax unified
 7967              		.thumb
 7968              		.thumb_func
 7969              		.fpu fpv4-sp-d16
 7971              	intSqr:
 7972              	.LVL623:
 7973              	.LFB28:
 512:src/int.c     **** 	return intMultiply(x, x);
 7974              		.loc 1 512 39 view -0
 7975              		.cfi_startproc
 7976              		@ args = 0, pretend = 0, frame = 0
 7977              		@ frame_needed = 0, uses_anonymous_args = 0
 7978              		@ link register save eliminated.
 513:src/int.c     **** }
 7979              		.loc 1 513 2 view .LVU2254
 512:src/int.c     **** 	return intMultiply(x, x);
 7980              		.loc 1 512 39 is_stmt 0 view .LVU2255
 7981 0000 0246     		mov	r2, r0
 7982 0002 0B46     		mov	r3, r1
 513:src/int.c     **** }
 7983              		.loc 1 513 9 view .LVU2256
 7984 0004 FFF7FEBF 		b	intMultiply
 7985              	.LVL624:
 513:src/int.c     **** }
 7986              		.loc 1 513 9 view .LVU2257
 7987              		.cfi_endproc
 7988              	.LFE28:
 7990              		.section	.text.intCube,"ax",%progbits
 7991              		.align	1
 7992              		.p2align 2,,3
 7993              		.global	intCube
 7994              		.syntax unified
 7995              		.thumb
 7996              		.thumb_func
 7997              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccjGZi8K.s 			page 204


 7999              	intCube:
 8000              	.LVL625:
 8001              	.LFB29:
 516:src/int.c     **** #ifndef TINY_BUILD
 8002              		.loc 1 516 40 is_stmt 1 view -0
 8003              		.cfi_startproc
 8004              		@ args = 0, pretend = 0, frame = 8
 8005              		@ frame_needed = 0, uses_anonymous_args = 0
 518:src/int.c     **** 	int overflow = get_overflow();
 8006              		.loc 1 518 2 view .LVU2259
 516:src/int.c     **** #ifndef TINY_BUILD
 8007              		.loc 1 516 40 is_stmt 0 view .LVU2260
 8008 0000 70B5     		push	{r4, r5, r6, lr}
 8009              		.cfi_def_cfa_offset 16
 8010              		.cfi_offset 4, -16
 8011              		.cfi_offset 5, -12
 8012              		.cfi_offset 6, -8
 8013              		.cfi_offset 14, -4
 518:src/int.c     **** 	int overflow = get_overflow();
 8014              		.loc 1 518 20 view .LVU2261
 8015 0002 0246     		mov	r2, r0
 516:src/int.c     **** #ifndef TINY_BUILD
 8016              		.loc 1 516 40 view .LVU2262
 8017 0004 82B0     		sub	sp, sp, #8
 8018              		.cfi_def_cfa_offset 24
 518:src/int.c     **** 	int overflow = get_overflow();
 8019              		.loc 1 518 20 view .LVU2263
 8020 0006 0B46     		mov	r3, r1
 516:src/int.c     **** #ifndef TINY_BUILD
 8021              		.loc 1 516 40 view .LVU2264
 8022 0008 0446     		mov	r4, r0
 8023 000a 0D46     		mov	r5, r1
 518:src/int.c     **** 	int overflow = get_overflow();
 8024              		.loc 1 518 20 view .LVU2265
 8025 000c FFF7FEFF 		bl	intMultiply
 8026              	.LVL626:
 518:src/int.c     **** 	int overflow = get_overflow();
 8027              		.loc 1 518 20 view .LVU2266
 8028 0010 0190     		str	r0, [sp, #4]
 8029              	.LBB1395:
 8030              	.LBB1396:
  64:src/int.c     **** }
 8031              		.loc 1 64 9 view .LVU2267
 8032 0012 6920     		movs	r0, #105
 8033              	.LBE1396:
 8034              	.LBE1395:
 518:src/int.c     **** 	int overflow = get_overflow();
 8035              		.loc 1 518 20 view .LVU2268
 8036 0014 0091     		str	r1, [sp]
 8037              	.LVL627:
 519:src/int.c     **** 
 8038              		.loc 1 519 2 is_stmt 1 view .LVU2269
 8039              	.LBB1399:
 8040              	.LBI1395:
  63:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
 8041              		.loc 1 63 5 view .LVU2270
 8042              	.LBB1397:
ARM GAS  /tmp/ccjGZi8K.s 			page 205


  64:src/int.c     **** }
 8043              		.loc 1 64 2 view .LVU2271
  64:src/int.c     **** }
 8044              		.loc 1 64 9 is_stmt 0 view .LVU2272
 8045 0016 FFF7FEFF 		bl	get_user_flag
 8046              	.LVL628:
  64:src/int.c     **** }
 8047              		.loc 1 64 9 view .LVU2273
 8048              	.LBE1397:
 8049              	.LBE1399:
 521:src/int.c     **** 	if (overflow)
 8050              		.loc 1 521 6 view .LVU2274
 8051 001a DDE90032 		ldrd	r3, r2, [sp]
 8052              	.LBB1400:
 8053              	.LBB1398:
  64:src/int.c     **** }
 8054              		.loc 1 64 9 view .LVU2275
 8055 001e 0646     		mov	r6, r0
 8056              	.LBE1398:
 8057              	.LBE1400:
 521:src/int.c     **** 	if (overflow)
 8058              		.loc 1 521 6 view .LVU2276
 8059 0020 2946     		mov	r1, r5
 8060 0022 2046     		mov	r0, r4
 8061              	.LVL629:
 521:src/int.c     **** 	if (overflow)
 8062              		.loc 1 521 2 is_stmt 1 view .LVU2277
 521:src/int.c     **** 	if (overflow)
 8063              		.loc 1 521 6 is_stmt 0 view .LVU2278
 8064 0024 FFF7FEFF 		bl	intMultiply
 8065              	.LVL630:
 522:src/int.c     **** 		set_overflow(1);
 8066              		.loc 1 522 2 is_stmt 1 view .LVU2279
 522:src/int.c     **** 		set_overflow(1);
 8067              		.loc 1 522 5 is_stmt 0 view .LVU2280
 8068 0028 0EB9     		cbnz	r6, .L482
 528:src/int.c     **** 
 8069              		.loc 1 528 1 view .LVU2281
 8070 002a 02B0     		add	sp, sp, #8
 8071              		.cfi_remember_state
 8072              		.cfi_def_cfa_offset 16
 8073              		@ sp needed
 8074 002c 70BD     		pop	{r4, r5, r6, pc}
 8075              	.LVL631:
 8076              	.L482:
 8077              		.cfi_restore_state
 528:src/int.c     **** 
 8078              		.loc 1 528 1 view .LVU2282
 8079 002e CDE90001 		strd	r0, r1, [sp]
 523:src/int.c     **** 	return y;
 8080              		.loc 1 523 3 is_stmt 1 view .LVU2283
 8081              	.LVL632:
 8082              	.LBB1401:
 8083              	.LBI1401:
  67:src/int.c     **** #ifndef TINY_BUILD
 8084              		.loc 1 67 6 view .LVU2284
 8085              	.LBB1402:
ARM GAS  /tmp/ccjGZi8K.s 			page 206


  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8086              		.loc 1 69 2 view .LVU2285
 8087 0032 FFF7FEFF 		bl	set_overflow.part.0
 8088              	.LVL633:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8089              		.loc 1 69 2 is_stmt 0 view .LVU2286
 8090 0036 DDE90001 		ldrd	r0, r1, [sp]
 8091              	.LVL634:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8092              		.loc 1 69 2 view .LVU2287
 8093              	.LBE1402:
 8094              	.LBE1401:
 524:src/int.c     **** #else
 8095              		.loc 1 524 2 is_stmt 1 view .LVU2288
 528:src/int.c     **** 
 8096              		.loc 1 528 1 is_stmt 0 view .LVU2289
 8097 003a 02B0     		add	sp, sp, #8
 8098              		.cfi_def_cfa_offset 16
 8099              	.LVL635:
 528:src/int.c     **** 
 8100              		.loc 1 528 1 view .LVU2290
 8101              		@ sp needed
 8102 003c 70BD     		pop	{r4, r5, r6, pc}
 528:src/int.c     **** 
 8103              		.loc 1 528 1 view .LVU2291
 8104              		.cfi_endproc
 8105              	.LFE29:
 8107 003e 00BF     		.section	.text.intChs,"ax",%progbits
 8108              		.align	1
 8109              		.p2align 2,,3
 8110              		.global	intChs
 8111              		.syntax unified
 8112              		.thumb
 8113              		.thumb_func
 8114              		.fpu fpv4-sp-d16
 8116              	intChs:
 8117              	.LVL636:
 8118              	.LFB30:
 530:src/int.c     **** #ifndef TINY_BUILD
 8119              		.loc 1 530 39 is_stmt 1 view -0
 8120              		.cfi_startproc
 8121              		@ args = 0, pretend = 0, frame = 8
 8122              		@ frame_needed = 0, uses_anonymous_args = 0
 532:src/int.c     **** 	int sx;
 8123              		.loc 1 532 2 view .LVU2293
 8124              	.LBB1403:
 8125              	.LBI1403:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 8126              		.loc 1 39 23 view .LVU2294
 8127              	.LBB1404:
  40:src/int.c     **** }
 8128              		.loc 1 40 2 view .LVU2295
 8129              	.LBE1404:
 8130              	.LBE1403:
 530:src/int.c     **** #ifndef TINY_BUILD
 8131              		.loc 1 530 39 is_stmt 0 view .LVU2296
 8132 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/ccjGZi8K.s 			page 207


 8133              		.cfi_def_cfa_offset 28
 8134              		.cfi_offset 4, -28
 8135              		.cfi_offset 5, -24
 8136              		.cfi_offset 6, -20
 8137              		.cfi_offset 7, -16
 8138              		.cfi_offset 8, -12
 8139              		.cfi_offset 9, -8
 8140              		.cfi_offset 14, -4
 8141              	.LBB1408:
 8142              	.LBB1405:
  40:src/int.c     **** }
 8143              		.loc 1 40 39 view .LVU2297
 8144 0004 334D     		ldr	r5, .L493
 8145 0006 2B68     		ldr	r3, [r5]
 8146              	.LBE1405:
 8147              	.LBE1408:
 530:src/int.c     **** #ifndef TINY_BUILD
 8148              		.loc 1 530 39 view .LVU2298
 8149 0008 83B0     		sub	sp, sp, #12
 8150              		.cfi_def_cfa_offset 40
 8151              	.LBB1409:
 8152              	.LBB1406:
  40:src/int.c     **** }
 8153              		.loc 1 40 39 view .LVU2299
 8154 000a 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 8155              	.LBE1406:
 8156              	.LBE1409:
 534:src/int.c     **** 
 8157              		.loc 1 534 30 view .LVU2300
 8158 000e 01AA     		add	r2, sp, #4
 530:src/int.c     **** #ifndef TINY_BUILD
 8159              		.loc 1 530 39 view .LVU2301
 8160 0010 8046     		mov	r8, r0
 8161 0012 8946     		mov	r9, r1
 534:src/int.c     **** 
 8162              		.loc 1 534 30 view .LVU2302
 8163 0014 FFF7FEFF 		bl	extract_value
 8164              	.LVL637:
 8165              	.LBB1410:
 8166              	.LBB1407:
  40:src/int.c     **** }
 8167              		.loc 1 40 9 view .LVU2303
 8168 0018 C4F38104 		ubfx	r4, r4, #2, #2
 8169              	.LVL638:
  40:src/int.c     **** }
 8170              		.loc 1 40 9 view .LVU2304
 8171              	.LBE1407:
 8172              	.LBE1410:
 533:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 8173              		.loc 1 533 2 is_stmt 1 view .LVU2305
 534:src/int.c     **** 
 8174              		.loc 1 534 2 view .LVU2306
 536:src/int.c     **** 		set_overflow(1);
 8175              		.loc 1 536 5 is_stmt 0 view .LVU2307
 8176 001c 022C     		cmp	r4, #2
 534:src/int.c     **** 
 8177              		.loc 1 534 30 view .LVU2308
ARM GAS  /tmp/ccjGZi8K.s 			page 208


 8178 001e 0646     		mov	r6, r0
 8179 0020 0F46     		mov	r7, r1
 8180              	.LVL639:
 536:src/int.c     **** 		set_overflow(1);
 8181              		.loc 1 536 2 is_stmt 1 view .LVU2309
 536:src/int.c     **** 		set_overflow(1);
 8182              		.loc 1 536 5 is_stmt 0 view .LVU2310
 8183 0022 2DD0     		beq	.L484
 536:src/int.c     **** 		set_overflow(1);
 8184              		.loc 1 536 28 discriminator 1 view .LVU2311
 8185 0024 CCB9     		cbnz	r4, .L485
 8186              	.LBB1411:
 8187              	.LBI1411:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 8188              		.loc 1 110 22 is_stmt 1 view .LVU2312
 8189              	.LBB1412:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 8190              		.loc 1 111 2 view .LVU2313
 8191              	.LBB1413:
 8192              	.LBI1413:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 8193              		.loc 1 43 14 view .LVU2314
 8194              	.LBB1414:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8195              		.loc 1 44 2 view .LVU2315
 8196              	.LVL640:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8197              		.loc 1 45 2 view .LVU2316
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8198              		.loc 1 44 26 is_stmt 0 view .LVU2317
 8199 0026 2B68     		ldr	r3, [r5]
 8200 0028 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 8201              	.LVL641:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8202              		.loc 1 44 15 view .LVU2318
 8203 002c 03F03F03 		and	r3, r3, #63
 8204              	.LVL642:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8205              		.loc 1 45 26 view .LVU2319
 8206 0030 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8207              		.loc 1 45 5 view .LVU2320
 8208 0032 3E2A     		cmp	r2, #62
 8209 0034 4FF00000 		mov	r0, #0
 8210 0038 49D8     		bhi	.L488
 8211 003a 0124     		movs	r4, #1
 8212 003c 213B     		subs	r3, r3, #33
 8213 003e C2F1200C 		rsb	ip, r2, #32
 8214 0042 04FA03F1 		lsl	r1, r4, r3
 8215 0046 24FA0CFC 		lsr	ip, r4, ip
 8216 004a 41EA0C01 		orr	r1, r1, ip
 8217 004e 04FA02F0 		lsl	r0, r4, r2
 8218              	.L486:
 8219              	.LVL643:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8220              		.loc 1 45 5 view .LVU2321
 8221              	.LBE1414:
ARM GAS  /tmp/ccjGZi8K.s 			page 209


 8222              	.LBE1413:
 112:src/int.c     **** 	return bit;
 8223              		.loc 1 112 2 is_stmt 1 view .LVU2322
 113:src/int.c     **** }
 8224              		.loc 1 113 2 view .LVU2323
 113:src/int.c     **** }
 8225              		.loc 1 113 2 is_stmt 0 view .LVU2324
 8226              	.LBE1412:
 8227              	.LBE1411:
 536:src/int.c     **** 		set_overflow(1);
 8228              		.loc 1 536 51 view .LVU2325
 8229 0052 8945     		cmp	r9, r1
 8230 0054 08BF     		it	eq
 8231 0056 8045     		cmpeq	r8, r0
 8232 0058 12D0     		beq	.L484
 8233              	.L485:
 540:src/int.c     **** 	return build_value(xv, !sx);
 8234              		.loc 1 540 2 is_stmt 1 view .LVU2326
 8235              	.LVL644:
 8236              	.LBB1418:
 8237              	.LBI1418:
  67:src/int.c     **** #ifndef TINY_BUILD
 8238              		.loc 1 67 6 view .LVU2327
 8239              	.LBB1419:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8240              		.loc 1 69 2 view .LVU2328
  72:src/int.c     **** #endif
 8241              		.loc 1 72 3 view .LVU2329
 8242 005a 5221     		movs	r1, #82
 8243 005c 6920     		movs	r0, #105
 8244 005e FFF7FEFF 		bl	cmdflag
 8245              	.LVL645:
  72:src/int.c     **** #endif
 8246              		.loc 1 72 3 is_stmt 0 view .LVU2330
 8247              	.LBE1419:
 8248              	.LBE1418:
 541:src/int.c     **** #else
 8249              		.loc 1 541 2 is_stmt 1 view .LVU2331
 541:src/int.c     **** #else
 8250              		.loc 1 541 9 is_stmt 0 view .LVU2332
 8251 0062 019A     		ldr	r2, [sp, #4]
 8252 0064 B2FA82F2 		clz	r2, r2
 8253 0068 3046     		mov	r0, r6
 8254 006a 3946     		mov	r1, r7
 8255 006c 5209     		lsrs	r2, r2, #5
 8256 006e FFF7FEFF 		bl	build_value
 8257              	.LVL646:
 8258 0072 0646     		mov	r6, r0
 8259              	.LVL647:
 541:src/int.c     **** #else
 8260              		.loc 1 541 9 view .LVU2333
 8261 0074 0F46     		mov	r7, r1
 8262              	.L483:
 545:src/int.c     **** 
 8263              		.loc 1 545 1 view .LVU2334
 8264 0076 3046     		mov	r0, r6
 8265 0078 3946     		mov	r1, r7
ARM GAS  /tmp/ccjGZi8K.s 			page 210


 8266 007a 03B0     		add	sp, sp, #12
 8267              		.cfi_remember_state
 8268              		.cfi_def_cfa_offset 28
 8269              		@ sp needed
 8270 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8271              	.LVL648:
 8272              	.L484:
 8273              		.cfi_restore_state
 537:src/int.c     **** 		return mask_value(-(signed long long int)xv);
 8274              		.loc 1 537 3 is_stmt 1 view .LVU2335
 8275              	.LBB1420:
 8276              	.LBI1420:
  67:src/int.c     **** #ifndef TINY_BUILD
 8277              		.loc 1 67 6 view .LVU2336
 8278              	.LBB1421:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8279              		.loc 1 69 2 view .LVU2337
 8280 0080 FFF7FEFF 		bl	set_overflow.part.0
 8281              	.LVL649:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8282              		.loc 1 69 2 is_stmt 0 view .LVU2338
 8283              	.LBE1421:
 8284              	.LBE1420:
 538:src/int.c     **** 	}
 8285              		.loc 1 538 3 is_stmt 1 view .LVU2339
 8286              	.LBB1422:
 8287              	.LBB1423:
 8288              	.LBB1424:
 8289              	.LBB1425:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8290              		.loc 1 44 26 is_stmt 0 view .LVU2340
 8291 0084 2B68     		ldr	r3, [r5]
 8292 0086 93F8E917 		ldrb	r1, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8293              		.loc 1 44 15 view .LVU2341
 8294 008a 01F03F04 		and	r4, r1, #63
 8295              	.LBE1425:
 8296              	.LBE1424:
 8297              	.LBE1423:
 8298              	.LBE1422:
 538:src/int.c     **** 	}
 8299              		.loc 1 538 10 view .LVU2342
 8300 008e 7642     		rsbs	r6, r6, #0
 8301              	.LVL650:
 8302              	.LBB1432:
 8303              	.LBB1430:
 8304              	.LBB1428:
 8305              	.LBB1426:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8306              		.loc 1 45 26 view .LVU2343
 8307 0090 04F1FF31 		add	r1, r4, #-1
 8308              	.LBE1426:
 8309              	.LBE1428:
 8310              	.LBE1430:
 8311              	.LBE1432:
 538:src/int.c     **** 	}
 8312              		.loc 1 538 10 view .LVU2344
ARM GAS  /tmp/ccjGZi8K.s 			page 211


 8313 0094 67EB4707 		sbc	r7, r7, r7, lsl #1
 8314              	.LVL651:
 8315              	.LBB1433:
 8316              	.LBI1422:
  92:src/int.c     **** #ifndef TINY_BUILD
 8317              		.loc 1 92 15 is_stmt 1 view .LVU2345
 8318              	.LBB1431:
  94:src/int.c     **** 	long long int mask;
 8319              		.loc 1 94 2 view .LVU2346
 8320              	.LBB1429:
 8321              	.LBI1424:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 8322              		.loc 1 43 14 view .LVU2347
 8323              	.LBB1427:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8324              		.loc 1 44 2 view .LVU2348
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8325              		.loc 1 45 2 view .LVU2349
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8326              		.loc 1 45 5 is_stmt 0 view .LVU2350
 8327 0098 3E29     		cmp	r1, #62
 8328 009a ECD8     		bhi	.L483
 8329              	.LVL652:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8330              		.loc 1 45 5 view .LVU2351
 8331              	.LBE1427:
 8332              	.LBE1429:
  95:src/int.c     **** 
 8333              		.loc 1 95 2 is_stmt 1 view .LVU2352
  97:src/int.c     **** 		return v;
 8334              		.loc 1 97 2 view .LVU2353
  99:src/int.c     **** 	return v & mask;
 8335              		.loc 1 99 2 view .LVU2354
 100:src/int.c     **** #else
 8336              		.loc 1 100 2 view .LVU2355
  99:src/int.c     **** 	return v & mask;
 8337              		.loc 1 99 14 is_stmt 0 view .LVU2356
 8338 009c 0121     		movs	r1, #1
 8339 009e A4F12000 		sub	r0, r4, #32
 8340 00a2 C4F12005 		rsb	r5, r4, #32
 8341 00a6 21FA05F5 		lsr	r5, r1, r5
 8342 00aa 01FA00F0 		lsl	r0, r1, r0
 8343 00ae A140     		lsls	r1, r1, r4
  99:src/int.c     **** 	return v & mask;
 8344              		.loc 1 99 7 view .LVU2357
 8345 00b0 11F1FF31 		adds	r1, r1, #-1
  99:src/int.c     **** 	return v & mask;
 8346              		.loc 1 99 14 view .LVU2358
 8347 00b4 40EA0500 		orr	r0, r0, r5
  99:src/int.c     **** 	return v & mask;
 8348              		.loc 1 99 7 view .LVU2359
 8349 00b8 40F1FF30 		adc	r0, r0, #-1
 100:src/int.c     **** #else
 8350              		.loc 1 100 11 view .LVU2360
 8351 00bc 3840     		ands	r0, r0, r7
 8352 00be 3140     		ands	r1, r1, r6
 8353 00c0 0E46     		mov	r6, r1
ARM GAS  /tmp/ccjGZi8K.s 			page 212


 8354              	.LVL653:
 100:src/int.c     **** #else
 8355              		.loc 1 100 11 view .LVU2361
 8356 00c2 0746     		mov	r7, r0
 8357              	.LBE1431:
 8358              	.LBE1433:
 545:src/int.c     **** 
 8359              		.loc 1 545 1 view .LVU2362
 8360 00c4 3946     		mov	r1, r7
 8361 00c6 3046     		mov	r0, r6
 8362 00c8 03B0     		add	sp, sp, #12
 8363              		.cfi_remember_state
 8364              		.cfi_def_cfa_offset 28
 8365              		@ sp needed
 8366 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8367              	.LVL654:
 8368              	.L488:
 8369              		.cfi_restore_state
 8370              	.LBB1434:
 8371              	.LBB1417:
 8372              	.LBB1416:
 8373              	.LBB1415:
 545:src/int.c     **** 
 8374              		.loc 1 545 1 view .LVU2363
 8375 00ce 4FF00041 		mov	r1, #-2147483648
 8376 00d2 BEE7     		b	.L486
 8377              	.L494:
 8378              		.align	2
 8379              	.L493:
 8380 00d4 00000000 		.word	main_ram
 8381              	.LBE1415:
 8382              	.LBE1416:
 8383              	.LBE1417:
 8384              	.LBE1434:
 8385              		.cfi_endproc
 8386              	.LFE30:
 8388              		.section	.text.intAbs,"ax",%progbits
 8389              		.align	1
 8390              		.p2align 2,,3
 8391              		.global	intAbs
 8392              		.syntax unified
 8393              		.thumb
 8394              		.thumb_func
 8395              		.fpu fpv4-sp-d16
 8397              	intAbs:
 8398              	.LVL655:
 8399              	.LFB31:
 547:src/int.c     **** #ifndef TINY_BUILD
 8400              		.loc 1 547 39 is_stmt 1 view -0
 8401              		.cfi_startproc
 8402              		@ args = 0, pretend = 0, frame = 8
 8403              		@ frame_needed = 0, uses_anonymous_args = 0
 549:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 8404              		.loc 1 549 2 view .LVU2365
 550:src/int.c     **** 
 8405              		.loc 1 550 2 view .LVU2366
 547:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccjGZi8K.s 			page 213


 8406              		.loc 1 547 39 is_stmt 0 view .LVU2367
 8407 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8408              		.cfi_def_cfa_offset 24
 8409              		.cfi_offset 4, -24
 8410              		.cfi_offset 5, -20
 8411              		.cfi_offset 6, -16
 8412              		.cfi_offset 7, -12
 8413              		.cfi_offset 8, -8
 8414              		.cfi_offset 14, -4
 8415 0004 82B0     		sub	sp, sp, #8
 8416              		.cfi_def_cfa_offset 32
 550:src/int.c     **** 
 8417              		.loc 1 550 30 view .LVU2368
 8418 0006 01AA     		add	r2, sp, #4
 547:src/int.c     **** #ifndef TINY_BUILD
 8419              		.loc 1 547 39 view .LVU2369
 8420 0008 0646     		mov	r6, r0
 8421 000a 0F46     		mov	r7, r1
 550:src/int.c     **** 
 8422              		.loc 1 550 30 view .LVU2370
 8423 000c FFF7FEFF 		bl	extract_value
 8424              	.LVL656:
 550:src/int.c     **** 
 8425              		.loc 1 550 30 view .LVU2371
 8426 0010 0546     		mov	r5, r0
 8427 0012 0C46     		mov	r4, r1
 8428              	.LBB1435:
 8429              	.LBB1436:
  72:src/int.c     **** #endif
 8430              		.loc 1 72 3 view .LVU2372
 8431 0014 6920     		movs	r0, #105
 8432 0016 5221     		movs	r1, #82
 8433              	.LVL657:
  72:src/int.c     **** #endif
 8434              		.loc 1 72 3 view .LVU2373
 8435              	.LBE1436:
 8436              	.LBE1435:
 552:src/int.c     **** 	if (int_mode() == MODE_2COMP && x == topbit_mask()) {
 8437              		.loc 1 552 2 is_stmt 1 view .LVU2374
 8438              	.LBB1438:
 8439              	.LBI1435:
  67:src/int.c     **** #ifndef TINY_BUILD
 8440              		.loc 1 67 6 view .LVU2375
 8441              	.LBB1437:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8442              		.loc 1 69 2 view .LVU2376
  72:src/int.c     **** #endif
 8443              		.loc 1 72 3 view .LVU2377
 8444 0018 FFF7FEFF 		bl	cmdflag
 8445              	.LVL658:
  72:src/int.c     **** #endif
 8446              		.loc 1 72 3 is_stmt 0 view .LVU2378
 8447              	.LBE1437:
 8448              	.LBE1438:
 553:src/int.c     **** 		set_overflow(1);
 8449              		.loc 1 553 2 is_stmt 1 view .LVU2379
 8450              	.LBB1439:
ARM GAS  /tmp/ccjGZi8K.s 			page 214


 8451              	.LBI1439:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 8452              		.loc 1 39 23 view .LVU2380
 8453              	.LBB1440:
  40:src/int.c     **** }
 8454              		.loc 1 40 2 view .LVU2381
  40:src/int.c     **** }
 8455              		.loc 1 40 33 is_stmt 0 view .LVU2382
 8456 001c 254B     		ldr	r3, .L510
 8457 001e 1B68     		ldr	r3, [r3]
  40:src/int.c     **** }
 8458              		.loc 1 40 39 view .LVU2383
 8459 0020 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 8460              	.LBE1440:
 8461              	.LBE1439:
 8462              	.LBB1441:
 8463              	.LBB1442:
 8464              	.LBB1443:
 8465              	.LBB1444:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8466              		.loc 1 44 26 view .LVU2384
 8467 0024 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 8468              	.LBE1444:
 8469              	.LBE1443:
 8470              	.LBE1442:
 8471              	.LBE1441:
 553:src/int.c     **** 		set_overflow(1);
 8472              		.loc 1 553 5 view .LVU2385
 8473 0028 12F00C0F 		tst	r2, #12
 8474              	.LBB1452:
 8475              	.LBB1449:
 8476              	.LBB1447:
 8477              	.LBB1445:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8478              		.loc 1 44 15 view .LVU2386
 8479 002c 03F03F02 		and	r2, r3, #63
 8480              	.LVL659:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8481              		.loc 1 45 2 is_stmt 1 view .LVU2387
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8482              		.loc 1 45 26 is_stmt 0 view .LVU2388
 8483 0030 02F1FF33 		add	r3, r2, #-1
 8484              	.LBE1445:
 8485              	.LBE1447:
 8486              	.LBE1449:
 8487              	.LBE1452:
 553:src/int.c     **** 		set_overflow(1);
 8488              		.loc 1 553 5 view .LVU2389
 8489 0034 2AD1     		bne	.L496
 8490              	.LBB1453:
 8491              	.LBI1441:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 8492              		.loc 1 110 22 is_stmt 1 view .LVU2390
 8493              	.LBB1450:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 8494              		.loc 1 111 2 view .LVU2391
 8495              	.LBB1448:
ARM GAS  /tmp/ccjGZi8K.s 			page 215


 8496              	.LBI1443:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 8497              		.loc 1 43 14 view .LVU2392
 8498              	.LBB1446:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8499              		.loc 1 44 2 view .LVU2393
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8500              		.loc 1 45 5 is_stmt 0 view .LVU2394
 8501 0036 3E2B     		cmp	r3, #62
 8502 0038 2FD8     		bhi	.L509
 8503              	.LVL660:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8504              		.loc 1 45 5 view .LVU2395
 8505              	.LBE1446:
 8506              	.LBE1448:
 112:src/int.c     **** 	return bit;
 8507              		.loc 1 112 2 is_stmt 1 view .LVU2396
 113:src/int.c     **** }
 8508              		.loc 1 113 2 view .LVU2397
 112:src/int.c     **** 	return bit;
 8509              		.loc 1 112 16 is_stmt 0 view .LVU2398
 8510 003a 4FF0010C 		mov	ip, #1
 8511 003e A2F12108 		sub	r8, r2, #33
 8512 0042 C3F1200E 		rsb	lr, r3, #32
 8513 0046 0CFA08F1 		lsl	r1, ip, r8
 8514 004a 2CFA0EFE 		lsr	lr, ip, lr
 8515 004e 41EA0E01 		orr	r1, r1, lr
 8516 0052 0CFA03F0 		lsl	r0, ip, r3
 8517              	.LBE1450:
 8518              	.LBE1453:
 553:src/int.c     **** 		set_overflow(1);
 8519              		.loc 1 553 31 view .LVU2399
 8520 0056 8F42     		cmp	r7, r1
 8521 0058 08BF     		it	eq
 8522 005a 8642     		cmpeq	r6, r0
 8523 005c 25D0     		beq	.L501
 557:src/int.c     **** #else
 8524              		.loc 1 557 2 is_stmt 1 view .LVU2400
 8525              	.LVL661:
 8526              	.LBB1454:
 8527              	.LBI1454:
 147:src/int.c     **** #ifndef TINY_BUILD
 8528              		.loc 1 147 15 view .LVU2401
 8529              	.LBB1455:
 149:src/int.c     **** 	long long int v = mask_value(x);
 8530              		.loc 1 149 2 view .LVU2402
 8531              	.LBE1455:
 8532              	.LBE1454:
  40:src/int.c     **** }
 8533              		.loc 1 40 2 view .LVU2403
 8534              	.LBB1477:
 8535              	.LBB1472:
 150:src/int.c     **** 
 8536              		.loc 1 150 2 view .LVU2404
 150:src/int.c     **** 
 8537              		.loc 1 150 20 is_stmt 0 view .LVU2405
 8538 005e 2846     		mov	r0, r5
ARM GAS  /tmp/ccjGZi8K.s 			page 216


 8539 0060 2146     		mov	r1, r4
 8540              	.LVL662:
 8541              	.LBB1456:
 8542              	.LBI1456:
  92:src/int.c     **** #ifndef TINY_BUILD
 8543              		.loc 1 92 15 is_stmt 1 view .LVU2406
 8544              	.LBB1457:
  94:src/int.c     **** 	long long int mask;
 8545              		.loc 1 94 2 view .LVU2407
 8546              	.LBB1458:
 8547              	.LBI1458:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 8548              		.loc 1 43 14 view .LVU2408
 8549              	.LBB1459:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8550              		.loc 1 44 2 view .LVU2409
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8551              		.loc 1 45 2 view .LVU2410
 8552              	.L500:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8553              		.loc 1 45 2 is_stmt 0 view .LVU2411
 8554              	.LBE1459:
 8555              	.LBE1458:
  95:src/int.c     **** 
 8556              		.loc 1 95 2 is_stmt 1 view .LVU2412
  97:src/int.c     **** 		return v;
 8557              		.loc 1 97 2 view .LVU2413
  99:src/int.c     **** 	return v & mask;
 8558              		.loc 1 99 2 view .LVU2414
 100:src/int.c     **** #else
 8559              		.loc 1 100 2 view .LVU2415
  99:src/int.c     **** 	return v & mask;
 8560              		.loc 1 99 14 is_stmt 0 view .LVU2416
 8561 0062 0123     		movs	r3, #1
 8562 0064 A2F12004 		sub	r4, r2, #32
 8563 0068 C2F12005 		rsb	r5, r2, #32
 8564 006c 03FA04F4 		lsl	r4, r3, r4
 8565 0070 23FA05F5 		lsr	r5, r3, r5
 8566 0074 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 8567              		.loc 1 99 7 view .LVU2417
 8568 0076 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 8569              		.loc 1 99 14 view .LVU2418
 8570 007a 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 8571              		.loc 1 99 7 view .LVU2419
 8572 007e 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 8573              		.loc 1 100 11 view .LVU2420
 8574 0082 2140     		ands	r1, r1, r4
 8575              	.LVL663:
 100:src/int.c     **** #else
 8576              		.loc 1 100 11 view .LVU2421
 8577 0084 1840     		ands	r0, r0, r3
 8578              	.LVL664:
 8579              	.L495:
ARM GAS  /tmp/ccjGZi8K.s 			page 217


 100:src/int.c     **** #else
 8580              		.loc 1 100 11 view .LVU2422
 8581              	.LBE1457:
 8582              	.LBE1456:
 8583              	.LBE1472:
 8584              	.LBE1477:
 561:src/int.c     **** 
 8585              		.loc 1 561 1 view .LVU2423
 8586 0086 02B0     		add	sp, sp, #8
 8587              		.cfi_remember_state
 8588              		.cfi_def_cfa_offset 24
 8589              		@ sp needed
 8590 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8591              	.LVL665:
 8592              	.L496:
 8593              		.cfi_restore_state
 557:src/int.c     **** #else
 8594              		.loc 1 557 2 is_stmt 1 view .LVU2424
 8595              	.LBB1478:
 147:src/int.c     **** #ifndef TINY_BUILD
 8596              		.loc 1 147 15 view .LVU2425
 8597              	.LBB1473:
 149:src/int.c     **** 	long long int v = mask_value(x);
 8598              		.loc 1 149 2 view .LVU2426
 8599              	.LBE1473:
 8600              	.LBE1478:
  40:src/int.c     **** }
 8601              		.loc 1 40 2 view .LVU2427
 8602              	.LBB1479:
 8603              	.LBB1474:
 150:src/int.c     **** 
 8604              		.loc 1 150 2 view .LVU2428
 8605              	.LBB1469:
 8606              	.LBB1466:
 8607              	.LBB1463:
 8608              	.LBB1460:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8609              		.loc 1 45 5 is_stmt 0 view .LVU2429
 8610 008c 3E2B     		cmp	r3, #62
 8611              	.LBE1460:
 8612              	.LBE1463:
 8613              	.LBE1466:
 8614              	.LBE1469:
 150:src/int.c     **** 
 8615              		.loc 1 150 20 view .LVU2430
 8616 008e 2846     		mov	r0, r5
 8617 0090 2146     		mov	r1, r4
 8618              	.LVL666:
 8619              	.LBB1470:
  92:src/int.c     **** #ifndef TINY_BUILD
 8620              		.loc 1 92 15 is_stmt 1 view .LVU2431
 8621              	.LBB1467:
  94:src/int.c     **** 	long long int mask;
 8622              		.loc 1 94 2 view .LVU2432
 8623              	.LBB1464:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 8624              		.loc 1 43 14 view .LVU2433
ARM GAS  /tmp/ccjGZi8K.s 			page 218


 8625              	.LBB1461:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8626              		.loc 1 44 2 view .LVU2434
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8627              		.loc 1 45 2 view .LVU2435
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8628              		.loc 1 45 5 is_stmt 0 view .LVU2436
 8629 0092 E6D9     		bls	.L500
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8630              		.loc 1 45 5 view .LVU2437
 8631              	.LBE1461:
 8632              	.LBE1464:
 8633              	.LBE1467:
 8634              	.LBE1470:
 8635              	.LBE1474:
 8636              	.LBE1479:
 561:src/int.c     **** 
 8637              		.loc 1 561 1 view .LVU2438
 8638 0094 02B0     		add	sp, sp, #8
 8639              		.cfi_remember_state
 8640              		.cfi_def_cfa_offset 24
 8641              		@ sp needed
 8642 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8643              	.LVL667:
 8644              	.L509:
 8645              		.cfi_restore_state
 8646              	.LBB1480:
 8647              	.LBB1451:
 112:src/int.c     **** 	return bit;
 8648              		.loc 1 112 2 is_stmt 1 view .LVU2439
 113:src/int.c     **** }
 8649              		.loc 1 113 2 view .LVU2440
 113:src/int.c     **** }
 8650              		.loc 1 113 2 is_stmt 0 view .LVU2441
 8651              	.LBE1451:
 8652              	.LBE1480:
 553:src/int.c     **** 		set_overflow(1);
 8653              		.loc 1 553 31 view .LVU2442
 8654 009a B7F1004F 		cmp	r7, #-2147483648
 8655 009e 08BF     		it	eq
 8656 00a0 002E     		cmpeq	r6, #0
 8657 00a2 02D0     		beq	.L501
 557:src/int.c     **** #else
 8658              		.loc 1 557 2 is_stmt 1 view .LVU2443
 8659              	.LVL668:
 8660              	.LBB1481:
 147:src/int.c     **** #ifndef TINY_BUILD
 8661              		.loc 1 147 15 view .LVU2444
 8662              	.LBB1475:
 149:src/int.c     **** 	long long int v = mask_value(x);
 8663              		.loc 1 149 2 view .LVU2445
 8664              	.LBE1475:
 8665              	.LBE1481:
  40:src/int.c     **** }
 8666              		.loc 1 40 2 view .LVU2446
 8667              	.LBB1482:
 8668              	.LBB1476:
ARM GAS  /tmp/ccjGZi8K.s 			page 219


 150:src/int.c     **** 
 8669              		.loc 1 150 2 view .LVU2447
 150:src/int.c     **** 
 8670              		.loc 1 150 20 is_stmt 0 view .LVU2448
 8671 00a4 2846     		mov	r0, r5
 8672 00a6 2146     		mov	r1, r4
 8673              	.LVL669:
 8674              	.LBB1471:
  92:src/int.c     **** #ifndef TINY_BUILD
 8675              		.loc 1 92 15 is_stmt 1 view .LVU2449
 8676              	.LBB1468:
  94:src/int.c     **** 	long long int mask;
 8677              		.loc 1 94 2 view .LVU2450
 8678              	.LBB1465:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 8679              		.loc 1 43 14 view .LVU2451
 8680              	.LBB1462:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8681              		.loc 1 44 2 view .LVU2452
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8682              		.loc 1 45 2 view .LVU2453
 8683 00a8 EDE7     		b	.L495
 8684              	.LVL670:
 8685              	.L501:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 8686              		.loc 1 45 2 is_stmt 0 view .LVU2454
 8687              	.LBE1462:
 8688              	.LBE1465:
 8689              	.LBE1468:
 8690              	.LBE1471:
 8691              	.LBE1476:
 8692              	.LBE1482:
 554:src/int.c     **** 		return x;
 8693              		.loc 1 554 3 is_stmt 1 view .LVU2455
 8694              	.LBB1483:
 8695              	.LBI1483:
  67:src/int.c     **** #ifndef TINY_BUILD
 8696              		.loc 1 67 6 view .LVU2456
 8697              	.LBB1484:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8698              		.loc 1 69 2 view .LVU2457
 8699 00aa FFF7FEFF 		bl	set_overflow.part.0
 8700              	.LVL671:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8701              		.loc 1 69 2 is_stmt 0 view .LVU2458
 8702              	.LBE1484:
 8703              	.LBE1483:
 555:src/int.c     **** 	}
 8704              		.loc 1 555 3 is_stmt 1 view .LVU2459
 555:src/int.c     **** 	}
 8705              		.loc 1 555 10 is_stmt 0 view .LVU2460
 8706 00ae 3046     		mov	r0, r6
 8707 00b0 3946     		mov	r1, r7
 8708 00b2 E8E7     		b	.L495
 8709              	.L511:
 8710              		.align	2
 8711              	.L510:
ARM GAS  /tmp/ccjGZi8K.s 			page 220


 8712 00b4 00000000 		.word	main_ram
 8713              		.cfi_endproc
 8714              	.LFE31:
 8716              		.section	.text.intDblMul,"ax",%progbits
 8717              		.align	1
 8718              		.p2align 2,,3
 8719              		.global	intDblMul
 8720              		.syntax unified
 8721              		.thumb
 8722              		.thumb_func
 8723              		.fpu fpv4-sp-d16
 8725              	intDblMul:
 8726              	.LVL672:
 8727              	.LFB34:
 579:src/int.c     **** #ifndef TINY_BUILD
 8728              		.loc 1 579 31 is_stmt 1 view -0
 8729              		.cfi_startproc
 8730              		@ args = 0, pretend = 0, frame = 72
 8731              		@ frame_needed = 0, uses_anonymous_args = 0
 581:src/int.c     **** 	unsigned long long int xv, yv;
 8732              		.loc 1 581 2 view .LVU2462
 8733              	.LBB1485:
 8734              	.LBI1485:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 8735              		.loc 1 39 23 view .LVU2463
 8736              	.LBB1486:
  40:src/int.c     **** }
 8737              		.loc 1 40 2 view .LVU2464
 8738              	.LBE1486:
 8739              	.LBE1485:
 579:src/int.c     **** #ifndef TINY_BUILD
 8740              		.loc 1 579 31 is_stmt 0 view .LVU2465
 8741 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8742              		.cfi_def_cfa_offset 36
 8743              		.cfi_offset 4, -36
 8744              		.cfi_offset 5, -32
 8745              		.cfi_offset 6, -28
 8746              		.cfi_offset 7, -24
 8747              		.cfi_offset 8, -20
 8748              		.cfi_offset 9, -16
 8749              		.cfi_offset 10, -12
 8750              		.cfi_offset 11, -8
 8751              		.cfi_offset 14, -4
 8752              	.LBB1489:
 8753              	.LBB1487:
  40:src/int.c     **** }
 8754              		.loc 1 40 39 view .LVU2466
 8755 0004 B14F     		ldr	r7, .L544
 8756 0006 3B68     		ldr	r3, [r7]
 8757 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 8758              	.LBE1487:
 8759              	.LBE1489:
 579:src/int.c     **** #ifndef TINY_BUILD
 8760              		.loc 1 579 31 view .LVU2467
 8761 000c 93B0     		sub	sp, sp, #76
 8762              		.cfi_def_cfa_offset 112
 8763              	.LBB1490:
ARM GAS  /tmp/ccjGZi8K.s 			page 221


 8764              	.LBB1488:
  40:src/int.c     **** }
 8765              		.loc 1 40 39 view .LVU2468
 8766 000e C3F38103 		ubfx	r3, r3, #2, #2
 8767 0012 0193     		str	r3, [sp, #4]
 8768              	.LVL673:
  40:src/int.c     **** }
 8769              		.loc 1 40 39 view .LVU2469
 8770              	.LBE1488:
 8771              	.LBE1490:
 582:src/int.c     **** 	int s;	
 8772              		.loc 1 582 2 is_stmt 1 view .LVU2470
 583:src/int.c     **** 	unsigned short int xa[4], ya[4];
 8773              		.loc 1 583 2 view .LVU2471
 584:src/int.c     **** 	unsigned int t[8];
 8774              		.loc 1 584 2 view .LVU2472
 585:src/int.c     **** 	unsigned short int r[8];
 8775              		.loc 1 585 2 view .LVU2473
 586:src/int.c     **** 	int i, j;
 8776              		.loc 1 586 2 view .LVU2474
 587:src/int.c     **** 
 8777              		.loc 1 587 2 view .LVU2475
 8778              	.LBB1491:
 590:src/int.c     **** 		int sx, sy;
 8779              		.loc 1 590 3 view .LVU2476
 591:src/int.c     **** 
 8780              		.loc 1 591 3 view .LVU2477
 593:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8781              		.loc 1 593 3 view .LVU2478
 593:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8782              		.loc 1 593 8 is_stmt 0 view .LVU2479
 8783 0014 FFF7FEFF 		bl	getX_int
 8784              	.LVL674:
 593:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8785              		.loc 1 593 8 view .LVU2480
 8786 0018 0646     		mov	r6, r0
 594:src/int.c     **** 
 8787              		.loc 1 594 8 view .LVU2481
 8788 001a 6520     		movs	r0, #101
 593:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8789              		.loc 1 593 8 view .LVU2482
 8790 001c 0C46     		mov	r4, r1
 8791              	.LVL675:
 594:src/int.c     **** 
 8792              		.loc 1 594 3 is_stmt 1 view .LVU2483
 594:src/int.c     **** 
 8793              		.loc 1 594 8 is_stmt 0 view .LVU2484
 8794 001e FFF7FEFF 		bl	get_reg_n_int
 8795              	.LVL676:
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
 8796              		.loc 1 596 8 view .LVU2485
 8797 0022 0DF11808 		add	r8, sp, #24
 594:src/int.c     **** 
 8798              		.loc 1 594 8 view .LVU2486
 8799 0026 8146     		mov	r9, r0
 8800 0028 0D46     		mov	r5, r1
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
ARM GAS  /tmp/ccjGZi8K.s 			page 222


 8801              		.loc 1 596 8 view .LVU2487
 8802 002a 3046     		mov	r0, r6
 8803 002c 2146     		mov	r1, r4
 8804 002e 4246     		mov	r2, r8
 8805              	.LVL677:
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
 8806              		.loc 1 596 3 is_stmt 1 view .LVU2488
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
 8807              		.loc 1 596 8 is_stmt 0 view .LVU2489
 8808 0030 FFF7FEFF 		bl	extract_value
 8809              	.LVL678:
 597:src/int.c     **** 
 8810              		.loc 1 597 8 view .LVU2490
 8811 0034 0AAA     		add	r2, sp, #40
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
 8812              		.loc 1 596 8 view .LVU2491
 8813 0036 0646     		mov	r6, r0
 8814              	.LVL679:
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
 8815              		.loc 1 596 8 view .LVU2492
 8816 0038 0C46     		mov	r4, r1
 8817              	.LVL680:
 597:src/int.c     **** 
 8818              		.loc 1 597 3 is_stmt 1 view .LVU2493
 597:src/int.c     **** 
 8819              		.loc 1 597 8 is_stmt 0 view .LVU2494
 8820 003a 4846     		mov	r0, r9
 8821              	.LVL681:
 597:src/int.c     **** 
 8822              		.loc 1 597 8 view .LVU2495
 8823 003c 2946     		mov	r1, r5
 8824              	.LVL682:
 597:src/int.c     **** 
 8825              		.loc 1 597 8 view .LVU2496
 8826 003e FFF7FEFF 		bl	extract_value
 8827              	.LVL683:
 8828              	.LBE1491:
 616:src/int.c     **** 
 8829              		.loc 1 616 8 view .LVU2497
 8830 0042 0023     		movs	r3, #0
 8831              	.LBB1492:
 597:src/int.c     **** 
 8832              		.loc 1 597 8 view .LVU2498
 8833 0044 8646     		mov	lr, r0
 8834              	.LVL684:
 599:src/int.c     **** 	}
 8835              		.loc 1 599 3 is_stmt 1 view .LVU2499
 8836              	.LBE1492:
 8837              	.LBB1493:
 8838              	.LBB1494:
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8839              		.loc 1 566 13 is_stmt 0 view .LVU2500
 8840 0046 4FEA1E42 		lsr	r2, lr, #16
 8841              	.LBE1494:
 8842              	.LBE1493:
 616:src/int.c     **** 
 8843              		.loc 1 616 8 view .LVU2501
ARM GAS  /tmp/ccjGZi8K.s 			page 223


 8844 004a CDE90B33 		strd	r3, r3, [sp, #44]
 8845 004e CDE90D33 		strd	r3, r3, [sp, #52]
 8846 0052 CDE90F33 		strd	r3, r3, [sp, #60]
 8847              	.LBB1500:
 8848              	.LBB1501:
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8849              		.loc 1 566 13 view .LVU2502
 8850 0056 300C     		lsrs	r0, r6, #16
 8851              	.LVL685:
 568:src/int.c     **** }
 8852              		.loc 1 568 20 view .LVU2503
 8853 0058 4FEA1449 		lsr	r9, r4, #16
 8854              	.LVL686:
 568:src/int.c     **** }
 8855              		.loc 1 568 20 view .LVU2504
 8856              	.LBE1501:
 8857              	.LBE1500:
 8858              	.LBB1506:
 8859              	.LBB1495:
 8860 005c 4FEA114C 		lsr	ip, r1, #16
 8861 0060 0AAD     		add	r5, sp, #40
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8862              		.loc 1 566 8 view .LVU2505
 8863 0062 ADF81220 		strh	r2, [sp, #18]	@ movhi
 8864              	.LBE1495:
 8865              	.LBE1506:
 8866              	.LBB1507:
 599:src/int.c     **** 	}
 8867              		.loc 1 599 10 view .LVU2506
 8868 0066 069A     		ldr	r2, [sp, #24]
 8869              	.LBE1507:
 8870              	.LBB1508:
 8871              	.LBB1502:
 568:src/int.c     **** }
 8872              		.loc 1 568 8 view .LVU2507
 8873 0068 ADF80E90 		strh	r9, [sp, #14]	@ movhi
 8874              	.LBE1502:
 8875              	.LBE1508:
 8876              	.LBB1509:
 8877              	.LBB1496:
 8878 006c ADF816C0 		strh	ip, [sp, #22]	@ movhi
 8879              	.LBE1496:
 8880              	.LBE1509:
 8881              	.LBB1510:
 599:src/int.c     **** 	}
 8882              		.loc 1 599 10 view .LVU2508
 8883 0070 DDF82890 		ldr	r9, [sp, #40]
 8884              	.LBE1510:
 8885              	.LBB1511:
 8886              	.LBB1503:
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8887              		.loc 1 566 8 view .LVU2509
 8888 0074 ADF80A00 		strh	r0, [sp, #10]	@ movhi
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 8889              		.loc 1 567 8 view .LVU2510
 8890 0078 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 8891              	.LBE1503:
ARM GAS  /tmp/ccjGZi8K.s 			page 224


 8892              	.LBE1511:
 8893              	.LBB1512:
 8894              	.LBB1497:
 8895 007c ADF81410 		strh	r1, [sp, #20]	@ movhi
 8896              	.LBE1497:
 8897              	.LBE1512:
 8898              	.LBB1513:
 8899              	.LBB1504:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8900              		.loc 1 565 8 view .LVU2511
 8901 0080 B6B2     		uxth	r6, r6
 8902              	.LVL687:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8903              		.loc 1 565 8 view .LVU2512
 8904              	.LBE1504:
 8905              	.LBE1513:
 8906              	.LBB1514:
 8907              	.LBB1498:
 8908 0082 1FFA8EFE 		uxth	lr, lr
 8909              	.LVL688:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8910              		.loc 1 565 8 view .LVU2513
 8911              	.LBE1498:
 8912              	.LBE1514:
 616:src/int.c     **** 
 8913              		.loc 1 616 8 view .LVU2514
 8914 0086 AC46     		mov	ip, r5
 8915 0088 1193     		str	r3, [sp, #68]
 8916              	.LBB1515:
 599:src/int.c     **** 	}
 8917              		.loc 1 599 10 view .LVU2515
 8918 008a 0092     		str	r2, [sp]
 8919              	.LVL689:
 599:src/int.c     **** 	}
 8920              		.loc 1 599 10 view .LVU2516
 8921              	.LBE1515:
 612:src/int.c     **** 	breakup(yv, ya);
 8922              		.loc 1 612 2 is_stmt 1 view .LVU2517
 8923              	.LBB1516:
 8924              	.LBI1500:
 564:src/int.c     **** 	xv[0] = x & 0xffff;
 8925              		.loc 1 564 13 view .LVU2518
 8926              	.LBB1505:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8927              		.loc 1 565 2 view .LVU2519
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8928              		.loc 1 566 2 view .LVU2520
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 8929              		.loc 1 567 2 view .LVU2521
 568:src/int.c     **** }
 8930              		.loc 1 568 2 view .LVU2522
 568:src/int.c     **** }
 8931              		.loc 1 568 2 is_stmt 0 view .LVU2523
 8932              	.LBE1505:
 8933              	.LBE1516:
 613:src/int.c     **** 
 8934              		.loc 1 613 2 is_stmt 1 view .LVU2524
ARM GAS  /tmp/ccjGZi8K.s 			page 225


 8935              	.LBB1517:
 8936              	.LBI1493:
 564:src/int.c     **** 	xv[0] = x & 0xffff;
 8937              		.loc 1 564 13 view .LVU2525
 8938              	.LBB1499:
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8939              		.loc 1 565 2 view .LVU2526
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8940              		.loc 1 566 2 view .LVU2527
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 8941              		.loc 1 567 2 view .LVU2528
 568:src/int.c     **** }
 8942              		.loc 1 568 2 view .LVU2529
 568:src/int.c     **** }
 8943              		.loc 1 568 2 is_stmt 0 view .LVU2530
 8944              	.LBE1499:
 8945              	.LBE1517:
 615:src/int.c     **** 		t[i] = 0;
 8946              		.loc 1 615 2 is_stmt 1 view .LVU2531
 615:src/int.c     **** 		t[i] = 0;
 8947              		.loc 1 615 12 view .LVU2532
 616:src/int.c     **** 
 8948              		.loc 1 616 3 view .LVU2533
 616:src/int.c     **** 
 8949              		.loc 1 616 8 is_stmt 0 view .LVU2534
 8950 008c 0A93     		str	r3, [sp, #40]
 615:src/int.c     **** 		t[i] = 0;
 8951              		.loc 1 615 17 is_stmt 1 view .LVU2535
 8952              	.LVL690:
 615:src/int.c     **** 		t[i] = 0;
 8953              		.loc 1 615 12 view .LVU2536
 616:src/int.c     **** 
 8954              		.loc 1 616 3 view .LVU2537
 615:src/int.c     **** 		t[i] = 0;
 8955              		.loc 1 615 17 view .LVU2538
 615:src/int.c     **** 		t[i] = 0;
 8956              		.loc 1 615 12 view .LVU2539
 616:src/int.c     **** 
 8957              		.loc 1 616 3 view .LVU2540
 615:src/int.c     **** 		t[i] = 0;
 8958              		.loc 1 615 17 view .LVU2541
 615:src/int.c     **** 		t[i] = 0;
 8959              		.loc 1 615 12 view .LVU2542
 616:src/int.c     **** 
 8960              		.loc 1 616 3 view .LVU2543
 615:src/int.c     **** 		t[i] = 0;
 8961              		.loc 1 615 17 view .LVU2544
 615:src/int.c     **** 		t[i] = 0;
 8962              		.loc 1 615 12 view .LVU2545
 616:src/int.c     **** 
 8963              		.loc 1 616 3 view .LVU2546
 615:src/int.c     **** 		t[i] = 0;
 8964              		.loc 1 615 17 view .LVU2547
 615:src/int.c     **** 		t[i] = 0;
 8965              		.loc 1 615 12 view .LVU2548
 616:src/int.c     **** 
 8966              		.loc 1 616 3 view .LVU2549
ARM GAS  /tmp/ccjGZi8K.s 			page 226


 615:src/int.c     **** 		t[i] = 0;
 8967              		.loc 1 615 17 view .LVU2550
 615:src/int.c     **** 		t[i] = 0;
 8968              		.loc 1 615 12 view .LVU2551
 616:src/int.c     **** 
 8969              		.loc 1 616 3 view .LVU2552
 615:src/int.c     **** 		t[i] = 0;
 8970              		.loc 1 615 17 view .LVU2553
 615:src/int.c     **** 		t[i] = 0;
 8971              		.loc 1 615 12 view .LVU2554
 616:src/int.c     **** 
 8972              		.loc 1 616 3 view .LVU2555
 615:src/int.c     **** 		t[i] = 0;
 8973              		.loc 1 615 17 view .LVU2556
 615:src/int.c     **** 		t[i] = 0;
 8974              		.loc 1 615 12 view .LVU2557
 618:src/int.c     **** 		for (j=0; j<4; j++)
 8975              		.loc 1 618 8 is_stmt 0 view .LVU2558
 8976 008e 1846     		mov	r0, r3
 8977 0090 0DF10A0B 		add	fp, sp, #10
 8978              	.LVL691:
 8979              	.L513:
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8980              		.loc 1 619 13 is_stmt 1 view .LVU2559
 620:src/int.c     **** 
 8981              		.loc 1 620 4 view .LVU2560
 620:src/int.c     **** 
 8982              		.loc 1 620 16 is_stmt 0 view .LVU2561
 8983 0094 6146     		mov	r1, ip
 8984 0096 0DF11204 		add	r4, sp, #18
 620:src/int.c     **** 
 8985              		.loc 1 620 11 view .LVU2562
 8986 009a 0B68     		ldr	r3, [r1]
 620:src/int.c     **** 
 8987              		.loc 1 620 16 view .LVU2563
 8988 009c 7246     		mov	r2, lr
 620:src/int.c     **** 
 8989              		.loc 1 620 11 view .LVU2564
 8990 009e 06FB0232 		mla	r2, r6, r2, r3
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8991              		.loc 1 619 3 view .LVU2565
 8992 00a2 A045     		cmp	r8, r4
 620:src/int.c     **** 
 8993              		.loc 1 620 11 view .LVU2566
 8994 00a4 41F8042B 		str	r2, [r1], #4
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8995              		.loc 1 619 18 is_stmt 1 view .LVU2567
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8996              		.loc 1 619 13 view .LVU2568
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8997              		.loc 1 619 3 is_stmt 0 view .LVU2569
 8998 00a8 08D0     		beq	.L541
 8999              	.L514:
 9000 00aa 34F8022B 		ldrh	r2, [r4], #2
 620:src/int.c     **** 
 9001              		.loc 1 620 4 is_stmt 1 view .LVU2570
 620:src/int.c     **** 
ARM GAS  /tmp/ccjGZi8K.s 			page 227


 9002              		.loc 1 620 11 is_stmt 0 view .LVU2571
 9003 00ae 0B68     		ldr	r3, [r1]
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 9004              		.loc 1 619 3 view .LVU2572
 9005 00b0 A045     		cmp	r8, r4
 620:src/int.c     **** 
 9006              		.loc 1 620 11 view .LVU2573
 9007 00b2 06FB0232 		mla	r2, r6, r2, r3
 9008 00b6 41F8042B 		str	r2, [r1], #4
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 9009              		.loc 1 619 18 is_stmt 1 view .LVU2574
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 9010              		.loc 1 619 13 view .LVU2575
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 9011              		.loc 1 619 3 is_stmt 0 view .LVU2576
 9012 00ba F6D1     		bne	.L514
 9013              	.L541:
 618:src/int.c     **** 		for (j=0; j<4; j++)
 9014              		.loc 1 618 17 is_stmt 1 discriminator 2 view .LVU2577
 618:src/int.c     **** 		for (j=0; j<4; j++)
 9015              		.loc 1 618 18 is_stmt 0 discriminator 2 view .LVU2578
 9016 00bc 0130     		adds	r0, r0, #1
 9017              	.LVL692:
 618:src/int.c     **** 		for (j=0; j<4; j++)
 9018              		.loc 1 618 12 is_stmt 1 discriminator 2 view .LVU2579
 618:src/int.c     **** 		for (j=0; j<4; j++)
 9019              		.loc 1 618 2 is_stmt 0 discriminator 2 view .LVU2580
 9020 00be 0428     		cmp	r0, #4
 9021 00c0 0CF1040C 		add	ip, ip, #4
 9022 00c4 02D0     		beq	.L515
 9023 00c6 3BF8026B 		ldrh	r6, [fp], #2
 9024 00ca E3E7     		b	.L513
 9025              	.L515:
 9026 00cc 0DF11600 		add	r0, sp, #22
 9027              	.LVL693:
 618:src/int.c     **** 		for (j=0; j<4; j++)
 9028              		.loc 1 618 2 view .LVU2581
 9029 00d0 0122     		movs	r2, #1
 9030              	.L518:
 9031              	.LVL694:
 623:src/int.c     **** 			t[i+1] += t[i] >> 16;
 9032              		.loc 1 623 3 is_stmt 1 view .LVU2582
 624:src/int.c     **** 		r[i] = t[i];
 9033              		.loc 1 624 4 view .LVU2583
 625:src/int.c     **** 	}
 9034              		.loc 1 625 3 view .LVU2584
 623:src/int.c     **** 			t[i+1] += t[i] >> 16;
 9035              		.loc 1 623 8 is_stmt 0 view .LVU2585
 9036 00d2 55F8043B 		ldr	r3, [r5], #4
 623:src/int.c     **** 			t[i+1] += t[i] >> 16;
 9037              		.loc 1 623 6 view .LVU2586
 9038 00d6 B3F5803F 		cmp	r3, #65536
 9039 00da 02F10102 		add	r2, r2, #1
 9040              	.LVL695:
 623:src/int.c     **** 			t[i+1] += t[i] >> 16;
 9041              		.loc 1 623 6 view .LVU2587
 9042 00de 05D3     		bcc	.L517
ARM GAS  /tmp/ccjGZi8K.s 			page 228


 624:src/int.c     **** 		r[i] = t[i];
 9043              		.loc 1 624 11 view .LVU2588
 9044 00e0 2968     		ldr	r1, [r5]
 9045 00e2 01EB1341 		add	r1, r1, r3, lsr #16
 9046 00e6 55F8043C 		ldr	r3, [r5, #-4]
 9047 00ea 2960     		str	r1, [r5]
 9048              	.L517:
 622:src/int.c     **** 		if (t[i] >= 65536)
 9049              		.loc 1 622 2 discriminator 2 view .LVU2589
 9050 00ec 092A     		cmp	r2, #9
 625:src/int.c     **** 	}
 9051              		.loc 1 625 8 discriminator 2 view .LVU2590
 9052 00ee 20F8023F 		strh	r3, [r0, #2]!	@ movhi
 622:src/int.c     **** 		if (t[i] >= 65536)
 9053              		.loc 1 622 17 is_stmt 1 discriminator 2 view .LVU2591
 9054              	.LVL696:
 622:src/int.c     **** 		if (t[i] >= 65536)
 9055              		.loc 1 622 12 discriminator 2 view .LVU2592
 622:src/int.c     **** 		if (t[i] >= 65536)
 9056              		.loc 1 622 2 is_stmt 0 discriminator 2 view .LVU2593
 9057 00f2 EED1     		bne	.L518
 628:src/int.c     **** 	xv = packup(r+4);
 9058              		.loc 1 628 2 is_stmt 1 view .LVU2594
 9059              	.LVL697:
 9060              	.LBB1518:
 9061              	.LBI1518:
 571:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 9062              		.loc 1 571 31 view .LVU2595
 9063              	.LBB1519:
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 9064              		.loc 1 572 2 view .LVU2596
 9065              	.LBE1519:
 9066              	.LBE1518:
 9067              	.LBB1521:
 9068              	.LBB1522:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9069              		.loc 1 44 26 is_stmt 0 view .LVU2597
 9070 00f4 3B68     		ldr	r3, [r7]
 9071 00f6 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 9072 00fa 03F03F03 		and	r3, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9073              		.loc 1 45 26 view .LVU2598
 9074 00fe 5A1E     		subs	r2, r3, #1
 9075              	.LVL698:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9076              		.loc 1 45 5 view .LVU2599
 9077 0100 3E2A     		cmp	r2, #62
 9078              	.LBE1522:
 9079              	.LBE1521:
 9080              	.LBB1524:
 9081              	.LBB1520:
 574:src/int.c     **** 			x[0];
 9082              		.loc 1 574 38 view .LVU2600
 9083 0102 DDE906AB 		ldrd	r10, [sp, #24]
 9084              	.LVL699:
 574:src/int.c     **** 			x[0];
 9085              		.loc 1 574 38 view .LVU2601
ARM GAS  /tmp/ccjGZi8K.s 			page 229


 9086              	.LBE1520:
 9087              	.LBE1524:
 629:src/int.c     **** 
 9088              		.loc 1 629 2 is_stmt 1 view .LVU2602
 9089              	.LBB1525:
 9090              	.LBI1525:
 571:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 9091              		.loc 1 571 31 view .LVU2603
 9092              	.LBB1526:
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 9093              		.loc 1 572 2 view .LVU2604
 574:src/int.c     **** 			x[0];
 9094              		.loc 1 574 38 is_stmt 0 view .LVU2605
 9095 0106 DDE90845 		ldrd	r4, [sp, #32]
 9096              	.LVL700:
 574:src/int.c     **** 			x[0];
 9097              		.loc 1 574 38 view .LVU2606
 9098              	.LBE1526:
 9099              	.LBE1525:
 631:src/int.c     **** 	if (i != 64)
 9100              		.loc 1 631 2 is_stmt 1 view .LVU2607
 9101              	.LBB1527:
 9102              	.LBI1521:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9103              		.loc 1 43 14 view .LVU2608
 9104              	.LBB1523:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9105              		.loc 1 44 2 view .LVU2609
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9106              		.loc 1 45 2 view .LVU2610
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9107              		.loc 1 45 5 is_stmt 0 view .LVU2611
 9108 010a 24D8     		bhi	.L519
 9109              	.LVL701:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9110              		.loc 1 45 5 view .LVU2612
 9111              	.LBE1523:
 9112              	.LBE1527:
 632:src/int.c     **** 		xv = (xv << (64-i)) | (yv >> i);
 9113              		.loc 1 632 2 is_stmt 1 view .LVU2613
 633:src/int.c     **** 
 9114              		.loc 1 633 3 view .LVU2614
 633:src/int.c     **** 
 9115              		.loc 1 633 29 is_stmt 0 view .LVU2615
 9116 010c C3F12002 		rsb	r2, r3, #32
 9117 0110 0BFA02F2 		lsl	r2, fp, r2
 9118 0114 2AFA03F6 		lsr	r6, r10, r3
 9119 0118 A3F1200E 		sub	lr, r3, #32
 633:src/int.c     **** 
 9120              		.loc 1 633 18 view .LVU2616
 9121 011c C3F1400C 		rsb	ip, r3, #64
 633:src/int.c     **** 
 9122              		.loc 1 633 12 view .LVU2617
 9123 0120 C3F12008 		rsb	r8, r3, #32
 9124              	.LVL702:
 633:src/int.c     **** 
 9125              		.loc 1 633 29 view .LVU2618
ARM GAS  /tmp/ccjGZi8K.s 			page 230


 9126 0124 1643     		orrs	r6, r6, r2
 9127 0126 2BFA0EFE 		lsr	lr, fp, lr
 633:src/int.c     **** 
 9128              		.loc 1 633 12 view .LVU2619
 9129 012a 05FA0CF2 		lsl	r2, r5, ip
 9130 012e 04FA08F8 		lsl	r8, r4, r8
 633:src/int.c     **** 
 9131              		.loc 1 633 29 view .LVU2620
 9132 0132 46EA0E06 		orr	r6, r6, lr
 633:src/int.c     **** 
 9133              		.loc 1 633 12 view .LVU2621
 9134 0136 A3F1200E 		sub	lr, r3, #32
 9135 013a 24FA0EFE 		lsr	lr, r4, lr
 9136 013e 42EA0802 		orr	r2, r2, r8
 9137 0142 04FA0CFC 		lsl	ip, r4, ip
 9138 0146 42EA0E02 		orr	r2, r2, lr
 633:src/int.c     **** 
 9139              		.loc 1 633 29 view .LVU2622
 9140 014a 2BFA03F3 		lsr	r3, fp, r3
 9141              	.LVL703:
 633:src/int.c     **** 
 9142              		.loc 1 633 6 view .LVU2623
 9143 014e 4CEA0604 		orr	r4, ip, r6
 9144 0152 42EA0305 		orr	r5, r2, r3
 9145              	.LVL704:
 9146              	.L519:
 635:src/int.c     **** 
 9147              		.loc 1 635 2 is_stmt 1 view .LVU2624
 9148 0156 FFF7FEFF 		bl	setlastX
 9149              	.LVL705:
 637:src/int.c     **** 		if (mode == MODE_2COMP) {
 9150              		.loc 1 637 2 view .LVU2625
 637:src/int.c     **** 		if (mode == MODE_2COMP) {
 9151              		.loc 1 637 5 is_stmt 0 view .LVU2626
 9152 015a 009B     		ldr	r3, [sp]
 9153 015c 4B45     		cmp	r3, r9
 9154 015e 51D0     		beq	.L542
 638:src/int.c     **** 			yv = mask_value(1 + ~yv);
 9155              		.loc 1 638 3 is_stmt 1 view .LVU2627
 638:src/int.c     **** 			yv = mask_value(1 + ~yv);
 9156              		.loc 1 638 6 is_stmt 0 view .LVU2628
 9157 0160 019B     		ldr	r3, [sp, #4]
 9158 0162 73BB     		cbnz	r3, .L522
 639:src/int.c     **** 			xv = ~xv;
 9159              		.loc 1 639 4 is_stmt 1 view .LVU2629
 9160              	.LBB1528:
 9161              	.LBB1529:
 9162              	.LBB1530:
 9163              	.LBB1531:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9164              		.loc 1 44 26 is_stmt 0 view .LVU2630
 9165 0164 3B68     		ldr	r3, [r7]
 9166 0166 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9167              		.loc 1 44 15 view .LVU2631
 9168 016a 03F03F02 		and	r2, r3, #63
 9169              	.LBE1531:
ARM GAS  /tmp/ccjGZi8K.s 			page 231


 9170              	.LBE1530:
 9171              	.LBE1529:
 9172              	.LBE1528:
 639:src/int.c     **** 			xv = ~xv;
 9173              		.loc 1 639 9 view .LVU2632
 9174 016e DAF10008 		rsbs	r8, r10, #0
 9175              	.LBB1538:
 9176              	.LBB1536:
 9177              	.LBB1534:
 9178              	.LBB1532:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9179              		.loc 1 45 26 view .LVU2633
 9180 0172 02F1FF36 		add	r6, r2, #-1
 9181              	.LBE1532:
 9182              	.LBE1534:
 9183              	.LBE1536:
 9184              	.LBE1538:
 639:src/int.c     **** 			xv = ~xv;
 9185              		.loc 1 639 9 view .LVU2634
 9186 0176 6BEB4B09 		sbc	r9, fp, fp, lsl #1
 9187              	.LVL706:
 9188              	.LBB1539:
 9189              	.LBI1528:
  92:src/int.c     **** #ifndef TINY_BUILD
 9190              		.loc 1 92 15 is_stmt 1 view .LVU2635
 9191              	.LBB1537:
  94:src/int.c     **** 	long long int mask;
 9192              		.loc 1 94 2 view .LVU2636
 9193              	.LBB1535:
 9194              	.LBI1530:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9195              		.loc 1 43 14 view .LVU2637
 9196              	.LBB1533:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9197              		.loc 1 44 2 view .LVU2638
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9198              		.loc 1 45 2 view .LVU2639
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9199              		.loc 1 45 5 is_stmt 0 view .LVU2640
 9200 017a 3E2E     		cmp	r6, #62
 9201 017c 00F28D80 		bhi	.L523
 9202              	.LVL707:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9203              		.loc 1 45 5 view .LVU2641
 9204              	.LBE1533:
 9205              	.LBE1535:
  95:src/int.c     **** 
 9206              		.loc 1 95 2 is_stmt 1 view .LVU2642
  97:src/int.c     **** 		return v;
 9207              		.loc 1 97 2 view .LVU2643
  99:src/int.c     **** 	return v & mask;
 9208              		.loc 1 99 2 view .LVU2644
 100:src/int.c     **** #else
 9209              		.loc 1 100 2 view .LVU2645
  99:src/int.c     **** 	return v & mask;
 9210              		.loc 1 99 14 is_stmt 0 view .LVU2646
 9211 0180 0121     		movs	r1, #1
ARM GAS  /tmp/ccjGZi8K.s 			page 232


 9212 0182 A2F12003 		sub	r3, r2, #32
 9213 0186 C2F12000 		rsb	r0, r2, #32
 9214 018a 01FA03F3 		lsl	r3, r1, r3
 9215 018e 21FA00F0 		lsr	r0, r1, r0
 9216 0192 9140     		lsls	r1, r1, r2
  99:src/int.c     **** 	return v & mask;
 9217              		.loc 1 99 7 view .LVU2647
 9218 0194 11F1FF31 		adds	r1, r1, #-1
  99:src/int.c     **** 	return v & mask;
 9219              		.loc 1 99 14 view .LVU2648
 9220 0198 43EA0003 		orr	r3, r3, r0
  99:src/int.c     **** 	return v & mask;
 9221              		.loc 1 99 7 view .LVU2649
 9222 019c 43F1FF33 		adc	r3, r3, #-1
 100:src/int.c     **** #else
 9223              		.loc 1 100 11 view .LVU2650
 9224 01a0 03EA0903 		and	r3, r3, r9
 9225 01a4 01EA0801 		and	r1, r1, r8
 9226 01a8 8846     		mov	r8, r1
 9227              	.LVL708:
 100:src/int.c     **** #else
 9228              		.loc 1 100 11 view .LVU2651
 9229 01aa 9946     		mov	r9, r3
 9230              	.LVL709:
 100:src/int.c     **** #else
 9231              		.loc 1 100 11 view .LVU2652
 9232              	.LBE1537:
 9233              	.LBE1539:
 640:src/int.c     **** 			if (yv == 0)
 9234              		.loc 1 640 4 is_stmt 1 view .LVU2653
 641:src/int.c     **** 				xv++;
 9235              		.loc 1 641 4 view .LVU2654
 641:src/int.c     **** 				xv++;
 9236              		.loc 1 641 7 is_stmt 0 view .LVU2655
 9237 01ac 58EA0903 		orrs	r3, r8, r9
 9238 01b0 76D1     		bne	.L540
 9239              	.LVL710:
 9240              	.L524:
 642:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9241              		.loc 1 642 5 is_stmt 1 view .LVU2656
 642:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9242              		.loc 1 642 7 is_stmt 0 view .LVU2657
 9243 01b2 6442     		rsbs	r4, r4, #0
 9244 01b4 65EB4505 		sbc	r5, r5, r5, lsl #1
 9245              	.LVL711:
 642:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9246              		.loc 1 642 7 view .LVU2658
 9247 01b8 4FF00008 		mov	r8, #0
 9248              	.LVL712:
 642:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9249              		.loc 1 642 7 view .LVU2659
 9250 01bc 4FF00009 		mov	r9, #0
 9251 01c0 28E0     		b	.L521
 9252              	.LVL713:
 9253              	.L522:
 643:src/int.c     **** 			yv = ~yv;
 9254              		.loc 1 643 10 is_stmt 1 view .LVU2660
ARM GAS  /tmp/ccjGZi8K.s 			page 233


 643:src/int.c     **** 			yv = ~yv;
 9255              		.loc 1 643 13 is_stmt 0 view .LVU2661
 9256 01c2 019B     		ldr	r3, [sp, #4]
 9257 01c4 012B     		cmp	r3, #1
 9258 01c6 3B68     		ldr	r3, [r7]
 9259 01c8 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 9260 01cc 6DD0     		beq	.L543
 647:src/int.c     **** 	}
 9261              		.loc 1 647 4 is_stmt 1 view .LVU2662
 9262              	.LBB1540:
 9263              	.LBI1540:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 9264              		.loc 1 110 22 view .LVU2663
 9265              	.LBB1541:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 9266              		.loc 1 111 2 view .LVU2664
 9267              	.LBB1542:
 9268              	.LBI1542:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9269              		.loc 1 43 14 view .LVU2665
 9270              	.LBB1543:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9271              		.loc 1 44 2 view .LVU2666
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9272              		.loc 1 44 15 is_stmt 0 view .LVU2667
 9273 01ce 03F03F02 		and	r2, r3, #63
 9274              	.LVL714:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9275              		.loc 1 45 2 is_stmt 1 view .LVU2668
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9276              		.loc 1 45 26 is_stmt 0 view .LVU2669
 9277 01d2 561E     		subs	r6, r2, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9278              		.loc 1 45 5 view .LVU2670
 9279 01d4 3E2E     		cmp	r6, #62
 9280 01d6 74D8     		bhi	.L530
 9281 01d8 4FF0010C 		mov	ip, #1
 9282 01dc A2F12103 		sub	r3, r2, #33
 9283 01e0 C6F1200E 		rsb	lr, r6, #32
 9284 01e4 0CFA03F3 		lsl	r3, ip, r3
 9285 01e8 2CFA0EFE 		lsr	lr, ip, lr
 9286 01ec 43EA0E03 		orr	r3, r3, lr
 9287 01f0 0CFA06FC 		lsl	ip, ip, r6
 9288              	.L527:
 9289              	.LVL715:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9290              		.loc 1 45 5 view .LVU2671
 9291              	.LBE1543:
 9292              	.LBE1542:
 112:src/int.c     **** 	return bit;
 9293              		.loc 1 112 2 is_stmt 1 view .LVU2672
 113:src/int.c     **** }
 9294              		.loc 1 113 2 view .LVU2673
 113:src/int.c     **** }
 9295              		.loc 1 113 2 is_stmt 0 view .LVU2674
 9296              	.LBE1541:
 9297              	.LBE1540:
ARM GAS  /tmp/ccjGZi8K.s 			page 234


 647:src/int.c     **** 	}
 9298              		.loc 1 647 7 view .LVU2675
 9299 01f4 44EA0C0C 		orr	ip, r4, ip
 9300 01f8 2B43     		orrs	r3, r3, r5
 9301 01fa 6446     		mov	r4, ip
 9302              	.LVL716:
 647:src/int.c     **** 	}
 9303              		.loc 1 647 7 view .LVU2676
 9304 01fc 1D46     		mov	r5, r3
 9305              	.LVL717:
 647:src/int.c     **** 	}
 9306              		.loc 1 647 7 view .LVU2677
 9307 01fe D046     		mov	r8, r10
 9308 0200 D946     		mov	r9, fp
 9309              	.LVL718:
 647:src/int.c     **** 	}
 9310              		.loc 1 647 7 view .LVU2678
 9311 0202 07E0     		b	.L521
 9312              	.LVL719:
 9313              	.L542:
 647:src/int.c     **** 	}
 9314              		.loc 1 647 7 view .LVU2679
 9315 0204 3B68     		ldr	r3, [r7]
 9316 0206 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 9317 020a 03F03F02 		and	r2, r3, #63
 9318 020e D046     		mov	r8, r10
 9319 0210 D946     		mov	r9, fp
 9320              	.LVL720:
 647:src/int.c     **** 	}
 9321              		.loc 1 647 7 view .LVU2680
 9322 0212 561E     		subs	r6, r2, #1
 9323              	.L521:
 650:src/int.c     **** 	setX_int(mask_value(xv));
 9324              		.loc 1 650 2 is_stmt 1 view .LVU2681
 9325              	.LBB1547:
 9326              	.LBI1547:
  92:src/int.c     **** #ifndef TINY_BUILD
 9327              		.loc 1 92 15 view .LVU2682
 9328              	.LBB1548:
  94:src/int.c     **** 	long long int mask;
 9329              		.loc 1 94 2 view .LVU2683
 9330              	.LBB1549:
 9331              	.LBI1549:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9332              		.loc 1 43 14 view .LVU2684
 9333              	.LBB1550:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9334              		.loc 1 44 2 view .LVU2685
 9335              	.LVL721:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9336              		.loc 1 45 2 view .LVU2686
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9337              		.loc 1 45 5 is_stmt 0 view .LVU2687
 9338 0214 3E2E     		cmp	r6, #62
 9339 0216 15D8     		bhi	.L528
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9340              		.loc 1 45 5 view .LVU2688
ARM GAS  /tmp/ccjGZi8K.s 			page 235


 9341 0218 0123     		movs	r3, #1
 9342 021a A2F12001 		sub	r1, r2, #32
 9343 021e C2F12000 		rsb	r0, r2, #32
 9344 0222 03FA01F1 		lsl	r1, r3, r1
 9345 0226 23FA00F0 		lsr	r0, r3, r0
 9346 022a 9340     		lsls	r3, r3, r2
 9347 022c 13F1FF33 		adds	r3, r3, #-1
 9348 0230 41EA0001 		orr	r1, r1, r0
 9349 0234 41F1FF31 		adc	r1, r1, #-1
 9350 0238 01EA0901 		and	r1, r1, r9
 9351 023c 03EA0803 		and	r3, r3, r8
 9352 0240 9846     		mov	r8, r3
 9353 0242 8946     		mov	r9, r1
 9354              	.LVL722:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9355              		.loc 1 45 5 view .LVU2689
 9356              	.LBE1550:
 9357              	.LBE1549:
  95:src/int.c     **** 
 9358              		.loc 1 95 2 is_stmt 1 view .LVU2690
  97:src/int.c     **** 		return v;
 9359              		.loc 1 97 2 view .LVU2691
  99:src/int.c     **** 	return v & mask;
 9360              		.loc 1 99 2 view .LVU2692
 100:src/int.c     **** #else
 9361              		.loc 1 100 2 view .LVU2693
 9362              	.L528:
 100:src/int.c     **** #else
 9363              		.loc 1 100 2 is_stmt 0 view .LVU2694
 9364              	.LBE1548:
 9365              	.LBE1547:
 650:src/int.c     **** 	setX_int(mask_value(xv));
 9366              		.loc 1 650 2 view .LVU2695
 9367 0244 4B46     		mov	r3, r9
 9368 0246 6520     		movs	r0, #101
 9369 0248 4246     		mov	r2, r8
 9370 024a FFF7FEFF 		bl	set_reg_n_int
 9371              	.LVL723:
 651:src/int.c     **** 	set_overflow(0);
 9372              		.loc 1 651 2 is_stmt 1 view .LVU2696
 9373              	.LBB1551:
 9374              	.LBB1552:
 9375              	.LBB1553:
 9376              	.LBB1554:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9377              		.loc 1 44 26 is_stmt 0 view .LVU2697
 9378 024e 3B68     		ldr	r3, [r7]
 9379 0250 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9380              		.loc 1 44 15 view .LVU2698
 9381 0254 03F03F06 		and	r6, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9382              		.loc 1 45 26 view .LVU2699
 9383 0258 731E     		subs	r3, r6, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9384              		.loc 1 45 5 view .LVU2700
 9385 025a 3E2B     		cmp	r3, #62
ARM GAS  /tmp/ccjGZi8K.s 			page 236


 9386              	.LBE1554:
 9387              	.LBE1553:
 9388              	.LBE1552:
 9389              	.LBE1551:
 651:src/int.c     **** 	set_overflow(0);
 9390              		.loc 1 651 2 view .LVU2701
 9391 025c 2046     		mov	r0, r4
 9392 025e 2946     		mov	r1, r5
 9393              	.LVL724:
 9394              	.LBB1558:
 9395              	.LBI1551:
  92:src/int.c     **** #ifndef TINY_BUILD
 9396              		.loc 1 92 15 is_stmt 1 view .LVU2702
 9397              	.LBB1557:
  94:src/int.c     **** 	long long int mask;
 9398              		.loc 1 94 2 view .LVU2703
 9399              	.LBB1556:
 9400              	.LBI1553:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9401              		.loc 1 43 14 view .LVU2704
 9402              	.LBB1555:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9403              		.loc 1 44 2 view .LVU2705
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9404              		.loc 1 45 2 view .LVU2706
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9405              		.loc 1 45 5 is_stmt 0 view .LVU2707
 9406 0260 12D8     		bhi	.L529
 9407              	.LVL725:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9408              		.loc 1 45 5 view .LVU2708
 9409              	.LBE1555:
 9410              	.LBE1556:
  95:src/int.c     **** 
 9411              		.loc 1 95 2 is_stmt 1 view .LVU2709
  97:src/int.c     **** 		return v;
 9412              		.loc 1 97 2 view .LVU2710
  99:src/int.c     **** 	return v & mask;
 9413              		.loc 1 99 2 view .LVU2711
 100:src/int.c     **** #else
 9414              		.loc 1 100 2 view .LVU2712
  99:src/int.c     **** 	return v & mask;
 9415              		.loc 1 99 14 is_stmt 0 view .LVU2713
 9416 0262 0123     		movs	r3, #1
 9417 0264 A6F12002 		sub	r2, r6, #32
 9418 0268 C6F12001 		rsb	r1, r6, #32
 9419              	.LVL726:
  99:src/int.c     **** 	return v & mask;
 9420              		.loc 1 99 14 view .LVU2714
 9421 026c 23FA01F1 		lsr	r1, r3, r1
 9422 0270 03FA02F2 		lsl	r2, r3, r2
 9423 0274 B340     		lsls	r3, r3, r6
 9424 0276 0A43     		orrs	r2, r2, r1
  99:src/int.c     **** 	return v & mask;
 9425              		.loc 1 99 7 view .LVU2715
 9426 0278 13F1FF33 		adds	r3, r3, #-1
 9427 027c 42F1FF32 		adc	r2, r2, #-1
ARM GAS  /tmp/ccjGZi8K.s 			page 237


 100:src/int.c     **** #else
 9428              		.loc 1 100 11 view .LVU2716
 9429 0280 02EA0501 		and	r1, r2, r5
 9430 0284 03EA0400 		and	r0, r3, r4
 9431              	.LVL727:
 9432              	.L529:
 100:src/int.c     **** #else
 9433              		.loc 1 100 11 view .LVU2717
 9434              	.LBE1557:
 9435              	.LBE1558:
 651:src/int.c     **** 	set_overflow(0);
 9436              		.loc 1 651 2 view .LVU2718
 9437 0288 FFF7FEFF 		bl	setX_int
 9438              	.LVL728:
 652:src/int.c     **** #endif
 9439              		.loc 1 652 2 is_stmt 1 view .LVU2719
 9440              	.LBB1559:
 9441              	.LBI1559:
  67:src/int.c     **** #ifndef TINY_BUILD
 9442              		.loc 1 67 6 view .LVU2720
 9443              	.LBB1560:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 9444              		.loc 1 69 2 view .LVU2721
  72:src/int.c     **** #endif
 9445              		.loc 1 72 3 view .LVU2722
 9446 028c 5221     		movs	r1, #82
 9447 028e 6920     		movs	r0, #105
 9448 0290 FFF7FEFF 		bl	cmdflag
 9449              	.LVL729:
  72:src/int.c     **** #endif
 9450              		.loc 1 72 3 is_stmt 0 view .LVU2723
 9451              	.LBE1560:
 9452              	.LBE1559:
 654:src/int.c     **** 
 9453              		.loc 1 654 1 view .LVU2724
 9454 0294 13B0     		add	sp, sp, #76
 9455              		.cfi_remember_state
 9456              		.cfi_def_cfa_offset 36
 654:src/int.c     **** 
 9457              		.loc 1 654 1 view .LVU2725
 9458              		@ sp needed
 9459 0296 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9460              	.LVL730:
 9461              	.L523:
 9462              		.cfi_restore_state
 640:src/int.c     **** 			if (yv == 0)
 9463              		.loc 1 640 4 is_stmt 1 view .LVU2726
 641:src/int.c     **** 				xv++;
 9464              		.loc 1 641 4 view .LVU2727
 641:src/int.c     **** 				xv++;
 9465              		.loc 1 641 7 is_stmt 0 view .LVU2728
 9466 029a 58EA0903 		orrs	r3, r8, r9
 9467 029e 88D0     		beq	.L524
 9468              	.LVL731:
 9469              	.L540:
 640:src/int.c     **** 			if (yv == 0)
 9470              		.loc 1 640 7 view .LVU2729
ARM GAS  /tmp/ccjGZi8K.s 			page 238


 9471 02a0 E243     		mvns	r2, r4
 9472 02a2 EB43     		mvns	r3, r5
 9473 02a4 1446     		mov	r4, r2
 9474 02a6 1D46     		mov	r5, r3
 9475 02a8 CCE7     		b	.L528
 9476              	.LVL732:
 9477              	.L543:
 644:src/int.c     **** 			xv = ~xv;
 9478              		.loc 1 644 4 is_stmt 1 view .LVU2730
 645:src/int.c     **** 		} else
 9479              		.loc 1 645 4 view .LVU2731
 9480 02aa 03F03F02 		and	r2, r3, #63
 645:src/int.c     **** 		} else
 9481              		.loc 1 645 7 is_stmt 0 view .LVU2732
 9482 02ae E643     		mvns	r6, r4
 9483 02b0 EB43     		mvns	r3, r5
 9484 02b2 3446     		mov	r4, r6
 9485              	.LVL733:
 644:src/int.c     **** 			xv = ~xv;
 9486              		.loc 1 644 7 view .LVU2733
 9487 02b4 6FEA0A08 		mvn	r8, r10
 9488 02b8 561E     		subs	r6, r2, #1
 645:src/int.c     **** 		} else
 9489              		.loc 1 645 7 view .LVU2734
 9490 02ba 1D46     		mov	r5, r3
 9491              	.LVL734:
 644:src/int.c     **** 			xv = ~xv;
 9492              		.loc 1 644 7 view .LVU2735
 9493 02bc 6FEA0B09 		mvn	r9, fp
 9494              	.LVL735:
 644:src/int.c     **** 			xv = ~xv;
 9495              		.loc 1 644 7 view .LVU2736
 9496 02c0 A8E7     		b	.L521
 9497              	.LVL736:
 9498              	.L530:
 9499              	.LBB1561:
 9500              	.LBB1546:
 9501              	.LBB1545:
 9502              	.LBB1544:
 644:src/int.c     **** 			xv = ~xv;
 9503              		.loc 1 644 7 view .LVU2737
 9504 02c2 4FF0000C 		mov	ip, #0
 9505 02c6 4FF00043 		mov	r3, #-2147483648
 9506 02ca 93E7     		b	.L527
 9507              	.L545:
 9508              		.align	2
 9509              	.L544:
 9510 02cc 00000000 		.word	main_ram
 9511              	.LBE1544:
 9512              	.LBE1545:
 9513              	.LBE1546:
 9514              	.LBE1561:
 9515              		.cfi_endproc
 9516              	.LFE34:
 9518              		.section	.text.intDblDiv,"ax",%progbits
 9519              		.align	1
 9520              		.p2align 2,,3
ARM GAS  /tmp/ccjGZi8K.s 			page 239


 9521              		.global	intDblDiv
 9522              		.syntax unified
 9523              		.thumb
 9524              		.thumb_func
 9525              		.fpu fpv4-sp-d16
 9527              	intDblDiv:
 9528              	.LVL737:
 9529              	.LFB38:
 831:src/int.c     **** #ifndef TINY_BUILD
 9530              		.loc 1 831 76 is_stmt 1 view -0
 9531              		.cfi_startproc
 9532              		@ args = 8, pretend = 0, frame = 16
 9533              		@ frame_needed = 0, uses_anonymous_args = 0
 833:src/int.c     **** 	int sx, sy;
 9534              		.loc 1 833 2 view .LVU2739
 834:src/int.c     **** 
 9535              		.loc 1 834 2 view .LVU2740
 836:src/int.c     **** 	set_overflow(0);
 9536              		.loc 1 836 2 view .LVU2741
 831:src/int.c     **** #ifndef TINY_BUILD
 9537              		.loc 1 831 76 is_stmt 0 view .LVU2742
 9538 0000 70B5     		push	{r4, r5, r6, lr}
 9539              		.cfi_def_cfa_offset 16
 9540              		.cfi_offset 4, -16
 9541              		.cfi_offset 5, -12
 9542              		.cfi_offset 6, -8
 9543              		.cfi_offset 14, -4
 9544 0002 8AB0     		sub	sp, sp, #40
 9545              		.cfi_def_cfa_offset 56
 831:src/int.c     **** #ifndef TINY_BUILD
 9546              		.loc 1 831 76 view .LVU2743
 9547 0004 DDE90E45 		ldrd	r4, [sp, #56]
 836:src/int.c     **** 	set_overflow(0);
 9548              		.loc 1 836 6 view .LVU2744
 9549 0008 08AE     		add	r6, sp, #32
 9550 000a CDE90045 		strd	r4, [sp]
 9551 000e 07AD     		add	r5, sp, #28
 9552 0010 06AC     		add	r4, sp, #24
 9553 0012 CDE90356 		strd	r5, r6, [sp, #12]
 9554 0016 0294     		str	r4, [sp, #8]
 9555 0018 FFF7FEFF 		bl	divmod
 9556              	.LVL738:
 836:src/int.c     **** 	set_overflow(0);
 9557              		.loc 1 836 6 view .LVU2745
 9558 001c 0546     		mov	r5, r0
 9559 001e 0C46     		mov	r4, r1
 9560              	.LBB1562:
 9561              	.LBB1563:
  72:src/int.c     **** #endif
 9562              		.loc 1 72 3 view .LVU2746
 9563 0020 6920     		movs	r0, #105
 9564 0022 5221     		movs	r1, #82
 9565              	.LVL739:
  72:src/int.c     **** #endif
 9566              		.loc 1 72 3 view .LVU2747
 9567              	.LBE1563:
 9568              	.LBE1562:
ARM GAS  /tmp/ccjGZi8K.s 			page 240


 837:src/int.c     **** 	set_carry(r != 0);
 9569              		.loc 1 837 2 is_stmt 1 view .LVU2748
 9570              	.LBB1565:
 9571              	.LBI1562:
  67:src/int.c     **** #ifndef TINY_BUILD
 9572              		.loc 1 67 6 view .LVU2749
 9573              	.LBB1564:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 9574              		.loc 1 69 2 view .LVU2750
  72:src/int.c     **** #endif
 9575              		.loc 1 72 3 view .LVU2751
 9576 0024 FFF7FEFF 		bl	cmdflag
 9577              	.LVL740:
  72:src/int.c     **** #endif
 9578              		.loc 1 72 3 is_stmt 0 view .LVU2752
 9579              	.LBE1564:
 9580              	.LBE1565:
 838:src/int.c     **** 	return build_value(q, sx != sy);
 9581              		.loc 1 838 2 is_stmt 1 view .LVU2753
 9582              	.LBB1566:
 9583              	.LBI1566:
  54:src/int.c     **** #ifndef TINY_BUILD
 9584              		.loc 1 54 6 view .LVU2754
 9585              	.LBB1567:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 9586              		.loc 1 56 2 view .LVU2755
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 9587              		.loc 1 56 5 is_stmt 0 view .LVU2756
 9588 0028 DDE90823 		ldrd	r2, [sp, #32]
 9589 002c 1343     		orrs	r3, r2, r3
 9590 002e 0CD0     		beq	.L547
 9591 0030 FFF7FEFF 		bl	set_carry.part.0
 9592              	.LVL741:
 9593              	.L548:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 9594              		.loc 1 56 5 view .LVU2757
 9595              	.LBE1567:
 9596              	.LBE1566:
 839:src/int.c     **** #else
 9597              		.loc 1 839 2 is_stmt 1 view .LVU2758
 839:src/int.c     **** #else
 9598              		.loc 1 839 9 is_stmt 0 view .LVU2759
 9599 0034 DDE90623 		ldrd	r2, r3, [sp, #24]
 9600 0038 D21A     		subs	r2, r2, r3
 9601 003a 2846     		mov	r0, r5
 9602 003c 2146     		mov	r1, r4
 9603 003e 18BF     		it	ne
 9604 0040 0122     		movne	r2, #1
 9605 0042 FFF7FEFF 		bl	build_value
 9606              	.LVL742:
 843:src/int.c     **** 
 9607              		.loc 1 843 1 view .LVU2760
 9608 0046 0AB0     		add	sp, sp, #40
 9609              		.cfi_remember_state
 9610              		.cfi_def_cfa_offset 16
 9611              		@ sp needed
 9612 0048 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccjGZi8K.s 			page 241


 9613              	.LVL743:
 9614              	.L547:
 9615              		.cfi_restore_state
 9616              	.LBB1569:
 9617              	.LBB1568:
  59:src/int.c     **** #endif
 9618              		.loc 1 59 3 is_stmt 1 view .LVU2761
 9619 004a 5221     		movs	r1, #82
 9620 004c 6A20     		movs	r0, #106
 9621 004e FFF7FEFF 		bl	cmdflag
 9622              	.LVL744:
  59:src/int.c     **** #endif
 9623              		.loc 1 59 3 is_stmt 0 view .LVU2762
 9624 0052 EFE7     		b	.L548
 9625              	.LBE1568:
 9626              	.LBE1569:
 9627              		.cfi_endproc
 9628              	.LFE38:
 9630              		.section	.text.intDblRmdr,"ax",%progbits
 9631              		.align	1
 9632              		.p2align 2,,3
 9633              		.global	intDblRmdr
 9634              		.syntax unified
 9635              		.thumb
 9636              		.thumb_func
 9637              		.fpu fpv4-sp-d16
 9639              	intDblRmdr:
 9640              	.LVL745:
 9641              	.LFB39:
 845:src/int.c     **** #ifndef TINY_BUILD
 9642              		.loc 1 845 77 is_stmt 1 view -0
 9643              		.cfi_startproc
 9644              		@ args = 8, pretend = 0, frame = 16
 9645              		@ frame_needed = 0, uses_anonymous_args = 0
 847:src/int.c     **** 	int sx, sy;
 9646              		.loc 1 847 2 view .LVU2764
 848:src/int.c     **** 
 9647              		.loc 1 848 2 view .LVU2765
 850:src/int.c     **** 	return build_value(r, sy);
 9648              		.loc 1 850 2 view .LVU2766
 845:src/int.c     **** #ifndef TINY_BUILD
 9649              		.loc 1 845 77 is_stmt 0 view .LVU2767
 9650 0000 70B5     		push	{r4, r5, r6, lr}
 9651              		.cfi_def_cfa_offset 16
 9652              		.cfi_offset 4, -16
 9653              		.cfi_offset 5, -12
 9654              		.cfi_offset 6, -8
 9655              		.cfi_offset 14, -4
 9656 0002 8AB0     		sub	sp, sp, #40
 9657              		.cfi_def_cfa_offset 56
 845:src/int.c     **** #ifndef TINY_BUILD
 9658              		.loc 1 845 77 view .LVU2768
 9659 0004 DDE90E45 		ldrd	r4, [sp, #56]
 850:src/int.c     **** 	return build_value(r, sy);
 9660              		.loc 1 850 2 view .LVU2769
 9661 0008 08AE     		add	r6, sp, #32
 9662 000a CDE90045 		strd	r4, [sp]
ARM GAS  /tmp/ccjGZi8K.s 			page 242


 9663 000e 07AD     		add	r5, sp, #28
 9664 0010 06AC     		add	r4, sp, #24
 9665 0012 CDE90356 		strd	r5, r6, [sp, #12]
 9666 0016 0294     		str	r4, [sp, #8]
 9667 0018 FFF7FEFF 		bl	divmod
 9668              	.LVL746:
 851:src/int.c     **** #else
 9669              		.loc 1 851 2 is_stmt 1 view .LVU2770
 851:src/int.c     **** #else
 9670              		.loc 1 851 9 is_stmt 0 view .LVU2771
 9671 001c DDE90801 		ldrd	r0, [sp, #32]
 9672 0020 079A     		ldr	r2, [sp, #28]
 9673 0022 FFF7FEFF 		bl	build_value
 9674              	.LVL747:
 855:src/int.c     **** 
 9675              		.loc 1 855 1 view .LVU2772
 9676 0026 0AB0     		add	sp, sp, #40
 9677              		.cfi_def_cfa_offset 16
 9678              		@ sp needed
 9679 0028 70BD     		pop	{r4, r5, r6, pc}
 855:src/int.c     **** 
 9680              		.loc 1 855 1 view .LVU2773
 9681              		.cfi_endproc
 9682              	.LFE39:
 9684 002a 00BF     		.section	.text.intNot,"ax",%progbits
 9685              		.align	1
 9686              		.p2align 2,,3
 9687              		.global	intNot
 9688              		.syntax unified
 9689              		.thumb
 9690              		.thumb_func
 9691              		.fpu fpv4-sp-d16
 9693              	intNot:
 9694              	.LVL748:
 9695              	.LFB40:
 858:src/int.c     **** 	return mask_value(~x);
 9696              		.loc 1 858 39 is_stmt 1 view -0
 9697              		.cfi_startproc
 9698              		@ args = 0, pretend = 0, frame = 0
 9699              		@ frame_needed = 0, uses_anonymous_args = 0
 9700              		@ link register save eliminated.
 859:src/int.c     **** }
 9701              		.loc 1 859 2 view .LVU2775
 9702              	.LBB1570:
 9703              	.LBB1571:
 9704              	.LBB1572:
 9705              	.LBB1573:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9706              		.loc 1 44 26 is_stmt 0 view .LVU2776
 9707 0000 104B     		ldr	r3, .L558
 9708 0002 1B68     		ldr	r3, [r3]
 9709 0004 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9710              		.loc 1 44 15 view .LVU2777
 9711 0008 03F03F02 		and	r2, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9712              		.loc 1 45 26 view .LVU2778
ARM GAS  /tmp/ccjGZi8K.s 			page 243


 9713 000c 531E     		subs	r3, r2, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9714              		.loc 1 45 5 view .LVU2779
 9715 000e 3E2B     		cmp	r3, #62
 9716              	.LBE1573:
 9717              	.LBE1572:
 9718              	.LBE1571:
 9719              	.LBE1570:
 859:src/int.c     **** }
 9720              		.loc 1 859 9 view .LVU2780
 9721 0010 6FEA0000 		mvn	r0, r0
 9722              	.LVL749:
 859:src/int.c     **** }
 9723              		.loc 1 859 9 view .LVU2781
 9724 0014 6FEA0101 		mvn	r1, r1
 9725              	.LVL750:
 9726              	.LBB1578:
 9727              	.LBI1570:
  92:src/int.c     **** #ifndef TINY_BUILD
 9728              		.loc 1 92 15 is_stmt 1 view .LVU2782
 9729              	.LBB1576:
  94:src/int.c     **** 	long long int mask;
 9730              		.loc 1 94 2 view .LVU2783
 9731              	.LBB1575:
 9732              	.LBI1572:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9733              		.loc 1 43 14 view .LVU2784
 9734              	.LBB1574:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9735              		.loc 1 44 2 view .LVU2785
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9736              		.loc 1 45 2 view .LVU2786
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9737              		.loc 1 45 5 is_stmt 0 view .LVU2787
 9738 0018 13D8     		bhi	.L555
 9739              	.LVL751:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9740              		.loc 1 45 5 view .LVU2788
 9741              	.LBE1574:
 9742              	.LBE1575:
  95:src/int.c     **** 
 9743              		.loc 1 95 2 is_stmt 1 view .LVU2789
  97:src/int.c     **** 		return v;
 9744              		.loc 1 97 2 view .LVU2790
  99:src/int.c     **** 	return v & mask;
 9745              		.loc 1 99 2 view .LVU2791
 100:src/int.c     **** #else
 9746              		.loc 1 100 2 view .LVU2792
 9747              	.LBE1576:
 9748              	.LBE1578:
 858:src/int.c     **** 	return mask_value(~x);
 9749              		.loc 1 858 39 is_stmt 0 view .LVU2793
 9750 001a 30B4     		push	{r4, r5}
 9751              		.cfi_def_cfa_offset 8
 9752              		.cfi_offset 4, -8
 9753              		.cfi_offset 5, -4
 9754              	.LBB1579:
ARM GAS  /tmp/ccjGZi8K.s 			page 244


 9755              	.LBB1577:
  99:src/int.c     **** 	return v & mask;
 9756              		.loc 1 99 14 view .LVU2794
 9757 001c 0123     		movs	r3, #1
 9758 001e A2F12004 		sub	r4, r2, #32
 9759 0022 C2F12005 		rsb	r5, r2, #32
 9760 0026 23FA05F5 		lsr	r5, r3, r5
 9761 002a 03FA04F4 		lsl	r4, r3, r4
 9762 002e 9340     		lsls	r3, r3, r2
 9763 0030 2C43     		orrs	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 9764              		.loc 1 99 7 view .LVU2795
 9765 0032 13F1FF33 		adds	r3, r3, #-1
 9766 0036 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 9767              		.loc 1 100 11 view .LVU2796
 9768 003a 2140     		ands	r1, r1, r4
 9769              	.LVL752:
 100:src/int.c     **** #else
 9770              		.loc 1 100 11 view .LVU2797
 9771 003c 1840     		ands	r0, r0, r3
 9772              	.LBE1577:
 9773              	.LBE1579:
 860:src/int.c     **** 
 9774              		.loc 1 860 1 view .LVU2798
 9775 003e 30BC     		pop	{r4, r5}
 9776              		.cfi_restore 5
 9777              		.cfi_restore 4
 9778              		.cfi_def_cfa_offset 0
 9779 0040 7047     		bx	lr
 9780              	.LVL753:
 9781              	.L555:
 860:src/int.c     **** 
 9782              		.loc 1 860 1 view .LVU2799
 9783 0042 7047     		bx	lr
 9784              	.L559:
 9785              		.align	2
 9786              	.L558:
 9787 0044 00000000 		.word	main_ram
 9788              		.cfi_endproc
 9789              	.LFE40:
 9791              		.section	.text.intBooleanOp,"ax",%progbits
 9792              		.align	1
 9793              		.p2align 2,,3
 9794              		.global	intBooleanOp
 9795              		.syntax unified
 9796              		.thumb
 9797              		.thumb_func
 9798              		.fpu fpv4-sp-d16
 9800              	intBooleanOp:
 9801              	.LVL754:
 9802              	.LFB41:
 862:src/int.c     **** 	long long result;
 9803              		.loc 1 862 62 is_stmt 1 view -0
 9804              		.cfi_startproc
 9805              		@ args = 0, pretend = 0, frame = 0
 9806              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjGZi8K.s 			page 245


 9807              		@ link register save eliminated.
 863:src/int.c     **** 	const int op = XeqOpCode - (OP_DYA | OP_LAND);
 9808              		.loc 1 863 2 view .LVU2801
 864:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 9809              		.loc 1 864 2 view .LVU2802
 862:src/int.c     **** 	long long result;
 9810              		.loc 1 862 62 is_stmt 0 view .LVU2803
 9811 0000 30B4     		push	{r4, r5}
 9812              		.cfi_def_cfa_offset 8
 9813              		.cfi_offset 4, -8
 9814              		.cfi_offset 5, -4
 864:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 9815              		.loc 1 864 27 view .LVU2804
 9816 0002 1D4C     		ldr	r4, .L575
 9817 0004 2588     		ldrh	r5, [r4]
 864:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 9818              		.loc 1 864 12 view .LVU2805
 9819 0006 A5F54774 		sub	r4, r5, #796
 9820              	.LVL755:
 865:src/int.c     **** 
 9821              		.loc 1 865 2 is_stmt 1 view .LVU2806
 865:src/int.c     **** 
 9822              		.loc 1 865 30 is_stmt 0 view .LVU2807
 9823 000a 022C     		cmp	r4, #2
 9824 000c CABF     		itet	gt
 9825 000e A5F21F34 		subwgt	r4, r5, #799
 9826              	.LVL756:
 865:src/int.c     **** 
 9827              		.loc 1 865 30 view .LVU2808
 9828 0012 0025     		movle	r5, #0
 9829              	.LVL757:
 865:src/int.c     **** 
 9830              		.loc 1 865 30 view .LVU2809
 9831 0014 0325     		movgt	r5, #3
 9832              	.LVL758:
 867:src/int.c     **** 	case 0:  result = y & x; break;
 9833              		.loc 1 867 2 is_stmt 1 view .LVU2810
 9834 0016 24B3     		cbz	r4, .L562
 9835 0018 012C     		cmp	r4, #1
 9836 001a 27D0     		beq	.L563
 870:src/int.c     **** 	}
 9837              		.loc 1 870 11 view .LVU2811
 870:src/int.c     **** 	}
 9838              		.loc 1 870 18 is_stmt 0 view .LVU2812
 9839 001c 5040     		eors	r0, r0, r2
 9840              	.LVL759:
 870:src/int.c     **** 	}
 9841              		.loc 1 870 18 view .LVU2813
 9842 001e 5940     		eors	r1, r1, r3
 9843              	.LVL760:
 870:src/int.c     **** 	}
 9844              		.loc 1 870 27 is_stmt 1 view .LVU2814
 872:src/int.c     **** 		result = ~result;
 9845              		.loc 1 872 2 view .LVU2815
 872:src/int.c     **** 		result = ~result;
 9846              		.loc 1 872 5 is_stmt 0 view .LVU2816
 9847 0020 E5B9     		cbnz	r5, .L574
ARM GAS  /tmp/ccjGZi8K.s 			page 246


 9848              	.LVL761:
 9849              	.L566:
 874:src/int.c     **** }
 9850              		.loc 1 874 2 is_stmt 1 view .LVU2817
 9851              	.LBB1580:
 9852              	.LBI1580:
  92:src/int.c     **** #ifndef TINY_BUILD
 9853              		.loc 1 92 15 view .LVU2818
 9854              	.LBB1581:
  94:src/int.c     **** 	long long int mask;
 9855              		.loc 1 94 2 view .LVU2819
 9856              	.LBB1582:
 9857              	.LBI1582:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 9858              		.loc 1 43 14 view .LVU2820
 9859              	.LBB1583:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9860              		.loc 1 44 2 view .LVU2821
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9861              		.loc 1 44 26 is_stmt 0 view .LVU2822
 9862 0022 164B     		ldr	r3, .L575+4
 9863 0024 1B68     		ldr	r3, [r3]
 9864 0026 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9865              		.loc 1 44 15 view .LVU2823
 9866 002a 03F03F04 		and	r4, r3, #63
 9867              	.LVL762:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9868              		.loc 1 45 2 is_stmt 1 view .LVU2824
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9869              		.loc 1 45 26 is_stmt 0 view .LVU2825
 9870 002e 631E     		subs	r3, r4, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9871              		.loc 1 45 5 view .LVU2826
 9872 0030 3E2B     		cmp	r3, #62
 9873 0032 11D8     		bhi	.L560
 9874              	.LVL763:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 9875              		.loc 1 45 5 view .LVU2827
 9876              	.LBE1583:
 9877              	.LBE1582:
  95:src/int.c     **** 
 9878              		.loc 1 95 2 is_stmt 1 view .LVU2828
  97:src/int.c     **** 		return v;
 9879              		.loc 1 97 2 view .LVU2829
  99:src/int.c     **** 	return v & mask;
 9880              		.loc 1 99 2 view .LVU2830
 100:src/int.c     **** #else
 9881              		.loc 1 100 2 view .LVU2831
  99:src/int.c     **** 	return v & mask;
 9882              		.loc 1 99 14 is_stmt 0 view .LVU2832
 9883 0034 0123     		movs	r3, #1
 9884 0036 A4F12005 		sub	r5, r4, #32
 9885              	.LVL764:
  99:src/int.c     **** 	return v & mask;
 9886              		.loc 1 99 14 view .LVU2833
 9887 003a C4F12002 		rsb	r2, r4, #32
ARM GAS  /tmp/ccjGZi8K.s 			page 247


 9888              	.LVL765:
  99:src/int.c     **** 	return v & mask;
 9889              		.loc 1 99 14 view .LVU2834
 9890 003e 03FA05F5 		lsl	r5, r3, r5
 9891 0042 23FA02F2 		lsr	r2, r3, r2
 9892 0046 A340     		lsls	r3, r3, r4
  99:src/int.c     **** 	return v & mask;
 9893              		.loc 1 99 7 view .LVU2835
 9894 0048 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 9895              		.loc 1 99 14 view .LVU2836
 9896 004c 45EA0205 		orr	r5, r5, r2
  99:src/int.c     **** 	return v & mask;
 9897              		.loc 1 99 7 view .LVU2837
 9898 0050 45F1FF35 		adc	r5, r5, #-1
 100:src/int.c     **** #else
 9899              		.loc 1 100 11 view .LVU2838
 9900 0054 2940     		ands	r1, r1, r5
 9901              	.LVL766:
 100:src/int.c     **** #else
 9902              		.loc 1 100 11 view .LVU2839
 9903 0056 1840     		ands	r0, r0, r3
 9904              	.L560:
 100:src/int.c     **** #else
 9905              		.loc 1 100 11 view .LVU2840
 9906              	.LBE1581:
 9907              	.LBE1580:
 875:src/int.c     **** 
 9908              		.loc 1 875 1 view .LVU2841
 9909 0058 30BC     		pop	{r4, r5}
 9910              		.cfi_remember_state
 9911              		.cfi_restore 5
 9912              		.cfi_restore 4
 9913              		.cfi_def_cfa_offset 0
 9914 005a 7047     		bx	lr
 9915              	.LVL767:
 9916              	.L574:
 9917              		.cfi_restore_state
 873:src/int.c     **** 	return mask_value(result);
 9918              		.loc 1 873 3 is_stmt 1 view .LVU2842
 873:src/int.c     **** 	return mask_value(result);
 9919              		.loc 1 873 10 is_stmt 0 view .LVU2843
 9920 005c C043     		mvns	r0, r0
 9921 005e C943     		mvns	r1, r1
 9922              	.LVL768:
 873:src/int.c     **** 	return mask_value(result);
 9923              		.loc 1 873 10 view .LVU2844
 9924 0060 DFE7     		b	.L566
 9925              	.LVL769:
 9926              	.L562:
 868:src/int.c     **** 	case 1:  result = y | x; break;
 9927              		.loc 1 868 11 is_stmt 1 view .LVU2845
 868:src/int.c     **** 	case 1:  result = y | x; break;
 9928              		.loc 1 868 18 is_stmt 0 view .LVU2846
 9929 0062 1040     		ands	r0, r0, r2
 9930              	.LVL770:
 868:src/int.c     **** 	case 1:  result = y | x; break;
ARM GAS  /tmp/ccjGZi8K.s 			page 248


 9931              		.loc 1 868 18 view .LVU2847
 9932 0064 1940     		ands	r1, r1, r3
 9933              	.LVL771:
 868:src/int.c     **** 	case 1:  result = y | x; break;
 9934              		.loc 1 868 27 is_stmt 1 view .LVU2848
 872:src/int.c     **** 		result = ~result;
 9935              		.loc 1 872 2 view .LVU2849
 872:src/int.c     **** 		result = ~result;
 9936              		.loc 1 872 5 is_stmt 0 view .LVU2850
 9937 0066 002D     		cmp	r5, #0
 9938 0068 DBD0     		beq	.L566
 9939 006a F7E7     		b	.L574
 9940              	.LVL772:
 9941              	.L563:
 869:src/int.c     **** 	default: result = y ^ x; break;
 9942              		.loc 1 869 11 is_stmt 1 view .LVU2851
 869:src/int.c     **** 	default: result = y ^ x; break;
 9943              		.loc 1 869 18 is_stmt 0 view .LVU2852
 9944 006c 1043     		orrs	r0, r0, r2
 9945              	.LVL773:
 869:src/int.c     **** 	default: result = y ^ x; break;
 9946              		.loc 1 869 18 view .LVU2853
 9947 006e 1943     		orrs	r1, r1, r3
 9948              	.LVL774:
 869:src/int.c     **** 	default: result = y ^ x; break;
 9949              		.loc 1 869 27 is_stmt 1 view .LVU2854
 872:src/int.c     **** 		result = ~result;
 9950              		.loc 1 872 2 view .LVU2855
 872:src/int.c     **** 		result = ~result;
 9951              		.loc 1 872 5 is_stmt 0 view .LVU2856
 9952 0070 002D     		cmp	r5, #0
 9953 0072 D6D0     		beq	.L566
 9954 0074 F2E7     		b	.L574
 9955              	.L576:
 9956 0076 00BF     		.align	2
 9957              	.L575:
 9958 0078 00000000 		.word	XeqOpCode
 9959 007c 00000000 		.word	main_ram
 9960              		.cfi_endproc
 9961              	.LFE41:
 9963              		.section	.text.intFP,"ax",%progbits
 9964              		.align	1
 9965              		.p2align 2,,3
 9966              		.global	intFP
 9967              		.syntax unified
 9968              		.thumb
 9969              		.thumb_func
 9970              		.fpu fpv4-sp-d16
 9972              	intFP:
 9973              	.LVL775:
 9974              	.LFB42:
 879:src/int.c     **** 	return 0;
 9975              		.loc 1 879 38 is_stmt 1 view -0
 9976              		.cfi_startproc
 9977              		@ args = 0, pretend = 0, frame = 0
 9978              		@ frame_needed = 0, uses_anonymous_args = 0
 9979              		@ link register save eliminated.
ARM GAS  /tmp/ccjGZi8K.s 			page 249


 880:src/int.c     **** }
 9980              		.loc 1 880 2 view .LVU2858
 881:src/int.c     **** 
 9981              		.loc 1 881 1 is_stmt 0 view .LVU2859
 9982 0000 0020     		movs	r0, #0
 9983              	.LVL776:
 881:src/int.c     **** 
 9984              		.loc 1 881 1 view .LVU2860
 9985 0002 0021     		movs	r1, #0
 9986 0004 7047     		bx	lr
 9987              		.cfi_endproc
 9988              	.LFE42:
 9990 0006 00BF     		.section	.text.intSign,"ax",%progbits
 9991              		.align	1
 9992              		.p2align 2,,3
 9993              		.global	intSign
 9994              		.syntax unified
 9995              		.thumb
 9996              		.thumb_func
 9997              		.fpu fpv4-sp-d16
 9999              	intSign:
 10000              	.LVL777:
 10001              	.LFB43:
 884:src/int.c     **** 	int sgn;
 10002              		.loc 1 884 40 is_stmt 1 view -0
 10003              		.cfi_startproc
 10004              		@ args = 0, pretend = 0, frame = 8
 10005              		@ frame_needed = 0, uses_anonymous_args = 0
 885:src/int.c     **** 	unsigned long long int v = extract_value(x, &sgn);
 10006              		.loc 1 885 2 view .LVU2862
 886:src/int.c     **** 
 10007              		.loc 1 886 2 view .LVU2863
 884:src/int.c     **** 	int sgn;
 10008              		.loc 1 884 40 is_stmt 0 view .LVU2864
 10009 0000 30B5     		push	{r4, r5, lr}
 10010              		.cfi_def_cfa_offset 12
 10011              		.cfi_offset 4, -12
 10012              		.cfi_offset 5, -8
 10013              		.cfi_offset 14, -4
 10014 0002 83B0     		sub	sp, sp, #12
 10015              		.cfi_def_cfa_offset 24
 886:src/int.c     **** 
 10016              		.loc 1 886 29 view .LVU2865
 10017 0004 01AA     		add	r2, sp, #4
 10018 0006 FFF7FEFF 		bl	extract_value
 10019              	.LVL778:
 886:src/int.c     **** 
 10020              		.loc 1 886 29 view .LVU2866
 10021 000a 0446     		mov	r4, r0
 10022 000c 0D46     		mov	r5, r1
 10023              	.LVL779:
 888:src/int.c     **** 		sgn = 0;
 10024              		.loc 1 888 2 is_stmt 1 view .LVU2867
 888:src/int.c     **** 		sgn = 0;
 10025              		.loc 1 888 5 is_stmt 0 view .LVU2868
 10026 000e 54EA0503 		orrs	r3, r4, r5
 10027 0012 08D0     		beq	.L579
ARM GAS  /tmp/ccjGZi8K.s 			page 250


 891:src/int.c     **** 	return build_value(v, sgn);
 10028              		.loc 1 891 5 view .LVU2869
 10029 0014 0124     		movs	r4, #1
 10030              	.LVL780:
 891:src/int.c     **** 	return build_value(v, sgn);
 10031              		.loc 1 891 5 view .LVU2870
 10032 0016 0025     		movs	r5, #0
 10033              	.LVL781:
 892:src/int.c     **** }
 10034              		.loc 1 892 2 is_stmt 1 view .LVU2871
 10035 0018 019A     		ldr	r2, [sp, #4]
 892:src/int.c     **** }
 10036              		.loc 1 892 9 is_stmt 0 view .LVU2872
 10037 001a 2046     		mov	r0, r4
 10038 001c 2946     		mov	r1, r5
 10039 001e FFF7FEFF 		bl	build_value
 10040              	.LVL782:
 893:src/int.c     **** 
 10041              		.loc 1 893 1 view .LVU2873
 10042 0022 03B0     		add	sp, sp, #12
 10043              		.cfi_remember_state
 10044              		.cfi_def_cfa_offset 12
 10045              		@ sp needed
 10046 0024 30BD     		pop	{r4, r5, pc}
 10047              	.LVL783:
 10048              	.L579:
 10049              		.cfi_restore_state
 889:src/int.c     **** 	else
 10050              		.loc 1 889 3 is_stmt 1 view .LVU2874
 889:src/int.c     **** 	else
 10051              		.loc 1 889 7 is_stmt 0 view .LVU2875
 10052 0026 0022     		movs	r2, #0
 892:src/int.c     **** }
 10053              		.loc 1 892 9 view .LVU2876
 10054 0028 2046     		mov	r0, r4
 10055 002a 2946     		mov	r1, r5
 889:src/int.c     **** 	else
 10056              		.loc 1 889 7 view .LVU2877
 10057 002c 0192     		str	r2, [sp, #4]
 892:src/int.c     **** }
 10058              		.loc 1 892 2 is_stmt 1 view .LVU2878
 892:src/int.c     **** }
 10059              		.loc 1 892 9 is_stmt 0 view .LVU2879
 10060 002e FFF7FEFF 		bl	build_value
 10061              	.LVL784:
 893:src/int.c     **** 
 10062              		.loc 1 893 1 view .LVU2880
 10063 0032 03B0     		add	sp, sp, #12
 10064              		.cfi_def_cfa_offset 12
 10065              		@ sp needed
 10066 0034 30BD     		pop	{r4, r5, pc}
 893:src/int.c     **** 
 10067              		.loc 1 893 1 view .LVU2881
 10068              		.cfi_endproc
 10069              	.LFE43:
 10071 0036 00BF     		.section	.text.introt,"ax",%progbits
 10072              		.align	1
ARM GAS  /tmp/ccjGZi8K.s 			page 251


 10073              		.p2align 2,,3
 10074              		.global	introt
 10075              		.syntax unified
 10076              		.thumb
 10077              		.thumb_func
 10078              		.fpu fpv4-sp-d16
 10080              	introt:
 10081              	.LVL785:
 10082              	.LFB51:
 963:src/int.c     **** #ifndef TINY_BUILD
 10083              		.loc 1 963 45 is_stmt 1 view -0
 10084              		.cfi_startproc
 10085              		@ args = 0, pretend = 0, frame = 8
 10086              		@ frame_needed = 0, uses_anonymous_args = 0
 965:src/int.c     **** 	unsigned int mod;
 10087              		.loc 1 965 2 view .LVU2883
 966:src/int.c     **** 	unsigned int ws;
 10088              		.loc 1 966 2 view .LVU2884
 967:src/int.c     **** 	long long int x;
 10089              		.loc 1 967 2 view .LVU2885
 968:src/int.c     **** 	unsigned int i;
 10090              		.loc 1 968 2 view .LVU2886
 969:src/int.c     **** 	
 10091              		.loc 1 969 2 view .LVU2887
 971:src/int.c     **** 		return;
 10092              		.loc 1 971 2 view .LVU2888
 10093              	.LBB1594:
 10094              	.LBI1594:
  24:src/int.c     **** 	if (! is_intmode())
 10095              		.loc 1 24 12 view .LVU2889
 10096              	.LBB1595:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10097              		.loc 1 25 2 view .LVU2890
 10098              	.LBE1595:
 10099              	.LBE1594:
 963:src/int.c     **** #ifndef TINY_BUILD
 10100              		.loc 1 963 45 is_stmt 0 view .LVU2891
 10101 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 10102              		.cfi_def_cfa_offset 24
 10103              		.cfi_offset 4, -24
 10104              		.cfi_offset 5, -20
 10105              		.cfi_offset 6, -16
 10106              		.cfi_offset 7, -12
 10107              		.cfi_offset 8, -8
 10108              		.cfi_offset 14, -4
 10109              	.LBB1601:
 10110              	.LBB1598:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10111              		.loc 1 25 8 view .LVU2892
 10112 0004 3C4F     		ldr	r7, .L611
 10113 0006 3A68     		ldr	r2, [r7]
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10114              		.loc 1 25 6 view .LVU2893
 10115 0008 92F8E857 		ldrb	r5, [r2, #2024]	@ zero_extendqisi2
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10116              		.loc 1 25 5 view .LVU2894
 10117 000c EB07     		lsls	r3, r5, #31
ARM GAS  /tmp/ccjGZi8K.s 			page 252


 10118              	.LBE1598:
 10119              	.LBE1601:
 963:src/int.c     **** #ifndef TINY_BUILD
 10120              		.loc 1 963 45 view .LVU2895
 10121 000e 82B0     		sub	sp, sp, #8
 10122              		.cfi_def_cfa_offset 32
 963:src/int.c     **** #ifndef TINY_BUILD
 10123              		.loc 1 963 45 view .LVU2896
 10124 0010 0646     		mov	r6, r0
 10125 0012 0C46     		mov	r4, r1
 10126              	.LBB1602:
 10127              	.LBB1599:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10128              		.loc 1 25 5 view .LVU2897
 10129 0014 44D5     		bpl	.L610
 10130              	.LVL786:
 10131              	.L583:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10132              		.loc 1 25 5 view .LVU2898
 10133              	.LBE1599:
 10134              	.LBE1602:
 974:src/int.c     **** 	x = getX_int();
 10135              		.loc 1 974 2 is_stmt 1 view .LVU2899
 10136              	.LBB1603:
 10137              	.LBI1603:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 10138              		.loc 1 43 14 view .LVU2900
 10139              	.LBB1604:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10140              		.loc 1 44 2 view .LVU2901
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10141              		.loc 1 44 26 is_stmt 0 view .LVU2902
 10142 0016 92F8E987 		ldrb	r8, [r2, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10143              		.loc 1 44 15 view .LVU2903
 10144 001a 08F03F08 		and	r8, r8, #63
 10145              	.LVL787:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10146              		.loc 1 45 2 is_stmt 1 view .LVU2904
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10147              		.loc 1 45 26 is_stmt 0 view .LVU2905
 10148 001e 08F1FF33 		add	r3, r8, #-1
  46:src/int.c     **** 	return il;
 10149              		.loc 1 46 10 view .LVU2906
 10150 0022 3F2B     		cmp	r3, #63
 10151 0024 28BF     		it	cs
 10152 0026 4FF04008 		movcs	r8, #64
 10153              	.LVL788:
  46:src/int.c     **** 	return il;
 10154              		.loc 1 46 10 view .LVU2907
 10155              	.LBE1604:
 10156              	.LBE1603:
 975:src/int.c     **** 
 10157              		.loc 1 975 2 is_stmt 1 view .LVU2908
 975:src/int.c     **** 
 10158              		.loc 1 975 6 is_stmt 0 view .LVU2909
 10159 002a FFF7FEFF 		bl	getX_int
ARM GAS  /tmp/ccjGZi8K.s 			page 253


 10160              	.LVL789:
 977:src/int.c     **** 		switch (op) {
 10161              		.loc 1 977 2 is_stmt 1 view .LVU2910
 977:src/int.c     **** 		switch (op) {
 10162              		.loc 1 977 5 is_stmt 0 view .LVU2911
 10163 002e 96B1     		cbz	r6, .L586
 978:src/int.c     **** 		case RARG_RL:	f = &intRL;	mod = ws;	break;
 10164              		.loc 1 978 3 is_stmt 1 view .LVU2912
 10165 0030 A4F15D03 		sub	r3, r4, #93
 10166 0034 062B     		cmp	r3, #6
 10167 0036 5BD8     		bhi	.L582
 10168 0038 DFE803F0 		tbb	[pc, r3]
 10169              	.L588:
 10170 003c 3D       		.byte	(.L594-.L588)/2
 10171 003d 04       		.byte	(.L600-.L588)/2
 10172 003e 48       		.byte	(.L592-.L588)/2
 10173 003f 4C       		.byte	(.L591-.L588)/2
 10174 0040 50       		.byte	(.L590-.L588)/2
 10175 0041 55       		.byte	(.L589-.L588)/2
 10176 0042 38       		.byte	(.L587-.L588)/2
 10177 0043 00       		.p2align 1
 10178              	.L600:
 977:src/int.c     **** 		switch (op) {
 10179              		.loc 1 977 5 is_stmt 0 view .LVU2913
 10180 0044 2D4D     		ldr	r5, .L611+4
 10181 0046 4346     		mov	r3, r8
 10182              	.L593:
 10183              	.LVL790:
 989:src/int.c     **** 			if (mod)
 10184              		.loc 1 989 3 is_stmt 1 view .LVU2914
 989:src/int.c     **** 			if (mod)
 10185              		.loc 1 989 6 is_stmt 0 view .LVU2915
 10186 0048 4645     		cmp	r6, r8
 10187 004a 38D8     		bhi	.L598
 10188              	.LVL791:
 10189              	.L599:
 979:src/int.c     **** 		case RARG_RR:	f = &intRR;	mod = ws;	break;
 10190              		.loc 1 979 19 discriminator 3 view .LVU2916
 10191 004c 0024     		movs	r4, #0
 10192              	.L596:
 10193              	.LVL792:
 996:src/int.c     **** 	}
 10194              		.loc 1 996 4 is_stmt 1 discriminator 3 view .LVU2917
 995:src/int.c     **** 			x = (*f)(x);
 10195              		.loc 1 995 21 is_stmt 0 discriminator 3 view .LVU2918
 10196 004e 0134     		adds	r4, r4, #1
 10197              	.LVL793:
 996:src/int.c     **** 	}
 10198              		.loc 1 996 9 discriminator 3 view .LVU2919
 10199 0050 A847     		blx	r5
 10200              	.LVL794:
 995:src/int.c     **** 			x = (*f)(x);
 10201              		.loc 1 995 20 is_stmt 1 discriminator 3 view .LVU2920
 995:src/int.c     **** 			x = (*f)(x);
 10202              		.loc 1 995 13 discriminator 3 view .LVU2921
 995:src/int.c     **** 			x = (*f)(x);
 10203              		.loc 1 995 3 is_stmt 0 discriminator 3 view .LVU2922
ARM GAS  /tmp/ccjGZi8K.s 			page 254


 10204 0052 B442     		cmp	r4, r6
 10205 0054 FBD3     		bcc	.L596
 10206              	.LVL795:
 10207              	.L586:
 998:src/int.c     **** 	setX_int(mask_value(x));
 10208              		.loc 1 998 2 is_stmt 1 view .LVU2923
 10209 0056 CDE90001 		strd	r0, r1, [sp]
 10210              	.LVL796:
 998:src/int.c     **** 	setX_int(mask_value(x));
 10211              		.loc 1 998 2 is_stmt 0 view .LVU2924
 10212 005a FFF7FEFF 		bl	setlastX
 10213              	.LVL797:
 999:src/int.c     **** #endif
 10214              		.loc 1 999 2 is_stmt 1 view .LVU2925
 10215              	.LBB1605:
 10216              	.LBI1605:
  92:src/int.c     **** #ifndef TINY_BUILD
 10217              		.loc 1 92 15 view .LVU2926
 10218              	.LBB1606:
  94:src/int.c     **** 	long long int mask;
 10219              		.loc 1 94 2 view .LVU2927
 10220              	.LBB1607:
 10221              	.LBI1607:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 10222              		.loc 1 43 14 view .LVU2928
 10223              	.LBB1608:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10224              		.loc 1 44 2 view .LVU2929
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10225              		.loc 1 44 26 is_stmt 0 view .LVU2930
 10226 005e 3B68     		ldr	r3, [r7]
 10227 0060 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10228              		.loc 1 44 15 view .LVU2931
 10229 0064 03F03F02 		and	r2, r3, #63
 10230              	.LVL798:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10231              		.loc 1 45 2 is_stmt 1 view .LVU2932
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10232              		.loc 1 45 26 is_stmt 0 view .LVU2933
 10233 0068 531E     		subs	r3, r2, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10234              		.loc 1 45 5 view .LVU2934
 10235 006a 3E2B     		cmp	r3, #62
 10236 006c DDE90001 		ldrd	r0, r1, [sp]
 10237 0070 11D8     		bhi	.L597
 10238              	.LVL799:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10239              		.loc 1 45 5 view .LVU2935
 10240              	.LBE1608:
 10241              	.LBE1607:
  95:src/int.c     **** 
 10242              		.loc 1 95 2 is_stmt 1 view .LVU2936
  97:src/int.c     **** 		return v;
 10243              		.loc 1 97 2 view .LVU2937
  99:src/int.c     **** 	return v & mask;
 10244              		.loc 1 99 2 view .LVU2938
ARM GAS  /tmp/ccjGZi8K.s 			page 255


 100:src/int.c     **** #else
 10245              		.loc 1 100 2 view .LVU2939
  99:src/int.c     **** 	return v & mask;
 10246              		.loc 1 99 14 is_stmt 0 view .LVU2940
 10247 0072 0123     		movs	r3, #1
 10248 0074 A2F12004 		sub	r4, r2, #32
 10249 0078 C2F12005 		rsb	r5, r2, #32
 10250 007c 03FA04F4 		lsl	r4, r3, r4
 10251 0080 23FA05F5 		lsr	r5, r3, r5
 10252 0084 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 10253              		.loc 1 99 7 view .LVU2941
 10254 0086 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 10255              		.loc 1 99 14 view .LVU2942
 10256 008a 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 10257              		.loc 1 99 7 view .LVU2943
 10258 008e 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 10259              		.loc 1 100 11 view .LVU2944
 10260 0092 2140     		ands	r1, r1, r4
 10261 0094 1840     		ands	r0, r0, r3
 10262              	.LVL800:
 10263              	.L597:
 100:src/int.c     **** #else
 10264              		.loc 1 100 11 view .LVU2945
 10265              	.LBE1606:
 10266              	.LBE1605:
1001:src/int.c     **** 
 10267              		.loc 1 1001 1 view .LVU2946
 10268 0096 02B0     		add	sp, sp, #8
 10269              		.cfi_remember_state
 10270              		.cfi_def_cfa_offset 24
 10271              		@ sp needed
 10272 0098 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 10273              		.cfi_restore 14
 10274              		.cfi_restore 8
 10275              		.cfi_restore 7
 10276              		.cfi_restore 6
 10277              		.cfi_restore 5
 10278              		.cfi_restore 4
 10279              		.cfi_def_cfa_offset 0
 10280              	.LVL801:
 999:src/int.c     **** #endif
 10281              		.loc 1 999 2 view .LVU2947
 10282 009c FFF7FEBF 		b	setX_int
 10283              	.LVL802:
 10284              	.L610:
 10285              		.cfi_restore_state
 10286              	.LBB1609:
 10287              	.LBB1600:
 10288              	.LBB1596:
 10289              	.LBI1596:
  24:src/int.c     **** 	if (! is_intmode())
 10290              		.loc 1 24 12 is_stmt 1 view .LVU2948
 10291              	.LBB1597:
ARM GAS  /tmp/ccjGZi8K.s 			page 256


  26:src/int.c     **** 	return 0;
 10292              		.loc 1 26 3 view .LVU2949
  26:src/int.c     **** 	return 0;
 10293              		.loc 1 26 10 is_stmt 0 view .LVU2950
 10294 00a0 0D20     		movs	r0, #13
 10295              	.LVL803:
  26:src/int.c     **** 	return 0;
 10296              		.loc 1 26 10 view .LVU2951
 10297 00a2 FFF7FEFF 		bl	report_err
 10298              	.LVL804:
  26:src/int.c     **** 	return 0;
 10299              		.loc 1 26 10 view .LVU2952
 10300              	.LBE1597:
 10301              	.LBE1596:
 10302              	.LBE1600:
 10303              	.LBE1609:
 971:src/int.c     **** 		return;
 10304              		.loc 1 971 5 view .LVU2953
 10305 00a6 18BB     		cbnz	r0, .L582
 10306 00a8 3A68     		ldr	r2, [r7]
 10307 00aa B4E7     		b	.L583
 10308              	.LVL805:
 10309              	.L587:
 985:src/int.c     **** 		default:
 10310              		.loc 1 985 18 is_stmt 1 view .LVU2954
 985:src/int.c     **** 		default:
 10311              		.loc 1 985 31 view .LVU2955
 985:src/int.c     **** 		default:
 10312              		.loc 1 985 40 view .LVU2956
 989:src/int.c     **** 			if (mod)
 10313              		.loc 1 989 3 view .LVU2957
 10314 00ac 4645     		cmp	r6, r8
 985:src/int.c     **** 		default:
 10315              		.loc 1 985 20 is_stmt 0 view .LVU2958
 10316 00ae 144D     		ldr	r5, .L611+8
 10317 00b0 28BF     		it	cs
 10318 00b2 4646     		movcs	r6, r8
 10319              	.LVL806:
 985:src/int.c     **** 		default:
 10320              		.loc 1 985 20 view .LVU2959
 10321 00b4 CAE7     		b	.L599
 10322              	.LVL807:
 10323              	.L594:
 989:src/int.c     **** 			if (mod)
 10324              		.loc 1 989 3 is_stmt 1 view .LVU2960
 989:src/int.c     **** 			if (mod)
 10325              		.loc 1 989 6 is_stmt 0 view .LVU2961
 10326 00b6 4645     		cmp	r6, r8
 979:src/int.c     **** 		case RARG_RR:	f = &intRR;	mod = ws;	break;
 10327              		.loc 1 979 19 view .LVU2962
 10328 00b8 124D     		ldr	r5, .L611+12
 989:src/int.c     **** 			if (mod)
 10329              		.loc 1 989 6 view .LVU2963
 10330 00ba C7D9     		bls	.L599
 10331 00bc 4346     		mov	r3, r8
 10332              	.LVL808:
 10333              	.L598:
ARM GAS  /tmp/ccjGZi8K.s 			page 257


 991:src/int.c     **** 			else
 10334              		.loc 1 991 5 is_stmt 1 view .LVU2964
 991:src/int.c     **** 			else
 10335              		.loc 1 991 9 is_stmt 0 view .LVU2965
 10336 00be B6FBF3F2 		udiv	r2, r6, r3
 10337 00c2 03FB1266 		mls	r6, r3, r2, r6
 10338              	.LVL809:
 995:src/int.c     **** 			x = (*f)(x);
 10339              		.loc 1 995 3 is_stmt 1 view .LVU2966
 995:src/int.c     **** 			x = (*f)(x);
 10340              		.loc 1 995 13 view .LVU2967
 995:src/int.c     **** 			x = (*f)(x);
 10341              		.loc 1 995 3 is_stmt 0 view .LVU2968
 10342 00c6 002E     		cmp	r6, #0
 10343 00c8 C0D1     		bne	.L599
 995:src/int.c     **** 			x = (*f)(x);
 10344              		.loc 1 995 3 view .LVU2969
 10345 00ca C4E7     		b	.L586
 10346              	.LVL810:
 10347              	.L592:
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10348              		.loc 1 981 18 is_stmt 1 view .LVU2970
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10349              		.loc 1 981 31 view .LVU2971
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10350              		.loc 1 981 20 is_stmt 0 view .LVU2972
 10351 00cc 0E4D     		ldr	r5, .L611+16
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10352              		.loc 1 981 35 view .LVU2973
 10353 00ce 08F10103 		add	r3, r8, #1
 10354              	.LVL811:
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10355              		.loc 1 981 45 is_stmt 1 view .LVU2974
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10356              		.loc 1 981 3 is_stmt 0 view .LVU2975
 10357 00d2 B9E7     		b	.L593
 10358              	.LVL812:
 10359              	.L591:
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10360              		.loc 1 982 18 is_stmt 1 view .LVU2976
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10361              		.loc 1 982 31 view .LVU2977
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10362              		.loc 1 982 20 is_stmt 0 view .LVU2978
 10363 00d4 0D4D     		ldr	r5, .L611+20
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10364              		.loc 1 982 35 view .LVU2979
 10365 00d6 08F10103 		add	r3, r8, #1
 10366              	.LVL813:
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10367              		.loc 1 982 45 is_stmt 1 view .LVU2980
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10368              		.loc 1 982 3 is_stmt 0 view .LVU2981
 10369 00da B5E7     		b	.L593
 10370              	.LVL814:
 10371              	.L590:
 989:src/int.c     **** 			if (mod)
ARM GAS  /tmp/ccjGZi8K.s 			page 258


 10372              		.loc 1 989 3 is_stmt 1 view .LVU2982
 10373 00dc 4645     		cmp	r6, r8
 983:src/int.c     **** 		case RARG_SR:	f = &intLSR;	mod = 0;	break;
 10374              		.loc 1 983 19 is_stmt 0 view .LVU2983
 10375 00de 0C4D     		ldr	r5, .L611+24
 10376 00e0 28BF     		it	cs
 10377 00e2 4646     		movcs	r6, r8
 10378              	.LVL815:
 983:src/int.c     **** 		case RARG_SR:	f = &intLSR;	mod = 0;	break;
 10379              		.loc 1 983 19 view .LVU2984
 10380 00e4 B2E7     		b	.L599
 10381              	.LVL816:
 10382              	.L589:
 984:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10383              		.loc 1 984 17 is_stmt 1 view .LVU2985
 984:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10384              		.loc 1 984 30 view .LVU2986
 984:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10385              		.loc 1 984 39 view .LVU2987
 989:src/int.c     **** 			if (mod)
 10386              		.loc 1 989 3 view .LVU2988
 10387 00e6 4645     		cmp	r6, r8
 984:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10388              		.loc 1 984 19 is_stmt 0 view .LVU2989
 10389 00e8 0A4D     		ldr	r5, .L611+28
 10390 00ea 28BF     		it	cs
 10391 00ec 4646     		movcs	r6, r8
 10392              	.LVL817:
 984:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10393              		.loc 1 984 19 view .LVU2990
 10394 00ee ADE7     		b	.L599
 10395              	.LVL818:
 10396              	.L582:
1001:src/int.c     **** 
 10397              		.loc 1 1001 1 view .LVU2991
 10398 00f0 02B0     		add	sp, sp, #8
 10399              		.cfi_def_cfa_offset 24
 10400              		@ sp needed
 10401 00f2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 10402              	.LVL819:
 10403              	.L612:
1001:src/int.c     **** 
 10404              		.loc 1 1001 1 view .LVU2992
 10405 00f6 00BF     		.align	2
 10406              	.L611:
 10407 00f8 00000000 		.word	main_ram
 10408 00fc 00000000 		.word	intRR
 10409 0100 00000000 		.word	intASR
 10410 0104 00000000 		.word	intRL
 10411 0108 00000000 		.word	intRLC
 10412 010c 00000000 		.word	intRRC
 10413 0110 00000000 		.word	intLSL
 10414 0114 00000000 		.word	intLSR
 10415              		.cfi_endproc
 10416              	.LFE51:
 10418              		.section	.text.intNumBits,"ax",%progbits
 10419              		.align	1
ARM GAS  /tmp/ccjGZi8K.s 			page 259


 10420              		.p2align 2,,3
 10421              		.global	intNumBits
 10422              		.syntax unified
 10423              		.thumb
 10424              		.thumb_func
 10425              		.fpu fpv4-sp-d16
 10427              	intNumBits:
 10428              	.LVL820:
 10429              	.LFB54:
1019:src/int.c     **** #ifndef TINY_BUILD
 10430              		.loc 1 1019 43 is_stmt 1 view -0
 10431              		.cfi_startproc
 10432              		@ args = 0, pretend = 0, frame = 0
 10433              		@ frame_needed = 0, uses_anonymous_args = 0
 10434              		@ link register save eliminated.
1021:src/int.c     **** #else
 10435              		.loc 1 1021 2 view .LVU2994
 10436              	.LBB1620:
 10437              	.LBI1620:
1014:src/int.c     **** 	return count32bits(x & 0xffffffff) + count32bits((x >> 32) & 0xffffffff);
 10438              		.loc 1 1014 21 view .LVU2995
 10439              	.LBB1621:
1015:src/int.c     **** }
 10440              		.loc 1 1015 2 view .LVU2996
 10441              	.LBB1622:
 10442              	.LBI1622:
1008:src/int.c     **** 	v = v - ((v >> 1) & 0x55555555);
 10443              		.loc 1 1008 21 view .LVU2997
 10444              	.LBB1623:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10445              		.loc 1 1009 2 view .LVU2998
 10446              	.LBE1623:
 10447              	.LBE1622:
 10448              	.LBB1633:
 10449              	.LBB1634:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10450              		.loc 1 1009 14 is_stmt 0 view .LVU2999
 10451 0000 4A08     		lsrs	r2, r1, #1
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10452              		.loc 1 1009 20 view .LVU3000
 10453 0002 02F05532 		and	r2, r2, #1431655765
 10454              	.LBE1634:
 10455              	.LBE1633:
 10456              	.LBB1644:
 10457              	.LBB1624:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10458              		.loc 1 1009 14 view .LVU3001
 10459 0006 4308     		lsrs	r3, r0, #1
 10460              	.LBE1624:
 10461              	.LBE1644:
 10462              	.LBB1645:
 10463              	.LBB1635:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10464              		.loc 1 1009 4 view .LVU3002
 10465 0008 891A     		subs	r1, r1, r2
 10466              	.LVL821:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
ARM GAS  /tmp/ccjGZi8K.s 			page 260


 10467              		.loc 1 1009 4 view .LVU3003
 10468              	.LBE1635:
 10469              	.LBE1645:
 10470              	.LBB1646:
 10471              	.LBB1625:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10472              		.loc 1 1009 20 view .LVU3004
 10473 000a 03F05533 		and	r3, r3, #1431655765
 10474              	.LBE1625:
 10475              	.LBE1646:
 10476              	.LBE1621:
 10477              	.LBE1620:
1019:src/int.c     **** #ifndef TINY_BUILD
 10478              		.loc 1 1019 43 view .LVU3005
 10479 000e 10B4     		push	{r4}
 10480              		.cfi_def_cfa_offset 4
 10481              		.cfi_offset 4, -4
 10482              	.LBB1668:
 10483              	.LBB1669:
 10484              	.LBB1670:
 10485              	.LBB1671:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10486              		.loc 1 44 26 view .LVU3006
 10487 0010 184C     		ldr	r4, .L616
 10488              	.LBE1671:
 10489              	.LBE1670:
 10490              	.LBE1669:
 10491              	.LBE1668:
 10492              	.LBB1690:
 10493              	.LBB1662:
 10494              	.LBB1647:
 10495              	.LBB1626:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10496              		.loc 1 1009 4 view .LVU3007
 10497 0012 C01A     		subs	r0, r0, r3
 10498              	.LVL822:
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10499              		.loc 1 1010 2 is_stmt 1 view .LVU3008
 10500              	.LBE1626:
 10501              	.LBE1647:
 10502              	.LBB1648:
 10503              	.LBB1636:
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10504              		.loc 1 1010 29 is_stmt 0 view .LVU3009
 10505 0014 8A08     		lsrs	r2, r1, #2
 10506              	.LBE1636:
 10507              	.LBE1648:
 10508              	.LBB1649:
 10509              	.LBB1627:
 10510 0016 8308     		lsrs	r3, r0, #2
 10511              	.LBE1627:
 10512              	.LBE1649:
 10513              	.LBB1650:
 10514              	.LBB1637:
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10515              		.loc 1 1010 35 view .LVU3010
 10516 0018 02F03332 		and	r2, r2, #858993459
ARM GAS  /tmp/ccjGZi8K.s 			page 261


 10517              	.LBE1637:
 10518              	.LBE1650:
 10519              	.LBE1662:
 10520              	.LBE1690:
 10521              	.LBB1691:
 10522              	.LBB1684:
 10523              	.LBB1678:
 10524              	.LBB1672:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10525              		.loc 1 44 26 view .LVU3011
 10526 001c 2468     		ldr	r4, [r4]
 10527              	.LBE1672:
 10528              	.LBE1678:
 10529              	.LBE1684:
 10530              	.LBE1691:
 10531              	.LBB1692:
 10532              	.LBB1663:
 10533              	.LBB1651:
 10534              	.LBB1638:
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10535              		.loc 1 1010 9 view .LVU3012
 10536 001e 01F03331 		and	r1, r1, #858993459
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10537              		.loc 1 1010 4 view .LVU3013
 10538 0022 1144     		add	r1, r1, r2
 10539              	.LBE1638:
 10540              	.LBE1651:
 10541              	.LBB1652:
 10542              	.LBB1628:
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10543              		.loc 1 1010 35 view .LVU3014
 10544 0024 03F03332 		and	r2, r3, #858993459
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10545              		.loc 1 1010 9 view .LVU3015
 10546 0028 00F03333 		and	r3, r0, #858993459
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10547              		.loc 1 1010 4 view .LVU3016
 10548 002c 1344     		add	r3, r3, r2
 10549              	.LVL823:
1011:src/int.c     **** }
 10550              		.loc 1 1011 2 is_stmt 1 view .LVU3017
1011:src/int.c     **** }
 10551              		.loc 1 1011 2 is_stmt 0 view .LVU3018
 10552              	.LBE1628:
 10553              	.LBE1652:
 10554              	.LBB1653:
 10555              	.LBI1633:
1008:src/int.c     **** 	v = v - ((v >> 1) & 0x55555555);
 10556              		.loc 1 1008 21 is_stmt 1 view .LVU3019
 10557              	.LBB1639:
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10558              		.loc 1 1009 2 view .LVU3020
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10559              		.loc 1 1010 2 view .LVU3021
1011:src/int.c     **** }
 10560              		.loc 1 1011 2 view .LVU3022
1011:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 262


 10561              		.loc 1 1011 14 is_stmt 0 view .LVU3023
 10562 002e 01EB1110 		add	r0, r1, r1, lsr #4
 10563              	.LBE1639:
 10564              	.LBE1653:
 10565              	.LBE1663:
 10566              	.LBE1692:
 10567              	.LBB1693:
 10568              	.LBB1685:
 10569              	.LBB1679:
 10570              	.LBB1673:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10571              		.loc 1 44 26 view .LVU3024
 10572 0032 94F8E927 		ldrb	r2, [r4, #2025]	@ zero_extendqisi2
 10573              	.LBE1673:
 10574              	.LBE1679:
 10575              	.LBE1685:
 10576              	.LBE1693:
 10577              	.LBB1694:
 10578              	.LBB1664:
 10579              	.LBB1654:
 10580              	.LBB1640:
1011:src/int.c     **** }
 10581              		.loc 1 1011 26 view .LVU3025
 10582 0036 00F00F30 		and	r0, r0, #252645135
 10583              	.LBE1640:
 10584              	.LBE1654:
 10585              	.LBB1655:
 10586              	.LBB1629:
1011:src/int.c     **** }
 10587              		.loc 1 1011 14 view .LVU3026
 10588 003a 03EB1313 		add	r3, r3, r3, lsr #4
 10589              	.LBE1629:
 10590              	.LBE1655:
 10591              	.LBB1656:
 10592              	.LBB1641:
1011:src/int.c     **** }
 10593              		.loc 1 1011 39 view .LVU3027
 10594 003e 00EB0020 		add	r0, r0, r0, lsl #8
 10595              	.LBE1641:
 10596              	.LBE1656:
 10597              	.LBB1657:
 10598              	.LBB1630:
1011:src/int.c     **** }
 10599              		.loc 1 1011 26 view .LVU3028
 10600 0042 03F00F33 		and	r3, r3, #252645135
 10601              	.LBE1630:
 10602              	.LBE1657:
 10603              	.LBE1664:
 10604              	.LBE1694:
 10605              	.LBB1695:
 10606              	.LBB1686:
 10607              	.LBB1680:
 10608              	.LBB1674:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10609              		.loc 1 44 15 view .LVU3029
 10610 0046 02F03F02 		and	r2, r2, #63
 10611              	.LBE1674:
ARM GAS  /tmp/ccjGZi8K.s 			page 263


 10612              	.LBE1680:
 10613              	.LBE1686:
 10614              	.LBE1695:
 10615              	.LBB1696:
 10616              	.LBB1665:
 10617              	.LBB1658:
 10618              	.LBB1642:
1011:src/int.c     **** }
 10619              		.loc 1 1011 39 view .LVU3030
 10620 004a 00EB0040 		add	r0, r0, r0, lsl #16
 10621              	.LBE1642:
 10622              	.LBE1658:
 10623              	.LBB1659:
 10624              	.LBB1631:
 10625 004e 03EB0323 		add	r3, r3, r3, lsl #8
 10626              	.LBE1631:
 10627              	.LBE1659:
 10628              	.LBE1665:
 10629              	.LBE1696:
 10630              	.LBB1697:
 10631              	.LBB1687:
 10632              	.LBB1681:
 10633              	.LBB1675:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10634              		.loc 1 45 26 view .LVU3031
 10635 0052 511E     		subs	r1, r2, #1
 10636              	.LBE1675:
 10637              	.LBE1681:
 10638              	.LBE1687:
 10639              	.LBE1697:
 10640              	.LBB1698:
 10641              	.LBB1666:
 10642              	.LBB1660:
 10643              	.LBB1643:
1011:src/int.c     **** }
 10644              		.loc 1 1011 52 view .LVU3032
 10645 0054 000E     		lsrs	r0, r0, #24
 10646              	.LBE1643:
 10647              	.LBE1660:
 10648              	.LBB1661:
 10649              	.LBB1632:
1011:src/int.c     **** }
 10650              		.loc 1 1011 39 view .LVU3033
 10651 0056 03EB0343 		add	r3, r3, r3, lsl #16
 10652              	.LBE1632:
 10653              	.LBE1661:
 10654              	.LBE1666:
 10655              	.LBE1698:
 10656              	.LBB1699:
 10657              	.LBB1688:
 10658              	.LBB1682:
 10659              	.LBB1676:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10660              		.loc 1 45 5 view .LVU3034
 10661 005a 3E29     		cmp	r1, #62
 10662              	.LBE1676:
 10663              	.LBE1682:
ARM GAS  /tmp/ccjGZi8K.s 			page 264


 10664              	.LBE1688:
 10665              	.LBE1699:
 10666              	.LBB1700:
 10667              	.LBB1667:
1015:src/int.c     **** }
 10668              		.loc 1 1015 37 view .LVU3035
 10669 005c 00EB1360 		add	r0, r0, r3, lsr #24
 10670              	.LVL824:
1015:src/int.c     **** }
 10671              		.loc 1 1015 37 view .LVU3036
 10672              	.LBE1667:
 10673              	.LBE1700:
 10674              	.LBB1701:
 10675              	.LBI1668:
  92:src/int.c     **** #ifndef TINY_BUILD
 10676              		.loc 1 92 15 is_stmt 1 view .LVU3037
 10677              	.LBB1689:
  94:src/int.c     **** 	long long int mask;
 10678              		.loc 1 94 2 view .LVU3038
 10679              	.LBB1683:
 10680              	.LBI1670:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 10681              		.loc 1 43 14 view .LVU3039
 10682              	.LBB1677:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10683              		.loc 1 44 2 view .LVU3040
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10684              		.loc 1 45 2 view .LVU3041
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10685              		.loc 1 45 5 is_stmt 0 view .LVU3042
 10686 0060 04D8     		bhi	.L613
 10687              	.LVL825:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10688              		.loc 1 45 5 view .LVU3043
 10689              	.LBE1677:
 10690              	.LBE1683:
  95:src/int.c     **** 
 10691              		.loc 1 95 2 is_stmt 1 view .LVU3044
  97:src/int.c     **** 		return v;
 10692              		.loc 1 97 2 view .LVU3045
  99:src/int.c     **** 	return v & mask;
 10693              		.loc 1 99 2 view .LVU3046
 100:src/int.c     **** #else
 10694              		.loc 1 100 2 view .LVU3047
  99:src/int.c     **** 	return v & mask;
 10695              		.loc 1 99 14 is_stmt 0 view .LVU3048
 10696 0062 0123     		movs	r3, #1
 10697 0064 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 10698              		.loc 1 99 7 view .LVU3049
 10699 0066 13F1FF33 		adds	r3, r3, #-1
 100:src/int.c     **** #else
 10700              		.loc 1 100 11 view .LVU3050
 10701 006a 1840     		ands	r0, r0, r3
 10702              	.LVL826:
 10703              	.L613:
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 265


 10704              		.loc 1 100 11 view .LVU3051
 10705              	.LBE1689:
 10706              	.LBE1701:
1025:src/int.c     **** 
 10707              		.loc 1 1025 1 view .LVU3052
 10708 006c 0021     		movs	r1, #0
 10709 006e 5DF8044B 		ldr	r4, [sp], #4
 10710              		.cfi_restore 4
 10711              		.cfi_def_cfa_offset 0
 10712 0072 7047     		bx	lr
 10713              	.L617:
 10714              		.align	2
 10715              	.L616:
 10716 0074 00000000 		.word	main_ram
 10717              		.cfi_endproc
 10718              	.LFE54:
 10720              		.section	.text.intSqrt,"ax",%progbits
 10721              		.align	1
 10722              		.p2align 2,,3
 10723              		.global	intSqrt
 10724              		.syntax unified
 10725              		.thumb
 10726              		.thumb_func
 10727              		.fpu fpv4-sp-d16
 10729              	intSqrt:
 10730              	.LVL827:
 10731              	.LFB55:
1030:src/int.c     **** #if !defined(TINY_BUILD)
 10732              		.loc 1 1030 40 is_stmt 1 view -0
 10733              		.cfi_startproc
 10734              		@ args = 0, pretend = 0, frame = 8
 10735              		@ frame_needed = 0, uses_anonymous_args = 0
1032:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 10736              		.loc 1 1032 2 view .LVU3054
1033:src/int.c     **** 	unsigned long long int n0, n1;
 10737              		.loc 1 1033 2 view .LVU3055
1030:src/int.c     **** #if !defined(TINY_BUILD)
 10738              		.loc 1 1030 40 is_stmt 0 view .LVU3056
 10739 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10740              		.cfi_def_cfa_offset 28
 10741              		.cfi_offset 4, -28
 10742              		.cfi_offset 5, -24
 10743              		.cfi_offset 6, -20
 10744              		.cfi_offset 7, -16
 10745              		.cfi_offset 8, -12
 10746              		.cfi_offset 9, -8
 10747              		.cfi_offset 14, -4
 10748 0004 83B0     		sub	sp, sp, #12
 10749              		.cfi_def_cfa_offset 40
1033:src/int.c     **** 	unsigned long long int n0, n1;
 10750              		.loc 1 1033 29 view .LVU3057
 10751 0006 01AA     		add	r2, sp, #4
 10752 0008 FFF7FEFF 		bl	extract_value
 10753              	.LVL828:
1036:src/int.c     **** 		report_err(ERR_DOMAIN);
 10754              		.loc 1 1036 6 view .LVU3058
 10755 000c 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccjGZi8K.s 			page 266


1034:src/int.c     **** 
 10756              		.loc 1 1034 2 is_stmt 1 view .LVU3059
1036:src/int.c     **** 		report_err(ERR_DOMAIN);
 10757              		.loc 1 1036 2 view .LVU3060
1036:src/int.c     **** 		report_err(ERR_DOMAIN);
 10758              		.loc 1 1036 5 is_stmt 0 view .LVU3061
 10759 000e 002A     		cmp	r2, #0
 10760 0010 4AD1     		bne	.L632
 10761 0012 0646     		mov	r6, r0
 10762 0014 0F46     		mov	r7, r1
1040:src/int.c     **** 		n1 = 0;
 10763              		.loc 1 1040 2 is_stmt 1 view .LVU3062
1040:src/int.c     **** 		n1 = 0;
 10764              		.loc 1 1040 5 is_stmt 0 view .LVU3063
 10765 0016 56EA0703 		orrs	r3, r6, r7
 10766 001a 06D1     		bne	.L633
 10767              	.L621:
 10768              	.LVL829:
1054:src/int.c     **** #else
 10769              		.loc 1 1054 2 is_stmt 1 view .LVU3064
1054:src/int.c     **** #else
 10770              		.loc 1 1054 9 is_stmt 0 view .LVU3065
 10771 001c 3046     		mov	r0, r6
 10772 001e 3946     		mov	r1, r7
 10773 0020 FFF7FEFF 		bl	build_value
 10774              	.LVL830:
1058:src/int.c     **** 
 10775              		.loc 1 1058 1 view .LVU3066
 10776 0024 03B0     		add	sp, sp, #12
 10777              		.cfi_remember_state
 10778              		.cfi_def_cfa_offset 28
 10779              		@ sp needed
 10780 0026 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10781              	.LVL831:
 10782              	.L633:
 10783              		.cfi_restore_state
1043:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10784              		.loc 1 1043 3 is_stmt 1 view .LVU3067
1043:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10785              		.loc 1 1043 10 is_stmt 0 view .LVU3068
 10786 002a 4308     		lsrs	r3, r0, #1
 10787 002c 43EAC173 		orr	r3, r3, r1, lsl #31
1043:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10788              		.loc 1 1043 6 view .LVU3069
 10789 0030 13F10108 		adds	r8, r3, #1
1043:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10790              		.loc 1 1043 10 view .LVU3070
 10791 0034 4FEA5103 		lsr	r3, r1, #1
1043:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10792              		.loc 1 1043 6 view .LVU3071
 10793 0038 43F10009 		adc	r9, r3, #0
 10794              	.LVL832:
1044:src/int.c     **** 		while (n1 < n0) {
 10795              		.loc 1 1044 3 is_stmt 1 view .LVU3072
1044:src/int.c     **** 		while (n1 < n0) {
 10796              		.loc 1 1044 10 is_stmt 0 view .LVU3073
 10797 003c 4B46     		mov	r3, r9
ARM GAS  /tmp/ccjGZi8K.s 			page 267


 10798 003e 4246     		mov	r2, r8
 10799 0040 FFF7FEFF 		bl	__aeabi_uldivmod
 10800              	.LVL833:
1044:src/int.c     **** 		while (n1 < n0) {
 10801              		.loc 1 1044 20 view .LVU3074
 10802 0044 4FEA5803 		lsr	r3, r8, #1
 10803 0048 43EAC973 		orr	r3, r3, r9, lsl #31
1044:src/int.c     **** 		while (n1 < n0) {
 10804              		.loc 1 1044 6 view .LVU3075
 10805 004c C418     		adds	r4, r0, r3
1044:src/int.c     **** 		while (n1 < n0) {
 10806              		.loc 1 1044 20 view .LVU3076
 10807 004e 4FEA5903 		lsr	r3, r9, #1
1044:src/int.c     **** 		while (n1 < n0) {
 10808              		.loc 1 1044 6 view .LVU3077
 10809 0052 41EB0305 		adc	r5, r1, r3
 10810              	.LVL834:
1045:src/int.c     **** 			n0 = n1;
 10811              		.loc 1 1045 3 is_stmt 1 view .LVU3078
1045:src/int.c     **** 			n0 = n1;
 10812              		.loc 1 1045 9 view .LVU3079
 10813 0056 4D45     		cmp	r5, r9
 10814 0058 08BF     		it	eq
 10815 005a 4445     		cmpeq	r4, r8
 10816 005c 12D2     		bcs	.L622
 10817              	.LVL835:
 10818              	.L623:
1046:src/int.c     **** 			n1 = (n0 + v / n0) / 2;
 10819              		.loc 1 1046 4 view .LVU3080
1047:src/int.c     **** 		}
 10820              		.loc 1 1047 4 view .LVU3081
1047:src/int.c     **** 		}
 10821              		.loc 1 1047 17 is_stmt 0 view .LVU3082
 10822 005e 2246     		mov	r2, r4
 10823 0060 2B46     		mov	r3, r5
 10824 0062 3046     		mov	r0, r6
 10825 0064 3946     		mov	r1, r7
 10826 0066 FFF7FEFF 		bl	__aeabi_uldivmod
 10827              	.LVL836:
1047:src/int.c     **** 		}
 10828              		.loc 1 1047 13 view .LVU3083
 10829 006a 0019     		adds	r0, r0, r4
 10830 006c 45EB0101 		adc	r1, r5, r1
 10831 0070 2246     		mov	r2, r4
 10832 0072 2B46     		mov	r3, r5
1047:src/int.c     **** 		}
 10833              		.loc 1 1047 7 view .LVU3084
 10834 0074 4408     		lsrs	r4, r0, #1
 10835              	.LVL837:
1047:src/int.c     **** 		}
 10836              		.loc 1 1047 7 view .LVU3085
 10837 0076 4D08     		lsrs	r5, r1, #1
 10838 0078 44EAC174 		orr	r4, r4, r1, lsl #31
 10839              	.LVL838:
1045:src/int.c     **** 			n0 = n1;
 10840              		.loc 1 1045 9 is_stmt 1 view .LVU3086
 10841 007c 9D42     		cmp	r5, r3
ARM GAS  /tmp/ccjGZi8K.s 			page 268


 10842 007e 08BF     		it	eq
 10843 0080 9442     		cmpeq	r4, r2
 10844 0082 ECD3     		bcc	.L623
 10845              	.LVL839:
 10846              	.L622:
1049:src/int.c     **** 		if (n0 > v)
 10847              		.loc 1 1049 3 view .LVU3087
1049:src/int.c     **** 		if (n0 > v)
 10848              		.loc 1 1049 6 is_stmt 0 view .LVU3088
 10849 0084 A4FB0423 		umull	r2, r3, r4, r4
 10850 0088 04FB05F1 		mul	r1, r4, r5
 10851 008c 03EB4103 		add	r3, r3, r1, lsl #1
1050:src/int.c     **** 			n1--;
 10852              		.loc 1 1050 3 is_stmt 1 view .LVU3089
1050:src/int.c     **** 			n1--;
 10853              		.loc 1 1050 6 is_stmt 0 view .LVU3090
 10854 0090 9F42     		cmp	r7, r3
 10855 0092 08BF     		it	eq
 10856 0094 9642     		cmpeq	r6, r2
 10857 0096 0FD2     		bcs	.L624
1051:src/int.c     **** 		set_carry((n0 != v)?1:0);
 10858              		.loc 1 1051 4 is_stmt 1 view .LVU3091
1051:src/int.c     **** 		set_carry((n0 != v)?1:0);
 10859              		.loc 1 1051 6 is_stmt 0 view .LVU3092
 10860 0098 14F1FF36 		adds	r6, r4, #-1
 10861 009c 45F1FF37 		adc	r7, r5, #-1
 10862              	.LVL840:
1052:src/int.c     **** 	}
 10863              		.loc 1 1052 3 is_stmt 1 view .LVU3093
 10864              	.LBB1702:
 10865              	.LBI1702:
  54:src/int.c     **** #ifndef TINY_BUILD
 10866              		.loc 1 54 6 view .LVU3094
 10867              	.LBB1703:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10868              		.loc 1 56 2 view .LVU3095
 10869              	.L625:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10870              		.loc 1 56 2 is_stmt 0 view .LVU3096
 10871 00a0 FFF7FEFF 		bl	set_carry.part.0
 10872              	.LVL841:
 10873 00a4 019A     		ldr	r2, [sp, #4]
 10874 00a6 B9E7     		b	.L621
 10875              	.LVL842:
 10876              	.L632:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10877              		.loc 1 56 2 view .LVU3097
 10878              	.LBE1703:
 10879              	.LBE1702:
1037:src/int.c     **** 		return 0;
 10880              		.loc 1 1037 3 is_stmt 1 view .LVU3098
 10881 00a8 0120     		movs	r0, #1
 10882 00aa FFF7FEFF 		bl	report_err
 10883              	.LVL843:
1038:src/int.c     **** 	}
 10884              		.loc 1 1038 3 view .LVU3099
1038:src/int.c     **** 	}
ARM GAS  /tmp/ccjGZi8K.s 			page 269


 10885              		.loc 1 1038 10 is_stmt 0 view .LVU3100
 10886 00ae 0020     		movs	r0, #0
 10887 00b0 0146     		mov	r1, r0
1058:src/int.c     **** 
 10888              		.loc 1 1058 1 view .LVU3101
 10889 00b2 03B0     		add	sp, sp, #12
 10890              		.cfi_remember_state
 10891              		.cfi_def_cfa_offset 28
 10892              		@ sp needed
 10893 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10894              	.LVL844:
 10895              	.L624:
 10896              		.cfi_restore_state
1052:src/int.c     **** 	}
 10897              		.loc 1 1052 3 is_stmt 1 view .LVU3102
 10898              	.LBB1705:
  54:src/int.c     **** #ifndef TINY_BUILD
 10899              		.loc 1 54 6 view .LVU3103
 10900              	.LBB1704:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10901              		.loc 1 56 2 view .LVU3104
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10902              		.loc 1 56 5 is_stmt 0 view .LVU3105
 10903 00b8 07D1     		bne	.L634
  59:src/int.c     **** #endif
 10904              		.loc 1 59 3 is_stmt 1 view .LVU3106
 10905 00ba 5221     		movs	r1, #82
 10906 00bc 6A20     		movs	r0, #106
 10907 00be FFF7FEFF 		bl	cmdflag
 10908              	.LVL845:
 10909 00c2 2646     		mov	r6, r4
 10910 00c4 019A     		ldr	r2, [sp, #4]
 10911 00c6 2F46     		mov	r7, r5
 10912 00c8 A8E7     		b	.L621
 10913              	.L634:
 10914 00ca 2646     		mov	r6, r4
 10915 00cc 2F46     		mov	r7, r5
 10916 00ce E7E7     		b	.L625
 10917              	.LBE1704:
 10918              	.LBE1705:
 10919              		.cfi_endproc
 10920              	.LFE55:
 10922              		.section	.text.int_power_helper,"ax",%progbits
 10923              		.align	1
 10924              		.p2align 2,,3
 10925              		.global	int_power_helper
 10926              		.syntax unified
 10927              		.thumb
 10928              		.thumb_func
 10929              		.fpu fpv4-sp-d16
 10931              	int_power_helper:
 10932              	.LVL846:
 10933              	.LFB56:
1060:src/int.c     **** 	unsigned long long int r = 1;
 10934              		.loc 1 1060 100 view -0
 10935              		.cfi_startproc
 10936              		@ args = 4, pretend = 0, frame = 24
ARM GAS  /tmp/ccjGZi8K.s 			page 270


 10937              		@ frame_needed = 0, uses_anonymous_args = 0
1061:src/int.c     **** 	unsigned int i;
 10938              		.loc 1 1061 2 view .LVU3108
1062:src/int.c     **** 	unsigned int ws;
 10939              		.loc 1 1062 2 view .LVU3109
1063:src/int.c     **** 	int overflow_next = 0;
 10940              		.loc 1 1063 2 view .LVU3110
1064:src/int.c     **** 
 10941              		.loc 1 1064 2 view .LVU3111
1060:src/int.c     **** 	unsigned long long int r = 1;
 10942              		.loc 1 1060 100 is_stmt 0 view .LVU3112
 10943 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 10944              		.cfi_def_cfa_offset 36
 10945              		.cfi_offset 4, -36
 10946              		.cfi_offset 5, -32
 10947              		.cfi_offset 6, -28
 10948              		.cfi_offset 7, -24
 10949              		.cfi_offset 8, -20
 10950              		.cfi_offset 9, -16
 10951              		.cfi_offset 10, -12
 10952              		.cfi_offset 11, -8
 10953              		.cfi_offset 14, -4
 10954              	.LBB1706:
 10955              	.LBB1707:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10956              		.loc 1 44 26 view .LVU3113
 10957 0004 2B4C     		ldr	r4, .L651
 10958 0006 2468     		ldr	r4, [r4]
 10959 0008 94F8E997 		ldrb	r9, [r4, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10960              		.loc 1 44 15 view .LVU3114
 10961 000c 09F03F09 		and	r9, r9, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 10962              		.loc 1 45 26 view .LVU3115
 10963 0010 09F1FF36 		add	r6, r9, #-1
 10964              	.LBE1707:
 10965              	.LBE1706:
1060:src/int.c     **** 	unsigned long long int r = 1;
 10966              		.loc 1 1060 100 view .LVU3116
 10967 0014 89B0     		sub	sp, sp, #36
 10968              		.cfi_def_cfa_offset 72
1064:src/int.c     **** 
 10969              		.loc 1 1064 6 view .LVU3117
 10970 0016 0027     		movs	r7, #0
1060:src/int.c     **** 	unsigned long long int r = 1;
 10971              		.loc 1 1060 100 view .LVU3118
 10972 0018 9C46     		mov	ip, r3
 10973              	.LBB1711:
 10974              	.LBB1708:
  46:src/int.c     **** 	return il;
 10975              		.loc 1 46 10 view .LVU3119
 10976 001a 3F2E     		cmp	r6, #63
 10977              	.LBE1708:
 10978              	.LBE1711:
1060:src/int.c     **** 	unsigned long long int r = 1;
 10979              		.loc 1 1060 100 view .LVU3120
 10980 001c 1446     		mov	r4, r2
ARM GAS  /tmp/ccjGZi8K.s 			page 271


1067:src/int.c     **** 		if (vx & 1) {
 10981              		.loc 1 1067 8 view .LVU3121
 10982 001e 3E46     		mov	r6, r7
1060:src/int.c     **** 	unsigned long long int r = 1;
 10983              		.loc 1 1060 100 view .LVU3122
 10984 0020 0246     		mov	r2, r0
 10985              	.LVL847:
1060:src/int.c     **** 	unsigned long long int r = 1;
 10986              		.loc 1 1060 100 view .LVU3123
 10987 0022 0B46     		mov	r3, r1
 10988 0024 6546     		mov	r5, ip
 10989              	.LBB1712:
 10990              	.LBB1709:
  46:src/int.c     **** 	return il;
 10991              		.loc 1 46 10 view .LVU3124
 10992 0026 28BF     		it	cs
 10993 0028 4FF04009 		movcs	r9, #64
 10994              	.LBE1709:
 10995              	.LBE1712:
1064:src/int.c     **** 
 10996              		.loc 1 1064 6 view .LVU3125
 10997 002c 0797     		str	r7, [sp, #28]
1066:src/int.c     **** 	for (i=0; i<ws && vx != 0; i++) {
 10998              		.loc 1 1066 2 is_stmt 1 view .LVU3126
 10999              	.LBB1713:
 11000              	.LBI1706:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 11001              		.loc 1 43 14 view .LVU3127
 11002              	.LBB1710:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11003              		.loc 1 44 2 view .LVU3128
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 11004              		.loc 1 45 2 view .LVU3129
 11005              	.LVL848:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 11006              		.loc 1 45 2 is_stmt 0 view .LVU3130
 11007              	.LBE1710:
 11008              	.LBE1713:
1067:src/int.c     **** 		if (vx & 1) {
 11009              		.loc 1 1067 2 is_stmt 1 view .LVU3131
1067:src/int.c     **** 		if (vx & 1) {
 11010              		.loc 1 1067 12 view .LVU3132
1061:src/int.c     **** 	unsigned int i;
 11011              		.loc 1 1061 25 is_stmt 0 view .LVU3133
 11012 002e 4FF00108 		mov	r8, #1
 11013              	.LVL849:
 11014              	.L637:
1068:src/int.c     **** 			if (overflow_next)
 11015              		.loc 1 1068 3 is_stmt 1 discriminator 3 view .LVU3134
1069:src/int.c     **** 				overflow = 1;
 11016              		.loc 1 1069 4 discriminator 3 view .LVU3135
1071:src/int.c     **** 		}
 11017              		.loc 1 1071 4 discriminator 3 view .LVU3136
1067:src/int.c     **** 		if (vx & 1) {
 11018              		.loc 1 1067 17 is_stmt 0 discriminator 3 view .LVU3137
 11019 0032 54EA0501 		orrs	r1, r4, r5
1068:src/int.c     **** 			if (overflow_next)
ARM GAS  /tmp/ccjGZi8K.s 			page 272


 11020              		.loc 1 1068 10 discriminator 3 view .LVU3138
 11021 0036 04F0010A 		and	r10, r4, #1
1067:src/int.c     **** 		if (vx & 1) {
 11022              		.loc 1 1067 30 discriminator 3 view .LVU3139
 11023 003a 06F10106 		add	r6, r6, #1
 11024              	.LVL850:
1068:src/int.c     **** 			if (overflow_next)
 11025              		.loc 1 1068 10 discriminator 3 view .LVU3140
 11026 003e 4FF0000B 		mov	fp, #0
1067:src/int.c     **** 		if (vx & 1) {
 11027              		.loc 1 1067 17 discriminator 3 view .LVU3141
 11028 0042 24D0     		beq	.L640
1068:src/int.c     **** 			if (overflow_next)
 11029              		.loc 1 1068 6 view .LVU3142
 11030 0044 5AEA0B01 		orrs	r1, r10, fp
 11031 0048 10D0     		beq	.L638
1070:src/int.c     **** 			r = multiply_with_overflow(r, vy, &overflow);
 11032              		.loc 1 1070 5 is_stmt 1 view .LVU3143
1069:src/int.c     **** 				overflow = 1;
 11033              		.loc 1 1069 7 is_stmt 0 view .LVU3144
 11034 004a 0799     		ldr	r1, [sp, #28]
 11035 004c 09B1     		cbz	r1, .L639
1070:src/int.c     **** 			r = multiply_with_overflow(r, vy, &overflow);
 11036              		.loc 1 1070 14 view .LVU3145
 11037 004e 0121     		movs	r1, #1
 11038 0050 1291     		str	r1, [sp, #72]
 11039              	.L639:
1071:src/int.c     **** 		}
 11040              		.loc 1 1071 8 view .LVU3146
 11041 0052 12A9     		add	r1, sp, #72
 11042 0054 0091     		str	r1, [sp]
 11043 0056 4046     		mov	r0, r8
 11044 0058 3946     		mov	r1, r7
 11045 005a CDE90432 		strd	r3, r2, [sp, #16]
 11046 005e FFF7FEFF 		bl	multiply_with_overflow
 11047              	.LVL851:
1071:src/int.c     **** 		}
 11048              		.loc 1 1071 8 view .LVU3147
 11049 0062 DDE90432 		ldrd	r3, r2, [sp, #16]
 11050 0066 0391     		str	r1, [sp, #12]
 11051 0068 8046     		mov	r8, r0
 11052              	.LVL852:
1071:src/int.c     **** 		}
 11053              		.loc 1 1071 8 view .LVU3148
 11054 006a 0F46     		mov	r7, r1
 11055              	.LVL853:
 11056              	.L638:
1073:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 11057              		.loc 1 1073 3 is_stmt 1 discriminator 2 view .LVU3149
1073:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 11058              		.loc 1 1073 6 is_stmt 0 discriminator 2 view .LVU3150
 11059 006c 6108     		lsrs	r1, r4, #1
 11060 006e 41EAC571 		orr	r1, r1, r5, lsl #31
1074:src/int.c     **** 	}
 11061              		.loc 1 1074 8 discriminator 2 view .LVU3151
 11062 0072 07A8     		add	r0, sp, #28
 11063 0074 0090     		str	r0, [sp]
ARM GAS  /tmp/ccjGZi8K.s 			page 273


1073:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 11064              		.loc 1 1073 6 discriminator 2 view .LVU3152
 11065 0076 4FEA550C 		lsr	ip, r5, #1
1074:src/int.c     **** 	}
 11066              		.loc 1 1074 8 discriminator 2 view .LVU3153
 11067 007a 1046     		mov	r0, r2
1073:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 11068              		.loc 1 1073 6 discriminator 2 view .LVU3154
 11069 007c 0C46     		mov	r4, r1
 11070              	.LVL854:
1074:src/int.c     **** 	}
 11071              		.loc 1 1074 8 discriminator 2 view .LVU3155
 11072 007e 1946     		mov	r1, r3
1073:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 11073              		.loc 1 1073 6 discriminator 2 view .LVU3156
 11074 0080 6546     		mov	r5, ip
 11075              	.LVL855:
1074:src/int.c     **** 	}
 11076              		.loc 1 1074 3 is_stmt 1 discriminator 2 view .LVU3157
1074:src/int.c     **** 	}
 11077              		.loc 1 1074 8 is_stmt 0 discriminator 2 view .LVU3158
 11078 0082 FFF7FEFF 		bl	multiply_with_overflow
 11079              	.LVL856:
1067:src/int.c     **** 		if (vx & 1) {
 11080              		.loc 1 1067 2 discriminator 2 view .LVU3159
 11081 0086 4E45     		cmp	r6, r9
1074:src/int.c     **** 	}
 11082              		.loc 1 1074 8 discriminator 2 view .LVU3160
 11083 0088 0246     		mov	r2, r0
 11084 008a 0B46     		mov	r3, r1
 11085              	.LVL857:
1067:src/int.c     **** 		if (vx & 1) {
 11086              		.loc 1 1067 29 is_stmt 1 discriminator 2 view .LVU3161
1067:src/int.c     **** 		if (vx & 1) {
 11087              		.loc 1 1067 12 discriminator 2 view .LVU3162
1067:src/int.c     **** 		if (vx & 1) {
 11088              		.loc 1 1067 2 is_stmt 0 discriminator 2 view .LVU3163
 11089 008c D1D1     		bne	.L637
 11090              	.LVL858:
 11091              	.L640:
1076:src/int.c     **** 	return r;
 11092              		.loc 1 1076 2 is_stmt 1 view .LVU3164
 11093              	.LBB1714:
 11094              	.LBI1714:
  67:src/int.c     **** #ifndef TINY_BUILD
 11095              		.loc 1 67 6 view .LVU3165
 11096              	.LBB1715:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11097              		.loc 1 69 2 view .LVU3166
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11098              		.loc 1 69 5 is_stmt 0 view .LVU3167
 11099 008e 129B     		ldr	r3, [sp, #72]
 11100 0090 33B1     		cbz	r3, .L642
 11101 0092 FFF7FEFF 		bl	set_overflow.part.0
 11102              	.LVL859:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11103              		.loc 1 69 5 view .LVU3168
ARM GAS  /tmp/ccjGZi8K.s 			page 274


 11104              	.LBE1715:
 11105              	.LBE1714:
1077:src/int.c     **** }
 11106              		.loc 1 1077 2 is_stmt 1 view .LVU3169
1078:src/int.c     **** 
 11107              		.loc 1 1078 1 is_stmt 0 view .LVU3170
 11108 0096 4046     		mov	r0, r8
 11109 0098 3946     		mov	r1, r7
 11110 009a 09B0     		add	sp, sp, #36
 11111              		.cfi_remember_state
 11112              		.cfi_def_cfa_offset 36
 11113              		@ sp needed
 11114 009c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 11115              	.LVL860:
 11116              	.L642:
 11117              		.cfi_restore_state
 11118              	.LBB1717:
 11119              	.LBB1716:
  72:src/int.c     **** #endif
 11120              		.loc 1 72 3 is_stmt 1 view .LVU3171
 11121 00a0 5221     		movs	r1, #82
 11122 00a2 6920     		movs	r0, #105
 11123 00a4 FFF7FEFF 		bl	cmdflag
 11124              	.LVL861:
  72:src/int.c     **** #endif
 11125              		.loc 1 72 3 is_stmt 0 view .LVU3172
 11126              	.LBE1716:
 11127              	.LBE1717:
1077:src/int.c     **** }
 11128              		.loc 1 1077 2 is_stmt 1 view .LVU3173
1078:src/int.c     **** 
 11129              		.loc 1 1078 1 is_stmt 0 view .LVU3174
 11130 00a8 4046     		mov	r0, r8
 11131 00aa 3946     		mov	r1, r7
 11132 00ac 09B0     		add	sp, sp, #36
 11133              		.cfi_def_cfa_offset 36
 11134              		@ sp needed
 11135 00ae BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 11136              	.LVL862:
 11137              	.L652:
1078:src/int.c     **** 
 11138              		.loc 1 1078 1 view .LVU3175
 11139 00b2 00BF     		.align	2
 11140              	.L651:
 11141 00b4 00000000 		.word	main_ram
 11142              		.cfi_endproc
 11143              	.LFE56:
 11145              		.section	.text.intPower,"ax",%progbits
 11146              		.align	1
 11147              		.p2align 2,,3
 11148              		.global	intPower
 11149              		.syntax unified
 11150              		.thumb
 11151              		.thumb_func
 11152              		.fpu fpv4-sp-d16
 11154              	intPower:
 11155              	.LVL863:
ARM GAS  /tmp/ccjGZi8K.s 			page 275


 11156              	.LFB57:
1082:src/int.c     **** #ifndef TINY_BUILD
 11157              		.loc 1 1082 58 is_stmt 1 view -0
 11158              		.cfi_startproc
 11159              		@ args = 0, pretend = 0, frame = 8
 11160              		@ frame_needed = 0, uses_anonymous_args = 0
1084:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 11161              		.loc 1 1084 2 view .LVU3177
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11162              		.loc 1 1085 2 view .LVU3178
1082:src/int.c     **** #ifndef TINY_BUILD
 11163              		.loc 1 1082 58 is_stmt 0 view .LVU3179
 11164 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11165              		.cfi_def_cfa_offset 24
 11166              		.cfi_offset 4, -24
 11167              		.cfi_offset 5, -20
 11168              		.cfi_offset 6, -16
 11169              		.cfi_offset 7, -12
 11170              		.cfi_offset 8, -8
 11171              		.cfi_offset 14, -4
 11172 0004 84B0     		sub	sp, sp, #16
 11173              		.cfi_def_cfa_offset 40
1082:src/int.c     **** #ifndef TINY_BUILD
 11174              		.loc 1 1082 58 view .LVU3180
 11175 0006 0546     		mov	r5, r0
 11176 0008 0C46     		mov	r4, r1
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11177              		.loc 1 1085 30 view .LVU3181
 11178 000a 1046     		mov	r0, r2
 11179              	.LVL864:
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11180              		.loc 1 1085 30 view .LVU3182
 11181 000c 1946     		mov	r1, r3
 11182 000e 02AA     		add	r2, sp, #8
 11183              	.LVL865:
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11184              		.loc 1 1085 30 view .LVU3183
 11185 0010 FFF7FEFF 		bl	extract_value
 11186              	.LVL866:
 11187 0014 0246     		mov	r2, r0
 11188 0016 0B46     		mov	r3, r1
1086:src/int.c     **** 
 11189              		.loc 1 1086 30 view .LVU3184
 11190 0018 2846     		mov	r0, r5
 11191 001a 2146     		mov	r1, r4
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11192              		.loc 1 1085 30 view .LVU3185
 11193 001c 1646     		mov	r6, r2
1086:src/int.c     **** 
 11194              		.loc 1 1086 30 view .LVU3186
 11195 001e 03AA     		add	r2, sp, #12
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11196              		.loc 1 1085 30 view .LVU3187
 11197 0020 1F46     		mov	r7, r3
 11198              	.LVL867:
1086:src/int.c     **** 
 11199              		.loc 1 1086 2 is_stmt 1 view .LVU3188
ARM GAS  /tmp/ccjGZi8K.s 			page 276


1086:src/int.c     **** 
 11200              		.loc 1 1086 30 is_stmt 0 view .LVU3189
 11201 0022 FFF7FEFF 		bl	extract_value
 11202              	.LVL868:
1088:src/int.c     **** 		report_err(ERR_DOMAIN);
 11203              		.loc 1 1088 5 view .LVU3190
 11204 0026 56EA0703 		orrs	r3, r6, r7
1086:src/int.c     **** 
 11205              		.loc 1 1086 30 view .LVU3191
 11206 002a 0446     		mov	r4, r0
 11207 002c 0D46     		mov	r5, r1
 11208              	.LVL869:
1088:src/int.c     **** 		report_err(ERR_DOMAIN);
 11209              		.loc 1 1088 2 is_stmt 1 view .LVU3192
1088:src/int.c     **** 		report_err(ERR_DOMAIN);
 11210              		.loc 1 1088 5 is_stmt 0 view .LVU3193
 11211 002e 0FD1     		bne	.L654
1088:src/int.c     **** 		report_err(ERR_DOMAIN);
 11212              		.loc 1 1088 14 discriminator 1 view .LVU3194
 11213 0030 54EA0503 		orrs	r3, r4, r5
 11214 0034 35D0     		beq	.L666
1092:src/int.c     **** 	set_overflow(0);
 11215              		.loc 1 1092 2 is_stmt 1 view .LVU3195
 11216              	.LVL870:
 11217              	.LBB1718:
 11218              	.LBI1718:
  54:src/int.c     **** #ifndef TINY_BUILD
 11219              		.loc 1 54 6 view .LVU3196
 11220              	.LBB1719:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11221              		.loc 1 56 2 view .LVU3197
  59:src/int.c     **** #endif
 11222              		.loc 1 59 3 view .LVU3198
 11223 0036 5221     		movs	r1, #82
 11224 0038 6A20     		movs	r0, #106
 11225 003a FFF7FEFF 		bl	cmdflag
 11226              	.LVL871:
  59:src/int.c     **** #endif
 11227              		.loc 1 59 3 is_stmt 0 view .LVU3199
 11228              	.LBE1719:
 11229              	.LBE1718:
1093:src/int.c     **** 
 11230              		.loc 1 1093 2 is_stmt 1 view .LVU3200
 11231              	.LBB1721:
 11232              	.LBI1721:
  67:src/int.c     **** #ifndef TINY_BUILD
 11233              		.loc 1 67 6 view .LVU3201
 11234              	.LBB1722:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11235              		.loc 1 69 2 view .LVU3202
  72:src/int.c     **** #endif
 11236              		.loc 1 72 3 view .LVU3203
 11237 003e 5221     		movs	r1, #82
 11238 0040 6920     		movs	r0, #105
 11239 0042 FFF7FEFF 		bl	cmdflag
 11240              	.LVL872:
  72:src/int.c     **** #endif
ARM GAS  /tmp/ccjGZi8K.s 			page 277


 11241              		.loc 1 72 3 is_stmt 0 view .LVU3204
 11242              	.LBE1722:
 11243              	.LBE1721:
1095:src/int.c     **** 		if (vy == 0) {
 11244              		.loc 1 1095 2 is_stmt 1 view .LVU3205
1100:src/int.c     **** 	} else if (vy == 0)
 11245              		.loc 1 1100 10 is_stmt 0 view .LVU3206
 11246 0046 0120     		movs	r0, #1
 11247 0048 0021     		movs	r1, #0
 11248              	.L653:
1115:src/int.c     **** 
 11249              		.loc 1 1115 1 view .LVU3207
 11250 004a 04B0     		add	sp, sp, #16
 11251              		.cfi_remember_state
 11252              		.cfi_def_cfa_offset 24
 11253              		@ sp needed
 11254 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11255              	.LVL873:
 11256              	.L654:
 11257              		.cfi_restore_state
1092:src/int.c     **** 	set_overflow(0);
 11258              		.loc 1 1092 2 is_stmt 1 view .LVU3208
 11259              	.LBB1724:
  54:src/int.c     **** #ifndef TINY_BUILD
 11260              		.loc 1 54 6 view .LVU3209
 11261              	.LBB1720:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11262              		.loc 1 56 2 view .LVU3210
  59:src/int.c     **** #endif
 11263              		.loc 1 59 3 view .LVU3211
 11264 0050 5221     		movs	r1, #82
 11265 0052 6A20     		movs	r0, #106
 11266 0054 FFF7FEFF 		bl	cmdflag
 11267              	.LVL874:
  59:src/int.c     **** #endif
 11268              		.loc 1 59 3 is_stmt 0 view .LVU3212
 11269              	.LBE1720:
 11270              	.LBE1724:
1093:src/int.c     **** 
 11271              		.loc 1 1093 2 is_stmt 1 view .LVU3213
 11272              	.LBB1725:
  67:src/int.c     **** #ifndef TINY_BUILD
 11273              		.loc 1 67 6 view .LVU3214
 11274              	.LBB1723:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11275              		.loc 1 69 2 view .LVU3215
  72:src/int.c     **** #endif
 11276              		.loc 1 72 3 view .LVU3216
 11277 0058 5221     		movs	r1, #82
 11278 005a 6920     		movs	r0, #105
 11279 005c FFF7FEFF 		bl	cmdflag
 11280              	.LVL875:
  72:src/int.c     **** #endif
 11281              		.loc 1 72 3 is_stmt 0 view .LVU3217
 11282              	.LBE1723:
 11283              	.LBE1725:
1095:src/int.c     **** 		if (vy == 0) {
ARM GAS  /tmp/ccjGZi8K.s 			page 278


 11284              		.loc 1 1095 2 is_stmt 1 view .LVU3218
1101:src/int.c     **** 		return 0;
 11285              		.loc 1 1101 9 view .LVU3219
1101:src/int.c     **** 		return 0;
 11286              		.loc 1 1101 12 is_stmt 0 view .LVU3220
 11287 0060 54EA0503 		orrs	r3, r4, r5
 11288 0064 18D0     		beq	.L667
1104:src/int.c     **** 		set_carry(1);
 11289              		.loc 1 1104 2 is_stmt 1 view .LVU3221
1104:src/int.c     **** 		set_carry(1);
 11290              		.loc 1 1104 5 is_stmt 0 view .LVU3222
 11291 0066 029B     		ldr	r3, [sp, #8]
 11292 0068 1BBB     		cbnz	r3, .L668
1109:src/int.c     **** 
 11293              		.loc 1 1109 2 is_stmt 1 view .LVU3223
1109:src/int.c     **** 
 11294              		.loc 1 1109 8 is_stmt 0 view .LVU3224
 11295 006a DDF80C80 		ldr	r8, [sp, #12]
1109:src/int.c     **** 
 11296              		.loc 1 1109 25 view .LVU3225
 11297 006e B8F1000F 		cmp	r8, #0
 11298 0072 01D0     		beq	.L658
1109:src/int.c     **** 
 11299              		.loc 1 1109 18 discriminator 1 view .LVU3226
 11300 0074 06F00108 		and	r8, r6, #1
 11301              	.L658:
 11302              	.LVL876:
1111:src/int.c     **** #else
 11303              		.loc 1 1111 2 is_stmt 1 discriminator 6 view .LVU3227
1111:src/int.c     **** #else
 11304              		.loc 1 1111 21 is_stmt 0 discriminator 6 view .LVU3228
 11305 0078 4FF0000C 		mov	ip, #0
 11306 007c 3246     		mov	r2, r6
 11307 007e 3B46     		mov	r3, r7
 11308 0080 CDF800C0 		str	ip, [sp]
 11309 0084 2046     		mov	r0, r4
 11310 0086 2946     		mov	r1, r5
 11311 0088 FFF7FEFF 		bl	int_power_helper
 11312              	.LVL877:
1111:src/int.c     **** #else
 11313              		.loc 1 1111 9 discriminator 6 view .LVU3229
 11314 008c 4246     		mov	r2, r8
 11315 008e FFF7FEFF 		bl	build_value
 11316              	.LVL878:
1115:src/int.c     **** 
 11317              		.loc 1 1115 1 discriminator 6 view .LVU3230
 11318 0092 04B0     		add	sp, sp, #16
 11319              		.cfi_remember_state
 11320              		.cfi_def_cfa_offset 24
 11321              		@ sp needed
 11322 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11323              	.LVL879:
 11324              	.L667:
 11325              		.cfi_restore_state
1102:src/int.c     **** 
 11326              		.loc 1 1102 10 view .LVU3231
 11327 0098 2046     		mov	r0, r4
ARM GAS  /tmp/ccjGZi8K.s 			page 279


 11328 009a 2946     		mov	r1, r5
1115:src/int.c     **** 
 11329              		.loc 1 1115 1 view .LVU3232
 11330 009c 04B0     		add	sp, sp, #16
 11331              		.cfi_remember_state
 11332              		.cfi_def_cfa_offset 24
 11333              		@ sp needed
 11334 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11335              	.LVL880:
 11336              	.L666:
 11337              		.cfi_restore_state
1089:src/int.c     **** 		return 0;
 11338              		.loc 1 1089 3 is_stmt 1 view .LVU3233
 11339 00a2 0120     		movs	r0, #1
 11340 00a4 FFF7FEFF 		bl	report_err
 11341              	.LVL881:
1090:src/int.c     **** 	}
 11342              		.loc 1 1090 3 view .LVU3234
1090:src/int.c     **** 	}
 11343              		.loc 1 1090 10 is_stmt 0 view .LVU3235
 11344 00a8 2046     		mov	r0, r4
 11345 00aa 2946     		mov	r1, r5
1115:src/int.c     **** 
 11346              		.loc 1 1115 1 view .LVU3236
 11347 00ac 04B0     		add	sp, sp, #16
 11348              		.cfi_remember_state
 11349              		.cfi_def_cfa_offset 24
 11350              		@ sp needed
 11351 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11352              	.LVL882:
 11353              	.L668:
 11354              		.cfi_restore_state
1105:src/int.c     **** 		return 0;
 11355              		.loc 1 1105 3 is_stmt 1 view .LVU3237
 11356              	.LBB1726:
 11357              	.LBI1726:
  54:src/int.c     **** #ifndef TINY_BUILD
 11358              		.loc 1 54 6 view .LVU3238
 11359              	.LBB1727:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11360              		.loc 1 56 2 view .LVU3239
 11361 00b2 FFF7FEFF 		bl	set_carry.part.0
 11362              	.LVL883:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11363              		.loc 1 56 2 is_stmt 0 view .LVU3240
 11364              	.LBE1727:
 11365              	.LBE1726:
1106:src/int.c     **** 	}
 11366              		.loc 1 1106 3 is_stmt 1 view .LVU3241
1106:src/int.c     **** 	}
 11367              		.loc 1 1106 10 is_stmt 0 view .LVU3242
 11368 00b6 0020     		movs	r0, #0
 11369 00b8 0146     		mov	r1, r0
 11370 00ba C6E7     		b	.L653
 11371              		.cfi_endproc
 11372              	.LFE57:
 11374              		.section	.text.intLog2,"ax",%progbits
ARM GAS  /tmp/ccjGZi8K.s 			page 280


 11375              		.align	1
 11376              		.p2align 2,,3
 11377              		.global	intLog2
 11378              		.syntax unified
 11379              		.thumb
 11380              		.thumb_func
 11381              		.fpu fpv4-sp-d16
 11383              	intLog2:
 11384              	.LVL884:
 11385              	.LFB58:
1120:src/int.c     **** #ifndef TINY_BUILD
 11386              		.loc 1 1120 40 is_stmt 1 view -0
 11387              		.cfi_startproc
 11388              		@ args = 0, pretend = 0, frame = 8
 11389              		@ frame_needed = 0, uses_anonymous_args = 0
1122:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 11390              		.loc 1 1122 2 view .LVU3244
1123:src/int.c     **** 	unsigned int r = 0;
 11391              		.loc 1 1123 2 view .LVU3245
1120:src/int.c     **** #ifndef TINY_BUILD
 11392              		.loc 1 1120 40 is_stmt 0 view .LVU3246
 11393 0000 30B5     		push	{r4, r5, lr}
 11394              		.cfi_def_cfa_offset 12
 11395              		.cfi_offset 4, -12
 11396              		.cfi_offset 5, -8
 11397              		.cfi_offset 14, -4
 11398 0002 83B0     		sub	sp, sp, #12
 11399              		.cfi_def_cfa_offset 24
1123:src/int.c     **** 	unsigned int r = 0;
 11400              		.loc 1 1123 29 view .LVU3247
 11401 0004 01AA     		add	r2, sp, #4
 11402 0006 FFF7FEFF 		bl	extract_value
 11403              	.LVL885:
1123:src/int.c     **** 	unsigned int r = 0;
 11404              		.loc 1 1123 29 view .LVU3248
 11405 000a 0446     		mov	r4, r0
 11406 000c 0D46     		mov	r5, r1
 11407              	.LVL886:
1124:src/int.c     **** 
 11408              		.loc 1 1124 2 is_stmt 1 view .LVU3249
1126:src/int.c     **** 		report_err(ERR_DOMAIN);
 11409              		.loc 1 1126 2 view .LVU3250
1126:src/int.c     **** 		report_err(ERR_DOMAIN);
 11410              		.loc 1 1126 5 is_stmt 0 view .LVU3251
 11411 000e 54EA0503 		orrs	r3, r4, r5
 11412 0012 2CD0     		beq	.L670
1126:src/int.c     **** 		report_err(ERR_DOMAIN);
 11413              		.loc 1 1126 13 discriminator 1 view .LVU3252
 11414 0014 019B     		ldr	r3, [sp, #4]
 11415 0016 53BB     		cbnz	r3, .L670
1130:src/int.c     **** 	if (v != 0)
 11416              		.loc 1 1130 2 is_stmt 1 view .LVU3253
 11417              	.LVL887:
 11418              	.LBB1728:
 11419              	.LBI1728:
  54:src/int.c     **** #ifndef TINY_BUILD
 11420              		.loc 1 54 6 view .LVU3254
ARM GAS  /tmp/ccjGZi8K.s 			page 281


 11421              	.LBB1729:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11422              		.loc 1 56 2 view .LVU3255
 11423              	.LBE1729:
 11424              	.LBE1728:
1130:src/int.c     **** 	if (v != 0)
 11425              		.loc 1 1130 19 is_stmt 0 view .LVU3256
 11426 0018 10F1FF31 		adds	r1, r0, #-1
1130:src/int.c     **** 	if (v != 0)
 11427              		.loc 1 1130 15 view .LVU3257
 11428 001c 01EA0402 		and	r2, r1, r4
1130:src/int.c     **** 	if (v != 0)
 11429              		.loc 1 1130 19 view .LVU3258
 11430 0020 45F1FF31 		adc	r1, r5, #-1
1130:src/int.c     **** 	if (v != 0)
 11431              		.loc 1 1130 15 view .LVU3259
 11432 0024 01EA0503 		and	r3, r1, r5
 11433              	.LBB1732:
 11434              	.LBB1730:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11435              		.loc 1 56 5 view .LVU3260
 11436 0028 1343     		orrs	r3, r2, r3
 11437 002a 1DD1     		bne	.L685
  59:src/int.c     **** #endif
 11438              		.loc 1 59 3 is_stmt 1 view .LVU3261
 11439 002c 5221     		movs	r1, #82
 11440 002e 6A20     		movs	r0, #106
 11441 0030 FFF7FEFF 		bl	cmdflag
 11442              	.LVL888:
 11443              	.L674:
  59:src/int.c     **** #endif
 11444              		.loc 1 59 3 is_stmt 0 view .LVU3262
 11445              	.LBE1730:
 11446              	.LBE1732:
1131:src/int.c     **** 		while (v >>= 1)
 11447              		.loc 1 1131 2 is_stmt 1 view .LVU3263
1132:src/int.c     **** 			r++;
 11448              		.loc 1 1132 9 view .LVU3264
1132:src/int.c     **** 			r++;
 11449              		.loc 1 1132 12 is_stmt 0 view .LVU3265
 11450 0034 6008     		lsrs	r0, r4, #1
 11451 0036 40EAC570 		orr	r0, r0, r5, lsl #31
 11452 003a 6908     		lsrs	r1, r5, #1
 11453              	.LVL889:
1132:src/int.c     **** 			r++;
 11454              		.loc 1 1132 9 view .LVU3266
 11455 003c 50EA0103 		orrs	r3, r0, r1
 11456 0040 0DD0     		beq	.L675
1124:src/int.c     **** 
 11457              		.loc 1 1124 15 view .LVU3267
 11458 0042 0022     		movs	r2, #0
 11459              	.LVL890:
 11460              	.L676:
1133:src/int.c     **** 	return build_value(r, sx);
 11461              		.loc 1 1133 4 is_stmt 1 view .LVU3268
1132:src/int.c     **** 			r++;
 11462              		.loc 1 1132 12 is_stmt 0 view .LVU3269
ARM GAS  /tmp/ccjGZi8K.s 			page 282


 11463 0044 4308     		lsrs	r3, r0, #1
 11464 0046 43EAC173 		orr	r3, r3, r1, lsl #31
 11465 004a 4C08     		lsrs	r4, r1, #1
 11466 004c 1846     		mov	r0, r3
 11467              	.LVL891:
1132:src/int.c     **** 			r++;
 11468              		.loc 1 1132 12 view .LVU3270
 11469 004e 2146     		mov	r1, r4
1132:src/int.c     **** 			r++;
 11470              		.loc 1 1132 9 view .LVU3271
 11471 0050 50EA0103 		orrs	r3, r0, r1
1133:src/int.c     **** 	return build_value(r, sx);
 11472              		.loc 1 1133 5 view .LVU3272
 11473 0054 02F10102 		add	r2, r2, #1
 11474              	.LVL892:
1132:src/int.c     **** 			r++;
 11475              		.loc 1 1132 9 is_stmt 1 view .LVU3273
1132:src/int.c     **** 			r++;
 11476              		.loc 1 1132 9 is_stmt 0 view .LVU3274
 11477 0058 F4D1     		bne	.L676
 11478 005a 1046     		mov	r0, r2
 11479              	.LVL893:
1132:src/int.c     **** 			r++;
 11480              		.loc 1 1132 9 view .LVU3275
 11481 005c 0021     		movs	r1, #0
 11482              	.LVL894:
 11483              	.L675:
1134:src/int.c     **** #else
 11484              		.loc 1 1134 2 is_stmt 1 view .LVU3276
1134:src/int.c     **** #else
 11485              		.loc 1 1134 9 is_stmt 0 view .LVU3277
 11486 005e 019A     		ldr	r2, [sp, #4]
 11487 0060 FFF7FEFF 		bl	build_value
 11488              	.LVL895:
1138:src/int.c     **** 
 11489              		.loc 1 1138 1 view .LVU3278
 11490 0064 03B0     		add	sp, sp, #12
 11491              		.cfi_remember_state
 11492              		.cfi_def_cfa_offset 12
 11493              		@ sp needed
 11494 0066 30BD     		pop	{r4, r5, pc}
 11495              	.LVL896:
 11496              	.L685:
 11497              		.cfi_restore_state
 11498              	.LBB1733:
 11499              	.LBB1731:
1138:src/int.c     **** 
 11500              		.loc 1 1138 1 view .LVU3279
 11501 0068 FFF7FEFF 		bl	set_carry.part.0
 11502              	.LVL897:
 11503 006c E2E7     		b	.L674
 11504              	.LVL898:
 11505              	.L670:
1138:src/int.c     **** 
 11506              		.loc 1 1138 1 view .LVU3280
 11507              	.LBE1731:
 11508              	.LBE1733:
ARM GAS  /tmp/ccjGZi8K.s 			page 283


1127:src/int.c     **** 		return 0;
 11509              		.loc 1 1127 3 is_stmt 1 view .LVU3281
 11510 006e 0120     		movs	r0, #1
 11511 0070 FFF7FEFF 		bl	report_err
 11512              	.LVL899:
1128:src/int.c     **** 	}
 11513              		.loc 1 1128 3 view .LVU3282
1128:src/int.c     **** 	}
 11514              		.loc 1 1128 10 is_stmt 0 view .LVU3283
 11515 0074 0020     		movs	r0, #0
 11516 0076 0146     		mov	r1, r0
1138:src/int.c     **** 
 11517              		.loc 1 1138 1 view .LVU3284
 11518 0078 03B0     		add	sp, sp, #12
 11519              		.cfi_def_cfa_offset 12
 11520              		@ sp needed
 11521 007a 30BD     		pop	{r4, r5, pc}
1138:src/int.c     **** 
 11522              		.loc 1 1138 1 view .LVU3285
 11523              		.cfi_endproc
 11524              	.LFE58:
 11526              		.section	.text.int2pow,"ax",%progbits
 11527              		.align	1
 11528              		.p2align 2,,3
 11529              		.global	int2pow
 11530              		.syntax unified
 11531              		.thumb
 11532              		.thumb_func
 11533              		.fpu fpv4-sp-d16
 11535              	int2pow:
 11536              	.LVL900:
 11537              	.LFB59:
1143:src/int.c     **** #ifndef TINY_BUILD
 11538              		.loc 1 1143 40 is_stmt 1 view -0
 11539              		.cfi_startproc
 11540              		@ args = 0, pretend = 0, frame = 8
 11541              		@ frame_needed = 0, uses_anonymous_args = 0
1145:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 11542              		.loc 1 1145 2 view .LVU3287
1146:src/int.c     **** 	unsigned int ws;
 11543              		.loc 1 1146 2 view .LVU3288
1143:src/int.c     **** #ifndef TINY_BUILD
 11544              		.loc 1 1143 40 is_stmt 0 view .LVU3289
 11545 0000 30B5     		push	{r4, r5, lr}
 11546              		.cfi_def_cfa_offset 12
 11547              		.cfi_offset 4, -12
 11548              		.cfi_offset 5, -8
 11549              		.cfi_offset 14, -4
 11550 0002 83B0     		sub	sp, sp, #12
 11551              		.cfi_def_cfa_offset 24
1146:src/int.c     **** 	unsigned int ws;
 11552              		.loc 1 1146 29 view .LVU3290
 11553 0004 01AA     		add	r2, sp, #4
 11554 0006 FFF7FEFF 		bl	extract_value
 11555              	.LVL901:
1146:src/int.c     **** 	unsigned int ws;
 11556              		.loc 1 1146 29 view .LVU3291
ARM GAS  /tmp/ccjGZi8K.s 			page 284


 11557 000a 0B46     		mov	r3, r1
 11558 000c 0446     		mov	r4, r0
 11559              	.LBB1734:
 11560              	.LBB1735:
  72:src/int.c     **** #endif
 11561              		.loc 1 72 3 view .LVU3292
 11562 000e 5221     		movs	r1, #82
 11563 0010 6920     		movs	r0, #105
 11564              	.LBE1735:
 11565              	.LBE1734:
1146:src/int.c     **** 	unsigned int ws;
 11566              		.loc 1 1146 29 view .LVU3293
 11567 0012 1D46     		mov	r5, r3
 11568              	.LVL902:
1147:src/int.c     **** 
 11569              		.loc 1 1147 2 is_stmt 1 view .LVU3294
1149:src/int.c     **** 	set_carry(sx && v == 1);
 11570              		.loc 1 1149 2 view .LVU3295
 11571              	.LBB1737:
 11572              	.LBI1734:
  67:src/int.c     **** #ifndef TINY_BUILD
 11573              		.loc 1 67 6 view .LVU3296
 11574              	.LBB1736:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11575              		.loc 1 69 2 view .LVU3297
  72:src/int.c     **** #endif
 11576              		.loc 1 72 3 view .LVU3298
 11577 0014 FFF7FEFF 		bl	cmdflag
 11578              	.LVL903:
  72:src/int.c     **** #endif
 11579              		.loc 1 72 3 is_stmt 0 view .LVU3299
 11580              	.LBE1736:
 11581              	.LBE1737:
1150:src/int.c     **** 	if (sx && v != 0)
 11582              		.loc 1 1150 2 is_stmt 1 view .LVU3300
 11583 0018 019B     		ldr	r3, [sp, #4]
 11584 001a 1BB1     		cbz	r3, .L687
1150:src/int.c     **** 	if (sx && v != 0)
 11585              		.loc 1 1150 2 is_stmt 0 discriminator 1 view .LVU3301
 11586 001c 002D     		cmp	r5, #0
 11587 001e 08BF     		it	eq
 11588 0020 012C     		cmpeq	r4, #1
 11589 0022 3FD0     		beq	.L709
 11590              	.L687:
 11591              	.LVL904:
 11592              	.LBB1738:
 11593              	.LBI1738:
  54:src/int.c     **** #ifndef TINY_BUILD
 11594              		.loc 1 54 6 is_stmt 1 view .LVU3302
 11595              	.LBB1739:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11596              		.loc 1 56 2 view .LVU3303
  59:src/int.c     **** #endif
 11597              		.loc 1 59 3 view .LVU3304
 11598 0024 5221     		movs	r1, #82
 11599 0026 6A20     		movs	r0, #106
 11600 0028 FFF7FEFF 		bl	cmdflag
ARM GAS  /tmp/ccjGZi8K.s 			page 285


 11601              	.LVL905:
  59:src/int.c     **** #endif
 11602              		.loc 1 59 3 is_stmt 0 view .LVU3305
 11603              	.LBE1739:
 11604              	.LBE1738:
1151:src/int.c     **** 		return 0;
 11605              		.loc 1 1151 2 is_stmt 1 view .LVU3306
1151:src/int.c     **** 		return 0;
 11606              		.loc 1 1151 5 is_stmt 0 view .LVU3307
 11607 002c 019B     		ldr	r3, [sp, #4]
 11608 002e 13BB     		cbnz	r3, .L710
 11609              	.L692:
1154:src/int.c     **** 	if (int_mode() != MODE_UNSIGNED)
 11610              		.loc 1 1154 2 is_stmt 1 view .LVU3308
 11611              	.LBB1741:
 11612              	.LBI1741:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 11613              		.loc 1 43 14 view .LVU3309
 11614              	.LBB1742:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11615              		.loc 1 44 2 view .LVU3310
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11616              		.loc 1 44 20 is_stmt 0 view .LVU3311
 11617 0030 1F4B     		ldr	r3, .L714
 11618 0032 1B68     		ldr	r3, [r3]
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11619              		.loc 1 44 26 view .LVU3312
 11620 0034 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 11621              	.LBE1742:
 11622              	.LBE1741:
 11623              	.LBB1745:
 11624              	.LBB1746:
  40:src/int.c     **** }
 11625              		.loc 1 40 39 view .LVU3313
 11626 0038 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11627              	.LBE1746:
 11628              	.LBE1745:
 11629              	.LBB1748:
 11630              	.LBB1743:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11631              		.loc 1 44 15 view .LVU3314
 11632 003c 02F03F02 		and	r2, r2, #63
 11633              	.LVL906:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 11634              		.loc 1 45 2 is_stmt 1 view .LVU3315
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 11635              		.loc 1 45 26 is_stmt 0 view .LVU3316
 11636 0040 511E     		subs	r1, r2, #1
  46:src/int.c     **** 	return il;
 11637              		.loc 1 46 10 view .LVU3317
 11638 0042 3F29     		cmp	r1, #63
 11639              	.LBE1743:
 11640              	.LBE1748:
1155:src/int.c     **** 		ws--;
 11641              		.loc 1 1155 5 view .LVU3318
 11642 0044 C3F38103 		ubfx	r3, r3, #2, #2
 11643              	.LBB1749:
ARM GAS  /tmp/ccjGZi8K.s 			page 286


 11644              	.LBB1744:
  46:src/int.c     **** 	return il;
 11645              		.loc 1 46 10 view .LVU3319
 11646 0048 28BF     		it	cs
 11647 004a 4022     		movcs	r2, #64
 11648              	.LVL907:
  46:src/int.c     **** 	return il;
 11649              		.loc 1 46 10 view .LVU3320
 11650              	.LBE1744:
 11651              	.LBE1749:
1155:src/int.c     **** 		ws--;
 11652              		.loc 1 1155 2 is_stmt 1 view .LVU3321
 11653              	.LBB1750:
 11654              	.LBI1745:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 11655              		.loc 1 39 23 view .LVU3322
 11656              	.LBB1747:
  40:src/int.c     **** }
 11657              		.loc 1 40 2 view .LVU3323
 11658              	.LBE1747:
 11659              	.LBE1750:
1155:src/int.c     **** 		ws--;
 11660              		.loc 1 1155 5 is_stmt 0 view .LVU3324
 11661 004c 022B     		cmp	r3, #2
 11662 004e 00D0     		beq	.L693
1156:src/int.c     **** 	if (v >= ws) {
 11663              		.loc 1 1156 3 is_stmt 1 view .LVU3325
1156:src/int.c     **** 	if (v >= ws) {
 11664              		.loc 1 1156 5 is_stmt 0 view .LVU3326
 11665 0050 013A     		subs	r2, r2, #1
 11666              	.LVL908:
 11667              	.L693:
1157:src/int.c     **** 		set_carry(v == ws);
 11668              		.loc 1 1157 2 is_stmt 1 view .LVU3327
1157:src/int.c     **** 		set_carry(v == ws);
 11669              		.loc 1 1157 8 is_stmt 0 view .LVU3328
 11670 0052 0023     		movs	r3, #0
1157:src/int.c     **** 		set_carry(v == ws);
 11671              		.loc 1 1157 5 view .LVU3329
 11672 0054 9D42     		cmp	r5, r3
 11673 0056 08BF     		it	eq
 11674 0058 9442     		cmpeq	r4, r2
 11675 005a 13D2     		bcs	.L711
1163:src/int.c     **** #else
 11676              		.loc 1 1163 2 is_stmt 1 view .LVU3330
1163:src/int.c     **** #else
 11677              		.loc 1 1163 13 is_stmt 0 view .LVU3331
 11678 005c 0120     		movs	r0, #1
 11679 005e A4F12001 		sub	r1, r4, #32
 11680 0062 C4F12003 		rsb	r3, r4, #32
 11681 0066 20FA03F3 		lsr	r3, r0, r3
 11682 006a 00FA01F1 		lsl	r1, r0, r1
 11683 006e 1943     		orrs	r1, r1, r3
 11684 0070 A040     		lsls	r0, r0, r4
1167:src/int.c     **** 
 11685              		.loc 1 1167 1 view .LVU3332
 11686 0072 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccjGZi8K.s 			page 287


 11687              		.cfi_remember_state
 11688              		.cfi_def_cfa_offset 12
 11689              		@ sp needed
 11690 0074 30BD     		pop	{r4, r5, pc}
 11691              	.LVL909:
 11692              	.L710:
 11693              		.cfi_restore_state
1151:src/int.c     **** 		return 0;
 11694              		.loc 1 1151 9 discriminator 1 view .LVU3333
 11695 0076 54EA0503 		orrs	r3, r4, r5
 11696 007a D9D0     		beq	.L692
 11697              	.L708:
1160:src/int.c     **** 	}
 11698              		.loc 1 1160 3 is_stmt 1 view .LVU3334
1160:src/int.c     **** 	}
 11699              		.loc 1 1160 10 is_stmt 0 view .LVU3335
 11700 007c 0020     		movs	r0, #0
 11701 007e 0146     		mov	r1, r0
 11702              	.L713:
1167:src/int.c     **** 
 11703              		.loc 1 1167 1 view .LVU3336
 11704 0080 03B0     		add	sp, sp, #12
 11705              		.cfi_remember_state
 11706              		.cfi_def_cfa_offset 12
 11707              		@ sp needed
 11708 0082 30BD     		pop	{r4, r5, pc}
 11709              	.LVL910:
 11710              	.L711:
 11711              		.cfi_restore_state
1158:src/int.c     **** 		set_overflow(1);
 11712              		.loc 1 1158 3 is_stmt 1 view .LVU3337
 11713              	.LBB1751:
 11714              	.LBI1751:
  54:src/int.c     **** #ifndef TINY_BUILD
 11715              		.loc 1 54 6 view .LVU3338
 11716              	.LBB1752:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11717              		.loc 1 56 2 view .LVU3339
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11718              		.loc 1 56 5 is_stmt 0 view .LVU3340
 11719 0084 AB42     		cmp	r3, r5
 11720 0086 08BF     		it	eq
 11721 0088 A242     		cmpeq	r2, r4
 11722 008a 08D0     		beq	.L712
  59:src/int.c     **** #endif
 11723              		.loc 1 59 3 is_stmt 1 view .LVU3341
 11724 008c 5221     		movs	r1, #82
 11725 008e 6A20     		movs	r0, #106
 11726 0090 FFF7FEFF 		bl	cmdflag
 11727              	.LVL911:
 11728              	.L696:
  59:src/int.c     **** #endif
 11729              		.loc 1 59 3 is_stmt 0 view .LVU3342
 11730              	.LBE1752:
 11731              	.LBE1751:
1159:src/int.c     **** 		return 0;
 11732              		.loc 1 1159 3 is_stmt 1 view .LVU3343
ARM GAS  /tmp/ccjGZi8K.s 			page 288


 11733              	.LBB1754:
 11734              	.LBI1754:
  67:src/int.c     **** #ifndef TINY_BUILD
 11735              		.loc 1 67 6 view .LVU3344
 11736              	.LBB1755:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11737              		.loc 1 69 2 view .LVU3345
 11738 0094 FFF7FEFF 		bl	set_overflow.part.0
 11739              	.LVL912:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11740              		.loc 1 69 2 is_stmt 0 view .LVU3346
 11741              	.LBE1755:
 11742              	.LBE1754:
1160:src/int.c     **** 	}
 11743              		.loc 1 1160 3 is_stmt 1 view .LVU3347
1160:src/int.c     **** 	}
 11744              		.loc 1 1160 10 is_stmt 0 view .LVU3348
 11745 0098 0020     		movs	r0, #0
 11746 009a 0146     		mov	r1, r0
 11747 009c F0E7     		b	.L713
 11748              	.LVL913:
 11749              	.L712:
 11750              	.LBB1756:
 11751              	.LBB1753:
1160:src/int.c     **** 	}
 11752              		.loc 1 1160 10 view .LVU3349
 11753 009e FFF7FEFF 		bl	set_carry.part.0
 11754              	.LVL914:
1160:src/int.c     **** 	}
 11755              		.loc 1 1160 10 view .LVU3350
 11756 00a2 F7E7     		b	.L696
 11757              	.L709:
 11758              	.LVL915:
1160:src/int.c     **** 	}
 11759              		.loc 1 1160 10 view .LVU3351
 11760              	.LBE1753:
 11761              	.LBE1756:
 11762              	.LBB1757:
  54:src/int.c     **** #ifndef TINY_BUILD
 11763              		.loc 1 54 6 is_stmt 1 view .LVU3352
 11764              	.LBB1740:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11765              		.loc 1 56 2 view .LVU3353
 11766 00a4 FFF7FEFF 		bl	set_carry.part.0
 11767              	.LVL916:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11768              		.loc 1 56 2 is_stmt 0 view .LVU3354
 11769              	.LBE1740:
 11770              	.LBE1757:
1151:src/int.c     **** 		return 0;
 11771              		.loc 1 1151 2 is_stmt 1 view .LVU3355
1151:src/int.c     **** 		return 0;
 11772              		.loc 1 1151 5 is_stmt 0 view .LVU3356
 11773 00a8 019B     		ldr	r3, [sp, #4]
 11774 00aa 002B     		cmp	r3, #0
 11775 00ac E6D1     		bne	.L708
 11776 00ae BFE7     		b	.L692
ARM GAS  /tmp/ccjGZi8K.s 			page 289


 11777              	.L715:
 11778              		.align	2
 11779              	.L714:
 11780 00b0 00000000 		.word	main_ram
 11781              		.cfi_endproc
 11782              	.LFE59:
 11784              		.section	.text.intLog10,"ax",%progbits
 11785              		.align	1
 11786              		.p2align 2,,3
 11787              		.global	intLog10
 11788              		.syntax unified
 11789              		.thumb
 11790              		.thumb_func
 11791              		.fpu fpv4-sp-d16
 11793              	intLog10:
 11794              	.LVL917:
 11795              	.LFB60:
1172:src/int.c     **** #ifndef TINY_BUILD
 11796              		.loc 1 1172 41 is_stmt 1 view -0
 11797              		.cfi_startproc
 11798              		@ args = 0, pretend = 0, frame = 8
 11799              		@ frame_needed = 0, uses_anonymous_args = 0
1174:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 11800              		.loc 1 1174 2 view .LVU3358
1175:src/int.c     **** 	int r = 0;
 11801              		.loc 1 1175 2 view .LVU3359
1172:src/int.c     **** #ifndef TINY_BUILD
 11802              		.loc 1 1172 41 is_stmt 0 view .LVU3360
 11803 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11804              		.cfi_def_cfa_offset 20
 11805              		.cfi_offset 4, -20
 11806              		.cfi_offset 5, -16
 11807              		.cfi_offset 6, -12
 11808              		.cfi_offset 7, -8
 11809              		.cfi_offset 14, -4
 11810 0002 83B0     		sub	sp, sp, #12
 11811              		.cfi_def_cfa_offset 32
1175:src/int.c     **** 	int r = 0;
 11812              		.loc 1 1175 29 view .LVU3361
 11813 0004 01AA     		add	r2, sp, #4
 11814 0006 FFF7FEFF 		bl	extract_value
 11815              	.LVL918:
1175:src/int.c     **** 	int r = 0;
 11816              		.loc 1 1175 29 view .LVU3362
 11817 000a 0446     		mov	r4, r0
 11818 000c 0D46     		mov	r5, r1
 11819              	.LVL919:
1176:src/int.c     **** 	int c = 0;
 11820              		.loc 1 1176 2 is_stmt 1 view .LVU3363
1177:src/int.c     **** 
 11821              		.loc 1 1177 2 view .LVU3364
1179:src/int.c     **** 		report_err(ERR_DOMAIN);
 11822              		.loc 1 1179 2 view .LVU3365
1179:src/int.c     **** 		report_err(ERR_DOMAIN);
 11823              		.loc 1 1179 5 is_stmt 0 view .LVU3366
 11824 000e 54EA0503 		orrs	r3, r4, r5
 11825 0012 36D0     		beq	.L717
ARM GAS  /tmp/ccjGZi8K.s 			page 290


1179:src/int.c     **** 		report_err(ERR_DOMAIN);
 11826              		.loc 1 1179 13 discriminator 1 view .LVU3367
 11827 0014 019E     		ldr	r6, [sp, #4]
 11828 0016 A6BB     		cbnz	r6, .L717
1183:src/int.c     **** 		r++;
 11829              		.loc 1 1183 8 is_stmt 1 view .LVU3368
 11830 0018 0029     		cmp	r1, #0
 11831 001a 08BF     		it	eq
 11832 001c 0A28     		cmpeq	r0, #10
1177:src/int.c     **** 
 11833              		.loc 1 1177 6 is_stmt 0 view .LVU3369
 11834 001e 28BF     		it	cs
 11835 0020 3746     		movcs	r7, r6
1183:src/int.c     **** 		r++;
 11836              		.loc 1 1183 8 view .LVU3370
 11837 0022 06D2     		bcs	.L718
 11838 0024 0246     		mov	r2, r0
 11839 0026 0B46     		mov	r3, r1
 11840 0028 0026     		movs	r6, #0
 11841 002a 0027     		movs	r7, #0
 11842 002c 1CE0     		b	.L719
 11843              	.LVL920:
 11844              	.L726:
1187:src/int.c     **** 	}
 11845              		.loc 1 1187 5 view .LVU3371
 11846 002e 1446     		mov	r4, r2
 11847 0030 1D46     		mov	r5, r3
 11848              	.LVL921:
 11849              	.L718:
1184:src/int.c     **** 		if (v % 10)
 11850              		.loc 1 1184 3 is_stmt 1 view .LVU3372
1184:src/int.c     **** 		if (v % 10)
 11851              		.loc 1 1184 4 is_stmt 0 view .LVU3373
 11852 0032 0A22     		movs	r2, #10
 11853 0034 0023     		movs	r3, #0
 11854 0036 2046     		mov	r0, r4
 11855 0038 2946     		mov	r1, r5
 11856 003a FFF7FEFF 		bl	__aeabi_uldivmod
 11857              	.LVL922:
1187:src/int.c     **** 	}
 11858              		.loc 1 1187 5 view .LVU3374
 11859 003e 2046     		mov	r0, r4
1186:src/int.c     **** 		v /= 10;
 11860              		.loc 1 1186 6 view .LVU3375
 11861 0040 1343     		orrs	r3, r2, r3
1187:src/int.c     **** 	}
 11862              		.loc 1 1187 5 view .LVU3376
 11863 0042 2946     		mov	r1, r5
 11864 0044 4FF00A02 		mov	r2, #10
 11865 0048 4FF00003 		mov	r3, #0
1186:src/int.c     **** 		v /= 10;
 11866              		.loc 1 1186 6 view .LVU3377
 11867 004c 18BF     		it	ne
 11868 004e 0127     		movne	r7, #1
 11869              	.LVL923:
1187:src/int.c     **** 	}
 11870              		.loc 1 1187 5 view .LVU3378
ARM GAS  /tmp/ccjGZi8K.s 			page 291


 11871 0050 FFF7FEFF 		bl	__aeabi_uldivmod
 11872              	.LVL924:
1183:src/int.c     **** 		r++;
 11873              		.loc 1 1183 8 view .LVU3379
 11874 0054 002D     		cmp	r5, #0
 11875 0056 08BF     		it	eq
 11876 0058 642C     		cmpeq	r4, #100
1187:src/int.c     **** 	}
 11877              		.loc 1 1187 5 view .LVU3380
 11878 005a 0246     		mov	r2, r0
1184:src/int.c     **** 		if (v % 10)
 11879              		.loc 1 1184 4 view .LVU3381
 11880 005c 06F10106 		add	r6, r6, #1
 11881              	.LVL925:
1185:src/int.c     **** 			c = 1;
 11882              		.loc 1 1185 3 is_stmt 1 view .LVU3382
1187:src/int.c     **** 	}
 11883              		.loc 1 1187 3 view .LVU3383
1187:src/int.c     **** 	}
 11884              		.loc 1 1187 5 is_stmt 0 view .LVU3384
 11885 0060 0B46     		mov	r3, r1
 11886              	.LVL926:
1183:src/int.c     **** 		r++;
 11887              		.loc 1 1183 8 is_stmt 1 view .LVU3385
 11888 0062 E4D2     		bcs	.L726
1189:src/int.c     **** 	return build_value(r, sx);
 11889              		.loc 1 1189 2 view .LVU3386
 11890 0064 A7B9     		cbnz	r7, .L722
 11891 0066 F717     		asrs	r7, r6, #31
 11892              	.LVL927:
 11893              	.L719:
1189:src/int.c     **** 	return build_value(r, sx);
 11894              		.loc 1 1189 2 is_stmt 0 discriminator 2 view .LVU3387
 11895 0068 002B     		cmp	r3, #0
 11896 006a 08BF     		it	eq
 11897 006c 012A     		cmpeq	r2, #1
 11898 006e 11D0     		beq	.L733
 11899              	.L723:
 11900              	.LBB1758:
 11901              	.LBB1759:
 11902 0070 FFF7FEFF 		bl	set_carry.part.0
 11903              	.LVL928:
 11904              	.L724:
 11905              	.LBE1759:
 11906              	.LBE1758:
1190:src/int.c     **** #else
 11907              		.loc 1 1190 2 is_stmt 1 view .LVU3388
1190:src/int.c     **** #else
 11908              		.loc 1 1190 9 is_stmt 0 view .LVU3389
 11909 0074 019A     		ldr	r2, [sp, #4]
 11910 0076 3046     		mov	r0, r6
 11911 0078 3946     		mov	r1, r7
 11912 007a FFF7FEFF 		bl	build_value
 11913              	.LVL929:
1194:src/int.c     **** 
 11914              		.loc 1 1194 1 view .LVU3390
 11915 007e 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccjGZi8K.s 			page 292


 11916              		.cfi_remember_state
 11917              		.cfi_def_cfa_offset 20
 11918              		@ sp needed
 11919 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 11920              	.LVL930:
 11921              	.L717:
 11922              		.cfi_restore_state
1180:src/int.c     **** 		return 0;
 11923              		.loc 1 1180 3 is_stmt 1 view .LVU3391
 11924 0082 0120     		movs	r0, #1
 11925 0084 FFF7FEFF 		bl	report_err
 11926              	.LVL931:
1181:src/int.c     **** 	}
 11927              		.loc 1 1181 3 view .LVU3392
1181:src/int.c     **** 	}
 11928              		.loc 1 1181 10 is_stmt 0 view .LVU3393
 11929 0088 0020     		movs	r0, #0
 11930 008a 0146     		mov	r1, r0
1194:src/int.c     **** 
 11931              		.loc 1 1194 1 view .LVU3394
 11932 008c 03B0     		add	sp, sp, #12
 11933              		.cfi_remember_state
 11934              		.cfi_def_cfa_offset 20
 11935              		@ sp needed
 11936 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 11937              	.LVL932:
 11938              	.L722:
 11939              		.cfi_restore_state
1194:src/int.c     **** 
 11940              		.loc 1 1194 1 view .LVU3395
 11941 0090 F717     		asrs	r7, r6, #31
 11942              	.LVL933:
1194:src/int.c     **** 
 11943              		.loc 1 1194 1 view .LVU3396
 11944 0092 EDE7     		b	.L723
 11945              	.LVL934:
 11946              	.L733:
 11947              	.LBB1761:
 11948              	.LBI1758:
  54:src/int.c     **** #ifndef TINY_BUILD
 11949              		.loc 1 54 6 is_stmt 1 view .LVU3397
 11950              	.LBB1760:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11951              		.loc 1 56 2 view .LVU3398
  59:src/int.c     **** #endif
 11952              		.loc 1 59 3 view .LVU3399
 11953 0094 5221     		movs	r1, #82
 11954 0096 6A20     		movs	r0, #106
 11955 0098 FFF7FEFF 		bl	cmdflag
 11956              	.LVL935:
 11957 009c EAE7     		b	.L724
 11958              	.LBE1760:
 11959              	.LBE1761:
 11960              		.cfi_endproc
 11961              	.LFE60:
 11963 009e 00BF     		.section	.text.int10pow,"ax",%progbits
 11964              		.align	1
ARM GAS  /tmp/ccjGZi8K.s 			page 293


 11965              		.p2align 2,,3
 11966              		.global	int10pow
 11967              		.syntax unified
 11968              		.thumb
 11969              		.thumb_func
 11970              		.fpu fpv4-sp-d16
 11972              	int10pow:
 11973              	.LVL936:
 11974              	.LFB61:
1199:src/int.c     **** 	int sx;
 11975              		.loc 1 1199 41 view -0
 11976              		.cfi_startproc
 11977              		@ args = 0, pretend = 0, frame = 8
 11978              		@ frame_needed = 0, uses_anonymous_args = 0
1200:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 11979              		.loc 1 1200 2 view .LVU3401
1201:src/int.c     **** 	const unsigned int ws = word_size();
 11980              		.loc 1 1201 2 view .LVU3402
1199:src/int.c     **** 	int sx;
 11981              		.loc 1 1199 41 is_stmt 0 view .LVU3403
 11982 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11983              		.cfi_def_cfa_offset 28
 11984              		.cfi_offset 4, -28
 11985              		.cfi_offset 5, -24
 11986              		.cfi_offset 6, -20
 11987              		.cfi_offset 7, -16
 11988              		.cfi_offset 8, -12
 11989              		.cfi_offset 9, -8
 11990              		.cfi_offset 14, -4
 11991              	.LBB1762:
 11992              	.LBB1763:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11993              		.loc 1 44 26 view .LVU3404
 11994 0004 DFF8C890 		ldr	r9, .L747
 11995              	.LBE1763:
 11996              	.LBE1762:
1199:src/int.c     **** 	int sx;
 11997              		.loc 1 1199 41 view .LVU3405
 11998 0008 85B0     		sub	sp, sp, #20
 11999              		.cfi_def_cfa_offset 48
1201:src/int.c     **** 	const unsigned int ws = word_size();
 12000              		.loc 1 1201 30 view .LVU3406
 12001 000a 03AA     		add	r2, sp, #12
1199:src/int.c     **** 	int sx;
 12002              		.loc 1 1199 41 view .LVU3407
 12003 000c 8046     		mov	r8, r0
 12004 000e 0D46     		mov	r5, r1
1201:src/int.c     **** 	const unsigned int ws = word_size();
 12005              		.loc 1 1201 30 view .LVU3408
 12006 0010 FFF7FEFF 		bl	extract_value
 12007              	.LVL937:
 12008              	.LBB1767:
 12009              	.LBB1764:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12010              		.loc 1 44 26 view .LVU3409
 12011 0014 D9F80030 		ldr	r3, [r9]
 12012 0018 93F8E947 		ldrb	r4, [r3, #2025]	@ zero_extendqisi2
ARM GAS  /tmp/ccjGZi8K.s 			page 294


  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12013              		.loc 1 44 15 view .LVU3410
 12014 001c 04F03F04 		and	r4, r4, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12015              		.loc 1 45 26 view .LVU3411
 12016 0020 631E     		subs	r3, r4, #1
  46:src/int.c     **** 	return il;
 12017              		.loc 1 46 10 view .LVU3412
 12018 0022 3F2B     		cmp	r3, #63
 12019              	.LBE1764:
 12020              	.LBE1767:
1201:src/int.c     **** 	const unsigned int ws = word_size();
 12021              		.loc 1 1201 30 view .LVU3413
 12022 0024 0646     		mov	r6, r0
 12023 0026 0F46     		mov	r7, r1
 12024              	.LVL938:
1202:src/int.c     **** 	int overflow = 0;
 12025              		.loc 1 1202 2 is_stmt 1 view .LVU3414
 12026              	.LBB1768:
 12027              	.LBI1762:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 12028              		.loc 1 43 14 view .LVU3415
 12029              	.LBB1765:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12030              		.loc 1 44 2 view .LVU3416
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12031              		.loc 1 45 2 view .LVU3417
 12032              	.LBE1765:
 12033              	.LBE1768:
 12034              	.LBB1769:
 12035              	.LBB1770:
  59:src/int.c     **** #endif
 12036              		.loc 1 59 3 is_stmt 0 view .LVU3418
 12037 0028 4FF06A00 		mov	r0, #106
 12038 002c 4FF05201 		mov	r1, #82
 12039              	.LBE1770:
 12040              	.LBE1769:
 12041              	.LBB1772:
 12042              	.LBB1766:
  46:src/int.c     **** 	return il;
 12043              		.loc 1 46 10 view .LVU3419
 12044 0030 28BF     		it	cs
 12045 0032 4024     		movcs	r4, #64
 12046              	.LVL939:
  46:src/int.c     **** 	return il;
 12047              		.loc 1 46 10 view .LVU3420
 12048              	.LBE1766:
 12049              	.LBE1772:
1203:src/int.c     **** 	
 12050              		.loc 1 1203 2 is_stmt 1 view .LVU3421
1205:src/int.c     **** 	if (vx == 0) {
 12051              		.loc 1 1205 2 view .LVU3422
 12052              	.LBB1773:
 12053              	.LBI1769:
  54:src/int.c     **** #ifndef TINY_BUILD
 12054              		.loc 1 54 6 view .LVU3423
 12055              	.LBB1771:
ARM GAS  /tmp/ccjGZi8K.s 			page 295


  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12056              		.loc 1 56 2 view .LVU3424
  59:src/int.c     **** #endif
 12057              		.loc 1 59 3 view .LVU3425
 12058 0034 FFF7FEFF 		bl	cmdflag
 12059              	.LVL940:
  59:src/int.c     **** #endif
 12060              		.loc 1 59 3 is_stmt 0 view .LVU3426
 12061              	.LBE1771:
 12062              	.LBE1773:
1206:src/int.c     **** 		set_overflow(0);
 12063              		.loc 1 1206 2 is_stmt 1 view .LVU3427
1206:src/int.c     **** 		set_overflow(0);
 12064              		.loc 1 1206 5 is_stmt 0 view .LVU3428
 12065 0038 56EA0703 		orrs	r3, r6, r7
 12066 003c 38D0     		beq	.L745
1210:src/int.c     **** 		set_carry(1);
 12067              		.loc 1 1210 2 is_stmt 1 view .LVU3429
1210:src/int.c     **** 		set_carry(1);
 12068              		.loc 1 1210 6 is_stmt 0 view .LVU3430
 12069 003e 039B     		ldr	r3, [sp, #12]
1210:src/int.c     **** 		set_carry(1);
 12070              		.loc 1 1210 5 view .LVU3431
 12071 0040 002B     		cmp	r3, #0
 12072 0042 3ED1     		bne	.L746
1215:src/int.c     **** 		overflow = 1;
 12073              		.loc 1 1215 2 is_stmt 1 view .LVU3432
1215:src/int.c     **** 		overflow = 1;
 12074              		.loc 1 1215 5 is_stmt 0 view .LVU3433
 12075 0044 032C     		cmp	r4, #3
 12076 0046 31D9     		bls	.L740
 12077              	.LBB1774:
 12078              	.LBI1774:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 12079              		.loc 1 39 23 is_stmt 1 view .LVU3434
 12080              	.LBB1775:
  40:src/int.c     **** }
 12081              		.loc 1 40 2 view .LVU3435
  40:src/int.c     **** }
 12082              		.loc 1 40 39 is_stmt 0 view .LVU3436
 12083 0048 D9F80020 		ldr	r2, [r9]
 12084 004c 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 12085              	.LBE1775:
 12086              	.LBE1774:
1215:src/int.c     **** 		overflow = 1;
 12087              		.loc 1 1215 14 view .LVU3437
 12088 0050 C2F38102 		ubfx	r2, r2, #2, #2
 12089 0054 022A     		cmp	r2, #2
 12090 0056 04D0     		beq	.L739
1215:src/int.c     **** 		overflow = 1;
 12091              		.loc 1 1215 46 discriminator 2 view .LVU3438
 12092 0058 A4F10403 		sub	r3, r4, #4
 12093 005c B3FA83F3 		clz	r3, r3
 12094 0060 5B09     		lsrs	r3, r3, #5
 12095              	.L739:
 12096              	.LVL941:
1217:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 296


 12097              		.loc 1 1217 2 is_stmt 1 view .LVU3439
1217:src/int.c     **** }
 12098              		.loc 1 1217 21 is_stmt 0 view .LVU3440
 12099 0062 0093     		str	r3, [sp]
 12100 0064 4246     		mov	r2, r8
 12101 0066 2B46     		mov	r3, r5
 12102              	.LVL942:
1217:src/int.c     **** }
 12103              		.loc 1 1217 21 view .LVU3441
 12104 0068 0A20     		movs	r0, #10
 12105 006a 0021     		movs	r1, #0
 12106 006c FFF7FEFF 		bl	int_power_helper
 12107              	.LVL943:
 12108              	.LBB1776:
 12109              	.LBB1777:
 12110              	.LBB1778:
 12111              	.LBB1779:
 12112              	.LBB1780:
 12113              	.LBB1781:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12114              		.loc 1 44 26 view .LVU3442
 12115 0070 D9F80030 		ldr	r3, [r9]
 12116 0074 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12117              		.loc 1 44 15 view .LVU3443
 12118 0078 03F03F02 		and	r2, r3, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12119              		.loc 1 45 26 view .LVU3444
 12120 007c 531E     		subs	r3, r2, #1
 12121              	.LVL944:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12122              		.loc 1 45 26 view .LVU3445
 12123              	.LBE1781:
 12124              	.LBE1780:
 12125              	.LBE1779:
 12126              	.LBE1778:
 12127              	.LBE1777:
 12128              	.LBI1776:
 147:src/int.c     **** #ifndef TINY_BUILD
 12129              		.loc 1 147 15 is_stmt 1 view .LVU3446
 12130              	.LBB1788:
 149:src/int.c     **** 	long long int v = mask_value(x);
 12131              		.loc 1 149 2 view .LVU3447
 12132              	.LBB1785:
 12133              	.LBI1785:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 12134              		.loc 1 39 23 view .LVU3448
 12135              	.LBB1786:
  40:src/int.c     **** }
 12136              		.loc 1 40 2 view .LVU3449
  40:src/int.c     **** }
 12137              		.loc 1 40 2 is_stmt 0 view .LVU3450
 12138              	.LBE1786:
 12139              	.LBE1785:
 150:src/int.c     **** 
 12140              		.loc 1 150 2 is_stmt 1 view .LVU3451
 12141              	.LBB1787:
ARM GAS  /tmp/ccjGZi8K.s 			page 297


 12142              	.LBI1778:
  92:src/int.c     **** #ifndef TINY_BUILD
 12143              		.loc 1 92 15 view .LVU3452
 12144              	.LBB1784:
  94:src/int.c     **** 	long long int mask;
 12145              		.loc 1 94 2 view .LVU3453
 12146              	.LBB1783:
 12147              	.LBI1780:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 12148              		.loc 1 43 14 view .LVU3454
 12149              	.LBB1782:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12150              		.loc 1 44 2 view .LVU3455
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12151              		.loc 1 45 2 view .LVU3456
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12152              		.loc 1 45 5 is_stmt 0 view .LVU3457
 12153 007e 3E2B     		cmp	r3, #62
 12154 0080 11D8     		bhi	.L734
 12155              	.LVL945:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12156              		.loc 1 45 5 view .LVU3458
 12157              	.LBE1782:
 12158              	.LBE1783:
  95:src/int.c     **** 
 12159              		.loc 1 95 2 is_stmt 1 view .LVU3459
  97:src/int.c     **** 		return v;
 12160              		.loc 1 97 2 view .LVU3460
  99:src/int.c     **** 	return v & mask;
 12161              		.loc 1 99 2 view .LVU3461
 100:src/int.c     **** #else
 12162              		.loc 1 100 2 view .LVU3462
  99:src/int.c     **** 	return v & mask;
 12163              		.loc 1 99 14 is_stmt 0 view .LVU3463
 12164 0082 0123     		movs	r3, #1
 12165 0084 A2F12004 		sub	r4, r2, #32
 12166              	.LVL946:
  99:src/int.c     **** 	return v & mask;
 12167              		.loc 1 99 14 view .LVU3464
 12168 0088 C2F12005 		rsb	r5, r2, #32
 12169 008c 03FA04F4 		lsl	r4, r3, r4
 12170 0090 23FA05F5 		lsr	r5, r3, r5
 12171 0094 9340     		lsls	r3, r3, r2
  99:src/int.c     **** 	return v & mask;
 12172              		.loc 1 99 7 view .LVU3465
 12173 0096 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** 	return v & mask;
 12174              		.loc 1 99 14 view .LVU3466
 12175 009a 44EA0504 		orr	r4, r4, r5
  99:src/int.c     **** 	return v & mask;
 12176              		.loc 1 99 7 view .LVU3467
 12177 009e 44F1FF34 		adc	r4, r4, #-1
 100:src/int.c     **** #else
 12178              		.loc 1 100 11 view .LVU3468
 12179 00a2 2140     		ands	r1, r1, r4
 12180              	.LVL947:
 100:src/int.c     **** #else
ARM GAS  /tmp/ccjGZi8K.s 			page 298


 12181              		.loc 1 100 11 view .LVU3469
 12182 00a4 1840     		ands	r0, r0, r3
 12183              	.L734:
 12184              	.LBE1784:
 12185              	.LBE1787:
 12186              	.LBE1788:
 12187              	.LBE1776:
1218:src/int.c     **** 
 12188              		.loc 1 1218 1 view .LVU3470
 12189 00a6 05B0     		add	sp, sp, #20
 12190              		.cfi_remember_state
 12191              		.cfi_def_cfa_offset 28
 12192              		@ sp needed
 12193 00a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 12194              	.LVL948:
 12195              	.L740:
 12196              		.cfi_restore_state
1216:src/int.c     **** 	return build_value(int_power_helper(10, x, overflow), 0);
 12197              		.loc 1 1216 12 view .LVU3471
 12198 00ac 0123     		movs	r3, #1
 12199 00ae D8E7     		b	.L739
 12200              	.L745:
1207:src/int.c     **** 		return 1;
 12201              		.loc 1 1207 3 is_stmt 1 view .LVU3472
 12202              	.LVL949:
 12203              	.LBB1789:
 12204              	.LBI1789:
  67:src/int.c     **** #ifndef TINY_BUILD
 12205              		.loc 1 67 6 view .LVU3473
 12206              	.LBB1790:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12207              		.loc 1 69 2 view .LVU3474
  72:src/int.c     **** #endif
 12208              		.loc 1 72 3 view .LVU3475
 12209 00b0 5221     		movs	r1, #82
 12210 00b2 6920     		movs	r0, #105
 12211 00b4 FFF7FEFF 		bl	cmdflag
 12212              	.LVL950:
  72:src/int.c     **** #endif
 12213              		.loc 1 72 3 is_stmt 0 view .LVU3476
 12214              	.LBE1790:
 12215              	.LBE1789:
1208:src/int.c     **** 	}
 12216              		.loc 1 1208 3 is_stmt 1 view .LVU3477
1208:src/int.c     **** 	}
 12217              		.loc 1 1208 10 is_stmt 0 view .LVU3478
 12218 00b8 0120     		movs	r0, #1
 12219 00ba 0021     		movs	r1, #0
1218:src/int.c     **** 
 12220              		.loc 1 1218 1 view .LVU3479
 12221 00bc 05B0     		add	sp, sp, #20
 12222              		.cfi_remember_state
 12223              		.cfi_def_cfa_offset 28
 12224              		@ sp needed
 12225 00be BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 12226              	.LVL951:
 12227              	.L746:
ARM GAS  /tmp/ccjGZi8K.s 			page 299


 12228              		.cfi_restore_state
1211:src/int.c     **** 		return 0;
 12229              		.loc 1 1211 3 is_stmt 1 view .LVU3480
 12230              	.LBB1791:
 12231              	.LBI1791:
  54:src/int.c     **** #ifndef TINY_BUILD
 12232              		.loc 1 54 6 view .LVU3481
 12233              	.LBB1792:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12234              		.loc 1 56 2 view .LVU3482
 12235 00c2 FFF7FEFF 		bl	set_carry.part.0
 12236              	.LVL952:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12237              		.loc 1 56 2 is_stmt 0 view .LVU3483
 12238              	.LBE1792:
 12239              	.LBE1791:
1212:src/int.c     **** 	}
 12240              		.loc 1 1212 3 is_stmt 1 view .LVU3484
1212:src/int.c     **** 	}
 12241              		.loc 1 1212 10 is_stmt 0 view .LVU3485
 12242 00c6 0020     		movs	r0, #0
 12243 00c8 0146     		mov	r1, r0
1218:src/int.c     **** 
 12244              		.loc 1 1218 1 view .LVU3486
 12245 00ca 05B0     		add	sp, sp, #20
 12246              		.cfi_def_cfa_offset 28
 12247              		@ sp needed
 12248 00cc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 12249              	.LVL953:
 12250              	.L748:
1218:src/int.c     **** 
 12251              		.loc 1 1218 1 view .LVU3487
 12252              		.align	2
 12253              	.L747:
 12254 00d0 00000000 		.word	main_ram
 12255              		.cfi_endproc
 12256              	.LFE61:
 12258              		.section	.text.int_1pow,"ax",%progbits
 12259              		.align	1
 12260              		.p2align 2,,3
 12261              		.global	int_1pow
 12262              		.syntax unified
 12263              		.thumb
 12264              		.thumb_func
 12265              		.fpu fpv4-sp-d16
 12267              	int_1pow:
 12268              	.LVL954:
 12269              	.LFB62:
1223:src/int.c     **** #ifndef TINY_BUILD
 12270              		.loc 1 1223 41 is_stmt 1 view -0
 12271              		.cfi_startproc
 12272              		@ args = 0, pretend = 0, frame = 8
 12273              		@ frame_needed = 0, uses_anonymous_args = 0
1225:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 12274              		.loc 1 1225 2 view .LVU3489
1226:src/int.c     **** 	int odd = xv & 1;
 12275              		.loc 1 1226 2 view .LVU3490
ARM GAS  /tmp/ccjGZi8K.s 			page 300


1223:src/int.c     **** #ifndef TINY_BUILD
 12276              		.loc 1 1223 41 is_stmt 0 view .LVU3491
 12277 0000 10B5     		push	{r4, lr}
 12278              		.cfi_def_cfa_offset 8
 12279              		.cfi_offset 4, -8
 12280              		.cfi_offset 14, -4
 12281 0002 82B0     		sub	sp, sp, #8
 12282              		.cfi_def_cfa_offset 16
1226:src/int.c     **** 	int odd = xv & 1;
 12283              		.loc 1 1226 30 view .LVU3492
 12284 0004 01AA     		add	r2, sp, #4
 12285 0006 FFF7FEFF 		bl	extract_value
 12286              	.LVL955:
1227:src/int.c     **** 
 12287              		.loc 1 1227 2 is_stmt 1 view .LVU3493
 12288              	.LBB1793:
 12289              	.LBB1794:
  40:src/int.c     **** }
 12290              		.loc 1 40 39 is_stmt 0 view .LVU3494
 12291 000a 0C4B     		ldr	r3, .L757
 12292 000c 1B68     		ldr	r3, [r3]
 12293 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12294              	.LBE1794:
 12295              	.LBE1793:
1229:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12296              		.loc 1 1229 2 view .LVU3495
 12297 0012 C3F38103 		ubfx	r3, r3, #2, #2
 12298 0016 022B     		cmp	r3, #2
1227:src/int.c     **** 
 12299              		.loc 1 1227 6 view .LVU3496
 12300 0018 00F00104 		and	r4, r0, #1
 12301              	.LVL956:
1229:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12302              		.loc 1 1229 2 is_stmt 1 view .LVU3497
 12303              	.LBB1796:
 12304              	.LBI1793:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 12305              		.loc 1 39 23 view .LVU3498
 12306              	.LBB1795:
  40:src/int.c     **** }
 12307              		.loc 1 40 2 view .LVU3499
 12308              	.LBE1795:
 12309              	.LBE1796:
1229:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12310              		.loc 1 1229 2 is_stmt 0 view .LVU3500
 12311 001c 00D1     		bne	.L750
1229:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12312              		.loc 1 1229 2 discriminator 1 view .LVU3501
 12313 001e 54B9     		cbnz	r4, .L756
 12314              	.L750:
 12315              	.LVL957:
 12316              	.LBB1797:
 12317              	.LBI1797:
  67:src/int.c     **** #ifndef TINY_BUILD
 12318              		.loc 1 67 6 is_stmt 1 view .LVU3502
 12319              	.LBB1798:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
ARM GAS  /tmp/ccjGZi8K.s 			page 301


 12320              		.loc 1 69 2 view .LVU3503
  72:src/int.c     **** #endif
 12321              		.loc 1 72 3 view .LVU3504
 12322 0020 5221     		movs	r1, #82
 12323              	.LVL958:
  72:src/int.c     **** #endif
 12324              		.loc 1 72 3 is_stmt 0 view .LVU3505
 12325 0022 6920     		movs	r0, #105
  72:src/int.c     **** #endif
 12326              		.loc 1 72 3 view .LVU3506
 12327 0024 FFF7FEFF 		bl	cmdflag
 12328              	.LVL959:
 12329              	.L751:
  72:src/int.c     **** #endif
 12330              		.loc 1 72 3 view .LVU3507
 12331              	.LBE1798:
 12332              	.LBE1797:
1230:src/int.c     **** #else
 12333              		.loc 1 1230 2 is_stmt 1 view .LVU3508
1230:src/int.c     **** #else
 12334              		.loc 1 1230 9 is_stmt 0 view .LVU3509
 12335 0028 2246     		mov	r2, r4
 12336 002a 0120     		movs	r0, #1
 12337 002c 0021     		movs	r1, #0
 12338 002e FFF7FEFF 		bl	build_value
 12339              	.LVL960:
1234:src/int.c     **** 
 12340              		.loc 1 1234 1 view .LVU3510
 12341 0032 02B0     		add	sp, sp, #8
 12342              		.cfi_remember_state
 12343              		.cfi_def_cfa_offset 8
 12344              		@ sp needed
 12345 0034 10BD     		pop	{r4, pc}
 12346              	.LVL961:
 12347              	.L756:
 12348              		.cfi_restore_state
 12349              	.LBB1800:
  67:src/int.c     **** #ifndef TINY_BUILD
 12350              		.loc 1 67 6 is_stmt 1 view .LVU3511
 12351              	.LBB1799:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12352              		.loc 1 69 2 view .LVU3512
 12353 0036 FFF7FEFF 		bl	set_overflow.part.0
 12354              	.LVL962:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12355              		.loc 1 69 2 is_stmt 0 view .LVU3513
 12356 003a F5E7     		b	.L751
 12357              	.L758:
 12358              		.align	2
 12359              	.L757:
 12360 003c 00000000 		.word	main_ram
 12361              	.LBE1799:
 12362              	.LBE1800:
 12363              		.cfi_endproc
 12364              	.LFE62:
 12366              		.section	.text.intMirror,"ax",%progbits
 12367              		.align	1
ARM GAS  /tmp/ccjGZi8K.s 			page 302


 12368              		.p2align 2,,3
 12369              		.global	intMirror
 12370              		.syntax unified
 12371              		.thumb
 12372              		.thumb_func
 12373              		.fpu fpv4-sp-d16
 12375              	intMirror:
 12376              	.LVL963:
 12377              	.LFB63:
1239:src/int.c     **** #ifndef TINY_BUILD
 12378              		.loc 1 1239 42 is_stmt 1 view -0
 12379              		.cfi_startproc
 12380              		@ args = 0, pretend = 0, frame = 8
 12381              		@ frame_needed = 0, uses_anonymous_args = 0
1241:src/int.c     **** 	unsigned int n = word_size();
 12382              		.loc 1 1241 2 view .LVU3515
1242:src/int.c     **** 	unsigned int i;
 12383              		.loc 1 1242 2 view .LVU3516
 12384              	.LBB1801:
 12385              	.LBI1801:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 12386              		.loc 1 43 14 view .LVU3517
 12387              	.LBB1802:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12388              		.loc 1 44 2 view .LVU3518
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12389              		.loc 1 44 26 is_stmt 0 view .LVU3519
 12390 0000 254B     		ldr	r3, .L771
 12391 0002 1B68     		ldr	r3, [r3]
 12392 0004 93F8E9C7 		ldrb	ip, [r3, #2025]	@ zero_extendqisi2
 12393              	.LBE1802:
 12394              	.LBE1801:
1239:src/int.c     **** #ifndef TINY_BUILD
 12395              		.loc 1 1239 42 view .LVU3520
 12396 0008 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12397              		.cfi_def_cfa_offset 36
 12398              		.cfi_offset 4, -36
 12399              		.cfi_offset 5, -32
 12400              		.cfi_offset 6, -28
 12401              		.cfi_offset 7, -24
 12402              		.cfi_offset 8, -20
 12403              		.cfi_offset 9, -16
 12404              		.cfi_offset 10, -12
 12405              		.cfi_offset 11, -8
 12406              		.cfi_offset 14, -4
 12407              	.LBB1805:
 12408              	.LBB1803:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12409              		.loc 1 44 15 view .LVU3521
 12410 000c 0CF03F0C 		and	ip, ip, #63
 12411              	.LVL964:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12412              		.loc 1 45 2 is_stmt 1 view .LVU3522
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12413              		.loc 1 45 26 is_stmt 0 view .LVU3523
 12414 0010 0CF1FF33 		add	r3, ip, #-1
  46:src/int.c     **** 	return il;
ARM GAS  /tmp/ccjGZi8K.s 			page 303


 12415              		.loc 1 46 10 view .LVU3524
 12416 0014 3F2B     		cmp	r3, #63
 12417              	.LBE1803:
 12418              	.LBE1805:
1239:src/int.c     **** #ifndef TINY_BUILD
 12419              		.loc 1 1239 42 view .LVU3525
 12420 0016 8046     		mov	r8, r0
 12421 0018 8946     		mov	r9, r1
 12422              	.LBB1806:
 12423              	.LBB1804:
  46:src/int.c     **** 	return il;
 12424              		.loc 1 46 10 view .LVU3526
 12425 001a 28BF     		it	cs
 12426 001c 4FF0400C 		movcs	ip, #64
 12427              	.LVL965:
  46:src/int.c     **** 	return il;
 12428              		.loc 1 46 10 view .LVU3527
 12429              	.LBE1804:
 12430              	.LBE1806:
1243:src/int.c     **** 
 12431              		.loc 1 1243 2 is_stmt 1 view .LVU3528
1245:src/int.c     **** 		return 0;
 12432              		.loc 1 1245 2 view .LVU3529
1245:src/int.c     **** 		return 0;
 12433              		.loc 1 1245 5 is_stmt 0 view .LVU3530
 12434 0020 58EA0903 		orrs	r3, r8, r9
1239:src/int.c     **** #ifndef TINY_BUILD
 12435              		.loc 1 1239 42 view .LVU3531
 12436 0024 83B0     		sub	sp, sp, #12
 12437              		.cfi_def_cfa_offset 48
1245:src/int.c     **** 		return 0;
 12438              		.loc 1 1245 5 view .LVU3532
 12439 0026 31D0     		beq	.L765
1248:src/int.c     **** 		if (x & (1LL << i))
 12440              		.loc 1 1248 8 view .LVU3533
 12441 0028 0023     		movs	r3, #0
1250:src/int.c     **** 	return r;
 12442              		.loc 1 1250 13 view .LVU3534
 12443 002a 0CF1FF32 		add	r2, ip, #-1
1241:src/int.c     **** 	unsigned int n = word_size();
 12444              		.loc 1 1241 16 view .LVU3535
 12445 002e 1846     		mov	r0, r3
 12446              	.LVL966:
1241:src/int.c     **** 	unsigned int n = word_size();
 12447              		.loc 1 1241 16 view .LVU3536
 12448 0030 1946     		mov	r1, r3
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
 12449              		.loc 1 1249 7 view .LVU3537
 12450 0032 4FF0010E 		mov	lr, #1
1250:src/int.c     **** 	return r;
 12451              		.loc 1 1250 13 view .LVU3538
 12452 0036 0192     		str	r2, [sp, #4]
 12453              	.LVL967:
 12454              	.L764:
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
 12455              		.loc 1 1249 3 is_stmt 1 view .LVU3539
1250:src/int.c     **** 	return r;
ARM GAS  /tmp/ccjGZi8K.s 			page 304


 12456              		.loc 1 1250 4 view .LVU3540
1250:src/int.c     **** 	return r;
 12457              		.loc 1 1250 13 is_stmt 0 view .LVU3541
 12458 0038 019A     		ldr	r2, [sp, #4]
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
 12459              		.loc 1 1249 7 view .LVU3542
 12460 003a C3F12005 		rsb	r5, r3, #32
1250:src/int.c     **** 	return r;
 12461              		.loc 1 1250 13 view .LVU3543
 12462 003e D41A     		subs	r4, r2, r3
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
 12463              		.loc 1 1249 7 view .LVU3544
 12464 0040 09FA05F5 		lsl	r5, r9, r5
 12465 0044 28FA03F2 		lsr	r2, r8, r3
 12466 0048 2A43     		orrs	r2, r2, r5
 12467 004a B3F12005 		subs	r5, r3, #32
 12468 004e 5CBF     		itt	pl
 12469 0050 49FA05F5 		asrpl	r5, r9, r5
 12470 0054 2A43     		orrpl	r2, r2, r5
 12471 0056 02F0010A 		and	r10, r2, #1
 12472 005a 4FF0000B 		mov	fp, #0
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
 12473              		.loc 1 1249 6 view .LVU3545
 12474 005e 5AEA0B02 		orrs	r2, r10, fp
1250:src/int.c     **** 	return r;
 12475              		.loc 1 1250 13 view .LVU3546
 12476 0062 A4F12006 		sub	r6, r4, #32
 12477 0066 C4F12007 		rsb	r7, r4, #32
1248:src/int.c     **** 		if (x & (1LL << i))
 12478              		.loc 1 1248 18 view .LVU3547
 12479 006a 03F10103 		add	r3, r3, #1
 12480              	.LVL968:
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
 12481              		.loc 1 1249 6 view .LVU3548
 12482 006e 08D0     		beq	.L762
1250:src/int.c     **** 	return r;
 12483              		.loc 1 1250 13 view .LVU3549
 12484 0070 0EFA06F6 		lsl	r6, lr, r6
 12485 0074 2EFA07F7 		lsr	r7, lr, r7
 12486 0078 3E43     		orrs	r6, r6, r7
 12487 007a 0EFA04F4 		lsl	r4, lr, r4
1250:src/int.c     **** 	return r;
 12488              		.loc 1 1250 6 view .LVU3550
 12489 007e 3143     		orrs	r1, r1, r6
 12490              	.LVL969:
1250:src/int.c     **** 	return r;
 12491              		.loc 1 1250 6 view .LVU3551
 12492 0080 2043     		orrs	r0, r0, r4
 12493              	.LVL970:
 12494              	.L762:
1248:src/int.c     **** 		if (x & (1LL << i))
 12495              		.loc 1 1248 17 is_stmt 1 discriminator 2 view .LVU3552
1248:src/int.c     **** 		if (x & (1LL << i))
 12496              		.loc 1 1248 12 discriminator 2 view .LVU3553
1248:src/int.c     **** 		if (x & (1LL << i))
 12497              		.loc 1 1248 2 is_stmt 0 discriminator 2 view .LVU3554
 12498 0082 6345     		cmp	r3, ip
ARM GAS  /tmp/ccjGZi8K.s 			page 305


 12499 0084 D8D1     		bne	.L764
1255:src/int.c     **** 
 12500              		.loc 1 1255 1 view .LVU3555
 12501 0086 03B0     		add	sp, sp, #12
 12502              		.cfi_remember_state
 12503              		.cfi_def_cfa_offset 36
 12504              		@ sp needed
 12505 0088 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 12506              	.LVL971:
 12507              	.L765:
 12508              		.cfi_restore_state
1246:src/int.c     **** 
 12509              		.loc 1 1246 10 view .LVU3556
 12510 008c 0020     		movs	r0, #0
 12511              	.LVL972:
1246:src/int.c     **** 
 12512              		.loc 1 1246 10 view .LVU3557
 12513 008e 0146     		mov	r1, r0
1255:src/int.c     **** 
 12514              		.loc 1 1255 1 view .LVU3558
 12515 0090 03B0     		add	sp, sp, #12
 12516              		.cfi_def_cfa_offset 36
 12517              		@ sp needed
 12518 0092 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 12519              	.L772:
 12520 0096 00BF     		.align	2
 12521              	.L771:
 12522 0098 00000000 		.word	main_ram
 12523              		.cfi_endproc
 12524              	.LFE63:
 12526              		.section	.text.int_justify,"ax",%progbits
 12527              		.align	1
 12528              		.p2align 2,,3
 12529              		.global	int_justify
 12530              		.syntax unified
 12531              		.thumb
 12532              		.thumb_func
 12533              		.fpu fpv4-sp-d16
 12535              	int_justify:
 12536              	.LVL973:
 12537              	.LFB65:
1279:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
 12538              		.loc 1 1279 33 is_stmt 1 view -0
 12539              		.cfi_startproc
 12540              		@ args = 0, pretend = 0, frame = 8
 12541              		@ frame_needed = 0, uses_anonymous_args = 0
1280:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
 12542              		.loc 1 1280 2 view .LVU3560
1279:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
 12543              		.loc 1 1279 33 is_stmt 0 view .LVU3561
 12544 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12545              		.cfi_def_cfa_offset 36
 12546              		.cfi_offset 4, -36
 12547              		.cfi_offset 5, -32
 12548              		.cfi_offset 6, -28
 12549              		.cfi_offset 7, -24
 12550              		.cfi_offset 8, -20
ARM GAS  /tmp/ccjGZi8K.s 			page 306


 12551              		.cfi_offset 9, -16
 12552              		.cfi_offset 10, -12
 12553              		.cfi_offset 11, -8
 12554              		.cfi_offset 14, -4
1280:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
 12555              		.loc 1 1280 68 view .LVU3562
 12556 0004 6028     		cmp	r0, #96
1279:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
 12557              		.loc 1 1279 33 view .LVU3563
 12558 0006 83B0     		sub	sp, sp, #12
 12559              		.cfi_def_cfa_offset 48
1280:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
 12560              		.loc 1 1280 68 view .LVU3564
 12561 0008 15D0     		beq	.L792
1281:src/int.c     **** }
 12562              		.loc 1 1281 2 view .LVU3565
 12563 000a DFF8F8A0 		ldr	r10, .L796+4
 12564 000e 0127     		movs	r7, #1
 12565 0010 0026     		movs	r6, #0
 12566              	.L774:
 12567              	.LVL974:
 12568              	.LBB1826:
 12569              	.LBI1826:
1260:src/int.c     **** 	unsigned int c = 0;
 12570              		.loc 1 1260 13 is_stmt 1 discriminator 4 view .LVU3566
 12571              	.LBB1827:
1261:src/int.c     **** 	long long int v;
 12572              		.loc 1 1261 2 discriminator 4 view .LVU3567
1262:src/int.c     **** 
 12573              		.loc 1 1262 2 discriminator 4 view .LVU3568
1264:src/int.c     **** 	setlastX();
 12574              		.loc 1 1264 2 discriminator 4 view .LVU3569
1264:src/int.c     **** 	setlastX();
 12575              		.loc 1 1264 6 is_stmt 0 discriminator 4 view .LVU3570
 12576 0012 FFF7FEFF 		bl	getX_int
 12577              	.LVL975:
1264:src/int.c     **** 	setlastX();
 12578              		.loc 1 1264 6 discriminator 4 view .LVU3571
 12579 0016 0446     		mov	r4, r0
 12580 0018 0D46     		mov	r5, r1
 12581              	.LVL976:
1265:src/int.c     **** 	lift();
 12582              		.loc 1 1265 2 is_stmt 1 discriminator 4 view .LVU3572
 12583 001a FFF7FEFF 		bl	setlastX
 12584              	.LVL977:
1266:src/int.c     **** 	if (v != 0) {
 12585              		.loc 1 1266 2 discriminator 4 view .LVU3573
 12586 001e FFF7FEFF 		bl	lift
 12587              	.LVL978:
1267:src/int.c     **** 		const int flags = save_flags();
 12588              		.loc 1 1267 2 discriminator 4 view .LVU3574
1267:src/int.c     **** 		const int flags = save_flags();
 12589              		.loc 1 1267 5 is_stmt 0 discriminator 4 view .LVU3575
 12590 0022 54EA0503 		orrs	r3, r4, r5
 12591 0026 1CD1     		bne	.L793
 12592              	.LVL979:
1276:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 307


 12593              		.loc 1 1276 2 is_stmt 1 view .LVU3576
 12594 0028 2046     		mov	r0, r4
 12595 002a 2946     		mov	r1, r5
 12596              	.LBE1827:
 12597              	.LBE1826:
1282:src/int.c     **** 
 12598              		.loc 1 1282 1 is_stmt 0 view .LVU3577
 12599 002c 03B0     		add	sp, sp, #12
 12600              		.cfi_remember_state
 12601              		.cfi_def_cfa_offset 36
 12602              		@ sp needed
 12603 002e BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12604              		.cfi_restore 14
 12605              		.cfi_restore 11
 12606              		.cfi_restore 10
 12607              		.cfi_restore 9
 12608              		.cfi_restore 8
 12609              		.cfi_restore 7
 12610              		.cfi_restore 6
 12611              		.cfi_restore 5
 12612              		.cfi_restore 4
 12613              		.cfi_def_cfa_offset 0
 12614              	.LVL980:
 12615              	.LBB1859:
 12616              	.LBB1855:
1276:src/int.c     **** }
 12617              		.loc 1 1276 2 view .LVU3578
 12618 0032 FFF7FEBF 		b	setX_int
 12619              	.LVL981:
 12620              	.L792:
 12621              		.cfi_restore_state
1276:src/int.c     **** }
 12622              		.loc 1 1276 2 view .LVU3579
 12623              	.LBE1855:
 12624              	.LBE1859:
 12625              	.LBB1860:
 12626              	.LBI1860:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 12627              		.loc 1 110 22 is_stmt 1 view .LVU3580
 12628              	.LBB1861:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 12629              		.loc 1 111 2 view .LVU3581
 12630              	.LBB1862:
 12631              	.LBI1862:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 12632              		.loc 1 43 14 view .LVU3582
 12633              	.LBB1863:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12634              		.loc 1 44 2 view .LVU3583
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12635              		.loc 1 45 2 view .LVU3584
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12636              		.loc 1 44 26 is_stmt 0 view .LVU3585
 12637 0036 324B     		ldr	r3, .L796
 12638              	.LVL982:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12639              		.loc 1 44 26 view .LVU3586
ARM GAS  /tmp/ccjGZi8K.s 			page 308


 12640 0038 1B68     		ldr	r3, [r3]
 12641              	.LVL983:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12642              		.loc 1 44 26 view .LVU3587
 12643 003a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 12644              	.LVL984:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12645              		.loc 1 44 15 view .LVU3588
 12646 003e 06F03F06 		and	r6, r6, #63
 12647              	.LVL985:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12648              		.loc 1 45 26 view .LVU3589
 12649 0042 731E     		subs	r3, r6, #1
 12650              	.LVL986:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12651              		.loc 1 45 5 view .LVU3590
 12652 0044 3E2B     		cmp	r3, #62
 12653 0046 52D8     		bhi	.L784
 12654 0048 0127     		movs	r7, #1
 12655 004a 213E     		subs	r6, r6, #33
 12656 004c C3F12002 		rsb	r2, r3, #32
 12657 0050 07FA06F6 		lsl	r6, r7, r6
 12658 0054 27FA02F2 		lsr	r2, r7, r2
 12659 0058 1643     		orrs	r6, r6, r2
 12660 005a 9F40     		lsls	r7, r7, r3
 12661              	.L775:
 12662              	.LVL987:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 12663              		.loc 1 45 5 view .LVU3591
 12664              	.LBE1863:
 12665              	.LBE1862:
 112:src/int.c     **** 	return bit;
 12666              		.loc 1 112 2 is_stmt 1 view .LVU3592
 113:src/int.c     **** }
 12667              		.loc 1 113 2 view .LVU3593
 113:src/int.c     **** }
 12668              		.loc 1 113 2 is_stmt 0 view .LVU3594
 12669              	.LBE1861:
 12670              	.LBE1860:
1281:src/int.c     **** }
 12671              		.loc 1 1281 2 is_stmt 1 view .LVU3595
 12672 005c DFF8A8A0 		ldr	r10, .L796+8
 12673 0060 D7E7     		b	.L774
 12674              	.LVL988:
 12675              	.L793:
 12676              	.LBB1867:
 12677              	.LBB1856:
 12678              	.LBB1828:
1268:src/int.c     **** 		while ((v & mask) == 0) {
 12679              		.loc 1 1268 3 view .LVU3596
 12680              	.LBB1829:
 12681              	.LBI1829:
  80:src/int.c     **** 	return (get_overflow() << 1) | get_carry();
 12682              		.loc 1 80 12 view .LVU3597
 12683              	.LBB1830:
  81:src/int.c     **** }
 12684              		.loc 1 81 2 view .LVU3598
ARM GAS  /tmp/ccjGZi8K.s 			page 309


 12685              	.LBB1831:
 12686              	.LBI1831:
  63:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
 12687              		.loc 1 63 5 view .LVU3599
 12688              	.LBB1832:
  64:src/int.c     **** }
 12689              		.loc 1 64 2 view .LVU3600
  64:src/int.c     **** }
 12690              		.loc 1 64 9 is_stmt 0 view .LVU3601
 12691 0062 6920     		movs	r0, #105
 12692 0064 FFF7FEFF 		bl	get_user_flag
 12693              	.LVL989:
 12694 0068 8346     		mov	fp, r0
 12695              	.LBE1832:
 12696              	.LBE1831:
 12697              	.LBB1833:
 12698              	.LBB1834:
  51:src/int.c     **** }
 12699              		.loc 1 51 9 view .LVU3602
 12700 006a 6A20     		movs	r0, #106
 12701              	.LBE1834:
 12702              	.LBI1833:
  50:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 12703              		.loc 1 50 5 is_stmt 1 view .LVU3603
 12704              	.LBB1835:
  51:src/int.c     **** }
 12705              		.loc 1 51 2 view .LVU3604
  51:src/int.c     **** }
 12706              		.loc 1 51 9 is_stmt 0 view .LVU3605
 12707 006c FFF7FEFF 		bl	get_user_flag
 12708              	.LVL990:
 12709              	.LBE1835:
 12710              	.LBE1833:
 12711              	.LBE1830:
 12712              	.LBE1829:
1269:src/int.c     **** 			v = (*shift)(v);
 12713              		.loc 1 1269 13 view .LVU3606
 12714 0070 04EA0702 		and	r2, r4, r7
 12715 0074 05EA0603 		and	r3, r5, r6
 12716              	.LBB1838:
 12717              	.LBB1836:
  81:src/int.c     **** }
 12718              		.loc 1 81 31 view .LVU3607
 12719 0078 40EA4B01 		orr	r1, r0, fp, lsl #1
 12720              	.LBE1836:
 12721              	.LBE1838:
1269:src/int.c     **** 			v = (*shift)(v);
 12722              		.loc 1 1269 9 view .LVU3608
 12723 007c 1343     		orrs	r3, r2, r3
 12724              	.LBB1839:
 12725              	.LBB1837:
  81:src/int.c     **** }
 12726              		.loc 1 81 31 view .LVU3609
 12727 007e 0191     		str	r1, [sp, #4]
 12728              	.LVL991:
  81:src/int.c     **** }
 12729              		.loc 1 81 31 view .LVU3610
ARM GAS  /tmp/ccjGZi8K.s 			page 310


 12730              	.LBE1837:
 12731              	.LBE1839:
1269:src/int.c     **** 			v = (*shift)(v);
 12732              		.loc 1 1269 3 is_stmt 1 view .LVU3611
1269:src/int.c     **** 			v = (*shift)(v);
 12733              		.loc 1 1269 9 view .LVU3612
 12734 0080 39D1     		bne	.L785
 12735              	.LBE1828:
1261:src/int.c     **** 	long long int v;
 12736              		.loc 1 1261 15 is_stmt 0 view .LVU3613
 12737 0082 4FF0000B 		mov	fp, #0
 12738              	.LVL992:
 12739              	.L778:
 12740              	.LBB1852:
1270:src/int.c     **** 			c++;
 12741              		.loc 1 1270 4 is_stmt 1 view .LVU3614
1270:src/int.c     **** 			c++;
 12742              		.loc 1 1270 9 is_stmt 0 view .LVU3615
 12743 0086 2046     		mov	r0, r4
 12744 0088 2946     		mov	r1, r5
 12745 008a D047     		blx	r10
 12746              	.LVL993:
1269:src/int.c     **** 			v = (*shift)(v);
 12747              		.loc 1 1269 13 view .LVU3616
 12748 008c 00EA0708 		and	r8, r0, r7
 12749 0090 01EA0609 		and	r9, r1, r6
1269:src/int.c     **** 			v = (*shift)(v);
 12750              		.loc 1 1269 9 view .LVU3617
 12751 0094 58EA0903 		orrs	r3, r8, r9
1270:src/int.c     **** 			c++;
 12752              		.loc 1 1270 9 view .LVU3618
 12753 0098 0446     		mov	r4, r0
 12754              	.LVL994:
1270:src/int.c     **** 			c++;
 12755              		.loc 1 1270 9 view .LVU3619
 12756 009a 0D46     		mov	r5, r1
 12757              	.LVL995:
1271:src/int.c     **** 		}
 12758              		.loc 1 1271 4 is_stmt 1 view .LVU3620
1271:src/int.c     **** 		}
 12759              		.loc 1 1271 5 is_stmt 0 view .LVU3621
 12760 009c 0BF1010B 		add	fp, fp, #1
 12761              	.LVL996:
1269:src/int.c     **** 			v = (*shift)(v);
 12762              		.loc 1 1269 9 is_stmt 1 view .LVU3622
 12763 00a0 F1D0     		beq	.L778
1270:src/int.c     **** 			c++;
 12764              		.loc 1 1270 9 is_stmt 0 view .LVU3623
 12765 00a2 0746     		mov	r7, r0
 12766 00a4 0E46     		mov	r6, r1
1269:src/int.c     **** 			v = (*shift)(v);
 12767              		.loc 1 1269 9 view .LVU3624
 12768 00a6 5C46     		mov	r4, fp
 12769              	.LVL997:
1269:src/int.c     **** 			v = (*shift)(v);
 12770              		.loc 1 1269 9 view .LVU3625
 12771 00a8 0025     		movs	r5, #0
ARM GAS  /tmp/ccjGZi8K.s 			page 311


 12772              	.LVL998:
 12773              	.L777:
1273:src/int.c     **** 		set_reg_n_int(regY_idx, v);
 12774              		.loc 1 1273 3 is_stmt 1 view .LVU3626
 12775              	.LBB1840:
 12776              	.LBI1840:
  84:src/int.c     **** 	set_carry(co & 1);
 12777              		.loc 1 84 13 view .LVU3627
 12778              	.LBB1841:
  85:src/int.c     **** 	set_overflow(co & 2);
 12779              		.loc 1 85 2 view .LVU3628
 12780              	.LBB1842:
 12781              	.LBI1842:
  54:src/int.c     **** #ifndef TINY_BUILD
 12782              		.loc 1 54 6 view .LVU3629
 12783              	.LBB1843:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12784              		.loc 1 56 2 view .LVU3630
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12785              		.loc 1 56 5 is_stmt 0 view .LVU3631
 12786 00aa 019B     		ldr	r3, [sp, #4]
 12787 00ac DA07     		lsls	r2, r3, #31
 12788 00ae 14D4     		bmi	.L794
  59:src/int.c     **** #endif
 12789              		.loc 1 59 3 is_stmt 1 view .LVU3632
 12790 00b0 5221     		movs	r1, #82
 12791 00b2 6A20     		movs	r0, #106
 12792 00b4 FFF7FEFF 		bl	cmdflag
 12793              	.LVL999:
  59:src/int.c     **** #endif
 12794              		.loc 1 59 3 is_stmt 0 view .LVU3633
 12795              	.LBE1843:
 12796              	.LBE1842:
  86:src/int.c     **** }
 12797              		.loc 1 86 2 is_stmt 1 view .LVU3634
 12798              	.LBB1845:
 12799              	.LBI1845:
  67:src/int.c     **** #ifndef TINY_BUILD
 12800              		.loc 1 67 6 view .LVU3635
 12801              	.LBB1846:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12802              		.loc 1 69 2 view .LVU3636
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12803              		.loc 1 69 5 is_stmt 0 view .LVU3637
 12804 00b8 019B     		ldr	r3, [sp, #4]
 12805 00ba 9B07     		lsls	r3, r3, #30
 12806 00bc 12D5     		bpl	.L781
 12807              	.LVL1000:
 12808              	.L795:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12809              		.loc 1 69 5 view .LVU3638
 12810 00be FFF7FEFF 		bl	set_overflow.part.0
 12811              	.LVL1001:
 12812              	.L782:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12813              		.loc 1 69 5 view .LVU3639
 12814              	.LBE1846:
ARM GAS  /tmp/ccjGZi8K.s 			page 312


 12815              	.LBE1845:
 12816              	.LBE1841:
 12817              	.LBE1840:
1274:src/int.c     **** 	}
 12818              		.loc 1 1274 3 is_stmt 1 view .LVU3640
 12819 00c2 3A46     		mov	r2, r7
 12820 00c4 3346     		mov	r3, r6
 12821 00c6 6520     		movs	r0, #101
 12822 00c8 FFF7FEFF 		bl	set_reg_n_int
 12823              	.LVL1002:
 12824              	.LBE1852:
1276:src/int.c     **** }
 12825              		.loc 1 1276 2 view .LVU3641
 12826 00cc 2046     		mov	r0, r4
 12827 00ce 2946     		mov	r1, r5
 12828              	.LBE1856:
 12829              	.LBE1867:
1282:src/int.c     **** 
 12830              		.loc 1 1282 1 is_stmt 0 view .LVU3642
 12831 00d0 03B0     		add	sp, sp, #12
 12832              		.cfi_remember_state
 12833              		.cfi_def_cfa_offset 36
 12834              		@ sp needed
 12835 00d2 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12836              		.cfi_restore 14
 12837              		.cfi_restore 11
 12838              		.cfi_restore 10
 12839              		.cfi_restore 9
 12840              		.cfi_restore 8
 12841              		.cfi_restore 7
 12842              		.cfi_restore 6
 12843              		.cfi_restore 5
 12844              		.cfi_restore 4
 12845              		.cfi_def_cfa_offset 0
 12846              	.LVL1003:
 12847              	.LBB1868:
 12848              	.LBB1857:
1276:src/int.c     **** }
 12849              		.loc 1 1276 2 view .LVU3643
 12850 00d6 FFF7FEBF 		b	setX_int
 12851              	.LVL1004:
 12852              	.L794:
 12853              		.cfi_restore_state
 12854              	.LBB1853:
 12855              	.LBB1851:
 12856              	.LBB1850:
 12857              	.LBB1848:
 12858              	.LBB1844:
1276:src/int.c     **** }
 12859              		.loc 1 1276 2 view .LVU3644
 12860 00da FFF7FEFF 		bl	set_carry.part.0
 12861              	.LVL1005:
1276:src/int.c     **** }
 12862              		.loc 1 1276 2 view .LVU3645
 12863              	.LBE1844:
 12864              	.LBE1848:
  86:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 313


 12865              		.loc 1 86 2 is_stmt 1 view .LVU3646
 12866              	.LBB1849:
  67:src/int.c     **** #ifndef TINY_BUILD
 12867              		.loc 1 67 6 view .LVU3647
 12868              	.LBB1847:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12869              		.loc 1 69 2 view .LVU3648
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12870              		.loc 1 69 5 is_stmt 0 view .LVU3649
 12871 00de 019B     		ldr	r3, [sp, #4]
 12872 00e0 9B07     		lsls	r3, r3, #30
 12873 00e2 ECD4     		bmi	.L795
 12874              	.LVL1006:
 12875              	.L781:
  72:src/int.c     **** #endif
 12876              		.loc 1 72 3 is_stmt 1 view .LVU3650
 12877 00e4 5221     		movs	r1, #82
 12878 00e6 6920     		movs	r0, #105
 12879 00e8 FFF7FEFF 		bl	cmdflag
 12880              	.LVL1007:
 12881 00ec E9E7     		b	.L782
 12882              	.LVL1008:
 12883              	.L784:
  72:src/int.c     **** #endif
 12884              		.loc 1 72 3 is_stmt 0 view .LVU3651
 12885              	.LBE1847:
 12886              	.LBE1849:
 12887              	.LBE1850:
 12888              	.LBE1851:
 12889              	.LBE1853:
 12890              	.LBE1857:
 12891              	.LBE1868:
 12892              	.LBB1869:
 12893              	.LBB1866:
 12894              	.LBB1865:
 12895              	.LBB1864:
 12896 00ee 0027     		movs	r7, #0
 12897 00f0 4FF00046 		mov	r6, #-2147483648
 12898 00f4 B2E7     		b	.L775
 12899              	.LVL1009:
 12900              	.L785:
  72:src/int.c     **** #endif
 12901              		.loc 1 72 3 view .LVU3652
 12902              	.LBE1864:
 12903              	.LBE1865:
 12904              	.LBE1866:
 12905              	.LBE1869:
 12906              	.LBB1870:
 12907              	.LBB1858:
 12908              	.LBB1854:
1269:src/int.c     **** 			v = (*shift)(v);
 12909              		.loc 1 1269 9 view .LVU3653
 12910 00f6 2746     		mov	r7, r4
 12911 00f8 2E46     		mov	r6, r5
 12912 00fa 0024     		movs	r4, #0
 12913              	.LVL1010:
1269:src/int.c     **** 			v = (*shift)(v);
ARM GAS  /tmp/ccjGZi8K.s 			page 314


 12914              		.loc 1 1269 9 view .LVU3654
 12915 00fc 0025     		movs	r5, #0
 12916 00fe D4E7     		b	.L777
 12917              	.L797:
 12918              		.align	2
 12919              	.L796:
 12920 0100 00000000 		.word	main_ram
 12921 0104 00000000 		.word	intLSR
 12922 0108 00000000 		.word	intLSL
 12923              	.LBE1854:
 12924              	.LBE1858:
 12925              	.LBE1870:
 12926              		.cfi_endproc
 12927              	.LFE65:
 12929              		.section	.text.intmsks,"ax",%progbits
 12930              		.align	1
 12931              		.p2align 2,,3
 12932              		.global	intmsks
 12933              		.syntax unified
 12934              		.thumb
 12935              		.thumb_func
 12936              		.fpu fpv4-sp-d16
 12938              	intmsks:
 12939              	.LVL1011:
 12940              	.LFB66:
1289:src/int.c     **** #ifndef TINY_BUILD
 12941              		.loc 1 1289 46 is_stmt 1 view -0
 12942              		.cfi_startproc
 12943              		@ args = 0, pretend = 0, frame = 0
 12944              		@ frame_needed = 0, uses_anonymous_args = 0
1291:src/int.c     **** 	long long int x;
 12945              		.loc 1 1291 2 view .LVU3656
1292:src/int.c     **** 	unsigned int i;
 12946              		.loc 1 1292 2 view .LVU3657
1293:src/int.c     **** 	long long int (*f)(long long int);
 12947              		.loc 1 1293 2 view .LVU3658
1294:src/int.c     **** 	const int carry = get_carry();
 12948              		.loc 1 1294 2 view .LVU3659
1295:src/int.c     **** 
 12949              		.loc 1 1295 2 view .LVU3660
 12950              	.LBB1871:
 12951              	.LBI1871:
  50:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 12952              		.loc 1 50 5 view .LVU3661
 12953              	.LBB1872:
  51:src/int.c     **** }
 12954              		.loc 1 51 2 view .LVU3662
 12955              	.LBE1872:
 12956              	.LBE1871:
1289:src/int.c     **** #ifndef TINY_BUILD
 12957              		.loc 1 1289 46 is_stmt 0 view .LVU3663
 12958 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 12959              		.cfi_def_cfa_offset 32
 12960              		.cfi_offset 3, -32
 12961              		.cfi_offset 4, -28
 12962              		.cfi_offset 5, -24
 12963              		.cfi_offset 6, -20
ARM GAS  /tmp/ccjGZi8K.s 			page 315


 12964              		.cfi_offset 7, -16
 12965              		.cfi_offset 8, -12
 12966              		.cfi_offset 9, -8
 12967              		.cfi_offset 14, -4
1289:src/int.c     **** #ifndef TINY_BUILD
 12968              		.loc 1 1289 46 view .LVU3664
 12969 0004 0546     		mov	r5, r0
 12970              	.LBB1875:
 12971              	.LBB1873:
  51:src/int.c     **** }
 12972              		.loc 1 51 9 view .LVU3665
 12973 0006 6A20     		movs	r0, #106
 12974              	.LVL1012:
  51:src/int.c     **** }
 12975              		.loc 1 51 9 view .LVU3666
 12976              	.LBE1873:
 12977              	.LBE1875:
1289:src/int.c     **** #ifndef TINY_BUILD
 12978              		.loc 1 1289 46 view .LVU3667
 12979 0008 0C46     		mov	r4, r1
 12980              	.LBB1876:
 12981              	.LBB1874:
  51:src/int.c     **** }
 12982              		.loc 1 51 9 view .LVU3668
 12983 000a FFF7FEFF 		bl	get_user_flag
 12984              	.LVL1013:
  51:src/int.c     **** }
 12985              		.loc 1 51 9 view .LVU3669
 12986 000e 0646     		mov	r6, r0
 12987              	.LVL1014:
  51:src/int.c     **** }
 12988              		.loc 1 51 9 view .LVU3670
 12989              	.LBE1874:
 12990              	.LBE1876:
1297:src/int.c     **** 
 12991              		.loc 1 1297 2 is_stmt 1 view .LVU3671
 12992 0010 FFF7FEFF 		bl	lift
 12993              	.LVL1015:
1299:src/int.c     **** 		mask = topbit_mask();
 12994              		.loc 1 1299 2 view .LVU3672
 12995              	.LBB1877:
 12996              	.LBB1878:
 12997              	.LBB1879:
 12998              	.LBB1880:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12999              		.loc 1 44 26 is_stmt 0 view .LVU3673
 13000 0014 314B     		ldr	r3, .L815
 13001 0016 1B68     		ldr	r3, [r3]
 13002 0018 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 13003              	.LBE1880:
 13004              	.LBE1879:
 13005              	.LBE1878:
 13006              	.LBE1877:
1299:src/int.c     **** 		mask = topbit_mask();
 13007              		.loc 1 1299 5 view .LVU3674
 13008 001c 692C     		cmp	r4, #105
 13009              	.LBB1891:
ARM GAS  /tmp/ccjGZi8K.s 			page 316


 13010              	.LBB1887:
 13011              	.LBB1884:
 13012              	.LBB1881:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13013              		.loc 1 44 15 view .LVU3675
 13014 001e 02F03F02 		and	r2, r2, #63
 13015              	.LBE1881:
 13016              	.LBE1884:
 13017              	.LBE1887:
 13018              	.LBE1891:
1299:src/int.c     **** 		mask = topbit_mask();
 13019              		.loc 1 1299 5 view .LVU3676
 13020 0022 3CD0     		beq	.L799
 13021              	.LVL1016:
1306:src/int.c     **** 		x = mask_value(-1);
 13022              		.loc 1 1306 2 is_stmt 1 view .LVU3677
 13023              	.LBB1892:
 13024              	.LBI1892:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 13025              		.loc 1 43 14 view .LVU3678
 13026              	.LBB1893:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13027              		.loc 1 44 2 view .LVU3679
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13028              		.loc 1 45 2 view .LVU3680
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13029              		.loc 1 45 5 is_stmt 0 view .LVU3681
 13030 0024 531E     		subs	r3, r2, #1
 13031              	.LVL1017:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13032              		.loc 1 45 5 view .LVU3682
 13033 0026 3E2B     		cmp	r3, #62
 13034              	.LBE1893:
 13035              	.LBE1892:
1304:src/int.c     **** 	}
 13036              		.loc 1 1304 5 view .LVU3683
 13037 0028 2D4F     		ldr	r7, .L815+4
1303:src/int.c     **** 		f = &intLSL;
 13038              		.loc 1 1303 8 view .LVU3684
 13039 002a 4FF00100 		mov	r0, #1
 13040 002e 4FF00001 		mov	r1, #0
 13041              	.LBB1897:
 13042              	.LBB1894:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13043              		.loc 1 45 5 view .LVU3685
 13044 0032 49D8     		bhi	.L800
 13045              	.LVL1018:
 13046              	.L801:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13047              		.loc 1 45 5 view .LVU3686
 13048              	.LBE1894:
 13049              	.LBE1897:
1306:src/int.c     **** 		x = mask_value(-1);
 13050              		.loc 1 1306 5 view .LVU3687
 13051 0034 9542     		cmp	r5, r2
 13052 0036 16D2     		bcs	.L805
 13053              	.LVL1019:
ARM GAS  /tmp/ccjGZi8K.s 			page 317


 13054              	.L806:
1310:src/int.c     **** 			x |= mask;
 13055              		.loc 1 1310 13 is_stmt 1 discriminator 1 view .LVU3688
1310:src/int.c     **** 			x |= mask;
 13056              		.loc 1 1310 3 is_stmt 0 discriminator 1 view .LVU3689
 13057 0038 002D     		cmp	r5, #0
 13058 003a 4BD0     		beq	.L813
1310:src/int.c     **** 			x |= mask;
 13059              		.loc 1 1310 3 view .LVU3690
 13060 003c 4FF00009 		mov	r9, #0
 13061 0040 4C46     		mov	r4, r9
 13062 0042 C846     		mov	r8, r9
 13063              	.LVL1020:
 13064              	.L803:
1311:src/int.c     **** 			mask = (*f)(mask);
 13065              		.loc 1 1311 4 is_stmt 1 discriminator 3 view .LVU3691
1310:src/int.c     **** 			x |= mask;
 13066              		.loc 1 1310 21 is_stmt 0 discriminator 3 view .LVU3692
 13067 0044 09F10109 		add	r9, r9, #1
 13068              	.LVL1021:
1311:src/int.c     **** 			mask = (*f)(mask);
 13069              		.loc 1 1311 6 discriminator 3 view .LVU3693
 13070 0048 0443     		orrs	r4, r4, r0
 13071              	.LVL1022:
1311:src/int.c     **** 			mask = (*f)(mask);
 13072              		.loc 1 1311 6 discriminator 3 view .LVU3694
 13073 004a 48EA0108 		orr	r8, r8, r1
 13074              	.LVL1023:
1312:src/int.c     **** 		}
 13075              		.loc 1 1312 4 is_stmt 1 discriminator 3 view .LVU3695
1312:src/int.c     **** 		}
 13076              		.loc 1 1312 12 is_stmt 0 discriminator 3 view .LVU3696
 13077 004e B847     		blx	r7
 13078              	.LVL1024:
1310:src/int.c     **** 			x |= mask;
 13079              		.loc 1 1310 20 is_stmt 1 discriminator 3 view .LVU3697
1310:src/int.c     **** 			x |= mask;
 13080              		.loc 1 1310 13 discriminator 3 view .LVU3698
1310:src/int.c     **** 			x |= mask;
 13081              		.loc 1 1310 3 is_stmt 0 discriminator 3 view .LVU3699
 13082 0050 4D45     		cmp	r5, r9
 13083 0052 F7D1     		bne	.L803
 13084              	.LVL1025:
 13085              	.L802:
1315:src/int.c     **** 	set_carry(carry);
 13086              		.loc 1 1315 2 is_stmt 1 view .LVU3700
 13087 0054 2046     		mov	r0, r4
 13088 0056 4146     		mov	r1, r8
 13089 0058 FFF7FEFF 		bl	setX_int
 13090              	.LVL1026:
1316:src/int.c     **** #endif
 13091              		.loc 1 1316 2 view .LVU3701
 13092              	.LBB1898:
 13093              	.LBI1898:
  54:src/int.c     **** #ifndef TINY_BUILD
 13094              		.loc 1 54 6 view .LVU3702
 13095              	.LBB1899:
ARM GAS  /tmp/ccjGZi8K.s 			page 318


  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13096              		.loc 1 56 2 view .LVU3703
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13097              		.loc 1 56 5 is_stmt 0 view .LVU3704
 13098 005c CEB1     		cbz	r6, .L804
 13099              	.LVL1027:
 13100              	.L814:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13101              		.loc 1 56 5 view .LVU3705
 13102              	.LBE1899:
 13103              	.LBE1898:
1318:src/int.c     **** 
 13104              		.loc 1 1318 1 view .LVU3706
 13105 005e BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 13106              		.cfi_remember_state
 13107              		.cfi_restore 14
 13108              		.cfi_restore 9
 13109              		.cfi_restore 8
 13110              		.cfi_restore 7
 13111              		.cfi_restore 6
 13112              		.cfi_restore 5
 13113              		.cfi_restore 4
 13114              		.cfi_restore 3
 13115              		.cfi_def_cfa_offset 0
 13116              	.LVL1028:
 13117              	.LBB1903:
 13118              	.LBB1900:
1318:src/int.c     **** 
 13119              		.loc 1 1318 1 view .LVU3707
 13120 0062 FFF7FEBF 		b	set_carry.part.0
 13121              	.LVL1029:
 13122              	.L805:
 13123              		.cfi_restore_state
1318:src/int.c     **** 
 13124              		.loc 1 1318 1 view .LVU3708
 13125              	.LBE1900:
 13126              	.LBE1903:
 13127              	.LBB1904:
 13128              	.LBB1905:
  95:src/int.c     **** 
 13129              		.loc 1 95 2 is_stmt 1 view .LVU3709
  97:src/int.c     **** 		return v;
 13130              		.loc 1 97 2 view .LVU3710
  99:src/int.c     **** 	return v & mask;
 13131              		.loc 1 99 2 view .LVU3711
  99:src/int.c     **** 	return v & mask;
 13132              		.loc 1 99 14 is_stmt 0 view .LVU3712
 13133 0066 0124     		movs	r4, #1
 13134 0068 A2F12008 		sub	r8, r2, #32
 13135 006c C2F12003 		rsb	r3, r2, #32
 13136 0070 04FA08F8 		lsl	r8, r4, r8
 13137 0074 24FA03F3 		lsr	r3, r4, r3
 13138 0078 9440     		lsls	r4, r4, r2
  99:src/int.c     **** 	return v & mask;
 13139              		.loc 1 99 7 view .LVU3713
 13140 007a 14F1FF34 		adds	r4, r4, #-1
  99:src/int.c     **** 	return v & mask;
ARM GAS  /tmp/ccjGZi8K.s 			page 319


 13141              		.loc 1 99 14 view .LVU3714
 13142 007e 48EA0308 		orr	r8, r8, r3
  99:src/int.c     **** 	return v & mask;
 13143              		.loc 1 99 7 view .LVU3715
 13144 0082 48F1FF38 		adc	r8, r8, #-1
 13145              	.LVL1030:
 100:src/int.c     **** #else
 13146              		.loc 1 100 2 is_stmt 1 view .LVU3716
 100:src/int.c     **** #else
 13147              		.loc 1 100 2 is_stmt 0 view .LVU3717
 13148              	.LBE1905:
 13149              	.LBE1904:
1315:src/int.c     **** 	set_carry(carry);
 13150              		.loc 1 1315 2 is_stmt 1 view .LVU3718
 13151 0086 2046     		mov	r0, r4
 13152              	.LVL1031:
1315:src/int.c     **** 	set_carry(carry);
 13153              		.loc 1 1315 2 is_stmt 0 view .LVU3719
 13154 0088 4146     		mov	r1, r8
 13155 008a FFF7FEFF 		bl	setX_int
 13156              	.LVL1032:
1316:src/int.c     **** #endif
 13157              		.loc 1 1316 2 is_stmt 1 view .LVU3720
 13158              	.LBB1907:
  54:src/int.c     **** #ifndef TINY_BUILD
 13159              		.loc 1 54 6 view .LVU3721
 13160              	.LBB1901:
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13161              		.loc 1 56 2 view .LVU3722
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13162              		.loc 1 56 5 is_stmt 0 view .LVU3723
 13163 008e 002E     		cmp	r6, #0
 13164 0090 E5D1     		bne	.L814
 13165              	.LVL1033:
 13166              	.L804:
  59:src/int.c     **** #endif
 13167              		.loc 1 59 3 is_stmt 1 view .LVU3724
 13168              	.LBE1901:
 13169              	.LBE1907:
1318:src/int.c     **** 
 13170              		.loc 1 1318 1 is_stmt 0 view .LVU3725
 13171 0092 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 13172              		.cfi_remember_state
 13173              		.cfi_restore 14
 13174              		.cfi_restore 9
 13175              		.cfi_restore 8
 13176              		.cfi_restore 7
 13177              		.cfi_restore 6
 13178              		.cfi_restore 5
 13179              		.cfi_restore 4
 13180              		.cfi_restore 3
 13181              		.cfi_def_cfa_offset 0
 13182              	.LVL1034:
 13183              	.LBB1908:
 13184              	.LBB1902:
  59:src/int.c     **** #endif
 13185              		.loc 1 59 3 view .LVU3726
ARM GAS  /tmp/ccjGZi8K.s 			page 320


 13186 0096 5221     		movs	r1, #82
 13187 0098 6A20     		movs	r0, #106
 13188 009a FFF7FEBF 		b	cmdflag
 13189              	.LVL1035:
 13190              	.L799:
 13191              		.cfi_restore_state
  59:src/int.c     **** #endif
 13192              		.loc 1 59 3 view .LVU3727
 13193              	.LBE1902:
 13194              	.LBE1908:
1300:src/int.c     **** 		f = &intLSR;
 13195              		.loc 1 1300 3 is_stmt 1 view .LVU3728
 13196              	.LBB1909:
 13197              	.LBI1877:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 13198              		.loc 1 110 22 view .LVU3729
 13199              	.LBB1888:
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 13200              		.loc 1 111 2 view .LVU3730
 13201              	.LBB1885:
 13202              	.LBI1879:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 13203              		.loc 1 43 14 view .LVU3731
 13204              	.LBB1882:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13205              		.loc 1 44 2 view .LVU3732
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13206              		.loc 1 45 2 view .LVU3733
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13207              		.loc 1 45 26 is_stmt 0 view .LVU3734
 13208 009e 501E     		subs	r0, r2, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13209              		.loc 1 45 5 view .LVU3735
 13210 00a0 3E28     		cmp	r0, #62
 13211 00a2 0DD8     		bhi	.L808
 13212 00a4 0123     		movs	r3, #1
 13213 00a6 C0F12004 		rsb	r4, r0, #32
 13214 00aa A2F12101 		sub	r1, r2, #33
 13215 00ae 03FA01F1 		lsl	r1, r3, r1
 13216 00b2 23FA04F4 		lsr	r4, r3, r4
 13217              	.LBE1882:
 13218              	.LBE1885:
 13219              	.LBE1888:
 13220              	.LBE1909:
1301:src/int.c     **** 	} else {
 13221              		.loc 1 1301 5 view .LVU3736
 13222 00b6 0B4F     		ldr	r7, .L815+8
 13223 00b8 2143     		orrs	r1, r1, r4
 13224 00ba 03FA00F0 		lsl	r0, r3, r0
 13225              	.LVL1036:
 13226              	.LBB1910:
 13227              	.LBB1889:
 112:src/int.c     **** 	return bit;
 13228              		.loc 1 112 2 is_stmt 1 view .LVU3737
 113:src/int.c     **** }
 13229              		.loc 1 113 2 view .LVU3738
 113:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 321


 13230              		.loc 1 113 2 is_stmt 0 view .LVU3739
 13231              	.LBE1889:
 13232              	.LBE1910:
1301:src/int.c     **** 	} else {
 13233              		.loc 1 1301 3 is_stmt 1 view .LVU3740
1306:src/int.c     **** 		x = mask_value(-1);
 13234              		.loc 1 1306 2 view .LVU3741
 13235              	.LBB1911:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 13236              		.loc 1 43 14 view .LVU3742
 13237              	.LBB1895:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13238              		.loc 1 44 2 view .LVU3743
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13239              		.loc 1 45 2 view .LVU3744
 13240 00be B9E7     		b	.L801
 13241              	.LVL1037:
 13242              	.L808:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13243              		.loc 1 45 2 is_stmt 0 view .LVU3745
 13244              	.LBE1895:
 13245              	.LBE1911:
1301:src/int.c     **** 	} else {
 13246              		.loc 1 1301 5 view .LVU3746
 13247 00c0 084F     		ldr	r7, .L815+8
 13248              	.LBB1912:
 13249              	.LBB1890:
 13250              	.LBB1886:
 13251              	.LBB1883:
 13252 00c2 0020     		movs	r0, #0
 13253 00c4 4FF00041 		mov	r1, #-2147483648
 13254              	.LVL1038:
 13255              	.L800:
1301:src/int.c     **** 	} else {
 13256              		.loc 1 1301 5 view .LVU3747
 13257              	.LBE1883:
 13258              	.LBE1886:
 13259              	.LBE1890:
 13260              	.LBE1912:
 13261              	.LBB1913:
 13262              	.LBB1896:
  46:src/int.c     **** 	return il;
 13263              		.loc 1 46 3 is_stmt 1 view .LVU3748
 13264              	.LBE1896:
 13265              	.LBE1913:
1306:src/int.c     **** 		x = mask_value(-1);
 13266              		.loc 1 1306 5 is_stmt 0 view .LVU3749
 13267 00c8 3F2D     		cmp	r5, #63
 13268 00ca B5D9     		bls	.L806
 13269              	.LBB1914:
 13270              	.LBB1906:
  98:src/int.c     **** 	mask = (1LL << ws) - 1;
 13271              		.loc 1 98 10 view .LVU3750
 13272 00cc 4FF0FF34 		mov	r4, #-1
 13273 00d0 A046     		mov	r8, r4
 13274 00d2 BFE7     		b	.L802
 13275              	.LVL1039:
ARM GAS  /tmp/ccjGZi8K.s 			page 322


 13276              	.L813:
  98:src/int.c     **** 	mask = (1LL << ws) - 1;
 13277              		.loc 1 98 10 view .LVU3751
 13278              	.LBE1906:
 13279              	.LBE1914:
1310:src/int.c     **** 			x |= mask;
 13280              		.loc 1 1310 3 view .LVU3752
 13281 00d4 0024     		movs	r4, #0
 13282 00d6 A046     		mov	r8, r4
 13283 00d8 BCE7     		b	.L802
 13284              	.L816:
 13285 00da 00BF     		.align	2
 13286              	.L815:
 13287 00dc 00000000 		.word	main_ram
 13288 00e0 00000000 		.word	intLSL
 13289 00e4 00000000 		.word	intLSR
 13290              		.cfi_endproc
 13291              	.LFE66:
 13293              		.section	.text.intbits,"ax",%progbits
 13294              		.align	1
 13295              		.p2align 2,,3
 13296              		.global	intbits
 13297              		.syntax unified
 13298              		.thumb
 13299              		.thumb_func
 13300              		.fpu fpv4-sp-d16
 13302              	intbits:
 13303              	.LVL1040:
 13304              	.LFB67:
1322:src/int.c     **** #ifndef TINY_BUILD
 13305              		.loc 1 1322 46 is_stmt 1 view -0
 13306              		.cfi_startproc
 13307              		@ args = 0, pretend = 0, frame = 0
 13308              		@ frame_needed = 0, uses_anonymous_args = 0
1324:src/int.c     **** 
 13309              		.loc 1 1324 2 view .LVU3754
1326:src/int.c     **** 		return;
 13310              		.loc 1 1326 2 view .LVU3755
 13311              	.LBB1921:
 13312              	.LBI1921:
  24:src/int.c     **** 	if (! is_intmode())
 13313              		.loc 1 24 12 view .LVU3756
 13314              	.LBB1922:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13315              		.loc 1 25 2 view .LVU3757
 13316              	.LBE1922:
 13317              	.LBE1921:
1322:src/int.c     **** #ifndef TINY_BUILD
 13318              		.loc 1 1322 46 is_stmt 0 view .LVU3758
 13319 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 13320              		.cfi_def_cfa_offset 24
 13321              		.cfi_offset 4, -24
 13322              		.cfi_offset 5, -20
 13323              		.cfi_offset 6, -16
 13324              		.cfi_offset 7, -12
 13325              		.cfi_offset 8, -8
 13326              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjGZi8K.s 			page 323


 13327              	.LBB1928:
 13328              	.LBB1925:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13329              		.loc 1 25 8 view .LVU3759
 13330 0004 384E     		ldr	r6, .L842
 13331 0006 3368     		ldr	r3, [r6]
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13332              		.loc 1 25 6 view .LVU3760
 13333 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13334              		.loc 1 25 5 view .LVU3761
 13335 000c D207     		lsls	r2, r2, #31
 13336              	.LBE1925:
 13337              	.LBE1928:
1322:src/int.c     **** #ifndef TINY_BUILD
 13338              		.loc 1 1322 46 view .LVU3762
 13339 000e 0546     		mov	r5, r0
 13340 0010 0C46     		mov	r4, r1
 13341              	.LBB1929:
 13342              	.LBB1926:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13343              		.loc 1 25 5 view .LVU3763
 13344 0012 38D5     		bpl	.L840
 13345              	.LVL1041:
 13346              	.L818:
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13347              		.loc 1 25 5 view .LVU3764
 13348              	.LBE1926:
 13349              	.LBE1929:
1329:src/int.c     **** 	x = getX_int();
 13350              		.loc 1 1329 2 is_stmt 1 view .LVU3765
 13351              	.LBB1930:
 13352              	.LBI1930:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 13353              		.loc 1 43 14 view .LVU3766
 13354              	.LBB1931:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13355              		.loc 1 44 2 view .LVU3767
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13356              		.loc 1 44 26 is_stmt 0 view .LVU3768
 13357 0014 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13358              		.loc 1 44 15 view .LVU3769
 13359 0018 03F03F03 		and	r3, r3, #63
 13360              	.LVL1042:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13361              		.loc 1 45 2 is_stmt 1 view .LVU3770
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13362              		.loc 1 45 26 is_stmt 0 view .LVU3771
 13363 001c 5A1E     		subs	r2, r3, #1
  46:src/int.c     **** 	return il;
 13364              		.loc 1 46 10 view .LVU3772
 13365 001e 3F2A     		cmp	r2, #63
 13366 0020 28BF     		it	cs
 13367 0022 4023     		movcs	r3, #64
 13368              	.LVL1043:
  46:src/int.c     **** 	return il;
ARM GAS  /tmp/ccjGZi8K.s 			page 324


 13369              		.loc 1 46 10 view .LVU3773
 13370              	.LBE1931:
 13371              	.LBE1930:
1329:src/int.c     **** 	x = getX_int();
 13372              		.loc 1 1329 29 view .LVU3774
 13373 0024 9D42     		cmp	r5, r3
 13374 0026 17D2     		bcs	.L821
1329:src/int.c     **** 	x = getX_int();
 13375              		.loc 1 1329 29 discriminator 1 view .LVU3775
 13376 0028 0123     		movs	r3, #1
 13377 002a A5F12001 		sub	r1, r5, #32
 13378 002e C5F12002 		rsb	r2, r5, #32
 13379 0032 03FA01F7 		lsl	r7, r3, r1
 13380 0036 23FA02F2 		lsr	r2, r3, r2
 13381 003a 03FA05F6 		lsl	r6, r3, r5
 13382 003e 1743     		orrs	r7, r7, r2
 13383              	.LVL1044:
1330:src/int.c     **** 
 13384              		.loc 1 1330 2 is_stmt 1 discriminator 1 view .LVU3776
1330:src/int.c     **** 
 13385              		.loc 1 1330 6 is_stmt 0 discriminator 1 view .LVU3777
 13386 0040 FFF7FEFF 		bl	getX_int
 13387              	.LVL1045:
 13388 0044 643C     		subs	r4, r4, #100
 13389 0046 8846     		mov	r8, r1
 13390 0048 0546     		mov	r5, r0
 13391              	.LVL1046:
1332:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
 13392              		.loc 1 1332 2 is_stmt 1 discriminator 1 view .LVU3778
 13393 004a 042C     		cmp	r4, #4
 13394 004c 1FD8     		bhi	.L817
 13395 004e DFE804F0 		tbb	[pc, r4]
 13396              	.L824:
 13397 0052 47       		.byte	(.L828-.L824)/2
 13398 0053 42       		.byte	(.L827-.L824)/2
 13399 0054 0F       		.byte	(.L826-.L824)/2
 13400 0055 39       		.byte	(.L825-.L824)/2
 13401 0056 2D       		.byte	(.L823-.L824)/2
 13402              	.LVL1047:
 13403 0057 00       		.p2align 1
 13404              	.L821:
1330:src/int.c     **** 
 13405              		.loc 1 1330 2 view .LVU3779
1330:src/int.c     **** 
 13406              		.loc 1 1330 6 is_stmt 0 view .LVU3780
 13407 0058 FFF7FEFF 		bl	getX_int
 13408              	.LVL1048:
 13409 005c 643C     		subs	r4, r4, #100
 13410 005e 8846     		mov	r8, r1
 13411 0060 0546     		mov	r5, r0
 13412              	.LVL1049:
1332:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
 13413              		.loc 1 1332 2 is_stmt 1 view .LVU3781
 13414 0062 042C     		cmp	r4, #4
 13415 0064 13D8     		bhi	.L817
 13416 0066 DFE804F0 		tbb	[pc, r4]
 13417              	.L835:
ARM GAS  /tmp/ccjGZi8K.s 			page 325


 13418 006a 06       		.byte	(.L832-.L835)/2
 13419 006b 06       		.byte	(.L832-.L835)/2
 13420 006c 06       		.byte	(.L832-.L835)/2
 13421 006d 16       		.byte	(.L837-.L835)/2
 13422 006e 1F       		.byte	(.L838-.L835)/2
 13423              	.LVL1050:
 13424 006f 00       		.p2align 1
 13425              	.L826:
1332:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
 13426              		.loc 1 1332 2 is_stmt 0 view .LVU3782
 13427 0070 7540     		eors	r5, r5, r6
 13428 0072 81EA0708 		eor	r8, r1, r7
 13429              	.LVL1051:
 13430              	.L832:
1335:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
 13431              		.loc 1 1335 16 is_stmt 1 view .LVU3783
1335:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
 13432              		.loc 1 1335 25 view .LVU3784
 13433 0076 FFF7FEFF 		bl	setlastX
 13434              	.LVL1052:
1335:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
 13435              		.loc 1 1335 38 view .LVU3785
1342:src/int.c     **** #endif
 13436              		.loc 1 1342 2 view .LVU3786
 13437 007a 2846     		mov	r0, r5
 13438 007c 4146     		mov	r1, r8
1344:src/int.c     **** 
 13439              		.loc 1 1344 1 is_stmt 0 view .LVU3787
 13440 007e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 13441              		.cfi_remember_state
 13442              		.cfi_restore 14
 13443              		.cfi_restore 8
 13444              		.cfi_restore 7
 13445              		.cfi_restore 6
 13446              		.cfi_restore 5
 13447              		.cfi_restore 4
 13448              		.cfi_def_cfa_offset 0
 13449              	.LVL1053:
1342:src/int.c     **** #endif
 13450              		.loc 1 1342 2 view .LVU3788
 13451 0082 FFF7FEBF 		b	setX_int
 13452              	.LVL1054:
 13453              	.L840:
 13454              		.cfi_restore_state
 13455              	.LBB1932:
 13456              	.LBB1927:
 13457              	.LBB1923:
 13458              	.LBI1923:
  24:src/int.c     **** 	if (! is_intmode())
 13459              		.loc 1 24 12 is_stmt 1 view .LVU3789
 13460              	.LBB1924:
  26:src/int.c     **** 	return 0;
 13461              		.loc 1 26 3 view .LVU3790
  26:src/int.c     **** 	return 0;
 13462              		.loc 1 26 10 is_stmt 0 view .LVU3791
 13463 0086 0D20     		movs	r0, #13
 13464              	.LVL1055:
ARM GAS  /tmp/ccjGZi8K.s 			page 326


  26:src/int.c     **** 	return 0;
 13465              		.loc 1 26 10 view .LVU3792
 13466 0088 FFF7FEFF 		bl	report_err
 13467              	.LVL1056:
  26:src/int.c     **** 	return 0;
 13468              		.loc 1 26 10 view .LVU3793
 13469              	.LBE1924:
 13470              	.LBE1923:
 13471              	.LBE1927:
 13472              	.LBE1932:
1326:src/int.c     **** 		return;
 13473              		.loc 1 1326 5 view .LVU3794
 13474 008c 08B1     		cbz	r0, .L841
 13475              	.LVL1057:
 13476              	.L817:
1344:src/int.c     **** 
 13477              		.loc 1 1344 1 view .LVU3795
 13478 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 13479              	.LVL1058:
 13480              	.L841:
1344:src/int.c     **** 
 13481              		.loc 1 1344 1 view .LVU3796
 13482 0092 3368     		ldr	r3, [r6]
 13483 0094 BEE7     		b	.L818
 13484              	.LVL1059:
 13485              	.L837:
1330:src/int.c     **** 
 13486              		.loc 1 1330 6 view .LVU3797
 13487 0096 0020     		movs	r0, #0
 13488              	.LVL1060:
1336:src/int.c     **** 	case RARG_BC:	fin_tst((m != 0 && (x&m) != 0)?0:1);	break;
 13489              		.loc 1 1336 16 is_stmt 1 view .LVU3798
 13490              	.L834:
1337:src/int.c     **** 	default:
 13491              		.loc 1 1337 16 is_stmt 0 discriminator 6 view .LVU3799
 13492 0098 FFF7FEFF 		bl	fin_tst
 13493              	.LVL1061:
1337:src/int.c     **** 	default:
 13494              		.loc 1 1337 53 is_stmt 1 discriminator 6 view .LVU3800
1342:src/int.c     **** #endif
 13495              		.loc 1 1342 2 discriminator 6 view .LVU3801
 13496 009c 2846     		mov	r0, r5
 13497 009e 4146     		mov	r1, r8
1344:src/int.c     **** 
 13498              		.loc 1 1344 1 is_stmt 0 discriminator 6 view .LVU3802
 13499 00a0 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 13500              		.cfi_remember_state
 13501              		.cfi_restore 14
 13502              		.cfi_restore 8
 13503              		.cfi_restore 7
 13504              		.cfi_restore 6
 13505              		.cfi_restore 5
 13506              		.cfi_restore 4
 13507              		.cfi_def_cfa_offset 0
 13508              	.LVL1062:
1342:src/int.c     **** #endif
 13509              		.loc 1 1342 2 discriminator 6 view .LVU3803
ARM GAS  /tmp/ccjGZi8K.s 			page 327


 13510 00a4 FFF7FEBF 		b	setX_int
 13511              	.LVL1063:
 13512              	.L838:
 13513              		.cfi_restore_state
1330:src/int.c     **** 
 13514              		.loc 1 1330 6 view .LVU3804
 13515 00a8 0120     		movs	r0, #1
 13516 00aa F5E7     		b	.L834
 13517              	.LVL1064:
 13518              	.L823:
1337:src/int.c     **** 	default:
 13519              		.loc 1 1337 16 is_stmt 1 view .LVU3805
 13520 00ac 56EA0703 		orrs	r3, r6, r7
 13521 00b0 FAD0     		beq	.L838
1337:src/int.c     **** 	default:
 13522              		.loc 1 1337 37 is_stmt 0 discriminator 2 view .LVU3806
 13523 00b2 06EA0002 		and	r2, r6, r0
 13524 00b6 07EA0103 		and	r3, r7, r1
1337:src/int.c     **** 	default:
 13525              		.loc 1 1337 16 discriminator 2 view .LVU3807
 13526 00ba 1343     		orrs	r3, r2, r3
 13527 00bc 0CBF     		ite	eq
 13528 00be 0120     		moveq	r0, #1
 13529              	.LVL1065:
1337:src/int.c     **** 	default:
 13530              		.loc 1 1337 16 discriminator 2 view .LVU3808
 13531 00c0 0020     		movne	r0, #0
 13532 00c2 E9E7     		b	.L834
 13533              	.LVL1066:
 13534              	.L825:
1337:src/int.c     **** 	default:
 13535              		.loc 1 1337 16 discriminator 2 view .LVU3809
 13536 00c4 06EA0002 		and	r2, r6, r0
 13537 00c8 07EA0103 		and	r3, r7, r1
 13538 00cc 1343     		orrs	r3, r2, r3
 13539 00ce 14BF     		ite	ne
 13540 00d0 0120     		movne	r0, #1
 13541              	.LVL1067:
1337:src/int.c     **** 	default:
 13542              		.loc 1 1337 16 discriminator 2 view .LVU3810
 13543 00d2 0020     		moveq	r0, #0
 13544 00d4 E0E7     		b	.L834
 13545              	.LVL1068:
 13546              	.L827:
1337:src/int.c     **** 	default:
 13547              		.loc 1 1337 16 discriminator 2 view .LVU3811
 13548 00d6 20EA0605 		bic	r5, r0, r6
 13549 00da 21EA0708 		bic	r8, r1, r7
1334:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
 13550              		.loc 1 1334 16 is_stmt 1 view .LVU3812
 13551              	.LVL1069:
1334:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
 13552              		.loc 1 1334 25 view .LVU3813
 13553 00de CAE7     		b	.L832
 13554              	.LVL1070:
 13555              	.L828:
1334:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
ARM GAS  /tmp/ccjGZi8K.s 			page 328


 13556              		.loc 1 1334 25 is_stmt 0 view .LVU3814
 13557 00e0 3543     		orrs	r5, r5, r6
 13558 00e2 41EA0708 		orr	r8, r1, r7
1333:src/int.c     **** 	case RARG_CB:	x &= ~m;	setlastX();		break;
 13559              		.loc 1 1333 16 is_stmt 1 view .LVU3815
 13560              	.LVL1071:
1333:src/int.c     **** 	case RARG_CB:	x &= ~m;	setlastX();		break;
 13561              		.loc 1 1333 25 view .LVU3816
 13562 00e6 C6E7     		b	.L832
 13563              	.L843:
 13564              		.align	2
 13565              	.L842:
 13566 00e8 00000000 		.word	main_ram
 13567              		.cfi_endproc
 13568              	.LFE67:
 13570              		.section	.text.intFib,"ax",%progbits
 13571              		.align	1
 13572              		.p2align 2,,3
 13573              		.global	intFib
 13574              		.syntax unified
 13575              		.thumb
 13576              		.thumb_func
 13577              		.fpu fpv4-sp-d16
 13579              	intFib:
 13580              	.LVL1072:
 13581              	.LFB68:
1346:src/int.c     **** #ifndef TINY_BUILD
 13582              		.loc 1 1346 39 view -0
 13583              		.cfi_startproc
 13584              		@ args = 0, pretend = 0, frame = 32
 13585              		@ frame_needed = 0, uses_anonymous_args = 0
1348:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 13586              		.loc 1 1348 2 view .LVU3818
1349:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 13587              		.loc 1 1349 2 view .LVU3819
1346:src/int.c     **** #ifndef TINY_BUILD
 13588              		.loc 1 1346 39 is_stmt 0 view .LVU3820
 13589 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 13590              		.cfi_def_cfa_offset 36
 13591              		.cfi_offset 4, -36
 13592              		.cfi_offset 5, -32
 13593              		.cfi_offset 6, -28
 13594              		.cfi_offset 7, -24
 13595              		.cfi_offset 8, -20
 13596              		.cfi_offset 9, -16
 13597              		.cfi_offset 10, -12
 13598              		.cfi_offset 11, -8
 13599              		.cfi_offset 14, -4
 13600 0004 89B0     		sub	sp, sp, #36
 13601              		.cfi_def_cfa_offset 72
1349:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 13602              		.loc 1 1349 29 view .LVU3821
 13603 0006 07AA     		add	r2, sp, #28
 13604 0008 FFF7FEFF 		bl	extract_value
 13605              	.LVL1073:
1350:src/int.c     **** 	unsigned long long int a0, a1;
 13606              		.loc 1 1350 2 is_stmt 1 view .LVU3822
ARM GAS  /tmp/ccjGZi8K.s 			page 329


 13607              	.LBB1933:
 13608              	.LBI1933:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 13609              		.loc 1 39 23 view .LVU3823
 13610              	.LBB1934:
  40:src/int.c     **** }
 13611              		.loc 1 40 2 view .LVU3824
  40:src/int.c     **** }
 13612              		.loc 1 40 2 is_stmt 0 view .LVU3825
 13613              	.LBE1934:
 13614              	.LBE1933:
1351:src/int.c     **** 	unsigned int n, i;
 13615              		.loc 1 1351 2 is_stmt 1 view .LVU3826
1352:src/int.c     **** 	long long int tbm;
 13616              		.loc 1 1352 2 view .LVU3827
1353:src/int.c     **** 
 13617              		.loc 1 1353 2 view .LVU3828
1360:src/int.c     **** 		set_overflow(1);
 13618              		.loc 1 1360 2 view .LVU3829
1360:src/int.c     **** 		set_overflow(1);
 13619              		.loc 1 1360 5 is_stmt 0 view .LVU3830
 13620 000c 0029     		cmp	r1, #0
 13621 000e 08BF     		it	eq
 13622 0010 6428     		cmpeq	r0, #100
 13623 0012 80F08680 		bcs	.L865
 13624              	.LBB1937:
 13625              	.LBB1935:
  40:src/int.c     **** }
 13626              		.loc 1 40 39 view .LVU3831
 13627 0016 484E     		ldr	r6, .L867
 13628              	.LVL1074:
  40:src/int.c     **** }
 13629              		.loc 1 40 39 view .LVU3832
 13630 0018 3368     		ldr	r3, [r6]
 13631 001a 0446     		mov	r4, r0
 13632 001c 93F8E897 		ldrb	r9, [r3, #2024]	@ zero_extendqisi2
 13633 0020 0D46     		mov	r5, r1
 13634              	.LBE1935:
 13635              	.LBE1937:
 13636              	.LBB1938:
 13637              	.LBB1939:
  72:src/int.c     **** #endif
 13638              		.loc 1 72 3 view .LVU3833
 13639 0022 6920     		movs	r0, #105
 13640 0024 5221     		movs	r1, #82
 13641 0026 FFF7FEFF 		bl	cmdflag
 13642              	.LVL1075:
  72:src/int.c     **** #endif
 13643              		.loc 1 72 3 view .LVU3834
 13644              	.LBE1939:
 13645              	.LBE1938:
1366:src/int.c     **** 		return build_value(n, 0);
 13646              		.loc 1 1366 5 view .LVU3835
 13647 002a 14F0FE03 		ands	r3, r4, #254
 13648              	.LBB1941:
 13649              	.LBB1936:
  40:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 330


 13650              		.loc 1 40 39 view .LVU3836
 13651 002e C9F38109 		ubfx	r9, r9, #2, #2
 13652              	.LBE1936:
 13653              	.LBE1941:
1364:src/int.c     **** 	n = v & 0xff;
 13654              		.loc 1 1364 2 is_stmt 1 view .LVU3837
 13655              	.LVL1076:
 13656              	.LBB1942:
 13657              	.LBI1938:
  67:src/int.c     **** #ifndef TINY_BUILD
 13658              		.loc 1 67 6 view .LVU3838
 13659              	.LBB1940:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13660              		.loc 1 69 2 view .LVU3839
  72:src/int.c     **** #endif
 13661              		.loc 1 72 3 view .LVU3840
  72:src/int.c     **** #endif
 13662              		.loc 1 72 3 is_stmt 0 view .LVU3841
 13663              	.LBE1940:
 13664              	.LBE1942:
1365:src/int.c     **** 	if (n <= 1)
 13665              		.loc 1 1365 2 is_stmt 1 view .LVU3842
1365:src/int.c     **** 	if (n <= 1)
 13666              		.loc 1 1365 8 is_stmt 0 view .LVU3843
 13667 0032 A046     		mov	r8, r4
 13668              	.LVL1077:
1366:src/int.c     **** 		return build_value(n, 0);
 13669              		.loc 1 1366 2 is_stmt 1 view .LVU3844
1366:src/int.c     **** 		return build_value(n, 0);
 13670              		.loc 1 1366 5 is_stmt 0 view .LVU3845
 13671 0034 56D0     		beq	.L866
1372:src/int.c     **** 
 13672              		.loc 1 1372 2 is_stmt 1 view .LVU3846
1372:src/int.c     **** 
 13673              		.loc 1 1372 7 is_stmt 0 view .LVU3847
 13674 0036 079B     		ldr	r3, [sp, #28]
 13675 0038 0593     		str	r3, [sp, #20]
1372:src/int.c     **** 
 13676              		.loc 1 1372 28 view .LVU3848
 13677 003a 1BB1     		cbz	r3, .L848
1372:src/int.c     **** 
 13678              		.loc 1 1372 28 discriminator 1 view .LVU3849
 13679 003c E443     		mvns	r4, r4
 13680              	.LVL1078:
1372:src/int.c     **** 
 13681              		.loc 1 1372 28 discriminator 1 view .LVU3850
 13682 003e 04F00103 		and	r3, r4, #1
 13683 0042 0593     		str	r3, [sp, #20]
 13684              	.L848:
 13685              	.LVL1079:
1375:src/int.c     **** 	if (mode == MODE_UNSIGNED)
 13686              		.loc 1 1375 2 is_stmt 1 discriminator 6 view .LVU3851
 13687              	.LBB1943:
 13688              	.LBI1943:
 110:src/int.c     **** 	const unsigned int ws = word_size();
 13689              		.loc 1 110 22 discriminator 6 view .LVU3852
 13690              	.LBB1944:
ARM GAS  /tmp/ccjGZi8K.s 			page 331


 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 13691              		.loc 1 111 2 discriminator 6 view .LVU3853
 13692              	.LBB1945:
 13693              	.LBI1945:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 13694              		.loc 1 43 14 discriminator 6 view .LVU3854
 13695              	.LBB1946:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13696              		.loc 1 44 2 discriminator 6 view .LVU3855
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13697              		.loc 1 45 2 discriminator 6 view .LVU3856
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13698              		.loc 1 44 26 is_stmt 0 discriminator 6 view .LVU3857
 13699 0044 3368     		ldr	r3, [r6]
 13700 0046 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 13701              	.LVL1080:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13702              		.loc 1 44 15 discriminator 6 view .LVU3858
 13703 004a 06F03F06 		and	r6, r6, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13704              		.loc 1 45 26 discriminator 6 view .LVU3859
 13705 004e 731E     		subs	r3, r6, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13706              		.loc 1 45 5 discriminator 6 view .LVU3860
 13707 0050 3E2B     		cmp	r3, #62
 13708 0052 6DD8     		bhi	.L856
 13709 0054 0127     		movs	r7, #1
 13710 0056 213E     		subs	r6, r6, #33
 13711 0058 C3F12002 		rsb	r2, r3, #32
 13712 005c 07FA06F6 		lsl	r6, r7, r6
 13713 0060 27FA02F2 		lsr	r2, r7, r2
 13714 0064 1643     		orrs	r6, r6, r2
 13715 0066 9F40     		lsls	r7, r7, r3
 13716              	.L849:
 13717              	.LVL1081:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13718              		.loc 1 45 5 discriminator 6 view .LVU3861
 13719              	.LBE1946:
 13720              	.LBE1945:
 112:src/int.c     **** 	return bit;
 13721              		.loc 1 112 2 is_stmt 1 view .LVU3862
 113:src/int.c     **** }
 13722              		.loc 1 113 2 view .LVU3863
 113:src/int.c     **** }
 13723              		.loc 1 113 2 is_stmt 0 view .LVU3864
 13724              	.LBE1944:
 13725              	.LBE1943:
1376:src/int.c     **** 		tbm <<= 1;
 13726              		.loc 1 1376 2 is_stmt 1 view .LVU3865
1376:src/int.c     **** 		tbm <<= 1;
 13727              		.loc 1 1376 5 is_stmt 0 view .LVU3866
 13728 0068 B9F1020F 		cmp	r9, #2
 13729 006c 01D1     		bne	.L850
1377:src/int.c     **** 
 13730              		.loc 1 1377 3 is_stmt 1 view .LVU3867
1377:src/int.c     **** 
 13731              		.loc 1 1377 7 is_stmt 0 view .LVU3868
ARM GAS  /tmp/ccjGZi8K.s 			page 332


 13732 006e FF19     		adds	r7, r7, r7
 13733 0070 7641     		adcs	r6, r6, r6
 13734              	.L850:
 13735              	.LVL1082:
1381:src/int.c     **** 	a1 = 1;
 13736              		.loc 1 1381 2 is_stmt 1 view .LVU3869
1382:src/int.c     **** 	for (i=1; i<n; i++) {
 13737              		.loc 1 1382 2 view .LVU3870
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13738              		.loc 1 1383 2 view .LVU3871
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13739              		.loc 1 1383 12 view .LVU3872
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13740              		.loc 1 1383 8 is_stmt 0 view .LVU3873
 13741 0072 4FF00109 		mov	r9, #1
1381:src/int.c     **** 	a1 = 1;
 13742              		.loc 1 1381 5 view .LVU3874
 13743 0076 CDF80C80 		str	r8, [sp, #12]
1382:src/int.c     **** 	for (i=1; i<n; i++) {
 13744              		.loc 1 1382 5 view .LVU3875
 13745 007a 4FF0010A 		mov	r10, #1
1381:src/int.c     **** 	a1 = 1;
 13746              		.loc 1 1381 5 view .LVU3876
 13747 007e C846     		mov	r8, r9
 13748              	.LVL1083:
1382:src/int.c     **** 	for (i=1; i<n; i++) {
 13749              		.loc 1 1382 5 view .LVU3877
 13750 0080 4FF0000B 		mov	fp, #0
1381:src/int.c     **** 	a1 = 1;
 13751              		.loc 1 1381 5 view .LVU3878
 13752 0084 0020     		movs	r0, #0
 13753 0086 0021     		movs	r1, #0
 13754 0088 B946     		mov	r9, r7
 13755 008a 0496     		str	r6, [sp, #16]
 13756              	.LVL1084:
 13757              	.L855:
 13758              	.LBB1950:
1384:src/int.c     **** 		if ((anew & tbm) || anew < a1)
 13759              		.loc 1 1384 3 is_stmt 1 view .LVU3879
1386:src/int.c     **** 		a0 = a1;
 13760              		.loc 1 1386 4 view .LVU3880
 13761              	.LBB1951:
 13762              	.LBI1951:
  67:src/int.c     **** #ifndef TINY_BUILD
 13763              		.loc 1 67 6 view .LVU3881
 13764              	.LBB1952:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13765              		.loc 1 69 2 view .LVU3882
 13766 008c 10EB0A04 		adds	r4, r0, r10
 13767 0090 51EB0B05 		adcs	r5, r1, fp
 13768              	.LBE1952:
 13769              	.LBE1951:
1385:src/int.c     **** 			set_overflow(1);
 13770              		.loc 1 1385 13 is_stmt 0 view .LVU3883
 13771 0094 0499     		ldr	r1, [sp, #16]
 13772 0096 09EA0406 		and	r6, r9, r4
 13773 009a 01EA0507 		and	r7, r1, r5
ARM GAS  /tmp/ccjGZi8K.s 			page 333


 13774 009e 4FF00002 		mov	r2, #0
 13775 00a2 4FF00003 		mov	r3, #0
 13776 00a6 24BF     		itt	cs
 13777 00a8 0122     		movcs	r2, #1
 13778 00aa 0023     		movcs	r3, #0
1385:src/int.c     **** 			set_overflow(1);
 13779              		.loc 1 1385 6 view .LVU3884
 13780 00ac 56EA070C 		orrs	ip, r6, r7
 13781 00b0 5046     		mov	r0, r10
 13782              	.LVL1085:
1385:src/int.c     **** 			set_overflow(1);
 13783              		.loc 1 1385 6 view .LVU3885
 13784 00b2 5946     		mov	r1, fp
 13785              	.LBE1950:
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13786              		.loc 1 1383 18 view .LVU3886
 13787 00b4 08F10108 		add	r8, r8, #1
 13788              	.LVL1086:
 13789              	.LBB1955:
1384:src/int.c     **** 		if ((anew & tbm) || anew < a1)
 13790              		.loc 1 1384 32 view .LVU3887
 13791 00b8 A246     		mov	r10, r4
 13792              	.LVL1087:
1384:src/int.c     **** 		if ((anew & tbm) || anew < a1)
 13793              		.loc 1 1384 32 view .LVU3888
 13794 00ba AB46     		mov	fp, r5
 13795              	.LVL1088:
1385:src/int.c     **** 			set_overflow(1);
 13796              		.loc 1 1385 3 is_stmt 1 view .LVU3889
1385:src/int.c     **** 			set_overflow(1);
 13797              		.loc 1 1385 6 is_stmt 0 view .LVU3890
 13798 00bc 01D1     		bne	.L853
1385:src/int.c     **** 			set_overflow(1);
 13799              		.loc 1 1385 20 discriminator 1 view .LVU3891
 13800 00be 1343     		orrs	r3, r2, r3
 13801 00c0 05D0     		beq	.L854
 13802              	.L853:
 13803 00c2 CDE90001 		strd	r0, [sp]
 13804              	.LBB1954:
 13805              	.LBB1953:
 13806 00c6 FFF7FEFF 		bl	set_overflow.part.0
 13807              	.LVL1089:
 13808 00ca DDE90001 		ldrd	r0, [sp]
 13809              	.L854:
 13810              	.LVL1090:
1385:src/int.c     **** 			set_overflow(1);
 13811              		.loc 1 1385 20 discriminator 1 view .LVU3892
 13812              	.LBE1953:
 13813              	.LBE1954:
1387:src/int.c     **** 		a1 = anew;
 13814              		.loc 1 1387 3 is_stmt 1 discriminator 2 view .LVU3893
1388:src/int.c     **** 	}
 13815              		.loc 1 1388 3 discriminator 2 view .LVU3894
1388:src/int.c     **** 	}
 13816              		.loc 1 1388 3 is_stmt 0 discriminator 2 view .LVU3895
 13817              	.LBE1955:
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
ARM GAS  /tmp/ccjGZi8K.s 			page 334


 13818              		.loc 1 1383 17 is_stmt 1 discriminator 2 view .LVU3896
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13819              		.loc 1 1383 12 discriminator 2 view .LVU3897
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13820              		.loc 1 1383 2 is_stmt 0 discriminator 2 view .LVU3898
 13821 00ce 039B     		ldr	r3, [sp, #12]
 13822 00d0 4345     		cmp	r3, r8
 13823 00d2 DBD8     		bhi	.L855
1390:src/int.c     **** #else
 13824              		.loc 1 1390 2 is_stmt 1 view .LVU3899
1390:src/int.c     **** #else
 13825              		.loc 1 1390 9 is_stmt 0 view .LVU3900
 13826 00d4 059A     		ldr	r2, [sp, #20]
 13827 00d6 2046     		mov	r0, r4
 13828              	.LVL1091:
1390:src/int.c     **** #else
 13829              		.loc 1 1390 9 view .LVU3901
 13830 00d8 2946     		mov	r1, r5
 13831 00da FFF7FEFF 		bl	build_value
 13832              	.LVL1092:
 13833              	.L844:
1394:src/int.c     **** 
 13834              		.loc 1 1394 1 view .LVU3902
 13835 00de 09B0     		add	sp, sp, #36
 13836              		.cfi_remember_state
 13837              		.cfi_def_cfa_offset 36
 13838              		@ sp needed
 13839 00e0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 13840              	.LVL1093:
 13841              	.L866:
 13842              		.cfi_restore_state
1367:src/int.c     **** 
 13843              		.loc 1 1367 3 is_stmt 1 view .LVU3903
 13844              	.LBB1956:
 13845              	.LBI1956:
 147:src/int.c     **** #ifndef TINY_BUILD
 13846              		.loc 1 147 15 view .LVU3904
 13847              	.LBB1957:
 149:src/int.c     **** 	long long int v = mask_value(x);
 13848              		.loc 1 149 2 view .LVU3905
 13849              	.LBB1958:
 13850              	.LBI1958:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 13851              		.loc 1 39 23 view .LVU3906
 13852              	.LBB1959:
  40:src/int.c     **** }
 13853              		.loc 1 40 2 view .LVU3907
  40:src/int.c     **** }
 13854              		.loc 1 40 2 is_stmt 0 view .LVU3908
 13855              	.LBE1959:
 13856              	.LBE1958:
 150:src/int.c     **** 
 13857              		.loc 1 150 2 is_stmt 1 view .LVU3909
 13858              	.LBB1960:
 13859              	.LBB1961:
 13860              	.LBB1962:
 13861              	.LBB1963:
ARM GAS  /tmp/ccjGZi8K.s 			page 335


  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13862              		.loc 1 44 26 is_stmt 0 view .LVU3910
 13863 00e4 3368     		ldr	r3, [r6]
 13864 00e6 93F8E907 		ldrb	r0, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13865              		.loc 1 44 15 view .LVU3911
 13866 00ea 00F03F03 		and	r3, r0, #63
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13867              		.loc 1 45 26 view .LVU3912
 13868 00ee 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13869              		.loc 1 45 5 view .LVU3913
 13870 00f0 3E2A     		cmp	r2, #62
 13871              	.LBE1963:
 13872              	.LBE1962:
 13873              	.LBE1961:
 13874              	.LBE1960:
 150:src/int.c     **** 
 13875              		.loc 1 150 20 view .LVU3914
 13876 00f2 2046     		mov	r0, r4
 13877 00f4 2946     		mov	r1, r5
 13878              	.LVL1094:
 13879              	.LBB1967:
 13880              	.LBI1960:
  92:src/int.c     **** #ifndef TINY_BUILD
 13881              		.loc 1 92 15 is_stmt 1 view .LVU3915
 13882              	.LBB1966:
  94:src/int.c     **** 	long long int mask;
 13883              		.loc 1 94 2 view .LVU3916
 13884              	.LBB1965:
 13885              	.LBI1962:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 13886              		.loc 1 43 14 view .LVU3917
 13887              	.LBB1964:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13888              		.loc 1 44 2 view .LVU3918
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13889              		.loc 1 45 2 view .LVU3919
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13890              		.loc 1 45 5 is_stmt 0 view .LVU3920
 13891 00f6 F2D8     		bhi	.L844
 13892              	.LVL1095:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 13893              		.loc 1 45 5 view .LVU3921
 13894              	.LBE1964:
 13895              	.LBE1965:
  95:src/int.c     **** 
 13896              		.loc 1 95 2 is_stmt 1 view .LVU3922
  97:src/int.c     **** 		return v;
 13897              		.loc 1 97 2 view .LVU3923
  99:src/int.c     **** 	return v & mask;
 13898              		.loc 1 99 2 view .LVU3924
 100:src/int.c     **** #else
 13899              		.loc 1 100 2 view .LVU3925
  99:src/int.c     **** 	return v & mask;
 13900              		.loc 1 99 14 is_stmt 0 view .LVU3926
 13901 00f8 0120     		movs	r0, #1
ARM GAS  /tmp/ccjGZi8K.s 			page 336


 13902              	.LVL1096:
  99:src/int.c     **** 	return v & mask;
 13903              		.loc 1 99 14 view .LVU3927
 13904 00fa A3F12001 		sub	r1, r3, #32
 13905              	.LVL1097:
  99:src/int.c     **** 	return v & mask;
 13906              		.loc 1 99 14 view .LVU3928
 13907 00fe C3F12002 		rsb	r2, r3, #32
 13908 0102 20FA02F2 		lsr	r2, r0, r2
 13909 0106 00FA01F1 		lsl	r1, r0, r1
 13910 010a 9840     		lsls	r0, r0, r3
  99:src/int.c     **** 	return v & mask;
 13911              		.loc 1 99 7 view .LVU3929
 13912 010c 10F1FF30 		adds	r0, r0, #-1
  99:src/int.c     **** 	return v & mask;
 13913              		.loc 1 99 14 view .LVU3930
 13914 0110 41EA0201 		orr	r1, r1, r2
  99:src/int.c     **** 	return v & mask;
 13915              		.loc 1 99 7 view .LVU3931
 13916 0114 41F1FF31 		adc	r1, r1, #-1
 100:src/int.c     **** #else
 13917              		.loc 1 100 11 view .LVU3932
 13918 0118 2940     		ands	r1, r1, r5
 13919 011a 2040     		ands	r0, r0, r4
 13920              	.LBE1966:
 13921              	.LBE1967:
 13922              	.LBE1957:
 13923              	.LBE1956:
1394:src/int.c     **** 
 13924              		.loc 1 1394 1 view .LVU3933
 13925 011c 09B0     		add	sp, sp, #36
 13926              		.cfi_remember_state
 13927              		.cfi_def_cfa_offset 36
 13928              		@ sp needed
 13929 011e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 13930              	.LVL1098:
 13931              	.L865:
 13932              		.cfi_restore_state
1361:src/int.c     **** 		return 0;
 13933              		.loc 1 1361 3 is_stmt 1 view .LVU3934
 13934              	.LBB1968:
 13935              	.LBI1968:
  67:src/int.c     **** #ifndef TINY_BUILD
 13936              		.loc 1 67 6 view .LVU3935
 13937              	.LBB1969:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13938              		.loc 1 69 2 view .LVU3936
 13939 0122 FFF7FEFF 		bl	set_overflow.part.0
 13940              	.LVL1099:
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13941              		.loc 1 69 2 is_stmt 0 view .LVU3937
 13942              	.LBE1969:
 13943              	.LBE1968:
1362:src/int.c     **** 	}
 13944              		.loc 1 1362 3 is_stmt 1 view .LVU3938
1362:src/int.c     **** 	}
 13945              		.loc 1 1362 10 is_stmt 0 view .LVU3939
ARM GAS  /tmp/ccjGZi8K.s 			page 337


 13946 0126 0020     		movs	r0, #0
 13947 0128 0146     		mov	r1, r0
1394:src/int.c     **** 
 13948              		.loc 1 1394 1 view .LVU3940
 13949 012a 09B0     		add	sp, sp, #36
 13950              		.cfi_remember_state
 13951              		.cfi_def_cfa_offset 36
 13952              		@ sp needed
 13953 012c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 13954              	.LVL1100:
 13955              	.L856:
 13956              		.cfi_restore_state
 13957              	.LBB1970:
 13958              	.LBB1949:
 13959              	.LBB1948:
 13960              	.LBB1947:
1394:src/int.c     **** 
 13961              		.loc 1 1394 1 view .LVU3941
 13962 0130 0027     		movs	r7, #0
 13963 0132 4FF00046 		mov	r6, #-2147483648
 13964 0136 97E7     		b	.L849
 13965              	.L868:
 13966              		.align	2
 13967              	.L867:
 13968 0138 00000000 		.word	main_ram
 13969              	.LBE1947:
 13970              	.LBE1948:
 13971              	.LBE1949:
 13972              	.LBE1970:
 13973              		.cfi_endproc
 13974              	.LFE68:
 13976              		.section	.text.isPrime,"ax",%progbits
 13977              		.align	1
 13978              		.p2align 2,,3
 13979              		.global	isPrime
 13980              		.syntax unified
 13981              		.thumb
 13982              		.thumb_func
 13983              		.fpu fpv4-sp-d16
 13985              	isPrime:
 13986              	.LVL1101:
 13987              	.LFB71:
1420:src/int.c     **** 
1421:src/int.c     **** /* Test if a number is prime or not using a Miller-Rabin test */
1422:src/int.c     **** #ifndef TINY_BUILD
1423:src/int.c     **** static const unsigned char primes[] = {
1424:src/int.c     **** 	2, 3, 5, 7,	11, 13, 17, 19,
1425:src/int.c     **** 	23, 29, 31, 37,	41, 43, 47, 53,
1426:src/int.c     **** };
1427:src/int.c     **** #define N_PRIMES	(sizeof(primes) / sizeof(unsigned char))
1428:src/int.c     **** #define QUICK_CHECK	(59*59-1)
1429:src/int.c     **** #endif
1430:src/int.c     **** 
1431:src/int.c     **** int isPrime(unsigned long long int p) {
 13988              		.loc 1 1431 39 is_stmt 1 view -0
 13989              		.cfi_startproc
 13990              		@ args = 0, pretend = 0, frame = 48
ARM GAS  /tmp/ccjGZi8K.s 			page 338


 13991              		@ frame_needed = 0, uses_anonymous_args = 0
1432:src/int.c     **** #ifndef TINY_BUILD
1433:src/int.c     **** 	int i;
 13992              		.loc 1 1433 2 view .LVU3943
1434:src/int.c     **** 	unsigned long long int s;
 13993              		.loc 1 1434 2 view .LVU3944
1435:src/int.c     **** #define PRIME_ITERATION	15
1436:src/int.c     **** 
1437:src/int.c     **** 	if (p < 2)	return 0;
 13994              		.loc 1 1437 2 view .LVU3945
1431:src/int.c     **** #ifndef TINY_BUILD
 13995              		.loc 1 1431 39 is_stmt 0 view .LVU3946
 13996 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 13997              		.cfi_def_cfa_offset 36
 13998              		.cfi_offset 4, -36
 13999              		.cfi_offset 5, -32
 14000              		.cfi_offset 6, -28
 14001              		.cfi_offset 7, -24
 14002              		.cfi_offset 8, -20
 14003              		.cfi_offset 9, -16
 14004              		.cfi_offset 10, -12
 14005              		.cfi_offset 11, -8
 14006              		.cfi_offset 14, -4
 14007              		.loc 1 1437 5 view .LVU3947
 14008 0004 0029     		cmp	r1, #0
 14009 0006 08BF     		it	eq
 14010 0008 0228     		cmpeq	r0, #2
1431:src/int.c     **** #ifndef TINY_BUILD
 14011              		.loc 1 1431 39 view .LVU3948
 14012 000a 8FB0     		sub	sp, sp, #60
 14013              		.cfi_def_cfa_offset 96
 14014              		.loc 1 1437 5 view .LVU3949
 14015 000c C0F0E080 		bcc	.L891
1438:src/int.c     **** 
1439:src/int.c     **** 	/* We fail for numbers >= 2^63 */
1440:src/int.c     **** 	if ((p & 0x8000000000000000ull) != 0) {
 14016              		.loc 1 1440 5 view .LVU3950
 14017 0010 0028     		cmp	r0, #0
 14018 0012 71F10003 		sbcs	r3, r1, #0
 14019 0016 8046     		mov	r8, r0
 14020 0018 8946     		mov	r9, r1
 14021              		.loc 1 1440 2 is_stmt 1 view .LVU3951
 14022              		.loc 1 1440 5 is_stmt 0 view .LVU3952
 14023 001a C0F2E880 		blt	.L871
 14024 001e 7C4E     		ldr	r6, .L911
 14025 0020 0996     		str	r6, [sp, #36]
 14026 0022 0224     		movs	r4, #2
 14027 0024 06F10F07 		add	r7, r6, #15
 14028 0028 01E0     		b	.L872
 14029              	.LVL1102:
 14030              	.L910:
 14031              		.loc 1 1440 5 view .LVU3953
 14032 002a 16F8014F 		ldrb	r4, [r6, #1]!	@ zero_extendqisi2
 14033              	.LVL1103:
 14034              	.L872:
1441:src/int.c     **** 		report_err(ERR_DOMAIN);
1442:src/int.c     **** 		return 1;
ARM GAS  /tmp/ccjGZi8K.s 			page 339


1443:src/int.c     **** 	}
1444:src/int.c     **** 
1445:src/int.c     **** 	/* Quick check for divisibility by small primes */
1446:src/int.c     **** 	for (i=0; i<N_PRIMES; i++)
1447:src/int.c     **** 		if (p == primes[i])
 14035              		.loc 1 1447 3 is_stmt 1 view .LVU3954
1448:src/int.c     **** 			return 1;
1449:src/int.c     **** 		else if ((p % primes[i]) == 0)
 14036              		.loc 1 1449 8 view .LVU3955
1447:src/int.c     **** 			return 1;
 14037              		.loc 1 1447 18 is_stmt 0 view .LVU3956
 14038 002e 0025     		movs	r5, #0
 14039 0030 E4B2     		uxtb	r4, r4
1447:src/int.c     **** 			return 1;
 14040              		.loc 1 1447 6 view .LVU3957
 14041 0032 4D45     		cmp	r5, r9
 14042 0034 08BF     		it	eq
 14043 0036 4445     		cmpeq	r4, r8
 14044              		.loc 1 1449 15 view .LVU3958
 14045 0038 4046     		mov	r0, r8
 14046 003a 4946     		mov	r1, r9
 14047 003c 2246     		mov	r2, r4
 14048 003e 2B46     		mov	r3, r5
1447:src/int.c     **** 			return 1;
 14049              		.loc 1 1447 6 view .LVU3959
 14050 0040 00F0AA80 		beq	.L892
 14051              		.loc 1 1449 15 view .LVU3960
 14052 0044 FFF7FEFF 		bl	__aeabi_uldivmod
 14053              	.LVL1104:
1446:src/int.c     **** 		if (p == primes[i])
 14054              		.loc 1 1446 24 is_stmt 1 view .LVU3961
1446:src/int.c     **** 		if (p == primes[i])
 14055              		.loc 1 1446 12 view .LVU3962
 14056              		.loc 1 1449 11 is_stmt 0 view .LVU3963
 14057 0048 1343     		orrs	r3, r2, r3
 14058 004a 00F0C180 		beq	.L891
1446:src/int.c     **** 		if (p == primes[i])
 14059              		.loc 1 1446 2 discriminator 2 view .LVU3964
 14060 004e BE42     		cmp	r6, r7
 14061 0050 EBD1     		bne	.L910
1450:src/int.c     **** 			return 0;
1451:src/int.c     **** 	if (p < QUICK_CHECK)
 14062              		.loc 1 1451 2 is_stmt 1 view .LVU3965
 14063              		.loc 1 1451 5 is_stmt 0 view .LVU3966
 14064 0052 0023     		movs	r3, #0
 14065 0054 40F69752 		movw	r2, #3479
 14066 0058 4B45     		cmp	r3, r9
 14067 005a 08BF     		it	eq
 14068 005c 4245     		cmpeq	r2, r8
 14069 005e 80F09B80 		bcs	.L892
1452:src/int.c     **** 		return 1;
1453:src/int.c     **** 
1454:src/int.c     **** 	s = p - 1;
 14070              		.loc 1 1454 2 is_stmt 1 view .LVU3967
 14071              		.loc 1 1454 4 is_stmt 0 view .LVU3968
 14072 0062 18F1FF33 		adds	r3, r8, #-1
 14073 0066 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/ccjGZi8K.s 			page 340


 14074 0068 49F1FF33 		adc	r3, r9, #-1
 14075 006c 0793     		str	r3, [sp, #28]
 14076              	.LVL1105:
1455:src/int.c     **** 	while ((s&1) == 0)
 14077              		.loc 1 1455 2 is_stmt 1 view .LVU3969
 14078              		.loc 1 1455 8 view .LVU3970
 14079              		.loc 1 1455 11 is_stmt 0 view .LVU3971
 14080 006e DDE90645 		ldrd	r4, [sp, #24]
 14081 0072 0021     		movs	r1, #0
 14082 0074 04F00102 		and	r2, r4, #1
 14083 0078 0B46     		mov	r3, r1
 14084              		.loc 1 1455 8 view .LVU3972
 14085 007a 1343     		orrs	r3, r2, r3
 14086 007c 40F0C380 		bne	.L888
 14087 0080 2246     		mov	r2, r4
 14088 0082 2B46     		mov	r3, r5
 14089              	.LVL1106:
 14090              	.L875:
1456:src/int.c     **** 		s /= 2;
 14091              		.loc 1 1456 3 is_stmt 1 view .LVU3973
 14092              		.loc 1 1456 5 is_stmt 0 view .LVU3974
 14093 0084 5008     		lsrs	r0, r2, #1
 14094 0086 40EAC370 		orr	r0, r0, r3, lsl #31
1455:src/int.c     **** 	while ((s&1) == 0)
 14095              		.loc 1 1455 11 view .LVU3975
 14096 008a 00F00104 		and	r4, r0, #1
 14097 008e 0D46     		mov	r5, r1
 14098              		.loc 1 1456 5 view .LVU3976
 14099 0090 5E08     		lsrs	r6, r3, #1
 14100 0092 0246     		mov	r2, r0
 14101              	.LVL1107:
1455:src/int.c     **** 	while ((s&1) == 0)
 14102              		.loc 1 1455 8 view .LVU3977
 14103 0094 54EA0500 		orrs	r0, r4, r5
 14104              		.loc 1 1456 5 view .LVU3978
 14105 0098 3346     		mov	r3, r6
 14106              	.LVL1108:
1455:src/int.c     **** 	while ((s&1) == 0)
 14107              		.loc 1 1455 8 is_stmt 1 view .LVU3979
 14108 009a F3D0     		beq	.L875
 14109 009c CDE90C23 		strd	r2, [sp, #48]
 14110              	.LVL1109:
 14111              	.L874:
1455:src/int.c     **** 	while ((s&1) == 0)
 14112              		.loc 1 1455 8 is_stmt 0 view .LVU3980
 14113 00a0 0220     		movs	r0, #2
 14114              	.L883:
 14115              	.LVL1110:
 14116              	.LBB1971:
1457:src/int.c     **** 
1458:src/int.c     **** 	for(i=0; i<PRIME_ITERATION; i++) {
1459:src/int.c     **** 		unsigned long long int temp = s;
 14117              		.loc 1 1459 3 is_stmt 1 view .LVU3981
1460:src/int.c     **** 		unsigned long long int mod = expmod(primes[i], temp, p);
 14118              		.loc 1 1460 3 view .LVU3982
 14119              		.loc 1 1460 32 is_stmt 0 view .LVU3983
 14120 00a2 DDE90C45 		ldrd	r4, [sp, #48]
ARM GAS  /tmp/ccjGZi8K.s 			page 341


 14121 00a6 CDE90089 		strd	r8, [sp]
 14122 00aa 2246     		mov	r2, r4
 14123 00ac 2B46     		mov	r3, r5
 14124 00ae 0021     		movs	r1, #0
 14125 00b0 FFF7FEFF 		bl	expmod
 14126              	.LVL1111:
 14127 00b4 0F46     		mov	r7, r1
1461:src/int.c     **** 		while (temp != p-1 && mod != 1 && mod != p-1) {
 14128              		.loc 1 1461 9 view .LVU3984
 14129 00b6 DDE90612 		ldrd	r1, [sp, #24]
 14130 00ba 2346     		mov	r3, r4
 14131 00bc 9542     		cmp	r5, r2
 14132 00be 08BF     		it	eq
 14133 00c0 8B42     		cmpeq	r3, r1
1460:src/int.c     **** 		unsigned long long int mod = expmod(primes[i], temp, p);
 14134              		.loc 1 1460 32 view .LVU3985
 14135 00c2 0646     		mov	r6, r0
 14136              	.LVL1112:
 14137              		.loc 1 1461 3 is_stmt 1 view .LVU3986
 14138              		.loc 1 1461 9 view .LVU3987
 14139 00c4 2C46     		mov	r4, r5
 14140 00c6 00F08780 		beq	.L889
 14141              		.loc 1 1461 22 is_stmt 0 view .LVU3988
 14142 00ca 002F     		cmp	r7, #0
 14143 00cc 08BF     		it	eq
 14144 00ce 012E     		cmpeq	r6, #1
 14145 00d0 00F09480 		beq	.L890
 14146              		.loc 1 1461 34 view .LVU3989
 14147 00d4 BA42     		cmp	r2, r7
 14148 00d6 08BF     		it	eq
 14149 00d8 B142     		cmpeq	r1, r6
 14150 00da 55D0     		beq	.L878
 14151 00dc CDE90434 		strd	r3, [sp, #16]
 14152              	.LVL1113:
 14153              	.L882:
1462:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14154              		.loc 1 1462 4 is_stmt 1 view .LVU3990
 14155              	.LBB1972:
 14156              	.LBI1972:
1398:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 14157              		.loc 1 1398 27 view .LVU3991
 14158              	.LBB1973:
1399:src/int.c     **** 	while (b > 0) {
 14159              		.loc 1 1399 2 view .LVU3992
1399:src/int.c     **** 	while (b > 0) {
 14160              		.loc 1 1399 30 is_stmt 0 view .LVU3993
 14161 00e0 4246     		mov	r2, r8
 14162 00e2 4B46     		mov	r3, r9
 14163 00e4 3046     		mov	r0, r6
 14164 00e6 3946     		mov	r1, r7
 14165 00e8 FFF7FEFF 		bl	__aeabi_uldivmod
 14166              	.LVL1114:
 14167 00ec 1D46     		mov	r5, r3
1400:src/int.c     **** 		if ((b & 1))
 14168              		.loc 1 1400 8 view .LVU3994
 14169 00ee 56EA0703 		orrs	r3, r6, r7
1399:src/int.c     **** 	while (b > 0) {
ARM GAS  /tmp/ccjGZi8K.s 			page 342


 14170              		.loc 1 1399 30 view .LVU3995
 14171 00f2 1446     		mov	r4, r2
 14172              	.LVL1115:
1400:src/int.c     **** 		if ((b & 1))
 14173              		.loc 1 1400 2 is_stmt 1 view .LVU3996
1400:src/int.c     **** 		if ((b & 1))
 14174              		.loc 1 1400 8 view .LVU3997
 14175 00f4 54D0     		beq	.L906
1399:src/int.c     **** 	while (b > 0) {
 14176              		.loc 1 1399 25 is_stmt 0 view .LVU3998
 14177 00f6 0023     		movs	r3, #0
 14178 00f8 0293     		str	r3, [sp, #8]
 14179 00fa 0893     		str	r3, [sp, #32]
 14180              	.LVL1116:
 14181              	.L881:
1401:src/int.c     **** 			x = (x+y)%c;
 14182              		.loc 1 1401 3 is_stmt 1 view .LVU3999
1402:src/int.c     **** 		y = (y+y)%c;
 14183              		.loc 1 1402 4 view .LVU4000
1401:src/int.c     **** 			x = (x+y)%c;
 14184              		.loc 1 1401 10 is_stmt 0 view .LVU4001
 14185 00fc 06F0010A 		and	r10, r6, #1
 14186 0100 4FF0000B 		mov	fp, #0
1401:src/int.c     **** 			x = (x+y)%c;
 14187              		.loc 1 1401 6 view .LVU4002
 14188 0104 5AEA0B03 		orrs	r3, r10, fp
 14189 0108 0AD0     		beq	.L880
1402:src/int.c     **** 		y = (y+y)%c;
 14190              		.loc 1 1402 6 view .LVU4003
 14191 010a 029B     		ldr	r3, [sp, #8]
 14192 010c 0899     		ldr	r1, [sp, #32]
 14193 010e E018     		adds	r0, r4, r3
 14194 0110 45EB0101 		adc	r1, r5, r1
 14195 0114 4246     		mov	r2, r8
 14196 0116 4B46     		mov	r3, r9
 14197 0118 FFF7FEFF 		bl	__aeabi_uldivmod
 14198              	.LVL1117:
 14199 011c 0292     		str	r2, [sp, #8]
 14200              	.LVL1118:
1402:src/int.c     **** 		y = (y+y)%c;
 14201              		.loc 1 1402 6 view .LVU4004
 14202 011e 0893     		str	r3, [sp, #32]
 14203              	.LVL1119:
 14204              	.L880:
1403:src/int.c     **** 		b /= 2;
 14205              		.loc 1 1403 3 is_stmt 1 view .LVU4005
1403:src/int.c     **** 		b /= 2;
 14206              		.loc 1 1403 9 is_stmt 0 view .LVU4006
 14207 0120 2019     		adds	r0, r4, r4
 14208 0122 45EB0501 		adc	r1, r5, r5
1403:src/int.c     **** 		b /= 2;
 14209              		.loc 1 1403 5 view .LVU4007
 14210 0126 4246     		mov	r2, r8
 14211 0128 4B46     		mov	r3, r9
 14212 012a FFF7FEFF 		bl	__aeabi_uldivmod
 14213              	.LVL1120:
1404:src/int.c     **** 	}
ARM GAS  /tmp/ccjGZi8K.s 			page 343


 14214              		.loc 1 1404 5 view .LVU4008
 14215 012e 4FEA560C 		lsr	ip, r6, #1
 14216 0132 4CEAC77C 		orr	ip, ip, r7, lsl #31
 14217 0136 7908     		lsrs	r1, r7, #1
 14218 0138 6646     		mov	r6, ip
 14219              	.LVL1121:
1404:src/int.c     **** 	}
 14220              		.loc 1 1404 5 view .LVU4009
 14221 013a 0F46     		mov	r7, r1
1403:src/int.c     **** 		b /= 2;
 14222              		.loc 1 1403 5 view .LVU4010
 14223 013c 1D46     		mov	r5, r3
 14224              	.LVL1122:
1400:src/int.c     **** 		if ((b & 1))
 14225              		.loc 1 1400 8 view .LVU4011
 14226 013e 56EA0703 		orrs	r3, r6, r7
1403:src/int.c     **** 		b /= 2;
 14227              		.loc 1 1403 5 view .LVU4012
 14228 0142 1446     		mov	r4, r2
 14229              	.LVL1123:
1404:src/int.c     **** 	}
 14230              		.loc 1 1404 3 is_stmt 1 view .LVU4013
1400:src/int.c     **** 		if ((b & 1))
 14231              		.loc 1 1400 8 view .LVU4014
 14232 0144 DAD1     		bne	.L881
1406:src/int.c     **** }
 14233              		.loc 1 1406 2 view .LVU4015
1406:src/int.c     **** }
 14234              		.loc 1 1406 11 is_stmt 0 view .LVU4016
 14235 0146 0298     		ldr	r0, [sp, #8]
 14236 0148 0899     		ldr	r1, [sp, #32]
 14237 014a 4246     		mov	r2, r8
 14238              	.LVL1124:
1406:src/int.c     **** }
 14239              		.loc 1 1406 11 view .LVU4017
 14240 014c 4B46     		mov	r3, r9
 14241 014e FFF7FEFF 		bl	__aeabi_uldivmod
 14242              	.LVL1125:
 14243              	.LBE1973:
 14244              	.LBE1972:
1463:src/int.c     **** 			temp += temp;
 14245              		.loc 1 1463 9 view .LVU4018
 14246 0152 0499     		ldr	r1, [sp, #16]
 14247 0154 4918     		adds	r1, r1, r1
 14248 0156 0491     		str	r1, [sp, #16]
 14249              	.LVL1126:
 14250              		.loc 1 1463 9 view .LVU4019
 14251 0158 DDE90445 		ldrd	r4, [sp, #16]
 14252              	.LVL1127:
 14253              		.loc 1 1463 9 view .LVU4020
 14254 015c 2946     		mov	r1, r5
 14255 015e 45EB0101 		adc	r1, r5, r1
 14256 0162 0591     		str	r1, [sp, #20]
 14257              	.LBB1976:
 14258              	.LBB1974:
1406:src/int.c     **** }
 14259              		.loc 1 1406 11 view .LVU4021
ARM GAS  /tmp/ccjGZi8K.s 			page 344


 14260 0164 1646     		mov	r6, r2
 14261              	.LVL1128:
1406:src/int.c     **** }
 14262              		.loc 1 1406 11 view .LVU4022
 14263 0166 1F46     		mov	r7, r3
 14264              	.LVL1129:
1406:src/int.c     **** }
 14265              		.loc 1 1406 11 view .LVU4023
 14266              	.LBE1974:
 14267              	.LBE1976:
 14268              		.loc 1 1463 4 is_stmt 1 view .LVU4024
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14269              		.loc 1 1461 9 view .LVU4025
 14270 0168 DDE90412 		ldrd	r1, [sp, #16]
 14271 016c DDE90634 		ldrd	r3, [sp, #24]
 14272 0170 9442     		cmp	r4, r2
 14273 0172 08BF     		it	eq
 14274 0174 8B42     		cmpeq	r3, r1
 14275 0176 33D0     		beq	.L876
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14276              		.loc 1 1461 22 is_stmt 0 discriminator 1 view .LVU4026
 14277 0178 002F     		cmp	r7, #0
 14278 017a 08BF     		it	eq
 14279 017c 012E     		cmpeq	r6, #1
 14280 017e 1DD0     		beq	.L877
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14281              		.loc 1 1461 34 discriminator 2 view .LVU4027
 14282 0180 BC42     		cmp	r4, r7
 14283 0182 08BF     		it	eq
 14284 0184 B342     		cmpeq	r3, r6
 14285 0186 ABD1     		bne	.L882
 14286              	.LVL1130:
 14287              	.L878:
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14288              		.loc 1 1461 34 discriminator 2 view .LVU4028
 14289              	.LBE1971:
1458:src/int.c     **** 		unsigned long long int temp = s;
 14290              		.loc 1 1458 30 is_stmt 1 discriminator 2 view .LVU4029
1458:src/int.c     **** 		unsigned long long int temp = s;
 14291              		.loc 1 1458 11 discriminator 2 view .LVU4030
1458:src/int.c     **** 		unsigned long long int temp = s;
 14292              		.loc 1 1458 2 is_stmt 0 discriminator 2 view .LVU4031
 14293 0188 2249     		ldr	r1, .L911+4
 14294 018a 099B     		ldr	r3, [sp, #36]
 14295 018c 9942     		cmp	r1, r3
 14296 018e 03D0     		beq	.L892
 14297 0190 13F8010F 		ldrb	r0, [r3, #1]!	@ zero_extendqisi2
 14298 0194 0993     		str	r3, [sp, #36]
 14299              	.LVL1131:
1458:src/int.c     **** 		unsigned long long int temp = s;
 14300              		.loc 1 1458 2 discriminator 2 view .LVU4032
 14301 0196 84E7     		b	.L883
 14302              	.LVL1132:
 14303              	.L892:
1448:src/int.c     **** 		else if ((p % primes[i]) == 0)
 14304              		.loc 1 1448 11 view .LVU4033
 14305 0198 0120     		movs	r0, #1
ARM GAS  /tmp/ccjGZi8K.s 			page 345


1464:src/int.c     **** 		}
1465:src/int.c     **** 		if(mod!=p-1 && temp%2==0)
1466:src/int.c     **** 			return 0;
1467:src/int.c     **** 	}
1468:src/int.c     **** #endif
1469:src/int.c     **** 	return 1;
1470:src/int.c     **** }
 14306              		.loc 1 1470 1 view .LVU4034
 14307 019a 0FB0     		add	sp, sp, #60
 14308              		.cfi_remember_state
 14309              		.cfi_def_cfa_offset 36
 14310              		@ sp needed
 14311 019c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14312              	.LVL1133:
 14313              	.L906:
 14314              		.cfi_restore_state
 14315              		.loc 1 1470 1 view .LVU4035
 14316 01a0 DDE90601 		ldrd	r0, [sp, #24]
 14317 01a4 DDE90423 		ldrd	r2, [sp, #16]
 14318              	.LVL1134:
 14319              	.L879:
 14320              	.LBB1978:
 14321              	.LBB1977:
 14322              	.LBB1975:
1406:src/int.c     **** }
 14323              		.loc 1 1406 2 is_stmt 1 view .LVU4036
1406:src/int.c     **** }
 14324              		.loc 1 1406 2 is_stmt 0 view .LVU4037
 14325              	.LBE1975:
 14326              	.LBE1977:
1463:src/int.c     **** 		}
 14327              		.loc 1 1463 4 is_stmt 1 view .LVU4038
1463:src/int.c     **** 		}
 14328              		.loc 1 1463 9 is_stmt 0 view .LVU4039
 14329 01a8 9218     		adds	r2, r2, r2
 14330 01aa 5B41     		adcs	r3, r3, r3
 14331              	.LVL1135:
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14332              		.loc 1 1461 9 is_stmt 1 view .LVU4040
 14333 01ac 9942     		cmp	r1, r3
 14334 01ae 08BF     		it	eq
 14335 01b0 9042     		cmpeq	r0, r2
 14336 01b2 F9D1     		bne	.L879
 14337 01b4 CDE90601 		strd	r0, [sp, #24]
 14338 01b8 CDE90423 		strd	r2, [sp, #16]
 14339              	.LVL1136:
 14340              	.L877:
1465:src/int.c     **** 			return 0;
 14341              		.loc 1 1465 22 is_stmt 0 discriminator 1 view .LVU4041
 14342 01bc 049B     		ldr	r3, [sp, #16]
 14343 01be 03F00103 		and	r3, r3, #1
 14344 01c2 0A93     		str	r3, [sp, #40]
 14345 01c4 0023     		movs	r3, #0
 14346 01c6 0B93     		str	r3, [sp, #44]
1465:src/int.c     **** 			return 0;
 14347              		.loc 1 1465 15 discriminator 1 view .LVU4042
 14348 01c8 DDE90A34 		ldrd	r3, [sp, #40]
ARM GAS  /tmp/ccjGZi8K.s 			page 346


 14349 01cc 2343     		orrs	r3, r3, r4
 14350 01ce DBD1     		bne	.L878
 14351              	.LVL1137:
 14352              	.L891:
1465:src/int.c     **** 			return 0;
 14353              		.loc 1 1465 15 discriminator 1 view .LVU4043
 14354              	.LBE1978:
1437:src/int.c     **** 
 14355              		.loc 1 1437 20 view .LVU4044
 14356 01d0 0020     		movs	r0, #0
 14357              		.loc 1 1470 1 view .LVU4045
 14358 01d2 0FB0     		add	sp, sp, #60
 14359              		.cfi_remember_state
 14360              		.cfi_def_cfa_offset 36
 14361              		@ sp needed
 14362 01d4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14363              	.LVL1138:
 14364              	.L889:
 14365              		.cfi_restore_state
 14366              	.LBB1979:
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14367              		.loc 1 1461 9 view .LVU4046
 14368 01d8 DDE90C34 		ldrd	r3, [sp, #48]
 14369 01dc CDE90434 		strd	r3, [sp, #16]
 14370              	.LVL1139:
 14371              	.L876:
1465:src/int.c     **** 			return 0;
 14372              		.loc 1 1465 3 is_stmt 1 view .LVU4047
1465:src/int.c     **** 			return 0;
 14373              		.loc 1 1465 5 is_stmt 0 view .LVU4048
 14374 01e0 DDE90634 		ldrd	r3, [sp, #24]
 14375 01e4 BC42     		cmp	r4, r7
 14376 01e6 08BF     		it	eq
 14377 01e8 B342     		cmpeq	r3, r6
 14378 01ea E7D1     		bne	.L877
 14379 01ec CCE7     		b	.L878
 14380              	.LVL1140:
 14381              	.L871:
1465:src/int.c     **** 			return 0;
 14382              		.loc 1 1465 5 view .LVU4049
 14383              	.LBE1979:
1441:src/int.c     **** 		return 1;
 14384              		.loc 1 1441 3 is_stmt 1 view .LVU4050
 14385 01ee 0120     		movs	r0, #1
 14386              	.LVL1141:
1441:src/int.c     **** 		return 1;
 14387              		.loc 1 1441 3 is_stmt 0 view .LVU4051
 14388 01f0 FFF7FEFF 		bl	report_err
 14389              	.LVL1142:
1442:src/int.c     **** 	}
 14390              		.loc 1 1442 3 is_stmt 1 view .LVU4052
1442:src/int.c     **** 	}
 14391              		.loc 1 1442 10 is_stmt 0 view .LVU4053
 14392 01f4 0120     		movs	r0, #1
 14393              		.loc 1 1470 1 view .LVU4054
 14394 01f6 0FB0     		add	sp, sp, #60
 14395              		.cfi_remember_state
ARM GAS  /tmp/ccjGZi8K.s 			page 347


 14396              		.cfi_def_cfa_offset 36
 14397              		@ sp needed
 14398 01f8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14399              	.LVL1143:
 14400              	.L890:
 14401              		.cfi_restore_state
 14402              	.LBB1980:
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14403              		.loc 1 1461 22 view .LVU4055
 14404 01fc DDE90C34 		ldrd	r3, [sp, #48]
 14405 0200 CDE90434 		strd	r3, [sp, #16]
 14406 0204 DAE7     		b	.L877
 14407              	.LVL1144:
 14408              	.L888:
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14409              		.loc 1 1461 22 view .LVU4056
 14410              	.LBE1980:
1455:src/int.c     **** 		s /= 2;
 14411              		.loc 1 1455 8 view .LVU4057
 14412 0206 DDE90634 		ldrd	r3, [sp, #24]
 14413 020a CDE90C34 		strd	r3, [sp, #48]
 14414 020e 47E7     		b	.L874
 14415              	.L912:
 14416              		.align	2
 14417              	.L911:
 14418 0210 00000000 		.word	.LANCHOR0
 14419 0214 0E000000 		.word	.LANCHOR0+14
 14420              		.cfi_endproc
 14421              	.LFE71:
 14423              		.section	.text.intmodop,"ax",%progbits
 14424              		.align	1
 14425              		.p2align 2,,3
 14426              		.global	intmodop
 14427              		.syntax unified
 14428              		.thumb
 14429              		.thumb_func
 14430              		.fpu fpv4-sp-d16
 14432              	intmodop:
 14433              	.LVL1145:
 14434              	.LFB72:
1471:src/int.c     **** 
1472:src/int.c     **** #ifdef INCLUDE_INT_MODULO_OPS
1473:src/int.c     **** long long int intmodop(long long int z, long long int y, long long int x) {
 14435              		.loc 1 1473 75 is_stmt 1 view -0
 14436              		.cfi_startproc
 14437              		@ args = 8, pretend = 0, frame = 24
 14438              		@ frame_needed = 0, uses_anonymous_args = 0
1474:src/int.c     **** 	int sx, sy, sz;
 14439              		.loc 1 1474 2 view .LVU4059
1475:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 14440              		.loc 1 1475 2 view .LVU4060
1473:src/int.c     **** 	int sx, sy, sz;
 14441              		.loc 1 1473 75 is_stmt 0 view .LVU4061
 14442 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 14443              		.cfi_def_cfa_offset 36
 14444              		.cfi_offset 4, -36
 14445              		.cfi_offset 5, -32
ARM GAS  /tmp/ccjGZi8K.s 			page 348


 14446              		.cfi_offset 6, -28
 14447              		.cfi_offset 7, -24
 14448              		.cfi_offset 8, -20
 14449              		.cfi_offset 9, -16
 14450              		.cfi_offset 10, -12
 14451              		.cfi_offset 11, -8
 14452              		.cfi_offset 14, -4
 14453 0004 89B0     		sub	sp, sp, #36
 14454              		.cfi_def_cfa_offset 72
1473:src/int.c     **** 	int sx, sy, sz;
 14455              		.loc 1 1473 75 view .LVU4062
 14456 0006 1746     		mov	r7, r2
 14457 0008 0546     		mov	r5, r0
 14458 000a 0C46     		mov	r4, r1
 14459              		.loc 1 1475 30 view .LVU4063
 14460 000c 05AA     		add	r2, sp, #20
 14461              	.LVL1146:
 14462              		.loc 1 1475 30 view .LVU4064
 14463 000e DDE91201 		ldrd	r0, [sp, #72]
 14464              	.LVL1147:
1473:src/int.c     **** 	int sx, sy, sz;
 14465              		.loc 1 1473 75 view .LVU4065
 14466 0012 1E46     		mov	r6, r3
 14467              		.loc 1 1475 30 view .LVU4066
 14468 0014 FFF7FEFF 		bl	extract_value
 14469              	.LVL1148:
 14470 0018 0246     		mov	r2, r0
 14471 001a 0B46     		mov	r3, r1
1476:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 14472              		.loc 1 1476 30 view .LVU4067
 14473 001c 3846     		mov	r0, r7
 14474 001e 3146     		mov	r1, r6
1475:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 14475              		.loc 1 1475 30 view .LVU4068
 14476 0020 9046     		mov	r8, r2
 14477              		.loc 1 1476 30 view .LVU4069
 14478 0022 06AA     		add	r2, sp, #24
1475:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 14479              		.loc 1 1475 30 view .LVU4070
 14480 0024 9946     		mov	r9, r3
 14481              	.LVL1149:
 14482              		.loc 1 1476 2 is_stmt 1 view .LVU4071
 14483              		.loc 1 1476 30 is_stmt 0 view .LVU4072
 14484 0026 FFF7FEFF 		bl	extract_value
 14485              	.LVL1150:
 14486 002a 0246     		mov	r2, r0
 14487 002c 0B46     		mov	r3, r1
1477:src/int.c     **** 	unsigned long long int vz = extract_value(z, &sz);
 14488              		.loc 1 1477 30 view .LVU4073
 14489 002e 2846     		mov	r0, r5
 14490 0030 2146     		mov	r1, r4
1476:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 14491              		.loc 1 1476 30 view .LVU4074
 14492 0032 1646     		mov	r6, r2
 14493              		.loc 1 1477 30 view .LVU4075
 14494 0034 07AA     		add	r2, sp, #28
1476:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
ARM GAS  /tmp/ccjGZi8K.s 			page 349


 14495              		.loc 1 1476 30 view .LVU4076
 14496 0036 1F46     		mov	r7, r3
 14497              	.LVL1151:
 14498              		.loc 1 1477 2 is_stmt 1 view .LVU4077
 14499              		.loc 1 1477 30 is_stmt 0 view .LVU4078
 14500 0038 FFF7FEFF 		bl	extract_value
 14501              	.LVL1152:
1478:src/int.c     **** 	unsigned long long int r;
1479:src/int.c     **** 
1480:src/int.c     **** 	if (sx || sy || sz || vx <= 1)
 14502              		.loc 1 1480 15 view .LVU4079
 14503 003c DDE90535 		ldrd	r3, r5, [sp, #20]
 14504 0040 079A     		ldr	r2, [sp, #28]
 14505 0042 2B43     		orrs	r3, r3, r5
 14506 0044 1343     		orrs	r3, r3, r2
1477:src/int.c     **** 	unsigned long long int vz = extract_value(z, &sz);
 14507              		.loc 1 1477 30 view .LVU4080
 14508 0046 0446     		mov	r4, r0
 14509              	.LVL1153:
1478:src/int.c     **** 	unsigned long long int r;
 14510              		.loc 1 1478 2 is_stmt 1 view .LVU4081
 14511              		.loc 1 1480 2 view .LVU4082
 14512              		.loc 1 1480 15 is_stmt 0 view .LVU4083
 14513 0048 63D1     		bne	.L914
 14514              		.loc 1 1480 21 discriminator 3 view .LVU4084
 14515 004a B9F1000F 		cmp	r9, #0
 14516 004e 08BF     		it	eq
 14517 0050 B8F1020F 		cmpeq	r8, #2
 14518 0054 5DD3     		bcc	.L914
1481:src/int.c     **** 		report_err(ERR_DOMAIN);
1482:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14519              		.loc 1 1482 2 is_stmt 1 view .LVU4085
 14520              		.loc 1 1482 16 is_stmt 0 view .LVU4086
 14521 0056 3A4B     		ldr	r3, .L929
 14522              		.loc 1 1482 5 view .LVU4087
 14523 0058 1A88     		ldrh	r2, [r3]
 14524 005a 40F20A43 		movw	r3, #1034
 14525 005e 9A42     		cmp	r2, r3
 14526 0060 62D1     		bne	.L916
 14527              	.LVL1154:
 14528              	.L928:
1483:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14529              		.loc 1 1483 3 is_stmt 1 view .LVU4088
 14530              	.LBB1981:
 14531              	.LBI1981:
1398:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 14532              		.loc 1 1398 27 view .LVU4089
 14533              	.LBB1982:
1399:src/int.c     **** 	while (b > 0) {
 14534              		.loc 1 1399 2 view .LVU4090
1399:src/int.c     **** 	while (b > 0) {
 14535              		.loc 1 1399 30 is_stmt 0 view .LVU4091
 14536 0062 2046     		mov	r0, r4
 14537 0064 4246     		mov	r2, r8
 14538 0066 4B46     		mov	r3, r9
 14539 0068 FFF7FEFF 		bl	__aeabi_uldivmod
 14540              	.LVL1155:
ARM GAS  /tmp/ccjGZi8K.s 			page 350


1399:src/int.c     **** 	while (b > 0) {
 14541              		.loc 1 1399 30 view .LVU4092
 14542 006c 1D46     		mov	r5, r3
1400:src/int.c     **** 		if ((b & 1))
 14543              		.loc 1 1400 8 view .LVU4093
 14544 006e 56EA0703 		orrs	r3, r6, r7
1399:src/int.c     **** 	while (b > 0) {
 14545              		.loc 1 1399 30 view .LVU4094
 14546 0072 1446     		mov	r4, r2
 14547              	.LVL1156:
1400:src/int.c     **** 		if ((b & 1))
 14548              		.loc 1 1400 2 is_stmt 1 view .LVU4095
1400:src/int.c     **** 		if ((b & 1))
 14549              		.loc 1 1400 8 view .LVU4096
 14550 0074 60D0     		beq	.L922
1399:src/int.c     **** 	while (b > 0) {
 14551              		.loc 1 1399 25 is_stmt 0 view .LVU4097
 14552 0076 0023     		movs	r3, #0
 14553 0078 CDE90233 		strd	r3, r3, [sp, #8]
 14554              	.LVL1157:
 14555              	.L919:
1401:src/int.c     **** 			x = (x+y)%c;
 14556              		.loc 1 1401 3 is_stmt 1 view .LVU4098
1402:src/int.c     **** 		y = (y+y)%c;
 14557              		.loc 1 1402 4 view .LVU4099
1401:src/int.c     **** 			x = (x+y)%c;
 14558              		.loc 1 1401 10 is_stmt 0 view .LVU4100
 14559 007c 06F0010A 		and	r10, r6, #1
 14560 0080 4FF0000B 		mov	fp, #0
1401:src/int.c     **** 			x = (x+y)%c;
 14561              		.loc 1 1401 6 view .LVU4101
 14562 0084 5AEA0B03 		orrs	r3, r10, fp
 14563 0088 0AD0     		beq	.L918
1402:src/int.c     **** 		y = (y+y)%c;
 14564              		.loc 1 1402 6 view .LVU4102
 14565 008a 029B     		ldr	r3, [sp, #8]
 14566 008c 0399     		ldr	r1, [sp, #12]
 14567 008e E018     		adds	r0, r4, r3
 14568 0090 45EB0101 		adc	r1, r5, r1
 14569 0094 4246     		mov	r2, r8
 14570 0096 4B46     		mov	r3, r9
 14571 0098 FFF7FEFF 		bl	__aeabi_uldivmod
 14572              	.LVL1158:
 14573 009c CDE90223 		strd	r2, r3, [sp, #8]
 14574              	.LVL1159:
 14575              	.L918:
1403:src/int.c     **** 		b /= 2;
 14576              		.loc 1 1403 3 is_stmt 1 view .LVU4103
1403:src/int.c     **** 		b /= 2;
 14577              		.loc 1 1403 9 is_stmt 0 view .LVU4104
 14578 00a0 2019     		adds	r0, r4, r4
 14579 00a2 45EB0501 		adc	r1, r5, r5
1403:src/int.c     **** 		b /= 2;
 14580              		.loc 1 1403 5 view .LVU4105
 14581 00a6 4246     		mov	r2, r8
 14582 00a8 4B46     		mov	r3, r9
 14583 00aa FFF7FEFF 		bl	__aeabi_uldivmod
ARM GAS  /tmp/ccjGZi8K.s 			page 351


 14584              	.LVL1160:
1404:src/int.c     **** 	}
 14585              		.loc 1 1404 5 view .LVU4106
 14586 00ae 4FEA560C 		lsr	ip, r6, #1
 14587 00b2 4CEAC77C 		orr	ip, ip, r7, lsl #31
 14588 00b6 7908     		lsrs	r1, r7, #1
 14589 00b8 6646     		mov	r6, ip
 14590              	.LVL1161:
1404:src/int.c     **** 	}
 14591              		.loc 1 1404 5 view .LVU4107
 14592 00ba 0F46     		mov	r7, r1
1403:src/int.c     **** 		b /= 2;
 14593              		.loc 1 1403 5 view .LVU4108
 14594 00bc 1D46     		mov	r5, r3
 14595              	.LVL1162:
1400:src/int.c     **** 		if ((b & 1))
 14596              		.loc 1 1400 8 view .LVU4109
 14597 00be 56EA0703 		orrs	r3, r6, r7
1403:src/int.c     **** 		b /= 2;
 14598              		.loc 1 1403 5 view .LVU4110
 14599 00c2 1446     		mov	r4, r2
 14600              	.LVL1163:
1404:src/int.c     **** 	}
 14601              		.loc 1 1404 3 is_stmt 1 view .LVU4111
1400:src/int.c     **** 		if ((b & 1))
 14602              		.loc 1 1400 8 view .LVU4112
 14603 00c4 DAD1     		bne	.L919
 14604 00c6 DDE90201 		ldrd	r0, r1, [sp, #8]
 14605 00ca 4246     		mov	r2, r8
 14606              	.LVL1164:
1400:src/int.c     **** 		if ((b & 1))
 14607              		.loc 1 1400 8 is_stmt 0 view .LVU4113
 14608 00cc 4B46     		mov	r3, r9
 14609 00ce FFF7FEFF 		bl	__aeabi_uldivmod
 14610              	.LVL1165:
 14611 00d2 1046     		mov	r0, r2
 14612 00d4 1946     		mov	r1, r3
 14613              	.LVL1166:
 14614              	.L920:
1400:src/int.c     **** 		if ((b & 1))
 14615              		.loc 1 1400 8 view .LVU4114
 14616              	.LBE1982:
 14617              	.LBE1981:
1484:src/int.c     **** 	else
1485:src/int.c     **** 		r = expmod(vz, vy, vx);
1486:src/int.c     **** 	return build_value(r, 0);
 14618              		.loc 1 1486 2 is_stmt 1 view .LVU4115
 14619              	.LBB1984:
 14620              	.LBI1984:
 147:src/int.c     **** #ifndef TINY_BUILD
 14621              		.loc 1 147 15 view .LVU4116
 14622              	.LBB1985:
 149:src/int.c     **** 	long long int v = mask_value(x);
 14623              		.loc 1 149 2 view .LVU4117
 14624              	.LBB1986:
 14625              	.LBI1986:
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
ARM GAS  /tmp/ccjGZi8K.s 			page 352


 14626              		.loc 1 39 23 view .LVU4118
 14627              	.LBB1987:
  40:src/int.c     **** }
 14628              		.loc 1 40 2 view .LVU4119
  40:src/int.c     **** }
 14629              		.loc 1 40 2 is_stmt 0 view .LVU4120
 14630              	.LBE1987:
 14631              	.LBE1986:
 150:src/int.c     **** 
 14632              		.loc 1 150 2 is_stmt 1 view .LVU4121
 14633              	.LBB1988:
 14634              	.LBI1988:
  92:src/int.c     **** #ifndef TINY_BUILD
 14635              		.loc 1 92 15 view .LVU4122
 14636              	.LBB1989:
  94:src/int.c     **** 	long long int mask;
 14637              		.loc 1 94 2 view .LVU4123
 14638              	.LBB1990:
 14639              	.LBI1990:
  43:src/int.c     **** 	unsigned int il = UState.int_len;
 14640              		.loc 1 43 14 view .LVU4124
 14641              	.LBB1991:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14642              		.loc 1 44 2 view .LVU4125
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14643              		.loc 1 44 26 is_stmt 0 view .LVU4126
 14644 00d6 1B4B     		ldr	r3, .L929+4
 14645              	.LVL1167:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14646              		.loc 1 44 26 view .LVU4127
 14647 00d8 1B68     		ldr	r3, [r3]
 14648              	.LVL1168:
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14649              		.loc 1 44 26 view .LVU4128
 14650 00da 93F8E947 		ldrb	r4, [r3, #2025]	@ zero_extendqisi2
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14651              		.loc 1 44 15 view .LVU4129
 14652 00de 04F03F03 		and	r3, r4, #63
 14653              	.LVL1169:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 14654              		.loc 1 45 2 is_stmt 1 view .LVU4130
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 14655              		.loc 1 45 26 is_stmt 0 view .LVU4131
 14656 00e2 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 14657              		.loc 1 45 5 view .LVU4132
 14658 00e4 3E2A     		cmp	r2, #62
 14659 00e6 11D8     		bhi	.L913
 14660              	.LVL1170:
  45:src/int.c     **** 		return MAX_WORD_SIZE;
 14661              		.loc 1 45 5 view .LVU4133
 14662              	.LBE1991:
 14663              	.LBE1990:
  95:src/int.c     **** 
 14664              		.loc 1 95 2 is_stmt 1 view .LVU4134
  97:src/int.c     **** 		return v;
 14665              		.loc 1 97 2 view .LVU4135
ARM GAS  /tmp/ccjGZi8K.s 			page 353


  99:src/int.c     **** 	return v & mask;
 14666              		.loc 1 99 2 view .LVU4136
 100:src/int.c     **** #else
 14667              		.loc 1 100 2 view .LVU4137
  99:src/int.c     **** 	return v & mask;
 14668              		.loc 1 99 14 is_stmt 0 view .LVU4138
 14669 00e8 0124     		movs	r4, #1
 14670 00ea A3F12002 		sub	r2, r3, #32
 14671 00ee C3F12005 		rsb	r5, r3, #32
 14672 00f2 04FA02F2 		lsl	r2, r4, r2
 14673 00f6 24FA05F5 		lsr	r5, r4, r5
 14674 00fa 9C40     		lsls	r4, r4, r3
  99:src/int.c     **** 	return v & mask;
 14675              		.loc 1 99 7 view .LVU4139
 14676 00fc 14F1FF34 		adds	r4, r4, #-1
  99:src/int.c     **** 	return v & mask;
 14677              		.loc 1 99 14 view .LVU4140
 14678 0100 42EA0502 		orr	r2, r2, r5
  99:src/int.c     **** 	return v & mask;
 14679              		.loc 1 99 7 view .LVU4141
 14680 0104 42F1FF32 		adc	r2, r2, #-1
 100:src/int.c     **** #else
 14681              		.loc 1 100 11 view .LVU4142
 14682 0108 1140     		ands	r1, r1, r2
 14683              	.LVL1171:
 100:src/int.c     **** #else
 14684              		.loc 1 100 11 view .LVU4143
 14685              	.LBE1989:
 14686              	.LBE1988:
 152:src/int.c     **** 		return v;
 14687              		.loc 1 152 2 is_stmt 1 view .LVU4144
 14688              	.LBB1993:
 14689              	.LBB1992:
 100:src/int.c     **** #else
 14690              		.loc 1 100 11 is_stmt 0 view .LVU4145
 14691 010a 2040     		ands	r0, r0, r4
 14692              	.LVL1172:
 14693              	.L913:
 100:src/int.c     **** #else
 14694              		.loc 1 100 11 view .LVU4146
 14695              	.LBE1992:
 14696              	.LBE1993:
 14697              	.LBE1985:
 14698              	.LBE1984:
1487:src/int.c     **** }
 14699              		.loc 1 1487 1 view .LVU4147
 14700 010c 09B0     		add	sp, sp, #36
 14701              		.cfi_remember_state
 14702              		.cfi_def_cfa_offset 36
 14703              		@ sp needed
 14704 010e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14705              	.LVL1173:
 14706              	.L914:
 14707              		.cfi_restore_state
1481:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14708              		.loc 1 1481 3 view .LVU4148
 14709 0112 0120     		movs	r0, #1
ARM GAS  /tmp/ccjGZi8K.s 			page 354


 14710              	.LVL1174:
1481:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14711              		.loc 1 1481 3 view .LVU4149
 14712 0114 0291     		str	r1, [sp, #8]
1481:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14713              		.loc 1 1481 3 is_stmt 1 view .LVU4150
 14714 0116 FFF7FEFF 		bl	report_err
 14715              	.LVL1175:
1482:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14716              		.loc 1 1482 16 is_stmt 0 view .LVU4151
 14717 011a 094B     		ldr	r3, .L929
1481:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14718              		.loc 1 1481 3 view .LVU4152
 14719 011c 0299     		ldr	r1, [sp, #8]
1482:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14720              		.loc 1 1482 2 is_stmt 1 view .LVU4153
1482:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14721              		.loc 1 1482 5 is_stmt 0 view .LVU4154
 14722 011e 1A88     		ldrh	r2, [r3]
 14723 0120 40F20A43 		movw	r3, #1034
 14724 0124 9A42     		cmp	r2, r3
 14725 0126 9CD0     		beq	.L928
 14726              	.LVL1176:
 14727              	.L916:
1485:src/int.c     **** 	return build_value(r, 0);
 14728              		.loc 1 1485 3 is_stmt 1 view .LVU4155
1485:src/int.c     **** 	return build_value(r, 0);
 14729              		.loc 1 1485 7 is_stmt 0 view .LVU4156
 14730 0128 CDE90089 		strd	r8, [sp]
 14731 012c 3246     		mov	r2, r6
 14732 012e 3B46     		mov	r3, r7
 14733 0130 2046     		mov	r0, r4
 14734 0132 FFF7FEFF 		bl	expmod
 14735              	.LVL1177:
1485:src/int.c     **** 	return build_value(r, 0);
 14736              		.loc 1 1485 7 view .LVU4157
 14737 0136 CEE7     		b	.L920
 14738              	.LVL1178:
 14739              	.L922:
 14740              	.LBB1994:
 14741              	.LBB1983:
1400:src/int.c     **** 		if ((b & 1))
 14742              		.loc 1 1400 8 view .LVU4158
 14743 0138 0020     		movs	r0, #0
 14744 013a 0146     		mov	r1, r0
1406:src/int.c     **** }
 14745              		.loc 1 1406 2 is_stmt 1 view .LVU4159
 14746              	.LVL1179:
1406:src/int.c     **** }
 14747              		.loc 1 1406 2 is_stmt 0 view .LVU4160
 14748 013c CBE7     		b	.L920
 14749              	.L930:
 14750 013e 00BF     		.align	2
 14751              	.L929:
 14752 0140 00000000 		.word	XeqOpCode
 14753 0144 00000000 		.word	main_ram
 14754              	.LBE1983:
ARM GAS  /tmp/ccjGZi8K.s 			page 355


 14755              	.LBE1994:
 14756              		.cfi_endproc
 14757              	.LFE72:
 14759              		.section	.text.doFactor,"ax",%progbits
 14760              		.align	1
 14761              		.p2align 2,,3
 14762              		.global	doFactor
 14763              		.syntax unified
 14764              		.thumb
 14765              		.thumb_func
 14766              		.fpu fpv4-sp-d16
 14768              	doFactor:
 14769              	.LVL1180:
 14770              	.LFB74:
1488:src/int.c     **** 
1489:src/int.c     **** #endif
1490:src/int.c     **** 
1491:src/int.c     **** 
1492:src/int.c     **** #ifdef INCLUDE_FACTOR
1493:src/int.c     **** 
1494:src/int.c     **** #ifndef TINY_BUILD
1495:src/int.c     **** 
1496:src/int.c     **** // only need 8 terms for factors > 256
1497:src/int.c     **** #define MAX_TERMS	8
1498:src/int.c     **** 
1499:src/int.c     **** static int dscanOdd(unsigned int d, unsigned int limit, int nd, unsigned int ad[MAX_TERMS])
1500:src/int.c     **** {
1501:src/int.c     **** 	/* given starting odd `d', skip two divisors at a time and thus
1502:src/int.c     **** 	* scan only the odd numbers.
1503:src/int.c     **** 	*/
1504:src/int.c     **** 	int i, j;
1505:src/int.c     **** 	while (ad[0])
1506:src/int.c     **** 	{
1507:src/int.c     **** 		d += 2;
1508:src/int.c     **** 		if (d > limit) return 0; // limit reached
1509:src/int.c     **** 		for (i = nd-2; i >= 0; --i)
1510:src/int.c     **** 		{
1511:src/int.c     **** 			for (j = i; j < nd-1; ++j)
1512:src/int.c     **** 			{
1513:src/int.c     **** 				int v = ad[j] - ad[j+1] - ad[j+1];
1514:src/int.c     **** 				if (v < 0)
1515:src/int.c     **** 				{
1516:src/int.c     **** 					v += d;
1517:src/int.c     **** 					--ad[j+1];
1518:src/int.c     **** 					if (v < 0)
1519:src/int.c     **** 					{
1520:src/int.c     **** 						v += d;
1521:src/int.c     **** 						--ad[j+1];
1522:src/int.c     **** 					}
1523:src/int.c     **** 				}
1524:src/int.c     **** 				ad[j] = v;
1525:src/int.c     **** 			}
1526:src/int.c     **** 			if (!ad[j]) --nd;
1527:src/int.c     **** 		}
1528:src/int.c     **** 	}
1529:src/int.c     **** 	return d;
1530:src/int.c     **** }
ARM GAS  /tmp/ccjGZi8K.s 			page 356


1531:src/int.c     **** #endif
1532:src/int.c     **** 
1533:src/int.c     **** unsigned long long int doFactor(unsigned long long int n)
1534:src/int.c     **** {
 14771              		.loc 1 1534 1 is_stmt 1 view -0
 14772              		.cfi_startproc
 14773              		@ args = 0, pretend = 0, frame = 48
 14774              		@ frame_needed = 0, uses_anonymous_args = 0
1535:src/int.c     **** #ifndef TINY_BUILD
1536:src/int.c     **** 	/* find the least prime factor of `n'.
1537:src/int.c     **** 	* numbers up to 10^14 can be factored. worst case about 30 seconds
1538:src/int.c     **** 	* on realbuild.
1539:src/int.c     **** 	*
1540:src/int.c     **** 	* returns least prime factor or `n' if prime.
1541:src/int.c     **** 	* returns 0 if failed to find factor.
1542:src/int.c     **** 	*
1543:src/int.c     **** 	* we will only fail if we have a 14 digit number with a factor > dmax (1e7).
1544:src/int.c     **** 	* since we have a 12 digit display, this ought to be good, but actually more digits are
1545:src/int.c     **** 	* held internally. for example 10000019*1000079 displays as scientific, but actually all
1546:src/int.c     **** 	* the digits are held. this example will return 0.
1547:src/int.c     **** 	*/
1548:src/int.c     **** 
1549:src/int.c     **** 	unsigned int d;
 14775              		.loc 1 1549 2 view .LVU4162
1550:src/int.c     **** 	unsigned int dmax = 10000000; // biggest factor, 10^7
 14776              		.loc 1 1550 2 view .LVU4163
1551:src/int.c     **** 	unsigned int rt;
 14777              		.loc 1 1551 2 view .LVU4164
1552:src/int.c     **** 	unsigned int limit;
 14778              		.loc 1 1552 2 view .LVU4165
1553:src/int.c     **** 
1554:src/int.c     **** 	unsigned int ad[MAX_TERMS];
 14779              		.loc 1 1554 2 view .LVU4166
1555:src/int.c     **** 	int nd;
 14780              		.loc 1 1555 2 view .LVU4167
1556:src/int.c     **** 	int i, j;
 14781              		.loc 1 1556 2 view .LVU4168
1557:src/int.c     **** 	unsigned char* cp;
 14782              		.loc 1 1557 2 view .LVU4169
1558:src/int.c     **** 
1559:src/int.c     **** 	// eliminate small cases < 257
1560:src/int.c     **** 	if (n <= 2) return n;
 14783              		.loc 1 1560 2 view .LVU4170
1534:src/int.c     **** #ifndef TINY_BUILD
 14784              		.loc 1 1534 1 is_stmt 0 view .LVU4171
 14785 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 14786              		.cfi_def_cfa_offset 36
 14787              		.cfi_offset 4, -36
 14788              		.cfi_offset 5, -32
 14789              		.cfi_offset 6, -28
 14790              		.cfi_offset 7, -24
 14791              		.cfi_offset 8, -20
 14792              		.cfi_offset 9, -16
 14793              		.cfi_offset 10, -12
 14794              		.cfi_offset 11, -8
 14795              		.cfi_offset 14, -4
 14796              		.loc 1 1560 5 view .LVU4172
ARM GAS  /tmp/ccjGZi8K.s 			page 357


 14797 0004 0029     		cmp	r1, #0
1534:src/int.c     **** #ifndef TINY_BUILD
 14798              		.loc 1 1534 1 view .LVU4173
 14799 0006 8DB0     		sub	sp, sp, #52
 14800              		.cfi_def_cfa_offset 88
 14801              		.loc 1 1560 5 view .LVU4174
 14802 0008 08BF     		it	eq
 14803 000a 0328     		cmpeq	r0, #3
1534:src/int.c     **** #ifndef TINY_BUILD
 14804              		.loc 1 1534 1 view .LVU4175
 14805 000c CDE90201 		strd	r0, [sp, #8]
 14806              		.loc 1 1560 8 view .LVU4176
 14807 0010 0446     		mov	r4, r0
 14808 0012 0D46     		mov	r5, r1
 14809              		.loc 1 1560 5 view .LVU4177
 14810 0014 1FD3     		bcc	.L931
1561:src/int.c     **** 	if ((n & 1) == 0) return 2;
 14811              		.loc 1 1561 2 is_stmt 1 view .LVU4178
 14812              		.loc 1 1561 9 is_stmt 0 view .LVU4179
 14813 0016 00F00102 		and	r2, r0, #1
 14814 001a 0023     		movs	r3, #0
 14815              		.loc 1 1561 5 view .LVU4180
 14816 001c 1343     		orrs	r3, r2, r3
 14817 001e 62D0     		beq	.L956
 14818 0020 DFF86C81 		ldr	r8, .L978+4
 14819 0024 0326     		movs	r6, #3
 14820 0026 08F10E09 		add	r9, r8, #14
 14821 002a 01E0     		b	.L934
 14822              	.LVL1181:
 14823              	.L974:
 14824              		.loc 1 1561 5 view .LVU4181
 14825 002c 18F8016F 		ldrb	r6, [r8, #1]!	@ zero_extendqisi2
 14826              	.LVL1182:
 14827              	.L934:
1562:src/int.c     **** 	for (i=1; i<N_PRIMES; i++) {
1563:src/int.c     **** 		if (n % primes[i] == 0)
 14828              		.loc 1 1563 3 is_stmt 1 view .LVU4182
 14829              		.loc 1 1563 17 is_stmt 0 view .LVU4183
 14830 0030 F6B2     		uxtb	r6, r6
 14831 0032 0027     		movs	r7, #0
 14832              		.loc 1 1563 9 view .LVU4184
 14833 0034 3246     		mov	r2, r6
 14834 0036 3B46     		mov	r3, r7
 14835 0038 2046     		mov	r0, r4
 14836 003a 2946     		mov	r1, r5
 14837 003c FFF7FEFF 		bl	__aeabi_uldivmod
 14838              	.LVL1183:
1562:src/int.c     **** 	for (i=1; i<N_PRIMES; i++) {
 14839              		.loc 1 1562 24 is_stmt 1 view .LVU4185
1562:src/int.c     **** 	for (i=1; i<N_PRIMES; i++) {
 14840              		.loc 1 1562 12 view .LVU4186
 14841              		.loc 1 1563 6 is_stmt 0 view .LVU4187
 14842 0040 1343     		orrs	r3, r2, r3
 14843 0042 0DD0     		beq	.L957
1562:src/int.c     **** 	for (i=1; i<N_PRIMES; i++) {
 14844              		.loc 1 1562 2 discriminator 2 view .LVU4188
 14845 0044 C845     		cmp	r8, r9
ARM GAS  /tmp/ccjGZi8K.s 			page 358


 14846 0046 F1D1     		bne	.L974
1564:src/int.c     **** 			return primes[i];
1565:src/int.c     **** 	}
1566:src/int.c     **** 	if (n <= QUICK_CHECK)		// the number is prime
 14847              		.loc 1 1566 2 is_stmt 1 view .LVU4189
 14848              		.loc 1 1566 5 is_stmt 0 view .LVU4190
 14849 0048 0023     		movs	r3, #0
 14850 004a 40F69852 		movw	r2, #3480
 14851 004e AB42     		cmp	r3, r5
 14852 0050 08BF     		it	eq
 14853 0052 A242     		cmpeq	r2, r4
 14854 0054 0BD3     		bcc	.L975
 14855              	.LVL1184:
 14856              	.L931:
1567:src/int.c     **** 		return n;
1568:src/int.c     **** 
1569:src/int.c     **** 	rt = (unsigned int)intSqrt(n);
1570:src/int.c     **** 	limit = rt;
1571:src/int.c     **** 	if (limit > dmax)
1572:src/int.c     **** 		limit = dmax; // max time about 30 seconds
1573:src/int.c     **** 
1574:src/int.c     **** 	// starting factor for search
1575:src/int.c     **** 	d = 257;
1576:src/int.c     **** 
1577:src/int.c     **** 	// since we've eliminated all factors < 257, convert
1578:src/int.c     **** 	// the initial number to bytes to get base 256
1579:src/int.c     **** 	// XX ASSUME little endian here.
1580:src/int.c     **** 	cp = (unsigned char*)&n;
1581:src/int.c     **** 	nd = 0;
1582:src/int.c     **** 	for (i = 0; i < sizeof(n); ++i)
1583:src/int.c     **** 		if ((ad[i] = *cp++) != 0) ++nd;
1584:src/int.c     **** 
1585:src/int.c     **** 	// and slide to 257
1586:src/int.c     **** 	for (i = nd-2; i >= 0; --i)
1587:src/int.c     **** 	{
1588:src/int.c     **** 		for (j = i; j < nd-1; ++j)
1589:src/int.c     **** 		{
1590:src/int.c     **** 			if ((ad[j] -= ad[j+1]) < 0)
1591:src/int.c     **** 			{
1592:src/int.c     **** 				ad[j] += d;
1593:src/int.c     **** 				--ad[j+1];
1594:src/int.c     **** 			}
1595:src/int.c     **** 		}
1596:src/int.c     **** 		if (!ad[j]) --nd;
1597:src/int.c     **** 	}
1598:src/int.c     **** 
1599:src/int.c     **** 	if (ad[0])
1600:src/int.c     **** 	{
1601:src/int.c     **** 		// find factor or return 0 if limit reached
1602:src/int.c     **** 		d = dscanOdd(d, limit, nd, ad);
1603:src/int.c     **** 		if (!d)
1604:src/int.c     **** 		{
1605:src/int.c     **** 			// no factor found, if limit reached, we've failed
1606:src/int.c     **** 			// otherwise `n' is prime
1607:src/int.c     **** 			if (limit == dmax)
1608:src/int.c     **** 			n = 0; // fail
1609:src/int.c     **** 		}
ARM GAS  /tmp/ccjGZi8K.s 			page 359


1610:src/int.c     **** 	}
1611:src/int.c     **** 
1612:src/int.c     **** 	if (d) n = d;
1613:src/int.c     **** 	return n;
1614:src/int.c     **** #else
1615:src/int.c     **** 	return 0;
1616:src/int.c     **** #endif
1617:src/int.c     **** }
 14857              		.loc 1 1617 1 view .LVU4191
 14858 0056 2046     		mov	r0, r4
 14859 0058 2946     		mov	r1, r5
 14860 005a 0DB0     		add	sp, sp, #52
 14861              		.cfi_remember_state
 14862              		.cfi_def_cfa_offset 36
 14863              		@ sp needed
 14864 005c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14865              	.LVL1185:
 14866              	.L957:
 14867              		.cfi_restore_state
1563:src/int.c     **** 			return primes[i];
 14868              		.loc 1 1563 17 view .LVU4192
 14869 0060 3446     		mov	r4, r6
 14870 0062 3D46     		mov	r5, r7
 14871              		.loc 1 1617 1 view .LVU4193
 14872 0064 2046     		mov	r0, r4
 14873 0066 2946     		mov	r1, r5
 14874 0068 0DB0     		add	sp, sp, #52
 14875              		.cfi_remember_state
 14876              		.cfi_def_cfa_offset 36
 14877              		@ sp needed
 14878 006a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14879              	.LVL1186:
 14880              	.L975:
 14881              		.cfi_restore_state
1569:src/int.c     **** 	limit = rt;
 14882              		.loc 1 1569 2 is_stmt 1 view .LVU4194
1569:src/int.c     **** 	limit = rt;
 14883              		.loc 1 1569 21 is_stmt 0 view .LVU4195
 14884 006e 2046     		mov	r0, r4
 14885 0070 2946     		mov	r1, r5
 14886 0072 FFF7FEFF 		bl	intSqrt
 14887              	.LVL1187:
1581:src/int.c     **** 	for (i = 0; i < sizeof(n); ++i)
 14888              		.loc 1 1581 5 view .LVU4196
 14889 0076 0026     		movs	r6, #0
1569:src/int.c     **** 	limit = rt;
 14890              		.loc 1 1569 21 view .LVU4197
 14891 0078 8146     		mov	r9, r0
 14892              	.LVL1188:
1570:src/int.c     **** 	if (limit > dmax)
 14893              		.loc 1 1570 2 is_stmt 1 view .LVU4198
1571:src/int.c     **** 		limit = dmax; // max time about 30 seconds
 14894              		.loc 1 1571 2 view .LVU4199
1575:src/int.c     **** 
 14895              		.loc 1 1575 2 view .LVU4200
1580:src/int.c     **** 	nd = 0;
 14896              		.loc 1 1580 2 view .LVU4201
ARM GAS  /tmp/ccjGZi8K.s 			page 360


1581:src/int.c     **** 	for (i = 0; i < sizeof(n); ++i)
 14897              		.loc 1 1581 2 view .LVU4202
1582:src/int.c     **** 		if ((ad[i] = *cp++) != 0) ++nd;
 14898              		.loc 1 1582 2 view .LVU4203
1582:src/int.c     **** 		if ((ad[i] = *cp++) != 0) ++nd;
 14899              		.loc 1 1582 14 view .LVU4204
 14900 007a 03A9     		add	r1, sp, #12
1580:src/int.c     **** 	nd = 0;
 14901              		.loc 1 1580 5 is_stmt 0 view .LVU4205
 14902 007c 02AB     		add	r3, sp, #8
 14903              	.LVL1189:
1580:src/int.c     **** 	nd = 0;
 14904              		.loc 1 1580 5 view .LVU4206
 14905 007e 0DF1100A 		add	r10, sp, #16
 14906              	.LVL1190:
 14907              	.L936:
1583:src/int.c     **** 
 14908              		.loc 1 1583 3 is_stmt 1 view .LVU4207
1583:src/int.c     **** 
 14909              		.loc 1 1583 29 view .LVU4208
1583:src/int.c     **** 
 14910              		.loc 1 1583 16 is_stmt 0 view .LVU4209
 14911 0082 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 14912              	.LVL1191:
1583:src/int.c     **** 
 14913              		.loc 1 1583 14 view .LVU4210
 14914 0086 41F8042F 		str	r2, [r1, #4]!
1583:src/int.c     **** 
 14915              		.loc 1 1583 6 view .LVU4211
 14916 008a 02B1     		cbz	r2, .L935
1583:src/int.c     **** 
 14917              		.loc 1 1583 29 discriminator 1 view .LVU4212
 14918 008c 0136     		adds	r6, r6, #1
 14919              	.LVL1192:
 14920              	.L935:
1582:src/int.c     **** 		if ((ad[i] = *cp++) != 0) ++nd;
 14921              		.loc 1 1582 29 is_stmt 1 discriminator 2 view .LVU4213
1582:src/int.c     **** 		if ((ad[i] = *cp++) != 0) ++nd;
 14922              		.loc 1 1582 14 discriminator 2 view .LVU4214
1582:src/int.c     **** 		if ((ad[i] = *cp++) != 0) ++nd;
 14923              		.loc 1 1582 2 is_stmt 0 discriminator 2 view .LVU4215
 14924 008e 5345     		cmp	r3, r10
 14925 0090 F7D1     		bne	.L936
1586:src/int.c     **** 	{
 14926              		.loc 1 1586 2 is_stmt 1 view .LVU4216
 14927              	.LVL1193:
1586:src/int.c     **** 	{
 14928              		.loc 1 1586 17 view .LVU4217
1586:src/int.c     **** 	{
 14929              		.loc 1 1586 2 is_stmt 0 view .LVU4218
 14930 0092 B71E     		subs	r7, r6, #2
 14931              	.LVL1194:
1586:src/int.c     **** 	{
 14932              		.loc 1 1586 2 view .LVU4219
 14933 0094 21D4     		bmi	.L937
 14934 0096 0AEB870E 		add	lr, r10, r7, lsl #2
 14935              	.LVL1195:
ARM GAS  /tmp/ccjGZi8K.s 			page 361


 14936              	.L938:
1588:src/int.c     **** 		{
 14937              		.loc 1 1588 15 is_stmt 1 view .LVU4220
1588:src/int.c     **** 		{
 14938              		.loc 1 1588 21 is_stmt 0 view .LVU4221
 14939 009a 06F1FF3C 		add	ip, r6, #-1
1588:src/int.c     **** 		{
 14940              		.loc 1 1588 3 view .LVU4222
 14941 009e BC45     		cmp	ip, r7
 14942 00a0 D8BF     		it	le
 14943 00a2 3B46     		movle	r3, r7
 14944 00a4 0CDD     		ble	.L942
1588:src/int.c     **** 		{
 14945              		.loc 1 1588 3 view .LVU4223
 14946 00a6 03AB     		add	r3, sp, #12
 14947 00a8 03EB8600 		add	r0, r3, r6, lsl #2
 14948 00ac 7346     		mov	r3, lr
 14949              	.LVL1196:
 14950              	.L939:
1590:src/int.c     **** 			{
 14951              		.loc 1 1590 4 is_stmt 1 view .LVU4224
1590:src/int.c     **** 			{
 14952              		.loc 1 1590 15 is_stmt 0 view .LVU4225
 14953 00ae 1A68     		ldr	r2, [r3]
 14954 00b0 53F8041F 		ldr	r1, [r3, #4]!
 14955 00b4 521A     		subs	r2, r2, r1
1588:src/int.c     **** 		{
 14956              		.loc 1 1588 3 view .LVU4226
 14957 00b6 8342     		cmp	r3, r0
1590:src/int.c     **** 			{
 14958              		.loc 1 1590 15 view .LVU4227
 14959 00b8 43F8042C 		str	r2, [r3, #-4]
1588:src/int.c     **** 		{
 14960              		.loc 1 1588 25 is_stmt 1 view .LVU4228
1588:src/int.c     **** 		{
 14961              		.loc 1 1588 15 view .LVU4229
1588:src/int.c     **** 		{
 14962              		.loc 1 1588 3 is_stmt 0 view .LVU4230
 14963 00bc F7D1     		bne	.L939
 14964 00be 6346     		mov	r3, ip
 14965              	.L942:
1596:src/int.c     **** 	}
 14966              		.loc 1 1596 3 is_stmt 1 view .LVU4231
1596:src/int.c     **** 	}
 14967              		.loc 1 1596 10 is_stmt 0 view .LVU4232
 14968 00c0 0CAA     		add	r2, sp, #48
 14969 00c2 02EB8303 		add	r3, r2, r3, lsl #2
1586:src/int.c     **** 	{
 14970              		.loc 1 1586 25 view .LVU4233
 14971 00c6 013F     		subs	r7, r7, #1
 14972              	.LVL1197:
1596:src/int.c     **** 	}
 14973              		.loc 1 1596 6 view .LVU4234
 14974 00c8 53F8203C 		ldr	r3, [r3, #-32]
1588:src/int.c     **** 		{
 14975              		.loc 1 1588 21 view .LVU4235
 14976 00cc 002B     		cmp	r3, #0
ARM GAS  /tmp/ccjGZi8K.s 			page 362


 14977 00ce 08BF     		it	eq
 14978 00d0 6646     		moveq	r6, ip
 14979              	.LVL1198:
1586:src/int.c     **** 	{
 14980              		.loc 1 1586 25 is_stmt 1 view .LVU4236
1586:src/int.c     **** 	{
 14981              		.loc 1 1586 17 view .LVU4237
1586:src/int.c     **** 	{
 14982              		.loc 1 1586 2 is_stmt 0 view .LVU4238
 14983 00d2 7A1C     		adds	r2, r7, #1
 14984 00d4 AEF1040E 		sub	lr, lr, #4
 14985 00d8 DFD1     		bne	.L938
 14986              	.L937:
1599:src/int.c     **** 	{
 14987              		.loc 1 1599 2 is_stmt 1 view .LVU4239
1599:src/int.c     **** 	{
 14988              		.loc 1 1599 5 is_stmt 0 view .LVU4240
 14989 00da 049B     		ldr	r3, [sp, #16]
 14990 00dc 53B9     		cbnz	r3, .L976
 14991 00de 40F20114 		movw	r4, #257
 14992 00e2 0025     		movs	r5, #0
 14993              	.LVL1199:
1612:src/int.c     **** 	return n;
 14994              		.loc 1 1612 9 is_stmt 1 view .LVU4241
1613:src/int.c     **** #else
 14995              		.loc 1 1613 2 view .LVU4242
1613:src/int.c     **** #else
 14996              		.loc 1 1613 9 is_stmt 0 view .LVU4243
 14997 00e4 B7E7     		b	.L931
 14998              	.LVL1200:
 14999              	.L956:
1561:src/int.c     **** 	for (i=1; i<N_PRIMES; i++) {
 15000              		.loc 1 1561 27 view .LVU4244
 15001 00e6 0224     		movs	r4, #2
 15002 00e8 0025     		movs	r5, #0
 15003              		.loc 1 1617 1 view .LVU4245
 15004 00ea 2046     		mov	r0, r4
 15005              	.LVL1201:
 15006              		.loc 1 1617 1 view .LVU4246
 15007 00ec 2946     		mov	r1, r5
 15008 00ee 0DB0     		add	sp, sp, #52
 15009              		.cfi_remember_state
 15010              		.cfi_def_cfa_offset 36
 15011              		@ sp needed
 15012 00f0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 15013              	.LVL1202:
 15014              	.L976:
 15015              		.cfi_restore_state
 15016              	.LBB1998:
 15017              	.LBB1999:
1505:src/int.c     **** 	{
 15018              		.loc 1 1505 8 is_stmt 1 view .LVU4247
1507:src/int.c     **** 		if (d > limit) return 0; // limit reached
 15019              		.loc 1 1507 3 view .LVU4248
1508:src/int.c     **** 		for (i = nd-2; i >= 0; --i)
 15020              		.loc 1 1508 3 view .LVU4249
1508:src/int.c     **** 		for (i = nd-2; i >= 0; --i)
ARM GAS  /tmp/ccjGZi8K.s 			page 363


 15021              		.loc 1 1508 6 is_stmt 0 view .LVU4250
 15022 00f4 B9F5817F 		cmp	r9, #258
 15023 00f8 4A46     		mov	r2, r9
 15024 00fa ACD9     		bls	.L931
 15025              	.LVL1203:
1508:src/int.c     **** 		for (i = nd-2; i >= 0; --i)
 15026              		.loc 1 1508 6 view .LVU4251
 15027 00fc 234B     		ldr	r3, .L978
 15028 00fe CDE90045 		strd	r4, [sp]
 15029 0102 9945     		cmp	r9, r3
 15030 0104 28BF     		it	cs
 15031 0106 1A46     		movcs	r2, r3
 15032              	.LVL1204:
1507:src/int.c     **** 		if (d > limit) return 0; // limit reached
 15033              		.loc 1 1507 5 view .LVU4252
 15034 0108 40F20310 		movw	r0, #259
 15035 010c 9346     		mov	fp, r2
 15036              	.LVL1205:
 15037              	.L945:
1509:src/int.c     **** 		{
 15038              		.loc 1 1509 3 is_stmt 1 view .LVU4253
1509:src/int.c     **** 		{
 15039              		.loc 1 1509 18 view .LVU4254
1509:src/int.c     **** 		{
 15040              		.loc 1 1509 3 is_stmt 0 view .LVU4255
 15041 010e B71E     		subs	r7, r6, #2
 15042              	.LVL1206:
1509:src/int.c     **** 		{
 15043              		.loc 1 1509 3 view .LVU4256
 15044 0110 2BD4     		bmi	.L947
1509:src/int.c     **** 		{
 15045              		.loc 1 1509 3 view .LVU4257
 15046 0112 0AEB8708 		add	r8, r10, r7, lsl #2
 15047              	.L948:
 15048              	.LVL1207:
1511:src/int.c     **** 			{
 15049              		.loc 1 1511 16 is_stmt 1 view .LVU4258
1511:src/int.c     **** 			{
 15050              		.loc 1 1511 22 is_stmt 0 view .LVU4259
 15051 0116 06F1FF3C 		add	ip, r6, #-1
1511:src/int.c     **** 			{
 15052              		.loc 1 1511 4 view .LVU4260
 15053 011a BC45     		cmp	ip, r7
 15054 011c D8BF     		it	le
 15055 011e 3B46     		movle	r3, r7
 15056 0120 16DD     		ble	.L954
1511:src/int.c     **** 			{
 15057              		.loc 1 1511 4 view .LVU4261
 15058 0122 03AB     		add	r3, sp, #12
 15059 0124 03EB8605 		add	r5, r3, r6, lsl #2
 15060 0128 4246     		mov	r2, r8
 15061              	.LVL1208:
 15062              	.L951:
 15063              	.LBB2000:
1513:src/int.c     **** 				if (v < 0)
 15064              		.loc 1 1513 5 is_stmt 1 view .LVU4262
1516:src/int.c     **** 					--ad[j+1];
ARM GAS  /tmp/ccjGZi8K.s 			page 364


 15065              		.loc 1 1516 6 view .LVU4263
1513:src/int.c     **** 				if (v < 0)
 15066              		.loc 1 1513 15 is_stmt 0 view .LVU4264
 15067 012a 1368     		ldr	r3, [r2]
1513:src/int.c     **** 				if (v < 0)
 15068              		.loc 1 1513 23 view .LVU4265
 15069 012c 52F8041F 		ldr	r1, [r2, #4]!
 15070              	.LVL1209:
1514:src/int.c     **** 				{
 15071              		.loc 1 1514 5 is_stmt 1 view .LVU4266
1514:src/int.c     **** 				{
 15072              		.loc 1 1514 8 is_stmt 0 view .LVU4267
 15073 0130 B3EB4103 		subs	r3, r3, r1, lsl #1
 15074              	.LVL1210:
1517:src/int.c     **** 					if (v < 0)
 15075              		.loc 1 1517 6 is_stmt 1 view .LVU4268
1518:src/int.c     **** 					{
 15076              		.loc 1 1518 6 view .LVU4269
1514:src/int.c     **** 				{
 15077              		.loc 1 1514 8 is_stmt 0 view .LVU4270
 15078 0134 07D5     		bpl	.L949
1520:src/int.c     **** 						--ad[j+1];
 15079              		.loc 1 1520 7 is_stmt 1 view .LVU4271
1518:src/int.c     **** 					{
 15080              		.loc 1 1518 9 is_stmt 0 view .LVU4272
 15081 0136 1B18     		adds	r3, r3, r0
 15082              	.LVL1211:
1517:src/int.c     **** 					if (v < 0)
 15083              		.loc 1 1517 6 view .LVU4273
 15084 0138 01F1FF34 		add	r4, r1, #-1
1521:src/int.c     **** 					}
 15085              		.loc 1 1521 7 view .LVU4274
 15086 013c 49BF     		itett	mi
 15087 013e 0239     		submi	r1, r1, #2
1517:src/int.c     **** 					if (v < 0)
 15088              		.loc 1 1517 6 view .LVU4275
 15089 0140 1460     		strpl	r4, [r2]
1520:src/int.c     **** 						--ad[j+1];
 15090              		.loc 1 1520 9 view .LVU4276
 15091 0142 1B18     		addmi	r3, r3, r0
 15092              	.LVL1212:
1521:src/int.c     **** 					}
 15093              		.loc 1 1521 7 is_stmt 1 view .LVU4277
 15094 0144 1160     		strmi	r1, [r2]
 15095              	.LVL1213:
 15096              	.L949:
1524:src/int.c     **** 			}
 15097              		.loc 1 1524 5 view .LVU4278
 15098              	.LBE2000:
1511:src/int.c     **** 			{
 15099              		.loc 1 1511 4 is_stmt 0 view .LVU4279
 15100 0146 9542     		cmp	r5, r2
 15101              	.LBB2001:
1524:src/int.c     **** 			}
 15102              		.loc 1 1524 11 view .LVU4280
 15103 0148 42F8043C 		str	r3, [r2, #-4]
 15104              	.LBE2001:
ARM GAS  /tmp/ccjGZi8K.s 			page 365


1511:src/int.c     **** 			{
 15105              		.loc 1 1511 26 is_stmt 1 view .LVU4281
1511:src/int.c     **** 			{
 15106              		.loc 1 1511 16 view .LVU4282
1511:src/int.c     **** 			{
 15107              		.loc 1 1511 4 is_stmt 0 view .LVU4283
 15108 014c EDD1     		bne	.L951
 15109 014e 6346     		mov	r3, ip
 15110              	.L954:
1526:src/int.c     **** 		}
 15111              		.loc 1 1526 4 is_stmt 1 view .LVU4284
1526:src/int.c     **** 		}
 15112              		.loc 1 1526 11 is_stmt 0 view .LVU4285
 15113 0150 0CAA     		add	r2, sp, #48
 15114 0152 02EB8303 		add	r3, r2, r3, lsl #2
1509:src/int.c     **** 		{
 15115              		.loc 1 1509 26 view .LVU4286
 15116 0156 013F     		subs	r7, r7, #1
 15117              	.LVL1214:
1526:src/int.c     **** 		}
 15118              		.loc 1 1526 7 view .LVU4287
 15119 0158 53F8203C 		ldr	r3, [r3, #-32]
1511:src/int.c     **** 			{
 15120              		.loc 1 1511 22 view .LVU4288
 15121 015c 002B     		cmp	r3, #0
 15122 015e 08BF     		it	eq
 15123 0160 6646     		moveq	r6, ip
 15124              	.LVL1215:
1509:src/int.c     **** 		{
 15125              		.loc 1 1509 26 is_stmt 1 view .LVU4289
1509:src/int.c     **** 		{
 15126              		.loc 1 1509 18 view .LVU4290
1509:src/int.c     **** 		{
 15127              		.loc 1 1509 3 is_stmt 0 view .LVU4291
 15128 0162 7B1C     		adds	r3, r7, #1
 15129 0164 A8F10408 		sub	r8, r8, #4
 15130 0168 D5D1     		bne	.L948
 15131              	.L947:
1505:src/int.c     **** 	{
 15132              		.loc 1 1505 8 is_stmt 1 view .LVU4292
 15133 016a 049B     		ldr	r3, [sp, #16]
 15134 016c 5BB1     		cbz	r3, .L977
1507:src/int.c     **** 		if (d > limit) return 0; // limit reached
 15135              		.loc 1 1507 3 view .LVU4293
1507:src/int.c     **** 		if (d > limit) return 0; // limit reached
 15136              		.loc 1 1507 5 is_stmt 0 view .LVU4294
 15137 016e 0230     		adds	r0, r0, #2
 15138              	.LVL1216:
1508:src/int.c     **** 		for (i = nd-2; i >= 0; --i)
 15139              		.loc 1 1508 3 is_stmt 1 view .LVU4295
1508:src/int.c     **** 		for (i = nd-2; i >= 0; --i)
 15140              		.loc 1 1508 6 is_stmt 0 view .LVU4296
 15141 0170 8345     		cmp	fp, r0
 15142 0172 CCD2     		bcs	.L945
 15143              	.LBE1999:
 15144              	.LBE1998:
1607:src/int.c     **** 			n = 0; // fail
ARM GAS  /tmp/ccjGZi8K.s 			page 366


 15145              		.loc 1 1607 7 view .LVU4297
 15146 0174 054B     		ldr	r3, .L978
 15147 0176 9945     		cmp	r9, r3
 15148 0178 DDE90045 		ldrd	r4, [sp]
 15149              	.LVL1217:
1607:src/int.c     **** 			n = 0; // fail
 15150              		.loc 1 1607 4 is_stmt 1 view .LVU4298
1607:src/int.c     **** 			n = 0; // fail
 15151              		.loc 1 1607 7 is_stmt 0 view .LVU4299
 15152 017c FFF46BAF 		bcc	.L931
 15153 0180 0024     		movs	r4, #0
 15154 0182 0025     		movs	r5, #0
 15155 0184 67E7     		b	.L931
 15156              	.LVL1218:
 15157              	.L977:
 15158              	.LBB2003:
 15159              	.LBB2002:
1529:src/int.c     **** }
 15160              		.loc 1 1529 2 is_stmt 1 view .LVU4300
1529:src/int.c     **** }
 15161              		.loc 1 1529 2 is_stmt 0 view .LVU4301
 15162              	.LBE2002:
 15163              	.LBE2003:
1603:src/int.c     **** 		{
 15164              		.loc 1 1603 3 is_stmt 1 view .LVU4302
 15165 0186 0446     		mov	r4, r0
 15166 0188 0025     		movs	r5, #0
 15167 018a 64E7     		b	.L931
 15168              	.L979:
 15169              		.align	2
 15170              	.L978:
 15171 018c 80969800 		.word	10000000
 15172 0190 01000000 		.word	.LANCHOR0+1
 15173              		.cfi_endproc
 15174              	.LFE74:
 15176              		.section	.text.intFactor,"ax",%progbits
 15177              		.align	1
 15178              		.p2align 2,,3
 15179              		.global	intFactor
 15180              		.syntax unified
 15181              		.thumb
 15182              		.thumb_func
 15183              		.fpu fpv4-sp-d16
 15185              	intFactor:
 15186              	.LVL1219:
 15187              	.LFB75:
1618:src/int.c     **** #undef MAX_TERMS
1619:src/int.c     **** 
1620:src/int.c     **** 
1621:src/int.c     **** long long int intFactor(long long int x) {
 15188              		.loc 1 1621 42 view -0
 15189              		.cfi_startproc
 15190              		@ args = 0, pretend = 0, frame = 8
 15191              		@ frame_needed = 0, uses_anonymous_args = 0
1622:src/int.c     **** 	int sx;
 15192              		.loc 1 1622 2 view .LVU4304
1623:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
ARM GAS  /tmp/ccjGZi8K.s 			page 367


 15193              		.loc 1 1623 2 view .LVU4305
1621:src/int.c     **** 	int sx;
 15194              		.loc 1 1621 42 is_stmt 0 view .LVU4306
 15195 0000 00B5     		push	{lr}
 15196              		.cfi_def_cfa_offset 4
 15197              		.cfi_offset 14, -4
 15198 0002 83B0     		sub	sp, sp, #12
 15199              		.cfi_def_cfa_offset 16
 15200              		.loc 1 1623 30 view .LVU4307
 15201 0004 01AA     		add	r2, sp, #4
 15202 0006 FFF7FEFF 		bl	extract_value
 15203              	.LVL1220:
1624:src/int.c     **** 	unsigned long long int r = doFactor(vx);
 15204              		.loc 1 1624 2 is_stmt 1 view .LVU4308
 15205              		.loc 1 1624 29 is_stmt 0 view .LVU4309
 15206 000a FFF7FEFF 		bl	doFactor
 15207              	.LVL1221:
1625:src/int.c     **** 	return build_value(r, sx);
 15208              		.loc 1 1625 2 is_stmt 1 view .LVU4310
 15209              		.loc 1 1625 9 is_stmt 0 view .LVU4311
 15210 000e 019A     		ldr	r2, [sp, #4]
 15211 0010 FFF7FEFF 		bl	build_value
 15212              	.LVL1222:
1626:src/int.c     **** }
 15213              		.loc 1 1626 1 view .LVU4312
 15214 0014 03B0     		add	sp, sp, #12
 15215              		.cfi_def_cfa_offset 4
 15216              		@ sp needed
 15217 0016 5DF804FB 		ldr	pc, [sp], #4
 15218              		.cfi_endproc
 15219              	.LFE75:
 15221 001a 00BF     		.section	.rodata.primes,"a"
 15222              		.align	2
 15223              		.set	.LANCHOR0,. + 0
 15226              	primes:
 15227 0000 02030507 		.ascii	"\002\003\005\007\013\015\021\023\027\035\037%)+/5"
 15227      0B0D1113 
 15227      171D1F25 
 15227      292B2F35 
 15228              		.text
 15229              	.Letext0:
 15230              		.file 2 "src/decNumber/decContext.h"
 15231              		.file 3 "src/decNumber/decNumber.h"
 15232              		.file 4 "src/decNumber/decimal64.h"
 15233              		.file 5 "src/decNumber/decimal128.h"
 15234              		.file 6 "src/xeq.h"
 15235              		.file 7 "src/data.h"
 15236              		.file 8 "src/storage.h"
ARM GAS  /tmp/ccjGZi8K.s 			page 368


DEFINED SYMBOLS
                            *ABS*:0000000000000000 int.c
     /tmp/ccjGZi8K.s:19     .text.multiply_with_overflow:0000000000000000 $t
     /tmp/ccjGZi8K.s:27     .text.multiply_with_overflow:0000000000000000 multiply_with_overflow
     /tmp/ccjGZi8K.s:292    .text.multiply_with_overflow:00000000000000cc $d
     /tmp/ccjGZi8K.s:302    .text.expmod:0000000000000000 $t
     /tmp/ccjGZi8K.s:309    .text.expmod:0000000000000000 expmod
     /tmp/ccjGZi8K.s:699    .text.set_carry.part.0:0000000000000000 $t
     /tmp/ccjGZi8K.s:706    .text.set_carry.part.0:0000000000000000 set_carry.part.0
     /tmp/ccjGZi8K.s:723    .text.intASR:0000000000000000 $t
     /tmp/ccjGZi8K.s:730    .text.intASR:0000000000000000 intASR
     /tmp/ccjGZi8K.s:924    .text.intASR:000000000000009c $d
     /tmp/ccjGZi8K.s:933    .text.intLSR:0000000000000000 $t
     /tmp/ccjGZi8K.s:940    .text.intLSR:0000000000000000 intLSR
     /tmp/ccjGZi8K.s:1164   .text.intLSR:0000000000000088 $d
     /tmp/ccjGZi8K.s:1169   .text.intLSL:0000000000000000 $t
     /tmp/ccjGZi8K.s:1176   .text.intLSL:0000000000000000 intLSL
     /tmp/ccjGZi8K.s:1390   .text.intLSL:0000000000000094 $d
     /tmp/ccjGZi8K.s:1399   .text.intRRC:0000000000000000 $t
     /tmp/ccjGZi8K.s:1406   .text.intRRC:0000000000000000 intRRC
     /tmp/ccjGZi8K.s:1618   .text.intRRC:0000000000000088 $d
     /tmp/ccjGZi8K.s:1627   .text.intRLC:0000000000000000 $t
     /tmp/ccjGZi8K.s:1634   .text.intRLC:0000000000000000 intRLC
     /tmp/ccjGZi8K.s:1877   .text.intRLC:00000000000000a0 $d
     /tmp/ccjGZi8K.s:1886   .text.intRR:0000000000000000 $t
     /tmp/ccjGZi8K.s:1893   .text.intRR:0000000000000000 intRR
     /tmp/ccjGZi8K.s:2117   .text.intRR:000000000000009c $d
     /tmp/ccjGZi8K.s:2126   .text.intRL:0000000000000000 $t
     /tmp/ccjGZi8K.s:2133   .text.intRL:0000000000000000 intRL
     /tmp/ccjGZi8K.s:2358   .text.intRL:00000000000000a8 $d
     /tmp/ccjGZi8K.s:2367   .text.set_overflow.part.0:0000000000000000 $t
     /tmp/ccjGZi8K.s:2374   .text.set_overflow.part.0:0000000000000000 set_overflow.part.0
     /tmp/ccjGZi8K.s:2391   .text.calc_overflow:0000000000000000 $t
     /tmp/ccjGZi8K.s:2398   .text.calc_overflow:0000000000000000 calc_overflow
     /tmp/ccjGZi8K.s:2717   .text.calc_overflow:0000000000000154 $d
     /tmp/ccjGZi8K.s:2722   .text.int_base:0000000000000000 $t
     /tmp/ccjGZi8K.s:2730   .text.int_base:0000000000000000 int_base
     /tmp/ccjGZi8K.s:2758   .text.int_base:0000000000000018 $d
     /tmp/ccjGZi8K.s:2763   .text.int_mode:0000000000000000 $t
     /tmp/ccjGZi8K.s:2771   .text.int_mode:0000000000000000 int_mode
     /tmp/ccjGZi8K.s:2789   .text.int_mode:0000000000000010 $d
     /tmp/ccjGZi8K.s:2794   .text.word_size:0000000000000000 $t
     /tmp/ccjGZi8K.s:2802   .text.word_size:0000000000000000 word_size
     /tmp/ccjGZi8K.s:2831   .text.word_size:0000000000000018 $d
     /tmp/ccjGZi8K.s:2836   .text.get_carry:0000000000000000 $t
     /tmp/ccjGZi8K.s:2844   .text.get_carry:0000000000000000 get_carry
     /tmp/ccjGZi8K.s:2860   .text.set_carry:0000000000000000 $t
     /tmp/ccjGZi8K.s:2868   .text.set_carry:0000000000000000 set_carry
     /tmp/ccjGZi8K.s:2893   .text.get_overflow:0000000000000000 $t
     /tmp/ccjGZi8K.s:2901   .text.get_overflow:0000000000000000 get_overflow
     /tmp/ccjGZi8K.s:2917   .text.set_overflow:0000000000000000 $t
     /tmp/ccjGZi8K.s:2925   .text.set_overflow:0000000000000000 set_overflow
     /tmp/ccjGZi8K.s:2950   .text.mask_value:0000000000000000 $t
     /tmp/ccjGZi8K.s:2958   .text.mask_value:0000000000000000 mask_value
     /tmp/ccjGZi8K.s:3028   .text.mask_value:000000000000003c $d
     /tmp/ccjGZi8K.s:3033   .text.extract_value:0000000000000000 $t
     /tmp/ccjGZi8K.s:3041   .text.extract_value:0000000000000000 extract_value
ARM GAS  /tmp/ccjGZi8K.s 			page 369


     /tmp/ccjGZi8K.s:3321   .text.extract_value:00000000000000f4 $d
     /tmp/ccjGZi8K.s:3326   .text.divmod:0000000000000000 $t
     /tmp/ccjGZi8K.s:3333   .text.divmod:0000000000000000 divmod
     /tmp/ccjGZi8K.s:4179   .text.divmod:0000000000000354 $d
     /tmp/ccjGZi8K.s:4185   .text.divmod:0000000000000358 $t
     /tmp/ccjGZi8K.s:4714   .text.build_value:0000000000000000 $t
     /tmp/ccjGZi8K.s:4722   .text.build_value:0000000000000000 build_value
     /tmp/ccjGZi8K.s:5051   .text.build_value:00000000000000fc $d
     /tmp/ccjGZi8K.s:5060   .text.check_overflow:0000000000000000 $t
     /tmp/ccjGZi8K.s:5068   .text.check_overflow:0000000000000000 check_overflow
     /tmp/ccjGZi8K.s:5229   .text.check_overflow:00000000000000a0 $d
     /tmp/ccjGZi8K.s:5234   .text.intAdd:0000000000000000 $t
     /tmp/ccjGZi8K.s:5242   .text.intAdd:0000000000000000 intAdd
     /tmp/ccjGZi8K.s:5807   .text.intAdd:00000000000001d4 $d
     /tmp/ccjGZi8K.s:5817   .text.intSubtract:0000000000000000 $t
     /tmp/ccjGZi8K.s:5825   .text.intSubtract:0000000000000000 intSubtract
     /tmp/ccjGZi8K.s:6299   .text.intSubtract:00000000000001bc $d
     /tmp/ccjGZi8K.s:6305   .text.intMultiply:0000000000000000 $t
     /tmp/ccjGZi8K.s:6313   .text.intMultiply:0000000000000000 intMultiply
     /tmp/ccjGZi8K.s:6525   .text.intMultiply:00000000000000a4 $d
     /tmp/ccjGZi8K.s:6534   .text.intDivide:0000000000000000 $t
     /tmp/ccjGZi8K.s:6542   .text.intDivide:0000000000000000 intDivide
     /tmp/ccjGZi8K.s:6982   .text.intDivide:0000000000000178 $d
     /tmp/ccjGZi8K.s:6991   .text.intMod:0000000000000000 $t
     /tmp/ccjGZi8K.s:6999   .text.intMod:0000000000000000 intMod
     /tmp/ccjGZi8K.s:7179   .text.intMod:0000000000000098 $d
     /tmp/ccjGZi8K.s:7184   .text.intMin:0000000000000000 $t
     /tmp/ccjGZi8K.s:7192   .text.intMin:0000000000000000 intMin
     /tmp/ccjGZi8K.s:7315   .text.intMax:0000000000000000 $t
     /tmp/ccjGZi8K.s:7323   .text.intMax:0000000000000000 intMax
     /tmp/ccjGZi8K.s:7446   .text.intGCD:0000000000000000 $t
     /tmp/ccjGZi8K.s:7454   .text.intGCD:0000000000000000 intGCD
     /tmp/ccjGZi8K.s:7663   .text.intGCD:0000000000000098 $d
     /tmp/ccjGZi8K.s:7670   .text.intLCM:0000000000000000 $t
     /tmp/ccjGZi8K.s:7678   .text.intLCM:0000000000000000 intLCM
     /tmp/ccjGZi8K.s:7958   .text.intLCM:00000000000000c8 $d
     /tmp/ccjGZi8K.s:7963   .text.intSqr:0000000000000000 $t
     /tmp/ccjGZi8K.s:7971   .text.intSqr:0000000000000000 intSqr
     /tmp/ccjGZi8K.s:7991   .text.intCube:0000000000000000 $t
     /tmp/ccjGZi8K.s:7999   .text.intCube:0000000000000000 intCube
     /tmp/ccjGZi8K.s:8108   .text.intChs:0000000000000000 $t
     /tmp/ccjGZi8K.s:8116   .text.intChs:0000000000000000 intChs
     /tmp/ccjGZi8K.s:8380   .text.intChs:00000000000000d4 $d
     /tmp/ccjGZi8K.s:8389   .text.intAbs:0000000000000000 $t
     /tmp/ccjGZi8K.s:8397   .text.intAbs:0000000000000000 intAbs
     /tmp/ccjGZi8K.s:8712   .text.intAbs:00000000000000b4 $d
     /tmp/ccjGZi8K.s:8717   .text.intDblMul:0000000000000000 $t
     /tmp/ccjGZi8K.s:8725   .text.intDblMul:0000000000000000 intDblMul
     /tmp/ccjGZi8K.s:9510   .text.intDblMul:00000000000002cc $d
     /tmp/ccjGZi8K.s:9519   .text.intDblDiv:0000000000000000 $t
     /tmp/ccjGZi8K.s:9527   .text.intDblDiv:0000000000000000 intDblDiv
     /tmp/ccjGZi8K.s:9631   .text.intDblRmdr:0000000000000000 $t
     /tmp/ccjGZi8K.s:9639   .text.intDblRmdr:0000000000000000 intDblRmdr
     /tmp/ccjGZi8K.s:9685   .text.intNot:0000000000000000 $t
     /tmp/ccjGZi8K.s:9693   .text.intNot:0000000000000000 intNot
     /tmp/ccjGZi8K.s:9787   .text.intNot:0000000000000044 $d
     /tmp/ccjGZi8K.s:9792   .text.intBooleanOp:0000000000000000 $t
ARM GAS  /tmp/ccjGZi8K.s 			page 370


     /tmp/ccjGZi8K.s:9800   .text.intBooleanOp:0000000000000000 intBooleanOp
     /tmp/ccjGZi8K.s:9958   .text.intBooleanOp:0000000000000078 $d
     /tmp/ccjGZi8K.s:9964   .text.intFP:0000000000000000 $t
     /tmp/ccjGZi8K.s:9972   .text.intFP:0000000000000000 intFP
     /tmp/ccjGZi8K.s:9991   .text.intSign:0000000000000000 $t
     /tmp/ccjGZi8K.s:9999   .text.intSign:0000000000000000 intSign
     /tmp/ccjGZi8K.s:10072  .text.introt:0000000000000000 $t
     /tmp/ccjGZi8K.s:10080  .text.introt:0000000000000000 introt
     /tmp/ccjGZi8K.s:10170  .text.introt:000000000000003c $d
     /tmp/ccjGZi8K.s:10407  .text.introt:00000000000000f8 $d
     /tmp/ccjGZi8K.s:10419  .text.intNumBits:0000000000000000 $t
     /tmp/ccjGZi8K.s:10427  .text.intNumBits:0000000000000000 intNumBits
     /tmp/ccjGZi8K.s:10716  .text.intNumBits:0000000000000074 $d
     /tmp/ccjGZi8K.s:10721  .text.intSqrt:0000000000000000 $t
     /tmp/ccjGZi8K.s:10729  .text.intSqrt:0000000000000000 intSqrt
     /tmp/ccjGZi8K.s:10923  .text.int_power_helper:0000000000000000 $t
     /tmp/ccjGZi8K.s:10931  .text.int_power_helper:0000000000000000 int_power_helper
     /tmp/ccjGZi8K.s:11141  .text.int_power_helper:00000000000000b4 $d
     /tmp/ccjGZi8K.s:11146  .text.intPower:0000000000000000 $t
     /tmp/ccjGZi8K.s:11154  .text.intPower:0000000000000000 intPower
     /tmp/ccjGZi8K.s:11375  .text.intLog2:0000000000000000 $t
     /tmp/ccjGZi8K.s:11383  .text.intLog2:0000000000000000 intLog2
     /tmp/ccjGZi8K.s:11527  .text.int2pow:0000000000000000 $t
     /tmp/ccjGZi8K.s:11535  .text.int2pow:0000000000000000 int2pow
     /tmp/ccjGZi8K.s:11780  .text.int2pow:00000000000000b0 $d
     /tmp/ccjGZi8K.s:11785  .text.intLog10:0000000000000000 $t
     /tmp/ccjGZi8K.s:11793  .text.intLog10:0000000000000000 intLog10
     /tmp/ccjGZi8K.s:11964  .text.int10pow:0000000000000000 $t
     /tmp/ccjGZi8K.s:11972  .text.int10pow:0000000000000000 int10pow
     /tmp/ccjGZi8K.s:12254  .text.int10pow:00000000000000d0 $d
     /tmp/ccjGZi8K.s:12259  .text.int_1pow:0000000000000000 $t
     /tmp/ccjGZi8K.s:12267  .text.int_1pow:0000000000000000 int_1pow
     /tmp/ccjGZi8K.s:12360  .text.int_1pow:000000000000003c $d
     /tmp/ccjGZi8K.s:12367  .text.intMirror:0000000000000000 $t
     /tmp/ccjGZi8K.s:12375  .text.intMirror:0000000000000000 intMirror
     /tmp/ccjGZi8K.s:12522  .text.intMirror:0000000000000098 $d
     /tmp/ccjGZi8K.s:12527  .text.int_justify:0000000000000000 $t
     /tmp/ccjGZi8K.s:12535  .text.int_justify:0000000000000000 int_justify
     /tmp/ccjGZi8K.s:12920  .text.int_justify:0000000000000100 $d
     /tmp/ccjGZi8K.s:12930  .text.intmsks:0000000000000000 $t
     /tmp/ccjGZi8K.s:12938  .text.intmsks:0000000000000000 intmsks
     /tmp/ccjGZi8K.s:13287  .text.intmsks:00000000000000dc $d
     /tmp/ccjGZi8K.s:13294  .text.intbits:0000000000000000 $t
     /tmp/ccjGZi8K.s:13302  .text.intbits:0000000000000000 intbits
     /tmp/ccjGZi8K.s:13397  .text.intbits:0000000000000052 $d
     /tmp/ccjGZi8K.s:13418  .text.intbits:000000000000006a $d
     /tmp/ccjGZi8K.s:13566  .text.intbits:00000000000000e8 $d
     /tmp/ccjGZi8K.s:13571  .text.intFib:0000000000000000 $t
     /tmp/ccjGZi8K.s:13579  .text.intFib:0000000000000000 intFib
     /tmp/ccjGZi8K.s:13968  .text.intFib:0000000000000138 $d
     /tmp/ccjGZi8K.s:13977  .text.isPrime:0000000000000000 $t
     /tmp/ccjGZi8K.s:13985  .text.isPrime:0000000000000000 isPrime
     /tmp/ccjGZi8K.s:14418  .text.isPrime:0000000000000210 $d
     /tmp/ccjGZi8K.s:14424  .text.intmodop:0000000000000000 $t
     /tmp/ccjGZi8K.s:14432  .text.intmodop:0000000000000000 intmodop
     /tmp/ccjGZi8K.s:14752  .text.intmodop:0000000000000140 $d
     /tmp/ccjGZi8K.s:14760  .text.doFactor:0000000000000000 $t
ARM GAS  /tmp/ccjGZi8K.s 			page 371


     /tmp/ccjGZi8K.s:14768  .text.doFactor:0000000000000000 doFactor
     /tmp/ccjGZi8K.s:15171  .text.doFactor:000000000000018c $d
     /tmp/ccjGZi8K.s:15177  .text.intFactor:0000000000000000 $t
     /tmp/ccjGZi8K.s:15185  .text.intFactor:0000000000000000 intFactor
     /tmp/ccjGZi8K.s:15222  .rodata.primes:0000000000000000 $d
     /tmp/ccjGZi8K.s:15226  .rodata.primes:0000000000000000 primes
     /tmp/ccjGZi8K.s:10177  .text.introt:0000000000000043 $d
     /tmp/ccjGZi8K.s:10177  .text.introt:0000000000000044 $t
     /tmp/ccjGZi8K.s:13403  .text.intbits:0000000000000057 $d
     /tmp/ccjGZi8K.s:13403  .text.intbits:0000000000000058 $t
     /tmp/ccjGZi8K.s:13424  .text.intbits:000000000000006f $d
     /tmp/ccjGZi8K.s:13424  .text.intbits:0000000000000070 $t

UNDEFINED SYMBOLS
__aeabi_uldivmod
main_ram
cmdflag
get_user_flag
xset
report_err
XeqOpCode
getX_int
get_reg_n_int
setlastX
set_reg_n_int
setX_int
lift
fin_tst

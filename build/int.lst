ARM GAS  /tmp/ccl34fCK.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"int.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_uldivmod
  18              		.section	.text.multiply_with_overflow,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	multiply_with_overflow:
  28              	.LVL0:
  29              	.LFB18:
  30              		.file 1 "src/int.c"
   1:src/int.c     **** /* This file is part of 34S.
   2:src/int.c     ****  *
   3:src/int.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/int.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/int.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/int.c     ****  * (at your option) any later version.
   7:src/int.c     ****  *
   8:src/int.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/int.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/int.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/int.c     ****  * GNU General Public License for more details.
  12:src/int.c     ****  *
  13:src/int.c     ****  * You should have received a copy of the GNU General Public License
  14:src/int.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/int.c     ****  */
  16:src/int.c     **** 
  17:src/int.c     **** #include "int.h"
  18:src/int.c     **** #include "xeq.h"
  19:src/int.c     **** #ifndef DM42
  20:src/int.c     **** #include "serial.h"
  21:src/int.c     **** #endif
  22:src/int.c     **** 
  23:src/int.c     **** static int check_intmode(void) {
  24:src/int.c     **** 	if (! is_intmode())
  25:src/int.c     **** 		return report_err(ERR_BAD_MODE);
  26:src/int.c     **** 	return 0;
  27:src/int.c     **** }
  28:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 2


  29:src/int.c     **** /* Some utility routines to extract bits of long longs */
  30:src/int.c     **** 
  31:src/int.c     **** unsigned int int_base(void) {
  32:src/int.c     **** 	const unsigned int b = UState.int_base + 1;
  33:src/int.c     **** 	if (b < 2)
  34:src/int.c     **** 		return 10;
  35:src/int.c     **** 	return b;
  36:src/int.c     **** }
  37:src/int.c     **** 
  38:src/int.c     **** enum arithmetic_modes int_mode(void) {
  39:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
  40:src/int.c     **** }
  41:src/int.c     **** 
  42:src/int.c     **** unsigned int word_size(void) {
  43:src/int.c     **** 	unsigned int il = UState.int_len;
  44:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  45:src/int.c     **** 		return MAX_WORD_SIZE;
  46:src/int.c     **** 	return il;
  47:src/int.c     **** }
  48:src/int.c     **** 
  49:src/int.c     **** int get_carry(void) {
  50:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
  51:src/int.c     **** }
  52:src/int.c     **** 
  53:src/int.c     **** void set_carry(int c) {
  54:src/int.c     **** #ifndef TINY_BUILD
  55:src/int.c     **** 	if (c)
  56:src/int.c     **** 		set_user_flag(CARRY_FLAG);
  57:src/int.c     **** 	else
  58:src/int.c     **** 		clr_user_flag(CARRY_FLAG);
  59:src/int.c     **** #endif
  60:src/int.c     **** }
  61:src/int.c     **** 
  62:src/int.c     **** int get_overflow(void) {
  63:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
  64:src/int.c     **** }
  65:src/int.c     **** 
  66:src/int.c     **** void set_overflow(int o) {
  67:src/int.c     **** #ifndef TINY_BUILD
  68:src/int.c     **** 	if (o)
  69:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
  70:src/int.c     **** 	else
  71:src/int.c     **** 		clr_user_flag(OVERFLOW_FLAG);
  72:src/int.c     **** #endif
  73:src/int.c     **** }
  74:src/int.c     **** 
  75:src/int.c     **** #ifndef TINY_BUILD
  76:src/int.c     **** /* Some utility routines for saving and restoring carry and overflow.
  77:src/int.c     ****  * Some operations don't change these flags but their subcomponents might.
  78:src/int.c     ****  */
  79:src/int.c     **** static int save_flags(void) {
  80:src/int.c     **** 	return (get_overflow() << 1) | get_carry();
  81:src/int.c     **** }
  82:src/int.c     **** 
  83:src/int.c     **** static void restore_flags(int co) {
  84:src/int.c     **** 	set_carry(co & 1);
  85:src/int.c     **** 	set_overflow(co & 2);
ARM GAS  /tmp/ccl34fCK.s 			page 3


  86:src/int.c     **** }
  87:src/int.c     **** #endif
  88:src/int.c     **** 
  89:src/int.c     **** /* Utility routine for trimming a value to the current word size
  90:src/int.c     ****  */
  91:src/int.c     **** long long int mask_value(const long long int v) {
  92:src/int.c     **** #ifndef TINY_BUILD
  93:src/int.c     **** 	const unsigned int ws = word_size();
  94:src/int.c     **** 	long long int mask;
  95:src/int.c     **** 
  96:src/int.c     **** 	if (MAX_WORD_SIZE == 64 && ws == 64)
  97:src/int.c     **** 		return v;
  98:src/int.c     **** 	mask = (1LL << ws) - 1;
  99:src/int.c     **** 	return v & mask;
 100:src/int.c     **** #else
 101:src/int.c     **** 	return v;
 102:src/int.c     **** #endif
 103:src/int.c     **** }
 104:src/int.c     **** 
 105:src/int.c     **** #ifndef TINY_BUILD
 106:src/int.c     **** /* Ulility routine for returning a bit mask to get the topmost (sign)
 107:src/int.c     ****  * bit from a number.
 108:src/int.c     ****  */
 109:src/int.c     **** static long long int topbit_mask(void) {
 110:src/int.c     **** 	const unsigned int ws = word_size();
 111:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 112:src/int.c     **** 	return bit;
 113:src/int.c     **** }
 114:src/int.c     **** #endif
 115:src/int.c     **** 
 116:src/int.c     **** /* Utility routine to convert a binary integer into separate sign and
 117:src/int.c     ****  * value components.  The sign returned is 1 for negative and 0 for positive.
 118:src/int.c     ****  */
 119:src/int.c     **** unsigned long long int extract_value(const long long int val, int *const sign) {
 120:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 121:src/int.c     **** 	long long int v = mask_value(val);
 122:src/int.c     **** 	long long int tbm;
 123:src/int.c     **** 
 124:src/int.c     **** 	if (mode == MODE_UNSIGNED) {
 125:src/int.c     **** 		*sign = 0;
 126:src/int.c     **** 		return v;
 127:src/int.c     **** 	}
 128:src/int.c     **** 
 129:src/int.c     **** 	tbm = topbit_mask();
 130:src/int.c     **** 
 131:src/int.c     **** 	if (v & tbm) {
 132:src/int.c     **** 		*sign = 1;
 133:src/int.c     **** 		if (mode == MODE_2COMP)
 134:src/int.c     **** 			v = -v;
 135:src/int.c     **** 		else if (mode == MODE_1COMP)
 136:src/int.c     **** 			v = ~v;
 137:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 138:src/int.c     **** 			v ^= tbm;
 139:src/int.c     **** 	} else
 140:src/int.c     **** 		*sign = 0;
 141:src/int.c     ****     return mask_value(v);
 142:src/int.c     **** }
ARM GAS  /tmp/ccl34fCK.s 			page 4


 143:src/int.c     **** 
 144:src/int.c     **** /* Helper routine to construct a value from the magnitude and sign
 145:src/int.c     ****  */
 146:src/int.c     **** long long int build_value(const unsigned long long int x, const int sign) {
 147:src/int.c     **** #ifndef TINY_BUILD
 148:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 149:src/int.c     **** 	long long int v = mask_value(x);
 150:src/int.c     **** 
 151:src/int.c     **** 	if (sign == 0 || mode == MODE_UNSIGNED)
 152:src/int.c     **** 		return v;
 153:src/int.c     **** 
 154:src/int.c     **** 	if (mode == MODE_2COMP)
 155:src/int.c     **** 		return mask_value(-(signed long long int)v);
 156:src/int.c     **** 	if (mode == MODE_1COMP)
 157:src/int.c     **** 		return mask_value(~v);
 158:src/int.c     **** 	return v | topbit_mask();
 159:src/int.c     **** #else
 160:src/int.c     **** 	return x;
 161:src/int.c     **** #endif
 162:src/int.c     **** }
 163:src/int.c     **** 
 164:src/int.c     **** 
 165:src/int.c     **** /* Utility routine to check if a value has overflowed or not */
 166:src/int.c     **** int check_overflow(long long int x) {
 167:src/int.c     **** 	return mask_value(x) != x ||
 168:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 169:src/int.c     **** }
 170:src/int.c     **** 
 171:src/int.c     **** 
 172:src/int.c     **** #ifndef TINY_BUILD
 173:src/int.c     **** /* Helper routine for addition and subtraction that detemines the proper
 174:src/int.c     ****  * setting for the overflow bit.  This routine should only be called when
 175:src/int.c     ****  * the signs of the operands are the same for addition and different
 176:src/int.c     ****  * for subtraction.  Overflow isn't possible if the signs are opposite.
 177:src/int.c     ****  * The arguments of the operator should be passed in after conversion
 178:src/int.c     ****  * to positive unsigned quantities nominally in two's complement.
 179:src/int.c     ****  */
 180:src/int.c     **** static int calc_overflow(unsigned long long int xv,
 181:src/int.c     **** 		unsigned long long int yv, enum arithmetic_modes mode, int neg) {
 182:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 183:src/int.c     **** 	unsigned long long int u;
 184:src/int.c     **** 	int i;
 185:src/int.c     **** 
 186:src/int.c     **** 	switch (mode) {
 187:src/int.c     **** 	case MODE_UNSIGNED:
 188:src/int.c     **** 		// C doesn't expose the processor's status bits to us so we
 189:src/int.c     **** 		// break the addition down so we don't lose the overflow.
 190:src/int.c     **** 		u = (yv & (tbm-1)) + (xv & (tbm-1));
 191:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 192:src/int.c     **** 		if (i > 1)
 193:src/int.c     **** 			break;
 194:src/int.c     **** 		return 0;
 195:src/int.c     **** 
 196:src/int.c     **** 	case MODE_2COMP:
 197:src/int.c     **** 		u = xv + yv;
 198:src/int.c     **** 		if (neg && u == tbm)
 199:src/int.c     **** 			return 0;
ARM GAS  /tmp/ccl34fCK.s 			page 5


 200:src/int.c     **** 		if (tbm & u)
 201:src/int.c     **** 			break;
 202:src/int.c     **** 		if ((xv == tbm && yv !=0) || (yv == tbm && xv != 0))
 203:src/int.c     **** 			break;
 204:src/int.c     **** 		return 0;
 205:src/int.c     **** 
 206:src/int.c     **** 	case MODE_SGNMANT:
 207:src/int.c     **** 	case MODE_1COMP:
 208:src/int.c     **** 		if (tbm & (xv + yv))
 209:src/int.c     **** 			break;
 210:src/int.c     **** 		return 0;
 211:src/int.c     **** 	}
 212:src/int.c     **** 	set_overflow(1);
 213:src/int.c     **** 	return 1;
 214:src/int.c     **** }
 215:src/int.c     **** #endif
 216:src/int.c     **** 
 217:src/int.c     **** 
 218:src/int.c     **** long long int intAdd(long long int y, long long int x) {
 219:src/int.c     **** #ifndef TINY_BUILD
 220:src/int.c     **** 	int sx, sy;
 221:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 222:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 223:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 224:src/int.c     **** 	long long int v;
 225:src/int.c     **** 	int overflow;
 226:src/int.c     **** 
 227:src/int.c     **** 	set_overflow(0);
 228:src/int.c     **** 	if (sx == sy)
 229:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 230:src/int.c     **** 	else
 231:src/int.c     **** 		overflow = 0;
 232:src/int.c     **** 
 233:src/int.c     **** 	if (mode == MODE_SGNMANT) {
 234:src/int.c     **** 		const long long int tbm = topbit_mask();
 235:src/int.c     **** 		const long long int x2 = (x & tbm)?-(x ^ tbm):x;
 236:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 237:src/int.c     **** 
 238:src/int.c     **** 		set_carry(overflow);
 239:src/int.c     **** 
 240:src/int.c     **** 		v = y2 + x2;
 241:src/int.c     **** 		if (v & tbm)
 242:src/int.c     **** 			v = -v | tbm;
 243:src/int.c     **** 	} else {
 244:src/int.c     **** 		int carry;
 245:src/int.c     **** 		const unsigned long long int u = mask_value(y + x);
 246:src/int.c     **** 
 247:src/int.c     **** 		if (u < (unsigned long long int)mask_value(y)) {
 248:src/int.c     **** 			set_carry(1);
 249:src/int.c     **** 			carry = 1;
 250:src/int.c     **** 		} else {
 251:src/int.c     **** 			set_carry(0);
 252:src/int.c     **** 			carry = 0;
 253:src/int.c     **** 		}
 254:src/int.c     **** 
 255:src/int.c     **** 		v = y + x;
 256:src/int.c     **** 		if (carry && mode == MODE_1COMP)
ARM GAS  /tmp/ccl34fCK.s 			page 6


 257:src/int.c     **** 			v++;
 258:src/int.c     **** 	}
 259:src/int.c     **** 	return mask_value(v);
 260:src/int.c     **** #else
 261:src/int.c     **** 	return y+x;
 262:src/int.c     **** #endif
 263:src/int.c     **** }
 264:src/int.c     **** 
 265:src/int.c     **** long long int intSubtract(long long int y, long long int x) {
 266:src/int.c     **** #ifndef TINY_BUILD
 267:src/int.c     **** 	int sx, sy;
 268:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 269:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 270:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 271:src/int.c     **** 	long long int v, tbm;
 272:src/int.c     **** 
 273:src/int.c     **** 	set_overflow(0);
 274:src/int.c     **** 	if (sx != sy)
 275:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 276:src/int.c     **** 
 277:src/int.c     **** 	if (mode == MODE_SGNMANT) {
 278:src/int.c     **** 		long long int x2, y2;
 279:src/int.c     **** 		set_carry((sx == 0 && sy == 0 && xv > yv) ||
 280:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 281:src/int.c     **** 
 282:src/int.c     **** 		tbm = topbit_mask();
 283:src/int.c     **** 		x2 = (x & tbm)?-(x ^ tbm):x;
 284:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 285:src/int.c     **** 
 286:src/int.c     **** 		v = y2 - x2;
 287:src/int.c     **** 		if (v & tbm)
 288:src/int.c     **** 			v = -v | tbm;
 289:src/int.c     **** 	} else {
 290:src/int.c     **** 		int borrow;
 291:src/int.c     **** 
 292:src/int.c     **** 		if ((unsigned long long int)y < (unsigned long long int)x) {
 293:src/int.c     **** 			set_carry(1);
 294:src/int.c     **** 			if (mode == MODE_UNSIGNED)
 295:src/int.c     **** 				set_overflow(1);
 296:src/int.c     **** 			borrow = 1;
 297:src/int.c     **** 		} else {
 298:src/int.c     **** 			set_carry(0);
 299:src/int.c     **** 			borrow = 0;
 300:src/int.c     **** 		}
 301:src/int.c     **** 
 302:src/int.c     **** 		v = y - x;
 303:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 304:src/int.c     **** 			v--;
 305:src/int.c     **** 	}
 306:src/int.c     **** 	return mask_value(v);
 307:src/int.c     **** #else
 308:src/int.c     **** 	return y-x;
 309:src/int.c     **** #endif
 310:src/int.c     **** }
 311:src/int.c     **** 
 312:src/int.c     **** static unsigned long long int multiply_with_overflow(unsigned long long int x, unsigned long long i
  31              		.loc 1 312 121 view -0
ARM GAS  /tmp/ccl34fCK.s 			page 7


  32              		.cfi_startproc
  33              		@ args = 4, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
 313:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  35              		.loc 1 313 2 view .LVU1
  36              	.LBB570:
  37              	.LBB571:
  38              	.LBB572:
  39              	.LBB573:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  40              		.loc 1 43 26 is_stmt 0 view .LVU2
  41 0000 DFF8C8C0 		ldr	ip, .L17
  42              	.LBE573:
  43              	.LBE572:
  44              	.LBE571:
  45              	.LBE570:
 312:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  46              		.loc 1 312 121 view .LVU3
  47 0004 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  48              		.cfi_def_cfa_offset 40
  49              		.cfi_offset 3, -40
  50              		.cfi_offset 4, -36
  51              		.cfi_offset 5, -32
  52              		.cfi_offset 6, -28
  53              		.cfi_offset 7, -24
  54              		.cfi_offset 8, -20
  55              		.cfi_offset 9, -16
  56              		.cfi_offset 10, -12
  57              		.cfi_offset 11, -8
  58              		.cfi_offset 14, -4
  59              	.LBB589:
  60              	.LBB584:
  61              	.LBB579:
  62              	.LBB574:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  63              		.loc 1 43 26 view .LVU4
  64 0008 9CF8E9B7 		ldrb	fp, [ip, #2025]	@ zero_extendqisi2
  65              	.LBE574:
  66              	.LBE579:
  67              	.LBE584:
  68              	.LBE589:
 312:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  69              		.loc 1 312 121 view .LVU5
  70 000c DDF828A0 		ldr	r10, [sp, #40]
  71 0010 9046     		mov	r8, r2
  72              	.LBB590:
  73              	.LBB585:
  74              	.LBB580:
  75              	.LBB575:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
  76              		.loc 1 43 15 view .LVU6
  77 0012 0BF03F0B 		and	fp, fp, #63
  78              	.LBE575:
  79              	.LBE580:
  80              	.LBE585:
  81              	.LBE590:
  82              		.loc 1 313 48 view .LVU7
ARM GAS  /tmp/ccl34fCK.s 			page 8


  83 0016 00FB03F2 		mul	r2, r0, r3
  84              	.LVL1:
  85              		.loc 1 313 48 view .LVU8
  86 001a A0FB0845 		umull	r4, r5, r0, r8
 312:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
  87              		.loc 1 312 121 view .LVU9
  88 001e 0646     		mov	r6, r0
  89              	.LBB591:
  90              	.LBB586:
  91              	.LBB581:
  92              	.LBB576:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
  93              		.loc 1 44 26 view .LVU10
  94 0020 0BF1FF30 		add	r0, fp, #-1
  95              	.LVL2:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
  96              		.loc 1 44 26 view .LVU11
  97              	.LBE576:
  98              	.LBE581:
  99              	.LBE586:
 100              	.LBE591:
 101              		.loc 1 313 48 view .LVU12
 102 0024 08FB0122 		mla	r2, r8, r1, r2
 103              	.LBB592:
 104              	.LBB587:
 105              	.LBB582:
 106              	.LBB577:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 107              		.loc 1 44 5 view .LVU13
 108 0028 3E28     		cmp	r0, #62
 109              	.LBE577:
 110              	.LBE582:
 111              	.LBE587:
 112              	.LBE592:
 312:src/int.c     **** 	const unsigned long long int t = mask_value(x * y);
 113              		.loc 1 312 121 view .LVU14
 114 002a 0F46     		mov	r7, r1
 115 002c 9946     		mov	r9, r3
 116              		.loc 1 313 48 view .LVU15
 117 002e 2A44     		add	r2, r2, r5
 118              	.LVL3:
 119              	.LBB593:
 120              	.LBI570:
  91:src/int.c     **** #ifndef TINY_BUILD
 121              		.loc 1 91 15 is_stmt 1 view .LVU16
 122              	.LBB588:
  93:src/int.c     **** 	long long int mask;
 123              		.loc 1 93 2 view .LVU17
 124              	.LBB583:
 125              	.LBI572:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 126              		.loc 1 42 14 view .LVU18
 127              	.LBB578:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 128              		.loc 1 43 2 view .LVU19
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 129              		.loc 1 44 2 view .LVU20
ARM GAS  /tmp/ccl34fCK.s 			page 9


  44:src/int.c     **** 		return MAX_WORD_SIZE;
 130              		.loc 1 44 5 is_stmt 0 view .LVU21
 131 0030 3AD8     		bhi	.L14
 132              	.LVL4:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 133              		.loc 1 44 5 view .LVU22
 134              	.LBE578:
 135              	.LBE583:
  94:src/int.c     **** 
 136              		.loc 1 94 2 is_stmt 1 view .LVU23
  96:src/int.c     **** 		return v;
 137              		.loc 1 96 2 view .LVU24
  98:src/int.c     **** 	return v & mask;
 138              		.loc 1 98 2 view .LVU25
  99:src/int.c     **** #else
 139              		.loc 1 99 2 view .LVU26
  98:src/int.c     **** 	return v & mask;
 140              		.loc 1 98 14 is_stmt 0 view .LVU27
 141 0032 0123     		movs	r3, #1
 142 0034 ABF12001 		sub	r1, fp, #32
 143 0038 CBF1200E 		rsb	lr, fp, #32
 144 003c 03FA01F1 		lsl	r1, r3, r1
 145 0040 23FA0EFE 		lsr	lr, r3, lr
 146 0044 03FA0BF3 		lsl	r3, r3, fp
  98:src/int.c     **** 	return v & mask;
 147              		.loc 1 98 7 view .LVU28
 148 0048 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 149              		.loc 1 98 14 view .LVU29
 150 004c 41EA0E01 		orr	r1, r1, lr
  98:src/int.c     **** 	return v & mask;
 151              		.loc 1 98 7 view .LVU30
 152 0050 41F1FF31 		adc	r1, r1, #-1
  99:src/int.c     **** #else
 153              		.loc 1 99 11 view .LVU31
 154 0054 1C40     		ands	r4, r4, r3
 155              	.LVL5:
  99:src/int.c     **** #else
 156              		.loc 1 99 11 view .LVU32
 157 0056 01EA0205 		and	r5, r1, r2
 158              	.L2:
  99:src/int.c     **** #else
 159              		.loc 1 99 11 view .LVU33
 160              	.LBE588:
 161              	.LBE593:
 314:src/int.c     **** 
 315:src/int.c     **** 	if (! *overflow && y != 0) {
 162              		.loc 1 315 2 is_stmt 1 view .LVU34
 163              		.loc 1 315 5 is_stmt 0 view .LVU35
 164 005a DAF80030 		ldr	r3, [r10]
 165 005e FBB9     		cbnz	r3, .L1
 166              		.loc 1 315 18 discriminator 1 view .LVU36
 167 0060 58EA0902 		orrs	r2, r8, r9
 168 0064 1CD0     		beq	.L1
 169              	.LBB594:
 316:src/int.c     **** 		const enum arithmetic_modes mode = int_mode();
 170              		.loc 1 316 3 is_stmt 1 view .LVU37
ARM GAS  /tmp/ccl34fCK.s 			page 10


 171              	.LBB595:
 172              	.LBI595:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 173              		.loc 1 38 23 view .LVU38
 174              	.LBB596:
  39:src/int.c     **** }
 175              		.loc 1 39 2 view .LVU39
 176              	.LVL6:
  39:src/int.c     **** }
 177              		.loc 1 39 2 is_stmt 0 view .LVU40
 178              	.LBE596:
 179              	.LBE595:
 317:src/int.c     **** 		const unsigned long long int tbm = (mode == MODE_UNSIGNED) ? 0 : topbit_mask();
 180              		.loc 1 317 3 is_stmt 1 view .LVU41
 181              	.LBB598:
 182              	.LBB597:
  39:src/int.c     **** }
 183              		.loc 1 39 39 is_stmt 0 view .LVU42
 184 0066 9CF8E827 		ldrb	r2, [ip, #2024]	@ zero_extendqisi2
 185              	.LBE597:
 186              	.LBE598:
 187              		.loc 1 317 66 view .LVU43
 188 006a C2F38102 		ubfx	r2, r2, #2, #2
 189 006e 022A     		cmp	r2, #2
 190 0070 1CD0     		beq	.L4
 191              	.LBB599:
 192              	.LBI599:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 193              		.loc 1 109 22 is_stmt 1 view .LVU44
 194              	.LBB600:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 195              		.loc 1 110 2 view .LVU45
 196              	.LBB601:
 197              	.LBI601:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 198              		.loc 1 42 14 view .LVU46
 199              	.LBB602:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 200              		.loc 1 43 2 view .LVU47
 201              	.LVL7:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 202              		.loc 1 44 2 view .LVU48
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 203              		.loc 1 44 5 is_stmt 0 view .LVU49
 204 0072 3E28     		cmp	r0, #62
 205 0074 25D8     		bhi	.L7
 206 0076 0123     		movs	r3, #1
 207 0078 A0F12001 		sub	r1, r0, #32
 208 007c C0F12002 		rsb	r2, r0, #32
 209 0080 03FA01F1 		lsl	r1, r3, r1
 210 0084 23FA02F2 		lsr	r2, r3, r2
 211 0088 1143     		orrs	r1, r1, r2
 212 008a 03FA00F0 		lsl	r0, r3, r0
 213              	.L5:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 214              		.loc 1 44 5 view .LVU50
 215              	.LBE602:
ARM GAS  /tmp/ccl34fCK.s 			page 11


 216              	.LBE601:
 111:src/int.c     **** 	return bit;
 217              		.loc 1 111 2 is_stmt 1 view .LVU51
 218              	.LVL8:
 112:src/int.c     **** }
 219              		.loc 1 112 2 view .LVU52
 112:src/int.c     **** }
 220              		.loc 1 112 2 is_stmt 0 view .LVU53
 221              	.LBE600:
 222              	.LBE599:
 318:src/int.c     **** 
 319:src/int.c     **** 		if ((t & tbm) != 0 || t / y != x)
 223              		.loc 1 319 3 is_stmt 1 view .LVU54
 224              		.loc 1 319 10 is_stmt 0 view .LVU55
 225 008e 00EA0402 		and	r2, r0, r4
 226 0092 01EA0503 		and	r3, r1, r5
 227              		.loc 1 319 6 view .LVU56
 228 0096 1343     		orrs	r3, r2, r3
 229 0098 08D0     		beq	.L4
 230              	.LVL9:
 231              	.L6:
 320:src/int.c     **** 			*overflow = 1;
 232              		.loc 1 320 4 is_stmt 1 view .LVU57
 233              		.loc 1 320 14 is_stmt 0 view .LVU58
 234 009a 0123     		movs	r3, #1
 235 009c CAF80030 		str	r3, [r10]
 236              	.LBE594:
 321:src/int.c     **** 	}
 322:src/int.c     **** 	return t;
 237              		.loc 1 322 2 is_stmt 1 view .LVU59
 238              	.L1:
 323:src/int.c     **** }
 239              		.loc 1 323 1 is_stmt 0 view .LVU60
 240 00a0 2046     		mov	r0, r4
 241 00a2 2946     		mov	r1, r5
 242 00a4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 243              	.LVL10:
 244              	.L14:
 245              		.loc 1 323 1 view .LVU61
 246 00a8 1546     		mov	r5, r2
 247 00aa D6E7     		b	.L2
 248              	.LVL11:
 249              	.L4:
 250              	.LBB607:
 319:src/int.c     **** 			*overflow = 1;
 251              		.loc 1 319 27 discriminator 1 view .LVU62
 252 00ac 4246     		mov	r2, r8
 253 00ae 4B46     		mov	r3, r9
 254 00b0 2046     		mov	r0, r4
 255 00b2 2946     		mov	r1, r5
 256 00b4 FFF7FEFF 		bl	__aeabi_uldivmod
 257              	.LVL12:
 319:src/int.c     **** 			*overflow = 1;
 258              		.loc 1 319 22 discriminator 1 view .LVU63
 259 00b8 B942     		cmp	r1, r7
 260 00ba 08BF     		it	eq
 261 00bc B042     		cmpeq	r0, r6
ARM GAS  /tmp/ccl34fCK.s 			page 12


 262 00be ECD1     		bne	.L6
 263 00c0 EEE7     		b	.L1
 264              	.LVL13:
 265              	.L7:
 266              	.LBB606:
 267              	.LBB605:
 268              	.LBB604:
 269              	.LBB603:
 319:src/int.c     **** 			*overflow = 1;
 270              		.loc 1 319 22 discriminator 1 view .LVU64
 271 00c2 1846     		mov	r0, r3
 272 00c4 4FF00041 		mov	r1, #-2147483648
 273 00c8 E1E7     		b	.L5
 274              	.L18:
 275 00ca 00BF     		.align	2
 276              	.L17:
 277 00cc 00000000 		.word	PersistentRam
 278              	.LBE603:
 279              	.LBE604:
 280              	.LBE605:
 281              	.LBE606:
 282              	.LBE607:
 283              		.cfi_endproc
 284              	.LFE18:
 286              		.section	.text.expmod,"ax",%progbits
 287              		.align	1
 288              		.p2align 2,,3
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	expmod:
 295              	.LVL14:
 296              	.LFB70:
 324:src/int.c     **** 
 325:src/int.c     **** long long int intMultiply(long long int y, long long int x) {
 326:src/int.c     **** #ifndef TINY_BUILD
 327:src/int.c     **** 	unsigned long long int u;
 328:src/int.c     **** 	int sx, sy;
 329:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 330:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 331:src/int.c     **** 	int overflow = 0;
 332:src/int.c     **** 
 333:src/int.c     **** 	u = multiply_with_overflow(xv, yv, &overflow);
 334:src/int.c     **** 	set_overflow(overflow);
 335:src/int.c     **** 
 336:src/int.c     **** 	if (int_mode() == MODE_UNSIGNED)
 337:src/int.c     **** 		return u;
 338:src/int.c     **** 	return build_value(u & ~topbit_mask(), sx ^ sy);
 339:src/int.c     **** #else
 340:src/int.c     **** 	return x*y;
 341:src/int.c     **** #endif
 342:src/int.c     **** }
 343:src/int.c     **** 
 344:src/int.c     **** #ifndef TINY_BUILD
 345:src/int.c     **** static void err_div0(unsigned long long int num, int sn, int sd) {
 346:src/int.c     **** 	if (num == 0)
ARM GAS  /tmp/ccl34fCK.s 			page 13


 347:src/int.c     **** 		report_err(ERR_DOMAIN);
 348:src/int.c     **** 	else if (sn == sd)
 349:src/int.c     **** 		report_err(ERR_INFINITY);
 350:src/int.c     **** 	else
 351:src/int.c     **** 		report_err(ERR_MINFINITY);
 352:src/int.c     **** }
 353:src/int.c     **** #endif
 354:src/int.c     **** 
 355:src/int.c     **** long long int intDivide(long long int y, long long int x) {
 356:src/int.c     **** #ifndef TINY_BUILD
 357:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 358:src/int.c     **** 	int sx, sy;
 359:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 360:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 361:src/int.c     **** 	unsigned long long int r;
 362:src/int.c     **** 	long long int tbm;
 363:src/int.c     **** 
 364:src/int.c     **** 	if (xv == 0) {
 365:src/int.c     **** 		err_div0(yv, sy, sx);
 366:src/int.c     **** 		return 0;
 367:src/int.c     **** 	}
 368:src/int.c     **** 	set_overflow(0);
 369:src/int.c     **** 	r = mask_value(yv / xv);
 370:src/int.c     **** 	// Set carry if there is a remainder
 371:src/int.c     **** 	set_carry(r * xv != yv);
 372:src/int.c     **** 
 373:src/int.c     **** 	if (mode != MODE_UNSIGNED) {
 374:src/int.c     **** 		tbm = topbit_mask();
 375:src/int.c     **** 		if (r & tbm)
 376:src/int.c     **** 			set_carry(1);
 377:src/int.c     **** 		// Special case for 0x8000...00 / -1 in 2's complement
 378:src/int.c     **** 		if (mode == MODE_2COMP && sx && xv == 1 && y == tbm)
 379:src/int.c     **** 			set_overflow(1);
 380:src/int.c     **** 	}
 381:src/int.c     **** 	return build_value(r, sx ^ sy);
 382:src/int.c     **** #else
 383:src/int.c     **** 	return y/x;
 384:src/int.c     **** #endif
 385:src/int.c     **** }
 386:src/int.c     **** 
 387:src/int.c     **** long long int intMod(long long int y, long long int x) {
 388:src/int.c     **** #ifndef TINY_BUILD
 389:src/int.c     **** 	int sx, sy;
 390:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 391:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 392:src/int.c     **** 	unsigned long long int r;
 393:src/int.c     **** 
 394:src/int.c     **** 	if (xv == 0) {
 395:src/int.c     **** 		err_div0(yv, sy, sx);
 396:src/int.c     **** 		return 0;
 397:src/int.c     **** 	}
 398:src/int.c     **** 	r = yv % xv;
 399:src/int.c     **** #ifdef INCLUDE_MOD41
 400:src/int.c     **** 	if (XeqOpCode == (OP_DYA | OP_MOD41) && sx != sy) {
 401:src/int.c     ****         if (r != 0)
 402:src/int.c     **** 		    r = xv - r;
 403:src/int.c     **** 		sy = sx;
ARM GAS  /tmp/ccl34fCK.s 			page 14


 404:src/int.c     **** 	}
 405:src/int.c     **** #endif
 406:src/int.c     **** 	return build_value(r, sy);
 407:src/int.c     **** #else
 408:src/int.c     **** 	return y%x;
 409:src/int.c     **** #endif
 410:src/int.c     **** }
 411:src/int.c     **** 
 412:src/int.c     **** 
 413:src/int.c     **** long long int intMin(long long int y, long long int x) {
 414:src/int.c     **** #ifndef TINY_BUILD
 415:src/int.c     **** 	int sx, sy;
 416:src/int.c     **** 	const unsigned long long int xv = extract_value(x, &sx);
 417:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 418:src/int.c     **** 
 419:src/int.c     **** 	if (sx != sy) {			// different signs
 420:src/int.c     **** 		if (sx)
 421:src/int.c     **** 			return x;
 422:src/int.c     **** 	} else if (sx) {		// both negative
 423:src/int.c     **** 		if (xv > yv)
 424:src/int.c     **** 			return x;
 425:src/int.c     **** 	} else {			// both positive
 426:src/int.c     **** 		if (xv < yv)
 427:src/int.c     **** 			return x;
 428:src/int.c     **** 	}
 429:src/int.c     **** 	return y;
 430:src/int.c     **** #else
 431:src/int.c     **** 	return 0;
 432:src/int.c     **** #endif
 433:src/int.c     **** }
 434:src/int.c     **** 
 435:src/int.c     **** long long int intMax(long long int y, long long int x) {
 436:src/int.c     **** #ifndef TINY_BUILD
 437:src/int.c     **** 	int sx, sy;
 438:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 439:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 440:src/int.c     **** 
 441:src/int.c     **** 	if (sx != sy) {			// different signs
 442:src/int.c     **** 		if (sx)
 443:src/int.c     **** 			return y;
 444:src/int.c     **** 	} else if (sx) {		// both negative
 445:src/int.c     **** 		if (xv > yv)
 446:src/int.c     **** 			return y;
 447:src/int.c     **** 	} else {			// both positive
 448:src/int.c     **** 		if (xv < yv)
 449:src/int.c     **** 			return y;
 450:src/int.c     **** 	}
 451:src/int.c     **** 	return x;
 452:src/int.c     **** #else
 453:src/int.c     **** 	return 0;
 454:src/int.c     **** #endif
 455:src/int.c     **** }
 456:src/int.c     **** 
 457:src/int.c     **** 
 458:src/int.c     **** #ifdef INCLUDE_MULADD
 459:src/int.c     **** long long int intMAdd(long long int z, long long int y, long long int x) {
 460:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccl34fCK.s 			page 15


 461:src/int.c     **** 	long long int t = intMultiply(x, y);
 462:src/int.c     **** 	const int of = get_overflow();
 463:src/int.c     **** 
 464:src/int.c     **** 	t = intAdd(t, z);
 465:src/int.c     **** 	if (of)
 466:src/int.c     **** 		set_overflow(1);
 467:src/int.c     **** 	return t;
 468:src/int.c     **** #else
 469:src/int.c     **** 	return 0;
 470:src/int.c     **** #endif
 471:src/int.c     **** }
 472:src/int.c     **** #endif
 473:src/int.c     **** 
 474:src/int.c     **** 
 475:src/int.c     **** static unsigned long long int int_gcd(unsigned long long int a, unsigned long long int b) {
 476:src/int.c     **** 	while (b != 0) {
 477:src/int.c     **** 		const unsigned long long int t = b;
 478:src/int.c     **** 		b = a % b;
 479:src/int.c     **** 		a = t;
 480:src/int.c     **** 	}
 481:src/int.c     **** 	return a;
 482:src/int.c     **** }
 483:src/int.c     **** 
 484:src/int.c     **** long long int intGCD(long long int y, long long int x) {
 485:src/int.c     **** 	int s;
 486:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 487:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 488:src/int.c     **** 	unsigned long long int v;
 489:src/int.c     **** 
 490:src/int.c     **** 	if (xv == 0)
 491:src/int.c     **** 		v = yv;
 492:src/int.c     **** 	else if (yv == 0)
 493:src/int.c     **** 		v = xv;
 494:src/int.c     **** 	else
 495:src/int.c     **** 		v = int_gcd(xv, yv);
 496:src/int.c     **** 	return build_value(v, 0);
 497:src/int.c     **** }
 498:src/int.c     **** 
 499:src/int.c     **** long long int intLCM(long long int y, long long int x) {
 500:src/int.c     **** 	int s;
 501:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 502:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 503:src/int.c     **** 	unsigned long long int gcd;
 504:src/int.c     **** 
 505:src/int.c     **** 	if (xv == 0 || yv == 0)
 506:src/int.c     **** 		return 0;
 507:src/int.c     **** 	gcd = int_gcd(xv, yv);
 508:src/int.c     **** 	return intMultiply(mask_value(xv / gcd), build_value(yv, 0));
 509:src/int.c     **** }
 510:src/int.c     **** 
 511:src/int.c     **** long long int intSqr(long long int x) {
 512:src/int.c     **** 	return intMultiply(x, x);
 513:src/int.c     **** }
 514:src/int.c     **** 
 515:src/int.c     **** long long int intCube(long long int x) {
 516:src/int.c     **** #ifndef TINY_BUILD
 517:src/int.c     **** 	long long int y = intMultiply(x, x);
ARM GAS  /tmp/ccl34fCK.s 			page 16


 518:src/int.c     **** 	int overflow = get_overflow();
 519:src/int.c     **** 
 520:src/int.c     **** 	y = intMultiply(x, y);
 521:src/int.c     **** 	if (overflow)
 522:src/int.c     **** 		set_overflow(1);
 523:src/int.c     **** 	return y;
 524:src/int.c     **** #else
 525:src/int.c     **** 	return 0;
 526:src/int.c     **** #endif
 527:src/int.c     **** }
 528:src/int.c     **** 
 529:src/int.c     **** long long int intChs(long long int x) {
 530:src/int.c     **** #ifndef TINY_BUILD
 531:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 532:src/int.c     **** 	int sx;
 533:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 534:src/int.c     **** 
 535:src/int.c     **** 	if (mode == MODE_UNSIGNED || (mode == MODE_2COMP && x == topbit_mask())) {
 536:src/int.c     **** 		set_overflow(1);
 537:src/int.c     **** 		return mask_value(-(signed long long int)xv);
 538:src/int.c     **** 	}
 539:src/int.c     **** 	set_overflow(0);
 540:src/int.c     **** 	return build_value(xv, !sx);
 541:src/int.c     **** #else
 542:src/int.c     **** 	return x;
 543:src/int.c     **** #endif
 544:src/int.c     **** }
 545:src/int.c     **** 
 546:src/int.c     **** long long int intAbs(long long int x) {
 547:src/int.c     **** #ifndef TINY_BUILD
 548:src/int.c     **** 	int sx;
 549:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 550:src/int.c     **** 
 551:src/int.c     **** 	set_overflow(0);
 552:src/int.c     **** 	if (int_mode() == MODE_2COMP && x == topbit_mask()) {
 553:src/int.c     **** 		set_overflow(1);
 554:src/int.c     **** 		return x;
 555:src/int.c     **** 	}
 556:src/int.c     **** 	return build_value(xv, 0);
 557:src/int.c     **** #else
 558:src/int.c     **** 	return x;
 559:src/int.c     **** #endif
 560:src/int.c     **** }
 561:src/int.c     **** 
 562:src/int.c     **** #ifndef TINY_BUILD
 563:src/int.c     **** static void breakup(unsigned long long int x, unsigned short xv[4]) {
 564:src/int.c     **** 	xv[0] = x & 0xffff;
 565:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 566:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 567:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 568:src/int.c     **** }
 569:src/int.c     **** 
 570:src/int.c     **** static unsigned long long int packup(unsigned short int x[4]) {
 571:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 572:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 573:src/int.c     **** 			(((unsigned long int)x[1]) << 16) |
 574:src/int.c     **** 			x[0];
ARM GAS  /tmp/ccl34fCK.s 			page 17


 575:src/int.c     **** }
 576:src/int.c     **** #endif
 577:src/int.c     **** 
 578:src/int.c     **** void intDblMul(enum nilop op) {
 579:src/int.c     **** #ifndef TINY_BUILD
 580:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 581:src/int.c     **** 	unsigned long long int xv, yv;
 582:src/int.c     **** 	int s;	
 583:src/int.c     **** 	unsigned short int xa[4], ya[4];
 584:src/int.c     **** 	unsigned int t[8];
 585:src/int.c     **** 	unsigned short int r[8];
 586:src/int.c     **** 	int i, j;
 587:src/int.c     **** 
 588:src/int.c     **** 	{
 589:src/int.c     **** 		long long int xr, yr;
 590:src/int.c     **** 		int sx, sy;
 591:src/int.c     **** 
 592:src/int.c     **** 		xr = getX_int();
 593:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 594:src/int.c     **** 
 595:src/int.c     **** 		xv = extract_value(xr, &sx);
 596:src/int.c     **** 		yv = extract_value(yr, &sy);
 597:src/int.c     **** 
 598:src/int.c     **** 		s = sx != sy;
 599:src/int.c     **** 	}
 600:src/int.c     **** 
 601:src/int.c     **** 	/* Do the multiplication by breaking the values into unsigned shorts
 602:src/int.c     **** 	 * multiplying them all out and accumulating into unsigned ints.
 603:src/int.c     **** 	 * Then perform a second pass over the ints to propogate carry.
 604:src/int.c     **** 	 * Finally, repack into unsigned long long ints.
 605:src/int.c     **** 	 *
 606:src/int.c     **** 	 * This isn't terribly efficient especially for shorter word
 607:src/int.c     **** 	 * sizes but it works.  Special cases for WS <= 16 and/or WS <= 32
 608:src/int.c     **** 	 * might be worthwhile since the CPU supports these multiplications
 609:src/int.c     **** 	 * natively.
 610:src/int.c     **** 	 */
 611:src/int.c     **** 	breakup(xv, xa);
 612:src/int.c     **** 	breakup(yv, ya);
 613:src/int.c     **** 
 614:src/int.c     **** 	for (i=0; i<8; i++)
 615:src/int.c     **** 		t[i] = 0;
 616:src/int.c     **** 
 617:src/int.c     **** 	for (i=0; i<4; i++)
 618:src/int.c     **** 		for (j=0; j<4; j++)
 619:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 620:src/int.c     **** 
 621:src/int.c     **** 	for (i=0; i<8; i++) {
 622:src/int.c     **** 		if (t[i] >= 65536)
 623:src/int.c     **** 			t[i+1] += t[i] >> 16;
 624:src/int.c     **** 		r[i] = t[i];
 625:src/int.c     **** 	}
 626:src/int.c     **** 
 627:src/int.c     **** 	yv = packup(r);
 628:src/int.c     **** 	xv = packup(r+4);
 629:src/int.c     **** 
 630:src/int.c     **** 	i = word_size();
 631:src/int.c     **** 	if (i != 64)
ARM GAS  /tmp/ccl34fCK.s 			page 18


 632:src/int.c     **** 		xv = (xv << (64-i)) | (yv >> i);
 633:src/int.c     **** 
 634:src/int.c     **** 	setlastX();
 635:src/int.c     **** 
 636:src/int.c     **** 	if (s != 0) {
 637:src/int.c     **** 		if (mode == MODE_2COMP) {
 638:src/int.c     **** 			yv = mask_value(1 + ~yv);
 639:src/int.c     **** 			xv = ~xv;
 640:src/int.c     **** 			if (yv == 0)
 641:src/int.c     **** 				xv++;
 642:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 643:src/int.c     **** 			yv = ~yv;
 644:src/int.c     **** 			xv = ~xv;
 645:src/int.c     **** 		} else
 646:src/int.c     **** 			xv |= topbit_mask();
 647:src/int.c     **** 	}
 648:src/int.c     **** 
 649:src/int.c     **** 	set_reg_n_int(regY_idx, mask_value(yv));
 650:src/int.c     **** 	setX_int(mask_value(xv));
 651:src/int.c     **** 	set_overflow(0);
 652:src/int.c     **** #endif
 653:src/int.c     **** }
 654:src/int.c     **** 
 655:src/int.c     **** 
 656:src/int.c     **** #ifndef TINY_BUILD
 657:src/int.c     **** static int nlz(unsigned short int x) {
 658:src/int.c     ****    int n;
 659:src/int.c     **** 
 660:src/int.c     ****    if (x == 0)
 661:src/int.c     **** 	   return 16;
 662:src/int.c     ****    n = 0;
 663:src/int.c     ****    if (x <= 0x00ff) {n = n + 8; x = x << 8;}
 664:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 665:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 666:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 667:src/int.c     ****    return n;
 668:src/int.c     **** }
 669:src/int.c     **** 
 670:src/int.c     **** /* q[0], r[0], u[0], and v[0] contain the LEAST significant halfwords.
 671:src/int.c     **** (The sequence is in little-endian order).
 672:src/int.c     **** 
 673:src/int.c     **** This first version is a fairly precise implementation of Knuth's
 674:src/int.c     **** Algorithm D, for a binary computer with base b = 2**16.  The caller
 675:src/int.c     **** supplies
 676:src/int.c     ****    1. Space q for the quotient, m - n + 1 halfwords (at least one).
 677:src/int.c     ****    2. Space r for the remainder (optional), n halfwords.
 678:src/int.c     ****    3. The dividend u, m halfwords, m >= 1.
 679:src/int.c     ****    4. The divisor v, n halfwords, n >= 2.
 680:src/int.c     **** The most significant digit of the divisor, v[n-1], must be nonzero.  The
 681:src/int.c     **** dividend u may have leading zeros; this just makes the algorithm take
 682:src/int.c     **** longer and makes the quotient contain more leading zeros.  A value of
 683:src/int.c     **** NULL may be given for the address of the remainder to signify that the
 684:src/int.c     **** caller does not want the remainder.
 685:src/int.c     ****    The program does not alter the input parameters u and v.
 686:src/int.c     ****    The quotient and remainder returned may have leading zeros.
 687:src/int.c     ****    For now, we must have m >= n.  Knuth's Algorithm D also requires
 688:src/int.c     **** that the dividend be at least as long as the divisor.  (In his terms,
ARM GAS  /tmp/ccl34fCK.s 			page 19


 689:src/int.c     **** m >= 0 (unstated).  Therefore m+n >= n.) */
 690:src/int.c     **** 
 691:src/int.c     **** static void divmnu(unsigned short q[], unsigned short r[],
 692:src/int.c     **** 		const unsigned short u[], const unsigned short v[],
 693:src/int.c     **** 		const int m, const int n) {
 694:src/int.c     **** 	const unsigned int b = 65536;			// Number base (16 bits).
 695:src/int.c     **** 	unsigned qhat;					// Estimated quotient digit.
 696:src/int.c     **** 	unsigned rhat;					// A remainder.
 697:src/int.c     **** 	unsigned p;					// Product of two digits.
 698:src/int.c     **** 	int s, i, j, t, k;
 699:src/int.c     **** 	unsigned short vn[8];				// Normalised denominator
 700:src/int.c     **** 	unsigned short un[18];				// Normalised numerator
 701:src/int.c     **** 
 702:src/int.c     **** 	if (n == 1) {					// Take care of
 703:src/int.c     **** 		k = 0;					// the case of a
 704:src/int.c     **** 		for (j = m - 1; j >= 0; j--) {		// single-digit
 705:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 706:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 707:src/int.c     **** 		}
 708:src/int.c     **** 		r[0] = k;
 709:src/int.c     **** 		return;
 710:src/int.c     **** 	}
 711:src/int.c     **** 
 712:src/int.c     **** 	// Normalize by shifting v left just enough so that
 713:src/int.c     **** 	// its high-order bit is on, and shift u left the
 714:src/int.c     **** 	// same amount.  We may have to append a high-order
 715:src/int.c     **** 	// digit on the dividend; we do that unconditionally.
 716:src/int.c     **** 
 717:src/int.c     **** 	s = nlz(v[n-1]);       				 // 0 <= s <= 16.
 718:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 719:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 720:src/int.c     **** 	vn[0] = v[0] << s;
 721:src/int.c     **** 
 722:src/int.c     **** 	un[m] = u[m-1] >> (16-s);
 723:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 724:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 725:src/int.c     **** 	un[0] = u[0] << s;
 726:src/int.c     **** 
 727:src/int.c     **** 	for (j = m - n; j >= 0; j--) {       		// Main loop.
 728:src/int.c     **** 	// Compute estimate qhat of q[j].
 729:src/int.c     **** 	qhat = (un[j+n]*b + un[j+n-1])/vn[n-1];
 730:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 731:src/int.c     **** 	again:
 732:src/int.c     **** 	if (qhat >= b || qhat*vn[n-2] > b*rhat + un[j+n-2]) {
 733:src/int.c     **** 		qhat = qhat - 1;
 734:src/int.c     **** 		rhat = rhat + vn[n-1];
 735:src/int.c     **** 		if (rhat < b) goto again;
 736:src/int.c     **** 	}
 737:src/int.c     **** 
 738:src/int.c     **** 	// Multiply and subtract.
 739:src/int.c     **** 	k = 0;
 740:src/int.c     **** 	for (i = 0; i < n; i++) {
 741:src/int.c     **** 		p = qhat*vn[i];
 742:src/int.c     **** 		t = un[i+j] - k - (p & 0xFFFF);
 743:src/int.c     **** 		un[i+j] = t;
 744:src/int.c     **** 		k = (p >> 16) - (t >> 16);
 745:src/int.c     **** 	}
ARM GAS  /tmp/ccl34fCK.s 			page 20


 746:src/int.c     **** 	t = un[j+n] - k;
 747:src/int.c     **** 	un[j+n] = t;
 748:src/int.c     **** 
 749:src/int.c     **** 	q[j] = qhat;					// Store quotient digit.
 750:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 751:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 752:src/int.c     **** 		k = 0;
 753:src/int.c     **** 		for (i = 0; i < n; i++) {
 754:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 755:src/int.c     **** 			un[i+j] = t;
 756:src/int.c     **** 			k = t >> 16;
 757:src/int.c     **** 		}
 758:src/int.c     **** 		un[j+n] = un[j+n] + k;
 759:src/int.c     **** 		}
 760:src/int.c     **** 	} // End j.
 761:src/int.c     **** 	// Unnormalize remainder
 762:src/int.c     **** 	for (i = 0; i < n; i++)
 763:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 764:src/int.c     **** }
 765:src/int.c     **** 
 766:src/int.c     **** static unsigned long long int divmod(const long long int z, const long long int y,
 767:src/int.c     **** 		const long long int x, int *sx, int *sy, unsigned long long *rem) {
 768:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 769:src/int.c     **** 	const unsigned int ws = word_size();
 770:src/int.c     **** 	const long long int tbm = topbit_mask();
 771:src/int.c     **** 	unsigned long long int d, h, l;
 772:src/int.c     **** 	unsigned short denom[4];
 773:src/int.c     **** 	unsigned short numer[8];
 774:src/int.c     **** 	unsigned short quot[5];
 775:src/int.c     **** 	unsigned short rmdr[4];
 776:src/int.c     **** 	int num_denom;
 777:src/int.c     **** 	int num_numer;
 778:src/int.c     **** 
 779:src/int.c     **** 	l = (unsigned long long int)z;		// Numerator low
 780:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 781:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 782:src/int.c     **** 		if (mode == MODE_2COMP) {
 783:src/int.c     **** 			l = mask_value(1 + ~l);
 784:src/int.c     **** 			h = ~h;
 785:src/int.c     **** 			if (l == 0)
 786:src/int.c     **** 				h++;
 787:src/int.c     **** 			h = mask_value(h);
 788:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 789:src/int.c     **** 			l = mask_value(~l);
 790:src/int.c     **** 			h = mask_value(~h);
 791:src/int.c     **** 		} else {
 792:src/int.c     **** 			h ^= tbm;
 793:src/int.c     **** 		}
 794:src/int.c     **** 		*sy = 1;
 795:src/int.c     **** 	} else
 796:src/int.c     **** 		*sy = 0;
 797:src/int.c     **** 	d = extract_value(x, sx);		// Demonimator
 798:src/int.c     **** 	if (d == 0) {
 799:src/int.c     **** 		err_div0(h|l, *sx, *sy);
 800:src/int.c     **** 		return 0;
 801:src/int.c     **** 	}
 802:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 21


 803:src/int.c     **** 	if (ws != 64) {
 804:src/int.c     **** 		l |= h << ws;
 805:src/int.c     **** 		h >>= (64 - ws);
 806:src/int.c     **** 	}
 807:src/int.c     **** 
 808:src/int.c     **** 	if (h == 0 && l == 0) {				// zero over
 809:src/int.c     **** 		*rem = 0;
 810:src/int.c     **** 		return 0;
 811:src/int.c     **** 	}
 812:src/int.c     **** 
 813:src/int.c     **** 	xset(quot, 0, sizeof(quot));
 814:src/int.c     **** 	xset(rmdr, 0, sizeof(rmdr));
 815:src/int.c     **** 
 816:src/int.c     **** 	breakup(d, denom);
 817:src/int.c     **** 	breakup(l, numer);
 818:src/int.c     **** 	breakup(h, numer+4);
 819:src/int.c     **** 
 820:src/int.c     **** 	for (num_denom = 4; num_denom > 1 && denom[num_denom-1] == 0; num_denom--);
 821:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 822:src/int.c     **** 
 823:src/int.c     **** 	divmnu(quot, rmdr, numer, denom, num_numer, num_denom);
 824:src/int.c     **** 
 825:src/int.c     **** 	*rem = packup(rmdr);
 826:src/int.c     **** 	return packup(quot);
 827:src/int.c     **** }
 828:src/int.c     **** #endif
 829:src/int.c     **** 
 830:src/int.c     **** long long int intDblDiv(long long int z, long long int y, long long int x) {
 831:src/int.c     **** #ifndef TINY_BUILD
 832:src/int.c     **** 	unsigned long long int q, r;
 833:src/int.c     **** 	int sx, sy;
 834:src/int.c     **** 
 835:src/int.c     **** 	q = divmod(z, y, x, &sx, &sy, &r);
 836:src/int.c     **** 	set_overflow(0);
 837:src/int.c     **** 	set_carry(r != 0);
 838:src/int.c     **** 	return build_value(q, sx != sy);
 839:src/int.c     **** #else
 840:src/int.c     **** 	return 0;
 841:src/int.c     **** #endif
 842:src/int.c     **** }
 843:src/int.c     **** 
 844:src/int.c     **** long long int intDblRmdr(long long int z, long long int y, long long int x) {
 845:src/int.c     **** #ifndef TINY_BUILD
 846:src/int.c     **** 	unsigned long long int r;
 847:src/int.c     **** 	int sx, sy;
 848:src/int.c     **** 
 849:src/int.c     **** 	divmod(z, y, x, &sx, &sy, &r);
 850:src/int.c     **** 	return build_value(r, sy);
 851:src/int.c     **** #else
 852:src/int.c     **** 	return 0;
 853:src/int.c     **** #endif
 854:src/int.c     **** }
 855:src/int.c     **** 
 856:src/int.c     **** 
 857:src/int.c     **** long long int intNot(long long int x) {
 858:src/int.c     **** 	return mask_value(~x);
 859:src/int.c     **** }
ARM GAS  /tmp/ccl34fCK.s 			page 22


 860:src/int.c     **** 
 861:src/int.c     **** long long int intBooleanOp(long long int y, long long int x) {
 862:src/int.c     **** 	long long result;
 863:src/int.c     **** 	const int op = XeqOpCode - (OP_DYA | OP_LAND);
 864:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 865:src/int.c     **** 
 866:src/int.c     **** 	switch (op - not) {
 867:src/int.c     **** 	case 0:  result = y & x; break;
 868:src/int.c     **** 	case 1:  result = y | x; break;
 869:src/int.c     **** 	default: result = y ^ x; break;
 870:src/int.c     **** 	}
 871:src/int.c     **** 	if (not)
 872:src/int.c     **** 		result = ~result;
 873:src/int.c     **** 	return mask_value(result);
 874:src/int.c     **** }
 875:src/int.c     **** 
 876:src/int.c     **** /* Fraction and integer parts are very easy for integers.
 877:src/int.c     ****  */
 878:src/int.c     **** long long int intFP(long long int x) {
 879:src/int.c     **** 	return 0;
 880:src/int.c     **** }
 881:src/int.c     **** 
 882:src/int.c     **** 
 883:src/int.c     **** long long int intSign(long long int x) {
 884:src/int.c     **** 	int sgn;
 885:src/int.c     **** 	unsigned long long int v = extract_value(x, &sgn);
 886:src/int.c     **** 
 887:src/int.c     **** 	if (v == 0)
 888:src/int.c     **** 		sgn = 0;
 889:src/int.c     **** 	else
 890:src/int.c     **** 		v = 1;
 891:src/int.c     **** 	return build_value(v, sgn);
 892:src/int.c     **** }
 893:src/int.c     **** 
 894:src/int.c     **** 
 895:src/int.c     **** /* Single bit shifts are special internal version.
 896:src/int.c     ****  * The multi-bit shifts vector through these.
 897:src/int.c     ****  */
 898:src/int.c     **** 
 899:src/int.c     **** #ifndef TINY_BUILD
 900:src/int.c     **** static long long int intLSL(long long int x) {
 901:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 902:src/int.c     **** 	return mask_value((x << 1) & ~1);
 903:src/int.c     **** }
 904:src/int.c     **** 
 905:src/int.c     **** static long long int intLSR(long long int x) {
 906:src/int.c     **** 	set_carry(0 != (x & 1));
 907:src/int.c     **** 	return mask_value((x >> 1) & ~topbit_mask());
 908:src/int.c     **** }
 909:src/int.c     **** 
 910:src/int.c     **** static long long int intASR(long long int x) {
 911:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 912:src/int.c     **** 	const long long int tbm = topbit_mask();
 913:src/int.c     **** 	long long int y;
 914:src/int.c     **** 
 915:src/int.c     **** 	set_carry(x & 1);
 916:src/int.c     **** 	if (mode == MODE_SGNMANT)
ARM GAS  /tmp/ccl34fCK.s 			page 23


 917:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 918:src/int.c     **** 
 919:src/int.c     **** 	y = x >> 1;
 920:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 921:src/int.c     **** 		y |= tbm;
 922:src/int.c     **** 	return y;
 923:src/int.c     **** }
 924:src/int.c     **** 
 925:src/int.c     **** static long long int intRL(long long int x) {
 926:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 927:src/int.c     **** 
 928:src/int.c     **** 	set_carry(cry);
 929:src/int.c     **** 	return mask_value(intLSL(x) | cry);
 930:src/int.c     **** }
 931:src/int.c     **** 
 932:src/int.c     **** static long long int intRR(long long int x) {
 933:src/int.c     **** 	const int cry = x & 1;
 934:src/int.c     **** 
 935:src/int.c     **** 	set_carry(cry);
 936:src/int.c     **** 	x = intLSR(x);
 937:src/int.c     **** 	if (cry)
 938:src/int.c     **** 		x |= topbit_mask();
 939:src/int.c     **** 	return mask_value(x);
 940:src/int.c     **** }
 941:src/int.c     **** 
 942:src/int.c     **** static long long int intRLC(long long int x) {
 943:src/int.c     **** 	const int cin = get_carry();
 944:src/int.c     **** 	set_carry((topbit_mask() & x)?1:0);
 945:src/int.c     **** 	return mask_value(intLSL(x) | cin);
 946:src/int.c     **** }
 947:src/int.c     **** 
 948:src/int.c     **** static long long int intRRC(long long int x) {
 949:src/int.c     **** 	const int cin = get_carry();
 950:src/int.c     **** 
 951:src/int.c     **** 	set_carry(x&1);
 952:src/int.c     **** 	x = intLSR(x);
 953:src/int.c     **** 	if (cin)
 954:src/int.c     **** 		x |= topbit_mask();
 955:src/int.c     **** 	return mask_value(x);
 956:src/int.c     **** }
 957:src/int.c     **** #endif
 958:src/int.c     **** 
 959:src/int.c     **** /* Like the above but taking the count argument from the opcode.
 960:src/int.c     ****  * Also possibly register indirect but that is dealt with elsewhere.
 961:src/int.c     ****  */
 962:src/int.c     **** void introt(unsigned int arg, enum rarg op) {
 963:src/int.c     **** #ifndef TINY_BUILD
 964:src/int.c     **** 	long long int (*f)(long long int);
 965:src/int.c     **** 	unsigned int mod;
 966:src/int.c     **** 	unsigned int ws;
 967:src/int.c     **** 	long long int x;
 968:src/int.c     **** 	unsigned int i;
 969:src/int.c     **** 	
 970:src/int.c     **** 	if (check_intmode())
 971:src/int.c     **** 		return;
 972:src/int.c     **** 
 973:src/int.c     **** 	ws = word_size();
ARM GAS  /tmp/ccl34fCK.s 			page 24


 974:src/int.c     **** 	x = getX_int();
 975:src/int.c     **** 
 976:src/int.c     **** 	if (arg != 0) {
 977:src/int.c     **** 		switch (op) {
 978:src/int.c     **** 		case RARG_RL:	f = &intRL;	mod = ws;	break;
 979:src/int.c     **** 		case RARG_RR:	f = &intRR;	mod = ws;	break;
 980:src/int.c     **** 		case RARG_RLC:	f = &intRLC;	mod = ws + 1;	break;
 981:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 982:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 983:src/int.c     **** 		case RARG_SR:	f = &intLSR;	mod = 0;	break;
 984:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 985:src/int.c     **** 		default:
 986:src/int.c     **** 			return;
 987:src/int.c     **** 		}
 988:src/int.c     **** 		if (arg > ws) {
 989:src/int.c     **** 			if (mod)
 990:src/int.c     **** 				arg = arg % mod;
 991:src/int.c     **** 			else
 992:src/int.c     **** 				arg = ws;
 993:src/int.c     **** 		}
 994:src/int.c     **** 		for (i=0; i<arg; i++)
 995:src/int.c     **** 			x = (*f)(x);
 996:src/int.c     **** 	}
 997:src/int.c     **** 	setlastX();
 998:src/int.c     **** 	setX_int(mask_value(x));
 999:src/int.c     **** #endif
1000:src/int.c     **** }
1001:src/int.c     **** 
1002:src/int.c     **** 
1003:src/int.c     **** #ifndef TINY_BUILD
1004:src/int.c     **** /* Some code to count bits.  We start with a routine to count bits in a single
1005:src/int.c     ****  * 32 bit word and call this twice.
1006:src/int.c     ****  */
1007:src/int.c     **** static unsigned int count32bits(unsigned long int v) {
1008:src/int.c     **** 	v = v - ((v >> 1) & 0x55555555);
1009:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
1010:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
1011:src/int.c     **** }
1012:src/int.c     **** 
1013:src/int.c     **** static unsigned int count64bits(long long int x) {
1014:src/int.c     **** 	return count32bits(x & 0xffffffff) + count32bits((x >> 32) & 0xffffffff);
1015:src/int.c     **** }
1016:src/int.c     **** #endif
1017:src/int.c     **** 
1018:src/int.c     **** long long int intNumBits(long long int x) {
1019:src/int.c     **** #ifndef TINY_BUILD
1020:src/int.c     **** 	return mask_value(count64bits(x));
1021:src/int.c     **** #else
1022:src/int.c     **** 	return 0;
1023:src/int.c     **** #endif
1024:src/int.c     **** }
1025:src/int.c     **** 
1026:src/int.c     **** 
1027:src/int.c     **** /* Integer floor(sqrt())
1028:src/int.c     ****  */
1029:src/int.c     **** long long int intSqrt(long long int x) {
1030:src/int.c     **** #if !defined(TINY_BUILD)
ARM GAS  /tmp/ccl34fCK.s 			page 25


1031:src/int.c     **** 	int sx;
1032:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1033:src/int.c     **** 	unsigned long long int n0, n1;
1034:src/int.c     **** 
1035:src/int.c     **** 	if (sx) {
1036:src/int.c     **** 		report_err(ERR_DOMAIN);
1037:src/int.c     **** 		return 0;
1038:src/int.c     **** 	}
1039:src/int.c     **** 	if (v == 0)
1040:src/int.c     **** 		n1 = 0;
1041:src/int.c     **** 	else {
1042:src/int.c     **** 		n0 = v / 2 + 1;
1043:src/int.c     **** 		n1 = v / n0 + n0 / 2;
1044:src/int.c     **** 		while (n1 < n0) {
1045:src/int.c     **** 			n0 = n1;
1046:src/int.c     **** 			n1 = (n0 + v / n0) / 2;
1047:src/int.c     **** 		}
1048:src/int.c     **** 		n0 = n1 * n1;
1049:src/int.c     **** 		if (n0 > v)
1050:src/int.c     **** 			n1--;
1051:src/int.c     **** 		set_carry((n0 != v)?1:0);
1052:src/int.c     **** 	}
1053:src/int.c     **** 	return build_value(n1, sx);
1054:src/int.c     **** #else
1055:src/int.c     **** 	return 0;
1056:src/int.c     **** #endif
1057:src/int.c     **** }
1058:src/int.c     **** 
1059:src/int.c     **** long long int int_power_helper(unsigned long long int vy, unsigned long long int vx, int overflow) 
1060:src/int.c     **** 	unsigned long long int r = 1;
1061:src/int.c     **** 	unsigned int i;
1062:src/int.c     **** 	unsigned int ws;
1063:src/int.c     **** 	int overflow_next = 0;
1064:src/int.c     **** 
1065:src/int.c     **** 	ws = word_size();
1066:src/int.c     **** 	for (i=0; i<ws && vx != 0; i++) {
1067:src/int.c     **** 		if (vx & 1) {
1068:src/int.c     **** 			if (overflow_next)
1069:src/int.c     **** 				overflow = 1;
1070:src/int.c     **** 			r = multiply_with_overflow(r, vy, &overflow);
1071:src/int.c     **** 		}
1072:src/int.c     **** 		vx >>= 1;
1073:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
1074:src/int.c     **** 	}
1075:src/int.c     **** 	set_overflow(overflow);
1076:src/int.c     **** 	return r;
1077:src/int.c     **** }
1078:src/int.c     **** 
1079:src/int.c     **** /* Integer power y^x
1080:src/int.c     ****  */
1081:src/int.c     **** long long int intPower(long long int y, long long int x) {
1082:src/int.c     **** #ifndef TINY_BUILD
1083:src/int.c     **** 	int sx, sy, sr;
1084:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
1085:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
1086:src/int.c     **** 
1087:src/int.c     **** 	if (vx == 0 && vy == 0) {
ARM GAS  /tmp/ccl34fCK.s 			page 26


1088:src/int.c     **** 		report_err(ERR_DOMAIN);
1089:src/int.c     **** 		return 0;
1090:src/int.c     **** 	}
1091:src/int.c     **** 	set_carry(0);
1092:src/int.c     **** 	set_overflow(0);
1093:src/int.c     **** 
1094:src/int.c     **** 	if (vx == 0) {
1095:src/int.c     **** 		if (vy == 0) {
1096:src/int.c     **** 			set_overflow(1);
1097:src/int.c     **** 			return 0;
1098:src/int.c     **** 		}
1099:src/int.c     **** 		return 1;
1100:src/int.c     **** 	} else if (vy == 0)
1101:src/int.c     **** 		return 0;
1102:src/int.c     **** 
1103:src/int.c     **** 	if (sx) {
1104:src/int.c     **** 		set_carry(1);
1105:src/int.c     **** 		return 0;
1106:src/int.c     **** 	}
1107:src/int.c     **** 
1108:src/int.c     **** 	sr = (sy && (vx & 1))?1:0;	// Determine the sign of the result
1109:src/int.c     **** 
1110:src/int.c     **** 	return build_value(int_power_helper(vy, vx, 0), sr);
1111:src/int.c     **** #else
1112:src/int.c     **** 	return 0;
1113:src/int.c     **** #endif
1114:src/int.c     **** }
1115:src/int.c     **** 
1116:src/int.c     **** 
1117:src/int.c     **** /* Integer floor(log2())
1118:src/int.c     ****  */
1119:src/int.c     **** long long int intLog2(long long int x) {
1120:src/int.c     **** #ifndef TINY_BUILD
1121:src/int.c     **** 	int sx;
1122:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1123:src/int.c     **** 	unsigned int r = 0;
1124:src/int.c     **** 
1125:src/int.c     **** 	if (v == 0 || sx) {
1126:src/int.c     **** 		report_err(ERR_DOMAIN);
1127:src/int.c     **** 		return 0;
1128:src/int.c     **** 	}
1129:src/int.c     **** 	set_carry((v & (v-1))?1:0);
1130:src/int.c     **** 	if (v != 0)
1131:src/int.c     **** 		while (v >>= 1)
1132:src/int.c     **** 			r++;
1133:src/int.c     **** 	return build_value(r, sx);
1134:src/int.c     **** #else
1135:src/int.c     **** 	return 0;
1136:src/int.c     **** #endif
1137:src/int.c     **** }
1138:src/int.c     **** 
1139:src/int.c     **** 
1140:src/int.c     **** /* 2^x
1141:src/int.c     ****  */
1142:src/int.c     **** long long int int2pow(long long int x) {
1143:src/int.c     **** #ifndef TINY_BUILD
1144:src/int.c     **** 	int sx;
ARM GAS  /tmp/ccl34fCK.s 			page 27


1145:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1146:src/int.c     **** 	unsigned int ws;
1147:src/int.c     **** 
1148:src/int.c     **** 	set_overflow(0);
1149:src/int.c     **** 	set_carry(sx && v == 1);
1150:src/int.c     **** 	if (sx && v != 0)
1151:src/int.c     **** 		return 0;
1152:src/int.c     **** 
1153:src/int.c     **** 	ws = word_size();
1154:src/int.c     **** 	if (int_mode() != MODE_UNSIGNED)
1155:src/int.c     **** 		ws--;
1156:src/int.c     **** 	if (v >= ws) {
1157:src/int.c     **** 		set_carry(v == ws);
1158:src/int.c     **** 		set_overflow(1);
1159:src/int.c     **** 		return 0;
1160:src/int.c     **** 	}
1161:src/int.c     **** 
1162:src/int.c     **** 	return 1LL << (unsigned int)(v & 0xff);
1163:src/int.c     **** #else
1164:src/int.c     **** 	return 0;
1165:src/int.c     **** #endif
1166:src/int.c     **** }
1167:src/int.c     **** 
1168:src/int.c     **** 
1169:src/int.c     **** /* Integer floor(log10())
1170:src/int.c     ****  */
1171:src/int.c     **** long long int intLog10(long long int x) {
1172:src/int.c     **** #ifndef TINY_BUILD
1173:src/int.c     **** 	int sx;
1174:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1175:src/int.c     **** 	int r = 0;
1176:src/int.c     **** 	int c = 0;
1177:src/int.c     **** 
1178:src/int.c     **** 	if (v == 0 || sx) {
1179:src/int.c     **** 		report_err(ERR_DOMAIN);
1180:src/int.c     **** 		return 0;
1181:src/int.c     **** 	}
1182:src/int.c     **** 	while (v >= 10) {
1183:src/int.c     **** 		r++;
1184:src/int.c     **** 		if (v % 10)
1185:src/int.c     **** 			c = 1;
1186:src/int.c     **** 		v /= 10;
1187:src/int.c     **** 	}
1188:src/int.c     **** 	set_carry(c || v != 1);
1189:src/int.c     **** 	return build_value(r, sx);
1190:src/int.c     **** #else
1191:src/int.c     **** 	return 0;
1192:src/int.c     **** #endif
1193:src/int.c     **** }
1194:src/int.c     **** 
1195:src/int.c     **** 
1196:src/int.c     **** /* 10^x
1197:src/int.c     ****  */
1198:src/int.c     **** long long int int10pow(long long int x) {
1199:src/int.c     **** 	int sx;
1200:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
1201:src/int.c     **** 	const unsigned int ws = word_size();
ARM GAS  /tmp/ccl34fCK.s 			page 28


1202:src/int.c     **** 	int overflow = 0;
1203:src/int.c     **** 	
1204:src/int.c     **** 	set_carry(0);
1205:src/int.c     **** 	if (vx == 0) {
1206:src/int.c     **** 		set_overflow(0);
1207:src/int.c     **** 		return 1;
1208:src/int.c     **** 	}
1209:src/int.c     **** 	if (sx) {
1210:src/int.c     **** 		set_carry(1);
1211:src/int.c     **** 		return 0;
1212:src/int.c     **** 	}
1213:src/int.c     **** 
1214:src/int.c     **** 	if (ws <= 3 || (int_mode() != MODE_UNSIGNED && ws == 4))
1215:src/int.c     **** 		overflow = 1;
1216:src/int.c     **** 	return build_value(int_power_helper(10, x, overflow), 0);
1217:src/int.c     **** }
1218:src/int.c     **** 
1219:src/int.c     **** 
1220:src/int.c     **** /* -1^x
1221:src/int.c     ****  */
1222:src/int.c     **** long long int int_1pow(long long int x) {
1223:src/int.c     **** #ifndef TINY_BUILD
1224:src/int.c     **** 	int sx;
1225:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
1226:src/int.c     **** 	int odd = xv & 1;
1227:src/int.c     **** 
1228:src/int.c     **** 	set_overflow((int_mode() == MODE_UNSIGNED && odd) ? 1 : 0);
1229:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
1230:src/int.c     **** #else
1231:src/int.c     **** 	return 0;
1232:src/int.c     **** #endif
1233:src/int.c     **** }
1234:src/int.c     **** 
1235:src/int.c     **** 
1236:src/int.c     **** /* Mirror - reverse the bits in the word
1237:src/int.c     ****  */
1238:src/int.c     **** long long int intMirror(long long int x) {
1239:src/int.c     **** #ifndef TINY_BUILD
1240:src/int.c     **** 	long long int r = 0;
1241:src/int.c     **** 	unsigned int n = word_size();
1242:src/int.c     **** 	unsigned int i;
1243:src/int.c     **** 
1244:src/int.c     **** 	if (x == 0)
1245:src/int.c     **** 		return 0;
1246:src/int.c     **** 
1247:src/int.c     **** 	for (i=0; i<n; i++)
1248:src/int.c     **** 		if (x & (1LL << i))
1249:src/int.c     **** 			r |= 1LL << (n-i-1);
1250:src/int.c     **** 	return r;
1251:src/int.c     **** #else
1252:src/int.c     **** 	return 0;
1253:src/int.c     **** #endif
1254:src/int.c     **** }
1255:src/int.c     **** 
1256:src/int.c     **** 
1257:src/int.c     **** /* Justify to the end of the register
1258:src/int.c     ****  */
ARM GAS  /tmp/ccl34fCK.s 			page 29


1259:src/int.c     **** static void justify(long long int (*shift)(long long int), const long long int mask) {
1260:src/int.c     **** 	unsigned int c = 0;
1261:src/int.c     **** 	long long int v;
1262:src/int.c     **** 
1263:src/int.c     **** 	v = getX_int();
1264:src/int.c     **** 	setlastX();
1265:src/int.c     **** 	lift();
1266:src/int.c     **** 	if (v != 0) {
1267:src/int.c     **** 		const int flags = save_flags();
1268:src/int.c     **** 		while ((v & mask) == 0) {
1269:src/int.c     **** 			v = (*shift)(v);
1270:src/int.c     **** 			c++;
1271:src/int.c     **** 		}
1272:src/int.c     **** 		restore_flags(flags);
1273:src/int.c     **** 		set_reg_n_int(regY_idx, v);
1274:src/int.c     **** 	}
1275:src/int.c     **** 	setX_int((long long int)c);
1276:src/int.c     **** }
1277:src/int.c     **** 
1278:src/int.c     **** void int_justify(enum nilop op) {
1279:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
1280:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
1281:src/int.c     **** }
1282:src/int.c     **** 
1283:src/int.c     **** 
1284:src/int.c     **** /* Create n bit masks at either end of the word.
1285:src/int.c     ****  * If the n is negative, the mask is created at the other end of the
1286:src/int.c     ****  * word.
1287:src/int.c     ****  */
1288:src/int.c     **** void intmsks(unsigned int arg, enum rarg op) {
1289:src/int.c     **** #ifndef TINY_BUILD
1290:src/int.c     **** 	long long int mask;
1291:src/int.c     **** 	long long int x;
1292:src/int.c     **** 	unsigned int i;
1293:src/int.c     **** 	long long int (*f)(long long int);
1294:src/int.c     **** 	const int carry = get_carry();
1295:src/int.c     **** 
1296:src/int.c     **** 	lift();
1297:src/int.c     **** 
1298:src/int.c     **** 	if (op == RARG_MASKL) {
1299:src/int.c     **** 		mask = topbit_mask();
1300:src/int.c     **** 		f = &intLSR;
1301:src/int.c     **** 	} else {
1302:src/int.c     **** 		mask = 1LL;
1303:src/int.c     **** 		f = &intLSL;
1304:src/int.c     **** 	}
1305:src/int.c     **** 	if (arg >= word_size()) {
1306:src/int.c     **** 		x = mask_value(-1);
1307:src/int.c     **** 	} else {
1308:src/int.c     **** 		x = 0;
1309:src/int.c     **** 		for (i=0; i<arg; i++) {
1310:src/int.c     **** 			x |= mask;
1311:src/int.c     **** 			mask = (*f)(mask);
1312:src/int.c     **** 		}
1313:src/int.c     **** 	}
1314:src/int.c     **** 	setX_int(x);
1315:src/int.c     **** 	set_carry(carry);
ARM GAS  /tmp/ccl34fCK.s 			page 30


1316:src/int.c     **** #endif
1317:src/int.c     **** }
1318:src/int.c     **** 
1319:src/int.c     **** 
1320:src/int.c     **** /* Set, clear, flip and test bits */
1321:src/int.c     **** void intbits(unsigned int arg, enum rarg op) {
1322:src/int.c     **** #ifndef TINY_BUILD
1323:src/int.c     **** 	long long int m, x;
1324:src/int.c     **** 
1325:src/int.c     **** 	if (check_intmode())
1326:src/int.c     **** 		return;
1327:src/int.c     **** 
1328:src/int.c     **** 	m =  (arg >= word_size())?0:(1LL << arg);
1329:src/int.c     **** 	x = getX_int();
1330:src/int.c     **** 
1331:src/int.c     **** 	switch (op) {
1332:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
1333:src/int.c     **** 	case RARG_CB:	x &= ~m;	setlastX();		break;
1334:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
1335:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
1336:src/int.c     **** 	case RARG_BC:	fin_tst((m != 0 && (x&m) != 0)?0:1);	break;
1337:src/int.c     **** 	default:
1338:src/int.c     **** 		return;
1339:src/int.c     **** 	}
1340:src/int.c     **** 
1341:src/int.c     **** 	setX_int(x);
1342:src/int.c     **** #endif
1343:src/int.c     **** }
1344:src/int.c     **** 
1345:src/int.c     **** long long int intFib(long long int x) {
1346:src/int.c     **** #ifndef TINY_BUILD
1347:src/int.c     **** 	int sx, s;
1348:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
1349:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
1350:src/int.c     **** 	unsigned long long int a0, a1;
1351:src/int.c     **** 	unsigned int n, i;
1352:src/int.c     **** 	long long int tbm;
1353:src/int.c     **** 
1354:src/int.c     **** 	/* Limit things so we don't loop for too long.
1355:src/int.c     **** 	 * The actual largest non-overflowing values for 64 bit integers
1356:src/int.c     **** 	 * are Fib(92) for signed quantities and Fib(93) for unsigned.
1357:src/int.c     **** 	 * We allow a bit more and maintain the low order digits.
1358:src/int.c     **** 	 */
1359:src/int.c     **** 	if (v >= 100) {
1360:src/int.c     **** 		set_overflow(1);
1361:src/int.c     **** 		return 0;
1362:src/int.c     **** 	}
1363:src/int.c     **** 	set_overflow(0);
1364:src/int.c     **** 	n = v & 0xff;
1365:src/int.c     **** 	if (n <= 1)
1366:src/int.c     **** 		return build_value(n, 0);
1367:src/int.c     **** 
1368:src/int.c     **** 	/* Negative integers produce the same values as positive
1369:src/int.c     **** 	 * except the sign for negative evens is negative.
1370:src/int.c     **** 	 */
1371:src/int.c     **** 	s = (sx && (n & 1) == 0)?1:0;
1372:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 31


1373:src/int.c     **** 	/* Mask to check for overflow */
1374:src/int.c     **** 	tbm = topbit_mask();
1375:src/int.c     **** 	if (mode == MODE_UNSIGNED)
1376:src/int.c     **** 		tbm <<= 1;
1377:src/int.c     **** 
1378:src/int.c     **** 	/* Down to the computation.
1379:src/int.c     **** 	 */
1380:src/int.c     **** 	a0 = 0;
1381:src/int.c     **** 	a1 = 1;
1382:src/int.c     **** 	for (i=1; i<n; i++) {
1383:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
1384:src/int.c     **** 		if ((anew & tbm) || anew < a1)
1385:src/int.c     **** 			set_overflow(1);
1386:src/int.c     **** 		a0 = a1;
1387:src/int.c     **** 		a1 = anew;
1388:src/int.c     **** 	}
1389:src/int.c     **** 	return build_value(a1, s);
1390:src/int.c     **** #else
1391:src/int.c     **** 	return 0;
1392:src/int.c     **** #endif
1393:src/int.c     **** }
1394:src/int.c     **** 
1395:src/int.c     **** 
1396:src/int.c     **** /* Calculate (a . b) mod c taking care to avoid overflow */
1397:src/int.c     **** static unsigned long long mulmod(const unsigned long long int a, unsigned long long int b, const un
1398:src/int.c     **** 	unsigned long long int x=0, y=a%c;
1399:src/int.c     **** 	while (b > 0) {
1400:src/int.c     **** 		if ((b & 1))
1401:src/int.c     **** 			x = (x+y)%c;
1402:src/int.c     **** 		y = (y+y)%c;
1403:src/int.c     **** 		b /= 2;
1404:src/int.c     **** 	}
1405:src/int.c     **** 	return x % c;
1406:src/int.c     **** }
1407:src/int.c     **** 
1408:src/int.c     **** /* Calculate (a ^ b) mod c */
1409:src/int.c     **** static unsigned long long int expmod(const unsigned long long int a, unsigned long long int b, cons
 297              		.loc 1 1409 128 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ args = 8, pretend = 0, frame = 56
 300              		@ frame_needed = 0, uses_anonymous_args = 0
1410:src/int.c     **** 	unsigned long long int x=1, y=a;
 301              		.loc 1 1410 2 view .LVU66
1409:src/int.c     **** 	unsigned long long int x=1, y=a;
 302              		.loc 1 1409 128 is_stmt 0 view .LVU67
 303 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 304              		.cfi_def_cfa_offset 36
 305              		.cfi_offset 4, -36
 306              		.cfi_offset 5, -32
 307              		.cfi_offset 6, -28
 308              		.cfi_offset 7, -24
 309              		.cfi_offset 8, -20
 310              		.cfi_offset 9, -16
 311              		.cfi_offset 10, -12
 312              		.cfi_offset 11, -8
 313              		.cfi_offset 14, -4
 314 0004 2DED028B 		vpush.64	{d8}
ARM GAS  /tmp/ccl34fCK.s 			page 32


 315              		.cfi_def_cfa_offset 44
 316              		.cfi_offset 80, -44
 317              		.cfi_offset 81, -40
 318 0008 8FB0     		sub	sp, sp, #60
 319              		.cfi_def_cfa_offset 104
1409:src/int.c     **** 	unsigned long long int x=1, y=a;
 320              		.loc 1 1409 128 view .LVU68
 321 000a CDE90623 		strd	r2, r3, [sp, #24]
1411:src/int.c     **** 	while (b > 0) {
 322              		.loc 1 1411 2 is_stmt 1 view .LVU69
 323              	.LVL15:
 324              		.loc 1 1411 8 view .LVU70
 325 000e DDE90623 		ldrd	r2, [sp, #24]
 326 0012 1343     		orrs	r3, r2, r3
1409:src/int.c     **** 	unsigned long long int x=1, y=a;
 327              		.loc 1 1409 128 is_stmt 0 view .LVU71
 328 0014 DDE91AAB 		ldrd	r10, [sp, #104]
 329              		.loc 1 1411 8 view .LVU72
 330 0018 00F0CC80 		beq	.L20
1410:src/int.c     **** 	unsigned long long int x=1, y=a;
 331              		.loc 1 1410 25 view .LVU73
 332 001c 0123     		movs	r3, #1
 333 001e 08EE103A 		vmov	s16, r3	@ int
 334 0022 0023     		movs	r3, #0
 335 0024 08EE903A 		vmov	s17, r3	@ int
 336 0028 0446     		mov	r4, r0
 337 002a 0D46     		mov	r5, r1
 338              	.LVL16:
 339              	.L28:
1412:src/int.c     **** 		if ((b & 1))
 340              		.loc 1 1412 3 is_stmt 1 view .LVU74
 341              		.loc 1 1412 10 is_stmt 0 view .LVU75
 342 002c 069B     		ldr	r3, [sp, #24]
 343 002e 03F00103 		and	r3, r3, #1
 344 0032 0893     		str	r3, [sp, #32]
 345 0034 0023     		movs	r3, #0
 346 0036 0993     		str	r3, [sp, #36]
 347              		.loc 1 1412 6 view .LVU76
 348 0038 DDE90823 		ldrd	r2, [sp, #32]
 349 003c 1343     		orrs	r3, r2, r3
 350 003e 5CD1     		bne	.L21
 351 0040 18EE100A 		vmov	r0, s16	@ int
 352 0044 18EE901A 		vmov	r1, s17	@ int
 353 0048 5246     		mov	r2, r10
 354 004a 5B46     		mov	r3, fp
 355 004c FFF7FEFF 		bl	__aeabi_uldivmod
 356              	.LVL17:
 357              	.LBB608:
 358              	.LBB609:
1398:src/int.c     **** 	while (b > 0) {
 359              		.loc 1 1398 30 view .LVU77
 360 0050 2046     		mov	r0, r4
 361 0052 CDE90C23 		strd	r2, r3, [sp, #48]
1398:src/int.c     **** 	while (b > 0) {
 362              		.loc 1 1398 30 view .LVU78
 363              	.LBE609:
 364              	.LBE608:
ARM GAS  /tmp/ccl34fCK.s 			page 33


1413:src/int.c     **** 			x = mulmod(x, y, c);
1414:src/int.c     **** 		y = mulmod(y, y, c);
 365              		.loc 1 1414 3 is_stmt 1 view .LVU79
 366              	.LVL18:
 367              	.LBB614:
 368              	.LBI608:
1397:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 369              		.loc 1 1397 27 view .LVU80
 370              	.LBB610:
1398:src/int.c     **** 	while (b > 0) {
 371              		.loc 1 1398 2 view .LVU81
1398:src/int.c     **** 	while (b > 0) {
 372              		.loc 1 1398 30 is_stmt 0 view .LVU82
 373 0056 2946     		mov	r1, r5
 374 0058 5246     		mov	r2, r10
 375 005a 5B46     		mov	r3, fp
 376 005c FFF7FEFF 		bl	__aeabi_uldivmod
 377              	.LVL19:
 378 0060 1F46     		mov	r7, r3
1399:src/int.c     **** 		if ((b & 1))
 379              		.loc 1 1399 8 view .LVU83
 380 0062 54EA0503 		orrs	r3, r4, r5
1398:src/int.c     **** 	while (b > 0) {
 381              		.loc 1 1398 30 view .LVU84
 382 0066 1646     		mov	r6, r2
 383              	.LVL20:
1399:src/int.c     **** 		if ((b & 1))
 384              		.loc 1 1399 2 is_stmt 1 view .LVU85
1399:src/int.c     **** 		if ((b & 1))
 385              		.loc 1 1399 8 view .LVU86
 386 0068 34D0     		beq	.L23
 387              	.LVL21:
 388              	.L22:
1398:src/int.c     **** 	while (b > 0) {
 389              		.loc 1 1398 30 is_stmt 0 view .LVU87
 390 006a 4FF00008 		mov	r8, #0
 391 006e CDE90188 		strd	r8, r8, [sp, #4]
 392              	.LVL22:
 393              	.L27:
1400:src/int.c     **** 			x = (x+y)%c;
 394              		.loc 1 1400 3 is_stmt 1 view .LVU88
1401:src/int.c     **** 		y = (y+y)%c;
 395              		.loc 1 1401 4 view .LVU89
1400:src/int.c     **** 			x = (x+y)%c;
 396              		.loc 1 1400 10 is_stmt 0 view .LVU90
 397 0072 04F00108 		and	r8, r4, #1
 398 0076 4FF00009 		mov	r9, #0
1400:src/int.c     **** 			x = (x+y)%c;
 399              		.loc 1 1400 6 view .LVU91
 400 007a 58EA0903 		orrs	r3, r8, r9
 401 007e 0AD0     		beq	.L26
1401:src/int.c     **** 		y = (y+y)%c;
 402              		.loc 1 1401 6 view .LVU92
 403 0080 019B     		ldr	r3, [sp, #4]
 404 0082 0299     		ldr	r1, [sp, #8]
 405 0084 9819     		adds	r0, r3, r6
 406 0086 47EB0101 		adc	r1, r7, r1
ARM GAS  /tmp/ccl34fCK.s 			page 34


 407 008a 5246     		mov	r2, r10
 408 008c 5B46     		mov	r3, fp
 409 008e FFF7FEFF 		bl	__aeabi_uldivmod
 410              	.LVL23:
 411 0092 CDE90123 		strd	r2, r3, [sp, #4]
 412              	.LVL24:
 413              	.L26:
1402:src/int.c     **** 		b /= 2;
 414              		.loc 1 1402 3 is_stmt 1 view .LVU93
1402:src/int.c     **** 		b /= 2;
 415              		.loc 1 1402 9 is_stmt 0 view .LVU94
 416 0096 B019     		adds	r0, r6, r6
 417 0098 47EB0701 		adc	r1, r7, r7
1402:src/int.c     **** 		b /= 2;
 418              		.loc 1 1402 5 view .LVU95
 419 009c 5246     		mov	r2, r10
 420 009e 5B46     		mov	r3, fp
 421 00a0 FFF7FEFF 		bl	__aeabi_uldivmod
 422              	.LVL25:
1403:src/int.c     **** 	}
 423              		.loc 1 1403 5 view .LVU96
 424 00a4 4FEA540C 		lsr	ip, r4, #1
 425 00a8 4CEAC57C 		orr	ip, ip, r5, lsl #31
 426 00ac 6908     		lsrs	r1, r5, #1
 427 00ae 6446     		mov	r4, ip
 428              	.LVL26:
1403:src/int.c     **** 	}
 429              		.loc 1 1403 5 view .LVU97
 430 00b0 0D46     		mov	r5, r1
1402:src/int.c     **** 		b /= 2;
 431              		.loc 1 1402 5 view .LVU98
 432 00b2 1F46     		mov	r7, r3
 433              	.LVL27:
1399:src/int.c     **** 		if ((b & 1))
 434              		.loc 1 1399 8 view .LVU99
 435 00b4 54EA0503 		orrs	r3, r4, r5
1402:src/int.c     **** 		b /= 2;
 436              		.loc 1 1402 5 view .LVU100
 437 00b8 1646     		mov	r6, r2
 438              	.LVL28:
1403:src/int.c     **** 	}
 439              		.loc 1 1403 3 is_stmt 1 view .LVU101
1399:src/int.c     **** 		if ((b & 1))
 440              		.loc 1 1399 8 view .LVU102
 441 00ba DAD1     		bne	.L27
 442 00bc CDE90A89 		strd	r8, [sp, #40]
 443 00c0 DDE90189 		ldrd	r8, r9, [sp, #4]
 444 00c4 5246     		mov	r2, r10
 445              	.LVL29:
1399:src/int.c     **** 		if ((b & 1))
 446              		.loc 1 1399 8 is_stmt 0 view .LVU103
 447 00c6 4046     		mov	r0, r8
 448 00c8 4946     		mov	r1, r9
 449 00ca 5B46     		mov	r3, fp
 450 00cc FFF7FEFF 		bl	__aeabi_uldivmod
 451              	.LVL30:
 452 00d0 1446     		mov	r4, r2
ARM GAS  /tmp/ccl34fCK.s 			page 35


 453              	.LVL31:
1399:src/int.c     **** 		if ((b & 1))
 454              		.loc 1 1399 8 view .LVU104
 455 00d2 1D46     		mov	r5, r3
 456              	.LVL32:
 457              	.L23:
1405:src/int.c     **** }
 458              		.loc 1 1405 2 is_stmt 1 view .LVU105
1405:src/int.c     **** }
 459              		.loc 1 1405 2 is_stmt 0 view .LVU106
 460              	.LBE610:
 461              	.LBE614:
1415:src/int.c     **** 		b /= 2;
 462              		.loc 1 1415 3 is_stmt 1 view .LVU107
 463              		.loc 1 1415 5 is_stmt 0 view .LVU108
 464 00d4 DDE90601 		ldrd	r0, [sp, #24]
 465 00d8 4308     		lsrs	r3, r0, #1
 466 00da 43EAC173 		orr	r3, r3, r1, lsl #31
 467 00de 4A08     		lsrs	r2, r1, #1
 468 00e0 CDE90632 		strd	r3, r2, [sp, #24]
 469              	.LVL33:
1411:src/int.c     **** 		if ((b & 1))
 470              		.loc 1 1411 8 is_stmt 1 view .LVU109
 471 00e4 DDE90623 		ldrd	r2, [sp, #24]
 472 00e8 1343     		orrs	r3, r2, r3
 473 00ea 9FD1     		bne	.L28
1416:src/int.c     **** 	}
1417:src/int.c     **** 	return (x % c);
1418:src/int.c     **** }
 474              		.loc 1 1418 1 is_stmt 0 view .LVU110
 475 00ec DDE90C01 		ldrd	r0, r1, [sp, #48]
 476 00f0 0FB0     		add	sp, sp, #60
 477              		.cfi_remember_state
 478              		.cfi_def_cfa_offset 44
 479              		@ sp needed
 480 00f2 BDEC028B 		vldm	sp!, {d8}
 481              		.cfi_restore 80
 482              		.cfi_restore 81
 483              		.cfi_def_cfa_offset 36
 484              	.LVL34:
 485              		.loc 1 1418 1 view .LVU111
 486 00f6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 487              	.LVL35:
 488              	.L21:
 489              		.cfi_restore_state
1413:src/int.c     **** 		y = mulmod(y, y, c);
 490              		.loc 1 1413 4 is_stmt 1 view .LVU112
 491              	.LBB615:
 492              	.LBI615:
1397:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 493              		.loc 1 1397 27 view .LVU113
 494              	.LBB616:
1398:src/int.c     **** 	while (b > 0) {
 495              		.loc 1 1398 2 view .LVU114
1398:src/int.c     **** 	while (b > 0) {
 496              		.loc 1 1398 30 is_stmt 0 view .LVU115
 497 00fa 18EE100A 		vmov	r0, s16	@ int
ARM GAS  /tmp/ccl34fCK.s 			page 36


 498 00fe 18EE901A 		vmov	r1, s17	@ int
 499 0102 5246     		mov	r2, r10
 500 0104 5B46     		mov	r3, fp
 501 0106 FFF7FEFF 		bl	__aeabi_uldivmod
 502              	.LVL36:
 503 010a 1F46     		mov	r7, r3
1399:src/int.c     **** 		if ((b & 1))
 504              		.loc 1 1399 8 view .LVU116
 505 010c 54EA0503 		orrs	r3, r4, r5
1398:src/int.c     **** 	while (b > 0) {
 506              		.loc 1 1398 30 view .LVU117
 507 0110 1646     		mov	r6, r2
 508              	.LVL37:
1399:src/int.c     **** 		if ((b & 1))
 509              		.loc 1 1399 2 is_stmt 1 view .LVU118
1399:src/int.c     **** 		if ((b & 1))
 510              		.loc 1 1399 8 view .LVU119
 511 0112 48D0     		beq	.L30
1398:src/int.c     **** 	while (b > 0) {
 512              		.loc 1 1398 25 is_stmt 0 view .LVU120
 513 0114 0023     		movs	r3, #0
 514 0116 CDE90245 		strd	r4, [sp, #8]
1399:src/int.c     **** 		if ((b & 1))
 515              		.loc 1 1399 8 view .LVU121
 516 011a A946     		mov	r9, r5
 517 011c A046     		mov	r8, r4
1398:src/int.c     **** 	while (b > 0) {
 518              		.loc 1 1398 25 view .LVU122
 519 011e 0193     		str	r3, [sp, #4]
 520 0120 1D46     		mov	r5, r3
 521              	.LVL38:
 522              	.L25:
1400:src/int.c     **** 			x = (x+y)%c;
 523              		.loc 1 1400 3 is_stmt 1 view .LVU123
1401:src/int.c     **** 		y = (y+y)%c;
 524              		.loc 1 1401 4 view .LVU124
1400:src/int.c     **** 			x = (x+y)%c;
 525              		.loc 1 1400 10 is_stmt 0 view .LVU125
 526 0122 08F00103 		and	r3, r8, #1
 527 0126 0493     		str	r3, [sp, #16]
 528 0128 0023     		movs	r3, #0
 529 012a 0593     		str	r3, [sp, #20]
1400:src/int.c     **** 			x = (x+y)%c;
 530              		.loc 1 1400 6 view .LVU126
 531 012c DDE90434 		ldrd	r3, [sp, #16]
 532 0130 2343     		orrs	r3, r3, r4
 533 0132 09D0     		beq	.L24
1401:src/int.c     **** 		y = (y+y)%c;
 534              		.loc 1 1401 6 view .LVU127
 535 0134 0199     		ldr	r1, [sp, #4]
 536 0136 A819     		adds	r0, r5, r6
 537 0138 47EB0101 		adc	r1, r7, r1
 538 013c 5246     		mov	r2, r10
 539 013e 5B46     		mov	r3, fp
 540 0140 FFF7FEFF 		bl	__aeabi_uldivmod
 541              	.LVL39:
 542 0144 1546     		mov	r5, r2
ARM GAS  /tmp/ccl34fCK.s 			page 37


 543              	.LVL40:
1401:src/int.c     **** 		y = (y+y)%c;
 544              		.loc 1 1401 6 view .LVU128
 545 0146 0193     		str	r3, [sp, #4]
 546              	.LVL41:
 547              	.L24:
1402:src/int.c     **** 		b /= 2;
 548              		.loc 1 1402 3 is_stmt 1 view .LVU129
1402:src/int.c     **** 		b /= 2;
 549              		.loc 1 1402 9 is_stmt 0 view .LVU130
 550 0148 B019     		adds	r0, r6, r6
 551 014a 47EB0701 		adc	r1, r7, r7
1402:src/int.c     **** 		b /= 2;
 552              		.loc 1 1402 5 view .LVU131
 553 014e 5246     		mov	r2, r10
 554 0150 5B46     		mov	r3, fp
 555 0152 FFF7FEFF 		bl	__aeabi_uldivmod
 556              	.LVL42:
1403:src/int.c     **** 	}
 557              		.loc 1 1403 5 view .LVU132
 558 0156 4FEA580C 		lsr	ip, r8, #1
 559 015a 4CEAC97C 		orr	ip, ip, r9, lsl #31
 560 015e 4FEA5901 		lsr	r1, r9, #1
 561 0162 E046     		mov	r8, ip
 562              	.LVL43:
1403:src/int.c     **** 	}
 563              		.loc 1 1403 5 view .LVU133
 564 0164 8946     		mov	r9, r1
1402:src/int.c     **** 		b /= 2;
 565              		.loc 1 1402 5 view .LVU134
 566 0166 1F46     		mov	r7, r3
 567              	.LVL44:
1399:src/int.c     **** 		if ((b & 1))
 568              		.loc 1 1399 8 view .LVU135
 569 0168 58EA0903 		orrs	r3, r8, r9
1402:src/int.c     **** 		b /= 2;
 570              		.loc 1 1402 5 view .LVU136
 571 016c 1646     		mov	r6, r2
 572              	.LVL45:
1403:src/int.c     **** 	}
 573              		.loc 1 1403 3 is_stmt 1 view .LVU137
1399:src/int.c     **** 		if ((b & 1))
 574              		.loc 1 1399 8 view .LVU138
 575 016e D8D1     		bne	.L25
 576 0170 2846     		mov	r0, r5
 577 0172 0199     		ldr	r1, [sp, #4]
 578 0174 5246     		mov	r2, r10
 579              	.LVL46:
1399:src/int.c     **** 		if ((b & 1))
 580              		.loc 1 1399 8 is_stmt 0 view .LVU139
 581 0176 5B46     		mov	r3, fp
 582 0178 FFF7FEFF 		bl	__aeabi_uldivmod
 583              	.LVL47:
 584 017c DDE90245 		ldrd	r4, [sp, #8]
 585              	.LVL48:
1399:src/int.c     **** 		if ((b & 1))
 586              		.loc 1 1399 8 view .LVU140
ARM GAS  /tmp/ccl34fCK.s 			page 38


 587 0180 1746     		mov	r7, r2
 588              	.LVL49:
1399:src/int.c     **** 		if ((b & 1))
 589              		.loc 1 1399 8 view .LVU141
 590 0182 1E46     		mov	r6, r3
1399:src/int.c     **** 		if ((b & 1))
 591              		.loc 1 1399 8 view .LVU142
 592              	.LBE616:
 593              	.LBE615:
 594              	.LBB619:
 595              	.LBB611:
1398:src/int.c     **** 	while (b > 0) {
 596              		.loc 1 1398 30 view .LVU143
 597 0184 2046     		mov	r0, r4
 598 0186 2946     		mov	r1, r5
 599 0188 5246     		mov	r2, r10
 600 018a 5B46     		mov	r3, fp
 601 018c 0C97     		str	r7, [sp, #48]
 602 018e 0D96     		str	r6, [sp, #52]
 603              	.LBE611:
 604              	.LBE619:
 605              	.LBB620:
 606              	.LBB617:
1405:src/int.c     **** }
 607              		.loc 1 1405 2 is_stmt 1 view .LVU144
 608              	.LVL50:
1405:src/int.c     **** }
 609              		.loc 1 1405 2 is_stmt 0 view .LVU145
 610              	.LBE617:
 611              	.LBE620:
 612              	.LBB621:
 613              	.LBB612:
1398:src/int.c     **** 	while (b > 0) {
 614              		.loc 1 1398 30 view .LVU146
 615 0190 FFF7FEFF 		bl	__aeabi_uldivmod
 616              	.LVL51:
 617 0194 B946     		mov	r9, r7
 618 0196 B046     		mov	r8, r6
 619              	.LVL52:
1398:src/int.c     **** 	while (b > 0) {
 620              		.loc 1 1398 30 view .LVU147
 621              	.LBE612:
 622              	.LBE621:
1414:src/int.c     **** 		b /= 2;
 623              		.loc 1 1414 3 is_stmt 1 view .LVU148
 624              	.LBB622:
1397:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 625              		.loc 1 1397 27 view .LVU149
 626              	.LBB613:
1398:src/int.c     **** 	while (b > 0) {
 627              		.loc 1 1398 2 view .LVU150
1398:src/int.c     **** 	while (b > 0) {
 628              		.loc 1 1398 30 is_stmt 0 view .LVU151
 629 0198 08EE109A 		vmov	s16, r9	@ int
 630 019c 08EE908A 		vmov	s17, r8	@ int
 631 01a0 1646     		mov	r6, r2
 632              	.LVL53:
ARM GAS  /tmp/ccl34fCK.s 			page 39


1398:src/int.c     **** 	while (b > 0) {
 633              		.loc 1 1398 30 view .LVU152
 634 01a2 1F46     		mov	r7, r3
 635              	.LVL54:
1399:src/int.c     **** 		if ((b & 1))
 636              		.loc 1 1399 2 is_stmt 1 view .LVU153
1399:src/int.c     **** 		if ((b & 1))
 637              		.loc 1 1399 8 view .LVU154
 638 01a4 61E7     		b	.L22
 639              	.LVL55:
 640              	.L30:
1399:src/int.c     **** 		if ((b & 1))
 641              		.loc 1 1399 8 is_stmt 0 view .LVU155
 642              	.LBE613:
 643              	.LBE622:
 644              	.LBB623:
 645              	.LBB618:
 646 01a6 CDE90C45 		strd	r4, r5, [sp, #48]
 647 01aa 08EE104A 		vmov	s16, r4	@ int
 648              	.LVL56:
1399:src/int.c     **** 		if ((b & 1))
 649              		.loc 1 1399 8 view .LVU156
 650 01ae 08EE905A 		vmov	s17, r5	@ int
 651 01b2 8FE7     		b	.L23
 652              	.LVL57:
 653              	.L20:
1399:src/int.c     **** 		if ((b & 1))
 654              		.loc 1 1399 8 view .LVU157
 655 01b4 5246     		mov	r2, r10
 656              	.LVL58:
1399:src/int.c     **** 		if ((b & 1))
 657              		.loc 1 1399 8 view .LVU158
 658 01b6 5B46     		mov	r3, fp
 659 01b8 0120     		movs	r0, #1
 660              	.LVL59:
1399:src/int.c     **** 		if ((b & 1))
 661              		.loc 1 1399 8 view .LVU159
 662 01ba 0021     		movs	r1, #0
 663 01bc FFF7FEFF 		bl	__aeabi_uldivmod
 664              	.LVL60:
 665 01c0 CDE90C23 		strd	r2, r3, [sp, #48]
 666              	.LBE618:
 667              	.LBE623:
1417:src/int.c     **** }
 668              		.loc 1 1417 2 is_stmt 1 view .LVU160
 669              		.loc 1 1418 1 is_stmt 0 view .LVU161
 670 01c4 DDE90C01 		ldrd	r0, r1, [sp, #48]
 671 01c8 0FB0     		add	sp, sp, #60
 672              		.cfi_def_cfa_offset 44
 673              		@ sp needed
 674 01ca BDEC028B 		vldm	sp!, {d8}
 675              		.cfi_restore 80
 676              		.cfi_restore 81
 677              		.cfi_def_cfa_offset 36
 678 01ce BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 679              		.loc 1 1418 1 view .LVU162
 680              		.cfi_endproc
ARM GAS  /tmp/ccl34fCK.s 			page 40


 681              	.LFE70:
 683 01d2 00BF     		.section	.text.set_carry.part.0,"ax",%progbits
 684              		.align	1
 685              		.p2align 2,,3
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu fpv4-sp-d16
 691              	set_carry.part.0:
 692              	.LFB75:
  53:src/int.c     **** #ifndef TINY_BUILD
 693              		.loc 1 53 6 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 698              	.LVL61:
  56:src/int.c     **** 	else
 699              		.loc 1 56 3 view .LVU164
 700 0000 5121     		movs	r1, #81
 701 0002 6A20     		movs	r0, #106
 702 0004 FFF7FEBF 		b	cmdflag
 703              	.LVL62:
 704              		.cfi_endproc
 705              	.LFE75:
 707              		.section	.text.intASR,"ax",%progbits
 708              		.align	1
 709              		.p2align 2,,3
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu fpv4-sp-d16
 715              	intASR:
 716              	.LVL63:
 717              	.LFB46:
 910:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 718              		.loc 1 910 46 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 911:src/int.c     **** 	const long long int tbm = topbit_mask();
 722              		.loc 1 911 2 view .LVU166
 723              	.LBB624:
 724              	.LBI624:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 725              		.loc 1 38 23 view .LVU167
 726              	.LBB625:
  39:src/int.c     **** }
 727              		.loc 1 39 2 view .LVU168
  39:src/int.c     **** }
 728              		.loc 1 39 39 is_stmt 0 view .LVU169
 729 0000 264A     		ldr	r2, .L57
 730              	.LBE625:
 731              	.LBE624:
 732              	.LBB628:
 733              	.LBB629:
 734              	.LBB630:
ARM GAS  /tmp/ccl34fCK.s 			page 41


 735              	.LBB631:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 736              		.loc 1 43 26 view .LVU170
 737 0002 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 738              		.loc 1 43 15 view .LVU171
 739 0006 03F03F03 		and	r3, r3, #63
 740              	.LBE631:
 741              	.LBE630:
 742              	.LBE629:
 743              	.LBE628:
 910:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 744              		.loc 1 910 46 view .LVU172
 745 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 746              		.cfi_def_cfa_offset 24
 747              		.cfi_offset 4, -24
 748              		.cfi_offset 5, -20
 749              		.cfi_offset 6, -16
 750              		.cfi_offset 7, -12
 751              		.cfi_offset 8, -8
 752              		.cfi_offset 14, -4
 753              	.LBB641:
 754              	.LBB626:
  39:src/int.c     **** }
 755              		.loc 1 39 39 view .LVU173
 756 000e 92F8E887 		ldrb	r8, [r2, #2024]	@ zero_extendqisi2
 757              	.LBE626:
 758              	.LBE641:
 759              	.LBB642:
 760              	.LBB638:
 761              	.LBB635:
 762              	.LBB632:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 763              		.loc 1 44 26 view .LVU174
 764 0012 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 765              		.loc 1 44 5 view .LVU175
 766 0014 3E2A     		cmp	r2, #62
 767              	.LBE632:
 768              	.LBE635:
 769              	.LBE638:
 770              	.LBE642:
 910:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 771              		.loc 1 910 46 view .LVU176
 772 0016 0646     		mov	r6, r0
 773 0018 0F46     		mov	r7, r1
 774              	.LBB643:
 775              	.LBB627:
  39:src/int.c     **** }
 776              		.loc 1 39 9 view .LVU177
 777 001a C8F38108 		ubfx	r8, r8, #2, #2
 778              	.LVL64:
  39:src/int.c     **** }
 779              		.loc 1 39 9 view .LVU178
 780              	.LBE627:
 781              	.LBE643:
 912:src/int.c     **** 	long long int y;
ARM GAS  /tmp/ccl34fCK.s 			page 42


 782              		.loc 1 912 2 is_stmt 1 view .LVU179
 783              	.LBB644:
 784              	.LBI628:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 785              		.loc 1 109 22 view .LVU180
 786              	.LBB639:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 787              		.loc 1 110 2 view .LVU181
 788              	.LBB636:
 789              	.LBI630:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 790              		.loc 1 42 14 view .LVU182
 791              	.LBB633:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 792              		.loc 1 43 2 view .LVU183
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 793              		.loc 1 44 2 view .LVU184
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 794              		.loc 1 44 5 is_stmt 0 view .LVU185
 795 001e 38D8     		bhi	.L48
 796 0020 0125     		movs	r5, #1
 797 0022 213B     		subs	r3, r3, #33
 798 0024 C2F12001 		rsb	r1, r2, #32
 799 0028 05FA03F4 		lsl	r4, r5, r3
 800 002c 25FA01F1 		lsr	r1, r5, r1
 801 0030 0C43     		orrs	r4, r4, r1
 802 0032 9540     		lsls	r5, r5, r2
 803              	.L43:
 804              	.LVL65:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 805              		.loc 1 44 5 view .LVU186
 806              	.LBE633:
 807              	.LBE636:
 111:src/int.c     **** 	return bit;
 808              		.loc 1 111 2 is_stmt 1 view .LVU187
 112:src/int.c     **** }
 809              		.loc 1 112 2 view .LVU188
 112:src/int.c     **** }
 810              		.loc 1 112 2 is_stmt 0 view .LVU189
 811              	.LBE639:
 812              	.LBE644:
 913:src/int.c     **** 
 813              		.loc 1 913 2 is_stmt 1 view .LVU190
 915:src/int.c     **** 	if (mode == MODE_SGNMANT)
 814              		.loc 1 915 2 view .LVU191
 815              	.LBB645:
 816              	.LBI645:
  53:src/int.c     **** #ifndef TINY_BUILD
 817              		.loc 1 53 6 view .LVU192
 818              	.LBB646:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 819              		.loc 1 55 2 view .LVU193
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 820              		.loc 1 55 5 is_stmt 0 view .LVU194
 821 0034 F307     		lsls	r3, r6, #31
 822 0036 16D5     		bpl	.L44
 823 0038 FFF7FEFF 		bl	set_carry.part.0
ARM GAS  /tmp/ccl34fCK.s 			page 43


 824              	.LVL66:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 825              		.loc 1 55 5 view .LVU195
 826              	.LBE646:
 827              	.LBE645:
 916:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 828              		.loc 1 916 2 is_stmt 1 view .LVU196
 916:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 829              		.loc 1 916 5 is_stmt 0 view .LVU197
 830 003c B8F1030F 		cmp	r8, #3
 831 0040 18D0     		beq	.L56
 832              	.L46:
 919:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 833              		.loc 1 919 2 is_stmt 1 view .LVU198
 919:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 834              		.loc 1 919 4 is_stmt 0 view .LVU199
 835 0042 7008     		lsrs	r0, r6, #1
 920:src/int.c     **** 		y |= tbm;
 836              		.loc 1 920 5 view .LVU200
 837 0044 B8F1020F 		cmp	r8, #2
 919:src/int.c     **** 	if (mode != MODE_UNSIGNED && (x & tbm) != 0)
 838              		.loc 1 919 4 view .LVU201
 839 0048 40EAC770 		orr	r0, r0, r7, lsl #31
 840 004c 4FEA6701 		asr	r1, r7, #1
 841              	.LVL67:
 920:src/int.c     **** 		y |= tbm;
 842              		.loc 1 920 2 is_stmt 1 view .LVU202
 920:src/int.c     **** 		y |= tbm;
 843              		.loc 1 920 5 is_stmt 0 view .LVU203
 844 0050 07D0     		beq	.L42
 921:src/int.c     **** 	return y;
 845              		.loc 1 921 3 is_stmt 1 discriminator 1 view .LVU204
 920:src/int.c     **** 		y |= tbm;
 846              		.loc 1 920 34 is_stmt 0 discriminator 1 view .LVU205
 847 0052 06EA0502 		and	r2, r6, r5
 848 0056 07EA0403 		and	r3, r7, r4
 920:src/int.c     **** 		y |= tbm;
 849              		.loc 1 920 28 discriminator 1 view .LVU206
 850 005a 1343     		orrs	r3, r2, r3
 921:src/int.c     **** 	return y;
 851              		.loc 1 921 5 discriminator 1 view .LVU207
 852 005c 1CBF     		itt	ne
 853 005e 2843     		orrne	r0, r0, r5
 854              	.LVL68:
 921:src/int.c     **** 	return y;
 855              		.loc 1 921 5 discriminator 1 view .LVU208
 856 0060 2143     		orrne	r1, r1, r4
 857              	.LVL69:
 858              	.L42:
 923:src/int.c     **** 
 859              		.loc 1 923 1 view .LVU209
 860 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 861              	.LVL70:
 862              	.L44:
 863              	.LBB648:
 864              	.LBB647:
  58:src/int.c     **** #endif
ARM GAS  /tmp/ccl34fCK.s 			page 44


 865              		.loc 1 58 3 is_stmt 1 view .LVU210
 866 0066 5221     		movs	r1, #82
 867 0068 6A20     		movs	r0, #106
 868              	.LVL71:
  58:src/int.c     **** #endif
 869              		.loc 1 58 3 is_stmt 0 view .LVU211
 870 006a FFF7FEFF 		bl	cmdflag
 871              	.LVL72:
  58:src/int.c     **** #endif
 872              		.loc 1 58 3 view .LVU212
 873              	.LBE647:
 874              	.LBE648:
 916:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 875              		.loc 1 916 2 is_stmt 1 view .LVU213
 916:src/int.c     **** 		return ((x & ~tbm) >> 1) | (x & tbm);
 876              		.loc 1 916 5 is_stmt 0 view .LVU214
 877 006e B8F1030F 		cmp	r8, #3
 878 0072 E6D1     		bne	.L46
 879              	.L56:
 917:src/int.c     **** 
 880              		.loc 1 917 3 is_stmt 1 view .LVU215
 917:src/int.c     **** 
 881              		.loc 1 917 14 is_stmt 0 view .LVU216
 882 0074 26EA0503 		bic	r3, r6, r5
 883 0078 27EA0401 		bic	r1, r7, r4
 917:src/int.c     **** 
 884              		.loc 1 917 22 view .LVU217
 885 007c 5B08     		lsrs	r3, r3, #1
 886 007e 43EAC173 		orr	r3, r3, r1, lsl #31
 917:src/int.c     **** 
 887              		.loc 1 917 33 view .LVU218
 888 0082 3540     		ands	r5, r5, r6
 889 0084 3C40     		ands	r4, r4, r7
 917:src/int.c     **** 
 890              		.loc 1 917 28 view .LVU219
 891 0086 43EA0500 		orr	r0, r3, r5
 892 008a 44EA6101 		orr	r1, r4, r1, asr #1
 923:src/int.c     **** 
 893              		.loc 1 923 1 view .LVU220
 894 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 895              	.LVL73:
 896              	.L48:
 897              	.LBB649:
 898              	.LBB640:
 899              	.LBB637:
 900              	.LBB634:
 923:src/int.c     **** 
 901              		.loc 1 923 1 view .LVU221
 902 0092 0025     		movs	r5, #0
 903 0094 4FF00044 		mov	r4, #-2147483648
 904 0098 CCE7     		b	.L43
 905              	.L58:
 906 009a 00BF     		.align	2
 907              	.L57:
 908 009c 00000000 		.word	PersistentRam
 909              	.LBE634:
 910              	.LBE637:
ARM GAS  /tmp/ccl34fCK.s 			page 45


 911              	.LBE640:
 912              	.LBE649:
 913              		.cfi_endproc
 914              	.LFE46:
 916              		.section	.text.intLSR,"ax",%progbits
 917              		.align	1
 918              		.p2align 2,,3
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	intLSR:
 925              	.LVL74:
 926              	.LFB45:
 905:src/int.c     **** 	set_carry(0 != (x & 1));
 927              		.loc 1 905 46 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 906:src/int.c     **** 	return mask_value((x >> 1) & ~topbit_mask());
 931              		.loc 1 906 2 view .LVU223
 905:src/int.c     **** 	set_carry(0 != (x & 1));
 932              		.loc 1 905 46 is_stmt 0 view .LVU224
 933 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 934              		.cfi_def_cfa_offset 24
 935              		.cfi_offset 3, -24
 936              		.cfi_offset 4, -20
 937              		.cfi_offset 5, -16
 938              		.cfi_offset 6, -12
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 906:src/int.c     **** 	return mask_value((x >> 1) & ~topbit_mask());
 941              		.loc 1 906 20 view .LVU225
 942 0002 00F00102 		and	r2, r0, #1
 943 0006 0023     		movs	r3, #0
 944              	.LBB650:
 945              	.LBB651:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 946              		.loc 1 55 5 view .LVU226
 947 0008 1343     		orrs	r3, r2, r3
 948              	.LBE651:
 949              	.LBE650:
 905:src/int.c     **** 	set_carry(0 != (x & 1));
 950              		.loc 1 905 46 view .LVU227
 951 000a 0546     		mov	r5, r0
 952 000c 0C46     		mov	r4, r1
 953              	.LVL75:
 954              	.LBB654:
 955              	.LBI650:
  53:src/int.c     **** #ifndef TINY_BUILD
 956              		.loc 1 53 6 is_stmt 1 view .LVU228
 957              	.LBB652:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 958              		.loc 1 55 2 view .LVU229
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 959              		.loc 1 55 5 is_stmt 0 view .LVU230
 960 000e 31D0     		beq	.L60
ARM GAS  /tmp/ccl34fCK.s 			page 46


 961 0010 FFF7FEFF 		bl	set_carry.part.0
 962              	.LVL76:
 963              	.L61:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 964              		.loc 1 55 5 view .LVU231
 965              	.LBE652:
 966              	.LBE654:
 907:src/int.c     **** }
 967              		.loc 1 907 2 is_stmt 1 view .LVU232
 968              	.LBB655:
 969              	.LBB656:
 970              	.LBB657:
 971              	.LBB658:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 972              		.loc 1 43 26 is_stmt 0 view .LVU233
 973 0014 1B4B     		ldr	r3, .L66
 974 0016 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 975              		.loc 1 43 15 view .LVU234
 976 001a 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 977              		.loc 1 44 26 view .LVU235
 978 001e 5E1E     		subs	r6, r3, #1
 979              	.LBE658:
 980              	.LBE657:
 981              	.LBE656:
 982              	.LBE655:
 907:src/int.c     **** }
 983              		.loc 1 907 23 view .LVU236
 984 0020 6808     		lsrs	r0, r5, #1
 985              	.LBB670:
 986              	.LBB665:
 987              	.LBB662:
 988              	.LBB659:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 989              		.loc 1 44 5 view .LVU237
 990 0022 3E2E     		cmp	r6, #62
 991              	.LBE659:
 992              	.LBE662:
 993              	.LBE665:
 994              	.LBE670:
 907:src/int.c     **** }
 995              		.loc 1 907 23 view .LVU238
 996 0024 40EAC470 		orr	r0, r0, r4, lsl #31
 997 0028 4FEA6401 		asr	r1, r4, #1
 998              	.LBB671:
 999              	.LBI655:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 1000              		.loc 1 109 22 is_stmt 1 view .LVU239
 1001              	.LBB666:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1002              		.loc 1 110 2 view .LVU240
 1003              	.LBB663:
 1004              	.LBI657:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1005              		.loc 1 42 14 view .LVU241
 1006              	.LBB660:
ARM GAS  /tmp/ccl34fCK.s 			page 47


  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1007              		.loc 1 43 2 view .LVU242
 1008              	.LVL77:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1009              		.loc 1 44 2 view .LVU243
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1010              		.loc 1 44 5 is_stmt 0 view .LVU244
 1011 002c 27D8     		bhi	.L62
 1012              	.LVL78:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1013              		.loc 1 44 5 view .LVU245
 1014              	.LBE660:
 1015              	.LBE663:
 111:src/int.c     **** 	return bit;
 1016              		.loc 1 111 2 is_stmt 1 view .LVU246
 112:src/int.c     **** }
 1017              		.loc 1 112 2 view .LVU247
 112:src/int.c     **** }
 1018              		.loc 1 112 2 is_stmt 0 view .LVU248
 1019              	.LBE666:
 1020              	.LBE671:
 1021              	.LBB672:
 1022              	.LBI672:
  91:src/int.c     **** #ifndef TINY_BUILD
 1023              		.loc 1 91 15 is_stmt 1 view .LVU249
 1024              	.LBB673:
  93:src/int.c     **** 	long long int mask;
 1025              		.loc 1 93 2 view .LVU250
 1026              	.LBE673:
 1027              	.LBE672:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1028              		.loc 1 43 2 view .LVU251
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1029              		.loc 1 44 2 view .LVU252
 1030              	.LBB679:
 1031              	.LBB674:
  94:src/int.c     **** 
 1032              		.loc 1 94 2 view .LVU253
  96:src/int.c     **** 		return v;
 1033              		.loc 1 96 2 view .LVU254
  98:src/int.c     **** 	return v & mask;
 1034              		.loc 1 98 2 view .LVU255
  99:src/int.c     **** #else
 1035              		.loc 1 99 2 view .LVU256
 1036              	.LBE674:
 1037              	.LBE679:
 1038              	.LBB680:
 1039              	.LBB667:
 111:src/int.c     **** 	return bit;
 1040              		.loc 1 111 16 is_stmt 0 view .LVU257
 1041 002e 0122     		movs	r2, #1
 1042 0030 A3F12104 		sub	r4, r3, #33
 1043 0034 C6F12007 		rsb	r7, r6, #32
 1044 0038 22FA07F7 		lsr	r7, r2, r7
 1045 003c 02FA04F4 		lsl	r4, r2, r4
 1046 0040 3C43     		orrs	r4, r4, r7
 1047              	.LBE667:
ARM GAS  /tmp/ccl34fCK.s 			page 48


 1048              	.LBE680:
 1049              	.LBB681:
 1050              	.LBB675:
  98:src/int.c     **** 	return v & mask;
 1051              		.loc 1 98 14 view .LVU258
 1052 0042 A3F12005 		sub	r5, r3, #32
 1053 0046 C3F12007 		rsb	r7, r3, #32
 1054 004a 22FA07F7 		lsr	r7, r2, r7
 1055 004e 02FA05F5 		lsl	r5, r2, r5
 1056 0052 02FA03F3 		lsl	r3, r2, r3
 1057              	.LVL79:
  98:src/int.c     **** 	return v & mask;
 1058              		.loc 1 98 7 view .LVU259
 1059 0056 13F1FF33 		adds	r3, r3, #-1
 1060              	.LBE675:
 1061              	.LBE681:
 1062              	.LBB682:
 1063              	.LBB668:
 111:src/int.c     **** 	return bit;
 1064              		.loc 1 111 16 view .LVU260
 1065 005a 02FA06F2 		lsl	r2, r2, r6
 1066              	.LBE668:
 1067              	.LBE682:
 1068              	.LBB683:
 1069              	.LBB676:
  98:src/int.c     **** 	return v & mask;
 1070              		.loc 1 98 14 view .LVU261
 1071 005e 45EA0705 		orr	r5, r5, r7
 1072              	.LBE676:
 1073              	.LBE683:
 907:src/int.c     **** }
 1074              		.loc 1 907 9 view .LVU262
 1075 0062 21EA0401 		bic	r1, r1, r4
 1076              	.LVL80:
 907:src/int.c     **** }
 1077              		.loc 1 907 9 view .LVU263
 1078 0066 20EA0200 		bic	r0, r0, r2
 1079              	.LBB684:
 1080              	.LBB677:
  98:src/int.c     **** 	return v & mask;
 1081              		.loc 1 98 7 view .LVU264
 1082 006a 45F1FF35 		adc	r5, r5, #-1
  99:src/int.c     **** #else
 1083              		.loc 1 99 11 view .LVU265
 1084 006e 2940     		ands	r1, r1, r5
 1085 0070 1840     		ands	r0, r0, r3
 1086              	.LBE677:
 1087              	.LBE684:
 908:src/int.c     **** 
 1088              		.loc 1 908 1 view .LVU266
 1089 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1090              	.LVL81:
 1091              	.L60:
 1092              	.LBB685:
 1093              	.LBB653:
  58:src/int.c     **** #endif
 1094              		.loc 1 58 3 is_stmt 1 view .LVU267
ARM GAS  /tmp/ccl34fCK.s 			page 49


 1095 0074 5221     		movs	r1, #82
 1096              	.LVL82:
  58:src/int.c     **** #endif
 1097              		.loc 1 58 3 is_stmt 0 view .LVU268
 1098 0076 6A20     		movs	r0, #106
 1099              	.LVL83:
  58:src/int.c     **** #endif
 1100              		.loc 1 58 3 view .LVU269
 1101 0078 FFF7FEFF 		bl	cmdflag
 1102              	.LVL84:
 1103 007c CAE7     		b	.L61
 1104              	.LVL85:
 1105              	.L62:
  58:src/int.c     **** #endif
 1106              		.loc 1 58 3 view .LVU270
 1107              	.LBE653:
 1108              	.LBE685:
 1109              	.LBB686:
 1110              	.LBB669:
 1111              	.LBB664:
 1112              	.LBB661:
  45:src/int.c     **** 	return il;
 1113              		.loc 1 45 3 is_stmt 1 view .LVU271
  45:src/int.c     **** 	return il;
 1114              		.loc 1 45 3 is_stmt 0 view .LVU272
 1115              	.LBE661:
 1116              	.LBE664:
 111:src/int.c     **** 	return bit;
 1117              		.loc 1 111 2 is_stmt 1 view .LVU273
 112:src/int.c     **** }
 1118              		.loc 1 112 2 view .LVU274
 112:src/int.c     **** }
 1119              		.loc 1 112 2 is_stmt 0 view .LVU275
 1120              	.LBE669:
 1121              	.LBE686:
 907:src/int.c     **** }
 1122              		.loc 1 907 9 view .LVU276
 1123 007e 21F00041 		bic	r1, r1, #-2147483648
 1124              	.LVL86:
 1125              	.LBB687:
  91:src/int.c     **** #ifndef TINY_BUILD
 1126              		.loc 1 91 15 is_stmt 1 view .LVU277
 1127              	.LBB678:
  93:src/int.c     **** 	long long int mask;
 1128              		.loc 1 93 2 view .LVU278
 1129              	.LBE678:
 1130              	.LBE687:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1131              		.loc 1 43 2 view .LVU279
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1132              		.loc 1 44 2 view .LVU280
 908:src/int.c     **** 
 1133              		.loc 1 908 1 is_stmt 0 view .LVU281
 1134 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1135              	.L67:
 1136              		.align	2
 1137              	.L66:
ARM GAS  /tmp/ccl34fCK.s 			page 50


 1138 0084 00000000 		.word	PersistentRam
 1139              		.cfi_endproc
 1140              	.LFE45:
 1142              		.section	.text.intLSL,"ax",%progbits
 1143              		.align	1
 1144              		.p2align 2,,3
 1145              		.syntax unified
 1146              		.thumb
 1147              		.thumb_func
 1148              		.fpu fpv4-sp-d16
 1150              	intLSL:
 1151              	.LVL87:
 1152              	.LFB44:
 900:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 1153              		.loc 1 900 46 is_stmt 1 view -0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 901:src/int.c     **** 	return mask_value((x << 1) & ~1);
 1157              		.loc 1 901 2 view .LVU283
 1158              	.LBB688:
 1159              	.LBI688:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 1160              		.loc 1 109 22 view .LVU284
 1161              	.LBB689:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1162              		.loc 1 110 2 view .LVU285
 1163              	.LBB690:
 1164              	.LBI690:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1165              		.loc 1 42 14 view .LVU286
 1166              	.LBB691:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1167              		.loc 1 43 2 view .LVU287
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1168              		.loc 1 44 2 view .LVU288
 1169              	.LBE691:
 1170              	.LBE690:
 1171              	.LBE689:
 1172              	.LBE688:
 900:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 1173              		.loc 1 900 46 is_stmt 0 view .LVU289
 1174 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1175              		.cfi_def_cfa_offset 24
 1176              		.cfi_offset 3, -24
 1177              		.cfi_offset 4, -20
 1178              		.cfi_offset 5, -16
 1179              		.cfi_offset 6, -12
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182              	.LBB701:
 1183              	.LBB698:
 1184              	.LBB695:
 1185              	.LBB692:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1186              		.loc 1 43 26 view .LVU290
 1187 0002 234E     		ldr	r6, .L75
ARM GAS  /tmp/ccl34fCK.s 			page 51


 1188 0004 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1189              		.loc 1 43 15 view .LVU291
 1190 0008 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1191              		.loc 1 44 26 view .LVU292
 1192 000c 5F1E     		subs	r7, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1193              		.loc 1 44 5 view .LVU293
 1194 000e 3E2F     		cmp	r7, #62
 1195              	.LBE692:
 1196              	.LBE695:
 1197              	.LBE698:
 1198              	.LBE701:
 900:src/int.c     **** 	set_carry(0 != (topbit_mask() & x));
 1199              		.loc 1 900 46 view .LVU294
 1200 0010 0446     		mov	r4, r0
 1201 0012 0D46     		mov	r5, r1
 1202              	.LBB702:
 1203              	.LBB699:
 1204              	.LBB696:
 1205              	.LBB693:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1206              		.loc 1 44 5 view .LVU295
 1207 0014 37D8     		bhi	.L73
 1208 0016 0122     		movs	r2, #1
 1209 0018 213B     		subs	r3, r3, #33
 1210 001a C7F12001 		rsb	r1, r7, #32
 1211 001e 02FA03F3 		lsl	r3, r2, r3
 1212 0022 22FA01F1 		lsr	r1, r2, r1
 1213 0026 0B43     		orrs	r3, r3, r1
 1214 0028 BA40     		lsls	r2, r2, r7
 1215              	.L69:
 1216              	.LVL88:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1217              		.loc 1 44 5 view .LVU296
 1218              	.LBE693:
 1219              	.LBE696:
 111:src/int.c     **** 	return bit;
 1220              		.loc 1 111 2 is_stmt 1 view .LVU297
 112:src/int.c     **** }
 1221              		.loc 1 112 2 view .LVU298
 112:src/int.c     **** }
 1222              		.loc 1 112 2 is_stmt 0 view .LVU299
 1223              	.LBE699:
 1224              	.LBE702:
 1225              	.LBB703:
 1226              	.LBI703:
  53:src/int.c     **** #ifndef TINY_BUILD
 1227              		.loc 1 53 6 is_stmt 1 view .LVU300
 1228              	.LBB704:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1229              		.loc 1 55 2 view .LVU301
 1230              	.LBE704:
 1231              	.LBE703:
 901:src/int.c     **** 	return mask_value((x << 1) & ~1);
 1232              		.loc 1 901 32 is_stmt 0 view .LVU302
ARM GAS  /tmp/ccl34fCK.s 			page 52


 1233 002a 04EA0200 		and	r0, r4, r2
 1234              	.LVL89:
 901:src/int.c     **** 	return mask_value((x << 1) & ~1);
 1235              		.loc 1 901 32 view .LVU303
 1236 002e 05EA0301 		and	r1, r5, r3
 1237              	.LBB707:
 1238              	.LBB705:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1239              		.loc 1 55 5 view .LVU304
 1240 0032 50EA0103 		orrs	r3, r0, r1
 1241              	.LVL90:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1242              		.loc 1 55 5 view .LVU305
 1243 0036 21D0     		beq	.L70
 1244 0038 FFF7FEFF 		bl	set_carry.part.0
 1245              	.LVL91:
 1246              	.L71:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1247              		.loc 1 55 5 view .LVU306
 1248              	.LBE705:
 1249              	.LBE707:
 902:src/int.c     **** }
 1250              		.loc 1 902 2 is_stmt 1 view .LVU307
 1251              	.LBB708:
 1252              	.LBB709:
 1253              	.LBB710:
 1254              	.LBB711:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1255              		.loc 1 43 26 is_stmt 0 view .LVU308
 1256 003c 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1257              		.loc 1 43 15 view .LVU309
 1258 0040 03F03F06 		and	r6, r3, #63
 1259              	.LBE711:
 1260              	.LBE710:
 1261              	.LBE709:
 1262              	.LBE708:
 902:src/int.c     **** }
 1263              		.loc 1 902 9 view .LVU310
 1264 0044 2419     		adds	r4, r4, r4
 1265              	.LBB721:
 1266              	.LBB718:
 1267              	.LBB715:
 1268              	.LBB712:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1269              		.loc 1 44 26 view .LVU311
 1270 0046 06F1FF33 		add	r3, r6, #-1
 1271              	.LBE712:
 1272              	.LBE715:
 1273              	.LBE718:
 1274              	.LBE721:
 902:src/int.c     **** }
 1275              		.loc 1 902 9 view .LVU312
 1276 004a 6D41     		adcs	r5, r5, r5
 1277              	.LBB722:
 1278              	.LBB719:
 1279              	.LBB716:
ARM GAS  /tmp/ccl34fCK.s 			page 53


 1280              	.LBB713:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1281              		.loc 1 44 5 view .LVU313
 1282 004c 3E2B     		cmp	r3, #62
 1283              	.LBE713:
 1284              	.LBE716:
 1285              	.LBE719:
 1286              	.LBE722:
 902:src/int.c     **** }
 1287              		.loc 1 902 9 view .LVU314
 1288 004e 2946     		mov	r1, r5
 1289 0050 2046     		mov	r0, r4
 1290              	.LVL92:
 1291              	.LBB723:
 1292              	.LBI708:
  91:src/int.c     **** #ifndef TINY_BUILD
 1293              		.loc 1 91 15 is_stmt 1 view .LVU315
 1294              	.LBB720:
  93:src/int.c     **** 	long long int mask;
 1295              		.loc 1 93 2 view .LVU316
 1296              	.LBB717:
 1297              	.LBI710:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1298              		.loc 1 42 14 view .LVU317
 1299              	.LBB714:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1300              		.loc 1 43 2 view .LVU318
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1301              		.loc 1 44 2 view .LVU319
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1302              		.loc 1 44 5 is_stmt 0 view .LVU320
 1303 0052 12D8     		bhi	.L68
 1304              	.LVL93:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1305              		.loc 1 44 5 view .LVU321
 1306              	.LBE714:
 1307              	.LBE717:
  94:src/int.c     **** 
 1308              		.loc 1 94 2 is_stmt 1 view .LVU322
  96:src/int.c     **** 		return v;
 1309              		.loc 1 96 2 view .LVU323
  98:src/int.c     **** 	return v & mask;
 1310              		.loc 1 98 2 view .LVU324
  99:src/int.c     **** #else
 1311              		.loc 1 99 2 view .LVU325
  98:src/int.c     **** 	return v & mask;
 1312              		.loc 1 98 14 is_stmt 0 view .LVU326
 1313 0054 0123     		movs	r3, #1
 1314 0056 A6F12002 		sub	r2, r6, #32
 1315 005a C6F12001 		rsb	r1, r6, #32
 1316              	.LVL94:
  98:src/int.c     **** 	return v & mask;
 1317              		.loc 1 98 14 view .LVU327
 1318 005e 23FA01F1 		lsr	r1, r3, r1
 1319 0062 03FA02F2 		lsl	r2, r3, r2
 1320 0066 B340     		lsls	r3, r3, r6
 1321 0068 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccl34fCK.s 			page 54


  98:src/int.c     **** 	return v & mask;
 1322              		.loc 1 98 7 view .LVU328
 1323 006a 13F1FF33 		adds	r3, r3, #-1
 1324 006e 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 1325              		.loc 1 99 11 view .LVU329
 1326 0072 02EA0501 		and	r1, r2, r5
 1327              	.LVL95:
  99:src/int.c     **** #else
 1328              		.loc 1 99 11 view .LVU330
 1329 0076 03EA0400 		and	r0, r3, r4
 1330              	.L68:
 1331              	.LBE720:
 1332              	.LBE723:
 903:src/int.c     **** 
 1333              		.loc 1 903 1 view .LVU331
 1334 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1335              	.L70:
 1336              	.LBB724:
 1337              	.LBB706:
  58:src/int.c     **** #endif
 1338              		.loc 1 58 3 is_stmt 1 view .LVU332
 1339 007c 5221     		movs	r1, #82
 1340 007e 6A20     		movs	r0, #106
 1341 0080 FFF7FEFF 		bl	cmdflag
 1342              	.LVL96:
  58:src/int.c     **** #endif
 1343              		.loc 1 58 3 is_stmt 0 view .LVU333
 1344 0084 DAE7     		b	.L71
 1345              	.LVL97:
 1346              	.L73:
  58:src/int.c     **** #endif
 1347              		.loc 1 58 3 view .LVU334
 1348              	.LBE706:
 1349              	.LBE724:
 1350              	.LBB725:
 1351              	.LBB700:
 1352              	.LBB697:
 1353              	.LBB694:
 1354 0086 0022     		movs	r2, #0
 1355 0088 4FF00043 		mov	r3, #-2147483648
 1356 008c CDE7     		b	.L69
 1357              	.L76:
 1358 008e 00BF     		.align	2
 1359              	.L75:
 1360 0090 00000000 		.word	PersistentRam
 1361              	.LBE694:
 1362              	.LBE697:
 1363              	.LBE700:
 1364              	.LBE725:
 1365              		.cfi_endproc
 1366              	.LFE44:
 1368              		.section	.text.intRRC,"ax",%progbits
 1369              		.align	1
 1370              		.p2align 2,,3
 1371              		.syntax unified
 1372              		.thumb
ARM GAS  /tmp/ccl34fCK.s 			page 55


 1373              		.thumb_func
 1374              		.fpu fpv4-sp-d16
 1376              	intRRC:
 1377              	.LVL98:
 1378              	.LFB50:
 948:src/int.c     **** 	const int cin = get_carry();
 1379              		.loc 1 948 46 is_stmt 1 view -0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 949:src/int.c     **** 
 1383              		.loc 1 949 2 view .LVU336
 1384              	.LBB726:
 1385              	.LBI726:
  49:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 1386              		.loc 1 49 5 view .LVU337
 1387              	.LBB727:
  50:src/int.c     **** }
 1388              		.loc 1 50 2 view .LVU338
 1389              	.LBE727:
 1390              	.LBE726:
 948:src/int.c     **** 	const int cin = get_carry();
 1391              		.loc 1 948 46 is_stmt 0 view .LVU339
 1392 0000 70B5     		push	{r4, r5, r6, lr}
 1393              		.cfi_def_cfa_offset 16
 1394              		.cfi_offset 4, -16
 1395              		.cfi_offset 5, -12
 1396              		.cfi_offset 6, -8
 1397              		.cfi_offset 14, -4
 948:src/int.c     **** 	const int cin = get_carry();
 1398              		.loc 1 948 46 view .LVU340
 1399 0002 0446     		mov	r4, r0
 1400              	.LBB731:
 1401              	.LBB728:
  50:src/int.c     **** }
 1402              		.loc 1 50 9 view .LVU341
 1403 0004 6A20     		movs	r0, #106
 1404              	.LVL99:
  50:src/int.c     **** }
 1405              		.loc 1 50 9 view .LVU342
 1406              	.LBE728:
 1407              	.LBE731:
 948:src/int.c     **** 	const int cin = get_carry();
 1408              		.loc 1 948 46 view .LVU343
 1409 0006 0E46     		mov	r6, r1
 1410              	.LBB732:
 1411              	.LBB729:
  50:src/int.c     **** }
 1412              		.loc 1 50 9 view .LVU344
 1413 0008 FFF7FEFF 		bl	get_user_flag
 1414              	.LVL100:
 1415              	.LBE729:
 1416              	.LBE732:
 1417              	.LBB733:
 1418              	.LBB734:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1419              		.loc 1 55 5 view .LVU345
ARM GAS  /tmp/ccl34fCK.s 			page 56


 1420 000c E307     		lsls	r3, r4, #31
 1421              	.LBE734:
 1422              	.LBE733:
 1423              	.LBB737:
 1424              	.LBB730:
  50:src/int.c     **** }
 1425              		.loc 1 50 9 view .LVU346
 1426 000e 0546     		mov	r5, r0
 1427              	.LVL101:
  50:src/int.c     **** }
 1428              		.loc 1 50 9 view .LVU347
 1429              	.LBE730:
 1430              	.LBE737:
 951:src/int.c     **** 	x = intLSR(x);
 1431              		.loc 1 951 2 is_stmt 1 view .LVU348
 1432              	.LBB738:
 1433              	.LBI733:
  53:src/int.c     **** #ifndef TINY_BUILD
 1434              		.loc 1 53 6 view .LVU349
 1435              	.LBB735:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1436              		.loc 1 55 2 view .LVU350
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1437              		.loc 1 55 5 is_stmt 0 view .LVU351
 1438 0010 30D5     		bpl	.L78
 1439 0012 FFF7FEFF 		bl	set_carry.part.0
 1440              	.LVL102:
 1441              	.L79:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1442              		.loc 1 55 5 view .LVU352
 1443              	.LBE735:
 1444              	.LBE738:
 952:src/int.c     **** 	if (cin)
 1445              		.loc 1 952 2 is_stmt 1 view .LVU353
 952:src/int.c     **** 	if (cin)
 1446              		.loc 1 952 6 is_stmt 0 view .LVU354
 1447 0016 2046     		mov	r0, r4
 1448 0018 3146     		mov	r1, r6
 1449 001a FFF7FEFF 		bl	intLSR
 1450              	.LVL103:
 953:src/int.c     **** 		x |= topbit_mask();
 1451              		.loc 1 953 2 is_stmt 1 view .LVU355
 1452              	.LBB739:
 1453              	.LBB740:
 1454              	.LBB741:
 1455              	.LBB742:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1456              		.loc 1 43 26 is_stmt 0 view .LVU356
 1457 001e 1A4B     		ldr	r3, .L86
 1458 0020 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1459              		.loc 1 43 15 view .LVU357
 1460 0024 03F03F02 		and	r2, r3, #63
 1461              	.LVL104:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1462              		.loc 1 44 2 is_stmt 1 view .LVU358
  44:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccl34fCK.s 			page 57


 1463              		.loc 1 44 26 is_stmt 0 view .LVU359
 1464 0028 541E     		subs	r4, r2, #1
 1465              	.LBE742:
 1466              	.LBE741:
 1467              	.LBE740:
 1468              	.LBE739:
 953:src/int.c     **** 		x |= topbit_mask();
 1469              		.loc 1 953 5 view .LVU360
 1470 002a 75B1     		cbz	r5, .L81
 954:src/int.c     **** 	return mask_value(x);
 1471              		.loc 1 954 3 is_stmt 1 view .LVU361
 1472              	.LBB749:
 1473              	.LBI739:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 1474              		.loc 1 109 22 view .LVU362
 1475              	.LBB747:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1476              		.loc 1 110 2 view .LVU363
 1477              	.LBB745:
 1478              	.LBI741:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1479              		.loc 1 42 14 view .LVU364
 1480              	.LBB743:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1481              		.loc 1 43 2 view .LVU365
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1482              		.loc 1 44 5 is_stmt 0 view .LVU366
 1483 002c 3E2C     		cmp	r4, #62
 1484 002e 26D8     		bhi	.L84
 1485 0030 0125     		movs	r5, #1
 1486              	.LVL105:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1487              		.loc 1 44 5 view .LVU367
 1488 0032 A2F12103 		sub	r3, r2, #33
 1489 0036 C4F12006 		rsb	r6, r4, #32
 1490 003a 05FA03F3 		lsl	r3, r5, r3
 1491 003e 25FA06F6 		lsr	r6, r5, r6
 1492 0042 3343     		orrs	r3, r3, r6
 1493 0044 A540     		lsls	r5, r5, r4
 1494              	.L82:
 1495              	.LVL106:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1496              		.loc 1 44 5 view .LVU368
 1497              	.LBE743:
 1498              	.LBE745:
 111:src/int.c     **** 	return bit;
 1499              		.loc 1 111 2 is_stmt 1 view .LVU369
 112:src/int.c     **** }
 1500              		.loc 1 112 2 view .LVU370
 112:src/int.c     **** }
 1501              		.loc 1 112 2 is_stmt 0 view .LVU371
 1502              	.LBE747:
 1503              	.LBE749:
 954:src/int.c     **** 	return mask_value(x);
 1504              		.loc 1 954 5 view .LVU372
 1505 0046 2843     		orrs	r0, r0, r5
 1506              	.LVL107:
ARM GAS  /tmp/ccl34fCK.s 			page 58


 954:src/int.c     **** 	return mask_value(x);
 1507              		.loc 1 954 5 view .LVU373
 1508 0048 1943     		orrs	r1, r1, r3
 1509              	.LVL108:
 1510              	.L81:
 955:src/int.c     **** }
 1511              		.loc 1 955 2 is_stmt 1 view .LVU374
 1512              	.LBB750:
 1513              	.LBI750:
  91:src/int.c     **** #ifndef TINY_BUILD
 1514              		.loc 1 91 15 view .LVU375
 1515              	.LBB751:
  93:src/int.c     **** 	long long int mask;
 1516              		.loc 1 93 2 view .LVU376
 1517              	.LBB752:
 1518              	.LBI752:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1519              		.loc 1 42 14 view .LVU377
 1520              	.LBB753:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1521              		.loc 1 43 2 view .LVU378
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1522              		.loc 1 44 2 view .LVU379
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1523              		.loc 1 44 5 is_stmt 0 view .LVU380
 1524 004a 3E2C     		cmp	r4, #62
 1525 004c 11D8     		bhi	.L77
 1526              	.LVL109:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1527              		.loc 1 44 5 view .LVU381
 1528              	.LBE753:
 1529              	.LBE752:
  94:src/int.c     **** 
 1530              		.loc 1 94 2 is_stmt 1 view .LVU382
  96:src/int.c     **** 		return v;
 1531              		.loc 1 96 2 view .LVU383
  98:src/int.c     **** 	return v & mask;
 1532              		.loc 1 98 2 view .LVU384
  99:src/int.c     **** #else
 1533              		.loc 1 99 2 view .LVU385
  98:src/int.c     **** 	return v & mask;
 1534              		.loc 1 98 14 is_stmt 0 view .LVU386
 1535 004e 0123     		movs	r3, #1
 1536 0050 A2F12004 		sub	r4, r2, #32
 1537 0054 C2F12005 		rsb	r5, r2, #32
 1538 0058 03FA04F4 		lsl	r4, r3, r4
 1539 005c 23FA05F5 		lsr	r5, r3, r5
 1540 0060 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 1541              		.loc 1 98 7 view .LVU387
 1542 0062 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 1543              		.loc 1 98 14 view .LVU388
 1544 0066 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 1545              		.loc 1 98 7 view .LVU389
 1546 006a 44F1FF34 		adc	r4, r4, #-1
ARM GAS  /tmp/ccl34fCK.s 			page 59


  99:src/int.c     **** #else
 1547              		.loc 1 99 11 view .LVU390
 1548 006e 2140     		ands	r1, r1, r4
 1549              	.LVL110:
  99:src/int.c     **** #else
 1550              		.loc 1 99 11 view .LVU391
 1551 0070 1840     		ands	r0, r0, r3
 1552              	.L77:
  99:src/int.c     **** #else
 1553              		.loc 1 99 11 view .LVU392
 1554              	.LBE751:
 1555              	.LBE750:
 956:src/int.c     **** #endif
 1556              		.loc 1 956 1 view .LVU393
 1557 0072 70BD     		pop	{r4, r5, r6, pc}
 1558              	.LVL111:
 1559              	.L78:
 1560              	.LBB754:
 1561              	.LBB736:
  58:src/int.c     **** #endif
 1562              		.loc 1 58 3 is_stmt 1 view .LVU394
 1563 0074 5221     		movs	r1, #82
 1564 0076 6A20     		movs	r0, #106
 1565              	.LVL112:
  58:src/int.c     **** #endif
 1566              		.loc 1 58 3 is_stmt 0 view .LVU395
 1567 0078 FFF7FEFF 		bl	cmdflag
 1568              	.LVL113:
 1569 007c CBE7     		b	.L79
 1570              	.LVL114:
 1571              	.L84:
  58:src/int.c     **** #endif
 1572              		.loc 1 58 3 view .LVU396
 1573              	.LBE736:
 1574              	.LBE754:
 1575              	.LBB755:
 1576              	.LBB748:
 1577              	.LBB746:
 1578              	.LBB744:
 1579 007e 0025     		movs	r5, #0
 1580              	.LVL115:
  58:src/int.c     **** #endif
 1581              		.loc 1 58 3 view .LVU397
 1582 0080 4FF00043 		mov	r3, #-2147483648
 1583 0084 DFE7     		b	.L82
 1584              	.L87:
 1585 0086 00BF     		.align	2
 1586              	.L86:
 1587 0088 00000000 		.word	PersistentRam
 1588              	.LBE744:
 1589              	.LBE746:
 1590              	.LBE748:
 1591              	.LBE755:
 1592              		.cfi_endproc
 1593              	.LFE50:
 1595              		.section	.text.intRLC,"ax",%progbits
 1596              		.align	1
ARM GAS  /tmp/ccl34fCK.s 			page 60


 1597              		.p2align 2,,3
 1598              		.syntax unified
 1599              		.thumb
 1600              		.thumb_func
 1601              		.fpu fpv4-sp-d16
 1603              	intRLC:
 1604              	.LVL116:
 1605              	.LFB49:
 942:src/int.c     **** 	const int cin = get_carry();
 1606              		.loc 1 942 46 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 943:src/int.c     **** 	set_carry((topbit_mask() & x)?1:0);
 1610              		.loc 1 943 2 view .LVU399
 1611              	.LBB756:
 1612              	.LBI756:
  49:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 1613              		.loc 1 49 5 view .LVU400
 1614              	.LBB757:
  50:src/int.c     **** }
 1615              		.loc 1 50 2 view .LVU401
 1616              	.LBE757:
 1617              	.LBE756:
 942:src/int.c     **** 	const int cin = get_carry();
 1618              		.loc 1 942 46 is_stmt 0 view .LVU402
 1619 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1620              		.cfi_def_cfa_offset 24
 1621              		.cfi_offset 3, -24
 1622              		.cfi_offset 4, -20
 1623              		.cfi_offset 5, -16
 1624              		.cfi_offset 6, -12
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
 1627              	.LBB761:
 1628              	.LBB762:
 1629              	.LBB763:
 1630              	.LBB764:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1631              		.loc 1 43 26 view .LVU403
 1632 0002 264E     		ldr	r6, .L95
 1633              	.LBE764:
 1634              	.LBE763:
 1635              	.LBE762:
 1636              	.LBE761:
 942:src/int.c     **** 	const int cin = get_carry();
 1637              		.loc 1 942 46 view .LVU404
 1638 0004 0746     		mov	r7, r0
 1639              	.LBB774:
 1640              	.LBB758:
  50:src/int.c     **** }
 1641              		.loc 1 50 9 view .LVU405
 1642 0006 6A20     		movs	r0, #106
 1643              	.LVL117:
  50:src/int.c     **** }
 1644              		.loc 1 50 9 view .LVU406
 1645              	.LBE758:
ARM GAS  /tmp/ccl34fCK.s 			page 61


 1646              	.LBE774:
 942:src/int.c     **** 	const int cin = get_carry();
 1647              		.loc 1 942 46 view .LVU407
 1648 0008 0D46     		mov	r5, r1
 1649              	.LBB775:
 1650              	.LBB759:
  50:src/int.c     **** }
 1651              		.loc 1 50 9 view .LVU408
 1652 000a FFF7FEFF 		bl	get_user_flag
 1653              	.LVL118:
 1654              	.LBE759:
 1655              	.LBE775:
 1656              	.LBB776:
 1657              	.LBB771:
 1658              	.LBB768:
 1659              	.LBB765:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1660              		.loc 1 43 26 view .LVU409
 1661 000e 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1662              		.loc 1 43 15 view .LVU410
 1663 0012 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1664              		.loc 1 44 26 view .LVU411
 1665 0016 591E     		subs	r1, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1666              		.loc 1 44 5 view .LVU412
 1667 0018 3E29     		cmp	r1, #62
 1668              	.LBE765:
 1669              	.LBE768:
 1670              	.LBE771:
 1671              	.LBE776:
 1672              	.LBB777:
 1673              	.LBB760:
  50:src/int.c     **** }
 1674              		.loc 1 50 9 view .LVU413
 1675 001a 0446     		mov	r4, r0
 1676              	.LVL119:
  50:src/int.c     **** }
 1677              		.loc 1 50 9 view .LVU414
 1678              	.LBE760:
 1679              	.LBE777:
 944:src/int.c     **** 	return mask_value(intLSL(x) | cin);
 1680              		.loc 1 944 2 is_stmt 1 view .LVU415
 1681              	.LBB778:
 1682              	.LBI761:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 1683              		.loc 1 109 22 view .LVU416
 1684              	.LBB772:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1685              		.loc 1 110 2 view .LVU417
 1686              	.LBB769:
 1687              	.LBI763:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1688              		.loc 1 42 14 view .LVU418
 1689              	.LBB766:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
ARM GAS  /tmp/ccl34fCK.s 			page 62


 1690              		.loc 1 43 2 view .LVU419
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1691              		.loc 1 44 2 view .LVU420
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1692              		.loc 1 44 5 is_stmt 0 view .LVU421
 1693 001c 3AD8     		bhi	.L93
 1694 001e 0122     		movs	r2, #1
 1695 0020 213B     		subs	r3, r3, #33
 1696 0022 C1F12000 		rsb	r0, r1, #32
 1697              	.LVL120:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1698              		.loc 1 44 5 view .LVU422
 1699 0026 02FA03F3 		lsl	r3, r2, r3
 1700 002a 22FA00F0 		lsr	r0, r2, r0
 1701 002e 0343     		orrs	r3, r3, r0
 1702 0030 8A40     		lsls	r2, r2, r1
 1703              	.L89:
 1704              	.LVL121:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1705              		.loc 1 44 5 view .LVU423
 1706              	.LBE766:
 1707              	.LBE769:
 111:src/int.c     **** 	return bit;
 1708              		.loc 1 111 2 is_stmt 1 view .LVU424
 112:src/int.c     **** }
 1709              		.loc 1 112 2 view .LVU425
 112:src/int.c     **** }
 1710              		.loc 1 112 2 is_stmt 0 view .LVU426
 1711              	.LBE772:
 1712              	.LBE778:
 1713              	.LBB779:
 1714              	.LBI779:
  53:src/int.c     **** #ifndef TINY_BUILD
 1715              		.loc 1 53 6 is_stmt 1 view .LVU427
 1716              	.LBB780:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1717              		.loc 1 55 2 view .LVU428
 1718              	.LBE780:
 1719              	.LBE779:
 944:src/int.c     **** 	return mask_value(intLSL(x) | cin);
 1720              		.loc 1 944 27 is_stmt 0 view .LVU429
 1721 0032 07EA0200 		and	r0, r7, r2
 1722 0036 05EA0301 		and	r1, r5, r3
 1723              	.LBB783:
 1724              	.LBB781:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1725              		.loc 1 55 5 view .LVU430
 1726 003a 50EA0103 		orrs	r3, r0, r1
 1727              	.LVL122:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1728              		.loc 1 55 5 view .LVU431
 1729 003e 24D0     		beq	.L90
 1730 0040 FFF7FEFF 		bl	set_carry.part.0
 1731              	.LVL123:
 1732              	.L91:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1733              		.loc 1 55 5 view .LVU432
ARM GAS  /tmp/ccl34fCK.s 			page 63


 1734              	.LBE781:
 1735              	.LBE783:
 945:src/int.c     **** }
 1736              		.loc 1 945 2 is_stmt 1 view .LVU433
 945:src/int.c     **** }
 1737              		.loc 1 945 20 is_stmt 0 view .LVU434
 1738 0044 3846     		mov	r0, r7
 1739 0046 2946     		mov	r1, r5
 1740 0048 FFF7FEFF 		bl	intLSL
 1741              	.LVL124:
 1742              	.LBB784:
 1743              	.LBB785:
 1744              	.LBB786:
 1745              	.LBB787:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1746              		.loc 1 43 26 view .LVU435
 1747 004c 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1748              		.loc 1 43 15 view .LVU436
 1749 0050 03F03F02 		and	r2, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1750              		.loc 1 44 26 view .LVU437
 1751 0054 531E     		subs	r3, r2, #1
 1752              	.LBE787:
 1753              	.LBE786:
 1754              	.LBE785:
 1755              	.LBE784:
 945:src/int.c     **** }
 1756              		.loc 1 945 9 view .LVU438
 1757 0056 E717     		asrs	r7, r4, #31
 1758              	.LBB794:
 1759              	.LBB792:
 1760              	.LBB790:
 1761              	.LBB788:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1762              		.loc 1 44 5 view .LVU439
 1763 0058 3E2B     		cmp	r3, #62
 1764              	.LBE788:
 1765              	.LBE790:
 1766              	.LBE792:
 1767              	.LBE794:
 945:src/int.c     **** }
 1768              		.loc 1 945 9 view .LVU440
 1769 005a 41EA0701 		orr	r1, r1, r7
 1770 005e 40EA0400 		orr	r0, r0, r4
 1771              	.LVL125:
 1772              	.LBB795:
 1773              	.LBI784:
  91:src/int.c     **** #ifndef TINY_BUILD
 1774              		.loc 1 91 15 is_stmt 1 view .LVU441
 1775              	.LBB793:
  93:src/int.c     **** 	long long int mask;
 1776              		.loc 1 93 2 view .LVU442
 1777              	.LBB791:
 1778              	.LBI786:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1779              		.loc 1 42 14 view .LVU443
ARM GAS  /tmp/ccl34fCK.s 			page 64


 1780              	.LBB789:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1781              		.loc 1 43 2 view .LVU444
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1782              		.loc 1 44 2 view .LVU445
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1783              		.loc 1 44 5 is_stmt 0 view .LVU446
 1784 0062 11D8     		bhi	.L88
 1785              	.LVL126:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1786              		.loc 1 44 5 view .LVU447
 1787              	.LBE789:
 1788              	.LBE791:
  94:src/int.c     **** 
 1789              		.loc 1 94 2 is_stmt 1 view .LVU448
  96:src/int.c     **** 		return v;
 1790              		.loc 1 96 2 view .LVU449
  98:src/int.c     **** 	return v & mask;
 1791              		.loc 1 98 2 view .LVU450
  99:src/int.c     **** #else
 1792              		.loc 1 99 2 view .LVU451
  98:src/int.c     **** 	return v & mask;
 1793              		.loc 1 98 14 is_stmt 0 view .LVU452
 1794 0064 0123     		movs	r3, #1
 1795 0066 A2F12004 		sub	r4, r2, #32
 1796              	.LVL127:
  98:src/int.c     **** 	return v & mask;
 1797              		.loc 1 98 14 view .LVU453
 1798 006a C2F12005 		rsb	r5, r2, #32
 1799 006e 03FA04F4 		lsl	r4, r3, r4
 1800 0072 23FA05F5 		lsr	r5, r3, r5
 1801 0076 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 1802              		.loc 1 98 7 view .LVU454
 1803 0078 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 1804              		.loc 1 98 14 view .LVU455
 1805 007c 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 1806              		.loc 1 98 7 view .LVU456
 1807 0080 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 1808              		.loc 1 99 11 view .LVU457
 1809 0084 2140     		ands	r1, r1, r4
 1810              	.LVL128:
  99:src/int.c     **** #else
 1811              		.loc 1 99 11 view .LVU458
 1812 0086 1840     		ands	r0, r0, r3
 1813              	.L88:
 1814              	.LBE793:
 1815              	.LBE795:
 946:src/int.c     **** 
 1816              		.loc 1 946 1 view .LVU459
 1817 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1818              	.LVL129:
 1819              	.L90:
 1820              	.LBB796:
ARM GAS  /tmp/ccl34fCK.s 			page 65


 1821              	.LBB782:
  58:src/int.c     **** #endif
 1822              		.loc 1 58 3 is_stmt 1 view .LVU460
 1823 008a 5221     		movs	r1, #82
 1824 008c 6A20     		movs	r0, #106
 1825 008e FFF7FEFF 		bl	cmdflag
 1826              	.LVL130:
  58:src/int.c     **** #endif
 1827              		.loc 1 58 3 is_stmt 0 view .LVU461
 1828 0092 D7E7     		b	.L91
 1829              	.LVL131:
 1830              	.L93:
  58:src/int.c     **** #endif
 1831              		.loc 1 58 3 view .LVU462
 1832              	.LBE782:
 1833              	.LBE796:
 1834              	.LBB797:
 1835              	.LBB773:
 1836              	.LBB770:
 1837              	.LBB767:
 1838 0094 0022     		movs	r2, #0
 1839 0096 4FF00043 		mov	r3, #-2147483648
 1840 009a CAE7     		b	.L89
 1841              	.L96:
 1842              		.align	2
 1843              	.L95:
 1844 009c 00000000 		.word	PersistentRam
 1845              	.LBE767:
 1846              	.LBE770:
 1847              	.LBE773:
 1848              	.LBE797:
 1849              		.cfi_endproc
 1850              	.LFE49:
 1852              		.section	.text.intRR,"ax",%progbits
 1853              		.align	1
 1854              		.p2align 2,,3
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	intRR:
 1861              	.LVL132:
 1862              	.LFB48:
 932:src/int.c     **** 	const int cry = x & 1;
 1863              		.loc 1 932 45 is_stmt 1 view -0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 933:src/int.c     **** 
 1867              		.loc 1 933 2 view .LVU464
 1868              	.LBB798:
 1869              	.LBB799:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1870              		.loc 1 55 5 is_stmt 0 view .LVU465
 1871 0000 C307     		lsls	r3, r0, #31
 1872              	.LBE799:
 1873              	.LBE798:
ARM GAS  /tmp/ccl34fCK.s 			page 66


 932:src/int.c     **** 	const int cry = x & 1;
 1874              		.loc 1 932 45 view .LVU466
 1875 0002 70B5     		push	{r4, r5, r6, lr}
 1876              		.cfi_def_cfa_offset 16
 1877              		.cfi_offset 4, -16
 1878              		.cfi_offset 5, -12
 1879              		.cfi_offset 6, -8
 1880              		.cfi_offset 14, -4
 932:src/int.c     **** 	const int cry = x & 1;
 1881              		.loc 1 932 45 view .LVU467
 1882 0004 0446     		mov	r4, r0
 1883              	.LVL133:
 935:src/int.c     **** 	x = intLSR(x);
 1884              		.loc 1 935 2 is_stmt 1 view .LVU468
 1885              	.LBB803:
 1886              	.LBI798:
  53:src/int.c     **** #ifndef TINY_BUILD
 1887              		.loc 1 53 6 view .LVU469
 1888              	.LBB800:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1889              		.loc 1 55 2 view .LVU470
 1890              	.LBE800:
 1891              	.LBE803:
 932:src/int.c     **** 	const int cry = x & 1;
 1892              		.loc 1 932 45 is_stmt 0 view .LVU471
 1893 0006 0D46     		mov	r5, r1
 1894              	.LBB804:
 1895              	.LBB801:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1896              		.loc 1 55 5 view .LVU472
 1897 0008 1FD5     		bpl	.L98
 1898 000a FFF7FEFF 		bl	set_carry.part.0
 1899              	.LVL134:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 1900              		.loc 1 55 5 view .LVU473
 1901              	.LBE801:
 1902              	.LBE804:
 936:src/int.c     **** 	if (cry)
 1903              		.loc 1 936 2 is_stmt 1 view .LVU474
 936:src/int.c     **** 	if (cry)
 1904              		.loc 1 936 6 is_stmt 0 view .LVU475
 1905 000e 2046     		mov	r0, r4
 1906 0010 2946     		mov	r1, r5
 1907 0012 FFF7FEFF 		bl	intLSR
 1908              	.LVL135:
 1909              	.LBB805:
 1910              	.LBB806:
 1911              	.LBB807:
 1912              	.LBB808:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1913              		.loc 1 43 26 view .LVU476
 1914 0016 204B     		ldr	r3, .L108
 1915 0018 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1916              		.loc 1 43 15 view .LVU477
 1917 001c 03F03F02 		and	r2, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccl34fCK.s 			page 67


 1918              		.loc 1 44 26 view .LVU478
 1919 0020 541E     		subs	r4, r2, #1
 1920              	.LVL136:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1921              		.loc 1 44 26 view .LVU479
 1922              	.LBE808:
 1923              	.LBE807:
 1924              	.LBE806:
 1925              	.LBE805:
 937:src/int.c     **** 		x |= topbit_mask();
 1926              		.loc 1 937 2 is_stmt 1 view .LVU480
 938:src/int.c     **** 	return mask_value(x);
 1927              		.loc 1 938 3 view .LVU481
 1928              	.LBB815:
 1929              	.LBI805:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 1930              		.loc 1 109 22 view .LVU482
 1931              	.LBB813:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 1932              		.loc 1 110 2 view .LVU483
 1933              	.LBB811:
 1934              	.LBI807:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1935              		.loc 1 42 14 view .LVU484
 1936              	.LBB809:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1937              		.loc 1 43 2 view .LVU485
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1938              		.loc 1 44 2 view .LVU486
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1939              		.loc 1 44 5 is_stmt 0 view .LVU487
 1940 0022 3E2C     		cmp	r4, #62
 1941 0024 34D8     		bhi	.L106
 1942 0026 0125     		movs	r5, #1
 1943 0028 A2F12103 		sub	r3, r2, #33
 1944 002c C4F12006 		rsb	r6, r4, #32
 1945 0030 05FA03F3 		lsl	r3, r5, r3
 1946 0034 25FA06F6 		lsr	r6, r5, r6
 1947 0038 3343     		orrs	r3, r3, r6
 1948 003a A540     		lsls	r5, r5, r4
 1949              	.L99:
 1950              	.LVL137:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1951              		.loc 1 44 5 view .LVU488
 1952              	.LBE809:
 1953              	.LBE811:
 111:src/int.c     **** 	return bit;
 1954              		.loc 1 111 2 is_stmt 1 view .LVU489
 112:src/int.c     **** }
 1955              		.loc 1 112 2 view .LVU490
 112:src/int.c     **** }
 1956              		.loc 1 112 2 is_stmt 0 view .LVU491
 1957              	.LBE813:
 1958              	.LBE815:
 1959              	.LBB816:
 1960              	.LBB817:
 1961              	.LBB818:
ARM GAS  /tmp/ccl34fCK.s 			page 68


 1962              	.LBB819:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1963              		.loc 1 44 5 view .LVU492
 1964 003c 3E2C     		cmp	r4, #62
 1965              	.LBE819:
 1966              	.LBE818:
 1967              	.LBE817:
 1968              	.LBE816:
 938:src/int.c     **** 	return mask_value(x);
 1969              		.loc 1 938 5 view .LVU493
 1970 003e 40EA0500 		orr	r0, r0, r5
 1971              	.LVL138:
 938:src/int.c     **** 	return mask_value(x);
 1972              		.loc 1 938 5 view .LVU494
 1973 0042 41EA0301 		orr	r1, r1, r3
 1974              	.LVL139:
 939:src/int.c     **** }
 1975              		.loc 1 939 2 is_stmt 1 view .LVU495
 1976              	.LBB826:
 1977              	.LBI816:
  91:src/int.c     **** #ifndef TINY_BUILD
 1978              		.loc 1 91 15 view .LVU496
 1979              	.LBB824:
  93:src/int.c     **** 	long long int mask;
 1980              		.loc 1 93 2 view .LVU497
 1981              	.LBB822:
 1982              	.LBI818:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 1983              		.loc 1 42 14 view .LVU498
 1984              	.LBB820:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 1985              		.loc 1 43 2 view .LVU499
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1986              		.loc 1 44 2 view .LVU500
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1987              		.loc 1 44 5 is_stmt 0 view .LVU501
 1988 0046 10D9     		bls	.L107
 1989              	.LVL140:
 1990              	.L97:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 1991              		.loc 1 44 5 view .LVU502
 1992              	.LBE820:
 1993              	.LBE822:
 1994              	.LBE824:
 1995              	.LBE826:
 940:src/int.c     **** 
 1996              		.loc 1 940 1 view .LVU503
 1997 0048 70BD     		pop	{r4, r5, r6, pc}
 1998              	.LVL141:
 1999              	.L98:
 2000              	.LBB827:
 2001              	.LBB802:
  58:src/int.c     **** #endif
 2002              		.loc 1 58 3 is_stmt 1 view .LVU504
 2003 004a 5221     		movs	r1, #82
 2004 004c 6A20     		movs	r0, #106
 2005              	.LVL142:
ARM GAS  /tmp/ccl34fCK.s 			page 69


  58:src/int.c     **** #endif
 2006              		.loc 1 58 3 is_stmt 0 view .LVU505
 2007 004e FFF7FEFF 		bl	cmdflag
 2008              	.LVL143:
  58:src/int.c     **** #endif
 2009              		.loc 1 58 3 view .LVU506
 2010              	.LBE802:
 2011              	.LBE827:
 936:src/int.c     **** 	if (cry)
 2012              		.loc 1 936 2 is_stmt 1 view .LVU507
 936:src/int.c     **** 	if (cry)
 2013              		.loc 1 936 6 is_stmt 0 view .LVU508
 2014 0052 2046     		mov	r0, r4
 2015 0054 2946     		mov	r1, r5
 2016 0056 FFF7FEFF 		bl	intLSR
 2017              	.LVL144:
 2018 005a 0F4B     		ldr	r3, .L108
 2019 005c 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 2020 0060 03F03F02 		and	r2, r3, #63
 2021              	.LVL145:
 937:src/int.c     **** 		x |= topbit_mask();
 2022              		.loc 1 937 2 is_stmt 1 view .LVU509
 2023 0064 541E     		subs	r4, r2, #1
 2024              	.LVL146:
 939:src/int.c     **** }
 2025              		.loc 1 939 2 view .LVU510
 2026              	.LBB828:
  91:src/int.c     **** #ifndef TINY_BUILD
 2027              		.loc 1 91 15 view .LVU511
 2028              	.LBB825:
  93:src/int.c     **** 	long long int mask;
 2029              		.loc 1 93 2 view .LVU512
 2030              	.LBB823:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 2031              		.loc 1 42 14 view .LVU513
 2032              	.LBB821:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2033              		.loc 1 43 2 view .LVU514
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2034              		.loc 1 44 2 view .LVU515
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2035              		.loc 1 44 5 is_stmt 0 view .LVU516
 2036 0066 3E2C     		cmp	r4, #62
 2037 0068 EED8     		bhi	.L97
 2038              	.LVL147:
 2039              	.L107:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2040              		.loc 1 44 5 view .LVU517
 2041              	.LBE821:
 2042              	.LBE823:
  94:src/int.c     **** 
 2043              		.loc 1 94 2 is_stmt 1 view .LVU518
  96:src/int.c     **** 		return v;
 2044              		.loc 1 96 2 view .LVU519
  98:src/int.c     **** 	return v & mask;
 2045              		.loc 1 98 2 view .LVU520
  99:src/int.c     **** #else
ARM GAS  /tmp/ccl34fCK.s 			page 70


 2046              		.loc 1 99 2 view .LVU521
  98:src/int.c     **** 	return v & mask;
 2047              		.loc 1 98 14 is_stmt 0 view .LVU522
 2048 006a 0123     		movs	r3, #1
 2049 006c A2F12004 		sub	r4, r2, #32
 2050 0070 C2F12005 		rsb	r5, r2, #32
 2051 0074 23FA05F5 		lsr	r5, r3, r5
 2052 0078 03FA04F4 		lsl	r4, r3, r4
 2053 007c 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 2054              		.loc 1 98 7 view .LVU523
 2055 007e 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 2056              		.loc 1 98 14 view .LVU524
 2057 0082 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 2058              		.loc 1 98 7 view .LVU525
 2059 0086 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 2060              		.loc 1 99 11 view .LVU526
 2061 008a 2140     		ands	r1, r1, r4
 2062              	.LVL148:
  99:src/int.c     **** #else
 2063              		.loc 1 99 11 view .LVU527
 2064 008c 1840     		ands	r0, r0, r3
 2065              	.LBE825:
 2066              	.LBE828:
 940:src/int.c     **** 
 2067              		.loc 1 940 1 view .LVU528
 2068 008e 70BD     		pop	{r4, r5, r6, pc}
 2069              	.LVL149:
 2070              	.L106:
 2071              	.LBB829:
 2072              	.LBB814:
 2073              	.LBB812:
 2074              	.LBB810:
 940:src/int.c     **** 
 2075              		.loc 1 940 1 view .LVU529
 2076 0090 0025     		movs	r5, #0
 2077 0092 4FF00043 		mov	r3, #-2147483648
 2078 0096 D1E7     		b	.L99
 2079              	.L109:
 2080              		.align	2
 2081              	.L108:
 2082 0098 00000000 		.word	PersistentRam
 2083              	.LBE810:
 2084              	.LBE812:
 2085              	.LBE814:
 2086              	.LBE829:
 2087              		.cfi_endproc
 2088              	.LFE48:
 2090              		.section	.text.intRL,"ax",%progbits
 2091              		.align	1
 2092              		.p2align 2,,3
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
ARM GAS  /tmp/ccl34fCK.s 			page 71


 2096              		.fpu fpv4-sp-d16
 2098              	intRL:
 2099              	.LVL150:
 2100              	.LFB47:
 925:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2101              		.loc 1 925 45 is_stmt 1 view -0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 8
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
 926:src/int.c     **** 
 2105              		.loc 1 926 2 view .LVU531
 2106              	.LBB830:
 2107              	.LBI830:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 2108              		.loc 1 109 22 view .LVU532
 2109              	.LBB831:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 2110              		.loc 1 110 2 view .LVU533
 2111              	.LBB832:
 2112              	.LBI832:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 2113              		.loc 1 42 14 view .LVU534
 2114              	.LBB833:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2115              		.loc 1 43 2 view .LVU535
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2116              		.loc 1 44 2 view .LVU536
 2117              	.LBE833:
 2118              	.LBE832:
 2119              	.LBE831:
 2120              	.LBE830:
 925:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2121              		.loc 1 925 45 is_stmt 0 view .LVU537
 2122 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2123              		.cfi_def_cfa_offset 28
 2124              		.cfi_offset 4, -28
 2125              		.cfi_offset 5, -24
 2126              		.cfi_offset 6, -20
 2127              		.cfi_offset 7, -16
 2128              		.cfi_offset 8, -12
 2129              		.cfi_offset 9, -8
 2130              		.cfi_offset 14, -4
 2131              	.LBB849:
 2132              	.LBB844:
 2133              	.LBB839:
 2134              	.LBB834:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2135              		.loc 1 43 26 view .LVU538
 2136 0004 274E     		ldr	r6, .L117
 2137 0006 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
 2138              	.LBE834:
 2139              	.LBE839:
 2140              	.LBE844:
 2141              	.LBE849:
 925:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2142              		.loc 1 925 45 view .LVU539
 2143 000a 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccl34fCK.s 			page 72


 2144              		.cfi_def_cfa_offset 40
 2145              	.LBB850:
 2146              	.LBB845:
 2147              	.LBB840:
 2148              	.LBB835:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2149              		.loc 1 43 15 view .LVU540
 2150 000c 03F03F03 		and	r3, r3, #63
 2151              	.LBE835:
 2152              	.LBE840:
 2153              	.LBE845:
 2154              	.LBE850:
 925:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2155              		.loc 1 925 45 view .LVU541
 2156 0010 0190     		str	r0, [sp, #4]
 2157              	.LBB851:
 2158              	.LBB846:
 2159              	.LBB841:
 2160              	.LBB836:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2161              		.loc 1 44 26 view .LVU542
 2162 0012 581E     		subs	r0, r3, #1
 2163              	.LVL151:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2164              		.loc 1 44 5 view .LVU543
 2165 0014 3E28     		cmp	r0, #62
 2166              	.LBE836:
 2167              	.LBE841:
 2168              	.LBE846:
 2169              	.LBE851:
 925:src/int.c     **** 	const int cry = (topbit_mask() & x)?1:0;
 2170              		.loc 1 925 45 view .LVU544
 2171 0016 DDF80490 		ldr	r9, [sp, #4]
 2172 001a 8846     		mov	r8, r1
 2173              	.LBB852:
 2174              	.LBB847:
 2175              	.LBB842:
 2176              	.LBB837:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2177              		.loc 1 44 5 view .LVU545
 2178 001c 3ED8     		bhi	.L115
 2179 001e 0122     		movs	r2, #1
 2180 0020 213B     		subs	r3, r3, #33
 2181 0022 C0F12001 		rsb	r1, r0, #32
 2182 0026 02FA03F3 		lsl	r3, r2, r3
 2183 002a 22FA01F1 		lsr	r1, r2, r1
 2184 002e 0B43     		orrs	r3, r3, r1
 2185 0030 8240     		lsls	r2, r2, r0
 2186              	.L111:
 2187              	.LVL152:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2188              		.loc 1 44 5 view .LVU546
 2189              	.LBE837:
 2190              	.LBE842:
 111:src/int.c     **** 	return bit;
 2191              		.loc 1 111 2 is_stmt 1 view .LVU547
 112:src/int.c     **** }
ARM GAS  /tmp/ccl34fCK.s 			page 73


 2192              		.loc 1 112 2 view .LVU548
 112:src/int.c     **** }
 2193              		.loc 1 112 2 is_stmt 0 view .LVU549
 2194              	.LBE847:
 2195              	.LBE852:
 926:src/int.c     **** 
 2196              		.loc 1 926 33 view .LVU550
 2197 0032 09EA0204 		and	r4, r9, r2
 2198 0036 08EA0305 		and	r5, r8, r3
 926:src/int.c     **** 
 2199              		.loc 1 926 39 view .LVU551
 2200 003a 54EA0503 		orrs	r3, r4, r5
 2201 003e 14BF     		ite	ne
 2202 0040 0127     		movne	r7, #1
 2203 0042 0027     		moveq	r7, #0
 2204              	.LVL153:
 928:src/int.c     **** 	return mask_value(intLSL(x) | cry);
 2205              		.loc 1 928 2 is_stmt 1 view .LVU552
 2206              	.LBB853:
 2207              	.LBI853:
  53:src/int.c     **** #ifndef TINY_BUILD
 2208              		.loc 1 53 6 view .LVU553
 2209              	.LBB854:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2210              		.loc 1 55 2 view .LVU554
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2211              		.loc 1 55 5 is_stmt 0 view .LVU555
 2212 0044 54EA0503 		orrs	r3, r4, r5
 2213 0048 23D0     		beq	.L112
 2214 004a FFF7FEFF 		bl	set_carry.part.0
 2215              	.LVL154:
 2216              	.L113:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2217              		.loc 1 55 5 view .LVU556
 2218              	.LBE854:
 2219              	.LBE853:
 929:src/int.c     **** }
 2220              		.loc 1 929 2 is_stmt 1 view .LVU557
 929:src/int.c     **** }
 2221              		.loc 1 929 20 is_stmt 0 view .LVU558
 2222 004e 4846     		mov	r0, r9
 2223 0050 4146     		mov	r1, r8
 2224 0052 FFF7FEFF 		bl	intLSL
 2225              	.LVL155:
 2226              	.LBB856:
 2227              	.LBB857:
 2228              	.LBB858:
 2229              	.LBB859:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2230              		.loc 1 43 26 view .LVU559
 2231 0056 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2232              		.loc 1 43 15 view .LVU560
 2233 005a 03F03F02 		and	r2, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2234              		.loc 1 44 26 view .LVU561
 2235 005e 531E     		subs	r3, r2, #1
ARM GAS  /tmp/ccl34fCK.s 			page 74


  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2236              		.loc 1 44 5 view .LVU562
 2237 0060 3E2B     		cmp	r3, #62
 2238              	.LBE859:
 2239              	.LBE858:
 2240              	.LBE857:
 2241              	.LBE856:
 929:src/int.c     **** }
 2242              		.loc 1 929 9 view .LVU563
 2243 0062 40EA0700 		orr	r0, r0, r7
 2244              	.LVL156:
 2245              	.LBB863:
 2246              	.LBI856:
  91:src/int.c     **** #ifndef TINY_BUILD
 2247              		.loc 1 91 15 is_stmt 1 view .LVU564
 2248              	.LBB862:
  93:src/int.c     **** 	long long int mask;
 2249              		.loc 1 93 2 view .LVU565
 2250              	.LBB861:
 2251              	.LBI858:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 2252              		.loc 1 42 14 view .LVU566
 2253              	.LBB860:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2254              		.loc 1 43 2 view .LVU567
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2255              		.loc 1 44 2 view .LVU568
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2256              		.loc 1 44 5 is_stmt 0 view .LVU569
 2257 0066 11D8     		bhi	.L110
 2258              	.LVL157:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2259              		.loc 1 44 5 view .LVU570
 2260              	.LBE860:
 2261              	.LBE861:
  94:src/int.c     **** 
 2262              		.loc 1 94 2 is_stmt 1 view .LVU571
  96:src/int.c     **** 		return v;
 2263              		.loc 1 96 2 view .LVU572
  98:src/int.c     **** 	return v & mask;
 2264              		.loc 1 98 2 view .LVU573
  99:src/int.c     **** #else
 2265              		.loc 1 99 2 view .LVU574
  98:src/int.c     **** 	return v & mask;
 2266              		.loc 1 98 14 is_stmt 0 view .LVU575
 2267 0068 0123     		movs	r3, #1
 2268 006a A2F12004 		sub	r4, r2, #32
 2269 006e C2F12005 		rsb	r5, r2, #32
 2270 0072 03FA04F4 		lsl	r4, r3, r4
 2271 0076 23FA05F5 		lsr	r5, r3, r5
 2272 007a 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 2273              		.loc 1 98 7 view .LVU576
 2274 007c 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 2275              		.loc 1 98 14 view .LVU577
 2276 0080 44EA0504 		orr	r4, r4, r5
ARM GAS  /tmp/ccl34fCK.s 			page 75


  98:src/int.c     **** 	return v & mask;
 2277              		.loc 1 98 7 view .LVU578
 2278 0084 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 2279              		.loc 1 99 11 view .LVU579
 2280 0088 2140     		ands	r1, r1, r4
 2281              	.LVL158:
  99:src/int.c     **** #else
 2282              		.loc 1 99 11 view .LVU580
 2283 008a 1840     		ands	r0, r0, r3
 2284              	.L110:
 2285              	.LBE862:
 2286              	.LBE863:
 930:src/int.c     **** 
 2287              		.loc 1 930 1 view .LVU581
 2288 008c 03B0     		add	sp, sp, #12
 2289              		.cfi_remember_state
 2290              		.cfi_def_cfa_offset 28
 2291              		@ sp needed
 2292 008e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2293              	.LVL159:
 2294              	.L112:
 2295              		.cfi_restore_state
 2296              	.LBB864:
 2297              	.LBB855:
  58:src/int.c     **** #endif
 2298              		.loc 1 58 3 is_stmt 1 view .LVU582
 2299 0092 5221     		movs	r1, #82
 2300 0094 6A20     		movs	r0, #106
 2301 0096 FFF7FEFF 		bl	cmdflag
 2302              	.LVL160:
 2303 009a D8E7     		b	.L113
 2304              	.LVL161:
 2305              	.L115:
  58:src/int.c     **** #endif
 2306              		.loc 1 58 3 is_stmt 0 view .LVU583
 2307              	.LBE855:
 2308              	.LBE864:
 2309              	.LBB865:
 2310              	.LBB848:
 2311              	.LBB843:
 2312              	.LBB838:
 2313 009c 0022     		movs	r2, #0
 2314 009e 4FF00043 		mov	r3, #-2147483648
 2315 00a2 C6E7     		b	.L111
 2316              	.L118:
 2317              		.align	2
 2318              	.L117:
 2319 00a4 00000000 		.word	PersistentRam
 2320              	.LBE838:
 2321              	.LBE843:
 2322              	.LBE848:
 2323              	.LBE865:
 2324              		.cfi_endproc
 2325              	.LFE47:
 2327              		.section	.text.set_overflow.part.0,"ax",%progbits
 2328              		.align	1
ARM GAS  /tmp/ccl34fCK.s 			page 76


 2329              		.p2align 2,,3
 2330              		.syntax unified
 2331              		.thumb
 2332              		.thumb_func
 2333              		.fpu fpv4-sp-d16
 2335              	set_overflow.part.0:
 2336              	.LFB76:
  66:src/int.c     **** #ifndef TINY_BUILD
 2337              		.loc 1 66 6 is_stmt 1 view -0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 0
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 2341              		@ link register save eliminated.
 2342              	.LVL162:
  69:src/int.c     **** 	else
 2343              		.loc 1 69 3 view .LVU585
 2344 0000 5121     		movs	r1, #81
 2345 0002 6920     		movs	r0, #105
 2346 0004 FFF7FEBF 		b	cmdflag
 2347              	.LVL163:
 2348              		.cfi_endproc
 2349              	.LFE76:
 2351              		.section	.text.calc_overflow,"ax",%progbits
 2352              		.align	1
 2353              		.p2align 2,,3
 2354              		.syntax unified
 2355              		.thumb
 2356              		.thumb_func
 2357              		.fpu fpv4-sp-d16
 2359              	calc_overflow:
 2360              	.LVL164:
 2361              	.LFB15:
 181:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2362              		.loc 1 181 67 view -0
 2363              		.cfi_startproc
 2364              		@ args = 8, pretend = 0, frame = 16
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 182:src/int.c     **** 	unsigned long long int u;
 2366              		.loc 1 182 2 view .LVU587
 2367              	.LBB866:
 2368              	.LBI866:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 2369              		.loc 1 109 22 view .LVU588
 2370              	.LBB867:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 2371              		.loc 1 110 2 view .LVU589
 2372              	.LBB868:
 2373              	.LBI868:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 2374              		.loc 1 42 14 view .LVU590
 2375              	.LBB869:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2376              		.loc 1 43 2 view .LVU591
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2377              		.loc 1 44 2 view .LVU592
 2378              	.LBE869:
 2379              	.LBE868:
ARM GAS  /tmp/ccl34fCK.s 			page 77


 2380              	.LBE867:
 2381              	.LBE866:
 181:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2382              		.loc 1 181 67 is_stmt 0 view .LVU593
 2383 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2384              		.cfi_def_cfa_offset 32
 2385              		.cfi_offset 4, -32
 2386              		.cfi_offset 5, -28
 2387              		.cfi_offset 6, -24
 2388              		.cfi_offset 7, -20
 2389              		.cfi_offset 8, -16
 2390              		.cfi_offset 9, -12
 2391              		.cfi_offset 10, -8
 2392              		.cfi_offset 14, -4
 2393              	.LBB885:
 2394              	.LBB880:
 2395              	.LBB875:
 2396              	.LBB870:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2397              		.loc 1 43 26 view .LVU594
 2398 0004 534C     		ldr	r4, .L142
 2399 0006 94F8E9E7 		ldrb	lr, [r4, #2025]	@ zero_extendqisi2
 2400              	.LBE870:
 2401              	.LBE875:
 2402              	.LBE880:
 2403              	.LBE885:
 181:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2404              		.loc 1 181 67 view .LVU595
 2405 000a 84B0     		sub	sp, sp, #16
 2406              		.cfi_def_cfa_offset 48
 2407              	.LBB886:
 2408              	.LBB881:
 2409              	.LBB876:
 2410              	.LBB871:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2411              		.loc 1 43 15 view .LVU596
 2412 000c 0EF03F0E 		and	lr, lr, #63
 2413              	.LBE871:
 2414              	.LBE876:
 2415              	.LBE881:
 2416              	.LBE886:
 181:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2417              		.loc 1 181 67 view .LVU597
 2418 0010 0391     		str	r1, [sp, #12]
 2419              	.LBB887:
 2420              	.LBB882:
 2421              	.LBB877:
 2422              	.LBB872:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2423              		.loc 1 44 26 view .LVU598
 2424 0012 0EF1FF31 		add	r1, lr, #-1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2425              		.loc 1 44 5 view .LVU599
 2426 0016 3E29     		cmp	r1, #62
 2427              	.LBE872:
 2428              	.LBE877:
 2429              	.LBE882:
ARM GAS  /tmp/ccl34fCK.s 			page 78


 2430              	.LBE887:
 181:src/int.c     **** 	unsigned long long int tbm = topbit_mask();
 2431              		.loc 1 181 67 view .LVU600
 2432 0018 9DF830C0 		ldrb	ip, [sp, #48]	@ zero_extendqisi2
 2433 001c 0290     		str	r0, [sp, #8]
 2434 001e 1446     		mov	r4, r2
 2435 0020 1D46     		mov	r5, r3
 2436              	.LBB888:
 2437              	.LBB883:
 2438              	.LBB878:
 2439              	.LBB873:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2440              		.loc 1 44 5 view .LVU601
 2441 0022 7BD8     		bhi	.L129
 2442 0024 0120     		movs	r0, #1
 2443              	.LVL165:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2444              		.loc 1 44 5 view .LVU602
 2445 0026 AEF1210E 		sub	lr, lr, #33
 2446 002a C1F1200A 		rsb	r10, r1, #32
 2447 002e 00FA0EF3 		lsl	r3, r0, lr
 2448 0032 20FA0AFA 		lsr	r10, r0, r10
 2449 0036 43EA0A03 		orr	r3, r3, r10
 2450 003a 0193     		str	r3, [sp, #4]
 2451 003c 00FA01F3 		lsl	r3, r0, r1
 2452 0040 0093     		str	r3, [sp]
 2453              	.LVL166:
 2454              	.L121:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2455              		.loc 1 44 5 view .LVU603
 2456              	.LBE873:
 2457              	.LBE878:
 111:src/int.c     **** 	return bit;
 2458              		.loc 1 111 2 is_stmt 1 view .LVU604
 112:src/int.c     **** }
 2459              		.loc 1 112 2 view .LVU605
 112:src/int.c     **** }
 2460              		.loc 1 112 2 is_stmt 0 view .LVU606
 2461              	.LBE883:
 2462              	.LBE888:
 183:src/int.c     **** 	int i;
 2463              		.loc 1 183 2 is_stmt 1 view .LVU607
 184:src/int.c     **** 
 2464              		.loc 1 184 2 view .LVU608
 186:src/int.c     **** 	case MODE_UNSIGNED:
 2465              		.loc 1 186 2 view .LVU609
 2466 0042 BCF1020F 		cmp	ip, #2
 2467 0046 34D0     		beq	.L122
 2468 0048 1CF0FD0C 		ands	ip, ip, #253
 2469 004c 1CD1     		bne	.L138
 197:src/int.c     **** 		if (neg && u == tbm)
 2470              		.loc 1 197 3 view .LVU610
 197:src/int.c     **** 		if (neg && u == tbm)
 2471              		.loc 1 197 5 is_stmt 0 view .LVU611
 2472 004e DDE90212 		ldrd	r1, [sp, #8]
 198:src/int.c     **** 			return 0;
 2473              		.loc 1 198 6 view .LVU612
ARM GAS  /tmp/ccl34fCK.s 			page 79


 2474 0052 0D9B     		ldr	r3, [sp, #52]
 197:src/int.c     **** 		if (neg && u == tbm)
 2475              		.loc 1 197 5 view .LVU613
 2476 0054 14EB0108 		adds	r8, r4, r1
 2477 0058 45EB0209 		adc	r9, r5, r2
 2478              	.LVL167:
 198:src/int.c     **** 			return 0;
 2479              		.loc 1 198 3 is_stmt 1 view .LVU614
 198:src/int.c     **** 			return 0;
 2480              		.loc 1 198 6 is_stmt 0 view .LVU615
 2481 005c 2BB1     		cbz	r3, .L127
 198:src/int.c     **** 			return 0;
 2482              		.loc 1 198 11 discriminator 1 view .LVU616
 2483 005e DDE90023 		ldrd	r2, [sp]
 2484 0062 9945     		cmp	r9, r3
 2485 0064 08BF     		it	eq
 2486 0066 9045     		cmpeq	r8, r2
 2487 0068 1FD0     		beq	.L132
 2488              	.L127:
 200:src/int.c     **** 			break;
 2489              		.loc 1 200 3 is_stmt 1 view .LVU617
 200:src/int.c     **** 			break;
 2490              		.loc 1 200 11 is_stmt 0 view .LVU618
 2491 006a DDE90067 		ldrd	r6, [sp]
 2492 006e 08EA0600 		and	r0, r8, r6
 2493 0072 09EA0701 		and	r1, r9, r7
 200:src/int.c     **** 			break;
 2494              		.loc 1 200 6 view .LVU619
 2495 0076 50EA0103 		orrs	r3, r0, r1
 2496 007a 55D0     		beq	.L139
 2497              	.LVL168:
 2498              	.L125:
 212:src/int.c     **** 	return 1;
 2499              		.loc 1 212 2 is_stmt 1 view .LVU620
 2500              	.LBB889:
 2501              	.LBI889:
  66:src/int.c     **** #ifndef TINY_BUILD
 2502              		.loc 1 66 6 view .LVU621
 2503              	.LBB890:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2504              		.loc 1 68 2 view .LVU622
 2505 007c FFF7FEFF 		bl	set_overflow.part.0
 2506              	.LVL169:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2507              		.loc 1 68 2 is_stmt 0 view .LVU623
 2508              	.LBE890:
 2509              	.LBE889:
 213:src/int.c     **** }
 2510              		.loc 1 213 2 is_stmt 1 view .LVU624
 213:src/int.c     **** }
 2511              		.loc 1 213 9 is_stmt 0 view .LVU625
 2512 0080 0120     		movs	r0, #1
 214:src/int.c     **** #endif
 2513              		.loc 1 214 1 view .LVU626
 2514 0082 04B0     		add	sp, sp, #16
 2515              		.cfi_remember_state
 2516              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccl34fCK.s 			page 80


 2517              		@ sp needed
 2518 0084 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2519              	.LVL170:
 2520              	.L138:
 2521              		.cfi_restore_state
 208:src/int.c     **** 			break;
 2522              		.loc 1 208 3 is_stmt 1 view .LVU627
 208:src/int.c     **** 			break;
 2523              		.loc 1 208 17 is_stmt 0 view .LVU628
 2524 0088 DDE90212 		ldrd	r1, [sp, #8]
 208:src/int.c     **** 			break;
 2525              		.loc 1 208 11 view .LVU629
 2526 008c DDE90078 		ldrd	r7, [sp]
 208:src/int.c     **** 			break;
 2527              		.loc 1 208 17 view .LVU630
 2528 0090 6618     		adds	r6, r4, r1
 2529 0092 1346     		mov	r3, r2
 2530 0094 45EB0303 		adc	r3, r5, r3
 2531 0098 1C46     		mov	r4, r3
 208:src/int.c     **** 			break;
 2532              		.loc 1 208 11 view .LVU631
 2533 009a 4346     		mov	r3, r8
 2534 009c 2340     		ands	r3, r3, r4
 2535 009e 06EA0700 		and	r0, r6, r7
 2536 00a2 1946     		mov	r1, r3
 208:src/int.c     **** 			break;
 2537              		.loc 1 208 6 view .LVU632
 2538 00a4 50EA0103 		orrs	r3, r0, r1
 2539 00a8 E8D1     		bne	.L125
 2540              	.L132:
 194:src/int.c     **** 
 2541              		.loc 1 194 10 view .LVU633
 2542 00aa 0020     		movs	r0, #0
 2543              	.L140:
 214:src/int.c     **** #endif
 2544              		.loc 1 214 1 view .LVU634
 2545 00ac 04B0     		add	sp, sp, #16
 2546              		.cfi_remember_state
 2547              		.cfi_def_cfa_offset 32
 2548              		@ sp needed
 2549 00ae BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2550              	.LVL171:
 2551              	.L122:
 2552              		.cfi_restore_state
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2553              		.loc 1 190 3 is_stmt 1 view .LVU635
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2554              		.loc 1 190 17 is_stmt 0 view .LVU636
 2555 00b2 DDE90067 		ldrd	r6, [sp]
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2556              		.loc 1 190 28 view .LVU637
 2557 00b6 DDE9029A 		ldrd	r9, [sp, #8]
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2558              		.loc 1 190 17 view .LVU638
 2559 00ba 16F1FF3C 		adds	ip, r6, #-1
 2560 00be 47F1FF3E 		adc	lr, r7, #-1
 2561              	.LVL172:
ARM GAS  /tmp/ccl34fCK.s 			page 81


 191:src/int.c     **** 		if (i > 1)
 2562              		.loc 1 191 3 is_stmt 1 view .LVU639
 192:src/int.c     **** 			break;
 2563              		.loc 1 192 3 view .LVU640
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2564              		.loc 1 190 11 is_stmt 0 view .LVU641
 2565 00c2 0CEA0401 		and	r1, ip, r4
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2566              		.loc 1 190 28 view .LVU642
 2567 00c6 0CEA090C 		and	ip, ip, r9
 2568              	.LVL173:
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2569              		.loc 1 190 5 view .LVU643
 2570 00ca 11EB0C01 		adds	r1, r1, ip
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2571              		.loc 1 190 11 view .LVU644
 2572 00ce 0EEA0500 		and	r0, lr, r5
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2573              		.loc 1 190 28 view .LVU645
 2574 00d2 0EEA0A0E 		and	lr, lr, r10
 2575              	.LVL174:
 190:src/int.c     **** 		i = ((u & tbm)?1:0) + ((xv & tbm)?1:0) + ((yv & tbm)?1:0);
 2576              		.loc 1 190 5 view .LVU646
 2577 00d6 40EB0E00 		adc	r0, r0, lr
 191:src/int.c     **** 		if (i > 1)
 2578              		.loc 1 191 11 view .LVU647
 2579 00da 3140     		ands	r1, r1, r6
 2580 00dc 3840     		ands	r0, r0, r7
 191:src/int.c     **** 		if (i > 1)
 2581              		.loc 1 191 30 view .LVU648
 2582 00de B846     		mov	r8, r7
 191:src/int.c     **** 		if (i > 1)
 2583              		.loc 1 191 19 view .LVU649
 2584 00e0 51EA0003 		orrs	r3, r1, r0
 191:src/int.c     **** 		if (i > 1)
 2585              		.loc 1 191 30 view .LVU650
 2586 00e4 3746     		mov	r7, r6
 2587              	.LVL175:
 191:src/int.c     **** 		if (i > 1)
 2588              		.loc 1 191 30 view .LVU651
 2589 00e6 09EA0600 		and	r0, r9, r6
 2590 00ea 4346     		mov	r3, r8
 2591 00ec 5646     		mov	r6, r10
 2592              	.LVL176:
 191:src/int.c     **** 		if (i > 1)
 2593              		.loc 1 191 30 view .LVU652
 2594 00ee 06EA0306 		and	r6, r6, r3
 191:src/int.c     **** 		if (i > 1)
 2595              		.loc 1 191 49 view .LVU653
 2596 00f2 03EA0503 		and	r3, r3, r5
 191:src/int.c     **** 		if (i > 1)
 2597              		.loc 1 191 19 view .LVU654
 2598 00f6 14BF     		ite	ne
 2599 00f8 0121     		movne	r1, #1
 2600 00fa 0021     		moveq	r1, #0
 191:src/int.c     **** 		if (i > 1)
 2601              		.loc 1 191 49 view .LVU655
ARM GAS  /tmp/ccl34fCK.s 			page 82


 2602 00fc 07EA0402 		and	r2, r7, r4
 191:src/int.c     **** 		if (i > 1)
 2603              		.loc 1 191 38 view .LVU656
 2604 0100 3043     		orrs	r0, r0, r6
 191:src/int.c     **** 		if (i > 1)
 2605              		.loc 1 191 49 view .LVU657
 2606 0102 1C46     		mov	r4, r3
 2607              	.LVL177:
 191:src/int.c     **** 		if (i > 1)
 2608              		.loc 1 191 57 view .LVU658
 2609 0104 2243     		orrs	r2, r2, r4
 191:src/int.c     **** 		if (i > 1)
 2610              		.loc 1 191 23 view .LVU659
 2611 0106 0028     		cmp	r0, #0
 2612 0108 0CBF     		ite	eq
 2613 010a 0B46     		moveq	r3, r1
 2614 010c 4B1C     		addne	r3, r1, #1
 191:src/int.c     **** 		if (i > 1)
 2615              		.loc 1 191 5 view .LVU660
 2616 010e 002A     		cmp	r2, #0
 2617 0110 18BF     		it	ne
 2618 0112 0133     		addne	r3, r3, #1
 192:src/int.c     **** 			break;
 2619              		.loc 1 192 6 view .LVU661
 2620 0114 012B     		cmp	r3, #1
 2621 0116 B1DC     		bgt	.L125
 194:src/int.c     **** 
 2622              		.loc 1 194 10 view .LVU662
 2623 0118 0020     		movs	r0, #0
 2624 011a C7E7     		b	.L140
 2625              	.LVL178:
 2626              	.L129:
 2627              	.LBB891:
 2628              	.LBB884:
 2629              	.LBB879:
 2630              	.LBB874:
 194:src/int.c     **** 
 2631              		.loc 1 194 10 view .LVU663
 2632 011c 0022     		movs	r2, #0
 2633              	.LVL179:
 194:src/int.c     **** 
 2634              		.loc 1 194 10 view .LVU664
 2635 011e 4FF00043 		mov	r3, #-2147483648
 2636 0122 CDE90023 		strd	r2, [sp]
 2637 0126 8CE7     		b	.L121
 2638              	.LVL180:
 2639              	.L139:
 194:src/int.c     **** 
 2640              		.loc 1 194 10 view .LVU665
 2641              	.LBE874:
 2642              	.LBE879:
 2643              	.LBE884:
 2644              	.LBE891:
 202:src/int.c     **** 			break;
 2645              		.loc 1 202 3 is_stmt 1 view .LVU666
 202:src/int.c     **** 			break;
 2646              		.loc 1 202 6 is_stmt 0 view .LVU667
ARM GAS  /tmp/ccl34fCK.s 			page 83


 2647 0128 DDE90223 		ldrd	r2, [sp, #8]
 2648 012c BB42     		cmp	r3, r7
 2649 012e 08BF     		it	eq
 2650 0130 B242     		cmpeq	r2, r6
 2651 0132 0AD0     		beq	.L141
 202:src/int.c     **** 			break;
 2652              		.loc 1 202 29 discriminator 3 view .LVU668
 2653 0134 DDE90023 		ldrd	r2, [sp]
 2654 0138 9D42     		cmp	r5, r3
 2655 013a 08BF     		it	eq
 2656 013c 9442     		cmpeq	r4, r2
 2657 013e B4D1     		bne	.L132
 202:src/int.c     **** 			break;
 2658              		.loc 1 202 43 discriminator 4 view .LVU669
 2659 0140 DDE90234 		ldrd	r3, [sp, #8]
 2660 0144 2343     		orrs	r3, r3, r4
 2661 0146 99D1     		bne	.L125
 2662 0148 AFE7     		b	.L132
 2663              	.L141:
 202:src/int.c     **** 			break;
 2664              		.loc 1 202 18 discriminator 1 view .LVU670
 2665 014a 54EA0503 		orrs	r3, r4, r5
 2666 014e 95D1     		bne	.L125
 2667 0150 ABE7     		b	.L132
 2668              	.L143:
 2669 0152 00BF     		.align	2
 2670              	.L142:
 2671 0154 00000000 		.word	PersistentRam
 2672              		.cfi_endproc
 2673              	.LFE15:
 2675              		.section	.text.int_base,"ax",%progbits
 2676              		.align	1
 2677              		.p2align 2,,3
 2678              		.global	int_base
 2679              		.syntax unified
 2680              		.thumb
 2681              		.thumb_func
 2682              		.fpu fpv4-sp-d16
 2684              	int_base:
 2685              	.LFB1:
  31:src/int.c     **** 	const unsigned int b = UState.int_base + 1;
 2686              		.loc 1 31 29 is_stmt 1 view -0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 2690              		@ link register save eliminated.
  32:src/int.c     **** 	if (b < 2)
 2691              		.loc 1 32 2 view .LVU672
  32:src/int.c     **** 	if (b < 2)
 2692              		.loc 1 32 31 is_stmt 0 view .LVU673
 2693 0000 044B     		ldr	r3, .L146
 2694 0002 93F8E807 		ldrb	r0, [r3, #2024]	@ zero_extendqisi2
 2695 0006 0009     		lsrs	r0, r0, #4
  33:src/int.c     **** 		return 10;
 2696              		.loc 1 33 5 view .LVU674
 2697 0008 0028     		cmp	r0, #0
  32:src/int.c     **** 	if (b < 2)
ARM GAS  /tmp/ccl34fCK.s 			page 84


 2698              		.loc 1 32 41 view .LVU675
 2699 000a 00F10100 		add	r0, r0, #1
 2700              	.LVL181:
  33:src/int.c     **** 		return 10;
 2701              		.loc 1 33 2 is_stmt 1 view .LVU676
  36:src/int.c     **** 
 2702              		.loc 1 36 1 is_stmt 0 view .LVU677
 2703 000e 08BF     		it	eq
 2704 0010 0A20     		moveq	r0, #10
 2705              	.LVL182:
  36:src/int.c     **** 
 2706              		.loc 1 36 1 view .LVU678
 2707 0012 7047     		bx	lr
 2708              	.L147:
 2709              		.align	2
 2710              	.L146:
 2711 0014 00000000 		.word	PersistentRam
 2712              		.cfi_endproc
 2713              	.LFE1:
 2715              		.section	.text.int_mode,"ax",%progbits
 2716              		.align	1
 2717              		.p2align 2,,3
 2718              		.global	int_mode
 2719              		.syntax unified
 2720              		.thumb
 2721              		.thumb_func
 2722              		.fpu fpv4-sp-d16
 2724              	int_mode:
 2725              	.LFB2:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 2726              		.loc 1 38 38 is_stmt 1 view -0
 2727              		.cfi_startproc
 2728              		@ args = 0, pretend = 0, frame = 0
 2729              		@ frame_needed = 0, uses_anonymous_args = 0
 2730              		@ link register save eliminated.
  39:src/int.c     **** }
 2731              		.loc 1 39 2 view .LVU680
  39:src/int.c     **** }
 2732              		.loc 1 39 39 is_stmt 0 view .LVU681
 2733 0000 024B     		ldr	r3, .L149
 2734 0002 93F8E807 		ldrb	r0, [r3, #2024]	@ zero_extendqisi2
  40:src/int.c     **** 
 2735              		.loc 1 40 1 view .LVU682
 2736 0006 C0F38100 		ubfx	r0, r0, #2, #2
 2737 000a 7047     		bx	lr
 2738              	.L150:
 2739              		.align	2
 2740              	.L149:
 2741 000c 00000000 		.word	PersistentRam
 2742              		.cfi_endproc
 2743              	.LFE2:
 2745              		.section	.text.word_size,"ax",%progbits
 2746              		.align	1
 2747              		.p2align 2,,3
 2748              		.global	word_size
 2749              		.syntax unified
 2750              		.thumb
ARM GAS  /tmp/ccl34fCK.s 			page 85


 2751              		.thumb_func
 2752              		.fpu fpv4-sp-d16
 2754              	word_size:
 2755              	.LFB3:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 2756              		.loc 1 42 30 is_stmt 1 view -0
 2757              		.cfi_startproc
 2758              		@ args = 0, pretend = 0, frame = 0
 2759              		@ frame_needed = 0, uses_anonymous_args = 0
 2760              		@ link register save eliminated.
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2761              		.loc 1 43 2 view .LVU684
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2762              		.loc 1 43 26 is_stmt 0 view .LVU685
 2763 0000 044B     		ldr	r3, .L153
 2764 0002 93F8E907 		ldrb	r0, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2765              		.loc 1 43 15 view .LVU686
 2766 0006 00F03F00 		and	r0, r0, #63
 2767              	.LVL183:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2768              		.loc 1 44 2 is_stmt 1 view .LVU687
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2769              		.loc 1 44 26 is_stmt 0 view .LVU688
 2770 000a 431E     		subs	r3, r0, #1
  45:src/int.c     **** 	return il;
 2771              		.loc 1 45 10 view .LVU689
 2772 000c 3F2B     		cmp	r3, #63
  47:src/int.c     **** 
 2773              		.loc 1 47 1 view .LVU690
 2774 000e 28BF     		it	cs
 2775 0010 4020     		movcs	r0, #64
 2776              	.LVL184:
  47:src/int.c     **** 
 2777              		.loc 1 47 1 view .LVU691
 2778 0012 7047     		bx	lr
 2779              	.L154:
 2780              		.align	2
 2781              	.L153:
 2782 0014 00000000 		.word	PersistentRam
 2783              		.cfi_endproc
 2784              	.LFE3:
 2786              		.section	.text.get_carry,"ax",%progbits
 2787              		.align	1
 2788              		.p2align 2,,3
 2789              		.global	get_carry
 2790              		.syntax unified
 2791              		.thumb
 2792              		.thumb_func
 2793              		.fpu fpv4-sp-d16
 2795              	get_carry:
 2796              	.LFB4:
  49:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 2797              		.loc 1 49 21 is_stmt 1 view -0
 2798              		.cfi_startproc
 2799              		@ args = 0, pretend = 0, frame = 0
 2800              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccl34fCK.s 			page 86


 2801              		@ link register save eliminated.
  50:src/int.c     **** }
 2802              		.loc 1 50 2 view .LVU693
  50:src/int.c     **** }
 2803              		.loc 1 50 9 is_stmt 0 view .LVU694
 2804 0000 6A20     		movs	r0, #106
 2805 0002 FFF7FEBF 		b	get_user_flag
 2806              	.LVL185:
 2807              		.cfi_endproc
 2808              	.LFE4:
 2810 0006 00BF     		.section	.text.set_carry,"ax",%progbits
 2811              		.align	1
 2812              		.p2align 2,,3
 2813              		.global	set_carry
 2814              		.syntax unified
 2815              		.thumb
 2816              		.thumb_func
 2817              		.fpu fpv4-sp-d16
 2819              	set_carry:
 2820              	.LVL186:
 2821              	.LFB5:
  53:src/int.c     **** #ifndef TINY_BUILD
 2822              		.loc 1 53 23 is_stmt 1 view -0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              		@ link register save eliminated.
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2827              		.loc 1 55 2 view .LVU696
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 2828              		.loc 1 55 5 is_stmt 0 view .LVU697
 2829 0000 08B1     		cbz	r0, .L157
 2830 0002 FFF7FEBF 		b	set_carry.part.0
 2831              	.LVL187:
 2832              	.L157:
  58:src/int.c     **** #endif
 2833              		.loc 1 58 3 is_stmt 1 view .LVU698
 2834 0006 5221     		movs	r1, #82
 2835 0008 6A20     		movs	r0, #106
 2836              	.LVL188:
  58:src/int.c     **** #endif
 2837              		.loc 1 58 3 is_stmt 0 view .LVU699
 2838 000a FFF7FEBF 		b	cmdflag
 2839              	.LVL189:
 2840              		.cfi_endproc
 2841              	.LFE5:
 2843 000e 00BF     		.section	.text.get_overflow,"ax",%progbits
 2844              		.align	1
 2845              		.p2align 2,,3
 2846              		.global	get_overflow
 2847              		.syntax unified
 2848              		.thumb
 2849              		.thumb_func
 2850              		.fpu fpv4-sp-d16
 2852              	get_overflow:
 2853              	.LFB6:
  62:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
ARM GAS  /tmp/ccl34fCK.s 			page 87


 2854              		.loc 1 62 24 is_stmt 1 view -0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 0
 2857              		@ frame_needed = 0, uses_anonymous_args = 0
 2858              		@ link register save eliminated.
  63:src/int.c     **** }
 2859              		.loc 1 63 2 view .LVU701
  63:src/int.c     **** }
 2860              		.loc 1 63 9 is_stmt 0 view .LVU702
 2861 0000 6920     		movs	r0, #105
 2862 0002 FFF7FEBF 		b	get_user_flag
 2863              	.LVL190:
 2864              		.cfi_endproc
 2865              	.LFE6:
 2867 0006 00BF     		.section	.text.set_overflow,"ax",%progbits
 2868              		.align	1
 2869              		.p2align 2,,3
 2870              		.global	set_overflow
 2871              		.syntax unified
 2872              		.thumb
 2873              		.thumb_func
 2874              		.fpu fpv4-sp-d16
 2876              	set_overflow:
 2877              	.LVL191:
 2878              	.LFB7:
  66:src/int.c     **** #ifndef TINY_BUILD
 2879              		.loc 1 66 26 is_stmt 1 view -0
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 0
 2882              		@ frame_needed = 0, uses_anonymous_args = 0
 2883              		@ link register save eliminated.
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2884              		.loc 1 68 2 view .LVU704
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 2885              		.loc 1 68 5 is_stmt 0 view .LVU705
 2886 0000 08B1     		cbz	r0, .L160
 2887 0002 FFF7FEBF 		b	set_overflow.part.0
 2888              	.LVL192:
 2889              	.L160:
  71:src/int.c     **** #endif
 2890              		.loc 1 71 3 is_stmt 1 view .LVU706
 2891 0006 5221     		movs	r1, #82
 2892 0008 6920     		movs	r0, #105
 2893              	.LVL193:
  71:src/int.c     **** #endif
 2894              		.loc 1 71 3 is_stmt 0 view .LVU707
 2895 000a FFF7FEBF 		b	cmdflag
 2896              	.LVL194:
 2897              		.cfi_endproc
 2898              	.LFE7:
 2900 000e 00BF     		.section	.text.mask_value,"ax",%progbits
 2901              		.align	1
 2902              		.p2align 2,,3
 2903              		.global	mask_value
 2904              		.syntax unified
 2905              		.thumb
 2906              		.thumb_func
ARM GAS  /tmp/ccl34fCK.s 			page 88


 2907              		.fpu fpv4-sp-d16
 2909              	mask_value:
 2910              	.LVL195:
 2911              	.LFB10:
  91:src/int.c     **** #ifndef TINY_BUILD
 2912              		.loc 1 91 49 is_stmt 1 view -0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 0
 2915              		@ frame_needed = 0, uses_anonymous_args = 0
 2916              		@ link register save eliminated.
  93:src/int.c     **** 	long long int mask;
 2917              		.loc 1 93 2 view .LVU709
 2918              	.LBB892:
 2919              	.LBI892:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 2920              		.loc 1 42 14 view .LVU710
 2921              	.LBB893:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2922              		.loc 1 43 2 view .LVU711
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2923              		.loc 1 43 26 is_stmt 0 view .LVU712
 2924 0000 0E4B     		ldr	r3, .L168
 2925 0002 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 2926              		.loc 1 43 15 view .LVU713
 2927 0006 03F03F02 		and	r2, r3, #63
 2928              	.LVL196:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2929              		.loc 1 44 2 is_stmt 1 view .LVU714
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2930              		.loc 1 44 26 is_stmt 0 view .LVU715
 2931 000a 531E     		subs	r3, r2, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2932              		.loc 1 44 5 view .LVU716
 2933 000c 3E2B     		cmp	r3, #62
 2934 000e 13D8     		bhi	.L165
 2935              	.LVL197:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 2936              		.loc 1 44 5 view .LVU717
 2937              	.LBE893:
 2938              	.LBE892:
  94:src/int.c     **** 
 2939              		.loc 1 94 2 is_stmt 1 view .LVU718
  96:src/int.c     **** 		return v;
 2940              		.loc 1 96 2 view .LVU719
  98:src/int.c     **** 	return v & mask;
 2941              		.loc 1 98 2 view .LVU720
  99:src/int.c     **** #else
 2942              		.loc 1 99 2 view .LVU721
  91:src/int.c     **** #ifndef TINY_BUILD
 2943              		.loc 1 91 49 is_stmt 0 view .LVU722
 2944 0010 70B4     		push	{r4, r5, r6}
 2945              		.cfi_def_cfa_offset 12
 2946              		.cfi_offset 4, -12
 2947              		.cfi_offset 5, -8
 2948              		.cfi_offset 6, -4
  98:src/int.c     **** 	return v & mask;
ARM GAS  /tmp/ccl34fCK.s 			page 89


 2949              		.loc 1 98 14 view .LVU723
 2950 0012 0123     		movs	r3, #1
 2951 0014 A2F12005 		sub	r5, r2, #32
 2952 0018 C2F12006 		rsb	r6, r2, #32
 2953 001c 03FA05F4 		lsl	r4, r3, r5
 2954 0020 23FA06F6 		lsr	r6, r3, r6
 2955 0024 9340     		lsls	r3, r3, r2
 2956 0026 3443     		orrs	r4, r4, r6
  98:src/int.c     **** 	return v & mask;
 2957              		.loc 1 98 7 view .LVU724
 2958 0028 13F1FF33 		adds	r3, r3, #-1
 2959 002c 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 2960              		.loc 1 99 11 view .LVU725
 2961 0030 2140     		ands	r1, r1, r4
 2962 0032 1840     		ands	r0, r0, r3
 2963              	.LVL198:
 103:src/int.c     **** 
 2964              		.loc 1 103 1 view .LVU726
 2965 0034 70BC     		pop	{r4, r5, r6}
 2966              		.cfi_restore 6
 2967              		.cfi_restore 5
 2968              		.cfi_restore 4
 2969              		.cfi_def_cfa_offset 0
 2970 0036 7047     		bx	lr
 2971              	.LVL199:
 2972              	.L165:
 103:src/int.c     **** 
 2973              		.loc 1 103 1 view .LVU727
 2974 0038 7047     		bx	lr
 2975              	.L169:
 2976 003a 00BF     		.align	2
 2977              	.L168:
 2978 003c 00000000 		.word	PersistentRam
 2979              		.cfi_endproc
 2980              	.LFE10:
 2982              		.section	.text.extract_value,"ax",%progbits
 2983              		.align	1
 2984              		.p2align 2,,3
 2985              		.global	extract_value
 2986              		.syntax unified
 2987              		.thumb
 2988              		.thumb_func
 2989              		.fpu fpv4-sp-d16
 2991              	extract_value:
 2992              	.LVL200:
 2993              	.LFB12:
 119:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 2994              		.loc 1 119 80 is_stmt 1 view -0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 0
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 120:src/int.c     **** 	long long int v = mask_value(val);
 2998              		.loc 1 120 2 view .LVU729
 2999              	.LBB894:
 3000              	.LBI894:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
ARM GAS  /tmp/ccl34fCK.s 			page 90


 3001              		.loc 1 38 23 view .LVU730
 3002              	.LBB895:
  39:src/int.c     **** }
 3003              		.loc 1 39 2 view .LVU731
  39:src/int.c     **** }
 3004              		.loc 1 39 39 is_stmt 0 view .LVU732
 3005 0000 3B4B     		ldr	r3, .L188
 3006              	.LBE895:
 3007              	.LBE894:
 119:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3008              		.loc 1 119 80 view .LVU733
 3009 0002 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3010              		.cfi_def_cfa_offset 28
 3011              		.cfi_offset 4, -28
 3012              		.cfi_offset 5, -24
 3013              		.cfi_offset 6, -20
 3014              		.cfi_offset 7, -16
 3015              		.cfi_offset 8, -12
 3016              		.cfi_offset 9, -8
 3017              		.cfi_offset 14, -4
 3018              	.LBB898:
 3019              	.LBB899:
 3020              	.LBB900:
 3021              	.LBB901:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3022              		.loc 1 43 26 view .LVU734
 3023 0006 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 3024              	.LBE901:
 3025              	.LBE900:
 3026              	.LBE899:
 3027              	.LBE898:
 3028              	.LBB909:
 3029              	.LBB896:
  39:src/int.c     **** }
 3030              		.loc 1 39 39 view .LVU735
 3031 000a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3032              	.LBE896:
 3033              	.LBE909:
 3034              	.LBB910:
 3035              	.LBB906:
 3036              	.LBB904:
 3037              	.LBB902:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3038              		.loc 1 43 15 view .LVU736
 3039 000e 06F03F06 		and	r6, r6, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3040              		.loc 1 44 26 view .LVU737
 3041 0012 771E     		subs	r7, r6, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3042              		.loc 1 44 5 view .LVU738
 3043 0014 3E2F     		cmp	r7, #62
 3044              	.LBE902:
 3045              	.LBE904:
 3046              	.LBE906:
 3047              	.LBE910:
 119:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3048              		.loc 1 119 80 view .LVU739
ARM GAS  /tmp/ccl34fCK.s 			page 91


 3049 0016 0446     		mov	r4, r0
 3050 0018 0D46     		mov	r5, r1
 3051              	.LBB911:
 3052              	.LBB897:
  39:src/int.c     **** }
 3053              		.loc 1 39 9 view .LVU740
 3054 001a C3F38100 		ubfx	r0, r3, #2, #2
 3055              	.LVL201:
  39:src/int.c     **** }
 3056              		.loc 1 39 9 view .LVU741
 3057              	.LBE897:
 3058              	.LBE911:
 121:src/int.c     **** 	long long int tbm;
 3059              		.loc 1 121 2 is_stmt 1 view .LVU742
 3060              	.LBB912:
 3061              	.LBI898:
  91:src/int.c     **** #ifndef TINY_BUILD
 3062              		.loc 1 91 15 view .LVU743
 3063              	.LBB907:
  93:src/int.c     **** 	long long int mask;
 3064              		.loc 1 93 2 view .LVU744
 3065              	.LBB905:
 3066              	.LBI900:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 3067              		.loc 1 42 14 view .LVU745
 3068              	.LBB903:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3069              		.loc 1 43 2 view .LVU746
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3070              		.loc 1 44 2 view .LVU747
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3071              		.loc 1 44 5 is_stmt 0 view .LVU748
 3072 001e 52D8     		bhi	.L171
 3073              	.LVL202:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3074              		.loc 1 44 5 view .LVU749
 3075              	.LBE903:
 3076              	.LBE905:
  94:src/int.c     **** 
 3077              		.loc 1 94 2 is_stmt 1 view .LVU750
  96:src/int.c     **** 		return v;
 3078              		.loc 1 96 2 view .LVU751
  98:src/int.c     **** 	return v & mask;
 3079              		.loc 1 98 2 view .LVU752
  99:src/int.c     **** #else
 3080              		.loc 1 99 2 view .LVU753
  98:src/int.c     **** 	return v & mask;
 3081              		.loc 1 98 14 is_stmt 0 view .LVU754
 3082 0020 0121     		movs	r1, #1
 3083 0022 A6F12003 		sub	r3, r6, #32
 3084              	.LVL203:
  98:src/int.c     **** 	return v & mask;
 3085              		.loc 1 98 14 view .LVU755
 3086 0026 C6F1200E 		rsb	lr, r6, #32
 3087 002a 01FA03F3 		lsl	r3, r1, r3
 3088 002e 21FA0EFE 		lsr	lr, r1, lr
 3089 0032 01FA06FC 		lsl	ip, r1, r6
ARM GAS  /tmp/ccl34fCK.s 			page 92


  98:src/int.c     **** 	return v & mask;
 3090              		.loc 1 98 7 view .LVU756
 3091 0036 1CF1FF3C 		adds	ip, ip, #-1
  98:src/int.c     **** 	return v & mask;
 3092              		.loc 1 98 14 view .LVU757
 3093 003a 43EA0E03 		orr	r3, r3, lr
  98:src/int.c     **** 	return v & mask;
 3094              		.loc 1 98 7 view .LVU758
 3095 003e 43F1FF33 		adc	r3, r3, #-1
  99:src/int.c     **** #else
 3096              		.loc 1 99 11 view .LVU759
 3097 0042 2B40     		ands	r3, r3, r5
 3098 0044 0CEA040C 		and	ip, ip, r4
 3099              	.LBE907:
 3100              	.LBE912:
 124:src/int.c     **** 		*sign = 0;
 3101              		.loc 1 124 5 view .LVU760
 3102 0048 0228     		cmp	r0, #2
 3103              	.LBB913:
 3104              	.LBB908:
  99:src/int.c     **** #else
 3105              		.loc 1 99 11 view .LVU761
 3106 004a 6446     		mov	r4, ip
 3107              	.LVL204:
  99:src/int.c     **** #else
 3108              		.loc 1 99 11 view .LVU762
 3109 004c 1D46     		mov	r5, r3
 3110              	.LVL205:
  99:src/int.c     **** #else
 3111              		.loc 1 99 11 view .LVU763
 3112              	.LBE908:
 3113              	.LBE913:
 122:src/int.c     **** 
 3114              		.loc 1 122 2 is_stmt 1 view .LVU764
 124:src/int.c     **** 		*sign = 0;
 3115              		.loc 1 124 2 view .LVU765
 124:src/int.c     **** 		*sign = 0;
 3116              		.loc 1 124 5 is_stmt 0 view .LVU766
 3117 004e 40D0     		beq	.L179
 3118 0050 A6F12103 		sub	r3, r6, #33
 3119 0054 C7F1200C 		rsb	ip, r7, #32
 3120 0058 01FA03F3 		lsl	r3, r1, r3
 3121 005c 21FA0CFC 		lsr	ip, r1, ip
 3122 0060 43EA0C03 		orr	r3, r3, ip
 3123 0064 B940     		lsls	r1, r1, r7
 3124              	.L180:
 111:src/int.c     **** 	return bit;
 3125              		.loc 1 111 2 is_stmt 1 view .LVU767
 3126              	.LVL206:
 112:src/int.c     **** }
 3127              		.loc 1 112 2 view .LVU768
 131:src/int.c     **** 		*sign = 1;
 3128              		.loc 1 131 2 view .LVU769
 131:src/int.c     **** 		*sign = 1;
 3129              		.loc 1 131 8 is_stmt 0 view .LVU770
 3130 0066 01EA0408 		and	r8, r1, r4
 3131 006a 03EA0509 		and	r9, r3, r5
ARM GAS  /tmp/ccl34fCK.s 			page 93


 131:src/int.c     **** 		*sign = 1;
 3132              		.loc 1 131 5 view .LVU771
 3133 006e 58EA090C 		orrs	ip, r8, r9
 3134 0072 1CD1     		bne	.L185
 140:src/int.c     ****     return mask_value(v);
 3135              		.loc 1 140 3 is_stmt 1 view .LVU772
 140:src/int.c     ****     return mask_value(v);
 3136              		.loc 1 140 9 is_stmt 0 view .LVU773
 3137 0074 0023     		movs	r3, #0
 3138 0076 1360     		str	r3, [r2]
 3139              	.LVL207:
 3140              	.L176:
 141:src/int.c     **** }
 3141              		.loc 1 141 5 is_stmt 1 view .LVU774
 3142              	.LBB914:
 3143              	.LBI914:
  91:src/int.c     **** #ifndef TINY_BUILD
 3144              		.loc 1 91 15 view .LVU775
 3145              	.LBB915:
  93:src/int.c     **** 	long long int mask;
 3146              		.loc 1 93 2 view .LVU776
 3147              	.LBB916:
 3148              	.LBI916:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 3149              		.loc 1 42 14 view .LVU777
 3150              	.LBB917:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3151              		.loc 1 43 2 view .LVU778
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3152              		.loc 1 44 2 view .LVU779
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3153              		.loc 1 44 5 is_stmt 0 view .LVU780
 3154 0078 3E2F     		cmp	r7, #62
 3155 007a 14D8     		bhi	.L170
 3156              	.LVL208:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3157              		.loc 1 44 5 view .LVU781
 3158              	.LBE917:
 3159              	.LBE916:
  94:src/int.c     **** 
 3160              		.loc 1 94 2 is_stmt 1 view .LVU782
  96:src/int.c     **** 		return v;
 3161              		.loc 1 96 2 view .LVU783
  98:src/int.c     **** 	return v & mask;
 3162              		.loc 1 98 2 view .LVU784
  99:src/int.c     **** #else
 3163              		.loc 1 99 2 view .LVU785
  98:src/int.c     **** 	return v & mask;
 3164              		.loc 1 98 14 is_stmt 0 view .LVU786
 3165 007c 0123     		movs	r3, #1
 3166 007e A6F12002 		sub	r2, r6, #32
 3167 0082 C6F12001 		rsb	r1, r6, #32
 3168 0086 03FA02F2 		lsl	r2, r3, r2
 3169 008a 23FA01F1 		lsr	r1, r3, r1
 3170 008e 03FA06F6 		lsl	r6, r3, r6
 3171              	.LVL209:
  98:src/int.c     **** 	return v & mask;
ARM GAS  /tmp/ccl34fCK.s 			page 94


 3172              		.loc 1 98 7 view .LVU787
 3173 0092 16F1FF36 		adds	r6, r6, #-1
  98:src/int.c     **** 	return v & mask;
 3174              		.loc 1 98 14 view .LVU788
 3175 0096 42EA0102 		orr	r2, r2, r1
  98:src/int.c     **** 	return v & mask;
 3176              		.loc 1 98 7 view .LVU789
 3177 009a 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 3178              		.loc 1 99 11 view .LVU790
 3179 009e 2A40     		ands	r2, r2, r5
 3180 00a0 2640     		ands	r6, r6, r4
 3181 00a2 3446     		mov	r4, r6
 3182              	.LVL210:
  99:src/int.c     **** #else
 3183              		.loc 1 99 11 view .LVU791
 3184 00a4 1546     		mov	r5, r2
 3185              	.LVL211:
 3186              	.L170:
  99:src/int.c     **** #else
 3187              		.loc 1 99 11 view .LVU792
 3188              	.LBE915:
 3189              	.LBE914:
 142:src/int.c     **** 
 3190              		.loc 1 142 1 view .LVU793
 3191 00a6 2046     		mov	r0, r4
 3192 00a8 2946     		mov	r1, r5
 3193 00aa BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3194              	.LVL212:
 3195              	.L185:
 132:src/int.c     **** 		if (mode == MODE_2COMP)
 3196              		.loc 1 132 3 is_stmt 1 view .LVU794
 132:src/int.c     **** 		if (mode == MODE_2COMP)
 3197              		.loc 1 132 9 is_stmt 0 view .LVU795
 3198 00ae 4FF0010C 		mov	ip, #1
 3199 00b2 C2F800C0 		str	ip, [r2]
 3200              	.LVL213:
 133:src/int.c     **** 			v = -v;
 3201              		.loc 1 133 3 is_stmt 1 view .LVU796
 133:src/int.c     **** 			v = -v;
 3202              		.loc 1 133 6 is_stmt 0 view .LVU797
 3203 00b6 90B1     		cbz	r0, .L186
 135:src/int.c     **** 			v = ~v;
 3204              		.loc 1 135 8 is_stmt 1 view .LVU798
 135:src/int.c     **** 			v = ~v;
 3205              		.loc 1 135 11 is_stmt 0 view .LVU799
 3206 00b8 0128     		cmp	r0, #1
 3207 00ba 14D0     		beq	.L187
 138:src/int.c     **** 	} else
 3208              		.loc 1 138 4 is_stmt 1 view .LVU800
 138:src/int.c     **** 	} else
 3209              		.loc 1 138 6 is_stmt 0 view .LVU801
 3210 00bc 6140     		eors	r1, r1, r4
 3211 00be 6B40     		eors	r3, r3, r5
 3212 00c0 0C46     		mov	r4, r1
 3213              	.LVL214:
 138:src/int.c     **** 	} else
ARM GAS  /tmp/ccl34fCK.s 			page 95


 3214              		.loc 1 138 6 view .LVU802
 3215 00c2 1D46     		mov	r5, r3
 3216              	.LVL215:
 138:src/int.c     **** 	} else
 3217              		.loc 1 138 6 view .LVU803
 3218 00c4 D8E7     		b	.L176
 3219              	.LVL216:
 3220              	.L171:
 122:src/int.c     **** 
 3221              		.loc 1 122 2 is_stmt 1 view .LVU804
 124:src/int.c     **** 		*sign = 0;
 3222              		.loc 1 124 2 view .LVU805
 124:src/int.c     **** 		*sign = 0;
 3223              		.loc 1 124 5 is_stmt 0 view .LVU806
 3224 00c6 0228     		cmp	r0, #2
 3225 00c8 03D0     		beq	.L179
 3226 00ca 0021     		movs	r1, #0
 3227 00cc 4FF00043 		mov	r3, #-2147483648
 3228              	.LVL217:
 124:src/int.c     **** 		*sign = 0;
 3229              		.loc 1 124 5 view .LVU807
 3230 00d0 C9E7     		b	.L180
 3231              	.L179:
 125:src/int.c     **** 		return v;
 3232              		.loc 1 125 3 is_stmt 1 view .LVU808
 125:src/int.c     **** 		return v;
 3233              		.loc 1 125 9 is_stmt 0 view .LVU809
 3234 00d2 0023     		movs	r3, #0
 3235 00d4 1360     		str	r3, [r2]
 3236              	.LVL218:
 126:src/int.c     **** 	}
 3237              		.loc 1 126 3 is_stmt 1 view .LVU810
 142:src/int.c     **** 
 3238              		.loc 1 142 1 is_stmt 0 view .LVU811
 3239 00d6 2046     		mov	r0, r4
 3240 00d8 2946     		mov	r1, r5
 3241 00da BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3242              	.LVL219:
 3243              	.L186:
 134:src/int.c     **** 		else if (mode == MODE_1COMP)
 3244              		.loc 1 134 4 is_stmt 1 view .LVU812
 134:src/int.c     **** 		else if (mode == MODE_1COMP)
 3245              		.loc 1 134 6 is_stmt 0 view .LVU813
 3246 00de 6442     		rsbs	r4, r4, #0
 3247              	.LVL220:
 134:src/int.c     **** 		else if (mode == MODE_1COMP)
 3248              		.loc 1 134 6 view .LVU814
 3249 00e0 65EB4505 		sbc	r5, r5, r5, lsl #1
 3250              	.LVL221:
 134:src/int.c     **** 		else if (mode == MODE_1COMP)
 3251              		.loc 1 134 6 view .LVU815
 3252 00e4 C8E7     		b	.L176
 3253              	.L187:
 136:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3254              		.loc 1 136 4 is_stmt 1 view .LVU816
 136:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3255              		.loc 1 136 6 is_stmt 0 view .LVU817
ARM GAS  /tmp/ccl34fCK.s 			page 96


 3256 00e6 E243     		mvns	r2, r4
 3257              	.LVL222:
 136:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3258              		.loc 1 136 6 view .LVU818
 3259 00e8 EB43     		mvns	r3, r5
 3260 00ea 1446     		mov	r4, r2
 3261              	.LVL223:
 136:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3262              		.loc 1 136 6 view .LVU819
 3263 00ec 1D46     		mov	r5, r3
 3264              	.LVL224:
 136:src/int.c     **** 		else // if (mode == MODE_SGNMANT)
 3265              		.loc 1 136 6 view .LVU820
 3266 00ee C3E7     		b	.L176
 3267              	.L189:
 3268              		.align	2
 3269              	.L188:
 3270 00f0 00000000 		.word	PersistentRam
 3271              		.cfi_endproc
 3272              	.LFE12:
 3274              		.section	.text.divmod,"ax",%progbits
 3275              		.align	1
 3276              		.p2align 2,,3
 3277              		.syntax unified
 3278              		.thumb
 3279              		.thumb_func
 3280              		.fpu fpv4-sp-d16
 3282              	divmod:
 3283              	.LVL225:
 3284              	.LFB37:
 767:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3285              		.loc 1 767 69 is_stmt 1 view -0
 3286              		.cfi_startproc
 3287              		@ args = 20, pretend = 0, frame = 120
 3288              		@ frame_needed = 0, uses_anonymous_args = 0
 768:src/int.c     **** 	const unsigned int ws = word_size();
 3289              		.loc 1 768 2 view .LVU822
 3290              	.LBB958:
 3291              	.LBI958:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 3292              		.loc 1 38 23 view .LVU823
 3293              	.LBB959:
  39:src/int.c     **** }
 3294              		.loc 1 39 2 view .LVU824
 3295              	.LBE959:
 3296              	.LBE958:
 767:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3297              		.loc 1 767 69 is_stmt 0 view .LVU825
 3298 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3299              		.cfi_def_cfa_offset 36
 3300              		.cfi_offset 4, -36
 3301              		.cfi_offset 5, -32
 3302              		.cfi_offset 6, -28
 3303              		.cfi_offset 7, -24
 3304              		.cfi_offset 8, -20
 3305              		.cfi_offset 9, -16
 3306              		.cfi_offset 10, -12
ARM GAS  /tmp/ccl34fCK.s 			page 97


 3307              		.cfi_offset 11, -8
 3308              		.cfi_offset 14, -4
 3309              	.LBB963:
 3310              	.LBB960:
  39:src/int.c     **** }
 3311              		.loc 1 39 39 view .LVU826
 3312 0004 D24C     		ldr	r4, .L277
 3313              	.LBE960:
 3314              	.LBE963:
 3315              	.LBB964:
 3316              	.LBB965:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3317              		.loc 1 43 26 view .LVU827
 3318 0006 94F8E9E7 		ldrb	lr, [r4, #2025]	@ zero_extendqisi2
 3319              	.LBE965:
 3320              	.LBE964:
 3321              	.LBB969:
 3322              	.LBB961:
  39:src/int.c     **** }
 3323              		.loc 1 39 39 view .LVU828
 3324 000a 94F8E897 		ldrb	r9, [r4, #2024]	@ zero_extendqisi2
 3325              	.LBE961:
 3326              	.LBE969:
 3327              	.LBB970:
 3328              	.LBB966:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3329              		.loc 1 43 15 view .LVU829
 3330 000e 0EF03F0E 		and	lr, lr, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3331              		.loc 1 44 26 view .LVU830
 3332 0012 0EF1FF3B 		add	fp, lr, #-1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3333              		.loc 1 44 5 view .LVU831
 3334 0016 BBF13E0F 		cmp	fp, #62
 3335              	.LBE966:
 3336              	.LBE970:
 767:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 3337              		.loc 1 767 69 view .LVU832
 3338 001a 9FB0     		sub	sp, sp, #124
 3339              		.cfi_def_cfa_offset 160
 3340              	.LBB971:
 3341              	.LBB962:
  39:src/int.c     **** }
 3342              		.loc 1 39 9 view .LVU833
 3343 001c C9F38109 		ubfx	r9, r9, #2, #2
 3344              	.LVL226:
  39:src/int.c     **** }
 3345              		.loc 1 39 9 view .LVU834
 3346              	.LBE962:
 3347              	.LBE971:
 769:src/int.c     **** 	const long long int tbm = topbit_mask();
 3348              		.loc 1 769 2 is_stmt 1 view .LVU835
 3349              	.LBB972:
 3350              	.LBI964:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 3351              		.loc 1 42 14 view .LVU836
 3352              	.LBB967:
ARM GAS  /tmp/ccl34fCK.s 			page 98


  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3353              		.loc 1 43 2 view .LVU837
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3354              		.loc 1 44 2 view .LVU838
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3355              		.loc 1 44 5 is_stmt 0 view .LVU839
 3356 0020 00F2F181 		bhi	.L242
 3357 0024 4FF00108 		mov	r8, #1
 3358 0028 AEF1210C 		sub	ip, lr, #33
 3359 002c CBF12004 		rsb	r4, fp, #32
 3360              	.LVL227:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3361              		.loc 1 44 5 view .LVU840
 3362 0030 08FA0CFC 		lsl	ip, r8, ip
 3363 0034 28FA04F4 		lsr	r4, r8, r4
 3364 0038 4CEA040C 		orr	ip, ip, r4
 3365 003c 08FA0BF8 		lsl	r8, r8, fp
 3366 0040 F246     		mov	r10, lr
 3367              	.L191:
 3368              	.LVL228:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3369              		.loc 1 44 5 view .LVU841
 3370              	.LBE967:
 3371              	.LBE972:
 770:src/int.c     **** 	unsigned long long int d, h, l;
 3372              		.loc 1 770 2 is_stmt 1 view .LVU842
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 3373              		.loc 1 110 2 view .LVU843
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 3374              		.loc 1 43 2 view .LVU844
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 3375              		.loc 1 44 2 view .LVU845
 111:src/int.c     **** 	return bit;
 3376              		.loc 1 111 2 view .LVU846
 112:src/int.c     **** }
 3377              		.loc 1 112 2 view .LVU847
 771:src/int.c     **** 	unsigned short denom[4];
 3378              		.loc 1 771 2 view .LVU848
 772:src/int.c     **** 	unsigned short numer[8];
 3379              		.loc 1 772 2 view .LVU849
 773:src/int.c     **** 	unsigned short quot[5];
 3380              		.loc 1 773 2 view .LVU850
 774:src/int.c     **** 	unsigned short rmdr[4];
 3381              		.loc 1 774 2 view .LVU851
 775:src/int.c     **** 	int num_denom;
 3382              		.loc 1 775 2 view .LVU852
 776:src/int.c     **** 	int num_numer;
 3383              		.loc 1 776 2 view .LVU853
 777:src/int.c     **** 
 3384              		.loc 1 777 2 view .LVU854
 779:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 3385              		.loc 1 779 2 view .LVU855
 781:src/int.c     **** 		if (mode == MODE_2COMP) {
 3386              		.loc 1 781 5 is_stmt 0 view .LVU856
 3387 0042 B9F1020F 		cmp	r9, #2
 779:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 3388              		.loc 1 779 4 view .LVU857
ARM GAS  /tmp/ccl34fCK.s 			page 99


 3389 0046 0446     		mov	r4, r0
 780:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 3390              		.loc 1 780 4 view .LVU858
 3391 0048 1646     		mov	r6, r2
 779:src/int.c     **** 	h = (unsigned long long int)y;		// Numerator high
 3392              		.loc 1 779 4 view .LVU859
 3393 004a 0D46     		mov	r5, r1
 3394              	.LVL229:
 780:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 3395              		.loc 1 780 2 is_stmt 1 view .LVU860
 780:src/int.c     **** 	if (mode != MODE_UNSIGNED && (h & tbm) != 0) {
 3396              		.loc 1 780 4 is_stmt 0 view .LVU861
 3397 004c 1F46     		mov	r7, r3
 3398              	.LVL230:
 781:src/int.c     **** 		if (mode == MODE_2COMP) {
 3399              		.loc 1 781 2 is_stmt 1 view .LVU862
 781:src/int.c     **** 		if (mode == MODE_2COMP) {
 3400              		.loc 1 781 5 is_stmt 0 view .LVU863
 3401 004e 06D0     		beq	.L192
 781:src/int.c     **** 		if (mode == MODE_2COMP) {
 3402              		.loc 1 781 34 discriminator 1 view .LVU864
 3403 0050 08EA0202 		and	r2, r8, r2
 3404              	.LVL231:
 781:src/int.c     **** 		if (mode == MODE_2COMP) {
 3405              		.loc 1 781 34 discriminator 1 view .LVU865
 3406 0054 0CEA0303 		and	r3, ip, r3
 781:src/int.c     **** 		if (mode == MODE_2COMP) {
 3407              		.loc 1 781 28 discriminator 1 view .LVU866
 3408 0058 1343     		orrs	r3, r2, r3
 3409 005a 40F07B81 		bne	.L267
 3410              	.L192:
 796:src/int.c     **** 	d = extract_value(x, sx);		// Demonimator
 3411              		.loc 1 796 3 is_stmt 1 view .LVU867
 796:src/int.c     **** 	d = extract_value(x, sx);		// Demonimator
 3412              		.loc 1 796 7 is_stmt 0 view .LVU868
 3413 005e 2B9A     		ldr	r2, [sp, #172]
 3414 0060 0023     		movs	r3, #0
 3415 0062 1360     		str	r3, [r2]
 3416              	.LVL232:
 3417              	.L200:
 797:src/int.c     **** 	if (d == 0) {
 3418              		.loc 1 797 2 is_stmt 1 view .LVU869
 797:src/int.c     **** 	if (d == 0) {
 3419              		.loc 1 797 6 is_stmt 0 view .LVU870
 3420 0064 DDE92801 		ldrd	r0, [sp, #160]
 3421 0068 2A9A     		ldr	r2, [sp, #168]
 3422 006a FFF7FEFF 		bl	extract_value
 3423              	.LVL233:
 3424 006e 8046     		mov	r8, r0
 3425 0070 8946     		mov	r9, r1
 3426              	.LVL234:
 798:src/int.c     **** 		err_div0(h|l, *sx, *sy);
 3427              		.loc 1 798 2 is_stmt 1 view .LVU871
 798:src/int.c     **** 		err_div0(h|l, *sx, *sy);
 3428              		.loc 1 798 5 is_stmt 0 view .LVU872
 3429 0072 58EA0903 		orrs	r3, r8, r9
 3430 0076 00F0B181 		beq	.L268
ARM GAS  /tmp/ccl34fCK.s 			page 100


 803:src/int.c     **** 		l |= h << ws;
 3431              		.loc 1 803 2 is_stmt 1 view .LVU873
 803:src/int.c     **** 		l |= h << ws;
 3432              		.loc 1 803 5 is_stmt 0 view .LVU874
 3433 007a BAF1400F 		cmp	r10, #64
 3434 007e 24D0     		beq	.L205
 804:src/int.c     **** 		h >>= (64 - ws);
 3435              		.loc 1 804 3 is_stmt 1 view .LVU875
 804:src/int.c     **** 		h >>= (64 - ws);
 3436              		.loc 1 804 10 is_stmt 0 view .LVU876
 3437 0080 AAF12002 		sub	r2, r10, #32
 3438 0084 06FA02F2 		lsl	r2, r6, r2
 3439 0088 07FA0AF3 		lsl	r3, r7, r10
 3440 008c CAF12001 		rsb	r1, r10, #32
 3441 0090 26FA01F1 		lsr	r1, r6, r1
 3442 0094 1343     		orrs	r3, r3, r2
 805:src/int.c     **** 	}
 3443              		.loc 1 805 5 view .LVU877
 3444 0096 AAF12000 		sub	r0, r10, #32
 805:src/int.c     **** 	}
 3445              		.loc 1 805 13 view .LVU878
 3446 009a CAF14002 		rsb	r2, r10, #64
 804:src/int.c     **** 		h >>= (64 - ws);
 3447              		.loc 1 804 10 view .LVU879
 3448 009e 06FA0AFC 		lsl	ip, r6, r10
 3449 00a2 0B43     		orrs	r3, r3, r1
 805:src/int.c     **** 	}
 3450              		.loc 1 805 5 view .LVU880
 3451 00a4 07FA00F0 		lsl	r0, r7, r0
 3452 00a8 26FA02F1 		lsr	r1, r6, r2
 3453 00ac CAF1200A 		rsb	r10, r10, #32
 3454              	.LVL235:
 805:src/int.c     **** 	}
 3455              		.loc 1 805 5 view .LVU881
 3456 00b0 27FA0AFA 		lsr	r10, r7, r10
 804:src/int.c     **** 		h >>= (64 - ws);
 3457              		.loc 1 804 5 view .LVU882
 3458 00b4 2B43     		orrs	r3, r3, r5
 3459 00b6 4CEA040C 		orr	ip, ip, r4
 805:src/int.c     **** 	}
 3460              		.loc 1 805 5 view .LVU883
 3461 00ba 27FA02F2 		lsr	r2, r7, r2
 3462 00be 0143     		orrs	r1, r1, r0
 804:src/int.c     **** 		h >>= (64 - ws);
 3463              		.loc 1 804 5 view .LVU884
 3464 00c0 6446     		mov	r4, ip
 3465              	.LVL236:
 805:src/int.c     **** 	}
 3466              		.loc 1 805 5 view .LVU885
 3467 00c2 41EA0A06 		orr	r6, r1, r10
 3468              	.LVL237:
 804:src/int.c     **** 		h >>= (64 - ws);
 3469              		.loc 1 804 5 view .LVU886
 3470 00c6 1D46     		mov	r5, r3
 3471              	.LVL238:
 805:src/int.c     **** 	}
 3472              		.loc 1 805 3 is_stmt 1 view .LVU887
ARM GAS  /tmp/ccl34fCK.s 			page 101


 805:src/int.c     **** 	}
 3473              		.loc 1 805 5 is_stmt 0 view .LVU888
 3474 00c8 1746     		mov	r7, r2
 3475              	.LVL239:
 3476              	.L205:
 808:src/int.c     **** 		*rem = 0;
 3477              		.loc 1 808 2 is_stmt 1 view .LVU889
 3478 00ca 46EA0402 		orr	r2, r6, r4
 3479 00ce 47EA0503 		orr	r3, r7, r5
 808:src/int.c     **** 		*rem = 0;
 3480              		.loc 1 808 5 is_stmt 0 view .LVU890
 3481 00d2 52EA0301 		orrs	r1, r2, r3
 3482 00d6 09D1     		bne	.L206
 809:src/int.c     **** 		return 0;
 3483              		.loc 1 809 3 is_stmt 1 view .LVU891
 809:src/int.c     **** 		return 0;
 3484              		.loc 1 809 8 is_stmt 0 view .LVU892
 3485 00d8 2C99     		ldr	r1, [sp, #176]
 810:src/int.c     **** 	}
 3486              		.loc 1 810 10 view .LVU893
 3487 00da 9046     		mov	r8, r2
 3488              	.LVL240:
 810:src/int.c     **** 	}
 3489              		.loc 1 810 10 view .LVU894
 3490 00dc 9946     		mov	r9, r3
 809:src/int.c     **** 		return 0;
 3491              		.loc 1 809 8 view .LVU895
 3492 00de C1E90023 		strd	r2, [r1]
 810:src/int.c     **** 	}
 3493              		.loc 1 810 3 is_stmt 1 view .LVU896
 827:src/int.c     **** #endif
 3494              		.loc 1 827 1 is_stmt 0 view .LVU897
 3495 00e2 4046     		mov	r0, r8
 3496 00e4 4946     		mov	r1, r9
 3497 00e6 1FB0     		add	sp, sp, #124
 3498              		.cfi_remember_state
 3499              		.cfi_def_cfa_offset 36
 3500              		@ sp needed
 3501 00e8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3502              	.LVL241:
 3503              	.L206:
 3504              		.cfi_restore_state
 813:src/int.c     **** 	xset(rmdr, 0, sizeof(rmdr));
 3505              		.loc 1 813 2 is_stmt 1 view .LVU898
 3506 00ec 0A22     		movs	r2, #10
 3507 00ee 0021     		movs	r1, #0
 3508 00f0 0AA8     		add	r0, sp, #40
 3509 00f2 FFF7FEFF 		bl	xset
 3510              	.LVL242:
 814:src/int.c     **** 
 3511              		.loc 1 814 2 view .LVU899
 3512 00f6 0822     		movs	r2, #8
 3513 00f8 0021     		movs	r1, #0
 3514 00fa 08A8     		add	r0, sp, #32
 3515 00fc FFF7FEFF 		bl	xset
 3516              	.LVL243:
 816:src/int.c     **** 	breakup(l, numer);
ARM GAS  /tmp/ccl34fCK.s 			page 102


 3517              		.loc 1 816 2 view .LVU900
 3518              	.LBB973:
 3519              	.LBI973:
 563:src/int.c     **** 	xv[0] = x & 0xffff;
 3520              		.loc 1 563 13 view .LVU901
 3521              	.LBB974:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3522              		.loc 1 564 2 view .LVU902
 3523              	.LBE974:
 3524              	.LBE973:
 3525              	.LBB981:
 3526              	.LBB982:
 567:src/int.c     **** }
 3527              		.loc 1 567 8 is_stmt 0 view .LVU903
 3528 0100 3B0C     		lsrs	r3, r7, #16
 3529              	.LBE982:
 3530              	.LBE981:
 3531              	.LBB985:
 3532              	.LBB975:
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3533              		.loc 1 566 8 view .LVU904
 3534 0102 1FFA89F1 		uxth	r1, r9
 567:src/int.c     **** }
 3535              		.loc 1 567 8 view .LVU905
 3536 0106 4FEA1942 		lsr	r2, r9, #16
 3537              	.LBE975:
 3538              	.LBE985:
 3539              	.LBB986:
 3540              	.LBB987:
 567:src/int.c     **** }
 3541              		.loc 1 567 20 view .LVU906
 3542 010a 280C     		lsrs	r0, r5, #16
 3543              	.LBE987:
 3544              	.LBE986:
 3545              	.LBB993:
 3546              	.LBB976:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3547              		.loc 1 564 8 view .LVU907
 3548 010c CDF81880 		str	r8, [sp, #24]
 3549              	.LBE976:
 3550              	.LBE993:
 3551              	.LBB994:
 3552              	.LBB988:
 3553 0110 0D94     		str	r4, [sp, #52]
 3554              	.LBE988:
 3555              	.LBE994:
 3556              	.LBB995:
 3557              	.LBB977:
 3558 0112 1FFA88FE 		uxth	lr, r8
 3559              	.LBE977:
 3560              	.LBE995:
 3561              	.LBB996:
 3562              	.LBB989:
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3563              		.loc 1 566 8 view .LVU908
 3564 0116 ADF83850 		strh	r5, [sp, #56]	@ movhi
 3565              	.LBE989:
ARM GAS  /tmp/ccl34fCK.s 			page 103


 3566              	.LBE996:
 3567              	.LBB997:
 3568              	.LBB983:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3569              		.loc 1 564 8 view .LVU909
 3570 011a 0F96     		str	r6, [sp, #60]
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3571              		.loc 1 566 8 view .LVU910
 3572 011c ADF84070 		strh	r7, [sp, #64]	@ movhi
 567:src/int.c     **** }
 3573              		.loc 1 567 8 view .LVU911
 3574 0120 ADF84230 		strh	r3, [sp, #66]	@ movhi
 3575              	.LBE983:
 3576              	.LBE997:
 3577              	.LBB998:
 3578              	.LBB978:
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3579              		.loc 1 566 8 view .LVU912
 3580 0124 ADF81C10 		strh	r1, [sp, #28]	@ movhi
 567:src/int.c     **** }
 3581              		.loc 1 567 8 view .LVU913
 3582 0128 ADF81E20 		strh	r2, [sp, #30]	@ movhi
 3583              	.LBE978:
 3584              	.LBE998:
 3585              	.LBB999:
 3586              	.LBB990:
 3587 012c ADF83A00 		strh	r0, [sp, #58]	@ movhi
 3588              	.LBE990:
 3589              	.LBE999:
 3590              	.LBB1000:
 3591              	.LBB979:
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3592              		.loc 1 565 2 is_stmt 1 view .LVU914
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3593              		.loc 1 566 2 view .LVU915
 567:src/int.c     **** }
 3594              		.loc 1 567 2 view .LVU916
 3595              	.LVL244:
 567:src/int.c     **** }
 3596              		.loc 1 567 2 is_stmt 0 view .LVU917
 3597              	.LBE979:
 3598              	.LBE1000:
 817:src/int.c     **** 	breakup(h, numer+4);
 3599              		.loc 1 817 2 is_stmt 1 view .LVU918
 3600              	.LBB1001:
 3601              	.LBI986:
 563:src/int.c     **** 	xv[0] = x & 0xffff;
 3602              		.loc 1 563 13 view .LVU919
 3603              	.LBB991:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3604              		.loc 1 564 2 view .LVU920
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3605              		.loc 1 565 2 view .LVU921
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3606              		.loc 1 566 2 view .LVU922
 567:src/int.c     **** }
 3607              		.loc 1 567 2 view .LVU923
ARM GAS  /tmp/ccl34fCK.s 			page 104


 567:src/int.c     **** }
 3608              		.loc 1 567 2 is_stmt 0 view .LVU924
 3609              	.LBE991:
 3610              	.LBE1001:
 818:src/int.c     **** 
 3611              		.loc 1 818 2 is_stmt 1 view .LVU925
 3612              	.LBB1002:
 3613              	.LBI981:
 563:src/int.c     **** 	xv[0] = x & 0xffff;
 3614              		.loc 1 563 13 view .LVU926
 3615              	.LBB984:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3616              		.loc 1 564 2 view .LVU927
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3617              		.loc 1 565 2 view .LVU928
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 3618              		.loc 1 566 2 view .LVU929
 567:src/int.c     **** }
 3619              		.loc 1 567 2 view .LVU930
 567:src/int.c     **** }
 3620              		.loc 1 567 2 is_stmt 0 view .LVU931
 3621              	.LBE984:
 3622              	.LBE1002:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3623              		.loc 1 820 2 is_stmt 1 view .LVU932
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3624              		.loc 1 820 22 view .LVU933
 3625              	.LBB1003:
 3626              	.LBB992:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3627              		.loc 1 564 8 is_stmt 0 view .LVU934
 3628 0130 A4B2     		uxth	r4, r4
 3629              	.LVL245:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 3630              		.loc 1 564 8 view .LVU935
 3631              	.LBE992:
 3632              	.LBE1003:
 3633              	.LBB1004:
 3634              	.LBB980:
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3635              		.loc 1 565 8 view .LVU936
 3636 0132 4FEA1848 		lsr	r8, r8, #16
 3637              	.LVL246:
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 3638              		.loc 1 565 8 view .LVU937
 3639              	.LBE980:
 3640              	.LBE1004:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3641              		.loc 1 820 36 view .LVU938
 3642 0136 002A     		cmp	r2, #0
 3643 0138 40F0C881 		bne	.L243
 3644              	.LVL247:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3645              		.loc 1 820 22 is_stmt 1 view .LVU939
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3646              		.loc 1 820 36 is_stmt 0 view .LVU940
 3647 013c 0029     		cmp	r1, #0
ARM GAS  /tmp/ccl34fCK.s 			page 105


 3648 013e 40F0D681 		bne	.L244
 3649              	.LVL248:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3650              		.loc 1 820 22 is_stmt 1 view .LVU941
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3651              		.loc 1 820 54 is_stmt 0 view .LVU942
 3652 0142 B8F1000F 		cmp	r8, #0
 3653 0146 14BF     		ite	ne
 3654 0148 0221     		movne	r1, #2
 3655 014a 0121     		moveq	r1, #1
 3656              	.LVL249:
 3657              	.L207:
 821:src/int.c     **** 
 3658              		.loc 1 821 22 is_stmt 1 discriminator 1 view .LVU943
 3659 014c 10AA     		add	r2, sp, #64
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3660              		.loc 1 820 54 is_stmt 0 discriminator 1 view .LVU944
 3661 014e 0825     		movs	r5, #8
 3662 0150 02E0     		b	.L208
 3663              	.LVL250:
 3664              	.L209:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 3665              		.loc 1 820 54 discriminator 1 view .LVU945
 3666 0152 32F80239 		ldrh	r3, [r2], #-2
 821:src/int.c     **** 
 3667              		.loc 1 821 2 view .LVU946
 3668 0156 0546     		mov	r5, r0
 3669              	.LVL251:
 3670              	.L208:
 821:src/int.c     **** 
 3671              		.loc 1 821 62 discriminator 3 view .LVU947
 3672 0158 681E     		subs	r0, r5, #1
 3673              	.LVL252:
 821:src/int.c     **** 
 3674              		.loc 1 821 22 is_stmt 1 discriminator 3 view .LVU948
 821:src/int.c     **** 
 3675              		.loc 1 821 44 is_stmt 0 discriminator 3 view .LVU949
 3676 015a 1BB9     		cbnz	r3, .L210
 821:src/int.c     **** 
 3677              		.loc 1 821 2 discriminator 1 view .LVU950
 3678 015c 8842     		cmp	r0, r1
 3679 015e F8D1     		bne	.L209
 3680 0160 481E     		subs	r0, r1, #1
 3681              	.LVL253:
 821:src/int.c     **** 
 3682              		.loc 1 821 2 view .LVU951
 3683 0162 0D46     		mov	r5, r1
 3684              	.LVL254:
 3685              	.L210:
 823:src/int.c     **** 
 3686              		.loc 1 823 2 is_stmt 1 view .LVU952
 3687              	.LBB1005:
 3688              	.LBI1005:
 691:src/int.c     **** 		const unsigned short u[], const unsigned short v[],
 3689              		.loc 1 691 13 view .LVU953
 3690              	.LBB1006:
 694:src/int.c     **** 	unsigned qhat;					// Estimated quotient digit.
ARM GAS  /tmp/ccl34fCK.s 			page 106


 3691              		.loc 1 694 2 view .LVU954
 695:src/int.c     **** 	unsigned rhat;					// A remainder.
 3692              		.loc 1 695 2 view .LVU955
 696:src/int.c     **** 	unsigned p;					// Product of two digits.
 3693              		.loc 1 696 2 view .LVU956
 697:src/int.c     **** 	int s, i, j, t, k;
 3694              		.loc 1 697 2 view .LVU957
 698:src/int.c     **** 	unsigned short vn[8];				// Normalised denominator
 3695              		.loc 1 698 2 view .LVU958
 699:src/int.c     **** 	unsigned short un[18];				// Normalised numerator
 3696              		.loc 1 699 2 view .LVU959
 700:src/int.c     **** 
 3697              		.loc 1 700 2 view .LVU960
 702:src/int.c     **** 		k = 0;					// the case of a
 3698              		.loc 1 702 2 view .LVU961
 702:src/int.c     **** 		k = 0;					// the case of a
 3699              		.loc 1 702 5 is_stmt 0 view .LVU962
 3700 0164 0129     		cmp	r1, #1
 3701 0166 00F07181 		beq	.L269
 717:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3702              		.loc 1 717 2 is_stmt 1 view .LVU963
 717:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3703              		.loc 1 717 11 is_stmt 0 view .LVU964
 3704 016a 01F10042 		add	r2, r1, #-2147483648
 3705 016e 013A     		subs	r2, r2, #1
 3706 0170 0DF1180A 		add	r10, sp, #24
 3707              	.LVL255:
 717:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3708              		.loc 1 717 11 view .LVU965
 3709 0174 5600     		lsls	r6, r2, #1
 3710              	.LVL256:
 717:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3711              		.loc 1 717 6 view .LVU966
 3712 0176 3AF81230 		ldrh	r3, [r10, r2, lsl #1]
 3713              	.LVL257:
 3714              	.LBB1007:
 3715              	.LBI1007:
 657:src/int.c     ****    int n;
 3716              		.loc 1 657 12 is_stmt 1 view .LVU967
 3717              	.LBB1008:
 658:src/int.c     **** 
 3718              		.loc 1 658 4 view .LVU968
 660:src/int.c     **** 	   return 16;
 3719              		.loc 1 660 4 view .LVU969
 3720              	.LBE1008:
 3721              	.LBE1007:
 717:src/int.c     **** 	for (i = n - 1; i > 0; i--)
 3722              		.loc 1 717 11 is_stmt 0 view .LVU970
 3723 017a 0AEB4202 		add	r2, r10, r2, lsl #1
 3724              	.LBB1013:
 3725              	.LBB1009:
 660:src/int.c     **** 	   return 16;
 3726              		.loc 1 660 7 view .LVU971
 3727 017e 002B     		cmp	r3, #0
 3728 0180 00F07C81 		beq	.L246
 662:src/int.c     ****    if (x <= 0x00ff) {n = n + 8; x = x << 8;}
 3729              		.loc 1 662 4 is_stmt 1 view .LVU972
ARM GAS  /tmp/ccl34fCK.s 			page 107


 3730              	.LVL258:
 663:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3731              		.loc 1 663 4 view .LVU973
 663:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3732              		.loc 1 663 7 is_stmt 0 view .LVU974
 3733 0184 FF2B     		cmp	r3, #255
 663:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3734              		.loc 1 663 22 is_stmt 1 view .LVU975
 3735              	.LVL259:
 663:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3736              		.loc 1 663 33 view .LVU976
 663:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3737              		.loc 1 663 35 is_stmt 0 view .LVU977
 3738 0186 9DBF     		ittte	ls
 3739 0188 4FEA0328 		lslls	r8, r3, #8
 3740 018c 1FFA88F3 		uxthls	r3, r8
 3741              	.LVL260:
 663:src/int.c     ****    if (x <= 0x0fff) {n = n + 4; x = x << 4;}
 3742              		.loc 1 663 24 view .LVU978
 3743 0190 4FF00809 		movls	r9, #8
 662:src/int.c     ****    if (x <= 0x00ff) {n = n + 8; x = x << 8;}
 3744              		.loc 1 662 6 view .LVU979
 3745 0194 4FF00009 		movhi	r9, #0
 3746              	.LVL261:
 664:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3747              		.loc 1 664 4 is_stmt 1 view .LVU980
 664:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3748              		.loc 1 664 7 is_stmt 0 view .LVU981
 3749 0198 B3F5805F 		cmp	r3, #4096
 3750 019c 05D2     		bcs	.L217
 664:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3751              		.loc 1 664 22 is_stmt 1 view .LVU982
 664:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3752              		.loc 1 664 35 is_stmt 0 view .LVU983
 3753 019e 4FEA0318 		lsl	r8, r3, #4
 3754 01a2 1FFA88F3 		uxth	r3, r8
 3755              	.LVL262:
 664:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3756              		.loc 1 664 24 view .LVU984
 3757 01a6 09F10409 		add	r9, r9, #4
 3758              	.LVL263:
 664:src/int.c     ****    if (x <= 0x3fff) {n = n + 2; x = x << 2;}
 3759              		.loc 1 664 33 is_stmt 1 view .LVU985
 3760              	.L217:
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 3761              		.loc 1 665 4 view .LVU986
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 3762              		.loc 1 665 7 is_stmt 0 view .LVU987
 3763 01aa B3F5804F 		cmp	r3, #16384
 3764 01ae C0F03E81 		bcc	.L270
 3765              	.L218:
 666:src/int.c     ****    return n;
 3766              		.loc 1 666 4 is_stmt 1 view .LVU988
 666:src/int.c     ****    return n;
 3767              		.loc 1 666 7 is_stmt 0 view .LVU989
 3768 01b2 1F04     		lsls	r7, r3, #16
 666:src/int.c     ****    return n;
ARM GAS  /tmp/ccl34fCK.s 			page 108


 3769              		.loc 1 666 22 is_stmt 1 view .LVU990
 666:src/int.c     ****    return n;
 3770              		.loc 1 666 24 is_stmt 0 view .LVU991
 3771 01b4 58BF     		it	pl
 3772 01b6 09F10109 		addpl	r9, r9, #1
 3773              	.LVL264:
 666:src/int.c     ****    return n;
 3774              		.loc 1 666 24 view .LVU992
 3775 01ba C9F11008 		rsb	r8, r9, #16
 3776              	.LVL265:
 3777              	.L215:
 666:src/int.c     ****    return n;
 3778              		.loc 1 666 24 view .LVU993
 3779              	.LBE1009:
 3780              	.LBE1013:
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3781              		.loc 1 718 2 is_stmt 1 view .LVU994
 3782 01be 11AB     		add	r3, sp, #68
 3783 01c0 03EB060C 		add	ip, r3, r6
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3784              		.loc 1 718 9 is_stmt 0 view .LVU995
 3785 01c4 4F1E     		subs	r7, r1, #1
 3786              	.LVL266:
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3787              		.loc 1 718 18 is_stmt 1 view .LVU996
 3788              	.L220:
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3789              		.loc 1 719 3 view .LVU997
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3790              		.loc 1 719 13 is_stmt 0 view .LVU998
 3791 01c6 1388     		ldrh	r3, [r2]
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3792              		.loc 1 719 27 view .LVU999
 3793 01c8 32F802BD 		ldrh	fp, [r2, #-2]!
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3794              		.loc 1 719 17 view .LVU1000
 3795 01cc 03FA09F3 		lsl	r3, r3, r9
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3796              		.loc 1 719 33 view .LVU1001
 3797 01d0 4BFA08FB 		asr	fp, fp, r8
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3798              		.loc 1 719 23 view .LVU1002
 3799 01d4 43EA0B03 		orr	r3, r3, fp
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3800              		.loc 1 718 2 view .LVU1003
 3801 01d8 9245     		cmp	r10, r2
 719:src/int.c     **** 	vn[0] = v[0] << s;
 3802              		.loc 1 719 9 view .LVU1004
 3803 01da 2CF80239 		strh	r3, [ip], #-2	@ movhi
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3804              		.loc 1 718 25 is_stmt 1 view .LVU1005
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3805              		.loc 1 718 18 view .LVU1006
 718:src/int.c     **** 		vn[i] = (v[i] << s) | (v[i-1] >> (16-s));
 3806              		.loc 1 718 2 is_stmt 0 view .LVU1007
 3807 01de F2D1     		bne	.L220
 720:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 109


 3808              		.loc 1 720 2 is_stmt 1 view .LVU1008
 722:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3809              		.loc 1 722 11 is_stmt 0 view .LVU1009
 3810 01e0 1EAB     		add	r3, sp, #120
 3811 01e2 03EB4503 		add	r3, r3, r5, lsl #1
 720:src/int.c     **** 
 3812              		.loc 1 720 15 view .LVU1010
 3813 01e6 0EFA09FE 		lsl	lr, lr, r9
 722:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3814              		.loc 1 722 11 view .LVU1011
 3815 01ea 33F8462C 		ldrh	r2, [r3, #-70]
 720:src/int.c     **** 
 3816              		.loc 1 720 8 view .LVU1012
 3817 01ee 1FFA8EF3 		uxth	r3, lr
 3818 01f2 0193     		str	r3, [sp, #4]
 3819 01f4 ADF84430 		strh	r3, [sp, #68]	@ movhi
 722:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3820              		.loc 1 722 2 is_stmt 1 view .LVU1013
 722:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3821              		.loc 1 722 8 is_stmt 0 view .LVU1014
 3822 01f8 1EAB     		add	r3, sp, #120
 3823 01fa 03EB4503 		add	r3, r3, r5, lsl #1
 722:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3824              		.loc 1 722 17 view .LVU1015
 3825 01fe 42FA08F2 		asr	r2, r2, r8
 722:src/int.c     **** 	for (i = m - 1; i > 0; i--)
 3826              		.loc 1 722 8 view .LVU1016
 3827 0202 23F8242C 		strh	r2, [r3, #-36]	@ movhi
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3828              		.loc 1 723 2 is_stmt 1 view .LVU1017
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3829              		.loc 1 723 18 view .LVU1018
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3830              		.loc 1 723 2 is_stmt 0 view .LVU1019
 3831 0206 A0B1     		cbz	r0, .L225
 3832 0208 0DF1340C 		add	ip, sp, #52
 3833              	.LVL267:
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3834              		.loc 1 723 2 view .LVU1020
 3835 020c 15AB     		add	r3, sp, #84
 3836 020e 0CEB4002 		add	r2, ip, r0, lsl #1
 3837 0212 03EB4000 		add	r0, r3, r0, lsl #1
 3838              	.L224:
 724:src/int.c     **** 	un[0] = u[0] << s;
 3839              		.loc 1 724 3 is_stmt 1 view .LVU1021
 724:src/int.c     **** 	un[0] = u[0] << s;
 3840              		.loc 1 724 13 is_stmt 0 view .LVU1022
 3841 0216 B2F800E0 		ldrh	lr, [r2]
 724:src/int.c     **** 	un[0] = u[0] << s;
 3842              		.loc 1 724 27 view .LVU1023
 3843 021a 32F8023D 		ldrh	r3, [r2, #-2]!
 724:src/int.c     **** 	un[0] = u[0] << s;
 3844              		.loc 1 724 17 view .LVU1024
 3845 021e 0EFA09FE 		lsl	lr, lr, r9
 724:src/int.c     **** 	un[0] = u[0] << s;
 3846              		.loc 1 724 33 view .LVU1025
 3847 0222 43FA08F3 		asr	r3, r3, r8
ARM GAS  /tmp/ccl34fCK.s 			page 110


 724:src/int.c     **** 	un[0] = u[0] << s;
 3848              		.loc 1 724 23 view .LVU1026
 3849 0226 43EA0E03 		orr	r3, r3, lr
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3850              		.loc 1 723 2 view .LVU1027
 3851 022a 9445     		cmp	ip, r2
 724:src/int.c     **** 	un[0] = u[0] << s;
 3852              		.loc 1 724 9 view .LVU1028
 3853 022c 20F80239 		strh	r3, [r0], #-2	@ movhi
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3854              		.loc 1 723 25 is_stmt 1 view .LVU1029
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3855              		.loc 1 723 18 view .LVU1030
 723:src/int.c     **** 		un[i] = (u[i] << s) | (u[i-1] >> (16-s));
 3856              		.loc 1 723 2 is_stmt 0 view .LVU1031
 3857 0230 F1D1     		bne	.L224
 3858              	.LVL268:
 3859              	.L225:
 725:src/int.c     **** 
 3860              		.loc 1 725 2 is_stmt 1 view .LVU1032
 725:src/int.c     **** 
 3861              		.loc 1 725 15 is_stmt 0 view .LVU1033
 3862 0232 04FA09F4 		lsl	r4, r4, r9
 725:src/int.c     **** 
 3863              		.loc 1 725 8 view .LVU1034
 3864 0236 A4B2     		uxth	r4, r4
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 3865              		.loc 1 727 2 view .LVU1035
 3866 0238 6D1A     		subs	r5, r5, r1
 725:src/int.c     **** 
 3867              		.loc 1 725 8 view .LVU1036
 3868 023a ADF85440 		strh	r4, [sp, #84]	@ movhi
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 3869              		.loc 1 727 2 is_stmt 1 view .LVU1037
 3870              	.LVL269:
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 3871              		.loc 1 727 18 view .LVU1038
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 3872              		.loc 1 727 2 is_stmt 0 view .LVU1039
 3873 023e 00F14C81 		bmi	.L271
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3874              		.loc 1 729 35 view .LVU1040
 3875 0242 1EAB     		add	r3, sp, #120
 3876 0244 03EB4707 		add	r7, r3, r7, lsl #1
 3877 0248 C1EBC173 		rsb	r3, r1, r1, lsl #31
 3878 024c 5B00     		lsls	r3, r3, #1
 3879 024e 0233     		adds	r3, r3, #2
 3880 0250 B21C     		adds	r2, r6, #2
 3881 0252 4C19     		adds	r4, r1, r5
 3882 0254 11A8     		add	r0, sp, #68
 3883 0256 0293     		str	r3, [sp, #8]
 3884 0258 15AB     		add	r3, sp, #84
 3885 025a 0392     		str	r2, [sp, #12]
 732:src/int.c     **** 		qhat = qhat - 1;
 3886              		.loc 1 732 26 view .LVU1041
 3887 025c 0239     		subs	r1, r1, #2
 3888              	.LVL270:
ARM GAS  /tmp/ccl34fCK.s 			page 111


 732:src/int.c     **** 		qhat = qhat - 1;
 3889              		.loc 1 732 26 view .LVU1042
 3890 025e 8218     		adds	r2, r0, r2
 3891 0260 03EB4404 		add	r4, r3, r4, lsl #1
 3892 0264 0AA8     		add	r0, sp, #40
 3893              	.LVL271:
 732:src/int.c     **** 		qhat = qhat - 1;
 3894              		.loc 1 732 26 view .LVU1043
 3895 0266 1EAB     		add	r3, sp, #120
 3896 0268 00EB4500 		add	r0, r0, r5, lsl #1
 3897              	.LVL272:
 732:src/int.c     **** 		qhat = qhat - 1;
 3898              		.loc 1 732 26 view .LVU1044
 3899 026c 03EB4103 		add	r3, r3, r1, lsl #1
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3900              		.loc 1 729 35 view .LVU1045
 3901 0270 37F834AC 		ldrh	r10, [r7, #-52]
 3902              	.LVL273:
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3903              		.loc 1 729 35 view .LVU1046
 3904 0274 CDF81090 		str	r9, [sp, #16]
 3905 0278 CDF81480 		str	r8, [sp, #20]
 732:src/int.c     **** 		qhat = qhat - 1;
 3906              		.loc 1 732 26 view .LVU1047
 3907 027c 0093     		str	r3, [sp]
 3908 027e 9146     		mov	r9, r2
 3909              	.LVL274:
 732:src/int.c     **** 		qhat = qhat - 1;
 3910              		.loc 1 732 26 view .LVU1048
 3911 0280 8046     		mov	r8, r0
 3912              	.LVL275:
 3913              	.L235:
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3914              		.loc 1 729 2 is_stmt 1 view .LVU1049
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3915              		.loc 1 729 12 is_stmt 0 view .LVU1050
 3916 0282 2288     		ldrh	r2, [r4]
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3917              		.loc 1 729 24 view .LVU1051
 3918 0284 34F8023D 		ldrh	r3, [r4, #-2]!
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3919              		.loc 1 729 20 view .LVU1052
 3920 0288 03EB0243 		add	r3, r3, r2, lsl #16
 729:src/int.c     **** 	rhat = (un[j+n]*b + un[j+n-1]) - qhat*vn[n-1];
 3921              		.loc 1 729 7 view .LVU1053
 3922 028c B3FBFAF1 		udiv	r1, r3, r10
 3923              	.LVL276:
 730:src/int.c     **** 	again:
 3924              		.loc 1 730 2 is_stmt 1 view .LVU1054
 3925 0290 0AFB1133 		mls	r3, r10, r1, r3
 3926              	.LVL277:
 730:src/int.c     **** 	again:
 3927              		.loc 1 730 2 is_stmt 0 view .LVU1055
 3928 0294 05E0     		b	.L226
 3929              	.L227:
 734:src/int.c     **** 		if (rhat < b) goto again;
 3930              		.loc 1 734 8 view .LVU1056
ARM GAS  /tmp/ccl34fCK.s 			page 112


 3931 0296 5344     		add	r3, r3, r10
 3932              	.LVL278:
 735:src/int.c     **** 	}
 3933              		.loc 1 735 6 view .LVU1057
 3934 0298 B3F5803F 		cmp	r3, #65536
 733:src/int.c     **** 		rhat = rhat + vn[n-1];
 3935              		.loc 1 733 8 view .LVU1058
 3936 029c 01F1FF31 		add	r1, r1, #-1
 3937              	.LVL279:
 734:src/int.c     **** 		if (rhat < b) goto again;
 3938              		.loc 1 734 3 is_stmt 1 view .LVU1059
 735:src/int.c     **** 	}
 3939              		.loc 1 735 3 view .LVU1060
 735:src/int.c     **** 	}
 3940              		.loc 1 735 6 is_stmt 0 view .LVU1061
 3941 02a0 0DD2     		bcs	.L228
 3942              	.L226:
 732:src/int.c     **** 		qhat = qhat - 1;
 3943              		.loc 1 732 2 is_stmt 1 view .LVU1062
 733:src/int.c     **** 		rhat = rhat + vn[n-1];
 3944              		.loc 1 733 3 view .LVU1063
 732:src/int.c     **** 		qhat = qhat - 1;
 3945              		.loc 1 732 5 is_stmt 0 view .LVU1064
 3946 02a2 B1F5803F 		cmp	r1, #65536
 3947 02a6 F6D2     		bcs	.L227
 732:src/int.c     **** 		qhat = qhat - 1;
 3948              		.loc 1 732 26 view .LVU1065
 3949 02a8 009A     		ldr	r2, [sp]
 3950 02aa 32F8340C 		ldrh	r0, [r2, #-52]
 732:src/int.c     **** 		qhat = qhat - 1;
 3951              		.loc 1 732 45 view .LVU1066
 3952 02ae 34F8022C 		ldrh	r2, [r4, #-2]
 732:src/int.c     **** 		qhat = qhat - 1;
 3953              		.loc 1 732 23 view .LVU1067
 3954 02b2 01FB00F0 		mul	r0, r1, r0
 732:src/int.c     **** 		qhat = qhat - 1;
 3955              		.loc 1 732 41 view .LVU1068
 3956 02b6 02EB0342 		add	r2, r2, r3, lsl #16
 732:src/int.c     **** 		qhat = qhat - 1;
 3957              		.loc 1 732 16 view .LVU1069
 3958 02ba 9042     		cmp	r0, r2
 3959 02bc EBD8     		bhi	.L227
 3960              	.L228:
 739:src/int.c     **** 	for (i = 0; i < n; i++) {
 3961              		.loc 1 739 2 is_stmt 1 view .LVU1070
 3962              	.LVL280:
 740:src/int.c     **** 		p = qhat*vn[i];
 3963              		.loc 1 740 2 view .LVU1071
 740:src/int.c     **** 		p = qhat*vn[i];
 3964              		.loc 1 740 14 view .LVU1072
 3965 02be 029B     		ldr	r3, [sp, #8]
 3966              	.LVL281:
 3967              	.LBB1014:
 3968              	.LBB1010:
 661:src/int.c     ****    n = 0;
 3969              		.loc 1 661 12 is_stmt 0 view .LVU1073
 3970 02c0 0198     		ldr	r0, [sp, #4]
ARM GAS  /tmp/ccl34fCK.s 			page 113


 3971 02c2 1E19     		adds	r6, r3, r4
 3972 02c4 0DF1460E 		add	lr, sp, #70
 3973 02c8 B446     		mov	ip, r6
 3974 02ca 7746     		mov	r7, lr
 3975              	.LBE1010:
 3976              	.LBE1014:
 739:src/int.c     **** 	for (i = 0; i < n; i++) {
 3977              		.loc 1 739 4 view .LVU1074
 3978 02cc 0023     		movs	r3, #0
 3979 02ce 01E0     		b	.L230
 3980              	.LVL282:
 3981              	.L272:
 739:src/int.c     **** 	for (i = 0; i < n; i++) {
 3982              		.loc 1 739 4 view .LVU1075
 3983 02d0 37F8020B 		ldrh	r0, [r7], #2
 3984              	.LVL283:
 3985              	.L230:
 741:src/int.c     **** 		t = un[i+j] - k - (p & 0xFFFF);
 3986              		.loc 1 741 3 is_stmt 1 view .LVU1076
 742:src/int.c     **** 		un[i+j] = t;
 3987              		.loc 1 742 9 is_stmt 0 view .LVU1077
 3988 02d4 BCF80020 		ldrh	r2, [ip]
 741:src/int.c     **** 		t = un[i+j] - k - (p & 0xFFFF);
 3989              		.loc 1 741 5 view .LVU1078
 3990 02d8 01FB00F0 		mul	r0, r1, r0
 3991              	.LVL284:
 742:src/int.c     **** 		un[i+j] = t;
 3992              		.loc 1 742 3 is_stmt 1 view .LVU1079
 742:src/int.c     **** 		un[i+j] = t;
 3993              		.loc 1 742 15 is_stmt 0 view .LVU1080
 3994 02dc D21A     		subs	r2, r2, r3
 742:src/int.c     **** 		un[i+j] = t;
 3995              		.loc 1 742 24 view .LVU1081
 3996 02de 1FFA80FB 		uxth	fp, r0
 742:src/int.c     **** 		un[i+j] = t;
 3997              		.loc 1 742 19 view .LVU1082
 3998 02e2 A2EB0B02 		sub	r2, r2, fp
 3999              	.LVL285:
 743:src/int.c     **** 		k = (p >> 16) - (t >> 16);
 4000              		.loc 1 743 3 is_stmt 1 view .LVU1083
 744:src/int.c     **** 	}
 4001              		.loc 1 744 22 is_stmt 0 view .LVU1084
 4002 02e6 1314     		asrs	r3, r2, #16
 4003              	.LVL286:
 740:src/int.c     **** 		p = qhat*vn[i];
 4004              		.loc 1 740 2 view .LVU1085
 4005 02e8 B945     		cmp	r9, r7
 743:src/int.c     **** 		k = (p >> 16) - (t >> 16);
 4006              		.loc 1 743 11 view .LVU1086
 4007 02ea 2CF8022B 		strh	r2, [ip], #2	@ movhi
 744:src/int.c     **** 	}
 4008              		.loc 1 744 3 is_stmt 1 view .LVU1087
 744:src/int.c     **** 	}
 4009              		.loc 1 744 17 is_stmt 0 view .LVU1088
 4010 02ee C3EB1043 		rsb	r3, r3, r0, lsr #16
 4011              	.LVL287:
 740:src/int.c     **** 		p = qhat*vn[i];
ARM GAS  /tmp/ccl34fCK.s 			page 114


 4012              		.loc 1 740 21 is_stmt 1 view .LVU1089
 740:src/int.c     **** 		p = qhat*vn[i];
 4013              		.loc 1 740 14 view .LVU1090
 740:src/int.c     **** 		p = qhat*vn[i];
 4014              		.loc 1 740 2 is_stmt 0 view .LVU1091
 4015 02f2 EDD1     		bne	.L272
 746:src/int.c     **** 	un[j+n] = t;
 4016              		.loc 1 746 2 is_stmt 1 view .LVU1092
 746:src/int.c     **** 	un[j+n] = t;
 4017              		.loc 1 746 8 is_stmt 0 view .LVU1093
 4018 02f4 6288     		ldrh	r2, [r4, #2]
 4019              	.LVL288:
 746:src/int.c     **** 	un[j+n] = t;
 4020              		.loc 1 746 4 view .LVU1094
 4021 02f6 D31A     		subs	r3, r2, r3
 4022              	.LVL289:
 747:src/int.c     **** 
 4023              		.loc 1 747 2 is_stmt 1 view .LVU1095
 750:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 4024              		.loc 1 750 5 is_stmt 0 view .LVU1096
 4025 02f8 002B     		cmp	r3, #0
 749:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 4026              		.loc 1 749 7 view .LVU1097
 4027 02fa 89B2     		uxth	r1, r1
 4028              	.LVL290:
 747:src/int.c     **** 
 4029              		.loc 1 747 10 view .LVU1098
 4030 02fc 6380     		strh	r3, [r4, #2]	@ movhi
 749:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 4031              		.loc 1 749 2 is_stmt 1 view .LVU1099
 750:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 4032              		.loc 1 750 2 view .LVU1100
 750:src/int.c     **** 		q[j] = q[j] - 1;       			// much, add back.
 4033              		.loc 1 750 5 is_stmt 0 view .LVU1101
 4034 02fe 58DB     		blt	.L231
 749:src/int.c     **** 	if (t < 0) {					// If we subtracted too
 4035              		.loc 1 749 7 view .LVU1102
 4036 0300 A8F80010 		strh	r1, [r8]	@ movhi
 4037              	.LVL291:
 4038              	.L232:
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 4039              		.loc 1 727 26 is_stmt 1 view .LVU1103
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 4040              		.loc 1 727 27 is_stmt 0 view .LVU1104
 4041 0304 013D     		subs	r5, r5, #1
 4042              	.LVL292:
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 4043              		.loc 1 727 18 is_stmt 1 view .LVU1105
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 4044              		.loc 1 727 2 is_stmt 0 view .LVU1106
 4045 0306 6B1C     		adds	r3, r5, #1
 4046 0308 A8F10208 		sub	r8, r8, #2
 4047 030c B9D1     		bne	.L235
 4048 030e DDE90498 		ldrd	r9, r8, [sp, #16]
 4049 0312 BDF85440 		ldrh	r4, [sp, #84]
 4050              	.LVL293:
 4051              	.L223:
ARM GAS  /tmp/ccl34fCK.s 			page 115


 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 4052              		.loc 1 727 2 view .LVU1107
 4053 0316 039B     		ldr	r3, [sp, #12]
 4054 0318 08AA     		add	r2, sp, #32
 4055              	.LVL294:
 727:src/int.c     **** 	// Compute estimate qhat of q[j].
 4056              		.loc 1 727 2 view .LVU1108
 4057 031a 1344     		add	r3, r3, r2
 4058 031c 1D46     		mov	r5, r3
 4059 031e 0DF15601 		add	r1, sp, #86
 4060              	.LVL295:
 4061              	.L236:
 763:src/int.c     **** }
 4062              		.loc 1 763 3 is_stmt 1 view .LVU1109
 763:src/int.c     **** }
 4063              		.loc 1 763 17 is_stmt 0 view .LVU1110
 4064 0322 44FA09F3 		asr	r3, r4, r9
 763:src/int.c     **** }
 4065              		.loc 1 763 28 view .LVU1111
 4066 0326 31F8024B 		ldrh	r4, [r1], #2
 763:src/int.c     **** }
 4067              		.loc 1 763 34 view .LVU1112
 4068 032a 04FA08F0 		lsl	r0, r4, r8
 763:src/int.c     **** }
 4069              		.loc 1 763 23 view .LVU1113
 4070 032e 0343     		orrs	r3, r3, r0
 763:src/int.c     **** }
 4071              		.loc 1 763 8 view .LVU1114
 4072 0330 22F8023B 		strh	r3, [r2], #2	@ movhi
 762:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4073              		.loc 1 762 21 is_stmt 1 view .LVU1115
 762:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4074              		.loc 1 762 14 view .LVU1116
 762:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4075              		.loc 1 762 2 is_stmt 0 view .LVU1117
 4076 0334 AA42     		cmp	r2, r5
 4077 0336 F4D1     		bne	.L236
 4078              	.L214:
 4079              	.LVL296:
 762:src/int.c     **** 		r[i] = (un[i] >> s) | (un[i+1] << (16-s));
 4080              		.loc 1 762 2 view .LVU1118
 4081              	.LBE1006:
 4082              	.LBE1005:
 825:src/int.c     **** 	return packup(quot);
 4083              		.loc 1 825 2 is_stmt 1 view .LVU1119
 4084              	.LBB1020:
 4085              	.LBI1020:
 570:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 4086              		.loc 1 570 31 view .LVU1120
 4087              	.LBB1021:
 571:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4088              		.loc 1 571 2 view .LVU1121
 571:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4089              		.loc 1 571 2 is_stmt 0 view .LVU1122
 4090              	.LBE1021:
 4091              	.LBE1020:
 4092              	.LBB1022:
ARM GAS  /tmp/ccl34fCK.s 			page 116


 4093              	.LBB1023:
 573:src/int.c     **** 			x[0];
 4094              		.loc 1 573 38 view .LVU1123
 4095 0338 DDE90A89 		ldrd	r8, [sp, #40]
 4096              	.LBE1023:
 4097              	.LBE1022:
 825:src/int.c     **** 	return packup(quot);
 4098              		.loc 1 825 7 view .LVU1124
 4099 033c DDE90823 		ldrd	r2, [sp, #32]
 4100 0340 2C99     		ldr	r1, [sp, #176]
 827:src/int.c     **** #endif
 4101              		.loc 1 827 1 view .LVU1125
 4102 0342 4046     		mov	r0, r8
 825:src/int.c     **** 	return packup(quot);
 4103              		.loc 1 825 7 view .LVU1126
 4104 0344 C1E90023 		strd	r2, [r1]
 826:src/int.c     **** }
 4105              		.loc 1 826 2 is_stmt 1 view .LVU1127
 4106              	.LVL297:
 4107              	.LBB1025:
 4108              	.LBI1022:
 570:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 4109              		.loc 1 570 31 view .LVU1128
 4110              	.LBB1024:
 571:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4111              		.loc 1 571 2 view .LVU1129
 571:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 4112              		.loc 1 571 2 is_stmt 0 view .LVU1130
 4113              	.LBE1024:
 4114              	.LBE1025:
 827:src/int.c     **** #endif
 4115              		.loc 1 827 1 view .LVU1131
 4116 0348 4946     		mov	r1, r9
 4117 034a 1FB0     		add	sp, sp, #124
 4118              		.cfi_remember_state
 4119              		.cfi_def_cfa_offset 36
 4120              		@ sp needed
 4121 034c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4122              	.LVL298:
 4123              	.L278:
 827:src/int.c     **** #endif
 4124              		.loc 1 827 1 view .LVU1132
 4125              		.align	2
 4126              	.L277:
 4127 0350 00000000 		.word	PersistentRam
 4128              	.LVL299:
 4129              	.L267:
 4130              		.cfi_restore_state
 782:src/int.c     **** 			l = mask_value(1 + ~l);
 4131              		.loc 1 782 3 is_stmt 1 view .LVU1133
 782:src/int.c     **** 			l = mask_value(1 + ~l);
 4132              		.loc 1 782 6 is_stmt 0 view .LVU1134
 4133 0354 B9F1000F 		cmp	r9, #0
 4134 0358 5CD1     		bne	.L193
 783:src/int.c     **** 			h = ~h;
 4135              		.loc 1 783 4 is_stmt 1 view .LVU1135
 783:src/int.c     **** 			h = ~h;
ARM GAS  /tmp/ccl34fCK.s 			page 117


 4136              		.loc 1 783 21 is_stmt 0 view .LVU1136
 4137 035a 4442     		rsbs	r4, r0, #0
 4138              	.LVL300:
 783:src/int.c     **** 			h = ~h;
 4139              		.loc 1 783 21 view .LVU1137
 4140 035c 61EB4105 		sbc	r5, r1, r1, lsl #1
 4141              	.LVL301:
 4142              	.LBB1026:
 4143              	.LBI1026:
  91:src/int.c     **** #ifndef TINY_BUILD
 4144              		.loc 1 91 15 is_stmt 1 view .LVU1138
 4145              	.LBB1027:
  93:src/int.c     **** 	long long int mask;
 4146              		.loc 1 93 2 view .LVU1139
 4147              	.LBB1028:
 4148              	.LBI1028:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 4149              		.loc 1 42 14 view .LVU1140
 4150              	.LBB1029:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4151              		.loc 1 43 2 view .LVU1141
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4152              		.loc 1 44 2 view .LVU1142
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4153              		.loc 1 44 5 is_stmt 0 view .LVU1143
 4154 0360 BBF13E0F 		cmp	fp, #62
 4155 0364 00F2BC80 		bhi	.L194
 4156              	.LVL302:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4157              		.loc 1 44 5 view .LVU1144
 4158              	.LBE1029:
 4159              	.LBE1028:
  94:src/int.c     **** 
 4160              		.loc 1 94 2 is_stmt 1 view .LVU1145
  96:src/int.c     **** 		return v;
 4161              		.loc 1 96 2 view .LVU1146
  98:src/int.c     **** 	return v & mask;
 4162              		.loc 1 98 2 view .LVU1147
  98:src/int.c     **** 	return v & mask;
 4163              		.loc 1 98 14 is_stmt 0 view .LVU1148
 4164 0368 0120     		movs	r0, #1
 4165              	.LVL303:
  98:src/int.c     **** 	return v & mask;
 4166              		.loc 1 98 14 view .LVU1149
 4167 036a AEF1200C 		sub	ip, lr, #32
 4168 036e 00FA0CFC 		lsl	ip, r0, ip
 4169 0372 CEF12003 		rsb	r3, lr, #32
 4170 0376 20FA03F3 		lsr	r3, r0, r3
 4171 037a 6146     		mov	r1, ip
 4172 037c 00FA0EFE 		lsl	lr, r0, lr
  98:src/int.c     **** 	return v & mask;
 4173              		.loc 1 98 7 view .LVU1150
 4174 0380 1EF1FF30 		adds	r0, lr, #-1
  98:src/int.c     **** 	return v & mask;
 4175              		.loc 1 98 14 view .LVU1151
 4176 0384 41EA0301 		orr	r1, r1, r3
  98:src/int.c     **** 	return v & mask;
ARM GAS  /tmp/ccl34fCK.s 			page 118


 4177              		.loc 1 98 7 view .LVU1152
 4178 0388 41F1FF31 		adc	r1, r1, #-1
 4179              	.LVL304:
  99:src/int.c     **** #else
 4180              		.loc 1 99 2 is_stmt 1 view .LVU1153
  99:src/int.c     **** #else
 4181              		.loc 1 99 11 is_stmt 0 view .LVU1154
 4182 038c 0440     		ands	r4, r4, r0
 4183 038e 0D40     		ands	r5, r5, r1
 4184              	.LVL305:
  99:src/int.c     **** #else
 4185              		.loc 1 99 11 view .LVU1155
 4186              	.LBE1027:
 4187              	.LBE1026:
 784:src/int.c     **** 			if (l == 0)
 4188              		.loc 1 784 4 is_stmt 1 view .LVU1156
 785:src/int.c     **** 				h++;
 4189              		.loc 1 785 4 view .LVU1157
 785:src/int.c     **** 				h++;
 4190              		.loc 1 785 7 is_stmt 0 view .LVU1158
 4191 0390 54EA0502 		orrs	r2, r4, r5
 4192 0394 76D1     		bne	.L273
 786:src/int.c     **** 			h = mask_value(h);
 4193              		.loc 1 786 5 is_stmt 1 view .LVU1159
 4194              	.LVL306:
 787:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4195              		.loc 1 787 4 view .LVU1160
 786:src/int.c     **** 			h = mask_value(h);
 4196              		.loc 1 786 6 is_stmt 0 view .LVU1161
 4197 0396 7242     		rsbs	r2, r6, #0
 4198 0398 4CEA030C 		orr	ip, ip, r3
 4199 039c 67EB4703 		sbc	r3, r7, r7, lsl #1
 4200              	.LVL307:
 4201              	.LBB1030:
 4202              	.LBI1030:
  91:src/int.c     **** #ifndef TINY_BUILD
 4203              		.loc 1 91 15 is_stmt 1 view .LVU1162
 4204              	.LBB1031:
  93:src/int.c     **** 	long long int mask;
 4205              		.loc 1 93 2 view .LVU1163
 4206              	.LBE1031:
 4207              	.LBE1030:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4208              		.loc 1 43 2 view .LVU1164
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4209              		.loc 1 44 2 view .LVU1165
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4210              		.loc 1 44 2 is_stmt 0 view .LVU1166
 4211 03a0 1EF1FF30 		adds	r0, lr, #-1
 4212 03a4 4CF1FF31 		adc	r1, ip, #-1
 4213              	.LVL308:
 4214              	.L238:
 4215              	.LBB1036:
 4216              	.LBB1032:
  94:src/int.c     **** 
 4217              		.loc 1 94 2 is_stmt 1 view .LVU1167
  96:src/int.c     **** 		return v;
ARM GAS  /tmp/ccl34fCK.s 			page 119


 4218              		.loc 1 96 2 view .LVU1168
  98:src/int.c     **** 	return v & mask;
 4219              		.loc 1 98 2 view .LVU1169
  99:src/int.c     **** #else
 4220              		.loc 1 99 2 view .LVU1170
  99:src/int.c     **** #else
 4221              		.loc 1 99 11 is_stmt 0 view .LVU1171
 4222 03a8 02EA0006 		and	r6, r2, r0
 4223 03ac 03EA0107 		and	r7, r3, r1
 4224              	.LVL309:
  99:src/int.c     **** #else
 4225              		.loc 1 99 11 view .LVU1172
 4226 03b0 39E0     		b	.L197
 4227              	.LVL310:
 4228              	.L231:
  99:src/int.c     **** #else
 4229              		.loc 1 99 11 view .LVU1173
 4230              	.LBE1032:
 4231              	.LBE1036:
 4232              	.LBB1037:
 4233              	.LBB1017:
 751:src/int.c     **** 		k = 0;
 4234              		.loc 1 751 3 is_stmt 1 view .LVU1174
 751:src/int.c     **** 		k = 0;
 4235              		.loc 1 751 15 is_stmt 0 view .LVU1175
 4236 03b2 0139     		subs	r1, r1, #1
 751:src/int.c     **** 		k = 0;
 4237              		.loc 1 751 8 view .LVU1176
 4238 03b4 A8F80010 		strh	r1, [r8]	@ movhi
 752:src/int.c     **** 		for (i = 0; i < n; i++) {
 4239              		.loc 1 752 3 is_stmt 1 view .LVU1177
 4240              	.LVL311:
 753:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4241              		.loc 1 753 3 view .LVU1178
 753:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4242              		.loc 1 753 15 view .LVU1179
 752:src/int.c     **** 		for (i = 0; i < n; i++) {
 4243              		.loc 1 752 5 is_stmt 0 view .LVU1180
 4244 03b8 0023     		movs	r3, #0
 4245              	.LVL312:
 751:src/int.c     **** 		k = 0;
 4246              		.loc 1 751 8 view .LVU1181
 4247 03ba 0199     		ldr	r1, [sp, #4]
 4248 03bc 01E0     		b	.L234
 4249              	.LVL313:
 4250              	.L274:
 751:src/int.c     **** 		k = 0;
 4251              		.loc 1 751 8 view .LVU1182
 4252 03be 3EF8021B 		ldrh	r1, [lr], #2
 4253              	.LVL314:
 4254              	.L234:
 754:src/int.c     **** 			un[i+j] = t;
 4255              		.loc 1 754 4 is_stmt 1 view .LVU1183
 754:src/int.c     **** 			un[i+j] = t;
 4256              		.loc 1 754 10 is_stmt 0 view .LVU1184
 4257 03c2 3288     		ldrh	r2, [r6]
 754:src/int.c     **** 			un[i+j] = t;
ARM GAS  /tmp/ccl34fCK.s 			page 120


 4258              		.loc 1 754 16 view .LVU1185
 4259 03c4 1144     		add	r1, r1, r2
 754:src/int.c     **** 			un[i+j] = t;
 4260              		.loc 1 754 6 view .LVU1186
 4261 03c6 0B44     		add	r3, r3, r1
 4262              	.LVL315:
 755:src/int.c     **** 			k = t >> 16;
 4263              		.loc 1 755 4 is_stmt 1 view .LVU1187
 753:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4264              		.loc 1 753 3 is_stmt 0 view .LVU1188
 4265 03c8 F145     		cmp	r9, lr
 755:src/int.c     **** 			k = t >> 16;
 4266              		.loc 1 755 12 view .LVU1189
 4267 03ca 26F8023B 		strh	r3, [r6], #2	@ movhi
 756:src/int.c     **** 		}
 4268              		.loc 1 756 4 is_stmt 1 view .LVU1190
 756:src/int.c     **** 		}
 4269              		.loc 1 756 6 is_stmt 0 view .LVU1191
 4270 03ce 4FEA2343 		asr	r3, r3, #16
 4271              	.LVL316:
 753:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4272              		.loc 1 753 22 is_stmt 1 view .LVU1192
 753:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4273              		.loc 1 753 15 view .LVU1193
 753:src/int.c     **** 			t = un[i+j] + vn[i] + k;
 4274              		.loc 1 753 3 is_stmt 0 view .LVU1194
 4275 03d2 F4D1     		bne	.L274
 758:src/int.c     **** 		}
 4276              		.loc 1 758 3 is_stmt 1 view .LVU1195
 758:src/int.c     **** 		}
 4277              		.loc 1 758 21 is_stmt 0 view .LVU1196
 4278 03d4 6288     		ldrh	r2, [r4, #2]
 4279 03d6 1344     		add	r3, r3, r2
 4280              	.LVL317:
 758:src/int.c     **** 		}
 4281              		.loc 1 758 11 view .LVU1197
 4282 03d8 6380     		strh	r3, [r4, #2]	@ movhi
 4283 03da 93E7     		b	.L232
 4284              	.LVL318:
 4285              	.L268:
 758:src/int.c     **** 		}
 4286              		.loc 1 758 11 view .LVU1198
 4287              	.LBE1017:
 4288              	.LBE1037:
 799:src/int.c     **** 		return 0;
 4289              		.loc 1 799 3 is_stmt 1 view .LVU1199
 4290 03dc 46EA0402 		orr	r2, r6, r4
 4291 03e0 47EA0503 		orr	r3, r7, r5
 4292              	.LVL319:
 4293              	.LBB1038:
 4294              	.LBI1038:
 345:src/int.c     **** 	if (num == 0)
 4295              		.loc 1 345 13 view .LVU1200
 4296              	.LBB1039:
 346:src/int.c     **** 		report_err(ERR_DOMAIN);
 4297              		.loc 1 346 2 view .LVU1201
 346:src/int.c     **** 		report_err(ERR_DOMAIN);
ARM GAS  /tmp/ccl34fCK.s 			page 121


 4298              		.loc 1 346 5 is_stmt 0 view .LVU1202
 4299 03e4 1343     		orrs	r3, r2, r3
 4300 03e6 29D0     		beq	.L275
 4301              	.LVL320:
 4302              	.LBB1040:
 4303              	.LBI1040:
 345:src/int.c     **** 	if (num == 0)
 4304              		.loc 1 345 13 is_stmt 1 view .LVU1203
 4305              	.LBB1041:
 348:src/int.c     **** 		report_err(ERR_INFINITY);
 4306              		.loc 1 348 7 view .LVU1204
 348:src/int.c     **** 		report_err(ERR_INFINITY);
 4307              		.loc 1 348 10 is_stmt 0 view .LVU1205
 4308 03e8 2A9B     		ldr	r3, [sp, #168]
 4309 03ea 1A68     		ldr	r2, [r3]
 4310 03ec 2B9B     		ldr	r3, [sp, #172]
 4311 03ee 1B68     		ldr	r3, [r3]
 4312 03f0 9A42     		cmp	r2, r3
 349:src/int.c     **** 	else
 4313              		.loc 1 349 3 is_stmt 1 view .LVU1206
 4314 03f2 0CBF     		ite	eq
 4315 03f4 0420     		moveq	r0, #4
 351:src/int.c     **** }
 4316              		.loc 1 351 3 view .LVU1207
 4317 03f6 0520     		movne	r0, #5
 4318 03f8 FFF7FEFF 		bl	report_err
 4319              	.LVL321:
 351:src/int.c     **** }
 4320              		.loc 1 351 3 is_stmt 0 view .LVU1208
 4321              	.LBE1041:
 4322              	.LBE1040:
 4323              	.LBE1039:
 4324              	.LBE1038:
 827:src/int.c     **** #endif
 4325              		.loc 1 827 1 view .LVU1209
 4326 03fc 4046     		mov	r0, r8
 4327 03fe 4946     		mov	r1, r9
 4328 0400 1FB0     		add	sp, sp, #124
 4329              		.cfi_remember_state
 4330              		.cfi_def_cfa_offset 36
 4331              		@ sp needed
 4332 0402 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4333              	.LVL322:
 4334              	.L242:
 4335              		.cfi_restore_state
 4336              	.LBB1043:
 4337              	.LBB968:
 827:src/int.c     **** #endif
 4338              		.loc 1 827 1 view .LVU1210
 4339 0406 4FF00008 		mov	r8, #0
 4340 040a 4FF0004C 		mov	ip, #-2147483648
  45:src/int.c     **** 	return il;
 4341              		.loc 1 45 10 view .LVU1211
 4342 040e 4FF0400A 		mov	r10, #64
 4343 0412 16E6     		b	.L191
 4344              	.LVL323:
 4345              	.L193:
ARM GAS  /tmp/ccl34fCK.s 			page 122


  45:src/int.c     **** 	return il;
 4346              		.loc 1 45 10 view .LVU1212
 4347              	.LBE968:
 4348              	.LBE1043:
 788:src/int.c     **** 			l = mask_value(~l);
 4349              		.loc 1 788 10 is_stmt 1 view .LVU1213
 788:src/int.c     **** 			l = mask_value(~l);
 4350              		.loc 1 788 13 is_stmt 0 view .LVU1214
 4351 0414 B9F1010F 		cmp	r9, #1
 4352 0418 37D0     		beq	.L276
 792:src/int.c     **** 		}
 4353              		.loc 1 792 4 is_stmt 1 view .LVU1215
 792:src/int.c     **** 		}
 4354              		.loc 1 792 6 is_stmt 0 view .LVU1216
 4355 041a 88EA0608 		eor	r8, r8, r6
 4356 041e 8CEA070C 		eor	ip, ip, r7
 4357 0422 4646     		mov	r6, r8
 4358              	.LVL324:
 792:src/int.c     **** 		}
 4359              		.loc 1 792 6 view .LVU1217
 4360 0424 6746     		mov	r7, ip
 4361              	.LVL325:
 4362              	.L197:
 794:src/int.c     **** 	} else
 4363              		.loc 1 794 3 is_stmt 1 view .LVU1218
 794:src/int.c     **** 	} else
 4364              		.loc 1 794 7 is_stmt 0 view .LVU1219
 4365 0426 2B9A     		ldr	r2, [sp, #172]
 4366 0428 0123     		movs	r3, #1
 4367 042a 1360     		str	r3, [r2]
 4368              	.LVL326:
 794:src/int.c     **** 	} else
 4369              		.loc 1 794 7 view .LVU1220
 4370 042c 1AE6     		b	.L200
 4371              	.LVL327:
 4372              	.L270:
 4373              	.LBB1044:
 4374              	.LBB1018:
 4375              	.LBB1015:
 4376              	.LBB1011:
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4377              		.loc 1 665 22 is_stmt 1 view .LVU1221
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4378              		.loc 1 665 35 is_stmt 0 view .LVU1222
 4379 042e 4FEA8308 		lsl	r8, r3, #2
 4380 0432 1FFA88F3 		uxth	r3, r8
 4381              	.LVL328:
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4382              		.loc 1 665 24 view .LVU1223
 4383 0436 09F10209 		add	r9, r9, #2
 4384              	.LVL329:
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4385              		.loc 1 665 33 is_stmt 1 view .LVU1224
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4386              		.loc 1 665 33 is_stmt 0 view .LVU1225
 4387 043a BAE6     		b	.L218
 4388              	.LVL330:
ARM GAS  /tmp/ccl34fCK.s 			page 123


 4389              	.L275:
 665:src/int.c     ****    if (x <= 0x7fff) {n = n + 1;}
 4390              		.loc 1 665 33 view .LVU1226
 4391              	.LBE1011:
 4392              	.LBE1015:
 4393              	.LBE1018:
 4394              	.LBE1044:
 4395              	.LBB1045:
 4396              	.LBB1042:
 347:src/int.c     **** 	else if (sn == sd)
 4397              		.loc 1 347 3 is_stmt 1 view .LVU1227
 4398 043c 0120     		movs	r0, #1
 4399 043e FFF7FEFF 		bl	report_err
 4400              	.LVL331:
 347:src/int.c     **** 	else if (sn == sd)
 4401              		.loc 1 347 3 is_stmt 0 view .LVU1228
 4402              	.LBE1042:
 4403              	.LBE1045:
 827:src/int.c     **** #endif
 4404              		.loc 1 827 1 view .LVU1229
 4405 0442 4046     		mov	r0, r8
 4406 0444 4946     		mov	r1, r9
 4407 0446 1FB0     		add	sp, sp, #124
 4408              		.cfi_remember_state
 4409              		.cfi_def_cfa_offset 36
 4410              		@ sp needed
 4411 0448 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4412              	.LVL332:
 4413              	.L269:
 4414              		.cfi_restore_state
 4415              	.LBB1046:
 4416              	.LBB1019:
 703:src/int.c     **** 		for (j = m - 1; j >= 0; j--) {		// single-digit
 4417              		.loc 1 703 3 is_stmt 1 view .LVU1230
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4418              		.loc 1 704 3 view .LVU1231
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4419              		.loc 1 704 19 view .LVU1232
 4420 044c 0AAB     		add	r3, sp, #40
 4421              	.LVL333:
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4422              		.loc 1 704 19 is_stmt 0 view .LVU1233
 4423 044e 03EB4004 		add	r4, r3, r0, lsl #1
 4424 0452 0DAB     		add	r3, sp, #52
 4425              	.LVL334:
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4426              		.loc 1 704 19 view .LVU1234
 4427 0454 03EB4001 		add	r1, r3, r0, lsl #1
 4428              	.LVL335:
 703:src/int.c     **** 		for (j = m - 1; j >= 0; j--) {		// single-digit
 4429              		.loc 1 703 5 view .LVU1235
 4430 0458 0023     		movs	r3, #0
 4431              	.LVL336:
 4432              	.L213:
 705:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4433              		.loc 1 705 4 is_stmt 1 view .LVU1236
 705:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
ARM GAS  /tmp/ccl34fCK.s 			page 124


 4434              		.loc 1 705 19 is_stmt 0 view .LVU1237
 4435 045a 31F80229 		ldrh	r2, [r1], #-2
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4436              		.loc 1 704 28 view .LVU1238
 4437 045e 0138     		subs	r0, r0, #1
 4438              	.LVL337:
 705:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4439              		.loc 1 705 16 view .LVU1239
 4440 0460 02EB0343 		add	r3, r2, r3, lsl #16
 4441              	.LVL338:
 705:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4442              		.loc 1 705 23 view .LVU1240
 4443 0464 B3FBFEF2 		udiv	r2, r3, lr
 706:src/int.c     **** 		}
 4444              		.loc 1 706 24 view .LVU1241
 4445 0468 95B2     		uxth	r5, r2
 705:src/int.c     **** 			k = (k*b + u[j]) - q[j]*v[0];
 4446              		.loc 1 705 9 view .LVU1242
 4447 046a 24F80229 		strh	r2, [r4], #-2	@ movhi
 706:src/int.c     **** 		}
 4448              		.loc 1 706 4 is_stmt 1 view .LVU1243
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4449              		.loc 1 704 3 is_stmt 0 view .LVU1244
 4450 046e 421C     		adds	r2, r0, #1
 706:src/int.c     **** 		}
 4451              		.loc 1 706 21 view .LVU1245
 4452 0470 0EFB1533 		mls	r3, lr, r5, r3
 4453              	.LVL339:
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4454              		.loc 1 704 27 is_stmt 1 view .LVU1246
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4455              		.loc 1 704 19 view .LVU1247
 704:src/int.c     **** 			q[j] = (k*b + u[j])/v[0];	// divisor here.
 4456              		.loc 1 704 3 is_stmt 0 view .LVU1248
 4457 0474 F1D1     		bne	.L213
 708:src/int.c     **** 		return;
 4458              		.loc 1 708 3 is_stmt 1 view .LVU1249
 708:src/int.c     **** 		return;
 4459              		.loc 1 708 8 is_stmt 0 view .LVU1250
 4460 0476 ADF82030 		strh	r3, [sp, #32]	@ movhi
 709:src/int.c     **** 	}
 4461              		.loc 1 709 3 is_stmt 1 view .LVU1251
 4462 047a 5DE7     		b	.L214
 4463              	.LVL340:
 4464              	.L246:
 4465              	.LBB1016:
 4466              	.LBB1012:
 709:src/int.c     **** 	}
 4467              		.loc 1 709 3 is_stmt 0 view .LVU1252
 4468 047c 9846     		mov	r8, r3
 661:src/int.c     ****    n = 0;
 4469              		.loc 1 661 12 view .LVU1253
 4470 047e 4FF01009 		mov	r9, #16
 4471 0482 9CE6     		b	.L215
 4472              	.LVL341:
 4473              	.L273:
 661:src/int.c     ****    n = 0;
ARM GAS  /tmp/ccl34fCK.s 			page 125


 4474              		.loc 1 661 12 view .LVU1254
 4475              	.LBE1012:
 4476              	.LBE1016:
 4477              	.LBE1019:
 4478              	.LBE1046:
 787:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4479              		.loc 1 787 4 is_stmt 1 view .LVU1255
 784:src/int.c     **** 			if (l == 0)
 4480              		.loc 1 784 6 is_stmt 0 view .LVU1256
 4481 0484 F243     		mvns	r2, r6
 4482 0486 FB43     		mvns	r3, r7
 4483              	.LVL342:
 4484              	.LBB1047:
  91:src/int.c     **** #ifndef TINY_BUILD
 4485              		.loc 1 91 15 is_stmt 1 view .LVU1257
 4486              	.LBB1033:
  93:src/int.c     **** 	long long int mask;
 4487              		.loc 1 93 2 view .LVU1258
 4488              	.LBE1033:
 4489              	.LBE1047:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4490              		.loc 1 43 2 view .LVU1259
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4491              		.loc 1 44 2 view .LVU1260
 4492 0488 8EE7     		b	.L238
 4493              	.LVL343:
 4494              	.L276:
 789:src/int.c     **** 			h = mask_value(~h);
 4495              		.loc 1 789 4 view .LVU1261
 789:src/int.c     **** 			h = mask_value(~h);
 4496              		.loc 1 789 19 is_stmt 0 view .LVU1262
 4497 048a C343     		mvns	r3, r0
 4498 048c CA43     		mvns	r2, r1
 4499              	.LBB1048:
 4500              	.LBB1049:
 4501              	.LBB1050:
 4502              	.LBB1051:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4503              		.loc 1 44 5 view .LVU1263
 4504 048e BBF13E0F 		cmp	fp, #62
 4505              	.LBE1051:
 4506              	.LBE1050:
 4507              	.LBE1049:
 4508              	.LBE1048:
 789:src/int.c     **** 			h = mask_value(~h);
 4509              		.loc 1 789 19 view .LVU1264
 4510 0492 1C46     		mov	r4, r3
 4511              	.LVL344:
 789:src/int.c     **** 			h = mask_value(~h);
 4512              		.loc 1 789 19 view .LVU1265
 4513 0494 1546     		mov	r5, r2
 4514              	.LVL345:
 4515              	.LBB1057:
 4516              	.LBI1048:
  91:src/int.c     **** #ifndef TINY_BUILD
 4517              		.loc 1 91 15 is_stmt 1 view .LVU1266
 4518              	.LBB1054:
ARM GAS  /tmp/ccl34fCK.s 			page 126


  93:src/int.c     **** 	long long int mask;
 4519              		.loc 1 93 2 view .LVU1267
 4520              	.LBB1053:
 4521              	.LBI1050:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 4522              		.loc 1 42 14 view .LVU1268
 4523              	.LBB1052:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4524              		.loc 1 43 2 view .LVU1269
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4525              		.loc 1 44 2 view .LVU1270
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4526              		.loc 1 44 5 is_stmt 0 view .LVU1271
 4527 0496 1BD8     		bhi	.L264
 4528              	.LVL346:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4529              		.loc 1 44 5 view .LVU1272
 4530              	.LBE1052:
 4531              	.LBE1053:
  94:src/int.c     **** 
 4532              		.loc 1 94 2 is_stmt 1 view .LVU1273
  96:src/int.c     **** 		return v;
 4533              		.loc 1 96 2 view .LVU1274
  98:src/int.c     **** 	return v & mask;
 4534              		.loc 1 98 2 view .LVU1275
  98:src/int.c     **** 	return v & mask;
 4535              		.loc 1 98 14 is_stmt 0 view .LVU1276
 4536 0498 AEF12003 		sub	r3, lr, #32
 4537              	.LVL347:
  98:src/int.c     **** 	return v & mask;
 4538              		.loc 1 98 14 view .LVU1277
 4539 049c CEF12001 		rsb	r1, lr, #32
 4540 04a0 29FA01F1 		lsr	r1, r9, r1
 4541 04a4 09FA03F3 		lsl	r3, r9, r3
 4542 04a8 09FA0EFE 		lsl	lr, r9, lr
  98:src/int.c     **** 	return v & mask;
 4543              		.loc 1 98 7 view .LVU1278
 4544 04ac 1EF1FF3E 		adds	lr, lr, #-1
  98:src/int.c     **** 	return v & mask;
 4545              		.loc 1 98 14 view .LVU1279
 4546 04b0 43EA0103 		orr	r3, r3, r1
  98:src/int.c     **** 	return v & mask;
 4547              		.loc 1 98 7 view .LVU1280
 4548 04b4 43F1FF33 		adc	r3, r3, #-1
 4549              	.LVL348:
  99:src/int.c     **** #else
 4550              		.loc 1 99 2 is_stmt 1 view .LVU1281
  99:src/int.c     **** #else
 4551              		.loc 1 99 2 is_stmt 0 view .LVU1282
 4552              	.LBE1054:
 4553              	.LBE1057:
 790:src/int.c     **** 		} else {
 4554              		.loc 1 790 19 view .LVU1283
 4555 04b8 F943     		mvns	r1, r7
 4556              	.LBB1058:
 4557              	.LBB1055:
  99:src/int.c     **** #else
ARM GAS  /tmp/ccl34fCK.s 			page 127


 4558              		.loc 1 99 11 view .LVU1284
 4559 04ba 04EA0E04 		and	r4, r4, lr
 4560              	.LBE1055:
 4561              	.LBE1058:
 4562              	.LBB1059:
 4563              	.LBB1060:
 4564 04be 2EEA0606 		bic	r6, lr, r6
 4565              	.LVL349:
  99:src/int.c     **** #else
 4566              		.loc 1 99 11 view .LVU1285
 4567              	.LBE1060:
 4568              	.LBE1059:
 4569              	.LBB1063:
 4570              	.LBB1056:
 4571 04c2 02EA0305 		and	r5, r2, r3
 4572              	.LVL350:
  99:src/int.c     **** #else
 4573              		.loc 1 99 11 view .LVU1286
 4574              	.LBE1056:
 4575              	.LBE1063:
 790:src/int.c     **** 		} else {
 4576              		.loc 1 790 4 is_stmt 1 view .LVU1287
 4577              	.LBB1064:
 4578              	.LBI1059:
  91:src/int.c     **** #ifndef TINY_BUILD
 4579              		.loc 1 91 15 view .LVU1288
 4580              	.LBB1061:
  93:src/int.c     **** 	long long int mask;
 4581              		.loc 1 93 2 view .LVU1289
 4582              	.LBE1061:
 4583              	.LBE1064:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4584              		.loc 1 43 2 view .LVU1290
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4585              		.loc 1 44 2 view .LVU1291
 4586              	.LBB1065:
 4587              	.LBB1062:
  94:src/int.c     **** 
 4588              		.loc 1 94 2 view .LVU1292
  96:src/int.c     **** 		return v;
 4589              		.loc 1 96 2 view .LVU1293
  98:src/int.c     **** 	return v & mask;
 4590              		.loc 1 98 2 view .LVU1294
  99:src/int.c     **** #else
 4591              		.loc 1 99 2 view .LVU1295
  99:src/int.c     **** #else
 4592              		.loc 1 99 11 is_stmt 0 view .LVU1296
 4593 04c6 01EA0307 		and	r7, r1, r3
 4594              	.LVL351:
  99:src/int.c     **** #else
 4595              		.loc 1 99 11 view .LVU1297
 4596 04ca ACE7     		b	.L197
 4597              	.LVL352:
 4598              	.L243:
  99:src/int.c     **** #else
 4599              		.loc 1 99 11 view .LVU1298
 4600              	.LBE1062:
ARM GAS  /tmp/ccl34fCK.s 			page 128


 4601              	.LBE1065:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 4602              		.loc 1 820 17 view .LVU1299
 4603 04cc 0421     		movs	r1, #4
 4604 04ce 3DE6     		b	.L207
 4605              	.LVL353:
 4606              	.L264:
 784:src/int.c     **** 			if (l == 0)
 4607              		.loc 1 784 6 view .LVU1300
 4608 04d0 F243     		mvns	r2, r6
 4609 04d2 FB43     		mvns	r3, r7
 4610 04d4 1646     		mov	r6, r2
 4611 04d6 1F46     		mov	r7, r3
 787:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 4612              		.loc 1 787 4 is_stmt 1 view .LVU1301
 4613              	.LVL354:
 4614              	.LBB1066:
  91:src/int.c     **** #ifndef TINY_BUILD
 4615              		.loc 1 91 15 view .LVU1302
 4616              	.LBB1034:
  93:src/int.c     **** 	long long int mask;
 4617              		.loc 1 93 2 view .LVU1303
 4618              	.LBE1034:
 4619              	.LBE1066:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4620              		.loc 1 43 2 view .LVU1304
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4621              		.loc 1 44 2 view .LVU1305
 4622 04d8 A5E7     		b	.L197
 4623              	.LVL355:
 4624              	.L271:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4625              		.loc 1 44 2 is_stmt 0 view .LVU1306
 4626 04da B31C     		adds	r3, r6, #2
 4627 04dc 0393     		str	r3, [sp, #12]
 4628 04de 1AE7     		b	.L223
 4629              	.LVL356:
 4630              	.L194:
 784:src/int.c     **** 			if (l == 0)
 4631              		.loc 1 784 4 is_stmt 1 view .LVU1307
 785:src/int.c     **** 				h++;
 4632              		.loc 1 785 4 view .LVU1308
 785:src/int.c     **** 				h++;
 4633              		.loc 1 785 7 is_stmt 0 view .LVU1309
 4634 04e0 54EA0503 		orrs	r3, r4, r5
 4635 04e4 F4D1     		bne	.L264
 786:src/int.c     **** 			h = mask_value(h);
 4636              		.loc 1 786 5 is_stmt 1 view .LVU1310
 786:src/int.c     **** 			h = mask_value(h);
 4637              		.loc 1 786 6 is_stmt 0 view .LVU1311
 4638 04e6 7642     		rsbs	r6, r6, #0
 4639              	.LVL357:
 786:src/int.c     **** 			h = mask_value(h);
 4640              		.loc 1 786 6 view .LVU1312
 4641 04e8 67EB4707 		sbc	r7, r7, r7, lsl #1
 4642              	.LVL358:
 787:src/int.c     **** 		} else if (mode == MODE_1COMP) {
ARM GAS  /tmp/ccl34fCK.s 			page 129


 4643              		.loc 1 787 4 is_stmt 1 view .LVU1313
 4644              	.LBB1067:
  91:src/int.c     **** #ifndef TINY_BUILD
 4645              		.loc 1 91 15 view .LVU1314
 4646              	.LBB1035:
  93:src/int.c     **** 	long long int mask;
 4647              		.loc 1 93 2 view .LVU1315
 4648              	.LBE1035:
 4649              	.LBE1067:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4650              		.loc 1 43 2 view .LVU1316
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4651              		.loc 1 44 2 view .LVU1317
 4652 04ec 9BE7     		b	.L197
 4653              	.LVL359:
 4654              	.L244:
 820:src/int.c     **** 	for (num_numer = 8; num_numer > num_denom && numer[num_numer-1] == 0; num_numer--);
 4655              		.loc 1 820 54 is_stmt 0 view .LVU1318
 4656 04ee 0321     		movs	r1, #3
 4657 04f0 2CE6     		b	.L207
 4658              		.cfi_endproc
 4659              	.LFE37:
 4661 04f2 00BF     		.section	.text.build_value,"ax",%progbits
 4662              		.align	1
 4663              		.p2align 2,,3
 4664              		.global	build_value
 4665              		.syntax unified
 4666              		.thumb
 4667              		.thumb_func
 4668              		.fpu fpv4-sp-d16
 4670              	build_value:
 4671              	.LVL360:
 4672              	.LFB13:
 146:src/int.c     **** #ifndef TINY_BUILD
 4673              		.loc 1 146 75 is_stmt 1 view -0
 4674              		.cfi_startproc
 4675              		@ args = 0, pretend = 0, frame = 0
 4676              		@ frame_needed = 0, uses_anonymous_args = 0
 4677              		@ link register save eliminated.
 148:src/int.c     **** 	long long int v = mask_value(x);
 4678              		.loc 1 148 2 view .LVU1320
 4679              	.LBB1068:
 4680              	.LBI1068:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 4681              		.loc 1 38 23 view .LVU1321
 4682              	.LBB1069:
  39:src/int.c     **** }
 4683              		.loc 1 39 2 view .LVU1322
  39:src/int.c     **** }
 4684              		.loc 1 39 39 is_stmt 0 view .LVU1323
 4685 0000 3D4B     		ldr	r3, .L295
 4686              	.LBE1069:
 4687              	.LBE1068:
 146:src/int.c     **** #ifndef TINY_BUILD
 4688              		.loc 1 146 75 view .LVU1324
 4689 0002 F0B4     		push	{r4, r5, r6, r7}
 4690              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccl34fCK.s 			page 130


 4691              		.cfi_offset 4, -16
 4692              		.cfi_offset 5, -12
 4693              		.cfi_offset 6, -8
 4694              		.cfi_offset 7, -4
 4695              	.LBB1072:
 4696              	.LBB1073:
 4697              	.LBB1074:
 4698              	.LBB1075:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4699              		.loc 1 43 26 view .LVU1325
 4700 0004 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 4701              	.LBE1075:
 4702              	.LBE1074:
 4703              	.LBE1073:
 4704              	.LBE1072:
 4705              	.LBB1082:
 4706              	.LBB1070:
  39:src/int.c     **** }
 4707              		.loc 1 39 39 view .LVU1326
 4708 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4709              	.LBE1070:
 4710              	.LBE1082:
 4711              	.LBB1083:
 4712              	.LBB1080:
 4713              	.LBB1078:
 4714              	.LBB1076:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4715              		.loc 1 43 15 view .LVU1327
 4716 000c 06F03F06 		and	r6, r6, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4717              		.loc 1 44 26 view .LVU1328
 4718 0010 771E     		subs	r7, r6, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4719              		.loc 1 44 5 view .LVU1329
 4720 0012 3E2F     		cmp	r7, #62
 4721              	.LBE1076:
 4722              	.LBE1078:
 4723              	.LBE1080:
 4724              	.LBE1083:
 149:src/int.c     **** 
 4725              		.loc 1 149 20 view .LVU1330
 4726 0014 0446     		mov	r4, r0
 4727 0016 0D46     		mov	r5, r1
 4728              	.LBB1084:
 4729              	.LBB1071:
  39:src/int.c     **** }
 4730              		.loc 1 39 39 view .LVU1331
 4731 0018 C3F38100 		ubfx	r0, r3, #2, #2
 4732              	.LVL361:
  39:src/int.c     **** }
 4733              		.loc 1 39 39 view .LVU1332
 4734              	.LBE1071:
 4735              	.LBE1084:
 149:src/int.c     **** 
 4736              		.loc 1 149 2 is_stmt 1 view .LVU1333
 4737              	.LBB1085:
 4738              	.LBI1072:
ARM GAS  /tmp/ccl34fCK.s 			page 131


  91:src/int.c     **** #ifndef TINY_BUILD
 4739              		.loc 1 91 15 view .LVU1334
 4740              	.LBB1081:
  93:src/int.c     **** 	long long int mask;
 4741              		.loc 1 93 2 view .LVU1335
 4742              	.LBB1079:
 4743              	.LBI1074:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 4744              		.loc 1 42 14 view .LVU1336
 4745              	.LBB1077:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4746              		.loc 1 43 2 view .LVU1337
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4747              		.loc 1 44 2 view .LVU1338
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4748              		.loc 1 44 5 is_stmt 0 view .LVU1339
 4749 001c 13D8     		bhi	.L280
 4750              	.LVL362:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4751              		.loc 1 44 5 view .LVU1340
 4752              	.LBE1077:
 4753              	.LBE1079:
  94:src/int.c     **** 
 4754              		.loc 1 94 2 is_stmt 1 view .LVU1341
  96:src/int.c     **** 		return v;
 4755              		.loc 1 96 2 view .LVU1342
  98:src/int.c     **** 	return v & mask;
 4756              		.loc 1 98 2 view .LVU1343
  99:src/int.c     **** #else
 4757              		.loc 1 99 2 view .LVU1344
  98:src/int.c     **** 	return v & mask;
 4758              		.loc 1 98 14 is_stmt 0 view .LVU1345
 4759 001e 0121     		movs	r1, #1
 4760 0020 A6F12003 		sub	r3, r6, #32
 4761              	.LVL363:
  98:src/int.c     **** 	return v & mask;
 4762              		.loc 1 98 14 view .LVU1346
 4763 0024 C6F1200C 		rsb	ip, r6, #32
 4764 0028 01FA03F3 		lsl	r3, r1, r3
 4765 002c 21FA0CFC 		lsr	ip, r1, ip
 4766 0030 B140     		lsls	r1, r1, r6
  98:src/int.c     **** 	return v & mask;
 4767              		.loc 1 98 7 view .LVU1347
 4768 0032 11F1FF31 		adds	r1, r1, #-1
  98:src/int.c     **** 	return v & mask;
 4769              		.loc 1 98 14 view .LVU1348
 4770 0036 43EA0C03 		orr	r3, r3, ip
  98:src/int.c     **** 	return v & mask;
 4771              		.loc 1 98 7 view .LVU1349
 4772 003a 43F1FF33 		adc	r3, r3, #-1
  99:src/int.c     **** #else
 4773              		.loc 1 99 11 view .LVU1350
 4774 003e 2B40     		ands	r3, r3, r5
 4775 0040 2140     		ands	r1, r1, r4
 4776 0042 0C46     		mov	r4, r1
 4777              	.LVL364:
  99:src/int.c     **** #else
ARM GAS  /tmp/ccl34fCK.s 			page 132


 4778              		.loc 1 99 11 view .LVU1351
 4779 0044 1D46     		mov	r5, r3
 4780              	.LVL365:
 4781              	.L280:
  99:src/int.c     **** #else
 4782              		.loc 1 99 11 view .LVU1352
 4783              	.LBE1081:
 4784              	.LBE1085:
 151:src/int.c     **** 		return v;
 4785              		.loc 1 151 2 is_stmt 1 view .LVU1353
 151:src/int.c     **** 		return v;
 4786              		.loc 1 151 5 is_stmt 0 view .LVU1354
 4787 0046 B2B1     		cbz	r2, .L279
 151:src/int.c     **** 		return v;
 4788              		.loc 1 151 16 discriminator 1 view .LVU1355
 4789 0048 0228     		cmp	r0, #2
 4790 004a 14D0     		beq	.L279
 154:src/int.c     **** 		return mask_value(-(signed long long int)v);
 4791              		.loc 1 154 2 is_stmt 1 view .LVU1356
 154:src/int.c     **** 		return mask_value(-(signed long long int)v);
 4792              		.loc 1 154 5 is_stmt 0 view .LVU1357
 4793 004c B8B1     		cbz	r0, .L293
 156:src/int.c     **** 		return mask_value(~v);
 4794              		.loc 1 156 2 is_stmt 1 view .LVU1358
 156:src/int.c     **** 		return mask_value(~v);
 4795              		.loc 1 156 5 is_stmt 0 view .LVU1359
 4796 004e 0128     		cmp	r0, #1
 4797 0050 32D0     		beq	.L294
 158:src/int.c     **** #else
 4798              		.loc 1 158 2 is_stmt 1 view .LVU1360
 4799              	.LBB1086:
 4800              	.LBI1086:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 4801              		.loc 1 109 22 view .LVU1361
 4802              	.LBB1087:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 4803              		.loc 1 110 2 view .LVU1362
 4804              	.LBB1088:
 4805              	.LBI1088:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 4806              		.loc 1 42 14 view .LVU1363
 4807              	.LBB1089:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4808              		.loc 1 43 2 view .LVU1364
 4809              	.LVL366:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4810              		.loc 1 44 2 view .LVU1365
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4811              		.loc 1 44 5 is_stmt 0 view .LVU1366
 4812 0052 3E2F     		cmp	r7, #62
 4813 0054 4CD8     		bhi	.L285
 4814 0056 0122     		movs	r2, #1
 4815              	.LVL367:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4816              		.loc 1 44 5 view .LVU1367
 4817 0058 A7F12003 		sub	r3, r7, #32
 4818 005c C7F12001 		rsb	r1, r7, #32
ARM GAS  /tmp/ccl34fCK.s 			page 133


 4819 0060 02FA03F3 		lsl	r3, r2, r3
 4820 0064 22FA01F1 		lsr	r1, r2, r1
 4821 0068 0B43     		orrs	r3, r3, r1
 4822 006a 02FA07F7 		lsl	r7, r2, r7
 4823              	.L284:
 4824              	.LVL368:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4825              		.loc 1 44 5 view .LVU1368
 4826              	.LBE1089:
 4827              	.LBE1088:
 111:src/int.c     **** 	return bit;
 4828              		.loc 1 111 2 is_stmt 1 view .LVU1369
 112:src/int.c     **** }
 4829              		.loc 1 112 2 view .LVU1370
 112:src/int.c     **** }
 4830              		.loc 1 112 2 is_stmt 0 view .LVU1371
 4831              	.LBE1087:
 4832              	.LBE1086:
 158:src/int.c     **** #else
 4833              		.loc 1 158 11 view .LVU1372
 4834 006e 2743     		orrs	r7, r7, r4
 4835 0070 2B43     		orrs	r3, r3, r5
 4836 0072 3C46     		mov	r4, r7
 4837              	.LVL369:
 158:src/int.c     **** #else
 4838              		.loc 1 158 11 view .LVU1373
 4839 0074 1D46     		mov	r5, r3
 4840              	.L279:
 162:src/int.c     **** 
 4841              		.loc 1 162 1 view .LVU1374
 4842 0076 2046     		mov	r0, r4
 4843 0078 2946     		mov	r1, r5
 4844 007a F0BC     		pop	{r4, r5, r6, r7}
 4845              		.cfi_remember_state
 4846              		.cfi_restore 7
 4847              		.cfi_restore 6
 4848              		.cfi_restore 5
 4849              		.cfi_restore 4
 4850              		.cfi_def_cfa_offset 0
 4851 007c 7047     		bx	lr
 4852              	.LVL370:
 4853              	.L293:
 4854              		.cfi_restore_state
 155:src/int.c     **** 	if (mode == MODE_1COMP)
 4855              		.loc 1 155 3 is_stmt 1 view .LVU1375
 155:src/int.c     **** 	if (mode == MODE_1COMP)
 4856              		.loc 1 155 10 is_stmt 0 view .LVU1376
 4857 007e 6442     		rsbs	r4, r4, #0
 4858              	.LVL371:
 155:src/int.c     **** 	if (mode == MODE_1COMP)
 4859              		.loc 1 155 10 view .LVU1377
 4860 0080 65EB4505 		sbc	r5, r5, r5, lsl #1
 4861              	.LVL372:
 4862              	.LBB1093:
 4863              	.LBI1093:
  91:src/int.c     **** #ifndef TINY_BUILD
 4864              		.loc 1 91 15 is_stmt 1 view .LVU1378
ARM GAS  /tmp/ccl34fCK.s 			page 134


 4865              	.LBB1094:
  93:src/int.c     **** 	long long int mask;
 4866              		.loc 1 93 2 view .LVU1379
 4867              	.LBB1095:
 4868              	.LBI1095:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 4869              		.loc 1 42 14 view .LVU1380
 4870              	.LBB1096:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4871              		.loc 1 43 2 view .LVU1381
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4872              		.loc 1 44 2 view .LVU1382
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4873              		.loc 1 44 5 is_stmt 0 view .LVU1383
 4874 0084 3E2F     		cmp	r7, #62
 4875 0086 F6D8     		bhi	.L279
 4876              	.LVL373:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4877              		.loc 1 44 5 view .LVU1384
 4878              	.LBE1096:
 4879              	.LBE1095:
  94:src/int.c     **** 
 4880              		.loc 1 94 2 is_stmt 1 view .LVU1385
  96:src/int.c     **** 		return v;
 4881              		.loc 1 96 2 view .LVU1386
  98:src/int.c     **** 	return v & mask;
 4882              		.loc 1 98 2 view .LVU1387
  99:src/int.c     **** #else
 4883              		.loc 1 99 2 view .LVU1388
  98:src/int.c     **** 	return v & mask;
 4884              		.loc 1 98 14 is_stmt 0 view .LVU1389
 4885 0088 0123     		movs	r3, #1
 4886 008a A6F12002 		sub	r2, r6, #32
 4887              	.LVL374:
  98:src/int.c     **** 	return v & mask;
 4888              		.loc 1 98 14 view .LVU1390
 4889 008e C6F12001 		rsb	r1, r6, #32
 4890 0092 23FA01F1 		lsr	r1, r3, r1
 4891 0096 03FA02F2 		lsl	r2, r3, r2
 4892 009a 03FA06F6 		lsl	r6, r3, r6
 4893 009e 0A43     		orrs	r2, r2, r1
  98:src/int.c     **** 	return v & mask;
 4894              		.loc 1 98 7 view .LVU1391
 4895 00a0 16F1FF36 		adds	r6, r6, #-1
 4896 00a4 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 4897              		.loc 1 99 11 view .LVU1392
 4898 00a8 2640     		ands	r6, r6, r4
 4899 00aa 2A40     		ands	r2, r2, r5
 4900 00ac 3446     		mov	r4, r6
 4901              	.LVL375:
  99:src/int.c     **** #else
 4902              		.loc 1 99 11 view .LVU1393
 4903 00ae 1546     		mov	r5, r2
 4904              	.LBE1094:
 4905              	.LBE1093:
 162:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 135


 4906              		.loc 1 162 1 view .LVU1394
 4907 00b0 2046     		mov	r0, r4
 4908 00b2 2946     		mov	r1, r5
 4909 00b4 F0BC     		pop	{r4, r5, r6, r7}
 4910              		.cfi_remember_state
 4911              		.cfi_restore 7
 4912              		.cfi_restore 6
 4913              		.cfi_restore 5
 4914              		.cfi_restore 4
 4915              		.cfi_def_cfa_offset 0
 4916 00b6 7047     		bx	lr
 4917              	.LVL376:
 4918              	.L294:
 4919              		.cfi_restore_state
 157:src/int.c     **** 	return v | topbit_mask();
 4920              		.loc 1 157 3 is_stmt 1 view .LVU1395
 157:src/int.c     **** 	return v | topbit_mask();
 4921              		.loc 1 157 10 is_stmt 0 view .LVU1396
 4922 00b8 E243     		mvns	r2, r4
 4923              	.LVL377:
 157:src/int.c     **** 	return v | topbit_mask();
 4924              		.loc 1 157 10 view .LVU1397
 4925 00ba EB43     		mvns	r3, r5
 4926              	.LBB1097:
 4927              	.LBB1098:
 4928              	.LBB1099:
 4929              	.LBB1100:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4930              		.loc 1 44 5 view .LVU1398
 4931 00bc 3E2F     		cmp	r7, #62
 4932              	.LBE1100:
 4933              	.LBE1099:
 4934              	.LBE1098:
 4935              	.LBE1097:
 157:src/int.c     **** 	return v | topbit_mask();
 4936              		.loc 1 157 10 view .LVU1399
 4937 00be 1446     		mov	r4, r2
 4938              	.LVL378:
 157:src/int.c     **** 	return v | topbit_mask();
 4939              		.loc 1 157 10 view .LVU1400
 4940 00c0 1D46     		mov	r5, r3
 4941              	.LVL379:
 4942              	.LBB1104:
 4943              	.LBI1097:
  91:src/int.c     **** #ifndef TINY_BUILD
 4944              		.loc 1 91 15 is_stmt 1 view .LVU1401
 4945              	.LBB1103:
  93:src/int.c     **** 	long long int mask;
 4946              		.loc 1 93 2 view .LVU1402
 4947              	.LBB1102:
 4948              	.LBI1099:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 4949              		.loc 1 42 14 view .LVU1403
 4950              	.LBB1101:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 4951              		.loc 1 43 2 view .LVU1404
  44:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccl34fCK.s 			page 136


 4952              		.loc 1 44 2 view .LVU1405
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4953              		.loc 1 44 5 is_stmt 0 view .LVU1406
 4954 00c2 D8D8     		bhi	.L279
 4955              	.LVL380:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 4956              		.loc 1 44 5 view .LVU1407
 4957              	.LBE1101:
 4958              	.LBE1102:
  94:src/int.c     **** 
 4959              		.loc 1 94 2 is_stmt 1 view .LVU1408
  96:src/int.c     **** 		return v;
 4960              		.loc 1 96 2 view .LVU1409
  98:src/int.c     **** 	return v & mask;
 4961              		.loc 1 98 2 view .LVU1410
  99:src/int.c     **** #else
 4962              		.loc 1 99 2 view .LVU1411
  98:src/int.c     **** 	return v & mask;
 4963              		.loc 1 98 14 is_stmt 0 view .LVU1412
 4964 00c4 A6F12003 		sub	r3, r6, #32
 4965 00c8 C6F12002 		rsb	r2, r6, #32
 4966 00cc 00FA03F3 		lsl	r3, r0, r3
 4967 00d0 20FA02F2 		lsr	r2, r0, r2
 4968 00d4 00FA06F6 		lsl	r6, r0, r6
  98:src/int.c     **** 	return v & mask;
 4969              		.loc 1 98 7 view .LVU1413
 4970 00d8 16F1FF36 		adds	r6, r6, #-1
  98:src/int.c     **** 	return v & mask;
 4971              		.loc 1 98 14 view .LVU1414
 4972 00dc 43EA0203 		orr	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 4973              		.loc 1 98 7 view .LVU1415
 4974 00e0 43F1FF33 		adc	r3, r3, #-1
  99:src/int.c     **** #else
 4975              		.loc 1 99 11 view .LVU1416
 4976 00e4 2B40     		ands	r3, r3, r5
 4977 00e6 06EA0400 		and	r0, r6, r4
 4978 00ea 0446     		mov	r4, r0
 4979              	.LVL381:
  99:src/int.c     **** #else
 4980              		.loc 1 99 11 view .LVU1417
 4981 00ec 1D46     		mov	r5, r3
 4982 00ee C2E7     		b	.L279
 4983              	.LVL382:
 4984              	.L285:
  99:src/int.c     **** #else
 4985              		.loc 1 99 11 view .LVU1418
 4986              	.LBE1103:
 4987              	.LBE1104:
 4988              	.LBB1105:
 4989              	.LBB1092:
 4990              	.LBB1091:
 4991              	.LBB1090:
 4992 00f0 0027     		movs	r7, #0
 4993 00f2 4FF00043 		mov	r3, #-2147483648
 4994 00f6 BAE7     		b	.L284
 4995              	.L296:
ARM GAS  /tmp/ccl34fCK.s 			page 137


 4996              		.align	2
 4997              	.L295:
 4998 00f8 00000000 		.word	PersistentRam
 4999              	.LBE1090:
 5000              	.LBE1091:
 5001              	.LBE1092:
 5002              	.LBE1105:
 5003              		.cfi_endproc
 5004              	.LFE13:
 5006              		.section	.text.check_overflow,"ax",%progbits
 5007              		.align	1
 5008              		.p2align 2,,3
 5009              		.global	check_overflow
 5010              		.syntax unified
 5011              		.thumb
 5012              		.thumb_func
 5013              		.fpu fpv4-sp-d16
 5015              	check_overflow:
 5016              	.LVL383:
 5017              	.LFB14:
 166:src/int.c     **** 	return mask_value(x) != x ||
 5018              		.loc 1 166 37 is_stmt 1 view -0
 5019              		.cfi_startproc
 5020              		@ args = 0, pretend = 0, frame = 0
 5021              		@ frame_needed = 0, uses_anonymous_args = 0
 167:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5022              		.loc 1 167 2 view .LVU1420
 5023              	.LBB1106:
 5024              	.LBB1107:
 5025              	.LBB1108:
 5026              	.LBB1109:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5027              		.loc 1 43 26 is_stmt 0 view .LVU1421
 5028 0000 DFF89CC0 		ldr	ip, .L308
 5029 0004 9CF8E927 		ldrb	r2, [ip, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5030              		.loc 1 43 15 view .LVU1422
 5031 0008 02F03F02 		and	r2, r2, #63
 5032              	.LBE1109:
 5033              	.LBE1108:
 5034              	.LBE1107:
 5035              	.LBE1106:
 166:src/int.c     **** 	return mask_value(x) != x ||
 5036              		.loc 1 166 37 view .LVU1423
 5037 000c F0B5     		push	{r4, r5, r6, r7, lr}
 5038              		.cfi_def_cfa_offset 20
 5039              		.cfi_offset 4, -20
 5040              		.cfi_offset 5, -16
 5041              		.cfi_offset 6, -12
 5042              		.cfi_offset 7, -8
 5043              		.cfi_offset 14, -4
 5044              	.LBB1117:
 5045              	.LBB1114:
 5046              	.LBB1112:
 5047              	.LBB1110:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5048              		.loc 1 44 26 view .LVU1424
ARM GAS  /tmp/ccl34fCK.s 			page 138


 5049 000e 02F1FF3E 		add	lr, r2, #-1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5050              		.loc 1 44 5 view .LVU1425
 5051 0012 BEF13E0F 		cmp	lr, #62
 5052              	.LBE1110:
 5053              	.LBE1112:
 5054              	.LBE1114:
 5055              	.LBE1117:
 166:src/int.c     **** 	return mask_value(x) != x ||
 5056              		.loc 1 166 37 view .LVU1426
 5057 0016 0446     		mov	r4, r0
 5058 0018 0D46     		mov	r5, r1
 5059              	.LVL384:
 5060              	.LBB1118:
 5061              	.LBI1106:
  91:src/int.c     **** #ifndef TINY_BUILD
 5062              		.loc 1 91 15 is_stmt 1 view .LVU1427
 5063              	.LBB1115:
  93:src/int.c     **** 	long long int mask;
 5064              		.loc 1 93 2 view .LVU1428
 5065              	.LBB1113:
 5066              	.LBI1108:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 5067              		.loc 1 42 14 view .LVU1429
 5068              	.LBB1111:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5069              		.loc 1 43 2 view .LVU1430
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5070              		.loc 1 44 2 view .LVU1431
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5071              		.loc 1 44 5 is_stmt 0 view .LVU1432
 5072 001a 1BD8     		bhi	.L298
 5073              	.LVL385:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5074              		.loc 1 44 5 view .LVU1433
 5075              	.LBE1111:
 5076              	.LBE1113:
  94:src/int.c     **** 
 5077              		.loc 1 94 2 is_stmt 1 view .LVU1434
  96:src/int.c     **** 		return v;
 5078              		.loc 1 96 2 view .LVU1435
  98:src/int.c     **** 	return v & mask;
 5079              		.loc 1 98 2 view .LVU1436
  99:src/int.c     **** #else
 5080              		.loc 1 99 2 view .LVU1437
  98:src/int.c     **** 	return v & mask;
 5081              		.loc 1 98 14 is_stmt 0 view .LVU1438
 5082 001c 0120     		movs	r0, #1
 5083              	.LVL386:
  98:src/int.c     **** 	return v & mask;
 5084              		.loc 1 98 14 view .LVU1439
 5085 001e A2F12003 		sub	r3, r2, #32
 5086 0022 C2F12006 		rsb	r6, r2, #32
 5087 0026 20FA06F6 		lsr	r6, r0, r6
 5088 002a 00FA03F3 		lsl	r3, r0, r3
 5089 002e 00FA02F1 		lsl	r1, r0, r2
  98:src/int.c     **** 	return v & mask;
ARM GAS  /tmp/ccl34fCK.s 			page 139


 5090              		.loc 1 98 7 view .LVU1440
 5091 0032 11F1FF31 		adds	r1, r1, #-1
  98:src/int.c     **** 	return v & mask;
 5092              		.loc 1 98 14 view .LVU1441
 5093 0036 43EA0603 		orr	r3, r3, r6
  98:src/int.c     **** 	return v & mask;
 5094              		.loc 1 98 7 view .LVU1442
 5095 003a 43F1FF33 		adc	r3, r3, #-1
  99:src/int.c     **** #else
 5096              		.loc 1 99 11 view .LVU1443
 5097 003e 03EA0507 		and	r7, r3, r5
 5098 0042 01EA0406 		and	r6, r1, r4
 5099              	.LBE1115:
 5100              	.LBE1118:
 167:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5101              		.loc 1 167 28 view .LVU1444
 5102 0046 BD42     		cmp	r5, r7
 5103 0048 08BF     		it	eq
 5104 004a B442     		cmpeq	r4, r6
 5105              	.LBB1119:
 5106              	.LBB1116:
  98:src/int.c     **** 	return v & mask;
 5107              		.loc 1 98 14 view .LVU1445
 5108 004c 4FF00003 		mov	r3, #0
 5109              	.LBE1116:
 5110              	.LBE1119:
 167:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5111              		.loc 1 167 28 view .LVU1446
 5112 0050 0BD0     		beq	.L307
 5113              	.L297:
 169:src/int.c     **** 
 5114              		.loc 1 169 1 view .LVU1447
 5115 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
 5116              	.LVL387:
 5117              	.L298:
 5118              	.LBB1120:
 5119              	.LBI1120:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5120              		.loc 1 38 23 is_stmt 1 view .LVU1448
 5121              	.LBB1121:
  39:src/int.c     **** }
 5122              		.loc 1 39 2 view .LVU1449
  39:src/int.c     **** }
 5123              		.loc 1 39 39 is_stmt 0 view .LVU1450
 5124 0054 9CF8E837 		ldrb	r3, [ip, #2024]	@ zero_extendqisi2
 5125              	.LBE1121:
 5126              	.LBE1120:
 167:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5127              		.loc 1 167 28 view .LVU1451
 5128 0058 C3F38103 		ubfx	r3, r3, #2, #2
 5129 005c 022B     		cmp	r3, #2
 5130 005e 4FF00000 		mov	r0, #0
 5131              	.LVL388:
 167:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5132              		.loc 1 167 28 view .LVU1452
 5133 0062 F6D0     		beq	.L297
 5134 0064 4FF00042 		mov	r2, #-2147483648
ARM GAS  /tmp/ccl34fCK.s 			page 140


 5135 0068 11E0     		b	.L302
 5136              	.L307:
 5137              	.LBB1123:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5138              		.loc 1 38 23 is_stmt 1 view .LVU1453
 5139              	.LBB1122:
  39:src/int.c     **** }
 5140              		.loc 1 39 2 view .LVU1454
  39:src/int.c     **** }
 5141              		.loc 1 39 39 is_stmt 0 view .LVU1455
 5142 006a 9CF8E817 		ldrb	r1, [ip, #2024]	@ zero_extendqisi2
 5143              	.LBE1122:
 5144              	.LBE1123:
 167:src/int.c     **** 		(int_mode() != MODE_UNSIGNED && (x & topbit_mask()) != 0);
 5145              		.loc 1 167 28 view .LVU1456
 5146 006e C1F38101 		ubfx	r1, r1, #2, #2
 5147 0072 0229     		cmp	r1, #2
 5148 0074 08BF     		it	eq
 5149 0076 1846     		moveq	r0, r3
 5150 0078 EBD0     		beq	.L297
 5151 007a 213A     		subs	r2, r2, #33
 5152 007c CEF12003 		rsb	r3, lr, #32
 5153 0080 00FA02F2 		lsl	r2, r0, r2
 5154 0084 20FA03F3 		lsr	r3, r0, r3
 5155 0088 1A43     		orrs	r2, r2, r3
 5156 008a 00FA0EF0 		lsl	r0, r0, lr
 5157              	.L302:
 111:src/int.c     **** 	return bit;
 5158              		.loc 1 111 2 is_stmt 1 view .LVU1457
 5159              	.LVL389:
 112:src/int.c     **** }
 5160              		.loc 1 112 2 view .LVU1458
 168:src/int.c     **** }
 5161              		.loc 1 168 38 is_stmt 0 view .LVU1459
 5162 008e 2040     		ands	r0, r0, r4
 5163 0090 2A40     		ands	r2, r2, r5
 168:src/int.c     **** }
 5164              		.loc 1 168 32 view .LVU1460
 5165 0092 50EA0203 		orrs	r3, r0, r2
 5166 0096 14BF     		ite	ne
 5167 0098 0120     		movne	r0, #1
 5168 009a 0020     		moveq	r0, #0
 169:src/int.c     **** 
 5169              		.loc 1 169 1 view .LVU1461
 5170 009c F0BD     		pop	{r4, r5, r6, r7, pc}
 5171              	.L309:
 5172 009e 00BF     		.align	2
 5173              	.L308:
 5174 00a0 00000000 		.word	PersistentRam
 5175              		.cfi_endproc
 5176              	.LFE14:
 5178              		.section	.text.intAdd,"ax",%progbits
 5179              		.align	1
 5180              		.p2align 2,,3
 5181              		.global	intAdd
 5182              		.syntax unified
 5183              		.thumb
ARM GAS  /tmp/ccl34fCK.s 			page 141


 5184              		.thumb_func
 5185              		.fpu fpv4-sp-d16
 5187              	intAdd:
 5188              	.LVL390:
 5189              	.LFB16:
 218:src/int.c     **** #ifndef TINY_BUILD
 5190              		.loc 1 218 56 is_stmt 1 view -0
 5191              		.cfi_startproc
 5192              		@ args = 0, pretend = 0, frame = 24
 5193              		@ frame_needed = 0, uses_anonymous_args = 0
 220:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 5194              		.loc 1 220 2 view .LVU1463
 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5195              		.loc 1 221 2 view .LVU1464
 218:src/int.c     **** #ifndef TINY_BUILD
 5196              		.loc 1 218 56 is_stmt 0 view .LVU1465
 5197 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5198              		.cfi_def_cfa_offset 36
 5199              		.cfi_offset 4, -36
 5200              		.cfi_offset 5, -32
 5201              		.cfi_offset 6, -28
 5202              		.cfi_offset 7, -24
 5203              		.cfi_offset 8, -20
 5204              		.cfi_offset 9, -16
 5205              		.cfi_offset 10, -12
 5206              		.cfi_offset 11, -8
 5207              		.cfi_offset 14, -4
 5208 0004 89B0     		sub	sp, sp, #36
 5209              		.cfi_def_cfa_offset 72
 218:src/int.c     **** #ifndef TINY_BUILD
 5210              		.loc 1 218 56 view .LVU1466
 5211 0006 0446     		mov	r4, r0
 5212 0008 0D46     		mov	r5, r1
 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5213              		.loc 1 221 30 view .LVU1467
 5214 000a 1046     		mov	r0, r2
 5215              	.LVL391:
 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5216              		.loc 1 221 30 view .LVU1468
 5217 000c 1946     		mov	r1, r3
 218:src/int.c     **** #ifndef TINY_BUILD
 5218              		.loc 1 218 56 view .LVU1469
 5219 000e 9046     		mov	r8, r2
 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5220              		.loc 1 221 30 view .LVU1470
 5221 0010 06AA     		add	r2, sp, #24
 5222              	.LVL392:
 218:src/int.c     **** #ifndef TINY_BUILD
 5223              		.loc 1 218 56 view .LVU1471
 5224 0012 9946     		mov	r9, r3
 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5225              		.loc 1 221 30 view .LVU1472
 5226 0014 FFF7FEFF 		bl	extract_value
 5227              	.LVL393:
 222:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5228              		.loc 1 222 30 view .LVU1473
 5229 0018 07AA     		add	r2, sp, #28
ARM GAS  /tmp/ccl34fCK.s 			page 142


 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5230              		.loc 1 221 30 view .LVU1474
 5231 001a 8446     		mov	ip, r0
 5232 001c 0B46     		mov	r3, r1
 222:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5233              		.loc 1 222 30 view .LVU1475
 5234 001e 2046     		mov	r0, r4
 5235 0020 2946     		mov	r1, r5
 221:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5236              		.loc 1 221 30 view .LVU1476
 5237 0022 CDE902C3 		strd	ip, r3, [sp, #8]
 5238              	.LVL394:
 222:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5239              		.loc 1 222 2 is_stmt 1 view .LVU1477
 222:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5240              		.loc 1 222 30 is_stmt 0 view .LVU1478
 5241 0026 FFF7FEFF 		bl	extract_value
 5242              	.LVL395:
 5243              	.LBB1124:
 5244              	.LBB1125:
  39:src/int.c     **** }
 5245              		.loc 1 39 39 view .LVU1479
 5246 002a DFF89CB1 		ldr	fp, .L340
 5247              	.LBE1125:
 5248              	.LBE1124:
 222:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5249              		.loc 1 222 30 view .LVU1480
 5250 002e 0246     		mov	r2, r0
 5251 0030 0B46     		mov	r3, r1
 5252              	.LBB1128:
 5253              	.LBB1129:
  71:src/int.c     **** #endif
 5254              		.loc 1 71 3 view .LVU1481
 5255 0032 6920     		movs	r0, #105
 5256 0034 5221     		movs	r1, #82
 5257              	.LBE1129:
 5258              	.LBE1128:
 222:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5259              		.loc 1 222 30 view .LVU1482
 5260 0036 CDE90423 		strd	r2, r3, [sp, #16]
 5261              	.LVL396:
 223:src/int.c     **** 	long long int v;
 5262              		.loc 1 223 2 is_stmt 1 view .LVU1483
 5263              	.LBB1132:
 5264              	.LBI1124:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5265              		.loc 1 38 23 view .LVU1484
 5266              	.LBB1126:
  39:src/int.c     **** }
 5267              		.loc 1 39 2 view .LVU1485
  39:src/int.c     **** }
 5268              		.loc 1 39 39 is_stmt 0 view .LVU1486
 5269 003a 9BF8E8A7 		ldrb	r10, [fp, #2024]	@ zero_extendqisi2
 5270              	.LBE1126:
 5271              	.LBE1132:
 5272              	.LBB1133:
 5273              	.LBB1130:
ARM GAS  /tmp/ccl34fCK.s 			page 143


  71:src/int.c     **** #endif
 5274              		.loc 1 71 3 view .LVU1487
 5275 003e FFF7FEFF 		bl	cmdflag
 5276              	.LVL397:
  71:src/int.c     **** #endif
 5277              		.loc 1 71 3 view .LVU1488
 5278              	.LBE1130:
 5279              	.LBE1133:
 228:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 5280              		.loc 1 228 5 view .LVU1489
 5281 0042 DDE90632 		ldrd	r3, r2, [sp, #24]
 5282 0046 9342     		cmp	r3, r2
 5283              	.LBB1134:
 5284              	.LBB1127:
  39:src/int.c     **** }
 5285              		.loc 1 39 9 view .LVU1490
 5286 0048 CAF3810A 		ubfx	r10, r10, #2, #2
 5287              	.LVL398:
  39:src/int.c     **** }
 5288              		.loc 1 39 9 view .LVU1491
 5289              	.LBE1127:
 5290              	.LBE1134:
 224:src/int.c     **** 	int overflow;
 5291              		.loc 1 224 2 is_stmt 1 view .LVU1492
 225:src/int.c     **** 
 5292              		.loc 1 225 2 view .LVU1493
 227:src/int.c     **** 	if (sx == sy)
 5293              		.loc 1 227 2 view .LVU1494
 5294              	.LBB1135:
 5295              	.LBI1128:
  66:src/int.c     **** #ifndef TINY_BUILD
 5296              		.loc 1 66 6 view .LVU1495
 5297              	.LBB1131:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 5298              		.loc 1 68 2 view .LVU1496
  71:src/int.c     **** #endif
 5299              		.loc 1 71 3 view .LVU1497
  71:src/int.c     **** #endif
 5300              		.loc 1 71 3 is_stmt 0 view .LVU1498
 5301              	.LBE1131:
 5302              	.LBE1135:
 228:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 5303              		.loc 1 228 2 is_stmt 1 view .LVU1499
 228:src/int.c     **** 		overflow = calc_overflow(xv, yv, mode, sx);
 5304              		.loc 1 228 5 is_stmt 0 view .LVU1500
 5305 004c 00F0A680 		beq	.L336
 231:src/int.c     **** 
 5306              		.loc 1 231 12 view .LVU1501
 5307 0050 0022     		movs	r2, #0
 5308              	.L311:
 5309              	.LVL399:
 233:src/int.c     **** 		const long long int tbm = topbit_mask();
 5310              		.loc 1 233 2 is_stmt 1 view .LVU1502
 233:src/int.c     **** 		const long long int tbm = topbit_mask();
 5311              		.loc 1 233 5 is_stmt 0 view .LVU1503
 5312 0052 BAF1030F 		cmp	r10, #3
 5313 0056 57D0     		beq	.L337
ARM GAS  /tmp/ccl34fCK.s 			page 144


 5314              	.LBB1136:
 244:src/int.c     **** 		const unsigned long long int u = mask_value(y + x);
 5315              		.loc 1 244 3 is_stmt 1 view .LVU1504
 245:src/int.c     **** 
 5316              		.loc 1 245 3 view .LVU1505
 5317              	.LBB1137:
 5318              	.LBB1138:
 5319              	.LBB1139:
 5320              	.LBB1140:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5321              		.loc 1 43 26 is_stmt 0 view .LVU1506
 5322 0058 9BF8E937 		ldrb	r3, [fp, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5323              		.loc 1 43 15 view .LVU1507
 5324 005c 03F03F01 		and	r1, r3, #63
 5325              	.LBE1140:
 5326              	.LBE1139:
 5327              	.LBE1138:
 5328              	.LBE1137:
 245:src/int.c     **** 
 5329              		.loc 1 245 36 view .LVU1508
 5330 0060 18EB0406 		adds	r6, r8, r4
 5331              	.LBB1149:
 5332              	.LBB1145:
 5333              	.LBB1143:
 5334              	.LBB1141:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5335              		.loc 1 44 26 view .LVU1509
 5336 0064 01F1FF33 		add	r3, r1, #-1
 5337              	.LBE1141:
 5338              	.LBE1143:
 5339              	.LBE1145:
 5340              	.LBE1149:
 245:src/int.c     **** 
 5341              		.loc 1 245 36 view .LVU1510
 5342 0068 49EB0507 		adc	r7, r9, r5
 5343              	.LVL400:
 5344              	.LBB1150:
 5345              	.LBI1137:
  91:src/int.c     **** #ifndef TINY_BUILD
 5346              		.loc 1 91 15 is_stmt 1 view .LVU1511
 5347              	.LBB1146:
  93:src/int.c     **** 	long long int mask;
 5348              		.loc 1 93 2 view .LVU1512
 5349              	.LBB1144:
 5350              	.LBI1139:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 5351              		.loc 1 42 14 view .LVU1513
 5352              	.LBB1142:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5353              		.loc 1 43 2 view .LVU1514
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5354              		.loc 1 44 2 view .LVU1515
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5355              		.loc 1 44 5 is_stmt 0 view .LVU1516
 5356 006c 3E2B     		cmp	r3, #62
 5357 006e 00F2A380 		bhi	.L319
ARM GAS  /tmp/ccl34fCK.s 			page 145


 5358              	.LVL401:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5359              		.loc 1 44 5 view .LVU1517
 5360              	.LBE1142:
 5361              	.LBE1144:
  94:src/int.c     **** 
 5362              		.loc 1 94 2 is_stmt 1 view .LVU1518
  96:src/int.c     **** 		return v;
 5363              		.loc 1 96 2 view .LVU1519
  98:src/int.c     **** 	return v & mask;
 5364              		.loc 1 98 2 view .LVU1520
  98:src/int.c     **** 	return v & mask;
 5365              		.loc 1 98 14 is_stmt 0 view .LVU1521
 5366 0072 0123     		movs	r3, #1
 5367 0074 A1F12002 		sub	r2, r1, #32
 5368 0078 C1F12000 		rsb	r0, r1, #32
 5369 007c 23FA00F0 		lsr	r0, r3, r0
 5370 0080 03FA02F2 		lsl	r2, r3, r2
 5371 0084 8B40     		lsls	r3, r3, r1
  98:src/int.c     **** 	return v & mask;
 5372              		.loc 1 98 7 view .LVU1522
 5373 0086 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 5374              		.loc 1 98 14 view .LVU1523
 5375 008a 42EA0002 		orr	r2, r2, r0
  98:src/int.c     **** 	return v & mask;
 5376              		.loc 1 98 7 view .LVU1524
 5377 008e 42F1FF32 		adc	r2, r2, #-1
 5378              	.LVL402:
  99:src/int.c     **** #else
 5379              		.loc 1 99 2 is_stmt 1 view .LVU1525
  99:src/int.c     **** #else
 5380              		.loc 1 99 2 is_stmt 0 view .LVU1526
 5381              	.LBE1146:
 5382              	.LBE1150:
 5383              	.LBB1151:
 5384              	.LBB1152:
  99:src/int.c     **** #else
 5385              		.loc 1 99 11 view .LVU1527
 5386 0092 05EA020C 		and	ip, r5, r2
 5387 0096 04EA030E 		and	lr, r4, r3
 5388              	.LBE1152:
 5389              	.LBE1151:
 5390              	.LBB1157:
 5391              	.LBB1147:
 5392 009a 06EA0300 		and	r0, r6, r3
 5393              	.LBE1147:
 5394              	.LBE1157:
 5395              	.LBB1158:
 5396              	.LBB1153:
 5397 009e 7446     		mov	r4, lr
 5398 00a0 6546     		mov	r5, ip
 5399              	.LBE1153:
 5400              	.LBE1158:
 5401              	.LBB1159:
 5402              	.LBB1148:
 5403 00a2 07EA0201 		and	r1, r7, r2
ARM GAS  /tmp/ccl34fCK.s 			page 146


 5404              	.LVL403:
  99:src/int.c     **** #else
 5405              		.loc 1 99 11 view .LVU1528
 5406              	.LBE1148:
 5407              	.LBE1159:
 247:src/int.c     **** 			set_carry(1);
 5408              		.loc 1 247 3 is_stmt 1 view .LVU1529
 5409              	.LBB1160:
 5410              	.LBI1151:
  91:src/int.c     **** #ifndef TINY_BUILD
 5411              		.loc 1 91 15 view .LVU1530
 5412              	.LBB1154:
  93:src/int.c     **** 	long long int mask;
 5413              		.loc 1 93 2 view .LVU1531
 5414              	.LBE1154:
 5415              	.LBE1160:
 5416              	.LBE1136:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5417              		.loc 1 43 2 view .LVU1532
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5418              		.loc 1 44 2 view .LVU1533
 5419              	.LBB1167:
 5420              	.LBB1161:
 5421              	.LBB1155:
  94:src/int.c     **** 
 5422              		.loc 1 94 2 view .LVU1534
  96:src/int.c     **** 		return v;
 5423              		.loc 1 96 2 view .LVU1535
  98:src/int.c     **** 	return v & mask;
 5424              		.loc 1 98 2 view .LVU1536
  99:src/int.c     **** #else
 5425              		.loc 1 99 2 view .LVU1537
 5426              	.L323:
  99:src/int.c     **** #else
 5427              		.loc 1 99 2 is_stmt 0 view .LVU1538
 5428              	.LBE1155:
 5429              	.LBE1161:
 247:src/int.c     **** 			set_carry(1);
 5430              		.loc 1 247 6 view .LVU1539
 5431 00a6 A942     		cmp	r1, r5
 5432 00a8 08BF     		it	eq
 5433 00aa A042     		cmpeq	r0, r4
 5434 00ac 23D3     		bcc	.L338
 251:src/int.c     **** 			carry = 0;
 5435              		.loc 1 251 4 is_stmt 1 view .LVU1540
 5436              	.LVL404:
 5437              	.LBB1162:
 5438              	.LBI1162:
  53:src/int.c     **** #ifndef TINY_BUILD
 5439              		.loc 1 53 6 view .LVU1541
 5440              	.LBB1163:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5441              		.loc 1 55 2 view .LVU1542
  58:src/int.c     **** #endif
 5442              		.loc 1 58 3 view .LVU1543
 5443 00ae 5221     		movs	r1, #82
 5444 00b0 6A20     		movs	r0, #106
ARM GAS  /tmp/ccl34fCK.s 			page 147


 5445 00b2 FFF7FEFF 		bl	cmdflag
 5446              	.LVL405:
  58:src/int.c     **** #endif
 5447              		.loc 1 58 3 is_stmt 0 view .LVU1544
 5448              	.LBE1163:
 5449              	.LBE1162:
 252:src/int.c     **** 		}
 5450              		.loc 1 252 4 is_stmt 1 view .LVU1545
 255:src/int.c     **** 		if (carry && mode == MODE_1COMP)
 5451              		.loc 1 255 3 view .LVU1546
 256:src/int.c     **** 			v++;
 5452              		.loc 1 256 3 view .LVU1547
 5453              	.L318:
 256:src/int.c     **** 			v++;
 5454              		.loc 1 256 3 is_stmt 0 view .LVU1548
 5455              	.LBE1167:
 259:src/int.c     **** #else
 5456              		.loc 1 259 2 is_stmt 1 view .LVU1549
 5457              	.LBB1168:
 5458              	.LBI1168:
  91:src/int.c     **** #ifndef TINY_BUILD
 5459              		.loc 1 91 15 view .LVU1550
 5460              	.LBB1169:
  93:src/int.c     **** 	long long int mask;
 5461              		.loc 1 93 2 view .LVU1551
 5462              	.LBB1170:
 5463              	.LBI1170:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 5464              		.loc 1 42 14 view .LVU1552
 5465              	.LBB1171:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5466              		.loc 1 43 2 view .LVU1553
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5467              		.loc 1 43 26 is_stmt 0 view .LVU1554
 5468 00b6 9BF8E937 		ldrb	r3, [fp, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5469              		.loc 1 43 15 view .LVU1555
 5470 00ba 03F03F01 		and	r1, r3, #63
 5471              	.LVL406:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5472              		.loc 1 44 2 is_stmt 1 view .LVU1556
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5473              		.loc 1 44 26 is_stmt 0 view .LVU1557
 5474 00be 4B1E     		subs	r3, r1, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5475              		.loc 1 44 5 view .LVU1558
 5476 00c0 3E2B     		cmp	r3, #62
 5477 00c2 13D8     		bhi	.L310
 5478              	.LVL407:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5479              		.loc 1 44 5 view .LVU1559
 5480              	.LBE1171:
 5481              	.LBE1170:
  94:src/int.c     **** 
 5482              		.loc 1 94 2 is_stmt 1 view .LVU1560
  96:src/int.c     **** 		return v;
 5483              		.loc 1 96 2 view .LVU1561
ARM GAS  /tmp/ccl34fCK.s 			page 148


  98:src/int.c     **** 	return v & mask;
 5484              		.loc 1 98 2 view .LVU1562
  99:src/int.c     **** #else
 5485              		.loc 1 99 2 view .LVU1563
  98:src/int.c     **** 	return v & mask;
 5486              		.loc 1 98 14 is_stmt 0 view .LVU1564
 5487 00c4 0123     		movs	r3, #1
 5488 00c6 A1F12002 		sub	r2, r1, #32
 5489 00ca C1F12000 		rsb	r0, r1, #32
 5490 00ce 03FA02F2 		lsl	r2, r3, r2
 5491 00d2 23FA00F0 		lsr	r0, r3, r0
 5492 00d6 8B40     		lsls	r3, r3, r1
  98:src/int.c     **** 	return v & mask;
 5493              		.loc 1 98 7 view .LVU1565
 5494 00d8 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 5495              		.loc 1 98 14 view .LVU1566
 5496 00dc 42EA0002 		orr	r2, r2, r0
  98:src/int.c     **** 	return v & mask;
 5497              		.loc 1 98 7 view .LVU1567
 5498 00e0 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 5499              		.loc 1 99 11 view .LVU1568
 5500 00e4 3A40     		ands	r2, r2, r7
 5501 00e6 3340     		ands	r3, r3, r6
 5502 00e8 1E46     		mov	r6, r3
 5503              	.LVL408:
  99:src/int.c     **** #else
 5504              		.loc 1 99 11 view .LVU1569
 5505 00ea 1746     		mov	r7, r2
 5506              	.LVL409:
 5507              	.L310:
  99:src/int.c     **** #else
 5508              		.loc 1 99 11 view .LVU1570
 5509              	.LBE1169:
 5510              	.LBE1168:
 263:src/int.c     **** 
 5511              		.loc 1 263 1 view .LVU1571
 5512 00ec 3046     		mov	r0, r6
 5513 00ee 3946     		mov	r1, r7
 5514 00f0 09B0     		add	sp, sp, #36
 5515              		.cfi_remember_state
 5516              		.cfi_def_cfa_offset 36
 5517              		@ sp needed
 5518 00f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5519              	.LVL410:
 5520              	.L338:
 5521              		.cfi_restore_state
 5522              	.LBB1172:
 248:src/int.c     **** 			carry = 1;
 5523              		.loc 1 248 4 is_stmt 1 view .LVU1572
 5524              	.LBB1164:
 5525              	.LBI1164:
  53:src/int.c     **** #ifndef TINY_BUILD
 5526              		.loc 1 53 6 view .LVU1573
 5527              	.LBB1165:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
ARM GAS  /tmp/ccl34fCK.s 			page 149


 5528              		.loc 1 55 2 view .LVU1574
 5529 00f6 FFF7FEFF 		bl	set_carry.part.0
 5530              	.LVL411:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5531              		.loc 1 55 2 is_stmt 0 view .LVU1575
 5532              	.LBE1165:
 5533              	.LBE1164:
 249:src/int.c     **** 		} else {
 5534              		.loc 1 249 4 is_stmt 1 view .LVU1576
 255:src/int.c     **** 		if (carry && mode == MODE_1COMP)
 5535              		.loc 1 255 3 view .LVU1577
 256:src/int.c     **** 			v++;
 5536              		.loc 1 256 3 view .LVU1578
 256:src/int.c     **** 			v++;
 5537              		.loc 1 256 13 is_stmt 0 view .LVU1579
 5538 00fa BAF1010F 		cmp	r10, #1
 5539 00fe DAD1     		bne	.L318
 257:src/int.c     **** 	}
 5540              		.loc 1 257 4 is_stmt 1 view .LVU1580
 257:src/int.c     **** 	}
 5541              		.loc 1 257 5 is_stmt 0 view .LVU1581
 5542 0100 0136     		adds	r6, r6, #1
 5543              	.LVL412:
 257:src/int.c     **** 	}
 5544              		.loc 1 257 5 view .LVU1582
 5545 0102 47F10007 		adc	r7, r7, #0
 5546              	.LVL413:
 257:src/int.c     **** 	}
 5547              		.loc 1 257 5 view .LVU1583
 5548 0106 D6E7     		b	.L318
 5549              	.LVL414:
 5550              	.L337:
 257:src/int.c     **** 	}
 5551              		.loc 1 257 5 view .LVU1584
 5552              	.LBE1172:
 5553              	.LBB1173:
 234:src/int.c     **** 		const long long int x2 = (x & tbm)?-(x ^ tbm):x;
 5554              		.loc 1 234 3 is_stmt 1 view .LVU1585
 5555              	.LBB1174:
 5556              	.LBI1174:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 5557              		.loc 1 109 22 view .LVU1586
 5558              	.LBB1175:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 5559              		.loc 1 110 2 view .LVU1587
 5560              	.LBB1176:
 5561              	.LBI1176:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 5562              		.loc 1 42 14 view .LVU1588
 5563              	.LBB1177:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5564              		.loc 1 43 2 view .LVU1589
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5565              		.loc 1 44 2 view .LVU1590
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5566              		.loc 1 43 26 is_stmt 0 view .LVU1591
 5567 0108 9BF8E9A7 		ldrb	r10, [fp, #2025]	@ zero_extendqisi2
ARM GAS  /tmp/ccl34fCK.s 			page 150


  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5568              		.loc 1 43 15 view .LVU1592
 5569 010c 0AF03F0A 		and	r10, r10, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5570              		.loc 1 44 26 view .LVU1593
 5571 0110 0AF1FF33 		add	r3, r10, #-1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5572              		.loc 1 44 5 view .LVU1594
 5573 0114 3E2B     		cmp	r3, #62
 5574 0116 52D8     		bhi	.L325
 5575 0118 0121     		movs	r1, #1
 5576 011a C3F12000 		rsb	r0, r3, #32
 5577 011e AAF1210A 		sub	r10, r10, #33
 5578 0122 01FA0AFA 		lsl	r10, r1, r10
 5579 0126 21FA00F0 		lsr	r0, r1, r0
 5580 012a 4AEA000A 		orr	r10, r10, r0
 5581 012e 01FA03F3 		lsl	r3, r1, r3
 5582              	.L313:
 5583              	.LVL415:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5584              		.loc 1 44 5 view .LVU1595
 5585              	.LBE1177:
 5586              	.LBE1176:
 111:src/int.c     **** 	return bit;
 5587              		.loc 1 111 2 is_stmt 1 view .LVU1596
 112:src/int.c     **** }
 5588              		.loc 1 112 2 view .LVU1597
 112:src/int.c     **** }
 5589              		.loc 1 112 2 is_stmt 0 view .LVU1598
 5590              	.LBE1175:
 5591              	.LBE1174:
 235:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5592              		.loc 1 235 3 is_stmt 1 view .LVU1599
 235:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5593              		.loc 1 235 31 is_stmt 0 view .LVU1600
 5594 0132 08EA0300 		and	r0, r8, r3
 5595 0136 09EA0A01 		and	r1, r9, r10
 235:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5596              		.loc 1 235 48 view .LVU1601
 5597 013a 0143     		orrs	r1, r0, r1
 5598 013c 07D0     		beq	.L314
 235:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5599              		.loc 1 235 42 discriminator 1 view .LVU1602
 5600 013e 88EA0300 		eor	r0, r8, r3
 5601 0142 89EA0A01 		eor	r1, r9, r10
 235:src/int.c     **** 		const long long int y2 = (y & tbm)?-(y ^ tbm):y;
 5602              		.loc 1 235 48 discriminator 1 view .LVU1603
 5603 0146 D0F10008 		rsbs	r8, r0, #0
 5604 014a 61EB4109 		sbc	r9, r1, r1, lsl #1
 5605              	.L314:
 5606              	.LVL416:
 236:src/int.c     **** 
 5607              		.loc 1 236 3 is_stmt 1 discriminator 4 view .LVU1604
 236:src/int.c     **** 
 5608              		.loc 1 236 31 is_stmt 0 discriminator 4 view .LVU1605
 5609 014e 04EA0300 		and	r0, r4, r3
 5610 0152 05EA0A01 		and	r1, r5, r10
ARM GAS  /tmp/ccl34fCK.s 			page 151


 236:src/int.c     **** 
 5611              		.loc 1 236 48 discriminator 4 view .LVU1606
 5612 0156 0143     		orrs	r1, r0, r1
 5613 0158 06D0     		beq	.L315
 236:src/int.c     **** 
 5614              		.loc 1 236 42 discriminator 1 view .LVU1607
 5615 015a 84EA0300 		eor	r0, r4, r3
 5616 015e 85EA0A01 		eor	r1, r5, r10
 236:src/int.c     **** 
 5617              		.loc 1 236 48 discriminator 1 view .LVU1608
 5618 0162 4442     		rsbs	r4, r0, #0
 5619 0164 61EB4105 		sbc	r5, r1, r1, lsl #1
 5620              	.L315:
 5621              	.LVL417:
 238:src/int.c     **** 
 5622              		.loc 1 238 3 is_stmt 1 discriminator 4 view .LVU1609
 5623              	.LBB1181:
 5624              	.LBI1181:
  53:src/int.c     **** #ifndef TINY_BUILD
 5625              		.loc 1 53 6 discriminator 4 view .LVU1610
 5626              	.LBB1182:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5627              		.loc 1 55 2 discriminator 4 view .LVU1611
 5628 0168 0293     		str	r3, [sp, #8]
 5629              	.LVL418:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5630              		.loc 1 55 5 is_stmt 0 discriminator 4 view .LVU1612
 5631 016a 0ABB     		cbnz	r2, .L339
  58:src/int.c     **** #endif
 5632              		.loc 1 58 3 is_stmt 1 view .LVU1613
 5633 016c 5221     		movs	r1, #82
 5634 016e 6A20     		movs	r0, #106
 5635 0170 FFF7FEFF 		bl	cmdflag
 5636              	.LVL419:
 5637 0174 029B     		ldr	r3, [sp, #8]
 5638              	.L317:
  58:src/int.c     **** #endif
 5639              		.loc 1 58 3 is_stmt 0 view .LVU1614
 5640              	.LBE1182:
 5641              	.LBE1181:
 240:src/int.c     **** 		if (v & tbm)
 5642              		.loc 1 240 3 is_stmt 1 view .LVU1615
 240:src/int.c     **** 		if (v & tbm)
 5643              		.loc 1 240 5 is_stmt 0 view .LVU1616
 5644 0176 18EB0406 		adds	r6, r8, r4
 5645 017a 49EB0507 		adc	r7, r9, r5
 5646              	.LVL420:
 241:src/int.c     **** 			v = -v | tbm;
 5647              		.loc 1 241 3 is_stmt 1 view .LVU1617
 241:src/int.c     **** 			v = -v | tbm;
 5648              		.loc 1 241 9 is_stmt 0 view .LVU1618
 5649 017e 06EA0300 		and	r0, r6, r3
 5650 0182 07EA0A01 		and	r1, r7, r10
 241:src/int.c     **** 			v = -v | tbm;
 5651              		.loc 1 241 6 view .LVU1619
 5652 0186 50EA0102 		orrs	r2, r0, r1
 5653 018a 94D0     		beq	.L318
ARM GAS  /tmp/ccl34fCK.s 			page 152


 242:src/int.c     **** 	} else {
 5654              		.loc 1 242 4 is_stmt 1 view .LVU1620
 242:src/int.c     **** 	} else {
 5655              		.loc 1 242 8 is_stmt 0 view .LVU1621
 5656 018c 7042     		rsbs	r0, r6, #0
 5657 018e 67EB4701 		sbc	r1, r7, r7, lsl #1
 242:src/int.c     **** 	} else {
 5658              		.loc 1 242 6 view .LVU1622
 5659 0192 40EA0306 		orr	r6, r0, r3
 5660              	.LVL421:
 242:src/int.c     **** 	} else {
 5661              		.loc 1 242 6 view .LVU1623
 5662 0196 41EA0A07 		orr	r7, r1, r10
 5663              	.LVL422:
 242:src/int.c     **** 	} else {
 5664              		.loc 1 242 6 view .LVU1624
 5665 019a 8CE7     		b	.L318
 5666              	.LVL423:
 5667              	.L336:
 242:src/int.c     **** 	} else {
 5668              		.loc 1 242 6 view .LVU1625
 5669              	.LBE1173:
 229:src/int.c     **** 	else
 5670              		.loc 1 229 3 is_stmt 1 view .LVU1626
 229:src/int.c     **** 	else
 5671              		.loc 1 229 14 is_stmt 0 view .LVU1627
 5672 019c CDE900A3 		strd	r10, r3, [sp]
 5673 01a0 DDE90201 		ldrd	r0, r1, [sp, #8]
 5674 01a4 DDE90423 		ldrd	r2, r3, [sp, #16]
 5675 01a8 FFF7FEFF 		bl	calc_overflow
 5676              	.LVL424:
 5677 01ac 0246     		mov	r2, r0
 5678              	.LVL425:
 229:src/int.c     **** 	else
 5679              		.loc 1 229 14 view .LVU1628
 5680 01ae 50E7     		b	.L311
 5681              	.LVL426:
 5682              	.L339:
 5683              	.LBB1186:
 5684              	.LBB1184:
 5685              	.LBB1183:
 229:src/int.c     **** 	else
 5686              		.loc 1 229 14 view .LVU1629
 5687 01b0 FFF7FEFF 		bl	set_carry.part.0
 5688              	.LVL427:
 5689 01b4 029B     		ldr	r3, [sp, #8]
 5690 01b6 DEE7     		b	.L317
 5691              	.LVL428:
 5692              	.L319:
 229:src/int.c     **** 	else
 5693              		.loc 1 229 14 view .LVU1630
 5694              	.LBE1183:
 5695              	.LBE1184:
 5696              	.LBE1186:
 5697              	.LBB1187:
 245:src/int.c     **** 
 5698              		.loc 1 245 32 view .LVU1631
ARM GAS  /tmp/ccl34fCK.s 			page 153


 5699 01b8 3046     		mov	r0, r6
 5700 01ba 3946     		mov	r1, r7
 5701              	.LVL429:
 247:src/int.c     **** 			set_carry(1);
 5702              		.loc 1 247 3 is_stmt 1 view .LVU1632
 5703              	.LBB1166:
  91:src/int.c     **** #ifndef TINY_BUILD
 5704              		.loc 1 91 15 view .LVU1633
 5705              	.LBB1156:
  93:src/int.c     **** 	long long int mask;
 5706              		.loc 1 93 2 view .LVU1634
 5707              	.LBE1156:
 5708              	.LBE1166:
 5709              	.LBE1187:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5710              		.loc 1 43 2 view .LVU1635
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5711              		.loc 1 44 2 view .LVU1636
 5712 01bc 73E7     		b	.L323
 5713              	.LVL430:
 5714              	.L325:
 5715              	.LBB1188:
 5716              	.LBB1185:
 5717              	.LBB1180:
 5718              	.LBB1179:
 5719              	.LBB1178:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5720              		.loc 1 44 2 is_stmt 0 view .LVU1637
 5721 01be 0023     		movs	r3, #0
 5722 01c0 4FF0004A 		mov	r10, #-2147483648
 5723 01c4 B5E7     		b	.L313
 5724              	.L341:
 5725 01c6 00BF     		.align	2
 5726              	.L340:
 5727 01c8 00000000 		.word	PersistentRam
 5728              	.LBE1178:
 5729              	.LBE1179:
 5730              	.LBE1180:
 5731              	.LBE1185:
 5732              	.LBE1188:
 5733              		.cfi_endproc
 5734              	.LFE16:
 5736              		.section	.text.intSubtract,"ax",%progbits
 5737              		.align	1
 5738              		.p2align 2,,3
 5739              		.global	intSubtract
 5740              		.syntax unified
 5741              		.thumb
 5742              		.thumb_func
 5743              		.fpu fpv4-sp-d16
 5745              	intSubtract:
 5746              	.LVL431:
 5747              	.LFB17:
 265:src/int.c     **** #ifndef TINY_BUILD
 5748              		.loc 1 265 61 is_stmt 1 view -0
 5749              		.cfi_startproc
 5750              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccl34fCK.s 			page 154


 5751              		@ frame_needed = 0, uses_anonymous_args = 0
 267:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 5752              		.loc 1 267 2 view .LVU1639
 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5753              		.loc 1 268 2 view .LVU1640
 265:src/int.c     **** #ifndef TINY_BUILD
 5754              		.loc 1 265 61 is_stmt 0 view .LVU1641
 5755 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5756              		.cfi_def_cfa_offset 36
 5757              		.cfi_offset 4, -36
 5758              		.cfi_offset 5, -32
 5759              		.cfi_offset 6, -28
 5760              		.cfi_offset 7, -24
 5761              		.cfi_offset 8, -20
 5762              		.cfi_offset 9, -16
 5763              		.cfi_offset 10, -12
 5764              		.cfi_offset 11, -8
 5765              		.cfi_offset 14, -4
 5766 0004 87B0     		sub	sp, sp, #28
 5767              		.cfi_def_cfa_offset 64
 265:src/int.c     **** #ifndef TINY_BUILD
 5768              		.loc 1 265 61 view .LVU1642
 5769 0006 0446     		mov	r4, r0
 5770 0008 0D46     		mov	r5, r1
 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5771              		.loc 1 268 30 view .LVU1643
 5772 000a 1046     		mov	r0, r2
 5773              	.LVL432:
 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5774              		.loc 1 268 30 view .LVU1644
 5775 000c 1946     		mov	r1, r3
 265:src/int.c     **** #ifndef TINY_BUILD
 5776              		.loc 1 265 61 view .LVU1645
 5777 000e 9246     		mov	r10, r2
 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5778              		.loc 1 268 30 view .LVU1646
 5779 0010 04AA     		add	r2, sp, #16
 5780              	.LVL433:
 265:src/int.c     **** #ifndef TINY_BUILD
 5781              		.loc 1 265 61 view .LVU1647
 5782 0012 9B46     		mov	fp, r3
 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5783              		.loc 1 268 30 view .LVU1648
 5784 0014 FFF7FEFF 		bl	extract_value
 5785              	.LVL434:
 5786 0018 0246     		mov	r2, r0
 5787 001a 0B46     		mov	r3, r1
 269:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5788              		.loc 1 269 30 view .LVU1649
 5789 001c 2046     		mov	r0, r4
 5790 001e 2946     		mov	r1, r5
 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5791              		.loc 1 268 30 view .LVU1650
 5792 0020 1646     		mov	r6, r2
 269:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5793              		.loc 1 269 30 view .LVU1651
 5794 0022 05AA     		add	r2, sp, #20
ARM GAS  /tmp/ccl34fCK.s 			page 155


 268:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 5795              		.loc 1 268 30 view .LVU1652
 5796 0024 1F46     		mov	r7, r3
 5797              	.LVL435:
 269:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5798              		.loc 1 269 2 is_stmt 1 view .LVU1653
 269:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5799              		.loc 1 269 30 is_stmt 0 view .LVU1654
 5800 0026 FFF7FEFF 		bl	extract_value
 5801              	.LVL436:
 5802              	.LBB1189:
 5803              	.LBB1190:
  39:src/int.c     **** }
 5804              		.loc 1 39 39 view .LVU1655
 5805 002a DFF88091 		ldr	r9, .L375
 5806              	.LBE1190:
 5807              	.LBE1189:
 269:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5808              		.loc 1 269 30 view .LVU1656
 5809 002e 0290     		str	r0, [sp, #8]
 5810 0030 0B46     		mov	r3, r1
 5811              	.LBB1194:
 5812              	.LBB1195:
  71:src/int.c     **** #endif
 5813              		.loc 1 71 3 view .LVU1657
 5814 0032 6920     		movs	r0, #105
 5815 0034 5221     		movs	r1, #82
 5816              	.LBE1195:
 5817              	.LBE1194:
 5818              	.LBB1198:
 5819              	.LBB1191:
  39:src/int.c     **** }
 5820              		.loc 1 39 39 view .LVU1658
 5821 0036 99F8E887 		ldrb	r8, [r9, #2024]	@ zero_extendqisi2
 5822              	.LBE1191:
 5823              	.LBE1198:
 269:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 5824              		.loc 1 269 30 view .LVU1659
 5825 003a 0393     		str	r3, [sp, #12]
 5826              	.LVL437:
 270:src/int.c     **** 	long long int v, tbm;
 5827              		.loc 1 270 2 is_stmt 1 view .LVU1660
 5828              	.LBB1199:
 5829              	.LBI1189:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 5830              		.loc 1 38 23 view .LVU1661
 5831              	.LBB1192:
  39:src/int.c     **** }
 5832              		.loc 1 39 2 view .LVU1662
 5833              	.LBE1192:
 5834              	.LBE1199:
 5835              	.LBB1200:
 5836              	.LBB1196:
  71:src/int.c     **** #endif
 5837              		.loc 1 71 3 is_stmt 0 view .LVU1663
 5838 003c FFF7FEFF 		bl	cmdflag
 5839              	.LVL438:
ARM GAS  /tmp/ccl34fCK.s 			page 156


 5840              	.LBE1196:
 5841              	.LBE1200:
 274:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 5842              		.loc 1 274 5 view .LVU1664
 5843 0040 DDE90423 		ldrd	r2, r3, [sp, #16]
 5844 0044 9A42     		cmp	r2, r3
 5845              	.LBB1201:
 5846              	.LBB1193:
  39:src/int.c     **** }
 5847              		.loc 1 39 9 view .LVU1665
 5848 0046 C8F38108 		ubfx	r8, r8, #2, #2
 5849              	.LVL439:
  39:src/int.c     **** }
 5850              		.loc 1 39 9 view .LVU1666
 5851              	.LBE1193:
 5852              	.LBE1201:
 271:src/int.c     **** 
 5853              		.loc 1 271 2 is_stmt 1 view .LVU1667
 273:src/int.c     **** 	if (sx != sy)
 5854              		.loc 1 273 2 view .LVU1668
 5855              	.LBB1202:
 5856              	.LBI1194:
  66:src/int.c     **** #ifndef TINY_BUILD
 5857              		.loc 1 66 6 view .LVU1669
 5858              	.LBB1197:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 5859              		.loc 1 68 2 view .LVU1670
  71:src/int.c     **** #endif
 5860              		.loc 1 71 3 view .LVU1671
  71:src/int.c     **** #endif
 5861              		.loc 1 71 3 is_stmt 0 view .LVU1672
 5862              	.LBE1197:
 5863              	.LBE1202:
 274:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 5864              		.loc 1 274 2 is_stmt 1 view .LVU1673
 274:src/int.c     **** 		calc_overflow(xv, yv, mode, sy);
 5865              		.loc 1 274 5 is_stmt 0 view .LVU1674
 5866 004a 07D0     		beq	.L343
 275:src/int.c     **** 
 5867              		.loc 1 275 3 is_stmt 1 view .LVU1675
 5868 004c CDE90083 		strd	r8, r3, [sp]
 5869 0050 3046     		mov	r0, r6
 5870 0052 DDE90223 		ldrd	r2, [sp, #8]
 5871 0056 3946     		mov	r1, r7
 5872 0058 FFF7FEFF 		bl	calc_overflow
 5873              	.LVL440:
 5874              	.L343:
 277:src/int.c     **** 		long long int x2, y2;
 5875              		.loc 1 277 2 view .LVU1676
 277:src/int.c     **** 		long long int x2, y2;
 5876              		.loc 1 277 5 is_stmt 0 view .LVU1677
 5877 005c B8F1030F 		cmp	r8, #3
 5878 0060 3BD0     		beq	.L372
 5879              	.LBB1203:
 290:src/int.c     **** 
 5880              		.loc 1 290 3 is_stmt 1 view .LVU1678
 292:src/int.c     **** 			set_carry(1);
ARM GAS  /tmp/ccl34fCK.s 			page 157


 5881              		.loc 1 292 3 view .LVU1679
 292:src/int.c     **** 			set_carry(1);
 5882              		.loc 1 292 6 is_stmt 0 view .LVU1680
 5883 0062 5D45     		cmp	r5, fp
 5884 0064 08BF     		it	eq
 5885 0066 5445     		cmpeq	r4, r10
 5886 0068 25D3     		bcc	.L373
 298:src/int.c     **** 			borrow = 0;
 5887              		.loc 1 298 4 is_stmt 1 view .LVU1681
 5888              	.LVL441:
 5889              	.LBB1204:
 5890              	.LBI1204:
  53:src/int.c     **** #ifndef TINY_BUILD
 5891              		.loc 1 53 6 view .LVU1682
 5892              	.LBB1205:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5893              		.loc 1 55 2 view .LVU1683
  58:src/int.c     **** #endif
 5894              		.loc 1 58 3 view .LVU1684
 5895 006a 5221     		movs	r1, #82
 5896 006c 6A20     		movs	r0, #106
 5897 006e FFF7FEFF 		bl	cmdflag
 5898              	.LVL442:
 5899              	.L371:
  58:src/int.c     **** #endif
 5900              		.loc 1 58 3 is_stmt 0 view .LVU1685
 5901              	.LBE1205:
 5902              	.LBE1204:
 299:src/int.c     **** 		}
 5903              		.loc 1 299 4 is_stmt 1 view .LVU1686
 302:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 5904              		.loc 1 302 3 view .LVU1687
 5905 0072 99F8E937 		ldrb	r3, [r9, #2025]	@ zero_extendqisi2
 302:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 5906              		.loc 1 302 5 is_stmt 0 view .LVU1688
 5907 0076 B4EB0A00 		subs	r0, r4, r10
 5908 007a 03F03F03 		and	r3, r3, #63
 5909 007e 03F1FF37 		add	r7, r3, #-1
 5910 0082 65EB0B01 		sbc	r1, r5, fp
 5911              	.LVL443:
 303:src/int.c     **** 			v--;
 5912              		.loc 1 303 3 is_stmt 1 view .LVU1689
 5913              	.L352:
 303:src/int.c     **** 			v--;
 5914              		.loc 1 303 3 is_stmt 0 view .LVU1690
 5915              	.LBE1203:
 306:src/int.c     **** #else
 5916              		.loc 1 306 2 is_stmt 1 view .LVU1691
 5917              	.LBB1210:
 5918              	.LBI1210:
  91:src/int.c     **** #ifndef TINY_BUILD
 5919              		.loc 1 91 15 view .LVU1692
 5920              	.LBB1211:
  93:src/int.c     **** 	long long int mask;
 5921              		.loc 1 93 2 view .LVU1693
 5922              	.LBB1212:
 5923              	.LBI1212:
ARM GAS  /tmp/ccl34fCK.s 			page 158


  42:src/int.c     **** 	unsigned int il = UState.int_len;
 5924              		.loc 1 42 14 view .LVU1694
 5925              	.LBB1213:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 5926              		.loc 1 43 2 view .LVU1695
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5927              		.loc 1 44 2 view .LVU1696
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5928              		.loc 1 44 5 is_stmt 0 view .LVU1697
 5929 0086 3E2F     		cmp	r7, #62
 5930 0088 12D8     		bhi	.L342
 5931              	.LVL444:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 5932              		.loc 1 44 5 view .LVU1698
 5933              	.LBE1213:
 5934              	.LBE1212:
  94:src/int.c     **** 
 5935              		.loc 1 94 2 is_stmt 1 view .LVU1699
  96:src/int.c     **** 		return v;
 5936              		.loc 1 96 2 view .LVU1700
  98:src/int.c     **** 	return v & mask;
 5937              		.loc 1 98 2 view .LVU1701
  99:src/int.c     **** #else
 5938              		.loc 1 99 2 view .LVU1702
  98:src/int.c     **** 	return v & mask;
 5939              		.loc 1 98 14 is_stmt 0 view .LVU1703
 5940 008a 0122     		movs	r2, #1
 5941 008c A3F12004 		sub	r4, r3, #32
 5942 0090 C3F12005 		rsb	r5, r3, #32
 5943 0094 02FA04F4 		lsl	r4, r2, r4
 5944 0098 22FA05F5 		lsr	r5, r2, r5
 5945 009c 02FA03F3 		lsl	r3, r2, r3
 5946              	.LVL445:
  98:src/int.c     **** 	return v & mask;
 5947              		.loc 1 98 7 view .LVU1704
 5948 00a0 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 5949              		.loc 1 98 14 view .LVU1705
 5950 00a4 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 5951              		.loc 1 98 7 view .LVU1706
 5952 00a8 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 5953              		.loc 1 99 11 view .LVU1707
 5954 00ac 2140     		ands	r1, r1, r4
 5955              	.LVL446:
  99:src/int.c     **** #else
 5956              		.loc 1 99 11 view .LVU1708
 5957 00ae 1840     		ands	r0, r0, r3
 5958              	.LVL447:
 5959              	.L342:
  99:src/int.c     **** #else
 5960              		.loc 1 99 11 view .LVU1709
 5961              	.LBE1211:
 5962              	.LBE1210:
 310:src/int.c     **** 
 5963              		.loc 1 310 1 view .LVU1710
ARM GAS  /tmp/ccl34fCK.s 			page 159


 5964 00b0 07B0     		add	sp, sp, #28
 5965              		.cfi_remember_state
 5966              		.cfi_def_cfa_offset 36
 5967              		@ sp needed
 5968 00b2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5969              	.LVL448:
 5970              	.L373:
 5971              		.cfi_restore_state
 5972              	.LBB1214:
 293:src/int.c     **** 			if (mode == MODE_UNSIGNED)
 5973              		.loc 1 293 4 is_stmt 1 view .LVU1711
 5974              	.LBB1206:
 5975              	.LBI1206:
  53:src/int.c     **** #ifndef TINY_BUILD
 5976              		.loc 1 53 6 view .LVU1712
 5977              	.LBB1207:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5978              		.loc 1 55 2 view .LVU1713
 5979 00b6 FFF7FEFF 		bl	set_carry.part.0
 5980              	.LVL449:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 5981              		.loc 1 55 2 is_stmt 0 view .LVU1714
 5982              	.LBE1207:
 5983              	.LBE1206:
 294:src/int.c     **** 				set_overflow(1);
 5984              		.loc 1 294 4 is_stmt 1 view .LVU1715
 294:src/int.c     **** 				set_overflow(1);
 5985              		.loc 1 294 7 is_stmt 0 view .LVU1716
 5986 00ba B8F1020F 		cmp	r8, #2
 5987 00be 72D0     		beq	.L374
 296:src/int.c     **** 		} else {
 5988              		.loc 1 296 4 is_stmt 1 view .LVU1717
 5989              	.LVL450:
 302:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 5990              		.loc 1 302 3 view .LVU1718
 302:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 5991              		.loc 1 302 5 is_stmt 0 view .LVU1719
 5992 00c0 B4EB0A00 		subs	r0, r4, r10
 5993 00c4 65EB0B01 		sbc	r1, r5, fp
 5994              	.LVL451:
 303:src/int.c     **** 			v--;
 5995              		.loc 1 303 3 is_stmt 1 view .LVU1720
 303:src/int.c     **** 			v--;
 5996              		.loc 1 303 14 is_stmt 0 view .LVU1721
 5997 00c8 B8F1010F 		cmp	r8, #1
 5998 00cc 99F8E937 		ldrb	r3, [r9, #2025]	@ zero_extendqisi2
 5999 00d0 5DD0     		beq	.L355
 6000 00d2 03F03F03 		and	r3, r3, #63
 6001 00d6 5F1E     		subs	r7, r3, #1
 6002 00d8 D5E7     		b	.L352
 6003              	.LVL452:
 6004              	.L372:
 303:src/int.c     **** 			v--;
 6005              		.loc 1 303 14 view .LVU1722
 6006              	.LBE1214:
 6007              	.LBB1215:
 278:src/int.c     **** 		set_carry((sx == 0 && sy == 0 && xv > yv) ||
ARM GAS  /tmp/ccl34fCK.s 			page 160


 6008              		.loc 1 278 3 is_stmt 1 view .LVU1723
 279:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 6009              		.loc 1 279 3 view .LVU1724
 6010 00da 049B     		ldr	r3, [sp, #16]
 6011 00dc 002B     		cmp	r3, #0
 6012 00de 4AD1     		bne	.L345
 279:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 6013              		.loc 1 279 22 is_stmt 0 discriminator 1 view .LVU1725
 6014 00e0 059B     		ldr	r3, [sp, #20]
 6015 00e2 2BB9     		cbnz	r3, .L346
 279:src/int.c     **** 				(sx != 0 && sy != 0 && xv < yv));
 6016              		.loc 1 279 33 discriminator 3 view .LVU1726
 6017 00e4 DDE90223 		ldrd	r2, [sp, #8]
 6018 00e8 BB42     		cmp	r3, r7
 6019 00ea 08BF     		it	eq
 6020 00ec B242     		cmpeq	r2, r6
 6021 00ee 4BD3     		bcc	.L347
 6022              	.L346:
 6023              	.LVL453:
 6024              	.LBB1216:
 6025              	.LBI1216:
  53:src/int.c     **** #ifndef TINY_BUILD
 6026              		.loc 1 53 6 is_stmt 1 view .LVU1727
 6027              	.LBB1217:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6028              		.loc 1 55 2 view .LVU1728
  58:src/int.c     **** #endif
 6029              		.loc 1 58 3 view .LVU1729
 6030 00f0 5221     		movs	r1, #82
 6031 00f2 6A20     		movs	r0, #106
 6032 00f4 FFF7FEFF 		bl	cmdflag
 6033              	.LVL454:
 6034              	.L348:
  58:src/int.c     **** #endif
 6035              		.loc 1 58 3 is_stmt 0 view .LVU1730
 6036              	.LBE1217:
 6037              	.LBE1216:
 282:src/int.c     **** 		x2 = (x & tbm)?-(x ^ tbm):x;
 6038              		.loc 1 282 3 is_stmt 1 view .LVU1731
 6039              	.LBB1219:
 6040              	.LBI1219:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 6041              		.loc 1 109 22 view .LVU1732
 6042              	.LBB1220:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 6043              		.loc 1 110 2 view .LVU1733
 6044              	.LBB1221:
 6045              	.LBI1221:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 6046              		.loc 1 42 14 view .LVU1734
 6047              	.LBB1222:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6048              		.loc 1 43 2 view .LVU1735
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6049              		.loc 1 43 26 is_stmt 0 view .LVU1736
 6050 00f8 99F8E937 		ldrb	r3, [r9, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
ARM GAS  /tmp/ccl34fCK.s 			page 161


 6051              		.loc 1 43 15 view .LVU1737
 6052 00fc 03F03F03 		and	r3, r3, #63
 6053              	.LVL455:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6054              		.loc 1 44 2 is_stmt 1 view .LVU1738
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6055              		.loc 1 44 26 is_stmt 0 view .LVU1739
 6056 0100 5F1E     		subs	r7, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6057              		.loc 1 44 5 view .LVU1740
 6058 0102 3E2F     		cmp	r7, #62
 6059 0104 4BD8     		bhi	.L357
 6060 0106 0126     		movs	r6, #1
 6061              	.LVL456:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6062              		.loc 1 44 5 view .LVU1741
 6063 0108 A3F12102 		sub	r2, r3, #33
 6064 010c C7F12001 		rsb	r1, r7, #32
 6065 0110 06FA02F2 		lsl	r2, r6, r2
 6066 0114 26FA01F1 		lsr	r1, r6, r1
 6067 0118 0A43     		orrs	r2, r2, r1
 6068 011a BE40     		lsls	r6, r6, r7
 6069              	.L349:
 6070              	.LVL457:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6071              		.loc 1 44 5 view .LVU1742
 6072              	.LBE1222:
 6073              	.LBE1221:
 111:src/int.c     **** 	return bit;
 6074              		.loc 1 111 2 is_stmt 1 view .LVU1743
 112:src/int.c     **** }
 6075              		.loc 1 112 2 view .LVU1744
 112:src/int.c     **** }
 6076              		.loc 1 112 2 is_stmt 0 view .LVU1745
 6077              	.LBE1220:
 6078              	.LBE1219:
 283:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6079              		.loc 1 283 3 is_stmt 1 view .LVU1746
 283:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6080              		.loc 1 283 11 is_stmt 0 view .LVU1747
 6081 011c 0AEA0600 		and	r0, r10, r6
 6082 0120 0BEA0201 		and	r1, fp, r2
 283:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6083              		.loc 1 283 28 view .LVU1748
 6084 0124 0143     		orrs	r1, r0, r1
 6085 0126 07D0     		beq	.L350
 283:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6086              		.loc 1 283 22 discriminator 1 view .LVU1749
 6087 0128 8AEA0600 		eor	r0, r10, r6
 6088 012c 8BEA0201 		eor	r1, fp, r2
 283:src/int.c     **** 		y2 = (y & tbm)?-(y ^ tbm):y;
 6089              		.loc 1 283 28 discriminator 1 view .LVU1750
 6090 0130 D0F1000A 		rsbs	r10, r0, #0
 6091 0134 61EB410B 		sbc	fp, r1, r1, lsl #1
 6092              	.L350:
 6093              	.LVL458:
 284:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 162


 6094              		.loc 1 284 3 is_stmt 1 discriminator 4 view .LVU1751
 284:src/int.c     **** 
 6095              		.loc 1 284 11 is_stmt 0 discriminator 4 view .LVU1752
 6096 0138 04EA0600 		and	r0, r4, r6
 6097 013c 05EA0201 		and	r1, r5, r2
 284:src/int.c     **** 
 6098              		.loc 1 284 28 discriminator 4 view .LVU1753
 6099 0140 0143     		orrs	r1, r0, r1
 6100 0142 06D0     		beq	.L351
 284:src/int.c     **** 
 6101              		.loc 1 284 22 discriminator 1 view .LVU1754
 6102 0144 84EA0600 		eor	r0, r4, r6
 6103 0148 85EA0201 		eor	r1, r5, r2
 284:src/int.c     **** 
 6104              		.loc 1 284 28 discriminator 1 view .LVU1755
 6105 014c 4442     		rsbs	r4, r0, #0
 6106 014e 61EB4105 		sbc	r5, r1, r1, lsl #1
 6107              	.L351:
 6108              	.LVL459:
 286:src/int.c     **** 		if (v & tbm)
 6109              		.loc 1 286 3 is_stmt 1 discriminator 4 view .LVU1756
 286:src/int.c     **** 		if (v & tbm)
 6110              		.loc 1 286 5 is_stmt 0 discriminator 4 view .LVU1757
 6111 0152 B4EB0A00 		subs	r0, r4, r10
 6112 0156 65EB0B01 		sbc	r1, r5, fp
 6113              	.LVL460:
 287:src/int.c     **** 			v = -v | tbm;
 6114              		.loc 1 287 3 is_stmt 1 discriminator 4 view .LVU1758
 287:src/int.c     **** 			v = -v | tbm;
 6115              		.loc 1 287 9 is_stmt 0 discriminator 4 view .LVU1759
 6116 015a 00EA0608 		and	r8, r0, r6
 6117 015e 01EA0209 		and	r9, r1, r2
 287:src/int.c     **** 			v = -v | tbm;
 6118              		.loc 1 287 6 discriminator 4 view .LVU1760
 6119 0162 58EA090C 		orrs	ip, r8, r9
 6120 0166 8ED0     		beq	.L352
 288:src/int.c     **** 	} else {
 6121              		.loc 1 288 4 is_stmt 1 view .LVU1761
 288:src/int.c     **** 	} else {
 6122              		.loc 1 288 8 is_stmt 0 view .LVU1762
 6123 0168 BAEB0400 		subs	r0, r10, r4
 6124              	.LVL461:
 288:src/int.c     **** 	} else {
 6125              		.loc 1 288 8 view .LVU1763
 6126 016c 6BEB0501 		sbc	r1, fp, r5
 6127              	.LVL462:
 288:src/int.c     **** 	} else {
 6128              		.loc 1 288 6 view .LVU1764
 6129 0170 1143     		orrs	r1, r1, r2
 6130 0172 3043     		orrs	r0, r0, r6
 6131              	.LVL463:
 288:src/int.c     **** 	} else {
 6132              		.loc 1 288 6 view .LVU1765
 6133 0174 87E7     		b	.L352
 6134              	.LVL464:
 6135              	.L345:
 280:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 163


 6136              		.loc 1 280 14 view .LVU1766
 6137 0176 059B     		ldr	r3, [sp, #20]
 6138 0178 002B     		cmp	r3, #0
 6139 017a B9D0     		beq	.L346
 280:src/int.c     **** 
 6140              		.loc 1 280 25 discriminator 1 view .LVU1767
 6141 017c DDE90223 		ldrd	r2, [sp, #8]
 6142 0180 9F42     		cmp	r7, r3
 6143 0182 08BF     		it	eq
 6144 0184 9642     		cmpeq	r6, r2
 6145 0186 B3D2     		bcs	.L346
 6146              	.L347:
 6147              	.LBB1226:
 6148              	.LBB1218:
 6149 0188 FFF7FEFF 		bl	set_carry.part.0
 6150              	.LVL465:
 6151 018c B4E7     		b	.L348
 6152              	.LVL466:
 6153              	.L355:
 280:src/int.c     **** 
 6154              		.loc 1 280 25 discriminator 1 view .LVU1768
 6155              	.LBE1218:
 6156              	.LBE1226:
 6157              	.LBE1215:
 6158              	.LBB1228:
 304:src/int.c     **** 	}
 6159              		.loc 1 304 4 is_stmt 1 view .LVU1769
 304:src/int.c     **** 	}
 6160              		.loc 1 304 5 is_stmt 0 view .LVU1770
 6161 018e 10F1FF30 		adds	r0, r0, #-1
 6162              	.LVL467:
 304:src/int.c     **** 	}
 6163              		.loc 1 304 5 view .LVU1771
 6164 0192 03F03F03 		and	r3, r3, #63
 6165 0196 41F1FF31 		adc	r1, r1, #-1
 6166              	.LVL468:
 304:src/int.c     **** 	}
 6167              		.loc 1 304 5 view .LVU1772
 6168 019a 5F1E     		subs	r7, r3, #1
 6169 019c 73E7     		b	.L352
 6170              	.LVL469:
 6171              	.L357:
 304:src/int.c     **** 	}
 6172              		.loc 1 304 5 view .LVU1773
 6173              	.LBE1228:
 6174              	.LBB1229:
 6175              	.LBB1227:
 6176              	.LBB1225:
 6177              	.LBB1224:
 6178              	.LBB1223:
 6179 019e 0026     		movs	r6, #0
 6180              	.LVL470:
 304:src/int.c     **** 	}
 6181              		.loc 1 304 5 view .LVU1774
 6182 01a0 4FF00042 		mov	r2, #-2147483648
 6183 01a4 BAE7     		b	.L349
 6184              	.LVL471:
ARM GAS  /tmp/ccl34fCK.s 			page 164


 6185              	.L374:
 304:src/int.c     **** 	}
 6186              		.loc 1 304 5 view .LVU1775
 6187              	.LBE1223:
 6188              	.LBE1224:
 6189              	.LBE1225:
 6190              	.LBE1227:
 6191              	.LBE1229:
 6192              	.LBB1230:
 295:src/int.c     **** 			borrow = 1;
 6193              		.loc 1 295 5 is_stmt 1 view .LVU1776
 6194              	.LBB1208:
 6195              	.LBI1208:
  66:src/int.c     **** #ifndef TINY_BUILD
 6196              		.loc 1 66 6 view .LVU1777
 6197              	.LBB1209:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6198              		.loc 1 68 2 view .LVU1778
 6199 01a6 FFF7FEFF 		bl	set_overflow.part.0
 6200              	.LVL472:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6201              		.loc 1 68 2 is_stmt 0 view .LVU1779
 6202              	.LBE1209:
 6203              	.LBE1208:
 296:src/int.c     **** 		} else {
 6204              		.loc 1 296 4 is_stmt 1 view .LVU1780
 302:src/int.c     **** 		if (borrow && mode == MODE_1COMP)
 6205              		.loc 1 302 3 view .LVU1781
 6206 01aa 62E7     		b	.L371
 6207              	.L376:
 6208              		.align	2
 6209              	.L375:
 6210 01ac 00000000 		.word	PersistentRam
 6211              	.LBE1230:
 6212              		.cfi_endproc
 6213              	.LFE17:
 6215              		.section	.text.intMultiply,"ax",%progbits
 6216              		.align	1
 6217              		.p2align 2,,3
 6218              		.global	intMultiply
 6219              		.syntax unified
 6220              		.thumb
 6221              		.thumb_func
 6222              		.fpu fpv4-sp-d16
 6224              	intMultiply:
 6225              	.LVL473:
 6226              	.LFB19:
 325:src/int.c     **** #ifndef TINY_BUILD
 6227              		.loc 1 325 61 view -0
 6228              		.cfi_startproc
 6229              		@ args = 0, pretend = 0, frame = 16
 6230              		@ frame_needed = 0, uses_anonymous_args = 0
 327:src/int.c     **** 	int sx, sy;
 6231              		.loc 1 327 2 view .LVU1783
 328:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 6232              		.loc 1 328 2 view .LVU1784
 329:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
ARM GAS  /tmp/ccl34fCK.s 			page 165


 6233              		.loc 1 329 2 view .LVU1785
 325:src/int.c     **** #ifndef TINY_BUILD
 6234              		.loc 1 325 61 is_stmt 0 view .LVU1786
 6235 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6236              		.cfi_def_cfa_offset 20
 6237              		.cfi_offset 4, -20
 6238              		.cfi_offset 5, -16
 6239              		.cfi_offset 6, -12
 6240              		.cfi_offset 7, -8
 6241              		.cfi_offset 14, -4
 6242 0002 87B0     		sub	sp, sp, #28
 6243              		.cfi_def_cfa_offset 48
 325:src/int.c     **** #ifndef TINY_BUILD
 6244              		.loc 1 325 61 view .LVU1787
 6245 0004 0E46     		mov	r6, r1
 6246 0006 0746     		mov	r7, r0
 329:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6247              		.loc 1 329 30 view .LVU1788
 6248 0008 1946     		mov	r1, r3
 6249 000a 1046     		mov	r0, r2
 6250              	.LVL474:
 329:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6251              		.loc 1 329 30 view .LVU1789
 6252 000c 03AA     		add	r2, sp, #12
 6253              	.LVL475:
 329:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6254              		.loc 1 329 30 view .LVU1790
 6255 000e FFF7FEFF 		bl	extract_value
 6256              	.LVL476:
 330:src/int.c     **** 	int overflow = 0;
 6257              		.loc 1 330 30 view .LVU1791
 6258 0012 04AA     		add	r2, sp, #16
 329:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6259              		.loc 1 329 30 view .LVU1792
 6260 0014 0546     		mov	r5, r0
 6261 0016 0C46     		mov	r4, r1
 6262              	.LVL477:
 330:src/int.c     **** 	int overflow = 0;
 6263              		.loc 1 330 2 is_stmt 1 view .LVU1793
 330:src/int.c     **** 	int overflow = 0;
 6264              		.loc 1 330 30 is_stmt 0 view .LVU1794
 6265 0018 3846     		mov	r0, r7
 6266              	.LVL478:
 330:src/int.c     **** 	int overflow = 0;
 6267              		.loc 1 330 30 view .LVU1795
 6268 001a 3146     		mov	r1, r6
 6269              	.LVL479:
 330:src/int.c     **** 	int overflow = 0;
 6270              		.loc 1 330 30 view .LVU1796
 6271 001c FFF7FEFF 		bl	extract_value
 6272              	.LVL480:
 333:src/int.c     **** 	set_overflow(overflow);
 6273              		.loc 1 333 6 view .LVU1797
 6274 0020 05AE     		add	r6, sp, #20
 330:src/int.c     **** 	int overflow = 0;
 6275              		.loc 1 330 30 view .LVU1798
 6276 0022 0B46     		mov	r3, r1
ARM GAS  /tmp/ccl34fCK.s 			page 166


 6277 0024 0246     		mov	r2, r0
 6278              	.LVL481:
 331:src/int.c     **** 
 6279              		.loc 1 331 2 is_stmt 1 view .LVU1799
 333:src/int.c     **** 	set_overflow(overflow);
 6280              		.loc 1 333 6 is_stmt 0 view .LVU1800
 6281 0026 2146     		mov	r1, r4
 6282 0028 2846     		mov	r0, r5
 331:src/int.c     **** 
 6283              		.loc 1 331 6 view .LVU1801
 6284 002a 0024     		movs	r4, #0
 6285              	.LVL482:
 333:src/int.c     **** 	set_overflow(overflow);
 6286              		.loc 1 333 6 view .LVU1802
 6287 002c 0096     		str	r6, [sp]
 331:src/int.c     **** 
 6288              		.loc 1 331 6 view .LVU1803
 6289 002e 0594     		str	r4, [sp, #20]
 333:src/int.c     **** 	set_overflow(overflow);
 6290              		.loc 1 333 2 is_stmt 1 view .LVU1804
 333:src/int.c     **** 	set_overflow(overflow);
 6291              		.loc 1 333 6 is_stmt 0 view .LVU1805
 6292 0030 FFF7FEFF 		bl	multiply_with_overflow
 6293              	.LVL483:
 6294              	.LBB1231:
 6295              	.LBB1232:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6296              		.loc 1 68 5 view .LVU1806
 6297 0034 059B     		ldr	r3, [sp, #20]
 6298              	.LBE1232:
 6299              	.LBE1231:
 333:src/int.c     **** 	set_overflow(overflow);
 6300              		.loc 1 333 6 view .LVU1807
 6301 0036 0C46     		mov	r4, r1
 6302 0038 0546     		mov	r5, r0
 6303              	.LVL484:
 334:src/int.c     **** 
 6304              		.loc 1 334 2 is_stmt 1 view .LVU1808
 6305              	.LBB1235:
 6306              	.LBI1231:
  66:src/int.c     **** #ifndef TINY_BUILD
 6307              		.loc 1 66 6 view .LVU1809
 6308              	.LBB1233:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6309              		.loc 1 68 2 view .LVU1810
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6310              		.loc 1 68 5 is_stmt 0 view .LVU1811
 6311 003a 23B3     		cbz	r3, .L378
 6312 003c FFF7FEFF 		bl	set_overflow.part.0
 6313              	.LVL485:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6314              		.loc 1 68 5 view .LVU1812
 6315              	.LBE1233:
 6316              	.LBE1235:
 336:src/int.c     **** 		return u;
 6317              		.loc 1 336 2 is_stmt 1 view .LVU1813
 6318              	.LBB1236:
ARM GAS  /tmp/ccl34fCK.s 			page 167


 6319              	.LBI1236:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 6320              		.loc 1 38 23 view .LVU1814
 6321              	.LBB1237:
  39:src/int.c     **** }
 6322              		.loc 1 39 2 view .LVU1815
  39:src/int.c     **** }
 6323              		.loc 1 39 39 is_stmt 0 view .LVU1816
 6324 0040 1B4A     		ldr	r2, .L386
 6325 0042 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 6326              	.LBE1237:
 6327              	.LBE1236:
 336:src/int.c     **** 		return u;
 6328              		.loc 1 336 5 view .LVU1817
 6329 0046 C3F38103 		ubfx	r3, r3, #2, #2
 6330 004a 022B     		cmp	r3, #2
 6331 004c 26D0     		beq	.L385
 6332              	.L380:
 338:src/int.c     **** #else
 6333              		.loc 1 338 2 is_stmt 1 view .LVU1818
 6334              	.LBB1239:
 6335              	.LBI1239:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 6336              		.loc 1 109 22 view .LVU1819
 6337              	.LBB1240:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 6338              		.loc 1 110 2 view .LVU1820
 6339              	.LBB1241:
 6340              	.LBI1241:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 6341              		.loc 1 42 14 view .LVU1821
 6342              	.LBB1242:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6343              		.loc 1 43 2 view .LVU1822
 6344              	.LVL486:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6345              		.loc 1 44 2 view .LVU1823
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6346              		.loc 1 43 26 is_stmt 0 view .LVU1824
 6347 004e 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6348              		.loc 1 43 15 view .LVU1825
 6349 0052 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6350              		.loc 1 44 26 view .LVU1826
 6351 0056 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6352              		.loc 1 44 5 view .LVU1827
 6353 0058 3E2A     		cmp	r2, #62
 6354 005a 23D8     		bhi	.L383
 6355 005c 0120     		movs	r0, #1
 6356 005e 213B     		subs	r3, r3, #33
 6357 0060 C2F12001 		rsb	r1, r2, #32
 6358 0064 20FA01F1 		lsr	r1, r0, r1
 6359 0068 00FA03F3 		lsl	r3, r0, r3
 6360 006c 0B43     		orrs	r3, r3, r1
 6361 006e 9040     		lsls	r0, r0, r2
ARM GAS  /tmp/ccl34fCK.s 			page 168


 6362 0070 D943     		mvns	r1, r3
 6363 0072 C043     		mvns	r0, r0
 6364              	.L382:
 6365              	.LVL487:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6366              		.loc 1 44 5 view .LVU1828
 6367              	.LBE1242:
 6368              	.LBE1241:
 111:src/int.c     **** 	return bit;
 6369              		.loc 1 111 2 is_stmt 1 view .LVU1829
 112:src/int.c     **** }
 6370              		.loc 1 112 2 view .LVU1830
 112:src/int.c     **** }
 6371              		.loc 1 112 2 is_stmt 0 view .LVU1831
 6372              	.LBE1240:
 6373              	.LBE1239:
 338:src/int.c     **** #else
 6374              		.loc 1 338 9 view .LVU1832
 6375 0074 DDE90362 		ldrd	r6, r2, [sp, #12]
 6376 0078 2840     		ands	r0, r0, r5
 6377 007a 2140     		ands	r1, r1, r4
 6378 007c 7240     		eors	r2, r2, r6
 6379 007e FFF7FEFF 		bl	build_value
 6380              	.LVL488:
 342:src/int.c     **** 
 6381              		.loc 1 342 1 view .LVU1833
 6382 0082 07B0     		add	sp, sp, #28
 6383              		.cfi_remember_state
 6384              		.cfi_def_cfa_offset 20
 6385              		@ sp needed
 6386 0084 F0BD     		pop	{r4, r5, r6, r7, pc}
 6387              	.LVL489:
 6388              	.L378:
 6389              		.cfi_restore_state
 6390              	.LBB1246:
 6391              	.LBB1234:
  71:src/int.c     **** #endif
 6392              		.loc 1 71 3 is_stmt 1 view .LVU1834
 6393 0086 5221     		movs	r1, #82
 6394              	.LVL490:
  71:src/int.c     **** #endif
 6395              		.loc 1 71 3 is_stmt 0 view .LVU1835
 6396 0088 6920     		movs	r0, #105
 6397              	.LVL491:
  71:src/int.c     **** #endif
 6398              		.loc 1 71 3 view .LVU1836
 6399 008a FFF7FEFF 		bl	cmdflag
 6400              	.LVL492:
  71:src/int.c     **** #endif
 6401              		.loc 1 71 3 view .LVU1837
 6402              	.LBE1234:
 6403              	.LBE1246:
 336:src/int.c     **** 		return u;
 6404              		.loc 1 336 2 is_stmt 1 view .LVU1838
 6405              	.LBB1247:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 6406              		.loc 1 38 23 view .LVU1839
ARM GAS  /tmp/ccl34fCK.s 			page 169


 6407              	.LBB1238:
  39:src/int.c     **** }
 6408              		.loc 1 39 2 view .LVU1840
  39:src/int.c     **** }
 6409              		.loc 1 39 39 is_stmt 0 view .LVU1841
 6410 008e 084A     		ldr	r2, .L386
 6411 0090 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 6412              	.LBE1238:
 6413              	.LBE1247:
 336:src/int.c     **** 		return u;
 6414              		.loc 1 336 5 view .LVU1842
 6415 0094 C3F38103 		ubfx	r3, r3, #2, #2
 6416 0098 022B     		cmp	r3, #2
 6417 009a D8D1     		bne	.L380
 6418              	.L385:
 337:src/int.c     **** 	return build_value(u & ~topbit_mask(), sx ^ sy);
 6419              		.loc 1 337 3 is_stmt 1 view .LVU1843
 337:src/int.c     **** 	return build_value(u & ~topbit_mask(), sx ^ sy);
 6420              		.loc 1 337 10 is_stmt 0 view .LVU1844
 6421 009c 2846     		mov	r0, r5
 6422 009e 2146     		mov	r1, r4
 342:src/int.c     **** 
 6423              		.loc 1 342 1 view .LVU1845
 6424 00a0 07B0     		add	sp, sp, #28
 6425              		.cfi_remember_state
 6426              		.cfi_def_cfa_offset 20
 6427              		@ sp needed
 6428 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 6429              	.LVL493:
 6430              	.L383:
 6431              		.cfi_restore_state
 6432              	.LBB1248:
 6433              	.LBB1245:
 6434              	.LBB1244:
 6435              	.LBB1243:
 342:src/int.c     **** 
 6436              		.loc 1 342 1 view .LVU1846
 6437 00a4 4FF0FF30 		mov	r0, #-1
 6438 00a8 6FF00041 		mvn	r1, #-2147483648
 6439 00ac E2E7     		b	.L382
 6440              	.L387:
 6441 00ae 00BF     		.align	2
 6442              	.L386:
 6443 00b0 00000000 		.word	PersistentRam
 6444              	.LBE1243:
 6445              	.LBE1244:
 6446              	.LBE1245:
 6447              	.LBE1248:
 6448              		.cfi_endproc
 6449              	.LFE19:
 6451              		.section	.text.intDivide,"ax",%progbits
 6452              		.align	1
 6453              		.p2align 2,,3
 6454              		.global	intDivide
 6455              		.syntax unified
 6456              		.thumb
 6457              		.thumb_func
ARM GAS  /tmp/ccl34fCK.s 			page 170


 6458              		.fpu fpv4-sp-d16
 6460              	intDivide:
 6461              	.LVL494:
 6462              	.LFB21:
 355:src/int.c     **** #ifndef TINY_BUILD
 6463              		.loc 1 355 59 is_stmt 1 view -0
 6464              		.cfi_startproc
 6465              		@ args = 0, pretend = 0, frame = 16
 6466              		@ frame_needed = 0, uses_anonymous_args = 0
 357:src/int.c     **** 	int sx, sy;
 6467              		.loc 1 357 2 view .LVU1848
 6468              	.LBB1271:
 6469              	.LBI1271:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 6470              		.loc 1 38 23 view .LVU1849
 6471              	.LBB1272:
  39:src/int.c     **** }
 6472              		.loc 1 39 2 view .LVU1850
 6473              	.LBE1272:
 6474              	.LBE1271:
 355:src/int.c     **** #ifndef TINY_BUILD
 6475              		.loc 1 355 59 is_stmt 0 view .LVU1851
 6476 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6477              		.cfi_def_cfa_offset 36
 6478              		.cfi_offset 4, -36
 6479              		.cfi_offset 5, -32
 6480              		.cfi_offset 6, -28
 6481              		.cfi_offset 7, -24
 6482              		.cfi_offset 8, -20
 6483              		.cfi_offset 9, -16
 6484              		.cfi_offset 10, -12
 6485              		.cfi_offset 11, -8
 6486              		.cfi_offset 14, -4
 6487              	.LBB1277:
 6488              	.LBB1273:
  39:src/int.c     **** }
 6489              		.loc 1 39 39 view .LVU1852
 6490 0004 DFF864B1 		ldr	fp, .L412
 6491              	.LBE1273:
 6492              	.LBE1277:
 355:src/int.c     **** #ifndef TINY_BUILD
 6493              		.loc 1 355 59 view .LVU1853
 6494 0008 1D46     		mov	r5, r3
 6495              	.LBB1278:
 6496              	.LBB1274:
  39:src/int.c     **** }
 6497              		.loc 1 39 39 view .LVU1854
 6498 000a 9BF8E837 		ldrb	r3, [fp, #2024]	@ zero_extendqisi2
 6499              	.LBE1274:
 6500              	.LBE1278:
 355:src/int.c     **** #ifndef TINY_BUILD
 6501              		.loc 1 355 59 view .LVU1855
 6502 000e 85B0     		sub	sp, sp, #20
 6503              		.cfi_def_cfa_offset 56
 6504              	.LBB1279:
 6505              	.LBB1275:
  39:src/int.c     **** }
ARM GAS  /tmp/ccl34fCK.s 			page 171


 6506              		.loc 1 39 39 view .LVU1856
 6507 0010 C3F38103 		ubfx	r3, r3, #2, #2
 6508              	.LBE1275:
 6509              	.LBE1279:
 355:src/int.c     **** #ifndef TINY_BUILD
 6510              		.loc 1 355 59 view .LVU1857
 6511 0014 8046     		mov	r8, r0
 6512 0016 8946     		mov	r9, r1
 359:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6513              		.loc 1 359 30 view .LVU1858
 6514 0018 1046     		mov	r0, r2
 6515              	.LVL495:
 359:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6516              		.loc 1 359 30 view .LVU1859
 6517 001a 2946     		mov	r1, r5
 6518 001c 02AA     		add	r2, sp, #8
 6519              	.LVL496:
 6520              	.LBB1280:
 6521              	.LBB1276:
  39:src/int.c     **** }
 6522              		.loc 1 39 39 view .LVU1860
 6523 001e 0193     		str	r3, [sp, #4]
 6524              	.LVL497:
  39:src/int.c     **** }
 6525              		.loc 1 39 39 view .LVU1861
 6526              	.LBE1276:
 6527              	.LBE1280:
 358:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 6528              		.loc 1 358 2 is_stmt 1 view .LVU1862
 359:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6529              		.loc 1 359 2 view .LVU1863
 359:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6530              		.loc 1 359 30 is_stmt 0 view .LVU1864
 6531 0020 FFF7FEFF 		bl	extract_value
 6532              	.LVL498:
 359:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6533              		.loc 1 359 30 view .LVU1865
 6534 0024 0246     		mov	r2, r0
 6535 0026 0B46     		mov	r3, r1
 6536 0028 1446     		mov	r4, r2
 360:src/int.c     **** 	unsigned long long int r;
 6537              		.loc 1 360 30 view .LVU1866
 6538 002a 4046     		mov	r0, r8
 6539 002c 4946     		mov	r1, r9
 6540 002e 03AA     		add	r2, sp, #12
 359:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6541              		.loc 1 359 30 view .LVU1867
 6542 0030 1D46     		mov	r5, r3
 6543              	.LVL499:
 360:src/int.c     **** 	unsigned long long int r;
 6544              		.loc 1 360 2 is_stmt 1 view .LVU1868
 360:src/int.c     **** 	unsigned long long int r;
 6545              		.loc 1 360 30 is_stmt 0 view .LVU1869
 6546 0032 FFF7FEFF 		bl	extract_value
 6547              	.LVL500:
 364:src/int.c     **** 		err_div0(yv, sy, sx);
 6548              		.loc 1 364 5 view .LVU1870
ARM GAS  /tmp/ccl34fCK.s 			page 172


 6549 0036 54EA0503 		orrs	r3, r4, r5
 360:src/int.c     **** 	unsigned long long int r;
 6550              		.loc 1 360 30 view .LVU1871
 6551 003a 0646     		mov	r6, r0
 6552 003c 0F46     		mov	r7, r1
 6553              	.LVL501:
 361:src/int.c     **** 	long long int tbm;
 6554              		.loc 1 361 2 is_stmt 1 view .LVU1872
 362:src/int.c     **** 
 6555              		.loc 1 362 2 view .LVU1873
 364:src/int.c     **** 		err_div0(yv, sy, sx);
 6556              		.loc 1 364 2 view .LVU1874
 364:src/int.c     **** 		err_div0(yv, sy, sx);
 6557              		.loc 1 364 5 is_stmt 0 view .LVU1875
 6558 003e 0FD1     		bne	.L389
 365:src/int.c     **** 		return 0;
 6559              		.loc 1 365 3 is_stmt 1 view .LVU1876
 6560              	.LVL502:
 6561              	.LBB1281:
 6562              	.LBI1281:
 345:src/int.c     **** 	if (num == 0)
 6563              		.loc 1 345 13 view .LVU1877
 6564              	.LBB1282:
 346:src/int.c     **** 		report_err(ERR_DOMAIN);
 6565              		.loc 1 346 2 view .LVU1878
 346:src/int.c     **** 		report_err(ERR_DOMAIN);
 6566              		.loc 1 346 5 is_stmt 0 view .LVU1879
 6567 0040 56EA0703 		orrs	r3, r6, r7
 6568 0044 7FD0     		beq	.L410
 6569              	.LVL503:
 6570              	.LBB1283:
 6571              	.LBI1283:
 345:src/int.c     **** 	if (num == 0)
 6572              		.loc 1 345 13 is_stmt 1 view .LVU1880
 6573              	.LBB1284:
 348:src/int.c     **** 		report_err(ERR_INFINITY);
 6574              		.loc 1 348 7 view .LVU1881
 348:src/int.c     **** 		report_err(ERR_INFINITY);
 6575              		.loc 1 348 10 is_stmt 0 view .LVU1882
 6576 0046 DDE90232 		ldrd	r3, r2, [sp, #8]
 6577 004a 9A42     		cmp	r2, r3
 349:src/int.c     **** 	else
 6578              		.loc 1 349 3 is_stmt 1 view .LVU1883
 6579 004c 0CBF     		ite	eq
 6580 004e 0420     		moveq	r0, #4
 6581              	.LVL504:
 351:src/int.c     **** }
 6582              		.loc 1 351 3 view .LVU1884
 6583 0050 0520     		movne	r0, #5
 6584 0052 FFF7FEFF 		bl	report_err
 6585              	.LVL505:
 351:src/int.c     **** }
 6586              		.loc 1 351 3 is_stmt 0 view .LVU1885
 6587              	.LBE1284:
 6588              	.LBE1283:
 6589              	.LBE1282:
 6590              	.LBE1281:
ARM GAS  /tmp/ccl34fCK.s 			page 173


 366:src/int.c     **** 	}
 6591              		.loc 1 366 10 view .LVU1886
 6592 0056 2046     		mov	r0, r4
 6593 0058 2946     		mov	r1, r5
 385:src/int.c     **** 
 6594              		.loc 1 385 1 view .LVU1887
 6595 005a 05B0     		add	sp, sp, #20
 6596              		.cfi_remember_state
 6597              		.cfi_def_cfa_offset 36
 6598              		@ sp needed
 6599 005c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6600              	.LVL506:
 6601              	.L389:
 6602              		.cfi_restore_state
 368:src/int.c     **** 	r = mask_value(yv / xv);
 6603              		.loc 1 368 2 is_stmt 1 view .LVU1888
 6604              	.LBB1286:
 6605              	.LBI1286:
  66:src/int.c     **** #ifndef TINY_BUILD
 6606              		.loc 1 66 6 view .LVU1889
 6607              	.LBB1287:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6608              		.loc 1 68 2 view .LVU1890
  71:src/int.c     **** #endif
 6609              		.loc 1 71 3 view .LVU1891
 6610 0060 5221     		movs	r1, #82
 6611 0062 6920     		movs	r0, #105
 6612              	.LVL507:
  71:src/int.c     **** #endif
 6613              		.loc 1 71 3 is_stmt 0 view .LVU1892
 6614 0064 FFF7FEFF 		bl	cmdflag
 6615              	.LVL508:
  71:src/int.c     **** #endif
 6616              		.loc 1 71 3 view .LVU1893
 6617              	.LBE1287:
 6618              	.LBE1286:
 369:src/int.c     **** 	// Set carry if there is a remainder
 6619              		.loc 1 369 2 is_stmt 1 view .LVU1894
 369:src/int.c     **** 	// Set carry if there is a remainder
 6620              		.loc 1 369 20 is_stmt 0 view .LVU1895
 6621 0068 2246     		mov	r2, r4
 6622 006a 2B46     		mov	r3, r5
 6623 006c 3046     		mov	r0, r6
 6624 006e 3946     		mov	r1, r7
 6625 0070 FFF7FEFF 		bl	__aeabi_uldivmod
 6626              	.LVL509:
 6627              	.LBB1288:
 6628              	.LBB1289:
 6629              	.LBB1290:
 6630              	.LBB1291:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6631              		.loc 1 43 26 view .LVU1896
 6632 0074 9BF8E9A7 		ldrb	r10, [fp, #2025]	@ zero_extendqisi2
 6633              	.LBE1291:
 6634              	.LBE1290:
 6635              	.LBE1289:
 6636              	.LBE1288:
ARM GAS  /tmp/ccl34fCK.s 			page 174


 369:src/int.c     **** 	// Set carry if there is a remainder
 6637              		.loc 1 369 20 view .LVU1897
 6638 0078 0091     		str	r1, [sp]
 6639              	.LVL510:
 6640              	.LBB1298:
 6641              	.LBI1288:
  91:src/int.c     **** #ifndef TINY_BUILD
 6642              		.loc 1 91 15 is_stmt 1 view .LVU1898
 6643              	.LBB1296:
  93:src/int.c     **** 	long long int mask;
 6644              		.loc 1 93 2 view .LVU1899
 6645              	.LBB1294:
 6646              	.LBI1290:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 6647              		.loc 1 42 14 view .LVU1900
 6648              	.LBB1292:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6649              		.loc 1 43 2 view .LVU1901
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6650              		.loc 1 43 15 is_stmt 0 view .LVU1902
 6651 007a 0AF03F03 		and	r3, r10, #63
 6652              	.LVL511:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6653              		.loc 1 44 2 is_stmt 1 view .LVU1903
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6654              		.loc 1 44 26 is_stmt 0 view .LVU1904
 6655 007e 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6656              		.loc 1 44 5 view .LVU1905
 6657 0080 3E2A     		cmp	r2, #62
 6658              	.LBE1292:
 6659              	.LBE1294:
 6660              	.LBE1296:
 6661              	.LBE1298:
 369:src/int.c     **** 	// Set carry if there is a remainder
 6662              		.loc 1 369 20 view .LVU1906
 6663 0082 8246     		mov	r10, r0
 6664              	.LBB1299:
 6665              	.LBB1297:
 6666              	.LBB1295:
 6667              	.LBB1293:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6668              		.loc 1 44 5 view .LVU1907
 6669 0084 16D8     		bhi	.L393
 6670              	.LVL512:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6671              		.loc 1 44 5 view .LVU1908
 6672              	.LBE1293:
 6673              	.LBE1295:
  94:src/int.c     **** 
 6674              		.loc 1 94 2 is_stmt 1 view .LVU1909
  96:src/int.c     **** 		return v;
 6675              		.loc 1 96 2 view .LVU1910
  98:src/int.c     **** 	return v & mask;
 6676              		.loc 1 98 2 view .LVU1911
  99:src/int.c     **** #else
 6677              		.loc 1 99 2 view .LVU1912
ARM GAS  /tmp/ccl34fCK.s 			page 175


  98:src/int.c     **** 	return v & mask;
 6678              		.loc 1 98 14 is_stmt 0 view .LVU1913
 6679 0086 4FF0010A 		mov	r10, #1
 6680 008a A3F12002 		sub	r2, r3, #32
 6681 008e C3F1200C 		rsb	ip, r3, #32
 6682 0092 0AFA02F2 		lsl	r2, r10, r2
 6683 0096 2AFA0CFC 		lsr	ip, r10, ip
 6684 009a 0AFA03FA 		lsl	r10, r10, r3
  98:src/int.c     **** 	return v & mask;
 6685              		.loc 1 98 7 view .LVU1914
 6686 009e 1AF1FF3A 		adds	r10, r10, #-1
  98:src/int.c     **** 	return v & mask;
 6687              		.loc 1 98 14 view .LVU1915
 6688 00a2 42EA0C02 		orr	r2, r2, ip
  98:src/int.c     **** 	return v & mask;
 6689              		.loc 1 98 7 view .LVU1916
 6690 00a6 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 6691              		.loc 1 99 11 view .LVU1917
 6692 00aa 02EA0103 		and	r3, r2, r1
 6693              	.LVL513:
  99:src/int.c     **** #else
 6694              		.loc 1 99 11 view .LVU1918
 6695 00ae 0093     		str	r3, [sp]
 6696 00b0 0AEA000A 		and	r10, r10, r0
 6697              	.LVL514:
 6698              	.L393:
  99:src/int.c     **** #else
 6699              		.loc 1 99 11 view .LVU1919
 6700              	.LBE1297:
 6701              	.LBE1299:
 371:src/int.c     **** 
 6702              		.loc 1 371 2 is_stmt 1 view .LVU1920
 6703              	.LBB1300:
 6704              	.LBI1300:
  53:src/int.c     **** #ifndef TINY_BUILD
 6705              		.loc 1 53 6 view .LVU1921
 6706              	.LBB1301:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6707              		.loc 1 55 2 view .LVU1922
 6708              	.LBE1301:
 6709              	.LBE1300:
 371:src/int.c     **** 
 6710              		.loc 1 371 14 is_stmt 0 view .LVU1923
 6711 00b4 009B     		ldr	r3, [sp]
 6712 00b6 04FB03F1 		mul	r1, r4, r3
 6713 00ba 0AFB0511 		mla	r1, r10, r5, r1
 6714 00be A4FB0A23 		umull	r2, r3, r4, r10
 6715 00c2 0B44     		add	r3, r3, r1
 6716              	.LBB1304:
 6717              	.LBB1302:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6718              		.loc 1 55 5 view .LVU1924
 6719 00c4 BB42     		cmp	r3, r7
 6720 00c6 08BF     		it	eq
 6721 00c8 B242     		cmpeq	r2, r6
 6722 00ca 37D0     		beq	.L394
ARM GAS  /tmp/ccl34fCK.s 			page 176


 6723 00cc FFF7FEFF 		bl	set_carry.part.0
 6724              	.LVL515:
 6725              	.L395:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6726              		.loc 1 55 5 view .LVU1925
 6727              	.LBE1302:
 6728              	.LBE1304:
 373:src/int.c     **** 		tbm = topbit_mask();
 6729              		.loc 1 373 2 is_stmt 1 view .LVU1926
 373:src/int.c     **** 		tbm = topbit_mask();
 6730              		.loc 1 373 5 is_stmt 0 view .LVU1927
 6731 00d0 019B     		ldr	r3, [sp, #4]
 6732 00d2 022B     		cmp	r3, #2
 6733 00d4 28D0     		beq	.L409
 374:src/int.c     **** 		if (r & tbm)
 6734              		.loc 1 374 3 is_stmt 1 view .LVU1928
 6735              	.LBB1305:
 6736              	.LBI1305:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 6737              		.loc 1 109 22 view .LVU1929
 6738              	.LBB1306:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 6739              		.loc 1 110 2 view .LVU1930
 6740              	.LBB1307:
 6741              	.LBI1307:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 6742              		.loc 1 42 14 view .LVU1931
 6743              	.LBB1308:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6744              		.loc 1 43 2 view .LVU1932
 6745              	.LVL516:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6746              		.loc 1 44 2 view .LVU1933
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6747              		.loc 1 43 26 is_stmt 0 view .LVU1934
 6748 00d6 9BF8E937 		ldrb	r3, [fp, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 6749              		.loc 1 43 15 view .LVU1935
 6750 00da 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6751              		.loc 1 44 26 view .LVU1936
 6752 00de 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6753              		.loc 1 44 5 view .LVU1937
 6754 00e0 3E2A     		cmp	r2, #62
 6755 00e2 3BD8     		bhi	.L401
 6756 00e4 0121     		movs	r1, #1
 6757 00e6 213B     		subs	r3, r3, #33
 6758 00e8 C2F12000 		rsb	r0, r2, #32
 6759 00ec 21FA00F0 		lsr	r0, r1, r0
 6760 00f0 01FA03F7 		lsl	r7, r1, r3
 6761 00f4 0743     		orrs	r7, r7, r0
 6762 00f6 01FA02F6 		lsl	r6, r1, r2
 6763 00fa 3046     		mov	r0, r6
 6764 00fc 3946     		mov	r1, r7
 6765              	.L398:
 6766              	.LVL517:
ARM GAS  /tmp/ccl34fCK.s 			page 177


  44:src/int.c     **** 		return MAX_WORD_SIZE;
 6767              		.loc 1 44 5 view .LVU1938
 6768              	.LBE1308:
 6769              	.LBE1307:
 111:src/int.c     **** 	return bit;
 6770              		.loc 1 111 2 is_stmt 1 view .LVU1939
 112:src/int.c     **** }
 6771              		.loc 1 112 2 view .LVU1940
 112:src/int.c     **** }
 6772              		.loc 1 112 2 is_stmt 0 view .LVU1941
 6773              	.LBE1306:
 6774              	.LBE1305:
 375:src/int.c     **** 			set_carry(1);
 6775              		.loc 1 375 3 is_stmt 1 view .LVU1942
 375:src/int.c     **** 			set_carry(1);
 6776              		.loc 1 375 9 is_stmt 0 view .LVU1943
 6777 00fe 0AEA0002 		and	r2, r10, r0
 6778 0102 0098     		ldr	r0, [sp]
 6779 0104 00EA0103 		and	r3, r0, r1
 375:src/int.c     **** 			set_carry(1);
 6780              		.loc 1 375 6 view .LVU1944
 6781 0108 1343     		orrs	r3, r2, r3
 6782 010a 24D1     		bne	.L411
 6783              	.L399:
 378:src/int.c     **** 			set_overflow(1);
 6784              		.loc 1 378 3 is_stmt 1 view .LVU1945
 378:src/int.c     **** 			set_overflow(1);
 6785              		.loc 1 378 6 is_stmt 0 view .LVU1946
 6786 010c 019B     		ldr	r3, [sp, #4]
 6787 010e 5BB9     		cbnz	r3, .L409
 378:src/int.c     **** 			set_overflow(1);
 6788              		.loc 1 378 26 discriminator 1 view .LVU1947
 6789 0110 029B     		ldr	r3, [sp, #8]
 6790 0112 53B1     		cbz	r3, .L397
 378:src/int.c     **** 			set_overflow(1);
 6791              		.loc 1 378 32 discriminator 2 view .LVU1948
 6792 0114 002D     		cmp	r5, #0
 6793 0116 08BF     		it	eq
 6794 0118 012C     		cmpeq	r4, #1
 6795 011a 06D1     		bne	.L397
 378:src/int.c     **** 			set_overflow(1);
 6796              		.loc 1 378 43 discriminator 3 view .LVU1949
 6797 011c B945     		cmp	r9, r7
 6798 011e 08BF     		it	eq
 6799 0120 B045     		cmpeq	r8, r6
 6800 0122 02D1     		bne	.L397
 379:src/int.c     **** 	}
 6801              		.loc 1 379 4 is_stmt 1 view .LVU1950
 6802              	.LVL518:
 6803              	.LBB1312:
 6804              	.LBI1312:
  66:src/int.c     **** #ifndef TINY_BUILD
 6805              		.loc 1 66 6 view .LVU1951
 6806              	.LBB1313:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6807              		.loc 1 68 2 view .LVU1952
 6808 0124 FFF7FEFF 		bl	set_overflow.part.0
ARM GAS  /tmp/ccl34fCK.s 			page 178


 6809              	.LVL519:
 6810              	.L409:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 6811              		.loc 1 68 2 is_stmt 0 view .LVU1953
 6812 0128 029B     		ldr	r3, [sp, #8]
 6813              	.L397:
 6814              	.LBE1313:
 6815              	.LBE1312:
 381:src/int.c     **** #else
 6816              		.loc 1 381 2 is_stmt 1 view .LVU1954
 381:src/int.c     **** #else
 6817              		.loc 1 381 9 is_stmt 0 view .LVU1955
 6818 012a 039A     		ldr	r2, [sp, #12]
 6819 012c 0099     		ldr	r1, [sp]
 6820 012e 5046     		mov	r0, r10
 6821 0130 5A40     		eors	r2, r2, r3
 6822 0132 FFF7FEFF 		bl	build_value
 6823              	.LVL520:
 385:src/int.c     **** 
 6824              		.loc 1 385 1 view .LVU1956
 6825 0136 05B0     		add	sp, sp, #20
 6826              		.cfi_remember_state
 6827              		.cfi_def_cfa_offset 36
 6828              		@ sp needed
 6829 0138 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6830              	.LVL521:
 6831              	.L394:
 6832              		.cfi_restore_state
 6833              	.LBB1314:
 6834              	.LBB1303:
  58:src/int.c     **** #endif
 6835              		.loc 1 58 3 is_stmt 1 view .LVU1957
 6836 013c 5221     		movs	r1, #82
 6837 013e 6A20     		movs	r0, #106
 6838 0140 FFF7FEFF 		bl	cmdflag
 6839              	.LVL522:
 6840 0144 C4E7     		b	.L395
 6841              	.LVL523:
 6842              	.L410:
  58:src/int.c     **** #endif
 6843              		.loc 1 58 3 is_stmt 0 view .LVU1958
 6844              	.LBE1303:
 6845              	.LBE1314:
 6846              	.LBB1315:
 6847              	.LBB1285:
 347:src/int.c     **** 	else if (sn == sd)
 6848              		.loc 1 347 3 is_stmt 1 view .LVU1959
 6849 0146 0120     		movs	r0, #1
 6850              	.LVL524:
 347:src/int.c     **** 	else if (sn == sd)
 6851              		.loc 1 347 3 is_stmt 0 view .LVU1960
 6852 0148 FFF7FEFF 		bl	report_err
 6853              	.LVL525:
 347:src/int.c     **** 	else if (sn == sd)
 6854              		.loc 1 347 3 view .LVU1961
 6855              	.LBE1285:
 6856              	.LBE1315:
ARM GAS  /tmp/ccl34fCK.s 			page 179


 366:src/int.c     **** 	}
 6857              		.loc 1 366 10 view .LVU1962
 6858 014c 3046     		mov	r0, r6
 6859 014e 3946     		mov	r1, r7
 385:src/int.c     **** 
 6860              		.loc 1 385 1 view .LVU1963
 6861 0150 05B0     		add	sp, sp, #20
 6862              		.cfi_remember_state
 6863              		.cfi_def_cfa_offset 36
 6864              		@ sp needed
 6865 0152 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6866              	.LVL526:
 6867              	.L411:
 6868              		.cfi_restore_state
 376:src/int.c     **** 		// Special case for 0x8000...00 / -1 in 2's complement
 6869              		.loc 1 376 4 is_stmt 1 view .LVU1964
 6870              	.LBB1316:
 6871              	.LBI1316:
  53:src/int.c     **** #ifndef TINY_BUILD
 6872              		.loc 1 53 6 view .LVU1965
 6873              	.LBB1317:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 6874              		.loc 1 55 2 view .LVU1966
 6875 0156 FFF7FEFF 		bl	set_carry.part.0
 6876              	.LVL527:
  60:src/int.c     **** 
 6877              		.loc 1 60 1 is_stmt 0 view .LVU1967
 6878 015a D7E7     		b	.L399
 6879              	.LVL528:
 6880              	.L401:
  60:src/int.c     **** 
 6881              		.loc 1 60 1 view .LVU1968
 6882              	.LBE1317:
 6883              	.LBE1316:
 6884              	.LBB1318:
 6885              	.LBB1311:
 6886              	.LBB1310:
 6887              	.LBB1309:
 6888 015c 0026     		movs	r6, #0
 6889 015e 4FF00047 		mov	r7, #-2147483648
 6890 0162 0020     		movs	r0, #0
 6891 0164 4FF00041 		mov	r1, #-2147483648
 6892 0168 C9E7     		b	.L398
 6893              	.L413:
 6894 016a 00BF     		.align	2
 6895              	.L412:
 6896 016c 00000000 		.word	PersistentRam
 6897              	.LBE1309:
 6898              	.LBE1310:
 6899              	.LBE1311:
 6900              	.LBE1318:
 6901              		.cfi_endproc
 6902              	.LFE21:
 6904              		.section	.text.intMod,"ax",%progbits
 6905              		.align	1
 6906              		.p2align 2,,3
 6907              		.global	intMod
ARM GAS  /tmp/ccl34fCK.s 			page 180


 6908              		.syntax unified
 6909              		.thumb
 6910              		.thumb_func
 6911              		.fpu fpv4-sp-d16
 6913              	intMod:
 6914              	.LVL529:
 6915              	.LFB22:
 387:src/int.c     **** #ifndef TINY_BUILD
 6916              		.loc 1 387 56 is_stmt 1 view -0
 6917              		.cfi_startproc
 6918              		@ args = 0, pretend = 0, frame = 8
 6919              		@ frame_needed = 0, uses_anonymous_args = 0
 389:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 6920              		.loc 1 389 2 view .LVU1970
 390:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6921              		.loc 1 390 2 view .LVU1971
 387:src/int.c     **** #ifndef TINY_BUILD
 6922              		.loc 1 387 56 is_stmt 0 view .LVU1972
 6923 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6924              		.cfi_def_cfa_offset 20
 6925              		.cfi_offset 4, -20
 6926              		.cfi_offset 5, -16
 6927              		.cfi_offset 6, -12
 6928              		.cfi_offset 7, -8
 6929              		.cfi_offset 14, -4
 6930 0002 83B0     		sub	sp, sp, #12
 6931              		.cfi_def_cfa_offset 32
 387:src/int.c     **** #ifndef TINY_BUILD
 6932              		.loc 1 387 56 view .LVU1973
 6933 0004 0746     		mov	r7, r0
 6934 0006 0E46     		mov	r6, r1
 390:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6935              		.loc 1 390 30 view .LVU1974
 6936 0008 1046     		mov	r0, r2
 6937              	.LVL530:
 390:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6938              		.loc 1 390 30 view .LVU1975
 6939 000a 1946     		mov	r1, r3
 6940 000c 6A46     		mov	r2, sp
 6941              	.LVL531:
 390:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 6942              		.loc 1 390 30 view .LVU1976
 6943 000e FFF7FEFF 		bl	extract_value
 6944              	.LVL532:
 6945 0012 0B46     		mov	r3, r1
 6946 0014 0246     		mov	r2, r0
 6947 0016 1446     		mov	r4, r2
 6948 0018 1D46     		mov	r5, r3
 6949              	.LVL533:
 391:src/int.c     **** 	unsigned long long int r;
 6950              		.loc 1 391 2 is_stmt 1 view .LVU1977
 391:src/int.c     **** 	unsigned long long int r;
 6951              		.loc 1 391 30 is_stmt 0 view .LVU1978
 6952 001a 3846     		mov	r0, r7
 6953 001c 3146     		mov	r1, r6
 6954 001e 01AA     		add	r2, sp, #4
 6955 0020 FFF7FEFF 		bl	extract_value
ARM GAS  /tmp/ccl34fCK.s 			page 181


 6956              	.LVL534:
 392:src/int.c     **** 
 6957              		.loc 1 392 2 is_stmt 1 view .LVU1979
 394:src/int.c     **** 		err_div0(yv, sy, sx);
 6958              		.loc 1 394 2 view .LVU1980
 394:src/int.c     **** 		err_div0(yv, sy, sx);
 6959              		.loc 1 394 5 is_stmt 0 view .LVU1981
 6960 0024 54EA0503 		orrs	r3, r4, r5
 6961 0028 1DD0     		beq	.L426
 398:src/int.c     **** #ifdef INCLUDE_MOD41
 6962              		.loc 1 398 2 is_stmt 1 view .LVU1982
 398:src/int.c     **** #ifdef INCLUDE_MOD41
 6963              		.loc 1 398 4 is_stmt 0 view .LVU1983
 6964 002a 2246     		mov	r2, r4
 6965 002c 2B46     		mov	r3, r5
 6966 002e FFF7FEFF 		bl	__aeabi_uldivmod
 6967              	.LVL535:
 400:src/int.c     ****         if (r != 0)
 6968              		.loc 1 400 16 view .LVU1984
 6969 0032 194E     		ldr	r6, .L428
 400:src/int.c     ****         if (r != 0)
 6970              		.loc 1 400 5 view .LVU1985
 6971 0034 3688     		ldrh	r6, [r6]
 398:src/int.c     **** #ifdef INCLUDE_MOD41
 6972              		.loc 1 398 4 view .LVU1986
 6973 0036 1046     		mov	r0, r2
 400:src/int.c     ****         if (r != 0)
 6974              		.loc 1 400 5 view .LVU1987
 6975 0038 40F20732 		movw	r2, #775
 6976 003c 9642     		cmp	r6, r2
 398:src/int.c     **** #ifdef INCLUDE_MOD41
 6977              		.loc 1 398 4 view .LVU1988
 6978 003e 1946     		mov	r1, r3
 6979              	.LVL536:
 400:src/int.c     ****         if (r != 0)
 6980              		.loc 1 400 2 is_stmt 1 view .LVU1989
 400:src/int.c     ****         if (r != 0)
 6981              		.loc 1 400 5 is_stmt 0 view .LVU1990
 6982 0040 04D0     		beq	.L419
 6983 0042 019A     		ldr	r2, [sp, #4]
 6984              	.L420:
 406:src/int.c     **** #else
 6985              		.loc 1 406 2 is_stmt 1 view .LVU1991
 406:src/int.c     **** #else
 6986              		.loc 1 406 9 is_stmt 0 view .LVU1992
 6987 0044 FFF7FEFF 		bl	build_value
 6988              	.LVL537:
 410:src/int.c     **** 
 6989              		.loc 1 410 1 view .LVU1993
 6990 0048 03B0     		add	sp, sp, #12
 6991              		.cfi_remember_state
 6992              		.cfi_def_cfa_offset 20
 6993              		@ sp needed
 6994 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 6995              	.LVL538:
 6996              	.L419:
 6997              		.cfi_restore_state
ARM GAS  /tmp/ccl34fCK.s 			page 182


 400:src/int.c     ****         if (r != 0)
 6998              		.loc 1 400 45 discriminator 1 view .LVU1994
 6999 004c DDE90032 		ldrd	r3, r2, [sp]
 400:src/int.c     ****         if (r != 0)
 7000              		.loc 1 400 39 discriminator 1 view .LVU1995
 7001 0050 9342     		cmp	r3, r2
 7002 0052 F7D0     		beq	.L420
 401:src/int.c     **** 		    r = xv - r;
 7003              		.loc 1 401 9 is_stmt 1 view .LVU1996
 401:src/int.c     **** 		    r = xv - r;
 7004              		.loc 1 401 12 is_stmt 0 view .LVU1997
 7005 0054 50EA0102 		orrs	r2, r0, r1
 7006 0058 02D0     		beq	.L421
 402:src/int.c     **** 		sy = sx;
 7007              		.loc 1 402 7 is_stmt 1 view .LVU1998
 402:src/int.c     **** 		sy = sx;
 7008              		.loc 1 402 9 is_stmt 0 view .LVU1999
 7009 005a 201A     		subs	r0, r4, r0
 7010              	.LVL539:
 402:src/int.c     **** 		sy = sx;
 7011              		.loc 1 402 9 view .LVU2000
 7012 005c 65EB0101 		sbc	r1, r5, r1
 7013              	.LVL540:
 7014              	.L421:
 403:src/int.c     **** 	}
 7015              		.loc 1 403 3 is_stmt 1 view .LVU2001
 403:src/int.c     **** 	}
 7016              		.loc 1 403 6 is_stmt 0 view .LVU2002
 7017 0060 0193     		str	r3, [sp, #4]
 7018 0062 1A46     		mov	r2, r3
 7019 0064 EEE7     		b	.L420
 7020              	.LVL541:
 7021              	.L426:
 403:src/int.c     **** 	}
 7022              		.loc 1 403 6 view .LVU2003
 7023 0066 0646     		mov	r6, r0
 7024 0068 0F46     		mov	r7, r1
 395:src/int.c     **** 		return 0;
 7025              		.loc 1 395 3 is_stmt 1 view .LVU2004
 7026              	.LVL542:
 7027              	.LBB1323:
 7028              	.LBI1323:
 345:src/int.c     **** 	if (num == 0)
 7029              		.loc 1 345 13 view .LVU2005
 7030              	.LBB1324:
 346:src/int.c     **** 		report_err(ERR_DOMAIN);
 7031              		.loc 1 346 2 view .LVU2006
 346:src/int.c     **** 		report_err(ERR_DOMAIN);
 7032              		.loc 1 346 5 is_stmt 0 view .LVU2007
 7033 006a 56EA0703 		orrs	r3, r6, r7
 7034 006e 0BD0     		beq	.L427
 7035              	.LVL543:
 7036              	.LBB1325:
 7037              	.LBI1325:
 345:src/int.c     **** 	if (num == 0)
 7038              		.loc 1 345 13 is_stmt 1 view .LVU2008
 7039              	.LBB1326:
ARM GAS  /tmp/ccl34fCK.s 			page 183


 348:src/int.c     **** 		report_err(ERR_INFINITY);
 7040              		.loc 1 348 7 view .LVU2009
 348:src/int.c     **** 		report_err(ERR_INFINITY);
 7041              		.loc 1 348 10 is_stmt 0 view .LVU2010
 7042 0070 DDE90032 		ldrd	r3, r2, [sp]
 7043 0074 9A42     		cmp	r2, r3
 349:src/int.c     **** 	else
 7044              		.loc 1 349 3 is_stmt 1 view .LVU2011
 7045 0076 0CBF     		ite	eq
 7046 0078 0420     		moveq	r0, #4
 7047              	.LVL544:
 351:src/int.c     **** }
 7048              		.loc 1 351 3 view .LVU2012
 7049 007a 0520     		movne	r0, #5
 7050 007c FFF7FEFF 		bl	report_err
 7051              	.LVL545:
 351:src/int.c     **** }
 7052              		.loc 1 351 3 is_stmt 0 view .LVU2013
 7053              	.LBE1326:
 7054              	.LBE1325:
 7055              	.LBE1324:
 7056              	.LBE1323:
 396:src/int.c     **** 	}
 7057              		.loc 1 396 10 view .LVU2014
 7058 0080 2046     		mov	r0, r4
 7059 0082 2946     		mov	r1, r5
 410:src/int.c     **** 
 7060              		.loc 1 410 1 view .LVU2015
 7061 0084 03B0     		add	sp, sp, #12
 7062              		.cfi_remember_state
 7063              		.cfi_def_cfa_offset 20
 7064              		@ sp needed
 7065 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 7066              	.LVL546:
 7067              	.L427:
 7068              		.cfi_restore_state
 7069              	.LBB1328:
 7070              	.LBB1327:
 347:src/int.c     **** 	else if (sn == sd)
 7071              		.loc 1 347 3 is_stmt 1 view .LVU2016
 7072 0088 0120     		movs	r0, #1
 7073              	.LVL547:
 347:src/int.c     **** 	else if (sn == sd)
 7074              		.loc 1 347 3 is_stmt 0 view .LVU2017
 7075 008a FFF7FEFF 		bl	report_err
 7076              	.LVL548:
 347:src/int.c     **** 	else if (sn == sd)
 7077              		.loc 1 347 3 view .LVU2018
 7078              	.LBE1327:
 7079              	.LBE1328:
 396:src/int.c     **** 	}
 7080              		.loc 1 396 10 view .LVU2019
 7081 008e 3046     		mov	r0, r6
 7082 0090 3946     		mov	r1, r7
 410:src/int.c     **** 
 7083              		.loc 1 410 1 view .LVU2020
 7084 0092 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccl34fCK.s 			page 184


 7085              		.cfi_def_cfa_offset 20
 7086              		@ sp needed
 7087 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 7088              	.LVL549:
 7089              	.L429:
 410:src/int.c     **** 
 7090              		.loc 1 410 1 view .LVU2021
 7091 0096 00BF     		.align	2
 7092              	.L428:
 7093 0098 00000000 		.word	XeqOpCode
 7094              		.cfi_endproc
 7095              	.LFE22:
 7097              		.section	.text.intMin,"ax",%progbits
 7098              		.align	1
 7099              		.p2align 2,,3
 7100              		.global	intMin
 7101              		.syntax unified
 7102              		.thumb
 7103              		.thumb_func
 7104              		.fpu fpv4-sp-d16
 7106              	intMin:
 7107              	.LVL550:
 7108              	.LFB23:
 413:src/int.c     **** #ifndef TINY_BUILD
 7109              		.loc 1 413 56 is_stmt 1 view -0
 7110              		.cfi_startproc
 7111              		@ args = 0, pretend = 0, frame = 8
 7112              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/int.c     **** 	const unsigned long long int xv = extract_value(x, &sx);
 7113              		.loc 1 415 2 view .LVU2023
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7114              		.loc 1 416 2 view .LVU2024
 413:src/int.c     **** #ifndef TINY_BUILD
 7115              		.loc 1 413 56 is_stmt 0 view .LVU2025
 7116 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7117              		.cfi_def_cfa_offset 28
 7118              		.cfi_offset 4, -28
 7119              		.cfi_offset 5, -24
 7120              		.cfi_offset 6, -20
 7121              		.cfi_offset 7, -16
 7122              		.cfi_offset 8, -12
 7123              		.cfi_offset 9, -8
 7124              		.cfi_offset 14, -4
 7125 0004 83B0     		sub	sp, sp, #12
 7126              		.cfi_def_cfa_offset 40
 413:src/int.c     **** #ifndef TINY_BUILD
 7127              		.loc 1 413 56 view .LVU2026
 7128 0006 0546     		mov	r5, r0
 7129 0008 0C46     		mov	r4, r1
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7130              		.loc 1 416 36 view .LVU2027
 7131 000a 1046     		mov	r0, r2
 7132              	.LVL551:
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7133              		.loc 1 416 36 view .LVU2028
 7134 000c 1946     		mov	r1, r3
 413:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccl34fCK.s 			page 185


 7135              		.loc 1 413 56 view .LVU2029
 7136 000e 1746     		mov	r7, r2
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7137              		.loc 1 416 36 view .LVU2030
 7138 0010 6A46     		mov	r2, sp
 7139              	.LVL552:
 413:src/int.c     **** #ifndef TINY_BUILD
 7140              		.loc 1 413 56 view .LVU2031
 7141 0012 1E46     		mov	r6, r3
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7142              		.loc 1 416 36 view .LVU2032
 7143 0014 FFF7FEFF 		bl	extract_value
 7144              	.LVL553:
 7145 0018 0246     		mov	r2, r0
 7146 001a 0B46     		mov	r3, r1
 417:src/int.c     **** 
 7147              		.loc 1 417 36 view .LVU2033
 7148 001c 2846     		mov	r0, r5
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7149              		.loc 1 416 36 view .LVU2034
 7150 001e 9046     		mov	r8, r2
 417:src/int.c     **** 
 7151              		.loc 1 417 36 view .LVU2035
 7152 0020 2146     		mov	r1, r4
 7153 0022 01AA     		add	r2, sp, #4
 416:src/int.c     **** 	const unsigned long long int yv = extract_value(y, &sy);
 7154              		.loc 1 416 36 view .LVU2036
 7155 0024 9946     		mov	r9, r3
 7156              	.LVL554:
 417:src/int.c     **** 
 7157              		.loc 1 417 2 is_stmt 1 view .LVU2037
 417:src/int.c     **** 
 7158              		.loc 1 417 36 is_stmt 0 view .LVU2038
 7159 0026 FFF7FEFF 		bl	extract_value
 7160              	.LVL555:
 419:src/int.c     **** 		if (sx)
 7161              		.loc 1 419 9 view .LVU2039
 7162 002a DDF800C0 		ldr	ip, [sp]
 417:src/int.c     **** 
 7163              		.loc 1 417 36 view .LVU2040
 7164 002e 0B46     		mov	r3, r1
 419:src/int.c     **** 		if (sx)
 7165              		.loc 1 419 2 is_stmt 1 view .LVU2041
 419:src/int.c     **** 		if (sx)
 7166              		.loc 1 419 5 is_stmt 0 view .LVU2042
 7167 0030 0199     		ldr	r1, [sp, #4]
 7168 0032 8C45     		cmp	ip, r1
 7169 0034 07D0     		beq	.L431
 420:src/int.c     **** 			return x;
 7170              		.loc 1 420 3 is_stmt 1 view .LVU2043
 420:src/int.c     **** 			return x;
 7171              		.loc 1 420 6 is_stmt 0 view .LVU2044
 7172 0036 BCF1000F 		cmp	ip, #0
 7173 003a 0BD1     		bne	.L438
 7174              	.L432:
 433:src/int.c     **** 
 7175              		.loc 1 433 1 view .LVU2045
ARM GAS  /tmp/ccl34fCK.s 			page 186


 7176 003c 2846     		mov	r0, r5
 7177 003e 2146     		mov	r1, r4
 7178 0040 03B0     		add	sp, sp, #12
 7179              		.cfi_remember_state
 7180              		.cfi_def_cfa_offset 28
 7181              		@ sp needed
 7182 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7183              	.LVL556:
 7184              	.L431:
 7185              		.cfi_restore_state
 422:src/int.c     **** 		if (xv > yv)
 7186              		.loc 1 422 9 is_stmt 1 view .LVU2046
 422:src/int.c     **** 		if (xv > yv)
 7187              		.loc 1 422 12 is_stmt 0 view .LVU2047
 7188 0046 BCF1000F 		cmp	ip, #0
 7189 004a 0AD1     		bne	.L440
 426:src/int.c     **** 			return x;
 7190              		.loc 1 426 3 is_stmt 1 view .LVU2048
 426:src/int.c     **** 			return x;
 7191              		.loc 1 426 6 is_stmt 0 view .LVU2049
 7192 004c 9945     		cmp	r9, r3
 7193 004e 08BF     		it	eq
 7194 0050 8045     		cmpeq	r8, r0
 7195 0052 F3D2     		bcs	.L432
 7196              	.L438:
 421:src/int.c     **** 	} else if (sx) {		// both negative
 7197              		.loc 1 421 11 view .LVU2050
 7198 0054 3D46     		mov	r5, r7
 7199 0056 3446     		mov	r4, r6
 433:src/int.c     **** 
 7200              		.loc 1 433 1 view .LVU2051
 7201 0058 2846     		mov	r0, r5
 7202 005a 2146     		mov	r1, r4
 7203 005c 03B0     		add	sp, sp, #12
 7204              		.cfi_remember_state
 7205              		.cfi_def_cfa_offset 28
 7206              		@ sp needed
 7207 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7208              	.LVL557:
 7209              	.L440:
 7210              		.cfi_restore_state
 423:src/int.c     **** 			return x;
 7211              		.loc 1 423 3 is_stmt 1 view .LVU2052
 423:src/int.c     **** 			return x;
 7212              		.loc 1 423 6 is_stmt 0 view .LVU2053
 7213 0062 4B45     		cmp	r3, r9
 7214 0064 08BF     		it	eq
 7215 0066 4045     		cmpeq	r0, r8
 7216 0068 F4D3     		bcc	.L438
 433:src/int.c     **** 
 7217              		.loc 1 433 1 view .LVU2054
 7218 006a 2846     		mov	r0, r5
 7219 006c 2146     		mov	r1, r4
 7220 006e 03B0     		add	sp, sp, #12
 7221              		.cfi_def_cfa_offset 28
 7222              		@ sp needed
 7223 0070 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccl34fCK.s 			page 187


 433:src/int.c     **** 
 7224              		.loc 1 433 1 view .LVU2055
 7225              		.cfi_endproc
 7226              	.LFE23:
 7228              		.section	.text.intMax,"ax",%progbits
 7229              		.align	1
 7230              		.p2align 2,,3
 7231              		.global	intMax
 7232              		.syntax unified
 7233              		.thumb
 7234              		.thumb_func
 7235              		.fpu fpv4-sp-d16
 7237              	intMax:
 7238              	.LVL558:
 7239              	.LFB24:
 435:src/int.c     **** #ifndef TINY_BUILD
 7240              		.loc 1 435 56 is_stmt 1 view -0
 7241              		.cfi_startproc
 7242              		@ args = 0, pretend = 0, frame = 8
 7243              		@ frame_needed = 0, uses_anonymous_args = 0
 437:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 7244              		.loc 1 437 2 view .LVU2057
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7245              		.loc 1 438 2 view .LVU2058
 435:src/int.c     **** #ifndef TINY_BUILD
 7246              		.loc 1 435 56 is_stmt 0 view .LVU2059
 7247 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7248              		.cfi_def_cfa_offset 28
 7249              		.cfi_offset 4, -28
 7250              		.cfi_offset 5, -24
 7251              		.cfi_offset 6, -20
 7252              		.cfi_offset 7, -16
 7253              		.cfi_offset 8, -12
 7254              		.cfi_offset 9, -8
 7255              		.cfi_offset 14, -4
 7256 0004 83B0     		sub	sp, sp, #12
 7257              		.cfi_def_cfa_offset 40
 435:src/int.c     **** #ifndef TINY_BUILD
 7258              		.loc 1 435 56 view .LVU2060
 7259 0006 0746     		mov	r7, r0
 7260 0008 0E46     		mov	r6, r1
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7261              		.loc 1 438 30 view .LVU2061
 7262 000a 1046     		mov	r0, r2
 7263              	.LVL559:
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7264              		.loc 1 438 30 view .LVU2062
 7265 000c 1946     		mov	r1, r3
 435:src/int.c     **** #ifndef TINY_BUILD
 7266              		.loc 1 435 56 view .LVU2063
 7267 000e 1546     		mov	r5, r2
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7268              		.loc 1 438 30 view .LVU2064
 7269 0010 6A46     		mov	r2, sp
 7270              	.LVL560:
 435:src/int.c     **** #ifndef TINY_BUILD
 7271              		.loc 1 435 56 view .LVU2065
ARM GAS  /tmp/ccl34fCK.s 			page 188


 7272 0012 1C46     		mov	r4, r3
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7273              		.loc 1 438 30 view .LVU2066
 7274 0014 FFF7FEFF 		bl	extract_value
 7275              	.LVL561:
 7276 0018 0246     		mov	r2, r0
 7277 001a 0B46     		mov	r3, r1
 439:src/int.c     **** 
 7278              		.loc 1 439 30 view .LVU2067
 7279 001c 3846     		mov	r0, r7
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7280              		.loc 1 438 30 view .LVU2068
 7281 001e 9046     		mov	r8, r2
 439:src/int.c     **** 
 7282              		.loc 1 439 30 view .LVU2069
 7283 0020 3146     		mov	r1, r6
 7284 0022 01AA     		add	r2, sp, #4
 438:src/int.c     **** 	unsigned long long int yv = extract_value(y, &sy);
 7285              		.loc 1 438 30 view .LVU2070
 7286 0024 9946     		mov	r9, r3
 7287              	.LVL562:
 439:src/int.c     **** 
 7288              		.loc 1 439 2 is_stmt 1 view .LVU2071
 439:src/int.c     **** 
 7289              		.loc 1 439 30 is_stmt 0 view .LVU2072
 7290 0026 FFF7FEFF 		bl	extract_value
 7291              	.LVL563:
 441:src/int.c     **** 		if (sx)
 7292              		.loc 1 441 9 view .LVU2073
 7293 002a DDF800C0 		ldr	ip, [sp]
 439:src/int.c     **** 
 7294              		.loc 1 439 30 view .LVU2074
 7295 002e 0B46     		mov	r3, r1
 441:src/int.c     **** 		if (sx)
 7296              		.loc 1 441 2 is_stmt 1 view .LVU2075
 441:src/int.c     **** 		if (sx)
 7297              		.loc 1 441 5 is_stmt 0 view .LVU2076
 7298 0030 0199     		ldr	r1, [sp, #4]
 7299 0032 8C45     		cmp	ip, r1
 7300 0034 07D0     		beq	.L442
 442:src/int.c     **** 			return y;
 7301              		.loc 1 442 3 is_stmt 1 view .LVU2077
 442:src/int.c     **** 			return y;
 7302              		.loc 1 442 6 is_stmt 0 view .LVU2078
 7303 0036 BCF1000F 		cmp	ip, #0
 7304 003a 0BD1     		bne	.L449
 7305              	.L443:
 455:src/int.c     **** 
 7306              		.loc 1 455 1 view .LVU2079
 7307 003c 2846     		mov	r0, r5
 7308 003e 2146     		mov	r1, r4
 7309 0040 03B0     		add	sp, sp, #12
 7310              		.cfi_remember_state
 7311              		.cfi_def_cfa_offset 28
 7312              		@ sp needed
 7313 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7314              	.LVL564:
ARM GAS  /tmp/ccl34fCK.s 			page 189


 7315              	.L442:
 7316              		.cfi_restore_state
 444:src/int.c     **** 		if (xv > yv)
 7317              		.loc 1 444 9 is_stmt 1 view .LVU2080
 444:src/int.c     **** 		if (xv > yv)
 7318              		.loc 1 444 12 is_stmt 0 view .LVU2081
 7319 0046 BCF1000F 		cmp	ip, #0
 7320 004a 0AD1     		bne	.L451
 448:src/int.c     **** 			return y;
 7321              		.loc 1 448 3 is_stmt 1 view .LVU2082
 448:src/int.c     **** 			return y;
 7322              		.loc 1 448 6 is_stmt 0 view .LVU2083
 7323 004c 9945     		cmp	r9, r3
 7324 004e 08BF     		it	eq
 7325 0050 8045     		cmpeq	r8, r0
 7326 0052 F3D2     		bcs	.L443
 7327              	.L449:
 443:src/int.c     **** 	} else if (sx) {		// both negative
 7328              		.loc 1 443 11 view .LVU2084
 7329 0054 3D46     		mov	r5, r7
 7330 0056 3446     		mov	r4, r6
 455:src/int.c     **** 
 7331              		.loc 1 455 1 view .LVU2085
 7332 0058 2846     		mov	r0, r5
 7333 005a 2146     		mov	r1, r4
 7334 005c 03B0     		add	sp, sp, #12
 7335              		.cfi_remember_state
 7336              		.cfi_def_cfa_offset 28
 7337              		@ sp needed
 7338 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7339              	.LVL565:
 7340              	.L451:
 7341              		.cfi_restore_state
 445:src/int.c     **** 			return y;
 7342              		.loc 1 445 3 is_stmt 1 view .LVU2086
 445:src/int.c     **** 			return y;
 7343              		.loc 1 445 6 is_stmt 0 view .LVU2087
 7344 0062 4B45     		cmp	r3, r9
 7345 0064 08BF     		it	eq
 7346 0066 4045     		cmpeq	r0, r8
 7347 0068 F4D3     		bcc	.L449
 455:src/int.c     **** 
 7348              		.loc 1 455 1 view .LVU2088
 7349 006a 2846     		mov	r0, r5
 7350 006c 2146     		mov	r1, r4
 7351 006e 03B0     		add	sp, sp, #12
 7352              		.cfi_def_cfa_offset 28
 7353              		@ sp needed
 7354 0070 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 455:src/int.c     **** 
 7355              		.loc 1 455 1 view .LVU2089
 7356              		.cfi_endproc
 7357              	.LFE24:
 7359              		.section	.text.intGCD,"ax",%progbits
 7360              		.align	1
 7361              		.p2align 2,,3
 7362              		.global	intGCD
ARM GAS  /tmp/ccl34fCK.s 			page 190


 7363              		.syntax unified
 7364              		.thumb
 7365              		.thumb_func
 7366              		.fpu fpv4-sp-d16
 7368              	intGCD:
 7369              	.LVL566:
 7370              	.LFB26:
 484:src/int.c     **** 	int s;
 7371              		.loc 1 484 56 is_stmt 1 view -0
 7372              		.cfi_startproc
 7373              		@ args = 0, pretend = 0, frame = 8
 7374              		@ frame_needed = 0, uses_anonymous_args = 0
 485:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 7375              		.loc 1 485 2 view .LVU2091
 486:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7376              		.loc 1 486 2 view .LVU2092
 484:src/int.c     **** 	int s;
 7377              		.loc 1 484 56 is_stmt 0 view .LVU2093
 7378 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7379              		.cfi_def_cfa_offset 20
 7380              		.cfi_offset 4, -20
 7381              		.cfi_offset 5, -16
 7382              		.cfi_offset 6, -12
 7383              		.cfi_offset 7, -8
 7384              		.cfi_offset 14, -4
 7385 0002 83B0     		sub	sp, sp, #12
 7386              		.cfi_def_cfa_offset 32
 484:src/int.c     **** 	int s;
 7387              		.loc 1 484 56 view .LVU2094
 7388 0004 0546     		mov	r5, r0
 7389 0006 0C46     		mov	r4, r1
 486:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7390              		.loc 1 486 30 view .LVU2095
 7391 0008 1046     		mov	r0, r2
 7392              	.LVL567:
 486:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7393              		.loc 1 486 30 view .LVU2096
 7394 000a 1946     		mov	r1, r3
 7395 000c 01AA     		add	r2, sp, #4
 7396              	.LVL568:
 486:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7397              		.loc 1 486 30 view .LVU2097
 7398 000e FFF7FEFF 		bl	extract_value
 7399              	.LVL569:
 487:src/int.c     **** 	unsigned long long int v;
 7400              		.loc 1 487 30 view .LVU2098
 7401 0012 01AA     		add	r2, sp, #4
 486:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7402              		.loc 1 486 30 view .LVU2099
 7403 0014 0B46     		mov	r3, r1
 7404 0016 8446     		mov	ip, r0
 487:src/int.c     **** 	unsigned long long int v;
 7405              		.loc 1 487 30 view .LVU2100
 7406 0018 2146     		mov	r1, r4
 7407 001a 2846     		mov	r0, r5
 486:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7408              		.loc 1 486 30 view .LVU2101
ARM GAS  /tmp/ccl34fCK.s 			page 191


 7409 001c 6646     		mov	r6, ip
 7410 001e 1F46     		mov	r7, r3
 7411              	.LVL570:
 487:src/int.c     **** 	unsigned long long int v;
 7412              		.loc 1 487 2 is_stmt 1 view .LVU2102
 487:src/int.c     **** 	unsigned long long int v;
 7413              		.loc 1 487 30 is_stmt 0 view .LVU2103
 7414 0020 FFF7FEFF 		bl	extract_value
 7415              	.LVL571:
 490:src/int.c     **** 		v = yv;
 7416              		.loc 1 490 5 view .LVU2104
 7417 0024 56EA0703 		orrs	r3, r6, r7
 487:src/int.c     **** 	unsigned long long int v;
 7418              		.loc 1 487 30 view .LVU2105
 7419 0028 0446     		mov	r4, r0
 7420 002a 0D46     		mov	r5, r1
 7421              	.LVL572:
 488:src/int.c     **** 
 7422              		.loc 1 488 2 is_stmt 1 view .LVU2106
 490:src/int.c     **** 		v = yv;
 7423              		.loc 1 490 2 view .LVU2107
 490:src/int.c     **** 		v = yv;
 7424              		.loc 1 490 5 is_stmt 0 view .LVU2108
 7425 002c 04D0     		beq	.L453
 492:src/int.c     **** 		v = xv;
 7426              		.loc 1 492 7 is_stmt 1 view .LVU2109
 492:src/int.c     **** 		v = xv;
 7427              		.loc 1 492 10 is_stmt 0 view .LVU2110
 7428 002e 54EA0503 		orrs	r3, r4, r5
 7429 0032 21D1     		bne	.L454
 7430 0034 3446     		mov	r4, r6
 7431              	.LVL573:
 492:src/int.c     **** 		v = xv;
 7432              		.loc 1 492 10 view .LVU2111
 7433 0036 3D46     		mov	r5, r7
 7434              	.LVL574:
 7435              	.L453:
 496:src/int.c     **** }
 7436              		.loc 1 496 2 is_stmt 1 view .LVU2112
 7437              	.LBB1329:
 7438              	.LBI1329:
 146:src/int.c     **** #ifndef TINY_BUILD
 7439              		.loc 1 146 15 view .LVU2113
 7440              	.LBB1330:
 148:src/int.c     **** 	long long int v = mask_value(x);
 7441              		.loc 1 148 2 view .LVU2114
 7442              	.LBE1330:
 7443              	.LBE1329:
  39:src/int.c     **** }
 7444              		.loc 1 39 2 view .LVU2115
 7445              	.LBB1342:
 7446              	.LBB1341:
 149:src/int.c     **** 
 7447              		.loc 1 149 2 view .LVU2116
 7448              	.LBB1331:
 7449              	.LBB1332:
 7450              	.LBB1333:
ARM GAS  /tmp/ccl34fCK.s 			page 192


 7451              	.LBB1334:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7452              		.loc 1 43 26 is_stmt 0 view .LVU2117
 7453 0038 164B     		ldr	r3, .L462
 7454 003a 93F8E907 		ldrb	r0, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7455              		.loc 1 43 15 view .LVU2118
 7456 003e 00F03F03 		and	r3, r0, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7457              		.loc 1 44 26 view .LVU2119
 7458 0042 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7459              		.loc 1 44 5 view .LVU2120
 7460 0044 3E2A     		cmp	r2, #62
 7461              	.LBE1334:
 7462              	.LBE1333:
 7463              	.LBE1332:
 7464              	.LBE1331:
 149:src/int.c     **** 
 7465              		.loc 1 149 20 view .LVU2121
 7466 0046 2046     		mov	r0, r4
 7467 0048 2946     		mov	r1, r5
 7468              	.LVL575:
 7469              	.LBB1339:
 7470              	.LBI1331:
  91:src/int.c     **** #ifndef TINY_BUILD
 7471              		.loc 1 91 15 is_stmt 1 view .LVU2122
 7472              	.LBB1337:
  93:src/int.c     **** 	long long int mask;
 7473              		.loc 1 93 2 view .LVU2123
 7474              	.LBB1336:
 7475              	.LBI1333:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 7476              		.loc 1 42 14 view .LVU2124
 7477              	.LBB1335:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7478              		.loc 1 43 2 view .LVU2125
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7479              		.loc 1 44 2 view .LVU2126
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7480              		.loc 1 44 5 is_stmt 0 view .LVU2127
 7481 004a 11D8     		bhi	.L452
 7482              	.LVL576:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7483              		.loc 1 44 5 view .LVU2128
 7484              	.LBE1335:
 7485              	.LBE1336:
  94:src/int.c     **** 
 7486              		.loc 1 94 2 is_stmt 1 view .LVU2129
  96:src/int.c     **** 		return v;
 7487              		.loc 1 96 2 view .LVU2130
  98:src/int.c     **** 	return v & mask;
 7488              		.loc 1 98 2 view .LVU2131
  99:src/int.c     **** #else
 7489              		.loc 1 99 2 view .LVU2132
  98:src/int.c     **** 	return v & mask;
 7490              		.loc 1 98 14 is_stmt 0 view .LVU2133
ARM GAS  /tmp/ccl34fCK.s 			page 193


 7491 004c 0120     		movs	r0, #1
 7492              	.LVL577:
  98:src/int.c     **** 	return v & mask;
 7493              		.loc 1 98 14 view .LVU2134
 7494 004e A3F12001 		sub	r1, r3, #32
 7495              	.LVL578:
  98:src/int.c     **** 	return v & mask;
 7496              		.loc 1 98 14 view .LVU2135
 7497 0052 C3F12002 		rsb	r2, r3, #32
 7498 0056 00FA01F1 		lsl	r1, r0, r1
 7499 005a 20FA02F2 		lsr	r2, r0, r2
 7500 005e 9840     		lsls	r0, r0, r3
  98:src/int.c     **** 	return v & mask;
 7501              		.loc 1 98 7 view .LVU2136
 7502 0060 10F1FF30 		adds	r0, r0, #-1
  98:src/int.c     **** 	return v & mask;
 7503              		.loc 1 98 14 view .LVU2137
 7504 0064 41EA0201 		orr	r1, r1, r2
  98:src/int.c     **** 	return v & mask;
 7505              		.loc 1 98 7 view .LVU2138
 7506 0068 41F1FF31 		adc	r1, r1, #-1
  99:src/int.c     **** #else
 7507              		.loc 1 99 11 view .LVU2139
 7508 006c 2940     		ands	r1, r1, r5
 7509              	.LVL579:
  99:src/int.c     **** #else
 7510              		.loc 1 99 11 view .LVU2140
 7511              	.LBE1337:
 7512              	.LBE1339:
 151:src/int.c     **** 		return v;
 7513              		.loc 1 151 2 is_stmt 1 view .LVU2141
 7514              	.LBB1340:
 7515              	.LBB1338:
  99:src/int.c     **** #else
 7516              		.loc 1 99 11 is_stmt 0 view .LVU2142
 7517 006e 2040     		ands	r0, r0, r4
 7518              	.LVL580:
 7519              	.L452:
  99:src/int.c     **** #else
 7520              		.loc 1 99 11 view .LVU2143
 7521              	.LBE1338:
 7522              	.LBE1340:
 7523              	.LBE1341:
 7524              	.LBE1342:
 497:src/int.c     **** 
 7525              		.loc 1 497 1 view .LVU2144
 7526 0070 03B0     		add	sp, sp, #12
 7527              		.cfi_remember_state
 7528              		.cfi_def_cfa_offset 20
 7529              		@ sp needed
 7530 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 7531              	.LVL581:
 7532              	.L457:
 7533              		.cfi_restore_state
 7534              	.LBB1343:
 7535              	.LBB1344:
 497:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 194


 7536              		.loc 1 497 1 view .LVU2145
 7537 0074 0446     		mov	r4, r0
 7538              	.LVL582:
 497:src/int.c     **** 
 7539              		.loc 1 497 1 view .LVU2146
 7540 0076 0D46     		mov	r5, r1
 7541              	.LVL583:
 7542              	.L454:
 7543              	.LBB1345:
 477:src/int.c     **** 		b = a % b;
 7544              		.loc 1 477 3 is_stmt 1 view .LVU2147
 478:src/int.c     **** 		a = t;
 7545              		.loc 1 478 3 view .LVU2148
 478:src/int.c     **** 		a = t;
 7546              		.loc 1 478 5 is_stmt 0 view .LVU2149
 7547 0078 3046     		mov	r0, r6
 7548 007a 3946     		mov	r1, r7
 7549 007c 2246     		mov	r2, r4
 7550 007e 2B46     		mov	r3, r5
 7551 0080 FFF7FEFF 		bl	__aeabi_uldivmod
 7552              	.LVL584:
 7553 0084 1046     		mov	r0, r2
 7554 0086 1946     		mov	r1, r3
 7555              	.LVL585:
 479:src/int.c     **** 	}
 7556              		.loc 1 479 3 is_stmt 1 view .LVU2150
 479:src/int.c     **** 	}
 7557              		.loc 1 479 3 is_stmt 0 view .LVU2151
 7558              	.LBE1345:
 476:src/int.c     **** 		const unsigned long long int t = b;
 7559              		.loc 1 476 8 is_stmt 1 view .LVU2152
 7560 0088 50EA0103 		orrs	r3, r0, r1
 7561 008c 2646     		mov	r6, r4
 7562 008e 2F46     		mov	r7, r5
 7563 0090 F0D1     		bne	.L457
 7564 0092 D1E7     		b	.L453
 7565              	.L463:
 7566              		.align	2
 7567              	.L462:
 7568 0094 00000000 		.word	PersistentRam
 7569              	.LBE1344:
 7570              	.LBE1343:
 7571              		.cfi_endproc
 7572              	.LFE26:
 7574              		.section	.text.intLCM,"ax",%progbits
 7575              		.align	1
 7576              		.p2align 2,,3
 7577              		.global	intLCM
 7578              		.syntax unified
 7579              		.thumb
 7580              		.thumb_func
 7581              		.fpu fpv4-sp-d16
 7583              	intLCM:
 7584              	.LVL586:
 7585              	.LFB27:
 499:src/int.c     **** 	int s;
 7586              		.loc 1 499 56 view -0
ARM GAS  /tmp/ccl34fCK.s 			page 195


 7587              		.cfi_startproc
 7588              		@ args = 0, pretend = 0, frame = 8
 7589              		@ frame_needed = 0, uses_anonymous_args = 0
 500:src/int.c     **** 	unsigned long long int xv = extract_value(x, &s);
 7590              		.loc 1 500 2 view .LVU2154
 501:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7591              		.loc 1 501 2 view .LVU2155
 499:src/int.c     **** 	int s;
 7592              		.loc 1 499 56 is_stmt 0 view .LVU2156
 7593 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7594              		.cfi_def_cfa_offset 36
 7595              		.cfi_offset 4, -36
 7596              		.cfi_offset 5, -32
 7597              		.cfi_offset 6, -28
 7598              		.cfi_offset 7, -24
 7599              		.cfi_offset 8, -20
 7600              		.cfi_offset 9, -16
 7601              		.cfi_offset 10, -12
 7602              		.cfi_offset 11, -8
 7603              		.cfi_offset 14, -4
 7604 0004 83B0     		sub	sp, sp, #12
 7605              		.cfi_def_cfa_offset 48
 499:src/int.c     **** 	int s;
 7606              		.loc 1 499 56 view .LVU2157
 7607 0006 0546     		mov	r5, r0
 7608 0008 0C46     		mov	r4, r1
 501:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7609              		.loc 1 501 30 view .LVU2158
 7610 000a 1046     		mov	r0, r2
 7611              	.LVL587:
 501:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7612              		.loc 1 501 30 view .LVU2159
 7613 000c 1946     		mov	r1, r3
 7614 000e 01AA     		add	r2, sp, #4
 7615              	.LVL588:
 501:src/int.c     **** 	unsigned long long int yv = extract_value(y, &s);
 7616              		.loc 1 501 30 view .LVU2160
 7617 0010 FFF7FEFF 		bl	extract_value
 7618              	.LVL589:
 7619 0014 0B46     		mov	r3, r1
 7620 0016 8446     		mov	ip, r0
 7621 0018 6646     		mov	r6, ip
 7622 001a 1F46     		mov	r7, r3
 7623              	.LVL590:
 502:src/int.c     **** 	unsigned long long int gcd;
 7624              		.loc 1 502 2 is_stmt 1 view .LVU2161
 502:src/int.c     **** 	unsigned long long int gcd;
 7625              		.loc 1 502 30 is_stmt 0 view .LVU2162
 7626 001c 2846     		mov	r0, r5
 7627 001e 01AA     		add	r2, sp, #4
 7628 0020 2146     		mov	r1, r4
 7629 0022 FFF7FEFF 		bl	extract_value
 7630              	.LVL591:
 503:src/int.c     **** 
 7631              		.loc 1 503 2 is_stmt 1 view .LVU2163
 505:src/int.c     **** 		return 0;
 7632              		.loc 1 505 2 view .LVU2164
ARM GAS  /tmp/ccl34fCK.s 			page 196


 505:src/int.c     **** 		return 0;
 7633              		.loc 1 505 5 is_stmt 0 view .LVU2165
 7634 0026 56EA0703 		orrs	r3, r6, r7
 7635 002a 44D0     		beq	.L469
 7636 002c 8046     		mov	r8, r0
 7637 002e 8946     		mov	r9, r1
 505:src/int.c     **** 		return 0;
 7638              		.loc 1 505 14 discriminator 1 view .LVU2166
 7639 0030 58EA0903 		orrs	r3, r8, r9
 7640 0034 3CD0     		beq	.L464
 7641 0036 0446     		mov	r4, r0
 7642 0038 0D46     		mov	r5, r1
 7643 003a 3046     		mov	r0, r6
 7644 003c 3946     		mov	r1, r7
 7645              	.L466:
 7646              	.LVL592:
 7647              	.LBB1346:
 7648              	.LBB1347:
 7649              	.LBB1348:
 477:src/int.c     **** 		b = a % b;
 7650              		.loc 1 477 3 is_stmt 1 view .LVU2167
 478:src/int.c     **** 		a = t;
 7651              		.loc 1 478 3 view .LVU2168
 478:src/int.c     **** 		a = t;
 7652              		.loc 1 478 5 is_stmt 0 view .LVU2169
 7653 003e 2246     		mov	r2, r4
 7654 0040 2B46     		mov	r3, r5
 7655 0042 FFF7FEFF 		bl	__aeabi_uldivmod
 7656              	.LVL593:
 478:src/int.c     **** 		a = t;
 7657              		.loc 1 478 5 view .LVU2170
 7658 0046 A346     		mov	fp, r4
 7659 0048 AA46     		mov	r10, r5
 7660 004a 1446     		mov	r4, r2
 7661              	.LVL594:
 478:src/int.c     **** 		a = t;
 7662              		.loc 1 478 5 view .LVU2171
 7663 004c 1D46     		mov	r5, r3
 7664              	.LVL595:
 479:src/int.c     **** 	}
 7665              		.loc 1 479 3 is_stmt 1 view .LVU2172
 479:src/int.c     **** 	}
 7666              		.loc 1 479 3 is_stmt 0 view .LVU2173
 7667              	.LBE1348:
 476:src/int.c     **** 		const unsigned long long int t = b;
 7668              		.loc 1 476 8 is_stmt 1 view .LVU2174
 7669 004e 54EA0503 		orrs	r3, r4, r5
 7670 0052 5846     		mov	r0, fp
 7671 0054 5146     		mov	r1, r10
 7672 0056 F2D1     		bne	.L466
 481:src/int.c     **** }
 7673              		.loc 1 481 2 view .LVU2175
 7674              	.LVL596:
 481:src/int.c     **** }
 7675              		.loc 1 481 2 is_stmt 0 view .LVU2176
 7676              	.LBE1347:
 7677              	.LBE1346:
ARM GAS  /tmp/ccl34fCK.s 			page 197


 508:src/int.c     **** }
 7678              		.loc 1 508 2 is_stmt 1 view .LVU2177
 508:src/int.c     **** }
 7679              		.loc 1 508 35 is_stmt 0 view .LVU2178
 7680 0058 5A46     		mov	r2, fp
 7681 005a 5346     		mov	r3, r10
 7682 005c 3046     		mov	r0, r6
 7683 005e 3946     		mov	r1, r7
 7684 0060 FFF7FEFF 		bl	__aeabi_uldivmod
 7685              	.LVL597:
 7686              	.LBB1349:
 7687              	.LBB1350:
 7688              	.LBB1351:
 7689              	.LBB1352:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7690              		.loc 1 43 26 view .LVU2179
 7691 0064 184B     		ldr	r3, .L473
 7692 0066 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7693              		.loc 1 43 15 view .LVU2180
 7694 006a 02F03F04 		and	r4, r2, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7695              		.loc 1 44 26 view .LVU2181
 7696 006e 631E     		subs	r3, r4, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7697              		.loc 1 44 5 view .LVU2182
 7698 0070 3E2B     		cmp	r3, #62
 7699              	.LBE1352:
 7700              	.LBE1351:
 7701              	.LBE1350:
 7702              	.LBE1349:
 508:src/int.c     **** }
 7703              		.loc 1 508 9 view .LVU2183
 7704 0072 0546     		mov	r5, r0
 7705 0074 0E46     		mov	r6, r1
 7706              	.LVL598:
 7707              	.LBB1357:
 7708              	.LBI1349:
  91:src/int.c     **** #ifndef TINY_BUILD
 7709              		.loc 1 91 15 is_stmt 1 view .LVU2184
 7710              	.LBB1355:
  93:src/int.c     **** 	long long int mask;
 7711              		.loc 1 93 2 view .LVU2185
 7712              	.LBB1354:
 7713              	.LBI1351:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 7714              		.loc 1 42 14 view .LVU2186
 7715              	.LBB1353:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7716              		.loc 1 43 2 view .LVU2187
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7717              		.loc 1 44 2 view .LVU2188
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7718              		.loc 1 44 5 is_stmt 0 view .LVU2189
 7719 0076 23D8     		bhi	.L467
 7720              	.LVL599:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccl34fCK.s 			page 198


 7721              		.loc 1 44 5 view .LVU2190
 7722              	.LBE1353:
 7723              	.LBE1354:
  94:src/int.c     **** 
 7724              		.loc 1 94 2 is_stmt 1 view .LVU2191
  96:src/int.c     **** 		return v;
 7725              		.loc 1 96 2 view .LVU2192
  98:src/int.c     **** 	return v & mask;
 7726              		.loc 1 98 2 view .LVU2193
  98:src/int.c     **** 	return v & mask;
 7727              		.loc 1 98 14 is_stmt 0 view .LVU2194
 7728 0078 0122     		movs	r2, #1
 7729              	.LVL600:
  98:src/int.c     **** 	return v & mask;
 7730              		.loc 1 98 14 view .LVU2195
 7731 007a A4F12003 		sub	r3, r4, #32
 7732 007e C4F12005 		rsb	r5, r4, #32
 7733 0082 22FA05F5 		lsr	r5, r2, r5
 7734 0086 02FA03F3 		lsl	r3, r2, r3
 7735 008a A240     		lsls	r2, r2, r4
  98:src/int.c     **** 	return v & mask;
 7736              		.loc 1 98 7 view .LVU2196
 7737 008c 12F1FF32 		adds	r2, r2, #-1
  98:src/int.c     **** 	return v & mask;
 7738              		.loc 1 98 14 view .LVU2197
 7739 0090 43EA0503 		orr	r3, r3, r5
  98:src/int.c     **** 	return v & mask;
 7740              		.loc 1 98 7 view .LVU2198
 7741 0094 43F1FF33 		adc	r3, r3, #-1
 7742              	.LVL601:
  99:src/int.c     **** #else
 7743              		.loc 1 99 2 is_stmt 1 view .LVU2199
  99:src/int.c     **** #else
 7744              		.loc 1 99 11 is_stmt 0 view .LVU2200
 7745 0098 01EA0306 		and	r6, r1, r3
 7746              	.LVL602:
  99:src/int.c     **** #else
 7747              		.loc 1 99 11 view .LVU2201
 7748              	.LBE1355:
 7749              	.LBE1357:
 7750              	.LBB1358:
 7751              	.LBI1358:
 146:src/int.c     **** #ifndef TINY_BUILD
 7752              		.loc 1 146 15 is_stmt 1 view .LVU2202
 7753              	.LBB1359:
 148:src/int.c     **** 	long long int v = mask_value(x);
 7754              		.loc 1 148 2 view .LVU2203
 7755              	.LBE1359:
 7756              	.LBE1358:
  39:src/int.c     **** }
 7757              		.loc 1 39 2 view .LVU2204
 7758              	.LBB1373:
 7759              	.LBB1368:
 149:src/int.c     **** 
 7760              		.loc 1 149 2 view .LVU2205
 7761              	.LBB1360:
 7762              	.LBI1360:
ARM GAS  /tmp/ccl34fCK.s 			page 199


  91:src/int.c     **** #ifndef TINY_BUILD
 7763              		.loc 1 91 15 view .LVU2206
 7764              	.LBB1361:
  93:src/int.c     **** 	long long int mask;
 7765              		.loc 1 93 2 view .LVU2207
 7766              	.LBE1361:
 7767              	.LBE1360:
 7768              	.LBE1368:
 7769              	.LBE1373:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7770              		.loc 1 43 2 view .LVU2208
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7771              		.loc 1 44 2 view .LVU2209
 7772              	.LBB1374:
 7773              	.LBB1369:
 7774              	.LBB1365:
 7775              	.LBB1362:
  94:src/int.c     **** 
 7776              		.loc 1 94 2 view .LVU2210
  96:src/int.c     **** 		return v;
 7777              		.loc 1 96 2 view .LVU2211
  98:src/int.c     **** 	return v & mask;
 7778              		.loc 1 98 2 view .LVU2212
  99:src/int.c     **** #else
 7779              		.loc 1 99 2 view .LVU2213
 7780              	.LBE1362:
 7781              	.LBE1365:
 7782              	.LBE1369:
 7783              	.LBE1374:
 7784              	.LBB1375:
 7785              	.LBB1356:
  99:src/int.c     **** #else
 7786              		.loc 1 99 11 is_stmt 0 view .LVU2214
 7787 009c 00EA0205 		and	r5, r0, r2
 7788              	.LBE1356:
 7789              	.LBE1375:
 7790              	.LBB1376:
 7791              	.LBB1370:
 7792              	.LBB1366:
 7793              	.LBB1363:
 7794 00a0 09EA0303 		and	r3, r9, r3
 7795              	.LVL603:
  99:src/int.c     **** #else
 7796              		.loc 1 99 11 view .LVU2215
 7797 00a4 08EA0202 		and	r2, r8, r2
 7798              	.LVL604:
 7799              	.L468:
  99:src/int.c     **** #else
 7800              		.loc 1 99 11 view .LVU2216
 7801              	.LBE1363:
 7802              	.LBE1366:
 151:src/int.c     **** 		return v;
 7803              		.loc 1 151 2 is_stmt 1 view .LVU2217
 151:src/int.c     **** 		return v;
 7804              		.loc 1 151 2 is_stmt 0 view .LVU2218
 7805              	.LBE1370:
 7806              	.LBE1376:
ARM GAS  /tmp/ccl34fCK.s 			page 200


 508:src/int.c     **** }
 7807              		.loc 1 508 9 view .LVU2219
 7808 00a8 2846     		mov	r0, r5
 7809 00aa 3146     		mov	r1, r6
 7810 00ac FFF7FEFF 		bl	intMultiply
 7811              	.LVL605:
 7812              	.L464:
 509:src/int.c     **** 
 7813              		.loc 1 509 1 view .LVU2220
 7814 00b0 03B0     		add	sp, sp, #12
 7815              		.cfi_remember_state
 7816              		.cfi_def_cfa_offset 36
 7817              		@ sp needed
 7818 00b2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7819              	.LVL606:
 7820              	.L469:
 7821              		.cfi_restore_state
 506:src/int.c     **** 	gcd = int_gcd(xv, yv);
 7822              		.loc 1 506 10 view .LVU2221
 7823 00b6 3046     		mov	r0, r6
 7824 00b8 3946     		mov	r1, r7
 509:src/int.c     **** 
 7825              		.loc 1 509 1 view .LVU2222
 7826 00ba 03B0     		add	sp, sp, #12
 7827              		.cfi_remember_state
 7828              		.cfi_def_cfa_offset 36
 7829              		@ sp needed
 7830 00bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7831              	.LVL607:
 7832              	.L467:
 7833              		.cfi_restore_state
 7834              	.LBB1377:
 146:src/int.c     **** #ifndef TINY_BUILD
 7835              		.loc 1 146 15 is_stmt 1 view .LVU2223
 7836              	.LBB1371:
 148:src/int.c     **** 	long long int v = mask_value(x);
 7837              		.loc 1 148 2 view .LVU2224
 7838              	.LBE1371:
 7839              	.LBE1377:
  39:src/int.c     **** }
 7840              		.loc 1 39 2 view .LVU2225
 7841              	.LBB1378:
 7842              	.LBB1372:
 149:src/int.c     **** 
 7843              		.loc 1 149 2 view .LVU2226
 149:src/int.c     **** 
 7844              		.loc 1 149 20 is_stmt 0 view .LVU2227
 7845 00c0 4246     		mov	r2, r8
 7846 00c2 4B46     		mov	r3, r9
 7847              	.LVL608:
 7848              	.LBB1367:
  91:src/int.c     **** #ifndef TINY_BUILD
 7849              		.loc 1 91 15 is_stmt 1 view .LVU2228
 7850              	.LBB1364:
  93:src/int.c     **** 	long long int mask;
 7851              		.loc 1 93 2 view .LVU2229
 7852              	.LBE1364:
ARM GAS  /tmp/ccl34fCK.s 			page 201


 7853              	.LBE1367:
 7854              	.LBE1372:
 7855              	.LBE1378:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 7856              		.loc 1 43 2 view .LVU2230
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 7857              		.loc 1 44 2 view .LVU2231
 7858 00c4 F0E7     		b	.L468
 7859              	.L474:
 7860 00c6 00BF     		.align	2
 7861              	.L473:
 7862 00c8 00000000 		.word	PersistentRam
 7863              		.cfi_endproc
 7864              	.LFE27:
 7866              		.section	.text.intSqr,"ax",%progbits
 7867              		.align	1
 7868              		.p2align 2,,3
 7869              		.global	intSqr
 7870              		.syntax unified
 7871              		.thumb
 7872              		.thumb_func
 7873              		.fpu fpv4-sp-d16
 7875              	intSqr:
 7876              	.LVL609:
 7877              	.LFB28:
 511:src/int.c     **** 	return intMultiply(x, x);
 7878              		.loc 1 511 39 view -0
 7879              		.cfi_startproc
 7880              		@ args = 0, pretend = 0, frame = 0
 7881              		@ frame_needed = 0, uses_anonymous_args = 0
 7882              		@ link register save eliminated.
 512:src/int.c     **** }
 7883              		.loc 1 512 2 view .LVU2233
 511:src/int.c     **** 	return intMultiply(x, x);
 7884              		.loc 1 511 39 is_stmt 0 view .LVU2234
 7885 0000 0246     		mov	r2, r0
 7886 0002 0B46     		mov	r3, r1
 512:src/int.c     **** }
 7887              		.loc 1 512 9 view .LVU2235
 7888 0004 FFF7FEBF 		b	intMultiply
 7889              	.LVL610:
 512:src/int.c     **** }
 7890              		.loc 1 512 9 view .LVU2236
 7891              		.cfi_endproc
 7892              	.LFE28:
 7894              		.section	.text.intCube,"ax",%progbits
 7895              		.align	1
 7896              		.p2align 2,,3
 7897              		.global	intCube
 7898              		.syntax unified
 7899              		.thumb
 7900              		.thumb_func
 7901              		.fpu fpv4-sp-d16
 7903              	intCube:
 7904              	.LVL611:
 7905              	.LFB29:
 515:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccl34fCK.s 			page 202


 7906              		.loc 1 515 40 is_stmt 1 view -0
 7907              		.cfi_startproc
 7908              		@ args = 0, pretend = 0, frame = 8
 7909              		@ frame_needed = 0, uses_anonymous_args = 0
 517:src/int.c     **** 	int overflow = get_overflow();
 7910              		.loc 1 517 2 view .LVU2238
 515:src/int.c     **** #ifndef TINY_BUILD
 7911              		.loc 1 515 40 is_stmt 0 view .LVU2239
 7912 0000 70B5     		push	{r4, r5, r6, lr}
 7913              		.cfi_def_cfa_offset 16
 7914              		.cfi_offset 4, -16
 7915              		.cfi_offset 5, -12
 7916              		.cfi_offset 6, -8
 7917              		.cfi_offset 14, -4
 517:src/int.c     **** 	int overflow = get_overflow();
 7918              		.loc 1 517 20 view .LVU2240
 7919 0002 0246     		mov	r2, r0
 515:src/int.c     **** #ifndef TINY_BUILD
 7920              		.loc 1 515 40 view .LVU2241
 7921 0004 82B0     		sub	sp, sp, #8
 7922              		.cfi_def_cfa_offset 24
 517:src/int.c     **** 	int overflow = get_overflow();
 7923              		.loc 1 517 20 view .LVU2242
 7924 0006 0B46     		mov	r3, r1
 515:src/int.c     **** #ifndef TINY_BUILD
 7925              		.loc 1 515 40 view .LVU2243
 7926 0008 0446     		mov	r4, r0
 7927 000a 0D46     		mov	r5, r1
 517:src/int.c     **** 	int overflow = get_overflow();
 7928              		.loc 1 517 20 view .LVU2244
 7929 000c FFF7FEFF 		bl	intMultiply
 7930              	.LVL612:
 517:src/int.c     **** 	int overflow = get_overflow();
 7931              		.loc 1 517 20 view .LVU2245
 7932 0010 0190     		str	r0, [sp, #4]
 7933              	.LBB1379:
 7934              	.LBB1380:
  63:src/int.c     **** }
 7935              		.loc 1 63 9 view .LVU2246
 7936 0012 6920     		movs	r0, #105
 7937              	.LBE1380:
 7938              	.LBE1379:
 517:src/int.c     **** 	int overflow = get_overflow();
 7939              		.loc 1 517 20 view .LVU2247
 7940 0014 0091     		str	r1, [sp]
 7941              	.LVL613:
 518:src/int.c     **** 
 7942              		.loc 1 518 2 is_stmt 1 view .LVU2248
 7943              	.LBB1383:
 7944              	.LBI1379:
  62:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
 7945              		.loc 1 62 5 view .LVU2249
 7946              	.LBB1381:
  63:src/int.c     **** }
 7947              		.loc 1 63 2 view .LVU2250
  63:src/int.c     **** }
 7948              		.loc 1 63 9 is_stmt 0 view .LVU2251
ARM GAS  /tmp/ccl34fCK.s 			page 203


 7949 0016 FFF7FEFF 		bl	get_user_flag
 7950              	.LVL614:
  63:src/int.c     **** }
 7951              		.loc 1 63 9 view .LVU2252
 7952              	.LBE1381:
 7953              	.LBE1383:
 520:src/int.c     **** 	if (overflow)
 7954              		.loc 1 520 6 view .LVU2253
 7955 001a DDE90032 		ldrd	r3, r2, [sp]
 7956              	.LBB1384:
 7957              	.LBB1382:
  63:src/int.c     **** }
 7958              		.loc 1 63 9 view .LVU2254
 7959 001e 0646     		mov	r6, r0
 7960              	.LBE1382:
 7961              	.LBE1384:
 520:src/int.c     **** 	if (overflow)
 7962              		.loc 1 520 6 view .LVU2255
 7963 0020 2946     		mov	r1, r5
 7964 0022 2046     		mov	r0, r4
 7965              	.LVL615:
 520:src/int.c     **** 	if (overflow)
 7966              		.loc 1 520 2 is_stmt 1 view .LVU2256
 520:src/int.c     **** 	if (overflow)
 7967              		.loc 1 520 6 is_stmt 0 view .LVU2257
 7968 0024 FFF7FEFF 		bl	intMultiply
 7969              	.LVL616:
 521:src/int.c     **** 		set_overflow(1);
 7970              		.loc 1 521 2 is_stmt 1 view .LVU2258
 521:src/int.c     **** 		set_overflow(1);
 7971              		.loc 1 521 5 is_stmt 0 view .LVU2259
 7972 0028 0EB9     		cbnz	r6, .L482
 527:src/int.c     **** 
 7973              		.loc 1 527 1 view .LVU2260
 7974 002a 02B0     		add	sp, sp, #8
 7975              		.cfi_remember_state
 7976              		.cfi_def_cfa_offset 16
 7977              		@ sp needed
 7978 002c 70BD     		pop	{r4, r5, r6, pc}
 7979              	.LVL617:
 7980              	.L482:
 7981              		.cfi_restore_state
 527:src/int.c     **** 
 7982              		.loc 1 527 1 view .LVU2261
 7983 002e CDE90001 		strd	r0, r1, [sp]
 522:src/int.c     **** 	return y;
 7984              		.loc 1 522 3 is_stmt 1 view .LVU2262
 7985              	.LVL618:
 7986              	.LBB1385:
 7987              	.LBI1385:
  66:src/int.c     **** #ifndef TINY_BUILD
 7988              		.loc 1 66 6 view .LVU2263
 7989              	.LBB1386:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 7990              		.loc 1 68 2 view .LVU2264
 7991 0032 FFF7FEFF 		bl	set_overflow.part.0
 7992              	.LVL619:
ARM GAS  /tmp/ccl34fCK.s 			page 204


  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 7993              		.loc 1 68 2 is_stmt 0 view .LVU2265
 7994 0036 DDE90001 		ldrd	r0, r1, [sp]
 7995              	.LVL620:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 7996              		.loc 1 68 2 view .LVU2266
 7997              	.LBE1386:
 7998              	.LBE1385:
 523:src/int.c     **** #else
 7999              		.loc 1 523 2 is_stmt 1 view .LVU2267
 527:src/int.c     **** 
 8000              		.loc 1 527 1 is_stmt 0 view .LVU2268
 8001 003a 02B0     		add	sp, sp, #8
 8002              		.cfi_def_cfa_offset 16
 8003              	.LVL621:
 527:src/int.c     **** 
 8004              		.loc 1 527 1 view .LVU2269
 8005              		@ sp needed
 8006 003c 70BD     		pop	{r4, r5, r6, pc}
 527:src/int.c     **** 
 8007              		.loc 1 527 1 view .LVU2270
 8008              		.cfi_endproc
 8009              	.LFE29:
 8011 003e 00BF     		.section	.text.intChs,"ax",%progbits
 8012              		.align	1
 8013              		.p2align 2,,3
 8014              		.global	intChs
 8015              		.syntax unified
 8016              		.thumb
 8017              		.thumb_func
 8018              		.fpu fpv4-sp-d16
 8020              	intChs:
 8021              	.LVL622:
 8022              	.LFB30:
 529:src/int.c     **** #ifndef TINY_BUILD
 8023              		.loc 1 529 39 is_stmt 1 view -0
 8024              		.cfi_startproc
 8025              		@ args = 0, pretend = 0, frame = 8
 8026              		@ frame_needed = 0, uses_anonymous_args = 0
 531:src/int.c     **** 	int sx;
 8027              		.loc 1 531 2 view .LVU2272
 8028              	.LBB1387:
 8029              	.LBI1387:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 8030              		.loc 1 38 23 view .LVU2273
 8031              	.LBB1388:
  39:src/int.c     **** }
 8032              		.loc 1 39 2 view .LVU2274
 8033              	.LBE1388:
 8034              	.LBE1387:
 529:src/int.c     **** #ifndef TINY_BUILD
 8035              		.loc 1 529 39 is_stmt 0 view .LVU2275
 8036 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 8037              		.cfi_def_cfa_offset 28
 8038              		.cfi_offset 4, -28
 8039              		.cfi_offset 5, -24
 8040              		.cfi_offset 6, -20
ARM GAS  /tmp/ccl34fCK.s 			page 205


 8041              		.cfi_offset 7, -16
 8042              		.cfi_offset 8, -12
 8043              		.cfi_offset 9, -8
 8044              		.cfi_offset 14, -4
 8045              	.LBB1392:
 8046              	.LBB1389:
  39:src/int.c     **** }
 8047              		.loc 1 39 39 view .LVU2276
 8048 0004 324D     		ldr	r5, .L493
 8049              	.LBE1389:
 8050              	.LBE1392:
 529:src/int.c     **** #ifndef TINY_BUILD
 8051              		.loc 1 529 39 view .LVU2277
 8052 0006 83B0     		sub	sp, sp, #12
 8053              		.cfi_def_cfa_offset 40
 8054              	.LBB1393:
 8055              	.LBB1390:
  39:src/int.c     **** }
 8056              		.loc 1 39 39 view .LVU2278
 8057 0008 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 8058              	.LBE1390:
 8059              	.LBE1393:
 533:src/int.c     **** 
 8060              		.loc 1 533 30 view .LVU2279
 8061 000c 01AA     		add	r2, sp, #4
 529:src/int.c     **** #ifndef TINY_BUILD
 8062              		.loc 1 529 39 view .LVU2280
 8063 000e 8046     		mov	r8, r0
 8064 0010 8946     		mov	r9, r1
 533:src/int.c     **** 
 8065              		.loc 1 533 30 view .LVU2281
 8066 0012 FFF7FEFF 		bl	extract_value
 8067              	.LVL623:
 8068              	.LBB1394:
 8069              	.LBB1391:
  39:src/int.c     **** }
 8070              		.loc 1 39 9 view .LVU2282
 8071 0016 C4F38104 		ubfx	r4, r4, #2, #2
 8072              	.LVL624:
  39:src/int.c     **** }
 8073              		.loc 1 39 9 view .LVU2283
 8074              	.LBE1391:
 8075              	.LBE1394:
 532:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 8076              		.loc 1 532 2 is_stmt 1 view .LVU2284
 533:src/int.c     **** 
 8077              		.loc 1 533 2 view .LVU2285
 535:src/int.c     **** 		set_overflow(1);
 8078              		.loc 1 535 5 is_stmt 0 view .LVU2286
 8079 001a 022C     		cmp	r4, #2
 533:src/int.c     **** 
 8080              		.loc 1 533 30 view .LVU2287
 8081 001c 0646     		mov	r6, r0
 8082 001e 0F46     		mov	r7, r1
 8083              	.LVL625:
 535:src/int.c     **** 		set_overflow(1);
 8084              		.loc 1 535 2 is_stmt 1 view .LVU2288
ARM GAS  /tmp/ccl34fCK.s 			page 206


 535:src/int.c     **** 		set_overflow(1);
 8085              		.loc 1 535 5 is_stmt 0 view .LVU2289
 8086 0020 2CD0     		beq	.L484
 535:src/int.c     **** 		set_overflow(1);
 8087              		.loc 1 535 28 discriminator 1 view .LVU2290
 8088 0022 C4B9     		cbnz	r4, .L485
 8089              	.LBB1395:
 8090              	.LBI1395:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 8091              		.loc 1 109 22 is_stmt 1 view .LVU2291
 8092              	.LBB1396:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 8093              		.loc 1 110 2 view .LVU2292
 8094              	.LBB1397:
 8095              	.LBI1397:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 8096              		.loc 1 42 14 view .LVU2293
 8097              	.LBB1398:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8098              		.loc 1 43 2 view .LVU2294
 8099              	.LVL626:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8100              		.loc 1 44 2 view .LVU2295
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8101              		.loc 1 43 26 is_stmt 0 view .LVU2296
 8102 0024 95F8E937 		ldrb	r3, [r5, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8103              		.loc 1 43 15 view .LVU2297
 8104 0028 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8105              		.loc 1 44 26 view .LVU2298
 8106 002c 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8107              		.loc 1 44 5 view .LVU2299
 8108 002e 3E2A     		cmp	r2, #62
 8109 0030 4FF00000 		mov	r0, #0
 8110 0034 48D8     		bhi	.L488
 8111 0036 0124     		movs	r4, #1
 8112 0038 213B     		subs	r3, r3, #33
 8113 003a C2F1200C 		rsb	ip, r2, #32
 8114 003e 04FA03F1 		lsl	r1, r4, r3
 8115 0042 24FA0CFC 		lsr	ip, r4, ip
 8116 0046 41EA0C01 		orr	r1, r1, ip
 8117 004a 04FA02F0 		lsl	r0, r4, r2
 8118              	.L486:
 8119              	.LVL627:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8120              		.loc 1 44 5 view .LVU2300
 8121              	.LBE1398:
 8122              	.LBE1397:
 111:src/int.c     **** 	return bit;
 8123              		.loc 1 111 2 is_stmt 1 view .LVU2301
 112:src/int.c     **** }
 8124              		.loc 1 112 2 view .LVU2302
 112:src/int.c     **** }
 8125              		.loc 1 112 2 is_stmt 0 view .LVU2303
 8126              	.LBE1396:
ARM GAS  /tmp/ccl34fCK.s 			page 207


 8127              	.LBE1395:
 535:src/int.c     **** 		set_overflow(1);
 8128              		.loc 1 535 51 view .LVU2304
 8129 004e 8945     		cmp	r9, r1
 8130 0050 08BF     		it	eq
 8131 0052 8045     		cmpeq	r8, r0
 8132 0054 12D0     		beq	.L484
 8133              	.L485:
 539:src/int.c     **** 	return build_value(xv, !sx);
 8134              		.loc 1 539 2 is_stmt 1 view .LVU2305
 8135              	.LVL628:
 8136              	.LBB1402:
 8137              	.LBI1402:
  66:src/int.c     **** #ifndef TINY_BUILD
 8138              		.loc 1 66 6 view .LVU2306
 8139              	.LBB1403:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8140              		.loc 1 68 2 view .LVU2307
  71:src/int.c     **** #endif
 8141              		.loc 1 71 3 view .LVU2308
 8142 0056 5221     		movs	r1, #82
 8143 0058 6920     		movs	r0, #105
 8144 005a FFF7FEFF 		bl	cmdflag
 8145              	.LVL629:
  71:src/int.c     **** #endif
 8146              		.loc 1 71 3 is_stmt 0 view .LVU2309
 8147              	.LBE1403:
 8148              	.LBE1402:
 540:src/int.c     **** #else
 8149              		.loc 1 540 2 is_stmt 1 view .LVU2310
 540:src/int.c     **** #else
 8150              		.loc 1 540 9 is_stmt 0 view .LVU2311
 8151 005e 019A     		ldr	r2, [sp, #4]
 8152 0060 B2FA82F2 		clz	r2, r2
 8153 0064 3046     		mov	r0, r6
 8154 0066 3946     		mov	r1, r7
 8155 0068 5209     		lsrs	r2, r2, #5
 8156 006a FFF7FEFF 		bl	build_value
 8157              	.LVL630:
 8158 006e 0646     		mov	r6, r0
 8159              	.LVL631:
 540:src/int.c     **** #else
 8160              		.loc 1 540 9 view .LVU2312
 8161 0070 0F46     		mov	r7, r1
 8162              	.L483:
 544:src/int.c     **** 
 8163              		.loc 1 544 1 view .LVU2313
 8164 0072 3046     		mov	r0, r6
 8165 0074 3946     		mov	r1, r7
 8166 0076 03B0     		add	sp, sp, #12
 8167              		.cfi_remember_state
 8168              		.cfi_def_cfa_offset 28
 8169              		@ sp needed
 8170 0078 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8171              	.LVL632:
 8172              	.L484:
 8173              		.cfi_restore_state
ARM GAS  /tmp/ccl34fCK.s 			page 208


 536:src/int.c     **** 		return mask_value(-(signed long long int)xv);
 8174              		.loc 1 536 3 is_stmt 1 view .LVU2314
 8175              	.LBB1404:
 8176              	.LBI1404:
  66:src/int.c     **** #ifndef TINY_BUILD
 8177              		.loc 1 66 6 view .LVU2315
 8178              	.LBB1405:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8179              		.loc 1 68 2 view .LVU2316
 8180 007c FFF7FEFF 		bl	set_overflow.part.0
 8181              	.LVL633:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8182              		.loc 1 68 2 is_stmt 0 view .LVU2317
 8183              	.LBE1405:
 8184              	.LBE1404:
 537:src/int.c     **** 	}
 8185              		.loc 1 537 3 is_stmt 1 view .LVU2318
 8186              	.LBB1406:
 8187              	.LBB1407:
 8188              	.LBB1408:
 8189              	.LBB1409:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8190              		.loc 1 43 26 is_stmt 0 view .LVU2319
 8191 0080 95F8E917 		ldrb	r1, [r5, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8192              		.loc 1 43 15 view .LVU2320
 8193 0084 01F03F04 		and	r4, r1, #63
 8194              	.LBE1409:
 8195              	.LBE1408:
 8196              	.LBE1407:
 8197              	.LBE1406:
 537:src/int.c     **** 	}
 8198              		.loc 1 537 10 view .LVU2321
 8199 0088 7642     		rsbs	r6, r6, #0
 8200              	.LVL634:
 8201              	.LBB1416:
 8202              	.LBB1414:
 8203              	.LBB1412:
 8204              	.LBB1410:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8205              		.loc 1 44 26 view .LVU2322
 8206 008a 04F1FF31 		add	r1, r4, #-1
 8207              	.LBE1410:
 8208              	.LBE1412:
 8209              	.LBE1414:
 8210              	.LBE1416:
 537:src/int.c     **** 	}
 8211              		.loc 1 537 10 view .LVU2323
 8212 008e 67EB4707 		sbc	r7, r7, r7, lsl #1
 8213              	.LVL635:
 8214              	.LBB1417:
 8215              	.LBI1406:
  91:src/int.c     **** #ifndef TINY_BUILD
 8216              		.loc 1 91 15 is_stmt 1 view .LVU2324
 8217              	.LBB1415:
  93:src/int.c     **** 	long long int mask;
 8218              		.loc 1 93 2 view .LVU2325
ARM GAS  /tmp/ccl34fCK.s 			page 209


 8219              	.LBB1413:
 8220              	.LBI1408:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 8221              		.loc 1 42 14 view .LVU2326
 8222              	.LBB1411:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8223              		.loc 1 43 2 view .LVU2327
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8224              		.loc 1 44 2 view .LVU2328
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8225              		.loc 1 44 5 is_stmt 0 view .LVU2329
 8226 0092 3E29     		cmp	r1, #62
 8227 0094 EDD8     		bhi	.L483
 8228              	.LVL636:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8229              		.loc 1 44 5 view .LVU2330
 8230              	.LBE1411:
 8231              	.LBE1413:
  94:src/int.c     **** 
 8232              		.loc 1 94 2 is_stmt 1 view .LVU2331
  96:src/int.c     **** 		return v;
 8233              		.loc 1 96 2 view .LVU2332
  98:src/int.c     **** 	return v & mask;
 8234              		.loc 1 98 2 view .LVU2333
  99:src/int.c     **** #else
 8235              		.loc 1 99 2 view .LVU2334
  98:src/int.c     **** 	return v & mask;
 8236              		.loc 1 98 14 is_stmt 0 view .LVU2335
 8237 0096 0121     		movs	r1, #1
 8238 0098 A4F12000 		sub	r0, r4, #32
 8239 009c C4F12005 		rsb	r5, r4, #32
 8240 00a0 21FA05F5 		lsr	r5, r1, r5
 8241 00a4 01FA00F0 		lsl	r0, r1, r0
 8242 00a8 A140     		lsls	r1, r1, r4
  98:src/int.c     **** 	return v & mask;
 8243              		.loc 1 98 7 view .LVU2336
 8244 00aa 11F1FF31 		adds	r1, r1, #-1
  98:src/int.c     **** 	return v & mask;
 8245              		.loc 1 98 14 view .LVU2337
 8246 00ae 40EA0500 		orr	r0, r0, r5
  98:src/int.c     **** 	return v & mask;
 8247              		.loc 1 98 7 view .LVU2338
 8248 00b2 40F1FF30 		adc	r0, r0, #-1
  99:src/int.c     **** #else
 8249              		.loc 1 99 11 view .LVU2339
 8250 00b6 3840     		ands	r0, r0, r7
 8251 00b8 3140     		ands	r1, r1, r6
 8252 00ba 0E46     		mov	r6, r1
 8253              	.LVL637:
  99:src/int.c     **** #else
 8254              		.loc 1 99 11 view .LVU2340
 8255 00bc 0746     		mov	r7, r0
 8256              	.LBE1415:
 8257              	.LBE1417:
 544:src/int.c     **** 
 8258              		.loc 1 544 1 view .LVU2341
 8259 00be 3946     		mov	r1, r7
ARM GAS  /tmp/ccl34fCK.s 			page 210


 8260 00c0 3046     		mov	r0, r6
 8261 00c2 03B0     		add	sp, sp, #12
 8262              		.cfi_remember_state
 8263              		.cfi_def_cfa_offset 28
 8264              		@ sp needed
 8265 00c4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8266              	.LVL638:
 8267              	.L488:
 8268              		.cfi_restore_state
 8269              	.LBB1418:
 8270              	.LBB1401:
 8271              	.LBB1400:
 8272              	.LBB1399:
 544:src/int.c     **** 
 8273              		.loc 1 544 1 view .LVU2342
 8274 00c8 4FF00041 		mov	r1, #-2147483648
 8275 00cc BFE7     		b	.L486
 8276              	.L494:
 8277 00ce 00BF     		.align	2
 8278              	.L493:
 8279 00d0 00000000 		.word	PersistentRam
 8280              	.LBE1399:
 8281              	.LBE1400:
 8282              	.LBE1401:
 8283              	.LBE1418:
 8284              		.cfi_endproc
 8285              	.LFE30:
 8287              		.section	.text.intAbs,"ax",%progbits
 8288              		.align	1
 8289              		.p2align 2,,3
 8290              		.global	intAbs
 8291              		.syntax unified
 8292              		.thumb
 8293              		.thumb_func
 8294              		.fpu fpv4-sp-d16
 8296              	intAbs:
 8297              	.LVL639:
 8298              	.LFB31:
 546:src/int.c     **** #ifndef TINY_BUILD
 8299              		.loc 1 546 39 is_stmt 1 view -0
 8300              		.cfi_startproc
 8301              		@ args = 0, pretend = 0, frame = 8
 8302              		@ frame_needed = 0, uses_anonymous_args = 0
 548:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 8303              		.loc 1 548 2 view .LVU2344
 549:src/int.c     **** 
 8304              		.loc 1 549 2 view .LVU2345
 546:src/int.c     **** #ifndef TINY_BUILD
 8305              		.loc 1 546 39 is_stmt 0 view .LVU2346
 8306 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8307              		.cfi_def_cfa_offset 24
 8308              		.cfi_offset 4, -24
 8309              		.cfi_offset 5, -20
 8310              		.cfi_offset 6, -16
 8311              		.cfi_offset 7, -12
 8312              		.cfi_offset 8, -8
 8313              		.cfi_offset 14, -4
ARM GAS  /tmp/ccl34fCK.s 			page 211


 8314 0004 82B0     		sub	sp, sp, #8
 8315              		.cfi_def_cfa_offset 32
 549:src/int.c     **** 
 8316              		.loc 1 549 30 view .LVU2347
 8317 0006 01AA     		add	r2, sp, #4
 546:src/int.c     **** #ifndef TINY_BUILD
 8318              		.loc 1 546 39 view .LVU2348
 8319 0008 0646     		mov	r6, r0
 8320 000a 0F46     		mov	r7, r1
 549:src/int.c     **** 
 8321              		.loc 1 549 30 view .LVU2349
 8322 000c FFF7FEFF 		bl	extract_value
 8323              	.LVL640:
 549:src/int.c     **** 
 8324              		.loc 1 549 30 view .LVU2350
 8325 0010 0546     		mov	r5, r0
 8326 0012 0C46     		mov	r4, r1
 8327              	.LBB1419:
 8328              	.LBB1420:
  71:src/int.c     **** #endif
 8329              		.loc 1 71 3 view .LVU2351
 8330 0014 6920     		movs	r0, #105
 8331 0016 5221     		movs	r1, #82
 8332              	.LVL641:
  71:src/int.c     **** #endif
 8333              		.loc 1 71 3 view .LVU2352
 8334              	.LBE1420:
 8335              	.LBE1419:
 551:src/int.c     **** 	if (int_mode() == MODE_2COMP && x == topbit_mask()) {
 8336              		.loc 1 551 2 is_stmt 1 view .LVU2353
 8337              	.LBB1422:
 8338              	.LBI1419:
  66:src/int.c     **** #ifndef TINY_BUILD
 8339              		.loc 1 66 6 view .LVU2354
 8340              	.LBB1421:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8341              		.loc 1 68 2 view .LVU2355
  71:src/int.c     **** #endif
 8342              		.loc 1 71 3 view .LVU2356
 8343 0018 FFF7FEFF 		bl	cmdflag
 8344              	.LVL642:
  71:src/int.c     **** #endif
 8345              		.loc 1 71 3 is_stmt 0 view .LVU2357
 8346              	.LBE1421:
 8347              	.LBE1422:
 552:src/int.c     **** 		set_overflow(1);
 8348              		.loc 1 552 2 is_stmt 1 view .LVU2358
 8349              	.LBB1423:
 8350              	.LBI1423:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 8351              		.loc 1 38 23 view .LVU2359
 8352              	.LBB1424:
  39:src/int.c     **** }
 8353              		.loc 1 39 2 view .LVU2360
  39:src/int.c     **** }
 8354              		.loc 1 39 39 is_stmt 0 view .LVU2361
 8355 001c 254B     		ldr	r3, .L510
ARM GAS  /tmp/ccl34fCK.s 			page 212


 8356 001e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 8357              	.LBE1424:
 8358              	.LBE1423:
 8359              	.LBB1425:
 8360              	.LBB1426:
 8361              	.LBB1427:
 8362              	.LBB1428:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8363              		.loc 1 43 26 view .LVU2362
 8364 0022 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
 8365              	.LBE1428:
 8366              	.LBE1427:
 8367              	.LBE1426:
 8368              	.LBE1425:
 552:src/int.c     **** 		set_overflow(1);
 8369              		.loc 1 552 5 view .LVU2363
 8370 0026 12F00C0F 		tst	r2, #12
 8371              	.LBB1436:
 8372              	.LBB1433:
 8373              	.LBB1431:
 8374              	.LBB1429:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8375              		.loc 1 43 15 view .LVU2364
 8376 002a 03F03F02 		and	r2, r3, #63
 8377              	.LVL643:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8378              		.loc 1 44 2 is_stmt 1 view .LVU2365
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8379              		.loc 1 44 26 is_stmt 0 view .LVU2366
 8380 002e 02F1FF33 		add	r3, r2, #-1
 8381              	.LBE1429:
 8382              	.LBE1431:
 8383              	.LBE1433:
 8384              	.LBE1436:
 552:src/int.c     **** 		set_overflow(1);
 8385              		.loc 1 552 5 view .LVU2367
 8386 0032 2AD1     		bne	.L496
 8387              	.LBB1437:
 8388              	.LBI1425:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 8389              		.loc 1 109 22 is_stmt 1 view .LVU2368
 8390              	.LBB1434:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 8391              		.loc 1 110 2 view .LVU2369
 8392              	.LBB1432:
 8393              	.LBI1427:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 8394              		.loc 1 42 14 view .LVU2370
 8395              	.LBB1430:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8396              		.loc 1 43 2 view .LVU2371
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8397              		.loc 1 44 5 is_stmt 0 view .LVU2372
 8398 0034 3E2B     		cmp	r3, #62
 8399 0036 2FD8     		bhi	.L509
 8400              	.LVL644:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccl34fCK.s 			page 213


 8401              		.loc 1 44 5 view .LVU2373
 8402              	.LBE1430:
 8403              	.LBE1432:
 111:src/int.c     **** 	return bit;
 8404              		.loc 1 111 2 is_stmt 1 view .LVU2374
 112:src/int.c     **** }
 8405              		.loc 1 112 2 view .LVU2375
 111:src/int.c     **** 	return bit;
 8406              		.loc 1 111 16 is_stmt 0 view .LVU2376
 8407 0038 4FF0010C 		mov	ip, #1
 8408 003c A2F12108 		sub	r8, r2, #33
 8409 0040 C3F1200E 		rsb	lr, r3, #32
 8410 0044 0CFA08F1 		lsl	r1, ip, r8
 8411 0048 2CFA0EFE 		lsr	lr, ip, lr
 8412 004c 41EA0E01 		orr	r1, r1, lr
 8413 0050 0CFA03F0 		lsl	r0, ip, r3
 8414              	.LBE1434:
 8415              	.LBE1437:
 552:src/int.c     **** 		set_overflow(1);
 8416              		.loc 1 552 31 view .LVU2377
 8417 0054 8F42     		cmp	r7, r1
 8418 0056 08BF     		it	eq
 8419 0058 8642     		cmpeq	r6, r0
 8420 005a 25D0     		beq	.L501
 556:src/int.c     **** #else
 8421              		.loc 1 556 2 is_stmt 1 view .LVU2378
 8422              	.LVL645:
 8423              	.LBB1438:
 8424              	.LBI1438:
 146:src/int.c     **** #ifndef TINY_BUILD
 8425              		.loc 1 146 15 view .LVU2379
 8426              	.LBB1439:
 148:src/int.c     **** 	long long int v = mask_value(x);
 8427              		.loc 1 148 2 view .LVU2380
 8428              	.LBE1439:
 8429              	.LBE1438:
  39:src/int.c     **** }
 8430              		.loc 1 39 2 view .LVU2381
 8431              	.LBB1461:
 8432              	.LBB1456:
 149:src/int.c     **** 
 8433              		.loc 1 149 2 view .LVU2382
 149:src/int.c     **** 
 8434              		.loc 1 149 20 is_stmt 0 view .LVU2383
 8435 005c 2846     		mov	r0, r5
 8436 005e 2146     		mov	r1, r4
 8437              	.LVL646:
 8438              	.LBB1440:
 8439              	.LBI1440:
  91:src/int.c     **** #ifndef TINY_BUILD
 8440              		.loc 1 91 15 is_stmt 1 view .LVU2384
 8441              	.LBB1441:
  93:src/int.c     **** 	long long int mask;
 8442              		.loc 1 93 2 view .LVU2385
 8443              	.LBB1442:
 8444              	.LBI1442:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
ARM GAS  /tmp/ccl34fCK.s 			page 214


 8445              		.loc 1 42 14 view .LVU2386
 8446              	.LBB1443:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8447              		.loc 1 43 2 view .LVU2387
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8448              		.loc 1 44 2 view .LVU2388
 8449              	.L500:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8450              		.loc 1 44 2 is_stmt 0 view .LVU2389
 8451              	.LBE1443:
 8452              	.LBE1442:
  94:src/int.c     **** 
 8453              		.loc 1 94 2 is_stmt 1 view .LVU2390
  96:src/int.c     **** 		return v;
 8454              		.loc 1 96 2 view .LVU2391
  98:src/int.c     **** 	return v & mask;
 8455              		.loc 1 98 2 view .LVU2392
  99:src/int.c     **** #else
 8456              		.loc 1 99 2 view .LVU2393
  98:src/int.c     **** 	return v & mask;
 8457              		.loc 1 98 14 is_stmt 0 view .LVU2394
 8458 0060 0123     		movs	r3, #1
 8459 0062 A2F12004 		sub	r4, r2, #32
 8460 0066 C2F12005 		rsb	r5, r2, #32
 8461 006a 03FA04F4 		lsl	r4, r3, r4
 8462 006e 23FA05F5 		lsr	r5, r3, r5
 8463 0072 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 8464              		.loc 1 98 7 view .LVU2395
 8465 0074 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 8466              		.loc 1 98 14 view .LVU2396
 8467 0078 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 8468              		.loc 1 98 7 view .LVU2397
 8469 007c 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 8470              		.loc 1 99 11 view .LVU2398
 8471 0080 2140     		ands	r1, r1, r4
 8472              	.LVL647:
  99:src/int.c     **** #else
 8473              		.loc 1 99 11 view .LVU2399
 8474 0082 1840     		ands	r0, r0, r3
 8475              	.LVL648:
 8476              	.L495:
  99:src/int.c     **** #else
 8477              		.loc 1 99 11 view .LVU2400
 8478              	.LBE1441:
 8479              	.LBE1440:
 8480              	.LBE1456:
 8481              	.LBE1461:
 560:src/int.c     **** 
 8482              		.loc 1 560 1 view .LVU2401
 8483 0084 02B0     		add	sp, sp, #8
 8484              		.cfi_remember_state
 8485              		.cfi_def_cfa_offset 24
 8486              		@ sp needed
ARM GAS  /tmp/ccl34fCK.s 			page 215


 8487 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8488              	.LVL649:
 8489              	.L496:
 8490              		.cfi_restore_state
 556:src/int.c     **** #else
 8491              		.loc 1 556 2 is_stmt 1 view .LVU2402
 8492              	.LBB1462:
 146:src/int.c     **** #ifndef TINY_BUILD
 8493              		.loc 1 146 15 view .LVU2403
 8494              	.LBB1457:
 148:src/int.c     **** 	long long int v = mask_value(x);
 8495              		.loc 1 148 2 view .LVU2404
 8496              	.LBE1457:
 8497              	.LBE1462:
  39:src/int.c     **** }
 8498              		.loc 1 39 2 view .LVU2405
 8499              	.LBB1463:
 8500              	.LBB1458:
 149:src/int.c     **** 
 8501              		.loc 1 149 2 view .LVU2406
 8502              	.LBB1453:
 8503              	.LBB1450:
 8504              	.LBB1447:
 8505              	.LBB1444:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8506              		.loc 1 44 5 is_stmt 0 view .LVU2407
 8507 008a 3E2B     		cmp	r3, #62
 8508              	.LBE1444:
 8509              	.LBE1447:
 8510              	.LBE1450:
 8511              	.LBE1453:
 149:src/int.c     **** 
 8512              		.loc 1 149 20 view .LVU2408
 8513 008c 2846     		mov	r0, r5
 8514 008e 2146     		mov	r1, r4
 8515              	.LVL650:
 8516              	.LBB1454:
  91:src/int.c     **** #ifndef TINY_BUILD
 8517              		.loc 1 91 15 is_stmt 1 view .LVU2409
 8518              	.LBB1451:
  93:src/int.c     **** 	long long int mask;
 8519              		.loc 1 93 2 view .LVU2410
 8520              	.LBB1448:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 8521              		.loc 1 42 14 view .LVU2411
 8522              	.LBB1445:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8523              		.loc 1 43 2 view .LVU2412
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8524              		.loc 1 44 2 view .LVU2413
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8525              		.loc 1 44 5 is_stmt 0 view .LVU2414
 8526 0090 E6D9     		bls	.L500
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8527              		.loc 1 44 5 view .LVU2415
 8528              	.LBE1445:
 8529              	.LBE1448:
ARM GAS  /tmp/ccl34fCK.s 			page 216


 8530              	.LBE1451:
 8531              	.LBE1454:
 8532              	.LBE1458:
 8533              	.LBE1463:
 560:src/int.c     **** 
 8534              		.loc 1 560 1 view .LVU2416
 8535 0092 02B0     		add	sp, sp, #8
 8536              		.cfi_remember_state
 8537              		.cfi_def_cfa_offset 24
 8538              		@ sp needed
 8539 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8540              	.LVL651:
 8541              	.L509:
 8542              		.cfi_restore_state
 8543              	.LBB1464:
 8544              	.LBB1435:
 111:src/int.c     **** 	return bit;
 8545              		.loc 1 111 2 is_stmt 1 view .LVU2417
 112:src/int.c     **** }
 8546              		.loc 1 112 2 view .LVU2418
 112:src/int.c     **** }
 8547              		.loc 1 112 2 is_stmt 0 view .LVU2419
 8548              	.LBE1435:
 8549              	.LBE1464:
 552:src/int.c     **** 		set_overflow(1);
 8550              		.loc 1 552 31 view .LVU2420
 8551 0098 B7F1004F 		cmp	r7, #-2147483648
 8552 009c 08BF     		it	eq
 8553 009e 002E     		cmpeq	r6, #0
 8554 00a0 02D0     		beq	.L501
 556:src/int.c     **** #else
 8555              		.loc 1 556 2 is_stmt 1 view .LVU2421
 8556              	.LVL652:
 8557              	.LBB1465:
 146:src/int.c     **** #ifndef TINY_BUILD
 8558              		.loc 1 146 15 view .LVU2422
 8559              	.LBB1459:
 148:src/int.c     **** 	long long int v = mask_value(x);
 8560              		.loc 1 148 2 view .LVU2423
 8561              	.LBE1459:
 8562              	.LBE1465:
  39:src/int.c     **** }
 8563              		.loc 1 39 2 view .LVU2424
 8564              	.LBB1466:
 8565              	.LBB1460:
 149:src/int.c     **** 
 8566              		.loc 1 149 2 view .LVU2425
 149:src/int.c     **** 
 8567              		.loc 1 149 20 is_stmt 0 view .LVU2426
 8568 00a2 2846     		mov	r0, r5
 8569 00a4 2146     		mov	r1, r4
 8570              	.LVL653:
 8571              	.LBB1455:
  91:src/int.c     **** #ifndef TINY_BUILD
 8572              		.loc 1 91 15 is_stmt 1 view .LVU2427
 8573              	.LBB1452:
  93:src/int.c     **** 	long long int mask;
ARM GAS  /tmp/ccl34fCK.s 			page 217


 8574              		.loc 1 93 2 view .LVU2428
 8575              	.LBB1449:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 8576              		.loc 1 42 14 view .LVU2429
 8577              	.LBB1446:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8578              		.loc 1 43 2 view .LVU2430
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8579              		.loc 1 44 2 view .LVU2431
 8580 00a6 EDE7     		b	.L495
 8581              	.LVL654:
 8582              	.L501:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8583              		.loc 1 44 2 is_stmt 0 view .LVU2432
 8584              	.LBE1446:
 8585              	.LBE1449:
 8586              	.LBE1452:
 8587              	.LBE1455:
 8588              	.LBE1460:
 8589              	.LBE1466:
 553:src/int.c     **** 		return x;
 8590              		.loc 1 553 3 is_stmt 1 view .LVU2433
 8591              	.LBB1467:
 8592              	.LBI1467:
  66:src/int.c     **** #ifndef TINY_BUILD
 8593              		.loc 1 66 6 view .LVU2434
 8594              	.LBB1468:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8595              		.loc 1 68 2 view .LVU2435
 8596 00a8 FFF7FEFF 		bl	set_overflow.part.0
 8597              	.LVL655:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 8598              		.loc 1 68 2 is_stmt 0 view .LVU2436
 8599              	.LBE1468:
 8600              	.LBE1467:
 554:src/int.c     **** 	}
 8601              		.loc 1 554 3 is_stmt 1 view .LVU2437
 554:src/int.c     **** 	}
 8602              		.loc 1 554 10 is_stmt 0 view .LVU2438
 8603 00ac 3046     		mov	r0, r6
 8604 00ae 3946     		mov	r1, r7
 8605 00b0 E8E7     		b	.L495
 8606              	.L511:
 8607 00b2 00BF     		.align	2
 8608              	.L510:
 8609 00b4 00000000 		.word	PersistentRam
 8610              		.cfi_endproc
 8611              	.LFE31:
 8613              		.section	.text.intDblMul,"ax",%progbits
 8614              		.align	1
 8615              		.p2align 2,,3
 8616              		.global	intDblMul
 8617              		.syntax unified
 8618              		.thumb
 8619              		.thumb_func
 8620              		.fpu fpv4-sp-d16
 8622              	intDblMul:
ARM GAS  /tmp/ccl34fCK.s 			page 218


 8623              	.LVL656:
 8624              	.LFB34:
 578:src/int.c     **** #ifndef TINY_BUILD
 8625              		.loc 1 578 31 is_stmt 1 view -0
 8626              		.cfi_startproc
 8627              		@ args = 0, pretend = 0, frame = 72
 8628              		@ frame_needed = 0, uses_anonymous_args = 0
 580:src/int.c     **** 	unsigned long long int xv, yv;
 8629              		.loc 1 580 2 view .LVU2440
 8630              	.LBB1469:
 8631              	.LBI1469:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 8632              		.loc 1 38 23 view .LVU2441
 8633              	.LBB1470:
  39:src/int.c     **** }
 8634              		.loc 1 39 2 view .LVU2442
 8635              	.LBE1470:
 8636              	.LBE1469:
 578:src/int.c     **** #ifndef TINY_BUILD
 8637              		.loc 1 578 31 is_stmt 0 view .LVU2443
 8638 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8639              		.cfi_def_cfa_offset 36
 8640              		.cfi_offset 4, -36
 8641              		.cfi_offset 5, -32
 8642              		.cfi_offset 6, -28
 8643              		.cfi_offset 7, -24
 8644              		.cfi_offset 8, -20
 8645              		.cfi_offset 9, -16
 8646              		.cfi_offset 10, -12
 8647              		.cfi_offset 11, -8
 8648              		.cfi_offset 14, -4
 8649              	.LBB1473:
 8650              	.LBB1471:
  39:src/int.c     **** }
 8651              		.loc 1 39 39 view .LVU2444
 8652 0004 AF4F     		ldr	r7, .L544
 8653 0006 97F8E837 		ldrb	r3, [r7, #2024]	@ zero_extendqisi2
 8654              	.LBE1471:
 8655              	.LBE1473:
 578:src/int.c     **** #ifndef TINY_BUILD
 8656              		.loc 1 578 31 view .LVU2445
 8657 000a 93B0     		sub	sp, sp, #76
 8658              		.cfi_def_cfa_offset 112
 8659              	.LBB1474:
 8660              	.LBB1472:
  39:src/int.c     **** }
 8661              		.loc 1 39 39 view .LVU2446
 8662 000c C3F38103 		ubfx	r3, r3, #2, #2
 8663 0010 0193     		str	r3, [sp, #4]
 8664              	.LVL657:
  39:src/int.c     **** }
 8665              		.loc 1 39 39 view .LVU2447
 8666              	.LBE1472:
 8667              	.LBE1474:
 581:src/int.c     **** 	int s;	
 8668              		.loc 1 581 2 is_stmt 1 view .LVU2448
 582:src/int.c     **** 	unsigned short int xa[4], ya[4];
ARM GAS  /tmp/ccl34fCK.s 			page 219


 8669              		.loc 1 582 2 view .LVU2449
 583:src/int.c     **** 	unsigned int t[8];
 8670              		.loc 1 583 2 view .LVU2450
 584:src/int.c     **** 	unsigned short int r[8];
 8671              		.loc 1 584 2 view .LVU2451
 585:src/int.c     **** 	int i, j;
 8672              		.loc 1 585 2 view .LVU2452
 586:src/int.c     **** 
 8673              		.loc 1 586 2 view .LVU2453
 8674              	.LBB1475:
 589:src/int.c     **** 		int sx, sy;
 8675              		.loc 1 589 3 view .LVU2454
 590:src/int.c     **** 
 8676              		.loc 1 590 3 view .LVU2455
 592:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8677              		.loc 1 592 3 view .LVU2456
 592:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8678              		.loc 1 592 8 is_stmt 0 view .LVU2457
 8679 0012 FFF7FEFF 		bl	getX_int
 8680              	.LVL658:
 592:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8681              		.loc 1 592 8 view .LVU2458
 8682 0016 0646     		mov	r6, r0
 593:src/int.c     **** 
 8683              		.loc 1 593 8 view .LVU2459
 8684 0018 6520     		movs	r0, #101
 592:src/int.c     **** 		yr = get_reg_n_int(regY_idx);
 8685              		.loc 1 592 8 view .LVU2460
 8686 001a 0C46     		mov	r4, r1
 8687              	.LVL659:
 593:src/int.c     **** 
 8688              		.loc 1 593 3 is_stmt 1 view .LVU2461
 593:src/int.c     **** 
 8689              		.loc 1 593 8 is_stmt 0 view .LVU2462
 8690 001c FFF7FEFF 		bl	get_reg_n_int
 8691              	.LVL660:
 595:src/int.c     **** 		yv = extract_value(yr, &sy);
 8692              		.loc 1 595 8 view .LVU2463
 8693 0020 0DF11808 		add	r8, sp, #24
 593:src/int.c     **** 
 8694              		.loc 1 593 8 view .LVU2464
 8695 0024 8146     		mov	r9, r0
 8696 0026 0D46     		mov	r5, r1
 595:src/int.c     **** 		yv = extract_value(yr, &sy);
 8697              		.loc 1 595 8 view .LVU2465
 8698 0028 3046     		mov	r0, r6
 8699 002a 2146     		mov	r1, r4
 8700 002c 4246     		mov	r2, r8
 8701              	.LVL661:
 595:src/int.c     **** 		yv = extract_value(yr, &sy);
 8702              		.loc 1 595 3 is_stmt 1 view .LVU2466
 595:src/int.c     **** 		yv = extract_value(yr, &sy);
 8703              		.loc 1 595 8 is_stmt 0 view .LVU2467
 8704 002e FFF7FEFF 		bl	extract_value
 8705              	.LVL662:
 596:src/int.c     **** 
 8706              		.loc 1 596 8 view .LVU2468
ARM GAS  /tmp/ccl34fCK.s 			page 220


 8707 0032 0AAA     		add	r2, sp, #40
 595:src/int.c     **** 		yv = extract_value(yr, &sy);
 8708              		.loc 1 595 8 view .LVU2469
 8709 0034 0646     		mov	r6, r0
 8710              	.LVL663:
 595:src/int.c     **** 		yv = extract_value(yr, &sy);
 8711              		.loc 1 595 8 view .LVU2470
 8712 0036 0C46     		mov	r4, r1
 8713              	.LVL664:
 596:src/int.c     **** 
 8714              		.loc 1 596 3 is_stmt 1 view .LVU2471
 596:src/int.c     **** 
 8715              		.loc 1 596 8 is_stmt 0 view .LVU2472
 8716 0038 4846     		mov	r0, r9
 8717              	.LVL665:
 596:src/int.c     **** 
 8718              		.loc 1 596 8 view .LVU2473
 8719 003a 2946     		mov	r1, r5
 8720              	.LVL666:
 596:src/int.c     **** 
 8721              		.loc 1 596 8 view .LVU2474
 8722 003c FFF7FEFF 		bl	extract_value
 8723              	.LVL667:
 8724              	.LBE1475:
 615:src/int.c     **** 
 8725              		.loc 1 615 8 view .LVU2475
 8726 0040 0023     		movs	r3, #0
 8727              	.LBB1476:
 596:src/int.c     **** 
 8728              		.loc 1 596 8 view .LVU2476
 8729 0042 8646     		mov	lr, r0
 8730              	.LVL668:
 598:src/int.c     **** 	}
 8731              		.loc 1 598 3 is_stmt 1 view .LVU2477
 8732              	.LBE1476:
 8733              	.LBB1477:
 8734              	.LBB1478:
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8735              		.loc 1 565 13 is_stmt 0 view .LVU2478
 8736 0044 4FEA1E42 		lsr	r2, lr, #16
 8737              	.LBE1478:
 8738              	.LBE1477:
 615:src/int.c     **** 
 8739              		.loc 1 615 8 view .LVU2479
 8740 0048 CDE90B33 		strd	r3, r3, [sp, #44]
 8741 004c CDE90D33 		strd	r3, r3, [sp, #52]
 8742 0050 CDE90F33 		strd	r3, r3, [sp, #60]
 8743              	.LBB1484:
 8744              	.LBB1485:
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8745              		.loc 1 565 13 view .LVU2480
 8746 0054 300C     		lsrs	r0, r6, #16
 8747              	.LVL669:
 567:src/int.c     **** }
 8748              		.loc 1 567 20 view .LVU2481
 8749 0056 4FEA1449 		lsr	r9, r4, #16
 8750              	.LVL670:
ARM GAS  /tmp/ccl34fCK.s 			page 221


 567:src/int.c     **** }
 8751              		.loc 1 567 20 view .LVU2482
 8752              	.LBE1485:
 8753              	.LBE1484:
 8754              	.LBB1490:
 8755              	.LBB1479:
 8756 005a 4FEA114C 		lsr	ip, r1, #16
 8757 005e 0AAD     		add	r5, sp, #40
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8758              		.loc 1 565 8 view .LVU2483
 8759 0060 ADF81220 		strh	r2, [sp, #18]	@ movhi
 8760              	.LBE1479:
 8761              	.LBE1490:
 8762              	.LBB1491:
 598:src/int.c     **** 	}
 8763              		.loc 1 598 10 view .LVU2484
 8764 0064 069A     		ldr	r2, [sp, #24]
 8765              	.LBE1491:
 8766              	.LBB1492:
 8767              	.LBB1486:
 567:src/int.c     **** }
 8768              		.loc 1 567 8 view .LVU2485
 8769 0066 ADF80E90 		strh	r9, [sp, #14]	@ movhi
 8770              	.LBE1486:
 8771              	.LBE1492:
 8772              	.LBB1493:
 8773              	.LBB1480:
 8774 006a ADF816C0 		strh	ip, [sp, #22]	@ movhi
 8775              	.LBE1480:
 8776              	.LBE1493:
 8777              	.LBB1494:
 598:src/int.c     **** 	}
 8778              		.loc 1 598 10 view .LVU2486
 8779 006e DDF82890 		ldr	r9, [sp, #40]
 8780              	.LBE1494:
 8781              	.LBB1495:
 8782              	.LBB1487:
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8783              		.loc 1 565 8 view .LVU2487
 8784 0072 ADF80A00 		strh	r0, [sp, #10]	@ movhi
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 8785              		.loc 1 566 8 view .LVU2488
 8786 0076 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 8787              	.LBE1487:
 8788              	.LBE1495:
 8789              	.LBB1496:
 8790              	.LBB1481:
 8791 007a ADF81410 		strh	r1, [sp, #20]	@ movhi
 8792              	.LBE1481:
 8793              	.LBE1496:
 8794              	.LBB1497:
 8795              	.LBB1488:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8796              		.loc 1 564 8 view .LVU2489
 8797 007e B6B2     		uxth	r6, r6
 8798              	.LVL671:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
ARM GAS  /tmp/ccl34fCK.s 			page 222


 8799              		.loc 1 564 8 view .LVU2490
 8800              	.LBE1488:
 8801              	.LBE1497:
 8802              	.LBB1498:
 8803              	.LBB1482:
 8804 0080 1FFA8EFE 		uxth	lr, lr
 8805              	.LVL672:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8806              		.loc 1 564 8 view .LVU2491
 8807              	.LBE1482:
 8808              	.LBE1498:
 615:src/int.c     **** 
 8809              		.loc 1 615 8 view .LVU2492
 8810 0084 AC46     		mov	ip, r5
 8811 0086 1193     		str	r3, [sp, #68]
 8812              	.LBB1499:
 598:src/int.c     **** 	}
 8813              		.loc 1 598 10 view .LVU2493
 8814 0088 0092     		str	r2, [sp]
 8815              	.LVL673:
 598:src/int.c     **** 	}
 8816              		.loc 1 598 10 view .LVU2494
 8817              	.LBE1499:
 611:src/int.c     **** 	breakup(yv, ya);
 8818              		.loc 1 611 2 is_stmt 1 view .LVU2495
 8819              	.LBB1500:
 8820              	.LBI1484:
 563:src/int.c     **** 	xv[0] = x & 0xffff;
 8821              		.loc 1 563 13 view .LVU2496
 8822              	.LBB1489:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8823              		.loc 1 564 2 view .LVU2497
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8824              		.loc 1 565 2 view .LVU2498
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 8825              		.loc 1 566 2 view .LVU2499
 567:src/int.c     **** }
 8826              		.loc 1 567 2 view .LVU2500
 567:src/int.c     **** }
 8827              		.loc 1 567 2 is_stmt 0 view .LVU2501
 8828              	.LBE1489:
 8829              	.LBE1500:
 612:src/int.c     **** 
 8830              		.loc 1 612 2 is_stmt 1 view .LVU2502
 8831              	.LBB1501:
 8832              	.LBI1477:
 563:src/int.c     **** 	xv[0] = x & 0xffff;
 8833              		.loc 1 563 13 view .LVU2503
 8834              	.LBB1483:
 564:src/int.c     **** 	xv[1] = (x >> 16) & 0xffff;
 8835              		.loc 1 564 2 view .LVU2504
 565:src/int.c     **** 	xv[2] = (x >> 32) & 0xffff;
 8836              		.loc 1 565 2 view .LVU2505
 566:src/int.c     **** 	xv[3] = (x >> 48) & 0xffff;
 8837              		.loc 1 566 2 view .LVU2506
 567:src/int.c     **** }
 8838              		.loc 1 567 2 view .LVU2507
ARM GAS  /tmp/ccl34fCK.s 			page 223


 567:src/int.c     **** }
 8839              		.loc 1 567 2 is_stmt 0 view .LVU2508
 8840              	.LBE1483:
 8841              	.LBE1501:
 614:src/int.c     **** 		t[i] = 0;
 8842              		.loc 1 614 2 is_stmt 1 view .LVU2509
 614:src/int.c     **** 		t[i] = 0;
 8843              		.loc 1 614 12 view .LVU2510
 615:src/int.c     **** 
 8844              		.loc 1 615 3 view .LVU2511
 615:src/int.c     **** 
 8845              		.loc 1 615 8 is_stmt 0 view .LVU2512
 8846 008a 0A93     		str	r3, [sp, #40]
 614:src/int.c     **** 		t[i] = 0;
 8847              		.loc 1 614 17 is_stmt 1 view .LVU2513
 8848              	.LVL674:
 614:src/int.c     **** 		t[i] = 0;
 8849              		.loc 1 614 12 view .LVU2514
 615:src/int.c     **** 
 8850              		.loc 1 615 3 view .LVU2515
 614:src/int.c     **** 		t[i] = 0;
 8851              		.loc 1 614 17 view .LVU2516
 614:src/int.c     **** 		t[i] = 0;
 8852              		.loc 1 614 12 view .LVU2517
 615:src/int.c     **** 
 8853              		.loc 1 615 3 view .LVU2518
 614:src/int.c     **** 		t[i] = 0;
 8854              		.loc 1 614 17 view .LVU2519
 614:src/int.c     **** 		t[i] = 0;
 8855              		.loc 1 614 12 view .LVU2520
 615:src/int.c     **** 
 8856              		.loc 1 615 3 view .LVU2521
 614:src/int.c     **** 		t[i] = 0;
 8857              		.loc 1 614 17 view .LVU2522
 614:src/int.c     **** 		t[i] = 0;
 8858              		.loc 1 614 12 view .LVU2523
 615:src/int.c     **** 
 8859              		.loc 1 615 3 view .LVU2524
 614:src/int.c     **** 		t[i] = 0;
 8860              		.loc 1 614 17 view .LVU2525
 614:src/int.c     **** 		t[i] = 0;
 8861              		.loc 1 614 12 view .LVU2526
 615:src/int.c     **** 
 8862              		.loc 1 615 3 view .LVU2527
 614:src/int.c     **** 		t[i] = 0;
 8863              		.loc 1 614 17 view .LVU2528
 614:src/int.c     **** 		t[i] = 0;
 8864              		.loc 1 614 12 view .LVU2529
 615:src/int.c     **** 
 8865              		.loc 1 615 3 view .LVU2530
 614:src/int.c     **** 		t[i] = 0;
 8866              		.loc 1 614 17 view .LVU2531
 614:src/int.c     **** 		t[i] = 0;
 8867              		.loc 1 614 12 view .LVU2532
 615:src/int.c     **** 
 8868              		.loc 1 615 3 view .LVU2533
 614:src/int.c     **** 		t[i] = 0;
ARM GAS  /tmp/ccl34fCK.s 			page 224


 8869              		.loc 1 614 17 view .LVU2534
 614:src/int.c     **** 		t[i] = 0;
 8870              		.loc 1 614 12 view .LVU2535
 617:src/int.c     **** 		for (j=0; j<4; j++)
 8871              		.loc 1 617 8 is_stmt 0 view .LVU2536
 8872 008c 1846     		mov	r0, r3
 8873 008e 0DF10A0B 		add	fp, sp, #10
 8874              	.LVL675:
 8875              	.L513:
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8876              		.loc 1 618 13 is_stmt 1 view .LVU2537
 619:src/int.c     **** 
 8877              		.loc 1 619 4 view .LVU2538
 619:src/int.c     **** 
 8878              		.loc 1 619 16 is_stmt 0 view .LVU2539
 8879 0092 6146     		mov	r1, ip
 8880 0094 0DF11204 		add	r4, sp, #18
 619:src/int.c     **** 
 8881              		.loc 1 619 11 view .LVU2540
 8882 0098 0B68     		ldr	r3, [r1]
 619:src/int.c     **** 
 8883              		.loc 1 619 16 view .LVU2541
 8884 009a 7246     		mov	r2, lr
 619:src/int.c     **** 
 8885              		.loc 1 619 11 view .LVU2542
 8886 009c 06FB0232 		mla	r2, r6, r2, r3
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8887              		.loc 1 618 3 view .LVU2543
 8888 00a0 A045     		cmp	r8, r4
 619:src/int.c     **** 
 8889              		.loc 1 619 11 view .LVU2544
 8890 00a2 41F8042B 		str	r2, [r1], #4
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8891              		.loc 1 618 18 is_stmt 1 view .LVU2545
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8892              		.loc 1 618 13 view .LVU2546
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8893              		.loc 1 618 3 is_stmt 0 view .LVU2547
 8894 00a6 08D0     		beq	.L541
 8895              	.L514:
 8896 00a8 34F8022B 		ldrh	r2, [r4], #2
 619:src/int.c     **** 
 8897              		.loc 1 619 4 is_stmt 1 view .LVU2548
 619:src/int.c     **** 
 8898              		.loc 1 619 11 is_stmt 0 view .LVU2549
 8899 00ac 0B68     		ldr	r3, [r1]
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8900              		.loc 1 618 3 view .LVU2550
 8901 00ae A045     		cmp	r8, r4
 619:src/int.c     **** 
 8902              		.loc 1 619 11 view .LVU2551
 8903 00b0 06FB0232 		mla	r2, r6, r2, r3
 8904 00b4 41F8042B 		str	r2, [r1], #4
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8905              		.loc 1 618 18 is_stmt 1 view .LVU2552
 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8906              		.loc 1 618 13 view .LVU2553
ARM GAS  /tmp/ccl34fCK.s 			page 225


 618:src/int.c     **** 			t[i+j] += xa[i] * ya[j];
 8907              		.loc 1 618 3 is_stmt 0 view .LVU2554
 8908 00b8 F6D1     		bne	.L514
 8909              	.L541:
 617:src/int.c     **** 		for (j=0; j<4; j++)
 8910              		.loc 1 617 17 is_stmt 1 discriminator 2 view .LVU2555
 617:src/int.c     **** 		for (j=0; j<4; j++)
 8911              		.loc 1 617 18 is_stmt 0 discriminator 2 view .LVU2556
 8912 00ba 0130     		adds	r0, r0, #1
 8913              	.LVL676:
 617:src/int.c     **** 		for (j=0; j<4; j++)
 8914              		.loc 1 617 12 is_stmt 1 discriminator 2 view .LVU2557
 617:src/int.c     **** 		for (j=0; j<4; j++)
 8915              		.loc 1 617 2 is_stmt 0 discriminator 2 view .LVU2558
 8916 00bc 0428     		cmp	r0, #4
 8917 00be 0CF1040C 		add	ip, ip, #4
 8918 00c2 02D0     		beq	.L515
 8919 00c4 3BF8026B 		ldrh	r6, [fp], #2
 8920 00c8 E3E7     		b	.L513
 8921              	.L515:
 8922 00ca 0DF11600 		add	r0, sp, #22
 8923              	.LVL677:
 617:src/int.c     **** 		for (j=0; j<4; j++)
 8924              		.loc 1 617 2 view .LVU2559
 8925 00ce 0122     		movs	r2, #1
 8926              	.L518:
 8927              	.LVL678:
 622:src/int.c     **** 			t[i+1] += t[i] >> 16;
 8928              		.loc 1 622 3 is_stmt 1 view .LVU2560
 623:src/int.c     **** 		r[i] = t[i];
 8929              		.loc 1 623 4 view .LVU2561
 624:src/int.c     **** 	}
 8930              		.loc 1 624 3 view .LVU2562
 622:src/int.c     **** 			t[i+1] += t[i] >> 16;
 8931              		.loc 1 622 8 is_stmt 0 view .LVU2563
 8932 00d0 55F8043B 		ldr	r3, [r5], #4
 622:src/int.c     **** 			t[i+1] += t[i] >> 16;
 8933              		.loc 1 622 6 view .LVU2564
 8934 00d4 B3F5803F 		cmp	r3, #65536
 8935 00d8 02F10102 		add	r2, r2, #1
 8936              	.LVL679:
 622:src/int.c     **** 			t[i+1] += t[i] >> 16;
 8937              		.loc 1 622 6 view .LVU2565
 8938 00dc 05D3     		bcc	.L517
 623:src/int.c     **** 		r[i] = t[i];
 8939              		.loc 1 623 11 view .LVU2566
 8940 00de 2968     		ldr	r1, [r5]
 8941 00e0 01EB1341 		add	r1, r1, r3, lsr #16
 8942 00e4 55F8043C 		ldr	r3, [r5, #-4]
 8943 00e8 2960     		str	r1, [r5]
 8944              	.L517:
 621:src/int.c     **** 		if (t[i] >= 65536)
 8945              		.loc 1 621 2 discriminator 2 view .LVU2567
 8946 00ea 092A     		cmp	r2, #9
 624:src/int.c     **** 	}
 8947              		.loc 1 624 8 discriminator 2 view .LVU2568
 8948 00ec 20F8023F 		strh	r3, [r0, #2]!	@ movhi
ARM GAS  /tmp/ccl34fCK.s 			page 226


 621:src/int.c     **** 		if (t[i] >= 65536)
 8949              		.loc 1 621 17 is_stmt 1 discriminator 2 view .LVU2569
 8950              	.LVL680:
 621:src/int.c     **** 		if (t[i] >= 65536)
 8951              		.loc 1 621 12 discriminator 2 view .LVU2570
 621:src/int.c     **** 		if (t[i] >= 65536)
 8952              		.loc 1 621 2 is_stmt 0 discriminator 2 view .LVU2571
 8953 00f0 EED1     		bne	.L518
 627:src/int.c     **** 	xv = packup(r+4);
 8954              		.loc 1 627 2 is_stmt 1 view .LVU2572
 8955              	.LVL681:
 8956              	.LBB1502:
 8957              	.LBI1502:
 570:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 8958              		.loc 1 570 31 view .LVU2573
 8959              	.LBB1503:
 571:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 8960              		.loc 1 571 2 view .LVU2574
 8961              	.LBE1503:
 8962              	.LBE1502:
 8963              	.LBB1505:
 8964              	.LBB1506:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 8965              		.loc 1 43 26 is_stmt 0 view .LVU2575
 8966 00f2 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
 8967 00f6 03F03F03 		and	r3, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8968              		.loc 1 44 26 view .LVU2576
 8969 00fa 5A1E     		subs	r2, r3, #1
 8970              	.LVL682:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 8971              		.loc 1 44 5 view .LVU2577
 8972 00fc 3E2A     		cmp	r2, #62
 8973              	.LBE1506:
 8974              	.LBE1505:
 8975              	.LBB1508:
 8976              	.LBB1504:
 573:src/int.c     **** 			x[0];
 8977              		.loc 1 573 38 view .LVU2578
 8978 00fe DDE906AB 		ldrd	r10, [sp, #24]
 8979              	.LVL683:
 573:src/int.c     **** 			x[0];
 8980              		.loc 1 573 38 view .LVU2579
 8981              	.LBE1504:
 8982              	.LBE1508:
 628:src/int.c     **** 
 8983              		.loc 1 628 2 is_stmt 1 view .LVU2580
 8984              	.LBB1509:
 8985              	.LBI1509:
 570:src/int.c     **** 	return (((unsigned long long int)x[3]) << 48) |
 8986              		.loc 1 570 31 view .LVU2581
 8987              	.LBB1510:
 571:src/int.c     **** 			(((unsigned long long int)x[2]) << 32) |
 8988              		.loc 1 571 2 view .LVU2582
 573:src/int.c     **** 			x[0];
 8989              		.loc 1 573 38 is_stmt 0 view .LVU2583
 8990 0102 DDE90845 		ldrd	r4, [sp, #32]
ARM GAS  /tmp/ccl34fCK.s 			page 227


 8991              	.LVL684:
 573:src/int.c     **** 			x[0];
 8992              		.loc 1 573 38 view .LVU2584
 8993              	.LBE1510:
 8994              	.LBE1509:
 630:src/int.c     **** 	if (i != 64)
 8995              		.loc 1 630 2 is_stmt 1 view .LVU2585
 8996              	.LBB1511:
 8997              	.LBI1505:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 8998              		.loc 1 42 14 view .LVU2586
 8999              	.LBB1507:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9000              		.loc 1 43 2 view .LVU2587
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9001              		.loc 1 44 2 view .LVU2588
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9002              		.loc 1 44 5 is_stmt 0 view .LVU2589
 9003 0106 24D8     		bhi	.L519
 9004              	.LVL685:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9005              		.loc 1 44 5 view .LVU2590
 9006              	.LBE1507:
 9007              	.LBE1511:
 631:src/int.c     **** 		xv = (xv << (64-i)) | (yv >> i);
 9008              		.loc 1 631 2 is_stmt 1 view .LVU2591
 632:src/int.c     **** 
 9009              		.loc 1 632 3 view .LVU2592
 632:src/int.c     **** 
 9010              		.loc 1 632 29 is_stmt 0 view .LVU2593
 9011 0108 C3F12002 		rsb	r2, r3, #32
 9012 010c 0BFA02F2 		lsl	r2, fp, r2
 9013 0110 2AFA03F6 		lsr	r6, r10, r3
 9014 0114 A3F1200E 		sub	lr, r3, #32
 632:src/int.c     **** 
 9015              		.loc 1 632 18 view .LVU2594
 9016 0118 C3F1400C 		rsb	ip, r3, #64
 632:src/int.c     **** 
 9017              		.loc 1 632 12 view .LVU2595
 9018 011c C3F12008 		rsb	r8, r3, #32
 9019              	.LVL686:
 632:src/int.c     **** 
 9020              		.loc 1 632 29 view .LVU2596
 9021 0120 1643     		orrs	r6, r6, r2
 9022 0122 2BFA0EFE 		lsr	lr, fp, lr
 632:src/int.c     **** 
 9023              		.loc 1 632 12 view .LVU2597
 9024 0126 05FA0CF2 		lsl	r2, r5, ip
 9025 012a 04FA08F8 		lsl	r8, r4, r8
 632:src/int.c     **** 
 9026              		.loc 1 632 29 view .LVU2598
 9027 012e 46EA0E06 		orr	r6, r6, lr
 632:src/int.c     **** 
 9028              		.loc 1 632 12 view .LVU2599
 9029 0132 A3F1200E 		sub	lr, r3, #32
 9030 0136 24FA0EFE 		lsr	lr, r4, lr
 9031 013a 42EA0802 		orr	r2, r2, r8
ARM GAS  /tmp/ccl34fCK.s 			page 228


 9032 013e 04FA0CFC 		lsl	ip, r4, ip
 9033 0142 42EA0E02 		orr	r2, r2, lr
 632:src/int.c     **** 
 9034              		.loc 1 632 29 view .LVU2600
 9035 0146 2BFA03F3 		lsr	r3, fp, r3
 9036              	.LVL687:
 632:src/int.c     **** 
 9037              		.loc 1 632 6 view .LVU2601
 9038 014a 4CEA0604 		orr	r4, ip, r6
 9039 014e 42EA0305 		orr	r5, r2, r3
 9040              	.LVL688:
 9041              	.L519:
 634:src/int.c     **** 
 9042              		.loc 1 634 2 is_stmt 1 view .LVU2602
 9043 0152 FFF7FEFF 		bl	setlastX
 9044              	.LVL689:
 636:src/int.c     **** 		if (mode == MODE_2COMP) {
 9045              		.loc 1 636 2 view .LVU2603
 636:src/int.c     **** 		if (mode == MODE_2COMP) {
 9046              		.loc 1 636 5 is_stmt 0 view .LVU2604
 9047 0156 009B     		ldr	r3, [sp]
 9048 0158 4B45     		cmp	r3, r9
 9049 015a 4FD0     		beq	.L542
 637:src/int.c     **** 			yv = mask_value(1 + ~yv);
 9050              		.loc 1 637 3 is_stmt 1 view .LVU2605
 637:src/int.c     **** 			yv = mask_value(1 + ~yv);
 9051              		.loc 1 637 6 is_stmt 0 view .LVU2606
 9052 015c 019B     		ldr	r3, [sp, #4]
 9053 015e 6BBB     		cbnz	r3, .L522
 638:src/int.c     **** 			xv = ~xv;
 9054              		.loc 1 638 4 is_stmt 1 view .LVU2607
 9055              	.LBB1512:
 9056              	.LBB1513:
 9057              	.LBB1514:
 9058              	.LBB1515:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9059              		.loc 1 43 26 is_stmt 0 view .LVU2608
 9060 0160 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9061              		.loc 1 43 15 view .LVU2609
 9062 0164 03F03F02 		and	r2, r3, #63
 9063              	.LBE1515:
 9064              	.LBE1514:
 9065              	.LBE1513:
 9066              	.LBE1512:
 638:src/int.c     **** 			xv = ~xv;
 9067              		.loc 1 638 9 view .LVU2610
 9068 0168 DAF10008 		rsbs	r8, r10, #0
 9069              	.LBB1522:
 9070              	.LBB1520:
 9071              	.LBB1518:
 9072              	.LBB1516:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9073              		.loc 1 44 26 view .LVU2611
 9074 016c 02F1FF36 		add	r6, r2, #-1
 9075              	.LBE1516:
 9076              	.LBE1518:
ARM GAS  /tmp/ccl34fCK.s 			page 229


 9077              	.LBE1520:
 9078              	.LBE1522:
 638:src/int.c     **** 			xv = ~xv;
 9079              		.loc 1 638 9 view .LVU2612
 9080 0170 6BEB4B09 		sbc	r9, fp, fp, lsl #1
 9081              	.LVL690:
 9082              	.LBB1523:
 9083              	.LBI1512:
  91:src/int.c     **** #ifndef TINY_BUILD
 9084              		.loc 1 91 15 is_stmt 1 view .LVU2613
 9085              	.LBB1521:
  93:src/int.c     **** 	long long int mask;
 9086              		.loc 1 93 2 view .LVU2614
 9087              	.LBB1519:
 9088              	.LBI1514:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 9089              		.loc 1 42 14 view .LVU2615
 9090              	.LBB1517:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9091              		.loc 1 43 2 view .LVU2616
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9092              		.loc 1 44 2 view .LVU2617
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9093              		.loc 1 44 5 is_stmt 0 view .LVU2618
 9094 0174 3E2E     		cmp	r6, #62
 9095 0176 00F28A80 		bhi	.L523
 9096              	.LVL691:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9097              		.loc 1 44 5 view .LVU2619
 9098              	.LBE1517:
 9099              	.LBE1519:
  94:src/int.c     **** 
 9100              		.loc 1 94 2 is_stmt 1 view .LVU2620
  96:src/int.c     **** 		return v;
 9101              		.loc 1 96 2 view .LVU2621
  98:src/int.c     **** 	return v & mask;
 9102              		.loc 1 98 2 view .LVU2622
  99:src/int.c     **** #else
 9103              		.loc 1 99 2 view .LVU2623
  98:src/int.c     **** 	return v & mask;
 9104              		.loc 1 98 14 is_stmt 0 view .LVU2624
 9105 017a 0121     		movs	r1, #1
 9106 017c A2F12003 		sub	r3, r2, #32
 9107 0180 C2F12000 		rsb	r0, r2, #32
 9108 0184 01FA03F3 		lsl	r3, r1, r3
 9109 0188 21FA00F0 		lsr	r0, r1, r0
 9110 018c 9140     		lsls	r1, r1, r2
  98:src/int.c     **** 	return v & mask;
 9111              		.loc 1 98 7 view .LVU2625
 9112 018e 11F1FF31 		adds	r1, r1, #-1
  98:src/int.c     **** 	return v & mask;
 9113              		.loc 1 98 14 view .LVU2626
 9114 0192 43EA0003 		orr	r3, r3, r0
  98:src/int.c     **** 	return v & mask;
 9115              		.loc 1 98 7 view .LVU2627
 9116 0196 43F1FF33 		adc	r3, r3, #-1
  99:src/int.c     **** #else
ARM GAS  /tmp/ccl34fCK.s 			page 230


 9117              		.loc 1 99 11 view .LVU2628
 9118 019a 03EA0903 		and	r3, r3, r9
 9119 019e 01EA0801 		and	r1, r1, r8
 9120 01a2 8846     		mov	r8, r1
 9121              	.LVL692:
  99:src/int.c     **** #else
 9122              		.loc 1 99 11 view .LVU2629
 9123 01a4 9946     		mov	r9, r3
 9124              	.LVL693:
  99:src/int.c     **** #else
 9125              		.loc 1 99 11 view .LVU2630
 9126              	.LBE1521:
 9127              	.LBE1523:
 639:src/int.c     **** 			if (yv == 0)
 9128              		.loc 1 639 4 is_stmt 1 view .LVU2631
 640:src/int.c     **** 				xv++;
 9129              		.loc 1 640 4 view .LVU2632
 640:src/int.c     **** 				xv++;
 9130              		.loc 1 640 7 is_stmt 0 view .LVU2633
 9131 01a6 58EA0903 		orrs	r3, r8, r9
 9132 01aa 73D1     		bne	.L540
 9133              	.LVL694:
 9134              	.L524:
 641:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9135              		.loc 1 641 5 is_stmt 1 view .LVU2634
 641:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9136              		.loc 1 641 7 is_stmt 0 view .LVU2635
 9137 01ac 6442     		rsbs	r4, r4, #0
 9138 01ae 65EB4505 		sbc	r5, r5, r5, lsl #1
 9139              	.LVL695:
 641:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9140              		.loc 1 641 7 view .LVU2636
 9141 01b2 4FF00008 		mov	r8, #0
 9142              	.LVL696:
 641:src/int.c     **** 		} else if (mode == MODE_1COMP) {
 9143              		.loc 1 641 7 view .LVU2637
 9144 01b6 4FF00009 		mov	r9, #0
 9145 01ba 26E0     		b	.L521
 9146              	.LVL697:
 9147              	.L522:
 642:src/int.c     **** 			yv = ~yv;
 9148              		.loc 1 642 10 is_stmt 1 view .LVU2638
 642:src/int.c     **** 			yv = ~yv;
 9149              		.loc 1 642 13 is_stmt 0 view .LVU2639
 9150 01bc 019B     		ldr	r3, [sp, #4]
 9151 01be 012B     		cmp	r3, #1
 9152 01c0 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
 9153 01c4 6BD0     		beq	.L543
 646:src/int.c     **** 	}
 9154              		.loc 1 646 4 is_stmt 1 view .LVU2640
 9155              	.LBB1524:
 9156              	.LBI1524:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 9157              		.loc 1 109 22 view .LVU2641
 9158              	.LBB1525:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 9159              		.loc 1 110 2 view .LVU2642
ARM GAS  /tmp/ccl34fCK.s 			page 231


 9160              	.LBB1526:
 9161              	.LBI1526:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 9162              		.loc 1 42 14 view .LVU2643
 9163              	.LBB1527:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9164              		.loc 1 43 2 view .LVU2644
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9165              		.loc 1 43 15 is_stmt 0 view .LVU2645
 9166 01c6 03F03F02 		and	r2, r3, #63
 9167              	.LVL698:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9168              		.loc 1 44 2 is_stmt 1 view .LVU2646
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9169              		.loc 1 44 26 is_stmt 0 view .LVU2647
 9170 01ca 561E     		subs	r6, r2, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9171              		.loc 1 44 5 view .LVU2648
 9172 01cc 3E2E     		cmp	r6, #62
 9173 01ce 73D8     		bhi	.L530
 9174 01d0 4FF0010C 		mov	ip, #1
 9175 01d4 A2F12103 		sub	r3, r2, #33
 9176 01d8 C6F1200E 		rsb	lr, r6, #32
 9177 01dc 0CFA03F3 		lsl	r3, ip, r3
 9178 01e0 2CFA0EFE 		lsr	lr, ip, lr
 9179 01e4 43EA0E03 		orr	r3, r3, lr
 9180 01e8 0CFA06FC 		lsl	ip, ip, r6
 9181              	.L527:
 9182              	.LVL699:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9183              		.loc 1 44 5 view .LVU2649
 9184              	.LBE1527:
 9185              	.LBE1526:
 111:src/int.c     **** 	return bit;
 9186              		.loc 1 111 2 is_stmt 1 view .LVU2650
 112:src/int.c     **** }
 9187              		.loc 1 112 2 view .LVU2651
 112:src/int.c     **** }
 9188              		.loc 1 112 2 is_stmt 0 view .LVU2652
 9189              	.LBE1525:
 9190              	.LBE1524:
 646:src/int.c     **** 	}
 9191              		.loc 1 646 7 view .LVU2653
 9192 01ec 44EA0C0C 		orr	ip, r4, ip
 9193 01f0 2B43     		orrs	r3, r3, r5
 9194 01f2 6446     		mov	r4, ip
 9195              	.LVL700:
 646:src/int.c     **** 	}
 9196              		.loc 1 646 7 view .LVU2654
 9197 01f4 1D46     		mov	r5, r3
 9198              	.LVL701:
 646:src/int.c     **** 	}
 9199              		.loc 1 646 7 view .LVU2655
 9200 01f6 D046     		mov	r8, r10
 9201 01f8 D946     		mov	r9, fp
 9202              	.LVL702:
 646:src/int.c     **** 	}
ARM GAS  /tmp/ccl34fCK.s 			page 232


 9203              		.loc 1 646 7 view .LVU2656
 9204 01fa 06E0     		b	.L521
 9205              	.LVL703:
 9206              	.L542:
 646:src/int.c     **** 	}
 9207              		.loc 1 646 7 view .LVU2657
 9208 01fc 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
 9209 0200 03F03F02 		and	r2, r3, #63
 9210 0204 D046     		mov	r8, r10
 9211 0206 D946     		mov	r9, fp
 9212              	.LVL704:
 646:src/int.c     **** 	}
 9213              		.loc 1 646 7 view .LVU2658
 9214 0208 561E     		subs	r6, r2, #1
 9215              	.L521:
 649:src/int.c     **** 	setX_int(mask_value(xv));
 9216              		.loc 1 649 2 is_stmt 1 view .LVU2659
 9217              	.LBB1531:
 9218              	.LBI1531:
  91:src/int.c     **** #ifndef TINY_BUILD
 9219              		.loc 1 91 15 view .LVU2660
 9220              	.LBB1532:
  93:src/int.c     **** 	long long int mask;
 9221              		.loc 1 93 2 view .LVU2661
 9222              	.LBB1533:
 9223              	.LBI1533:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 9224              		.loc 1 42 14 view .LVU2662
 9225              	.LBB1534:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9226              		.loc 1 43 2 view .LVU2663
 9227              	.LVL705:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9228              		.loc 1 44 2 view .LVU2664
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9229              		.loc 1 44 5 is_stmt 0 view .LVU2665
 9230 020a 3E2E     		cmp	r6, #62
 9231 020c 15D8     		bhi	.L528
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9232              		.loc 1 44 5 view .LVU2666
 9233 020e 0123     		movs	r3, #1
 9234 0210 A2F12001 		sub	r1, r2, #32
 9235 0214 C2F12000 		rsb	r0, r2, #32
 9236 0218 03FA01F1 		lsl	r1, r3, r1
 9237 021c 23FA00F0 		lsr	r0, r3, r0
 9238 0220 9340     		lsls	r3, r3, r2
 9239 0222 13F1FF33 		adds	r3, r3, #-1
 9240 0226 41EA0001 		orr	r1, r1, r0
 9241 022a 41F1FF31 		adc	r1, r1, #-1
 9242 022e 01EA0901 		and	r1, r1, r9
 9243 0232 03EA0803 		and	r3, r3, r8
 9244 0236 9846     		mov	r8, r3
 9245 0238 8946     		mov	r9, r1
 9246              	.LVL706:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9247              		.loc 1 44 5 view .LVU2667
 9248              	.LBE1534:
ARM GAS  /tmp/ccl34fCK.s 			page 233


 9249              	.LBE1533:
  94:src/int.c     **** 
 9250              		.loc 1 94 2 is_stmt 1 view .LVU2668
  96:src/int.c     **** 		return v;
 9251              		.loc 1 96 2 view .LVU2669
  98:src/int.c     **** 	return v & mask;
 9252              		.loc 1 98 2 view .LVU2670
  99:src/int.c     **** #else
 9253              		.loc 1 99 2 view .LVU2671
 9254              	.L528:
  99:src/int.c     **** #else
 9255              		.loc 1 99 2 is_stmt 0 view .LVU2672
 9256              	.LBE1532:
 9257              	.LBE1531:
 649:src/int.c     **** 	setX_int(mask_value(xv));
 9258              		.loc 1 649 2 view .LVU2673
 9259 023a 4B46     		mov	r3, r9
 9260 023c 6520     		movs	r0, #101
 9261 023e 4246     		mov	r2, r8
 9262 0240 FFF7FEFF 		bl	set_reg_n_int
 9263              	.LVL707:
 650:src/int.c     **** 	set_overflow(0);
 9264              		.loc 1 650 2 is_stmt 1 view .LVU2674
 9265              	.LBB1535:
 9266              	.LBB1536:
 9267              	.LBB1537:
 9268              	.LBB1538:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9269              		.loc 1 43 26 is_stmt 0 view .LVU2675
 9270 0244 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9271              		.loc 1 43 15 view .LVU2676
 9272 0248 03F03F06 		and	r6, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9273              		.loc 1 44 26 view .LVU2677
 9274 024c 731E     		subs	r3, r6, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9275              		.loc 1 44 5 view .LVU2678
 9276 024e 3E2B     		cmp	r3, #62
 9277              	.LBE1538:
 9278              	.LBE1537:
 9279              	.LBE1536:
 9280              	.LBE1535:
 650:src/int.c     **** 	set_overflow(0);
 9281              		.loc 1 650 2 view .LVU2679
 9282 0250 2046     		mov	r0, r4
 9283 0252 2946     		mov	r1, r5
 9284              	.LVL708:
 9285              	.LBB1542:
 9286              	.LBI1535:
  91:src/int.c     **** #ifndef TINY_BUILD
 9287              		.loc 1 91 15 is_stmt 1 view .LVU2680
 9288              	.LBB1541:
  93:src/int.c     **** 	long long int mask;
 9289              		.loc 1 93 2 view .LVU2681
 9290              	.LBB1540:
 9291              	.LBI1537:
ARM GAS  /tmp/ccl34fCK.s 			page 234


  42:src/int.c     **** 	unsigned int il = UState.int_len;
 9292              		.loc 1 42 14 view .LVU2682
 9293              	.LBB1539:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9294              		.loc 1 43 2 view .LVU2683
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9295              		.loc 1 44 2 view .LVU2684
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9296              		.loc 1 44 5 is_stmt 0 view .LVU2685
 9297 0254 12D8     		bhi	.L529
 9298              	.LVL709:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9299              		.loc 1 44 5 view .LVU2686
 9300              	.LBE1539:
 9301              	.LBE1540:
  94:src/int.c     **** 
 9302              		.loc 1 94 2 is_stmt 1 view .LVU2687
  96:src/int.c     **** 		return v;
 9303              		.loc 1 96 2 view .LVU2688
  98:src/int.c     **** 	return v & mask;
 9304              		.loc 1 98 2 view .LVU2689
  99:src/int.c     **** #else
 9305              		.loc 1 99 2 view .LVU2690
  98:src/int.c     **** 	return v & mask;
 9306              		.loc 1 98 14 is_stmt 0 view .LVU2691
 9307 0256 0123     		movs	r3, #1
 9308 0258 A6F12002 		sub	r2, r6, #32
 9309 025c C6F12001 		rsb	r1, r6, #32
 9310              	.LVL710:
  98:src/int.c     **** 	return v & mask;
 9311              		.loc 1 98 14 view .LVU2692
 9312 0260 23FA01F1 		lsr	r1, r3, r1
 9313 0264 03FA02F2 		lsl	r2, r3, r2
 9314 0268 B340     		lsls	r3, r3, r6
 9315 026a 0A43     		orrs	r2, r2, r1
  98:src/int.c     **** 	return v & mask;
 9316              		.loc 1 98 7 view .LVU2693
 9317 026c 13F1FF33 		adds	r3, r3, #-1
 9318 0270 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 9319              		.loc 1 99 11 view .LVU2694
 9320 0274 02EA0501 		and	r1, r2, r5
 9321 0278 03EA0400 		and	r0, r3, r4
 9322              	.LVL711:
 9323              	.L529:
  99:src/int.c     **** #else
 9324              		.loc 1 99 11 view .LVU2695
 9325              	.LBE1541:
 9326              	.LBE1542:
 650:src/int.c     **** 	set_overflow(0);
 9327              		.loc 1 650 2 view .LVU2696
 9328 027c FFF7FEFF 		bl	setX_int
 9329              	.LVL712:
 651:src/int.c     **** #endif
 9330              		.loc 1 651 2 is_stmt 1 view .LVU2697
 9331              	.LBB1543:
 9332              	.LBI1543:
ARM GAS  /tmp/ccl34fCK.s 			page 235


  66:src/int.c     **** #ifndef TINY_BUILD
 9333              		.loc 1 66 6 view .LVU2698
 9334              	.LBB1544:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 9335              		.loc 1 68 2 view .LVU2699
  71:src/int.c     **** #endif
 9336              		.loc 1 71 3 view .LVU2700
 9337 0280 5221     		movs	r1, #82
 9338 0282 6920     		movs	r0, #105
 9339 0284 FFF7FEFF 		bl	cmdflag
 9340              	.LVL713:
  71:src/int.c     **** #endif
 9341              		.loc 1 71 3 is_stmt 0 view .LVU2701
 9342              	.LBE1544:
 9343              	.LBE1543:
 653:src/int.c     **** 
 9344              		.loc 1 653 1 view .LVU2702
 9345 0288 13B0     		add	sp, sp, #76
 9346              		.cfi_remember_state
 9347              		.cfi_def_cfa_offset 36
 653:src/int.c     **** 
 9348              		.loc 1 653 1 view .LVU2703
 9349              		@ sp needed
 9350 028a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9351              	.LVL714:
 9352              	.L523:
 9353              		.cfi_restore_state
 639:src/int.c     **** 			if (yv == 0)
 9354              		.loc 1 639 4 is_stmt 1 view .LVU2704
 640:src/int.c     **** 				xv++;
 9355              		.loc 1 640 4 view .LVU2705
 640:src/int.c     **** 				xv++;
 9356              		.loc 1 640 7 is_stmt 0 view .LVU2706
 9357 028e 58EA0903 		orrs	r3, r8, r9
 9358 0292 8BD0     		beq	.L524
 9359              	.LVL715:
 9360              	.L540:
 639:src/int.c     **** 			if (yv == 0)
 9361              		.loc 1 639 7 view .LVU2707
 9362 0294 E243     		mvns	r2, r4
 9363 0296 EB43     		mvns	r3, r5
 9364 0298 1446     		mov	r4, r2
 9365 029a 1D46     		mov	r5, r3
 9366 029c CDE7     		b	.L528
 9367              	.LVL716:
 9368              	.L543:
 643:src/int.c     **** 			xv = ~xv;
 9369              		.loc 1 643 4 is_stmt 1 view .LVU2708
 644:src/int.c     **** 		} else
 9370              		.loc 1 644 4 view .LVU2709
 644:src/int.c     **** 		} else
 9371              		.loc 1 644 7 is_stmt 0 view .LVU2710
 9372 029e EE43     		mvns	r6, r5
 9373 02a0 6FEA040C 		mvn	ip, r4
 9374 02a4 03F03F02 		and	r2, r3, #63
 9375 02a8 3546     		mov	r5, r6
 643:src/int.c     **** 			xv = ~xv;
ARM GAS  /tmp/ccl34fCK.s 			page 236


 9376              		.loc 1 643 7 view .LVU2711
 9377 02aa 6FEA0A08 		mvn	r8, r10
 644:src/int.c     **** 		} else
 9378              		.loc 1 644 7 view .LVU2712
 9379 02ae 6446     		mov	r4, ip
 9380              	.LVL717:
 644:src/int.c     **** 		} else
 9381              		.loc 1 644 7 view .LVU2713
 9382 02b0 561E     		subs	r6, r2, #1
 643:src/int.c     **** 			xv = ~xv;
 9383              		.loc 1 643 7 view .LVU2714
 9384 02b2 6FEA0B09 		mvn	r9, fp
 9385              	.LVL718:
 643:src/int.c     **** 			xv = ~xv;
 9386              		.loc 1 643 7 view .LVU2715
 9387 02b6 A8E7     		b	.L521
 9388              	.LVL719:
 9389              	.L530:
 9390              	.LBB1545:
 9391              	.LBB1530:
 9392              	.LBB1529:
 9393              	.LBB1528:
 643:src/int.c     **** 			xv = ~xv;
 9394              		.loc 1 643 7 view .LVU2716
 9395 02b8 4FF0000C 		mov	ip, #0
 9396 02bc 4FF00043 		mov	r3, #-2147483648
 9397 02c0 94E7     		b	.L527
 9398              	.L545:
 9399 02c2 00BF     		.align	2
 9400              	.L544:
 9401 02c4 00000000 		.word	PersistentRam
 9402              	.LBE1528:
 9403              	.LBE1529:
 9404              	.LBE1530:
 9405              	.LBE1545:
 9406              		.cfi_endproc
 9407              	.LFE34:
 9409              		.section	.text.intDblDiv,"ax",%progbits
 9410              		.align	1
 9411              		.p2align 2,,3
 9412              		.global	intDblDiv
 9413              		.syntax unified
 9414              		.thumb
 9415              		.thumb_func
 9416              		.fpu fpv4-sp-d16
 9418              	intDblDiv:
 9419              	.LVL720:
 9420              	.LFB38:
 830:src/int.c     **** #ifndef TINY_BUILD
 9421              		.loc 1 830 76 is_stmt 1 view -0
 9422              		.cfi_startproc
 9423              		@ args = 8, pretend = 0, frame = 16
 9424              		@ frame_needed = 0, uses_anonymous_args = 0
 832:src/int.c     **** 	int sx, sy;
 9425              		.loc 1 832 2 view .LVU2718
 833:src/int.c     **** 
 9426              		.loc 1 833 2 view .LVU2719
ARM GAS  /tmp/ccl34fCK.s 			page 237


 835:src/int.c     **** 	set_overflow(0);
 9427              		.loc 1 835 2 view .LVU2720
 830:src/int.c     **** #ifndef TINY_BUILD
 9428              		.loc 1 830 76 is_stmt 0 view .LVU2721
 9429 0000 70B5     		push	{r4, r5, r6, lr}
 9430              		.cfi_def_cfa_offset 16
 9431              		.cfi_offset 4, -16
 9432              		.cfi_offset 5, -12
 9433              		.cfi_offset 6, -8
 9434              		.cfi_offset 14, -4
 9435 0002 8AB0     		sub	sp, sp, #40
 9436              		.cfi_def_cfa_offset 56
 830:src/int.c     **** #ifndef TINY_BUILD
 9437              		.loc 1 830 76 view .LVU2722
 9438 0004 DDE90E45 		ldrd	r4, [sp, #56]
 835:src/int.c     **** 	set_overflow(0);
 9439              		.loc 1 835 6 view .LVU2723
 9440 0008 08AE     		add	r6, sp, #32
 9441 000a CDE90045 		strd	r4, [sp]
 9442 000e 07AD     		add	r5, sp, #28
 9443 0010 06AC     		add	r4, sp, #24
 9444 0012 CDE90356 		strd	r5, r6, [sp, #12]
 9445 0016 0294     		str	r4, [sp, #8]
 9446 0018 FFF7FEFF 		bl	divmod
 9447              	.LVL721:
 835:src/int.c     **** 	set_overflow(0);
 9448              		.loc 1 835 6 view .LVU2724
 9449 001c 0546     		mov	r5, r0
 9450 001e 0C46     		mov	r4, r1
 9451              	.LBB1546:
 9452              	.LBB1547:
  71:src/int.c     **** #endif
 9453              		.loc 1 71 3 view .LVU2725
 9454 0020 6920     		movs	r0, #105
 9455 0022 5221     		movs	r1, #82
 9456              	.LVL722:
  71:src/int.c     **** #endif
 9457              		.loc 1 71 3 view .LVU2726
 9458              	.LBE1547:
 9459              	.LBE1546:
 836:src/int.c     **** 	set_carry(r != 0);
 9460              		.loc 1 836 2 is_stmt 1 view .LVU2727
 9461              	.LBB1549:
 9462              	.LBI1546:
  66:src/int.c     **** #ifndef TINY_BUILD
 9463              		.loc 1 66 6 view .LVU2728
 9464              	.LBB1548:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 9465              		.loc 1 68 2 view .LVU2729
  71:src/int.c     **** #endif
 9466              		.loc 1 71 3 view .LVU2730
 9467 0024 FFF7FEFF 		bl	cmdflag
 9468              	.LVL723:
  71:src/int.c     **** #endif
 9469              		.loc 1 71 3 is_stmt 0 view .LVU2731
 9470              	.LBE1548:
 9471              	.LBE1549:
ARM GAS  /tmp/ccl34fCK.s 			page 238


 837:src/int.c     **** 	return build_value(q, sx != sy);
 9472              		.loc 1 837 2 is_stmt 1 view .LVU2732
 9473              	.LBB1550:
 9474              	.LBI1550:
  53:src/int.c     **** #ifndef TINY_BUILD
 9475              		.loc 1 53 6 view .LVU2733
 9476              	.LBB1551:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 9477              		.loc 1 55 2 view .LVU2734
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 9478              		.loc 1 55 5 is_stmt 0 view .LVU2735
 9479 0028 DDE90823 		ldrd	r2, [sp, #32]
 9480 002c 1343     		orrs	r3, r2, r3
 9481 002e 0CD0     		beq	.L547
 9482 0030 FFF7FEFF 		bl	set_carry.part.0
 9483              	.LVL724:
 9484              	.L548:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 9485              		.loc 1 55 5 view .LVU2736
 9486              	.LBE1551:
 9487              	.LBE1550:
 838:src/int.c     **** #else
 9488              		.loc 1 838 2 is_stmt 1 view .LVU2737
 838:src/int.c     **** #else
 9489              		.loc 1 838 9 is_stmt 0 view .LVU2738
 9490 0034 DDE90623 		ldrd	r2, r3, [sp, #24]
 9491 0038 D21A     		subs	r2, r2, r3
 9492 003a 2846     		mov	r0, r5
 9493 003c 2146     		mov	r1, r4
 9494 003e 18BF     		it	ne
 9495 0040 0122     		movne	r2, #1
 9496 0042 FFF7FEFF 		bl	build_value
 9497              	.LVL725:
 842:src/int.c     **** 
 9498              		.loc 1 842 1 view .LVU2739
 9499 0046 0AB0     		add	sp, sp, #40
 9500              		.cfi_remember_state
 9501              		.cfi_def_cfa_offset 16
 9502              		@ sp needed
 9503 0048 70BD     		pop	{r4, r5, r6, pc}
 9504              	.LVL726:
 9505              	.L547:
 9506              		.cfi_restore_state
 9507              	.LBB1553:
 9508              	.LBB1552:
  58:src/int.c     **** #endif
 9509              		.loc 1 58 3 is_stmt 1 view .LVU2740
 9510 004a 5221     		movs	r1, #82
 9511 004c 6A20     		movs	r0, #106
 9512 004e FFF7FEFF 		bl	cmdflag
 9513              	.LVL727:
  58:src/int.c     **** #endif
 9514              		.loc 1 58 3 is_stmt 0 view .LVU2741
 9515 0052 EFE7     		b	.L548
 9516              	.LBE1552:
 9517              	.LBE1553:
 9518              		.cfi_endproc
ARM GAS  /tmp/ccl34fCK.s 			page 239


 9519              	.LFE38:
 9521              		.section	.text.intDblRmdr,"ax",%progbits
 9522              		.align	1
 9523              		.p2align 2,,3
 9524              		.global	intDblRmdr
 9525              		.syntax unified
 9526              		.thumb
 9527              		.thumb_func
 9528              		.fpu fpv4-sp-d16
 9530              	intDblRmdr:
 9531              	.LVL728:
 9532              	.LFB39:
 844:src/int.c     **** #ifndef TINY_BUILD
 9533              		.loc 1 844 77 is_stmt 1 view -0
 9534              		.cfi_startproc
 9535              		@ args = 8, pretend = 0, frame = 16
 9536              		@ frame_needed = 0, uses_anonymous_args = 0
 846:src/int.c     **** 	int sx, sy;
 9537              		.loc 1 846 2 view .LVU2743
 847:src/int.c     **** 
 9538              		.loc 1 847 2 view .LVU2744
 849:src/int.c     **** 	return build_value(r, sy);
 9539              		.loc 1 849 2 view .LVU2745
 844:src/int.c     **** #ifndef TINY_BUILD
 9540              		.loc 1 844 77 is_stmt 0 view .LVU2746
 9541 0000 70B5     		push	{r4, r5, r6, lr}
 9542              		.cfi_def_cfa_offset 16
 9543              		.cfi_offset 4, -16
 9544              		.cfi_offset 5, -12
 9545              		.cfi_offset 6, -8
 9546              		.cfi_offset 14, -4
 9547 0002 8AB0     		sub	sp, sp, #40
 9548              		.cfi_def_cfa_offset 56
 844:src/int.c     **** #ifndef TINY_BUILD
 9549              		.loc 1 844 77 view .LVU2747
 9550 0004 DDE90E45 		ldrd	r4, [sp, #56]
 849:src/int.c     **** 	return build_value(r, sy);
 9551              		.loc 1 849 2 view .LVU2748
 9552 0008 08AE     		add	r6, sp, #32
 9553 000a CDE90045 		strd	r4, [sp]
 9554 000e 07AD     		add	r5, sp, #28
 9555 0010 06AC     		add	r4, sp, #24
 9556 0012 CDE90356 		strd	r5, r6, [sp, #12]
 9557 0016 0294     		str	r4, [sp, #8]
 9558 0018 FFF7FEFF 		bl	divmod
 9559              	.LVL729:
 850:src/int.c     **** #else
 9560              		.loc 1 850 2 is_stmt 1 view .LVU2749
 850:src/int.c     **** #else
 9561              		.loc 1 850 9 is_stmt 0 view .LVU2750
 9562 001c DDE90801 		ldrd	r0, [sp, #32]
 9563 0020 079A     		ldr	r2, [sp, #28]
 9564 0022 FFF7FEFF 		bl	build_value
 9565              	.LVL730:
 854:src/int.c     **** 
 9566              		.loc 1 854 1 view .LVU2751
 9567 0026 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/ccl34fCK.s 			page 240


 9568              		.cfi_def_cfa_offset 16
 9569              		@ sp needed
 9570 0028 70BD     		pop	{r4, r5, r6, pc}
 854:src/int.c     **** 
 9571              		.loc 1 854 1 view .LVU2752
 9572              		.cfi_endproc
 9573              	.LFE39:
 9575 002a 00BF     		.section	.text.intNot,"ax",%progbits
 9576              		.align	1
 9577              		.p2align 2,,3
 9578              		.global	intNot
 9579              		.syntax unified
 9580              		.thumb
 9581              		.thumb_func
 9582              		.fpu fpv4-sp-d16
 9584              	intNot:
 9585              	.LVL731:
 9586              	.LFB40:
 857:src/int.c     **** 	return mask_value(~x);
 9587              		.loc 1 857 39 is_stmt 1 view -0
 9588              		.cfi_startproc
 9589              		@ args = 0, pretend = 0, frame = 0
 9590              		@ frame_needed = 0, uses_anonymous_args = 0
 9591              		@ link register save eliminated.
 858:src/int.c     **** }
 9592              		.loc 1 858 2 view .LVU2754
 9593              	.LBB1554:
 9594              	.LBB1555:
 9595              	.LBB1556:
 9596              	.LBB1557:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9597              		.loc 1 43 26 is_stmt 0 view .LVU2755
 9598 0000 104B     		ldr	r3, .L558
 9599 0002 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9600              		.loc 1 43 15 view .LVU2756
 9601 0006 03F03F02 		and	r2, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9602              		.loc 1 44 26 view .LVU2757
 9603 000a 531E     		subs	r3, r2, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9604              		.loc 1 44 5 view .LVU2758
 9605 000c 3E2B     		cmp	r3, #62
 9606              	.LBE1557:
 9607              	.LBE1556:
 9608              	.LBE1555:
 9609              	.LBE1554:
 858:src/int.c     **** }
 9610              		.loc 1 858 9 view .LVU2759
 9611 000e 6FEA0000 		mvn	r0, r0
 9612              	.LVL732:
 858:src/int.c     **** }
 9613              		.loc 1 858 9 view .LVU2760
 9614 0012 6FEA0101 		mvn	r1, r1
 9615              	.LVL733:
 9616              	.LBB1562:
 9617              	.LBI1554:
ARM GAS  /tmp/ccl34fCK.s 			page 241


  91:src/int.c     **** #ifndef TINY_BUILD
 9618              		.loc 1 91 15 is_stmt 1 view .LVU2761
 9619              	.LBB1560:
  93:src/int.c     **** 	long long int mask;
 9620              		.loc 1 93 2 view .LVU2762
 9621              	.LBB1559:
 9622              	.LBI1556:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 9623              		.loc 1 42 14 view .LVU2763
 9624              	.LBB1558:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9625              		.loc 1 43 2 view .LVU2764
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9626              		.loc 1 44 2 view .LVU2765
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9627              		.loc 1 44 5 is_stmt 0 view .LVU2766
 9628 0016 13D8     		bhi	.L555
 9629              	.LVL734:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9630              		.loc 1 44 5 view .LVU2767
 9631              	.LBE1558:
 9632              	.LBE1559:
  94:src/int.c     **** 
 9633              		.loc 1 94 2 is_stmt 1 view .LVU2768
  96:src/int.c     **** 		return v;
 9634              		.loc 1 96 2 view .LVU2769
  98:src/int.c     **** 	return v & mask;
 9635              		.loc 1 98 2 view .LVU2770
  99:src/int.c     **** #else
 9636              		.loc 1 99 2 view .LVU2771
 9637              	.LBE1560:
 9638              	.LBE1562:
 857:src/int.c     **** 	return mask_value(~x);
 9639              		.loc 1 857 39 is_stmt 0 view .LVU2772
 9640 0018 30B4     		push	{r4, r5}
 9641              		.cfi_def_cfa_offset 8
 9642              		.cfi_offset 4, -8
 9643              		.cfi_offset 5, -4
 9644              	.LBB1563:
 9645              	.LBB1561:
  98:src/int.c     **** 	return v & mask;
 9646              		.loc 1 98 14 view .LVU2773
 9647 001a 0123     		movs	r3, #1
 9648 001c A2F12004 		sub	r4, r2, #32
 9649 0020 C2F12005 		rsb	r5, r2, #32
 9650 0024 23FA05F5 		lsr	r5, r3, r5
 9651 0028 03FA04F4 		lsl	r4, r3, r4
 9652 002c 9340     		lsls	r3, r3, r2
 9653 002e 2C43     		orrs	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 9654              		.loc 1 98 7 view .LVU2774
 9655 0030 13F1FF33 		adds	r3, r3, #-1
 9656 0034 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 9657              		.loc 1 99 11 view .LVU2775
 9658 0038 2140     		ands	r1, r1, r4
 9659              	.LVL735:
ARM GAS  /tmp/ccl34fCK.s 			page 242


  99:src/int.c     **** #else
 9660              		.loc 1 99 11 view .LVU2776
 9661 003a 1840     		ands	r0, r0, r3
 9662              	.LBE1561:
 9663              	.LBE1563:
 859:src/int.c     **** 
 9664              		.loc 1 859 1 view .LVU2777
 9665 003c 30BC     		pop	{r4, r5}
 9666              		.cfi_restore 5
 9667              		.cfi_restore 4
 9668              		.cfi_def_cfa_offset 0
 9669 003e 7047     		bx	lr
 9670              	.LVL736:
 9671              	.L555:
 859:src/int.c     **** 
 9672              		.loc 1 859 1 view .LVU2778
 9673 0040 7047     		bx	lr
 9674              	.L559:
 9675 0042 00BF     		.align	2
 9676              	.L558:
 9677 0044 00000000 		.word	PersistentRam
 9678              		.cfi_endproc
 9679              	.LFE40:
 9681              		.section	.text.intBooleanOp,"ax",%progbits
 9682              		.align	1
 9683              		.p2align 2,,3
 9684              		.global	intBooleanOp
 9685              		.syntax unified
 9686              		.thumb
 9687              		.thumb_func
 9688              		.fpu fpv4-sp-d16
 9690              	intBooleanOp:
 9691              	.LVL737:
 9692              	.LFB41:
 861:src/int.c     **** 	long long result;
 9693              		.loc 1 861 62 is_stmt 1 view -0
 9694              		.cfi_startproc
 9695              		@ args = 0, pretend = 0, frame = 0
 9696              		@ frame_needed = 0, uses_anonymous_args = 0
 9697              		@ link register save eliminated.
 862:src/int.c     **** 	const int op = XeqOpCode - (OP_DYA | OP_LAND);
 9698              		.loc 1 862 2 view .LVU2780
 863:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 9699              		.loc 1 863 2 view .LVU2781
 861:src/int.c     **** 	long long result;
 9700              		.loc 1 861 62 is_stmt 0 view .LVU2782
 9701 0000 30B4     		push	{r4, r5}
 9702              		.cfi_def_cfa_offset 8
 9703              		.cfi_offset 4, -8
 9704              		.cfi_offset 5, -4
 863:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 9705              		.loc 1 863 27 view .LVU2783
 9706 0002 1C4C     		ldr	r4, .L575
 9707 0004 2588     		ldrh	r5, [r4]
 863:src/int.c     **** 	const int not = op >= 3 ? 3 : 0;
 9708              		.loc 1 863 12 view .LVU2784
 9709 0006 A5F54774 		sub	r4, r5, #796
ARM GAS  /tmp/ccl34fCK.s 			page 243


 9710              	.LVL738:
 864:src/int.c     **** 
 9711              		.loc 1 864 2 is_stmt 1 view .LVU2785
 864:src/int.c     **** 
 9712              		.loc 1 864 30 is_stmt 0 view .LVU2786
 9713 000a 022C     		cmp	r4, #2
 9714 000c CABF     		itet	gt
 9715 000e A5F21F34 		subwgt	r4, r5, #799
 9716              	.LVL739:
 864:src/int.c     **** 
 9717              		.loc 1 864 30 view .LVU2787
 9718 0012 0025     		movle	r5, #0
 9719              	.LVL740:
 864:src/int.c     **** 
 9720              		.loc 1 864 30 view .LVU2788
 9721 0014 0325     		movgt	r5, #3
 9722              	.LVL741:
 866:src/int.c     **** 	case 0:  result = y & x; break;
 9723              		.loc 1 866 2 is_stmt 1 view .LVU2789
 9724 0016 1CB3     		cbz	r4, .L562
 9725 0018 012C     		cmp	r4, #1
 9726 001a 26D0     		beq	.L563
 869:src/int.c     **** 	}
 9727              		.loc 1 869 11 view .LVU2790
 869:src/int.c     **** 	}
 9728              		.loc 1 869 18 is_stmt 0 view .LVU2791
 9729 001c 5040     		eors	r0, r0, r2
 9730              	.LVL742:
 869:src/int.c     **** 	}
 9731              		.loc 1 869 18 view .LVU2792
 9732 001e 5940     		eors	r1, r1, r3
 9733              	.LVL743:
 869:src/int.c     **** 	}
 9734              		.loc 1 869 27 is_stmt 1 view .LVU2793
 871:src/int.c     **** 		result = ~result;
 9735              		.loc 1 871 2 view .LVU2794
 871:src/int.c     **** 		result = ~result;
 9736              		.loc 1 871 5 is_stmt 0 view .LVU2795
 9737 0020 DDB9     		cbnz	r5, .L574
 9738              	.LVL744:
 9739              	.L566:
 873:src/int.c     **** }
 9740              		.loc 1 873 2 is_stmt 1 view .LVU2796
 9741              	.LBB1564:
 9742              	.LBI1564:
  91:src/int.c     **** #ifndef TINY_BUILD
 9743              		.loc 1 91 15 view .LVU2797
 9744              	.LBB1565:
  93:src/int.c     **** 	long long int mask;
 9745              		.loc 1 93 2 view .LVU2798
 9746              	.LBB1566:
 9747              	.LBI1566:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 9748              		.loc 1 42 14 view .LVU2799
 9749              	.LBB1567:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9750              		.loc 1 43 2 view .LVU2800
ARM GAS  /tmp/ccl34fCK.s 			page 244


  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9751              		.loc 1 43 26 is_stmt 0 view .LVU2801
 9752 0022 154B     		ldr	r3, .L575+4
 9753 0024 93F8E937 		ldrb	r3, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 9754              		.loc 1 43 15 view .LVU2802
 9755 0028 03F03F04 		and	r4, r3, #63
 9756              	.LVL745:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9757              		.loc 1 44 2 is_stmt 1 view .LVU2803
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9758              		.loc 1 44 26 is_stmt 0 view .LVU2804
 9759 002c 631E     		subs	r3, r4, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9760              		.loc 1 44 5 view .LVU2805
 9761 002e 3E2B     		cmp	r3, #62
 9762 0030 11D8     		bhi	.L560
 9763              	.LVL746:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 9764              		.loc 1 44 5 view .LVU2806
 9765              	.LBE1567:
 9766              	.LBE1566:
  94:src/int.c     **** 
 9767              		.loc 1 94 2 is_stmt 1 view .LVU2807
  96:src/int.c     **** 		return v;
 9768              		.loc 1 96 2 view .LVU2808
  98:src/int.c     **** 	return v & mask;
 9769              		.loc 1 98 2 view .LVU2809
  99:src/int.c     **** #else
 9770              		.loc 1 99 2 view .LVU2810
  98:src/int.c     **** 	return v & mask;
 9771              		.loc 1 98 14 is_stmt 0 view .LVU2811
 9772 0032 0123     		movs	r3, #1
 9773 0034 A4F12005 		sub	r5, r4, #32
 9774              	.LVL747:
  98:src/int.c     **** 	return v & mask;
 9775              		.loc 1 98 14 view .LVU2812
 9776 0038 C4F12002 		rsb	r2, r4, #32
 9777              	.LVL748:
  98:src/int.c     **** 	return v & mask;
 9778              		.loc 1 98 14 view .LVU2813
 9779 003c 03FA05F5 		lsl	r5, r3, r5
 9780 0040 23FA02F2 		lsr	r2, r3, r2
 9781 0044 A340     		lsls	r3, r3, r4
  98:src/int.c     **** 	return v & mask;
 9782              		.loc 1 98 7 view .LVU2814
 9783 0046 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 9784              		.loc 1 98 14 view .LVU2815
 9785 004a 45EA0205 		orr	r5, r5, r2
  98:src/int.c     **** 	return v & mask;
 9786              		.loc 1 98 7 view .LVU2816
 9787 004e 45F1FF35 		adc	r5, r5, #-1
  99:src/int.c     **** #else
 9788              		.loc 1 99 11 view .LVU2817
 9789 0052 2940     		ands	r1, r1, r5
 9790              	.LVL749:
ARM GAS  /tmp/ccl34fCK.s 			page 245


  99:src/int.c     **** #else
 9791              		.loc 1 99 11 view .LVU2818
 9792 0054 1840     		ands	r0, r0, r3
 9793              	.L560:
  99:src/int.c     **** #else
 9794              		.loc 1 99 11 view .LVU2819
 9795              	.LBE1565:
 9796              	.LBE1564:
 874:src/int.c     **** 
 9797              		.loc 1 874 1 view .LVU2820
 9798 0056 30BC     		pop	{r4, r5}
 9799              		.cfi_remember_state
 9800              		.cfi_restore 5
 9801              		.cfi_restore 4
 9802              		.cfi_def_cfa_offset 0
 9803 0058 7047     		bx	lr
 9804              	.LVL750:
 9805              	.L574:
 9806              		.cfi_restore_state
 872:src/int.c     **** 	return mask_value(result);
 9807              		.loc 1 872 3 is_stmt 1 view .LVU2821
 872:src/int.c     **** 	return mask_value(result);
 9808              		.loc 1 872 10 is_stmt 0 view .LVU2822
 9809 005a C043     		mvns	r0, r0
 9810 005c C943     		mvns	r1, r1
 9811              	.LVL751:
 872:src/int.c     **** 	return mask_value(result);
 9812              		.loc 1 872 10 view .LVU2823
 9813 005e E0E7     		b	.L566
 9814              	.LVL752:
 9815              	.L562:
 867:src/int.c     **** 	case 1:  result = y | x; break;
 9816              		.loc 1 867 11 is_stmt 1 view .LVU2824
 867:src/int.c     **** 	case 1:  result = y | x; break;
 9817              		.loc 1 867 18 is_stmt 0 view .LVU2825
 9818 0060 1040     		ands	r0, r0, r2
 9819              	.LVL753:
 867:src/int.c     **** 	case 1:  result = y | x; break;
 9820              		.loc 1 867 18 view .LVU2826
 9821 0062 1940     		ands	r1, r1, r3
 9822              	.LVL754:
 867:src/int.c     **** 	case 1:  result = y | x; break;
 9823              		.loc 1 867 27 is_stmt 1 view .LVU2827
 871:src/int.c     **** 		result = ~result;
 9824              		.loc 1 871 2 view .LVU2828
 871:src/int.c     **** 		result = ~result;
 9825              		.loc 1 871 5 is_stmt 0 view .LVU2829
 9826 0064 002D     		cmp	r5, #0
 9827 0066 DCD0     		beq	.L566
 9828 0068 F7E7     		b	.L574
 9829              	.LVL755:
 9830              	.L563:
 868:src/int.c     **** 	default: result = y ^ x; break;
 9831              		.loc 1 868 11 is_stmt 1 view .LVU2830
 868:src/int.c     **** 	default: result = y ^ x; break;
 9832              		.loc 1 868 18 is_stmt 0 view .LVU2831
 9833 006a 1043     		orrs	r0, r0, r2
ARM GAS  /tmp/ccl34fCK.s 			page 246


 9834              	.LVL756:
 868:src/int.c     **** 	default: result = y ^ x; break;
 9835              		.loc 1 868 18 view .LVU2832
 9836 006c 1943     		orrs	r1, r1, r3
 9837              	.LVL757:
 868:src/int.c     **** 	default: result = y ^ x; break;
 9838              		.loc 1 868 27 is_stmt 1 view .LVU2833
 871:src/int.c     **** 		result = ~result;
 9839              		.loc 1 871 2 view .LVU2834
 871:src/int.c     **** 		result = ~result;
 9840              		.loc 1 871 5 is_stmt 0 view .LVU2835
 9841 006e 002D     		cmp	r5, #0
 9842 0070 D7D0     		beq	.L566
 9843 0072 F2E7     		b	.L574
 9844              	.L576:
 9845              		.align	2
 9846              	.L575:
 9847 0074 00000000 		.word	XeqOpCode
 9848 0078 00000000 		.word	PersistentRam
 9849              		.cfi_endproc
 9850              	.LFE41:
 9852              		.section	.text.intFP,"ax",%progbits
 9853              		.align	1
 9854              		.p2align 2,,3
 9855              		.global	intFP
 9856              		.syntax unified
 9857              		.thumb
 9858              		.thumb_func
 9859              		.fpu fpv4-sp-d16
 9861              	intFP:
 9862              	.LVL758:
 9863              	.LFB42:
 878:src/int.c     **** 	return 0;
 9864              		.loc 1 878 38 is_stmt 1 view -0
 9865              		.cfi_startproc
 9866              		@ args = 0, pretend = 0, frame = 0
 9867              		@ frame_needed = 0, uses_anonymous_args = 0
 9868              		@ link register save eliminated.
 879:src/int.c     **** }
 9869              		.loc 1 879 2 view .LVU2837
 880:src/int.c     **** 
 9870              		.loc 1 880 1 is_stmt 0 view .LVU2838
 9871 0000 0020     		movs	r0, #0
 9872              	.LVL759:
 880:src/int.c     **** 
 9873              		.loc 1 880 1 view .LVU2839
 9874 0002 0021     		movs	r1, #0
 9875 0004 7047     		bx	lr
 9876              		.cfi_endproc
 9877              	.LFE42:
 9879 0006 00BF     		.section	.text.intSign,"ax",%progbits
 9880              		.align	1
 9881              		.p2align 2,,3
 9882              		.global	intSign
 9883              		.syntax unified
 9884              		.thumb
 9885              		.thumb_func
ARM GAS  /tmp/ccl34fCK.s 			page 247


 9886              		.fpu fpv4-sp-d16
 9888              	intSign:
 9889              	.LVL760:
 9890              	.LFB43:
 883:src/int.c     **** 	int sgn;
 9891              		.loc 1 883 40 is_stmt 1 view -0
 9892              		.cfi_startproc
 9893              		@ args = 0, pretend = 0, frame = 8
 9894              		@ frame_needed = 0, uses_anonymous_args = 0
 884:src/int.c     **** 	unsigned long long int v = extract_value(x, &sgn);
 9895              		.loc 1 884 2 view .LVU2841
 885:src/int.c     **** 
 9896              		.loc 1 885 2 view .LVU2842
 883:src/int.c     **** 	int sgn;
 9897              		.loc 1 883 40 is_stmt 0 view .LVU2843
 9898 0000 30B5     		push	{r4, r5, lr}
 9899              		.cfi_def_cfa_offset 12
 9900              		.cfi_offset 4, -12
 9901              		.cfi_offset 5, -8
 9902              		.cfi_offset 14, -4
 9903 0002 83B0     		sub	sp, sp, #12
 9904              		.cfi_def_cfa_offset 24
 885:src/int.c     **** 
 9905              		.loc 1 885 29 view .LVU2844
 9906 0004 01AA     		add	r2, sp, #4
 9907 0006 FFF7FEFF 		bl	extract_value
 9908              	.LVL761:
 885:src/int.c     **** 
 9909              		.loc 1 885 29 view .LVU2845
 9910 000a 0446     		mov	r4, r0
 9911 000c 0D46     		mov	r5, r1
 9912              	.LVL762:
 887:src/int.c     **** 		sgn = 0;
 9913              		.loc 1 887 2 is_stmt 1 view .LVU2846
 887:src/int.c     **** 		sgn = 0;
 9914              		.loc 1 887 5 is_stmt 0 view .LVU2847
 9915 000e 54EA0503 		orrs	r3, r4, r5
 9916 0012 08D0     		beq	.L579
 890:src/int.c     **** 	return build_value(v, sgn);
 9917              		.loc 1 890 5 view .LVU2848
 9918 0014 0124     		movs	r4, #1
 9919              	.LVL763:
 890:src/int.c     **** 	return build_value(v, sgn);
 9920              		.loc 1 890 5 view .LVU2849
 9921 0016 0025     		movs	r5, #0
 9922              	.LVL764:
 891:src/int.c     **** }
 9923              		.loc 1 891 2 is_stmt 1 view .LVU2850
 9924 0018 019A     		ldr	r2, [sp, #4]
 891:src/int.c     **** }
 9925              		.loc 1 891 9 is_stmt 0 view .LVU2851
 9926 001a 2046     		mov	r0, r4
 9927 001c 2946     		mov	r1, r5
 9928 001e FFF7FEFF 		bl	build_value
 9929              	.LVL765:
 892:src/int.c     **** 
 9930              		.loc 1 892 1 view .LVU2852
ARM GAS  /tmp/ccl34fCK.s 			page 248


 9931 0022 03B0     		add	sp, sp, #12
 9932              		.cfi_remember_state
 9933              		.cfi_def_cfa_offset 12
 9934              		@ sp needed
 9935 0024 30BD     		pop	{r4, r5, pc}
 9936              	.LVL766:
 9937              	.L579:
 9938              		.cfi_restore_state
 888:src/int.c     **** 	else
 9939              		.loc 1 888 3 is_stmt 1 view .LVU2853
 888:src/int.c     **** 	else
 9940              		.loc 1 888 7 is_stmt 0 view .LVU2854
 9941 0026 0022     		movs	r2, #0
 891:src/int.c     **** }
 9942              		.loc 1 891 9 view .LVU2855
 9943 0028 2046     		mov	r0, r4
 9944 002a 2946     		mov	r1, r5
 888:src/int.c     **** 	else
 9945              		.loc 1 888 7 view .LVU2856
 9946 002c 0192     		str	r2, [sp, #4]
 891:src/int.c     **** }
 9947              		.loc 1 891 2 is_stmt 1 view .LVU2857
 891:src/int.c     **** }
 9948              		.loc 1 891 9 is_stmt 0 view .LVU2858
 9949 002e FFF7FEFF 		bl	build_value
 9950              	.LVL767:
 892:src/int.c     **** 
 9951              		.loc 1 892 1 view .LVU2859
 9952 0032 03B0     		add	sp, sp, #12
 9953              		.cfi_def_cfa_offset 12
 9954              		@ sp needed
 9955 0034 30BD     		pop	{r4, r5, pc}
 892:src/int.c     **** 
 9956              		.loc 1 892 1 view .LVU2860
 9957              		.cfi_endproc
 9958              	.LFE43:
 9960 0036 00BF     		.section	.text.introt,"ax",%progbits
 9961              		.align	1
 9962              		.p2align 2,,3
 9963              		.global	introt
 9964              		.syntax unified
 9965              		.thumb
 9966              		.thumb_func
 9967              		.fpu fpv4-sp-d16
 9969              	introt:
 9970              	.LVL768:
 9971              	.LFB51:
 962:src/int.c     **** #ifndef TINY_BUILD
 9972              		.loc 1 962 45 is_stmt 1 view -0
 9973              		.cfi_startproc
 9974              		@ args = 0, pretend = 0, frame = 8
 9975              		@ frame_needed = 0, uses_anonymous_args = 0
 964:src/int.c     **** 	unsigned int mod;
 9976              		.loc 1 964 2 view .LVU2862
 965:src/int.c     **** 	unsigned int ws;
 9977              		.loc 1 965 2 view .LVU2863
 966:src/int.c     **** 	long long int x;
ARM GAS  /tmp/ccl34fCK.s 			page 249


 9978              		.loc 1 966 2 view .LVU2864
 967:src/int.c     **** 	unsigned int i;
 9979              		.loc 1 967 2 view .LVU2865
 968:src/int.c     **** 	
 9980              		.loc 1 968 2 view .LVU2866
 970:src/int.c     **** 		return;
 9981              		.loc 1 970 2 view .LVU2867
 9982              	.LBB1578:
 9983              	.LBI1578:
  23:src/int.c     **** 	if (! is_intmode())
 9984              		.loc 1 23 12 view .LVU2868
 9985              	.LBB1579:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 9986              		.loc 1 24 2 view .LVU2869
 9987              	.LBE1579:
 9988              	.LBE1578:
 962:src/int.c     **** #ifndef TINY_BUILD
 9989              		.loc 1 962 45 is_stmt 0 view .LVU2870
 9990 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 9991              		.cfi_def_cfa_offset 24
 9992              		.cfi_offset 4, -24
 9993              		.cfi_offset 5, -20
 9994              		.cfi_offset 6, -16
 9995              		.cfi_offset 7, -12
 9996              		.cfi_offset 8, -8
 9997              		.cfi_offset 14, -4
 9998              	.LBB1585:
 9999              	.LBB1582:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10000              		.loc 1 24 6 view .LVU2871
 10001 0004 3A4F     		ldr	r7, .L613
 10002 0006 97F8E827 		ldrb	r2, [r7, #2024]	@ zero_extendqisi2
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10003              		.loc 1 24 5 view .LVU2872
 10004 000a D307     		lsls	r3, r2, #31
 10005              	.LBE1582:
 10006              	.LBE1585:
 962:src/int.c     **** #ifndef TINY_BUILD
 10007              		.loc 1 962 45 view .LVU2873
 10008 000c 82B0     		sub	sp, sp, #8
 10009              		.cfi_def_cfa_offset 32
 962:src/int.c     **** #ifndef TINY_BUILD
 10010              		.loc 1 962 45 view .LVU2874
 10011 000e 0646     		mov	r6, r0
 10012 0010 0C46     		mov	r4, r1
 10013              	.LBB1586:
 10014              	.LBB1583:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10015              		.loc 1 24 5 view .LVU2875
 10016 0012 43D5     		bpl	.L583
 10017              	.LVL769:
 10018              	.L587:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 10019              		.loc 1 24 5 view .LVU2876
 10020              	.LBE1583:
 10021              	.LBE1586:
 973:src/int.c     **** 	x = getX_int();
ARM GAS  /tmp/ccl34fCK.s 			page 250


 10022              		.loc 1 973 2 is_stmt 1 view .LVU2877
 10023              	.LBB1587:
 10024              	.LBI1587:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 10025              		.loc 1 42 14 view .LVU2878
 10026              	.LBB1588:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10027              		.loc 1 43 2 view .LVU2879
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10028              		.loc 1 43 26 is_stmt 0 view .LVU2880
 10029 0014 97F8E987 		ldrb	r8, [r7, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10030              		.loc 1 43 15 view .LVU2881
 10031 0018 08F03F08 		and	r8, r8, #63
 10032              	.LVL770:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10033              		.loc 1 44 2 is_stmt 1 view .LVU2882
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10034              		.loc 1 44 26 is_stmt 0 view .LVU2883
 10035 001c 08F1FF33 		add	r3, r8, #-1
  45:src/int.c     **** 	return il;
 10036              		.loc 1 45 10 view .LVU2884
 10037 0020 3F2B     		cmp	r3, #63
 10038 0022 28BF     		it	cs
 10039 0024 4FF04008 		movcs	r8, #64
 10040              	.LVL771:
  45:src/int.c     **** 	return il;
 10041              		.loc 1 45 10 view .LVU2885
 10042              	.LBE1588:
 10043              	.LBE1587:
 974:src/int.c     **** 
 10044              		.loc 1 974 2 is_stmt 1 view .LVU2886
 974:src/int.c     **** 
 10045              		.loc 1 974 6 is_stmt 0 view .LVU2887
 10046 0028 FFF7FEFF 		bl	getX_int
 10047              	.LVL772:
 976:src/int.c     **** 		switch (op) {
 10048              		.loc 1 976 2 is_stmt 1 view .LVU2888
 976:src/int.c     **** 		switch (op) {
 10049              		.loc 1 976 5 is_stmt 0 view .LVU2889
 10050 002c 96B1     		cbz	r6, .L588
 977:src/int.c     **** 		case RARG_RL:	f = &intRL;	mod = ws;	break;
 10051              		.loc 1 977 3 is_stmt 1 view .LVU2890
 10052 002e A4F15D03 		sub	r3, r4, #93
 10053 0032 062B     		cmp	r3, #6
 10054 0034 37D8     		bhi	.L582
 10055 0036 DFE803F0 		tbb	[pc, r3]
 10056              	.L590:
 10057 003a 3E       		.byte	(.L596-.L590)/2
 10058 003b 04       		.byte	(.L602-.L590)/2
 10059 003c 49       		.byte	(.L594-.L590)/2
 10060 003d 4D       		.byte	(.L593-.L590)/2
 10061 003e 51       		.byte	(.L592-.L590)/2
 10062 003f 56       		.byte	(.L591-.L590)/2
 10063 0040 39       		.byte	(.L589-.L590)/2
 10064 0041 00       		.p2align 1
 10065              	.L602:
ARM GAS  /tmp/ccl34fCK.s 			page 251


 976:src/int.c     **** 		switch (op) {
 10066              		.loc 1 976 5 is_stmt 0 view .LVU2891
 10067 0042 2C4D     		ldr	r5, .L613+4
 10068 0044 4346     		mov	r3, r8
 10069              	.L595:
 10070              	.LVL773:
 988:src/int.c     **** 			if (mod)
 10071              		.loc 1 988 3 is_stmt 1 view .LVU2892
 988:src/int.c     **** 			if (mod)
 10072              		.loc 1 988 6 is_stmt 0 view .LVU2893
 10073 0046 4645     		cmp	r6, r8
 10074 0048 39D8     		bhi	.L600
 10075              	.LVL774:
 10076              	.L601:
 978:src/int.c     **** 		case RARG_RR:	f = &intRR;	mod = ws;	break;
 10077              		.loc 1 978 19 discriminator 3 view .LVU2894
 10078 004a 0024     		movs	r4, #0
 10079              	.L598:
 10080              	.LVL775:
 995:src/int.c     **** 	}
 10081              		.loc 1 995 4 is_stmt 1 discriminator 3 view .LVU2895
 994:src/int.c     **** 			x = (*f)(x);
 10082              		.loc 1 994 21 is_stmt 0 discriminator 3 view .LVU2896
 10083 004c 0134     		adds	r4, r4, #1
 10084              	.LVL776:
 995:src/int.c     **** 	}
 10085              		.loc 1 995 9 discriminator 3 view .LVU2897
 10086 004e A847     		blx	r5
 10087              	.LVL777:
 994:src/int.c     **** 			x = (*f)(x);
 10088              		.loc 1 994 20 is_stmt 1 discriminator 3 view .LVU2898
 994:src/int.c     **** 			x = (*f)(x);
 10089              		.loc 1 994 13 discriminator 3 view .LVU2899
 994:src/int.c     **** 			x = (*f)(x);
 10090              		.loc 1 994 3 is_stmt 0 discriminator 3 view .LVU2900
 10091 0050 B442     		cmp	r4, r6
 10092 0052 FBD3     		bcc	.L598
 10093              	.LVL778:
 10094              	.L588:
 997:src/int.c     **** 	setX_int(mask_value(x));
 10095              		.loc 1 997 2 is_stmt 1 view .LVU2901
 10096 0054 CDE90001 		strd	r0, r1, [sp]
 10097              	.LVL779:
 997:src/int.c     **** 	setX_int(mask_value(x));
 10098              		.loc 1 997 2 is_stmt 0 view .LVU2902
 10099 0058 FFF7FEFF 		bl	setlastX
 10100              	.LVL780:
 998:src/int.c     **** #endif
 10101              		.loc 1 998 2 is_stmt 1 view .LVU2903
 10102              	.LBB1589:
 10103              	.LBI1589:
  91:src/int.c     **** #ifndef TINY_BUILD
 10104              		.loc 1 91 15 view .LVU2904
 10105              	.LBB1590:
  93:src/int.c     **** 	long long int mask;
 10106              		.loc 1 93 2 view .LVU2905
 10107              	.LBB1591:
ARM GAS  /tmp/ccl34fCK.s 			page 252


 10108              	.LBI1591:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 10109              		.loc 1 42 14 view .LVU2906
 10110              	.LBB1592:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10111              		.loc 1 43 2 view .LVU2907
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10112              		.loc 1 43 26 is_stmt 0 view .LVU2908
 10113 005c 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10114              		.loc 1 43 15 view .LVU2909
 10115 0060 03F03F02 		and	r2, r3, #63
 10116              	.LVL781:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10117              		.loc 1 44 2 is_stmt 1 view .LVU2910
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10118              		.loc 1 44 26 is_stmt 0 view .LVU2911
 10119 0064 531E     		subs	r3, r2, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10120              		.loc 1 44 5 view .LVU2912
 10121 0066 3E2B     		cmp	r3, #62
 10122 0068 DDE90001 		ldrd	r0, r1, [sp]
 10123 006c 11D8     		bhi	.L599
 10124              	.LVL782:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10125              		.loc 1 44 5 view .LVU2913
 10126              	.LBE1592:
 10127              	.LBE1591:
  94:src/int.c     **** 
 10128              		.loc 1 94 2 is_stmt 1 view .LVU2914
  96:src/int.c     **** 		return v;
 10129              		.loc 1 96 2 view .LVU2915
  98:src/int.c     **** 	return v & mask;
 10130              		.loc 1 98 2 view .LVU2916
  99:src/int.c     **** #else
 10131              		.loc 1 99 2 view .LVU2917
  98:src/int.c     **** 	return v & mask;
 10132              		.loc 1 98 14 is_stmt 0 view .LVU2918
 10133 006e 0123     		movs	r3, #1
 10134 0070 A2F12004 		sub	r4, r2, #32
 10135 0074 C2F12005 		rsb	r5, r2, #32
 10136 0078 03FA04F4 		lsl	r4, r3, r4
 10137 007c 23FA05F5 		lsr	r5, r3, r5
 10138 0080 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 10139              		.loc 1 98 7 view .LVU2919
 10140 0082 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 10141              		.loc 1 98 14 view .LVU2920
 10142 0086 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 10143              		.loc 1 98 7 view .LVU2921
 10144 008a 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 10145              		.loc 1 99 11 view .LVU2922
 10146 008e 2140     		ands	r1, r1, r4
 10147 0090 1840     		ands	r0, r0, r3
ARM GAS  /tmp/ccl34fCK.s 			page 253


 10148              	.LVL783:
 10149              	.L599:
  99:src/int.c     **** #else
 10150              		.loc 1 99 11 view .LVU2923
 10151              	.LBE1590:
 10152              	.LBE1589:
1000:src/int.c     **** 
 10153              		.loc 1 1000 1 view .LVU2924
 10154 0092 02B0     		add	sp, sp, #8
 10155              		.cfi_remember_state
 10156              		.cfi_def_cfa_offset 24
 10157              		@ sp needed
 10158 0094 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 10159              		.cfi_restore 14
 10160              		.cfi_restore 8
 10161              		.cfi_restore 7
 10162              		.cfi_restore 6
 10163              		.cfi_restore 5
 10164              		.cfi_restore 4
 10165              		.cfi_def_cfa_offset 0
 10166              	.LVL784:
 998:src/int.c     **** #endif
 10167              		.loc 1 998 2 view .LVU2925
 10168 0098 FFF7FEBF 		b	setX_int
 10169              	.LVL785:
 10170              	.L583:
 10171              		.cfi_restore_state
 10172              	.LBB1593:
 10173              	.LBB1584:
 10174              	.LBB1580:
 10175              	.LBI1580:
  23:src/int.c     **** 	if (! is_intmode())
 10176              		.loc 1 23 12 is_stmt 1 view .LVU2926
 10177              	.LBB1581:
  25:src/int.c     **** 	return 0;
 10178              		.loc 1 25 3 view .LVU2927
  25:src/int.c     **** 	return 0;
 10179              		.loc 1 25 10 is_stmt 0 view .LVU2928
 10180 009c 0D20     		movs	r0, #13
 10181              	.LVL786:
  25:src/int.c     **** 	return 0;
 10182              		.loc 1 25 10 view .LVU2929
 10183 009e FFF7FEFF 		bl	report_err
 10184              	.LVL787:
  25:src/int.c     **** 	return 0;
 10185              		.loc 1 25 10 view .LVU2930
 10186              	.LBE1581:
 10187              	.LBE1580:
 10188              	.LBE1584:
 10189              	.LBE1593:
 970:src/int.c     **** 		return;
 10190              		.loc 1 970 5 view .LVU2931
 10191 00a2 0028     		cmp	r0, #0
 10192 00a4 B6D0     		beq	.L587
 10193              	.L582:
1000:src/int.c     **** 
 10194              		.loc 1 1000 1 view .LVU2932
ARM GAS  /tmp/ccl34fCK.s 			page 254


 10195 00a6 02B0     		add	sp, sp, #8
 10196              		.cfi_remember_state
 10197              		.cfi_def_cfa_offset 24
 10198              		@ sp needed
 10199 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 10200              	.LVL788:
 10201              	.L589:
 10202              		.cfi_restore_state
 984:src/int.c     **** 		default:
 10203              		.loc 1 984 18 is_stmt 1 view .LVU2933
 984:src/int.c     **** 		default:
 10204              		.loc 1 984 31 view .LVU2934
 984:src/int.c     **** 		default:
 10205              		.loc 1 984 40 view .LVU2935
 988:src/int.c     **** 			if (mod)
 10206              		.loc 1 988 3 view .LVU2936
 10207 00ac 4645     		cmp	r6, r8
 984:src/int.c     **** 		default:
 10208              		.loc 1 984 20 is_stmt 0 view .LVU2937
 10209 00ae 124D     		ldr	r5, .L613+8
 10210 00b0 28BF     		it	cs
 10211 00b2 4646     		movcs	r6, r8
 10212              	.LVL789:
 984:src/int.c     **** 		default:
 10213              		.loc 1 984 20 view .LVU2938
 10214 00b4 C9E7     		b	.L601
 10215              	.LVL790:
 10216              	.L596:
 988:src/int.c     **** 			if (mod)
 10217              		.loc 1 988 3 is_stmt 1 view .LVU2939
 988:src/int.c     **** 			if (mod)
 10218              		.loc 1 988 6 is_stmt 0 view .LVU2940
 10219 00b6 4645     		cmp	r6, r8
 978:src/int.c     **** 		case RARG_RR:	f = &intRR;	mod = ws;	break;
 10220              		.loc 1 978 19 view .LVU2941
 10221 00b8 104D     		ldr	r5, .L613+12
 988:src/int.c     **** 			if (mod)
 10222              		.loc 1 988 6 view .LVU2942
 10223 00ba C6D9     		bls	.L601
 10224 00bc 4346     		mov	r3, r8
 10225              	.LVL791:
 10226              	.L600:
 990:src/int.c     **** 			else
 10227              		.loc 1 990 5 is_stmt 1 view .LVU2943
 990:src/int.c     **** 			else
 10228              		.loc 1 990 9 is_stmt 0 view .LVU2944
 10229 00be B6FBF3F2 		udiv	r2, r6, r3
 10230 00c2 03FB1266 		mls	r6, r3, r2, r6
 10231              	.LVL792:
 994:src/int.c     **** 			x = (*f)(x);
 10232              		.loc 1 994 3 is_stmt 1 view .LVU2945
 994:src/int.c     **** 			x = (*f)(x);
 10233              		.loc 1 994 13 view .LVU2946
 994:src/int.c     **** 			x = (*f)(x);
 10234              		.loc 1 994 3 is_stmt 0 view .LVU2947
 10235 00c6 002E     		cmp	r6, #0
 10236 00c8 BFD1     		bne	.L601
ARM GAS  /tmp/ccl34fCK.s 			page 255


 994:src/int.c     **** 			x = (*f)(x);
 10237              		.loc 1 994 3 view .LVU2948
 10238 00ca C3E7     		b	.L588
 10239              	.LVL793:
 10240              	.L594:
 980:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10241              		.loc 1 980 18 is_stmt 1 view .LVU2949
 980:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10242              		.loc 1 980 31 view .LVU2950
 980:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10243              		.loc 1 980 20 is_stmt 0 view .LVU2951
 10244 00cc 0C4D     		ldr	r5, .L613+16
 980:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10245              		.loc 1 980 35 view .LVU2952
 10246 00ce 08F10103 		add	r3, r8, #1
 10247              	.LVL794:
 980:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10248              		.loc 1 980 45 is_stmt 1 view .LVU2953
 980:src/int.c     **** 		case RARG_RRC:	f = &intRRC;	mod = ws + 1;	break;
 10249              		.loc 1 980 3 is_stmt 0 view .LVU2954
 10250 00d2 B8E7     		b	.L595
 10251              	.LVL795:
 10252              	.L593:
 981:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10253              		.loc 1 981 18 is_stmt 1 view .LVU2955
 981:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10254              		.loc 1 981 31 view .LVU2956
 981:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10255              		.loc 1 981 20 is_stmt 0 view .LVU2957
 10256 00d4 0B4D     		ldr	r5, .L613+20
 981:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10257              		.loc 1 981 35 view .LVU2958
 10258 00d6 08F10103 		add	r3, r8, #1
 10259              	.LVL796:
 981:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10260              		.loc 1 981 45 is_stmt 1 view .LVU2959
 981:src/int.c     **** 		case RARG_SL:	f = &intLSL;	mod = 0;	break;
 10261              		.loc 1 981 3 is_stmt 0 view .LVU2960
 10262 00da B4E7     		b	.L595
 10263              	.LVL797:
 10264              	.L592:
 988:src/int.c     **** 			if (mod)
 10265              		.loc 1 988 3 is_stmt 1 view .LVU2961
 10266 00dc 4645     		cmp	r6, r8
 982:src/int.c     **** 		case RARG_SR:	f = &intLSR;	mod = 0;	break;
 10267              		.loc 1 982 19 is_stmt 0 view .LVU2962
 10268 00de 0A4D     		ldr	r5, .L613+24
 10269 00e0 28BF     		it	cs
 10270 00e2 4646     		movcs	r6, r8
 10271              	.LVL798:
 982:src/int.c     **** 		case RARG_SR:	f = &intLSR;	mod = 0;	break;
 10272              		.loc 1 982 19 view .LVU2963
 10273 00e4 B1E7     		b	.L601
 10274              	.LVL799:
 10275              	.L591:
 983:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10276              		.loc 1 983 17 is_stmt 1 view .LVU2964
ARM GAS  /tmp/ccl34fCK.s 			page 256


 983:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10277              		.loc 1 983 30 view .LVU2965
 983:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10278              		.loc 1 983 39 view .LVU2966
 988:src/int.c     **** 			if (mod)
 10279              		.loc 1 988 3 view .LVU2967
 10280 00e6 4645     		cmp	r6, r8
 983:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10281              		.loc 1 983 19 is_stmt 0 view .LVU2968
 10282 00e8 084D     		ldr	r5, .L613+28
 10283 00ea 28BF     		it	cs
 10284 00ec 4646     		movcs	r6, r8
 10285              	.LVL800:
 983:src/int.c     **** 		case RARG_ASR:	f = &intASR;	mod = 0;	break;
 10286              		.loc 1 983 19 view .LVU2969
 10287 00ee ACE7     		b	.L601
 10288              	.L614:
 10289              		.align	2
 10290              	.L613:
 10291 00f0 00000000 		.word	PersistentRam
 10292 00f4 00000000 		.word	intRR
 10293 00f8 00000000 		.word	intASR
 10294 00fc 00000000 		.word	intRL
 10295 0100 00000000 		.word	intRLC
 10296 0104 00000000 		.word	intRRC
 10297 0108 00000000 		.word	intLSL
 10298 010c 00000000 		.word	intLSR
 10299              		.cfi_endproc
 10300              	.LFE51:
 10302              		.section	.text.intNumBits,"ax",%progbits
 10303              		.align	1
 10304              		.p2align 2,,3
 10305              		.global	intNumBits
 10306              		.syntax unified
 10307              		.thumb
 10308              		.thumb_func
 10309              		.fpu fpv4-sp-d16
 10311              	intNumBits:
 10312              	.LVL801:
 10313              	.LFB54:
1018:src/int.c     **** #ifndef TINY_BUILD
 10314              		.loc 1 1018 43 is_stmt 1 view -0
 10315              		.cfi_startproc
 10316              		@ args = 0, pretend = 0, frame = 0
 10317              		@ frame_needed = 0, uses_anonymous_args = 0
 10318              		@ link register save eliminated.
1020:src/int.c     **** #else
 10319              		.loc 1 1020 2 view .LVU2971
 10320              	.LBB1604:
 10321              	.LBI1604:
1013:src/int.c     **** 	return count32bits(x & 0xffffffff) + count32bits((x >> 32) & 0xffffffff);
 10322              		.loc 1 1013 21 view .LVU2972
 10323              	.LBB1605:
1014:src/int.c     **** }
 10324              		.loc 1 1014 2 view .LVU2973
 10325              	.LBB1606:
 10326              	.LBI1606:
ARM GAS  /tmp/ccl34fCK.s 			page 257


1007:src/int.c     **** 	v = v - ((v >> 1) & 0x55555555);
 10327              		.loc 1 1007 21 view .LVU2974
 10328              	.LBB1607:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10329              		.loc 1 1008 2 view .LVU2975
 10330              	.LBE1607:
 10331              	.LBE1606:
 10332              	.LBB1616:
 10333              	.LBB1617:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10334              		.loc 1 1008 14 is_stmt 0 view .LVU2976
 10335 0000 4A08     		lsrs	r2, r1, #1
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10336              		.loc 1 1008 20 view .LVU2977
 10337 0002 02F05532 		and	r2, r2, #1431655765
 10338              	.LBE1617:
 10339              	.LBE1616:
 10340              	.LBB1628:
 10341              	.LBB1608:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10342              		.loc 1 1008 14 view .LVU2978
 10343 0006 4308     		lsrs	r3, r0, #1
 10344              	.LBE1608:
 10345              	.LBE1628:
 10346              	.LBB1629:
 10347              	.LBB1618:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10348              		.loc 1 1008 4 view .LVU2979
 10349 0008 891A     		subs	r1, r1, r2
 10350              	.LVL802:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10351              		.loc 1 1008 4 view .LVU2980
 10352              	.LBE1618:
 10353              	.LBE1629:
 10354              	.LBB1630:
 10355              	.LBB1609:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10356              		.loc 1 1008 20 view .LVU2981
 10357 000a 03F05533 		and	r3, r3, #1431655765
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10358              		.loc 1 1008 4 view .LVU2982
 10359 000e C01A     		subs	r0, r0, r3
 10360              	.LVL803:
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10361              		.loc 1 1009 2 is_stmt 1 view .LVU2983
 10362              	.LBE1609:
 10363              	.LBE1630:
 10364              	.LBB1631:
 10365              	.LBB1619:
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10366              		.loc 1 1009 29 is_stmt 0 view .LVU2984
 10367 0010 8A08     		lsrs	r2, r1, #2
 10368              	.LBE1619:
 10369              	.LBE1631:
 10370              	.LBB1632:
 10371              	.LBB1610:
 10372 0012 8308     		lsrs	r3, r0, #2
ARM GAS  /tmp/ccl34fCK.s 			page 258


 10373              	.LBE1610:
 10374              	.LBE1632:
 10375              	.LBB1633:
 10376              	.LBB1620:
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10377              		.loc 1 1009 35 view .LVU2985
 10378 0014 02F03332 		and	r2, r2, #858993459
 10379              	.LBE1620:
 10380              	.LBE1633:
 10381              	.LBE1605:
 10382              	.LBE1604:
1018:src/int.c     **** #ifndef TINY_BUILD
 10383              		.loc 1 1018 43 view .LVU2986
 10384 0018 10B4     		push	{r4}
 10385              		.cfi_def_cfa_offset 4
 10386              		.cfi_offset 4, -4
 10387              	.LBB1652:
 10388              	.LBB1646:
 10389              	.LBB1634:
 10390              	.LBB1621:
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10391              		.loc 1 1009 9 view .LVU2987
 10392 001a 01F03331 		and	r1, r1, #858993459
 10393              	.LBE1621:
 10394              	.LBE1634:
 10395              	.LBE1646:
 10396              	.LBE1652:
 10397              	.LBB1653:
 10398              	.LBB1654:
 10399              	.LBB1655:
 10400              	.LBB1656:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10401              		.loc 1 43 26 view .LVU2988
 10402 001e 154C     		ldr	r4, .L618
 10403              	.LBE1656:
 10404              	.LBE1655:
 10405              	.LBE1654:
 10406              	.LBE1653:
 10407              	.LBB1672:
 10408              	.LBB1647:
 10409              	.LBB1635:
 10410              	.LBB1622:
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10411              		.loc 1 1009 4 view .LVU2989
 10412 0020 1144     		add	r1, r1, r2
 10413              	.LBE1622:
 10414              	.LBE1635:
 10415              	.LBB1636:
 10416              	.LBB1611:
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10417              		.loc 1 1009 35 view .LVU2990
 10418 0022 03F03332 		and	r2, r3, #858993459
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10419              		.loc 1 1009 9 view .LVU2991
 10420 0026 00F03333 		and	r3, r0, #858993459
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10421              		.loc 1 1009 4 view .LVU2992
ARM GAS  /tmp/ccl34fCK.s 			page 259


 10422 002a 1344     		add	r3, r3, r2
 10423              	.LVL804:
1010:src/int.c     **** }
 10424              		.loc 1 1010 2 is_stmt 1 view .LVU2993
1010:src/int.c     **** }
 10425              		.loc 1 1010 2 is_stmt 0 view .LVU2994
 10426              	.LBE1611:
 10427              	.LBE1636:
 10428              	.LBB1637:
 10429              	.LBI1616:
1007:src/int.c     **** 	v = v - ((v >> 1) & 0x55555555);
 10430              		.loc 1 1007 21 is_stmt 1 view .LVU2995
 10431              	.LBB1623:
1008:src/int.c     **** 	v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
 10432              		.loc 1 1008 2 view .LVU2996
1009:src/int.c     **** 	return (((v + (v >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
 10433              		.loc 1 1009 2 view .LVU2997
1010:src/int.c     **** }
 10434              		.loc 1 1010 2 view .LVU2998
1010:src/int.c     **** }
 10435              		.loc 1 1010 14 is_stmt 0 view .LVU2999
 10436 002c 01EB1110 		add	r0, r1, r1, lsr #4
 10437              	.LBE1623:
 10438              	.LBE1637:
 10439              	.LBE1647:
 10440              	.LBE1672:
 10441              	.LBB1673:
 10442              	.LBB1667:
 10443              	.LBB1662:
 10444              	.LBB1657:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10445              		.loc 1 43 26 view .LVU3000
 10446 0030 94F8E927 		ldrb	r2, [r4, #2025]	@ zero_extendqisi2
 10447              	.LBE1657:
 10448              	.LBE1662:
 10449              	.LBE1667:
 10450              	.LBE1673:
 10451              	.LBB1674:
 10452              	.LBB1648:
 10453              	.LBB1638:
 10454              	.LBB1624:
1010:src/int.c     **** }
 10455              		.loc 1 1010 26 view .LVU3001
 10456 0034 00F00F30 		and	r0, r0, #252645135
 10457              	.LBE1624:
 10458              	.LBE1638:
 10459              	.LBB1639:
 10460              	.LBB1612:
1010:src/int.c     **** }
 10461              		.loc 1 1010 14 view .LVU3002
 10462 0038 03EB1313 		add	r3, r3, r3, lsr #4
 10463              	.LBE1612:
 10464              	.LBE1639:
 10465              	.LBB1640:
 10466              	.LBB1625:
1010:src/int.c     **** }
 10467              		.loc 1 1010 39 view .LVU3003
ARM GAS  /tmp/ccl34fCK.s 			page 260


 10468 003c 00EB0020 		add	r0, r0, r0, lsl #8
 10469              	.LBE1625:
 10470              	.LBE1640:
 10471              	.LBB1641:
 10472              	.LBB1613:
1010:src/int.c     **** }
 10473              		.loc 1 1010 26 view .LVU3004
 10474 0040 03F00F33 		and	r3, r3, #252645135
 10475              	.LBE1613:
 10476              	.LBE1641:
 10477              	.LBE1648:
 10478              	.LBE1674:
 10479              	.LBB1675:
 10480              	.LBB1668:
 10481              	.LBB1663:
 10482              	.LBB1658:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10483              		.loc 1 43 15 view .LVU3005
 10484 0044 02F03F02 		and	r2, r2, #63
 10485              	.LBE1658:
 10486              	.LBE1663:
 10487              	.LBE1668:
 10488              	.LBE1675:
 10489              	.LBB1676:
 10490              	.LBB1649:
 10491              	.LBB1642:
 10492              	.LBB1626:
1010:src/int.c     **** }
 10493              		.loc 1 1010 39 view .LVU3006
 10494 0048 00EB0040 		add	r0, r0, r0, lsl #16
 10495              	.LBE1626:
 10496              	.LBE1642:
 10497              	.LBB1643:
 10498              	.LBB1614:
 10499 004c 03EB0323 		add	r3, r3, r3, lsl #8
 10500              	.LBE1614:
 10501              	.LBE1643:
 10502              	.LBE1649:
 10503              	.LBE1676:
 10504              	.LBB1677:
 10505              	.LBB1669:
 10506              	.LBB1664:
 10507              	.LBB1659:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10508              		.loc 1 44 26 view .LVU3007
 10509 0050 511E     		subs	r1, r2, #1
 10510              	.LBE1659:
 10511              	.LBE1664:
 10512              	.LBE1669:
 10513              	.LBE1677:
 10514              	.LBB1678:
 10515              	.LBB1650:
 10516              	.LBB1644:
 10517              	.LBB1627:
1010:src/int.c     **** }
 10518              		.loc 1 1010 52 view .LVU3008
 10519 0052 000E     		lsrs	r0, r0, #24
ARM GAS  /tmp/ccl34fCK.s 			page 261


 10520              	.LBE1627:
 10521              	.LBE1644:
 10522              	.LBB1645:
 10523              	.LBB1615:
1010:src/int.c     **** }
 10524              		.loc 1 1010 39 view .LVU3009
 10525 0054 03EB0343 		add	r3, r3, r3, lsl #16
 10526              	.LBE1615:
 10527              	.LBE1645:
 10528              	.LBE1650:
 10529              	.LBE1678:
 10530              	.LBB1679:
 10531              	.LBB1670:
 10532              	.LBB1665:
 10533              	.LBB1660:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10534              		.loc 1 44 5 view .LVU3010
 10535 0058 3E29     		cmp	r1, #62
 10536              	.LBE1660:
 10537              	.LBE1665:
 10538              	.LBE1670:
 10539              	.LBE1679:
 10540              	.LBB1680:
 10541              	.LBB1651:
1014:src/int.c     **** }
 10542              		.loc 1 1014 37 view .LVU3011
 10543 005a 00EB1360 		add	r0, r0, r3, lsr #24
 10544              	.LVL805:
1014:src/int.c     **** }
 10545              		.loc 1 1014 37 view .LVU3012
 10546              	.LBE1651:
 10547              	.LBE1680:
 10548              	.LBB1681:
 10549              	.LBI1653:
  91:src/int.c     **** #ifndef TINY_BUILD
 10550              		.loc 1 91 15 is_stmt 1 view .LVU3013
 10551              	.LBB1671:
  93:src/int.c     **** 	long long int mask;
 10552              		.loc 1 93 2 view .LVU3014
 10553              	.LBB1666:
 10554              	.LBI1655:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 10555              		.loc 1 42 14 view .LVU3015
 10556              	.LBB1661:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10557              		.loc 1 43 2 view .LVU3016
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10558              		.loc 1 44 2 view .LVU3017
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10559              		.loc 1 44 5 is_stmt 0 view .LVU3018
 10560 005e 04D8     		bhi	.L615
 10561              	.LVL806:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10562              		.loc 1 44 5 view .LVU3019
 10563              	.LBE1661:
 10564              	.LBE1666:
  94:src/int.c     **** 
ARM GAS  /tmp/ccl34fCK.s 			page 262


 10565              		.loc 1 94 2 is_stmt 1 view .LVU3020
  96:src/int.c     **** 		return v;
 10566              		.loc 1 96 2 view .LVU3021
  98:src/int.c     **** 	return v & mask;
 10567              		.loc 1 98 2 view .LVU3022
  99:src/int.c     **** #else
 10568              		.loc 1 99 2 view .LVU3023
  98:src/int.c     **** 	return v & mask;
 10569              		.loc 1 98 14 is_stmt 0 view .LVU3024
 10570 0060 0123     		movs	r3, #1
 10571 0062 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 10572              		.loc 1 98 7 view .LVU3025
 10573 0064 13F1FF33 		adds	r3, r3, #-1
  99:src/int.c     **** #else
 10574              		.loc 1 99 11 view .LVU3026
 10575 0068 1840     		ands	r0, r0, r3
 10576              	.LVL807:
 10577              	.L615:
  99:src/int.c     **** #else
 10578              		.loc 1 99 11 view .LVU3027
 10579              	.LBE1671:
 10580              	.LBE1681:
1024:src/int.c     **** 
 10581              		.loc 1 1024 1 view .LVU3028
 10582 006a 0021     		movs	r1, #0
 10583 006c 5DF8044B 		ldr	r4, [sp], #4
 10584              		.cfi_restore 4
 10585              		.cfi_def_cfa_offset 0
 10586 0070 7047     		bx	lr
 10587              	.L619:
 10588 0072 00BF     		.align	2
 10589              	.L618:
 10590 0074 00000000 		.word	PersistentRam
 10591              		.cfi_endproc
 10592              	.LFE54:
 10594              		.section	.text.intSqrt,"ax",%progbits
 10595              		.align	1
 10596              		.p2align 2,,3
 10597              		.global	intSqrt
 10598              		.syntax unified
 10599              		.thumb
 10600              		.thumb_func
 10601              		.fpu fpv4-sp-d16
 10603              	intSqrt:
 10604              	.LVL808:
 10605              	.LFB55:
1029:src/int.c     **** #if !defined(TINY_BUILD)
 10606              		.loc 1 1029 40 is_stmt 1 view -0
 10607              		.cfi_startproc
 10608              		@ args = 0, pretend = 0, frame = 8
 10609              		@ frame_needed = 0, uses_anonymous_args = 0
1031:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 10610              		.loc 1 1031 2 view .LVU3030
1032:src/int.c     **** 	unsigned long long int n0, n1;
 10611              		.loc 1 1032 2 view .LVU3031
1029:src/int.c     **** #if !defined(TINY_BUILD)
ARM GAS  /tmp/ccl34fCK.s 			page 263


 10612              		.loc 1 1029 40 is_stmt 0 view .LVU3032
 10613 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10614              		.cfi_def_cfa_offset 28
 10615              		.cfi_offset 4, -28
 10616              		.cfi_offset 5, -24
 10617              		.cfi_offset 6, -20
 10618              		.cfi_offset 7, -16
 10619              		.cfi_offset 8, -12
 10620              		.cfi_offset 9, -8
 10621              		.cfi_offset 14, -4
 10622 0004 83B0     		sub	sp, sp, #12
 10623              		.cfi_def_cfa_offset 40
1032:src/int.c     **** 	unsigned long long int n0, n1;
 10624              		.loc 1 1032 29 view .LVU3033
 10625 0006 01AA     		add	r2, sp, #4
 10626 0008 FFF7FEFF 		bl	extract_value
 10627              	.LVL809:
1035:src/int.c     **** 		report_err(ERR_DOMAIN);
 10628              		.loc 1 1035 6 view .LVU3034
 10629 000c 019A     		ldr	r2, [sp, #4]
1033:src/int.c     **** 
 10630              		.loc 1 1033 2 is_stmt 1 view .LVU3035
1035:src/int.c     **** 		report_err(ERR_DOMAIN);
 10631              		.loc 1 1035 2 view .LVU3036
1035:src/int.c     **** 		report_err(ERR_DOMAIN);
 10632              		.loc 1 1035 5 is_stmt 0 view .LVU3037
 10633 000e 002A     		cmp	r2, #0
 10634 0010 4AD1     		bne	.L634
 10635 0012 0646     		mov	r6, r0
 10636 0014 0F46     		mov	r7, r1
1039:src/int.c     **** 		n1 = 0;
 10637              		.loc 1 1039 2 is_stmt 1 view .LVU3038
1039:src/int.c     **** 		n1 = 0;
 10638              		.loc 1 1039 5 is_stmt 0 view .LVU3039
 10639 0016 56EA0703 		orrs	r3, r6, r7
 10640 001a 06D1     		bne	.L635
 10641              	.L623:
 10642              	.LVL810:
1053:src/int.c     **** #else
 10643              		.loc 1 1053 2 is_stmt 1 view .LVU3040
1053:src/int.c     **** #else
 10644              		.loc 1 1053 9 is_stmt 0 view .LVU3041
 10645 001c 3046     		mov	r0, r6
 10646 001e 3946     		mov	r1, r7
 10647 0020 FFF7FEFF 		bl	build_value
 10648              	.LVL811:
1057:src/int.c     **** 
 10649              		.loc 1 1057 1 view .LVU3042
 10650 0024 03B0     		add	sp, sp, #12
 10651              		.cfi_remember_state
 10652              		.cfi_def_cfa_offset 28
 10653              		@ sp needed
 10654 0026 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10655              	.LVL812:
 10656              	.L635:
 10657              		.cfi_restore_state
1042:src/int.c     **** 		n1 = v / n0 + n0 / 2;
ARM GAS  /tmp/ccl34fCK.s 			page 264


 10658              		.loc 1 1042 3 is_stmt 1 view .LVU3043
1042:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10659              		.loc 1 1042 10 is_stmt 0 view .LVU3044
 10660 002a 4308     		lsrs	r3, r0, #1
 10661 002c 43EAC173 		orr	r3, r3, r1, lsl #31
1042:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10662              		.loc 1 1042 6 view .LVU3045
 10663 0030 13F10108 		adds	r8, r3, #1
1042:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10664              		.loc 1 1042 10 view .LVU3046
 10665 0034 4FEA5103 		lsr	r3, r1, #1
1042:src/int.c     **** 		n1 = v / n0 + n0 / 2;
 10666              		.loc 1 1042 6 view .LVU3047
 10667 0038 43F10009 		adc	r9, r3, #0
 10668              	.LVL813:
1043:src/int.c     **** 		while (n1 < n0) {
 10669              		.loc 1 1043 3 is_stmt 1 view .LVU3048
1043:src/int.c     **** 		while (n1 < n0) {
 10670              		.loc 1 1043 10 is_stmt 0 view .LVU3049
 10671 003c 4B46     		mov	r3, r9
 10672 003e 4246     		mov	r2, r8
 10673 0040 FFF7FEFF 		bl	__aeabi_uldivmod
 10674              	.LVL814:
1043:src/int.c     **** 		while (n1 < n0) {
 10675              		.loc 1 1043 20 view .LVU3050
 10676 0044 4FEA5803 		lsr	r3, r8, #1
 10677 0048 43EAC973 		orr	r3, r3, r9, lsl #31
1043:src/int.c     **** 		while (n1 < n0) {
 10678              		.loc 1 1043 6 view .LVU3051
 10679 004c C418     		adds	r4, r0, r3
1043:src/int.c     **** 		while (n1 < n0) {
 10680              		.loc 1 1043 20 view .LVU3052
 10681 004e 4FEA5903 		lsr	r3, r9, #1
1043:src/int.c     **** 		while (n1 < n0) {
 10682              		.loc 1 1043 6 view .LVU3053
 10683 0052 41EB0305 		adc	r5, r1, r3
 10684              	.LVL815:
1044:src/int.c     **** 			n0 = n1;
 10685              		.loc 1 1044 3 is_stmt 1 view .LVU3054
1044:src/int.c     **** 			n0 = n1;
 10686              		.loc 1 1044 9 view .LVU3055
 10687 0056 4D45     		cmp	r5, r9
 10688 0058 08BF     		it	eq
 10689 005a 4445     		cmpeq	r4, r8
 10690 005c 12D2     		bcs	.L624
 10691              	.LVL816:
 10692              	.L625:
1045:src/int.c     **** 			n1 = (n0 + v / n0) / 2;
 10693              		.loc 1 1045 4 view .LVU3056
1046:src/int.c     **** 		}
 10694              		.loc 1 1046 4 view .LVU3057
1046:src/int.c     **** 		}
 10695              		.loc 1 1046 17 is_stmt 0 view .LVU3058
 10696 005e 2246     		mov	r2, r4
 10697 0060 2B46     		mov	r3, r5
 10698 0062 3046     		mov	r0, r6
 10699 0064 3946     		mov	r1, r7
ARM GAS  /tmp/ccl34fCK.s 			page 265


 10700 0066 FFF7FEFF 		bl	__aeabi_uldivmod
 10701              	.LVL817:
1046:src/int.c     **** 		}
 10702              		.loc 1 1046 13 view .LVU3059
 10703 006a 0019     		adds	r0, r0, r4
 10704 006c 45EB0101 		adc	r1, r5, r1
 10705 0070 2246     		mov	r2, r4
 10706 0072 2B46     		mov	r3, r5
1046:src/int.c     **** 		}
 10707              		.loc 1 1046 7 view .LVU3060
 10708 0074 4408     		lsrs	r4, r0, #1
 10709              	.LVL818:
1046:src/int.c     **** 		}
 10710              		.loc 1 1046 7 view .LVU3061
 10711 0076 4D08     		lsrs	r5, r1, #1
 10712 0078 44EAC174 		orr	r4, r4, r1, lsl #31
 10713              	.LVL819:
1044:src/int.c     **** 			n0 = n1;
 10714              		.loc 1 1044 9 is_stmt 1 view .LVU3062
 10715 007c 9D42     		cmp	r5, r3
 10716 007e 08BF     		it	eq
 10717 0080 9442     		cmpeq	r4, r2
 10718 0082 ECD3     		bcc	.L625
 10719              	.LVL820:
 10720              	.L624:
1048:src/int.c     **** 		if (n0 > v)
 10721              		.loc 1 1048 3 view .LVU3063
1048:src/int.c     **** 		if (n0 > v)
 10722              		.loc 1 1048 6 is_stmt 0 view .LVU3064
 10723 0084 A4FB0423 		umull	r2, r3, r4, r4
 10724 0088 04FB05F1 		mul	r1, r4, r5
 10725 008c 03EB4103 		add	r3, r3, r1, lsl #1
1049:src/int.c     **** 			n1--;
 10726              		.loc 1 1049 3 is_stmt 1 view .LVU3065
1049:src/int.c     **** 			n1--;
 10727              		.loc 1 1049 6 is_stmt 0 view .LVU3066
 10728 0090 9F42     		cmp	r7, r3
 10729 0092 08BF     		it	eq
 10730 0094 9642     		cmpeq	r6, r2
 10731 0096 0FD2     		bcs	.L626
1050:src/int.c     **** 		set_carry((n0 != v)?1:0);
 10732              		.loc 1 1050 4 is_stmt 1 view .LVU3067
1050:src/int.c     **** 		set_carry((n0 != v)?1:0);
 10733              		.loc 1 1050 6 is_stmt 0 view .LVU3068
 10734 0098 14F1FF36 		adds	r6, r4, #-1
 10735 009c 45F1FF37 		adc	r7, r5, #-1
 10736              	.LVL821:
1051:src/int.c     **** 	}
 10737              		.loc 1 1051 3 is_stmt 1 view .LVU3069
 10738              	.LBB1682:
 10739              	.LBI1682:
  53:src/int.c     **** #ifndef TINY_BUILD
 10740              		.loc 1 53 6 view .LVU3070
 10741              	.LBB1683:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10742              		.loc 1 55 2 view .LVU3071
 10743              	.L627:
ARM GAS  /tmp/ccl34fCK.s 			page 266


  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10744              		.loc 1 55 2 is_stmt 0 view .LVU3072
 10745 00a0 FFF7FEFF 		bl	set_carry.part.0
 10746              	.LVL822:
 10747 00a4 019A     		ldr	r2, [sp, #4]
 10748 00a6 B9E7     		b	.L623
 10749              	.LVL823:
 10750              	.L634:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10751              		.loc 1 55 2 view .LVU3073
 10752              	.LBE1683:
 10753              	.LBE1682:
1036:src/int.c     **** 		return 0;
 10754              		.loc 1 1036 3 is_stmt 1 view .LVU3074
 10755 00a8 0120     		movs	r0, #1
 10756 00aa FFF7FEFF 		bl	report_err
 10757              	.LVL824:
1037:src/int.c     **** 	}
 10758              		.loc 1 1037 3 view .LVU3075
1037:src/int.c     **** 	}
 10759              		.loc 1 1037 10 is_stmt 0 view .LVU3076
 10760 00ae 0020     		movs	r0, #0
 10761 00b0 0146     		mov	r1, r0
1057:src/int.c     **** 
 10762              		.loc 1 1057 1 view .LVU3077
 10763 00b2 03B0     		add	sp, sp, #12
 10764              		.cfi_remember_state
 10765              		.cfi_def_cfa_offset 28
 10766              		@ sp needed
 10767 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10768              	.LVL825:
 10769              	.L626:
 10770              		.cfi_restore_state
1051:src/int.c     **** 	}
 10771              		.loc 1 1051 3 is_stmt 1 view .LVU3078
 10772              	.LBB1685:
  53:src/int.c     **** #ifndef TINY_BUILD
 10773              		.loc 1 53 6 view .LVU3079
 10774              	.LBB1684:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10775              		.loc 1 55 2 view .LVU3080
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 10776              		.loc 1 55 5 is_stmt 0 view .LVU3081
 10777 00b8 07D1     		bne	.L636
  58:src/int.c     **** #endif
 10778              		.loc 1 58 3 is_stmt 1 view .LVU3082
 10779 00ba 5221     		movs	r1, #82
 10780 00bc 6A20     		movs	r0, #106
 10781 00be FFF7FEFF 		bl	cmdflag
 10782              	.LVL826:
 10783 00c2 2646     		mov	r6, r4
 10784 00c4 019A     		ldr	r2, [sp, #4]
 10785 00c6 2F46     		mov	r7, r5
 10786 00c8 A8E7     		b	.L623
 10787              	.L636:
 10788 00ca 2646     		mov	r6, r4
 10789 00cc 2F46     		mov	r7, r5
ARM GAS  /tmp/ccl34fCK.s 			page 267


 10790 00ce E7E7     		b	.L627
 10791              	.LBE1684:
 10792              	.LBE1685:
 10793              		.cfi_endproc
 10794              	.LFE55:
 10796              		.section	.text.int_power_helper,"ax",%progbits
 10797              		.align	1
 10798              		.p2align 2,,3
 10799              		.global	int_power_helper
 10800              		.syntax unified
 10801              		.thumb
 10802              		.thumb_func
 10803              		.fpu fpv4-sp-d16
 10805              	int_power_helper:
 10806              	.LVL827:
 10807              	.LFB56:
1059:src/int.c     **** 	unsigned long long int r = 1;
 10808              		.loc 1 1059 100 view -0
 10809              		.cfi_startproc
 10810              		@ args = 4, pretend = 0, frame = 16
 10811              		@ frame_needed = 0, uses_anonymous_args = 0
1060:src/int.c     **** 	unsigned int i;
 10812              		.loc 1 1060 2 view .LVU3084
1061:src/int.c     **** 	unsigned int ws;
 10813              		.loc 1 1061 2 view .LVU3085
1062:src/int.c     **** 	int overflow_next = 0;
 10814              		.loc 1 1062 2 view .LVU3086
1063:src/int.c     **** 
 10815              		.loc 1 1063 2 view .LVU3087
1059:src/int.c     **** 	unsigned long long int r = 1;
 10816              		.loc 1 1059 100 is_stmt 0 view .LVU3088
 10817 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 10818              		.cfi_def_cfa_offset 36
 10819              		.cfi_offset 4, -36
 10820              		.cfi_offset 5, -32
 10821              		.cfi_offset 6, -28
 10822              		.cfi_offset 7, -24
 10823              		.cfi_offset 8, -20
 10824              		.cfi_offset 9, -16
 10825              		.cfi_offset 10, -12
 10826              		.cfi_offset 11, -8
 10827              		.cfi_offset 14, -4
 10828              	.LBB1686:
 10829              	.LBB1687:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10830              		.loc 1 43 26 view .LVU3089
 10831 0004 2B4C     		ldr	r4, .L653
 10832 0006 94F8E997 		ldrb	r9, [r4, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10833              		.loc 1 43 15 view .LVU3090
 10834 000a 09F03F09 		and	r9, r9, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10835              		.loc 1 44 26 view .LVU3091
 10836 000e 09F1FF36 		add	r6, r9, #-1
 10837              	.LBE1687:
 10838              	.LBE1686:
1059:src/int.c     **** 	unsigned long long int r = 1;
ARM GAS  /tmp/ccl34fCK.s 			page 268


 10839              		.loc 1 1059 100 view .LVU3092
 10840 0012 87B0     		sub	sp, sp, #28
 10841              		.cfi_def_cfa_offset 64
1063:src/int.c     **** 
 10842              		.loc 1 1063 6 view .LVU3093
 10843 0014 0027     		movs	r7, #0
1059:src/int.c     **** 	unsigned long long int r = 1;
 10844              		.loc 1 1059 100 view .LVU3094
 10845 0016 9C46     		mov	ip, r3
 10846              	.LBB1691:
 10847              	.LBB1688:
  45:src/int.c     **** 	return il;
 10848              		.loc 1 45 10 view .LVU3095
 10849 0018 3F2E     		cmp	r6, #63
 10850              	.LBE1688:
 10851              	.LBE1691:
1059:src/int.c     **** 	unsigned long long int r = 1;
 10852              		.loc 1 1059 100 view .LVU3096
 10853 001a 1446     		mov	r4, r2
1066:src/int.c     **** 		if (vx & 1) {
 10854              		.loc 1 1066 8 view .LVU3097
 10855 001c 3E46     		mov	r6, r7
1059:src/int.c     **** 	unsigned long long int r = 1;
 10856              		.loc 1 1059 100 view .LVU3098
 10857 001e 0246     		mov	r2, r0
 10858              	.LVL828:
1059:src/int.c     **** 	unsigned long long int r = 1;
 10859              		.loc 1 1059 100 view .LVU3099
 10860 0020 0B46     		mov	r3, r1
 10861 0022 6546     		mov	r5, ip
 10862              	.LBB1692:
 10863              	.LBB1689:
  45:src/int.c     **** 	return il;
 10864              		.loc 1 45 10 view .LVU3100
 10865 0024 28BF     		it	cs
 10866 0026 4FF04009 		movcs	r9, #64
 10867              	.LBE1689:
 10868              	.LBE1692:
1063:src/int.c     **** 
 10869              		.loc 1 1063 6 view .LVU3101
 10870 002a 0597     		str	r7, [sp, #20]
1065:src/int.c     **** 	for (i=0; i<ws && vx != 0; i++) {
 10871              		.loc 1 1065 2 is_stmt 1 view .LVU3102
 10872              	.LBB1693:
 10873              	.LBI1686:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 10874              		.loc 1 42 14 view .LVU3103
 10875              	.LBB1690:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 10876              		.loc 1 43 2 view .LVU3104
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10877              		.loc 1 44 2 view .LVU3105
 10878              	.LVL829:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 10879              		.loc 1 44 2 is_stmt 0 view .LVU3106
 10880              	.LBE1690:
 10881              	.LBE1693:
ARM GAS  /tmp/ccl34fCK.s 			page 269


1066:src/int.c     **** 		if (vx & 1) {
 10882              		.loc 1 1066 2 is_stmt 1 view .LVU3107
1066:src/int.c     **** 		if (vx & 1) {
 10883              		.loc 1 1066 12 view .LVU3108
1060:src/int.c     **** 	unsigned int i;
 10884              		.loc 1 1060 25 is_stmt 0 view .LVU3109
 10885 002c 4FF00108 		mov	r8, #1
 10886              	.LVL830:
 10887              	.L639:
1067:src/int.c     **** 			if (overflow_next)
 10888              		.loc 1 1067 3 is_stmt 1 discriminator 3 view .LVU3110
1068:src/int.c     **** 				overflow = 1;
 10889              		.loc 1 1068 4 discriminator 3 view .LVU3111
1070:src/int.c     **** 		}
 10890              		.loc 1 1070 4 discriminator 3 view .LVU3112
1066:src/int.c     **** 		if (vx & 1) {
 10891              		.loc 1 1066 17 is_stmt 0 discriminator 3 view .LVU3113
 10892 0030 54EA0501 		orrs	r1, r4, r5
1067:src/int.c     **** 			if (overflow_next)
 10893              		.loc 1 1067 10 discriminator 3 view .LVU3114
 10894 0034 04F0010A 		and	r10, r4, #1
1066:src/int.c     **** 		if (vx & 1) {
 10895              		.loc 1 1066 30 discriminator 3 view .LVU3115
 10896 0038 06F10106 		add	r6, r6, #1
 10897              	.LVL831:
1067:src/int.c     **** 			if (overflow_next)
 10898              		.loc 1 1067 10 discriminator 3 view .LVU3116
 10899 003c 4FF0000B 		mov	fp, #0
1066:src/int.c     **** 		if (vx & 1) {
 10900              		.loc 1 1066 17 discriminator 3 view .LVU3117
 10901 0040 25D0     		beq	.L642
1067:src/int.c     **** 			if (overflow_next)
 10902              		.loc 1 1067 6 view .LVU3118
 10903 0042 5AEA0B01 		orrs	r1, r10, fp
 10904 0046 0FD0     		beq	.L640
1069:src/int.c     **** 			r = multiply_with_overflow(r, vy, &overflow);
 10905              		.loc 1 1069 5 is_stmt 1 view .LVU3119
1068:src/int.c     **** 				overflow = 1;
 10906              		.loc 1 1068 7 is_stmt 0 view .LVU3120
 10907 0048 0599     		ldr	r1, [sp, #20]
 10908 004a 09B1     		cbz	r1, .L641
1069:src/int.c     **** 			r = multiply_with_overflow(r, vy, &overflow);
 10909              		.loc 1 1069 14 view .LVU3121
 10910 004c 0121     		movs	r1, #1
 10911 004e 1091     		str	r1, [sp, #64]
 10912              	.L641:
1070:src/int.c     **** 		}
 10913              		.loc 1 1070 8 view .LVU3122
 10914 0050 10A9     		add	r1, sp, #64
 10915 0052 0091     		str	r1, [sp]
 10916 0054 4046     		mov	r0, r8
 10917 0056 3946     		mov	r1, r7
 10918 0058 CDE90232 		strd	r3, r2, [sp, #8]
 10919 005c FFF7FEFF 		bl	multiply_with_overflow
 10920              	.LVL832:
1070:src/int.c     **** 		}
 10921              		.loc 1 1070 8 view .LVU3123
ARM GAS  /tmp/ccl34fCK.s 			page 270


 10922 0060 DDE90232 		ldrd	r3, r2, [sp, #8]
 10923 0064 8046     		mov	r8, r0
 10924              	.LVL833:
1070:src/int.c     **** 		}
 10925              		.loc 1 1070 8 view .LVU3124
 10926 0066 0F46     		mov	r7, r1
 10927              	.LVL834:
 10928              	.L640:
1072:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 10929              		.loc 1 1072 3 is_stmt 1 discriminator 2 view .LVU3125
1072:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 10930              		.loc 1 1072 6 is_stmt 0 discriminator 2 view .LVU3126
 10931 0068 4FEA540C 		lsr	ip, r4, #1
1073:src/int.c     **** 	}
 10932              		.loc 1 1073 8 discriminator 2 view .LVU3127
 10933 006c 05A9     		add	r1, sp, #20
1072:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 10934              		.loc 1 1072 6 discriminator 2 view .LVU3128
 10935 006e 4CEAC57C 		orr	ip, ip, r5, lsl #31
1073:src/int.c     **** 	}
 10936              		.loc 1 1073 8 discriminator 2 view .LVU3129
 10937 0072 0091     		str	r1, [sp]
1072:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 10938              		.loc 1 1072 6 discriminator 2 view .LVU3130
 10939 0074 4FEA550E 		lsr	lr, r5, #1
1073:src/int.c     **** 	}
 10940              		.loc 1 1073 8 discriminator 2 view .LVU3131
 10941 0078 1046     		mov	r0, r2
 10942 007a 1946     		mov	r1, r3
1072:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 10943              		.loc 1 1072 6 discriminator 2 view .LVU3132
 10944 007c 6446     		mov	r4, ip
 10945              	.LVL835:
1072:src/int.c     **** 		vy = multiply_with_overflow(vy, vy, &overflow_next);
 10946              		.loc 1 1072 6 discriminator 2 view .LVU3133
 10947 007e 7546     		mov	r5, lr
 10948              	.LVL836:
1073:src/int.c     **** 	}
 10949              		.loc 1 1073 3 is_stmt 1 discriminator 2 view .LVU3134
1073:src/int.c     **** 	}
 10950              		.loc 1 1073 8 is_stmt 0 discriminator 2 view .LVU3135
 10951 0080 FFF7FEFF 		bl	multiply_with_overflow
 10952              	.LVL837:
1066:src/int.c     **** 		if (vx & 1) {
 10953              		.loc 1 1066 2 discriminator 2 view .LVU3136
 10954 0084 4E45     		cmp	r6, r9
1073:src/int.c     **** 	}
 10955              		.loc 1 1073 8 discriminator 2 view .LVU3137
 10956 0086 0291     		str	r1, [sp, #8]
 10957 0088 0246     		mov	r2, r0
 10958 008a 0B46     		mov	r3, r1
 10959              	.LVL838:
1066:src/int.c     **** 		if (vx & 1) {
 10960              		.loc 1 1066 29 is_stmt 1 discriminator 2 view .LVU3138
1066:src/int.c     **** 		if (vx & 1) {
 10961              		.loc 1 1066 12 discriminator 2 view .LVU3139
1066:src/int.c     **** 		if (vx & 1) {
ARM GAS  /tmp/ccl34fCK.s 			page 271


 10962              		.loc 1 1066 2 is_stmt 0 discriminator 2 view .LVU3140
 10963 008c D0D1     		bne	.L639
 10964              	.LVL839:
 10965              	.L642:
1075:src/int.c     **** 	return r;
 10966              		.loc 1 1075 2 is_stmt 1 view .LVU3141
 10967              	.LBB1694:
 10968              	.LBI1694:
  66:src/int.c     **** #ifndef TINY_BUILD
 10969              		.loc 1 66 6 view .LVU3142
 10970              	.LBB1695:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 10971              		.loc 1 68 2 view .LVU3143
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 10972              		.loc 1 68 5 is_stmt 0 view .LVU3144
 10973 008e 109B     		ldr	r3, [sp, #64]
 10974 0090 33B1     		cbz	r3, .L644
 10975 0092 FFF7FEFF 		bl	set_overflow.part.0
 10976              	.LVL840:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 10977              		.loc 1 68 5 view .LVU3145
 10978              	.LBE1695:
 10979              	.LBE1694:
1076:src/int.c     **** }
 10980              		.loc 1 1076 2 is_stmt 1 view .LVU3146
1077:src/int.c     **** 
 10981              		.loc 1 1077 1 is_stmt 0 view .LVU3147
 10982 0096 4046     		mov	r0, r8
 10983 0098 3946     		mov	r1, r7
 10984 009a 07B0     		add	sp, sp, #28
 10985              		.cfi_remember_state
 10986              		.cfi_def_cfa_offset 36
 10987              		@ sp needed
 10988 009c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 10989              	.LVL841:
 10990              	.L644:
 10991              		.cfi_restore_state
 10992              	.LBB1697:
 10993              	.LBB1696:
  71:src/int.c     **** #endif
 10994              		.loc 1 71 3 is_stmt 1 view .LVU3148
 10995 00a0 5221     		movs	r1, #82
 10996 00a2 6920     		movs	r0, #105
 10997 00a4 FFF7FEFF 		bl	cmdflag
 10998              	.LVL842:
  71:src/int.c     **** #endif
 10999              		.loc 1 71 3 is_stmt 0 view .LVU3149
 11000              	.LBE1696:
 11001              	.LBE1697:
1076:src/int.c     **** }
 11002              		.loc 1 1076 2 is_stmt 1 view .LVU3150
1077:src/int.c     **** 
 11003              		.loc 1 1077 1 is_stmt 0 view .LVU3151
 11004 00a8 4046     		mov	r0, r8
 11005 00aa 3946     		mov	r1, r7
 11006 00ac 07B0     		add	sp, sp, #28
 11007              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccl34fCK.s 			page 272


 11008              		@ sp needed
 11009 00ae BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 11010              	.LVL843:
 11011              	.L654:
1077:src/int.c     **** 
 11012              		.loc 1 1077 1 view .LVU3152
 11013 00b2 00BF     		.align	2
 11014              	.L653:
 11015 00b4 00000000 		.word	PersistentRam
 11016              		.cfi_endproc
 11017              	.LFE56:
 11019              		.section	.text.intPower,"ax",%progbits
 11020              		.align	1
 11021              		.p2align 2,,3
 11022              		.global	intPower
 11023              		.syntax unified
 11024              		.thumb
 11025              		.thumb_func
 11026              		.fpu fpv4-sp-d16
 11028              	intPower:
 11029              	.LVL844:
 11030              	.LFB57:
1081:src/int.c     **** #ifndef TINY_BUILD
 11031              		.loc 1 1081 58 is_stmt 1 view -0
 11032              		.cfi_startproc
 11033              		@ args = 0, pretend = 0, frame = 8
 11034              		@ frame_needed = 0, uses_anonymous_args = 0
1083:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 11035              		.loc 1 1083 2 view .LVU3154
1084:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11036              		.loc 1 1084 2 view .LVU3155
1081:src/int.c     **** #ifndef TINY_BUILD
 11037              		.loc 1 1081 58 is_stmt 0 view .LVU3156
 11038 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11039              		.cfi_def_cfa_offset 24
 11040              		.cfi_offset 4, -24
 11041              		.cfi_offset 5, -20
 11042              		.cfi_offset 6, -16
 11043              		.cfi_offset 7, -12
 11044              		.cfi_offset 8, -8
 11045              		.cfi_offset 14, -4
 11046 0004 84B0     		sub	sp, sp, #16
 11047              		.cfi_def_cfa_offset 40
1081:src/int.c     **** #ifndef TINY_BUILD
 11048              		.loc 1 1081 58 view .LVU3157
 11049 0006 0546     		mov	r5, r0
 11050 0008 0C46     		mov	r4, r1
1084:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11051              		.loc 1 1084 30 view .LVU3158
 11052 000a 1046     		mov	r0, r2
 11053              	.LVL845:
1084:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11054              		.loc 1 1084 30 view .LVU3159
 11055 000c 1946     		mov	r1, r3
 11056 000e 02AA     		add	r2, sp, #8
 11057              	.LVL846:
1084:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
ARM GAS  /tmp/ccl34fCK.s 			page 273


 11058              		.loc 1 1084 30 view .LVU3160
 11059 0010 FFF7FEFF 		bl	extract_value
 11060              	.LVL847:
 11061 0014 0246     		mov	r2, r0
 11062 0016 0B46     		mov	r3, r1
1085:src/int.c     **** 
 11063              		.loc 1 1085 30 view .LVU3161
 11064 0018 2846     		mov	r0, r5
 11065 001a 2146     		mov	r1, r4
1084:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11066              		.loc 1 1084 30 view .LVU3162
 11067 001c 1646     		mov	r6, r2
1085:src/int.c     **** 
 11068              		.loc 1 1085 30 view .LVU3163
 11069 001e 03AA     		add	r2, sp, #12
1084:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 11070              		.loc 1 1084 30 view .LVU3164
 11071 0020 1F46     		mov	r7, r3
 11072              	.LVL848:
1085:src/int.c     **** 
 11073              		.loc 1 1085 2 is_stmt 1 view .LVU3165
1085:src/int.c     **** 
 11074              		.loc 1 1085 30 is_stmt 0 view .LVU3166
 11075 0022 FFF7FEFF 		bl	extract_value
 11076              	.LVL849:
1087:src/int.c     **** 		report_err(ERR_DOMAIN);
 11077              		.loc 1 1087 5 view .LVU3167
 11078 0026 56EA0703 		orrs	r3, r6, r7
1085:src/int.c     **** 
 11079              		.loc 1 1085 30 view .LVU3168
 11080 002a 0446     		mov	r4, r0
 11081 002c 0D46     		mov	r5, r1
 11082              	.LVL850:
1087:src/int.c     **** 		report_err(ERR_DOMAIN);
 11083              		.loc 1 1087 2 is_stmt 1 view .LVU3169
1087:src/int.c     **** 		report_err(ERR_DOMAIN);
 11084              		.loc 1 1087 5 is_stmt 0 view .LVU3170
 11085 002e 0FD1     		bne	.L656
1087:src/int.c     **** 		report_err(ERR_DOMAIN);
 11086              		.loc 1 1087 14 discriminator 1 view .LVU3171
 11087 0030 54EA0503 		orrs	r3, r4, r5
 11088 0034 35D0     		beq	.L668
1091:src/int.c     **** 	set_overflow(0);
 11089              		.loc 1 1091 2 is_stmt 1 view .LVU3172
 11090              	.LVL851:
 11091              	.LBB1698:
 11092              	.LBI1698:
  53:src/int.c     **** #ifndef TINY_BUILD
 11093              		.loc 1 53 6 view .LVU3173
 11094              	.LBB1699:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11095              		.loc 1 55 2 view .LVU3174
  58:src/int.c     **** #endif
 11096              		.loc 1 58 3 view .LVU3175
 11097 0036 5221     		movs	r1, #82
 11098 0038 6A20     		movs	r0, #106
 11099 003a FFF7FEFF 		bl	cmdflag
ARM GAS  /tmp/ccl34fCK.s 			page 274


 11100              	.LVL852:
  58:src/int.c     **** #endif
 11101              		.loc 1 58 3 is_stmt 0 view .LVU3176
 11102              	.LBE1699:
 11103              	.LBE1698:
1092:src/int.c     **** 
 11104              		.loc 1 1092 2 is_stmt 1 view .LVU3177
 11105              	.LBB1701:
 11106              	.LBI1701:
  66:src/int.c     **** #ifndef TINY_BUILD
 11107              		.loc 1 66 6 view .LVU3178
 11108              	.LBB1702:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11109              		.loc 1 68 2 view .LVU3179
  71:src/int.c     **** #endif
 11110              		.loc 1 71 3 view .LVU3180
 11111 003e 5221     		movs	r1, #82
 11112 0040 6920     		movs	r0, #105
 11113 0042 FFF7FEFF 		bl	cmdflag
 11114              	.LVL853:
  71:src/int.c     **** #endif
 11115              		.loc 1 71 3 is_stmt 0 view .LVU3181
 11116              	.LBE1702:
 11117              	.LBE1701:
1094:src/int.c     **** 		if (vy == 0) {
 11118              		.loc 1 1094 2 is_stmt 1 view .LVU3182
1099:src/int.c     **** 	} else if (vy == 0)
 11119              		.loc 1 1099 10 is_stmt 0 view .LVU3183
 11120 0046 0120     		movs	r0, #1
 11121 0048 0021     		movs	r1, #0
 11122              	.L655:
1114:src/int.c     **** 
 11123              		.loc 1 1114 1 view .LVU3184
 11124 004a 04B0     		add	sp, sp, #16
 11125              		.cfi_remember_state
 11126              		.cfi_def_cfa_offset 24
 11127              		@ sp needed
 11128 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11129              	.LVL854:
 11130              	.L656:
 11131              		.cfi_restore_state
1091:src/int.c     **** 	set_overflow(0);
 11132              		.loc 1 1091 2 is_stmt 1 view .LVU3185
 11133              	.LBB1704:
  53:src/int.c     **** #ifndef TINY_BUILD
 11134              		.loc 1 53 6 view .LVU3186
 11135              	.LBB1700:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11136              		.loc 1 55 2 view .LVU3187
  58:src/int.c     **** #endif
 11137              		.loc 1 58 3 view .LVU3188
 11138 0050 5221     		movs	r1, #82
 11139 0052 6A20     		movs	r0, #106
 11140 0054 FFF7FEFF 		bl	cmdflag
 11141              	.LVL855:
  58:src/int.c     **** #endif
 11142              		.loc 1 58 3 is_stmt 0 view .LVU3189
ARM GAS  /tmp/ccl34fCK.s 			page 275


 11143              	.LBE1700:
 11144              	.LBE1704:
1092:src/int.c     **** 
 11145              		.loc 1 1092 2 is_stmt 1 view .LVU3190
 11146              	.LBB1705:
  66:src/int.c     **** #ifndef TINY_BUILD
 11147              		.loc 1 66 6 view .LVU3191
 11148              	.LBB1703:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11149              		.loc 1 68 2 view .LVU3192
  71:src/int.c     **** #endif
 11150              		.loc 1 71 3 view .LVU3193
 11151 0058 5221     		movs	r1, #82
 11152 005a 6920     		movs	r0, #105
 11153 005c FFF7FEFF 		bl	cmdflag
 11154              	.LVL856:
  71:src/int.c     **** #endif
 11155              		.loc 1 71 3 is_stmt 0 view .LVU3194
 11156              	.LBE1703:
 11157              	.LBE1705:
1094:src/int.c     **** 		if (vy == 0) {
 11158              		.loc 1 1094 2 is_stmt 1 view .LVU3195
1100:src/int.c     **** 		return 0;
 11159              		.loc 1 1100 9 view .LVU3196
1100:src/int.c     **** 		return 0;
 11160              		.loc 1 1100 12 is_stmt 0 view .LVU3197
 11161 0060 54EA0503 		orrs	r3, r4, r5
 11162 0064 18D0     		beq	.L669
1103:src/int.c     **** 		set_carry(1);
 11163              		.loc 1 1103 2 is_stmt 1 view .LVU3198
1103:src/int.c     **** 		set_carry(1);
 11164              		.loc 1 1103 5 is_stmt 0 view .LVU3199
 11165 0066 029B     		ldr	r3, [sp, #8]
 11166 0068 1BBB     		cbnz	r3, .L670
1108:src/int.c     **** 
 11167              		.loc 1 1108 2 is_stmt 1 view .LVU3200
1108:src/int.c     **** 
 11168              		.loc 1 1108 8 is_stmt 0 view .LVU3201
 11169 006a DDF80C80 		ldr	r8, [sp, #12]
1108:src/int.c     **** 
 11170              		.loc 1 1108 25 view .LVU3202
 11171 006e B8F1000F 		cmp	r8, #0
 11172 0072 01D0     		beq	.L660
1108:src/int.c     **** 
 11173              		.loc 1 1108 18 discriminator 1 view .LVU3203
 11174 0074 06F00108 		and	r8, r6, #1
 11175              	.L660:
 11176              	.LVL857:
1110:src/int.c     **** #else
 11177              		.loc 1 1110 2 is_stmt 1 discriminator 6 view .LVU3204
1110:src/int.c     **** #else
 11178              		.loc 1 1110 21 is_stmt 0 discriminator 6 view .LVU3205
 11179 0078 4FF0000C 		mov	ip, #0
 11180 007c 3246     		mov	r2, r6
 11181 007e 3B46     		mov	r3, r7
 11182 0080 CDF800C0 		str	ip, [sp]
 11183 0084 2046     		mov	r0, r4
ARM GAS  /tmp/ccl34fCK.s 			page 276


 11184 0086 2946     		mov	r1, r5
 11185 0088 FFF7FEFF 		bl	int_power_helper
 11186              	.LVL858:
1110:src/int.c     **** #else
 11187              		.loc 1 1110 9 discriminator 6 view .LVU3206
 11188 008c 4246     		mov	r2, r8
 11189 008e FFF7FEFF 		bl	build_value
 11190              	.LVL859:
1114:src/int.c     **** 
 11191              		.loc 1 1114 1 discriminator 6 view .LVU3207
 11192 0092 04B0     		add	sp, sp, #16
 11193              		.cfi_remember_state
 11194              		.cfi_def_cfa_offset 24
 11195              		@ sp needed
 11196 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11197              	.LVL860:
 11198              	.L669:
 11199              		.cfi_restore_state
1101:src/int.c     **** 
 11200              		.loc 1 1101 10 view .LVU3208
 11201 0098 2046     		mov	r0, r4
 11202 009a 2946     		mov	r1, r5
1114:src/int.c     **** 
 11203              		.loc 1 1114 1 view .LVU3209
 11204 009c 04B0     		add	sp, sp, #16
 11205              		.cfi_remember_state
 11206              		.cfi_def_cfa_offset 24
 11207              		@ sp needed
 11208 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11209              	.LVL861:
 11210              	.L668:
 11211              		.cfi_restore_state
1088:src/int.c     **** 		return 0;
 11212              		.loc 1 1088 3 is_stmt 1 view .LVU3210
 11213 00a2 0120     		movs	r0, #1
 11214 00a4 FFF7FEFF 		bl	report_err
 11215              	.LVL862:
1089:src/int.c     **** 	}
 11216              		.loc 1 1089 3 view .LVU3211
1089:src/int.c     **** 	}
 11217              		.loc 1 1089 10 is_stmt 0 view .LVU3212
 11218 00a8 2046     		mov	r0, r4
 11219 00aa 2946     		mov	r1, r5
1114:src/int.c     **** 
 11220              		.loc 1 1114 1 view .LVU3213
 11221 00ac 04B0     		add	sp, sp, #16
 11222              		.cfi_remember_state
 11223              		.cfi_def_cfa_offset 24
 11224              		@ sp needed
 11225 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11226              	.LVL863:
 11227              	.L670:
 11228              		.cfi_restore_state
1104:src/int.c     **** 		return 0;
 11229              		.loc 1 1104 3 is_stmt 1 view .LVU3214
 11230              	.LBB1706:
 11231              	.LBI1706:
ARM GAS  /tmp/ccl34fCK.s 			page 277


  53:src/int.c     **** #ifndef TINY_BUILD
 11232              		.loc 1 53 6 view .LVU3215
 11233              	.LBB1707:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11234              		.loc 1 55 2 view .LVU3216
 11235 00b2 FFF7FEFF 		bl	set_carry.part.0
 11236              	.LVL864:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11237              		.loc 1 55 2 is_stmt 0 view .LVU3217
 11238              	.LBE1707:
 11239              	.LBE1706:
1105:src/int.c     **** 	}
 11240              		.loc 1 1105 3 is_stmt 1 view .LVU3218
1105:src/int.c     **** 	}
 11241              		.loc 1 1105 10 is_stmt 0 view .LVU3219
 11242 00b6 0020     		movs	r0, #0
 11243 00b8 0146     		mov	r1, r0
 11244 00ba C6E7     		b	.L655
 11245              		.cfi_endproc
 11246              	.LFE57:
 11248              		.section	.text.intLog2,"ax",%progbits
 11249              		.align	1
 11250              		.p2align 2,,3
 11251              		.global	intLog2
 11252              		.syntax unified
 11253              		.thumb
 11254              		.thumb_func
 11255              		.fpu fpv4-sp-d16
 11257              	intLog2:
 11258              	.LVL865:
 11259              	.LFB58:
1119:src/int.c     **** #ifndef TINY_BUILD
 11260              		.loc 1 1119 40 is_stmt 1 view -0
 11261              		.cfi_startproc
 11262              		@ args = 0, pretend = 0, frame = 8
 11263              		@ frame_needed = 0, uses_anonymous_args = 0
1121:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 11264              		.loc 1 1121 2 view .LVU3221
1122:src/int.c     **** 	unsigned int r = 0;
 11265              		.loc 1 1122 2 view .LVU3222
1119:src/int.c     **** #ifndef TINY_BUILD
 11266              		.loc 1 1119 40 is_stmt 0 view .LVU3223
 11267 0000 30B5     		push	{r4, r5, lr}
 11268              		.cfi_def_cfa_offset 12
 11269              		.cfi_offset 4, -12
 11270              		.cfi_offset 5, -8
 11271              		.cfi_offset 14, -4
 11272 0002 83B0     		sub	sp, sp, #12
 11273              		.cfi_def_cfa_offset 24
1122:src/int.c     **** 	unsigned int r = 0;
 11274              		.loc 1 1122 29 view .LVU3224
 11275 0004 01AA     		add	r2, sp, #4
 11276 0006 FFF7FEFF 		bl	extract_value
 11277              	.LVL866:
1122:src/int.c     **** 	unsigned int r = 0;
 11278              		.loc 1 1122 29 view .LVU3225
 11279 000a 0446     		mov	r4, r0
ARM GAS  /tmp/ccl34fCK.s 			page 278


 11280 000c 0D46     		mov	r5, r1
 11281              	.LVL867:
1123:src/int.c     **** 
 11282              		.loc 1 1123 2 is_stmt 1 view .LVU3226
1125:src/int.c     **** 		report_err(ERR_DOMAIN);
 11283              		.loc 1 1125 2 view .LVU3227
1125:src/int.c     **** 		report_err(ERR_DOMAIN);
 11284              		.loc 1 1125 5 is_stmt 0 view .LVU3228
 11285 000e 54EA0503 		orrs	r3, r4, r5
 11286 0012 2CD0     		beq	.L672
1125:src/int.c     **** 		report_err(ERR_DOMAIN);
 11287              		.loc 1 1125 13 discriminator 1 view .LVU3229
 11288 0014 019B     		ldr	r3, [sp, #4]
 11289 0016 53BB     		cbnz	r3, .L672
1129:src/int.c     **** 	if (v != 0)
 11290              		.loc 1 1129 2 is_stmt 1 view .LVU3230
 11291              	.LVL868:
 11292              	.LBB1708:
 11293              	.LBI1708:
  53:src/int.c     **** #ifndef TINY_BUILD
 11294              		.loc 1 53 6 view .LVU3231
 11295              	.LBB1709:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11296              		.loc 1 55 2 view .LVU3232
 11297              	.LBE1709:
 11298              	.LBE1708:
1129:src/int.c     **** 	if (v != 0)
 11299              		.loc 1 1129 19 is_stmt 0 view .LVU3233
 11300 0018 10F1FF31 		adds	r1, r0, #-1
1129:src/int.c     **** 	if (v != 0)
 11301              		.loc 1 1129 15 view .LVU3234
 11302 001c 01EA0402 		and	r2, r1, r4
1129:src/int.c     **** 	if (v != 0)
 11303              		.loc 1 1129 19 view .LVU3235
 11304 0020 45F1FF31 		adc	r1, r5, #-1
1129:src/int.c     **** 	if (v != 0)
 11305              		.loc 1 1129 15 view .LVU3236
 11306 0024 01EA0503 		and	r3, r1, r5
 11307              	.LBB1712:
 11308              	.LBB1710:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11309              		.loc 1 55 5 view .LVU3237
 11310 0028 1343     		orrs	r3, r2, r3
 11311 002a 1DD1     		bne	.L687
  58:src/int.c     **** #endif
 11312              		.loc 1 58 3 is_stmt 1 view .LVU3238
 11313 002c 5221     		movs	r1, #82
 11314 002e 6A20     		movs	r0, #106
 11315 0030 FFF7FEFF 		bl	cmdflag
 11316              	.LVL869:
 11317              	.L676:
  58:src/int.c     **** #endif
 11318              		.loc 1 58 3 is_stmt 0 view .LVU3239
 11319              	.LBE1710:
 11320              	.LBE1712:
1130:src/int.c     **** 		while (v >>= 1)
 11321              		.loc 1 1130 2 is_stmt 1 view .LVU3240
ARM GAS  /tmp/ccl34fCK.s 			page 279


1131:src/int.c     **** 			r++;
 11322              		.loc 1 1131 9 view .LVU3241
1131:src/int.c     **** 			r++;
 11323              		.loc 1 1131 12 is_stmt 0 view .LVU3242
 11324 0034 6008     		lsrs	r0, r4, #1
 11325 0036 40EAC570 		orr	r0, r0, r5, lsl #31
 11326 003a 6908     		lsrs	r1, r5, #1
 11327              	.LVL870:
1131:src/int.c     **** 			r++;
 11328              		.loc 1 1131 9 view .LVU3243
 11329 003c 50EA0103 		orrs	r3, r0, r1
 11330 0040 0DD0     		beq	.L677
1123:src/int.c     **** 
 11331              		.loc 1 1123 15 view .LVU3244
 11332 0042 0022     		movs	r2, #0
 11333              	.LVL871:
 11334              	.L678:
1132:src/int.c     **** 	return build_value(r, sx);
 11335              		.loc 1 1132 4 is_stmt 1 view .LVU3245
1131:src/int.c     **** 			r++;
 11336              		.loc 1 1131 12 is_stmt 0 view .LVU3246
 11337 0044 4308     		lsrs	r3, r0, #1
 11338 0046 43EAC173 		orr	r3, r3, r1, lsl #31
 11339 004a 4C08     		lsrs	r4, r1, #1
 11340 004c 1846     		mov	r0, r3
 11341              	.LVL872:
1131:src/int.c     **** 			r++;
 11342              		.loc 1 1131 12 view .LVU3247
 11343 004e 2146     		mov	r1, r4
1131:src/int.c     **** 			r++;
 11344              		.loc 1 1131 9 view .LVU3248
 11345 0050 50EA0103 		orrs	r3, r0, r1
1132:src/int.c     **** 	return build_value(r, sx);
 11346              		.loc 1 1132 5 view .LVU3249
 11347 0054 02F10102 		add	r2, r2, #1
 11348              	.LVL873:
1131:src/int.c     **** 			r++;
 11349              		.loc 1 1131 9 is_stmt 1 view .LVU3250
1131:src/int.c     **** 			r++;
 11350              		.loc 1 1131 9 is_stmt 0 view .LVU3251
 11351 0058 F4D1     		bne	.L678
 11352 005a 1046     		mov	r0, r2
 11353              	.LVL874:
1131:src/int.c     **** 			r++;
 11354              		.loc 1 1131 9 view .LVU3252
 11355 005c 0021     		movs	r1, #0
 11356              	.LVL875:
 11357              	.L677:
1133:src/int.c     **** #else
 11358              		.loc 1 1133 2 is_stmt 1 view .LVU3253
1133:src/int.c     **** #else
 11359              		.loc 1 1133 9 is_stmt 0 view .LVU3254
 11360 005e 019A     		ldr	r2, [sp, #4]
 11361 0060 FFF7FEFF 		bl	build_value
 11362              	.LVL876:
1137:src/int.c     **** 
 11363              		.loc 1 1137 1 view .LVU3255
ARM GAS  /tmp/ccl34fCK.s 			page 280


 11364 0064 03B0     		add	sp, sp, #12
 11365              		.cfi_remember_state
 11366              		.cfi_def_cfa_offset 12
 11367              		@ sp needed
 11368 0066 30BD     		pop	{r4, r5, pc}
 11369              	.LVL877:
 11370              	.L687:
 11371              		.cfi_restore_state
 11372              	.LBB1713:
 11373              	.LBB1711:
1137:src/int.c     **** 
 11374              		.loc 1 1137 1 view .LVU3256
 11375 0068 FFF7FEFF 		bl	set_carry.part.0
 11376              	.LVL878:
 11377 006c E2E7     		b	.L676
 11378              	.LVL879:
 11379              	.L672:
1137:src/int.c     **** 
 11380              		.loc 1 1137 1 view .LVU3257
 11381              	.LBE1711:
 11382              	.LBE1713:
1126:src/int.c     **** 		return 0;
 11383              		.loc 1 1126 3 is_stmt 1 view .LVU3258
 11384 006e 0120     		movs	r0, #1
 11385 0070 FFF7FEFF 		bl	report_err
 11386              	.LVL880:
1127:src/int.c     **** 	}
 11387              		.loc 1 1127 3 view .LVU3259
1127:src/int.c     **** 	}
 11388              		.loc 1 1127 10 is_stmt 0 view .LVU3260
 11389 0074 0020     		movs	r0, #0
 11390 0076 0146     		mov	r1, r0
1137:src/int.c     **** 
 11391              		.loc 1 1137 1 view .LVU3261
 11392 0078 03B0     		add	sp, sp, #12
 11393              		.cfi_def_cfa_offset 12
 11394              		@ sp needed
 11395 007a 30BD     		pop	{r4, r5, pc}
1137:src/int.c     **** 
 11396              		.loc 1 1137 1 view .LVU3262
 11397              		.cfi_endproc
 11398              	.LFE58:
 11400              		.section	.text.int2pow,"ax",%progbits
 11401              		.align	1
 11402              		.p2align 2,,3
 11403              		.global	int2pow
 11404              		.syntax unified
 11405              		.thumb
 11406              		.thumb_func
 11407              		.fpu fpv4-sp-d16
 11409              	int2pow:
 11410              	.LVL881:
 11411              	.LFB59:
1142:src/int.c     **** #ifndef TINY_BUILD
 11412              		.loc 1 1142 40 is_stmt 1 view -0
 11413              		.cfi_startproc
 11414              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccl34fCK.s 			page 281


 11415              		@ frame_needed = 0, uses_anonymous_args = 0
1144:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 11416              		.loc 1 1144 2 view .LVU3264
1145:src/int.c     **** 	unsigned int ws;
 11417              		.loc 1 1145 2 view .LVU3265
1142:src/int.c     **** #ifndef TINY_BUILD
 11418              		.loc 1 1142 40 is_stmt 0 view .LVU3266
 11419 0000 30B5     		push	{r4, r5, lr}
 11420              		.cfi_def_cfa_offset 12
 11421              		.cfi_offset 4, -12
 11422              		.cfi_offset 5, -8
 11423              		.cfi_offset 14, -4
 11424 0002 83B0     		sub	sp, sp, #12
 11425              		.cfi_def_cfa_offset 24
1145:src/int.c     **** 	unsigned int ws;
 11426              		.loc 1 1145 29 view .LVU3267
 11427 0004 01AA     		add	r2, sp, #4
 11428 0006 FFF7FEFF 		bl	extract_value
 11429              	.LVL882:
1145:src/int.c     **** 	unsigned int ws;
 11430              		.loc 1 1145 29 view .LVU3268
 11431 000a 0B46     		mov	r3, r1
 11432 000c 0446     		mov	r4, r0
 11433              	.LBB1714:
 11434              	.LBB1715:
  71:src/int.c     **** #endif
 11435              		.loc 1 71 3 view .LVU3269
 11436 000e 5221     		movs	r1, #82
 11437 0010 6920     		movs	r0, #105
 11438              	.LBE1715:
 11439              	.LBE1714:
1145:src/int.c     **** 	unsigned int ws;
 11440              		.loc 1 1145 29 view .LVU3270
 11441 0012 1D46     		mov	r5, r3
 11442              	.LVL883:
1146:src/int.c     **** 
 11443              		.loc 1 1146 2 is_stmt 1 view .LVU3271
1148:src/int.c     **** 	set_carry(sx && v == 1);
 11444              		.loc 1 1148 2 view .LVU3272
 11445              	.LBB1717:
 11446              	.LBI1714:
  66:src/int.c     **** #ifndef TINY_BUILD
 11447              		.loc 1 66 6 view .LVU3273
 11448              	.LBB1716:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11449              		.loc 1 68 2 view .LVU3274
  71:src/int.c     **** #endif
 11450              		.loc 1 71 3 view .LVU3275
 11451 0014 FFF7FEFF 		bl	cmdflag
 11452              	.LVL884:
  71:src/int.c     **** #endif
 11453              		.loc 1 71 3 is_stmt 0 view .LVU3276
 11454              	.LBE1716:
 11455              	.LBE1717:
1149:src/int.c     **** 	if (sx && v != 0)
 11456              		.loc 1 1149 2 is_stmt 1 view .LVU3277
 11457 0018 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccl34fCK.s 			page 282


 11458 001a 1BB1     		cbz	r3, .L689
1149:src/int.c     **** 	if (sx && v != 0)
 11459              		.loc 1 1149 2 is_stmt 0 discriminator 1 view .LVU3278
 11460 001c 002D     		cmp	r5, #0
 11461 001e 08BF     		it	eq
 11462 0020 012C     		cmpeq	r4, #1
 11463 0022 3ED0     		beq	.L711
 11464              	.L689:
 11465              	.LVL885:
 11466              	.LBB1718:
 11467              	.LBI1718:
  53:src/int.c     **** #ifndef TINY_BUILD
 11468              		.loc 1 53 6 is_stmt 1 view .LVU3279
 11469              	.LBB1719:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11470              		.loc 1 55 2 view .LVU3280
  58:src/int.c     **** #endif
 11471              		.loc 1 58 3 view .LVU3281
 11472 0024 5221     		movs	r1, #82
 11473 0026 6A20     		movs	r0, #106
 11474 0028 FFF7FEFF 		bl	cmdflag
 11475              	.LVL886:
  58:src/int.c     **** #endif
 11476              		.loc 1 58 3 is_stmt 0 view .LVU3282
 11477              	.LBE1719:
 11478              	.LBE1718:
1150:src/int.c     **** 		return 0;
 11479              		.loc 1 1150 2 is_stmt 1 view .LVU3283
1150:src/int.c     **** 		return 0;
 11480              		.loc 1 1150 5 is_stmt 0 view .LVU3284
 11481 002c 019B     		ldr	r3, [sp, #4]
 11482 002e 0BBB     		cbnz	r3, .L712
 11483              	.L694:
1153:src/int.c     **** 	if (int_mode() != MODE_UNSIGNED)
 11484              		.loc 1 1153 2 is_stmt 1 view .LVU3285
 11485              	.LBB1721:
 11486              	.LBI1721:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 11487              		.loc 1 42 14 view .LVU3286
 11488              	.LBB1722:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11489              		.loc 1 43 2 view .LVU3287
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11490              		.loc 1 43 26 is_stmt 0 view .LVU3288
 11491 0030 1F4B     		ldr	r3, .L716
 11492 0032 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 11493              	.LBE1722:
 11494              	.LBE1721:
 11495              	.LBB1725:
 11496              	.LBB1726:
  39:src/int.c     **** }
 11497              		.loc 1 39 39 view .LVU3289
 11498 0036 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11499              	.LBE1726:
 11500              	.LBE1725:
 11501              	.LBB1728:
 11502              	.LBB1723:
ARM GAS  /tmp/ccl34fCK.s 			page 283


  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11503              		.loc 1 43 15 view .LVU3290
 11504 003a 02F03F02 		and	r2, r2, #63
 11505              	.LVL887:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 11506              		.loc 1 44 2 is_stmt 1 view .LVU3291
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 11507              		.loc 1 44 26 is_stmt 0 view .LVU3292
 11508 003e 511E     		subs	r1, r2, #1
  45:src/int.c     **** 	return il;
 11509              		.loc 1 45 10 view .LVU3293
 11510 0040 3F29     		cmp	r1, #63
 11511              	.LBE1723:
 11512              	.LBE1728:
1154:src/int.c     **** 		ws--;
 11513              		.loc 1 1154 5 view .LVU3294
 11514 0042 C3F38103 		ubfx	r3, r3, #2, #2
 11515              	.LBB1729:
 11516              	.LBB1724:
  45:src/int.c     **** 	return il;
 11517              		.loc 1 45 10 view .LVU3295
 11518 0046 28BF     		it	cs
 11519 0048 4022     		movcs	r2, #64
 11520              	.LVL888:
  45:src/int.c     **** 	return il;
 11521              		.loc 1 45 10 view .LVU3296
 11522              	.LBE1724:
 11523              	.LBE1729:
1154:src/int.c     **** 		ws--;
 11524              		.loc 1 1154 2 is_stmt 1 view .LVU3297
 11525              	.LBB1730:
 11526              	.LBI1725:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 11527              		.loc 1 38 23 view .LVU3298
 11528              	.LBB1727:
  39:src/int.c     **** }
 11529              		.loc 1 39 2 view .LVU3299
 11530              	.LBE1727:
 11531              	.LBE1730:
1154:src/int.c     **** 		ws--;
 11532              		.loc 1 1154 5 is_stmt 0 view .LVU3300
 11533 004a 022B     		cmp	r3, #2
 11534 004c 00D0     		beq	.L695
1155:src/int.c     **** 	if (v >= ws) {
 11535              		.loc 1 1155 3 is_stmt 1 view .LVU3301
1155:src/int.c     **** 	if (v >= ws) {
 11536              		.loc 1 1155 5 is_stmt 0 view .LVU3302
 11537 004e 013A     		subs	r2, r2, #1
 11538              	.LVL889:
 11539              	.L695:
1156:src/int.c     **** 		set_carry(v == ws);
 11540              		.loc 1 1156 2 is_stmt 1 view .LVU3303
1156:src/int.c     **** 		set_carry(v == ws);
 11541              		.loc 1 1156 8 is_stmt 0 view .LVU3304
 11542 0050 0023     		movs	r3, #0
1156:src/int.c     **** 		set_carry(v == ws);
 11543              		.loc 1 1156 5 view .LVU3305
ARM GAS  /tmp/ccl34fCK.s 			page 284


 11544 0052 9D42     		cmp	r5, r3
 11545 0054 08BF     		it	eq
 11546 0056 9442     		cmpeq	r4, r2
 11547 0058 13D2     		bcs	.L713
1162:src/int.c     **** #else
 11548              		.loc 1 1162 2 is_stmt 1 view .LVU3306
1162:src/int.c     **** #else
 11549              		.loc 1 1162 13 is_stmt 0 view .LVU3307
 11550 005a 0120     		movs	r0, #1
 11551 005c A4F12001 		sub	r1, r4, #32
 11552 0060 C4F12003 		rsb	r3, r4, #32
 11553 0064 20FA03F3 		lsr	r3, r0, r3
 11554 0068 00FA01F1 		lsl	r1, r0, r1
 11555 006c 1943     		orrs	r1, r1, r3
 11556 006e A040     		lsls	r0, r0, r4
1166:src/int.c     **** 
 11557              		.loc 1 1166 1 view .LVU3308
 11558 0070 03B0     		add	sp, sp, #12
 11559              		.cfi_remember_state
 11560              		.cfi_def_cfa_offset 12
 11561              		@ sp needed
 11562 0072 30BD     		pop	{r4, r5, pc}
 11563              	.LVL890:
 11564              	.L712:
 11565              		.cfi_restore_state
1150:src/int.c     **** 		return 0;
 11566              		.loc 1 1150 9 discriminator 1 view .LVU3309
 11567 0074 54EA0503 		orrs	r3, r4, r5
 11568 0078 DAD0     		beq	.L694
 11569              	.L710:
1159:src/int.c     **** 	}
 11570              		.loc 1 1159 3 is_stmt 1 view .LVU3310
1159:src/int.c     **** 	}
 11571              		.loc 1 1159 10 is_stmt 0 view .LVU3311
 11572 007a 0020     		movs	r0, #0
 11573 007c 0146     		mov	r1, r0
 11574              	.L715:
1166:src/int.c     **** 
 11575              		.loc 1 1166 1 view .LVU3312
 11576 007e 03B0     		add	sp, sp, #12
 11577              		.cfi_remember_state
 11578              		.cfi_def_cfa_offset 12
 11579              		@ sp needed
 11580 0080 30BD     		pop	{r4, r5, pc}
 11581              	.LVL891:
 11582              	.L713:
 11583              		.cfi_restore_state
1157:src/int.c     **** 		set_overflow(1);
 11584              		.loc 1 1157 3 is_stmt 1 view .LVU3313
 11585              	.LBB1731:
 11586              	.LBI1731:
  53:src/int.c     **** #ifndef TINY_BUILD
 11587              		.loc 1 53 6 view .LVU3314
 11588              	.LBB1732:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11589              		.loc 1 55 2 view .LVU3315
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
ARM GAS  /tmp/ccl34fCK.s 			page 285


 11590              		.loc 1 55 5 is_stmt 0 view .LVU3316
 11591 0082 AB42     		cmp	r3, r5
 11592 0084 08BF     		it	eq
 11593 0086 A242     		cmpeq	r2, r4
 11594 0088 08D0     		beq	.L714
  58:src/int.c     **** #endif
 11595              		.loc 1 58 3 is_stmt 1 view .LVU3317
 11596 008a 5221     		movs	r1, #82
 11597 008c 6A20     		movs	r0, #106
 11598 008e FFF7FEFF 		bl	cmdflag
 11599              	.LVL892:
 11600              	.L698:
  58:src/int.c     **** #endif
 11601              		.loc 1 58 3 is_stmt 0 view .LVU3318
 11602              	.LBE1732:
 11603              	.LBE1731:
1158:src/int.c     **** 		return 0;
 11604              		.loc 1 1158 3 is_stmt 1 view .LVU3319
 11605              	.LBB1734:
 11606              	.LBI1734:
  66:src/int.c     **** #ifndef TINY_BUILD
 11607              		.loc 1 66 6 view .LVU3320
 11608              	.LBB1735:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11609              		.loc 1 68 2 view .LVU3321
 11610 0092 FFF7FEFF 		bl	set_overflow.part.0
 11611              	.LVL893:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 11612              		.loc 1 68 2 is_stmt 0 view .LVU3322
 11613              	.LBE1735:
 11614              	.LBE1734:
1159:src/int.c     **** 	}
 11615              		.loc 1 1159 3 is_stmt 1 view .LVU3323
1159:src/int.c     **** 	}
 11616              		.loc 1 1159 10 is_stmt 0 view .LVU3324
 11617 0096 0020     		movs	r0, #0
 11618 0098 0146     		mov	r1, r0
 11619 009a F0E7     		b	.L715
 11620              	.LVL894:
 11621              	.L714:
 11622              	.LBB1736:
 11623              	.LBB1733:
1159:src/int.c     **** 	}
 11624              		.loc 1 1159 10 view .LVU3325
 11625 009c FFF7FEFF 		bl	set_carry.part.0
 11626              	.LVL895:
1159:src/int.c     **** 	}
 11627              		.loc 1 1159 10 view .LVU3326
 11628 00a0 F7E7     		b	.L698
 11629              	.L711:
 11630              	.LVL896:
1159:src/int.c     **** 	}
 11631              		.loc 1 1159 10 view .LVU3327
 11632              	.LBE1733:
 11633              	.LBE1736:
 11634              	.LBB1737:
  53:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccl34fCK.s 			page 286


 11635              		.loc 1 53 6 is_stmt 1 view .LVU3328
 11636              	.LBB1720:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11637              		.loc 1 55 2 view .LVU3329
 11638 00a2 FFF7FEFF 		bl	set_carry.part.0
 11639              	.LVL897:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11640              		.loc 1 55 2 is_stmt 0 view .LVU3330
 11641              	.LBE1720:
 11642              	.LBE1737:
1150:src/int.c     **** 		return 0;
 11643              		.loc 1 1150 2 is_stmt 1 view .LVU3331
1150:src/int.c     **** 		return 0;
 11644              		.loc 1 1150 5 is_stmt 0 view .LVU3332
 11645 00a6 019B     		ldr	r3, [sp, #4]
 11646 00a8 002B     		cmp	r3, #0
 11647 00aa E6D1     		bne	.L710
 11648 00ac C0E7     		b	.L694
 11649              	.L717:
 11650 00ae 00BF     		.align	2
 11651              	.L716:
 11652 00b0 00000000 		.word	PersistentRam
 11653              		.cfi_endproc
 11654              	.LFE59:
 11656              		.section	.text.intLog10,"ax",%progbits
 11657              		.align	1
 11658              		.p2align 2,,3
 11659              		.global	intLog10
 11660              		.syntax unified
 11661              		.thumb
 11662              		.thumb_func
 11663              		.fpu fpv4-sp-d16
 11665              	intLog10:
 11666              	.LVL898:
 11667              	.LFB60:
1171:src/int.c     **** #ifndef TINY_BUILD
 11668              		.loc 1 1171 41 is_stmt 1 view -0
 11669              		.cfi_startproc
 11670              		@ args = 0, pretend = 0, frame = 8
 11671              		@ frame_needed = 0, uses_anonymous_args = 0
1173:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 11672              		.loc 1 1173 2 view .LVU3334
1174:src/int.c     **** 	int r = 0;
 11673              		.loc 1 1174 2 view .LVU3335
1171:src/int.c     **** #ifndef TINY_BUILD
 11674              		.loc 1 1171 41 is_stmt 0 view .LVU3336
 11675 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11676              		.cfi_def_cfa_offset 20
 11677              		.cfi_offset 4, -20
 11678              		.cfi_offset 5, -16
 11679              		.cfi_offset 6, -12
 11680              		.cfi_offset 7, -8
 11681              		.cfi_offset 14, -4
 11682 0002 83B0     		sub	sp, sp, #12
 11683              		.cfi_def_cfa_offset 32
1174:src/int.c     **** 	int r = 0;
 11684              		.loc 1 1174 29 view .LVU3337
ARM GAS  /tmp/ccl34fCK.s 			page 287


 11685 0004 01AA     		add	r2, sp, #4
 11686 0006 FFF7FEFF 		bl	extract_value
 11687              	.LVL899:
1174:src/int.c     **** 	int r = 0;
 11688              		.loc 1 1174 29 view .LVU3338
 11689 000a 0446     		mov	r4, r0
 11690 000c 0D46     		mov	r5, r1
 11691              	.LVL900:
1175:src/int.c     **** 	int c = 0;
 11692              		.loc 1 1175 2 is_stmt 1 view .LVU3339
1176:src/int.c     **** 
 11693              		.loc 1 1176 2 view .LVU3340
1178:src/int.c     **** 		report_err(ERR_DOMAIN);
 11694              		.loc 1 1178 2 view .LVU3341
1178:src/int.c     **** 		report_err(ERR_DOMAIN);
 11695              		.loc 1 1178 5 is_stmt 0 view .LVU3342
 11696 000e 54EA0503 		orrs	r3, r4, r5
 11697 0012 36D0     		beq	.L719
1178:src/int.c     **** 		report_err(ERR_DOMAIN);
 11698              		.loc 1 1178 13 discriminator 1 view .LVU3343
 11699 0014 019E     		ldr	r6, [sp, #4]
 11700 0016 A6BB     		cbnz	r6, .L719
1182:src/int.c     **** 		r++;
 11701              		.loc 1 1182 8 is_stmt 1 view .LVU3344
 11702 0018 0029     		cmp	r1, #0
 11703 001a 08BF     		it	eq
 11704 001c 0A28     		cmpeq	r0, #10
1176:src/int.c     **** 
 11705              		.loc 1 1176 6 is_stmt 0 view .LVU3345
 11706 001e 28BF     		it	cs
 11707 0020 3746     		movcs	r7, r6
1182:src/int.c     **** 		r++;
 11708              		.loc 1 1182 8 view .LVU3346
 11709 0022 06D2     		bcs	.L720
 11710 0024 0246     		mov	r2, r0
 11711 0026 0B46     		mov	r3, r1
 11712 0028 0026     		movs	r6, #0
 11713 002a 0027     		movs	r7, #0
 11714 002c 1CE0     		b	.L721
 11715              	.LVL901:
 11716              	.L728:
1186:src/int.c     **** 	}
 11717              		.loc 1 1186 5 view .LVU3347
 11718 002e 1446     		mov	r4, r2
 11719 0030 1D46     		mov	r5, r3
 11720              	.LVL902:
 11721              	.L720:
1183:src/int.c     **** 		if (v % 10)
 11722              		.loc 1 1183 3 is_stmt 1 view .LVU3348
1183:src/int.c     **** 		if (v % 10)
 11723              		.loc 1 1183 4 is_stmt 0 view .LVU3349
 11724 0032 0A22     		movs	r2, #10
 11725 0034 0023     		movs	r3, #0
 11726 0036 2046     		mov	r0, r4
 11727 0038 2946     		mov	r1, r5
 11728 003a FFF7FEFF 		bl	__aeabi_uldivmod
 11729              	.LVL903:
ARM GAS  /tmp/ccl34fCK.s 			page 288


1186:src/int.c     **** 	}
 11730              		.loc 1 1186 5 view .LVU3350
 11731 003e 2046     		mov	r0, r4
1185:src/int.c     **** 		v /= 10;
 11732              		.loc 1 1185 6 view .LVU3351
 11733 0040 1343     		orrs	r3, r2, r3
1186:src/int.c     **** 	}
 11734              		.loc 1 1186 5 view .LVU3352
 11735 0042 2946     		mov	r1, r5
 11736 0044 4FF00A02 		mov	r2, #10
 11737 0048 4FF00003 		mov	r3, #0
1185:src/int.c     **** 		v /= 10;
 11738              		.loc 1 1185 6 view .LVU3353
 11739 004c 18BF     		it	ne
 11740 004e 0127     		movne	r7, #1
 11741              	.LVL904:
1186:src/int.c     **** 	}
 11742              		.loc 1 1186 5 view .LVU3354
 11743 0050 FFF7FEFF 		bl	__aeabi_uldivmod
 11744              	.LVL905:
1182:src/int.c     **** 		r++;
 11745              		.loc 1 1182 8 view .LVU3355
 11746 0054 002D     		cmp	r5, #0
 11747 0056 08BF     		it	eq
 11748 0058 642C     		cmpeq	r4, #100
1186:src/int.c     **** 	}
 11749              		.loc 1 1186 5 view .LVU3356
 11750 005a 0246     		mov	r2, r0
1183:src/int.c     **** 		if (v % 10)
 11751              		.loc 1 1183 4 view .LVU3357
 11752 005c 06F10106 		add	r6, r6, #1
 11753              	.LVL906:
1184:src/int.c     **** 			c = 1;
 11754              		.loc 1 1184 3 is_stmt 1 view .LVU3358
1186:src/int.c     **** 	}
 11755              		.loc 1 1186 3 view .LVU3359
1186:src/int.c     **** 	}
 11756              		.loc 1 1186 5 is_stmt 0 view .LVU3360
 11757 0060 0B46     		mov	r3, r1
 11758              	.LVL907:
1182:src/int.c     **** 		r++;
 11759              		.loc 1 1182 8 is_stmt 1 view .LVU3361
 11760 0062 E4D2     		bcs	.L728
1188:src/int.c     **** 	return build_value(r, sx);
 11761              		.loc 1 1188 2 view .LVU3362
 11762 0064 A7B9     		cbnz	r7, .L724
 11763 0066 F717     		asrs	r7, r6, #31
 11764              	.LVL908:
 11765              	.L721:
1188:src/int.c     **** 	return build_value(r, sx);
 11766              		.loc 1 1188 2 is_stmt 0 discriminator 2 view .LVU3363
 11767 0068 002B     		cmp	r3, #0
 11768 006a 08BF     		it	eq
 11769 006c 012A     		cmpeq	r2, #1
 11770 006e 11D0     		beq	.L735
 11771              	.L725:
 11772              	.LBB1738:
ARM GAS  /tmp/ccl34fCK.s 			page 289


 11773              	.LBB1739:
 11774 0070 FFF7FEFF 		bl	set_carry.part.0
 11775              	.LVL909:
 11776              	.L726:
 11777              	.LBE1739:
 11778              	.LBE1738:
1189:src/int.c     **** #else
 11779              		.loc 1 1189 2 is_stmt 1 view .LVU3364
1189:src/int.c     **** #else
 11780              		.loc 1 1189 9 is_stmt 0 view .LVU3365
 11781 0074 019A     		ldr	r2, [sp, #4]
 11782 0076 3046     		mov	r0, r6
 11783 0078 3946     		mov	r1, r7
 11784 007a FFF7FEFF 		bl	build_value
 11785              	.LVL910:
1193:src/int.c     **** 
 11786              		.loc 1 1193 1 view .LVU3366
 11787 007e 03B0     		add	sp, sp, #12
 11788              		.cfi_remember_state
 11789              		.cfi_def_cfa_offset 20
 11790              		@ sp needed
 11791 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 11792              	.LVL911:
 11793              	.L719:
 11794              		.cfi_restore_state
1179:src/int.c     **** 		return 0;
 11795              		.loc 1 1179 3 is_stmt 1 view .LVU3367
 11796 0082 0120     		movs	r0, #1
 11797 0084 FFF7FEFF 		bl	report_err
 11798              	.LVL912:
1180:src/int.c     **** 	}
 11799              		.loc 1 1180 3 view .LVU3368
1180:src/int.c     **** 	}
 11800              		.loc 1 1180 10 is_stmt 0 view .LVU3369
 11801 0088 0020     		movs	r0, #0
 11802 008a 0146     		mov	r1, r0
1193:src/int.c     **** 
 11803              		.loc 1 1193 1 view .LVU3370
 11804 008c 03B0     		add	sp, sp, #12
 11805              		.cfi_remember_state
 11806              		.cfi_def_cfa_offset 20
 11807              		@ sp needed
 11808 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 11809              	.LVL913:
 11810              	.L724:
 11811              		.cfi_restore_state
1193:src/int.c     **** 
 11812              		.loc 1 1193 1 view .LVU3371
 11813 0090 F717     		asrs	r7, r6, #31
 11814              	.LVL914:
1193:src/int.c     **** 
 11815              		.loc 1 1193 1 view .LVU3372
 11816 0092 EDE7     		b	.L725
 11817              	.LVL915:
 11818              	.L735:
 11819              	.LBB1741:
 11820              	.LBI1738:
ARM GAS  /tmp/ccl34fCK.s 			page 290


  53:src/int.c     **** #ifndef TINY_BUILD
 11821              		.loc 1 53 6 is_stmt 1 view .LVU3373
 11822              	.LBB1740:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11823              		.loc 1 55 2 view .LVU3374
  58:src/int.c     **** #endif
 11824              		.loc 1 58 3 view .LVU3375
 11825 0094 5221     		movs	r1, #82
 11826 0096 6A20     		movs	r0, #106
 11827 0098 FFF7FEFF 		bl	cmdflag
 11828              	.LVL916:
 11829 009c EAE7     		b	.L726
 11830              	.LBE1740:
 11831              	.LBE1741:
 11832              		.cfi_endproc
 11833              	.LFE60:
 11835 009e 00BF     		.section	.text.int10pow,"ax",%progbits
 11836              		.align	1
 11837              		.p2align 2,,3
 11838              		.global	int10pow
 11839              		.syntax unified
 11840              		.thumb
 11841              		.thumb_func
 11842              		.fpu fpv4-sp-d16
 11844              	int10pow:
 11845              	.LVL917:
 11846              	.LFB61:
1198:src/int.c     **** 	int sx;
 11847              		.loc 1 1198 41 view -0
 11848              		.cfi_startproc
 11849              		@ args = 0, pretend = 0, frame = 8
 11850              		@ frame_needed = 0, uses_anonymous_args = 0
1199:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 11851              		.loc 1 1199 2 view .LVU3377
1200:src/int.c     **** 	const unsigned int ws = word_size();
 11852              		.loc 1 1200 2 view .LVU3378
1198:src/int.c     **** 	int sx;
 11853              		.loc 1 1198 41 is_stmt 0 view .LVU3379
 11854 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11855              		.cfi_def_cfa_offset 28
 11856              		.cfi_offset 4, -28
 11857              		.cfi_offset 5, -24
 11858              		.cfi_offset 6, -20
 11859              		.cfi_offset 7, -16
 11860              		.cfi_offset 8, -12
 11861              		.cfi_offset 9, -8
 11862              		.cfi_offset 14, -4
 11863              	.LBB1742:
 11864              	.LBB1743:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11865              		.loc 1 43 26 view .LVU3380
 11866 0004 DFF8BC90 		ldr	r9, .L749
 11867              	.LBE1743:
 11868              	.LBE1742:
1198:src/int.c     **** 	int sx;
 11869              		.loc 1 1198 41 view .LVU3381
 11870 0008 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccl34fCK.s 			page 291


 11871              		.cfi_def_cfa_offset 48
1200:src/int.c     **** 	const unsigned int ws = word_size();
 11872              		.loc 1 1200 30 view .LVU3382
 11873 000a 03AA     		add	r2, sp, #12
1198:src/int.c     **** 	int sx;
 11874              		.loc 1 1198 41 view .LVU3383
 11875 000c 8046     		mov	r8, r0
 11876 000e 0D46     		mov	r5, r1
1200:src/int.c     **** 	const unsigned int ws = word_size();
 11877              		.loc 1 1200 30 view .LVU3384
 11878 0010 FFF7FEFF 		bl	extract_value
 11879              	.LVL918:
 11880              	.LBB1747:
 11881              	.LBB1744:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11882              		.loc 1 43 26 view .LVU3385
 11883 0014 99F8E947 		ldrb	r4, [r9, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11884              		.loc 1 43 15 view .LVU3386
 11885 0018 04F03F04 		and	r4, r4, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 11886              		.loc 1 44 26 view .LVU3387
 11887 001c 631E     		subs	r3, r4, #1
  45:src/int.c     **** 	return il;
 11888              		.loc 1 45 10 view .LVU3388
 11889 001e 3F2B     		cmp	r3, #63
 11890              	.LBE1744:
 11891              	.LBE1747:
1200:src/int.c     **** 	const unsigned int ws = word_size();
 11892              		.loc 1 1200 30 view .LVU3389
 11893 0020 0646     		mov	r6, r0
 11894 0022 0F46     		mov	r7, r1
 11895              	.LVL919:
1201:src/int.c     **** 	int overflow = 0;
 11896              		.loc 1 1201 2 is_stmt 1 view .LVU3390
 11897              	.LBB1748:
 11898              	.LBI1742:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 11899              		.loc 1 42 14 view .LVU3391
 11900              	.LBB1745:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11901              		.loc 1 43 2 view .LVU3392
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 11902              		.loc 1 44 2 view .LVU3393
 11903              	.LBE1745:
 11904              	.LBE1748:
 11905              	.LBB1749:
 11906              	.LBB1750:
  58:src/int.c     **** #endif
 11907              		.loc 1 58 3 is_stmt 0 view .LVU3394
 11908 0024 4FF06A00 		mov	r0, #106
 11909 0028 4FF05201 		mov	r1, #82
 11910              	.LBE1750:
 11911              	.LBE1749:
 11912              	.LBB1752:
 11913              	.LBB1746:
  45:src/int.c     **** 	return il;
ARM GAS  /tmp/ccl34fCK.s 			page 292


 11914              		.loc 1 45 10 view .LVU3395
 11915 002c 28BF     		it	cs
 11916 002e 4024     		movcs	r4, #64
 11917              	.LVL920:
  45:src/int.c     **** 	return il;
 11918              		.loc 1 45 10 view .LVU3396
 11919              	.LBE1746:
 11920              	.LBE1752:
1202:src/int.c     **** 	
 11921              		.loc 1 1202 2 is_stmt 1 view .LVU3397
1204:src/int.c     **** 	if (vx == 0) {
 11922              		.loc 1 1204 2 view .LVU3398
 11923              	.LBB1753:
 11924              	.LBI1749:
  53:src/int.c     **** #ifndef TINY_BUILD
 11925              		.loc 1 53 6 view .LVU3399
 11926              	.LBB1751:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 11927              		.loc 1 55 2 view .LVU3400
  58:src/int.c     **** #endif
 11928              		.loc 1 58 3 view .LVU3401
 11929 0030 FFF7FEFF 		bl	cmdflag
 11930              	.LVL921:
  58:src/int.c     **** #endif
 11931              		.loc 1 58 3 is_stmt 0 view .LVU3402
 11932              	.LBE1751:
 11933              	.LBE1753:
1205:src/int.c     **** 		set_overflow(0);
 11934              		.loc 1 1205 2 is_stmt 1 view .LVU3403
1205:src/int.c     **** 		set_overflow(0);
 11935              		.loc 1 1205 5 is_stmt 0 view .LVU3404
 11936 0034 56EA0703 		orrs	r3, r6, r7
 11937 0038 33D0     		beq	.L747
1209:src/int.c     **** 		set_carry(1);
 11938              		.loc 1 1209 2 is_stmt 1 view .LVU3405
1209:src/int.c     **** 		set_carry(1);
 11939              		.loc 1 1209 6 is_stmt 0 view .LVU3406
 11940 003a 039B     		ldr	r3, [sp, #12]
1209:src/int.c     **** 		set_carry(1);
 11941              		.loc 1 1209 5 view .LVU3407
 11942 003c D3BB     		cbnz	r3, .L748
1214:src/int.c     **** 		overflow = 1;
 11943              		.loc 1 1214 2 is_stmt 1 view .LVU3408
1214:src/int.c     **** 		overflow = 1;
 11944              		.loc 1 1214 5 is_stmt 0 view .LVU3409
 11945 003e 032C     		cmp	r4, #3
 11946 0040 2DD9     		bls	.L742
 11947              	.LBB1754:
 11948              	.LBI1754:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 11949              		.loc 1 38 23 is_stmt 1 view .LVU3410
 11950              	.LBB1755:
  39:src/int.c     **** }
 11951              		.loc 1 39 2 view .LVU3411
  39:src/int.c     **** }
 11952              		.loc 1 39 39 is_stmt 0 view .LVU3412
 11953 0042 99F8E827 		ldrb	r2, [r9, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/ccl34fCK.s 			page 293


 11954              	.LBE1755:
 11955              	.LBE1754:
1214:src/int.c     **** 		overflow = 1;
 11956              		.loc 1 1214 14 view .LVU3413
 11957 0046 C2F38102 		ubfx	r2, r2, #2, #2
 11958 004a 022A     		cmp	r2, #2
 11959 004c 04D0     		beq	.L741
1214:src/int.c     **** 		overflow = 1;
 11960              		.loc 1 1214 46 discriminator 2 view .LVU3414
 11961 004e A4F10403 		sub	r3, r4, #4
 11962 0052 B3FA83F3 		clz	r3, r3
 11963 0056 5B09     		lsrs	r3, r3, #5
 11964              	.L741:
 11965              	.LVL922:
1216:src/int.c     **** }
 11966              		.loc 1 1216 2 is_stmt 1 view .LVU3415
1216:src/int.c     **** }
 11967              		.loc 1 1216 21 is_stmt 0 view .LVU3416
 11968 0058 0093     		str	r3, [sp]
 11969 005a 4246     		mov	r2, r8
 11970 005c 2B46     		mov	r3, r5
 11971              	.LVL923:
1216:src/int.c     **** }
 11972              		.loc 1 1216 21 view .LVU3417
 11973 005e 0A20     		movs	r0, #10
 11974 0060 0021     		movs	r1, #0
 11975 0062 FFF7FEFF 		bl	int_power_helper
 11976              	.LVL924:
 11977              	.LBB1756:
 11978              	.LBB1757:
 11979              	.LBB1758:
 11980              	.LBB1759:
 11981              	.LBB1760:
 11982              	.LBB1761:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11983              		.loc 1 43 26 view .LVU3418
 11984 0066 99F8E937 		ldrb	r3, [r9, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 11985              		.loc 1 43 15 view .LVU3419
 11986 006a 03F03F02 		and	r2, r3, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 11987              		.loc 1 44 26 view .LVU3420
 11988 006e 531E     		subs	r3, r2, #1
 11989              	.LVL925:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 11990              		.loc 1 44 26 view .LVU3421
 11991              	.LBE1761:
 11992              	.LBE1760:
 11993              	.LBE1759:
 11994              	.LBE1758:
 11995              	.LBE1757:
 11996              	.LBI1756:
 146:src/int.c     **** #ifndef TINY_BUILD
 11997              		.loc 1 146 15 is_stmt 1 view .LVU3422
 11998              	.LBB1766:
 148:src/int.c     **** 	long long int v = mask_value(x);
 11999              		.loc 1 148 2 view .LVU3423
ARM GAS  /tmp/ccl34fCK.s 			page 294


 12000              	.LBE1766:
 12001              	.LBE1756:
  39:src/int.c     **** }
 12002              		.loc 1 39 2 view .LVU3424
 12003              	.LBB1768:
 12004              	.LBB1767:
 149:src/int.c     **** 
 12005              		.loc 1 149 2 view .LVU3425
 12006              	.LBB1765:
 12007              	.LBI1758:
  91:src/int.c     **** #ifndef TINY_BUILD
 12008              		.loc 1 91 15 view .LVU3426
 12009              	.LBB1764:
  93:src/int.c     **** 	long long int mask;
 12010              		.loc 1 93 2 view .LVU3427
 12011              	.LBB1763:
 12012              	.LBI1760:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 12013              		.loc 1 42 14 view .LVU3428
 12014              	.LBB1762:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12015              		.loc 1 43 2 view .LVU3429
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12016              		.loc 1 44 2 view .LVU3430
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12017              		.loc 1 44 5 is_stmt 0 view .LVU3431
 12018 0070 3E2B     		cmp	r3, #62
 12019 0072 11D8     		bhi	.L736
 12020              	.LVL926:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12021              		.loc 1 44 5 view .LVU3432
 12022              	.LBE1762:
 12023              	.LBE1763:
  94:src/int.c     **** 
 12024              		.loc 1 94 2 is_stmt 1 view .LVU3433
  96:src/int.c     **** 		return v;
 12025              		.loc 1 96 2 view .LVU3434
  98:src/int.c     **** 	return v & mask;
 12026              		.loc 1 98 2 view .LVU3435
  99:src/int.c     **** #else
 12027              		.loc 1 99 2 view .LVU3436
  98:src/int.c     **** 	return v & mask;
 12028              		.loc 1 98 14 is_stmt 0 view .LVU3437
 12029 0074 0123     		movs	r3, #1
 12030 0076 A2F12004 		sub	r4, r2, #32
 12031              	.LVL927:
  98:src/int.c     **** 	return v & mask;
 12032              		.loc 1 98 14 view .LVU3438
 12033 007a C2F12005 		rsb	r5, r2, #32
 12034 007e 03FA04F4 		lsl	r4, r3, r4
 12035 0082 23FA05F5 		lsr	r5, r3, r5
 12036 0086 9340     		lsls	r3, r3, r2
  98:src/int.c     **** 	return v & mask;
 12037              		.loc 1 98 7 view .LVU3439
 12038 0088 13F1FF33 		adds	r3, r3, #-1
  98:src/int.c     **** 	return v & mask;
 12039              		.loc 1 98 14 view .LVU3440
ARM GAS  /tmp/ccl34fCK.s 			page 295


 12040 008c 44EA0504 		orr	r4, r4, r5
  98:src/int.c     **** 	return v & mask;
 12041              		.loc 1 98 7 view .LVU3441
 12042 0090 44F1FF34 		adc	r4, r4, #-1
  99:src/int.c     **** #else
 12043              		.loc 1 99 11 view .LVU3442
 12044 0094 2140     		ands	r1, r1, r4
 12045              	.LVL928:
  99:src/int.c     **** #else
 12046              		.loc 1 99 11 view .LVU3443
 12047 0096 1840     		ands	r0, r0, r3
 12048              	.L736:
 12049              	.LBE1764:
 12050              	.LBE1765:
 12051              	.LBE1767:
 12052              	.LBE1768:
1217:src/int.c     **** 
 12053              		.loc 1 1217 1 view .LVU3444
 12054 0098 05B0     		add	sp, sp, #20
 12055              		.cfi_remember_state
 12056              		.cfi_def_cfa_offset 28
 12057              		@ sp needed
 12058 009a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 12059              	.LVL929:
 12060              	.L742:
 12061              		.cfi_restore_state
1215:src/int.c     **** 	return build_value(int_power_helper(10, x, overflow), 0);
 12062              		.loc 1 1215 12 view .LVU3445
 12063 009e 0123     		movs	r3, #1
 12064 00a0 DAE7     		b	.L741
 12065              	.L747:
1206:src/int.c     **** 		return 1;
 12066              		.loc 1 1206 3 is_stmt 1 view .LVU3446
 12067              	.LVL930:
 12068              	.LBB1769:
 12069              	.LBI1769:
  66:src/int.c     **** #ifndef TINY_BUILD
 12070              		.loc 1 66 6 view .LVU3447
 12071              	.LBB1770:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12072              		.loc 1 68 2 view .LVU3448
  71:src/int.c     **** #endif
 12073              		.loc 1 71 3 view .LVU3449
 12074 00a2 5221     		movs	r1, #82
 12075 00a4 6920     		movs	r0, #105
 12076 00a6 FFF7FEFF 		bl	cmdflag
 12077              	.LVL931:
  71:src/int.c     **** #endif
 12078              		.loc 1 71 3 is_stmt 0 view .LVU3450
 12079              	.LBE1770:
 12080              	.LBE1769:
1207:src/int.c     **** 	}
 12081              		.loc 1 1207 3 is_stmt 1 view .LVU3451
1207:src/int.c     **** 	}
 12082              		.loc 1 1207 10 is_stmt 0 view .LVU3452
 12083 00aa 0120     		movs	r0, #1
 12084 00ac 0021     		movs	r1, #0
ARM GAS  /tmp/ccl34fCK.s 			page 296


1217:src/int.c     **** 
 12085              		.loc 1 1217 1 view .LVU3453
 12086 00ae 05B0     		add	sp, sp, #20
 12087              		.cfi_remember_state
 12088              		.cfi_def_cfa_offset 28
 12089              		@ sp needed
 12090 00b0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 12091              	.LVL932:
 12092              	.L748:
 12093              		.cfi_restore_state
1210:src/int.c     **** 		return 0;
 12094              		.loc 1 1210 3 is_stmt 1 view .LVU3454
 12095              	.LBB1771:
 12096              	.LBI1771:
  53:src/int.c     **** #ifndef TINY_BUILD
 12097              		.loc 1 53 6 view .LVU3455
 12098              	.LBB1772:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12099              		.loc 1 55 2 view .LVU3456
 12100 00b4 FFF7FEFF 		bl	set_carry.part.0
 12101              	.LVL933:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12102              		.loc 1 55 2 is_stmt 0 view .LVU3457
 12103              	.LBE1772:
 12104              	.LBE1771:
1211:src/int.c     **** 	}
 12105              		.loc 1 1211 3 is_stmt 1 view .LVU3458
1211:src/int.c     **** 	}
 12106              		.loc 1 1211 10 is_stmt 0 view .LVU3459
 12107 00b8 0020     		movs	r0, #0
 12108 00ba 0146     		mov	r1, r0
1217:src/int.c     **** 
 12109              		.loc 1 1217 1 view .LVU3460
 12110 00bc 05B0     		add	sp, sp, #20
 12111              		.cfi_def_cfa_offset 28
 12112              		@ sp needed
 12113 00be BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 12114              	.LVL934:
 12115              	.L750:
1217:src/int.c     **** 
 12116              		.loc 1 1217 1 view .LVU3461
 12117 00c2 00BF     		.align	2
 12118              	.L749:
 12119 00c4 00000000 		.word	PersistentRam
 12120              		.cfi_endproc
 12121              	.LFE61:
 12123              		.section	.text.int_1pow,"ax",%progbits
 12124              		.align	1
 12125              		.p2align 2,,3
 12126              		.global	int_1pow
 12127              		.syntax unified
 12128              		.thumb
 12129              		.thumb_func
 12130              		.fpu fpv4-sp-d16
 12132              	int_1pow:
 12133              	.LVL935:
 12134              	.LFB62:
ARM GAS  /tmp/ccl34fCK.s 			page 297


1222:src/int.c     **** #ifndef TINY_BUILD
 12135              		.loc 1 1222 41 is_stmt 1 view -0
 12136              		.cfi_startproc
 12137              		@ args = 0, pretend = 0, frame = 8
 12138              		@ frame_needed = 0, uses_anonymous_args = 0
1224:src/int.c     **** 	unsigned long long int xv = extract_value(x, &sx);
 12139              		.loc 1 1224 2 view .LVU3463
1225:src/int.c     **** 	int odd = xv & 1;
 12140              		.loc 1 1225 2 view .LVU3464
1222:src/int.c     **** #ifndef TINY_BUILD
 12141              		.loc 1 1222 41 is_stmt 0 view .LVU3465
 12142 0000 10B5     		push	{r4, lr}
 12143              		.cfi_def_cfa_offset 8
 12144              		.cfi_offset 4, -8
 12145              		.cfi_offset 14, -4
 12146 0002 82B0     		sub	sp, sp, #8
 12147              		.cfi_def_cfa_offset 16
1225:src/int.c     **** 	int odd = xv & 1;
 12148              		.loc 1 1225 30 view .LVU3466
 12149 0004 01AA     		add	r2, sp, #4
 12150 0006 FFF7FEFF 		bl	extract_value
 12151              	.LVL936:
1226:src/int.c     **** 
 12152              		.loc 1 1226 2 is_stmt 1 view .LVU3467
 12153              	.LBB1773:
 12154              	.LBB1774:
  39:src/int.c     **** }
 12155              		.loc 1 39 39 is_stmt 0 view .LVU3468
 12156 000a 0C4B     		ldr	r3, .L759
 12157 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12158              	.LBE1774:
 12159              	.LBE1773:
1228:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12160              		.loc 1 1228 2 view .LVU3469
 12161 0010 C3F38103 		ubfx	r3, r3, #2, #2
 12162 0014 022B     		cmp	r3, #2
1226:src/int.c     **** 
 12163              		.loc 1 1226 6 view .LVU3470
 12164 0016 00F00104 		and	r4, r0, #1
 12165              	.LVL937:
1228:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12166              		.loc 1 1228 2 is_stmt 1 view .LVU3471
 12167              	.LBB1776:
 12168              	.LBI1773:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 12169              		.loc 1 38 23 view .LVU3472
 12170              	.LBB1775:
  39:src/int.c     **** }
 12171              		.loc 1 39 2 view .LVU3473
 12172              	.LBE1775:
 12173              	.LBE1776:
1228:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12174              		.loc 1 1228 2 is_stmt 0 view .LVU3474
 12175 001a 00D1     		bne	.L752
1228:src/int.c     **** 	return build_value((unsigned long long int)1, odd);
 12176              		.loc 1 1228 2 discriminator 1 view .LVU3475
 12177 001c 54B9     		cbnz	r4, .L758
ARM GAS  /tmp/ccl34fCK.s 			page 298


 12178              	.L752:
 12179              	.LVL938:
 12180              	.LBB1777:
 12181              	.LBI1777:
  66:src/int.c     **** #ifndef TINY_BUILD
 12182              		.loc 1 66 6 is_stmt 1 view .LVU3476
 12183              	.LBB1778:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12184              		.loc 1 68 2 view .LVU3477
  71:src/int.c     **** #endif
 12185              		.loc 1 71 3 view .LVU3478
 12186 001e 5221     		movs	r1, #82
 12187              	.LVL939:
  71:src/int.c     **** #endif
 12188              		.loc 1 71 3 is_stmt 0 view .LVU3479
 12189 0020 6920     		movs	r0, #105
  71:src/int.c     **** #endif
 12190              		.loc 1 71 3 view .LVU3480
 12191 0022 FFF7FEFF 		bl	cmdflag
 12192              	.LVL940:
 12193              	.L753:
  71:src/int.c     **** #endif
 12194              		.loc 1 71 3 view .LVU3481
 12195              	.LBE1778:
 12196              	.LBE1777:
1229:src/int.c     **** #else
 12197              		.loc 1 1229 2 is_stmt 1 view .LVU3482
1229:src/int.c     **** #else
 12198              		.loc 1 1229 9 is_stmt 0 view .LVU3483
 12199 0026 2246     		mov	r2, r4
 12200 0028 0120     		movs	r0, #1
 12201 002a 0021     		movs	r1, #0
 12202 002c FFF7FEFF 		bl	build_value
 12203              	.LVL941:
1233:src/int.c     **** 
 12204              		.loc 1 1233 1 view .LVU3484
 12205 0030 02B0     		add	sp, sp, #8
 12206              		.cfi_remember_state
 12207              		.cfi_def_cfa_offset 8
 12208              		@ sp needed
 12209 0032 10BD     		pop	{r4, pc}
 12210              	.LVL942:
 12211              	.L758:
 12212              		.cfi_restore_state
 12213              	.LBB1780:
  66:src/int.c     **** #ifndef TINY_BUILD
 12214              		.loc 1 66 6 is_stmt 1 view .LVU3485
 12215              	.LBB1779:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12216              		.loc 1 68 2 view .LVU3486
 12217 0034 FFF7FEFF 		bl	set_overflow.part.0
 12218              	.LVL943:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12219              		.loc 1 68 2 is_stmt 0 view .LVU3487
 12220 0038 F5E7     		b	.L753
 12221              	.L760:
 12222 003a 00BF     		.align	2
ARM GAS  /tmp/ccl34fCK.s 			page 299


 12223              	.L759:
 12224 003c 00000000 		.word	PersistentRam
 12225              	.LBE1779:
 12226              	.LBE1780:
 12227              		.cfi_endproc
 12228              	.LFE62:
 12230              		.section	.text.intMirror,"ax",%progbits
 12231              		.align	1
 12232              		.p2align 2,,3
 12233              		.global	intMirror
 12234              		.syntax unified
 12235              		.thumb
 12236              		.thumb_func
 12237              		.fpu fpv4-sp-d16
 12239              	intMirror:
 12240              	.LVL944:
 12241              	.LFB63:
1238:src/int.c     **** #ifndef TINY_BUILD
 12242              		.loc 1 1238 42 is_stmt 1 view -0
 12243              		.cfi_startproc
 12244              		@ args = 0, pretend = 0, frame = 8
 12245              		@ frame_needed = 0, uses_anonymous_args = 0
1240:src/int.c     **** 	unsigned int n = word_size();
 12246              		.loc 1 1240 2 view .LVU3489
1241:src/int.c     **** 	unsigned int i;
 12247              		.loc 1 1241 2 view .LVU3490
 12248              	.LBB1781:
 12249              	.LBI1781:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 12250              		.loc 1 42 14 view .LVU3491
 12251              	.LBB1782:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12252              		.loc 1 43 2 view .LVU3492
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12253              		.loc 1 43 26 is_stmt 0 view .LVU3493
 12254 0000 244B     		ldr	r3, .L773
 12255 0002 93F8E9C7 		ldrb	ip, [r3, #2025]	@ zero_extendqisi2
 12256              	.LBE1782:
 12257              	.LBE1781:
1238:src/int.c     **** #ifndef TINY_BUILD
 12258              		.loc 1 1238 42 view .LVU3494
 12259 0006 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12260              		.cfi_def_cfa_offset 36
 12261              		.cfi_offset 4, -36
 12262              		.cfi_offset 5, -32
 12263              		.cfi_offset 6, -28
 12264              		.cfi_offset 7, -24
 12265              		.cfi_offset 8, -20
 12266              		.cfi_offset 9, -16
 12267              		.cfi_offset 10, -12
 12268              		.cfi_offset 11, -8
 12269              		.cfi_offset 14, -4
 12270              	.LBB1785:
 12271              	.LBB1783:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12272              		.loc 1 43 15 view .LVU3495
 12273 000a 0CF03F0C 		and	ip, ip, #63
ARM GAS  /tmp/ccl34fCK.s 			page 300


 12274              	.LVL945:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12275              		.loc 1 44 2 is_stmt 1 view .LVU3496
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12276              		.loc 1 44 26 is_stmt 0 view .LVU3497
 12277 000e 0CF1FF33 		add	r3, ip, #-1
  45:src/int.c     **** 	return il;
 12278              		.loc 1 45 10 view .LVU3498
 12279 0012 3F2B     		cmp	r3, #63
 12280              	.LBE1783:
 12281              	.LBE1785:
1238:src/int.c     **** #ifndef TINY_BUILD
 12282              		.loc 1 1238 42 view .LVU3499
 12283 0014 8046     		mov	r8, r0
 12284 0016 8946     		mov	r9, r1
 12285              	.LBB1786:
 12286              	.LBB1784:
  45:src/int.c     **** 	return il;
 12287              		.loc 1 45 10 view .LVU3500
 12288 0018 28BF     		it	cs
 12289 001a 4FF0400C 		movcs	ip, #64
 12290              	.LVL946:
  45:src/int.c     **** 	return il;
 12291              		.loc 1 45 10 view .LVU3501
 12292              	.LBE1784:
 12293              	.LBE1786:
1242:src/int.c     **** 
 12294              		.loc 1 1242 2 is_stmt 1 view .LVU3502
1244:src/int.c     **** 		return 0;
 12295              		.loc 1 1244 2 view .LVU3503
1244:src/int.c     **** 		return 0;
 12296              		.loc 1 1244 5 is_stmt 0 view .LVU3504
 12297 001e 58EA0903 		orrs	r3, r8, r9
1238:src/int.c     **** #ifndef TINY_BUILD
 12298              		.loc 1 1238 42 view .LVU3505
 12299 0022 83B0     		sub	sp, sp, #12
 12300              		.cfi_def_cfa_offset 48
1244:src/int.c     **** 		return 0;
 12301              		.loc 1 1244 5 view .LVU3506
 12302 0024 31D0     		beq	.L767
1247:src/int.c     **** 		if (x & (1LL << i))
 12303              		.loc 1 1247 8 view .LVU3507
 12304 0026 0023     		movs	r3, #0
1249:src/int.c     **** 	return r;
 12305              		.loc 1 1249 13 view .LVU3508
 12306 0028 0CF1FF32 		add	r2, ip, #-1
1240:src/int.c     **** 	unsigned int n = word_size();
 12307              		.loc 1 1240 16 view .LVU3509
 12308 002c 1846     		mov	r0, r3
 12309              	.LVL947:
1240:src/int.c     **** 	unsigned int n = word_size();
 12310              		.loc 1 1240 16 view .LVU3510
 12311 002e 1946     		mov	r1, r3
1248:src/int.c     **** 			r |= 1LL << (n-i-1);
 12312              		.loc 1 1248 7 view .LVU3511
 12313 0030 4FF0010E 		mov	lr, #1
1249:src/int.c     **** 	return r;
ARM GAS  /tmp/ccl34fCK.s 			page 301


 12314              		.loc 1 1249 13 view .LVU3512
 12315 0034 0192     		str	r2, [sp, #4]
 12316              	.LVL948:
 12317              	.L766:
1248:src/int.c     **** 			r |= 1LL << (n-i-1);
 12318              		.loc 1 1248 3 is_stmt 1 view .LVU3513
1249:src/int.c     **** 	return r;
 12319              		.loc 1 1249 4 view .LVU3514
1249:src/int.c     **** 	return r;
 12320              		.loc 1 1249 13 is_stmt 0 view .LVU3515
 12321 0036 019A     		ldr	r2, [sp, #4]
1248:src/int.c     **** 			r |= 1LL << (n-i-1);
 12322              		.loc 1 1248 7 view .LVU3516
 12323 0038 C3F12005 		rsb	r5, r3, #32
1249:src/int.c     **** 	return r;
 12324              		.loc 1 1249 13 view .LVU3517
 12325 003c D41A     		subs	r4, r2, r3
1248:src/int.c     **** 			r |= 1LL << (n-i-1);
 12326              		.loc 1 1248 7 view .LVU3518
 12327 003e 09FA05F5 		lsl	r5, r9, r5
 12328 0042 28FA03F2 		lsr	r2, r8, r3
 12329 0046 2A43     		orrs	r2, r2, r5
 12330 0048 B3F12005 		subs	r5, r3, #32
 12331 004c 5CBF     		itt	pl
 12332 004e 49FA05F5 		asrpl	r5, r9, r5
 12333 0052 2A43     		orrpl	r2, r2, r5
 12334 0054 02F0010A 		and	r10, r2, #1
 12335 0058 4FF0000B 		mov	fp, #0
1248:src/int.c     **** 			r |= 1LL << (n-i-1);
 12336              		.loc 1 1248 6 view .LVU3519
 12337 005c 5AEA0B02 		orrs	r2, r10, fp
1249:src/int.c     **** 	return r;
 12338              		.loc 1 1249 13 view .LVU3520
 12339 0060 A4F12006 		sub	r6, r4, #32
 12340 0064 C4F12007 		rsb	r7, r4, #32
1247:src/int.c     **** 		if (x & (1LL << i))
 12341              		.loc 1 1247 18 view .LVU3521
 12342 0068 03F10103 		add	r3, r3, #1
 12343              	.LVL949:
1248:src/int.c     **** 			r |= 1LL << (n-i-1);
 12344              		.loc 1 1248 6 view .LVU3522
 12345 006c 08D0     		beq	.L764
1249:src/int.c     **** 	return r;
 12346              		.loc 1 1249 13 view .LVU3523
 12347 006e 0EFA06F6 		lsl	r6, lr, r6
 12348 0072 2EFA07F7 		lsr	r7, lr, r7
 12349 0076 3E43     		orrs	r6, r6, r7
 12350 0078 0EFA04F4 		lsl	r4, lr, r4
1249:src/int.c     **** 	return r;
 12351              		.loc 1 1249 6 view .LVU3524
 12352 007c 3143     		orrs	r1, r1, r6
 12353              	.LVL950:
1249:src/int.c     **** 	return r;
 12354              		.loc 1 1249 6 view .LVU3525
 12355 007e 2043     		orrs	r0, r0, r4
 12356              	.LVL951:
 12357              	.L764:
ARM GAS  /tmp/ccl34fCK.s 			page 302


1247:src/int.c     **** 		if (x & (1LL << i))
 12358              		.loc 1 1247 17 is_stmt 1 discriminator 2 view .LVU3526
1247:src/int.c     **** 		if (x & (1LL << i))
 12359              		.loc 1 1247 12 discriminator 2 view .LVU3527
1247:src/int.c     **** 		if (x & (1LL << i))
 12360              		.loc 1 1247 2 is_stmt 0 discriminator 2 view .LVU3528
 12361 0080 6345     		cmp	r3, ip
 12362 0082 D8D1     		bne	.L766
1254:src/int.c     **** 
 12363              		.loc 1 1254 1 view .LVU3529
 12364 0084 03B0     		add	sp, sp, #12
 12365              		.cfi_remember_state
 12366              		.cfi_def_cfa_offset 36
 12367              		@ sp needed
 12368 0086 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 12369              	.LVL952:
 12370              	.L767:
 12371              		.cfi_restore_state
1245:src/int.c     **** 
 12372              		.loc 1 1245 10 view .LVU3530
 12373 008a 0020     		movs	r0, #0
 12374              	.LVL953:
1245:src/int.c     **** 
 12375              		.loc 1 1245 10 view .LVU3531
 12376 008c 0146     		mov	r1, r0
1254:src/int.c     **** 
 12377              		.loc 1 1254 1 view .LVU3532
 12378 008e 03B0     		add	sp, sp, #12
 12379              		.cfi_def_cfa_offset 36
 12380              		@ sp needed
 12381 0090 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 12382              	.L774:
 12383              		.align	2
 12384              	.L773:
 12385 0094 00000000 		.word	PersistentRam
 12386              		.cfi_endproc
 12387              	.LFE63:
 12389              		.section	.text.int_justify,"ax",%progbits
 12390              		.align	1
 12391              		.p2align 2,,3
 12392              		.global	int_justify
 12393              		.syntax unified
 12394              		.thumb
 12395              		.thumb_func
 12396              		.fpu fpv4-sp-d16
 12398              	int_justify:
 12399              	.LVL954:
 12400              	.LFB65:
1278:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
 12401              		.loc 1 1278 33 is_stmt 1 view -0
 12402              		.cfi_startproc
 12403              		@ args = 0, pretend = 0, frame = 8
 12404              		@ frame_needed = 0, uses_anonymous_args = 0
1279:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
 12405              		.loc 1 1279 2 view .LVU3534
1278:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
 12406              		.loc 1 1278 33 is_stmt 0 view .LVU3535
ARM GAS  /tmp/ccl34fCK.s 			page 303


 12407 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12408              		.cfi_def_cfa_offset 36
 12409              		.cfi_offset 4, -36
 12410              		.cfi_offset 5, -32
 12411              		.cfi_offset 6, -28
 12412              		.cfi_offset 7, -24
 12413              		.cfi_offset 8, -20
 12414              		.cfi_offset 9, -16
 12415              		.cfi_offset 10, -12
 12416              		.cfi_offset 11, -8
 12417              		.cfi_offset 14, -4
1279:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
 12418              		.loc 1 1279 68 view .LVU3536
 12419 0004 6028     		cmp	r0, #96
1278:src/int.c     **** 	const unsigned long long int mask = (op == OP_LJ) ? topbit_mask() : 1LL;
 12420              		.loc 1 1278 33 view .LVU3537
 12421 0006 83B0     		sub	sp, sp, #12
 12422              		.cfi_def_cfa_offset 48
1279:src/int.c     **** 	justify((op == OP_LJ) ? &intLSL : &intLSR, mask);
 12423              		.loc 1 1279 68 view .LVU3538
 12424 0008 15D0     		beq	.L794
1280:src/int.c     **** }
 12425              		.loc 1 1280 2 view .LVU3539
 12426 000a DFF8F8A0 		ldr	r10, .L798+4
 12427 000e 0127     		movs	r7, #1
 12428 0010 0026     		movs	r6, #0
 12429              	.L776:
 12430              	.LVL955:
 12431              	.LBB1806:
 12432              	.LBI1806:
1259:src/int.c     **** 	unsigned int c = 0;
 12433              		.loc 1 1259 13 is_stmt 1 discriminator 4 view .LVU3540
 12434              	.LBB1807:
1260:src/int.c     **** 	long long int v;
 12435              		.loc 1 1260 2 discriminator 4 view .LVU3541
1261:src/int.c     **** 
 12436              		.loc 1 1261 2 discriminator 4 view .LVU3542
1263:src/int.c     **** 	setlastX();
 12437              		.loc 1 1263 2 discriminator 4 view .LVU3543
1263:src/int.c     **** 	setlastX();
 12438              		.loc 1 1263 6 is_stmt 0 discriminator 4 view .LVU3544
 12439 0012 FFF7FEFF 		bl	getX_int
 12440              	.LVL956:
1263:src/int.c     **** 	setlastX();
 12441              		.loc 1 1263 6 discriminator 4 view .LVU3545
 12442 0016 0446     		mov	r4, r0
 12443 0018 0D46     		mov	r5, r1
 12444              	.LVL957:
1264:src/int.c     **** 	lift();
 12445              		.loc 1 1264 2 is_stmt 1 discriminator 4 view .LVU3546
 12446 001a FFF7FEFF 		bl	setlastX
 12447              	.LVL958:
1265:src/int.c     **** 	if (v != 0) {
 12448              		.loc 1 1265 2 discriminator 4 view .LVU3547
 12449 001e FFF7FEFF 		bl	lift
 12450              	.LVL959:
1266:src/int.c     **** 		const int flags = save_flags();
ARM GAS  /tmp/ccl34fCK.s 			page 304


 12451              		.loc 1 1266 2 discriminator 4 view .LVU3548
1266:src/int.c     **** 		const int flags = save_flags();
 12452              		.loc 1 1266 5 is_stmt 0 discriminator 4 view .LVU3549
 12453 0022 54EA0503 		orrs	r3, r4, r5
 12454 0026 1BD1     		bne	.L795
 12455              	.LVL960:
1275:src/int.c     **** }
 12456              		.loc 1 1275 2 is_stmt 1 view .LVU3550
 12457 0028 2046     		mov	r0, r4
 12458 002a 2946     		mov	r1, r5
 12459              	.LBE1807:
 12460              	.LBE1806:
1281:src/int.c     **** 
 12461              		.loc 1 1281 1 is_stmt 0 view .LVU3551
 12462 002c 03B0     		add	sp, sp, #12
 12463              		.cfi_remember_state
 12464              		.cfi_def_cfa_offset 36
 12465              		@ sp needed
 12466 002e BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12467              		.cfi_restore 14
 12468              		.cfi_restore 11
 12469              		.cfi_restore 10
 12470              		.cfi_restore 9
 12471              		.cfi_restore 8
 12472              		.cfi_restore 7
 12473              		.cfi_restore 6
 12474              		.cfi_restore 5
 12475              		.cfi_restore 4
 12476              		.cfi_def_cfa_offset 0
 12477              	.LVL961:
 12478              	.LBB1839:
 12479              	.LBB1835:
1275:src/int.c     **** }
 12480              		.loc 1 1275 2 view .LVU3552
 12481 0032 FFF7FEBF 		b	setX_int
 12482              	.LVL962:
 12483              	.L794:
 12484              		.cfi_restore_state
1275:src/int.c     **** }
 12485              		.loc 1 1275 2 view .LVU3553
 12486              	.LBE1835:
 12487              	.LBE1839:
 12488              	.LBB1840:
 12489              	.LBI1840:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 12490              		.loc 1 109 22 is_stmt 1 view .LVU3554
 12491              	.LBB1841:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 12492              		.loc 1 110 2 view .LVU3555
 12493              	.LBB1842:
 12494              	.LBI1842:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 12495              		.loc 1 42 14 view .LVU3556
 12496              	.LBB1843:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12497              		.loc 1 43 2 view .LVU3557
  44:src/int.c     **** 		return MAX_WORD_SIZE;
ARM GAS  /tmp/ccl34fCK.s 			page 305


 12498              		.loc 1 44 2 view .LVU3558
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12499              		.loc 1 43 26 is_stmt 0 view .LVU3559
 12500 0036 324B     		ldr	r3, .L798
 12501 0038 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12502              		.loc 1 43 15 view .LVU3560
 12503 003c 06F03F06 		and	r6, r6, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12504              		.loc 1 44 26 view .LVU3561
 12505 0040 731E     		subs	r3, r6, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12506              		.loc 1 44 5 view .LVU3562
 12507 0042 3E2B     		cmp	r3, #62
 12508 0044 52D8     		bhi	.L786
 12509 0046 0127     		movs	r7, #1
 12510 0048 213E     		subs	r6, r6, #33
 12511 004a C3F12002 		rsb	r2, r3, #32
 12512 004e 07FA06F6 		lsl	r6, r7, r6
 12513 0052 27FA02F2 		lsr	r2, r7, r2
 12514 0056 1643     		orrs	r6, r6, r2
 12515 0058 9F40     		lsls	r7, r7, r3
 12516              	.L777:
 12517              	.LVL963:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12518              		.loc 1 44 5 view .LVU3563
 12519              	.LBE1843:
 12520              	.LBE1842:
 111:src/int.c     **** 	return bit;
 12521              		.loc 1 111 2 is_stmt 1 view .LVU3564
 112:src/int.c     **** }
 12522              		.loc 1 112 2 view .LVU3565
 112:src/int.c     **** }
 12523              		.loc 1 112 2 is_stmt 0 view .LVU3566
 12524              	.LBE1841:
 12525              	.LBE1840:
1280:src/int.c     **** }
 12526              		.loc 1 1280 2 is_stmt 1 view .LVU3567
 12527 005a DFF8ACA0 		ldr	r10, .L798+8
 12528 005e D8E7     		b	.L776
 12529              	.LVL964:
 12530              	.L795:
 12531              	.LBB1847:
 12532              	.LBB1836:
 12533              	.LBB1808:
1267:src/int.c     **** 		while ((v & mask) == 0) {
 12534              		.loc 1 1267 3 view .LVU3568
 12535              	.LBB1809:
 12536              	.LBI1809:
  79:src/int.c     **** 	return (get_overflow() << 1) | get_carry();
 12537              		.loc 1 79 12 view .LVU3569
 12538              	.LBB1810:
  80:src/int.c     **** }
 12539              		.loc 1 80 2 view .LVU3570
 12540              	.LBB1811:
 12541              	.LBI1811:
  62:src/int.c     **** 	return get_user_flag(OVERFLOW_FLAG);
ARM GAS  /tmp/ccl34fCK.s 			page 306


 12542              		.loc 1 62 5 view .LVU3571
 12543              	.LBB1812:
  63:src/int.c     **** }
 12544              		.loc 1 63 2 view .LVU3572
  63:src/int.c     **** }
 12545              		.loc 1 63 9 is_stmt 0 view .LVU3573
 12546 0060 6920     		movs	r0, #105
 12547 0062 FFF7FEFF 		bl	get_user_flag
 12548              	.LVL965:
 12549 0066 8346     		mov	fp, r0
 12550              	.LBE1812:
 12551              	.LBE1811:
 12552              	.LBB1813:
 12553              	.LBB1814:
  50:src/int.c     **** }
 12554              		.loc 1 50 9 view .LVU3574
 12555 0068 6A20     		movs	r0, #106
 12556              	.LBE1814:
 12557              	.LBI1813:
  49:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 12558              		.loc 1 49 5 is_stmt 1 view .LVU3575
 12559              	.LBB1815:
  50:src/int.c     **** }
 12560              		.loc 1 50 2 view .LVU3576
  50:src/int.c     **** }
 12561              		.loc 1 50 9 is_stmt 0 view .LVU3577
 12562 006a FFF7FEFF 		bl	get_user_flag
 12563              	.LVL966:
 12564              	.LBE1815:
 12565              	.LBE1813:
 12566              	.LBE1810:
 12567              	.LBE1809:
1268:src/int.c     **** 			v = (*shift)(v);
 12568              		.loc 1 1268 13 view .LVU3578
 12569 006e 04EA0702 		and	r2, r4, r7
 12570 0072 05EA0603 		and	r3, r5, r6
 12571              	.LBB1818:
 12572              	.LBB1816:
  80:src/int.c     **** }
 12573              		.loc 1 80 31 view .LVU3579
 12574 0076 40EA4B01 		orr	r1, r0, fp, lsl #1
 12575              	.LBE1816:
 12576              	.LBE1818:
1268:src/int.c     **** 			v = (*shift)(v);
 12577              		.loc 1 1268 9 view .LVU3580
 12578 007a 1343     		orrs	r3, r2, r3
 12579              	.LBB1819:
 12580              	.LBB1817:
  80:src/int.c     **** }
 12581              		.loc 1 80 31 view .LVU3581
 12582 007c 0191     		str	r1, [sp, #4]
 12583              	.LVL967:
  80:src/int.c     **** }
 12584              		.loc 1 80 31 view .LVU3582
 12585              	.LBE1817:
 12586              	.LBE1819:
1268:src/int.c     **** 			v = (*shift)(v);
ARM GAS  /tmp/ccl34fCK.s 			page 307


 12587              		.loc 1 1268 3 is_stmt 1 view .LVU3583
1268:src/int.c     **** 			v = (*shift)(v);
 12588              		.loc 1 1268 9 view .LVU3584
 12589 007e 39D1     		bne	.L787
 12590              	.LBE1808:
1260:src/int.c     **** 	long long int v;
 12591              		.loc 1 1260 15 is_stmt 0 view .LVU3585
 12592 0080 4FF0000B 		mov	fp, #0
 12593              	.LVL968:
 12594              	.L780:
 12595              	.LBB1832:
1269:src/int.c     **** 			c++;
 12596              		.loc 1 1269 4 is_stmt 1 view .LVU3586
1269:src/int.c     **** 			c++;
 12597              		.loc 1 1269 9 is_stmt 0 view .LVU3587
 12598 0084 2046     		mov	r0, r4
 12599 0086 2946     		mov	r1, r5
 12600 0088 D047     		blx	r10
 12601              	.LVL969:
1268:src/int.c     **** 			v = (*shift)(v);
 12602              		.loc 1 1268 13 view .LVU3588
 12603 008a 00EA0708 		and	r8, r0, r7
 12604 008e 01EA0609 		and	r9, r1, r6
1268:src/int.c     **** 			v = (*shift)(v);
 12605              		.loc 1 1268 9 view .LVU3589
 12606 0092 58EA0903 		orrs	r3, r8, r9
1269:src/int.c     **** 			c++;
 12607              		.loc 1 1269 9 view .LVU3590
 12608 0096 0446     		mov	r4, r0
 12609              	.LVL970:
1269:src/int.c     **** 			c++;
 12610              		.loc 1 1269 9 view .LVU3591
 12611 0098 0D46     		mov	r5, r1
 12612              	.LVL971:
1270:src/int.c     **** 		}
 12613              		.loc 1 1270 4 is_stmt 1 view .LVU3592
1270:src/int.c     **** 		}
 12614              		.loc 1 1270 5 is_stmt 0 view .LVU3593
 12615 009a 0BF1010B 		add	fp, fp, #1
 12616              	.LVL972:
1268:src/int.c     **** 			v = (*shift)(v);
 12617              		.loc 1 1268 9 is_stmt 1 view .LVU3594
 12618 009e F1D0     		beq	.L780
1269:src/int.c     **** 			c++;
 12619              		.loc 1 1269 9 is_stmt 0 view .LVU3595
 12620 00a0 0746     		mov	r7, r0
 12621 00a2 0E46     		mov	r6, r1
1268:src/int.c     **** 			v = (*shift)(v);
 12622              		.loc 1 1268 9 view .LVU3596
 12623 00a4 5C46     		mov	r4, fp
 12624              	.LVL973:
1268:src/int.c     **** 			v = (*shift)(v);
 12625              		.loc 1 1268 9 view .LVU3597
 12626 00a6 0025     		movs	r5, #0
 12627              	.LVL974:
 12628              	.L779:
1272:src/int.c     **** 		set_reg_n_int(regY_idx, v);
ARM GAS  /tmp/ccl34fCK.s 			page 308


 12629              		.loc 1 1272 3 is_stmt 1 view .LVU3598
 12630              	.LBB1820:
 12631              	.LBI1820:
  83:src/int.c     **** 	set_carry(co & 1);
 12632              		.loc 1 83 13 view .LVU3599
 12633              	.LBB1821:
  84:src/int.c     **** 	set_overflow(co & 2);
 12634              		.loc 1 84 2 view .LVU3600
 12635              	.LBB1822:
 12636              	.LBI1822:
  53:src/int.c     **** #ifndef TINY_BUILD
 12637              		.loc 1 53 6 view .LVU3601
 12638              	.LBB1823:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12639              		.loc 1 55 2 view .LVU3602
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12640              		.loc 1 55 5 is_stmt 0 view .LVU3603
 12641 00a8 019B     		ldr	r3, [sp, #4]
 12642 00aa DA07     		lsls	r2, r3, #31
 12643 00ac 14D4     		bmi	.L796
  58:src/int.c     **** #endif
 12644              		.loc 1 58 3 is_stmt 1 view .LVU3604
 12645 00ae 5221     		movs	r1, #82
 12646 00b0 6A20     		movs	r0, #106
 12647 00b2 FFF7FEFF 		bl	cmdflag
 12648              	.LVL975:
  58:src/int.c     **** #endif
 12649              		.loc 1 58 3 is_stmt 0 view .LVU3605
 12650              	.LBE1823:
 12651              	.LBE1822:
  85:src/int.c     **** }
 12652              		.loc 1 85 2 is_stmt 1 view .LVU3606
 12653              	.LBB1825:
 12654              	.LBI1825:
  66:src/int.c     **** #ifndef TINY_BUILD
 12655              		.loc 1 66 6 view .LVU3607
 12656              	.LBB1826:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12657              		.loc 1 68 2 view .LVU3608
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12658              		.loc 1 68 5 is_stmt 0 view .LVU3609
 12659 00b6 019B     		ldr	r3, [sp, #4]
 12660 00b8 9B07     		lsls	r3, r3, #30
 12661 00ba 12D5     		bpl	.L783
 12662              	.LVL976:
 12663              	.L797:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12664              		.loc 1 68 5 view .LVU3610
 12665 00bc FFF7FEFF 		bl	set_overflow.part.0
 12666              	.LVL977:
 12667              	.L784:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12668              		.loc 1 68 5 view .LVU3611
 12669              	.LBE1826:
 12670              	.LBE1825:
 12671              	.LBE1821:
 12672              	.LBE1820:
ARM GAS  /tmp/ccl34fCK.s 			page 309


1273:src/int.c     **** 	}
 12673              		.loc 1 1273 3 is_stmt 1 view .LVU3612
 12674 00c0 3A46     		mov	r2, r7
 12675 00c2 3346     		mov	r3, r6
 12676 00c4 6520     		movs	r0, #101
 12677 00c6 FFF7FEFF 		bl	set_reg_n_int
 12678              	.LVL978:
 12679              	.LBE1832:
1275:src/int.c     **** }
 12680              		.loc 1 1275 2 view .LVU3613
 12681 00ca 2046     		mov	r0, r4
 12682 00cc 2946     		mov	r1, r5
 12683              	.LBE1836:
 12684              	.LBE1847:
1281:src/int.c     **** 
 12685              		.loc 1 1281 1 is_stmt 0 view .LVU3614
 12686 00ce 03B0     		add	sp, sp, #12
 12687              		.cfi_remember_state
 12688              		.cfi_def_cfa_offset 36
 12689              		@ sp needed
 12690 00d0 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12691              		.cfi_restore 14
 12692              		.cfi_restore 11
 12693              		.cfi_restore 10
 12694              		.cfi_restore 9
 12695              		.cfi_restore 8
 12696              		.cfi_restore 7
 12697              		.cfi_restore 6
 12698              		.cfi_restore 5
 12699              		.cfi_restore 4
 12700              		.cfi_def_cfa_offset 0
 12701              	.LVL979:
 12702              	.LBB1848:
 12703              	.LBB1837:
1275:src/int.c     **** }
 12704              		.loc 1 1275 2 view .LVU3615
 12705 00d4 FFF7FEBF 		b	setX_int
 12706              	.LVL980:
 12707              	.L796:
 12708              		.cfi_restore_state
 12709              	.LBB1833:
 12710              	.LBB1831:
 12711              	.LBB1830:
 12712              	.LBB1828:
 12713              	.LBB1824:
1275:src/int.c     **** }
 12714              		.loc 1 1275 2 view .LVU3616
 12715 00d8 FFF7FEFF 		bl	set_carry.part.0
 12716              	.LVL981:
1275:src/int.c     **** }
 12717              		.loc 1 1275 2 view .LVU3617
 12718              	.LBE1824:
 12719              	.LBE1828:
  85:src/int.c     **** }
 12720              		.loc 1 85 2 is_stmt 1 view .LVU3618
 12721              	.LBB1829:
  66:src/int.c     **** #ifndef TINY_BUILD
ARM GAS  /tmp/ccl34fCK.s 			page 310


 12722              		.loc 1 66 6 view .LVU3619
 12723              	.LBB1827:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12724              		.loc 1 68 2 view .LVU3620
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 12725              		.loc 1 68 5 is_stmt 0 view .LVU3621
 12726 00dc 019B     		ldr	r3, [sp, #4]
 12727 00de 9B07     		lsls	r3, r3, #30
 12728 00e0 ECD4     		bmi	.L797
 12729              	.LVL982:
 12730              	.L783:
  71:src/int.c     **** #endif
 12731              		.loc 1 71 3 is_stmt 1 view .LVU3622
 12732 00e2 5221     		movs	r1, #82
 12733 00e4 6920     		movs	r0, #105
 12734 00e6 FFF7FEFF 		bl	cmdflag
 12735              	.LVL983:
 12736 00ea E9E7     		b	.L784
 12737              	.LVL984:
 12738              	.L786:
  71:src/int.c     **** #endif
 12739              		.loc 1 71 3 is_stmt 0 view .LVU3623
 12740              	.LBE1827:
 12741              	.LBE1829:
 12742              	.LBE1830:
 12743              	.LBE1831:
 12744              	.LBE1833:
 12745              	.LBE1837:
 12746              	.LBE1848:
 12747              	.LBB1849:
 12748              	.LBB1846:
 12749              	.LBB1845:
 12750              	.LBB1844:
 12751 00ec 0027     		movs	r7, #0
 12752 00ee 4FF00046 		mov	r6, #-2147483648
 12753 00f2 B2E7     		b	.L777
 12754              	.LVL985:
 12755              	.L787:
  71:src/int.c     **** #endif
 12756              		.loc 1 71 3 view .LVU3624
 12757              	.LBE1844:
 12758              	.LBE1845:
 12759              	.LBE1846:
 12760              	.LBE1849:
 12761              	.LBB1850:
 12762              	.LBB1838:
 12763              	.LBB1834:
1268:src/int.c     **** 			v = (*shift)(v);
 12764              		.loc 1 1268 9 view .LVU3625
 12765 00f4 2746     		mov	r7, r4
 12766 00f6 2E46     		mov	r6, r5
 12767 00f8 0024     		movs	r4, #0
 12768              	.LVL986:
1268:src/int.c     **** 			v = (*shift)(v);
 12769              		.loc 1 1268 9 view .LVU3626
 12770 00fa 0025     		movs	r5, #0
 12771 00fc D4E7     		b	.L779
ARM GAS  /tmp/ccl34fCK.s 			page 311


 12772              	.L799:
 12773 00fe 00BF     		.align	2
 12774              	.L798:
 12775 0100 00000000 		.word	PersistentRam
 12776 0104 00000000 		.word	intLSR
 12777 0108 00000000 		.word	intLSL
 12778              	.LBE1834:
 12779              	.LBE1838:
 12780              	.LBE1850:
 12781              		.cfi_endproc
 12782              	.LFE65:
 12784              		.section	.text.intmsks,"ax",%progbits
 12785              		.align	1
 12786              		.p2align 2,,3
 12787              		.global	intmsks
 12788              		.syntax unified
 12789              		.thumb
 12790              		.thumb_func
 12791              		.fpu fpv4-sp-d16
 12793              	intmsks:
 12794              	.LVL987:
 12795              	.LFB66:
1288:src/int.c     **** #ifndef TINY_BUILD
 12796              		.loc 1 1288 46 is_stmt 1 view -0
 12797              		.cfi_startproc
 12798              		@ args = 0, pretend = 0, frame = 0
 12799              		@ frame_needed = 0, uses_anonymous_args = 0
1290:src/int.c     **** 	long long int x;
 12800              		.loc 1 1290 2 view .LVU3628
1291:src/int.c     **** 	unsigned int i;
 12801              		.loc 1 1291 2 view .LVU3629
1292:src/int.c     **** 	long long int (*f)(long long int);
 12802              		.loc 1 1292 2 view .LVU3630
1293:src/int.c     **** 	const int carry = get_carry();
 12803              		.loc 1 1293 2 view .LVU3631
1294:src/int.c     **** 
 12804              		.loc 1 1294 2 view .LVU3632
 12805              	.LBB1851:
 12806              	.LBI1851:
  49:src/int.c     **** 	return get_user_flag(CARRY_FLAG);
 12807              		.loc 1 49 5 view .LVU3633
 12808              	.LBB1852:
  50:src/int.c     **** }
 12809              		.loc 1 50 2 view .LVU3634
 12810              	.LBE1852:
 12811              	.LBE1851:
1288:src/int.c     **** #ifndef TINY_BUILD
 12812              		.loc 1 1288 46 is_stmt 0 view .LVU3635
 12813 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 12814              		.cfi_def_cfa_offset 32
 12815              		.cfi_offset 3, -32
 12816              		.cfi_offset 4, -28
 12817              		.cfi_offset 5, -24
 12818              		.cfi_offset 6, -20
 12819              		.cfi_offset 7, -16
 12820              		.cfi_offset 8, -12
 12821              		.cfi_offset 9, -8
ARM GAS  /tmp/ccl34fCK.s 			page 312


 12822              		.cfi_offset 14, -4
1288:src/int.c     **** #ifndef TINY_BUILD
 12823              		.loc 1 1288 46 view .LVU3636
 12824 0004 0546     		mov	r5, r0
 12825              	.LBB1855:
 12826              	.LBB1853:
  50:src/int.c     **** }
 12827              		.loc 1 50 9 view .LVU3637
 12828 0006 6A20     		movs	r0, #106
 12829              	.LVL988:
  50:src/int.c     **** }
 12830              		.loc 1 50 9 view .LVU3638
 12831              	.LBE1853:
 12832              	.LBE1855:
1288:src/int.c     **** #ifndef TINY_BUILD
 12833              		.loc 1 1288 46 view .LVU3639
 12834 0008 0C46     		mov	r4, r1
 12835              	.LBB1856:
 12836              	.LBB1854:
  50:src/int.c     **** }
 12837              		.loc 1 50 9 view .LVU3640
 12838 000a FFF7FEFF 		bl	get_user_flag
 12839              	.LVL989:
  50:src/int.c     **** }
 12840              		.loc 1 50 9 view .LVU3641
 12841 000e 0646     		mov	r6, r0
 12842              	.LVL990:
  50:src/int.c     **** }
 12843              		.loc 1 50 9 view .LVU3642
 12844              	.LBE1854:
 12845              	.LBE1856:
1296:src/int.c     **** 
 12846              		.loc 1 1296 2 is_stmt 1 view .LVU3643
 12847 0010 FFF7FEFF 		bl	lift
 12848              	.LVL991:
1298:src/int.c     **** 		mask = topbit_mask();
 12849              		.loc 1 1298 2 view .LVU3644
 12850              	.LBB1857:
 12851              	.LBB1858:
 12852              	.LBB1859:
 12853              	.LBB1860:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12854              		.loc 1 43 26 is_stmt 0 view .LVU3645
 12855 0014 304B     		ldr	r3, .L817
 12856 0016 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 12857              	.LBE1860:
 12858              	.LBE1859:
 12859              	.LBE1858:
 12860              	.LBE1857:
1298:src/int.c     **** 		mask = topbit_mask();
 12861              		.loc 1 1298 5 view .LVU3646
 12862 001a 692C     		cmp	r4, #105
 12863              	.LBB1871:
 12864              	.LBB1867:
 12865              	.LBB1864:
 12866              	.LBB1861:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
ARM GAS  /tmp/ccl34fCK.s 			page 313


 12867              		.loc 1 43 15 view .LVU3647
 12868 001c 02F03F02 		and	r2, r2, #63
 12869              	.LBE1861:
 12870              	.LBE1864:
 12871              	.LBE1867:
 12872              	.LBE1871:
1298:src/int.c     **** 		mask = topbit_mask();
 12873              		.loc 1 1298 5 view .LVU3648
 12874 0020 3CD0     		beq	.L801
 12875              	.LVL992:
1305:src/int.c     **** 		x = mask_value(-1);
 12876              		.loc 1 1305 2 is_stmt 1 view .LVU3649
 12877              	.LBB1872:
 12878              	.LBI1872:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 12879              		.loc 1 42 14 view .LVU3650
 12880              	.LBB1873:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 12881              		.loc 1 43 2 view .LVU3651
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12882              		.loc 1 44 2 view .LVU3652
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12883              		.loc 1 44 5 is_stmt 0 view .LVU3653
 12884 0022 531E     		subs	r3, r2, #1
 12885 0024 3E2B     		cmp	r3, #62
 12886              	.LBE1873:
 12887              	.LBE1872:
1303:src/int.c     **** 	}
 12888              		.loc 1 1303 5 view .LVU3654
 12889 0026 2D4F     		ldr	r7, .L817+4
1302:src/int.c     **** 		f = &intLSL;
 12890              		.loc 1 1302 8 view .LVU3655
 12891 0028 4FF00100 		mov	r0, #1
 12892 002c 4FF00001 		mov	r1, #0
 12893              	.LBB1877:
 12894              	.LBB1874:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12895              		.loc 1 44 5 view .LVU3656
 12896 0030 49D8     		bhi	.L802
 12897              	.LVL993:
 12898              	.L803:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 12899              		.loc 1 44 5 view .LVU3657
 12900              	.LBE1874:
 12901              	.LBE1877:
1305:src/int.c     **** 		x = mask_value(-1);
 12902              		.loc 1 1305 5 view .LVU3658
 12903 0032 9542     		cmp	r5, r2
 12904 0034 16D2     		bcs	.L807
 12905              	.LVL994:
 12906              	.L808:
1309:src/int.c     **** 			x |= mask;
 12907              		.loc 1 1309 13 is_stmt 1 discriminator 1 view .LVU3659
1309:src/int.c     **** 			x |= mask;
 12908              		.loc 1 1309 3 is_stmt 0 discriminator 1 view .LVU3660
 12909 0036 002D     		cmp	r5, #0
 12910 0038 4BD0     		beq	.L815
ARM GAS  /tmp/ccl34fCK.s 			page 314


1309:src/int.c     **** 			x |= mask;
 12911              		.loc 1 1309 3 view .LVU3661
 12912 003a 4FF00009 		mov	r9, #0
 12913 003e 4C46     		mov	r4, r9
 12914 0040 C846     		mov	r8, r9
 12915              	.LVL995:
 12916              	.L805:
1310:src/int.c     **** 			mask = (*f)(mask);
 12917              		.loc 1 1310 4 is_stmt 1 discriminator 3 view .LVU3662
1309:src/int.c     **** 			x |= mask;
 12918              		.loc 1 1309 21 is_stmt 0 discriminator 3 view .LVU3663
 12919 0042 09F10109 		add	r9, r9, #1
 12920              	.LVL996:
1310:src/int.c     **** 			mask = (*f)(mask);
 12921              		.loc 1 1310 6 discriminator 3 view .LVU3664
 12922 0046 0443     		orrs	r4, r4, r0
 12923              	.LVL997:
1310:src/int.c     **** 			mask = (*f)(mask);
 12924              		.loc 1 1310 6 discriminator 3 view .LVU3665
 12925 0048 48EA0108 		orr	r8, r8, r1
 12926              	.LVL998:
1311:src/int.c     **** 		}
 12927              		.loc 1 1311 4 is_stmt 1 discriminator 3 view .LVU3666
1311:src/int.c     **** 		}
 12928              		.loc 1 1311 12 is_stmt 0 discriminator 3 view .LVU3667
 12929 004c B847     		blx	r7
 12930              	.LVL999:
1309:src/int.c     **** 			x |= mask;
 12931              		.loc 1 1309 20 is_stmt 1 discriminator 3 view .LVU3668
1309:src/int.c     **** 			x |= mask;
 12932              		.loc 1 1309 13 discriminator 3 view .LVU3669
1309:src/int.c     **** 			x |= mask;
 12933              		.loc 1 1309 3 is_stmt 0 discriminator 3 view .LVU3670
 12934 004e 4D45     		cmp	r5, r9
 12935 0050 F7D1     		bne	.L805
 12936              	.LVL1000:
 12937              	.L804:
1314:src/int.c     **** 	set_carry(carry);
 12938              		.loc 1 1314 2 is_stmt 1 view .LVU3671
 12939 0052 2046     		mov	r0, r4
 12940 0054 4146     		mov	r1, r8
 12941 0056 FFF7FEFF 		bl	setX_int
 12942              	.LVL1001:
1315:src/int.c     **** #endif
 12943              		.loc 1 1315 2 view .LVU3672
 12944              	.LBB1878:
 12945              	.LBI1878:
  53:src/int.c     **** #ifndef TINY_BUILD
 12946              		.loc 1 53 6 view .LVU3673
 12947              	.LBB1879:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12948              		.loc 1 55 2 view .LVU3674
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12949              		.loc 1 55 5 is_stmt 0 view .LVU3675
 12950 005a CEB1     		cbz	r6, .L806
 12951              	.LVL1002:
 12952              	.L816:
ARM GAS  /tmp/ccl34fCK.s 			page 315


  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 12953              		.loc 1 55 5 view .LVU3676
 12954              	.LBE1879:
 12955              	.LBE1878:
1317:src/int.c     **** 
 12956              		.loc 1 1317 1 view .LVU3677
 12957 005c BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 12958              		.cfi_remember_state
 12959              		.cfi_restore 14
 12960              		.cfi_restore 9
 12961              		.cfi_restore 8
 12962              		.cfi_restore 7
 12963              		.cfi_restore 6
 12964              		.cfi_restore 5
 12965              		.cfi_restore 4
 12966              		.cfi_restore 3
 12967              		.cfi_def_cfa_offset 0
 12968              	.LVL1003:
 12969              	.LBB1883:
 12970              	.LBB1880:
1317:src/int.c     **** 
 12971              		.loc 1 1317 1 view .LVU3678
 12972 0060 FFF7FEBF 		b	set_carry.part.0
 12973              	.LVL1004:
 12974              	.L807:
 12975              		.cfi_restore_state
1317:src/int.c     **** 
 12976              		.loc 1 1317 1 view .LVU3679
 12977              	.LBE1880:
 12978              	.LBE1883:
 12979              	.LBB1884:
 12980              	.LBB1885:
  94:src/int.c     **** 
 12981              		.loc 1 94 2 is_stmt 1 view .LVU3680
  96:src/int.c     **** 		return v;
 12982              		.loc 1 96 2 view .LVU3681
  98:src/int.c     **** 	return v & mask;
 12983              		.loc 1 98 2 view .LVU3682
  98:src/int.c     **** 	return v & mask;
 12984              		.loc 1 98 14 is_stmt 0 view .LVU3683
 12985 0064 0124     		movs	r4, #1
 12986 0066 A2F12008 		sub	r8, r2, #32
 12987 006a C2F12003 		rsb	r3, r2, #32
 12988 006e 04FA08F8 		lsl	r8, r4, r8
 12989 0072 24FA03F3 		lsr	r3, r4, r3
 12990 0076 9440     		lsls	r4, r4, r2
  98:src/int.c     **** 	return v & mask;
 12991              		.loc 1 98 7 view .LVU3684
 12992 0078 14F1FF34 		adds	r4, r4, #-1
  98:src/int.c     **** 	return v & mask;
 12993              		.loc 1 98 14 view .LVU3685
 12994 007c 48EA0308 		orr	r8, r8, r3
  98:src/int.c     **** 	return v & mask;
 12995              		.loc 1 98 7 view .LVU3686
 12996 0080 48F1FF38 		adc	r8, r8, #-1
 12997              	.LVL1005:
  99:src/int.c     **** #else
ARM GAS  /tmp/ccl34fCK.s 			page 316


 12998              		.loc 1 99 2 is_stmt 1 view .LVU3687
  99:src/int.c     **** #else
 12999              		.loc 1 99 2 is_stmt 0 view .LVU3688
 13000              	.LBE1885:
 13001              	.LBE1884:
1314:src/int.c     **** 	set_carry(carry);
 13002              		.loc 1 1314 2 is_stmt 1 view .LVU3689
 13003 0084 2046     		mov	r0, r4
 13004              	.LVL1006:
1314:src/int.c     **** 	set_carry(carry);
 13005              		.loc 1 1314 2 is_stmt 0 view .LVU3690
 13006 0086 4146     		mov	r1, r8
 13007 0088 FFF7FEFF 		bl	setX_int
 13008              	.LVL1007:
1315:src/int.c     **** #endif
 13009              		.loc 1 1315 2 is_stmt 1 view .LVU3691
 13010              	.LBB1887:
  53:src/int.c     **** #ifndef TINY_BUILD
 13011              		.loc 1 53 6 view .LVU3692
 13012              	.LBB1881:
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13013              		.loc 1 55 2 view .LVU3693
  55:src/int.c     **** 		set_user_flag(CARRY_FLAG);
 13014              		.loc 1 55 5 is_stmt 0 view .LVU3694
 13015 008c 002E     		cmp	r6, #0
 13016 008e E5D1     		bne	.L816
 13017              	.LVL1008:
 13018              	.L806:
  58:src/int.c     **** #endif
 13019              		.loc 1 58 3 is_stmt 1 view .LVU3695
 13020              	.LBE1881:
 13021              	.LBE1887:
1317:src/int.c     **** 
 13022              		.loc 1 1317 1 is_stmt 0 view .LVU3696
 13023 0090 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 13024              		.cfi_remember_state
 13025              		.cfi_restore 14
 13026              		.cfi_restore 9
 13027              		.cfi_restore 8
 13028              		.cfi_restore 7
 13029              		.cfi_restore 6
 13030              		.cfi_restore 5
 13031              		.cfi_restore 4
 13032              		.cfi_restore 3
 13033              		.cfi_def_cfa_offset 0
 13034              	.LVL1009:
 13035              	.LBB1888:
 13036              	.LBB1882:
  58:src/int.c     **** #endif
 13037              		.loc 1 58 3 view .LVU3697
 13038 0094 5221     		movs	r1, #82
 13039 0096 6A20     		movs	r0, #106
 13040 0098 FFF7FEBF 		b	cmdflag
 13041              	.LVL1010:
 13042              	.L801:
 13043              		.cfi_restore_state
  58:src/int.c     **** #endif
ARM GAS  /tmp/ccl34fCK.s 			page 317


 13044              		.loc 1 58 3 view .LVU3698
 13045              	.LBE1882:
 13046              	.LBE1888:
1299:src/int.c     **** 		f = &intLSR;
 13047              		.loc 1 1299 3 is_stmt 1 view .LVU3699
 13048              	.LBB1889:
 13049              	.LBI1857:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 13050              		.loc 1 109 22 view .LVU3700
 13051              	.LBB1868:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 13052              		.loc 1 110 2 view .LVU3701
 13053              	.LBB1865:
 13054              	.LBI1859:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 13055              		.loc 1 42 14 view .LVU3702
 13056              	.LBB1862:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13057              		.loc 1 43 2 view .LVU3703
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13058              		.loc 1 44 2 view .LVU3704
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13059              		.loc 1 44 26 is_stmt 0 view .LVU3705
 13060 009c 501E     		subs	r0, r2, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13061              		.loc 1 44 5 view .LVU3706
 13062 009e 3E28     		cmp	r0, #62
 13063 00a0 0DD8     		bhi	.L810
 13064 00a2 0123     		movs	r3, #1
 13065 00a4 C0F12004 		rsb	r4, r0, #32
 13066 00a8 A2F12101 		sub	r1, r2, #33
 13067 00ac 03FA01F1 		lsl	r1, r3, r1
 13068 00b0 23FA04F4 		lsr	r4, r3, r4
 13069              	.LBE1862:
 13070              	.LBE1865:
 13071              	.LBE1868:
 13072              	.LBE1889:
1300:src/int.c     **** 	} else {
 13073              		.loc 1 1300 5 view .LVU3707
 13074 00b4 0A4F     		ldr	r7, .L817+8
 13075 00b6 2143     		orrs	r1, r1, r4
 13076 00b8 03FA00F0 		lsl	r0, r3, r0
 13077              	.LVL1011:
 13078              	.LBB1890:
 13079              	.LBB1869:
 111:src/int.c     **** 	return bit;
 13080              		.loc 1 111 2 is_stmt 1 view .LVU3708
 112:src/int.c     **** }
 13081              		.loc 1 112 2 view .LVU3709
 112:src/int.c     **** }
 13082              		.loc 1 112 2 is_stmt 0 view .LVU3710
 13083              	.LBE1869:
 13084              	.LBE1890:
1300:src/int.c     **** 	} else {
 13085              		.loc 1 1300 3 is_stmt 1 view .LVU3711
1305:src/int.c     **** 		x = mask_value(-1);
 13086              		.loc 1 1305 2 view .LVU3712
ARM GAS  /tmp/ccl34fCK.s 			page 318


 13087              	.LBB1891:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 13088              		.loc 1 42 14 view .LVU3713
 13089              	.LBB1875:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13090              		.loc 1 43 2 view .LVU3714
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13091              		.loc 1 44 2 view .LVU3715
 13092 00bc B9E7     		b	.L803
 13093              	.LVL1012:
 13094              	.L810:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13095              		.loc 1 44 2 is_stmt 0 view .LVU3716
 13096              	.LBE1875:
 13097              	.LBE1891:
1300:src/int.c     **** 	} else {
 13098              		.loc 1 1300 5 view .LVU3717
 13099 00be 084F     		ldr	r7, .L817+8
 13100              	.LBB1892:
 13101              	.LBB1870:
 13102              	.LBB1866:
 13103              	.LBB1863:
 13104 00c0 0020     		movs	r0, #0
 13105 00c2 4FF00041 		mov	r1, #-2147483648
 13106              	.LVL1013:
 13107              	.L802:
1300:src/int.c     **** 	} else {
 13108              		.loc 1 1300 5 view .LVU3718
 13109              	.LBE1863:
 13110              	.LBE1866:
 13111              	.LBE1870:
 13112              	.LBE1892:
 13113              	.LBB1893:
 13114              	.LBB1876:
  45:src/int.c     **** 	return il;
 13115              		.loc 1 45 3 is_stmt 1 view .LVU3719
 13116              	.LBE1876:
 13117              	.LBE1893:
1305:src/int.c     **** 		x = mask_value(-1);
 13118              		.loc 1 1305 5 is_stmt 0 view .LVU3720
 13119 00c6 3F2D     		cmp	r5, #63
 13120 00c8 B5D9     		bls	.L808
 13121              	.LBB1894:
 13122              	.LBB1886:
  97:src/int.c     **** 	mask = (1LL << ws) - 1;
 13123              		.loc 1 97 10 view .LVU3721
 13124 00ca 4FF0FF34 		mov	r4, #-1
 13125 00ce A046     		mov	r8, r4
 13126 00d0 BFE7     		b	.L804
 13127              	.LVL1014:
 13128              	.L815:
  97:src/int.c     **** 	mask = (1LL << ws) - 1;
 13129              		.loc 1 97 10 view .LVU3722
 13130              	.LBE1886:
 13131              	.LBE1894:
1309:src/int.c     **** 			x |= mask;
 13132              		.loc 1 1309 3 view .LVU3723
ARM GAS  /tmp/ccl34fCK.s 			page 319


 13133 00d2 0024     		movs	r4, #0
 13134 00d4 A046     		mov	r8, r4
 13135 00d6 BCE7     		b	.L804
 13136              	.L818:
 13137              		.align	2
 13138              	.L817:
 13139 00d8 00000000 		.word	PersistentRam
 13140 00dc 00000000 		.word	intLSL
 13141 00e0 00000000 		.word	intLSR
 13142              		.cfi_endproc
 13143              	.LFE66:
 13145              		.section	.text.intbits,"ax",%progbits
 13146              		.align	1
 13147              		.p2align 2,,3
 13148              		.global	intbits
 13149              		.syntax unified
 13150              		.thumb
 13151              		.thumb_func
 13152              		.fpu fpv4-sp-d16
 13154              	intbits:
 13155              	.LVL1015:
 13156              	.LFB67:
1321:src/int.c     **** #ifndef TINY_BUILD
 13157              		.loc 1 1321 46 is_stmt 1 view -0
 13158              		.cfi_startproc
 13159              		@ args = 0, pretend = 0, frame = 8
 13160              		@ frame_needed = 0, uses_anonymous_args = 0
1323:src/int.c     **** 
 13161              		.loc 1 1323 2 view .LVU3725
1325:src/int.c     **** 		return;
 13162              		.loc 1 1325 2 view .LVU3726
 13163              	.LBB1901:
 13164              	.LBI1901:
  23:src/int.c     **** 	if (! is_intmode())
 13165              		.loc 1 23 12 view .LVU3727
 13166              	.LBB1902:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13167              		.loc 1 24 2 view .LVU3728
 13168              	.LBE1902:
 13169              	.LBE1901:
1321:src/int.c     **** #ifndef TINY_BUILD
 13170              		.loc 1 1321 46 is_stmt 0 view .LVU3729
 13171 0000 2DE97043 		push	{r4, r5, r6, r8, r9, lr}
 13172              		.cfi_def_cfa_offset 24
 13173              		.cfi_offset 4, -24
 13174              		.cfi_offset 5, -20
 13175              		.cfi_offset 6, -16
 13176              		.cfi_offset 8, -12
 13177              		.cfi_offset 9, -8
 13178              		.cfi_offset 14, -4
 13179              	.LBB1908:
 13180              	.LBB1905:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13181              		.loc 1 24 6 view .LVU3730
 13182 0004 3D4D     		ldr	r5, .L844
 13183 0006 95F8E827 		ldrb	r2, [r5, #2024]	@ zero_extendqisi2
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
ARM GAS  /tmp/ccl34fCK.s 			page 320


 13184              		.loc 1 24 5 view .LVU3731
 13185 000a D307     		lsls	r3, r2, #31
 13186              	.LBE1905:
 13187              	.LBE1908:
1321:src/int.c     **** #ifndef TINY_BUILD
 13188              		.loc 1 1321 46 view .LVU3732
 13189 000c 82B0     		sub	sp, sp, #8
 13190              		.cfi_def_cfa_offset 32
1321:src/int.c     **** #ifndef TINY_BUILD
 13191              		.loc 1 1321 46 view .LVU3733
 13192 000e 0446     		mov	r4, r0
 13193 0010 0E46     		mov	r6, r1
 13194              	.LBB1909:
 13195              	.LBB1906:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13196              		.loc 1 24 5 view .LVU3734
 13197 0012 3FD5     		bpl	.L820
 13198              	.LVL1016:
 13199              	.L823:
  24:src/int.c     **** 		return report_err(ERR_BAD_MODE);
 13200              		.loc 1 24 5 view .LVU3735
 13201              	.LBE1906:
 13202              	.LBE1909:
1328:src/int.c     **** 	x = getX_int();
 13203              		.loc 1 1328 2 is_stmt 1 view .LVU3736
 13204              	.LBB1910:
 13205              	.LBI1910:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 13206              		.loc 1 42 14 view .LVU3737
 13207              	.LBB1911:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13208              		.loc 1 43 2 view .LVU3738
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13209              		.loc 1 43 26 is_stmt 0 view .LVU3739
 13210 0014 95F8E937 		ldrb	r3, [r5, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13211              		.loc 1 43 15 view .LVU3740
 13212 0018 03F03F03 		and	r3, r3, #63
 13213              	.LVL1017:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13214              		.loc 1 44 2 is_stmt 1 view .LVU3741
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13215              		.loc 1 44 26 is_stmt 0 view .LVU3742
 13216 001c 5A1E     		subs	r2, r3, #1
  45:src/int.c     **** 	return il;
 13217              		.loc 1 45 10 view .LVU3743
 13218 001e 3F2A     		cmp	r2, #63
 13219 0020 28BF     		it	cs
 13220 0022 4023     		movcs	r3, #64
 13221              	.LVL1018:
  45:src/int.c     **** 	return il;
 13222              		.loc 1 45 10 view .LVU3744
 13223              	.LBE1911:
 13224              	.LBE1910:
1328:src/int.c     **** 	x = getX_int();
 13225              		.loc 1 1328 29 view .LVU3745
 13226 0024 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccl34fCK.s 			page 321


 13227 0026 19D2     		bcs	.L824
1328:src/int.c     **** 	x = getX_int();
 13228              		.loc 1 1328 29 discriminator 1 view .LVU3746
 13229 0028 0123     		movs	r3, #1
 13230 002a A4F12001 		sub	r1, r4, #32
 13231 002e C4F12002 		rsb	r2, r4, #32
 13232 0032 03FA01F9 		lsl	r9, r3, r1
 13233 0036 23FA02F2 		lsr	r2, r3, r2
 13234 003a 03FA04F8 		lsl	r8, r3, r4
 13235 003e 49EA0209 		orr	r9, r9, r2
 13236              	.LVL1019:
1329:src/int.c     **** 
 13237              		.loc 1 1329 2 is_stmt 1 discriminator 1 view .LVU3747
1329:src/int.c     **** 
 13238              		.loc 1 1329 6 is_stmt 0 discriminator 1 view .LVU3748
 13239 0042 FFF7FEFF 		bl	getX_int
 13240              	.LVL1020:
 13241 0046 A6F16403 		sub	r3, r6, #100
 13242 004a 0191     		str	r1, [sp, #4]
 13243 004c 0446     		mov	r4, r0
 13244              	.LVL1021:
1331:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
 13245              		.loc 1 1331 2 is_stmt 1 discriminator 1 view .LVU3749
 13246 004e 042B     		cmp	r3, #4
 13247 0050 25D8     		bhi	.L819
 13248 0052 DFE803F0 		tbb	[pc, r3]
 13249              	.L827:
 13250 0056 4B       		.byte	(.L831-.L827)/2
 13251 0057 44       		.byte	(.L830-.L827)/2
 13252 0058 10       		.byte	(.L829-.L827)/2
 13253 0059 3A       		.byte	(.L828-.L827)/2
 13254 005a 2D       		.byte	(.L826-.L827)/2
 13255              	.LVL1022:
 13256 005b 00       		.p2align 1
 13257              	.L824:
1329:src/int.c     **** 
 13258              		.loc 1 1329 2 view .LVU3750
1329:src/int.c     **** 
 13259              		.loc 1 1329 6 is_stmt 0 view .LVU3751
 13260 005c FFF7FEFF 		bl	getX_int
 13261              	.LVL1023:
 13262 0060 A6F16403 		sub	r3, r6, #100
 13263 0064 0191     		str	r1, [sp, #4]
 13264 0066 0446     		mov	r4, r0
 13265              	.LVL1024:
1331:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
 13266              		.loc 1 1331 2 is_stmt 1 view .LVU3752
 13267 0068 042B     		cmp	r3, #4
 13268 006a 18D8     		bhi	.L819
 13269 006c DFE803F0 		tbb	[pc, r3]
 13270              	.L838:
 13271 0070 09       		.byte	(.L835-.L838)/2
 13272 0071 09       		.byte	(.L835-.L838)/2
 13273 0072 09       		.byte	(.L835-.L838)/2
 13274 0073 1A       		.byte	(.L840-.L838)/2
 13275 0074 1E       		.byte	(.L841-.L838)/2
 13276              	.LVL1025:
ARM GAS  /tmp/ccl34fCK.s 			page 322


 13277 0075 00       		.p2align 1
 13278              	.L829:
1331:src/int.c     **** 	case RARG_SB:	x |= m;		setlastX();		break;
 13279              		.loc 1 1331 2 is_stmt 0 view .LVU3753
 13280 0076 019B     		ldr	r3, [sp, #4]
 13281 0078 83EA0903 		eor	r3, r3, r9
 13282 007c 80EA0804 		eor	r4, r0, r8
 13283 0080 0193     		str	r3, [sp, #4]
 13284              	.LVL1026:
 13285              	.L835:
1334:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
 13286              		.loc 1 1334 16 is_stmt 1 view .LVU3754
1334:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
 13287              		.loc 1 1334 25 view .LVU3755
 13288 0082 FFF7FEFF 		bl	setlastX
 13289              	.LVL1027:
1334:src/int.c     **** 	case RARG_BS:	fin_tst((x&m)?1:0);			break;
 13290              		.loc 1 1334 38 view .LVU3756
 13291              	.L833:
1341:src/int.c     **** #endif
 13292              		.loc 1 1341 2 view .LVU3757
 13293 0086 0199     		ldr	r1, [sp, #4]
 13294 0088 2046     		mov	r0, r4
1343:src/int.c     **** 
 13295              		.loc 1 1343 1 is_stmt 0 view .LVU3758
 13296 008a 02B0     		add	sp, sp, #8
 13297              		.cfi_remember_state
 13298              		.cfi_def_cfa_offset 24
 13299              		@ sp needed
 13300 008c BDE87043 		pop	{r4, r5, r6, r8, r9, lr}
 13301              		.cfi_restore 14
 13302              		.cfi_restore 9
 13303              		.cfi_restore 8
 13304              		.cfi_restore 6
 13305              		.cfi_restore 5
 13306              		.cfi_restore 4
 13307              		.cfi_def_cfa_offset 0
 13308              	.LVL1028:
1341:src/int.c     **** #endif
 13309              		.loc 1 1341 2 view .LVU3759
 13310 0090 FFF7FEBF 		b	setX_int
 13311              	.LVL1029:
 13312              	.L820:
 13313              		.cfi_restore_state
 13314              	.LBB1912:
 13315              	.LBB1907:
 13316              	.LBB1903:
 13317              	.LBI1903:
  23:src/int.c     **** 	if (! is_intmode())
 13318              		.loc 1 23 12 is_stmt 1 view .LVU3760
 13319              	.LBB1904:
  25:src/int.c     **** 	return 0;
 13320              		.loc 1 25 3 view .LVU3761
  25:src/int.c     **** 	return 0;
 13321              		.loc 1 25 10 is_stmt 0 view .LVU3762
 13322 0094 0D20     		movs	r0, #13
 13323              	.LVL1030:
ARM GAS  /tmp/ccl34fCK.s 			page 323


  25:src/int.c     **** 	return 0;
 13324              		.loc 1 25 10 view .LVU3763
 13325 0096 FFF7FEFF 		bl	report_err
 13326              	.LVL1031:
  25:src/int.c     **** 	return 0;
 13327              		.loc 1 25 10 view .LVU3764
 13328              	.LBE1904:
 13329              	.LBE1903:
 13330              	.LBE1907:
 13331              	.LBE1912:
1325:src/int.c     **** 		return;
 13332              		.loc 1 1325 5 view .LVU3765
 13333 009a 0028     		cmp	r0, #0
 13334 009c BAD0     		beq	.L823
 13335              	.LVL1032:
 13336              	.L819:
1343:src/int.c     **** 
 13337              		.loc 1 1343 1 view .LVU3766
 13338 009e 02B0     		add	sp, sp, #8
 13339              		.cfi_remember_state
 13340              		.cfi_def_cfa_offset 24
 13341              		@ sp needed
 13342 00a0 BDE87083 		pop	{r4, r5, r6, r8, r9, pc}
 13343              	.LVL1033:
 13344              	.L840:
 13345              		.cfi_restore_state
1329:src/int.c     **** 
 13346              		.loc 1 1329 6 view .LVU3767
 13347 00a4 0020     		movs	r0, #0
 13348              	.LVL1034:
1335:src/int.c     **** 	case RARG_BC:	fin_tst((m != 0 && (x&m) != 0)?0:1);	break;
 13349              		.loc 1 1335 16 is_stmt 1 view .LVU3768
 13350              	.L837:
1336:src/int.c     **** 	default:
 13351              		.loc 1 1336 16 is_stmt 0 discriminator 6 view .LVU3769
 13352 00a6 FFF7FEFF 		bl	fin_tst
 13353              	.LVL1035:
1336:src/int.c     **** 	default:
 13354              		.loc 1 1336 53 is_stmt 1 discriminator 6 view .LVU3770
1336:src/int.c     **** 	default:
 13355              		.loc 1 1336 2 is_stmt 0 discriminator 6 view .LVU3771
 13356 00aa ECE7     		b	.L833
 13357              	.L841:
1329:src/int.c     **** 
 13358              		.loc 1 1329 6 view .LVU3772
 13359 00ac 0120     		movs	r0, #1
 13360 00ae FAE7     		b	.L837
 13361              	.LVL1036:
 13362              	.L826:
1336:src/int.c     **** 	default:
 13363              		.loc 1 1336 16 is_stmt 1 view .LVU3773
 13364 00b0 58EA0903 		orrs	r3, r8, r9
 13365 00b4 FAD0     		beq	.L841
1336:src/int.c     **** 	default:
 13366              		.loc 1 1336 37 is_stmt 0 discriminator 2 view .LVU3774
 13367 00b6 019B     		ldr	r3, [sp, #4]
 13368 00b8 08EA0002 		and	r2, r8, r0
ARM GAS  /tmp/ccl34fCK.s 			page 324


 13369 00bc 09EA0303 		and	r3, r9, r3
1336:src/int.c     **** 	default:
 13370              		.loc 1 1336 16 discriminator 2 view .LVU3775
 13371 00c0 1343     		orrs	r3, r2, r3
 13372 00c2 0CBF     		ite	eq
 13373 00c4 0120     		moveq	r0, #1
 13374              	.LVL1037:
1336:src/int.c     **** 	default:
 13375              		.loc 1 1336 16 discriminator 2 view .LVU3776
 13376 00c6 0020     		movne	r0, #0
 13377 00c8 EDE7     		b	.L837
 13378              	.LVL1038:
 13379              	.L828:
1336:src/int.c     **** 	default:
 13380              		.loc 1 1336 16 discriminator 2 view .LVU3777
 13381 00ca 019B     		ldr	r3, [sp, #4]
 13382 00cc 08EA0002 		and	r2, r8, r0
 13383 00d0 09EA0303 		and	r3, r9, r3
 13384 00d4 1343     		orrs	r3, r2, r3
 13385 00d6 14BF     		ite	ne
 13386 00d8 0120     		movne	r0, #1
 13387              	.LVL1039:
1336:src/int.c     **** 	default:
 13388              		.loc 1 1336 16 discriminator 2 view .LVU3778
 13389 00da 0020     		moveq	r0, #0
 13390 00dc E3E7     		b	.L837
 13391              	.LVL1040:
 13392              	.L830:
1336:src/int.c     **** 	default:
 13393              		.loc 1 1336 16 discriminator 2 view .LVU3779
 13394 00de 019B     		ldr	r3, [sp, #4]
 13395 00e0 23EA0903 		bic	r3, r3, r9
 13396 00e4 20EA0804 		bic	r4, r0, r8
 13397 00e8 0193     		str	r3, [sp, #4]
1333:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
 13398              		.loc 1 1333 16 is_stmt 1 view .LVU3780
 13399              	.LVL1041:
1333:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
 13400              		.loc 1 1333 25 view .LVU3781
 13401 00ea CAE7     		b	.L835
 13402              	.LVL1042:
 13403              	.L831:
1333:src/int.c     **** 	case RARG_FB:	x ^= m;		setlastX();		break;
 13404              		.loc 1 1333 25 is_stmt 0 view .LVU3782
 13405 00ec 019B     		ldr	r3, [sp, #4]
 13406 00ee 43EA0903 		orr	r3, r3, r9
 13407 00f2 40EA0804 		orr	r4, r0, r8
 13408 00f6 0193     		str	r3, [sp, #4]
1332:src/int.c     **** 	case RARG_CB:	x &= ~m;	setlastX();		break;
 13409              		.loc 1 1332 16 is_stmt 1 view .LVU3783
 13410              	.LVL1043:
1332:src/int.c     **** 	case RARG_CB:	x &= ~m;	setlastX();		break;
 13411              		.loc 1 1332 25 view .LVU3784
 13412 00f8 C3E7     		b	.L835
 13413              	.L845:
 13414 00fa 00BF     		.align	2
 13415              	.L844:
ARM GAS  /tmp/ccl34fCK.s 			page 325


 13416 00fc 00000000 		.word	PersistentRam
 13417              		.cfi_endproc
 13418              	.LFE67:
 13420              		.section	.text.intFib,"ax",%progbits
 13421              		.align	1
 13422              		.p2align 2,,3
 13423              		.global	intFib
 13424              		.syntax unified
 13425              		.thumb
 13426              		.thumb_func
 13427              		.fpu fpv4-sp-d16
 13429              	intFib:
 13430              	.LVL1044:
 13431              	.LFB68:
1345:src/int.c     **** #ifndef TINY_BUILD
 13432              		.loc 1 1345 39 view -0
 13433              		.cfi_startproc
 13434              		@ args = 0, pretend = 0, frame = 32
 13435              		@ frame_needed = 0, uses_anonymous_args = 0
1347:src/int.c     **** 	unsigned long long int v = extract_value(x, &sx);
 13436              		.loc 1 1347 2 view .LVU3786
1348:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 13437              		.loc 1 1348 2 view .LVU3787
1345:src/int.c     **** #ifndef TINY_BUILD
 13438              		.loc 1 1345 39 is_stmt 0 view .LVU3788
 13439 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 13440              		.cfi_def_cfa_offset 36
 13441              		.cfi_offset 4, -36
 13442              		.cfi_offset 5, -32
 13443              		.cfi_offset 6, -28
 13444              		.cfi_offset 7, -24
 13445              		.cfi_offset 8, -20
 13446              		.cfi_offset 9, -16
 13447              		.cfi_offset 10, -12
 13448              		.cfi_offset 11, -8
 13449              		.cfi_offset 14, -4
 13450 0004 89B0     		sub	sp, sp, #36
 13451              		.cfi_def_cfa_offset 72
1348:src/int.c     **** 	const enum arithmetic_modes mode = int_mode();
 13452              		.loc 1 1348 29 view .LVU3789
 13453 0006 07AA     		add	r2, sp, #28
 13454 0008 FFF7FEFF 		bl	extract_value
 13455              	.LVL1045:
1349:src/int.c     **** 	unsigned long long int a0, a1;
 13456              		.loc 1 1349 2 is_stmt 1 view .LVU3790
 13457              	.LBB1913:
 13458              	.LBI1913:
  38:src/int.c     **** 	return (enum arithmetic_modes) UState.int_mode;
 13459              		.loc 1 38 23 view .LVU3791
 13460              	.LBB1914:
  39:src/int.c     **** }
 13461              		.loc 1 39 2 view .LVU3792
  39:src/int.c     **** }
 13462              		.loc 1 39 2 is_stmt 0 view .LVU3793
 13463              	.LBE1914:
 13464              	.LBE1913:
1350:src/int.c     **** 	unsigned int n, i;
ARM GAS  /tmp/ccl34fCK.s 			page 326


 13465              		.loc 1 1350 2 is_stmt 1 view .LVU3794
1351:src/int.c     **** 	long long int tbm;
 13466              		.loc 1 1351 2 view .LVU3795
1352:src/int.c     **** 
 13467              		.loc 1 1352 2 view .LVU3796
1359:src/int.c     **** 		set_overflow(1);
 13468              		.loc 1 1359 2 view .LVU3797
1359:src/int.c     **** 		set_overflow(1);
 13469              		.loc 1 1359 5 is_stmt 0 view .LVU3798
 13470 000c 0029     		cmp	r1, #0
 13471 000e 08BF     		it	eq
 13472 0010 6428     		cmpeq	r0, #100
 13473 0012 80F08380 		bcs	.L867
 13474              	.LBB1917:
 13475              	.LBB1915:
  39:src/int.c     **** }
 13476              		.loc 1 39 39 view .LVU3799
 13477 0016 474E     		ldr	r6, .L869
 13478 0018 0446     		mov	r4, r0
 13479 001a 96F8E897 		ldrb	r9, [r6, #2024]	@ zero_extendqisi2
 13480 001e 0D46     		mov	r5, r1
 13481              	.LBE1915:
 13482              	.LBE1917:
 13483              	.LBB1918:
 13484              	.LBB1919:
  71:src/int.c     **** #endif
 13485              		.loc 1 71 3 view .LVU3800
 13486 0020 6920     		movs	r0, #105
 13487 0022 5221     		movs	r1, #82
 13488 0024 FFF7FEFF 		bl	cmdflag
 13489              	.LVL1046:
  71:src/int.c     **** #endif
 13490              		.loc 1 71 3 view .LVU3801
 13491              	.LBE1919:
 13492              	.LBE1918:
1365:src/int.c     **** 		return build_value(n, 0);
 13493              		.loc 1 1365 5 view .LVU3802
 13494 0028 14F0FE03 		ands	r3, r4, #254
 13495              	.LBB1921:
 13496              	.LBB1916:
  39:src/int.c     **** }
 13497              		.loc 1 39 39 view .LVU3803
 13498 002c C9F38109 		ubfx	r9, r9, #2, #2
 13499              	.LBE1916:
 13500              	.LBE1921:
1363:src/int.c     **** 	n = v & 0xff;
 13501              		.loc 1 1363 2 is_stmt 1 view .LVU3804
 13502              	.LVL1047:
 13503              	.LBB1922:
 13504              	.LBI1918:
  66:src/int.c     **** #ifndef TINY_BUILD
 13505              		.loc 1 66 6 view .LVU3805
 13506              	.LBB1920:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13507              		.loc 1 68 2 view .LVU3806
  71:src/int.c     **** #endif
 13508              		.loc 1 71 3 view .LVU3807
ARM GAS  /tmp/ccl34fCK.s 			page 327


  71:src/int.c     **** #endif
 13509              		.loc 1 71 3 is_stmt 0 view .LVU3808
 13510              	.LBE1920:
 13511              	.LBE1922:
1364:src/int.c     **** 	if (n <= 1)
 13512              		.loc 1 1364 2 is_stmt 1 view .LVU3809
1364:src/int.c     **** 	if (n <= 1)
 13513              		.loc 1 1364 8 is_stmt 0 view .LVU3810
 13514 0030 A046     		mov	r8, r4
 13515              	.LVL1048:
1365:src/int.c     **** 		return build_value(n, 0);
 13516              		.loc 1 1365 2 is_stmt 1 view .LVU3811
1365:src/int.c     **** 		return build_value(n, 0);
 13517              		.loc 1 1365 5 is_stmt 0 view .LVU3812
 13518 0032 55D0     		beq	.L868
1371:src/int.c     **** 
 13519              		.loc 1 1371 2 is_stmt 1 view .LVU3813
1371:src/int.c     **** 
 13520              		.loc 1 1371 7 is_stmt 0 view .LVU3814
 13521 0034 079B     		ldr	r3, [sp, #28]
 13522 0036 0593     		str	r3, [sp, #20]
1371:src/int.c     **** 
 13523              		.loc 1 1371 28 view .LVU3815
 13524 0038 1BB1     		cbz	r3, .L850
1371:src/int.c     **** 
 13525              		.loc 1 1371 28 discriminator 1 view .LVU3816
 13526 003a E443     		mvns	r4, r4
 13527              	.LVL1049:
1371:src/int.c     **** 
 13528              		.loc 1 1371 28 discriminator 1 view .LVU3817
 13529 003c 04F00103 		and	r3, r4, #1
 13530 0040 0593     		str	r3, [sp, #20]
 13531              	.L850:
 13532              	.LVL1050:
1374:src/int.c     **** 	if (mode == MODE_UNSIGNED)
 13533              		.loc 1 1374 2 is_stmt 1 discriminator 6 view .LVU3818
 13534              	.LBB1923:
 13535              	.LBI1923:
 109:src/int.c     **** 	const unsigned int ws = word_size();
 13536              		.loc 1 109 22 discriminator 6 view .LVU3819
 13537              	.LBB1924:
 110:src/int.c     **** 	long long int bit = 1LL << (ws - 1);
 13538              		.loc 1 110 2 discriminator 6 view .LVU3820
 13539              	.LBB1925:
 13540              	.LBI1925:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 13541              		.loc 1 42 14 discriminator 6 view .LVU3821
 13542              	.LBB1926:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13543              		.loc 1 43 2 discriminator 6 view .LVU3822
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13544              		.loc 1 44 2 discriminator 6 view .LVU3823
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13545              		.loc 1 43 26 is_stmt 0 discriminator 6 view .LVU3824
 13546 0042 96F8E967 		ldrb	r6, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13547              		.loc 1 43 15 discriminator 6 view .LVU3825
ARM GAS  /tmp/ccl34fCK.s 			page 328


 13548 0046 06F03F06 		and	r6, r6, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13549              		.loc 1 44 26 discriminator 6 view .LVU3826
 13550 004a 731E     		subs	r3, r6, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13551              		.loc 1 44 5 discriminator 6 view .LVU3827
 13552 004c 3E2B     		cmp	r3, #62
 13553 004e 6CD8     		bhi	.L858
 13554 0050 0127     		movs	r7, #1
 13555 0052 213E     		subs	r6, r6, #33
 13556 0054 C3F12002 		rsb	r2, r3, #32
 13557 0058 07FA06F6 		lsl	r6, r7, r6
 13558 005c 27FA02F2 		lsr	r2, r7, r2
 13559 0060 1643     		orrs	r6, r6, r2
 13560 0062 9F40     		lsls	r7, r7, r3
 13561              	.L851:
 13562              	.LVL1051:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13563              		.loc 1 44 5 discriminator 6 view .LVU3828
 13564              	.LBE1926:
 13565              	.LBE1925:
 111:src/int.c     **** 	return bit;
 13566              		.loc 1 111 2 is_stmt 1 view .LVU3829
 112:src/int.c     **** }
 13567              		.loc 1 112 2 view .LVU3830
 112:src/int.c     **** }
 13568              		.loc 1 112 2 is_stmt 0 view .LVU3831
 13569              	.LBE1924:
 13570              	.LBE1923:
1375:src/int.c     **** 		tbm <<= 1;
 13571              		.loc 1 1375 2 is_stmt 1 view .LVU3832
1375:src/int.c     **** 		tbm <<= 1;
 13572              		.loc 1 1375 5 is_stmt 0 view .LVU3833
 13573 0064 B9F1020F 		cmp	r9, #2
 13574 0068 01D1     		bne	.L852
1376:src/int.c     **** 
 13575              		.loc 1 1376 3 is_stmt 1 view .LVU3834
1376:src/int.c     **** 
 13576              		.loc 1 1376 7 is_stmt 0 view .LVU3835
 13577 006a FF19     		adds	r7, r7, r7
 13578 006c 7641     		adcs	r6, r6, r6
 13579              	.L852:
 13580              	.LVL1052:
1380:src/int.c     **** 	a1 = 1;
 13581              		.loc 1 1380 2 is_stmt 1 view .LVU3836
1381:src/int.c     **** 	for (i=1; i<n; i++) {
 13582              		.loc 1 1381 2 view .LVU3837
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13583              		.loc 1 1382 2 view .LVU3838
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13584              		.loc 1 1382 12 view .LVU3839
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13585              		.loc 1 1382 8 is_stmt 0 view .LVU3840
 13586 006e 4FF00109 		mov	r9, #1
1380:src/int.c     **** 	a1 = 1;
 13587              		.loc 1 1380 5 view .LVU3841
 13588 0072 CDF80C80 		str	r8, [sp, #12]
ARM GAS  /tmp/ccl34fCK.s 			page 329


1381:src/int.c     **** 	for (i=1; i<n; i++) {
 13589              		.loc 1 1381 5 view .LVU3842
 13590 0076 4FF0010A 		mov	r10, #1
1380:src/int.c     **** 	a1 = 1;
 13591              		.loc 1 1380 5 view .LVU3843
 13592 007a C846     		mov	r8, r9
 13593              	.LVL1053:
1381:src/int.c     **** 	for (i=1; i<n; i++) {
 13594              		.loc 1 1381 5 view .LVU3844
 13595 007c 4FF0000B 		mov	fp, #0
1380:src/int.c     **** 	a1 = 1;
 13596              		.loc 1 1380 5 view .LVU3845
 13597 0080 0020     		movs	r0, #0
 13598 0082 0021     		movs	r1, #0
 13599 0084 B946     		mov	r9, r7
 13600 0086 0496     		str	r6, [sp, #16]
 13601              	.LVL1054:
 13602              	.L857:
 13603              	.LBB1930:
1383:src/int.c     **** 		if ((anew & tbm) || anew < a1)
 13604              		.loc 1 1383 3 is_stmt 1 view .LVU3846
1385:src/int.c     **** 		a0 = a1;
 13605              		.loc 1 1385 4 view .LVU3847
 13606              	.LBB1931:
 13607              	.LBI1931:
  66:src/int.c     **** #ifndef TINY_BUILD
 13608              		.loc 1 66 6 view .LVU3848
 13609              	.LBB1932:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13610              		.loc 1 68 2 view .LVU3849
 13611 0088 10EB0A04 		adds	r4, r0, r10
 13612 008c 51EB0B05 		adcs	r5, r1, fp
 13613              	.LBE1932:
 13614              	.LBE1931:
1384:src/int.c     **** 			set_overflow(1);
 13615              		.loc 1 1384 13 is_stmt 0 view .LVU3850
 13616 0090 0499     		ldr	r1, [sp, #16]
 13617 0092 09EA0406 		and	r6, r9, r4
 13618 0096 01EA0507 		and	r7, r1, r5
 13619 009a 4FF00002 		mov	r2, #0
 13620 009e 4FF00003 		mov	r3, #0
 13621 00a2 24BF     		itt	cs
 13622 00a4 0122     		movcs	r2, #1
 13623 00a6 0023     		movcs	r3, #0
1384:src/int.c     **** 			set_overflow(1);
 13624              		.loc 1 1384 6 view .LVU3851
 13625 00a8 56EA070C 		orrs	ip, r6, r7
 13626 00ac 5046     		mov	r0, r10
 13627              	.LVL1055:
1384:src/int.c     **** 			set_overflow(1);
 13628              		.loc 1 1384 6 view .LVU3852
 13629 00ae 5946     		mov	r1, fp
 13630              	.LBE1930:
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13631              		.loc 1 1382 18 view .LVU3853
 13632 00b0 08F10108 		add	r8, r8, #1
 13633              	.LVL1056:
ARM GAS  /tmp/ccl34fCK.s 			page 330


 13634              	.LBB1935:
1383:src/int.c     **** 		if ((anew & tbm) || anew < a1)
 13635              		.loc 1 1383 32 view .LVU3854
 13636 00b4 A246     		mov	r10, r4
 13637              	.LVL1057:
1383:src/int.c     **** 		if ((anew & tbm) || anew < a1)
 13638              		.loc 1 1383 32 view .LVU3855
 13639 00b6 AB46     		mov	fp, r5
 13640              	.LVL1058:
1384:src/int.c     **** 			set_overflow(1);
 13641              		.loc 1 1384 3 is_stmt 1 view .LVU3856
1384:src/int.c     **** 			set_overflow(1);
 13642              		.loc 1 1384 6 is_stmt 0 view .LVU3857
 13643 00b8 01D1     		bne	.L855
1384:src/int.c     **** 			set_overflow(1);
 13644              		.loc 1 1384 20 discriminator 1 view .LVU3858
 13645 00ba 1343     		orrs	r3, r2, r3
 13646 00bc 05D0     		beq	.L856
 13647              	.L855:
 13648 00be CDE90001 		strd	r0, [sp]
 13649              	.LBB1934:
 13650              	.LBB1933:
 13651 00c2 FFF7FEFF 		bl	set_overflow.part.0
 13652              	.LVL1059:
 13653 00c6 DDE90001 		ldrd	r0, [sp]
 13654              	.L856:
 13655              	.LVL1060:
1384:src/int.c     **** 			set_overflow(1);
 13656              		.loc 1 1384 20 discriminator 1 view .LVU3859
 13657              	.LBE1933:
 13658              	.LBE1934:
1386:src/int.c     **** 		a1 = anew;
 13659              		.loc 1 1386 3 is_stmt 1 discriminator 2 view .LVU3860
1387:src/int.c     **** 	}
 13660              		.loc 1 1387 3 discriminator 2 view .LVU3861
1387:src/int.c     **** 	}
 13661              		.loc 1 1387 3 is_stmt 0 discriminator 2 view .LVU3862
 13662              	.LBE1935:
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13663              		.loc 1 1382 17 is_stmt 1 discriminator 2 view .LVU3863
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13664              		.loc 1 1382 12 discriminator 2 view .LVU3864
1382:src/int.c     **** 		const unsigned long long int anew = a0 + a1;
 13665              		.loc 1 1382 2 is_stmt 0 discriminator 2 view .LVU3865
 13666 00ca 039B     		ldr	r3, [sp, #12]
 13667 00cc 4345     		cmp	r3, r8
 13668 00ce DBD8     		bhi	.L857
1389:src/int.c     **** #else
 13669              		.loc 1 1389 2 is_stmt 1 view .LVU3866
1389:src/int.c     **** #else
 13670              		.loc 1 1389 9 is_stmt 0 view .LVU3867
 13671 00d0 059A     		ldr	r2, [sp, #20]
 13672 00d2 2046     		mov	r0, r4
 13673              	.LVL1061:
1389:src/int.c     **** #else
 13674              		.loc 1 1389 9 view .LVU3868
 13675 00d4 2946     		mov	r1, r5
ARM GAS  /tmp/ccl34fCK.s 			page 331


 13676 00d6 FFF7FEFF 		bl	build_value
 13677              	.LVL1062:
 13678              	.L846:
1393:src/int.c     **** 
 13679              		.loc 1 1393 1 view .LVU3869
 13680 00da 09B0     		add	sp, sp, #36
 13681              		.cfi_remember_state
 13682              		.cfi_def_cfa_offset 36
 13683              		@ sp needed
 13684 00dc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 13685              	.LVL1063:
 13686              	.L868:
 13687              		.cfi_restore_state
1366:src/int.c     **** 
 13688              		.loc 1 1366 3 is_stmt 1 view .LVU3870
 13689              	.LBB1936:
 13690              	.LBI1936:
 146:src/int.c     **** #ifndef TINY_BUILD
 13691              		.loc 1 146 15 view .LVU3871
 13692              	.LBB1937:
 148:src/int.c     **** 	long long int v = mask_value(x);
 13693              		.loc 1 148 2 view .LVU3872
 13694              	.LBE1937:
 13695              	.LBE1936:
  39:src/int.c     **** }
 13696              		.loc 1 39 2 view .LVU3873
 13697              	.LBB1947:
 13698              	.LBB1946:
 149:src/int.c     **** 
 13699              		.loc 1 149 2 view .LVU3874
 13700              	.LBB1938:
 13701              	.LBB1939:
 13702              	.LBB1940:
 13703              	.LBB1941:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13704              		.loc 1 43 26 is_stmt 0 view .LVU3875
 13705 00e0 96F8E907 		ldrb	r0, [r6, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13706              		.loc 1 43 15 view .LVU3876
 13707 00e4 00F03F03 		and	r3, r0, #63
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13708              		.loc 1 44 26 view .LVU3877
 13709 00e8 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13710              		.loc 1 44 5 view .LVU3878
 13711 00ea 3E2A     		cmp	r2, #62
 13712              	.LBE1941:
 13713              	.LBE1940:
 13714              	.LBE1939:
 13715              	.LBE1938:
 149:src/int.c     **** 
 13716              		.loc 1 149 20 view .LVU3879
 13717 00ec 2046     		mov	r0, r4
 13718 00ee 2946     		mov	r1, r5
 13719              	.LVL1064:
 13720              	.LBB1945:
 13721              	.LBI1938:
ARM GAS  /tmp/ccl34fCK.s 			page 332


  91:src/int.c     **** #ifndef TINY_BUILD
 13722              		.loc 1 91 15 is_stmt 1 view .LVU3880
 13723              	.LBB1944:
  93:src/int.c     **** 	long long int mask;
 13724              		.loc 1 93 2 view .LVU3881
 13725              	.LBB1943:
 13726              	.LBI1940:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 13727              		.loc 1 42 14 view .LVU3882
 13728              	.LBB1942:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 13729              		.loc 1 43 2 view .LVU3883
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13730              		.loc 1 44 2 view .LVU3884
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13731              		.loc 1 44 5 is_stmt 0 view .LVU3885
 13732 00f0 F3D8     		bhi	.L846
 13733              	.LVL1065:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 13734              		.loc 1 44 5 view .LVU3886
 13735              	.LBE1942:
 13736              	.LBE1943:
  94:src/int.c     **** 
 13737              		.loc 1 94 2 is_stmt 1 view .LVU3887
  96:src/int.c     **** 		return v;
 13738              		.loc 1 96 2 view .LVU3888
  98:src/int.c     **** 	return v & mask;
 13739              		.loc 1 98 2 view .LVU3889
  99:src/int.c     **** #else
 13740              		.loc 1 99 2 view .LVU3890
  98:src/int.c     **** 	return v & mask;
 13741              		.loc 1 98 14 is_stmt 0 view .LVU3891
 13742 00f2 0120     		movs	r0, #1
 13743              	.LVL1066:
  98:src/int.c     **** 	return v & mask;
 13744              		.loc 1 98 14 view .LVU3892
 13745 00f4 A3F12001 		sub	r1, r3, #32
 13746              	.LVL1067:
  98:src/int.c     **** 	return v & mask;
 13747              		.loc 1 98 14 view .LVU3893
 13748 00f8 C3F12002 		rsb	r2, r3, #32
 13749 00fc 20FA02F2 		lsr	r2, r0, r2
 13750 0100 00FA01F1 		lsl	r1, r0, r1
 13751 0104 9840     		lsls	r0, r0, r3
  98:src/int.c     **** 	return v & mask;
 13752              		.loc 1 98 7 view .LVU3894
 13753 0106 10F1FF30 		adds	r0, r0, #-1
  98:src/int.c     **** 	return v & mask;
 13754              		.loc 1 98 14 view .LVU3895
 13755 010a 41EA0201 		orr	r1, r1, r2
  98:src/int.c     **** 	return v & mask;
 13756              		.loc 1 98 7 view .LVU3896
 13757 010e 41F1FF31 		adc	r1, r1, #-1
  99:src/int.c     **** #else
 13758              		.loc 1 99 11 view .LVU3897
 13759 0112 2940     		ands	r1, r1, r5
 13760 0114 2040     		ands	r0, r0, r4
ARM GAS  /tmp/ccl34fCK.s 			page 333


 13761              	.LBE1944:
 13762              	.LBE1945:
 13763              	.LBE1946:
 13764              	.LBE1947:
1393:src/int.c     **** 
 13765              		.loc 1 1393 1 view .LVU3898
 13766 0116 09B0     		add	sp, sp, #36
 13767              		.cfi_remember_state
 13768              		.cfi_def_cfa_offset 36
 13769              		@ sp needed
 13770 0118 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 13771              	.LVL1068:
 13772              	.L867:
 13773              		.cfi_restore_state
1360:src/int.c     **** 		return 0;
 13774              		.loc 1 1360 3 is_stmt 1 view .LVU3899
 13775              	.LBB1948:
 13776              	.LBI1948:
  66:src/int.c     **** #ifndef TINY_BUILD
 13777              		.loc 1 66 6 view .LVU3900
 13778              	.LBB1949:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13779              		.loc 1 68 2 view .LVU3901
 13780 011c FFF7FEFF 		bl	set_overflow.part.0
 13781              	.LVL1069:
  68:src/int.c     **** 		set_user_flag(OVERFLOW_FLAG);
 13782              		.loc 1 68 2 is_stmt 0 view .LVU3902
 13783              	.LBE1949:
 13784              	.LBE1948:
1361:src/int.c     **** 	}
 13785              		.loc 1 1361 3 is_stmt 1 view .LVU3903
1361:src/int.c     **** 	}
 13786              		.loc 1 1361 10 is_stmt 0 view .LVU3904
 13787 0120 0020     		movs	r0, #0
 13788 0122 0146     		mov	r1, r0
1393:src/int.c     **** 
 13789              		.loc 1 1393 1 view .LVU3905
 13790 0124 09B0     		add	sp, sp, #36
 13791              		.cfi_remember_state
 13792              		.cfi_def_cfa_offset 36
 13793              		@ sp needed
 13794 0126 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 13795              	.LVL1070:
 13796              	.L858:
 13797              		.cfi_restore_state
 13798              	.LBB1950:
 13799              	.LBB1929:
 13800              	.LBB1928:
 13801              	.LBB1927:
1393:src/int.c     **** 
 13802              		.loc 1 1393 1 view .LVU3906
 13803 012a 0027     		movs	r7, #0
 13804 012c 4FF00046 		mov	r6, #-2147483648
 13805 0130 98E7     		b	.L851
 13806              	.L870:
 13807 0132 00BF     		.align	2
 13808              	.L869:
ARM GAS  /tmp/ccl34fCK.s 			page 334


 13809 0134 00000000 		.word	PersistentRam
 13810              	.LBE1927:
 13811              	.LBE1928:
 13812              	.LBE1929:
 13813              	.LBE1950:
 13814              		.cfi_endproc
 13815              	.LFE68:
 13817              		.section	.text.isPrime,"ax",%progbits
 13818              		.align	1
 13819              		.p2align 2,,3
 13820              		.global	isPrime
 13821              		.syntax unified
 13822              		.thumb
 13823              		.thumb_func
 13824              		.fpu fpv4-sp-d16
 13826              	isPrime:
 13827              	.LVL1071:
 13828              	.LFB71:
1419:src/int.c     **** 
1420:src/int.c     **** /* Test if a number is prime or not using a Miller-Rabin test */
1421:src/int.c     **** #ifndef TINY_BUILD
1422:src/int.c     **** static const unsigned char primes[] = {
1423:src/int.c     **** 	2, 3, 5, 7,	11, 13, 17, 19,
1424:src/int.c     **** 	23, 29, 31, 37,	41, 43, 47, 53,
1425:src/int.c     **** };
1426:src/int.c     **** #define N_PRIMES	(sizeof(primes) / sizeof(unsigned char))
1427:src/int.c     **** #define QUICK_CHECK	(59*59-1)
1428:src/int.c     **** #endif
1429:src/int.c     **** 
1430:src/int.c     **** int isPrime(unsigned long long int p) {
 13829              		.loc 1 1430 39 is_stmt 1 view -0
 13830              		.cfi_startproc
 13831              		@ args = 0, pretend = 0, frame = 48
 13832              		@ frame_needed = 0, uses_anonymous_args = 0
1431:src/int.c     **** #ifndef TINY_BUILD
1432:src/int.c     **** 	int i;
 13833              		.loc 1 1432 2 view .LVU3908
1433:src/int.c     **** 	unsigned long long int s;
 13834              		.loc 1 1433 2 view .LVU3909
1434:src/int.c     **** #define PRIME_ITERATION	15
1435:src/int.c     **** 
1436:src/int.c     **** 	if (p < 2)	return 0;
 13835              		.loc 1 1436 2 view .LVU3910
1430:src/int.c     **** #ifndef TINY_BUILD
 13836              		.loc 1 1430 39 is_stmt 0 view .LVU3911
 13837 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 13838              		.cfi_def_cfa_offset 36
 13839              		.cfi_offset 4, -36
 13840              		.cfi_offset 5, -32
 13841              		.cfi_offset 6, -28
 13842              		.cfi_offset 7, -24
 13843              		.cfi_offset 8, -20
 13844              		.cfi_offset 9, -16
 13845              		.cfi_offset 10, -12
 13846              		.cfi_offset 11, -8
 13847              		.cfi_offset 14, -4
 13848              		.loc 1 1436 5 view .LVU3912
ARM GAS  /tmp/ccl34fCK.s 			page 335


 13849 0004 0029     		cmp	r1, #0
 13850 0006 08BF     		it	eq
 13851 0008 0228     		cmpeq	r0, #2
1430:src/int.c     **** #ifndef TINY_BUILD
 13852              		.loc 1 1430 39 view .LVU3913
 13853 000a 8FB0     		sub	sp, sp, #60
 13854              		.cfi_def_cfa_offset 96
 13855              		.loc 1 1436 5 view .LVU3914
 13856 000c C0F0E080 		bcc	.L893
1437:src/int.c     **** 
1438:src/int.c     **** 	/* We fail for numbers >= 2^63 */
1439:src/int.c     **** 	if ((p & 0x8000000000000000ull) != 0) {
 13857              		.loc 1 1439 5 view .LVU3915
 13858 0010 0028     		cmp	r0, #0
 13859 0012 71F10003 		sbcs	r3, r1, #0
 13860 0016 8046     		mov	r8, r0
 13861 0018 8946     		mov	r9, r1
 13862              		.loc 1 1439 2 is_stmt 1 view .LVU3916
 13863              		.loc 1 1439 5 is_stmt 0 view .LVU3917
 13864 001a C0F2E880 		blt	.L873
 13865 001e 7C4E     		ldr	r6, .L913
 13866 0020 0996     		str	r6, [sp, #36]
 13867 0022 0224     		movs	r4, #2
 13868 0024 06F10F07 		add	r7, r6, #15
 13869 0028 01E0     		b	.L874
 13870              	.LVL1072:
 13871              	.L912:
 13872              		.loc 1 1439 5 view .LVU3918
 13873 002a 16F8014F 		ldrb	r4, [r6, #1]!	@ zero_extendqisi2
 13874              	.LVL1073:
 13875              	.L874:
1440:src/int.c     **** 		report_err(ERR_DOMAIN);
1441:src/int.c     **** 		return 1;
1442:src/int.c     **** 	}
1443:src/int.c     **** 
1444:src/int.c     **** 	/* Quick check for divisibility by small primes */
1445:src/int.c     **** 	for (i=0; i<N_PRIMES; i++)
1446:src/int.c     **** 		if (p == primes[i])
 13876              		.loc 1 1446 3 is_stmt 1 view .LVU3919
1447:src/int.c     **** 			return 1;
1448:src/int.c     **** 		else if ((p % primes[i]) == 0)
 13877              		.loc 1 1448 8 view .LVU3920
1446:src/int.c     **** 			return 1;
 13878              		.loc 1 1446 18 is_stmt 0 view .LVU3921
 13879 002e 0025     		movs	r5, #0
 13880 0030 E4B2     		uxtb	r4, r4
1446:src/int.c     **** 			return 1;
 13881              		.loc 1 1446 6 view .LVU3922
 13882 0032 4D45     		cmp	r5, r9
 13883 0034 08BF     		it	eq
 13884 0036 4445     		cmpeq	r4, r8
 13885              		.loc 1 1448 15 view .LVU3923
 13886 0038 4046     		mov	r0, r8
 13887 003a 4946     		mov	r1, r9
 13888 003c 2246     		mov	r2, r4
 13889 003e 2B46     		mov	r3, r5
1446:src/int.c     **** 			return 1;
ARM GAS  /tmp/ccl34fCK.s 			page 336


 13890              		.loc 1 1446 6 view .LVU3924
 13891 0040 00F0AA80 		beq	.L894
 13892              		.loc 1 1448 15 view .LVU3925
 13893 0044 FFF7FEFF 		bl	__aeabi_uldivmod
 13894              	.LVL1074:
1445:src/int.c     **** 		if (p == primes[i])
 13895              		.loc 1 1445 24 is_stmt 1 view .LVU3926
1445:src/int.c     **** 		if (p == primes[i])
 13896              		.loc 1 1445 12 view .LVU3927
 13897              		.loc 1 1448 11 is_stmt 0 view .LVU3928
 13898 0048 1343     		orrs	r3, r2, r3
 13899 004a 00F0C180 		beq	.L893
1445:src/int.c     **** 		if (p == primes[i])
 13900              		.loc 1 1445 2 discriminator 2 view .LVU3929
 13901 004e BE42     		cmp	r6, r7
 13902 0050 EBD1     		bne	.L912
1449:src/int.c     **** 			return 0;
1450:src/int.c     **** 	if (p < QUICK_CHECK)
 13903              		.loc 1 1450 2 is_stmt 1 view .LVU3930
 13904              		.loc 1 1450 5 is_stmt 0 view .LVU3931
 13905 0052 0023     		movs	r3, #0
 13906 0054 40F69752 		movw	r2, #3479
 13907 0058 4B45     		cmp	r3, r9
 13908 005a 08BF     		it	eq
 13909 005c 4245     		cmpeq	r2, r8
 13910 005e 80F09B80 		bcs	.L894
1451:src/int.c     **** 		return 1;
1452:src/int.c     **** 
1453:src/int.c     **** 	s = p - 1;
 13911              		.loc 1 1453 2 is_stmt 1 view .LVU3932
 13912              		.loc 1 1453 4 is_stmt 0 view .LVU3933
 13913 0062 18F1FF33 		adds	r3, r8, #-1
 13914 0066 0693     		str	r3, [sp, #24]
 13915 0068 49F1FF33 		adc	r3, r9, #-1
 13916 006c 0793     		str	r3, [sp, #28]
 13917              	.LVL1075:
1454:src/int.c     **** 	while ((s&1) == 0)
 13918              		.loc 1 1454 2 is_stmt 1 view .LVU3934
 13919              		.loc 1 1454 8 view .LVU3935
 13920              		.loc 1 1454 11 is_stmt 0 view .LVU3936
 13921 006e DDE90645 		ldrd	r4, [sp, #24]
 13922 0072 0021     		movs	r1, #0
 13923 0074 04F00102 		and	r2, r4, #1
 13924 0078 0B46     		mov	r3, r1
 13925              		.loc 1 1454 8 view .LVU3937
 13926 007a 1343     		orrs	r3, r2, r3
 13927 007c 40F0C380 		bne	.L890
 13928 0080 2246     		mov	r2, r4
 13929 0082 2B46     		mov	r3, r5
 13930              	.LVL1076:
 13931              	.L877:
1455:src/int.c     **** 		s /= 2;
 13932              		.loc 1 1455 3 is_stmt 1 view .LVU3938
 13933              		.loc 1 1455 5 is_stmt 0 view .LVU3939
 13934 0084 5008     		lsrs	r0, r2, #1
 13935 0086 40EAC370 		orr	r0, r0, r3, lsl #31
1454:src/int.c     **** 	while ((s&1) == 0)
ARM GAS  /tmp/ccl34fCK.s 			page 337


 13936              		.loc 1 1454 11 view .LVU3940
 13937 008a 00F00104 		and	r4, r0, #1
 13938 008e 0D46     		mov	r5, r1
 13939              		.loc 1 1455 5 view .LVU3941
 13940 0090 5E08     		lsrs	r6, r3, #1
 13941 0092 0246     		mov	r2, r0
 13942              	.LVL1077:
1454:src/int.c     **** 	while ((s&1) == 0)
 13943              		.loc 1 1454 8 view .LVU3942
 13944 0094 54EA0500 		orrs	r0, r4, r5
 13945              		.loc 1 1455 5 view .LVU3943
 13946 0098 3346     		mov	r3, r6
 13947              	.LVL1078:
1454:src/int.c     **** 	while ((s&1) == 0)
 13948              		.loc 1 1454 8 is_stmt 1 view .LVU3944
 13949 009a F3D0     		beq	.L877
 13950 009c CDE90C23 		strd	r2, [sp, #48]
 13951              	.LVL1079:
 13952              	.L876:
1454:src/int.c     **** 	while ((s&1) == 0)
 13953              		.loc 1 1454 8 is_stmt 0 view .LVU3945
 13954 00a0 0220     		movs	r0, #2
 13955              	.L885:
 13956              	.LVL1080:
 13957              	.LBB1951:
1456:src/int.c     **** 
1457:src/int.c     **** 	for(i=0; i<PRIME_ITERATION; i++) {
1458:src/int.c     **** 		unsigned long long int temp = s;
 13958              		.loc 1 1458 3 is_stmt 1 view .LVU3946
1459:src/int.c     **** 		unsigned long long int mod = expmod(primes[i], temp, p);
 13959              		.loc 1 1459 3 view .LVU3947
 13960              		.loc 1 1459 32 is_stmt 0 view .LVU3948
 13961 00a2 DDE90C45 		ldrd	r4, [sp, #48]
 13962 00a6 CDE90089 		strd	r8, [sp]
 13963 00aa 2246     		mov	r2, r4
 13964 00ac 2B46     		mov	r3, r5
 13965 00ae 0021     		movs	r1, #0
 13966 00b0 FFF7FEFF 		bl	expmod
 13967              	.LVL1081:
 13968 00b4 0F46     		mov	r7, r1
1460:src/int.c     **** 		while (temp != p-1 && mod != 1 && mod != p-1) {
 13969              		.loc 1 1460 9 view .LVU3949
 13970 00b6 DDE90612 		ldrd	r1, [sp, #24]
 13971 00ba 2346     		mov	r3, r4
 13972 00bc 9542     		cmp	r5, r2
 13973 00be 08BF     		it	eq
 13974 00c0 8B42     		cmpeq	r3, r1
1459:src/int.c     **** 		unsigned long long int mod = expmod(primes[i], temp, p);
 13975              		.loc 1 1459 32 view .LVU3950
 13976 00c2 0646     		mov	r6, r0
 13977              	.LVL1082:
 13978              		.loc 1 1460 3 is_stmt 1 view .LVU3951
 13979              		.loc 1 1460 9 view .LVU3952
 13980 00c4 2C46     		mov	r4, r5
 13981 00c6 00F08780 		beq	.L891
 13982              		.loc 1 1460 22 is_stmt 0 view .LVU3953
 13983 00ca 002F     		cmp	r7, #0
ARM GAS  /tmp/ccl34fCK.s 			page 338


 13984 00cc 08BF     		it	eq
 13985 00ce 012E     		cmpeq	r6, #1
 13986 00d0 00F09480 		beq	.L892
 13987              		.loc 1 1460 34 view .LVU3954
 13988 00d4 BA42     		cmp	r2, r7
 13989 00d6 08BF     		it	eq
 13990 00d8 B142     		cmpeq	r1, r6
 13991 00da 55D0     		beq	.L880
 13992 00dc CDE90434 		strd	r3, [sp, #16]
 13993              	.LVL1083:
 13994              	.L884:
1461:src/int.c     **** 			mod = mulmod(mod, mod, p);
 13995              		.loc 1 1461 4 is_stmt 1 view .LVU3955
 13996              	.LBB1952:
 13997              	.LBI1952:
1397:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 13998              		.loc 1 1397 27 view .LVU3956
 13999              	.LBB1953:
1398:src/int.c     **** 	while (b > 0) {
 14000              		.loc 1 1398 2 view .LVU3957
1398:src/int.c     **** 	while (b > 0) {
 14001              		.loc 1 1398 30 is_stmt 0 view .LVU3958
 14002 00e0 4246     		mov	r2, r8
 14003 00e2 4B46     		mov	r3, r9
 14004 00e4 3046     		mov	r0, r6
 14005 00e6 3946     		mov	r1, r7
 14006 00e8 FFF7FEFF 		bl	__aeabi_uldivmod
 14007              	.LVL1084:
 14008 00ec 1D46     		mov	r5, r3
1399:src/int.c     **** 		if ((b & 1))
 14009              		.loc 1 1399 8 view .LVU3959
 14010 00ee 56EA0703 		orrs	r3, r6, r7
1398:src/int.c     **** 	while (b > 0) {
 14011              		.loc 1 1398 30 view .LVU3960
 14012 00f2 1446     		mov	r4, r2
 14013              	.LVL1085:
1399:src/int.c     **** 		if ((b & 1))
 14014              		.loc 1 1399 2 is_stmt 1 view .LVU3961
1399:src/int.c     **** 		if ((b & 1))
 14015              		.loc 1 1399 8 view .LVU3962
 14016 00f4 54D0     		beq	.L908
1398:src/int.c     **** 	while (b > 0) {
 14017              		.loc 1 1398 25 is_stmt 0 view .LVU3963
 14018 00f6 0023     		movs	r3, #0
 14019 00f8 0293     		str	r3, [sp, #8]
 14020 00fa 0893     		str	r3, [sp, #32]
 14021              	.LVL1086:
 14022              	.L883:
1400:src/int.c     **** 			x = (x+y)%c;
 14023              		.loc 1 1400 3 is_stmt 1 view .LVU3964
1401:src/int.c     **** 		y = (y+y)%c;
 14024              		.loc 1 1401 4 view .LVU3965
1400:src/int.c     **** 			x = (x+y)%c;
 14025              		.loc 1 1400 10 is_stmt 0 view .LVU3966
 14026 00fc 06F0010A 		and	r10, r6, #1
 14027 0100 4FF0000B 		mov	fp, #0
1400:src/int.c     **** 			x = (x+y)%c;
ARM GAS  /tmp/ccl34fCK.s 			page 339


 14028              		.loc 1 1400 6 view .LVU3967
 14029 0104 5AEA0B03 		orrs	r3, r10, fp
 14030 0108 0AD0     		beq	.L882
1401:src/int.c     **** 		y = (y+y)%c;
 14031              		.loc 1 1401 6 view .LVU3968
 14032 010a 029B     		ldr	r3, [sp, #8]
 14033 010c 0899     		ldr	r1, [sp, #32]
 14034 010e E018     		adds	r0, r4, r3
 14035 0110 45EB0101 		adc	r1, r5, r1
 14036 0114 4246     		mov	r2, r8
 14037 0116 4B46     		mov	r3, r9
 14038 0118 FFF7FEFF 		bl	__aeabi_uldivmod
 14039              	.LVL1087:
 14040 011c 0292     		str	r2, [sp, #8]
 14041              	.LVL1088:
1401:src/int.c     **** 		y = (y+y)%c;
 14042              		.loc 1 1401 6 view .LVU3969
 14043 011e 0893     		str	r3, [sp, #32]
 14044              	.LVL1089:
 14045              	.L882:
1402:src/int.c     **** 		b /= 2;
 14046              		.loc 1 1402 3 is_stmt 1 view .LVU3970
1402:src/int.c     **** 		b /= 2;
 14047              		.loc 1 1402 9 is_stmt 0 view .LVU3971
 14048 0120 2019     		adds	r0, r4, r4
 14049 0122 45EB0501 		adc	r1, r5, r5
1402:src/int.c     **** 		b /= 2;
 14050              		.loc 1 1402 5 view .LVU3972
 14051 0126 4246     		mov	r2, r8
 14052 0128 4B46     		mov	r3, r9
 14053 012a FFF7FEFF 		bl	__aeabi_uldivmod
 14054              	.LVL1090:
1403:src/int.c     **** 	}
 14055              		.loc 1 1403 5 view .LVU3973
 14056 012e 4FEA560C 		lsr	ip, r6, #1
 14057 0132 4CEAC77C 		orr	ip, ip, r7, lsl #31
 14058 0136 7908     		lsrs	r1, r7, #1
 14059 0138 6646     		mov	r6, ip
 14060              	.LVL1091:
1403:src/int.c     **** 	}
 14061              		.loc 1 1403 5 view .LVU3974
 14062 013a 0F46     		mov	r7, r1
1402:src/int.c     **** 		b /= 2;
 14063              		.loc 1 1402 5 view .LVU3975
 14064 013c 1D46     		mov	r5, r3
 14065              	.LVL1092:
1399:src/int.c     **** 		if ((b & 1))
 14066              		.loc 1 1399 8 view .LVU3976
 14067 013e 56EA0703 		orrs	r3, r6, r7
1402:src/int.c     **** 		b /= 2;
 14068              		.loc 1 1402 5 view .LVU3977
 14069 0142 1446     		mov	r4, r2
 14070              	.LVL1093:
1403:src/int.c     **** 	}
 14071              		.loc 1 1403 3 is_stmt 1 view .LVU3978
1399:src/int.c     **** 		if ((b & 1))
 14072              		.loc 1 1399 8 view .LVU3979
ARM GAS  /tmp/ccl34fCK.s 			page 340


 14073 0144 DAD1     		bne	.L883
1405:src/int.c     **** }
 14074              		.loc 1 1405 2 view .LVU3980
1405:src/int.c     **** }
 14075              		.loc 1 1405 11 is_stmt 0 view .LVU3981
 14076 0146 0298     		ldr	r0, [sp, #8]
 14077 0148 0899     		ldr	r1, [sp, #32]
 14078 014a 4246     		mov	r2, r8
 14079              	.LVL1094:
1405:src/int.c     **** }
 14080              		.loc 1 1405 11 view .LVU3982
 14081 014c 4B46     		mov	r3, r9
 14082 014e FFF7FEFF 		bl	__aeabi_uldivmod
 14083              	.LVL1095:
 14084              	.LBE1953:
 14085              	.LBE1952:
1462:src/int.c     **** 			temp += temp;
 14086              		.loc 1 1462 9 view .LVU3983
 14087 0152 0499     		ldr	r1, [sp, #16]
 14088 0154 4918     		adds	r1, r1, r1
 14089 0156 0491     		str	r1, [sp, #16]
 14090              	.LVL1096:
 14091              		.loc 1 1462 9 view .LVU3984
 14092 0158 DDE90445 		ldrd	r4, [sp, #16]
 14093              	.LVL1097:
 14094              		.loc 1 1462 9 view .LVU3985
 14095 015c 2946     		mov	r1, r5
 14096 015e 45EB0101 		adc	r1, r5, r1
 14097 0162 0591     		str	r1, [sp, #20]
 14098              	.LBB1956:
 14099              	.LBB1954:
1405:src/int.c     **** }
 14100              		.loc 1 1405 11 view .LVU3986
 14101 0164 1646     		mov	r6, r2
 14102              	.LVL1098:
1405:src/int.c     **** }
 14103              		.loc 1 1405 11 view .LVU3987
 14104 0166 1F46     		mov	r7, r3
 14105              	.LVL1099:
1405:src/int.c     **** }
 14106              		.loc 1 1405 11 view .LVU3988
 14107              	.LBE1954:
 14108              	.LBE1956:
 14109              		.loc 1 1462 4 is_stmt 1 view .LVU3989
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14110              		.loc 1 1460 9 view .LVU3990
 14111 0168 DDE90412 		ldrd	r1, [sp, #16]
 14112 016c DDE90634 		ldrd	r3, [sp, #24]
 14113 0170 9442     		cmp	r4, r2
 14114 0172 08BF     		it	eq
 14115 0174 8B42     		cmpeq	r3, r1
 14116 0176 33D0     		beq	.L878
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14117              		.loc 1 1460 22 is_stmt 0 discriminator 1 view .LVU3991
 14118 0178 002F     		cmp	r7, #0
 14119 017a 08BF     		it	eq
 14120 017c 012E     		cmpeq	r6, #1
ARM GAS  /tmp/ccl34fCK.s 			page 341


 14121 017e 1DD0     		beq	.L879
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14122              		.loc 1 1460 34 discriminator 2 view .LVU3992
 14123 0180 BC42     		cmp	r4, r7
 14124 0182 08BF     		it	eq
 14125 0184 B342     		cmpeq	r3, r6
 14126 0186 ABD1     		bne	.L884
 14127              	.LVL1100:
 14128              	.L880:
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14129              		.loc 1 1460 34 discriminator 2 view .LVU3993
 14130              	.LBE1951:
1457:src/int.c     **** 		unsigned long long int temp = s;
 14131              		.loc 1 1457 30 is_stmt 1 discriminator 2 view .LVU3994
1457:src/int.c     **** 		unsigned long long int temp = s;
 14132              		.loc 1 1457 11 discriminator 2 view .LVU3995
1457:src/int.c     **** 		unsigned long long int temp = s;
 14133              		.loc 1 1457 2 is_stmt 0 discriminator 2 view .LVU3996
 14134 0188 2249     		ldr	r1, .L913+4
 14135 018a 099B     		ldr	r3, [sp, #36]
 14136 018c 9942     		cmp	r1, r3
 14137 018e 03D0     		beq	.L894
 14138 0190 13F8010F 		ldrb	r0, [r3, #1]!	@ zero_extendqisi2
 14139 0194 0993     		str	r3, [sp, #36]
 14140              	.LVL1101:
1457:src/int.c     **** 		unsigned long long int temp = s;
 14141              		.loc 1 1457 2 discriminator 2 view .LVU3997
 14142 0196 84E7     		b	.L885
 14143              	.LVL1102:
 14144              	.L894:
1447:src/int.c     **** 		else if ((p % primes[i]) == 0)
 14145              		.loc 1 1447 11 view .LVU3998
 14146 0198 0120     		movs	r0, #1
1463:src/int.c     **** 		}
1464:src/int.c     **** 		if(mod!=p-1 && temp%2==0)
1465:src/int.c     **** 			return 0;
1466:src/int.c     **** 	}
1467:src/int.c     **** #endif
1468:src/int.c     **** 	return 1;
1469:src/int.c     **** }
 14147              		.loc 1 1469 1 view .LVU3999
 14148 019a 0FB0     		add	sp, sp, #60
 14149              		.cfi_remember_state
 14150              		.cfi_def_cfa_offset 36
 14151              		@ sp needed
 14152 019c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14153              	.LVL1103:
 14154              	.L908:
 14155              		.cfi_restore_state
 14156              		.loc 1 1469 1 view .LVU4000
 14157 01a0 DDE90601 		ldrd	r0, [sp, #24]
 14158 01a4 DDE90423 		ldrd	r2, [sp, #16]
 14159              	.LVL1104:
 14160              	.L881:
 14161              	.LBB1958:
 14162              	.LBB1957:
 14163              	.LBB1955:
ARM GAS  /tmp/ccl34fCK.s 			page 342


1405:src/int.c     **** }
 14164              		.loc 1 1405 2 is_stmt 1 view .LVU4001
1405:src/int.c     **** }
 14165              		.loc 1 1405 2 is_stmt 0 view .LVU4002
 14166              	.LBE1955:
 14167              	.LBE1957:
1462:src/int.c     **** 		}
 14168              		.loc 1 1462 4 is_stmt 1 view .LVU4003
1462:src/int.c     **** 		}
 14169              		.loc 1 1462 9 is_stmt 0 view .LVU4004
 14170 01a8 9218     		adds	r2, r2, r2
 14171 01aa 5B41     		adcs	r3, r3, r3
 14172              	.LVL1105:
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14173              		.loc 1 1460 9 is_stmt 1 view .LVU4005
 14174 01ac 9942     		cmp	r1, r3
 14175 01ae 08BF     		it	eq
 14176 01b0 9042     		cmpeq	r0, r2
 14177 01b2 F9D1     		bne	.L881
 14178 01b4 CDE90601 		strd	r0, [sp, #24]
 14179 01b8 CDE90423 		strd	r2, [sp, #16]
 14180              	.LVL1106:
 14181              	.L879:
1464:src/int.c     **** 			return 0;
 14182              		.loc 1 1464 22 is_stmt 0 discriminator 1 view .LVU4006
 14183 01bc 049B     		ldr	r3, [sp, #16]
 14184 01be 03F00103 		and	r3, r3, #1
 14185 01c2 0A93     		str	r3, [sp, #40]
 14186 01c4 0023     		movs	r3, #0
 14187 01c6 0B93     		str	r3, [sp, #44]
1464:src/int.c     **** 			return 0;
 14188              		.loc 1 1464 15 discriminator 1 view .LVU4007
 14189 01c8 DDE90A34 		ldrd	r3, [sp, #40]
 14190 01cc 2343     		orrs	r3, r3, r4
 14191 01ce DBD1     		bne	.L880
 14192              	.LVL1107:
 14193              	.L893:
1464:src/int.c     **** 			return 0;
 14194              		.loc 1 1464 15 discriminator 1 view .LVU4008
 14195              	.LBE1958:
1436:src/int.c     **** 
 14196              		.loc 1 1436 20 view .LVU4009
 14197 01d0 0020     		movs	r0, #0
 14198              		.loc 1 1469 1 view .LVU4010
 14199 01d2 0FB0     		add	sp, sp, #60
 14200              		.cfi_remember_state
 14201              		.cfi_def_cfa_offset 36
 14202              		@ sp needed
 14203 01d4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14204              	.LVL1108:
 14205              	.L891:
 14206              		.cfi_restore_state
 14207              	.LBB1959:
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14208              		.loc 1 1460 9 view .LVU4011
 14209 01d8 DDE90C34 		ldrd	r3, [sp, #48]
 14210 01dc CDE90434 		strd	r3, [sp, #16]
ARM GAS  /tmp/ccl34fCK.s 			page 343


 14211              	.LVL1109:
 14212              	.L878:
1464:src/int.c     **** 			return 0;
 14213              		.loc 1 1464 3 is_stmt 1 view .LVU4012
1464:src/int.c     **** 			return 0;
 14214              		.loc 1 1464 5 is_stmt 0 view .LVU4013
 14215 01e0 DDE90634 		ldrd	r3, [sp, #24]
 14216 01e4 BC42     		cmp	r4, r7
 14217 01e6 08BF     		it	eq
 14218 01e8 B342     		cmpeq	r3, r6
 14219 01ea E7D1     		bne	.L879
 14220 01ec CCE7     		b	.L880
 14221              	.LVL1110:
 14222              	.L873:
1464:src/int.c     **** 			return 0;
 14223              		.loc 1 1464 5 view .LVU4014
 14224              	.LBE1959:
1440:src/int.c     **** 		return 1;
 14225              		.loc 1 1440 3 is_stmt 1 view .LVU4015
 14226 01ee 0120     		movs	r0, #1
 14227              	.LVL1111:
1440:src/int.c     **** 		return 1;
 14228              		.loc 1 1440 3 is_stmt 0 view .LVU4016
 14229 01f0 FFF7FEFF 		bl	report_err
 14230              	.LVL1112:
1441:src/int.c     **** 	}
 14231              		.loc 1 1441 3 is_stmt 1 view .LVU4017
1441:src/int.c     **** 	}
 14232              		.loc 1 1441 10 is_stmt 0 view .LVU4018
 14233 01f4 0120     		movs	r0, #1
 14234              		.loc 1 1469 1 view .LVU4019
 14235 01f6 0FB0     		add	sp, sp, #60
 14236              		.cfi_remember_state
 14237              		.cfi_def_cfa_offset 36
 14238              		@ sp needed
 14239 01f8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14240              	.LVL1113:
 14241              	.L892:
 14242              		.cfi_restore_state
 14243              	.LBB1960:
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14244              		.loc 1 1460 22 view .LVU4020
 14245 01fc DDE90C34 		ldrd	r3, [sp, #48]
 14246 0200 CDE90434 		strd	r3, [sp, #16]
 14247 0204 DAE7     		b	.L879
 14248              	.LVL1114:
 14249              	.L890:
1460:src/int.c     **** 			mod = mulmod(mod, mod, p);
 14250              		.loc 1 1460 22 view .LVU4021
 14251              	.LBE1960:
1454:src/int.c     **** 		s /= 2;
 14252              		.loc 1 1454 8 view .LVU4022
 14253 0206 DDE90634 		ldrd	r3, [sp, #24]
 14254 020a CDE90C34 		strd	r3, [sp, #48]
 14255 020e 47E7     		b	.L876
 14256              	.L914:
 14257              		.align	2
ARM GAS  /tmp/ccl34fCK.s 			page 344


 14258              	.L913:
 14259 0210 00000000 		.word	.LANCHOR0
 14260 0214 0E000000 		.word	.LANCHOR0+14
 14261              		.cfi_endproc
 14262              	.LFE71:
 14264              		.section	.text.intmodop,"ax",%progbits
 14265              		.align	1
 14266              		.p2align 2,,3
 14267              		.global	intmodop
 14268              		.syntax unified
 14269              		.thumb
 14270              		.thumb_func
 14271              		.fpu fpv4-sp-d16
 14273              	intmodop:
 14274              	.LVL1115:
 14275              	.LFB72:
1470:src/int.c     **** 
1471:src/int.c     **** #ifdef INCLUDE_INT_MODULO_OPS
1472:src/int.c     **** long long int intmodop(long long int z, long long int y, long long int x) {
 14276              		.loc 1 1472 75 is_stmt 1 view -0
 14277              		.cfi_startproc
 14278              		@ args = 8, pretend = 0, frame = 24
 14279              		@ frame_needed = 0, uses_anonymous_args = 0
1473:src/int.c     **** 	int sx, sy, sz;
 14280              		.loc 1 1473 2 view .LVU4024
1474:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 14281              		.loc 1 1474 2 view .LVU4025
1472:src/int.c     **** 	int sx, sy, sz;
 14282              		.loc 1 1472 75 is_stmt 0 view .LVU4026
 14283 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 14284              		.cfi_def_cfa_offset 36
 14285              		.cfi_offset 4, -36
 14286              		.cfi_offset 5, -32
 14287              		.cfi_offset 6, -28
 14288              		.cfi_offset 7, -24
 14289              		.cfi_offset 8, -20
 14290              		.cfi_offset 9, -16
 14291              		.cfi_offset 10, -12
 14292              		.cfi_offset 11, -8
 14293              		.cfi_offset 14, -4
 14294 0004 89B0     		sub	sp, sp, #36
 14295              		.cfi_def_cfa_offset 72
1472:src/int.c     **** 	int sx, sy, sz;
 14296              		.loc 1 1472 75 view .LVU4027
 14297 0006 1746     		mov	r7, r2
 14298 0008 0546     		mov	r5, r0
 14299 000a 0C46     		mov	r4, r1
 14300              		.loc 1 1474 30 view .LVU4028
 14301 000c 05AA     		add	r2, sp, #20
 14302              	.LVL1116:
 14303              		.loc 1 1474 30 view .LVU4029
 14304 000e DDE91201 		ldrd	r0, [sp, #72]
 14305              	.LVL1117:
1472:src/int.c     **** 	int sx, sy, sz;
 14306              		.loc 1 1472 75 view .LVU4030
 14307 0012 1E46     		mov	r6, r3
 14308              		.loc 1 1474 30 view .LVU4031
ARM GAS  /tmp/ccl34fCK.s 			page 345


 14309 0014 FFF7FEFF 		bl	extract_value
 14310              	.LVL1118:
 14311 0018 0246     		mov	r2, r0
 14312 001a 0B46     		mov	r3, r1
1475:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 14313              		.loc 1 1475 30 view .LVU4032
 14314 001c 3846     		mov	r0, r7
 14315 001e 3146     		mov	r1, r6
1474:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 14316              		.loc 1 1474 30 view .LVU4033
 14317 0020 9046     		mov	r8, r2
 14318              		.loc 1 1475 30 view .LVU4034
 14319 0022 06AA     		add	r2, sp, #24
1474:src/int.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 14320              		.loc 1 1474 30 view .LVU4035
 14321 0024 9946     		mov	r9, r3
 14322              	.LVL1119:
 14323              		.loc 1 1475 2 is_stmt 1 view .LVU4036
 14324              		.loc 1 1475 30 is_stmt 0 view .LVU4037
 14325 0026 FFF7FEFF 		bl	extract_value
 14326              	.LVL1120:
 14327 002a 0246     		mov	r2, r0
 14328 002c 0B46     		mov	r3, r1
1476:src/int.c     **** 	unsigned long long int vz = extract_value(z, &sz);
 14329              		.loc 1 1476 30 view .LVU4038
 14330 002e 2846     		mov	r0, r5
 14331 0030 2146     		mov	r1, r4
1475:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 14332              		.loc 1 1475 30 view .LVU4039
 14333 0032 1646     		mov	r6, r2
 14334              		.loc 1 1476 30 view .LVU4040
 14335 0034 07AA     		add	r2, sp, #28
1475:src/int.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 14336              		.loc 1 1475 30 view .LVU4041
 14337 0036 1F46     		mov	r7, r3
 14338              	.LVL1121:
 14339              		.loc 1 1476 2 is_stmt 1 view .LVU4042
 14340              		.loc 1 1476 30 is_stmt 0 view .LVU4043
 14341 0038 FFF7FEFF 		bl	extract_value
 14342              	.LVL1122:
1477:src/int.c     **** 	unsigned long long int r;
1478:src/int.c     **** 
1479:src/int.c     **** 	if (sx || sy || sz || vx <= 1)
 14343              		.loc 1 1479 15 view .LVU4044
 14344 003c DDE90535 		ldrd	r3, r5, [sp, #20]
 14345 0040 079A     		ldr	r2, [sp, #28]
 14346 0042 2B43     		orrs	r3, r3, r5
 14347 0044 1343     		orrs	r3, r3, r2
1476:src/int.c     **** 	unsigned long long int vz = extract_value(z, &sz);
 14348              		.loc 1 1476 30 view .LVU4045
 14349 0046 0446     		mov	r4, r0
 14350              	.LVL1123:
1477:src/int.c     **** 	unsigned long long int r;
 14351              		.loc 1 1477 2 is_stmt 1 view .LVU4046
 14352              		.loc 1 1479 2 view .LVU4047
 14353              		.loc 1 1479 15 is_stmt 0 view .LVU4048
 14354 0048 62D1     		bne	.L916
ARM GAS  /tmp/ccl34fCK.s 			page 346


 14355              		.loc 1 1479 21 discriminator 3 view .LVU4049
 14356 004a B9F1000F 		cmp	r9, #0
 14357 004e 08BF     		it	eq
 14358 0050 B8F1020F 		cmpeq	r8, #2
 14359 0054 5CD3     		bcc	.L916
1480:src/int.c     **** 		report_err(ERR_DOMAIN);
1481:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14360              		.loc 1 1481 2 is_stmt 1 view .LVU4050
 14361              		.loc 1 1481 16 is_stmt 0 view .LVU4051
 14362 0056 394B     		ldr	r3, .L931
 14363              		.loc 1 1481 5 view .LVU4052
 14364 0058 1A88     		ldrh	r2, [r3]
 14365 005a 40F20A43 		movw	r3, #1034
 14366 005e 9A42     		cmp	r2, r3
 14367 0060 61D1     		bne	.L918
 14368              	.LVL1124:
 14369              	.L930:
1482:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14370              		.loc 1 1482 3 is_stmt 1 view .LVU4053
 14371              	.LBB1961:
 14372              	.LBI1961:
1397:src/int.c     **** 	unsigned long long int x=0, y=a%c;
 14373              		.loc 1 1397 27 view .LVU4054
 14374              	.LBB1962:
1398:src/int.c     **** 	while (b > 0) {
 14375              		.loc 1 1398 2 view .LVU4055
1398:src/int.c     **** 	while (b > 0) {
 14376              		.loc 1 1398 30 is_stmt 0 view .LVU4056
 14377 0062 2046     		mov	r0, r4
 14378 0064 4246     		mov	r2, r8
 14379 0066 4B46     		mov	r3, r9
 14380 0068 FFF7FEFF 		bl	__aeabi_uldivmod
 14381              	.LVL1125:
1398:src/int.c     **** 	while (b > 0) {
 14382              		.loc 1 1398 30 view .LVU4057
 14383 006c 1D46     		mov	r5, r3
1399:src/int.c     **** 		if ((b & 1))
 14384              		.loc 1 1399 8 view .LVU4058
 14385 006e 56EA0703 		orrs	r3, r6, r7
1398:src/int.c     **** 	while (b > 0) {
 14386              		.loc 1 1398 30 view .LVU4059
 14387 0072 1446     		mov	r4, r2
 14388              	.LVL1126:
1399:src/int.c     **** 		if ((b & 1))
 14389              		.loc 1 1399 2 is_stmt 1 view .LVU4060
1399:src/int.c     **** 		if ((b & 1))
 14390              		.loc 1 1399 8 view .LVU4061
 14391 0074 5FD0     		beq	.L924
1398:src/int.c     **** 	while (b > 0) {
 14392              		.loc 1 1398 25 is_stmt 0 view .LVU4062
 14393 0076 0023     		movs	r3, #0
 14394 0078 CDE90233 		strd	r3, r3, [sp, #8]
 14395              	.LVL1127:
 14396              	.L921:
1400:src/int.c     **** 			x = (x+y)%c;
 14397              		.loc 1 1400 3 is_stmt 1 view .LVU4063
1401:src/int.c     **** 		y = (y+y)%c;
ARM GAS  /tmp/ccl34fCK.s 			page 347


 14398              		.loc 1 1401 4 view .LVU4064
1400:src/int.c     **** 			x = (x+y)%c;
 14399              		.loc 1 1400 10 is_stmt 0 view .LVU4065
 14400 007c 06F0010A 		and	r10, r6, #1
 14401 0080 4FF0000B 		mov	fp, #0
1400:src/int.c     **** 			x = (x+y)%c;
 14402              		.loc 1 1400 6 view .LVU4066
 14403 0084 5AEA0B03 		orrs	r3, r10, fp
 14404 0088 0AD0     		beq	.L920
1401:src/int.c     **** 		y = (y+y)%c;
 14405              		.loc 1 1401 6 view .LVU4067
 14406 008a 029B     		ldr	r3, [sp, #8]
 14407 008c 0399     		ldr	r1, [sp, #12]
 14408 008e E018     		adds	r0, r4, r3
 14409 0090 45EB0101 		adc	r1, r5, r1
 14410 0094 4246     		mov	r2, r8
 14411 0096 4B46     		mov	r3, r9
 14412 0098 FFF7FEFF 		bl	__aeabi_uldivmod
 14413              	.LVL1128:
 14414 009c CDE90223 		strd	r2, r3, [sp, #8]
 14415              	.LVL1129:
 14416              	.L920:
1402:src/int.c     **** 		b /= 2;
 14417              		.loc 1 1402 3 is_stmt 1 view .LVU4068
1402:src/int.c     **** 		b /= 2;
 14418              		.loc 1 1402 9 is_stmt 0 view .LVU4069
 14419 00a0 2019     		adds	r0, r4, r4
 14420 00a2 45EB0501 		adc	r1, r5, r5
1402:src/int.c     **** 		b /= 2;
 14421              		.loc 1 1402 5 view .LVU4070
 14422 00a6 4246     		mov	r2, r8
 14423 00a8 4B46     		mov	r3, r9
 14424 00aa FFF7FEFF 		bl	__aeabi_uldivmod
 14425              	.LVL1130:
1403:src/int.c     **** 	}
 14426              		.loc 1 1403 5 view .LVU4071
 14427 00ae 4FEA560C 		lsr	ip, r6, #1
 14428 00b2 4CEAC77C 		orr	ip, ip, r7, lsl #31
 14429 00b6 7908     		lsrs	r1, r7, #1
 14430 00b8 6646     		mov	r6, ip
 14431              	.LVL1131:
1403:src/int.c     **** 	}
 14432              		.loc 1 1403 5 view .LVU4072
 14433 00ba 0F46     		mov	r7, r1
1402:src/int.c     **** 		b /= 2;
 14434              		.loc 1 1402 5 view .LVU4073
 14435 00bc 1D46     		mov	r5, r3
 14436              	.LVL1132:
1399:src/int.c     **** 		if ((b & 1))
 14437              		.loc 1 1399 8 view .LVU4074
 14438 00be 56EA0703 		orrs	r3, r6, r7
1402:src/int.c     **** 		b /= 2;
 14439              		.loc 1 1402 5 view .LVU4075
 14440 00c2 1446     		mov	r4, r2
 14441              	.LVL1133:
1403:src/int.c     **** 	}
 14442              		.loc 1 1403 3 is_stmt 1 view .LVU4076
ARM GAS  /tmp/ccl34fCK.s 			page 348


1399:src/int.c     **** 		if ((b & 1))
 14443              		.loc 1 1399 8 view .LVU4077
 14444 00c4 DAD1     		bne	.L921
 14445 00c6 DDE90201 		ldrd	r0, r1, [sp, #8]
 14446 00ca 4246     		mov	r2, r8
 14447              	.LVL1134:
1399:src/int.c     **** 		if ((b & 1))
 14448              		.loc 1 1399 8 is_stmt 0 view .LVU4078
 14449 00cc 4B46     		mov	r3, r9
 14450 00ce FFF7FEFF 		bl	__aeabi_uldivmod
 14451              	.LVL1135:
 14452 00d2 1046     		mov	r0, r2
 14453 00d4 1946     		mov	r1, r3
 14454              	.LVL1136:
 14455              	.L922:
1399:src/int.c     **** 		if ((b & 1))
 14456              		.loc 1 1399 8 view .LVU4079
 14457              	.LBE1962:
 14458              	.LBE1961:
1483:src/int.c     **** 	else
1484:src/int.c     **** 		r = expmod(vz, vy, vx);
1485:src/int.c     **** 	return build_value(r, 0);
 14459              		.loc 1 1485 2 is_stmt 1 view .LVU4080
 14460              	.LBB1964:
 14461              	.LBI1964:
 146:src/int.c     **** #ifndef TINY_BUILD
 14462              		.loc 1 146 15 view .LVU4081
 14463              	.LBB1965:
 148:src/int.c     **** 	long long int v = mask_value(x);
 14464              		.loc 1 148 2 view .LVU4082
 14465              	.LBE1965:
 14466              	.LBE1964:
  39:src/int.c     **** }
 14467              		.loc 1 39 2 view .LVU4083
 14468              	.LBB1973:
 14469              	.LBB1972:
 149:src/int.c     **** 
 14470              		.loc 1 149 2 view .LVU4084
 14471              	.LBB1966:
 14472              	.LBI1966:
  91:src/int.c     **** #ifndef TINY_BUILD
 14473              		.loc 1 91 15 view .LVU4085
 14474              	.LBB1967:
  93:src/int.c     **** 	long long int mask;
 14475              		.loc 1 93 2 view .LVU4086
 14476              	.LBB1968:
 14477              	.LBI1968:
  42:src/int.c     **** 	unsigned int il = UState.int_len;
 14478              		.loc 1 42 14 view .LVU4087
 14479              	.LBB1969:
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14480              		.loc 1 43 2 view .LVU4088
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
 14481              		.loc 1 43 26 is_stmt 0 view .LVU4089
 14482 00d6 1A4B     		ldr	r3, .L931+4
 14483 00d8 93F8E947 		ldrb	r4, [r3, #2025]	@ zero_extendqisi2
  43:src/int.c     **** 	if (il >= MAX_WORD_SIZE || il == 0)
ARM GAS  /tmp/ccl34fCK.s 			page 349


 14484              		.loc 1 43 15 view .LVU4090
 14485 00dc 04F03F03 		and	r3, r4, #63
 14486              	.LVL1137:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 14487              		.loc 1 44 2 is_stmt 1 view .LVU4091
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 14488              		.loc 1 44 26 is_stmt 0 view .LVU4092
 14489 00e0 5A1E     		subs	r2, r3, #1
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 14490              		.loc 1 44 5 view .LVU4093
 14491 00e2 3E2A     		cmp	r2, #62
 14492 00e4 11D8     		bhi	.L915
 14493              	.LVL1138:
  44:src/int.c     **** 		return MAX_WORD_SIZE;
 14494              		.loc 1 44 5 view .LVU4094
 14495              	.LBE1969:
 14496              	.LBE1968:
  94:src/int.c     **** 
 14497              		.loc 1 94 2 is_stmt 1 view .LVU4095
  96:src/int.c     **** 		return v;
 14498              		.loc 1 96 2 view .LVU4096
  98:src/int.c     **** 	return v & mask;
 14499              		.loc 1 98 2 view .LVU4097
  99:src/int.c     **** #else
 14500              		.loc 1 99 2 view .LVU4098
  98:src/int.c     **** 	return v & mask;
 14501              		.loc 1 98 14 is_stmt 0 view .LVU4099
 14502 00e6 0124     		movs	r4, #1
 14503 00e8 A3F12002 		sub	r2, r3, #32
 14504 00ec C3F12005 		rsb	r5, r3, #32
 14505 00f0 04FA02F2 		lsl	r2, r4, r2
 14506 00f4 24FA05F5 		lsr	r5, r4, r5
 14507 00f8 9C40     		lsls	r4, r4, r3
  98:src/int.c     **** 	return v & mask;
 14508              		.loc 1 98 7 view .LVU4100
 14509 00fa 14F1FF34 		adds	r4, r4, #-1
  98:src/int.c     **** 	return v & mask;
 14510              		.loc 1 98 14 view .LVU4101
 14511 00fe 42EA0502 		orr	r2, r2, r5
  98:src/int.c     **** 	return v & mask;
 14512              		.loc 1 98 7 view .LVU4102
 14513 0102 42F1FF32 		adc	r2, r2, #-1
  99:src/int.c     **** #else
 14514              		.loc 1 99 11 view .LVU4103
 14515 0106 1140     		ands	r1, r1, r2
 14516              	.LVL1139:
  99:src/int.c     **** #else
 14517              		.loc 1 99 11 view .LVU4104
 14518              	.LBE1967:
 14519              	.LBE1966:
 151:src/int.c     **** 		return v;
 14520              		.loc 1 151 2 is_stmt 1 view .LVU4105
 14521              	.LBB1971:
 14522              	.LBB1970:
  99:src/int.c     **** #else
 14523              		.loc 1 99 11 is_stmt 0 view .LVU4106
 14524 0108 2040     		ands	r0, r0, r4
ARM GAS  /tmp/ccl34fCK.s 			page 350


 14525              	.LVL1140:
 14526              	.L915:
  99:src/int.c     **** #else
 14527              		.loc 1 99 11 view .LVU4107
 14528              	.LBE1970:
 14529              	.LBE1971:
 14530              	.LBE1972:
 14531              	.LBE1973:
1486:src/int.c     **** }
 14532              		.loc 1 1486 1 view .LVU4108
 14533 010a 09B0     		add	sp, sp, #36
 14534              		.cfi_remember_state
 14535              		.cfi_def_cfa_offset 36
 14536              		@ sp needed
 14537 010c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 14538              	.LVL1141:
 14539              	.L916:
 14540              		.cfi_restore_state
1480:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14541              		.loc 1 1480 3 view .LVU4109
 14542 0110 0120     		movs	r0, #1
 14543              	.LVL1142:
1480:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14544              		.loc 1 1480 3 view .LVU4110
 14545 0112 0291     		str	r1, [sp, #8]
1480:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14546              		.loc 1 1480 3 is_stmt 1 view .LVU4111
 14547 0114 FFF7FEFF 		bl	report_err
 14548              	.LVL1143:
1481:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14549              		.loc 1 1481 16 is_stmt 0 view .LVU4112
 14550 0118 084B     		ldr	r3, .L931
1480:src/int.c     **** 	if (XeqOpCode == (OP_TRI | OP_MULMOD))
 14551              		.loc 1 1480 3 view .LVU4113
 14552 011a 0299     		ldr	r1, [sp, #8]
1481:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14553              		.loc 1 1481 2 is_stmt 1 view .LVU4114
1481:src/int.c     **** 		r = mulmod(vz, vy, vx);
 14554              		.loc 1 1481 5 is_stmt 0 view .LVU4115
 14555 011c 1A88     		ldrh	r2, [r3]
 14556 011e 40F20A43 		movw	r3, #1034
 14557 0122 9A42     		cmp	r2, r3
 14558 0124 9DD0     		beq	.L930
 14559              	.LVL1144:
 14560              	.L918:
1484:src/int.c     **** 	return build_value(r, 0);
 14561              		.loc 1 1484 3 is_stmt 1 view .LVU4116
1484:src/int.c     **** 	return build_value(r, 0);
 14562              		.loc 1 1484 7 is_stmt 0 view .LVU4117
 14563 0126 CDE90089 		strd	r8, [sp]
 14564 012a 3246     		mov	r2, r6
 14565 012c 3B46     		mov	r3, r7
 14566 012e 2046     		mov	r0, r4
 14567 0130 FFF7FEFF 		bl	expmod
 14568              	.LVL1145:
1484:src/int.c     **** 	return build_value(r, 0);
 14569              		.loc 1 1484 7 view .LVU4118
ARM GAS  /tmp/ccl34fCK.s 			page 351


 14570 0134 CFE7     		b	.L922
 14571              	.LVL1146:
 14572              	.L924:
 14573              	.LBB1974:
 14574              	.LBB1963:
1399:src/int.c     **** 		if ((b & 1))
 14575              		.loc 1 1399 8 view .LVU4119
 14576 0136 0020     		movs	r0, #0
 14577 0138 0146     		mov	r1, r0
1405:src/int.c     **** }
 14578              		.loc 1 1405 2 is_stmt 1 view .LVU4120
 14579              	.LVL1147:
1405:src/int.c     **** }
 14580              		.loc 1 1405 2 is_stmt 0 view .LVU4121
 14581 013a CCE7     		b	.L922
 14582              	.L932:
 14583              		.align	2
 14584              	.L931:
 14585 013c 00000000 		.word	XeqOpCode
 14586 0140 00000000 		.word	PersistentRam
 14587              	.LBE1963:
 14588              	.LBE1974:
 14589              		.cfi_endproc
 14590              	.LFE72:
 14592              		.section	.rodata.primes,"a"
 14593              		.align	2
 14594              		.set	.LANCHOR0,. + 0
 14597              	primes:
 14598 0000 02030507 		.ascii	"\002\003\005\007\013\015\021\023\027\035\037%)+/5"
 14598      0B0D1113 
 14598      171D1F25 
 14598      292B2F35 
 14599              		.text
 14600              	.Letext0:
 14601              		.file 2 "src/decNumber/decContext.h"
 14602              		.file 3 "src/decNumber/decNumber.h"
 14603              		.file 4 "src/decNumber/decimal64.h"
 14604              		.file 5 "src/decNumber/decimal128.h"
 14605              		.file 6 "src/xeq.h"
 14606              		.file 7 "src/data.h"
ARM GAS  /tmp/ccl34fCK.s 			page 352


DEFINED SYMBOLS
                            *ABS*:0000000000000000 int.c
     /tmp/ccl34fCK.s:19     .text.multiply_with_overflow:0000000000000000 $t
     /tmp/ccl34fCK.s:27     .text.multiply_with_overflow:0000000000000000 multiply_with_overflow
     /tmp/ccl34fCK.s:277    .text.multiply_with_overflow:00000000000000cc $d
     /tmp/ccl34fCK.s:287    .text.expmod:0000000000000000 $t
     /tmp/ccl34fCK.s:294    .text.expmod:0000000000000000 expmod
     /tmp/ccl34fCK.s:684    .text.set_carry.part.0:0000000000000000 $t
     /tmp/ccl34fCK.s:691    .text.set_carry.part.0:0000000000000000 set_carry.part.0
     /tmp/ccl34fCK.s:708    .text.intASR:0000000000000000 $t
     /tmp/ccl34fCK.s:715    .text.intASR:0000000000000000 intASR
     /tmp/ccl34fCK.s:908    .text.intASR:000000000000009c $d
     /tmp/ccl34fCK.s:917    .text.intLSR:0000000000000000 $t
     /tmp/ccl34fCK.s:924    .text.intLSR:0000000000000000 intLSR
     /tmp/ccl34fCK.s:1138   .text.intLSR:0000000000000084 $d
     /tmp/ccl34fCK.s:1143   .text.intLSL:0000000000000000 $t
     /tmp/ccl34fCK.s:1150   .text.intLSL:0000000000000000 intLSL
     /tmp/ccl34fCK.s:1360   .text.intLSL:0000000000000090 $d
     /tmp/ccl34fCK.s:1369   .text.intRRC:0000000000000000 $t
     /tmp/ccl34fCK.s:1376   .text.intRRC:0000000000000000 intRRC
     /tmp/ccl34fCK.s:1587   .text.intRRC:0000000000000088 $d
     /tmp/ccl34fCK.s:1596   .text.intRLC:0000000000000000 $t
     /tmp/ccl34fCK.s:1603   .text.intRLC:0000000000000000 intRLC
     /tmp/ccl34fCK.s:1844   .text.intRLC:000000000000009c $d
     /tmp/ccl34fCK.s:1853   .text.intRR:0000000000000000 $t
     /tmp/ccl34fCK.s:1860   .text.intRR:0000000000000000 intRR
     /tmp/ccl34fCK.s:2082   .text.intRR:0000000000000098 $d
     /tmp/ccl34fCK.s:2091   .text.intRL:0000000000000000 $t
     /tmp/ccl34fCK.s:2098   .text.intRL:0000000000000000 intRL
     /tmp/ccl34fCK.s:2319   .text.intRL:00000000000000a4 $d
     /tmp/ccl34fCK.s:2328   .text.set_overflow.part.0:0000000000000000 $t
     /tmp/ccl34fCK.s:2335   .text.set_overflow.part.0:0000000000000000 set_overflow.part.0
     /tmp/ccl34fCK.s:2352   .text.calc_overflow:0000000000000000 $t
     /tmp/ccl34fCK.s:2359   .text.calc_overflow:0000000000000000 calc_overflow
     /tmp/ccl34fCK.s:2671   .text.calc_overflow:0000000000000154 $d
     /tmp/ccl34fCK.s:2676   .text.int_base:0000000000000000 $t
     /tmp/ccl34fCK.s:2684   .text.int_base:0000000000000000 int_base
     /tmp/ccl34fCK.s:2711   .text.int_base:0000000000000014 $d
     /tmp/ccl34fCK.s:2716   .text.int_mode:0000000000000000 $t
     /tmp/ccl34fCK.s:2724   .text.int_mode:0000000000000000 int_mode
     /tmp/ccl34fCK.s:2741   .text.int_mode:000000000000000c $d
     /tmp/ccl34fCK.s:2746   .text.word_size:0000000000000000 $t
     /tmp/ccl34fCK.s:2754   .text.word_size:0000000000000000 word_size
     /tmp/ccl34fCK.s:2782   .text.word_size:0000000000000014 $d
     /tmp/ccl34fCK.s:2787   .text.get_carry:0000000000000000 $t
     /tmp/ccl34fCK.s:2795   .text.get_carry:0000000000000000 get_carry
     /tmp/ccl34fCK.s:2811   .text.set_carry:0000000000000000 $t
     /tmp/ccl34fCK.s:2819   .text.set_carry:0000000000000000 set_carry
     /tmp/ccl34fCK.s:2844   .text.get_overflow:0000000000000000 $t
     /tmp/ccl34fCK.s:2852   .text.get_overflow:0000000000000000 get_overflow
     /tmp/ccl34fCK.s:2868   .text.set_overflow:0000000000000000 $t
     /tmp/ccl34fCK.s:2876   .text.set_overflow:0000000000000000 set_overflow
     /tmp/ccl34fCK.s:2901   .text.mask_value:0000000000000000 $t
     /tmp/ccl34fCK.s:2909   .text.mask_value:0000000000000000 mask_value
     /tmp/ccl34fCK.s:2978   .text.mask_value:000000000000003c $d
     /tmp/ccl34fCK.s:2983   .text.extract_value:0000000000000000 $t
     /tmp/ccl34fCK.s:2991   .text.extract_value:0000000000000000 extract_value
ARM GAS  /tmp/ccl34fCK.s 			page 353


     /tmp/ccl34fCK.s:3270   .text.extract_value:00000000000000f0 $d
     /tmp/ccl34fCK.s:3275   .text.divmod:0000000000000000 $t
     /tmp/ccl34fCK.s:3282   .text.divmod:0000000000000000 divmod
     /tmp/ccl34fCK.s:4127   .text.divmod:0000000000000350 $d
     /tmp/ccl34fCK.s:4133   .text.divmod:0000000000000354 $t
     /tmp/ccl34fCK.s:4662   .text.build_value:0000000000000000 $t
     /tmp/ccl34fCK.s:4670   .text.build_value:0000000000000000 build_value
     /tmp/ccl34fCK.s:4998   .text.build_value:00000000000000f8 $d
     /tmp/ccl34fCK.s:5007   .text.check_overflow:0000000000000000 $t
     /tmp/ccl34fCK.s:5015   .text.check_overflow:0000000000000000 check_overflow
     /tmp/ccl34fCK.s:5174   .text.check_overflow:00000000000000a0 $d
     /tmp/ccl34fCK.s:5179   .text.intAdd:0000000000000000 $t
     /tmp/ccl34fCK.s:5187   .text.intAdd:0000000000000000 intAdd
     /tmp/ccl34fCK.s:5727   .text.intAdd:00000000000001c8 $d
     /tmp/ccl34fCK.s:5737   .text.intSubtract:0000000000000000 $t
     /tmp/ccl34fCK.s:5745   .text.intSubtract:0000000000000000 intSubtract
     /tmp/ccl34fCK.s:6210   .text.intSubtract:00000000000001ac $d
     /tmp/ccl34fCK.s:6216   .text.intMultiply:0000000000000000 $t
     /tmp/ccl34fCK.s:6224   .text.intMultiply:0000000000000000 intMultiply
     /tmp/ccl34fCK.s:6443   .text.intMultiply:00000000000000b0 $d
     /tmp/ccl34fCK.s:6452   .text.intDivide:0000000000000000 $t
     /tmp/ccl34fCK.s:6460   .text.intDivide:0000000000000000 intDivide
     /tmp/ccl34fCK.s:6896   .text.intDivide:000000000000016c $d
     /tmp/ccl34fCK.s:6905   .text.intMod:0000000000000000 $t
     /tmp/ccl34fCK.s:6913   .text.intMod:0000000000000000 intMod
     /tmp/ccl34fCK.s:7093   .text.intMod:0000000000000098 $d
     /tmp/ccl34fCK.s:7098   .text.intMin:0000000000000000 $t
     /tmp/ccl34fCK.s:7106   .text.intMin:0000000000000000 intMin
     /tmp/ccl34fCK.s:7229   .text.intMax:0000000000000000 $t
     /tmp/ccl34fCK.s:7237   .text.intMax:0000000000000000 intMax
     /tmp/ccl34fCK.s:7360   .text.intGCD:0000000000000000 $t
     /tmp/ccl34fCK.s:7368   .text.intGCD:0000000000000000 intGCD
     /tmp/ccl34fCK.s:7568   .text.intGCD:0000000000000094 $d
     /tmp/ccl34fCK.s:7575   .text.intLCM:0000000000000000 $t
     /tmp/ccl34fCK.s:7583   .text.intLCM:0000000000000000 intLCM
     /tmp/ccl34fCK.s:7862   .text.intLCM:00000000000000c8 $d
     /tmp/ccl34fCK.s:7867   .text.intSqr:0000000000000000 $t
     /tmp/ccl34fCK.s:7875   .text.intSqr:0000000000000000 intSqr
     /tmp/ccl34fCK.s:7895   .text.intCube:0000000000000000 $t
     /tmp/ccl34fCK.s:7903   .text.intCube:0000000000000000 intCube
     /tmp/ccl34fCK.s:8012   .text.intChs:0000000000000000 $t
     /tmp/ccl34fCK.s:8020   .text.intChs:0000000000000000 intChs
     /tmp/ccl34fCK.s:8279   .text.intChs:00000000000000d0 $d
     /tmp/ccl34fCK.s:8288   .text.intAbs:0000000000000000 $t
     /tmp/ccl34fCK.s:8296   .text.intAbs:0000000000000000 intAbs
     /tmp/ccl34fCK.s:8609   .text.intAbs:00000000000000b4 $d
     /tmp/ccl34fCK.s:8614   .text.intDblMul:0000000000000000 $t
     /tmp/ccl34fCK.s:8622   .text.intDblMul:0000000000000000 intDblMul
     /tmp/ccl34fCK.s:9401   .text.intDblMul:00000000000002c4 $d
     /tmp/ccl34fCK.s:9410   .text.intDblDiv:0000000000000000 $t
     /tmp/ccl34fCK.s:9418   .text.intDblDiv:0000000000000000 intDblDiv
     /tmp/ccl34fCK.s:9522   .text.intDblRmdr:0000000000000000 $t
     /tmp/ccl34fCK.s:9530   .text.intDblRmdr:0000000000000000 intDblRmdr
     /tmp/ccl34fCK.s:9576   .text.intNot:0000000000000000 $t
     /tmp/ccl34fCK.s:9584   .text.intNot:0000000000000000 intNot
     /tmp/ccl34fCK.s:9677   .text.intNot:0000000000000044 $d
     /tmp/ccl34fCK.s:9682   .text.intBooleanOp:0000000000000000 $t
ARM GAS  /tmp/ccl34fCK.s 			page 354


     /tmp/ccl34fCK.s:9690   .text.intBooleanOp:0000000000000000 intBooleanOp
     /tmp/ccl34fCK.s:9847   .text.intBooleanOp:0000000000000074 $d
     /tmp/ccl34fCK.s:9853   .text.intFP:0000000000000000 $t
     /tmp/ccl34fCK.s:9861   .text.intFP:0000000000000000 intFP
     /tmp/ccl34fCK.s:9880   .text.intSign:0000000000000000 $t
     /tmp/ccl34fCK.s:9888   .text.intSign:0000000000000000 intSign
     /tmp/ccl34fCK.s:9961   .text.introt:0000000000000000 $t
     /tmp/ccl34fCK.s:9969   .text.introt:0000000000000000 introt
     /tmp/ccl34fCK.s:10057  .text.introt:000000000000003a $d
     /tmp/ccl34fCK.s:10291  .text.introt:00000000000000f0 $d
     /tmp/ccl34fCK.s:10303  .text.intNumBits:0000000000000000 $t
     /tmp/ccl34fCK.s:10311  .text.intNumBits:0000000000000000 intNumBits
     /tmp/ccl34fCK.s:10590  .text.intNumBits:0000000000000074 $d
     /tmp/ccl34fCK.s:10595  .text.intSqrt:0000000000000000 $t
     /tmp/ccl34fCK.s:10603  .text.intSqrt:0000000000000000 intSqrt
     /tmp/ccl34fCK.s:10797  .text.int_power_helper:0000000000000000 $t
     /tmp/ccl34fCK.s:10805  .text.int_power_helper:0000000000000000 int_power_helper
     /tmp/ccl34fCK.s:11015  .text.int_power_helper:00000000000000b4 $d
     /tmp/ccl34fCK.s:11020  .text.intPower:0000000000000000 $t
     /tmp/ccl34fCK.s:11028  .text.intPower:0000000000000000 intPower
     /tmp/ccl34fCK.s:11249  .text.intLog2:0000000000000000 $t
     /tmp/ccl34fCK.s:11257  .text.intLog2:0000000000000000 intLog2
     /tmp/ccl34fCK.s:11401  .text.int2pow:0000000000000000 $t
     /tmp/ccl34fCK.s:11409  .text.int2pow:0000000000000000 int2pow
     /tmp/ccl34fCK.s:11652  .text.int2pow:00000000000000b0 $d
     /tmp/ccl34fCK.s:11657  .text.intLog10:0000000000000000 $t
     /tmp/ccl34fCK.s:11665  .text.intLog10:0000000000000000 intLog10
     /tmp/ccl34fCK.s:11836  .text.int10pow:0000000000000000 $t
     /tmp/ccl34fCK.s:11844  .text.int10pow:0000000000000000 int10pow
     /tmp/ccl34fCK.s:12119  .text.int10pow:00000000000000c4 $d
     /tmp/ccl34fCK.s:12124  .text.int_1pow:0000000000000000 $t
     /tmp/ccl34fCK.s:12132  .text.int_1pow:0000000000000000 int_1pow
     /tmp/ccl34fCK.s:12224  .text.int_1pow:000000000000003c $d
     /tmp/ccl34fCK.s:12231  .text.intMirror:0000000000000000 $t
     /tmp/ccl34fCK.s:12239  .text.intMirror:0000000000000000 intMirror
     /tmp/ccl34fCK.s:12385  .text.intMirror:0000000000000094 $d
     /tmp/ccl34fCK.s:12390  .text.int_justify:0000000000000000 $t
     /tmp/ccl34fCK.s:12398  .text.int_justify:0000000000000000 int_justify
     /tmp/ccl34fCK.s:12775  .text.int_justify:0000000000000100 $d
     /tmp/ccl34fCK.s:12785  .text.intmsks:0000000000000000 $t
     /tmp/ccl34fCK.s:12793  .text.intmsks:0000000000000000 intmsks
     /tmp/ccl34fCK.s:13139  .text.intmsks:00000000000000d8 $d
     /tmp/ccl34fCK.s:13146  .text.intbits:0000000000000000 $t
     /tmp/ccl34fCK.s:13154  .text.intbits:0000000000000000 intbits
     /tmp/ccl34fCK.s:13250  .text.intbits:0000000000000056 $d
     /tmp/ccl34fCK.s:13271  .text.intbits:0000000000000070 $d
     /tmp/ccl34fCK.s:13416  .text.intbits:00000000000000fc $d
     /tmp/ccl34fCK.s:13421  .text.intFib:0000000000000000 $t
     /tmp/ccl34fCK.s:13429  .text.intFib:0000000000000000 intFib
     /tmp/ccl34fCK.s:13809  .text.intFib:0000000000000134 $d
     /tmp/ccl34fCK.s:13818  .text.isPrime:0000000000000000 $t
     /tmp/ccl34fCK.s:13826  .text.isPrime:0000000000000000 isPrime
     /tmp/ccl34fCK.s:14259  .text.isPrime:0000000000000210 $d
     /tmp/ccl34fCK.s:14265  .text.intmodop:0000000000000000 $t
     /tmp/ccl34fCK.s:14273  .text.intmodop:0000000000000000 intmodop
     /tmp/ccl34fCK.s:14585  .text.intmodop:000000000000013c $d
     /tmp/ccl34fCK.s:14593  .rodata.primes:0000000000000000 $d
ARM GAS  /tmp/ccl34fCK.s 			page 355


     /tmp/ccl34fCK.s:14597  .rodata.primes:0000000000000000 primes
     /tmp/ccl34fCK.s:10064  .text.introt:0000000000000041 $d
     /tmp/ccl34fCK.s:10064  .text.introt:0000000000000042 $t
     /tmp/ccl34fCK.s:13256  .text.intbits:000000000000005b $d
     /tmp/ccl34fCK.s:13256  .text.intbits:000000000000005c $t
     /tmp/ccl34fCK.s:13277  .text.intbits:0000000000000075 $d
     /tmp/ccl34fCK.s:13277  .text.intbits:0000000000000076 $t

UNDEFINED SYMBOLS
__aeabi_uldivmod
PersistentRam
cmdflag
get_user_flag
xset
report_err
XeqOpCode
getX_int
get_reg_n_int
setlastX
set_reg_n_int
setX_int
lift
fin_tst

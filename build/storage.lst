ARM GAS  /tmp/ccKaa6YO.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB4:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** //#define DM42
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  24:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  25:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  26:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  27:src/storage.c **** 
  28:src/storage.c **** #ifndef NULL
  29:src/storage.c **** #define NULL 0
ARM GAS  /tmp/ccKaa6YO.s 			page 2


  30:src/storage.c **** #endif
  31:src/storage.c **** 
  32:src/storage.c **** #else
  33:src/storage.c **** 
  34:src/storage.c **** // Emulator definitions
  35:src/storage.c **** #include <stdio.h>
  36:src/storage.c **** #include <stdlib.h>
  37:src/storage.c **** #include <stddef.h>
  38:src/storage.c **** #include <string.h>
  39:src/storage.c **** #include <stdarg.h>
  40:src/storage.c **** 
  41:src/storage.c **** #ifdef DM42
  42:src/storage.c **** #include "dmcp.h"
  43:src/storage.c **** #endif
  44:src/storage.c **** 
  45:src/storage.c **** #ifndef DM42
  46:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  47:src/storage.c **** #include <errno.h>
  48:src/storage.c **** #include <stdlib.h>
  49:src/storage.c **** #include <unistd.h>
  50:src/storage.c **** #endif
  51:src/storage.c **** #endif
  52:src/storage.c **** 
  53:src/storage.c **** #define PERSISTENT_RAM
  54:src/storage.c **** #define SLCDCMEM
  55:src/storage.c **** #define VOLATILE_RAM
  56:src/storage.c **** #define BACKUP_FLASH
  57:src/storage.c **** 
  58:src/storage.c **** #ifdef DM42
  59:src/storage.c **** 
  60:src/storage.c **** #define STATE_FILE "wp34s/wp34s.dat"
  61:src/storage.c **** #define BACKUP_FILE "wp34s/wp34s-backup.dat"
  62:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  63:src/storage.c **** #define SAVED_STATE_FILE "wp34s/wp34s_saved.dat"
  64:src/storage.c **** // This one is saved and loaded at off and on (before main loop).
  65:src/storage.c **** // This means that even though state isn't automatically saved
  66:src/storage.c **** // when going out via system menu
  67:src/storage.c **** // a reasonably recent state should be available.
  68:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  69:src/storage.c **** 
  70:src/storage.c **** #else
  71:src/storage.c **** 
  72:src/storage.c **** #define STATE_FILE "wp34s.dat"
  73:src/storage.c **** #define BACKUP_FILE "wp34s-backup.dat"
  74:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
  75:src/storage.c **** 
  76:src/storage.c **** #endif
  77:src/storage.c **** #endif
  78:src/storage.c **** 
  79:src/storage.c **** #define DM42SAFE
  80:src/storage.c **** #include "xeq.h"
  81:src/storage.c **** #include "storage.h"
  82:src/storage.c **** #include "display.h"
  83:src/storage.c **** #include "stats.h"
  84:src/storage.c **** #include "alpha.h"
  85:src/storage.c **** #undef DM42SAFE
  86:src/storage.c **** 
ARM GAS  /tmp/ccKaa6YO.s 			page 3


  87:src/storage.c **** #ifdef DM42
  88:src/storage.c **** #define PAGE_SIZE	 2048
  89:src/storage.c **** #else
  90:src/storage.c **** #define PAGE_SIZE	 256
  91:src/storage.c **** #endif
  92:src/storage.c **** 
  93:src/storage.c **** /*
  94:src/storage.c ****  *  Setup the persistent RAM
  95:src/storage.c ****  */
  96:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
  97:src/storage.c **** 
  98:src/storage.c **** /*
  99:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 100:src/storage.c ****  */
 101:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 102:src/storage.c **** 
 103:src/storage.c **** /*
 104:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 105:src/storage.c ****  *  It replaces the local registers and flags if active.
 106:src/storage.c ****  */
 107:src/storage.c **** TXromParams XromParams;
 108:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 109:src/storage.c **** 
 110:src/storage.c **** /* Private space for four registers temporarily
 111:src/storage.c ****  */
 112:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 113:src/storage.c **** 
 114:src/storage.c **** /*
 115:src/storage.c ****  *  The backup flash area:
 116:src/storage.c ****  *  2 KB for storage of programs and registers
 117:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 118:src/storage.c ****  */
 119:src/storage.c **** #if !defined(REALBUILD)
 120:src/storage.c **** /*
 121:src/storage.c ****  *  We need to define the Library space here.
 122:src/storage.c ****  *  On the device the linker takes care of this.
 123:src/storage.c ****  */
 124:src/storage.c **** #ifdef DM42
 125:src/storage.c **** __attribute__((section(".storage"))) FLASH_REGION UserFlash;
 126:src/storage.c **** __attribute__((section(".storage"))) BACKUP_FLASH TPersistentRam BackupFlash;
 127:src/storage.c **** #else
 128:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 129:src/storage.c **** FLASH_REGION UserFlash;
 130:src/storage.c **** #endif
 131:src/storage.c **** #endif
 132:src/storage.c **** 
 133:src/storage.c **** /*
 134:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 135:src/storage.c ****  */
 136:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 137:src/storage.c **** {
 138:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 139:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140:src/storage.c **** 	unsigned int i;
 141:src/storage.c **** 
 142:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 143:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
ARM GAS  /tmp/ccKaa6YO.s 			page 4


 144:src/storage.c **** 		crc ^= *d++;
 145:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 146:src/storage.c **** 		crc ^= crc << 12;
 147:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 148:src/storage.c **** 	}
 149:src/storage.c **** 	return crc;
 150:src/storage.c **** }
 151:src/storage.c **** 
 152:src/storage.c **** 
 153:src/storage.c **** /*
 154:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 155:src/storage.c ****  *  Returns non zero value if failure
 156:src/storage.c ****  */
 157:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 158:src/storage.c **** {
  30              		.loc 1 158 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 159:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 159 2 view .LVU1
 160:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 160 2 view .LVU2
  37              	.LBB30:
  38              	.LBI30:
 136:src/storage.c **** {
  39              		.loc 1 136 20 view .LVU3
  40              	.LBB31:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 138 2 view .LVU4
 139:src/storage.c **** 	unsigned int i;
  42              		.loc 1 139 2 view .LVU5
 140:src/storage.c **** 
  43              		.loc 1 140 2 view .LVU6
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 142 2 view .LVU7
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 142 15 view .LVU8
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 142 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE31:
  49              	.LBE30:
 158:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 158 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB34:
  57              	.LBB32:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 138 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
ARM GAS  /tmp/ccKaa6YO.s 			page 5


  61              	.L3:
 143:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 143 3 is_stmt 1 view .LVU12
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 144 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 144 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 144 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 144 3 is_stmt 1 view .LVU16
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 144 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 145:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 145 3 is_stmt 1 view .LVU18
 145:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 145 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 146 3 is_stmt 1 view .LVU20
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 146 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 147:src/storage.c **** 	}
  85              		.loc 1 147 3 is_stmt 1 view .LVU22
 147:src/storage.c **** 	}
  86              		.loc 1 147 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 147:src/storage.c **** 	}
  89              		.loc 1 147 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 142 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 147:src/storage.c **** 	}
  93              		.loc 1 147 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 142 27 is_stmt 1 view .LVU27
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 142 15 view .LVU28
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 142 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
ARM GAS  /tmp/ccKaa6YO.s 			page 6


 149:src/storage.c **** }
 100              		.loc 1 149 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 149:src/storage.c **** }
 102              		.loc 1 149 2 is_stmt 0 view .LVU31
 103              	.LBE32:
 104              	.LBE34:
 161:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 161 2 is_stmt 1 view .LVU32
 162:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 162 3 view .LVU33
 163:src/storage.c **** 	}
 164:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 164 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 162:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 162 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 164 2 is_stmt 1 view .LVU36
 112              		.loc 1 164 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 164 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 165:src/storage.c **** }
 119              		.loc 1 165 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
 164:src/storage.c **** }
 128              		.loc 1 164 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 165 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB35:
 139              	.LBB33:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 138 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 149:src/storage.c **** }
 143              		.loc 1 149 2 is_stmt 1 view .LVU43
 149:src/storage.c **** }
 144              		.loc 1 149 2 is_stmt 0 view .LVU44
ARM GAS  /tmp/ccKaa6YO.s 			page 7


 145              	.LBE33:
 146              	.LBE35:
 161:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 161 2 is_stmt 1 view .LVU45
 162:src/storage.c **** 	}
 148              		.loc 1 162 3 view .LVU46
 164:src/storage.c **** }
 149              		.loc 1 164 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 162:src/storage.c **** 	}
 151              		.loc 1 162 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 164:src/storage.c **** }
 153              		.loc 1 164 2 is_stmt 1 view .LVU49
 164:src/storage.c **** }
 154              		.loc 1 164 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 164:src/storage.c **** }
 158              		.loc 1 164 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 164:src/storage.c **** }
 165              		.loc 1 164 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 165 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE4:
 173 0062 00BF     		.section	.text.check_delete_prog,"ax",%progbits
 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	check_delete_prog:
 182              	.LVL15:
 183              	.LFB11:
 166:src/storage.c **** 
 167:src/storage.c **** 
 168:src/storage.c **** /*
 169:src/storage.c ****  *  Checksum the current program.
 170:src/storage.c ****  */
 171:src/storage.c **** short unsigned int checksum_program( void )
 172:src/storage.c **** {
 173:src/storage.c **** 	update_program_bounds( 1 );
 174:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 175:src/storage.c **** }
 176:src/storage.c **** 
 177:src/storage.c **** 
ARM GAS  /tmp/ccKaa6YO.s 			page 8


 178:src/storage.c **** /*
 179:src/storage.c ****  *  Checksum the persistent RAM area
 180:src/storage.c ****  *  Returns non zero value if failure
 181:src/storage.c ****  */
 182:src/storage.c **** int checksum_ram( void )
 183:src/storage.c **** {
 184:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 185:src/storage.c **** 			      Crc, &Crc );
 186:src/storage.c **** }
 187:src/storage.c **** 
 188:src/storage.c **** 
 189:src/storage.c **** /*
 190:src/storage.c ****  *  Checksum the backup flash region
 191:src/storage.c ****  *  Returns non zero value if failure
 192:src/storage.c ****  */
 193:src/storage.c **** int checksum_backup( void )
 194:src/storage.c **** {
 195:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 196:src/storage.c **** 		              BackupFlash._crc, NULL );
 197:src/storage.c **** }
 198:src/storage.c **** 
 199:src/storage.c **** 
 200:src/storage.c **** /*
 201:src/storage.c ****  *  Checksum a flash region
 202:src/storage.c ****  *  Returns non zero value if failure
 203:src/storage.c ****  */
 204:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 205:src/storage.c **** {
 206:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 207:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 208:src/storage.c **** }
 209:src/storage.c **** 
 210:src/storage.c **** 
 211:src/storage.c **** /*
 212:src/storage.c ****  *  Helper to store final END in empty program space
 213:src/storage.c ****  */
 214:src/storage.c **** static void stoend( void )
 215:src/storage.c **** {
 216:src/storage.c **** 	ProgSize = 1;
 217:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 218:src/storage.c **** }
 219:src/storage.c **** 
 220:src/storage.c **** 
 221:src/storage.c **** /*
 222:src/storage.c ****  *  Clear the program space
 223:src/storage.c ****  */
 224:src/storage.c **** void clpall( void )
 225:src/storage.c **** {
 226:src/storage.c **** 	clrretstk_pc();
 227:src/storage.c **** 	stoend();
 228:src/storage.c **** }
 229:src/storage.c **** 
 230:src/storage.c **** 
 231:src/storage.c **** /*
 232:src/storage.c ****  *  Sanity checks for program (step) deletion
 233:src/storage.c ****  */
 234:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
ARM GAS  /tmp/ccKaa6YO.s 			page 9


 235:src/storage.c **** {
 184              		.loc 1 235 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 236:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 188              		.loc 1 236 2 view .LVU55
 189              		.loc 1 236 5 is_stmt 0 view .LVU56
 190 0000 10F4704F 		tst	r0, #61440
 235:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 191              		.loc 1 235 1 view .LVU57
 192 0004 08B5     		push	{r3, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 3, -8
 195              		.cfi_offset 14, -4
 196              		.loc 1 236 5 view .LVU58
 197 0006 0AD1     		bne	.L20
 198              		.loc 1 236 31 discriminator 1 view .LVU59
 199 0008 074A     		ldr	r2, .L26
 200 000a 5288     		ldrh	r2, [r2, #2]
 201              		.loc 1 236 20 discriminator 1 view .LVU60
 202 000c 8242     		cmp	r2, r0
 203 000e 01D0     		beq	.L19
 204              	.LVL16:
 205              	.L21:
 237:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 238:src/storage.c **** 	}
 239:src/storage.c **** 	else {
 240:src/storage.c **** 		return 0;
 206              		.loc 1 240 10 view .LVU61
 207 0010 0020     		movs	r0, #0
 241:src/storage.c **** 	}
 242:src/storage.c **** 	return 1;
 243:src/storage.c **** }
 208              		.loc 1 243 1 view .LVU62
 209 0012 08BD     		pop	{r3, pc}
 210              	.LVL17:
 211              	.L19:
 236:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 212              		.loc 1 236 43 discriminator 2 view .LVU63
 213 0014 FFF7FEFF 		bl	getprog
 214              	.LVL18:
 236:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 215              		.loc 1 236 40 discriminator 2 view .LVU64
 216 0018 B0F59D7F 		cmp	r0, #314
 217 001c F8D1     		bne	.L21
 218              	.L20:
 237:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 219              		.loc 1 237 3 is_stmt 1 view .LVU65
 220 001e 1320     		movs	r0, #19
 221 0020 FFF7FEFF 		bl	report_warn
 222              	.LVL19:
 242:src/storage.c **** }
 223              		.loc 1 242 2 view .LVU66
 242:src/storage.c **** }
 224              		.loc 1 242 9 is_stmt 0 view .LVU67
 225 0024 0120     		movs	r0, #1
ARM GAS  /tmp/ccKaa6YO.s 			page 10


 226              		.loc 1 243 1 view .LVU68
 227 0026 08BD     		pop	{r3, pc}
 228              	.L27:
 229              		.align	2
 230              	.L26:
 231 0028 00000000 		.word	PersistentRam
 232              		.cfi_endproc
 233              	.LFE11:
 235              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 236              		.align	2
 237              	.LC0:
 238 0000 77703334 		.ascii	"wp34s/wp34s-backup.dat\000"
 238      732F7770 
 238      3334732D 
 238      6261636B 
 238      75702E64 
 239 0017 00       		.align	2
 240              	.LC1:
 241 0018 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 241      732F7770 
 241      3334732D 
 241      6C69622E 
 241      64617400 
 242              		.align	2
 243              	.LC2:
 244 002c 2F777033 		.ascii	"/wp34s\000"
 244      347300
 245 0033 00       		.align	2
 246              	.LC3:
 247 0034 46694F70 		.ascii	"FiOp.pf\000"
 247      2E706600 
 248              		.align	2
 249              	.LC4:
 250 003c 46694F70 		.ascii	"FiOp.pf2\000"
 250      2E706632 
 250      00
 251 0045 000000   		.align	2
 252              	.LC5:
 253 0048 46694F70 		.ascii	"FiOp.pf3\000"
 253      2E706633 
 253      00
 254 0051 000000   		.align	2
 255              	.LC6:
 256 0054 46694F70 		.ascii	"FiOp.pf4\000"
 256      2E706634 
 256      00
 257              		.section	.text.program_flash,"ax",%progbits
 258              		.align	1
 259              		.p2align 2,,3
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv4-sp-d16
 265              	program_flash:
 266              	.LVL20:
 267              	.LFB19:
 244:src/storage.c **** 
ARM GAS  /tmp/ccKaa6YO.s 			page 11


 245:src/storage.c **** 
 246:src/storage.c **** /*
 247:src/storage.c ****  *  Clear just the current program
 248:src/storage.c ****  */
 249:src/storage.c **** void clrprog( void )
 250:src/storage.c **** {
 251:src/storage.c **** 	update_program_bounds( 1 );
 252:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 253:src/storage.c **** 		/*
 254:src/storage.c **** 		 *  Porgram is in flash
 255:src/storage.c **** 		 */
 256:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 257:src/storage.c **** 	}
 258:src/storage.c **** 	else {
 259:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 260:src/storage.c **** 			return;
 261:src/storage.c **** 		}
 262:src/storage.c **** 		clrretstk();
 263:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 264:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 265:src/storage.c **** 		if ( ProgSize == 0 ) {
 266:src/storage.c **** 			stoend();
 267:src/storage.c **** 		}
 268:src/storage.c **** 	}
 269:src/storage.c **** 	set_pc( ProgBegin - 1 );
 270:src/storage.c **** 	update_program_bounds( 1 );
 271:src/storage.c **** }
 272:src/storage.c ****  
 273:src/storage.c **** 
 274:src/storage.c **** /*
 275:src/storage.c ****  *  Clear all - programs and registers
 276:src/storage.c ****  */
 277:src/storage.c **** void clrall(void) 
 278:src/storage.c **** {
 279:src/storage.c **** 	NumRegs = TOPREALREG;
 280:src/storage.c **** 	xeq_init_contexts();
 281:src/storage.c **** 	clrreg( OP_CLREG );
 282:src/storage.c **** 	clrstk( OP_CLSTK );
 283:src/storage.c **** 	clralpha( OP_CLRALPHA );
 284:src/storage.c **** 	clrflags( OP_CLFLAGS );
 285:src/storage.c **** 	clpall();
 286:src/storage.c **** 
 287:src/storage.c **** 	reset_shift();
 288:src/storage.c **** 	State2.test = TST_NONE;
 289:src/storage.c **** 
 290:src/storage.c **** 	DispMsg = NULL;
 291:src/storage.c **** }
 292:src/storage.c **** 
 293:src/storage.c **** 
 294:src/storage.c **** /*
 295:src/storage.c ****  *  Clear everything
 296:src/storage.c ****  */
 297:src/storage.c **** void reset( void ) 
 298:src/storage.c **** {
 299:src/storage.c **** 	xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 300:src/storage.c **** 	clrall();
 301:src/storage.c **** 	init_state();
ARM GAS  /tmp/ccKaa6YO.s 			page 12


 302:src/storage.c **** 	UState.contrast = 6;
 303:src/storage.c **** #ifdef INFRARED
 304:src/storage.c **** 	State.print_delay = 10;
 305:src/storage.c **** #endif
 306:src/storage.c **** 	DispMsg = "Erased";
 307:src/storage.c **** }
 308:src/storage.c **** 
 309:src/storage.c **** 
 310:src/storage.c **** /*
 311:src/storage.c ****  *  Store into program space.
 312:src/storage.c ****  */
 313:src/storage.c **** void stoprog( opcode c ) {
 314:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 315:src/storage.c **** 	int i;
 316:src/storage.c **** 	unsigned int pc = state_pc();
 317:src/storage.c **** 
 318:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 319:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 320:src/storage.c **** 
 321:src/storage.c **** 	if ( !isRAM( pc ) ) {
 322:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 323:src/storage.c **** 		return;
 324:src/storage.c **** 	}
 325:src/storage.c **** 	clrretstk();
 326:src/storage.c **** 	xeq_init_contexts();
 327:src/storage.c **** 	if ( ProgFree < off ) {
 328:src/storage.c **** 		return;
 329:src/storage.c **** 	}
 330:src/storage.c **** 	ProgSize += off;
 331:src/storage.c **** 	ProgEnd += off;
 332:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 333:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 334:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 335:src/storage.c **** 	}
 336:src/storage.c **** 	if (isDBL(c))
 337:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 338:src/storage.c **** 	Prog_1[pc] = c;
 339:src/storage.c **** 	State.pc = pc;
 340:src/storage.c **** }
 341:src/storage.c **** 
 342:src/storage.c **** 
 343:src/storage.c **** /*
 344:src/storage.c ****  *  Delete the current step in the program
 345:src/storage.c ****  */
 346:src/storage.c **** void delprog( void )
 347:src/storage.c **** {
 348:src/storage.c **** 	int i;
 349:src/storage.c **** 	const unsigned int pc = state_pc();
 350:src/storage.c **** 	int off;
 351:src/storage.c **** 
 352:src/storage.c **** 	if ( check_delete_prog( pc ) )
 353:src/storage.c **** 		return;
 354:src/storage.c **** 	if ( pc == 0 )
 355:src/storage.c **** 		return;
 356:src/storage.c **** 
 357:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 358:src/storage.c **** 	ProgSize -= off;
ARM GAS  /tmp/ccKaa6YO.s 			page 13


 359:src/storage.c **** 	ProgEnd -= off;
 360:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 361:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 362:src/storage.c **** 	decpc();
 363:src/storage.c **** }
 364:src/storage.c **** 
 365:src/storage.c **** 
 366:src/storage.c **** /*
 367:src/storage.c ****  *  Helper to append a program in RAM.
 368:src/storage.c ****  *  Returns non zero in case of an error.
 369:src/storage.c ****  */
 370:src/storage.c **** int append_program( const s_opcode *source, int length )
 371:src/storage.c **** {
 372:src/storage.c **** 	unsigned short pc;
 373:src/storage.c **** 	int space_needed = length - ProgFree;
 374:src/storage.c **** 
 375:src/storage.c **** 	if ( ProgSize == 1 ) {
 376:src/storage.c **** 		/*
 377:src/storage.c **** 		 *  Only the default END statement is present
 378:src/storage.c **** 		 */
 379:src/storage.c **** 		--space_needed;
 380:src/storage.c **** 		--ProgSize;
 381:src/storage.c **** 	}
 382:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 383:src/storage.c **** 		return report_err( ERR_INVALID );
 384:src/storage.c **** 	}
 385:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 386:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 387:src/storage.c **** 	}
 388:src/storage.c **** 
 389:src/storage.c **** 	/*
 390:src/storage.c **** 	 *  Make room if needed
 391:src/storage.c **** 	 */
 392:src/storage.c **** 	clrretstk();
 393:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 394:src/storage.c **** 		space_needed -= SizeStatRegs;
 395:src/storage.c **** 		sigmaDeallocate();
 396:src/storage.c **** 	}
 397:src/storage.c **** 	if ( space_needed > 0 ) {
 398:src/storage.c **** 		int regs;
 399:src/storage.c **** 		if (is_dblmode())
 400:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 401:src/storage.c **** 		else
 402:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 403:src/storage.c **** 
 404:src/storage.c **** 		if ( regs < 0 ) {
 405:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 406:src/storage.c **** 		}
 407:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 408:src/storage.c **** 	}
 409:src/storage.c **** 	/*
 410:src/storage.c **** 	 *  Append data
 411:src/storage.c **** 	 */
 412:src/storage.c **** 	pc = ProgSize + 1;
 413:src/storage.c **** 	ProgSize += length;
 414:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 415:src/storage.c **** 	set_pc( pc );
ARM GAS  /tmp/ccKaa6YO.s 			page 14


 416:src/storage.c **** 	return 0;
 417:src/storage.c **** }
 418:src/storage.c **** 
 419:src/storage.c **** 
 420:src/storage.c **** #ifdef REALBUILD
 421:src/storage.c **** /*
 422:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 423:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 424:src/storage.c ****  *  IAP feature in ROM instead
 425:src/storage.c ****  */
 426:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 427:src/storage.c **** 
 428:src/storage.c **** /*
 429:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 430:src/storage.c ****  *  Returns zero if OK or non zero on error.
 431:src/storage.c ****  */
 432:src/storage.c **** static int flash_command( unsigned int cmd )
 433:src/storage.c **** {
 434:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 435:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 436:src/storage.c **** }
 437:src/storage.c **** 
 438:src/storage.c **** /*
 439:src/storage.c ****  *  Program the flash starting at destination.
 440:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 441:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 442:src/storage.c ****  */
 443:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 444:src/storage.c **** {
 445:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 446:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 447:src/storage.c **** 
 448:src/storage.c **** 	lock();  // No interrupts, please!
 449:src/storage.c **** 
 450:src/storage.c **** 	while ( count-- > 0 ) {
 451:src/storage.c **** 		/*
 452:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 453:src/storage.c **** 		 */
 454:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 455:src/storage.c **** 		int i;
 456:src/storage.c **** 
 457:src/storage.c **** 		/*
 458:src/storage.c **** 		 *  Copy the source to the flash write buffer
 459:src/storage.c **** 		 */
 460:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
 461:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 462:src/storage.c **** 		}
 463:src/storage.c **** 
 464:src/storage.c **** 		/*
 465:src/storage.c **** 		 *  Command the controller to erase and write the page.
 466:src/storage.c **** 		 */
 467:src/storage.c **** 		if ( flash_command( cmd ) ) {
 468:src/storage.c **** 			report_err( ERR_IO );
 469:src/storage.c **** 			break;
 470:src/storage.c **** 		}
 471:src/storage.c **** 	}
 472:src/storage.c **** 	unlock();
ARM GAS  /tmp/ccKaa6YO.s 			page 15


 473:src/storage.c **** 	return Error != 0;
 474:src/storage.c **** }
 475:src/storage.c **** 
 476:src/storage.c **** 
 477:src/storage.c **** /*
 478:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 479:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 480:src/storage.c ****  */
 481:src/storage.c **** void sam_ba_boot(void)
 482:src/storage.c **** {
 483:src/storage.c **** 	/*
 484:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 485:src/storage.c **** 	 */
 486:src/storage.c **** 	lock();
 487:src/storage.c **** 	flash_command( 0x5A00010C );
 488:src/storage.c **** 	SUPC_Shutdown();
 489:src/storage.c **** }
 490:src/storage.c **** 
 491:src/storage.c **** 
 492:src/storage.c **** #else
 493:src/storage.c **** 
 494:src/storage.c **** /*
 495:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34s-backup.dat
 496:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 497:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 498:src/storage.c ****  */
 499:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 500:src/storage.c **** extern char* get_region_path(int region);
 501:src/storage.c **** #else
 502:src/storage.c **** static char* get_region_path(int region)
 503:src/storage.c **** {
 504:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 505:src/storage.c **** }
 506:src/storage.c **** #endif
 507:src/storage.c **** 
 508:src/storage.c **** #ifdef DM42
 509:src/storage.c **** 
 510:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 511:src/storage.c **** {
 268              		.loc 1 511 1 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 8
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 512:src/storage.c ****   char *name;
 272              		.loc 1 512 3 view .LVU70
 513:src/storage.c ****   char *dest = (char *) destination;
 273              		.loc 1 513 3 view .LVU71
 511:src/storage.c ****   char *name;
 274              		.loc 1 511 1 is_stmt 0 view .LVU72
 275 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 276              		.cfi_def_cfa_offset 36
 277              		.cfi_offset 4, -36
 278              		.cfi_offset 5, -32
 279              		.cfi_offset 6, -28
 280              		.cfi_offset 7, -24
 281              		.cfi_offset 8, -20
 282              		.cfi_offset 9, -16
ARM GAS  /tmp/ccKaa6YO.s 			page 16


 283              		.cfi_offset 10, -12
 284              		.cfi_offset 11, -8
 285              		.cfi_offset 14, -4
 286 0004 83B0     		sub	sp, sp, #12
 287              		.cfi_def_cfa_offset 48
 514:src/storage.c ****   int offset;
 515:src/storage.c ****   uint x=0;
 288              		.loc 1 515 8 view .LVU73
 289 0006 0023     		movs	r3, #0
 516:src/storage.c **** 
 517:src/storage.c ****   /*
 518:src/storage.c ****    *  Copy the source to the destination memory
 519:src/storage.c ****    */
 520:src/storage.c **** 
 521:src/storage.c ****   sys_flashing_init();
 522:src/storage.c **** 	
 523:src/storage.c ****   sys_flash_erase_block( dest, count * PAGE_SIZE ); // start plus size in bytes to erase
 290              		.loc 1 523 38 view .LVU74
 291 0008 D502     		lsls	r5, r2, #11
 511:src/storage.c ****   char *name;
 292              		.loc 1 511 1 view .LVU75
 293 000a 0446     		mov	r4, r0
 294              	.LVL21:
 514:src/storage.c ****   int offset;
 295              		.loc 1 514 3 is_stmt 1 view .LVU76
 515:src/storage.c **** 
 296              		.loc 1 515 3 view .LVU77
 515:src/storage.c **** 
 297              		.loc 1 515 8 is_stmt 0 view .LVU78
 298 000c 0193     		str	r3, [sp, #4]
 521:src/storage.c **** 	
 299              		.loc 1 521 3 is_stmt 1 view .LVU79
 300 000e 404B     		ldr	r3, .L48
 511:src/storage.c ****   char *name;
 301              		.loc 1 511 1 is_stmt 0 view .LVU80
 302 0010 0E46     		mov	r6, r1
 521:src/storage.c **** 	
 303              		.loc 1 521 3 view .LVU81
 304 0012 9847     		blx	r3
 305              	.LVL22:
 306              		.loc 1 523 3 is_stmt 1 view .LVU82
 307 0014 3F4B     		ldr	r3, .L48+4
 308 0016 2946     		mov	r1, r5
 309 0018 2046     		mov	r0, r4
 310 001a 9847     		blx	r3
 311              	.LVL23:
 524:src/storage.c **** 
 525:src/storage.c ****   sys_flash_write_block( dest, (uint8_t *) source, count * PAGE_SIZE );
 312              		.loc 1 525 3 view .LVU83
 313 001c 3146     		mov	r1, r6
 314 001e 3E4B     		ldr	r3, .L48+8
 526:src/storage.c **** 
 527:src/storage.c ****   sys_flashing_finish();
 528:src/storage.c **** 
 529:src/storage.c ****   /*
 530:src/storage.c ****    *  Update the correct region file
 531:src/storage.c ****    */
ARM GAS  /tmp/ccKaa6YO.s 			page 17


 532:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 315              		.loc 1 532 6 is_stmt 0 view .LVU84
 316 0020 3E4E     		ldr	r6, .L48+12
 317              	.LVL24:
 525:src/storage.c **** 
 318              		.loc 1 525 3 view .LVU85
 319 0022 2A46     		mov	r2, r5
 320 0024 2046     		mov	r0, r4
 321 0026 9847     		blx	r3
 322              	.LVL25:
 527:src/storage.c **** 
 323              		.loc 1 527 3 is_stmt 1 view .LVU86
 324 0028 3D4B     		ldr	r3, .L48+16
 325 002a 9847     		blx	r3
 326              	.LVL26:
 327              		.loc 1 532 3 view .LVU87
 328              		.loc 1 532 6 is_stmt 0 view .LVU88
 329 002c B442     		cmp	r4, r6
 330 002e 03D3     		bcc	.L29
 331              		.loc 1 532 38 discriminator 1 view .LVU89
 332 0030 06F50063 		add	r3, r6, #2048
 333 0034 9C42     		cmp	r4, r3
 334 0036 2CD3     		bcc	.L44
 335              	.L29:
 533:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 534:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 535:src/storage.c ****   }
 536:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 336              		.loc 1 536 8 is_stmt 1 view .LVU90
 337              		.loc 1 536 11 is_stmt 0 view .LVU91
 338 0038 3A4E     		ldr	r6, .L48+20
 339 003a B442     		cmp	r4, r6
 340 003c 2DD3     		bcc	.L31
 341              		.loc 1 536 41 discriminator 1 view .LVU92
 342 003e 06F58043 		add	r3, r6, #16384
 343 0042 9C42     		cmp	r4, r3
 344 0044 29D2     		bcs	.L31
 537:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 345              		.loc 1 537 5 is_stmt 1 view .LVU93
 346              	.LVL27:
 347              	.LBB36:
 348              	.LBI36:
 502:src/storage.c **** {
 349              		.loc 1 502 14 view .LVU94
 350              	.LBE36:
 504:src/storage.c **** }
 351              		.loc 1 504 2 view .LVU95
 538:src/storage.c ****     offset = dest - (char *) &UserFlash;
 352              		.loc 1 538 5 view .LVU96
 537:src/storage.c ****     offset = dest - (char *) &UserFlash;
 353              		.loc 1 537 12 is_stmt 0 view .LVU97
 354 0046 DFF81091 		ldr	r9, .L48+72
 355              		.loc 1 538 12 view .LVU98
 356 004a A61B     		subs	r6, r4, r6
 357              	.LVL28:
 358              	.L30:
 539:src/storage.c ****   }
ARM GAS  /tmp/ccKaa6YO.s 			page 18


 540:src/storage.c ****   else {
 541:src/storage.c ****     // Bad address
 542:src/storage.c ****     report_err( ERR_ILLEGAL );
 543:src/storage.c ****     return 1;
 544:src/storage.c ****   }
 545:src/storage.c **** 
 546:src/storage.c ****   FRESULT f;
 359              		.loc 1 546 3 is_stmt 1 view .LVU99
 547:src/storage.c **** 
 548:src/storage.c ****   sys_disk_write_enable(1);
 360              		.loc 1 548 3 view .LVU100
 361 004c DFF8F880 		ldr	r8, .L48+56
 362 0050 0120     		movs	r0, #1
 363 0052 C047     		blx	r8
 364              	.LVL29:
 549:src/storage.c **** 
 550:src/storage.c ****   f = check_create_dir ("/wp34s");
 365              		.loc 1 550 3 view .LVU101
 366              		.loc 1 550 7 is_stmt 0 view .LVU102
 367 0054 344B     		ldr	r3, .L48+24
 368 0056 3548     		ldr	r0, .L48+28
 369 0058 9847     		blx	r3
 370              	.LVL30:
 551:src/storage.c ****   if ( f != FR_OK ) {
 371              		.loc 1 551 3 is_stmt 1 view .LVU103
 372              		.loc 1 551 6 is_stmt 0 view .LVU104
 373 005a 10F0FF07 		ands	r7, r0, #255
 374 005e 3BD1     		bne	.L45
 552:src/storage.c ****     DispMsg = "FiOp.pf";
 553:src/storage.c ****     sys_disk_write_enable(0);
 554:src/storage.c ****     return 1;
 555:src/storage.c ****   }
 556:src/storage.c ****     f = f_open( FPT, name, FA_READ | FA_WRITE );
 375              		.loc 1 556 5 is_stmt 1 view .LVU105
 376              		.loc 1 556 9 is_stmt 0 view .LVU106
 377 0060 DFF8D4B0 		ldr	fp, .L48+40
 378 0064 DFF8F4A0 		ldr	r10, .L48+76
 379 0068 DBF80400 		ldr	r0, [fp, #4]
 380              	.LVL31:
 381              		.loc 1 556 9 view .LVU107
 382 006c 0322     		movs	r2, #3
 383 006e 4946     		mov	r1, r9
 384 0070 D047     		blx	r10
 385              	.LVL32:
 557:src/storage.c ****     if ( f != FR_OK ) {
 386              		.loc 1 557 5 is_stmt 1 view .LVU108
 387              		.loc 1 557 8 is_stmt 0 view .LVU109
 388 0072 C8B1     		cbz	r0, .L34
 558:src/storage.c ****       f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 389              		.loc 1 558 7 is_stmt 1 view .LVU110
 390              		.loc 1 558 11 is_stmt 0 view .LVU111
 391 0074 DBF80400 		ldr	r0, [fp, #4]
 392              	.LVL33:
 393              		.loc 1 558 11 view .LVU112
 394 0078 4946     		mov	r1, r9
 395 007a 0B22     		movs	r2, #11
 396 007c D047     		blx	r10
ARM GAS  /tmp/ccKaa6YO.s 			page 19


 397              	.LVL34:
 559:src/storage.c ****     }
 560:src/storage.c ****     if ( f != FR_OK ) {
 398              		.loc 1 560 5 is_stmt 1 view .LVU113
 399              		.loc 1 560 8 is_stmt 0 view .LVU114
 400 007e 98B1     		cbz	r0, .L34
 561:src/storage.c ****       DispMsg = "FiOp.pf2";
 401              		.loc 1 561 7 is_stmt 1 view .LVU115
 402              		.loc 1 561 15 is_stmt 0 view .LVU116
 403 0080 2B4B     		ldr	r3, .L48+32
 404 0082 2C4A     		ldr	r2, .L48+36
 405 0084 1A60     		str	r2, [r3]
 562:src/storage.c ****       sys_disk_write_enable(0);
 406              		.loc 1 562 7 is_stmt 1 view .LVU117
 407 0086 3846     		mov	r0, r7
 408              	.LVL35:
 409              		.loc 1 562 7 is_stmt 0 view .LVU118
 410 0088 C047     		blx	r8
 411              	.LVL36:
 563:src/storage.c ****       return 1;
 412              		.loc 1 563 7 is_stmt 1 view .LVU119
 413              		.loc 1 563 14 is_stmt 0 view .LVU120
 414 008a 0120     		movs	r0, #1
 564:src/storage.c ****     }
 565:src/storage.c ****     f_lseek( FPT, offset );
 566:src/storage.c ****     f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 567:src/storage.c ****     if (f != FR_OK) {
 568:src/storage.c ****       DispMsg = "FiOp.pf3";
 569:src/storage.c ****       f_close( FPT );
 570:src/storage.c ****       sys_disk_write_enable(0);
 571:src/storage.c ****       return 1;
 572:src/storage.c ****     }
 573:src/storage.c **** 
 574:src/storage.c ****     f = f_close( FPT );
 575:src/storage.c ****     if ( f != FR_OK ) {
 576:src/storage.c ****       DispMsg = "FiOp.pf4";
 577:src/storage.c ****       sys_disk_write_enable(0);
 578:src/storage.c ****       return 1;
 579:src/storage.c ****     }
 580:src/storage.c ****     sys_disk_write_enable(0);
 581:src/storage.c ****     return 0;
 582:src/storage.c ****   }
 415              		.loc 1 582 3 view .LVU121
 416 008c 03B0     		add	sp, sp, #12
 417              		.cfi_remember_state
 418              		.cfi_def_cfa_offset 36
 419              		@ sp needed
 420 008e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 421              	.LVL37:
 422              	.L44:
 423              		.cfi_restore_state
 533:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 424              		.loc 1 533 5 is_stmt 1 view .LVU122
 425              	.LBB37:
 426              	.LBI37:
 502:src/storage.c **** {
 427              		.loc 1 502 14 view .LVU123
ARM GAS  /tmp/ccKaa6YO.s 			page 20


 428              	.LBE37:
 504:src/storage.c **** }
 429              		.loc 1 504 2 view .LVU124
 534:src/storage.c ****   }
 430              		.loc 1 534 5 view .LVU125
 533:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 431              		.loc 1 533 12 is_stmt 0 view .LVU126
 432 0092 DFF8CC90 		ldr	r9, .L48+80
 534:src/storage.c ****   }
 433              		.loc 1 534 12 view .LVU127
 434 0096 A61B     		subs	r6, r4, r6
 435              	.LVL38:
 534:src/storage.c ****   }
 436              		.loc 1 534 12 view .LVU128
 437 0098 D8E7     		b	.L30
 438              	.LVL39:
 439              	.L31:
 542:src/storage.c ****     return 1;
 440              		.loc 1 542 5 is_stmt 1 view .LVU129
 441 009a 0720     		movs	r0, #7
 442 009c FFF7FEFF 		bl	report_err
 443              	.LVL40:
 543:src/storage.c ****   }
 444              		.loc 1 543 5 view .LVU130
 543:src/storage.c ****   }
 445              		.loc 1 543 12 is_stmt 0 view .LVU131
 446 00a0 0120     		movs	r0, #1
 447              	.LVL41:
 448              	.L28:
 449              		.loc 1 582 3 view .LVU132
 450 00a2 03B0     		add	sp, sp, #12
 451              		.cfi_remember_state
 452              		.cfi_def_cfa_offset 36
 453              		@ sp needed
 454 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 455              	.LVL42:
 456              	.L34:
 457              		.cfi_restore_state
 565:src/storage.c ****     f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 458              		.loc 1 565 5 is_stmt 1 view .LVU133
 459 00a8 234F     		ldr	r7, .L48+40
 460 00aa 244B     		ldr	r3, .L48+44
 461 00ac 7868     		ldr	r0, [r7, #4]
 462 00ae 3146     		mov	r1, r6
 463 00b0 9847     		blx	r3
 464              	.LVL43:
 566:src/storage.c ****     if (f != FR_OK) {
 465              		.loc 1 566 5 view .LVU134
 566:src/storage.c ****     if (f != FR_OK) {
 466              		.loc 1 566 9 is_stmt 0 view .LVU135
 467 00b2 2A46     		mov	r2, r5
 468 00b4 2146     		mov	r1, r4
 469 00b6 7868     		ldr	r0, [r7, #4]
 470 00b8 214C     		ldr	r4, .L48+48
 471              	.LVL44:
 566:src/storage.c ****     if (f != FR_OK) {
 472              		.loc 1 566 9 view .LVU136
ARM GAS  /tmp/ccKaa6YO.s 			page 21


 473 00ba 01AB     		add	r3, sp, #4
 474 00bc A047     		blx	r4
 475              	.LVL45:
 567:src/storage.c ****       DispMsg = "FiOp.pf3";
 476              		.loc 1 567 5 is_stmt 1 view .LVU137
 567:src/storage.c ****       DispMsg = "FiOp.pf3";
 477              		.loc 1 567 8 is_stmt 0 view .LVU138
 478 00be 0546     		mov	r5, r0
 479 00c0 98B9     		cbnz	r0, .L46
 574:src/storage.c ****     if ( f != FR_OK ) {
 480              		.loc 1 574 5 is_stmt 1 view .LVU139
 574:src/storage.c ****     if ( f != FR_OK ) {
 481              		.loc 1 574 9 is_stmt 0 view .LVU140
 482 00c2 7868     		ldr	r0, [r7, #4]
 483              	.LVL46:
 574:src/storage.c ****     if ( f != FR_OK ) {
 484              		.loc 1 574 9 view .LVU141
 485 00c4 1F4B     		ldr	r3, .L48+52
 486 00c6 9847     		blx	r3
 487              	.LVL47:
 575:src/storage.c ****       DispMsg = "FiOp.pf4";
 488              		.loc 1 575 5 is_stmt 1 view .LVU142
 575:src/storage.c ****       DispMsg = "FiOp.pf4";
 489              		.loc 1 575 8 is_stmt 0 view .LVU143
 490 00c8 0446     		mov	r4, r0
 491 00ca C8B9     		cbnz	r0, .L47
 580:src/storage.c ****     return 0;
 492              		.loc 1 580 5 is_stmt 1 view .LVU144
 493 00cc 1E4B     		ldr	r3, .L48+56
 494 00ce 9847     		blx	r3
 495              	.LVL48:
 581:src/storage.c ****   }
 496              		.loc 1 581 5 view .LVU145
 581:src/storage.c ****   }
 497              		.loc 1 581 12 is_stmt 0 view .LVU146
 498 00d0 2046     		mov	r0, r4
 499              		.loc 1 582 3 view .LVU147
 500 00d2 03B0     		add	sp, sp, #12
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed
 504 00d4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 505              	.LVL49:
 506              	.L45:
 507              		.cfi_restore_state
 552:src/storage.c ****     sys_disk_write_enable(0);
 508              		.loc 1 552 5 is_stmt 1 view .LVU148
 552:src/storage.c ****     sys_disk_write_enable(0);
 509              		.loc 1 552 13 is_stmt 0 view .LVU149
 510 00d8 154B     		ldr	r3, .L48+32
 511 00da 1C4A     		ldr	r2, .L48+60
 512 00dc 1A60     		str	r2, [r3]
 553:src/storage.c ****     return 1;
 513              		.loc 1 553 5 is_stmt 1 view .LVU150
 514 00de 0020     		movs	r0, #0
 515              	.LVL50:
 553:src/storage.c ****     return 1;
ARM GAS  /tmp/ccKaa6YO.s 			page 22


 516              		.loc 1 553 5 is_stmt 0 view .LVU151
 517 00e0 C047     		blx	r8
 518              	.LVL51:
 554:src/storage.c ****   }
 519              		.loc 1 554 5 is_stmt 1 view .LVU152
 554:src/storage.c ****   }
 520              		.loc 1 554 12 is_stmt 0 view .LVU153
 521 00e2 0120     		movs	r0, #1
 522              		.loc 1 582 3 view .LVU154
 523 00e4 03B0     		add	sp, sp, #12
 524              		.cfi_remember_state
 525              		.cfi_def_cfa_offset 36
 526              		@ sp needed
 527 00e6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 528              	.LVL52:
 529              	.L46:
 530              		.cfi_restore_state
 568:src/storage.c ****       f_close( FPT );
 531              		.loc 1 568 7 is_stmt 1 view .LVU155
 568:src/storage.c ****       f_close( FPT );
 532              		.loc 1 568 15 is_stmt 0 view .LVU156
 533 00ea 114B     		ldr	r3, .L48+32
 534 00ec 184A     		ldr	r2, .L48+64
 535 00ee 1A60     		str	r2, [r3]
 569:src/storage.c ****       sys_disk_write_enable(0);
 536              		.loc 1 569 7 is_stmt 1 view .LVU157
 537 00f0 7868     		ldr	r0, [r7, #4]
 538              	.LVL53:
 569:src/storage.c ****       sys_disk_write_enable(0);
 539              		.loc 1 569 7 is_stmt 0 view .LVU158
 540 00f2 144B     		ldr	r3, .L48+52
 541 00f4 9847     		blx	r3
 542              	.LVL54:
 570:src/storage.c ****       return 1;
 543              		.loc 1 570 7 is_stmt 1 view .LVU159
 544 00f6 144B     		ldr	r3, .L48+56
 545 00f8 0020     		movs	r0, #0
 546 00fa 9847     		blx	r3
 547              	.LVL55:
 571:src/storage.c ****     }
 548              		.loc 1 571 7 view .LVU160
 571:src/storage.c ****     }
 549              		.loc 1 571 14 is_stmt 0 view .LVU161
 550 00fc 0120     		movs	r0, #1
 551 00fe D0E7     		b	.L28
 552              	.LVL56:
 553              	.L47:
 576:src/storage.c ****       sys_disk_write_enable(0);
 554              		.loc 1 576 7 is_stmt 1 view .LVU162
 576:src/storage.c ****       sys_disk_write_enable(0);
 555              		.loc 1 576 15 is_stmt 0 view .LVU163
 556 0100 0B4B     		ldr	r3, .L48+32
 557 0102 144A     		ldr	r2, .L48+68
 558 0104 1A60     		str	r2, [r3]
 577:src/storage.c ****       return 1;
 559              		.loc 1 577 7 is_stmt 1 view .LVU164
 560 0106 2846     		mov	r0, r5
ARM GAS  /tmp/ccKaa6YO.s 			page 23


 561              	.LVL57:
 577:src/storage.c ****       return 1;
 562              		.loc 1 577 7 is_stmt 0 view .LVU165
 563 0108 0F4B     		ldr	r3, .L48+56
 564 010a 9847     		blx	r3
 565              	.LVL58:
 578:src/storage.c ****     }
 566              		.loc 1 578 7 is_stmt 1 view .LVU166
 578:src/storage.c ****     }
 567              		.loc 1 578 14 is_stmt 0 view .LVU167
 568 010c 0120     		movs	r0, #1
 569 010e C8E7     		b	.L28
 570              	.L49:
 571              		.align	2
 572              	.L48:
 573 0110 A1040008 		.word	134218913
 574 0114 A9040008 		.word	134218921
 575 0118 AD040008 		.word	134218925
 576 011c 00000000 		.word	.LANCHOR0
 577 0120 A5040008 		.word	134218917
 578 0124 00000000 		.word	UserFlash
 579 0128 D1030008 		.word	134218705
 580 012c 2C000000 		.word	.LC2
 581 0130 00000000 		.word	DispMsg
 582 0134 3C000000 		.word	.LC4
 583 0138 00200010 		.word	268443648
 584 013c 45040008 		.word	134218821
 585 0140 41040008 		.word	134218817
 586 0144 39040008 		.word	134218809
 587 0148 E1030008 		.word	134218721
 588 014c 34000000 		.word	.LC3
 589 0150 48000000 		.word	.LC5
 590 0154 54000000 		.word	.LC6
 591 0158 18000000 		.word	.LC1
 592 015c 35040008 		.word	134218805
 593 0160 00000000 		.word	.LC0
 594              		.cfi_endproc
 595              	.LFE19:
 597              		.section	.text.checksum_region.constprop.0,"ax",%progbits
 598              		.align	1
 599              		.p2align 2,,3
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
 605              	checksum_region.constprop.0:
 606              	.LVL59:
 607              	.LFB39:
 204:src/storage.c **** {
 608              		.loc 1 204 12 is_stmt 1 view -0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 206:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 612              		.loc 1 206 2 view .LVU169
 204:src/storage.c **** {
 613              		.loc 1 204 12 is_stmt 0 view .LVU170
ARM GAS  /tmp/ccKaa6YO.s 			page 24


 614 0000 08B5     		push	{r3, lr}
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 3, -8
 617              		.cfi_offset 14, -4
 204:src/storage.c **** {
 618              		.loc 1 204 12 view .LVU171
 619 0002 0346     		mov	r3, r0
 207:src/storage.c **** }
 620              		.loc 1 207 32 view .LVU172
 621 0004 43F6FC70 		movw	r0, #16380
 622              	.LVL60:
 206:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 623              		.loc 1 206 25 view .LVU173
 624 0008 5A88     		ldrh	r2, [r3, #2]
 625              	.LVL61:
 207:src/storage.c **** }
 626              		.loc 1 207 2 is_stmt 1 view .LVU174
 207:src/storage.c **** }
 627              		.loc 1 207 32 is_stmt 0 view .LVU175
 628 000a B0EB420F 		cmp	r0, r2, lsl #1
 629 000e 01D2     		bcs	.L54
 630 0010 0120     		movs	r0, #1
 208:src/storage.c **** 
 631              		.loc 1 208 1 view .LVU176
 632 0012 08BD     		pop	{r3, pc}
 633              	.LVL62:
 634              	.L54:
 207:src/storage.c **** }
 635              		.loc 1 207 35 view .LVU177
 636 0014 0448     		ldr	r0, .L55
 637 0016 5100     		lsls	r1, r2, #1
 638 0018 30F8042B 		ldrh	r2, [r0], #4
 639              	.LVL63:
 207:src/storage.c **** }
 640              		.loc 1 207 35 view .LVU178
 641 001c FFF7FEFF 		bl	test_checksum
 642              	.LVL64:
 207:src/storage.c **** }
 643              		.loc 1 207 32 view .LVU179
 644 0020 0038     		subs	r0, r0, #0
 645 0022 18BF     		it	ne
 646 0024 0120     		movne	r0, #1
 208:src/storage.c **** 
 647              		.loc 1 208 1 view .LVU180
 648 0026 08BD     		pop	{r3, pc}
 649              	.LVL65:
 650              	.L56:
 208:src/storage.c **** 
 651              		.loc 1 208 1 view .LVU181
 652              		.align	2
 653              	.L55:
 654 0028 00000000 		.word	UserFlash
 655              		.cfi_endproc
 656              	.LFE39:
 658              		.section	.text.flash_append,"ax",%progbits
 659              		.align	1
 660              		.p2align 2,,3
ARM GAS  /tmp/ccKaa6YO.s 			page 25


 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu fpv4-sp-d16
 666              	flash_append:
 667              	.LVL66:
 668              	.LFB21:
 583:src/storage.c **** 
 584:src/storage.c **** #else //ifdef DM42 false
 585:src/storage.c **** 
 586:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 587:src/storage.c **** {
 588:src/storage.c ****   char *name;
 589:src/storage.c ****   char *dest = (char *) destination;
 590:src/storage.c ****   FILE *f = NULL;
 591:src/storage.c ****   int offset;
 592:src/storage.c **** 
 593:src/storage.c ****   /*
 594:src/storage.c ****    *  Copy the source to the destination memory
 595:src/storage.c ****    */
 596:src/storage.c **** 
 597:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 598:src/storage.c **** 
 599:src/storage.c ****   /*
 600:src/storage.c ****    *  Update the correct region file
 601:src/storage.c ****    */
 602:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 603:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 604:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 605:src/storage.c ****   }
 606:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 607:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 608:src/storage.c ****     offset = dest - (char *) &UserFlash;
 609:src/storage.c ****   }
 610:src/storage.c ****   else {
 611:src/storage.c ****     // Bad address
 612:src/storage.c ****     report_err( ERR_ILLEGAL );
 613:src/storage.c ****     return 1;
 614:src/storage.c ****   }
 615:src/storage.c **** 
 616:src/storage.c ****   f = fopen( name, "rb+" );
 617:src/storage.c ****   if ( f == NULL ) {
 618:src/storage.c ****     f = fopen( name, "wb+" );
 619:src/storage.c ****   }
 620:src/storage.c ****   if ( f == NULL ) {
 621:src/storage.c ****     report_err( ERR_IO );
 622:src/storage.c ****     return 1;
 623:src/storage.c ****   }
 624:src/storage.c ****   fseek( f, offset, SEEK_SET );
 625:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 626:src/storage.c ****     fclose( f );
 627:src/storage.c ****     report_err( ERR_IO );
 628:src/storage.c ****     return 1;
 629:src/storage.c ****   }
 630:src/storage.c ****   fclose( f );
 631:src/storage.c ****  return 0;
 632:src/storage.c **** }
ARM GAS  /tmp/ccKaa6YO.s 			page 26


 633:src/storage.c ****   
 634:src/storage.c **** #endif //ifdef DM42
 635:src/storage.c **** 
 636:src/storage.c **** 
 637:src/storage.c **** #endif //ifdef REALBUILD
 638:src/storage.c **** 
 639:src/storage.c **** 
 640:src/storage.c **** /*
 641:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 642:src/storage.c ****  */
 643:src/storage.c **** void init_library( void )
 644:src/storage.c **** {
 645:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 646:src/storage.c **** 	  struct {
 647:src/storage.c **** 			unsigned short crc;
 648:src/storage.c **** 			unsigned short size;
 649:src/storage.c **** 			s_opcode prog[ 126 ];
 650:src/storage.c **** 		} lib;
 651:src/storage.c **** 		lib.size = 0;
 652:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 653:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 654:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 655:src/storage.c **** 	}
 656:src/storage.c **** }
 657:src/storage.c **** 
 658:src/storage.c **** 
 659:src/storage.c **** /*
 660:src/storage.c ****  *  Add data at the end of user flash memory.
 661:src/storage.c ****  *  Update crc and counter when done.
 662:src/storage.c ****  *  All sizes are given in steps.
 663:src/storage.c ****  */
 664:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 665:src/storage.c **** {
 669              		.loc 1 665 1 is_stmt 1 view -0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 2048
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 666:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 673              		.loc 1 666 3 view .LVU183
 665:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 674              		.loc 1 665 1 is_stmt 0 view .LVU184
 675 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 676              		.cfi_def_cfa_offset 32
 677              		.cfi_offset 4, -32
 678              		.cfi_offset 5, -28
 679              		.cfi_offset 6, -24
 680              		.cfi_offset 7, -20
 681              		.cfi_offset 8, -16
 682              		.cfi_offset 9, -12
 683              		.cfi_offset 10, -8
 684              		.cfi_offset 14, -4
 685              		.loc 1 666 9 view .LVU185
 686 0004 254C     		ldr	r4, .L69
 687 0006 04EB4006 		add	r6, r4, r0, lsl #1
 688              	.LVL67:
 667:src/storage.c ****   char *src = (char *) source;
 689              		.loc 1 667 3 is_stmt 1 view .LVU186
ARM GAS  /tmp/ccKaa6YO.s 			page 27


 668:src/storage.c **** #ifdef REALBUILD
 669:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 670:src/storage.c **** #else
 671:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 690              		.loc 1 671 31 is_stmt 0 view .LVU187
 691 000a 043C     		subs	r4, r4, #4
 692 000c 341B     		subs	r4, r6, r4
 672:src/storage.c **** #endif
 673:src/storage.c ****   char buffer[ PAGE_SIZE ];
 674:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 675:src/storage.c ****   count <<= 1;
 676:src/storage.c ****   //  print_debug (101, sys_free_mem());
 677:src/storage.c ****   if ( offset_in_page != 0 ) {
 693              		.loc 1 677 6 view .LVU188
 694 000e 14F0FF04 		ands	r4, r4, #255
 665:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 695              		.loc 1 665 1 view .LVU189
 696 0012 ADF5006D 		sub	sp, sp, #2048
 697              		.cfi_def_cfa_offset 2080
 665:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 698              		.loc 1 665 1 view .LVU190
 699 0016 0F46     		mov	r7, r1
 700              	.LVL68:
 671:src/storage.c **** #endif
 701              		.loc 1 671 3 is_stmt 1 view .LVU191
 673:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 702              		.loc 1 673 3 view .LVU192
 674:src/storage.c ****   count <<= 1;
 703              		.loc 1 674 3 view .LVU193
 675:src/storage.c ****   //  print_debug (101, sys_free_mem());
 704              		.loc 1 675 3 view .LVU194
 675:src/storage.c ****   //  print_debug (101, sys_free_mem());
 705              		.loc 1 675 9 is_stmt 0 view .LVU195
 706 0018 4FEA4205 		lsl	r5, r2, #1
 707              	.LVL69:
 708              		.loc 1 677 3 is_stmt 1 view .LVU196
 665:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 709              		.loc 1 665 1 is_stmt 0 view .LVU197
 710 001c 9846     		mov	r8, r3
 711              		.loc 1 677 6 view .LVU198
 712 001e 22D1     		bne	.L68
 713              	.LVL70:
 714              	.L58:
 678:src/storage.c ****     /*
 679:src/storage.c ****      *  We are not on a page boundary
 680:src/storage.c ****      *  Assemble a buffer from existing and new data
 681:src/storage.c ****      */
 682:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 683:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 684:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 685:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 686:src/storage.c ****       return 1;
 687:src/storage.c ****     }
 688:src/storage.c ****     src += bytes;
 689:src/storage.c ****     dest += bytes;
 690:src/storage.c ****     count -= bytes;
 691:src/storage.c ****   }
ARM GAS  /tmp/ccKaa6YO.s 			page 28


 692:src/storage.c **** 
 693:src/storage.c ****   if ( count > 0 ) {
 715              		.loc 1 693 3 is_stmt 1 view .LVU199
 716              		.loc 1 693 6 is_stmt 0 view .LVU200
 717 0020 002D     		cmp	r5, #0
 718 0022 07DD     		ble	.L63
 694:src/storage.c ****     /*
 695:src/storage.c ****      *  Move multiples of complete pages
 696:src/storage.c ****      */
 697:src/storage.c **** #ifdef DM42
 698:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // seems to assume that page_size = 2^8
 719              		.loc 1 698 5 is_stmt 1 view .LVU201
 720              		.loc 1 698 21 is_stmt 0 view .LVU202
 721 0024 05F2FF72 		addw	r2, r5, #2047
 722              	.LVL71:
 699:src/storage.c **** #else
 700:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE;
 701:src/storage.c **** #endif
 702:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 723              		.loc 1 702 5 is_stmt 1 view .LVU203
 724              		.loc 1 702 10 is_stmt 0 view .LVU204
 725 0028 1212     		asrs	r2, r2, #8
 726              	.LVL72:
 727              		.loc 1 702 10 view .LVU205
 728 002a 3946     		mov	r1, r7
 729 002c 3046     		mov	r0, r6
 730 002e FFF7FEFF 		bl	program_flash
 731              	.LVL73:
 732              		.loc 1 702 8 view .LVU206
 733 0032 98B9     		cbnz	r0, .L62
 734              	.LVL74:
 735              	.L63:
 703:src/storage.c ****       return 1;
 704:src/storage.c ****     }
 705:src/storage.c ****   }
 706:src/storage.c **** 
 707:src/storage.c ****   /*
 708:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 709:src/storage.c ****    */
 710:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 736              		.loc 1 710 3 is_stmt 1 view .LVU207
 737 0034 1A49     		ldr	r1, .L69+4
 738 0036 4FF40062 		mov	r2, #2048
 739 003a 6846     		mov	r0, sp
 740 003c FFF7FEFF 		bl	xcopy
 741              	.LVL75:
 711:src/storage.c ****   fr->size = size;
 742              		.loc 1 711 3 view .LVU208
 712:src/storage.c ****   checksum_region( &UserFlash, fr );
 743              		.loc 1 712 3 is_stmt 0 view .LVU209
 744 0040 6846     		mov	r0, sp
 711:src/storage.c ****   fr->size = size;
 745              		.loc 1 711 12 view .LVU210
 746 0042 ADF80280 		strh	r8, [sp, #2]	@ movhi
 747              		.loc 1 712 3 is_stmt 1 view .LVU211
 748 0046 FFF7FEFF 		bl	checksum_region.constprop.0
 749              	.LVL76:
ARM GAS  /tmp/ccKaa6YO.s 			page 29


 713:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
 750              		.loc 1 713 3 view .LVU212
 751              		.loc 1 713 10 is_stmt 0 view .LVU213
 752 004a 6946     		mov	r1, sp
 753 004c 0122     		movs	r2, #1
 754 004e 1448     		ldr	r0, .L69+4
 755 0050 FFF7FEFF 		bl	program_flash
 756              	.LVL77:
 714:src/storage.c **** }
 757              		.loc 1 714 1 view .LVU214
 758 0054 0DF5006D 		add	sp, sp, #2048
 759              		.cfi_remember_state
 760              		.cfi_def_cfa_offset 32
 761              	.LVL78:
 762              		.loc 1 714 1 view .LVU215
 763              		@ sp needed
 764 0058 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 765              	.LVL79:
 766              	.L62:
 767              		.cfi_restore_state
 768              	.LBB38:
 686:src/storage.c ****     }
 769              		.loc 1 686 14 view .LVU216
 770 005c 0120     		movs	r0, #1
 771              	.LBE38:
 772              		.loc 1 714 1 view .LVU217
 773 005e 0DF5006D 		add	sp, sp, #2048
 774              		.cfi_remember_state
 775              		.cfi_def_cfa_offset 32
 776              	.LVL80:
 777              		.loc 1 714 1 view .LVU218
 778              		@ sp needed
 779 0062 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 780              	.LVL81:
 781              	.L68:
 782              		.cfi_restore_state
 783              	.LBB39:
 682:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 784              		.loc 1 682 5 is_stmt 1 view .LVU219
 683:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 785              		.loc 1 683 25 is_stmt 0 view .LVU220
 786 0066 A6EB040A 		sub	r10, r6, r4
 683:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 787              		.loc 1 683 5 view .LVU221
 788 006a 5146     		mov	r1, r10
 789              	.LVL82:
 683:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 790              		.loc 1 683 5 view .LVU222
 791 006c 2246     		mov	r2, r4
 792 006e 6846     		mov	r0, sp
 793              	.LVL83:
 682:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 794              		.loc 1 682 15 view .LVU223
 795 0070 C4F50069 		rsb	r9, r4, #2048
 796              	.LVL84:
 683:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 797              		.loc 1 683 5 is_stmt 1 view .LVU224
ARM GAS  /tmp/ccKaa6YO.s 			page 30


 798 0074 FFF7FEFF 		bl	xcopy
 799              	.LVL85:
 684:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 800              		.loc 1 684 5 view .LVU225
 801 0078 4A46     		mov	r2, r9
 802 007a 3946     		mov	r1, r7
 803 007c 0DEB0400 		add	r0, sp, r4
 804 0080 FFF7FEFF 		bl	xcopy
 805              	.LVL86:
 685:src/storage.c ****       return 1;
 806              		.loc 1 685 5 view .LVU226
 685:src/storage.c ****       return 1;
 807              		.loc 1 685 10 is_stmt 0 view .LVU227
 808 0084 6946     		mov	r1, sp
 809 0086 5046     		mov	r0, r10
 810 0088 0122     		movs	r2, #1
 811 008a FFF7FEFF 		bl	program_flash
 812              	.LVL87:
 685:src/storage.c ****       return 1;
 813              		.loc 1 685 8 view .LVU228
 814 008e 0028     		cmp	r0, #0
 815 0090 E4D1     		bne	.L62
 688:src/storage.c ****     dest += bytes;
 816              		.loc 1 688 5 is_stmt 1 view .LVU229
 688:src/storage.c ****     dest += bytes;
 817              		.loc 1 688 9 is_stmt 0 view .LVU230
 818 0092 4F44     		add	r7, r7, r9
 819              	.LVL88:
 689:src/storage.c ****     count -= bytes;
 820              		.loc 1 689 5 is_stmt 1 view .LVU231
 689:src/storage.c ****     count -= bytes;
 821              		.loc 1 689 10 is_stmt 0 view .LVU232
 822 0094 4E44     		add	r6, r6, r9
 823              	.LVL89:
 690:src/storage.c ****   }
 824              		.loc 1 690 5 is_stmt 1 view .LVU233
 690:src/storage.c ****   }
 825              		.loc 1 690 11 is_stmt 0 view .LVU234
 826 0096 A5EB0905 		sub	r5, r5, r9
 827              	.LVL90:
 690:src/storage.c ****   }
 828              		.loc 1 690 11 view .LVU235
 829 009a C1E7     		b	.L58
 830              	.L70:
 831              		.align	2
 832              	.L69:
 833 009c 04000000 		.word	UserFlash+4
 834 00a0 00000000 		.word	UserFlash
 835              	.LBE39:
 836              		.cfi_endproc
 837              	.LFE21:
 839              		.section	.text.load_program_file,"ax",%progbits
 840              		.align	1
 841              		.p2align 2,,3
 842              		.global	load_program_file
 843              		.syntax unified
 844              		.thumb
ARM GAS  /tmp/ccKaa6YO.s 			page 31


 845              		.thumb_func
 846              		.fpu fpv4-sp-d16
 848              	load_program_file:
 849              	.LVL91:
 850              	.LFB32:
 715:src/storage.c **** 
 716:src/storage.c **** 
 717:src/storage.c **** /*
 718:src/storage.c ****  *  Remove steps from user flash memory.
 719:src/storage.c ****  */
 720:src/storage.c **** int flash_remove( int step_no, int count )
 721:src/storage.c **** {
 722:src/storage.c **** 	const int size = UserFlash.size - count;
 723:src/storage.c **** 	step_no = offsetLIB( step_no );
 724:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 725:src/storage.c **** 			     size - step_no, size );
 726:src/storage.c **** }
 727:src/storage.c **** 
 728:src/storage.c **** 
 729:src/storage.c **** /*
 730:src/storage.c ****  *  Simple backup / restore
 731:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 732:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511)
 733:src/storage.c ****  */
 734:src/storage.c **** void flash_backup( enum nilop op )
 735:src/storage.c **** {
 736:src/storage.c **** 	if ( not_running() ) {
 737:src/storage.c **** 		process_cmdline_set_lift();
 738:src/storage.c **** 		init_state();
 739:src/storage.c **** 		checksum_all();
 740:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 741:src/storage.c **** 			report_err( ERR_IO );
 742:src/storage.c **** 			DispMsg = "Error";
 743:src/storage.c **** 		}
 744:src/storage.c **** 		else {
 745:src/storage.c **** 			DispMsg = "Saved";
 746:src/storage.c **** 		}
 747:src/storage.c **** 	}
 748:src/storage.c **** }
 749:src/storage.c **** 
 750:src/storage.c **** 
 751:src/storage.c **** void flash_restore( enum nilop op )
 752:src/storage.c **** {
 753:src/storage.c **** 	if ( not_running() ) {
 754:src/storage.c **** 		if ( checksum_backup() ) {
 755:src/storage.c **** 			report_err( ERR_INVALID );
 756:src/storage.c **** 		}
 757:src/storage.c **** 		else {
 758:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
 759:src/storage.c **** 			init_state();
 760:src/storage.c **** 			DispMsg = "Restored";
 761:src/storage.c **** 		}
 762:src/storage.c **** 	}
 763:src/storage.c **** }
 764:src/storage.c **** 
 765:src/storage.c **** 
 766:src/storage.c **** /*
ARM GAS  /tmp/ccKaa6YO.s 			page 32


 767:src/storage.c ****  *  Load the user program area from the backup.
 768:src/storage.c ****  *  Called by PLOAD.
 769:src/storage.c ****  */
 770:src/storage.c **** void load_program( enum nilop op )
 771:src/storage.c **** {
 772:src/storage.c **** 	if ( not_running() ) {
 773:src/storage.c **** 		if ( checksum_backup() ) {
 774:src/storage.c **** 			/*
 775:src/storage.c **** 			 *  Not a valid backup
 776:src/storage.c **** 			 */
 777:src/storage.c **** 			report_err( ERR_INVALID );
 778:src/storage.c **** 			return;
 779:src/storage.c **** 		}
 780:src/storage.c **** 		clpall();
 781:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 782:src/storage.c **** 	}
 783:src/storage.c **** }
 784:src/storage.c **** 
 785:src/storage.c **** 
 786:src/storage.c **** /*
 787:src/storage.c ****  *  Load registers from backup
 788:src/storage.c ****  */
 789:src/storage.c **** void load_registers( enum nilop op )
 790:src/storage.c **** {
 791:src/storage.c **** 	int count;
 792:src/storage.c **** 	if ( checksum_backup() ) {
 793:src/storage.c **** 		/*
 794:src/storage.c **** 		 *  Not a valid backup region
 795:src/storage.c **** 		 */
 796:src/storage.c **** 		report_err( ERR_INVALID );
 797:src/storage.c **** 		return;
 798:src/storage.c **** 	}
 799:src/storage.c **** 	count = NumRegs;
 800:src/storage.c **** 	if ( is_dblmode() ) {
 801:src/storage.c **** 		// Don't clobber the stack in DP mode
 802:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 803:src/storage.c **** 	}
 804:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 805:src/storage.c **** 		count = BackupFlash._numregs;
 806:src/storage.c **** 	}
 807:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 808:src/storage.c **** }
 809:src/storage.c **** 
 810:src/storage.c **** 
 811:src/storage.c **** /*
 812:src/storage.c ****  *  Load the statistical summation registers from backup
 813:src/storage.c ****  */
 814:src/storage.c **** void load_sigma( enum nilop op )
 815:src/storage.c **** {
 816:src/storage.c **** 	if ( checksum_backup() ) {
 817:src/storage.c **** 		/*
 818:src/storage.c **** 		 *  Not a valid backup region
 819:src/storage.c **** 		 */
 820:src/storage.c **** 		report_err( ERR_INVALID );
 821:src/storage.c **** 		return;
 822:src/storage.c **** 	}
 823:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
ARM GAS  /tmp/ccKaa6YO.s 			page 33


 824:src/storage.c **** 		/*
 825:src/storage.c **** 		 *  Backup has no data
 826:src/storage.c **** 		 */
 827:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 828:src/storage.c **** 		return;
 829:src/storage.c **** 	}
 830:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 831:src/storage.c **** }
 832:src/storage.c **** 
 833:src/storage.c **** 
 834:src/storage.c **** /*
 835:src/storage.c ****  *  Load the configuration data from the backup
 836:src/storage.c ****  */
 837:src/storage.c **** void load_state( enum nilop op )
 838:src/storage.c **** {
 839:src/storage.c **** 	if ( not_running() ) {
 840:src/storage.c **** 		if ( checksum_backup() ) {
 841:src/storage.c **** 			/*
 842:src/storage.c **** 			 *  Not a valid backup region
 843:src/storage.c **** 			 */
 844:src/storage.c **** 			report_err( ERR_INVALID );
 845:src/storage.c **** 			return;
 846:src/storage.c **** 		}
 847:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 848:src/storage.c **** 		init_state();
 849:src/storage.c **** 		clrretstk_pc();
 850:src/storage.c **** 	}
 851:src/storage.c **** }
 852:src/storage.c **** 
 853:src/storage.c **** 
 854:src/storage.c **** /*
 855:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 856:src/storage.c ****  */
 857:src/storage.c **** void store_program( enum nilop op )
 858:src/storage.c **** {
 859:src/storage.c **** 	opcode lbl; 
 860:src/storage.c **** 	unsigned int pc;
 861:src/storage.c **** 	int space_needed, count, free;
 862:src/storage.c **** 
 863:src/storage.c **** 	if ( not_running() ) {
 864:src/storage.c **** 		/*
 865:src/storage.c **** 		 *  Don't copy from library or XROM
 866:src/storage.c **** 		 */
 867:src/storage.c **** 		pc = nLIB( state_pc() );
 868:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 869:src/storage.c **** 			report_err( ERR_ILLEGAL );
 870:src/storage.c **** 			return;
 871:src/storage.c **** 		}
 872:src/storage.c **** 		/*
 873:src/storage.c **** 		 *  Check if program is labeled
 874:src/storage.c **** 		 */
 875:src/storage.c **** 		update_program_bounds( 1 );
 876:src/storage.c **** 		lbl = getprog( ProgBegin );
 877:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 878:src/storage.c **** 			report_err( ERR_NO_LBL );
 879:src/storage.c **** 			return;
 880:src/storage.c **** 		}
ARM GAS  /tmp/ccKaa6YO.s 			page 34


 881:src/storage.c **** 		/*
 882:src/storage.c **** 		 *  Compute space needed
 883:src/storage.c **** 		 */
 884:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 885:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 886:src/storage.c **** 
 887:src/storage.c **** 		/*
 888:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 889:src/storage.c **** 		 */
 890:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 891:src/storage.c **** 		if ( pc != 0 ) {
 892:src/storage.c **** 			/*
 893:src/storage.c **** 			 *  CLP in library
 894:src/storage.c **** 			 */
 895:src/storage.c **** 			unsigned int old_pc = state_pc();
 896:src/storage.c **** 			set_pc( pc );
 897:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 898:src/storage.c **** 			if ( space_needed <= free ) {
 899:src/storage.c **** 				clrprog();
 900:src/storage.c **** 			}
 901:src/storage.c **** 			set_pc( old_pc );
 902:src/storage.c **** 		}
 903:src/storage.c **** 		if ( space_needed > free ) {
 904:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 905:src/storage.c **** 			return;
 906:src/storage.c **** 		}
 907:src/storage.c **** 		// 3. Append program
 908:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 909:src/storage.c **** 	}
 910:src/storage.c **** }
 911:src/storage.c **** 
 912:src/storage.c **** 
 913:src/storage.c **** /*
 914:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 915:src/storage.c ****  */
 916:src/storage.c **** void recall_program( enum nilop op )
 917:src/storage.c **** {
 918:src/storage.c **** 	if ( not_running() ) {
 919:src/storage.c **** 		if ( state_pc() == 0 ) {
 920:src/storage.c **** 			State.pc = 1;
 921:src/storage.c **** 		}
 922:src/storage.c **** 		update_program_bounds( 1 );
 923:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 924:src/storage.c **** 	}
 925:src/storage.c **** }
 926:src/storage.c **** 
 927:src/storage.c **** 
 928:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 929:src/storage.c **** /*
 930:src/storage.c ****  *  Filesystem access for emulator
 931:src/storage.c ****  */
 932:src/storage.c **** 
 933:src/storage.c **** #ifndef DM42
 934:src/storage.c **** 
 935:src/storage.c **** #ifdef _WIN32
 936:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
 937:src/storage.c **** #else
ARM GAS  /tmp/ccKaa6YO.s 			page 35


 938:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
 939:src/storage.c **** #endif
 940:src/storage.c **** 
 941:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 942:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 943:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 944:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 945:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 946:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 947:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 948:src/storage.c **** 
 949:src/storage.c **** /*
 950:src/storage.c ****  *  Show (GUI) message
 951:src/storage.c ****  */
 952:src/storage.c **** #ifdef QTGUI
 953:src/storage.c **** extern void showMessage(const char* title, const char* message);
 954:src/storage.c **** #endif
 955:src/storage.c **** 
 956:src/storage.c **** 
 957:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 958:src/storage.c **** {
 959:src/storage.c **** 	va_list args;
 960:src/storage.c **** #ifndef QTGUI
 961:src/storage.c **** #ifdef WINGUI
 962:src/storage.c **** 	char msg[ 10000 ];
 963:src/storage.c **** 	va_start( args, format );
 964:src/storage.c **** 	vsprintf( msg, format, args );
 965:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 966:src/storage.c **** #else
 967:src/storage.c **** 	va_start( args, format );
 968:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 969:src/storage.c **** 	vfprintf( stderr, format, args );
 970:src/storage.c **** 	fputc( '\n', stderr );
 971:src/storage.c **** #endif
 972:src/storage.c **** #else
 973:src/storage.c **** 	char msg[ 10000 ];
 974:src/storage.c **** 	va_start( args, format );
 975:src/storage.c **** 	vsprintf( msg, format, args );
 976:src/storage.c **** 	showMessage(title, msg);
 977:src/storage.c **** #endif
 978:src/storage.c **** }
 979:src/storage.c **** 
 980:src/storage.c **** #endif //ifndef DM42
 981:src/storage.c **** 
 982:src/storage.c **** /*
 983:src/storage.c ****  *  Save/Load state to a file
 984:src/storage.c ****  */
 985:src/storage.c **** #ifdef DM42
 986:src/storage.c **** extern void display_current_menu ();
 987:src/storage.c **** 
 988:src/storage.c **** void import_program () {  
 989:src/storage.c ****   file_selection_screen ("Program File", "/wp34s", ".dat", load_program_file, 0, 0, NULL);
 990:src/storage.c ****   //  print_debug (100, 4);
 991:src/storage.c ****   display_current_menu ();
 992:src/storage.c **** }
 993:src/storage.c **** 
 994:src/storage.c **** int load_program_file (const char * fpath, const char * fname, void * data) {
ARM GAS  /tmp/ccKaa6YO.s 			page 36


 851              		.loc 1 994 77 is_stmt 1 view -0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 2064
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 995:src/storage.c ****   FRESULT f;
 855              		.loc 1 995 3 view .LVU237
 996:src/storage.c ****   uint x;
 856              		.loc 1 996 3 view .LVU238
 997:src/storage.c ****   char buffer[ PAGE_SIZE ];
 857              		.loc 1 997 3 view .LVU239
 998:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 858              		.loc 1 998 3 view .LVU240
 994:src/storage.c ****   FRESULT f;
 859              		.loc 1 994 77 is_stmt 0 view .LVU241
 860 0000 70B5     		push	{r4, r5, r6, lr}
 861              		.cfi_def_cfa_offset 16
 862              		.cfi_offset 4, -16
 863              		.cfi_offset 5, -12
 864              		.cfi_offset 6, -8
 865              		.cfi_offset 14, -4
 999:src/storage.c ****   f_close( FPT ); // just in case!
 866              		.loc 1 999 3 view .LVU242
 867 0002 1C4C     		ldr	r4, .L78
 868 0004 1C4D     		ldr	r5, .L78+4
 994:src/storage.c ****   FRESULT f;
 869              		.loc 1 994 77 view .LVU243
 870 0006 ADF5016D 		sub	sp, sp, #2064
 871              		.cfi_def_cfa_offset 2080
 872              	.LVL92:
 873              		.loc 1 999 3 is_stmt 1 view .LVU244
 994:src/storage.c ****   FRESULT f;
 874              		.loc 1 994 77 is_stmt 0 view .LVU245
 875 000a 0190     		str	r0, [sp, #4]
 876              		.loc 1 999 3 view .LVU246
 877 000c 6068     		ldr	r0, [r4, #4]
 878              	.LVL93:
 879              		.loc 1 999 3 view .LVU247
 880 000e A847     		blx	r5
 881              	.LVL94:
1000:src/storage.c **** 
1001:src/storage.c ****   f = f_open( FPT, fpath, FA_READ );
 882              		.loc 1 1001 3 is_stmt 1 view .LVU248
 883              		.loc 1 1001 7 is_stmt 0 view .LVU249
 884 0010 0199     		ldr	r1, [sp, #4]
 885 0012 6068     		ldr	r0, [r4, #4]
 886 0014 194B     		ldr	r3, .L78+8
 887 0016 0122     		movs	r2, #1
 888 0018 9847     		blx	r3
 889              	.LVL95:
1002:src/storage.c ****   if (f !=0) {
 890              		.loc 1 1002 3 is_stmt 1 view .LVU250
 891              		.loc 1 1002 6 is_stmt 0 view .LVU251
 892 001a 10BB     		cbnz	r0, .L76
1003:src/storage.c ****     //    DispMsg = "Open Err";
1004:src/storage.c ****     print_debug (100,1);
1005:src/storage.c ****     return 1; // Display the error message
1006:src/storage.c ****   }
ARM GAS  /tmp/ccKaa6YO.s 			page 37


1007:src/storage.c ****   f = f_read( FPT, buffer, PAGE_SIZE, &x);
 893              		.loc 1 1007 3 is_stmt 1 view .LVU252
 894              		.loc 1 1007 7 is_stmt 0 view .LVU253
 895 001c 03AB     		add	r3, sp, #12
 896 001e 4FF40062 		mov	r2, #2048
 897 0022 174E     		ldr	r6, .L78+12
 898 0024 6068     		ldr	r0, [r4, #4]
 899              	.LVL96:
 900              		.loc 1 1007 7 view .LVU254
 901 0026 04A9     		add	r1, sp, #16
 902              	.LVL97:
 903              		.loc 1 1007 7 view .LVU255
 904 0028 B047     		blx	r6
 905              	.LVL98:
1008:src/storage.c ****   if ( !(f_eof(FPT)) ) {
 906              		.loc 1 1008 3 is_stmt 1 view .LVU256
 907              		.loc 1 1008 10 is_stmt 0 view .LVU257
 908 002a 6068     		ldr	r0, [r4, #4]
 909              		.loc 1 1008 6 view .LVU258
 910 002c 8269     		ldr	r2, [r0, #24]
 911 002e C368     		ldr	r3, [r0, #12]
 912 0030 9A42     		cmp	r2, r3
 913 0032 0CD1     		bne	.L77
1009:src/storage.c ****     //    DispMsg = "Too big";
1010:src/storage.c ****     print_debug (100,2);
1011:src/storage.c ****     f_close( FPT );
1012:src/storage.c ****     return 1; // Display the error message
1013:src/storage.c ****   }
1014:src/storage.c ****   f_close( FPT );
 914              		.loc 1 1014 3 is_stmt 1 view .LVU259
 915 0034 A847     		blx	r5
 916              	.LVL99:
1015:src/storage.c ****   //  print_debug (100, 3);
1016:src/storage.c ****   //  print_debug (100, sys_free_mem());
1017:src/storage.c ****   //  print_debug (100, UserFlash.size);
1018:src/storage.c ****   //  print_debug (100, fr->size);
1019:src/storage.c ****   flash_append (UserFlash.size, fr->prog, fr->size, UserFlash.size + fr->size);
 917              		.loc 1 1019 3 view .LVU260
 918              		.loc 1 1019 26 is_stmt 0 view .LVU261
 919 0036 134B     		ldr	r3, .L78+16
 920              		.loc 1 1019 3 view .LVU262
 921 0038 BDF81220 		ldrh	r2, [sp, #18]
 922 003c 5888     		ldrh	r0, [r3, #2]
 923 003e 05A9     		add	r1, sp, #20
 924 0040 8318     		adds	r3, r0, r2
 925 0042 FFF7FEFF 		bl	flash_append
 926              	.LVL100:
1020:src/storage.c ****   return 1; // All done!
 927              		.loc 1 1020 3 is_stmt 1 view .LVU263
1021:src/storage.c **** }
 928              		.loc 1 1021 1 is_stmt 0 view .LVU264
 929 0046 0120     		movs	r0, #1
 930 0048 0DF5016D 		add	sp, sp, #2064
 931              		.cfi_remember_state
 932              		.cfi_def_cfa_offset 16
 933              		@ sp needed
 934 004c 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccKaa6YO.s 			page 38


 935              	.LVL101:
 936              	.L77:
 937              		.cfi_restore_state
1010:src/storage.c ****     f_close( FPT );
 938              		.loc 1 1010 5 is_stmt 1 view .LVU265
 939 004e 0221     		movs	r1, #2
 940 0050 6420     		movs	r0, #100
 941 0052 FFF7FEFF 		bl	print_debug
 942              	.LVL102:
1011:src/storage.c ****     return 1; // Display the error message
 943              		.loc 1 1011 5 view .LVU266
 944 0056 6068     		ldr	r0, [r4, #4]
 945 0058 A847     		blx	r5
 946              	.LVL103:
1012:src/storage.c ****   }
 947              		.loc 1 1012 5 view .LVU267
 948              		.loc 1 1021 1 is_stmt 0 view .LVU268
 949 005a 0120     		movs	r0, #1
 950 005c 0DF5016D 		add	sp, sp, #2064
 951              		.cfi_remember_state
 952              		.cfi_def_cfa_offset 16
 953              		@ sp needed
 954 0060 70BD     		pop	{r4, r5, r6, pc}
 955              	.LVL104:
 956              	.L76:
 957              		.cfi_restore_state
1004:src/storage.c ****     return 1; // Display the error message
 958              		.loc 1 1004 5 is_stmt 1 view .LVU269
 959 0062 0121     		movs	r1, #1
 960 0064 6420     		movs	r0, #100
 961              	.LVL105:
1004:src/storage.c ****     return 1; // Display the error message
 962              		.loc 1 1004 5 is_stmt 0 view .LVU270
 963 0066 FFF7FEFF 		bl	print_debug
 964              	.LVL106:
1005:src/storage.c ****   }
 965              		.loc 1 1005 5 is_stmt 1 view .LVU271
 966              		.loc 1 1021 1 is_stmt 0 view .LVU272
 967 006a 0120     		movs	r0, #1
 968 006c 0DF5016D 		add	sp, sp, #2064
 969              		.cfi_def_cfa_offset 16
 970              		@ sp needed
 971 0070 70BD     		pop	{r4, r5, r6, pc}
 972              	.LVL107:
 973              	.L79:
 974              		.loc 1 1021 1 view .LVU273
 975 0072 00BF     		.align	2
 976              	.L78:
 977 0074 00200010 		.word	268443648
 978 0078 39040008 		.word	134218809
 979 007c 35040008 		.word	134218805
 980 0080 3D040008 		.word	134218813
 981 0084 00000000 		.word	UserFlash
 982              		.cfi_endproc
 983              	.LFE32:
 985              		.section	.text.crc16,"ax",%progbits
 986              		.align	1
ARM GAS  /tmp/ccKaa6YO.s 			page 39


 987              		.p2align 2,,3
 988              		.global	crc16
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu fpv4-sp-d16
 994              	crc16:
 995              	.LVL108:
 996              	.LFB3:
 137:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 997              		.loc 1 137 1 is_stmt 1 view -0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 0
 1000              		@ frame_needed = 0, uses_anonymous_args = 0
 1001              		@ link register save eliminated.
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1002              		.loc 1 138 2 view .LVU275
 139:src/storage.c **** 	unsigned int i;
 1003              		.loc 1 139 2 view .LVU276
 140:src/storage.c **** 
 1004              		.loc 1 140 2 view .LVU277
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1005              		.loc 1 142 2 view .LVU278
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1006              		.loc 1 142 15 view .LVU279
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1007              		.loc 1 142 2 is_stmt 0 view .LVU280
 1008 0000 B1B1     		cbz	r1, .L83
 1009 0002 0144     		add	r1, r1, r0
 1010              	.LVL109:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1011              		.loc 1 138 21 view .LVU281
 1012 0004 45F6A523 		movw	r3, #23205
 1013              	.LVL110:
 1014              	.L82:
 143:src/storage.c **** 		crc ^= *d++;
 1015              		.loc 1 143 3 is_stmt 1 discriminator 3 view .LVU282
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1016              		.loc 1 144 10 is_stmt 0 discriminator 3 view .LVU283
 1017 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1018              	.LVL111:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1019              		.loc 1 144 10 discriminator 3 view .LVU284
 1020 000c 5BBA     		rev16	r3, r3
 1021              	.LVL112:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1022              		.loc 1 144 10 discriminator 3 view .LVU285
 1023 000e 9BB2     		uxth	r3, r3
 1024              	.LVL113:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1025              		.loc 1 144 3 is_stmt 1 discriminator 3 view .LVU286
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1026              		.loc 1 144 7 is_stmt 0 discriminator 3 view .LVU287
 1027 0010 5340     		eors	r3, r3, r2
 1028              	.LVL114:
 145:src/storage.c **** 		crc ^= crc << 12;
 1029              		.loc 1 145 3 is_stmt 1 discriminator 3 view .LVU288
ARM GAS  /tmp/ccKaa6YO.s 			page 40


 145:src/storage.c **** 		crc ^= crc << 12;
 1030              		.loc 1 145 7 is_stmt 0 discriminator 3 view .LVU289
 1031 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1032 0016 5340     		eors	r3, r3, r2
 1033              	.LVL115:
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1034              		.loc 1 146 3 is_stmt 1 discriminator 3 view .LVU290
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1035              		.loc 1 146 7 is_stmt 0 discriminator 3 view .LVU291
 1036 0018 83EA0332 		eor	r2, r3, r3, lsl #12
 1037              	.LVL116:
 147:src/storage.c **** 	}
 1038              		.loc 1 147 3 is_stmt 1 discriminator 3 view .LVU292
 147:src/storage.c **** 	}
 1039              		.loc 1 147 25 is_stmt 0 discriminator 3 view .LVU293
 1040 001c 5301     		lsls	r3, r2, #5
 1041 001e 03F4FF53 		and	r3, r3, #8160
 147:src/storage.c **** 	}
 1042              		.loc 1 147 7 discriminator 3 view .LVU294
 1043 0022 92B2     		uxth	r2, r2
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1044              		.loc 1 142 2 discriminator 3 view .LVU295
 1045 0024 8142     		cmp	r1, r0
 147:src/storage.c **** 	}
 1046              		.loc 1 147 7 discriminator 3 view .LVU296
 1047 0026 83EA0203 		eor	r3, r3, r2
 1048              	.LVL117:
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1049              		.loc 1 142 27 is_stmt 1 discriminator 3 view .LVU297
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1050              		.loc 1 142 15 discriminator 3 view .LVU298
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1051              		.loc 1 142 2 is_stmt 0 discriminator 3 view .LVU299
 1052 002a EDD1     		bne	.L82
 149:src/storage.c **** }
 1053              		.loc 1 149 2 is_stmt 1 view .LVU300
 150:src/storage.c **** 
 1054              		.loc 1 150 1 is_stmt 0 view .LVU301
 1055 002c 1846     		mov	r0, r3
 1056              	.LVL118:
 150:src/storage.c **** 
 1057              		.loc 1 150 1 view .LVU302
 1058 002e 7047     		bx	lr
 1059              	.LVL119:
 1060              	.L83:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1061              		.loc 1 138 21 view .LVU303
 1062 0030 45F6A523 		movw	r3, #23205
 149:src/storage.c **** }
 1063              		.loc 1 149 2 is_stmt 1 view .LVU304
 150:src/storage.c **** 
 1064              		.loc 1 150 1 is_stmt 0 view .LVU305
 1065 0034 1846     		mov	r0, r3
 1066              	.LVL120:
 150:src/storage.c **** 
 1067              		.loc 1 150 1 view .LVU306
 1068 0036 7047     		bx	lr
ARM GAS  /tmp/ccKaa6YO.s 			page 41


 1069              		.cfi_endproc
 1070              	.LFE3:
 1072              		.section	.text.checksum_program,"ax",%progbits
 1073              		.align	1
 1074              		.p2align 2,,3
 1075              		.global	checksum_program
 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu fpv4-sp-d16
 1081              	checksum_program:
 1082              	.LFB5:
 172:src/storage.c **** 	update_program_bounds( 1 );
 1083              		.loc 1 172 1 is_stmt 1 view -0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 173:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1087              		.loc 1 173 2 view .LVU308
 172:src/storage.c **** 	update_program_bounds( 1 );
 1088              		.loc 1 172 1 is_stmt 0 view .LVU309
 1089 0000 08B5     		push	{r3, lr}
 1090              		.cfi_def_cfa_offset 8
 1091              		.cfi_offset 3, -8
 1092              		.cfi_offset 14, -4
 173:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1093              		.loc 1 173 2 view .LVU310
 1094 0002 0120     		movs	r0, #1
 1095 0004 FFF7FEFF 		bl	update_program_bounds
 1096              	.LVL121:
 174:src/storage.c **** }
 1097              		.loc 1 174 2 is_stmt 1 view .LVU311
 174:src/storage.c **** }
 1098              		.loc 1 174 16 is_stmt 0 view .LVU312
 1099 0008 FFF7FEFF 		bl	get_current_prog
 1100              	.LVL122:
 174:src/storage.c **** }
 1101              		.loc 1 174 36 view .LVU313
 1102 000c 114B     		ldr	r3, .L91
 1103 000e B3F8EE17 		ldrh	r1, [r3, #2030]
 174:src/storage.c **** }
 1104              		.loc 1 174 46 view .LVU314
 1105 0012 B3F8EC37 		ldrh	r3, [r3, #2028]
 174:src/storage.c **** }
 1106              		.loc 1 174 44 view .LVU315
 1107 0016 C91A     		subs	r1, r1, r3
 1108              	.LVL123:
 1109              	.LBB40:
 1110              	.LBI40:
 136:src/storage.c **** {
 1111              		.loc 1 136 20 is_stmt 1 view .LVU316
 1112              	.LBB41:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1113              		.loc 1 138 2 view .LVU317
 139:src/storage.c **** 	unsigned int i;
 1114              		.loc 1 139 2 view .LVU318
 140:src/storage.c **** 
ARM GAS  /tmp/ccKaa6YO.s 			page 42


 1115              		.loc 1 140 2 view .LVU319
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1116              		.loc 1 142 2 view .LVU320
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1117              		.loc 1 142 15 view .LVU321
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1118              		.loc 1 142 2 is_stmt 0 view .LVU322
 1119 0018 4B1C     		adds	r3, r1, #1
 1120              	.LVL124:
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1121              		.loc 1 142 2 view .LVU323
 1122 001a 17D0     		beq	.L88
 1123 001c 0131     		adds	r1, r1, #1
 1124 001e 0144     		add	r1, r1, r0
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1125              		.loc 1 138 21 view .LVU324
 1126 0020 45F6A523 		movw	r3, #23205
 1127              	.LVL125:
 1128              	.L87:
 143:src/storage.c **** 		crc ^= *d++;
 1129              		.loc 1 143 3 is_stmt 1 view .LVU325
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1130              		.loc 1 144 10 is_stmt 0 view .LVU326
 1131 0024 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1132              	.LVL126:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1133              		.loc 1 144 10 view .LVU327
 1134 0028 5BBA     		rev16	r3, r3
 1135              	.LVL127:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1136              		.loc 1 144 10 view .LVU328
 1137 002a 9BB2     		uxth	r3, r3
 1138              	.LVL128:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 144 3 is_stmt 1 view .LVU329
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1140              		.loc 1 144 7 is_stmt 0 view .LVU330
 1141 002c 5340     		eors	r3, r3, r2
 1142              	.LVL129:
 145:src/storage.c **** 		crc ^= crc << 12;
 1143              		.loc 1 145 3 is_stmt 1 view .LVU331
 145:src/storage.c **** 		crc ^= crc << 12;
 1144              		.loc 1 145 7 is_stmt 0 view .LVU332
 1145 002e C3F30312 		ubfx	r2, r3, #4, #4
 1146 0032 5340     		eors	r3, r3, r2
 1147              	.LVL130:
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1148              		.loc 1 146 3 is_stmt 1 view .LVU333
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1149              		.loc 1 146 7 is_stmt 0 view .LVU334
 1150 0034 83EA0333 		eor	r3, r3, r3, lsl #12
 1151              	.LVL131:
 147:src/storage.c **** 	}
 1152              		.loc 1 147 3 is_stmt 1 view .LVU335
 147:src/storage.c **** 	}
 1153              		.loc 1 147 25 is_stmt 0 view .LVU336
 1154 0038 5A01     		lsls	r2, r3, #5
ARM GAS  /tmp/ccKaa6YO.s 			page 43


 1155 003a 02F4FF52 		and	r2, r2, #8160
 147:src/storage.c **** 	}
 1156              		.loc 1 147 7 view .LVU337
 1157 003e 9BB2     		uxth	r3, r3
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1158              		.loc 1 142 2 view .LVU338
 1159 0040 8142     		cmp	r1, r0
 147:src/storage.c **** 	}
 1160              		.loc 1 147 7 view .LVU339
 1161 0042 83EA0203 		eor	r3, r3, r2
 1162              	.LVL132:
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1163              		.loc 1 142 27 is_stmt 1 view .LVU340
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1164              		.loc 1 142 15 view .LVU341
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1165              		.loc 1 142 2 is_stmt 0 view .LVU342
 1166 0046 EDD1     		bne	.L87
 149:src/storage.c **** }
 1167              		.loc 1 149 2 is_stmt 1 view .LVU343
 1168              	.LVL133:
 149:src/storage.c **** }
 1169              		.loc 1 149 2 is_stmt 0 view .LVU344
 1170              	.LBE41:
 1171              	.LBE40:
 175:src/storage.c **** 
 1172              		.loc 1 175 1 view .LVU345
 1173 0048 1846     		mov	r0, r3
 1174 004a 08BD     		pop	{r3, pc}
 1175              	.LVL134:
 1176              	.L88:
 1177              	.LBB43:
 1178              	.LBB42:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1179              		.loc 1 138 21 view .LVU346
 1180 004c 45F6A523 		movw	r3, #23205
 1181              	.LVL135:
 149:src/storage.c **** }
 1182              		.loc 1 149 2 is_stmt 1 view .LVU347
 149:src/storage.c **** }
 1183              		.loc 1 149 2 is_stmt 0 view .LVU348
 1184              	.LBE42:
 1185              	.LBE43:
 175:src/storage.c **** 
 1186              		.loc 1 175 1 view .LVU349
 1187 0050 1846     		mov	r0, r3
 1188 0052 08BD     		pop	{r3, pc}
 1189              	.L92:
 1190              		.align	2
 1191              	.L91:
 1192 0054 00000000 		.word	PersistentRam
 1193              		.cfi_endproc
 1194              	.LFE5:
 1196              		.section	.text.checksum_ram,"ax",%progbits
 1197              		.align	1
 1198              		.p2align 2,,3
 1199              		.global	checksum_ram
ARM GAS  /tmp/ccKaa6YO.s 			page 44


 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu fpv4-sp-d16
 1205              	checksum_ram:
 1206              	.LFB6:
 183:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1207              		.loc 1 183 1 is_stmt 1 view -0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              		@ link register save eliminated.
 184:src/storage.c **** 			      Crc, &Crc );
 1212              		.loc 1 184 2 view .LVU351
 184:src/storage.c **** 			      Crc, &Crc );
 1213              		.loc 1 184 9 is_stmt 0 view .LVU352
 1214 0000 034B     		ldr	r3, .L94
 1215 0002 40F2FE71 		movw	r1, #2046
 1216 0006 1A88     		ldrh	r2, [r3]
 1217 0008 A3F2FE70 		subw	r0, r3, #2046
 1218 000c FFF7FEBF 		b	test_checksum
 1219              	.LVL136:
 1220              	.L95:
 1221              		.align	2
 1222              	.L94:
 1223 0010 FE070000 		.word	PersistentRam+2046
 1224              		.cfi_endproc
 1225              	.LFE6:
 1227              		.section	.text.checksum_backup,"ax",%progbits
 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	checksum_backup
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	checksum_backup:
 1237              	.LFB7:
 194:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1238              		.loc 1 194 1 is_stmt 1 view -0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 195:src/storage.c **** 		              BackupFlash._crc, NULL );
 1243              		.loc 1 195 2 view .LVU354
 195:src/storage.c **** 		              BackupFlash._crc, NULL );
 1244              		.loc 1 195 9 is_stmt 0 view .LVU355
 1245 0000 144B     		ldr	r3, .L102
 194:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1246              		.loc 1 194 1 view .LVU356
 1247 0002 10B4     		push	{r4}
 1248              		.cfi_def_cfa_offset 4
 1249              		.cfi_offset 4, -4
 195:src/storage.c **** 		              BackupFlash._crc, NULL );
 1250              		.loc 1 195 9 view .LVU357
 1251 0004 B3F8FE07 		ldrh	r0, [r3, #2046]
ARM GAS  /tmp/ccKaa6YO.s 			page 45


 1252              	.LVL137:
 1253              	.LBB44:
 1254              	.LBI44:
 157:src/storage.c **** {
 1255              		.loc 1 157 12 is_stmt 1 view .LVU358
 1256              	.LBB45:
 159:src/storage.c **** 	crc = crc16( data, length );
 1257              		.loc 1 159 2 view .LVU359
 160:src/storage.c **** 	if ( pcrc != NULL ) {
 1258              		.loc 1 160 2 view .LVU360
 1259              	.LBB46:
 1260              	.LBI46:
 136:src/storage.c **** {
 1261              		.loc 1 136 20 view .LVU361
 1262              	.LBB47:
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1263              		.loc 1 138 2 view .LVU362
 139:src/storage.c **** 	unsigned int i;
 1264              		.loc 1 139 2 view .LVU363
 140:src/storage.c **** 
 1265              		.loc 1 140 2 view .LVU364
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1266              		.loc 1 142 2 view .LVU365
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1267              		.loc 1 142 15 view .LVU366
 139:src/storage.c **** 	unsigned int i;
 1268              		.loc 1 139 17 is_stmt 0 view .LVU367
 1269 0008 1946     		mov	r1, r3
 1270 000a 03F2FE74 		addw	r4, r3, #2046
 138:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1271              		.loc 1 138 21 view .LVU368
 1272 000e 45F6A523 		movw	r3, #23205
 1273              	.LVL138:
 1274              	.L97:
 143:src/storage.c **** 		crc ^= *d++;
 1275              		.loc 1 143 3 is_stmt 1 view .LVU369
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1276              		.loc 1 144 10 is_stmt 0 view .LVU370
 1277 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1278              	.LVL139:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1279              		.loc 1 144 10 view .LVU371
 1280 0016 5BBA     		rev16	r3, r3
 1281              	.LVL140:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1282              		.loc 1 144 10 view .LVU372
 1283 0018 9BB2     		uxth	r3, r3
 1284              	.LVL141:
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1285              		.loc 1 144 3 is_stmt 1 view .LVU373
 144:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1286              		.loc 1 144 7 is_stmt 0 view .LVU374
 1287 001a 5340     		eors	r3, r3, r2
 1288              	.LVL142:
 145:src/storage.c **** 		crc ^= crc << 12;
 1289              		.loc 1 145 3 is_stmt 1 view .LVU375
 145:src/storage.c **** 		crc ^= crc << 12;
ARM GAS  /tmp/ccKaa6YO.s 			page 46


 1290              		.loc 1 145 7 is_stmt 0 view .LVU376
 1291 001c C3F30312 		ubfx	r2, r3, #4, #4
 1292 0020 5340     		eors	r3, r3, r2
 1293              	.LVL143:
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1294              		.loc 1 146 3 is_stmt 1 view .LVU377
 146:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1295              		.loc 1 146 7 is_stmt 0 view .LVU378
 1296 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1297              	.LVL144:
 147:src/storage.c **** 	}
 1298              		.loc 1 147 3 is_stmt 1 view .LVU379
 147:src/storage.c **** 	}
 1299              		.loc 1 147 25 is_stmt 0 view .LVU380
 1300 0026 5A01     		lsls	r2, r3, #5
 1301 0028 02F4FF52 		and	r2, r2, #8160
 147:src/storage.c **** 	}
 1302              		.loc 1 147 7 view .LVU381
 1303 002c 9BB2     		uxth	r3, r3
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1304              		.loc 1 142 2 view .LVU382
 1305 002e A142     		cmp	r1, r4
 147:src/storage.c **** 	}
 1306              		.loc 1 147 7 view .LVU383
 1307 0030 83EA0203 		eor	r3, r3, r2
 1308              	.LVL145:
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1309              		.loc 1 142 27 is_stmt 1 view .LVU384
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1310              		.loc 1 142 15 view .LVU385
 142:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1311              		.loc 1 142 2 is_stmt 0 view .LVU386
 1312 0034 EDD1     		bne	.L97
 149:src/storage.c **** }
 1313              		.loc 1 149 2 is_stmt 1 view .LVU387
 1314              	.LVL146:
 149:src/storage.c **** }
 1315              		.loc 1 149 2 is_stmt 0 view .LVU388
 1316              	.LBE47:
 1317              	.LBE46:
 161:src/storage.c **** 		*pcrc = crc;
 1318              		.loc 1 161 2 is_stmt 1 view .LVU389
 164:src/storage.c **** }
 1319              		.loc 1 164 2 view .LVU390
 164:src/storage.c **** }
 1320              		.loc 1 164 23 is_stmt 0 view .LVU391
 1321 0036 9842     		cmp	r0, r3
 1322 0038 07D0     		beq	.L99
 1323 003a 4AF23C53 		movw	r3, #42300
 1324              	.LVL147:
 164:src/storage.c **** }
 1325              		.loc 1 164 23 view .LVU392
 1326 003e C01A     		subs	r0, r0, r3
 1327              	.LVL148:
 164:src/storage.c **** }
 1328              		.loc 1 164 23 view .LVU393
 1329 0040 18BF     		it	ne
ARM GAS  /tmp/ccKaa6YO.s 			page 47


 1330 0042 0120     		movne	r0, #1
 1331              	.LVL149:
 164:src/storage.c **** }
 1332              		.loc 1 164 23 view .LVU394
 1333              	.LBE45:
 1334              	.LBE44:
 197:src/storage.c **** 
 1335              		.loc 1 197 1 view .LVU395
 1336 0044 5DF8044B 		ldr	r4, [sp], #4
 1337              		.cfi_remember_state
 1338              		.cfi_restore 4
 1339              		.cfi_def_cfa_offset 0
 1340 0048 7047     		bx	lr
 1341              	.LVL150:
 1342              	.L99:
 1343              		.cfi_restore_state
 1344              	.LBB49:
 1345              	.LBB48:
 164:src/storage.c **** }
 1346              		.loc 1 164 23 view .LVU396
 1347 004a 0020     		movs	r0, #0
 1348              	.LVL151:
 164:src/storage.c **** }
 1349              		.loc 1 164 23 view .LVU397
 1350              	.LBE48:
 1351              	.LBE49:
 197:src/storage.c **** 
 1352              		.loc 1 197 1 view .LVU398
 1353 004c 5DF8044B 		ldr	r4, [sp], #4
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356 0050 7047     		bx	lr
 1357              	.L103:
 1358 0052 00BF     		.align	2
 1359              	.L102:
 1360 0054 00000000 		.word	.LANCHOR0
 1361              		.cfi_endproc
 1362              	.LFE7:
 1364              		.section	.text.clpall,"ax",%progbits
 1365              		.align	1
 1366              		.p2align 2,,3
 1367              		.global	clpall
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1371              		.fpu fpv4-sp-d16
 1373              	clpall:
 1374              	.LFB10:
 225:src/storage.c **** 	clrretstk_pc();
 1375              		.loc 1 225 1 is_stmt 1 view -0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 226:src/storage.c **** 	stoend();
 1379              		.loc 1 226 2 view .LVU400
 225:src/storage.c **** 	clrretstk_pc();
 1380              		.loc 1 225 1 is_stmt 0 view .LVU401
ARM GAS  /tmp/ccKaa6YO.s 			page 48


 1381 0000 08B5     		push	{r3, lr}
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 3, -8
 1384              		.cfi_offset 14, -4
 226:src/storage.c **** 	stoend();
 1385              		.loc 1 226 2 view .LVU402
 1386 0002 FFF7FEFF 		bl	clrretstk_pc
 1387              	.LVL152:
 227:src/storage.c **** }
 1388              		.loc 1 227 2 is_stmt 1 view .LVU403
 1389              	.LBB50:
 1390              	.LBI50:
 214:src/storage.c **** {
 1391              		.loc 1 214 13 view .LVU404
 1392              	.LBB51:
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1393              		.loc 1 216 2 view .LVU405
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1394              		.loc 1 216 11 is_stmt 0 view .LVU406
 1395 0006 034B     		ldr	r3, .L106
 1396 0008 0121     		movs	r1, #1
 217:src/storage.c **** }
 1397              		.loc 1 217 12 view .LVU407
 1398 000a 4FF49D72 		mov	r2, #314
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1399              		.loc 1 216 11 view .LVU408
 1400 000e 5980     		strh	r1, [r3, #2]	@ movhi
 217:src/storage.c **** }
 1401              		.loc 1 217 2 is_stmt 1 view .LVU409
 217:src/storage.c **** }
 1402              		.loc 1 217 12 is_stmt 0 view .LVU410
 1403 0010 9A80     		strh	r2, [r3, #4]	@ movhi
 1404              	.LBE51:
 1405              	.LBE50:
 228:src/storage.c **** 
 1406              		.loc 1 228 1 view .LVU411
 1407 0012 08BD     		pop	{r3, pc}
 1408              	.L107:
 1409              		.align	2
 1410              	.L106:
 1411 0014 00000000 		.word	PersistentRam
 1412              		.cfi_endproc
 1413              	.LFE10:
 1415              		.section	.text.clrall,"ax",%progbits
 1416              		.align	1
 1417              		.p2align 2,,3
 1418              		.global	clrall
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu fpv4-sp-d16
 1424              	clrall:
 1425              	.LFB13:
 278:src/storage.c **** 	NumRegs = TOPREALREG;
 1426              		.loc 1 278 1 is_stmt 1 view -0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccKaa6YO.s 			page 49


 1429              		@ frame_needed = 0, uses_anonymous_args = 0
 279:src/storage.c **** 	xeq_init_contexts();
 1430              		.loc 1 279 2 view .LVU413
 278:src/storage.c **** 	NumRegs = TOPREALREG;
 1431              		.loc 1 278 1 is_stmt 0 view .LVU414
 1432 0000 10B5     		push	{r4, lr}
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 4, -8
 1435              		.cfi_offset 14, -4
 279:src/storage.c **** 	xeq_init_contexts();
 1436              		.loc 1 279 10 view .LVU415
 1437 0002 114C     		ldr	r4, .L110
 1438 0004 6423     		movs	r3, #100
 1439 0006 84F8CF37 		strb	r3, [r4, #1999]
 280:src/storage.c **** 	clrreg( OP_CLREG );
 1440              		.loc 1 280 2 is_stmt 1 view .LVU416
 1441 000a FFF7FEFF 		bl	xeq_init_contexts
 1442              	.LVL153:
 281:src/storage.c **** 	clrstk( OP_CLSTK );
 1443              		.loc 1 281 2 view .LVU417
 1444 000e 3E20     		movs	r0, #62
 1445 0010 FFF7FEFF 		bl	clrreg
 1446              	.LVL154:
 282:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1447              		.loc 1 282 2 view .LVU418
 1448 0014 4020     		movs	r0, #64
 1449 0016 FFF7FEFF 		bl	clrstk
 1450              	.LVL155:
 283:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1451              		.loc 1 283 2 view .LVU419
 1452 001a 7420     		movs	r0, #116
 1453 001c FFF7FEFF 		bl	clralpha
 1454              	.LVL156:
 284:src/storage.c **** 	clpall();
 1455              		.loc 1 284 2 view .LVU420
 1456 0020 4520     		movs	r0, #69
 1457 0022 FFF7FEFF 		bl	clrflags
 1458              	.LVL157:
 285:src/storage.c **** 
 1459              		.loc 1 285 2 view .LVU421
 1460              	.LBB52:
 1461              	.LBI52:
 224:src/storage.c **** {
 1462              		.loc 1 224 6 view .LVU422
 1463              	.LBB53:
 226:src/storage.c **** 	stoend();
 1464              		.loc 1 226 2 view .LVU423
 1465 0026 FFF7FEFF 		bl	clrretstk_pc
 1466              	.LVL158:
 227:src/storage.c **** }
 1467              		.loc 1 227 2 view .LVU424
 1468              	.LBB54:
 1469              	.LBI54:
 214:src/storage.c **** {
 1470              		.loc 1 214 13 view .LVU425
 1471              	.LBB55:
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
ARM GAS  /tmp/ccKaa6YO.s 			page 50


 1472              		.loc 1 216 2 view .LVU426
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1473              		.loc 1 216 11 is_stmt 0 view .LVU427
 1474 002a 0122     		movs	r2, #1
 217:src/storage.c **** }
 1475              		.loc 1 217 12 view .LVU428
 1476 002c 4FF49D73 		mov	r3, #314
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1477              		.loc 1 216 11 view .LVU429
 1478 0030 6280     		strh	r2, [r4, #2]	@ movhi
 217:src/storage.c **** }
 1479              		.loc 1 217 2 is_stmt 1 view .LVU430
 217:src/storage.c **** }
 1480              		.loc 1 217 12 is_stmt 0 view .LVU431
 1481 0032 A380     		strh	r3, [r4, #4]	@ movhi
 1482              	.LBE55:
 1483              	.LBE54:
 1484              	.LBE53:
 1485              	.LBE52:
 287:src/storage.c **** 	State2.test = TST_NONE;
 1486              		.loc 1 287 2 is_stmt 1 view .LVU432
 1487 0034 FFF7FEFF 		bl	reset_shift
 1488              	.LVL159:
 288:src/storage.c **** 
 1489              		.loc 1 288 2 view .LVU433
 288:src/storage.c **** 
 1490              		.loc 1 288 14 is_stmt 0 view .LVU434
 1491 0038 0449     		ldr	r1, .L110+4
 290:src/storage.c **** }
 1492              		.loc 1 290 10 view .LVU435
 1493 003a 054B     		ldr	r3, .L110+8
 288:src/storage.c **** 
 1494              		.loc 1 288 14 view .LVU436
 1495 003c 0720     		movs	r0, #7
 290:src/storage.c **** }
 1496              		.loc 1 290 10 view .LVU437
 1497 003e 0022     		movs	r2, #0
 288:src/storage.c **** 
 1498              		.loc 1 288 14 view .LVU438
 1499 0040 C873     		strb	r0, [r1, #15]
 290:src/storage.c **** }
 1500              		.loc 1 290 2 is_stmt 1 view .LVU439
 290:src/storage.c **** }
 1501              		.loc 1 290 10 is_stmt 0 view .LVU440
 1502 0042 1A60     		str	r2, [r3]
 291:src/storage.c **** 
 1503              		.loc 1 291 1 view .LVU441
 1504 0044 10BD     		pop	{r4, pc}
 1505              	.L111:
 1506 0046 00BF     		.align	2
 1507              	.L110:
 1508 0048 00000000 		.word	PersistentRam
 1509 004c 00000000 		.word	StateWhileOn
 1510 0050 00000000 		.word	DispMsg
 1511              		.cfi_endproc
 1512              	.LFE13:
 1514              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccKaa6YO.s 			page 51


 1515              		.align	2
 1516              	.LC7:
 1517 0000 45726173 		.ascii	"Erased\000"
 1517      656400
 1518              		.section	.text.reset,"ax",%progbits
 1519              		.align	1
 1520              		.p2align 2,,3
 1521              		.global	reset
 1522              		.syntax unified
 1523              		.thumb
 1524              		.thumb_func
 1525              		.fpu fpv4-sp-d16
 1527              	reset:
 1528              	.LFB14:
 298:src/storage.c **** 	xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1529              		.loc 1 298 1 is_stmt 1 view -0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 299:src/storage.c **** 	clrall();
 1533              		.loc 1 299 2 view .LVU443
 298:src/storage.c **** 	xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1534              		.loc 1 298 1 is_stmt 0 view .LVU444
 1535 0000 10B5     		push	{r4, lr}
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 4, -8
 1538              		.cfi_offset 14, -4
 299:src/storage.c **** 	clrall();
 1539              		.loc 1 299 2 view .LVU445
 1540 0002 0B4C     		ldr	r4, .L114
 1541 0004 4FF40062 		mov	r2, #2048
 1542 0008 0021     		movs	r1, #0
 1543 000a 2046     		mov	r0, r4
 1544 000c FFF7FEFF 		bl	xset
 1545              	.LVL160:
 300:src/storage.c **** 	init_state();
 1546              		.loc 1 300 2 is_stmt 1 view .LVU446
 1547 0010 FFF7FEFF 		bl	clrall
 1548              	.LVL161:
 301:src/storage.c **** 	UState.contrast = 6;
 1549              		.loc 1 301 2 view .LVU447
 1550 0014 FFF7FEFF 		bl	init_state
 1551              	.LVL162:
 302:src/storage.c **** #ifdef INFRARED
 1552              		.loc 1 302 2 view .LVU448
 306:src/storage.c **** }
 1553              		.loc 1 306 10 is_stmt 0 view .LVU449
 1554 0018 064A     		ldr	r2, .L114+4
 302:src/storage.c **** #ifdef INFRARED
 1555              		.loc 1 302 18 view .LVU450
 1556 001a 94F8E437 		ldrb	r3, [r4, #2020]	@ zero_extendqisi2
 306:src/storage.c **** }
 1557              		.loc 1 306 10 view .LVU451
 1558 001e 0649     		ldr	r1, .L114+8
 1559 0020 1160     		str	r1, [r2]
 302:src/storage.c **** #ifdef INFRARED
 1560              		.loc 1 302 18 view .LVU452
ARM GAS  /tmp/ccKaa6YO.s 			page 52


 1561 0022 0622     		movs	r2, #6
 1562 0024 62F30303 		bfi	r3, r2, #0, #4
 1563 0028 84F8E437 		strb	r3, [r4, #2020]
 306:src/storage.c **** }
 1564              		.loc 1 306 2 is_stmt 1 view .LVU453
 307:src/storage.c **** 
 1565              		.loc 1 307 1 is_stmt 0 view .LVU454
 1566 002c 10BD     		pop	{r4, pc}
 1567              	.L115:
 1568 002e 00BF     		.align	2
 1569              	.L114:
 1570 0030 00000000 		.word	PersistentRam
 1571 0034 00000000 		.word	DispMsg
 1572 0038 00000000 		.word	.LC7
 1573              		.cfi_endproc
 1574              	.LFE14:
 1576              		.section	.text.stoprog,"ax",%progbits
 1577              		.align	1
 1578              		.p2align 2,,3
 1579              		.global	stoprog
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu fpv4-sp-d16
 1585              	stoprog:
 1586              	.LVL163:
 1587              	.LFB15:
 313:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1588              		.loc 1 313 26 is_stmt 1 view -0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 314:src/storage.c **** 	int i;
 1592              		.loc 1 314 2 view .LVU456
 313:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1593              		.loc 1 313 26 is_stmt 0 view .LVU457
 1594 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1595              		.cfi_def_cfa_offset 32
 1596              		.cfi_offset 3, -32
 1597              		.cfi_offset 4, -28
 1598              		.cfi_offset 5, -24
 1599              		.cfi_offset 6, -20
 1600              		.cfi_offset 7, -16
 1601              		.cfi_offset 8, -12
 1602              		.cfi_offset 9, -8
 1603              		.cfi_offset 14, -4
 316:src/storage.c **** 
 1604              		.loc 1 316 20 view .LVU458
 1605 0004 354D     		ldr	r5, .L138
 314:src/storage.c **** 	int i;
 1606              		.loc 1 314 18 view .LVU459
 1607 0006 00F47047 		and	r7, r0, #61440
 314:src/storage.c **** 	int i;
 1608              		.loc 1 314 33 view .LVU460
 1609 000a B7F5704F 		cmp	r7, #61440
 316:src/storage.c **** 
 1610              		.loc 1 316 20 view .LVU461
ARM GAS  /tmp/ccKaa6YO.s 			page 53


 1611 000e B5F8E097 		ldrh	r9, [r5, #2016]
 313:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1612              		.loc 1 313 26 view .LVU462
 1613 0012 0646     		mov	r6, r0
 314:src/storage.c **** 	int i;
 1614              		.loc 1 314 33 view .LVU463
 1615 0014 52D0     		beq	.L117
 1616              	.LVL164:
 315:src/storage.c **** 	unsigned int pc = state_pc();
 1617              		.loc 1 315 2 is_stmt 1 discriminator 4 view .LVU464
 316:src/storage.c **** 
 1618              		.loc 1 316 2 discriminator 4 view .LVU465
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1619              		.loc 1 318 5 is_stmt 0 discriminator 4 view .LVU466
 1620 0016 6B88     		ldrh	r3, [r5, #2]
 1621 0018 4B45     		cmp	r3, r9
 316:src/storage.c **** 
 1622              		.loc 1 316 15 discriminator 4 view .LVU467
 1623 001a 4946     		mov	r1, r9
 1624              	.LVL165:
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1625              		.loc 1 318 2 is_stmt 1 discriminator 4 view .LVU468
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1626              		.loc 1 318 5 is_stmt 0 discriminator 4 view .LVU469
 1627 001c 3CD0     		beq	.L133
 1628              	.L126:
 314:src/storage.c **** 	int i;
 1629              		.loc 1 314 33 view .LVU470
 1630 001e 0124     		movs	r4, #1
 1631              	.LVL166:
 1632              	.L118:
 321:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1633              		.loc 1 321 2 is_stmt 1 view .LVU471
 321:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1634              		.loc 1 321 5 is_stmt 0 view .LVU472
 1635 0020 11F47048 		ands	r8, r1, #61440
 1636 0024 45D1     		bne	.L134
 1637              	.LVL167:
 1638              	.L119:
 325:src/storage.c **** 	xeq_init_contexts();
 1639              		.loc 1 325 2 is_stmt 1 view .LVU473
 1640 0026 FFF7FEFF 		bl	clrretstk
 1641              	.LVL168:
 326:src/storage.c **** 	if ( ProgFree < off ) {
 1642              		.loc 1 326 2 view .LVU474
 1643 002a FFF7FEFF 		bl	xeq_init_contexts
 1644              	.LVL169:
 327:src/storage.c **** 		return;
 1645              		.loc 1 327 2 view .LVU475
 327:src/storage.c **** 		return;
 1646              		.loc 1 327 16 is_stmt 0 view .LVU476
 1647 002e 2C4B     		ldr	r3, .L138+4
 327:src/storage.c **** 		return;
 1648              		.loc 1 327 5 view .LVU477
 1649 0030 1B68     		ldr	r3, [r3]
 1650 0032 A342     		cmp	r3, r4
 1651 0034 01DA     		bge	.L135
ARM GAS  /tmp/ccKaa6YO.s 			page 54


 340:src/storage.c **** 
 1652              		.loc 1 340 1 view .LVU478
 1653 0036 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1654              	.LVL170:
 1655              	.L135:
 330:src/storage.c **** 	ProgEnd += off;
 1656              		.loc 1 330 2 is_stmt 1 view .LVU479
 330:src/storage.c **** 	ProgEnd += off;
 1657              		.loc 1 330 11 is_stmt 0 view .LVU480
 1658 003a 6A88     		ldrh	r2, [r5, #2]
 331:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1659              		.loc 1 331 10 view .LVU481
 1660 003c B5F8EE37 		ldrh	r3, [r5, #2030]
 330:src/storage.c **** 	ProgEnd += off;
 1661              		.loc 1 330 11 view .LVU482
 1662 0040 2244     		add	r2, r2, r4
 331:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1663              		.loc 1 331 10 view .LVU483
 1664 0042 2344     		add	r3, r3, r4
 332:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1665              		.loc 1 332 7 view .LVU484
 1666 0044 4146     		mov	r1, r8
 1667 0046 4846     		mov	r0, r9
 331:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1668              		.loc 1 331 10 view .LVU485
 1669 0048 A5F8EE37 		strh	r3, [r5, #2030]	@ movhi
 330:src/storage.c **** 	ProgEnd += off;
 1670              		.loc 1 330 11 view .LVU486
 1671 004c 6A80     		strh	r2, [r5, #2]	@ movhi
 331:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1672              		.loc 1 331 2 is_stmt 1 view .LVU487
 332:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1673              		.loc 1 332 2 view .LVU488
 332:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1674              		.loc 1 332 7 is_stmt 0 view .LVU489
 1675 004e FFF7FEFF 		bl	do_inc
 1676              	.LVL171:
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1677              		.loc 1 333 12 view .LVU490
 1678 0052 6B88     		ldrh	r3, [r5, #2]
 1679              	.LVL172:
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1680              		.loc 1 333 2 is_stmt 1 view .LVU491
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1681              		.loc 1 333 26 view .LVU492
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1682              		.loc 1 333 2 is_stmt 0 view .LVU493
 1683 0054 8342     		cmp	r3, r0
 1684 0056 3EDB     		blt	.L136
 1685 0058 1A1B     		subs	r2, r3, r4
 1686 005a DFF888C0 		ldr	ip, .L138+8
 1687 005e 0332     		adds	r2, r2, #3
 1688 0060 0333     		adds	r3, r3, #3
 1689              	.LVL173:
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1690              		.loc 1 333 2 view .LVU494
 1691 0062 05EB4202 		add	r2, r5, r2, lsl #1
ARM GAS  /tmp/ccKaa6YO.s 			page 55


 1692 0066 05EB4303 		add	r3, r5, r3, lsl #1
 1693              	.LVL174:
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1694              		.loc 1 333 2 view .LVU495
 1695 006a 0CEB4004 		add	r4, ip, r0, lsl #1
 1696              	.LVL175:
 1697              	.L122:
 334:src/storage.c **** 	}
 1698              		.loc 1 334 3 is_stmt 1 discriminator 3 view .LVU496
 334:src/storage.c **** 	}
 1699              		.loc 1 334 23 is_stmt 0 discriminator 3 view .LVU497
 1700 006e 32F8021D 		ldrh	r1, [r2, #-2]!
 334:src/storage.c **** 	}
 1701              		.loc 1 334 15 discriminator 3 view .LVU498
 1702 0072 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1703              		.loc 1 333 40 is_stmt 1 discriminator 3 view .LVU499
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1704              		.loc 1 333 26 discriminator 3 view .LVU500
 333:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1705              		.loc 1 333 2 is_stmt 0 discriminator 3 view .LVU501
 1706 0076 A342     		cmp	r3, r4
 1707 0078 F9D1     		bne	.L122
 1708              	.L121:
 336:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1709              		.loc 1 336 2 is_stmt 1 view .LVU502
 336:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1710              		.loc 1 336 5 is_stmt 0 view .LVU503
 1711 007a B7F5704F 		cmp	r7, #61440
 337:src/storage.c **** 	Prog_1[pc] = c;
 1712              		.loc 1 337 3 is_stmt 1 view .LVU504
 338:src/storage.c **** 	State.pc = pc;
 1713              		.loc 1 338 2 view .LVU505
 337:src/storage.c **** 	Prog_1[pc] = c;
 1714              		.loc 1 337 22 is_stmt 0 view .LVU506
 1715 007e 04BF     		itt	eq
 1716 0080 330C     		lsreq	r3, r6, #16
 337:src/storage.c **** 	Prog_1[pc] = c;
 1717              		.loc 1 337 18 view .LVU507
 1718 0082 2CF81030 		strheq	r3, [ip, r0, lsl #1]	@ movhi
 338:src/storage.c **** 	State.pc = pc;
 1719              		.loc 1 338 8 view .LVU508
 1720 0086 00F10043 		add	r3, r0, #-2147483648
 1721 008a 013B     		subs	r3, r3, #1
 338:src/storage.c **** 	State.pc = pc;
 1722              		.loc 1 338 13 view .LVU509
 1723 008c 2CF81360 		strh	r6, [ip, r3, lsl #1]	@ movhi
 339:src/storage.c **** }
 1724              		.loc 1 339 2 is_stmt 1 view .LVU510
 339:src/storage.c **** }
 1725              		.loc 1 339 11 is_stmt 0 view .LVU511
 1726 0090 A5F8E007 		strh	r0, [r5, #2016]	@ movhi
 340:src/storage.c **** 
 1727              		.loc 1 340 1 view .LVU512
 1728 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1729              	.LVL176:
 1730              	.L133:
ARM GAS  /tmp/ccKaa6YO.s 			page 56


 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1731              		.loc 1 318 22 discriminator 1 view .LVU513
 1732 0098 B0F59D7F 		cmp	r0, #314
 1733 009c BFD0     		beq	.L126
 1734 009e C846     		mov	r8, r9
 319:src/storage.c **** 
 1735              		.loc 1 319 3 view .LVU514
 1736 00a0 4FF49D70 		mov	r0, #314
 1737              	.LVL177:
 319:src/storage.c **** 
 1738              		.loc 1 319 3 view .LVU515
 1739 00a4 FFF7FEFF 		bl	stoprog
 1740              	.LVL178:
 314:src/storage.c **** 	int i;
 1741              		.loc 1 314 33 view .LVU516
 1742 00a8 0124     		movs	r4, #1
 319:src/storage.c **** 
 1743              		.loc 1 319 3 is_stmt 1 view .LVU517
 1744 00aa 4146     		mov	r1, r8
 1745              	.LVL179:
 1746              	.L137:
 321:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1747              		.loc 1 321 2 view .LVU518
 321:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1748              		.loc 1 321 5 is_stmt 0 view .LVU519
 1749 00ac 11F47048 		ands	r8, r1, #61440
 1750 00b0 B9D0     		beq	.L119
 1751              	.L134:
 322:src/storage.c **** 		return;
 1752              		.loc 1 322 3 is_stmt 1 view .LVU520
 340:src/storage.c **** 
 1753              		.loc 1 340 1 is_stmt 0 view .LVU521
 1754 00b2 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1755              		.cfi_remember_state
 1756              		.cfi_restore 14
 1757              		.cfi_restore 9
 1758              		.cfi_restore 8
 1759              		.cfi_restore 7
 1760              		.cfi_restore 6
 1761              		.cfi_restore 5
 1762              		.cfi_restore 4
 1763              		.cfi_restore 3
 1764              		.cfi_def_cfa_offset 0
 1765              	.LVL180:
 322:src/storage.c **** 		return;
 1766              		.loc 1 322 3 view .LVU522
 1767 00b6 1320     		movs	r0, #19
 1768 00b8 FFF7FEBF 		b	report_warn
 1769              	.LVL181:
 1770              	.L117:
 1771              		.cfi_restore_state
 315:src/storage.c **** 	unsigned int pc = state_pc();
 1772              		.loc 1 315 2 is_stmt 1 view .LVU523
 316:src/storage.c **** 
 1773              		.loc 1 316 2 view .LVU524
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1774              		.loc 1 318 13 is_stmt 0 view .LVU525
ARM GAS  /tmp/ccKaa6YO.s 			page 57


 1775 00bc B5F80280 		ldrh	r8, [r5, #2]
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1776              		.loc 1 318 5 view .LVU526
 1777 00c0 C145     		cmp	r9, r8
 316:src/storage.c **** 
 1778              		.loc 1 316 15 view .LVU527
 1779 00c2 4946     		mov	r1, r9
 1780              	.LVL182:
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1781              		.loc 1 318 2 is_stmt 1 view .LVU528
 314:src/storage.c **** 	int i;
 1782              		.loc 1 314 33 is_stmt 0 view .LVU529
 1783 00c4 4FF00204 		mov	r4, #2
 318:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1784              		.loc 1 318 5 view .LVU530
 1785 00c8 AAD1     		bne	.L118
 319:src/storage.c **** 
 1786              		.loc 1 319 3 is_stmt 1 view .LVU531
 1787 00ca 4FF49D70 		mov	r0, #314
 1788              	.LVL183:
 319:src/storage.c **** 
 1789              		.loc 1 319 3 is_stmt 0 view .LVU532
 1790 00ce FFF7FEFF 		bl	stoprog
 1791              	.LVL184:
 319:src/storage.c **** 
 1792              		.loc 1 319 3 view .LVU533
 1793 00d2 4146     		mov	r1, r8
 1794 00d4 EAE7     		b	.L137
 1795              	.LVL185:
 1796              	.L136:
 319:src/storage.c **** 
 1797              		.loc 1 319 3 view .LVU534
 1798 00d6 DFF80CC0 		ldr	ip, .L138+8
 1799 00da CEE7     		b	.L121
 1800              	.L139:
 1801              		.align	2
 1802              	.L138:
 1803 00dc 00000000 		.word	PersistentRam
 1804 00e0 00000000 		.word	ProgFree
 1805 00e4 04000000 		.word	PersistentRam+4
 1806              		.cfi_endproc
 1807              	.LFE15:
 1809              		.section	.text.delprog,"ax",%progbits
 1810              		.align	1
 1811              		.p2align 2,,3
 1812              		.global	delprog
 1813              		.syntax unified
 1814              		.thumb
 1815              		.thumb_func
 1816              		.fpu fpv4-sp-d16
 1818              	delprog:
 1819              	.LFB16:
 347:src/storage.c **** 	int i;
 1820              		.loc 1 347 1 is_stmt 1 view -0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccKaa6YO.s 			page 58


 348:src/storage.c **** 	const unsigned int pc = state_pc();
 1824              		.loc 1 348 2 view .LVU536
 349:src/storage.c **** 	int off;
 1825              		.loc 1 349 2 view .LVU537
 347:src/storage.c **** 	int i;
 1826              		.loc 1 347 1 is_stmt 0 view .LVU538
 1827 0000 70B5     		push	{r4, r5, r6, lr}
 1828              		.cfi_def_cfa_offset 16
 1829              		.cfi_offset 4, -16
 1830              		.cfi_offset 5, -12
 1831              		.cfi_offset 6, -8
 1832              		.cfi_offset 14, -4
 349:src/storage.c **** 	int off;
 1833              		.loc 1 349 26 view .LVU539
 1834 0002 1A4C     		ldr	r4, .L152
 1835 0004 B4F8E057 		ldrh	r5, [r4, #2016]
 1836              	.LVL186:
 350:src/storage.c **** 
 1837              		.loc 1 350 2 is_stmt 1 view .LVU540
 352:src/storage.c **** 		return;
 1838              		.loc 1 352 2 view .LVU541
 352:src/storage.c **** 		return;
 1839              		.loc 1 352 7 is_stmt 0 view .LVU542
 1840 0008 2846     		mov	r0, r5
 1841 000a FFF7FEFF 		bl	check_delete_prog
 1842              	.LVL187:
 352:src/storage.c **** 		return;
 1843              		.loc 1 352 5 view .LVU543
 1844 000e 58BB     		cbnz	r0, .L140
 354:src/storage.c **** 		return;
 1845              		.loc 1 354 2 is_stmt 1 view .LVU544
 354:src/storage.c **** 		return;
 1846              		.loc 1 354 5 is_stmt 0 view .LVU545
 1847 0010 55B3     		cbz	r5, .L140
 357:src/storage.c **** 	ProgSize -= off;
 1848              		.loc 1 357 2 is_stmt 1 view .LVU546
 357:src/storage.c **** 	ProgSize -= off;
 1849              		.loc 1 357 8 is_stmt 0 view .LVU547
 1850 0012 04EB4503 		add	r3, r4, r5, lsl #1
 358:src/storage.c **** 	ProgEnd -= off;
 1851              		.loc 1 358 11 view .LVU548
 1852 0016 6288     		ldrh	r2, [r4, #2]
 357:src/storage.c **** 	ProgSize -= off;
 1853              		.loc 1 357 33 view .LVU549
 1854 0018 5B88     		ldrh	r3, [r3, #2]
 359:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1855              		.loc 1 359 10 view .LVU550
 1856 001a B4F8EE17 		ldrh	r1, [r4, #2030]
 357:src/storage.c **** 	ProgSize -= off;
 1857              		.loc 1 357 33 view .LVU551
 1858 001e 03F47043 		and	r3, r3, #61440
 1859 0022 B3F5704F 		cmp	r3, #61440
 1860 0026 14BF     		ite	ne
 1861 0028 0126     		movne	r6, #1
 1862 002a 0226     		moveq	r6, #2
 358:src/storage.c **** 	ProgEnd -= off;
 1863              		.loc 1 358 11 view .LVU552
ARM GAS  /tmp/ccKaa6YO.s 			page 59


 1864 002c 921B     		subs	r2, r2, r6
 1865 002e 92B2     		uxth	r2, r2
 359:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1866              		.loc 1 359 10 view .LVU553
 1867 0030 891B     		subs	r1, r1, r6
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1868              		.loc 1 360 2 view .LVU554
 1869 0032 9542     		cmp	r5, r2
 357:src/storage.c **** 	ProgSize -= off;
 1870              		.loc 1 357 33 view .LVU555
 1871 0034 3346     		mov	r3, r6
 1872              	.LVL188:
 358:src/storage.c **** 	ProgEnd -= off;
 1873              		.loc 1 358 2 is_stmt 1 view .LVU556
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1874              		.loc 1 360 10 is_stmt 0 view .LVU557
 1875 0036 2846     		mov	r0, r5
 358:src/storage.c **** 	ProgEnd -= off;
 1876              		.loc 1 358 11 view .LVU558
 1877 0038 6280     		strh	r2, [r4, #2]	@ movhi
 359:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1878              		.loc 1 359 2 is_stmt 1 view .LVU559
 359:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1879              		.loc 1 359 10 is_stmt 0 view .LVU560
 1880 003a A4F8EE17 		strh	r1, [r4, #2030]	@ movhi
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1881              		.loc 1 360 2 is_stmt 1 view .LVU561
 1882              	.LVL189:
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1883              		.loc 1 360 16 view .LVU562
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1884              		.loc 1 360 2 is_stmt 0 view .LVU563
 1885 003e 0FDC     		bgt	.L145
 1886 0040 6A1C     		adds	r2, r5, #1
 1887 0042 1344     		add	r3, r3, r2
 1888              	.LVL190:
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1889              		.loc 1 360 2 view .LVU564
 1890 0044 04EB4303 		add	r3, r4, r3, lsl #1
 1891 0048 04EB4202 		add	r2, r4, r2, lsl #1
 1892 004c 023B     		subs	r3, r3, #2
 1893 004e 023A     		subs	r2, r2, #2
 1894              	.LVL191:
 1895              	.L144:
 361:src/storage.c **** 	decpc();
 1896              		.loc 1 361 3 is_stmt 1 discriminator 3 view .LVU565
 361:src/storage.c **** 	decpc();
 1897              		.loc 1 361 23 is_stmt 0 discriminator 3 view .LVU566
 1898 0050 33F8021F 		ldrh	r1, [r3, #2]!
 361:src/storage.c **** 	decpc();
 1899              		.loc 1 361 15 discriminator 3 view .LVU567
 1900 0054 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1901              		.loc 1 360 37 is_stmt 1 discriminator 3 view .LVU568
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1902              		.loc 1 360 21 is_stmt 0 discriminator 3 view .LVU569
 1903 0058 6188     		ldrh	r1, [r4, #2]
ARM GAS  /tmp/ccKaa6YO.s 			page 60


 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1904              		.loc 1 360 37 discriminator 3 view .LVU570
 1905 005a 0130     		adds	r0, r0, #1
 1906              	.LVL192:
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1907              		.loc 1 360 16 is_stmt 1 discriminator 3 view .LVU571
 360:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1908              		.loc 1 360 2 is_stmt 0 discriminator 3 view .LVU572
 1909 005c 8142     		cmp	r1, r0
 1910 005e F7DA     		bge	.L144
 1911              	.L145:
 362:src/storage.c **** }
 1912              		.loc 1 362 2 is_stmt 1 view .LVU573
 363:src/storage.c **** 
 1913              		.loc 1 363 1 is_stmt 0 view .LVU574
 1914 0060 BDE87040 		pop	{r4, r5, r6, lr}
 1915              		.cfi_remember_state
 1916              		.cfi_restore 14
 1917              		.cfi_restore 6
 1918              		.cfi_restore 5
 1919              		.cfi_restore 4
 1920              		.cfi_def_cfa_offset 0
 1921              	.LVL193:
 362:src/storage.c **** }
 1922              		.loc 1 362 2 view .LVU575
 1923 0064 FFF7FEBF 		b	decpc
 1924              	.LVL194:
 1925              	.L140:
 1926              		.cfi_restore_state
 363:src/storage.c **** 
 1927              		.loc 1 363 1 view .LVU576
 1928 0068 70BD     		pop	{r4, r5, r6, pc}
 1929              	.LVL195:
 1930              	.L153:
 363:src/storage.c **** 
 1931              		.loc 1 363 1 view .LVU577
 1932 006a 00BF     		.align	2
 1933              	.L152:
 1934 006c 00000000 		.word	PersistentRam
 1935              		.cfi_endproc
 1936              	.LFE16:
 1938              		.section	.text.append_program,"ax",%progbits
 1939              		.align	1
 1940              		.p2align 2,,3
 1941              		.global	append_program
 1942              		.syntax unified
 1943              		.thumb
 1944              		.thumb_func
 1945              		.fpu fpv4-sp-d16
 1947              	append_program:
 1948              	.LVL196:
 1949              	.LFB17:
 371:src/storage.c **** 	unsigned short pc;
 1950              		.loc 1 371 1 is_stmt 1 view -0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccKaa6YO.s 			page 61


 372:src/storage.c **** 	int space_needed = length - ProgFree;
 1954              		.loc 1 372 2 view .LVU579
 373:src/storage.c **** 
 1955              		.loc 1 373 2 view .LVU580
 371:src/storage.c **** 	unsigned short pc;
 1956              		.loc 1 371 1 is_stmt 0 view .LVU581
 1957 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1958              		.cfi_def_cfa_offset 24
 1959              		.cfi_offset 3, -24
 1960              		.cfi_offset 4, -20
 1961              		.cfi_offset 5, -16
 1962              		.cfi_offset 6, -12
 1963              		.cfi_offset 7, -8
 1964              		.cfi_offset 14, -4
 373:src/storage.c **** 
 1965              		.loc 1 373 28 view .LVU582
 1966 0002 2D4B     		ldr	r3, .L173
 375:src/storage.c **** 		/*
 1967              		.loc 1 375 7 view .LVU583
 1968 0004 2D4F     		ldr	r7, .L173+4
 373:src/storage.c **** 
 1969              		.loc 1 373 6 view .LVU584
 1970 0006 1D68     		ldr	r5, [r3]
 375:src/storage.c **** 		/*
 1971              		.loc 1 375 7 view .LVU585
 1972 0008 7B88     		ldrh	r3, [r7, #2]
 375:src/storage.c **** 		/*
 1973              		.loc 1 375 5 view .LVU586
 1974 000a 012B     		cmp	r3, #1
 371:src/storage.c **** 	unsigned short pc;
 1975              		.loc 1 371 1 view .LVU587
 1976 000c 0C46     		mov	r4, r1
 1977 000e 0646     		mov	r6, r0
 373:src/storage.c **** 
 1978              		.loc 1 373 6 view .LVU588
 1979 0010 A1EB0505 		sub	r5, r1, r5
 1980              	.LVL197:
 375:src/storage.c **** 		/*
 1981              		.loc 1 375 2 is_stmt 1 view .LVU589
 375:src/storage.c **** 		/*
 1982              		.loc 1 375 5 is_stmt 0 view .LVU590
 1983 0014 0BD0     		beq	.L170
 382:src/storage.c **** 		return report_err( ERR_INVALID );
 1984              		.loc 1 382 2 is_stmt 1 view .LVU591
 382:src/storage.c **** 		return report_err( ERR_INVALID );
 1985              		.loc 1 382 5 is_stmt 0 view .LVU592
 1986 0016 B1F5687F 		cmp	r1, #928
 1987 001a 38DC     		bgt	.L157
 385:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1988              		.loc 1 385 2 is_stmt 1 view .LVU593
 385:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1989              		.loc 1 385 30 is_stmt 0 view .LVU594
 1990 001c C3F56873 		rsb	r3, r3, #928
 385:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1991              		.loc 1 385 5 view .LVU595
 1992 0020 8B42     		cmp	r3, r1
 1993 0022 0BDA     		bge	.L156
ARM GAS  /tmp/ccKaa6YO.s 			page 62


 1994              	.LVL198:
 1995              	.L169:
 1996              	.LBB56:
 405:src/storage.c **** 		}
 1997              		.loc 1 405 4 is_stmt 1 view .LVU596
 1998              	.LBE56:
 417:src/storage.c **** 
 1999              		.loc 1 417 1 is_stmt 0 view .LVU597
 2000 0024 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2001              		.cfi_remember_state
 2002              		.cfi_restore 14
 2003              		.cfi_restore 7
 2004              		.cfi_restore 6
 2005              		.cfi_restore 5
 2006              		.cfi_restore 4
 2007              		.cfi_restore 3
 2008              		.cfi_def_cfa_offset 0
 2009              	.LVL199:
 2010              	.LBB57:
 405:src/storage.c **** 		}
 2011              		.loc 1 405 11 view .LVU598
 2012 0028 0B20     		movs	r0, #11
 2013 002a FFF7FEBF 		b	report_err
 2014              	.LVL200:
 2015              	.L170:
 2016              		.cfi_restore_state
 405:src/storage.c **** 		}
 2017              		.loc 1 405 11 view .LVU599
 2018              	.LBE57:
 379:src/storage.c **** 		--ProgSize;
 2019              		.loc 1 379 3 is_stmt 1 view .LVU600
 380:src/storage.c **** 	}
 2020              		.loc 1 380 3 is_stmt 0 view .LVU601
 2021 002e 0023     		movs	r3, #0
 382:src/storage.c **** 		return report_err( ERR_INVALID );
 2022              		.loc 1 382 5 view .LVU602
 2023 0030 B1F5687F 		cmp	r1, #928
 379:src/storage.c **** 		--ProgSize;
 2024              		.loc 1 379 3 view .LVU603
 2025 0034 05F1FF35 		add	r5, r5, #-1
 2026              	.LVL201:
 380:src/storage.c **** 	}
 2027              		.loc 1 380 3 is_stmt 1 view .LVU604
 2028 0038 7B80     		strh	r3, [r7, #2]	@ movhi
 382:src/storage.c **** 		return report_err( ERR_INVALID );
 2029              		.loc 1 382 2 view .LVU605
 382:src/storage.c **** 		return report_err( ERR_INVALID );
 2030              		.loc 1 382 5 is_stmt 0 view .LVU606
 2031 003a 28DC     		bgt	.L157
 2032              	.L156:
 392:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2033              		.loc 1 392 2 is_stmt 1 view .LVU607
 2034 003c FFF7FEFF 		bl	clrretstk
 2035              	.LVL202:
 393:src/storage.c **** 		space_needed -= SizeStatRegs;
 2036              		.loc 1 393 2 view .LVU608
 393:src/storage.c **** 		space_needed -= SizeStatRegs;
ARM GAS  /tmp/ccKaa6YO.s 			page 63


 2037              		.loc 1 393 5 is_stmt 0 view .LVU609
 2038 0040 002D     		cmp	r5, #0
 2039 0042 0FDD     		ble	.L159
 393:src/storage.c **** 		space_needed -= SizeStatRegs;
 2040              		.loc 1 393 40 discriminator 1 view .LVU610
 2041 0044 1E4B     		ldr	r3, .L173+8
 2042 0046 1B68     		ldr	r3, [r3]
 393:src/storage.c **** 		space_needed -= SizeStatRegs;
 2043              		.loc 1 393 24 discriminator 1 view .LVU611
 2044 0048 33BB     		cbnz	r3, .L171
 2045              	.LBB58:
 398:src/storage.c **** 		if (is_dblmode())
 2046              		.loc 1 398 3 is_stmt 1 view .LVU612
 399:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2047              		.loc 1 399 3 view .LVU613
 399:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2048              		.loc 1 399 7 is_stmt 0 view .LVU614
 2049 004a FFF7FEFF 		bl	is_dblmode
 2050              	.LVL203:
 399:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2051              		.loc 1 399 6 view .LVU615
 2052 004e 60BB     		cbnz	r0, .L172
 2053              	.L162:
 402:src/storage.c **** 
 2054              		.loc 1 402 4 is_stmt 1 view .LVU616
 402:src/storage.c **** 
 2055              		.loc 1 402 11 is_stmt 0 view .LVU617
 2056 0050 97F8CF07 		ldrb	r0, [r7, #1999]	@ zero_extendqisi2
 402:src/storage.c **** 
 2057              		.loc 1 402 38 view .LVU618
 2058 0054 0335     		adds	r5, r5, #3
 2059              	.LVL204:
 402:src/storage.c **** 
 2060              		.loc 1 402 9 view .LVU619
 2061 0056 A0EBA500 		sub	r0, r0, r5, asr #2
 2062              	.LVL205:
 2063              	.L163:
 404:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2064              		.loc 1 404 3 is_stmt 1 view .LVU620
 404:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2065              		.loc 1 404 6 is_stmt 0 view .LVU621
 2066 005a 0028     		cmp	r0, #0
 2067 005c E2DB     		blt	.L169
 407:src/storage.c **** 	}
 2068              		.loc 1 407 3 is_stmt 1 view .LVU622
 2069 005e 7D21     		movs	r1, #125
 2070 0060 FFF7FEFF 		bl	cmdregs
 2071              	.LVL206:
 2072              	.L159:
 407:src/storage.c **** 	}
 2073              		.loc 1 407 3 is_stmt 0 view .LVU623
 2074              	.LBE58:
 412:src/storage.c **** 	ProgSize += length;
 2075              		.loc 1 412 2 is_stmt 1 view .LVU624
 412:src/storage.c **** 	ProgSize += length;
 2076              		.loc 1 412 7 is_stmt 0 view .LVU625
 2077 0064 7B88     		ldrh	r3, [r7, #2]
ARM GAS  /tmp/ccKaa6YO.s 			page 64


 2078              	.LVL207:
 413:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2079              		.loc 1 413 2 is_stmt 1 view .LVU626
 414:src/storage.c **** 	set_pc( pc );
 2080              		.loc 1 414 2 is_stmt 0 view .LVU627
 2081 0066 DFF85CC0 		ldr	ip, .L173+12
 412:src/storage.c **** 	ProgSize += length;
 2082              		.loc 1 412 5 view .LVU628
 2083 006a 5D1C     		adds	r5, r3, #1
 414:src/storage.c **** 	set_pc( pc );
 2084              		.loc 1 414 16 view .LVU629
 2085 006c ADB2     		uxth	r5, r5
 2086 006e 05F10040 		add	r0, r5, #-2147483648
 2087 0072 0138     		subs	r0, r0, #1
 413:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2088              		.loc 1 413 11 view .LVU630
 2089 0074 2344     		add	r3, r3, r4
 2090              	.LVL208:
 414:src/storage.c **** 	set_pc( pc );
 2091              		.loc 1 414 2 view .LVU631
 2092 0076 3146     		mov	r1, r6
 2093 0078 6200     		lsls	r2, r4, #1
 2094 007a 0CEB4000 		add	r0, ip, r0, lsl #1
 413:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2095              		.loc 1 413 11 view .LVU632
 2096 007e 7B80     		strh	r3, [r7, #2]	@ movhi
 2097              	.LVL209:
 414:src/storage.c **** 	set_pc( pc );
 2098              		.loc 1 414 2 is_stmt 1 view .LVU633
 2099 0080 FFF7FEFF 		bl	xcopy
 2100              	.LVL210:
 415:src/storage.c **** 	return 0;
 2101              		.loc 1 415 2 view .LVU634
 2102 0084 2846     		mov	r0, r5
 2103 0086 FFF7FEFF 		bl	set_pc
 2104              	.LVL211:
 416:src/storage.c **** }
 2105              		.loc 1 416 2 view .LVU635
 417:src/storage.c **** 
 2106              		.loc 1 417 1 is_stmt 0 view .LVU636
 2107 008a 0020     		movs	r0, #0
 2108 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2109              	.LVL212:
 2110              	.L157:
 383:src/storage.c **** 	}
 2111              		.loc 1 383 3 is_stmt 1 view .LVU637
 417:src/storage.c **** 
 2112              		.loc 1 417 1 is_stmt 0 view .LVU638
 2113 008e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2114              		.cfi_remember_state
 2115              		.cfi_restore 14
 2116              		.cfi_restore 7
 2117              		.cfi_restore 6
 2118              		.cfi_restore 5
 2119              		.cfi_restore 4
 2120              		.cfi_restore 3
 2121              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccKaa6YO.s 			page 65


 2122              	.LVL213:
 383:src/storage.c **** 	}
 2123              		.loc 1 383 10 view .LVU639
 2124 0092 1220     		movs	r0, #18
 2125              	.LVL214:
 383:src/storage.c **** 	}
 2126              		.loc 1 383 10 view .LVU640
 2127 0094 FFF7FEBF 		b	report_err
 2128              	.LVL215:
 2129              	.L171:
 2130              		.cfi_restore_state
 394:src/storage.c **** 		sigmaDeallocate();
 2131              		.loc 1 394 3 is_stmt 1 view .LVU641
 394:src/storage.c **** 		sigmaDeallocate();
 2132              		.loc 1 394 16 is_stmt 0 view .LVU642
 2133 0098 ED1A     		subs	r5, r5, r3
 2134              	.LVL216:
 395:src/storage.c **** 	}
 2135              		.loc 1 395 3 is_stmt 1 view .LVU643
 2136 009a FFF7FEFF 		bl	sigmaDeallocate
 2137              	.LVL217:
 397:src/storage.c **** 		int regs;
 2138              		.loc 1 397 2 view .LVU644
 397:src/storage.c **** 		int regs;
 2139              		.loc 1 397 5 is_stmt 0 view .LVU645
 2140 009e 002D     		cmp	r5, #0
 2141 00a0 E0DD     		ble	.L159
 2142              	.LBB59:
 398:src/storage.c **** 		if (is_dblmode())
 2143              		.loc 1 398 3 is_stmt 1 view .LVU646
 399:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2144              		.loc 1 399 3 view .LVU647
 399:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2145              		.loc 1 399 7 is_stmt 0 view .LVU648
 2146 00a2 FFF7FEFF 		bl	is_dblmode
 2147              	.LVL218:
 399:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2148              		.loc 1 399 6 view .LVU649
 2149 00a6 0028     		cmp	r0, #0
 2150 00a8 D2D0     		beq	.L162
 2151              	.L172:
 400:src/storage.c **** 		else
 2152              		.loc 1 400 4 is_stmt 1 view .LVU650
 400:src/storage.c **** 		else
 2153              		.loc 1 400 11 is_stmt 0 view .LVU651
 2154 00aa FFF7FEFF 		bl	global_regs
 2155              	.LVL219:
 400:src/storage.c **** 		else
 2156              		.loc 1 400 44 view .LVU652
 2157 00ae 0735     		adds	r5, r5, #7
 2158              	.LVL220:
 400:src/storage.c **** 		else
 2159              		.loc 1 400 25 view .LVU653
 2160 00b0 A0EBE500 		sub	r0, r0, r5, asr #3
 2161              	.LVL221:
 400:src/storage.c **** 		else
 2162              		.loc 1 400 25 view .LVU654
ARM GAS  /tmp/ccKaa6YO.s 			page 66


 2163 00b4 D1E7     		b	.L163
 2164              	.L174:
 2165 00b6 00BF     		.align	2
 2166              	.L173:
 2167 00b8 00000000 		.word	ProgFree
 2168 00bc 00000000 		.word	PersistentRam
 2169 00c0 00000000 		.word	SizeStatRegs
 2170 00c4 04000000 		.word	PersistentRam+4
 2171              	.LBE59:
 2172              		.cfi_endproc
 2173              	.LFE17:
 2175              		.section	.text.init_library,"ax",%progbits
 2176              		.align	1
 2177              		.p2align 2,,3
 2178              		.global	init_library
 2179              		.syntax unified
 2180              		.thumb
 2181              		.thumb_func
 2182              		.fpu fpv4-sp-d16
 2184              	init_library:
 2185              	.LFB20:
 644:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2186              		.loc 1 644 1 is_stmt 1 view -0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 256
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
 645:src/storage.c **** 	  struct {
 2190              		.loc 1 645 2 view .LVU656
 644:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2191              		.loc 1 644 1 is_stmt 0 view .LVU657
 2192 0000 00B5     		push	{lr}
 2193              		.cfi_def_cfa_offset 4
 2194              		.cfi_offset 14, -4
 645:src/storage.c **** 	  struct {
 2195              		.loc 1 645 7 view .LVU658
 2196 0002 0C48     		ldr	r0, .L182
 644:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2197              		.loc 1 644 1 view .LVU659
 2198 0004 C1B0     		sub	sp, sp, #260
 2199              		.cfi_def_cfa_offset 264
 645:src/storage.c **** 	  struct {
 2200              		.loc 1 645 7 view .LVU660
 2201 0006 FFF7FEFF 		bl	checksum_region.constprop.0
 2202              	.LVL222:
 645:src/storage.c **** 	  struct {
 2203              		.loc 1 645 5 view .LVU661
 2204 000a 10B9     		cbnz	r0, .L181
 656:src/storage.c **** 
 2205              		.loc 1 656 1 view .LVU662
 2206 000c 41B0     		add	sp, sp, #260
 2207              		.cfi_remember_state
 2208              		.cfi_def_cfa_offset 4
 2209              		@ sp needed
 2210 000e 5DF804FB 		ldr	pc, [sp], #4
 2211              	.L181:
 2212              		.cfi_restore_state
 2213              	.LBB60:
ARM GAS  /tmp/ccKaa6YO.s 			page 67


 646:src/storage.c **** 			unsigned short crc;
 2214              		.loc 1 646 4 is_stmt 1 view .LVU663
 651:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2215              		.loc 1 651 3 view .LVU664
 652:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2216              		.loc 1 652 3 view .LVU665
 652:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2217              		.loc 1 652 11 is_stmt 0 view .LVU666
 2218 0012 4AF23C53 		movw	r3, #42300
 653:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2219              		.loc 1 653 3 view .LVU667
 2220 0016 FC22     		movs	r2, #252
 2221 0018 FF21     		movs	r1, #255
 2222 001a 01A8     		add	r0, sp, #4
 652:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2223              		.loc 1 652 11 view .LVU668
 2224 001c 0093     		str	r3, [sp]
 653:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2225              		.loc 1 653 3 is_stmt 1 view .LVU669
 2226 001e FFF7FEFF 		bl	xset
 2227              	.LVL223:
 654:src/storage.c **** 	}
 2228              		.loc 1 654 3 view .LVU670
 2229 0022 6946     		mov	r1, sp
 2230 0024 0122     		movs	r2, #1
 2231 0026 0348     		ldr	r0, .L182
 2232 0028 FFF7FEFF 		bl	program_flash
 2233              	.LVL224:
 2234              	.LBE60:
 656:src/storage.c **** 
 2235              		.loc 1 656 1 is_stmt 0 view .LVU671
 2236 002c 41B0     		add	sp, sp, #260
 2237              		.cfi_def_cfa_offset 4
 2238              		@ sp needed
 2239 002e 5DF804FB 		ldr	pc, [sp], #4
 2240              	.L183:
 2241 0032 00BF     		.align	2
 2242              	.L182:
 2243 0034 00000000 		.word	UserFlash
 2244              		.cfi_endproc
 2245              	.LFE20:
 2247              		.section	.text.flash_remove,"ax",%progbits
 2248              		.align	1
 2249              		.p2align 2,,3
 2250              		.global	flash_remove
 2251              		.syntax unified
 2252              		.thumb
 2253              		.thumb_func
 2254              		.fpu fpv4-sp-d16
 2256              	flash_remove:
 2257              	.LVL225:
 2258              	.LFB22:
 721:src/storage.c **** 	const int size = UserFlash.size - count;
 2259              		.loc 1 721 1 is_stmt 1 view -0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 0
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccKaa6YO.s 			page 68


 2263              		@ link register save eliminated.
 722:src/storage.c **** 	step_no = offsetLIB( step_no );
 2264              		.loc 1 722 2 view .LVU673
 722:src/storage.c **** 	step_no = offsetLIB( step_no );
 2265              		.loc 1 722 28 is_stmt 0 view .LVU674
 2266 0000 074A     		ldr	r2, .L186
 723:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2267              		.loc 1 723 12 view .LVU675
 2268 0002 C0F30D00 		ubfx	r0, r0, #0, #14
 2269              	.LVL226:
 722:src/storage.c **** 	step_no = offsetLIB( step_no );
 2270              		.loc 1 722 28 view .LVU676
 2271 0006 5388     		ldrh	r3, [r2, #2]
 723:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2272              		.loc 1 723 10 view .LVU677
 2273 0008 0138     		subs	r0, r0, #1
 721:src/storage.c **** 	const int size = UserFlash.size - count;
 2274              		.loc 1 721 1 view .LVU678
 2275 000a 10B4     		push	{r4}
 2276              		.cfi_def_cfa_offset 4
 2277              		.cfi_offset 4, -4
 724:src/storage.c **** 			     size - step_no, size );
 2278              		.loc 1 724 9 view .LVU679
 2279 000c 0432     		adds	r2, r2, #4
 724:src/storage.c **** 			     size - step_no, size );
 2280              		.loc 1 724 57 view .LVU680
 2281 000e 4418     		adds	r4, r0, r1
 722:src/storage.c **** 	step_no = offsetLIB( step_no );
 2282              		.loc 1 722 12 view .LVU681
 2283 0010 5B1A     		subs	r3, r3, r1
 2284              	.LVL227:
 723:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2285              		.loc 1 723 2 is_stmt 1 view .LVU682
 724:src/storage.c **** 			     size - step_no, size );
 2286              		.loc 1 724 2 view .LVU683
 724:src/storage.c **** 			     size - step_no, size );
 2287              		.loc 1 724 9 is_stmt 0 view .LVU684
 2288 0012 02EB4401 		add	r1, r2, r4, lsl #1
 2289              	.LVL228:
 726:src/storage.c **** 
 2290              		.loc 1 726 1 view .LVU685
 2291 0016 5DF8044B 		ldr	r4, [sp], #4
 2292              		.cfi_restore 4
 2293              		.cfi_def_cfa_offset 0
 724:src/storage.c **** 			     size - step_no, size );
 2294              		.loc 1 724 9 view .LVU686
 2295 001a 1A1A     		subs	r2, r3, r0
 2296 001c FFF7FEBF 		b	flash_append
 2297              	.LVL229:
 2298              	.L187:
 724:src/storage.c **** 			     size - step_no, size );
 2299              		.loc 1 724 9 view .LVU687
 2300              		.align	2
 2301              	.L186:
 2302 0020 00000000 		.word	UserFlash
 2303              		.cfi_endproc
 2304              	.LFE22:
ARM GAS  /tmp/ccKaa6YO.s 			page 69


 2306              		.section	.text.clrprog,"ax",%progbits
 2307              		.align	1
 2308              		.p2align 2,,3
 2309              		.global	clrprog
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv4-sp-d16
 2315              	clrprog:
 2316              	.LFB12:
 250:src/storage.c **** 	update_program_bounds( 1 );
 2317              		.loc 1 250 1 is_stmt 1 view -0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 251:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2321              		.loc 1 251 2 view .LVU689
 250:src/storage.c **** 	update_program_bounds( 1 );
 2322              		.loc 1 250 1 is_stmt 0 view .LVU690
 2323 0000 10B5     		push	{r4, lr}
 2324              		.cfi_def_cfa_offset 8
 2325              		.cfi_offset 4, -8
 2326              		.cfi_offset 14, -4
 252:src/storage.c **** 		/*
 2327              		.loc 1 252 7 view .LVU691
 2328 0002 214C     		ldr	r4, .L197
 251:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2329              		.loc 1 251 2 view .LVU692
 2330 0004 0120     		movs	r0, #1
 2331 0006 FFF7FEFF 		bl	update_program_bounds
 2332              	.LVL230:
 252:src/storage.c **** 		/*
 2333              		.loc 1 252 2 is_stmt 1 view .LVU693
 252:src/storage.c **** 		/*
 2334              		.loc 1 252 7 is_stmt 0 view .LVU694
 2335 000a B4F8EC07 		ldrh	r0, [r4, #2028]
 252:src/storage.c **** 		/*
 2336              		.loc 1 252 5 view .LVU695
 2337 000e 830B     		lsrs	r3, r0, #14
 2338 0010 012B     		cmp	r3, #1
 2339 0012 26D0     		beq	.L194
 259:src/storage.c **** 			return;
 2340              		.loc 1 259 3 is_stmt 1 view .LVU696
 259:src/storage.c **** 			return;
 2341              		.loc 1 259 8 is_stmt 0 view .LVU697
 2342 0014 FFF7FEFF 		bl	check_delete_prog
 2343              	.LVL231:
 259:src/storage.c **** 			return;
 2344              		.loc 1 259 6 view .LVU698
 2345 0018 00B1     		cbz	r0, .L195
 271:src/storage.c ****  
 2346              		.loc 1 271 1 view .LVU699
 2347 001a 10BD     		pop	{r4, pc}
 2348              	.L195:
 262:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 2349              		.loc 1 262 3 is_stmt 1 view .LVU700
 2350 001c FFF7FEFF 		bl	clrretstk
ARM GAS  /tmp/ccKaa6YO.s 			page 70


 2351              	.LVL232:
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2352              		.loc 1 263 3 view .LVU701
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2353              		.loc 1 263 17 is_stmt 0 view .LVU702
 2354 0020 B4F8EC07 		ldrh	r0, [r4, #2028]
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2355              		.loc 1 263 37 view .LVU703
 2356 0024 B4F8EE17 		ldrh	r1, [r4, #2030]
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2357              		.loc 1 263 48 view .LVU704
 2358 0028 6288     		ldrh	r2, [r4, #2]
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2359              		.loc 1 263 17 view .LVU705
 2360 002a 00F10040 		add	r0, r0, #-2147483648
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2361              		.loc 1 263 3 view .LVU706
 2362 002e 231D     		adds	r3, r4, #4
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2363              		.loc 1 263 57 view .LVU707
 2364 0030 521A     		subs	r2, r2, r1
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2365              		.loc 1 263 17 view .LVU708
 2366 0032 0138     		subs	r0, r0, #1
 263:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2367              		.loc 1 263 3 view .LVU709
 2368 0034 03EB4000 		add	r0, r3, r0, lsl #1
 2369 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2370 003c 5200     		lsls	r2, r2, #1
 2371 003e FFF7FEFF 		bl	xcopy
 2372              	.LVL233:
 264:src/storage.c **** 		if ( ProgSize == 0 ) {
 2373              		.loc 1 264 3 is_stmt 1 view .LVU710
 264:src/storage.c **** 		if ( ProgSize == 0 ) {
 2374              		.loc 1 264 31 is_stmt 0 view .LVU711
 2375 0042 B4F8EC07 		ldrh	r0, [r4, #2028]
 264:src/storage.c **** 		if ( ProgSize == 0 ) {
 2376              		.loc 1 264 12 view .LVU712
 2377 0046 6388     		ldrh	r3, [r4, #2]
 2378 0048 B4F8EE27 		ldrh	r2, [r4, #2030]
 2379 004c 0344     		add	r3, r3, r0
 2380 004e 013B     		subs	r3, r3, #1
 2381 0050 9B1A     		subs	r3, r3, r2
 2382 0052 9BB2     		uxth	r3, r3
 265:src/storage.c **** 			stoend();
 2383              		.loc 1 265 3 is_stmt 1 view .LVU713
 265:src/storage.c **** 			stoend();
 2384              		.loc 1 265 6 is_stmt 0 view .LVU714
 2385 0054 ABB9     		cbnz	r3, .L196
 266:src/storage.c **** 		}
 2386              		.loc 1 266 4 is_stmt 1 view .LVU715
 2387              	.LBB61:
 2388              	.LBI61:
 214:src/storage.c **** {
 2389              		.loc 1 214 13 view .LVU716
 2390              	.LBB62:
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
ARM GAS  /tmp/ccKaa6YO.s 			page 71


 2391              		.loc 1 216 2 view .LVU717
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2392              		.loc 1 216 11 is_stmt 0 view .LVU718
 2393 0056 0122     		movs	r2, #1
 217:src/storage.c **** }
 2394              		.loc 1 217 12 view .LVU719
 2395 0058 4FF49D73 		mov	r3, #314
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2396              		.loc 1 216 11 view .LVU720
 2397 005c 6280     		strh	r2, [r4, #2]	@ movhi
 217:src/storage.c **** }
 2398              		.loc 1 217 2 is_stmt 1 view .LVU721
 217:src/storage.c **** }
 2399              		.loc 1 217 12 is_stmt 0 view .LVU722
 2400 005e A380     		strh	r3, [r4, #4]	@ movhi
 218:src/storage.c **** 
 2401              		.loc 1 218 1 view .LVU723
 2402 0060 07E0     		b	.L190
 2403              	.L194:
 2404              	.LBE62:
 2405              	.LBE61:
 256:src/storage.c **** 	}
 2406              		.loc 1 256 3 is_stmt 1 view .LVU724
 256:src/storage.c **** 	}
 2407              		.loc 1 256 28 is_stmt 0 view .LVU725
 2408 0062 B4F8EE17 		ldrh	r1, [r4, #2030]
 256:src/storage.c **** 	}
 2409              		.loc 1 256 36 view .LVU726
 2410 0066 0131     		adds	r1, r1, #1
 256:src/storage.c **** 	}
 2411              		.loc 1 256 3 view .LVU727
 2412 0068 091A     		subs	r1, r1, r0
 2413 006a FFF7FEFF 		bl	flash_remove
 2414              	.LVL234:
 2415 006e B4F8EC07 		ldrh	r0, [r4, #2028]
 2416              	.L190:
 269:src/storage.c **** 	update_program_bounds( 1 );
 2417              		.loc 1 269 2 is_stmt 1 view .LVU728
 2418 0072 0138     		subs	r0, r0, #1
 2419 0074 FFF7FEFF 		bl	set_pc
 2420              	.LVL235:
 270:src/storage.c **** }
 2421              		.loc 1 270 2 view .LVU729
 271:src/storage.c ****  
 2422              		.loc 1 271 1 is_stmt 0 view .LVU730
 2423 0078 BDE81040 		pop	{r4, lr}
 2424              		.cfi_remember_state
 2425              		.cfi_restore 14
 2426              		.cfi_restore 4
 2427              		.cfi_def_cfa_offset 0
 270:src/storage.c **** }
 2428              		.loc 1 270 2 view .LVU731
 2429 007c 0120     		movs	r0, #1
 2430 007e FFF7FEBF 		b	update_program_bounds
 2431              	.LVL236:
 2432              	.L196:
 2433              		.cfi_restore_state
ARM GAS  /tmp/ccKaa6YO.s 			page 72


 264:src/storage.c **** 		if ( ProgSize == 0 ) {
 2434              		.loc 1 264 12 view .LVU732
 2435 0082 6380     		strh	r3, [r4, #2]	@ movhi
 2436 0084 F5E7     		b	.L190
 2437              	.L198:
 2438 0086 00BF     		.align	2
 2439              	.L197:
 2440 0088 00000000 		.word	PersistentRam
 2441              		.cfi_endproc
 2442              	.LFE12:
 2444              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2445              		.align	2
 2446              	.LC8:
 2447 0000 4572726F 		.ascii	"Error\000"
 2447      7200
 2448 0006 0000     		.align	2
 2449              	.LC9:
 2450 0008 53617665 		.ascii	"Saved\000"
 2450      6400
 2451              		.section	.text.flash_backup,"ax",%progbits
 2452              		.align	1
 2453              		.p2align 2,,3
 2454              		.global	flash_backup
 2455              		.syntax unified
 2456              		.thumb
 2457              		.thumb_func
 2458              		.fpu fpv4-sp-d16
 2460              	flash_backup:
 2461              	.LVL237:
 2462              	.LFB23:
 735:src/storage.c **** 	if ( not_running() ) {
 2463              		.loc 1 735 1 is_stmt 1 view -0
 2464              		.cfi_startproc
 2465              		@ args = 0, pretend = 0, frame = 0
 2466              		@ frame_needed = 0, uses_anonymous_args = 0
 736:src/storage.c **** 		process_cmdline_set_lift();
 2467              		.loc 1 736 2 view .LVU734
 735:src/storage.c **** 	if ( not_running() ) {
 2468              		.loc 1 735 1 is_stmt 0 view .LVU735
 2469 0000 10B5     		push	{r4, lr}
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 4, -8
 2472              		.cfi_offset 14, -4
 736:src/storage.c **** 		process_cmdline_set_lift();
 2473              		.loc 1 736 7 view .LVU736
 2474 0002 FFF7FEFF 		bl	not_running
 2475              	.LVL238:
 736:src/storage.c **** 		process_cmdline_set_lift();
 2476              		.loc 1 736 5 view .LVU737
 2477 0006 00B9     		cbnz	r0, .L206
 748:src/storage.c **** 
 2478              		.loc 1 748 1 view .LVU738
 2479 0008 10BD     		pop	{r4, pc}
 2480              	.L206:
 737:src/storage.c **** 		init_state();
 2481              		.loc 1 737 3 is_stmt 1 view .LVU739
 2482              	.LBB63:
ARM GAS  /tmp/ccKaa6YO.s 			page 73


 2483              	.LBB64:
 184:src/storage.c **** 			      Crc, &Crc );
 2484              		.loc 1 184 9 is_stmt 0 view .LVU740
 2485 000a 0F4C     		ldr	r4, .L208
 2486              	.LBE64:
 2487              	.LBE63:
 737:src/storage.c **** 		init_state();
 2488              		.loc 1 737 3 view .LVU741
 2489 000c FFF7FEFF 		bl	process_cmdline_set_lift
 2490              	.LVL239:
 738:src/storage.c **** 		checksum_all();
 2491              		.loc 1 738 3 is_stmt 1 view .LVU742
 2492 0010 FFF7FEFF 		bl	init_state
 2493              	.LVL240:
 739:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2494              		.loc 1 739 3 view .LVU743
 2495              	.LBB66:
 2496              	.LBI63:
 182:src/storage.c **** {
 2497              		.loc 1 182 5 view .LVU744
 2498              	.LBB65:
 184:src/storage.c **** 			      Crc, &Crc );
 2499              		.loc 1 184 2 view .LVU745
 184:src/storage.c **** 			      Crc, &Crc );
 2500              		.loc 1 184 9 is_stmt 0 view .LVU746
 2501 0014 B4F8FE27 		ldrh	r2, [r4, #2046]
 2502 0018 40F2FE71 		movw	r1, #2046
 2503 001c 04F2FE73 		addw	r3, r4, #2046
 2504 0020 2046     		mov	r0, r4
 2505 0022 FFF7FEFF 		bl	test_checksum
 2506              	.LVL241:
 2507              	.LBE65:
 2508              	.LBE66:
 740:src/storage.c **** 			report_err( ERR_IO );
 2509              		.loc 1 740 3 is_stmt 1 view .LVU747
 740:src/storage.c **** 			report_err( ERR_IO );
 2510              		.loc 1 740 8 is_stmt 0 view .LVU748
 2511 0026 0948     		ldr	r0, .L208+4
 2512 0028 2146     		mov	r1, r4
 2513 002a 0122     		movs	r2, #1
 2514 002c FFF7FEFF 		bl	program_flash
 2515              	.LVL242:
 740:src/storage.c **** 			report_err( ERR_IO );
 2516              		.loc 1 740 6 view .LVU749
 2517 0030 18B9     		cbnz	r0, .L207
 745:src/storage.c **** 		}
 2518              		.loc 1 745 4 is_stmt 1 view .LVU750
 745:src/storage.c **** 		}
 2519              		.loc 1 745 12 is_stmt 0 view .LVU751
 2520 0032 074B     		ldr	r3, .L208+8
 2521 0034 074A     		ldr	r2, .L208+12
 2522 0036 1A60     		str	r2, [r3]
 748:src/storage.c **** 
 2523              		.loc 1 748 1 view .LVU752
 2524 0038 10BD     		pop	{r4, pc}
 2525              	.L207:
 741:src/storage.c **** 			DispMsg = "Error";
ARM GAS  /tmp/ccKaa6YO.s 			page 74


 2526              		.loc 1 741 4 is_stmt 1 view .LVU753
 2527 003a 1120     		movs	r0, #17
 2528 003c FFF7FEFF 		bl	report_err
 2529              	.LVL243:
 742:src/storage.c **** 		}
 2530              		.loc 1 742 4 view .LVU754
 742:src/storage.c **** 		}
 2531              		.loc 1 742 12 is_stmt 0 view .LVU755
 2532 0040 034B     		ldr	r3, .L208+8
 2533 0042 054A     		ldr	r2, .L208+16
 2534 0044 1A60     		str	r2, [r3]
 748:src/storage.c **** 
 2535              		.loc 1 748 1 view .LVU756
 2536 0046 10BD     		pop	{r4, pc}
 2537              	.L209:
 2538              		.align	2
 2539              	.L208:
 2540 0048 00000000 		.word	PersistentRam
 2541 004c 00000000 		.word	.LANCHOR0
 2542 0050 00000000 		.word	DispMsg
 2543 0054 08000000 		.word	.LC9
 2544 0058 00000000 		.word	.LC8
 2545              		.cfi_endproc
 2546              	.LFE23:
 2548              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2549              		.align	2
 2550              	.LC10:
 2551 0000 52657374 		.ascii	"Restored\000"
 2551      6F726564 
 2551      00
 2552              		.section	.text.flash_restore,"ax",%progbits
 2553              		.align	1
 2554              		.p2align 2,,3
 2555              		.global	flash_restore
 2556              		.syntax unified
 2557              		.thumb
 2558              		.thumb_func
 2559              		.fpu fpv4-sp-d16
 2561              	flash_restore:
 2562              	.LVL244:
 2563              	.LFB24:
 752:src/storage.c **** 	if ( not_running() ) {
 2564              		.loc 1 752 1 is_stmt 1 view -0
 2565              		.cfi_startproc
 2566              		@ args = 0, pretend = 0, frame = 0
 2567              		@ frame_needed = 0, uses_anonymous_args = 0
 753:src/storage.c **** 		if ( checksum_backup() ) {
 2568              		.loc 1 753 2 view .LVU758
 752:src/storage.c **** 	if ( not_running() ) {
 2569              		.loc 1 752 1 is_stmt 0 view .LVU759
 2570 0000 08B5     		push	{r3, lr}
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 3, -8
 2573              		.cfi_offset 14, -4
 753:src/storage.c **** 		if ( checksum_backup() ) {
 2574              		.loc 1 753 7 view .LVU760
 2575 0002 FFF7FEFF 		bl	not_running
ARM GAS  /tmp/ccKaa6YO.s 			page 75


 2576              	.LVL245:
 753:src/storage.c **** 		if ( checksum_backup() ) {
 2577              		.loc 1 753 5 view .LVU761
 2578 0006 90B1     		cbz	r0, .L210
 754:src/storage.c **** 			report_err( ERR_INVALID );
 2579              		.loc 1 754 3 is_stmt 1 view .LVU762
 754:src/storage.c **** 			report_err( ERR_INVALID );
 2580              		.loc 1 754 8 is_stmt 0 view .LVU763
 2581 0008 FFF7FEFF 		bl	checksum_backup
 2582              	.LVL246:
 754:src/storage.c **** 			report_err( ERR_INVALID );
 2583              		.loc 1 754 6 view .LVU764
 2584 000c 20B1     		cbz	r0, .L212
 755:src/storage.c **** 		}
 2585              		.loc 1 755 4 is_stmt 1 view .LVU765
 763:src/storage.c **** 
 2586              		.loc 1 763 1 is_stmt 0 view .LVU766
 2587 000e BDE80840 		pop	{r3, lr}
 2588              		.cfi_remember_state
 2589              		.cfi_restore 14
 2590              		.cfi_restore 3
 2591              		.cfi_def_cfa_offset 0
 755:src/storage.c **** 		}
 2592              		.loc 1 755 4 view .LVU767
 2593 0012 1220     		movs	r0, #18
 2594 0014 FFF7FEBF 		b	report_err
 2595              	.LVL247:
 2596              	.L212:
 2597              		.cfi_restore_state
 758:src/storage.c **** 			init_state();
 2598              		.loc 1 758 4 is_stmt 1 view .LVU768
 2599 0018 4FF40062 		mov	r2, #2048
 2600 001c 0449     		ldr	r1, .L217
 2601 001e 0548     		ldr	r0, .L217+4
 2602 0020 FFF7FEFF 		bl	xcopy
 2603              	.LVL248:
 759:src/storage.c **** 			DispMsg = "Restored";
 2604              		.loc 1 759 4 view .LVU769
 2605 0024 FFF7FEFF 		bl	init_state
 2606              	.LVL249:
 760:src/storage.c **** 		}
 2607              		.loc 1 760 4 view .LVU770
 760:src/storage.c **** 		}
 2608              		.loc 1 760 12 is_stmt 0 view .LVU771
 2609 0028 034B     		ldr	r3, .L217+8
 2610 002a 044A     		ldr	r2, .L217+12
 2611 002c 1A60     		str	r2, [r3]
 2612              	.L210:
 763:src/storage.c **** 
 2613              		.loc 1 763 1 view .LVU772
 2614 002e 08BD     		pop	{r3, pc}
 2615              	.L218:
 2616              		.align	2
 2617              	.L217:
 2618 0030 00000000 		.word	.LANCHOR0
 2619 0034 00000000 		.word	PersistentRam
 2620 0038 00000000 		.word	DispMsg
ARM GAS  /tmp/ccKaa6YO.s 			page 76


 2621 003c 00000000 		.word	.LC10
 2622              		.cfi_endproc
 2623              	.LFE24:
 2625              		.section	.text.load_program,"ax",%progbits
 2626              		.align	1
 2627              		.p2align 2,,3
 2628              		.global	load_program
 2629              		.syntax unified
 2630              		.thumb
 2631              		.thumb_func
 2632              		.fpu fpv4-sp-d16
 2634              	load_program:
 2635              	.LVL250:
 2636              	.LFB25:
 771:src/storage.c **** 	if ( not_running() ) {
 2637              		.loc 1 771 1 is_stmt 1 view -0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 0
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 772:src/storage.c **** 		if ( checksum_backup() ) {
 2641              		.loc 1 772 2 view .LVU774
 771:src/storage.c **** 	if ( not_running() ) {
 2642              		.loc 1 771 1 is_stmt 0 view .LVU775
 2643 0000 10B5     		push	{r4, lr}
 2644              		.cfi_def_cfa_offset 8
 2645              		.cfi_offset 4, -8
 2646              		.cfi_offset 14, -4
 772:src/storage.c **** 		if ( checksum_backup() ) {
 2647              		.loc 1 772 7 view .LVU776
 2648 0002 FFF7FEFF 		bl	not_running
 2649              	.LVL251:
 772:src/storage.c **** 		if ( checksum_backup() ) {
 2650              		.loc 1 772 5 view .LVU777
 2651 0006 88B1     		cbz	r0, .L219
 773:src/storage.c **** 			/*
 2652              		.loc 1 773 3 is_stmt 1 view .LVU778
 773:src/storage.c **** 			/*
 2653              		.loc 1 773 8 is_stmt 0 view .LVU779
 2654 0008 FFF7FEFF 		bl	checksum_backup
 2655              	.LVL252:
 773:src/storage.c **** 			/*
 2656              		.loc 1 773 6 view .LVU780
 2657 000c 78B9     		cbnz	r0, .L223
 780:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2658              		.loc 1 780 3 is_stmt 1 view .LVU781
 2659              	.LBB67:
 2660              	.LBI67:
 224:src/storage.c **** {
 2661              		.loc 1 224 6 view .LVU782
 2662              	.LBB68:
 226:src/storage.c **** 	stoend();
 2663              		.loc 1 226 2 view .LVU783
 2664 000e FFF7FEFF 		bl	clrretstk_pc
 2665              	.LVL253:
 227:src/storage.c **** }
 2666              		.loc 1 227 2 view .LVU784
 2667              	.LBB69:
ARM GAS  /tmp/ccKaa6YO.s 			page 77


 2668              	.LBI69:
 214:src/storage.c **** {
 2669              		.loc 1 214 13 view .LVU785
 2670              	.LBB70:
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2671              		.loc 1 216 2 view .LVU786
 2672              	.LBE70:
 2673              	.LBE69:
 2674              	.LBE68:
 2675              	.LBE67:
 781:src/storage.c **** 	}
 2676              		.loc 1 781 49 is_stmt 0 view .LVU787
 2677 0012 0948     		ldr	r0, .L224
 2678              	.LBB80:
 2679              	.LBB77:
 2680              	.LBB74:
 2681              	.LBB71:
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2682              		.loc 1 216 11 view .LVU788
 2683 0014 094B     		ldr	r3, .L224+4
 2684              	.LBE71:
 2685              	.LBE74:
 2686              	.LBE77:
 2687              	.LBE80:
 781:src/storage.c **** 	}
 2688              		.loc 1 781 3 view .LVU789
 2689 0016 4188     		ldrh	r1, [r0, #2]
 2690              	.LBB81:
 2691              	.LBB78:
 2692              	.LBB75:
 2693              	.LBB72:
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2694              		.loc 1 216 11 view .LVU790
 2695 0018 0124     		movs	r4, #1
 217:src/storage.c **** }
 2696              		.loc 1 217 12 view .LVU791
 2697 001a 4FF49D72 		mov	r2, #314
 216:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2698              		.loc 1 216 11 view .LVU792
 2699 001e 5C80     		strh	r4, [r3, #2]	@ movhi
 217:src/storage.c **** }
 2700              		.loc 1 217 2 is_stmt 1 view .LVU793
 2701              	.LBE72:
 2702              	.LBE75:
 2703              	.LBE78:
 2704              	.LBE81:
 781:src/storage.c **** 	}
 2705              		.loc 1 781 3 is_stmt 0 view .LVU794
 2706 0020 0430     		adds	r0, r0, #4
 783:src/storage.c **** 
 2707              		.loc 1 783 1 view .LVU795
 2708 0022 BDE81040 		pop	{r4, lr}
 2709              		.cfi_remember_state
 2710              		.cfi_restore 14
 2711              		.cfi_restore 4
 2712              		.cfi_def_cfa_offset 0
 2713              	.LBB82:
ARM GAS  /tmp/ccKaa6YO.s 			page 78


 2714              	.LBB79:
 2715              	.LBB76:
 2716              	.LBB73:
 217:src/storage.c **** }
 2717              		.loc 1 217 12 view .LVU796
 2718 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 2719              	.LBE73:
 2720              	.LBE76:
 2721              	.LBE79:
 2722              	.LBE82:
 781:src/storage.c **** 	}
 2723              		.loc 1 781 3 is_stmt 1 view .LVU797
 2724 0028 FFF7FEBF 		b	append_program
 2725              	.LVL254:
 2726              	.L219:
 2727              		.cfi_restore_state
 783:src/storage.c **** 
 2728              		.loc 1 783 1 is_stmt 0 view .LVU798
 2729 002c 10BD     		pop	{r4, pc}
 2730              	.L223:
 777:src/storage.c **** 			return;
 2731              		.loc 1 777 4 is_stmt 1 view .LVU799
 783:src/storage.c **** 
 2732              		.loc 1 783 1 is_stmt 0 view .LVU800
 2733 002e BDE81040 		pop	{r4, lr}
 2734              		.cfi_restore 14
 2735              		.cfi_restore 4
 2736              		.cfi_def_cfa_offset 0
 777:src/storage.c **** 			return;
 2737              		.loc 1 777 4 view .LVU801
 2738 0032 1220     		movs	r0, #18
 2739 0034 FFF7FEBF 		b	report_err
 2740              	.LVL255:
 2741              	.L225:
 2742              		.align	2
 2743              	.L224:
 2744 0038 00000000 		.word	.LANCHOR0
 2745 003c 00000000 		.word	PersistentRam
 2746              		.cfi_endproc
 2747              	.LFE25:
 2749              		.section	.text.load_registers,"ax",%progbits
 2750              		.align	1
 2751              		.p2align 2,,3
 2752              		.global	load_registers
 2753              		.syntax unified
 2754              		.thumb
 2755              		.thumb_func
 2756              		.fpu fpv4-sp-d16
 2758              	load_registers:
 2759              	.LVL256:
 2760              	.LFB26:
 790:src/storage.c **** 	int count;
 2761              		.loc 1 790 1 is_stmt 1 view -0
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 0
 2764              		@ frame_needed = 0, uses_anonymous_args = 0
 791:src/storage.c **** 	if ( checksum_backup() ) {
ARM GAS  /tmp/ccKaa6YO.s 			page 79


 2765              		.loc 1 791 2 view .LVU803
 792:src/storage.c **** 		/*
 2766              		.loc 1 792 2 view .LVU804
 790:src/storage.c **** 	int count;
 2767              		.loc 1 790 1 is_stmt 0 view .LVU805
 2768 0000 38B5     		push	{r3, r4, r5, lr}
 2769              		.cfi_def_cfa_offset 16
 2770              		.cfi_offset 3, -16
 2771              		.cfi_offset 4, -12
 2772              		.cfi_offset 5, -8
 2773              		.cfi_offset 14, -4
 792:src/storage.c **** 		/*
 2774              		.loc 1 792 7 view .LVU806
 2775 0002 FFF7FEFF 		bl	checksum_backup
 2776              	.LVL257:
 792:src/storage.c **** 		/*
 2777              		.loc 1 792 5 view .LVU807
 2778 0006 D0B9     		cbnz	r0, .L233
 799:src/storage.c **** 	if ( is_dblmode() ) {
 2779              		.loc 1 799 2 is_stmt 1 view .LVU808
 799:src/storage.c **** 	if ( is_dblmode() ) {
 2780              		.loc 1 799 10 is_stmt 0 view .LVU809
 2781 0008 0F4B     		ldr	r3, .L234
 799:src/storage.c **** 	if ( is_dblmode() ) {
 2782              		.loc 1 799 8 view .LVU810
 2783 000a 93F8CF47 		ldrb	r4, [r3, #1999]	@ zero_extendqisi2
 2784              	.LVL258:
 800:src/storage.c **** 		// Don't clobber the stack in DP mode
 2785              		.loc 1 800 2 is_stmt 1 view .LVU811
 800:src/storage.c **** 		// Don't clobber the stack in DP mode
 2786              		.loc 1 800 7 is_stmt 0 view .LVU812
 2787 000e FFF7FEFF 		bl	is_dblmode
 2788              	.LVL259:
 800:src/storage.c **** 		// Don't clobber the stack in DP mode
 2789              		.loc 1 800 5 view .LVU813
 2790 0012 00B1     		cbz	r0, .L228
 802:src/storage.c **** 	}
 2791              		.loc 1 802 3 is_stmt 1 view .LVU814
 802:src/storage.c **** 	}
 2792              		.loc 1 802 9 is_stmt 0 view .LVU815
 2793 0014 0C3C     		subs	r4, r4, #12
 2794              	.LVL260:
 2795              	.L228:
 804:src/storage.c **** 		count = BackupFlash._numregs;
 2796              		.loc 1 804 2 is_stmt 1 view .LVU816
 804:src/storage.c **** 		count = BackupFlash._numregs;
 2797              		.loc 1 804 26 is_stmt 0 view .LVU817
 2798 0016 0D4B     		ldr	r3, .L234+4
 2799 0018 93F8CF57 		ldrb	r5, [r3, #1999]	@ zero_extendqisi2
 807:src/storage.c **** }
 2800              		.loc 1 807 9 view .LVU818
 2801 001c 0020     		movs	r0, #0
 2802 001e A542     		cmp	r5, r4
 2803 0020 A8BF     		it	ge
 2804 0022 2546     		movge	r5, r4
 2805              	.LVL261:
 807:src/storage.c **** }
ARM GAS  /tmp/ccKaa6YO.s 			page 80


 2806              		.loc 1 807 2 is_stmt 1 view .LVU819
 807:src/storage.c **** }
 2807              		.loc 1 807 9 is_stmt 0 view .LVU820
 2808 0024 FFF7FEFF 		bl	get_reg_n
 2809              	.LVL262:
 2810 0028 0446     		mov	r4, r0
 807:src/storage.c **** }
 2811              		.loc 1 807 23 view .LVU821
 2812 002a 0020     		movs	r0, #0
 2813 002c FFF7FEFF 		bl	get_flash_reg_n
 2814              	.LVL263:
 807:src/storage.c **** }
 2815              		.loc 1 807 2 view .LVU822
 2816 0030 EA00     		lsls	r2, r5, #3
 807:src/storage.c **** }
 2817              		.loc 1 807 23 view .LVU823
 2818 0032 0146     		mov	r1, r0
 807:src/storage.c **** }
 2819              		.loc 1 807 2 view .LVU824
 2820 0034 2046     		mov	r0, r4
 808:src/storage.c **** 
 2821              		.loc 1 808 1 view .LVU825
 2822 0036 BDE83840 		pop	{r3, r4, r5, lr}
 2823              		.cfi_remember_state
 2824              		.cfi_restore 14
 2825              		.cfi_restore 5
 2826              		.cfi_restore 4
 2827              		.cfi_restore 3
 2828              		.cfi_def_cfa_offset 0
 2829              	.LVL264:
 807:src/storage.c **** }
 2830              		.loc 1 807 2 view .LVU826
 2831 003a FFF7FEBF 		b	xcopy
 2832              	.LVL265:
 2833              	.L233:
 2834              		.cfi_restore_state
 796:src/storage.c **** 		return;
 2835              		.loc 1 796 3 is_stmt 1 view .LVU827
 808:src/storage.c **** 
 2836              		.loc 1 808 1 is_stmt 0 view .LVU828
 2837 003e BDE83840 		pop	{r3, r4, r5, lr}
 2838              		.cfi_restore 14
 2839              		.cfi_restore 5
 2840              		.cfi_restore 4
 2841              		.cfi_restore 3
 2842              		.cfi_def_cfa_offset 0
 796:src/storage.c **** 		return;
 2843              		.loc 1 796 3 view .LVU829
 2844 0042 1220     		movs	r0, #18
 2845 0044 FFF7FEBF 		b	report_err
 2846              	.LVL266:
 2847              	.L235:
 2848              		.align	2
 2849              	.L234:
 2850 0048 00000000 		.word	PersistentRam
 2851 004c 00000000 		.word	.LANCHOR0
 2852              		.cfi_endproc
ARM GAS  /tmp/ccKaa6YO.s 			page 81


 2853              	.LFE26:
 2855              		.section	.text.load_sigma,"ax",%progbits
 2856              		.align	1
 2857              		.p2align 2,,3
 2858              		.global	load_sigma
 2859              		.syntax unified
 2860              		.thumb
 2861              		.thumb_func
 2862              		.fpu fpv4-sp-d16
 2864              	load_sigma:
 2865              	.LVL267:
 2866              	.LFB27:
 815:src/storage.c **** 	if ( checksum_backup() ) {
 2867              		.loc 1 815 1 is_stmt 1 view -0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 0
 2870              		@ frame_needed = 0, uses_anonymous_args = 0
 816:src/storage.c **** 		/*
 2871              		.loc 1 816 2 view .LVU831
 815:src/storage.c **** 	if ( checksum_backup() ) {
 2872              		.loc 1 815 1 is_stmt 0 view .LVU832
 2873 0000 08B5     		push	{r3, lr}
 2874              		.cfi_def_cfa_offset 8
 2875              		.cfi_offset 3, -8
 2876              		.cfi_offset 14, -4
 816:src/storage.c **** 		/*
 2877              		.loc 1 816 7 view .LVU833
 2878 0002 FFF7FEFF 		bl	checksum_backup
 2879              	.LVL268:
 816:src/storage.c **** 		/*
 2880              		.loc 1 816 5 view .LVU834
 2881 0006 A8B9     		cbnz	r0, .L240
 823:src/storage.c **** 		/*
 2882              		.loc 1 823 2 is_stmt 1 view .LVU835
 823:src/storage.c **** 		/*
 2883              		.loc 1 823 7 is_stmt 0 view .LVU836
 2884 0008 0D48     		ldr	r0, .L242
 2885 000a 90F8DD37 		ldrb	r3, [r0, #2013]	@ zero_extendqisi2
 823:src/storage.c **** 		/*
 2886              		.loc 1 823 5 view .LVU837
 2887 000e 9B06     		lsls	r3, r3, #26
 2888 0010 0BD5     		bpl	.L241
 830:src/storage.c **** }
 2889              		.loc 1 830 2 is_stmt 1 view .LVU838
 830:src/storage.c **** }
 2890              		.loc 1 830 56 is_stmt 0 view .LVU839
 2891 0012 90F8CF37 		ldrb	r3, [r0, #1999]	@ zero_extendqisi2
 2892 0016 C3F16403 		rsb	r3, r3, #100
 830:src/storage.c **** }
 2893              		.loc 1 830 81 view .LVU840
 2894 001a 00EBC300 		add	r0, r0, r3, lsl #3
 830:src/storage.c **** }
 2895              		.loc 1 830 2 view .LVU841
 2896 001e 00F56970 		add	r0, r0, #932
 831:src/storage.c **** 
 2897              		.loc 1 831 1 view .LVU842
 2898 0022 BDE80840 		pop	{r3, lr}
ARM GAS  /tmp/ccKaa6YO.s 			page 82


 2899              		.cfi_remember_state
 2900              		.cfi_restore 14
 2901              		.cfi_restore 3
 2902              		.cfi_def_cfa_offset 0
 830:src/storage.c **** }
 2903              		.loc 1 830 2 view .LVU843
 2904 0026 FFF7FEBF 		b	sigmaCopy
 2905              	.LVL269:
 2906              	.L241:
 2907              		.cfi_restore_state
 827:src/storage.c **** 		return;
 2908              		.loc 1 827 3 is_stmt 1 view .LVU844
 831:src/storage.c **** 
 2909              		.loc 1 831 1 is_stmt 0 view .LVU845
 2910 002a BDE80840 		pop	{r3, lr}
 2911              		.cfi_remember_state
 2912              		.cfi_restore 14
 2913              		.cfi_restore 3
 2914              		.cfi_def_cfa_offset 0
 827:src/storage.c **** 		return;
 2915              		.loc 1 827 3 view .LVU846
 2916 002e 0F20     		movs	r0, #15
 2917 0030 FFF7FEBF 		b	report_err
 2918              	.LVL270:
 2919              	.L240:
 2920              		.cfi_restore_state
 820:src/storage.c **** 		return;
 2921              		.loc 1 820 3 is_stmt 1 view .LVU847
 831:src/storage.c **** 
 2922              		.loc 1 831 1 is_stmt 0 view .LVU848
 2923 0034 BDE80840 		pop	{r3, lr}
 2924              		.cfi_restore 14
 2925              		.cfi_restore 3
 2926              		.cfi_def_cfa_offset 0
 820:src/storage.c **** 		return;
 2927              		.loc 1 820 3 view .LVU849
 2928 0038 1220     		movs	r0, #18
 2929 003a FFF7FEBF 		b	report_err
 2930              	.LVL271:
 2931              	.L243:
 2932 003e 00BF     		.align	2
 2933              	.L242:
 2934 0040 00000000 		.word	.LANCHOR0
 2935              		.cfi_endproc
 2936              	.LFE27:
 2938              		.section	.text.load_state,"ax",%progbits
 2939              		.align	1
 2940              		.p2align 2,,3
 2941              		.global	load_state
 2942              		.syntax unified
 2943              		.thumb
 2944              		.thumb_func
 2945              		.fpu fpv4-sp-d16
 2947              	load_state:
 2948              	.LVL272:
 2949              	.LFB28:
 838:src/storage.c **** 	if ( not_running() ) {
ARM GAS  /tmp/ccKaa6YO.s 			page 83


 2950              		.loc 1 838 1 is_stmt 1 view -0
 2951              		.cfi_startproc
 2952              		@ args = 0, pretend = 0, frame = 0
 2953              		@ frame_needed = 0, uses_anonymous_args = 0
 839:src/storage.c **** 		if ( checksum_backup() ) {
 2954              		.loc 1 839 2 view .LVU851
 838:src/storage.c **** 	if ( not_running() ) {
 2955              		.loc 1 838 1 is_stmt 0 view .LVU852
 2956 0000 08B5     		push	{r3, lr}
 2957              		.cfi_def_cfa_offset 8
 2958              		.cfi_offset 3, -8
 2959              		.cfi_offset 14, -4
 839:src/storage.c **** 		if ( checksum_backup() ) {
 2960              		.loc 1 839 7 view .LVU853
 2961 0002 FFF7FEFF 		bl	not_running
 2962              	.LVL273:
 839:src/storage.c **** 		if ( checksum_backup() ) {
 2963              		.loc 1 839 5 view .LVU854
 2964 0006 68B1     		cbz	r0, .L244
 840:src/storage.c **** 			/*
 2965              		.loc 1 840 3 is_stmt 1 view .LVU855
 840:src/storage.c **** 			/*
 2966              		.loc 1 840 8 is_stmt 0 view .LVU856
 2967 0008 FFF7FEFF 		bl	checksum_backup
 2968              	.LVL274:
 840:src/storage.c **** 			/*
 2969              		.loc 1 840 6 view .LVU857
 2970 000c 58B9     		cbnz	r0, .L248
 847:src/storage.c **** 		init_state();
 2971              		.loc 1 847 3 is_stmt 1 view .LVU858
 2972 000e 0849     		ldr	r1, .L249
 2973 0010 0848     		ldr	r0, .L249+4
 2974 0012 2E22     		movs	r2, #46
 2975 0014 FFF7FEFF 		bl	xcopy
 2976              	.LVL275:
 848:src/storage.c **** 		clrretstk_pc();
 2977              		.loc 1 848 3 view .LVU859
 2978 0018 FFF7FEFF 		bl	init_state
 2979              	.LVL276:
 849:src/storage.c **** 	}
 2980              		.loc 1 849 3 view .LVU860
 851:src/storage.c **** 
 2981              		.loc 1 851 1 is_stmt 0 view .LVU861
 2982 001c BDE80840 		pop	{r3, lr}
 2983              		.cfi_remember_state
 2984              		.cfi_restore 14
 2985              		.cfi_restore 3
 2986              		.cfi_def_cfa_offset 0
 849:src/storage.c **** 	}
 2987              		.loc 1 849 3 view .LVU862
 2988 0020 FFF7FEBF 		b	clrretstk_pc
 2989              	.LVL277:
 2990              	.L244:
 2991              		.cfi_restore_state
 851:src/storage.c **** 
 2992              		.loc 1 851 1 view .LVU863
 2993 0024 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccKaa6YO.s 			page 84


 2994              	.L248:
 844:src/storage.c **** 			return;
 2995              		.loc 1 844 4 is_stmt 1 view .LVU864
 851:src/storage.c **** 
 2996              		.loc 1 851 1 is_stmt 0 view .LVU865
 2997 0026 BDE80840 		pop	{r3, lr}
 2998              		.cfi_restore 14
 2999              		.cfi_restore 3
 3000              		.cfi_def_cfa_offset 0
 844:src/storage.c **** 			return;
 3001              		.loc 1 844 4 view .LVU866
 3002 002a 1220     		movs	r0, #18
 3003 002c FFF7FEBF 		b	report_err
 3004              	.LVL278:
 3005              	.L250:
 3006              		.align	2
 3007              	.L249:
 3008 0030 D0070000 		.word	.LANCHOR0+2000
 3009 0034 D0070000 		.word	PersistentRam+2000
 3010              		.cfi_endproc
 3011              	.LFE28:
 3013              		.section	.text.store_program,"ax",%progbits
 3014              		.align	1
 3015              		.p2align 2,,3
 3016              		.global	store_program
 3017              		.syntax unified
 3018              		.thumb
 3019              		.thumb_func
 3020              		.fpu fpv4-sp-d16
 3022              	store_program:
 3023              	.LVL279:
 3024              	.LFB29:
 858:src/storage.c **** 	opcode lbl; 
 3025              		.loc 1 858 1 is_stmt 1 view -0
 3026              		.cfi_startproc
 3027              		@ args = 0, pretend = 0, frame = 0
 3028              		@ frame_needed = 0, uses_anonymous_args = 0
 859:src/storage.c **** 	unsigned int pc;
 3029              		.loc 1 859 2 view .LVU868
 860:src/storage.c **** 	int space_needed, count, free;
 3030              		.loc 1 860 2 view .LVU869
 861:src/storage.c **** 
 3031              		.loc 1 861 2 view .LVU870
 863:src/storage.c **** 		/*
 3032              		.loc 1 863 2 view .LVU871
 858:src/storage.c **** 	opcode lbl; 
 3033              		.loc 1 858 1 is_stmt 0 view .LVU872
 3034 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3035              		.cfi_def_cfa_offset 24
 3036              		.cfi_offset 4, -24
 3037              		.cfi_offset 5, -20
 3038              		.cfi_offset 6, -16
 3039              		.cfi_offset 7, -12
 3040              		.cfi_offset 8, -8
 3041              		.cfi_offset 14, -4
 863:src/storage.c **** 		/*
 3042              		.loc 1 863 7 view .LVU873
ARM GAS  /tmp/ccKaa6YO.s 			page 85


 3043 0004 FFF7FEFF 		bl	not_running
 3044              	.LVL280:
 863:src/storage.c **** 		/*
 3045              		.loc 1 863 5 view .LVU874
 3046 0008 A8B3     		cbz	r0, .L251
 867:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3047              		.loc 1 867 3 is_stmt 1 view .LVU875
 3048              	.LVL281:
 868:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3049              		.loc 1 868 3 view .LVU876
 867:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3050              		.loc 1 867 8 is_stmt 0 view .LVU877
 3051 000a 2D4C     		ldr	r4, .L265
 3052 000c B4F8E037 		ldrh	r3, [r4, #2016]
 868:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3053              		.loc 1 868 6 view .LVU878
 3054 0010 5B04     		lsls	r3, r3, #17
 3055 0012 32D4     		bmi	.L261
 875:src/storage.c **** 		lbl = getprog( ProgBegin );
 3056              		.loc 1 875 3 is_stmt 1 view .LVU879
 3057 0014 0120     		movs	r0, #1
 3058 0016 FFF7FEFF 		bl	update_program_bounds
 3059              	.LVL282:
 876:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3060              		.loc 1 876 3 view .LVU880
 876:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3061              		.loc 1 876 9 is_stmt 0 view .LVU881
 3062 001a B4F8EC07 		ldrh	r0, [r4, #2028]
 3063 001e FFF7FEFF 		bl	getprog
 3064              	.LVL283:
 877:src/storage.c **** 			report_err( ERR_NO_LBL );
 3065              		.loc 1 877 3 is_stmt 1 view .LVU882
 877:src/storage.c **** 			report_err( ERR_NO_LBL );
 3066              		.loc 1 877 9 is_stmt 0 view .LVU883
 3067 0022 00F47043 		and	r3, r0, #61440
 877:src/storage.c **** 			report_err( ERR_NO_LBL );
 3068              		.loc 1 877 6 view .LVU884
 3069 0026 B3F5704F 		cmp	r3, #61440
 3070 002a 2BD1     		bne	.L254
 877:src/storage.c **** 			report_err( ERR_NO_LBL );
 3071              		.loc 1 877 20 discriminator 1 view .LVU885
 3072 002c 10F4706F 		tst	r0, #3840
 877:src/storage.c **** 			report_err( ERR_NO_LBL );
 3073              		.loc 1 877 23 discriminator 1 view .LVU886
 3074 0030 C0F30322 		ubfx	r2, r0, #8, #4
 877:src/storage.c **** 			report_err( ERR_NO_LBL );
 3075              		.loc 1 877 20 discriminator 1 view .LVU887
 3076 0034 26D1     		bne	.L254
 884:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3077              		.loc 1 884 3 is_stmt 1 view .LVU888
 884:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3078              		.loc 1 884 30 is_stmt 0 view .LVU889
 3079 0036 B4F8EE57 		ldrh	r5, [r4, #2030]
 884:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3080              		.loc 1 884 40 view .LVU890
 3081 003a B4F8EC37 		ldrh	r3, [r4, #2028]
 885:src/storage.c **** 
ARM GAS  /tmp/ccKaa6YO.s 			page 86


 3082              		.loc 1 885 39 view .LVU891
 3083 003e 214E     		ldr	r6, .L265+4
 890:src/storage.c **** 		if ( pc != 0 ) {
 3084              		.loc 1 890 8 view .LVU892
 3085 0040 0146     		mov	r1, r0
 884:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3086              		.loc 1 884 28 view .LVU893
 3087 0042 0135     		adds	r5, r5, #1
 890:src/storage.c **** 		if ( pc != 0 ) {
 3088              		.loc 1 890 8 view .LVU894
 3089 0044 4FF48040 		mov	r0, #16384
 3090              	.LVL284:
 885:src/storage.c **** 
 3091              		.loc 1 885 39 view .LVU895
 3092 0048 7788     		ldrh	r7, [r6, #2]
 884:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3093              		.loc 1 884 24 view .LVU896
 3094 004a ED1A     		subs	r5, r5, r3
 3095              	.LVL285:
 885:src/storage.c **** 
 3096              		.loc 1 885 3 is_stmt 1 view .LVU897
 890:src/storage.c **** 		if ( pc != 0 ) {
 3097              		.loc 1 890 8 is_stmt 0 view .LVU898
 3098 004c FFF7FEFF 		bl	find_opcode_from
 3099              	.LVL286:
 885:src/storage.c **** 
 3100              		.loc 1 885 8 view .LVU899
 3101 0050 C7F5FF57 		rsb	r7, r7, #8160
 3102 0054 1E37     		adds	r7, r7, #30
 3103              	.LVL287:
 890:src/storage.c **** 		if ( pc != 0 ) {
 3104              		.loc 1 890 3 is_stmt 1 view .LVU900
 891:src/storage.c **** 			/*
 3105              		.loc 1 891 3 view .LVU901
 891:src/storage.c **** 			/*
 3106              		.loc 1 891 6 is_stmt 0 view .LVU902
 3107 0056 F8B9     		cbnz	r0, .L262
 884:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3108              		.loc 1 884 24 view .LVU903
 3109 0058 2C46     		mov	r4, r5
 3110              	.LVL288:
 3111              	.L256:
 903:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3112              		.loc 1 903 3 is_stmt 1 view .LVU904
 903:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3113              		.loc 1 903 6 is_stmt 0 view .LVU905
 3114 005a BC42     		cmp	r4, r7
 3115 005c 17DC     		bgt	.L263
 908:src/storage.c **** 	}
 3116              		.loc 1 908 3 is_stmt 1 view .LVU906
 3117 005e 7488     		ldrh	r4, [r6, #2]
 3118              	.LVL289:
 908:src/storage.c **** 	}
 3119              		.loc 1 908 3 is_stmt 0 view .LVU907
 3120 0060 FFF7FEFF 		bl	get_current_prog
 3121              	.LVL290:
 908:src/storage.c **** 	}
ARM GAS  /tmp/ccKaa6YO.s 			page 87


 3122              		.loc 1 908 69 view .LVU908
 3123 0064 7388     		ldrh	r3, [r6, #2]
 908:src/storage.c **** 	}
 3124              		.loc 1 908 3 view .LVU909
 3125 0066 0146     		mov	r1, r0
 3126 0068 2B44     		add	r3, r3, r5
 3127 006a 2046     		mov	r0, r4
 3128 006c 2A46     		mov	r2, r5
 910:src/storage.c **** 
 3129              		.loc 1 910 1 view .LVU910
 3130 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3131              		.cfi_remember_state
 3132              		.cfi_restore 14
 3133              		.cfi_restore 8
 3134              		.cfi_restore 7
 3135              		.cfi_restore 6
 3136              		.cfi_restore 5
 3137              		.cfi_restore 4
 3138              		.cfi_def_cfa_offset 0
 3139              	.LVL291:
 908:src/storage.c **** 	}
 3140              		.loc 1 908 3 view .LVU911
 3141 0072 FFF7FEBF 		b	flash_append
 3142              	.LVL292:
 3143              	.L251:
 3144              		.cfi_restore_state
 910:src/storage.c **** 
 3145              		.loc 1 910 1 view .LVU912
 3146 0076 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3147              	.LVL293:
 3148              	.L261:
 869:src/storage.c **** 			return;
 3149              		.loc 1 869 4 is_stmt 1 view .LVU913
 910:src/storage.c **** 
 3150              		.loc 1 910 1 is_stmt 0 view .LVU914
 3151 007a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3152              		.cfi_remember_state
 3153              		.cfi_restore 14
 3154              		.cfi_restore 8
 3155              		.cfi_restore 7
 3156              		.cfi_restore 6
 3157              		.cfi_restore 5
 3158              		.cfi_restore 4
 3159              		.cfi_def_cfa_offset 0
 869:src/storage.c **** 			return;
 3160              		.loc 1 869 4 view .LVU915
 3161 007e 0720     		movs	r0, #7
 3162 0080 FFF7FEBF 		b	report_err
 3163              	.LVL294:
 3164              	.L254:
 3165              		.cfi_restore_state
 878:src/storage.c **** 			return;
 3166              		.loc 1 878 4 is_stmt 1 view .LVU916
 910:src/storage.c **** 
 3167              		.loc 1 910 1 is_stmt 0 view .LVU917
 3168 0084 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3169              		.cfi_remember_state
ARM GAS  /tmp/ccKaa6YO.s 			page 88


 3170              		.cfi_restore 14
 3171              		.cfi_restore 8
 3172              		.cfi_restore 7
 3173              		.cfi_restore 6
 3174              		.cfi_restore 5
 3175              		.cfi_restore 4
 3176              		.cfi_def_cfa_offset 0
 878:src/storage.c **** 			return;
 3177              		.loc 1 878 4 view .LVU918
 3178 0088 0620     		movs	r0, #6
 3179              	.LVL295:
 878:src/storage.c **** 			return;
 3180              		.loc 1 878 4 view .LVU919
 3181 008a FFF7FEBF 		b	report_err
 3182              	.LVL296:
 3183              	.L263:
 3184              		.cfi_restore_state
 904:src/storage.c **** 			return;
 3185              		.loc 1 904 4 is_stmt 1 view .LVU920
 910:src/storage.c **** 
 3186              		.loc 1 910 1 is_stmt 0 view .LVU921
 3187 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3188              		.cfi_remember_state
 3189              		.cfi_restore 14
 3190              		.cfi_restore 8
 3191              		.cfi_restore 7
 3192              		.cfi_restore 6
 3193              		.cfi_restore 5
 3194              		.cfi_restore 4
 3195              		.cfi_def_cfa_offset 0
 3196              	.LVL297:
 904:src/storage.c **** 			return;
 3197              		.loc 1 904 4 view .LVU922
 3198 0092 1720     		movs	r0, #23
 3199 0094 FFF7FEBF 		b	report_err
 3200              	.LVL298:
 3201              	.L262:
 3202              		.cfi_restore_state
 3203              	.LBB83:
 895:src/storage.c **** 			set_pc( pc );
 3204              		.loc 1 895 4 is_stmt 1 view .LVU923
 895:src/storage.c **** 			set_pc( pc );
 3205              		.loc 1 895 17 is_stmt 0 view .LVU924
 3206 0098 B4F8E087 		ldrh	r8, [r4, #2016]
 3207              	.LVL299:
 896:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3208              		.loc 1 896 4 is_stmt 1 view .LVU925
 3209 009c FFF7FEFF 		bl	set_pc
 3210              	.LVL300:
 897:src/storage.c **** 			if ( space_needed <= free ) {
 3211              		.loc 1 897 4 view .LVU926
 897:src/storage.c **** 			if ( space_needed <= free ) {
 3212              		.loc 1 897 24 is_stmt 0 view .LVU927
 3213 00a0 B4F8EE37 		ldrh	r3, [r4, #2030]
 897:src/storage.c **** 			if ( space_needed <= free ) {
 3214              		.loc 1 897 34 view .LVU928
 3215 00a4 B4F8EC27 		ldrh	r2, [r4, #2028]
ARM GAS  /tmp/ccKaa6YO.s 			page 89


 897:src/storage.c **** 			if ( space_needed <= free ) {
 3216              		.loc 1 897 22 view .LVU929
 3217 00a8 5C1C     		adds	r4, r3, #1
 897:src/storage.c **** 			if ( space_needed <= free ) {
 3218              		.loc 1 897 32 view .LVU930
 3219 00aa A41A     		subs	r4, r4, r2
 897:src/storage.c **** 			if ( space_needed <= free ) {
 3220              		.loc 1 897 17 view .LVU931
 3221 00ac 2C1B     		subs	r4, r5, r4
 3222              	.LVL301:
 898:src/storage.c **** 				clrprog();
 3223              		.loc 1 898 4 is_stmt 1 view .LVU932
 898:src/storage.c **** 				clrprog();
 3224              		.loc 1 898 7 is_stmt 0 view .LVU933
 3225 00ae A742     		cmp	r7, r4
 3226 00b0 03DA     		bge	.L264
 3227              	.L257:
 901:src/storage.c **** 		}
 3228              		.loc 1 901 4 is_stmt 1 view .LVU934
 3229 00b2 4046     		mov	r0, r8
 3230 00b4 FFF7FEFF 		bl	set_pc
 3231              	.LVL302:
 3232 00b8 CFE7     		b	.L256
 3233              	.L264:
 899:src/storage.c **** 			}
 3234              		.loc 1 899 5 view .LVU935
 3235 00ba FFF7FEFF 		bl	clrprog
 3236              	.LVL303:
 3237 00be F8E7     		b	.L257
 3238              	.L266:
 3239              		.align	2
 3240              	.L265:
 3241 00c0 00000000 		.word	PersistentRam
 3242 00c4 00000000 		.word	UserFlash
 3243              	.LBE83:
 3244              		.cfi_endproc
 3245              	.LFE29:
 3247              		.section	.text.recall_program,"ax",%progbits
 3248              		.align	1
 3249              		.p2align 2,,3
 3250              		.global	recall_program
 3251              		.syntax unified
 3252              		.thumb
 3253              		.thumb_func
 3254              		.fpu fpv4-sp-d16
 3256              	recall_program:
 3257              	.LVL304:
 3258              	.LFB30:
 917:src/storage.c **** 	if ( not_running() ) {
 3259              		.loc 1 917 1 view -0
 3260              		.cfi_startproc
 3261              		@ args = 0, pretend = 0, frame = 0
 3262              		@ frame_needed = 0, uses_anonymous_args = 0
 918:src/storage.c **** 		if ( state_pc() == 0 ) {
 3263              		.loc 1 918 2 view .LVU937
 917:src/storage.c **** 	if ( not_running() ) {
 3264              		.loc 1 917 1 is_stmt 0 view .LVU938
ARM GAS  /tmp/ccKaa6YO.s 			page 90


 3265 0000 10B5     		push	{r4, lr}
 3266              		.cfi_def_cfa_offset 8
 3267              		.cfi_offset 4, -8
 3268              		.cfi_offset 14, -4
 918:src/storage.c **** 		if ( state_pc() == 0 ) {
 3269              		.loc 1 918 7 view .LVU939
 3270 0002 FFF7FEFF 		bl	not_running
 3271              	.LVL305:
 918:src/storage.c **** 		if ( state_pc() == 0 ) {
 3272              		.loc 1 918 5 view .LVU940
 3273 0006 A8B1     		cbz	r0, .L267
 919:src/storage.c **** 			State.pc = 1;
 3274              		.loc 1 919 3 is_stmt 1 view .LVU941
 919:src/storage.c **** 			State.pc = 1;
 3275              		.loc 1 919 8 is_stmt 0 view .LVU942
 3276 0008 0B4C     		ldr	r4, .L271
 919:src/storage.c **** 			State.pc = 1;
 3277              		.loc 1 919 6 view .LVU943
 3278 000a B4F8E037 		ldrh	r3, [r4, #2016]
 3279 000e 13B9     		cbnz	r3, .L269
 920:src/storage.c **** 		}
 3280              		.loc 1 920 4 is_stmt 1 view .LVU944
 920:src/storage.c **** 		}
 3281              		.loc 1 920 13 is_stmt 0 view .LVU945
 3282 0010 0123     		movs	r3, #1
 3283 0012 A4F8E037 		strh	r3, [r4, #2016]	@ movhi
 3284              	.L269:
 922:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3285              		.loc 1 922 3 is_stmt 1 view .LVU946
 3286 0016 0120     		movs	r0, #1
 3287 0018 FFF7FEFF 		bl	update_program_bounds
 3288              	.LVL306:
 923:src/storage.c **** 	}
 3289              		.loc 1 923 3 view .LVU947
 3290 001c FFF7FEFF 		bl	get_current_prog
 3291              	.LVL307:
 923:src/storage.c **** 	}
 3292              		.loc 1 923 39 is_stmt 0 view .LVU948
 3293 0020 B4F8EE17 		ldrh	r1, [r4, #2030]
 923:src/storage.c **** 	}
 3294              		.loc 1 923 49 view .LVU949
 3295 0024 B4F8EC37 		ldrh	r3, [r4, #2028]
 923:src/storage.c **** 	}
 3296              		.loc 1 923 47 view .LVU950
 3297 0028 C91A     		subs	r1, r1, r3
 925:src/storage.c **** 
 3298              		.loc 1 925 1 view .LVU951
 3299 002a BDE81040 		pop	{r4, lr}
 3300              		.cfi_remember_state
 3301              		.cfi_restore 14
 3302              		.cfi_restore 4
 3303              		.cfi_def_cfa_offset 0
 923:src/storage.c **** 	}
 3304              		.loc 1 923 3 view .LVU952
 3305 002e 0131     		adds	r1, r1, #1
 3306 0030 FFF7FEBF 		b	append_program
 3307              	.LVL308:
ARM GAS  /tmp/ccKaa6YO.s 			page 91


 3308              	.L267:
 3309              		.cfi_restore_state
 925:src/storage.c **** 
 3310              		.loc 1 925 1 view .LVU953
 3311 0034 10BD     		pop	{r4, pc}
 3312              	.L272:
 3313 0036 00BF     		.align	2
 3314              	.L271:
 3315 0038 00000000 		.word	PersistentRam
 3316              		.cfi_endproc
 3317              	.LFE30:
 3319              		.section	.rodata.import_program.str1.4,"aMS",%progbits,1
 3320              		.align	2
 3321              	.LC11:
 3322 0000 2E646174 		.ascii	".dat\000"
 3322      00
 3323 0005 000000   		.align	2
 3324              	.LC12:
 3325 0008 50726F67 		.ascii	"Program File\000"
 3325      72616D20 
 3325      46696C65 
 3325      00
 3326              		.section	.text.import_program,"ax",%progbits
 3327              		.align	1
 3328              		.p2align 2,,3
 3329              		.global	import_program
 3330              		.syntax unified
 3331              		.thumb
 3332              		.thumb_func
 3333              		.fpu fpv4-sp-d16
 3335              	import_program:
 3336              	.LFB31:
 988:src/storage.c ****   file_selection_screen ("Program File", "/wp34s", ".dat", load_program_file, 0, 0, NULL);
 3337              		.loc 1 988 24 is_stmt 1 view -0
 3338              		.cfi_startproc
 3339              		@ args = 0, pretend = 0, frame = 0
 3340              		@ frame_needed = 0, uses_anonymous_args = 0
 989:src/storage.c ****   //  print_debug (100, 4);
 3341              		.loc 1 989 3 view .LVU955
 988:src/storage.c ****   file_selection_screen ("Program File", "/wp34s", ".dat", load_program_file, 0, 0, NULL);
 3342              		.loc 1 988 24 is_stmt 0 view .LVU956
 3343 0000 10B5     		push	{r4, lr}
 3344              		.cfi_def_cfa_offset 8
 3345              		.cfi_offset 4, -8
 3346              		.cfi_offset 14, -4
 3347 0002 84B0     		sub	sp, sp, #16
 3348              		.cfi_def_cfa_offset 24
 989:src/storage.c ****   //  print_debug (100, 4);
 3349              		.loc 1 989 3 view .LVU957
 3350 0004 0023     		movs	r3, #0
 3351 0006 CDE90133 		strd	r3, r3, [sp, #4]
 3352 000a 0093     		str	r3, [sp]
 3353 000c 054C     		ldr	r4, .L275
 3354 000e 064B     		ldr	r3, .L275+4
 3355 0010 064A     		ldr	r2, .L275+8
 3356 0012 0749     		ldr	r1, .L275+12
 3357 0014 0748     		ldr	r0, .L275+16
ARM GAS  /tmp/ccKaa6YO.s 			page 92


 3358 0016 A047     		blx	r4
 3359              	.LVL309:
 991:src/storage.c **** }
 3360              		.loc 1 991 3 is_stmt 1 view .LVU958
 992:src/storage.c **** 
 3361              		.loc 1 992 1 is_stmt 0 view .LVU959
 3362 0018 04B0     		add	sp, sp, #16
 3363              		.cfi_def_cfa_offset 8
 3364              		@ sp needed
 3365 001a BDE81040 		pop	{r4, lr}
 3366              		.cfi_restore 14
 3367              		.cfi_restore 4
 3368              		.cfi_def_cfa_offset 0
 991:src/storage.c **** }
 3369              		.loc 1 991 3 view .LVU960
 3370 001e FFF7FEBF 		b	display_current_menu
 3371              	.LVL310:
 3372              	.L276:
 3373 0022 00BF     		.align	2
 3374              	.L275:
 3375 0024 51030008 		.word	134218577
 3376 0028 00000000 		.word	load_program_file
 3377 002c 00000000 		.word	.LC11
 3378 0030 2C000000 		.word	.LC2
 3379 0034 08000000 		.word	.LC12
 3380              		.cfi_endproc
 3381              	.LFE31:
 3383              		.section	.rodata.save_statefile.str1.4,"aMS",%progbits,1
 3384              		.align	2
 3385              	.LC13:
 3386 0000 77703334 		.ascii	"wp34s/wp34s_saved.dat\000"
 3386      732F7770 
 3386      3334735F 
 3386      73617665 
 3386      642E6461 
 3387 0016 0000     		.align	2
 3388              	.LC14:
 3389 0018 77703334 		.ascii	"wp34s/wp34s.dat\000"
 3389      732F7770 
 3389      3334732E 
 3389      64617400 
 3390              		.section	.text.save_statefile,"ax",%progbits
 3391              		.align	1
 3392              		.p2align 2,,3
 3393              		.global	save_statefile
 3394              		.syntax unified
 3395              		.thumb
 3396              		.thumb_func
 3397              		.fpu fpv4-sp-d16
 3399              	save_statefile:
 3400              	.LVL311:
 3401              	.LFB33:
1022:src/storage.c **** 
1023:src/storage.c **** void save_statefile(int i) // note, nothing to do with flash
1024:src/storage.c **** {
 3402              		.loc 1 1024 1 is_stmt 1 view -0
 3403              		.cfi_startproc
ARM GAS  /tmp/ccKaa6YO.s 			page 93


 3404              		@ args = 0, pretend = 0, frame = 8
 3405              		@ frame_needed = 0, uses_anonymous_args = 0
1025:src/storage.c **** 	FRESULT f;
 3406              		.loc 1 1025 2 view .LVU962
1026:src/storage.c **** 	uint x = 0;
 3407              		.loc 1 1026 2 view .LVU963
1024:src/storage.c **** 	FRESULT f;
 3408              		.loc 1 1024 1 is_stmt 0 view .LVU964
 3409 0000 70B5     		push	{r4, r5, r6, lr}
 3410              		.cfi_def_cfa_offset 16
 3411              		.cfi_offset 4, -16
 3412              		.cfi_offset 5, -12
 3413              		.cfi_offset 6, -8
 3414              		.cfi_offset 14, -4
 3415 0002 82B0     		sub	sp, sp, #8
 3416              		.cfi_def_cfa_offset 24
 3417              		.loc 1 1026 7 view .LVU965
 3418 0004 0023     		movs	r3, #0
1024:src/storage.c **** 	FRESULT f;
 3419              		.loc 1 1024 1 view .LVU966
 3420 0006 0446     		mov	r4, r0
 3421              		.loc 1 1026 7 view .LVU967
 3422 0008 0193     		str	r3, [sp, #4]
1027:src/storage.c **** 	sys_disk_write_enable(1);
 3423              		.loc 1 1027 2 is_stmt 1 view .LVU968
 3424 000a 0120     		movs	r0, #1
 3425              	.LVL312:
 3426              		.loc 1 1027 2 is_stmt 0 view .LVU969
 3427 000c 184B     		ldr	r3, .L288
 3428 000e 9847     		blx	r3
 3429              	.LVL313:
1028:src/storage.c **** 	if (i==1) {
 3430              		.loc 1 1028 2 is_stmt 1 view .LVU970
1029:src/storage.c **** 	  f = f_open( FPT, SAVED_STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 3431              		.loc 1 1029 4 view .LVU971
1030:src/storage.c **** 	}
1031:src/storage.c **** 	else {
1032:src/storage.c **** 	  f = f_open( FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 3432              		.loc 1 1032 4 view .LVU972
1029:src/storage.c **** 	  f = f_open( FPT, SAVED_STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 3433              		.loc 1 1029 8 is_stmt 0 view .LVU973
 3434 0010 184A     		ldr	r2, .L288+4
 3435 0012 194B     		ldr	r3, .L288+8
 3436 0014 5068     		ldr	r0, [r2, #4]
1028:src/storage.c **** 	  f = f_open( FPT, SAVED_STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 3437              		.loc 1 1028 5 view .LVU974
 3438 0016 012C     		cmp	r4, #1
1029:src/storage.c **** 	  f = f_open( FPT, SAVED_STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 3439              		.loc 1 1029 8 view .LVU975
 3440 0018 0CBF     		ite	eq
 3441 001a 1849     		ldreq	r1, .L288+12
 3442              		.loc 1 1032 8 view .LVU976
 3443 001c 1849     		ldrne	r1, .L288+16
 3444 001e 0B22     		movs	r2, #11
 3445 0020 9847     		blx	r3
 3446              	.LVL314:
 3447 0022 0446     		mov	r4, r0
ARM GAS  /tmp/ccKaa6YO.s 			page 94


 3448              	.LVL315:
1033:src/storage.c **** 	}
1034:src/storage.c **** 	if ( f != FR_OK ) {
 3449              		.loc 1 1034 2 is_stmt 1 view .LVU977
 3450              		.loc 1 1034 5 is_stmt 0 view .LVU978
 3451 0024 20B1     		cbz	r0, .L280
 3452              	.LVL316:
 3453              	.L287:
1035:src/storage.c **** 	  sys_disk_write_enable(0);
1036:src/storage.c **** 	  return;
1037:src/storage.c **** 	}
1038:src/storage.c **** 	process_cmdline_set_lift();
1039:src/storage.c **** 	init_state();
1040:src/storage.c **** 	checksum_all();
1041:src/storage.c **** 	f = f_write( FPT, &PersistentRam, sizeof( PersistentRam ), &x );
1042:src/storage.c **** 	if ( f != FR_OK ) {
1043:src/storage.c **** 	  sys_disk_write_enable(0);
1044:src/storage.c **** 	}
1045:src/storage.c **** 	f_close( FPT );
1046:src/storage.c **** 	sys_disk_write_enable(0);
 3454              		.loc 1 1046 2 is_stmt 1 view .LVU979
 3455 0026 124B     		ldr	r3, .L288
 3456 0028 0020     		movs	r0, #0
 3457 002a 9847     		blx	r3
 3458              	.LVL317:
1047:src/storage.c **** }
 3459              		.loc 1 1047 1 is_stmt 0 view .LVU980
 3460 002c 02B0     		add	sp, sp, #8
 3461              		.cfi_remember_state
 3462              		.cfi_def_cfa_offset 16
 3463              		@ sp needed
 3464 002e 70BD     		pop	{r4, r5, r6, pc}
 3465              	.LVL318:
 3466              	.L280:
 3467              		.cfi_restore_state
1038:src/storage.c **** 	init_state();
 3468              		.loc 1 1038 2 is_stmt 1 view .LVU981
 3469              	.LBB84:
 3470              	.LBB85:
 184:src/storage.c **** 			      Crc, &Crc );
 3471              		.loc 1 184 9 is_stmt 0 view .LVU982
 3472 0030 144D     		ldr	r5, .L288+20
 3473              	.LBE85:
 3474              	.LBE84:
1041:src/storage.c **** 	if ( f != FR_OK ) {
 3475              		.loc 1 1041 6 view .LVU983
 3476 0032 154E     		ldr	r6, .L288+24
1038:src/storage.c **** 	init_state();
 3477              		.loc 1 1038 2 view .LVU984
 3478 0034 FFF7FEFF 		bl	process_cmdline_set_lift
 3479              	.LVL319:
1039:src/storage.c **** 	checksum_all();
 3480              		.loc 1 1039 2 is_stmt 1 view .LVU985
 3481 0038 FFF7FEFF 		bl	init_state
 3482              	.LVL320:
1040:src/storage.c **** 	f = f_write( FPT, &PersistentRam, sizeof( PersistentRam ), &x );
 3483              		.loc 1 1040 2 view .LVU986
ARM GAS  /tmp/ccKaa6YO.s 			page 95


 3484              	.LBB87:
 3485              	.LBI84:
 182:src/storage.c **** {
 3486              		.loc 1 182 5 view .LVU987
 3487              	.LBB86:
 184:src/storage.c **** 			      Crc, &Crc );
 3488              		.loc 1 184 2 view .LVU988
 184:src/storage.c **** 			      Crc, &Crc );
 3489              		.loc 1 184 9 is_stmt 0 view .LVU989
 3490 003c B5F8FE27 		ldrh	r2, [r5, #2046]
 3491 0040 05F2FE73 		addw	r3, r5, #2046
 3492 0044 40F2FE71 		movw	r1, #2046
 3493 0048 2846     		mov	r0, r5
 3494 004a FFF7FEFF 		bl	test_checksum
 3495              	.LVL321:
 3496              	.LBE86:
 3497              	.LBE87:
1041:src/storage.c **** 	if ( f != FR_OK ) {
 3498              		.loc 1 1041 2 is_stmt 1 view .LVU990
1041:src/storage.c **** 	if ( f != FR_OK ) {
 3499              		.loc 1 1041 6 is_stmt 0 view .LVU991
 3500 004e 094B     		ldr	r3, .L288+4
 3501 0050 2946     		mov	r1, r5
 3502 0052 5868     		ldr	r0, [r3, #4]
 3503 0054 4FF40062 		mov	r2, #2048
 3504 0058 01AB     		add	r3, sp, #4
 3505 005a B047     		blx	r6
 3506              	.LVL322:
1042:src/storage.c **** 	  sys_disk_write_enable(0);
 3507              		.loc 1 1042 2 is_stmt 1 view .LVU992
1042:src/storage.c **** 	  sys_disk_write_enable(0);
 3508              		.loc 1 1042 5 is_stmt 0 view .LVU993
 3509 005c 10B1     		cbz	r0, .L282
1043:src/storage.c **** 	}
 3510              		.loc 1 1043 4 is_stmt 1 view .LVU994
 3511 005e 044B     		ldr	r3, .L288
 3512 0060 2046     		mov	r0, r4
 3513              	.LVL323:
1043:src/storage.c **** 	}
 3514              		.loc 1 1043 4 is_stmt 0 view .LVU995
 3515 0062 9847     		blx	r3
 3516              	.LVL324:
 3517              	.L282:
1045:src/storage.c **** 	sys_disk_write_enable(0);
 3518              		.loc 1 1045 2 is_stmt 1 view .LVU996
 3519 0064 034A     		ldr	r2, .L288+4
 3520 0066 094B     		ldr	r3, .L288+28
 3521 0068 5068     		ldr	r0, [r2, #4]
 3522 006a 9847     		blx	r3
 3523              	.LVL325:
 3524 006c DBE7     		b	.L287
 3525              	.L289:
 3526 006e 00BF     		.align	2
 3527              	.L288:
 3528 0070 E1030008 		.word	134218721
 3529 0074 00200010 		.word	268443648
 3530 0078 35040008 		.word	134218805
ARM GAS  /tmp/ccKaa6YO.s 			page 96


 3531 007c 00000000 		.word	.LC13
 3532 0080 18000000 		.word	.LC14
 3533 0084 00000000 		.word	PersistentRam
 3534 0088 41040008 		.word	134218817
 3535 008c 39040008 		.word	134218809
 3536              		.cfi_endproc
 3537              	.LFE33:
 3539              		.section	.text.save_libraryfile,"ax",%progbits
 3540              		.align	1
 3541              		.p2align 2,,3
 3542              		.global	save_libraryfile
 3543              		.syntax unified
 3544              		.thumb
 3545              		.thumb_func
 3546              		.fpu fpv4-sp-d16
 3548              	save_libraryfile:
 3549              	.LFB34:
1048:src/storage.c **** 
1049:src/storage.c **** 
1050:src/storage.c **** void save_libraryfile() // just use LIBRARY_FILE - will overwrite it!
1051:src/storage.c **** {
 3550              		.loc 1 1051 1 view -0
 3551              		.cfi_startproc
 3552              		@ args = 0, pretend = 0, frame = 8
 3553              		@ frame_needed = 0, uses_anonymous_args = 0
1052:src/storage.c **** 	FRESULT f;
 3554              		.loc 1 1052 2 view .LVU998
1053:src/storage.c **** 	uint x = 0;
 3555              		.loc 1 1053 2 view .LVU999
1051:src/storage.c **** 	FRESULT f;
 3556              		.loc 1 1051 1 is_stmt 0 view .LVU1000
 3557 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3558              		.cfi_def_cfa_offset 20
 3559              		.cfi_offset 4, -20
 3560              		.cfi_offset 5, -16
 3561              		.cfi_offset 6, -12
 3562              		.cfi_offset 7, -8
 3563              		.cfi_offset 14, -4
 3564 0002 83B0     		sub	sp, sp, #12
 3565              		.cfi_def_cfa_offset 32
1054:src/storage.c **** 	sys_disk_write_enable(1);
1055:src/storage.c **** 	f = f_open( FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 3566              		.loc 1 1055 6 view .LVU1001
 3567 0004 124E     		ldr	r6, .L300
1054:src/storage.c **** 	sys_disk_write_enable(1);
 3568              		.loc 1 1054 2 view .LVU1002
 3569 0006 134D     		ldr	r5, .L300+4
1053:src/storage.c **** 	sys_disk_write_enable(1);
 3570              		.loc 1 1053 7 view .LVU1003
 3571 0008 0027     		movs	r7, #0
 3572 000a 0197     		str	r7, [sp, #4]
1054:src/storage.c **** 	sys_disk_write_enable(1);
 3573              		.loc 1 1054 2 is_stmt 1 view .LVU1004
 3574 000c 0120     		movs	r0, #1
 3575 000e A847     		blx	r5
 3576              	.LVL326:
 3577              		.loc 1 1055 2 view .LVU1005
ARM GAS  /tmp/ccKaa6YO.s 			page 97


 3578              		.loc 1 1055 6 is_stmt 0 view .LVU1006
 3579 0010 7068     		ldr	r0, [r6, #4]
 3580 0012 114B     		ldr	r3, .L300+8
 3581 0014 1149     		ldr	r1, .L300+12
 3582 0016 0B22     		movs	r2, #11
 3583 0018 9847     		blx	r3
 3584              	.LVL327:
1056:src/storage.c **** 	if ( f != FR_OK ) {
 3585              		.loc 1 1056 2 is_stmt 1 view .LVU1007
 3586              		.loc 1 1056 5 is_stmt 0 view .LVU1008
 3587 001a A0B9     		cbnz	r0, .L298
1057:src/storage.c **** 	  sys_disk_write_enable(0);
1058:src/storage.c **** 	  return;
1059:src/storage.c **** 	}
1060:src/storage.c **** 	f = f_write( FPT, &UserFlash, sizeof( UserFlash ), &x );
 3588              		.loc 1 1060 2 is_stmt 1 view .LVU1009
 3589 001c 0446     		mov	r4, r0
 3590              		.loc 1 1060 6 is_stmt 0 view .LVU1010
 3591 001e 1049     		ldr	r1, .L300+16
 3592 0020 7068     		ldr	r0, [r6, #4]
 3593              	.LVL328:
 3594              		.loc 1 1060 6 view .LVU1011
 3595 0022 104E     		ldr	r6, .L300+20
 3596 0024 01AB     		add	r3, sp, #4
 3597 0026 4FF48042 		mov	r2, #16384
 3598 002a B047     		blx	r6
 3599              	.LVL329:
1061:src/storage.c **** 	if ( f != FR_OK ) {
 3600              		.loc 1 1061 2 is_stmt 1 view .LVU1012
 3601              		.loc 1 1061 5 is_stmt 0 view .LVU1013
 3602 002c 40B9     		cbnz	r0, .L299
 3603              	.LVL330:
 3604              	.L293:
1062:src/storage.c **** 	  sys_disk_write_enable(0);
1063:src/storage.c **** 	}
1064:src/storage.c **** 	f_close( FPT );
 3605              		.loc 1 1064 2 is_stmt 1 view .LVU1014
 3606 002e 084A     		ldr	r2, .L300
 3607 0030 0D4B     		ldr	r3, .L300+24
 3608 0032 5068     		ldr	r0, [r2, #4]
 3609 0034 9847     		blx	r3
 3610              	.LVL331:
1065:src/storage.c **** 	sys_disk_write_enable(0);
 3611              		.loc 1 1065 2 view .LVU1015
 3612 0036 074B     		ldr	r3, .L300+4
 3613 0038 0020     		movs	r0, #0
 3614 003a 9847     		blx	r3
 3615              	.LVL332:
1066:src/storage.c **** }
 3616              		.loc 1 1066 1 is_stmt 0 view .LVU1016
 3617 003c 03B0     		add	sp, sp, #12
 3618              		.cfi_remember_state
 3619              		.cfi_def_cfa_offset 20
 3620              		@ sp needed
 3621 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 3622              	.LVL333:
 3623              	.L299:
ARM GAS  /tmp/ccKaa6YO.s 			page 98


 3624              		.cfi_restore_state
1062:src/storage.c **** 	  sys_disk_write_enable(0);
 3625              		.loc 1 1062 4 is_stmt 1 view .LVU1017
 3626 0040 2046     		mov	r0, r4
 3627              	.LVL334:
1062:src/storage.c **** 	  sys_disk_write_enable(0);
 3628              		.loc 1 1062 4 is_stmt 0 view .LVU1018
 3629 0042 A847     		blx	r5
 3630              	.LVL335:
 3631 0044 F3E7     		b	.L293
 3632              	.LVL336:
 3633              	.L298:
1057:src/storage.c **** 	  return;
 3634              		.loc 1 1057 4 is_stmt 1 view .LVU1019
 3635 0046 3846     		mov	r0, r7
 3636              	.LVL337:
1057:src/storage.c **** 	  return;
 3637              		.loc 1 1057 4 is_stmt 0 view .LVU1020
 3638 0048 A847     		blx	r5
 3639              	.LVL338:
1058:src/storage.c **** 	}
 3640              		.loc 1 1058 4 is_stmt 1 view .LVU1021
 3641              		.loc 1 1066 1 is_stmt 0 view .LVU1022
 3642 004a 03B0     		add	sp, sp, #12
 3643              		.cfi_def_cfa_offset 20
 3644              		@ sp needed
 3645 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 3646              	.L301:
 3647 004e 00BF     		.align	2
 3648              	.L300:
 3649 0050 00200010 		.word	268443648
 3650 0054 E1030008 		.word	134218721
 3651 0058 35040008 		.word	134218805
 3652 005c 18000000 		.word	.LC1
 3653 0060 00000000 		.word	UserFlash
 3654 0064 41040008 		.word	134218817
 3655 0068 39040008 		.word	134218809
 3656              		.cfi_endproc
 3657              	.LFE34:
 3659              		.section	.rodata.load_statefile_state.str1.4,"aMS",%progbits,1
 3660              		.align	2
 3661              	.LC15:
 3662 0000 4E6F7420 		.ascii	"Not open\000"
 3662      6F70656E 
 3662      00
 3663 0009 000000   		.align	2
 3664              	.LC16:
 3665 000c 46696C65 		.ascii	"File read\000"
 3665      20726561 
 3665      6400
 3666              		.section	.text.load_statefile_state,"ax",%progbits
 3667              		.align	1
 3668              		.p2align 2,,3
 3669              		.global	load_statefile_state
 3670              		.syntax unified
 3671              		.thumb
 3672              		.thumb_func
ARM GAS  /tmp/ccKaa6YO.s 			page 99


 3673              		.fpu fpv4-sp-d16
 3675              	load_statefile_state:
 3676              	.LVL339:
 3677              	.LFB35:
1067:src/storage.c **** 
1068:src/storage.c **** #else //DM42 false..
1069:src/storage.c **** 
1070:src/storage.c **** void save_statefile( const char *filename )
1071:src/storage.c **** {
1072:src/storage.c **** 	FILE *f;
1073:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1074:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
1075:src/storage.c **** 	}
1076:src/storage.c **** 	f = fopen( StateFile, "wb" );
1077:src/storage.c **** 	if ( f == NULL ) {
1078:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
1079:src/storage.c **** 		return;
1080:src/storage.c **** 	}
1081:src/storage.c **** 	process_cmdline_set_lift();
1082:src/storage.c **** 	init_state();
1083:src/storage.c **** 	checksum_all();
1084:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1085:src/storage.c **** 	fclose( f );
1086:src/storage.c **** #ifdef DEBUG
1087:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1088:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1089:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1090:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1091:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1092:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1093:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1094:src/storage.c **** #endif
1095:src/storage.c **** }
1096:src/storage.c **** 
1097:src/storage.c **** #endif //ifdef DM42
1098:src/storage.c **** 
1099:src/storage.c **** #ifndef DM42
1100:src/storage.c **** /*
1101:src/storage.c ****  *  Helper to expand filenames with startup directory
1102:src/storage.c ****  */
1103:src/storage.c **** #ifdef _WIN32
1104:src/storage.c **** #include <direct.h>
1105:src/storage.c **** #define getcwd _getcwd
1106:src/storage.c **** #define SEPARATOR '\\'
1107:src/storage.c **** #else
1108:src/storage.c **** #define SEPARATOR '/'
1109:src/storage.c **** #endif
1110:src/storage.c **** 
1111:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1112:src/storage.c **** {
1113:src/storage.c **** 	char *p;
1114:src/storage.c **** 	size_t l;
1115:src/storage.c **** 
1116:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1117:src/storage.c **** 		// Determine current directory on first call
1118:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1119:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
ARM GAS  /tmp/ccKaa6YO.s 			page 100


1120:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1121:src/storage.c **** 			*p = SEPARATOR;
1122:src/storage.c **** 			p[ 1 ] = '\0';
1123:src/storage.c **** 		}
1124:src/storage.c **** 	}
1125:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1126:src/storage.c **** 		// Absolute path left unchanged
1127:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1128:src/storage.c **** 	}
1129:src/storage.c **** 	else {
1130:src/storage.c **** 		// Prepend CurrentDir
1131:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
1132:src/storage.c **** 		l = strlen( buffer );
1133:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1134:src/storage.c **** 	}
1135:src/storage.c **** 	return buffer;
1136:src/storage.c **** }
1137:src/storage.c **** #endif //ifndef DM42
1138:src/storage.c **** 
1139:src/storage.c **** /*
1140:src/storage.c ****  *  Load both the RAM file and the flash emulation images
1141:src/storage.c ****  */
1142:src/storage.c **** 
1143:src/storage.c **** #ifdef DM42
1144:src/storage.c **** 
1145:src/storage.c **** void load_statefile_state (int i) {
 3678              		.loc 1 1145 35 is_stmt 1 view -0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 8
 3681              		@ frame_needed = 0, uses_anonymous_args = 0
1146:src/storage.c ****   FRESULT f;
 3682              		.loc 1 1146 3 view .LVU1024
1147:src/storage.c ****   uint x=0;
 3683              		.loc 1 1147 3 view .LVU1025
1145:src/storage.c ****   FRESULT f;
 3684              		.loc 1 1145 35 is_stmt 0 view .LVU1026
 3685 0000 30B5     		push	{r4, r5, lr}
 3686              		.cfi_def_cfa_offset 12
 3687              		.cfi_offset 4, -12
 3688              		.cfi_offset 5, -8
 3689              		.cfi_offset 14, -4
 3690 0002 83B0     		sub	sp, sp, #12
 3691              		.cfi_def_cfa_offset 24
 3692              		.loc 1 1147 8 view .LVU1027
 3693 0004 0023     		movs	r3, #0
1148:src/storage.c **** 
1149:src/storage.c ****   if (i==1) {
 3694              		.loc 1 1149 6 view .LVU1028
 3695 0006 0128     		cmp	r0, #1
1147:src/storage.c **** 
 3696              		.loc 1 1147 8 view .LVU1029
 3697 0008 0193     		str	r3, [sp, #4]
 3698              		.loc 1 1149 3 is_stmt 1 view .LVU1030
 3699              		.loc 1 1149 6 is_stmt 0 view .LVU1031
 3700 000a 1BD0     		beq	.L308
1150:src/storage.c ****     f = f_open( FPT, SAVED_STATE_FILE, FA_READ );
1151:src/storage.c ****   }
ARM GAS  /tmp/ccKaa6YO.s 			page 101


1152:src/storage.c ****   else {
1153:src/storage.c ****     f = f_open( FPT, STATE_FILE, FA_READ );
 3701              		.loc 1 1153 5 is_stmt 1 view .LVU1032
 3702              		.loc 1 1153 9 is_stmt 0 view .LVU1033
 3703 000c 114A     		ldr	r2, .L309
 3704 000e 124B     		ldr	r3, .L309+4
 3705 0010 5068     		ldr	r0, [r2, #4]
 3706              	.LVL340:
 3707              		.loc 1 1153 9 view .LVU1034
 3708 0012 1249     		ldr	r1, .L309+8
 3709 0014 0122     		movs	r2, #1
 3710 0016 9847     		blx	r3
 3711              	.LVL341:
 3712              	.L304:
1154:src/storage.c ****   }
1155:src/storage.c ****   
1156:src/storage.c ****   if ( f != FR_OK ) {
 3713              		.loc 1 1156 3 is_stmt 1 view .LVU1035
 3714              		.loc 1 1156 6 is_stmt 0 view .LVU1036
 3715 0018 20B1     		cbz	r0, .L305
1157:src/storage.c ****     DispMsg = "Not open";
 3716              		.loc 1 1157 5 is_stmt 1 view .LVU1037
 3717              		.loc 1 1157 13 is_stmt 0 view .LVU1038
 3718 001a 114B     		ldr	r3, .L309+12
 3719 001c 114A     		ldr	r2, .L309+16
 3720 001e 1A60     		str	r2, [r3]
1158:src/storage.c ****   }
1159:src/storage.c ****   else {
1160:src/storage.c ****     f = f_read( FPT, &PersistentRam, sizeof( PersistentRam ), &x );
1161:src/storage.c ****     f_close( FPT );
1162:src/storage.c ****     DispMsg = "File read";
1163:src/storage.c ****   }
1164:src/storage.c **** }
 3721              		.loc 1 1164 1 view .LVU1039
 3722 0020 03B0     		add	sp, sp, #12
 3723              		.cfi_remember_state
 3724              		.cfi_def_cfa_offset 12
 3725              		@ sp needed
 3726 0022 30BD     		pop	{r4, r5, pc}
 3727              	.L305:
 3728              		.cfi_restore_state
1160:src/storage.c ****     f_close( FPT );
 3729              		.loc 1 1160 5 is_stmt 1 view .LVU1040
1160:src/storage.c ****     f_close( FPT );
 3730              		.loc 1 1160 9 is_stmt 0 view .LVU1041
 3731 0024 0B4C     		ldr	r4, .L309
 3732 0026 1049     		ldr	r1, .L309+20
 3733 0028 104D     		ldr	r5, .L309+24
 3734 002a 6068     		ldr	r0, [r4, #4]
 3735              	.LVL342:
1160:src/storage.c ****     f_close( FPT );
 3736              		.loc 1 1160 9 view .LVU1042
 3737 002c 01AB     		add	r3, sp, #4
 3738 002e 4FF40062 		mov	r2, #2048
 3739 0032 A847     		blx	r5
 3740              	.LVL343:
1161:src/storage.c ****     DispMsg = "File read";
ARM GAS  /tmp/ccKaa6YO.s 			page 102


 3741              		.loc 1 1161 5 is_stmt 1 view .LVU1043
 3742 0034 6068     		ldr	r0, [r4, #4]
 3743 0036 0E4B     		ldr	r3, .L309+28
 3744 0038 9847     		blx	r3
 3745              	.LVL344:
1162:src/storage.c ****   }
 3746              		.loc 1 1162 5 view .LVU1044
1162:src/storage.c ****   }
 3747              		.loc 1 1162 13 is_stmt 0 view .LVU1045
 3748 003a 094B     		ldr	r3, .L309+12
 3749 003c 0D4A     		ldr	r2, .L309+32
 3750 003e 1A60     		str	r2, [r3]
 3751              		.loc 1 1164 1 view .LVU1046
 3752 0040 03B0     		add	sp, sp, #12
 3753              		.cfi_remember_state
 3754              		.cfi_def_cfa_offset 12
 3755              		@ sp needed
 3756 0042 30BD     		pop	{r4, r5, pc}
 3757              	.LVL345:
 3758              	.L308:
 3759              		.cfi_restore_state
1150:src/storage.c ****   }
 3760              		.loc 1 1150 5 is_stmt 1 view .LVU1047
1150:src/storage.c ****   }
 3761              		.loc 1 1150 9 is_stmt 0 view .LVU1048
 3762 0044 0349     		ldr	r1, .L309
 3763 0046 044B     		ldr	r3, .L309+4
 3764 0048 0246     		mov	r2, r0
 3765 004a 4868     		ldr	r0, [r1, #4]
 3766              	.LVL346:
1150:src/storage.c ****   }
 3767              		.loc 1 1150 9 view .LVU1049
 3768 004c 0A49     		ldr	r1, .L309+36
 3769 004e 9847     		blx	r3
 3770              	.LVL347:
1150:src/storage.c ****   }
 3771              		.loc 1 1150 9 view .LVU1050
 3772 0050 E2E7     		b	.L304
 3773              	.L310:
 3774 0052 00BF     		.align	2
 3775              	.L309:
 3776 0054 00200010 		.word	268443648
 3777 0058 35040008 		.word	134218805
 3778 005c 18000000 		.word	.LC14
 3779 0060 00000000 		.word	DispMsg
 3780 0064 00000000 		.word	.LC15
 3781 0068 00000000 		.word	PersistentRam
 3782 006c 3D040008 		.word	134218813
 3783 0070 39040008 		.word	134218809
 3784 0074 0C000000 		.word	.LC16
 3785 0078 00000000 		.word	.LC13
 3786              		.cfi_endproc
 3787              	.LFE35:
 3789              		.section	.text.load_statefile_backup,"ax",%progbits
 3790              		.align	1
 3791              		.p2align 2,,3
 3792              		.global	load_statefile_backup
ARM GAS  /tmp/ccKaa6YO.s 			page 103


 3793              		.syntax unified
 3794              		.thumb
 3795              		.thumb_func
 3796              		.fpu fpv4-sp-d16
 3798              	load_statefile_backup:
 3799              	.LFB36:
1165:src/storage.c **** 
1166:src/storage.c **** void load_statefile_backup () {
 3800              		.loc 1 1166 31 is_stmt 1 view -0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 2056
 3803              		@ frame_needed = 0, uses_anonymous_args = 0
1167:src/storage.c ****   FRESULT f;
 3804              		.loc 1 1167 3 view .LVU1052
1168:src/storage.c ****   uint x = 0;
 3805              		.loc 1 1168 3 view .LVU1053
1166:src/storage.c ****   FRESULT f;
 3806              		.loc 1 1166 31 is_stmt 0 view .LVU1054
 3807 0000 30B5     		push	{r4, r5, lr}
 3808              		.cfi_def_cfa_offset 12
 3809              		.cfi_offset 4, -12
 3810              		.cfi_offset 5, -8
 3811              		.cfi_offset 14, -4
1169:src/storage.c ****   char *dest = (char *) &BackupFlash;
1170:src/storage.c ****   char buffer[ PAGE_SIZE ];
1171:src/storage.c **** 
1172:src/storage.c ****   f = f_open( FPT, BACKUP_FILE, FA_READ );
 3812              		.loc 1 1172 7 view .LVU1055
 3813 0002 184C     		ldr	r4, .L316
 3814 0004 184B     		ldr	r3, .L316+4
 3815 0006 6068     		ldr	r0, [r4, #4]
 3816 0008 1849     		ldr	r1, .L316+8
1166:src/storage.c ****   FRESULT f;
 3817              		.loc 1 1166 31 view .LVU1056
 3818 000a ADF60C0D 		subw	sp, sp, #2060
 3819              		.cfi_def_cfa_offset 2072
1168:src/storage.c ****   char *dest = (char *) &BackupFlash;
 3820              		.loc 1 1168 8 view .LVU1057
 3821 000e 0022     		movs	r2, #0
 3822 0010 0192     		str	r2, [sp, #4]
1169:src/storage.c ****   char *dest = (char *) &BackupFlash;
 3823              		.loc 1 1169 3 is_stmt 1 view .LVU1058
 3824              	.LVL348:
1170:src/storage.c **** 
 3825              		.loc 1 1170 3 view .LVU1059
 3826              		.loc 1 1172 3 view .LVU1060
 3827              		.loc 1 1172 7 is_stmt 0 view .LVU1061
 3828 0012 0122     		movs	r2, #1
 3829 0014 9847     		blx	r3
 3830              	.LVL349:
1173:src/storage.c ****   if ( f != FR_OK ) {
 3831              		.loc 1 1173 3 is_stmt 1 view .LVU1062
 3832              		.loc 1 1173 6 is_stmt 0 view .LVU1063
 3833 0016 F0B9     		cbnz	r0, .L315
1174:src/storage.c ****     DispMsg = "Not open";
1175:src/storage.c ****     return;
1176:src/storage.c ****   }
ARM GAS  /tmp/ccKaa6YO.s 			page 104


1177:src/storage.c **** 
1178:src/storage.c ****   sys_flashing_init();
 3834              		.loc 1 1178 3 is_stmt 1 view .LVU1064
 3835 0018 154B     		ldr	r3, .L316+12
1179:src/storage.c **** 
1180:src/storage.c ****   f = f_read( FPT, buffer, PAGE_SIZE, &x ); // On the DM42, BackupFlash is currently one page in si
 3836              		.loc 1 1180 7 is_stmt 0 view .LVU1065
 3837 001a 164D     		ldr	r5, .L316+16
1178:src/storage.c **** 
 3838              		.loc 1 1178 3 view .LVU1066
 3839 001c 9847     		blx	r3
 3840              	.LVL350:
 3841              		.loc 1 1180 3 is_stmt 1 view .LVU1067
 3842              		.loc 1 1180 7 is_stmt 0 view .LVU1068
 3843 001e 01AB     		add	r3, sp, #4
 3844 0020 02A9     		add	r1, sp, #8
 3845 0022 4FF40062 		mov	r2, #2048
 3846 0026 6068     		ldr	r0, [r4, #4]
 3847 0028 A847     		blx	r5
 3848              	.LVL351:
1181:src/storage.c ****   sys_flash_erase_block( dest, PAGE_SIZE ); // start plus size in bytes to erase
 3849              		.loc 1 1181 3 is_stmt 1 view .LVU1069
 3850 002a 134B     		ldr	r3, .L316+20
 3851 002c 1348     		ldr	r0, .L316+24
 3852 002e 4FF40061 		mov	r1, #2048
 3853 0032 9847     		blx	r3
 3854              	.LVL352:
1182:src/storage.c ****   sys_flash_write_block( dest, (uint8_t *) buffer, PAGE_SIZE );
 3855              		.loc 1 1182 3 view .LVU1070
 3856 0034 02A9     		add	r1, sp, #8
 3857 0036 4FF40062 		mov	r2, #2048
 3858 003a 114B     		ldr	r3, .L316+28
 3859 003c 0F48     		ldr	r0, .L316+24
 3860 003e 9847     		blx	r3
 3861              	.LVL353:
1183:src/storage.c **** 
1184:src/storage.c ****   sys_flashing_finish();
 3862              		.loc 1 1184 3 view .LVU1071
 3863 0040 104B     		ldr	r3, .L316+32
 3864 0042 9847     		blx	r3
 3865              	.LVL354:
1185:src/storage.c ****   f_close( FPT );
 3866              		.loc 1 1185 3 view .LVU1072
 3867 0044 6068     		ldr	r0, [r4, #4]
 3868 0046 104B     		ldr	r3, .L316+36
 3869 0048 9847     		blx	r3
 3870              	.LVL355:
1186:src/storage.c ****   DispMsg = "File read";
 3871              		.loc 1 1186 3 view .LVU1073
 3872              		.loc 1 1186 11 is_stmt 0 view .LVU1074
 3873 004a 104B     		ldr	r3, .L316+40
 3874 004c 104A     		ldr	r2, .L316+44
 3875 004e 1A60     		str	r2, [r3]
1187:src/storage.c **** }
 3876              		.loc 1 1187 1 view .LVU1075
 3877 0050 0DF60C0D 		addw	sp, sp, #2060
 3878              		.cfi_remember_state
ARM GAS  /tmp/ccKaa6YO.s 			page 105


 3879              		.cfi_def_cfa_offset 12
 3880              		@ sp needed
 3881 0054 30BD     		pop	{r4, r5, pc}
 3882              	.LVL356:
 3883              	.L315:
 3884              		.cfi_restore_state
1174:src/storage.c ****     return;
 3885              		.loc 1 1174 5 is_stmt 1 view .LVU1076
1174:src/storage.c ****     return;
 3886              		.loc 1 1174 13 is_stmt 0 view .LVU1077
 3887 0056 0D4B     		ldr	r3, .L316+40
 3888 0058 0E4A     		ldr	r2, .L316+48
 3889 005a 1A60     		str	r2, [r3]
1175:src/storage.c ****   }
 3890              		.loc 1 1175 5 is_stmt 1 view .LVU1078
 3891              		.loc 1 1187 1 is_stmt 0 view .LVU1079
 3892 005c 0DF60C0D 		addw	sp, sp, #2060
 3893              		.cfi_def_cfa_offset 12
 3894              		@ sp needed
 3895 0060 30BD     		pop	{r4, r5, pc}
 3896              	.L317:
 3897 0062 00BF     		.align	2
 3898              	.L316:
 3899 0064 00200010 		.word	268443648
 3900 0068 35040008 		.word	134218805
 3901 006c 00000000 		.word	.LC0
 3902 0070 A1040008 		.word	134218913
 3903 0074 3D040008 		.word	134218813
 3904 0078 A9040008 		.word	134218921
 3905 007c 00000000 		.word	.LANCHOR0
 3906 0080 AD040008 		.word	134218925
 3907 0084 A5040008 		.word	134218917
 3908 0088 39040008 		.word	134218809
 3909 008c 00000000 		.word	DispMsg
 3910 0090 0C000000 		.word	.LC16
 3911 0094 00000000 		.word	.LC15
 3912              		.cfi_endproc
 3913              	.LFE36:
 3915              		.section	.text.load_statefile_library,"ax",%progbits
 3916              		.align	1
 3917              		.p2align 2,,3
 3918              		.global	load_statefile_library
 3919              		.syntax unified
 3920              		.thumb
 3921              		.thumb_func
 3922              		.fpu fpv4-sp-d16
 3924              	load_statefile_library:
 3925              	.LFB37:
1188:src/storage.c **** 
1189:src/storage.c **** void load_statefile_library () {
 3926              		.loc 1 1189 32 is_stmt 1 view -0
 3927              		.cfi_startproc
 3928              		@ args = 0, pretend = 0, frame = 2056
 3929              		@ frame_needed = 0, uses_anonymous_args = 0
1190:src/storage.c ****   FRESULT f;
 3930              		.loc 1 1190 3 view .LVU1081
1191:src/storage.c ****   uint x = 0;
ARM GAS  /tmp/ccKaa6YO.s 			page 106


 3931              		.loc 1 1191 3 view .LVU1082
1189:src/storage.c ****   FRESULT f;
 3932              		.loc 1 1189 32 is_stmt 0 view .LVU1083
 3933 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3934              		.cfi_def_cfa_offset 20
 3935              		.cfi_offset 4, -20
 3936              		.cfi_offset 5, -16
 3937              		.cfi_offset 6, -12
 3938              		.cfi_offset 7, -8
 3939              		.cfi_offset 14, -4
1192:src/storage.c ****   char *dest = (char *) &UserFlash;
1193:src/storage.c ****   char buffer[ PAGE_SIZE ];
1194:src/storage.c **** 
1195:src/storage.c ****   f = f_open( FPT, LIBRARY_FILE, FA_READ );
 3940              		.loc 1 1195 7 view .LVU1084
 3941 0002 1D4D     		ldr	r5, .L325
 3942 0004 1D4B     		ldr	r3, .L325+4
 3943 0006 6868     		ldr	r0, [r5, #4]
 3944 0008 1D49     		ldr	r1, .L325+8
1189:src/storage.c ****   FRESULT f;
 3945              		.loc 1 1189 32 view .LVU1085
 3946 000a ADF60C0D 		subw	sp, sp, #2060
 3947              		.cfi_def_cfa_offset 2080
1191:src/storage.c ****   char *dest = (char *) &UserFlash;
 3948              		.loc 1 1191 8 view .LVU1086
 3949 000e 0022     		movs	r2, #0
 3950 0010 0192     		str	r2, [sp, #4]
1192:src/storage.c ****   char *dest = (char *) &UserFlash;
 3951              		.loc 1 1192 3 is_stmt 1 view .LVU1087
 3952              	.LVL357:
1193:src/storage.c **** 
 3953              		.loc 1 1193 3 view .LVU1088
 3954              		.loc 1 1195 3 view .LVU1089
 3955              		.loc 1 1195 7 is_stmt 0 view .LVU1090
 3956 0012 0122     		movs	r2, #1
 3957 0014 9847     		blx	r3
 3958              	.LVL358:
1196:src/storage.c ****   if ( f != FR_OK ) {
 3959              		.loc 1 1196 3 is_stmt 1 view .LVU1091
 3960              		.loc 1 1196 6 is_stmt 0 view .LVU1092
 3961 0016 0028     		cmp	r0, #0
 3962 0018 27D1     		bne	.L324
1197:src/storage.c ****     DispMsg = "Not open";
1198:src/storage.c ****     return;
1199:src/storage.c ****   }
1200:src/storage.c **** 
1201:src/storage.c ****   sys_flashing_init();
 3963              		.loc 1 1201 3 is_stmt 1 view .LVU1093
 3964 001a 1A4B     		ldr	r3, .L325+12
1192:src/storage.c ****   char buffer[ PAGE_SIZE ];
 3965              		.loc 1 1192 9 is_stmt 0 view .LVU1094
 3966 001c 1A4C     		ldr	r4, .L325+16
1202:src/storage.c **** 
1203:src/storage.c ****   do {
1204:src/storage.c ****     f = f_read( FPT, buffer, PAGE_SIZE, &x );
 3967              		.loc 1 1204 9 view .LVU1095
 3968 001e 1B4F     		ldr	r7, .L325+20
ARM GAS  /tmp/ccKaa6YO.s 			page 107


1205:src/storage.c ****     sys_flash_erase_block( dest, PAGE_SIZE ); // start plus size in bytes to erase
 3969              		.loc 1 1205 5 view .LVU1096
 3970 0020 1B4E     		ldr	r6, .L325+24
1201:src/storage.c **** 
 3971              		.loc 1 1201 3 view .LVU1097
 3972 0022 9847     		blx	r3
 3973              	.LVL359:
1201:src/storage.c **** 
 3974              		.loc 1 1201 3 view .LVU1098
 3975 0024 6868     		ldr	r0, [r5, #4]
 3976              	.LVL360:
 3977              	.L321:
1203:src/storage.c ****     f = f_read( FPT, buffer, PAGE_SIZE, &x );
 3978              		.loc 1 1203 3 is_stmt 1 discriminator 1 view .LVU1099
1204:src/storage.c ****     sys_flash_erase_block( dest, PAGE_SIZE ); // start plus size in bytes to erase
 3979              		.loc 1 1204 5 discriminator 1 view .LVU1100
1206:src/storage.c ****     sys_flash_write_block( dest, (uint8_t *) buffer, PAGE_SIZE );
1207:src/storage.c ****     dest += PAGE_SIZE;
1208:src/storage.c ****   } while ( !(f_eof(FPT)) );
 3980              		.loc 1 1208 15 is_stmt 0 discriminator 1 view .LVU1101
 3981 0026 144D     		ldr	r5, .L325
1204:src/storage.c ****     sys_flash_erase_block( dest, PAGE_SIZE ); // start plus size in bytes to erase
 3982              		.loc 1 1204 9 discriminator 1 view .LVU1102
 3983 0028 01AB     		add	r3, sp, #4
 3984 002a 4FF40062 		mov	r2, #2048
 3985 002e 02A9     		add	r1, sp, #8
 3986 0030 B847     		blx	r7
 3987              	.LVL361:
1205:src/storage.c ****     sys_flash_write_block( dest, (uint8_t *) buffer, PAGE_SIZE );
 3988              		.loc 1 1205 5 is_stmt 1 discriminator 1 view .LVU1103
 3989 0032 4FF40061 		mov	r1, #2048
 3990 0036 2046     		mov	r0, r4
 3991 0038 B047     		blx	r6
 3992              	.LVL362:
1206:src/storage.c ****     sys_flash_write_block( dest, (uint8_t *) buffer, PAGE_SIZE );
 3993              		.loc 1 1206 5 discriminator 1 view .LVU1104
 3994 003a 164B     		ldr	r3, .L325+28
 3995 003c 4FF40062 		mov	r2, #2048
 3996 0040 2046     		mov	r0, r4
 3997 0042 02A9     		add	r1, sp, #8
 3998 0044 9847     		blx	r3
 3999              	.LVL363:
1207:src/storage.c ****   } while ( !(f_eof(FPT)) );
 4000              		.loc 1 1207 5 discriminator 1 view .LVU1105
 4001              		.loc 1 1208 15 is_stmt 0 discriminator 1 view .LVU1106
 4002 0046 6868     		ldr	r0, [r5, #4]
 4003              		.loc 1 1208 3 discriminator 1 view .LVU1107
 4004 0048 8269     		ldr	r2, [r0, #24]
 4005 004a C368     		ldr	r3, [r0, #12]
 4006 004c 9A42     		cmp	r2, r3
1207:src/storage.c ****   } while ( !(f_eof(FPT)) );
 4007              		.loc 1 1207 10 discriminator 1 view .LVU1108
 4008 004e 04F50064 		add	r4, r4, #2048
 4009              	.LVL364:
 4010              		.loc 1 1208 11 is_stmt 1 discriminator 1 view .LVU1109
 4011              		.loc 1 1208 3 is_stmt 0 discriminator 1 view .LVU1110
 4012 0052 E8D1     		bne	.L321
ARM GAS  /tmp/ccKaa6YO.s 			page 108


1209:src/storage.c **** 
1210:src/storage.c ****   sys_flashing_finish();
 4013              		.loc 1 1210 3 is_stmt 1 view .LVU1111
 4014 0054 104B     		ldr	r3, .L325+32
 4015 0056 9847     		blx	r3
 4016              	.LVL365:
1211:src/storage.c ****   f_close( FPT );
 4017              		.loc 1 1211 3 view .LVU1112
 4018 0058 6868     		ldr	r0, [r5, #4]
 4019 005a 104B     		ldr	r3, .L325+36
 4020 005c 9847     		blx	r3
 4021              	.LVL366:
1212:src/storage.c ****   DispMsg = "File read";
 4022              		.loc 1 1212 3 view .LVU1113
 4023              		.loc 1 1212 11 is_stmt 0 view .LVU1114
 4024 005e 104B     		ldr	r3, .L325+40
 4025 0060 104A     		ldr	r2, .L325+44
 4026 0062 1A60     		str	r2, [r3]
1213:src/storage.c ****   
1214:src/storage.c ****   //  init_library();
1215:src/storage.c **** }
 4027              		.loc 1 1215 1 view .LVU1115
 4028 0064 0DF60C0D 		addw	sp, sp, #2060
 4029              		.cfi_remember_state
 4030              		.cfi_def_cfa_offset 20
 4031              		@ sp needed
 4032 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 4033              	.LVL367:
 4034              	.L324:
 4035              		.cfi_restore_state
1197:src/storage.c ****     return;
 4036              		.loc 1 1197 5 is_stmt 1 view .LVU1116
1197:src/storage.c ****     return;
 4037              		.loc 1 1197 13 is_stmt 0 view .LVU1117
 4038 006a 0D4B     		ldr	r3, .L325+40
 4039 006c 0E4A     		ldr	r2, .L325+48
 4040 006e 1A60     		str	r2, [r3]
1198:src/storage.c ****   }
 4041              		.loc 1 1198 5 is_stmt 1 view .LVU1118
 4042              		.loc 1 1215 1 is_stmt 0 view .LVU1119
 4043 0070 0DF60C0D 		addw	sp, sp, #2060
 4044              		.cfi_def_cfa_offset 20
 4045              		@ sp needed
 4046 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 4047              	.L326:
 4048 0076 00BF     		.align	2
 4049              	.L325:
 4050 0078 00200010 		.word	268443648
 4051 007c 35040008 		.word	134218805
 4052 0080 18000000 		.word	.LC1
 4053 0084 A1040008 		.word	134218913
 4054 0088 00000000 		.word	UserFlash
 4055 008c 3D040008 		.word	134218813
 4056 0090 A9040008 		.word	134218921
 4057 0094 AD040008 		.word	134218925
 4058 0098 A5040008 		.word	134218917
 4059 009c 39040008 		.word	134218809
ARM GAS  /tmp/ccKaa6YO.s 			page 109


 4060 00a0 00000000 		.word	DispMsg
 4061 00a4 0C000000 		.word	.LC16
 4062 00a8 00000000 		.word	.LC15
 4063              		.cfi_endproc
 4064              	.LFE37:
 4066              		.section	.text.load_statefile,"ax",%progbits
 4067              		.align	1
 4068              		.p2align 2,,3
 4069              		.global	load_statefile
 4070              		.syntax unified
 4071              		.thumb
 4072              		.thumb_func
 4073              		.fpu fpv4-sp-d16
 4075              	load_statefile:
 4076              	.LFB38:
1216:src/storage.c **** 
1217:src/storage.c **** void load_statefile() //just use wp34s.dat
1218:src/storage.c **** {
 4077              		.loc 1 1218 1 is_stmt 1 view -0
 4078              		.cfi_startproc
 4079              		@ args = 0, pretend = 0, frame = 0
 4080              		@ frame_needed = 0, uses_anonymous_args = 0
1219:src/storage.c ****   load_statefile_state(1);
 4081              		.loc 1 1219 3 view .LVU1121
1218:src/storage.c ****   load_statefile_state(1);
 4082              		.loc 1 1218 1 is_stmt 0 view .LVU1122
 4083 0000 08B5     		push	{r3, lr}
 4084              		.cfi_def_cfa_offset 8
 4085              		.cfi_offset 3, -8
 4086              		.cfi_offset 14, -4
 4087              		.loc 1 1219 3 view .LVU1123
 4088 0002 0120     		movs	r0, #1
 4089 0004 FFF7FEFF 		bl	load_statefile_state
 4090              	.LVL368:
1220:src/storage.c ****   load_statefile_backup();
 4091              		.loc 1 1220 3 is_stmt 1 view .LVU1124
 4092 0008 FFF7FEFF 		bl	load_statefile_backup
 4093              	.LVL369:
1221:src/storage.c ****   load_statefile_library();
 4094              		.loc 1 1221 3 view .LVU1125
1222:src/storage.c **** }
 4095              		.loc 1 1222 1 is_stmt 0 view .LVU1126
 4096 000c BDE80840 		pop	{r3, lr}
 4097              		.cfi_restore 14
 4098              		.cfi_restore 3
 4099              		.cfi_def_cfa_offset 0
1221:src/storage.c ****   load_statefile_library();
 4100              		.loc 1 1221 3 view .LVU1127
 4101 0010 FFF7FEBF 		b	load_statefile_library
 4102              	.LVL370:
 4103              		.cfi_endproc
 4104              	.LFE38:
 4106              		.global	BackupFlash
 4107              		.global	UserFlash
 4108              		.comm	XromA2D,64,4
 4109              		.comm	XromLocal,464,4
 4110              		.comm	XromParams,16,4
ARM GAS  /tmp/ccKaa6YO.s 			page 110


 4111              		.comm	StateWhileOn,52,4
 4112              		.comm	PersistentRam,2048,4
 4113              		.section	.storage,"aw"
 4114              		.align	2
 4115              		.set	.LANCHOR0,. + 0
 4118              	BackupFlash:
 4119 0000 00000000 		.space	2048
 4119      00000000 
 4119      00000000 
 4119      00000000 
 4119      00000000 
 4122              	UserFlash:
 4123 0800 00000000 		.space	16384
 4123      00000000 
 4123      00000000 
 4123      00000000 
 4123      00000000 
 4124              		.text
 4125              	.Letext0:
 4126              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4127              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4128              		.file 4 "/usr/include/newlib/sys/_types.h"
 4129              		.file 5 "/usr/include/newlib/sys/reent.h"
 4130              		.file 6 "/usr/include/newlib/sys/lock.h"
 4131              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 4132              		.file 8 "/usr/include/newlib/sys/types.h"
 4133              		.file 9 "/usr/include/newlib/stdlib.h"
 4134              		.file 10 "dmcp/ff_ifc.h"
 4135              		.file 11 "dmcp/dmcp.h"
 4136              		.file 12 "src/decNumber/decContext.h"
 4137              		.file 13 "src/decNumber/decNumber.h"
 4138              		.file 14 "src/decNumber/decimal64.h"
 4139              		.file 15 "src/decNumber/decimal128.h"
 4140              		.file 16 "src/xeq.h"
 4141              		.file 17 "src/data.h"
 4142              		.file 18 "src/storage.h"
 4143              		.file 19 "src/display.h"
 4144              		.file 20 "src/stats.h"
 4145              		.file 21 "src/alpha.h"
ARM GAS  /tmp/ccKaa6YO.s 			page 111


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/ccKaa6YO.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/ccKaa6YO.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/ccKaa6YO.s:174    .text.check_delete_prog:0000000000000000 $t
     /tmp/ccKaa6YO.s:181    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/ccKaa6YO.s:231    .text.check_delete_prog:0000000000000028 $d
                            *COM*:0000000000000800 PersistentRam
     /tmp/ccKaa6YO.s:236    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:258    .text.program_flash:0000000000000000 $t
     /tmp/ccKaa6YO.s:265    .text.program_flash:0000000000000000 program_flash
     /tmp/ccKaa6YO.s:573    .text.program_flash:0000000000000110 $d
     /tmp/ccKaa6YO.s:4122   .storage:0000000000000800 UserFlash
     /tmp/ccKaa6YO.s:598    .text.checksum_region.constprop.0:0000000000000000 $t
     /tmp/ccKaa6YO.s:605    .text.checksum_region.constprop.0:0000000000000000 checksum_region.constprop.0
     /tmp/ccKaa6YO.s:654    .text.checksum_region.constprop.0:0000000000000028 $d
     /tmp/ccKaa6YO.s:659    .text.flash_append:0000000000000000 $t
     /tmp/ccKaa6YO.s:666    .text.flash_append:0000000000000000 flash_append
     /tmp/ccKaa6YO.s:833    .text.flash_append:000000000000009c $d
     /tmp/ccKaa6YO.s:840    .text.load_program_file:0000000000000000 $t
     /tmp/ccKaa6YO.s:848    .text.load_program_file:0000000000000000 load_program_file
     /tmp/ccKaa6YO.s:977    .text.load_program_file:0000000000000074 $d
     /tmp/ccKaa6YO.s:986    .text.crc16:0000000000000000 $t
     /tmp/ccKaa6YO.s:994    .text.crc16:0000000000000000 crc16
     /tmp/ccKaa6YO.s:1073   .text.checksum_program:0000000000000000 $t
     /tmp/ccKaa6YO.s:1081   .text.checksum_program:0000000000000000 checksum_program
     /tmp/ccKaa6YO.s:1192   .text.checksum_program:0000000000000054 $d
     /tmp/ccKaa6YO.s:1197   .text.checksum_ram:0000000000000000 $t
     /tmp/ccKaa6YO.s:1205   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/ccKaa6YO.s:1223   .text.checksum_ram:0000000000000010 $d
     /tmp/ccKaa6YO.s:1228   .text.checksum_backup:0000000000000000 $t
     /tmp/ccKaa6YO.s:1236   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/ccKaa6YO.s:1360   .text.checksum_backup:0000000000000054 $d
     /tmp/ccKaa6YO.s:1365   .text.clpall:0000000000000000 $t
     /tmp/ccKaa6YO.s:1373   .text.clpall:0000000000000000 clpall
     /tmp/ccKaa6YO.s:1411   .text.clpall:0000000000000014 $d
     /tmp/ccKaa6YO.s:1416   .text.clrall:0000000000000000 $t
     /tmp/ccKaa6YO.s:1424   .text.clrall:0000000000000000 clrall
     /tmp/ccKaa6YO.s:1508   .text.clrall:0000000000000048 $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/ccKaa6YO.s:1515   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:1519   .text.reset:0000000000000000 $t
     /tmp/ccKaa6YO.s:1527   .text.reset:0000000000000000 reset
     /tmp/ccKaa6YO.s:1570   .text.reset:0000000000000030 $d
     /tmp/ccKaa6YO.s:1577   .text.stoprog:0000000000000000 $t
     /tmp/ccKaa6YO.s:1585   .text.stoprog:0000000000000000 stoprog
     /tmp/ccKaa6YO.s:1803   .text.stoprog:00000000000000dc $d
     /tmp/ccKaa6YO.s:1810   .text.delprog:0000000000000000 $t
     /tmp/ccKaa6YO.s:1818   .text.delprog:0000000000000000 delprog
     /tmp/ccKaa6YO.s:1934   .text.delprog:000000000000006c $d
     /tmp/ccKaa6YO.s:1939   .text.append_program:0000000000000000 $t
     /tmp/ccKaa6YO.s:1947   .text.append_program:0000000000000000 append_program
     /tmp/ccKaa6YO.s:2167   .text.append_program:00000000000000b8 $d
     /tmp/ccKaa6YO.s:2176   .text.init_library:0000000000000000 $t
     /tmp/ccKaa6YO.s:2184   .text.init_library:0000000000000000 init_library
     /tmp/ccKaa6YO.s:2243   .text.init_library:0000000000000034 $d
     /tmp/ccKaa6YO.s:2248   .text.flash_remove:0000000000000000 $t
ARM GAS  /tmp/ccKaa6YO.s 			page 112


     /tmp/ccKaa6YO.s:2256   .text.flash_remove:0000000000000000 flash_remove
     /tmp/ccKaa6YO.s:2302   .text.flash_remove:0000000000000020 $d
     /tmp/ccKaa6YO.s:2307   .text.clrprog:0000000000000000 $t
     /tmp/ccKaa6YO.s:2315   .text.clrprog:0000000000000000 clrprog
     /tmp/ccKaa6YO.s:2440   .text.clrprog:0000000000000088 $d
     /tmp/ccKaa6YO.s:2445   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:2452   .text.flash_backup:0000000000000000 $t
     /tmp/ccKaa6YO.s:2460   .text.flash_backup:0000000000000000 flash_backup
     /tmp/ccKaa6YO.s:2540   .text.flash_backup:0000000000000048 $d
     /tmp/ccKaa6YO.s:2549   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:2553   .text.flash_restore:0000000000000000 $t
     /tmp/ccKaa6YO.s:2561   .text.flash_restore:0000000000000000 flash_restore
     /tmp/ccKaa6YO.s:2618   .text.flash_restore:0000000000000030 $d
     /tmp/ccKaa6YO.s:2626   .text.load_program:0000000000000000 $t
     /tmp/ccKaa6YO.s:2634   .text.load_program:0000000000000000 load_program
     /tmp/ccKaa6YO.s:2744   .text.load_program:0000000000000038 $d
     /tmp/ccKaa6YO.s:2750   .text.load_registers:0000000000000000 $t
     /tmp/ccKaa6YO.s:2758   .text.load_registers:0000000000000000 load_registers
     /tmp/ccKaa6YO.s:2850   .text.load_registers:0000000000000048 $d
     /tmp/ccKaa6YO.s:2856   .text.load_sigma:0000000000000000 $t
     /tmp/ccKaa6YO.s:2864   .text.load_sigma:0000000000000000 load_sigma
     /tmp/ccKaa6YO.s:2934   .text.load_sigma:0000000000000040 $d
     /tmp/ccKaa6YO.s:2939   .text.load_state:0000000000000000 $t
     /tmp/ccKaa6YO.s:2947   .text.load_state:0000000000000000 load_state
     /tmp/ccKaa6YO.s:3008   .text.load_state:0000000000000030 $d
     /tmp/ccKaa6YO.s:3014   .text.store_program:0000000000000000 $t
     /tmp/ccKaa6YO.s:3022   .text.store_program:0000000000000000 store_program
     /tmp/ccKaa6YO.s:3241   .text.store_program:00000000000000c0 $d
     /tmp/ccKaa6YO.s:3248   .text.recall_program:0000000000000000 $t
     /tmp/ccKaa6YO.s:3256   .text.recall_program:0000000000000000 recall_program
     /tmp/ccKaa6YO.s:3315   .text.recall_program:0000000000000038 $d
     /tmp/ccKaa6YO.s:3320   .rodata.import_program.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:3327   .text.import_program:0000000000000000 $t
     /tmp/ccKaa6YO.s:3335   .text.import_program:0000000000000000 import_program
     /tmp/ccKaa6YO.s:3375   .text.import_program:0000000000000024 $d
     /tmp/ccKaa6YO.s:3384   .rodata.save_statefile.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:3391   .text.save_statefile:0000000000000000 $t
     /tmp/ccKaa6YO.s:3399   .text.save_statefile:0000000000000000 save_statefile
     /tmp/ccKaa6YO.s:3528   .text.save_statefile:0000000000000070 $d
     /tmp/ccKaa6YO.s:3540   .text.save_libraryfile:0000000000000000 $t
     /tmp/ccKaa6YO.s:3548   .text.save_libraryfile:0000000000000000 save_libraryfile
     /tmp/ccKaa6YO.s:3649   .text.save_libraryfile:0000000000000050 $d
     /tmp/ccKaa6YO.s:3660   .rodata.load_statefile_state.str1.4:0000000000000000 $d
     /tmp/ccKaa6YO.s:3667   .text.load_statefile_state:0000000000000000 $t
     /tmp/ccKaa6YO.s:3675   .text.load_statefile_state:0000000000000000 load_statefile_state
     /tmp/ccKaa6YO.s:3776   .text.load_statefile_state:0000000000000054 $d
     /tmp/ccKaa6YO.s:3790   .text.load_statefile_backup:0000000000000000 $t
     /tmp/ccKaa6YO.s:3798   .text.load_statefile_backup:0000000000000000 load_statefile_backup
     /tmp/ccKaa6YO.s:3899   .text.load_statefile_backup:0000000000000064 $d
     /tmp/ccKaa6YO.s:3916   .text.load_statefile_library:0000000000000000 $t
     /tmp/ccKaa6YO.s:3924   .text.load_statefile_library:0000000000000000 load_statefile_library
     /tmp/ccKaa6YO.s:4050   .text.load_statefile_library:0000000000000078 $d
     /tmp/ccKaa6YO.s:4067   .text.load_statefile:0000000000000000 $t
     /tmp/ccKaa6YO.s:4075   .text.load_statefile:0000000000000000 load_statefile
     /tmp/ccKaa6YO.s:4118   .storage:0000000000000000 BackupFlash
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
ARM GAS  /tmp/ccKaa6YO.s 			page 113


                            *COM*:0000000000000010 XromParams
     /tmp/ccKaa6YO.s:4114   .storage:0000000000000000 $d

UNDEFINED SYMBOLS
getprog
report_warn
report_err
DispMsg
xcopy
print_debug
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
find_opcode_from
display_current_menu

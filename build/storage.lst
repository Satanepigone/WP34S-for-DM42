ARM GAS  /tmp/ccoue2SN.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** 
  24:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  25:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  26:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  27:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  28:src/storage.c **** 
  29:src/storage.c **** #ifndef NULL
ARM GAS  /tmp/ccoue2SN.s 			page 2


  30:src/storage.c **** #define NULL 0
  31:src/storage.c **** #endif
  32:src/storage.c **** 
  33:src/storage.c **** #else // not realbuild
  34:src/storage.c **** 
  35:src/storage.c **** // Emulator definitions
  36:src/storage.c **** #include <stdio.h>
  37:src/storage.c **** #include <stdlib.h>
  38:src/storage.c **** #include <stddef.h>
  39:src/storage.c **** #include <string.h>
  40:src/storage.c **** #include <stdarg.h>
  41:src/storage.c **** 
  42:src/storage.c **** #ifdef DM42
  43:src/storage.c **** #include "dmcp.h"
  44:src/storage.c **** #endif
  45:src/storage.c **** 
  46:src/storage.c **** #ifndef DM42
  47:src/storage.c **** 
  48:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  49:src/storage.c **** #include <errno.h>
  50:src/storage.c **** #include <stdlib.h>
  51:src/storage.c **** #include <unistd.h>
  52:src/storage.c **** #endif
  53:src/storage.c **** 
  54:src/storage.c **** #endif
  55:src/storage.c **** 
  56:src/storage.c **** #define PERSISTENT_RAM
  57:src/storage.c **** #define SLCDCMEM
  58:src/storage.c **** #define VOLATILE_RAM
  59:src/storage.c **** #define BACKUP_FLASH
  60:src/storage.c **** 
  61:src/storage.c **** #ifdef DM42
  62:src/storage.c **** 
  63:src/storage.c **** #define STATE_FILE "wp34s/wp34s.dat"
  64:src/storage.c **** #define BACKUP_FILE "wp34s/wp34s-backup.dat"
  65:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  66:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  67:src/storage.c **** 
  68:src/storage.c **** #else
  69:src/storage.c **** 
  70:src/storage.c **** #define STATE_FILE "wp34s.dat"
  71:src/storage.c **** #define BACKUP_FILE "wp34s-backup.dat"
  72:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
  73:src/storage.c **** 
  74:src/storage.c **** #endif
  75:src/storage.c **** #endif
  76:src/storage.c **** 
  77:src/storage.c **** #define DM42SAFE
  78:src/storage.c **** #include "xeq.h"
  79:src/storage.c **** #include "storage.h"
  80:src/storage.c **** #include "display.h"
  81:src/storage.c **** #include "stats.h"
  82:src/storage.c **** #include "alpha.h"
  83:src/storage.c **** #undef DM42SAFE
  84:src/storage.c **** 
  85:src/storage.c **** #ifdef DM42
  86:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
ARM GAS  /tmp/ccoue2SN.s 			page 3


  87:src/storage.c **** #else
  88:src/storage.c **** #define PAGE_SIZE	 256
  89:src/storage.c **** #endif
  90:src/storage.c **** 
  91:src/storage.c **** /*
  92:src/storage.c ****  *  Setup the persistent RAM
  93:src/storage.c ****  */
  94:src/storage.c **** #ifdef DM42
  95:src/storage.c **** 
  96:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
  97:src/storage.c **** FLASH_REGION *library_ram;
  98:src/storage.c **** 
  99:src/storage.c **** void init_mem () { // called at start of program_main in console.c
 100:src/storage.c ****   char *v;
 101:src/storage.c **** 
 102:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
 103:src/storage.c ****   if (v == NULL) {
 104:src/storage.c ****     perror("calloc failed");
 105:src/storage.c ****     return;
 106:src/storage.c ****   }
 107:src/storage.c ****   main_ram = (TPersistentRam *) v;
 108:src/storage.c ****   v += RAM_SIZE;
 109:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 110:src/storage.c ****   v += RAM_SIZE;
 111:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 112:src/storage.c **** }
 113:src/storage.c **** 
 114:src/storage.c **** #else
 115:src/storage.c **** 
 116:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
 117:src/storage.c **** 
 118:src/storage.c **** #endif
 119:src/storage.c **** 
 120:src/storage.c **** /*
 121:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 122:src/storage.c ****  */
 123:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 124:src/storage.c **** 
 125:src/storage.c **** /*
 126:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 127:src/storage.c ****  *  It replaces the local registers and flags if active.
 128:src/storage.c ****  */
 129:src/storage.c **** TXromParams XromParams;
 130:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 131:src/storage.c **** 
 132:src/storage.c **** /* Private space for four registers temporarily
 133:src/storage.c ****  */
 134:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 135:src/storage.c **** 
 136:src/storage.c **** /*
 137:src/storage.c ****  *  The backup flash area:
 138:src/storage.c ****  *  2 KB for storage of programs and registers
 139:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 140:src/storage.c ****  */
 141:src/storage.c **** #if !defined(REALBUILD)
 142:src/storage.c **** /*
 143:src/storage.c ****  *  We need to define the Library space here.
ARM GAS  /tmp/ccoue2SN.s 			page 4


 144:src/storage.c ****  *  On the device the linker takes care of this.
 145:src/storage.c ****  */
 146:src/storage.c **** #ifdef DM42 // has already been done by init_mem above
 147:src/storage.c **** #else
 148:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 149:src/storage.c **** FLASH_REGION UserFlash;
 150:src/storage.c **** #endif
 151:src/storage.c **** #endif
 152:src/storage.c **** 
 153:src/storage.c **** /*
 154:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 155:src/storage.c ****  */
 156:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 157:src/storage.c **** {
 158:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 159:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 160:src/storage.c **** 	unsigned int i;
 161:src/storage.c **** 
 162:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 163:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 164:src/storage.c **** 		crc ^= *d++;
 165:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 166:src/storage.c **** 		crc ^= crc << 12;
 167:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 168:src/storage.c **** 	}
 169:src/storage.c **** 	return crc;
 170:src/storage.c **** }
 171:src/storage.c **** 
 172:src/storage.c **** 
 173:src/storage.c **** /*
 174:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 175:src/storage.c ****  *  Returns non zero value if failure
 176:src/storage.c ****  */
 177:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 178:src/storage.c **** {
  30              		.loc 1 178 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 179:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 179 2 view .LVU1
 180:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 180 2 view .LVU2
  37              	.LBB36:
  38              	.LBI36:
 156:src/storage.c **** {
  39              		.loc 1 156 20 view .LVU3
  40              	.LBB37:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 158 2 view .LVU4
 159:src/storage.c **** 	unsigned int i;
  42              		.loc 1 159 2 view .LVU5
 160:src/storage.c **** 
  43              		.loc 1 160 2 view .LVU6
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 162 2 view .LVU7
ARM GAS  /tmp/ccoue2SN.s 			page 5


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 162 15 view .LVU8
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 162 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE37:
  49              	.LBE36:
 178:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 178 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB40:
  57              	.LBB38:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 158 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 163:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 163 3 is_stmt 1 view .LVU12
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 164 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 164 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 164 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 164 3 is_stmt 1 view .LVU16
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 164 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 165:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 165 3 is_stmt 1 view .LVU18
 165:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 165 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 166 3 is_stmt 1 view .LVU20
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 166 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 167:src/storage.c **** 	}
  85              		.loc 1 167 3 is_stmt 1 view .LVU22
 167:src/storage.c **** 	}
ARM GAS  /tmp/ccoue2SN.s 			page 6


  86              		.loc 1 167 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
  89              		.loc 1 167 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 162 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 167:src/storage.c **** 	}
  93              		.loc 1 167 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 162 27 is_stmt 1 view .LVU27
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 162 15 view .LVU28
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 162 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 169:src/storage.c **** }
 100              		.loc 1 169 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 169:src/storage.c **** }
 102              		.loc 1 169 2 is_stmt 0 view .LVU31
 103              	.LBE38:
 104              	.LBE40:
 181:src/storage.c **** 	
 182:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 182 2 is_stmt 1 view .LVU32
 183:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 183 3 view .LVU33
 184:src/storage.c **** 	}
 185:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 185 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 183:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 183 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 185 2 is_stmt 1 view .LVU36
 112              		.loc 1 185 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 185 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 186:src/storage.c **** }
 119              		.loc 1 186 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
ARM GAS  /tmp/ccoue2SN.s 			page 7


 185:src/storage.c **** }
 128              		.loc 1 185 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 186 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB41:
 139              	.LBB39:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 158 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 169:src/storage.c **** }
 143              		.loc 1 169 2 is_stmt 1 view .LVU43
 169:src/storage.c **** }
 144              		.loc 1 169 2 is_stmt 0 view .LVU44
 145              	.LBE39:
 146              	.LBE41:
 182:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 182 2 is_stmt 1 view .LVU45
 183:src/storage.c **** 	}
 148              		.loc 1 183 3 view .LVU46
 185:src/storage.c **** }
 149              		.loc 1 185 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 183:src/storage.c **** 	}
 151              		.loc 1 183 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 185:src/storage.c **** }
 153              		.loc 1 185 2 is_stmt 1 view .LVU49
 185:src/storage.c **** }
 154              		.loc 1 185 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 185:src/storage.c **** }
 158              		.loc 1 185 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 185:src/storage.c **** }
 165              		.loc 1 185 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 186 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
ARM GAS  /tmp/ccoue2SN.s 			page 8


 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 187:src/storage.c **** 
 188:src/storage.c **** 
 189:src/storage.c **** /*
 190:src/storage.c ****  *  Checksum the current program.
 191:src/storage.c ****  */
 192:src/storage.c **** short unsigned int checksum_program( void )
 193:src/storage.c **** {
 194:src/storage.c **** 	update_program_bounds( 1 );
 195:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 196:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 197:src/storage.c **** }
 198:src/storage.c **** 
 199:src/storage.c **** 
 200:src/storage.c **** /*
 201:src/storage.c ****  *  Checksum the persistent RAM area
 202:src/storage.c ****  *  Returns non zero value if failure
 203:src/storage.c ****  */
 204:src/storage.c **** int checksum_ram( void )
 205:src/storage.c **** {
 206:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 207:src/storage.c **** 			      Crc, &Crc );
 208:src/storage.c **** }
 209:src/storage.c **** 
 210:src/storage.c **** 
 211:src/storage.c **** /*
 212:src/storage.c ****  *  Checksum the backup flash region
 213:src/storage.c ****  *  Returns non zero value if failure
 214:src/storage.c ****  */
 215:src/storage.c **** int checksum_backup( void )
 216:src/storage.c **** {
 217:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 218:src/storage.c **** 		              BackupFlash._crc, NULL );
 219:src/storage.c **** }
 220:src/storage.c **** 
 221:src/storage.c **** 
 222:src/storage.c **** /*
 223:src/storage.c ****  *  Checksum a flash region
 224:src/storage.c ****  *  Returns non zero value if failure
 225:src/storage.c ****  */
 226:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 227:src/storage.c **** {
 184              		.loc 1 227 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 228:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 228 2 view .LVU55
 189              		.loc 1 228 25 is_stmt 0 view .LVU56
ARM GAS  /tmp/ccoue2SN.s 			page 9


 190 0000 4B88     		ldrh	r3, [r1, #2]
 229:src/storage.c **** 	
 230:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 230 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 230 2 is_stmt 1 view .LVU58
 195              		.loc 1 230 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 231:src/storage.c **** }
 200              		.loc 1 231 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 227:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 227 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 230:src/storage.c **** }
 210              		.loc 1 230 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 230:src/storage.c **** }
 213              		.loc 1 230 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 230:src/storage.c **** }
 216              		.loc 1 230 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 230:src/storage.c **** }
 219              		.loc 1 230 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 230:src/storage.c **** }
 222              		.loc 1 230 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 231 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
 232              		.align	1
 233              		.p2align 2,,3
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
ARM GAS  /tmp/ccoue2SN.s 			page 10


 240              	.LVL23:
 241              	.LFB12:
 232:src/storage.c **** 
 233:src/storage.c **** 
 234:src/storage.c **** /*
 235:src/storage.c ****  *  Helper to store final END in empty program space
 236:src/storage.c ****  */
 237:src/storage.c **** static void stoend( void )
 238:src/storage.c **** {
 239:src/storage.c **** 	ProgSize = 1;
 240:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 241:src/storage.c **** }
 242:src/storage.c **** 
 243:src/storage.c **** 
 244:src/storage.c **** /*
 245:src/storage.c ****  *  Clear the program space
 246:src/storage.c ****  */
 247:src/storage.c **** void clpall( void )
 248:src/storage.c **** {
 249:src/storage.c **** 	clrretstk_pc();
 250:src/storage.c **** 	stoend();
 251:src/storage.c **** }
 252:src/storage.c **** 
 253:src/storage.c **** 
 254:src/storage.c **** /*
 255:src/storage.c ****  *  Sanity checks for program (step) deletion
 256:src/storage.c ****  */
 257:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 258:src/storage.c **** {
 242              		.loc 1 258 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 259:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 259 2 view .LVU69
 247              		.loc 1 259 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 258:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 258 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 259 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 259 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 259 20 discriminator 1 view .LVU74
 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
 263              	.LVL24:
 264              	.L29:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 261:src/storage.c **** 	}
 262:src/storage.c **** 	else {
ARM GAS  /tmp/ccoue2SN.s 			page 11


 263:src/storage.c **** 		return 0;
 265              		.loc 1 263 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 264:src/storage.c **** 	}
 265:src/storage.c **** 	return 1;
 266:src/storage.c **** }
 267              		.loc 1 266 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 259 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 259 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 260 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 265:src/storage.c **** }
 282              		.loc 1 265 2 view .LVU80
 265:src/storage.c **** }
 283              		.loc 1 265 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 266 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34s-backup.dat\000"
 297      732F7770 
 297      3334732D 
 297      6261636B 
 297      75702E64 
 298 0017 00       		.align	2
 299              	.LC1:
 300 0018 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
 300      6C69622E 
 300      64617400 
 301              		.align	2
 302              	.LC2:
 303 002c 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
ARM GAS  /tmp/ccoue2SN.s 			page 12


 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 267:src/storage.c **** 
 268:src/storage.c **** 
 269:src/storage.c **** /*
 270:src/storage.c ****  *  Clear just the current program
 271:src/storage.c ****  */
 272:src/storage.c **** void clrprog( void )
 273:src/storage.c **** {
 274:src/storage.c **** 	update_program_bounds( 1 );
 275:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 276:src/storage.c **** 		/*
 277:src/storage.c **** 		 *  Porgram is in flash
 278:src/storage.c **** 		 */
 279:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 280:src/storage.c **** 	}
 281:src/storage.c **** 	else {
 282:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 283:src/storage.c **** 			return;
 284:src/storage.c **** 		}
 285:src/storage.c **** 		clrretstk();
 286:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 287:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 288:src/storage.c **** 		if ( ProgSize == 0 ) {
 289:src/storage.c **** 			stoend();
 290:src/storage.c **** 		}
 291:src/storage.c **** 	}
 292:src/storage.c **** 	set_pc( ProgBegin - 1 );
 293:src/storage.c **** 	update_program_bounds( 1 );
 294:src/storage.c **** }
 295:src/storage.c ****  
 296:src/storage.c **** 
 297:src/storage.c **** /*
 298:src/storage.c ****  *  Clear all - programs and registers
 299:src/storage.c ****  */
 300:src/storage.c **** void clrall(void) 
 301:src/storage.c **** {
 302:src/storage.c **** 	NumRegs = TOPREALREG;
 303:src/storage.c **** 	xeq_init_contexts();
 304:src/storage.c **** 	clrreg( OP_CLREG );
 305:src/storage.c **** 	clrstk( OP_CLSTK );
 306:src/storage.c **** 	clralpha( OP_CLRALPHA );
 307:src/storage.c **** 	clrflags( OP_CLFLAGS );
 308:src/storage.c **** 	clpall();
 309:src/storage.c **** 
 310:src/storage.c **** 	reset_shift();
 311:src/storage.c **** 	State2.test = TST_NONE;
 312:src/storage.c **** 
 313:src/storage.c **** 	DispMsg = NULL;
 314:src/storage.c **** }
ARM GAS  /tmp/ccoue2SN.s 			page 13


 315:src/storage.c **** 
 316:src/storage.c **** 
 317:src/storage.c **** /*
 318:src/storage.c ****  *  Clear everything
 319:src/storage.c ****  */
 320:src/storage.c **** void reset( void ) 
 321:src/storage.c **** {
 322:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 323:src/storage.c **** 	clrall();
 324:src/storage.c **** 	init_state();
 325:src/storage.c **** 	UState.contrast = 6;
 326:src/storage.c **** #ifdef INFRARED
 327:src/storage.c **** 	State.print_delay = 10;
 328:src/storage.c **** #endif
 329:src/storage.c **** 	DispMsg = "Erased";
 330:src/storage.c **** }
 331:src/storage.c **** 
 332:src/storage.c **** 
 333:src/storage.c **** /*
 334:src/storage.c ****  *  Store into program space.
 335:src/storage.c ****  */
 336:src/storage.c **** void stoprog( opcode c ) {
 337:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 338:src/storage.c **** 	int i;
 339:src/storage.c **** 	unsigned int pc = state_pc();
 340:src/storage.c **** 
 341:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 342:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 343:src/storage.c **** 
 344:src/storage.c **** 	if ( !isRAM( pc ) ) {
 345:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 346:src/storage.c **** 		return;
 347:src/storage.c **** 	}
 348:src/storage.c **** 	clrretstk();
 349:src/storage.c **** 	xeq_init_contexts();
 350:src/storage.c **** 	if ( ProgFree < off ) {
 351:src/storage.c **** 		return;
 352:src/storage.c **** 	}
 353:src/storage.c **** 	ProgSize += off;
 354:src/storage.c **** 	ProgEnd += off;
 355:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 356:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 357:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 358:src/storage.c **** 	}
 359:src/storage.c **** 	if (isDBL(c))
 360:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 361:src/storage.c **** 	Prog_1[pc] = c;
 362:src/storage.c **** 	State.pc = pc;
 363:src/storage.c **** }
 364:src/storage.c **** 
 365:src/storage.c **** 
 366:src/storage.c **** /*
 367:src/storage.c ****  *  Delete the current step in the program
 368:src/storage.c ****  */
 369:src/storage.c **** void delprog( void )
 370:src/storage.c **** {
 371:src/storage.c **** 	int i;
ARM GAS  /tmp/ccoue2SN.s 			page 14


 372:src/storage.c **** 	const unsigned int pc = state_pc();
 373:src/storage.c **** 	int off;
 374:src/storage.c **** 
 375:src/storage.c **** 	if ( check_delete_prog( pc ) )
 376:src/storage.c **** 		return;
 377:src/storage.c **** 	if ( pc == 0 )
 378:src/storage.c **** 		return;
 379:src/storage.c **** 
 380:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 381:src/storage.c **** 	ProgSize -= off;
 382:src/storage.c **** 	ProgEnd -= off;
 383:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 384:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 385:src/storage.c **** 	decpc();
 386:src/storage.c **** }
 387:src/storage.c **** 
 388:src/storage.c **** 
 389:src/storage.c **** /*
 390:src/storage.c ****  *  Helper to append a program in RAM.
 391:src/storage.c ****  *  Returns non zero in case of an error.
 392:src/storage.c ****  */
 393:src/storage.c **** int append_program( const s_opcode *source, int length )
 394:src/storage.c **** {
 395:src/storage.c **** 	unsigned short pc;
 396:src/storage.c **** 	int space_needed = length - ProgFree;
 397:src/storage.c **** 
 398:src/storage.c **** 	if ( ProgSize == 1 ) {
 399:src/storage.c **** 		/*
 400:src/storage.c **** 		 *  Only the default END statement is present
 401:src/storage.c **** 		 */
 402:src/storage.c **** 		--space_needed;
 403:src/storage.c **** 		--ProgSize;
 404:src/storage.c **** 	}
 405:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 406:src/storage.c **** 		return report_err( ERR_INVALID );
 407:src/storage.c **** 	}
 408:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 409:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 410:src/storage.c **** 	}
 411:src/storage.c **** 
 412:src/storage.c **** 	/*
 413:src/storage.c **** 	 *  Make room if needed
 414:src/storage.c **** 	 */
 415:src/storage.c **** 	clrretstk();
 416:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 417:src/storage.c **** 		space_needed -= SizeStatRegs;
 418:src/storage.c **** 		sigmaDeallocate();
 419:src/storage.c **** 	}
 420:src/storage.c **** 	if ( space_needed > 0 ) {
 421:src/storage.c **** 		int regs;
 422:src/storage.c **** 		if (is_dblmode())
 423:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 424:src/storage.c **** 		else
 425:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 426:src/storage.c **** 
 427:src/storage.c **** 		if ( regs < 0 ) {
 428:src/storage.c **** 			return report_err( ERR_RAM_FULL );
ARM GAS  /tmp/ccoue2SN.s 			page 15


 429:src/storage.c **** 		}
 430:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 431:src/storage.c **** 	}
 432:src/storage.c **** 	/*
 433:src/storage.c **** 	 *  Append data
 434:src/storage.c **** 	 */
 435:src/storage.c **** 	pc = ProgSize + 1;
 436:src/storage.c **** 	ProgSize += length;
 437:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 438:src/storage.c **** 	set_pc( pc );
 439:src/storage.c **** 	return 0;
 440:src/storage.c **** }
 441:src/storage.c **** 
 442:src/storage.c **** 
 443:src/storage.c **** #ifdef REALBUILD
 444:src/storage.c **** /*
 445:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 446:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 447:src/storage.c ****  *  IAP feature in ROM instead
 448:src/storage.c ****  */
 449:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 450:src/storage.c **** 
 451:src/storage.c **** /*
 452:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 453:src/storage.c ****  *  Returns zero if OK or non zero on error.
 454:src/storage.c ****  */
 455:src/storage.c **** static int flash_command( unsigned int cmd )
 456:src/storage.c **** {
 457:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 458:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 459:src/storage.c **** }
 460:src/storage.c **** 
 461:src/storage.c **** /*
 462:src/storage.c ****  *  Program the flash starting at destination.
 463:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 464:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 465:src/storage.c ****  */
 466:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 467:src/storage.c **** {
 468:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 469:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 470:src/storage.c **** 
 471:src/storage.c **** 	lock();  // No interrupts, please!
 472:src/storage.c **** 
 473:src/storage.c **** 	while ( count-- > 0 ) {
 474:src/storage.c **** 		/*
 475:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 476:src/storage.c **** 		 */
 477:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 478:src/storage.c **** 		int i;
 479:src/storage.c **** 
 480:src/storage.c **** 		/*
 481:src/storage.c **** 		 *  Copy the source to the flash write buffer
 482:src/storage.c **** 		 */
 483:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
 484:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 485:src/storage.c **** 		}
ARM GAS  /tmp/ccoue2SN.s 			page 16


 486:src/storage.c **** 
 487:src/storage.c **** 		/*
 488:src/storage.c **** 		 *  Command the controller to erase and write the page.
 489:src/storage.c **** 		 */
 490:src/storage.c **** 		if ( flash_command( cmd ) ) {
 491:src/storage.c **** 			report_err( ERR_IO );
 492:src/storage.c **** 			break;
 493:src/storage.c **** 		}
 494:src/storage.c **** 	}
 495:src/storage.c **** 	unlock();
 496:src/storage.c **** 	return Error != 0;
 497:src/storage.c **** }
 498:src/storage.c **** 
 499:src/storage.c **** 
 500:src/storage.c **** /*
 501:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 502:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 503:src/storage.c ****  */
 504:src/storage.c **** void sam_ba_boot(void)
 505:src/storage.c **** {
 506:src/storage.c **** 	/*
 507:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 508:src/storage.c **** 	 */
 509:src/storage.c **** 	lock();
 510:src/storage.c **** 	flash_command( 0x5A00010C );
 511:src/storage.c **** 	SUPC_Shutdown();
 512:src/storage.c **** }
 513:src/storage.c **** 
 514:src/storage.c **** 
 515:src/storage.c **** #else // below here, it's not REALBUILD
 516:src/storage.c **** 
 517:src/storage.c **** /*
 518:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34s-backup.dat
 519:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 520:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 521:src/storage.c ****  */
 522:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 523:src/storage.c **** extern char* get_region_path(int region);
 524:src/storage.c **** #else
 525:src/storage.c **** static char* get_region_path(int region)
 526:src/storage.c **** {
 527:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 528:src/storage.c **** }
 529:src/storage.c **** #endif
 530:src/storage.c **** 
 531:src/storage.c **** #ifdef DM42
 532:src/storage.c **** 
 533:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 534:src/storage.c **** {
 315              		.loc 1 534 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 535:src/storage.c ****   char *name;
 319              		.loc 1 535 3 view .LVU84
 536:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 536 3 view .LVU85
ARM GAS  /tmp/ccoue2SN.s 			page 17


 534:src/storage.c ****   char *name;
 321              		.loc 1 534 1 is_stmt 0 view .LVU86
 322 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 323              		.cfi_def_cfa_offset 28
 324              		.cfi_offset 4, -28
 325              		.cfi_offset 5, -24
 326              		.cfi_offset 6, -20
 327              		.cfi_offset 7, -16
 328              		.cfi_offset 8, -12
 329              		.cfi_offset 9, -8
 330              		.cfi_offset 14, -4
 537:src/storage.c ****   int offset;
 538:src/storage.c ****   uint x=0;
 539:src/storage.c **** 
 540:src/storage.c ****   /*
 541:src/storage.c ****    *  Copy the source to the destination memory
 542:src/storage.c ****    */
 543:src/storage.c **** 
 544:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 331              		.loc 1 544 3 view .LVU87
 332 0004 1602     		lsls	r6, r2, #8
 534:src/storage.c ****   char *name;
 333              		.loc 1 534 1 view .LVU88
 334 0006 83B0     		sub	sp, sp, #12
 335              		.cfi_def_cfa_offset 40
 538:src/storage.c **** 
 336              		.loc 1 538 8 view .LVU89
 337 0008 0023     		movs	r3, #0
 338              		.loc 1 544 3 view .LVU90
 339 000a 3246     		mov	r2, r6
 340              	.LVL29:
 534:src/storage.c ****   char *name;
 341              		.loc 1 534 1 view .LVU91
 342 000c 0446     		mov	r4, r0
 343              	.LVL30:
 537:src/storage.c ****   int offset;
 344              		.loc 1 537 3 is_stmt 1 view .LVU92
 538:src/storage.c **** 
 345              		.loc 1 538 3 view .LVU93
 538:src/storage.c **** 
 346              		.loc 1 538 8 is_stmt 0 view .LVU94
 347 000e 0193     		str	r3, [sp, #4]
 348              		.loc 1 544 3 is_stmt 1 view .LVU95
 349 0010 FFF7FEFF 		bl	xcopy
 350              	.LVL31:
 545:src/storage.c **** 
 546:src/storage.c ****   /*
 547:src/storage.c ****    *  Update the correct region file
 548:src/storage.c ****    */
 549:src/storage.c **** 
 550:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 351              		.loc 1 550 3 view .LVU96
 352              		.loc 1 550 16 is_stmt 0 view .LVU97
 353 0014 2B4B     		ldr	r3, .L52
 354 0016 1D68     		ldr	r5, [r3]
 355              		.loc 1 550 6 view .LVU98
 356 0018 A542     		cmp	r5, r4
ARM GAS  /tmp/ccoue2SN.s 			page 18


 357 001a 03D8     		bhi	.L37
 358              		.loc 1 550 70 discriminator 1 view .LVU99
 359 001c 05F50063 		add	r3, r5, #2048
 360              		.loc 1 550 38 discriminator 1 view .LVU100
 361 0020 9C42     		cmp	r4, r3
 362 0022 29D3     		bcc	.L50
 363              	.L37:
 551:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 552:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 553:src/storage.c ****   }
 554:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 364              		.loc 1 554 8 is_stmt 1 view .LVU101
 365              		.loc 1 554 21 is_stmt 0 view .LVU102
 366 0024 284B     		ldr	r3, .L52+4
 367 0026 1D68     		ldr	r5, [r3]
 368              		.loc 1 554 11 view .LVU103
 369 0028 A542     		cmp	r5, r4
 370 002a 28D8     		bhi	.L39
 371              		.loc 1 554 71 discriminator 1 view .LVU104
 372 002c 05F58043 		add	r3, r5, #16384
 373              		.loc 1 554 41 discriminator 1 view .LVU105
 374 0030 9C42     		cmp	r4, r3
 375 0032 24D2     		bcs	.L39
 555:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 376              		.loc 1 555 5 is_stmt 1 view .LVU106
 377              	.LVL32:
 378              	.LBB42:
 379              	.LBI42:
 525:src/storage.c **** {
 380              		.loc 1 525 14 view .LVU107
 381              	.LBE42:
 527:src/storage.c **** }
 382              		.loc 1 527 2 view .LVU108
 556:src/storage.c ****     offset = dest - (char *) &UserFlash;
 383              		.loc 1 556 5 view .LVU109
 555:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 555 12 is_stmt 0 view .LVU110
 385 0034 254F     		ldr	r7, .L52+8
 386              		.loc 1 556 12 view .LVU111
 387 0036 651B     		subs	r5, r4, r5
 388              	.LVL33:
 389              	.L38:
 557:src/storage.c ****   }
 558:src/storage.c ****   else {
 559:src/storage.c ****     // Bad address
 560:src/storage.c ****     report_err( ERR_ILLEGAL );
 561:src/storage.c ****     return 1;
 562:src/storage.c ****   }
 563:src/storage.c ****   FRESULT f;
 390              		.loc 1 563 3 is_stmt 1 view .LVU112
 564:src/storage.c **** 
 565:src/storage.c ****   sys_disk_write_enable(1);
 391              		.loc 1 565 3 view .LVU113
 392 0038 254B     		ldr	r3, .L52+12
 393 003a 0120     		movs	r0, #1
 394 003c 9847     		blx	r3
 395              	.LVL34:
ARM GAS  /tmp/ccoue2SN.s 			page 19


 566:src/storage.c **** 
 567:src/storage.c ****   f = check_create_dir ("/wp34s");
 396              		.loc 1 567 3 view .LVU114
 397              		.loc 1 567 7 is_stmt 0 view .LVU115
 398 003e 254B     		ldr	r3, .L52+16
 399 0040 2548     		ldr	r0, .L52+20
 400 0042 9847     		blx	r3
 401              	.LVL35:
 568:src/storage.c ****   if ( f != FR_OK ) {
 402              		.loc 1 568 3 is_stmt 1 view .LVU116
 403              		.loc 1 568 6 is_stmt 0 view .LVU117
 404 0044 10F0FF0F 		tst	r0, #255
 405 0048 0FD1     		bne	.L49
 569:src/storage.c ****     sys_disk_write_enable(0);
 570:src/storage.c ****     return 1;
 571:src/storage.c ****   }
 572:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 406              		.loc 1 572 3 is_stmt 1 view .LVU118
 407              		.loc 1 572 7 is_stmt 0 view .LVU119
 408 004a DFF89490 		ldr	r9, .L52+28
 409 004e DFF8A080 		ldr	r8, .L52+44
 410 0052 D9F80400 		ldr	r0, [r9, #4]
 411              	.LVL36:
 412              		.loc 1 572 7 view .LVU120
 413 0056 0322     		movs	r2, #3
 414 0058 3946     		mov	r1, r7
 415 005a C047     		blx	r8
 416              	.LVL37:
 573:src/storage.c ****   if ( f != FR_OK ) {
 417              		.loc 1 573 3 is_stmt 1 view .LVU121
 418              		.loc 1 573 6 is_stmt 0 view .LVU122
 419 005c B0B1     		cbz	r0, .L42
 574:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 420              		.loc 1 574 5 is_stmt 1 view .LVU123
 421              		.loc 1 574 9 is_stmt 0 view .LVU124
 422 005e D9F80400 		ldr	r0, [r9, #4]
 423              	.LVL38:
 424              		.loc 1 574 9 view .LVU125
 425 0062 3946     		mov	r1, r7
 426 0064 0B22     		movs	r2, #11
 427 0066 C047     		blx	r8
 428              	.LVL39:
 575:src/storage.c ****   }
 576:src/storage.c ****   if ( f != FR_OK ) {
 429              		.loc 1 576 3 is_stmt 1 view .LVU126
 430              		.loc 1 576 6 is_stmt 0 view .LVU127
 431 0068 80B1     		cbz	r0, .L42
 432              	.LVL40:
 433              	.L49:
 577:src/storage.c ****     sys_disk_write_enable(0);
 578:src/storage.c ****     return 1;
 579:src/storage.c ****   }
 580:src/storage.c ****   f_lseek( FPT, offset );
 581:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 582:src/storage.c ****   if (f != FR_OK) {
 583:src/storage.c ****     f_close( FPT );
 584:src/storage.c ****     sys_disk_write_enable(0);
ARM GAS  /tmp/ccoue2SN.s 			page 20


 434              		.loc 1 584 5 is_stmt 1 view .LVU128
 435 006a 194B     		ldr	r3, .L52+12
 436 006c 0020     		movs	r0, #0
 437 006e 9847     		blx	r3
 438              	.LVL41:
 585:src/storage.c ****     return 1;
 439              		.loc 1 585 5 view .LVU129
 440              		.loc 1 585 12 is_stmt 0 view .LVU130
 441 0070 0120     		movs	r0, #1
 586:src/storage.c ****   }
 587:src/storage.c ****   f = f_close( FPT );
 588:src/storage.c ****   if ( f != FR_OK ) {
 589:src/storage.c ****     sys_disk_write_enable(0);
 590:src/storage.c ****     return 1;
 591:src/storage.c ****   }
 592:src/storage.c ****   sys_disk_write_enable(0);
 593:src/storage.c ****   return 0;
 594:src/storage.c **** }
 442              		.loc 1 594 1 view .LVU131
 443 0072 03B0     		add	sp, sp, #12
 444              		.cfi_remember_state
 445              		.cfi_def_cfa_offset 28
 446              		@ sp needed
 447 0074 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 448              	.LVL42:
 449              	.L50:
 450              		.cfi_restore_state
 551:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 451              		.loc 1 551 5 is_stmt 1 view .LVU132
 452              	.LBB43:
 453              	.LBI43:
 525:src/storage.c **** {
 454              		.loc 1 525 14 view .LVU133
 455              	.LBE43:
 527:src/storage.c **** }
 456              		.loc 1 527 2 view .LVU134
 552:src/storage.c ****   }
 457              		.loc 1 552 5 view .LVU135
 551:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 458              		.loc 1 551 12 is_stmt 0 view .LVU136
 459 0078 184F     		ldr	r7, .L52+24
 552:src/storage.c ****   }
 460              		.loc 1 552 12 view .LVU137
 461 007a 651B     		subs	r5, r4, r5
 462              	.LVL43:
 552:src/storage.c ****   }
 463              		.loc 1 552 12 view .LVU138
 464 007c DCE7     		b	.L38
 465              	.LVL44:
 466              	.L39:
 560:src/storage.c ****     return 1;
 467              		.loc 1 560 5 is_stmt 1 view .LVU139
 468 007e 0720     		movs	r0, #7
 469 0080 FFF7FEFF 		bl	report_err
 470              	.LVL45:
 561:src/storage.c ****   }
 471              		.loc 1 561 5 view .LVU140
ARM GAS  /tmp/ccoue2SN.s 			page 21


 561:src/storage.c ****   }
 472              		.loc 1 561 12 is_stmt 0 view .LVU141
 473 0084 0120     		movs	r0, #1
 474              		.loc 1 594 1 view .LVU142
 475 0086 03B0     		add	sp, sp, #12
 476              		.cfi_remember_state
 477              		.cfi_def_cfa_offset 28
 478              		@ sp needed
 479 0088 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 480              	.LVL46:
 481              	.L42:
 482              		.cfi_restore_state
 580:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 483              		.loc 1 580 3 is_stmt 1 view .LVU143
 484 008c 144F     		ldr	r7, .L52+28
 485              	.LVL47:
 580:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 486              		.loc 1 580 3 is_stmt 0 view .LVU144
 487 008e 154B     		ldr	r3, .L52+32
 488 0090 7868     		ldr	r0, [r7, #4]
 489 0092 2946     		mov	r1, r5
 490 0094 9847     		blx	r3
 491              	.LVL48:
 581:src/storage.c ****   if (f != FR_OK) {
 492              		.loc 1 581 3 is_stmt 1 view .LVU145
 581:src/storage.c ****   if (f != FR_OK) {
 493              		.loc 1 581 7 is_stmt 0 view .LVU146
 494 0096 2146     		mov	r1, r4
 495 0098 7868     		ldr	r0, [r7, #4]
 496 009a 134C     		ldr	r4, .L52+36
 497              	.LVL49:
 581:src/storage.c ****   if (f != FR_OK) {
 498              		.loc 1 581 7 view .LVU147
 499 009c 3246     		mov	r2, r6
 500 009e 01AB     		add	r3, sp, #4
 501 00a0 A047     		blx	r4
 502              	.LVL50:
 582:src/storage.c ****     f_close( FPT );
 503              		.loc 1 582 3 is_stmt 1 view .LVU148
 582:src/storage.c ****     f_close( FPT );
 504              		.loc 1 582 6 is_stmt 0 view .LVU149
 505 00a2 58B9     		cbnz	r0, .L51
 587:src/storage.c ****   if ( f != FR_OK ) {
 506              		.loc 1 587 3 is_stmt 1 view .LVU150
 587:src/storage.c ****   if ( f != FR_OK ) {
 507              		.loc 1 587 7 is_stmt 0 view .LVU151
 508 00a4 7868     		ldr	r0, [r7, #4]
 509              	.LVL51:
 587:src/storage.c ****   if ( f != FR_OK ) {
 510              		.loc 1 587 7 view .LVU152
 511 00a6 114B     		ldr	r3, .L52+40
 512 00a8 9847     		blx	r3
 513              	.LVL52:
 588:src/storage.c ****     sys_disk_write_enable(0);
 514              		.loc 1 588 3 is_stmt 1 view .LVU153
 588:src/storage.c ****     sys_disk_write_enable(0);
 515              		.loc 1 588 6 is_stmt 0 view .LVU154
ARM GAS  /tmp/ccoue2SN.s 			page 22


 516 00aa 0446     		mov	r4, r0
 517 00ac 0028     		cmp	r0, #0
 518 00ae DCD1     		bne	.L49
 592:src/storage.c ****   return 0;
 519              		.loc 1 592 3 is_stmt 1 view .LVU155
 520 00b0 074B     		ldr	r3, .L52+12
 521 00b2 9847     		blx	r3
 522              	.LVL53:
 593:src/storage.c **** }
 523              		.loc 1 593 3 view .LVU156
 593:src/storage.c **** }
 524              		.loc 1 593 10 is_stmt 0 view .LVU157
 525 00b4 2046     		mov	r0, r4
 526              		.loc 1 594 1 view .LVU158
 527 00b6 03B0     		add	sp, sp, #12
 528              		.cfi_remember_state
 529              		.cfi_def_cfa_offset 28
 530              		@ sp needed
 531 00b8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 532              	.LVL54:
 533              	.L51:
 534              		.cfi_restore_state
 583:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 583 5 is_stmt 1 view .LVU159
 536 00bc 7868     		ldr	r0, [r7, #4]
 537              	.LVL55:
 583:src/storage.c ****     sys_disk_write_enable(0);
 538              		.loc 1 583 5 is_stmt 0 view .LVU160
 539 00be 0B4B     		ldr	r3, .L52+40
 540 00c0 9847     		blx	r3
 541              	.LVL56:
 542 00c2 D2E7     		b	.L49
 543              	.L53:
 544              		.align	2
 545              	.L52:
 546 00c4 00000000 		.word	backup_ram
 547 00c8 00000000 		.word	library_ram
 548 00cc 18000000 		.word	.LC1
 549 00d0 E1030008 		.word	134218721
 550 00d4 D1030008 		.word	134218705
 551 00d8 2C000000 		.word	.LC2
 552 00dc 00000000 		.word	.LC0
 553 00e0 00200010 		.word	268443648
 554 00e4 45040008 		.word	134218821
 555 00e8 41040008 		.word	134218817
 556 00ec 39040008 		.word	134218809
 557 00f0 35040008 		.word	134218805
 558              		.cfi_endproc
 559              	.LFE20:
 561              		.section	.text.flash_append,"ax",%progbits
 562              		.align	1
 563              		.p2align 2,,3
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	flash_append:
ARM GAS  /tmp/ccoue2SN.s 			page 23


 570              	.LVL57:
 571              	.LFB22:
 595:src/storage.c **** 
 596:src/storage.c **** #else //ifdef DM42 false
 597:src/storage.c **** 
 598:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 599:src/storage.c **** {
 600:src/storage.c ****   char *name;
 601:src/storage.c ****   char *dest = (char *) destination;
 602:src/storage.c ****   FILE *f = NULL;
 603:src/storage.c ****   int offset;
 604:src/storage.c **** 
 605:src/storage.c ****   /*
 606:src/storage.c ****    *  Copy the source to the destination memory
 607:src/storage.c ****    */
 608:src/storage.c **** 
 609:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 610:src/storage.c **** 
 611:src/storage.c ****   /*
 612:src/storage.c ****    *  Update the correct region file
 613:src/storage.c ****    */
 614:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 615:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 616:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 617:src/storage.c ****   }
 618:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 619:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 620:src/storage.c ****     offset = dest - (char *) &UserFlash;
 621:src/storage.c ****   }
 622:src/storage.c ****   else {
 623:src/storage.c ****     // Bad address
 624:src/storage.c ****     report_err( ERR_ILLEGAL );
 625:src/storage.c ****     return 1;
 626:src/storage.c ****   }
 627:src/storage.c **** 
 628:src/storage.c ****   f = fopen( name, "rb+" );
 629:src/storage.c ****   if ( f == NULL ) {
 630:src/storage.c ****     f = fopen( name, "wb+" );
 631:src/storage.c ****   }
 632:src/storage.c ****   if ( f == NULL ) {
 633:src/storage.c ****     report_err( ERR_IO );
 634:src/storage.c ****     return 1;
 635:src/storage.c ****   }
 636:src/storage.c ****   fseek( f, offset, SEEK_SET );
 637:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 638:src/storage.c ****     fclose( f );
 639:src/storage.c ****     report_err( ERR_IO );
 640:src/storage.c ****     return 1;
 641:src/storage.c ****   }
 642:src/storage.c ****   fclose( f );
 643:src/storage.c ****  return 0;
 644:src/storage.c **** }
 645:src/storage.c ****   
 646:src/storage.c **** #endif //ifdef DM42
 647:src/storage.c **** 
 648:src/storage.c **** 
 649:src/storage.c **** #endif //ifdef REALBUILD
ARM GAS  /tmp/ccoue2SN.s 			page 24


 650:src/storage.c **** 
 651:src/storage.c **** 
 652:src/storage.c **** /*
 653:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 654:src/storage.c ****  */
 655:src/storage.c **** void init_library( void )
 656:src/storage.c **** {
 657:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 658:src/storage.c **** 	  struct {
 659:src/storage.c **** 			unsigned short crc;
 660:src/storage.c **** 			unsigned short size;
 661:src/storage.c **** 			s_opcode prog[ 126 ];
 662:src/storage.c **** 		} lib;
 663:src/storage.c **** 		lib.size = 0;
 664:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 665:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 666:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 667:src/storage.c **** 	}
 668:src/storage.c **** }
 669:src/storage.c **** 
 670:src/storage.c **** 
 671:src/storage.c **** /*
 672:src/storage.c ****  *  Add data at the end of user flash memory.
 673:src/storage.c ****  *  Update crc and counter when done.
 674:src/storage.c ****  *  All sizes are given in steps.
 675:src/storage.c ****  */
 676:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 677:src/storage.c **** {
 572              		.loc 1 677 1 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 256
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 678:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 576              		.loc 1 678 3 view .LVU162
 677:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 577              		.loc 1 677 1 is_stmt 0 view .LVU163
 578 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 579              		.cfi_def_cfa_offset 36
 580              		.cfi_offset 4, -36
 581              		.cfi_offset 5, -32
 582              		.cfi_offset 6, -28
 583              		.cfi_offset 7, -24
 584              		.cfi_offset 8, -20
 585              		.cfi_offset 9, -16
 586              		.cfi_offset 10, -12
 587              		.cfi_offset 11, -8
 588              		.cfi_offset 14, -4
 589              		.loc 1 678 27 view .LVU164
 590 0004 254F     		ldr	r7, .L66
 591 0006 3C68     		ldr	r4, [r7]
 592 0008 251D     		adds	r5, r4, #4
 593              		.loc 1 678 9 view .LVU165
 594 000a 05EB4006 		add	r6, r5, r0, lsl #1
 595              	.LVL58:
 679:src/storage.c ****   char *src = (char *) source;
 596              		.loc 1 679 3 is_stmt 1 view .LVU166
 680:src/storage.c **** #ifdef REALBUILD
ARM GAS  /tmp/ccoue2SN.s 			page 25


 681:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 682:src/storage.c **** #else
 683:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 597              		.loc 1 683 31 is_stmt 0 view .LVU167
 598 000e 341B     		subs	r4, r6, r4
 684:src/storage.c **** #endif
 685:src/storage.c ****   char buffer[ PAGE_SIZE ];
 686:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 687:src/storage.c ****   count <<= 1;
 688:src/storage.c **** 
 689:src/storage.c ****   if ( offset_in_page != 0 ) {
 599              		.loc 1 689 6 view .LVU168
 600 0010 14F0FF04 		ands	r4, r4, #255
 677:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 601              		.loc 1 677 1 view .LVU169
 602 0014 C1B0     		sub	sp, sp, #260
 603              		.cfi_def_cfa_offset 296
 677:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 604              		.loc 1 677 1 view .LVU170
 605 0016 8846     		mov	r8, r1
 606              	.LVL59:
 683:src/storage.c **** #endif
 607              		.loc 1 683 3 is_stmt 1 view .LVU171
 685:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 608              		.loc 1 685 3 view .LVU172
 686:src/storage.c ****   count <<= 1;
 609              		.loc 1 686 3 view .LVU173
 687:src/storage.c **** 
 610              		.loc 1 687 3 view .LVU174
 687:src/storage.c **** 
 611              		.loc 1 687 9 is_stmt 0 view .LVU175
 612 0018 4FEA4205 		lsl	r5, r2, #1
 613              	.LVL60:
 614              		.loc 1 689 3 is_stmt 1 view .LVU176
 677:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 615              		.loc 1 677 1 is_stmt 0 view .LVU177
 616 001c 9946     		mov	r9, r3
 617              		.loc 1 689 6 view .LVU178
 618 001e 21D1     		bne	.L65
 619              	.LVL61:
 620              	.L55:
 690:src/storage.c ****     /*
 691:src/storage.c ****      *  We are not on a page boundary
 692:src/storage.c ****      *  Assemble a buffer from existing and new data
 693:src/storage.c ****      */
 694:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 695:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 696:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 697:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 698:src/storage.c ****       return 1;
 699:src/storage.c ****     }
 700:src/storage.c ****     src += bytes;
 701:src/storage.c ****     dest += bytes;
 702:src/storage.c ****     count -= bytes;
 703:src/storage.c ****   }
 704:src/storage.c **** 
 705:src/storage.c ****   if ( count > 0 ) {
ARM GAS  /tmp/ccoue2SN.s 			page 26


 621              		.loc 1 705 3 is_stmt 1 view .LVU179
 622              		.loc 1 705 6 is_stmt 0 view .LVU180
 623 0020 002D     		cmp	r5, #0
 624 0022 07DD     		ble	.L60
 706:src/storage.c ****     /*
 707:src/storage.c ****      *  Move multiples of complete pages
 708:src/storage.c ****      */
 709:src/storage.c **** #ifdef DM42
 710:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
 625              		.loc 1 710 5 is_stmt 1 view .LVU181
 626              		.loc 1 710 21 is_stmt 0 view .LVU182
 627 0024 05F1FF02 		add	r2, r5, #255
 628              	.LVL62:
 711:src/storage.c **** #else
 712:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 713:src/storage.c **** #endif
 714:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 629              		.loc 1 714 5 is_stmt 1 view .LVU183
 630              		.loc 1 714 10 is_stmt 0 view .LVU184
 631 0028 1212     		asrs	r2, r2, #8
 632              	.LVL63:
 633              		.loc 1 714 10 view .LVU185
 634 002a 4146     		mov	r1, r8
 635 002c 3046     		mov	r0, r6
 636 002e FFF7FEFF 		bl	program_flash
 637              	.LVL64:
 638              		.loc 1 714 8 view .LVU186
 639 0032 98B9     		cbnz	r0, .L59
 640              	.LVL65:
 641              	.L60:
 715:src/storage.c ****       return 1;
 716:src/storage.c ****     }
 717:src/storage.c ****   }
 718:src/storage.c **** 
 719:src/storage.c ****   /*
 720:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 721:src/storage.c ****    */
 722:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 642              		.loc 1 722 3 is_stmt 1 view .LVU187
 643 0034 3968     		ldr	r1, [r7]
 644 0036 4FF48072 		mov	r2, #256
 645 003a 6846     		mov	r0, sp
 646 003c FFF7FEFF 		bl	xcopy
 647              	.LVL66:
 723:src/storage.c ****   fr->size = size;
 648              		.loc 1 723 3 view .LVU188
 724:src/storage.c ****   checksum_region( &UserFlash, fr );
 649              		.loc 1 724 3 is_stmt 0 view .LVU189
 650 0040 6946     		mov	r1, sp
 651 0042 3868     		ldr	r0, [r7]
 723:src/storage.c ****   fr->size = size;
 652              		.loc 1 723 12 view .LVU190
 653 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 654              		.loc 1 724 3 is_stmt 1 view .LVU191
 655 0048 FFF7FEFF 		bl	checksum_region
 656              	.LVL67:
 725:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
ARM GAS  /tmp/ccoue2SN.s 			page 27


 657              		.loc 1 725 3 view .LVU192
 658              		.loc 1 725 10 is_stmt 0 view .LVU193
 659 004c 3868     		ldr	r0, [r7]
 660 004e 6946     		mov	r1, sp
 661 0050 0122     		movs	r2, #1
 662 0052 FFF7FEFF 		bl	program_flash
 663              	.LVL68:
 726:src/storage.c **** }
 664              		.loc 1 726 1 view .LVU194
 665 0056 41B0     		add	sp, sp, #260
 666              		.cfi_remember_state
 667              		.cfi_def_cfa_offset 36
 668              	.LVL69:
 669              		.loc 1 726 1 view .LVU195
 670              		@ sp needed
 671 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 672              	.LVL70:
 673              	.L59:
 674              		.cfi_restore_state
 675              	.LBB44:
 698:src/storage.c ****     }
 676              		.loc 1 698 14 view .LVU196
 677 005c 0120     		movs	r0, #1
 678              	.LBE44:
 679              		.loc 1 726 1 view .LVU197
 680 005e 41B0     		add	sp, sp, #260
 681              		.cfi_remember_state
 682              		.cfi_def_cfa_offset 36
 683              	.LVL71:
 684              		.loc 1 726 1 view .LVU198
 685              		@ sp needed
 686 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 687              	.LVL72:
 688              	.L65:
 689              		.cfi_restore_state
 690              	.LBB45:
 694:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 691              		.loc 1 694 5 is_stmt 1 view .LVU199
 695:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 692              		.loc 1 695 25 is_stmt 0 view .LVU200
 693 0064 A6EB040B 		sub	fp, r6, r4
 695:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 694              		.loc 1 695 5 view .LVU201
 695 0068 5946     		mov	r1, fp
 696              	.LVL73:
 695:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 697              		.loc 1 695 5 view .LVU202
 698 006a 2246     		mov	r2, r4
 699 006c 6846     		mov	r0, sp
 700              	.LVL74:
 694:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 701              		.loc 1 694 15 view .LVU203
 702 006e C4F5807A 		rsb	r10, r4, #256
 703              	.LVL75:
 695:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 704              		.loc 1 695 5 is_stmt 1 view .LVU204
 705 0072 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccoue2SN.s 			page 28


 706              	.LVL76:
 696:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 707              		.loc 1 696 5 view .LVU205
 708 0076 5246     		mov	r2, r10
 709 0078 4146     		mov	r1, r8
 710 007a 0DEB0400 		add	r0, sp, r4
 711 007e FFF7FEFF 		bl	xcopy
 712              	.LVL77:
 697:src/storage.c ****       return 1;
 713              		.loc 1 697 5 view .LVU206
 697:src/storage.c ****       return 1;
 714              		.loc 1 697 10 is_stmt 0 view .LVU207
 715 0082 6946     		mov	r1, sp
 716 0084 5846     		mov	r0, fp
 717 0086 0122     		movs	r2, #1
 718 0088 FFF7FEFF 		bl	program_flash
 719              	.LVL78:
 697:src/storage.c ****       return 1;
 720              		.loc 1 697 8 view .LVU208
 721 008c 0028     		cmp	r0, #0
 722 008e E5D1     		bne	.L59
 700:src/storage.c ****     dest += bytes;
 723              		.loc 1 700 5 is_stmt 1 view .LVU209
 700:src/storage.c ****     dest += bytes;
 724              		.loc 1 700 9 is_stmt 0 view .LVU210
 725 0090 D044     		add	r8, r8, r10
 726              	.LVL79:
 701:src/storage.c ****     count -= bytes;
 727              		.loc 1 701 5 is_stmt 1 view .LVU211
 701:src/storage.c ****     count -= bytes;
 728              		.loc 1 701 10 is_stmt 0 view .LVU212
 729 0092 5644     		add	r6, r6, r10
 730              	.LVL80:
 702:src/storage.c ****   }
 731              		.loc 1 702 5 is_stmt 1 view .LVU213
 702:src/storage.c ****   }
 732              		.loc 1 702 11 is_stmt 0 view .LVU214
 733 0094 A5EB0A05 		sub	r5, r5, r10
 734              	.LVL81:
 702:src/storage.c ****   }
 735              		.loc 1 702 11 view .LVU215
 736 0098 C2E7     		b	.L55
 737              	.L67:
 738 009a 00BF     		.align	2
 739              	.L66:
 740 009c 00000000 		.word	library_ram
 741              	.LBE45:
 742              		.cfi_endproc
 743              	.LFE22:
 745              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 746              		.align	2
 747              	.LC3:
 748 0000 64617461 		.ascii	"data=3?\000"
 748      3D333F00 
 749              		.align	2
 750              	.LC4:
 751 0008 46696C65 		.ascii	"File err\000"
ARM GAS  /tmp/ccoue2SN.s 			page 29


 751      20657272 
 751      00
 752              		.section	.text.open_selected_file,"ax",%progbits
 753              		.align	1
 754              		.p2align 2,,3
 755              		.global	open_selected_file
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	open_selected_file:
 762              	.LVL82:
 763              	.LFB37:
 727:src/storage.c **** 
 728:src/storage.c **** 
 729:src/storage.c **** /*
 730:src/storage.c ****  *  Remove steps from user flash memory.
 731:src/storage.c ****  */
 732:src/storage.c **** int flash_remove( int step_no, int count )
 733:src/storage.c **** {
 734:src/storage.c **** 	const int size = UserFlash.size - count;
 735:src/storage.c **** 	step_no = offsetLIB( step_no );
 736:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 737:src/storage.c **** 			     size - step_no, size );
 738:src/storage.c **** }
 739:src/storage.c **** 
 740:src/storage.c **** 
 741:src/storage.c **** /*
 742:src/storage.c ****  *  Simple backup / restore
 743:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 744:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 745:src/storage.c ****  */
 746:src/storage.c **** void flash_backup( enum nilop op )
 747:src/storage.c **** {
 748:src/storage.c **** 	if ( not_running() ) {
 749:src/storage.c **** 		process_cmdline_set_lift();
 750:src/storage.c **** 		init_state();
 751:src/storage.c **** 		checksum_all();
 752:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 753:src/storage.c **** 			report_err( ERR_IO );
 754:src/storage.c **** 			DispMsg = "Error";
 755:src/storage.c **** 		}
 756:src/storage.c **** 		else {
 757:src/storage.c **** 			DispMsg = "Saved";
 758:src/storage.c **** 		}
 759:src/storage.c **** 	}
 760:src/storage.c **** }
 761:src/storage.c **** 
 762:src/storage.c **** 
 763:src/storage.c **** void flash_restore( enum nilop op )
 764:src/storage.c **** {
 765:src/storage.c **** 	if ( not_running() ) {
 766:src/storage.c **** 		if ( checksum_backup() ) {
 767:src/storage.c **** 			report_err( ERR_INVALID );
 768:src/storage.c **** 		}
 769:src/storage.c **** 		else {
 770:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
ARM GAS  /tmp/ccoue2SN.s 			page 30


 771:src/storage.c **** 			init_state();
 772:src/storage.c **** 			DispMsg = "Restored";
 773:src/storage.c **** 		}
 774:src/storage.c **** 	}
 775:src/storage.c **** }
 776:src/storage.c **** 
 777:src/storage.c **** 
 778:src/storage.c **** /*
 779:src/storage.c ****  *  Load the user program area from the backup.
 780:src/storage.c ****  *  Called by PLOAD.
 781:src/storage.c ****  */
 782:src/storage.c **** void load_program( enum nilop op )
 783:src/storage.c **** {
 784:src/storage.c **** 	if ( not_running() ) {
 785:src/storage.c **** 		if ( checksum_backup() ) {
 786:src/storage.c **** 			/*
 787:src/storage.c **** 			 *  Not a valid backup
 788:src/storage.c **** 			 */
 789:src/storage.c **** 			report_err( ERR_INVALID );
 790:src/storage.c **** 			return;
 791:src/storage.c **** 		}
 792:src/storage.c **** 		clpall();
 793:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 794:src/storage.c **** 	}
 795:src/storage.c **** }
 796:src/storage.c **** 
 797:src/storage.c **** 
 798:src/storage.c **** /*
 799:src/storage.c ****  *  Load registers from backup
 800:src/storage.c ****  */
 801:src/storage.c **** void load_registers( enum nilop op )
 802:src/storage.c **** {
 803:src/storage.c **** 	int count;
 804:src/storage.c **** 	if ( checksum_backup() ) {
 805:src/storage.c **** 		/*
 806:src/storage.c **** 		 *  Not a valid backup region
 807:src/storage.c **** 		 */
 808:src/storage.c **** 		report_err( ERR_INVALID );
 809:src/storage.c **** 		return;
 810:src/storage.c **** 	}
 811:src/storage.c **** 	count = NumRegs;
 812:src/storage.c **** 	if ( is_dblmode() ) {
 813:src/storage.c **** 		// Don't clobber the stack in DP mode
 814:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 815:src/storage.c **** 	}
 816:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 817:src/storage.c **** 		count = BackupFlash._numregs;
 818:src/storage.c **** 	}
 819:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 820:src/storage.c **** }
 821:src/storage.c **** 
 822:src/storage.c **** 
 823:src/storage.c **** /*
 824:src/storage.c ****  *  Load the statistical summation registers from backup
 825:src/storage.c ****  */
 826:src/storage.c **** void load_sigma( enum nilop op )
 827:src/storage.c **** {
ARM GAS  /tmp/ccoue2SN.s 			page 31


 828:src/storage.c **** 	if ( checksum_backup() ) {
 829:src/storage.c **** 		/*
 830:src/storage.c **** 		 *  Not a valid backup region
 831:src/storage.c **** 		 */
 832:src/storage.c **** 		report_err( ERR_INVALID );
 833:src/storage.c **** 		return;
 834:src/storage.c **** 	}
 835:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 836:src/storage.c **** 		/*
 837:src/storage.c **** 		 *  Backup has no data
 838:src/storage.c **** 		 */
 839:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 840:src/storage.c **** 		return;
 841:src/storage.c **** 	}
 842:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 843:src/storage.c **** }
 844:src/storage.c **** 
 845:src/storage.c **** 
 846:src/storage.c **** /*
 847:src/storage.c ****  *  Load the configuration data from the backup
 848:src/storage.c ****  */
 849:src/storage.c **** void load_state( enum nilop op )
 850:src/storage.c **** {
 851:src/storage.c **** 	if ( not_running() ) {
 852:src/storage.c **** 		if ( checksum_backup() ) {
 853:src/storage.c **** 			/*
 854:src/storage.c **** 			 *  Not a valid backup region
 855:src/storage.c **** 			 */
 856:src/storage.c **** 			report_err( ERR_INVALID );
 857:src/storage.c **** 			return;
 858:src/storage.c **** 		}
 859:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 860:src/storage.c **** 		init_state();
 861:src/storage.c **** 		clrretstk_pc();
 862:src/storage.c **** 	}
 863:src/storage.c **** }
 864:src/storage.c **** 
 865:src/storage.c **** 
 866:src/storage.c **** /*
 867:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 868:src/storage.c ****  */
 869:src/storage.c **** void store_program( enum nilop op )
 870:src/storage.c **** {
 871:src/storage.c **** 	opcode lbl; 
 872:src/storage.c **** 	unsigned int pc;
 873:src/storage.c **** 	int space_needed, count, free;
 874:src/storage.c **** 
 875:src/storage.c **** 	if ( not_running() ) {
 876:src/storage.c **** 		/*
 877:src/storage.c **** 		 *  Don't copy from library or XROM
 878:src/storage.c **** 		 */
 879:src/storage.c **** 		pc = nLIB( state_pc() );
 880:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 881:src/storage.c **** 			report_err( ERR_ILLEGAL );
 882:src/storage.c **** 			return;
 883:src/storage.c **** 		}
 884:src/storage.c **** 		/*
ARM GAS  /tmp/ccoue2SN.s 			page 32


 885:src/storage.c **** 		 *  Check if program is labeled
 886:src/storage.c **** 		 */
 887:src/storage.c **** 		update_program_bounds( 1 );
 888:src/storage.c **** 		lbl = getprog( ProgBegin );
 889:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 890:src/storage.c **** 			report_err( ERR_NO_LBL );
 891:src/storage.c **** 			return;
 892:src/storage.c **** 		}
 893:src/storage.c **** 		/*
 894:src/storage.c **** 		 *  Compute space needed
 895:src/storage.c **** 		 */
 896:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 897:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 898:src/storage.c **** 
 899:src/storage.c **** 		/*
 900:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 901:src/storage.c **** 		 */
 902:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 903:src/storage.c **** 		if ( pc != 0 ) {
 904:src/storage.c **** 			/*
 905:src/storage.c **** 			 *  CLP in library
 906:src/storage.c **** 			 */
 907:src/storage.c **** 			unsigned int old_pc = state_pc();
 908:src/storage.c **** 			set_pc( pc );
 909:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 910:src/storage.c **** 			if ( space_needed <= free ) {
 911:src/storage.c **** 				clrprog();
 912:src/storage.c **** 			}
 913:src/storage.c **** 			set_pc( old_pc );
 914:src/storage.c **** 		}
 915:src/storage.c **** 		if ( space_needed > free ) {
 916:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 917:src/storage.c **** 			return;
 918:src/storage.c **** 		}
 919:src/storage.c **** 		// 3. Append program
 920:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 921:src/storage.c **** 	}
 922:src/storage.c **** }
 923:src/storage.c **** 
 924:src/storage.c **** 
 925:src/storage.c **** /*
 926:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 927:src/storage.c ****  */
 928:src/storage.c **** void recall_program( enum nilop op )
 929:src/storage.c **** {
 930:src/storage.c **** 	if ( not_running() ) {
 931:src/storage.c **** 		if ( state_pc() == 0 ) {
 932:src/storage.c **** 			State.pc = 1;
 933:src/storage.c **** 		}
 934:src/storage.c **** 		update_program_bounds( 1 );
 935:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 936:src/storage.c **** 	}
 937:src/storage.c **** }
 938:src/storage.c **** 
 939:src/storage.c **** 
 940:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 941:src/storage.c **** /*
ARM GAS  /tmp/ccoue2SN.s 			page 33


 942:src/storage.c ****  *  Filesystem access for emulator
 943:src/storage.c ****  */
 944:src/storage.c **** 
 945:src/storage.c **** #ifndef DM42
 946:src/storage.c **** 
 947:src/storage.c **** #ifdef _WIN32
 948:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
 949:src/storage.c **** #else
 950:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
 951:src/storage.c **** #endif
 952:src/storage.c **** 
 953:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 954:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 955:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 956:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 957:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 958:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 959:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 960:src/storage.c **** 
 961:src/storage.c **** /*
 962:src/storage.c ****  *  Show (GUI) message
 963:src/storage.c ****  */
 964:src/storage.c **** #ifdef QTGUI
 965:src/storage.c **** extern void showMessage(const char* title, const char* message);
 966:src/storage.c **** #endif
 967:src/storage.c **** 
 968:src/storage.c **** 
 969:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 970:src/storage.c **** {
 971:src/storage.c **** 	va_list args;
 972:src/storage.c **** #ifndef QTGUI
 973:src/storage.c **** #ifdef WINGUI
 974:src/storage.c **** 	char msg[ 10000 ];
 975:src/storage.c **** 	va_start( args, format );
 976:src/storage.c **** 	vsprintf( msg, format, args );
 977:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 978:src/storage.c **** #else
 979:src/storage.c **** 	va_start( args, format );
 980:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 981:src/storage.c **** 	vfprintf( stderr, format, args );
 982:src/storage.c **** 	fputc( '\n', stderr );
 983:src/storage.c **** #endif
 984:src/storage.c **** #else
 985:src/storage.c **** 	char msg[ 10000 ];
 986:src/storage.c **** 	va_start( args, format );
 987:src/storage.c **** 	vsprintf( msg, format, args );
 988:src/storage.c **** 	showMessage(title, msg);
 989:src/storage.c **** #endif
 990:src/storage.c **** }
 991:src/storage.c **** 
 992:src/storage.c **** 
 993:src/storage.c **** 
 994:src/storage.c **** /*
 995:src/storage.c ****  *  Save/Load state to a file
 996:src/storage.c ****  */
 997:src/storage.c **** void save_statefile( const char *filename )
 998:src/storage.c **** {
ARM GAS  /tmp/ccoue2SN.s 			page 34


 999:src/storage.c **** 	FILE *f;
1000:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1001:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
1002:src/storage.c **** 	}
1003:src/storage.c **** 	f = fopen( StateFile, "wb" );
1004:src/storage.c **** 	if ( f == NULL ) {
1005:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
1006:src/storage.c **** 		return;
1007:src/storage.c **** 	}
1008:src/storage.c **** 	process_cmdline_set_lift();
1009:src/storage.c **** 	init_state();
1010:src/storage.c **** 	checksum_all();
1011:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1012:src/storage.c **** 	fclose( f );
1013:src/storage.c **** #ifdef DEBUG
1014:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1015:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1016:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1017:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1018:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1019:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1020:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1021:src/storage.c **** #endif
1022:src/storage.c **** }
1023:src/storage.c **** 
1024:src/storage.c **** /*
1025:src/storage.c ****  *  Helper to expand filenames with startup directory
1026:src/storage.c ****  */
1027:src/storage.c **** #ifdef _WIN32
1028:src/storage.c **** #include <direct.h>
1029:src/storage.c **** #define getcwd _getcwd
1030:src/storage.c **** #define SEPARATOR '\\'
1031:src/storage.c **** #else
1032:src/storage.c **** #define SEPARATOR '/'
1033:src/storage.c **** #endif
1034:src/storage.c **** 
1035:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1036:src/storage.c **** {
1037:src/storage.c **** 	char *p;
1038:src/storage.c **** 	size_t l;
1039:src/storage.c **** 
1040:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1041:src/storage.c **** 		// Determine current directory on first call
1042:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1043:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
1044:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1045:src/storage.c **** 			*p = SEPARATOR;
1046:src/storage.c **** 			p[ 1 ] = '\0';
1047:src/storage.c **** 		}
1048:src/storage.c **** 	}
1049:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1050:src/storage.c **** 		// Absolute path left unchanged
1051:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1052:src/storage.c **** 	}
1053:src/storage.c **** 	else {
1054:src/storage.c **** 		// Prepend CurrentDir
1055:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
ARM GAS  /tmp/ccoue2SN.s 			page 35


1056:src/storage.c **** 		l = strlen( buffer );
1057:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1058:src/storage.c **** 	}
1059:src/storage.c **** 	return buffer;
1060:src/storage.c **** }
1061:src/storage.c **** #endif //ifndef DM42
1062:src/storage.c **** 
1063:src/storage.c **** /*
1064:src/storage.c ****  *  Lots of file routines for DM42
1065:src/storage.c ****  */
1066:src/storage.c **** 
1067:src/storage.c **** #ifdef DM42
1068:src/storage.c **** 
1069:src/storage.c **** extern void display_current_menu ();
1070:src/storage.c **** 
1071:src/storage.c **** #define DISP_NEW 1
1072:src/storage.c **** #define OVERWRITE_CHECK 1
1073:src/storage.c **** #define NO_DISP_NEW 0
1074:src/storage.c **** #define NO_OVERWRITE_CHECK 0
1075:src/storage.c **** #define WRITE 1
1076:src/storage.c **** #define READ 2
1077:src/storage.c **** 
1078:src/storage.c **** void save_lib_file ( int i ) {
1079:src/storage.c ****   FRESULT f;
1080:src/storage.c ****   int fss;
1081:src/storage.c ****   int data = WRITE;
1082:src/storage.c ****   uint x=0;
1083:src/storage.c **** 
1084:src/storage.c ****   sys_disk_write_enable(1);
1085:src/storage.c ****   if (i == 0) {
1086:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1087:src/storage.c ****     if (f != FR_OK) {
1088:src/storage.c ****       f_close (FPT);
1089:src/storage.c ****       sys_disk_write_enable(0);
1090:src/storage.c ****       DispMsg = "Err slf1";
1091:src/storage.c ****       return;
1092:src/storage.c ****     }
1093:src/storage.c ****   }
1094:src/storage.c ****   else {
1095:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
1096:src/storage.c ****     if (fss != 1) return;
1097:src/storage.c ****   }
1098:src/storage.c ****   // File is now open with correct permissions
1099:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1100:src/storage.c ****   if ( f != FR_OK ) {
1101:src/storage.c ****     DispMsg = "Err slf2";
1102:src/storage.c ****   }
1103:src/storage.c ****   f_close( FPT );
1104:src/storage.c ****   sys_disk_write_enable(0);
1105:src/storage.c **** }
1106:src/storage.c **** 
1107:src/storage.c **** void load_lib_file ( int i ) {
1108:src/storage.c ****   FRESULT f;
1109:src/storage.c ****   int fss;
1110:src/storage.c ****   int data = READ;
1111:src/storage.c ****   uint x=0;
1112:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 36


1113:src/storage.c ****   if (i == 0) {
1114:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
1115:src/storage.c ****     if (f != FR_OK) {
1116:src/storage.c ****       f_close (FPT);
1117:src/storage.c ****       //      DispMsg = "No file?";
1118:src/storage.c ****       return;
1119:src/storage.c ****     }
1120:src/storage.c ****   }
1121:src/storage.c ****   else {
1122:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
1123:src/storage.c ****     if (fss != 1) return;
1124:src/storage.c ****   }
1125:src/storage.c ****   // File is now open with correct permissions
1126:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1127:src/storage.c ****   if ( f != FR_OK ) {
1128:src/storage.c ****     DispMsg = "Err slf2";
1129:src/storage.c ****   }
1130:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1131:src/storage.c ****     DispMsg = "File too big";
1132:src/storage.c ****   }
1133:src/storage.c ****   f_close( FPT );
1134:src/storage.c **** }
1135:src/storage.c **** 
1136:src/storage.c **** void save_ram_file ( int i ) {
1137:src/storage.c ****   FRESULT f;
1138:src/storage.c ****   int fss;
1139:src/storage.c ****   int data = WRITE;
1140:src/storage.c ****   uint x=0;
1141:src/storage.c **** 
1142:src/storage.c ****     process_cmdline_set_lift();
1143:src/storage.c ****     init_state();
1144:src/storage.c ****     checksum_all();
1145:src/storage.c **** 
1146:src/storage.c ****     sys_disk_write_enable(1);
1147:src/storage.c ****     if (i == 0) {
1148:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1149:src/storage.c ****       if (f != FR_OK) {
1150:src/storage.c **** 	f_close (FPT);
1151:src/storage.c **** 	sys_disk_write_enable(0);
1152:src/storage.c **** 	DispMsg = "Err srf1";
1153:src/storage.c **** 	return;
1154:src/storage.c ****       }
1155:src/storage.c ****     }
1156:src/storage.c ****     else {
1157:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
1158:src/storage.c ****       if (fss != 1) return;
1159:src/storage.c ****     }
1160:src/storage.c ****     // File is now open with correct permissions
1161:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1162:src/storage.c ****     if ( f != FR_OK ) {
1163:src/storage.c ****       DispMsg = "Err srf2";
1164:src/storage.c ****     }
1165:src/storage.c ****     f_close( FPT );
1166:src/storage.c ****     sys_disk_write_enable(0);
1167:src/storage.c **** }
1168:src/storage.c **** 
1169:src/storage.c **** int load_ram_file ( int i ) {
ARM GAS  /tmp/ccoue2SN.s 			page 37


1170:src/storage.c ****   FRESULT f;
1171:src/storage.c ****   int fss;
1172:src/storage.c ****   int data = READ;
1173:src/storage.c ****   uint x=0;
1174:src/storage.c ****   
1175:src/storage.c ****   if (i == 0) {
1176:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
1177:src/storage.c ****     if (f != FR_OK) {
1178:src/storage.c ****       f_close (FPT);
1179:src/storage.c ****       //      DispMsg = "No file?";
1180:src/storage.c ****       return 1;
1181:src/storage.c ****     }
1182:src/storage.c ****   }
1183:src/storage.c ****   else {
1184:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
1185:src/storage.c ****     if (fss != 1) return 1;
1186:src/storage.c ****   }
1187:src/storage.c ****   // File is now open with correct permissions
1188:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1189:src/storage.c ****   if ( f != FR_OK ) {
1190:src/storage.c ****     DispMsg = "Err lrf2";
1191:src/storage.c ****       f_close( FPT );
1192:src/storage.c ****       return 1;
1193:src/storage.c ****   }
1194:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1195:src/storage.c ****     DispMsg = "File too big";
1196:src/storage.c ****       f_close( FPT );
1197:src/storage.c ****       return 1;
1198:src/storage.c ****   }
1199:src/storage.c ****   f_close( FPT );
1200:src/storage.c ****   return 0;
1201:src/storage.c **** }
1202:src/storage.c **** 
1203:src/storage.c **** void load_backup_file ( int i ) {
1204:src/storage.c ****   FRESULT f;
1205:src/storage.c ****   int fss;
1206:src/storage.c ****   int data = READ;
1207:src/storage.c ****   uint x=0;
1208:src/storage.c **** 
1209:src/storage.c ****   if (i == 0) {
1210:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
1211:src/storage.c ****     if (f != FR_OK) {
1212:src/storage.c ****       f_close (FPT);
1213:src/storage.c ****       return;
1214:src/storage.c ****     }
1215:src/storage.c ****   }
1216:src/storage.c ****   else {
1217:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
1218:src/storage.c ****     if (fss != 1) return;
1219:src/storage.c ****   }
1220:src/storage.c ****   // File is now open with correct permissions
1221:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1222:src/storage.c ****   if ( f != FR_OK ) {
1223:src/storage.c ****     DispMsg = "Err lbf2";
1224:src/storage.c ****   }
1225:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1226:src/storage.c ****     DispMsg = "File too big";
ARM GAS  /tmp/ccoue2SN.s 			page 38


1227:src/storage.c ****   }
1228:src/storage.c ****   f_close( FPT );
1229:src/storage.c **** }
1230:src/storage.c **** 
1231:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
 764              		.loc 1 1231 78 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              		.loc 1 1231 78 is_stmt 0 view .LVU217
 769 0000 08B5     		push	{r3, lr}
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 3, -8
 772              		.cfi_offset 14, -4
1232:src/storage.c ****   FRESULT f;
1233:src/storage.c **** 
1234:src/storage.c ****   if (*(int*)data == WRITE) {
 773              		.loc 1 1234 7 view .LVU218
 774 0002 1368     		ldr	r3, [r2]
 775              		.loc 1 1234 6 view .LVU219
 776 0004 012B     		cmp	r3, #1
1231:src/storage.c ****   FRESULT f;
 777              		.loc 1 1231 78 view .LVU220
 778 0006 0146     		mov	r1, r0
 779              	.LVL83:
1232:src/storage.c ****   FRESULT f;
 780              		.loc 1 1232 3 is_stmt 1 view .LVU221
 781              		.loc 1 1234 3 view .LVU222
 782              		.loc 1 1234 6 is_stmt 0 view .LVU223
 783 0008 0ED0     		beq	.L75
1235:src/storage.c ****     // open file to write
1236:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1237:src/storage.c ****   }
1238:src/storage.c ****   else if (*(int*)data == READ) {
 784              		.loc 1 1238 8 is_stmt 1 view .LVU224
 785              		.loc 1 1238 11 is_stmt 0 view .LVU225
 786 000a 022B     		cmp	r3, #2
 787 000c 07D1     		bne	.L71
1239:src/storage.c ****     // open file to read
1240:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 788              		.loc 1 1240 5 is_stmt 1 view .LVU226
 789              		.loc 1 1240 9 is_stmt 0 view .LVU227
 790 000e 104A     		ldr	r2, .L77
 791              	.LVL84:
 792              		.loc 1 1240 9 view .LVU228
 793 0010 104B     		ldr	r3, .L77+4
 794 0012 5068     		ldr	r0, [r2, #4]
 795              	.LVL85:
 796              		.loc 1 1240 9 view .LVU229
 797 0014 0122     		movs	r2, #1
 798 0016 9847     		blx	r3
 799              	.LVL86:
1241:src/storage.c ****   }
1242:src/storage.c ****   else {
1243:src/storage.c ****     DispMsg = "data=3?";
1244:src/storage.c ****     return 3; // serious error!
1245:src/storage.c ****   }
ARM GAS  /tmp/ccoue2SN.s 			page 39


1246:src/storage.c ****   if (f != FR_OK) {
 800              		.loc 1 1246 3 is_stmt 1 view .LVU230
 801              		.loc 1 1246 6 is_stmt 0 view .LVU231
 802 0018 68B9     		cbnz	r0, .L76
 803              	.L73:
1247:src/storage.c ****     f_close (FPT);
1248:src/storage.c ****     sys_disk_write_enable(0);
1249:src/storage.c ****     DispMsg = "File err";
1250:src/storage.c ****     return 2; // file can't be opened
1251:src/storage.c ****   }
1252:src/storage.c ****   else {
1253:src/storage.c ****     return 1; // file opened successfully
 804              		.loc 1 1253 12 view .LVU232
 805 001a 0120     		movs	r0, #1
 806              	.LVL87:
1254:src/storage.c ****   }
1255:src/storage.c **** }
 807              		.loc 1 1255 1 view .LVU233
 808 001c 08BD     		pop	{r3, pc}
 809              	.LVL88:
 810              	.L71:
1243:src/storage.c ****     return 3; // serious error!
 811              		.loc 1 1243 5 is_stmt 1 view .LVU234
1243:src/storage.c ****     return 3; // serious error!
 812              		.loc 1 1243 13 is_stmt 0 view .LVU235
 813 001e 0E4B     		ldr	r3, .L77+8
 814 0020 0E4A     		ldr	r2, .L77+12
 815              	.LVL89:
1243:src/storage.c ****     return 3; // serious error!
 816              		.loc 1 1243 13 view .LVU236
 817 0022 1A60     		str	r2, [r3]
1244:src/storage.c ****   }
 818              		.loc 1 1244 5 is_stmt 1 view .LVU237
1244:src/storage.c ****   }
 819              		.loc 1 1244 12 is_stmt 0 view .LVU238
 820 0024 0320     		movs	r0, #3
 821              	.LVL90:
 822              		.loc 1 1255 1 view .LVU239
 823 0026 08BD     		pop	{r3, pc}
 824              	.LVL91:
 825              	.L75:
1236:src/storage.c ****   }
 826              		.loc 1 1236 5 is_stmt 1 view .LVU240
1236:src/storage.c ****   }
 827              		.loc 1 1236 9 is_stmt 0 view .LVU241
 828 0028 094A     		ldr	r2, .L77
 829              	.LVL92:
1236:src/storage.c ****   }
 830              		.loc 1 1236 9 view .LVU242
 831 002a 0A4B     		ldr	r3, .L77+4
 832 002c 5068     		ldr	r0, [r2, #4]
 833              	.LVL93:
1236:src/storage.c ****   }
 834              		.loc 1 1236 9 view .LVU243
 835 002e 0B22     		movs	r2, #11
 836 0030 9847     		blx	r3
 837              	.LVL94:
ARM GAS  /tmp/ccoue2SN.s 			page 40


1246:src/storage.c ****     f_close (FPT);
 838              		.loc 1 1246 3 is_stmt 1 view .LVU244
1246:src/storage.c ****     f_close (FPT);
 839              		.loc 1 1246 6 is_stmt 0 view .LVU245
 840 0032 0028     		cmp	r0, #0
 841 0034 F1D0     		beq	.L73
 842              	.L76:
 843              	.LBB48:
 844              	.LBI48:
1231:src/storage.c ****   FRESULT f;
 845              		.loc 1 1231 5 is_stmt 1 view .LVU246
 846              	.LVL95:
 847              	.LBB49:
1247:src/storage.c ****     sys_disk_write_enable(0);
 848              		.loc 1 1247 5 view .LVU247
 849 0036 064A     		ldr	r2, .L77
 850 0038 094B     		ldr	r3, .L77+16
 851 003a 5068     		ldr	r0, [r2, #4]
 852              	.LVL96:
1247:src/storage.c ****     sys_disk_write_enable(0);
 853              		.loc 1 1247 5 is_stmt 0 view .LVU248
 854 003c 9847     		blx	r3
 855              	.LVL97:
1248:src/storage.c ****     DispMsg = "File err";
 856              		.loc 1 1248 5 is_stmt 1 view .LVU249
 857 003e 094B     		ldr	r3, .L77+20
 858 0040 0020     		movs	r0, #0
 859 0042 9847     		blx	r3
 860              	.LVL98:
1249:src/storage.c ****     return 2; // file can't be opened
 861              		.loc 1 1249 5 view .LVU250
1249:src/storage.c ****     return 2; // file can't be opened
 862              		.loc 1 1249 13 is_stmt 0 view .LVU251
 863 0044 044B     		ldr	r3, .L77+8
 864 0046 084A     		ldr	r2, .L77+24
 865 0048 1A60     		str	r2, [r3]
1250:src/storage.c ****   }
 866              		.loc 1 1250 5 is_stmt 1 view .LVU252
 867              	.LVL99:
1249:src/storage.c ****     return 2; // file can't be opened
 868              		.loc 1 1249 13 is_stmt 0 view .LVU253
 869 004a 0220     		movs	r0, #2
 870              	.LBE49:
 871              	.LBE48:
 872              		.loc 1 1255 1 view .LVU254
 873 004c 08BD     		pop	{r3, pc}
 874              	.L78:
 875 004e 00BF     		.align	2
 876              	.L77:
 877 0050 00200010 		.word	268443648
 878 0054 35040008 		.word	134218805
 879 0058 00000000 		.word	DispMsg
 880 005c 00000000 		.word	.LC3
 881 0060 39040008 		.word	134218809
 882 0064 E1030008 		.word	134218721
 883 0068 08000000 		.word	.LC4
 884              		.cfi_endproc
ARM GAS  /tmp/ccoue2SN.s 			page 41


 885              	.LFE37:
 887              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
 888              		.align	2
 889              	.LC5:
 890 0000 63616C6C 		.ascii	"calloc failed\000"
 890      6F632066 
 890      61696C65 
 890      6400
 891              		.section	.text.init_mem,"ax",%progbits
 892              		.align	1
 893              		.p2align 2,,3
 894              		.global	init_mem
 895              		.syntax unified
 896              		.thumb
 897              		.thumb_func
 898              		.fpu fpv4-sp-d16
 900              	init_mem:
 901              	.LFB3:
  99:src/storage.c ****   char *v;
 902              		.loc 1 99 18 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 100:src/storage.c **** 
 906              		.loc 1 100 3 view .LVU256
 102:src/storage.c ****   if (v == NULL) {
 907              		.loc 1 102 3 view .LVU257
  99:src/storage.c ****   char *v;
 908              		.loc 1 99 18 is_stmt 0 view .LVU258
 909 0000 08B5     		push	{r3, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 3, -8
 912              		.cfi_offset 14, -4
 102:src/storage.c ****   if (v == NULL) {
 913              		.loc 1 102 16 view .LVU259
 914 0002 0121     		movs	r1, #1
 915 0004 4FF4A040 		mov	r0, #20480
 916 0008 FFF7FEFF 		bl	calloc
 917              	.LVL100:
 103:src/storage.c ****     perror("calloc failed");
 918              		.loc 1 103 3 is_stmt 1 view .LVU260
 103:src/storage.c ****     perror("calloc failed");
 919              		.loc 1 103 6 is_stmt 0 view .LVU261
 920 000c 50B1     		cbz	r0, .L82
 107:src/storage.c ****   v += RAM_SIZE;
 921              		.loc 1 107 3 is_stmt 1 view .LVU262
 107:src/storage.c ****   v += RAM_SIZE;
 922              		.loc 1 107 12 is_stmt 0 view .LVU263
 923 000e 0849     		ldr	r1, .L83
 109:src/storage.c ****   v += RAM_SIZE;
 924              		.loc 1 109 14 view .LVU264
 925 0010 084A     		ldr	r2, .L83+4
 111:src/storage.c **** }
 926              		.loc 1 111 15 view .LVU265
 927 0012 094B     		ldr	r3, .L83+8
 107:src/storage.c ****   v += RAM_SIZE;
 928              		.loc 1 107 12 view .LVU266
ARM GAS  /tmp/ccoue2SN.s 			page 42


 929 0014 0860     		str	r0, [r1]
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 930              		.loc 1 108 3 is_stmt 1 view .LVU267
 931              	.LVL101:
 109:src/storage.c ****   v += RAM_SIZE;
 932              		.loc 1 109 3 view .LVU268
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 933              		.loc 1 108 5 is_stmt 0 view .LVU269
 934 0016 00F50061 		add	r1, r0, #2048
 935              	.LVL102:
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 936              		.loc 1 110 5 view .LVU270
 937 001a 00F58050 		add	r0, r0, #4096
 109:src/storage.c ****   v += RAM_SIZE;
 938              		.loc 1 109 14 view .LVU271
 939 001e 1160     		str	r1, [r2]
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 940              		.loc 1 110 3 is_stmt 1 view .LVU272
 941              	.LVL103:
 111:src/storage.c **** }
 942              		.loc 1 111 3 view .LVU273
 111:src/storage.c **** }
 943              		.loc 1 111 15 is_stmt 0 view .LVU274
 944 0020 1860     		str	r0, [r3]
 112:src/storage.c **** 
 945              		.loc 1 112 1 view .LVU275
 946 0022 08BD     		pop	{r3, pc}
 947              	.LVL104:
 948              	.L82:
 104:src/storage.c ****     return;
 949              		.loc 1 104 5 is_stmt 1 view .LVU276
 112:src/storage.c **** 
 950              		.loc 1 112 1 is_stmt 0 view .LVU277
 951 0024 BDE80840 		pop	{r3, lr}
 952              		.cfi_restore 14
 953              		.cfi_restore 3
 954              		.cfi_def_cfa_offset 0
 104:src/storage.c ****     return;
 955              		.loc 1 104 5 view .LVU278
 956 0028 0448     		ldr	r0, .L83+12
 957              	.LVL105:
 104:src/storage.c ****     return;
 958              		.loc 1 104 5 view .LVU279
 959 002a FFF7FEBF 		b	perror
 960              	.LVL106:
 961              	.L84:
 962 002e 00BF     		.align	2
 963              	.L83:
 964 0030 00000000 		.word	main_ram
 965 0034 00000000 		.word	backup_ram
 966 0038 00000000 		.word	library_ram
 967 003c 00000000 		.word	.LC5
 968              		.cfi_endproc
 969              	.LFE3:
 971              		.section	.text.crc16,"ax",%progbits
 972              		.align	1
 973              		.p2align 2,,3
ARM GAS  /tmp/ccoue2SN.s 			page 43


 974              		.global	crc16
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	crc16:
 981              	.LVL107:
 982              	.LFB4:
 157:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 983              		.loc 1 157 1 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 988              		.loc 1 158 2 view .LVU281
 159:src/storage.c **** 	unsigned int i;
 989              		.loc 1 159 2 view .LVU282
 160:src/storage.c **** 
 990              		.loc 1 160 2 view .LVU283
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 991              		.loc 1 162 2 view .LVU284
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 992              		.loc 1 162 15 view .LVU285
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 993              		.loc 1 162 2 is_stmt 0 view .LVU286
 994 0000 B1B1     		cbz	r1, .L88
 995 0002 0144     		add	r1, r1, r0
 996              	.LVL108:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 997              		.loc 1 158 21 view .LVU287
 998 0004 45F6A523 		movw	r3, #23205
 999              	.LVL109:
 1000              	.L87:
 163:src/storage.c **** 		crc ^= *d++;
 1001              		.loc 1 163 3 is_stmt 1 discriminator 3 view .LVU288
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1002              		.loc 1 164 10 is_stmt 0 discriminator 3 view .LVU289
 1003 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1004              	.LVL110:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1005              		.loc 1 164 10 discriminator 3 view .LVU290
 1006 000c 5BBA     		rev16	r3, r3
 1007              	.LVL111:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1008              		.loc 1 164 10 discriminator 3 view .LVU291
 1009 000e 9BB2     		uxth	r3, r3
 1010              	.LVL112:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1011              		.loc 1 164 3 is_stmt 1 discriminator 3 view .LVU292
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1012              		.loc 1 164 7 is_stmt 0 discriminator 3 view .LVU293
 1013 0010 5340     		eors	r3, r3, r2
 1014              	.LVL113:
 165:src/storage.c **** 		crc ^= crc << 12;
 1015              		.loc 1 165 3 is_stmt 1 discriminator 3 view .LVU294
 165:src/storage.c **** 		crc ^= crc << 12;
ARM GAS  /tmp/ccoue2SN.s 			page 44


 1016              		.loc 1 165 7 is_stmt 0 discriminator 3 view .LVU295
 1017 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1018 0016 5340     		eors	r3, r3, r2
 1019              	.LVL114:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1020              		.loc 1 166 3 is_stmt 1 discriminator 3 view .LVU296
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1021              		.loc 1 166 7 is_stmt 0 discriminator 3 view .LVU297
 1022 0018 83EA0332 		eor	r2, r3, r3, lsl #12
 1023              	.LVL115:
 167:src/storage.c **** 	}
 1024              		.loc 1 167 3 is_stmt 1 discriminator 3 view .LVU298
 167:src/storage.c **** 	}
 1025              		.loc 1 167 25 is_stmt 0 discriminator 3 view .LVU299
 1026 001c 5301     		lsls	r3, r2, #5
 1027 001e 03F4FF53 		and	r3, r3, #8160
 167:src/storage.c **** 	}
 1028              		.loc 1 167 7 discriminator 3 view .LVU300
 1029 0022 92B2     		uxth	r2, r2
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1030              		.loc 1 162 2 discriminator 3 view .LVU301
 1031 0024 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1032              		.loc 1 167 7 discriminator 3 view .LVU302
 1033 0026 83EA0203 		eor	r3, r3, r2
 1034              	.LVL116:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1035              		.loc 1 162 27 is_stmt 1 discriminator 3 view .LVU303
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1036              		.loc 1 162 15 discriminator 3 view .LVU304
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1037              		.loc 1 162 2 is_stmt 0 discriminator 3 view .LVU305
 1038 002a EDD1     		bne	.L87
 169:src/storage.c **** }
 1039              		.loc 1 169 2 is_stmt 1 view .LVU306
 170:src/storage.c **** 
 1040              		.loc 1 170 1 is_stmt 0 view .LVU307
 1041 002c 1846     		mov	r0, r3
 1042              	.LVL117:
 170:src/storage.c **** 
 1043              		.loc 1 170 1 view .LVU308
 1044 002e 7047     		bx	lr
 1045              	.LVL118:
 1046              	.L88:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1047              		.loc 1 158 21 view .LVU309
 1048 0030 45F6A523 		movw	r3, #23205
 169:src/storage.c **** }
 1049              		.loc 1 169 2 is_stmt 1 view .LVU310
 170:src/storage.c **** 
 1050              		.loc 1 170 1 is_stmt 0 view .LVU311
 1051 0034 1846     		mov	r0, r3
 1052              	.LVL119:
 170:src/storage.c **** 
 1053              		.loc 1 170 1 view .LVU312
 1054 0036 7047     		bx	lr
 1055              		.cfi_endproc
ARM GAS  /tmp/ccoue2SN.s 			page 45


 1056              	.LFE4:
 1058              		.section	.text.checksum_program,"ax",%progbits
 1059              		.align	1
 1060              		.p2align 2,,3
 1061              		.global	checksum_program
 1062              		.syntax unified
 1063              		.thumb
 1064              		.thumb_func
 1065              		.fpu fpv4-sp-d16
 1067              	checksum_program:
 1068              	.LFB6:
 193:src/storage.c **** 	update_program_bounds( 1 );
 1069              		.loc 1 193 1 is_stmt 1 view -0
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 0
 1072              		@ frame_needed = 0, uses_anonymous_args = 0
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1073              		.loc 1 194 2 view .LVU314
 193:src/storage.c **** 	update_program_bounds( 1 );
 1074              		.loc 1 193 1 is_stmt 0 view .LVU315
 1075 0000 08B5     		push	{r3, lr}
 1076              		.cfi_def_cfa_offset 8
 1077              		.cfi_offset 3, -8
 1078              		.cfi_offset 14, -4
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1079              		.loc 1 194 2 view .LVU316
 1080 0002 0120     		movs	r0, #1
 1081 0004 FFF7FEFF 		bl	update_program_bounds
 1082              	.LVL120:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1083              		.loc 1 195 2 is_stmt 1 view .LVU317
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1084              		.loc 1 195 16 is_stmt 0 view .LVU318
 1085 0008 FFF7FEFF 		bl	get_current_prog
 1086              	.LVL121:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1087              		.loc 1 195 36 view .LVU319
 1088 000c 124B     		ldr	r3, .L96
 1089 000e 1B68     		ldr	r3, [r3]
 1090 0010 B3F8EE17 		ldrh	r1, [r3, #2030]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1091              		.loc 1 195 46 view .LVU320
 1092 0014 B3F8EC37 		ldrh	r3, [r3, #2028]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1093              		.loc 1 195 44 view .LVU321
 1094 0018 C91A     		subs	r1, r1, r3
 1095              	.LVL122:
 1096              	.LBB50:
 1097              	.LBI50:
 156:src/storage.c **** {
 1098              		.loc 1 156 20 is_stmt 1 view .LVU322
 1099              	.LBB51:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1100              		.loc 1 158 2 view .LVU323
 159:src/storage.c **** 	unsigned int i;
 1101              		.loc 1 159 2 view .LVU324
 160:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 46


 1102              		.loc 1 160 2 view .LVU325
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1103              		.loc 1 162 2 view .LVU326
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1104              		.loc 1 162 15 view .LVU327
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1105              		.loc 1 162 2 is_stmt 0 view .LVU328
 1106 001a 4B1C     		adds	r3, r1, #1
 1107              	.LVL123:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1108              		.loc 1 162 2 view .LVU329
 1109 001c 17D0     		beq	.L93
 1110 001e 0131     		adds	r1, r1, #1
 1111 0020 0144     		add	r1, r1, r0
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1112              		.loc 1 158 21 view .LVU330
 1113 0022 45F6A523 		movw	r3, #23205
 1114              	.LVL124:
 1115              	.L92:
 163:src/storage.c **** 		crc ^= *d++;
 1116              		.loc 1 163 3 is_stmt 1 view .LVU331
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1117              		.loc 1 164 10 is_stmt 0 view .LVU332
 1118 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1119              	.LVL125:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1120              		.loc 1 164 10 view .LVU333
 1121 002a 5BBA     		rev16	r3, r3
 1122              	.LVL126:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1123              		.loc 1 164 10 view .LVU334
 1124 002c 9BB2     		uxth	r3, r3
 1125              	.LVL127:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1126              		.loc 1 164 3 is_stmt 1 view .LVU335
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1127              		.loc 1 164 7 is_stmt 0 view .LVU336
 1128 002e 5340     		eors	r3, r3, r2
 1129              	.LVL128:
 165:src/storage.c **** 		crc ^= crc << 12;
 1130              		.loc 1 165 3 is_stmt 1 view .LVU337
 165:src/storage.c **** 		crc ^= crc << 12;
 1131              		.loc 1 165 7 is_stmt 0 view .LVU338
 1132 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1133 0034 5340     		eors	r3, r3, r2
 1134              	.LVL129:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1135              		.loc 1 166 3 is_stmt 1 view .LVU339
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1136              		.loc 1 166 7 is_stmt 0 view .LVU340
 1137 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1138              	.LVL130:
 167:src/storage.c **** 	}
 1139              		.loc 1 167 3 is_stmt 1 view .LVU341
 167:src/storage.c **** 	}
 1140              		.loc 1 167 25 is_stmt 0 view .LVU342
 1141 003a 5A01     		lsls	r2, r3, #5
ARM GAS  /tmp/ccoue2SN.s 			page 47


 1142 003c 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1143              		.loc 1 167 7 view .LVU343
 1144 0040 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1145              		.loc 1 162 2 view .LVU344
 1146 0042 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1147              		.loc 1 167 7 view .LVU345
 1148 0044 83EA0203 		eor	r3, r3, r2
 1149              	.LVL131:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1150              		.loc 1 162 27 is_stmt 1 view .LVU346
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1151              		.loc 1 162 15 view .LVU347
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1152              		.loc 1 162 2 is_stmt 0 view .LVU348
 1153 0048 EDD1     		bne	.L92
 169:src/storage.c **** }
 1154              		.loc 1 169 2 is_stmt 1 view .LVU349
 1155              	.LVL132:
 169:src/storage.c **** }
 1156              		.loc 1 169 2 is_stmt 0 view .LVU350
 1157              	.LBE51:
 1158              	.LBE50:
 197:src/storage.c **** 
 1159              		.loc 1 197 1 view .LVU351
 1160 004a 1846     		mov	r0, r3
 1161 004c 08BD     		pop	{r3, pc}
 1162              	.LVL133:
 1163              	.L93:
 1164              	.LBB53:
 1165              	.LBB52:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1166              		.loc 1 158 21 view .LVU352
 1167 004e 45F6A523 		movw	r3, #23205
 1168              	.LVL134:
 169:src/storage.c **** }
 1169              		.loc 1 169 2 is_stmt 1 view .LVU353
 169:src/storage.c **** }
 1170              		.loc 1 169 2 is_stmt 0 view .LVU354
 1171              	.LBE52:
 1172              	.LBE53:
 197:src/storage.c **** 
 1173              		.loc 1 197 1 view .LVU355
 1174 0052 1846     		mov	r0, r3
 1175 0054 08BD     		pop	{r3, pc}
 1176              	.L97:
 1177 0056 00BF     		.align	2
 1178              	.L96:
 1179 0058 00000000 		.word	main_ram
 1180              		.cfi_endproc
 1181              	.LFE6:
 1183              		.section	.text.checksum_ram,"ax",%progbits
 1184              		.align	1
 1185              		.p2align 2,,3
 1186              		.global	checksum_ram
ARM GAS  /tmp/ccoue2SN.s 			page 48


 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu fpv4-sp-d16
 1192              	checksum_ram:
 1193              	.LFB7:
 205:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1194              		.loc 1 205 1 is_stmt 1 view -0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
 206:src/storage.c **** 			      Crc, &Crc );
 1199              		.loc 1 206 2 view .LVU357
 206:src/storage.c **** 			      Crc, &Crc );
 1200              		.loc 1 206 9 is_stmt 0 view .LVU358
 1201 0000 044B     		ldr	r3, .L99
 1202 0002 1868     		ldr	r0, [r3]
 1203 0004 40F2FE71 		movw	r1, #2046
 1204 0008 B0F8FE27 		ldrh	r2, [r0, #2046]
 1205 000c 4318     		adds	r3, r0, r1
 1206 000e FFF7FEBF 		b	test_checksum
 1207              	.LVL135:
 1208              	.L100:
 1209 0012 00BF     		.align	2
 1210              	.L99:
 1211 0014 00000000 		.word	main_ram
 1212              		.cfi_endproc
 1213              	.LFE7:
 1215              		.section	.text.checksum_backup,"ax",%progbits
 1216              		.align	1
 1217              		.p2align 2,,3
 1218              		.global	checksum_backup
 1219              		.syntax unified
 1220              		.thumb
 1221              		.thumb_func
 1222              		.fpu fpv4-sp-d16
 1224              	checksum_backup:
 1225              	.LFB8:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1226              		.loc 1 216 1 is_stmt 1 view -0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1231              		.loc 1 217 2 view .LVU360
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1232              		.loc 1 217 9 is_stmt 0 view .LVU361
 1233 0000 144B     		ldr	r3, .L107
 1234 0002 1968     		ldr	r1, [r3]
 1235 0004 B1F8FE07 		ldrh	r0, [r1, #2046]
 1236              	.LVL136:
 1237              	.LBB54:
 1238              	.LBI54:
 177:src/storage.c **** {
 1239              		.loc 1 177 12 is_stmt 1 view .LVU362
ARM GAS  /tmp/ccoue2SN.s 			page 49


 1240              	.LBB55:
 179:src/storage.c **** 	crc = crc16( data, length );
 1241              		.loc 1 179 2 view .LVU363
 180:src/storage.c **** 	
 1242              		.loc 1 180 2 view .LVU364
 1243              	.LBB56:
 1244              	.LBI56:
 156:src/storage.c **** {
 1245              		.loc 1 156 20 view .LVU365
 1246              	.LBB57:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1247              		.loc 1 158 2 view .LVU366
 159:src/storage.c **** 	unsigned int i;
 1248              		.loc 1 159 2 view .LVU367
 160:src/storage.c **** 
 1249              		.loc 1 160 2 view .LVU368
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1250              		.loc 1 162 2 view .LVU369
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1251              		.loc 1 162 15 view .LVU370
 1252              	.LBE57:
 1253              	.LBE56:
 1254              	.LBE55:
 1255              	.LBE54:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1256              		.loc 1 216 1 is_stmt 0 view .LVU371
 1257 0008 10B4     		push	{r4}
 1258              		.cfi_def_cfa_offset 4
 1259              		.cfi_offset 4, -4
 1260              	.LBB62:
 1261              	.LBB60:
 1262              	.LBB59:
 1263              	.LBB58:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1264              		.loc 1 158 21 view .LVU372
 1265 000a 45F6A523 		movw	r3, #23205
 1266 000e 01F2FE74 		addw	r4, r1, #2046
 1267              	.LVL137:
 1268              	.L102:
 163:src/storage.c **** 		crc ^= *d++;
 1269              		.loc 1 163 3 is_stmt 1 view .LVU373
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1270              		.loc 1 164 10 is_stmt 0 view .LVU374
 1271 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1272              	.LVL138:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1273              		.loc 1 164 10 view .LVU375
 1274 0016 5BBA     		rev16	r3, r3
 1275              	.LVL139:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1276              		.loc 1 164 10 view .LVU376
 1277 0018 9BB2     		uxth	r3, r3
 1278              	.LVL140:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1279              		.loc 1 164 3 is_stmt 1 view .LVU377
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1280              		.loc 1 164 7 is_stmt 0 view .LVU378
ARM GAS  /tmp/ccoue2SN.s 			page 50


 1281 001a 5340     		eors	r3, r3, r2
 1282              	.LVL141:
 165:src/storage.c **** 		crc ^= crc << 12;
 1283              		.loc 1 165 3 is_stmt 1 view .LVU379
 165:src/storage.c **** 		crc ^= crc << 12;
 1284              		.loc 1 165 7 is_stmt 0 view .LVU380
 1285 001c C3F30312 		ubfx	r2, r3, #4, #4
 1286 0020 5340     		eors	r3, r3, r2
 1287              	.LVL142:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1288              		.loc 1 166 3 is_stmt 1 view .LVU381
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1289              		.loc 1 166 7 is_stmt 0 view .LVU382
 1290 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1291              	.LVL143:
 167:src/storage.c **** 	}
 1292              		.loc 1 167 3 is_stmt 1 view .LVU383
 167:src/storage.c **** 	}
 1293              		.loc 1 167 25 is_stmt 0 view .LVU384
 1294 0026 5A01     		lsls	r2, r3, #5
 1295 0028 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1296              		.loc 1 167 7 view .LVU385
 1297 002c 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1298              		.loc 1 162 2 view .LVU386
 1299 002e 8C42     		cmp	r4, r1
 167:src/storage.c **** 	}
 1300              		.loc 1 167 7 view .LVU387
 1301 0030 83EA0203 		eor	r3, r3, r2
 1302              	.LVL144:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1303              		.loc 1 162 27 is_stmt 1 view .LVU388
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1304              		.loc 1 162 15 view .LVU389
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1305              		.loc 1 162 2 is_stmt 0 view .LVU390
 1306 0034 EDD1     		bne	.L102
 169:src/storage.c **** }
 1307              		.loc 1 169 2 is_stmt 1 view .LVU391
 1308              	.LVL145:
 169:src/storage.c **** }
 1309              		.loc 1 169 2 is_stmt 0 view .LVU392
 1310              	.LBE58:
 1311              	.LBE59:
 182:src/storage.c **** 		*pcrc = crc;
 1312              		.loc 1 182 2 is_stmt 1 view .LVU393
 185:src/storage.c **** }
 1313              		.loc 1 185 2 view .LVU394
 185:src/storage.c **** }
 1314              		.loc 1 185 23 is_stmt 0 view .LVU395
 1315 0036 9842     		cmp	r0, r3
 1316 0038 07D0     		beq	.L104
 1317 003a 4AF23C53 		movw	r3, #42300
 1318              	.LVL146:
 185:src/storage.c **** }
 1319              		.loc 1 185 23 view .LVU396
ARM GAS  /tmp/ccoue2SN.s 			page 51


 1320 003e C01A     		subs	r0, r0, r3
 1321              	.LVL147:
 185:src/storage.c **** }
 1322              		.loc 1 185 23 view .LVU397
 1323 0040 18BF     		it	ne
 1324 0042 0120     		movne	r0, #1
 1325              	.LVL148:
 185:src/storage.c **** }
 1326              		.loc 1 185 23 view .LVU398
 1327              	.LBE60:
 1328              	.LBE62:
 219:src/storage.c **** 
 1329              		.loc 1 219 1 view .LVU399
 1330 0044 5DF8044B 		ldr	r4, [sp], #4
 1331              		.cfi_remember_state
 1332              		.cfi_restore 4
 1333              		.cfi_def_cfa_offset 0
 1334              	.LVL149:
 219:src/storage.c **** 
 1335              		.loc 1 219 1 view .LVU400
 1336 0048 7047     		bx	lr
 1337              	.LVL150:
 1338              	.L104:
 1339              		.cfi_restore_state
 1340              	.LBB63:
 1341              	.LBB61:
 185:src/storage.c **** }
 1342              		.loc 1 185 23 view .LVU401
 1343 004a 0020     		movs	r0, #0
 1344              	.LVL151:
 185:src/storage.c **** }
 1345              		.loc 1 185 23 view .LVU402
 1346              	.LBE61:
 1347              	.LBE63:
 219:src/storage.c **** 
 1348              		.loc 1 219 1 view .LVU403
 1349 004c 5DF8044B 		ldr	r4, [sp], #4
 1350              		.cfi_restore 4
 1351              		.cfi_def_cfa_offset 0
 1352 0050 7047     		bx	lr
 1353              	.L108:
 1354 0052 00BF     		.align	2
 1355              	.L107:
 1356 0054 00000000 		.word	backup_ram
 1357              		.cfi_endproc
 1358              	.LFE8:
 1360              		.section	.text.clpall,"ax",%progbits
 1361              		.align	1
 1362              		.p2align 2,,3
 1363              		.global	clpall
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1367              		.fpu fpv4-sp-d16
 1369              	clpall:
 1370              	.LFB11:
 248:src/storage.c **** 	clrretstk_pc();
ARM GAS  /tmp/ccoue2SN.s 			page 52


 1371              		.loc 1 248 1 is_stmt 1 view -0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 249:src/storage.c **** 	stoend();
 1375              		.loc 1 249 2 view .LVU405
 248:src/storage.c **** 	clrretstk_pc();
 1376              		.loc 1 248 1 is_stmt 0 view .LVU406
 1377 0000 08B5     		push	{r3, lr}
 1378              		.cfi_def_cfa_offset 8
 1379              		.cfi_offset 3, -8
 1380              		.cfi_offset 14, -4
 249:src/storage.c **** 	stoend();
 1381              		.loc 1 249 2 view .LVU407
 1382 0002 FFF7FEFF 		bl	clrretstk_pc
 1383              	.LVL152:
 250:src/storage.c **** }
 1384              		.loc 1 250 2 is_stmt 1 view .LVU408
 1385              	.LBB64:
 1386              	.LBI64:
 237:src/storage.c **** {
 1387              		.loc 1 237 13 view .LVU409
 1388              	.LBB65:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1389              		.loc 1 239 2 view .LVU410
 1390 0006 044B     		ldr	r3, .L111
 1391 0008 1B68     		ldr	r3, [r3]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1392              		.loc 1 239 11 is_stmt 0 view .LVU411
 1393 000a 0121     		movs	r1, #1
 240:src/storage.c **** }
 1394              		.loc 1 240 12 view .LVU412
 1395 000c 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1396              		.loc 1 239 11 view .LVU413
 1397 0010 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1398              		.loc 1 240 2 is_stmt 1 view .LVU414
 240:src/storage.c **** }
 1399              		.loc 1 240 12 is_stmt 0 view .LVU415
 1400 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1401              	.LBE65:
 1402              	.LBE64:
 251:src/storage.c **** 
 1403              		.loc 1 251 1 view .LVU416
 1404 0014 08BD     		pop	{r3, pc}
 1405              	.L112:
 1406 0016 00BF     		.align	2
 1407              	.L111:
 1408 0018 00000000 		.word	main_ram
 1409              		.cfi_endproc
 1410              	.LFE11:
 1412              		.section	.text.clrall,"ax",%progbits
 1413              		.align	1
 1414              		.p2align 2,,3
 1415              		.global	clrall
 1416              		.syntax unified
ARM GAS  /tmp/ccoue2SN.s 			page 53


 1417              		.thumb
 1418              		.thumb_func
 1419              		.fpu fpv4-sp-d16
 1421              	clrall:
 1422              	.LFB14:
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1423              		.loc 1 301 1 is_stmt 1 view -0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 302:src/storage.c **** 	xeq_init_contexts();
 1427              		.loc 1 302 2 view .LVU418
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1428              		.loc 1 301 1 is_stmt 0 view .LVU419
 1429 0000 10B5     		push	{r4, lr}
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 4, -8
 1432              		.cfi_offset 14, -4
 302:src/storage.c **** 	xeq_init_contexts();
 1433              		.loc 1 302 10 view .LVU420
 1434 0002 124C     		ldr	r4, .L115
 1435 0004 2368     		ldr	r3, [r4]
 1436 0006 6422     		movs	r2, #100
 1437 0008 83F8CF27 		strb	r2, [r3, #1999]
 303:src/storage.c **** 	clrreg( OP_CLREG );
 1438              		.loc 1 303 2 is_stmt 1 view .LVU421
 1439 000c FFF7FEFF 		bl	xeq_init_contexts
 1440              	.LVL153:
 304:src/storage.c **** 	clrstk( OP_CLSTK );
 1441              		.loc 1 304 2 view .LVU422
 1442 0010 3E20     		movs	r0, #62
 1443 0012 FFF7FEFF 		bl	clrreg
 1444              	.LVL154:
 305:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1445              		.loc 1 305 2 view .LVU423
 1446 0016 4020     		movs	r0, #64
 1447 0018 FFF7FEFF 		bl	clrstk
 1448              	.LVL155:
 306:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1449              		.loc 1 306 2 view .LVU424
 1450 001c 7420     		movs	r0, #116
 1451 001e FFF7FEFF 		bl	clralpha
 1452              	.LVL156:
 307:src/storage.c **** 	clpall();
 1453              		.loc 1 307 2 view .LVU425
 1454 0022 4520     		movs	r0, #69
 1455 0024 FFF7FEFF 		bl	clrflags
 1456              	.LVL157:
 308:src/storage.c **** 
 1457              		.loc 1 308 2 view .LVU426
 1458              	.LBB66:
 1459              	.LBI66:
 247:src/storage.c **** {
 1460              		.loc 1 247 6 view .LVU427
 1461              	.LBB67:
 249:src/storage.c **** 	stoend();
 1462              		.loc 1 249 2 view .LVU428
ARM GAS  /tmp/ccoue2SN.s 			page 54


 1463 0028 FFF7FEFF 		bl	clrretstk_pc
 1464              	.LVL158:
 250:src/storage.c **** }
 1465              		.loc 1 250 2 view .LVU429
 1466              	.LBB68:
 1467              	.LBI68:
 237:src/storage.c **** {
 1468              		.loc 1 237 13 view .LVU430
 1469              	.LBB69:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1470              		.loc 1 239 2 view .LVU431
 1471 002c 2368     		ldr	r3, [r4]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1472              		.loc 1 239 11 is_stmt 0 view .LVU432
 1473 002e 0121     		movs	r1, #1
 240:src/storage.c **** }
 1474              		.loc 1 240 12 view .LVU433
 1475 0030 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1476              		.loc 1 239 11 view .LVU434
 1477 0034 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1478              		.loc 1 240 2 is_stmt 1 view .LVU435
 240:src/storage.c **** }
 1479              		.loc 1 240 12 is_stmt 0 view .LVU436
 1480 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1481              	.LBE69:
 1482              	.LBE68:
 1483              	.LBE67:
 1484              	.LBE66:
 310:src/storage.c **** 	State2.test = TST_NONE;
 1485              		.loc 1 310 2 is_stmt 1 view .LVU437
 1486 0038 FFF7FEFF 		bl	reset_shift
 1487              	.LVL159:
 311:src/storage.c **** 
 1488              		.loc 1 311 2 view .LVU438
 311:src/storage.c **** 
 1489              		.loc 1 311 14 is_stmt 0 view .LVU439
 1490 003c 0449     		ldr	r1, .L115+4
 313:src/storage.c **** }
 1491              		.loc 1 313 10 view .LVU440
 1492 003e 054B     		ldr	r3, .L115+8
 311:src/storage.c **** 
 1493              		.loc 1 311 14 view .LVU441
 1494 0040 0720     		movs	r0, #7
 313:src/storage.c **** }
 1495              		.loc 1 313 10 view .LVU442
 1496 0042 0022     		movs	r2, #0
 311:src/storage.c **** 
 1497              		.loc 1 311 14 view .LVU443
 1498 0044 C873     		strb	r0, [r1, #15]
 313:src/storage.c **** }
 1499              		.loc 1 313 2 is_stmt 1 view .LVU444
 313:src/storage.c **** }
 1500              		.loc 1 313 10 is_stmt 0 view .LVU445
 1501 0046 1A60     		str	r2, [r3]
 314:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 55


 1502              		.loc 1 314 1 view .LVU446
 1503 0048 10BD     		pop	{r4, pc}
 1504              	.L116:
 1505 004a 00BF     		.align	2
 1506              	.L115:
 1507 004c 00000000 		.word	main_ram
 1508 0050 00000000 		.word	StateWhileOn
 1509 0054 00000000 		.word	DispMsg
 1510              		.cfi_endproc
 1511              	.LFE14:
 1513              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1514              		.align	2
 1515              	.LC6:
 1516 0000 45726173 		.ascii	"Erased\000"
 1516      656400
 1517              		.section	.text.reset,"ax",%progbits
 1518              		.align	1
 1519              		.p2align 2,,3
 1520              		.global	reset
 1521              		.syntax unified
 1522              		.thumb
 1523              		.thumb_func
 1524              		.fpu fpv4-sp-d16
 1526              	reset:
 1527              	.LFB15:
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1528              		.loc 1 321 1 is_stmt 1 view -0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 322:src/storage.c **** 	clrall();
 1532              		.loc 1 322 3 view .LVU448
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1533              		.loc 1 321 1 is_stmt 0 view .LVU449
 1534 0000 10B5     		push	{r4, lr}
 1535              		.cfi_def_cfa_offset 8
 1536              		.cfi_offset 4, -8
 1537              		.cfi_offset 14, -4
 322:src/storage.c **** 	clrall();
 1538              		.loc 1 322 3 view .LVU450
 1539 0002 0B4C     		ldr	r4, .L119
 1540 0004 4FF40062 		mov	r2, #2048
 1541 0008 0021     		movs	r1, #0
 1542 000a 2068     		ldr	r0, [r4]
 1543 000c FFF7FEFF 		bl	xset
 1544              	.LVL160:
 323:src/storage.c **** 	init_state();
 1545              		.loc 1 323 2 is_stmt 1 view .LVU451
 1546 0010 FFF7FEFF 		bl	clrall
 1547              	.LVL161:
 324:src/storage.c **** 	UState.contrast = 6;
 1548              		.loc 1 324 2 view .LVU452
 1549 0014 FFF7FEFF 		bl	init_state
 1550              	.LVL162:
 325:src/storage.c **** #ifdef INFRARED
 1551              		.loc 1 325 2 view .LVU453
 325:src/storage.c **** #ifdef INFRARED
ARM GAS  /tmp/ccoue2SN.s 			page 56


 1552              		.loc 1 325 18 is_stmt 0 view .LVU454
 1553 0018 2368     		ldr	r3, [r4]
 329:src/storage.c **** }
 1554              		.loc 1 329 10 view .LVU455
 1555 001a 0649     		ldr	r1, .L119+4
 325:src/storage.c **** #ifdef INFRARED
 1556              		.loc 1 325 18 view .LVU456
 1557 001c 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 329:src/storage.c **** }
 1558              		.loc 1 329 10 view .LVU457
 1559 0020 0548     		ldr	r0, .L119+8
 1560 0022 0860     		str	r0, [r1]
 325:src/storage.c **** #ifdef INFRARED
 1561              		.loc 1 325 18 view .LVU458
 1562 0024 0621     		movs	r1, #6
 1563 0026 61F30302 		bfi	r2, r1, #0, #4
 1564 002a 83F8E427 		strb	r2, [r3, #2020]
 329:src/storage.c **** }
 1565              		.loc 1 329 2 is_stmt 1 view .LVU459
 330:src/storage.c **** 
 1566              		.loc 1 330 1 is_stmt 0 view .LVU460
 1567 002e 10BD     		pop	{r4, pc}
 1568              	.L120:
 1569              		.align	2
 1570              	.L119:
 1571 0030 00000000 		.word	main_ram
 1572 0034 00000000 		.word	DispMsg
 1573 0038 00000000 		.word	.LC6
 1574              		.cfi_endproc
 1575              	.LFE15:
 1577              		.section	.text.stoprog,"ax",%progbits
 1578              		.align	1
 1579              		.p2align 2,,3
 1580              		.global	stoprog
 1581              		.syntax unified
 1582              		.thumb
 1583              		.thumb_func
 1584              		.fpu fpv4-sp-d16
 1586              	stoprog:
 1587              	.LVL163:
 1588              	.LFB16:
 336:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1589              		.loc 1 336 26 is_stmt 1 view -0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 337:src/storage.c **** 	int i;
 1593              		.loc 1 337 2 view .LVU462
 336:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1594              		.loc 1 336 26 is_stmt 0 view .LVU463
 1595 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1596              		.cfi_def_cfa_offset 32
 1597              		.cfi_offset 3, -32
 1598              		.cfi_offset 4, -28
 1599              		.cfi_offset 5, -24
 1600              		.cfi_offset 6, -20
 1601              		.cfi_offset 7, -16
ARM GAS  /tmp/ccoue2SN.s 			page 57


 1602              		.cfi_offset 8, -12
 1603              		.cfi_offset 9, -8
 1604              		.cfi_offset 14, -4
 339:src/storage.c **** 
 1605              		.loc 1 339 20 view .LVU464
 1606 0004 374F     		ldr	r7, .L141
 337:src/storage.c **** 	int i;
 1607              		.loc 1 337 18 view .LVU465
 1608 0006 00F47046 		and	r6, r0, #61440
 339:src/storage.c **** 
 1609              		.loc 1 339 20 view .LVU466
 1610 000a 3B68     		ldr	r3, [r7]
 337:src/storage.c **** 	int i;
 1611              		.loc 1 337 33 view .LVU467
 1612 000c B6F5704F 		cmp	r6, #61440
 339:src/storage.c **** 
 1613              		.loc 1 339 20 view .LVU468
 1614 0010 B3F8E057 		ldrh	r5, [r3, #2016]
 1615              	.LVL164:
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1616              		.loc 1 341 2 is_stmt 1 view .LVU469
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1617              		.loc 1 341 5 is_stmt 0 view .LVU470
 1618 0014 5B88     		ldrh	r3, [r3, #2]
 336:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1619              		.loc 1 336 26 view .LVU471
 1620 0016 0446     		mov	r4, r0
 337:src/storage.c **** 	int i;
 1621              		.loc 1 337 33 view .LVU472
 1622 0018 57D0     		beq	.L122
 1623              	.LVL165:
 338:src/storage.c **** 	unsigned int pc = state_pc();
 1624              		.loc 1 338 2 is_stmt 1 discriminator 4 view .LVU473
 339:src/storage.c **** 
 1625              		.loc 1 339 2 discriminator 4 view .LVU474
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1626              		.loc 1 341 5 is_stmt 0 discriminator 4 view .LVU475
 1627 001a AB42     		cmp	r3, r5
 337:src/storage.c **** 	int i;
 1628              		.loc 1 337 33 discriminator 4 view .LVU476
 1629 001c 4FF00108 		mov	r8, #1
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1630              		.loc 1 341 5 discriminator 4 view .LVU477
 1631 0020 44D0     		beq	.L137
 1632              	.LVL166:
 1633              	.L123:
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1634              		.loc 1 344 2 is_stmt 1 view .LVU478
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1635              		.loc 1 344 5 is_stmt 0 view .LVU479
 1636 0022 15F47049 		ands	r9, r5, #61440
 1637 0026 4BD1     		bne	.L138
 1638              	.LVL167:
 1639              	.L124:
 348:src/storage.c **** 	xeq_init_contexts();
 1640              		.loc 1 348 2 is_stmt 1 view .LVU480
 1641 0028 FFF7FEFF 		bl	clrretstk
ARM GAS  /tmp/ccoue2SN.s 			page 58


 1642              	.LVL168:
 349:src/storage.c **** 	if ( ProgFree < off ) {
 1643              		.loc 1 349 2 view .LVU481
 1644 002c FFF7FEFF 		bl	xeq_init_contexts
 1645              	.LVL169:
 350:src/storage.c **** 		return;
 1646              		.loc 1 350 2 view .LVU482
 350:src/storage.c **** 		return;
 1647              		.loc 1 350 16 is_stmt 0 view .LVU483
 1648 0030 2D4B     		ldr	r3, .L141+4
 350:src/storage.c **** 		return;
 1649              		.loc 1 350 5 view .LVU484
 1650 0032 1B68     		ldr	r3, [r3]
 1651 0034 4345     		cmp	r3, r8
 1652 0036 01DA     		bge	.L139
 363:src/storage.c **** 
 1653              		.loc 1 363 1 view .LVU485
 1654 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1655              	.LVL170:
 1656              	.L139:
 353:src/storage.c **** 	ProgEnd += off;
 1657              		.loc 1 353 2 is_stmt 1 view .LVU486
 353:src/storage.c **** 	ProgEnd += off;
 1658              		.loc 1 353 11 is_stmt 0 view .LVU487
 1659 003c 3B68     		ldr	r3, [r7]
 1660 003e B3F802C0 		ldrh	ip, [r3, #2]
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1661              		.loc 1 354 10 view .LVU488
 1662 0042 B3F8EE27 		ldrh	r2, [r3, #2030]
 353:src/storage.c **** 	ProgEnd += off;
 1663              		.loc 1 353 11 view .LVU489
 1664 0046 C444     		add	ip, ip, r8
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1665              		.loc 1 354 10 view .LVU490
 1666 0048 4244     		add	r2, r2, r8
 353:src/storage.c **** 	ProgEnd += off;
 1667              		.loc 1 353 11 view .LVU491
 1668 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1669              		.loc 1 354 2 is_stmt 1 view .LVU492
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1670              		.loc 1 354 10 is_stmt 0 view .LVU493
 1671 004e A3F8EE27 		strh	r2, [r3, #2030]	@ movhi
 355:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1672              		.loc 1 355 2 is_stmt 1 view .LVU494
 355:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1673              		.loc 1 355 7 is_stmt 0 view .LVU495
 1674 0052 4946     		mov	r1, r9
 1675 0054 2846     		mov	r0, r5
 1676 0056 FFF7FEFF 		bl	do_inc
 1677              	.LVL171:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1678              		.loc 1 356 12 view .LVU496
 1679 005a D7F800C0 		ldr	ip, [r7]
 1680 005e BCF80230 		ldrh	r3, [ip, #2]
 1681              	.LVL172:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
ARM GAS  /tmp/ccoue2SN.s 			page 59


 1682              		.loc 1 356 2 is_stmt 1 view .LVU497
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1683              		.loc 1 356 10 is_stmt 0 view .LVU498
 1684 0062 5A1C     		adds	r2, r3, #1
 1685              	.LVL173:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1686              		.loc 1 356 26 is_stmt 1 view .LVU499
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1687              		.loc 1 356 2 is_stmt 0 view .LVU500
 1688 0064 8242     		cmp	r2, r0
 1689 0066 39DD     		ble	.L126
 1690 0068 03F10043 		add	r3, r3, #-2147483648
 1691 006c 0CF10407 		add	r7, ip, #4
 1692 0070 0133     		adds	r3, r3, #1
 1693 0072 A2EB0802 		sub	r2, r2, r8
 1694              	.LVL174:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1695              		.loc 1 356 2 view .LVU501
 1696 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1697              	.LVL175:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1698              		.loc 1 356 2 view .LVU502
 1699 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1700 007e 07EB4005 		add	r5, r7, r0, lsl #1
 1701              	.LVL176:
 1702              	.L127:
 357:src/storage.c **** 	}
 1703              		.loc 1 357 3 is_stmt 1 discriminator 3 view .LVU503
 357:src/storage.c **** 	}
 1704              		.loc 1 357 23 is_stmt 0 discriminator 3 view .LVU504
 1705 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 357:src/storage.c **** 	}
 1706              		.loc 1 357 15 discriminator 3 view .LVU505
 1707 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1708              		.loc 1 356 40 is_stmt 1 discriminator 3 view .LVU506
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1709              		.loc 1 356 26 discriminator 3 view .LVU507
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1710              		.loc 1 356 2 is_stmt 0 discriminator 3 view .LVU508
 1711 008a AB42     		cmp	r3, r5
 1712 008c F9D1     		bne	.L127
 1713              	.L128:
 359:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1714              		.loc 1 359 2 is_stmt 1 view .LVU509
 359:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1715              		.loc 1 359 5 is_stmt 0 view .LVU510
 1716 008e B6F5704F 		cmp	r6, #61440
 360:src/storage.c **** 	Prog_1[pc] = c;
 1717              		.loc 1 360 3 is_stmt 1 view .LVU511
 361:src/storage.c **** 	State.pc = pc;
 1718              		.loc 1 361 2 view .LVU512
 360:src/storage.c **** 	Prog_1[pc] = c;
 1719              		.loc 1 360 22 is_stmt 0 view .LVU513
 1720 0092 04BF     		itt	eq
 1721 0094 230C     		lsreq	r3, r4, #16
 360:src/storage.c **** 	Prog_1[pc] = c;
ARM GAS  /tmp/ccoue2SN.s 			page 60


 1722              		.loc 1 360 18 view .LVU514
 1723 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 361:src/storage.c **** 	State.pc = pc;
 1724              		.loc 1 361 8 view .LVU515
 1725 009a 00F10043 		add	r3, r0, #-2147483648
 1726 009e 013B     		subs	r3, r3, #1
 361:src/storage.c **** 	State.pc = pc;
 1727              		.loc 1 361 13 view .LVU516
 1728 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
 362:src/storage.c **** }
 1729              		.loc 1 362 2 is_stmt 1 view .LVU517
 362:src/storage.c **** }
 1730              		.loc 1 362 11 is_stmt 0 view .LVU518
 1731 00a4 ACF8E007 		strh	r0, [ip, #2016]	@ movhi
 363:src/storage.c **** 
 1732              		.loc 1 363 1 view .LVU519
 1733 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1734              	.LVL177:
 1735              	.L137:
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1736              		.loc 1 341 22 discriminator 1 view .LVU520
 1737 00ac B0F59D7F 		cmp	r0, #314
 1738 00b0 B7D0     		beq	.L123
 342:src/storage.c **** 
 1739              		.loc 1 342 3 is_stmt 1 view .LVU521
 1740 00b2 4FF49D70 		mov	r0, #314
 1741              	.LVL178:
 342:src/storage.c **** 
 1742              		.loc 1 342 3 is_stmt 0 view .LVU522
 1743 00b6 FFF7FEFF 		bl	stoprog
 1744              	.LVL179:
 1745              	.L140:
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1746              		.loc 1 344 2 is_stmt 1 view .LVU523
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1747              		.loc 1 344 5 is_stmt 0 view .LVU524
 1748 00ba 15F47049 		ands	r9, r5, #61440
 1749 00be B3D0     		beq	.L124
 1750              	.L138:
 345:src/storage.c **** 		return;
 1751              		.loc 1 345 3 is_stmt 1 view .LVU525
 363:src/storage.c **** 
 1752              		.loc 1 363 1 is_stmt 0 view .LVU526
 1753 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1754              		.cfi_remember_state
 1755              		.cfi_restore 14
 1756              		.cfi_restore 9
 1757              		.cfi_restore 8
 1758              		.cfi_restore 7
 1759              		.cfi_restore 6
 1760              		.cfi_restore 5
 1761              		.cfi_restore 4
 1762              		.cfi_restore 3
 1763              		.cfi_def_cfa_offset 0
 1764              	.LVL180:
 345:src/storage.c **** 		return;
 1765              		.loc 1 345 3 view .LVU527
ARM GAS  /tmp/ccoue2SN.s 			page 61


 1766 00c4 1320     		movs	r0, #19
 1767 00c6 FFF7FEBF 		b	report_warn
 1768              	.LVL181:
 1769              	.L122:
 1770              		.cfi_restore_state
 338:src/storage.c **** 	unsigned int pc = state_pc();
 1771              		.loc 1 338 2 is_stmt 1 view .LVU528
 339:src/storage.c **** 
 1772              		.loc 1 339 2 view .LVU529
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1773              		.loc 1 341 5 is_stmt 0 view .LVU530
 1774 00ca AB42     		cmp	r3, r5
 337:src/storage.c **** 	int i;
 1775              		.loc 1 337 33 view .LVU531
 1776 00cc 4FF00208 		mov	r8, #2
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1777              		.loc 1 341 5 view .LVU532
 1778 00d0 A7D1     		bne	.L123
 342:src/storage.c **** 
 1779              		.loc 1 342 3 is_stmt 1 view .LVU533
 1780 00d2 4FF49D70 		mov	r0, #314
 1781              	.LVL182:
 342:src/storage.c **** 
 1782              		.loc 1 342 3 is_stmt 0 view .LVU534
 1783 00d6 FFF7FEFF 		bl	stoprog
 1784              	.LVL183:
 1785 00da EEE7     		b	.L140
 1786              	.LVL184:
 1787              	.L126:
 342:src/storage.c **** 
 1788              		.loc 1 342 3 view .LVU535
 1789 00dc 0CF10407 		add	r7, ip, #4
 1790 00e0 D5E7     		b	.L128
 1791              	.L142:
 1792 00e2 00BF     		.align	2
 1793              	.L141:
 1794 00e4 00000000 		.word	main_ram
 1795 00e8 00000000 		.word	ProgFree
 1796              		.cfi_endproc
 1797              	.LFE16:
 1799              		.section	.text.delprog,"ax",%progbits
 1800              		.align	1
 1801              		.p2align 2,,3
 1802              		.global	delprog
 1803              		.syntax unified
 1804              		.thumb
 1805              		.thumb_func
 1806              		.fpu fpv4-sp-d16
 1808              	delprog:
 1809              	.LFB17:
 370:src/storage.c **** 	int i;
 1810              		.loc 1 370 1 is_stmt 1 view -0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 0
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 371:src/storage.c **** 	const unsigned int pc = state_pc();
 1814              		.loc 1 371 2 view .LVU537
ARM GAS  /tmp/ccoue2SN.s 			page 62


 372:src/storage.c **** 	int off;
 1815              		.loc 1 372 2 view .LVU538
 370:src/storage.c **** 	int i;
 1816              		.loc 1 370 1 is_stmt 0 view .LVU539
 1817 0000 70B5     		push	{r4, r5, r6, lr}
 1818              		.cfi_def_cfa_offset 16
 1819              		.cfi_offset 4, -16
 1820              		.cfi_offset 5, -12
 1821              		.cfi_offset 6, -8
 1822              		.cfi_offset 14, -4
 372:src/storage.c **** 	int off;
 1823              		.loc 1 372 26 view .LVU540
 1824 0002 194D     		ldr	r5, .L155
 1825 0004 2B68     		ldr	r3, [r5]
 1826 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 1827              	.LVL185:
 373:src/storage.c **** 
 1828              		.loc 1 373 2 is_stmt 1 view .LVU541
 375:src/storage.c **** 		return;
 1829              		.loc 1 375 2 view .LVU542
 375:src/storage.c **** 		return;
 1830              		.loc 1 375 7 is_stmt 0 view .LVU543
 1831 000a 2046     		mov	r0, r4
 1832 000c FFF7FEFF 		bl	check_delete_prog
 1833              	.LVL186:
 375:src/storage.c **** 		return;
 1834              		.loc 1 375 5 view .LVU544
 1835 0010 48BB     		cbnz	r0, .L143
 377:src/storage.c **** 		return;
 1836              		.loc 1 377 2 is_stmt 1 view .LVU545
 377:src/storage.c **** 		return;
 1837              		.loc 1 377 5 is_stmt 0 view .LVU546
 1838 0012 44B3     		cbz	r4, .L143
 380:src/storage.c **** 	ProgSize -= off;
 1839              		.loc 1 380 2 is_stmt 1 view .LVU547
 380:src/storage.c **** 	ProgSize -= off;
 1840              		.loc 1 380 8 is_stmt 0 view .LVU548
 1841 0014 2D68     		ldr	r5, [r5]
 1842 0016 05EB4403 		add	r3, r5, r4, lsl #1
 381:src/storage.c **** 	ProgEnd -= off;
 1843              		.loc 1 381 11 view .LVU549
 1844 001a 6A88     		ldrh	r2, [r5, #2]
 380:src/storage.c **** 	ProgSize -= off;
 1845              		.loc 1 380 33 view .LVU550
 1846 001c 5B88     		ldrh	r3, [r3, #2]
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1847              		.loc 1 382 10 view .LVU551
 1848 001e B5F8EE17 		ldrh	r1, [r5, #2030]
 380:src/storage.c **** 	ProgSize -= off;
 1849              		.loc 1 380 33 view .LVU552
 1850 0022 03F47043 		and	r3, r3, #61440
 1851 0026 B3F5704F 		cmp	r3, #61440
 1852 002a 14BF     		ite	ne
 1853 002c 0126     		movne	r6, #1
 1854 002e 0226     		moveq	r6, #2
 381:src/storage.c **** 	ProgEnd -= off;
 1855              		.loc 1 381 11 view .LVU553
ARM GAS  /tmp/ccoue2SN.s 			page 63


 1856 0030 921B     		subs	r2, r2, r6
 1857 0032 92B2     		uxth	r2, r2
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1858              		.loc 1 382 10 view .LVU554
 1859 0034 891B     		subs	r1, r1, r6
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1860              		.loc 1 383 2 view .LVU555
 1861 0036 9442     		cmp	r4, r2
 380:src/storage.c **** 	ProgSize -= off;
 1862              		.loc 1 380 33 view .LVU556
 1863 0038 3346     		mov	r3, r6
 1864              	.LVL187:
 381:src/storage.c **** 	ProgEnd -= off;
 1865              		.loc 1 381 2 is_stmt 1 view .LVU557
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1866              		.loc 1 383 10 is_stmt 0 view .LVU558
 1867 003a 2046     		mov	r0, r4
 381:src/storage.c **** 	ProgEnd -= off;
 1868              		.loc 1 381 11 view .LVU559
 1869 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1870              		.loc 1 382 2 is_stmt 1 view .LVU560
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1871              		.loc 1 382 10 is_stmt 0 view .LVU561
 1872 003e A5F8EE17 		strh	r1, [r5, #2030]	@ movhi
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1873              		.loc 1 383 2 is_stmt 1 view .LVU562
 1874              	.LVL188:
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1875              		.loc 1 383 16 view .LVU563
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1876              		.loc 1 383 2 is_stmt 0 view .LVU564
 1877 0042 0CDC     		bgt	.L148
 1878 0044 2344     		add	r3, r3, r4
 1879              	.LVL189:
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1880              		.loc 1 383 2 view .LVU565
 1881 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1882 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1883              	.LVL190:
 1884              	.L147:
 384:src/storage.c **** 	decpc();
 1885              		.loc 1 384 3 is_stmt 1 discriminator 3 view .LVU566
 384:src/storage.c **** 	decpc();
 1886              		.loc 1 384 23 is_stmt 0 discriminator 3 view .LVU567
 1887 004e 33F8021F 		ldrh	r1, [r3, #2]!
 384:src/storage.c **** 	decpc();
 1888              		.loc 1 384 15 discriminator 3 view .LVU568
 1889 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1890              		.loc 1 383 37 is_stmt 1 discriminator 3 view .LVU569
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1891              		.loc 1 383 21 is_stmt 0 discriminator 3 view .LVU570
 1892 0056 6988     		ldrh	r1, [r5, #2]
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1893              		.loc 1 383 37 discriminator 3 view .LVU571
 1894 0058 0130     		adds	r0, r0, #1
ARM GAS  /tmp/ccoue2SN.s 			page 64


 1895              	.LVL191:
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1896              		.loc 1 383 16 is_stmt 1 discriminator 3 view .LVU572
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1897              		.loc 1 383 2 is_stmt 0 discriminator 3 view .LVU573
 1898 005a 8142     		cmp	r1, r0
 1899 005c F7DA     		bge	.L147
 1900              	.L148:
 385:src/storage.c **** }
 1901              		.loc 1 385 2 is_stmt 1 view .LVU574
 386:src/storage.c **** 
 1902              		.loc 1 386 1 is_stmt 0 view .LVU575
 1903 005e BDE87040 		pop	{r4, r5, r6, lr}
 1904              		.cfi_remember_state
 1905              		.cfi_restore 14
 1906              		.cfi_restore 6
 1907              		.cfi_restore 5
 1908              		.cfi_restore 4
 1909              		.cfi_def_cfa_offset 0
 1910              	.LVL192:
 385:src/storage.c **** }
 1911              		.loc 1 385 2 view .LVU576
 1912 0062 FFF7FEBF 		b	decpc
 1913              	.LVL193:
 1914              	.L143:
 1915              		.cfi_restore_state
 386:src/storage.c **** 
 1916              		.loc 1 386 1 view .LVU577
 1917 0066 70BD     		pop	{r4, r5, r6, pc}
 1918              	.LVL194:
 1919              	.L156:
 386:src/storage.c **** 
 1920              		.loc 1 386 1 view .LVU578
 1921              		.align	2
 1922              	.L155:
 1923 0068 00000000 		.word	main_ram
 1924              		.cfi_endproc
 1925              	.LFE17:
 1927              		.section	.text.append_program,"ax",%progbits
 1928              		.align	1
 1929              		.p2align 2,,3
 1930              		.global	append_program
 1931              		.syntax unified
 1932              		.thumb
 1933              		.thumb_func
 1934              		.fpu fpv4-sp-d16
 1936              	append_program:
 1937              	.LVL195:
 1938              	.LFB18:
 394:src/storage.c **** 	unsigned short pc;
 1939              		.loc 1 394 1 is_stmt 1 view -0
 1940              		.cfi_startproc
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 0, uses_anonymous_args = 0
 395:src/storage.c **** 	int space_needed = length - ProgFree;
 1943              		.loc 1 395 2 view .LVU580
 396:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 65


 1944              		.loc 1 396 2 view .LVU581
 394:src/storage.c **** 	unsigned short pc;
 1945              		.loc 1 394 1 is_stmt 0 view .LVU582
 1946 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1947              		.cfi_def_cfa_offset 24
 1948              		.cfi_offset 4, -24
 1949              		.cfi_offset 5, -20
 1950              		.cfi_offset 6, -16
 1951              		.cfi_offset 7, -12
 1952              		.cfi_offset 8, -8
 1953              		.cfi_offset 14, -4
 398:src/storage.c **** 		/*
 1954              		.loc 1 398 7 view .LVU583
 1955 0004 DFF8C080 		ldr	r8, .L176+8
 396:src/storage.c **** 
 1956              		.loc 1 396 28 view .LVU584
 1957 0008 2D4B     		ldr	r3, .L176
 398:src/storage.c **** 		/*
 1958              		.loc 1 398 7 view .LVU585
 1959 000a D8F80070 		ldr	r7, [r8]
 396:src/storage.c **** 
 1960              		.loc 1 396 6 view .LVU586
 1961 000e 1D68     		ldr	r5, [r3]
 398:src/storage.c **** 		/*
 1962              		.loc 1 398 7 view .LVU587
 1963 0010 7B88     		ldrh	r3, [r7, #2]
 398:src/storage.c **** 		/*
 1964              		.loc 1 398 5 view .LVU588
 1965 0012 012B     		cmp	r3, #1
 394:src/storage.c **** 	unsigned short pc;
 1966              		.loc 1 394 1 view .LVU589
 1967 0014 0C46     		mov	r4, r1
 1968 0016 0646     		mov	r6, r0
 396:src/storage.c **** 
 1969              		.loc 1 396 6 view .LVU590
 1970 0018 A1EB0505 		sub	r5, r1, r5
 1971              	.LVL196:
 398:src/storage.c **** 		/*
 1972              		.loc 1 398 2 is_stmt 1 view .LVU591
 398:src/storage.c **** 		/*
 1973              		.loc 1 398 5 is_stmt 0 view .LVU592
 1974 001c 0BD0     		beq	.L173
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 1975              		.loc 1 405 2 is_stmt 1 view .LVU593
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 1976              		.loc 1 405 5 is_stmt 0 view .LVU594
 1977 001e B1F5687F 		cmp	r1, #928
 1978 0022 39DC     		bgt	.L160
 408:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1979              		.loc 1 408 2 is_stmt 1 view .LVU595
 408:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1980              		.loc 1 408 30 is_stmt 0 view .LVU596
 1981 0024 C3F56873 		rsb	r3, r3, #928
 408:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1982              		.loc 1 408 5 view .LVU597
 1983 0028 8B42     		cmp	r3, r1
 1984 002a 0BDA     		bge	.L159
ARM GAS  /tmp/ccoue2SN.s 			page 66


 1985              	.LVL197:
 1986              	.L172:
 1987              	.LBB70:
 428:src/storage.c **** 		}
 1988              		.loc 1 428 4 is_stmt 1 view .LVU598
 1989              	.LBE70:
 440:src/storage.c **** 
 1990              		.loc 1 440 1 is_stmt 0 view .LVU599
 1991 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1992              		.cfi_remember_state
 1993              		.cfi_restore 14
 1994              		.cfi_restore 8
 1995              		.cfi_restore 7
 1996              		.cfi_restore 6
 1997              		.cfi_restore 5
 1998              		.cfi_restore 4
 1999              		.cfi_def_cfa_offset 0
 2000              	.LVL198:
 2001              	.LBB71:
 428:src/storage.c **** 		}
 2002              		.loc 1 428 11 view .LVU600
 2003 0030 0B20     		movs	r0, #11
 2004 0032 FFF7FEBF 		b	report_err
 2005              	.LVL199:
 2006              	.L173:
 2007              		.cfi_restore_state
 428:src/storage.c **** 		}
 2008              		.loc 1 428 11 view .LVU601
 2009              	.LBE71:
 402:src/storage.c **** 		--ProgSize;
 2010              		.loc 1 402 3 is_stmt 1 view .LVU602
 403:src/storage.c **** 	}
 2011              		.loc 1 403 3 is_stmt 0 view .LVU603
 2012 0036 0023     		movs	r3, #0
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2013              		.loc 1 405 5 view .LVU604
 2014 0038 B1F5687F 		cmp	r1, #928
 402:src/storage.c **** 		--ProgSize;
 2015              		.loc 1 402 3 view .LVU605
 2016 003c 05F1FF35 		add	r5, r5, #-1
 2017              	.LVL200:
 403:src/storage.c **** 	}
 2018              		.loc 1 403 3 is_stmt 1 view .LVU606
 2019 0040 7B80     		strh	r3, [r7, #2]	@ movhi
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2020              		.loc 1 405 2 view .LVU607
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2021              		.loc 1 405 5 is_stmt 0 view .LVU608
 2022 0042 29DC     		bgt	.L160
 2023              	.L159:
 415:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2024              		.loc 1 415 2 is_stmt 1 view .LVU609
 2025 0044 FFF7FEFF 		bl	clrretstk
 2026              	.LVL201:
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
 2027              		.loc 1 416 2 view .LVU610
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
ARM GAS  /tmp/ccoue2SN.s 			page 67


 2028              		.loc 1 416 5 is_stmt 0 view .LVU611
 2029 0048 002D     		cmp	r5, #0
 2030 004a 11DD     		ble	.L162
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
 2031              		.loc 1 416 40 discriminator 1 view .LVU612
 2032 004c 1D4B     		ldr	r3, .L176+4
 2033 004e 1B68     		ldr	r3, [r3]
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
 2034              		.loc 1 416 24 discriminator 1 view .LVU613
 2035 0050 3BBB     		cbnz	r3, .L174
 2036              	.LBB72:
 421:src/storage.c **** 		if (is_dblmode())
 2037              		.loc 1 421 3 is_stmt 1 view .LVU614
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2038              		.loc 1 422 3 view .LVU615
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2039              		.loc 1 422 7 is_stmt 0 view .LVU616
 2040 0052 FFF7FEFF 		bl	is_dblmode
 2041              	.LVL202:
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2042              		.loc 1 422 6 view .LVU617
 2043 0056 68BB     		cbnz	r0, .L175
 2044              	.L165:
 425:src/storage.c **** 
 2045              		.loc 1 425 4 is_stmt 1 view .LVU618
 425:src/storage.c **** 
 2046              		.loc 1 425 11 is_stmt 0 view .LVU619
 2047 0058 D8F80030 		ldr	r3, [r8]
 2048 005c 93F8CF07 		ldrb	r0, [r3, #1999]	@ zero_extendqisi2
 425:src/storage.c **** 
 2049              		.loc 1 425 38 view .LVU620
 2050 0060 0335     		adds	r5, r5, #3
 2051              	.LVL203:
 425:src/storage.c **** 
 2052              		.loc 1 425 9 view .LVU621
 2053 0062 A0EBA500 		sub	r0, r0, r5, asr #2
 2054              	.LVL204:
 2055              	.L166:
 427:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2056              		.loc 1 427 3 is_stmt 1 view .LVU622
 427:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2057              		.loc 1 427 6 is_stmt 0 view .LVU623
 2058 0066 0028     		cmp	r0, #0
 2059 0068 E0DB     		blt	.L172
 430:src/storage.c **** 	}
 2060              		.loc 1 430 3 is_stmt 1 view .LVU624
 2061 006a 7D21     		movs	r1, #125
 2062 006c FFF7FEFF 		bl	cmdregs
 2063              	.LVL205:
 2064              	.L162:
 430:src/storage.c **** 	}
 2065              		.loc 1 430 3 is_stmt 0 view .LVU625
 2066              	.LBE72:
 435:src/storage.c **** 	ProgSize += length;
 2067              		.loc 1 435 2 is_stmt 1 view .LVU626
 435:src/storage.c **** 	ProgSize += length;
 2068              		.loc 1 435 7 is_stmt 0 view .LVU627
ARM GAS  /tmp/ccoue2SN.s 			page 68


 2069 0070 D8F80020 		ldr	r2, [r8]
 2070 0074 5388     		ldrh	r3, [r2, #2]
 2071              	.LVL206:
 436:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2072              		.loc 1 436 2 is_stmt 1 view .LVU628
 435:src/storage.c **** 	ProgSize += length;
 2073              		.loc 1 435 5 is_stmt 0 view .LVU629
 2074 0076 5D1C     		adds	r5, r3, #1
 437:src/storage.c **** 	set_pc( pc );
 2075              		.loc 1 437 16 view .LVU630
 2076 0078 ADB2     		uxth	r5, r5
 436:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2077              		.loc 1 436 11 view .LVU631
 2078 007a 2344     		add	r3, r3, r4
 2079              	.LVL207:
 437:src/storage.c **** 	set_pc( pc );
 2080              		.loc 1 437 16 view .LVU632
 2081 007c 02EB4500 		add	r0, r2, r5, lsl #1
 436:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2082              		.loc 1 436 11 view .LVU633
 2083 0080 5380     		strh	r3, [r2, #2]	@ movhi
 2084              	.LVL208:
 437:src/storage.c **** 	set_pc( pc );
 2085              		.loc 1 437 2 is_stmt 1 view .LVU634
 2086 0082 3146     		mov	r1, r6
 2087 0084 6200     		lsls	r2, r4, #1
 2088 0086 0230     		adds	r0, r0, #2
 2089 0088 FFF7FEFF 		bl	xcopy
 2090              	.LVL209:
 438:src/storage.c **** 	return 0;
 2091              		.loc 1 438 2 view .LVU635
 2092 008c 2846     		mov	r0, r5
 2093 008e FFF7FEFF 		bl	set_pc
 2094              	.LVL210:
 439:src/storage.c **** }
 2095              		.loc 1 439 2 view .LVU636
 440:src/storage.c **** 
 2096              		.loc 1 440 1 is_stmt 0 view .LVU637
 2097 0092 0020     		movs	r0, #0
 2098 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2099              	.LVL211:
 2100              	.L160:
 406:src/storage.c **** 	}
 2101              		.loc 1 406 3 is_stmt 1 view .LVU638
 440:src/storage.c **** 
 2102              		.loc 1 440 1 is_stmt 0 view .LVU639
 2103 0098 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2104              		.cfi_remember_state
 2105              		.cfi_restore 14
 2106              		.cfi_restore 8
 2107              		.cfi_restore 7
 2108              		.cfi_restore 6
 2109              		.cfi_restore 5
 2110              		.cfi_restore 4
 2111              		.cfi_def_cfa_offset 0
 2112              	.LVL212:
 406:src/storage.c **** 	}
ARM GAS  /tmp/ccoue2SN.s 			page 69


 2113              		.loc 1 406 10 view .LVU640
 2114 009c 1220     		movs	r0, #18
 2115              	.LVL213:
 406:src/storage.c **** 	}
 2116              		.loc 1 406 10 view .LVU641
 2117 009e FFF7FEBF 		b	report_err
 2118              	.LVL214:
 2119              	.L174:
 2120              		.cfi_restore_state
 417:src/storage.c **** 		sigmaDeallocate();
 2121              		.loc 1 417 3 is_stmt 1 view .LVU642
 417:src/storage.c **** 		sigmaDeallocate();
 2122              		.loc 1 417 16 is_stmt 0 view .LVU643
 2123 00a2 ED1A     		subs	r5, r5, r3
 2124              	.LVL215:
 418:src/storage.c **** 	}
 2125              		.loc 1 418 3 is_stmt 1 view .LVU644
 2126 00a4 FFF7FEFF 		bl	sigmaDeallocate
 2127              	.LVL216:
 420:src/storage.c **** 		int regs;
 2128              		.loc 1 420 2 view .LVU645
 420:src/storage.c **** 		int regs;
 2129              		.loc 1 420 5 is_stmt 0 view .LVU646
 2130 00a8 002D     		cmp	r5, #0
 2131 00aa E1DD     		ble	.L162
 2132              	.LBB73:
 421:src/storage.c **** 		if (is_dblmode())
 2133              		.loc 1 421 3 is_stmt 1 view .LVU647
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2134              		.loc 1 422 3 view .LVU648
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2135              		.loc 1 422 7 is_stmt 0 view .LVU649
 2136 00ac FFF7FEFF 		bl	is_dblmode
 2137              	.LVL217:
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2138              		.loc 1 422 6 view .LVU650
 2139 00b0 0028     		cmp	r0, #0
 2140 00b2 D1D0     		beq	.L165
 2141              	.L175:
 423:src/storage.c **** 		else
 2142              		.loc 1 423 4 is_stmt 1 view .LVU651
 423:src/storage.c **** 		else
 2143              		.loc 1 423 11 is_stmt 0 view .LVU652
 2144 00b4 FFF7FEFF 		bl	global_regs
 2145              	.LVL218:
 423:src/storage.c **** 		else
 2146              		.loc 1 423 44 view .LVU653
 2147 00b8 0735     		adds	r5, r5, #7
 2148              	.LVL219:
 423:src/storage.c **** 		else
 2149              		.loc 1 423 25 view .LVU654
 2150 00ba A0EBE500 		sub	r0, r0, r5, asr #3
 2151              	.LVL220:
 423:src/storage.c **** 		else
 2152              		.loc 1 423 25 view .LVU655
 2153 00be D2E7     		b	.L166
 2154              	.L177:
ARM GAS  /tmp/ccoue2SN.s 			page 70


 2155              		.align	2
 2156              	.L176:
 2157 00c0 00000000 		.word	ProgFree
 2158 00c4 00000000 		.word	SizeStatRegs
 2159 00c8 00000000 		.word	main_ram
 2160              	.LBE73:
 2161              		.cfi_endproc
 2162              	.LFE18:
 2164              		.section	.text.init_library,"ax",%progbits
 2165              		.align	1
 2166              		.p2align 2,,3
 2167              		.global	init_library
 2168              		.syntax unified
 2169              		.thumb
 2170              		.thumb_func
 2171              		.fpu fpv4-sp-d16
 2173              	init_library:
 2174              	.LFB21:
 656:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2175              		.loc 1 656 1 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 256
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 657:src/storage.c **** 	  struct {
 2179              		.loc 1 657 2 view .LVU657
 656:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2180              		.loc 1 656 1 is_stmt 0 view .LVU658
 2181 0000 10B5     		push	{r4, lr}
 2182              		.cfi_def_cfa_offset 8
 2183              		.cfi_offset 4, -8
 2184              		.cfi_offset 14, -4
 657:src/storage.c **** 	  struct {
 2185              		.loc 1 657 7 view .LVU659
 2186 0002 0C4C     		ldr	r4, .L185
 2187 0004 2168     		ldr	r1, [r4]
 656:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2188              		.loc 1 656 1 view .LVU660
 2189 0006 C0B0     		sub	sp, sp, #256
 2190              		.cfi_def_cfa_offset 264
 657:src/storage.c **** 	  struct {
 2191              		.loc 1 657 7 view .LVU661
 2192 0008 0846     		mov	r0, r1
 2193 000a FFF7FEFF 		bl	checksum_region
 2194              	.LVL221:
 657:src/storage.c **** 	  struct {
 2195              		.loc 1 657 5 view .LVU662
 2196 000e 08B9     		cbnz	r0, .L184
 668:src/storage.c **** 
 2197              		.loc 1 668 1 view .LVU663
 2198 0010 40B0     		add	sp, sp, #256
 2199              		.cfi_remember_state
 2200              		.cfi_def_cfa_offset 8
 2201              		@ sp needed
 2202 0012 10BD     		pop	{r4, pc}
 2203              	.L184:
 2204              		.cfi_restore_state
 2205              	.LBB74:
ARM GAS  /tmp/ccoue2SN.s 			page 71


 658:src/storage.c **** 			unsigned short crc;
 2206              		.loc 1 658 4 is_stmt 1 view .LVU664
 663:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2207              		.loc 1 663 3 view .LVU665
 664:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2208              		.loc 1 664 3 view .LVU666
 664:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2209              		.loc 1 664 11 is_stmt 0 view .LVU667
 2210 0014 4AF23C53 		movw	r3, #42300
 665:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2211              		.loc 1 665 3 view .LVU668
 2212 0018 FC22     		movs	r2, #252
 2213 001a FF21     		movs	r1, #255
 2214 001c 01A8     		add	r0, sp, #4
 664:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2215              		.loc 1 664 11 view .LVU669
 2216 001e 0093     		str	r3, [sp]
 665:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2217              		.loc 1 665 3 is_stmt 1 view .LVU670
 2218 0020 FFF7FEFF 		bl	xset
 2219              	.LVL222:
 666:src/storage.c **** 	}
 2220              		.loc 1 666 3 view .LVU671
 2221 0024 2068     		ldr	r0, [r4]
 2222 0026 6946     		mov	r1, sp
 2223 0028 0122     		movs	r2, #1
 2224 002a FFF7FEFF 		bl	program_flash
 2225              	.LVL223:
 2226              	.LBE74:
 668:src/storage.c **** 
 2227              		.loc 1 668 1 is_stmt 0 view .LVU672
 2228 002e 40B0     		add	sp, sp, #256
 2229              		.cfi_def_cfa_offset 8
 2230              		@ sp needed
 2231 0030 10BD     		pop	{r4, pc}
 2232              	.L186:
 2233 0032 00BF     		.align	2
 2234              	.L185:
 2235 0034 00000000 		.word	library_ram
 2236              		.cfi_endproc
 2237              	.LFE21:
 2239              		.section	.text.flash_remove,"ax",%progbits
 2240              		.align	1
 2241              		.p2align 2,,3
 2242              		.global	flash_remove
 2243              		.syntax unified
 2244              		.thumb
 2245              		.thumb_func
 2246              		.fpu fpv4-sp-d16
 2248              	flash_remove:
 2249              	.LVL224:
 2250              	.LFB23:
 733:src/storage.c **** 	const int size = UserFlash.size - count;
 2251              		.loc 1 733 1 is_stmt 1 view -0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 0
 2254              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccoue2SN.s 			page 72


 2255              		@ link register save eliminated.
 734:src/storage.c **** 	step_no = offsetLIB( step_no );
 2256              		.loc 1 734 2 view .LVU674
 734:src/storage.c **** 	step_no = offsetLIB( step_no );
 2257              		.loc 1 734 19 is_stmt 0 view .LVU675
 2258 0000 084B     		ldr	r3, .L189
 2259 0002 1A68     		ldr	r2, [r3]
 735:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2260              		.loc 1 735 12 view .LVU676
 2261 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2262              	.LVL225:
 734:src/storage.c **** 	step_no = offsetLIB( step_no );
 2263              		.loc 1 734 28 view .LVU677
 2264 0008 5388     		ldrh	r3, [r2, #2]
 735:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2265              		.loc 1 735 10 view .LVU678
 2266 000a 0138     		subs	r0, r0, #1
 733:src/storage.c **** 	const int size = UserFlash.size - count;
 2267              		.loc 1 733 1 view .LVU679
 2268 000c 10B4     		push	{r4}
 2269              		.cfi_def_cfa_offset 4
 2270              		.cfi_offset 4, -4
 736:src/storage.c **** 			     size - step_no, size );
 2271              		.loc 1 736 32 view .LVU680
 2272 000e 0432     		adds	r2, r2, #4
 736:src/storage.c **** 			     size - step_no, size );
 2273              		.loc 1 736 57 view .LVU681
 2274 0010 4418     		adds	r4, r0, r1
 734:src/storage.c **** 	step_no = offsetLIB( step_no );
 2275              		.loc 1 734 12 view .LVU682
 2276 0012 5B1A     		subs	r3, r3, r1
 2277              	.LVL226:
 735:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2278              		.loc 1 735 2 is_stmt 1 view .LVU683
 736:src/storage.c **** 			     size - step_no, size );
 2279              		.loc 1 736 2 view .LVU684
 736:src/storage.c **** 			     size - step_no, size );
 2280              		.loc 1 736 9 is_stmt 0 view .LVU685
 2281 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2282              	.LVL227:
 738:src/storage.c **** 
 2283              		.loc 1 738 1 view .LVU686
 2284 0018 5DF8044B 		ldr	r4, [sp], #4
 2285              		.cfi_restore 4
 2286              		.cfi_def_cfa_offset 0
 736:src/storage.c **** 			     size - step_no, size );
 2287              		.loc 1 736 9 view .LVU687
 2288 001c 1A1A     		subs	r2, r3, r0
 2289 001e FFF7FEBF 		b	flash_append
 2290              	.LVL228:
 2291              	.L190:
 736:src/storage.c **** 			     size - step_no, size );
 2292              		.loc 1 736 9 view .LVU688
 2293 0022 00BF     		.align	2
 2294              	.L189:
 2295 0024 00000000 		.word	library_ram
 2296              		.cfi_endproc
ARM GAS  /tmp/ccoue2SN.s 			page 73


 2297              	.LFE23:
 2299              		.section	.text.clrprog,"ax",%progbits
 2300              		.align	1
 2301              		.p2align 2,,3
 2302              		.global	clrprog
 2303              		.syntax unified
 2304              		.thumb
 2305              		.thumb_func
 2306              		.fpu fpv4-sp-d16
 2308              	clrprog:
 2309              	.LFB13:
 273:src/storage.c **** 	update_program_bounds( 1 );
 2310              		.loc 1 273 1 is_stmt 1 view -0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2314              		.loc 1 274 2 view .LVU690
 273:src/storage.c **** 	update_program_bounds( 1 );
 2315              		.loc 1 273 1 is_stmt 0 view .LVU691
 2316 0000 10B5     		push	{r4, lr}
 2317              		.cfi_def_cfa_offset 8
 2318              		.cfi_offset 4, -8
 2319              		.cfi_offset 14, -4
 275:src/storage.c **** 		/*
 2320              		.loc 1 275 7 view .LVU692
 2321 0002 234C     		ldr	r4, .L200
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2322              		.loc 1 274 2 view .LVU693
 2323 0004 0120     		movs	r0, #1
 2324 0006 FFF7FEFF 		bl	update_program_bounds
 2325              	.LVL229:
 275:src/storage.c **** 		/*
 2326              		.loc 1 275 2 is_stmt 1 view .LVU694
 275:src/storage.c **** 		/*
 2327              		.loc 1 275 7 is_stmt 0 view .LVU695
 2328 000a 2368     		ldr	r3, [r4]
 2329 000c B3F8EC07 		ldrh	r0, [r3, #2028]
 275:src/storage.c **** 		/*
 2330              		.loc 1 275 5 view .LVU696
 2331 0010 820B     		lsrs	r2, r0, #14
 2332 0012 012A     		cmp	r2, #1
 2333 0014 28D0     		beq	.L197
 282:src/storage.c **** 			return;
 2334              		.loc 1 282 3 is_stmt 1 view .LVU697
 282:src/storage.c **** 			return;
 2335              		.loc 1 282 8 is_stmt 0 view .LVU698
 2336 0016 FFF7FEFF 		bl	check_delete_prog
 2337              	.LVL230:
 282:src/storage.c **** 			return;
 2338              		.loc 1 282 6 view .LVU699
 2339 001a 00B1     		cbz	r0, .L198
 294:src/storage.c ****  
 2340              		.loc 1 294 1 view .LVU700
 2341 001c 10BD     		pop	{r4, pc}
 2342              	.L198:
 285:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
ARM GAS  /tmp/ccoue2SN.s 			page 74


 2343              		.loc 1 285 3 is_stmt 1 view .LVU701
 2344 001e FFF7FEFF 		bl	clrretstk
 2345              	.LVL231:
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2346              		.loc 1 286 3 view .LVU702
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2347              		.loc 1 286 10 is_stmt 0 view .LVU703
 2348 0022 2368     		ldr	r3, [r4]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2349              		.loc 1 286 17 view .LVU704
 2350 0024 B3F8EC07 		ldrh	r0, [r3, #2028]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2351              		.loc 1 286 37 view .LVU705
 2352 0028 B3F8EE17 		ldrh	r1, [r3, #2030]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2353              		.loc 1 286 48 view .LVU706
 2354 002c 5A88     		ldrh	r2, [r3, #2]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2355              		.loc 1 286 17 view .LVU707
 2356 002e 00F10040 		add	r0, r0, #-2147483648
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2357              		.loc 1 286 10 view .LVU708
 2358 0032 0433     		adds	r3, r3, #4
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2359              		.loc 1 286 57 view .LVU709
 2360 0034 521A     		subs	r2, r2, r1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2361              		.loc 1 286 17 view .LVU710
 2362 0036 0138     		subs	r0, r0, #1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2363              		.loc 1 286 3 view .LVU711
 2364 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2365 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2366 0040 5200     		lsls	r2, r2, #1
 2367 0042 FFF7FEFF 		bl	xcopy
 2368              	.LVL232:
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2369              		.loc 1 287 3 is_stmt 1 view .LVU712
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2370              		.loc 1 287 12 is_stmt 0 view .LVU713
 2371 0046 2268     		ldr	r2, [r4]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2372              		.loc 1 287 31 view .LVU714
 2373 0048 B2F8EC07 		ldrh	r0, [r2, #2028]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2374              		.loc 1 287 12 view .LVU715
 2375 004c 5388     		ldrh	r3, [r2, #2]
 2376 004e B2F8EE17 		ldrh	r1, [r2, #2030]
 2377 0052 0344     		add	r3, r3, r0
 2378 0054 013B     		subs	r3, r3, #1
 2379 0056 5B1A     		subs	r3, r3, r1
 2380 0058 9BB2     		uxth	r3, r3
 288:src/storage.c **** 			stoend();
 2381              		.loc 1 288 3 is_stmt 1 view .LVU716
 288:src/storage.c **** 			stoend();
 2382              		.loc 1 288 6 is_stmt 0 view .LVU717
 2383 005a B3B9     		cbnz	r3, .L199
ARM GAS  /tmp/ccoue2SN.s 			page 75


 289:src/storage.c **** 		}
 2384              		.loc 1 289 4 is_stmt 1 view .LVU718
 2385              	.LBB75:
 2386              	.LBI75:
 237:src/storage.c **** {
 2387              		.loc 1 237 13 view .LVU719
 2388              	.LBB76:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2389              		.loc 1 239 2 view .LVU720
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2390              		.loc 1 239 11 is_stmt 0 view .LVU721
 2391 005c 0121     		movs	r1, #1
 240:src/storage.c **** }
 2392              		.loc 1 240 12 view .LVU722
 2393 005e 4FF49D73 		mov	r3, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2394              		.loc 1 239 11 view .LVU723
 2395 0062 5180     		strh	r1, [r2, #2]	@ movhi
 240:src/storage.c **** }
 2396              		.loc 1 240 2 is_stmt 1 view .LVU724
 240:src/storage.c **** }
 2397              		.loc 1 240 12 is_stmt 0 view .LVU725
 2398 0064 9380     		strh	r3, [r2, #4]	@ movhi
 241:src/storage.c **** 
 2399              		.loc 1 241 1 view .LVU726
 2400 0066 08E0     		b	.L193
 2401              	.L197:
 2402              	.LBE76:
 2403              	.LBE75:
 279:src/storage.c **** 	}
 2404              		.loc 1 279 3 is_stmt 1 view .LVU727
 279:src/storage.c **** 	}
 2405              		.loc 1 279 28 is_stmt 0 view .LVU728
 2406 0068 B3F8EE17 		ldrh	r1, [r3, #2030]
 279:src/storage.c **** 	}
 2407              		.loc 1 279 36 view .LVU729
 2408 006c 0131     		adds	r1, r1, #1
 279:src/storage.c **** 	}
 2409              		.loc 1 279 3 view .LVU730
 2410 006e 091A     		subs	r1, r1, r0
 2411 0070 FFF7FEFF 		bl	flash_remove
 2412              	.LVL233:
 2413 0074 2368     		ldr	r3, [r4]
 2414 0076 B3F8EC07 		ldrh	r0, [r3, #2028]
 2415              	.L193:
 292:src/storage.c **** 	update_program_bounds( 1 );
 2416              		.loc 1 292 2 is_stmt 1 view .LVU731
 2417 007a 0138     		subs	r0, r0, #1
 2418 007c FFF7FEFF 		bl	set_pc
 2419              	.LVL234:
 293:src/storage.c **** }
 2420              		.loc 1 293 2 view .LVU732
 294:src/storage.c ****  
 2421              		.loc 1 294 1 is_stmt 0 view .LVU733
 2422 0080 BDE81040 		pop	{r4, lr}
 2423              		.cfi_remember_state
 2424              		.cfi_restore 14
ARM GAS  /tmp/ccoue2SN.s 			page 76


 2425              		.cfi_restore 4
 2426              		.cfi_def_cfa_offset 0
 293:src/storage.c **** }
 2427              		.loc 1 293 2 view .LVU734
 2428 0084 0120     		movs	r0, #1
 2429 0086 FFF7FEBF 		b	update_program_bounds
 2430              	.LVL235:
 2431              	.L199:
 2432              		.cfi_restore_state
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2433              		.loc 1 287 12 view .LVU735
 2434 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2435 008c F5E7     		b	.L193
 2436              	.L201:
 2437 008e 00BF     		.align	2
 2438              	.L200:
 2439 0090 00000000 		.word	main_ram
 2440              		.cfi_endproc
 2441              	.LFE13:
 2443              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2444              		.align	2
 2445              	.LC7:
 2446 0000 4E6F206C 		.ascii	"No label\000"
 2446      6162656C 
 2446      00
 2447              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2448              		.align	1
 2449              		.p2align 2,,3
 2450              		.syntax unified
 2451              		.thumb
 2452              		.thumb_func
 2453              		.fpu fpv4-sp-d16
 2455              	store_program_from_buffer.part.0:
 2456              	.LVL236:
 2457              	.LFB42:
1256:src/storage.c **** 
1257:src/storage.c **** void save_prog_file () {
1258:src/storage.c ****   opcode lbl; 
1259:src/storage.c ****   unsigned int pc;
1260:src/storage.c ****   unsigned short steps, prog_crc;
1261:src/storage.c ****   FRESULT f;
1262:src/storage.c ****   int data = WRITE;
1263:src/storage.c ****   int fss;
1264:src/storage.c ****   uint x=0;
1265:src/storage.c ****   char* buffer;
1266:src/storage.c ****   FLASH_REGION* fr;
1267:src/storage.c **** 
1268:src/storage.c ****   
1269:src/storage.c ****   if ( not_running() ) {
1270:src/storage.c ****     /*
1271:src/storage.c ****      *  Don't copy from library or XROM
1272:src/storage.c ****      */
1273:src/storage.c ****     pc = nLIB( state_pc() );
1274:src/storage.c ****     if ( pc == REGION_XROM ) {
1275:src/storage.c ****       report_err( ERR_ILLEGAL );
1276:src/storage.c ****       return;
1277:src/storage.c ****     }
ARM GAS  /tmp/ccoue2SN.s 			page 77


1278:src/storage.c ****     /*
1279:src/storage.c ****      *  Check if program is labeled
1280:src/storage.c ****      */
1281:src/storage.c ****     update_program_bounds( 1 );
1282:src/storage.c ****     lbl = getprog( ProgBegin );
1283:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1284:src/storage.c ****       report_err( ERR_NO_LBL );
1285:src/storage.c ****       return;
1286:src/storage.c ****     }
1287:src/storage.c ****     /*
1288:src/storage.c ****      *  Compute steps and crc for program
1289:src/storage.c ****      */
1290:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
1291:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
1292:src/storage.c ****     /*
1293:src/storage.c ****      * Get filename and open file
1294:src/storage.c ****      */
1295:src/storage.c ****     sys_disk_write_enable(1);
1296:src/storage.c **** 
1297:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
1298:src/storage.c ****     if (fss != 1) return;
1299:src/storage.c **** 
1300:src/storage.c ****     // File is now open with correct permissions
1301:src/storage.c **** 
1302:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
1303:src/storage.c ****     if (!buffer) {// calloc failure!
1304:src/storage.c ****       f_close(FPT);
1305:src/storage.c ****       sys_disk_write_enable(0);
1306:src/storage.c ****       DispMsg = "Mem short";
1307:src/storage.c ****       return;
1308:src/storage.c ****     }
1309:src/storage.c **** 
1310:src/storage.c ****     fr = (FLASH_REGION*) buffer;
1311:src/storage.c ****     fr->size = steps;
1312:src/storage.c ****     fr->crc = prog_crc;
1313:src/storage.c **** 
1314:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
1315:src/storage.c ****    
1316:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1317:src/storage.c ****     free(buffer);
1318:src/storage.c ****     
1319:src/storage.c ****     if (f != FR_OK) { //odd?
1320:src/storage.c ****       DispMsg = "Write err";
1321:src/storage.c ****     }
1322:src/storage.c ****     else {
1323:src/storage.c ****       DispMsg = "Written";
1324:src/storage.c ****     }
1325:src/storage.c ****       
1326:src/storage.c ****     f_close(FPT);
1327:src/storage.c ****     sys_disk_write_enable(0);
1328:src/storage.c ****     
1329:src/storage.c ****   }
1330:src/storage.c **** }
1331:src/storage.c **** 
1332:src/storage.c **** void load_prog_file () {
1333:src/storage.c ****   int fss, fsize;
1334:src/storage.c ****   int data = READ;
ARM GAS  /tmp/ccoue2SN.s 			page 78


1335:src/storage.c ****   uint x=0;
1336:src/storage.c ****   FLASH_REGION* fr;
1337:src/storage.c ****   char* buffer;
1338:src/storage.c **** 
1339:src/storage.c ****   fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW, 
1340:src/storage.c ****   if (fss != 1) return;
1341:src/storage.c **** 
1342:src/storage.c ****   // File is now open with correct permissions
1343:src/storage.c **** 
1344:src/storage.c ****   fsize = f_size(FPT);
1345:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
1346:src/storage.c ****     f_close(FPT);
1347:src/storage.c ****     DispMsg = "File too big";
1348:src/storage.c ****     return;
1349:src/storage.c ****   }
1350:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1351:src/storage.c ****   if (!buffer) {// calloc failure!
1352:src/storage.c ****     f_close(FPT);
1353:src/storage.c ****     DispMsg = "Mem short";
1354:src/storage.c ****     return;
1355:src/storage.c ****   }
1356:src/storage.c **** 
1357:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1358:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1359:src/storage.c ****     free(buffer);
1360:src/storage.c ****     f_close(FPT);
1361:src/storage.c ****     DispMsg = "File odd";
1362:src/storage.c ****     return;
1363:src/storage.c ****   }
1364:src/storage.c ****   f_close(FPT);
1365:src/storage.c **** 
1366:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1367:src/storage.c ****     
1368:src/storage.c ****   if (checksum_region(fr, fr)) {//crc failed - wrong filetype?
1369:src/storage.c ****     DispMsg = "File crc err";
1370:src/storage.c ****         free(buffer);
1371:src/storage.c ****     return;
1372:src/storage.c ****   }
1373:src/storage.c **** 
1374:src/storage.c ****   store_program_from_buffer (fr);
1375:src/storage.c ****   free(buffer);
1376:src/storage.c **** }
1377:src/storage.c **** 
1378:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
 2458              		.loc 1 1378 6 is_stmt 1 view -0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 0
 2461              		@ frame_needed = 0, uses_anonymous_args = 0
 2462              	.LBB77:
1379:src/storage.c **** { // buffer contains all of program file
1380:src/storage.c ****   unsigned int pc;
1381:src/storage.c ****   int space_needed, count, free;
1382:src/storage.c **** 
1383:src/storage.c ****   if ( not_running() ) {
1384:src/storage.c ****     /*
1385:src/storage.c ****      *  Check if program is labeled
1386:src/storage.c ****      */
ARM GAS  /tmp/ccoue2SN.s 			page 79


1387:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2463              		.loc 1 1387 5 view .LVU737
1388:src/storage.c ****     if ( isDBL(lbl) ) {
 2464              		.loc 1 1388 5 view .LVU738
 2465              		.loc 1 1388 8 is_stmt 0 view .LVU739
 2466 0000 8388     		ldrh	r3, [r0, #4]
 2467 0002 03F47043 		and	r3, r3, #61440
 2468 0006 B3F5704F 		cmp	r3, #61440
 2469 000a 03D0     		beq	.L215
 2470              	.LVL237:
1389:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
1390:src/storage.c ****     }
1391:src/storage.c ****     
1392:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1393:src/storage.c ****       DispMsg = "No label";
 2471              		.loc 1 1393 7 is_stmt 1 view .LVU740
 2472              		.loc 1 1393 15 is_stmt 0 view .LVU741
 2473 000c 264B     		ldr	r3, .L219
 2474 000e 274A     		ldr	r2, .L219+4
 2475 0010 1A60     		str	r2, [r3]
1394:src/storage.c ****       return;
 2476              		.loc 1 1394 7 is_stmt 1 view .LVU742
 2477 0012 7047     		bx	lr
 2478              	.LVL238:
 2479              	.L215:
1389:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2480              		.loc 1 1389 11 is_stmt 0 view .LVU743
 2481 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1392:src/storage.c ****       DispMsg = "No label";
 2482              		.loc 1 1392 11 view .LVU744
 2483 0016 01F47043 		and	r3, r1, #61440
1392:src/storage.c ****       DispMsg = "No label";
 2484              		.loc 1 1392 8 view .LVU745
 2485 001a B3F5704F 		cmp	r3, #61440
 2486              	.LBE77:
1378:src/storage.c **** { // buffer contains all of program file
 2487              		.loc 1 1378 6 view .LVU746
 2488 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2489              		.cfi_def_cfa_offset 32
 2490              		.cfi_offset 4, -32
 2491              		.cfi_offset 5, -28
 2492              		.cfi_offset 6, -24
 2493              		.cfi_offset 7, -20
 2494              		.cfi_offset 8, -16
 2495              		.cfi_offset 9, -12
 2496              		.cfi_offset 10, -8
 2497              		.cfi_offset 14, -4
 2498 0022 0446     		mov	r4, r0
 2499              	.LBB80:
1389:src/storage.c ****     }
 2500              		.loc 1 1389 7 is_stmt 1 view .LVU747
 2501              	.LVL239:
1392:src/storage.c ****       DispMsg = "No label";
 2502              		.loc 1 1392 5 view .LVU748
1392:src/storage.c ****       DispMsg = "No label";
 2503              		.loc 1 1392 8 is_stmt 0 view .LVU749
 2504 0024 04D1     		bne	.L203
ARM GAS  /tmp/ccoue2SN.s 			page 80


1392:src/storage.c ****       DispMsg = "No label";
 2505              		.loc 1 1392 22 view .LVU750
 2506 0026 11F4706F 		tst	r1, #3840
1392:src/storage.c ****       DispMsg = "No label";
 2507              		.loc 1 1392 25 view .LVU751
 2508 002a C1F30322 		ubfx	r2, r1, #8, #4
1392:src/storage.c ****       DispMsg = "No label";
 2509              		.loc 1 1392 22 view .LVU752
 2510 002e 04D0     		beq	.L204
 2511              	.L203:
 2512              	.LVL240:
1393:src/storage.c ****       return;
 2513              		.loc 1 1393 7 is_stmt 1 view .LVU753
1393:src/storage.c ****       return;
 2514              		.loc 1 1393 15 is_stmt 0 view .LVU754
 2515 0030 1D4B     		ldr	r3, .L219
 2516 0032 1E4A     		ldr	r2, .L219+4
 2517 0034 1A60     		str	r2, [r3]
 2518              		.loc 1 1394 7 is_stmt 1 view .LVU755
 2519              	.LBE80:
1395:src/storage.c ****     }
1396:src/storage.c ****     /*
1397:src/storage.c ****      *  Compute space needed
1398:src/storage.c ****      */
1399:src/storage.c ****     count = space_needed = fr->size;
1400:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1401:src/storage.c ****     
1402:src/storage.c ****     /*
1403:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1404:src/storage.c ****      */
1405:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1406:src/storage.c ****     if ( pc != 0 ) {
1407:src/storage.c ****       /*
1408:src/storage.c ****        *  CLP in library
1409:src/storage.c ****        */
1410:src/storage.c ****       unsigned int old_pc = state_pc();
1411:src/storage.c ****       set_pc( pc );
1412:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1413:src/storage.c ****       if ( space_needed <= free ) {
1414:src/storage.c **** 	clrprog();
1415:src/storage.c ****       }
1416:src/storage.c ****       set_pc( old_pc );
1417:src/storage.c ****     }
1418:src/storage.c ****     if ( space_needed > free ) {
1419:src/storage.c ****       report_err( ERR_FLASH_FULL );
1420:src/storage.c ****       return;
1421:src/storage.c ****     }
1422:src/storage.c ****     // 3. Append program
1423:src/storage.c ****     int i = flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1424:src/storage.c ****   }
1425:src/storage.c **** }
 2520              		.loc 1 1425 1 is_stmt 0 view .LVU756
 2521 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2522              	.LVL241:
 2523              	.L204:
 2524              	.LBB81:
1399:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
ARM GAS  /tmp/ccoue2SN.s 			page 81


 2525              		.loc 1 1399 5 is_stmt 1 view .LVU757
1400:src/storage.c ****     
 2526              		.loc 1 1400 41 is_stmt 0 view .LVU758
 2527 003a DFF87880 		ldr	r8, .L219+12
1399:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2528              		.loc 1 1399 26 view .LVU759
 2529 003e 4788     		ldrh	r7, [r0, #2]
 2530              	.LVL242:
1400:src/storage.c ****     
 2531              		.loc 1 1400 5 is_stmt 1 view .LVU760
1400:src/storage.c ****     
 2532              		.loc 1 1400 41 is_stmt 0 view .LVU761
 2533 0040 D8F80030 		ldr	r3, [r8]
1405:src/storage.c ****     if ( pc != 0 ) {
 2534              		.loc 1 1405 10 view .LVU762
 2535 0044 4FF48040 		mov	r0, #16384
 2536              	.LVL243:
1400:src/storage.c ****     
 2537              		.loc 1 1400 41 view .LVU763
 2538 0048 5D88     		ldrh	r5, [r3, #2]
1405:src/storage.c ****     if ( pc != 0 ) {
 2539              		.loc 1 1405 10 view .LVU764
 2540 004a FFF7FEFF 		bl	find_opcode_from
 2541              	.LVL244:
1400:src/storage.c ****     
 2542              		.loc 1 1400 10 view .LVU765
 2543 004e C5F5FF55 		rsb	r5, r5, #8160
 2544 0052 1E35     		adds	r5, r5, #30
 2545              	.LVL245:
1405:src/storage.c ****     if ( pc != 0 ) {
 2546              		.loc 1 1405 5 is_stmt 1 view .LVU766
1406:src/storage.c ****       /*
 2547              		.loc 1 1406 5 view .LVU767
1406:src/storage.c ****       /*
 2548              		.loc 1 1406 8 is_stmt 0 view .LVU768
 2549 0054 60B9     		cbnz	r0, .L216
1399:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2550              		.loc 1 1399 26 view .LVU769
 2551 0056 3E46     		mov	r6, r7
 2552              	.LVL246:
 2553              	.L206:
1418:src/storage.c ****       report_err( ERR_FLASH_FULL );
 2554              		.loc 1 1418 5 is_stmt 1 view .LVU770
1418:src/storage.c ****       report_err( ERR_FLASH_FULL );
 2555              		.loc 1 1418 8 is_stmt 0 view .LVU771
 2556 0058 B542     		cmp	r5, r6
 2557 005a 1DDB     		blt	.L217
1423:src/storage.c ****   }
 2558              		.loc 1 1423 5 is_stmt 1 view .LVU772
1423:src/storage.c ****   }
 2559              		.loc 1 1423 36 is_stmt 0 view .LVU773
 2560 005c D8F80030 		ldr	r3, [r8]
1423:src/storage.c ****   }
 2561              		.loc 1 1423 13 view .LVU774
 2562 0060 5888     		ldrh	r0, [r3, #2]
 2563 0062 211D     		adds	r1, r4, #4
 2564 0064 3B18     		adds	r3, r7, r0
ARM GAS  /tmp/ccoue2SN.s 			page 82


 2565 0066 3A46     		mov	r2, r7
 2566              	.LBE81:
 2567              		.loc 1 1425 1 view .LVU775
 2568 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2569              		.cfi_remember_state
 2570              		.cfi_restore 14
 2571              		.cfi_restore 10
 2572              		.cfi_restore 9
 2573              		.cfi_restore 8
 2574              		.cfi_restore 7
 2575              		.cfi_restore 6
 2576              		.cfi_restore 5
 2577              		.cfi_restore 4
 2578              		.cfi_def_cfa_offset 0
 2579              	.LVL247:
 2580              	.LBB82:
1423:src/storage.c ****   }
 2581              		.loc 1 1423 13 view .LVU776
 2582 006c FFF7FEBF 		b	flash_append
 2583              	.LVL248:
 2584              	.L216:
 2585              		.cfi_restore_state
 2586              	.LBB78:
1410:src/storage.c ****       set_pc( pc );
 2587              		.loc 1 1410 7 is_stmt 1 view .LVU777
1410:src/storage.c ****       set_pc( pc );
 2588              		.loc 1 1410 29 is_stmt 0 view .LVU778
 2589 0070 0F4E     		ldr	r6, .L219+8
 2590 0072 3368     		ldr	r3, [r6]
1410:src/storage.c ****       set_pc( pc );
 2591              		.loc 1 1410 20 view .LVU779
 2592 0074 B3F8E097 		ldrh	r9, [r3, #2016]
 2593              	.LVL249:
1411:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2594              		.loc 1 1411 7 is_stmt 1 view .LVU780
 2595 0078 FFF7FEFF 		bl	set_pc
 2596              	.LVL250:
1412:src/storage.c ****       if ( space_needed <= free ) {
 2597              		.loc 1 1412 7 view .LVU781
1412:src/storage.c ****       if ( space_needed <= free ) {
 2598              		.loc 1 1412 27 is_stmt 0 view .LVU782
 2599 007c 3368     		ldr	r3, [r6]
 2600 007e B3F8EE67 		ldrh	r6, [r3, #2030]
1412:src/storage.c ****       if ( space_needed <= free ) {
 2601              		.loc 1 1412 37 view .LVU783
 2602 0082 B3F8EC37 		ldrh	r3, [r3, #2028]
1412:src/storage.c ****       if ( space_needed <= free ) {
 2603              		.loc 1 1412 25 view .LVU784
 2604 0086 0136     		adds	r6, r6, #1
1412:src/storage.c ****       if ( space_needed <= free ) {
 2605              		.loc 1 1412 35 view .LVU785
 2606 0088 F61A     		subs	r6, r6, r3
1412:src/storage.c ****       if ( space_needed <= free ) {
 2607              		.loc 1 1412 20 view .LVU786
 2608 008a BE1B     		subs	r6, r7, r6
 2609              	.LVL251:
1413:src/storage.c **** 	clrprog();
ARM GAS  /tmp/ccoue2SN.s 			page 83


 2610              		.loc 1 1413 7 is_stmt 1 view .LVU787
1413:src/storage.c **** 	clrprog();
 2611              		.loc 1 1413 10 is_stmt 0 view .LVU788
 2612 008c B542     		cmp	r5, r6
 2613 008e 08DA     		bge	.L218
 2614              	.L207:
1416:src/storage.c ****     }
 2615              		.loc 1 1416 7 is_stmt 1 view .LVU789
 2616 0090 4846     		mov	r0, r9
 2617 0092 FFF7FEFF 		bl	set_pc
 2618              	.LVL252:
 2619 0096 DFE7     		b	.L206
 2620              	.LVL253:
 2621              	.L217:
1416:src/storage.c ****     }
 2622              		.loc 1 1416 7 is_stmt 0 view .LVU790
 2623              	.LBE78:
1419:src/storage.c ****       return;
 2624              		.loc 1 1419 7 is_stmt 1 view .LVU791
 2625              	.LBE82:
 2626              		.loc 1 1425 1 is_stmt 0 view .LVU792
 2627 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2628              		.cfi_remember_state
 2629              		.cfi_restore 14
 2630              		.cfi_restore 10
 2631              		.cfi_restore 9
 2632              		.cfi_restore 8
 2633              		.cfi_restore 7
 2634              		.cfi_restore 6
 2635              		.cfi_restore 5
 2636              		.cfi_restore 4
 2637              		.cfi_def_cfa_offset 0
 2638              	.LVL254:
 2639              	.LBB83:
1419:src/storage.c ****       return;
 2640              		.loc 1 1419 7 view .LVU793
 2641 009c 1720     		movs	r0, #23
 2642 009e FFF7FEBF 		b	report_err
 2643              	.LVL255:
 2644              	.L218:
 2645              		.cfi_restore_state
 2646              	.LBB79:
1414:src/storage.c ****       }
 2647              		.loc 1 1414 2 is_stmt 1 view .LVU794
 2648 00a2 FFF7FEFF 		bl	clrprog
 2649              	.LVL256:
 2650 00a6 F3E7     		b	.L207
 2651              	.L220:
 2652              		.align	2
 2653              	.L219:
 2654 00a8 00000000 		.word	DispMsg
 2655 00ac 00000000 		.word	.LC7
 2656 00b0 00000000 		.word	main_ram
 2657 00b4 00000000 		.word	library_ram
 2658              	.LBE79:
 2659              	.LBE83:
 2660              		.cfi_endproc
ARM GAS  /tmp/ccoue2SN.s 			page 84


 2661              	.LFE42:
 2663              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2664              		.align	2
 2665              	.LC8:
 2666 0000 4572726F 		.ascii	"Error\000"
 2666      7200
 2667 0006 0000     		.align	2
 2668              	.LC9:
 2669 0008 53617665 		.ascii	"Saved\000"
 2669      6400
 2670              		.section	.text.flash_backup,"ax",%progbits
 2671              		.align	1
 2672              		.p2align 2,,3
 2673              		.global	flash_backup
 2674              		.syntax unified
 2675              		.thumb
 2676              		.thumb_func
 2677              		.fpu fpv4-sp-d16
 2679              	flash_backup:
 2680              	.LVL257:
 2681              	.LFB24:
 747:src/storage.c **** 	if ( not_running() ) {
 2682              		.loc 1 747 1 view -0
 2683              		.cfi_startproc
 2684              		@ args = 0, pretend = 0, frame = 0
 2685              		@ frame_needed = 0, uses_anonymous_args = 0
 748:src/storage.c **** 		process_cmdline_set_lift();
 2686              		.loc 1 748 2 view .LVU796
 747:src/storage.c **** 	if ( not_running() ) {
 2687              		.loc 1 747 1 is_stmt 0 view .LVU797
 2688 0000 10B5     		push	{r4, lr}
 2689              		.cfi_def_cfa_offset 8
 2690              		.cfi_offset 4, -8
 2691              		.cfi_offset 14, -4
 748:src/storage.c **** 		process_cmdline_set_lift();
 2692              		.loc 1 748 7 view .LVU798
 2693 0002 FFF7FEFF 		bl	not_running
 2694              	.LVL258:
 748:src/storage.c **** 		process_cmdline_set_lift();
 2695              		.loc 1 748 5 view .LVU799
 2696 0006 00B9     		cbnz	r0, .L228
 760:src/storage.c **** 
 2697              		.loc 1 760 1 view .LVU800
 2698 0008 10BD     		pop	{r4, pc}
 2699              	.L228:
 749:src/storage.c **** 		init_state();
 2700              		.loc 1 749 3 is_stmt 1 view .LVU801
 2701              	.LBB84:
 2702              	.LBB85:
 206:src/storage.c **** 			      Crc, &Crc );
 2703              		.loc 1 206 9 is_stmt 0 view .LVU802
 2704 000a 0F4C     		ldr	r4, .L230
 2705              	.LBE85:
 2706              	.LBE84:
 749:src/storage.c **** 		init_state();
 2707              		.loc 1 749 3 view .LVU803
 2708 000c FFF7FEFF 		bl	process_cmdline_set_lift
ARM GAS  /tmp/ccoue2SN.s 			page 85


 2709              	.LVL259:
 750:src/storage.c **** 		checksum_all();
 2710              		.loc 1 750 3 is_stmt 1 view .LVU804
 2711 0010 FFF7FEFF 		bl	init_state
 2712              	.LVL260:
 751:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2713              		.loc 1 751 3 view .LVU805
 2714              	.LBB87:
 2715              	.LBI84:
 204:src/storage.c **** {
 2716              		.loc 1 204 5 view .LVU806
 2717              	.LBB86:
 206:src/storage.c **** 			      Crc, &Crc );
 2718              		.loc 1 206 2 view .LVU807
 206:src/storage.c **** 			      Crc, &Crc );
 2719              		.loc 1 206 9 is_stmt 0 view .LVU808
 2720 0014 2068     		ldr	r0, [r4]
 2721 0016 40F2FE71 		movw	r1, #2046
 2722 001a 4318     		adds	r3, r0, r1
 2723 001c B0F8FE27 		ldrh	r2, [r0, #2046]
 2724 0020 FFF7FEFF 		bl	test_checksum
 2725              	.LVL261:
 2726              	.LBE86:
 2727              	.LBE87:
 752:src/storage.c **** 			report_err( ERR_IO );
 2728              		.loc 1 752 3 is_stmt 1 view .LVU809
 752:src/storage.c **** 			report_err( ERR_IO );
 2729              		.loc 1 752 8 is_stmt 0 view .LVU810
 2730 0024 094B     		ldr	r3, .L230+4
 2731 0026 2168     		ldr	r1, [r4]
 2732 0028 1868     		ldr	r0, [r3]
 2733 002a 0822     		movs	r2, #8
 2734 002c FFF7FEFF 		bl	program_flash
 2735              	.LVL262:
 752:src/storage.c **** 			report_err( ERR_IO );
 2736              		.loc 1 752 6 view .LVU811
 2737 0030 18B9     		cbnz	r0, .L229
 757:src/storage.c **** 		}
 2738              		.loc 1 757 4 is_stmt 1 view .LVU812
 757:src/storage.c **** 		}
 2739              		.loc 1 757 12 is_stmt 0 view .LVU813
 2740 0032 074B     		ldr	r3, .L230+8
 2741 0034 074A     		ldr	r2, .L230+12
 2742 0036 1A60     		str	r2, [r3]
 760:src/storage.c **** 
 2743              		.loc 1 760 1 view .LVU814
 2744 0038 10BD     		pop	{r4, pc}
 2745              	.L229:
 753:src/storage.c **** 			DispMsg = "Error";
 2746              		.loc 1 753 4 is_stmt 1 view .LVU815
 2747 003a 1120     		movs	r0, #17
 2748 003c FFF7FEFF 		bl	report_err
 2749              	.LVL263:
 754:src/storage.c **** 		}
 2750              		.loc 1 754 4 view .LVU816
 754:src/storage.c **** 		}
 2751              		.loc 1 754 12 is_stmt 0 view .LVU817
ARM GAS  /tmp/ccoue2SN.s 			page 86


 2752 0040 034B     		ldr	r3, .L230+8
 2753 0042 054A     		ldr	r2, .L230+16
 2754 0044 1A60     		str	r2, [r3]
 760:src/storage.c **** 
 2755              		.loc 1 760 1 view .LVU818
 2756 0046 10BD     		pop	{r4, pc}
 2757              	.L231:
 2758              		.align	2
 2759              	.L230:
 2760 0048 00000000 		.word	main_ram
 2761 004c 00000000 		.word	backup_ram
 2762 0050 00000000 		.word	DispMsg
 2763 0054 08000000 		.word	.LC9
 2764 0058 00000000 		.word	.LC8
 2765              		.cfi_endproc
 2766              	.LFE24:
 2768              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2769              		.align	2
 2770              	.LC10:
 2771 0000 52657374 		.ascii	"Restored\000"
 2771      6F726564 
 2771      00
 2772              		.section	.text.flash_restore,"ax",%progbits
 2773              		.align	1
 2774              		.p2align 2,,3
 2775              		.global	flash_restore
 2776              		.syntax unified
 2777              		.thumb
 2778              		.thumb_func
 2779              		.fpu fpv4-sp-d16
 2781              	flash_restore:
 2782              	.LVL264:
 2783              	.LFB25:
 764:src/storage.c **** 	if ( not_running() ) {
 2784              		.loc 1 764 1 is_stmt 1 view -0
 2785              		.cfi_startproc
 2786              		@ args = 0, pretend = 0, frame = 0
 2787              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/storage.c **** 		if ( checksum_backup() ) {
 2788              		.loc 1 765 2 view .LVU820
 764:src/storage.c **** 	if ( not_running() ) {
 2789              		.loc 1 764 1 is_stmt 0 view .LVU821
 2790 0000 08B5     		push	{r3, lr}
 2791              		.cfi_def_cfa_offset 8
 2792              		.cfi_offset 3, -8
 2793              		.cfi_offset 14, -4
 765:src/storage.c **** 		if ( checksum_backup() ) {
 2794              		.loc 1 765 7 view .LVU822
 2795 0002 FFF7FEFF 		bl	not_running
 2796              	.LVL265:
 765:src/storage.c **** 		if ( checksum_backup() ) {
 2797              		.loc 1 765 5 view .LVU823
 2798 0006 A0B1     		cbz	r0, .L232
 766:src/storage.c **** 			report_err( ERR_INVALID );
 2799              		.loc 1 766 3 is_stmt 1 view .LVU824
 766:src/storage.c **** 			report_err( ERR_INVALID );
 2800              		.loc 1 766 8 is_stmt 0 view .LVU825
ARM GAS  /tmp/ccoue2SN.s 			page 87


 2801 0008 FFF7FEFF 		bl	checksum_backup
 2802              	.LVL266:
 766:src/storage.c **** 			report_err( ERR_INVALID );
 2803              		.loc 1 766 6 view .LVU826
 2804 000c 20B1     		cbz	r0, .L234
 767:src/storage.c **** 		}
 2805              		.loc 1 767 4 is_stmt 1 view .LVU827
 775:src/storage.c **** 
 2806              		.loc 1 775 1 is_stmt 0 view .LVU828
 2807 000e BDE80840 		pop	{r3, lr}
 2808              		.cfi_remember_state
 2809              		.cfi_restore 14
 2810              		.cfi_restore 3
 2811              		.cfi_def_cfa_offset 0
 767:src/storage.c **** 		}
 2812              		.loc 1 767 4 view .LVU829
 2813 0012 1220     		movs	r0, #18
 2814 0014 FFF7FEBF 		b	report_err
 2815              	.LVL267:
 2816              	.L234:
 2817              		.cfi_restore_state
 770:src/storage.c **** 			init_state();
 2818              		.loc 1 770 4 is_stmt 1 view .LVU830
 2819 0018 064B     		ldr	r3, .L239
 2820 001a 074A     		ldr	r2, .L239+4
 2821 001c 1868     		ldr	r0, [r3]
 2822 001e 1168     		ldr	r1, [r2]
 2823 0020 4FF40062 		mov	r2, #2048
 2824 0024 FFF7FEFF 		bl	xcopy
 2825              	.LVL268:
 771:src/storage.c **** 			DispMsg = "Restored";
 2826              		.loc 1 771 4 view .LVU831
 2827 0028 FFF7FEFF 		bl	init_state
 2828              	.LVL269:
 772:src/storage.c **** 		}
 2829              		.loc 1 772 4 view .LVU832
 772:src/storage.c **** 		}
 2830              		.loc 1 772 12 is_stmt 0 view .LVU833
 2831 002c 034B     		ldr	r3, .L239+8
 2832 002e 044A     		ldr	r2, .L239+12
 2833 0030 1A60     		str	r2, [r3]
 2834              	.L232:
 775:src/storage.c **** 
 2835              		.loc 1 775 1 view .LVU834
 2836 0032 08BD     		pop	{r3, pc}
 2837              	.L240:
 2838              		.align	2
 2839              	.L239:
 2840 0034 00000000 		.word	main_ram
 2841 0038 00000000 		.word	backup_ram
 2842 003c 00000000 		.word	DispMsg
 2843 0040 00000000 		.word	.LC10
 2844              		.cfi_endproc
 2845              	.LFE25:
 2847              		.section	.text.load_program,"ax",%progbits
 2848              		.align	1
 2849              		.p2align 2,,3
ARM GAS  /tmp/ccoue2SN.s 			page 88


 2850              		.global	load_program
 2851              		.syntax unified
 2852              		.thumb
 2853              		.thumb_func
 2854              		.fpu fpv4-sp-d16
 2856              	load_program:
 2857              	.LVL270:
 2858              	.LFB26:
 783:src/storage.c **** 	if ( not_running() ) {
 2859              		.loc 1 783 1 is_stmt 1 view -0
 2860              		.cfi_startproc
 2861              		@ args = 0, pretend = 0, frame = 0
 2862              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/storage.c **** 		if ( checksum_backup() ) {
 2863              		.loc 1 784 2 view .LVU836
 783:src/storage.c **** 	if ( not_running() ) {
 2864              		.loc 1 783 1 is_stmt 0 view .LVU837
 2865 0000 08B5     		push	{r3, lr}
 2866              		.cfi_def_cfa_offset 8
 2867              		.cfi_offset 3, -8
 2868              		.cfi_offset 14, -4
 784:src/storage.c **** 		if ( checksum_backup() ) {
 2869              		.loc 1 784 7 view .LVU838
 2870 0002 FFF7FEFF 		bl	not_running
 2871              	.LVL271:
 784:src/storage.c **** 		if ( checksum_backup() ) {
 2872              		.loc 1 784 5 view .LVU839
 2873 0006 98B1     		cbz	r0, .L241
 785:src/storage.c **** 			/*
 2874              		.loc 1 785 3 is_stmt 1 view .LVU840
 785:src/storage.c **** 			/*
 2875              		.loc 1 785 8 is_stmt 0 view .LVU841
 2876 0008 FFF7FEFF 		bl	checksum_backup
 2877              	.LVL272:
 785:src/storage.c **** 			/*
 2878              		.loc 1 785 6 view .LVU842
 2879 000c 88B9     		cbnz	r0, .L245
 792:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2880              		.loc 1 792 3 is_stmt 1 view .LVU843
 2881              	.LBB88:
 2882              	.LBI88:
 247:src/storage.c **** {
 2883              		.loc 1 247 6 view .LVU844
 2884              	.LBB89:
 249:src/storage.c **** 	stoend();
 2885              		.loc 1 249 2 view .LVU845
 2886 000e FFF7FEFF 		bl	clrretstk_pc
 2887              	.LVL273:
 250:src/storage.c **** }
 2888              		.loc 1 250 2 view .LVU846
 2889              	.LBB90:
 2890              	.LBI90:
 237:src/storage.c **** {
 2891              		.loc 1 237 13 view .LVU847
 2892              	.LBB91:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2893              		.loc 1 239 2 view .LVU848
ARM GAS  /tmp/ccoue2SN.s 			page 89


 2894 0012 0A4B     		ldr	r3, .L246
 2895              	.LBE91:
 2896              	.LBE90:
 2897              	.LBE89:
 2898              	.LBE88:
 793:src/storage.c **** 	}
 2899              		.loc 1 793 19 is_stmt 0 view .LVU849
 2900 0014 0A4A     		ldr	r2, .L246+4
 2901              	.LBB101:
 2902              	.LBB98:
 2903              	.LBB95:
 2904              	.LBB92:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2905              		.loc 1 239 2 view .LVU850
 2906 0016 1B68     		ldr	r3, [r3]
 2907              	.LBE92:
 2908              	.LBE95:
 2909              	.LBE98:
 2910              	.LBE101:
 793:src/storage.c **** 	}
 2911              		.loc 1 793 19 view .LVU851
 2912 0018 1068     		ldr	r0, [r2]
 2913              	.LBB102:
 2914              	.LBB99:
 2915              	.LBB96:
 2916              	.LBB93:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2917              		.loc 1 239 11 view .LVU852
 2918 001a 0122     		movs	r2, #1
 2919 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 240:src/storage.c **** }
 2920              		.loc 1 240 2 is_stmt 1 view .LVU853
 240:src/storage.c **** }
 2921              		.loc 1 240 12 is_stmt 0 view .LVU854
 2922 001e 4FF49D72 		mov	r2, #314
 2923              	.LBE93:
 2924              	.LBE96:
 2925              	.LBE99:
 2926              	.LBE102:
 793:src/storage.c **** 	}
 2927              		.loc 1 793 3 view .LVU855
 2928 0022 4188     		ldrh	r1, [r0, #2]
 2929              	.LBB103:
 2930              	.LBB100:
 2931              	.LBB97:
 2932              	.LBB94:
 240:src/storage.c **** }
 2933              		.loc 1 240 12 view .LVU856
 2934 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 2935              	.LBE94:
 2936              	.LBE97:
 2937              	.LBE100:
 2938              	.LBE103:
 793:src/storage.c **** 	}
 2939              		.loc 1 793 3 is_stmt 1 view .LVU857
 2940 0026 0430     		adds	r0, r0, #4
 795:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 90


 2941              		.loc 1 795 1 is_stmt 0 view .LVU858
 2942 0028 BDE80840 		pop	{r3, lr}
 2943              		.cfi_remember_state
 2944              		.cfi_restore 14
 2945              		.cfi_restore 3
 2946              		.cfi_def_cfa_offset 0
 793:src/storage.c **** 	}
 2947              		.loc 1 793 3 view .LVU859
 2948 002c FFF7FEBF 		b	append_program
 2949              	.LVL274:
 2950              	.L241:
 2951              		.cfi_restore_state
 795:src/storage.c **** 
 2952              		.loc 1 795 1 view .LVU860
 2953 0030 08BD     		pop	{r3, pc}
 2954              	.L245:
 789:src/storage.c **** 			return;
 2955              		.loc 1 789 4 is_stmt 1 view .LVU861
 795:src/storage.c **** 
 2956              		.loc 1 795 1 is_stmt 0 view .LVU862
 2957 0032 BDE80840 		pop	{r3, lr}
 2958              		.cfi_restore 14
 2959              		.cfi_restore 3
 2960              		.cfi_def_cfa_offset 0
 789:src/storage.c **** 			return;
 2961              		.loc 1 789 4 view .LVU863
 2962 0036 1220     		movs	r0, #18
 2963 0038 FFF7FEBF 		b	report_err
 2964              	.LVL275:
 2965              	.L247:
 2966              		.align	2
 2967              	.L246:
 2968 003c 00000000 		.word	main_ram
 2969 0040 00000000 		.word	backup_ram
 2970              		.cfi_endproc
 2971              	.LFE26:
 2973              		.section	.text.load_registers,"ax",%progbits
 2974              		.align	1
 2975              		.p2align 2,,3
 2976              		.global	load_registers
 2977              		.syntax unified
 2978              		.thumb
 2979              		.thumb_func
 2980              		.fpu fpv4-sp-d16
 2982              	load_registers:
 2983              	.LVL276:
 2984              	.LFB27:
 802:src/storage.c **** 	int count;
 2985              		.loc 1 802 1 is_stmt 1 view -0
 2986              		.cfi_startproc
 2987              		@ args = 0, pretend = 0, frame = 0
 2988              		@ frame_needed = 0, uses_anonymous_args = 0
 803:src/storage.c **** 	if ( checksum_backup() ) {
 2989              		.loc 1 803 2 view .LVU865
 804:src/storage.c **** 		/*
 2990              		.loc 1 804 2 view .LVU866
 802:src/storage.c **** 	int count;
ARM GAS  /tmp/ccoue2SN.s 			page 91


 2991              		.loc 1 802 1 is_stmt 0 view .LVU867
 2992 0000 38B5     		push	{r3, r4, r5, lr}
 2993              		.cfi_def_cfa_offset 16
 2994              		.cfi_offset 3, -16
 2995              		.cfi_offset 4, -12
 2996              		.cfi_offset 5, -8
 2997              		.cfi_offset 14, -4
 804:src/storage.c **** 		/*
 2998              		.loc 1 804 7 view .LVU868
 2999 0002 FFF7FEFF 		bl	checksum_backup
 3000              	.LVL277:
 804:src/storage.c **** 		/*
 3001              		.loc 1 804 5 view .LVU869
 3002 0006 E0B9     		cbnz	r0, .L255
 811:src/storage.c **** 	if ( is_dblmode() ) {
 3003              		.loc 1 811 2 is_stmt 1 view .LVU870
 811:src/storage.c **** 	if ( is_dblmode() ) {
 3004              		.loc 1 811 10 is_stmt 0 view .LVU871
 3005 0008 104B     		ldr	r3, .L256
 3006 000a 1B68     		ldr	r3, [r3]
 811:src/storage.c **** 	if ( is_dblmode() ) {
 3007              		.loc 1 811 8 view .LVU872
 3008 000c 93F8CF47 		ldrb	r4, [r3, #1999]	@ zero_extendqisi2
 3009              	.LVL278:
 812:src/storage.c **** 		// Don't clobber the stack in DP mode
 3010              		.loc 1 812 2 is_stmt 1 view .LVU873
 812:src/storage.c **** 		// Don't clobber the stack in DP mode
 3011              		.loc 1 812 7 is_stmt 0 view .LVU874
 3012 0010 FFF7FEFF 		bl	is_dblmode
 3013              	.LVL279:
 812:src/storage.c **** 		// Don't clobber the stack in DP mode
 3014              		.loc 1 812 5 view .LVU875
 3015 0014 00B1     		cbz	r0, .L250
 814:src/storage.c **** 	}
 3016              		.loc 1 814 3 is_stmt 1 view .LVU876
 814:src/storage.c **** 	}
 3017              		.loc 1 814 9 is_stmt 0 view .LVU877
 3018 0016 0C3C     		subs	r4, r4, #12
 3019              	.LVL280:
 3020              	.L250:
 816:src/storage.c **** 		count = BackupFlash._numregs;
 3021              		.loc 1 816 2 is_stmt 1 view .LVU878
 816:src/storage.c **** 		count = BackupFlash._numregs;
 3022              		.loc 1 816 26 is_stmt 0 view .LVU879
 3023 0018 0D4B     		ldr	r3, .L256+4
 3024 001a 1B68     		ldr	r3, [r3]
 3025 001c 93F8CF57 		ldrb	r5, [r3, #1999]	@ zero_extendqisi2
 819:src/storage.c **** }
 3026              		.loc 1 819 9 view .LVU880
 3027 0020 0020     		movs	r0, #0
 3028 0022 A542     		cmp	r5, r4
 3029 0024 A8BF     		it	ge
 3030 0026 2546     		movge	r5, r4
 3031              	.LVL281:
 819:src/storage.c **** }
 3032              		.loc 1 819 2 is_stmt 1 view .LVU881
 819:src/storage.c **** }
ARM GAS  /tmp/ccoue2SN.s 			page 92


 3033              		.loc 1 819 9 is_stmt 0 view .LVU882
 3034 0028 FFF7FEFF 		bl	get_reg_n
 3035              	.LVL282:
 3036 002c 0446     		mov	r4, r0
 819:src/storage.c **** }
 3037              		.loc 1 819 23 view .LVU883
 3038 002e 0020     		movs	r0, #0
 3039 0030 FFF7FEFF 		bl	get_flash_reg_n
 3040              	.LVL283:
 819:src/storage.c **** }
 3041              		.loc 1 819 2 view .LVU884
 3042 0034 EA00     		lsls	r2, r5, #3
 819:src/storage.c **** }
 3043              		.loc 1 819 23 view .LVU885
 3044 0036 0146     		mov	r1, r0
 819:src/storage.c **** }
 3045              		.loc 1 819 2 view .LVU886
 3046 0038 2046     		mov	r0, r4
 820:src/storage.c **** 
 3047              		.loc 1 820 1 view .LVU887
 3048 003a BDE83840 		pop	{r3, r4, r5, lr}
 3049              		.cfi_remember_state
 3050              		.cfi_restore 14
 3051              		.cfi_restore 5
 3052              		.cfi_restore 4
 3053              		.cfi_restore 3
 3054              		.cfi_def_cfa_offset 0
 3055              	.LVL284:
 819:src/storage.c **** }
 3056              		.loc 1 819 2 view .LVU888
 3057 003e FFF7FEBF 		b	xcopy
 3058              	.LVL285:
 3059              	.L255:
 3060              		.cfi_restore_state
 808:src/storage.c **** 		return;
 3061              		.loc 1 808 3 is_stmt 1 view .LVU889
 820:src/storage.c **** 
 3062              		.loc 1 820 1 is_stmt 0 view .LVU890
 3063 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3064              		.cfi_restore 14
 3065              		.cfi_restore 5
 3066              		.cfi_restore 4
 3067              		.cfi_restore 3
 3068              		.cfi_def_cfa_offset 0
 808:src/storage.c **** 		return;
 3069              		.loc 1 808 3 view .LVU891
 3070 0046 1220     		movs	r0, #18
 3071 0048 FFF7FEBF 		b	report_err
 3072              	.LVL286:
 3073              	.L257:
 3074              		.align	2
 3075              	.L256:
 3076 004c 00000000 		.word	main_ram
 3077 0050 00000000 		.word	backup_ram
 3078              		.cfi_endproc
 3079              	.LFE27:
 3081              		.section	.text.load_sigma,"ax",%progbits
ARM GAS  /tmp/ccoue2SN.s 			page 93


 3082              		.align	1
 3083              		.p2align 2,,3
 3084              		.global	load_sigma
 3085              		.syntax unified
 3086              		.thumb
 3087              		.thumb_func
 3088              		.fpu fpv4-sp-d16
 3090              	load_sigma:
 3091              	.LVL287:
 3092              	.LFB28:
 827:src/storage.c **** 	if ( checksum_backup() ) {
 3093              		.loc 1 827 1 is_stmt 1 view -0
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 0
 3096              		@ frame_needed = 0, uses_anonymous_args = 0
 828:src/storage.c **** 		/*
 3097              		.loc 1 828 2 view .LVU893
 827:src/storage.c **** 	if ( checksum_backup() ) {
 3098              		.loc 1 827 1 is_stmt 0 view .LVU894
 3099 0000 08B5     		push	{r3, lr}
 3100              		.cfi_def_cfa_offset 8
 3101              		.cfi_offset 3, -8
 3102              		.cfi_offset 14, -4
 828:src/storage.c **** 		/*
 3103              		.loc 1 828 7 view .LVU895
 3104 0002 FFF7FEFF 		bl	checksum_backup
 3105              	.LVL288:
 828:src/storage.c **** 		/*
 3106              		.loc 1 828 5 view .LVU896
 3107 0006 B0B9     		cbnz	r0, .L262
 835:src/storage.c **** 		/*
 3108              		.loc 1 835 2 is_stmt 1 view .LVU897
 835:src/storage.c **** 		/*
 3109              		.loc 1 835 9 is_stmt 0 view .LVU898
 3110 0008 0D4B     		ldr	r3, .L264
 3111 000a 1868     		ldr	r0, [r3]
 835:src/storage.c **** 		/*
 3112              		.loc 1 835 7 view .LVU899
 3113 000c 90F8DD37 		ldrb	r3, [r0, #2013]	@ zero_extendqisi2
 835:src/storage.c **** 		/*
 3114              		.loc 1 835 5 view .LVU900
 3115 0010 9B06     		lsls	r3, r3, #26
 3116 0012 0BD5     		bpl	.L263
 842:src/storage.c **** }
 3117              		.loc 1 842 2 is_stmt 1 view .LVU901
 842:src/storage.c **** }
 3118              		.loc 1 842 56 is_stmt 0 view .LVU902
 3119 0014 90F8CF37 		ldrb	r3, [r0, #1999]	@ zero_extendqisi2
 3120 0018 C3F16403 		rsb	r3, r3, #100
 842:src/storage.c **** }
 3121              		.loc 1 842 81 view .LVU903
 3122 001c 00EBC300 		add	r0, r0, r3, lsl #3
 842:src/storage.c **** }
 3123              		.loc 1 842 2 view .LVU904
 3124 0020 00F56970 		add	r0, r0, #932
 843:src/storage.c **** 
 3125              		.loc 1 843 1 view .LVU905
ARM GAS  /tmp/ccoue2SN.s 			page 94


 3126 0024 BDE80840 		pop	{r3, lr}
 3127              		.cfi_remember_state
 3128              		.cfi_restore 14
 3129              		.cfi_restore 3
 3130              		.cfi_def_cfa_offset 0
 842:src/storage.c **** }
 3131              		.loc 1 842 2 view .LVU906
 3132 0028 FFF7FEBF 		b	sigmaCopy
 3133              	.LVL289:
 3134              	.L263:
 3135              		.cfi_restore_state
 839:src/storage.c **** 		return;
 3136              		.loc 1 839 3 is_stmt 1 view .LVU907
 843:src/storage.c **** 
 3137              		.loc 1 843 1 is_stmt 0 view .LVU908
 3138 002c BDE80840 		pop	{r3, lr}
 3139              		.cfi_remember_state
 3140              		.cfi_restore 14
 3141              		.cfi_restore 3
 3142              		.cfi_def_cfa_offset 0
 839:src/storage.c **** 		return;
 3143              		.loc 1 839 3 view .LVU909
 3144 0030 0F20     		movs	r0, #15
 3145 0032 FFF7FEBF 		b	report_err
 3146              	.LVL290:
 3147              	.L262:
 3148              		.cfi_restore_state
 832:src/storage.c **** 		return;
 3149              		.loc 1 832 3 is_stmt 1 view .LVU910
 843:src/storage.c **** 
 3150              		.loc 1 843 1 is_stmt 0 view .LVU911
 3151 0036 BDE80840 		pop	{r3, lr}
 3152              		.cfi_restore 14
 3153              		.cfi_restore 3
 3154              		.cfi_def_cfa_offset 0
 832:src/storage.c **** 		return;
 3155              		.loc 1 832 3 view .LVU912
 3156 003a 1220     		movs	r0, #18
 3157 003c FFF7FEBF 		b	report_err
 3158              	.LVL291:
 3159              	.L265:
 3160              		.align	2
 3161              	.L264:
 3162 0040 00000000 		.word	backup_ram
 3163              		.cfi_endproc
 3164              	.LFE28:
 3166              		.section	.text.load_state,"ax",%progbits
 3167              		.align	1
 3168              		.p2align 2,,3
 3169              		.global	load_state
 3170              		.syntax unified
 3171              		.thumb
 3172              		.thumb_func
 3173              		.fpu fpv4-sp-d16
 3175              	load_state:
 3176              	.LVL292:
 3177              	.LFB29:
ARM GAS  /tmp/ccoue2SN.s 			page 95


 850:src/storage.c **** 	if ( not_running() ) {
 3178              		.loc 1 850 1 is_stmt 1 view -0
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 0, uses_anonymous_args = 0
 851:src/storage.c **** 		if ( checksum_backup() ) {
 3182              		.loc 1 851 2 view .LVU914
 850:src/storage.c **** 	if ( not_running() ) {
 3183              		.loc 1 850 1 is_stmt 0 view .LVU915
 3184 0000 08B5     		push	{r3, lr}
 3185              		.cfi_def_cfa_offset 8
 3186              		.cfi_offset 3, -8
 3187              		.cfi_offset 14, -4
 851:src/storage.c **** 		if ( checksum_backup() ) {
 3188              		.loc 1 851 7 view .LVU916
 3189 0002 FFF7FEFF 		bl	not_running
 3190              	.LVL293:
 851:src/storage.c **** 		if ( checksum_backup() ) {
 3191              		.loc 1 851 5 view .LVU917
 3192 0006 98B1     		cbz	r0, .L266
 852:src/storage.c **** 			/*
 3193              		.loc 1 852 3 is_stmt 1 view .LVU918
 852:src/storage.c **** 			/*
 3194              		.loc 1 852 8 is_stmt 0 view .LVU919
 3195 0008 FFF7FEFF 		bl	checksum_backup
 3196              	.LVL294:
 852:src/storage.c **** 			/*
 3197              		.loc 1 852 6 view .LVU920
 3198 000c 88B9     		cbnz	r0, .L270
 859:src/storage.c **** 		init_state();
 3199              		.loc 1 859 3 is_stmt 1 view .LVU921
 859:src/storage.c **** 		init_state();
 3200              		.loc 1 859 11 is_stmt 0 view .LVU922
 3201 000e 0B4B     		ldr	r3, .L271
 859:src/storage.c **** 		init_state();
 3202              		.loc 1 859 20 view .LVU923
 3203 0010 0B4A     		ldr	r2, .L271+4
 859:src/storage.c **** 		init_state();
 3204              		.loc 1 859 10 view .LVU924
 3205 0012 1868     		ldr	r0, [r3]
 859:src/storage.c **** 		init_state();
 3206              		.loc 1 859 19 view .LVU925
 3207 0014 1168     		ldr	r1, [r2]
 859:src/storage.c **** 		init_state();
 3208              		.loc 1 859 3 view .LVU926
 3209 0016 00F5FA60 		add	r0, r0, #2000
 3210 001a 01F5FA61 		add	r1, r1, #2000
 3211 001e 2E22     		movs	r2, #46
 3212 0020 FFF7FEFF 		bl	xcopy
 3213              	.LVL295:
 860:src/storage.c **** 		clrretstk_pc();
 3214              		.loc 1 860 3 is_stmt 1 view .LVU927
 3215 0024 FFF7FEFF 		bl	init_state
 3216              	.LVL296:
 861:src/storage.c **** 	}
 3217              		.loc 1 861 3 view .LVU928
 863:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 96


 3218              		.loc 1 863 1 is_stmt 0 view .LVU929
 3219 0028 BDE80840 		pop	{r3, lr}
 3220              		.cfi_remember_state
 3221              		.cfi_restore 14
 3222              		.cfi_restore 3
 3223              		.cfi_def_cfa_offset 0
 861:src/storage.c **** 	}
 3224              		.loc 1 861 3 view .LVU930
 3225 002c FFF7FEBF 		b	clrretstk_pc
 3226              	.LVL297:
 3227              	.L266:
 3228              		.cfi_restore_state
 863:src/storage.c **** 
 3229              		.loc 1 863 1 view .LVU931
 3230 0030 08BD     		pop	{r3, pc}
 3231              	.L270:
 856:src/storage.c **** 			return;
 3232              		.loc 1 856 4 is_stmt 1 view .LVU932
 863:src/storage.c **** 
 3233              		.loc 1 863 1 is_stmt 0 view .LVU933
 3234 0032 BDE80840 		pop	{r3, lr}
 3235              		.cfi_restore 14
 3236              		.cfi_restore 3
 3237              		.cfi_def_cfa_offset 0
 856:src/storage.c **** 			return;
 3238              		.loc 1 856 4 view .LVU934
 3239 0036 1220     		movs	r0, #18
 3240 0038 FFF7FEBF 		b	report_err
 3241              	.LVL298:
 3242              	.L272:
 3243              		.align	2
 3244              	.L271:
 3245 003c 00000000 		.word	main_ram
 3246 0040 00000000 		.word	backup_ram
 3247              		.cfi_endproc
 3248              	.LFE29:
 3250              		.section	.text.store_program,"ax",%progbits
 3251              		.align	1
 3252              		.p2align 2,,3
 3253              		.global	store_program
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu fpv4-sp-d16
 3259              	store_program:
 3260              	.LVL299:
 3261              	.LFB30:
 870:src/storage.c **** 	opcode lbl; 
 3262              		.loc 1 870 1 is_stmt 1 view -0
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 0
 3265              		@ frame_needed = 0, uses_anonymous_args = 0
 871:src/storage.c **** 	unsigned int pc;
 3266              		.loc 1 871 2 view .LVU936
 872:src/storage.c **** 	int space_needed, count, free;
 3267              		.loc 1 872 2 view .LVU937
 873:src/storage.c **** 
ARM GAS  /tmp/ccoue2SN.s 			page 97


 3268              		.loc 1 873 2 view .LVU938
 875:src/storage.c **** 		/*
 3269              		.loc 1 875 2 view .LVU939
 870:src/storage.c **** 	opcode lbl; 
 3270              		.loc 1 870 1 is_stmt 0 view .LVU940
 3271 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3272              		.cfi_def_cfa_offset 24
 3273              		.cfi_offset 4, -24
 3274              		.cfi_offset 5, -20
 3275              		.cfi_offset 6, -16
 3276              		.cfi_offset 7, -12
 3277              		.cfi_offset 8, -8
 3278              		.cfi_offset 14, -4
 875:src/storage.c **** 		/*
 3279              		.loc 1 875 7 view .LVU941
 3280 0004 FFF7FEFF 		bl	not_running
 3281              	.LVL300:
 875:src/storage.c **** 		/*
 3282              		.loc 1 875 5 view .LVU942
 3283 0008 0028     		cmp	r0, #0
 3284 000a 3BD0     		beq	.L273
 879:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3285              		.loc 1 879 3 is_stmt 1 view .LVU943
 3286              	.LVL301:
 880:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3287              		.loc 1 880 3 view .LVU944
 879:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3288              		.loc 1 879 8 is_stmt 0 view .LVU945
 3289 000c 314C     		ldr	r4, .L287
 3290              	.LVL302:
 879:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3291              		.loc 1 879 8 view .LVU946
 3292 000e 2368     		ldr	r3, [r4]
 3293 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 880:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3294              		.loc 1 880 6 view .LVU947
 3295 0014 5B04     		lsls	r3, r3, #17
 3296 0016 37D4     		bmi	.L283
 887:src/storage.c **** 		lbl = getprog( ProgBegin );
 3297              		.loc 1 887 3 is_stmt 1 view .LVU948
 3298 0018 0120     		movs	r0, #1
 3299 001a FFF7FEFF 		bl	update_program_bounds
 3300              	.LVL303:
 888:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3301              		.loc 1 888 3 view .LVU949
 888:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3302              		.loc 1 888 18 is_stmt 0 view .LVU950
 3303 001e 2368     		ldr	r3, [r4]
 888:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3304              		.loc 1 888 9 view .LVU951
 3305 0020 B3F8EC07 		ldrh	r0, [r3, #2028]
 3306 0024 FFF7FEFF 		bl	getprog
 3307              	.LVL304:
 889:src/storage.c **** 			report_err( ERR_NO_LBL );
 3308              		.loc 1 889 3 is_stmt 1 view .LVU952
 889:src/storage.c **** 			report_err( ERR_NO_LBL );
 3309              		.loc 1 889 9 is_stmt 0 view .LVU953
ARM GAS  /tmp/ccoue2SN.s 			page 98


 3310 0028 00F47043 		and	r3, r0, #61440
 889:src/storage.c **** 			report_err( ERR_NO_LBL );
 3311              		.loc 1 889 6 view .LVU954
 3312 002c B3F5704F 		cmp	r3, #61440
 3313 0030 2FD1     		bne	.L276
 889:src/storage.c **** 			report_err( ERR_NO_LBL );
 3314              		.loc 1 889 20 discriminator 1 view .LVU955
 3315 0032 10F4706F 		tst	r0, #3840
 889:src/storage.c **** 			report_err( ERR_NO_LBL );
 3316              		.loc 1 889 23 discriminator 1 view .LVU956
 3317 0036 C0F30322 		ubfx	r2, r0, #8, #4
 889:src/storage.c **** 			report_err( ERR_NO_LBL );
 3318              		.loc 1 889 20 discriminator 1 view .LVU957
 3319 003a 2AD1     		bne	.L276
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3320              		.loc 1 896 3 is_stmt 1 view .LVU958
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3321              		.loc 1 896 30 is_stmt 0 view .LVU959
 3322 003c 2368     		ldr	r3, [r4]
 897:src/storage.c **** 
 3323              		.loc 1 897 39 view .LVU960
 3324 003e 264E     		ldr	r6, .L287+4
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3325              		.loc 1 896 30 view .LVU961
 3326 0040 B3F8EE57 		ldrh	r5, [r3, #2030]
 897:src/storage.c **** 
 3327              		.loc 1 897 39 view .LVU962
 3328 0044 3168     		ldr	r1, [r6]
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3329              		.loc 1 896 40 view .LVU963
 3330 0046 B3F8EC37 		ldrh	r3, [r3, #2028]
 897:src/storage.c **** 
 3331              		.loc 1 897 39 view .LVU964
 3332 004a 4F88     		ldrh	r7, [r1, #2]
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3333              		.loc 1 896 28 view .LVU965
 3334 004c 0135     		adds	r5, r5, #1
 902:src/storage.c **** 		if ( pc != 0 ) {
 3335              		.loc 1 902 8 view .LVU966
 3336 004e 0146     		mov	r1, r0
 3337 0050 4FF48040 		mov	r0, #16384
 3338              	.LVL305:
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3339              		.loc 1 896 24 view .LVU967
 3340 0054 ED1A     		subs	r5, r5, r3
 3341              	.LVL306:
 897:src/storage.c **** 
 3342              		.loc 1 897 3 is_stmt 1 view .LVU968
 902:src/storage.c **** 		if ( pc != 0 ) {
 3343              		.loc 1 902 8 is_stmt 0 view .LVU969
 3344 0056 FFF7FEFF 		bl	find_opcode_from
 3345              	.LVL307:
 897:src/storage.c **** 
 3346              		.loc 1 897 8 view .LVU970
 3347 005a C7F5FF57 		rsb	r7, r7, #8160
 3348 005e 1E37     		adds	r7, r7, #30
 3349              	.LVL308:
ARM GAS  /tmp/ccoue2SN.s 			page 99


 902:src/storage.c **** 		if ( pc != 0 ) {
 3350              		.loc 1 902 3 is_stmt 1 view .LVU971
 903:src/storage.c **** 			/*
 3351              		.loc 1 903 3 view .LVU972
 903:src/storage.c **** 			/*
 3352              		.loc 1 903 6 is_stmt 0 view .LVU973
 3353 0060 08BB     		cbnz	r0, .L284
 896:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3354              		.loc 1 896 24 view .LVU974
 3355 0062 2C46     		mov	r4, r5
 3356              	.LVL309:
 3357              	.L278:
 915:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3358              		.loc 1 915 3 is_stmt 1 view .LVU975
 915:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3359              		.loc 1 915 6 is_stmt 0 view .LVU976
 3360 0064 BC42     		cmp	r4, r7
 3361 0066 19DC     		bgt	.L285
 920:src/storage.c **** 	}
 3362              		.loc 1 920 3 is_stmt 1 view .LVU977
 920:src/storage.c **** 	}
 3363              		.loc 1 920 26 is_stmt 0 view .LVU978
 3364 0068 3368     		ldr	r3, [r6]
 920:src/storage.c **** 	}
 3365              		.loc 1 920 3 view .LVU979
 3366 006a 5C88     		ldrh	r4, [r3, #2]
 3367              	.LVL310:
 920:src/storage.c **** 	}
 3368              		.loc 1 920 3 view .LVU980
 3369 006c FFF7FEFF 		bl	get_current_prog
 3370              	.LVL311:
 920:src/storage.c **** 	}
 3371              		.loc 1 920 69 view .LVU981
 3372 0070 3368     		ldr	r3, [r6]
 3373 0072 5B88     		ldrh	r3, [r3, #2]
 920:src/storage.c **** 	}
 3374              		.loc 1 920 3 view .LVU982
 3375 0074 0146     		mov	r1, r0
 3376 0076 2B44     		add	r3, r3, r5
 3377 0078 2046     		mov	r0, r4
 3378 007a 2A46     		mov	r2, r5
 922:src/storage.c **** 
 3379              		.loc 1 922 1 view .LVU983
 3380 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3381              		.cfi_remember_state
 3382              		.cfi_restore 14
 3383              		.cfi_restore 8
 3384              		.cfi_restore 7
 3385              		.cfi_restore 6
 3386              		.cfi_restore 5
 3387              		.cfi_restore 4
 3388              		.cfi_def_cfa_offset 0
 3389              	.LVL312:
 920:src/storage.c **** 	}
 3390              		.loc 1 920 3 view .LVU984
 3391 0080 FFF7FEBF 		b	flash_append
 3392              	.LVL313:
ARM GAS  /tmp/ccoue2SN.s 			page 100


 3393              	.L273:
 3394              		.cfi_restore_state
 922:src/storage.c **** 
 3395              		.loc 1 922 1 view .LVU985
 3396 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3397              	.LVL314:
 3398              	.L283:
 881:src/storage.c **** 			return;
 3399              		.loc 1 881 4 is_stmt 1 view .LVU986
 922:src/storage.c **** 
 3400              		.loc 1 922 1 is_stmt 0 view .LVU987
 3401 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3402              		.cfi_remember_state
 3403              		.cfi_restore 14
 3404              		.cfi_restore 8
 3405              		.cfi_restore 7
 3406              		.cfi_restore 6
 3407              		.cfi_restore 5
 3408              		.cfi_restore 4
 3409              		.cfi_def_cfa_offset 0
 3410              	.LVL315:
 881:src/storage.c **** 			return;
 3411              		.loc 1 881 4 view .LVU988
 3412 008c 0720     		movs	r0, #7
 3413 008e FFF7FEBF 		b	report_err
 3414              	.LVL316:
 3415              	.L276:
 3416              		.cfi_restore_state
 890:src/storage.c **** 			return;
 3417              		.loc 1 890 4 is_stmt 1 view .LVU989
 922:src/storage.c **** 
 3418              		.loc 1 922 1 is_stmt 0 view .LVU990
 3419 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3420              		.cfi_remember_state
 3421              		.cfi_restore 14
 3422              		.cfi_restore 8
 3423              		.cfi_restore 7
 3424              		.cfi_restore 6
 3425              		.cfi_restore 5
 3426              		.cfi_restore 4
 3427              		.cfi_def_cfa_offset 0
 890:src/storage.c **** 			return;
 3428              		.loc 1 890 4 view .LVU991
 3429 0096 0620     		movs	r0, #6
 3430              	.LVL317:
 890:src/storage.c **** 			return;
 3431              		.loc 1 890 4 view .LVU992
 3432 0098 FFF7FEBF 		b	report_err
 3433              	.LVL318:
 3434              	.L285:
 3435              		.cfi_restore_state
 916:src/storage.c **** 			return;
 3436              		.loc 1 916 4 is_stmt 1 view .LVU993
 922:src/storage.c **** 
 3437              		.loc 1 922 1 is_stmt 0 view .LVU994
 3438 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3439              		.cfi_remember_state
ARM GAS  /tmp/ccoue2SN.s 			page 101


 3440              		.cfi_restore 14
 3441              		.cfi_restore 8
 3442              		.cfi_restore 7
 3443              		.cfi_restore 6
 3444              		.cfi_restore 5
 3445              		.cfi_restore 4
 3446              		.cfi_def_cfa_offset 0
 3447              	.LVL319:
 916:src/storage.c **** 			return;
 3448              		.loc 1 916 4 view .LVU995
 3449 00a0 1720     		movs	r0, #23
 3450 00a2 FFF7FEBF 		b	report_err
 3451              	.LVL320:
 3452              	.L284:
 3453              		.cfi_restore_state
 3454              	.LBB104:
 907:src/storage.c **** 			set_pc( pc );
 3455              		.loc 1 907 4 is_stmt 1 view .LVU996
 907:src/storage.c **** 			set_pc( pc );
 3456              		.loc 1 907 26 is_stmt 0 view .LVU997
 3457 00a6 2368     		ldr	r3, [r4]
 907:src/storage.c **** 			set_pc( pc );
 3458              		.loc 1 907 17 view .LVU998
 3459 00a8 B3F8E087 		ldrh	r8, [r3, #2016]
 3460              	.LVL321:
 908:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3461              		.loc 1 908 4 is_stmt 1 view .LVU999
 3462 00ac FFF7FEFF 		bl	set_pc
 3463              	.LVL322:
 909:src/storage.c **** 			if ( space_needed <= free ) {
 3464              		.loc 1 909 4 view .LVU1000
 909:src/storage.c **** 			if ( space_needed <= free ) {
 3465              		.loc 1 909 24 is_stmt 0 view .LVU1001
 3466 00b0 2368     		ldr	r3, [r4]
 3467 00b2 B3F8EE47 		ldrh	r4, [r3, #2030]
 909:src/storage.c **** 			if ( space_needed <= free ) {
 3468              		.loc 1 909 34 view .LVU1002
 3469 00b6 B3F8EC37 		ldrh	r3, [r3, #2028]
 909:src/storage.c **** 			if ( space_needed <= free ) {
 3470              		.loc 1 909 22 view .LVU1003
 3471 00ba 0134     		adds	r4, r4, #1
 909:src/storage.c **** 			if ( space_needed <= free ) {
 3472              		.loc 1 909 32 view .LVU1004
 3473 00bc E41A     		subs	r4, r4, r3
 909:src/storage.c **** 			if ( space_needed <= free ) {
 3474              		.loc 1 909 17 view .LVU1005
 3475 00be 2C1B     		subs	r4, r5, r4
 3476              	.LVL323:
 910:src/storage.c **** 				clrprog();
 3477              		.loc 1 910 4 is_stmt 1 view .LVU1006
 910:src/storage.c **** 				clrprog();
 3478              		.loc 1 910 7 is_stmt 0 view .LVU1007
 3479 00c0 A742     		cmp	r7, r4
 3480 00c2 03DA     		bge	.L286
 3481              	.L279:
 913:src/storage.c **** 		}
 3482              		.loc 1 913 4 is_stmt 1 view .LVU1008
ARM GAS  /tmp/ccoue2SN.s 			page 102


 3483 00c4 4046     		mov	r0, r8
 3484 00c6 FFF7FEFF 		bl	set_pc
 3485              	.LVL324:
 3486 00ca CBE7     		b	.L278
 3487              	.L286:
 911:src/storage.c **** 			}
 3488              		.loc 1 911 5 view .LVU1009
 3489 00cc FFF7FEFF 		bl	clrprog
 3490              	.LVL325:
 3491 00d0 F8E7     		b	.L279
 3492              	.L288:
 3493 00d2 00BF     		.align	2
 3494              	.L287:
 3495 00d4 00000000 		.word	main_ram
 3496 00d8 00000000 		.word	library_ram
 3497              	.LBE104:
 3498              		.cfi_endproc
 3499              	.LFE30:
 3501              		.section	.text.recall_program,"ax",%progbits
 3502              		.align	1
 3503              		.p2align 2,,3
 3504              		.global	recall_program
 3505              		.syntax unified
 3506              		.thumb
 3507              		.thumb_func
 3508              		.fpu fpv4-sp-d16
 3510              	recall_program:
 3511              	.LVL326:
 3512              	.LFB31:
 929:src/storage.c **** 	if ( not_running() ) {
 3513              		.loc 1 929 1 view -0
 3514              		.cfi_startproc
 3515              		@ args = 0, pretend = 0, frame = 0
 3516              		@ frame_needed = 0, uses_anonymous_args = 0
 930:src/storage.c **** 		if ( state_pc() == 0 ) {
 3517              		.loc 1 930 2 view .LVU1011
 929:src/storage.c **** 	if ( not_running() ) {
 3518              		.loc 1 929 1 is_stmt 0 view .LVU1012
 3519 0000 10B5     		push	{r4, lr}
 3520              		.cfi_def_cfa_offset 8
 3521              		.cfi_offset 4, -8
 3522              		.cfi_offset 14, -4
 930:src/storage.c **** 		if ( state_pc() == 0 ) {
 3523              		.loc 1 930 7 view .LVU1013
 3524 0002 FFF7FEFF 		bl	not_running
 3525              	.LVL327:
 930:src/storage.c **** 		if ( state_pc() == 0 ) {
 3526              		.loc 1 930 5 view .LVU1014
 3527 0006 B8B1     		cbz	r0, .L289
 931:src/storage.c **** 			State.pc = 1;
 3528              		.loc 1 931 3 is_stmt 1 view .LVU1015
 931:src/storage.c **** 			State.pc = 1;
 3529              		.loc 1 931 8 is_stmt 0 view .LVU1016
 3530 0008 0C4C     		ldr	r4, .L293
 3531 000a 2368     		ldr	r3, [r4]
 931:src/storage.c **** 			State.pc = 1;
 3532              		.loc 1 931 6 view .LVU1017
ARM GAS  /tmp/ccoue2SN.s 			page 103


 3533 000c B3F8E027 		ldrh	r2, [r3, #2016]
 3534 0010 12B9     		cbnz	r2, .L291
 932:src/storage.c **** 		}
 3535              		.loc 1 932 4 is_stmt 1 view .LVU1018
 932:src/storage.c **** 		}
 3536              		.loc 1 932 13 is_stmt 0 view .LVU1019
 3537 0012 0122     		movs	r2, #1
 3538 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 3539              	.L291:
 934:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3540              		.loc 1 934 3 is_stmt 1 view .LVU1020
 3541 0018 0120     		movs	r0, #1
 3542 001a FFF7FEFF 		bl	update_program_bounds
 3543              	.LVL328:
 935:src/storage.c **** 	}
 3544              		.loc 1 935 3 view .LVU1021
 3545 001e FFF7FEFF 		bl	get_current_prog
 3546              	.LVL329:
 935:src/storage.c **** 	}
 3547              		.loc 1 935 39 is_stmt 0 view .LVU1022
 3548 0022 2368     		ldr	r3, [r4]
 3549 0024 B3F8EE17 		ldrh	r1, [r3, #2030]
 935:src/storage.c **** 	}
 3550              		.loc 1 935 49 view .LVU1023
 3551 0028 B3F8EC37 		ldrh	r3, [r3, #2028]
 935:src/storage.c **** 	}
 3552              		.loc 1 935 47 view .LVU1024
 3553 002c C91A     		subs	r1, r1, r3
 937:src/storage.c **** 
 3554              		.loc 1 937 1 view .LVU1025
 3555 002e BDE81040 		pop	{r4, lr}
 3556              		.cfi_remember_state
 3557              		.cfi_restore 14
 3558              		.cfi_restore 4
 3559              		.cfi_def_cfa_offset 0
 935:src/storage.c **** 	}
 3560              		.loc 1 935 3 view .LVU1026
 3561 0032 0131     		adds	r1, r1, #1
 3562 0034 FFF7FEBF 		b	append_program
 3563              	.LVL330:
 3564              	.L289:
 3565              		.cfi_restore_state
 937:src/storage.c **** 
 3566              		.loc 1 937 1 view .LVU1027
 3567 0038 10BD     		pop	{r4, pc}
 3568              	.L294:
 3569 003a 00BF     		.align	2
 3570              	.L293:
 3571 003c 00000000 		.word	main_ram
 3572              		.cfi_endproc
 3573              	.LFE31:
 3575              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3576              		.align	2
 3577              	.LC11:
 3578 0000 45727220 		.ascii	"Err slf1\000"
 3578      736C6631 
 3578      00
ARM GAS  /tmp/ccoue2SN.s 			page 104


 3579 0009 000000   		.align	2
 3580              	.LC12:
 3581 000c 2E6C6962 		.ascii	".lib\000"
 3581      00
 3582 0011 000000   		.align	2
 3583              	.LC13:
 3584 0014 53617665 		.ascii	"Save Library File\000"
 3584      204C6962 
 3584      72617279 
 3584      2046696C 
 3584      6500
 3585 0026 0000     		.align	2
 3586              	.LC14:
 3587 0028 45727220 		.ascii	"Err slf2\000"
 3587      736C6632 
 3587      00
 3588              		.section	.text.save_lib_file,"ax",%progbits
 3589              		.align	1
 3590              		.p2align 2,,3
 3591              		.global	save_lib_file
 3592              		.syntax unified
 3593              		.thumb
 3594              		.thumb_func
 3595              		.fpu fpv4-sp-d16
 3597              	save_lib_file:
 3598              	.LVL331:
 3599              	.LFB32:
1078:src/storage.c ****   FRESULT f;
 3600              		.loc 1 1078 30 is_stmt 1 view -0
 3601              		.cfi_startproc
 3602              		@ args = 0, pretend = 0, frame = 8
 3603              		@ frame_needed = 0, uses_anonymous_args = 0
1079:src/storage.c ****   int fss;
 3604              		.loc 1 1079 3 view .LVU1029
1080:src/storage.c ****   int data = WRITE;
 3605              		.loc 1 1080 3 view .LVU1030
1081:src/storage.c ****   uint x=0;
 3606              		.loc 1 1081 3 view .LVU1031
1078:src/storage.c ****   FRESULT f;
 3607              		.loc 1 1078 30 is_stmt 0 view .LVU1032
 3608 0000 70B5     		push	{r4, r5, r6, lr}
 3609              		.cfi_def_cfa_offset 16
 3610              		.cfi_offset 4, -16
 3611              		.cfi_offset 5, -12
 3612              		.cfi_offset 6, -8
 3613              		.cfi_offset 14, -4
 3614 0002 86B0     		sub	sp, sp, #24
 3615              		.cfi_def_cfa_offset 40
1081:src/storage.c ****   uint x=0;
 3616              		.loc 1 1081 7 view .LVU1033
 3617 0004 0125     		movs	r5, #1
1082:src/storage.c **** 
 3618              		.loc 1 1082 8 view .LVU1034
 3619 0006 0023     		movs	r3, #0
1078:src/storage.c ****   FRESULT f;
 3620              		.loc 1 1078 30 view .LVU1035
 3621 0008 0446     		mov	r4, r0
ARM GAS  /tmp/ccoue2SN.s 			page 105


1084:src/storage.c ****   if (i == 0) {
 3622              		.loc 1 1084 3 view .LVU1036
 3623 000a 1E4E     		ldr	r6, .L305
1081:src/storage.c ****   uint x=0;
 3624              		.loc 1 1081 7 view .LVU1037
 3625 000c 0495     		str	r5, [sp, #16]
1082:src/storage.c **** 
 3626              		.loc 1 1082 3 is_stmt 1 view .LVU1038
1084:src/storage.c ****   if (i == 0) {
 3627              		.loc 1 1084 3 is_stmt 0 view .LVU1039
 3628 000e 2846     		mov	r0, r5
 3629              	.LVL332:
1082:src/storage.c **** 
 3630              		.loc 1 1082 8 view .LVU1040
 3631 0010 0593     		str	r3, [sp, #20]
1084:src/storage.c ****   if (i == 0) {
 3632              		.loc 1 1084 3 is_stmt 1 view .LVU1041
 3633 0012 B047     		blx	r6
 3634              	.LVL333:
1085:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3635              		.loc 1 1085 3 view .LVU1042
1085:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3636              		.loc 1 1085 6 is_stmt 0 view .LVU1043
 3637 0014 CCB9     		cbnz	r4, .L296
1086:src/storage.c ****     if (f != FR_OK) {
 3638              		.loc 1 1086 5 is_stmt 1 view .LVU1044
1086:src/storage.c ****     if (f != FR_OK) {
 3639              		.loc 1 1086 9 is_stmt 0 view .LVU1045
 3640 0016 1C4D     		ldr	r5, .L305+4
 3641 0018 1C4B     		ldr	r3, .L305+8
 3642 001a 6868     		ldr	r0, [r5, #4]
 3643 001c 1C49     		ldr	r1, .L305+12
 3644 001e 0B22     		movs	r2, #11
 3645 0020 9847     		blx	r3
 3646              	.LVL334:
1087:src/storage.c ****       f_close (FPT);
 3647              		.loc 1 1087 5 is_stmt 1 view .LVU1046
1087:src/storage.c ****       f_close (FPT);
 3648              		.loc 1 1087 8 is_stmt 0 view .LVU1047
 3649 0022 20BB     		cbnz	r0, .L297
 3650              	.LVL335:
 3651              	.L301:
1099:src/storage.c ****   if ( f != FR_OK ) {
 3652              		.loc 1 1099 3 is_stmt 1 view .LVU1048
1099:src/storage.c ****   if ( f != FR_OK ) {
 3653              		.loc 1 1099 7 is_stmt 0 view .LVU1049
 3654 0024 1B4A     		ldr	r2, .L305+16
 3655 0026 184B     		ldr	r3, .L305+4
 3656 0028 1168     		ldr	r1, [r2]
 3657 002a 5868     		ldr	r0, [r3, #4]
 3658 002c 1A4C     		ldr	r4, .L305+20
 3659 002e 05AB     		add	r3, sp, #20
 3660 0030 4FF48042 		mov	r2, #16384
 3661 0034 A047     		blx	r4
 3662              	.LVL336:
1100:src/storage.c ****     DispMsg = "Err slf2";
 3663              		.loc 1 1100 3 is_stmt 1 view .LVU1050
ARM GAS  /tmp/ccoue2SN.s 			page 106


1100:src/storage.c ****     DispMsg = "Err slf2";
 3664              		.loc 1 1100 6 is_stmt 0 view .LVU1051
 3665 0036 B0B9     		cbnz	r0, .L298
 3666              	.L299:
1103:src/storage.c ****   sys_disk_write_enable(0);
 3667              		.loc 1 1103 3 is_stmt 1 view .LVU1052
 3668 0038 134A     		ldr	r2, .L305+4
 3669 003a 184B     		ldr	r3, .L305+24
 3670 003c 5068     		ldr	r0, [r2, #4]
 3671              	.LVL337:
1103:src/storage.c ****   sys_disk_write_enable(0);
 3672              		.loc 1 1103 3 is_stmt 0 view .LVU1053
 3673 003e 9847     		blx	r3
 3674              	.LVL338:
1104:src/storage.c **** }
 3675              		.loc 1 1104 3 is_stmt 1 view .LVU1054
 3676 0040 104B     		ldr	r3, .L305
 3677 0042 0020     		movs	r0, #0
 3678 0044 9847     		blx	r3
 3679              	.LVL339:
1105:src/storage.c **** 
 3680              		.loc 1 1105 1 is_stmt 0 view .LVU1055
 3681 0046 06B0     		add	sp, sp, #24
 3682              		.cfi_remember_state
 3683              		.cfi_def_cfa_offset 16
 3684              		@ sp needed
 3685 0048 70BD     		pop	{r4, r5, r6, pc}
 3686              	.LVL340:
 3687              	.L296:
 3688              		.cfi_restore_state
1095:src/storage.c ****     if (fss != 1) return;
 3689              		.loc 1 1095 5 is_stmt 1 view .LVU1056
1095:src/storage.c ****     if (fss != 1) return;
 3690              		.loc 1 1095 11 is_stmt 0 view .LVU1057
 3691 004a 04AB     		add	r3, sp, #16
 3692 004c 0293     		str	r3, [sp, #8]
 3693 004e CDE90055 		strd	r5, r5, [sp]
 3694 0052 134C     		ldr	r4, .L305+28
 3695              	.LVL341:
1095:src/storage.c ****     if (fss != 1) return;
 3696              		.loc 1 1095 11 view .LVU1058
 3697 0054 134B     		ldr	r3, .L305+32
 3698 0056 144A     		ldr	r2, .L305+36
 3699 0058 1449     		ldr	r1, .L305+40
 3700 005a 1548     		ldr	r0, .L305+44
 3701 005c A047     		blx	r4
 3702              	.LVL342:
1096:src/storage.c ****   }
 3703              		.loc 1 1096 5 is_stmt 1 view .LVU1059
1096:src/storage.c ****   }
 3704              		.loc 1 1096 8 is_stmt 0 view .LVU1060
 3705 005e 0128     		cmp	r0, #1
 3706 0060 E0D0     		beq	.L301
1105:src/storage.c **** 
 3707              		.loc 1 1105 1 view .LVU1061
 3708 0062 06B0     		add	sp, sp, #24
 3709              		.cfi_remember_state
ARM GAS  /tmp/ccoue2SN.s 			page 107


 3710              		.cfi_def_cfa_offset 16
 3711              		@ sp needed
 3712 0064 70BD     		pop	{r4, r5, r6, pc}
 3713              	.LVL343:
 3714              	.L298:
 3715              		.cfi_restore_state
1101:src/storage.c ****   }
 3716              		.loc 1 1101 5 is_stmt 1 view .LVU1062
1101:src/storage.c ****   }
 3717              		.loc 1 1101 13 is_stmt 0 view .LVU1063
 3718 0066 134B     		ldr	r3, .L305+48
 3719 0068 134A     		ldr	r2, .L305+52
 3720 006a 1A60     		str	r2, [r3]
 3721 006c E4E7     		b	.L299
 3722              	.LVL344:
 3723              	.L297:
1088:src/storage.c ****       sys_disk_write_enable(0);
 3724              		.loc 1 1088 7 is_stmt 1 view .LVU1064
 3725 006e 0B4B     		ldr	r3, .L305+24
 3726 0070 6868     		ldr	r0, [r5, #4]
 3727              	.LVL345:
1088:src/storage.c ****       sys_disk_write_enable(0);
 3728              		.loc 1 1088 7 is_stmt 0 view .LVU1065
 3729 0072 9847     		blx	r3
 3730              	.LVL346:
1089:src/storage.c ****       DispMsg = "Err slf1";
 3731              		.loc 1 1089 7 is_stmt 1 view .LVU1066
 3732 0074 2046     		mov	r0, r4
 3733 0076 B047     		blx	r6
 3734              	.LVL347:
1090:src/storage.c ****       return;
 3735              		.loc 1 1090 7 view .LVU1067
1090:src/storage.c ****       return;
 3736              		.loc 1 1090 15 is_stmt 0 view .LVU1068
 3737 0078 0E4B     		ldr	r3, .L305+48
 3738 007a 104A     		ldr	r2, .L305+56
 3739 007c 1A60     		str	r2, [r3]
1091:src/storage.c ****     }
 3740              		.loc 1 1091 7 is_stmt 1 view .LVU1069
1105:src/storage.c **** 
 3741              		.loc 1 1105 1 is_stmt 0 view .LVU1070
 3742 007e 06B0     		add	sp, sp, #24
 3743              		.cfi_def_cfa_offset 16
 3744              		@ sp needed
 3745 0080 70BD     		pop	{r4, r5, r6, pc}
 3746              	.LVL348:
 3747              	.L306:
1105:src/storage.c **** 
 3748              		.loc 1 1105 1 view .LVU1071
 3749 0082 00BF     		.align	2
 3750              	.L305:
 3751 0084 E1030008 		.word	134218721
 3752 0088 00200010 		.word	268443648
 3753 008c 35040008 		.word	134218805
 3754 0090 18000000 		.word	.LC1
 3755 0094 00000000 		.word	library_ram
 3756 0098 41040008 		.word	134218817
ARM GAS  /tmp/ccoue2SN.s 			page 108


 3757 009c 39040008 		.word	134218809
 3758 00a0 51030008 		.word	134218577
 3759 00a4 00000000 		.word	open_selected_file
 3760 00a8 0C000000 		.word	.LC12
 3761 00ac 2C000000 		.word	.LC2
 3762 00b0 14000000 		.word	.LC13
 3763 00b4 00000000 		.word	DispMsg
 3764 00b8 28000000 		.word	.LC14
 3765 00bc 00000000 		.word	.LC11
 3766              		.cfi_endproc
 3767              	.LFE32:
 3769              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3770              		.align	2
 3771              	.LC15:
 3772 0000 4C6F6164 		.ascii	"Load Library File\000"
 3772      204C6962 
 3772      72617279 
 3772      2046696C 
 3772      6500
 3773 0012 0000     		.align	2
 3774              	.LC16:
 3775 0014 46696C65 		.ascii	"File too big\000"
 3775      20746F6F 
 3775      20626967 
 3775      00
 3776              		.section	.text.load_lib_file,"ax",%progbits
 3777              		.align	1
 3778              		.p2align 2,,3
 3779              		.global	load_lib_file
 3780              		.syntax unified
 3781              		.thumb
 3782              		.thumb_func
 3783              		.fpu fpv4-sp-d16
 3785              	load_lib_file:
 3786              	.LVL349:
 3787              	.LFB33:
1107:src/storage.c ****   FRESULT f;
 3788              		.loc 1 1107 30 is_stmt 1 view -0
 3789              		.cfi_startproc
 3790              		@ args = 0, pretend = 0, frame = 8
 3791              		@ frame_needed = 0, uses_anonymous_args = 0
1108:src/storage.c ****   int fss;
 3792              		.loc 1 1108 3 view .LVU1073
1109:src/storage.c ****   int data = READ;
 3793              		.loc 1 1109 3 view .LVU1074
1110:src/storage.c ****   uint x=0;
 3794              		.loc 1 1110 3 view .LVU1075
1107:src/storage.c ****   FRESULT f;
 3795              		.loc 1 1107 30 is_stmt 0 view .LVU1076
 3796 0000 10B5     		push	{r4, lr}
 3797              		.cfi_def_cfa_offset 8
 3798              		.cfi_offset 4, -8
 3799              		.cfi_offset 14, -4
1111:src/storage.c **** 
 3800              		.loc 1 1111 8 view .LVU1077
 3801 0002 0222     		movs	r2, #2
1107:src/storage.c ****   FRESULT f;
ARM GAS  /tmp/ccoue2SN.s 			page 109


 3802              		.loc 1 1107 30 view .LVU1078
 3803 0004 86B0     		sub	sp, sp, #24
 3804              		.cfi_def_cfa_offset 32
1111:src/storage.c **** 
 3805              		.loc 1 1111 8 view .LVU1079
 3806 0006 0023     		movs	r3, #0
 3807 0008 CDE90423 		strd	r2, r3, [sp, #16]
1113:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3808              		.loc 1 1113 3 is_stmt 1 view .LVU1080
1113:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3809              		.loc 1 1113 6 is_stmt 0 view .LVU1081
 3810 000c 08BB     		cbnz	r0, .L308
1114:src/storage.c ****     if (f != FR_OK) {
 3811              		.loc 1 1114 5 is_stmt 1 view .LVU1082
1114:src/storage.c ****     if (f != FR_OK) {
 3812              		.loc 1 1114 9 is_stmt 0 view .LVU1083
 3813 000e 1A4C     		ldr	r4, .L318
 3814 0010 1A4B     		ldr	r3, .L318+4
 3815 0012 6068     		ldr	r0, [r4, #4]
 3816              	.LVL350:
1114:src/storage.c ****     if (f != FR_OK) {
 3817              		.loc 1 1114 9 view .LVU1084
 3818 0014 1A49     		ldr	r1, .L318+8
 3819 0016 0122     		movs	r2, #1
 3820 0018 9847     		blx	r3
 3821              	.LVL351:
1115:src/storage.c ****       f_close (FPT);
 3822              		.loc 1 1115 5 is_stmt 1 view .LVU1085
1115:src/storage.c ****       f_close (FPT);
 3823              		.loc 1 1115 8 is_stmt 0 view .LVU1086
 3824 001a 0028     		cmp	r0, #0
 3825 001c 27D1     		bne	.L309
 3826              	.LVL352:
 3827              	.L313:
1126:src/storage.c ****   if ( f != FR_OK ) {
 3828              		.loc 1 1126 3 is_stmt 1 view .LVU1087
1126:src/storage.c ****   if ( f != FR_OK ) {
 3829              		.loc 1 1126 7 is_stmt 0 view .LVU1088
 3830 001e 194A     		ldr	r2, .L318+12
 3831 0020 154B     		ldr	r3, .L318
 3832 0022 1168     		ldr	r1, [r2]
 3833 0024 5868     		ldr	r0, [r3, #4]
 3834 0026 184C     		ldr	r4, .L318+16
 3835 0028 05AB     		add	r3, sp, #20
 3836 002a 4FF48042 		mov	r2, #16384
 3837 002e A047     		blx	r4
 3838              	.LVL353:
1127:src/storage.c ****     DispMsg = "Err slf2";
 3839              		.loc 1 1127 3 is_stmt 1 view .LVU1089
1127:src/storage.c ****     DispMsg = "Err slf2";
 3840              		.loc 1 1127 6 is_stmt 0 view .LVU1090
 3841 0030 10B1     		cbz	r0, .L311
1128:src/storage.c ****   }
 3842              		.loc 1 1128 5 is_stmt 1 view .LVU1091
1128:src/storage.c ****   }
 3843              		.loc 1 1128 13 is_stmt 0 view .LVU1092
 3844 0032 164B     		ldr	r3, .L318+20
ARM GAS  /tmp/ccoue2SN.s 			page 110


 3845 0034 164A     		ldr	r2, .L318+24
 3846 0036 1A60     		str	r2, [r3]
 3847              	.L311:
1130:src/storage.c ****     DispMsg = "File too big";
 3848              		.loc 1 1130 3 is_stmt 1 view .LVU1093
1130:src/storage.c ****     DispMsg = "File too big";
 3849              		.loc 1 1130 10 is_stmt 0 view .LVU1094
 3850 0038 0F4B     		ldr	r3, .L318
 3851 003a 5868     		ldr	r0, [r3, #4]
 3852              	.LVL354:
1130:src/storage.c ****     DispMsg = "File too big";
 3853              		.loc 1 1130 6 view .LVU1095
 3854 003c 8269     		ldr	r2, [r0, #24]
 3855 003e C368     		ldr	r3, [r0, #12]
 3856 0040 9A42     		cmp	r2, r3
 3857 0042 02D0     		beq	.L314
1131:src/storage.c ****   }
 3858              		.loc 1 1131 5 is_stmt 1 view .LVU1096
1131:src/storage.c ****   }
 3859              		.loc 1 1131 13 is_stmt 0 view .LVU1097
 3860 0044 114B     		ldr	r3, .L318+20
 3861 0046 134A     		ldr	r2, .L318+28
 3862 0048 1A60     		str	r2, [r3]
 3863              	.L314:
1133:src/storage.c **** }
 3864              		.loc 1 1133 3 is_stmt 1 view .LVU1098
 3865 004a 134B     		ldr	r3, .L318+32
 3866 004c 9847     		blx	r3
 3867              	.LVL355:
1134:src/storage.c **** 
 3868              		.loc 1 1134 1 is_stmt 0 view .LVU1099
 3869 004e 06B0     		add	sp, sp, #24
 3870              		.cfi_remember_state
 3871              		.cfi_def_cfa_offset 8
 3872              		@ sp needed
 3873 0050 10BD     		pop	{r4, pc}
 3874              	.LVL356:
 3875              	.L308:
 3876              		.cfi_restore_state
1122:src/storage.c ****     if (fss != 1) return;
 3877              		.loc 1 1122 5 is_stmt 1 view .LVU1100
1122:src/storage.c ****     if (fss != 1) return;
 3878              		.loc 1 1122 11 is_stmt 0 view .LVU1101
 3879 0052 04AA     		add	r2, sp, #16
 3880 0054 CDE90033 		strd	r3, r3, [sp]
 3881 0058 0292     		str	r2, [sp, #8]
 3882 005a 104C     		ldr	r4, .L318+36
 3883 005c 104B     		ldr	r3, .L318+40
 3884 005e 114A     		ldr	r2, .L318+44
 3885 0060 1149     		ldr	r1, .L318+48
 3886 0062 1248     		ldr	r0, .L318+52
 3887              	.LVL357:
1122:src/storage.c ****     if (fss != 1) return;
 3888              		.loc 1 1122 11 view .LVU1102
 3889 0064 A047     		blx	r4
 3890              	.LVL358:
1123:src/storage.c ****   }
ARM GAS  /tmp/ccoue2SN.s 			page 111


 3891              		.loc 1 1123 5 is_stmt 1 view .LVU1103
1123:src/storage.c ****   }
 3892              		.loc 1 1123 8 is_stmt 0 view .LVU1104
 3893 0066 0128     		cmp	r0, #1
 3894 0068 D9D0     		beq	.L313
1134:src/storage.c **** 
 3895              		.loc 1 1134 1 view .LVU1105
 3896 006a 06B0     		add	sp, sp, #24
 3897              		.cfi_remember_state
 3898              		.cfi_def_cfa_offset 8
 3899              		@ sp needed
 3900 006c 10BD     		pop	{r4, pc}
 3901              	.LVL359:
 3902              	.L309:
 3903              		.cfi_restore_state
1116:src/storage.c ****       //      DispMsg = "No file?";
 3904              		.loc 1 1116 7 is_stmt 1 view .LVU1106
 3905 006e 6068     		ldr	r0, [r4, #4]
 3906              	.LVL360:
1116:src/storage.c ****       //      DispMsg = "No file?";
 3907              		.loc 1 1116 7 is_stmt 0 view .LVU1107
 3908 0070 094B     		ldr	r3, .L318+32
 3909 0072 9847     		blx	r3
 3910              	.LVL361:
1118:src/storage.c ****     }
 3911              		.loc 1 1118 7 is_stmt 1 view .LVU1108
1134:src/storage.c **** 
 3912              		.loc 1 1134 1 is_stmt 0 view .LVU1109
 3913 0074 06B0     		add	sp, sp, #24
 3914              		.cfi_def_cfa_offset 8
 3915              		@ sp needed
 3916 0076 10BD     		pop	{r4, pc}
 3917              	.L319:
 3918              		.align	2
 3919              	.L318:
 3920 0078 00200010 		.word	268443648
 3921 007c 35040008 		.word	134218805
 3922 0080 18000000 		.word	.LC1
 3923 0084 00000000 		.word	library_ram
 3924 0088 3D040008 		.word	134218813
 3925 008c 00000000 		.word	DispMsg
 3926 0090 28000000 		.word	.LC14
 3927 0094 14000000 		.word	.LC16
 3928 0098 39040008 		.word	134218809
 3929 009c 51030008 		.word	134218577
 3930 00a0 00000000 		.word	open_selected_file
 3931 00a4 0C000000 		.word	.LC12
 3932 00a8 2C000000 		.word	.LC2
 3933 00ac 00000000 		.word	.LC15
 3934              		.cfi_endproc
 3935              	.LFE33:
 3937              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 3938              		.align	2
 3939              	.LC17:
 3940 0000 77703334 		.ascii	"wp34s/wp34s.dat\000"
 3940      732F7770 
 3940      3334732E 
ARM GAS  /tmp/ccoue2SN.s 			page 112


 3940      64617400 
 3941              		.align	2
 3942              	.LC18:
 3943 0010 45727220 		.ascii	"Err srf1\000"
 3943      73726631 
 3943      00
 3944 0019 000000   		.align	2
 3945              	.LC19:
 3946 001c 2E646174 		.ascii	".dat\000"
 3946      00
 3947 0021 000000   		.align	2
 3948              	.LC20:
 3949 0024 53617665 		.ascii	"Save RAM File\000"
 3949      2052414D 
 3949      2046696C 
 3949      6500
 3950 0032 0000     		.align	2
 3951              	.LC21:
 3952 0034 45727220 		.ascii	"Err srf2\000"
 3952      73726632 
 3952      00
 3953              		.section	.text.save_ram_file,"ax",%progbits
 3954              		.align	1
 3955              		.p2align 2,,3
 3956              		.global	save_ram_file
 3957              		.syntax unified
 3958              		.thumb
 3959              		.thumb_func
 3960              		.fpu fpv4-sp-d16
 3962              	save_ram_file:
 3963              	.LVL362:
 3964              	.LFB34:
1136:src/storage.c ****   FRESULT f;
 3965              		.loc 1 1136 30 is_stmt 1 view -0
 3966              		.cfi_startproc
 3967              		@ args = 0, pretend = 0, frame = 8
 3968              		@ frame_needed = 0, uses_anonymous_args = 0
1137:src/storage.c ****   int fss;
 3969              		.loc 1 1137 3 view .LVU1111
1138:src/storage.c ****   int data = WRITE;
 3970              		.loc 1 1138 3 view .LVU1112
1139:src/storage.c ****   uint x=0;
 3971              		.loc 1 1139 3 view .LVU1113
1136:src/storage.c ****   FRESULT f;
 3972              		.loc 1 1136 30 is_stmt 0 view .LVU1114
 3973 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3974              		.cfi_def_cfa_offset 20
 3975              		.cfi_offset 4, -20
 3976              		.cfi_offset 5, -16
 3977              		.cfi_offset 6, -12
 3978              		.cfi_offset 7, -8
 3979              		.cfi_offset 14, -4
 3980              	.LBB105:
 3981              	.LBB106:
 206:src/storage.c **** 			      Crc, &Crc );
 3982              		.loc 1 206 9 view .LVU1115
 3983 0002 264E     		ldr	r6, .L330
ARM GAS  /tmp/ccoue2SN.s 			page 113


 3984              	.LBE106:
 3985              	.LBE105:
1146:src/storage.c ****     if (i == 0) {
 3986              		.loc 1 1146 5 view .LVU1116
 3987 0004 264F     		ldr	r7, .L330+4
1136:src/storage.c ****   FRESULT f;
 3988              		.loc 1 1136 30 view .LVU1117
 3989 0006 87B0     		sub	sp, sp, #28
 3990              		.cfi_def_cfa_offset 48
1140:src/storage.c **** 
 3991              		.loc 1 1140 8 view .LVU1118
 3992 0008 0023     		movs	r3, #0
1139:src/storage.c ****   uint x=0;
 3993              		.loc 1 1139 7 view .LVU1119
 3994 000a 0125     		movs	r5, #1
1136:src/storage.c ****   FRESULT f;
 3995              		.loc 1 1136 30 view .LVU1120
 3996 000c 0446     		mov	r4, r0
1140:src/storage.c **** 
 3997              		.loc 1 1140 8 view .LVU1121
 3998 000e CDE90453 		strd	r5, r3, [sp, #16]
1142:src/storage.c ****     init_state();
 3999              		.loc 1 1142 5 is_stmt 1 view .LVU1122
 4000 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4001              	.LVL363:
1143:src/storage.c ****     checksum_all();
 4002              		.loc 1 1143 5 view .LVU1123
 4003 0016 FFF7FEFF 		bl	init_state
 4004              	.LVL364:
1144:src/storage.c **** 
 4005              		.loc 1 1144 5 view .LVU1124
 4006              	.LBB108:
 4007              	.LBI105:
 204:src/storage.c **** {
 4008              		.loc 1 204 5 view .LVU1125
 4009              	.LBB107:
 206:src/storage.c **** 			      Crc, &Crc );
 4010              		.loc 1 206 2 view .LVU1126
 206:src/storage.c **** 			      Crc, &Crc );
 4011              		.loc 1 206 9 is_stmt 0 view .LVU1127
 4012 001a 3068     		ldr	r0, [r6]
 4013 001c 40F2FE71 		movw	r1, #2046
 4014 0020 B0F8FE27 		ldrh	r2, [r0, #2046]
 4015 0024 4318     		adds	r3, r0, r1
 4016 0026 FFF7FEFF 		bl	test_checksum
 4017              	.LVL365:
 4018              	.LBE107:
 4019              	.LBE108:
1146:src/storage.c ****     if (i == 0) {
 4020              		.loc 1 1146 5 is_stmt 1 view .LVU1128
 4021 002a 2846     		mov	r0, r5
 4022 002c B847     		blx	r7
 4023              	.LVL366:
1147:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4024              		.loc 1 1147 5 view .LVU1129
1147:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4025              		.loc 1 1147 8 is_stmt 0 view .LVU1130
ARM GAS  /tmp/ccoue2SN.s 			page 114


 4026 002e C4B9     		cbnz	r4, .L321
1148:src/storage.c ****       if (f != FR_OK) {
 4027              		.loc 1 1148 7 is_stmt 1 view .LVU1131
1148:src/storage.c ****       if (f != FR_OK) {
 4028              		.loc 1 1148 11 is_stmt 0 view .LVU1132
 4029 0030 1C4D     		ldr	r5, .L330+8
 4030 0032 1D4B     		ldr	r3, .L330+12
 4031 0034 6868     		ldr	r0, [r5, #4]
 4032 0036 1D49     		ldr	r1, .L330+16
 4033 0038 0B22     		movs	r2, #11
 4034 003a 9847     		blx	r3
 4035              	.LVL367:
1149:src/storage.c **** 	f_close (FPT);
 4036              		.loc 1 1149 7 is_stmt 1 view .LVU1133
1149:src/storage.c **** 	f_close (FPT);
 4037              		.loc 1 1149 10 is_stmt 0 view .LVU1134
 4038 003c 18BB     		cbnz	r0, .L322
 4039              	.LVL368:
 4040              	.L326:
1161:src/storage.c ****     if ( f != FR_OK ) {
 4041              		.loc 1 1161 5 is_stmt 1 view .LVU1135
1161:src/storage.c ****     if ( f != FR_OK ) {
 4042              		.loc 1 1161 9 is_stmt 0 view .LVU1136
 4043 003e 194B     		ldr	r3, .L330+8
 4044 0040 3168     		ldr	r1, [r6]
 4045 0042 5868     		ldr	r0, [r3, #4]
 4046 0044 1A4C     		ldr	r4, .L330+20
 4047 0046 05AB     		add	r3, sp, #20
 4048 0048 4FF40062 		mov	r2, #2048
 4049 004c A047     		blx	r4
 4050              	.LVL369:
1162:src/storage.c ****       DispMsg = "Err srf2";
 4051              		.loc 1 1162 5 is_stmt 1 view .LVU1137
1162:src/storage.c ****       DispMsg = "Err srf2";
 4052              		.loc 1 1162 8 is_stmt 0 view .LVU1138
 4053 004e B0B9     		cbnz	r0, .L323
 4054              	.L324:
1165:src/storage.c ****     sys_disk_write_enable(0);
 4055              		.loc 1 1165 5 is_stmt 1 view .LVU1139
 4056 0050 144A     		ldr	r2, .L330+8
 4057 0052 184B     		ldr	r3, .L330+24
 4058 0054 5068     		ldr	r0, [r2, #4]
 4059              	.LVL370:
1165:src/storage.c ****     sys_disk_write_enable(0);
 4060              		.loc 1 1165 5 is_stmt 0 view .LVU1140
 4061 0056 9847     		blx	r3
 4062              	.LVL371:
1166:src/storage.c **** }
 4063              		.loc 1 1166 5 is_stmt 1 view .LVU1141
 4064 0058 114B     		ldr	r3, .L330+4
 4065 005a 0020     		movs	r0, #0
 4066 005c 9847     		blx	r3
 4067              	.LVL372:
1167:src/storage.c **** 
 4068              		.loc 1 1167 1 is_stmt 0 view .LVU1142
 4069 005e 07B0     		add	sp, sp, #28
 4070              		.cfi_remember_state
ARM GAS  /tmp/ccoue2SN.s 			page 115


 4071              		.cfi_def_cfa_offset 20
 4072              		@ sp needed
 4073 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4074              	.LVL373:
 4075              	.L321:
 4076              		.cfi_restore_state
1157:src/storage.c ****       if (fss != 1) return;
 4077              		.loc 1 1157 7 is_stmt 1 view .LVU1143
1157:src/storage.c ****       if (fss != 1) return;
 4078              		.loc 1 1157 13 is_stmt 0 view .LVU1144
 4079 0062 04AB     		add	r3, sp, #16
 4080 0064 0293     		str	r3, [sp, #8]
 4081 0066 CDE90055 		strd	r5, r5, [sp]
 4082 006a 134C     		ldr	r4, .L330+28
 4083              	.LVL374:
1157:src/storage.c ****       if (fss != 1) return;
 4084              		.loc 1 1157 13 view .LVU1145
 4085 006c 134B     		ldr	r3, .L330+32
 4086 006e 144A     		ldr	r2, .L330+36
 4087 0070 1449     		ldr	r1, .L330+40
 4088 0072 1548     		ldr	r0, .L330+44
 4089 0074 A047     		blx	r4
 4090              	.LVL375:
1158:src/storage.c ****     }
 4091              		.loc 1 1158 7 is_stmt 1 view .LVU1146
1158:src/storage.c ****     }
 4092              		.loc 1 1158 10 is_stmt 0 view .LVU1147
 4093 0076 0128     		cmp	r0, #1
 4094 0078 E1D0     		beq	.L326
1167:src/storage.c **** 
 4095              		.loc 1 1167 1 view .LVU1148
 4096 007a 07B0     		add	sp, sp, #28
 4097              		.cfi_remember_state
 4098              		.cfi_def_cfa_offset 20
 4099              		@ sp needed
 4100 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4101              	.LVL376:
 4102              	.L323:
 4103              		.cfi_restore_state
1163:src/storage.c ****     }
 4104              		.loc 1 1163 7 is_stmt 1 view .LVU1149
1163:src/storage.c ****     }
 4105              		.loc 1 1163 15 is_stmt 0 view .LVU1150
 4106 007e 134B     		ldr	r3, .L330+48
 4107 0080 134A     		ldr	r2, .L330+52
 4108 0082 1A60     		str	r2, [r3]
 4109 0084 E4E7     		b	.L324
 4110              	.LVL377:
 4111              	.L322:
1150:src/storage.c **** 	sys_disk_write_enable(0);
 4112              		.loc 1 1150 2 is_stmt 1 view .LVU1151
 4113 0086 0B4B     		ldr	r3, .L330+24
 4114 0088 6868     		ldr	r0, [r5, #4]
 4115              	.LVL378:
1150:src/storage.c **** 	sys_disk_write_enable(0);
 4116              		.loc 1 1150 2 is_stmt 0 view .LVU1152
 4117 008a 9847     		blx	r3
ARM GAS  /tmp/ccoue2SN.s 			page 116


 4118              	.LVL379:
1151:src/storage.c **** 	DispMsg = "Err srf1";
 4119              		.loc 1 1151 2 is_stmt 1 view .LVU1153
 4120 008c 2046     		mov	r0, r4
 4121 008e B847     		blx	r7
 4122              	.LVL380:
1152:src/storage.c **** 	return;
 4123              		.loc 1 1152 2 view .LVU1154
1152:src/storage.c **** 	return;
 4124              		.loc 1 1152 10 is_stmt 0 view .LVU1155
 4125 0090 0E4B     		ldr	r3, .L330+48
 4126 0092 104A     		ldr	r2, .L330+56
 4127 0094 1A60     		str	r2, [r3]
1153:src/storage.c ****       }
 4128              		.loc 1 1153 2 is_stmt 1 view .LVU1156
1167:src/storage.c **** 
 4129              		.loc 1 1167 1 is_stmt 0 view .LVU1157
 4130 0096 07B0     		add	sp, sp, #28
 4131              		.cfi_def_cfa_offset 20
 4132              		@ sp needed
 4133 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4134              	.LVL381:
 4135              	.L331:
1167:src/storage.c **** 
 4136              		.loc 1 1167 1 view .LVU1158
 4137 009a 00BF     		.align	2
 4138              	.L330:
 4139 009c 00000000 		.word	main_ram
 4140 00a0 E1030008 		.word	134218721
 4141 00a4 00200010 		.word	268443648
 4142 00a8 35040008 		.word	134218805
 4143 00ac 00000000 		.word	.LC17
 4144 00b0 41040008 		.word	134218817
 4145 00b4 39040008 		.word	134218809
 4146 00b8 51030008 		.word	134218577
 4147 00bc 00000000 		.word	open_selected_file
 4148 00c0 1C000000 		.word	.LC19
 4149 00c4 2C000000 		.word	.LC2
 4150 00c8 24000000 		.word	.LC20
 4151 00cc 00000000 		.word	DispMsg
 4152 00d0 34000000 		.word	.LC21
 4153 00d4 10000000 		.word	.LC18
 4154              		.cfi_endproc
 4155              	.LFE34:
 4157              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4158              		.align	2
 4159              	.LC22:
 4160 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4160      2052414D 
 4160      2046696C 
 4160      6500
 4161 000e 0000     		.align	2
 4162              	.LC23:
 4163 0010 45727220 		.ascii	"Err lrf2\000"
 4163      6C726632 
 4163      00
 4164              		.section	.text.load_ram_file,"ax",%progbits
ARM GAS  /tmp/ccoue2SN.s 			page 117


 4165              		.align	1
 4166              		.p2align 2,,3
 4167              		.global	load_ram_file
 4168              		.syntax unified
 4169              		.thumb
 4170              		.thumb_func
 4171              		.fpu fpv4-sp-d16
 4173              	load_ram_file:
 4174              	.LVL382:
 4175              	.LFB35:
1169:src/storage.c ****   FRESULT f;
 4176              		.loc 1 1169 29 is_stmt 1 view -0
 4177              		.cfi_startproc
 4178              		@ args = 0, pretend = 0, frame = 8
 4179              		@ frame_needed = 0, uses_anonymous_args = 0
1170:src/storage.c ****   int fss;
 4180              		.loc 1 1170 3 view .LVU1160
1171:src/storage.c ****   int data = READ;
 4181              		.loc 1 1171 3 view .LVU1161
1172:src/storage.c ****   uint x=0;
 4182              		.loc 1 1172 3 view .LVU1162
1169:src/storage.c ****   FRESULT f;
 4183              		.loc 1 1169 29 is_stmt 0 view .LVU1163
 4184 0000 30B5     		push	{r4, r5, lr}
 4185              		.cfi_def_cfa_offset 12
 4186              		.cfi_offset 4, -12
 4187              		.cfi_offset 5, -8
 4188              		.cfi_offset 14, -4
1173:src/storage.c ****   
 4189              		.loc 1 1173 8 view .LVU1164
 4190 0002 0222     		movs	r2, #2
1169:src/storage.c ****   FRESULT f;
 4191              		.loc 1 1169 29 view .LVU1165
 4192 0004 87B0     		sub	sp, sp, #28
 4193              		.cfi_def_cfa_offset 40
1173:src/storage.c ****   
 4194              		.loc 1 1173 8 view .LVU1166
 4195 0006 0023     		movs	r3, #0
 4196 0008 CDE90423 		strd	r2, r3, [sp, #16]
1175:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4197              		.loc 1 1175 3 is_stmt 1 view .LVU1167
1175:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4198              		.loc 1 1175 6 is_stmt 0 view .LVU1168
 4199 000c F8B9     		cbnz	r0, .L333
1176:src/storage.c ****     if (f != FR_OK) {
 4200              		.loc 1 1176 5 is_stmt 1 view .LVU1169
1176:src/storage.c ****     if (f != FR_OK) {
 4201              		.loc 1 1176 9 is_stmt 0 view .LVU1170
 4202 000e 214C     		ldr	r4, .L344
 4203 0010 214B     		ldr	r3, .L344+4
 4204 0012 6068     		ldr	r0, [r4, #4]
 4205              	.LVL383:
1176:src/storage.c ****     if (f != FR_OK) {
 4206              		.loc 1 1176 9 view .LVU1171
 4207 0014 2149     		ldr	r1, .L344+8
 4208 0016 0122     		movs	r2, #1
 4209 0018 9847     		blx	r3
ARM GAS  /tmp/ccoue2SN.s 			page 118


 4210              	.LVL384:
1177:src/storage.c ****       f_close (FPT);
 4211              		.loc 1 1177 5 is_stmt 1 view .LVU1172
1177:src/storage.c ****       f_close (FPT);
 4212              		.loc 1 1177 8 is_stmt 0 view .LVU1173
 4213 001a 0028     		cmp	r0, #0
 4214 001c 34D1     		bne	.L334
 4215              	.LVL385:
 4216              	.L338:
1188:src/storage.c ****   if ( f != FR_OK ) {
 4217              		.loc 1 1188 3 is_stmt 1 view .LVU1174
1188:src/storage.c ****   if ( f != FR_OK ) {
 4218              		.loc 1 1188 7 is_stmt 0 view .LVU1175
 4219 001e 204B     		ldr	r3, .L344+12
 4220 0020 1C4D     		ldr	r5, .L344
 4221 0022 1968     		ldr	r1, [r3]
 4222 0024 1F4C     		ldr	r4, .L344+16
 4223 0026 6868     		ldr	r0, [r5, #4]
 4224 0028 05AB     		add	r3, sp, #20
 4225 002a 4FF40062 		mov	r2, #2048
 4226 002e A047     		blx	r4
 4227              	.LVL386:
1189:src/storage.c ****     DispMsg = "Err lrf2";
 4228              		.loc 1 1189 3 is_stmt 1 view .LVU1176
1189:src/storage.c ****     DispMsg = "Err lrf2";
 4229              		.loc 1 1189 6 is_stmt 0 view .LVU1177
 4230 0030 0446     		mov	r4, r0
 4231 0032 D8B9     		cbnz	r0, .L343
1194:src/storage.c ****     DispMsg = "File too big";
 4232              		.loc 1 1194 3 is_stmt 1 view .LVU1178
1194:src/storage.c ****     DispMsg = "File too big";
 4233              		.loc 1 1194 10 is_stmt 0 view .LVU1179
 4234 0034 6868     		ldr	r0, [r5, #4]
 4235              	.LVL387:
1194:src/storage.c ****     DispMsg = "File too big";
 4236              		.loc 1 1194 6 view .LVU1180
 4237 0036 8269     		ldr	r2, [r0, #24]
 4238 0038 C368     		ldr	r3, [r0, #12]
 4239 003a 9A42     		cmp	r2, r3
 4240 003c 1FD0     		beq	.L339
1195:src/storage.c ****       f_close( FPT );
 4241              		.loc 1 1195 5 is_stmt 1 view .LVU1181
1195:src/storage.c ****       f_close( FPT );
 4242              		.loc 1 1195 13 is_stmt 0 view .LVU1182
 4243 003e 1A4B     		ldr	r3, .L344+20
 4244 0040 1A4A     		ldr	r2, .L344+24
 4245 0042 1A60     		str	r2, [r3]
1196:src/storage.c ****       return 1;
 4246              		.loc 1 1196 7 is_stmt 1 view .LVU1183
 4247 0044 1A4B     		ldr	r3, .L344+28
 4248 0046 9847     		blx	r3
 4249              	.LVL388:
1197:src/storage.c ****   }
 4250              		.loc 1 1197 7 view .LVU1184
1197:src/storage.c ****   }
 4251              		.loc 1 1197 14 is_stmt 0 view .LVU1185
 4252 0048 0120     		movs	r0, #1
ARM GAS  /tmp/ccoue2SN.s 			page 119


1201:src/storage.c **** 
 4253              		.loc 1 1201 1 view .LVU1186
 4254 004a 07B0     		add	sp, sp, #28
 4255              		.cfi_remember_state
 4256              		.cfi_def_cfa_offset 12
 4257              		@ sp needed
 4258 004c 30BD     		pop	{r4, r5, pc}
 4259              	.LVL389:
 4260              	.L333:
 4261              		.cfi_restore_state
1184:src/storage.c ****     if (fss != 1) return 1;
 4262              		.loc 1 1184 5 is_stmt 1 view .LVU1187
1184:src/storage.c ****     if (fss != 1) return 1;
 4263              		.loc 1 1184 11 is_stmt 0 view .LVU1188
 4264 004e 04AA     		add	r2, sp, #16
 4265 0050 CDE90033 		strd	r3, r3, [sp]
 4266 0054 0292     		str	r2, [sp, #8]
 4267 0056 174C     		ldr	r4, .L344+32
 4268 0058 174B     		ldr	r3, .L344+36
 4269 005a 184A     		ldr	r2, .L344+40
 4270 005c 1849     		ldr	r1, .L344+44
 4271 005e 1948     		ldr	r0, .L344+48
 4272              	.LVL390:
1184:src/storage.c ****     if (fss != 1) return 1;
 4273              		.loc 1 1184 11 view .LVU1189
 4274 0060 A047     		blx	r4
 4275              	.LVL391:
1185:src/storage.c ****   }
 4276              		.loc 1 1185 5 is_stmt 1 view .LVU1190
1185:src/storage.c ****   }
 4277              		.loc 1 1185 8 is_stmt 0 view .LVU1191
 4278 0062 0128     		cmp	r0, #1
 4279 0064 DBD0     		beq	.L338
1185:src/storage.c ****   }
 4280              		.loc 1 1185 26 view .LVU1192
 4281 0066 0120     		movs	r0, #1
 4282              	.LVL392:
1201:src/storage.c **** 
 4283              		.loc 1 1201 1 view .LVU1193
 4284 0068 07B0     		add	sp, sp, #28
 4285              		.cfi_remember_state
 4286              		.cfi_def_cfa_offset 12
 4287              		@ sp needed
 4288 006a 30BD     		pop	{r4, r5, pc}
 4289              	.LVL393:
 4290              	.L343:
 4291              		.cfi_restore_state
1190:src/storage.c ****       f_close( FPT );
 4292              		.loc 1 1190 5 is_stmt 1 view .LVU1194
1190:src/storage.c ****       f_close( FPT );
 4293              		.loc 1 1190 13 is_stmt 0 view .LVU1195
 4294 006c 0E4B     		ldr	r3, .L344+20
 4295 006e 164A     		ldr	r2, .L344+52
 4296 0070 1A60     		str	r2, [r3]
1191:src/storage.c ****       return 1;
 4297              		.loc 1 1191 7 is_stmt 1 view .LVU1196
 4298 0072 6868     		ldr	r0, [r5, #4]
ARM GAS  /tmp/ccoue2SN.s 			page 120


 4299              	.LVL394:
1191:src/storage.c ****       return 1;
 4300              		.loc 1 1191 7 is_stmt 0 view .LVU1197
 4301 0074 0E4B     		ldr	r3, .L344+28
 4302 0076 9847     		blx	r3
 4303              	.LVL395:
1192:src/storage.c ****   }
 4304              		.loc 1 1192 7 is_stmt 1 view .LVU1198
1192:src/storage.c ****   }
 4305              		.loc 1 1192 14 is_stmt 0 view .LVU1199
 4306 0078 0120     		movs	r0, #1
1201:src/storage.c **** 
 4307              		.loc 1 1201 1 view .LVU1200
 4308 007a 07B0     		add	sp, sp, #28
 4309              		.cfi_remember_state
 4310              		.cfi_def_cfa_offset 12
 4311              		@ sp needed
 4312 007c 30BD     		pop	{r4, r5, pc}
 4313              	.L339:
 4314              		.cfi_restore_state
1199:src/storage.c ****   return 0;
 4315              		.loc 1 1199 3 is_stmt 1 view .LVU1201
 4316 007e 0C4B     		ldr	r3, .L344+28
 4317 0080 9847     		blx	r3
 4318              	.LVL396:
1200:src/storage.c **** }
 4319              		.loc 1 1200 3 view .LVU1202
1200:src/storage.c **** }
 4320              		.loc 1 1200 10 is_stmt 0 view .LVU1203
 4321 0082 2046     		mov	r0, r4
1201:src/storage.c **** 
 4322              		.loc 1 1201 1 view .LVU1204
 4323 0084 07B0     		add	sp, sp, #28
 4324              		.cfi_remember_state
 4325              		.cfi_def_cfa_offset 12
 4326              		@ sp needed
 4327 0086 30BD     		pop	{r4, r5, pc}
 4328              	.LVL397:
 4329              	.L334:
 4330              		.cfi_restore_state
1178:src/storage.c ****       //      DispMsg = "No file?";
 4331              		.loc 1 1178 7 is_stmt 1 view .LVU1205
 4332 0088 6068     		ldr	r0, [r4, #4]
 4333              	.LVL398:
1178:src/storage.c ****       //      DispMsg = "No file?";
 4334              		.loc 1 1178 7 is_stmt 0 view .LVU1206
 4335 008a 094B     		ldr	r3, .L344+28
 4336 008c 9847     		blx	r3
 4337              	.LVL399:
1180:src/storage.c ****     }
 4338              		.loc 1 1180 7 is_stmt 1 view .LVU1207
1180:src/storage.c ****     }
 4339              		.loc 1 1180 14 is_stmt 0 view .LVU1208
 4340 008e 0120     		movs	r0, #1
1201:src/storage.c **** 
 4341              		.loc 1 1201 1 view .LVU1209
 4342 0090 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccoue2SN.s 			page 121


 4343              		.cfi_def_cfa_offset 12
 4344              		@ sp needed
 4345 0092 30BD     		pop	{r4, r5, pc}
 4346              	.L345:
 4347              		.align	2
 4348              	.L344:
 4349 0094 00200010 		.word	268443648
 4350 0098 35040008 		.word	134218805
 4351 009c 00000000 		.word	.LC17
 4352 00a0 00000000 		.word	main_ram
 4353 00a4 3D040008 		.word	134218813
 4354 00a8 00000000 		.word	DispMsg
 4355 00ac 14000000 		.word	.LC16
 4356 00b0 39040008 		.word	134218809
 4357 00b4 51030008 		.word	134218577
 4358 00b8 00000000 		.word	open_selected_file
 4359 00bc 1C000000 		.word	.LC19
 4360 00c0 2C000000 		.word	.LC2
 4361 00c4 00000000 		.word	.LC22
 4362 00c8 10000000 		.word	.LC23
 4363              		.cfi_endproc
 4364              	.LFE35:
 4366              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4367              		.align	2
 4368              	.LC24:
 4369 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4369      2052414D 
 4369      20426163 
 4369      6B757020 
 4369      46696C65 
 4370 0015 000000   		.align	2
 4371              	.LC25:
 4372 0018 45727220 		.ascii	"Err lbf2\000"
 4372      6C626632 
 4372      00
 4373              		.section	.text.load_backup_file,"ax",%progbits
 4374              		.align	1
 4375              		.p2align 2,,3
 4376              		.global	load_backup_file
 4377              		.syntax unified
 4378              		.thumb
 4379              		.thumb_func
 4380              		.fpu fpv4-sp-d16
 4382              	load_backup_file:
 4383              	.LVL400:
 4384              	.LFB36:
1203:src/storage.c ****   FRESULT f;
 4385              		.loc 1 1203 33 is_stmt 1 view -0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 8
 4388              		@ frame_needed = 0, uses_anonymous_args = 0
1204:src/storage.c ****   int fss;
 4389              		.loc 1 1204 3 view .LVU1211
1205:src/storage.c ****   int data = READ;
 4390              		.loc 1 1205 3 view .LVU1212
1206:src/storage.c ****   uint x=0;
 4391              		.loc 1 1206 3 view .LVU1213
ARM GAS  /tmp/ccoue2SN.s 			page 122


1203:src/storage.c ****   FRESULT f;
 4392              		.loc 1 1203 33 is_stmt 0 view .LVU1214
 4393 0000 10B5     		push	{r4, lr}
 4394              		.cfi_def_cfa_offset 8
 4395              		.cfi_offset 4, -8
 4396              		.cfi_offset 14, -4
1207:src/storage.c **** 
 4397              		.loc 1 1207 8 view .LVU1215
 4398 0002 0222     		movs	r2, #2
1203:src/storage.c ****   FRESULT f;
 4399              		.loc 1 1203 33 view .LVU1216
 4400 0004 86B0     		sub	sp, sp, #24
 4401              		.cfi_def_cfa_offset 32
1207:src/storage.c **** 
 4402              		.loc 1 1207 8 view .LVU1217
 4403 0006 0023     		movs	r3, #0
 4404 0008 CDE90423 		strd	r2, r3, [sp, #16]
1209:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4405              		.loc 1 1209 3 is_stmt 1 view .LVU1218
1209:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4406              		.loc 1 1209 6 is_stmt 0 view .LVU1219
 4407 000c 08BB     		cbnz	r0, .L347
1210:src/storage.c ****     if (f != FR_OK) {
 4408              		.loc 1 1210 5 is_stmt 1 view .LVU1220
1210:src/storage.c ****     if (f != FR_OK) {
 4409              		.loc 1 1210 9 is_stmt 0 view .LVU1221
 4410 000e 1A4C     		ldr	r4, .L357
 4411 0010 1A4B     		ldr	r3, .L357+4
 4412 0012 6068     		ldr	r0, [r4, #4]
 4413              	.LVL401:
1210:src/storage.c ****     if (f != FR_OK) {
 4414              		.loc 1 1210 9 view .LVU1222
 4415 0014 1A49     		ldr	r1, .L357+8
 4416 0016 0122     		movs	r2, #1
 4417 0018 9847     		blx	r3
 4418              	.LVL402:
1211:src/storage.c ****       f_close (FPT);
 4419              		.loc 1 1211 5 is_stmt 1 view .LVU1223
1211:src/storage.c ****       f_close (FPT);
 4420              		.loc 1 1211 8 is_stmt 0 view .LVU1224
 4421 001a 0028     		cmp	r0, #0
 4422 001c 27D1     		bne	.L348
 4423              	.LVL403:
 4424              	.L352:
1221:src/storage.c ****   if ( f != FR_OK ) {
 4425              		.loc 1 1221 3 is_stmt 1 view .LVU1225
1221:src/storage.c ****   if ( f != FR_OK ) {
 4426              		.loc 1 1221 7 is_stmt 0 view .LVU1226
 4427 001e 194A     		ldr	r2, .L357+12
 4428 0020 154B     		ldr	r3, .L357
 4429 0022 1168     		ldr	r1, [r2]
 4430 0024 5868     		ldr	r0, [r3, #4]
 4431 0026 184C     		ldr	r4, .L357+16
 4432 0028 05AB     		add	r3, sp, #20
 4433 002a 4FF40062 		mov	r2, #2048
 4434 002e A047     		blx	r4
 4435              	.LVL404:
ARM GAS  /tmp/ccoue2SN.s 			page 123


1222:src/storage.c ****     DispMsg = "Err lbf2";
 4436              		.loc 1 1222 3 is_stmt 1 view .LVU1227
1222:src/storage.c ****     DispMsg = "Err lbf2";
 4437              		.loc 1 1222 6 is_stmt 0 view .LVU1228
 4438 0030 10B1     		cbz	r0, .L350
1223:src/storage.c ****   }
 4439              		.loc 1 1223 5 is_stmt 1 view .LVU1229
1223:src/storage.c ****   }
 4440              		.loc 1 1223 13 is_stmt 0 view .LVU1230
 4441 0032 164B     		ldr	r3, .L357+20
 4442 0034 164A     		ldr	r2, .L357+24
 4443 0036 1A60     		str	r2, [r3]
 4444              	.L350:
1225:src/storage.c ****     DispMsg = "File too big";
 4445              		.loc 1 1225 3 is_stmt 1 view .LVU1231
1225:src/storage.c ****     DispMsg = "File too big";
 4446              		.loc 1 1225 10 is_stmt 0 view .LVU1232
 4447 0038 0F4B     		ldr	r3, .L357
 4448 003a 5868     		ldr	r0, [r3, #4]
 4449              	.LVL405:
1225:src/storage.c ****     DispMsg = "File too big";
 4450              		.loc 1 1225 6 view .LVU1233
 4451 003c 8269     		ldr	r2, [r0, #24]
 4452 003e C368     		ldr	r3, [r0, #12]
 4453 0040 9A42     		cmp	r2, r3
 4454 0042 02D0     		beq	.L353
1226:src/storage.c ****   }
 4455              		.loc 1 1226 5 is_stmt 1 view .LVU1234
1226:src/storage.c ****   }
 4456              		.loc 1 1226 13 is_stmt 0 view .LVU1235
 4457 0044 114B     		ldr	r3, .L357+20
 4458 0046 134A     		ldr	r2, .L357+28
 4459 0048 1A60     		str	r2, [r3]
 4460              	.L353:
1228:src/storage.c **** }
 4461              		.loc 1 1228 3 is_stmt 1 view .LVU1236
 4462 004a 134B     		ldr	r3, .L357+32
 4463 004c 9847     		blx	r3
 4464              	.LVL406:
1229:src/storage.c **** 
 4465              		.loc 1 1229 1 is_stmt 0 view .LVU1237
 4466 004e 06B0     		add	sp, sp, #24
 4467              		.cfi_remember_state
 4468              		.cfi_def_cfa_offset 8
 4469              		@ sp needed
 4470 0050 10BD     		pop	{r4, pc}
 4471              	.LVL407:
 4472              	.L347:
 4473              		.cfi_restore_state
1217:src/storage.c ****     if (fss != 1) return;
 4474              		.loc 1 1217 5 is_stmt 1 view .LVU1238
1217:src/storage.c ****     if (fss != 1) return;
 4475              		.loc 1 1217 11 is_stmt 0 view .LVU1239
 4476 0052 04AA     		add	r2, sp, #16
 4477 0054 CDE90033 		strd	r3, r3, [sp]
 4478 0058 0292     		str	r2, [sp, #8]
 4479 005a 104C     		ldr	r4, .L357+36
ARM GAS  /tmp/ccoue2SN.s 			page 124


 4480 005c 104B     		ldr	r3, .L357+40
 4481 005e 114A     		ldr	r2, .L357+44
 4482 0060 1149     		ldr	r1, .L357+48
 4483 0062 1248     		ldr	r0, .L357+52
 4484              	.LVL408:
1217:src/storage.c ****     if (fss != 1) return;
 4485              		.loc 1 1217 11 view .LVU1240
 4486 0064 A047     		blx	r4
 4487              	.LVL409:
1218:src/storage.c ****   }
 4488              		.loc 1 1218 5 is_stmt 1 view .LVU1241
1218:src/storage.c ****   }
 4489              		.loc 1 1218 8 is_stmt 0 view .LVU1242
 4490 0066 0128     		cmp	r0, #1
 4491 0068 D9D0     		beq	.L352
1229:src/storage.c **** 
 4492              		.loc 1 1229 1 view .LVU1243
 4493 006a 06B0     		add	sp, sp, #24
 4494              		.cfi_remember_state
 4495              		.cfi_def_cfa_offset 8
 4496              		@ sp needed
 4497 006c 10BD     		pop	{r4, pc}
 4498              	.LVL410:
 4499              	.L348:
 4500              		.cfi_restore_state
1212:src/storage.c ****       return;
 4501              		.loc 1 1212 7 is_stmt 1 view .LVU1244
 4502 006e 6068     		ldr	r0, [r4, #4]
 4503              	.LVL411:
1212:src/storage.c ****       return;
 4504              		.loc 1 1212 7 is_stmt 0 view .LVU1245
 4505 0070 094B     		ldr	r3, .L357+32
 4506 0072 9847     		blx	r3
 4507              	.LVL412:
1213:src/storage.c ****     }
 4508              		.loc 1 1213 7 is_stmt 1 view .LVU1246
1229:src/storage.c **** 
 4509              		.loc 1 1229 1 is_stmt 0 view .LVU1247
 4510 0074 06B0     		add	sp, sp, #24
 4511              		.cfi_def_cfa_offset 8
 4512              		@ sp needed
 4513 0076 10BD     		pop	{r4, pc}
 4514              	.L358:
 4515              		.align	2
 4516              	.L357:
 4517 0078 00200010 		.word	268443648
 4518 007c 35040008 		.word	134218805
 4519 0080 00000000 		.word	.LC0
 4520 0084 00000000 		.word	main_ram
 4521 0088 3D040008 		.word	134218813
 4522 008c 00000000 		.word	DispMsg
 4523 0090 18000000 		.word	.LC25
 4524 0094 14000000 		.word	.LC16
 4525 0098 39040008 		.word	134218809
 4526 009c 51030008 		.word	134218577
 4527 00a0 00000000 		.word	open_selected_file
 4528 00a4 1C000000 		.word	.LC19
ARM GAS  /tmp/ccoue2SN.s 			page 125


 4529 00a8 2C000000 		.word	.LC2
 4530 00ac 00000000 		.word	.LC24
 4531              		.cfi_endproc
 4532              	.LFE36:
 4534              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4535              		.align	2
 4536              	.LC26:
 4537 0000 57726974 		.ascii	"Write err\000"
 4537      65206572 
 4537      7200
 4538 000a 0000     		.align	2
 4539              	.LC27:
 4540 000c 57726974 		.ascii	"Written\000"
 4540      74656E00 
 4541              		.align	2
 4542              	.LC28:
 4543 0014 53617665 		.ascii	"Save current program\000"
 4543      20637572 
 4543      72656E74 
 4543      2070726F 
 4543      6772616D 
 4544 0029 000000   		.align	2
 4545              	.LC29:
 4546 002c 4D656D20 		.ascii	"Mem short\000"
 4546      73686F72 
 4546      7400
 4547              		.section	.text.save_prog_file,"ax",%progbits
 4548              		.align	1
 4549              		.p2align 2,,3
 4550              		.global	save_prog_file
 4551              		.syntax unified
 4552              		.thumb
 4553              		.thumb_func
 4554              		.fpu fpv4-sp-d16
 4556              	save_prog_file:
 4557              	.LFB38:
1257:src/storage.c ****   opcode lbl; 
 4558              		.loc 1 1257 24 is_stmt 1 view -0
 4559              		.cfi_startproc
 4560              		@ args = 0, pretend = 0, frame = 8
 4561              		@ frame_needed = 0, uses_anonymous_args = 0
1258:src/storage.c ****   unsigned int pc;
 4562              		.loc 1 1258 3 view .LVU1249
1259:src/storage.c ****   unsigned short steps, prog_crc;
 4563              		.loc 1 1259 3 view .LVU1250
1260:src/storage.c ****   FRESULT f;
 4564              		.loc 1 1260 3 view .LVU1251
1261:src/storage.c ****   int data = WRITE;
 4565              		.loc 1 1261 3 view .LVU1252
1262:src/storage.c ****   int fss;
 4566              		.loc 1 1262 3 view .LVU1253
1257:src/storage.c ****   opcode lbl; 
 4567              		.loc 1 1257 24 is_stmt 0 view .LVU1254
 4568 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4569              		.cfi_def_cfa_offset 28
 4570              		.cfi_offset 4, -28
 4571              		.cfi_offset 5, -24
ARM GAS  /tmp/ccoue2SN.s 			page 126


 4572              		.cfi_offset 6, -20
 4573              		.cfi_offset 7, -16
 4574              		.cfi_offset 8, -12
 4575              		.cfi_offset 9, -8
 4576              		.cfi_offset 14, -4
1264:src/storage.c ****   char* buffer;
 4577              		.loc 1 1264 8 view .LVU1255
 4578 0004 0023     		movs	r3, #0
1257:src/storage.c ****   opcode lbl; 
 4579              		.loc 1 1257 24 view .LVU1256
 4580 0006 87B0     		sub	sp, sp, #28
 4581              		.cfi_def_cfa_offset 56
1264:src/storage.c ****   char* buffer;
 4582              		.loc 1 1264 8 view .LVU1257
 4583 0008 0124     		movs	r4, #1
 4584 000a CDE90443 		strd	r4, r3, [sp, #16]
1265:src/storage.c ****   FLASH_REGION* fr;
 4585              		.loc 1 1265 3 is_stmt 1 view .LVU1258
1266:src/storage.c **** 
 4586              		.loc 1 1266 3 view .LVU1259
1269:src/storage.c ****     /*
 4587              		.loc 1 1269 3 view .LVU1260
1269:src/storage.c ****     /*
 4588              		.loc 1 1269 8 is_stmt 0 view .LVU1261
 4589 000e FFF7FEFF 		bl	not_running
 4590              	.LVL413:
1269:src/storage.c ****     /*
 4591              		.loc 1 1269 6 view .LVU1262
 4592 0012 C8B1     		cbz	r0, .L359
1273:src/storage.c ****     if ( pc == REGION_XROM ) {
 4593              		.loc 1 1273 5 is_stmt 1 view .LVU1263
 4594              	.LVL414:
1274:src/storage.c ****       report_err( ERR_ILLEGAL );
 4595              		.loc 1 1274 5 view .LVU1264
1273:src/storage.c ****     if ( pc == REGION_XROM ) {
 4596              		.loc 1 1273 10 is_stmt 0 view .LVU1265
 4597 0014 464D     		ldr	r5, .L376
 4598              	.LVL415:
1273:src/storage.c ****     if ( pc == REGION_XROM ) {
 4599              		.loc 1 1273 10 view .LVU1266
 4600 0016 2B68     		ldr	r3, [r5]
 4601 0018 B3F8E037 		ldrh	r3, [r3, #2016]
1274:src/storage.c ****       report_err( ERR_ILLEGAL );
 4602              		.loc 1 1274 8 view .LVU1267
 4603 001c 9B0B     		lsrs	r3, r3, #14
 4604 001e 032B     		cmp	r3, #3
 4605 0020 72D0     		beq	.L374
1281:src/storage.c ****     lbl = getprog( ProgBegin );
 4606              		.loc 1 1281 5 is_stmt 1 view .LVU1268
 4607 0022 2046     		mov	r0, r4
 4608 0024 FFF7FEFF 		bl	update_program_bounds
 4609              	.LVL416:
1282:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4610              		.loc 1 1282 5 view .LVU1269
1282:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4611              		.loc 1 1282 20 is_stmt 0 view .LVU1270
 4612 0028 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccoue2SN.s 			page 127


1282:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4613              		.loc 1 1282 11 view .LVU1271
 4614 002a B3F8EC07 		ldrh	r0, [r3, #2028]
 4615 002e FFF7FEFF 		bl	getprog
 4616              	.LVL417:
1283:src/storage.c ****       report_err( ERR_NO_LBL );
 4617              		.loc 1 1283 5 is_stmt 1 view .LVU1272
1283:src/storage.c ****       report_err( ERR_NO_LBL );
 4618              		.loc 1 1283 11 is_stmt 0 view .LVU1273
 4619 0032 00F47043 		and	r3, r0, #61440
1283:src/storage.c ****       report_err( ERR_NO_LBL );
 4620              		.loc 1 1283 8 view .LVU1274
 4621 0036 B3F5704F 		cmp	r3, #61440
 4622 003a 02D1     		bne	.L363
1283:src/storage.c ****       report_err( ERR_NO_LBL );
 4623              		.loc 1 1283 22 discriminator 1 view .LVU1275
 4624 003c 10F4706F 		tst	r0, #3840
 4625 0040 05D0     		beq	.L364
 4626              	.L363:
1284:src/storage.c ****       return;
 4627              		.loc 1 1284 7 is_stmt 1 view .LVU1276
 4628 0042 0620     		movs	r0, #6
 4629              	.LVL418:
1284:src/storage.c ****       return;
 4630              		.loc 1 1284 7 is_stmt 0 view .LVU1277
 4631 0044 FFF7FEFF 		bl	report_err
 4632              	.LVL419:
1285:src/storage.c ****     }
 4633              		.loc 1 1285 7 is_stmt 1 view .LVU1278
 4634              	.L359:
1330:src/storage.c **** 
 4635              		.loc 1 1330 1 is_stmt 0 view .LVU1279
 4636 0048 07B0     		add	sp, sp, #28
 4637              		.cfi_remember_state
 4638              		.cfi_def_cfa_offset 28
 4639              		@ sp needed
 4640 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4641              	.LVL420:
 4642              	.L364:
 4643              		.cfi_restore_state
1290:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4644              		.loc 1 1290 5 is_stmt 1 view .LVU1280
1290:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4645              		.loc 1 1290 17 is_stmt 0 view .LVU1281
 4646 004e 2B68     		ldr	r3, [r5]
1290:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4647              		.loc 1 1290 11 view .LVU1282
 4648 0050 B3F8EE57 		ldrh	r5, [r3, #2030]
 4649 0054 B3F8EC37 		ldrh	r3, [r3, #2028]
 4650 0058 0135     		adds	r5, r5, #1
 4651 005a ED1A     		subs	r5, r5, r3
 4652 005c ADB2     		uxth	r5, r5
 4653              	.LVL421:
1291:src/storage.c ****     /*
 4654              		.loc 1 1291 5 is_stmt 1 view .LVU1283
1291:src/storage.c ****     /*
 4655              		.loc 1 1291 23 is_stmt 0 view .LVU1284
ARM GAS  /tmp/ccoue2SN.s 			page 128


 4656 005e FFF7FEFF 		bl	get_current_prog
 4657              	.LVL422:
 4658              	.LBB109:
 4659              	.LBB110:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4660              		.loc 1 162 2 view .LVU1285
 4661 0062 6E00     		lsls	r6, r5, #1
 4662              	.LVL423:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4663              		.loc 1 162 2 view .LVU1286
 4664              	.LBE110:
 4665              	.LBI109:
 156:src/storage.c **** {
 4666              		.loc 1 156 20 is_stmt 1 view .LVU1287
 4667              	.LBB111:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4668              		.loc 1 158 2 view .LVU1288
 159:src/storage.c **** 	unsigned int i;
 4669              		.loc 1 159 2 view .LVU1289
 160:src/storage.c **** 
 4670              		.loc 1 160 2 view .LVU1290
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4671              		.loc 1 162 2 view .LVU1291
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4672              		.loc 1 162 15 view .LVU1292
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4673              		.loc 1 162 2 is_stmt 0 view .LVU1293
 4674 0064 002D     		cmp	r5, #0
 4675 0066 55D0     		beq	.L370
 4676 0068 8119     		adds	r1, r0, r6
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4677              		.loc 1 158 21 view .LVU1294
 4678 006a 45F6A524 		movw	r4, #23205
 4679              	.LVL424:
 4680              	.L366:
 163:src/storage.c **** 		crc ^= *d++;
 4681              		.loc 1 163 3 is_stmt 1 view .LVU1295
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4682              		.loc 1 164 10 is_stmt 0 view .LVU1296
 4683 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4684              	.LVL425:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4685              		.loc 1 164 10 view .LVU1297
 4686 0072 63BA     		rev16	r3, r4
 4687 0074 9BB2     		uxth	r3, r3
 4688              	.LVL426:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4689              		.loc 1 164 3 is_stmt 1 view .LVU1298
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4690              		.loc 1 164 7 is_stmt 0 view .LVU1299
 4691 0076 5340     		eors	r3, r3, r2
 4692              	.LVL427:
 165:src/storage.c **** 		crc ^= crc << 12;
 4693              		.loc 1 165 3 is_stmt 1 view .LVU1300
 165:src/storage.c **** 		crc ^= crc << 12;
 4694              		.loc 1 165 7 is_stmt 0 view .LVU1301
 4695 0078 C3F30312 		ubfx	r2, r3, #4, #4
ARM GAS  /tmp/ccoue2SN.s 			page 129


 4696 007c 5340     		eors	r3, r3, r2
 4697              	.LVL428:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4698              		.loc 1 166 3 is_stmt 1 view .LVU1302
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4699              		.loc 1 166 7 is_stmt 0 view .LVU1303
 4700 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4701              	.LVL429:
 167:src/storage.c **** 	}
 4702              		.loc 1 167 3 is_stmt 1 view .LVU1304
 167:src/storage.c **** 	}
 4703              		.loc 1 167 25 is_stmt 0 view .LVU1305
 4704 0082 5C01     		lsls	r4, r3, #5
 4705 0084 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
 4706              		.loc 1 167 7 view .LVU1306
 4707 0088 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4708              		.loc 1 162 2 view .LVU1307
 4709 008a 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 4710              		.loc 1 167 7 view .LVU1308
 4711 008c 84EA0304 		eor	r4, r4, r3
 4712              	.LVL430:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4713              		.loc 1 162 27 is_stmt 1 view .LVU1309
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4714              		.loc 1 162 15 view .LVU1310
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4715              		.loc 1 162 2 is_stmt 0 view .LVU1311
 4716 0090 EDD1     		bne	.L366
 4717              	.LVL431:
 4718              	.L365:
 169:src/storage.c **** }
 4719              		.loc 1 169 2 is_stmt 1 view .LVU1312
 169:src/storage.c **** }
 4720              		.loc 1 169 2 is_stmt 0 view .LVU1313
 4721              	.LBE111:
 4722              	.LBE109:
1295:src/storage.c **** 
 4723              		.loc 1 1295 5 is_stmt 1 view .LVU1314
 4724 0092 DFF8D080 		ldr	r8, .L376+52
1297:src/storage.c ****     if (fss != 1) return;
 4725              		.loc 1 1297 11 is_stmt 0 view .LVU1315
 4726 0096 274F     		ldr	r7, .L376+4
1295:src/storage.c **** 
 4727              		.loc 1 1295 5 view .LVU1316
 4728 0098 0120     		movs	r0, #1
 4729 009a C047     		blx	r8
 4730              	.LVL432:
1297:src/storage.c ****     if (fss != 1) return;
 4731              		.loc 1 1297 5 is_stmt 1 view .LVU1317
1297:src/storage.c ****     if (fss != 1) return;
 4732              		.loc 1 1297 11 is_stmt 0 view .LVU1318
 4733 009c 0123     		movs	r3, #1
 4734 009e 04AA     		add	r2, sp, #16
 4735 00a0 CDE90132 		strd	r3, r2, [sp, #4]
ARM GAS  /tmp/ccoue2SN.s 			page 130


 4736 00a4 0093     		str	r3, [sp]
 4737 00a6 244A     		ldr	r2, .L376+8
 4738 00a8 244B     		ldr	r3, .L376+12
 4739 00aa 2549     		ldr	r1, .L376+16
 4740 00ac 2548     		ldr	r0, .L376+20
 4741 00ae B847     		blx	r7
 4742              	.LVL433:
1298:src/storage.c **** 
 4743              		.loc 1 1298 5 is_stmt 1 view .LVU1319
1298:src/storage.c **** 
 4744              		.loc 1 1298 8 is_stmt 0 view .LVU1320
 4745 00b0 0128     		cmp	r0, #1
 4746 00b2 C9D1     		bne	.L359
1302:src/storage.c ****     if (!buffer) {// calloc failure!
 4747              		.loc 1 1302 5 is_stmt 1 view .LVU1321
1302:src/storage.c ****     if (!buffer) {// calloc failure!
 4748              		.loc 1 1302 14 is_stmt 0 view .LVU1322
 4749 00b4 0146     		mov	r1, r0
 4750 00b6 4FF40060 		mov	r0, #2048
 4751              	.LVL434:
1302:src/storage.c ****     if (!buffer) {// calloc failure!
 4752              		.loc 1 1302 14 view .LVU1323
 4753 00ba FFF7FEFF 		bl	calloc
 4754              	.LVL435:
1303:src/storage.c ****       f_close(FPT);
 4755              		.loc 1 1303 5 is_stmt 1 view .LVU1324
1303:src/storage.c ****       f_close(FPT);
 4756              		.loc 1 1303 8 is_stmt 0 view .LVU1325
 4757 00be 0746     		mov	r7, r0
 4758 00c0 58B3     		cbz	r0, .L375
1310:src/storage.c ****     fr->size = steps;
 4759              		.loc 1 1310 5 is_stmt 1 view .LVU1326
 4760              	.LVL436:
1311:src/storage.c ****     fr->crc = prog_crc;
 4761              		.loc 1 1311 5 view .LVU1327
1312:src/storage.c **** 
 4762              		.loc 1 1312 13 is_stmt 0 view .LVU1328
 4763 00c2 8146     		mov	r9, r0
1311:src/storage.c ****     fr->crc = prog_crc;
 4764              		.loc 1 1311 14 view .LVU1329
 4765 00c4 4580     		strh	r5, [r0, #2]	@ movhi
1312:src/storage.c **** 
 4766              		.loc 1 1312 5 is_stmt 1 view .LVU1330
1312:src/storage.c **** 
 4767              		.loc 1 1312 13 is_stmt 0 view .LVU1331
 4768 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
1314:src/storage.c ****    
 4769              		.loc 1 1314 5 is_stmt 1 view .LVU1332
1314:src/storage.c ****    
 4770              		.loc 1 1314 22 is_stmt 0 view .LVU1333
 4771 00ca FFF7FEFF 		bl	get_current_prog
 4772              	.LVL437:
1316:src/storage.c ****     free(buffer);
 4773              		.loc 1 1316 9 view .LVU1334
 4774 00ce 1E4D     		ldr	r5, .L376+24
 4775              	.LVL438:
1316:src/storage.c ****     free(buffer);
ARM GAS  /tmp/ccoue2SN.s 			page 131


 4776              		.loc 1 1316 9 view .LVU1335
 4777 00d0 1E4C     		ldr	r4, .L376+28
 4778              	.LVL439:
1314:src/storage.c ****    
 4779              		.loc 1 1314 22 view .LVU1336
 4780 00d2 0146     		mov	r1, r0
1314:src/storage.c ****    
 4781              		.loc 1 1314 5 view .LVU1337
 4782 00d4 3246     		mov	r2, r6
 4783 00d6 4846     		mov	r0, r9
 4784 00d8 FFF7FEFF 		bl	xcopy
 4785              	.LVL440:
1316:src/storage.c ****     free(buffer);
 4786              		.loc 1 1316 5 is_stmt 1 view .LVU1338
1316:src/storage.c ****     free(buffer);
 4787              		.loc 1 1316 9 is_stmt 0 view .LVU1339
 4788 00dc 321D     		adds	r2, r6, #4
 4789 00de 05AB     		add	r3, sp, #20
 4790 00e0 3946     		mov	r1, r7
 4791 00e2 6868     		ldr	r0, [r5, #4]
 4792 00e4 A047     		blx	r4
 4793              	.LVL441:
 4794 00e6 0446     		mov	r4, r0
1317:src/storage.c ****     
 4795              		.loc 1 1317 5 view .LVU1340
 4796 00e8 3846     		mov	r0, r7
 4797              	.LVL442:
1317:src/storage.c ****     
 4798              		.loc 1 1317 5 is_stmt 1 view .LVU1341
 4799 00ea FFF7FEFF 		bl	free
 4800              	.LVL443:
1319:src/storage.c ****       DispMsg = "Write err";
 4801              		.loc 1 1319 5 view .LVU1342
1323:src/storage.c ****     }
 4802              		.loc 1 1323 15 is_stmt 0 view .LVU1343
 4803 00ee 184B     		ldr	r3, .L376+32
 4804 00f0 1848     		ldr	r0, .L376+36
 4805 00f2 1949     		ldr	r1, .L376+40
1326:src/storage.c ****     sys_disk_write_enable(0);
 4806              		.loc 1 1326 5 view .LVU1344
 4807 00f4 194A     		ldr	r2, .L376+44
1323:src/storage.c ****     }
 4808              		.loc 1 1323 15 view .LVU1345
 4809 00f6 002C     		cmp	r4, #0
 4810 00f8 18BF     		it	ne
 4811 00fa 1846     		movne	r0, r3
 4812 00fc 0860     		str	r0, [r1]
1326:src/storage.c ****     sys_disk_write_enable(0);
 4813              		.loc 1 1326 5 is_stmt 1 view .LVU1346
 4814 00fe 6868     		ldr	r0, [r5, #4]
 4815 0100 9047     		blx	r2
 4816              	.LVL444:
1327:src/storage.c ****     
 4817              		.loc 1 1327 5 view .LVU1347
 4818 0102 0020     		movs	r0, #0
 4819 0104 C047     		blx	r8
 4820              	.LVL445:
ARM GAS  /tmp/ccoue2SN.s 			page 132


 4821 0106 9FE7     		b	.L359
 4822              	.LVL446:
 4823              	.L374:
1275:src/storage.c ****       return;
 4824              		.loc 1 1275 7 view .LVU1348
 4825 0108 0720     		movs	r0, #7
 4826 010a FFF7FEFF 		bl	report_err
 4827              	.LVL447:
1276:src/storage.c ****     }
 4828              		.loc 1 1276 7 view .LVU1349
1330:src/storage.c **** 
 4829              		.loc 1 1330 1 is_stmt 0 view .LVU1350
 4830 010e 07B0     		add	sp, sp, #28
 4831              		.cfi_remember_state
 4832              		.cfi_def_cfa_offset 28
 4833              		@ sp needed
 4834 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4835              	.LVL448:
 4836              	.L370:
 4837              		.cfi_restore_state
 4838              	.LBB113:
 4839              	.LBB112:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4840              		.loc 1 158 21 view .LVU1351
 4841 0114 45F6A524 		movw	r4, #23205
 4842 0118 BBE7     		b	.L365
 4843              	.LVL449:
 4844              	.L375:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4845              		.loc 1 158 21 view .LVU1352
 4846              	.LBE112:
 4847              	.LBE113:
1304:src/storage.c ****       sys_disk_write_enable(0);
 4848              		.loc 1 1304 7 is_stmt 1 view .LVU1353
 4849 011a 0B4A     		ldr	r2, .L376+24
 4850 011c 0F4B     		ldr	r3, .L376+44
 4851 011e 5068     		ldr	r0, [r2, #4]
 4852              	.LVL450:
1304:src/storage.c ****       sys_disk_write_enable(0);
 4853              		.loc 1 1304 7 is_stmt 0 view .LVU1354
 4854 0120 9847     		blx	r3
 4855              	.LVL451:
1305:src/storage.c ****       DispMsg = "Mem short";
 4856              		.loc 1 1305 7 is_stmt 1 view .LVU1355
 4857 0122 3846     		mov	r0, r7
 4858 0124 C047     		blx	r8
 4859              	.LVL452:
1306:src/storage.c ****       return;
 4860              		.loc 1 1306 7 view .LVU1356
1306:src/storage.c ****       return;
 4861              		.loc 1 1306 15 is_stmt 0 view .LVU1357
 4862 0126 0C4B     		ldr	r3, .L376+40
 4863 0128 0D4A     		ldr	r2, .L376+48
 4864 012a 1A60     		str	r2, [r3]
1307:src/storage.c ****     }
 4865              		.loc 1 1307 7 is_stmt 1 view .LVU1358
 4866 012c 8CE7     		b	.L359
ARM GAS  /tmp/ccoue2SN.s 			page 133


 4867              	.L377:
 4868 012e 00BF     		.align	2
 4869              	.L376:
 4870 0130 00000000 		.word	main_ram
 4871 0134 51030008 		.word	134218577
 4872 0138 1C000000 		.word	.LC19
 4873 013c 00000000 		.word	open_selected_file
 4874 0140 2C000000 		.word	.LC2
 4875 0144 14000000 		.word	.LC28
 4876 0148 00200010 		.word	268443648
 4877 014c 41040008 		.word	134218817
 4878 0150 00000000 		.word	.LC26
 4879 0154 0C000000 		.word	.LC27
 4880 0158 00000000 		.word	DispMsg
 4881 015c 39040008 		.word	134218809
 4882 0160 2C000000 		.word	.LC29
 4883 0164 E1030008 		.word	134218721
 4884              		.cfi_endproc
 4885              	.LFE38:
 4887              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4888              		.align	2
 4889              	.LC30:
 4890 0000 46696C65 		.ascii	"File odd\000"
 4890      206F6464 
 4890      00
 4891 0009 000000   		.align	2
 4892              	.LC31:
 4893 000c 46696C65 		.ascii	"File crc err\000"
 4893      20637263 
 4893      20657272 
 4893      00
 4894              		.section	.text.load_prog_file,"ax",%progbits
 4895              		.align	1
 4896              		.p2align 2,,3
 4897              		.global	load_prog_file
 4898              		.syntax unified
 4899              		.thumb
 4900              		.thumb_func
 4901              		.fpu fpv4-sp-d16
 4903              	load_prog_file:
 4904              	.LFB39:
1332:src/storage.c ****   int fss, fsize;
 4905              		.loc 1 1332 24 view -0
 4906              		.cfi_startproc
 4907              		@ args = 0, pretend = 0, frame = 8
 4908              		@ frame_needed = 0, uses_anonymous_args = 0
1333:src/storage.c ****   int data = READ;
 4909              		.loc 1 1333 3 view .LVU1360
1334:src/storage.c ****   uint x=0;
 4910              		.loc 1 1334 3 view .LVU1361
1332:src/storage.c ****   int fss, fsize;
 4911              		.loc 1 1332 24 is_stmt 0 view .LVU1362
 4912 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4913              		.cfi_def_cfa_offset 20
 4914              		.cfi_offset 4, -20
 4915              		.cfi_offset 5, -16
 4916              		.cfi_offset 6, -12
ARM GAS  /tmp/ccoue2SN.s 			page 134


 4917              		.cfi_offset 7, -8
 4918              		.cfi_offset 14, -4
 4919 0002 87B0     		sub	sp, sp, #28
 4920              		.cfi_def_cfa_offset 48
1335:src/storage.c ****   FLASH_REGION* fr;
 4921              		.loc 1 1335 8 view .LVU1363
 4922 0004 0023     		movs	r3, #0
1334:src/storage.c ****   uint x=0;
 4923              		.loc 1 1334 7 view .LVU1364
 4924 0006 0221     		movs	r1, #2
1339:src/storage.c ****   if (fss != 1) return;
 4925              		.loc 1 1339 9 view .LVU1365
 4926 0008 04AA     		add	r2, sp, #16
1335:src/storage.c ****   FLASH_REGION* fr;
 4927              		.loc 1 1335 8 view .LVU1366
 4928 000a CDE90413 		strd	r1, r3, [sp, #16]
1336:src/storage.c ****   char* buffer;
 4929              		.loc 1 1336 3 is_stmt 1 view .LVU1367
1337:src/storage.c **** 
 4930              		.loc 1 1337 3 view .LVU1368
1339:src/storage.c ****   if (fss != 1) return;
 4931              		.loc 1 1339 3 view .LVU1369
1339:src/storage.c ****   if (fss != 1) return;
 4932              		.loc 1 1339 9 is_stmt 0 view .LVU1370
 4933 000e CDE90033 		strd	r3, r3, [sp]
 4934 0012 0292     		str	r2, [sp, #8]
 4935 0014 284C     		ldr	r4, .L392
 4936 0016 294B     		ldr	r3, .L392+4
 4937 0018 294A     		ldr	r2, .L392+8
 4938 001a 2A49     		ldr	r1, .L392+12
 4939 001c 2A48     		ldr	r0, .L392+16
 4940 001e A047     		blx	r4
 4941              	.LVL453:
1340:src/storage.c **** 
 4942              		.loc 1 1340 3 is_stmt 1 view .LVU1371
1340:src/storage.c **** 
 4943              		.loc 1 1340 6 is_stmt 0 view .LVU1372
 4944 0020 0128     		cmp	r0, #1
 4945 0022 0BD1     		bne	.L378
1344:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 4946              		.loc 1 1344 3 is_stmt 1 view .LVU1373
1344:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 4947              		.loc 1 1344 11 is_stmt 0 view .LVU1374
 4948 0024 294F     		ldr	r7, .L392+20
 4949 0026 7D68     		ldr	r5, [r7, #4]
 4950 0028 EE68     		ldr	r6, [r5, #12]
 4951              	.LVL454:
1345:src/storage.c ****     f_close(FPT);
 4952              		.loc 1 1345 3 is_stmt 1 view .LVU1375
1345:src/storage.c ****     f_close(FPT);
 4953              		.loc 1 1345 6 is_stmt 0 view .LVU1376
 4954 002a B6F5804F 		cmp	r6, #16384
 4955 002e 07DD     		ble	.L380
1346:src/storage.c ****     DispMsg = "File too big";
 4956              		.loc 1 1346 5 is_stmt 1 view .LVU1377
 4957 0030 274B     		ldr	r3, .L392+24
 4958 0032 2846     		mov	r0, r5
ARM GAS  /tmp/ccoue2SN.s 			page 135


 4959              	.LVL455:
1346:src/storage.c ****     DispMsg = "File too big";
 4960              		.loc 1 1346 5 is_stmt 0 view .LVU1378
 4961 0034 9847     		blx	r3
 4962              	.LVL456:
1347:src/storage.c ****     return;
 4963              		.loc 1 1347 5 is_stmt 1 view .LVU1379
1347:src/storage.c ****     return;
 4964              		.loc 1 1347 13 is_stmt 0 view .LVU1380
 4965 0036 274B     		ldr	r3, .L392+28
 4966 0038 274A     		ldr	r2, .L392+32
 4967 003a 1A60     		str	r2, [r3]
1348:src/storage.c ****   }
 4968              		.loc 1 1348 5 is_stmt 1 view .LVU1381
 4969              	.LVL457:
 4970              	.L378:
1376:src/storage.c **** 
 4971              		.loc 1 1376 1 is_stmt 0 view .LVU1382
 4972 003c 07B0     		add	sp, sp, #28
 4973              		.cfi_remember_state
 4974              		.cfi_def_cfa_offset 20
 4975              		@ sp needed
 4976 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 4977              	.LVL458:
 4978              	.L380:
 4979              		.cfi_restore_state
1350:src/storage.c ****   if (!buffer) {// calloc failure!
 4980              		.loc 1 1350 3 is_stmt 1 view .LVU1383
1350:src/storage.c ****   if (!buffer) {// calloc failure!
 4981              		.loc 1 1350 31 is_stmt 0 view .LVU1384
 4982 0040 26F0FF03 		bic	r3, r6, #255
1350:src/storage.c ****   if (!buffer) {// calloc failure!
 4983              		.loc 1 1350 12 view .LVU1385
 4984 0044 0146     		mov	r1, r0
 4985 0046 03F58070 		add	r0, r3, #256
 4986              	.LVL459:
1350:src/storage.c ****   if (!buffer) {// calloc failure!
 4987              		.loc 1 1350 12 view .LVU1386
 4988 004a FFF7FEFF 		bl	calloc
 4989              	.LVL460:
1351:src/storage.c ****     f_close(FPT);
 4990              		.loc 1 1351 3 is_stmt 1 view .LVU1387
1351:src/storage.c ****     f_close(FPT);
 4991              		.loc 1 1351 6 is_stmt 0 view .LVU1388
 4992 004e 0446     		mov	r4, r0
 4993 0050 58B3     		cbz	r0, .L389
1357:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 4994              		.loc 1 1357 3 is_stmt 1 view .LVU1389
 4995 0052 3246     		mov	r2, r6
 4996 0054 2846     		mov	r0, r5
 4997              	.LVL461:
1357:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 4998              		.loc 1 1357 3 is_stmt 0 view .LVU1390
 4999 0056 05AB     		add	r3, sp, #20
 5000 0058 204D     		ldr	r5, .L392+36
 5001 005a 2146     		mov	r1, r4
 5002 005c A847     		blx	r5
ARM GAS  /tmp/ccoue2SN.s 			page 136


 5003              	.LVL462:
1358:src/storage.c ****     free(buffer);
 5004              		.loc 1 1358 3 is_stmt 1 view .LVU1391
1358:src/storage.c ****     free(buffer);
 5005              		.loc 1 1358 8 is_stmt 0 view .LVU1392
 5006 005e 7868     		ldr	r0, [r7, #4]
1358:src/storage.c ****     free(buffer);
 5007              		.loc 1 1358 6 view .LVU1393
 5008 0060 8269     		ldr	r2, [r0, #24]
 5009 0062 C368     		ldr	r3, [r0, #12]
 5010 0064 9A42     		cmp	r2, r3
 5011 0066 12D1     		bne	.L390
1364:src/storage.c **** 
 5012              		.loc 1 1364 3 is_stmt 1 view .LVU1394
 5013 0068 194B     		ldr	r3, .L392+24
 5014 006a 9847     		blx	r3
 5015              	.LVL463:
1366:src/storage.c ****     
 5016              		.loc 1 1366 3 view .LVU1395
1368:src/storage.c ****     DispMsg = "File crc err";
 5017              		.loc 1 1368 3 view .LVU1396
1368:src/storage.c ****     DispMsg = "File crc err";
 5018              		.loc 1 1368 7 is_stmt 0 view .LVU1397
 5019 006c 2146     		mov	r1, r4
 5020 006e 2046     		mov	r0, r4
 5021 0070 FFF7FEFF 		bl	checksum_region
 5022              	.LVL464:
1368:src/storage.c ****     DispMsg = "File crc err";
 5023              		.loc 1 1368 6 view .LVU1398
 5024 0074 A8B9     		cbnz	r0, .L391
1374:src/storage.c ****   free(buffer);
 5025              		.loc 1 1374 3 is_stmt 1 view .LVU1399
 5026              	.LVL465:
 5027              	.LBB114:
 5028              	.LBI114:
1378:src/storage.c **** { // buffer contains all of program file
 5029              		.loc 1 1378 6 view .LVU1400
 5030              	.LBB115:
1380:src/storage.c ****   int space_needed, count, free;
 5031              		.loc 1 1380 3 view .LVU1401
1381:src/storage.c **** 
 5032              		.loc 1 1381 3 view .LVU1402
1383:src/storage.c ****     /*
 5033              		.loc 1 1383 3 view .LVU1403
1383:src/storage.c ****     /*
 5034              		.loc 1 1383 8 is_stmt 0 view .LVU1404
 5035 0076 FFF7FEFF 		bl	not_running
 5036              	.LVL466:
1383:src/storage.c ****     /*
 5037              		.loc 1 1383 6 view .LVU1405
 5038 007a 10B1     		cbz	r0, .L384
 5039 007c 2046     		mov	r0, r4
 5040 007e FFF7FEFF 		bl	store_program_from_buffer.part.0
 5041              	.LVL467:
 5042              	.L384:
1383:src/storage.c ****     /*
 5043              		.loc 1 1383 6 view .LVU1406
ARM GAS  /tmp/ccoue2SN.s 			page 137


 5044              	.LBE115:
 5045              	.LBE114:
1375:src/storage.c **** }
 5046              		.loc 1 1375 3 is_stmt 1 view .LVU1407
 5047 0082 2046     		mov	r0, r4
1376:src/storage.c **** 
 5048              		.loc 1 1376 1 is_stmt 0 view .LVU1408
 5049 0084 07B0     		add	sp, sp, #28
 5050              		.cfi_remember_state
 5051              		.cfi_def_cfa_offset 20
 5052              		@ sp needed
 5053 0086 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5054              		.cfi_restore 14
 5055              		.cfi_restore 7
 5056              		.cfi_restore 6
 5057              		.cfi_restore 5
 5058              		.cfi_restore 4
 5059              		.cfi_def_cfa_offset 0
 5060              	.LVL468:
1375:src/storage.c **** }
 5061              		.loc 1 1375 3 view .LVU1409
 5062 008a FFF7FEBF 		b	free
 5063              	.LVL469:
 5064              	.L390:
 5065              		.cfi_restore_state
1359:src/storage.c ****     f_close(FPT);
 5066              		.loc 1 1359 5 is_stmt 1 view .LVU1410
 5067 008e 2046     		mov	r0, r4
 5068 0090 FFF7FEFF 		bl	free
 5069              	.LVL470:
1360:src/storage.c ****     DispMsg = "File odd";
 5070              		.loc 1 1360 5 view .LVU1411
 5071 0094 0E4B     		ldr	r3, .L392+24
 5072 0096 7868     		ldr	r0, [r7, #4]
 5073 0098 9847     		blx	r3
 5074              	.LVL471:
1361:src/storage.c ****     return;
 5075              		.loc 1 1361 5 view .LVU1412
1361:src/storage.c ****     return;
 5076              		.loc 1 1361 13 is_stmt 0 view .LVU1413
 5077 009a 0E4B     		ldr	r3, .L392+28
 5078 009c 104A     		ldr	r2, .L392+40
 5079 009e 1A60     		str	r2, [r3]
1362:src/storage.c ****   }
 5080              		.loc 1 1362 5 is_stmt 1 view .LVU1414
 5081 00a0 CCE7     		b	.L378
 5082              	.LVL472:
 5083              	.L391:
1369:src/storage.c ****         free(buffer);
 5084              		.loc 1 1369 5 view .LVU1415
1369:src/storage.c ****         free(buffer);
 5085              		.loc 1 1369 13 is_stmt 0 view .LVU1416
 5086 00a2 0C4B     		ldr	r3, .L392+28
 5087 00a4 0F4A     		ldr	r2, .L392+44
 5088 00a6 1A60     		str	r2, [r3]
1370:src/storage.c ****     return;
 5089              		.loc 1 1370 9 is_stmt 1 view .LVU1417
ARM GAS  /tmp/ccoue2SN.s 			page 138


 5090 00a8 EBE7     		b	.L384
 5091              	.LVL473:
 5092              	.L389:
1352:src/storage.c ****     DispMsg = "Mem short";
 5093              		.loc 1 1352 5 view .LVU1418
 5094 00aa 094B     		ldr	r3, .L392+24
 5095 00ac 2846     		mov	r0, r5
 5096              	.LVL474:
1352:src/storage.c ****     DispMsg = "Mem short";
 5097              		.loc 1 1352 5 is_stmt 0 view .LVU1419
 5098 00ae 9847     		blx	r3
 5099              	.LVL475:
1353:src/storage.c ****     return;
 5100              		.loc 1 1353 5 is_stmt 1 view .LVU1420
1353:src/storage.c ****     return;
 5101              		.loc 1 1353 13 is_stmt 0 view .LVU1421
 5102 00b0 084B     		ldr	r3, .L392+28
 5103 00b2 0D4A     		ldr	r2, .L392+48
 5104 00b4 1A60     		str	r2, [r3]
1354:src/storage.c ****   }
 5105              		.loc 1 1354 5 is_stmt 1 view .LVU1422
 5106 00b6 C1E7     		b	.L378
 5107              	.L393:
 5108              		.align	2
 5109              	.L392:
 5110 00b8 51030008 		.word	134218577
 5111 00bc 00000000 		.word	open_selected_file
 5112 00c0 1C000000 		.word	.LC19
 5113 00c4 2C000000 		.word	.LC2
 5114 00c8 00000000 		.word	.LC22
 5115 00cc 00200010 		.word	268443648
 5116 00d0 39040008 		.word	134218809
 5117 00d4 00000000 		.word	DispMsg
 5118 00d8 14000000 		.word	.LC16
 5119 00dc 3D040008 		.word	134218813
 5120 00e0 00000000 		.word	.LC30
 5121 00e4 0C000000 		.word	.LC31
 5122 00e8 2C000000 		.word	.LC29
 5123              		.cfi_endproc
 5124              	.LFE39:
 5126              		.section	.text.store_program_from_buffer,"ax",%progbits
 5127              		.align	1
 5128              		.p2align 2,,3
 5129              		.global	store_program_from_buffer
 5130              		.syntax unified
 5131              		.thumb
 5132              		.thumb_func
 5133              		.fpu fpv4-sp-d16
 5135              	store_program_from_buffer:
 5136              	.LVL476:
 5137              	.LFB40:
1379:src/storage.c ****   unsigned int pc;
 5138              		.loc 1 1379 1 view -0
 5139              		.cfi_startproc
 5140              		@ args = 0, pretend = 0, frame = 0
 5141              		@ frame_needed = 0, uses_anonymous_args = 0
1380:src/storage.c ****   int space_needed, count, free;
ARM GAS  /tmp/ccoue2SN.s 			page 139


 5142              		.loc 1 1380 3 view .LVU1424
1381:src/storage.c **** 
 5143              		.loc 1 1381 3 view .LVU1425
1383:src/storage.c ****     /*
 5144              		.loc 1 1383 3 view .LVU1426
1379:src/storage.c ****   unsigned int pc;
 5145              		.loc 1 1379 1 is_stmt 0 view .LVU1427
 5146 0000 10B5     		push	{r4, lr}
 5147              		.cfi_def_cfa_offset 8
 5148              		.cfi_offset 4, -8
 5149              		.cfi_offset 14, -4
1379:src/storage.c ****   unsigned int pc;
 5150              		.loc 1 1379 1 view .LVU1428
 5151 0002 0446     		mov	r4, r0
1383:src/storage.c ****     /*
 5152              		.loc 1 1383 8 view .LVU1429
 5153 0004 FFF7FEFF 		bl	not_running
 5154              	.LVL477:
1383:src/storage.c ****     /*
 5155              		.loc 1 1383 6 view .LVU1430
 5156 0008 20B1     		cbz	r0, .L394
 5157 000a 2046     		mov	r0, r4
 5158              		.loc 1 1425 1 view .LVU1431
 5159 000c BDE81040 		pop	{r4, lr}
 5160              		.cfi_remember_state
 5161              		.cfi_restore 14
 5162              		.cfi_restore 4
 5163              		.cfi_def_cfa_offset 0
 5164              	.LVL478:
 5165              		.loc 1 1425 1 view .LVU1432
 5166 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5167              	.LVL479:
 5168              	.L394:
 5169              		.cfi_restore_state
 5170              		.loc 1 1425 1 view .LVU1433
 5171 0014 10BD     		pop	{r4, pc}
 5172              		.loc 1 1425 1 view .LVU1434
 5173              		.cfi_endproc
 5174              	.LFE40:
 5176              		.comm	XromA2D,64,4
 5177              		.comm	XromLocal,464,4
 5178              		.comm	XromParams,16,4
 5179              		.comm	StateWhileOn,52,4
 5180              		.comm	library_ram,4,4
 5181              		.comm	backup_ram,4,4
 5182              		.comm	main_ram,4,4
 5183 0016 00BF     		.text
 5184              	.Letext0:
 5185              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5186              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5187              		.file 4 "/usr/include/newlib/sys/_types.h"
 5188              		.file 5 "/usr/include/newlib/sys/reent.h"
 5189              		.file 6 "/usr/include/newlib/sys/lock.h"
 5190              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5191              		.file 8 "/usr/include/newlib/sys/types.h"
 5192              		.file 9 "/usr/include/newlib/stdlib.h"
 5193              		.file 10 "dmcp/ff_ifc.h"
ARM GAS  /tmp/ccoue2SN.s 			page 140


 5194              		.file 11 "dmcp/dmcp.h"
 5195              		.file 12 "src/decNumber/decContext.h"
 5196              		.file 13 "src/decNumber/decNumber.h"
 5197              		.file 14 "src/decNumber/decimal64.h"
 5198              		.file 15 "src/decNumber/decimal128.h"
 5199              		.file 16 "src/xeq.h"
 5200              		.file 17 "src/data.h"
 5201              		.file 18 "src/storage.h"
 5202              		.file 19 "src/display.h"
 5203              		.file 20 "src/stats.h"
 5204              		.file 21 "src/alpha.h"
 5205              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccoue2SN.s 			page 141


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/ccoue2SN.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/ccoue2SN.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/ccoue2SN.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/ccoue2SN.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/ccoue2SN.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/ccoue2SN.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/ccoue2SN.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/ccoue2SN.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:305    .text.program_flash:0000000000000000 $t
     /tmp/ccoue2SN.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/ccoue2SN.s:546    .text.program_flash:00000000000000c4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/ccoue2SN.s:562    .text.flash_append:0000000000000000 $t
     /tmp/ccoue2SN.s:569    .text.flash_append:0000000000000000 flash_append
     /tmp/ccoue2SN.s:740    .text.flash_append:000000000000009c $d
     /tmp/ccoue2SN.s:746    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:753    .text.open_selected_file:0000000000000000 $t
     /tmp/ccoue2SN.s:761    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/ccoue2SN.s:877    .text.open_selected_file:0000000000000050 $d
     /tmp/ccoue2SN.s:888    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:892    .text.init_mem:0000000000000000 $t
     /tmp/ccoue2SN.s:900    .text.init_mem:0000000000000000 init_mem
     /tmp/ccoue2SN.s:964    .text.init_mem:0000000000000030 $d
     /tmp/ccoue2SN.s:972    .text.crc16:0000000000000000 $t
     /tmp/ccoue2SN.s:980    .text.crc16:0000000000000000 crc16
     /tmp/ccoue2SN.s:1059   .text.checksum_program:0000000000000000 $t
     /tmp/ccoue2SN.s:1067   .text.checksum_program:0000000000000000 checksum_program
     /tmp/ccoue2SN.s:1179   .text.checksum_program:0000000000000058 $d
     /tmp/ccoue2SN.s:1184   .text.checksum_ram:0000000000000000 $t
     /tmp/ccoue2SN.s:1192   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/ccoue2SN.s:1211   .text.checksum_ram:0000000000000014 $d
     /tmp/ccoue2SN.s:1216   .text.checksum_backup:0000000000000000 $t
     /tmp/ccoue2SN.s:1224   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/ccoue2SN.s:1356   .text.checksum_backup:0000000000000054 $d
     /tmp/ccoue2SN.s:1361   .text.clpall:0000000000000000 $t
     /tmp/ccoue2SN.s:1369   .text.clpall:0000000000000000 clpall
     /tmp/ccoue2SN.s:1408   .text.clpall:0000000000000018 $d
     /tmp/ccoue2SN.s:1413   .text.clrall:0000000000000000 $t
     /tmp/ccoue2SN.s:1421   .text.clrall:0000000000000000 clrall
     /tmp/ccoue2SN.s:1507   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/ccoue2SN.s:1514   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:1518   .text.reset:0000000000000000 $t
     /tmp/ccoue2SN.s:1526   .text.reset:0000000000000000 reset
     /tmp/ccoue2SN.s:1571   .text.reset:0000000000000030 $d
     /tmp/ccoue2SN.s:1578   .text.stoprog:0000000000000000 $t
     /tmp/ccoue2SN.s:1586   .text.stoprog:0000000000000000 stoprog
     /tmp/ccoue2SN.s:1794   .text.stoprog:00000000000000e4 $d
     /tmp/ccoue2SN.s:1800   .text.delprog:0000000000000000 $t
     /tmp/ccoue2SN.s:1808   .text.delprog:0000000000000000 delprog
     /tmp/ccoue2SN.s:1923   .text.delprog:0000000000000068 $d
     /tmp/ccoue2SN.s:1928   .text.append_program:0000000000000000 $t
     /tmp/ccoue2SN.s:1936   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/ccoue2SN.s 			page 142


     /tmp/ccoue2SN.s:2157   .text.append_program:00000000000000c0 $d
     /tmp/ccoue2SN.s:2165   .text.init_library:0000000000000000 $t
     /tmp/ccoue2SN.s:2173   .text.init_library:0000000000000000 init_library
     /tmp/ccoue2SN.s:2235   .text.init_library:0000000000000034 $d
     /tmp/ccoue2SN.s:2240   .text.flash_remove:0000000000000000 $t
     /tmp/ccoue2SN.s:2248   .text.flash_remove:0000000000000000 flash_remove
     /tmp/ccoue2SN.s:2295   .text.flash_remove:0000000000000024 $d
     /tmp/ccoue2SN.s:2300   .text.clrprog:0000000000000000 $t
     /tmp/ccoue2SN.s:2308   .text.clrprog:0000000000000000 clrprog
     /tmp/ccoue2SN.s:2439   .text.clrprog:0000000000000090 $d
     /tmp/ccoue2SN.s:2444   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:2448   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/ccoue2SN.s:2455   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/ccoue2SN.s:2654   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/ccoue2SN.s:2664   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:2671   .text.flash_backup:0000000000000000 $t
     /tmp/ccoue2SN.s:2679   .text.flash_backup:0000000000000000 flash_backup
     /tmp/ccoue2SN.s:2760   .text.flash_backup:0000000000000048 $d
     /tmp/ccoue2SN.s:2769   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:2773   .text.flash_restore:0000000000000000 $t
     /tmp/ccoue2SN.s:2781   .text.flash_restore:0000000000000000 flash_restore
     /tmp/ccoue2SN.s:2840   .text.flash_restore:0000000000000034 $d
     /tmp/ccoue2SN.s:2848   .text.load_program:0000000000000000 $t
     /tmp/ccoue2SN.s:2856   .text.load_program:0000000000000000 load_program
     /tmp/ccoue2SN.s:2968   .text.load_program:000000000000003c $d
     /tmp/ccoue2SN.s:2974   .text.load_registers:0000000000000000 $t
     /tmp/ccoue2SN.s:2982   .text.load_registers:0000000000000000 load_registers
     /tmp/ccoue2SN.s:3076   .text.load_registers:000000000000004c $d
     /tmp/ccoue2SN.s:3082   .text.load_sigma:0000000000000000 $t
     /tmp/ccoue2SN.s:3090   .text.load_sigma:0000000000000000 load_sigma
     /tmp/ccoue2SN.s:3162   .text.load_sigma:0000000000000040 $d
     /tmp/ccoue2SN.s:3167   .text.load_state:0000000000000000 $t
     /tmp/ccoue2SN.s:3175   .text.load_state:0000000000000000 load_state
     /tmp/ccoue2SN.s:3245   .text.load_state:000000000000003c $d
     /tmp/ccoue2SN.s:3251   .text.store_program:0000000000000000 $t
     /tmp/ccoue2SN.s:3259   .text.store_program:0000000000000000 store_program
     /tmp/ccoue2SN.s:3495   .text.store_program:00000000000000d4 $d
     /tmp/ccoue2SN.s:3502   .text.recall_program:0000000000000000 $t
     /tmp/ccoue2SN.s:3510   .text.recall_program:0000000000000000 recall_program
     /tmp/ccoue2SN.s:3571   .text.recall_program:000000000000003c $d
     /tmp/ccoue2SN.s:3576   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:3589   .text.save_lib_file:0000000000000000 $t
     /tmp/ccoue2SN.s:3597   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/ccoue2SN.s:3751   .text.save_lib_file:0000000000000084 $d
     /tmp/ccoue2SN.s:3770   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:3777   .text.load_lib_file:0000000000000000 $t
     /tmp/ccoue2SN.s:3785   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/ccoue2SN.s:3920   .text.load_lib_file:0000000000000078 $d
     /tmp/ccoue2SN.s:3938   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:3954   .text.save_ram_file:0000000000000000 $t
     /tmp/ccoue2SN.s:3962   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/ccoue2SN.s:4139   .text.save_ram_file:000000000000009c $d
     /tmp/ccoue2SN.s:4158   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:4165   .text.load_ram_file:0000000000000000 $t
     /tmp/ccoue2SN.s:4173   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/ccoue2SN.s:4349   .text.load_ram_file:0000000000000094 $d
     /tmp/ccoue2SN.s:4367   .rodata.load_backup_file.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccoue2SN.s 			page 143


     /tmp/ccoue2SN.s:4374   .text.load_backup_file:0000000000000000 $t
     /tmp/ccoue2SN.s:4382   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/ccoue2SN.s:4517   .text.load_backup_file:0000000000000078 $d
     /tmp/ccoue2SN.s:4535   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:4548   .text.save_prog_file:0000000000000000 $t
     /tmp/ccoue2SN.s:4556   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/ccoue2SN.s:4870   .text.save_prog_file:0000000000000130 $d
     /tmp/ccoue2SN.s:4888   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/ccoue2SN.s:4895   .text.load_prog_file:0000000000000000 $t
     /tmp/ccoue2SN.s:4903   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/ccoue2SN.s:5110   .text.load_prog_file:00000000000000b8 $d
     /tmp/ccoue2SN.s:5127   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/ccoue2SN.s:5135   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free

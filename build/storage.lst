ARM GAS  /tmp/ccqjxcgd.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** 
  24:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  25:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  26:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  27:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  28:src/storage.c **** 
  29:src/storage.c **** #ifndef NULL
ARM GAS  /tmp/ccqjxcgd.s 			page 2


  30:src/storage.c **** #define NULL 0
  31:src/storage.c **** #endif
  32:src/storage.c **** 
  33:src/storage.c **** #else // not realbuild
  34:src/storage.c **** 
  35:src/storage.c **** // Emulator definitions
  36:src/storage.c **** #include <stdio.h>
  37:src/storage.c **** #include <stdlib.h>
  38:src/storage.c **** #include <stddef.h>
  39:src/storage.c **** #include <string.h>
  40:src/storage.c **** #include <stdarg.h>
  41:src/storage.c **** 
  42:src/storage.c **** #ifdef DM42
  43:src/storage.c **** #include "dmcp.h"
  44:src/storage.c **** #endif
  45:src/storage.c **** 
  46:src/storage.c **** #ifndef DM42
  47:src/storage.c **** 
  48:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  49:src/storage.c **** #include <errno.h>
  50:src/storage.c **** #include <stdlib.h>
  51:src/storage.c **** #include <unistd.h>
  52:src/storage.c **** #endif
  53:src/storage.c **** 
  54:src/storage.c **** #endif
  55:src/storage.c **** 
  56:src/storage.c **** #define DM42SAFE
  57:src/storage.c **** #include "xeq.h"
  58:src/storage.c **** #include "storage.h"
  59:src/storage.c **** #include "display.h"
  60:src/storage.c **** #include "stats.h"
  61:src/storage.c **** #include "alpha.h"
  62:src/storage.c **** #undef DM42SAFE
  63:src/storage.c **** 
  64:src/storage.c **** #define PERSISTENT_RAM
  65:src/storage.c **** #define SLCDCMEM
  66:src/storage.c **** #define VOLATILE_RAM
  67:src/storage.c **** #define BACKUP_FLASH
  68:src/storage.c **** 
  69:src/storage.c **** #ifdef DM42
  70:src/storage.c **** 
  71:src/storage.c **** #ifdef FOUR_K
  72:src/storage.c **** #define STATE_FILE "wp34s/wp34c_4k.dat"
  73:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup_4k.dat"
  74:src/storage.c **** #else
  75:src/storage.c **** #define STATE_FILE "wp34s/wp34c.dat"
  76:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup.dat"
  77:src/storage.c **** #endif
  78:src/storage.c **** 
  79:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  80:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  81:src/storage.c **** 
  82:src/storage.c **** #else
  83:src/storage.c **** 
  84:src/storage.c **** #define STATE_FILE "wp34c.dat"
  85:src/storage.c **** #define BACKUP_FILE "wp34c-backup.dat"
  86:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
ARM GAS  /tmp/ccqjxcgd.s 			page 3


  87:src/storage.c **** 
  88:src/storage.c **** #endif
  89:src/storage.c **** #endif
  90:src/storage.c **** 
  91:src/storage.c **** 
  92:src/storage.c **** #ifdef DM42
  93:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
  94:src/storage.c **** #else
  95:src/storage.c **** #define PAGE_SIZE	 256
  96:src/storage.c **** #endif
  97:src/storage.c **** 
  98:src/storage.c **** /*
  99:src/storage.c ****  *  Setup the persistent RAM
 100:src/storage.c ****  */
 101:src/storage.c **** #ifdef DM42
 102:src/storage.c **** 
 103:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
 104:src/storage.c **** FLASH_REGION *library_ram;
 105:src/storage.c **** 
 106:src/storage.c **** void init_mem () { // called at start of program_main in console.c
 107:src/storage.c ****   char *v;
 108:src/storage.c **** 
 109:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
 110:src/storage.c ****   if (v == NULL) {
 111:src/storage.c ****     perror("calloc failed");
 112:src/storage.c ****     return;
 113:src/storage.c ****   }
 114:src/storage.c ****   main_ram = (TPersistentRam *) v;
 115:src/storage.c ****   v += RAM_SIZE;
 116:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 117:src/storage.c ****   v += RAM_SIZE;
 118:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 119:src/storage.c **** }
 120:src/storage.c **** 
 121:src/storage.c **** #else
 122:src/storage.c **** 
 123:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
 124:src/storage.c **** 
 125:src/storage.c **** #endif
 126:src/storage.c **** 
 127:src/storage.c **** /*
 128:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 129:src/storage.c ****  */
 130:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 131:src/storage.c **** 
 132:src/storage.c **** /*
 133:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 134:src/storage.c ****  *  It replaces the local registers and flags if active.
 135:src/storage.c ****  */
 136:src/storage.c **** TXromParams XromParams;
 137:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 138:src/storage.c **** 
 139:src/storage.c **** /* Private space for four registers temporarily
 140:src/storage.c ****  */
 141:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 142:src/storage.c **** 
 143:src/storage.c **** /*
ARM GAS  /tmp/ccqjxcgd.s 			page 4


 144:src/storage.c ****  *  The backup flash area:
 145:src/storage.c ****  *  2 KB for storage of programs and registers
 146:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 147:src/storage.c ****  */
 148:src/storage.c **** #if !defined(REALBUILD)
 149:src/storage.c **** /*
 150:src/storage.c ****  *  We need to define the Library space here.
 151:src/storage.c ****  *  On the device the linker takes care of this.
 152:src/storage.c ****  */
 153:src/storage.c **** #ifdef DM42 // has already been done by init_mem above
 154:src/storage.c **** #else
 155:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 156:src/storage.c **** FLASH_REGION UserFlash;
 157:src/storage.c **** #endif
 158:src/storage.c **** #endif
 159:src/storage.c **** 
 160:src/storage.c **** /*
 161:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 162:src/storage.c ****  */
 163:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 164:src/storage.c **** {
 165:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 166:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 167:src/storage.c **** 	unsigned int i;
 168:src/storage.c **** 
 169:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 170:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 171:src/storage.c **** 		crc ^= *d++;
 172:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 173:src/storage.c **** 		crc ^= crc << 12;
 174:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 175:src/storage.c **** 	}
 176:src/storage.c **** 	return crc;
 177:src/storage.c **** }
 178:src/storage.c **** 
 179:src/storage.c **** 
 180:src/storage.c **** /*
 181:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 182:src/storage.c ****  *  Returns non zero value if failure
 183:src/storage.c ****  */
 184:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 185:src/storage.c **** {
  30              		.loc 1 185 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 186:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 186 2 view .LVU1
 187:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 187 2 view .LVU2
  37              	.LBB38:
  38              	.LBI38:
 163:src/storage.c **** {
  39              		.loc 1 163 20 view .LVU3
  40              	.LBB39:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
ARM GAS  /tmp/ccqjxcgd.s 			page 5


  41              		.loc 1 165 2 view .LVU4
 166:src/storage.c **** 	unsigned int i;
  42              		.loc 1 166 2 view .LVU5
 167:src/storage.c **** 
  43              		.loc 1 167 2 view .LVU6
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 169 2 view .LVU7
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 169 15 view .LVU8
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 169 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE39:
  49              	.LBE38:
 185:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 185 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB42:
  57              	.LBB40:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 165 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 170:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 170 3 is_stmt 1 view .LVU12
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 171 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 171 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 171 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 171 3 is_stmt 1 view .LVU16
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 171 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 172:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 172 3 is_stmt 1 view .LVU18
 172:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 172 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 173 3 is_stmt 1 view .LVU20
ARM GAS  /tmp/ccqjxcgd.s 			page 6


 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 173 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 174:src/storage.c **** 	}
  85              		.loc 1 174 3 is_stmt 1 view .LVU22
 174:src/storage.c **** 	}
  86              		.loc 1 174 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 174:src/storage.c **** 	}
  89              		.loc 1 174 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 169 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 174:src/storage.c **** 	}
  93              		.loc 1 174 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 169 27 is_stmt 1 view .LVU27
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 169 15 view .LVU28
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 169 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 176:src/storage.c **** }
 100              		.loc 1 176 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 176:src/storage.c **** }
 102              		.loc 1 176 2 is_stmt 0 view .LVU31
 103              	.LBE40:
 104              	.LBE42:
 188:src/storage.c **** 	
 189:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 189 2 is_stmt 1 view .LVU32
 190:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 190 3 view .LVU33
 191:src/storage.c **** 	}
 192:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 192 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 190:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 190 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 192 2 is_stmt 1 view .LVU36
 112              		.loc 1 192 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 192 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 193:src/storage.c **** }
 119              		.loc 1 193 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccqjxcgd.s 			page 7


 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
 192:src/storage.c **** }
 128              		.loc 1 192 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 193 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB43:
 139              	.LBB41:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 165 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 176:src/storage.c **** }
 143              		.loc 1 176 2 is_stmt 1 view .LVU43
 176:src/storage.c **** }
 144              		.loc 1 176 2 is_stmt 0 view .LVU44
 145              	.LBE41:
 146              	.LBE43:
 189:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 189 2 is_stmt 1 view .LVU45
 190:src/storage.c **** 	}
 148              		.loc 1 190 3 view .LVU46
 192:src/storage.c **** }
 149              		.loc 1 192 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 190:src/storage.c **** 	}
 151              		.loc 1 190 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 192:src/storage.c **** }
 153              		.loc 1 192 2 is_stmt 1 view .LVU49
 192:src/storage.c **** }
 154              		.loc 1 192 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 192:src/storage.c **** }
 158              		.loc 1 192 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 192:src/storage.c **** }
 165              		.loc 1 192 23 view .LVU52
ARM GAS  /tmp/ccqjxcgd.s 			page 8


 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 193 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 194:src/storage.c **** 
 195:src/storage.c **** 
 196:src/storage.c **** /*
 197:src/storage.c ****  *  Checksum the current program.
 198:src/storage.c ****  */
 199:src/storage.c **** short unsigned int checksum_program( void )
 200:src/storage.c **** {
 201:src/storage.c **** 	update_program_bounds( 1 );
 202:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 203:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 204:src/storage.c **** }
 205:src/storage.c **** 
 206:src/storage.c **** 
 207:src/storage.c **** /*
 208:src/storage.c ****  *  Checksum the persistent RAM area
 209:src/storage.c ****  *  Returns non zero value if failure
 210:src/storage.c ****  */
 211:src/storage.c **** int checksum_ram( void )
 212:src/storage.c **** {
 213:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 214:src/storage.c **** 			      Crc, &Crc );
 215:src/storage.c **** }
 216:src/storage.c **** 
 217:src/storage.c **** 
 218:src/storage.c **** /*
 219:src/storage.c ****  *  Checksum the backup flash region
 220:src/storage.c ****  *  Returns non zero value if failure
 221:src/storage.c ****  */
 222:src/storage.c **** int checksum_backup( void )
 223:src/storage.c **** {
 224:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 225:src/storage.c **** 		              BackupFlash._crc, NULL );
 226:src/storage.c **** }
 227:src/storage.c **** 
 228:src/storage.c **** 
 229:src/storage.c **** /*
 230:src/storage.c ****  *  Checksum a flash region
 231:src/storage.c ****  *  Returns non zero value if failure
 232:src/storage.c ****  */
 233:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 234:src/storage.c **** {
ARM GAS  /tmp/ccqjxcgd.s 			page 9


 184              		.loc 1 234 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 235:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 235 2 view .LVU55
 189              		.loc 1 235 25 is_stmt 0 view .LVU56
 190 0000 4B88     		ldrh	r3, [r1, #2]
 236:src/storage.c **** 	
 237:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 237 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 237 2 is_stmt 1 view .LVU58
 195              		.loc 1 237 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 238:src/storage.c **** }
 200              		.loc 1 238 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 234:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 234 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 237:src/storage.c **** }
 210              		.loc 1 237 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 237:src/storage.c **** }
 213              		.loc 1 237 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 237:src/storage.c **** }
 216              		.loc 1 237 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 237:src/storage.c **** }
 219              		.loc 1 237 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 237:src/storage.c **** }
 222              		.loc 1 237 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 238 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
ARM GAS  /tmp/ccqjxcgd.s 			page 10


 232              		.align	1
 233              		.p2align 2,,3
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
 240              	.LVL23:
 241              	.LFB12:
 239:src/storage.c **** 
 240:src/storage.c **** 
 241:src/storage.c **** /*
 242:src/storage.c ****  *  Helper to store final END in empty program space
 243:src/storage.c ****  */
 244:src/storage.c **** static void stoend( void )
 245:src/storage.c **** {
 246:src/storage.c **** 	ProgSize = 1;
 247:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 248:src/storage.c **** }
 249:src/storage.c **** 
 250:src/storage.c **** 
 251:src/storage.c **** /*
 252:src/storage.c ****  *  Clear the program space
 253:src/storage.c ****  */
 254:src/storage.c **** void clpall( void )
 255:src/storage.c **** {
 256:src/storage.c **** 	clrretstk_pc();
 257:src/storage.c **** 	stoend();
 258:src/storage.c **** }
 259:src/storage.c **** 
 260:src/storage.c **** 
 261:src/storage.c **** /*
 262:src/storage.c ****  *  Sanity checks for program (step) deletion
 263:src/storage.c ****  */
 264:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 265:src/storage.c **** {
 242              		.loc 1 265 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 266:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 266 2 view .LVU69
 247              		.loc 1 266 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 265:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 265 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 266 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 266 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 266 20 discriminator 1 view .LVU74
ARM GAS  /tmp/ccqjxcgd.s 			page 11


 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
 263              	.LVL24:
 264              	.L29:
 267:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 268:src/storage.c **** 	}
 269:src/storage.c **** 	else {
 270:src/storage.c **** 		return 0;
 265              		.loc 1 270 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 271:src/storage.c **** 	}
 272:src/storage.c **** 	return 1;
 273:src/storage.c **** }
 267              		.loc 1 273 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 266:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 266 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 266:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 266 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 267:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 267 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 272:src/storage.c **** }
 282              		.loc 1 272 2 view .LVU80
 272:src/storage.c **** }
 283              		.loc 1 272 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 273 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34c-backup_4k.dat\000"
 297      732F7770 
 297      3334632D 
 297      6261636B 
 297      75705F34 
 298 001a 0000     		.align	2
 299              	.LC1:
 300 001c 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
ARM GAS  /tmp/ccqjxcgd.s 			page 12


 300      6C69622E 
 300      64617400 
 301              		.align	2
 302              	.LC2:
 303 0030 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 274:src/storage.c **** 
 275:src/storage.c **** 
 276:src/storage.c **** /*
 277:src/storage.c ****  *  Clear just the current program
 278:src/storage.c ****  */
 279:src/storage.c **** void clrprog( void )
 280:src/storage.c **** {
 281:src/storage.c **** 	update_program_bounds( 1 );
 282:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 283:src/storage.c **** 		/*
 284:src/storage.c **** 		 *  Porgram is in flash
 285:src/storage.c **** 		 */
 286:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 287:src/storage.c **** 	}
 288:src/storage.c **** 	else {
 289:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 290:src/storage.c **** 			return;
 291:src/storage.c **** 		}
 292:src/storage.c **** 		clrretstk();
 293:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 294:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 295:src/storage.c **** 		if ( ProgSize == 0 ) {
 296:src/storage.c **** 			stoend();
 297:src/storage.c **** 		}
 298:src/storage.c **** 	}
 299:src/storage.c **** 	set_pc( ProgBegin - 1 );
 300:src/storage.c **** 	update_program_bounds( 1 );
 301:src/storage.c **** }
 302:src/storage.c ****  
 303:src/storage.c **** 
 304:src/storage.c **** /*
 305:src/storage.c ****  *  Clear all - programs and registers
 306:src/storage.c ****  */
 307:src/storage.c **** void clrall(void) 
 308:src/storage.c **** {
 309:src/storage.c **** 	NumRegs = TOPREALREG;
 310:src/storage.c **** 	xeq_init_contexts();
 311:src/storage.c **** 	clrreg( OP_CLREG );
 312:src/storage.c **** 	clrstk( OP_CLSTK );
 313:src/storage.c **** 	clralpha( OP_CLRALPHA );
 314:src/storage.c **** 	clrflags( OP_CLFLAGS );
ARM GAS  /tmp/ccqjxcgd.s 			page 13


 315:src/storage.c **** 	clpall();
 316:src/storage.c **** 
 317:src/storage.c **** 	reset_shift();
 318:src/storage.c **** 	State2.test = TST_NONE;
 319:src/storage.c **** 
 320:src/storage.c **** 	DispMsg = NULL;
 321:src/storage.c **** }
 322:src/storage.c **** 
 323:src/storage.c **** 
 324:src/storage.c **** /*
 325:src/storage.c ****  *  Clear everything
 326:src/storage.c ****  */
 327:src/storage.c **** void reset( void ) 
 328:src/storage.c **** {
 329:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 330:src/storage.c **** 	clrall();
 331:src/storage.c **** 	init_state();
 332:src/storage.c **** #ifndef DM42
 333:src/storage.c **** 	UState.contrast = 6;
 334:src/storage.c **** #endif
 335:src/storage.c **** #ifdef INFRARED
 336:src/storage.c **** 	State.print_delay = 10;
 337:src/storage.c **** #endif
 338:src/storage.c **** 	DispMsg = "Erased";
 339:src/storage.c **** }
 340:src/storage.c **** 
 341:src/storage.c **** 
 342:src/storage.c **** /*
 343:src/storage.c ****  *  Store into program space.
 344:src/storage.c ****  */
 345:src/storage.c **** void stoprog( opcode c ) {
 346:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 347:src/storage.c **** 	int i;
 348:src/storage.c **** 	unsigned int pc = state_pc();
 349:src/storage.c **** 
 350:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 351:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 352:src/storage.c **** 
 353:src/storage.c **** 	if ( !isRAM( pc ) ) {
 354:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 355:src/storage.c **** 		return;
 356:src/storage.c **** 	}
 357:src/storage.c **** 	clrretstk();
 358:src/storage.c **** 	xeq_init_contexts();
 359:src/storage.c **** 	if ( ProgFree < off ) {
 360:src/storage.c **** 		return;
 361:src/storage.c **** 	}
 362:src/storage.c **** 	ProgSize += off;
 363:src/storage.c **** 	ProgEnd += off;
 364:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 365:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 366:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 367:src/storage.c **** 	}
 368:src/storage.c **** 	if (isDBL(c))
 369:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 370:src/storage.c **** 	Prog_1[pc] = c;
 371:src/storage.c **** 	State.pc = pc;
ARM GAS  /tmp/ccqjxcgd.s 			page 14


 372:src/storage.c **** }
 373:src/storage.c **** 
 374:src/storage.c **** 
 375:src/storage.c **** /*
 376:src/storage.c ****  *  Delete the current step in the program
 377:src/storage.c ****  */
 378:src/storage.c **** void delprog( void )
 379:src/storage.c **** {
 380:src/storage.c **** 	int i;
 381:src/storage.c **** 	const unsigned int pc = state_pc();
 382:src/storage.c **** 	int off;
 383:src/storage.c **** 
 384:src/storage.c **** 	if ( check_delete_prog( pc ) )
 385:src/storage.c **** 		return;
 386:src/storage.c **** 	if ( pc == 0 )
 387:src/storage.c **** 		return;
 388:src/storage.c **** 
 389:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 390:src/storage.c **** 	ProgSize -= off;
 391:src/storage.c **** 	ProgEnd -= off;
 392:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 393:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 394:src/storage.c **** 	decpc();
 395:src/storage.c **** }
 396:src/storage.c **** 
 397:src/storage.c **** 
 398:src/storage.c **** /*
 399:src/storage.c ****  *  Helper to append a program in RAM.
 400:src/storage.c ****  *  Returns non zero in case of an error.
 401:src/storage.c ****  */
 402:src/storage.c **** int append_program( const s_opcode *source, int length )
 403:src/storage.c **** {
 404:src/storage.c **** 	unsigned short pc;
 405:src/storage.c **** 	int space_needed = length - ProgFree;
 406:src/storage.c **** 
 407:src/storage.c **** 	if ( ProgSize == 1 ) {
 408:src/storage.c **** 		/*
 409:src/storage.c **** 		 *  Only the default END statement is present
 410:src/storage.c **** 		 */
 411:src/storage.c **** 		--space_needed;
 412:src/storage.c **** 		--ProgSize;
 413:src/storage.c **** 	}
 414:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 415:src/storage.c **** 		return report_err( ERR_INVALID );
 416:src/storage.c **** 	}
 417:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 418:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 419:src/storage.c **** 	}
 420:src/storage.c **** 
 421:src/storage.c **** 	/*
 422:src/storage.c **** 	 *  Make room if needed
 423:src/storage.c **** 	 */
 424:src/storage.c **** 	clrretstk();
 425:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 426:src/storage.c **** 		space_needed -= SizeStatRegs;
 427:src/storage.c **** 		sigmaDeallocate();
 428:src/storage.c **** 	}
ARM GAS  /tmp/ccqjxcgd.s 			page 15


 429:src/storage.c **** 	if ( space_needed > 0 ) {
 430:src/storage.c **** 		int regs;
 431:src/storage.c **** 		if (is_dblmode())
 432:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 433:src/storage.c **** 		else
 434:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 435:src/storage.c **** 
 436:src/storage.c **** 		if ( regs < 0 ) {
 437:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 438:src/storage.c **** 		}
 439:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 440:src/storage.c **** 	}
 441:src/storage.c **** 	/*
 442:src/storage.c **** 	 *  Append data
 443:src/storage.c **** 	 */
 444:src/storage.c **** 	pc = ProgSize + 1;
 445:src/storage.c **** 	ProgSize += length;
 446:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 447:src/storage.c **** 	set_pc( pc );
 448:src/storage.c **** 	return 0;
 449:src/storage.c **** }
 450:src/storage.c **** 
 451:src/storage.c **** 
 452:src/storage.c **** #ifdef REALBUILD
 453:src/storage.c **** /*
 454:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 455:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 456:src/storage.c ****  *  IAP feature in ROM instead
 457:src/storage.c ****  */
 458:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 459:src/storage.c **** 
 460:src/storage.c **** /*
 461:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 462:src/storage.c ****  *  Returns zero if OK or non zero on error.
 463:src/storage.c ****  */
 464:src/storage.c **** static int flash_command( unsigned int cmd )
 465:src/storage.c **** {
 466:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 467:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 468:src/storage.c **** }
 469:src/storage.c **** 
 470:src/storage.c **** /*
 471:src/storage.c ****  *  Program the flash starting at destination.
 472:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 473:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 474:src/storage.c ****  */
 475:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 476:src/storage.c **** {
 477:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 478:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 479:src/storage.c **** 
 480:src/storage.c **** 	lock();  // No interrupts, please!
 481:src/storage.c **** 
 482:src/storage.c **** 	while ( count-- > 0 ) {
 483:src/storage.c **** 		/*
 484:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 485:src/storage.c **** 		 */
ARM GAS  /tmp/ccqjxcgd.s 			page 16


 486:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 487:src/storage.c **** 		int i;
 488:src/storage.c **** 
 489:src/storage.c **** 		/*
 490:src/storage.c **** 		 *  Copy the source to the flash write buffer
 491:src/storage.c **** 		 */
 492:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
 493:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 494:src/storage.c **** 		}
 495:src/storage.c **** 
 496:src/storage.c **** 		/*
 497:src/storage.c **** 		 *  Command the controller to erase and write the page.
 498:src/storage.c **** 		 */
 499:src/storage.c **** 		if ( flash_command( cmd ) ) {
 500:src/storage.c **** 			report_err( ERR_IO );
 501:src/storage.c **** 			break;
 502:src/storage.c **** 		}
 503:src/storage.c **** 	}
 504:src/storage.c **** 	unlock();
 505:src/storage.c **** 	return Error != 0;
 506:src/storage.c **** }
 507:src/storage.c **** 
 508:src/storage.c **** 
 509:src/storage.c **** /*
 510:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 511:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 512:src/storage.c ****  */
 513:src/storage.c **** void sam_ba_boot(void)
 514:src/storage.c **** {
 515:src/storage.c **** 	/*
 516:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 517:src/storage.c **** 	 */
 518:src/storage.c **** 	lock();
 519:src/storage.c **** 	flash_command( 0x5A00010C );
 520:src/storage.c **** 	SUPC_Shutdown();
 521:src/storage.c **** }
 522:src/storage.c **** 
 523:src/storage.c **** 
 524:src/storage.c **** #else // below here, it's not REALBUILD
 525:src/storage.c **** 
 526:src/storage.c **** /*
 527:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34c-backup.dat
 528:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 529:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 530:src/storage.c ****  */
 531:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 532:src/storage.c **** extern char* get_region_path(int region);
 533:src/storage.c **** #else
 534:src/storage.c **** static char* get_region_path(int region)
 535:src/storage.c **** {
 536:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 537:src/storage.c **** }
 538:src/storage.c **** #endif
 539:src/storage.c **** 
 540:src/storage.c **** #ifdef DM42
 541:src/storage.c **** 
 542:src/storage.c **** static int program_flash( void *destination, void *source, int count )
ARM GAS  /tmp/ccqjxcgd.s 			page 17


 543:src/storage.c **** {
 315              		.loc 1 543 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 544:src/storage.c ****   char *name;
 319              		.loc 1 544 3 view .LVU84
 545:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 545 3 view .LVU85
 543:src/storage.c ****   char *name;
 321              		.loc 1 543 1 is_stmt 0 view .LVU86
 322 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 546:src/storage.c ****   int offset;
 547:src/storage.c ****   uint x=0;
 548:src/storage.c **** 
 549:src/storage.c ****   /*
 550:src/storage.c ****    *  Copy the source to the destination memory
 551:src/storage.c ****    */
 552:src/storage.c **** 
 553:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 332              		.loc 1 553 3 view .LVU87
 333 0004 1702     		lsls	r7, r2, #8
 543:src/storage.c ****   char *name;
 334              		.loc 1 543 1 view .LVU88
 335 0006 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 40
 547:src/storage.c **** 
 337              		.loc 1 547 8 view .LVU89
 338 0008 0023     		movs	r3, #0
 339              		.loc 1 553 3 view .LVU90
 340 000a 3A46     		mov	r2, r7
 341              	.LVL29:
 543:src/storage.c ****   char *name;
 342              		.loc 1 543 1 view .LVU91
 343 000c 0546     		mov	r5, r0
 344              	.LVL30:
 546:src/storage.c ****   int offset;
 345              		.loc 1 546 3 is_stmt 1 view .LVU92
 547:src/storage.c **** 
 346              		.loc 1 547 3 view .LVU93
 547:src/storage.c **** 
 347              		.loc 1 547 8 is_stmt 0 view .LVU94
 348 000e 0193     		str	r3, [sp, #4]
 349              		.loc 1 553 3 is_stmt 1 view .LVU95
 350 0010 FFF7FEFF 		bl	xcopy
 351              	.LVL31:
 554:src/storage.c **** 
 555:src/storage.c ****   /*
ARM GAS  /tmp/ccqjxcgd.s 			page 18


 556:src/storage.c ****    *  Update the correct region file
 557:src/storage.c ****    */
 558:src/storage.c **** 
 559:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 352              		.loc 1 559 3 view .LVU96
 353              		.loc 1 559 16 is_stmt 0 view .LVU97
 354 0014 2F4B     		ldr	r3, .L56
 355 0016 1E68     		ldr	r6, [r3]
 356              		.loc 1 559 6 view .LVU98
 357 0018 AE42     		cmp	r6, r5
 358 001a 03D8     		bhi	.L37
 359              		.loc 1 559 70 discriminator 1 view .LVU99
 360 001c 06F58053 		add	r3, r6, #4096
 361              		.loc 1 559 38 discriminator 1 view .LVU100
 362 0020 9D42     		cmp	r5, r3
 363 0022 2FD3     		bcc	.L54
 364              	.L37:
 560:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 561:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 562:src/storage.c ****   }
 563:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 365              		.loc 1 563 8 is_stmt 1 view .LVU101
 366              		.loc 1 563 21 is_stmt 0 view .LVU102
 367 0024 2C4B     		ldr	r3, .L56+4
 368 0026 1E68     		ldr	r6, [r3]
 369              		.loc 1 563 11 view .LVU103
 370 0028 AE42     		cmp	r6, r5
 371 002a 2FD8     		bhi	.L39
 372              		.loc 1 563 71 discriminator 1 view .LVU104
 373 002c 06F58043 		add	r3, r6, #16384
 374              		.loc 1 563 41 discriminator 1 view .LVU105
 375 0030 9D42     		cmp	r5, r3
 376 0032 2BD2     		bcs	.L39
 564:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 377              		.loc 1 564 5 is_stmt 1 view .LVU106
 378              	.LVL32:
 379              	.LBB44:
 380              	.LBI44:
 534:src/storage.c **** {
 381              		.loc 1 534 14 view .LVU107
 382              	.LBE44:
 536:src/storage.c **** }
 383              		.loc 1 536 2 view .LVU108
 565:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 565 5 view .LVU109
 564:src/storage.c ****     offset = dest - (char *) &UserFlash;
 385              		.loc 1 564 12 is_stmt 0 view .LVU110
 386 0034 DFF8C490 		ldr	r9, .L56+40
 387              		.loc 1 565 12 view .LVU111
 388 0038 AE1B     		subs	r6, r5, r6
 389              	.LVL33:
 390              	.L38:
 566:src/storage.c ****   }
 567:src/storage.c ****   else {
 568:src/storage.c ****     // Bad address
 569:src/storage.c ****     report_err( ERR_ILLEGAL );
 570:src/storage.c ****     return 1;
ARM GAS  /tmp/ccqjxcgd.s 			page 19


 571:src/storage.c ****   }
 572:src/storage.c ****   FRESULT f;
 391              		.loc 1 572 3 is_stmt 1 view .LVU112
 573:src/storage.c **** 
 574:src/storage.c ****   f = check_create_wp34sdir ();
 392              		.loc 1 574 3 view .LVU113
 393              	.LBB45:
 394              	.LBI45:
 575:src/storage.c ****   if ( f != FR_OK ) {
 576:src/storage.c ****     return f;
 577:src/storage.c ****   }
 578:src/storage.c ****   sys_disk_write_enable(1);
 579:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 580:src/storage.c ****   if ( f != FR_OK ) {
 581:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 582:src/storage.c ****   }
 583:src/storage.c ****   if ( f != FR_OK ) {
 584:src/storage.c ****     sys_disk_write_enable(0);
 585:src/storage.c ****     return 1;
 586:src/storage.c ****   }
 587:src/storage.c ****   f_lseek( FPT, offset );
 588:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 589:src/storage.c ****   if (f != FR_OK) {
 590:src/storage.c ****     f_close( FPT );
 591:src/storage.c ****     sys_disk_write_enable(0);
 592:src/storage.c ****     return 1;
 593:src/storage.c ****   }
 594:src/storage.c ****   f = f_close( FPT );
 595:src/storage.c ****   if ( f != FR_OK ) {
 596:src/storage.c ****     sys_disk_write_enable(0);
 597:src/storage.c ****     return 1;
 598:src/storage.c ****   }
 599:src/storage.c ****   sys_disk_write_enable(0);
 600:src/storage.c ****   return 0;
 601:src/storage.c **** }
 602:src/storage.c **** 
 603:src/storage.c **** int check_create_wp34sdir(void) {
 395              		.loc 1 603 5 view .LVU114
 396              	.LBB46:
 604:src/storage.c ****   FRESULT f;
 397              		.loc 1 604 3 view .LVU115
 605:src/storage.c ****   sys_disk_write_enable(1);
 398              		.loc 1 605 3 view .LVU116
 399 003a DFF8AC80 		ldr	r8, .L56+20
 400 003e 0120     		movs	r0, #1
 401 0040 C047     		blx	r8
 402              	.LVL34:
 606:src/storage.c ****   f = check_create_dir ("/wp34s");
 403              		.loc 1 606 3 view .LVU117
 404              		.loc 1 606 7 is_stmt 0 view .LVU118
 405 0042 264B     		ldr	r3, .L56+8
 406 0044 2648     		ldr	r0, .L56+12
 407 0046 9847     		blx	r3
 408              	.LVL35:
 409 0048 0446     		mov	r4, r0
 410              	.LVL36:
 607:src/storage.c ****   sys_disk_write_enable(0);
ARM GAS  /tmp/ccqjxcgd.s 			page 20


 411              		.loc 1 607 3 is_stmt 1 view .LVU119
 412 004a 0020     		movs	r0, #0
 413 004c C047     		blx	r8
 414              	.LVL37:
 608:src/storage.c ****   return f;
 415              		.loc 1 608 3 view .LVU120
 416              		.loc 1 608 3 is_stmt 0 view .LVU121
 417              	.LBE46:
 418              	.LBE45:
 575:src/storage.c ****     return f;
 419              		.loc 1 575 3 is_stmt 1 view .LVU122
 575:src/storage.c ****     return f;
 420              		.loc 1 575 6 is_stmt 0 view .LVU123
 421 004e 14F0FF04 		ands	r4, r4, #255
 422              	.LVL38:
 575:src/storage.c ****     return f;
 423              		.loc 1 575 6 view .LVU124
 424 0052 36D1     		bne	.L53
 578:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 425              		.loc 1 578 3 is_stmt 1 view .LVU125
 579:src/storage.c ****   if ( f != FR_OK ) {
 426              		.loc 1 579 7 is_stmt 0 view .LVU126
 427 0054 DFF894A0 		ldr	r10, .L56+24
 428 0058 224C     		ldr	r4, .L56+16
 578:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 429              		.loc 1 578 3 view .LVU127
 430 005a 0120     		movs	r0, #1
 431 005c C047     		blx	r8
 432              	.LVL39:
 579:src/storage.c ****   if ( f != FR_OK ) {
 433              		.loc 1 579 3 is_stmt 1 view .LVU128
 579:src/storage.c ****   if ( f != FR_OK ) {
 434              		.loc 1 579 7 is_stmt 0 view .LVU129
 435 005e DAF80400 		ldr	r0, [r10, #4]
 436 0062 0322     		movs	r2, #3
 437 0064 4946     		mov	r1, r9
 438 0066 A047     		blx	r4
 439              	.LVL40:
 580:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 440              		.loc 1 580 3 is_stmt 1 view .LVU130
 580:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 441              		.loc 1 580 6 is_stmt 0 view .LVU131
 442 0068 B8B1     		cbz	r0, .L42
 581:src/storage.c ****   }
 443              		.loc 1 581 5 is_stmt 1 view .LVU132
 581:src/storage.c ****   }
 444              		.loc 1 581 9 is_stmt 0 view .LVU133
 445 006a DAF80400 		ldr	r0, [r10, #4]
 446              	.LVL41:
 581:src/storage.c ****   }
 447              		.loc 1 581 9 view .LVU134
 448 006e 4946     		mov	r1, r9
 449 0070 0B22     		movs	r2, #11
 450 0072 A047     		blx	r4
 451              	.LVL42:
 583:src/storage.c ****     sys_disk_write_enable(0);
 452              		.loc 1 583 3 is_stmt 1 view .LVU135
ARM GAS  /tmp/ccqjxcgd.s 			page 21


 583:src/storage.c ****     sys_disk_write_enable(0);
 453              		.loc 1 583 6 is_stmt 0 view .LVU136
 454 0074 88B1     		cbz	r0, .L42
 455              	.LVL43:
 456              	.L52:
 591:src/storage.c ****     return 1;
 457              		.loc 1 591 5 is_stmt 1 view .LVU137
 458 0076 1C4B     		ldr	r3, .L56+20
 459 0078 0020     		movs	r0, #0
 460 007a 9847     		blx	r3
 461              	.LVL44:
 592:src/storage.c ****   }
 462              		.loc 1 592 5 view .LVU138
 592:src/storage.c ****   }
 463              		.loc 1 592 12 is_stmt 0 view .LVU139
 464 007c 0120     		movs	r0, #1
 601:src/storage.c **** 
 465              		.loc 1 601 1 view .LVU140
 466 007e 02B0     		add	sp, sp, #8
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 32
 469              		@ sp needed
 470 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 471              	.LVL45:
 472              	.L54:
 473              		.cfi_restore_state
 560:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 474              		.loc 1 560 5 is_stmt 1 view .LVU141
 475              	.LBB47:
 476              	.LBI47:
 534:src/storage.c **** {
 477              		.loc 1 534 14 view .LVU142
 478              	.LBE47:
 536:src/storage.c **** }
 479              		.loc 1 536 2 view .LVU143
 561:src/storage.c ****   }
 480              		.loc 1 561 5 view .LVU144
 560:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 481              		.loc 1 560 12 is_stmt 0 view .LVU145
 482 0084 DFF87890 		ldr	r9, .L56+44
 561:src/storage.c ****   }
 483              		.loc 1 561 12 view .LVU146
 484 0088 AE1B     		subs	r6, r5, r6
 485              	.LVL46:
 561:src/storage.c ****   }
 486              		.loc 1 561 12 view .LVU147
 487 008a D6E7     		b	.L38
 488              	.LVL47:
 489              	.L39:
 569:src/storage.c ****     return 1;
 490              		.loc 1 569 5 is_stmt 1 view .LVU148
 491 008c 0720     		movs	r0, #7
 492 008e FFF7FEFF 		bl	report_err
 493              	.LVL48:
 570:src/storage.c ****   }
 494              		.loc 1 570 5 view .LVU149
 570:src/storage.c ****   }
ARM GAS  /tmp/ccqjxcgd.s 			page 22


 495              		.loc 1 570 12 is_stmt 0 view .LVU150
 496 0092 0120     		movs	r0, #1
 601:src/storage.c **** 
 497              		.loc 1 601 1 view .LVU151
 498 0094 02B0     		add	sp, sp, #8
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
 501              		@ sp needed
 502 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 503              	.LVL49:
 504              	.L42:
 505              		.cfi_restore_state
 587:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 506              		.loc 1 587 3 is_stmt 1 view .LVU152
 507 009a 144C     		ldr	r4, .L56+24
 508 009c 144B     		ldr	r3, .L56+28
 509 009e 6068     		ldr	r0, [r4, #4]
 510 00a0 3146     		mov	r1, r6
 511 00a2 9847     		blx	r3
 512              	.LVL50:
 588:src/storage.c ****   if (f != FR_OK) {
 513              		.loc 1 588 3 view .LVU153
 588:src/storage.c ****   if (f != FR_OK) {
 514              		.loc 1 588 7 is_stmt 0 view .LVU154
 515 00a4 2946     		mov	r1, r5
 516 00a6 6068     		ldr	r0, [r4, #4]
 517 00a8 124D     		ldr	r5, .L56+32
 518              	.LVL51:
 588:src/storage.c ****   if (f != FR_OK) {
 519              		.loc 1 588 7 view .LVU155
 520 00aa 3A46     		mov	r2, r7
 521 00ac 01AB     		add	r3, sp, #4
 522 00ae A847     		blx	r5
 523              	.LVL52:
 589:src/storage.c ****     f_close( FPT );
 524              		.loc 1 589 3 is_stmt 1 view .LVU156
 589:src/storage.c ****     f_close( FPT );
 525              		.loc 1 589 6 is_stmt 0 view .LVU157
 526 00b0 58B9     		cbnz	r0, .L55
 594:src/storage.c ****   if ( f != FR_OK ) {
 527              		.loc 1 594 3 is_stmt 1 view .LVU158
 594:src/storage.c ****   if ( f != FR_OK ) {
 528              		.loc 1 594 7 is_stmt 0 view .LVU159
 529 00b2 6068     		ldr	r0, [r4, #4]
 530              	.LVL53:
 594:src/storage.c ****   if ( f != FR_OK ) {
 531              		.loc 1 594 7 view .LVU160
 532 00b4 104B     		ldr	r3, .L56+36
 533 00b6 9847     		blx	r3
 534              	.LVL54:
 595:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 595 3 is_stmt 1 view .LVU161
 595:src/storage.c ****     sys_disk_write_enable(0);
 536              		.loc 1 595 6 is_stmt 0 view .LVU162
 537 00b8 0446     		mov	r4, r0
 538 00ba 0028     		cmp	r0, #0
 539 00bc DBD1     		bne	.L52
ARM GAS  /tmp/ccqjxcgd.s 			page 23


 599:src/storage.c ****   return 0;
 540              		.loc 1 599 3 is_stmt 1 view .LVU163
 541 00be 0A4B     		ldr	r3, .L56+20
 542 00c0 9847     		blx	r3
 543              	.LVL55:
 544              	.L53:
 600:src/storage.c **** }
 545              		.loc 1 600 3 view .LVU164
 600:src/storage.c **** }
 546              		.loc 1 600 10 is_stmt 0 view .LVU165
 547 00c2 2046     		mov	r0, r4
 601:src/storage.c **** 
 548              		.loc 1 601 1 view .LVU166
 549 00c4 02B0     		add	sp, sp, #8
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 32
 552              		@ sp needed
 553 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 554              	.LVL56:
 555              	.L55:
 556              		.cfi_restore_state
 590:src/storage.c ****     sys_disk_write_enable(0);
 557              		.loc 1 590 5 is_stmt 1 view .LVU167
 558 00ca 6068     		ldr	r0, [r4, #4]
 559              	.LVL57:
 590:src/storage.c ****     sys_disk_write_enable(0);
 560              		.loc 1 590 5 is_stmt 0 view .LVU168
 561 00cc 0A4B     		ldr	r3, .L56+36
 562 00ce 9847     		blx	r3
 563              	.LVL58:
 564 00d0 D1E7     		b	.L52
 565              	.L57:
 566 00d2 00BF     		.align	2
 567              	.L56:
 568 00d4 00000000 		.word	backup_ram
 569 00d8 00000000 		.word	library_ram
 570 00dc D1030008 		.word	134218705
 571 00e0 30000000 		.word	.LC2
 572 00e4 35040008 		.word	134218805
 573 00e8 E1030008 		.word	134218721
 574 00ec 00200010 		.word	268443648
 575 00f0 45040008 		.word	134218821
 576 00f4 41040008 		.word	134218817
 577 00f8 39040008 		.word	134218809
 578 00fc 1C000000 		.word	.LC1
 579 0100 00000000 		.word	.LC0
 580              		.cfi_endproc
 581              	.LFE20:
 583              		.section	.text.flash_append,"ax",%progbits
 584              		.align	1
 585              		.p2align 2,,3
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
 591              	flash_append:
 592              	.LVL59:
ARM GAS  /tmp/ccqjxcgd.s 			page 24


 593              	.LFB23:
 609:src/storage.c **** }
 610:src/storage.c **** 
 611:src/storage.c **** #else //ifdef DM42 false
 612:src/storage.c **** 
 613:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 614:src/storage.c **** {
 615:src/storage.c ****   char *name;
 616:src/storage.c ****   char *dest = (char *) destination;
 617:src/storage.c ****   FILE *f = NULL;
 618:src/storage.c ****   int offset;
 619:src/storage.c **** 
 620:src/storage.c ****   /*
 621:src/storage.c ****    *  Copy the source to the destination memory
 622:src/storage.c ****    */
 623:src/storage.c **** 
 624:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 625:src/storage.c **** 
 626:src/storage.c ****   /*
 627:src/storage.c ****    *  Update the correct region file
 628:src/storage.c ****    */
 629:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 630:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 631:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 632:src/storage.c ****   }
 633:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 634:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 635:src/storage.c ****     offset = dest - (char *) &UserFlash;
 636:src/storage.c ****   }
 637:src/storage.c ****   else {
 638:src/storage.c ****     // Bad address
 639:src/storage.c ****     report_err( ERR_ILLEGAL );
 640:src/storage.c ****     return 1;
 641:src/storage.c ****   }
 642:src/storage.c **** 
 643:src/storage.c ****   f = fopen( name, "rb+" );
 644:src/storage.c ****   if ( f == NULL ) {
 645:src/storage.c ****     f = fopen( name, "wb+" );
 646:src/storage.c ****   }
 647:src/storage.c ****   if ( f == NULL ) {
 648:src/storage.c ****     report_err( ERR_IO );
 649:src/storage.c ****     return 1;
 650:src/storage.c ****   }
 651:src/storage.c ****   fseek( f, offset, SEEK_SET );
 652:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 653:src/storage.c ****     fclose( f );
 654:src/storage.c ****     report_err( ERR_IO );
 655:src/storage.c ****     return 1;
 656:src/storage.c ****   }
 657:src/storage.c ****   fclose( f );
 658:src/storage.c ****  return 0;
 659:src/storage.c **** }
 660:src/storage.c ****   
 661:src/storage.c **** #endif //ifdef DM42
 662:src/storage.c **** 
 663:src/storage.c **** 
 664:src/storage.c **** #endif //ifdef REALBUILD
ARM GAS  /tmp/ccqjxcgd.s 			page 25


 665:src/storage.c **** 
 666:src/storage.c **** 
 667:src/storage.c **** /*
 668:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 669:src/storage.c ****  */
 670:src/storage.c **** void init_library( void )
 671:src/storage.c **** {
 672:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 673:src/storage.c **** 	  struct {
 674:src/storage.c **** 			unsigned short crc;
 675:src/storage.c **** 			unsigned short size;
 676:src/storage.c **** 			s_opcode prog[ 126 ];
 677:src/storage.c **** 		} lib;
 678:src/storage.c **** 		lib.size = 0;
 679:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 680:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 681:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 682:src/storage.c **** 	}
 683:src/storage.c **** }
 684:src/storage.c **** 
 685:src/storage.c **** 
 686:src/storage.c **** /*
 687:src/storage.c ****  *  Add data at the end of user flash memory.
 688:src/storage.c ****  *  Update crc and counter when done.
 689:src/storage.c ****  *  All sizes are given in steps.
 690:src/storage.c ****  */
 691:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 692:src/storage.c **** {
 594              		.loc 1 692 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 256
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 693:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 598              		.loc 1 693 3 view .LVU170
 692:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 599              		.loc 1 692 1 is_stmt 0 view .LVU171
 600 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 601              		.cfi_def_cfa_offset 36
 602              		.cfi_offset 4, -36
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 6, -28
 605              		.cfi_offset 7, -24
 606              		.cfi_offset 8, -20
 607              		.cfi_offset 9, -16
 608              		.cfi_offset 10, -12
 609              		.cfi_offset 11, -8
 610              		.cfi_offset 14, -4
 611              		.loc 1 693 27 view .LVU172
 612 0004 254F     		ldr	r7, .L70
 613 0006 3C68     		ldr	r4, [r7]
 614 0008 251D     		adds	r5, r4, #4
 615              		.loc 1 693 9 view .LVU173
 616 000a 05EB4006 		add	r6, r5, r0, lsl #1
 617              	.LVL60:
 694:src/storage.c ****   char *src = (char *) source;
 618              		.loc 1 694 3 is_stmt 1 view .LVU174
 695:src/storage.c **** #ifdef REALBUILD
ARM GAS  /tmp/ccqjxcgd.s 			page 26


 696:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 697:src/storage.c **** #else
 698:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 619              		.loc 1 698 31 is_stmt 0 view .LVU175
 620 000e 341B     		subs	r4, r6, r4
 699:src/storage.c **** #endif
 700:src/storage.c ****   char buffer[ PAGE_SIZE ];
 701:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 702:src/storage.c ****   count <<= 1;
 703:src/storage.c **** 
 704:src/storage.c ****   if ( offset_in_page != 0 ) {
 621              		.loc 1 704 6 view .LVU176
 622 0010 14F0FF04 		ands	r4, r4, #255
 692:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 623              		.loc 1 692 1 view .LVU177
 624 0014 C1B0     		sub	sp, sp, #260
 625              		.cfi_def_cfa_offset 296
 692:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 626              		.loc 1 692 1 view .LVU178
 627 0016 8846     		mov	r8, r1
 628              	.LVL61:
 698:src/storage.c **** #endif
 629              		.loc 1 698 3 is_stmt 1 view .LVU179
 700:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 630              		.loc 1 700 3 view .LVU180
 701:src/storage.c ****   count <<= 1;
 631              		.loc 1 701 3 view .LVU181
 702:src/storage.c **** 
 632              		.loc 1 702 3 view .LVU182
 702:src/storage.c **** 
 633              		.loc 1 702 9 is_stmt 0 view .LVU183
 634 0018 4FEA4205 		lsl	r5, r2, #1
 635              	.LVL62:
 636              		.loc 1 704 3 is_stmt 1 view .LVU184
 692:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 637              		.loc 1 692 1 is_stmt 0 view .LVU185
 638 001c 9946     		mov	r9, r3
 639              		.loc 1 704 6 view .LVU186
 640 001e 21D1     		bne	.L69
 641              	.LVL63:
 642              	.L59:
 705:src/storage.c ****     /*
 706:src/storage.c ****      *  We are not on a page boundary
 707:src/storage.c ****      *  Assemble a buffer from existing and new data
 708:src/storage.c ****      */
 709:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 710:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 711:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 712:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 713:src/storage.c ****       return 1;
 714:src/storage.c ****     }
 715:src/storage.c ****     src += bytes;
 716:src/storage.c ****     dest += bytes;
 717:src/storage.c ****     count -= bytes;
 718:src/storage.c ****   }
 719:src/storage.c **** 
 720:src/storage.c ****   if ( count > 0 ) {
ARM GAS  /tmp/ccqjxcgd.s 			page 27


 643              		.loc 1 720 3 is_stmt 1 view .LVU187
 644              		.loc 1 720 6 is_stmt 0 view .LVU188
 645 0020 002D     		cmp	r5, #0
 646 0022 07DD     		ble	.L64
 721:src/storage.c ****     /*
 722:src/storage.c ****      *  Move multiples of complete pages
 723:src/storage.c ****      */
 724:src/storage.c **** #ifdef DM42
 725:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
 647              		.loc 1 725 5 is_stmt 1 view .LVU189
 648              		.loc 1 725 21 is_stmt 0 view .LVU190
 649 0024 05F1FF02 		add	r2, r5, #255
 650              	.LVL64:
 726:src/storage.c **** #else
 727:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 728:src/storage.c **** #endif
 729:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 651              		.loc 1 729 5 is_stmt 1 view .LVU191
 652              		.loc 1 729 10 is_stmt 0 view .LVU192
 653 0028 1212     		asrs	r2, r2, #8
 654              	.LVL65:
 655              		.loc 1 729 10 view .LVU193
 656 002a 4146     		mov	r1, r8
 657 002c 3046     		mov	r0, r6
 658 002e FFF7FEFF 		bl	program_flash
 659              	.LVL66:
 660              		.loc 1 729 8 view .LVU194
 661 0032 98B9     		cbnz	r0, .L63
 662              	.LVL67:
 663              	.L64:
 730:src/storage.c ****       return 1;
 731:src/storage.c ****     }
 732:src/storage.c ****   }
 733:src/storage.c **** 
 734:src/storage.c ****   /*
 735:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 736:src/storage.c ****    */
 737:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 664              		.loc 1 737 3 is_stmt 1 view .LVU195
 665 0034 3968     		ldr	r1, [r7]
 666 0036 4FF48072 		mov	r2, #256
 667 003a 6846     		mov	r0, sp
 668 003c FFF7FEFF 		bl	xcopy
 669              	.LVL68:
 738:src/storage.c ****   fr->size = size;
 670              		.loc 1 738 3 view .LVU196
 739:src/storage.c ****   checksum_region( &UserFlash, fr );
 671              		.loc 1 739 3 is_stmt 0 view .LVU197
 672 0040 6946     		mov	r1, sp
 673 0042 3868     		ldr	r0, [r7]
 738:src/storage.c ****   fr->size = size;
 674              		.loc 1 738 12 view .LVU198
 675 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 676              		.loc 1 739 3 is_stmt 1 view .LVU199
 677 0048 FFF7FEFF 		bl	checksum_region
 678              	.LVL69:
 740:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
ARM GAS  /tmp/ccqjxcgd.s 			page 28


 679              		.loc 1 740 3 view .LVU200
 680              		.loc 1 740 10 is_stmt 0 view .LVU201
 681 004c 3868     		ldr	r0, [r7]
 682 004e 6946     		mov	r1, sp
 683 0050 0122     		movs	r2, #1
 684 0052 FFF7FEFF 		bl	program_flash
 685              	.LVL70:
 741:src/storage.c **** }
 686              		.loc 1 741 1 view .LVU202
 687 0056 41B0     		add	sp, sp, #260
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 36
 690              	.LVL71:
 691              		.loc 1 741 1 view .LVU203
 692              		@ sp needed
 693 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              	.LVL72:
 695              	.L63:
 696              		.cfi_restore_state
 697              	.LBB48:
 713:src/storage.c ****     }
 698              		.loc 1 713 14 view .LVU204
 699 005c 0120     		movs	r0, #1
 700              	.LBE48:
 701              		.loc 1 741 1 view .LVU205
 702 005e 41B0     		add	sp, sp, #260
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              	.LVL73:
 706              		.loc 1 741 1 view .LVU206
 707              		@ sp needed
 708 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 709              	.LVL74:
 710              	.L69:
 711              		.cfi_restore_state
 712              	.LBB49:
 709:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713              		.loc 1 709 5 is_stmt 1 view .LVU207
 710:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714              		.loc 1 710 25 is_stmt 0 view .LVU208
 715 0064 A6EB040B 		sub	fp, r6, r4
 710:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 716              		.loc 1 710 5 view .LVU209
 717 0068 5946     		mov	r1, fp
 718              	.LVL75:
 710:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 719              		.loc 1 710 5 view .LVU210
 720 006a 2246     		mov	r2, r4
 721 006c 6846     		mov	r0, sp
 722              	.LVL76:
 709:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 723              		.loc 1 709 15 view .LVU211
 724 006e C4F5807A 		rsb	r10, r4, #256
 725              	.LVL77:
 710:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 726              		.loc 1 710 5 is_stmt 1 view .LVU212
 727 0072 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccqjxcgd.s 			page 29


 728              	.LVL78:
 711:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 729              		.loc 1 711 5 view .LVU213
 730 0076 5246     		mov	r2, r10
 731 0078 4146     		mov	r1, r8
 732 007a 0DEB0400 		add	r0, sp, r4
 733 007e FFF7FEFF 		bl	xcopy
 734              	.LVL79:
 712:src/storage.c ****       return 1;
 735              		.loc 1 712 5 view .LVU214
 712:src/storage.c ****       return 1;
 736              		.loc 1 712 10 is_stmt 0 view .LVU215
 737 0082 6946     		mov	r1, sp
 738 0084 5846     		mov	r0, fp
 739 0086 0122     		movs	r2, #1
 740 0088 FFF7FEFF 		bl	program_flash
 741              	.LVL80:
 712:src/storage.c ****       return 1;
 742              		.loc 1 712 8 view .LVU216
 743 008c 0028     		cmp	r0, #0
 744 008e E5D1     		bne	.L63
 715:src/storage.c ****     dest += bytes;
 745              		.loc 1 715 5 is_stmt 1 view .LVU217
 715:src/storage.c ****     dest += bytes;
 746              		.loc 1 715 9 is_stmt 0 view .LVU218
 747 0090 D044     		add	r8, r8, r10
 748              	.LVL81:
 716:src/storage.c ****     count -= bytes;
 749              		.loc 1 716 5 is_stmt 1 view .LVU219
 716:src/storage.c ****     count -= bytes;
 750              		.loc 1 716 10 is_stmt 0 view .LVU220
 751 0092 5644     		add	r6, r6, r10
 752              	.LVL82:
 717:src/storage.c ****   }
 753              		.loc 1 717 5 is_stmt 1 view .LVU221
 717:src/storage.c ****   }
 754              		.loc 1 717 11 is_stmt 0 view .LVU222
 755 0094 A5EB0A05 		sub	r5, r5, r10
 756              	.LVL83:
 717:src/storage.c ****   }
 757              		.loc 1 717 11 view .LVU223
 758 0098 C2E7     		b	.L59
 759              	.L71:
 760 009a 00BF     		.align	2
 761              	.L70:
 762 009c 00000000 		.word	library_ram
 763              	.LBE49:
 764              		.cfi_endproc
 765              	.LFE23:
 767              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 768              		.align	2
 769              	.LC3:
 770 0000 64617461 		.ascii	"data=3?\000"
 770      3D333F00 
 771              		.align	2
 772              	.LC4:
 773 0008 46696C65 		.ascii	"File err\000"
ARM GAS  /tmp/ccqjxcgd.s 			page 30


 773      20657272 
 773      00
 774              		.section	.text.open_selected_file,"ax",%progbits
 775              		.align	1
 776              		.p2align 2,,3
 777              		.global	open_selected_file
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	open_selected_file:
 784              	.LVL84:
 785              	.LFB38:
 742:src/storage.c **** 
 743:src/storage.c **** 
 744:src/storage.c **** /*
 745:src/storage.c ****  *  Remove steps from user flash memory.
 746:src/storage.c ****  */
 747:src/storage.c **** int flash_remove( int step_no, int count )
 748:src/storage.c **** {
 749:src/storage.c **** 	const int size = UserFlash.size - count;
 750:src/storage.c **** 	step_no = offsetLIB( step_no );
 751:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 752:src/storage.c **** 			     size - step_no, size );
 753:src/storage.c **** }
 754:src/storage.c **** 
 755:src/storage.c **** 
 756:src/storage.c **** /*
 757:src/storage.c ****  *  Simple backup / restore
 758:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 759:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 760:src/storage.c ****  */
 761:src/storage.c **** void flash_backup( enum nilop op )
 762:src/storage.c **** {
 763:src/storage.c **** 	if ( not_running() ) {
 764:src/storage.c **** 		process_cmdline_set_lift();
 765:src/storage.c **** 		init_state();
 766:src/storage.c **** 		checksum_all();
 767:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 768:src/storage.c **** 			error_message( ERR_IO );
 769:src/storage.c **** 			DispMsg = "Error";
 770:src/storage.c **** 		}
 771:src/storage.c **** 		else {
 772:src/storage.c **** 			DispMsg = "Saved";
 773:src/storage.c **** 		}
 774:src/storage.c **** 	}
 775:src/storage.c **** }
 776:src/storage.c **** 
 777:src/storage.c **** 
 778:src/storage.c **** void flash_restore( enum nilop op )
 779:src/storage.c **** {
 780:src/storage.c **** 	if ( not_running() ) {
 781:src/storage.c **** 		if ( checksum_backup() ) {
 782:src/storage.c **** 			error_message( ERR_INVALID );
 783:src/storage.c **** 		}
 784:src/storage.c **** 		else {
 785:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
ARM GAS  /tmp/ccqjxcgd.s 			page 31


 786:src/storage.c **** 			init_state();
 787:src/storage.c **** 			DispMsg = "Restored";
 788:src/storage.c **** 		}
 789:src/storage.c **** 	}
 790:src/storage.c **** }
 791:src/storage.c **** 
 792:src/storage.c **** 
 793:src/storage.c **** /*
 794:src/storage.c ****  *  Load the user program area from the backup.
 795:src/storage.c ****  *  Called by PLOAD.
 796:src/storage.c ****  */
 797:src/storage.c **** void load_program( enum nilop op )
 798:src/storage.c **** {
 799:src/storage.c **** 	if ( not_running() ) {
 800:src/storage.c **** 		if ( checksum_backup() ) {
 801:src/storage.c **** 			/*
 802:src/storage.c **** 			 *  Not a valid backup
 803:src/storage.c **** 			 */
 804:src/storage.c **** 			report_err( ERR_INVALID );
 805:src/storage.c **** 			return;
 806:src/storage.c **** 		}
 807:src/storage.c **** 		clpall();
 808:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 809:src/storage.c **** 	}
 810:src/storage.c **** }
 811:src/storage.c **** 
 812:src/storage.c **** 
 813:src/storage.c **** /*
 814:src/storage.c ****  *  Load registers from backup
 815:src/storage.c ****  */
 816:src/storage.c **** void load_registers( enum nilop op )
 817:src/storage.c **** {
 818:src/storage.c **** 	int count;
 819:src/storage.c **** 	if ( checksum_backup() ) {
 820:src/storage.c **** 		/*
 821:src/storage.c **** 		 *  Not a valid backup region
 822:src/storage.c **** 		 */
 823:src/storage.c **** 		report_err( ERR_INVALID );
 824:src/storage.c **** 		return;
 825:src/storage.c **** 	}
 826:src/storage.c **** 	count = NumRegs;
 827:src/storage.c **** 	if ( is_dblmode() ) {
 828:src/storage.c **** 		// Don't clobber the stack in DP mode
 829:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 830:src/storage.c **** 	}
 831:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 832:src/storage.c **** 		count = BackupFlash._numregs;
 833:src/storage.c **** 	}
 834:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 835:src/storage.c **** }
 836:src/storage.c **** 
 837:src/storage.c **** 
 838:src/storage.c **** /*
 839:src/storage.c ****  *  Load the statistical summation registers from backup
 840:src/storage.c ****  */
 841:src/storage.c **** void load_sigma( enum nilop op )
 842:src/storage.c **** {
ARM GAS  /tmp/ccqjxcgd.s 			page 32


 843:src/storage.c **** 	if ( checksum_backup() ) {
 844:src/storage.c **** 		/*
 845:src/storage.c **** 		 *  Not a valid backup region
 846:src/storage.c **** 		 */
 847:src/storage.c **** 		report_err( ERR_INVALID );
 848:src/storage.c **** 		return;
 849:src/storage.c **** 	}
 850:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 851:src/storage.c **** 		/*
 852:src/storage.c **** 		 *  Backup has no data
 853:src/storage.c **** 		 */
 854:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 855:src/storage.c **** 		return;
 856:src/storage.c **** 	}
 857:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 858:src/storage.c **** }
 859:src/storage.c **** 
 860:src/storage.c **** 
 861:src/storage.c **** /*
 862:src/storage.c ****  *  Load the configuration data from the backup
 863:src/storage.c ****  */
 864:src/storage.c **** void load_state( enum nilop op )
 865:src/storage.c **** {
 866:src/storage.c **** 	if ( not_running() ) {
 867:src/storage.c **** 		if ( checksum_backup() ) {
 868:src/storage.c **** 			/*
 869:src/storage.c **** 			 *  Not a valid backup region
 870:src/storage.c **** 			 */
 871:src/storage.c **** 			report_err( ERR_INVALID );
 872:src/storage.c **** 			return;
 873:src/storage.c **** 		}
 874:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 875:src/storage.c **** 		init_state();
 876:src/storage.c **** 		clrretstk_pc();
 877:src/storage.c **** 	}
 878:src/storage.c **** }
 879:src/storage.c **** 
 880:src/storage.c **** 
 881:src/storage.c **** /*
 882:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 883:src/storage.c ****  */
 884:src/storage.c **** void store_program( enum nilop op )
 885:src/storage.c **** {
 886:src/storage.c **** 	opcode lbl; 
 887:src/storage.c **** 	unsigned int pc;
 888:src/storage.c **** 	int space_needed, count, free;
 889:src/storage.c **** 
 890:src/storage.c **** 	if ( not_running() ) {
 891:src/storage.c **** 		/*
 892:src/storage.c **** 		 *  Don't copy from library or XROM
 893:src/storage.c **** 		 */
 894:src/storage.c **** 		pc = nLIB( state_pc() );
 895:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 896:src/storage.c **** 			report_err( ERR_ILLEGAL );
 897:src/storage.c **** 			return;
 898:src/storage.c **** 		}
 899:src/storage.c **** 		/*
ARM GAS  /tmp/ccqjxcgd.s 			page 33


 900:src/storage.c **** 		 *  Check if program is labeled
 901:src/storage.c **** 		 */
 902:src/storage.c **** 		update_program_bounds( 1 );
 903:src/storage.c **** 		lbl = getprog( ProgBegin );
 904:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 905:src/storage.c **** 			report_err( ERR_NO_LBL );
 906:src/storage.c **** 			return;
 907:src/storage.c **** 		}
 908:src/storage.c **** 		/*
 909:src/storage.c **** 		 *  Compute space needed
 910:src/storage.c **** 		 */
 911:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 912:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 913:src/storage.c **** 
 914:src/storage.c **** 		/*
 915:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 916:src/storage.c **** 		 */
 917:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 918:src/storage.c **** 		if ( pc != 0 ) {
 919:src/storage.c **** 			/*
 920:src/storage.c **** 			 *  CLP in library
 921:src/storage.c **** 			 */
 922:src/storage.c **** 			unsigned int old_pc = state_pc();
 923:src/storage.c **** 			set_pc( pc );
 924:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 925:src/storage.c **** 			if ( space_needed <= free ) {
 926:src/storage.c **** 				clrprog();
 927:src/storage.c **** 			}
 928:src/storage.c **** 			set_pc( old_pc );
 929:src/storage.c **** 		}
 930:src/storage.c **** 		if ( space_needed > free ) {
 931:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 932:src/storage.c **** 			return;
 933:src/storage.c **** 		}
 934:src/storage.c **** 		// 3. Append program
 935:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 936:src/storage.c **** 	}
 937:src/storage.c **** }
 938:src/storage.c **** 
 939:src/storage.c **** 
 940:src/storage.c **** /*
 941:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 942:src/storage.c ****  */
 943:src/storage.c **** void recall_program( enum nilop op )
 944:src/storage.c **** {
 945:src/storage.c **** 	if ( not_running() ) {
 946:src/storage.c **** 		if ( state_pc() == 0 ) {
 947:src/storage.c **** 			State.pc = 1;
 948:src/storage.c **** 		}
 949:src/storage.c **** 		update_program_bounds( 1 );
 950:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 951:src/storage.c **** 	}
 952:src/storage.c **** }
 953:src/storage.c **** 
 954:src/storage.c **** 
 955:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 956:src/storage.c **** /*
ARM GAS  /tmp/ccqjxcgd.s 			page 34


 957:src/storage.c ****  *  Filesystem access for emulator
 958:src/storage.c ****  */
 959:src/storage.c **** 
 960:src/storage.c **** #ifndef DM42
 961:src/storage.c **** 
 962:src/storage.c **** #ifdef _WIN32
 963:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
 964:src/storage.c **** #else
 965:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
 966:src/storage.c **** #endif
 967:src/storage.c **** 
 968:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 969:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 970:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 971:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 972:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 973:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 974:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 975:src/storage.c **** 
 976:src/storage.c **** /*
 977:src/storage.c ****  *  Show (GUI) message
 978:src/storage.c ****  */
 979:src/storage.c **** #ifdef QTGUI
 980:src/storage.c **** extern void showMessage(const char* title, const char* message);
 981:src/storage.c **** #endif
 982:src/storage.c **** 
 983:src/storage.c **** 
 984:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 985:src/storage.c **** {
 986:src/storage.c **** 	va_list args;
 987:src/storage.c **** #ifndef QTGUI
 988:src/storage.c **** #ifdef WINGUI
 989:src/storage.c **** 	char msg[ 10000 ];
 990:src/storage.c **** 	va_start( args, format );
 991:src/storage.c **** 	vsprintf( msg, format, args );
 992:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 993:src/storage.c **** #else
 994:src/storage.c **** 	va_start( args, format );
 995:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 996:src/storage.c **** 	vfprintf( stderr, format, args );
 997:src/storage.c **** 	fputc( '\n', stderr );
 998:src/storage.c **** #endif
 999:src/storage.c **** #else
1000:src/storage.c **** 	char msg[ 10000 ];
1001:src/storage.c **** 	va_start( args, format );
1002:src/storage.c **** 	vsprintf( msg, format, args );
1003:src/storage.c **** 	showMessage(title, msg);
1004:src/storage.c **** #endif
1005:src/storage.c **** }
1006:src/storage.c **** 
1007:src/storage.c **** 
1008:src/storage.c **** 
1009:src/storage.c **** /*
1010:src/storage.c ****  *  Save/Load state to a file
1011:src/storage.c ****  */
1012:src/storage.c **** void save_statefile( const char *filename )
1013:src/storage.c **** {
ARM GAS  /tmp/ccqjxcgd.s 			page 35


1014:src/storage.c **** 	FILE *f;
1015:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1016:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
1017:src/storage.c **** 	}
1018:src/storage.c **** 	f = fopen( StateFile, "wb" );
1019:src/storage.c **** 	if ( f == NULL ) {
1020:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
1021:src/storage.c **** 		return;
1022:src/storage.c **** 	}
1023:src/storage.c **** 	process_cmdline_set_lift();
1024:src/storage.c **** 	init_state();
1025:src/storage.c **** 	checksum_all();
1026:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1027:src/storage.c **** 	fclose( f );
1028:src/storage.c **** #ifdef DEBUG
1029:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1030:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1031:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1032:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1033:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1034:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1035:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1036:src/storage.c **** #endif
1037:src/storage.c **** }
1038:src/storage.c **** 
1039:src/storage.c **** /*
1040:src/storage.c ****  *  Helper to expand filenames with startup directory
1041:src/storage.c ****  */
1042:src/storage.c **** #ifdef _WIN32
1043:src/storage.c **** #include <direct.h>
1044:src/storage.c **** #define getcwd _getcwd
1045:src/storage.c **** #define SEPARATOR '\\'
1046:src/storage.c **** #else
1047:src/storage.c **** #define SEPARATOR '/'
1048:src/storage.c **** #endif
1049:src/storage.c **** 
1050:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1051:src/storage.c **** {
1052:src/storage.c **** 	char *p;
1053:src/storage.c **** 	size_t l;
1054:src/storage.c **** 
1055:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1056:src/storage.c **** 		// Determine current directory on first call
1057:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1058:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
1059:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1060:src/storage.c **** 			*p = SEPARATOR;
1061:src/storage.c **** 			p[ 1 ] = '\0';
1062:src/storage.c **** 		}
1063:src/storage.c **** 	}
1064:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1065:src/storage.c **** 		// Absolute path left unchanged
1066:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1067:src/storage.c **** 	}
1068:src/storage.c **** 	else {
1069:src/storage.c **** 		// Prepend CurrentDir
1070:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
ARM GAS  /tmp/ccqjxcgd.s 			page 36


1071:src/storage.c **** 		l = strlen( buffer );
1072:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1073:src/storage.c **** 	}
1074:src/storage.c **** 	return buffer;
1075:src/storage.c **** }
1076:src/storage.c **** #endif //ifndef DM42
1077:src/storage.c **** 
1078:src/storage.c **** /*
1079:src/storage.c ****  *  Lots of file routines for DM42
1080:src/storage.c ****  */
1081:src/storage.c **** 
1082:src/storage.c **** #ifdef DM42
1083:src/storage.c **** 
1084:src/storage.c **** #define DISP_NEW 1
1085:src/storage.c **** #define OVERWRITE_CHECK 1
1086:src/storage.c **** #define NO_DISP_NEW 0
1087:src/storage.c **** #define NO_OVERWRITE_CHECK 0
1088:src/storage.c **** #define WRITE 1
1089:src/storage.c **** #define READ 2
1090:src/storage.c **** 
1091:src/storage.c **** void save_lib_file ( int i ) {
1092:src/storage.c ****   FRESULT f;
1093:src/storage.c ****   int fss;
1094:src/storage.c ****   int data = WRITE;
1095:src/storage.c ****   uint x=0;
1096:src/storage.c **** 
1097:src/storage.c ****   sys_disk_write_enable(1);
1098:src/storage.c ****   if (i == 0) {
1099:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1100:src/storage.c ****     if (f != FR_OK) {
1101:src/storage.c ****       f_close (FPT);
1102:src/storage.c ****       sys_disk_write_enable(0);
1103:src/storage.c ****       DispMsg = "Err slf1";
1104:src/storage.c ****       return;
1105:src/storage.c ****     }
1106:src/storage.c ****   }
1107:src/storage.c ****   else {
1108:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
1109:src/storage.c ****     if (fss != 1) return;
1110:src/storage.c ****   }
1111:src/storage.c ****   // File is now open with correct permissions
1112:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1113:src/storage.c ****   if ( f != FR_OK ) {
1114:src/storage.c ****     DispMsg = "Err slf2";
1115:src/storage.c ****   }
1116:src/storage.c ****   f_close( FPT );
1117:src/storage.c ****   sys_disk_write_enable(0);
1118:src/storage.c **** }
1119:src/storage.c **** 
1120:src/storage.c **** void load_lib_file ( int i ) {
1121:src/storage.c ****   FRESULT f;
1122:src/storage.c ****   int fss;
1123:src/storage.c ****   int data = READ;
1124:src/storage.c ****   uint x=0;
1125:src/storage.c **** 
1126:src/storage.c ****   if (i == 0) {
1127:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
ARM GAS  /tmp/ccqjxcgd.s 			page 37


1128:src/storage.c ****     if (f != FR_OK) {
1129:src/storage.c ****       f_close (FPT);
1130:src/storage.c ****       //      DispMsg = "No file?";
1131:src/storage.c ****       return;
1132:src/storage.c ****     }
1133:src/storage.c ****   }
1134:src/storage.c ****   else {
1135:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
1136:src/storage.c ****     if (fss != 1) return;
1137:src/storage.c ****   }
1138:src/storage.c ****   // File is now open with correct permissions
1139:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1140:src/storage.c ****   if ( f != FR_OK ) {
1141:src/storage.c ****     DispMsg = "Err slf2";
1142:src/storage.c ****   }
1143:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1144:src/storage.c ****     DispMsg = "File too big";
1145:src/storage.c ****   }
1146:src/storage.c ****   f_close( FPT );
1147:src/storage.c **** }
1148:src/storage.c **** 
1149:src/storage.c **** void save_ram_file ( int i ) {
1150:src/storage.c ****   FRESULT f;
1151:src/storage.c ****   int fss;
1152:src/storage.c ****   int data = WRITE;
1153:src/storage.c ****   uint x=0;
1154:src/storage.c **** 
1155:src/storage.c ****     process_cmdline_set_lift();
1156:src/storage.c ****     init_state();
1157:src/storage.c ****     checksum_all();
1158:src/storage.c **** 
1159:src/storage.c ****     sys_disk_write_enable(1);
1160:src/storage.c ****     if (i == 0) {
1161:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1162:src/storage.c ****       if (f != FR_OK) {
1163:src/storage.c **** 	f_close (FPT);
1164:src/storage.c **** 	sys_disk_write_enable(0);
1165:src/storage.c **** 	DispMsg = "Err srf1";
1166:src/storage.c **** 	return;
1167:src/storage.c ****       }
1168:src/storage.c ****     }
1169:src/storage.c ****     else {
1170:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
1171:src/storage.c ****       if (fss != 1) return;
1172:src/storage.c ****     }
1173:src/storage.c ****     // File is now open with correct permissions
1174:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1175:src/storage.c ****     if ( f != FR_OK ) {
1176:src/storage.c ****       DispMsg = "Err srf2";
1177:src/storage.c ****     }
1178:src/storage.c ****     f_close( FPT );
1179:src/storage.c ****     sys_disk_write_enable(0);
1180:src/storage.c **** }
1181:src/storage.c **** 
1182:src/storage.c **** int load_ram_file ( int i ) { // this will load backup files too!
1183:src/storage.c ****   FRESULT f;
1184:src/storage.c ****   int fss;
ARM GAS  /tmp/ccqjxcgd.s 			page 38


1185:src/storage.c ****   int data = READ;
1186:src/storage.c ****   uint x=0;
1187:src/storage.c ****   
1188:src/storage.c ****   if (i == 0) {
1189:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
1190:src/storage.c ****     if (f != FR_OK) {
1191:src/storage.c ****       f_close (FPT);
1192:src/storage.c ****       //      DispMsg = "No file?";
1193:src/storage.c ****       return 1;
1194:src/storage.c ****     }
1195:src/storage.c ****   }
1196:src/storage.c ****   else {
1197:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
1198:src/storage.c ****     if (fss != 1) return 1;
1199:src/storage.c ****   }
1200:src/storage.c ****   // File is now open with correct permissions
1201:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1202:src/storage.c ****   if ( f != FR_OK ) {
1203:src/storage.c ****     DispMsg = "Err lrf2";
1204:src/storage.c ****       f_close( FPT );
1205:src/storage.c ****       return 1;
1206:src/storage.c ****   }
1207:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1208:src/storage.c ****     DispMsg = "File too big";
1209:src/storage.c ****       f_close( FPT );
1210:src/storage.c ****       return 1;
1211:src/storage.c ****   }
1212:src/storage.c ****   f_close( FPT );
1213:src/storage.c ****   return 0;
1214:src/storage.c **** }
1215:src/storage.c **** 
1216:src/storage.c **** void load_backup_file ( int i ) { // goes into backup!
1217:src/storage.c ****   FRESULT f;
1218:src/storage.c ****   int fss;
1219:src/storage.c ****   int data = READ;
1220:src/storage.c ****   uint x=0;
1221:src/storage.c **** 
1222:src/storage.c ****   if (i == 0) {
1223:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
1224:src/storage.c ****     if (f != FR_OK) {
1225:src/storage.c ****       f_close (FPT);
1226:src/storage.c ****       return;
1227:src/storage.c ****     }
1228:src/storage.c ****   }
1229:src/storage.c ****   else {
1230:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
1231:src/storage.c ****     if (fss != 1) return;
1232:src/storage.c ****   }
1233:src/storage.c ****   // File is now open with correct permissions
1234:src/storage.c ****   f = f_read (FPT, (char *) &BackupFlash, sizeof (BackupFlash), &x);
1235:src/storage.c ****   if ( f != FR_OK ) {
1236:src/storage.c ****     DispMsg = "Err lbf2";
1237:src/storage.c ****   }
1238:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1239:src/storage.c ****     DispMsg = "File too big";
1240:src/storage.c ****   }
1241:src/storage.c ****   f_close( FPT );
ARM GAS  /tmp/ccqjxcgd.s 			page 39


1242:src/storage.c **** }
1243:src/storage.c **** 
1244:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
 786              		.loc 1 1244 78 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 1244 78 is_stmt 0 view .LVU225
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
1245:src/storage.c ****   FRESULT f;
1246:src/storage.c **** 
1247:src/storage.c ****   if (*(int*)data == WRITE) {
 795              		.loc 1 1247 7 view .LVU226
 796 0002 1368     		ldr	r3, [r2]
 797              		.loc 1 1247 6 view .LVU227
 798 0004 012B     		cmp	r3, #1
1244:src/storage.c ****   FRESULT f;
 799              		.loc 1 1244 78 view .LVU228
 800 0006 0146     		mov	r1, r0
 801              	.LVL85:
1245:src/storage.c ****   FRESULT f;
 802              		.loc 1 1245 3 is_stmt 1 view .LVU229
 803              		.loc 1 1247 3 view .LVU230
 804              		.loc 1 1247 6 is_stmt 0 view .LVU231
 805 0008 0ED0     		beq	.L79
1248:src/storage.c ****     // open file to write
1249:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1250:src/storage.c ****   }
1251:src/storage.c ****   else if (*(int*)data == READ) {
 806              		.loc 1 1251 8 is_stmt 1 view .LVU232
 807              		.loc 1 1251 11 is_stmt 0 view .LVU233
 808 000a 022B     		cmp	r3, #2
 809 000c 07D1     		bne	.L75
1252:src/storage.c ****     // open file to read
1253:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 810              		.loc 1 1253 5 is_stmt 1 view .LVU234
 811              		.loc 1 1253 9 is_stmt 0 view .LVU235
 812 000e 104A     		ldr	r2, .L81
 813              	.LVL86:
 814              		.loc 1 1253 9 view .LVU236
 815 0010 104B     		ldr	r3, .L81+4
 816 0012 5068     		ldr	r0, [r2, #4]
 817              	.LVL87:
 818              		.loc 1 1253 9 view .LVU237
 819 0014 0122     		movs	r2, #1
 820 0016 9847     		blx	r3
 821              	.LVL88:
1254:src/storage.c ****   }
1255:src/storage.c ****   else {
1256:src/storage.c ****     DispMsg = "data=3?";
1257:src/storage.c ****     return 3; // serious error!
1258:src/storage.c ****   }
1259:src/storage.c ****   if (f != FR_OK) {
 822              		.loc 1 1259 3 is_stmt 1 view .LVU238
ARM GAS  /tmp/ccqjxcgd.s 			page 40


 823              		.loc 1 1259 6 is_stmt 0 view .LVU239
 824 0018 68B9     		cbnz	r0, .L80
 825              	.L77:
1260:src/storage.c ****     f_close (FPT);
1261:src/storage.c ****     sys_disk_write_enable(0);
1262:src/storage.c ****     DispMsg = "File err";
1263:src/storage.c ****     return 2; // file can't be opened
1264:src/storage.c ****   }
1265:src/storage.c ****   else {
1266:src/storage.c ****     return 1; // file opened successfully
 826              		.loc 1 1266 12 view .LVU240
 827 001a 0120     		movs	r0, #1
 828              	.LVL89:
1267:src/storage.c ****   }
1268:src/storage.c **** }
 829              		.loc 1 1268 1 view .LVU241
 830 001c 08BD     		pop	{r3, pc}
 831              	.LVL90:
 832              	.L75:
1256:src/storage.c ****     return 3; // serious error!
 833              		.loc 1 1256 5 is_stmt 1 view .LVU242
1256:src/storage.c ****     return 3; // serious error!
 834              		.loc 1 1256 13 is_stmt 0 view .LVU243
 835 001e 0E4B     		ldr	r3, .L81+8
 836 0020 0E4A     		ldr	r2, .L81+12
 837              	.LVL91:
1256:src/storage.c ****     return 3; // serious error!
 838              		.loc 1 1256 13 view .LVU244
 839 0022 1A60     		str	r2, [r3]
1257:src/storage.c ****   }
 840              		.loc 1 1257 5 is_stmt 1 view .LVU245
1257:src/storage.c ****   }
 841              		.loc 1 1257 12 is_stmt 0 view .LVU246
 842 0024 0320     		movs	r0, #3
 843              	.LVL92:
 844              		.loc 1 1268 1 view .LVU247
 845 0026 08BD     		pop	{r3, pc}
 846              	.LVL93:
 847              	.L79:
1249:src/storage.c ****   }
 848              		.loc 1 1249 5 is_stmt 1 view .LVU248
1249:src/storage.c ****   }
 849              		.loc 1 1249 9 is_stmt 0 view .LVU249
 850 0028 094A     		ldr	r2, .L81
 851              	.LVL94:
1249:src/storage.c ****   }
 852              		.loc 1 1249 9 view .LVU250
 853 002a 0A4B     		ldr	r3, .L81+4
 854 002c 5068     		ldr	r0, [r2, #4]
 855              	.LVL95:
1249:src/storage.c ****   }
 856              		.loc 1 1249 9 view .LVU251
 857 002e 0B22     		movs	r2, #11
 858 0030 9847     		blx	r3
 859              	.LVL96:
1259:src/storage.c ****     f_close (FPT);
 860              		.loc 1 1259 3 is_stmt 1 view .LVU252
ARM GAS  /tmp/ccqjxcgd.s 			page 41


1259:src/storage.c ****     f_close (FPT);
 861              		.loc 1 1259 6 is_stmt 0 view .LVU253
 862 0032 0028     		cmp	r0, #0
 863 0034 F1D0     		beq	.L77
 864              	.L80:
 865              	.LBB52:
 866              	.LBI52:
1244:src/storage.c ****   FRESULT f;
 867              		.loc 1 1244 5 is_stmt 1 view .LVU254
 868              	.LVL97:
 869              	.LBB53:
1260:src/storage.c ****     sys_disk_write_enable(0);
 870              		.loc 1 1260 5 view .LVU255
 871 0036 064A     		ldr	r2, .L81
 872 0038 094B     		ldr	r3, .L81+16
 873 003a 5068     		ldr	r0, [r2, #4]
 874              	.LVL98:
1260:src/storage.c ****     sys_disk_write_enable(0);
 875              		.loc 1 1260 5 is_stmt 0 view .LVU256
 876 003c 9847     		blx	r3
 877              	.LVL99:
1261:src/storage.c ****     DispMsg = "File err";
 878              		.loc 1 1261 5 is_stmt 1 view .LVU257
 879 003e 094B     		ldr	r3, .L81+20
 880 0040 0020     		movs	r0, #0
 881 0042 9847     		blx	r3
 882              	.LVL100:
1262:src/storage.c ****     return 2; // file can't be opened
 883              		.loc 1 1262 5 view .LVU258
1262:src/storage.c ****     return 2; // file can't be opened
 884              		.loc 1 1262 13 is_stmt 0 view .LVU259
 885 0044 044B     		ldr	r3, .L81+8
 886 0046 084A     		ldr	r2, .L81+24
 887 0048 1A60     		str	r2, [r3]
1263:src/storage.c ****   }
 888              		.loc 1 1263 5 is_stmt 1 view .LVU260
 889              	.LVL101:
1262:src/storage.c ****     return 2; // file can't be opened
 890              		.loc 1 1262 13 is_stmt 0 view .LVU261
 891 004a 0220     		movs	r0, #2
 892              	.LBE53:
 893              	.LBE52:
 894              		.loc 1 1268 1 view .LVU262
 895 004c 08BD     		pop	{r3, pc}
 896              	.L82:
 897 004e 00BF     		.align	2
 898              	.L81:
 899 0050 00200010 		.word	268443648
 900 0054 35040008 		.word	134218805
 901 0058 00000000 		.word	DispMsg
 902 005c 00000000 		.word	.LC3
 903 0060 39040008 		.word	134218809
 904 0064 E1030008 		.word	134218721
 905 0068 08000000 		.word	.LC4
 906              		.cfi_endproc
 907              	.LFE38:
 909              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccqjxcgd.s 			page 42


 910              		.align	2
 911              	.LC5:
 912 0000 63616C6C 		.ascii	"calloc failed\000"
 912      6F632066 
 912      61696C65 
 912      6400
 913              		.section	.text.init_mem,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	init_mem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	init_mem:
 923              	.LFB3:
 106:src/storage.c ****   char *v;
 924              		.loc 1 106 18 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 107:src/storage.c **** 
 928              		.loc 1 107 3 view .LVU264
 109:src/storage.c ****   if (v == NULL) {
 929              		.loc 1 109 3 view .LVU265
 106:src/storage.c ****   char *v;
 930              		.loc 1 106 18 is_stmt 0 view .LVU266
 931 0000 08B5     		push	{r3, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
 109:src/storage.c ****   if (v == NULL) {
 935              		.loc 1 109 16 view .LVU267
 936 0002 0121     		movs	r1, #1
 937 0004 4FF4C040 		mov	r0, #24576
 938 0008 FFF7FEFF 		bl	calloc
 939              	.LVL102:
 110:src/storage.c ****     perror("calloc failed");
 940              		.loc 1 110 3 is_stmt 1 view .LVU268
 110:src/storage.c ****     perror("calloc failed");
 941              		.loc 1 110 6 is_stmt 0 view .LVU269
 942 000c 50B1     		cbz	r0, .L86
 114:src/storage.c ****   v += RAM_SIZE;
 943              		.loc 1 114 3 is_stmt 1 view .LVU270
 114:src/storage.c ****   v += RAM_SIZE;
 944              		.loc 1 114 12 is_stmt 0 view .LVU271
 945 000e 0849     		ldr	r1, .L87
 116:src/storage.c ****   v += RAM_SIZE;
 946              		.loc 1 116 14 view .LVU272
 947 0010 084A     		ldr	r2, .L87+4
 118:src/storage.c **** }
 948              		.loc 1 118 15 view .LVU273
 949 0012 094B     		ldr	r3, .L87+8
 114:src/storage.c ****   v += RAM_SIZE;
 950              		.loc 1 114 12 view .LVU274
 951 0014 0860     		str	r0, [r1]
 115:src/storage.c ****   backup_ram = (TPersistentRam *) v;
ARM GAS  /tmp/ccqjxcgd.s 			page 43


 952              		.loc 1 115 3 is_stmt 1 view .LVU275
 953              	.LVL103:
 116:src/storage.c ****   v += RAM_SIZE;
 954              		.loc 1 116 3 view .LVU276
 115:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 955              		.loc 1 115 5 is_stmt 0 view .LVU277
 956 0016 00F58051 		add	r1, r0, #4096
 957              	.LVL104:
 117:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 958              		.loc 1 117 5 view .LVU278
 959 001a 00F50050 		add	r0, r0, #8192
 116:src/storage.c ****   v += RAM_SIZE;
 960              		.loc 1 116 14 view .LVU279
 961 001e 1160     		str	r1, [r2]
 117:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 962              		.loc 1 117 3 is_stmt 1 view .LVU280
 963              	.LVL105:
 118:src/storage.c **** }
 964              		.loc 1 118 3 view .LVU281
 118:src/storage.c **** }
 965              		.loc 1 118 15 is_stmt 0 view .LVU282
 966 0020 1860     		str	r0, [r3]
 119:src/storage.c **** 
 967              		.loc 1 119 1 view .LVU283
 968 0022 08BD     		pop	{r3, pc}
 969              	.LVL106:
 970              	.L86:
 111:src/storage.c ****     return;
 971              		.loc 1 111 5 is_stmt 1 view .LVU284
 119:src/storage.c **** 
 972              		.loc 1 119 1 is_stmt 0 view .LVU285
 973 0024 BDE80840 		pop	{r3, lr}
 974              		.cfi_restore 14
 975              		.cfi_restore 3
 976              		.cfi_def_cfa_offset 0
 111:src/storage.c ****     return;
 977              		.loc 1 111 5 view .LVU286
 978 0028 0448     		ldr	r0, .L87+12
 979              	.LVL107:
 111:src/storage.c ****     return;
 980              		.loc 1 111 5 view .LVU287
 981 002a FFF7FEBF 		b	perror
 982              	.LVL108:
 983              	.L88:
 984 002e 00BF     		.align	2
 985              	.L87:
 986 0030 00000000 		.word	main_ram
 987 0034 00000000 		.word	backup_ram
 988 0038 00000000 		.word	library_ram
 989 003c 00000000 		.word	.LC5
 990              		.cfi_endproc
 991              	.LFE3:
 993              		.section	.text.crc16,"ax",%progbits
 994              		.align	1
 995              		.p2align 2,,3
 996              		.global	crc16
 997              		.syntax unified
ARM GAS  /tmp/ccqjxcgd.s 			page 44


 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	crc16:
 1003              	.LVL109:
 1004              	.LFB4:
 164:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 1005              		.loc 1 164 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1010              		.loc 1 165 2 view .LVU289
 166:src/storage.c **** 	unsigned int i;
 1011              		.loc 1 166 2 view .LVU290
 167:src/storage.c **** 
 1012              		.loc 1 167 2 view .LVU291
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1013              		.loc 1 169 2 view .LVU292
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1014              		.loc 1 169 15 view .LVU293
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1015              		.loc 1 169 2 is_stmt 0 view .LVU294
 1016 0000 B1B1     		cbz	r1, .L92
 1017 0002 0144     		add	r1, r1, r0
 1018              	.LVL110:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1019              		.loc 1 165 21 view .LVU295
 1020 0004 45F6A523 		movw	r3, #23205
 1021              	.LVL111:
 1022              	.L91:
 170:src/storage.c **** 		crc ^= *d++;
 1023              		.loc 1 170 3 is_stmt 1 discriminator 3 view .LVU296
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1024              		.loc 1 171 10 is_stmt 0 discriminator 3 view .LVU297
 1025 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1026              	.LVL112:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1027              		.loc 1 171 10 discriminator 3 view .LVU298
 1028 000c 5BBA     		rev16	r3, r3
 1029              	.LVL113:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1030              		.loc 1 171 10 discriminator 3 view .LVU299
 1031 000e 9BB2     		uxth	r3, r3
 1032              	.LVL114:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1033              		.loc 1 171 3 is_stmt 1 discriminator 3 view .LVU300
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1034              		.loc 1 171 7 is_stmt 0 discriminator 3 view .LVU301
 1035 0010 5340     		eors	r3, r3, r2
 1036              	.LVL115:
 172:src/storage.c **** 		crc ^= crc << 12;
 1037              		.loc 1 172 3 is_stmt 1 discriminator 3 view .LVU302
 172:src/storage.c **** 		crc ^= crc << 12;
 1038              		.loc 1 172 7 is_stmt 0 discriminator 3 view .LVU303
 1039 0012 C3F30312 		ubfx	r2, r3, #4, #4
ARM GAS  /tmp/ccqjxcgd.s 			page 45


 1040 0016 5340     		eors	r3, r3, r2
 1041              	.LVL116:
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1042              		.loc 1 173 3 is_stmt 1 discriminator 3 view .LVU304
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1043              		.loc 1 173 7 is_stmt 0 discriminator 3 view .LVU305
 1044 0018 83EA0332 		eor	r2, r3, r3, lsl #12
 1045              	.LVL117:
 174:src/storage.c **** 	}
 1046              		.loc 1 174 3 is_stmt 1 discriminator 3 view .LVU306
 174:src/storage.c **** 	}
 1047              		.loc 1 174 25 is_stmt 0 discriminator 3 view .LVU307
 1048 001c 5301     		lsls	r3, r2, #5
 1049 001e 03F4FF53 		and	r3, r3, #8160
 174:src/storage.c **** 	}
 1050              		.loc 1 174 7 discriminator 3 view .LVU308
 1051 0022 92B2     		uxth	r2, r2
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1052              		.loc 1 169 2 discriminator 3 view .LVU309
 1053 0024 8142     		cmp	r1, r0
 174:src/storage.c **** 	}
 1054              		.loc 1 174 7 discriminator 3 view .LVU310
 1055 0026 83EA0203 		eor	r3, r3, r2
 1056              	.LVL118:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1057              		.loc 1 169 27 is_stmt 1 discriminator 3 view .LVU311
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1058              		.loc 1 169 15 discriminator 3 view .LVU312
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1059              		.loc 1 169 2 is_stmt 0 discriminator 3 view .LVU313
 1060 002a EDD1     		bne	.L91
 176:src/storage.c **** }
 1061              		.loc 1 176 2 is_stmt 1 view .LVU314
 177:src/storage.c **** 
 1062              		.loc 1 177 1 is_stmt 0 view .LVU315
 1063 002c 1846     		mov	r0, r3
 1064              	.LVL119:
 177:src/storage.c **** 
 1065              		.loc 1 177 1 view .LVU316
 1066 002e 7047     		bx	lr
 1067              	.LVL120:
 1068              	.L92:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1069              		.loc 1 165 21 view .LVU317
 1070 0030 45F6A523 		movw	r3, #23205
 176:src/storage.c **** }
 1071              		.loc 1 176 2 is_stmt 1 view .LVU318
 177:src/storage.c **** 
 1072              		.loc 1 177 1 is_stmt 0 view .LVU319
 1073 0034 1846     		mov	r0, r3
 1074              	.LVL121:
 177:src/storage.c **** 
 1075              		.loc 1 177 1 view .LVU320
 1076 0036 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE4:
 1080              		.section	.text.checksum_program,"ax",%progbits
ARM GAS  /tmp/ccqjxcgd.s 			page 46


 1081              		.align	1
 1082              		.p2align 2,,3
 1083              		.global	checksum_program
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	checksum_program:
 1090              	.LFB6:
 200:src/storage.c **** 	update_program_bounds( 1 );
 1091              		.loc 1 200 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 201:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1095              		.loc 1 201 2 view .LVU322
 200:src/storage.c **** 	update_program_bounds( 1 );
 1096              		.loc 1 200 1 is_stmt 0 view .LVU323
 1097 0000 08B5     		push	{r3, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 201:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1101              		.loc 1 201 2 view .LVU324
 1102 0002 0120     		movs	r0, #1
 1103 0004 FFF7FEFF 		bl	update_program_bounds
 1104              	.LVL122:
 202:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1105              		.loc 1 202 2 is_stmt 1 view .LVU325
 202:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1106              		.loc 1 202 16 is_stmt 0 view .LVU326
 1107 0008 FFF7FEFF 		bl	get_current_prog
 1108              	.LVL123:
 202:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1109              		.loc 1 202 36 view .LVU327
 1110 000c 124B     		ldr	r3, .L100
 1111 000e 1B68     		ldr	r3, [r3]
 1112 0010 B3F8EE1F 		ldrh	r1, [r3, #4078]
 202:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1113              		.loc 1 202 46 view .LVU328
 1114 0014 B3F8EC3F 		ldrh	r3, [r3, #4076]
 202:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1115              		.loc 1 202 44 view .LVU329
 1116 0018 C91A     		subs	r1, r1, r3
 1117              	.LVL124:
 1118              	.LBB54:
 1119              	.LBI54:
 163:src/storage.c **** {
 1120              		.loc 1 163 20 is_stmt 1 view .LVU330
 1121              	.LBB55:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1122              		.loc 1 165 2 view .LVU331
 166:src/storage.c **** 	unsigned int i;
 1123              		.loc 1 166 2 view .LVU332
 167:src/storage.c **** 
 1124              		.loc 1 167 2 view .LVU333
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
ARM GAS  /tmp/ccqjxcgd.s 			page 47


 1125              		.loc 1 169 2 view .LVU334
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1126              		.loc 1 169 15 view .LVU335
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1127              		.loc 1 169 2 is_stmt 0 view .LVU336
 1128 001a 4B1C     		adds	r3, r1, #1
 1129              	.LVL125:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1130              		.loc 1 169 2 view .LVU337
 1131 001c 17D0     		beq	.L97
 1132 001e 0131     		adds	r1, r1, #1
 1133 0020 0144     		add	r1, r1, r0
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1134              		.loc 1 165 21 view .LVU338
 1135 0022 45F6A523 		movw	r3, #23205
 1136              	.LVL126:
 1137              	.L96:
 170:src/storage.c **** 		crc ^= *d++;
 1138              		.loc 1 170 3 is_stmt 1 view .LVU339
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 171 10 is_stmt 0 view .LVU340
 1140 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1141              	.LVL127:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1142              		.loc 1 171 10 view .LVU341
 1143 002a 5BBA     		rev16	r3, r3
 1144              	.LVL128:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1145              		.loc 1 171 10 view .LVU342
 1146 002c 9BB2     		uxth	r3, r3
 1147              	.LVL129:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1148              		.loc 1 171 3 is_stmt 1 view .LVU343
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1149              		.loc 1 171 7 is_stmt 0 view .LVU344
 1150 002e 5340     		eors	r3, r3, r2
 1151              	.LVL130:
 172:src/storage.c **** 		crc ^= crc << 12;
 1152              		.loc 1 172 3 is_stmt 1 view .LVU345
 172:src/storage.c **** 		crc ^= crc << 12;
 1153              		.loc 1 172 7 is_stmt 0 view .LVU346
 1154 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1155 0034 5340     		eors	r3, r3, r2
 1156              	.LVL131:
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1157              		.loc 1 173 3 is_stmt 1 view .LVU347
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1158              		.loc 1 173 7 is_stmt 0 view .LVU348
 1159 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1160              	.LVL132:
 174:src/storage.c **** 	}
 1161              		.loc 1 174 3 is_stmt 1 view .LVU349
 174:src/storage.c **** 	}
 1162              		.loc 1 174 25 is_stmt 0 view .LVU350
 1163 003a 5A01     		lsls	r2, r3, #5
 1164 003c 02F4FF52 		and	r2, r2, #8160
 174:src/storage.c **** 	}
ARM GAS  /tmp/ccqjxcgd.s 			page 48


 1165              		.loc 1 174 7 view .LVU351
 1166 0040 9BB2     		uxth	r3, r3
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1167              		.loc 1 169 2 view .LVU352
 1168 0042 8142     		cmp	r1, r0
 174:src/storage.c **** 	}
 1169              		.loc 1 174 7 view .LVU353
 1170 0044 83EA0203 		eor	r3, r3, r2
 1171              	.LVL133:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1172              		.loc 1 169 27 is_stmt 1 view .LVU354
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1173              		.loc 1 169 15 view .LVU355
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1174              		.loc 1 169 2 is_stmt 0 view .LVU356
 1175 0048 EDD1     		bne	.L96
 176:src/storage.c **** }
 1176              		.loc 1 176 2 is_stmt 1 view .LVU357
 1177              	.LVL134:
 176:src/storage.c **** }
 1178              		.loc 1 176 2 is_stmt 0 view .LVU358
 1179              	.LBE55:
 1180              	.LBE54:
 204:src/storage.c **** 
 1181              		.loc 1 204 1 view .LVU359
 1182 004a 1846     		mov	r0, r3
 1183 004c 08BD     		pop	{r3, pc}
 1184              	.LVL135:
 1185              	.L97:
 1186              	.LBB57:
 1187              	.LBB56:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1188              		.loc 1 165 21 view .LVU360
 1189 004e 45F6A523 		movw	r3, #23205
 1190              	.LVL136:
 176:src/storage.c **** }
 1191              		.loc 1 176 2 is_stmt 1 view .LVU361
 176:src/storage.c **** }
 1192              		.loc 1 176 2 is_stmt 0 view .LVU362
 1193              	.LBE56:
 1194              	.LBE57:
 204:src/storage.c **** 
 1195              		.loc 1 204 1 view .LVU363
 1196 0052 1846     		mov	r0, r3
 1197 0054 08BD     		pop	{r3, pc}
 1198              	.L101:
 1199 0056 00BF     		.align	2
 1200              	.L100:
 1201 0058 00000000 		.word	main_ram
 1202              		.cfi_endproc
 1203              	.LFE6:
 1205              		.section	.text.checksum_ram,"ax",%progbits
 1206              		.align	1
 1207              		.p2align 2,,3
 1208              		.global	checksum_ram
 1209              		.syntax unified
 1210              		.thumb
ARM GAS  /tmp/ccqjxcgd.s 			page 49


 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	checksum_ram:
 1215              	.LFB7:
 212:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1216              		.loc 1 212 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 213:src/storage.c **** 			      Crc, &Crc );
 1221              		.loc 1 213 2 view .LVU365
 213:src/storage.c **** 			      Crc, &Crc );
 1222              		.loc 1 213 9 is_stmt 0 view .LVU366
 1223 0000 044B     		ldr	r3, .L103
 1224 0002 1868     		ldr	r0, [r3]
 1225 0004 40F6FE71 		movw	r1, #4094
 1226 0008 B0F8FE2F 		ldrh	r2, [r0, #4094]
 1227 000c 4318     		adds	r3, r0, r1
 1228 000e FFF7FEBF 		b	test_checksum
 1229              	.LVL137:
 1230              	.L104:
 1231 0012 00BF     		.align	2
 1232              	.L103:
 1233 0014 00000000 		.word	main_ram
 1234              		.cfi_endproc
 1235              	.LFE7:
 1237              		.section	.text.checksum_backup,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	checksum_backup
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	checksum_backup:
 1247              	.LFB8:
 223:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1248              		.loc 1 223 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 224:src/storage.c **** 		              BackupFlash._crc, NULL );
 1253              		.loc 1 224 2 view .LVU368
 224:src/storage.c **** 		              BackupFlash._crc, NULL );
 1254              		.loc 1 224 9 is_stmt 0 view .LVU369
 1255 0000 144B     		ldr	r3, .L111
 1256 0002 1968     		ldr	r1, [r3]
 1257 0004 B1F8FE0F 		ldrh	r0, [r1, #4094]
 1258              	.LVL138:
 1259              	.LBB58:
 1260              	.LBI58:
 184:src/storage.c **** {
 1261              		.loc 1 184 12 is_stmt 1 view .LVU370
 1262              	.LBB59:
 186:src/storage.c **** 	crc = crc16( data, length );
ARM GAS  /tmp/ccqjxcgd.s 			page 50


 1263              		.loc 1 186 2 view .LVU371
 187:src/storage.c **** 	
 1264              		.loc 1 187 2 view .LVU372
 1265              	.LBB60:
 1266              	.LBI60:
 163:src/storage.c **** {
 1267              		.loc 1 163 20 view .LVU373
 1268              	.LBB61:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1269              		.loc 1 165 2 view .LVU374
 166:src/storage.c **** 	unsigned int i;
 1270              		.loc 1 166 2 view .LVU375
 167:src/storage.c **** 
 1271              		.loc 1 167 2 view .LVU376
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1272              		.loc 1 169 2 view .LVU377
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1273              		.loc 1 169 15 view .LVU378
 1274              	.LBE61:
 1275              	.LBE60:
 1276              	.LBE59:
 1277              	.LBE58:
 223:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1278              		.loc 1 223 1 is_stmt 0 view .LVU379
 1279 0008 10B4     		push	{r4}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 4, -4
 1282              	.LBB66:
 1283              	.LBB64:
 1284              	.LBB63:
 1285              	.LBB62:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1286              		.loc 1 165 21 view .LVU380
 1287 000a 45F6A523 		movw	r3, #23205
 1288 000e 01F6FE74 		addw	r4, r1, #4094
 1289              	.LVL139:
 1290              	.L106:
 170:src/storage.c **** 		crc ^= *d++;
 1291              		.loc 1 170 3 is_stmt 1 view .LVU381
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1292              		.loc 1 171 10 is_stmt 0 view .LVU382
 1293 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1294              	.LVL140:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1295              		.loc 1 171 10 view .LVU383
 1296 0016 5BBA     		rev16	r3, r3
 1297              	.LVL141:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1298              		.loc 1 171 10 view .LVU384
 1299 0018 9BB2     		uxth	r3, r3
 1300              	.LVL142:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1301              		.loc 1 171 3 is_stmt 1 view .LVU385
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1302              		.loc 1 171 7 is_stmt 0 view .LVU386
 1303 001a 5340     		eors	r3, r3, r2
 1304              	.LVL143:
ARM GAS  /tmp/ccqjxcgd.s 			page 51


 172:src/storage.c **** 		crc ^= crc << 12;
 1305              		.loc 1 172 3 is_stmt 1 view .LVU387
 172:src/storage.c **** 		crc ^= crc << 12;
 1306              		.loc 1 172 7 is_stmt 0 view .LVU388
 1307 001c C3F30312 		ubfx	r2, r3, #4, #4
 1308 0020 5340     		eors	r3, r3, r2
 1309              	.LVL144:
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1310              		.loc 1 173 3 is_stmt 1 view .LVU389
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1311              		.loc 1 173 7 is_stmt 0 view .LVU390
 1312 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1313              	.LVL145:
 174:src/storage.c **** 	}
 1314              		.loc 1 174 3 is_stmt 1 view .LVU391
 174:src/storage.c **** 	}
 1315              		.loc 1 174 25 is_stmt 0 view .LVU392
 1316 0026 5A01     		lsls	r2, r3, #5
 1317 0028 02F4FF52 		and	r2, r2, #8160
 174:src/storage.c **** 	}
 1318              		.loc 1 174 7 view .LVU393
 1319 002c 9BB2     		uxth	r3, r3
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1320              		.loc 1 169 2 view .LVU394
 1321 002e 8C42     		cmp	r4, r1
 174:src/storage.c **** 	}
 1322              		.loc 1 174 7 view .LVU395
 1323 0030 83EA0203 		eor	r3, r3, r2
 1324              	.LVL146:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1325              		.loc 1 169 27 is_stmt 1 view .LVU396
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1326              		.loc 1 169 15 view .LVU397
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1327              		.loc 1 169 2 is_stmt 0 view .LVU398
 1328 0034 EDD1     		bne	.L106
 176:src/storage.c **** }
 1329              		.loc 1 176 2 is_stmt 1 view .LVU399
 1330              	.LVL147:
 176:src/storage.c **** }
 1331              		.loc 1 176 2 is_stmt 0 view .LVU400
 1332              	.LBE62:
 1333              	.LBE63:
 189:src/storage.c **** 		*pcrc = crc;
 1334              		.loc 1 189 2 is_stmt 1 view .LVU401
 192:src/storage.c **** }
 1335              		.loc 1 192 2 view .LVU402
 192:src/storage.c **** }
 1336              		.loc 1 192 23 is_stmt 0 view .LVU403
 1337 0036 9842     		cmp	r0, r3
 1338 0038 07D0     		beq	.L108
 1339 003a 4AF23C53 		movw	r3, #42300
 1340              	.LVL148:
 192:src/storage.c **** }
 1341              		.loc 1 192 23 view .LVU404
 1342 003e C01A     		subs	r0, r0, r3
 1343              	.LVL149:
ARM GAS  /tmp/ccqjxcgd.s 			page 52


 192:src/storage.c **** }
 1344              		.loc 1 192 23 view .LVU405
 1345 0040 18BF     		it	ne
 1346 0042 0120     		movne	r0, #1
 1347              	.LVL150:
 192:src/storage.c **** }
 1348              		.loc 1 192 23 view .LVU406
 1349              	.LBE64:
 1350              	.LBE66:
 226:src/storage.c **** 
 1351              		.loc 1 226 1 view .LVU407
 1352 0044 5DF8044B 		ldr	r4, [sp], #4
 1353              		.cfi_remember_state
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL151:
 226:src/storage.c **** 
 1357              		.loc 1 226 1 view .LVU408
 1358 0048 7047     		bx	lr
 1359              	.LVL152:
 1360              	.L108:
 1361              		.cfi_restore_state
 1362              	.LBB67:
 1363              	.LBB65:
 192:src/storage.c **** }
 1364              		.loc 1 192 23 view .LVU409
 1365 004a 0020     		movs	r0, #0
 1366              	.LVL153:
 192:src/storage.c **** }
 1367              		.loc 1 192 23 view .LVU410
 1368              	.LBE65:
 1369              	.LBE67:
 226:src/storage.c **** 
 1370              		.loc 1 226 1 view .LVU411
 1371 004c 5DF8044B 		ldr	r4, [sp], #4
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374 0050 7047     		bx	lr
 1375              	.L112:
 1376 0052 00BF     		.align	2
 1377              	.L111:
 1378 0054 00000000 		.word	backup_ram
 1379              		.cfi_endproc
 1380              	.LFE8:
 1382              		.section	.text.clpall,"ax",%progbits
 1383              		.align	1
 1384              		.p2align 2,,3
 1385              		.global	clpall
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	clpall:
 1392              	.LFB11:
 255:src/storage.c **** 	clrretstk_pc();
 1393              		.loc 1 255 1 is_stmt 1 view -0
 1394              		.cfi_startproc
ARM GAS  /tmp/ccqjxcgd.s 			page 53


 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 256:src/storage.c **** 	stoend();
 1397              		.loc 1 256 2 view .LVU413
 255:src/storage.c **** 	clrretstk_pc();
 1398              		.loc 1 255 1 is_stmt 0 view .LVU414
 1399 0000 08B5     		push	{r3, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 3, -8
 1402              		.cfi_offset 14, -4
 256:src/storage.c **** 	stoend();
 1403              		.loc 1 256 2 view .LVU415
 1404 0002 FFF7FEFF 		bl	clrretstk_pc
 1405              	.LVL154:
 257:src/storage.c **** }
 1406              		.loc 1 257 2 is_stmt 1 view .LVU416
 1407              	.LBB68:
 1408              	.LBI68:
 244:src/storage.c **** {
 1409              		.loc 1 244 13 view .LVU417
 1410              	.LBB69:
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1411              		.loc 1 246 2 view .LVU418
 1412 0006 044B     		ldr	r3, .L115
 1413 0008 1B68     		ldr	r3, [r3]
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1414              		.loc 1 246 11 is_stmt 0 view .LVU419
 1415 000a 0121     		movs	r1, #1
 247:src/storage.c **** }
 1416              		.loc 1 247 12 view .LVU420
 1417 000c 4FF49D72 		mov	r2, #314
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1418              		.loc 1 246 11 view .LVU421
 1419 0010 5980     		strh	r1, [r3, #2]	@ movhi
 247:src/storage.c **** }
 1420              		.loc 1 247 2 is_stmt 1 view .LVU422
 247:src/storage.c **** }
 1421              		.loc 1 247 12 is_stmt 0 view .LVU423
 1422 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1423              	.LBE69:
 1424              	.LBE68:
 258:src/storage.c **** 
 1425              		.loc 1 258 1 view .LVU424
 1426 0014 08BD     		pop	{r3, pc}
 1427              	.L116:
 1428 0016 00BF     		.align	2
 1429              	.L115:
 1430 0018 00000000 		.word	main_ram
 1431              		.cfi_endproc
 1432              	.LFE11:
 1434              		.section	.text.clrall,"ax",%progbits
 1435              		.align	1
 1436              		.p2align 2,,3
 1437              		.global	clrall
 1438              		.syntax unified
 1439              		.thumb
 1440              		.thumb_func
ARM GAS  /tmp/ccqjxcgd.s 			page 54


 1441              		.fpu fpv4-sp-d16
 1443              	clrall:
 1444              	.LFB14:
 308:src/storage.c **** 	NumRegs = TOPREALREG;
 1445              		.loc 1 308 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 309:src/storage.c **** 	xeq_init_contexts();
 1449              		.loc 1 309 2 view .LVU426
 308:src/storage.c **** 	NumRegs = TOPREALREG;
 1450              		.loc 1 308 1 is_stmt 0 view .LVU427
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 309:src/storage.c **** 	xeq_init_contexts();
 1455              		.loc 1 309 10 view .LVU428
 1456 0002 124C     		ldr	r4, .L119
 1457 0004 2368     		ldr	r3, [r4]
 1458 0006 6422     		movs	r2, #100
 1459 0008 83F8CF2F 		strb	r2, [r3, #4047]
 310:src/storage.c **** 	clrreg( OP_CLREG );
 1460              		.loc 1 310 2 is_stmt 1 view .LVU429
 1461 000c FFF7FEFF 		bl	xeq_init_contexts
 1462              	.LVL155:
 311:src/storage.c **** 	clrstk( OP_CLSTK );
 1463              		.loc 1 311 2 view .LVU430
 1464 0010 3E20     		movs	r0, #62
 1465 0012 FFF7FEFF 		bl	clrreg
 1466              	.LVL156:
 312:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1467              		.loc 1 312 2 view .LVU431
 1468 0016 4020     		movs	r0, #64
 1469 0018 FFF7FEFF 		bl	clrstk
 1470              	.LVL157:
 313:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1471              		.loc 1 313 2 view .LVU432
 1472 001c 7420     		movs	r0, #116
 1473 001e FFF7FEFF 		bl	clralpha
 1474              	.LVL158:
 314:src/storage.c **** 	clpall();
 1475              		.loc 1 314 2 view .LVU433
 1476 0022 4520     		movs	r0, #69
 1477 0024 FFF7FEFF 		bl	clrflags
 1478              	.LVL159:
 315:src/storage.c **** 
 1479              		.loc 1 315 2 view .LVU434
 1480              	.LBB70:
 1481              	.LBI70:
 254:src/storage.c **** {
 1482              		.loc 1 254 6 view .LVU435
 1483              	.LBB71:
 256:src/storage.c **** 	stoend();
 1484              		.loc 1 256 2 view .LVU436
 1485 0028 FFF7FEFF 		bl	clrretstk_pc
 1486              	.LVL160:
ARM GAS  /tmp/ccqjxcgd.s 			page 55


 257:src/storage.c **** }
 1487              		.loc 1 257 2 view .LVU437
 1488              	.LBB72:
 1489              	.LBI72:
 244:src/storage.c **** {
 1490              		.loc 1 244 13 view .LVU438
 1491              	.LBB73:
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1492              		.loc 1 246 2 view .LVU439
 1493 002c 2368     		ldr	r3, [r4]
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1494              		.loc 1 246 11 is_stmt 0 view .LVU440
 1495 002e 0121     		movs	r1, #1
 247:src/storage.c **** }
 1496              		.loc 1 247 12 view .LVU441
 1497 0030 4FF49D72 		mov	r2, #314
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1498              		.loc 1 246 11 view .LVU442
 1499 0034 5980     		strh	r1, [r3, #2]	@ movhi
 247:src/storage.c **** }
 1500              		.loc 1 247 2 is_stmt 1 view .LVU443
 247:src/storage.c **** }
 1501              		.loc 1 247 12 is_stmt 0 view .LVU444
 1502 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.LBE73:
 1504              	.LBE72:
 1505              	.LBE71:
 1506              	.LBE70:
 317:src/storage.c **** 	State2.test = TST_NONE;
 1507              		.loc 1 317 2 is_stmt 1 view .LVU445
 1508 0038 FFF7FEFF 		bl	reset_shift
 1509              	.LVL161:
 318:src/storage.c **** 
 1510              		.loc 1 318 2 view .LVU446
 318:src/storage.c **** 
 1511              		.loc 1 318 14 is_stmt 0 view .LVU447
 1512 003c 0449     		ldr	r1, .L119+4
 320:src/storage.c **** }
 1513              		.loc 1 320 10 view .LVU448
 1514 003e 054B     		ldr	r3, .L119+8
 318:src/storage.c **** 
 1515              		.loc 1 318 14 view .LVU449
 1516 0040 0720     		movs	r0, #7
 320:src/storage.c **** }
 1517              		.loc 1 320 10 view .LVU450
 1518 0042 0022     		movs	r2, #0
 318:src/storage.c **** 
 1519              		.loc 1 318 14 view .LVU451
 1520 0044 C873     		strb	r0, [r1, #15]
 320:src/storage.c **** }
 1521              		.loc 1 320 2 is_stmt 1 view .LVU452
 320:src/storage.c **** }
 1522              		.loc 1 320 10 is_stmt 0 view .LVU453
 1523 0046 1A60     		str	r2, [r3]
 321:src/storage.c **** 
 1524              		.loc 1 321 1 view .LVU454
 1525 0048 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccqjxcgd.s 			page 56


 1526              	.L120:
 1527 004a 00BF     		.align	2
 1528              	.L119:
 1529 004c 00000000 		.word	main_ram
 1530 0050 00000000 		.word	StateWhileOn
 1531 0054 00000000 		.word	DispMsg
 1532              		.cfi_endproc
 1533              	.LFE14:
 1535              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1536              		.align	2
 1537              	.LC6:
 1538 0000 45726173 		.ascii	"Erased\000"
 1538      656400
 1539              		.section	.text.reset,"ax",%progbits
 1540              		.align	1
 1541              		.p2align 2,,3
 1542              		.global	reset
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	reset:
 1549              	.LFB15:
 328:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1550              		.loc 1 328 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 329:src/storage.c **** 	clrall();
 1554              		.loc 1 329 3 view .LVU456
 328:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1555              		.loc 1 328 1 is_stmt 0 view .LVU457
 1556 0000 10B5     		push	{r4, lr}
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 4, -8
 1559              		.cfi_offset 14, -4
 329:src/storage.c **** 	clrall();
 1560              		.loc 1 329 3 view .LVU458
 1561 0002 0B4C     		ldr	r4, .L123
 1562 0004 4FF48052 		mov	r2, #4096
 1563 0008 0021     		movs	r1, #0
 1564 000a 2068     		ldr	r0, [r4]
 1565 000c FFF7FEFF 		bl	xset
 1566              	.LVL162:
 330:src/storage.c **** 	init_state();
 1567              		.loc 1 330 2 is_stmt 1 view .LVU459
 1568 0010 FFF7FEFF 		bl	clrall
 1569              	.LVL163:
 331:src/storage.c **** #ifndef DM42
 1570              		.loc 1 331 2 view .LVU460
 1571 0014 FFF7FEFF 		bl	init_state
 1572              	.LVL164:
 336:src/storage.c **** #endif
 1573              		.loc 1 336 2 view .LVU461
 336:src/storage.c **** #endif
 1574              		.loc 1 336 20 is_stmt 0 view .LVU462
 1575 0018 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccqjxcgd.s 			page 57


 338:src/storage.c **** }
 1576              		.loc 1 338 10 view .LVU463
 1577 001a 0649     		ldr	r1, .L123+4
 336:src/storage.c **** #endif
 1578              		.loc 1 336 20 view .LVU464
 1579 001c 93F8DE2F 		ldrb	r2, [r3, #4062]	@ zero_extendqisi2
 338:src/storage.c **** }
 1580              		.loc 1 338 10 view .LVU465
 1581 0020 0548     		ldr	r0, .L123+8
 336:src/storage.c **** #endif
 1582              		.loc 1 336 20 view .LVU466
 1583 0022 0A24     		movs	r4, #10
 1584 0024 64F30402 		bfi	r2, r4, #0, #5
 1585 0028 83F8DE2F 		strb	r2, [r3, #4062]
 338:src/storage.c **** }
 1586              		.loc 1 338 2 is_stmt 1 view .LVU467
 338:src/storage.c **** }
 1587              		.loc 1 338 10 is_stmt 0 view .LVU468
 1588 002c 0860     		str	r0, [r1]
 339:src/storage.c **** 
 1589              		.loc 1 339 1 view .LVU469
 1590 002e 10BD     		pop	{r4, pc}
 1591              	.L124:
 1592              		.align	2
 1593              	.L123:
 1594 0030 00000000 		.word	main_ram
 1595 0034 00000000 		.word	DispMsg
 1596 0038 00000000 		.word	.LC6
 1597              		.cfi_endproc
 1598              	.LFE15:
 1600              		.section	.text.stoprog,"ax",%progbits
 1601              		.align	1
 1602              		.p2align 2,,3
 1603              		.global	stoprog
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu fpv4-sp-d16
 1609              	stoprog:
 1610              	.LVL165:
 1611              	.LFB16:
 345:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1612              		.loc 1 345 26 is_stmt 1 view -0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
 346:src/storage.c **** 	int i;
 1616              		.loc 1 346 2 view .LVU471
 345:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1617              		.loc 1 345 26 is_stmt 0 view .LVU472
 1618 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1619              		.cfi_def_cfa_offset 32
 1620              		.cfi_offset 3, -32
 1621              		.cfi_offset 4, -28
 1622              		.cfi_offset 5, -24
 1623              		.cfi_offset 6, -20
 1624              		.cfi_offset 7, -16
ARM GAS  /tmp/ccqjxcgd.s 			page 58


 1625              		.cfi_offset 8, -12
 1626              		.cfi_offset 9, -8
 1627              		.cfi_offset 14, -4
 348:src/storage.c **** 
 1628              		.loc 1 348 20 view .LVU473
 1629 0004 374F     		ldr	r7, .L145
 346:src/storage.c **** 	int i;
 1630              		.loc 1 346 18 view .LVU474
 1631 0006 00F47046 		and	r6, r0, #61440
 348:src/storage.c **** 
 1632              		.loc 1 348 20 view .LVU475
 1633 000a 3B68     		ldr	r3, [r7]
 346:src/storage.c **** 	int i;
 1634              		.loc 1 346 33 view .LVU476
 1635 000c B6F5704F 		cmp	r6, #61440
 348:src/storage.c **** 
 1636              		.loc 1 348 20 view .LVU477
 1637 0010 B3F8E05F 		ldrh	r5, [r3, #4064]
 1638              	.LVL166:
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1639              		.loc 1 350 2 is_stmt 1 view .LVU478
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1640              		.loc 1 350 5 is_stmt 0 view .LVU479
 1641 0014 5B88     		ldrh	r3, [r3, #2]
 345:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1642              		.loc 1 345 26 view .LVU480
 1643 0016 0446     		mov	r4, r0
 346:src/storage.c **** 	int i;
 1644              		.loc 1 346 33 view .LVU481
 1645 0018 57D0     		beq	.L126
 1646              	.LVL167:
 347:src/storage.c **** 	unsigned int pc = state_pc();
 1647              		.loc 1 347 2 is_stmt 1 discriminator 4 view .LVU482
 348:src/storage.c **** 
 1648              		.loc 1 348 2 discriminator 4 view .LVU483
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1649              		.loc 1 350 5 is_stmt 0 discriminator 4 view .LVU484
 1650 001a AB42     		cmp	r3, r5
 346:src/storage.c **** 	int i;
 1651              		.loc 1 346 33 discriminator 4 view .LVU485
 1652 001c 4FF00108 		mov	r8, #1
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1653              		.loc 1 350 5 discriminator 4 view .LVU486
 1654 0020 44D0     		beq	.L141
 1655              	.LVL168:
 1656              	.L127:
 353:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1657              		.loc 1 353 2 is_stmt 1 view .LVU487
 353:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1658              		.loc 1 353 5 is_stmt 0 view .LVU488
 1659 0022 15F47049 		ands	r9, r5, #61440
 1660 0026 4BD1     		bne	.L142
 1661              	.LVL169:
 1662              	.L128:
 357:src/storage.c **** 	xeq_init_contexts();
 1663              		.loc 1 357 2 is_stmt 1 view .LVU489
 1664 0028 FFF7FEFF 		bl	clrretstk
ARM GAS  /tmp/ccqjxcgd.s 			page 59


 1665              	.LVL170:
 358:src/storage.c **** 	if ( ProgFree < off ) {
 1666              		.loc 1 358 2 view .LVU490
 1667 002c FFF7FEFF 		bl	xeq_init_contexts
 1668              	.LVL171:
 359:src/storage.c **** 		return;
 1669              		.loc 1 359 2 view .LVU491
 359:src/storage.c **** 		return;
 1670              		.loc 1 359 16 is_stmt 0 view .LVU492
 1671 0030 2D4B     		ldr	r3, .L145+4
 359:src/storage.c **** 		return;
 1672              		.loc 1 359 5 view .LVU493
 1673 0032 1B68     		ldr	r3, [r3]
 1674 0034 4345     		cmp	r3, r8
 1675 0036 01DA     		bge	.L143
 372:src/storage.c **** 
 1676              		.loc 1 372 1 view .LVU494
 1677 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1678              	.LVL172:
 1679              	.L143:
 362:src/storage.c **** 	ProgEnd += off;
 1680              		.loc 1 362 2 is_stmt 1 view .LVU495
 362:src/storage.c **** 	ProgEnd += off;
 1681              		.loc 1 362 11 is_stmt 0 view .LVU496
 1682 003c 3B68     		ldr	r3, [r7]
 1683 003e B3F802C0 		ldrh	ip, [r3, #2]
 363:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1684              		.loc 1 363 10 view .LVU497
 1685 0042 B3F8EE2F 		ldrh	r2, [r3, #4078]
 362:src/storage.c **** 	ProgEnd += off;
 1686              		.loc 1 362 11 view .LVU498
 1687 0046 C444     		add	ip, ip, r8
 363:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1688              		.loc 1 363 10 view .LVU499
 1689 0048 4244     		add	r2, r2, r8
 362:src/storage.c **** 	ProgEnd += off;
 1690              		.loc 1 362 11 view .LVU500
 1691 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 363:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1692              		.loc 1 363 2 is_stmt 1 view .LVU501
 363:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1693              		.loc 1 363 10 is_stmt 0 view .LVU502
 1694 004e A3F8EE2F 		strh	r2, [r3, #4078]	@ movhi
 364:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1695              		.loc 1 364 2 is_stmt 1 view .LVU503
 364:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1696              		.loc 1 364 7 is_stmt 0 view .LVU504
 1697 0052 4946     		mov	r1, r9
 1698 0054 2846     		mov	r0, r5
 1699 0056 FFF7FEFF 		bl	do_inc
 1700              	.LVL173:
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1701              		.loc 1 365 12 view .LVU505
 1702 005a D7F800C0 		ldr	ip, [r7]
 1703 005e BCF80230 		ldrh	r3, [ip, #2]
 1704              	.LVL174:
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
ARM GAS  /tmp/ccqjxcgd.s 			page 60


 1705              		.loc 1 365 2 is_stmt 1 view .LVU506
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1706              		.loc 1 365 10 is_stmt 0 view .LVU507
 1707 0062 5A1C     		adds	r2, r3, #1
 1708              	.LVL175:
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1709              		.loc 1 365 26 is_stmt 1 view .LVU508
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1710              		.loc 1 365 2 is_stmt 0 view .LVU509
 1711 0064 8242     		cmp	r2, r0
 1712 0066 39DD     		ble	.L130
 1713 0068 03F10043 		add	r3, r3, #-2147483648
 1714 006c 0CF10407 		add	r7, ip, #4
 1715 0070 0133     		adds	r3, r3, #1
 1716 0072 A2EB0802 		sub	r2, r2, r8
 1717              	.LVL176:
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1718              		.loc 1 365 2 view .LVU510
 1719 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1720              	.LVL177:
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1721              		.loc 1 365 2 view .LVU511
 1722 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1723 007e 07EB4005 		add	r5, r7, r0, lsl #1
 1724              	.LVL178:
 1725              	.L131:
 366:src/storage.c **** 	}
 1726              		.loc 1 366 3 is_stmt 1 discriminator 3 view .LVU512
 366:src/storage.c **** 	}
 1727              		.loc 1 366 23 is_stmt 0 discriminator 3 view .LVU513
 1728 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 366:src/storage.c **** 	}
 1729              		.loc 1 366 15 discriminator 3 view .LVU514
 1730 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1731              		.loc 1 365 40 is_stmt 1 discriminator 3 view .LVU515
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1732              		.loc 1 365 26 discriminator 3 view .LVU516
 365:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1733              		.loc 1 365 2 is_stmt 0 discriminator 3 view .LVU517
 1734 008a AB42     		cmp	r3, r5
 1735 008c F9D1     		bne	.L131
 1736              	.L132:
 368:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1737              		.loc 1 368 2 is_stmt 1 view .LVU518
 368:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1738              		.loc 1 368 5 is_stmt 0 view .LVU519
 1739 008e B6F5704F 		cmp	r6, #61440
 369:src/storage.c **** 	Prog_1[pc] = c;
 1740              		.loc 1 369 3 is_stmt 1 view .LVU520
 370:src/storage.c **** 	State.pc = pc;
 1741              		.loc 1 370 2 view .LVU521
 369:src/storage.c **** 	Prog_1[pc] = c;
 1742              		.loc 1 369 22 is_stmt 0 view .LVU522
 1743 0092 04BF     		itt	eq
 1744 0094 230C     		lsreq	r3, r4, #16
 369:src/storage.c **** 	Prog_1[pc] = c;
ARM GAS  /tmp/ccqjxcgd.s 			page 61


 1745              		.loc 1 369 18 view .LVU523
 1746 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 370:src/storage.c **** 	State.pc = pc;
 1747              		.loc 1 370 8 view .LVU524
 1748 009a 00F10043 		add	r3, r0, #-2147483648
 1749 009e 013B     		subs	r3, r3, #1
 370:src/storage.c **** 	State.pc = pc;
 1750              		.loc 1 370 13 view .LVU525
 1751 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
 371:src/storage.c **** }
 1752              		.loc 1 371 2 is_stmt 1 view .LVU526
 371:src/storage.c **** }
 1753              		.loc 1 371 11 is_stmt 0 view .LVU527
 1754 00a4 ACF8E00F 		strh	r0, [ip, #4064]	@ movhi
 372:src/storage.c **** 
 1755              		.loc 1 372 1 view .LVU528
 1756 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1757              	.LVL179:
 1758              	.L141:
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1759              		.loc 1 350 22 discriminator 1 view .LVU529
 1760 00ac B0F59D7F 		cmp	r0, #314
 1761 00b0 B7D0     		beq	.L127
 351:src/storage.c **** 
 1762              		.loc 1 351 3 is_stmt 1 view .LVU530
 1763 00b2 4FF49D70 		mov	r0, #314
 1764              	.LVL180:
 351:src/storage.c **** 
 1765              		.loc 1 351 3 is_stmt 0 view .LVU531
 1766 00b6 FFF7FEFF 		bl	stoprog
 1767              	.LVL181:
 1768              	.L144:
 353:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1769              		.loc 1 353 2 is_stmt 1 view .LVU532
 353:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1770              		.loc 1 353 5 is_stmt 0 view .LVU533
 1771 00ba 15F47049 		ands	r9, r5, #61440
 1772 00be B3D0     		beq	.L128
 1773              	.L142:
 354:src/storage.c **** 		return;
 1774              		.loc 1 354 3 is_stmt 1 view .LVU534
 372:src/storage.c **** 
 1775              		.loc 1 372 1 is_stmt 0 view .LVU535
 1776 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1777              		.cfi_remember_state
 1778              		.cfi_restore 14
 1779              		.cfi_restore 9
 1780              		.cfi_restore 8
 1781              		.cfi_restore 7
 1782              		.cfi_restore 6
 1783              		.cfi_restore 5
 1784              		.cfi_restore 4
 1785              		.cfi_restore 3
 1786              		.cfi_def_cfa_offset 0
 1787              	.LVL182:
 354:src/storage.c **** 		return;
 1788              		.loc 1 354 3 view .LVU536
ARM GAS  /tmp/ccqjxcgd.s 			page 62


 1789 00c4 1320     		movs	r0, #19
 1790 00c6 FFF7FEBF 		b	report_warn
 1791              	.LVL183:
 1792              	.L126:
 1793              		.cfi_restore_state
 347:src/storage.c **** 	unsigned int pc = state_pc();
 1794              		.loc 1 347 2 is_stmt 1 view .LVU537
 348:src/storage.c **** 
 1795              		.loc 1 348 2 view .LVU538
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1796              		.loc 1 350 5 is_stmt 0 view .LVU539
 1797 00ca AB42     		cmp	r3, r5
 346:src/storage.c **** 	int i;
 1798              		.loc 1 346 33 view .LVU540
 1799 00cc 4FF00208 		mov	r8, #2
 350:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1800              		.loc 1 350 5 view .LVU541
 1801 00d0 A7D1     		bne	.L127
 351:src/storage.c **** 
 1802              		.loc 1 351 3 is_stmt 1 view .LVU542
 1803 00d2 4FF49D70 		mov	r0, #314
 1804              	.LVL184:
 351:src/storage.c **** 
 1805              		.loc 1 351 3 is_stmt 0 view .LVU543
 1806 00d6 FFF7FEFF 		bl	stoprog
 1807              	.LVL185:
 1808 00da EEE7     		b	.L144
 1809              	.LVL186:
 1810              	.L130:
 351:src/storage.c **** 
 1811              		.loc 1 351 3 view .LVU544
 1812 00dc 0CF10407 		add	r7, ip, #4
 1813 00e0 D5E7     		b	.L132
 1814              	.L146:
 1815 00e2 00BF     		.align	2
 1816              	.L145:
 1817 00e4 00000000 		.word	main_ram
 1818 00e8 00000000 		.word	ProgFree
 1819              		.cfi_endproc
 1820              	.LFE16:
 1822              		.section	.text.delprog,"ax",%progbits
 1823              		.align	1
 1824              		.p2align 2,,3
 1825              		.global	delprog
 1826              		.syntax unified
 1827              		.thumb
 1828              		.thumb_func
 1829              		.fpu fpv4-sp-d16
 1831              	delprog:
 1832              	.LFB17:
 379:src/storage.c **** 	int i;
 1833              		.loc 1 379 1 is_stmt 1 view -0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 0
 1836              		@ frame_needed = 0, uses_anonymous_args = 0
 380:src/storage.c **** 	const unsigned int pc = state_pc();
 1837              		.loc 1 380 2 view .LVU546
ARM GAS  /tmp/ccqjxcgd.s 			page 63


 381:src/storage.c **** 	int off;
 1838              		.loc 1 381 2 view .LVU547
 379:src/storage.c **** 	int i;
 1839              		.loc 1 379 1 is_stmt 0 view .LVU548
 1840 0000 70B5     		push	{r4, r5, r6, lr}
 1841              		.cfi_def_cfa_offset 16
 1842              		.cfi_offset 4, -16
 1843              		.cfi_offset 5, -12
 1844              		.cfi_offset 6, -8
 1845              		.cfi_offset 14, -4
 381:src/storage.c **** 	int off;
 1846              		.loc 1 381 26 view .LVU549
 1847 0002 194D     		ldr	r5, .L159
 1848 0004 2B68     		ldr	r3, [r5]
 1849 0006 B3F8E04F 		ldrh	r4, [r3, #4064]
 1850              	.LVL187:
 382:src/storage.c **** 
 1851              		.loc 1 382 2 is_stmt 1 view .LVU550
 384:src/storage.c **** 		return;
 1852              		.loc 1 384 2 view .LVU551
 384:src/storage.c **** 		return;
 1853              		.loc 1 384 7 is_stmt 0 view .LVU552
 1854 000a 2046     		mov	r0, r4
 1855 000c FFF7FEFF 		bl	check_delete_prog
 1856              	.LVL188:
 384:src/storage.c **** 		return;
 1857              		.loc 1 384 5 view .LVU553
 1858 0010 48BB     		cbnz	r0, .L147
 386:src/storage.c **** 		return;
 1859              		.loc 1 386 2 is_stmt 1 view .LVU554
 386:src/storage.c **** 		return;
 1860              		.loc 1 386 5 is_stmt 0 view .LVU555
 1861 0012 44B3     		cbz	r4, .L147
 389:src/storage.c **** 	ProgSize -= off;
 1862              		.loc 1 389 2 is_stmt 1 view .LVU556
 389:src/storage.c **** 	ProgSize -= off;
 1863              		.loc 1 389 8 is_stmt 0 view .LVU557
 1864 0014 2D68     		ldr	r5, [r5]
 1865 0016 05EB4403 		add	r3, r5, r4, lsl #1
 390:src/storage.c **** 	ProgEnd -= off;
 1866              		.loc 1 390 11 view .LVU558
 1867 001a 6A88     		ldrh	r2, [r5, #2]
 389:src/storage.c **** 	ProgSize -= off;
 1868              		.loc 1 389 33 view .LVU559
 1869 001c 5B88     		ldrh	r3, [r3, #2]
 391:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1870              		.loc 1 391 10 view .LVU560
 1871 001e B5F8EE1F 		ldrh	r1, [r5, #4078]
 389:src/storage.c **** 	ProgSize -= off;
 1872              		.loc 1 389 33 view .LVU561
 1873 0022 03F47043 		and	r3, r3, #61440
 1874 0026 B3F5704F 		cmp	r3, #61440
 1875 002a 14BF     		ite	ne
 1876 002c 0126     		movne	r6, #1
 1877 002e 0226     		moveq	r6, #2
 390:src/storage.c **** 	ProgEnd -= off;
 1878              		.loc 1 390 11 view .LVU562
ARM GAS  /tmp/ccqjxcgd.s 			page 64


 1879 0030 921B     		subs	r2, r2, r6
 1880 0032 92B2     		uxth	r2, r2
 391:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1881              		.loc 1 391 10 view .LVU563
 1882 0034 891B     		subs	r1, r1, r6
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1883              		.loc 1 392 2 view .LVU564
 1884 0036 9442     		cmp	r4, r2
 389:src/storage.c **** 	ProgSize -= off;
 1885              		.loc 1 389 33 view .LVU565
 1886 0038 3346     		mov	r3, r6
 1887              	.LVL189:
 390:src/storage.c **** 	ProgEnd -= off;
 1888              		.loc 1 390 2 is_stmt 1 view .LVU566
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1889              		.loc 1 392 10 is_stmt 0 view .LVU567
 1890 003a 2046     		mov	r0, r4
 390:src/storage.c **** 	ProgEnd -= off;
 1891              		.loc 1 390 11 view .LVU568
 1892 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 391:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1893              		.loc 1 391 2 is_stmt 1 view .LVU569
 391:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1894              		.loc 1 391 10 is_stmt 0 view .LVU570
 1895 003e A5F8EE1F 		strh	r1, [r5, #4078]	@ movhi
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1896              		.loc 1 392 2 is_stmt 1 view .LVU571
 1897              	.LVL190:
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1898              		.loc 1 392 16 view .LVU572
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1899              		.loc 1 392 2 is_stmt 0 view .LVU573
 1900 0042 0CDC     		bgt	.L152
 1901 0044 2344     		add	r3, r3, r4
 1902              	.LVL191:
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1903              		.loc 1 392 2 view .LVU574
 1904 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1905 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1906              	.LVL192:
 1907              	.L151:
 393:src/storage.c **** 	decpc();
 1908              		.loc 1 393 3 is_stmt 1 discriminator 3 view .LVU575
 393:src/storage.c **** 	decpc();
 1909              		.loc 1 393 23 is_stmt 0 discriminator 3 view .LVU576
 1910 004e 33F8021F 		ldrh	r1, [r3, #2]!
 393:src/storage.c **** 	decpc();
 1911              		.loc 1 393 15 discriminator 3 view .LVU577
 1912 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1913              		.loc 1 392 37 is_stmt 1 discriminator 3 view .LVU578
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1914              		.loc 1 392 21 is_stmt 0 discriminator 3 view .LVU579
 1915 0056 6988     		ldrh	r1, [r5, #2]
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1916              		.loc 1 392 37 discriminator 3 view .LVU580
 1917 0058 0130     		adds	r0, r0, #1
ARM GAS  /tmp/ccqjxcgd.s 			page 65


 1918              	.LVL193:
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1919              		.loc 1 392 16 is_stmt 1 discriminator 3 view .LVU581
 392:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1920              		.loc 1 392 2 is_stmt 0 discriminator 3 view .LVU582
 1921 005a 8142     		cmp	r1, r0
 1922 005c F7DA     		bge	.L151
 1923              	.L152:
 394:src/storage.c **** }
 1924              		.loc 1 394 2 is_stmt 1 view .LVU583
 395:src/storage.c **** 
 1925              		.loc 1 395 1 is_stmt 0 view .LVU584
 1926 005e BDE87040 		pop	{r4, r5, r6, lr}
 1927              		.cfi_remember_state
 1928              		.cfi_restore 14
 1929              		.cfi_restore 6
 1930              		.cfi_restore 5
 1931              		.cfi_restore 4
 1932              		.cfi_def_cfa_offset 0
 1933              	.LVL194:
 394:src/storage.c **** }
 1934              		.loc 1 394 2 view .LVU585
 1935 0062 FFF7FEBF 		b	decpc
 1936              	.LVL195:
 1937              	.L147:
 1938              		.cfi_restore_state
 395:src/storage.c **** 
 1939              		.loc 1 395 1 view .LVU586
 1940 0066 70BD     		pop	{r4, r5, r6, pc}
 1941              	.LVL196:
 1942              	.L160:
 395:src/storage.c **** 
 1943              		.loc 1 395 1 view .LVU587
 1944              		.align	2
 1945              	.L159:
 1946 0068 00000000 		.word	main_ram
 1947              		.cfi_endproc
 1948              	.LFE17:
 1950              		.section	.text.append_program,"ax",%progbits
 1951              		.align	1
 1952              		.p2align 2,,3
 1953              		.global	append_program
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1957              		.fpu fpv4-sp-d16
 1959              	append_program:
 1960              	.LVL197:
 1961              	.LFB18:
 403:src/storage.c **** 	unsigned short pc;
 1962              		.loc 1 403 1 is_stmt 1 view -0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
 404:src/storage.c **** 	int space_needed = length - ProgFree;
 1966              		.loc 1 404 2 view .LVU589
 405:src/storage.c **** 
ARM GAS  /tmp/ccqjxcgd.s 			page 66


 1967              		.loc 1 405 2 view .LVU590
 403:src/storage.c **** 	unsigned short pc;
 1968              		.loc 1 403 1 is_stmt 0 view .LVU591
 1969 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1970              		.cfi_def_cfa_offset 24
 1971              		.cfi_offset 4, -24
 1972              		.cfi_offset 5, -20
 1973              		.cfi_offset 6, -16
 1974              		.cfi_offset 7, -12
 1975              		.cfi_offset 8, -8
 1976              		.cfi_offset 14, -4
 407:src/storage.c **** 		/*
 1977              		.loc 1 407 7 view .LVU592
 1978 0004 DFF8C480 		ldr	r8, .L180+8
 405:src/storage.c **** 
 1979              		.loc 1 405 28 view .LVU593
 1980 0008 2E4A     		ldr	r2, .L180
 407:src/storage.c **** 		/*
 1981              		.loc 1 407 7 view .LVU594
 1982 000a D8F80030 		ldr	r3, [r8]
 405:src/storage.c **** 
 1983              		.loc 1 405 6 view .LVU595
 1984 000e 1568     		ldr	r5, [r2]
 407:src/storage.c **** 		/*
 1985              		.loc 1 407 7 view .LVU596
 1986 0010 5F88     		ldrh	r7, [r3, #2]
 407:src/storage.c **** 		/*
 1987              		.loc 1 407 5 view .LVU597
 1988 0012 012F     		cmp	r7, #1
 403:src/storage.c **** 	unsigned short pc;
 1989              		.loc 1 403 1 view .LVU598
 1990 0014 0C46     		mov	r4, r1
 1991 0016 0646     		mov	r6, r0
 405:src/storage.c **** 
 1992              		.loc 1 405 6 view .LVU599
 1993 0018 A1EB0505 		sub	r5, r1, r5
 1994              	.LVL198:
 407:src/storage.c **** 		/*
 1995              		.loc 1 407 2 is_stmt 1 view .LVU600
 407:src/storage.c **** 		/*
 1996              		.loc 1 407 5 is_stmt 0 view .LVU601
 1997 001c 0BD0     		beq	.L177
 414:src/storage.c **** 		return report_err( ERR_INVALID );
 1998              		.loc 1 414 2 is_stmt 1 view .LVU602
 414:src/storage.c **** 		return report_err( ERR_INVALID );
 1999              		.loc 1 414 5 is_stmt 0 view .LVU603
 2000 001e 40F29E73 		movw	r3, #1950
 2001 0022 9942     		cmp	r1, r3
 2002 0024 39DC     		bgt	.L164
 417:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2003              		.loc 1 417 2 is_stmt 1 view .LVU604
 417:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2004              		.loc 1 417 30 is_stmt 0 view .LVU605
 2005 0026 DB1B     		subs	r3, r3, r7
 417:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2006              		.loc 1 417 5 view .LVU606
 2007 0028 8B42     		cmp	r3, r1
ARM GAS  /tmp/ccqjxcgd.s 			page 67


 2008 002a 0CDA     		bge	.L163
 2009              	.LVL199:
 2010              	.L176:
 2011              	.LBB74:
 437:src/storage.c **** 		}
 2012              		.loc 1 437 4 is_stmt 1 view .LVU607
 2013              	.LBE74:
 449:src/storage.c **** 
 2014              		.loc 1 449 1 is_stmt 0 view .LVU608
 2015 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2016              		.cfi_remember_state
 2017              		.cfi_restore 14
 2018              		.cfi_restore 8
 2019              		.cfi_restore 7
 2020              		.cfi_restore 6
 2021              		.cfi_restore 5
 2022              		.cfi_restore 4
 2023              		.cfi_def_cfa_offset 0
 2024              	.LVL200:
 2025              	.LBB75:
 437:src/storage.c **** 		}
 2026              		.loc 1 437 11 view .LVU609
 2027 0030 0B20     		movs	r0, #11
 2028 0032 FFF7FEBF 		b	report_err
 2029              	.LVL201:
 2030              	.L177:
 2031              		.cfi_restore_state
 437:src/storage.c **** 		}
 2032              		.loc 1 437 11 view .LVU610
 2033              	.LBE75:
 411:src/storage.c **** 		--ProgSize;
 2034              		.loc 1 411 3 is_stmt 1 view .LVU611
 414:src/storage.c **** 		return report_err( ERR_INVALID );
 2035              		.loc 1 414 5 is_stmt 0 view .LVU612
 2036 0036 40F29E72 		movw	r2, #1950
 412:src/storage.c **** 	}
 2037              		.loc 1 412 3 view .LVU613
 2038 003a 0021     		movs	r1, #0
 2039              	.LVL202:
 414:src/storage.c **** 		return report_err( ERR_INVALID );
 2040              		.loc 1 414 5 view .LVU614
 2041 003c 9442     		cmp	r4, r2
 411:src/storage.c **** 		--ProgSize;
 2042              		.loc 1 411 3 view .LVU615
 2043 003e 05F1FF35 		add	r5, r5, #-1
 2044              	.LVL203:
 412:src/storage.c **** 	}
 2045              		.loc 1 412 3 is_stmt 1 view .LVU616
 2046 0042 5980     		strh	r1, [r3, #2]	@ movhi
 414:src/storage.c **** 		return report_err( ERR_INVALID );
 2047              		.loc 1 414 2 view .LVU617
 414:src/storage.c **** 		return report_err( ERR_INVALID );
 2048              		.loc 1 414 5 is_stmt 0 view .LVU618
 2049 0044 29DC     		bgt	.L164
 2050              	.L163:
 424:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2051              		.loc 1 424 2 is_stmt 1 view .LVU619
ARM GAS  /tmp/ccqjxcgd.s 			page 68


 2052 0046 FFF7FEFF 		bl	clrretstk
 2053              	.LVL204:
 425:src/storage.c **** 		space_needed -= SizeStatRegs;
 2054              		.loc 1 425 2 view .LVU620
 425:src/storage.c **** 		space_needed -= SizeStatRegs;
 2055              		.loc 1 425 5 is_stmt 0 view .LVU621
 2056 004a 002D     		cmp	r5, #0
 2057 004c 11DD     		ble	.L166
 425:src/storage.c **** 		space_needed -= SizeStatRegs;
 2058              		.loc 1 425 40 discriminator 1 view .LVU622
 2059 004e 1E4B     		ldr	r3, .L180+4
 2060 0050 1B68     		ldr	r3, [r3]
 425:src/storage.c **** 		space_needed -= SizeStatRegs;
 2061              		.loc 1 425 24 discriminator 1 view .LVU623
 2062 0052 3BBB     		cbnz	r3, .L178
 2063              	.LBB76:
 430:src/storage.c **** 		if (is_dblmode())
 2064              		.loc 1 430 3 is_stmt 1 view .LVU624
 431:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2065              		.loc 1 431 3 view .LVU625
 431:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2066              		.loc 1 431 7 is_stmt 0 view .LVU626
 2067 0054 FFF7FEFF 		bl	is_dblmode
 2068              	.LVL205:
 431:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2069              		.loc 1 431 6 view .LVU627
 2070 0058 68BB     		cbnz	r0, .L179
 2071              	.L169:
 434:src/storage.c **** 
 2072              		.loc 1 434 4 is_stmt 1 view .LVU628
 434:src/storage.c **** 
 2073              		.loc 1 434 11 is_stmt 0 view .LVU629
 2074 005a D8F80030 		ldr	r3, [r8]
 2075 005e 93F8CF0F 		ldrb	r0, [r3, #4047]	@ zero_extendqisi2
 434:src/storage.c **** 
 2076              		.loc 1 434 38 view .LVU630
 2077 0062 0335     		adds	r5, r5, #3
 2078              	.LVL206:
 434:src/storage.c **** 
 2079              		.loc 1 434 9 view .LVU631
 2080 0064 A0EBA500 		sub	r0, r0, r5, asr #2
 2081              	.LVL207:
 2082              	.L170:
 436:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2083              		.loc 1 436 3 is_stmt 1 view .LVU632
 436:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2084              		.loc 1 436 6 is_stmt 0 view .LVU633
 2085 0068 0028     		cmp	r0, #0
 2086 006a DFDB     		blt	.L176
 439:src/storage.c **** 	}
 2087              		.loc 1 439 3 is_stmt 1 view .LVU634
 2088 006c 7D21     		movs	r1, #125
 2089 006e FFF7FEFF 		bl	cmdregs
 2090              	.LVL208:
 2091              	.L166:
 439:src/storage.c **** 	}
 2092              		.loc 1 439 3 is_stmt 0 view .LVU635
ARM GAS  /tmp/ccqjxcgd.s 			page 69


 2093              	.LBE76:
 444:src/storage.c **** 	ProgSize += length;
 2094              		.loc 1 444 2 is_stmt 1 view .LVU636
 444:src/storage.c **** 	ProgSize += length;
 2095              		.loc 1 444 7 is_stmt 0 view .LVU637
 2096 0072 D8F80020 		ldr	r2, [r8]
 2097 0076 5388     		ldrh	r3, [r2, #2]
 2098              	.LVL209:
 445:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2099              		.loc 1 445 2 is_stmt 1 view .LVU638
 444:src/storage.c **** 	ProgSize += length;
 2100              		.loc 1 444 5 is_stmt 0 view .LVU639
 2101 0078 5D1C     		adds	r5, r3, #1
 446:src/storage.c **** 	set_pc( pc );
 2102              		.loc 1 446 16 view .LVU640
 2103 007a ADB2     		uxth	r5, r5
 445:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2104              		.loc 1 445 11 view .LVU641
 2105 007c 2344     		add	r3, r3, r4
 2106              	.LVL210:
 446:src/storage.c **** 	set_pc( pc );
 2107              		.loc 1 446 16 view .LVU642
 2108 007e 02EB4500 		add	r0, r2, r5, lsl #1
 445:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2109              		.loc 1 445 11 view .LVU643
 2110 0082 5380     		strh	r3, [r2, #2]	@ movhi
 2111              	.LVL211:
 446:src/storage.c **** 	set_pc( pc );
 2112              		.loc 1 446 2 is_stmt 1 view .LVU644
 2113 0084 3146     		mov	r1, r6
 2114 0086 6200     		lsls	r2, r4, #1
 2115 0088 0230     		adds	r0, r0, #2
 2116 008a FFF7FEFF 		bl	xcopy
 2117              	.LVL212:
 447:src/storage.c **** 	return 0;
 2118              		.loc 1 447 2 view .LVU645
 2119 008e 2846     		mov	r0, r5
 2120 0090 FFF7FEFF 		bl	set_pc
 2121              	.LVL213:
 448:src/storage.c **** }
 2122              		.loc 1 448 2 view .LVU646
 449:src/storage.c **** 
 2123              		.loc 1 449 1 is_stmt 0 view .LVU647
 2124 0094 0020     		movs	r0, #0
 2125 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2126              	.LVL214:
 2127              	.L164:
 415:src/storage.c **** 	}
 2128              		.loc 1 415 3 is_stmt 1 view .LVU648
 449:src/storage.c **** 
 2129              		.loc 1 449 1 is_stmt 0 view .LVU649
 2130 009a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2131              		.cfi_remember_state
 2132              		.cfi_restore 14
 2133              		.cfi_restore 8
 2134              		.cfi_restore 7
 2135              		.cfi_restore 6
ARM GAS  /tmp/ccqjxcgd.s 			page 70


 2136              		.cfi_restore 5
 2137              		.cfi_restore 4
 2138              		.cfi_def_cfa_offset 0
 2139              	.LVL215:
 415:src/storage.c **** 	}
 2140              		.loc 1 415 10 view .LVU650
 2141 009e 1220     		movs	r0, #18
 2142              	.LVL216:
 415:src/storage.c **** 	}
 2143              		.loc 1 415 10 view .LVU651
 2144 00a0 FFF7FEBF 		b	report_err
 2145              	.LVL217:
 2146              	.L178:
 2147              		.cfi_restore_state
 426:src/storage.c **** 		sigmaDeallocate();
 2148              		.loc 1 426 3 is_stmt 1 view .LVU652
 426:src/storage.c **** 		sigmaDeallocate();
 2149              		.loc 1 426 16 is_stmt 0 view .LVU653
 2150 00a4 ED1A     		subs	r5, r5, r3
 2151              	.LVL218:
 427:src/storage.c **** 	}
 2152              		.loc 1 427 3 is_stmt 1 view .LVU654
 2153 00a6 FFF7FEFF 		bl	sigmaDeallocate
 2154              	.LVL219:
 429:src/storage.c **** 		int regs;
 2155              		.loc 1 429 2 view .LVU655
 429:src/storage.c **** 		int regs;
 2156              		.loc 1 429 5 is_stmt 0 view .LVU656
 2157 00aa 002D     		cmp	r5, #0
 2158 00ac E1DD     		ble	.L166
 2159              	.LBB77:
 430:src/storage.c **** 		if (is_dblmode())
 2160              		.loc 1 430 3 is_stmt 1 view .LVU657
 431:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2161              		.loc 1 431 3 view .LVU658
 431:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2162              		.loc 1 431 7 is_stmt 0 view .LVU659
 2163 00ae FFF7FEFF 		bl	is_dblmode
 2164              	.LVL220:
 431:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2165              		.loc 1 431 6 view .LVU660
 2166 00b2 0028     		cmp	r0, #0
 2167 00b4 D1D0     		beq	.L169
 2168              	.L179:
 432:src/storage.c **** 		else
 2169              		.loc 1 432 4 is_stmt 1 view .LVU661
 432:src/storage.c **** 		else
 2170              		.loc 1 432 11 is_stmt 0 view .LVU662
 2171 00b6 FFF7FEFF 		bl	global_regs
 2172              	.LVL221:
 432:src/storage.c **** 		else
 2173              		.loc 1 432 44 view .LVU663
 2174 00ba 0735     		adds	r5, r5, #7
 2175              	.LVL222:
 432:src/storage.c **** 		else
 2176              		.loc 1 432 25 view .LVU664
 2177 00bc A0EBE500 		sub	r0, r0, r5, asr #3
ARM GAS  /tmp/ccqjxcgd.s 			page 71


 2178              	.LVL223:
 432:src/storage.c **** 		else
 2179              		.loc 1 432 25 view .LVU665
 2180 00c0 D2E7     		b	.L170
 2181              	.L181:
 2182 00c2 00BF     		.align	2
 2183              	.L180:
 2184 00c4 00000000 		.word	ProgFree
 2185 00c8 00000000 		.word	SizeStatRegs
 2186 00cc 00000000 		.word	main_ram
 2187              	.LBE77:
 2188              		.cfi_endproc
 2189              	.LFE18:
 2191              		.section	.text.check_create_wp34sdir,"ax",%progbits
 2192              		.align	1
 2193              		.p2align 2,,3
 2194              		.global	check_create_wp34sdir
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2198              		.fpu fpv4-sp-d16
 2200              	check_create_wp34sdir:
 2201              	.LFB21:
 603:src/storage.c ****   FRESULT f;
 2202              		.loc 1 603 33 is_stmt 1 view -0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
 2205              		@ frame_needed = 0, uses_anonymous_args = 0
 604:src/storage.c ****   sys_disk_write_enable(1);
 2206              		.loc 1 604 3 view .LVU667
 605:src/storage.c ****   f = check_create_dir ("/wp34s");
 2207              		.loc 1 605 3 view .LVU668
 603:src/storage.c ****   FRESULT f;
 2208              		.loc 1 603 33 is_stmt 0 view .LVU669
 2209 0000 38B5     		push	{r3, r4, r5, lr}
 2210              		.cfi_def_cfa_offset 16
 2211              		.cfi_offset 3, -16
 2212              		.cfi_offset 4, -12
 2213              		.cfi_offset 5, -8
 2214              		.cfi_offset 14, -4
 605:src/storage.c ****   f = check_create_dir ("/wp34s");
 2215              		.loc 1 605 3 view .LVU670
 2216 0002 0120     		movs	r0, #1
 2217 0004 044D     		ldr	r5, .L184
 2218 0006 A847     		blx	r5
 2219              	.LVL224:
 606:src/storage.c ****   sys_disk_write_enable(0);
 2220              		.loc 1 606 3 is_stmt 1 view .LVU671
 606:src/storage.c ****   sys_disk_write_enable(0);
 2221              		.loc 1 606 7 is_stmt 0 view .LVU672
 2222 0008 044B     		ldr	r3, .L184+4
 2223 000a 0548     		ldr	r0, .L184+8
 2224 000c 9847     		blx	r3
 2225              	.LVL225:
 2226 000e 0446     		mov	r4, r0
 2227              	.LVL226:
 607:src/storage.c ****   return f;
ARM GAS  /tmp/ccqjxcgd.s 			page 72


 2228              		.loc 1 607 3 is_stmt 1 view .LVU673
 2229 0010 0020     		movs	r0, #0
 2230 0012 A847     		blx	r5
 2231              	.LVL227:
 608:src/storage.c **** }
 2232              		.loc 1 608 3 view .LVU674
 609:src/storage.c **** 
 2233              		.loc 1 609 1 is_stmt 0 view .LVU675
 2234 0014 E0B2     		uxtb	r0, r4
 2235 0016 38BD     		pop	{r3, r4, r5, pc}
 2236              	.LVL228:
 2237              	.L185:
 609:src/storage.c **** 
 2238              		.loc 1 609 1 view .LVU676
 2239              		.align	2
 2240              	.L184:
 2241 0018 E1030008 		.word	134218721
 2242 001c D1030008 		.word	134218705
 2243 0020 30000000 		.word	.LC2
 2244              		.cfi_endproc
 2245              	.LFE21:
 2247              		.section	.text.init_library,"ax",%progbits
 2248              		.align	1
 2249              		.p2align 2,,3
 2250              		.global	init_library
 2251              		.syntax unified
 2252              		.thumb
 2253              		.thumb_func
 2254              		.fpu fpv4-sp-d16
 2256              	init_library:
 2257              	.LFB22:
 671:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2258              		.loc 1 671 1 is_stmt 1 view -0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 256
 2261              		@ frame_needed = 0, uses_anonymous_args = 0
 672:src/storage.c **** 	  struct {
 2262              		.loc 1 672 2 view .LVU678
 671:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2263              		.loc 1 671 1 is_stmt 0 view .LVU679
 2264 0000 10B5     		push	{r4, lr}
 2265              		.cfi_def_cfa_offset 8
 2266              		.cfi_offset 4, -8
 2267              		.cfi_offset 14, -4
 672:src/storage.c **** 	  struct {
 2268              		.loc 1 672 7 view .LVU680
 2269 0002 0C4C     		ldr	r4, .L193
 2270 0004 2168     		ldr	r1, [r4]
 671:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2271              		.loc 1 671 1 view .LVU681
 2272 0006 C0B0     		sub	sp, sp, #256
 2273              		.cfi_def_cfa_offset 264
 672:src/storage.c **** 	  struct {
 2274              		.loc 1 672 7 view .LVU682
 2275 0008 0846     		mov	r0, r1
 2276 000a FFF7FEFF 		bl	checksum_region
 2277              	.LVL229:
ARM GAS  /tmp/ccqjxcgd.s 			page 73


 672:src/storage.c **** 	  struct {
 2278              		.loc 1 672 5 view .LVU683
 2279 000e 08B9     		cbnz	r0, .L192
 683:src/storage.c **** 
 2280              		.loc 1 683 1 view .LVU684
 2281 0010 40B0     		add	sp, sp, #256
 2282              		.cfi_remember_state
 2283              		.cfi_def_cfa_offset 8
 2284              		@ sp needed
 2285 0012 10BD     		pop	{r4, pc}
 2286              	.L192:
 2287              		.cfi_restore_state
 2288              	.LBB78:
 673:src/storage.c **** 			unsigned short crc;
 2289              		.loc 1 673 4 is_stmt 1 view .LVU685
 678:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2290              		.loc 1 678 3 view .LVU686
 679:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2291              		.loc 1 679 3 view .LVU687
 679:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2292              		.loc 1 679 11 is_stmt 0 view .LVU688
 2293 0014 4AF23C53 		movw	r3, #42300
 680:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2294              		.loc 1 680 3 view .LVU689
 2295 0018 FC22     		movs	r2, #252
 2296 001a FF21     		movs	r1, #255
 2297 001c 01A8     		add	r0, sp, #4
 679:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2298              		.loc 1 679 11 view .LVU690
 2299 001e 0093     		str	r3, [sp]
 680:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2300              		.loc 1 680 3 is_stmt 1 view .LVU691
 2301 0020 FFF7FEFF 		bl	xset
 2302              	.LVL230:
 681:src/storage.c **** 	}
 2303              		.loc 1 681 3 view .LVU692
 2304 0024 2068     		ldr	r0, [r4]
 2305 0026 6946     		mov	r1, sp
 2306 0028 0122     		movs	r2, #1
 2307 002a FFF7FEFF 		bl	program_flash
 2308              	.LVL231:
 2309              	.LBE78:
 683:src/storage.c **** 
 2310              		.loc 1 683 1 is_stmt 0 view .LVU693
 2311 002e 40B0     		add	sp, sp, #256
 2312              		.cfi_def_cfa_offset 8
 2313              		@ sp needed
 2314 0030 10BD     		pop	{r4, pc}
 2315              	.L194:
 2316 0032 00BF     		.align	2
 2317              	.L193:
 2318 0034 00000000 		.word	library_ram
 2319              		.cfi_endproc
 2320              	.LFE22:
 2322              		.section	.text.flash_remove,"ax",%progbits
 2323              		.align	1
 2324              		.p2align 2,,3
ARM GAS  /tmp/ccqjxcgd.s 			page 74


 2325              		.global	flash_remove
 2326              		.syntax unified
 2327              		.thumb
 2328              		.thumb_func
 2329              		.fpu fpv4-sp-d16
 2331              	flash_remove:
 2332              	.LVL232:
 2333              	.LFB24:
 748:src/storage.c **** 	const int size = UserFlash.size - count;
 2334              		.loc 1 748 1 is_stmt 1 view -0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              		@ link register save eliminated.
 749:src/storage.c **** 	step_no = offsetLIB( step_no );
 2339              		.loc 1 749 2 view .LVU695
 749:src/storage.c **** 	step_no = offsetLIB( step_no );
 2340              		.loc 1 749 19 is_stmt 0 view .LVU696
 2341 0000 084B     		ldr	r3, .L197
 2342 0002 1A68     		ldr	r2, [r3]
 750:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2343              		.loc 1 750 12 view .LVU697
 2344 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2345              	.LVL233:
 749:src/storage.c **** 	step_no = offsetLIB( step_no );
 2346              		.loc 1 749 28 view .LVU698
 2347 0008 5388     		ldrh	r3, [r2, #2]
 750:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2348              		.loc 1 750 10 view .LVU699
 2349 000a 0138     		subs	r0, r0, #1
 748:src/storage.c **** 	const int size = UserFlash.size - count;
 2350              		.loc 1 748 1 view .LVU700
 2351 000c 10B4     		push	{r4}
 2352              		.cfi_def_cfa_offset 4
 2353              		.cfi_offset 4, -4
 751:src/storage.c **** 			     size - step_no, size );
 2354              		.loc 1 751 32 view .LVU701
 2355 000e 0432     		adds	r2, r2, #4
 751:src/storage.c **** 			     size - step_no, size );
 2356              		.loc 1 751 57 view .LVU702
 2357 0010 4418     		adds	r4, r0, r1
 749:src/storage.c **** 	step_no = offsetLIB( step_no );
 2358              		.loc 1 749 12 view .LVU703
 2359 0012 5B1A     		subs	r3, r3, r1
 2360              	.LVL234:
 750:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2361              		.loc 1 750 2 is_stmt 1 view .LVU704
 751:src/storage.c **** 			     size - step_no, size );
 2362              		.loc 1 751 2 view .LVU705
 751:src/storage.c **** 			     size - step_no, size );
 2363              		.loc 1 751 9 is_stmt 0 view .LVU706
 2364 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2365              	.LVL235:
 753:src/storage.c **** 
 2366              		.loc 1 753 1 view .LVU707
 2367 0018 5DF8044B 		ldr	r4, [sp], #4
 2368              		.cfi_restore 4
ARM GAS  /tmp/ccqjxcgd.s 			page 75


 2369              		.cfi_def_cfa_offset 0
 751:src/storage.c **** 			     size - step_no, size );
 2370              		.loc 1 751 9 view .LVU708
 2371 001c 1A1A     		subs	r2, r3, r0
 2372 001e FFF7FEBF 		b	flash_append
 2373              	.LVL236:
 2374              	.L198:
 751:src/storage.c **** 			     size - step_no, size );
 2375              		.loc 1 751 9 view .LVU709
 2376 0022 00BF     		.align	2
 2377              	.L197:
 2378 0024 00000000 		.word	library_ram
 2379              		.cfi_endproc
 2380              	.LFE24:
 2382              		.section	.text.clrprog,"ax",%progbits
 2383              		.align	1
 2384              		.p2align 2,,3
 2385              		.global	clrprog
 2386              		.syntax unified
 2387              		.thumb
 2388              		.thumb_func
 2389              		.fpu fpv4-sp-d16
 2391              	clrprog:
 2392              	.LFB13:
 280:src/storage.c **** 	update_program_bounds( 1 );
 2393              		.loc 1 280 1 is_stmt 1 view -0
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 281:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2397              		.loc 1 281 2 view .LVU711
 280:src/storage.c **** 	update_program_bounds( 1 );
 2398              		.loc 1 280 1 is_stmt 0 view .LVU712
 2399 0000 10B5     		push	{r4, lr}
 2400              		.cfi_def_cfa_offset 8
 2401              		.cfi_offset 4, -8
 2402              		.cfi_offset 14, -4
 282:src/storage.c **** 		/*
 2403              		.loc 1 282 7 view .LVU713
 2404 0002 234C     		ldr	r4, .L208
 281:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2405              		.loc 1 281 2 view .LVU714
 2406 0004 0120     		movs	r0, #1
 2407 0006 FFF7FEFF 		bl	update_program_bounds
 2408              	.LVL237:
 282:src/storage.c **** 		/*
 2409              		.loc 1 282 2 is_stmt 1 view .LVU715
 282:src/storage.c **** 		/*
 2410              		.loc 1 282 7 is_stmt 0 view .LVU716
 2411 000a 2368     		ldr	r3, [r4]
 2412 000c B3F8EC0F 		ldrh	r0, [r3, #4076]
 282:src/storage.c **** 		/*
 2413              		.loc 1 282 5 view .LVU717
 2414 0010 820B     		lsrs	r2, r0, #14
 2415 0012 012A     		cmp	r2, #1
 2416 0014 28D0     		beq	.L205
 289:src/storage.c **** 			return;
ARM GAS  /tmp/ccqjxcgd.s 			page 76


 2417              		.loc 1 289 3 is_stmt 1 view .LVU718
 289:src/storage.c **** 			return;
 2418              		.loc 1 289 8 is_stmt 0 view .LVU719
 2419 0016 FFF7FEFF 		bl	check_delete_prog
 2420              	.LVL238:
 289:src/storage.c **** 			return;
 2421              		.loc 1 289 6 view .LVU720
 2422 001a 00B1     		cbz	r0, .L206
 301:src/storage.c ****  
 2423              		.loc 1 301 1 view .LVU721
 2424 001c 10BD     		pop	{r4, pc}
 2425              	.L206:
 292:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 2426              		.loc 1 292 3 is_stmt 1 view .LVU722
 2427 001e FFF7FEFF 		bl	clrretstk
 2428              	.LVL239:
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2429              		.loc 1 293 3 view .LVU723
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2430              		.loc 1 293 10 is_stmt 0 view .LVU724
 2431 0022 2368     		ldr	r3, [r4]
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2432              		.loc 1 293 17 view .LVU725
 2433 0024 B3F8EC0F 		ldrh	r0, [r3, #4076]
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2434              		.loc 1 293 37 view .LVU726
 2435 0028 B3F8EE1F 		ldrh	r1, [r3, #4078]
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2436              		.loc 1 293 48 view .LVU727
 2437 002c 5A88     		ldrh	r2, [r3, #2]
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2438              		.loc 1 293 17 view .LVU728
 2439 002e 00F10040 		add	r0, r0, #-2147483648
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2440              		.loc 1 293 10 view .LVU729
 2441 0032 0433     		adds	r3, r3, #4
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2442              		.loc 1 293 57 view .LVU730
 2443 0034 521A     		subs	r2, r2, r1
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2444              		.loc 1 293 17 view .LVU731
 2445 0036 0138     		subs	r0, r0, #1
 293:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2446              		.loc 1 293 3 view .LVU732
 2447 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2448 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2449 0040 5200     		lsls	r2, r2, #1
 2450 0042 FFF7FEFF 		bl	xcopy
 2451              	.LVL240:
 294:src/storage.c **** 		if ( ProgSize == 0 ) {
 2452              		.loc 1 294 3 is_stmt 1 view .LVU733
 294:src/storage.c **** 		if ( ProgSize == 0 ) {
 2453              		.loc 1 294 12 is_stmt 0 view .LVU734
 2454 0046 2268     		ldr	r2, [r4]
 294:src/storage.c **** 		if ( ProgSize == 0 ) {
 2455              		.loc 1 294 31 view .LVU735
 2456 0048 B2F8EC0F 		ldrh	r0, [r2, #4076]
ARM GAS  /tmp/ccqjxcgd.s 			page 77


 294:src/storage.c **** 		if ( ProgSize == 0 ) {
 2457              		.loc 1 294 12 view .LVU736
 2458 004c 5388     		ldrh	r3, [r2, #2]
 2459 004e B2F8EE1F 		ldrh	r1, [r2, #4078]
 2460 0052 0344     		add	r3, r3, r0
 2461 0054 013B     		subs	r3, r3, #1
 2462 0056 5B1A     		subs	r3, r3, r1
 2463 0058 9BB2     		uxth	r3, r3
 295:src/storage.c **** 			stoend();
 2464              		.loc 1 295 3 is_stmt 1 view .LVU737
 295:src/storage.c **** 			stoend();
 2465              		.loc 1 295 6 is_stmt 0 view .LVU738
 2466 005a B3B9     		cbnz	r3, .L207
 296:src/storage.c **** 		}
 2467              		.loc 1 296 4 is_stmt 1 view .LVU739
 2468              	.LBB79:
 2469              	.LBI79:
 244:src/storage.c **** {
 2470              		.loc 1 244 13 view .LVU740
 2471              	.LBB80:
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2472              		.loc 1 246 2 view .LVU741
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2473              		.loc 1 246 11 is_stmt 0 view .LVU742
 2474 005c 0121     		movs	r1, #1
 247:src/storage.c **** }
 2475              		.loc 1 247 12 view .LVU743
 2476 005e 4FF49D73 		mov	r3, #314
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2477              		.loc 1 246 11 view .LVU744
 2478 0062 5180     		strh	r1, [r2, #2]	@ movhi
 247:src/storage.c **** }
 2479              		.loc 1 247 2 is_stmt 1 view .LVU745
 247:src/storage.c **** }
 2480              		.loc 1 247 12 is_stmt 0 view .LVU746
 2481 0064 9380     		strh	r3, [r2, #4]	@ movhi
 248:src/storage.c **** 
 2482              		.loc 1 248 1 view .LVU747
 2483 0066 08E0     		b	.L201
 2484              	.L205:
 2485              	.LBE80:
 2486              	.LBE79:
 286:src/storage.c **** 	}
 2487              		.loc 1 286 3 is_stmt 1 view .LVU748
 286:src/storage.c **** 	}
 2488              		.loc 1 286 28 is_stmt 0 view .LVU749
 2489 0068 B3F8EE1F 		ldrh	r1, [r3, #4078]
 286:src/storage.c **** 	}
 2490              		.loc 1 286 36 view .LVU750
 2491 006c 0131     		adds	r1, r1, #1
 286:src/storage.c **** 	}
 2492              		.loc 1 286 3 view .LVU751
 2493 006e 091A     		subs	r1, r1, r0
 2494 0070 FFF7FEFF 		bl	flash_remove
 2495              	.LVL241:
 2496 0074 2368     		ldr	r3, [r4]
 2497 0076 B3F8EC0F 		ldrh	r0, [r3, #4076]
ARM GAS  /tmp/ccqjxcgd.s 			page 78


 2498              	.L201:
 299:src/storage.c **** 	update_program_bounds( 1 );
 2499              		.loc 1 299 2 is_stmt 1 view .LVU752
 2500 007a 0138     		subs	r0, r0, #1
 2501 007c FFF7FEFF 		bl	set_pc
 2502              	.LVL242:
 300:src/storage.c **** }
 2503              		.loc 1 300 2 view .LVU753
 301:src/storage.c ****  
 2504              		.loc 1 301 1 is_stmt 0 view .LVU754
 2505 0080 BDE81040 		pop	{r4, lr}
 2506              		.cfi_remember_state
 2507              		.cfi_restore 14
 2508              		.cfi_restore 4
 2509              		.cfi_def_cfa_offset 0
 300:src/storage.c **** }
 2510              		.loc 1 300 2 view .LVU755
 2511 0084 0120     		movs	r0, #1
 2512 0086 FFF7FEBF 		b	update_program_bounds
 2513              	.LVL243:
 2514              	.L207:
 2515              		.cfi_restore_state
 294:src/storage.c **** 		if ( ProgSize == 0 ) {
 2516              		.loc 1 294 12 view .LVU756
 2517 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2518 008c F5E7     		b	.L201
 2519              	.L209:
 2520 008e 00BF     		.align	2
 2521              	.L208:
 2522 0090 00000000 		.word	main_ram
 2523              		.cfi_endproc
 2524              	.LFE13:
 2526              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2527              		.align	2
 2528              	.LC7:
 2529 0000 4E6F206C 		.ascii	"No label\000"
 2529      6162656C 
 2529      00
 2530              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2531              		.align	1
 2532              		.p2align 2,,3
 2533              		.syntax unified
 2534              		.thumb
 2535              		.thumb_func
 2536              		.fpu fpv4-sp-d16
 2538              	store_program_from_buffer.part.0:
 2539              	.LVL244:
 2540              	.LFB43:
1269:src/storage.c **** 
1270:src/storage.c **** void save_prog_file () {
1271:src/storage.c ****   opcode lbl; 
1272:src/storage.c ****   unsigned int pc;
1273:src/storage.c ****   unsigned short steps, prog_crc;
1274:src/storage.c ****   FRESULT f;
1275:src/storage.c ****   int data = WRITE;
1276:src/storage.c ****   int fss;
1277:src/storage.c ****   uint x=0;
ARM GAS  /tmp/ccqjxcgd.s 			page 79


1278:src/storage.c ****   char* buffer;
1279:src/storage.c ****   FLASH_REGION* fr;
1280:src/storage.c **** 
1281:src/storage.c ****   
1282:src/storage.c ****   if ( not_running() ) {
1283:src/storage.c ****     /*
1284:src/storage.c ****      *  Don't copy from library or XROM
1285:src/storage.c ****      */
1286:src/storage.c ****     pc = nLIB( state_pc() );
1287:src/storage.c ****     if ( pc == REGION_XROM ) {
1288:src/storage.c ****       error_message( ERR_ILLEGAL );
1289:src/storage.c ****       return;
1290:src/storage.c ****     }
1291:src/storage.c ****     /*
1292:src/storage.c ****      *  Check if program is labeled
1293:src/storage.c ****      */
1294:src/storage.c ****     update_program_bounds( 1 );
1295:src/storage.c ****     lbl = getprog( ProgBegin );
1296:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1297:src/storage.c ****       error_message( ERR_NO_LBL );
1298:src/storage.c ****       return;
1299:src/storage.c ****     }
1300:src/storage.c ****     /*
1301:src/storage.c ****      *  Compute steps and crc for program
1302:src/storage.c ****      */
1303:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
1304:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
1305:src/storage.c ****     /*
1306:src/storage.c ****      * Get filename and open file
1307:src/storage.c ****      */
1308:src/storage.c ****     sys_disk_write_enable(1);
1309:src/storage.c **** 
1310:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
1311:src/storage.c ****     if (fss != 1) return;
1312:src/storage.c **** 
1313:src/storage.c ****     // File is now open with correct permissions
1314:src/storage.c **** 
1315:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
1316:src/storage.c ****     if (!buffer) {// calloc failure!
1317:src/storage.c ****       f_close(FPT);
1318:src/storage.c ****       sys_disk_write_enable(0);
1319:src/storage.c ****       DispMsg = "Mem short";
1320:src/storage.c ****       return;
1321:src/storage.c ****     }
1322:src/storage.c **** 
1323:src/storage.c ****     fr = (FLASH_REGION*) buffer;
1324:src/storage.c ****     fr->size = steps;
1325:src/storage.c ****     fr->crc = prog_crc;
1326:src/storage.c **** 
1327:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
1328:src/storage.c ****    
1329:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1330:src/storage.c ****     free(buffer);
1331:src/storage.c ****     
1332:src/storage.c ****     if (f != FR_OK) { //odd?
1333:src/storage.c ****       DispMsg = "Write err";
1334:src/storage.c ****     }
ARM GAS  /tmp/ccqjxcgd.s 			page 80


1335:src/storage.c ****     else {
1336:src/storage.c ****       DispMsg = "Written";
1337:src/storage.c ****     }
1338:src/storage.c ****       
1339:src/storage.c ****     f_close(FPT);
1340:src/storage.c ****     sys_disk_write_enable(0);
1341:src/storage.c ****     
1342:src/storage.c ****   }
1343:src/storage.c **** }
1344:src/storage.c **** 
1345:src/storage.c **** void load_prog_file () {
1346:src/storage.c ****   int fss, fsize;
1347:src/storage.c ****   int data = READ;
1348:src/storage.c ****   uint x=0;
1349:src/storage.c ****   FLASH_REGION* fr;
1350:src/storage.c ****   char* buffer;
1351:src/storage.c **** 
1352:src/storage.c ****   fss = file_selection_screen ("Load PROG File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW,
1353:src/storage.c ****   if (fss != 1) return;
1354:src/storage.c **** 
1355:src/storage.c ****   // File is now open with correct permissions
1356:src/storage.c **** 
1357:src/storage.c ****   fsize = f_size(FPT);
1358:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
1359:src/storage.c ****     f_close(FPT);
1360:src/storage.c ****     DispMsg = "File too big";
1361:src/storage.c ****     return;
1362:src/storage.c ****   }
1363:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1364:src/storage.c ****   if (!buffer) {// calloc failure!
1365:src/storage.c ****     f_close(FPT);
1366:src/storage.c ****     DispMsg = "Mem short";
1367:src/storage.c ****     return;
1368:src/storage.c ****   }
1369:src/storage.c **** 
1370:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1371:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1372:src/storage.c ****     free(buffer);
1373:src/storage.c ****     f_close(FPT);
1374:src/storage.c ****     DispMsg = "File odd";
1375:src/storage.c ****     return;
1376:src/storage.c ****   }
1377:src/storage.c ****   f_close(FPT);
1378:src/storage.c **** 
1379:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1380:src/storage.c ****     
1381:src/storage.c ****   if (checksum_region(fr, fr)) {//crc failed - wrong filetype?
1382:src/storage.c ****     DispMsg = "File crc err";
1383:src/storage.c ****         free(buffer);
1384:src/storage.c ****     return;
1385:src/storage.c ****   }
1386:src/storage.c **** 
1387:src/storage.c ****   store_program_from_buffer (fr);
1388:src/storage.c ****   free(buffer);
1389:src/storage.c **** }
1390:src/storage.c **** 
1391:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
ARM GAS  /tmp/ccqjxcgd.s 			page 81


 2541              		.loc 1 1391 6 is_stmt 1 view -0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 0
 2544              		@ frame_needed = 0, uses_anonymous_args = 0
 2545              	.LBB81:
1392:src/storage.c **** { // buffer contains all of program file
1393:src/storage.c ****   unsigned int pc;
1394:src/storage.c ****   int space_needed, count, free;
1395:src/storage.c **** 
1396:src/storage.c ****   if ( not_running() ) {
1397:src/storage.c ****     /*
1398:src/storage.c ****      *  Check if program is labeled
1399:src/storage.c ****      */
1400:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2546              		.loc 1 1400 5 view .LVU758
1401:src/storage.c ****     if ( isDBL(lbl) ) {
 2547              		.loc 1 1401 5 view .LVU759
 2548              		.loc 1 1401 8 is_stmt 0 view .LVU760
 2549 0000 8388     		ldrh	r3, [r0, #4]
 2550 0002 03F47043 		and	r3, r3, #61440
 2551 0006 B3F5704F 		cmp	r3, #61440
 2552 000a 03D0     		beq	.L223
 2553              	.LVL245:
1402:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
1403:src/storage.c ****     }
1404:src/storage.c ****     
1405:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1406:src/storage.c ****       DispMsg = "No label";
 2554              		.loc 1 1406 7 is_stmt 1 view .LVU761
 2555              		.loc 1 1406 15 is_stmt 0 view .LVU762
 2556 000c 264B     		ldr	r3, .L227
 2557 000e 274A     		ldr	r2, .L227+4
 2558 0010 1A60     		str	r2, [r3]
1407:src/storage.c ****       return;
 2559              		.loc 1 1407 7 is_stmt 1 view .LVU763
 2560 0012 7047     		bx	lr
 2561              	.LVL246:
 2562              	.L223:
1402:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2563              		.loc 1 1402 11 is_stmt 0 view .LVU764
 2564 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1405:src/storage.c ****       DispMsg = "No label";
 2565              		.loc 1 1405 11 view .LVU765
 2566 0016 01F47043 		and	r3, r1, #61440
1405:src/storage.c ****       DispMsg = "No label";
 2567              		.loc 1 1405 8 view .LVU766
 2568 001a B3F5704F 		cmp	r3, #61440
 2569              	.LBE81:
1391:src/storage.c **** { // buffer contains all of program file
 2570              		.loc 1 1391 6 view .LVU767
 2571 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2572              		.cfi_def_cfa_offset 32
 2573              		.cfi_offset 4, -32
 2574              		.cfi_offset 5, -28
 2575              		.cfi_offset 6, -24
 2576              		.cfi_offset 7, -20
 2577              		.cfi_offset 8, -16
ARM GAS  /tmp/ccqjxcgd.s 			page 82


 2578              		.cfi_offset 9, -12
 2579              		.cfi_offset 10, -8
 2580              		.cfi_offset 14, -4
 2581 0022 0446     		mov	r4, r0
 2582              	.LBB84:
1402:src/storage.c ****     }
 2583              		.loc 1 1402 7 is_stmt 1 view .LVU768
 2584              	.LVL247:
1405:src/storage.c ****       DispMsg = "No label";
 2585              		.loc 1 1405 5 view .LVU769
1405:src/storage.c ****       DispMsg = "No label";
 2586              		.loc 1 1405 8 is_stmt 0 view .LVU770
 2587 0024 04D1     		bne	.L211
1405:src/storage.c ****       DispMsg = "No label";
 2588              		.loc 1 1405 22 view .LVU771
 2589 0026 11F4706F 		tst	r1, #3840
1405:src/storage.c ****       DispMsg = "No label";
 2590              		.loc 1 1405 25 view .LVU772
 2591 002a C1F30322 		ubfx	r2, r1, #8, #4
1405:src/storage.c ****       DispMsg = "No label";
 2592              		.loc 1 1405 22 view .LVU773
 2593 002e 04D0     		beq	.L212
 2594              	.L211:
 2595              	.LVL248:
1406:src/storage.c ****       return;
 2596              		.loc 1 1406 7 is_stmt 1 view .LVU774
1406:src/storage.c ****       return;
 2597              		.loc 1 1406 15 is_stmt 0 view .LVU775
 2598 0030 1D4B     		ldr	r3, .L227
 2599 0032 1E4A     		ldr	r2, .L227+4
 2600 0034 1A60     		str	r2, [r3]
 2601              		.loc 1 1407 7 is_stmt 1 view .LVU776
 2602              	.LBE84:
1408:src/storage.c ****     }
1409:src/storage.c ****     /*
1410:src/storage.c ****      *  Compute space needed
1411:src/storage.c ****      */
1412:src/storage.c ****     count = space_needed = fr->size;
1413:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1414:src/storage.c ****     
1415:src/storage.c ****     /*
1416:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1417:src/storage.c ****      */
1418:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1419:src/storage.c ****     if ( pc != 0 ) {
1420:src/storage.c ****       /*
1421:src/storage.c ****        *  CLP in library
1422:src/storage.c ****        */
1423:src/storage.c ****       unsigned int old_pc = state_pc();
1424:src/storage.c ****       set_pc( pc );
1425:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1426:src/storage.c ****       if ( space_needed <= free ) {
1427:src/storage.c **** 	clrprog();
1428:src/storage.c ****       }
1429:src/storage.c ****       set_pc( old_pc );
1430:src/storage.c ****     }
1431:src/storage.c ****     if ( space_needed > free ) {
ARM GAS  /tmp/ccqjxcgd.s 			page 83


1432:src/storage.c ****       error_message( ERR_FLASH_FULL );
1433:src/storage.c ****       return;
1434:src/storage.c ****     }
1435:src/storage.c ****     // 3. Append program
1436:src/storage.c ****     flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1437:src/storage.c ****   }
1438:src/storage.c **** }
 2603              		.loc 1 1438 1 is_stmt 0 view .LVU777
 2604 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2605              	.LVL249:
 2606              	.L212:
 2607              	.LBB85:
1412:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2608              		.loc 1 1412 5 is_stmt 1 view .LVU778
1413:src/storage.c ****     
 2609              		.loc 1 1413 41 is_stmt 0 view .LVU779
 2610 003a DFF87880 		ldr	r8, .L227+12
1412:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2611              		.loc 1 1412 26 view .LVU780
 2612 003e 4788     		ldrh	r7, [r0, #2]
 2613              	.LVL250:
1413:src/storage.c ****     
 2614              		.loc 1 1413 5 is_stmt 1 view .LVU781
1413:src/storage.c ****     
 2615              		.loc 1 1413 41 is_stmt 0 view .LVU782
 2616 0040 D8F80030 		ldr	r3, [r8]
1418:src/storage.c ****     if ( pc != 0 ) {
 2617              		.loc 1 1418 10 view .LVU783
 2618 0044 4FF48040 		mov	r0, #16384
 2619              	.LVL251:
1413:src/storage.c ****     
 2620              		.loc 1 1413 41 view .LVU784
 2621 0048 5D88     		ldrh	r5, [r3, #2]
1418:src/storage.c ****     if ( pc != 0 ) {
 2622              		.loc 1 1418 10 view .LVU785
 2623 004a FFF7FEFF 		bl	find_opcode_from
 2624              	.LVL252:
1413:src/storage.c ****     
 2625              		.loc 1 1413 10 view .LVU786
 2626 004e C5F5FF55 		rsb	r5, r5, #8160
 2627 0052 1E35     		adds	r5, r5, #30
 2628              	.LVL253:
1418:src/storage.c ****     if ( pc != 0 ) {
 2629              		.loc 1 1418 5 is_stmt 1 view .LVU787
1419:src/storage.c ****       /*
 2630              		.loc 1 1419 5 view .LVU788
1419:src/storage.c ****       /*
 2631              		.loc 1 1419 8 is_stmt 0 view .LVU789
 2632 0054 60B9     		cbnz	r0, .L224
1412:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2633              		.loc 1 1412 26 view .LVU790
 2634 0056 3E46     		mov	r6, r7
 2635              	.LVL254:
 2636              	.L214:
1431:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2637              		.loc 1 1431 5 is_stmt 1 view .LVU791
1431:src/storage.c ****       error_message( ERR_FLASH_FULL );
ARM GAS  /tmp/ccqjxcgd.s 			page 84


 2638              		.loc 1 1431 8 is_stmt 0 view .LVU792
 2639 0058 B542     		cmp	r5, r6
 2640 005a 1DDB     		blt	.L225
1436:src/storage.c ****   }
 2641              		.loc 1 1436 5 is_stmt 1 view .LVU793
1436:src/storage.c ****   }
 2642              		.loc 1 1436 28 is_stmt 0 view .LVU794
 2643 005c D8F80030 		ldr	r3, [r8]
1436:src/storage.c ****   }
 2644              		.loc 1 1436 5 view .LVU795
 2645 0060 5888     		ldrh	r0, [r3, #2]
 2646 0062 211D     		adds	r1, r4, #4
 2647 0064 3B18     		adds	r3, r7, r0
 2648 0066 3A46     		mov	r2, r7
 2649              	.LBE85:
 2650              		.loc 1 1438 1 view .LVU796
 2651 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2652              		.cfi_remember_state
 2653              		.cfi_restore 14
 2654              		.cfi_restore 10
 2655              		.cfi_restore 9
 2656              		.cfi_restore 8
 2657              		.cfi_restore 7
 2658              		.cfi_restore 6
 2659              		.cfi_restore 5
 2660              		.cfi_restore 4
 2661              		.cfi_def_cfa_offset 0
 2662              	.LVL255:
 2663              	.LBB86:
1436:src/storage.c ****   }
 2664              		.loc 1 1436 5 view .LVU797
 2665 006c FFF7FEBF 		b	flash_append
 2666              	.LVL256:
 2667              	.L224:
 2668              		.cfi_restore_state
 2669              	.LBB82:
1423:src/storage.c ****       set_pc( pc );
 2670              		.loc 1 1423 7 is_stmt 1 view .LVU798
1423:src/storage.c ****       set_pc( pc );
 2671              		.loc 1 1423 29 is_stmt 0 view .LVU799
 2672 0070 0F4E     		ldr	r6, .L227+8
 2673 0072 3368     		ldr	r3, [r6]
1423:src/storage.c ****       set_pc( pc );
 2674              		.loc 1 1423 20 view .LVU800
 2675 0074 B3F8E09F 		ldrh	r9, [r3, #4064]
 2676              	.LVL257:
1424:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2677              		.loc 1 1424 7 is_stmt 1 view .LVU801
 2678 0078 FFF7FEFF 		bl	set_pc
 2679              	.LVL258:
1425:src/storage.c ****       if ( space_needed <= free ) {
 2680              		.loc 1 1425 7 view .LVU802
1425:src/storage.c ****       if ( space_needed <= free ) {
 2681              		.loc 1 1425 27 is_stmt 0 view .LVU803
 2682 007c 3368     		ldr	r3, [r6]
 2683 007e B3F8EE6F 		ldrh	r6, [r3, #4078]
1425:src/storage.c ****       if ( space_needed <= free ) {
ARM GAS  /tmp/ccqjxcgd.s 			page 85


 2684              		.loc 1 1425 37 view .LVU804
 2685 0082 B3F8EC3F 		ldrh	r3, [r3, #4076]
1425:src/storage.c ****       if ( space_needed <= free ) {
 2686              		.loc 1 1425 25 view .LVU805
 2687 0086 0136     		adds	r6, r6, #1
1425:src/storage.c ****       if ( space_needed <= free ) {
 2688              		.loc 1 1425 35 view .LVU806
 2689 0088 F61A     		subs	r6, r6, r3
1425:src/storage.c ****       if ( space_needed <= free ) {
 2690              		.loc 1 1425 20 view .LVU807
 2691 008a BE1B     		subs	r6, r7, r6
 2692              	.LVL259:
1426:src/storage.c **** 	clrprog();
 2693              		.loc 1 1426 7 is_stmt 1 view .LVU808
1426:src/storage.c **** 	clrprog();
 2694              		.loc 1 1426 10 is_stmt 0 view .LVU809
 2695 008c B542     		cmp	r5, r6
 2696 008e 08DA     		bge	.L226
 2697              	.L215:
1429:src/storage.c ****     }
 2698              		.loc 1 1429 7 is_stmt 1 view .LVU810
 2699 0090 4846     		mov	r0, r9
 2700 0092 FFF7FEFF 		bl	set_pc
 2701              	.LVL260:
 2702 0096 DFE7     		b	.L214
 2703              	.LVL261:
 2704              	.L225:
1429:src/storage.c ****     }
 2705              		.loc 1 1429 7 is_stmt 0 view .LVU811
 2706              	.LBE82:
1432:src/storage.c ****       return;
 2707              		.loc 1 1432 7 is_stmt 1 view .LVU812
 2708              	.LBE86:
 2709              		.loc 1 1438 1 is_stmt 0 view .LVU813
 2710 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2711              		.cfi_remember_state
 2712              		.cfi_restore 14
 2713              		.cfi_restore 10
 2714              		.cfi_restore 9
 2715              		.cfi_restore 8
 2716              		.cfi_restore 7
 2717              		.cfi_restore 6
 2718              		.cfi_restore 5
 2719              		.cfi_restore 4
 2720              		.cfi_def_cfa_offset 0
 2721              	.LVL262:
 2722              	.LBB87:
1432:src/storage.c ****       return;
 2723              		.loc 1 1432 7 view .LVU814
 2724 009c 1720     		movs	r0, #23
 2725 009e FFF7FEBF 		b	error_message
 2726              	.LVL263:
 2727              	.L226:
 2728              		.cfi_restore_state
 2729              	.LBB83:
1427:src/storage.c ****       }
 2730              		.loc 1 1427 2 is_stmt 1 view .LVU815
ARM GAS  /tmp/ccqjxcgd.s 			page 86


 2731 00a2 FFF7FEFF 		bl	clrprog
 2732              	.LVL264:
 2733 00a6 F3E7     		b	.L215
 2734              	.L228:
 2735              		.align	2
 2736              	.L227:
 2737 00a8 00000000 		.word	DispMsg
 2738 00ac 00000000 		.word	.LC7
 2739 00b0 00000000 		.word	main_ram
 2740 00b4 00000000 		.word	library_ram
 2741              	.LBE83:
 2742              	.LBE87:
 2743              		.cfi_endproc
 2744              	.LFE43:
 2746              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2747              		.align	2
 2748              	.LC8:
 2749 0000 4572726F 		.ascii	"Error\000"
 2749      7200
 2750 0006 0000     		.align	2
 2751              	.LC9:
 2752 0008 53617665 		.ascii	"Saved\000"
 2752      6400
 2753              		.section	.text.flash_backup,"ax",%progbits
 2754              		.align	1
 2755              		.p2align 2,,3
 2756              		.global	flash_backup
 2757              		.syntax unified
 2758              		.thumb
 2759              		.thumb_func
 2760              		.fpu fpv4-sp-d16
 2762              	flash_backup:
 2763              	.LVL265:
 2764              	.LFB25:
 762:src/storage.c **** 	if ( not_running() ) {
 2765              		.loc 1 762 1 view -0
 2766              		.cfi_startproc
 2767              		@ args = 0, pretend = 0, frame = 0
 2768              		@ frame_needed = 0, uses_anonymous_args = 0
 763:src/storage.c **** 		process_cmdline_set_lift();
 2769              		.loc 1 763 2 view .LVU817
 762:src/storage.c **** 	if ( not_running() ) {
 2770              		.loc 1 762 1 is_stmt 0 view .LVU818
 2771 0000 10B5     		push	{r4, lr}
 2772              		.cfi_def_cfa_offset 8
 2773              		.cfi_offset 4, -8
 2774              		.cfi_offset 14, -4
 763:src/storage.c **** 		process_cmdline_set_lift();
 2775              		.loc 1 763 7 view .LVU819
 2776 0002 FFF7FEFF 		bl	not_running
 2777              	.LVL266:
 763:src/storage.c **** 		process_cmdline_set_lift();
 2778              		.loc 1 763 5 view .LVU820
 2779 0006 00B9     		cbnz	r0, .L236
 775:src/storage.c **** 
 2780              		.loc 1 775 1 view .LVU821
 2781 0008 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccqjxcgd.s 			page 87


 2782              	.L236:
 764:src/storage.c **** 		init_state();
 2783              		.loc 1 764 3 is_stmt 1 view .LVU822
 2784              	.LBB88:
 2785              	.LBB89:
 213:src/storage.c **** 			      Crc, &Crc );
 2786              		.loc 1 213 9 is_stmt 0 view .LVU823
 2787 000a 0F4C     		ldr	r4, .L238
 2788              	.LBE89:
 2789              	.LBE88:
 764:src/storage.c **** 		init_state();
 2790              		.loc 1 764 3 view .LVU824
 2791 000c FFF7FEFF 		bl	process_cmdline_set_lift
 2792              	.LVL267:
 765:src/storage.c **** 		checksum_all();
 2793              		.loc 1 765 3 is_stmt 1 view .LVU825
 2794 0010 FFF7FEFF 		bl	init_state
 2795              	.LVL268:
 766:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2796              		.loc 1 766 3 view .LVU826
 2797              	.LBB91:
 2798              	.LBI88:
 211:src/storage.c **** {
 2799              		.loc 1 211 5 view .LVU827
 2800              	.LBB90:
 213:src/storage.c **** 			      Crc, &Crc );
 2801              		.loc 1 213 2 view .LVU828
 213:src/storage.c **** 			      Crc, &Crc );
 2802              		.loc 1 213 9 is_stmt 0 view .LVU829
 2803 0014 2068     		ldr	r0, [r4]
 2804 0016 40F6FE71 		movw	r1, #4094
 2805 001a 4318     		adds	r3, r0, r1
 2806 001c B0F8FE2F 		ldrh	r2, [r0, #4094]
 2807 0020 FFF7FEFF 		bl	test_checksum
 2808              	.LVL269:
 2809              	.LBE90:
 2810              	.LBE91:
 767:src/storage.c **** 			error_message( ERR_IO );
 2811              		.loc 1 767 3 is_stmt 1 view .LVU830
 767:src/storage.c **** 			error_message( ERR_IO );
 2812              		.loc 1 767 8 is_stmt 0 view .LVU831
 2813 0024 094B     		ldr	r3, .L238+4
 2814 0026 2168     		ldr	r1, [r4]
 2815 0028 1868     		ldr	r0, [r3]
 2816 002a 1022     		movs	r2, #16
 2817 002c FFF7FEFF 		bl	program_flash
 2818              	.LVL270:
 767:src/storage.c **** 			error_message( ERR_IO );
 2819              		.loc 1 767 6 view .LVU832
 2820 0030 18B9     		cbnz	r0, .L237
 772:src/storage.c **** 		}
 2821              		.loc 1 772 4 is_stmt 1 view .LVU833
 772:src/storage.c **** 		}
 2822              		.loc 1 772 12 is_stmt 0 view .LVU834
 2823 0032 074B     		ldr	r3, .L238+8
 2824 0034 074A     		ldr	r2, .L238+12
 2825 0036 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccqjxcgd.s 			page 88


 775:src/storage.c **** 
 2826              		.loc 1 775 1 view .LVU835
 2827 0038 10BD     		pop	{r4, pc}
 2828              	.L237:
 768:src/storage.c **** 			DispMsg = "Error";
 2829              		.loc 1 768 4 is_stmt 1 view .LVU836
 2830 003a 1120     		movs	r0, #17
 2831 003c FFF7FEFF 		bl	error_message
 2832              	.LVL271:
 769:src/storage.c **** 		}
 2833              		.loc 1 769 4 view .LVU837
 769:src/storage.c **** 		}
 2834              		.loc 1 769 12 is_stmt 0 view .LVU838
 2835 0040 034B     		ldr	r3, .L238+8
 2836 0042 054A     		ldr	r2, .L238+16
 2837 0044 1A60     		str	r2, [r3]
 775:src/storage.c **** 
 2838              		.loc 1 775 1 view .LVU839
 2839 0046 10BD     		pop	{r4, pc}
 2840              	.L239:
 2841              		.align	2
 2842              	.L238:
 2843 0048 00000000 		.word	main_ram
 2844 004c 00000000 		.word	backup_ram
 2845 0050 00000000 		.word	DispMsg
 2846 0054 08000000 		.word	.LC9
 2847 0058 00000000 		.word	.LC8
 2848              		.cfi_endproc
 2849              	.LFE25:
 2851              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2852              		.align	2
 2853              	.LC10:
 2854 0000 52657374 		.ascii	"Restored\000"
 2854      6F726564 
 2854      00
 2855              		.section	.text.flash_restore,"ax",%progbits
 2856              		.align	1
 2857              		.p2align 2,,3
 2858              		.global	flash_restore
 2859              		.syntax unified
 2860              		.thumb
 2861              		.thumb_func
 2862              		.fpu fpv4-sp-d16
 2864              	flash_restore:
 2865              	.LVL272:
 2866              	.LFB26:
 779:src/storage.c **** 	if ( not_running() ) {
 2867              		.loc 1 779 1 is_stmt 1 view -0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 0
 2870              		@ frame_needed = 0, uses_anonymous_args = 0
 780:src/storage.c **** 		if ( checksum_backup() ) {
 2871              		.loc 1 780 2 view .LVU841
 779:src/storage.c **** 	if ( not_running() ) {
 2872              		.loc 1 779 1 is_stmt 0 view .LVU842
 2873 0000 08B5     		push	{r3, lr}
 2874              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccqjxcgd.s 			page 89


 2875              		.cfi_offset 3, -8
 2876              		.cfi_offset 14, -4
 780:src/storage.c **** 		if ( checksum_backup() ) {
 2877              		.loc 1 780 7 view .LVU843
 2878 0002 FFF7FEFF 		bl	not_running
 2879              	.LVL273:
 780:src/storage.c **** 		if ( checksum_backup() ) {
 2880              		.loc 1 780 5 view .LVU844
 2881 0006 A0B1     		cbz	r0, .L240
 781:src/storage.c **** 			error_message( ERR_INVALID );
 2882              		.loc 1 781 3 is_stmt 1 view .LVU845
 781:src/storage.c **** 			error_message( ERR_INVALID );
 2883              		.loc 1 781 8 is_stmt 0 view .LVU846
 2884 0008 FFF7FEFF 		bl	checksum_backup
 2885              	.LVL274:
 781:src/storage.c **** 			error_message( ERR_INVALID );
 2886              		.loc 1 781 6 view .LVU847
 2887 000c 20B1     		cbz	r0, .L242
 782:src/storage.c **** 		}
 2888              		.loc 1 782 4 is_stmt 1 view .LVU848
 790:src/storage.c **** 
 2889              		.loc 1 790 1 is_stmt 0 view .LVU849
 2890 000e BDE80840 		pop	{r3, lr}
 2891              		.cfi_remember_state
 2892              		.cfi_restore 14
 2893              		.cfi_restore 3
 2894              		.cfi_def_cfa_offset 0
 782:src/storage.c **** 		}
 2895              		.loc 1 782 4 view .LVU850
 2896 0012 1220     		movs	r0, #18
 2897 0014 FFF7FEBF 		b	error_message
 2898              	.LVL275:
 2899              	.L242:
 2900              		.cfi_restore_state
 785:src/storage.c **** 			init_state();
 2901              		.loc 1 785 4 is_stmt 1 view .LVU851
 2902 0018 064B     		ldr	r3, .L247
 2903 001a 074A     		ldr	r2, .L247+4
 2904 001c 1868     		ldr	r0, [r3]
 2905 001e 1168     		ldr	r1, [r2]
 2906 0020 4FF48052 		mov	r2, #4096
 2907 0024 FFF7FEFF 		bl	xcopy
 2908              	.LVL276:
 786:src/storage.c **** 			DispMsg = "Restored";
 2909              		.loc 1 786 4 view .LVU852
 2910 0028 FFF7FEFF 		bl	init_state
 2911              	.LVL277:
 787:src/storage.c **** 		}
 2912              		.loc 1 787 4 view .LVU853
 787:src/storage.c **** 		}
 2913              		.loc 1 787 12 is_stmt 0 view .LVU854
 2914 002c 034B     		ldr	r3, .L247+8
 2915 002e 044A     		ldr	r2, .L247+12
 2916 0030 1A60     		str	r2, [r3]
 2917              	.L240:
 790:src/storage.c **** 
 2918              		.loc 1 790 1 view .LVU855
ARM GAS  /tmp/ccqjxcgd.s 			page 90


 2919 0032 08BD     		pop	{r3, pc}
 2920              	.L248:
 2921              		.align	2
 2922              	.L247:
 2923 0034 00000000 		.word	main_ram
 2924 0038 00000000 		.word	backup_ram
 2925 003c 00000000 		.word	DispMsg
 2926 0040 00000000 		.word	.LC10
 2927              		.cfi_endproc
 2928              	.LFE26:
 2930              		.section	.text.load_program,"ax",%progbits
 2931              		.align	1
 2932              		.p2align 2,,3
 2933              		.global	load_program
 2934              		.syntax unified
 2935              		.thumb
 2936              		.thumb_func
 2937              		.fpu fpv4-sp-d16
 2939              	load_program:
 2940              	.LVL278:
 2941              	.LFB27:
 798:src/storage.c **** 	if ( not_running() ) {
 2942              		.loc 1 798 1 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 799:src/storage.c **** 		if ( checksum_backup() ) {
 2946              		.loc 1 799 2 view .LVU857
 798:src/storage.c **** 	if ( not_running() ) {
 2947              		.loc 1 798 1 is_stmt 0 view .LVU858
 2948 0000 08B5     		push	{r3, lr}
 2949              		.cfi_def_cfa_offset 8
 2950              		.cfi_offset 3, -8
 2951              		.cfi_offset 14, -4
 799:src/storage.c **** 		if ( checksum_backup() ) {
 2952              		.loc 1 799 7 view .LVU859
 2953 0002 FFF7FEFF 		bl	not_running
 2954              	.LVL279:
 799:src/storage.c **** 		if ( checksum_backup() ) {
 2955              		.loc 1 799 5 view .LVU860
 2956 0006 98B1     		cbz	r0, .L249
 800:src/storage.c **** 			/*
 2957              		.loc 1 800 3 is_stmt 1 view .LVU861
 800:src/storage.c **** 			/*
 2958              		.loc 1 800 8 is_stmt 0 view .LVU862
 2959 0008 FFF7FEFF 		bl	checksum_backup
 2960              	.LVL280:
 800:src/storage.c **** 			/*
 2961              		.loc 1 800 6 view .LVU863
 2962 000c 88B9     		cbnz	r0, .L253
 807:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2963              		.loc 1 807 3 is_stmt 1 view .LVU864
 2964              	.LBB92:
 2965              	.LBI92:
 254:src/storage.c **** {
 2966              		.loc 1 254 6 view .LVU865
 2967              	.LBB93:
ARM GAS  /tmp/ccqjxcgd.s 			page 91


 256:src/storage.c **** 	stoend();
 2968              		.loc 1 256 2 view .LVU866
 2969 000e FFF7FEFF 		bl	clrretstk_pc
 2970              	.LVL281:
 257:src/storage.c **** }
 2971              		.loc 1 257 2 view .LVU867
 2972              	.LBB94:
 2973              	.LBI94:
 244:src/storage.c **** {
 2974              		.loc 1 244 13 view .LVU868
 2975              	.LBB95:
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2976              		.loc 1 246 2 view .LVU869
 2977 0012 0A4B     		ldr	r3, .L254
 2978              	.LBE95:
 2979              	.LBE94:
 2980              	.LBE93:
 2981              	.LBE92:
 808:src/storage.c **** 	}
 2982              		.loc 1 808 19 is_stmt 0 view .LVU870
 2983 0014 0A4A     		ldr	r2, .L254+4
 2984              	.LBB105:
 2985              	.LBB102:
 2986              	.LBB99:
 2987              	.LBB96:
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2988              		.loc 1 246 2 view .LVU871
 2989 0016 1B68     		ldr	r3, [r3]
 2990              	.LBE96:
 2991              	.LBE99:
 2992              	.LBE102:
 2993              	.LBE105:
 808:src/storage.c **** 	}
 2994              		.loc 1 808 19 view .LVU872
 2995 0018 1068     		ldr	r0, [r2]
 2996              	.LBB106:
 2997              	.LBB103:
 2998              	.LBB100:
 2999              	.LBB97:
 246:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 3000              		.loc 1 246 11 view .LVU873
 3001 001a 0122     		movs	r2, #1
 3002 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 247:src/storage.c **** }
 3003              		.loc 1 247 2 is_stmt 1 view .LVU874
 247:src/storage.c **** }
 3004              		.loc 1 247 12 is_stmt 0 view .LVU875
 3005 001e 4FF49D72 		mov	r2, #314
 3006              	.LBE97:
 3007              	.LBE100:
 3008              	.LBE103:
 3009              	.LBE106:
 808:src/storage.c **** 	}
 3010              		.loc 1 808 3 view .LVU876
 3011 0022 4188     		ldrh	r1, [r0, #2]
 3012              	.LBB107:
 3013              	.LBB104:
ARM GAS  /tmp/ccqjxcgd.s 			page 92


 3014              	.LBB101:
 3015              	.LBB98:
 247:src/storage.c **** }
 3016              		.loc 1 247 12 view .LVU877
 3017 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 3018              	.LBE98:
 3019              	.LBE101:
 3020              	.LBE104:
 3021              	.LBE107:
 808:src/storage.c **** 	}
 3022              		.loc 1 808 3 is_stmt 1 view .LVU878
 3023 0026 0430     		adds	r0, r0, #4
 810:src/storage.c **** 
 3024              		.loc 1 810 1 is_stmt 0 view .LVU879
 3025 0028 BDE80840 		pop	{r3, lr}
 3026              		.cfi_remember_state
 3027              		.cfi_restore 14
 3028              		.cfi_restore 3
 3029              		.cfi_def_cfa_offset 0
 808:src/storage.c **** 	}
 3030              		.loc 1 808 3 view .LVU880
 3031 002c FFF7FEBF 		b	append_program
 3032              	.LVL282:
 3033              	.L249:
 3034              		.cfi_restore_state
 810:src/storage.c **** 
 3035              		.loc 1 810 1 view .LVU881
 3036 0030 08BD     		pop	{r3, pc}
 3037              	.L253:
 804:src/storage.c **** 			return;
 3038              		.loc 1 804 4 is_stmt 1 view .LVU882
 810:src/storage.c **** 
 3039              		.loc 1 810 1 is_stmt 0 view .LVU883
 3040 0032 BDE80840 		pop	{r3, lr}
 3041              		.cfi_restore 14
 3042              		.cfi_restore 3
 3043              		.cfi_def_cfa_offset 0
 804:src/storage.c **** 			return;
 3044              		.loc 1 804 4 view .LVU884
 3045 0036 1220     		movs	r0, #18
 3046 0038 FFF7FEBF 		b	report_err
 3047              	.LVL283:
 3048              	.L255:
 3049              		.align	2
 3050              	.L254:
 3051 003c 00000000 		.word	main_ram
 3052 0040 00000000 		.word	backup_ram
 3053              		.cfi_endproc
 3054              	.LFE27:
 3056              		.section	.text.load_registers,"ax",%progbits
 3057              		.align	1
 3058              		.p2align 2,,3
 3059              		.global	load_registers
 3060              		.syntax unified
 3061              		.thumb
 3062              		.thumb_func
 3063              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqjxcgd.s 			page 93


 3065              	load_registers:
 3066              	.LVL284:
 3067              	.LFB28:
 817:src/storage.c **** 	int count;
 3068              		.loc 1 817 1 is_stmt 1 view -0
 3069              		.cfi_startproc
 3070              		@ args = 0, pretend = 0, frame = 0
 3071              		@ frame_needed = 0, uses_anonymous_args = 0
 818:src/storage.c **** 	if ( checksum_backup() ) {
 3072              		.loc 1 818 2 view .LVU886
 819:src/storage.c **** 		/*
 3073              		.loc 1 819 2 view .LVU887
 817:src/storage.c **** 	int count;
 3074              		.loc 1 817 1 is_stmt 0 view .LVU888
 3075 0000 38B5     		push	{r3, r4, r5, lr}
 3076              		.cfi_def_cfa_offset 16
 3077              		.cfi_offset 3, -16
 3078              		.cfi_offset 4, -12
 3079              		.cfi_offset 5, -8
 3080              		.cfi_offset 14, -4
 819:src/storage.c **** 		/*
 3081              		.loc 1 819 7 view .LVU889
 3082 0002 FFF7FEFF 		bl	checksum_backup
 3083              	.LVL285:
 819:src/storage.c **** 		/*
 3084              		.loc 1 819 5 view .LVU890
 3085 0006 E0B9     		cbnz	r0, .L263
 826:src/storage.c **** 	if ( is_dblmode() ) {
 3086              		.loc 1 826 2 is_stmt 1 view .LVU891
 826:src/storage.c **** 	if ( is_dblmode() ) {
 3087              		.loc 1 826 10 is_stmt 0 view .LVU892
 3088 0008 104B     		ldr	r3, .L264
 3089 000a 1B68     		ldr	r3, [r3]
 826:src/storage.c **** 	if ( is_dblmode() ) {
 3090              		.loc 1 826 8 view .LVU893
 3091 000c 93F8CF4F 		ldrb	r4, [r3, #4047]	@ zero_extendqisi2
 3092              	.LVL286:
 827:src/storage.c **** 		// Don't clobber the stack in DP mode
 3093              		.loc 1 827 2 is_stmt 1 view .LVU894
 827:src/storage.c **** 		// Don't clobber the stack in DP mode
 3094              		.loc 1 827 7 is_stmt 0 view .LVU895
 3095 0010 FFF7FEFF 		bl	is_dblmode
 3096              	.LVL287:
 827:src/storage.c **** 		// Don't clobber the stack in DP mode
 3097              		.loc 1 827 5 view .LVU896
 3098 0014 00B1     		cbz	r0, .L258
 829:src/storage.c **** 	}
 3099              		.loc 1 829 3 is_stmt 1 view .LVU897
 829:src/storage.c **** 	}
 3100              		.loc 1 829 9 is_stmt 0 view .LVU898
 3101 0016 0C3C     		subs	r4, r4, #12
 3102              	.LVL288:
 3103              	.L258:
 831:src/storage.c **** 		count = BackupFlash._numregs;
 3104              		.loc 1 831 2 is_stmt 1 view .LVU899
 831:src/storage.c **** 		count = BackupFlash._numregs;
 3105              		.loc 1 831 26 is_stmt 0 view .LVU900
ARM GAS  /tmp/ccqjxcgd.s 			page 94


 3106 0018 0D4B     		ldr	r3, .L264+4
 3107 001a 1B68     		ldr	r3, [r3]
 3108 001c 93F8CF5F 		ldrb	r5, [r3, #4047]	@ zero_extendqisi2
 834:src/storage.c **** }
 3109              		.loc 1 834 9 view .LVU901
 3110 0020 0020     		movs	r0, #0
 3111 0022 A542     		cmp	r5, r4
 3112 0024 A8BF     		it	ge
 3113 0026 2546     		movge	r5, r4
 3114              	.LVL289:
 834:src/storage.c **** }
 3115              		.loc 1 834 2 is_stmt 1 view .LVU902
 834:src/storage.c **** }
 3116              		.loc 1 834 9 is_stmt 0 view .LVU903
 3117 0028 FFF7FEFF 		bl	get_reg_n
 3118              	.LVL290:
 3119 002c 0446     		mov	r4, r0
 834:src/storage.c **** }
 3120              		.loc 1 834 23 view .LVU904
 3121 002e 0020     		movs	r0, #0
 3122 0030 FFF7FEFF 		bl	get_flash_reg_n
 3123              	.LVL291:
 834:src/storage.c **** }
 3124              		.loc 1 834 2 view .LVU905
 3125 0034 EA00     		lsls	r2, r5, #3
 834:src/storage.c **** }
 3126              		.loc 1 834 23 view .LVU906
 3127 0036 0146     		mov	r1, r0
 834:src/storage.c **** }
 3128              		.loc 1 834 2 view .LVU907
 3129 0038 2046     		mov	r0, r4
 835:src/storage.c **** 
 3130              		.loc 1 835 1 view .LVU908
 3131 003a BDE83840 		pop	{r3, r4, r5, lr}
 3132              		.cfi_remember_state
 3133              		.cfi_restore 14
 3134              		.cfi_restore 5
 3135              		.cfi_restore 4
 3136              		.cfi_restore 3
 3137              		.cfi_def_cfa_offset 0
 3138              	.LVL292:
 834:src/storage.c **** }
 3139              		.loc 1 834 2 view .LVU909
 3140 003e FFF7FEBF 		b	xcopy
 3141              	.LVL293:
 3142              	.L263:
 3143              		.cfi_restore_state
 823:src/storage.c **** 		return;
 3144              		.loc 1 823 3 is_stmt 1 view .LVU910
 835:src/storage.c **** 
 3145              		.loc 1 835 1 is_stmt 0 view .LVU911
 3146 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3147              		.cfi_restore 14
 3148              		.cfi_restore 5
 3149              		.cfi_restore 4
 3150              		.cfi_restore 3
 3151              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccqjxcgd.s 			page 95


 823:src/storage.c **** 		return;
 3152              		.loc 1 823 3 view .LVU912
 3153 0046 1220     		movs	r0, #18
 3154 0048 FFF7FEBF 		b	report_err
 3155              	.LVL294:
 3156              	.L265:
 3157              		.align	2
 3158              	.L264:
 3159 004c 00000000 		.word	main_ram
 3160 0050 00000000 		.word	backup_ram
 3161              		.cfi_endproc
 3162              	.LFE28:
 3164              		.section	.text.load_sigma,"ax",%progbits
 3165              		.align	1
 3166              		.p2align 2,,3
 3167              		.global	load_sigma
 3168              		.syntax unified
 3169              		.thumb
 3170              		.thumb_func
 3171              		.fpu fpv4-sp-d16
 3173              	load_sigma:
 3174              	.LVL295:
 3175              	.LFB29:
 842:src/storage.c **** 	if ( checksum_backup() ) {
 3176              		.loc 1 842 1 is_stmt 1 view -0
 3177              		.cfi_startproc
 3178              		@ args = 0, pretend = 0, frame = 0
 3179              		@ frame_needed = 0, uses_anonymous_args = 0
 843:src/storage.c **** 		/*
 3180              		.loc 1 843 2 view .LVU914
 842:src/storage.c **** 	if ( checksum_backup() ) {
 3181              		.loc 1 842 1 is_stmt 0 view .LVU915
 3182 0000 08B5     		push	{r3, lr}
 3183              		.cfi_def_cfa_offset 8
 3184              		.cfi_offset 3, -8
 3185              		.cfi_offset 14, -4
 843:src/storage.c **** 		/*
 3186              		.loc 1 843 7 view .LVU916
 3187 0002 FFF7FEFF 		bl	checksum_backup
 3188              	.LVL296:
 843:src/storage.c **** 		/*
 3189              		.loc 1 843 5 view .LVU917
 3190 0006 B0B9     		cbnz	r0, .L270
 850:src/storage.c **** 		/*
 3191              		.loc 1 850 2 is_stmt 1 view .LVU918
 850:src/storage.c **** 		/*
 3192              		.loc 1 850 9 is_stmt 0 view .LVU919
 3193 0008 0D4B     		ldr	r3, .L272
 3194 000a 1868     		ldr	r0, [r3]
 850:src/storage.c **** 		/*
 3195              		.loc 1 850 7 view .LVU920
 3196 000c 90F8DD3F 		ldrb	r3, [r0, #4061]	@ zero_extendqisi2
 850:src/storage.c **** 		/*
 3197              		.loc 1 850 5 view .LVU921
 3198 0010 9B06     		lsls	r3, r3, #26
 3199 0012 0BD5     		bpl	.L271
 857:src/storage.c **** }
ARM GAS  /tmp/ccqjxcgd.s 			page 96


 3200              		.loc 1 857 2 is_stmt 1 view .LVU922
 857:src/storage.c **** }
 3201              		.loc 1 857 56 is_stmt 0 view .LVU923
 3202 0014 90F8CF3F 		ldrb	r3, [r0, #4047]	@ zero_extendqisi2
 3203 0018 C3F16403 		rsb	r3, r3, #100
 857:src/storage.c **** }
 3204              		.loc 1 857 81 view .LVU924
 3205 001c 00EBC300 		add	r0, r0, r3, lsl #3
 857:src/storage.c **** }
 3206              		.loc 1 857 2 view .LVU925
 3207 0020 00F53A60 		add	r0, r0, #2976
 858:src/storage.c **** 
 3208              		.loc 1 858 1 view .LVU926
 3209 0024 BDE80840 		pop	{r3, lr}
 3210              		.cfi_remember_state
 3211              		.cfi_restore 14
 3212              		.cfi_restore 3
 3213              		.cfi_def_cfa_offset 0
 857:src/storage.c **** }
 3214              		.loc 1 857 2 view .LVU927
 3215 0028 FFF7FEBF 		b	sigmaCopy
 3216              	.LVL297:
 3217              	.L271:
 3218              		.cfi_restore_state
 854:src/storage.c **** 		return;
 3219              		.loc 1 854 3 is_stmt 1 view .LVU928
 858:src/storage.c **** 
 3220              		.loc 1 858 1 is_stmt 0 view .LVU929
 3221 002c BDE80840 		pop	{r3, lr}
 3222              		.cfi_remember_state
 3223              		.cfi_restore 14
 3224              		.cfi_restore 3
 3225              		.cfi_def_cfa_offset 0
 854:src/storage.c **** 		return;
 3226              		.loc 1 854 3 view .LVU930
 3227 0030 0F20     		movs	r0, #15
 3228 0032 FFF7FEBF 		b	report_err
 3229              	.LVL298:
 3230              	.L270:
 3231              		.cfi_restore_state
 847:src/storage.c **** 		return;
 3232              		.loc 1 847 3 is_stmt 1 view .LVU931
 858:src/storage.c **** 
 3233              		.loc 1 858 1 is_stmt 0 view .LVU932
 3234 0036 BDE80840 		pop	{r3, lr}
 3235              		.cfi_restore 14
 3236              		.cfi_restore 3
 3237              		.cfi_def_cfa_offset 0
 847:src/storage.c **** 		return;
 3238              		.loc 1 847 3 view .LVU933
 3239 003a 1220     		movs	r0, #18
 3240 003c FFF7FEBF 		b	report_err
 3241              	.LVL299:
 3242              	.L273:
 3243              		.align	2
 3244              	.L272:
 3245 0040 00000000 		.word	backup_ram
ARM GAS  /tmp/ccqjxcgd.s 			page 97


 3246              		.cfi_endproc
 3247              	.LFE29:
 3249              		.section	.text.load_state,"ax",%progbits
 3250              		.align	1
 3251              		.p2align 2,,3
 3252              		.global	load_state
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu fpv4-sp-d16
 3258              	load_state:
 3259              	.LVL300:
 3260              	.LFB30:
 865:src/storage.c **** 	if ( not_running() ) {
 3261              		.loc 1 865 1 is_stmt 1 view -0
 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 0
 3264              		@ frame_needed = 0, uses_anonymous_args = 0
 866:src/storage.c **** 		if ( checksum_backup() ) {
 3265              		.loc 1 866 2 view .LVU935
 865:src/storage.c **** 	if ( not_running() ) {
 3266              		.loc 1 865 1 is_stmt 0 view .LVU936
 3267 0000 08B5     		push	{r3, lr}
 3268              		.cfi_def_cfa_offset 8
 3269              		.cfi_offset 3, -8
 3270              		.cfi_offset 14, -4
 866:src/storage.c **** 		if ( checksum_backup() ) {
 3271              		.loc 1 866 7 view .LVU937
 3272 0002 FFF7FEFF 		bl	not_running
 3273              	.LVL301:
 866:src/storage.c **** 		if ( checksum_backup() ) {
 3274              		.loc 1 866 5 view .LVU938
 3275 0006 98B1     		cbz	r0, .L274
 867:src/storage.c **** 			/*
 3276              		.loc 1 867 3 is_stmt 1 view .LVU939
 867:src/storage.c **** 			/*
 3277              		.loc 1 867 8 is_stmt 0 view .LVU940
 3278 0008 FFF7FEFF 		bl	checksum_backup
 3279              	.LVL302:
 867:src/storage.c **** 			/*
 3280              		.loc 1 867 6 view .LVU941
 3281 000c 88B9     		cbnz	r0, .L278
 874:src/storage.c **** 		init_state();
 3282              		.loc 1 874 3 is_stmt 1 view .LVU942
 874:src/storage.c **** 		init_state();
 3283              		.loc 1 874 11 is_stmt 0 view .LVU943
 3284 000e 0B4B     		ldr	r3, .L279
 874:src/storage.c **** 		init_state();
 3285              		.loc 1 874 20 view .LVU944
 3286 0010 0B4A     		ldr	r2, .L279+4
 874:src/storage.c **** 		init_state();
 3287              		.loc 1 874 10 view .LVU945
 3288 0012 1868     		ldr	r0, [r3]
 874:src/storage.c **** 		init_state();
 3289              		.loc 1 874 19 view .LVU946
 3290 0014 1168     		ldr	r1, [r2]
 874:src/storage.c **** 		init_state();
ARM GAS  /tmp/ccqjxcgd.s 			page 98


 3291              		.loc 1 874 3 view .LVU947
 3292 0016 00F57D60 		add	r0, r0, #4048
 3293 001a 01F57D61 		add	r1, r1, #4048
 3294 001e 2E22     		movs	r2, #46
 3295 0020 FFF7FEFF 		bl	xcopy
 3296              	.LVL303:
 875:src/storage.c **** 		clrretstk_pc();
 3297              		.loc 1 875 3 is_stmt 1 view .LVU948
 3298 0024 FFF7FEFF 		bl	init_state
 3299              	.LVL304:
 876:src/storage.c **** 	}
 3300              		.loc 1 876 3 view .LVU949
 878:src/storage.c **** 
 3301              		.loc 1 878 1 is_stmt 0 view .LVU950
 3302 0028 BDE80840 		pop	{r3, lr}
 3303              		.cfi_remember_state
 3304              		.cfi_restore 14
 3305              		.cfi_restore 3
 3306              		.cfi_def_cfa_offset 0
 876:src/storage.c **** 	}
 3307              		.loc 1 876 3 view .LVU951
 3308 002c FFF7FEBF 		b	clrretstk_pc
 3309              	.LVL305:
 3310              	.L274:
 3311              		.cfi_restore_state
 878:src/storage.c **** 
 3312              		.loc 1 878 1 view .LVU952
 3313 0030 08BD     		pop	{r3, pc}
 3314              	.L278:
 871:src/storage.c **** 			return;
 3315              		.loc 1 871 4 is_stmt 1 view .LVU953
 878:src/storage.c **** 
 3316              		.loc 1 878 1 is_stmt 0 view .LVU954
 3317 0032 BDE80840 		pop	{r3, lr}
 3318              		.cfi_restore 14
 3319              		.cfi_restore 3
 3320              		.cfi_def_cfa_offset 0
 871:src/storage.c **** 			return;
 3321              		.loc 1 871 4 view .LVU955
 3322 0036 1220     		movs	r0, #18
 3323 0038 FFF7FEBF 		b	report_err
 3324              	.LVL306:
 3325              	.L280:
 3326              		.align	2
 3327              	.L279:
 3328 003c 00000000 		.word	main_ram
 3329 0040 00000000 		.word	backup_ram
 3330              		.cfi_endproc
 3331              	.LFE30:
 3333              		.section	.text.store_program,"ax",%progbits
 3334              		.align	1
 3335              		.p2align 2,,3
 3336              		.global	store_program
 3337              		.syntax unified
 3338              		.thumb
 3339              		.thumb_func
 3340              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqjxcgd.s 			page 99


 3342              	store_program:
 3343              	.LVL307:
 3344              	.LFB31:
 885:src/storage.c **** 	opcode lbl; 
 3345              		.loc 1 885 1 is_stmt 1 view -0
 3346              		.cfi_startproc
 3347              		@ args = 0, pretend = 0, frame = 0
 3348              		@ frame_needed = 0, uses_anonymous_args = 0
 886:src/storage.c **** 	unsigned int pc;
 3349              		.loc 1 886 2 view .LVU957
 887:src/storage.c **** 	int space_needed, count, free;
 3350              		.loc 1 887 2 view .LVU958
 888:src/storage.c **** 
 3351              		.loc 1 888 2 view .LVU959
 890:src/storage.c **** 		/*
 3352              		.loc 1 890 2 view .LVU960
 885:src/storage.c **** 	opcode lbl; 
 3353              		.loc 1 885 1 is_stmt 0 view .LVU961
 3354 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3355              		.cfi_def_cfa_offset 24
 3356              		.cfi_offset 4, -24
 3357              		.cfi_offset 5, -20
 3358              		.cfi_offset 6, -16
 3359              		.cfi_offset 7, -12
 3360              		.cfi_offset 8, -8
 3361              		.cfi_offset 14, -4
 890:src/storage.c **** 		/*
 3362              		.loc 1 890 7 view .LVU962
 3363 0004 FFF7FEFF 		bl	not_running
 3364              	.LVL308:
 890:src/storage.c **** 		/*
 3365              		.loc 1 890 5 view .LVU963
 3366 0008 0028     		cmp	r0, #0
 3367 000a 3BD0     		beq	.L281
 894:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3368              		.loc 1 894 3 is_stmt 1 view .LVU964
 3369              	.LVL309:
 895:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3370              		.loc 1 895 3 view .LVU965
 894:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3371              		.loc 1 894 8 is_stmt 0 view .LVU966
 3372 000c 314C     		ldr	r4, .L295
 3373              	.LVL310:
 894:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3374              		.loc 1 894 8 view .LVU967
 3375 000e 2368     		ldr	r3, [r4]
 3376 0010 B3F8E03F 		ldrh	r3, [r3, #4064]
 895:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3377              		.loc 1 895 6 view .LVU968
 3378 0014 5B04     		lsls	r3, r3, #17
 3379 0016 37D4     		bmi	.L291
 902:src/storage.c **** 		lbl = getprog( ProgBegin );
 3380              		.loc 1 902 3 is_stmt 1 view .LVU969
 3381 0018 0120     		movs	r0, #1
 3382 001a FFF7FEFF 		bl	update_program_bounds
 3383              	.LVL311:
 903:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
ARM GAS  /tmp/ccqjxcgd.s 			page 100


 3384              		.loc 1 903 3 view .LVU970
 903:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3385              		.loc 1 903 18 is_stmt 0 view .LVU971
 3386 001e 2368     		ldr	r3, [r4]
 903:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3387              		.loc 1 903 9 view .LVU972
 3388 0020 B3F8EC0F 		ldrh	r0, [r3, #4076]
 3389 0024 FFF7FEFF 		bl	getprog
 3390              	.LVL312:
 904:src/storage.c **** 			report_err( ERR_NO_LBL );
 3391              		.loc 1 904 3 is_stmt 1 view .LVU973
 904:src/storage.c **** 			report_err( ERR_NO_LBL );
 3392              		.loc 1 904 9 is_stmt 0 view .LVU974
 3393 0028 00F47043 		and	r3, r0, #61440
 904:src/storage.c **** 			report_err( ERR_NO_LBL );
 3394              		.loc 1 904 6 view .LVU975
 3395 002c B3F5704F 		cmp	r3, #61440
 3396 0030 2FD1     		bne	.L284
 904:src/storage.c **** 			report_err( ERR_NO_LBL );
 3397              		.loc 1 904 20 discriminator 1 view .LVU976
 3398 0032 10F4706F 		tst	r0, #3840
 904:src/storage.c **** 			report_err( ERR_NO_LBL );
 3399              		.loc 1 904 23 discriminator 1 view .LVU977
 3400 0036 C0F30322 		ubfx	r2, r0, #8, #4
 904:src/storage.c **** 			report_err( ERR_NO_LBL );
 3401              		.loc 1 904 20 discriminator 1 view .LVU978
 3402 003a 2AD1     		bne	.L284
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3403              		.loc 1 911 3 is_stmt 1 view .LVU979
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3404              		.loc 1 911 30 is_stmt 0 view .LVU980
 3405 003c 2368     		ldr	r3, [r4]
 912:src/storage.c **** 
 3406              		.loc 1 912 39 view .LVU981
 3407 003e 264E     		ldr	r6, .L295+4
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3408              		.loc 1 911 30 view .LVU982
 3409 0040 B3F8EE5F 		ldrh	r5, [r3, #4078]
 912:src/storage.c **** 
 3410              		.loc 1 912 39 view .LVU983
 3411 0044 3168     		ldr	r1, [r6]
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3412              		.loc 1 911 40 view .LVU984
 3413 0046 B3F8EC3F 		ldrh	r3, [r3, #4076]
 912:src/storage.c **** 
 3414              		.loc 1 912 39 view .LVU985
 3415 004a 4F88     		ldrh	r7, [r1, #2]
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3416              		.loc 1 911 28 view .LVU986
 3417 004c 0135     		adds	r5, r5, #1
 917:src/storage.c **** 		if ( pc != 0 ) {
 3418              		.loc 1 917 8 view .LVU987
 3419 004e 0146     		mov	r1, r0
 3420 0050 4FF48040 		mov	r0, #16384
 3421              	.LVL313:
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3422              		.loc 1 911 24 view .LVU988
ARM GAS  /tmp/ccqjxcgd.s 			page 101


 3423 0054 ED1A     		subs	r5, r5, r3
 3424              	.LVL314:
 912:src/storage.c **** 
 3425              		.loc 1 912 3 is_stmt 1 view .LVU989
 917:src/storage.c **** 		if ( pc != 0 ) {
 3426              		.loc 1 917 8 is_stmt 0 view .LVU990
 3427 0056 FFF7FEFF 		bl	find_opcode_from
 3428              	.LVL315:
 912:src/storage.c **** 
 3429              		.loc 1 912 8 view .LVU991
 3430 005a C7F5FF57 		rsb	r7, r7, #8160
 3431 005e 1E37     		adds	r7, r7, #30
 3432              	.LVL316:
 917:src/storage.c **** 		if ( pc != 0 ) {
 3433              		.loc 1 917 3 is_stmt 1 view .LVU992
 918:src/storage.c **** 			/*
 3434              		.loc 1 918 3 view .LVU993
 918:src/storage.c **** 			/*
 3435              		.loc 1 918 6 is_stmt 0 view .LVU994
 3436 0060 08BB     		cbnz	r0, .L292
 911:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3437              		.loc 1 911 24 view .LVU995
 3438 0062 2C46     		mov	r4, r5
 3439              	.LVL317:
 3440              	.L286:
 930:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3441              		.loc 1 930 3 is_stmt 1 view .LVU996
 930:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3442              		.loc 1 930 6 is_stmt 0 view .LVU997
 3443 0064 BC42     		cmp	r4, r7
 3444 0066 19DC     		bgt	.L293
 935:src/storage.c **** 	}
 3445              		.loc 1 935 3 is_stmt 1 view .LVU998
 935:src/storage.c **** 	}
 3446              		.loc 1 935 26 is_stmt 0 view .LVU999
 3447 0068 3368     		ldr	r3, [r6]
 935:src/storage.c **** 	}
 3448              		.loc 1 935 3 view .LVU1000
 3449 006a 5C88     		ldrh	r4, [r3, #2]
 3450              	.LVL318:
 935:src/storage.c **** 	}
 3451              		.loc 1 935 3 view .LVU1001
 3452 006c FFF7FEFF 		bl	get_current_prog
 3453              	.LVL319:
 935:src/storage.c **** 	}
 3454              		.loc 1 935 69 view .LVU1002
 3455 0070 3368     		ldr	r3, [r6]
 3456 0072 5B88     		ldrh	r3, [r3, #2]
 935:src/storage.c **** 	}
 3457              		.loc 1 935 3 view .LVU1003
 3458 0074 0146     		mov	r1, r0
 3459 0076 2B44     		add	r3, r3, r5
 3460 0078 2046     		mov	r0, r4
 3461 007a 2A46     		mov	r2, r5
 937:src/storage.c **** 
 3462              		.loc 1 937 1 view .LVU1004
 3463 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccqjxcgd.s 			page 102


 3464              		.cfi_remember_state
 3465              		.cfi_restore 14
 3466              		.cfi_restore 8
 3467              		.cfi_restore 7
 3468              		.cfi_restore 6
 3469              		.cfi_restore 5
 3470              		.cfi_restore 4
 3471              		.cfi_def_cfa_offset 0
 3472              	.LVL320:
 935:src/storage.c **** 	}
 3473              		.loc 1 935 3 view .LVU1005
 3474 0080 FFF7FEBF 		b	flash_append
 3475              	.LVL321:
 3476              	.L281:
 3477              		.cfi_restore_state
 937:src/storage.c **** 
 3478              		.loc 1 937 1 view .LVU1006
 3479 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3480              	.LVL322:
 3481              	.L291:
 896:src/storage.c **** 			return;
 3482              		.loc 1 896 4 is_stmt 1 view .LVU1007
 937:src/storage.c **** 
 3483              		.loc 1 937 1 is_stmt 0 view .LVU1008
 3484 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3485              		.cfi_remember_state
 3486              		.cfi_restore 14
 3487              		.cfi_restore 8
 3488              		.cfi_restore 7
 3489              		.cfi_restore 6
 3490              		.cfi_restore 5
 3491              		.cfi_restore 4
 3492              		.cfi_def_cfa_offset 0
 3493              	.LVL323:
 896:src/storage.c **** 			return;
 3494              		.loc 1 896 4 view .LVU1009
 3495 008c 0720     		movs	r0, #7
 3496 008e FFF7FEBF 		b	report_err
 3497              	.LVL324:
 3498              	.L284:
 3499              		.cfi_restore_state
 905:src/storage.c **** 			return;
 3500              		.loc 1 905 4 is_stmt 1 view .LVU1010
 937:src/storage.c **** 
 3501              		.loc 1 937 1 is_stmt 0 view .LVU1011
 3502 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3503              		.cfi_remember_state
 3504              		.cfi_restore 14
 3505              		.cfi_restore 8
 3506              		.cfi_restore 7
 3507              		.cfi_restore 6
 3508              		.cfi_restore 5
 3509              		.cfi_restore 4
 3510              		.cfi_def_cfa_offset 0
 905:src/storage.c **** 			return;
 3511              		.loc 1 905 4 view .LVU1012
 3512 0096 0620     		movs	r0, #6
ARM GAS  /tmp/ccqjxcgd.s 			page 103


 3513              	.LVL325:
 905:src/storage.c **** 			return;
 3514              		.loc 1 905 4 view .LVU1013
 3515 0098 FFF7FEBF 		b	report_err
 3516              	.LVL326:
 3517              	.L293:
 3518              		.cfi_restore_state
 931:src/storage.c **** 			return;
 3519              		.loc 1 931 4 is_stmt 1 view .LVU1014
 937:src/storage.c **** 
 3520              		.loc 1 937 1 is_stmt 0 view .LVU1015
 3521 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3522              		.cfi_remember_state
 3523              		.cfi_restore 14
 3524              		.cfi_restore 8
 3525              		.cfi_restore 7
 3526              		.cfi_restore 6
 3527              		.cfi_restore 5
 3528              		.cfi_restore 4
 3529              		.cfi_def_cfa_offset 0
 3530              	.LVL327:
 931:src/storage.c **** 			return;
 3531              		.loc 1 931 4 view .LVU1016
 3532 00a0 1720     		movs	r0, #23
 3533 00a2 FFF7FEBF 		b	report_err
 3534              	.LVL328:
 3535              	.L292:
 3536              		.cfi_restore_state
 3537              	.LBB108:
 922:src/storage.c **** 			set_pc( pc );
 3538              		.loc 1 922 4 is_stmt 1 view .LVU1017
 922:src/storage.c **** 			set_pc( pc );
 3539              		.loc 1 922 26 is_stmt 0 view .LVU1018
 3540 00a6 2368     		ldr	r3, [r4]
 922:src/storage.c **** 			set_pc( pc );
 3541              		.loc 1 922 17 view .LVU1019
 3542 00a8 B3F8E08F 		ldrh	r8, [r3, #4064]
 3543              	.LVL329:
 923:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3544              		.loc 1 923 4 is_stmt 1 view .LVU1020
 3545 00ac FFF7FEFF 		bl	set_pc
 3546              	.LVL330:
 924:src/storage.c **** 			if ( space_needed <= free ) {
 3547              		.loc 1 924 4 view .LVU1021
 924:src/storage.c **** 			if ( space_needed <= free ) {
 3548              		.loc 1 924 24 is_stmt 0 view .LVU1022
 3549 00b0 2368     		ldr	r3, [r4]
 3550 00b2 B3F8EE4F 		ldrh	r4, [r3, #4078]
 924:src/storage.c **** 			if ( space_needed <= free ) {
 3551              		.loc 1 924 34 view .LVU1023
 3552 00b6 B3F8EC3F 		ldrh	r3, [r3, #4076]
 924:src/storage.c **** 			if ( space_needed <= free ) {
 3553              		.loc 1 924 22 view .LVU1024
 3554 00ba 0134     		adds	r4, r4, #1
 924:src/storage.c **** 			if ( space_needed <= free ) {
 3555              		.loc 1 924 32 view .LVU1025
 3556 00bc E41A     		subs	r4, r4, r3
ARM GAS  /tmp/ccqjxcgd.s 			page 104


 924:src/storage.c **** 			if ( space_needed <= free ) {
 3557              		.loc 1 924 17 view .LVU1026
 3558 00be 2C1B     		subs	r4, r5, r4
 3559              	.LVL331:
 925:src/storage.c **** 				clrprog();
 3560              		.loc 1 925 4 is_stmt 1 view .LVU1027
 925:src/storage.c **** 				clrprog();
 3561              		.loc 1 925 7 is_stmt 0 view .LVU1028
 3562 00c0 A742     		cmp	r7, r4
 3563 00c2 03DA     		bge	.L294
 3564              	.L287:
 928:src/storage.c **** 		}
 3565              		.loc 1 928 4 is_stmt 1 view .LVU1029
 3566 00c4 4046     		mov	r0, r8
 3567 00c6 FFF7FEFF 		bl	set_pc
 3568              	.LVL332:
 3569 00ca CBE7     		b	.L286
 3570              	.L294:
 926:src/storage.c **** 			}
 3571              		.loc 1 926 5 view .LVU1030
 3572 00cc FFF7FEFF 		bl	clrprog
 3573              	.LVL333:
 3574 00d0 F8E7     		b	.L287
 3575              	.L296:
 3576 00d2 00BF     		.align	2
 3577              	.L295:
 3578 00d4 00000000 		.word	main_ram
 3579 00d8 00000000 		.word	library_ram
 3580              	.LBE108:
 3581              		.cfi_endproc
 3582              	.LFE31:
 3584              		.section	.text.recall_program,"ax",%progbits
 3585              		.align	1
 3586              		.p2align 2,,3
 3587              		.global	recall_program
 3588              		.syntax unified
 3589              		.thumb
 3590              		.thumb_func
 3591              		.fpu fpv4-sp-d16
 3593              	recall_program:
 3594              	.LVL334:
 3595              	.LFB32:
 944:src/storage.c **** 	if ( not_running() ) {
 3596              		.loc 1 944 1 view -0
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 0
 3599              		@ frame_needed = 0, uses_anonymous_args = 0
 945:src/storage.c **** 		if ( state_pc() == 0 ) {
 3600              		.loc 1 945 2 view .LVU1032
 944:src/storage.c **** 	if ( not_running() ) {
 3601              		.loc 1 944 1 is_stmt 0 view .LVU1033
 3602 0000 10B5     		push	{r4, lr}
 3603              		.cfi_def_cfa_offset 8
 3604              		.cfi_offset 4, -8
 3605              		.cfi_offset 14, -4
 945:src/storage.c **** 		if ( state_pc() == 0 ) {
 3606              		.loc 1 945 7 view .LVU1034
ARM GAS  /tmp/ccqjxcgd.s 			page 105


 3607 0002 FFF7FEFF 		bl	not_running
 3608              	.LVL335:
 945:src/storage.c **** 		if ( state_pc() == 0 ) {
 3609              		.loc 1 945 5 view .LVU1035
 3610 0006 B8B1     		cbz	r0, .L297
 946:src/storage.c **** 			State.pc = 1;
 3611              		.loc 1 946 3 is_stmt 1 view .LVU1036
 946:src/storage.c **** 			State.pc = 1;
 3612              		.loc 1 946 8 is_stmt 0 view .LVU1037
 3613 0008 0C4C     		ldr	r4, .L301
 3614 000a 2368     		ldr	r3, [r4]
 946:src/storage.c **** 			State.pc = 1;
 3615              		.loc 1 946 6 view .LVU1038
 3616 000c B3F8E02F 		ldrh	r2, [r3, #4064]
 3617 0010 12B9     		cbnz	r2, .L299
 947:src/storage.c **** 		}
 3618              		.loc 1 947 4 is_stmt 1 view .LVU1039
 947:src/storage.c **** 		}
 3619              		.loc 1 947 13 is_stmt 0 view .LVU1040
 3620 0012 0122     		movs	r2, #1
 3621 0014 A3F8E02F 		strh	r2, [r3, #4064]	@ movhi
 3622              	.L299:
 949:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3623              		.loc 1 949 3 is_stmt 1 view .LVU1041
 3624 0018 0120     		movs	r0, #1
 3625 001a FFF7FEFF 		bl	update_program_bounds
 3626              	.LVL336:
 950:src/storage.c **** 	}
 3627              		.loc 1 950 3 view .LVU1042
 3628 001e FFF7FEFF 		bl	get_current_prog
 3629              	.LVL337:
 950:src/storage.c **** 	}
 3630              		.loc 1 950 39 is_stmt 0 view .LVU1043
 3631 0022 2368     		ldr	r3, [r4]
 3632 0024 B3F8EE1F 		ldrh	r1, [r3, #4078]
 950:src/storage.c **** 	}
 3633              		.loc 1 950 49 view .LVU1044
 3634 0028 B3F8EC3F 		ldrh	r3, [r3, #4076]
 950:src/storage.c **** 	}
 3635              		.loc 1 950 47 view .LVU1045
 3636 002c C91A     		subs	r1, r1, r3
 952:src/storage.c **** 
 3637              		.loc 1 952 1 view .LVU1046
 3638 002e BDE81040 		pop	{r4, lr}
 3639              		.cfi_remember_state
 3640              		.cfi_restore 14
 3641              		.cfi_restore 4
 3642              		.cfi_def_cfa_offset 0
 950:src/storage.c **** 	}
 3643              		.loc 1 950 3 view .LVU1047
 3644 0032 0131     		adds	r1, r1, #1
 3645 0034 FFF7FEBF 		b	append_program
 3646              	.LVL338:
 3647              	.L297:
 3648              		.cfi_restore_state
 952:src/storage.c **** 
 3649              		.loc 1 952 1 view .LVU1048
ARM GAS  /tmp/ccqjxcgd.s 			page 106


 3650 0038 10BD     		pop	{r4, pc}
 3651              	.L302:
 3652 003a 00BF     		.align	2
 3653              	.L301:
 3654 003c 00000000 		.word	main_ram
 3655              		.cfi_endproc
 3656              	.LFE32:
 3658              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3659              		.align	2
 3660              	.LC11:
 3661 0000 45727220 		.ascii	"Err slf1\000"
 3661      736C6631 
 3661      00
 3662 0009 000000   		.align	2
 3663              	.LC12:
 3664 000c 2E6C6962 		.ascii	".lib\000"
 3664      00
 3665 0011 000000   		.align	2
 3666              	.LC13:
 3667 0014 53617665 		.ascii	"Save Library File\000"
 3667      204C6962 
 3667      72617279 
 3667      2046696C 
 3667      6500
 3668 0026 0000     		.align	2
 3669              	.LC14:
 3670 0028 45727220 		.ascii	"Err slf2\000"
 3670      736C6632 
 3670      00
 3671              		.section	.text.save_lib_file,"ax",%progbits
 3672              		.align	1
 3673              		.p2align 2,,3
 3674              		.global	save_lib_file
 3675              		.syntax unified
 3676              		.thumb
 3677              		.thumb_func
 3678              		.fpu fpv4-sp-d16
 3680              	save_lib_file:
 3681              	.LVL339:
 3682              	.LFB33:
1091:src/storage.c ****   FRESULT f;
 3683              		.loc 1 1091 30 is_stmt 1 view -0
 3684              		.cfi_startproc
 3685              		@ args = 0, pretend = 0, frame = 8
 3686              		@ frame_needed = 0, uses_anonymous_args = 0
1092:src/storage.c ****   int fss;
 3687              		.loc 1 1092 3 view .LVU1050
1093:src/storage.c ****   int data = WRITE;
 3688              		.loc 1 1093 3 view .LVU1051
1094:src/storage.c ****   uint x=0;
 3689              		.loc 1 1094 3 view .LVU1052
1091:src/storage.c ****   FRESULT f;
 3690              		.loc 1 1091 30 is_stmt 0 view .LVU1053
 3691 0000 70B5     		push	{r4, r5, r6, lr}
 3692              		.cfi_def_cfa_offset 16
 3693              		.cfi_offset 4, -16
 3694              		.cfi_offset 5, -12
ARM GAS  /tmp/ccqjxcgd.s 			page 107


 3695              		.cfi_offset 6, -8
 3696              		.cfi_offset 14, -4
 3697 0002 86B0     		sub	sp, sp, #24
 3698              		.cfi_def_cfa_offset 40
1094:src/storage.c ****   uint x=0;
 3699              		.loc 1 1094 7 view .LVU1054
 3700 0004 0125     		movs	r5, #1
1095:src/storage.c **** 
 3701              		.loc 1 1095 8 view .LVU1055
 3702 0006 0023     		movs	r3, #0
1091:src/storage.c ****   FRESULT f;
 3703              		.loc 1 1091 30 view .LVU1056
 3704 0008 0446     		mov	r4, r0
1097:src/storage.c ****   if (i == 0) {
 3705              		.loc 1 1097 3 view .LVU1057
 3706 000a 1E4E     		ldr	r6, .L313
1094:src/storage.c ****   uint x=0;
 3707              		.loc 1 1094 7 view .LVU1058
 3708 000c 0495     		str	r5, [sp, #16]
1095:src/storage.c **** 
 3709              		.loc 1 1095 3 is_stmt 1 view .LVU1059
1097:src/storage.c ****   if (i == 0) {
 3710              		.loc 1 1097 3 is_stmt 0 view .LVU1060
 3711 000e 2846     		mov	r0, r5
 3712              	.LVL340:
1095:src/storage.c **** 
 3713              		.loc 1 1095 8 view .LVU1061
 3714 0010 0593     		str	r3, [sp, #20]
1097:src/storage.c ****   if (i == 0) {
 3715              		.loc 1 1097 3 is_stmt 1 view .LVU1062
 3716 0012 B047     		blx	r6
 3717              	.LVL341:
1098:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3718              		.loc 1 1098 3 view .LVU1063
1098:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3719              		.loc 1 1098 6 is_stmt 0 view .LVU1064
 3720 0014 CCB9     		cbnz	r4, .L304
1099:src/storage.c ****     if (f != FR_OK) {
 3721              		.loc 1 1099 5 is_stmt 1 view .LVU1065
1099:src/storage.c ****     if (f != FR_OK) {
 3722              		.loc 1 1099 9 is_stmt 0 view .LVU1066
 3723 0016 1C4D     		ldr	r5, .L313+4
 3724 0018 1C4B     		ldr	r3, .L313+8
 3725 001a 6868     		ldr	r0, [r5, #4]
 3726 001c 1C49     		ldr	r1, .L313+12
 3727 001e 0B22     		movs	r2, #11
 3728 0020 9847     		blx	r3
 3729              	.LVL342:
1100:src/storage.c ****       f_close (FPT);
 3730              		.loc 1 1100 5 is_stmt 1 view .LVU1067
1100:src/storage.c ****       f_close (FPT);
 3731              		.loc 1 1100 8 is_stmt 0 view .LVU1068
 3732 0022 20BB     		cbnz	r0, .L305
 3733              	.LVL343:
 3734              	.L309:
1112:src/storage.c ****   if ( f != FR_OK ) {
 3735              		.loc 1 1112 3 is_stmt 1 view .LVU1069
ARM GAS  /tmp/ccqjxcgd.s 			page 108


1112:src/storage.c ****   if ( f != FR_OK ) {
 3736              		.loc 1 1112 7 is_stmt 0 view .LVU1070
 3737 0024 1B4A     		ldr	r2, .L313+16
 3738 0026 184B     		ldr	r3, .L313+4
 3739 0028 1168     		ldr	r1, [r2]
 3740 002a 5868     		ldr	r0, [r3, #4]
 3741 002c 1A4C     		ldr	r4, .L313+20
 3742 002e 05AB     		add	r3, sp, #20
 3743 0030 4FF48042 		mov	r2, #16384
 3744 0034 A047     		blx	r4
 3745              	.LVL344:
1113:src/storage.c ****     DispMsg = "Err slf2";
 3746              		.loc 1 1113 3 is_stmt 1 view .LVU1071
1113:src/storage.c ****     DispMsg = "Err slf2";
 3747              		.loc 1 1113 6 is_stmt 0 view .LVU1072
 3748 0036 B0B9     		cbnz	r0, .L306
 3749              	.L307:
1116:src/storage.c ****   sys_disk_write_enable(0);
 3750              		.loc 1 1116 3 is_stmt 1 view .LVU1073
 3751 0038 134A     		ldr	r2, .L313+4
 3752 003a 184B     		ldr	r3, .L313+24
 3753 003c 5068     		ldr	r0, [r2, #4]
 3754              	.LVL345:
1116:src/storage.c ****   sys_disk_write_enable(0);
 3755              		.loc 1 1116 3 is_stmt 0 view .LVU1074
 3756 003e 9847     		blx	r3
 3757              	.LVL346:
1117:src/storage.c **** }
 3758              		.loc 1 1117 3 is_stmt 1 view .LVU1075
 3759 0040 104B     		ldr	r3, .L313
 3760 0042 0020     		movs	r0, #0
 3761 0044 9847     		blx	r3
 3762              	.LVL347:
1118:src/storage.c **** 
 3763              		.loc 1 1118 1 is_stmt 0 view .LVU1076
 3764 0046 06B0     		add	sp, sp, #24
 3765              		.cfi_remember_state
 3766              		.cfi_def_cfa_offset 16
 3767              		@ sp needed
 3768 0048 70BD     		pop	{r4, r5, r6, pc}
 3769              	.LVL348:
 3770              	.L304:
 3771              		.cfi_restore_state
1108:src/storage.c ****     if (fss != 1) return;
 3772              		.loc 1 1108 5 is_stmt 1 view .LVU1077
1108:src/storage.c ****     if (fss != 1) return;
 3773              		.loc 1 1108 11 is_stmt 0 view .LVU1078
 3774 004a 04AB     		add	r3, sp, #16
 3775 004c 0293     		str	r3, [sp, #8]
 3776 004e CDE90055 		strd	r5, r5, [sp]
 3777 0052 134C     		ldr	r4, .L313+28
 3778              	.LVL349:
1108:src/storage.c ****     if (fss != 1) return;
 3779              		.loc 1 1108 11 view .LVU1079
 3780 0054 134B     		ldr	r3, .L313+32
 3781 0056 144A     		ldr	r2, .L313+36
 3782 0058 1449     		ldr	r1, .L313+40
ARM GAS  /tmp/ccqjxcgd.s 			page 109


 3783 005a 1548     		ldr	r0, .L313+44
 3784 005c A047     		blx	r4
 3785              	.LVL350:
1109:src/storage.c ****   }
 3786              		.loc 1 1109 5 is_stmt 1 view .LVU1080
1109:src/storage.c ****   }
 3787              		.loc 1 1109 8 is_stmt 0 view .LVU1081
 3788 005e 0128     		cmp	r0, #1
 3789 0060 E0D0     		beq	.L309
1118:src/storage.c **** 
 3790              		.loc 1 1118 1 view .LVU1082
 3791 0062 06B0     		add	sp, sp, #24
 3792              		.cfi_remember_state
 3793              		.cfi_def_cfa_offset 16
 3794              		@ sp needed
 3795 0064 70BD     		pop	{r4, r5, r6, pc}
 3796              	.LVL351:
 3797              	.L306:
 3798              		.cfi_restore_state
1114:src/storage.c ****   }
 3799              		.loc 1 1114 5 is_stmt 1 view .LVU1083
1114:src/storage.c ****   }
 3800              		.loc 1 1114 13 is_stmt 0 view .LVU1084
 3801 0066 134B     		ldr	r3, .L313+48
 3802 0068 134A     		ldr	r2, .L313+52
 3803 006a 1A60     		str	r2, [r3]
 3804 006c E4E7     		b	.L307
 3805              	.LVL352:
 3806              	.L305:
1101:src/storage.c ****       sys_disk_write_enable(0);
 3807              		.loc 1 1101 7 is_stmt 1 view .LVU1085
 3808 006e 0B4B     		ldr	r3, .L313+24
 3809 0070 6868     		ldr	r0, [r5, #4]
 3810              	.LVL353:
1101:src/storage.c ****       sys_disk_write_enable(0);
 3811              		.loc 1 1101 7 is_stmt 0 view .LVU1086
 3812 0072 9847     		blx	r3
 3813              	.LVL354:
1102:src/storage.c ****       DispMsg = "Err slf1";
 3814              		.loc 1 1102 7 is_stmt 1 view .LVU1087
 3815 0074 2046     		mov	r0, r4
 3816 0076 B047     		blx	r6
 3817              	.LVL355:
1103:src/storage.c ****       return;
 3818              		.loc 1 1103 7 view .LVU1088
1103:src/storage.c ****       return;
 3819              		.loc 1 1103 15 is_stmt 0 view .LVU1089
 3820 0078 0E4B     		ldr	r3, .L313+48
 3821 007a 104A     		ldr	r2, .L313+56
 3822 007c 1A60     		str	r2, [r3]
1104:src/storage.c ****     }
 3823              		.loc 1 1104 7 is_stmt 1 view .LVU1090
1118:src/storage.c **** 
 3824              		.loc 1 1118 1 is_stmt 0 view .LVU1091
 3825 007e 06B0     		add	sp, sp, #24
 3826              		.cfi_def_cfa_offset 16
 3827              		@ sp needed
ARM GAS  /tmp/ccqjxcgd.s 			page 110


 3828 0080 70BD     		pop	{r4, r5, r6, pc}
 3829              	.LVL356:
 3830              	.L314:
1118:src/storage.c **** 
 3831              		.loc 1 1118 1 view .LVU1092
 3832 0082 00BF     		.align	2
 3833              	.L313:
 3834 0084 E1030008 		.word	134218721
 3835 0088 00200010 		.word	268443648
 3836 008c 35040008 		.word	134218805
 3837 0090 1C000000 		.word	.LC1
 3838 0094 00000000 		.word	library_ram
 3839 0098 41040008 		.word	134218817
 3840 009c 39040008 		.word	134218809
 3841 00a0 51030008 		.word	134218577
 3842 00a4 00000000 		.word	open_selected_file
 3843 00a8 0C000000 		.word	.LC12
 3844 00ac 30000000 		.word	.LC2
 3845 00b0 14000000 		.word	.LC13
 3846 00b4 00000000 		.word	DispMsg
 3847 00b8 28000000 		.word	.LC14
 3848 00bc 00000000 		.word	.LC11
 3849              		.cfi_endproc
 3850              	.LFE33:
 3852              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3853              		.align	2
 3854              	.LC15:
 3855 0000 4C6F6164 		.ascii	"Load Library File\000"
 3855      204C6962 
 3855      72617279 
 3855      2046696C 
 3855      6500
 3856 0012 0000     		.align	2
 3857              	.LC16:
 3858 0014 46696C65 		.ascii	"File too big\000"
 3858      20746F6F 
 3858      20626967 
 3858      00
 3859              		.section	.text.load_lib_file,"ax",%progbits
 3860              		.align	1
 3861              		.p2align 2,,3
 3862              		.global	load_lib_file
 3863              		.syntax unified
 3864              		.thumb
 3865              		.thumb_func
 3866              		.fpu fpv4-sp-d16
 3868              	load_lib_file:
 3869              	.LVL357:
 3870              	.LFB34:
1120:src/storage.c ****   FRESULT f;
 3871              		.loc 1 1120 30 is_stmt 1 view -0
 3872              		.cfi_startproc
 3873              		@ args = 0, pretend = 0, frame = 8
 3874              		@ frame_needed = 0, uses_anonymous_args = 0
1121:src/storage.c ****   int fss;
 3875              		.loc 1 1121 3 view .LVU1094
1122:src/storage.c ****   int data = READ;
ARM GAS  /tmp/ccqjxcgd.s 			page 111


 3876              		.loc 1 1122 3 view .LVU1095
1123:src/storage.c ****   uint x=0;
 3877              		.loc 1 1123 3 view .LVU1096
1120:src/storage.c ****   FRESULT f;
 3878              		.loc 1 1120 30 is_stmt 0 view .LVU1097
 3879 0000 10B5     		push	{r4, lr}
 3880              		.cfi_def_cfa_offset 8
 3881              		.cfi_offset 4, -8
 3882              		.cfi_offset 14, -4
1124:src/storage.c **** 
 3883              		.loc 1 1124 8 view .LVU1098
 3884 0002 0222     		movs	r2, #2
1120:src/storage.c ****   FRESULT f;
 3885              		.loc 1 1120 30 view .LVU1099
 3886 0004 86B0     		sub	sp, sp, #24
 3887              		.cfi_def_cfa_offset 32
1124:src/storage.c **** 
 3888              		.loc 1 1124 8 view .LVU1100
 3889 0006 0023     		movs	r3, #0
 3890 0008 CDE90423 		strd	r2, r3, [sp, #16]
1126:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3891              		.loc 1 1126 3 is_stmt 1 view .LVU1101
1126:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3892              		.loc 1 1126 6 is_stmt 0 view .LVU1102
 3893 000c 08BB     		cbnz	r0, .L316
1127:src/storage.c ****     if (f != FR_OK) {
 3894              		.loc 1 1127 5 is_stmt 1 view .LVU1103
1127:src/storage.c ****     if (f != FR_OK) {
 3895              		.loc 1 1127 9 is_stmt 0 view .LVU1104
 3896 000e 1A4C     		ldr	r4, .L326
 3897 0010 1A4B     		ldr	r3, .L326+4
 3898 0012 6068     		ldr	r0, [r4, #4]
 3899              	.LVL358:
1127:src/storage.c ****     if (f != FR_OK) {
 3900              		.loc 1 1127 9 view .LVU1105
 3901 0014 1A49     		ldr	r1, .L326+8
 3902 0016 0122     		movs	r2, #1
 3903 0018 9847     		blx	r3
 3904              	.LVL359:
1128:src/storage.c ****       f_close (FPT);
 3905              		.loc 1 1128 5 is_stmt 1 view .LVU1106
1128:src/storage.c ****       f_close (FPT);
 3906              		.loc 1 1128 8 is_stmt 0 view .LVU1107
 3907 001a 0028     		cmp	r0, #0
 3908 001c 27D1     		bne	.L317
 3909              	.LVL360:
 3910              	.L321:
1139:src/storage.c ****   if ( f != FR_OK ) {
 3911              		.loc 1 1139 3 is_stmt 1 view .LVU1108
1139:src/storage.c ****   if ( f != FR_OK ) {
 3912              		.loc 1 1139 7 is_stmt 0 view .LVU1109
 3913 001e 194A     		ldr	r2, .L326+12
 3914 0020 154B     		ldr	r3, .L326
 3915 0022 1168     		ldr	r1, [r2]
 3916 0024 5868     		ldr	r0, [r3, #4]
 3917 0026 184C     		ldr	r4, .L326+16
 3918 0028 05AB     		add	r3, sp, #20
ARM GAS  /tmp/ccqjxcgd.s 			page 112


 3919 002a 4FF48042 		mov	r2, #16384
 3920 002e A047     		blx	r4
 3921              	.LVL361:
1140:src/storage.c ****     DispMsg = "Err slf2";
 3922              		.loc 1 1140 3 is_stmt 1 view .LVU1110
1140:src/storage.c ****     DispMsg = "Err slf2";
 3923              		.loc 1 1140 6 is_stmt 0 view .LVU1111
 3924 0030 10B1     		cbz	r0, .L319
1141:src/storage.c ****   }
 3925              		.loc 1 1141 5 is_stmt 1 view .LVU1112
1141:src/storage.c ****   }
 3926              		.loc 1 1141 13 is_stmt 0 view .LVU1113
 3927 0032 164B     		ldr	r3, .L326+20
 3928 0034 164A     		ldr	r2, .L326+24
 3929 0036 1A60     		str	r2, [r3]
 3930              	.L319:
1143:src/storage.c ****     DispMsg = "File too big";
 3931              		.loc 1 1143 3 is_stmt 1 view .LVU1114
1143:src/storage.c ****     DispMsg = "File too big";
 3932              		.loc 1 1143 10 is_stmt 0 view .LVU1115
 3933 0038 0F4B     		ldr	r3, .L326
 3934 003a 5868     		ldr	r0, [r3, #4]
 3935              	.LVL362:
1143:src/storage.c ****     DispMsg = "File too big";
 3936              		.loc 1 1143 6 view .LVU1116
 3937 003c 8269     		ldr	r2, [r0, #24]
 3938 003e C368     		ldr	r3, [r0, #12]
 3939 0040 9A42     		cmp	r2, r3
 3940 0042 02D0     		beq	.L322
1144:src/storage.c ****   }
 3941              		.loc 1 1144 5 is_stmt 1 view .LVU1117
1144:src/storage.c ****   }
 3942              		.loc 1 1144 13 is_stmt 0 view .LVU1118
 3943 0044 114B     		ldr	r3, .L326+20
 3944 0046 134A     		ldr	r2, .L326+28
 3945 0048 1A60     		str	r2, [r3]
 3946              	.L322:
1146:src/storage.c **** }
 3947              		.loc 1 1146 3 is_stmt 1 view .LVU1119
 3948 004a 134B     		ldr	r3, .L326+32
 3949 004c 9847     		blx	r3
 3950              	.LVL363:
1147:src/storage.c **** 
 3951              		.loc 1 1147 1 is_stmt 0 view .LVU1120
 3952 004e 06B0     		add	sp, sp, #24
 3953              		.cfi_remember_state
 3954              		.cfi_def_cfa_offset 8
 3955              		@ sp needed
 3956 0050 10BD     		pop	{r4, pc}
 3957              	.LVL364:
 3958              	.L316:
 3959              		.cfi_restore_state
1135:src/storage.c ****     if (fss != 1) return;
 3960              		.loc 1 1135 5 is_stmt 1 view .LVU1121
1135:src/storage.c ****     if (fss != 1) return;
 3961              		.loc 1 1135 11 is_stmt 0 view .LVU1122
 3962 0052 04AA     		add	r2, sp, #16
ARM GAS  /tmp/ccqjxcgd.s 			page 113


 3963 0054 CDE90033 		strd	r3, r3, [sp]
 3964 0058 0292     		str	r2, [sp, #8]
 3965 005a 104C     		ldr	r4, .L326+36
 3966 005c 104B     		ldr	r3, .L326+40
 3967 005e 114A     		ldr	r2, .L326+44
 3968 0060 1149     		ldr	r1, .L326+48
 3969 0062 1248     		ldr	r0, .L326+52
 3970              	.LVL365:
1135:src/storage.c ****     if (fss != 1) return;
 3971              		.loc 1 1135 11 view .LVU1123
 3972 0064 A047     		blx	r4
 3973              	.LVL366:
1136:src/storage.c ****   }
 3974              		.loc 1 1136 5 is_stmt 1 view .LVU1124
1136:src/storage.c ****   }
 3975              		.loc 1 1136 8 is_stmt 0 view .LVU1125
 3976 0066 0128     		cmp	r0, #1
 3977 0068 D9D0     		beq	.L321
1147:src/storage.c **** 
 3978              		.loc 1 1147 1 view .LVU1126
 3979 006a 06B0     		add	sp, sp, #24
 3980              		.cfi_remember_state
 3981              		.cfi_def_cfa_offset 8
 3982              		@ sp needed
 3983 006c 10BD     		pop	{r4, pc}
 3984              	.LVL367:
 3985              	.L317:
 3986              		.cfi_restore_state
1129:src/storage.c ****       //      DispMsg = "No file?";
 3987              		.loc 1 1129 7 is_stmt 1 view .LVU1127
 3988 006e 6068     		ldr	r0, [r4, #4]
 3989              	.LVL368:
1129:src/storage.c ****       //      DispMsg = "No file?";
 3990              		.loc 1 1129 7 is_stmt 0 view .LVU1128
 3991 0070 094B     		ldr	r3, .L326+32
 3992 0072 9847     		blx	r3
 3993              	.LVL369:
1131:src/storage.c ****     }
 3994              		.loc 1 1131 7 is_stmt 1 view .LVU1129
1147:src/storage.c **** 
 3995              		.loc 1 1147 1 is_stmt 0 view .LVU1130
 3996 0074 06B0     		add	sp, sp, #24
 3997              		.cfi_def_cfa_offset 8
 3998              		@ sp needed
 3999 0076 10BD     		pop	{r4, pc}
 4000              	.L327:
 4001              		.align	2
 4002              	.L326:
 4003 0078 00200010 		.word	268443648
 4004 007c 35040008 		.word	134218805
 4005 0080 1C000000 		.word	.LC1
 4006 0084 00000000 		.word	library_ram
 4007 0088 3D040008 		.word	134218813
 4008 008c 00000000 		.word	DispMsg
 4009 0090 28000000 		.word	.LC14
 4010 0094 14000000 		.word	.LC16
 4011 0098 39040008 		.word	134218809
ARM GAS  /tmp/ccqjxcgd.s 			page 114


 4012 009c 51030008 		.word	134218577
 4013 00a0 00000000 		.word	open_selected_file
 4014 00a4 0C000000 		.word	.LC12
 4015 00a8 30000000 		.word	.LC2
 4016 00ac 00000000 		.word	.LC15
 4017              		.cfi_endproc
 4018              	.LFE34:
 4020              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 4021              		.align	2
 4022              	.LC17:
 4023 0000 77703334 		.ascii	"wp34s/wp34c_4k.dat\000"
 4023      732F7770 
 4023      3334635F 
 4023      346B2E64 
 4023      617400
 4024 0013 00       		.align	2
 4025              	.LC18:
 4026 0014 45727220 		.ascii	"Err srf1\000"
 4026      73726631 
 4026      00
 4027 001d 000000   		.align	2
 4028              	.LC19:
 4029 0020 2E646174 		.ascii	".dat\000"
 4029      00
 4030 0025 000000   		.align	2
 4031              	.LC20:
 4032 0028 53617665 		.ascii	"Save RAM File\000"
 4032      2052414D 
 4032      2046696C 
 4032      6500
 4033 0036 0000     		.align	2
 4034              	.LC21:
 4035 0038 45727220 		.ascii	"Err srf2\000"
 4035      73726632 
 4035      00
 4036              		.section	.text.save_ram_file,"ax",%progbits
 4037              		.align	1
 4038              		.p2align 2,,3
 4039              		.global	save_ram_file
 4040              		.syntax unified
 4041              		.thumb
 4042              		.thumb_func
 4043              		.fpu fpv4-sp-d16
 4045              	save_ram_file:
 4046              	.LVL370:
 4047              	.LFB35:
1149:src/storage.c ****   FRESULT f;
 4048              		.loc 1 1149 30 is_stmt 1 view -0
 4049              		.cfi_startproc
 4050              		@ args = 0, pretend = 0, frame = 8
 4051              		@ frame_needed = 0, uses_anonymous_args = 0
1150:src/storage.c ****   int fss;
 4052              		.loc 1 1150 3 view .LVU1132
1151:src/storage.c ****   int data = WRITE;
 4053              		.loc 1 1151 3 view .LVU1133
1152:src/storage.c ****   uint x=0;
 4054              		.loc 1 1152 3 view .LVU1134
ARM GAS  /tmp/ccqjxcgd.s 			page 115


1149:src/storage.c ****   FRESULT f;
 4055              		.loc 1 1149 30 is_stmt 0 view .LVU1135
 4056 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4057              		.cfi_def_cfa_offset 20
 4058              		.cfi_offset 4, -20
 4059              		.cfi_offset 5, -16
 4060              		.cfi_offset 6, -12
 4061              		.cfi_offset 7, -8
 4062              		.cfi_offset 14, -4
 4063              	.LBB109:
 4064              	.LBB110:
 213:src/storage.c **** 			      Crc, &Crc );
 4065              		.loc 1 213 9 view .LVU1136
 4066 0002 264E     		ldr	r6, .L338
 4067              	.LBE110:
 4068              	.LBE109:
1159:src/storage.c ****     if (i == 0) {
 4069              		.loc 1 1159 5 view .LVU1137
 4070 0004 264F     		ldr	r7, .L338+4
1149:src/storage.c ****   FRESULT f;
 4071              		.loc 1 1149 30 view .LVU1138
 4072 0006 87B0     		sub	sp, sp, #28
 4073              		.cfi_def_cfa_offset 48
1153:src/storage.c **** 
 4074              		.loc 1 1153 8 view .LVU1139
 4075 0008 0023     		movs	r3, #0
1152:src/storage.c ****   uint x=0;
 4076              		.loc 1 1152 7 view .LVU1140
 4077 000a 0125     		movs	r5, #1
1149:src/storage.c ****   FRESULT f;
 4078              		.loc 1 1149 30 view .LVU1141
 4079 000c 0446     		mov	r4, r0
1153:src/storage.c **** 
 4080              		.loc 1 1153 8 view .LVU1142
 4081 000e CDE90453 		strd	r5, r3, [sp, #16]
1155:src/storage.c ****     init_state();
 4082              		.loc 1 1155 5 is_stmt 1 view .LVU1143
 4083 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4084              	.LVL371:
1156:src/storage.c ****     checksum_all();
 4085              		.loc 1 1156 5 view .LVU1144
 4086 0016 FFF7FEFF 		bl	init_state
 4087              	.LVL372:
1157:src/storage.c **** 
 4088              		.loc 1 1157 5 view .LVU1145
 4089              	.LBB112:
 4090              	.LBI109:
 211:src/storage.c **** {
 4091              		.loc 1 211 5 view .LVU1146
 4092              	.LBB111:
 213:src/storage.c **** 			      Crc, &Crc );
 4093              		.loc 1 213 2 view .LVU1147
 213:src/storage.c **** 			      Crc, &Crc );
 4094              		.loc 1 213 9 is_stmt 0 view .LVU1148
 4095 001a 3068     		ldr	r0, [r6]
 4096 001c 40F6FE71 		movw	r1, #4094
 4097 0020 B0F8FE2F 		ldrh	r2, [r0, #4094]
ARM GAS  /tmp/ccqjxcgd.s 			page 116


 4098 0024 4318     		adds	r3, r0, r1
 4099 0026 FFF7FEFF 		bl	test_checksum
 4100              	.LVL373:
 4101              	.LBE111:
 4102              	.LBE112:
1159:src/storage.c ****     if (i == 0) {
 4103              		.loc 1 1159 5 is_stmt 1 view .LVU1149
 4104 002a 2846     		mov	r0, r5
 4105 002c B847     		blx	r7
 4106              	.LVL374:
1160:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4107              		.loc 1 1160 5 view .LVU1150
1160:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4108              		.loc 1 1160 8 is_stmt 0 view .LVU1151
 4109 002e C4B9     		cbnz	r4, .L329
1161:src/storage.c ****       if (f != FR_OK) {
 4110              		.loc 1 1161 7 is_stmt 1 view .LVU1152
1161:src/storage.c ****       if (f != FR_OK) {
 4111              		.loc 1 1161 11 is_stmt 0 view .LVU1153
 4112 0030 1C4D     		ldr	r5, .L338+8
 4113 0032 1D4B     		ldr	r3, .L338+12
 4114 0034 6868     		ldr	r0, [r5, #4]
 4115 0036 1D49     		ldr	r1, .L338+16
 4116 0038 0B22     		movs	r2, #11
 4117 003a 9847     		blx	r3
 4118              	.LVL375:
1162:src/storage.c **** 	f_close (FPT);
 4119              		.loc 1 1162 7 is_stmt 1 view .LVU1154
1162:src/storage.c **** 	f_close (FPT);
 4120              		.loc 1 1162 10 is_stmt 0 view .LVU1155
 4121 003c 18BB     		cbnz	r0, .L330
 4122              	.LVL376:
 4123              	.L334:
1174:src/storage.c ****     if ( f != FR_OK ) {
 4124              		.loc 1 1174 5 is_stmt 1 view .LVU1156
1174:src/storage.c ****     if ( f != FR_OK ) {
 4125              		.loc 1 1174 9 is_stmt 0 view .LVU1157
 4126 003e 194B     		ldr	r3, .L338+8
 4127 0040 3168     		ldr	r1, [r6]
 4128 0042 5868     		ldr	r0, [r3, #4]
 4129 0044 1A4C     		ldr	r4, .L338+20
 4130 0046 05AB     		add	r3, sp, #20
 4131 0048 4FF48052 		mov	r2, #4096
 4132 004c A047     		blx	r4
 4133              	.LVL377:
1175:src/storage.c ****       DispMsg = "Err srf2";
 4134              		.loc 1 1175 5 is_stmt 1 view .LVU1158
1175:src/storage.c ****       DispMsg = "Err srf2";
 4135              		.loc 1 1175 8 is_stmt 0 view .LVU1159
 4136 004e B0B9     		cbnz	r0, .L331
 4137              	.L332:
1178:src/storage.c ****     sys_disk_write_enable(0);
 4138              		.loc 1 1178 5 is_stmt 1 view .LVU1160
 4139 0050 144A     		ldr	r2, .L338+8
 4140 0052 184B     		ldr	r3, .L338+24
 4141 0054 5068     		ldr	r0, [r2, #4]
 4142              	.LVL378:
ARM GAS  /tmp/ccqjxcgd.s 			page 117


1178:src/storage.c ****     sys_disk_write_enable(0);
 4143              		.loc 1 1178 5 is_stmt 0 view .LVU1161
 4144 0056 9847     		blx	r3
 4145              	.LVL379:
1179:src/storage.c **** }
 4146              		.loc 1 1179 5 is_stmt 1 view .LVU1162
 4147 0058 114B     		ldr	r3, .L338+4
 4148 005a 0020     		movs	r0, #0
 4149 005c 9847     		blx	r3
 4150              	.LVL380:
1180:src/storage.c **** 
 4151              		.loc 1 1180 1 is_stmt 0 view .LVU1163
 4152 005e 07B0     		add	sp, sp, #28
 4153              		.cfi_remember_state
 4154              		.cfi_def_cfa_offset 20
 4155              		@ sp needed
 4156 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4157              	.LVL381:
 4158              	.L329:
 4159              		.cfi_restore_state
1170:src/storage.c ****       if (fss != 1) return;
 4160              		.loc 1 1170 7 is_stmt 1 view .LVU1164
1170:src/storage.c ****       if (fss != 1) return;
 4161              		.loc 1 1170 13 is_stmt 0 view .LVU1165
 4162 0062 04AB     		add	r3, sp, #16
 4163 0064 0293     		str	r3, [sp, #8]
 4164 0066 CDE90055 		strd	r5, r5, [sp]
 4165 006a 134C     		ldr	r4, .L338+28
 4166              	.LVL382:
1170:src/storage.c ****       if (fss != 1) return;
 4167              		.loc 1 1170 13 view .LVU1166
 4168 006c 134B     		ldr	r3, .L338+32
 4169 006e 144A     		ldr	r2, .L338+36
 4170 0070 1449     		ldr	r1, .L338+40
 4171 0072 1548     		ldr	r0, .L338+44
 4172 0074 A047     		blx	r4
 4173              	.LVL383:
1171:src/storage.c ****     }
 4174              		.loc 1 1171 7 is_stmt 1 view .LVU1167
1171:src/storage.c ****     }
 4175              		.loc 1 1171 10 is_stmt 0 view .LVU1168
 4176 0076 0128     		cmp	r0, #1
 4177 0078 E1D0     		beq	.L334
1180:src/storage.c **** 
 4178              		.loc 1 1180 1 view .LVU1169
 4179 007a 07B0     		add	sp, sp, #28
 4180              		.cfi_remember_state
 4181              		.cfi_def_cfa_offset 20
 4182              		@ sp needed
 4183 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4184              	.LVL384:
 4185              	.L331:
 4186              		.cfi_restore_state
1176:src/storage.c ****     }
 4187              		.loc 1 1176 7 is_stmt 1 view .LVU1170
1176:src/storage.c ****     }
 4188              		.loc 1 1176 15 is_stmt 0 view .LVU1171
ARM GAS  /tmp/ccqjxcgd.s 			page 118


 4189 007e 134B     		ldr	r3, .L338+48
 4190 0080 134A     		ldr	r2, .L338+52
 4191 0082 1A60     		str	r2, [r3]
 4192 0084 E4E7     		b	.L332
 4193              	.LVL385:
 4194              	.L330:
1163:src/storage.c **** 	sys_disk_write_enable(0);
 4195              		.loc 1 1163 2 is_stmt 1 view .LVU1172
 4196 0086 0B4B     		ldr	r3, .L338+24
 4197 0088 6868     		ldr	r0, [r5, #4]
 4198              	.LVL386:
1163:src/storage.c **** 	sys_disk_write_enable(0);
 4199              		.loc 1 1163 2 is_stmt 0 view .LVU1173
 4200 008a 9847     		blx	r3
 4201              	.LVL387:
1164:src/storage.c **** 	DispMsg = "Err srf1";
 4202              		.loc 1 1164 2 is_stmt 1 view .LVU1174
 4203 008c 2046     		mov	r0, r4
 4204 008e B847     		blx	r7
 4205              	.LVL388:
1165:src/storage.c **** 	return;
 4206              		.loc 1 1165 2 view .LVU1175
1165:src/storage.c **** 	return;
 4207              		.loc 1 1165 10 is_stmt 0 view .LVU1176
 4208 0090 0E4B     		ldr	r3, .L338+48
 4209 0092 104A     		ldr	r2, .L338+56
 4210 0094 1A60     		str	r2, [r3]
1166:src/storage.c ****       }
 4211              		.loc 1 1166 2 is_stmt 1 view .LVU1177
1180:src/storage.c **** 
 4212              		.loc 1 1180 1 is_stmt 0 view .LVU1178
 4213 0096 07B0     		add	sp, sp, #28
 4214              		.cfi_def_cfa_offset 20
 4215              		@ sp needed
 4216 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4217              	.LVL389:
 4218              	.L339:
1180:src/storage.c **** 
 4219              		.loc 1 1180 1 view .LVU1179
 4220 009a 00BF     		.align	2
 4221              	.L338:
 4222 009c 00000000 		.word	main_ram
 4223 00a0 E1030008 		.word	134218721
 4224 00a4 00200010 		.word	268443648
 4225 00a8 35040008 		.word	134218805
 4226 00ac 00000000 		.word	.LC17
 4227 00b0 41040008 		.word	134218817
 4228 00b4 39040008 		.word	134218809
 4229 00b8 51030008 		.word	134218577
 4230 00bc 00000000 		.word	open_selected_file
 4231 00c0 20000000 		.word	.LC19
 4232 00c4 30000000 		.word	.LC2
 4233 00c8 28000000 		.word	.LC20
 4234 00cc 00000000 		.word	DispMsg
 4235 00d0 38000000 		.word	.LC21
 4236 00d4 14000000 		.word	.LC18
 4237              		.cfi_endproc
ARM GAS  /tmp/ccqjxcgd.s 			page 119


 4238              	.LFE35:
 4240              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4241              		.align	2
 4242              	.LC22:
 4243 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4243      2052414D 
 4243      2046696C 
 4243      6500
 4244 000e 0000     		.align	2
 4245              	.LC23:
 4246 0010 45727220 		.ascii	"Err lrf2\000"
 4246      6C726632 
 4246      00
 4247              		.section	.text.load_ram_file,"ax",%progbits
 4248              		.align	1
 4249              		.p2align 2,,3
 4250              		.global	load_ram_file
 4251              		.syntax unified
 4252              		.thumb
 4253              		.thumb_func
 4254              		.fpu fpv4-sp-d16
 4256              	load_ram_file:
 4257              	.LVL390:
 4258              	.LFB36:
1182:src/storage.c ****   FRESULT f;
 4259              		.loc 1 1182 29 is_stmt 1 view -0
 4260              		.cfi_startproc
 4261              		@ args = 0, pretend = 0, frame = 8
 4262              		@ frame_needed = 0, uses_anonymous_args = 0
1183:src/storage.c ****   int fss;
 4263              		.loc 1 1183 3 view .LVU1181
1184:src/storage.c ****   int data = READ;
 4264              		.loc 1 1184 3 view .LVU1182
1185:src/storage.c ****   uint x=0;
 4265              		.loc 1 1185 3 view .LVU1183
1182:src/storage.c ****   FRESULT f;
 4266              		.loc 1 1182 29 is_stmt 0 view .LVU1184
 4267 0000 30B5     		push	{r4, r5, lr}
 4268              		.cfi_def_cfa_offset 12
 4269              		.cfi_offset 4, -12
 4270              		.cfi_offset 5, -8
 4271              		.cfi_offset 14, -4
1186:src/storage.c ****   
 4272              		.loc 1 1186 8 view .LVU1185
 4273 0002 0222     		movs	r2, #2
1182:src/storage.c ****   FRESULT f;
 4274              		.loc 1 1182 29 view .LVU1186
 4275 0004 87B0     		sub	sp, sp, #28
 4276              		.cfi_def_cfa_offset 40
1186:src/storage.c ****   
 4277              		.loc 1 1186 8 view .LVU1187
 4278 0006 0023     		movs	r3, #0
 4279 0008 CDE90423 		strd	r2, r3, [sp, #16]
1188:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4280              		.loc 1 1188 3 is_stmt 1 view .LVU1188
1188:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4281              		.loc 1 1188 6 is_stmt 0 view .LVU1189
ARM GAS  /tmp/ccqjxcgd.s 			page 120


 4282 000c F8B9     		cbnz	r0, .L341
1189:src/storage.c ****     if (f != FR_OK) {
 4283              		.loc 1 1189 5 is_stmt 1 view .LVU1190
1189:src/storage.c ****     if (f != FR_OK) {
 4284              		.loc 1 1189 9 is_stmt 0 view .LVU1191
 4285 000e 214C     		ldr	r4, .L352
 4286 0010 214B     		ldr	r3, .L352+4
 4287 0012 6068     		ldr	r0, [r4, #4]
 4288              	.LVL391:
1189:src/storage.c ****     if (f != FR_OK) {
 4289              		.loc 1 1189 9 view .LVU1192
 4290 0014 2149     		ldr	r1, .L352+8
 4291 0016 0122     		movs	r2, #1
 4292 0018 9847     		blx	r3
 4293              	.LVL392:
1190:src/storage.c ****       f_close (FPT);
 4294              		.loc 1 1190 5 is_stmt 1 view .LVU1193
1190:src/storage.c ****       f_close (FPT);
 4295              		.loc 1 1190 8 is_stmt 0 view .LVU1194
 4296 001a 0028     		cmp	r0, #0
 4297 001c 34D1     		bne	.L342
 4298              	.LVL393:
 4299              	.L346:
1201:src/storage.c ****   if ( f != FR_OK ) {
 4300              		.loc 1 1201 3 is_stmt 1 view .LVU1195
1201:src/storage.c ****   if ( f != FR_OK ) {
 4301              		.loc 1 1201 7 is_stmt 0 view .LVU1196
 4302 001e 204B     		ldr	r3, .L352+12
 4303 0020 1C4D     		ldr	r5, .L352
 4304 0022 1968     		ldr	r1, [r3]
 4305 0024 1F4C     		ldr	r4, .L352+16
 4306 0026 6868     		ldr	r0, [r5, #4]
 4307 0028 05AB     		add	r3, sp, #20
 4308 002a 4FF48052 		mov	r2, #4096
 4309 002e A047     		blx	r4
 4310              	.LVL394:
1202:src/storage.c ****     DispMsg = "Err lrf2";
 4311              		.loc 1 1202 3 is_stmt 1 view .LVU1197
1202:src/storage.c ****     DispMsg = "Err lrf2";
 4312              		.loc 1 1202 6 is_stmt 0 view .LVU1198
 4313 0030 0446     		mov	r4, r0
 4314 0032 D8B9     		cbnz	r0, .L351
1207:src/storage.c ****     DispMsg = "File too big";
 4315              		.loc 1 1207 3 is_stmt 1 view .LVU1199
1207:src/storage.c ****     DispMsg = "File too big";
 4316              		.loc 1 1207 10 is_stmt 0 view .LVU1200
 4317 0034 6868     		ldr	r0, [r5, #4]
 4318              	.LVL395:
1207:src/storage.c ****     DispMsg = "File too big";
 4319              		.loc 1 1207 6 view .LVU1201
 4320 0036 8269     		ldr	r2, [r0, #24]
 4321 0038 C368     		ldr	r3, [r0, #12]
 4322 003a 9A42     		cmp	r2, r3
 4323 003c 1FD0     		beq	.L347
1208:src/storage.c ****       f_close( FPT );
 4324              		.loc 1 1208 5 is_stmt 1 view .LVU1202
1208:src/storage.c ****       f_close( FPT );
ARM GAS  /tmp/ccqjxcgd.s 			page 121


 4325              		.loc 1 1208 13 is_stmt 0 view .LVU1203
 4326 003e 1A4B     		ldr	r3, .L352+20
 4327 0040 1A4A     		ldr	r2, .L352+24
 4328 0042 1A60     		str	r2, [r3]
1209:src/storage.c ****       return 1;
 4329              		.loc 1 1209 7 is_stmt 1 view .LVU1204
 4330 0044 1A4B     		ldr	r3, .L352+28
 4331 0046 9847     		blx	r3
 4332              	.LVL396:
1210:src/storage.c ****   }
 4333              		.loc 1 1210 7 view .LVU1205
1210:src/storage.c ****   }
 4334              		.loc 1 1210 14 is_stmt 0 view .LVU1206
 4335 0048 0120     		movs	r0, #1
1214:src/storage.c **** 
 4336              		.loc 1 1214 1 view .LVU1207
 4337 004a 07B0     		add	sp, sp, #28
 4338              		.cfi_remember_state
 4339              		.cfi_def_cfa_offset 12
 4340              		@ sp needed
 4341 004c 30BD     		pop	{r4, r5, pc}
 4342              	.LVL397:
 4343              	.L341:
 4344              		.cfi_restore_state
1197:src/storage.c ****     if (fss != 1) return 1;
 4345              		.loc 1 1197 5 is_stmt 1 view .LVU1208
1197:src/storage.c ****     if (fss != 1) return 1;
 4346              		.loc 1 1197 11 is_stmt 0 view .LVU1209
 4347 004e 04AA     		add	r2, sp, #16
 4348 0050 CDE90033 		strd	r3, r3, [sp]
 4349 0054 0292     		str	r2, [sp, #8]
 4350 0056 174C     		ldr	r4, .L352+32
 4351 0058 174B     		ldr	r3, .L352+36
 4352 005a 184A     		ldr	r2, .L352+40
 4353 005c 1849     		ldr	r1, .L352+44
 4354 005e 1948     		ldr	r0, .L352+48
 4355              	.LVL398:
1197:src/storage.c ****     if (fss != 1) return 1;
 4356              		.loc 1 1197 11 view .LVU1210
 4357 0060 A047     		blx	r4
 4358              	.LVL399:
1198:src/storage.c ****   }
 4359              		.loc 1 1198 5 is_stmt 1 view .LVU1211
1198:src/storage.c ****   }
 4360              		.loc 1 1198 8 is_stmt 0 view .LVU1212
 4361 0062 0128     		cmp	r0, #1
 4362 0064 DBD0     		beq	.L346
1198:src/storage.c ****   }
 4363              		.loc 1 1198 26 view .LVU1213
 4364 0066 0120     		movs	r0, #1
 4365              	.LVL400:
1214:src/storage.c **** 
 4366              		.loc 1 1214 1 view .LVU1214
 4367 0068 07B0     		add	sp, sp, #28
 4368              		.cfi_remember_state
 4369              		.cfi_def_cfa_offset 12
 4370              		@ sp needed
ARM GAS  /tmp/ccqjxcgd.s 			page 122


 4371 006a 30BD     		pop	{r4, r5, pc}
 4372              	.LVL401:
 4373              	.L351:
 4374              		.cfi_restore_state
1203:src/storage.c ****       f_close( FPT );
 4375              		.loc 1 1203 5 is_stmt 1 view .LVU1215
1203:src/storage.c ****       f_close( FPT );
 4376              		.loc 1 1203 13 is_stmt 0 view .LVU1216
 4377 006c 0E4B     		ldr	r3, .L352+20
 4378 006e 164A     		ldr	r2, .L352+52
 4379 0070 1A60     		str	r2, [r3]
1204:src/storage.c ****       return 1;
 4380              		.loc 1 1204 7 is_stmt 1 view .LVU1217
 4381 0072 6868     		ldr	r0, [r5, #4]
 4382              	.LVL402:
1204:src/storage.c ****       return 1;
 4383              		.loc 1 1204 7 is_stmt 0 view .LVU1218
 4384 0074 0E4B     		ldr	r3, .L352+28
 4385 0076 9847     		blx	r3
 4386              	.LVL403:
1205:src/storage.c ****   }
 4387              		.loc 1 1205 7 is_stmt 1 view .LVU1219
1205:src/storage.c ****   }
 4388              		.loc 1 1205 14 is_stmt 0 view .LVU1220
 4389 0078 0120     		movs	r0, #1
1214:src/storage.c **** 
 4390              		.loc 1 1214 1 view .LVU1221
 4391 007a 07B0     		add	sp, sp, #28
 4392              		.cfi_remember_state
 4393              		.cfi_def_cfa_offset 12
 4394              		@ sp needed
 4395 007c 30BD     		pop	{r4, r5, pc}
 4396              	.L347:
 4397              		.cfi_restore_state
1212:src/storage.c ****   return 0;
 4398              		.loc 1 1212 3 is_stmt 1 view .LVU1222
 4399 007e 0C4B     		ldr	r3, .L352+28
 4400 0080 9847     		blx	r3
 4401              	.LVL404:
1213:src/storage.c **** }
 4402              		.loc 1 1213 3 view .LVU1223
1213:src/storage.c **** }
 4403              		.loc 1 1213 10 is_stmt 0 view .LVU1224
 4404 0082 2046     		mov	r0, r4
1214:src/storage.c **** 
 4405              		.loc 1 1214 1 view .LVU1225
 4406 0084 07B0     		add	sp, sp, #28
 4407              		.cfi_remember_state
 4408              		.cfi_def_cfa_offset 12
 4409              		@ sp needed
 4410 0086 30BD     		pop	{r4, r5, pc}
 4411              	.LVL405:
 4412              	.L342:
 4413              		.cfi_restore_state
1191:src/storage.c ****       //      DispMsg = "No file?";
 4414              		.loc 1 1191 7 is_stmt 1 view .LVU1226
 4415 0088 6068     		ldr	r0, [r4, #4]
ARM GAS  /tmp/ccqjxcgd.s 			page 123


 4416              	.LVL406:
1191:src/storage.c ****       //      DispMsg = "No file?";
 4417              		.loc 1 1191 7 is_stmt 0 view .LVU1227
 4418 008a 094B     		ldr	r3, .L352+28
 4419 008c 9847     		blx	r3
 4420              	.LVL407:
1193:src/storage.c ****     }
 4421              		.loc 1 1193 7 is_stmt 1 view .LVU1228
1193:src/storage.c ****     }
 4422              		.loc 1 1193 14 is_stmt 0 view .LVU1229
 4423 008e 0120     		movs	r0, #1
1214:src/storage.c **** 
 4424              		.loc 1 1214 1 view .LVU1230
 4425 0090 07B0     		add	sp, sp, #28
 4426              		.cfi_def_cfa_offset 12
 4427              		@ sp needed
 4428 0092 30BD     		pop	{r4, r5, pc}
 4429              	.L353:
 4430              		.align	2
 4431              	.L352:
 4432 0094 00200010 		.word	268443648
 4433 0098 35040008 		.word	134218805
 4434 009c 00000000 		.word	.LC17
 4435 00a0 00000000 		.word	main_ram
 4436 00a4 3D040008 		.word	134218813
 4437 00a8 00000000 		.word	DispMsg
 4438 00ac 14000000 		.word	.LC16
 4439 00b0 39040008 		.word	134218809
 4440 00b4 51030008 		.word	134218577
 4441 00b8 00000000 		.word	open_selected_file
 4442 00bc 20000000 		.word	.LC19
 4443 00c0 30000000 		.word	.LC2
 4444 00c4 00000000 		.word	.LC22
 4445 00c8 10000000 		.word	.LC23
 4446              		.cfi_endproc
 4447              	.LFE36:
 4449              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4450              		.align	2
 4451              	.LC24:
 4452 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4452      2052414D 
 4452      20426163 
 4452      6B757020 
 4452      46696C65 
 4453 0015 000000   		.align	2
 4454              	.LC25:
 4455 0018 45727220 		.ascii	"Err lbf2\000"
 4455      6C626632 
 4455      00
 4456              		.section	.text.load_backup_file,"ax",%progbits
 4457              		.align	1
 4458              		.p2align 2,,3
 4459              		.global	load_backup_file
 4460              		.syntax unified
 4461              		.thumb
 4462              		.thumb_func
 4463              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqjxcgd.s 			page 124


 4465              	load_backup_file:
 4466              	.LVL408:
 4467              	.LFB37:
1216:src/storage.c ****   FRESULT f;
 4468              		.loc 1 1216 33 is_stmt 1 view -0
 4469              		.cfi_startproc
 4470              		@ args = 0, pretend = 0, frame = 8
 4471              		@ frame_needed = 0, uses_anonymous_args = 0
1217:src/storage.c ****   int fss;
 4472              		.loc 1 1217 3 view .LVU1232
1218:src/storage.c ****   int data = READ;
 4473              		.loc 1 1218 3 view .LVU1233
1219:src/storage.c ****   uint x=0;
 4474              		.loc 1 1219 3 view .LVU1234
1216:src/storage.c ****   FRESULT f;
 4475              		.loc 1 1216 33 is_stmt 0 view .LVU1235
 4476 0000 10B5     		push	{r4, lr}
 4477              		.cfi_def_cfa_offset 8
 4478              		.cfi_offset 4, -8
 4479              		.cfi_offset 14, -4
1220:src/storage.c **** 
 4480              		.loc 1 1220 8 view .LVU1236
 4481 0002 0222     		movs	r2, #2
1216:src/storage.c ****   FRESULT f;
 4482              		.loc 1 1216 33 view .LVU1237
 4483 0004 86B0     		sub	sp, sp, #24
 4484              		.cfi_def_cfa_offset 32
1220:src/storage.c **** 
 4485              		.loc 1 1220 8 view .LVU1238
 4486 0006 0023     		movs	r3, #0
 4487 0008 CDE90423 		strd	r2, r3, [sp, #16]
1222:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4488              		.loc 1 1222 3 is_stmt 1 view .LVU1239
1222:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4489              		.loc 1 1222 6 is_stmt 0 view .LVU1240
 4490 000c 08BB     		cbnz	r0, .L355
1223:src/storage.c ****     if (f != FR_OK) {
 4491              		.loc 1 1223 5 is_stmt 1 view .LVU1241
1223:src/storage.c ****     if (f != FR_OK) {
 4492              		.loc 1 1223 9 is_stmt 0 view .LVU1242
 4493 000e 1A4C     		ldr	r4, .L365
 4494 0010 1A4B     		ldr	r3, .L365+4
 4495 0012 6068     		ldr	r0, [r4, #4]
 4496              	.LVL409:
1223:src/storage.c ****     if (f != FR_OK) {
 4497              		.loc 1 1223 9 view .LVU1243
 4498 0014 1A49     		ldr	r1, .L365+8
 4499 0016 0122     		movs	r2, #1
 4500 0018 9847     		blx	r3
 4501              	.LVL410:
1224:src/storage.c ****       f_close (FPT);
 4502              		.loc 1 1224 5 is_stmt 1 view .LVU1244
1224:src/storage.c ****       f_close (FPT);
 4503              		.loc 1 1224 8 is_stmt 0 view .LVU1245
 4504 001a 0028     		cmp	r0, #0
 4505 001c 27D1     		bne	.L356
 4506              	.LVL411:
ARM GAS  /tmp/ccqjxcgd.s 			page 125


 4507              	.L360:
1234:src/storage.c ****   if ( f != FR_OK ) {
 4508              		.loc 1 1234 3 is_stmt 1 view .LVU1246
1234:src/storage.c ****   if ( f != FR_OK ) {
 4509              		.loc 1 1234 7 is_stmt 0 view .LVU1247
 4510 001e 194A     		ldr	r2, .L365+12
 4511 0020 154B     		ldr	r3, .L365
 4512 0022 1168     		ldr	r1, [r2]
 4513 0024 5868     		ldr	r0, [r3, #4]
 4514 0026 184C     		ldr	r4, .L365+16
 4515 0028 05AB     		add	r3, sp, #20
 4516 002a 4FF48052 		mov	r2, #4096
 4517 002e A047     		blx	r4
 4518              	.LVL412:
1235:src/storage.c ****     DispMsg = "Err lbf2";
 4519              		.loc 1 1235 3 is_stmt 1 view .LVU1248
1235:src/storage.c ****     DispMsg = "Err lbf2";
 4520              		.loc 1 1235 6 is_stmt 0 view .LVU1249
 4521 0030 10B1     		cbz	r0, .L358
1236:src/storage.c ****   }
 4522              		.loc 1 1236 5 is_stmt 1 view .LVU1250
1236:src/storage.c ****   }
 4523              		.loc 1 1236 13 is_stmt 0 view .LVU1251
 4524 0032 164B     		ldr	r3, .L365+20
 4525 0034 164A     		ldr	r2, .L365+24
 4526 0036 1A60     		str	r2, [r3]
 4527              	.L358:
1238:src/storage.c ****     DispMsg = "File too big";
 4528              		.loc 1 1238 3 is_stmt 1 view .LVU1252
1238:src/storage.c ****     DispMsg = "File too big";
 4529              		.loc 1 1238 10 is_stmt 0 view .LVU1253
 4530 0038 0F4B     		ldr	r3, .L365
 4531 003a 5868     		ldr	r0, [r3, #4]
 4532              	.LVL413:
1238:src/storage.c ****     DispMsg = "File too big";
 4533              		.loc 1 1238 6 view .LVU1254
 4534 003c 8269     		ldr	r2, [r0, #24]
 4535 003e C368     		ldr	r3, [r0, #12]
 4536 0040 9A42     		cmp	r2, r3
 4537 0042 02D0     		beq	.L361
1239:src/storage.c ****   }
 4538              		.loc 1 1239 5 is_stmt 1 view .LVU1255
1239:src/storage.c ****   }
 4539              		.loc 1 1239 13 is_stmt 0 view .LVU1256
 4540 0044 114B     		ldr	r3, .L365+20
 4541 0046 134A     		ldr	r2, .L365+28
 4542 0048 1A60     		str	r2, [r3]
 4543              	.L361:
1241:src/storage.c **** }
 4544              		.loc 1 1241 3 is_stmt 1 view .LVU1257
 4545 004a 134B     		ldr	r3, .L365+32
 4546 004c 9847     		blx	r3
 4547              	.LVL414:
1242:src/storage.c **** 
 4548              		.loc 1 1242 1 is_stmt 0 view .LVU1258
 4549 004e 06B0     		add	sp, sp, #24
 4550              		.cfi_remember_state
ARM GAS  /tmp/ccqjxcgd.s 			page 126


 4551              		.cfi_def_cfa_offset 8
 4552              		@ sp needed
 4553 0050 10BD     		pop	{r4, pc}
 4554              	.LVL415:
 4555              	.L355:
 4556              		.cfi_restore_state
1230:src/storage.c ****     if (fss != 1) return;
 4557              		.loc 1 1230 5 is_stmt 1 view .LVU1259
1230:src/storage.c ****     if (fss != 1) return;
 4558              		.loc 1 1230 11 is_stmt 0 view .LVU1260
 4559 0052 04AA     		add	r2, sp, #16
 4560 0054 CDE90033 		strd	r3, r3, [sp]
 4561 0058 0292     		str	r2, [sp, #8]
 4562 005a 104C     		ldr	r4, .L365+36
 4563 005c 104B     		ldr	r3, .L365+40
 4564 005e 114A     		ldr	r2, .L365+44
 4565 0060 1149     		ldr	r1, .L365+48
 4566 0062 1248     		ldr	r0, .L365+52
 4567              	.LVL416:
1230:src/storage.c ****     if (fss != 1) return;
 4568              		.loc 1 1230 11 view .LVU1261
 4569 0064 A047     		blx	r4
 4570              	.LVL417:
1231:src/storage.c ****   }
 4571              		.loc 1 1231 5 is_stmt 1 view .LVU1262
1231:src/storage.c ****   }
 4572              		.loc 1 1231 8 is_stmt 0 view .LVU1263
 4573 0066 0128     		cmp	r0, #1
 4574 0068 D9D0     		beq	.L360
1242:src/storage.c **** 
 4575              		.loc 1 1242 1 view .LVU1264
 4576 006a 06B0     		add	sp, sp, #24
 4577              		.cfi_remember_state
 4578              		.cfi_def_cfa_offset 8
 4579              		@ sp needed
 4580 006c 10BD     		pop	{r4, pc}
 4581              	.LVL418:
 4582              	.L356:
 4583              		.cfi_restore_state
1225:src/storage.c ****       return;
 4584              		.loc 1 1225 7 is_stmt 1 view .LVU1265
 4585 006e 6068     		ldr	r0, [r4, #4]
 4586              	.LVL419:
1225:src/storage.c ****       return;
 4587              		.loc 1 1225 7 is_stmt 0 view .LVU1266
 4588 0070 094B     		ldr	r3, .L365+32
 4589 0072 9847     		blx	r3
 4590              	.LVL420:
1226:src/storage.c ****     }
 4591              		.loc 1 1226 7 is_stmt 1 view .LVU1267
1242:src/storage.c **** 
 4592              		.loc 1 1242 1 is_stmt 0 view .LVU1268
 4593 0074 06B0     		add	sp, sp, #24
 4594              		.cfi_def_cfa_offset 8
 4595              		@ sp needed
 4596 0076 10BD     		pop	{r4, pc}
 4597              	.L366:
ARM GAS  /tmp/ccqjxcgd.s 			page 127


 4598              		.align	2
 4599              	.L365:
 4600 0078 00200010 		.word	268443648
 4601 007c 35040008 		.word	134218805
 4602 0080 00000000 		.word	.LC0
 4603 0084 00000000 		.word	backup_ram
 4604 0088 3D040008 		.word	134218813
 4605 008c 00000000 		.word	DispMsg
 4606 0090 18000000 		.word	.LC25
 4607 0094 14000000 		.word	.LC16
 4608 0098 39040008 		.word	134218809
 4609 009c 51030008 		.word	134218577
 4610 00a0 00000000 		.word	open_selected_file
 4611 00a4 20000000 		.word	.LC19
 4612 00a8 30000000 		.word	.LC2
 4613 00ac 00000000 		.word	.LC24
 4614              		.cfi_endproc
 4615              	.LFE37:
 4617              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4618              		.align	2
 4619              	.LC26:
 4620 0000 57726974 		.ascii	"Write err\000"
 4620      65206572 
 4620      7200
 4621 000a 0000     		.align	2
 4622              	.LC27:
 4623 000c 57726974 		.ascii	"Written\000"
 4623      74656E00 
 4624              		.align	2
 4625              	.LC28:
 4626 0014 53617665 		.ascii	"Save current program\000"
 4626      20637572 
 4626      72656E74 
 4626      2070726F 
 4626      6772616D 
 4627 0029 000000   		.align	2
 4628              	.LC29:
 4629 002c 4D656D20 		.ascii	"Mem short\000"
 4629      73686F72 
 4629      7400
 4630              		.section	.text.save_prog_file,"ax",%progbits
 4631              		.align	1
 4632              		.p2align 2,,3
 4633              		.global	save_prog_file
 4634              		.syntax unified
 4635              		.thumb
 4636              		.thumb_func
 4637              		.fpu fpv4-sp-d16
 4639              	save_prog_file:
 4640              	.LFB39:
1270:src/storage.c ****   opcode lbl; 
 4641              		.loc 1 1270 24 is_stmt 1 view -0
 4642              		.cfi_startproc
 4643              		@ args = 0, pretend = 0, frame = 8
 4644              		@ frame_needed = 0, uses_anonymous_args = 0
1271:src/storage.c ****   unsigned int pc;
 4645              		.loc 1 1271 3 view .LVU1270
ARM GAS  /tmp/ccqjxcgd.s 			page 128


1272:src/storage.c ****   unsigned short steps, prog_crc;
 4646              		.loc 1 1272 3 view .LVU1271
1273:src/storage.c ****   FRESULT f;
 4647              		.loc 1 1273 3 view .LVU1272
1274:src/storage.c ****   int data = WRITE;
 4648              		.loc 1 1274 3 view .LVU1273
1275:src/storage.c ****   int fss;
 4649              		.loc 1 1275 3 view .LVU1274
1270:src/storage.c ****   opcode lbl; 
 4650              		.loc 1 1270 24 is_stmt 0 view .LVU1275
 4651 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4652              		.cfi_def_cfa_offset 28
 4653              		.cfi_offset 4, -28
 4654              		.cfi_offset 5, -24
 4655              		.cfi_offset 6, -20
 4656              		.cfi_offset 7, -16
 4657              		.cfi_offset 8, -12
 4658              		.cfi_offset 9, -8
 4659              		.cfi_offset 14, -4
1277:src/storage.c ****   char* buffer;
 4660              		.loc 1 1277 8 view .LVU1276
 4661 0004 0023     		movs	r3, #0
1270:src/storage.c ****   opcode lbl; 
 4662              		.loc 1 1270 24 view .LVU1277
 4663 0006 87B0     		sub	sp, sp, #28
 4664              		.cfi_def_cfa_offset 56
1277:src/storage.c ****   char* buffer;
 4665              		.loc 1 1277 8 view .LVU1278
 4666 0008 0124     		movs	r4, #1
 4667 000a CDE90443 		strd	r4, r3, [sp, #16]
1278:src/storage.c ****   FLASH_REGION* fr;
 4668              		.loc 1 1278 3 is_stmt 1 view .LVU1279
1279:src/storage.c **** 
 4669              		.loc 1 1279 3 view .LVU1280
1282:src/storage.c ****     /*
 4670              		.loc 1 1282 3 view .LVU1281
1282:src/storage.c ****     /*
 4671              		.loc 1 1282 8 is_stmt 0 view .LVU1282
 4672 000e FFF7FEFF 		bl	not_running
 4673              	.LVL421:
1282:src/storage.c ****     /*
 4674              		.loc 1 1282 6 view .LVU1283
 4675 0012 C8B1     		cbz	r0, .L367
1286:src/storage.c ****     if ( pc == REGION_XROM ) {
 4676              		.loc 1 1286 5 is_stmt 1 view .LVU1284
 4677              	.LVL422:
1287:src/storage.c ****       error_message( ERR_ILLEGAL );
 4678              		.loc 1 1287 5 view .LVU1285
1286:src/storage.c ****     if ( pc == REGION_XROM ) {
 4679              		.loc 1 1286 10 is_stmt 0 view .LVU1286
 4680 0014 464D     		ldr	r5, .L384
 4681              	.LVL423:
1286:src/storage.c ****     if ( pc == REGION_XROM ) {
 4682              		.loc 1 1286 10 view .LVU1287
 4683 0016 2B68     		ldr	r3, [r5]
 4684 0018 B3F8E03F 		ldrh	r3, [r3, #4064]
1287:src/storage.c ****       error_message( ERR_ILLEGAL );
ARM GAS  /tmp/ccqjxcgd.s 			page 129


 4685              		.loc 1 1287 8 view .LVU1288
 4686 001c 9B0B     		lsrs	r3, r3, #14
 4687 001e 032B     		cmp	r3, #3
 4688 0020 72D0     		beq	.L382
1294:src/storage.c ****     lbl = getprog( ProgBegin );
 4689              		.loc 1 1294 5 is_stmt 1 view .LVU1289
 4690 0022 2046     		mov	r0, r4
 4691 0024 FFF7FEFF 		bl	update_program_bounds
 4692              	.LVL424:
1295:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4693              		.loc 1 1295 5 view .LVU1290
1295:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4694              		.loc 1 1295 20 is_stmt 0 view .LVU1291
 4695 0028 2B68     		ldr	r3, [r5]
1295:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4696              		.loc 1 1295 11 view .LVU1292
 4697 002a B3F8EC0F 		ldrh	r0, [r3, #4076]
 4698 002e FFF7FEFF 		bl	getprog
 4699              	.LVL425:
1296:src/storage.c ****       error_message( ERR_NO_LBL );
 4700              		.loc 1 1296 5 is_stmt 1 view .LVU1293
1296:src/storage.c ****       error_message( ERR_NO_LBL );
 4701              		.loc 1 1296 11 is_stmt 0 view .LVU1294
 4702 0032 00F47043 		and	r3, r0, #61440
1296:src/storage.c ****       error_message( ERR_NO_LBL );
 4703              		.loc 1 1296 8 view .LVU1295
 4704 0036 B3F5704F 		cmp	r3, #61440
 4705 003a 02D1     		bne	.L371
1296:src/storage.c ****       error_message( ERR_NO_LBL );
 4706              		.loc 1 1296 22 discriminator 1 view .LVU1296
 4707 003c 10F4706F 		tst	r0, #3840
 4708 0040 05D0     		beq	.L372
 4709              	.L371:
1297:src/storage.c ****       return;
 4710              		.loc 1 1297 7 is_stmt 1 view .LVU1297
 4711 0042 0620     		movs	r0, #6
 4712              	.LVL426:
1297:src/storage.c ****       return;
 4713              		.loc 1 1297 7 is_stmt 0 view .LVU1298
 4714 0044 FFF7FEFF 		bl	error_message
 4715              	.LVL427:
1298:src/storage.c ****     }
 4716              		.loc 1 1298 7 is_stmt 1 view .LVU1299
 4717              	.L367:
1343:src/storage.c **** 
 4718              		.loc 1 1343 1 is_stmt 0 view .LVU1300
 4719 0048 07B0     		add	sp, sp, #28
 4720              		.cfi_remember_state
 4721              		.cfi_def_cfa_offset 28
 4722              		@ sp needed
 4723 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4724              	.LVL428:
 4725              	.L372:
 4726              		.cfi_restore_state
1303:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4727              		.loc 1 1303 5 is_stmt 1 view .LVU1301
1303:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
ARM GAS  /tmp/ccqjxcgd.s 			page 130


 4728              		.loc 1 1303 17 is_stmt 0 view .LVU1302
 4729 004e 2B68     		ldr	r3, [r5]
1303:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4730              		.loc 1 1303 11 view .LVU1303
 4731 0050 B3F8EE5F 		ldrh	r5, [r3, #4078]
 4732 0054 B3F8EC3F 		ldrh	r3, [r3, #4076]
 4733 0058 0135     		adds	r5, r5, #1
 4734 005a ED1A     		subs	r5, r5, r3
 4735 005c ADB2     		uxth	r5, r5
 4736              	.LVL429:
1304:src/storage.c ****     /*
 4737              		.loc 1 1304 5 is_stmt 1 view .LVU1304
1304:src/storage.c ****     /*
 4738              		.loc 1 1304 23 is_stmt 0 view .LVU1305
 4739 005e FFF7FEFF 		bl	get_current_prog
 4740              	.LVL430:
 4741              	.LBB113:
 4742              	.LBB114:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4743              		.loc 1 169 2 view .LVU1306
 4744 0062 6E00     		lsls	r6, r5, #1
 4745              	.LVL431:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4746              		.loc 1 169 2 view .LVU1307
 4747              	.LBE114:
 4748              	.LBI113:
 163:src/storage.c **** {
 4749              		.loc 1 163 20 is_stmt 1 view .LVU1308
 4750              	.LBB115:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4751              		.loc 1 165 2 view .LVU1309
 166:src/storage.c **** 	unsigned int i;
 4752              		.loc 1 166 2 view .LVU1310
 167:src/storage.c **** 
 4753              		.loc 1 167 2 view .LVU1311
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4754              		.loc 1 169 2 view .LVU1312
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4755              		.loc 1 169 15 view .LVU1313
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4756              		.loc 1 169 2 is_stmt 0 view .LVU1314
 4757 0064 002D     		cmp	r5, #0
 4758 0066 55D0     		beq	.L378
 4759 0068 8119     		adds	r1, r0, r6
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4760              		.loc 1 165 21 view .LVU1315
 4761 006a 45F6A524 		movw	r4, #23205
 4762              	.LVL432:
 4763              	.L374:
 170:src/storage.c **** 		crc ^= *d++;
 4764              		.loc 1 170 3 is_stmt 1 view .LVU1316
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4765              		.loc 1 171 10 is_stmt 0 view .LVU1317
 4766 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4767              	.LVL433:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4768              		.loc 1 171 10 view .LVU1318
ARM GAS  /tmp/ccqjxcgd.s 			page 131


 4769 0072 63BA     		rev16	r3, r4
 4770 0074 9BB2     		uxth	r3, r3
 4771              	.LVL434:
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4772              		.loc 1 171 3 is_stmt 1 view .LVU1319
 171:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4773              		.loc 1 171 7 is_stmt 0 view .LVU1320
 4774 0076 5340     		eors	r3, r3, r2
 4775              	.LVL435:
 172:src/storage.c **** 		crc ^= crc << 12;
 4776              		.loc 1 172 3 is_stmt 1 view .LVU1321
 172:src/storage.c **** 		crc ^= crc << 12;
 4777              		.loc 1 172 7 is_stmt 0 view .LVU1322
 4778 0078 C3F30312 		ubfx	r2, r3, #4, #4
 4779 007c 5340     		eors	r3, r3, r2
 4780              	.LVL436:
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4781              		.loc 1 173 3 is_stmt 1 view .LVU1323
 173:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4782              		.loc 1 173 7 is_stmt 0 view .LVU1324
 4783 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4784              	.LVL437:
 174:src/storage.c **** 	}
 4785              		.loc 1 174 3 is_stmt 1 view .LVU1325
 174:src/storage.c **** 	}
 4786              		.loc 1 174 25 is_stmt 0 view .LVU1326
 4787 0082 5C01     		lsls	r4, r3, #5
 4788 0084 04F4FF54 		and	r4, r4, #8160
 174:src/storage.c **** 	}
 4789              		.loc 1 174 7 view .LVU1327
 4790 0088 9BB2     		uxth	r3, r3
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4791              		.loc 1 169 2 view .LVU1328
 4792 008a 8142     		cmp	r1, r0
 174:src/storage.c **** 	}
 4793              		.loc 1 174 7 view .LVU1329
 4794 008c 84EA0304 		eor	r4, r4, r3
 4795              	.LVL438:
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4796              		.loc 1 169 27 is_stmt 1 view .LVU1330
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4797              		.loc 1 169 15 view .LVU1331
 169:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4798              		.loc 1 169 2 is_stmt 0 view .LVU1332
 4799 0090 EDD1     		bne	.L374
 4800              	.LVL439:
 4801              	.L373:
 176:src/storage.c **** }
 4802              		.loc 1 176 2 is_stmt 1 view .LVU1333
 176:src/storage.c **** }
 4803              		.loc 1 176 2 is_stmt 0 view .LVU1334
 4804              	.LBE115:
 4805              	.LBE113:
1308:src/storage.c **** 
 4806              		.loc 1 1308 5 is_stmt 1 view .LVU1335
 4807 0092 DFF8D080 		ldr	r8, .L384+52
1310:src/storage.c ****     if (fss != 1) return;
ARM GAS  /tmp/ccqjxcgd.s 			page 132


 4808              		.loc 1 1310 11 is_stmt 0 view .LVU1336
 4809 0096 274F     		ldr	r7, .L384+4
1308:src/storage.c **** 
 4810              		.loc 1 1308 5 view .LVU1337
 4811 0098 0120     		movs	r0, #1
 4812 009a C047     		blx	r8
 4813              	.LVL440:
1310:src/storage.c ****     if (fss != 1) return;
 4814              		.loc 1 1310 5 is_stmt 1 view .LVU1338
1310:src/storage.c ****     if (fss != 1) return;
 4815              		.loc 1 1310 11 is_stmt 0 view .LVU1339
 4816 009c 0123     		movs	r3, #1
 4817 009e 04AA     		add	r2, sp, #16
 4818 00a0 CDE90132 		strd	r3, r2, [sp, #4]
 4819 00a4 0093     		str	r3, [sp]
 4820 00a6 244A     		ldr	r2, .L384+8
 4821 00a8 244B     		ldr	r3, .L384+12
 4822 00aa 2549     		ldr	r1, .L384+16
 4823 00ac 2548     		ldr	r0, .L384+20
 4824 00ae B847     		blx	r7
 4825              	.LVL441:
1311:src/storage.c **** 
 4826              		.loc 1 1311 5 is_stmt 1 view .LVU1340
1311:src/storage.c **** 
 4827              		.loc 1 1311 8 is_stmt 0 view .LVU1341
 4828 00b0 0128     		cmp	r0, #1
 4829 00b2 C9D1     		bne	.L367
1315:src/storage.c ****     if (!buffer) {// calloc failure!
 4830              		.loc 1 1315 5 is_stmt 1 view .LVU1342
1315:src/storage.c ****     if (!buffer) {// calloc failure!
 4831              		.loc 1 1315 14 is_stmt 0 view .LVU1343
 4832 00b4 0146     		mov	r1, r0
 4833 00b6 4FF48050 		mov	r0, #4096
 4834              	.LVL442:
1315:src/storage.c ****     if (!buffer) {// calloc failure!
 4835              		.loc 1 1315 14 view .LVU1344
 4836 00ba FFF7FEFF 		bl	calloc
 4837              	.LVL443:
1316:src/storage.c ****       f_close(FPT);
 4838              		.loc 1 1316 5 is_stmt 1 view .LVU1345
1316:src/storage.c ****       f_close(FPT);
 4839              		.loc 1 1316 8 is_stmt 0 view .LVU1346
 4840 00be 0746     		mov	r7, r0
 4841 00c0 58B3     		cbz	r0, .L383
1323:src/storage.c ****     fr->size = steps;
 4842              		.loc 1 1323 5 is_stmt 1 view .LVU1347
 4843              	.LVL444:
1324:src/storage.c ****     fr->crc = prog_crc;
 4844              		.loc 1 1324 5 view .LVU1348
1325:src/storage.c **** 
 4845              		.loc 1 1325 13 is_stmt 0 view .LVU1349
 4846 00c2 8146     		mov	r9, r0
1324:src/storage.c ****     fr->crc = prog_crc;
 4847              		.loc 1 1324 14 view .LVU1350
 4848 00c4 4580     		strh	r5, [r0, #2]	@ movhi
1325:src/storage.c **** 
 4849              		.loc 1 1325 5 is_stmt 1 view .LVU1351
ARM GAS  /tmp/ccqjxcgd.s 			page 133


1325:src/storage.c **** 
 4850              		.loc 1 1325 13 is_stmt 0 view .LVU1352
 4851 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
1327:src/storage.c ****    
 4852              		.loc 1 1327 5 is_stmt 1 view .LVU1353
1327:src/storage.c ****    
 4853              		.loc 1 1327 22 is_stmt 0 view .LVU1354
 4854 00ca FFF7FEFF 		bl	get_current_prog
 4855              	.LVL445:
1329:src/storage.c ****     free(buffer);
 4856              		.loc 1 1329 9 view .LVU1355
 4857 00ce 1E4D     		ldr	r5, .L384+24
 4858              	.LVL446:
1329:src/storage.c ****     free(buffer);
 4859              		.loc 1 1329 9 view .LVU1356
 4860 00d0 1E4C     		ldr	r4, .L384+28
 4861              	.LVL447:
1327:src/storage.c ****    
 4862              		.loc 1 1327 22 view .LVU1357
 4863 00d2 0146     		mov	r1, r0
1327:src/storage.c ****    
 4864              		.loc 1 1327 5 view .LVU1358
 4865 00d4 3246     		mov	r2, r6
 4866 00d6 4846     		mov	r0, r9
 4867 00d8 FFF7FEFF 		bl	xcopy
 4868              	.LVL448:
1329:src/storage.c ****     free(buffer);
 4869              		.loc 1 1329 5 is_stmt 1 view .LVU1359
1329:src/storage.c ****     free(buffer);
 4870              		.loc 1 1329 9 is_stmt 0 view .LVU1360
 4871 00dc 321D     		adds	r2, r6, #4
 4872 00de 05AB     		add	r3, sp, #20
 4873 00e0 3946     		mov	r1, r7
 4874 00e2 6868     		ldr	r0, [r5, #4]
 4875 00e4 A047     		blx	r4
 4876              	.LVL449:
 4877 00e6 0446     		mov	r4, r0
1330:src/storage.c ****     
 4878              		.loc 1 1330 5 view .LVU1361
 4879 00e8 3846     		mov	r0, r7
 4880              	.LVL450:
1330:src/storage.c ****     
 4881              		.loc 1 1330 5 is_stmt 1 view .LVU1362
 4882 00ea FFF7FEFF 		bl	free
 4883              	.LVL451:
1332:src/storage.c ****       DispMsg = "Write err";
 4884              		.loc 1 1332 5 view .LVU1363
1336:src/storage.c ****     }
 4885              		.loc 1 1336 15 is_stmt 0 view .LVU1364
 4886 00ee 184B     		ldr	r3, .L384+32
 4887 00f0 1848     		ldr	r0, .L384+36
 4888 00f2 1949     		ldr	r1, .L384+40
1339:src/storage.c ****     sys_disk_write_enable(0);
 4889              		.loc 1 1339 5 view .LVU1365
 4890 00f4 194A     		ldr	r2, .L384+44
1336:src/storage.c ****     }
 4891              		.loc 1 1336 15 view .LVU1366
ARM GAS  /tmp/ccqjxcgd.s 			page 134


 4892 00f6 002C     		cmp	r4, #0
 4893 00f8 18BF     		it	ne
 4894 00fa 1846     		movne	r0, r3
 4895 00fc 0860     		str	r0, [r1]
1339:src/storage.c ****     sys_disk_write_enable(0);
 4896              		.loc 1 1339 5 is_stmt 1 view .LVU1367
 4897 00fe 6868     		ldr	r0, [r5, #4]
 4898 0100 9047     		blx	r2
 4899              	.LVL452:
1340:src/storage.c ****     
 4900              		.loc 1 1340 5 view .LVU1368
 4901 0102 0020     		movs	r0, #0
 4902 0104 C047     		blx	r8
 4903              	.LVL453:
 4904 0106 9FE7     		b	.L367
 4905              	.LVL454:
 4906              	.L382:
1288:src/storage.c ****       return;
 4907              		.loc 1 1288 7 view .LVU1369
 4908 0108 0720     		movs	r0, #7
 4909 010a FFF7FEFF 		bl	error_message
 4910              	.LVL455:
1289:src/storage.c ****     }
 4911              		.loc 1 1289 7 view .LVU1370
1343:src/storage.c **** 
 4912              		.loc 1 1343 1 is_stmt 0 view .LVU1371
 4913 010e 07B0     		add	sp, sp, #28
 4914              		.cfi_remember_state
 4915              		.cfi_def_cfa_offset 28
 4916              		@ sp needed
 4917 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4918              	.LVL456:
 4919              	.L378:
 4920              		.cfi_restore_state
 4921              	.LBB117:
 4922              	.LBB116:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4923              		.loc 1 165 21 view .LVU1372
 4924 0114 45F6A524 		movw	r4, #23205
 4925 0118 BBE7     		b	.L373
 4926              	.LVL457:
 4927              	.L383:
 165:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4928              		.loc 1 165 21 view .LVU1373
 4929              	.LBE116:
 4930              	.LBE117:
1317:src/storage.c ****       sys_disk_write_enable(0);
 4931              		.loc 1 1317 7 is_stmt 1 view .LVU1374
 4932 011a 0B4A     		ldr	r2, .L384+24
 4933 011c 0F4B     		ldr	r3, .L384+44
 4934 011e 5068     		ldr	r0, [r2, #4]
 4935              	.LVL458:
1317:src/storage.c ****       sys_disk_write_enable(0);
 4936              		.loc 1 1317 7 is_stmt 0 view .LVU1375
 4937 0120 9847     		blx	r3
 4938              	.LVL459:
1318:src/storage.c ****       DispMsg = "Mem short";
ARM GAS  /tmp/ccqjxcgd.s 			page 135


 4939              		.loc 1 1318 7 is_stmt 1 view .LVU1376
 4940 0122 3846     		mov	r0, r7
 4941 0124 C047     		blx	r8
 4942              	.LVL460:
1319:src/storage.c ****       return;
 4943              		.loc 1 1319 7 view .LVU1377
1319:src/storage.c ****       return;
 4944              		.loc 1 1319 15 is_stmt 0 view .LVU1378
 4945 0126 0C4B     		ldr	r3, .L384+40
 4946 0128 0D4A     		ldr	r2, .L384+48
 4947 012a 1A60     		str	r2, [r3]
1320:src/storage.c ****     }
 4948              		.loc 1 1320 7 is_stmt 1 view .LVU1379
 4949 012c 8CE7     		b	.L367
 4950              	.L385:
 4951 012e 00BF     		.align	2
 4952              	.L384:
 4953 0130 00000000 		.word	main_ram
 4954 0134 51030008 		.word	134218577
 4955 0138 20000000 		.word	.LC19
 4956 013c 00000000 		.word	open_selected_file
 4957 0140 30000000 		.word	.LC2
 4958 0144 14000000 		.word	.LC28
 4959 0148 00200010 		.word	268443648
 4960 014c 41040008 		.word	134218817
 4961 0150 00000000 		.word	.LC26
 4962 0154 0C000000 		.word	.LC27
 4963 0158 00000000 		.word	DispMsg
 4964 015c 39040008 		.word	134218809
 4965 0160 2C000000 		.word	.LC29
 4966 0164 E1030008 		.word	134218721
 4967              		.cfi_endproc
 4968              	.LFE39:
 4970              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4971              		.align	2
 4972              	.LC30:
 4973 0000 4C6F6164 		.ascii	"Load PROG File\000"
 4973      2050524F 
 4973      47204669 
 4973      6C6500
 4974 000f 00       		.align	2
 4975              	.LC31:
 4976 0010 46696C65 		.ascii	"File odd\000"
 4976      206F6464 
 4976      00
 4977 0019 000000   		.align	2
 4978              	.LC32:
 4979 001c 46696C65 		.ascii	"File crc err\000"
 4979      20637263 
 4979      20657272 
 4979      00
 4980              		.section	.text.load_prog_file,"ax",%progbits
 4981              		.align	1
 4982              		.p2align 2,,3
 4983              		.global	load_prog_file
 4984              		.syntax unified
 4985              		.thumb
ARM GAS  /tmp/ccqjxcgd.s 			page 136


 4986              		.thumb_func
 4987              		.fpu fpv4-sp-d16
 4989              	load_prog_file:
 4990              	.LFB40:
1345:src/storage.c ****   int fss, fsize;
 4991              		.loc 1 1345 24 view -0
 4992              		.cfi_startproc
 4993              		@ args = 0, pretend = 0, frame = 8
 4994              		@ frame_needed = 0, uses_anonymous_args = 0
1346:src/storage.c ****   int data = READ;
 4995              		.loc 1 1346 3 view .LVU1381
1347:src/storage.c ****   uint x=0;
 4996              		.loc 1 1347 3 view .LVU1382
1345:src/storage.c ****   int fss, fsize;
 4997              		.loc 1 1345 24 is_stmt 0 view .LVU1383
 4998 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4999              		.cfi_def_cfa_offset 20
 5000              		.cfi_offset 4, -20
 5001              		.cfi_offset 5, -16
 5002              		.cfi_offset 6, -12
 5003              		.cfi_offset 7, -8
 5004              		.cfi_offset 14, -4
 5005 0002 87B0     		sub	sp, sp, #28
 5006              		.cfi_def_cfa_offset 48
1348:src/storage.c ****   FLASH_REGION* fr;
 5007              		.loc 1 1348 8 view .LVU1384
 5008 0004 0023     		movs	r3, #0
1347:src/storage.c ****   uint x=0;
 5009              		.loc 1 1347 7 view .LVU1385
 5010 0006 0221     		movs	r1, #2
1352:src/storage.c ****   if (fss != 1) return;
 5011              		.loc 1 1352 9 view .LVU1386
 5012 0008 04AA     		add	r2, sp, #16
1348:src/storage.c ****   FLASH_REGION* fr;
 5013              		.loc 1 1348 8 view .LVU1387
 5014 000a CDE90413 		strd	r1, r3, [sp, #16]
1349:src/storage.c ****   char* buffer;
 5015              		.loc 1 1349 3 is_stmt 1 view .LVU1388
1350:src/storage.c **** 
 5016              		.loc 1 1350 3 view .LVU1389
1352:src/storage.c ****   if (fss != 1) return;
 5017              		.loc 1 1352 3 view .LVU1390
1352:src/storage.c ****   if (fss != 1) return;
 5018              		.loc 1 1352 9 is_stmt 0 view .LVU1391
 5019 000e CDE90033 		strd	r3, r3, [sp]
 5020 0012 0292     		str	r2, [sp, #8]
 5021 0014 284C     		ldr	r4, .L400
 5022 0016 294B     		ldr	r3, .L400+4
 5023 0018 294A     		ldr	r2, .L400+8
 5024 001a 2A49     		ldr	r1, .L400+12
 5025 001c 2A48     		ldr	r0, .L400+16
 5026 001e A047     		blx	r4
 5027              	.LVL461:
1353:src/storage.c **** 
 5028              		.loc 1 1353 3 is_stmt 1 view .LVU1392
1353:src/storage.c **** 
 5029              		.loc 1 1353 6 is_stmt 0 view .LVU1393
ARM GAS  /tmp/ccqjxcgd.s 			page 137


 5030 0020 0128     		cmp	r0, #1
 5031 0022 0BD1     		bne	.L386
1357:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5032              		.loc 1 1357 3 is_stmt 1 view .LVU1394
1357:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5033              		.loc 1 1357 11 is_stmt 0 view .LVU1395
 5034 0024 294F     		ldr	r7, .L400+20
 5035 0026 7D68     		ldr	r5, [r7, #4]
 5036 0028 EE68     		ldr	r6, [r5, #12]
 5037              	.LVL462:
1358:src/storage.c ****     f_close(FPT);
 5038              		.loc 1 1358 3 is_stmt 1 view .LVU1396
1358:src/storage.c ****     f_close(FPT);
 5039              		.loc 1 1358 6 is_stmt 0 view .LVU1397
 5040 002a B6F5804F 		cmp	r6, #16384
 5041 002e 07DD     		ble	.L388
1359:src/storage.c ****     DispMsg = "File too big";
 5042              		.loc 1 1359 5 is_stmt 1 view .LVU1398
 5043 0030 274B     		ldr	r3, .L400+24
 5044 0032 2846     		mov	r0, r5
 5045              	.LVL463:
1359:src/storage.c ****     DispMsg = "File too big";
 5046              		.loc 1 1359 5 is_stmt 0 view .LVU1399
 5047 0034 9847     		blx	r3
 5048              	.LVL464:
1360:src/storage.c ****     return;
 5049              		.loc 1 1360 5 is_stmt 1 view .LVU1400
1360:src/storage.c ****     return;
 5050              		.loc 1 1360 13 is_stmt 0 view .LVU1401
 5051 0036 274B     		ldr	r3, .L400+28
 5052 0038 274A     		ldr	r2, .L400+32
 5053 003a 1A60     		str	r2, [r3]
1361:src/storage.c ****   }
 5054              		.loc 1 1361 5 is_stmt 1 view .LVU1402
 5055              	.LVL465:
 5056              	.L386:
1389:src/storage.c **** 
 5057              		.loc 1 1389 1 is_stmt 0 view .LVU1403
 5058 003c 07B0     		add	sp, sp, #28
 5059              		.cfi_remember_state
 5060              		.cfi_def_cfa_offset 20
 5061              		@ sp needed
 5062 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 5063              	.LVL466:
 5064              	.L388:
 5065              		.cfi_restore_state
1363:src/storage.c ****   if (!buffer) {// calloc failure!
 5066              		.loc 1 1363 3 is_stmt 1 view .LVU1404
1363:src/storage.c ****   if (!buffer) {// calloc failure!
 5067              		.loc 1 1363 31 is_stmt 0 view .LVU1405
 5068 0040 26F0FF03 		bic	r3, r6, #255
1363:src/storage.c ****   if (!buffer) {// calloc failure!
 5069              		.loc 1 1363 12 view .LVU1406
 5070 0044 0146     		mov	r1, r0
 5071 0046 03F58070 		add	r0, r3, #256
 5072              	.LVL467:
1363:src/storage.c ****   if (!buffer) {// calloc failure!
ARM GAS  /tmp/ccqjxcgd.s 			page 138


 5073              		.loc 1 1363 12 view .LVU1407
 5074 004a FFF7FEFF 		bl	calloc
 5075              	.LVL468:
1364:src/storage.c ****     f_close(FPT);
 5076              		.loc 1 1364 3 is_stmt 1 view .LVU1408
1364:src/storage.c ****     f_close(FPT);
 5077              		.loc 1 1364 6 is_stmt 0 view .LVU1409
 5078 004e 0446     		mov	r4, r0
 5079 0050 58B3     		cbz	r0, .L397
1370:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5080              		.loc 1 1370 3 is_stmt 1 view .LVU1410
 5081 0052 3246     		mov	r2, r6
 5082 0054 2846     		mov	r0, r5
 5083              	.LVL469:
1370:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5084              		.loc 1 1370 3 is_stmt 0 view .LVU1411
 5085 0056 05AB     		add	r3, sp, #20
 5086 0058 204D     		ldr	r5, .L400+36
 5087 005a 2146     		mov	r1, r4
 5088 005c A847     		blx	r5
 5089              	.LVL470:
1371:src/storage.c ****     free(buffer);
 5090              		.loc 1 1371 3 is_stmt 1 view .LVU1412
1371:src/storage.c ****     free(buffer);
 5091              		.loc 1 1371 8 is_stmt 0 view .LVU1413
 5092 005e 7868     		ldr	r0, [r7, #4]
1371:src/storage.c ****     free(buffer);
 5093              		.loc 1 1371 6 view .LVU1414
 5094 0060 8269     		ldr	r2, [r0, #24]
 5095 0062 C368     		ldr	r3, [r0, #12]
 5096 0064 9A42     		cmp	r2, r3
 5097 0066 12D1     		bne	.L398
1377:src/storage.c **** 
 5098              		.loc 1 1377 3 is_stmt 1 view .LVU1415
 5099 0068 194B     		ldr	r3, .L400+24
 5100 006a 9847     		blx	r3
 5101              	.LVL471:
1379:src/storage.c ****     
 5102              		.loc 1 1379 3 view .LVU1416
1381:src/storage.c ****     DispMsg = "File crc err";
 5103              		.loc 1 1381 3 view .LVU1417
1381:src/storage.c ****     DispMsg = "File crc err";
 5104              		.loc 1 1381 7 is_stmt 0 view .LVU1418
 5105 006c 2146     		mov	r1, r4
 5106 006e 2046     		mov	r0, r4
 5107 0070 FFF7FEFF 		bl	checksum_region
 5108              	.LVL472:
1381:src/storage.c ****     DispMsg = "File crc err";
 5109              		.loc 1 1381 6 view .LVU1419
 5110 0074 A8B9     		cbnz	r0, .L399
1387:src/storage.c ****   free(buffer);
 5111              		.loc 1 1387 3 is_stmt 1 view .LVU1420
 5112              	.LVL473:
 5113              	.LBB118:
 5114              	.LBI118:
1391:src/storage.c **** { // buffer contains all of program file
 5115              		.loc 1 1391 6 view .LVU1421
ARM GAS  /tmp/ccqjxcgd.s 			page 139


 5116              	.LBB119:
1393:src/storage.c ****   int space_needed, count, free;
 5117              		.loc 1 1393 3 view .LVU1422
1394:src/storage.c **** 
 5118              		.loc 1 1394 3 view .LVU1423
1396:src/storage.c ****     /*
 5119              		.loc 1 1396 3 view .LVU1424
1396:src/storage.c ****     /*
 5120              		.loc 1 1396 8 is_stmt 0 view .LVU1425
 5121 0076 FFF7FEFF 		bl	not_running
 5122              	.LVL474:
1396:src/storage.c ****     /*
 5123              		.loc 1 1396 6 view .LVU1426
 5124 007a 10B1     		cbz	r0, .L392
 5125 007c 2046     		mov	r0, r4
 5126 007e FFF7FEFF 		bl	store_program_from_buffer.part.0
 5127              	.LVL475:
 5128              	.L392:
1396:src/storage.c ****     /*
 5129              		.loc 1 1396 6 view .LVU1427
 5130              	.LBE119:
 5131              	.LBE118:
1388:src/storage.c **** }
 5132              		.loc 1 1388 3 is_stmt 1 view .LVU1428
 5133 0082 2046     		mov	r0, r4
1389:src/storage.c **** 
 5134              		.loc 1 1389 1 is_stmt 0 view .LVU1429
 5135 0084 07B0     		add	sp, sp, #28
 5136              		.cfi_remember_state
 5137              		.cfi_def_cfa_offset 20
 5138              		@ sp needed
 5139 0086 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5140              		.cfi_restore 14
 5141              		.cfi_restore 7
 5142              		.cfi_restore 6
 5143              		.cfi_restore 5
 5144              		.cfi_restore 4
 5145              		.cfi_def_cfa_offset 0
 5146              	.LVL476:
1388:src/storage.c **** }
 5147              		.loc 1 1388 3 view .LVU1430
 5148 008a FFF7FEBF 		b	free
 5149              	.LVL477:
 5150              	.L398:
 5151              		.cfi_restore_state
1372:src/storage.c ****     f_close(FPT);
 5152              		.loc 1 1372 5 is_stmt 1 view .LVU1431
 5153 008e 2046     		mov	r0, r4
 5154 0090 FFF7FEFF 		bl	free
 5155              	.LVL478:
1373:src/storage.c ****     DispMsg = "File odd";
 5156              		.loc 1 1373 5 view .LVU1432
 5157 0094 0E4B     		ldr	r3, .L400+24
 5158 0096 7868     		ldr	r0, [r7, #4]
 5159 0098 9847     		blx	r3
 5160              	.LVL479:
1374:src/storage.c ****     return;
ARM GAS  /tmp/ccqjxcgd.s 			page 140


 5161              		.loc 1 1374 5 view .LVU1433
1374:src/storage.c ****     return;
 5162              		.loc 1 1374 13 is_stmt 0 view .LVU1434
 5163 009a 0E4B     		ldr	r3, .L400+28
 5164 009c 104A     		ldr	r2, .L400+40
 5165 009e 1A60     		str	r2, [r3]
1375:src/storage.c ****   }
 5166              		.loc 1 1375 5 is_stmt 1 view .LVU1435
 5167 00a0 CCE7     		b	.L386
 5168              	.LVL480:
 5169              	.L399:
1382:src/storage.c ****         free(buffer);
 5170              		.loc 1 1382 5 view .LVU1436
1382:src/storage.c ****         free(buffer);
 5171              		.loc 1 1382 13 is_stmt 0 view .LVU1437
 5172 00a2 0C4B     		ldr	r3, .L400+28
 5173 00a4 0F4A     		ldr	r2, .L400+44
 5174 00a6 1A60     		str	r2, [r3]
1383:src/storage.c ****     return;
 5175              		.loc 1 1383 9 is_stmt 1 view .LVU1438
 5176 00a8 EBE7     		b	.L392
 5177              	.LVL481:
 5178              	.L397:
1365:src/storage.c ****     DispMsg = "Mem short";
 5179              		.loc 1 1365 5 view .LVU1439
 5180 00aa 094B     		ldr	r3, .L400+24
 5181 00ac 2846     		mov	r0, r5
 5182              	.LVL482:
1365:src/storage.c ****     DispMsg = "Mem short";
 5183              		.loc 1 1365 5 is_stmt 0 view .LVU1440
 5184 00ae 9847     		blx	r3
 5185              	.LVL483:
1366:src/storage.c ****     return;
 5186              		.loc 1 1366 5 is_stmt 1 view .LVU1441
1366:src/storage.c ****     return;
 5187              		.loc 1 1366 13 is_stmt 0 view .LVU1442
 5188 00b0 084B     		ldr	r3, .L400+28
 5189 00b2 0D4A     		ldr	r2, .L400+48
 5190 00b4 1A60     		str	r2, [r3]
1367:src/storage.c ****   }
 5191              		.loc 1 1367 5 is_stmt 1 view .LVU1443
 5192 00b6 C1E7     		b	.L386
 5193              	.L401:
 5194              		.align	2
 5195              	.L400:
 5196 00b8 51030008 		.word	134218577
 5197 00bc 00000000 		.word	open_selected_file
 5198 00c0 20000000 		.word	.LC19
 5199 00c4 30000000 		.word	.LC2
 5200 00c8 00000000 		.word	.LC30
 5201 00cc 00200010 		.word	268443648
 5202 00d0 39040008 		.word	134218809
 5203 00d4 00000000 		.word	DispMsg
 5204 00d8 14000000 		.word	.LC16
 5205 00dc 3D040008 		.word	134218813
 5206 00e0 10000000 		.word	.LC31
 5207 00e4 1C000000 		.word	.LC32
ARM GAS  /tmp/ccqjxcgd.s 			page 141


 5208 00e8 2C000000 		.word	.LC29
 5209              		.cfi_endproc
 5210              	.LFE40:
 5212              		.section	.text.store_program_from_buffer,"ax",%progbits
 5213              		.align	1
 5214              		.p2align 2,,3
 5215              		.global	store_program_from_buffer
 5216              		.syntax unified
 5217              		.thumb
 5218              		.thumb_func
 5219              		.fpu fpv4-sp-d16
 5221              	store_program_from_buffer:
 5222              	.LVL484:
 5223              	.LFB41:
1392:src/storage.c ****   unsigned int pc;
 5224              		.loc 1 1392 1 view -0
 5225              		.cfi_startproc
 5226              		@ args = 0, pretend = 0, frame = 0
 5227              		@ frame_needed = 0, uses_anonymous_args = 0
1393:src/storage.c ****   int space_needed, count, free;
 5228              		.loc 1 1393 3 view .LVU1445
1394:src/storage.c **** 
 5229              		.loc 1 1394 3 view .LVU1446
1396:src/storage.c ****     /*
 5230              		.loc 1 1396 3 view .LVU1447
1392:src/storage.c ****   unsigned int pc;
 5231              		.loc 1 1392 1 is_stmt 0 view .LVU1448
 5232 0000 10B5     		push	{r4, lr}
 5233              		.cfi_def_cfa_offset 8
 5234              		.cfi_offset 4, -8
 5235              		.cfi_offset 14, -4
1392:src/storage.c ****   unsigned int pc;
 5236              		.loc 1 1392 1 view .LVU1449
 5237 0002 0446     		mov	r4, r0
1396:src/storage.c ****     /*
 5238              		.loc 1 1396 8 view .LVU1450
 5239 0004 FFF7FEFF 		bl	not_running
 5240              	.LVL485:
1396:src/storage.c ****     /*
 5241              		.loc 1 1396 6 view .LVU1451
 5242 0008 20B1     		cbz	r0, .L402
 5243 000a 2046     		mov	r0, r4
 5244              		.loc 1 1438 1 view .LVU1452
 5245 000c BDE81040 		pop	{r4, lr}
 5246              		.cfi_remember_state
 5247              		.cfi_restore 14
 5248              		.cfi_restore 4
 5249              		.cfi_def_cfa_offset 0
 5250              	.LVL486:
 5251              		.loc 1 1438 1 view .LVU1453
 5252 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5253              	.LVL487:
 5254              	.L402:
 5255              		.cfi_restore_state
 5256              		.loc 1 1438 1 view .LVU1454
 5257 0014 10BD     		pop	{r4, pc}
 5258              		.loc 1 1438 1 view .LVU1455
ARM GAS  /tmp/ccqjxcgd.s 			page 142


 5259              		.cfi_endproc
 5260              	.LFE41:
 5262              		.comm	XromA2D,64,4
 5263              		.comm	XromLocal,464,4
 5264              		.comm	XromParams,16,4
 5265              		.comm	StateWhileOn,52,4
 5266              		.comm	library_ram,4,4
 5267              		.comm	backup_ram,4,4
 5268              		.comm	main_ram,4,4
 5269 0016 00BF     		.text
 5270              	.Letext0:
 5271              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5272              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5273              		.file 4 "/usr/include/newlib/sys/_types.h"
 5274              		.file 5 "/usr/include/newlib/sys/reent.h"
 5275              		.file 6 "/usr/include/newlib/sys/lock.h"
 5276              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5277              		.file 8 "/usr/include/newlib/sys/types.h"
 5278              		.file 9 "/usr/include/newlib/stdlib.h"
 5279              		.file 10 "dmcp/ff_ifc.h"
 5280              		.file 11 "dmcp/dmcp.h"
 5281              		.file 12 "src/decNumber/decContext.h"
 5282              		.file 13 "src/decNumber/decNumber.h"
 5283              		.file 14 "src/decNumber/decimal64.h"
 5284              		.file 15 "src/decNumber/decimal128.h"
 5285              		.file 16 "src/xeq.h"
 5286              		.file 17 "src/data.h"
 5287              		.file 18 "src/storage.h"
 5288              		.file 19 "src/display.h"
 5289              		.file 20 "src/stats.h"
 5290              		.file 21 "src/alpha.h"
 5291              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccqjxcgd.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/ccqjxcgd.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/ccqjxcgd.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/ccqjxcgd.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/ccqjxcgd.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/ccqjxcgd.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/ccqjxcgd.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/ccqjxcgd.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/ccqjxcgd.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:305    .text.program_flash:0000000000000000 $t
     /tmp/ccqjxcgd.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/ccqjxcgd.s:568    .text.program_flash:00000000000000d4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/ccqjxcgd.s:584    .text.flash_append:0000000000000000 $t
     /tmp/ccqjxcgd.s:591    .text.flash_append:0000000000000000 flash_append
     /tmp/ccqjxcgd.s:762    .text.flash_append:000000000000009c $d
     /tmp/ccqjxcgd.s:768    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:775    .text.open_selected_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:783    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/ccqjxcgd.s:899    .text.open_selected_file:0000000000000050 $d
     /tmp/ccqjxcgd.s:910    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:914    .text.init_mem:0000000000000000 $t
     /tmp/ccqjxcgd.s:922    .text.init_mem:0000000000000000 init_mem
     /tmp/ccqjxcgd.s:986    .text.init_mem:0000000000000030 $d
     /tmp/ccqjxcgd.s:994    .text.crc16:0000000000000000 $t
     /tmp/ccqjxcgd.s:1002   .text.crc16:0000000000000000 crc16
     /tmp/ccqjxcgd.s:1081   .text.checksum_program:0000000000000000 $t
     /tmp/ccqjxcgd.s:1089   .text.checksum_program:0000000000000000 checksum_program
     /tmp/ccqjxcgd.s:1201   .text.checksum_program:0000000000000058 $d
     /tmp/ccqjxcgd.s:1206   .text.checksum_ram:0000000000000000 $t
     /tmp/ccqjxcgd.s:1214   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/ccqjxcgd.s:1233   .text.checksum_ram:0000000000000014 $d
     /tmp/ccqjxcgd.s:1238   .text.checksum_backup:0000000000000000 $t
     /tmp/ccqjxcgd.s:1246   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/ccqjxcgd.s:1378   .text.checksum_backup:0000000000000054 $d
     /tmp/ccqjxcgd.s:1383   .text.clpall:0000000000000000 $t
     /tmp/ccqjxcgd.s:1391   .text.clpall:0000000000000000 clpall
     /tmp/ccqjxcgd.s:1430   .text.clpall:0000000000000018 $d
     /tmp/ccqjxcgd.s:1435   .text.clrall:0000000000000000 $t
     /tmp/ccqjxcgd.s:1443   .text.clrall:0000000000000000 clrall
     /tmp/ccqjxcgd.s:1529   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/ccqjxcgd.s:1536   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:1540   .text.reset:0000000000000000 $t
     /tmp/ccqjxcgd.s:1548   .text.reset:0000000000000000 reset
     /tmp/ccqjxcgd.s:1594   .text.reset:0000000000000030 $d
     /tmp/ccqjxcgd.s:1601   .text.stoprog:0000000000000000 $t
     /tmp/ccqjxcgd.s:1609   .text.stoprog:0000000000000000 stoprog
     /tmp/ccqjxcgd.s:1817   .text.stoprog:00000000000000e4 $d
     /tmp/ccqjxcgd.s:1823   .text.delprog:0000000000000000 $t
     /tmp/ccqjxcgd.s:1831   .text.delprog:0000000000000000 delprog
     /tmp/ccqjxcgd.s:1946   .text.delprog:0000000000000068 $d
     /tmp/ccqjxcgd.s:1951   .text.append_program:0000000000000000 $t
     /tmp/ccqjxcgd.s:1959   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/ccqjxcgd.s 			page 144


     /tmp/ccqjxcgd.s:2184   .text.append_program:00000000000000c4 $d
     /tmp/ccqjxcgd.s:2192   .text.check_create_wp34sdir:0000000000000000 $t
     /tmp/ccqjxcgd.s:2200   .text.check_create_wp34sdir:0000000000000000 check_create_wp34sdir
     /tmp/ccqjxcgd.s:2241   .text.check_create_wp34sdir:0000000000000018 $d
     /tmp/ccqjxcgd.s:2248   .text.init_library:0000000000000000 $t
     /tmp/ccqjxcgd.s:2256   .text.init_library:0000000000000000 init_library
     /tmp/ccqjxcgd.s:2318   .text.init_library:0000000000000034 $d
     /tmp/ccqjxcgd.s:2323   .text.flash_remove:0000000000000000 $t
     /tmp/ccqjxcgd.s:2331   .text.flash_remove:0000000000000000 flash_remove
     /tmp/ccqjxcgd.s:2378   .text.flash_remove:0000000000000024 $d
     /tmp/ccqjxcgd.s:2383   .text.clrprog:0000000000000000 $t
     /tmp/ccqjxcgd.s:2391   .text.clrprog:0000000000000000 clrprog
     /tmp/ccqjxcgd.s:2522   .text.clrprog:0000000000000090 $d
     /tmp/ccqjxcgd.s:2527   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:2531   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/ccqjxcgd.s:2538   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/ccqjxcgd.s:2737   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/ccqjxcgd.s:2747   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:2754   .text.flash_backup:0000000000000000 $t
     /tmp/ccqjxcgd.s:2762   .text.flash_backup:0000000000000000 flash_backup
     /tmp/ccqjxcgd.s:2843   .text.flash_backup:0000000000000048 $d
     /tmp/ccqjxcgd.s:2852   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:2856   .text.flash_restore:0000000000000000 $t
     /tmp/ccqjxcgd.s:2864   .text.flash_restore:0000000000000000 flash_restore
     /tmp/ccqjxcgd.s:2923   .text.flash_restore:0000000000000034 $d
     /tmp/ccqjxcgd.s:2931   .text.load_program:0000000000000000 $t
     /tmp/ccqjxcgd.s:2939   .text.load_program:0000000000000000 load_program
     /tmp/ccqjxcgd.s:3051   .text.load_program:000000000000003c $d
     /tmp/ccqjxcgd.s:3057   .text.load_registers:0000000000000000 $t
     /tmp/ccqjxcgd.s:3065   .text.load_registers:0000000000000000 load_registers
     /tmp/ccqjxcgd.s:3159   .text.load_registers:000000000000004c $d
     /tmp/ccqjxcgd.s:3165   .text.load_sigma:0000000000000000 $t
     /tmp/ccqjxcgd.s:3173   .text.load_sigma:0000000000000000 load_sigma
     /tmp/ccqjxcgd.s:3245   .text.load_sigma:0000000000000040 $d
     /tmp/ccqjxcgd.s:3250   .text.load_state:0000000000000000 $t
     /tmp/ccqjxcgd.s:3258   .text.load_state:0000000000000000 load_state
     /tmp/ccqjxcgd.s:3328   .text.load_state:000000000000003c $d
     /tmp/ccqjxcgd.s:3334   .text.store_program:0000000000000000 $t
     /tmp/ccqjxcgd.s:3342   .text.store_program:0000000000000000 store_program
     /tmp/ccqjxcgd.s:3578   .text.store_program:00000000000000d4 $d
     /tmp/ccqjxcgd.s:3585   .text.recall_program:0000000000000000 $t
     /tmp/ccqjxcgd.s:3593   .text.recall_program:0000000000000000 recall_program
     /tmp/ccqjxcgd.s:3654   .text.recall_program:000000000000003c $d
     /tmp/ccqjxcgd.s:3659   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:3672   .text.save_lib_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:3680   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/ccqjxcgd.s:3834   .text.save_lib_file:0000000000000084 $d
     /tmp/ccqjxcgd.s:3853   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:3860   .text.load_lib_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:3868   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/ccqjxcgd.s:4003   .text.load_lib_file:0000000000000078 $d
     /tmp/ccqjxcgd.s:4021   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:4037   .text.save_ram_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:4045   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/ccqjxcgd.s:4222   .text.save_ram_file:000000000000009c $d
     /tmp/ccqjxcgd.s:4241   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:4248   .text.load_ram_file:0000000000000000 $t
ARM GAS  /tmp/ccqjxcgd.s 			page 145


     /tmp/ccqjxcgd.s:4256   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/ccqjxcgd.s:4432   .text.load_ram_file:0000000000000094 $d
     /tmp/ccqjxcgd.s:4450   .rodata.load_backup_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:4457   .text.load_backup_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:4465   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/ccqjxcgd.s:4600   .text.load_backup_file:0000000000000078 $d
     /tmp/ccqjxcgd.s:4618   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:4631   .text.save_prog_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:4639   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/ccqjxcgd.s:4953   .text.save_prog_file:0000000000000130 $d
     /tmp/ccqjxcgd.s:4971   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/ccqjxcgd.s:4981   .text.load_prog_file:0000000000000000 $t
     /tmp/ccqjxcgd.s:4989   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/ccqjxcgd.s:5196   .text.load_prog_file:00000000000000b8 $d
     /tmp/ccqjxcgd.s:5213   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/ccqjxcgd.s:5221   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
error_message
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free
ARM GAS  /tmp/ccqjxcgd.s 			page 146



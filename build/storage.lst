ARM GAS  /tmp/cc09CpAR.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** 
  24:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  25:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  26:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  27:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  28:src/storage.c **** 
  29:src/storage.c **** #ifndef NULL
ARM GAS  /tmp/cc09CpAR.s 			page 2


  30:src/storage.c **** #define NULL 0
  31:src/storage.c **** #endif
  32:src/storage.c **** 
  33:src/storage.c **** #else // not realbuild
  34:src/storage.c **** 
  35:src/storage.c **** // Emulator definitions
  36:src/storage.c **** #include <stdio.h>
  37:src/storage.c **** #include <stdlib.h>
  38:src/storage.c **** #include <stddef.h>
  39:src/storage.c **** #include <string.h>
  40:src/storage.c **** #include <stdarg.h>
  41:src/storage.c **** 
  42:src/storage.c **** #ifdef DM42
  43:src/storage.c **** #include "dmcp.h"
  44:src/storage.c **** #endif
  45:src/storage.c **** 
  46:src/storage.c **** #ifndef DM42
  47:src/storage.c **** 
  48:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  49:src/storage.c **** #include <errno.h>
  50:src/storage.c **** #include <stdlib.h>
  51:src/storage.c **** #include <unistd.h>
  52:src/storage.c **** #endif
  53:src/storage.c **** 
  54:src/storage.c **** #endif
  55:src/storage.c **** 
  56:src/storage.c **** #define PERSISTENT_RAM
  57:src/storage.c **** #define SLCDCMEM
  58:src/storage.c **** #define VOLATILE_RAM
  59:src/storage.c **** #define BACKUP_FLASH
  60:src/storage.c **** 
  61:src/storage.c **** #ifdef DM42
  62:src/storage.c **** 
  63:src/storage.c **** #define STATE_FILE "wp34s/wp34c.dat"
  64:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup.dat"
  65:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  66:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  67:src/storage.c **** 
  68:src/storage.c **** #else
  69:src/storage.c **** 
  70:src/storage.c **** #define STATE_FILE "wp34c.dat"
  71:src/storage.c **** #define BACKUP_FILE "wp34c-backup.dat"
  72:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
  73:src/storage.c **** 
  74:src/storage.c **** #endif
  75:src/storage.c **** #endif
  76:src/storage.c **** 
  77:src/storage.c **** #define DM42SAFE
  78:src/storage.c **** #include "xeq.h"
  79:src/storage.c **** #include "storage.h"
  80:src/storage.c **** #include "display.h"
  81:src/storage.c **** #include "stats.h"
  82:src/storage.c **** #include "alpha.h"
  83:src/storage.c **** #undef DM42SAFE
  84:src/storage.c **** 
  85:src/storage.c **** #ifdef DM42
  86:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
ARM GAS  /tmp/cc09CpAR.s 			page 3


  87:src/storage.c **** #else
  88:src/storage.c **** #define PAGE_SIZE	 256
  89:src/storage.c **** #endif
  90:src/storage.c **** 
  91:src/storage.c **** /*
  92:src/storage.c ****  *  Setup the persistent RAM
  93:src/storage.c ****  */
  94:src/storage.c **** #ifdef DM42
  95:src/storage.c **** 
  96:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
  97:src/storage.c **** FLASH_REGION *library_ram;
  98:src/storage.c **** 
  99:src/storage.c **** void init_mem () { // called at start of program_main in console.c
 100:src/storage.c ****   char *v;
 101:src/storage.c **** 
 102:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
 103:src/storage.c ****   if (v == NULL) {
 104:src/storage.c ****     perror("calloc failed");
 105:src/storage.c ****     return;
 106:src/storage.c ****   }
 107:src/storage.c ****   main_ram = (TPersistentRam *) v;
 108:src/storage.c ****   v += RAM_SIZE;
 109:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 110:src/storage.c ****   v += RAM_SIZE;
 111:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 112:src/storage.c **** }
 113:src/storage.c **** 
 114:src/storage.c **** #else
 115:src/storage.c **** 
 116:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
 117:src/storage.c **** 
 118:src/storage.c **** #endif
 119:src/storage.c **** 
 120:src/storage.c **** /*
 121:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 122:src/storage.c ****  */
 123:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 124:src/storage.c **** 
 125:src/storage.c **** /*
 126:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 127:src/storage.c ****  *  It replaces the local registers and flags if active.
 128:src/storage.c ****  */
 129:src/storage.c **** TXromParams XromParams;
 130:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 131:src/storage.c **** 
 132:src/storage.c **** /* Private space for four registers temporarily
 133:src/storage.c ****  */
 134:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 135:src/storage.c **** 
 136:src/storage.c **** /*
 137:src/storage.c ****  *  The backup flash area:
 138:src/storage.c ****  *  2 KB for storage of programs and registers
 139:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 140:src/storage.c ****  */
 141:src/storage.c **** #if !defined(REALBUILD)
 142:src/storage.c **** /*
 143:src/storage.c ****  *  We need to define the Library space here.
ARM GAS  /tmp/cc09CpAR.s 			page 4


 144:src/storage.c ****  *  On the device the linker takes care of this.
 145:src/storage.c ****  */
 146:src/storage.c **** #ifdef DM42 // has already been done by init_mem above
 147:src/storage.c **** #else
 148:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 149:src/storage.c **** FLASH_REGION UserFlash;
 150:src/storage.c **** #endif
 151:src/storage.c **** #endif
 152:src/storage.c **** 
 153:src/storage.c **** /*
 154:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 155:src/storage.c ****  */
 156:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 157:src/storage.c **** {
 158:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 159:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 160:src/storage.c **** 	unsigned int i;
 161:src/storage.c **** 
 162:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 163:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 164:src/storage.c **** 		crc ^= *d++;
 165:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 166:src/storage.c **** 		crc ^= crc << 12;
 167:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 168:src/storage.c **** 	}
 169:src/storage.c **** 	return crc;
 170:src/storage.c **** }
 171:src/storage.c **** 
 172:src/storage.c **** 
 173:src/storage.c **** /*
 174:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 175:src/storage.c ****  *  Returns non zero value if failure
 176:src/storage.c ****  */
 177:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 178:src/storage.c **** {
  30              		.loc 1 178 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 179:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 179 2 view .LVU1
 180:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 180 2 view .LVU2
  37              	.LBB38:
  38              	.LBI38:
 156:src/storage.c **** {
  39              		.loc 1 156 20 view .LVU3
  40              	.LBB39:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 158 2 view .LVU4
 159:src/storage.c **** 	unsigned int i;
  42              		.loc 1 159 2 view .LVU5
 160:src/storage.c **** 
  43              		.loc 1 160 2 view .LVU6
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 162 2 view .LVU7
ARM GAS  /tmp/cc09CpAR.s 			page 5


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 162 15 view .LVU8
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 162 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE39:
  49              	.LBE38:
 178:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 178 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB42:
  57              	.LBB40:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 158 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 163:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 163 3 is_stmt 1 view .LVU12
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 164 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 164 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 164 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 164 3 is_stmt 1 view .LVU16
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 164 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 165:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 165 3 is_stmt 1 view .LVU18
 165:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 165 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 166 3 is_stmt 1 view .LVU20
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 166 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 167:src/storage.c **** 	}
  85              		.loc 1 167 3 is_stmt 1 view .LVU22
 167:src/storage.c **** 	}
ARM GAS  /tmp/cc09CpAR.s 			page 6


  86              		.loc 1 167 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
  89              		.loc 1 167 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 162 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 167:src/storage.c **** 	}
  93              		.loc 1 167 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 162 27 is_stmt 1 view .LVU27
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 162 15 view .LVU28
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 162 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 169:src/storage.c **** }
 100              		.loc 1 169 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 169:src/storage.c **** }
 102              		.loc 1 169 2 is_stmt 0 view .LVU31
 103              	.LBE40:
 104              	.LBE42:
 181:src/storage.c **** 	
 182:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 182 2 is_stmt 1 view .LVU32
 183:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 183 3 view .LVU33
 184:src/storage.c **** 	}
 185:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 185 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 183:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 183 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 185 2 is_stmt 1 view .LVU36
 112              		.loc 1 185 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 185 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 186:src/storage.c **** }
 119              		.loc 1 186 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
ARM GAS  /tmp/cc09CpAR.s 			page 7


 185:src/storage.c **** }
 128              		.loc 1 185 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 186 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB43:
 139              	.LBB41:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 158 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 169:src/storage.c **** }
 143              		.loc 1 169 2 is_stmt 1 view .LVU43
 169:src/storage.c **** }
 144              		.loc 1 169 2 is_stmt 0 view .LVU44
 145              	.LBE41:
 146              	.LBE43:
 182:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 182 2 is_stmt 1 view .LVU45
 183:src/storage.c **** 	}
 148              		.loc 1 183 3 view .LVU46
 185:src/storage.c **** }
 149              		.loc 1 185 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 183:src/storage.c **** 	}
 151              		.loc 1 183 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 185:src/storage.c **** }
 153              		.loc 1 185 2 is_stmt 1 view .LVU49
 185:src/storage.c **** }
 154              		.loc 1 185 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 185:src/storage.c **** }
 158              		.loc 1 185 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 185:src/storage.c **** }
 165              		.loc 1 185 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 186 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
ARM GAS  /tmp/cc09CpAR.s 			page 8


 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 187:src/storage.c **** 
 188:src/storage.c **** 
 189:src/storage.c **** /*
 190:src/storage.c ****  *  Checksum the current program.
 191:src/storage.c ****  */
 192:src/storage.c **** short unsigned int checksum_program( void )
 193:src/storage.c **** {
 194:src/storage.c **** 	update_program_bounds( 1 );
 195:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 196:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 197:src/storage.c **** }
 198:src/storage.c **** 
 199:src/storage.c **** 
 200:src/storage.c **** /*
 201:src/storage.c ****  *  Checksum the persistent RAM area
 202:src/storage.c ****  *  Returns non zero value if failure
 203:src/storage.c ****  */
 204:src/storage.c **** int checksum_ram( void )
 205:src/storage.c **** {
 206:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 207:src/storage.c **** 			      Crc, &Crc );
 208:src/storage.c **** }
 209:src/storage.c **** 
 210:src/storage.c **** 
 211:src/storage.c **** /*
 212:src/storage.c ****  *  Checksum the backup flash region
 213:src/storage.c ****  *  Returns non zero value if failure
 214:src/storage.c ****  */
 215:src/storage.c **** int checksum_backup( void )
 216:src/storage.c **** {
 217:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 218:src/storage.c **** 		              BackupFlash._crc, NULL );
 219:src/storage.c **** }
 220:src/storage.c **** 
 221:src/storage.c **** 
 222:src/storage.c **** /*
 223:src/storage.c ****  *  Checksum a flash region
 224:src/storage.c ****  *  Returns non zero value if failure
 225:src/storage.c ****  */
 226:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 227:src/storage.c **** {
 184              		.loc 1 227 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 228:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 228 2 view .LVU55
 189              		.loc 1 228 25 is_stmt 0 view .LVU56
ARM GAS  /tmp/cc09CpAR.s 			page 9


 190 0000 4B88     		ldrh	r3, [r1, #2]
 229:src/storage.c **** 	
 230:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 230 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 230 2 is_stmt 1 view .LVU58
 195              		.loc 1 230 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 231:src/storage.c **** }
 200              		.loc 1 231 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 227:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 227 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 230:src/storage.c **** }
 210              		.loc 1 230 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 230:src/storage.c **** }
 213              		.loc 1 230 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 230:src/storage.c **** }
 216              		.loc 1 230 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 230:src/storage.c **** }
 219              		.loc 1 230 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 230:src/storage.c **** }
 222              		.loc 1 230 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 231 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
 232              		.align	1
 233              		.p2align 2,,3
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
ARM GAS  /tmp/cc09CpAR.s 			page 10


 240              	.LVL23:
 241              	.LFB12:
 232:src/storage.c **** 
 233:src/storage.c **** 
 234:src/storage.c **** /*
 235:src/storage.c ****  *  Helper to store final END in empty program space
 236:src/storage.c ****  */
 237:src/storage.c **** static void stoend( void )
 238:src/storage.c **** {
 239:src/storage.c **** 	ProgSize = 1;
 240:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 241:src/storage.c **** }
 242:src/storage.c **** 
 243:src/storage.c **** 
 244:src/storage.c **** /*
 245:src/storage.c ****  *  Clear the program space
 246:src/storage.c ****  */
 247:src/storage.c **** void clpall( void )
 248:src/storage.c **** {
 249:src/storage.c **** 	clrretstk_pc();
 250:src/storage.c **** 	stoend();
 251:src/storage.c **** }
 252:src/storage.c **** 
 253:src/storage.c **** 
 254:src/storage.c **** /*
 255:src/storage.c ****  *  Sanity checks for program (step) deletion
 256:src/storage.c ****  */
 257:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 258:src/storage.c **** {
 242              		.loc 1 258 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 259:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 259 2 view .LVU69
 247              		.loc 1 259 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 258:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 258 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 259 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 259 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 259 20 discriminator 1 view .LVU74
 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
 263              	.LVL24:
 264              	.L29:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 261:src/storage.c **** 	}
 262:src/storage.c **** 	else {
ARM GAS  /tmp/cc09CpAR.s 			page 11


 263:src/storage.c **** 		return 0;
 265              		.loc 1 263 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 264:src/storage.c **** 	}
 265:src/storage.c **** 	return 1;
 266:src/storage.c **** }
 267              		.loc 1 266 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 259 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 259 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 260 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 265:src/storage.c **** }
 282              		.loc 1 265 2 view .LVU80
 265:src/storage.c **** }
 283              		.loc 1 265 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 266 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34c-backup.dat\000"
 297      732F7770 
 297      3334632D 
 297      6261636B 
 297      75702E64 
 298 0017 00       		.align	2
 299              	.LC1:
 300 0018 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
 300      6C69622E 
 300      64617400 
 301              		.align	2
 302              	.LC2:
 303 002c 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
ARM GAS  /tmp/cc09CpAR.s 			page 12


 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 267:src/storage.c **** 
 268:src/storage.c **** 
 269:src/storage.c **** /*
 270:src/storage.c ****  *  Clear just the current program
 271:src/storage.c ****  */
 272:src/storage.c **** void clrprog( void )
 273:src/storage.c **** {
 274:src/storage.c **** 	update_program_bounds( 1 );
 275:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 276:src/storage.c **** 		/*
 277:src/storage.c **** 		 *  Porgram is in flash
 278:src/storage.c **** 		 */
 279:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 280:src/storage.c **** 	}
 281:src/storage.c **** 	else {
 282:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 283:src/storage.c **** 			return;
 284:src/storage.c **** 		}
 285:src/storage.c **** 		clrretstk();
 286:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 287:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 288:src/storage.c **** 		if ( ProgSize == 0 ) {
 289:src/storage.c **** 			stoend();
 290:src/storage.c **** 		}
 291:src/storage.c **** 	}
 292:src/storage.c **** 	set_pc( ProgBegin - 1 );
 293:src/storage.c **** 	update_program_bounds( 1 );
 294:src/storage.c **** }
 295:src/storage.c ****  
 296:src/storage.c **** 
 297:src/storage.c **** /*
 298:src/storage.c ****  *  Clear all - programs and registers
 299:src/storage.c ****  */
 300:src/storage.c **** void clrall(void) 
 301:src/storage.c **** {
 302:src/storage.c **** 	NumRegs = TOPREALREG;
 303:src/storage.c **** 	xeq_init_contexts();
 304:src/storage.c **** 	clrreg( OP_CLREG );
 305:src/storage.c **** 	clrstk( OP_CLSTK );
 306:src/storage.c **** 	clralpha( OP_CLRALPHA );
 307:src/storage.c **** 	clrflags( OP_CLFLAGS );
 308:src/storage.c **** 	clpall();
 309:src/storage.c **** 
 310:src/storage.c **** 	reset_shift();
 311:src/storage.c **** 	State2.test = TST_NONE;
 312:src/storage.c **** 
 313:src/storage.c **** 	DispMsg = NULL;
 314:src/storage.c **** }
ARM GAS  /tmp/cc09CpAR.s 			page 13


 315:src/storage.c **** 
 316:src/storage.c **** 
 317:src/storage.c **** /*
 318:src/storage.c ****  *  Clear everything
 319:src/storage.c ****  */
 320:src/storage.c **** void reset( void ) 
 321:src/storage.c **** {
 322:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 323:src/storage.c **** 	clrall();
 324:src/storage.c **** 	init_state();
 325:src/storage.c **** 	UState.contrast = 6;
 326:src/storage.c **** #ifdef INFRARED
 327:src/storage.c **** 	State.print_delay = 10;
 328:src/storage.c **** #endif
 329:src/storage.c **** 	DispMsg = "Erased";
 330:src/storage.c **** }
 331:src/storage.c **** 
 332:src/storage.c **** 
 333:src/storage.c **** /*
 334:src/storage.c ****  *  Store into program space.
 335:src/storage.c ****  */
 336:src/storage.c **** void stoprog( opcode c ) {
 337:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 338:src/storage.c **** 	int i;
 339:src/storage.c **** 	unsigned int pc = state_pc();
 340:src/storage.c **** 
 341:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 342:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 343:src/storage.c **** 
 344:src/storage.c **** 	if ( !isRAM( pc ) ) {
 345:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 346:src/storage.c **** 		return;
 347:src/storage.c **** 	}
 348:src/storage.c **** 	clrretstk();
 349:src/storage.c **** 	xeq_init_contexts();
 350:src/storage.c **** 	if ( ProgFree < off ) {
 351:src/storage.c **** 		return;
 352:src/storage.c **** 	}
 353:src/storage.c **** 	ProgSize += off;
 354:src/storage.c **** 	ProgEnd += off;
 355:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 356:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 357:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 358:src/storage.c **** 	}
 359:src/storage.c **** 	if (isDBL(c))
 360:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 361:src/storage.c **** 	Prog_1[pc] = c;
 362:src/storage.c **** 	State.pc = pc;
 363:src/storage.c **** }
 364:src/storage.c **** 
 365:src/storage.c **** 
 366:src/storage.c **** /*
 367:src/storage.c ****  *  Delete the current step in the program
 368:src/storage.c ****  */
 369:src/storage.c **** void delprog( void )
 370:src/storage.c **** {
 371:src/storage.c **** 	int i;
ARM GAS  /tmp/cc09CpAR.s 			page 14


 372:src/storage.c **** 	const unsigned int pc = state_pc();
 373:src/storage.c **** 	int off;
 374:src/storage.c **** 
 375:src/storage.c **** 	if ( check_delete_prog( pc ) )
 376:src/storage.c **** 		return;
 377:src/storage.c **** 	if ( pc == 0 )
 378:src/storage.c **** 		return;
 379:src/storage.c **** 
 380:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 381:src/storage.c **** 	ProgSize -= off;
 382:src/storage.c **** 	ProgEnd -= off;
 383:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 384:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 385:src/storage.c **** 	decpc();
 386:src/storage.c **** }
 387:src/storage.c **** 
 388:src/storage.c **** 
 389:src/storage.c **** /*
 390:src/storage.c ****  *  Helper to append a program in RAM.
 391:src/storage.c ****  *  Returns non zero in case of an error.
 392:src/storage.c ****  */
 393:src/storage.c **** int append_program( const s_opcode *source, int length )
 394:src/storage.c **** {
 395:src/storage.c **** 	unsigned short pc;
 396:src/storage.c **** 	int space_needed = length - ProgFree;
 397:src/storage.c **** 
 398:src/storage.c **** 	if ( ProgSize == 1 ) {
 399:src/storage.c **** 		/*
 400:src/storage.c **** 		 *  Only the default END statement is present
 401:src/storage.c **** 		 */
 402:src/storage.c **** 		--space_needed;
 403:src/storage.c **** 		--ProgSize;
 404:src/storage.c **** 	}
 405:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 406:src/storage.c **** 		return report_err( ERR_INVALID );
 407:src/storage.c **** 	}
 408:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 409:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 410:src/storage.c **** 	}
 411:src/storage.c **** 
 412:src/storage.c **** 	/*
 413:src/storage.c **** 	 *  Make room if needed
 414:src/storage.c **** 	 */
 415:src/storage.c **** 	clrretstk();
 416:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 417:src/storage.c **** 		space_needed -= SizeStatRegs;
 418:src/storage.c **** 		sigmaDeallocate();
 419:src/storage.c **** 	}
 420:src/storage.c **** 	if ( space_needed > 0 ) {
 421:src/storage.c **** 		int regs;
 422:src/storage.c **** 		if (is_dblmode())
 423:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 424:src/storage.c **** 		else
 425:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 426:src/storage.c **** 
 427:src/storage.c **** 		if ( regs < 0 ) {
 428:src/storage.c **** 			return report_err( ERR_RAM_FULL );
ARM GAS  /tmp/cc09CpAR.s 			page 15


 429:src/storage.c **** 		}
 430:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 431:src/storage.c **** 	}
 432:src/storage.c **** 	/*
 433:src/storage.c **** 	 *  Append data
 434:src/storage.c **** 	 */
 435:src/storage.c **** 	pc = ProgSize + 1;
 436:src/storage.c **** 	ProgSize += length;
 437:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 438:src/storage.c **** 	set_pc( pc );
 439:src/storage.c **** 	return 0;
 440:src/storage.c **** }
 441:src/storage.c **** 
 442:src/storage.c **** 
 443:src/storage.c **** #ifdef REALBUILD
 444:src/storage.c **** /*
 445:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 446:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 447:src/storage.c ****  *  IAP feature in ROM instead
 448:src/storage.c ****  */
 449:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 450:src/storage.c **** 
 451:src/storage.c **** /*
 452:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 453:src/storage.c ****  *  Returns zero if OK or non zero on error.
 454:src/storage.c ****  */
 455:src/storage.c **** static int flash_command( unsigned int cmd )
 456:src/storage.c **** {
 457:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 458:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 459:src/storage.c **** }
 460:src/storage.c **** 
 461:src/storage.c **** /*
 462:src/storage.c ****  *  Program the flash starting at destination.
 463:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 464:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 465:src/storage.c ****  */
 466:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 467:src/storage.c **** {
 468:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 469:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 470:src/storage.c **** 
 471:src/storage.c **** 	lock();  // No interrupts, please!
 472:src/storage.c **** 
 473:src/storage.c **** 	while ( count-- > 0 ) {
 474:src/storage.c **** 		/*
 475:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 476:src/storage.c **** 		 */
 477:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 478:src/storage.c **** 		int i;
 479:src/storage.c **** 
 480:src/storage.c **** 		/*
 481:src/storage.c **** 		 *  Copy the source to the flash write buffer
 482:src/storage.c **** 		 */
 483:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
 484:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 485:src/storage.c **** 		}
ARM GAS  /tmp/cc09CpAR.s 			page 16


 486:src/storage.c **** 
 487:src/storage.c **** 		/*
 488:src/storage.c **** 		 *  Command the controller to erase and write the page.
 489:src/storage.c **** 		 */
 490:src/storage.c **** 		if ( flash_command( cmd ) ) {
 491:src/storage.c **** 			report_err( ERR_IO );
 492:src/storage.c **** 			break;
 493:src/storage.c **** 		}
 494:src/storage.c **** 	}
 495:src/storage.c **** 	unlock();
 496:src/storage.c **** 	return Error != 0;
 497:src/storage.c **** }
 498:src/storage.c **** 
 499:src/storage.c **** 
 500:src/storage.c **** /*
 501:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 502:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 503:src/storage.c ****  */
 504:src/storage.c **** void sam_ba_boot(void)
 505:src/storage.c **** {
 506:src/storage.c **** 	/*
 507:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 508:src/storage.c **** 	 */
 509:src/storage.c **** 	lock();
 510:src/storage.c **** 	flash_command( 0x5A00010C );
 511:src/storage.c **** 	SUPC_Shutdown();
 512:src/storage.c **** }
 513:src/storage.c **** 
 514:src/storage.c **** 
 515:src/storage.c **** #else // below here, it's not REALBUILD
 516:src/storage.c **** 
 517:src/storage.c **** /*
 518:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34c-backup.dat
 519:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 520:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 521:src/storage.c ****  */
 522:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 523:src/storage.c **** extern char* get_region_path(int region);
 524:src/storage.c **** #else
 525:src/storage.c **** static char* get_region_path(int region)
 526:src/storage.c **** {
 527:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 528:src/storage.c **** }
 529:src/storage.c **** #endif
 530:src/storage.c **** 
 531:src/storage.c **** #ifdef DM42
 532:src/storage.c **** 
 533:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 534:src/storage.c **** {
 315              		.loc 1 534 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 535:src/storage.c ****   char *name;
 319              		.loc 1 535 3 view .LVU84
 536:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 536 3 view .LVU85
ARM GAS  /tmp/cc09CpAR.s 			page 17


 534:src/storage.c ****   char *name;
 321              		.loc 1 534 1 is_stmt 0 view .LVU86
 322 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 537:src/storage.c ****   int offset;
 538:src/storage.c ****   uint x=0;
 539:src/storage.c **** 
 540:src/storage.c ****   /*
 541:src/storage.c ****    *  Copy the source to the destination memory
 542:src/storage.c ****    */
 543:src/storage.c **** 
 544:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 332              		.loc 1 544 3 view .LVU87
 333 0004 1702     		lsls	r7, r2, #8
 534:src/storage.c ****   char *name;
 334              		.loc 1 534 1 view .LVU88
 335 0006 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 40
 538:src/storage.c **** 
 337              		.loc 1 538 8 view .LVU89
 338 0008 0023     		movs	r3, #0
 339              		.loc 1 544 3 view .LVU90
 340 000a 3A46     		mov	r2, r7
 341              	.LVL29:
 534:src/storage.c ****   char *name;
 342              		.loc 1 534 1 view .LVU91
 343 000c 0546     		mov	r5, r0
 344              	.LVL30:
 537:src/storage.c ****   int offset;
 345              		.loc 1 537 3 is_stmt 1 view .LVU92
 538:src/storage.c **** 
 346              		.loc 1 538 3 view .LVU93
 538:src/storage.c **** 
 347              		.loc 1 538 8 is_stmt 0 view .LVU94
 348 000e 0193     		str	r3, [sp, #4]
 349              		.loc 1 544 3 is_stmt 1 view .LVU95
 350 0010 FFF7FEFF 		bl	xcopy
 351              	.LVL31:
 545:src/storage.c **** 
 546:src/storage.c ****   /*
 547:src/storage.c ****    *  Update the correct region file
 548:src/storage.c ****    */
 549:src/storage.c **** 
 550:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 352              		.loc 1 550 3 view .LVU96
 353              		.loc 1 550 16 is_stmt 0 view .LVU97
 354 0014 2F4B     		ldr	r3, .L56
 355 0016 1E68     		ldr	r6, [r3]
 356              		.loc 1 550 6 view .LVU98
ARM GAS  /tmp/cc09CpAR.s 			page 18


 357 0018 AE42     		cmp	r6, r5
 358 001a 03D8     		bhi	.L37
 359              		.loc 1 550 70 discriminator 1 view .LVU99
 360 001c 06F50063 		add	r3, r6, #2048
 361              		.loc 1 550 38 discriminator 1 view .LVU100
 362 0020 9D42     		cmp	r5, r3
 363 0022 2FD3     		bcc	.L54
 364              	.L37:
 551:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 552:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 553:src/storage.c ****   }
 554:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 365              		.loc 1 554 8 is_stmt 1 view .LVU101
 366              		.loc 1 554 21 is_stmt 0 view .LVU102
 367 0024 2C4B     		ldr	r3, .L56+4
 368 0026 1E68     		ldr	r6, [r3]
 369              		.loc 1 554 11 view .LVU103
 370 0028 AE42     		cmp	r6, r5
 371 002a 2FD8     		bhi	.L39
 372              		.loc 1 554 71 discriminator 1 view .LVU104
 373 002c 06F58043 		add	r3, r6, #16384
 374              		.loc 1 554 41 discriminator 1 view .LVU105
 375 0030 9D42     		cmp	r5, r3
 376 0032 2BD2     		bcs	.L39
 555:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 377              		.loc 1 555 5 is_stmt 1 view .LVU106
 378              	.LVL32:
 379              	.LBB44:
 380              	.LBI44:
 525:src/storage.c **** {
 381              		.loc 1 525 14 view .LVU107
 382              	.LBE44:
 527:src/storage.c **** }
 383              		.loc 1 527 2 view .LVU108
 556:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 556 5 view .LVU109
 555:src/storage.c ****     offset = dest - (char *) &UserFlash;
 385              		.loc 1 555 12 is_stmt 0 view .LVU110
 386 0034 DFF8C490 		ldr	r9, .L56+40
 387              		.loc 1 556 12 view .LVU111
 388 0038 AE1B     		subs	r6, r5, r6
 389              	.LVL33:
 390              	.L38:
 557:src/storage.c ****   }
 558:src/storage.c ****   else {
 559:src/storage.c ****     // Bad address
 560:src/storage.c ****     report_err( ERR_ILLEGAL );
 561:src/storage.c ****     return 1;
 562:src/storage.c ****   }
 563:src/storage.c ****   FRESULT f;
 391              		.loc 1 563 3 is_stmt 1 view .LVU112
 564:src/storage.c **** 
 565:src/storage.c ****   f = check_create_wp34sdir ();
 392              		.loc 1 565 3 view .LVU113
 393              	.LBB45:
 394              	.LBI45:
 566:src/storage.c ****   if ( f != FR_OK ) {
ARM GAS  /tmp/cc09CpAR.s 			page 19


 567:src/storage.c ****     return f;
 568:src/storage.c ****   }
 569:src/storage.c ****   sys_disk_write_enable(1);
 570:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 571:src/storage.c ****   if ( f != FR_OK ) {
 572:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 573:src/storage.c ****   }
 574:src/storage.c ****   if ( f != FR_OK ) {
 575:src/storage.c ****     sys_disk_write_enable(0);
 576:src/storage.c ****     return 1;
 577:src/storage.c ****   }
 578:src/storage.c ****   f_lseek( FPT, offset );
 579:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 580:src/storage.c ****   if (f != FR_OK) {
 581:src/storage.c ****     f_close( FPT );
 582:src/storage.c ****     sys_disk_write_enable(0);
 583:src/storage.c ****     return 1;
 584:src/storage.c ****   }
 585:src/storage.c ****   f = f_close( FPT );
 586:src/storage.c ****   if ( f != FR_OK ) {
 587:src/storage.c ****     sys_disk_write_enable(0);
 588:src/storage.c ****     return 1;
 589:src/storage.c ****   }
 590:src/storage.c ****   sys_disk_write_enable(0);
 591:src/storage.c ****   return 0;
 592:src/storage.c **** }
 593:src/storage.c **** 
 594:src/storage.c **** int check_create_wp34sdir(void) {
 395              		.loc 1 594 5 view .LVU114
 396              	.LBB46:
 595:src/storage.c ****   FRESULT f;
 397              		.loc 1 595 3 view .LVU115
 596:src/storage.c ****   sys_disk_write_enable(1);
 398              		.loc 1 596 3 view .LVU116
 399 003a DFF8AC80 		ldr	r8, .L56+20
 400 003e 0120     		movs	r0, #1
 401 0040 C047     		blx	r8
 402              	.LVL34:
 597:src/storage.c ****   f = check_create_dir ("/wp34s");
 403              		.loc 1 597 3 view .LVU117
 404              		.loc 1 597 7 is_stmt 0 view .LVU118
 405 0042 264B     		ldr	r3, .L56+8
 406 0044 2648     		ldr	r0, .L56+12
 407 0046 9847     		blx	r3
 408              	.LVL35:
 409 0048 0446     		mov	r4, r0
 410              	.LVL36:
 598:src/storage.c ****   sys_disk_write_enable(0);
 411              		.loc 1 598 3 is_stmt 1 view .LVU119
 412 004a 0020     		movs	r0, #0
 413 004c C047     		blx	r8
 414              	.LVL37:
 599:src/storage.c ****   return f;
 415              		.loc 1 599 3 view .LVU120
 416              		.loc 1 599 3 is_stmt 0 view .LVU121
 417              	.LBE46:
 418              	.LBE45:
ARM GAS  /tmp/cc09CpAR.s 			page 20


 566:src/storage.c ****     return f;
 419              		.loc 1 566 3 is_stmt 1 view .LVU122
 566:src/storage.c ****     return f;
 420              		.loc 1 566 6 is_stmt 0 view .LVU123
 421 004e 14F0FF04 		ands	r4, r4, #255
 422              	.LVL38:
 566:src/storage.c ****     return f;
 423              		.loc 1 566 6 view .LVU124
 424 0052 36D1     		bne	.L53
 569:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 425              		.loc 1 569 3 is_stmt 1 view .LVU125
 570:src/storage.c ****   if ( f != FR_OK ) {
 426              		.loc 1 570 7 is_stmt 0 view .LVU126
 427 0054 DFF894A0 		ldr	r10, .L56+24
 428 0058 224C     		ldr	r4, .L56+16
 569:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 429              		.loc 1 569 3 view .LVU127
 430 005a 0120     		movs	r0, #1
 431 005c C047     		blx	r8
 432              	.LVL39:
 570:src/storage.c ****   if ( f != FR_OK ) {
 433              		.loc 1 570 3 is_stmt 1 view .LVU128
 570:src/storage.c ****   if ( f != FR_OK ) {
 434              		.loc 1 570 7 is_stmt 0 view .LVU129
 435 005e DAF80400 		ldr	r0, [r10, #4]
 436 0062 0322     		movs	r2, #3
 437 0064 4946     		mov	r1, r9
 438 0066 A047     		blx	r4
 439              	.LVL40:
 571:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 440              		.loc 1 571 3 is_stmt 1 view .LVU130
 571:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 441              		.loc 1 571 6 is_stmt 0 view .LVU131
 442 0068 B8B1     		cbz	r0, .L42
 572:src/storage.c ****   }
 443              		.loc 1 572 5 is_stmt 1 view .LVU132
 572:src/storage.c ****   }
 444              		.loc 1 572 9 is_stmt 0 view .LVU133
 445 006a DAF80400 		ldr	r0, [r10, #4]
 446              	.LVL41:
 572:src/storage.c ****   }
 447              		.loc 1 572 9 view .LVU134
 448 006e 4946     		mov	r1, r9
 449 0070 0B22     		movs	r2, #11
 450 0072 A047     		blx	r4
 451              	.LVL42:
 574:src/storage.c ****     sys_disk_write_enable(0);
 452              		.loc 1 574 3 is_stmt 1 view .LVU135
 574:src/storage.c ****     sys_disk_write_enable(0);
 453              		.loc 1 574 6 is_stmt 0 view .LVU136
 454 0074 88B1     		cbz	r0, .L42
 455              	.LVL43:
 456              	.L52:
 582:src/storage.c ****     return 1;
 457              		.loc 1 582 5 is_stmt 1 view .LVU137
 458 0076 1C4B     		ldr	r3, .L56+20
 459 0078 0020     		movs	r0, #0
ARM GAS  /tmp/cc09CpAR.s 			page 21


 460 007a 9847     		blx	r3
 461              	.LVL44:
 583:src/storage.c ****   }
 462              		.loc 1 583 5 view .LVU138
 583:src/storage.c ****   }
 463              		.loc 1 583 12 is_stmt 0 view .LVU139
 464 007c 0120     		movs	r0, #1
 592:src/storage.c **** 
 465              		.loc 1 592 1 view .LVU140
 466 007e 02B0     		add	sp, sp, #8
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 32
 469              		@ sp needed
 470 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 471              	.LVL45:
 472              	.L54:
 473              		.cfi_restore_state
 551:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 474              		.loc 1 551 5 is_stmt 1 view .LVU141
 475              	.LBB47:
 476              	.LBI47:
 525:src/storage.c **** {
 477              		.loc 1 525 14 view .LVU142
 478              	.LBE47:
 527:src/storage.c **** }
 479              		.loc 1 527 2 view .LVU143
 552:src/storage.c ****   }
 480              		.loc 1 552 5 view .LVU144
 551:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 481              		.loc 1 551 12 is_stmt 0 view .LVU145
 482 0084 DFF87890 		ldr	r9, .L56+44
 552:src/storage.c ****   }
 483              		.loc 1 552 12 view .LVU146
 484 0088 AE1B     		subs	r6, r5, r6
 485              	.LVL46:
 552:src/storage.c ****   }
 486              		.loc 1 552 12 view .LVU147
 487 008a D6E7     		b	.L38
 488              	.LVL47:
 489              	.L39:
 560:src/storage.c ****     return 1;
 490              		.loc 1 560 5 is_stmt 1 view .LVU148
 491 008c 0720     		movs	r0, #7
 492 008e FFF7FEFF 		bl	report_err
 493              	.LVL48:
 561:src/storage.c ****   }
 494              		.loc 1 561 5 view .LVU149
 561:src/storage.c ****   }
 495              		.loc 1 561 12 is_stmt 0 view .LVU150
 496 0092 0120     		movs	r0, #1
 592:src/storage.c **** 
 497              		.loc 1 592 1 view .LVU151
 498 0094 02B0     		add	sp, sp, #8
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
 501              		@ sp needed
 502 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
ARM GAS  /tmp/cc09CpAR.s 			page 22


 503              	.LVL49:
 504              	.L42:
 505              		.cfi_restore_state
 578:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 506              		.loc 1 578 3 is_stmt 1 view .LVU152
 507 009a 144C     		ldr	r4, .L56+24
 508 009c 144B     		ldr	r3, .L56+28
 509 009e 6068     		ldr	r0, [r4, #4]
 510 00a0 3146     		mov	r1, r6
 511 00a2 9847     		blx	r3
 512              	.LVL50:
 579:src/storage.c ****   if (f != FR_OK) {
 513              		.loc 1 579 3 view .LVU153
 579:src/storage.c ****   if (f != FR_OK) {
 514              		.loc 1 579 7 is_stmt 0 view .LVU154
 515 00a4 2946     		mov	r1, r5
 516 00a6 6068     		ldr	r0, [r4, #4]
 517 00a8 124D     		ldr	r5, .L56+32
 518              	.LVL51:
 579:src/storage.c ****   if (f != FR_OK) {
 519              		.loc 1 579 7 view .LVU155
 520 00aa 3A46     		mov	r2, r7
 521 00ac 01AB     		add	r3, sp, #4
 522 00ae A847     		blx	r5
 523              	.LVL52:
 580:src/storage.c ****     f_close( FPT );
 524              		.loc 1 580 3 is_stmt 1 view .LVU156
 580:src/storage.c ****     f_close( FPT );
 525              		.loc 1 580 6 is_stmt 0 view .LVU157
 526 00b0 58B9     		cbnz	r0, .L55
 585:src/storage.c ****   if ( f != FR_OK ) {
 527              		.loc 1 585 3 is_stmt 1 view .LVU158
 585:src/storage.c ****   if ( f != FR_OK ) {
 528              		.loc 1 585 7 is_stmt 0 view .LVU159
 529 00b2 6068     		ldr	r0, [r4, #4]
 530              	.LVL53:
 585:src/storage.c ****   if ( f != FR_OK ) {
 531              		.loc 1 585 7 view .LVU160
 532 00b4 104B     		ldr	r3, .L56+36
 533 00b6 9847     		blx	r3
 534              	.LVL54:
 586:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 586 3 is_stmt 1 view .LVU161
 586:src/storage.c ****     sys_disk_write_enable(0);
 536              		.loc 1 586 6 is_stmt 0 view .LVU162
 537 00b8 0446     		mov	r4, r0
 538 00ba 0028     		cmp	r0, #0
 539 00bc DBD1     		bne	.L52
 590:src/storage.c ****   return 0;
 540              		.loc 1 590 3 is_stmt 1 view .LVU163
 541 00be 0A4B     		ldr	r3, .L56+20
 542 00c0 9847     		blx	r3
 543              	.LVL55:
 544              	.L53:
 591:src/storage.c **** }
 545              		.loc 1 591 3 view .LVU164
 591:src/storage.c **** }
ARM GAS  /tmp/cc09CpAR.s 			page 23


 546              		.loc 1 591 10 is_stmt 0 view .LVU165
 547 00c2 2046     		mov	r0, r4
 592:src/storage.c **** 
 548              		.loc 1 592 1 view .LVU166
 549 00c4 02B0     		add	sp, sp, #8
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 32
 552              		@ sp needed
 553 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 554              	.LVL56:
 555              	.L55:
 556              		.cfi_restore_state
 581:src/storage.c ****     sys_disk_write_enable(0);
 557              		.loc 1 581 5 is_stmt 1 view .LVU167
 558 00ca 6068     		ldr	r0, [r4, #4]
 559              	.LVL57:
 581:src/storage.c ****     sys_disk_write_enable(0);
 560              		.loc 1 581 5 is_stmt 0 view .LVU168
 561 00cc 0A4B     		ldr	r3, .L56+36
 562 00ce 9847     		blx	r3
 563              	.LVL58:
 564 00d0 D1E7     		b	.L52
 565              	.L57:
 566 00d2 00BF     		.align	2
 567              	.L56:
 568 00d4 00000000 		.word	backup_ram
 569 00d8 00000000 		.word	library_ram
 570 00dc D1030008 		.word	134218705
 571 00e0 2C000000 		.word	.LC2
 572 00e4 35040008 		.word	134218805
 573 00e8 E1030008 		.word	134218721
 574 00ec 00200010 		.word	268443648
 575 00f0 45040008 		.word	134218821
 576 00f4 41040008 		.word	134218817
 577 00f8 39040008 		.word	134218809
 578 00fc 18000000 		.word	.LC1
 579 0100 00000000 		.word	.LC0
 580              		.cfi_endproc
 581              	.LFE20:
 583              		.section	.text.flash_append,"ax",%progbits
 584              		.align	1
 585              		.p2align 2,,3
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
 591              	flash_append:
 592              	.LVL59:
 593              	.LFB23:
 600:src/storage.c **** }
 601:src/storage.c **** 
 602:src/storage.c **** #else //ifdef DM42 false
 603:src/storage.c **** 
 604:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 605:src/storage.c **** {
 606:src/storage.c ****   char *name;
 607:src/storage.c ****   char *dest = (char *) destination;
ARM GAS  /tmp/cc09CpAR.s 			page 24


 608:src/storage.c ****   FILE *f = NULL;
 609:src/storage.c ****   int offset;
 610:src/storage.c **** 
 611:src/storage.c ****   /*
 612:src/storage.c ****    *  Copy the source to the destination memory
 613:src/storage.c ****    */
 614:src/storage.c **** 
 615:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 616:src/storage.c **** 
 617:src/storage.c ****   /*
 618:src/storage.c ****    *  Update the correct region file
 619:src/storage.c ****    */
 620:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 621:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 622:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 623:src/storage.c ****   }
 624:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 625:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 626:src/storage.c ****     offset = dest - (char *) &UserFlash;
 627:src/storage.c ****   }
 628:src/storage.c ****   else {
 629:src/storage.c ****     // Bad address
 630:src/storage.c ****     report_err( ERR_ILLEGAL );
 631:src/storage.c ****     return 1;
 632:src/storage.c ****   }
 633:src/storage.c **** 
 634:src/storage.c ****   f = fopen( name, "rb+" );
 635:src/storage.c ****   if ( f == NULL ) {
 636:src/storage.c ****     f = fopen( name, "wb+" );
 637:src/storage.c ****   }
 638:src/storage.c ****   if ( f == NULL ) {
 639:src/storage.c ****     report_err( ERR_IO );
 640:src/storage.c ****     return 1;
 641:src/storage.c ****   }
 642:src/storage.c ****   fseek( f, offset, SEEK_SET );
 643:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 644:src/storage.c ****     fclose( f );
 645:src/storage.c ****     report_err( ERR_IO );
 646:src/storage.c ****     return 1;
 647:src/storage.c ****   }
 648:src/storage.c ****   fclose( f );
 649:src/storage.c ****  return 0;
 650:src/storage.c **** }
 651:src/storage.c ****   
 652:src/storage.c **** #endif //ifdef DM42
 653:src/storage.c **** 
 654:src/storage.c **** 
 655:src/storage.c **** #endif //ifdef REALBUILD
 656:src/storage.c **** 
 657:src/storage.c **** 
 658:src/storage.c **** /*
 659:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 660:src/storage.c ****  */
 661:src/storage.c **** void init_library( void )
 662:src/storage.c **** {
 663:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 664:src/storage.c **** 	  struct {
ARM GAS  /tmp/cc09CpAR.s 			page 25


 665:src/storage.c **** 			unsigned short crc;
 666:src/storage.c **** 			unsigned short size;
 667:src/storage.c **** 			s_opcode prog[ 126 ];
 668:src/storage.c **** 		} lib;
 669:src/storage.c **** 		lib.size = 0;
 670:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 671:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 672:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 673:src/storage.c **** 	}
 674:src/storage.c **** }
 675:src/storage.c **** 
 676:src/storage.c **** 
 677:src/storage.c **** /*
 678:src/storage.c ****  *  Add data at the end of user flash memory.
 679:src/storage.c ****  *  Update crc and counter when done.
 680:src/storage.c ****  *  All sizes are given in steps.
 681:src/storage.c ****  */
 682:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 683:src/storage.c **** {
 594              		.loc 1 683 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 256
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 684:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 598              		.loc 1 684 3 view .LVU170
 683:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 599              		.loc 1 683 1 is_stmt 0 view .LVU171
 600 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 601              		.cfi_def_cfa_offset 36
 602              		.cfi_offset 4, -36
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 6, -28
 605              		.cfi_offset 7, -24
 606              		.cfi_offset 8, -20
 607              		.cfi_offset 9, -16
 608              		.cfi_offset 10, -12
 609              		.cfi_offset 11, -8
 610              		.cfi_offset 14, -4
 611              		.loc 1 684 27 view .LVU172
 612 0004 254F     		ldr	r7, .L70
 613 0006 3C68     		ldr	r4, [r7]
 614 0008 251D     		adds	r5, r4, #4
 615              		.loc 1 684 9 view .LVU173
 616 000a 05EB4006 		add	r6, r5, r0, lsl #1
 617              	.LVL60:
 685:src/storage.c ****   char *src = (char *) source;
 618              		.loc 1 685 3 is_stmt 1 view .LVU174
 686:src/storage.c **** #ifdef REALBUILD
 687:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 688:src/storage.c **** #else
 689:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 619              		.loc 1 689 31 is_stmt 0 view .LVU175
 620 000e 341B     		subs	r4, r6, r4
 690:src/storage.c **** #endif
 691:src/storage.c ****   char buffer[ PAGE_SIZE ];
 692:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 693:src/storage.c ****   count <<= 1;
ARM GAS  /tmp/cc09CpAR.s 			page 26


 694:src/storage.c **** 
 695:src/storage.c ****   if ( offset_in_page != 0 ) {
 621              		.loc 1 695 6 view .LVU176
 622 0010 14F0FF04 		ands	r4, r4, #255
 683:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 623              		.loc 1 683 1 view .LVU177
 624 0014 C1B0     		sub	sp, sp, #260
 625              		.cfi_def_cfa_offset 296
 683:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 626              		.loc 1 683 1 view .LVU178
 627 0016 8846     		mov	r8, r1
 628              	.LVL61:
 689:src/storage.c **** #endif
 629              		.loc 1 689 3 is_stmt 1 view .LVU179
 691:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 630              		.loc 1 691 3 view .LVU180
 692:src/storage.c ****   count <<= 1;
 631              		.loc 1 692 3 view .LVU181
 693:src/storage.c **** 
 632              		.loc 1 693 3 view .LVU182
 693:src/storage.c **** 
 633              		.loc 1 693 9 is_stmt 0 view .LVU183
 634 0018 4FEA4205 		lsl	r5, r2, #1
 635              	.LVL62:
 636              		.loc 1 695 3 is_stmt 1 view .LVU184
 683:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 637              		.loc 1 683 1 is_stmt 0 view .LVU185
 638 001c 9946     		mov	r9, r3
 639              		.loc 1 695 6 view .LVU186
 640 001e 21D1     		bne	.L69
 641              	.LVL63:
 642              	.L59:
 696:src/storage.c ****     /*
 697:src/storage.c ****      *  We are not on a page boundary
 698:src/storage.c ****      *  Assemble a buffer from existing and new data
 699:src/storage.c ****      */
 700:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 701:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 702:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 703:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 704:src/storage.c ****       return 1;
 705:src/storage.c ****     }
 706:src/storage.c ****     src += bytes;
 707:src/storage.c ****     dest += bytes;
 708:src/storage.c ****     count -= bytes;
 709:src/storage.c ****   }
 710:src/storage.c **** 
 711:src/storage.c ****   if ( count > 0 ) {
 643              		.loc 1 711 3 is_stmt 1 view .LVU187
 644              		.loc 1 711 6 is_stmt 0 view .LVU188
 645 0020 002D     		cmp	r5, #0
 646 0022 07DD     		ble	.L64
 712:src/storage.c ****     /*
 713:src/storage.c ****      *  Move multiples of complete pages
 714:src/storage.c ****      */
 715:src/storage.c **** #ifdef DM42
 716:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
ARM GAS  /tmp/cc09CpAR.s 			page 27


 647              		.loc 1 716 5 is_stmt 1 view .LVU189
 648              		.loc 1 716 21 is_stmt 0 view .LVU190
 649 0024 05F1FF02 		add	r2, r5, #255
 650              	.LVL64:
 717:src/storage.c **** #else
 718:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 719:src/storage.c **** #endif
 720:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 651              		.loc 1 720 5 is_stmt 1 view .LVU191
 652              		.loc 1 720 10 is_stmt 0 view .LVU192
 653 0028 1212     		asrs	r2, r2, #8
 654              	.LVL65:
 655              		.loc 1 720 10 view .LVU193
 656 002a 4146     		mov	r1, r8
 657 002c 3046     		mov	r0, r6
 658 002e FFF7FEFF 		bl	program_flash
 659              	.LVL66:
 660              		.loc 1 720 8 view .LVU194
 661 0032 98B9     		cbnz	r0, .L63
 662              	.LVL67:
 663              	.L64:
 721:src/storage.c ****       return 1;
 722:src/storage.c ****     }
 723:src/storage.c ****   }
 724:src/storage.c **** 
 725:src/storage.c ****   /*
 726:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 727:src/storage.c ****    */
 728:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 664              		.loc 1 728 3 is_stmt 1 view .LVU195
 665 0034 3968     		ldr	r1, [r7]
 666 0036 4FF48072 		mov	r2, #256
 667 003a 6846     		mov	r0, sp
 668 003c FFF7FEFF 		bl	xcopy
 669              	.LVL68:
 729:src/storage.c ****   fr->size = size;
 670              		.loc 1 729 3 view .LVU196
 730:src/storage.c ****   checksum_region( &UserFlash, fr );
 671              		.loc 1 730 3 is_stmt 0 view .LVU197
 672 0040 6946     		mov	r1, sp
 673 0042 3868     		ldr	r0, [r7]
 729:src/storage.c ****   fr->size = size;
 674              		.loc 1 729 12 view .LVU198
 675 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 676              		.loc 1 730 3 is_stmt 1 view .LVU199
 677 0048 FFF7FEFF 		bl	checksum_region
 678              	.LVL69:
 731:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
 679              		.loc 1 731 3 view .LVU200
 680              		.loc 1 731 10 is_stmt 0 view .LVU201
 681 004c 3868     		ldr	r0, [r7]
 682 004e 6946     		mov	r1, sp
 683 0050 0122     		movs	r2, #1
 684 0052 FFF7FEFF 		bl	program_flash
 685              	.LVL70:
 732:src/storage.c **** }
 686              		.loc 1 732 1 view .LVU202
ARM GAS  /tmp/cc09CpAR.s 			page 28


 687 0056 41B0     		add	sp, sp, #260
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 36
 690              	.LVL71:
 691              		.loc 1 732 1 view .LVU203
 692              		@ sp needed
 693 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              	.LVL72:
 695              	.L63:
 696              		.cfi_restore_state
 697              	.LBB48:
 704:src/storage.c ****     }
 698              		.loc 1 704 14 view .LVU204
 699 005c 0120     		movs	r0, #1
 700              	.LBE48:
 701              		.loc 1 732 1 view .LVU205
 702 005e 41B0     		add	sp, sp, #260
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              	.LVL73:
 706              		.loc 1 732 1 view .LVU206
 707              		@ sp needed
 708 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 709              	.LVL74:
 710              	.L69:
 711              		.cfi_restore_state
 712              	.LBB49:
 700:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713              		.loc 1 700 5 is_stmt 1 view .LVU207
 701:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714              		.loc 1 701 25 is_stmt 0 view .LVU208
 715 0064 A6EB040B 		sub	fp, r6, r4
 701:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 716              		.loc 1 701 5 view .LVU209
 717 0068 5946     		mov	r1, fp
 718              	.LVL75:
 701:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 719              		.loc 1 701 5 view .LVU210
 720 006a 2246     		mov	r2, r4
 721 006c 6846     		mov	r0, sp
 722              	.LVL76:
 700:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 723              		.loc 1 700 15 view .LVU211
 724 006e C4F5807A 		rsb	r10, r4, #256
 725              	.LVL77:
 701:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 726              		.loc 1 701 5 is_stmt 1 view .LVU212
 727 0072 FFF7FEFF 		bl	xcopy
 728              	.LVL78:
 702:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 729              		.loc 1 702 5 view .LVU213
 730 0076 5246     		mov	r2, r10
 731 0078 4146     		mov	r1, r8
 732 007a 0DEB0400 		add	r0, sp, r4
 733 007e FFF7FEFF 		bl	xcopy
 734              	.LVL79:
 703:src/storage.c ****       return 1;
ARM GAS  /tmp/cc09CpAR.s 			page 29


 735              		.loc 1 703 5 view .LVU214
 703:src/storage.c ****       return 1;
 736              		.loc 1 703 10 is_stmt 0 view .LVU215
 737 0082 6946     		mov	r1, sp
 738 0084 5846     		mov	r0, fp
 739 0086 0122     		movs	r2, #1
 740 0088 FFF7FEFF 		bl	program_flash
 741              	.LVL80:
 703:src/storage.c ****       return 1;
 742              		.loc 1 703 8 view .LVU216
 743 008c 0028     		cmp	r0, #0
 744 008e E5D1     		bne	.L63
 706:src/storage.c ****     dest += bytes;
 745              		.loc 1 706 5 is_stmt 1 view .LVU217
 706:src/storage.c ****     dest += bytes;
 746              		.loc 1 706 9 is_stmt 0 view .LVU218
 747 0090 D044     		add	r8, r8, r10
 748              	.LVL81:
 707:src/storage.c ****     count -= bytes;
 749              		.loc 1 707 5 is_stmt 1 view .LVU219
 707:src/storage.c ****     count -= bytes;
 750              		.loc 1 707 10 is_stmt 0 view .LVU220
 751 0092 5644     		add	r6, r6, r10
 752              	.LVL82:
 708:src/storage.c ****   }
 753              		.loc 1 708 5 is_stmt 1 view .LVU221
 708:src/storage.c ****   }
 754              		.loc 1 708 11 is_stmt 0 view .LVU222
 755 0094 A5EB0A05 		sub	r5, r5, r10
 756              	.LVL83:
 708:src/storage.c ****   }
 757              		.loc 1 708 11 view .LVU223
 758 0098 C2E7     		b	.L59
 759              	.L71:
 760 009a 00BF     		.align	2
 761              	.L70:
 762 009c 00000000 		.word	library_ram
 763              	.LBE49:
 764              		.cfi_endproc
 765              	.LFE23:
 767              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 768              		.align	2
 769              	.LC3:
 770 0000 64617461 		.ascii	"data=3?\000"
 770      3D333F00 
 771              		.align	2
 772              	.LC4:
 773 0008 46696C65 		.ascii	"File err\000"
 773      20657272 
 773      00
 774              		.section	.text.open_selected_file,"ax",%progbits
 775              		.align	1
 776              		.p2align 2,,3
 777              		.global	open_selected_file
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
ARM GAS  /tmp/cc09CpAR.s 			page 30


 781              		.fpu fpv4-sp-d16
 783              	open_selected_file:
 784              	.LVL84:
 785              	.LFB38:
 733:src/storage.c **** 
 734:src/storage.c **** 
 735:src/storage.c **** /*
 736:src/storage.c ****  *  Remove steps from user flash memory.
 737:src/storage.c ****  */
 738:src/storage.c **** int flash_remove( int step_no, int count )
 739:src/storage.c **** {
 740:src/storage.c **** 	const int size = UserFlash.size - count;
 741:src/storage.c **** 	step_no = offsetLIB( step_no );
 742:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 743:src/storage.c **** 			     size - step_no, size );
 744:src/storage.c **** }
 745:src/storage.c **** 
 746:src/storage.c **** 
 747:src/storage.c **** /*
 748:src/storage.c ****  *  Simple backup / restore
 749:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 750:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 751:src/storage.c ****  */
 752:src/storage.c **** void flash_backup( enum nilop op )
 753:src/storage.c **** {
 754:src/storage.c **** 	if ( not_running() ) {
 755:src/storage.c **** 		process_cmdline_set_lift();
 756:src/storage.c **** 		init_state();
 757:src/storage.c **** 		checksum_all();
 758:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 759:src/storage.c **** 			error_message( ERR_IO );
 760:src/storage.c **** 			DispMsg = "Error";
 761:src/storage.c **** 		}
 762:src/storage.c **** 		else {
 763:src/storage.c **** 			DispMsg = "Saved";
 764:src/storage.c **** 		}
 765:src/storage.c **** 	}
 766:src/storage.c **** }
 767:src/storage.c **** 
 768:src/storage.c **** 
 769:src/storage.c **** void flash_restore( enum nilop op )
 770:src/storage.c **** {
 771:src/storage.c **** 	if ( not_running() ) {
 772:src/storage.c **** 		if ( checksum_backup() ) {
 773:src/storage.c **** 			error_message( ERR_INVALID );
 774:src/storage.c **** 		}
 775:src/storage.c **** 		else {
 776:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
 777:src/storage.c **** 			init_state();
 778:src/storage.c **** 			DispMsg = "Restored";
 779:src/storage.c **** 		}
 780:src/storage.c **** 	}
 781:src/storage.c **** }
 782:src/storage.c **** 
 783:src/storage.c **** 
 784:src/storage.c **** /*
 785:src/storage.c ****  *  Load the user program area from the backup.
ARM GAS  /tmp/cc09CpAR.s 			page 31


 786:src/storage.c ****  *  Called by PLOAD.
 787:src/storage.c ****  */
 788:src/storage.c **** void load_program( enum nilop op )
 789:src/storage.c **** {
 790:src/storage.c **** 	if ( not_running() ) {
 791:src/storage.c **** 		if ( checksum_backup() ) {
 792:src/storage.c **** 			/*
 793:src/storage.c **** 			 *  Not a valid backup
 794:src/storage.c **** 			 */
 795:src/storage.c **** 			report_err( ERR_INVALID );
 796:src/storage.c **** 			return;
 797:src/storage.c **** 		}
 798:src/storage.c **** 		clpall();
 799:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 800:src/storage.c **** 	}
 801:src/storage.c **** }
 802:src/storage.c **** 
 803:src/storage.c **** 
 804:src/storage.c **** /*
 805:src/storage.c ****  *  Load registers from backup
 806:src/storage.c ****  */
 807:src/storage.c **** void load_registers( enum nilop op )
 808:src/storage.c **** {
 809:src/storage.c **** 	int count;
 810:src/storage.c **** 	if ( checksum_backup() ) {
 811:src/storage.c **** 		/*
 812:src/storage.c **** 		 *  Not a valid backup region
 813:src/storage.c **** 		 */
 814:src/storage.c **** 		report_err( ERR_INVALID );
 815:src/storage.c **** 		return;
 816:src/storage.c **** 	}
 817:src/storage.c **** 	count = NumRegs;
 818:src/storage.c **** 	if ( is_dblmode() ) {
 819:src/storage.c **** 		// Don't clobber the stack in DP mode
 820:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 821:src/storage.c **** 	}
 822:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 823:src/storage.c **** 		count = BackupFlash._numregs;
 824:src/storage.c **** 	}
 825:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 826:src/storage.c **** }
 827:src/storage.c **** 
 828:src/storage.c **** 
 829:src/storage.c **** /*
 830:src/storage.c ****  *  Load the statistical summation registers from backup
 831:src/storage.c ****  */
 832:src/storage.c **** void load_sigma( enum nilop op )
 833:src/storage.c **** {
 834:src/storage.c **** 	if ( checksum_backup() ) {
 835:src/storage.c **** 		/*
 836:src/storage.c **** 		 *  Not a valid backup region
 837:src/storage.c **** 		 */
 838:src/storage.c **** 		report_err( ERR_INVALID );
 839:src/storage.c **** 		return;
 840:src/storage.c **** 	}
 841:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 842:src/storage.c **** 		/*
ARM GAS  /tmp/cc09CpAR.s 			page 32


 843:src/storage.c **** 		 *  Backup has no data
 844:src/storage.c **** 		 */
 845:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 846:src/storage.c **** 		return;
 847:src/storage.c **** 	}
 848:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 849:src/storage.c **** }
 850:src/storage.c **** 
 851:src/storage.c **** 
 852:src/storage.c **** /*
 853:src/storage.c ****  *  Load the configuration data from the backup
 854:src/storage.c ****  */
 855:src/storage.c **** void load_state( enum nilop op )
 856:src/storage.c **** {
 857:src/storage.c **** 	if ( not_running() ) {
 858:src/storage.c **** 		if ( checksum_backup() ) {
 859:src/storage.c **** 			/*
 860:src/storage.c **** 			 *  Not a valid backup region
 861:src/storage.c **** 			 */
 862:src/storage.c **** 			report_err( ERR_INVALID );
 863:src/storage.c **** 			return;
 864:src/storage.c **** 		}
 865:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 866:src/storage.c **** 		init_state();
 867:src/storage.c **** 		clrretstk_pc();
 868:src/storage.c **** 	}
 869:src/storage.c **** }
 870:src/storage.c **** 
 871:src/storage.c **** 
 872:src/storage.c **** /*
 873:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 874:src/storage.c ****  */
 875:src/storage.c **** void store_program( enum nilop op )
 876:src/storage.c **** {
 877:src/storage.c **** 	opcode lbl; 
 878:src/storage.c **** 	unsigned int pc;
 879:src/storage.c **** 	int space_needed, count, free;
 880:src/storage.c **** 
 881:src/storage.c **** 	if ( not_running() ) {
 882:src/storage.c **** 		/*
 883:src/storage.c **** 		 *  Don't copy from library or XROM
 884:src/storage.c **** 		 */
 885:src/storage.c **** 		pc = nLIB( state_pc() );
 886:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 887:src/storage.c **** 			report_err( ERR_ILLEGAL );
 888:src/storage.c **** 			return;
 889:src/storage.c **** 		}
 890:src/storage.c **** 		/*
 891:src/storage.c **** 		 *  Check if program is labeled
 892:src/storage.c **** 		 */
 893:src/storage.c **** 		update_program_bounds( 1 );
 894:src/storage.c **** 		lbl = getprog( ProgBegin );
 895:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 896:src/storage.c **** 			report_err( ERR_NO_LBL );
 897:src/storage.c **** 			return;
 898:src/storage.c **** 		}
 899:src/storage.c **** 		/*
ARM GAS  /tmp/cc09CpAR.s 			page 33


 900:src/storage.c **** 		 *  Compute space needed
 901:src/storage.c **** 		 */
 902:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 903:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 904:src/storage.c **** 
 905:src/storage.c **** 		/*
 906:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 907:src/storage.c **** 		 */
 908:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 909:src/storage.c **** 		if ( pc != 0 ) {
 910:src/storage.c **** 			/*
 911:src/storage.c **** 			 *  CLP in library
 912:src/storage.c **** 			 */
 913:src/storage.c **** 			unsigned int old_pc = state_pc();
 914:src/storage.c **** 			set_pc( pc );
 915:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 916:src/storage.c **** 			if ( space_needed <= free ) {
 917:src/storage.c **** 				clrprog();
 918:src/storage.c **** 			}
 919:src/storage.c **** 			set_pc( old_pc );
 920:src/storage.c **** 		}
 921:src/storage.c **** 		if ( space_needed > free ) {
 922:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 923:src/storage.c **** 			return;
 924:src/storage.c **** 		}
 925:src/storage.c **** 		// 3. Append program
 926:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 927:src/storage.c **** 	}
 928:src/storage.c **** }
 929:src/storage.c **** 
 930:src/storage.c **** 
 931:src/storage.c **** /*
 932:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 933:src/storage.c ****  */
 934:src/storage.c **** void recall_program( enum nilop op )
 935:src/storage.c **** {
 936:src/storage.c **** 	if ( not_running() ) {
 937:src/storage.c **** 		if ( state_pc() == 0 ) {
 938:src/storage.c **** 			State.pc = 1;
 939:src/storage.c **** 		}
 940:src/storage.c **** 		update_program_bounds( 1 );
 941:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 942:src/storage.c **** 	}
 943:src/storage.c **** }
 944:src/storage.c **** 
 945:src/storage.c **** 
 946:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 947:src/storage.c **** /*
 948:src/storage.c ****  *  Filesystem access for emulator
 949:src/storage.c ****  */
 950:src/storage.c **** 
 951:src/storage.c **** #ifndef DM42
 952:src/storage.c **** 
 953:src/storage.c **** #ifdef _WIN32
 954:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
 955:src/storage.c **** #else
 956:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
ARM GAS  /tmp/cc09CpAR.s 			page 34


 957:src/storage.c **** #endif
 958:src/storage.c **** 
 959:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 960:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 961:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 962:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 963:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 964:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 965:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 966:src/storage.c **** 
 967:src/storage.c **** /*
 968:src/storage.c ****  *  Show (GUI) message
 969:src/storage.c ****  */
 970:src/storage.c **** #ifdef QTGUI
 971:src/storage.c **** extern void showMessage(const char* title, const char* message);
 972:src/storage.c **** #endif
 973:src/storage.c **** 
 974:src/storage.c **** 
 975:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 976:src/storage.c **** {
 977:src/storage.c **** 	va_list args;
 978:src/storage.c **** #ifndef QTGUI
 979:src/storage.c **** #ifdef WINGUI
 980:src/storage.c **** 	char msg[ 10000 ];
 981:src/storage.c **** 	va_start( args, format );
 982:src/storage.c **** 	vsprintf( msg, format, args );
 983:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 984:src/storage.c **** #else
 985:src/storage.c **** 	va_start( args, format );
 986:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 987:src/storage.c **** 	vfprintf( stderr, format, args );
 988:src/storage.c **** 	fputc( '\n', stderr );
 989:src/storage.c **** #endif
 990:src/storage.c **** #else
 991:src/storage.c **** 	char msg[ 10000 ];
 992:src/storage.c **** 	va_start( args, format );
 993:src/storage.c **** 	vsprintf( msg, format, args );
 994:src/storage.c **** 	showMessage(title, msg);
 995:src/storage.c **** #endif
 996:src/storage.c **** }
 997:src/storage.c **** 
 998:src/storage.c **** 
 999:src/storage.c **** 
1000:src/storage.c **** /*
1001:src/storage.c ****  *  Save/Load state to a file
1002:src/storage.c ****  */
1003:src/storage.c **** void save_statefile( const char *filename )
1004:src/storage.c **** {
1005:src/storage.c **** 	FILE *f;
1006:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1007:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
1008:src/storage.c **** 	}
1009:src/storage.c **** 	f = fopen( StateFile, "wb" );
1010:src/storage.c **** 	if ( f == NULL ) {
1011:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
1012:src/storage.c **** 		return;
1013:src/storage.c **** 	}
ARM GAS  /tmp/cc09CpAR.s 			page 35


1014:src/storage.c **** 	process_cmdline_set_lift();
1015:src/storage.c **** 	init_state();
1016:src/storage.c **** 	checksum_all();
1017:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1018:src/storage.c **** 	fclose( f );
1019:src/storage.c **** #ifdef DEBUG
1020:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1021:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1022:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1023:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1024:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1025:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1026:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1027:src/storage.c **** #endif
1028:src/storage.c **** }
1029:src/storage.c **** 
1030:src/storage.c **** /*
1031:src/storage.c ****  *  Helper to expand filenames with startup directory
1032:src/storage.c ****  */
1033:src/storage.c **** #ifdef _WIN32
1034:src/storage.c **** #include <direct.h>
1035:src/storage.c **** #define getcwd _getcwd
1036:src/storage.c **** #define SEPARATOR '\\'
1037:src/storage.c **** #else
1038:src/storage.c **** #define SEPARATOR '/'
1039:src/storage.c **** #endif
1040:src/storage.c **** 
1041:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1042:src/storage.c **** {
1043:src/storage.c **** 	char *p;
1044:src/storage.c **** 	size_t l;
1045:src/storage.c **** 
1046:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1047:src/storage.c **** 		// Determine current directory on first call
1048:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1049:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
1050:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1051:src/storage.c **** 			*p = SEPARATOR;
1052:src/storage.c **** 			p[ 1 ] = '\0';
1053:src/storage.c **** 		}
1054:src/storage.c **** 	}
1055:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1056:src/storage.c **** 		// Absolute path left unchanged
1057:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1058:src/storage.c **** 	}
1059:src/storage.c **** 	else {
1060:src/storage.c **** 		// Prepend CurrentDir
1061:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
1062:src/storage.c **** 		l = strlen( buffer );
1063:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1064:src/storage.c **** 	}
1065:src/storage.c **** 	return buffer;
1066:src/storage.c **** }
1067:src/storage.c **** #endif //ifndef DM42
1068:src/storage.c **** 
1069:src/storage.c **** /*
1070:src/storage.c ****  *  Lots of file routines for DM42
ARM GAS  /tmp/cc09CpAR.s 			page 36


1071:src/storage.c ****  */
1072:src/storage.c **** 
1073:src/storage.c **** #ifdef DM42
1074:src/storage.c **** 
1075:src/storage.c **** extern void display_current_menu ();
1076:src/storage.c **** 
1077:src/storage.c **** #define DISP_NEW 1
1078:src/storage.c **** #define OVERWRITE_CHECK 1
1079:src/storage.c **** #define NO_DISP_NEW 0
1080:src/storage.c **** #define NO_OVERWRITE_CHECK 0
1081:src/storage.c **** #define WRITE 1
1082:src/storage.c **** #define READ 2
1083:src/storage.c **** 
1084:src/storage.c **** void save_lib_file ( int i ) {
1085:src/storage.c ****   FRESULT f;
1086:src/storage.c ****   int fss;
1087:src/storage.c ****   int data = WRITE;
1088:src/storage.c ****   uint x=0;
1089:src/storage.c **** 
1090:src/storage.c ****   sys_disk_write_enable(1);
1091:src/storage.c ****   if (i == 0) {
1092:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1093:src/storage.c ****     if (f != FR_OK) {
1094:src/storage.c ****       f_close (FPT);
1095:src/storage.c ****       sys_disk_write_enable(0);
1096:src/storage.c ****       DispMsg = "Err slf1";
1097:src/storage.c ****       return;
1098:src/storage.c ****     }
1099:src/storage.c ****   }
1100:src/storage.c ****   else {
1101:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
1102:src/storage.c ****     if (fss != 1) return;
1103:src/storage.c ****   }
1104:src/storage.c ****   // File is now open with correct permissions
1105:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1106:src/storage.c ****   if ( f != FR_OK ) {
1107:src/storage.c ****     DispMsg = "Err slf2";
1108:src/storage.c ****   }
1109:src/storage.c ****   f_close( FPT );
1110:src/storage.c ****   sys_disk_write_enable(0);
1111:src/storage.c **** }
1112:src/storage.c **** 
1113:src/storage.c **** void load_lib_file ( int i ) {
1114:src/storage.c ****   FRESULT f;
1115:src/storage.c ****   int fss;
1116:src/storage.c ****   int data = READ;
1117:src/storage.c ****   uint x=0;
1118:src/storage.c **** 
1119:src/storage.c ****   if (i == 0) {
1120:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
1121:src/storage.c ****     if (f != FR_OK) {
1122:src/storage.c ****       f_close (FPT);
1123:src/storage.c ****       //      DispMsg = "No file?";
1124:src/storage.c ****       return;
1125:src/storage.c ****     }
1126:src/storage.c ****   }
1127:src/storage.c ****   else {
ARM GAS  /tmp/cc09CpAR.s 			page 37


1128:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
1129:src/storage.c ****     if (fss != 1) return;
1130:src/storage.c ****   }
1131:src/storage.c ****   // File is now open with correct permissions
1132:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1133:src/storage.c ****   if ( f != FR_OK ) {
1134:src/storage.c ****     DispMsg = "Err slf2";
1135:src/storage.c ****   }
1136:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1137:src/storage.c ****     DispMsg = "File too big";
1138:src/storage.c ****   }
1139:src/storage.c ****   f_close( FPT );
1140:src/storage.c **** }
1141:src/storage.c **** 
1142:src/storage.c **** void save_ram_file ( int i ) {
1143:src/storage.c ****   FRESULT f;
1144:src/storage.c ****   int fss;
1145:src/storage.c ****   int data = WRITE;
1146:src/storage.c ****   uint x=0;
1147:src/storage.c **** 
1148:src/storage.c ****     process_cmdline_set_lift();
1149:src/storage.c ****     init_state();
1150:src/storage.c ****     checksum_all();
1151:src/storage.c **** 
1152:src/storage.c ****     sys_disk_write_enable(1);
1153:src/storage.c ****     if (i == 0) {
1154:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1155:src/storage.c ****       if (f != FR_OK) {
1156:src/storage.c **** 	f_close (FPT);
1157:src/storage.c **** 	sys_disk_write_enable(0);
1158:src/storage.c **** 	DispMsg = "Err srf1";
1159:src/storage.c **** 	return;
1160:src/storage.c ****       }
1161:src/storage.c ****     }
1162:src/storage.c ****     else {
1163:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
1164:src/storage.c ****       if (fss != 1) return;
1165:src/storage.c ****     }
1166:src/storage.c ****     // File is now open with correct permissions
1167:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1168:src/storage.c ****     if ( f != FR_OK ) {
1169:src/storage.c ****       DispMsg = "Err srf2";
1170:src/storage.c ****     }
1171:src/storage.c ****     f_close( FPT );
1172:src/storage.c ****     sys_disk_write_enable(0);
1173:src/storage.c **** }
1174:src/storage.c **** 
1175:src/storage.c **** int load_ram_file ( int i ) { // this will load backup files too!
1176:src/storage.c ****   FRESULT f;
1177:src/storage.c ****   int fss;
1178:src/storage.c ****   int data = READ;
1179:src/storage.c ****   uint x=0;
1180:src/storage.c ****   
1181:src/storage.c ****   if (i == 0) {
1182:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
1183:src/storage.c ****     if (f != FR_OK) {
1184:src/storage.c ****       f_close (FPT);
ARM GAS  /tmp/cc09CpAR.s 			page 38


1185:src/storage.c ****       //      DispMsg = "No file?";
1186:src/storage.c ****       return 1;
1187:src/storage.c ****     }
1188:src/storage.c ****   }
1189:src/storage.c ****   else {
1190:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
1191:src/storage.c ****     if (fss != 1) return 1;
1192:src/storage.c ****   }
1193:src/storage.c ****   // File is now open with correct permissions
1194:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1195:src/storage.c ****   if ( f != FR_OK ) {
1196:src/storage.c ****     DispMsg = "Err lrf2";
1197:src/storage.c ****       f_close( FPT );
1198:src/storage.c ****       return 1;
1199:src/storage.c ****   }
1200:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1201:src/storage.c ****     DispMsg = "File too big";
1202:src/storage.c ****       f_close( FPT );
1203:src/storage.c ****       return 1;
1204:src/storage.c ****   }
1205:src/storage.c ****   f_close( FPT );
1206:src/storage.c ****   return 0;
1207:src/storage.c **** }
1208:src/storage.c **** 
1209:src/storage.c **** void load_backup_file ( int i ) { // goes into backup!
1210:src/storage.c ****   FRESULT f;
1211:src/storage.c ****   int fss;
1212:src/storage.c ****   int data = READ;
1213:src/storage.c ****   uint x=0;
1214:src/storage.c **** 
1215:src/storage.c ****   if (i == 0) {
1216:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
1217:src/storage.c ****     if (f != FR_OK) {
1218:src/storage.c ****       f_close (FPT);
1219:src/storage.c ****       return;
1220:src/storage.c ****     }
1221:src/storage.c ****   }
1222:src/storage.c ****   else {
1223:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
1224:src/storage.c ****     if (fss != 1) return;
1225:src/storage.c ****   }
1226:src/storage.c ****   // File is now open with correct permissions
1227:src/storage.c ****   f = f_read (FPT, (char *) &BackupFlash, sizeof (BackupFlash), &x);
1228:src/storage.c ****   if ( f != FR_OK ) {
1229:src/storage.c ****     DispMsg = "Err lbf2";
1230:src/storage.c ****   }
1231:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1232:src/storage.c ****     DispMsg = "File too big";
1233:src/storage.c ****   }
1234:src/storage.c ****   f_close( FPT );
1235:src/storage.c **** }
1236:src/storage.c **** 
1237:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
 786              		.loc 1 1237 78 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc09CpAR.s 			page 39


 790              		.loc 1 1237 78 is_stmt 0 view .LVU225
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
1238:src/storage.c ****   FRESULT f;
1239:src/storage.c **** 
1240:src/storage.c ****   if (*(int*)data == WRITE) {
 795              		.loc 1 1240 7 view .LVU226
 796 0002 1368     		ldr	r3, [r2]
 797              		.loc 1 1240 6 view .LVU227
 798 0004 012B     		cmp	r3, #1
1237:src/storage.c ****   FRESULT f;
 799              		.loc 1 1237 78 view .LVU228
 800 0006 0146     		mov	r1, r0
 801              	.LVL85:
1238:src/storage.c ****   FRESULT f;
 802              		.loc 1 1238 3 is_stmt 1 view .LVU229
 803              		.loc 1 1240 3 view .LVU230
 804              		.loc 1 1240 6 is_stmt 0 view .LVU231
 805 0008 0ED0     		beq	.L79
1241:src/storage.c ****     // open file to write
1242:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1243:src/storage.c ****   }
1244:src/storage.c ****   else if (*(int*)data == READ) {
 806              		.loc 1 1244 8 is_stmt 1 view .LVU232
 807              		.loc 1 1244 11 is_stmt 0 view .LVU233
 808 000a 022B     		cmp	r3, #2
 809 000c 07D1     		bne	.L75
1245:src/storage.c ****     // open file to read
1246:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 810              		.loc 1 1246 5 is_stmt 1 view .LVU234
 811              		.loc 1 1246 9 is_stmt 0 view .LVU235
 812 000e 104A     		ldr	r2, .L81
 813              	.LVL86:
 814              		.loc 1 1246 9 view .LVU236
 815 0010 104B     		ldr	r3, .L81+4
 816 0012 5068     		ldr	r0, [r2, #4]
 817              	.LVL87:
 818              		.loc 1 1246 9 view .LVU237
 819 0014 0122     		movs	r2, #1
 820 0016 9847     		blx	r3
 821              	.LVL88:
1247:src/storage.c ****   }
1248:src/storage.c ****   else {
1249:src/storage.c ****     DispMsg = "data=3?";
1250:src/storage.c ****     return 3; // serious error!
1251:src/storage.c ****   }
1252:src/storage.c ****   if (f != FR_OK) {
 822              		.loc 1 1252 3 is_stmt 1 view .LVU238
 823              		.loc 1 1252 6 is_stmt 0 view .LVU239
 824 0018 68B9     		cbnz	r0, .L80
 825              	.L77:
1253:src/storage.c ****     f_close (FPT);
1254:src/storage.c ****     sys_disk_write_enable(0);
1255:src/storage.c ****     DispMsg = "File err";
1256:src/storage.c ****     return 2; // file can't be opened
ARM GAS  /tmp/cc09CpAR.s 			page 40


1257:src/storage.c ****   }
1258:src/storage.c ****   else {
1259:src/storage.c ****     return 1; // file opened successfully
 826              		.loc 1 1259 12 view .LVU240
 827 001a 0120     		movs	r0, #1
 828              	.LVL89:
1260:src/storage.c ****   }
1261:src/storage.c **** }
 829              		.loc 1 1261 1 view .LVU241
 830 001c 08BD     		pop	{r3, pc}
 831              	.LVL90:
 832              	.L75:
1249:src/storage.c ****     return 3; // serious error!
 833              		.loc 1 1249 5 is_stmt 1 view .LVU242
1249:src/storage.c ****     return 3; // serious error!
 834              		.loc 1 1249 13 is_stmt 0 view .LVU243
 835 001e 0E4B     		ldr	r3, .L81+8
 836 0020 0E4A     		ldr	r2, .L81+12
 837              	.LVL91:
1249:src/storage.c ****     return 3; // serious error!
 838              		.loc 1 1249 13 view .LVU244
 839 0022 1A60     		str	r2, [r3]
1250:src/storage.c ****   }
 840              		.loc 1 1250 5 is_stmt 1 view .LVU245
1250:src/storage.c ****   }
 841              		.loc 1 1250 12 is_stmt 0 view .LVU246
 842 0024 0320     		movs	r0, #3
 843              	.LVL92:
 844              		.loc 1 1261 1 view .LVU247
 845 0026 08BD     		pop	{r3, pc}
 846              	.LVL93:
 847              	.L79:
1242:src/storage.c ****   }
 848              		.loc 1 1242 5 is_stmt 1 view .LVU248
1242:src/storage.c ****   }
 849              		.loc 1 1242 9 is_stmt 0 view .LVU249
 850 0028 094A     		ldr	r2, .L81
 851              	.LVL94:
1242:src/storage.c ****   }
 852              		.loc 1 1242 9 view .LVU250
 853 002a 0A4B     		ldr	r3, .L81+4
 854 002c 5068     		ldr	r0, [r2, #4]
 855              	.LVL95:
1242:src/storage.c ****   }
 856              		.loc 1 1242 9 view .LVU251
 857 002e 0B22     		movs	r2, #11
 858 0030 9847     		blx	r3
 859              	.LVL96:
1252:src/storage.c ****     f_close (FPT);
 860              		.loc 1 1252 3 is_stmt 1 view .LVU252
1252:src/storage.c ****     f_close (FPT);
 861              		.loc 1 1252 6 is_stmt 0 view .LVU253
 862 0032 0028     		cmp	r0, #0
 863 0034 F1D0     		beq	.L77
 864              	.L80:
 865              	.LBB52:
 866              	.LBI52:
ARM GAS  /tmp/cc09CpAR.s 			page 41


1237:src/storage.c ****   FRESULT f;
 867              		.loc 1 1237 5 is_stmt 1 view .LVU254
 868              	.LVL97:
 869              	.LBB53:
1253:src/storage.c ****     sys_disk_write_enable(0);
 870              		.loc 1 1253 5 view .LVU255
 871 0036 064A     		ldr	r2, .L81
 872 0038 094B     		ldr	r3, .L81+16
 873 003a 5068     		ldr	r0, [r2, #4]
 874              	.LVL98:
1253:src/storage.c ****     sys_disk_write_enable(0);
 875              		.loc 1 1253 5 is_stmt 0 view .LVU256
 876 003c 9847     		blx	r3
 877              	.LVL99:
1254:src/storage.c ****     DispMsg = "File err";
 878              		.loc 1 1254 5 is_stmt 1 view .LVU257
 879 003e 094B     		ldr	r3, .L81+20
 880 0040 0020     		movs	r0, #0
 881 0042 9847     		blx	r3
 882              	.LVL100:
1255:src/storage.c ****     return 2; // file can't be opened
 883              		.loc 1 1255 5 view .LVU258
1255:src/storage.c ****     return 2; // file can't be opened
 884              		.loc 1 1255 13 is_stmt 0 view .LVU259
 885 0044 044B     		ldr	r3, .L81+8
 886 0046 084A     		ldr	r2, .L81+24
 887 0048 1A60     		str	r2, [r3]
1256:src/storage.c ****   }
 888              		.loc 1 1256 5 is_stmt 1 view .LVU260
 889              	.LVL101:
1255:src/storage.c ****     return 2; // file can't be opened
 890              		.loc 1 1255 13 is_stmt 0 view .LVU261
 891 004a 0220     		movs	r0, #2
 892              	.LBE53:
 893              	.LBE52:
 894              		.loc 1 1261 1 view .LVU262
 895 004c 08BD     		pop	{r3, pc}
 896              	.L82:
 897 004e 00BF     		.align	2
 898              	.L81:
 899 0050 00200010 		.word	268443648
 900 0054 35040008 		.word	134218805
 901 0058 00000000 		.word	DispMsg
 902 005c 00000000 		.word	.LC3
 903 0060 39040008 		.word	134218809
 904 0064 E1030008 		.word	134218721
 905 0068 08000000 		.word	.LC4
 906              		.cfi_endproc
 907              	.LFE38:
 909              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
 910              		.align	2
 911              	.LC5:
 912 0000 63616C6C 		.ascii	"calloc failed\000"
 912      6F632066 
 912      61696C65 
 912      6400
 913              		.section	.text.init_mem,"ax",%progbits
ARM GAS  /tmp/cc09CpAR.s 			page 42


 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	init_mem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	init_mem:
 923              	.LFB3:
  99:src/storage.c ****   char *v;
 924              		.loc 1 99 18 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 100:src/storage.c **** 
 928              		.loc 1 100 3 view .LVU264
 102:src/storage.c ****   if (v == NULL) {
 929              		.loc 1 102 3 view .LVU265
  99:src/storage.c ****   char *v;
 930              		.loc 1 99 18 is_stmt 0 view .LVU266
 931 0000 08B5     		push	{r3, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
 102:src/storage.c ****   if (v == NULL) {
 935              		.loc 1 102 16 view .LVU267
 936 0002 0121     		movs	r1, #1
 937 0004 4FF4A040 		mov	r0, #20480
 938 0008 FFF7FEFF 		bl	calloc
 939              	.LVL102:
 103:src/storage.c ****     perror("calloc failed");
 940              		.loc 1 103 3 is_stmt 1 view .LVU268
 103:src/storage.c ****     perror("calloc failed");
 941              		.loc 1 103 6 is_stmt 0 view .LVU269
 942 000c 50B1     		cbz	r0, .L86
 107:src/storage.c ****   v += RAM_SIZE;
 943              		.loc 1 107 3 is_stmt 1 view .LVU270
 107:src/storage.c ****   v += RAM_SIZE;
 944              		.loc 1 107 12 is_stmt 0 view .LVU271
 945 000e 0849     		ldr	r1, .L87
 109:src/storage.c ****   v += RAM_SIZE;
 946              		.loc 1 109 14 view .LVU272
 947 0010 084A     		ldr	r2, .L87+4
 111:src/storage.c **** }
 948              		.loc 1 111 15 view .LVU273
 949 0012 094B     		ldr	r3, .L87+8
 107:src/storage.c ****   v += RAM_SIZE;
 950              		.loc 1 107 12 view .LVU274
 951 0014 0860     		str	r0, [r1]
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 952              		.loc 1 108 3 is_stmt 1 view .LVU275
 953              	.LVL103:
 109:src/storage.c ****   v += RAM_SIZE;
 954              		.loc 1 109 3 view .LVU276
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 955              		.loc 1 108 5 is_stmt 0 view .LVU277
 956 0016 00F50061 		add	r1, r0, #2048
ARM GAS  /tmp/cc09CpAR.s 			page 43


 957              	.LVL104:
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 958              		.loc 1 110 5 view .LVU278
 959 001a 00F58050 		add	r0, r0, #4096
 109:src/storage.c ****   v += RAM_SIZE;
 960              		.loc 1 109 14 view .LVU279
 961 001e 1160     		str	r1, [r2]
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 962              		.loc 1 110 3 is_stmt 1 view .LVU280
 963              	.LVL105:
 111:src/storage.c **** }
 964              		.loc 1 111 3 view .LVU281
 111:src/storage.c **** }
 965              		.loc 1 111 15 is_stmt 0 view .LVU282
 966 0020 1860     		str	r0, [r3]
 112:src/storage.c **** 
 967              		.loc 1 112 1 view .LVU283
 968 0022 08BD     		pop	{r3, pc}
 969              	.LVL106:
 970              	.L86:
 104:src/storage.c ****     return;
 971              		.loc 1 104 5 is_stmt 1 view .LVU284
 112:src/storage.c **** 
 972              		.loc 1 112 1 is_stmt 0 view .LVU285
 973 0024 BDE80840 		pop	{r3, lr}
 974              		.cfi_restore 14
 975              		.cfi_restore 3
 976              		.cfi_def_cfa_offset 0
 104:src/storage.c ****     return;
 977              		.loc 1 104 5 view .LVU286
 978 0028 0448     		ldr	r0, .L87+12
 979              	.LVL107:
 104:src/storage.c ****     return;
 980              		.loc 1 104 5 view .LVU287
 981 002a FFF7FEBF 		b	perror
 982              	.LVL108:
 983              	.L88:
 984 002e 00BF     		.align	2
 985              	.L87:
 986 0030 00000000 		.word	main_ram
 987 0034 00000000 		.word	backup_ram
 988 0038 00000000 		.word	library_ram
 989 003c 00000000 		.word	.LC5
 990              		.cfi_endproc
 991              	.LFE3:
 993              		.section	.text.crc16,"ax",%progbits
 994              		.align	1
 995              		.p2align 2,,3
 996              		.global	crc16
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	crc16:
 1003              	.LVL109:
 1004              	.LFB4:
 157:src/storage.c **** 	unsigned short int crc = 0x5aa5;
ARM GAS  /tmp/cc09CpAR.s 			page 44


 1005              		.loc 1 157 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1010              		.loc 1 158 2 view .LVU289
 159:src/storage.c **** 	unsigned int i;
 1011              		.loc 1 159 2 view .LVU290
 160:src/storage.c **** 
 1012              		.loc 1 160 2 view .LVU291
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1013              		.loc 1 162 2 view .LVU292
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1014              		.loc 1 162 15 view .LVU293
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1015              		.loc 1 162 2 is_stmt 0 view .LVU294
 1016 0000 B1B1     		cbz	r1, .L92
 1017 0002 0144     		add	r1, r1, r0
 1018              	.LVL110:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1019              		.loc 1 158 21 view .LVU295
 1020 0004 45F6A523 		movw	r3, #23205
 1021              	.LVL111:
 1022              	.L91:
 163:src/storage.c **** 		crc ^= *d++;
 1023              		.loc 1 163 3 is_stmt 1 discriminator 3 view .LVU296
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1024              		.loc 1 164 10 is_stmt 0 discriminator 3 view .LVU297
 1025 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1026              	.LVL112:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1027              		.loc 1 164 10 discriminator 3 view .LVU298
 1028 000c 5BBA     		rev16	r3, r3
 1029              	.LVL113:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1030              		.loc 1 164 10 discriminator 3 view .LVU299
 1031 000e 9BB2     		uxth	r3, r3
 1032              	.LVL114:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1033              		.loc 1 164 3 is_stmt 1 discriminator 3 view .LVU300
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1034              		.loc 1 164 7 is_stmt 0 discriminator 3 view .LVU301
 1035 0010 5340     		eors	r3, r3, r2
 1036              	.LVL115:
 165:src/storage.c **** 		crc ^= crc << 12;
 1037              		.loc 1 165 3 is_stmt 1 discriminator 3 view .LVU302
 165:src/storage.c **** 		crc ^= crc << 12;
 1038              		.loc 1 165 7 is_stmt 0 discriminator 3 view .LVU303
 1039 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1040 0016 5340     		eors	r3, r3, r2
 1041              	.LVL116:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1042              		.loc 1 166 3 is_stmt 1 discriminator 3 view .LVU304
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1043              		.loc 1 166 7 is_stmt 0 discriminator 3 view .LVU305
 1044 0018 83EA0332 		eor	r2, r3, r3, lsl #12
ARM GAS  /tmp/cc09CpAR.s 			page 45


 1045              	.LVL117:
 167:src/storage.c **** 	}
 1046              		.loc 1 167 3 is_stmt 1 discriminator 3 view .LVU306
 167:src/storage.c **** 	}
 1047              		.loc 1 167 25 is_stmt 0 discriminator 3 view .LVU307
 1048 001c 5301     		lsls	r3, r2, #5
 1049 001e 03F4FF53 		and	r3, r3, #8160
 167:src/storage.c **** 	}
 1050              		.loc 1 167 7 discriminator 3 view .LVU308
 1051 0022 92B2     		uxth	r2, r2
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1052              		.loc 1 162 2 discriminator 3 view .LVU309
 1053 0024 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1054              		.loc 1 167 7 discriminator 3 view .LVU310
 1055 0026 83EA0203 		eor	r3, r3, r2
 1056              	.LVL118:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1057              		.loc 1 162 27 is_stmt 1 discriminator 3 view .LVU311
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1058              		.loc 1 162 15 discriminator 3 view .LVU312
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1059              		.loc 1 162 2 is_stmt 0 discriminator 3 view .LVU313
 1060 002a EDD1     		bne	.L91
 169:src/storage.c **** }
 1061              		.loc 1 169 2 is_stmt 1 view .LVU314
 170:src/storage.c **** 
 1062              		.loc 1 170 1 is_stmt 0 view .LVU315
 1063 002c 1846     		mov	r0, r3
 1064              	.LVL119:
 170:src/storage.c **** 
 1065              		.loc 1 170 1 view .LVU316
 1066 002e 7047     		bx	lr
 1067              	.LVL120:
 1068              	.L92:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1069              		.loc 1 158 21 view .LVU317
 1070 0030 45F6A523 		movw	r3, #23205
 169:src/storage.c **** }
 1071              		.loc 1 169 2 is_stmt 1 view .LVU318
 170:src/storage.c **** 
 1072              		.loc 1 170 1 is_stmt 0 view .LVU319
 1073 0034 1846     		mov	r0, r3
 1074              	.LVL121:
 170:src/storage.c **** 
 1075              		.loc 1 170 1 view .LVU320
 1076 0036 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE4:
 1080              		.section	.text.checksum_program,"ax",%progbits
 1081              		.align	1
 1082              		.p2align 2,,3
 1083              		.global	checksum_program
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc09CpAR.s 			page 46


 1089              	checksum_program:
 1090              	.LFB6:
 193:src/storage.c **** 	update_program_bounds( 1 );
 1091              		.loc 1 193 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1095              		.loc 1 194 2 view .LVU322
 193:src/storage.c **** 	update_program_bounds( 1 );
 1096              		.loc 1 193 1 is_stmt 0 view .LVU323
 1097 0000 08B5     		push	{r3, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1101              		.loc 1 194 2 view .LVU324
 1102 0002 0120     		movs	r0, #1
 1103 0004 FFF7FEFF 		bl	update_program_bounds
 1104              	.LVL122:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1105              		.loc 1 195 2 is_stmt 1 view .LVU325
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1106              		.loc 1 195 16 is_stmt 0 view .LVU326
 1107 0008 FFF7FEFF 		bl	get_current_prog
 1108              	.LVL123:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1109              		.loc 1 195 36 view .LVU327
 1110 000c 124B     		ldr	r3, .L100
 1111 000e 1B68     		ldr	r3, [r3]
 1112 0010 B3F8EE17 		ldrh	r1, [r3, #2030]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1113              		.loc 1 195 46 view .LVU328
 1114 0014 B3F8EC37 		ldrh	r3, [r3, #2028]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1115              		.loc 1 195 44 view .LVU329
 1116 0018 C91A     		subs	r1, r1, r3
 1117              	.LVL124:
 1118              	.LBB54:
 1119              	.LBI54:
 156:src/storage.c **** {
 1120              		.loc 1 156 20 is_stmt 1 view .LVU330
 1121              	.LBB55:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1122              		.loc 1 158 2 view .LVU331
 159:src/storage.c **** 	unsigned int i;
 1123              		.loc 1 159 2 view .LVU332
 160:src/storage.c **** 
 1124              		.loc 1 160 2 view .LVU333
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1125              		.loc 1 162 2 view .LVU334
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1126              		.loc 1 162 15 view .LVU335
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1127              		.loc 1 162 2 is_stmt 0 view .LVU336
 1128 001a 4B1C     		adds	r3, r1, #1
 1129              	.LVL125:
ARM GAS  /tmp/cc09CpAR.s 			page 47


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1130              		.loc 1 162 2 view .LVU337
 1131 001c 17D0     		beq	.L97
 1132 001e 0131     		adds	r1, r1, #1
 1133 0020 0144     		add	r1, r1, r0
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1134              		.loc 1 158 21 view .LVU338
 1135 0022 45F6A523 		movw	r3, #23205
 1136              	.LVL126:
 1137              	.L96:
 163:src/storage.c **** 		crc ^= *d++;
 1138              		.loc 1 163 3 is_stmt 1 view .LVU339
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 164 10 is_stmt 0 view .LVU340
 1140 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1141              	.LVL127:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1142              		.loc 1 164 10 view .LVU341
 1143 002a 5BBA     		rev16	r3, r3
 1144              	.LVL128:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1145              		.loc 1 164 10 view .LVU342
 1146 002c 9BB2     		uxth	r3, r3
 1147              	.LVL129:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1148              		.loc 1 164 3 is_stmt 1 view .LVU343
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1149              		.loc 1 164 7 is_stmt 0 view .LVU344
 1150 002e 5340     		eors	r3, r3, r2
 1151              	.LVL130:
 165:src/storage.c **** 		crc ^= crc << 12;
 1152              		.loc 1 165 3 is_stmt 1 view .LVU345
 165:src/storage.c **** 		crc ^= crc << 12;
 1153              		.loc 1 165 7 is_stmt 0 view .LVU346
 1154 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1155 0034 5340     		eors	r3, r3, r2
 1156              	.LVL131:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1157              		.loc 1 166 3 is_stmt 1 view .LVU347
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1158              		.loc 1 166 7 is_stmt 0 view .LVU348
 1159 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1160              	.LVL132:
 167:src/storage.c **** 	}
 1161              		.loc 1 167 3 is_stmt 1 view .LVU349
 167:src/storage.c **** 	}
 1162              		.loc 1 167 25 is_stmt 0 view .LVU350
 1163 003a 5A01     		lsls	r2, r3, #5
 1164 003c 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1165              		.loc 1 167 7 view .LVU351
 1166 0040 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1167              		.loc 1 162 2 view .LVU352
 1168 0042 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1169              		.loc 1 167 7 view .LVU353
ARM GAS  /tmp/cc09CpAR.s 			page 48


 1170 0044 83EA0203 		eor	r3, r3, r2
 1171              	.LVL133:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1172              		.loc 1 162 27 is_stmt 1 view .LVU354
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1173              		.loc 1 162 15 view .LVU355
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1174              		.loc 1 162 2 is_stmt 0 view .LVU356
 1175 0048 EDD1     		bne	.L96
 169:src/storage.c **** }
 1176              		.loc 1 169 2 is_stmt 1 view .LVU357
 1177              	.LVL134:
 169:src/storage.c **** }
 1178              		.loc 1 169 2 is_stmt 0 view .LVU358
 1179              	.LBE55:
 1180              	.LBE54:
 197:src/storage.c **** 
 1181              		.loc 1 197 1 view .LVU359
 1182 004a 1846     		mov	r0, r3
 1183 004c 08BD     		pop	{r3, pc}
 1184              	.LVL135:
 1185              	.L97:
 1186              	.LBB57:
 1187              	.LBB56:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1188              		.loc 1 158 21 view .LVU360
 1189 004e 45F6A523 		movw	r3, #23205
 1190              	.LVL136:
 169:src/storage.c **** }
 1191              		.loc 1 169 2 is_stmt 1 view .LVU361
 169:src/storage.c **** }
 1192              		.loc 1 169 2 is_stmt 0 view .LVU362
 1193              	.LBE56:
 1194              	.LBE57:
 197:src/storage.c **** 
 1195              		.loc 1 197 1 view .LVU363
 1196 0052 1846     		mov	r0, r3
 1197 0054 08BD     		pop	{r3, pc}
 1198              	.L101:
 1199 0056 00BF     		.align	2
 1200              	.L100:
 1201 0058 00000000 		.word	main_ram
 1202              		.cfi_endproc
 1203              	.LFE6:
 1205              		.section	.text.checksum_ram,"ax",%progbits
 1206              		.align	1
 1207              		.p2align 2,,3
 1208              		.global	checksum_ram
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	checksum_ram:
 1215              	.LFB7:
 205:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1216              		.loc 1 205 1 is_stmt 1 view -0
 1217              		.cfi_startproc
ARM GAS  /tmp/cc09CpAR.s 			page 49


 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 206:src/storage.c **** 			      Crc, &Crc );
 1221              		.loc 1 206 2 view .LVU365
 206:src/storage.c **** 			      Crc, &Crc );
 1222              		.loc 1 206 9 is_stmt 0 view .LVU366
 1223 0000 044B     		ldr	r3, .L103
 1224 0002 1868     		ldr	r0, [r3]
 1225 0004 40F2FE71 		movw	r1, #2046
 1226 0008 B0F8FE27 		ldrh	r2, [r0, #2046]
 1227 000c 4318     		adds	r3, r0, r1
 1228 000e FFF7FEBF 		b	test_checksum
 1229              	.LVL137:
 1230              	.L104:
 1231 0012 00BF     		.align	2
 1232              	.L103:
 1233 0014 00000000 		.word	main_ram
 1234              		.cfi_endproc
 1235              	.LFE7:
 1237              		.section	.text.checksum_backup,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	checksum_backup
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	checksum_backup:
 1247              	.LFB8:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1248              		.loc 1 216 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1253              		.loc 1 217 2 view .LVU368
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1254              		.loc 1 217 9 is_stmt 0 view .LVU369
 1255 0000 144B     		ldr	r3, .L111
 1256 0002 1968     		ldr	r1, [r3]
 1257 0004 B1F8FE07 		ldrh	r0, [r1, #2046]
 1258              	.LVL138:
 1259              	.LBB58:
 1260              	.LBI58:
 177:src/storage.c **** {
 1261              		.loc 1 177 12 is_stmt 1 view .LVU370
 1262              	.LBB59:
 179:src/storage.c **** 	crc = crc16( data, length );
 1263              		.loc 1 179 2 view .LVU371
 180:src/storage.c **** 	
 1264              		.loc 1 180 2 view .LVU372
 1265              	.LBB60:
 1266              	.LBI60:
 156:src/storage.c **** {
 1267              		.loc 1 156 20 view .LVU373
ARM GAS  /tmp/cc09CpAR.s 			page 50


 1268              	.LBB61:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1269              		.loc 1 158 2 view .LVU374
 159:src/storage.c **** 	unsigned int i;
 1270              		.loc 1 159 2 view .LVU375
 160:src/storage.c **** 
 1271              		.loc 1 160 2 view .LVU376
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1272              		.loc 1 162 2 view .LVU377
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1273              		.loc 1 162 15 view .LVU378
 1274              	.LBE61:
 1275              	.LBE60:
 1276              	.LBE59:
 1277              	.LBE58:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1278              		.loc 1 216 1 is_stmt 0 view .LVU379
 1279 0008 10B4     		push	{r4}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 4, -4
 1282              	.LBB66:
 1283              	.LBB64:
 1284              	.LBB63:
 1285              	.LBB62:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1286              		.loc 1 158 21 view .LVU380
 1287 000a 45F6A523 		movw	r3, #23205
 1288 000e 01F2FE74 		addw	r4, r1, #2046
 1289              	.LVL139:
 1290              	.L106:
 163:src/storage.c **** 		crc ^= *d++;
 1291              		.loc 1 163 3 is_stmt 1 view .LVU381
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1292              		.loc 1 164 10 is_stmt 0 view .LVU382
 1293 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1294              	.LVL140:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1295              		.loc 1 164 10 view .LVU383
 1296 0016 5BBA     		rev16	r3, r3
 1297              	.LVL141:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1298              		.loc 1 164 10 view .LVU384
 1299 0018 9BB2     		uxth	r3, r3
 1300              	.LVL142:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1301              		.loc 1 164 3 is_stmt 1 view .LVU385
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1302              		.loc 1 164 7 is_stmt 0 view .LVU386
 1303 001a 5340     		eors	r3, r3, r2
 1304              	.LVL143:
 165:src/storage.c **** 		crc ^= crc << 12;
 1305              		.loc 1 165 3 is_stmt 1 view .LVU387
 165:src/storage.c **** 		crc ^= crc << 12;
 1306              		.loc 1 165 7 is_stmt 0 view .LVU388
 1307 001c C3F30312 		ubfx	r2, r3, #4, #4
 1308 0020 5340     		eors	r3, r3, r2
 1309              	.LVL144:
ARM GAS  /tmp/cc09CpAR.s 			page 51


 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1310              		.loc 1 166 3 is_stmt 1 view .LVU389
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1311              		.loc 1 166 7 is_stmt 0 view .LVU390
 1312 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1313              	.LVL145:
 167:src/storage.c **** 	}
 1314              		.loc 1 167 3 is_stmt 1 view .LVU391
 167:src/storage.c **** 	}
 1315              		.loc 1 167 25 is_stmt 0 view .LVU392
 1316 0026 5A01     		lsls	r2, r3, #5
 1317 0028 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1318              		.loc 1 167 7 view .LVU393
 1319 002c 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1320              		.loc 1 162 2 view .LVU394
 1321 002e 8C42     		cmp	r4, r1
 167:src/storage.c **** 	}
 1322              		.loc 1 167 7 view .LVU395
 1323 0030 83EA0203 		eor	r3, r3, r2
 1324              	.LVL146:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1325              		.loc 1 162 27 is_stmt 1 view .LVU396
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1326              		.loc 1 162 15 view .LVU397
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1327              		.loc 1 162 2 is_stmt 0 view .LVU398
 1328 0034 EDD1     		bne	.L106
 169:src/storage.c **** }
 1329              		.loc 1 169 2 is_stmt 1 view .LVU399
 1330              	.LVL147:
 169:src/storage.c **** }
 1331              		.loc 1 169 2 is_stmt 0 view .LVU400
 1332              	.LBE62:
 1333              	.LBE63:
 182:src/storage.c **** 		*pcrc = crc;
 1334              		.loc 1 182 2 is_stmt 1 view .LVU401
 185:src/storage.c **** }
 1335              		.loc 1 185 2 view .LVU402
 185:src/storage.c **** }
 1336              		.loc 1 185 23 is_stmt 0 view .LVU403
 1337 0036 9842     		cmp	r0, r3
 1338 0038 07D0     		beq	.L108
 1339 003a 4AF23C53 		movw	r3, #42300
 1340              	.LVL148:
 185:src/storage.c **** }
 1341              		.loc 1 185 23 view .LVU404
 1342 003e C01A     		subs	r0, r0, r3
 1343              	.LVL149:
 185:src/storage.c **** }
 1344              		.loc 1 185 23 view .LVU405
 1345 0040 18BF     		it	ne
 1346 0042 0120     		movne	r0, #1
 1347              	.LVL150:
 185:src/storage.c **** }
 1348              		.loc 1 185 23 view .LVU406
ARM GAS  /tmp/cc09CpAR.s 			page 52


 1349              	.LBE64:
 1350              	.LBE66:
 219:src/storage.c **** 
 1351              		.loc 1 219 1 view .LVU407
 1352 0044 5DF8044B 		ldr	r4, [sp], #4
 1353              		.cfi_remember_state
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL151:
 219:src/storage.c **** 
 1357              		.loc 1 219 1 view .LVU408
 1358 0048 7047     		bx	lr
 1359              	.LVL152:
 1360              	.L108:
 1361              		.cfi_restore_state
 1362              	.LBB67:
 1363              	.LBB65:
 185:src/storage.c **** }
 1364              		.loc 1 185 23 view .LVU409
 1365 004a 0020     		movs	r0, #0
 1366              	.LVL153:
 185:src/storage.c **** }
 1367              		.loc 1 185 23 view .LVU410
 1368              	.LBE65:
 1369              	.LBE67:
 219:src/storage.c **** 
 1370              		.loc 1 219 1 view .LVU411
 1371 004c 5DF8044B 		ldr	r4, [sp], #4
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374 0050 7047     		bx	lr
 1375              	.L112:
 1376 0052 00BF     		.align	2
 1377              	.L111:
 1378 0054 00000000 		.word	backup_ram
 1379              		.cfi_endproc
 1380              	.LFE8:
 1382              		.section	.text.clpall,"ax",%progbits
 1383              		.align	1
 1384              		.p2align 2,,3
 1385              		.global	clpall
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	clpall:
 1392              	.LFB11:
 248:src/storage.c **** 	clrretstk_pc();
 1393              		.loc 1 248 1 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 249:src/storage.c **** 	stoend();
 1397              		.loc 1 249 2 view .LVU413
 248:src/storage.c **** 	clrretstk_pc();
 1398              		.loc 1 248 1 is_stmt 0 view .LVU414
 1399 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc09CpAR.s 			page 53


 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 3, -8
 1402              		.cfi_offset 14, -4
 249:src/storage.c **** 	stoend();
 1403              		.loc 1 249 2 view .LVU415
 1404 0002 FFF7FEFF 		bl	clrretstk_pc
 1405              	.LVL154:
 250:src/storage.c **** }
 1406              		.loc 1 250 2 is_stmt 1 view .LVU416
 1407              	.LBB68:
 1408              	.LBI68:
 237:src/storage.c **** {
 1409              		.loc 1 237 13 view .LVU417
 1410              	.LBB69:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1411              		.loc 1 239 2 view .LVU418
 1412 0006 044B     		ldr	r3, .L115
 1413 0008 1B68     		ldr	r3, [r3]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1414              		.loc 1 239 11 is_stmt 0 view .LVU419
 1415 000a 0121     		movs	r1, #1
 240:src/storage.c **** }
 1416              		.loc 1 240 12 view .LVU420
 1417 000c 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1418              		.loc 1 239 11 view .LVU421
 1419 0010 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1420              		.loc 1 240 2 is_stmt 1 view .LVU422
 240:src/storage.c **** }
 1421              		.loc 1 240 12 is_stmt 0 view .LVU423
 1422 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1423              	.LBE69:
 1424              	.LBE68:
 251:src/storage.c **** 
 1425              		.loc 1 251 1 view .LVU424
 1426 0014 08BD     		pop	{r3, pc}
 1427              	.L116:
 1428 0016 00BF     		.align	2
 1429              	.L115:
 1430 0018 00000000 		.word	main_ram
 1431              		.cfi_endproc
 1432              	.LFE11:
 1434              		.section	.text.clrall,"ax",%progbits
 1435              		.align	1
 1436              		.p2align 2,,3
 1437              		.global	clrall
 1438              		.syntax unified
 1439              		.thumb
 1440              		.thumb_func
 1441              		.fpu fpv4-sp-d16
 1443              	clrall:
 1444              	.LFB14:
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1445              		.loc 1 301 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc09CpAR.s 			page 54


 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 302:src/storage.c **** 	xeq_init_contexts();
 1449              		.loc 1 302 2 view .LVU426
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1450              		.loc 1 301 1 is_stmt 0 view .LVU427
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 302:src/storage.c **** 	xeq_init_contexts();
 1455              		.loc 1 302 10 view .LVU428
 1456 0002 124C     		ldr	r4, .L119
 1457 0004 2368     		ldr	r3, [r4]
 1458 0006 6422     		movs	r2, #100
 1459 0008 83F8CF27 		strb	r2, [r3, #1999]
 303:src/storage.c **** 	clrreg( OP_CLREG );
 1460              		.loc 1 303 2 is_stmt 1 view .LVU429
 1461 000c FFF7FEFF 		bl	xeq_init_contexts
 1462              	.LVL155:
 304:src/storage.c **** 	clrstk( OP_CLSTK );
 1463              		.loc 1 304 2 view .LVU430
 1464 0010 3E20     		movs	r0, #62
 1465 0012 FFF7FEFF 		bl	clrreg
 1466              	.LVL156:
 305:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1467              		.loc 1 305 2 view .LVU431
 1468 0016 4020     		movs	r0, #64
 1469 0018 FFF7FEFF 		bl	clrstk
 1470              	.LVL157:
 306:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1471              		.loc 1 306 2 view .LVU432
 1472 001c 7420     		movs	r0, #116
 1473 001e FFF7FEFF 		bl	clralpha
 1474              	.LVL158:
 307:src/storage.c **** 	clpall();
 1475              		.loc 1 307 2 view .LVU433
 1476 0022 4520     		movs	r0, #69
 1477 0024 FFF7FEFF 		bl	clrflags
 1478              	.LVL159:
 308:src/storage.c **** 
 1479              		.loc 1 308 2 view .LVU434
 1480              	.LBB70:
 1481              	.LBI70:
 247:src/storage.c **** {
 1482              		.loc 1 247 6 view .LVU435
 1483              	.LBB71:
 249:src/storage.c **** 	stoend();
 1484              		.loc 1 249 2 view .LVU436
 1485 0028 FFF7FEFF 		bl	clrretstk_pc
 1486              	.LVL160:
 250:src/storage.c **** }
 1487              		.loc 1 250 2 view .LVU437
 1488              	.LBB72:
 1489              	.LBI72:
 237:src/storage.c **** {
 1490              		.loc 1 237 13 view .LVU438
 1491              	.LBB73:
ARM GAS  /tmp/cc09CpAR.s 			page 55


 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1492              		.loc 1 239 2 view .LVU439
 1493 002c 2368     		ldr	r3, [r4]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1494              		.loc 1 239 11 is_stmt 0 view .LVU440
 1495 002e 0121     		movs	r1, #1
 240:src/storage.c **** }
 1496              		.loc 1 240 12 view .LVU441
 1497 0030 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1498              		.loc 1 239 11 view .LVU442
 1499 0034 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1500              		.loc 1 240 2 is_stmt 1 view .LVU443
 240:src/storage.c **** }
 1501              		.loc 1 240 12 is_stmt 0 view .LVU444
 1502 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.LBE73:
 1504              	.LBE72:
 1505              	.LBE71:
 1506              	.LBE70:
 310:src/storage.c **** 	State2.test = TST_NONE;
 1507              		.loc 1 310 2 is_stmt 1 view .LVU445
 1508 0038 FFF7FEFF 		bl	reset_shift
 1509              	.LVL161:
 311:src/storage.c **** 
 1510              		.loc 1 311 2 view .LVU446
 311:src/storage.c **** 
 1511              		.loc 1 311 14 is_stmt 0 view .LVU447
 1512 003c 0449     		ldr	r1, .L119+4
 313:src/storage.c **** }
 1513              		.loc 1 313 10 view .LVU448
 1514 003e 054B     		ldr	r3, .L119+8
 311:src/storage.c **** 
 1515              		.loc 1 311 14 view .LVU449
 1516 0040 0720     		movs	r0, #7
 313:src/storage.c **** }
 1517              		.loc 1 313 10 view .LVU450
 1518 0042 0022     		movs	r2, #0
 311:src/storage.c **** 
 1519              		.loc 1 311 14 view .LVU451
 1520 0044 C873     		strb	r0, [r1, #15]
 313:src/storage.c **** }
 1521              		.loc 1 313 2 is_stmt 1 view .LVU452
 313:src/storage.c **** }
 1522              		.loc 1 313 10 is_stmt 0 view .LVU453
 1523 0046 1A60     		str	r2, [r3]
 314:src/storage.c **** 
 1524              		.loc 1 314 1 view .LVU454
 1525 0048 10BD     		pop	{r4, pc}
 1526              	.L120:
 1527 004a 00BF     		.align	2
 1528              	.L119:
 1529 004c 00000000 		.word	main_ram
 1530 0050 00000000 		.word	StateWhileOn
 1531 0054 00000000 		.word	DispMsg
 1532              		.cfi_endproc
ARM GAS  /tmp/cc09CpAR.s 			page 56


 1533              	.LFE14:
 1535              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1536              		.align	2
 1537              	.LC6:
 1538 0000 45726173 		.ascii	"Erased\000"
 1538      656400
 1539              		.section	.text.reset,"ax",%progbits
 1540              		.align	1
 1541              		.p2align 2,,3
 1542              		.global	reset
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	reset:
 1549              	.LFB15:
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1550              		.loc 1 321 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 322:src/storage.c **** 	clrall();
 1554              		.loc 1 322 3 view .LVU456
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1555              		.loc 1 321 1 is_stmt 0 view .LVU457
 1556 0000 10B5     		push	{r4, lr}
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 4, -8
 1559              		.cfi_offset 14, -4
 322:src/storage.c **** 	clrall();
 1560              		.loc 1 322 3 view .LVU458
 1561 0002 0B4C     		ldr	r4, .L123
 1562 0004 4FF40062 		mov	r2, #2048
 1563 0008 0021     		movs	r1, #0
 1564 000a 2068     		ldr	r0, [r4]
 1565 000c FFF7FEFF 		bl	xset
 1566              	.LVL162:
 323:src/storage.c **** 	init_state();
 1567              		.loc 1 323 2 is_stmt 1 view .LVU459
 1568 0010 FFF7FEFF 		bl	clrall
 1569              	.LVL163:
 324:src/storage.c **** 	UState.contrast = 6;
 1570              		.loc 1 324 2 view .LVU460
 1571 0014 FFF7FEFF 		bl	init_state
 1572              	.LVL164:
 325:src/storage.c **** #ifdef INFRARED
 1573              		.loc 1 325 2 view .LVU461
 325:src/storage.c **** #ifdef INFRARED
 1574              		.loc 1 325 18 is_stmt 0 view .LVU462
 1575 0018 2368     		ldr	r3, [r4]
 329:src/storage.c **** }
 1576              		.loc 1 329 10 view .LVU463
 1577 001a 0649     		ldr	r1, .L123+4
 325:src/storage.c **** #ifdef INFRARED
 1578              		.loc 1 325 18 view .LVU464
 1579 001c 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 329:src/storage.c **** }
ARM GAS  /tmp/cc09CpAR.s 			page 57


 1580              		.loc 1 329 10 view .LVU465
 1581 0020 0548     		ldr	r0, .L123+8
 1582 0022 0860     		str	r0, [r1]
 325:src/storage.c **** #ifdef INFRARED
 1583              		.loc 1 325 18 view .LVU466
 1584 0024 0621     		movs	r1, #6
 1585 0026 61F30302 		bfi	r2, r1, #0, #4
 1586 002a 83F8E427 		strb	r2, [r3, #2020]
 329:src/storage.c **** }
 1587              		.loc 1 329 2 is_stmt 1 view .LVU467
 330:src/storage.c **** 
 1588              		.loc 1 330 1 is_stmt 0 view .LVU468
 1589 002e 10BD     		pop	{r4, pc}
 1590              	.L124:
 1591              		.align	2
 1592              	.L123:
 1593 0030 00000000 		.word	main_ram
 1594 0034 00000000 		.word	DispMsg
 1595 0038 00000000 		.word	.LC6
 1596              		.cfi_endproc
 1597              	.LFE15:
 1599              		.section	.text.stoprog,"ax",%progbits
 1600              		.align	1
 1601              		.p2align 2,,3
 1602              		.global	stoprog
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1606              		.fpu fpv4-sp-d16
 1608              	stoprog:
 1609              	.LVL165:
 1610              	.LFB16:
 336:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1611              		.loc 1 336 26 is_stmt 1 view -0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 337:src/storage.c **** 	int i;
 1615              		.loc 1 337 2 view .LVU470
 336:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1616              		.loc 1 336 26 is_stmt 0 view .LVU471
 1617 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1618              		.cfi_def_cfa_offset 32
 1619              		.cfi_offset 3, -32
 1620              		.cfi_offset 4, -28
 1621              		.cfi_offset 5, -24
 1622              		.cfi_offset 6, -20
 1623              		.cfi_offset 7, -16
 1624              		.cfi_offset 8, -12
 1625              		.cfi_offset 9, -8
 1626              		.cfi_offset 14, -4
 339:src/storage.c **** 
 1627              		.loc 1 339 20 view .LVU472
 1628 0004 374F     		ldr	r7, .L145
 337:src/storage.c **** 	int i;
 1629              		.loc 1 337 18 view .LVU473
 1630 0006 00F47046 		and	r6, r0, #61440
ARM GAS  /tmp/cc09CpAR.s 			page 58


 339:src/storage.c **** 
 1631              		.loc 1 339 20 view .LVU474
 1632 000a 3B68     		ldr	r3, [r7]
 337:src/storage.c **** 	int i;
 1633              		.loc 1 337 33 view .LVU475
 1634 000c B6F5704F 		cmp	r6, #61440
 339:src/storage.c **** 
 1635              		.loc 1 339 20 view .LVU476
 1636 0010 B3F8E057 		ldrh	r5, [r3, #2016]
 1637              	.LVL166:
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1638              		.loc 1 341 2 is_stmt 1 view .LVU477
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1639              		.loc 1 341 5 is_stmt 0 view .LVU478
 1640 0014 5B88     		ldrh	r3, [r3, #2]
 336:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1641              		.loc 1 336 26 view .LVU479
 1642 0016 0446     		mov	r4, r0
 337:src/storage.c **** 	int i;
 1643              		.loc 1 337 33 view .LVU480
 1644 0018 57D0     		beq	.L126
 1645              	.LVL167:
 338:src/storage.c **** 	unsigned int pc = state_pc();
 1646              		.loc 1 338 2 is_stmt 1 discriminator 4 view .LVU481
 339:src/storage.c **** 
 1647              		.loc 1 339 2 discriminator 4 view .LVU482
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1648              		.loc 1 341 5 is_stmt 0 discriminator 4 view .LVU483
 1649 001a AB42     		cmp	r3, r5
 337:src/storage.c **** 	int i;
 1650              		.loc 1 337 33 discriminator 4 view .LVU484
 1651 001c 4FF00108 		mov	r8, #1
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1652              		.loc 1 341 5 discriminator 4 view .LVU485
 1653 0020 44D0     		beq	.L141
 1654              	.LVL168:
 1655              	.L127:
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1656              		.loc 1 344 2 is_stmt 1 view .LVU486
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1657              		.loc 1 344 5 is_stmt 0 view .LVU487
 1658 0022 15F47049 		ands	r9, r5, #61440
 1659 0026 4BD1     		bne	.L142
 1660              	.LVL169:
 1661              	.L128:
 348:src/storage.c **** 	xeq_init_contexts();
 1662              		.loc 1 348 2 is_stmt 1 view .LVU488
 1663 0028 FFF7FEFF 		bl	clrretstk
 1664              	.LVL170:
 349:src/storage.c **** 	if ( ProgFree < off ) {
 1665              		.loc 1 349 2 view .LVU489
 1666 002c FFF7FEFF 		bl	xeq_init_contexts
 1667              	.LVL171:
 350:src/storage.c **** 		return;
 1668              		.loc 1 350 2 view .LVU490
 350:src/storage.c **** 		return;
 1669              		.loc 1 350 16 is_stmt 0 view .LVU491
ARM GAS  /tmp/cc09CpAR.s 			page 59


 1670 0030 2D4B     		ldr	r3, .L145+4
 350:src/storage.c **** 		return;
 1671              		.loc 1 350 5 view .LVU492
 1672 0032 1B68     		ldr	r3, [r3]
 1673 0034 4345     		cmp	r3, r8
 1674 0036 01DA     		bge	.L143
 363:src/storage.c **** 
 1675              		.loc 1 363 1 view .LVU493
 1676 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1677              	.LVL172:
 1678              	.L143:
 353:src/storage.c **** 	ProgEnd += off;
 1679              		.loc 1 353 2 is_stmt 1 view .LVU494
 353:src/storage.c **** 	ProgEnd += off;
 1680              		.loc 1 353 11 is_stmt 0 view .LVU495
 1681 003c 3B68     		ldr	r3, [r7]
 1682 003e B3F802C0 		ldrh	ip, [r3, #2]
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1683              		.loc 1 354 10 view .LVU496
 1684 0042 B3F8EE27 		ldrh	r2, [r3, #2030]
 353:src/storage.c **** 	ProgEnd += off;
 1685              		.loc 1 353 11 view .LVU497
 1686 0046 C444     		add	ip, ip, r8
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1687              		.loc 1 354 10 view .LVU498
 1688 0048 4244     		add	r2, r2, r8
 353:src/storage.c **** 	ProgEnd += off;
 1689              		.loc 1 353 11 view .LVU499
 1690 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1691              		.loc 1 354 2 is_stmt 1 view .LVU500
 354:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1692              		.loc 1 354 10 is_stmt 0 view .LVU501
 1693 004e A3F8EE27 		strh	r2, [r3, #2030]	@ movhi
 355:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1694              		.loc 1 355 2 is_stmt 1 view .LVU502
 355:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1695              		.loc 1 355 7 is_stmt 0 view .LVU503
 1696 0052 4946     		mov	r1, r9
 1697 0054 2846     		mov	r0, r5
 1698 0056 FFF7FEFF 		bl	do_inc
 1699              	.LVL173:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1700              		.loc 1 356 12 view .LVU504
 1701 005a D7F800C0 		ldr	ip, [r7]
 1702 005e BCF80230 		ldrh	r3, [ip, #2]
 1703              	.LVL174:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1704              		.loc 1 356 2 is_stmt 1 view .LVU505
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1705              		.loc 1 356 10 is_stmt 0 view .LVU506
 1706 0062 5A1C     		adds	r2, r3, #1
 1707              	.LVL175:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1708              		.loc 1 356 26 is_stmt 1 view .LVU507
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1709              		.loc 1 356 2 is_stmt 0 view .LVU508
ARM GAS  /tmp/cc09CpAR.s 			page 60


 1710 0064 8242     		cmp	r2, r0
 1711 0066 39DD     		ble	.L130
 1712 0068 03F10043 		add	r3, r3, #-2147483648
 1713 006c 0CF10407 		add	r7, ip, #4
 1714 0070 0133     		adds	r3, r3, #1
 1715 0072 A2EB0802 		sub	r2, r2, r8
 1716              	.LVL176:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1717              		.loc 1 356 2 view .LVU509
 1718 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1719              	.LVL177:
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1720              		.loc 1 356 2 view .LVU510
 1721 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1722 007e 07EB4005 		add	r5, r7, r0, lsl #1
 1723              	.LVL178:
 1724              	.L131:
 357:src/storage.c **** 	}
 1725              		.loc 1 357 3 is_stmt 1 discriminator 3 view .LVU511
 357:src/storage.c **** 	}
 1726              		.loc 1 357 23 is_stmt 0 discriminator 3 view .LVU512
 1727 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 357:src/storage.c **** 	}
 1728              		.loc 1 357 15 discriminator 3 view .LVU513
 1729 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1730              		.loc 1 356 40 is_stmt 1 discriminator 3 view .LVU514
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1731              		.loc 1 356 26 discriminator 3 view .LVU515
 356:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1732              		.loc 1 356 2 is_stmt 0 discriminator 3 view .LVU516
 1733 008a AB42     		cmp	r3, r5
 1734 008c F9D1     		bne	.L131
 1735              	.L132:
 359:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1736              		.loc 1 359 2 is_stmt 1 view .LVU517
 359:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1737              		.loc 1 359 5 is_stmt 0 view .LVU518
 1738 008e B6F5704F 		cmp	r6, #61440
 360:src/storage.c **** 	Prog_1[pc] = c;
 1739              		.loc 1 360 3 is_stmt 1 view .LVU519
 361:src/storage.c **** 	State.pc = pc;
 1740              		.loc 1 361 2 view .LVU520
 360:src/storage.c **** 	Prog_1[pc] = c;
 1741              		.loc 1 360 22 is_stmt 0 view .LVU521
 1742 0092 04BF     		itt	eq
 1743 0094 230C     		lsreq	r3, r4, #16
 360:src/storage.c **** 	Prog_1[pc] = c;
 1744              		.loc 1 360 18 view .LVU522
 1745 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 361:src/storage.c **** 	State.pc = pc;
 1746              		.loc 1 361 8 view .LVU523
 1747 009a 00F10043 		add	r3, r0, #-2147483648
 1748 009e 013B     		subs	r3, r3, #1
 361:src/storage.c **** 	State.pc = pc;
 1749              		.loc 1 361 13 view .LVU524
 1750 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
ARM GAS  /tmp/cc09CpAR.s 			page 61


 362:src/storage.c **** }
 1751              		.loc 1 362 2 is_stmt 1 view .LVU525
 362:src/storage.c **** }
 1752              		.loc 1 362 11 is_stmt 0 view .LVU526
 1753 00a4 ACF8E007 		strh	r0, [ip, #2016]	@ movhi
 363:src/storage.c **** 
 1754              		.loc 1 363 1 view .LVU527
 1755 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1756              	.LVL179:
 1757              	.L141:
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1758              		.loc 1 341 22 discriminator 1 view .LVU528
 1759 00ac B0F59D7F 		cmp	r0, #314
 1760 00b0 B7D0     		beq	.L127
 342:src/storage.c **** 
 1761              		.loc 1 342 3 is_stmt 1 view .LVU529
 1762 00b2 4FF49D70 		mov	r0, #314
 1763              	.LVL180:
 342:src/storage.c **** 
 1764              		.loc 1 342 3 is_stmt 0 view .LVU530
 1765 00b6 FFF7FEFF 		bl	stoprog
 1766              	.LVL181:
 1767              	.L144:
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1768              		.loc 1 344 2 is_stmt 1 view .LVU531
 344:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1769              		.loc 1 344 5 is_stmt 0 view .LVU532
 1770 00ba 15F47049 		ands	r9, r5, #61440
 1771 00be B3D0     		beq	.L128
 1772              	.L142:
 345:src/storage.c **** 		return;
 1773              		.loc 1 345 3 is_stmt 1 view .LVU533
 363:src/storage.c **** 
 1774              		.loc 1 363 1 is_stmt 0 view .LVU534
 1775 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1776              		.cfi_remember_state
 1777              		.cfi_restore 14
 1778              		.cfi_restore 9
 1779              		.cfi_restore 8
 1780              		.cfi_restore 7
 1781              		.cfi_restore 6
 1782              		.cfi_restore 5
 1783              		.cfi_restore 4
 1784              		.cfi_restore 3
 1785              		.cfi_def_cfa_offset 0
 1786              	.LVL182:
 345:src/storage.c **** 		return;
 1787              		.loc 1 345 3 view .LVU535
 1788 00c4 1320     		movs	r0, #19
 1789 00c6 FFF7FEBF 		b	report_warn
 1790              	.LVL183:
 1791              	.L126:
 1792              		.cfi_restore_state
 338:src/storage.c **** 	unsigned int pc = state_pc();
 1793              		.loc 1 338 2 is_stmt 1 view .LVU536
 339:src/storage.c **** 
 1794              		.loc 1 339 2 view .LVU537
ARM GAS  /tmp/cc09CpAR.s 			page 62


 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1795              		.loc 1 341 5 is_stmt 0 view .LVU538
 1796 00ca AB42     		cmp	r3, r5
 337:src/storage.c **** 	int i;
 1797              		.loc 1 337 33 view .LVU539
 1798 00cc 4FF00208 		mov	r8, #2
 341:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1799              		.loc 1 341 5 view .LVU540
 1800 00d0 A7D1     		bne	.L127
 342:src/storage.c **** 
 1801              		.loc 1 342 3 is_stmt 1 view .LVU541
 1802 00d2 4FF49D70 		mov	r0, #314
 1803              	.LVL184:
 342:src/storage.c **** 
 1804              		.loc 1 342 3 is_stmt 0 view .LVU542
 1805 00d6 FFF7FEFF 		bl	stoprog
 1806              	.LVL185:
 1807 00da EEE7     		b	.L144
 1808              	.LVL186:
 1809              	.L130:
 342:src/storage.c **** 
 1810              		.loc 1 342 3 view .LVU543
 1811 00dc 0CF10407 		add	r7, ip, #4
 1812 00e0 D5E7     		b	.L132
 1813              	.L146:
 1814 00e2 00BF     		.align	2
 1815              	.L145:
 1816 00e4 00000000 		.word	main_ram
 1817 00e8 00000000 		.word	ProgFree
 1818              		.cfi_endproc
 1819              	.LFE16:
 1821              		.section	.text.delprog,"ax",%progbits
 1822              		.align	1
 1823              		.p2align 2,,3
 1824              		.global	delprog
 1825              		.syntax unified
 1826              		.thumb
 1827              		.thumb_func
 1828              		.fpu fpv4-sp-d16
 1830              	delprog:
 1831              	.LFB17:
 370:src/storage.c **** 	int i;
 1832              		.loc 1 370 1 is_stmt 1 view -0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 371:src/storage.c **** 	const unsigned int pc = state_pc();
 1836              		.loc 1 371 2 view .LVU545
 372:src/storage.c **** 	int off;
 1837              		.loc 1 372 2 view .LVU546
 370:src/storage.c **** 	int i;
 1838              		.loc 1 370 1 is_stmt 0 view .LVU547
 1839 0000 70B5     		push	{r4, r5, r6, lr}
 1840              		.cfi_def_cfa_offset 16
 1841              		.cfi_offset 4, -16
 1842              		.cfi_offset 5, -12
 1843              		.cfi_offset 6, -8
ARM GAS  /tmp/cc09CpAR.s 			page 63


 1844              		.cfi_offset 14, -4
 372:src/storage.c **** 	int off;
 1845              		.loc 1 372 26 view .LVU548
 1846 0002 194D     		ldr	r5, .L159
 1847 0004 2B68     		ldr	r3, [r5]
 1848 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 1849              	.LVL187:
 373:src/storage.c **** 
 1850              		.loc 1 373 2 is_stmt 1 view .LVU549
 375:src/storage.c **** 		return;
 1851              		.loc 1 375 2 view .LVU550
 375:src/storage.c **** 		return;
 1852              		.loc 1 375 7 is_stmt 0 view .LVU551
 1853 000a 2046     		mov	r0, r4
 1854 000c FFF7FEFF 		bl	check_delete_prog
 1855              	.LVL188:
 375:src/storage.c **** 		return;
 1856              		.loc 1 375 5 view .LVU552
 1857 0010 48BB     		cbnz	r0, .L147
 377:src/storage.c **** 		return;
 1858              		.loc 1 377 2 is_stmt 1 view .LVU553
 377:src/storage.c **** 		return;
 1859              		.loc 1 377 5 is_stmt 0 view .LVU554
 1860 0012 44B3     		cbz	r4, .L147
 380:src/storage.c **** 	ProgSize -= off;
 1861              		.loc 1 380 2 is_stmt 1 view .LVU555
 380:src/storage.c **** 	ProgSize -= off;
 1862              		.loc 1 380 8 is_stmt 0 view .LVU556
 1863 0014 2D68     		ldr	r5, [r5]
 1864 0016 05EB4403 		add	r3, r5, r4, lsl #1
 381:src/storage.c **** 	ProgEnd -= off;
 1865              		.loc 1 381 11 view .LVU557
 1866 001a 6A88     		ldrh	r2, [r5, #2]
 380:src/storage.c **** 	ProgSize -= off;
 1867              		.loc 1 380 33 view .LVU558
 1868 001c 5B88     		ldrh	r3, [r3, #2]
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1869              		.loc 1 382 10 view .LVU559
 1870 001e B5F8EE17 		ldrh	r1, [r5, #2030]
 380:src/storage.c **** 	ProgSize -= off;
 1871              		.loc 1 380 33 view .LVU560
 1872 0022 03F47043 		and	r3, r3, #61440
 1873 0026 B3F5704F 		cmp	r3, #61440
 1874 002a 14BF     		ite	ne
 1875 002c 0126     		movne	r6, #1
 1876 002e 0226     		moveq	r6, #2
 381:src/storage.c **** 	ProgEnd -= off;
 1877              		.loc 1 381 11 view .LVU561
 1878 0030 921B     		subs	r2, r2, r6
 1879 0032 92B2     		uxth	r2, r2
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1880              		.loc 1 382 10 view .LVU562
 1881 0034 891B     		subs	r1, r1, r6
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1882              		.loc 1 383 2 view .LVU563
 1883 0036 9442     		cmp	r4, r2
 380:src/storage.c **** 	ProgSize -= off;
ARM GAS  /tmp/cc09CpAR.s 			page 64


 1884              		.loc 1 380 33 view .LVU564
 1885 0038 3346     		mov	r3, r6
 1886              	.LVL189:
 381:src/storage.c **** 	ProgEnd -= off;
 1887              		.loc 1 381 2 is_stmt 1 view .LVU565
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1888              		.loc 1 383 10 is_stmt 0 view .LVU566
 1889 003a 2046     		mov	r0, r4
 381:src/storage.c **** 	ProgEnd -= off;
 1890              		.loc 1 381 11 view .LVU567
 1891 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1892              		.loc 1 382 2 is_stmt 1 view .LVU568
 382:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1893              		.loc 1 382 10 is_stmt 0 view .LVU569
 1894 003e A5F8EE17 		strh	r1, [r5, #2030]	@ movhi
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1895              		.loc 1 383 2 is_stmt 1 view .LVU570
 1896              	.LVL190:
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1897              		.loc 1 383 16 view .LVU571
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1898              		.loc 1 383 2 is_stmt 0 view .LVU572
 1899 0042 0CDC     		bgt	.L152
 1900 0044 2344     		add	r3, r3, r4
 1901              	.LVL191:
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1902              		.loc 1 383 2 view .LVU573
 1903 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1904 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1905              	.LVL192:
 1906              	.L151:
 384:src/storage.c **** 	decpc();
 1907              		.loc 1 384 3 is_stmt 1 discriminator 3 view .LVU574
 384:src/storage.c **** 	decpc();
 1908              		.loc 1 384 23 is_stmt 0 discriminator 3 view .LVU575
 1909 004e 33F8021F 		ldrh	r1, [r3, #2]!
 384:src/storage.c **** 	decpc();
 1910              		.loc 1 384 15 discriminator 3 view .LVU576
 1911 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1912              		.loc 1 383 37 is_stmt 1 discriminator 3 view .LVU577
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1913              		.loc 1 383 21 is_stmt 0 discriminator 3 view .LVU578
 1914 0056 6988     		ldrh	r1, [r5, #2]
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1915              		.loc 1 383 37 discriminator 3 view .LVU579
 1916 0058 0130     		adds	r0, r0, #1
 1917              	.LVL193:
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1918              		.loc 1 383 16 is_stmt 1 discriminator 3 view .LVU580
 383:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1919              		.loc 1 383 2 is_stmt 0 discriminator 3 view .LVU581
 1920 005a 8142     		cmp	r1, r0
 1921 005c F7DA     		bge	.L151
 1922              	.L152:
 385:src/storage.c **** }
ARM GAS  /tmp/cc09CpAR.s 			page 65


 1923              		.loc 1 385 2 is_stmt 1 view .LVU582
 386:src/storage.c **** 
 1924              		.loc 1 386 1 is_stmt 0 view .LVU583
 1925 005e BDE87040 		pop	{r4, r5, r6, lr}
 1926              		.cfi_remember_state
 1927              		.cfi_restore 14
 1928              		.cfi_restore 6
 1929              		.cfi_restore 5
 1930              		.cfi_restore 4
 1931              		.cfi_def_cfa_offset 0
 1932              	.LVL194:
 385:src/storage.c **** }
 1933              		.loc 1 385 2 view .LVU584
 1934 0062 FFF7FEBF 		b	decpc
 1935              	.LVL195:
 1936              	.L147:
 1937              		.cfi_restore_state
 386:src/storage.c **** 
 1938              		.loc 1 386 1 view .LVU585
 1939 0066 70BD     		pop	{r4, r5, r6, pc}
 1940              	.LVL196:
 1941              	.L160:
 386:src/storage.c **** 
 1942              		.loc 1 386 1 view .LVU586
 1943              		.align	2
 1944              	.L159:
 1945 0068 00000000 		.word	main_ram
 1946              		.cfi_endproc
 1947              	.LFE17:
 1949              		.section	.text.append_program,"ax",%progbits
 1950              		.align	1
 1951              		.p2align 2,,3
 1952              		.global	append_program
 1953              		.syntax unified
 1954              		.thumb
 1955              		.thumb_func
 1956              		.fpu fpv4-sp-d16
 1958              	append_program:
 1959              	.LVL197:
 1960              	.LFB18:
 394:src/storage.c **** 	unsigned short pc;
 1961              		.loc 1 394 1 is_stmt 1 view -0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 395:src/storage.c **** 	int space_needed = length - ProgFree;
 1965              		.loc 1 395 2 view .LVU588
 396:src/storage.c **** 
 1966              		.loc 1 396 2 view .LVU589
 394:src/storage.c **** 	unsigned short pc;
 1967              		.loc 1 394 1 is_stmt 0 view .LVU590
 1968 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1969              		.cfi_def_cfa_offset 24
 1970              		.cfi_offset 4, -24
 1971              		.cfi_offset 5, -20
 1972              		.cfi_offset 6, -16
 1973              		.cfi_offset 7, -12
ARM GAS  /tmp/cc09CpAR.s 			page 66


 1974              		.cfi_offset 8, -8
 1975              		.cfi_offset 14, -4
 398:src/storage.c **** 		/*
 1976              		.loc 1 398 7 view .LVU591
 1977 0004 DFF8C480 		ldr	r8, .L180+8
 396:src/storage.c **** 
 1978              		.loc 1 396 28 view .LVU592
 1979 0008 2E4A     		ldr	r2, .L180
 398:src/storage.c **** 		/*
 1980              		.loc 1 398 7 view .LVU593
 1981 000a D8F80030 		ldr	r3, [r8]
 396:src/storage.c **** 
 1982              		.loc 1 396 6 view .LVU594
 1983 000e 1568     		ldr	r5, [r2]
 398:src/storage.c **** 		/*
 1984              		.loc 1 398 7 view .LVU595
 1985 0010 5F88     		ldrh	r7, [r3, #2]
 398:src/storage.c **** 		/*
 1986              		.loc 1 398 5 view .LVU596
 1987 0012 012F     		cmp	r7, #1
 394:src/storage.c **** 	unsigned short pc;
 1988              		.loc 1 394 1 view .LVU597
 1989 0014 0C46     		mov	r4, r1
 1990 0016 0646     		mov	r6, r0
 396:src/storage.c **** 
 1991              		.loc 1 396 6 view .LVU598
 1992 0018 A1EB0505 		sub	r5, r1, r5
 1993              	.LVL198:
 398:src/storage.c **** 		/*
 1994              		.loc 1 398 2 is_stmt 1 view .LVU599
 398:src/storage.c **** 		/*
 1995              		.loc 1 398 5 is_stmt 0 view .LVU600
 1996 001c 0BD0     		beq	.L177
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 1997              		.loc 1 405 2 is_stmt 1 view .LVU601
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 1998              		.loc 1 405 5 is_stmt 0 view .LVU602
 1999 001e 40F29E33 		movw	r3, #926
 2000 0022 9942     		cmp	r1, r3
 2001 0024 39DC     		bgt	.L164
 408:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2002              		.loc 1 408 2 is_stmt 1 view .LVU603
 408:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2003              		.loc 1 408 30 is_stmt 0 view .LVU604
 2004 0026 DB1B     		subs	r3, r3, r7
 408:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2005              		.loc 1 408 5 view .LVU605
 2006 0028 8B42     		cmp	r3, r1
 2007 002a 0CDA     		bge	.L163
 2008              	.LVL199:
 2009              	.L176:
 2010              	.LBB74:
 428:src/storage.c **** 		}
 2011              		.loc 1 428 4 is_stmt 1 view .LVU606
 2012              	.LBE74:
 440:src/storage.c **** 
 2013              		.loc 1 440 1 is_stmt 0 view .LVU607
ARM GAS  /tmp/cc09CpAR.s 			page 67


 2014 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2015              		.cfi_remember_state
 2016              		.cfi_restore 14
 2017              		.cfi_restore 8
 2018              		.cfi_restore 7
 2019              		.cfi_restore 6
 2020              		.cfi_restore 5
 2021              		.cfi_restore 4
 2022              		.cfi_def_cfa_offset 0
 2023              	.LVL200:
 2024              	.LBB75:
 428:src/storage.c **** 		}
 2025              		.loc 1 428 11 view .LVU608
 2026 0030 0B20     		movs	r0, #11
 2027 0032 FFF7FEBF 		b	report_err
 2028              	.LVL201:
 2029              	.L177:
 2030              		.cfi_restore_state
 428:src/storage.c **** 		}
 2031              		.loc 1 428 11 view .LVU609
 2032              	.LBE75:
 402:src/storage.c **** 		--ProgSize;
 2033              		.loc 1 402 3 is_stmt 1 view .LVU610
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2034              		.loc 1 405 5 is_stmt 0 view .LVU611
 2035 0036 40F29E32 		movw	r2, #926
 403:src/storage.c **** 	}
 2036              		.loc 1 403 3 view .LVU612
 2037 003a 0021     		movs	r1, #0
 2038              	.LVL202:
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2039              		.loc 1 405 5 view .LVU613
 2040 003c 9442     		cmp	r4, r2
 402:src/storage.c **** 		--ProgSize;
 2041              		.loc 1 402 3 view .LVU614
 2042 003e 05F1FF35 		add	r5, r5, #-1
 2043              	.LVL203:
 403:src/storage.c **** 	}
 2044              		.loc 1 403 3 is_stmt 1 view .LVU615
 2045 0042 5980     		strh	r1, [r3, #2]	@ movhi
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2046              		.loc 1 405 2 view .LVU616
 405:src/storage.c **** 		return report_err( ERR_INVALID );
 2047              		.loc 1 405 5 is_stmt 0 view .LVU617
 2048 0044 29DC     		bgt	.L164
 2049              	.L163:
 415:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2050              		.loc 1 415 2 is_stmt 1 view .LVU618
 2051 0046 FFF7FEFF 		bl	clrretstk
 2052              	.LVL204:
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
 2053              		.loc 1 416 2 view .LVU619
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
 2054              		.loc 1 416 5 is_stmt 0 view .LVU620
 2055 004a 002D     		cmp	r5, #0
 2056 004c 11DD     		ble	.L166
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
ARM GAS  /tmp/cc09CpAR.s 			page 68


 2057              		.loc 1 416 40 discriminator 1 view .LVU621
 2058 004e 1E4B     		ldr	r3, .L180+4
 2059 0050 1B68     		ldr	r3, [r3]
 416:src/storage.c **** 		space_needed -= SizeStatRegs;
 2060              		.loc 1 416 24 discriminator 1 view .LVU622
 2061 0052 3BBB     		cbnz	r3, .L178
 2062              	.LBB76:
 421:src/storage.c **** 		if (is_dblmode())
 2063              		.loc 1 421 3 is_stmt 1 view .LVU623
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2064              		.loc 1 422 3 view .LVU624
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2065              		.loc 1 422 7 is_stmt 0 view .LVU625
 2066 0054 FFF7FEFF 		bl	is_dblmode
 2067              	.LVL205:
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2068              		.loc 1 422 6 view .LVU626
 2069 0058 68BB     		cbnz	r0, .L179
 2070              	.L169:
 425:src/storage.c **** 
 2071              		.loc 1 425 4 is_stmt 1 view .LVU627
 425:src/storage.c **** 
 2072              		.loc 1 425 11 is_stmt 0 view .LVU628
 2073 005a D8F80030 		ldr	r3, [r8]
 2074 005e 93F8CF07 		ldrb	r0, [r3, #1999]	@ zero_extendqisi2
 425:src/storage.c **** 
 2075              		.loc 1 425 38 view .LVU629
 2076 0062 0335     		adds	r5, r5, #3
 2077              	.LVL206:
 425:src/storage.c **** 
 2078              		.loc 1 425 9 view .LVU630
 2079 0064 A0EBA500 		sub	r0, r0, r5, asr #2
 2080              	.LVL207:
 2081              	.L170:
 427:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2082              		.loc 1 427 3 is_stmt 1 view .LVU631
 427:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2083              		.loc 1 427 6 is_stmt 0 view .LVU632
 2084 0068 0028     		cmp	r0, #0
 2085 006a DFDB     		blt	.L176
 430:src/storage.c **** 	}
 2086              		.loc 1 430 3 is_stmt 1 view .LVU633
 2087 006c 7D21     		movs	r1, #125
 2088 006e FFF7FEFF 		bl	cmdregs
 2089              	.LVL208:
 2090              	.L166:
 430:src/storage.c **** 	}
 2091              		.loc 1 430 3 is_stmt 0 view .LVU634
 2092              	.LBE76:
 435:src/storage.c **** 	ProgSize += length;
 2093              		.loc 1 435 2 is_stmt 1 view .LVU635
 435:src/storage.c **** 	ProgSize += length;
 2094              		.loc 1 435 7 is_stmt 0 view .LVU636
 2095 0072 D8F80020 		ldr	r2, [r8]
 2096 0076 5388     		ldrh	r3, [r2, #2]
 2097              	.LVL209:
 436:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
ARM GAS  /tmp/cc09CpAR.s 			page 69


 2098              		.loc 1 436 2 is_stmt 1 view .LVU637
 435:src/storage.c **** 	ProgSize += length;
 2099              		.loc 1 435 5 is_stmt 0 view .LVU638
 2100 0078 5D1C     		adds	r5, r3, #1
 437:src/storage.c **** 	set_pc( pc );
 2101              		.loc 1 437 16 view .LVU639
 2102 007a ADB2     		uxth	r5, r5
 436:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2103              		.loc 1 436 11 view .LVU640
 2104 007c 2344     		add	r3, r3, r4
 2105              	.LVL210:
 437:src/storage.c **** 	set_pc( pc );
 2106              		.loc 1 437 16 view .LVU641
 2107 007e 02EB4500 		add	r0, r2, r5, lsl #1
 436:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2108              		.loc 1 436 11 view .LVU642
 2109 0082 5380     		strh	r3, [r2, #2]	@ movhi
 2110              	.LVL211:
 437:src/storage.c **** 	set_pc( pc );
 2111              		.loc 1 437 2 is_stmt 1 view .LVU643
 2112 0084 3146     		mov	r1, r6
 2113 0086 6200     		lsls	r2, r4, #1
 2114 0088 0230     		adds	r0, r0, #2
 2115 008a FFF7FEFF 		bl	xcopy
 2116              	.LVL212:
 438:src/storage.c **** 	return 0;
 2117              		.loc 1 438 2 view .LVU644
 2118 008e 2846     		mov	r0, r5
 2119 0090 FFF7FEFF 		bl	set_pc
 2120              	.LVL213:
 439:src/storage.c **** }
 2121              		.loc 1 439 2 view .LVU645
 440:src/storage.c **** 
 2122              		.loc 1 440 1 is_stmt 0 view .LVU646
 2123 0094 0020     		movs	r0, #0
 2124 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2125              	.LVL214:
 2126              	.L164:
 406:src/storage.c **** 	}
 2127              		.loc 1 406 3 is_stmt 1 view .LVU647
 440:src/storage.c **** 
 2128              		.loc 1 440 1 is_stmt 0 view .LVU648
 2129 009a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2130              		.cfi_remember_state
 2131              		.cfi_restore 14
 2132              		.cfi_restore 8
 2133              		.cfi_restore 7
 2134              		.cfi_restore 6
 2135              		.cfi_restore 5
 2136              		.cfi_restore 4
 2137              		.cfi_def_cfa_offset 0
 2138              	.LVL215:
 406:src/storage.c **** 	}
 2139              		.loc 1 406 10 view .LVU649
 2140 009e 1220     		movs	r0, #18
 2141              	.LVL216:
 406:src/storage.c **** 	}
ARM GAS  /tmp/cc09CpAR.s 			page 70


 2142              		.loc 1 406 10 view .LVU650
 2143 00a0 FFF7FEBF 		b	report_err
 2144              	.LVL217:
 2145              	.L178:
 2146              		.cfi_restore_state
 417:src/storage.c **** 		sigmaDeallocate();
 2147              		.loc 1 417 3 is_stmt 1 view .LVU651
 417:src/storage.c **** 		sigmaDeallocate();
 2148              		.loc 1 417 16 is_stmt 0 view .LVU652
 2149 00a4 ED1A     		subs	r5, r5, r3
 2150              	.LVL218:
 418:src/storage.c **** 	}
 2151              		.loc 1 418 3 is_stmt 1 view .LVU653
 2152 00a6 FFF7FEFF 		bl	sigmaDeallocate
 2153              	.LVL219:
 420:src/storage.c **** 		int regs;
 2154              		.loc 1 420 2 view .LVU654
 420:src/storage.c **** 		int regs;
 2155              		.loc 1 420 5 is_stmt 0 view .LVU655
 2156 00aa 002D     		cmp	r5, #0
 2157 00ac E1DD     		ble	.L166
 2158              	.LBB77:
 421:src/storage.c **** 		if (is_dblmode())
 2159              		.loc 1 421 3 is_stmt 1 view .LVU656
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2160              		.loc 1 422 3 view .LVU657
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2161              		.loc 1 422 7 is_stmt 0 view .LVU658
 2162 00ae FFF7FEFF 		bl	is_dblmode
 2163              	.LVL220:
 422:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2164              		.loc 1 422 6 view .LVU659
 2165 00b2 0028     		cmp	r0, #0
 2166 00b4 D1D0     		beq	.L169
 2167              	.L179:
 423:src/storage.c **** 		else
 2168              		.loc 1 423 4 is_stmt 1 view .LVU660
 423:src/storage.c **** 		else
 2169              		.loc 1 423 11 is_stmt 0 view .LVU661
 2170 00b6 FFF7FEFF 		bl	global_regs
 2171              	.LVL221:
 423:src/storage.c **** 		else
 2172              		.loc 1 423 44 view .LVU662
 2173 00ba 0735     		adds	r5, r5, #7
 2174              	.LVL222:
 423:src/storage.c **** 		else
 2175              		.loc 1 423 25 view .LVU663
 2176 00bc A0EBE500 		sub	r0, r0, r5, asr #3
 2177              	.LVL223:
 423:src/storage.c **** 		else
 2178              		.loc 1 423 25 view .LVU664
 2179 00c0 D2E7     		b	.L170
 2180              	.L181:
 2181 00c2 00BF     		.align	2
 2182              	.L180:
 2183 00c4 00000000 		.word	ProgFree
 2184 00c8 00000000 		.word	SizeStatRegs
ARM GAS  /tmp/cc09CpAR.s 			page 71


 2185 00cc 00000000 		.word	main_ram
 2186              	.LBE77:
 2187              		.cfi_endproc
 2188              	.LFE18:
 2190              		.section	.text.check_create_wp34sdir,"ax",%progbits
 2191              		.align	1
 2192              		.p2align 2,,3
 2193              		.global	check_create_wp34sdir
 2194              		.syntax unified
 2195              		.thumb
 2196              		.thumb_func
 2197              		.fpu fpv4-sp-d16
 2199              	check_create_wp34sdir:
 2200              	.LFB21:
 594:src/storage.c ****   FRESULT f;
 2201              		.loc 1 594 33 is_stmt 1 view -0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 595:src/storage.c ****   sys_disk_write_enable(1);
 2205              		.loc 1 595 3 view .LVU666
 596:src/storage.c ****   f = check_create_dir ("/wp34s");
 2206              		.loc 1 596 3 view .LVU667
 594:src/storage.c ****   FRESULT f;
 2207              		.loc 1 594 33 is_stmt 0 view .LVU668
 2208 0000 38B5     		push	{r3, r4, r5, lr}
 2209              		.cfi_def_cfa_offset 16
 2210              		.cfi_offset 3, -16
 2211              		.cfi_offset 4, -12
 2212              		.cfi_offset 5, -8
 2213              		.cfi_offset 14, -4
 596:src/storage.c ****   f = check_create_dir ("/wp34s");
 2214              		.loc 1 596 3 view .LVU669
 2215 0002 0120     		movs	r0, #1
 2216 0004 044D     		ldr	r5, .L184
 2217 0006 A847     		blx	r5
 2218              	.LVL224:
 597:src/storage.c ****   sys_disk_write_enable(0);
 2219              		.loc 1 597 3 is_stmt 1 view .LVU670
 597:src/storage.c ****   sys_disk_write_enable(0);
 2220              		.loc 1 597 7 is_stmt 0 view .LVU671
 2221 0008 044B     		ldr	r3, .L184+4
 2222 000a 0548     		ldr	r0, .L184+8
 2223 000c 9847     		blx	r3
 2224              	.LVL225:
 2225 000e 0446     		mov	r4, r0
 2226              	.LVL226:
 598:src/storage.c ****   return f;
 2227              		.loc 1 598 3 is_stmt 1 view .LVU672
 2228 0010 0020     		movs	r0, #0
 2229 0012 A847     		blx	r5
 2230              	.LVL227:
 599:src/storage.c **** }
 2231              		.loc 1 599 3 view .LVU673
 600:src/storage.c **** 
 2232              		.loc 1 600 1 is_stmt 0 view .LVU674
 2233 0014 E0B2     		uxtb	r0, r4
ARM GAS  /tmp/cc09CpAR.s 			page 72


 2234 0016 38BD     		pop	{r3, r4, r5, pc}
 2235              	.LVL228:
 2236              	.L185:
 600:src/storage.c **** 
 2237              		.loc 1 600 1 view .LVU675
 2238              		.align	2
 2239              	.L184:
 2240 0018 E1030008 		.word	134218721
 2241 001c D1030008 		.word	134218705
 2242 0020 2C000000 		.word	.LC2
 2243              		.cfi_endproc
 2244              	.LFE21:
 2246              		.section	.text.init_library,"ax",%progbits
 2247              		.align	1
 2248              		.p2align 2,,3
 2249              		.global	init_library
 2250              		.syntax unified
 2251              		.thumb
 2252              		.thumb_func
 2253              		.fpu fpv4-sp-d16
 2255              	init_library:
 2256              	.LFB22:
 662:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2257              		.loc 1 662 1 is_stmt 1 view -0
 2258              		.cfi_startproc
 2259              		@ args = 0, pretend = 0, frame = 256
 2260              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/storage.c **** 	  struct {
 2261              		.loc 1 663 2 view .LVU677
 662:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2262              		.loc 1 662 1 is_stmt 0 view .LVU678
 2263 0000 10B5     		push	{r4, lr}
 2264              		.cfi_def_cfa_offset 8
 2265              		.cfi_offset 4, -8
 2266              		.cfi_offset 14, -4
 663:src/storage.c **** 	  struct {
 2267              		.loc 1 663 7 view .LVU679
 2268 0002 0C4C     		ldr	r4, .L193
 2269 0004 2168     		ldr	r1, [r4]
 662:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2270              		.loc 1 662 1 view .LVU680
 2271 0006 C0B0     		sub	sp, sp, #256
 2272              		.cfi_def_cfa_offset 264
 663:src/storage.c **** 	  struct {
 2273              		.loc 1 663 7 view .LVU681
 2274 0008 0846     		mov	r0, r1
 2275 000a FFF7FEFF 		bl	checksum_region
 2276              	.LVL229:
 663:src/storage.c **** 	  struct {
 2277              		.loc 1 663 5 view .LVU682
 2278 000e 08B9     		cbnz	r0, .L192
 674:src/storage.c **** 
 2279              		.loc 1 674 1 view .LVU683
 2280 0010 40B0     		add	sp, sp, #256
 2281              		.cfi_remember_state
 2282              		.cfi_def_cfa_offset 8
 2283              		@ sp needed
ARM GAS  /tmp/cc09CpAR.s 			page 73


 2284 0012 10BD     		pop	{r4, pc}
 2285              	.L192:
 2286              		.cfi_restore_state
 2287              	.LBB78:
 664:src/storage.c **** 			unsigned short crc;
 2288              		.loc 1 664 4 is_stmt 1 view .LVU684
 669:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2289              		.loc 1 669 3 view .LVU685
 670:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2290              		.loc 1 670 3 view .LVU686
 670:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2291              		.loc 1 670 11 is_stmt 0 view .LVU687
 2292 0014 4AF23C53 		movw	r3, #42300
 671:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2293              		.loc 1 671 3 view .LVU688
 2294 0018 FC22     		movs	r2, #252
 2295 001a FF21     		movs	r1, #255
 2296 001c 01A8     		add	r0, sp, #4
 670:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2297              		.loc 1 670 11 view .LVU689
 2298 001e 0093     		str	r3, [sp]
 671:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2299              		.loc 1 671 3 is_stmt 1 view .LVU690
 2300 0020 FFF7FEFF 		bl	xset
 2301              	.LVL230:
 672:src/storage.c **** 	}
 2302              		.loc 1 672 3 view .LVU691
 2303 0024 2068     		ldr	r0, [r4]
 2304 0026 6946     		mov	r1, sp
 2305 0028 0122     		movs	r2, #1
 2306 002a FFF7FEFF 		bl	program_flash
 2307              	.LVL231:
 2308              	.LBE78:
 674:src/storage.c **** 
 2309              		.loc 1 674 1 is_stmt 0 view .LVU692
 2310 002e 40B0     		add	sp, sp, #256
 2311              		.cfi_def_cfa_offset 8
 2312              		@ sp needed
 2313 0030 10BD     		pop	{r4, pc}
 2314              	.L194:
 2315 0032 00BF     		.align	2
 2316              	.L193:
 2317 0034 00000000 		.word	library_ram
 2318              		.cfi_endproc
 2319              	.LFE22:
 2321              		.section	.text.flash_remove,"ax",%progbits
 2322              		.align	1
 2323              		.p2align 2,,3
 2324              		.global	flash_remove
 2325              		.syntax unified
 2326              		.thumb
 2327              		.thumb_func
 2328              		.fpu fpv4-sp-d16
 2330              	flash_remove:
 2331              	.LVL232:
 2332              	.LFB24:
 739:src/storage.c **** 	const int size = UserFlash.size - count;
ARM GAS  /tmp/cc09CpAR.s 			page 74


 2333              		.loc 1 739 1 is_stmt 1 view -0
 2334              		.cfi_startproc
 2335              		@ args = 0, pretend = 0, frame = 0
 2336              		@ frame_needed = 0, uses_anonymous_args = 0
 2337              		@ link register save eliminated.
 740:src/storage.c **** 	step_no = offsetLIB( step_no );
 2338              		.loc 1 740 2 view .LVU694
 740:src/storage.c **** 	step_no = offsetLIB( step_no );
 2339              		.loc 1 740 19 is_stmt 0 view .LVU695
 2340 0000 084B     		ldr	r3, .L197
 2341 0002 1A68     		ldr	r2, [r3]
 741:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2342              		.loc 1 741 12 view .LVU696
 2343 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2344              	.LVL233:
 740:src/storage.c **** 	step_no = offsetLIB( step_no );
 2345              		.loc 1 740 28 view .LVU697
 2346 0008 5388     		ldrh	r3, [r2, #2]
 741:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2347              		.loc 1 741 10 view .LVU698
 2348 000a 0138     		subs	r0, r0, #1
 739:src/storage.c **** 	const int size = UserFlash.size - count;
 2349              		.loc 1 739 1 view .LVU699
 2350 000c 10B4     		push	{r4}
 2351              		.cfi_def_cfa_offset 4
 2352              		.cfi_offset 4, -4
 742:src/storage.c **** 			     size - step_no, size );
 2353              		.loc 1 742 32 view .LVU700
 2354 000e 0432     		adds	r2, r2, #4
 742:src/storage.c **** 			     size - step_no, size );
 2355              		.loc 1 742 57 view .LVU701
 2356 0010 4418     		adds	r4, r0, r1
 740:src/storage.c **** 	step_no = offsetLIB( step_no );
 2357              		.loc 1 740 12 view .LVU702
 2358 0012 5B1A     		subs	r3, r3, r1
 2359              	.LVL234:
 741:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2360              		.loc 1 741 2 is_stmt 1 view .LVU703
 742:src/storage.c **** 			     size - step_no, size );
 2361              		.loc 1 742 2 view .LVU704
 742:src/storage.c **** 			     size - step_no, size );
 2362              		.loc 1 742 9 is_stmt 0 view .LVU705
 2363 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2364              	.LVL235:
 744:src/storage.c **** 
 2365              		.loc 1 744 1 view .LVU706
 2366 0018 5DF8044B 		ldr	r4, [sp], #4
 2367              		.cfi_restore 4
 2368              		.cfi_def_cfa_offset 0
 742:src/storage.c **** 			     size - step_no, size );
 2369              		.loc 1 742 9 view .LVU707
 2370 001c 1A1A     		subs	r2, r3, r0
 2371 001e FFF7FEBF 		b	flash_append
 2372              	.LVL236:
 2373              	.L198:
 742:src/storage.c **** 			     size - step_no, size );
 2374              		.loc 1 742 9 view .LVU708
ARM GAS  /tmp/cc09CpAR.s 			page 75


 2375 0022 00BF     		.align	2
 2376              	.L197:
 2377 0024 00000000 		.word	library_ram
 2378              		.cfi_endproc
 2379              	.LFE24:
 2381              		.section	.text.clrprog,"ax",%progbits
 2382              		.align	1
 2383              		.p2align 2,,3
 2384              		.global	clrprog
 2385              		.syntax unified
 2386              		.thumb
 2387              		.thumb_func
 2388              		.fpu fpv4-sp-d16
 2390              	clrprog:
 2391              	.LFB13:
 273:src/storage.c **** 	update_program_bounds( 1 );
 2392              		.loc 1 273 1 is_stmt 1 view -0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 0
 2395              		@ frame_needed = 0, uses_anonymous_args = 0
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2396              		.loc 1 274 2 view .LVU710
 273:src/storage.c **** 	update_program_bounds( 1 );
 2397              		.loc 1 273 1 is_stmt 0 view .LVU711
 2398 0000 10B5     		push	{r4, lr}
 2399              		.cfi_def_cfa_offset 8
 2400              		.cfi_offset 4, -8
 2401              		.cfi_offset 14, -4
 275:src/storage.c **** 		/*
 2402              		.loc 1 275 7 view .LVU712
 2403 0002 234C     		ldr	r4, .L208
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2404              		.loc 1 274 2 view .LVU713
 2405 0004 0120     		movs	r0, #1
 2406 0006 FFF7FEFF 		bl	update_program_bounds
 2407              	.LVL237:
 275:src/storage.c **** 		/*
 2408              		.loc 1 275 2 is_stmt 1 view .LVU714
 275:src/storage.c **** 		/*
 2409              		.loc 1 275 7 is_stmt 0 view .LVU715
 2410 000a 2368     		ldr	r3, [r4]
 2411 000c B3F8EC07 		ldrh	r0, [r3, #2028]
 275:src/storage.c **** 		/*
 2412              		.loc 1 275 5 view .LVU716
 2413 0010 820B     		lsrs	r2, r0, #14
 2414 0012 012A     		cmp	r2, #1
 2415 0014 28D0     		beq	.L205
 282:src/storage.c **** 			return;
 2416              		.loc 1 282 3 is_stmt 1 view .LVU717
 282:src/storage.c **** 			return;
 2417              		.loc 1 282 8 is_stmt 0 view .LVU718
 2418 0016 FFF7FEFF 		bl	check_delete_prog
 2419              	.LVL238:
 282:src/storage.c **** 			return;
 2420              		.loc 1 282 6 view .LVU719
 2421 001a 00B1     		cbz	r0, .L206
 294:src/storage.c ****  
ARM GAS  /tmp/cc09CpAR.s 			page 76


 2422              		.loc 1 294 1 view .LVU720
 2423 001c 10BD     		pop	{r4, pc}
 2424              	.L206:
 285:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 2425              		.loc 1 285 3 is_stmt 1 view .LVU721
 2426 001e FFF7FEFF 		bl	clrretstk
 2427              	.LVL239:
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2428              		.loc 1 286 3 view .LVU722
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2429              		.loc 1 286 10 is_stmt 0 view .LVU723
 2430 0022 2368     		ldr	r3, [r4]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2431              		.loc 1 286 17 view .LVU724
 2432 0024 B3F8EC07 		ldrh	r0, [r3, #2028]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2433              		.loc 1 286 37 view .LVU725
 2434 0028 B3F8EE17 		ldrh	r1, [r3, #2030]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2435              		.loc 1 286 48 view .LVU726
 2436 002c 5A88     		ldrh	r2, [r3, #2]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2437              		.loc 1 286 17 view .LVU727
 2438 002e 00F10040 		add	r0, r0, #-2147483648
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2439              		.loc 1 286 10 view .LVU728
 2440 0032 0433     		adds	r3, r3, #4
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2441              		.loc 1 286 57 view .LVU729
 2442 0034 521A     		subs	r2, r2, r1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2443              		.loc 1 286 17 view .LVU730
 2444 0036 0138     		subs	r0, r0, #1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2445              		.loc 1 286 3 view .LVU731
 2446 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2447 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2448 0040 5200     		lsls	r2, r2, #1
 2449 0042 FFF7FEFF 		bl	xcopy
 2450              	.LVL240:
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2451              		.loc 1 287 3 is_stmt 1 view .LVU732
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2452              		.loc 1 287 12 is_stmt 0 view .LVU733
 2453 0046 2268     		ldr	r2, [r4]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2454              		.loc 1 287 31 view .LVU734
 2455 0048 B2F8EC07 		ldrh	r0, [r2, #2028]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2456              		.loc 1 287 12 view .LVU735
 2457 004c 5388     		ldrh	r3, [r2, #2]
 2458 004e B2F8EE17 		ldrh	r1, [r2, #2030]
 2459 0052 0344     		add	r3, r3, r0
 2460 0054 013B     		subs	r3, r3, #1
 2461 0056 5B1A     		subs	r3, r3, r1
 2462 0058 9BB2     		uxth	r3, r3
 288:src/storage.c **** 			stoend();
ARM GAS  /tmp/cc09CpAR.s 			page 77


 2463              		.loc 1 288 3 is_stmt 1 view .LVU736
 288:src/storage.c **** 			stoend();
 2464              		.loc 1 288 6 is_stmt 0 view .LVU737
 2465 005a B3B9     		cbnz	r3, .L207
 289:src/storage.c **** 		}
 2466              		.loc 1 289 4 is_stmt 1 view .LVU738
 2467              	.LBB79:
 2468              	.LBI79:
 237:src/storage.c **** {
 2469              		.loc 1 237 13 view .LVU739
 2470              	.LBB80:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2471              		.loc 1 239 2 view .LVU740
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2472              		.loc 1 239 11 is_stmt 0 view .LVU741
 2473 005c 0121     		movs	r1, #1
 240:src/storage.c **** }
 2474              		.loc 1 240 12 view .LVU742
 2475 005e 4FF49D73 		mov	r3, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2476              		.loc 1 239 11 view .LVU743
 2477 0062 5180     		strh	r1, [r2, #2]	@ movhi
 240:src/storage.c **** }
 2478              		.loc 1 240 2 is_stmt 1 view .LVU744
 240:src/storage.c **** }
 2479              		.loc 1 240 12 is_stmt 0 view .LVU745
 2480 0064 9380     		strh	r3, [r2, #4]	@ movhi
 241:src/storage.c **** 
 2481              		.loc 1 241 1 view .LVU746
 2482 0066 08E0     		b	.L201
 2483              	.L205:
 2484              	.LBE80:
 2485              	.LBE79:
 279:src/storage.c **** 	}
 2486              		.loc 1 279 3 is_stmt 1 view .LVU747
 279:src/storage.c **** 	}
 2487              		.loc 1 279 28 is_stmt 0 view .LVU748
 2488 0068 B3F8EE17 		ldrh	r1, [r3, #2030]
 279:src/storage.c **** 	}
 2489              		.loc 1 279 36 view .LVU749
 2490 006c 0131     		adds	r1, r1, #1
 279:src/storage.c **** 	}
 2491              		.loc 1 279 3 view .LVU750
 2492 006e 091A     		subs	r1, r1, r0
 2493 0070 FFF7FEFF 		bl	flash_remove
 2494              	.LVL241:
 2495 0074 2368     		ldr	r3, [r4]
 2496 0076 B3F8EC07 		ldrh	r0, [r3, #2028]
 2497              	.L201:
 292:src/storage.c **** 	update_program_bounds( 1 );
 2498              		.loc 1 292 2 is_stmt 1 view .LVU751
 2499 007a 0138     		subs	r0, r0, #1
 2500 007c FFF7FEFF 		bl	set_pc
 2501              	.LVL242:
 293:src/storage.c **** }
 2502              		.loc 1 293 2 view .LVU752
 294:src/storage.c ****  
ARM GAS  /tmp/cc09CpAR.s 			page 78


 2503              		.loc 1 294 1 is_stmt 0 view .LVU753
 2504 0080 BDE81040 		pop	{r4, lr}
 2505              		.cfi_remember_state
 2506              		.cfi_restore 14
 2507              		.cfi_restore 4
 2508              		.cfi_def_cfa_offset 0
 293:src/storage.c **** }
 2509              		.loc 1 293 2 view .LVU754
 2510 0084 0120     		movs	r0, #1
 2511 0086 FFF7FEBF 		b	update_program_bounds
 2512              	.LVL243:
 2513              	.L207:
 2514              		.cfi_restore_state
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2515              		.loc 1 287 12 view .LVU755
 2516 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2517 008c F5E7     		b	.L201
 2518              	.L209:
 2519 008e 00BF     		.align	2
 2520              	.L208:
 2521 0090 00000000 		.word	main_ram
 2522              		.cfi_endproc
 2523              	.LFE13:
 2525              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2526              		.align	2
 2527              	.LC7:
 2528 0000 4E6F206C 		.ascii	"No label\000"
 2528      6162656C 
 2528      00
 2529              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2530              		.align	1
 2531              		.p2align 2,,3
 2532              		.syntax unified
 2533              		.thumb
 2534              		.thumb_func
 2535              		.fpu fpv4-sp-d16
 2537              	store_program_from_buffer.part.0:
 2538              	.LVL244:
 2539              	.LFB43:
1262:src/storage.c **** 
1263:src/storage.c **** void save_prog_file () {
1264:src/storage.c ****   opcode lbl; 
1265:src/storage.c ****   unsigned int pc;
1266:src/storage.c ****   unsigned short steps, prog_crc;
1267:src/storage.c ****   FRESULT f;
1268:src/storage.c ****   int data = WRITE;
1269:src/storage.c ****   int fss;
1270:src/storage.c ****   uint x=0;
1271:src/storage.c ****   char* buffer;
1272:src/storage.c ****   FLASH_REGION* fr;
1273:src/storage.c **** 
1274:src/storage.c ****   
1275:src/storage.c ****   if ( not_running() ) {
1276:src/storage.c ****     /*
1277:src/storage.c ****      *  Don't copy from library or XROM
1278:src/storage.c ****      */
1279:src/storage.c ****     pc = nLIB( state_pc() );
ARM GAS  /tmp/cc09CpAR.s 			page 79


1280:src/storage.c ****     if ( pc == REGION_XROM ) {
1281:src/storage.c ****       error_message( ERR_ILLEGAL );
1282:src/storage.c ****       return;
1283:src/storage.c ****     }
1284:src/storage.c ****     /*
1285:src/storage.c ****      *  Check if program is labeled
1286:src/storage.c ****      */
1287:src/storage.c ****     update_program_bounds( 1 );
1288:src/storage.c ****     lbl = getprog( ProgBegin );
1289:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1290:src/storage.c ****       error_message( ERR_NO_LBL );
1291:src/storage.c ****       return;
1292:src/storage.c ****     }
1293:src/storage.c ****     /*
1294:src/storage.c ****      *  Compute steps and crc for program
1295:src/storage.c ****      */
1296:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
1297:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
1298:src/storage.c ****     /*
1299:src/storage.c ****      * Get filename and open file
1300:src/storage.c ****      */
1301:src/storage.c ****     sys_disk_write_enable(1);
1302:src/storage.c **** 
1303:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
1304:src/storage.c ****     if (fss != 1) return;
1305:src/storage.c **** 
1306:src/storage.c ****     // File is now open with correct permissions
1307:src/storage.c **** 
1308:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
1309:src/storage.c ****     if (!buffer) {// calloc failure!
1310:src/storage.c ****       f_close(FPT);
1311:src/storage.c ****       sys_disk_write_enable(0);
1312:src/storage.c ****       DispMsg = "Mem short";
1313:src/storage.c ****       return;
1314:src/storage.c ****     }
1315:src/storage.c **** 
1316:src/storage.c ****     fr = (FLASH_REGION*) buffer;
1317:src/storage.c ****     fr->size = steps;
1318:src/storage.c ****     fr->crc = prog_crc;
1319:src/storage.c **** 
1320:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
1321:src/storage.c ****    
1322:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1323:src/storage.c ****     free(buffer);
1324:src/storage.c ****     
1325:src/storage.c ****     if (f != FR_OK) { //odd?
1326:src/storage.c ****       DispMsg = "Write err";
1327:src/storage.c ****     }
1328:src/storage.c ****     else {
1329:src/storage.c ****       DispMsg = "Written";
1330:src/storage.c ****     }
1331:src/storage.c ****       
1332:src/storage.c ****     f_close(FPT);
1333:src/storage.c ****     sys_disk_write_enable(0);
1334:src/storage.c ****     
1335:src/storage.c ****   }
1336:src/storage.c **** }
ARM GAS  /tmp/cc09CpAR.s 			page 80


1337:src/storage.c **** 
1338:src/storage.c **** void load_prog_file () {
1339:src/storage.c ****   int fss, fsize;
1340:src/storage.c ****   int data = READ;
1341:src/storage.c ****   uint x=0;
1342:src/storage.c ****   FLASH_REGION* fr;
1343:src/storage.c ****   char* buffer;
1344:src/storage.c **** 
1345:src/storage.c ****   fss = file_selection_screen ("Load PROG File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW,
1346:src/storage.c ****   if (fss != 1) return;
1347:src/storage.c **** 
1348:src/storage.c ****   // File is now open with correct permissions
1349:src/storage.c **** 
1350:src/storage.c ****   fsize = f_size(FPT);
1351:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
1352:src/storage.c ****     f_close(FPT);
1353:src/storage.c ****     DispMsg = "File too big";
1354:src/storage.c ****     return;
1355:src/storage.c ****   }
1356:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1357:src/storage.c ****   if (!buffer) {// calloc failure!
1358:src/storage.c ****     f_close(FPT);
1359:src/storage.c ****     DispMsg = "Mem short";
1360:src/storage.c ****     return;
1361:src/storage.c ****   }
1362:src/storage.c **** 
1363:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1364:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1365:src/storage.c ****     free(buffer);
1366:src/storage.c ****     f_close(FPT);
1367:src/storage.c ****     DispMsg = "File odd";
1368:src/storage.c ****     return;
1369:src/storage.c ****   }
1370:src/storage.c ****   f_close(FPT);
1371:src/storage.c **** 
1372:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1373:src/storage.c ****     
1374:src/storage.c ****   if (checksum_region(fr, fr)) {//crc failed - wrong filetype?
1375:src/storage.c ****     DispMsg = "File crc err";
1376:src/storage.c ****         free(buffer);
1377:src/storage.c ****     return;
1378:src/storage.c ****   }
1379:src/storage.c **** 
1380:src/storage.c ****   store_program_from_buffer (fr);
1381:src/storage.c ****   free(buffer);
1382:src/storage.c **** }
1383:src/storage.c **** 
1384:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
 2540              		.loc 1 1384 6 is_stmt 1 view -0
 2541              		.cfi_startproc
 2542              		@ args = 0, pretend = 0, frame = 0
 2543              		@ frame_needed = 0, uses_anonymous_args = 0
 2544              	.LBB81:
1385:src/storage.c **** { // buffer contains all of program file
1386:src/storage.c ****   unsigned int pc;
1387:src/storage.c ****   int space_needed, count, free;
1388:src/storage.c **** 
ARM GAS  /tmp/cc09CpAR.s 			page 81


1389:src/storage.c ****   if ( not_running() ) {
1390:src/storage.c ****     /*
1391:src/storage.c ****      *  Check if program is labeled
1392:src/storage.c ****      */
1393:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2545              		.loc 1 1393 5 view .LVU757
1394:src/storage.c ****     if ( isDBL(lbl) ) {
 2546              		.loc 1 1394 5 view .LVU758
 2547              		.loc 1 1394 8 is_stmt 0 view .LVU759
 2548 0000 8388     		ldrh	r3, [r0, #4]
 2549 0002 03F47043 		and	r3, r3, #61440
 2550 0006 B3F5704F 		cmp	r3, #61440
 2551 000a 03D0     		beq	.L223
 2552              	.LVL245:
1395:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
1396:src/storage.c ****     }
1397:src/storage.c ****     
1398:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1399:src/storage.c ****       DispMsg = "No label";
 2553              		.loc 1 1399 7 is_stmt 1 view .LVU760
 2554              		.loc 1 1399 15 is_stmt 0 view .LVU761
 2555 000c 264B     		ldr	r3, .L227
 2556 000e 274A     		ldr	r2, .L227+4
 2557 0010 1A60     		str	r2, [r3]
1400:src/storage.c ****       return;
 2558              		.loc 1 1400 7 is_stmt 1 view .LVU762
 2559 0012 7047     		bx	lr
 2560              	.LVL246:
 2561              	.L223:
1395:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2562              		.loc 1 1395 11 is_stmt 0 view .LVU763
 2563 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1398:src/storage.c ****       DispMsg = "No label";
 2564              		.loc 1 1398 11 view .LVU764
 2565 0016 01F47043 		and	r3, r1, #61440
1398:src/storage.c ****       DispMsg = "No label";
 2566              		.loc 1 1398 8 view .LVU765
 2567 001a B3F5704F 		cmp	r3, #61440
 2568              	.LBE81:
1384:src/storage.c **** { // buffer contains all of program file
 2569              		.loc 1 1384 6 view .LVU766
 2570 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2571              		.cfi_def_cfa_offset 32
 2572              		.cfi_offset 4, -32
 2573              		.cfi_offset 5, -28
 2574              		.cfi_offset 6, -24
 2575              		.cfi_offset 7, -20
 2576              		.cfi_offset 8, -16
 2577              		.cfi_offset 9, -12
 2578              		.cfi_offset 10, -8
 2579              		.cfi_offset 14, -4
 2580 0022 0446     		mov	r4, r0
 2581              	.LBB84:
1395:src/storage.c ****     }
 2582              		.loc 1 1395 7 is_stmt 1 view .LVU767
 2583              	.LVL247:
1398:src/storage.c ****       DispMsg = "No label";
ARM GAS  /tmp/cc09CpAR.s 			page 82


 2584              		.loc 1 1398 5 view .LVU768
1398:src/storage.c ****       DispMsg = "No label";
 2585              		.loc 1 1398 8 is_stmt 0 view .LVU769
 2586 0024 04D1     		bne	.L211
1398:src/storage.c ****       DispMsg = "No label";
 2587              		.loc 1 1398 22 view .LVU770
 2588 0026 11F4706F 		tst	r1, #3840
1398:src/storage.c ****       DispMsg = "No label";
 2589              		.loc 1 1398 25 view .LVU771
 2590 002a C1F30322 		ubfx	r2, r1, #8, #4
1398:src/storage.c ****       DispMsg = "No label";
 2591              		.loc 1 1398 22 view .LVU772
 2592 002e 04D0     		beq	.L212
 2593              	.L211:
 2594              	.LVL248:
1399:src/storage.c ****       return;
 2595              		.loc 1 1399 7 is_stmt 1 view .LVU773
1399:src/storage.c ****       return;
 2596              		.loc 1 1399 15 is_stmt 0 view .LVU774
 2597 0030 1D4B     		ldr	r3, .L227
 2598 0032 1E4A     		ldr	r2, .L227+4
 2599 0034 1A60     		str	r2, [r3]
 2600              		.loc 1 1400 7 is_stmt 1 view .LVU775
 2601              	.LBE84:
1401:src/storage.c ****     }
1402:src/storage.c ****     /*
1403:src/storage.c ****      *  Compute space needed
1404:src/storage.c ****      */
1405:src/storage.c ****     count = space_needed = fr->size;
1406:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1407:src/storage.c ****     
1408:src/storage.c ****     /*
1409:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1410:src/storage.c ****      */
1411:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1412:src/storage.c ****     if ( pc != 0 ) {
1413:src/storage.c ****       /*
1414:src/storage.c ****        *  CLP in library
1415:src/storage.c ****        */
1416:src/storage.c ****       unsigned int old_pc = state_pc();
1417:src/storage.c ****       set_pc( pc );
1418:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1419:src/storage.c ****       if ( space_needed <= free ) {
1420:src/storage.c **** 	clrprog();
1421:src/storage.c ****       }
1422:src/storage.c ****       set_pc( old_pc );
1423:src/storage.c ****     }
1424:src/storage.c ****     if ( space_needed > free ) {
1425:src/storage.c ****       error_message( ERR_FLASH_FULL );
1426:src/storage.c ****       return;
1427:src/storage.c ****     }
1428:src/storage.c ****     // 3. Append program
1429:src/storage.c ****     flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1430:src/storage.c ****   }
1431:src/storage.c **** }
 2602              		.loc 1 1431 1 is_stmt 0 view .LVU776
 2603 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
ARM GAS  /tmp/cc09CpAR.s 			page 83


 2604              	.LVL249:
 2605              	.L212:
 2606              	.LBB85:
1405:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2607              		.loc 1 1405 5 is_stmt 1 view .LVU777
1406:src/storage.c ****     
 2608              		.loc 1 1406 41 is_stmt 0 view .LVU778
 2609 003a DFF87880 		ldr	r8, .L227+12
1405:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2610              		.loc 1 1405 26 view .LVU779
 2611 003e 4788     		ldrh	r7, [r0, #2]
 2612              	.LVL250:
1406:src/storage.c ****     
 2613              		.loc 1 1406 5 is_stmt 1 view .LVU780
1406:src/storage.c ****     
 2614              		.loc 1 1406 41 is_stmt 0 view .LVU781
 2615 0040 D8F80030 		ldr	r3, [r8]
1411:src/storage.c ****     if ( pc != 0 ) {
 2616              		.loc 1 1411 10 view .LVU782
 2617 0044 4FF48040 		mov	r0, #16384
 2618              	.LVL251:
1406:src/storage.c ****     
 2619              		.loc 1 1406 41 view .LVU783
 2620 0048 5D88     		ldrh	r5, [r3, #2]
1411:src/storage.c ****     if ( pc != 0 ) {
 2621              		.loc 1 1411 10 view .LVU784
 2622 004a FFF7FEFF 		bl	find_opcode_from
 2623              	.LVL252:
1406:src/storage.c ****     
 2624              		.loc 1 1406 10 view .LVU785
 2625 004e C5F5FF55 		rsb	r5, r5, #8160
 2626 0052 1E35     		adds	r5, r5, #30
 2627              	.LVL253:
1411:src/storage.c ****     if ( pc != 0 ) {
 2628              		.loc 1 1411 5 is_stmt 1 view .LVU786
1412:src/storage.c ****       /*
 2629              		.loc 1 1412 5 view .LVU787
1412:src/storage.c ****       /*
 2630              		.loc 1 1412 8 is_stmt 0 view .LVU788
 2631 0054 60B9     		cbnz	r0, .L224
1405:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2632              		.loc 1 1405 26 view .LVU789
 2633 0056 3E46     		mov	r6, r7
 2634              	.LVL254:
 2635              	.L214:
1424:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2636              		.loc 1 1424 5 is_stmt 1 view .LVU790
1424:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2637              		.loc 1 1424 8 is_stmt 0 view .LVU791
 2638 0058 B542     		cmp	r5, r6
 2639 005a 1DDB     		blt	.L225
1429:src/storage.c ****   }
 2640              		.loc 1 1429 5 is_stmt 1 view .LVU792
1429:src/storage.c ****   }
 2641              		.loc 1 1429 28 is_stmt 0 view .LVU793
 2642 005c D8F80030 		ldr	r3, [r8]
1429:src/storage.c ****   }
ARM GAS  /tmp/cc09CpAR.s 			page 84


 2643              		.loc 1 1429 5 view .LVU794
 2644 0060 5888     		ldrh	r0, [r3, #2]
 2645 0062 211D     		adds	r1, r4, #4
 2646 0064 3B18     		adds	r3, r7, r0
 2647 0066 3A46     		mov	r2, r7
 2648              	.LBE85:
 2649              		.loc 1 1431 1 view .LVU795
 2650 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2651              		.cfi_remember_state
 2652              		.cfi_restore 14
 2653              		.cfi_restore 10
 2654              		.cfi_restore 9
 2655              		.cfi_restore 8
 2656              		.cfi_restore 7
 2657              		.cfi_restore 6
 2658              		.cfi_restore 5
 2659              		.cfi_restore 4
 2660              		.cfi_def_cfa_offset 0
 2661              	.LVL255:
 2662              	.LBB86:
1429:src/storage.c ****   }
 2663              		.loc 1 1429 5 view .LVU796
 2664 006c FFF7FEBF 		b	flash_append
 2665              	.LVL256:
 2666              	.L224:
 2667              		.cfi_restore_state
 2668              	.LBB82:
1416:src/storage.c ****       set_pc( pc );
 2669              		.loc 1 1416 7 is_stmt 1 view .LVU797
1416:src/storage.c ****       set_pc( pc );
 2670              		.loc 1 1416 29 is_stmt 0 view .LVU798
 2671 0070 0F4E     		ldr	r6, .L227+8
 2672 0072 3368     		ldr	r3, [r6]
1416:src/storage.c ****       set_pc( pc );
 2673              		.loc 1 1416 20 view .LVU799
 2674 0074 B3F8E097 		ldrh	r9, [r3, #2016]
 2675              	.LVL257:
1417:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2676              		.loc 1 1417 7 is_stmt 1 view .LVU800
 2677 0078 FFF7FEFF 		bl	set_pc
 2678              	.LVL258:
1418:src/storage.c ****       if ( space_needed <= free ) {
 2679              		.loc 1 1418 7 view .LVU801
1418:src/storage.c ****       if ( space_needed <= free ) {
 2680              		.loc 1 1418 27 is_stmt 0 view .LVU802
 2681 007c 3368     		ldr	r3, [r6]
 2682 007e B3F8EE67 		ldrh	r6, [r3, #2030]
1418:src/storage.c ****       if ( space_needed <= free ) {
 2683              		.loc 1 1418 37 view .LVU803
 2684 0082 B3F8EC37 		ldrh	r3, [r3, #2028]
1418:src/storage.c ****       if ( space_needed <= free ) {
 2685              		.loc 1 1418 25 view .LVU804
 2686 0086 0136     		adds	r6, r6, #1
1418:src/storage.c ****       if ( space_needed <= free ) {
 2687              		.loc 1 1418 35 view .LVU805
 2688 0088 F61A     		subs	r6, r6, r3
1418:src/storage.c ****       if ( space_needed <= free ) {
ARM GAS  /tmp/cc09CpAR.s 			page 85


 2689              		.loc 1 1418 20 view .LVU806
 2690 008a BE1B     		subs	r6, r7, r6
 2691              	.LVL259:
1419:src/storage.c **** 	clrprog();
 2692              		.loc 1 1419 7 is_stmt 1 view .LVU807
1419:src/storage.c **** 	clrprog();
 2693              		.loc 1 1419 10 is_stmt 0 view .LVU808
 2694 008c B542     		cmp	r5, r6
 2695 008e 08DA     		bge	.L226
 2696              	.L215:
1422:src/storage.c ****     }
 2697              		.loc 1 1422 7 is_stmt 1 view .LVU809
 2698 0090 4846     		mov	r0, r9
 2699 0092 FFF7FEFF 		bl	set_pc
 2700              	.LVL260:
 2701 0096 DFE7     		b	.L214
 2702              	.LVL261:
 2703              	.L225:
1422:src/storage.c ****     }
 2704              		.loc 1 1422 7 is_stmt 0 view .LVU810
 2705              	.LBE82:
1425:src/storage.c ****       return;
 2706              		.loc 1 1425 7 is_stmt 1 view .LVU811
 2707              	.LBE86:
 2708              		.loc 1 1431 1 is_stmt 0 view .LVU812
 2709 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2710              		.cfi_remember_state
 2711              		.cfi_restore 14
 2712              		.cfi_restore 10
 2713              		.cfi_restore 9
 2714              		.cfi_restore 8
 2715              		.cfi_restore 7
 2716              		.cfi_restore 6
 2717              		.cfi_restore 5
 2718              		.cfi_restore 4
 2719              		.cfi_def_cfa_offset 0
 2720              	.LVL262:
 2721              	.LBB87:
1425:src/storage.c ****       return;
 2722              		.loc 1 1425 7 view .LVU813
 2723 009c 1720     		movs	r0, #23
 2724 009e FFF7FEBF 		b	error_message
 2725              	.LVL263:
 2726              	.L226:
 2727              		.cfi_restore_state
 2728              	.LBB83:
1420:src/storage.c ****       }
 2729              		.loc 1 1420 2 is_stmt 1 view .LVU814
 2730 00a2 FFF7FEFF 		bl	clrprog
 2731              	.LVL264:
 2732 00a6 F3E7     		b	.L215
 2733              	.L228:
 2734              		.align	2
 2735              	.L227:
 2736 00a8 00000000 		.word	DispMsg
 2737 00ac 00000000 		.word	.LC7
 2738 00b0 00000000 		.word	main_ram
ARM GAS  /tmp/cc09CpAR.s 			page 86


 2739 00b4 00000000 		.word	library_ram
 2740              	.LBE83:
 2741              	.LBE87:
 2742              		.cfi_endproc
 2743              	.LFE43:
 2745              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2746              		.align	2
 2747              	.LC8:
 2748 0000 4572726F 		.ascii	"Error\000"
 2748      7200
 2749 0006 0000     		.align	2
 2750              	.LC9:
 2751 0008 53617665 		.ascii	"Saved\000"
 2751      6400
 2752              		.section	.text.flash_backup,"ax",%progbits
 2753              		.align	1
 2754              		.p2align 2,,3
 2755              		.global	flash_backup
 2756              		.syntax unified
 2757              		.thumb
 2758              		.thumb_func
 2759              		.fpu fpv4-sp-d16
 2761              	flash_backup:
 2762              	.LVL265:
 2763              	.LFB25:
 753:src/storage.c **** 	if ( not_running() ) {
 2764              		.loc 1 753 1 view -0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 0
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
 754:src/storage.c **** 		process_cmdline_set_lift();
 2768              		.loc 1 754 2 view .LVU816
 753:src/storage.c **** 	if ( not_running() ) {
 2769              		.loc 1 753 1 is_stmt 0 view .LVU817
 2770 0000 10B5     		push	{r4, lr}
 2771              		.cfi_def_cfa_offset 8
 2772              		.cfi_offset 4, -8
 2773              		.cfi_offset 14, -4
 754:src/storage.c **** 		process_cmdline_set_lift();
 2774              		.loc 1 754 7 view .LVU818
 2775 0002 FFF7FEFF 		bl	not_running
 2776              	.LVL266:
 754:src/storage.c **** 		process_cmdline_set_lift();
 2777              		.loc 1 754 5 view .LVU819
 2778 0006 00B9     		cbnz	r0, .L236
 766:src/storage.c **** 
 2779              		.loc 1 766 1 view .LVU820
 2780 0008 10BD     		pop	{r4, pc}
 2781              	.L236:
 755:src/storage.c **** 		init_state();
 2782              		.loc 1 755 3 is_stmt 1 view .LVU821
 2783              	.LBB88:
 2784              	.LBB89:
 206:src/storage.c **** 			      Crc, &Crc );
 2785              		.loc 1 206 9 is_stmt 0 view .LVU822
 2786 000a 0F4C     		ldr	r4, .L238
 2787              	.LBE89:
ARM GAS  /tmp/cc09CpAR.s 			page 87


 2788              	.LBE88:
 755:src/storage.c **** 		init_state();
 2789              		.loc 1 755 3 view .LVU823
 2790 000c FFF7FEFF 		bl	process_cmdline_set_lift
 2791              	.LVL267:
 756:src/storage.c **** 		checksum_all();
 2792              		.loc 1 756 3 is_stmt 1 view .LVU824
 2793 0010 FFF7FEFF 		bl	init_state
 2794              	.LVL268:
 757:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2795              		.loc 1 757 3 view .LVU825
 2796              	.LBB91:
 2797              	.LBI88:
 204:src/storage.c **** {
 2798              		.loc 1 204 5 view .LVU826
 2799              	.LBB90:
 206:src/storage.c **** 			      Crc, &Crc );
 2800              		.loc 1 206 2 view .LVU827
 206:src/storage.c **** 			      Crc, &Crc );
 2801              		.loc 1 206 9 is_stmt 0 view .LVU828
 2802 0014 2068     		ldr	r0, [r4]
 2803 0016 40F2FE71 		movw	r1, #2046
 2804 001a 4318     		adds	r3, r0, r1
 2805 001c B0F8FE27 		ldrh	r2, [r0, #2046]
 2806 0020 FFF7FEFF 		bl	test_checksum
 2807              	.LVL269:
 2808              	.LBE90:
 2809              	.LBE91:
 758:src/storage.c **** 			error_message( ERR_IO );
 2810              		.loc 1 758 3 is_stmt 1 view .LVU829
 758:src/storage.c **** 			error_message( ERR_IO );
 2811              		.loc 1 758 8 is_stmt 0 view .LVU830
 2812 0024 094B     		ldr	r3, .L238+4
 2813 0026 2168     		ldr	r1, [r4]
 2814 0028 1868     		ldr	r0, [r3]
 2815 002a 0822     		movs	r2, #8
 2816 002c FFF7FEFF 		bl	program_flash
 2817              	.LVL270:
 758:src/storage.c **** 			error_message( ERR_IO );
 2818              		.loc 1 758 6 view .LVU831
 2819 0030 18B9     		cbnz	r0, .L237
 763:src/storage.c **** 		}
 2820              		.loc 1 763 4 is_stmt 1 view .LVU832
 763:src/storage.c **** 		}
 2821              		.loc 1 763 12 is_stmt 0 view .LVU833
 2822 0032 074B     		ldr	r3, .L238+8
 2823 0034 074A     		ldr	r2, .L238+12
 2824 0036 1A60     		str	r2, [r3]
 766:src/storage.c **** 
 2825              		.loc 1 766 1 view .LVU834
 2826 0038 10BD     		pop	{r4, pc}
 2827              	.L237:
 759:src/storage.c **** 			DispMsg = "Error";
 2828              		.loc 1 759 4 is_stmt 1 view .LVU835
 2829 003a 1120     		movs	r0, #17
 2830 003c FFF7FEFF 		bl	error_message
 2831              	.LVL271:
ARM GAS  /tmp/cc09CpAR.s 			page 88


 760:src/storage.c **** 		}
 2832              		.loc 1 760 4 view .LVU836
 760:src/storage.c **** 		}
 2833              		.loc 1 760 12 is_stmt 0 view .LVU837
 2834 0040 034B     		ldr	r3, .L238+8
 2835 0042 054A     		ldr	r2, .L238+16
 2836 0044 1A60     		str	r2, [r3]
 766:src/storage.c **** 
 2837              		.loc 1 766 1 view .LVU838
 2838 0046 10BD     		pop	{r4, pc}
 2839              	.L239:
 2840              		.align	2
 2841              	.L238:
 2842 0048 00000000 		.word	main_ram
 2843 004c 00000000 		.word	backup_ram
 2844 0050 00000000 		.word	DispMsg
 2845 0054 08000000 		.word	.LC9
 2846 0058 00000000 		.word	.LC8
 2847              		.cfi_endproc
 2848              	.LFE25:
 2850              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2851              		.align	2
 2852              	.LC10:
 2853 0000 52657374 		.ascii	"Restored\000"
 2853      6F726564 
 2853      00
 2854              		.section	.text.flash_restore,"ax",%progbits
 2855              		.align	1
 2856              		.p2align 2,,3
 2857              		.global	flash_restore
 2858              		.syntax unified
 2859              		.thumb
 2860              		.thumb_func
 2861              		.fpu fpv4-sp-d16
 2863              	flash_restore:
 2864              	.LVL272:
 2865              	.LFB26:
 770:src/storage.c **** 	if ( not_running() ) {
 2866              		.loc 1 770 1 is_stmt 1 view -0
 2867              		.cfi_startproc
 2868              		@ args = 0, pretend = 0, frame = 0
 2869              		@ frame_needed = 0, uses_anonymous_args = 0
 771:src/storage.c **** 		if ( checksum_backup() ) {
 2870              		.loc 1 771 2 view .LVU840
 770:src/storage.c **** 	if ( not_running() ) {
 2871              		.loc 1 770 1 is_stmt 0 view .LVU841
 2872 0000 08B5     		push	{r3, lr}
 2873              		.cfi_def_cfa_offset 8
 2874              		.cfi_offset 3, -8
 2875              		.cfi_offset 14, -4
 771:src/storage.c **** 		if ( checksum_backup() ) {
 2876              		.loc 1 771 7 view .LVU842
 2877 0002 FFF7FEFF 		bl	not_running
 2878              	.LVL273:
 771:src/storage.c **** 		if ( checksum_backup() ) {
 2879              		.loc 1 771 5 view .LVU843
 2880 0006 A0B1     		cbz	r0, .L240
ARM GAS  /tmp/cc09CpAR.s 			page 89


 772:src/storage.c **** 			error_message( ERR_INVALID );
 2881              		.loc 1 772 3 is_stmt 1 view .LVU844
 772:src/storage.c **** 			error_message( ERR_INVALID );
 2882              		.loc 1 772 8 is_stmt 0 view .LVU845
 2883 0008 FFF7FEFF 		bl	checksum_backup
 2884              	.LVL274:
 772:src/storage.c **** 			error_message( ERR_INVALID );
 2885              		.loc 1 772 6 view .LVU846
 2886 000c 20B1     		cbz	r0, .L242
 773:src/storage.c **** 		}
 2887              		.loc 1 773 4 is_stmt 1 view .LVU847
 781:src/storage.c **** 
 2888              		.loc 1 781 1 is_stmt 0 view .LVU848
 2889 000e BDE80840 		pop	{r3, lr}
 2890              		.cfi_remember_state
 2891              		.cfi_restore 14
 2892              		.cfi_restore 3
 2893              		.cfi_def_cfa_offset 0
 773:src/storage.c **** 		}
 2894              		.loc 1 773 4 view .LVU849
 2895 0012 1220     		movs	r0, #18
 2896 0014 FFF7FEBF 		b	error_message
 2897              	.LVL275:
 2898              	.L242:
 2899              		.cfi_restore_state
 776:src/storage.c **** 			init_state();
 2900              		.loc 1 776 4 is_stmt 1 view .LVU850
 2901 0018 064B     		ldr	r3, .L247
 2902 001a 074A     		ldr	r2, .L247+4
 2903 001c 1868     		ldr	r0, [r3]
 2904 001e 1168     		ldr	r1, [r2]
 2905 0020 4FF40062 		mov	r2, #2048
 2906 0024 FFF7FEFF 		bl	xcopy
 2907              	.LVL276:
 777:src/storage.c **** 			DispMsg = "Restored";
 2908              		.loc 1 777 4 view .LVU851
 2909 0028 FFF7FEFF 		bl	init_state
 2910              	.LVL277:
 778:src/storage.c **** 		}
 2911              		.loc 1 778 4 view .LVU852
 778:src/storage.c **** 		}
 2912              		.loc 1 778 12 is_stmt 0 view .LVU853
 2913 002c 034B     		ldr	r3, .L247+8
 2914 002e 044A     		ldr	r2, .L247+12
 2915 0030 1A60     		str	r2, [r3]
 2916              	.L240:
 781:src/storage.c **** 
 2917              		.loc 1 781 1 view .LVU854
 2918 0032 08BD     		pop	{r3, pc}
 2919              	.L248:
 2920              		.align	2
 2921              	.L247:
 2922 0034 00000000 		.word	main_ram
 2923 0038 00000000 		.word	backup_ram
 2924 003c 00000000 		.word	DispMsg
 2925 0040 00000000 		.word	.LC10
 2926              		.cfi_endproc
ARM GAS  /tmp/cc09CpAR.s 			page 90


 2927              	.LFE26:
 2929              		.section	.text.load_program,"ax",%progbits
 2930              		.align	1
 2931              		.p2align 2,,3
 2932              		.global	load_program
 2933              		.syntax unified
 2934              		.thumb
 2935              		.thumb_func
 2936              		.fpu fpv4-sp-d16
 2938              	load_program:
 2939              	.LVL278:
 2940              	.LFB27:
 789:src/storage.c **** 	if ( not_running() ) {
 2941              		.loc 1 789 1 is_stmt 1 view -0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 0
 2944              		@ frame_needed = 0, uses_anonymous_args = 0
 790:src/storage.c **** 		if ( checksum_backup() ) {
 2945              		.loc 1 790 2 view .LVU856
 789:src/storage.c **** 	if ( not_running() ) {
 2946              		.loc 1 789 1 is_stmt 0 view .LVU857
 2947 0000 08B5     		push	{r3, lr}
 2948              		.cfi_def_cfa_offset 8
 2949              		.cfi_offset 3, -8
 2950              		.cfi_offset 14, -4
 790:src/storage.c **** 		if ( checksum_backup() ) {
 2951              		.loc 1 790 7 view .LVU858
 2952 0002 FFF7FEFF 		bl	not_running
 2953              	.LVL279:
 790:src/storage.c **** 		if ( checksum_backup() ) {
 2954              		.loc 1 790 5 view .LVU859
 2955 0006 98B1     		cbz	r0, .L249
 791:src/storage.c **** 			/*
 2956              		.loc 1 791 3 is_stmt 1 view .LVU860
 791:src/storage.c **** 			/*
 2957              		.loc 1 791 8 is_stmt 0 view .LVU861
 2958 0008 FFF7FEFF 		bl	checksum_backup
 2959              	.LVL280:
 791:src/storage.c **** 			/*
 2960              		.loc 1 791 6 view .LVU862
 2961 000c 88B9     		cbnz	r0, .L253
 798:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2962              		.loc 1 798 3 is_stmt 1 view .LVU863
 2963              	.LBB92:
 2964              	.LBI92:
 247:src/storage.c **** {
 2965              		.loc 1 247 6 view .LVU864
 2966              	.LBB93:
 249:src/storage.c **** 	stoend();
 2967              		.loc 1 249 2 view .LVU865
 2968 000e FFF7FEFF 		bl	clrretstk_pc
 2969              	.LVL281:
 250:src/storage.c **** }
 2970              		.loc 1 250 2 view .LVU866
 2971              	.LBB94:
 2972              	.LBI94:
 237:src/storage.c **** {
ARM GAS  /tmp/cc09CpAR.s 			page 91


 2973              		.loc 1 237 13 view .LVU867
 2974              	.LBB95:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2975              		.loc 1 239 2 view .LVU868
 2976 0012 0A4B     		ldr	r3, .L254
 2977              	.LBE95:
 2978              	.LBE94:
 2979              	.LBE93:
 2980              	.LBE92:
 799:src/storage.c **** 	}
 2981              		.loc 1 799 19 is_stmt 0 view .LVU869
 2982 0014 0A4A     		ldr	r2, .L254+4
 2983              	.LBB105:
 2984              	.LBB102:
 2985              	.LBB99:
 2986              	.LBB96:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2987              		.loc 1 239 2 view .LVU870
 2988 0016 1B68     		ldr	r3, [r3]
 2989              	.LBE96:
 2990              	.LBE99:
 2991              	.LBE102:
 2992              	.LBE105:
 799:src/storage.c **** 	}
 2993              		.loc 1 799 19 view .LVU871
 2994 0018 1068     		ldr	r0, [r2]
 2995              	.LBB106:
 2996              	.LBB103:
 2997              	.LBB100:
 2998              	.LBB97:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2999              		.loc 1 239 11 view .LVU872
 3000 001a 0122     		movs	r2, #1
 3001 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 240:src/storage.c **** }
 3002              		.loc 1 240 2 is_stmt 1 view .LVU873
 240:src/storage.c **** }
 3003              		.loc 1 240 12 is_stmt 0 view .LVU874
 3004 001e 4FF49D72 		mov	r2, #314
 3005              	.LBE97:
 3006              	.LBE100:
 3007              	.LBE103:
 3008              	.LBE106:
 799:src/storage.c **** 	}
 3009              		.loc 1 799 3 view .LVU875
 3010 0022 4188     		ldrh	r1, [r0, #2]
 3011              	.LBB107:
 3012              	.LBB104:
 3013              	.LBB101:
 3014              	.LBB98:
 240:src/storage.c **** }
 3015              		.loc 1 240 12 view .LVU876
 3016 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 3017              	.LBE98:
 3018              	.LBE101:
 3019              	.LBE104:
 3020              	.LBE107:
ARM GAS  /tmp/cc09CpAR.s 			page 92


 799:src/storage.c **** 	}
 3021              		.loc 1 799 3 is_stmt 1 view .LVU877
 3022 0026 0430     		adds	r0, r0, #4
 801:src/storage.c **** 
 3023              		.loc 1 801 1 is_stmt 0 view .LVU878
 3024 0028 BDE80840 		pop	{r3, lr}
 3025              		.cfi_remember_state
 3026              		.cfi_restore 14
 3027              		.cfi_restore 3
 3028              		.cfi_def_cfa_offset 0
 799:src/storage.c **** 	}
 3029              		.loc 1 799 3 view .LVU879
 3030 002c FFF7FEBF 		b	append_program
 3031              	.LVL282:
 3032              	.L249:
 3033              		.cfi_restore_state
 801:src/storage.c **** 
 3034              		.loc 1 801 1 view .LVU880
 3035 0030 08BD     		pop	{r3, pc}
 3036              	.L253:
 795:src/storage.c **** 			return;
 3037              		.loc 1 795 4 is_stmt 1 view .LVU881
 801:src/storage.c **** 
 3038              		.loc 1 801 1 is_stmt 0 view .LVU882
 3039 0032 BDE80840 		pop	{r3, lr}
 3040              		.cfi_restore 14
 3041              		.cfi_restore 3
 3042              		.cfi_def_cfa_offset 0
 795:src/storage.c **** 			return;
 3043              		.loc 1 795 4 view .LVU883
 3044 0036 1220     		movs	r0, #18
 3045 0038 FFF7FEBF 		b	report_err
 3046              	.LVL283:
 3047              	.L255:
 3048              		.align	2
 3049              	.L254:
 3050 003c 00000000 		.word	main_ram
 3051 0040 00000000 		.word	backup_ram
 3052              		.cfi_endproc
 3053              	.LFE27:
 3055              		.section	.text.load_registers,"ax",%progbits
 3056              		.align	1
 3057              		.p2align 2,,3
 3058              		.global	load_registers
 3059              		.syntax unified
 3060              		.thumb
 3061              		.thumb_func
 3062              		.fpu fpv4-sp-d16
 3064              	load_registers:
 3065              	.LVL284:
 3066              	.LFB28:
 808:src/storage.c **** 	int count;
 3067              		.loc 1 808 1 is_stmt 1 view -0
 3068              		.cfi_startproc
 3069              		@ args = 0, pretend = 0, frame = 0
 3070              		@ frame_needed = 0, uses_anonymous_args = 0
 809:src/storage.c **** 	if ( checksum_backup() ) {
ARM GAS  /tmp/cc09CpAR.s 			page 93


 3071              		.loc 1 809 2 view .LVU885
 810:src/storage.c **** 		/*
 3072              		.loc 1 810 2 view .LVU886
 808:src/storage.c **** 	int count;
 3073              		.loc 1 808 1 is_stmt 0 view .LVU887
 3074 0000 38B5     		push	{r3, r4, r5, lr}
 3075              		.cfi_def_cfa_offset 16
 3076              		.cfi_offset 3, -16
 3077              		.cfi_offset 4, -12
 3078              		.cfi_offset 5, -8
 3079              		.cfi_offset 14, -4
 810:src/storage.c **** 		/*
 3080              		.loc 1 810 7 view .LVU888
 3081 0002 FFF7FEFF 		bl	checksum_backup
 3082              	.LVL285:
 810:src/storage.c **** 		/*
 3083              		.loc 1 810 5 view .LVU889
 3084 0006 E0B9     		cbnz	r0, .L263
 817:src/storage.c **** 	if ( is_dblmode() ) {
 3085              		.loc 1 817 2 is_stmt 1 view .LVU890
 817:src/storage.c **** 	if ( is_dblmode() ) {
 3086              		.loc 1 817 10 is_stmt 0 view .LVU891
 3087 0008 104B     		ldr	r3, .L264
 3088 000a 1B68     		ldr	r3, [r3]
 817:src/storage.c **** 	if ( is_dblmode() ) {
 3089              		.loc 1 817 8 view .LVU892
 3090 000c 93F8CF47 		ldrb	r4, [r3, #1999]	@ zero_extendqisi2
 3091              	.LVL286:
 818:src/storage.c **** 		// Don't clobber the stack in DP mode
 3092              		.loc 1 818 2 is_stmt 1 view .LVU893
 818:src/storage.c **** 		// Don't clobber the stack in DP mode
 3093              		.loc 1 818 7 is_stmt 0 view .LVU894
 3094 0010 FFF7FEFF 		bl	is_dblmode
 3095              	.LVL287:
 818:src/storage.c **** 		// Don't clobber the stack in DP mode
 3096              		.loc 1 818 5 view .LVU895
 3097 0014 00B1     		cbz	r0, .L258
 820:src/storage.c **** 	}
 3098              		.loc 1 820 3 is_stmt 1 view .LVU896
 820:src/storage.c **** 	}
 3099              		.loc 1 820 9 is_stmt 0 view .LVU897
 3100 0016 0C3C     		subs	r4, r4, #12
 3101              	.LVL288:
 3102              	.L258:
 822:src/storage.c **** 		count = BackupFlash._numregs;
 3103              		.loc 1 822 2 is_stmt 1 view .LVU898
 822:src/storage.c **** 		count = BackupFlash._numregs;
 3104              		.loc 1 822 26 is_stmt 0 view .LVU899
 3105 0018 0D4B     		ldr	r3, .L264+4
 3106 001a 1B68     		ldr	r3, [r3]
 3107 001c 93F8CF57 		ldrb	r5, [r3, #1999]	@ zero_extendqisi2
 825:src/storage.c **** }
 3108              		.loc 1 825 9 view .LVU900
 3109 0020 0020     		movs	r0, #0
 3110 0022 A542     		cmp	r5, r4
 3111 0024 A8BF     		it	ge
 3112 0026 2546     		movge	r5, r4
ARM GAS  /tmp/cc09CpAR.s 			page 94


 3113              	.LVL289:
 825:src/storage.c **** }
 3114              		.loc 1 825 2 is_stmt 1 view .LVU901
 825:src/storage.c **** }
 3115              		.loc 1 825 9 is_stmt 0 view .LVU902
 3116 0028 FFF7FEFF 		bl	get_reg_n
 3117              	.LVL290:
 3118 002c 0446     		mov	r4, r0
 825:src/storage.c **** }
 3119              		.loc 1 825 23 view .LVU903
 3120 002e 0020     		movs	r0, #0
 3121 0030 FFF7FEFF 		bl	get_flash_reg_n
 3122              	.LVL291:
 825:src/storage.c **** }
 3123              		.loc 1 825 2 view .LVU904
 3124 0034 EA00     		lsls	r2, r5, #3
 825:src/storage.c **** }
 3125              		.loc 1 825 23 view .LVU905
 3126 0036 0146     		mov	r1, r0
 825:src/storage.c **** }
 3127              		.loc 1 825 2 view .LVU906
 3128 0038 2046     		mov	r0, r4
 826:src/storage.c **** 
 3129              		.loc 1 826 1 view .LVU907
 3130 003a BDE83840 		pop	{r3, r4, r5, lr}
 3131              		.cfi_remember_state
 3132              		.cfi_restore 14
 3133              		.cfi_restore 5
 3134              		.cfi_restore 4
 3135              		.cfi_restore 3
 3136              		.cfi_def_cfa_offset 0
 3137              	.LVL292:
 825:src/storage.c **** }
 3138              		.loc 1 825 2 view .LVU908
 3139 003e FFF7FEBF 		b	xcopy
 3140              	.LVL293:
 3141              	.L263:
 3142              		.cfi_restore_state
 814:src/storage.c **** 		return;
 3143              		.loc 1 814 3 is_stmt 1 view .LVU909
 826:src/storage.c **** 
 3144              		.loc 1 826 1 is_stmt 0 view .LVU910
 3145 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3146              		.cfi_restore 14
 3147              		.cfi_restore 5
 3148              		.cfi_restore 4
 3149              		.cfi_restore 3
 3150              		.cfi_def_cfa_offset 0
 814:src/storage.c **** 		return;
 3151              		.loc 1 814 3 view .LVU911
 3152 0046 1220     		movs	r0, #18
 3153 0048 FFF7FEBF 		b	report_err
 3154              	.LVL294:
 3155              	.L265:
 3156              		.align	2
 3157              	.L264:
 3158 004c 00000000 		.word	main_ram
ARM GAS  /tmp/cc09CpAR.s 			page 95


 3159 0050 00000000 		.word	backup_ram
 3160              		.cfi_endproc
 3161              	.LFE28:
 3163              		.section	.text.load_sigma,"ax",%progbits
 3164              		.align	1
 3165              		.p2align 2,,3
 3166              		.global	load_sigma
 3167              		.syntax unified
 3168              		.thumb
 3169              		.thumb_func
 3170              		.fpu fpv4-sp-d16
 3172              	load_sigma:
 3173              	.LVL295:
 3174              	.LFB29:
 833:src/storage.c **** 	if ( checksum_backup() ) {
 3175              		.loc 1 833 1 is_stmt 1 view -0
 3176              		.cfi_startproc
 3177              		@ args = 0, pretend = 0, frame = 0
 3178              		@ frame_needed = 0, uses_anonymous_args = 0
 834:src/storage.c **** 		/*
 3179              		.loc 1 834 2 view .LVU913
 833:src/storage.c **** 	if ( checksum_backup() ) {
 3180              		.loc 1 833 1 is_stmt 0 view .LVU914
 3181 0000 08B5     		push	{r3, lr}
 3182              		.cfi_def_cfa_offset 8
 3183              		.cfi_offset 3, -8
 3184              		.cfi_offset 14, -4
 834:src/storage.c **** 		/*
 3185              		.loc 1 834 7 view .LVU915
 3186 0002 FFF7FEFF 		bl	checksum_backup
 3187              	.LVL296:
 834:src/storage.c **** 		/*
 3188              		.loc 1 834 5 view .LVU916
 3189 0006 B0B9     		cbnz	r0, .L270
 841:src/storage.c **** 		/*
 3190              		.loc 1 841 2 is_stmt 1 view .LVU917
 841:src/storage.c **** 		/*
 3191              		.loc 1 841 9 is_stmt 0 view .LVU918
 3192 0008 0D4B     		ldr	r3, .L272
 3193 000a 1868     		ldr	r0, [r3]
 841:src/storage.c **** 		/*
 3194              		.loc 1 841 7 view .LVU919
 3195 000c 90F8DD37 		ldrb	r3, [r0, #2013]	@ zero_extendqisi2
 841:src/storage.c **** 		/*
 3196              		.loc 1 841 5 view .LVU920
 3197 0010 9B06     		lsls	r3, r3, #26
 3198 0012 0BD5     		bpl	.L271
 848:src/storage.c **** }
 3199              		.loc 1 848 2 is_stmt 1 view .LVU921
 848:src/storage.c **** }
 3200              		.loc 1 848 56 is_stmt 0 view .LVU922
 3201 0014 90F8CF37 		ldrb	r3, [r0, #1999]	@ zero_extendqisi2
 3202 0018 C3F16403 		rsb	r3, r3, #100
 848:src/storage.c **** }
 3203              		.loc 1 848 81 view .LVU923
 3204 001c 00EBC300 		add	r0, r0, r3, lsl #3
 848:src/storage.c **** }
ARM GAS  /tmp/cc09CpAR.s 			page 96


 3205              		.loc 1 848 2 view .LVU924
 3206 0020 00F56870 		add	r0, r0, #928
 849:src/storage.c **** 
 3207              		.loc 1 849 1 view .LVU925
 3208 0024 BDE80840 		pop	{r3, lr}
 3209              		.cfi_remember_state
 3210              		.cfi_restore 14
 3211              		.cfi_restore 3
 3212              		.cfi_def_cfa_offset 0
 848:src/storage.c **** }
 3213              		.loc 1 848 2 view .LVU926
 3214 0028 FFF7FEBF 		b	sigmaCopy
 3215              	.LVL297:
 3216              	.L271:
 3217              		.cfi_restore_state
 845:src/storage.c **** 		return;
 3218              		.loc 1 845 3 is_stmt 1 view .LVU927
 849:src/storage.c **** 
 3219              		.loc 1 849 1 is_stmt 0 view .LVU928
 3220 002c BDE80840 		pop	{r3, lr}
 3221              		.cfi_remember_state
 3222              		.cfi_restore 14
 3223              		.cfi_restore 3
 3224              		.cfi_def_cfa_offset 0
 845:src/storage.c **** 		return;
 3225              		.loc 1 845 3 view .LVU929
 3226 0030 0F20     		movs	r0, #15
 3227 0032 FFF7FEBF 		b	report_err
 3228              	.LVL298:
 3229              	.L270:
 3230              		.cfi_restore_state
 838:src/storage.c **** 		return;
 3231              		.loc 1 838 3 is_stmt 1 view .LVU930
 849:src/storage.c **** 
 3232              		.loc 1 849 1 is_stmt 0 view .LVU931
 3233 0036 BDE80840 		pop	{r3, lr}
 3234              		.cfi_restore 14
 3235              		.cfi_restore 3
 3236              		.cfi_def_cfa_offset 0
 838:src/storage.c **** 		return;
 3237              		.loc 1 838 3 view .LVU932
 3238 003a 1220     		movs	r0, #18
 3239 003c FFF7FEBF 		b	report_err
 3240              	.LVL299:
 3241              	.L273:
 3242              		.align	2
 3243              	.L272:
 3244 0040 00000000 		.word	backup_ram
 3245              		.cfi_endproc
 3246              	.LFE29:
 3248              		.section	.text.load_state,"ax",%progbits
 3249              		.align	1
 3250              		.p2align 2,,3
 3251              		.global	load_state
 3252              		.syntax unified
 3253              		.thumb
 3254              		.thumb_func
ARM GAS  /tmp/cc09CpAR.s 			page 97


 3255              		.fpu fpv4-sp-d16
 3257              	load_state:
 3258              	.LVL300:
 3259              	.LFB30:
 856:src/storage.c **** 	if ( not_running() ) {
 3260              		.loc 1 856 1 is_stmt 1 view -0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 0, uses_anonymous_args = 0
 857:src/storage.c **** 		if ( checksum_backup() ) {
 3264              		.loc 1 857 2 view .LVU934
 856:src/storage.c **** 	if ( not_running() ) {
 3265              		.loc 1 856 1 is_stmt 0 view .LVU935
 3266 0000 08B5     		push	{r3, lr}
 3267              		.cfi_def_cfa_offset 8
 3268              		.cfi_offset 3, -8
 3269              		.cfi_offset 14, -4
 857:src/storage.c **** 		if ( checksum_backup() ) {
 3270              		.loc 1 857 7 view .LVU936
 3271 0002 FFF7FEFF 		bl	not_running
 3272              	.LVL301:
 857:src/storage.c **** 		if ( checksum_backup() ) {
 3273              		.loc 1 857 5 view .LVU937
 3274 0006 98B1     		cbz	r0, .L274
 858:src/storage.c **** 			/*
 3275              		.loc 1 858 3 is_stmt 1 view .LVU938
 858:src/storage.c **** 			/*
 3276              		.loc 1 858 8 is_stmt 0 view .LVU939
 3277 0008 FFF7FEFF 		bl	checksum_backup
 3278              	.LVL302:
 858:src/storage.c **** 			/*
 3279              		.loc 1 858 6 view .LVU940
 3280 000c 88B9     		cbnz	r0, .L278
 865:src/storage.c **** 		init_state();
 3281              		.loc 1 865 3 is_stmt 1 view .LVU941
 865:src/storage.c **** 		init_state();
 3282              		.loc 1 865 11 is_stmt 0 view .LVU942
 3283 000e 0B4B     		ldr	r3, .L279
 865:src/storage.c **** 		init_state();
 3284              		.loc 1 865 20 view .LVU943
 3285 0010 0B4A     		ldr	r2, .L279+4
 865:src/storage.c **** 		init_state();
 3286              		.loc 1 865 10 view .LVU944
 3287 0012 1868     		ldr	r0, [r3]
 865:src/storage.c **** 		init_state();
 3288              		.loc 1 865 19 view .LVU945
 3289 0014 1168     		ldr	r1, [r2]
 865:src/storage.c **** 		init_state();
 3290              		.loc 1 865 3 view .LVU946
 3291 0016 00F5FA60 		add	r0, r0, #2000
 3292 001a 01F5FA61 		add	r1, r1, #2000
 3293 001e 2E22     		movs	r2, #46
 3294 0020 FFF7FEFF 		bl	xcopy
 3295              	.LVL303:
 866:src/storage.c **** 		clrretstk_pc();
 3296              		.loc 1 866 3 is_stmt 1 view .LVU947
 3297 0024 FFF7FEFF 		bl	init_state
ARM GAS  /tmp/cc09CpAR.s 			page 98


 3298              	.LVL304:
 867:src/storage.c **** 	}
 3299              		.loc 1 867 3 view .LVU948
 869:src/storage.c **** 
 3300              		.loc 1 869 1 is_stmt 0 view .LVU949
 3301 0028 BDE80840 		pop	{r3, lr}
 3302              		.cfi_remember_state
 3303              		.cfi_restore 14
 3304              		.cfi_restore 3
 3305              		.cfi_def_cfa_offset 0
 867:src/storage.c **** 	}
 3306              		.loc 1 867 3 view .LVU950
 3307 002c FFF7FEBF 		b	clrretstk_pc
 3308              	.LVL305:
 3309              	.L274:
 3310              		.cfi_restore_state
 869:src/storage.c **** 
 3311              		.loc 1 869 1 view .LVU951
 3312 0030 08BD     		pop	{r3, pc}
 3313              	.L278:
 862:src/storage.c **** 			return;
 3314              		.loc 1 862 4 is_stmt 1 view .LVU952
 869:src/storage.c **** 
 3315              		.loc 1 869 1 is_stmt 0 view .LVU953
 3316 0032 BDE80840 		pop	{r3, lr}
 3317              		.cfi_restore 14
 3318              		.cfi_restore 3
 3319              		.cfi_def_cfa_offset 0
 862:src/storage.c **** 			return;
 3320              		.loc 1 862 4 view .LVU954
 3321 0036 1220     		movs	r0, #18
 3322 0038 FFF7FEBF 		b	report_err
 3323              	.LVL306:
 3324              	.L280:
 3325              		.align	2
 3326              	.L279:
 3327 003c 00000000 		.word	main_ram
 3328 0040 00000000 		.word	backup_ram
 3329              		.cfi_endproc
 3330              	.LFE30:
 3332              		.section	.text.store_program,"ax",%progbits
 3333              		.align	1
 3334              		.p2align 2,,3
 3335              		.global	store_program
 3336              		.syntax unified
 3337              		.thumb
 3338              		.thumb_func
 3339              		.fpu fpv4-sp-d16
 3341              	store_program:
 3342              	.LVL307:
 3343              	.LFB31:
 876:src/storage.c **** 	opcode lbl; 
 3344              		.loc 1 876 1 is_stmt 1 view -0
 3345              		.cfi_startproc
 3346              		@ args = 0, pretend = 0, frame = 0
 3347              		@ frame_needed = 0, uses_anonymous_args = 0
 877:src/storage.c **** 	unsigned int pc;
ARM GAS  /tmp/cc09CpAR.s 			page 99


 3348              		.loc 1 877 2 view .LVU956
 878:src/storage.c **** 	int space_needed, count, free;
 3349              		.loc 1 878 2 view .LVU957
 879:src/storage.c **** 
 3350              		.loc 1 879 2 view .LVU958
 881:src/storage.c **** 		/*
 3351              		.loc 1 881 2 view .LVU959
 876:src/storage.c **** 	opcode lbl; 
 3352              		.loc 1 876 1 is_stmt 0 view .LVU960
 3353 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3354              		.cfi_def_cfa_offset 24
 3355              		.cfi_offset 4, -24
 3356              		.cfi_offset 5, -20
 3357              		.cfi_offset 6, -16
 3358              		.cfi_offset 7, -12
 3359              		.cfi_offset 8, -8
 3360              		.cfi_offset 14, -4
 881:src/storage.c **** 		/*
 3361              		.loc 1 881 7 view .LVU961
 3362 0004 FFF7FEFF 		bl	not_running
 3363              	.LVL308:
 881:src/storage.c **** 		/*
 3364              		.loc 1 881 5 view .LVU962
 3365 0008 0028     		cmp	r0, #0
 3366 000a 3BD0     		beq	.L281
 885:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3367              		.loc 1 885 3 is_stmt 1 view .LVU963
 3368              	.LVL309:
 886:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3369              		.loc 1 886 3 view .LVU964
 885:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3370              		.loc 1 885 8 is_stmt 0 view .LVU965
 3371 000c 314C     		ldr	r4, .L295
 3372              	.LVL310:
 885:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3373              		.loc 1 885 8 view .LVU966
 3374 000e 2368     		ldr	r3, [r4]
 3375 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 886:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3376              		.loc 1 886 6 view .LVU967
 3377 0014 5B04     		lsls	r3, r3, #17
 3378 0016 37D4     		bmi	.L291
 893:src/storage.c **** 		lbl = getprog( ProgBegin );
 3379              		.loc 1 893 3 is_stmt 1 view .LVU968
 3380 0018 0120     		movs	r0, #1
 3381 001a FFF7FEFF 		bl	update_program_bounds
 3382              	.LVL311:
 894:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3383              		.loc 1 894 3 view .LVU969
 894:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3384              		.loc 1 894 18 is_stmt 0 view .LVU970
 3385 001e 2368     		ldr	r3, [r4]
 894:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3386              		.loc 1 894 9 view .LVU971
 3387 0020 B3F8EC07 		ldrh	r0, [r3, #2028]
 3388 0024 FFF7FEFF 		bl	getprog
 3389              	.LVL312:
ARM GAS  /tmp/cc09CpAR.s 			page 100


 895:src/storage.c **** 			report_err( ERR_NO_LBL );
 3390              		.loc 1 895 3 is_stmt 1 view .LVU972
 895:src/storage.c **** 			report_err( ERR_NO_LBL );
 3391              		.loc 1 895 9 is_stmt 0 view .LVU973
 3392 0028 00F47043 		and	r3, r0, #61440
 895:src/storage.c **** 			report_err( ERR_NO_LBL );
 3393              		.loc 1 895 6 view .LVU974
 3394 002c B3F5704F 		cmp	r3, #61440
 3395 0030 2FD1     		bne	.L284
 895:src/storage.c **** 			report_err( ERR_NO_LBL );
 3396              		.loc 1 895 20 discriminator 1 view .LVU975
 3397 0032 10F4706F 		tst	r0, #3840
 895:src/storage.c **** 			report_err( ERR_NO_LBL );
 3398              		.loc 1 895 23 discriminator 1 view .LVU976
 3399 0036 C0F30322 		ubfx	r2, r0, #8, #4
 895:src/storage.c **** 			report_err( ERR_NO_LBL );
 3400              		.loc 1 895 20 discriminator 1 view .LVU977
 3401 003a 2AD1     		bne	.L284
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3402              		.loc 1 902 3 is_stmt 1 view .LVU978
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3403              		.loc 1 902 30 is_stmt 0 view .LVU979
 3404 003c 2368     		ldr	r3, [r4]
 903:src/storage.c **** 
 3405              		.loc 1 903 39 view .LVU980
 3406 003e 264E     		ldr	r6, .L295+4
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3407              		.loc 1 902 30 view .LVU981
 3408 0040 B3F8EE57 		ldrh	r5, [r3, #2030]
 903:src/storage.c **** 
 3409              		.loc 1 903 39 view .LVU982
 3410 0044 3168     		ldr	r1, [r6]
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3411              		.loc 1 902 40 view .LVU983
 3412 0046 B3F8EC37 		ldrh	r3, [r3, #2028]
 903:src/storage.c **** 
 3413              		.loc 1 903 39 view .LVU984
 3414 004a 4F88     		ldrh	r7, [r1, #2]
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3415              		.loc 1 902 28 view .LVU985
 3416 004c 0135     		adds	r5, r5, #1
 908:src/storage.c **** 		if ( pc != 0 ) {
 3417              		.loc 1 908 8 view .LVU986
 3418 004e 0146     		mov	r1, r0
 3419 0050 4FF48040 		mov	r0, #16384
 3420              	.LVL313:
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3421              		.loc 1 902 24 view .LVU987
 3422 0054 ED1A     		subs	r5, r5, r3
 3423              	.LVL314:
 903:src/storage.c **** 
 3424              		.loc 1 903 3 is_stmt 1 view .LVU988
 908:src/storage.c **** 		if ( pc != 0 ) {
 3425              		.loc 1 908 8 is_stmt 0 view .LVU989
 3426 0056 FFF7FEFF 		bl	find_opcode_from
 3427              	.LVL315:
 903:src/storage.c **** 
ARM GAS  /tmp/cc09CpAR.s 			page 101


 3428              		.loc 1 903 8 view .LVU990
 3429 005a C7F5FF57 		rsb	r7, r7, #8160
 3430 005e 1E37     		adds	r7, r7, #30
 3431              	.LVL316:
 908:src/storage.c **** 		if ( pc != 0 ) {
 3432              		.loc 1 908 3 is_stmt 1 view .LVU991
 909:src/storage.c **** 			/*
 3433              		.loc 1 909 3 view .LVU992
 909:src/storage.c **** 			/*
 3434              		.loc 1 909 6 is_stmt 0 view .LVU993
 3435 0060 08BB     		cbnz	r0, .L292
 902:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3436              		.loc 1 902 24 view .LVU994
 3437 0062 2C46     		mov	r4, r5
 3438              	.LVL317:
 3439              	.L286:
 921:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3440              		.loc 1 921 3 is_stmt 1 view .LVU995
 921:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3441              		.loc 1 921 6 is_stmt 0 view .LVU996
 3442 0064 BC42     		cmp	r4, r7
 3443 0066 19DC     		bgt	.L293
 926:src/storage.c **** 	}
 3444              		.loc 1 926 3 is_stmt 1 view .LVU997
 926:src/storage.c **** 	}
 3445              		.loc 1 926 26 is_stmt 0 view .LVU998
 3446 0068 3368     		ldr	r3, [r6]
 926:src/storage.c **** 	}
 3447              		.loc 1 926 3 view .LVU999
 3448 006a 5C88     		ldrh	r4, [r3, #2]
 3449              	.LVL318:
 926:src/storage.c **** 	}
 3450              		.loc 1 926 3 view .LVU1000
 3451 006c FFF7FEFF 		bl	get_current_prog
 3452              	.LVL319:
 926:src/storage.c **** 	}
 3453              		.loc 1 926 69 view .LVU1001
 3454 0070 3368     		ldr	r3, [r6]
 3455 0072 5B88     		ldrh	r3, [r3, #2]
 926:src/storage.c **** 	}
 3456              		.loc 1 926 3 view .LVU1002
 3457 0074 0146     		mov	r1, r0
 3458 0076 2B44     		add	r3, r3, r5
 3459 0078 2046     		mov	r0, r4
 3460 007a 2A46     		mov	r2, r5
 928:src/storage.c **** 
 3461              		.loc 1 928 1 view .LVU1003
 3462 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3463              		.cfi_remember_state
 3464              		.cfi_restore 14
 3465              		.cfi_restore 8
 3466              		.cfi_restore 7
 3467              		.cfi_restore 6
 3468              		.cfi_restore 5
 3469              		.cfi_restore 4
 3470              		.cfi_def_cfa_offset 0
 3471              	.LVL320:
ARM GAS  /tmp/cc09CpAR.s 			page 102


 926:src/storage.c **** 	}
 3472              		.loc 1 926 3 view .LVU1004
 3473 0080 FFF7FEBF 		b	flash_append
 3474              	.LVL321:
 3475              	.L281:
 3476              		.cfi_restore_state
 928:src/storage.c **** 
 3477              		.loc 1 928 1 view .LVU1005
 3478 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3479              	.LVL322:
 3480              	.L291:
 887:src/storage.c **** 			return;
 3481              		.loc 1 887 4 is_stmt 1 view .LVU1006
 928:src/storage.c **** 
 3482              		.loc 1 928 1 is_stmt 0 view .LVU1007
 3483 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3484              		.cfi_remember_state
 3485              		.cfi_restore 14
 3486              		.cfi_restore 8
 3487              		.cfi_restore 7
 3488              		.cfi_restore 6
 3489              		.cfi_restore 5
 3490              		.cfi_restore 4
 3491              		.cfi_def_cfa_offset 0
 3492              	.LVL323:
 887:src/storage.c **** 			return;
 3493              		.loc 1 887 4 view .LVU1008
 3494 008c 0720     		movs	r0, #7
 3495 008e FFF7FEBF 		b	report_err
 3496              	.LVL324:
 3497              	.L284:
 3498              		.cfi_restore_state
 896:src/storage.c **** 			return;
 3499              		.loc 1 896 4 is_stmt 1 view .LVU1009
 928:src/storage.c **** 
 3500              		.loc 1 928 1 is_stmt 0 view .LVU1010
 3501 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3502              		.cfi_remember_state
 3503              		.cfi_restore 14
 3504              		.cfi_restore 8
 3505              		.cfi_restore 7
 3506              		.cfi_restore 6
 3507              		.cfi_restore 5
 3508              		.cfi_restore 4
 3509              		.cfi_def_cfa_offset 0
 896:src/storage.c **** 			return;
 3510              		.loc 1 896 4 view .LVU1011
 3511 0096 0620     		movs	r0, #6
 3512              	.LVL325:
 896:src/storage.c **** 			return;
 3513              		.loc 1 896 4 view .LVU1012
 3514 0098 FFF7FEBF 		b	report_err
 3515              	.LVL326:
 3516              	.L293:
 3517              		.cfi_restore_state
 922:src/storage.c **** 			return;
 3518              		.loc 1 922 4 is_stmt 1 view .LVU1013
ARM GAS  /tmp/cc09CpAR.s 			page 103


 928:src/storage.c **** 
 3519              		.loc 1 928 1 is_stmt 0 view .LVU1014
 3520 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3521              		.cfi_remember_state
 3522              		.cfi_restore 14
 3523              		.cfi_restore 8
 3524              		.cfi_restore 7
 3525              		.cfi_restore 6
 3526              		.cfi_restore 5
 3527              		.cfi_restore 4
 3528              		.cfi_def_cfa_offset 0
 3529              	.LVL327:
 922:src/storage.c **** 			return;
 3530              		.loc 1 922 4 view .LVU1015
 3531 00a0 1720     		movs	r0, #23
 3532 00a2 FFF7FEBF 		b	report_err
 3533              	.LVL328:
 3534              	.L292:
 3535              		.cfi_restore_state
 3536              	.LBB108:
 913:src/storage.c **** 			set_pc( pc );
 3537              		.loc 1 913 4 is_stmt 1 view .LVU1016
 913:src/storage.c **** 			set_pc( pc );
 3538              		.loc 1 913 26 is_stmt 0 view .LVU1017
 3539 00a6 2368     		ldr	r3, [r4]
 913:src/storage.c **** 			set_pc( pc );
 3540              		.loc 1 913 17 view .LVU1018
 3541 00a8 B3F8E087 		ldrh	r8, [r3, #2016]
 3542              	.LVL329:
 914:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3543              		.loc 1 914 4 is_stmt 1 view .LVU1019
 3544 00ac FFF7FEFF 		bl	set_pc
 3545              	.LVL330:
 915:src/storage.c **** 			if ( space_needed <= free ) {
 3546              		.loc 1 915 4 view .LVU1020
 915:src/storage.c **** 			if ( space_needed <= free ) {
 3547              		.loc 1 915 24 is_stmt 0 view .LVU1021
 3548 00b0 2368     		ldr	r3, [r4]
 3549 00b2 B3F8EE47 		ldrh	r4, [r3, #2030]
 915:src/storage.c **** 			if ( space_needed <= free ) {
 3550              		.loc 1 915 34 view .LVU1022
 3551 00b6 B3F8EC37 		ldrh	r3, [r3, #2028]
 915:src/storage.c **** 			if ( space_needed <= free ) {
 3552              		.loc 1 915 22 view .LVU1023
 3553 00ba 0134     		adds	r4, r4, #1
 915:src/storage.c **** 			if ( space_needed <= free ) {
 3554              		.loc 1 915 32 view .LVU1024
 3555 00bc E41A     		subs	r4, r4, r3
 915:src/storage.c **** 			if ( space_needed <= free ) {
 3556              		.loc 1 915 17 view .LVU1025
 3557 00be 2C1B     		subs	r4, r5, r4
 3558              	.LVL331:
 916:src/storage.c **** 				clrprog();
 3559              		.loc 1 916 4 is_stmt 1 view .LVU1026
 916:src/storage.c **** 				clrprog();
 3560              		.loc 1 916 7 is_stmt 0 view .LVU1027
 3561 00c0 A742     		cmp	r7, r4
ARM GAS  /tmp/cc09CpAR.s 			page 104


 3562 00c2 03DA     		bge	.L294
 3563              	.L287:
 919:src/storage.c **** 		}
 3564              		.loc 1 919 4 is_stmt 1 view .LVU1028
 3565 00c4 4046     		mov	r0, r8
 3566 00c6 FFF7FEFF 		bl	set_pc
 3567              	.LVL332:
 3568 00ca CBE7     		b	.L286
 3569              	.L294:
 917:src/storage.c **** 			}
 3570              		.loc 1 917 5 view .LVU1029
 3571 00cc FFF7FEFF 		bl	clrprog
 3572              	.LVL333:
 3573 00d0 F8E7     		b	.L287
 3574              	.L296:
 3575 00d2 00BF     		.align	2
 3576              	.L295:
 3577 00d4 00000000 		.word	main_ram
 3578 00d8 00000000 		.word	library_ram
 3579              	.LBE108:
 3580              		.cfi_endproc
 3581              	.LFE31:
 3583              		.section	.text.recall_program,"ax",%progbits
 3584              		.align	1
 3585              		.p2align 2,,3
 3586              		.global	recall_program
 3587              		.syntax unified
 3588              		.thumb
 3589              		.thumb_func
 3590              		.fpu fpv4-sp-d16
 3592              	recall_program:
 3593              	.LVL334:
 3594              	.LFB32:
 935:src/storage.c **** 	if ( not_running() ) {
 3595              		.loc 1 935 1 view -0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 0
 3598              		@ frame_needed = 0, uses_anonymous_args = 0
 936:src/storage.c **** 		if ( state_pc() == 0 ) {
 3599              		.loc 1 936 2 view .LVU1031
 935:src/storage.c **** 	if ( not_running() ) {
 3600              		.loc 1 935 1 is_stmt 0 view .LVU1032
 3601 0000 10B5     		push	{r4, lr}
 3602              		.cfi_def_cfa_offset 8
 3603              		.cfi_offset 4, -8
 3604              		.cfi_offset 14, -4
 936:src/storage.c **** 		if ( state_pc() == 0 ) {
 3605              		.loc 1 936 7 view .LVU1033
 3606 0002 FFF7FEFF 		bl	not_running
 3607              	.LVL335:
 936:src/storage.c **** 		if ( state_pc() == 0 ) {
 3608              		.loc 1 936 5 view .LVU1034
 3609 0006 B8B1     		cbz	r0, .L297
 937:src/storage.c **** 			State.pc = 1;
 3610              		.loc 1 937 3 is_stmt 1 view .LVU1035
 937:src/storage.c **** 			State.pc = 1;
 3611              		.loc 1 937 8 is_stmt 0 view .LVU1036
ARM GAS  /tmp/cc09CpAR.s 			page 105


 3612 0008 0C4C     		ldr	r4, .L301
 3613 000a 2368     		ldr	r3, [r4]
 937:src/storage.c **** 			State.pc = 1;
 3614              		.loc 1 937 6 view .LVU1037
 3615 000c B3F8E027 		ldrh	r2, [r3, #2016]
 3616 0010 12B9     		cbnz	r2, .L299
 938:src/storage.c **** 		}
 3617              		.loc 1 938 4 is_stmt 1 view .LVU1038
 938:src/storage.c **** 		}
 3618              		.loc 1 938 13 is_stmt 0 view .LVU1039
 3619 0012 0122     		movs	r2, #1
 3620 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 3621              	.L299:
 940:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3622              		.loc 1 940 3 is_stmt 1 view .LVU1040
 3623 0018 0120     		movs	r0, #1
 3624 001a FFF7FEFF 		bl	update_program_bounds
 3625              	.LVL336:
 941:src/storage.c **** 	}
 3626              		.loc 1 941 3 view .LVU1041
 3627 001e FFF7FEFF 		bl	get_current_prog
 3628              	.LVL337:
 941:src/storage.c **** 	}
 3629              		.loc 1 941 39 is_stmt 0 view .LVU1042
 3630 0022 2368     		ldr	r3, [r4]
 3631 0024 B3F8EE17 		ldrh	r1, [r3, #2030]
 941:src/storage.c **** 	}
 3632              		.loc 1 941 49 view .LVU1043
 3633 0028 B3F8EC37 		ldrh	r3, [r3, #2028]
 941:src/storage.c **** 	}
 3634              		.loc 1 941 47 view .LVU1044
 3635 002c C91A     		subs	r1, r1, r3
 943:src/storage.c **** 
 3636              		.loc 1 943 1 view .LVU1045
 3637 002e BDE81040 		pop	{r4, lr}
 3638              		.cfi_remember_state
 3639              		.cfi_restore 14
 3640              		.cfi_restore 4
 3641              		.cfi_def_cfa_offset 0
 941:src/storage.c **** 	}
 3642              		.loc 1 941 3 view .LVU1046
 3643 0032 0131     		adds	r1, r1, #1
 3644 0034 FFF7FEBF 		b	append_program
 3645              	.LVL338:
 3646              	.L297:
 3647              		.cfi_restore_state
 943:src/storage.c **** 
 3648              		.loc 1 943 1 view .LVU1047
 3649 0038 10BD     		pop	{r4, pc}
 3650              	.L302:
 3651 003a 00BF     		.align	2
 3652              	.L301:
 3653 003c 00000000 		.word	main_ram
 3654              		.cfi_endproc
 3655              	.LFE32:
 3657              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3658              		.align	2
ARM GAS  /tmp/cc09CpAR.s 			page 106


 3659              	.LC11:
 3660 0000 45727220 		.ascii	"Err slf1\000"
 3660      736C6631 
 3660      00
 3661 0009 000000   		.align	2
 3662              	.LC12:
 3663 000c 2E6C6962 		.ascii	".lib\000"
 3663      00
 3664 0011 000000   		.align	2
 3665              	.LC13:
 3666 0014 53617665 		.ascii	"Save Library File\000"
 3666      204C6962 
 3666      72617279 
 3666      2046696C 
 3666      6500
 3667 0026 0000     		.align	2
 3668              	.LC14:
 3669 0028 45727220 		.ascii	"Err slf2\000"
 3669      736C6632 
 3669      00
 3670              		.section	.text.save_lib_file,"ax",%progbits
 3671              		.align	1
 3672              		.p2align 2,,3
 3673              		.global	save_lib_file
 3674              		.syntax unified
 3675              		.thumb
 3676              		.thumb_func
 3677              		.fpu fpv4-sp-d16
 3679              	save_lib_file:
 3680              	.LVL339:
 3681              	.LFB33:
1084:src/storage.c ****   FRESULT f;
 3682              		.loc 1 1084 30 is_stmt 1 view -0
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 8
 3685              		@ frame_needed = 0, uses_anonymous_args = 0
1085:src/storage.c ****   int fss;
 3686              		.loc 1 1085 3 view .LVU1049
1086:src/storage.c ****   int data = WRITE;
 3687              		.loc 1 1086 3 view .LVU1050
1087:src/storage.c ****   uint x=0;
 3688              		.loc 1 1087 3 view .LVU1051
1084:src/storage.c ****   FRESULT f;
 3689              		.loc 1 1084 30 is_stmt 0 view .LVU1052
 3690 0000 70B5     		push	{r4, r5, r6, lr}
 3691              		.cfi_def_cfa_offset 16
 3692              		.cfi_offset 4, -16
 3693              		.cfi_offset 5, -12
 3694              		.cfi_offset 6, -8
 3695              		.cfi_offset 14, -4
 3696 0002 86B0     		sub	sp, sp, #24
 3697              		.cfi_def_cfa_offset 40
1087:src/storage.c ****   uint x=0;
 3698              		.loc 1 1087 7 view .LVU1053
 3699 0004 0125     		movs	r5, #1
1088:src/storage.c **** 
 3700              		.loc 1 1088 8 view .LVU1054
ARM GAS  /tmp/cc09CpAR.s 			page 107


 3701 0006 0023     		movs	r3, #0
1084:src/storage.c ****   FRESULT f;
 3702              		.loc 1 1084 30 view .LVU1055
 3703 0008 0446     		mov	r4, r0
1090:src/storage.c ****   if (i == 0) {
 3704              		.loc 1 1090 3 view .LVU1056
 3705 000a 1E4E     		ldr	r6, .L313
1087:src/storage.c ****   uint x=0;
 3706              		.loc 1 1087 7 view .LVU1057
 3707 000c 0495     		str	r5, [sp, #16]
1088:src/storage.c **** 
 3708              		.loc 1 1088 3 is_stmt 1 view .LVU1058
1090:src/storage.c ****   if (i == 0) {
 3709              		.loc 1 1090 3 is_stmt 0 view .LVU1059
 3710 000e 2846     		mov	r0, r5
 3711              	.LVL340:
1088:src/storage.c **** 
 3712              		.loc 1 1088 8 view .LVU1060
 3713 0010 0593     		str	r3, [sp, #20]
1090:src/storage.c ****   if (i == 0) {
 3714              		.loc 1 1090 3 is_stmt 1 view .LVU1061
 3715 0012 B047     		blx	r6
 3716              	.LVL341:
1091:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3717              		.loc 1 1091 3 view .LVU1062
1091:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3718              		.loc 1 1091 6 is_stmt 0 view .LVU1063
 3719 0014 CCB9     		cbnz	r4, .L304
1092:src/storage.c ****     if (f != FR_OK) {
 3720              		.loc 1 1092 5 is_stmt 1 view .LVU1064
1092:src/storage.c ****     if (f != FR_OK) {
 3721              		.loc 1 1092 9 is_stmt 0 view .LVU1065
 3722 0016 1C4D     		ldr	r5, .L313+4
 3723 0018 1C4B     		ldr	r3, .L313+8
 3724 001a 6868     		ldr	r0, [r5, #4]
 3725 001c 1C49     		ldr	r1, .L313+12
 3726 001e 0B22     		movs	r2, #11
 3727 0020 9847     		blx	r3
 3728              	.LVL342:
1093:src/storage.c ****       f_close (FPT);
 3729              		.loc 1 1093 5 is_stmt 1 view .LVU1066
1093:src/storage.c ****       f_close (FPT);
 3730              		.loc 1 1093 8 is_stmt 0 view .LVU1067
 3731 0022 20BB     		cbnz	r0, .L305
 3732              	.LVL343:
 3733              	.L309:
1105:src/storage.c ****   if ( f != FR_OK ) {
 3734              		.loc 1 1105 3 is_stmt 1 view .LVU1068
1105:src/storage.c ****   if ( f != FR_OK ) {
 3735              		.loc 1 1105 7 is_stmt 0 view .LVU1069
 3736 0024 1B4A     		ldr	r2, .L313+16
 3737 0026 184B     		ldr	r3, .L313+4
 3738 0028 1168     		ldr	r1, [r2]
 3739 002a 5868     		ldr	r0, [r3, #4]
 3740 002c 1A4C     		ldr	r4, .L313+20
 3741 002e 05AB     		add	r3, sp, #20
 3742 0030 4FF48042 		mov	r2, #16384
ARM GAS  /tmp/cc09CpAR.s 			page 108


 3743 0034 A047     		blx	r4
 3744              	.LVL344:
1106:src/storage.c ****     DispMsg = "Err slf2";
 3745              		.loc 1 1106 3 is_stmt 1 view .LVU1070
1106:src/storage.c ****     DispMsg = "Err slf2";
 3746              		.loc 1 1106 6 is_stmt 0 view .LVU1071
 3747 0036 B0B9     		cbnz	r0, .L306
 3748              	.L307:
1109:src/storage.c ****   sys_disk_write_enable(0);
 3749              		.loc 1 1109 3 is_stmt 1 view .LVU1072
 3750 0038 134A     		ldr	r2, .L313+4
 3751 003a 184B     		ldr	r3, .L313+24
 3752 003c 5068     		ldr	r0, [r2, #4]
 3753              	.LVL345:
1109:src/storage.c ****   sys_disk_write_enable(0);
 3754              		.loc 1 1109 3 is_stmt 0 view .LVU1073
 3755 003e 9847     		blx	r3
 3756              	.LVL346:
1110:src/storage.c **** }
 3757              		.loc 1 1110 3 is_stmt 1 view .LVU1074
 3758 0040 104B     		ldr	r3, .L313
 3759 0042 0020     		movs	r0, #0
 3760 0044 9847     		blx	r3
 3761              	.LVL347:
1111:src/storage.c **** 
 3762              		.loc 1 1111 1 is_stmt 0 view .LVU1075
 3763 0046 06B0     		add	sp, sp, #24
 3764              		.cfi_remember_state
 3765              		.cfi_def_cfa_offset 16
 3766              		@ sp needed
 3767 0048 70BD     		pop	{r4, r5, r6, pc}
 3768              	.LVL348:
 3769              	.L304:
 3770              		.cfi_restore_state
1101:src/storage.c ****     if (fss != 1) return;
 3771              		.loc 1 1101 5 is_stmt 1 view .LVU1076
1101:src/storage.c ****     if (fss != 1) return;
 3772              		.loc 1 1101 11 is_stmt 0 view .LVU1077
 3773 004a 04AB     		add	r3, sp, #16
 3774 004c 0293     		str	r3, [sp, #8]
 3775 004e CDE90055 		strd	r5, r5, [sp]
 3776 0052 134C     		ldr	r4, .L313+28
 3777              	.LVL349:
1101:src/storage.c ****     if (fss != 1) return;
 3778              		.loc 1 1101 11 view .LVU1078
 3779 0054 134B     		ldr	r3, .L313+32
 3780 0056 144A     		ldr	r2, .L313+36
 3781 0058 1449     		ldr	r1, .L313+40
 3782 005a 1548     		ldr	r0, .L313+44
 3783 005c A047     		blx	r4
 3784              	.LVL350:
1102:src/storage.c ****   }
 3785              		.loc 1 1102 5 is_stmt 1 view .LVU1079
1102:src/storage.c ****   }
 3786              		.loc 1 1102 8 is_stmt 0 view .LVU1080
 3787 005e 0128     		cmp	r0, #1
 3788 0060 E0D0     		beq	.L309
ARM GAS  /tmp/cc09CpAR.s 			page 109


1111:src/storage.c **** 
 3789              		.loc 1 1111 1 view .LVU1081
 3790 0062 06B0     		add	sp, sp, #24
 3791              		.cfi_remember_state
 3792              		.cfi_def_cfa_offset 16
 3793              		@ sp needed
 3794 0064 70BD     		pop	{r4, r5, r6, pc}
 3795              	.LVL351:
 3796              	.L306:
 3797              		.cfi_restore_state
1107:src/storage.c ****   }
 3798              		.loc 1 1107 5 is_stmt 1 view .LVU1082
1107:src/storage.c ****   }
 3799              		.loc 1 1107 13 is_stmt 0 view .LVU1083
 3800 0066 134B     		ldr	r3, .L313+48
 3801 0068 134A     		ldr	r2, .L313+52
 3802 006a 1A60     		str	r2, [r3]
 3803 006c E4E7     		b	.L307
 3804              	.LVL352:
 3805              	.L305:
1094:src/storage.c ****       sys_disk_write_enable(0);
 3806              		.loc 1 1094 7 is_stmt 1 view .LVU1084
 3807 006e 0B4B     		ldr	r3, .L313+24
 3808 0070 6868     		ldr	r0, [r5, #4]
 3809              	.LVL353:
1094:src/storage.c ****       sys_disk_write_enable(0);
 3810              		.loc 1 1094 7 is_stmt 0 view .LVU1085
 3811 0072 9847     		blx	r3
 3812              	.LVL354:
1095:src/storage.c ****       DispMsg = "Err slf1";
 3813              		.loc 1 1095 7 is_stmt 1 view .LVU1086
 3814 0074 2046     		mov	r0, r4
 3815 0076 B047     		blx	r6
 3816              	.LVL355:
1096:src/storage.c ****       return;
 3817              		.loc 1 1096 7 view .LVU1087
1096:src/storage.c ****       return;
 3818              		.loc 1 1096 15 is_stmt 0 view .LVU1088
 3819 0078 0E4B     		ldr	r3, .L313+48
 3820 007a 104A     		ldr	r2, .L313+56
 3821 007c 1A60     		str	r2, [r3]
1097:src/storage.c ****     }
 3822              		.loc 1 1097 7 is_stmt 1 view .LVU1089
1111:src/storage.c **** 
 3823              		.loc 1 1111 1 is_stmt 0 view .LVU1090
 3824 007e 06B0     		add	sp, sp, #24
 3825              		.cfi_def_cfa_offset 16
 3826              		@ sp needed
 3827 0080 70BD     		pop	{r4, r5, r6, pc}
 3828              	.LVL356:
 3829              	.L314:
1111:src/storage.c **** 
 3830              		.loc 1 1111 1 view .LVU1091
 3831 0082 00BF     		.align	2
 3832              	.L313:
 3833 0084 E1030008 		.word	134218721
 3834 0088 00200010 		.word	268443648
ARM GAS  /tmp/cc09CpAR.s 			page 110


 3835 008c 35040008 		.word	134218805
 3836 0090 18000000 		.word	.LC1
 3837 0094 00000000 		.word	library_ram
 3838 0098 41040008 		.word	134218817
 3839 009c 39040008 		.word	134218809
 3840 00a0 51030008 		.word	134218577
 3841 00a4 00000000 		.word	open_selected_file
 3842 00a8 0C000000 		.word	.LC12
 3843 00ac 2C000000 		.word	.LC2
 3844 00b0 14000000 		.word	.LC13
 3845 00b4 00000000 		.word	DispMsg
 3846 00b8 28000000 		.word	.LC14
 3847 00bc 00000000 		.word	.LC11
 3848              		.cfi_endproc
 3849              	.LFE33:
 3851              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3852              		.align	2
 3853              	.LC15:
 3854 0000 4C6F6164 		.ascii	"Load Library File\000"
 3854      204C6962 
 3854      72617279 
 3854      2046696C 
 3854      6500
 3855 0012 0000     		.align	2
 3856              	.LC16:
 3857 0014 46696C65 		.ascii	"File too big\000"
 3857      20746F6F 
 3857      20626967 
 3857      00
 3858              		.section	.text.load_lib_file,"ax",%progbits
 3859              		.align	1
 3860              		.p2align 2,,3
 3861              		.global	load_lib_file
 3862              		.syntax unified
 3863              		.thumb
 3864              		.thumb_func
 3865              		.fpu fpv4-sp-d16
 3867              	load_lib_file:
 3868              	.LVL357:
 3869              	.LFB34:
1113:src/storage.c ****   FRESULT f;
 3870              		.loc 1 1113 30 is_stmt 1 view -0
 3871              		.cfi_startproc
 3872              		@ args = 0, pretend = 0, frame = 8
 3873              		@ frame_needed = 0, uses_anonymous_args = 0
1114:src/storage.c ****   int fss;
 3874              		.loc 1 1114 3 view .LVU1093
1115:src/storage.c ****   int data = READ;
 3875              		.loc 1 1115 3 view .LVU1094
1116:src/storage.c ****   uint x=0;
 3876              		.loc 1 1116 3 view .LVU1095
1113:src/storage.c ****   FRESULT f;
 3877              		.loc 1 1113 30 is_stmt 0 view .LVU1096
 3878 0000 10B5     		push	{r4, lr}
 3879              		.cfi_def_cfa_offset 8
 3880              		.cfi_offset 4, -8
 3881              		.cfi_offset 14, -4
ARM GAS  /tmp/cc09CpAR.s 			page 111


1117:src/storage.c **** 
 3882              		.loc 1 1117 8 view .LVU1097
 3883 0002 0222     		movs	r2, #2
1113:src/storage.c ****   FRESULT f;
 3884              		.loc 1 1113 30 view .LVU1098
 3885 0004 86B0     		sub	sp, sp, #24
 3886              		.cfi_def_cfa_offset 32
1117:src/storage.c **** 
 3887              		.loc 1 1117 8 view .LVU1099
 3888 0006 0023     		movs	r3, #0
 3889 0008 CDE90423 		strd	r2, r3, [sp, #16]
1119:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3890              		.loc 1 1119 3 is_stmt 1 view .LVU1100
1119:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3891              		.loc 1 1119 6 is_stmt 0 view .LVU1101
 3892 000c 08BB     		cbnz	r0, .L316
1120:src/storage.c ****     if (f != FR_OK) {
 3893              		.loc 1 1120 5 is_stmt 1 view .LVU1102
1120:src/storage.c ****     if (f != FR_OK) {
 3894              		.loc 1 1120 9 is_stmt 0 view .LVU1103
 3895 000e 1A4C     		ldr	r4, .L326
 3896 0010 1A4B     		ldr	r3, .L326+4
 3897 0012 6068     		ldr	r0, [r4, #4]
 3898              	.LVL358:
1120:src/storage.c ****     if (f != FR_OK) {
 3899              		.loc 1 1120 9 view .LVU1104
 3900 0014 1A49     		ldr	r1, .L326+8
 3901 0016 0122     		movs	r2, #1
 3902 0018 9847     		blx	r3
 3903              	.LVL359:
1121:src/storage.c ****       f_close (FPT);
 3904              		.loc 1 1121 5 is_stmt 1 view .LVU1105
1121:src/storage.c ****       f_close (FPT);
 3905              		.loc 1 1121 8 is_stmt 0 view .LVU1106
 3906 001a 0028     		cmp	r0, #0
 3907 001c 27D1     		bne	.L317
 3908              	.LVL360:
 3909              	.L321:
1132:src/storage.c ****   if ( f != FR_OK ) {
 3910              		.loc 1 1132 3 is_stmt 1 view .LVU1107
1132:src/storage.c ****   if ( f != FR_OK ) {
 3911              		.loc 1 1132 7 is_stmt 0 view .LVU1108
 3912 001e 194A     		ldr	r2, .L326+12
 3913 0020 154B     		ldr	r3, .L326
 3914 0022 1168     		ldr	r1, [r2]
 3915 0024 5868     		ldr	r0, [r3, #4]
 3916 0026 184C     		ldr	r4, .L326+16
 3917 0028 05AB     		add	r3, sp, #20
 3918 002a 4FF48042 		mov	r2, #16384
 3919 002e A047     		blx	r4
 3920              	.LVL361:
1133:src/storage.c ****     DispMsg = "Err slf2";
 3921              		.loc 1 1133 3 is_stmt 1 view .LVU1109
1133:src/storage.c ****     DispMsg = "Err slf2";
 3922              		.loc 1 1133 6 is_stmt 0 view .LVU1110
 3923 0030 10B1     		cbz	r0, .L319
1134:src/storage.c ****   }
ARM GAS  /tmp/cc09CpAR.s 			page 112


 3924              		.loc 1 1134 5 is_stmt 1 view .LVU1111
1134:src/storage.c ****   }
 3925              		.loc 1 1134 13 is_stmt 0 view .LVU1112
 3926 0032 164B     		ldr	r3, .L326+20
 3927 0034 164A     		ldr	r2, .L326+24
 3928 0036 1A60     		str	r2, [r3]
 3929              	.L319:
1136:src/storage.c ****     DispMsg = "File too big";
 3930              		.loc 1 1136 3 is_stmt 1 view .LVU1113
1136:src/storage.c ****     DispMsg = "File too big";
 3931              		.loc 1 1136 10 is_stmt 0 view .LVU1114
 3932 0038 0F4B     		ldr	r3, .L326
 3933 003a 5868     		ldr	r0, [r3, #4]
 3934              	.LVL362:
1136:src/storage.c ****     DispMsg = "File too big";
 3935              		.loc 1 1136 6 view .LVU1115
 3936 003c 8269     		ldr	r2, [r0, #24]
 3937 003e C368     		ldr	r3, [r0, #12]
 3938 0040 9A42     		cmp	r2, r3
 3939 0042 02D0     		beq	.L322
1137:src/storage.c ****   }
 3940              		.loc 1 1137 5 is_stmt 1 view .LVU1116
1137:src/storage.c ****   }
 3941              		.loc 1 1137 13 is_stmt 0 view .LVU1117
 3942 0044 114B     		ldr	r3, .L326+20
 3943 0046 134A     		ldr	r2, .L326+28
 3944 0048 1A60     		str	r2, [r3]
 3945              	.L322:
1139:src/storage.c **** }
 3946              		.loc 1 1139 3 is_stmt 1 view .LVU1118
 3947 004a 134B     		ldr	r3, .L326+32
 3948 004c 9847     		blx	r3
 3949              	.LVL363:
1140:src/storage.c **** 
 3950              		.loc 1 1140 1 is_stmt 0 view .LVU1119
 3951 004e 06B0     		add	sp, sp, #24
 3952              		.cfi_remember_state
 3953              		.cfi_def_cfa_offset 8
 3954              		@ sp needed
 3955 0050 10BD     		pop	{r4, pc}
 3956              	.LVL364:
 3957              	.L316:
 3958              		.cfi_restore_state
1128:src/storage.c ****     if (fss != 1) return;
 3959              		.loc 1 1128 5 is_stmt 1 view .LVU1120
1128:src/storage.c ****     if (fss != 1) return;
 3960              		.loc 1 1128 11 is_stmt 0 view .LVU1121
 3961 0052 04AA     		add	r2, sp, #16
 3962 0054 CDE90033 		strd	r3, r3, [sp]
 3963 0058 0292     		str	r2, [sp, #8]
 3964 005a 104C     		ldr	r4, .L326+36
 3965 005c 104B     		ldr	r3, .L326+40
 3966 005e 114A     		ldr	r2, .L326+44
 3967 0060 1149     		ldr	r1, .L326+48
 3968 0062 1248     		ldr	r0, .L326+52
 3969              	.LVL365:
1128:src/storage.c ****     if (fss != 1) return;
ARM GAS  /tmp/cc09CpAR.s 			page 113


 3970              		.loc 1 1128 11 view .LVU1122
 3971 0064 A047     		blx	r4
 3972              	.LVL366:
1129:src/storage.c ****   }
 3973              		.loc 1 1129 5 is_stmt 1 view .LVU1123
1129:src/storage.c ****   }
 3974              		.loc 1 1129 8 is_stmt 0 view .LVU1124
 3975 0066 0128     		cmp	r0, #1
 3976 0068 D9D0     		beq	.L321
1140:src/storage.c **** 
 3977              		.loc 1 1140 1 view .LVU1125
 3978 006a 06B0     		add	sp, sp, #24
 3979              		.cfi_remember_state
 3980              		.cfi_def_cfa_offset 8
 3981              		@ sp needed
 3982 006c 10BD     		pop	{r4, pc}
 3983              	.LVL367:
 3984              	.L317:
 3985              		.cfi_restore_state
1122:src/storage.c ****       //      DispMsg = "No file?";
 3986              		.loc 1 1122 7 is_stmt 1 view .LVU1126
 3987 006e 6068     		ldr	r0, [r4, #4]
 3988              	.LVL368:
1122:src/storage.c ****       //      DispMsg = "No file?";
 3989              		.loc 1 1122 7 is_stmt 0 view .LVU1127
 3990 0070 094B     		ldr	r3, .L326+32
 3991 0072 9847     		blx	r3
 3992              	.LVL369:
1124:src/storage.c ****     }
 3993              		.loc 1 1124 7 is_stmt 1 view .LVU1128
1140:src/storage.c **** 
 3994              		.loc 1 1140 1 is_stmt 0 view .LVU1129
 3995 0074 06B0     		add	sp, sp, #24
 3996              		.cfi_def_cfa_offset 8
 3997              		@ sp needed
 3998 0076 10BD     		pop	{r4, pc}
 3999              	.L327:
 4000              		.align	2
 4001              	.L326:
 4002 0078 00200010 		.word	268443648
 4003 007c 35040008 		.word	134218805
 4004 0080 18000000 		.word	.LC1
 4005 0084 00000000 		.word	library_ram
 4006 0088 3D040008 		.word	134218813
 4007 008c 00000000 		.word	DispMsg
 4008 0090 28000000 		.word	.LC14
 4009 0094 14000000 		.word	.LC16
 4010 0098 39040008 		.word	134218809
 4011 009c 51030008 		.word	134218577
 4012 00a0 00000000 		.word	open_selected_file
 4013 00a4 0C000000 		.word	.LC12
 4014 00a8 2C000000 		.word	.LC2
 4015 00ac 00000000 		.word	.LC15
 4016              		.cfi_endproc
 4017              	.LFE34:
 4019              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 4020              		.align	2
ARM GAS  /tmp/cc09CpAR.s 			page 114


 4021              	.LC17:
 4022 0000 77703334 		.ascii	"wp34s/wp34c.dat\000"
 4022      732F7770 
 4022      3334632E 
 4022      64617400 
 4023              		.align	2
 4024              	.LC18:
 4025 0010 45727220 		.ascii	"Err srf1\000"
 4025      73726631 
 4025      00
 4026 0019 000000   		.align	2
 4027              	.LC19:
 4028 001c 2E646174 		.ascii	".dat\000"
 4028      00
 4029 0021 000000   		.align	2
 4030              	.LC20:
 4031 0024 53617665 		.ascii	"Save RAM File\000"
 4031      2052414D 
 4031      2046696C 
 4031      6500
 4032 0032 0000     		.align	2
 4033              	.LC21:
 4034 0034 45727220 		.ascii	"Err srf2\000"
 4034      73726632 
 4034      00
 4035              		.section	.text.save_ram_file,"ax",%progbits
 4036              		.align	1
 4037              		.p2align 2,,3
 4038              		.global	save_ram_file
 4039              		.syntax unified
 4040              		.thumb
 4041              		.thumb_func
 4042              		.fpu fpv4-sp-d16
 4044              	save_ram_file:
 4045              	.LVL370:
 4046              	.LFB35:
1142:src/storage.c ****   FRESULT f;
 4047              		.loc 1 1142 30 is_stmt 1 view -0
 4048              		.cfi_startproc
 4049              		@ args = 0, pretend = 0, frame = 8
 4050              		@ frame_needed = 0, uses_anonymous_args = 0
1143:src/storage.c ****   int fss;
 4051              		.loc 1 1143 3 view .LVU1131
1144:src/storage.c ****   int data = WRITE;
 4052              		.loc 1 1144 3 view .LVU1132
1145:src/storage.c ****   uint x=0;
 4053              		.loc 1 1145 3 view .LVU1133
1142:src/storage.c ****   FRESULT f;
 4054              		.loc 1 1142 30 is_stmt 0 view .LVU1134
 4055 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4056              		.cfi_def_cfa_offset 20
 4057              		.cfi_offset 4, -20
 4058              		.cfi_offset 5, -16
 4059              		.cfi_offset 6, -12
 4060              		.cfi_offset 7, -8
 4061              		.cfi_offset 14, -4
 4062              	.LBB109:
ARM GAS  /tmp/cc09CpAR.s 			page 115


 4063              	.LBB110:
 206:src/storage.c **** 			      Crc, &Crc );
 4064              		.loc 1 206 9 view .LVU1135
 4065 0002 264E     		ldr	r6, .L338
 4066              	.LBE110:
 4067              	.LBE109:
1152:src/storage.c ****     if (i == 0) {
 4068              		.loc 1 1152 5 view .LVU1136
 4069 0004 264F     		ldr	r7, .L338+4
1142:src/storage.c ****   FRESULT f;
 4070              		.loc 1 1142 30 view .LVU1137
 4071 0006 87B0     		sub	sp, sp, #28
 4072              		.cfi_def_cfa_offset 48
1146:src/storage.c **** 
 4073              		.loc 1 1146 8 view .LVU1138
 4074 0008 0023     		movs	r3, #0
1145:src/storage.c ****   uint x=0;
 4075              		.loc 1 1145 7 view .LVU1139
 4076 000a 0125     		movs	r5, #1
1142:src/storage.c ****   FRESULT f;
 4077              		.loc 1 1142 30 view .LVU1140
 4078 000c 0446     		mov	r4, r0
1146:src/storage.c **** 
 4079              		.loc 1 1146 8 view .LVU1141
 4080 000e CDE90453 		strd	r5, r3, [sp, #16]
1148:src/storage.c ****     init_state();
 4081              		.loc 1 1148 5 is_stmt 1 view .LVU1142
 4082 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4083              	.LVL371:
1149:src/storage.c ****     checksum_all();
 4084              		.loc 1 1149 5 view .LVU1143
 4085 0016 FFF7FEFF 		bl	init_state
 4086              	.LVL372:
1150:src/storage.c **** 
 4087              		.loc 1 1150 5 view .LVU1144
 4088              	.LBB112:
 4089              	.LBI109:
 204:src/storage.c **** {
 4090              		.loc 1 204 5 view .LVU1145
 4091              	.LBB111:
 206:src/storage.c **** 			      Crc, &Crc );
 4092              		.loc 1 206 2 view .LVU1146
 206:src/storage.c **** 			      Crc, &Crc );
 4093              		.loc 1 206 9 is_stmt 0 view .LVU1147
 4094 001a 3068     		ldr	r0, [r6]
 4095 001c 40F2FE71 		movw	r1, #2046
 4096 0020 B0F8FE27 		ldrh	r2, [r0, #2046]
 4097 0024 4318     		adds	r3, r0, r1
 4098 0026 FFF7FEFF 		bl	test_checksum
 4099              	.LVL373:
 4100              	.LBE111:
 4101              	.LBE112:
1152:src/storage.c ****     if (i == 0) {
 4102              		.loc 1 1152 5 is_stmt 1 view .LVU1148
 4103 002a 2846     		mov	r0, r5
 4104 002c B847     		blx	r7
 4105              	.LVL374:
ARM GAS  /tmp/cc09CpAR.s 			page 116


1153:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4106              		.loc 1 1153 5 view .LVU1149
1153:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4107              		.loc 1 1153 8 is_stmt 0 view .LVU1150
 4108 002e C4B9     		cbnz	r4, .L329
1154:src/storage.c ****       if (f != FR_OK) {
 4109              		.loc 1 1154 7 is_stmt 1 view .LVU1151
1154:src/storage.c ****       if (f != FR_OK) {
 4110              		.loc 1 1154 11 is_stmt 0 view .LVU1152
 4111 0030 1C4D     		ldr	r5, .L338+8
 4112 0032 1D4B     		ldr	r3, .L338+12
 4113 0034 6868     		ldr	r0, [r5, #4]
 4114 0036 1D49     		ldr	r1, .L338+16
 4115 0038 0B22     		movs	r2, #11
 4116 003a 9847     		blx	r3
 4117              	.LVL375:
1155:src/storage.c **** 	f_close (FPT);
 4118              		.loc 1 1155 7 is_stmt 1 view .LVU1153
1155:src/storage.c **** 	f_close (FPT);
 4119              		.loc 1 1155 10 is_stmt 0 view .LVU1154
 4120 003c 18BB     		cbnz	r0, .L330
 4121              	.LVL376:
 4122              	.L334:
1167:src/storage.c ****     if ( f != FR_OK ) {
 4123              		.loc 1 1167 5 is_stmt 1 view .LVU1155
1167:src/storage.c ****     if ( f != FR_OK ) {
 4124              		.loc 1 1167 9 is_stmt 0 view .LVU1156
 4125 003e 194B     		ldr	r3, .L338+8
 4126 0040 3168     		ldr	r1, [r6]
 4127 0042 5868     		ldr	r0, [r3, #4]
 4128 0044 1A4C     		ldr	r4, .L338+20
 4129 0046 05AB     		add	r3, sp, #20
 4130 0048 4FF40062 		mov	r2, #2048
 4131 004c A047     		blx	r4
 4132              	.LVL377:
1168:src/storage.c ****       DispMsg = "Err srf2";
 4133              		.loc 1 1168 5 is_stmt 1 view .LVU1157
1168:src/storage.c ****       DispMsg = "Err srf2";
 4134              		.loc 1 1168 8 is_stmt 0 view .LVU1158
 4135 004e B0B9     		cbnz	r0, .L331
 4136              	.L332:
1171:src/storage.c ****     sys_disk_write_enable(0);
 4137              		.loc 1 1171 5 is_stmt 1 view .LVU1159
 4138 0050 144A     		ldr	r2, .L338+8
 4139 0052 184B     		ldr	r3, .L338+24
 4140 0054 5068     		ldr	r0, [r2, #4]
 4141              	.LVL378:
1171:src/storage.c ****     sys_disk_write_enable(0);
 4142              		.loc 1 1171 5 is_stmt 0 view .LVU1160
 4143 0056 9847     		blx	r3
 4144              	.LVL379:
1172:src/storage.c **** }
 4145              		.loc 1 1172 5 is_stmt 1 view .LVU1161
 4146 0058 114B     		ldr	r3, .L338+4
 4147 005a 0020     		movs	r0, #0
 4148 005c 9847     		blx	r3
 4149              	.LVL380:
ARM GAS  /tmp/cc09CpAR.s 			page 117


1173:src/storage.c **** 
 4150              		.loc 1 1173 1 is_stmt 0 view .LVU1162
 4151 005e 07B0     		add	sp, sp, #28
 4152              		.cfi_remember_state
 4153              		.cfi_def_cfa_offset 20
 4154              		@ sp needed
 4155 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4156              	.LVL381:
 4157              	.L329:
 4158              		.cfi_restore_state
1163:src/storage.c ****       if (fss != 1) return;
 4159              		.loc 1 1163 7 is_stmt 1 view .LVU1163
1163:src/storage.c ****       if (fss != 1) return;
 4160              		.loc 1 1163 13 is_stmt 0 view .LVU1164
 4161 0062 04AB     		add	r3, sp, #16
 4162 0064 0293     		str	r3, [sp, #8]
 4163 0066 CDE90055 		strd	r5, r5, [sp]
 4164 006a 134C     		ldr	r4, .L338+28
 4165              	.LVL382:
1163:src/storage.c ****       if (fss != 1) return;
 4166              		.loc 1 1163 13 view .LVU1165
 4167 006c 134B     		ldr	r3, .L338+32
 4168 006e 144A     		ldr	r2, .L338+36
 4169 0070 1449     		ldr	r1, .L338+40
 4170 0072 1548     		ldr	r0, .L338+44
 4171 0074 A047     		blx	r4
 4172              	.LVL383:
1164:src/storage.c ****     }
 4173              		.loc 1 1164 7 is_stmt 1 view .LVU1166
1164:src/storage.c ****     }
 4174              		.loc 1 1164 10 is_stmt 0 view .LVU1167
 4175 0076 0128     		cmp	r0, #1
 4176 0078 E1D0     		beq	.L334
1173:src/storage.c **** 
 4177              		.loc 1 1173 1 view .LVU1168
 4178 007a 07B0     		add	sp, sp, #28
 4179              		.cfi_remember_state
 4180              		.cfi_def_cfa_offset 20
 4181              		@ sp needed
 4182 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4183              	.LVL384:
 4184              	.L331:
 4185              		.cfi_restore_state
1169:src/storage.c ****     }
 4186              		.loc 1 1169 7 is_stmt 1 view .LVU1169
1169:src/storage.c ****     }
 4187              		.loc 1 1169 15 is_stmt 0 view .LVU1170
 4188 007e 134B     		ldr	r3, .L338+48
 4189 0080 134A     		ldr	r2, .L338+52
 4190 0082 1A60     		str	r2, [r3]
 4191 0084 E4E7     		b	.L332
 4192              	.LVL385:
 4193              	.L330:
1156:src/storage.c **** 	sys_disk_write_enable(0);
 4194              		.loc 1 1156 2 is_stmt 1 view .LVU1171
 4195 0086 0B4B     		ldr	r3, .L338+24
 4196 0088 6868     		ldr	r0, [r5, #4]
ARM GAS  /tmp/cc09CpAR.s 			page 118


 4197              	.LVL386:
1156:src/storage.c **** 	sys_disk_write_enable(0);
 4198              		.loc 1 1156 2 is_stmt 0 view .LVU1172
 4199 008a 9847     		blx	r3
 4200              	.LVL387:
1157:src/storage.c **** 	DispMsg = "Err srf1";
 4201              		.loc 1 1157 2 is_stmt 1 view .LVU1173
 4202 008c 2046     		mov	r0, r4
 4203 008e B847     		blx	r7
 4204              	.LVL388:
1158:src/storage.c **** 	return;
 4205              		.loc 1 1158 2 view .LVU1174
1158:src/storage.c **** 	return;
 4206              		.loc 1 1158 10 is_stmt 0 view .LVU1175
 4207 0090 0E4B     		ldr	r3, .L338+48
 4208 0092 104A     		ldr	r2, .L338+56
 4209 0094 1A60     		str	r2, [r3]
1159:src/storage.c ****       }
 4210              		.loc 1 1159 2 is_stmt 1 view .LVU1176
1173:src/storage.c **** 
 4211              		.loc 1 1173 1 is_stmt 0 view .LVU1177
 4212 0096 07B0     		add	sp, sp, #28
 4213              		.cfi_def_cfa_offset 20
 4214              		@ sp needed
 4215 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4216              	.LVL389:
 4217              	.L339:
1173:src/storage.c **** 
 4218              		.loc 1 1173 1 view .LVU1178
 4219 009a 00BF     		.align	2
 4220              	.L338:
 4221 009c 00000000 		.word	main_ram
 4222 00a0 E1030008 		.word	134218721
 4223 00a4 00200010 		.word	268443648
 4224 00a8 35040008 		.word	134218805
 4225 00ac 00000000 		.word	.LC17
 4226 00b0 41040008 		.word	134218817
 4227 00b4 39040008 		.word	134218809
 4228 00b8 51030008 		.word	134218577
 4229 00bc 00000000 		.word	open_selected_file
 4230 00c0 1C000000 		.word	.LC19
 4231 00c4 2C000000 		.word	.LC2
 4232 00c8 24000000 		.word	.LC20
 4233 00cc 00000000 		.word	DispMsg
 4234 00d0 34000000 		.word	.LC21
 4235 00d4 10000000 		.word	.LC18
 4236              		.cfi_endproc
 4237              	.LFE35:
 4239              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4240              		.align	2
 4241              	.LC22:
 4242 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4242      2052414D 
 4242      2046696C 
 4242      6500
 4243 000e 0000     		.align	2
 4244              	.LC23:
ARM GAS  /tmp/cc09CpAR.s 			page 119


 4245 0010 45727220 		.ascii	"Err lrf2\000"
 4245      6C726632 
 4245      00
 4246              		.section	.text.load_ram_file,"ax",%progbits
 4247              		.align	1
 4248              		.p2align 2,,3
 4249              		.global	load_ram_file
 4250              		.syntax unified
 4251              		.thumb
 4252              		.thumb_func
 4253              		.fpu fpv4-sp-d16
 4255              	load_ram_file:
 4256              	.LVL390:
 4257              	.LFB36:
1175:src/storage.c ****   FRESULT f;
 4258              		.loc 1 1175 29 is_stmt 1 view -0
 4259              		.cfi_startproc
 4260              		@ args = 0, pretend = 0, frame = 8
 4261              		@ frame_needed = 0, uses_anonymous_args = 0
1176:src/storage.c ****   int fss;
 4262              		.loc 1 1176 3 view .LVU1180
1177:src/storage.c ****   int data = READ;
 4263              		.loc 1 1177 3 view .LVU1181
1178:src/storage.c ****   uint x=0;
 4264              		.loc 1 1178 3 view .LVU1182
1175:src/storage.c ****   FRESULT f;
 4265              		.loc 1 1175 29 is_stmt 0 view .LVU1183
 4266 0000 30B5     		push	{r4, r5, lr}
 4267              		.cfi_def_cfa_offset 12
 4268              		.cfi_offset 4, -12
 4269              		.cfi_offset 5, -8
 4270              		.cfi_offset 14, -4
1179:src/storage.c ****   
 4271              		.loc 1 1179 8 view .LVU1184
 4272 0002 0222     		movs	r2, #2
1175:src/storage.c ****   FRESULT f;
 4273              		.loc 1 1175 29 view .LVU1185
 4274 0004 87B0     		sub	sp, sp, #28
 4275              		.cfi_def_cfa_offset 40
1179:src/storage.c ****   
 4276              		.loc 1 1179 8 view .LVU1186
 4277 0006 0023     		movs	r3, #0
 4278 0008 CDE90423 		strd	r2, r3, [sp, #16]
1181:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4279              		.loc 1 1181 3 is_stmt 1 view .LVU1187
1181:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4280              		.loc 1 1181 6 is_stmt 0 view .LVU1188
 4281 000c F8B9     		cbnz	r0, .L341
1182:src/storage.c ****     if (f != FR_OK) {
 4282              		.loc 1 1182 5 is_stmt 1 view .LVU1189
1182:src/storage.c ****     if (f != FR_OK) {
 4283              		.loc 1 1182 9 is_stmt 0 view .LVU1190
 4284 000e 214C     		ldr	r4, .L352
 4285 0010 214B     		ldr	r3, .L352+4
 4286 0012 6068     		ldr	r0, [r4, #4]
 4287              	.LVL391:
1182:src/storage.c ****     if (f != FR_OK) {
ARM GAS  /tmp/cc09CpAR.s 			page 120


 4288              		.loc 1 1182 9 view .LVU1191
 4289 0014 2149     		ldr	r1, .L352+8
 4290 0016 0122     		movs	r2, #1
 4291 0018 9847     		blx	r3
 4292              	.LVL392:
1183:src/storage.c ****       f_close (FPT);
 4293              		.loc 1 1183 5 is_stmt 1 view .LVU1192
1183:src/storage.c ****       f_close (FPT);
 4294              		.loc 1 1183 8 is_stmt 0 view .LVU1193
 4295 001a 0028     		cmp	r0, #0
 4296 001c 34D1     		bne	.L342
 4297              	.LVL393:
 4298              	.L346:
1194:src/storage.c ****   if ( f != FR_OK ) {
 4299              		.loc 1 1194 3 is_stmt 1 view .LVU1194
1194:src/storage.c ****   if ( f != FR_OK ) {
 4300              		.loc 1 1194 7 is_stmt 0 view .LVU1195
 4301 001e 204B     		ldr	r3, .L352+12
 4302 0020 1C4D     		ldr	r5, .L352
 4303 0022 1968     		ldr	r1, [r3]
 4304 0024 1F4C     		ldr	r4, .L352+16
 4305 0026 6868     		ldr	r0, [r5, #4]
 4306 0028 05AB     		add	r3, sp, #20
 4307 002a 4FF40062 		mov	r2, #2048
 4308 002e A047     		blx	r4
 4309              	.LVL394:
1195:src/storage.c ****     DispMsg = "Err lrf2";
 4310              		.loc 1 1195 3 is_stmt 1 view .LVU1196
1195:src/storage.c ****     DispMsg = "Err lrf2";
 4311              		.loc 1 1195 6 is_stmt 0 view .LVU1197
 4312 0030 0446     		mov	r4, r0
 4313 0032 D8B9     		cbnz	r0, .L351
1200:src/storage.c ****     DispMsg = "File too big";
 4314              		.loc 1 1200 3 is_stmt 1 view .LVU1198
1200:src/storage.c ****     DispMsg = "File too big";
 4315              		.loc 1 1200 10 is_stmt 0 view .LVU1199
 4316 0034 6868     		ldr	r0, [r5, #4]
 4317              	.LVL395:
1200:src/storage.c ****     DispMsg = "File too big";
 4318              		.loc 1 1200 6 view .LVU1200
 4319 0036 8269     		ldr	r2, [r0, #24]
 4320 0038 C368     		ldr	r3, [r0, #12]
 4321 003a 9A42     		cmp	r2, r3
 4322 003c 1FD0     		beq	.L347
1201:src/storage.c ****       f_close( FPT );
 4323              		.loc 1 1201 5 is_stmt 1 view .LVU1201
1201:src/storage.c ****       f_close( FPT );
 4324              		.loc 1 1201 13 is_stmt 0 view .LVU1202
 4325 003e 1A4B     		ldr	r3, .L352+20
 4326 0040 1A4A     		ldr	r2, .L352+24
 4327 0042 1A60     		str	r2, [r3]
1202:src/storage.c ****       return 1;
 4328              		.loc 1 1202 7 is_stmt 1 view .LVU1203
 4329 0044 1A4B     		ldr	r3, .L352+28
 4330 0046 9847     		blx	r3
 4331              	.LVL396:
1203:src/storage.c ****   }
ARM GAS  /tmp/cc09CpAR.s 			page 121


 4332              		.loc 1 1203 7 view .LVU1204
1203:src/storage.c ****   }
 4333              		.loc 1 1203 14 is_stmt 0 view .LVU1205
 4334 0048 0120     		movs	r0, #1
1207:src/storage.c **** 
 4335              		.loc 1 1207 1 view .LVU1206
 4336 004a 07B0     		add	sp, sp, #28
 4337              		.cfi_remember_state
 4338              		.cfi_def_cfa_offset 12
 4339              		@ sp needed
 4340 004c 30BD     		pop	{r4, r5, pc}
 4341              	.LVL397:
 4342              	.L341:
 4343              		.cfi_restore_state
1190:src/storage.c ****     if (fss != 1) return 1;
 4344              		.loc 1 1190 5 is_stmt 1 view .LVU1207
1190:src/storage.c ****     if (fss != 1) return 1;
 4345              		.loc 1 1190 11 is_stmt 0 view .LVU1208
 4346 004e 04AA     		add	r2, sp, #16
 4347 0050 CDE90033 		strd	r3, r3, [sp]
 4348 0054 0292     		str	r2, [sp, #8]
 4349 0056 174C     		ldr	r4, .L352+32
 4350 0058 174B     		ldr	r3, .L352+36
 4351 005a 184A     		ldr	r2, .L352+40
 4352 005c 1849     		ldr	r1, .L352+44
 4353 005e 1948     		ldr	r0, .L352+48
 4354              	.LVL398:
1190:src/storage.c ****     if (fss != 1) return 1;
 4355              		.loc 1 1190 11 view .LVU1209
 4356 0060 A047     		blx	r4
 4357              	.LVL399:
1191:src/storage.c ****   }
 4358              		.loc 1 1191 5 is_stmt 1 view .LVU1210
1191:src/storage.c ****   }
 4359              		.loc 1 1191 8 is_stmt 0 view .LVU1211
 4360 0062 0128     		cmp	r0, #1
 4361 0064 DBD0     		beq	.L346
1191:src/storage.c ****   }
 4362              		.loc 1 1191 26 view .LVU1212
 4363 0066 0120     		movs	r0, #1
 4364              	.LVL400:
1207:src/storage.c **** 
 4365              		.loc 1 1207 1 view .LVU1213
 4366 0068 07B0     		add	sp, sp, #28
 4367              		.cfi_remember_state
 4368              		.cfi_def_cfa_offset 12
 4369              		@ sp needed
 4370 006a 30BD     		pop	{r4, r5, pc}
 4371              	.LVL401:
 4372              	.L351:
 4373              		.cfi_restore_state
1196:src/storage.c ****       f_close( FPT );
 4374              		.loc 1 1196 5 is_stmt 1 view .LVU1214
1196:src/storage.c ****       f_close( FPT );
 4375              		.loc 1 1196 13 is_stmt 0 view .LVU1215
 4376 006c 0E4B     		ldr	r3, .L352+20
 4377 006e 164A     		ldr	r2, .L352+52
ARM GAS  /tmp/cc09CpAR.s 			page 122


 4378 0070 1A60     		str	r2, [r3]
1197:src/storage.c ****       return 1;
 4379              		.loc 1 1197 7 is_stmt 1 view .LVU1216
 4380 0072 6868     		ldr	r0, [r5, #4]
 4381              	.LVL402:
1197:src/storage.c ****       return 1;
 4382              		.loc 1 1197 7 is_stmt 0 view .LVU1217
 4383 0074 0E4B     		ldr	r3, .L352+28
 4384 0076 9847     		blx	r3
 4385              	.LVL403:
1198:src/storage.c ****   }
 4386              		.loc 1 1198 7 is_stmt 1 view .LVU1218
1198:src/storage.c ****   }
 4387              		.loc 1 1198 14 is_stmt 0 view .LVU1219
 4388 0078 0120     		movs	r0, #1
1207:src/storage.c **** 
 4389              		.loc 1 1207 1 view .LVU1220
 4390 007a 07B0     		add	sp, sp, #28
 4391              		.cfi_remember_state
 4392              		.cfi_def_cfa_offset 12
 4393              		@ sp needed
 4394 007c 30BD     		pop	{r4, r5, pc}
 4395              	.L347:
 4396              		.cfi_restore_state
1205:src/storage.c ****   return 0;
 4397              		.loc 1 1205 3 is_stmt 1 view .LVU1221
 4398 007e 0C4B     		ldr	r3, .L352+28
 4399 0080 9847     		blx	r3
 4400              	.LVL404:
1206:src/storage.c **** }
 4401              		.loc 1 1206 3 view .LVU1222
1206:src/storage.c **** }
 4402              		.loc 1 1206 10 is_stmt 0 view .LVU1223
 4403 0082 2046     		mov	r0, r4
1207:src/storage.c **** 
 4404              		.loc 1 1207 1 view .LVU1224
 4405 0084 07B0     		add	sp, sp, #28
 4406              		.cfi_remember_state
 4407              		.cfi_def_cfa_offset 12
 4408              		@ sp needed
 4409 0086 30BD     		pop	{r4, r5, pc}
 4410              	.LVL405:
 4411              	.L342:
 4412              		.cfi_restore_state
1184:src/storage.c ****       //      DispMsg = "No file?";
 4413              		.loc 1 1184 7 is_stmt 1 view .LVU1225
 4414 0088 6068     		ldr	r0, [r4, #4]
 4415              	.LVL406:
1184:src/storage.c ****       //      DispMsg = "No file?";
 4416              		.loc 1 1184 7 is_stmt 0 view .LVU1226
 4417 008a 094B     		ldr	r3, .L352+28
 4418 008c 9847     		blx	r3
 4419              	.LVL407:
1186:src/storage.c ****     }
 4420              		.loc 1 1186 7 is_stmt 1 view .LVU1227
1186:src/storage.c ****     }
 4421              		.loc 1 1186 14 is_stmt 0 view .LVU1228
ARM GAS  /tmp/cc09CpAR.s 			page 123


 4422 008e 0120     		movs	r0, #1
1207:src/storage.c **** 
 4423              		.loc 1 1207 1 view .LVU1229
 4424 0090 07B0     		add	sp, sp, #28
 4425              		.cfi_def_cfa_offset 12
 4426              		@ sp needed
 4427 0092 30BD     		pop	{r4, r5, pc}
 4428              	.L353:
 4429              		.align	2
 4430              	.L352:
 4431 0094 00200010 		.word	268443648
 4432 0098 35040008 		.word	134218805
 4433 009c 00000000 		.word	.LC17
 4434 00a0 00000000 		.word	main_ram
 4435 00a4 3D040008 		.word	134218813
 4436 00a8 00000000 		.word	DispMsg
 4437 00ac 14000000 		.word	.LC16
 4438 00b0 39040008 		.word	134218809
 4439 00b4 51030008 		.word	134218577
 4440 00b8 00000000 		.word	open_selected_file
 4441 00bc 1C000000 		.word	.LC19
 4442 00c0 2C000000 		.word	.LC2
 4443 00c4 00000000 		.word	.LC22
 4444 00c8 10000000 		.word	.LC23
 4445              		.cfi_endproc
 4446              	.LFE36:
 4448              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4449              		.align	2
 4450              	.LC24:
 4451 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4451      2052414D 
 4451      20426163 
 4451      6B757020 
 4451      46696C65 
 4452 0015 000000   		.align	2
 4453              	.LC25:
 4454 0018 45727220 		.ascii	"Err lbf2\000"
 4454      6C626632 
 4454      00
 4455              		.section	.text.load_backup_file,"ax",%progbits
 4456              		.align	1
 4457              		.p2align 2,,3
 4458              		.global	load_backup_file
 4459              		.syntax unified
 4460              		.thumb
 4461              		.thumb_func
 4462              		.fpu fpv4-sp-d16
 4464              	load_backup_file:
 4465              	.LVL408:
 4466              	.LFB37:
1209:src/storage.c ****   FRESULT f;
 4467              		.loc 1 1209 33 is_stmt 1 view -0
 4468              		.cfi_startproc
 4469              		@ args = 0, pretend = 0, frame = 8
 4470              		@ frame_needed = 0, uses_anonymous_args = 0
1210:src/storage.c ****   int fss;
 4471              		.loc 1 1210 3 view .LVU1231
ARM GAS  /tmp/cc09CpAR.s 			page 124


1211:src/storage.c ****   int data = READ;
 4472              		.loc 1 1211 3 view .LVU1232
1212:src/storage.c ****   uint x=0;
 4473              		.loc 1 1212 3 view .LVU1233
1209:src/storage.c ****   FRESULT f;
 4474              		.loc 1 1209 33 is_stmt 0 view .LVU1234
 4475 0000 10B5     		push	{r4, lr}
 4476              		.cfi_def_cfa_offset 8
 4477              		.cfi_offset 4, -8
 4478              		.cfi_offset 14, -4
1213:src/storage.c **** 
 4479              		.loc 1 1213 8 view .LVU1235
 4480 0002 0222     		movs	r2, #2
1209:src/storage.c ****   FRESULT f;
 4481              		.loc 1 1209 33 view .LVU1236
 4482 0004 86B0     		sub	sp, sp, #24
 4483              		.cfi_def_cfa_offset 32
1213:src/storage.c **** 
 4484              		.loc 1 1213 8 view .LVU1237
 4485 0006 0023     		movs	r3, #0
 4486 0008 CDE90423 		strd	r2, r3, [sp, #16]
1215:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4487              		.loc 1 1215 3 is_stmt 1 view .LVU1238
1215:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4488              		.loc 1 1215 6 is_stmt 0 view .LVU1239
 4489 000c 08BB     		cbnz	r0, .L355
1216:src/storage.c ****     if (f != FR_OK) {
 4490              		.loc 1 1216 5 is_stmt 1 view .LVU1240
1216:src/storage.c ****     if (f != FR_OK) {
 4491              		.loc 1 1216 9 is_stmt 0 view .LVU1241
 4492 000e 1A4C     		ldr	r4, .L365
 4493 0010 1A4B     		ldr	r3, .L365+4
 4494 0012 6068     		ldr	r0, [r4, #4]
 4495              	.LVL409:
1216:src/storage.c ****     if (f != FR_OK) {
 4496              		.loc 1 1216 9 view .LVU1242
 4497 0014 1A49     		ldr	r1, .L365+8
 4498 0016 0122     		movs	r2, #1
 4499 0018 9847     		blx	r3
 4500              	.LVL410:
1217:src/storage.c ****       f_close (FPT);
 4501              		.loc 1 1217 5 is_stmt 1 view .LVU1243
1217:src/storage.c ****       f_close (FPT);
 4502              		.loc 1 1217 8 is_stmt 0 view .LVU1244
 4503 001a 0028     		cmp	r0, #0
 4504 001c 27D1     		bne	.L356
 4505              	.LVL411:
 4506              	.L360:
1227:src/storage.c ****   if ( f != FR_OK ) {
 4507              		.loc 1 1227 3 is_stmt 1 view .LVU1245
1227:src/storage.c ****   if ( f != FR_OK ) {
 4508              		.loc 1 1227 7 is_stmt 0 view .LVU1246
 4509 001e 194A     		ldr	r2, .L365+12
 4510 0020 154B     		ldr	r3, .L365
 4511 0022 1168     		ldr	r1, [r2]
 4512 0024 5868     		ldr	r0, [r3, #4]
 4513 0026 184C     		ldr	r4, .L365+16
ARM GAS  /tmp/cc09CpAR.s 			page 125


 4514 0028 05AB     		add	r3, sp, #20
 4515 002a 4FF40062 		mov	r2, #2048
 4516 002e A047     		blx	r4
 4517              	.LVL412:
1228:src/storage.c ****     DispMsg = "Err lbf2";
 4518              		.loc 1 1228 3 is_stmt 1 view .LVU1247
1228:src/storage.c ****     DispMsg = "Err lbf2";
 4519              		.loc 1 1228 6 is_stmt 0 view .LVU1248
 4520 0030 10B1     		cbz	r0, .L358
1229:src/storage.c ****   }
 4521              		.loc 1 1229 5 is_stmt 1 view .LVU1249
1229:src/storage.c ****   }
 4522              		.loc 1 1229 13 is_stmt 0 view .LVU1250
 4523 0032 164B     		ldr	r3, .L365+20
 4524 0034 164A     		ldr	r2, .L365+24
 4525 0036 1A60     		str	r2, [r3]
 4526              	.L358:
1231:src/storage.c ****     DispMsg = "File too big";
 4527              		.loc 1 1231 3 is_stmt 1 view .LVU1251
1231:src/storage.c ****     DispMsg = "File too big";
 4528              		.loc 1 1231 10 is_stmt 0 view .LVU1252
 4529 0038 0F4B     		ldr	r3, .L365
 4530 003a 5868     		ldr	r0, [r3, #4]
 4531              	.LVL413:
1231:src/storage.c ****     DispMsg = "File too big";
 4532              		.loc 1 1231 6 view .LVU1253
 4533 003c 8269     		ldr	r2, [r0, #24]
 4534 003e C368     		ldr	r3, [r0, #12]
 4535 0040 9A42     		cmp	r2, r3
 4536 0042 02D0     		beq	.L361
1232:src/storage.c ****   }
 4537              		.loc 1 1232 5 is_stmt 1 view .LVU1254
1232:src/storage.c ****   }
 4538              		.loc 1 1232 13 is_stmt 0 view .LVU1255
 4539 0044 114B     		ldr	r3, .L365+20
 4540 0046 134A     		ldr	r2, .L365+28
 4541 0048 1A60     		str	r2, [r3]
 4542              	.L361:
1234:src/storage.c **** }
 4543              		.loc 1 1234 3 is_stmt 1 view .LVU1256
 4544 004a 134B     		ldr	r3, .L365+32
 4545 004c 9847     		blx	r3
 4546              	.LVL414:
1235:src/storage.c **** 
 4547              		.loc 1 1235 1 is_stmt 0 view .LVU1257
 4548 004e 06B0     		add	sp, sp, #24
 4549              		.cfi_remember_state
 4550              		.cfi_def_cfa_offset 8
 4551              		@ sp needed
 4552 0050 10BD     		pop	{r4, pc}
 4553              	.LVL415:
 4554              	.L355:
 4555              		.cfi_restore_state
1223:src/storage.c ****     if (fss != 1) return;
 4556              		.loc 1 1223 5 is_stmt 1 view .LVU1258
1223:src/storage.c ****     if (fss != 1) return;
 4557              		.loc 1 1223 11 is_stmt 0 view .LVU1259
ARM GAS  /tmp/cc09CpAR.s 			page 126


 4558 0052 04AA     		add	r2, sp, #16
 4559 0054 CDE90033 		strd	r3, r3, [sp]
 4560 0058 0292     		str	r2, [sp, #8]
 4561 005a 104C     		ldr	r4, .L365+36
 4562 005c 104B     		ldr	r3, .L365+40
 4563 005e 114A     		ldr	r2, .L365+44
 4564 0060 1149     		ldr	r1, .L365+48
 4565 0062 1248     		ldr	r0, .L365+52
 4566              	.LVL416:
1223:src/storage.c ****     if (fss != 1) return;
 4567              		.loc 1 1223 11 view .LVU1260
 4568 0064 A047     		blx	r4
 4569              	.LVL417:
1224:src/storage.c ****   }
 4570              		.loc 1 1224 5 is_stmt 1 view .LVU1261
1224:src/storage.c ****   }
 4571              		.loc 1 1224 8 is_stmt 0 view .LVU1262
 4572 0066 0128     		cmp	r0, #1
 4573 0068 D9D0     		beq	.L360
1235:src/storage.c **** 
 4574              		.loc 1 1235 1 view .LVU1263
 4575 006a 06B0     		add	sp, sp, #24
 4576              		.cfi_remember_state
 4577              		.cfi_def_cfa_offset 8
 4578              		@ sp needed
 4579 006c 10BD     		pop	{r4, pc}
 4580              	.LVL418:
 4581              	.L356:
 4582              		.cfi_restore_state
1218:src/storage.c ****       return;
 4583              		.loc 1 1218 7 is_stmt 1 view .LVU1264
 4584 006e 6068     		ldr	r0, [r4, #4]
 4585              	.LVL419:
1218:src/storage.c ****       return;
 4586              		.loc 1 1218 7 is_stmt 0 view .LVU1265
 4587 0070 094B     		ldr	r3, .L365+32
 4588 0072 9847     		blx	r3
 4589              	.LVL420:
1219:src/storage.c ****     }
 4590              		.loc 1 1219 7 is_stmt 1 view .LVU1266
1235:src/storage.c **** 
 4591              		.loc 1 1235 1 is_stmt 0 view .LVU1267
 4592 0074 06B0     		add	sp, sp, #24
 4593              		.cfi_def_cfa_offset 8
 4594              		@ sp needed
 4595 0076 10BD     		pop	{r4, pc}
 4596              	.L366:
 4597              		.align	2
 4598              	.L365:
 4599 0078 00200010 		.word	268443648
 4600 007c 35040008 		.word	134218805
 4601 0080 00000000 		.word	.LC0
 4602 0084 00000000 		.word	backup_ram
 4603 0088 3D040008 		.word	134218813
 4604 008c 00000000 		.word	DispMsg
 4605 0090 18000000 		.word	.LC25
 4606 0094 14000000 		.word	.LC16
ARM GAS  /tmp/cc09CpAR.s 			page 127


 4607 0098 39040008 		.word	134218809
 4608 009c 51030008 		.word	134218577
 4609 00a0 00000000 		.word	open_selected_file
 4610 00a4 1C000000 		.word	.LC19
 4611 00a8 2C000000 		.word	.LC2
 4612 00ac 00000000 		.word	.LC24
 4613              		.cfi_endproc
 4614              	.LFE37:
 4616              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4617              		.align	2
 4618              	.LC26:
 4619 0000 57726974 		.ascii	"Write err\000"
 4619      65206572 
 4619      7200
 4620 000a 0000     		.align	2
 4621              	.LC27:
 4622 000c 57726974 		.ascii	"Written\000"
 4622      74656E00 
 4623              		.align	2
 4624              	.LC28:
 4625 0014 53617665 		.ascii	"Save current program\000"
 4625      20637572 
 4625      72656E74 
 4625      2070726F 
 4625      6772616D 
 4626 0029 000000   		.align	2
 4627              	.LC29:
 4628 002c 4D656D20 		.ascii	"Mem short\000"
 4628      73686F72 
 4628      7400
 4629              		.section	.text.save_prog_file,"ax",%progbits
 4630              		.align	1
 4631              		.p2align 2,,3
 4632              		.global	save_prog_file
 4633              		.syntax unified
 4634              		.thumb
 4635              		.thumb_func
 4636              		.fpu fpv4-sp-d16
 4638              	save_prog_file:
 4639              	.LFB39:
1263:src/storage.c ****   opcode lbl; 
 4640              		.loc 1 1263 24 is_stmt 1 view -0
 4641              		.cfi_startproc
 4642              		@ args = 0, pretend = 0, frame = 8
 4643              		@ frame_needed = 0, uses_anonymous_args = 0
1264:src/storage.c ****   unsigned int pc;
 4644              		.loc 1 1264 3 view .LVU1269
1265:src/storage.c ****   unsigned short steps, prog_crc;
 4645              		.loc 1 1265 3 view .LVU1270
1266:src/storage.c ****   FRESULT f;
 4646              		.loc 1 1266 3 view .LVU1271
1267:src/storage.c ****   int data = WRITE;
 4647              		.loc 1 1267 3 view .LVU1272
1268:src/storage.c ****   int fss;
 4648              		.loc 1 1268 3 view .LVU1273
1263:src/storage.c ****   opcode lbl; 
 4649              		.loc 1 1263 24 is_stmt 0 view .LVU1274
ARM GAS  /tmp/cc09CpAR.s 			page 128


 4650 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4651              		.cfi_def_cfa_offset 28
 4652              		.cfi_offset 4, -28
 4653              		.cfi_offset 5, -24
 4654              		.cfi_offset 6, -20
 4655              		.cfi_offset 7, -16
 4656              		.cfi_offset 8, -12
 4657              		.cfi_offset 9, -8
 4658              		.cfi_offset 14, -4
1270:src/storage.c ****   char* buffer;
 4659              		.loc 1 1270 8 view .LVU1275
 4660 0004 0023     		movs	r3, #0
1263:src/storage.c ****   opcode lbl; 
 4661              		.loc 1 1263 24 view .LVU1276
 4662 0006 87B0     		sub	sp, sp, #28
 4663              		.cfi_def_cfa_offset 56
1270:src/storage.c ****   char* buffer;
 4664              		.loc 1 1270 8 view .LVU1277
 4665 0008 0124     		movs	r4, #1
 4666 000a CDE90443 		strd	r4, r3, [sp, #16]
1271:src/storage.c ****   FLASH_REGION* fr;
 4667              		.loc 1 1271 3 is_stmt 1 view .LVU1278
1272:src/storage.c **** 
 4668              		.loc 1 1272 3 view .LVU1279
1275:src/storage.c ****     /*
 4669              		.loc 1 1275 3 view .LVU1280
1275:src/storage.c ****     /*
 4670              		.loc 1 1275 8 is_stmt 0 view .LVU1281
 4671 000e FFF7FEFF 		bl	not_running
 4672              	.LVL421:
1275:src/storage.c ****     /*
 4673              		.loc 1 1275 6 view .LVU1282
 4674 0012 C8B1     		cbz	r0, .L367
1279:src/storage.c ****     if ( pc == REGION_XROM ) {
 4675              		.loc 1 1279 5 is_stmt 1 view .LVU1283
 4676              	.LVL422:
1280:src/storage.c ****       error_message( ERR_ILLEGAL );
 4677              		.loc 1 1280 5 view .LVU1284
1279:src/storage.c ****     if ( pc == REGION_XROM ) {
 4678              		.loc 1 1279 10 is_stmt 0 view .LVU1285
 4679 0014 464D     		ldr	r5, .L384
 4680              	.LVL423:
1279:src/storage.c ****     if ( pc == REGION_XROM ) {
 4681              		.loc 1 1279 10 view .LVU1286
 4682 0016 2B68     		ldr	r3, [r5]
 4683 0018 B3F8E037 		ldrh	r3, [r3, #2016]
1280:src/storage.c ****       error_message( ERR_ILLEGAL );
 4684              		.loc 1 1280 8 view .LVU1287
 4685 001c 9B0B     		lsrs	r3, r3, #14
 4686 001e 032B     		cmp	r3, #3
 4687 0020 72D0     		beq	.L382
1287:src/storage.c ****     lbl = getprog( ProgBegin );
 4688              		.loc 1 1287 5 is_stmt 1 view .LVU1288
 4689 0022 2046     		mov	r0, r4
 4690 0024 FFF7FEFF 		bl	update_program_bounds
 4691              	.LVL424:
1288:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
ARM GAS  /tmp/cc09CpAR.s 			page 129


 4692              		.loc 1 1288 5 view .LVU1289
1288:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4693              		.loc 1 1288 20 is_stmt 0 view .LVU1290
 4694 0028 2B68     		ldr	r3, [r5]
1288:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4695              		.loc 1 1288 11 view .LVU1291
 4696 002a B3F8EC07 		ldrh	r0, [r3, #2028]
 4697 002e FFF7FEFF 		bl	getprog
 4698              	.LVL425:
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4699              		.loc 1 1289 5 is_stmt 1 view .LVU1292
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4700              		.loc 1 1289 11 is_stmt 0 view .LVU1293
 4701 0032 00F47043 		and	r3, r0, #61440
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4702              		.loc 1 1289 8 view .LVU1294
 4703 0036 B3F5704F 		cmp	r3, #61440
 4704 003a 02D1     		bne	.L371
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4705              		.loc 1 1289 22 discriminator 1 view .LVU1295
 4706 003c 10F4706F 		tst	r0, #3840
 4707 0040 05D0     		beq	.L372
 4708              	.L371:
1290:src/storage.c ****       return;
 4709              		.loc 1 1290 7 is_stmt 1 view .LVU1296
 4710 0042 0620     		movs	r0, #6
 4711              	.LVL426:
1290:src/storage.c ****       return;
 4712              		.loc 1 1290 7 is_stmt 0 view .LVU1297
 4713 0044 FFF7FEFF 		bl	error_message
 4714              	.LVL427:
1291:src/storage.c ****     }
 4715              		.loc 1 1291 7 is_stmt 1 view .LVU1298
 4716              	.L367:
1336:src/storage.c **** 
 4717              		.loc 1 1336 1 is_stmt 0 view .LVU1299
 4718 0048 07B0     		add	sp, sp, #28
 4719              		.cfi_remember_state
 4720              		.cfi_def_cfa_offset 28
 4721              		@ sp needed
 4722 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4723              	.LVL428:
 4724              	.L372:
 4725              		.cfi_restore_state
1296:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4726              		.loc 1 1296 5 is_stmt 1 view .LVU1300
1296:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4727              		.loc 1 1296 17 is_stmt 0 view .LVU1301
 4728 004e 2B68     		ldr	r3, [r5]
1296:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4729              		.loc 1 1296 11 view .LVU1302
 4730 0050 B3F8EE57 		ldrh	r5, [r3, #2030]
 4731 0054 B3F8EC37 		ldrh	r3, [r3, #2028]
 4732 0058 0135     		adds	r5, r5, #1
 4733 005a ED1A     		subs	r5, r5, r3
 4734 005c ADB2     		uxth	r5, r5
 4735              	.LVL429:
ARM GAS  /tmp/cc09CpAR.s 			page 130


1297:src/storage.c ****     /*
 4736              		.loc 1 1297 5 is_stmt 1 view .LVU1303
1297:src/storage.c ****     /*
 4737              		.loc 1 1297 23 is_stmt 0 view .LVU1304
 4738 005e FFF7FEFF 		bl	get_current_prog
 4739              	.LVL430:
 4740              	.LBB113:
 4741              	.LBB114:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4742              		.loc 1 162 2 view .LVU1305
 4743 0062 6E00     		lsls	r6, r5, #1
 4744              	.LVL431:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4745              		.loc 1 162 2 view .LVU1306
 4746              	.LBE114:
 4747              	.LBI113:
 156:src/storage.c **** {
 4748              		.loc 1 156 20 is_stmt 1 view .LVU1307
 4749              	.LBB115:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4750              		.loc 1 158 2 view .LVU1308
 159:src/storage.c **** 	unsigned int i;
 4751              		.loc 1 159 2 view .LVU1309
 160:src/storage.c **** 
 4752              		.loc 1 160 2 view .LVU1310
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4753              		.loc 1 162 2 view .LVU1311
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4754              		.loc 1 162 15 view .LVU1312
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4755              		.loc 1 162 2 is_stmt 0 view .LVU1313
 4756 0064 002D     		cmp	r5, #0
 4757 0066 55D0     		beq	.L378
 4758 0068 8119     		adds	r1, r0, r6
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4759              		.loc 1 158 21 view .LVU1314
 4760 006a 45F6A524 		movw	r4, #23205
 4761              	.LVL432:
 4762              	.L374:
 163:src/storage.c **** 		crc ^= *d++;
 4763              		.loc 1 163 3 is_stmt 1 view .LVU1315
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4764              		.loc 1 164 10 is_stmt 0 view .LVU1316
 4765 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4766              	.LVL433:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4767              		.loc 1 164 10 view .LVU1317
 4768 0072 63BA     		rev16	r3, r4
 4769 0074 9BB2     		uxth	r3, r3
 4770              	.LVL434:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4771              		.loc 1 164 3 is_stmt 1 view .LVU1318
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4772              		.loc 1 164 7 is_stmt 0 view .LVU1319
 4773 0076 5340     		eors	r3, r3, r2
 4774              	.LVL435:
 165:src/storage.c **** 		crc ^= crc << 12;
ARM GAS  /tmp/cc09CpAR.s 			page 131


 4775              		.loc 1 165 3 is_stmt 1 view .LVU1320
 165:src/storage.c **** 		crc ^= crc << 12;
 4776              		.loc 1 165 7 is_stmt 0 view .LVU1321
 4777 0078 C3F30312 		ubfx	r2, r3, #4, #4
 4778 007c 5340     		eors	r3, r3, r2
 4779              	.LVL436:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4780              		.loc 1 166 3 is_stmt 1 view .LVU1322
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4781              		.loc 1 166 7 is_stmt 0 view .LVU1323
 4782 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4783              	.LVL437:
 167:src/storage.c **** 	}
 4784              		.loc 1 167 3 is_stmt 1 view .LVU1324
 167:src/storage.c **** 	}
 4785              		.loc 1 167 25 is_stmt 0 view .LVU1325
 4786 0082 5C01     		lsls	r4, r3, #5
 4787 0084 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
 4788              		.loc 1 167 7 view .LVU1326
 4789 0088 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4790              		.loc 1 162 2 view .LVU1327
 4791 008a 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 4792              		.loc 1 167 7 view .LVU1328
 4793 008c 84EA0304 		eor	r4, r4, r3
 4794              	.LVL438:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4795              		.loc 1 162 27 is_stmt 1 view .LVU1329
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4796              		.loc 1 162 15 view .LVU1330
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4797              		.loc 1 162 2 is_stmt 0 view .LVU1331
 4798 0090 EDD1     		bne	.L374
 4799              	.LVL439:
 4800              	.L373:
 169:src/storage.c **** }
 4801              		.loc 1 169 2 is_stmt 1 view .LVU1332
 169:src/storage.c **** }
 4802              		.loc 1 169 2 is_stmt 0 view .LVU1333
 4803              	.LBE115:
 4804              	.LBE113:
1301:src/storage.c **** 
 4805              		.loc 1 1301 5 is_stmt 1 view .LVU1334
 4806 0092 DFF8D080 		ldr	r8, .L384+52
1303:src/storage.c ****     if (fss != 1) return;
 4807              		.loc 1 1303 11 is_stmt 0 view .LVU1335
 4808 0096 274F     		ldr	r7, .L384+4
1301:src/storage.c **** 
 4809              		.loc 1 1301 5 view .LVU1336
 4810 0098 0120     		movs	r0, #1
 4811 009a C047     		blx	r8
 4812              	.LVL440:
1303:src/storage.c ****     if (fss != 1) return;
 4813              		.loc 1 1303 5 is_stmt 1 view .LVU1337
1303:src/storage.c ****     if (fss != 1) return;
ARM GAS  /tmp/cc09CpAR.s 			page 132


 4814              		.loc 1 1303 11 is_stmt 0 view .LVU1338
 4815 009c 0123     		movs	r3, #1
 4816 009e 04AA     		add	r2, sp, #16
 4817 00a0 CDE90132 		strd	r3, r2, [sp, #4]
 4818 00a4 0093     		str	r3, [sp]
 4819 00a6 244A     		ldr	r2, .L384+8
 4820 00a8 244B     		ldr	r3, .L384+12
 4821 00aa 2549     		ldr	r1, .L384+16
 4822 00ac 2548     		ldr	r0, .L384+20
 4823 00ae B847     		blx	r7
 4824              	.LVL441:
1304:src/storage.c **** 
 4825              		.loc 1 1304 5 is_stmt 1 view .LVU1339
1304:src/storage.c **** 
 4826              		.loc 1 1304 8 is_stmt 0 view .LVU1340
 4827 00b0 0128     		cmp	r0, #1
 4828 00b2 C9D1     		bne	.L367
1308:src/storage.c ****     if (!buffer) {// calloc failure!
 4829              		.loc 1 1308 5 is_stmt 1 view .LVU1341
1308:src/storage.c ****     if (!buffer) {// calloc failure!
 4830              		.loc 1 1308 14 is_stmt 0 view .LVU1342
 4831 00b4 0146     		mov	r1, r0
 4832 00b6 4FF40060 		mov	r0, #2048
 4833              	.LVL442:
1308:src/storage.c ****     if (!buffer) {// calloc failure!
 4834              		.loc 1 1308 14 view .LVU1343
 4835 00ba FFF7FEFF 		bl	calloc
 4836              	.LVL443:
1309:src/storage.c ****       f_close(FPT);
 4837              		.loc 1 1309 5 is_stmt 1 view .LVU1344
1309:src/storage.c ****       f_close(FPT);
 4838              		.loc 1 1309 8 is_stmt 0 view .LVU1345
 4839 00be 0746     		mov	r7, r0
 4840 00c0 58B3     		cbz	r0, .L383
1316:src/storage.c ****     fr->size = steps;
 4841              		.loc 1 1316 5 is_stmt 1 view .LVU1346
 4842              	.LVL444:
1317:src/storage.c ****     fr->crc = prog_crc;
 4843              		.loc 1 1317 5 view .LVU1347
1318:src/storage.c **** 
 4844              		.loc 1 1318 13 is_stmt 0 view .LVU1348
 4845 00c2 8146     		mov	r9, r0
1317:src/storage.c ****     fr->crc = prog_crc;
 4846              		.loc 1 1317 14 view .LVU1349
 4847 00c4 4580     		strh	r5, [r0, #2]	@ movhi
1318:src/storage.c **** 
 4848              		.loc 1 1318 5 is_stmt 1 view .LVU1350
1318:src/storage.c **** 
 4849              		.loc 1 1318 13 is_stmt 0 view .LVU1351
 4850 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
1320:src/storage.c ****    
 4851              		.loc 1 1320 5 is_stmt 1 view .LVU1352
1320:src/storage.c ****    
 4852              		.loc 1 1320 22 is_stmt 0 view .LVU1353
 4853 00ca FFF7FEFF 		bl	get_current_prog
 4854              	.LVL445:
1322:src/storage.c ****     free(buffer);
ARM GAS  /tmp/cc09CpAR.s 			page 133


 4855              		.loc 1 1322 9 view .LVU1354
 4856 00ce 1E4D     		ldr	r5, .L384+24
 4857              	.LVL446:
1322:src/storage.c ****     free(buffer);
 4858              		.loc 1 1322 9 view .LVU1355
 4859 00d0 1E4C     		ldr	r4, .L384+28
 4860              	.LVL447:
1320:src/storage.c ****    
 4861              		.loc 1 1320 22 view .LVU1356
 4862 00d2 0146     		mov	r1, r0
1320:src/storage.c ****    
 4863              		.loc 1 1320 5 view .LVU1357
 4864 00d4 3246     		mov	r2, r6
 4865 00d6 4846     		mov	r0, r9
 4866 00d8 FFF7FEFF 		bl	xcopy
 4867              	.LVL448:
1322:src/storage.c ****     free(buffer);
 4868              		.loc 1 1322 5 is_stmt 1 view .LVU1358
1322:src/storage.c ****     free(buffer);
 4869              		.loc 1 1322 9 is_stmt 0 view .LVU1359
 4870 00dc 321D     		adds	r2, r6, #4
 4871 00de 05AB     		add	r3, sp, #20
 4872 00e0 3946     		mov	r1, r7
 4873 00e2 6868     		ldr	r0, [r5, #4]
 4874 00e4 A047     		blx	r4
 4875              	.LVL449:
 4876 00e6 0446     		mov	r4, r0
1323:src/storage.c ****     
 4877              		.loc 1 1323 5 view .LVU1360
 4878 00e8 3846     		mov	r0, r7
 4879              	.LVL450:
1323:src/storage.c ****     
 4880              		.loc 1 1323 5 is_stmt 1 view .LVU1361
 4881 00ea FFF7FEFF 		bl	free
 4882              	.LVL451:
1325:src/storage.c ****       DispMsg = "Write err";
 4883              		.loc 1 1325 5 view .LVU1362
1329:src/storage.c ****     }
 4884              		.loc 1 1329 15 is_stmt 0 view .LVU1363
 4885 00ee 184B     		ldr	r3, .L384+32
 4886 00f0 1848     		ldr	r0, .L384+36
 4887 00f2 1949     		ldr	r1, .L384+40
1332:src/storage.c ****     sys_disk_write_enable(0);
 4888              		.loc 1 1332 5 view .LVU1364
 4889 00f4 194A     		ldr	r2, .L384+44
1329:src/storage.c ****     }
 4890              		.loc 1 1329 15 view .LVU1365
 4891 00f6 002C     		cmp	r4, #0
 4892 00f8 18BF     		it	ne
 4893 00fa 1846     		movne	r0, r3
 4894 00fc 0860     		str	r0, [r1]
1332:src/storage.c ****     sys_disk_write_enable(0);
 4895              		.loc 1 1332 5 is_stmt 1 view .LVU1366
 4896 00fe 6868     		ldr	r0, [r5, #4]
 4897 0100 9047     		blx	r2
 4898              	.LVL452:
1333:src/storage.c ****     
ARM GAS  /tmp/cc09CpAR.s 			page 134


 4899              		.loc 1 1333 5 view .LVU1367
 4900 0102 0020     		movs	r0, #0
 4901 0104 C047     		blx	r8
 4902              	.LVL453:
 4903 0106 9FE7     		b	.L367
 4904              	.LVL454:
 4905              	.L382:
1281:src/storage.c ****       return;
 4906              		.loc 1 1281 7 view .LVU1368
 4907 0108 0720     		movs	r0, #7
 4908 010a FFF7FEFF 		bl	error_message
 4909              	.LVL455:
1282:src/storage.c ****     }
 4910              		.loc 1 1282 7 view .LVU1369
1336:src/storage.c **** 
 4911              		.loc 1 1336 1 is_stmt 0 view .LVU1370
 4912 010e 07B0     		add	sp, sp, #28
 4913              		.cfi_remember_state
 4914              		.cfi_def_cfa_offset 28
 4915              		@ sp needed
 4916 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4917              	.LVL456:
 4918              	.L378:
 4919              		.cfi_restore_state
 4920              	.LBB117:
 4921              	.LBB116:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4922              		.loc 1 158 21 view .LVU1371
 4923 0114 45F6A524 		movw	r4, #23205
 4924 0118 BBE7     		b	.L373
 4925              	.LVL457:
 4926              	.L383:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4927              		.loc 1 158 21 view .LVU1372
 4928              	.LBE116:
 4929              	.LBE117:
1310:src/storage.c ****       sys_disk_write_enable(0);
 4930              		.loc 1 1310 7 is_stmt 1 view .LVU1373
 4931 011a 0B4A     		ldr	r2, .L384+24
 4932 011c 0F4B     		ldr	r3, .L384+44
 4933 011e 5068     		ldr	r0, [r2, #4]
 4934              	.LVL458:
1310:src/storage.c ****       sys_disk_write_enable(0);
 4935              		.loc 1 1310 7 is_stmt 0 view .LVU1374
 4936 0120 9847     		blx	r3
 4937              	.LVL459:
1311:src/storage.c ****       DispMsg = "Mem short";
 4938              		.loc 1 1311 7 is_stmt 1 view .LVU1375
 4939 0122 3846     		mov	r0, r7
 4940 0124 C047     		blx	r8
 4941              	.LVL460:
1312:src/storage.c ****       return;
 4942              		.loc 1 1312 7 view .LVU1376
1312:src/storage.c ****       return;
 4943              		.loc 1 1312 15 is_stmt 0 view .LVU1377
 4944 0126 0C4B     		ldr	r3, .L384+40
 4945 0128 0D4A     		ldr	r2, .L384+48
ARM GAS  /tmp/cc09CpAR.s 			page 135


 4946 012a 1A60     		str	r2, [r3]
1313:src/storage.c ****     }
 4947              		.loc 1 1313 7 is_stmt 1 view .LVU1378
 4948 012c 8CE7     		b	.L367
 4949              	.L385:
 4950 012e 00BF     		.align	2
 4951              	.L384:
 4952 0130 00000000 		.word	main_ram
 4953 0134 51030008 		.word	134218577
 4954 0138 1C000000 		.word	.LC19
 4955 013c 00000000 		.word	open_selected_file
 4956 0140 2C000000 		.word	.LC2
 4957 0144 14000000 		.word	.LC28
 4958 0148 00200010 		.word	268443648
 4959 014c 41040008 		.word	134218817
 4960 0150 00000000 		.word	.LC26
 4961 0154 0C000000 		.word	.LC27
 4962 0158 00000000 		.word	DispMsg
 4963 015c 39040008 		.word	134218809
 4964 0160 2C000000 		.word	.LC29
 4965 0164 E1030008 		.word	134218721
 4966              		.cfi_endproc
 4967              	.LFE39:
 4969              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4970              		.align	2
 4971              	.LC30:
 4972 0000 4C6F6164 		.ascii	"Load PROG File\000"
 4972      2050524F 
 4972      47204669 
 4972      6C6500
 4973 000f 00       		.align	2
 4974              	.LC31:
 4975 0010 46696C65 		.ascii	"File odd\000"
 4975      206F6464 
 4975      00
 4976 0019 000000   		.align	2
 4977              	.LC32:
 4978 001c 46696C65 		.ascii	"File crc err\000"
 4978      20637263 
 4978      20657272 
 4978      00
 4979              		.section	.text.load_prog_file,"ax",%progbits
 4980              		.align	1
 4981              		.p2align 2,,3
 4982              		.global	load_prog_file
 4983              		.syntax unified
 4984              		.thumb
 4985              		.thumb_func
 4986              		.fpu fpv4-sp-d16
 4988              	load_prog_file:
 4989              	.LFB40:
1338:src/storage.c ****   int fss, fsize;
 4990              		.loc 1 1338 24 view -0
 4991              		.cfi_startproc
 4992              		@ args = 0, pretend = 0, frame = 8
 4993              		@ frame_needed = 0, uses_anonymous_args = 0
1339:src/storage.c ****   int data = READ;
ARM GAS  /tmp/cc09CpAR.s 			page 136


 4994              		.loc 1 1339 3 view .LVU1380
1340:src/storage.c ****   uint x=0;
 4995              		.loc 1 1340 3 view .LVU1381
1338:src/storage.c ****   int fss, fsize;
 4996              		.loc 1 1338 24 is_stmt 0 view .LVU1382
 4997 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4998              		.cfi_def_cfa_offset 20
 4999              		.cfi_offset 4, -20
 5000              		.cfi_offset 5, -16
 5001              		.cfi_offset 6, -12
 5002              		.cfi_offset 7, -8
 5003              		.cfi_offset 14, -4
 5004 0002 87B0     		sub	sp, sp, #28
 5005              		.cfi_def_cfa_offset 48
1341:src/storage.c ****   FLASH_REGION* fr;
 5006              		.loc 1 1341 8 view .LVU1383
 5007 0004 0023     		movs	r3, #0
1340:src/storage.c ****   uint x=0;
 5008              		.loc 1 1340 7 view .LVU1384
 5009 0006 0221     		movs	r1, #2
1345:src/storage.c ****   if (fss != 1) return;
 5010              		.loc 1 1345 9 view .LVU1385
 5011 0008 04AA     		add	r2, sp, #16
1341:src/storage.c ****   FLASH_REGION* fr;
 5012              		.loc 1 1341 8 view .LVU1386
 5013 000a CDE90413 		strd	r1, r3, [sp, #16]
1342:src/storage.c ****   char* buffer;
 5014              		.loc 1 1342 3 is_stmt 1 view .LVU1387
1343:src/storage.c **** 
 5015              		.loc 1 1343 3 view .LVU1388
1345:src/storage.c ****   if (fss != 1) return;
 5016              		.loc 1 1345 3 view .LVU1389
1345:src/storage.c ****   if (fss != 1) return;
 5017              		.loc 1 1345 9 is_stmt 0 view .LVU1390
 5018 000e CDE90033 		strd	r3, r3, [sp]
 5019 0012 0292     		str	r2, [sp, #8]
 5020 0014 284C     		ldr	r4, .L400
 5021 0016 294B     		ldr	r3, .L400+4
 5022 0018 294A     		ldr	r2, .L400+8
 5023 001a 2A49     		ldr	r1, .L400+12
 5024 001c 2A48     		ldr	r0, .L400+16
 5025 001e A047     		blx	r4
 5026              	.LVL461:
1346:src/storage.c **** 
 5027              		.loc 1 1346 3 is_stmt 1 view .LVU1391
1346:src/storage.c **** 
 5028              		.loc 1 1346 6 is_stmt 0 view .LVU1392
 5029 0020 0128     		cmp	r0, #1
 5030 0022 0BD1     		bne	.L386
1350:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5031              		.loc 1 1350 3 is_stmt 1 view .LVU1393
1350:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5032              		.loc 1 1350 11 is_stmt 0 view .LVU1394
 5033 0024 294F     		ldr	r7, .L400+20
 5034 0026 7D68     		ldr	r5, [r7, #4]
 5035 0028 EE68     		ldr	r6, [r5, #12]
 5036              	.LVL462:
ARM GAS  /tmp/cc09CpAR.s 			page 137


1351:src/storage.c ****     f_close(FPT);
 5037              		.loc 1 1351 3 is_stmt 1 view .LVU1395
1351:src/storage.c ****     f_close(FPT);
 5038              		.loc 1 1351 6 is_stmt 0 view .LVU1396
 5039 002a B6F5804F 		cmp	r6, #16384
 5040 002e 07DD     		ble	.L388
1352:src/storage.c ****     DispMsg = "File too big";
 5041              		.loc 1 1352 5 is_stmt 1 view .LVU1397
 5042 0030 274B     		ldr	r3, .L400+24
 5043 0032 2846     		mov	r0, r5
 5044              	.LVL463:
1352:src/storage.c ****     DispMsg = "File too big";
 5045              		.loc 1 1352 5 is_stmt 0 view .LVU1398
 5046 0034 9847     		blx	r3
 5047              	.LVL464:
1353:src/storage.c ****     return;
 5048              		.loc 1 1353 5 is_stmt 1 view .LVU1399
1353:src/storage.c ****     return;
 5049              		.loc 1 1353 13 is_stmt 0 view .LVU1400
 5050 0036 274B     		ldr	r3, .L400+28
 5051 0038 274A     		ldr	r2, .L400+32
 5052 003a 1A60     		str	r2, [r3]
1354:src/storage.c ****   }
 5053              		.loc 1 1354 5 is_stmt 1 view .LVU1401
 5054              	.LVL465:
 5055              	.L386:
1382:src/storage.c **** 
 5056              		.loc 1 1382 1 is_stmt 0 view .LVU1402
 5057 003c 07B0     		add	sp, sp, #28
 5058              		.cfi_remember_state
 5059              		.cfi_def_cfa_offset 20
 5060              		@ sp needed
 5061 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 5062              	.LVL466:
 5063              	.L388:
 5064              		.cfi_restore_state
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5065              		.loc 1 1356 3 is_stmt 1 view .LVU1403
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5066              		.loc 1 1356 31 is_stmt 0 view .LVU1404
 5067 0040 26F0FF03 		bic	r3, r6, #255
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5068              		.loc 1 1356 12 view .LVU1405
 5069 0044 0146     		mov	r1, r0
 5070 0046 03F58070 		add	r0, r3, #256
 5071              	.LVL467:
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5072              		.loc 1 1356 12 view .LVU1406
 5073 004a FFF7FEFF 		bl	calloc
 5074              	.LVL468:
1357:src/storage.c ****     f_close(FPT);
 5075              		.loc 1 1357 3 is_stmt 1 view .LVU1407
1357:src/storage.c ****     f_close(FPT);
 5076              		.loc 1 1357 6 is_stmt 0 view .LVU1408
 5077 004e 0446     		mov	r4, r0
 5078 0050 58B3     		cbz	r0, .L397
1363:src/storage.c ****   if (!f_eof(FPT)) { //odd?
ARM GAS  /tmp/cc09CpAR.s 			page 138


 5079              		.loc 1 1363 3 is_stmt 1 view .LVU1409
 5080 0052 3246     		mov	r2, r6
 5081 0054 2846     		mov	r0, r5
 5082              	.LVL469:
1363:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5083              		.loc 1 1363 3 is_stmt 0 view .LVU1410
 5084 0056 05AB     		add	r3, sp, #20
 5085 0058 204D     		ldr	r5, .L400+36
 5086 005a 2146     		mov	r1, r4
 5087 005c A847     		blx	r5
 5088              	.LVL470:
1364:src/storage.c ****     free(buffer);
 5089              		.loc 1 1364 3 is_stmt 1 view .LVU1411
1364:src/storage.c ****     free(buffer);
 5090              		.loc 1 1364 8 is_stmt 0 view .LVU1412
 5091 005e 7868     		ldr	r0, [r7, #4]
1364:src/storage.c ****     free(buffer);
 5092              		.loc 1 1364 6 view .LVU1413
 5093 0060 8269     		ldr	r2, [r0, #24]
 5094 0062 C368     		ldr	r3, [r0, #12]
 5095 0064 9A42     		cmp	r2, r3
 5096 0066 12D1     		bne	.L398
1370:src/storage.c **** 
 5097              		.loc 1 1370 3 is_stmt 1 view .LVU1414
 5098 0068 194B     		ldr	r3, .L400+24
 5099 006a 9847     		blx	r3
 5100              	.LVL471:
1372:src/storage.c ****     
 5101              		.loc 1 1372 3 view .LVU1415
1374:src/storage.c ****     DispMsg = "File crc err";
 5102              		.loc 1 1374 3 view .LVU1416
1374:src/storage.c ****     DispMsg = "File crc err";
 5103              		.loc 1 1374 7 is_stmt 0 view .LVU1417
 5104 006c 2146     		mov	r1, r4
 5105 006e 2046     		mov	r0, r4
 5106 0070 FFF7FEFF 		bl	checksum_region
 5107              	.LVL472:
1374:src/storage.c ****     DispMsg = "File crc err";
 5108              		.loc 1 1374 6 view .LVU1418
 5109 0074 A8B9     		cbnz	r0, .L399
1380:src/storage.c ****   free(buffer);
 5110              		.loc 1 1380 3 is_stmt 1 view .LVU1419
 5111              	.LVL473:
 5112              	.LBB118:
 5113              	.LBI118:
1384:src/storage.c **** { // buffer contains all of program file
 5114              		.loc 1 1384 6 view .LVU1420
 5115              	.LBB119:
1386:src/storage.c ****   int space_needed, count, free;
 5116              		.loc 1 1386 3 view .LVU1421
1387:src/storage.c **** 
 5117              		.loc 1 1387 3 view .LVU1422
1389:src/storage.c ****     /*
 5118              		.loc 1 1389 3 view .LVU1423
1389:src/storage.c ****     /*
 5119              		.loc 1 1389 8 is_stmt 0 view .LVU1424
 5120 0076 FFF7FEFF 		bl	not_running
ARM GAS  /tmp/cc09CpAR.s 			page 139


 5121              	.LVL474:
1389:src/storage.c ****     /*
 5122              		.loc 1 1389 6 view .LVU1425
 5123 007a 10B1     		cbz	r0, .L392
 5124 007c 2046     		mov	r0, r4
 5125 007e FFF7FEFF 		bl	store_program_from_buffer.part.0
 5126              	.LVL475:
 5127              	.L392:
1389:src/storage.c ****     /*
 5128              		.loc 1 1389 6 view .LVU1426
 5129              	.LBE119:
 5130              	.LBE118:
1381:src/storage.c **** }
 5131              		.loc 1 1381 3 is_stmt 1 view .LVU1427
 5132 0082 2046     		mov	r0, r4
1382:src/storage.c **** 
 5133              		.loc 1 1382 1 is_stmt 0 view .LVU1428
 5134 0084 07B0     		add	sp, sp, #28
 5135              		.cfi_remember_state
 5136              		.cfi_def_cfa_offset 20
 5137              		@ sp needed
 5138 0086 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5139              		.cfi_restore 14
 5140              		.cfi_restore 7
 5141              		.cfi_restore 6
 5142              		.cfi_restore 5
 5143              		.cfi_restore 4
 5144              		.cfi_def_cfa_offset 0
 5145              	.LVL476:
1381:src/storage.c **** }
 5146              		.loc 1 1381 3 view .LVU1429
 5147 008a FFF7FEBF 		b	free
 5148              	.LVL477:
 5149              	.L398:
 5150              		.cfi_restore_state
1365:src/storage.c ****     f_close(FPT);
 5151              		.loc 1 1365 5 is_stmt 1 view .LVU1430
 5152 008e 2046     		mov	r0, r4
 5153 0090 FFF7FEFF 		bl	free
 5154              	.LVL478:
1366:src/storage.c ****     DispMsg = "File odd";
 5155              		.loc 1 1366 5 view .LVU1431
 5156 0094 0E4B     		ldr	r3, .L400+24
 5157 0096 7868     		ldr	r0, [r7, #4]
 5158 0098 9847     		blx	r3
 5159              	.LVL479:
1367:src/storage.c ****     return;
 5160              		.loc 1 1367 5 view .LVU1432
1367:src/storage.c ****     return;
 5161              		.loc 1 1367 13 is_stmt 0 view .LVU1433
 5162 009a 0E4B     		ldr	r3, .L400+28
 5163 009c 104A     		ldr	r2, .L400+40
 5164 009e 1A60     		str	r2, [r3]
1368:src/storage.c ****   }
 5165              		.loc 1 1368 5 is_stmt 1 view .LVU1434
 5166 00a0 CCE7     		b	.L386
 5167              	.LVL480:
ARM GAS  /tmp/cc09CpAR.s 			page 140


 5168              	.L399:
1375:src/storage.c ****         free(buffer);
 5169              		.loc 1 1375 5 view .LVU1435
1375:src/storage.c ****         free(buffer);
 5170              		.loc 1 1375 13 is_stmt 0 view .LVU1436
 5171 00a2 0C4B     		ldr	r3, .L400+28
 5172 00a4 0F4A     		ldr	r2, .L400+44
 5173 00a6 1A60     		str	r2, [r3]
1376:src/storage.c ****     return;
 5174              		.loc 1 1376 9 is_stmt 1 view .LVU1437
 5175 00a8 EBE7     		b	.L392
 5176              	.LVL481:
 5177              	.L397:
1358:src/storage.c ****     DispMsg = "Mem short";
 5178              		.loc 1 1358 5 view .LVU1438
 5179 00aa 094B     		ldr	r3, .L400+24
 5180 00ac 2846     		mov	r0, r5
 5181              	.LVL482:
1358:src/storage.c ****     DispMsg = "Mem short";
 5182              		.loc 1 1358 5 is_stmt 0 view .LVU1439
 5183 00ae 9847     		blx	r3
 5184              	.LVL483:
1359:src/storage.c ****     return;
 5185              		.loc 1 1359 5 is_stmt 1 view .LVU1440
1359:src/storage.c ****     return;
 5186              		.loc 1 1359 13 is_stmt 0 view .LVU1441
 5187 00b0 084B     		ldr	r3, .L400+28
 5188 00b2 0D4A     		ldr	r2, .L400+48
 5189 00b4 1A60     		str	r2, [r3]
1360:src/storage.c ****   }
 5190              		.loc 1 1360 5 is_stmt 1 view .LVU1442
 5191 00b6 C1E7     		b	.L386
 5192              	.L401:
 5193              		.align	2
 5194              	.L400:
 5195 00b8 51030008 		.word	134218577
 5196 00bc 00000000 		.word	open_selected_file
 5197 00c0 1C000000 		.word	.LC19
 5198 00c4 2C000000 		.word	.LC2
 5199 00c8 00000000 		.word	.LC30
 5200 00cc 00200010 		.word	268443648
 5201 00d0 39040008 		.word	134218809
 5202 00d4 00000000 		.word	DispMsg
 5203 00d8 14000000 		.word	.LC16
 5204 00dc 3D040008 		.word	134218813
 5205 00e0 10000000 		.word	.LC31
 5206 00e4 1C000000 		.word	.LC32
 5207 00e8 2C000000 		.word	.LC29
 5208              		.cfi_endproc
 5209              	.LFE40:
 5211              		.section	.text.store_program_from_buffer,"ax",%progbits
 5212              		.align	1
 5213              		.p2align 2,,3
 5214              		.global	store_program_from_buffer
 5215              		.syntax unified
 5216              		.thumb
 5217              		.thumb_func
ARM GAS  /tmp/cc09CpAR.s 			page 141


 5218              		.fpu fpv4-sp-d16
 5220              	store_program_from_buffer:
 5221              	.LVL484:
 5222              	.LFB41:
1385:src/storage.c ****   unsigned int pc;
 5223              		.loc 1 1385 1 view -0
 5224              		.cfi_startproc
 5225              		@ args = 0, pretend = 0, frame = 0
 5226              		@ frame_needed = 0, uses_anonymous_args = 0
1386:src/storage.c ****   int space_needed, count, free;
 5227              		.loc 1 1386 3 view .LVU1444
1387:src/storage.c **** 
 5228              		.loc 1 1387 3 view .LVU1445
1389:src/storage.c ****     /*
 5229              		.loc 1 1389 3 view .LVU1446
1385:src/storage.c ****   unsigned int pc;
 5230              		.loc 1 1385 1 is_stmt 0 view .LVU1447
 5231 0000 10B5     		push	{r4, lr}
 5232              		.cfi_def_cfa_offset 8
 5233              		.cfi_offset 4, -8
 5234              		.cfi_offset 14, -4
1385:src/storage.c ****   unsigned int pc;
 5235              		.loc 1 1385 1 view .LVU1448
 5236 0002 0446     		mov	r4, r0
1389:src/storage.c ****     /*
 5237              		.loc 1 1389 8 view .LVU1449
 5238 0004 FFF7FEFF 		bl	not_running
 5239              	.LVL485:
1389:src/storage.c ****     /*
 5240              		.loc 1 1389 6 view .LVU1450
 5241 0008 20B1     		cbz	r0, .L402
 5242 000a 2046     		mov	r0, r4
 5243              		.loc 1 1431 1 view .LVU1451
 5244 000c BDE81040 		pop	{r4, lr}
 5245              		.cfi_remember_state
 5246              		.cfi_restore 14
 5247              		.cfi_restore 4
 5248              		.cfi_def_cfa_offset 0
 5249              	.LVL486:
 5250              		.loc 1 1431 1 view .LVU1452
 5251 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5252              	.LVL487:
 5253              	.L402:
 5254              		.cfi_restore_state
 5255              		.loc 1 1431 1 view .LVU1453
 5256 0014 10BD     		pop	{r4, pc}
 5257              		.loc 1 1431 1 view .LVU1454
 5258              		.cfi_endproc
 5259              	.LFE41:
 5261              		.comm	XromA2D,64,4
 5262              		.comm	XromLocal,464,4
 5263              		.comm	XromParams,16,4
 5264              		.comm	StateWhileOn,52,4
 5265              		.comm	library_ram,4,4
 5266              		.comm	backup_ram,4,4
 5267              		.comm	main_ram,4,4
 5268 0016 00BF     		.text
ARM GAS  /tmp/cc09CpAR.s 			page 142


 5269              	.Letext0:
 5270              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5271              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5272              		.file 4 "/usr/include/newlib/sys/_types.h"
 5273              		.file 5 "/usr/include/newlib/sys/reent.h"
 5274              		.file 6 "/usr/include/newlib/sys/lock.h"
 5275              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5276              		.file 8 "/usr/include/newlib/sys/types.h"
 5277              		.file 9 "/usr/include/newlib/stdlib.h"
 5278              		.file 10 "dmcp/ff_ifc.h"
 5279              		.file 11 "dmcp/dmcp.h"
 5280              		.file 12 "src/decNumber/decContext.h"
 5281              		.file 13 "src/decNumber/decNumber.h"
 5282              		.file 14 "src/decNumber/decimal64.h"
 5283              		.file 15 "src/decNumber/decimal128.h"
 5284              		.file 16 "src/xeq.h"
 5285              		.file 17 "src/data.h"
 5286              		.file 18 "src/storage.h"
 5287              		.file 19 "src/display.h"
 5288              		.file 20 "src/stats.h"
 5289              		.file 21 "src/alpha.h"
 5290              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc09CpAR.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/cc09CpAR.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/cc09CpAR.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/cc09CpAR.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/cc09CpAR.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/cc09CpAR.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/cc09CpAR.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/cc09CpAR.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/cc09CpAR.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:305    .text.program_flash:0000000000000000 $t
     /tmp/cc09CpAR.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/cc09CpAR.s:568    .text.program_flash:00000000000000d4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/cc09CpAR.s:584    .text.flash_append:0000000000000000 $t
     /tmp/cc09CpAR.s:591    .text.flash_append:0000000000000000 flash_append
     /tmp/cc09CpAR.s:762    .text.flash_append:000000000000009c $d
     /tmp/cc09CpAR.s:768    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:775    .text.open_selected_file:0000000000000000 $t
     /tmp/cc09CpAR.s:783    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/cc09CpAR.s:899    .text.open_selected_file:0000000000000050 $d
     /tmp/cc09CpAR.s:910    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:914    .text.init_mem:0000000000000000 $t
     /tmp/cc09CpAR.s:922    .text.init_mem:0000000000000000 init_mem
     /tmp/cc09CpAR.s:986    .text.init_mem:0000000000000030 $d
     /tmp/cc09CpAR.s:994    .text.crc16:0000000000000000 $t
     /tmp/cc09CpAR.s:1002   .text.crc16:0000000000000000 crc16
     /tmp/cc09CpAR.s:1081   .text.checksum_program:0000000000000000 $t
     /tmp/cc09CpAR.s:1089   .text.checksum_program:0000000000000000 checksum_program
     /tmp/cc09CpAR.s:1201   .text.checksum_program:0000000000000058 $d
     /tmp/cc09CpAR.s:1206   .text.checksum_ram:0000000000000000 $t
     /tmp/cc09CpAR.s:1214   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/cc09CpAR.s:1233   .text.checksum_ram:0000000000000014 $d
     /tmp/cc09CpAR.s:1238   .text.checksum_backup:0000000000000000 $t
     /tmp/cc09CpAR.s:1246   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/cc09CpAR.s:1378   .text.checksum_backup:0000000000000054 $d
     /tmp/cc09CpAR.s:1383   .text.clpall:0000000000000000 $t
     /tmp/cc09CpAR.s:1391   .text.clpall:0000000000000000 clpall
     /tmp/cc09CpAR.s:1430   .text.clpall:0000000000000018 $d
     /tmp/cc09CpAR.s:1435   .text.clrall:0000000000000000 $t
     /tmp/cc09CpAR.s:1443   .text.clrall:0000000000000000 clrall
     /tmp/cc09CpAR.s:1529   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/cc09CpAR.s:1536   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:1540   .text.reset:0000000000000000 $t
     /tmp/cc09CpAR.s:1548   .text.reset:0000000000000000 reset
     /tmp/cc09CpAR.s:1593   .text.reset:0000000000000030 $d
     /tmp/cc09CpAR.s:1600   .text.stoprog:0000000000000000 $t
     /tmp/cc09CpAR.s:1608   .text.stoprog:0000000000000000 stoprog
     /tmp/cc09CpAR.s:1816   .text.stoprog:00000000000000e4 $d
     /tmp/cc09CpAR.s:1822   .text.delprog:0000000000000000 $t
     /tmp/cc09CpAR.s:1830   .text.delprog:0000000000000000 delprog
     /tmp/cc09CpAR.s:1945   .text.delprog:0000000000000068 $d
     /tmp/cc09CpAR.s:1950   .text.append_program:0000000000000000 $t
     /tmp/cc09CpAR.s:1958   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/cc09CpAR.s 			page 144


     /tmp/cc09CpAR.s:2183   .text.append_program:00000000000000c4 $d
     /tmp/cc09CpAR.s:2191   .text.check_create_wp34sdir:0000000000000000 $t
     /tmp/cc09CpAR.s:2199   .text.check_create_wp34sdir:0000000000000000 check_create_wp34sdir
     /tmp/cc09CpAR.s:2240   .text.check_create_wp34sdir:0000000000000018 $d
     /tmp/cc09CpAR.s:2247   .text.init_library:0000000000000000 $t
     /tmp/cc09CpAR.s:2255   .text.init_library:0000000000000000 init_library
     /tmp/cc09CpAR.s:2317   .text.init_library:0000000000000034 $d
     /tmp/cc09CpAR.s:2322   .text.flash_remove:0000000000000000 $t
     /tmp/cc09CpAR.s:2330   .text.flash_remove:0000000000000000 flash_remove
     /tmp/cc09CpAR.s:2377   .text.flash_remove:0000000000000024 $d
     /tmp/cc09CpAR.s:2382   .text.clrprog:0000000000000000 $t
     /tmp/cc09CpAR.s:2390   .text.clrprog:0000000000000000 clrprog
     /tmp/cc09CpAR.s:2521   .text.clrprog:0000000000000090 $d
     /tmp/cc09CpAR.s:2526   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:2530   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/cc09CpAR.s:2537   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/cc09CpAR.s:2736   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/cc09CpAR.s:2746   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:2753   .text.flash_backup:0000000000000000 $t
     /tmp/cc09CpAR.s:2761   .text.flash_backup:0000000000000000 flash_backup
     /tmp/cc09CpAR.s:2842   .text.flash_backup:0000000000000048 $d
     /tmp/cc09CpAR.s:2851   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:2855   .text.flash_restore:0000000000000000 $t
     /tmp/cc09CpAR.s:2863   .text.flash_restore:0000000000000000 flash_restore
     /tmp/cc09CpAR.s:2922   .text.flash_restore:0000000000000034 $d
     /tmp/cc09CpAR.s:2930   .text.load_program:0000000000000000 $t
     /tmp/cc09CpAR.s:2938   .text.load_program:0000000000000000 load_program
     /tmp/cc09CpAR.s:3050   .text.load_program:000000000000003c $d
     /tmp/cc09CpAR.s:3056   .text.load_registers:0000000000000000 $t
     /tmp/cc09CpAR.s:3064   .text.load_registers:0000000000000000 load_registers
     /tmp/cc09CpAR.s:3158   .text.load_registers:000000000000004c $d
     /tmp/cc09CpAR.s:3164   .text.load_sigma:0000000000000000 $t
     /tmp/cc09CpAR.s:3172   .text.load_sigma:0000000000000000 load_sigma
     /tmp/cc09CpAR.s:3244   .text.load_sigma:0000000000000040 $d
     /tmp/cc09CpAR.s:3249   .text.load_state:0000000000000000 $t
     /tmp/cc09CpAR.s:3257   .text.load_state:0000000000000000 load_state
     /tmp/cc09CpAR.s:3327   .text.load_state:000000000000003c $d
     /tmp/cc09CpAR.s:3333   .text.store_program:0000000000000000 $t
     /tmp/cc09CpAR.s:3341   .text.store_program:0000000000000000 store_program
     /tmp/cc09CpAR.s:3577   .text.store_program:00000000000000d4 $d
     /tmp/cc09CpAR.s:3584   .text.recall_program:0000000000000000 $t
     /tmp/cc09CpAR.s:3592   .text.recall_program:0000000000000000 recall_program
     /tmp/cc09CpAR.s:3653   .text.recall_program:000000000000003c $d
     /tmp/cc09CpAR.s:3658   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:3671   .text.save_lib_file:0000000000000000 $t
     /tmp/cc09CpAR.s:3679   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/cc09CpAR.s:3833   .text.save_lib_file:0000000000000084 $d
     /tmp/cc09CpAR.s:3852   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:3859   .text.load_lib_file:0000000000000000 $t
     /tmp/cc09CpAR.s:3867   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/cc09CpAR.s:4002   .text.load_lib_file:0000000000000078 $d
     /tmp/cc09CpAR.s:4020   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:4036   .text.save_ram_file:0000000000000000 $t
     /tmp/cc09CpAR.s:4044   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/cc09CpAR.s:4221   .text.save_ram_file:000000000000009c $d
     /tmp/cc09CpAR.s:4240   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:4247   .text.load_ram_file:0000000000000000 $t
ARM GAS  /tmp/cc09CpAR.s 			page 145


     /tmp/cc09CpAR.s:4255   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/cc09CpAR.s:4431   .text.load_ram_file:0000000000000094 $d
     /tmp/cc09CpAR.s:4449   .rodata.load_backup_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:4456   .text.load_backup_file:0000000000000000 $t
     /tmp/cc09CpAR.s:4464   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/cc09CpAR.s:4599   .text.load_backup_file:0000000000000078 $d
     /tmp/cc09CpAR.s:4617   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:4630   .text.save_prog_file:0000000000000000 $t
     /tmp/cc09CpAR.s:4638   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/cc09CpAR.s:4952   .text.save_prog_file:0000000000000130 $d
     /tmp/cc09CpAR.s:4970   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/cc09CpAR.s:4980   .text.load_prog_file:0000000000000000 $t
     /tmp/cc09CpAR.s:4988   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/cc09CpAR.s:5195   .text.load_prog_file:00000000000000b8 $d
     /tmp/cc09CpAR.s:5212   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/cc09CpAR.s:5220   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
error_message
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free
ARM GAS  /tmp/cc09CpAR.s 			page 146



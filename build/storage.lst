ARM GAS  /tmp/ccVDV1xv.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** // Emulator definitions
  23:src/storage.c **** #include <stdio.h>
  24:src/storage.c **** #include <stdlib.h>
  25:src/storage.c **** //#include <stddef.h>
  26:src/storage.c **** //#include <string.h>
  27:src/storage.c **** //#include <stdarg.h>
  28:src/storage.c **** 
  29:src/storage.c **** #include "features.h"
ARM GAS  /tmp/ccVDV1xv.s 			page 2


  30:src/storage.c **** #include "dmcp.h"
  31:src/storage.c **** 
  32:src/storage.c **** #define PERSISTENT_RAM
  33:src/storage.c **** #define SLCDCMEM
  34:src/storage.c **** #define VOLATILE_RAM
  35:src/storage.c **** #define BACKUP_FLASH
  36:src/storage.c **** 
  37:src/storage.c **** #if defined C_VERSION
  38:src/storage.c **** #define STATE_FILE "wp34s/wp34c.dat"
  39:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup.dat"
  40:src/storage.c **** #elif defined FOUR_K
  41:src/storage.c **** #define STATE_FILE "wp34s/wp34s_4k.dat"
  42:src/storage.c **** #define BACKUP_FILE "wp34s/wp34s-backup_4k.dat"
  43:src/storage.c **** #else
  44:src/storage.c **** #define STATE_FILE "wp34s/wp34s.dat"
  45:src/storage.c **** #define BACKUP_FILE "wp34s/wp34s-backup.dat"
  46:src/storage.c **** #endif
  47:src/storage.c **** 
  48:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  49:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  50:src/storage.c **** 
  51:src/storage.c **** #define DM42SAFE
  52:src/storage.c **** #include "xeq.h"
  53:src/storage.c **** #include "storage.h"
  54:src/storage.c **** #include "display.h"
  55:src/storage.c **** #include "stats.h"
  56:src/storage.c **** #include "alpha.h"
  57:src/storage.c **** #undef DM42SAFE
  58:src/storage.c **** 
  59:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
  60:src/storage.c **** // but we aren't actually saving to flash any more!
  61:src/storage.c **** 
  62:src/storage.c **** /*
  63:src/storage.c ****  *  Setup the persistent RAM
  64:src/storage.c ****  */
  65:src/storage.c **** 
  66:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
  67:src/storage.c **** FLASH_REGION *library_ram;
  68:src/storage.c **** 
  69:src/storage.c **** void init_mem () { // called at start of program_main in console.c
  70:src/storage.c ****   char *v;
  71:src/storage.c **** 
  72:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
  73:src/storage.c ****   if (v == NULL) {
  74:src/storage.c ****     perror("calloc failed");
  75:src/storage.c ****     return;
  76:src/storage.c ****   }
  77:src/storage.c ****   main_ram = (TPersistentRam *) v;
  78:src/storage.c ****   v += RAM_SIZE;
  79:src/storage.c ****   backup_ram = (TPersistentRam *) v;
  80:src/storage.c ****   v += RAM_SIZE;
  81:src/storage.c ****   library_ram = (FLASH_REGION *) v;
  82:src/storage.c **** }
  83:src/storage.c **** 
  84:src/storage.c **** /*
  85:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
  86:src/storage.c ****  */
ARM GAS  /tmp/ccVDV1xv.s 			page 3


  87:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
  88:src/storage.c **** 
  89:src/storage.c **** /*
  90:src/storage.c ****  *  A private register area for XROM code in volatile RAM
  91:src/storage.c ****  *  It replaces the local registers and flags if active.
  92:src/storage.c ****  */
  93:src/storage.c **** TXromParams XromParams;
  94:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
  95:src/storage.c **** 
  96:src/storage.c **** /* Private space for four registers temporarily
  97:src/storage.c ****  */
  98:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
  99:src/storage.c **** 
 100:src/storage.c **** /*
 101:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 102:src/storage.c ****  */
 103:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 104:src/storage.c **** {
 105:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 106:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 107:src/storage.c **** 	unsigned int i;
 108:src/storage.c **** 
 109:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 110:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 111:src/storage.c **** 		crc ^= *d++;
 112:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 113:src/storage.c **** 		crc ^= crc << 12;
 114:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 115:src/storage.c **** 	}
 116:src/storage.c **** 	return crc;
 117:src/storage.c **** }
 118:src/storage.c **** 
 119:src/storage.c **** /*
 120:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 121:src/storage.c ****  *  Returns non zero value if failure
 122:src/storage.c ****  */
 123:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 124:src/storage.c **** {
  30              		.loc 1 124 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 125:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 125 2 view .LVU1
 126:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 126 2 view .LVU2
  37              	.LBB39:
  38              	.LBI39:
 103:src/storage.c **** {
  39              		.loc 1 103 20 view .LVU3
  40              	.LBB40:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 105 2 view .LVU4
 106:src/storage.c **** 	unsigned int i;
  42              		.loc 1 106 2 view .LVU5
 107:src/storage.c **** 
ARM GAS  /tmp/ccVDV1xv.s 			page 4


  43              		.loc 1 107 2 view .LVU6
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 109 2 view .LVU7
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 109 15 view .LVU8
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 109 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE40:
  49              	.LBE39:
 124:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 124 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB43:
  57              	.LBB41:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 105 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 110:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 110 3 is_stmt 1 view .LVU12
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 111 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 111 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 111 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 111 3 is_stmt 1 view .LVU16
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 111 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 112:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 112 3 is_stmt 1 view .LVU18
 112:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 112 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 113 3 is_stmt 1 view .LVU20
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 113 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
ARM GAS  /tmp/ccVDV1xv.s 			page 5


 114:src/storage.c **** 	}
  85              		.loc 1 114 3 is_stmt 1 view .LVU22
 114:src/storage.c **** 	}
  86              		.loc 1 114 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 114:src/storage.c **** 	}
  89              		.loc 1 114 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 109 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 114:src/storage.c **** 	}
  93              		.loc 1 114 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 109 27 is_stmt 1 view .LVU27
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 109 15 view .LVU28
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 109 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 116:src/storage.c **** }
 100              		.loc 1 116 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 116:src/storage.c **** }
 102              		.loc 1 116 2 is_stmt 0 view .LVU31
 103              	.LBE41:
 104              	.LBE43:
 127:src/storage.c **** 	
 128:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 128 2 is_stmt 1 view .LVU32
 129:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 129 3 view .LVU33
 130:src/storage.c **** 	}
 131:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 131 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 129:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 129 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 131 2 is_stmt 1 view .LVU36
 112              		.loc 1 131 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 131 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 132:src/storage.c **** }
 119              		.loc 1 132 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccVDV1xv.s 			page 6


 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
 131:src/storage.c **** }
 128              		.loc 1 131 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 132 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB44:
 139              	.LBB42:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 105 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 116:src/storage.c **** }
 143              		.loc 1 116 2 is_stmt 1 view .LVU43
 116:src/storage.c **** }
 144              		.loc 1 116 2 is_stmt 0 view .LVU44
 145              	.LBE42:
 146              	.LBE44:
 128:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 128 2 is_stmt 1 view .LVU45
 129:src/storage.c **** 	}
 148              		.loc 1 129 3 view .LVU46
 131:src/storage.c **** }
 149              		.loc 1 131 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 129:src/storage.c **** 	}
 151              		.loc 1 129 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 131:src/storage.c **** }
 153              		.loc 1 131 2 is_stmt 1 view .LVU49
 131:src/storage.c **** }
 154              		.loc 1 131 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 131:src/storage.c **** }
 158              		.loc 1 131 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 131:src/storage.c **** }
 165              		.loc 1 131 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 132 1 view .LVU53
 169 0060 7047     		bx	lr
ARM GAS  /tmp/ccVDV1xv.s 			page 7


 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 133:src/storage.c **** 
 134:src/storage.c **** /*
 135:src/storage.c ****  *  Checksum the current program.
 136:src/storage.c ****  */
 137:src/storage.c **** short unsigned int checksum_program( void )
 138:src/storage.c **** {
 139:src/storage.c **** 	update_program_bounds( 1 );
 140:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 141:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 142:src/storage.c **** }
 143:src/storage.c **** 
 144:src/storage.c **** /*
 145:src/storage.c ****  *  Checksum the persistent RAM area
 146:src/storage.c ****  *  Returns non zero value if failure
 147:src/storage.c ****  */
 148:src/storage.c **** int checksum_ram( void )
 149:src/storage.c **** {
 150:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 151:src/storage.c **** 			      Crc, &Crc );
 152:src/storage.c **** }
 153:src/storage.c **** 
 154:src/storage.c **** /*
 155:src/storage.c ****  *  Checksum the backup flash region
 156:src/storage.c ****  *  Returns non zero value if failure
 157:src/storage.c ****  */
 158:src/storage.c **** int checksum_backup( void )
 159:src/storage.c **** {
 160:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 161:src/storage.c **** 		              BackupFlash._crc, NULL );
 162:src/storage.c **** }
 163:src/storage.c **** 
 164:src/storage.c **** /*
 165:src/storage.c ****  *  Checksum a flash region
 166:src/storage.c ****  *  Returns non zero value if failure
 167:src/storage.c ****  */
 168:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 169:src/storage.c **** {
 184              		.loc 1 169 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 170:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 170 2 view .LVU55
 189              		.loc 1 170 25 is_stmt 0 view .LVU56
 190 0000 4B88     		ldrh	r3, [r1, #2]
ARM GAS  /tmp/ccVDV1xv.s 			page 8


 171:src/storage.c **** 	
 172:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 172 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 172 2 is_stmt 1 view .LVU58
 195              		.loc 1 172 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 173:src/storage.c **** }
 200              		.loc 1 173 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 169:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 169 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 172:src/storage.c **** }
 210              		.loc 1 172 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 172:src/storage.c **** }
 213              		.loc 1 172 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 172:src/storage.c **** }
 216              		.loc 1 172 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 172:src/storage.c **** }
 219              		.loc 1 172 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 172:src/storage.c **** }
 222              		.loc 1 172 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 173 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
 232              		.align	1
 233              		.p2align 2,,3
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
 240              	.LVL23:
ARM GAS  /tmp/ccVDV1xv.s 			page 9


 241              	.LFB12:
 174:src/storage.c **** 
 175:src/storage.c **** /*
 176:src/storage.c ****  *  Helper to store final END in empty program space
 177:src/storage.c ****  */
 178:src/storage.c **** static void stoend( void )
 179:src/storage.c **** {
 180:src/storage.c **** 	ProgSize = 1;
 181:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 182:src/storage.c **** }
 183:src/storage.c **** 
 184:src/storage.c **** /*
 185:src/storage.c ****  *  Clear the program space
 186:src/storage.c ****  */
 187:src/storage.c **** void clpall( void )
 188:src/storage.c **** {
 189:src/storage.c **** 	clrretstk_pc();
 190:src/storage.c **** 	stoend();
 191:src/storage.c **** }
 192:src/storage.c **** 
 193:src/storage.c **** /*
 194:src/storage.c ****  *  Sanity checks for program (step) deletion
 195:src/storage.c ****  */
 196:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 197:src/storage.c **** {
 242              		.loc 1 197 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 198:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 198 2 view .LVU69
 247              		.loc 1 198 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 197:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 197 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 198 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 198 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 198 20 discriminator 1 view .LVU74
 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
 263              	.LVL24:
 264              	.L29:
 199:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 200:src/storage.c **** 	}
 201:src/storage.c **** 	else {
 202:src/storage.c **** 		return 0;
 265              		.loc 1 202 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 203:src/storage.c **** 	}
ARM GAS  /tmp/ccVDV1xv.s 			page 10


 204:src/storage.c **** 	return 1;
 205:src/storage.c **** }
 267              		.loc 1 205 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 198:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 198 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 198:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 198 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 199:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 199 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 204:src/storage.c **** }
 282              		.loc 1 204 2 view .LVU80
 204:src/storage.c **** }
 283              		.loc 1 204 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 205 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34s-backup_4k.dat\000"
 297      732F7770 
 297      3334732D 
 297      6261636B 
 297      75705F34 
 298 001a 0000     		.align	2
 299              	.LC1:
 300 001c 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
 300      6C69622E 
 300      64617400 
 301              		.align	2
 302              	.LC2:
 303 0030 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
ARM GAS  /tmp/ccVDV1xv.s 			page 11


 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 206:src/storage.c **** 
 207:src/storage.c **** /*
 208:src/storage.c ****  *  Clear just the current program
 209:src/storage.c ****  */
 210:src/storage.c **** void clrprog( void )
 211:src/storage.c **** {
 212:src/storage.c **** 	update_program_bounds( 1 );
 213:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 214:src/storage.c **** 		/*
 215:src/storage.c **** 		 *  Porgram is in flash
 216:src/storage.c **** 		 */
 217:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 218:src/storage.c **** 	}
 219:src/storage.c **** 	else {
 220:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 221:src/storage.c **** 			return;
 222:src/storage.c **** 		}
 223:src/storage.c **** 		clrretstk();
 224:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 225:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 226:src/storage.c **** 		if ( ProgSize == 0 ) {
 227:src/storage.c **** 			stoend();
 228:src/storage.c **** 		}
 229:src/storage.c **** 	}
 230:src/storage.c **** 	set_pc( ProgBegin - 1 );
 231:src/storage.c **** 	update_program_bounds( 1 );
 232:src/storage.c **** }
 233:src/storage.c ****  
 234:src/storage.c **** /*
 235:src/storage.c ****  *  Clear all - programs and registers
 236:src/storage.c ****  */
 237:src/storage.c **** void clrall(void) 
 238:src/storage.c **** {
 239:src/storage.c **** 	NumRegs = TOPREALREG;
 240:src/storage.c **** 	xeq_init_contexts();
 241:src/storage.c **** 	clrreg( OP_CLREG );
 242:src/storage.c **** 	clrstk( OP_CLSTK );
 243:src/storage.c **** 	clralpha( OP_CLRALPHA );
 244:src/storage.c **** 	clrflags( OP_CLFLAGS );
 245:src/storage.c **** 	clpall();
 246:src/storage.c **** 
 247:src/storage.c **** 	reset_shift();
 248:src/storage.c **** 	State2.test = TST_NONE;
 249:src/storage.c **** 
 250:src/storage.c **** 	DispMsg = NULL;
 251:src/storage.c **** }
 252:src/storage.c **** 
 253:src/storage.c **** 
 254:src/storage.c **** /*
 255:src/storage.c ****  *  Clear everything
 256:src/storage.c ****  */
 257:src/storage.c **** void reset( void ) 
ARM GAS  /tmp/ccVDV1xv.s 			page 12


 258:src/storage.c **** {
 259:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 260:src/storage.c **** 	clrall();
 261:src/storage.c **** 	init_state();
 262:src/storage.c **** #ifdef INFRARED
 263:src/storage.c **** 	printer_set_delay(1800);
 264:src/storage.c **** #endif
 265:src/storage.c **** 	DispMsg = "Erased";
 266:src/storage.c **** }
 267:src/storage.c **** 
 268:src/storage.c **** /*
 269:src/storage.c ****  *  Store into program space.
 270:src/storage.c ****  */
 271:src/storage.c **** void stoprog( opcode c ) {
 272:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 273:src/storage.c **** 	int i;
 274:src/storage.c **** 	unsigned int pc = state_pc();
 275:src/storage.c **** 
 276:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 277:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 278:src/storage.c **** 
 279:src/storage.c **** 	if ( !isRAM( pc ) ) {
 280:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 281:src/storage.c **** 		return;
 282:src/storage.c **** 	}
 283:src/storage.c **** 	clrretstk();
 284:src/storage.c **** 	xeq_init_contexts();
 285:src/storage.c **** 	if ( ProgFree < off ) {
 286:src/storage.c **** 		return;
 287:src/storage.c **** 	}
 288:src/storage.c **** 	ProgSize += off;
 289:src/storage.c **** 	ProgEnd += off;
 290:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 291:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 292:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 293:src/storage.c **** 	}
 294:src/storage.c **** 	if (isDBL(c))
 295:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 296:src/storage.c **** 	Prog_1[pc] = c;
 297:src/storage.c **** 	State.pc = pc;
 298:src/storage.c **** }
 299:src/storage.c **** 
 300:src/storage.c **** 
 301:src/storage.c **** /*
 302:src/storage.c ****  *  Delete the current step in the program
 303:src/storage.c ****  */
 304:src/storage.c **** void delprog( void )
 305:src/storage.c **** {
 306:src/storage.c **** 	int i;
 307:src/storage.c **** 	const unsigned int pc = state_pc();
 308:src/storage.c **** 	int off;
 309:src/storage.c **** 
 310:src/storage.c **** 	if ( check_delete_prog( pc ) )
 311:src/storage.c **** 		return;
 312:src/storage.c **** 	if ( pc == 0 )
 313:src/storage.c **** 		return;
 314:src/storage.c **** 
ARM GAS  /tmp/ccVDV1xv.s 			page 13


 315:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 316:src/storage.c **** 	ProgSize -= off;
 317:src/storage.c **** 	ProgEnd -= off;
 318:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 319:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 320:src/storage.c **** 	decpc();
 321:src/storage.c **** }
 322:src/storage.c **** 
 323:src/storage.c **** 
 324:src/storage.c **** /*
 325:src/storage.c ****  *  Helper to append a program in RAM.
 326:src/storage.c ****  *  Returns non zero in case of an error.
 327:src/storage.c ****  */
 328:src/storage.c **** int append_program( const s_opcode *source, int length )
 329:src/storage.c **** {
 330:src/storage.c **** 	unsigned short pc;
 331:src/storage.c **** 	int space_needed = length - ProgFree;
 332:src/storage.c **** 
 333:src/storage.c **** 	if ( ProgSize == 1 ) {
 334:src/storage.c **** 		/*
 335:src/storage.c **** 		 *  Only the default END statement is present
 336:src/storage.c **** 		 */
 337:src/storage.c **** 		--space_needed;
 338:src/storage.c **** 		--ProgSize;
 339:src/storage.c **** 	}
 340:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 341:src/storage.c **** 		return report_err( ERR_INVALID );
 342:src/storage.c **** 	}
 343:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 344:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 345:src/storage.c **** 	}
 346:src/storage.c **** 
 347:src/storage.c **** 	/*
 348:src/storage.c **** 	 *  Make room if needed
 349:src/storage.c **** 	 */
 350:src/storage.c **** 	clrretstk();
 351:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 352:src/storage.c **** 		space_needed -= SizeStatRegs;
 353:src/storage.c **** 		sigmaDeallocate();
 354:src/storage.c **** 	}
 355:src/storage.c **** 	if ( space_needed > 0 ) {
 356:src/storage.c **** 		int regs;
 357:src/storage.c **** 		if (is_dblmode())
 358:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 359:src/storage.c **** 		else
 360:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 361:src/storage.c **** 
 362:src/storage.c **** 		if ( regs < 0 ) {
 363:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 364:src/storage.c **** 		}
 365:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 366:src/storage.c **** 	}
 367:src/storage.c **** 	/*
 368:src/storage.c **** 	 *  Append data
 369:src/storage.c **** 	 */
 370:src/storage.c **** 	pc = ProgSize + 1;
 371:src/storage.c **** 	ProgSize += length;
ARM GAS  /tmp/ccVDV1xv.s 			page 14


 372:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 373:src/storage.c **** 	set_pc( pc );
 374:src/storage.c **** 	return 0;
 375:src/storage.c **** }
 376:src/storage.c **** 
 377:src/storage.c **** 
 378:src/storage.c **** /*
 379:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34c-backup.dat
 380:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 381:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 382:src/storage.c ****  */
 383:src/storage.c **** 
 384:src/storage.c **** static char* get_region_path(int region)
 385:src/storage.c **** {
 386:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 387:src/storage.c **** }
 388:src/storage.c **** 
 389:src/storage.c **** 
 390:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 391:src/storage.c **** {
 315              		.loc 1 391 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 392:src/storage.c ****   char *name;
 319              		.loc 1 392 3 view .LVU84
 393:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 393 3 view .LVU85
 391:src/storage.c ****   char *name;
 321              		.loc 1 391 1 is_stmt 0 view .LVU86
 322 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 394:src/storage.c ****   int offset;
 395:src/storage.c ****   uint x=0;
 396:src/storage.c **** 
 397:src/storage.c ****   /*
 398:src/storage.c ****    *  Copy the source to the destination memory
 399:src/storage.c ****    */
 400:src/storage.c **** 
 401:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 332              		.loc 1 401 3 view .LVU87
 333 0004 1702     		lsls	r7, r2, #8
 391:src/storage.c ****   char *name;
 334              		.loc 1 391 1 view .LVU88
 335 0006 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 40
 395:src/storage.c **** 
 337              		.loc 1 395 8 view .LVU89
 338 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccVDV1xv.s 			page 15


 339              		.loc 1 401 3 view .LVU90
 340 000a 3A46     		mov	r2, r7
 341              	.LVL29:
 391:src/storage.c ****   char *name;
 342              		.loc 1 391 1 view .LVU91
 343 000c 0546     		mov	r5, r0
 344              	.LVL30:
 394:src/storage.c ****   int offset;
 345              		.loc 1 394 3 is_stmt 1 view .LVU92
 395:src/storage.c **** 
 346              		.loc 1 395 3 view .LVU93
 395:src/storage.c **** 
 347              		.loc 1 395 8 is_stmt 0 view .LVU94
 348 000e 0193     		str	r3, [sp, #4]
 349              		.loc 1 401 3 is_stmt 1 view .LVU95
 350 0010 FFF7FEFF 		bl	xcopy
 351              	.LVL31:
 402:src/storage.c **** 
 403:src/storage.c ****   /*
 404:src/storage.c ****    *  Update the correct region file
 405:src/storage.c ****    */
 406:src/storage.c **** 
 407:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 352              		.loc 1 407 3 view .LVU96
 353              		.loc 1 407 16 is_stmt 0 view .LVU97
 354 0014 2F4B     		ldr	r3, .L56
 355 0016 1E68     		ldr	r6, [r3]
 356              		.loc 1 407 6 view .LVU98
 357 0018 AE42     		cmp	r6, r5
 358 001a 03D8     		bhi	.L37
 359              		.loc 1 407 70 discriminator 1 view .LVU99
 360 001c 06F58053 		add	r3, r6, #4096
 361              		.loc 1 407 38 discriminator 1 view .LVU100
 362 0020 9D42     		cmp	r5, r3
 363 0022 2FD3     		bcc	.L54
 364              	.L37:
 408:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 409:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 410:src/storage.c ****   }
 411:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 365              		.loc 1 411 8 is_stmt 1 view .LVU101
 366              		.loc 1 411 21 is_stmt 0 view .LVU102
 367 0024 2C4B     		ldr	r3, .L56+4
 368 0026 1E68     		ldr	r6, [r3]
 369              		.loc 1 411 11 view .LVU103
 370 0028 AE42     		cmp	r6, r5
 371 002a 2FD8     		bhi	.L39
 372              		.loc 1 411 71 discriminator 1 view .LVU104
 373 002c 06F58043 		add	r3, r6, #16384
 374              		.loc 1 411 41 discriminator 1 view .LVU105
 375 0030 9D42     		cmp	r5, r3
 376 0032 2BD2     		bcs	.L39
 412:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 377              		.loc 1 412 5 is_stmt 1 view .LVU106
 378              	.LVL32:
 379              	.LBB45:
 380              	.LBI45:
ARM GAS  /tmp/ccVDV1xv.s 			page 16


 384:src/storage.c **** {
 381              		.loc 1 384 14 view .LVU107
 382              	.LBE45:
 386:src/storage.c **** }
 383              		.loc 1 386 2 view .LVU108
 413:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 413 5 view .LVU109
 412:src/storage.c ****     offset = dest - (char *) &UserFlash;
 385              		.loc 1 412 12 is_stmt 0 view .LVU110
 386 0034 DFF8C490 		ldr	r9, .L56+40
 387              		.loc 1 413 12 view .LVU111
 388 0038 AE1B     		subs	r6, r5, r6
 389              	.LVL33:
 390              	.L38:
 414:src/storage.c ****   }
 415:src/storage.c ****   else {
 416:src/storage.c ****     // Bad address
 417:src/storage.c ****     report_err( ERR_ILLEGAL );
 418:src/storage.c ****     return 1;
 419:src/storage.c ****   }
 420:src/storage.c ****   FRESULT f;
 391              		.loc 1 420 3 is_stmt 1 view .LVU112
 421:src/storage.c **** 
 422:src/storage.c ****   f = check_create_wp34sdir ();
 392              		.loc 1 422 3 view .LVU113
 393              	.LBB46:
 394              	.LBI46:
 423:src/storage.c ****   if ( f != FR_OK ) {
 424:src/storage.c ****     return f;
 425:src/storage.c ****   }
 426:src/storage.c ****   sys_disk_write_enable(1);
 427:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 428:src/storage.c ****   if ( f != FR_OK ) {
 429:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 430:src/storage.c ****   }
 431:src/storage.c ****   if ( f != FR_OK ) {
 432:src/storage.c ****     sys_disk_write_enable(0);
 433:src/storage.c ****     return 1;
 434:src/storage.c ****   }
 435:src/storage.c ****   f_lseek( FPT, offset );
 436:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 437:src/storage.c ****   if (f != FR_OK) {
 438:src/storage.c ****     f_close( FPT );
 439:src/storage.c ****     sys_disk_write_enable(0);
 440:src/storage.c ****     return 1;
 441:src/storage.c ****   }
 442:src/storage.c ****   f = f_close( FPT );
 443:src/storage.c ****   if ( f != FR_OK ) {
 444:src/storage.c ****     sys_disk_write_enable(0);
 445:src/storage.c ****     return 1;
 446:src/storage.c ****   }
 447:src/storage.c ****   sys_disk_write_enable(0);
 448:src/storage.c ****   return 0;
 449:src/storage.c **** }
 450:src/storage.c **** 
 451:src/storage.c **** int check_create_wp34sdir(void) {
 395              		.loc 1 451 5 view .LVU114
ARM GAS  /tmp/ccVDV1xv.s 			page 17


 396              	.LBB47:
 452:src/storage.c ****   FRESULT f;
 397              		.loc 1 452 3 view .LVU115
 453:src/storage.c ****   sys_disk_write_enable(1);
 398              		.loc 1 453 3 view .LVU116
 399 003a DFF8AC80 		ldr	r8, .L56+20
 400 003e 0120     		movs	r0, #1
 401 0040 C047     		blx	r8
 402              	.LVL34:
 454:src/storage.c ****   f = check_create_dir ("/wp34s");
 403              		.loc 1 454 3 view .LVU117
 404              		.loc 1 454 7 is_stmt 0 view .LVU118
 405 0042 264B     		ldr	r3, .L56+8
 406 0044 2648     		ldr	r0, .L56+12
 407 0046 9847     		blx	r3
 408              	.LVL35:
 409 0048 0446     		mov	r4, r0
 410              	.LVL36:
 455:src/storage.c ****   sys_disk_write_enable(0);
 411              		.loc 1 455 3 is_stmt 1 view .LVU119
 412 004a 0020     		movs	r0, #0
 413 004c C047     		blx	r8
 414              	.LVL37:
 456:src/storage.c ****   return f;
 415              		.loc 1 456 3 view .LVU120
 416              		.loc 1 456 3 is_stmt 0 view .LVU121
 417              	.LBE47:
 418              	.LBE46:
 423:src/storage.c ****     return f;
 419              		.loc 1 423 3 is_stmt 1 view .LVU122
 423:src/storage.c ****     return f;
 420              		.loc 1 423 6 is_stmt 0 view .LVU123
 421 004e 14F0FF04 		ands	r4, r4, #255
 422              	.LVL38:
 423:src/storage.c ****     return f;
 423              		.loc 1 423 6 view .LVU124
 424 0052 36D1     		bne	.L53
 426:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 425              		.loc 1 426 3 is_stmt 1 view .LVU125
 427:src/storage.c ****   if ( f != FR_OK ) {
 426              		.loc 1 427 7 is_stmt 0 view .LVU126
 427 0054 DFF894A0 		ldr	r10, .L56+24
 428 0058 224C     		ldr	r4, .L56+16
 426:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 429              		.loc 1 426 3 view .LVU127
 430 005a 0120     		movs	r0, #1
 431 005c C047     		blx	r8
 432              	.LVL39:
 427:src/storage.c ****   if ( f != FR_OK ) {
 433              		.loc 1 427 3 is_stmt 1 view .LVU128
 427:src/storage.c ****   if ( f != FR_OK ) {
 434              		.loc 1 427 7 is_stmt 0 view .LVU129
 435 005e DAF80400 		ldr	r0, [r10, #4]
 436 0062 0322     		movs	r2, #3
 437 0064 4946     		mov	r1, r9
 438 0066 A047     		blx	r4
 439              	.LVL40:
ARM GAS  /tmp/ccVDV1xv.s 			page 18


 428:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 440              		.loc 1 428 3 is_stmt 1 view .LVU130
 428:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 441              		.loc 1 428 6 is_stmt 0 view .LVU131
 442 0068 B8B1     		cbz	r0, .L42
 429:src/storage.c ****   }
 443              		.loc 1 429 5 is_stmt 1 view .LVU132
 429:src/storage.c ****   }
 444              		.loc 1 429 9 is_stmt 0 view .LVU133
 445 006a DAF80400 		ldr	r0, [r10, #4]
 446              	.LVL41:
 429:src/storage.c ****   }
 447              		.loc 1 429 9 view .LVU134
 448 006e 4946     		mov	r1, r9
 449 0070 0B22     		movs	r2, #11
 450 0072 A047     		blx	r4
 451              	.LVL42:
 431:src/storage.c ****     sys_disk_write_enable(0);
 452              		.loc 1 431 3 is_stmt 1 view .LVU135
 431:src/storage.c ****     sys_disk_write_enable(0);
 453              		.loc 1 431 6 is_stmt 0 view .LVU136
 454 0074 88B1     		cbz	r0, .L42
 455              	.LVL43:
 456              	.L52:
 439:src/storage.c ****     return 1;
 457              		.loc 1 439 5 is_stmt 1 view .LVU137
 458 0076 1C4B     		ldr	r3, .L56+20
 459 0078 0020     		movs	r0, #0
 460 007a 9847     		blx	r3
 461              	.LVL44:
 440:src/storage.c ****   }
 462              		.loc 1 440 5 view .LVU138
 440:src/storage.c ****   }
 463              		.loc 1 440 12 is_stmt 0 view .LVU139
 464 007c 0120     		movs	r0, #1
 449:src/storage.c **** 
 465              		.loc 1 449 1 view .LVU140
 466 007e 02B0     		add	sp, sp, #8
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 32
 469              		@ sp needed
 470 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 471              	.LVL45:
 472              	.L54:
 473              		.cfi_restore_state
 408:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 474              		.loc 1 408 5 is_stmt 1 view .LVU141
 475              	.LBB48:
 476              	.LBI48:
 384:src/storage.c **** {
 477              		.loc 1 384 14 view .LVU142
 478              	.LBE48:
 386:src/storage.c **** }
 479              		.loc 1 386 2 view .LVU143
 409:src/storage.c ****   }
 480              		.loc 1 409 5 view .LVU144
 408:src/storage.c ****     offset = dest - (char *) &BackupFlash;
ARM GAS  /tmp/ccVDV1xv.s 			page 19


 481              		.loc 1 408 12 is_stmt 0 view .LVU145
 482 0084 DFF87890 		ldr	r9, .L56+44
 409:src/storage.c ****   }
 483              		.loc 1 409 12 view .LVU146
 484 0088 AE1B     		subs	r6, r5, r6
 485              	.LVL46:
 409:src/storage.c ****   }
 486              		.loc 1 409 12 view .LVU147
 487 008a D6E7     		b	.L38
 488              	.LVL47:
 489              	.L39:
 417:src/storage.c ****     return 1;
 490              		.loc 1 417 5 is_stmt 1 view .LVU148
 491 008c 0720     		movs	r0, #7
 492 008e FFF7FEFF 		bl	report_err
 493              	.LVL48:
 418:src/storage.c ****   }
 494              		.loc 1 418 5 view .LVU149
 418:src/storage.c ****   }
 495              		.loc 1 418 12 is_stmt 0 view .LVU150
 496 0092 0120     		movs	r0, #1
 449:src/storage.c **** 
 497              		.loc 1 449 1 view .LVU151
 498 0094 02B0     		add	sp, sp, #8
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
 501              		@ sp needed
 502 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 503              	.LVL49:
 504              	.L42:
 505              		.cfi_restore_state
 435:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 506              		.loc 1 435 3 is_stmt 1 view .LVU152
 507 009a 144C     		ldr	r4, .L56+24
 508 009c 144B     		ldr	r3, .L56+28
 509 009e 6068     		ldr	r0, [r4, #4]
 510 00a0 3146     		mov	r1, r6
 511 00a2 9847     		blx	r3
 512              	.LVL50:
 436:src/storage.c ****   if (f != FR_OK) {
 513              		.loc 1 436 3 view .LVU153
 436:src/storage.c ****   if (f != FR_OK) {
 514              		.loc 1 436 7 is_stmt 0 view .LVU154
 515 00a4 2946     		mov	r1, r5
 516 00a6 6068     		ldr	r0, [r4, #4]
 517 00a8 124D     		ldr	r5, .L56+32
 518              	.LVL51:
 436:src/storage.c ****   if (f != FR_OK) {
 519              		.loc 1 436 7 view .LVU155
 520 00aa 3A46     		mov	r2, r7
 521 00ac 01AB     		add	r3, sp, #4
 522 00ae A847     		blx	r5
 523              	.LVL52:
 437:src/storage.c ****     f_close( FPT );
 524              		.loc 1 437 3 is_stmt 1 view .LVU156
 437:src/storage.c ****     f_close( FPT );
 525              		.loc 1 437 6 is_stmt 0 view .LVU157
ARM GAS  /tmp/ccVDV1xv.s 			page 20


 526 00b0 58B9     		cbnz	r0, .L55
 442:src/storage.c ****   if ( f != FR_OK ) {
 527              		.loc 1 442 3 is_stmt 1 view .LVU158
 442:src/storage.c ****   if ( f != FR_OK ) {
 528              		.loc 1 442 7 is_stmt 0 view .LVU159
 529 00b2 6068     		ldr	r0, [r4, #4]
 530              	.LVL53:
 442:src/storage.c ****   if ( f != FR_OK ) {
 531              		.loc 1 442 7 view .LVU160
 532 00b4 104B     		ldr	r3, .L56+36
 533 00b6 9847     		blx	r3
 534              	.LVL54:
 443:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 443 3 is_stmt 1 view .LVU161
 443:src/storage.c ****     sys_disk_write_enable(0);
 536              		.loc 1 443 6 is_stmt 0 view .LVU162
 537 00b8 0446     		mov	r4, r0
 538 00ba 0028     		cmp	r0, #0
 539 00bc DBD1     		bne	.L52
 447:src/storage.c ****   return 0;
 540              		.loc 1 447 3 is_stmt 1 view .LVU163
 541 00be 0A4B     		ldr	r3, .L56+20
 542 00c0 9847     		blx	r3
 543              	.LVL55:
 544              	.L53:
 448:src/storage.c **** }
 545              		.loc 1 448 3 view .LVU164
 448:src/storage.c **** }
 546              		.loc 1 448 10 is_stmt 0 view .LVU165
 547 00c2 2046     		mov	r0, r4
 449:src/storage.c **** 
 548              		.loc 1 449 1 view .LVU166
 549 00c4 02B0     		add	sp, sp, #8
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 32
 552              		@ sp needed
 553 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 554              	.LVL56:
 555              	.L55:
 556              		.cfi_restore_state
 438:src/storage.c ****     sys_disk_write_enable(0);
 557              		.loc 1 438 5 is_stmt 1 view .LVU167
 558 00ca 6068     		ldr	r0, [r4, #4]
 559              	.LVL57:
 438:src/storage.c ****     sys_disk_write_enable(0);
 560              		.loc 1 438 5 is_stmt 0 view .LVU168
 561 00cc 0A4B     		ldr	r3, .L56+36
 562 00ce 9847     		blx	r3
 563              	.LVL58:
 564 00d0 D1E7     		b	.L52
 565              	.L57:
 566 00d2 00BF     		.align	2
 567              	.L56:
 568 00d4 00000000 		.word	backup_ram
 569 00d8 00000000 		.word	library_ram
 570 00dc D1030008 		.word	134218705
 571 00e0 30000000 		.word	.LC2
ARM GAS  /tmp/ccVDV1xv.s 			page 21


 572 00e4 35040008 		.word	134218805
 573 00e8 E1030008 		.word	134218721
 574 00ec 00200010 		.word	268443648
 575 00f0 45040008 		.word	134218821
 576 00f4 41040008 		.word	134218817
 577 00f8 39040008 		.word	134218809
 578 00fc 1C000000 		.word	.LC1
 579 0100 00000000 		.word	.LC0
 580              		.cfi_endproc
 581              	.LFE20:
 583              		.section	.text.flash_append,"ax",%progbits
 584              		.align	1
 585              		.p2align 2,,3
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
 591              	flash_append:
 592              	.LVL59:
 593              	.LFB23:
 457:src/storage.c **** }
 458:src/storage.c **** 
 459:src/storage.c **** 
 460:src/storage.c **** /*
 461:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 462:src/storage.c ****  */
 463:src/storage.c **** void init_library( void )
 464:src/storage.c **** {
 465:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 466:src/storage.c **** 	  struct {
 467:src/storage.c **** 			unsigned short crc;
 468:src/storage.c **** 			unsigned short size;
 469:src/storage.c **** 			s_opcode prog[ 126 ];
 470:src/storage.c **** 		} lib;
 471:src/storage.c **** 		lib.size = 0;
 472:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 473:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 474:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 475:src/storage.c **** 	}
 476:src/storage.c **** }
 477:src/storage.c **** 
 478:src/storage.c **** 
 479:src/storage.c **** /*
 480:src/storage.c ****  *  Add data at the end of user flash memory.
 481:src/storage.c ****  *  Update crc and counter when done.
 482:src/storage.c ****  *  All sizes are given in steps.
 483:src/storage.c ****  */
 484:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 485:src/storage.c **** {
 594              		.loc 1 485 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 256
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 486:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 598              		.loc 1 486 3 view .LVU170
 485:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 599              		.loc 1 485 1 is_stmt 0 view .LVU171
ARM GAS  /tmp/ccVDV1xv.s 			page 22


 600 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 601              		.cfi_def_cfa_offset 36
 602              		.cfi_offset 4, -36
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 6, -28
 605              		.cfi_offset 7, -24
 606              		.cfi_offset 8, -20
 607              		.cfi_offset 9, -16
 608              		.cfi_offset 10, -12
 609              		.cfi_offset 11, -8
 610              		.cfi_offset 14, -4
 611              		.loc 1 486 27 view .LVU172
 612 0004 254F     		ldr	r7, .L70
 613 0006 3C68     		ldr	r4, [r7]
 614 0008 251D     		adds	r5, r4, #4
 615              		.loc 1 486 9 view .LVU173
 616 000a 05EB4006 		add	r6, r5, r0, lsl #1
 617              	.LVL60:
 487:src/storage.c ****   char *src = (char *) source;
 618              		.loc 1 487 3 is_stmt 1 view .LVU174
 488:src/storage.c **** #ifdef REALBUILD
 489:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 490:src/storage.c **** #else
 491:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 619              		.loc 1 491 31 is_stmt 0 view .LVU175
 620 000e 341B     		subs	r4, r6, r4
 492:src/storage.c **** #endif
 493:src/storage.c ****   char buffer[ PAGE_SIZE ];
 494:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 495:src/storage.c ****   count <<= 1;
 496:src/storage.c **** 
 497:src/storage.c ****   if ( offset_in_page != 0 ) {
 621              		.loc 1 497 6 view .LVU176
 622 0010 14F0FF04 		ands	r4, r4, #255
 485:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 623              		.loc 1 485 1 view .LVU177
 624 0014 C1B0     		sub	sp, sp, #260
 625              		.cfi_def_cfa_offset 296
 485:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 626              		.loc 1 485 1 view .LVU178
 627 0016 8846     		mov	r8, r1
 628              	.LVL61:
 491:src/storage.c **** #endif
 629              		.loc 1 491 3 is_stmt 1 view .LVU179
 493:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 630              		.loc 1 493 3 view .LVU180
 494:src/storage.c ****   count <<= 1;
 631              		.loc 1 494 3 view .LVU181
 495:src/storage.c **** 
 632              		.loc 1 495 3 view .LVU182
 495:src/storage.c **** 
 633              		.loc 1 495 9 is_stmt 0 view .LVU183
 634 0018 4FEA4205 		lsl	r5, r2, #1
 635              	.LVL62:
 636              		.loc 1 497 3 is_stmt 1 view .LVU184
 485:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 637              		.loc 1 485 1 is_stmt 0 view .LVU185
ARM GAS  /tmp/ccVDV1xv.s 			page 23


 638 001c 9946     		mov	r9, r3
 639              		.loc 1 497 6 view .LVU186
 640 001e 21D1     		bne	.L69
 641              	.LVL63:
 642              	.L59:
 498:src/storage.c ****     /*
 499:src/storage.c ****      *  We are not on a page boundary
 500:src/storage.c ****      *  Assemble a buffer from existing and new data
 501:src/storage.c ****      */
 502:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 503:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 504:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 505:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 506:src/storage.c ****       return 1;
 507:src/storage.c ****     }
 508:src/storage.c ****     src += bytes;
 509:src/storage.c ****     dest += bytes;
 510:src/storage.c ****     count -= bytes;
 511:src/storage.c ****   }
 512:src/storage.c **** 
 513:src/storage.c ****   if ( count > 0 ) {
 643              		.loc 1 513 3 is_stmt 1 view .LVU187
 644              		.loc 1 513 6 is_stmt 0 view .LVU188
 645 0020 002D     		cmp	r5, #0
 646 0022 07DD     		ble	.L64
 514:src/storage.c ****     /*
 515:src/storage.c ****      *  Move multiples of complete pages
 516:src/storage.c ****      */
 517:src/storage.c **** #ifdef DM42
 518:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
 647              		.loc 1 518 5 is_stmt 1 view .LVU189
 648              		.loc 1 518 21 is_stmt 0 view .LVU190
 649 0024 05F1FF02 		add	r2, r5, #255
 650              	.LVL64:
 519:src/storage.c **** #else
 520:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 521:src/storage.c **** #endif
 522:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 651              		.loc 1 522 5 is_stmt 1 view .LVU191
 652              		.loc 1 522 10 is_stmt 0 view .LVU192
 653 0028 1212     		asrs	r2, r2, #8
 654              	.LVL65:
 655              		.loc 1 522 10 view .LVU193
 656 002a 4146     		mov	r1, r8
 657 002c 3046     		mov	r0, r6
 658 002e FFF7FEFF 		bl	program_flash
 659              	.LVL66:
 660              		.loc 1 522 8 view .LVU194
 661 0032 98B9     		cbnz	r0, .L63
 662              	.LVL67:
 663              	.L64:
 523:src/storage.c ****       return 1;
 524:src/storage.c ****     }
 525:src/storage.c ****   }
 526:src/storage.c **** 
 527:src/storage.c ****   /*
 528:src/storage.c ****    *  Update the library header to fix the crc and size fields.
ARM GAS  /tmp/ccVDV1xv.s 			page 24


 529:src/storage.c ****    */
 530:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 664              		.loc 1 530 3 is_stmt 1 view .LVU195
 665 0034 3968     		ldr	r1, [r7]
 666 0036 4FF48072 		mov	r2, #256
 667 003a 6846     		mov	r0, sp
 668 003c FFF7FEFF 		bl	xcopy
 669              	.LVL68:
 531:src/storage.c ****   fr->size = size;
 670              		.loc 1 531 3 view .LVU196
 532:src/storage.c ****   checksum_region( &UserFlash, fr );
 671              		.loc 1 532 3 is_stmt 0 view .LVU197
 672 0040 6946     		mov	r1, sp
 673 0042 3868     		ldr	r0, [r7]
 531:src/storage.c ****   fr->size = size;
 674              		.loc 1 531 12 view .LVU198
 675 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 676              		.loc 1 532 3 is_stmt 1 view .LVU199
 677 0048 FFF7FEFF 		bl	checksum_region
 678              	.LVL69:
 533:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
 679              		.loc 1 533 3 view .LVU200
 680              		.loc 1 533 10 is_stmt 0 view .LVU201
 681 004c 3868     		ldr	r0, [r7]
 682 004e 6946     		mov	r1, sp
 683 0050 0122     		movs	r2, #1
 684 0052 FFF7FEFF 		bl	program_flash
 685              	.LVL70:
 534:src/storage.c **** }
 686              		.loc 1 534 1 view .LVU202
 687 0056 41B0     		add	sp, sp, #260
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 36
 690              	.LVL71:
 691              		.loc 1 534 1 view .LVU203
 692              		@ sp needed
 693 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              	.LVL72:
 695              	.L63:
 696              		.cfi_restore_state
 697              	.LBB49:
 506:src/storage.c ****     }
 698              		.loc 1 506 14 view .LVU204
 699 005c 0120     		movs	r0, #1
 700              	.LBE49:
 701              		.loc 1 534 1 view .LVU205
 702 005e 41B0     		add	sp, sp, #260
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              	.LVL73:
 706              		.loc 1 534 1 view .LVU206
 707              		@ sp needed
 708 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 709              	.LVL74:
 710              	.L69:
 711              		.cfi_restore_state
 712              	.LBB50:
ARM GAS  /tmp/ccVDV1xv.s 			page 25


 502:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713              		.loc 1 502 5 is_stmt 1 view .LVU207
 503:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714              		.loc 1 503 25 is_stmt 0 view .LVU208
 715 0064 A6EB040B 		sub	fp, r6, r4
 503:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 716              		.loc 1 503 5 view .LVU209
 717 0068 5946     		mov	r1, fp
 718              	.LVL75:
 503:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 719              		.loc 1 503 5 view .LVU210
 720 006a 2246     		mov	r2, r4
 721 006c 6846     		mov	r0, sp
 722              	.LVL76:
 502:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 723              		.loc 1 502 15 view .LVU211
 724 006e C4F5807A 		rsb	r10, r4, #256
 725              	.LVL77:
 503:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 726              		.loc 1 503 5 is_stmt 1 view .LVU212
 727 0072 FFF7FEFF 		bl	xcopy
 728              	.LVL78:
 504:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 729              		.loc 1 504 5 view .LVU213
 730 0076 5246     		mov	r2, r10
 731 0078 4146     		mov	r1, r8
 732 007a 0DEB0400 		add	r0, sp, r4
 733 007e FFF7FEFF 		bl	xcopy
 734              	.LVL79:
 505:src/storage.c ****       return 1;
 735              		.loc 1 505 5 view .LVU214
 505:src/storage.c ****       return 1;
 736              		.loc 1 505 10 is_stmt 0 view .LVU215
 737 0082 6946     		mov	r1, sp
 738 0084 5846     		mov	r0, fp
 739 0086 0122     		movs	r2, #1
 740 0088 FFF7FEFF 		bl	program_flash
 741              	.LVL80:
 505:src/storage.c ****       return 1;
 742              		.loc 1 505 8 view .LVU216
 743 008c 0028     		cmp	r0, #0
 744 008e E5D1     		bne	.L63
 508:src/storage.c ****     dest += bytes;
 745              		.loc 1 508 5 is_stmt 1 view .LVU217
 508:src/storage.c ****     dest += bytes;
 746              		.loc 1 508 9 is_stmt 0 view .LVU218
 747 0090 D044     		add	r8, r8, r10
 748              	.LVL81:
 509:src/storage.c ****     count -= bytes;
 749              		.loc 1 509 5 is_stmt 1 view .LVU219
 509:src/storage.c ****     count -= bytes;
 750              		.loc 1 509 10 is_stmt 0 view .LVU220
 751 0092 5644     		add	r6, r6, r10
 752              	.LVL82:
 510:src/storage.c ****   }
 753              		.loc 1 510 5 is_stmt 1 view .LVU221
 510:src/storage.c ****   }
ARM GAS  /tmp/ccVDV1xv.s 			page 26


 754              		.loc 1 510 11 is_stmt 0 view .LVU222
 755 0094 A5EB0A05 		sub	r5, r5, r10
 756              	.LVL83:
 510:src/storage.c ****   }
 757              		.loc 1 510 11 view .LVU223
 758 0098 C2E7     		b	.L59
 759              	.L71:
 760 009a 00BF     		.align	2
 761              	.L70:
 762 009c 00000000 		.word	library_ram
 763              	.LBE50:
 764              		.cfi_endproc
 765              	.LFE23:
 767              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 768              		.align	2
 769              	.LC3:
 770 0000 64617461 		.ascii	"data=3??\000"
 770      3D333F3F 
 770      00
 771 0009 000000   		.align	2
 772              	.LC4:
 773 000c 43616E27 		.ascii	"Can't open\000"
 773      74206F70 
 773      656E00
 774              		.section	.text.open_selected_file,"ax",%progbits
 775              		.align	1
 776              		.p2align 2,,3
 777              		.global	open_selected_file
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	open_selected_file:
 784              	.LVL84:
 785              	.LFB38:
 535:src/storage.c **** 
 536:src/storage.c **** 
 537:src/storage.c **** /*
 538:src/storage.c ****  *  Remove steps from user flash memory.
 539:src/storage.c ****  */
 540:src/storage.c **** int flash_remove( int step_no, int count )
 541:src/storage.c **** {
 542:src/storage.c **** 	const int size = UserFlash.size - count;
 543:src/storage.c **** 	step_no = offsetLIB( step_no );
 544:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 545:src/storage.c **** 			     size - step_no, size );
 546:src/storage.c **** }
 547:src/storage.c **** 
 548:src/storage.c **** 
 549:src/storage.c **** /*
 550:src/storage.c ****  *  Simple backup / restore
 551:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 552:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 553:src/storage.c ****  */
 554:src/storage.c **** void flash_backup( enum nilop op )
 555:src/storage.c **** {
 556:src/storage.c ****   if ( not_running() ) {
ARM GAS  /tmp/ccVDV1xv.s 			page 27


 557:src/storage.c ****     process_cmdline_set_lift();
 558:src/storage.c ****     init_state();
 559:src/storage.c ****     checksum_all();
 560:src/storage.c ****     if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 561:src/storage.c ****       error_message( ERR_IO );
 562:src/storage.c ****       DispMsg = "Error";
 563:src/storage.c ****     }
 564:src/storage.c ****     else {
 565:src/storage.c ****       DispMsg = "Saved";
 566:src/storage.c ****     }
 567:src/storage.c ****   }
 568:src/storage.c **** }
 569:src/storage.c **** 
 570:src/storage.c **** 
 571:src/storage.c **** void flash_restore( enum nilop op )
 572:src/storage.c **** {
 573:src/storage.c ****   if ( not_running() ) {
 574:src/storage.c ****     if ( checksum_backup() ) {
 575:src/storage.c ****       error_message( ERR_INVALID );
 576:src/storage.c ****     }
 577:src/storage.c ****     else {
 578:src/storage.c ****       xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
 579:src/storage.c ****       init_state();
 580:src/storage.c ****       DispMsg = "Restored";
 581:src/storage.c ****     }
 582:src/storage.c ****   }
 583:src/storage.c **** }
 584:src/storage.c **** 
 585:src/storage.c **** 
 586:src/storage.c **** /*
 587:src/storage.c ****  *  Load the user program area from the backup.
 588:src/storage.c ****  *  Called by PLOAD.
 589:src/storage.c ****  */
 590:src/storage.c **** void load_program( enum nilop op )
 591:src/storage.c **** {
 592:src/storage.c **** 	if ( not_running() ) {
 593:src/storage.c **** 		if ( checksum_backup() ) {
 594:src/storage.c **** 			/*
 595:src/storage.c **** 			 *  Not a valid backup
 596:src/storage.c **** 			 */
 597:src/storage.c **** 			report_err( ERR_INVALID );
 598:src/storage.c **** 			return;
 599:src/storage.c **** 		}
 600:src/storage.c **** 		clpall();
 601:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 602:src/storage.c **** 	}
 603:src/storage.c **** }
 604:src/storage.c **** 
 605:src/storage.c **** 
 606:src/storage.c **** /*
 607:src/storage.c ****  *  Load registers from backup
 608:src/storage.c ****  */
 609:src/storage.c **** void load_registers( enum nilop op )
 610:src/storage.c **** {
 611:src/storage.c **** 	int count;
 612:src/storage.c **** 	if ( checksum_backup() ) {
 613:src/storage.c **** 		/*
ARM GAS  /tmp/ccVDV1xv.s 			page 28


 614:src/storage.c **** 		 *  Not a valid backup region
 615:src/storage.c **** 		 */
 616:src/storage.c **** 		report_err( ERR_INVALID );
 617:src/storage.c **** 		return;
 618:src/storage.c **** 	}
 619:src/storage.c **** 	count = NumRegs;
 620:src/storage.c **** 	if ( is_dblmode() ) {
 621:src/storage.c **** 		// Don't clobber the stack in DP mode
 622:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 623:src/storage.c **** 	}
 624:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 625:src/storage.c **** 		count = BackupFlash._numregs;
 626:src/storage.c **** 	}
 627:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 628:src/storage.c **** }
 629:src/storage.c **** 
 630:src/storage.c **** 
 631:src/storage.c **** /*
 632:src/storage.c ****  *  Load the statistical summation registers from backup
 633:src/storage.c ****  */
 634:src/storage.c **** void load_sigma( enum nilop op )
 635:src/storage.c **** {
 636:src/storage.c **** 	if ( checksum_backup() ) {
 637:src/storage.c **** 		/*
 638:src/storage.c **** 		 *  Not a valid backup region
 639:src/storage.c **** 		 */
 640:src/storage.c **** 		report_err( ERR_INVALID );
 641:src/storage.c **** 		return;
 642:src/storage.c **** 	}
 643:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 644:src/storage.c **** 		/*
 645:src/storage.c **** 		 *  Backup has no data
 646:src/storage.c **** 		 */
 647:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 648:src/storage.c **** 		return;
 649:src/storage.c **** 	}
 650:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 651:src/storage.c **** }
 652:src/storage.c **** 
 653:src/storage.c **** 
 654:src/storage.c **** /*
 655:src/storage.c ****  *  Load the configuration data from the backup
 656:src/storage.c ****  */
 657:src/storage.c **** void load_state( enum nilop op )
 658:src/storage.c **** {
 659:src/storage.c **** 	if ( not_running() ) {
 660:src/storage.c **** 		if ( checksum_backup() ) {
 661:src/storage.c **** 			/*
 662:src/storage.c **** 			 *  Not a valid backup region
 663:src/storage.c **** 			 */
 664:src/storage.c **** 			report_err( ERR_INVALID );
 665:src/storage.c **** 			return;
 666:src/storage.c **** 		}
 667:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 668:src/storage.c **** 		init_state();
 669:src/storage.c **** 		clrretstk_pc();
 670:src/storage.c **** 	}
ARM GAS  /tmp/ccVDV1xv.s 			page 29


 671:src/storage.c **** }
 672:src/storage.c **** 
 673:src/storage.c **** 
 674:src/storage.c **** /*
 675:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 676:src/storage.c ****  */
 677:src/storage.c **** void store_program( enum nilop op )
 678:src/storage.c **** {
 679:src/storage.c **** 	opcode lbl; 
 680:src/storage.c **** 	unsigned int pc;
 681:src/storage.c **** 	int space_needed, count, free;
 682:src/storage.c **** 
 683:src/storage.c **** 	if ( not_running() ) {
 684:src/storage.c **** 		/*
 685:src/storage.c **** 		 *  Don't copy from library or XROM
 686:src/storage.c **** 		 */
 687:src/storage.c **** 		pc = nLIB( state_pc() );
 688:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 689:src/storage.c **** 			report_err( ERR_ILLEGAL );
 690:src/storage.c **** 			return;
 691:src/storage.c **** 		}
 692:src/storage.c **** 		/*
 693:src/storage.c **** 		 *  Check if program is labeled
 694:src/storage.c **** 		 */
 695:src/storage.c **** 		update_program_bounds( 1 );
 696:src/storage.c **** 		lbl = getprog( ProgBegin );
 697:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 698:src/storage.c **** 			report_err( ERR_NO_LBL );
 699:src/storage.c **** 			return;
 700:src/storage.c **** 		}
 701:src/storage.c **** 		/*
 702:src/storage.c **** 		 *  Compute space needed
 703:src/storage.c **** 		 */
 704:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 705:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 706:src/storage.c **** 
 707:src/storage.c **** 		/*
 708:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 709:src/storage.c **** 		 */
 710:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 711:src/storage.c **** 		if ( pc != 0 ) {
 712:src/storage.c **** 			/*
 713:src/storage.c **** 			 *  CLP in library
 714:src/storage.c **** 			 */
 715:src/storage.c **** 			unsigned int old_pc = state_pc();
 716:src/storage.c **** 			set_pc( pc );
 717:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 718:src/storage.c **** 			if ( space_needed <= free ) {
 719:src/storage.c **** 				clrprog();
 720:src/storage.c **** 			}
 721:src/storage.c **** 			set_pc( old_pc );
 722:src/storage.c **** 		}
 723:src/storage.c **** 		if ( space_needed > free ) {
 724:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 725:src/storage.c **** 			return;
 726:src/storage.c **** 		}
 727:src/storage.c **** 		// 3. Append program
ARM GAS  /tmp/ccVDV1xv.s 			page 30


 728:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 729:src/storage.c **** 	}
 730:src/storage.c **** }
 731:src/storage.c **** 
 732:src/storage.c **** 
 733:src/storage.c **** /*
 734:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 735:src/storage.c ****  */
 736:src/storage.c **** void recall_program( enum nilop op )
 737:src/storage.c **** {
 738:src/storage.c **** 	if ( not_running() ) {
 739:src/storage.c **** 		if ( state_pc() == 0 ) {
 740:src/storage.c **** 			State.pc = 1;
 741:src/storage.c **** 		}
 742:src/storage.c **** 		update_program_bounds( 1 );
 743:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 744:src/storage.c **** 	}
 745:src/storage.c **** }
 746:src/storage.c **** 
 747:src/storage.c **** 
 748:src/storage.c **** /*
 749:src/storage.c ****  *  Lots of file routines for DM42
 750:src/storage.c ****  */
 751:src/storage.c **** 
 752:src/storage.c **** #ifdef DM42
 753:src/storage.c **** 
 754:src/storage.c **** #define DISP_NEW 1
 755:src/storage.c **** #define OVERWRITE_CHECK 1
 756:src/storage.c **** #define NO_DISP_NEW 0
 757:src/storage.c **** #define NO_OVERWRITE_CHECK 0
 758:src/storage.c **** #define WRITE 1
 759:src/storage.c **** #define READ 2
 760:src/storage.c **** 
 761:src/storage.c **** void save_lib_file ( int i ) {
 762:src/storage.c ****   FRESULT f;
 763:src/storage.c ****   int fss;
 764:src/storage.c ****   int data = WRITE;
 765:src/storage.c ****   uint x=0;
 766:src/storage.c **** 
 767:src/storage.c ****   sys_disk_write_enable(1);
 768:src/storage.c ****   if (i == 0) {
 769:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 770:src/storage.c ****     if (f != FR_OK) {
 771:src/storage.c ****       f_close (FPT);
 772:src/storage.c ****       sys_disk_write_enable(0);
 773:src/storage.c ****       DispMsg = "Can't open";
 774:src/storage.c ****       return;
 775:src/storage.c ****     }
 776:src/storage.c ****   }
 777:src/storage.c ****   else {
 778:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
 779:src/storage.c ****     if (fss != 1) return;
 780:src/storage.c ****   }
 781:src/storage.c ****   // File is now open with correct permissions
 782:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
 783:src/storage.c ****   if ( f != FR_OK ) {
 784:src/storage.c ****     DispMsg = "FR not ok";
ARM GAS  /tmp/ccVDV1xv.s 			page 31


 785:src/storage.c ****   }
 786:src/storage.c ****   f_close( FPT );
 787:src/storage.c ****   sys_disk_write_enable(0);
 788:src/storage.c **** }
 789:src/storage.c **** 
 790:src/storage.c **** void load_lib_file ( int i ) {
 791:src/storage.c ****   FRESULT f;
 792:src/storage.c ****   int fss;
 793:src/storage.c ****   int data = READ;
 794:src/storage.c ****   uint x=0;
 795:src/storage.c **** 
 796:src/storage.c ****   if (i == 0) {
 797:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 798:src/storage.c ****     if (f != FR_OK) {
 799:src/storage.c ****       f_close (FPT);
 800:src/storage.c ****       DispMsg = "Can't open";
 801:src/storage.c ****       return;
 802:src/storage.c ****     }
 803:src/storage.c ****   }
 804:src/storage.c ****   else {
 805:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
 806:src/storage.c ****     if (fss != 1) return;
 807:src/storage.c ****   }
 808:src/storage.c ****   // File is now open with correct permissions
 809:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
 810:src/storage.c ****   if ( f != FR_OK ) {
 811:src/storage.c ****     DispMsg = "FR not ok";
 812:src/storage.c ****   }
 813:src/storage.c ****   if ( !(f_eof(FPT)) ) {
 814:src/storage.c ****     DispMsg = "Not at eof";
 815:src/storage.c ****   }
 816:src/storage.c ****   f_close( FPT );
 817:src/storage.c **** }
 818:src/storage.c **** 
 819:src/storage.c **** void save_ram_file ( int i ) {
 820:src/storage.c ****   FRESULT f;
 821:src/storage.c ****   int fss;
 822:src/storage.c ****   int data = WRITE;
 823:src/storage.c ****   uint x=0;
 824:src/storage.c **** 
 825:src/storage.c ****     process_cmdline_set_lift();
 826:src/storage.c ****     init_state();
 827:src/storage.c ****     checksum_all();
 828:src/storage.c **** 
 829:src/storage.c ****     sys_disk_write_enable(1);
 830:src/storage.c ****     if (i == 0) {
 831:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 832:src/storage.c ****       if (f != FR_OK) {
 833:src/storage.c **** 	f_close (FPT);
 834:src/storage.c **** 	sys_disk_write_enable(0);
 835:src/storage.c **** 	DispMsg = "Can't open";
 836:src/storage.c **** 	return;
 837:src/storage.c ****       }
 838:src/storage.c ****     }
 839:src/storage.c ****     else {
 840:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
 841:src/storage.c ****       if (fss != 1) return;
ARM GAS  /tmp/ccVDV1xv.s 			page 32


 842:src/storage.c ****     }
 843:src/storage.c ****     // File is now open with correct permissions
 844:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
 845:src/storage.c ****     if ( f != FR_OK ) {
 846:src/storage.c ****       DispMsg = "FR not ok";
 847:src/storage.c ****     }
 848:src/storage.c ****     f_close( FPT );
 849:src/storage.c ****     sys_disk_write_enable(0);
 850:src/storage.c **** }
 851:src/storage.c **** 
 852:src/storage.c **** int load_ram_file ( int i ) { // this will load backup files too!
 853:src/storage.c ****   FRESULT f;
 854:src/storage.c ****   int fss;
 855:src/storage.c ****   int data = READ;
 856:src/storage.c ****   uint x=0;
 857:src/storage.c ****   
 858:src/storage.c ****   if (i == 0) {
 859:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 860:src/storage.c ****     if (f != FR_OK) {
 861:src/storage.c ****       f_close (FPT);
 862:src/storage.c ****       DispMsg = "Can't open";
 863:src/storage.c ****       return 1;
 864:src/storage.c ****     }
 865:src/storage.c ****   }
 866:src/storage.c ****   else {
 867:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
 868:src/storage.c ****     if (fss != 1) return 1;
 869:src/storage.c ****   }
 870:src/storage.c ****   // File is now open with correct permissions
 871:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
 872:src/storage.c ****   if ( f != FR_OK ) {
 873:src/storage.c ****     DispMsg = "FR not ok";
 874:src/storage.c ****     f_close( FPT );
 875:src/storage.c ****     return 1;
 876:src/storage.c ****   }
 877:src/storage.c ****   if ( !(f_eof(FPT)) ) {
 878:src/storage.c ****     DispMsg = "Not at eof";
 879:src/storage.c ****     f_close( FPT );
 880:src/storage.c ****     return 1;
 881:src/storage.c ****   }
 882:src/storage.c ****   f_close( FPT );
 883:src/storage.c ****   return 0;
 884:src/storage.c **** }
 885:src/storage.c **** 
 886:src/storage.c **** void load_backup_file ( int i ) { // goes into backup!
 887:src/storage.c ****   FRESULT f;
 888:src/storage.c ****   int fss;
 889:src/storage.c ****   int data = READ;
 890:src/storage.c ****   uint x=0;
 891:src/storage.c **** 
 892:src/storage.c ****   if (i == 0) {
 893:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 894:src/storage.c ****     if (f != FR_OK) {
 895:src/storage.c ****       DispMsg = "Can't open";
 896:src/storage.c ****       f_close (FPT);
 897:src/storage.c ****       return;
 898:src/storage.c ****     }
ARM GAS  /tmp/ccVDV1xv.s 			page 33


 899:src/storage.c ****   }
 900:src/storage.c ****   else {
 901:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
 902:src/storage.c ****     if (fss != 1) return;
 903:src/storage.c ****   }
 904:src/storage.c ****   // File is now open with correct permissions
 905:src/storage.c ****   f = f_read (FPT, (char *) &BackupFlash, sizeof (BackupFlash), &x);
 906:src/storage.c ****   if ( f != FR_OK ) {
 907:src/storage.c ****       DispMsg = "FR not ok";
 908:src/storage.c ****   }
 909:src/storage.c ****   if ( !(f_eof(FPT)) ) {
 910:src/storage.c ****     DispMsg = "Not at eof";
 911:src/storage.c ****   }
 912:src/storage.c ****   f_close( FPT );
 913:src/storage.c **** }
 914:src/storage.c **** 
 915:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
 786              		.loc 1 915 78 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 915 78 is_stmt 0 view .LVU225
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
 916:src/storage.c ****   FRESULT f;
 917:src/storage.c **** 
 918:src/storage.c ****   if (*(int*)data == WRITE) {
 795              		.loc 1 918 7 view .LVU226
 796 0002 1368     		ldr	r3, [r2]
 797              		.loc 1 918 6 view .LVU227
 798 0004 012B     		cmp	r3, #1
 915:src/storage.c ****   FRESULT f;
 799              		.loc 1 915 78 view .LVU228
 800 0006 0146     		mov	r1, r0
 801              	.LVL85:
 916:src/storage.c ****   FRESULT f;
 802              		.loc 1 916 3 is_stmt 1 view .LVU229
 803              		.loc 1 918 3 view .LVU230
 804              		.loc 1 918 6 is_stmt 0 view .LVU231
 805 0008 0ED0     		beq	.L79
 919:src/storage.c ****     // open file to write
 920:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 921:src/storage.c ****   }
 922:src/storage.c ****   else if (*(int*)data == READ) {
 806              		.loc 1 922 8 is_stmt 1 view .LVU232
 807              		.loc 1 922 11 is_stmt 0 view .LVU233
 808 000a 022B     		cmp	r3, #2
 809 000c 07D1     		bne	.L75
 923:src/storage.c ****     // open file to read
 924:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 810              		.loc 1 924 5 is_stmt 1 view .LVU234
 811              		.loc 1 924 9 is_stmt 0 view .LVU235
 812 000e 104A     		ldr	r2, .L81
 813              	.LVL86:
 814              		.loc 1 924 9 view .LVU236
ARM GAS  /tmp/ccVDV1xv.s 			page 34


 815 0010 104B     		ldr	r3, .L81+4
 816 0012 5068     		ldr	r0, [r2, #4]
 817              	.LVL87:
 818              		.loc 1 924 9 view .LVU237
 819 0014 0122     		movs	r2, #1
 820 0016 9847     		blx	r3
 821              	.LVL88:
 925:src/storage.c ****   }
 926:src/storage.c ****   else {
 927:src/storage.c ****     DispMsg = "data=3??";
 928:src/storage.c ****     return 3; // serious error!
 929:src/storage.c ****   }
 930:src/storage.c ****   if (f != FR_OK) {
 822              		.loc 1 930 3 is_stmt 1 view .LVU238
 823              		.loc 1 930 6 is_stmt 0 view .LVU239
 824 0018 68B9     		cbnz	r0, .L80
 825              	.L77:
 931:src/storage.c ****     f_close (FPT);
 932:src/storage.c ****     sys_disk_write_enable(0);
 933:src/storage.c ****     DispMsg = "Can't open";
 934:src/storage.c ****     return 2; // file can't be opened
 935:src/storage.c ****   }
 936:src/storage.c ****   else {
 937:src/storage.c ****     return 1; // file opened successfully
 826              		.loc 1 937 12 view .LVU240
 827 001a 0120     		movs	r0, #1
 828              	.LVL89:
 938:src/storage.c ****   }
 939:src/storage.c **** }
 829              		.loc 1 939 1 view .LVU241
 830 001c 08BD     		pop	{r3, pc}
 831              	.LVL90:
 832              	.L75:
 927:src/storage.c ****     return 3; // serious error!
 833              		.loc 1 927 5 is_stmt 1 view .LVU242
 927:src/storage.c ****     return 3; // serious error!
 834              		.loc 1 927 13 is_stmt 0 view .LVU243
 835 001e 0E4B     		ldr	r3, .L81+8
 836 0020 0E4A     		ldr	r2, .L81+12
 837              	.LVL91:
 927:src/storage.c ****     return 3; // serious error!
 838              		.loc 1 927 13 view .LVU244
 839 0022 1A60     		str	r2, [r3]
 928:src/storage.c ****   }
 840              		.loc 1 928 5 is_stmt 1 view .LVU245
 928:src/storage.c ****   }
 841              		.loc 1 928 12 is_stmt 0 view .LVU246
 842 0024 0320     		movs	r0, #3
 843              	.LVL92:
 844              		.loc 1 939 1 view .LVU247
 845 0026 08BD     		pop	{r3, pc}
 846              	.LVL93:
 847              	.L79:
 920:src/storage.c ****   }
 848              		.loc 1 920 5 is_stmt 1 view .LVU248
 920:src/storage.c ****   }
 849              		.loc 1 920 9 is_stmt 0 view .LVU249
ARM GAS  /tmp/ccVDV1xv.s 			page 35


 850 0028 094A     		ldr	r2, .L81
 851              	.LVL94:
 920:src/storage.c ****   }
 852              		.loc 1 920 9 view .LVU250
 853 002a 0A4B     		ldr	r3, .L81+4
 854 002c 5068     		ldr	r0, [r2, #4]
 855              	.LVL95:
 920:src/storage.c ****   }
 856              		.loc 1 920 9 view .LVU251
 857 002e 0B22     		movs	r2, #11
 858 0030 9847     		blx	r3
 859              	.LVL96:
 930:src/storage.c ****     f_close (FPT);
 860              		.loc 1 930 3 is_stmt 1 view .LVU252
 930:src/storage.c ****     f_close (FPT);
 861              		.loc 1 930 6 is_stmt 0 view .LVU253
 862 0032 0028     		cmp	r0, #0
 863 0034 F1D0     		beq	.L77
 864              	.L80:
 865              	.LBB53:
 866              	.LBI53:
 915:src/storage.c ****   FRESULT f;
 867              		.loc 1 915 5 is_stmt 1 view .LVU254
 868              	.LVL97:
 869              	.LBB54:
 931:src/storage.c ****     sys_disk_write_enable(0);
 870              		.loc 1 931 5 view .LVU255
 871 0036 064A     		ldr	r2, .L81
 872 0038 094B     		ldr	r3, .L81+16
 873 003a 5068     		ldr	r0, [r2, #4]
 874              	.LVL98:
 931:src/storage.c ****     sys_disk_write_enable(0);
 875              		.loc 1 931 5 is_stmt 0 view .LVU256
 876 003c 9847     		blx	r3
 877              	.LVL99:
 932:src/storage.c ****     DispMsg = "Can't open";
 878              		.loc 1 932 5 is_stmt 1 view .LVU257
 879 003e 094B     		ldr	r3, .L81+20
 880 0040 0020     		movs	r0, #0
 881 0042 9847     		blx	r3
 882              	.LVL100:
 933:src/storage.c ****     return 2; // file can't be opened
 883              		.loc 1 933 5 view .LVU258
 933:src/storage.c ****     return 2; // file can't be opened
 884              		.loc 1 933 13 is_stmt 0 view .LVU259
 885 0044 044B     		ldr	r3, .L81+8
 886 0046 084A     		ldr	r2, .L81+24
 887 0048 1A60     		str	r2, [r3]
 934:src/storage.c ****   }
 888              		.loc 1 934 5 is_stmt 1 view .LVU260
 889              	.LVL101:
 933:src/storage.c ****     return 2; // file can't be opened
 890              		.loc 1 933 13 is_stmt 0 view .LVU261
 891 004a 0220     		movs	r0, #2
 892              	.LBE54:
 893              	.LBE53:
 894              		.loc 1 939 1 view .LVU262
ARM GAS  /tmp/ccVDV1xv.s 			page 36


 895 004c 08BD     		pop	{r3, pc}
 896              	.L82:
 897 004e 00BF     		.align	2
 898              	.L81:
 899 0050 00200010 		.word	268443648
 900 0054 35040008 		.word	134218805
 901 0058 00000000 		.word	DispMsg
 902 005c 00000000 		.word	.LC3
 903 0060 39040008 		.word	134218809
 904 0064 E1030008 		.word	134218721
 905 0068 0C000000 		.word	.LC4
 906              		.cfi_endproc
 907              	.LFE38:
 909              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
 910              		.align	2
 911              	.LC5:
 912 0000 63616C6C 		.ascii	"calloc failed\000"
 912      6F632066 
 912      61696C65 
 912      6400
 913              		.section	.text.init_mem,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	init_mem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	init_mem:
 923              	.LFB3:
  69:src/storage.c ****   char *v;
 924              		.loc 1 69 18 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
  70:src/storage.c **** 
 928              		.loc 1 70 3 view .LVU264
  72:src/storage.c ****   if (v == NULL) {
 929              		.loc 1 72 3 view .LVU265
  69:src/storage.c ****   char *v;
 930              		.loc 1 69 18 is_stmt 0 view .LVU266
 931 0000 08B5     		push	{r3, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
  72:src/storage.c ****   if (v == NULL) {
 935              		.loc 1 72 16 view .LVU267
 936 0002 0121     		movs	r1, #1
 937 0004 4FF4C040 		mov	r0, #24576
 938 0008 FFF7FEFF 		bl	calloc
 939              	.LVL102:
  73:src/storage.c ****     perror("calloc failed");
 940              		.loc 1 73 3 is_stmt 1 view .LVU268
  73:src/storage.c ****     perror("calloc failed");
 941              		.loc 1 73 6 is_stmt 0 view .LVU269
 942 000c 50B1     		cbz	r0, .L86
  77:src/storage.c ****   v += RAM_SIZE;
ARM GAS  /tmp/ccVDV1xv.s 			page 37


 943              		.loc 1 77 3 is_stmt 1 view .LVU270
  77:src/storage.c ****   v += RAM_SIZE;
 944              		.loc 1 77 12 is_stmt 0 view .LVU271
 945 000e 0849     		ldr	r1, .L87
  79:src/storage.c ****   v += RAM_SIZE;
 946              		.loc 1 79 14 view .LVU272
 947 0010 084A     		ldr	r2, .L87+4
  81:src/storage.c **** }
 948              		.loc 1 81 15 view .LVU273
 949 0012 094B     		ldr	r3, .L87+8
  77:src/storage.c ****   v += RAM_SIZE;
 950              		.loc 1 77 12 view .LVU274
 951 0014 0860     		str	r0, [r1]
  78:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 952              		.loc 1 78 3 is_stmt 1 view .LVU275
 953              	.LVL103:
  79:src/storage.c ****   v += RAM_SIZE;
 954              		.loc 1 79 3 view .LVU276
  78:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 955              		.loc 1 78 5 is_stmt 0 view .LVU277
 956 0016 00F58051 		add	r1, r0, #4096
 957              	.LVL104:
  80:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 958              		.loc 1 80 5 view .LVU278
 959 001a 00F50050 		add	r0, r0, #8192
  79:src/storage.c ****   v += RAM_SIZE;
 960              		.loc 1 79 14 view .LVU279
 961 001e 1160     		str	r1, [r2]
  80:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 962              		.loc 1 80 3 is_stmt 1 view .LVU280
 963              	.LVL105:
  81:src/storage.c **** }
 964              		.loc 1 81 3 view .LVU281
  81:src/storage.c **** }
 965              		.loc 1 81 15 is_stmt 0 view .LVU282
 966 0020 1860     		str	r0, [r3]
  82:src/storage.c **** 
 967              		.loc 1 82 1 view .LVU283
 968 0022 08BD     		pop	{r3, pc}
 969              	.LVL106:
 970              	.L86:
  74:src/storage.c ****     return;
 971              		.loc 1 74 5 is_stmt 1 view .LVU284
  82:src/storage.c **** 
 972              		.loc 1 82 1 is_stmt 0 view .LVU285
 973 0024 BDE80840 		pop	{r3, lr}
 974              		.cfi_restore 14
 975              		.cfi_restore 3
 976              		.cfi_def_cfa_offset 0
  74:src/storage.c ****     return;
 977              		.loc 1 74 5 view .LVU286
 978 0028 0448     		ldr	r0, .L87+12
 979              	.LVL107:
  74:src/storage.c ****     return;
 980              		.loc 1 74 5 view .LVU287
 981 002a FFF7FEBF 		b	perror
 982              	.LVL108:
ARM GAS  /tmp/ccVDV1xv.s 			page 38


 983              	.L88:
 984 002e 00BF     		.align	2
 985              	.L87:
 986 0030 00000000 		.word	main_ram
 987 0034 00000000 		.word	backup_ram
 988 0038 00000000 		.word	library_ram
 989 003c 00000000 		.word	.LC5
 990              		.cfi_endproc
 991              	.LFE3:
 993              		.section	.text.crc16,"ax",%progbits
 994              		.align	1
 995              		.p2align 2,,3
 996              		.global	crc16
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	crc16:
 1003              	.LVL109:
 1004              	.LFB4:
 104:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 1005              		.loc 1 104 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1010              		.loc 1 105 2 view .LVU289
 106:src/storage.c **** 	unsigned int i;
 1011              		.loc 1 106 2 view .LVU290
 107:src/storage.c **** 
 1012              		.loc 1 107 2 view .LVU291
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1013              		.loc 1 109 2 view .LVU292
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1014              		.loc 1 109 15 view .LVU293
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1015              		.loc 1 109 2 is_stmt 0 view .LVU294
 1016 0000 B1B1     		cbz	r1, .L92
 1017 0002 0144     		add	r1, r1, r0
 1018              	.LVL110:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1019              		.loc 1 105 21 view .LVU295
 1020 0004 45F6A523 		movw	r3, #23205
 1021              	.LVL111:
 1022              	.L91:
 110:src/storage.c **** 		crc ^= *d++;
 1023              		.loc 1 110 3 is_stmt 1 discriminator 3 view .LVU296
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1024              		.loc 1 111 10 is_stmt 0 discriminator 3 view .LVU297
 1025 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1026              	.LVL112:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1027              		.loc 1 111 10 discriminator 3 view .LVU298
 1028 000c 5BBA     		rev16	r3, r3
 1029              	.LVL113:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
ARM GAS  /tmp/ccVDV1xv.s 			page 39


 1030              		.loc 1 111 10 discriminator 3 view .LVU299
 1031 000e 9BB2     		uxth	r3, r3
 1032              	.LVL114:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1033              		.loc 1 111 3 is_stmt 1 discriminator 3 view .LVU300
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1034              		.loc 1 111 7 is_stmt 0 discriminator 3 view .LVU301
 1035 0010 5340     		eors	r3, r3, r2
 1036              	.LVL115:
 112:src/storage.c **** 		crc ^= crc << 12;
 1037              		.loc 1 112 3 is_stmt 1 discriminator 3 view .LVU302
 112:src/storage.c **** 		crc ^= crc << 12;
 1038              		.loc 1 112 7 is_stmt 0 discriminator 3 view .LVU303
 1039 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1040 0016 5340     		eors	r3, r3, r2
 1041              	.LVL116:
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1042              		.loc 1 113 3 is_stmt 1 discriminator 3 view .LVU304
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1043              		.loc 1 113 7 is_stmt 0 discriminator 3 view .LVU305
 1044 0018 83EA0332 		eor	r2, r3, r3, lsl #12
 1045              	.LVL117:
 114:src/storage.c **** 	}
 1046              		.loc 1 114 3 is_stmt 1 discriminator 3 view .LVU306
 114:src/storage.c **** 	}
 1047              		.loc 1 114 25 is_stmt 0 discriminator 3 view .LVU307
 1048 001c 5301     		lsls	r3, r2, #5
 1049 001e 03F4FF53 		and	r3, r3, #8160
 114:src/storage.c **** 	}
 1050              		.loc 1 114 7 discriminator 3 view .LVU308
 1051 0022 92B2     		uxth	r2, r2
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1052              		.loc 1 109 2 discriminator 3 view .LVU309
 1053 0024 8142     		cmp	r1, r0
 114:src/storage.c **** 	}
 1054              		.loc 1 114 7 discriminator 3 view .LVU310
 1055 0026 83EA0203 		eor	r3, r3, r2
 1056              	.LVL118:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1057              		.loc 1 109 27 is_stmt 1 discriminator 3 view .LVU311
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1058              		.loc 1 109 15 discriminator 3 view .LVU312
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1059              		.loc 1 109 2 is_stmt 0 discriminator 3 view .LVU313
 1060 002a EDD1     		bne	.L91
 116:src/storage.c **** }
 1061              		.loc 1 116 2 is_stmt 1 view .LVU314
 117:src/storage.c **** 
 1062              		.loc 1 117 1 is_stmt 0 view .LVU315
 1063 002c 1846     		mov	r0, r3
 1064              	.LVL119:
 117:src/storage.c **** 
 1065              		.loc 1 117 1 view .LVU316
 1066 002e 7047     		bx	lr
 1067              	.LVL120:
 1068              	.L92:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
ARM GAS  /tmp/ccVDV1xv.s 			page 40


 1069              		.loc 1 105 21 view .LVU317
 1070 0030 45F6A523 		movw	r3, #23205
 116:src/storage.c **** }
 1071              		.loc 1 116 2 is_stmt 1 view .LVU318
 117:src/storage.c **** 
 1072              		.loc 1 117 1 is_stmt 0 view .LVU319
 1073 0034 1846     		mov	r0, r3
 1074              	.LVL121:
 117:src/storage.c **** 
 1075              		.loc 1 117 1 view .LVU320
 1076 0036 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE4:
 1080              		.section	.text.checksum_program,"ax",%progbits
 1081              		.align	1
 1082              		.p2align 2,,3
 1083              		.global	checksum_program
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	checksum_program:
 1090              	.LFB6:
 138:src/storage.c **** 	update_program_bounds( 1 );
 1091              		.loc 1 138 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1095              		.loc 1 139 2 view .LVU322
 138:src/storage.c **** 	update_program_bounds( 1 );
 1096              		.loc 1 138 1 is_stmt 0 view .LVU323
 1097 0000 08B5     		push	{r3, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 139:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1101              		.loc 1 139 2 view .LVU324
 1102 0002 0120     		movs	r0, #1
 1103 0004 FFF7FEFF 		bl	update_program_bounds
 1104              	.LVL122:
 140:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1105              		.loc 1 140 2 is_stmt 1 view .LVU325
 140:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1106              		.loc 1 140 16 is_stmt 0 view .LVU326
 1107 0008 FFF7FEFF 		bl	get_current_prog
 1108              	.LVL123:
 140:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1109              		.loc 1 140 36 view .LVU327
 1110 000c 124B     		ldr	r3, .L100
 1111 000e 1B68     		ldr	r3, [r3]
 1112 0010 B3F8EE1F 		ldrh	r1, [r3, #4078]
 140:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1113              		.loc 1 140 46 view .LVU328
 1114 0014 B3F8EC3F 		ldrh	r3, [r3, #4076]
 140:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1115              		.loc 1 140 44 view .LVU329
ARM GAS  /tmp/ccVDV1xv.s 			page 41


 1116 0018 C91A     		subs	r1, r1, r3
 1117              	.LVL124:
 1118              	.LBB55:
 1119              	.LBI55:
 103:src/storage.c **** {
 1120              		.loc 1 103 20 is_stmt 1 view .LVU330
 1121              	.LBB56:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1122              		.loc 1 105 2 view .LVU331
 106:src/storage.c **** 	unsigned int i;
 1123              		.loc 1 106 2 view .LVU332
 107:src/storage.c **** 
 1124              		.loc 1 107 2 view .LVU333
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1125              		.loc 1 109 2 view .LVU334
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1126              		.loc 1 109 15 view .LVU335
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1127              		.loc 1 109 2 is_stmt 0 view .LVU336
 1128 001a 4B1C     		adds	r3, r1, #1
 1129              	.LVL125:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1130              		.loc 1 109 2 view .LVU337
 1131 001c 17D0     		beq	.L97
 1132 001e 0131     		adds	r1, r1, #1
 1133 0020 0144     		add	r1, r1, r0
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1134              		.loc 1 105 21 view .LVU338
 1135 0022 45F6A523 		movw	r3, #23205
 1136              	.LVL126:
 1137              	.L96:
 110:src/storage.c **** 		crc ^= *d++;
 1138              		.loc 1 110 3 is_stmt 1 view .LVU339
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 111 10 is_stmt 0 view .LVU340
 1140 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1141              	.LVL127:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1142              		.loc 1 111 10 view .LVU341
 1143 002a 5BBA     		rev16	r3, r3
 1144              	.LVL128:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1145              		.loc 1 111 10 view .LVU342
 1146 002c 9BB2     		uxth	r3, r3
 1147              	.LVL129:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1148              		.loc 1 111 3 is_stmt 1 view .LVU343
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1149              		.loc 1 111 7 is_stmt 0 view .LVU344
 1150 002e 5340     		eors	r3, r3, r2
 1151              	.LVL130:
 112:src/storage.c **** 		crc ^= crc << 12;
 1152              		.loc 1 112 3 is_stmt 1 view .LVU345
 112:src/storage.c **** 		crc ^= crc << 12;
 1153              		.loc 1 112 7 is_stmt 0 view .LVU346
 1154 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1155 0034 5340     		eors	r3, r3, r2
ARM GAS  /tmp/ccVDV1xv.s 			page 42


 1156              	.LVL131:
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1157              		.loc 1 113 3 is_stmt 1 view .LVU347
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1158              		.loc 1 113 7 is_stmt 0 view .LVU348
 1159 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1160              	.LVL132:
 114:src/storage.c **** 	}
 1161              		.loc 1 114 3 is_stmt 1 view .LVU349
 114:src/storage.c **** 	}
 1162              		.loc 1 114 25 is_stmt 0 view .LVU350
 1163 003a 5A01     		lsls	r2, r3, #5
 1164 003c 02F4FF52 		and	r2, r2, #8160
 114:src/storage.c **** 	}
 1165              		.loc 1 114 7 view .LVU351
 1166 0040 9BB2     		uxth	r3, r3
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1167              		.loc 1 109 2 view .LVU352
 1168 0042 8142     		cmp	r1, r0
 114:src/storage.c **** 	}
 1169              		.loc 1 114 7 view .LVU353
 1170 0044 83EA0203 		eor	r3, r3, r2
 1171              	.LVL133:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1172              		.loc 1 109 27 is_stmt 1 view .LVU354
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1173              		.loc 1 109 15 view .LVU355
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1174              		.loc 1 109 2 is_stmt 0 view .LVU356
 1175 0048 EDD1     		bne	.L96
 116:src/storage.c **** }
 1176              		.loc 1 116 2 is_stmt 1 view .LVU357
 1177              	.LVL134:
 116:src/storage.c **** }
 1178              		.loc 1 116 2 is_stmt 0 view .LVU358
 1179              	.LBE56:
 1180              	.LBE55:
 142:src/storage.c **** 
 1181              		.loc 1 142 1 view .LVU359
 1182 004a 1846     		mov	r0, r3
 1183 004c 08BD     		pop	{r3, pc}
 1184              	.LVL135:
 1185              	.L97:
 1186              	.LBB58:
 1187              	.LBB57:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1188              		.loc 1 105 21 view .LVU360
 1189 004e 45F6A523 		movw	r3, #23205
 1190              	.LVL136:
 116:src/storage.c **** }
 1191              		.loc 1 116 2 is_stmt 1 view .LVU361
 116:src/storage.c **** }
 1192              		.loc 1 116 2 is_stmt 0 view .LVU362
 1193              	.LBE57:
 1194              	.LBE58:
 142:src/storage.c **** 
 1195              		.loc 1 142 1 view .LVU363
ARM GAS  /tmp/ccVDV1xv.s 			page 43


 1196 0052 1846     		mov	r0, r3
 1197 0054 08BD     		pop	{r3, pc}
 1198              	.L101:
 1199 0056 00BF     		.align	2
 1200              	.L100:
 1201 0058 00000000 		.word	main_ram
 1202              		.cfi_endproc
 1203              	.LFE6:
 1205              		.section	.text.checksum_ram,"ax",%progbits
 1206              		.align	1
 1207              		.p2align 2,,3
 1208              		.global	checksum_ram
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	checksum_ram:
 1215              	.LFB7:
 149:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1216              		.loc 1 149 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 150:src/storage.c **** 			      Crc, &Crc );
 1221              		.loc 1 150 2 view .LVU365
 150:src/storage.c **** 			      Crc, &Crc );
 1222              		.loc 1 150 9 is_stmt 0 view .LVU366
 1223 0000 044B     		ldr	r3, .L103
 1224 0002 1868     		ldr	r0, [r3]
 1225 0004 40F6FE71 		movw	r1, #4094
 1226 0008 B0F8FE2F 		ldrh	r2, [r0, #4094]
 1227 000c 4318     		adds	r3, r0, r1
 1228 000e FFF7FEBF 		b	test_checksum
 1229              	.LVL137:
 1230              	.L104:
 1231 0012 00BF     		.align	2
 1232              	.L103:
 1233 0014 00000000 		.word	main_ram
 1234              		.cfi_endproc
 1235              	.LFE7:
 1237              		.section	.text.checksum_backup,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	checksum_backup
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	checksum_backup:
 1247              	.LFB8:
 159:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1248              		.loc 1 159 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
ARM GAS  /tmp/ccVDV1xv.s 			page 44


 160:src/storage.c **** 		              BackupFlash._crc, NULL );
 1253              		.loc 1 160 2 view .LVU368
 160:src/storage.c **** 		              BackupFlash._crc, NULL );
 1254              		.loc 1 160 9 is_stmt 0 view .LVU369
 1255 0000 144B     		ldr	r3, .L111
 1256 0002 1968     		ldr	r1, [r3]
 1257 0004 B1F8FE0F 		ldrh	r0, [r1, #4094]
 1258              	.LVL138:
 1259              	.LBB59:
 1260              	.LBI59:
 123:src/storage.c **** {
 1261              		.loc 1 123 12 is_stmt 1 view .LVU370
 1262              	.LBB60:
 125:src/storage.c **** 	crc = crc16( data, length );
 1263              		.loc 1 125 2 view .LVU371
 126:src/storage.c **** 	
 1264              		.loc 1 126 2 view .LVU372
 1265              	.LBB61:
 1266              	.LBI61:
 103:src/storage.c **** {
 1267              		.loc 1 103 20 view .LVU373
 1268              	.LBB62:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1269              		.loc 1 105 2 view .LVU374
 106:src/storage.c **** 	unsigned int i;
 1270              		.loc 1 106 2 view .LVU375
 107:src/storage.c **** 
 1271              		.loc 1 107 2 view .LVU376
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1272              		.loc 1 109 2 view .LVU377
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1273              		.loc 1 109 15 view .LVU378
 1274              	.LBE62:
 1275              	.LBE61:
 1276              	.LBE60:
 1277              	.LBE59:
 159:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1278              		.loc 1 159 1 is_stmt 0 view .LVU379
 1279 0008 10B4     		push	{r4}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 4, -4
 1282              	.LBB67:
 1283              	.LBB65:
 1284              	.LBB64:
 1285              	.LBB63:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1286              		.loc 1 105 21 view .LVU380
 1287 000a 45F6A523 		movw	r3, #23205
 1288 000e 01F6FE74 		addw	r4, r1, #4094
 1289              	.LVL139:
 1290              	.L106:
 110:src/storage.c **** 		crc ^= *d++;
 1291              		.loc 1 110 3 is_stmt 1 view .LVU381
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1292              		.loc 1 111 10 is_stmt 0 view .LVU382
 1293 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1294              	.LVL140:
ARM GAS  /tmp/ccVDV1xv.s 			page 45


 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1295              		.loc 1 111 10 view .LVU383
 1296 0016 5BBA     		rev16	r3, r3
 1297              	.LVL141:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1298              		.loc 1 111 10 view .LVU384
 1299 0018 9BB2     		uxth	r3, r3
 1300              	.LVL142:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1301              		.loc 1 111 3 is_stmt 1 view .LVU385
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1302              		.loc 1 111 7 is_stmt 0 view .LVU386
 1303 001a 5340     		eors	r3, r3, r2
 1304              	.LVL143:
 112:src/storage.c **** 		crc ^= crc << 12;
 1305              		.loc 1 112 3 is_stmt 1 view .LVU387
 112:src/storage.c **** 		crc ^= crc << 12;
 1306              		.loc 1 112 7 is_stmt 0 view .LVU388
 1307 001c C3F30312 		ubfx	r2, r3, #4, #4
 1308 0020 5340     		eors	r3, r3, r2
 1309              	.LVL144:
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1310              		.loc 1 113 3 is_stmt 1 view .LVU389
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1311              		.loc 1 113 7 is_stmt 0 view .LVU390
 1312 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1313              	.LVL145:
 114:src/storage.c **** 	}
 1314              		.loc 1 114 3 is_stmt 1 view .LVU391
 114:src/storage.c **** 	}
 1315              		.loc 1 114 25 is_stmt 0 view .LVU392
 1316 0026 5A01     		lsls	r2, r3, #5
 1317 0028 02F4FF52 		and	r2, r2, #8160
 114:src/storage.c **** 	}
 1318              		.loc 1 114 7 view .LVU393
 1319 002c 9BB2     		uxth	r3, r3
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1320              		.loc 1 109 2 view .LVU394
 1321 002e 8C42     		cmp	r4, r1
 114:src/storage.c **** 	}
 1322              		.loc 1 114 7 view .LVU395
 1323 0030 83EA0203 		eor	r3, r3, r2
 1324              	.LVL146:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1325              		.loc 1 109 27 is_stmt 1 view .LVU396
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1326              		.loc 1 109 15 view .LVU397
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1327              		.loc 1 109 2 is_stmt 0 view .LVU398
 1328 0034 EDD1     		bne	.L106
 116:src/storage.c **** }
 1329              		.loc 1 116 2 is_stmt 1 view .LVU399
 1330              	.LVL147:
 116:src/storage.c **** }
 1331              		.loc 1 116 2 is_stmt 0 view .LVU400
 1332              	.LBE63:
 1333              	.LBE64:
ARM GAS  /tmp/ccVDV1xv.s 			page 46


 128:src/storage.c **** 		*pcrc = crc;
 1334              		.loc 1 128 2 is_stmt 1 view .LVU401
 131:src/storage.c **** }
 1335              		.loc 1 131 2 view .LVU402
 131:src/storage.c **** }
 1336              		.loc 1 131 23 is_stmt 0 view .LVU403
 1337 0036 9842     		cmp	r0, r3
 1338 0038 07D0     		beq	.L108
 1339 003a 4AF23C53 		movw	r3, #42300
 1340              	.LVL148:
 131:src/storage.c **** }
 1341              		.loc 1 131 23 view .LVU404
 1342 003e C01A     		subs	r0, r0, r3
 1343              	.LVL149:
 131:src/storage.c **** }
 1344              		.loc 1 131 23 view .LVU405
 1345 0040 18BF     		it	ne
 1346 0042 0120     		movne	r0, #1
 1347              	.LVL150:
 131:src/storage.c **** }
 1348              		.loc 1 131 23 view .LVU406
 1349              	.LBE65:
 1350              	.LBE67:
 162:src/storage.c **** 
 1351              		.loc 1 162 1 view .LVU407
 1352 0044 5DF8044B 		ldr	r4, [sp], #4
 1353              		.cfi_remember_state
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL151:
 162:src/storage.c **** 
 1357              		.loc 1 162 1 view .LVU408
 1358 0048 7047     		bx	lr
 1359              	.LVL152:
 1360              	.L108:
 1361              		.cfi_restore_state
 1362              	.LBB68:
 1363              	.LBB66:
 131:src/storage.c **** }
 1364              		.loc 1 131 23 view .LVU409
 1365 004a 0020     		movs	r0, #0
 1366              	.LVL153:
 131:src/storage.c **** }
 1367              		.loc 1 131 23 view .LVU410
 1368              	.LBE66:
 1369              	.LBE68:
 162:src/storage.c **** 
 1370              		.loc 1 162 1 view .LVU411
 1371 004c 5DF8044B 		ldr	r4, [sp], #4
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374 0050 7047     		bx	lr
 1375              	.L112:
 1376 0052 00BF     		.align	2
 1377              	.L111:
 1378 0054 00000000 		.word	backup_ram
 1379              		.cfi_endproc
ARM GAS  /tmp/ccVDV1xv.s 			page 47


 1380              	.LFE8:
 1382              		.section	.text.clpall,"ax",%progbits
 1383              		.align	1
 1384              		.p2align 2,,3
 1385              		.global	clpall
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	clpall:
 1392              	.LFB11:
 188:src/storage.c **** 	clrretstk_pc();
 1393              		.loc 1 188 1 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 189:src/storage.c **** 	stoend();
 1397              		.loc 1 189 2 view .LVU413
 188:src/storage.c **** 	clrretstk_pc();
 1398              		.loc 1 188 1 is_stmt 0 view .LVU414
 1399 0000 08B5     		push	{r3, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 3, -8
 1402              		.cfi_offset 14, -4
 189:src/storage.c **** 	stoend();
 1403              		.loc 1 189 2 view .LVU415
 1404 0002 FFF7FEFF 		bl	clrretstk_pc
 1405              	.LVL154:
 190:src/storage.c **** }
 1406              		.loc 1 190 2 is_stmt 1 view .LVU416
 1407              	.LBB69:
 1408              	.LBI69:
 178:src/storage.c **** {
 1409              		.loc 1 178 13 view .LVU417
 1410              	.LBB70:
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1411              		.loc 1 180 2 view .LVU418
 1412 0006 044B     		ldr	r3, .L115
 1413 0008 1B68     		ldr	r3, [r3]
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1414              		.loc 1 180 11 is_stmt 0 view .LVU419
 1415 000a 0121     		movs	r1, #1
 181:src/storage.c **** }
 1416              		.loc 1 181 12 view .LVU420
 1417 000c 4FF49D72 		mov	r2, #314
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1418              		.loc 1 180 11 view .LVU421
 1419 0010 5980     		strh	r1, [r3, #2]	@ movhi
 181:src/storage.c **** }
 1420              		.loc 1 181 2 is_stmt 1 view .LVU422
 181:src/storage.c **** }
 1421              		.loc 1 181 12 is_stmt 0 view .LVU423
 1422 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1423              	.LBE70:
 1424              	.LBE69:
 191:src/storage.c **** 
 1425              		.loc 1 191 1 view .LVU424
ARM GAS  /tmp/ccVDV1xv.s 			page 48


 1426 0014 08BD     		pop	{r3, pc}
 1427              	.L116:
 1428 0016 00BF     		.align	2
 1429              	.L115:
 1430 0018 00000000 		.word	main_ram
 1431              		.cfi_endproc
 1432              	.LFE11:
 1434              		.section	.text.clrall,"ax",%progbits
 1435              		.align	1
 1436              		.p2align 2,,3
 1437              		.global	clrall
 1438              		.syntax unified
 1439              		.thumb
 1440              		.thumb_func
 1441              		.fpu fpv4-sp-d16
 1443              	clrall:
 1444              	.LFB14:
 238:src/storage.c **** 	NumRegs = TOPREALREG;
 1445              		.loc 1 238 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 239:src/storage.c **** 	xeq_init_contexts();
 1449              		.loc 1 239 2 view .LVU426
 238:src/storage.c **** 	NumRegs = TOPREALREG;
 1450              		.loc 1 238 1 is_stmt 0 view .LVU427
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 239:src/storage.c **** 	xeq_init_contexts();
 1455              		.loc 1 239 10 view .LVU428
 1456 0002 124C     		ldr	r4, .L119
 1457 0004 2368     		ldr	r3, [r4]
 1458 0006 6422     		movs	r2, #100
 1459 0008 83F8CF2F 		strb	r2, [r3, #4047]
 240:src/storage.c **** 	clrreg( OP_CLREG );
 1460              		.loc 1 240 2 is_stmt 1 view .LVU429
 1461 000c FFF7FEFF 		bl	xeq_init_contexts
 1462              	.LVL155:
 241:src/storage.c **** 	clrstk( OP_CLSTK );
 1463              		.loc 1 241 2 view .LVU430
 1464 0010 3E20     		movs	r0, #62
 1465 0012 FFF7FEFF 		bl	clrreg
 1466              	.LVL156:
 242:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1467              		.loc 1 242 2 view .LVU431
 1468 0016 4020     		movs	r0, #64
 1469 0018 FFF7FEFF 		bl	clrstk
 1470              	.LVL157:
 243:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1471              		.loc 1 243 2 view .LVU432
 1472 001c 7420     		movs	r0, #116
 1473 001e FFF7FEFF 		bl	clralpha
 1474              	.LVL158:
 244:src/storage.c **** 	clpall();
 1475              		.loc 1 244 2 view .LVU433
ARM GAS  /tmp/ccVDV1xv.s 			page 49


 1476 0022 4520     		movs	r0, #69
 1477 0024 FFF7FEFF 		bl	clrflags
 1478              	.LVL159:
 245:src/storage.c **** 
 1479              		.loc 1 245 2 view .LVU434
 1480              	.LBB71:
 1481              	.LBI71:
 187:src/storage.c **** {
 1482              		.loc 1 187 6 view .LVU435
 1483              	.LBB72:
 189:src/storage.c **** 	stoend();
 1484              		.loc 1 189 2 view .LVU436
 1485 0028 FFF7FEFF 		bl	clrretstk_pc
 1486              	.LVL160:
 190:src/storage.c **** }
 1487              		.loc 1 190 2 view .LVU437
 1488              	.LBB73:
 1489              	.LBI73:
 178:src/storage.c **** {
 1490              		.loc 1 178 13 view .LVU438
 1491              	.LBB74:
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1492              		.loc 1 180 2 view .LVU439
 1493 002c 2368     		ldr	r3, [r4]
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1494              		.loc 1 180 11 is_stmt 0 view .LVU440
 1495 002e 0121     		movs	r1, #1
 181:src/storage.c **** }
 1496              		.loc 1 181 12 view .LVU441
 1497 0030 4FF49D72 		mov	r2, #314
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1498              		.loc 1 180 11 view .LVU442
 1499 0034 5980     		strh	r1, [r3, #2]	@ movhi
 181:src/storage.c **** }
 1500              		.loc 1 181 2 is_stmt 1 view .LVU443
 181:src/storage.c **** }
 1501              		.loc 1 181 12 is_stmt 0 view .LVU444
 1502 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.LBE74:
 1504              	.LBE73:
 1505              	.LBE72:
 1506              	.LBE71:
 247:src/storage.c **** 	State2.test = TST_NONE;
 1507              		.loc 1 247 2 is_stmt 1 view .LVU445
 1508 0038 FFF7FEFF 		bl	reset_shift
 1509              	.LVL161:
 248:src/storage.c **** 
 1510              		.loc 1 248 2 view .LVU446
 248:src/storage.c **** 
 1511              		.loc 1 248 14 is_stmt 0 view .LVU447
 1512 003c 0449     		ldr	r1, .L119+4
 250:src/storage.c **** }
 1513              		.loc 1 250 10 view .LVU448
 1514 003e 054B     		ldr	r3, .L119+8
 248:src/storage.c **** 
 1515              		.loc 1 248 14 view .LVU449
 1516 0040 0720     		movs	r0, #7
ARM GAS  /tmp/ccVDV1xv.s 			page 50


 250:src/storage.c **** }
 1517              		.loc 1 250 10 view .LVU450
 1518 0042 0022     		movs	r2, #0
 248:src/storage.c **** 
 1519              		.loc 1 248 14 view .LVU451
 1520 0044 C873     		strb	r0, [r1, #15]
 250:src/storage.c **** }
 1521              		.loc 1 250 2 is_stmt 1 view .LVU452
 250:src/storage.c **** }
 1522              		.loc 1 250 10 is_stmt 0 view .LVU453
 1523 0046 1A60     		str	r2, [r3]
 251:src/storage.c **** 
 1524              		.loc 1 251 1 view .LVU454
 1525 0048 10BD     		pop	{r4, pc}
 1526              	.L120:
 1527 004a 00BF     		.align	2
 1528              	.L119:
 1529 004c 00000000 		.word	main_ram
 1530 0050 00000000 		.word	StateWhileOn
 1531 0054 00000000 		.word	DispMsg
 1532              		.cfi_endproc
 1533              	.LFE14:
 1535              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1536              		.align	2
 1537              	.LC6:
 1538 0000 45726173 		.ascii	"Erased\000"
 1538      656400
 1539              		.section	.text.reset,"ax",%progbits
 1540              		.align	1
 1541              		.p2align 2,,3
 1542              		.global	reset
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	reset:
 1549              	.LFB15:
 258:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1550              		.loc 1 258 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 259:src/storage.c **** 	clrall();
 1554              		.loc 1 259 3 view .LVU456
 258:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1555              		.loc 1 258 1 is_stmt 0 view .LVU457
 1556 0000 08B5     		push	{r3, lr}
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 3, -8
 1559              		.cfi_offset 14, -4
 259:src/storage.c **** 	clrall();
 1560              		.loc 1 259 3 view .LVU458
 1561 0002 094B     		ldr	r3, .L123
 1562 0004 4FF48052 		mov	r2, #4096
 1563 0008 1868     		ldr	r0, [r3]
 1564 000a 0021     		movs	r1, #0
 1565 000c FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccVDV1xv.s 			page 51


 1566              	.LVL162:
 260:src/storage.c **** 	init_state();
 1567              		.loc 1 260 2 is_stmt 1 view .LVU459
 1568 0010 FFF7FEFF 		bl	clrall
 1569              	.LVL163:
 261:src/storage.c **** #ifdef INFRARED
 1570              		.loc 1 261 2 view .LVU460
 1571 0014 FFF7FEFF 		bl	init_state
 1572              	.LVL164:
 263:src/storage.c **** #endif
 1573              		.loc 1 263 2 view .LVU461
 1574 0018 044B     		ldr	r3, .L123+4
 1575 001a 4FF4E160 		mov	r0, #1800
 1576 001e 9847     		blx	r3
 1577              	.LVL165:
 265:src/storage.c **** }
 1578              		.loc 1 265 2 view .LVU462
 265:src/storage.c **** }
 1579              		.loc 1 265 10 is_stmt 0 view .LVU463
 1580 0020 034B     		ldr	r3, .L123+8
 1581 0022 044A     		ldr	r2, .L123+12
 1582 0024 1A60     		str	r2, [r3]
 266:src/storage.c **** 
 1583              		.loc 1 266 1 view .LVU464
 1584 0026 08BD     		pop	{r3, pc}
 1585              	.L124:
 1586              		.align	2
 1587              	.L123:
 1588 0028 00000000 		.word	main_ram
 1589 002c 35030008 		.word	134218549
 1590 0030 00000000 		.word	DispMsg
 1591 0034 00000000 		.word	.LC6
 1592              		.cfi_endproc
 1593              	.LFE15:
 1595              		.section	.text.stoprog,"ax",%progbits
 1596              		.align	1
 1597              		.p2align 2,,3
 1598              		.global	stoprog
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv4-sp-d16
 1604              	stoprog:
 1605              	.LVL166:
 1606              	.LFB16:
 271:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1607              		.loc 1 271 26 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 272:src/storage.c **** 	int i;
 1611              		.loc 1 272 2 view .LVU466
 271:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1612              		.loc 1 271 26 is_stmt 0 view .LVU467
 1613 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1614              		.cfi_def_cfa_offset 32
 1615              		.cfi_offset 3, -32
ARM GAS  /tmp/ccVDV1xv.s 			page 52


 1616              		.cfi_offset 4, -28
 1617              		.cfi_offset 5, -24
 1618              		.cfi_offset 6, -20
 1619              		.cfi_offset 7, -16
 1620              		.cfi_offset 8, -12
 1621              		.cfi_offset 9, -8
 1622              		.cfi_offset 14, -4
 274:src/storage.c **** 
 1623              		.loc 1 274 20 view .LVU468
 1624 0004 374F     		ldr	r7, .L145
 272:src/storage.c **** 	int i;
 1625              		.loc 1 272 18 view .LVU469
 1626 0006 00F47046 		and	r6, r0, #61440
 274:src/storage.c **** 
 1627              		.loc 1 274 20 view .LVU470
 1628 000a 3B68     		ldr	r3, [r7]
 272:src/storage.c **** 	int i;
 1629              		.loc 1 272 33 view .LVU471
 1630 000c B6F5704F 		cmp	r6, #61440
 274:src/storage.c **** 
 1631              		.loc 1 274 20 view .LVU472
 1632 0010 B3F8E05F 		ldrh	r5, [r3, #4064]
 1633              	.LVL167:
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1634              		.loc 1 276 2 is_stmt 1 view .LVU473
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1635              		.loc 1 276 5 is_stmt 0 view .LVU474
 1636 0014 5B88     		ldrh	r3, [r3, #2]
 271:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1637              		.loc 1 271 26 view .LVU475
 1638 0016 0446     		mov	r4, r0
 272:src/storage.c **** 	int i;
 1639              		.loc 1 272 33 view .LVU476
 1640 0018 57D0     		beq	.L126
 1641              	.LVL168:
 273:src/storage.c **** 	unsigned int pc = state_pc();
 1642              		.loc 1 273 2 is_stmt 1 discriminator 4 view .LVU477
 274:src/storage.c **** 
 1643              		.loc 1 274 2 discriminator 4 view .LVU478
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1644              		.loc 1 276 5 is_stmt 0 discriminator 4 view .LVU479
 1645 001a AB42     		cmp	r3, r5
 272:src/storage.c **** 	int i;
 1646              		.loc 1 272 33 discriminator 4 view .LVU480
 1647 001c 4FF00108 		mov	r8, #1
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1648              		.loc 1 276 5 discriminator 4 view .LVU481
 1649 0020 44D0     		beq	.L141
 1650              	.LVL169:
 1651              	.L127:
 279:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1652              		.loc 1 279 2 is_stmt 1 view .LVU482
 279:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1653              		.loc 1 279 5 is_stmt 0 view .LVU483
 1654 0022 15F47049 		ands	r9, r5, #61440
 1655 0026 4BD1     		bne	.L142
 1656              	.LVL170:
ARM GAS  /tmp/ccVDV1xv.s 			page 53


 1657              	.L128:
 283:src/storage.c **** 	xeq_init_contexts();
 1658              		.loc 1 283 2 is_stmt 1 view .LVU484
 1659 0028 FFF7FEFF 		bl	clrretstk
 1660              	.LVL171:
 284:src/storage.c **** 	if ( ProgFree < off ) {
 1661              		.loc 1 284 2 view .LVU485
 1662 002c FFF7FEFF 		bl	xeq_init_contexts
 1663              	.LVL172:
 285:src/storage.c **** 		return;
 1664              		.loc 1 285 2 view .LVU486
 285:src/storage.c **** 		return;
 1665              		.loc 1 285 16 is_stmt 0 view .LVU487
 1666 0030 2D4B     		ldr	r3, .L145+4
 285:src/storage.c **** 		return;
 1667              		.loc 1 285 5 view .LVU488
 1668 0032 1B68     		ldr	r3, [r3]
 1669 0034 4345     		cmp	r3, r8
 1670 0036 01DA     		bge	.L143
 298:src/storage.c **** 
 1671              		.loc 1 298 1 view .LVU489
 1672 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1673              	.LVL173:
 1674              	.L143:
 288:src/storage.c **** 	ProgEnd += off;
 1675              		.loc 1 288 2 is_stmt 1 view .LVU490
 288:src/storage.c **** 	ProgEnd += off;
 1676              		.loc 1 288 11 is_stmt 0 view .LVU491
 1677 003c 3B68     		ldr	r3, [r7]
 1678 003e B3F802C0 		ldrh	ip, [r3, #2]
 289:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1679              		.loc 1 289 10 view .LVU492
 1680 0042 B3F8EE2F 		ldrh	r2, [r3, #4078]
 288:src/storage.c **** 	ProgEnd += off;
 1681              		.loc 1 288 11 view .LVU493
 1682 0046 C444     		add	ip, ip, r8
 289:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1683              		.loc 1 289 10 view .LVU494
 1684 0048 4244     		add	r2, r2, r8
 288:src/storage.c **** 	ProgEnd += off;
 1685              		.loc 1 288 11 view .LVU495
 1686 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 289:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1687              		.loc 1 289 2 is_stmt 1 view .LVU496
 289:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1688              		.loc 1 289 10 is_stmt 0 view .LVU497
 1689 004e A3F8EE2F 		strh	r2, [r3, #4078]	@ movhi
 290:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1690              		.loc 1 290 2 is_stmt 1 view .LVU498
 290:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1691              		.loc 1 290 7 is_stmt 0 view .LVU499
 1692 0052 4946     		mov	r1, r9
 1693 0054 2846     		mov	r0, r5
 1694 0056 FFF7FEFF 		bl	do_inc
 1695              	.LVL174:
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1696              		.loc 1 291 12 view .LVU500
ARM GAS  /tmp/ccVDV1xv.s 			page 54


 1697 005a D7F800C0 		ldr	ip, [r7]
 1698 005e BCF80230 		ldrh	r3, [ip, #2]
 1699              	.LVL175:
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1700              		.loc 1 291 2 is_stmt 1 view .LVU501
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1701              		.loc 1 291 10 is_stmt 0 view .LVU502
 1702 0062 5A1C     		adds	r2, r3, #1
 1703              	.LVL176:
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1704              		.loc 1 291 26 is_stmt 1 view .LVU503
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1705              		.loc 1 291 2 is_stmt 0 view .LVU504
 1706 0064 8242     		cmp	r2, r0
 1707 0066 39DD     		ble	.L130
 1708 0068 03F10043 		add	r3, r3, #-2147483648
 1709 006c 0CF10407 		add	r7, ip, #4
 1710 0070 0133     		adds	r3, r3, #1
 1711 0072 A2EB0802 		sub	r2, r2, r8
 1712              	.LVL177:
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1713              		.loc 1 291 2 view .LVU505
 1714 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1715              	.LVL178:
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1716              		.loc 1 291 2 view .LVU506
 1717 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1718 007e 07EB4005 		add	r5, r7, r0, lsl #1
 1719              	.LVL179:
 1720              	.L131:
 292:src/storage.c **** 	}
 1721              		.loc 1 292 3 is_stmt 1 discriminator 3 view .LVU507
 292:src/storage.c **** 	}
 1722              		.loc 1 292 23 is_stmt 0 discriminator 3 view .LVU508
 1723 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 292:src/storage.c **** 	}
 1724              		.loc 1 292 15 discriminator 3 view .LVU509
 1725 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1726              		.loc 1 291 40 is_stmt 1 discriminator 3 view .LVU510
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1727              		.loc 1 291 26 discriminator 3 view .LVU511
 291:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1728              		.loc 1 291 2 is_stmt 0 discriminator 3 view .LVU512
 1729 008a AB42     		cmp	r3, r5
 1730 008c F9D1     		bne	.L131
 1731              	.L132:
 294:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1732              		.loc 1 294 2 is_stmt 1 view .LVU513
 294:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1733              		.loc 1 294 5 is_stmt 0 view .LVU514
 1734 008e B6F5704F 		cmp	r6, #61440
 295:src/storage.c **** 	Prog_1[pc] = c;
 1735              		.loc 1 295 3 is_stmt 1 view .LVU515
 296:src/storage.c **** 	State.pc = pc;
 1736              		.loc 1 296 2 view .LVU516
 295:src/storage.c **** 	Prog_1[pc] = c;
ARM GAS  /tmp/ccVDV1xv.s 			page 55


 1737              		.loc 1 295 22 is_stmt 0 view .LVU517
 1738 0092 04BF     		itt	eq
 1739 0094 230C     		lsreq	r3, r4, #16
 295:src/storage.c **** 	Prog_1[pc] = c;
 1740              		.loc 1 295 18 view .LVU518
 1741 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 296:src/storage.c **** 	State.pc = pc;
 1742              		.loc 1 296 8 view .LVU519
 1743 009a 00F10043 		add	r3, r0, #-2147483648
 1744 009e 013B     		subs	r3, r3, #1
 296:src/storage.c **** 	State.pc = pc;
 1745              		.loc 1 296 13 view .LVU520
 1746 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
 297:src/storage.c **** }
 1747              		.loc 1 297 2 is_stmt 1 view .LVU521
 297:src/storage.c **** }
 1748              		.loc 1 297 11 is_stmt 0 view .LVU522
 1749 00a4 ACF8E00F 		strh	r0, [ip, #4064]	@ movhi
 298:src/storage.c **** 
 1750              		.loc 1 298 1 view .LVU523
 1751 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1752              	.LVL180:
 1753              	.L141:
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1754              		.loc 1 276 22 discriminator 1 view .LVU524
 1755 00ac B0F59D7F 		cmp	r0, #314
 1756 00b0 B7D0     		beq	.L127
 277:src/storage.c **** 
 1757              		.loc 1 277 3 is_stmt 1 view .LVU525
 1758 00b2 4FF49D70 		mov	r0, #314
 1759              	.LVL181:
 277:src/storage.c **** 
 1760              		.loc 1 277 3 is_stmt 0 view .LVU526
 1761 00b6 FFF7FEFF 		bl	stoprog
 1762              	.LVL182:
 1763              	.L144:
 279:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1764              		.loc 1 279 2 is_stmt 1 view .LVU527
 279:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1765              		.loc 1 279 5 is_stmt 0 view .LVU528
 1766 00ba 15F47049 		ands	r9, r5, #61440
 1767 00be B3D0     		beq	.L128
 1768              	.L142:
 280:src/storage.c **** 		return;
 1769              		.loc 1 280 3 is_stmt 1 view .LVU529
 298:src/storage.c **** 
 1770              		.loc 1 298 1 is_stmt 0 view .LVU530
 1771 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1772              		.cfi_remember_state
 1773              		.cfi_restore 14
 1774              		.cfi_restore 9
 1775              		.cfi_restore 8
 1776              		.cfi_restore 7
 1777              		.cfi_restore 6
 1778              		.cfi_restore 5
 1779              		.cfi_restore 4
 1780              		.cfi_restore 3
ARM GAS  /tmp/ccVDV1xv.s 			page 56


 1781              		.cfi_def_cfa_offset 0
 1782              	.LVL183:
 280:src/storage.c **** 		return;
 1783              		.loc 1 280 3 view .LVU531
 1784 00c4 1320     		movs	r0, #19
 1785 00c6 FFF7FEBF 		b	report_warn
 1786              	.LVL184:
 1787              	.L126:
 1788              		.cfi_restore_state
 273:src/storage.c **** 	unsigned int pc = state_pc();
 1789              		.loc 1 273 2 is_stmt 1 view .LVU532
 274:src/storage.c **** 
 1790              		.loc 1 274 2 view .LVU533
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1791              		.loc 1 276 5 is_stmt 0 view .LVU534
 1792 00ca AB42     		cmp	r3, r5
 272:src/storage.c **** 	int i;
 1793              		.loc 1 272 33 view .LVU535
 1794 00cc 4FF00208 		mov	r8, #2
 276:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1795              		.loc 1 276 5 view .LVU536
 1796 00d0 A7D1     		bne	.L127
 277:src/storage.c **** 
 1797              		.loc 1 277 3 is_stmt 1 view .LVU537
 1798 00d2 4FF49D70 		mov	r0, #314
 1799              	.LVL185:
 277:src/storage.c **** 
 1800              		.loc 1 277 3 is_stmt 0 view .LVU538
 1801 00d6 FFF7FEFF 		bl	stoprog
 1802              	.LVL186:
 1803 00da EEE7     		b	.L144
 1804              	.LVL187:
 1805              	.L130:
 277:src/storage.c **** 
 1806              		.loc 1 277 3 view .LVU539
 1807 00dc 0CF10407 		add	r7, ip, #4
 1808 00e0 D5E7     		b	.L132
 1809              	.L146:
 1810 00e2 00BF     		.align	2
 1811              	.L145:
 1812 00e4 00000000 		.word	main_ram
 1813 00e8 00000000 		.word	ProgFree
 1814              		.cfi_endproc
 1815              	.LFE16:
 1817              		.section	.text.delprog,"ax",%progbits
 1818              		.align	1
 1819              		.p2align 2,,3
 1820              		.global	delprog
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1824              		.fpu fpv4-sp-d16
 1826              	delprog:
 1827              	.LFB17:
 305:src/storage.c **** 	int i;
 1828              		.loc 1 305 1 is_stmt 1 view -0
 1829              		.cfi_startproc
ARM GAS  /tmp/ccVDV1xv.s 			page 57


 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
 306:src/storage.c **** 	const unsigned int pc = state_pc();
 1832              		.loc 1 306 2 view .LVU541
 307:src/storage.c **** 	int off;
 1833              		.loc 1 307 2 view .LVU542
 305:src/storage.c **** 	int i;
 1834              		.loc 1 305 1 is_stmt 0 view .LVU543
 1835 0000 70B5     		push	{r4, r5, r6, lr}
 1836              		.cfi_def_cfa_offset 16
 1837              		.cfi_offset 4, -16
 1838              		.cfi_offset 5, -12
 1839              		.cfi_offset 6, -8
 1840              		.cfi_offset 14, -4
 307:src/storage.c **** 	int off;
 1841              		.loc 1 307 26 view .LVU544
 1842 0002 194D     		ldr	r5, .L159
 1843 0004 2B68     		ldr	r3, [r5]
 1844 0006 B3F8E04F 		ldrh	r4, [r3, #4064]
 1845              	.LVL188:
 308:src/storage.c **** 
 1846              		.loc 1 308 2 is_stmt 1 view .LVU545
 310:src/storage.c **** 		return;
 1847              		.loc 1 310 2 view .LVU546
 310:src/storage.c **** 		return;
 1848              		.loc 1 310 7 is_stmt 0 view .LVU547
 1849 000a 2046     		mov	r0, r4
 1850 000c FFF7FEFF 		bl	check_delete_prog
 1851              	.LVL189:
 310:src/storage.c **** 		return;
 1852              		.loc 1 310 5 view .LVU548
 1853 0010 48BB     		cbnz	r0, .L147
 312:src/storage.c **** 		return;
 1854              		.loc 1 312 2 is_stmt 1 view .LVU549
 312:src/storage.c **** 		return;
 1855              		.loc 1 312 5 is_stmt 0 view .LVU550
 1856 0012 44B3     		cbz	r4, .L147
 315:src/storage.c **** 	ProgSize -= off;
 1857              		.loc 1 315 2 is_stmt 1 view .LVU551
 315:src/storage.c **** 	ProgSize -= off;
 1858              		.loc 1 315 8 is_stmt 0 view .LVU552
 1859 0014 2D68     		ldr	r5, [r5]
 1860 0016 05EB4403 		add	r3, r5, r4, lsl #1
 316:src/storage.c **** 	ProgEnd -= off;
 1861              		.loc 1 316 11 view .LVU553
 1862 001a 6A88     		ldrh	r2, [r5, #2]
 315:src/storage.c **** 	ProgSize -= off;
 1863              		.loc 1 315 33 view .LVU554
 1864 001c 5B88     		ldrh	r3, [r3, #2]
 317:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1865              		.loc 1 317 10 view .LVU555
 1866 001e B5F8EE1F 		ldrh	r1, [r5, #4078]
 315:src/storage.c **** 	ProgSize -= off;
 1867              		.loc 1 315 33 view .LVU556
 1868 0022 03F47043 		and	r3, r3, #61440
 1869 0026 B3F5704F 		cmp	r3, #61440
 1870 002a 14BF     		ite	ne
ARM GAS  /tmp/ccVDV1xv.s 			page 58


 1871 002c 0126     		movne	r6, #1
 1872 002e 0226     		moveq	r6, #2
 316:src/storage.c **** 	ProgEnd -= off;
 1873              		.loc 1 316 11 view .LVU557
 1874 0030 921B     		subs	r2, r2, r6
 1875 0032 92B2     		uxth	r2, r2
 317:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1876              		.loc 1 317 10 view .LVU558
 1877 0034 891B     		subs	r1, r1, r6
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1878              		.loc 1 318 2 view .LVU559
 1879 0036 9442     		cmp	r4, r2
 315:src/storage.c **** 	ProgSize -= off;
 1880              		.loc 1 315 33 view .LVU560
 1881 0038 3346     		mov	r3, r6
 1882              	.LVL190:
 316:src/storage.c **** 	ProgEnd -= off;
 1883              		.loc 1 316 2 is_stmt 1 view .LVU561
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1884              		.loc 1 318 10 is_stmt 0 view .LVU562
 1885 003a 2046     		mov	r0, r4
 316:src/storage.c **** 	ProgEnd -= off;
 1886              		.loc 1 316 11 view .LVU563
 1887 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 317:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1888              		.loc 1 317 2 is_stmt 1 view .LVU564
 317:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1889              		.loc 1 317 10 is_stmt 0 view .LVU565
 1890 003e A5F8EE1F 		strh	r1, [r5, #4078]	@ movhi
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1891              		.loc 1 318 2 is_stmt 1 view .LVU566
 1892              	.LVL191:
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1893              		.loc 1 318 16 view .LVU567
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1894              		.loc 1 318 2 is_stmt 0 view .LVU568
 1895 0042 0CDC     		bgt	.L152
 1896 0044 2344     		add	r3, r3, r4
 1897              	.LVL192:
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1898              		.loc 1 318 2 view .LVU569
 1899 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1900 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1901              	.LVL193:
 1902              	.L151:
 319:src/storage.c **** 	decpc();
 1903              		.loc 1 319 3 is_stmt 1 discriminator 3 view .LVU570
 319:src/storage.c **** 	decpc();
 1904              		.loc 1 319 23 is_stmt 0 discriminator 3 view .LVU571
 1905 004e 33F8021F 		ldrh	r1, [r3, #2]!
 319:src/storage.c **** 	decpc();
 1906              		.loc 1 319 15 discriminator 3 view .LVU572
 1907 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1908              		.loc 1 318 37 is_stmt 1 discriminator 3 view .LVU573
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1909              		.loc 1 318 21 is_stmt 0 discriminator 3 view .LVU574
ARM GAS  /tmp/ccVDV1xv.s 			page 59


 1910 0056 6988     		ldrh	r1, [r5, #2]
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1911              		.loc 1 318 37 discriminator 3 view .LVU575
 1912 0058 0130     		adds	r0, r0, #1
 1913              	.LVL194:
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1914              		.loc 1 318 16 is_stmt 1 discriminator 3 view .LVU576
 318:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1915              		.loc 1 318 2 is_stmt 0 discriminator 3 view .LVU577
 1916 005a 8142     		cmp	r1, r0
 1917 005c F7DA     		bge	.L151
 1918              	.L152:
 320:src/storage.c **** }
 1919              		.loc 1 320 2 is_stmt 1 view .LVU578
 321:src/storage.c **** 
 1920              		.loc 1 321 1 is_stmt 0 view .LVU579
 1921 005e BDE87040 		pop	{r4, r5, r6, lr}
 1922              		.cfi_remember_state
 1923              		.cfi_restore 14
 1924              		.cfi_restore 6
 1925              		.cfi_restore 5
 1926              		.cfi_restore 4
 1927              		.cfi_def_cfa_offset 0
 1928              	.LVL195:
 320:src/storage.c **** }
 1929              		.loc 1 320 2 view .LVU580
 1930 0062 FFF7FEBF 		b	decpc
 1931              	.LVL196:
 1932              	.L147:
 1933              		.cfi_restore_state
 321:src/storage.c **** 
 1934              		.loc 1 321 1 view .LVU581
 1935 0066 70BD     		pop	{r4, r5, r6, pc}
 1936              	.LVL197:
 1937              	.L160:
 321:src/storage.c **** 
 1938              		.loc 1 321 1 view .LVU582
 1939              		.align	2
 1940              	.L159:
 1941 0068 00000000 		.word	main_ram
 1942              		.cfi_endproc
 1943              	.LFE17:
 1945              		.section	.text.append_program,"ax",%progbits
 1946              		.align	1
 1947              		.p2align 2,,3
 1948              		.global	append_program
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu fpv4-sp-d16
 1954              	append_program:
 1955              	.LVL198:
 1956              	.LFB18:
 329:src/storage.c **** 	unsigned short pc;
 1957              		.loc 1 329 1 is_stmt 1 view -0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccVDV1xv.s 			page 60


 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 330:src/storage.c **** 	int space_needed = length - ProgFree;
 1961              		.loc 1 330 2 view .LVU584
 331:src/storage.c **** 
 1962              		.loc 1 331 2 view .LVU585
 329:src/storage.c **** 	unsigned short pc;
 1963              		.loc 1 329 1 is_stmt 0 view .LVU586
 1964 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1965              		.cfi_def_cfa_offset 24
 1966              		.cfi_offset 4, -24
 1967              		.cfi_offset 5, -20
 1968              		.cfi_offset 6, -16
 1969              		.cfi_offset 7, -12
 1970              		.cfi_offset 8, -8
 1971              		.cfi_offset 14, -4
 333:src/storage.c **** 		/*
 1972              		.loc 1 333 7 view .LVU587
 1973 0004 DFF8C080 		ldr	r8, .L180+8
 331:src/storage.c **** 
 1974              		.loc 1 331 28 view .LVU588
 1975 0008 2D4B     		ldr	r3, .L180
 333:src/storage.c **** 		/*
 1976              		.loc 1 333 7 view .LVU589
 1977 000a D8F80070 		ldr	r7, [r8]
 331:src/storage.c **** 
 1978              		.loc 1 331 6 view .LVU590
 1979 000e 1D68     		ldr	r5, [r3]
 333:src/storage.c **** 		/*
 1980              		.loc 1 333 7 view .LVU591
 1981 0010 7B88     		ldrh	r3, [r7, #2]
 333:src/storage.c **** 		/*
 1982              		.loc 1 333 5 view .LVU592
 1983 0012 012B     		cmp	r3, #1
 329:src/storage.c **** 	unsigned short pc;
 1984              		.loc 1 329 1 view .LVU593
 1985 0014 0C46     		mov	r4, r1
 1986 0016 0646     		mov	r6, r0
 331:src/storage.c **** 
 1987              		.loc 1 331 6 view .LVU594
 1988 0018 A1EB0505 		sub	r5, r1, r5
 1989              	.LVL199:
 333:src/storage.c **** 		/*
 1990              		.loc 1 333 2 is_stmt 1 view .LVU595
 333:src/storage.c **** 		/*
 1991              		.loc 1 333 5 is_stmt 0 view .LVU596
 1992 001c 0BD0     		beq	.L177
 340:src/storage.c **** 		return report_err( ERR_INVALID );
 1993              		.loc 1 340 2 is_stmt 1 view .LVU597
 340:src/storage.c **** 		return report_err( ERR_INVALID );
 1994              		.loc 1 340 5 is_stmt 0 view .LVU598
 1995 001e B1F5F46F 		cmp	r1, #1952
 1996 0022 39DC     		bgt	.L164
 343:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1997              		.loc 1 343 2 is_stmt 1 view .LVU599
 343:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1998              		.loc 1 343 30 is_stmt 0 view .LVU600
 1999 0024 C3F5F463 		rsb	r3, r3, #1952
ARM GAS  /tmp/ccVDV1xv.s 			page 61


 343:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2000              		.loc 1 343 5 view .LVU601
 2001 0028 8B42     		cmp	r3, r1
 2002 002a 0BDA     		bge	.L163
 2003              	.LVL200:
 2004              	.L176:
 2005              	.LBB75:
 363:src/storage.c **** 		}
 2006              		.loc 1 363 4 is_stmt 1 view .LVU602
 2007              	.LBE75:
 375:src/storage.c **** 
 2008              		.loc 1 375 1 is_stmt 0 view .LVU603
 2009 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2010              		.cfi_remember_state
 2011              		.cfi_restore 14
 2012              		.cfi_restore 8
 2013              		.cfi_restore 7
 2014              		.cfi_restore 6
 2015              		.cfi_restore 5
 2016              		.cfi_restore 4
 2017              		.cfi_def_cfa_offset 0
 2018              	.LVL201:
 2019              	.LBB76:
 363:src/storage.c **** 		}
 2020              		.loc 1 363 11 view .LVU604
 2021 0030 0B20     		movs	r0, #11
 2022 0032 FFF7FEBF 		b	report_err
 2023              	.LVL202:
 2024              	.L177:
 2025              		.cfi_restore_state
 363:src/storage.c **** 		}
 2026              		.loc 1 363 11 view .LVU605
 2027              	.LBE76:
 337:src/storage.c **** 		--ProgSize;
 2028              		.loc 1 337 3 is_stmt 1 view .LVU606
 338:src/storage.c **** 	}
 2029              		.loc 1 338 3 is_stmt 0 view .LVU607
 2030 0036 0023     		movs	r3, #0
 340:src/storage.c **** 		return report_err( ERR_INVALID );
 2031              		.loc 1 340 5 view .LVU608
 2032 0038 B1F5F46F 		cmp	r1, #1952
 337:src/storage.c **** 		--ProgSize;
 2033              		.loc 1 337 3 view .LVU609
 2034 003c 05F1FF35 		add	r5, r5, #-1
 2035              	.LVL203:
 338:src/storage.c **** 	}
 2036              		.loc 1 338 3 is_stmt 1 view .LVU610
 2037 0040 7B80     		strh	r3, [r7, #2]	@ movhi
 340:src/storage.c **** 		return report_err( ERR_INVALID );
 2038              		.loc 1 340 2 view .LVU611
 340:src/storage.c **** 		return report_err( ERR_INVALID );
 2039              		.loc 1 340 5 is_stmt 0 view .LVU612
 2040 0042 29DC     		bgt	.L164
 2041              	.L163:
 350:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2042              		.loc 1 350 2 is_stmt 1 view .LVU613
 2043 0044 FFF7FEFF 		bl	clrretstk
ARM GAS  /tmp/ccVDV1xv.s 			page 62


 2044              	.LVL204:
 351:src/storage.c **** 		space_needed -= SizeStatRegs;
 2045              		.loc 1 351 2 view .LVU614
 351:src/storage.c **** 		space_needed -= SizeStatRegs;
 2046              		.loc 1 351 5 is_stmt 0 view .LVU615
 2047 0048 002D     		cmp	r5, #0
 2048 004a 11DD     		ble	.L166
 351:src/storage.c **** 		space_needed -= SizeStatRegs;
 2049              		.loc 1 351 40 discriminator 1 view .LVU616
 2050 004c 1D4B     		ldr	r3, .L180+4
 2051 004e 1B68     		ldr	r3, [r3]
 351:src/storage.c **** 		space_needed -= SizeStatRegs;
 2052              		.loc 1 351 24 discriminator 1 view .LVU617
 2053 0050 3BBB     		cbnz	r3, .L178
 2054              	.LBB77:
 356:src/storage.c **** 		if (is_dblmode())
 2055              		.loc 1 356 3 is_stmt 1 view .LVU618
 357:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2056              		.loc 1 357 3 view .LVU619
 357:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2057              		.loc 1 357 7 is_stmt 0 view .LVU620
 2058 0052 FFF7FEFF 		bl	is_dblmode
 2059              	.LVL205:
 357:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2060              		.loc 1 357 6 view .LVU621
 2061 0056 68BB     		cbnz	r0, .L179
 2062              	.L169:
 360:src/storage.c **** 
 2063              		.loc 1 360 4 is_stmt 1 view .LVU622
 360:src/storage.c **** 
 2064              		.loc 1 360 11 is_stmt 0 view .LVU623
 2065 0058 D8F80030 		ldr	r3, [r8]
 2066 005c 93F8CF0F 		ldrb	r0, [r3, #4047]	@ zero_extendqisi2
 360:src/storage.c **** 
 2067              		.loc 1 360 38 view .LVU624
 2068 0060 0335     		adds	r5, r5, #3
 2069              	.LVL206:
 360:src/storage.c **** 
 2070              		.loc 1 360 9 view .LVU625
 2071 0062 A0EBA500 		sub	r0, r0, r5, asr #2
 2072              	.LVL207:
 2073              	.L170:
 362:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2074              		.loc 1 362 3 is_stmt 1 view .LVU626
 362:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2075              		.loc 1 362 6 is_stmt 0 view .LVU627
 2076 0066 0028     		cmp	r0, #0
 2077 0068 E0DB     		blt	.L176
 365:src/storage.c **** 	}
 2078              		.loc 1 365 3 is_stmt 1 view .LVU628
 2079 006a 7D21     		movs	r1, #125
 2080 006c FFF7FEFF 		bl	cmdregs
 2081              	.LVL208:
 2082              	.L166:
 365:src/storage.c **** 	}
 2083              		.loc 1 365 3 is_stmt 0 view .LVU629
 2084              	.LBE77:
ARM GAS  /tmp/ccVDV1xv.s 			page 63


 370:src/storage.c **** 	ProgSize += length;
 2085              		.loc 1 370 2 is_stmt 1 view .LVU630
 370:src/storage.c **** 	ProgSize += length;
 2086              		.loc 1 370 7 is_stmt 0 view .LVU631
 2087 0070 D8F80020 		ldr	r2, [r8]
 2088 0074 5388     		ldrh	r3, [r2, #2]
 2089              	.LVL209:
 371:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2090              		.loc 1 371 2 is_stmt 1 view .LVU632
 370:src/storage.c **** 	ProgSize += length;
 2091              		.loc 1 370 5 is_stmt 0 view .LVU633
 2092 0076 5D1C     		adds	r5, r3, #1
 372:src/storage.c **** 	set_pc( pc );
 2093              		.loc 1 372 16 view .LVU634
 2094 0078 ADB2     		uxth	r5, r5
 371:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2095              		.loc 1 371 11 view .LVU635
 2096 007a 2344     		add	r3, r3, r4
 2097              	.LVL210:
 372:src/storage.c **** 	set_pc( pc );
 2098              		.loc 1 372 16 view .LVU636
 2099 007c 02EB4500 		add	r0, r2, r5, lsl #1
 371:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2100              		.loc 1 371 11 view .LVU637
 2101 0080 5380     		strh	r3, [r2, #2]	@ movhi
 2102              	.LVL211:
 372:src/storage.c **** 	set_pc( pc );
 2103              		.loc 1 372 2 is_stmt 1 view .LVU638
 2104 0082 3146     		mov	r1, r6
 2105 0084 6200     		lsls	r2, r4, #1
 2106 0086 0230     		adds	r0, r0, #2
 2107 0088 FFF7FEFF 		bl	xcopy
 2108              	.LVL212:
 373:src/storage.c **** 	return 0;
 2109              		.loc 1 373 2 view .LVU639
 2110 008c 2846     		mov	r0, r5
 2111 008e FFF7FEFF 		bl	set_pc
 2112              	.LVL213:
 374:src/storage.c **** }
 2113              		.loc 1 374 2 view .LVU640
 375:src/storage.c **** 
 2114              		.loc 1 375 1 is_stmt 0 view .LVU641
 2115 0092 0020     		movs	r0, #0
 2116 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2117              	.LVL214:
 2118              	.L164:
 341:src/storage.c **** 	}
 2119              		.loc 1 341 3 is_stmt 1 view .LVU642
 375:src/storage.c **** 
 2120              		.loc 1 375 1 is_stmt 0 view .LVU643
 2121 0098 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2122              		.cfi_remember_state
 2123              		.cfi_restore 14
 2124              		.cfi_restore 8
 2125              		.cfi_restore 7
 2126              		.cfi_restore 6
 2127              		.cfi_restore 5
ARM GAS  /tmp/ccVDV1xv.s 			page 64


 2128              		.cfi_restore 4
 2129              		.cfi_def_cfa_offset 0
 2130              	.LVL215:
 341:src/storage.c **** 	}
 2131              		.loc 1 341 10 view .LVU644
 2132 009c 1220     		movs	r0, #18
 2133              	.LVL216:
 341:src/storage.c **** 	}
 2134              		.loc 1 341 10 view .LVU645
 2135 009e FFF7FEBF 		b	report_err
 2136              	.LVL217:
 2137              	.L178:
 2138              		.cfi_restore_state
 352:src/storage.c **** 		sigmaDeallocate();
 2139              		.loc 1 352 3 is_stmt 1 view .LVU646
 352:src/storage.c **** 		sigmaDeallocate();
 2140              		.loc 1 352 16 is_stmt 0 view .LVU647
 2141 00a2 ED1A     		subs	r5, r5, r3
 2142              	.LVL218:
 353:src/storage.c **** 	}
 2143              		.loc 1 353 3 is_stmt 1 view .LVU648
 2144 00a4 FFF7FEFF 		bl	sigmaDeallocate
 2145              	.LVL219:
 355:src/storage.c **** 		int regs;
 2146              		.loc 1 355 2 view .LVU649
 355:src/storage.c **** 		int regs;
 2147              		.loc 1 355 5 is_stmt 0 view .LVU650
 2148 00a8 002D     		cmp	r5, #0
 2149 00aa E1DD     		ble	.L166
 2150              	.LBB78:
 356:src/storage.c **** 		if (is_dblmode())
 2151              		.loc 1 356 3 is_stmt 1 view .LVU651
 357:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2152              		.loc 1 357 3 view .LVU652
 357:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2153              		.loc 1 357 7 is_stmt 0 view .LVU653
 2154 00ac FFF7FEFF 		bl	is_dblmode
 2155              	.LVL220:
 357:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2156              		.loc 1 357 6 view .LVU654
 2157 00b0 0028     		cmp	r0, #0
 2158 00b2 D1D0     		beq	.L169
 2159              	.L179:
 358:src/storage.c **** 		else
 2160              		.loc 1 358 4 is_stmt 1 view .LVU655
 358:src/storage.c **** 		else
 2161              		.loc 1 358 11 is_stmt 0 view .LVU656
 2162 00b4 FFF7FEFF 		bl	global_regs
 2163              	.LVL221:
 358:src/storage.c **** 		else
 2164              		.loc 1 358 44 view .LVU657
 2165 00b8 0735     		adds	r5, r5, #7
 2166              	.LVL222:
 358:src/storage.c **** 		else
 2167              		.loc 1 358 25 view .LVU658
 2168 00ba A0EBE500 		sub	r0, r0, r5, asr #3
 2169              	.LVL223:
ARM GAS  /tmp/ccVDV1xv.s 			page 65


 358:src/storage.c **** 		else
 2170              		.loc 1 358 25 view .LVU659
 2171 00be D2E7     		b	.L170
 2172              	.L181:
 2173              		.align	2
 2174              	.L180:
 2175 00c0 00000000 		.word	ProgFree
 2176 00c4 00000000 		.word	SizeStatRegs
 2177 00c8 00000000 		.word	main_ram
 2178              	.LBE78:
 2179              		.cfi_endproc
 2180              	.LFE18:
 2182              		.section	.text.check_create_wp34sdir,"ax",%progbits
 2183              		.align	1
 2184              		.p2align 2,,3
 2185              		.global	check_create_wp34sdir
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2189              		.fpu fpv4-sp-d16
 2191              	check_create_wp34sdir:
 2192              	.LFB21:
 451:src/storage.c ****   FRESULT f;
 2193              		.loc 1 451 33 is_stmt 1 view -0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 452:src/storage.c ****   sys_disk_write_enable(1);
 2197              		.loc 1 452 3 view .LVU661
 453:src/storage.c ****   f = check_create_dir ("/wp34s");
 2198              		.loc 1 453 3 view .LVU662
 451:src/storage.c ****   FRESULT f;
 2199              		.loc 1 451 33 is_stmt 0 view .LVU663
 2200 0000 38B5     		push	{r3, r4, r5, lr}
 2201              		.cfi_def_cfa_offset 16
 2202              		.cfi_offset 3, -16
 2203              		.cfi_offset 4, -12
 2204              		.cfi_offset 5, -8
 2205              		.cfi_offset 14, -4
 453:src/storage.c ****   f = check_create_dir ("/wp34s");
 2206              		.loc 1 453 3 view .LVU664
 2207 0002 0120     		movs	r0, #1
 2208 0004 044D     		ldr	r5, .L184
 2209 0006 A847     		blx	r5
 2210              	.LVL224:
 454:src/storage.c ****   sys_disk_write_enable(0);
 2211              		.loc 1 454 3 is_stmt 1 view .LVU665
 454:src/storage.c ****   sys_disk_write_enable(0);
 2212              		.loc 1 454 7 is_stmt 0 view .LVU666
 2213 0008 044B     		ldr	r3, .L184+4
 2214 000a 0548     		ldr	r0, .L184+8
 2215 000c 9847     		blx	r3
 2216              	.LVL225:
 2217 000e 0446     		mov	r4, r0
 2218              	.LVL226:
 455:src/storage.c ****   return f;
 2219              		.loc 1 455 3 is_stmt 1 view .LVU667
ARM GAS  /tmp/ccVDV1xv.s 			page 66


 2220 0010 0020     		movs	r0, #0
 2221 0012 A847     		blx	r5
 2222              	.LVL227:
 456:src/storage.c **** }
 2223              		.loc 1 456 3 view .LVU668
 457:src/storage.c **** 
 2224              		.loc 1 457 1 is_stmt 0 view .LVU669
 2225 0014 E0B2     		uxtb	r0, r4
 2226 0016 38BD     		pop	{r3, r4, r5, pc}
 2227              	.LVL228:
 2228              	.L185:
 457:src/storage.c **** 
 2229              		.loc 1 457 1 view .LVU670
 2230              		.align	2
 2231              	.L184:
 2232 0018 E1030008 		.word	134218721
 2233 001c D1030008 		.word	134218705
 2234 0020 30000000 		.word	.LC2
 2235              		.cfi_endproc
 2236              	.LFE21:
 2238              		.section	.text.init_library,"ax",%progbits
 2239              		.align	1
 2240              		.p2align 2,,3
 2241              		.global	init_library
 2242              		.syntax unified
 2243              		.thumb
 2244              		.thumb_func
 2245              		.fpu fpv4-sp-d16
 2247              	init_library:
 2248              	.LFB22:
 464:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2249              		.loc 1 464 1 is_stmt 1 view -0
 2250              		.cfi_startproc
 2251              		@ args = 0, pretend = 0, frame = 256
 2252              		@ frame_needed = 0, uses_anonymous_args = 0
 465:src/storage.c **** 	  struct {
 2253              		.loc 1 465 2 view .LVU672
 464:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2254              		.loc 1 464 1 is_stmt 0 view .LVU673
 2255 0000 10B5     		push	{r4, lr}
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 4, -8
 2258              		.cfi_offset 14, -4
 465:src/storage.c **** 	  struct {
 2259              		.loc 1 465 7 view .LVU674
 2260 0002 0C4C     		ldr	r4, .L193
 2261 0004 2168     		ldr	r1, [r4]
 464:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2262              		.loc 1 464 1 view .LVU675
 2263 0006 C0B0     		sub	sp, sp, #256
 2264              		.cfi_def_cfa_offset 264
 465:src/storage.c **** 	  struct {
 2265              		.loc 1 465 7 view .LVU676
 2266 0008 0846     		mov	r0, r1
 2267 000a FFF7FEFF 		bl	checksum_region
 2268              	.LVL229:
 465:src/storage.c **** 	  struct {
ARM GAS  /tmp/ccVDV1xv.s 			page 67


 2269              		.loc 1 465 5 view .LVU677
 2270 000e 08B9     		cbnz	r0, .L192
 476:src/storage.c **** 
 2271              		.loc 1 476 1 view .LVU678
 2272 0010 40B0     		add	sp, sp, #256
 2273              		.cfi_remember_state
 2274              		.cfi_def_cfa_offset 8
 2275              		@ sp needed
 2276 0012 10BD     		pop	{r4, pc}
 2277              	.L192:
 2278              		.cfi_restore_state
 2279              	.LBB79:
 466:src/storage.c **** 			unsigned short crc;
 2280              		.loc 1 466 4 is_stmt 1 view .LVU679
 471:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2281              		.loc 1 471 3 view .LVU680
 472:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2282              		.loc 1 472 3 view .LVU681
 472:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2283              		.loc 1 472 11 is_stmt 0 view .LVU682
 2284 0014 4AF23C53 		movw	r3, #42300
 473:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2285              		.loc 1 473 3 view .LVU683
 2286 0018 FC22     		movs	r2, #252
 2287 001a FF21     		movs	r1, #255
 2288 001c 01A8     		add	r0, sp, #4
 472:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2289              		.loc 1 472 11 view .LVU684
 2290 001e 0093     		str	r3, [sp]
 473:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2291              		.loc 1 473 3 is_stmt 1 view .LVU685
 2292 0020 FFF7FEFF 		bl	xset
 2293              	.LVL230:
 474:src/storage.c **** 	}
 2294              		.loc 1 474 3 view .LVU686
 2295 0024 2068     		ldr	r0, [r4]
 2296 0026 6946     		mov	r1, sp
 2297 0028 0122     		movs	r2, #1
 2298 002a FFF7FEFF 		bl	program_flash
 2299              	.LVL231:
 2300              	.LBE79:
 476:src/storage.c **** 
 2301              		.loc 1 476 1 is_stmt 0 view .LVU687
 2302 002e 40B0     		add	sp, sp, #256
 2303              		.cfi_def_cfa_offset 8
 2304              		@ sp needed
 2305 0030 10BD     		pop	{r4, pc}
 2306              	.L194:
 2307 0032 00BF     		.align	2
 2308              	.L193:
 2309 0034 00000000 		.word	library_ram
 2310              		.cfi_endproc
 2311              	.LFE22:
 2313              		.section	.text.flash_remove,"ax",%progbits
 2314              		.align	1
 2315              		.p2align 2,,3
 2316              		.global	flash_remove
ARM GAS  /tmp/ccVDV1xv.s 			page 68


 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu fpv4-sp-d16
 2322              	flash_remove:
 2323              	.LVL232:
 2324              	.LFB24:
 541:src/storage.c **** 	const int size = UserFlash.size - count;
 2325              		.loc 1 541 1 is_stmt 1 view -0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 0, uses_anonymous_args = 0
 2329              		@ link register save eliminated.
 542:src/storage.c **** 	step_no = offsetLIB( step_no );
 2330              		.loc 1 542 2 view .LVU689
 542:src/storage.c **** 	step_no = offsetLIB( step_no );
 2331              		.loc 1 542 19 is_stmt 0 view .LVU690
 2332 0000 084B     		ldr	r3, .L197
 2333 0002 1A68     		ldr	r2, [r3]
 543:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2334              		.loc 1 543 12 view .LVU691
 2335 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2336              	.LVL233:
 542:src/storage.c **** 	step_no = offsetLIB( step_no );
 2337              		.loc 1 542 28 view .LVU692
 2338 0008 5388     		ldrh	r3, [r2, #2]
 543:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2339              		.loc 1 543 10 view .LVU693
 2340 000a 0138     		subs	r0, r0, #1
 541:src/storage.c **** 	const int size = UserFlash.size - count;
 2341              		.loc 1 541 1 view .LVU694
 2342 000c 10B4     		push	{r4}
 2343              		.cfi_def_cfa_offset 4
 2344              		.cfi_offset 4, -4
 544:src/storage.c **** 			     size - step_no, size );
 2345              		.loc 1 544 32 view .LVU695
 2346 000e 0432     		adds	r2, r2, #4
 544:src/storage.c **** 			     size - step_no, size );
 2347              		.loc 1 544 57 view .LVU696
 2348 0010 4418     		adds	r4, r0, r1
 542:src/storage.c **** 	step_no = offsetLIB( step_no );
 2349              		.loc 1 542 12 view .LVU697
 2350 0012 5B1A     		subs	r3, r3, r1
 2351              	.LVL234:
 543:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2352              		.loc 1 543 2 is_stmt 1 view .LVU698
 544:src/storage.c **** 			     size - step_no, size );
 2353              		.loc 1 544 2 view .LVU699
 544:src/storage.c **** 			     size - step_no, size );
 2354              		.loc 1 544 9 is_stmt 0 view .LVU700
 2355 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2356              	.LVL235:
 546:src/storage.c **** 
 2357              		.loc 1 546 1 view .LVU701
 2358 0018 5DF8044B 		ldr	r4, [sp], #4
 2359              		.cfi_restore 4
 2360              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccVDV1xv.s 			page 69


 544:src/storage.c **** 			     size - step_no, size );
 2361              		.loc 1 544 9 view .LVU702
 2362 001c 1A1A     		subs	r2, r3, r0
 2363 001e FFF7FEBF 		b	flash_append
 2364              	.LVL236:
 2365              	.L198:
 544:src/storage.c **** 			     size - step_no, size );
 2366              		.loc 1 544 9 view .LVU703
 2367 0022 00BF     		.align	2
 2368              	.L197:
 2369 0024 00000000 		.word	library_ram
 2370              		.cfi_endproc
 2371              	.LFE24:
 2373              		.section	.text.clrprog,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.global	clrprog
 2377              		.syntax unified
 2378              		.thumb
 2379              		.thumb_func
 2380              		.fpu fpv4-sp-d16
 2382              	clrprog:
 2383              	.LFB13:
 211:src/storage.c **** 	update_program_bounds( 1 );
 2384              		.loc 1 211 1 is_stmt 1 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 0
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
 212:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2388              		.loc 1 212 2 view .LVU705
 211:src/storage.c **** 	update_program_bounds( 1 );
 2389              		.loc 1 211 1 is_stmt 0 view .LVU706
 2390 0000 10B5     		push	{r4, lr}
 2391              		.cfi_def_cfa_offset 8
 2392              		.cfi_offset 4, -8
 2393              		.cfi_offset 14, -4
 213:src/storage.c **** 		/*
 2394              		.loc 1 213 7 view .LVU707
 2395 0002 234C     		ldr	r4, .L208
 212:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2396              		.loc 1 212 2 view .LVU708
 2397 0004 0120     		movs	r0, #1
 2398 0006 FFF7FEFF 		bl	update_program_bounds
 2399              	.LVL237:
 213:src/storage.c **** 		/*
 2400              		.loc 1 213 2 is_stmt 1 view .LVU709
 213:src/storage.c **** 		/*
 2401              		.loc 1 213 7 is_stmt 0 view .LVU710
 2402 000a 2368     		ldr	r3, [r4]
 2403 000c B3F8EC0F 		ldrh	r0, [r3, #4076]
 213:src/storage.c **** 		/*
 2404              		.loc 1 213 5 view .LVU711
 2405 0010 820B     		lsrs	r2, r0, #14
 2406 0012 012A     		cmp	r2, #1
 2407 0014 28D0     		beq	.L205
 220:src/storage.c **** 			return;
 2408              		.loc 1 220 3 is_stmt 1 view .LVU712
ARM GAS  /tmp/ccVDV1xv.s 			page 70


 220:src/storage.c **** 			return;
 2409              		.loc 1 220 8 is_stmt 0 view .LVU713
 2410 0016 FFF7FEFF 		bl	check_delete_prog
 2411              	.LVL238:
 220:src/storage.c **** 			return;
 2412              		.loc 1 220 6 view .LVU714
 2413 001a 00B1     		cbz	r0, .L206
 232:src/storage.c ****  
 2414              		.loc 1 232 1 view .LVU715
 2415 001c 10BD     		pop	{r4, pc}
 2416              	.L206:
 223:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 2417              		.loc 1 223 3 is_stmt 1 view .LVU716
 2418 001e FFF7FEFF 		bl	clrretstk
 2419              	.LVL239:
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2420              		.loc 1 224 3 view .LVU717
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2421              		.loc 1 224 10 is_stmt 0 view .LVU718
 2422 0022 2368     		ldr	r3, [r4]
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2423              		.loc 1 224 17 view .LVU719
 2424 0024 B3F8EC0F 		ldrh	r0, [r3, #4076]
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2425              		.loc 1 224 37 view .LVU720
 2426 0028 B3F8EE1F 		ldrh	r1, [r3, #4078]
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2427              		.loc 1 224 48 view .LVU721
 2428 002c 5A88     		ldrh	r2, [r3, #2]
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2429              		.loc 1 224 17 view .LVU722
 2430 002e 00F10040 		add	r0, r0, #-2147483648
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2431              		.loc 1 224 10 view .LVU723
 2432 0032 0433     		adds	r3, r3, #4
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2433              		.loc 1 224 57 view .LVU724
 2434 0034 521A     		subs	r2, r2, r1
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2435              		.loc 1 224 17 view .LVU725
 2436 0036 0138     		subs	r0, r0, #1
 224:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2437              		.loc 1 224 3 view .LVU726
 2438 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2439 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2440 0040 5200     		lsls	r2, r2, #1
 2441 0042 FFF7FEFF 		bl	xcopy
 2442              	.LVL240:
 225:src/storage.c **** 		if ( ProgSize == 0 ) {
 2443              		.loc 1 225 3 is_stmt 1 view .LVU727
 225:src/storage.c **** 		if ( ProgSize == 0 ) {
 2444              		.loc 1 225 12 is_stmt 0 view .LVU728
 2445 0046 2268     		ldr	r2, [r4]
 225:src/storage.c **** 		if ( ProgSize == 0 ) {
 2446              		.loc 1 225 31 view .LVU729
 2447 0048 B2F8EC0F 		ldrh	r0, [r2, #4076]
 225:src/storage.c **** 		if ( ProgSize == 0 ) {
ARM GAS  /tmp/ccVDV1xv.s 			page 71


 2448              		.loc 1 225 12 view .LVU730
 2449 004c 5388     		ldrh	r3, [r2, #2]
 2450 004e B2F8EE1F 		ldrh	r1, [r2, #4078]
 2451 0052 0344     		add	r3, r3, r0
 2452 0054 013B     		subs	r3, r3, #1
 2453 0056 5B1A     		subs	r3, r3, r1
 2454 0058 9BB2     		uxth	r3, r3
 226:src/storage.c **** 			stoend();
 2455              		.loc 1 226 3 is_stmt 1 view .LVU731
 226:src/storage.c **** 			stoend();
 2456              		.loc 1 226 6 is_stmt 0 view .LVU732
 2457 005a B3B9     		cbnz	r3, .L207
 227:src/storage.c **** 		}
 2458              		.loc 1 227 4 is_stmt 1 view .LVU733
 2459              	.LBB80:
 2460              	.LBI80:
 178:src/storage.c **** {
 2461              		.loc 1 178 13 view .LVU734
 2462              	.LBB81:
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2463              		.loc 1 180 2 view .LVU735
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2464              		.loc 1 180 11 is_stmt 0 view .LVU736
 2465 005c 0121     		movs	r1, #1
 181:src/storage.c **** }
 2466              		.loc 1 181 12 view .LVU737
 2467 005e 4FF49D73 		mov	r3, #314
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2468              		.loc 1 180 11 view .LVU738
 2469 0062 5180     		strh	r1, [r2, #2]	@ movhi
 181:src/storage.c **** }
 2470              		.loc 1 181 2 is_stmt 1 view .LVU739
 181:src/storage.c **** }
 2471              		.loc 1 181 12 is_stmt 0 view .LVU740
 2472 0064 9380     		strh	r3, [r2, #4]	@ movhi
 182:src/storage.c **** 
 2473              		.loc 1 182 1 view .LVU741
 2474 0066 08E0     		b	.L201
 2475              	.L205:
 2476              	.LBE81:
 2477              	.LBE80:
 217:src/storage.c **** 	}
 2478              		.loc 1 217 3 is_stmt 1 view .LVU742
 217:src/storage.c **** 	}
 2479              		.loc 1 217 28 is_stmt 0 view .LVU743
 2480 0068 B3F8EE1F 		ldrh	r1, [r3, #4078]
 217:src/storage.c **** 	}
 2481              		.loc 1 217 36 view .LVU744
 2482 006c 0131     		adds	r1, r1, #1
 217:src/storage.c **** 	}
 2483              		.loc 1 217 3 view .LVU745
 2484 006e 091A     		subs	r1, r1, r0
 2485 0070 FFF7FEFF 		bl	flash_remove
 2486              	.LVL241:
 2487 0074 2368     		ldr	r3, [r4]
 2488 0076 B3F8EC0F 		ldrh	r0, [r3, #4076]
 2489              	.L201:
ARM GAS  /tmp/ccVDV1xv.s 			page 72


 230:src/storage.c **** 	update_program_bounds( 1 );
 2490              		.loc 1 230 2 is_stmt 1 view .LVU746
 2491 007a 0138     		subs	r0, r0, #1
 2492 007c FFF7FEFF 		bl	set_pc
 2493              	.LVL242:
 231:src/storage.c **** }
 2494              		.loc 1 231 2 view .LVU747
 232:src/storage.c ****  
 2495              		.loc 1 232 1 is_stmt 0 view .LVU748
 2496 0080 BDE81040 		pop	{r4, lr}
 2497              		.cfi_remember_state
 2498              		.cfi_restore 14
 2499              		.cfi_restore 4
 2500              		.cfi_def_cfa_offset 0
 231:src/storage.c **** }
 2501              		.loc 1 231 2 view .LVU749
 2502 0084 0120     		movs	r0, #1
 2503 0086 FFF7FEBF 		b	update_program_bounds
 2504              	.LVL243:
 2505              	.L207:
 2506              		.cfi_restore_state
 225:src/storage.c **** 		if ( ProgSize == 0 ) {
 2507              		.loc 1 225 12 view .LVU750
 2508 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2509 008c F5E7     		b	.L201
 2510              	.L209:
 2511 008e 00BF     		.align	2
 2512              	.L208:
 2513 0090 00000000 		.word	main_ram
 2514              		.cfi_endproc
 2515              	.LFE13:
 2517              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2518              		.align	2
 2519              	.LC7:
 2520 0000 4E6F206C 		.ascii	"No label\000"
 2520      6162656C 
 2520      00
 2521              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2522              		.align	1
 2523              		.p2align 2,,3
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2527              		.fpu fpv4-sp-d16
 2529              	store_program_from_buffer.part.0:
 2530              	.LVL244:
 2531              	.LFB43:
 940:src/storage.c **** 
 941:src/storage.c **** void save_prog_file () {
 942:src/storage.c ****   opcode lbl; 
 943:src/storage.c ****   unsigned int pc;
 944:src/storage.c ****   unsigned short steps, prog_crc;
 945:src/storage.c ****   FRESULT f;
 946:src/storage.c ****   int data = WRITE;
 947:src/storage.c ****   int fss;
 948:src/storage.c ****   uint x=0;
 949:src/storage.c ****   char* buffer;
ARM GAS  /tmp/ccVDV1xv.s 			page 73


 950:src/storage.c ****   FLASH_REGION* fr;
 951:src/storage.c **** 
 952:src/storage.c ****   
 953:src/storage.c ****   if ( not_running() ) {
 954:src/storage.c ****     /*
 955:src/storage.c ****      *  Don't copy from library or XROM
 956:src/storage.c ****      */
 957:src/storage.c ****     pc = nLIB( state_pc() );
 958:src/storage.c ****     if ( pc == REGION_XROM ) {
 959:src/storage.c ****       error_message( ERR_ILLEGAL );
 960:src/storage.c ****       return;
 961:src/storage.c ****     }
 962:src/storage.c ****     /*
 963:src/storage.c ****      *  Check if program is labeled
 964:src/storage.c ****      */
 965:src/storage.c ****     update_program_bounds( 1 );
 966:src/storage.c ****     lbl = getprog( ProgBegin );
 967:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 968:src/storage.c ****       error_message( ERR_NO_LBL );
 969:src/storage.c ****       return;
 970:src/storage.c ****     }
 971:src/storage.c ****     /*
 972:src/storage.c ****      *  Compute steps and crc for program
 973:src/storage.c ****      */
 974:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
 975:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 976:src/storage.c ****     /*
 977:src/storage.c ****      * Get filename and open file
 978:src/storage.c ****      */
 979:src/storage.c ****     sys_disk_write_enable(1);
 980:src/storage.c **** 
 981:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
 982:src/storage.c ****     if (fss != 1) return;
 983:src/storage.c **** 
 984:src/storage.c ****     // File is now open with correct permissions
 985:src/storage.c **** 
 986:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
 987:src/storage.c ****     if (!buffer) {// calloc failure!
 988:src/storage.c ****       f_close(FPT);
 989:src/storage.c ****       sys_disk_write_enable(0);
 990:src/storage.c ****       DispMsg = "Mem short";
 991:src/storage.c ****       return;
 992:src/storage.c ****     }
 993:src/storage.c **** 
 994:src/storage.c ****     fr = (FLASH_REGION*) buffer;
 995:src/storage.c ****     fr->size = steps;
 996:src/storage.c ****     fr->crc = prog_crc;
 997:src/storage.c **** 
 998:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
 999:src/storage.c ****    
1000:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1001:src/storage.c ****     free(buffer);
1002:src/storage.c ****     
1003:src/storage.c ****     if (f != FR_OK) { //odd?
1004:src/storage.c ****       DispMsg = "Write err";
1005:src/storage.c ****     }
1006:src/storage.c ****     else {
ARM GAS  /tmp/ccVDV1xv.s 			page 74


1007:src/storage.c ****       DispMsg = "Written";
1008:src/storage.c ****     }
1009:src/storage.c ****       
1010:src/storage.c ****     f_close(FPT);
1011:src/storage.c ****     sys_disk_write_enable(0);
1012:src/storage.c ****     
1013:src/storage.c ****   }
1014:src/storage.c **** }
1015:src/storage.c **** 
1016:src/storage.c **** void load_prog_file () {
1017:src/storage.c ****   int fss, fsize;
1018:src/storage.c ****   int data = READ;
1019:src/storage.c ****   uint x=0;
1020:src/storage.c ****   FLASH_REGION* fr;
1021:src/storage.c ****   char* buffer;
1022:src/storage.c **** 
1023:src/storage.c ****   fss = file_selection_screen ("Load PROG File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW,
1024:src/storage.c ****   if (fss != 1) return;
1025:src/storage.c **** 
1026:src/storage.c ****   // File is now open with correct permissions
1027:src/storage.c **** 
1028:src/storage.c ****   fsize = f_size(FPT); // size in bytes
1029:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
1030:src/storage.c ****     f_close(FPT);
1031:src/storage.c ****     DispMsg = "File too big";
1032:src/storage.c ****     return;
1033:src/storage.c ****   }
1034:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1035:src/storage.c ****   if (!buffer) {// calloc failure!
1036:src/storage.c ****     f_close(FPT);
1037:src/storage.c ****     DispMsg = "Mem short";
1038:src/storage.c ****     return;
1039:src/storage.c ****   }
1040:src/storage.c **** 
1041:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1042:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1043:src/storage.c ****     free(buffer);
1044:src/storage.c ****     f_close(FPT);
1045:src/storage.c ****     DispMsg = "Not at eof";
1046:src/storage.c ****     return;
1047:src/storage.c ****   }
1048:src/storage.c ****   f_close(FPT);
1049:src/storage.c **** 
1050:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1051:src/storage.c ****     
1052:src/storage.c ****   if (checksum_region(fr, fr)) {// crc failed - wrong filetype?
1053:src/storage.c ****     unsigned short correct_crc = fr->crc; // get crc from after program end
1054:src/storage.c ****     unsigned short end_of_prog = 4 + (fr->size)*2;
1055:src/storage.c ****     unsigned short possible_crc = buffer[end_of_prog] + buffer[end_of_prog+1]*256;
1056:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
1057:src/storage.c ****       DispMsg = "CRC err";
1058:src/storage.c ****       free(buffer);
1059:src/storage.c ****       return;
1060:src/storage.c ****     }
1061:src/storage.c ****   }
1062:src/storage.c **** 
1063:src/storage.c ****   store_program_from_buffer (fr);
ARM GAS  /tmp/ccVDV1xv.s 			page 75


1064:src/storage.c ****   free(buffer);
1065:src/storage.c **** }
1066:src/storage.c **** 
1067:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
 2532              		.loc 1 1067 6 is_stmt 1 view -0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
 2536              	.LBB82:
1068:src/storage.c **** { // buffer contains all of program file
1069:src/storage.c ****   unsigned int pc;
1070:src/storage.c ****   int space_needed, count, free;
1071:src/storage.c **** 
1072:src/storage.c ****   if ( not_running() ) {
1073:src/storage.c ****     /*
1074:src/storage.c ****      *  Check if program is labeled
1075:src/storage.c ****      */
1076:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2537              		.loc 1 1076 5 view .LVU752
1077:src/storage.c ****     if ( isDBL(lbl) ) {
 2538              		.loc 1 1077 5 view .LVU753
 2539              		.loc 1 1077 8 is_stmt 0 view .LVU754
 2540 0000 8388     		ldrh	r3, [r0, #4]
 2541 0002 03F47043 		and	r3, r3, #61440
 2542 0006 B3F5704F 		cmp	r3, #61440
 2543 000a 03D0     		beq	.L223
 2544              	.LVL245:
1078:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
1079:src/storage.c ****     }
1080:src/storage.c ****     
1081:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1082:src/storage.c ****       DispMsg = "No label";
 2545              		.loc 1 1082 7 is_stmt 1 view .LVU755
 2546              		.loc 1 1082 15 is_stmt 0 view .LVU756
 2547 000c 264B     		ldr	r3, .L227
 2548 000e 274A     		ldr	r2, .L227+4
 2549 0010 1A60     		str	r2, [r3]
1083:src/storage.c ****       return;
 2550              		.loc 1 1083 7 is_stmt 1 view .LVU757
 2551 0012 7047     		bx	lr
 2552              	.LVL246:
 2553              	.L223:
1078:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2554              		.loc 1 1078 11 is_stmt 0 view .LVU758
 2555 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1081:src/storage.c ****       DispMsg = "No label";
 2556              		.loc 1 1081 11 view .LVU759
 2557 0016 01F47043 		and	r3, r1, #61440
1081:src/storage.c ****       DispMsg = "No label";
 2558              		.loc 1 1081 8 view .LVU760
 2559 001a B3F5704F 		cmp	r3, #61440
 2560              	.LBE82:
1067:src/storage.c **** { // buffer contains all of program file
 2561              		.loc 1 1067 6 view .LVU761
 2562 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2563              		.cfi_def_cfa_offset 32
 2564              		.cfi_offset 4, -32
ARM GAS  /tmp/ccVDV1xv.s 			page 76


 2565              		.cfi_offset 5, -28
 2566              		.cfi_offset 6, -24
 2567              		.cfi_offset 7, -20
 2568              		.cfi_offset 8, -16
 2569              		.cfi_offset 9, -12
 2570              		.cfi_offset 10, -8
 2571              		.cfi_offset 14, -4
 2572 0022 0446     		mov	r4, r0
 2573              	.LBB85:
1078:src/storage.c ****     }
 2574              		.loc 1 1078 7 is_stmt 1 view .LVU762
 2575              	.LVL247:
1081:src/storage.c ****       DispMsg = "No label";
 2576              		.loc 1 1081 5 view .LVU763
1081:src/storage.c ****       DispMsg = "No label";
 2577              		.loc 1 1081 8 is_stmt 0 view .LVU764
 2578 0024 04D1     		bne	.L211
1081:src/storage.c ****       DispMsg = "No label";
 2579              		.loc 1 1081 22 view .LVU765
 2580 0026 11F4706F 		tst	r1, #3840
1081:src/storage.c ****       DispMsg = "No label";
 2581              		.loc 1 1081 25 view .LVU766
 2582 002a C1F30322 		ubfx	r2, r1, #8, #4
1081:src/storage.c ****       DispMsg = "No label";
 2583              		.loc 1 1081 22 view .LVU767
 2584 002e 04D0     		beq	.L212
 2585              	.L211:
 2586              	.LVL248:
1082:src/storage.c ****       return;
 2587              		.loc 1 1082 7 is_stmt 1 view .LVU768
1082:src/storage.c ****       return;
 2588              		.loc 1 1082 15 is_stmt 0 view .LVU769
 2589 0030 1D4B     		ldr	r3, .L227
 2590 0032 1E4A     		ldr	r2, .L227+4
 2591 0034 1A60     		str	r2, [r3]
 2592              		.loc 1 1083 7 is_stmt 1 view .LVU770
 2593              	.LBE85:
1084:src/storage.c ****     }
1085:src/storage.c ****     /*
1086:src/storage.c ****      *  Compute space needed
1087:src/storage.c ****      */
1088:src/storage.c ****     count = space_needed = fr->size;
1089:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1090:src/storage.c ****     
1091:src/storage.c ****     /*
1092:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1093:src/storage.c ****      */
1094:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1095:src/storage.c ****     if ( pc != 0 ) {
1096:src/storage.c ****       /*
1097:src/storage.c ****        *  CLP in library
1098:src/storage.c ****        */
1099:src/storage.c ****       unsigned int old_pc = state_pc();
1100:src/storage.c ****       set_pc( pc );
1101:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1102:src/storage.c ****       if ( space_needed <= free ) {
1103:src/storage.c **** 	clrprog();
ARM GAS  /tmp/ccVDV1xv.s 			page 77


1104:src/storage.c ****       }
1105:src/storage.c ****       set_pc( old_pc );
1106:src/storage.c ****     }
1107:src/storage.c ****     if ( space_needed > free ) {
1108:src/storage.c ****       error_message( ERR_FLASH_FULL );
1109:src/storage.c ****       return;
1110:src/storage.c ****     }
1111:src/storage.c ****     // 3. Append program
1112:src/storage.c ****     flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1113:src/storage.c ****   }
1114:src/storage.c **** }
 2594              		.loc 1 1114 1 is_stmt 0 view .LVU771
 2595 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2596              	.LVL249:
 2597              	.L212:
 2598              	.LBB86:
1088:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2599              		.loc 1 1088 5 is_stmt 1 view .LVU772
1089:src/storage.c ****     
 2600              		.loc 1 1089 41 is_stmt 0 view .LVU773
 2601 003a DFF87880 		ldr	r8, .L227+12
1088:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2602              		.loc 1 1088 26 view .LVU774
 2603 003e 4788     		ldrh	r7, [r0, #2]
 2604              	.LVL250:
1089:src/storage.c ****     
 2605              		.loc 1 1089 5 is_stmt 1 view .LVU775
1089:src/storage.c ****     
 2606              		.loc 1 1089 41 is_stmt 0 view .LVU776
 2607 0040 D8F80030 		ldr	r3, [r8]
1094:src/storage.c ****     if ( pc != 0 ) {
 2608              		.loc 1 1094 10 view .LVU777
 2609 0044 4FF48040 		mov	r0, #16384
 2610              	.LVL251:
1089:src/storage.c ****     
 2611              		.loc 1 1089 41 view .LVU778
 2612 0048 5D88     		ldrh	r5, [r3, #2]
1094:src/storage.c ****     if ( pc != 0 ) {
 2613              		.loc 1 1094 10 view .LVU779
 2614 004a FFF7FEFF 		bl	find_opcode_from
 2615              	.LVL252:
1089:src/storage.c ****     
 2616              		.loc 1 1089 10 view .LVU780
 2617 004e C5F5FF55 		rsb	r5, r5, #8160
 2618 0052 1E35     		adds	r5, r5, #30
 2619              	.LVL253:
1094:src/storage.c ****     if ( pc != 0 ) {
 2620              		.loc 1 1094 5 is_stmt 1 view .LVU781
1095:src/storage.c ****       /*
 2621              		.loc 1 1095 5 view .LVU782
1095:src/storage.c ****       /*
 2622              		.loc 1 1095 8 is_stmt 0 view .LVU783
 2623 0054 60B9     		cbnz	r0, .L224
1088:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2624              		.loc 1 1088 26 view .LVU784
 2625 0056 3E46     		mov	r6, r7
 2626              	.LVL254:
ARM GAS  /tmp/ccVDV1xv.s 			page 78


 2627              	.L214:
1107:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2628              		.loc 1 1107 5 is_stmt 1 view .LVU785
1107:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2629              		.loc 1 1107 8 is_stmt 0 view .LVU786
 2630 0058 B542     		cmp	r5, r6
 2631 005a 1DDB     		blt	.L225
1112:src/storage.c ****   }
 2632              		.loc 1 1112 5 is_stmt 1 view .LVU787
1112:src/storage.c ****   }
 2633              		.loc 1 1112 28 is_stmt 0 view .LVU788
 2634 005c D8F80030 		ldr	r3, [r8]
1112:src/storage.c ****   }
 2635              		.loc 1 1112 5 view .LVU789
 2636 0060 5888     		ldrh	r0, [r3, #2]
 2637 0062 211D     		adds	r1, r4, #4
 2638 0064 3B18     		adds	r3, r7, r0
 2639 0066 3A46     		mov	r2, r7
 2640              	.LBE86:
 2641              		.loc 1 1114 1 view .LVU790
 2642 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2643              		.cfi_remember_state
 2644              		.cfi_restore 14
 2645              		.cfi_restore 10
 2646              		.cfi_restore 9
 2647              		.cfi_restore 8
 2648              		.cfi_restore 7
 2649              		.cfi_restore 6
 2650              		.cfi_restore 5
 2651              		.cfi_restore 4
 2652              		.cfi_def_cfa_offset 0
 2653              	.LVL255:
 2654              	.LBB87:
1112:src/storage.c ****   }
 2655              		.loc 1 1112 5 view .LVU791
 2656 006c FFF7FEBF 		b	flash_append
 2657              	.LVL256:
 2658              	.L224:
 2659              		.cfi_restore_state
 2660              	.LBB83:
1099:src/storage.c ****       set_pc( pc );
 2661              		.loc 1 1099 7 is_stmt 1 view .LVU792
1099:src/storage.c ****       set_pc( pc );
 2662              		.loc 1 1099 29 is_stmt 0 view .LVU793
 2663 0070 0F4E     		ldr	r6, .L227+8
 2664 0072 3368     		ldr	r3, [r6]
1099:src/storage.c ****       set_pc( pc );
 2665              		.loc 1 1099 20 view .LVU794
 2666 0074 B3F8E09F 		ldrh	r9, [r3, #4064]
 2667              	.LVL257:
1100:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2668              		.loc 1 1100 7 is_stmt 1 view .LVU795
 2669 0078 FFF7FEFF 		bl	set_pc
 2670              	.LVL258:
1101:src/storage.c ****       if ( space_needed <= free ) {
 2671              		.loc 1 1101 7 view .LVU796
1101:src/storage.c ****       if ( space_needed <= free ) {
ARM GAS  /tmp/ccVDV1xv.s 			page 79


 2672              		.loc 1 1101 27 is_stmt 0 view .LVU797
 2673 007c 3368     		ldr	r3, [r6]
 2674 007e B3F8EE6F 		ldrh	r6, [r3, #4078]
1101:src/storage.c ****       if ( space_needed <= free ) {
 2675              		.loc 1 1101 37 view .LVU798
 2676 0082 B3F8EC3F 		ldrh	r3, [r3, #4076]
1101:src/storage.c ****       if ( space_needed <= free ) {
 2677              		.loc 1 1101 25 view .LVU799
 2678 0086 0136     		adds	r6, r6, #1
1101:src/storage.c ****       if ( space_needed <= free ) {
 2679              		.loc 1 1101 35 view .LVU800
 2680 0088 F61A     		subs	r6, r6, r3
1101:src/storage.c ****       if ( space_needed <= free ) {
 2681              		.loc 1 1101 20 view .LVU801
 2682 008a BE1B     		subs	r6, r7, r6
 2683              	.LVL259:
1102:src/storage.c **** 	clrprog();
 2684              		.loc 1 1102 7 is_stmt 1 view .LVU802
1102:src/storage.c **** 	clrprog();
 2685              		.loc 1 1102 10 is_stmt 0 view .LVU803
 2686 008c B542     		cmp	r5, r6
 2687 008e 08DA     		bge	.L226
 2688              	.L215:
1105:src/storage.c ****     }
 2689              		.loc 1 1105 7 is_stmt 1 view .LVU804
 2690 0090 4846     		mov	r0, r9
 2691 0092 FFF7FEFF 		bl	set_pc
 2692              	.LVL260:
 2693 0096 DFE7     		b	.L214
 2694              	.LVL261:
 2695              	.L225:
1105:src/storage.c ****     }
 2696              		.loc 1 1105 7 is_stmt 0 view .LVU805
 2697              	.LBE83:
1108:src/storage.c ****       return;
 2698              		.loc 1 1108 7 is_stmt 1 view .LVU806
 2699              	.LBE87:
 2700              		.loc 1 1114 1 is_stmt 0 view .LVU807
 2701 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2702              		.cfi_remember_state
 2703              		.cfi_restore 14
 2704              		.cfi_restore 10
 2705              		.cfi_restore 9
 2706              		.cfi_restore 8
 2707              		.cfi_restore 7
 2708              		.cfi_restore 6
 2709              		.cfi_restore 5
 2710              		.cfi_restore 4
 2711              		.cfi_def_cfa_offset 0
 2712              	.LVL262:
 2713              	.LBB88:
1108:src/storage.c ****       return;
 2714              		.loc 1 1108 7 view .LVU808
 2715 009c 1720     		movs	r0, #23
 2716 009e FFF7FEBF 		b	error_message
 2717              	.LVL263:
 2718              	.L226:
ARM GAS  /tmp/ccVDV1xv.s 			page 80


 2719              		.cfi_restore_state
 2720              	.LBB84:
1103:src/storage.c ****       }
 2721              		.loc 1 1103 2 is_stmt 1 view .LVU809
 2722 00a2 FFF7FEFF 		bl	clrprog
 2723              	.LVL264:
 2724 00a6 F3E7     		b	.L215
 2725              	.L228:
 2726              		.align	2
 2727              	.L227:
 2728 00a8 00000000 		.word	DispMsg
 2729 00ac 00000000 		.word	.LC7
 2730 00b0 00000000 		.word	main_ram
 2731 00b4 00000000 		.word	library_ram
 2732              	.LBE84:
 2733              	.LBE88:
 2734              		.cfi_endproc
 2735              	.LFE43:
 2737              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2738              		.align	2
 2739              	.LC8:
 2740 0000 4572726F 		.ascii	"Error\000"
 2740      7200
 2741 0006 0000     		.align	2
 2742              	.LC9:
 2743 0008 53617665 		.ascii	"Saved\000"
 2743      6400
 2744              		.section	.text.flash_backup,"ax",%progbits
 2745              		.align	1
 2746              		.p2align 2,,3
 2747              		.global	flash_backup
 2748              		.syntax unified
 2749              		.thumb
 2750              		.thumb_func
 2751              		.fpu fpv4-sp-d16
 2753              	flash_backup:
 2754              	.LVL265:
 2755              	.LFB25:
 555:src/storage.c ****   if ( not_running() ) {
 2756              		.loc 1 555 1 view -0
 2757              		.cfi_startproc
 2758              		@ args = 0, pretend = 0, frame = 0
 2759              		@ frame_needed = 0, uses_anonymous_args = 0
 556:src/storage.c ****     process_cmdline_set_lift();
 2760              		.loc 1 556 3 view .LVU811
 555:src/storage.c ****   if ( not_running() ) {
 2761              		.loc 1 555 1 is_stmt 0 view .LVU812
 2762 0000 10B5     		push	{r4, lr}
 2763              		.cfi_def_cfa_offset 8
 2764              		.cfi_offset 4, -8
 2765              		.cfi_offset 14, -4
 556:src/storage.c ****     process_cmdline_set_lift();
 2766              		.loc 1 556 8 view .LVU813
 2767 0002 FFF7FEFF 		bl	not_running
 2768              	.LVL266:
 556:src/storage.c ****     process_cmdline_set_lift();
 2769              		.loc 1 556 6 view .LVU814
ARM GAS  /tmp/ccVDV1xv.s 			page 81


 2770 0006 00B9     		cbnz	r0, .L236
 568:src/storage.c **** 
 2771              		.loc 1 568 1 view .LVU815
 2772 0008 10BD     		pop	{r4, pc}
 2773              	.L236:
 557:src/storage.c ****     init_state();
 2774              		.loc 1 557 5 is_stmt 1 view .LVU816
 2775              	.LBB89:
 2776              	.LBB90:
 150:src/storage.c **** 			      Crc, &Crc );
 2777              		.loc 1 150 9 is_stmt 0 view .LVU817
 2778 000a 0F4C     		ldr	r4, .L238
 2779              	.LBE90:
 2780              	.LBE89:
 557:src/storage.c ****     init_state();
 2781              		.loc 1 557 5 view .LVU818
 2782 000c FFF7FEFF 		bl	process_cmdline_set_lift
 2783              	.LVL267:
 558:src/storage.c ****     checksum_all();
 2784              		.loc 1 558 5 is_stmt 1 view .LVU819
 2785 0010 FFF7FEFF 		bl	init_state
 2786              	.LVL268:
 559:src/storage.c ****     if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2787              		.loc 1 559 5 view .LVU820
 2788              	.LBB92:
 2789              	.LBI89:
 148:src/storage.c **** {
 2790              		.loc 1 148 5 view .LVU821
 2791              	.LBB91:
 150:src/storage.c **** 			      Crc, &Crc );
 2792              		.loc 1 150 2 view .LVU822
 150:src/storage.c **** 			      Crc, &Crc );
 2793              		.loc 1 150 9 is_stmt 0 view .LVU823
 2794 0014 2068     		ldr	r0, [r4]
 2795 0016 40F6FE71 		movw	r1, #4094
 2796 001a 4318     		adds	r3, r0, r1
 2797 001c B0F8FE2F 		ldrh	r2, [r0, #4094]
 2798 0020 FFF7FEFF 		bl	test_checksum
 2799              	.LVL269:
 2800              	.LBE91:
 2801              	.LBE92:
 560:src/storage.c ****       error_message( ERR_IO );
 2802              		.loc 1 560 5 is_stmt 1 view .LVU824
 560:src/storage.c ****       error_message( ERR_IO );
 2803              		.loc 1 560 10 is_stmt 0 view .LVU825
 2804 0024 094B     		ldr	r3, .L238+4
 2805 0026 2168     		ldr	r1, [r4]
 2806 0028 1868     		ldr	r0, [r3]
 2807 002a 1022     		movs	r2, #16
 2808 002c FFF7FEFF 		bl	program_flash
 2809              	.LVL270:
 560:src/storage.c ****       error_message( ERR_IO );
 2810              		.loc 1 560 8 view .LVU826
 2811 0030 18B9     		cbnz	r0, .L237
 565:src/storage.c ****     }
 2812              		.loc 1 565 7 is_stmt 1 view .LVU827
 565:src/storage.c ****     }
ARM GAS  /tmp/ccVDV1xv.s 			page 82


 2813              		.loc 1 565 15 is_stmt 0 view .LVU828
 2814 0032 074B     		ldr	r3, .L238+8
 2815 0034 074A     		ldr	r2, .L238+12
 2816 0036 1A60     		str	r2, [r3]
 568:src/storage.c **** 
 2817              		.loc 1 568 1 view .LVU829
 2818 0038 10BD     		pop	{r4, pc}
 2819              	.L237:
 561:src/storage.c ****       DispMsg = "Error";
 2820              		.loc 1 561 7 is_stmt 1 view .LVU830
 2821 003a 1120     		movs	r0, #17
 2822 003c FFF7FEFF 		bl	error_message
 2823              	.LVL271:
 562:src/storage.c ****     }
 2824              		.loc 1 562 7 view .LVU831
 562:src/storage.c ****     }
 2825              		.loc 1 562 15 is_stmt 0 view .LVU832
 2826 0040 034B     		ldr	r3, .L238+8
 2827 0042 054A     		ldr	r2, .L238+16
 2828 0044 1A60     		str	r2, [r3]
 568:src/storage.c **** 
 2829              		.loc 1 568 1 view .LVU833
 2830 0046 10BD     		pop	{r4, pc}
 2831              	.L239:
 2832              		.align	2
 2833              	.L238:
 2834 0048 00000000 		.word	main_ram
 2835 004c 00000000 		.word	backup_ram
 2836 0050 00000000 		.word	DispMsg
 2837 0054 08000000 		.word	.LC9
 2838 0058 00000000 		.word	.LC8
 2839              		.cfi_endproc
 2840              	.LFE25:
 2842              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2843              		.align	2
 2844              	.LC10:
 2845 0000 52657374 		.ascii	"Restored\000"
 2845      6F726564 
 2845      00
 2846              		.section	.text.flash_restore,"ax",%progbits
 2847              		.align	1
 2848              		.p2align 2,,3
 2849              		.global	flash_restore
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2853              		.fpu fpv4-sp-d16
 2855              	flash_restore:
 2856              	.LVL272:
 2857              	.LFB26:
 572:src/storage.c ****   if ( not_running() ) {
 2858              		.loc 1 572 1 is_stmt 1 view -0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 573:src/storage.c ****     if ( checksum_backup() ) {
 2862              		.loc 1 573 3 view .LVU835
ARM GAS  /tmp/ccVDV1xv.s 			page 83


 572:src/storage.c ****   if ( not_running() ) {
 2863              		.loc 1 572 1 is_stmt 0 view .LVU836
 2864 0000 08B5     		push	{r3, lr}
 2865              		.cfi_def_cfa_offset 8
 2866              		.cfi_offset 3, -8
 2867              		.cfi_offset 14, -4
 573:src/storage.c ****     if ( checksum_backup() ) {
 2868              		.loc 1 573 8 view .LVU837
 2869 0002 FFF7FEFF 		bl	not_running
 2870              	.LVL273:
 573:src/storage.c ****     if ( checksum_backup() ) {
 2871              		.loc 1 573 6 view .LVU838
 2872 0006 A0B1     		cbz	r0, .L240
 574:src/storage.c ****       error_message( ERR_INVALID );
 2873              		.loc 1 574 5 is_stmt 1 view .LVU839
 574:src/storage.c ****       error_message( ERR_INVALID );
 2874              		.loc 1 574 10 is_stmt 0 view .LVU840
 2875 0008 FFF7FEFF 		bl	checksum_backup
 2876              	.LVL274:
 574:src/storage.c ****       error_message( ERR_INVALID );
 2877              		.loc 1 574 8 view .LVU841
 2878 000c 20B1     		cbz	r0, .L242
 575:src/storage.c ****     }
 2879              		.loc 1 575 7 is_stmt 1 view .LVU842
 583:src/storage.c **** 
 2880              		.loc 1 583 1 is_stmt 0 view .LVU843
 2881 000e BDE80840 		pop	{r3, lr}
 2882              		.cfi_remember_state
 2883              		.cfi_restore 14
 2884              		.cfi_restore 3
 2885              		.cfi_def_cfa_offset 0
 575:src/storage.c ****     }
 2886              		.loc 1 575 7 view .LVU844
 2887 0012 1220     		movs	r0, #18
 2888 0014 FFF7FEBF 		b	error_message
 2889              	.LVL275:
 2890              	.L242:
 2891              		.cfi_restore_state
 578:src/storage.c ****       init_state();
 2892              		.loc 1 578 7 is_stmt 1 view .LVU845
 2893 0018 064B     		ldr	r3, .L247
 2894 001a 074A     		ldr	r2, .L247+4
 2895 001c 1868     		ldr	r0, [r3]
 2896 001e 1168     		ldr	r1, [r2]
 2897 0020 4FF48052 		mov	r2, #4096
 2898 0024 FFF7FEFF 		bl	xcopy
 2899              	.LVL276:
 579:src/storage.c ****       DispMsg = "Restored";
 2900              		.loc 1 579 7 view .LVU846
 2901 0028 FFF7FEFF 		bl	init_state
 2902              	.LVL277:
 580:src/storage.c ****     }
 2903              		.loc 1 580 7 view .LVU847
 580:src/storage.c ****     }
 2904              		.loc 1 580 15 is_stmt 0 view .LVU848
 2905 002c 034B     		ldr	r3, .L247+8
 2906 002e 044A     		ldr	r2, .L247+12
ARM GAS  /tmp/ccVDV1xv.s 			page 84


 2907 0030 1A60     		str	r2, [r3]
 2908              	.L240:
 583:src/storage.c **** 
 2909              		.loc 1 583 1 view .LVU849
 2910 0032 08BD     		pop	{r3, pc}
 2911              	.L248:
 2912              		.align	2
 2913              	.L247:
 2914 0034 00000000 		.word	main_ram
 2915 0038 00000000 		.word	backup_ram
 2916 003c 00000000 		.word	DispMsg
 2917 0040 00000000 		.word	.LC10
 2918              		.cfi_endproc
 2919              	.LFE26:
 2921              		.section	.text.load_program,"ax",%progbits
 2922              		.align	1
 2923              		.p2align 2,,3
 2924              		.global	load_program
 2925              		.syntax unified
 2926              		.thumb
 2927              		.thumb_func
 2928              		.fpu fpv4-sp-d16
 2930              	load_program:
 2931              	.LVL278:
 2932              	.LFB27:
 591:src/storage.c **** 	if ( not_running() ) {
 2933              		.loc 1 591 1 is_stmt 1 view -0
 2934              		.cfi_startproc
 2935              		@ args = 0, pretend = 0, frame = 0
 2936              		@ frame_needed = 0, uses_anonymous_args = 0
 592:src/storage.c **** 		if ( checksum_backup() ) {
 2937              		.loc 1 592 2 view .LVU851
 591:src/storage.c **** 	if ( not_running() ) {
 2938              		.loc 1 591 1 is_stmt 0 view .LVU852
 2939 0000 08B5     		push	{r3, lr}
 2940              		.cfi_def_cfa_offset 8
 2941              		.cfi_offset 3, -8
 2942              		.cfi_offset 14, -4
 592:src/storage.c **** 		if ( checksum_backup() ) {
 2943              		.loc 1 592 7 view .LVU853
 2944 0002 FFF7FEFF 		bl	not_running
 2945              	.LVL279:
 592:src/storage.c **** 		if ( checksum_backup() ) {
 2946              		.loc 1 592 5 view .LVU854
 2947 0006 98B1     		cbz	r0, .L249
 593:src/storage.c **** 			/*
 2948              		.loc 1 593 3 is_stmt 1 view .LVU855
 593:src/storage.c **** 			/*
 2949              		.loc 1 593 8 is_stmt 0 view .LVU856
 2950 0008 FFF7FEFF 		bl	checksum_backup
 2951              	.LVL280:
 593:src/storage.c **** 			/*
 2952              		.loc 1 593 6 view .LVU857
 2953 000c 88B9     		cbnz	r0, .L253
 600:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2954              		.loc 1 600 3 is_stmt 1 view .LVU858
 2955              	.LBB93:
ARM GAS  /tmp/ccVDV1xv.s 			page 85


 2956              	.LBI93:
 187:src/storage.c **** {
 2957              		.loc 1 187 6 view .LVU859
 2958              	.LBB94:
 189:src/storage.c **** 	stoend();
 2959              		.loc 1 189 2 view .LVU860
 2960 000e FFF7FEFF 		bl	clrretstk_pc
 2961              	.LVL281:
 190:src/storage.c **** }
 2962              		.loc 1 190 2 view .LVU861
 2963              	.LBB95:
 2964              	.LBI95:
 178:src/storage.c **** {
 2965              		.loc 1 178 13 view .LVU862
 2966              	.LBB96:
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2967              		.loc 1 180 2 view .LVU863
 2968 0012 0A4B     		ldr	r3, .L254
 2969              	.LBE96:
 2970              	.LBE95:
 2971              	.LBE94:
 2972              	.LBE93:
 601:src/storage.c **** 	}
 2973              		.loc 1 601 19 is_stmt 0 view .LVU864
 2974 0014 0A4A     		ldr	r2, .L254+4
 2975              	.LBB106:
 2976              	.LBB103:
 2977              	.LBB100:
 2978              	.LBB97:
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2979              		.loc 1 180 2 view .LVU865
 2980 0016 1B68     		ldr	r3, [r3]
 2981              	.LBE97:
 2982              	.LBE100:
 2983              	.LBE103:
 2984              	.LBE106:
 601:src/storage.c **** 	}
 2985              		.loc 1 601 19 view .LVU866
 2986 0018 1068     		ldr	r0, [r2]
 2987              	.LBB107:
 2988              	.LBB104:
 2989              	.LBB101:
 2990              	.LBB98:
 180:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2991              		.loc 1 180 11 view .LVU867
 2992 001a 0122     		movs	r2, #1
 2993 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 181:src/storage.c **** }
 2994              		.loc 1 181 2 is_stmt 1 view .LVU868
 181:src/storage.c **** }
 2995              		.loc 1 181 12 is_stmt 0 view .LVU869
 2996 001e 4FF49D72 		mov	r2, #314
 2997              	.LBE98:
 2998              	.LBE101:
 2999              	.LBE104:
 3000              	.LBE107:
 601:src/storage.c **** 	}
ARM GAS  /tmp/ccVDV1xv.s 			page 86


 3001              		.loc 1 601 3 view .LVU870
 3002 0022 4188     		ldrh	r1, [r0, #2]
 3003              	.LBB108:
 3004              	.LBB105:
 3005              	.LBB102:
 3006              	.LBB99:
 181:src/storage.c **** }
 3007              		.loc 1 181 12 view .LVU871
 3008 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 3009              	.LBE99:
 3010              	.LBE102:
 3011              	.LBE105:
 3012              	.LBE108:
 601:src/storage.c **** 	}
 3013              		.loc 1 601 3 is_stmt 1 view .LVU872
 3014 0026 0430     		adds	r0, r0, #4
 603:src/storage.c **** 
 3015              		.loc 1 603 1 is_stmt 0 view .LVU873
 3016 0028 BDE80840 		pop	{r3, lr}
 3017              		.cfi_remember_state
 3018              		.cfi_restore 14
 3019              		.cfi_restore 3
 3020              		.cfi_def_cfa_offset 0
 601:src/storage.c **** 	}
 3021              		.loc 1 601 3 view .LVU874
 3022 002c FFF7FEBF 		b	append_program
 3023              	.LVL282:
 3024              	.L249:
 3025              		.cfi_restore_state
 603:src/storage.c **** 
 3026              		.loc 1 603 1 view .LVU875
 3027 0030 08BD     		pop	{r3, pc}
 3028              	.L253:
 597:src/storage.c **** 			return;
 3029              		.loc 1 597 4 is_stmt 1 view .LVU876
 603:src/storage.c **** 
 3030              		.loc 1 603 1 is_stmt 0 view .LVU877
 3031 0032 BDE80840 		pop	{r3, lr}
 3032              		.cfi_restore 14
 3033              		.cfi_restore 3
 3034              		.cfi_def_cfa_offset 0
 597:src/storage.c **** 			return;
 3035              		.loc 1 597 4 view .LVU878
 3036 0036 1220     		movs	r0, #18
 3037 0038 FFF7FEBF 		b	report_err
 3038              	.LVL283:
 3039              	.L255:
 3040              		.align	2
 3041              	.L254:
 3042 003c 00000000 		.word	main_ram
 3043 0040 00000000 		.word	backup_ram
 3044              		.cfi_endproc
 3045              	.LFE27:
 3047              		.section	.text.load_registers,"ax",%progbits
 3048              		.align	1
 3049              		.p2align 2,,3
 3050              		.global	load_registers
ARM GAS  /tmp/ccVDV1xv.s 			page 87


 3051              		.syntax unified
 3052              		.thumb
 3053              		.thumb_func
 3054              		.fpu fpv4-sp-d16
 3056              	load_registers:
 3057              	.LVL284:
 3058              	.LFB28:
 610:src/storage.c **** 	int count;
 3059              		.loc 1 610 1 is_stmt 1 view -0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 0
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/storage.c **** 	if ( checksum_backup() ) {
 3063              		.loc 1 611 2 view .LVU880
 612:src/storage.c **** 		/*
 3064              		.loc 1 612 2 view .LVU881
 610:src/storage.c **** 	int count;
 3065              		.loc 1 610 1 is_stmt 0 view .LVU882
 3066 0000 38B5     		push	{r3, r4, r5, lr}
 3067              		.cfi_def_cfa_offset 16
 3068              		.cfi_offset 3, -16
 3069              		.cfi_offset 4, -12
 3070              		.cfi_offset 5, -8
 3071              		.cfi_offset 14, -4
 612:src/storage.c **** 		/*
 3072              		.loc 1 612 7 view .LVU883
 3073 0002 FFF7FEFF 		bl	checksum_backup
 3074              	.LVL285:
 612:src/storage.c **** 		/*
 3075              		.loc 1 612 5 view .LVU884
 3076 0006 E0B9     		cbnz	r0, .L263
 619:src/storage.c **** 	if ( is_dblmode() ) {
 3077              		.loc 1 619 2 is_stmt 1 view .LVU885
 619:src/storage.c **** 	if ( is_dblmode() ) {
 3078              		.loc 1 619 10 is_stmt 0 view .LVU886
 3079 0008 104B     		ldr	r3, .L264
 3080 000a 1B68     		ldr	r3, [r3]
 619:src/storage.c **** 	if ( is_dblmode() ) {
 3081              		.loc 1 619 8 view .LVU887
 3082 000c 93F8CF4F 		ldrb	r4, [r3, #4047]	@ zero_extendqisi2
 3083              	.LVL286:
 620:src/storage.c **** 		// Don't clobber the stack in DP mode
 3084              		.loc 1 620 2 is_stmt 1 view .LVU888
 620:src/storage.c **** 		// Don't clobber the stack in DP mode
 3085              		.loc 1 620 7 is_stmt 0 view .LVU889
 3086 0010 FFF7FEFF 		bl	is_dblmode
 3087              	.LVL287:
 620:src/storage.c **** 		// Don't clobber the stack in DP mode
 3088              		.loc 1 620 5 view .LVU890
 3089 0014 00B1     		cbz	r0, .L258
 622:src/storage.c **** 	}
 3090              		.loc 1 622 3 is_stmt 1 view .LVU891
 622:src/storage.c **** 	}
 3091              		.loc 1 622 9 is_stmt 0 view .LVU892
 3092 0016 0C3C     		subs	r4, r4, #12
 3093              	.LVL288:
 3094              	.L258:
ARM GAS  /tmp/ccVDV1xv.s 			page 88


 624:src/storage.c **** 		count = BackupFlash._numregs;
 3095              		.loc 1 624 2 is_stmt 1 view .LVU893
 624:src/storage.c **** 		count = BackupFlash._numregs;
 3096              		.loc 1 624 26 is_stmt 0 view .LVU894
 3097 0018 0D4B     		ldr	r3, .L264+4
 3098 001a 1B68     		ldr	r3, [r3]
 3099 001c 93F8CF5F 		ldrb	r5, [r3, #4047]	@ zero_extendqisi2
 627:src/storage.c **** }
 3100              		.loc 1 627 9 view .LVU895
 3101 0020 0020     		movs	r0, #0
 3102 0022 A542     		cmp	r5, r4
 3103 0024 A8BF     		it	ge
 3104 0026 2546     		movge	r5, r4
 3105              	.LVL289:
 627:src/storage.c **** }
 3106              		.loc 1 627 2 is_stmt 1 view .LVU896
 627:src/storage.c **** }
 3107              		.loc 1 627 9 is_stmt 0 view .LVU897
 3108 0028 FFF7FEFF 		bl	get_reg_n
 3109              	.LVL290:
 3110 002c 0446     		mov	r4, r0
 627:src/storage.c **** }
 3111              		.loc 1 627 23 view .LVU898
 3112 002e 0020     		movs	r0, #0
 3113 0030 FFF7FEFF 		bl	get_flash_reg_n
 3114              	.LVL291:
 627:src/storage.c **** }
 3115              		.loc 1 627 2 view .LVU899
 3116 0034 EA00     		lsls	r2, r5, #3
 627:src/storage.c **** }
 3117              		.loc 1 627 23 view .LVU900
 3118 0036 0146     		mov	r1, r0
 627:src/storage.c **** }
 3119              		.loc 1 627 2 view .LVU901
 3120 0038 2046     		mov	r0, r4
 628:src/storage.c **** 
 3121              		.loc 1 628 1 view .LVU902
 3122 003a BDE83840 		pop	{r3, r4, r5, lr}
 3123              		.cfi_remember_state
 3124              		.cfi_restore 14
 3125              		.cfi_restore 5
 3126              		.cfi_restore 4
 3127              		.cfi_restore 3
 3128              		.cfi_def_cfa_offset 0
 3129              	.LVL292:
 627:src/storage.c **** }
 3130              		.loc 1 627 2 view .LVU903
 3131 003e FFF7FEBF 		b	xcopy
 3132              	.LVL293:
 3133              	.L263:
 3134              		.cfi_restore_state
 616:src/storage.c **** 		return;
 3135              		.loc 1 616 3 is_stmt 1 view .LVU904
 628:src/storage.c **** 
 3136              		.loc 1 628 1 is_stmt 0 view .LVU905
 3137 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3138              		.cfi_restore 14
ARM GAS  /tmp/ccVDV1xv.s 			page 89


 3139              		.cfi_restore 5
 3140              		.cfi_restore 4
 3141              		.cfi_restore 3
 3142              		.cfi_def_cfa_offset 0
 616:src/storage.c **** 		return;
 3143              		.loc 1 616 3 view .LVU906
 3144 0046 1220     		movs	r0, #18
 3145 0048 FFF7FEBF 		b	report_err
 3146              	.LVL294:
 3147              	.L265:
 3148              		.align	2
 3149              	.L264:
 3150 004c 00000000 		.word	main_ram
 3151 0050 00000000 		.word	backup_ram
 3152              		.cfi_endproc
 3153              	.LFE28:
 3155              		.section	.text.load_sigma,"ax",%progbits
 3156              		.align	1
 3157              		.p2align 2,,3
 3158              		.global	load_sigma
 3159              		.syntax unified
 3160              		.thumb
 3161              		.thumb_func
 3162              		.fpu fpv4-sp-d16
 3164              	load_sigma:
 3165              	.LVL295:
 3166              	.LFB29:
 635:src/storage.c **** 	if ( checksum_backup() ) {
 3167              		.loc 1 635 1 is_stmt 1 view -0
 3168              		.cfi_startproc
 3169              		@ args = 0, pretend = 0, frame = 0
 3170              		@ frame_needed = 0, uses_anonymous_args = 0
 636:src/storage.c **** 		/*
 3171              		.loc 1 636 2 view .LVU908
 635:src/storage.c **** 	if ( checksum_backup() ) {
 3172              		.loc 1 635 1 is_stmt 0 view .LVU909
 3173 0000 08B5     		push	{r3, lr}
 3174              		.cfi_def_cfa_offset 8
 3175              		.cfi_offset 3, -8
 3176              		.cfi_offset 14, -4
 636:src/storage.c **** 		/*
 3177              		.loc 1 636 7 view .LVU910
 3178 0002 FFF7FEFF 		bl	checksum_backup
 3179              	.LVL296:
 636:src/storage.c **** 		/*
 3180              		.loc 1 636 5 view .LVU911
 3181 0006 B0B9     		cbnz	r0, .L270
 643:src/storage.c **** 		/*
 3182              		.loc 1 643 2 is_stmt 1 view .LVU912
 643:src/storage.c **** 		/*
 3183              		.loc 1 643 9 is_stmt 0 view .LVU913
 3184 0008 0D4B     		ldr	r3, .L272
 3185 000a 1868     		ldr	r0, [r3]
 643:src/storage.c **** 		/*
 3186              		.loc 1 643 7 view .LVU914
 3187 000c 90F8DD3F 		ldrb	r3, [r0, #4061]	@ zero_extendqisi2
 643:src/storage.c **** 		/*
ARM GAS  /tmp/ccVDV1xv.s 			page 90


 3188              		.loc 1 643 5 view .LVU915
 3189 0010 9B06     		lsls	r3, r3, #26
 3190 0012 0BD5     		bpl	.L271
 650:src/storage.c **** }
 3191              		.loc 1 650 2 is_stmt 1 view .LVU916
 650:src/storage.c **** }
 3192              		.loc 1 650 56 is_stmt 0 view .LVU917
 3193 0014 90F8CF3F 		ldrb	r3, [r0, #4047]	@ zero_extendqisi2
 3194 0018 C3F16403 		rsb	r3, r3, #100
 650:src/storage.c **** }
 3195              		.loc 1 650 81 view .LVU918
 3196 001c 00EBC300 		add	r0, r0, r3, lsl #3
 650:src/storage.c **** }
 3197              		.loc 1 650 2 view .LVU919
 3198 0020 00F6A430 		addw	r0, r0, #2980
 651:src/storage.c **** 
 3199              		.loc 1 651 1 view .LVU920
 3200 0024 BDE80840 		pop	{r3, lr}
 3201              		.cfi_remember_state
 3202              		.cfi_restore 14
 3203              		.cfi_restore 3
 3204              		.cfi_def_cfa_offset 0
 650:src/storage.c **** }
 3205              		.loc 1 650 2 view .LVU921
 3206 0028 FFF7FEBF 		b	sigmaCopy
 3207              	.LVL297:
 3208              	.L271:
 3209              		.cfi_restore_state
 647:src/storage.c **** 		return;
 3210              		.loc 1 647 3 is_stmt 1 view .LVU922
 651:src/storage.c **** 
 3211              		.loc 1 651 1 is_stmt 0 view .LVU923
 3212 002c BDE80840 		pop	{r3, lr}
 3213              		.cfi_remember_state
 3214              		.cfi_restore 14
 3215              		.cfi_restore 3
 3216              		.cfi_def_cfa_offset 0
 647:src/storage.c **** 		return;
 3217              		.loc 1 647 3 view .LVU924
 3218 0030 0F20     		movs	r0, #15
 3219 0032 FFF7FEBF 		b	report_err
 3220              	.LVL298:
 3221              	.L270:
 3222              		.cfi_restore_state
 640:src/storage.c **** 		return;
 3223              		.loc 1 640 3 is_stmt 1 view .LVU925
 651:src/storage.c **** 
 3224              		.loc 1 651 1 is_stmt 0 view .LVU926
 3225 0036 BDE80840 		pop	{r3, lr}
 3226              		.cfi_restore 14
 3227              		.cfi_restore 3
 3228              		.cfi_def_cfa_offset 0
 640:src/storage.c **** 		return;
 3229              		.loc 1 640 3 view .LVU927
 3230 003a 1220     		movs	r0, #18
 3231 003c FFF7FEBF 		b	report_err
 3232              	.LVL299:
ARM GAS  /tmp/ccVDV1xv.s 			page 91


 3233              	.L273:
 3234              		.align	2
 3235              	.L272:
 3236 0040 00000000 		.word	backup_ram
 3237              		.cfi_endproc
 3238              	.LFE29:
 3240              		.section	.text.load_state,"ax",%progbits
 3241              		.align	1
 3242              		.p2align 2,,3
 3243              		.global	load_state
 3244              		.syntax unified
 3245              		.thumb
 3246              		.thumb_func
 3247              		.fpu fpv4-sp-d16
 3249              	load_state:
 3250              	.LVL300:
 3251              	.LFB30:
 658:src/storage.c **** 	if ( not_running() ) {
 3252              		.loc 1 658 1 is_stmt 1 view -0
 3253              		.cfi_startproc
 3254              		@ args = 0, pretend = 0, frame = 0
 3255              		@ frame_needed = 0, uses_anonymous_args = 0
 659:src/storage.c **** 		if ( checksum_backup() ) {
 3256              		.loc 1 659 2 view .LVU929
 658:src/storage.c **** 	if ( not_running() ) {
 3257              		.loc 1 658 1 is_stmt 0 view .LVU930
 3258 0000 08B5     		push	{r3, lr}
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 3, -8
 3261              		.cfi_offset 14, -4
 659:src/storage.c **** 		if ( checksum_backup() ) {
 3262              		.loc 1 659 7 view .LVU931
 3263 0002 FFF7FEFF 		bl	not_running
 3264              	.LVL301:
 659:src/storage.c **** 		if ( checksum_backup() ) {
 3265              		.loc 1 659 5 view .LVU932
 3266 0006 98B1     		cbz	r0, .L274
 660:src/storage.c **** 			/*
 3267              		.loc 1 660 3 is_stmt 1 view .LVU933
 660:src/storage.c **** 			/*
 3268              		.loc 1 660 8 is_stmt 0 view .LVU934
 3269 0008 FFF7FEFF 		bl	checksum_backup
 3270              	.LVL302:
 660:src/storage.c **** 			/*
 3271              		.loc 1 660 6 view .LVU935
 3272 000c 88B9     		cbnz	r0, .L278
 667:src/storage.c **** 		init_state();
 3273              		.loc 1 667 3 is_stmt 1 view .LVU936
 667:src/storage.c **** 		init_state();
 3274              		.loc 1 667 11 is_stmt 0 view .LVU937
 3275 000e 0B4B     		ldr	r3, .L279
 667:src/storage.c **** 		init_state();
 3276              		.loc 1 667 20 view .LVU938
 3277 0010 0B4A     		ldr	r2, .L279+4
 667:src/storage.c **** 		init_state();
 3278              		.loc 1 667 10 view .LVU939
 3279 0012 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccVDV1xv.s 			page 92


 667:src/storage.c **** 		init_state();
 3280              		.loc 1 667 19 view .LVU940
 3281 0014 1168     		ldr	r1, [r2]
 667:src/storage.c **** 		init_state();
 3282              		.loc 1 667 3 view .LVU941
 3283 0016 00F57D60 		add	r0, r0, #4048
 3284 001a 01F57D61 		add	r1, r1, #4048
 3285 001e 2E22     		movs	r2, #46
 3286 0020 FFF7FEFF 		bl	xcopy
 3287              	.LVL303:
 668:src/storage.c **** 		clrretstk_pc();
 3288              		.loc 1 668 3 is_stmt 1 view .LVU942
 3289 0024 FFF7FEFF 		bl	init_state
 3290              	.LVL304:
 669:src/storage.c **** 	}
 3291              		.loc 1 669 3 view .LVU943
 671:src/storage.c **** 
 3292              		.loc 1 671 1 is_stmt 0 view .LVU944
 3293 0028 BDE80840 		pop	{r3, lr}
 3294              		.cfi_remember_state
 3295              		.cfi_restore 14
 3296              		.cfi_restore 3
 3297              		.cfi_def_cfa_offset 0
 669:src/storage.c **** 	}
 3298              		.loc 1 669 3 view .LVU945
 3299 002c FFF7FEBF 		b	clrretstk_pc
 3300              	.LVL305:
 3301              	.L274:
 3302              		.cfi_restore_state
 671:src/storage.c **** 
 3303              		.loc 1 671 1 view .LVU946
 3304 0030 08BD     		pop	{r3, pc}
 3305              	.L278:
 664:src/storage.c **** 			return;
 3306              		.loc 1 664 4 is_stmt 1 view .LVU947
 671:src/storage.c **** 
 3307              		.loc 1 671 1 is_stmt 0 view .LVU948
 3308 0032 BDE80840 		pop	{r3, lr}
 3309              		.cfi_restore 14
 3310              		.cfi_restore 3
 3311              		.cfi_def_cfa_offset 0
 664:src/storage.c **** 			return;
 3312              		.loc 1 664 4 view .LVU949
 3313 0036 1220     		movs	r0, #18
 3314 0038 FFF7FEBF 		b	report_err
 3315              	.LVL306:
 3316              	.L280:
 3317              		.align	2
 3318              	.L279:
 3319 003c 00000000 		.word	main_ram
 3320 0040 00000000 		.word	backup_ram
 3321              		.cfi_endproc
 3322              	.LFE30:
 3324              		.section	.text.store_program,"ax",%progbits
 3325              		.align	1
 3326              		.p2align 2,,3
 3327              		.global	store_program
ARM GAS  /tmp/ccVDV1xv.s 			page 93


 3328              		.syntax unified
 3329              		.thumb
 3330              		.thumb_func
 3331              		.fpu fpv4-sp-d16
 3333              	store_program:
 3334              	.LVL307:
 3335              	.LFB31:
 678:src/storage.c **** 	opcode lbl; 
 3336              		.loc 1 678 1 is_stmt 1 view -0
 3337              		.cfi_startproc
 3338              		@ args = 0, pretend = 0, frame = 0
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 679:src/storage.c **** 	unsigned int pc;
 3340              		.loc 1 679 2 view .LVU951
 680:src/storage.c **** 	int space_needed, count, free;
 3341              		.loc 1 680 2 view .LVU952
 681:src/storage.c **** 
 3342              		.loc 1 681 2 view .LVU953
 683:src/storage.c **** 		/*
 3343              		.loc 1 683 2 view .LVU954
 678:src/storage.c **** 	opcode lbl; 
 3344              		.loc 1 678 1 is_stmt 0 view .LVU955
 3345 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3346              		.cfi_def_cfa_offset 24
 3347              		.cfi_offset 4, -24
 3348              		.cfi_offset 5, -20
 3349              		.cfi_offset 6, -16
 3350              		.cfi_offset 7, -12
 3351              		.cfi_offset 8, -8
 3352              		.cfi_offset 14, -4
 683:src/storage.c **** 		/*
 3353              		.loc 1 683 7 view .LVU956
 3354 0004 FFF7FEFF 		bl	not_running
 3355              	.LVL308:
 683:src/storage.c **** 		/*
 3356              		.loc 1 683 5 view .LVU957
 3357 0008 0028     		cmp	r0, #0
 3358 000a 3BD0     		beq	.L281
 687:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3359              		.loc 1 687 3 is_stmt 1 view .LVU958
 3360              	.LVL309:
 688:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3361              		.loc 1 688 3 view .LVU959
 687:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3362              		.loc 1 687 8 is_stmt 0 view .LVU960
 3363 000c 314C     		ldr	r4, .L295
 3364              	.LVL310:
 687:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3365              		.loc 1 687 8 view .LVU961
 3366 000e 2368     		ldr	r3, [r4]
 3367 0010 B3F8E03F 		ldrh	r3, [r3, #4064]
 688:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3368              		.loc 1 688 6 view .LVU962
 3369 0014 5B04     		lsls	r3, r3, #17
 3370 0016 37D4     		bmi	.L291
 695:src/storage.c **** 		lbl = getprog( ProgBegin );
 3371              		.loc 1 695 3 is_stmt 1 view .LVU963
ARM GAS  /tmp/ccVDV1xv.s 			page 94


 3372 0018 0120     		movs	r0, #1
 3373 001a FFF7FEFF 		bl	update_program_bounds
 3374              	.LVL311:
 696:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3375              		.loc 1 696 3 view .LVU964
 696:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3376              		.loc 1 696 18 is_stmt 0 view .LVU965
 3377 001e 2368     		ldr	r3, [r4]
 696:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3378              		.loc 1 696 9 view .LVU966
 3379 0020 B3F8EC0F 		ldrh	r0, [r3, #4076]
 3380 0024 FFF7FEFF 		bl	getprog
 3381              	.LVL312:
 697:src/storage.c **** 			report_err( ERR_NO_LBL );
 3382              		.loc 1 697 3 is_stmt 1 view .LVU967
 697:src/storage.c **** 			report_err( ERR_NO_LBL );
 3383              		.loc 1 697 9 is_stmt 0 view .LVU968
 3384 0028 00F47043 		and	r3, r0, #61440
 697:src/storage.c **** 			report_err( ERR_NO_LBL );
 3385              		.loc 1 697 6 view .LVU969
 3386 002c B3F5704F 		cmp	r3, #61440
 3387 0030 2FD1     		bne	.L284
 697:src/storage.c **** 			report_err( ERR_NO_LBL );
 3388              		.loc 1 697 20 discriminator 1 view .LVU970
 3389 0032 10F4706F 		tst	r0, #3840
 697:src/storage.c **** 			report_err( ERR_NO_LBL );
 3390              		.loc 1 697 23 discriminator 1 view .LVU971
 3391 0036 C0F30322 		ubfx	r2, r0, #8, #4
 697:src/storage.c **** 			report_err( ERR_NO_LBL );
 3392              		.loc 1 697 20 discriminator 1 view .LVU972
 3393 003a 2AD1     		bne	.L284
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3394              		.loc 1 704 3 is_stmt 1 view .LVU973
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3395              		.loc 1 704 30 is_stmt 0 view .LVU974
 3396 003c 2368     		ldr	r3, [r4]
 705:src/storage.c **** 
 3397              		.loc 1 705 39 view .LVU975
 3398 003e 264E     		ldr	r6, .L295+4
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3399              		.loc 1 704 30 view .LVU976
 3400 0040 B3F8EE5F 		ldrh	r5, [r3, #4078]
 705:src/storage.c **** 
 3401              		.loc 1 705 39 view .LVU977
 3402 0044 3168     		ldr	r1, [r6]
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3403              		.loc 1 704 40 view .LVU978
 3404 0046 B3F8EC3F 		ldrh	r3, [r3, #4076]
 705:src/storage.c **** 
 3405              		.loc 1 705 39 view .LVU979
 3406 004a 4F88     		ldrh	r7, [r1, #2]
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3407              		.loc 1 704 28 view .LVU980
 3408 004c 0135     		adds	r5, r5, #1
 710:src/storage.c **** 		if ( pc != 0 ) {
 3409              		.loc 1 710 8 view .LVU981
 3410 004e 0146     		mov	r1, r0
ARM GAS  /tmp/ccVDV1xv.s 			page 95


 3411 0050 4FF48040 		mov	r0, #16384
 3412              	.LVL313:
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3413              		.loc 1 704 24 view .LVU982
 3414 0054 ED1A     		subs	r5, r5, r3
 3415              	.LVL314:
 705:src/storage.c **** 
 3416              		.loc 1 705 3 is_stmt 1 view .LVU983
 710:src/storage.c **** 		if ( pc != 0 ) {
 3417              		.loc 1 710 8 is_stmt 0 view .LVU984
 3418 0056 FFF7FEFF 		bl	find_opcode_from
 3419              	.LVL315:
 705:src/storage.c **** 
 3420              		.loc 1 705 8 view .LVU985
 3421 005a C7F5FF57 		rsb	r7, r7, #8160
 3422 005e 1E37     		adds	r7, r7, #30
 3423              	.LVL316:
 710:src/storage.c **** 		if ( pc != 0 ) {
 3424              		.loc 1 710 3 is_stmt 1 view .LVU986
 711:src/storage.c **** 			/*
 3425              		.loc 1 711 3 view .LVU987
 711:src/storage.c **** 			/*
 3426              		.loc 1 711 6 is_stmt 0 view .LVU988
 3427 0060 08BB     		cbnz	r0, .L292
 704:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3428              		.loc 1 704 24 view .LVU989
 3429 0062 2C46     		mov	r4, r5
 3430              	.LVL317:
 3431              	.L286:
 723:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3432              		.loc 1 723 3 is_stmt 1 view .LVU990
 723:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3433              		.loc 1 723 6 is_stmt 0 view .LVU991
 3434 0064 BC42     		cmp	r4, r7
 3435 0066 19DC     		bgt	.L293
 728:src/storage.c **** 	}
 3436              		.loc 1 728 3 is_stmt 1 view .LVU992
 728:src/storage.c **** 	}
 3437              		.loc 1 728 26 is_stmt 0 view .LVU993
 3438 0068 3368     		ldr	r3, [r6]
 728:src/storage.c **** 	}
 3439              		.loc 1 728 3 view .LVU994
 3440 006a 5C88     		ldrh	r4, [r3, #2]
 3441              	.LVL318:
 728:src/storage.c **** 	}
 3442              		.loc 1 728 3 view .LVU995
 3443 006c FFF7FEFF 		bl	get_current_prog
 3444              	.LVL319:
 728:src/storage.c **** 	}
 3445              		.loc 1 728 69 view .LVU996
 3446 0070 3368     		ldr	r3, [r6]
 3447 0072 5B88     		ldrh	r3, [r3, #2]
 728:src/storage.c **** 	}
 3448              		.loc 1 728 3 view .LVU997
 3449 0074 0146     		mov	r1, r0
 3450 0076 2B44     		add	r3, r3, r5
 3451 0078 2046     		mov	r0, r4
ARM GAS  /tmp/ccVDV1xv.s 			page 96


 3452 007a 2A46     		mov	r2, r5
 730:src/storage.c **** 
 3453              		.loc 1 730 1 view .LVU998
 3454 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3455              		.cfi_remember_state
 3456              		.cfi_restore 14
 3457              		.cfi_restore 8
 3458              		.cfi_restore 7
 3459              		.cfi_restore 6
 3460              		.cfi_restore 5
 3461              		.cfi_restore 4
 3462              		.cfi_def_cfa_offset 0
 3463              	.LVL320:
 728:src/storage.c **** 	}
 3464              		.loc 1 728 3 view .LVU999
 3465 0080 FFF7FEBF 		b	flash_append
 3466              	.LVL321:
 3467              	.L281:
 3468              		.cfi_restore_state
 730:src/storage.c **** 
 3469              		.loc 1 730 1 view .LVU1000
 3470 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3471              	.LVL322:
 3472              	.L291:
 689:src/storage.c **** 			return;
 3473              		.loc 1 689 4 is_stmt 1 view .LVU1001
 730:src/storage.c **** 
 3474              		.loc 1 730 1 is_stmt 0 view .LVU1002
 3475 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3476              		.cfi_remember_state
 3477              		.cfi_restore 14
 3478              		.cfi_restore 8
 3479              		.cfi_restore 7
 3480              		.cfi_restore 6
 3481              		.cfi_restore 5
 3482              		.cfi_restore 4
 3483              		.cfi_def_cfa_offset 0
 3484              	.LVL323:
 689:src/storage.c **** 			return;
 3485              		.loc 1 689 4 view .LVU1003
 3486 008c 0720     		movs	r0, #7
 3487 008e FFF7FEBF 		b	report_err
 3488              	.LVL324:
 3489              	.L284:
 3490              		.cfi_restore_state
 698:src/storage.c **** 			return;
 3491              		.loc 1 698 4 is_stmt 1 view .LVU1004
 730:src/storage.c **** 
 3492              		.loc 1 730 1 is_stmt 0 view .LVU1005
 3493 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3494              		.cfi_remember_state
 3495              		.cfi_restore 14
 3496              		.cfi_restore 8
 3497              		.cfi_restore 7
 3498              		.cfi_restore 6
 3499              		.cfi_restore 5
 3500              		.cfi_restore 4
ARM GAS  /tmp/ccVDV1xv.s 			page 97


 3501              		.cfi_def_cfa_offset 0
 698:src/storage.c **** 			return;
 3502              		.loc 1 698 4 view .LVU1006
 3503 0096 0620     		movs	r0, #6
 3504              	.LVL325:
 698:src/storage.c **** 			return;
 3505              		.loc 1 698 4 view .LVU1007
 3506 0098 FFF7FEBF 		b	report_err
 3507              	.LVL326:
 3508              	.L293:
 3509              		.cfi_restore_state
 724:src/storage.c **** 			return;
 3510              		.loc 1 724 4 is_stmt 1 view .LVU1008
 730:src/storage.c **** 
 3511              		.loc 1 730 1 is_stmt 0 view .LVU1009
 3512 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3513              		.cfi_remember_state
 3514              		.cfi_restore 14
 3515              		.cfi_restore 8
 3516              		.cfi_restore 7
 3517              		.cfi_restore 6
 3518              		.cfi_restore 5
 3519              		.cfi_restore 4
 3520              		.cfi_def_cfa_offset 0
 3521              	.LVL327:
 724:src/storage.c **** 			return;
 3522              		.loc 1 724 4 view .LVU1010
 3523 00a0 1720     		movs	r0, #23
 3524 00a2 FFF7FEBF 		b	report_err
 3525              	.LVL328:
 3526              	.L292:
 3527              		.cfi_restore_state
 3528              	.LBB109:
 715:src/storage.c **** 			set_pc( pc );
 3529              		.loc 1 715 4 is_stmt 1 view .LVU1011
 715:src/storage.c **** 			set_pc( pc );
 3530              		.loc 1 715 26 is_stmt 0 view .LVU1012
 3531 00a6 2368     		ldr	r3, [r4]
 715:src/storage.c **** 			set_pc( pc );
 3532              		.loc 1 715 17 view .LVU1013
 3533 00a8 B3F8E08F 		ldrh	r8, [r3, #4064]
 3534              	.LVL329:
 716:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3535              		.loc 1 716 4 is_stmt 1 view .LVU1014
 3536 00ac FFF7FEFF 		bl	set_pc
 3537              	.LVL330:
 717:src/storage.c **** 			if ( space_needed <= free ) {
 3538              		.loc 1 717 4 view .LVU1015
 717:src/storage.c **** 			if ( space_needed <= free ) {
 3539              		.loc 1 717 24 is_stmt 0 view .LVU1016
 3540 00b0 2368     		ldr	r3, [r4]
 3541 00b2 B3F8EE4F 		ldrh	r4, [r3, #4078]
 717:src/storage.c **** 			if ( space_needed <= free ) {
 3542              		.loc 1 717 34 view .LVU1017
 3543 00b6 B3F8EC3F 		ldrh	r3, [r3, #4076]
 717:src/storage.c **** 			if ( space_needed <= free ) {
 3544              		.loc 1 717 22 view .LVU1018
ARM GAS  /tmp/ccVDV1xv.s 			page 98


 3545 00ba 0134     		adds	r4, r4, #1
 717:src/storage.c **** 			if ( space_needed <= free ) {
 3546              		.loc 1 717 32 view .LVU1019
 3547 00bc E41A     		subs	r4, r4, r3
 717:src/storage.c **** 			if ( space_needed <= free ) {
 3548              		.loc 1 717 17 view .LVU1020
 3549 00be 2C1B     		subs	r4, r5, r4
 3550              	.LVL331:
 718:src/storage.c **** 				clrprog();
 3551              		.loc 1 718 4 is_stmt 1 view .LVU1021
 718:src/storage.c **** 				clrprog();
 3552              		.loc 1 718 7 is_stmt 0 view .LVU1022
 3553 00c0 A742     		cmp	r7, r4
 3554 00c2 03DA     		bge	.L294
 3555              	.L287:
 721:src/storage.c **** 		}
 3556              		.loc 1 721 4 is_stmt 1 view .LVU1023
 3557 00c4 4046     		mov	r0, r8
 3558 00c6 FFF7FEFF 		bl	set_pc
 3559              	.LVL332:
 3560 00ca CBE7     		b	.L286
 3561              	.L294:
 719:src/storage.c **** 			}
 3562              		.loc 1 719 5 view .LVU1024
 3563 00cc FFF7FEFF 		bl	clrprog
 3564              	.LVL333:
 3565 00d0 F8E7     		b	.L287
 3566              	.L296:
 3567 00d2 00BF     		.align	2
 3568              	.L295:
 3569 00d4 00000000 		.word	main_ram
 3570 00d8 00000000 		.word	library_ram
 3571              	.LBE109:
 3572              		.cfi_endproc
 3573              	.LFE31:
 3575              		.section	.text.recall_program,"ax",%progbits
 3576              		.align	1
 3577              		.p2align 2,,3
 3578              		.global	recall_program
 3579              		.syntax unified
 3580              		.thumb
 3581              		.thumb_func
 3582              		.fpu fpv4-sp-d16
 3584              	recall_program:
 3585              	.LVL334:
 3586              	.LFB32:
 737:src/storage.c **** 	if ( not_running() ) {
 3587              		.loc 1 737 1 view -0
 3588              		.cfi_startproc
 3589              		@ args = 0, pretend = 0, frame = 0
 3590              		@ frame_needed = 0, uses_anonymous_args = 0
 738:src/storage.c **** 		if ( state_pc() == 0 ) {
 3591              		.loc 1 738 2 view .LVU1026
 737:src/storage.c **** 	if ( not_running() ) {
 3592              		.loc 1 737 1 is_stmt 0 view .LVU1027
 3593 0000 10B5     		push	{r4, lr}
 3594              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccVDV1xv.s 			page 99


 3595              		.cfi_offset 4, -8
 3596              		.cfi_offset 14, -4
 738:src/storage.c **** 		if ( state_pc() == 0 ) {
 3597              		.loc 1 738 7 view .LVU1028
 3598 0002 FFF7FEFF 		bl	not_running
 3599              	.LVL335:
 738:src/storage.c **** 		if ( state_pc() == 0 ) {
 3600              		.loc 1 738 5 view .LVU1029
 3601 0006 B8B1     		cbz	r0, .L297
 739:src/storage.c **** 			State.pc = 1;
 3602              		.loc 1 739 3 is_stmt 1 view .LVU1030
 739:src/storage.c **** 			State.pc = 1;
 3603              		.loc 1 739 8 is_stmt 0 view .LVU1031
 3604 0008 0C4C     		ldr	r4, .L301
 3605 000a 2368     		ldr	r3, [r4]
 739:src/storage.c **** 			State.pc = 1;
 3606              		.loc 1 739 6 view .LVU1032
 3607 000c B3F8E02F 		ldrh	r2, [r3, #4064]
 3608 0010 12B9     		cbnz	r2, .L299
 740:src/storage.c **** 		}
 3609              		.loc 1 740 4 is_stmt 1 view .LVU1033
 740:src/storage.c **** 		}
 3610              		.loc 1 740 13 is_stmt 0 view .LVU1034
 3611 0012 0122     		movs	r2, #1
 3612 0014 A3F8E02F 		strh	r2, [r3, #4064]	@ movhi
 3613              	.L299:
 742:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3614              		.loc 1 742 3 is_stmt 1 view .LVU1035
 3615 0018 0120     		movs	r0, #1
 3616 001a FFF7FEFF 		bl	update_program_bounds
 3617              	.LVL336:
 743:src/storage.c **** 	}
 3618              		.loc 1 743 3 view .LVU1036
 3619 001e FFF7FEFF 		bl	get_current_prog
 3620              	.LVL337:
 743:src/storage.c **** 	}
 3621              		.loc 1 743 39 is_stmt 0 view .LVU1037
 3622 0022 2368     		ldr	r3, [r4]
 3623 0024 B3F8EE1F 		ldrh	r1, [r3, #4078]
 743:src/storage.c **** 	}
 3624              		.loc 1 743 49 view .LVU1038
 3625 0028 B3F8EC3F 		ldrh	r3, [r3, #4076]
 743:src/storage.c **** 	}
 3626              		.loc 1 743 47 view .LVU1039
 3627 002c C91A     		subs	r1, r1, r3
 745:src/storage.c **** 
 3628              		.loc 1 745 1 view .LVU1040
 3629 002e BDE81040 		pop	{r4, lr}
 3630              		.cfi_remember_state
 3631              		.cfi_restore 14
 3632              		.cfi_restore 4
 3633              		.cfi_def_cfa_offset 0
 743:src/storage.c **** 	}
 3634              		.loc 1 743 3 view .LVU1041
 3635 0032 0131     		adds	r1, r1, #1
 3636 0034 FFF7FEBF 		b	append_program
 3637              	.LVL338:
ARM GAS  /tmp/ccVDV1xv.s 			page 100


 3638              	.L297:
 3639              		.cfi_restore_state
 745:src/storage.c **** 
 3640              		.loc 1 745 1 view .LVU1042
 3641 0038 10BD     		pop	{r4, pc}
 3642              	.L302:
 3643 003a 00BF     		.align	2
 3644              	.L301:
 3645 003c 00000000 		.word	main_ram
 3646              		.cfi_endproc
 3647              	.LFE32:
 3649              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3650              		.align	2
 3651              	.LC11:
 3652 0000 2E6C6962 		.ascii	".lib\000"
 3652      00
 3653 0005 000000   		.align	2
 3654              	.LC12:
 3655 0008 53617665 		.ascii	"Save Library File\000"
 3655      204C6962 
 3655      72617279 
 3655      2046696C 
 3655      6500
 3656 001a 0000     		.align	2
 3657              	.LC13:
 3658 001c 4652206E 		.ascii	"FR not ok\000"
 3658      6F74206F 
 3658      6B00
 3659              		.section	.text.save_lib_file,"ax",%progbits
 3660              		.align	1
 3661              		.p2align 2,,3
 3662              		.global	save_lib_file
 3663              		.syntax unified
 3664              		.thumb
 3665              		.thumb_func
 3666              		.fpu fpv4-sp-d16
 3668              	save_lib_file:
 3669              	.LVL339:
 3670              	.LFB33:
 761:src/storage.c ****   FRESULT f;
 3671              		.loc 1 761 30 is_stmt 1 view -0
 3672              		.cfi_startproc
 3673              		@ args = 0, pretend = 0, frame = 8
 3674              		@ frame_needed = 0, uses_anonymous_args = 0
 762:src/storage.c ****   int fss;
 3675              		.loc 1 762 3 view .LVU1044
 763:src/storage.c ****   int data = WRITE;
 3676              		.loc 1 763 3 view .LVU1045
 764:src/storage.c ****   uint x=0;
 3677              		.loc 1 764 3 view .LVU1046
 761:src/storage.c ****   FRESULT f;
 3678              		.loc 1 761 30 is_stmt 0 view .LVU1047
 3679 0000 70B5     		push	{r4, r5, r6, lr}
 3680              		.cfi_def_cfa_offset 16
 3681              		.cfi_offset 4, -16
 3682              		.cfi_offset 5, -12
 3683              		.cfi_offset 6, -8
ARM GAS  /tmp/ccVDV1xv.s 			page 101


 3684              		.cfi_offset 14, -4
 3685 0002 86B0     		sub	sp, sp, #24
 3686              		.cfi_def_cfa_offset 40
 764:src/storage.c ****   uint x=0;
 3687              		.loc 1 764 7 view .LVU1048
 3688 0004 0125     		movs	r5, #1
 765:src/storage.c **** 
 3689              		.loc 1 765 8 view .LVU1049
 3690 0006 0023     		movs	r3, #0
 761:src/storage.c ****   FRESULT f;
 3691              		.loc 1 761 30 view .LVU1050
 3692 0008 0446     		mov	r4, r0
 767:src/storage.c ****   if (i == 0) {
 3693              		.loc 1 767 3 view .LVU1051
 3694 000a 1E4E     		ldr	r6, .L313
 764:src/storage.c ****   uint x=0;
 3695              		.loc 1 764 7 view .LVU1052
 3696 000c 0495     		str	r5, [sp, #16]
 765:src/storage.c **** 
 3697              		.loc 1 765 3 is_stmt 1 view .LVU1053
 767:src/storage.c ****   if (i == 0) {
 3698              		.loc 1 767 3 is_stmt 0 view .LVU1054
 3699 000e 2846     		mov	r0, r5
 3700              	.LVL340:
 765:src/storage.c **** 
 3701              		.loc 1 765 8 view .LVU1055
 3702 0010 0593     		str	r3, [sp, #20]
 767:src/storage.c ****   if (i == 0) {
 3703              		.loc 1 767 3 is_stmt 1 view .LVU1056
 3704 0012 B047     		blx	r6
 3705              	.LVL341:
 768:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3706              		.loc 1 768 3 view .LVU1057
 768:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3707              		.loc 1 768 6 is_stmt 0 view .LVU1058
 3708 0014 CCB9     		cbnz	r4, .L304
 769:src/storage.c ****     if (f != FR_OK) {
 3709              		.loc 1 769 5 is_stmt 1 view .LVU1059
 769:src/storage.c ****     if (f != FR_OK) {
 3710              		.loc 1 769 9 is_stmt 0 view .LVU1060
 3711 0016 1C4D     		ldr	r5, .L313+4
 3712 0018 1C4B     		ldr	r3, .L313+8
 3713 001a 6868     		ldr	r0, [r5, #4]
 3714 001c 1C49     		ldr	r1, .L313+12
 3715 001e 0B22     		movs	r2, #11
 3716 0020 9847     		blx	r3
 3717              	.LVL342:
 770:src/storage.c ****       f_close (FPT);
 3718              		.loc 1 770 5 is_stmt 1 view .LVU1061
 770:src/storage.c ****       f_close (FPT);
 3719              		.loc 1 770 8 is_stmt 0 view .LVU1062
 3720 0022 20BB     		cbnz	r0, .L305
 3721              	.LVL343:
 3722              	.L309:
 782:src/storage.c ****   if ( f != FR_OK ) {
 3723              		.loc 1 782 3 is_stmt 1 view .LVU1063
 782:src/storage.c ****   if ( f != FR_OK ) {
ARM GAS  /tmp/ccVDV1xv.s 			page 102


 3724              		.loc 1 782 7 is_stmt 0 view .LVU1064
 3725 0024 1B4A     		ldr	r2, .L313+16
 3726 0026 184B     		ldr	r3, .L313+4
 3727 0028 1168     		ldr	r1, [r2]
 3728 002a 5868     		ldr	r0, [r3, #4]
 3729 002c 1A4C     		ldr	r4, .L313+20
 3730 002e 05AB     		add	r3, sp, #20
 3731 0030 4FF48042 		mov	r2, #16384
 3732 0034 A047     		blx	r4
 3733              	.LVL344:
 783:src/storage.c ****     DispMsg = "FR not ok";
 3734              		.loc 1 783 3 is_stmt 1 view .LVU1065
 783:src/storage.c ****     DispMsg = "FR not ok";
 3735              		.loc 1 783 6 is_stmt 0 view .LVU1066
 3736 0036 B0B9     		cbnz	r0, .L306
 3737              	.L307:
 786:src/storage.c ****   sys_disk_write_enable(0);
 3738              		.loc 1 786 3 is_stmt 1 view .LVU1067
 3739 0038 134A     		ldr	r2, .L313+4
 3740 003a 184B     		ldr	r3, .L313+24
 3741 003c 5068     		ldr	r0, [r2, #4]
 3742              	.LVL345:
 786:src/storage.c ****   sys_disk_write_enable(0);
 3743              		.loc 1 786 3 is_stmt 0 view .LVU1068
 3744 003e 9847     		blx	r3
 3745              	.LVL346:
 787:src/storage.c **** }
 3746              		.loc 1 787 3 is_stmt 1 view .LVU1069
 3747 0040 104B     		ldr	r3, .L313
 3748 0042 0020     		movs	r0, #0
 3749 0044 9847     		blx	r3
 3750              	.LVL347:
 788:src/storage.c **** 
 3751              		.loc 1 788 1 is_stmt 0 view .LVU1070
 3752 0046 06B0     		add	sp, sp, #24
 3753              		.cfi_remember_state
 3754              		.cfi_def_cfa_offset 16
 3755              		@ sp needed
 3756 0048 70BD     		pop	{r4, r5, r6, pc}
 3757              	.LVL348:
 3758              	.L304:
 3759              		.cfi_restore_state
 778:src/storage.c ****     if (fss != 1) return;
 3760              		.loc 1 778 5 is_stmt 1 view .LVU1071
 778:src/storage.c ****     if (fss != 1) return;
 3761              		.loc 1 778 11 is_stmt 0 view .LVU1072
 3762 004a 04AB     		add	r3, sp, #16
 3763 004c 0293     		str	r3, [sp, #8]
 3764 004e CDE90055 		strd	r5, r5, [sp]
 3765 0052 134C     		ldr	r4, .L313+28
 3766              	.LVL349:
 778:src/storage.c ****     if (fss != 1) return;
 3767              		.loc 1 778 11 view .LVU1073
 3768 0054 134B     		ldr	r3, .L313+32
 3769 0056 144A     		ldr	r2, .L313+36
 3770 0058 1449     		ldr	r1, .L313+40
 3771 005a 1548     		ldr	r0, .L313+44
ARM GAS  /tmp/ccVDV1xv.s 			page 103


 3772 005c A047     		blx	r4
 3773              	.LVL350:
 779:src/storage.c ****   }
 3774              		.loc 1 779 5 is_stmt 1 view .LVU1074
 779:src/storage.c ****   }
 3775              		.loc 1 779 8 is_stmt 0 view .LVU1075
 3776 005e 0128     		cmp	r0, #1
 3777 0060 E0D0     		beq	.L309
 788:src/storage.c **** 
 3778              		.loc 1 788 1 view .LVU1076
 3779 0062 06B0     		add	sp, sp, #24
 3780              		.cfi_remember_state
 3781              		.cfi_def_cfa_offset 16
 3782              		@ sp needed
 3783 0064 70BD     		pop	{r4, r5, r6, pc}
 3784              	.LVL351:
 3785              	.L306:
 3786              		.cfi_restore_state
 784:src/storage.c ****   }
 3787              		.loc 1 784 5 is_stmt 1 view .LVU1077
 784:src/storage.c ****   }
 3788              		.loc 1 784 13 is_stmt 0 view .LVU1078
 3789 0066 134B     		ldr	r3, .L313+48
 3790 0068 134A     		ldr	r2, .L313+52
 3791 006a 1A60     		str	r2, [r3]
 3792 006c E4E7     		b	.L307
 3793              	.LVL352:
 3794              	.L305:
 771:src/storage.c ****       sys_disk_write_enable(0);
 3795              		.loc 1 771 7 is_stmt 1 view .LVU1079
 3796 006e 0B4B     		ldr	r3, .L313+24
 3797 0070 6868     		ldr	r0, [r5, #4]
 3798              	.LVL353:
 771:src/storage.c ****       sys_disk_write_enable(0);
 3799              		.loc 1 771 7 is_stmt 0 view .LVU1080
 3800 0072 9847     		blx	r3
 3801              	.LVL354:
 772:src/storage.c ****       DispMsg = "Can't open";
 3802              		.loc 1 772 7 is_stmt 1 view .LVU1081
 3803 0074 2046     		mov	r0, r4
 3804 0076 B047     		blx	r6
 3805              	.LVL355:
 773:src/storage.c ****       return;
 3806              		.loc 1 773 7 view .LVU1082
 773:src/storage.c ****       return;
 3807              		.loc 1 773 15 is_stmt 0 view .LVU1083
 3808 0078 0E4B     		ldr	r3, .L313+48
 3809 007a 104A     		ldr	r2, .L313+56
 3810 007c 1A60     		str	r2, [r3]
 774:src/storage.c ****     }
 3811              		.loc 1 774 7 is_stmt 1 view .LVU1084
 788:src/storage.c **** 
 3812              		.loc 1 788 1 is_stmt 0 view .LVU1085
 3813 007e 06B0     		add	sp, sp, #24
 3814              		.cfi_def_cfa_offset 16
 3815              		@ sp needed
 3816 0080 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccVDV1xv.s 			page 104


 3817              	.LVL356:
 3818              	.L314:
 788:src/storage.c **** 
 3819              		.loc 1 788 1 view .LVU1086
 3820 0082 00BF     		.align	2
 3821              	.L313:
 3822 0084 E1030008 		.word	134218721
 3823 0088 00200010 		.word	268443648
 3824 008c 35040008 		.word	134218805
 3825 0090 1C000000 		.word	.LC1
 3826 0094 00000000 		.word	library_ram
 3827 0098 41040008 		.word	134218817
 3828 009c 39040008 		.word	134218809
 3829 00a0 51030008 		.word	134218577
 3830 00a4 00000000 		.word	open_selected_file
 3831 00a8 00000000 		.word	.LC11
 3832 00ac 30000000 		.word	.LC2
 3833 00b0 08000000 		.word	.LC12
 3834 00b4 00000000 		.word	DispMsg
 3835 00b8 1C000000 		.word	.LC13
 3836 00bc 0C000000 		.word	.LC4
 3837              		.cfi_endproc
 3838              	.LFE33:
 3840              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3841              		.align	2
 3842              	.LC14:
 3843 0000 4C6F6164 		.ascii	"Load Library File\000"
 3843      204C6962 
 3843      72617279 
 3843      2046696C 
 3843      6500
 3844 0012 0000     		.align	2
 3845              	.LC15:
 3846 0014 4E6F7420 		.ascii	"Not at eof\000"
 3846      61742065 
 3846      6F6600
 3847              		.section	.text.load_lib_file,"ax",%progbits
 3848              		.align	1
 3849              		.p2align 2,,3
 3850              		.global	load_lib_file
 3851              		.syntax unified
 3852              		.thumb
 3853              		.thumb_func
 3854              		.fpu fpv4-sp-d16
 3856              	load_lib_file:
 3857              	.LVL357:
 3858              	.LFB34:
 790:src/storage.c ****   FRESULT f;
 3859              		.loc 1 790 30 is_stmt 1 view -0
 3860              		.cfi_startproc
 3861              		@ args = 0, pretend = 0, frame = 8
 3862              		@ frame_needed = 0, uses_anonymous_args = 0
 791:src/storage.c ****   int fss;
 3863              		.loc 1 791 3 view .LVU1088
 792:src/storage.c ****   int data = READ;
 3864              		.loc 1 792 3 view .LVU1089
 793:src/storage.c ****   uint x=0;
ARM GAS  /tmp/ccVDV1xv.s 			page 105


 3865              		.loc 1 793 3 view .LVU1090
 790:src/storage.c ****   FRESULT f;
 3866              		.loc 1 790 30 is_stmt 0 view .LVU1091
 3867 0000 10B5     		push	{r4, lr}
 3868              		.cfi_def_cfa_offset 8
 3869              		.cfi_offset 4, -8
 3870              		.cfi_offset 14, -4
 794:src/storage.c **** 
 3871              		.loc 1 794 8 view .LVU1092
 3872 0002 0222     		movs	r2, #2
 790:src/storage.c ****   FRESULT f;
 3873              		.loc 1 790 30 view .LVU1093
 3874 0004 86B0     		sub	sp, sp, #24
 3875              		.cfi_def_cfa_offset 32
 794:src/storage.c **** 
 3876              		.loc 1 794 8 view .LVU1094
 3877 0006 0023     		movs	r3, #0
 3878 0008 CDE90423 		strd	r2, r3, [sp, #16]
 796:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3879              		.loc 1 796 3 is_stmt 1 view .LVU1095
 796:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3880              		.loc 1 796 6 is_stmt 0 view .LVU1096
 3881 000c 08BB     		cbnz	r0, .L316
 797:src/storage.c ****     if (f != FR_OK) {
 3882              		.loc 1 797 5 is_stmt 1 view .LVU1097
 797:src/storage.c ****     if (f != FR_OK) {
 3883              		.loc 1 797 9 is_stmt 0 view .LVU1098
 3884 000e 1C4C     		ldr	r4, .L326
 3885 0010 1C4B     		ldr	r3, .L326+4
 3886 0012 6068     		ldr	r0, [r4, #4]
 3887              	.LVL358:
 797:src/storage.c ****     if (f != FR_OK) {
 3888              		.loc 1 797 9 view .LVU1099
 3889 0014 1C49     		ldr	r1, .L326+8
 3890 0016 0122     		movs	r2, #1
 3891 0018 9847     		blx	r3
 3892              	.LVL359:
 798:src/storage.c ****       f_close (FPT);
 3893              		.loc 1 798 5 is_stmt 1 view .LVU1100
 798:src/storage.c ****       f_close (FPT);
 3894              		.loc 1 798 8 is_stmt 0 view .LVU1101
 3895 001a 0028     		cmp	r0, #0
 3896 001c 27D1     		bne	.L317
 3897              	.LVL360:
 3898              	.L321:
 809:src/storage.c ****   if ( f != FR_OK ) {
 3899              		.loc 1 809 3 is_stmt 1 view .LVU1102
 809:src/storage.c ****   if ( f != FR_OK ) {
 3900              		.loc 1 809 7 is_stmt 0 view .LVU1103
 3901 001e 1B4A     		ldr	r2, .L326+12
 3902 0020 174B     		ldr	r3, .L326
 3903 0022 1168     		ldr	r1, [r2]
 3904 0024 5868     		ldr	r0, [r3, #4]
 3905 0026 1A4C     		ldr	r4, .L326+16
 3906 0028 05AB     		add	r3, sp, #20
 3907 002a 4FF48042 		mov	r2, #16384
 3908 002e A047     		blx	r4
ARM GAS  /tmp/ccVDV1xv.s 			page 106


 3909              	.LVL361:
 810:src/storage.c ****     DispMsg = "FR not ok";
 3910              		.loc 1 810 3 is_stmt 1 view .LVU1104
 810:src/storage.c ****     DispMsg = "FR not ok";
 3911              		.loc 1 810 6 is_stmt 0 view .LVU1105
 3912 0030 10B1     		cbz	r0, .L319
 811:src/storage.c ****   }
 3913              		.loc 1 811 5 is_stmt 1 view .LVU1106
 811:src/storage.c ****   }
 3914              		.loc 1 811 13 is_stmt 0 view .LVU1107
 3915 0032 184B     		ldr	r3, .L326+20
 3916 0034 184A     		ldr	r2, .L326+24
 3917 0036 1A60     		str	r2, [r3]
 3918              	.L319:
 813:src/storage.c ****     DispMsg = "Not at eof";
 3919              		.loc 1 813 3 is_stmt 1 view .LVU1108
 813:src/storage.c ****     DispMsg = "Not at eof";
 3920              		.loc 1 813 10 is_stmt 0 view .LVU1109
 3921 0038 114B     		ldr	r3, .L326
 3922 003a 5868     		ldr	r0, [r3, #4]
 3923              	.LVL362:
 813:src/storage.c ****     DispMsg = "Not at eof";
 3924              		.loc 1 813 6 view .LVU1110
 3925 003c 8269     		ldr	r2, [r0, #24]
 3926 003e C368     		ldr	r3, [r0, #12]
 3927 0040 9A42     		cmp	r2, r3
 3928 0042 02D0     		beq	.L322
 814:src/storage.c ****   }
 3929              		.loc 1 814 5 is_stmt 1 view .LVU1111
 814:src/storage.c ****   }
 3930              		.loc 1 814 13 is_stmt 0 view .LVU1112
 3931 0044 134B     		ldr	r3, .L326+20
 3932 0046 154A     		ldr	r2, .L326+28
 3933 0048 1A60     		str	r2, [r3]
 3934              	.L322:
 816:src/storage.c **** }
 3935              		.loc 1 816 3 is_stmt 1 view .LVU1113
 3936 004a 154B     		ldr	r3, .L326+32
 3937 004c 9847     		blx	r3
 3938              	.LVL363:
 817:src/storage.c **** 
 3939              		.loc 1 817 1 is_stmt 0 view .LVU1114
 3940 004e 06B0     		add	sp, sp, #24
 3941              		.cfi_remember_state
 3942              		.cfi_def_cfa_offset 8
 3943              		@ sp needed
 3944 0050 10BD     		pop	{r4, pc}
 3945              	.LVL364:
 3946              	.L316:
 3947              		.cfi_restore_state
 805:src/storage.c ****     if (fss != 1) return;
 3948              		.loc 1 805 5 is_stmt 1 view .LVU1115
 805:src/storage.c ****     if (fss != 1) return;
 3949              		.loc 1 805 11 is_stmt 0 view .LVU1116
 3950 0052 04AA     		add	r2, sp, #16
 3951 0054 CDE90033 		strd	r3, r3, [sp]
 3952 0058 0292     		str	r2, [sp, #8]
ARM GAS  /tmp/ccVDV1xv.s 			page 107


 3953 005a 124C     		ldr	r4, .L326+36
 3954 005c 124B     		ldr	r3, .L326+40
 3955 005e 134A     		ldr	r2, .L326+44
 3956 0060 1349     		ldr	r1, .L326+48
 3957 0062 1448     		ldr	r0, .L326+52
 3958              	.LVL365:
 805:src/storage.c ****     if (fss != 1) return;
 3959              		.loc 1 805 11 view .LVU1117
 3960 0064 A047     		blx	r4
 3961              	.LVL366:
 806:src/storage.c ****   }
 3962              		.loc 1 806 5 is_stmt 1 view .LVU1118
 806:src/storage.c ****   }
 3963              		.loc 1 806 8 is_stmt 0 view .LVU1119
 3964 0066 0128     		cmp	r0, #1
 3965 0068 D9D0     		beq	.L321
 817:src/storage.c **** 
 3966              		.loc 1 817 1 view .LVU1120
 3967 006a 06B0     		add	sp, sp, #24
 3968              		.cfi_remember_state
 3969              		.cfi_def_cfa_offset 8
 3970              		@ sp needed
 3971 006c 10BD     		pop	{r4, pc}
 3972              	.LVL367:
 3973              	.L317:
 3974              		.cfi_restore_state
 799:src/storage.c ****       DispMsg = "Can't open";
 3975              		.loc 1 799 7 is_stmt 1 view .LVU1121
 3976 006e 6068     		ldr	r0, [r4, #4]
 3977              	.LVL368:
 799:src/storage.c ****       DispMsg = "Can't open";
 3978              		.loc 1 799 7 is_stmt 0 view .LVU1122
 3979 0070 0B4B     		ldr	r3, .L326+32
 3980 0072 9847     		blx	r3
 3981              	.LVL369:
 800:src/storage.c ****       return;
 3982              		.loc 1 800 7 is_stmt 1 view .LVU1123
 800:src/storage.c ****       return;
 3983              		.loc 1 800 15 is_stmt 0 view .LVU1124
 3984 0074 074B     		ldr	r3, .L326+20
 3985 0076 104A     		ldr	r2, .L326+56
 3986 0078 1A60     		str	r2, [r3]
 801:src/storage.c ****     }
 3987              		.loc 1 801 7 is_stmt 1 view .LVU1125
 817:src/storage.c **** 
 3988              		.loc 1 817 1 is_stmt 0 view .LVU1126
 3989 007a 06B0     		add	sp, sp, #24
 3990              		.cfi_def_cfa_offset 8
 3991              		@ sp needed
 3992 007c 10BD     		pop	{r4, pc}
 3993              	.L327:
 3994 007e 00BF     		.align	2
 3995              	.L326:
 3996 0080 00200010 		.word	268443648
 3997 0084 35040008 		.word	134218805
 3998 0088 1C000000 		.word	.LC1
 3999 008c 00000000 		.word	library_ram
ARM GAS  /tmp/ccVDV1xv.s 			page 108


 4000 0090 3D040008 		.word	134218813
 4001 0094 00000000 		.word	DispMsg
 4002 0098 1C000000 		.word	.LC13
 4003 009c 14000000 		.word	.LC15
 4004 00a0 39040008 		.word	134218809
 4005 00a4 51030008 		.word	134218577
 4006 00a8 00000000 		.word	open_selected_file
 4007 00ac 00000000 		.word	.LC11
 4008 00b0 30000000 		.word	.LC2
 4009 00b4 00000000 		.word	.LC14
 4010 00b8 0C000000 		.word	.LC4
 4011              		.cfi_endproc
 4012              	.LFE34:
 4014              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 4015              		.align	2
 4016              	.LC16:
 4017 0000 77703334 		.ascii	"wp34s/wp34s_4k.dat\000"
 4017      732F7770 
 4017      3334735F 
 4017      346B2E64 
 4017      617400
 4018 0013 00       		.align	2
 4019              	.LC17:
 4020 0014 2E646174 		.ascii	".dat\000"
 4020      00
 4021 0019 000000   		.align	2
 4022              	.LC18:
 4023 001c 53617665 		.ascii	"Save RAM File\000"
 4023      2052414D 
 4023      2046696C 
 4023      6500
 4024              		.section	.text.save_ram_file,"ax",%progbits
 4025              		.align	1
 4026              		.p2align 2,,3
 4027              		.global	save_ram_file
 4028              		.syntax unified
 4029              		.thumb
 4030              		.thumb_func
 4031              		.fpu fpv4-sp-d16
 4033              	save_ram_file:
 4034              	.LVL370:
 4035              	.LFB35:
 819:src/storage.c ****   FRESULT f;
 4036              		.loc 1 819 30 is_stmt 1 view -0
 4037              		.cfi_startproc
 4038              		@ args = 0, pretend = 0, frame = 8
 4039              		@ frame_needed = 0, uses_anonymous_args = 0
 820:src/storage.c ****   int fss;
 4040              		.loc 1 820 3 view .LVU1128
 821:src/storage.c ****   int data = WRITE;
 4041              		.loc 1 821 3 view .LVU1129
 822:src/storage.c ****   uint x=0;
 4042              		.loc 1 822 3 view .LVU1130
 819:src/storage.c ****   FRESULT f;
 4043              		.loc 1 819 30 is_stmt 0 view .LVU1131
 4044 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4045              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccVDV1xv.s 			page 109


 4046              		.cfi_offset 4, -20
 4047              		.cfi_offset 5, -16
 4048              		.cfi_offset 6, -12
 4049              		.cfi_offset 7, -8
 4050              		.cfi_offset 14, -4
 4051              	.LBB110:
 4052              	.LBB111:
 150:src/storage.c **** 			      Crc, &Crc );
 4053              		.loc 1 150 9 view .LVU1132
 4054 0002 264E     		ldr	r6, .L338
 4055              	.LBE111:
 4056              	.LBE110:
 829:src/storage.c ****     if (i == 0) {
 4057              		.loc 1 829 5 view .LVU1133
 4058 0004 264F     		ldr	r7, .L338+4
 819:src/storage.c ****   FRESULT f;
 4059              		.loc 1 819 30 view .LVU1134
 4060 0006 87B0     		sub	sp, sp, #28
 4061              		.cfi_def_cfa_offset 48
 823:src/storage.c **** 
 4062              		.loc 1 823 8 view .LVU1135
 4063 0008 0023     		movs	r3, #0
 822:src/storage.c ****   uint x=0;
 4064              		.loc 1 822 7 view .LVU1136
 4065 000a 0125     		movs	r5, #1
 819:src/storage.c ****   FRESULT f;
 4066              		.loc 1 819 30 view .LVU1137
 4067 000c 0446     		mov	r4, r0
 823:src/storage.c **** 
 4068              		.loc 1 823 8 view .LVU1138
 4069 000e CDE90453 		strd	r5, r3, [sp, #16]
 825:src/storage.c ****     init_state();
 4070              		.loc 1 825 5 is_stmt 1 view .LVU1139
 4071 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4072              	.LVL371:
 826:src/storage.c ****     checksum_all();
 4073              		.loc 1 826 5 view .LVU1140
 4074 0016 FFF7FEFF 		bl	init_state
 4075              	.LVL372:
 827:src/storage.c **** 
 4076              		.loc 1 827 5 view .LVU1141
 4077              	.LBB113:
 4078              	.LBI110:
 148:src/storage.c **** {
 4079              		.loc 1 148 5 view .LVU1142
 4080              	.LBB112:
 150:src/storage.c **** 			      Crc, &Crc );
 4081              		.loc 1 150 2 view .LVU1143
 150:src/storage.c **** 			      Crc, &Crc );
 4082              		.loc 1 150 9 is_stmt 0 view .LVU1144
 4083 001a 3068     		ldr	r0, [r6]
 4084 001c 40F6FE71 		movw	r1, #4094
 4085 0020 B0F8FE2F 		ldrh	r2, [r0, #4094]
 4086 0024 4318     		adds	r3, r0, r1
 4087 0026 FFF7FEFF 		bl	test_checksum
 4088              	.LVL373:
 4089              	.LBE112:
ARM GAS  /tmp/ccVDV1xv.s 			page 110


 4090              	.LBE113:
 829:src/storage.c ****     if (i == 0) {
 4091              		.loc 1 829 5 is_stmt 1 view .LVU1145
 4092 002a 2846     		mov	r0, r5
 4093 002c B847     		blx	r7
 4094              	.LVL374:
 830:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4095              		.loc 1 830 5 view .LVU1146
 830:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4096              		.loc 1 830 8 is_stmt 0 view .LVU1147
 4097 002e C4B9     		cbnz	r4, .L329
 831:src/storage.c ****       if (f != FR_OK) {
 4098              		.loc 1 831 7 is_stmt 1 view .LVU1148
 831:src/storage.c ****       if (f != FR_OK) {
 4099              		.loc 1 831 11 is_stmt 0 view .LVU1149
 4100 0030 1C4D     		ldr	r5, .L338+8
 4101 0032 1D4B     		ldr	r3, .L338+12
 4102 0034 6868     		ldr	r0, [r5, #4]
 4103 0036 1D49     		ldr	r1, .L338+16
 4104 0038 0B22     		movs	r2, #11
 4105 003a 9847     		blx	r3
 4106              	.LVL375:
 832:src/storage.c **** 	f_close (FPT);
 4107              		.loc 1 832 7 is_stmt 1 view .LVU1150
 832:src/storage.c **** 	f_close (FPT);
 4108              		.loc 1 832 10 is_stmt 0 view .LVU1151
 4109 003c 18BB     		cbnz	r0, .L330
 4110              	.LVL376:
 4111              	.L334:
 844:src/storage.c ****     if ( f != FR_OK ) {
 4112              		.loc 1 844 5 is_stmt 1 view .LVU1152
 844:src/storage.c ****     if ( f != FR_OK ) {
 4113              		.loc 1 844 9 is_stmt 0 view .LVU1153
 4114 003e 194B     		ldr	r3, .L338+8
 4115 0040 3168     		ldr	r1, [r6]
 4116 0042 5868     		ldr	r0, [r3, #4]
 4117 0044 1A4C     		ldr	r4, .L338+20
 4118 0046 05AB     		add	r3, sp, #20
 4119 0048 4FF48052 		mov	r2, #4096
 4120 004c A047     		blx	r4
 4121              	.LVL377:
 845:src/storage.c ****       DispMsg = "FR not ok";
 4122              		.loc 1 845 5 is_stmt 1 view .LVU1154
 845:src/storage.c ****       DispMsg = "FR not ok";
 4123              		.loc 1 845 8 is_stmt 0 view .LVU1155
 4124 004e B0B9     		cbnz	r0, .L331
 4125              	.L332:
 848:src/storage.c ****     sys_disk_write_enable(0);
 4126              		.loc 1 848 5 is_stmt 1 view .LVU1156
 4127 0050 144A     		ldr	r2, .L338+8
 4128 0052 184B     		ldr	r3, .L338+24
 4129 0054 5068     		ldr	r0, [r2, #4]
 4130              	.LVL378:
 848:src/storage.c ****     sys_disk_write_enable(0);
 4131              		.loc 1 848 5 is_stmt 0 view .LVU1157
 4132 0056 9847     		blx	r3
 4133              	.LVL379:
ARM GAS  /tmp/ccVDV1xv.s 			page 111


 849:src/storage.c **** }
 4134              		.loc 1 849 5 is_stmt 1 view .LVU1158
 4135 0058 114B     		ldr	r3, .L338+4
 4136 005a 0020     		movs	r0, #0
 4137 005c 9847     		blx	r3
 4138              	.LVL380:
 850:src/storage.c **** 
 4139              		.loc 1 850 1 is_stmt 0 view .LVU1159
 4140 005e 07B0     		add	sp, sp, #28
 4141              		.cfi_remember_state
 4142              		.cfi_def_cfa_offset 20
 4143              		@ sp needed
 4144 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4145              	.LVL381:
 4146              	.L329:
 4147              		.cfi_restore_state
 840:src/storage.c ****       if (fss != 1) return;
 4148              		.loc 1 840 7 is_stmt 1 view .LVU1160
 840:src/storage.c ****       if (fss != 1) return;
 4149              		.loc 1 840 13 is_stmt 0 view .LVU1161
 4150 0062 04AB     		add	r3, sp, #16
 4151 0064 0293     		str	r3, [sp, #8]
 4152 0066 CDE90055 		strd	r5, r5, [sp]
 4153 006a 134C     		ldr	r4, .L338+28
 4154              	.LVL382:
 840:src/storage.c ****       if (fss != 1) return;
 4155              		.loc 1 840 13 view .LVU1162
 4156 006c 134B     		ldr	r3, .L338+32
 4157 006e 144A     		ldr	r2, .L338+36
 4158 0070 1449     		ldr	r1, .L338+40
 4159 0072 1548     		ldr	r0, .L338+44
 4160 0074 A047     		blx	r4
 4161              	.LVL383:
 841:src/storage.c ****     }
 4162              		.loc 1 841 7 is_stmt 1 view .LVU1163
 841:src/storage.c ****     }
 4163              		.loc 1 841 10 is_stmt 0 view .LVU1164
 4164 0076 0128     		cmp	r0, #1
 4165 0078 E1D0     		beq	.L334
 850:src/storage.c **** 
 4166              		.loc 1 850 1 view .LVU1165
 4167 007a 07B0     		add	sp, sp, #28
 4168              		.cfi_remember_state
 4169              		.cfi_def_cfa_offset 20
 4170              		@ sp needed
 4171 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4172              	.LVL384:
 4173              	.L331:
 4174              		.cfi_restore_state
 846:src/storage.c ****     }
 4175              		.loc 1 846 7 is_stmt 1 view .LVU1166
 846:src/storage.c ****     }
 4176              		.loc 1 846 15 is_stmt 0 view .LVU1167
 4177 007e 134B     		ldr	r3, .L338+48
 4178 0080 134A     		ldr	r2, .L338+52
 4179 0082 1A60     		str	r2, [r3]
 4180 0084 E4E7     		b	.L332
ARM GAS  /tmp/ccVDV1xv.s 			page 112


 4181              	.LVL385:
 4182              	.L330:
 833:src/storage.c **** 	sys_disk_write_enable(0);
 4183              		.loc 1 833 2 is_stmt 1 view .LVU1168
 4184 0086 0B4B     		ldr	r3, .L338+24
 4185 0088 6868     		ldr	r0, [r5, #4]
 4186              	.LVL386:
 833:src/storage.c **** 	sys_disk_write_enable(0);
 4187              		.loc 1 833 2 is_stmt 0 view .LVU1169
 4188 008a 9847     		blx	r3
 4189              	.LVL387:
 834:src/storage.c **** 	DispMsg = "Can't open";
 4190              		.loc 1 834 2 is_stmt 1 view .LVU1170
 4191 008c 2046     		mov	r0, r4
 4192 008e B847     		blx	r7
 4193              	.LVL388:
 835:src/storage.c **** 	return;
 4194              		.loc 1 835 2 view .LVU1171
 835:src/storage.c **** 	return;
 4195              		.loc 1 835 10 is_stmt 0 view .LVU1172
 4196 0090 0E4B     		ldr	r3, .L338+48
 4197 0092 104A     		ldr	r2, .L338+56
 4198 0094 1A60     		str	r2, [r3]
 836:src/storage.c ****       }
 4199              		.loc 1 836 2 is_stmt 1 view .LVU1173
 850:src/storage.c **** 
 4200              		.loc 1 850 1 is_stmt 0 view .LVU1174
 4201 0096 07B0     		add	sp, sp, #28
 4202              		.cfi_def_cfa_offset 20
 4203              		@ sp needed
 4204 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4205              	.LVL389:
 4206              	.L339:
 850:src/storage.c **** 
 4207              		.loc 1 850 1 view .LVU1175
 4208 009a 00BF     		.align	2
 4209              	.L338:
 4210 009c 00000000 		.word	main_ram
 4211 00a0 E1030008 		.word	134218721
 4212 00a4 00200010 		.word	268443648
 4213 00a8 35040008 		.word	134218805
 4214 00ac 00000000 		.word	.LC16
 4215 00b0 41040008 		.word	134218817
 4216 00b4 39040008 		.word	134218809
 4217 00b8 51030008 		.word	134218577
 4218 00bc 00000000 		.word	open_selected_file
 4219 00c0 14000000 		.word	.LC17
 4220 00c4 30000000 		.word	.LC2
 4221 00c8 1C000000 		.word	.LC18
 4222 00cc 00000000 		.word	DispMsg
 4223 00d0 1C000000 		.word	.LC13
 4224 00d4 0C000000 		.word	.LC4
 4225              		.cfi_endproc
 4226              	.LFE35:
 4228              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4229              		.align	2
 4230              	.LC19:
ARM GAS  /tmp/ccVDV1xv.s 			page 113


 4231 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4231      2052414D 
 4231      2046696C 
 4231      6500
 4232              		.section	.text.load_ram_file,"ax",%progbits
 4233              		.align	1
 4234              		.p2align 2,,3
 4235              		.global	load_ram_file
 4236              		.syntax unified
 4237              		.thumb
 4238              		.thumb_func
 4239              		.fpu fpv4-sp-d16
 4241              	load_ram_file:
 4242              	.LVL390:
 4243              	.LFB36:
 852:src/storage.c ****   FRESULT f;
 4244              		.loc 1 852 29 is_stmt 1 view -0
 4245              		.cfi_startproc
 4246              		@ args = 0, pretend = 0, frame = 8
 4247              		@ frame_needed = 0, uses_anonymous_args = 0
 853:src/storage.c ****   int fss;
 4248              		.loc 1 853 3 view .LVU1177
 854:src/storage.c ****   int data = READ;
 4249              		.loc 1 854 3 view .LVU1178
 855:src/storage.c ****   uint x=0;
 4250              		.loc 1 855 3 view .LVU1179
 852:src/storage.c ****   FRESULT f;
 4251              		.loc 1 852 29 is_stmt 0 view .LVU1180
 4252 0000 30B5     		push	{r4, r5, lr}
 4253              		.cfi_def_cfa_offset 12
 4254              		.cfi_offset 4, -12
 4255              		.cfi_offset 5, -8
 4256              		.cfi_offset 14, -4
 856:src/storage.c ****   
 4257              		.loc 1 856 8 view .LVU1181
 4258 0002 0222     		movs	r2, #2
 852:src/storage.c ****   FRESULT f;
 4259              		.loc 1 852 29 view .LVU1182
 4260 0004 87B0     		sub	sp, sp, #28
 4261              		.cfi_def_cfa_offset 40
 856:src/storage.c ****   
 4262              		.loc 1 856 8 view .LVU1183
 4263 0006 0023     		movs	r3, #0
 4264 0008 CDE90423 		strd	r2, r3, [sp, #16]
 858:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4265              		.loc 1 858 3 is_stmt 1 view .LVU1184
 858:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4266              		.loc 1 858 6 is_stmt 0 view .LVU1185
 4267 000c F8B9     		cbnz	r0, .L341
 859:src/storage.c ****     if (f != FR_OK) {
 4268              		.loc 1 859 5 is_stmt 1 view .LVU1186
 859:src/storage.c ****     if (f != FR_OK) {
 4269              		.loc 1 859 9 is_stmt 0 view .LVU1187
 4270 000e 234C     		ldr	r4, .L352
 4271 0010 234B     		ldr	r3, .L352+4
 4272 0012 6068     		ldr	r0, [r4, #4]
 4273              	.LVL391:
ARM GAS  /tmp/ccVDV1xv.s 			page 114


 859:src/storage.c ****     if (f != FR_OK) {
 4274              		.loc 1 859 9 view .LVU1188
 4275 0014 2349     		ldr	r1, .L352+8
 4276 0016 0122     		movs	r2, #1
 4277 0018 9847     		blx	r3
 4278              	.LVL392:
 860:src/storage.c ****       f_close (FPT);
 4279              		.loc 1 860 5 is_stmt 1 view .LVU1189
 860:src/storage.c ****       f_close (FPT);
 4280              		.loc 1 860 8 is_stmt 0 view .LVU1190
 4281 001a 0028     		cmp	r0, #0
 4282 001c 34D1     		bne	.L342
 4283              	.LVL393:
 4284              	.L346:
 871:src/storage.c ****   if ( f != FR_OK ) {
 4285              		.loc 1 871 3 is_stmt 1 view .LVU1191
 871:src/storage.c ****   if ( f != FR_OK ) {
 4286              		.loc 1 871 7 is_stmt 0 view .LVU1192
 4287 001e 224B     		ldr	r3, .L352+12
 4288 0020 1E4D     		ldr	r5, .L352
 4289 0022 1968     		ldr	r1, [r3]
 4290 0024 214C     		ldr	r4, .L352+16
 4291 0026 6868     		ldr	r0, [r5, #4]
 4292 0028 05AB     		add	r3, sp, #20
 4293 002a 4FF48052 		mov	r2, #4096
 4294 002e A047     		blx	r4
 4295              	.LVL394:
 872:src/storage.c ****     DispMsg = "FR not ok";
 4296              		.loc 1 872 3 is_stmt 1 view .LVU1193
 872:src/storage.c ****     DispMsg = "FR not ok";
 4297              		.loc 1 872 6 is_stmt 0 view .LVU1194
 4298 0030 0446     		mov	r4, r0
 4299 0032 D8B9     		cbnz	r0, .L351
 877:src/storage.c ****     DispMsg = "Not at eof";
 4300              		.loc 1 877 3 is_stmt 1 view .LVU1195
 877:src/storage.c ****     DispMsg = "Not at eof";
 4301              		.loc 1 877 10 is_stmt 0 view .LVU1196
 4302 0034 6868     		ldr	r0, [r5, #4]
 4303              	.LVL395:
 877:src/storage.c ****     DispMsg = "Not at eof";
 4304              		.loc 1 877 6 view .LVU1197
 4305 0036 8269     		ldr	r2, [r0, #24]
 4306 0038 C368     		ldr	r3, [r0, #12]
 4307 003a 9A42     		cmp	r2, r3
 4308 003c 1FD0     		beq	.L347
 878:src/storage.c ****     f_close( FPT );
 4309              		.loc 1 878 5 is_stmt 1 view .LVU1198
 878:src/storage.c ****     f_close( FPT );
 4310              		.loc 1 878 13 is_stmt 0 view .LVU1199
 4311 003e 1C4B     		ldr	r3, .L352+20
 4312 0040 1C4A     		ldr	r2, .L352+24
 4313 0042 1A60     		str	r2, [r3]
 879:src/storage.c ****     return 1;
 4314              		.loc 1 879 5 is_stmt 1 view .LVU1200
 4315 0044 1C4B     		ldr	r3, .L352+28
 4316 0046 9847     		blx	r3
 4317              	.LVL396:
ARM GAS  /tmp/ccVDV1xv.s 			page 115


 880:src/storage.c ****   }
 4318              		.loc 1 880 5 view .LVU1201
 880:src/storage.c ****   }
 4319              		.loc 1 880 12 is_stmt 0 view .LVU1202
 4320 0048 0120     		movs	r0, #1
 884:src/storage.c **** 
 4321              		.loc 1 884 1 view .LVU1203
 4322 004a 07B0     		add	sp, sp, #28
 4323              		.cfi_remember_state
 4324              		.cfi_def_cfa_offset 12
 4325              		@ sp needed
 4326 004c 30BD     		pop	{r4, r5, pc}
 4327              	.LVL397:
 4328              	.L341:
 4329              		.cfi_restore_state
 867:src/storage.c ****     if (fss != 1) return 1;
 4330              		.loc 1 867 5 is_stmt 1 view .LVU1204
 867:src/storage.c ****     if (fss != 1) return 1;
 4331              		.loc 1 867 11 is_stmt 0 view .LVU1205
 4332 004e 04AA     		add	r2, sp, #16
 4333 0050 CDE90033 		strd	r3, r3, [sp]
 4334 0054 0292     		str	r2, [sp, #8]
 4335 0056 194C     		ldr	r4, .L352+32
 4336 0058 194B     		ldr	r3, .L352+36
 4337 005a 1A4A     		ldr	r2, .L352+40
 4338 005c 1A49     		ldr	r1, .L352+44
 4339 005e 1B48     		ldr	r0, .L352+48
 4340              	.LVL398:
 867:src/storage.c ****     if (fss != 1) return 1;
 4341              		.loc 1 867 11 view .LVU1206
 4342 0060 A047     		blx	r4
 4343              	.LVL399:
 868:src/storage.c ****   }
 4344              		.loc 1 868 5 is_stmt 1 view .LVU1207
 868:src/storage.c ****   }
 4345              		.loc 1 868 8 is_stmt 0 view .LVU1208
 4346 0062 0128     		cmp	r0, #1
 4347 0064 DBD0     		beq	.L346
 868:src/storage.c ****   }
 4348              		.loc 1 868 26 view .LVU1209
 4349 0066 0120     		movs	r0, #1
 4350              	.LVL400:
 884:src/storage.c **** 
 4351              		.loc 1 884 1 view .LVU1210
 4352 0068 07B0     		add	sp, sp, #28
 4353              		.cfi_remember_state
 4354              		.cfi_def_cfa_offset 12
 4355              		@ sp needed
 4356 006a 30BD     		pop	{r4, r5, pc}
 4357              	.LVL401:
 4358              	.L351:
 4359              		.cfi_restore_state
 873:src/storage.c ****     f_close( FPT );
 4360              		.loc 1 873 5 is_stmt 1 view .LVU1211
 873:src/storage.c ****     f_close( FPT );
 4361              		.loc 1 873 13 is_stmt 0 view .LVU1212
 4362 006c 104B     		ldr	r3, .L352+20
ARM GAS  /tmp/ccVDV1xv.s 			page 116


 4363 006e 184A     		ldr	r2, .L352+52
 4364 0070 1A60     		str	r2, [r3]
 874:src/storage.c ****     return 1;
 4365              		.loc 1 874 5 is_stmt 1 view .LVU1213
 4366 0072 6868     		ldr	r0, [r5, #4]
 4367              	.LVL402:
 874:src/storage.c ****     return 1;
 4368              		.loc 1 874 5 is_stmt 0 view .LVU1214
 4369 0074 104B     		ldr	r3, .L352+28
 4370 0076 9847     		blx	r3
 4371              	.LVL403:
 875:src/storage.c ****   }
 4372              		.loc 1 875 5 is_stmt 1 view .LVU1215
 875:src/storage.c ****   }
 4373              		.loc 1 875 12 is_stmt 0 view .LVU1216
 4374 0078 0120     		movs	r0, #1
 884:src/storage.c **** 
 4375              		.loc 1 884 1 view .LVU1217
 4376 007a 07B0     		add	sp, sp, #28
 4377              		.cfi_remember_state
 4378              		.cfi_def_cfa_offset 12
 4379              		@ sp needed
 4380 007c 30BD     		pop	{r4, r5, pc}
 4381              	.L347:
 4382              		.cfi_restore_state
 882:src/storage.c ****   return 0;
 4383              		.loc 1 882 3 is_stmt 1 view .LVU1218
 4384 007e 0E4B     		ldr	r3, .L352+28
 4385 0080 9847     		blx	r3
 4386              	.LVL404:
 883:src/storage.c **** }
 4387              		.loc 1 883 3 view .LVU1219
 883:src/storage.c **** }
 4388              		.loc 1 883 10 is_stmt 0 view .LVU1220
 4389 0082 2046     		mov	r0, r4
 884:src/storage.c **** 
 4390              		.loc 1 884 1 view .LVU1221
 4391 0084 07B0     		add	sp, sp, #28
 4392              		.cfi_remember_state
 4393              		.cfi_def_cfa_offset 12
 4394              		@ sp needed
 4395 0086 30BD     		pop	{r4, r5, pc}
 4396              	.LVL405:
 4397              	.L342:
 4398              		.cfi_restore_state
 861:src/storage.c ****       DispMsg = "Can't open";
 4399              		.loc 1 861 7 is_stmt 1 view .LVU1222
 4400 0088 6068     		ldr	r0, [r4, #4]
 4401              	.LVL406:
 861:src/storage.c ****       DispMsg = "Can't open";
 4402              		.loc 1 861 7 is_stmt 0 view .LVU1223
 4403 008a 0B4B     		ldr	r3, .L352+28
 4404 008c 9847     		blx	r3
 4405              	.LVL407:
 862:src/storage.c ****       return 1;
 4406              		.loc 1 862 7 is_stmt 1 view .LVU1224
 862:src/storage.c ****       return 1;
ARM GAS  /tmp/ccVDV1xv.s 			page 117


 4407              		.loc 1 862 15 is_stmt 0 view .LVU1225
 4408 008e 084B     		ldr	r3, .L352+20
 4409 0090 104A     		ldr	r2, .L352+56
 4410 0092 1A60     		str	r2, [r3]
 863:src/storage.c ****     }
 4411              		.loc 1 863 7 is_stmt 1 view .LVU1226
 863:src/storage.c ****     }
 4412              		.loc 1 863 14 is_stmt 0 view .LVU1227
 4413 0094 0120     		movs	r0, #1
 884:src/storage.c **** 
 4414              		.loc 1 884 1 view .LVU1228
 4415 0096 07B0     		add	sp, sp, #28
 4416              		.cfi_def_cfa_offset 12
 4417              		@ sp needed
 4418 0098 30BD     		pop	{r4, r5, pc}
 4419              	.L353:
 4420 009a 00BF     		.align	2
 4421              	.L352:
 4422 009c 00200010 		.word	268443648
 4423 00a0 35040008 		.word	134218805
 4424 00a4 00000000 		.word	.LC16
 4425 00a8 00000000 		.word	main_ram
 4426 00ac 3D040008 		.word	134218813
 4427 00b0 00000000 		.word	DispMsg
 4428 00b4 14000000 		.word	.LC15
 4429 00b8 39040008 		.word	134218809
 4430 00bc 51030008 		.word	134218577
 4431 00c0 00000000 		.word	open_selected_file
 4432 00c4 14000000 		.word	.LC17
 4433 00c8 30000000 		.word	.LC2
 4434 00cc 00000000 		.word	.LC19
 4435 00d0 1C000000 		.word	.LC13
 4436 00d4 0C000000 		.word	.LC4
 4437              		.cfi_endproc
 4438              	.LFE36:
 4440              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4441              		.align	2
 4442              	.LC20:
 4443 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4443      2052414D 
 4443      20426163 
 4443      6B757020 
 4443      46696C65 
 4444              		.section	.text.load_backup_file,"ax",%progbits
 4445              		.align	1
 4446              		.p2align 2,,3
 4447              		.global	load_backup_file
 4448              		.syntax unified
 4449              		.thumb
 4450              		.thumb_func
 4451              		.fpu fpv4-sp-d16
 4453              	load_backup_file:
 4454              	.LVL408:
 4455              	.LFB37:
 886:src/storage.c ****   FRESULT f;
 4456              		.loc 1 886 33 is_stmt 1 view -0
 4457              		.cfi_startproc
ARM GAS  /tmp/ccVDV1xv.s 			page 118


 4458              		@ args = 0, pretend = 0, frame = 8
 4459              		@ frame_needed = 0, uses_anonymous_args = 0
 887:src/storage.c ****   int fss;
 4460              		.loc 1 887 3 view .LVU1230
 888:src/storage.c ****   int data = READ;
 4461              		.loc 1 888 3 view .LVU1231
 889:src/storage.c ****   uint x=0;
 4462              		.loc 1 889 3 view .LVU1232
 886:src/storage.c ****   FRESULT f;
 4463              		.loc 1 886 33 is_stmt 0 view .LVU1233
 4464 0000 10B5     		push	{r4, lr}
 4465              		.cfi_def_cfa_offset 8
 4466              		.cfi_offset 4, -8
 4467              		.cfi_offset 14, -4
 890:src/storage.c **** 
 4468              		.loc 1 890 8 view .LVU1234
 4469 0002 0222     		movs	r2, #2
 886:src/storage.c ****   FRESULT f;
 4470              		.loc 1 886 33 view .LVU1235
 4471 0004 86B0     		sub	sp, sp, #24
 4472              		.cfi_def_cfa_offset 32
 890:src/storage.c **** 
 4473              		.loc 1 890 8 view .LVU1236
 4474 0006 0023     		movs	r3, #0
 4475 0008 CDE90423 		strd	r2, r3, [sp, #16]
 892:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4476              		.loc 1 892 3 is_stmt 1 view .LVU1237
 892:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4477              		.loc 1 892 6 is_stmt 0 view .LVU1238
 4478 000c 08BB     		cbnz	r0, .L355
 893:src/storage.c ****     if (f != FR_OK) {
 4479              		.loc 1 893 5 is_stmt 1 view .LVU1239
 893:src/storage.c ****     if (f != FR_OK) {
 4480              		.loc 1 893 9 is_stmt 0 view .LVU1240
 4481 000e 1C4C     		ldr	r4, .L365
 4482 0010 1C4B     		ldr	r3, .L365+4
 4483 0012 6068     		ldr	r0, [r4, #4]
 4484              	.LVL409:
 893:src/storage.c ****     if (f != FR_OK) {
 4485              		.loc 1 893 9 view .LVU1241
 4486 0014 1C49     		ldr	r1, .L365+8
 4487 0016 0122     		movs	r2, #1
 4488 0018 9847     		blx	r3
 4489              	.LVL410:
 894:src/storage.c ****       DispMsg = "Can't open";
 4490              		.loc 1 894 5 is_stmt 1 view .LVU1242
 894:src/storage.c ****       DispMsg = "Can't open";
 4491              		.loc 1 894 8 is_stmt 0 view .LVU1243
 4492 001a 0028     		cmp	r0, #0
 4493 001c 27D1     		bne	.L356
 4494              	.LVL411:
 4495              	.L360:
 905:src/storage.c ****   if ( f != FR_OK ) {
 4496              		.loc 1 905 3 is_stmt 1 view .LVU1244
 905:src/storage.c ****   if ( f != FR_OK ) {
 4497              		.loc 1 905 7 is_stmt 0 view .LVU1245
 4498 001e 1B4A     		ldr	r2, .L365+12
ARM GAS  /tmp/ccVDV1xv.s 			page 119


 4499 0020 174B     		ldr	r3, .L365
 4500 0022 1168     		ldr	r1, [r2]
 4501 0024 5868     		ldr	r0, [r3, #4]
 4502 0026 1A4C     		ldr	r4, .L365+16
 4503 0028 05AB     		add	r3, sp, #20
 4504 002a 4FF48052 		mov	r2, #4096
 4505 002e A047     		blx	r4
 4506              	.LVL412:
 906:src/storage.c ****       DispMsg = "FR not ok";
 4507              		.loc 1 906 3 is_stmt 1 view .LVU1246
 906:src/storage.c ****       DispMsg = "FR not ok";
 4508              		.loc 1 906 6 is_stmt 0 view .LVU1247
 4509 0030 10B1     		cbz	r0, .L358
 907:src/storage.c ****   }
 4510              		.loc 1 907 7 is_stmt 1 view .LVU1248
 907:src/storage.c ****   }
 4511              		.loc 1 907 15 is_stmt 0 view .LVU1249
 4512 0032 184B     		ldr	r3, .L365+20
 4513 0034 184A     		ldr	r2, .L365+24
 4514 0036 1A60     		str	r2, [r3]
 4515              	.L358:
 909:src/storage.c ****     DispMsg = "Not at eof";
 4516              		.loc 1 909 3 is_stmt 1 view .LVU1250
 909:src/storage.c ****     DispMsg = "Not at eof";
 4517              		.loc 1 909 10 is_stmt 0 view .LVU1251
 4518 0038 114B     		ldr	r3, .L365
 4519 003a 5868     		ldr	r0, [r3, #4]
 4520              	.LVL413:
 909:src/storage.c ****     DispMsg = "Not at eof";
 4521              		.loc 1 909 6 view .LVU1252
 4522 003c 8269     		ldr	r2, [r0, #24]
 4523 003e C368     		ldr	r3, [r0, #12]
 4524 0040 9A42     		cmp	r2, r3
 4525 0042 02D0     		beq	.L361
 910:src/storage.c ****   }
 4526              		.loc 1 910 5 is_stmt 1 view .LVU1253
 910:src/storage.c ****   }
 4527              		.loc 1 910 13 is_stmt 0 view .LVU1254
 4528 0044 134B     		ldr	r3, .L365+20
 4529 0046 154A     		ldr	r2, .L365+28
 4530 0048 1A60     		str	r2, [r3]
 4531              	.L361:
 912:src/storage.c **** }
 4532              		.loc 1 912 3 is_stmt 1 view .LVU1255
 4533 004a 154B     		ldr	r3, .L365+32
 4534 004c 9847     		blx	r3
 4535              	.LVL414:
 913:src/storage.c **** 
 4536              		.loc 1 913 1 is_stmt 0 view .LVU1256
 4537 004e 06B0     		add	sp, sp, #24
 4538              		.cfi_remember_state
 4539              		.cfi_def_cfa_offset 8
 4540              		@ sp needed
 4541 0050 10BD     		pop	{r4, pc}
 4542              	.LVL415:
 4543              	.L355:
 4544              		.cfi_restore_state
ARM GAS  /tmp/ccVDV1xv.s 			page 120


 901:src/storage.c ****     if (fss != 1) return;
 4545              		.loc 1 901 5 is_stmt 1 view .LVU1257
 901:src/storage.c ****     if (fss != 1) return;
 4546              		.loc 1 901 11 is_stmt 0 view .LVU1258
 4547 0052 04AA     		add	r2, sp, #16
 4548 0054 CDE90033 		strd	r3, r3, [sp]
 4549 0058 0292     		str	r2, [sp, #8]
 4550 005a 124C     		ldr	r4, .L365+36
 4551 005c 124B     		ldr	r3, .L365+40
 4552 005e 134A     		ldr	r2, .L365+44
 4553 0060 1349     		ldr	r1, .L365+48
 4554 0062 1448     		ldr	r0, .L365+52
 4555              	.LVL416:
 901:src/storage.c ****     if (fss != 1) return;
 4556              		.loc 1 901 11 view .LVU1259
 4557 0064 A047     		blx	r4
 4558              	.LVL417:
 902:src/storage.c ****   }
 4559              		.loc 1 902 5 is_stmt 1 view .LVU1260
 902:src/storage.c ****   }
 4560              		.loc 1 902 8 is_stmt 0 view .LVU1261
 4561 0066 0128     		cmp	r0, #1
 4562 0068 D9D0     		beq	.L360
 913:src/storage.c **** 
 4563              		.loc 1 913 1 view .LVU1262
 4564 006a 06B0     		add	sp, sp, #24
 4565              		.cfi_remember_state
 4566              		.cfi_def_cfa_offset 8
 4567              		@ sp needed
 4568 006c 10BD     		pop	{r4, pc}
 4569              	.LVL418:
 4570              	.L356:
 4571              		.cfi_restore_state
 895:src/storage.c ****       f_close (FPT);
 4572              		.loc 1 895 7 is_stmt 1 view .LVU1263
 895:src/storage.c ****       f_close (FPT);
 4573              		.loc 1 895 15 is_stmt 0 view .LVU1264
 4574 006e 094B     		ldr	r3, .L365+20
 4575 0070 114A     		ldr	r2, .L365+56
 4576 0072 1A60     		str	r2, [r3]
 896:src/storage.c ****       return;
 4577              		.loc 1 896 7 is_stmt 1 view .LVU1265
 4578 0074 6068     		ldr	r0, [r4, #4]
 4579              	.LVL419:
 896:src/storage.c ****       return;
 4580              		.loc 1 896 7 is_stmt 0 view .LVU1266
 4581 0076 0A4B     		ldr	r3, .L365+32
 4582 0078 9847     		blx	r3
 4583              	.LVL420:
 897:src/storage.c ****     }
 4584              		.loc 1 897 7 is_stmt 1 view .LVU1267
 913:src/storage.c **** 
 4585              		.loc 1 913 1 is_stmt 0 view .LVU1268
 4586 007a 06B0     		add	sp, sp, #24
 4587              		.cfi_def_cfa_offset 8
 4588              		@ sp needed
 4589 007c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccVDV1xv.s 			page 121


 4590              	.L366:
 4591 007e 00BF     		.align	2
 4592              	.L365:
 4593 0080 00200010 		.word	268443648
 4594 0084 35040008 		.word	134218805
 4595 0088 00000000 		.word	.LC0
 4596 008c 00000000 		.word	backup_ram
 4597 0090 3D040008 		.word	134218813
 4598 0094 00000000 		.word	DispMsg
 4599 0098 1C000000 		.word	.LC13
 4600 009c 14000000 		.word	.LC15
 4601 00a0 39040008 		.word	134218809
 4602 00a4 51030008 		.word	134218577
 4603 00a8 00000000 		.word	open_selected_file
 4604 00ac 14000000 		.word	.LC17
 4605 00b0 30000000 		.word	.LC2
 4606 00b4 00000000 		.word	.LC20
 4607 00b8 0C000000 		.word	.LC4
 4608              		.cfi_endproc
 4609              	.LFE37:
 4611              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4612              		.align	2
 4613              	.LC21:
 4614 0000 57726974 		.ascii	"Write err\000"
 4614      65206572 
 4614      7200
 4615 000a 0000     		.align	2
 4616              	.LC22:
 4617 000c 57726974 		.ascii	"Written\000"
 4617      74656E00 
 4618              		.align	2
 4619              	.LC23:
 4620 0014 53617665 		.ascii	"Save current program\000"
 4620      20637572 
 4620      72656E74 
 4620      2070726F 
 4620      6772616D 
 4621 0029 000000   		.align	2
 4622              	.LC24:
 4623 002c 4D656D20 		.ascii	"Mem short\000"
 4623      73686F72 
 4623      7400
 4624              		.section	.text.save_prog_file,"ax",%progbits
 4625              		.align	1
 4626              		.p2align 2,,3
 4627              		.global	save_prog_file
 4628              		.syntax unified
 4629              		.thumb
 4630              		.thumb_func
 4631              		.fpu fpv4-sp-d16
 4633              	save_prog_file:
 4634              	.LFB39:
 941:src/storage.c ****   opcode lbl; 
 4635              		.loc 1 941 24 is_stmt 1 view -0
 4636              		.cfi_startproc
 4637              		@ args = 0, pretend = 0, frame = 8
 4638              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVDV1xv.s 			page 122


 942:src/storage.c ****   unsigned int pc;
 4639              		.loc 1 942 3 view .LVU1270
 943:src/storage.c ****   unsigned short steps, prog_crc;
 4640              		.loc 1 943 3 view .LVU1271
 944:src/storage.c ****   FRESULT f;
 4641              		.loc 1 944 3 view .LVU1272
 945:src/storage.c ****   int data = WRITE;
 4642              		.loc 1 945 3 view .LVU1273
 946:src/storage.c ****   int fss;
 4643              		.loc 1 946 3 view .LVU1274
 941:src/storage.c ****   opcode lbl; 
 4644              		.loc 1 941 24 is_stmt 0 view .LVU1275
 4645 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4646              		.cfi_def_cfa_offset 28
 4647              		.cfi_offset 4, -28
 4648              		.cfi_offset 5, -24
 4649              		.cfi_offset 6, -20
 4650              		.cfi_offset 7, -16
 4651              		.cfi_offset 8, -12
 4652              		.cfi_offset 9, -8
 4653              		.cfi_offset 14, -4
 948:src/storage.c ****   char* buffer;
 4654              		.loc 1 948 8 view .LVU1276
 4655 0004 0023     		movs	r3, #0
 941:src/storage.c ****   opcode lbl; 
 4656              		.loc 1 941 24 view .LVU1277
 4657 0006 87B0     		sub	sp, sp, #28
 4658              		.cfi_def_cfa_offset 56
 948:src/storage.c ****   char* buffer;
 4659              		.loc 1 948 8 view .LVU1278
 4660 0008 0124     		movs	r4, #1
 4661 000a CDE90443 		strd	r4, r3, [sp, #16]
 949:src/storage.c ****   FLASH_REGION* fr;
 4662              		.loc 1 949 3 is_stmt 1 view .LVU1279
 950:src/storage.c **** 
 4663              		.loc 1 950 3 view .LVU1280
 953:src/storage.c ****     /*
 4664              		.loc 1 953 3 view .LVU1281
 953:src/storage.c ****     /*
 4665              		.loc 1 953 8 is_stmt 0 view .LVU1282
 4666 000e FFF7FEFF 		bl	not_running
 4667              	.LVL421:
 953:src/storage.c ****     /*
 4668              		.loc 1 953 6 view .LVU1283
 4669 0012 C8B1     		cbz	r0, .L367
 957:src/storage.c ****     if ( pc == REGION_XROM ) {
 4670              		.loc 1 957 5 is_stmt 1 view .LVU1284
 4671              	.LVL422:
 958:src/storage.c ****       error_message( ERR_ILLEGAL );
 4672              		.loc 1 958 5 view .LVU1285
 957:src/storage.c ****     if ( pc == REGION_XROM ) {
 4673              		.loc 1 957 10 is_stmt 0 view .LVU1286
 4674 0014 464D     		ldr	r5, .L384
 4675              	.LVL423:
 957:src/storage.c ****     if ( pc == REGION_XROM ) {
 4676              		.loc 1 957 10 view .LVU1287
 4677 0016 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccVDV1xv.s 			page 123


 4678 0018 B3F8E03F 		ldrh	r3, [r3, #4064]
 958:src/storage.c ****       error_message( ERR_ILLEGAL );
 4679              		.loc 1 958 8 view .LVU1288
 4680 001c 9B0B     		lsrs	r3, r3, #14
 4681 001e 032B     		cmp	r3, #3
 4682 0020 72D0     		beq	.L382
 965:src/storage.c ****     lbl = getprog( ProgBegin );
 4683              		.loc 1 965 5 is_stmt 1 view .LVU1289
 4684 0022 2046     		mov	r0, r4
 4685 0024 FFF7FEFF 		bl	update_program_bounds
 4686              	.LVL424:
 966:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4687              		.loc 1 966 5 view .LVU1290
 966:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4688              		.loc 1 966 20 is_stmt 0 view .LVU1291
 4689 0028 2B68     		ldr	r3, [r5]
 966:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4690              		.loc 1 966 11 view .LVU1292
 4691 002a B3F8EC0F 		ldrh	r0, [r3, #4076]
 4692 002e FFF7FEFF 		bl	getprog
 4693              	.LVL425:
 967:src/storage.c ****       error_message( ERR_NO_LBL );
 4694              		.loc 1 967 5 is_stmt 1 view .LVU1293
 967:src/storage.c ****       error_message( ERR_NO_LBL );
 4695              		.loc 1 967 11 is_stmt 0 view .LVU1294
 4696 0032 00F47043 		and	r3, r0, #61440
 967:src/storage.c ****       error_message( ERR_NO_LBL );
 4697              		.loc 1 967 8 view .LVU1295
 4698 0036 B3F5704F 		cmp	r3, #61440
 4699 003a 02D1     		bne	.L371
 967:src/storage.c ****       error_message( ERR_NO_LBL );
 4700              		.loc 1 967 22 discriminator 1 view .LVU1296
 4701 003c 10F4706F 		tst	r0, #3840
 4702 0040 05D0     		beq	.L372
 4703              	.L371:
 968:src/storage.c ****       return;
 4704              		.loc 1 968 7 is_stmt 1 view .LVU1297
 4705 0042 0620     		movs	r0, #6
 4706              	.LVL426:
 968:src/storage.c ****       return;
 4707              		.loc 1 968 7 is_stmt 0 view .LVU1298
 4708 0044 FFF7FEFF 		bl	error_message
 4709              	.LVL427:
 969:src/storage.c ****     }
 4710              		.loc 1 969 7 is_stmt 1 view .LVU1299
 4711              	.L367:
1014:src/storage.c **** 
 4712              		.loc 1 1014 1 is_stmt 0 view .LVU1300
 4713 0048 07B0     		add	sp, sp, #28
 4714              		.cfi_remember_state
 4715              		.cfi_def_cfa_offset 28
 4716              		@ sp needed
 4717 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4718              	.LVL428:
 4719              	.L372:
 4720              		.cfi_restore_state
 974:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
ARM GAS  /tmp/ccVDV1xv.s 			page 124


 4721              		.loc 1 974 5 is_stmt 1 view .LVU1301
 974:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4722              		.loc 1 974 17 is_stmt 0 view .LVU1302
 4723 004e 2B68     		ldr	r3, [r5]
 974:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4724              		.loc 1 974 11 view .LVU1303
 4725 0050 B3F8EE5F 		ldrh	r5, [r3, #4078]
 4726 0054 B3F8EC3F 		ldrh	r3, [r3, #4076]
 4727 0058 0135     		adds	r5, r5, #1
 4728 005a ED1A     		subs	r5, r5, r3
 4729 005c ADB2     		uxth	r5, r5
 4730              	.LVL429:
 975:src/storage.c ****     /*
 4731              		.loc 1 975 5 is_stmt 1 view .LVU1304
 975:src/storage.c ****     /*
 4732              		.loc 1 975 23 is_stmt 0 view .LVU1305
 4733 005e FFF7FEFF 		bl	get_current_prog
 4734              	.LVL430:
 4735              	.LBB114:
 4736              	.LBB115:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4737              		.loc 1 109 2 view .LVU1306
 4738 0062 6E00     		lsls	r6, r5, #1
 4739              	.LVL431:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4740              		.loc 1 109 2 view .LVU1307
 4741              	.LBE115:
 4742              	.LBI114:
 103:src/storage.c **** {
 4743              		.loc 1 103 20 is_stmt 1 view .LVU1308
 4744              	.LBB116:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4745              		.loc 1 105 2 view .LVU1309
 106:src/storage.c **** 	unsigned int i;
 4746              		.loc 1 106 2 view .LVU1310
 107:src/storage.c **** 
 4747              		.loc 1 107 2 view .LVU1311
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4748              		.loc 1 109 2 view .LVU1312
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4749              		.loc 1 109 15 view .LVU1313
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4750              		.loc 1 109 2 is_stmt 0 view .LVU1314
 4751 0064 002D     		cmp	r5, #0
 4752 0066 55D0     		beq	.L378
 4753 0068 8119     		adds	r1, r0, r6
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4754              		.loc 1 105 21 view .LVU1315
 4755 006a 45F6A524 		movw	r4, #23205
 4756              	.LVL432:
 4757              	.L374:
 110:src/storage.c **** 		crc ^= *d++;
 4758              		.loc 1 110 3 is_stmt 1 view .LVU1316
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4759              		.loc 1 111 10 is_stmt 0 view .LVU1317
 4760 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4761              	.LVL433:
ARM GAS  /tmp/ccVDV1xv.s 			page 125


 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4762              		.loc 1 111 10 view .LVU1318
 4763 0072 63BA     		rev16	r3, r4
 4764 0074 9BB2     		uxth	r3, r3
 4765              	.LVL434:
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4766              		.loc 1 111 3 is_stmt 1 view .LVU1319
 111:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4767              		.loc 1 111 7 is_stmt 0 view .LVU1320
 4768 0076 5340     		eors	r3, r3, r2
 4769              	.LVL435:
 112:src/storage.c **** 		crc ^= crc << 12;
 4770              		.loc 1 112 3 is_stmt 1 view .LVU1321
 112:src/storage.c **** 		crc ^= crc << 12;
 4771              		.loc 1 112 7 is_stmt 0 view .LVU1322
 4772 0078 C3F30312 		ubfx	r2, r3, #4, #4
 4773 007c 5340     		eors	r3, r3, r2
 4774              	.LVL436:
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4775              		.loc 1 113 3 is_stmt 1 view .LVU1323
 113:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4776              		.loc 1 113 7 is_stmt 0 view .LVU1324
 4777 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4778              	.LVL437:
 114:src/storage.c **** 	}
 4779              		.loc 1 114 3 is_stmt 1 view .LVU1325
 114:src/storage.c **** 	}
 4780              		.loc 1 114 25 is_stmt 0 view .LVU1326
 4781 0082 5C01     		lsls	r4, r3, #5
 4782 0084 04F4FF54 		and	r4, r4, #8160
 114:src/storage.c **** 	}
 4783              		.loc 1 114 7 view .LVU1327
 4784 0088 9BB2     		uxth	r3, r3
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4785              		.loc 1 109 2 view .LVU1328
 4786 008a 8142     		cmp	r1, r0
 114:src/storage.c **** 	}
 4787              		.loc 1 114 7 view .LVU1329
 4788 008c 84EA0304 		eor	r4, r4, r3
 4789              	.LVL438:
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4790              		.loc 1 109 27 is_stmt 1 view .LVU1330
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4791              		.loc 1 109 15 view .LVU1331
 109:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4792              		.loc 1 109 2 is_stmt 0 view .LVU1332
 4793 0090 EDD1     		bne	.L374
 4794              	.LVL439:
 4795              	.L373:
 116:src/storage.c **** }
 4796              		.loc 1 116 2 is_stmt 1 view .LVU1333
 116:src/storage.c **** }
 4797              		.loc 1 116 2 is_stmt 0 view .LVU1334
 4798              	.LBE116:
 4799              	.LBE114:
 979:src/storage.c **** 
 4800              		.loc 1 979 5 is_stmt 1 view .LVU1335
ARM GAS  /tmp/ccVDV1xv.s 			page 126


 4801 0092 DFF8D080 		ldr	r8, .L384+52
 981:src/storage.c ****     if (fss != 1) return;
 4802              		.loc 1 981 11 is_stmt 0 view .LVU1336
 4803 0096 274F     		ldr	r7, .L384+4
 979:src/storage.c **** 
 4804              		.loc 1 979 5 view .LVU1337
 4805 0098 0120     		movs	r0, #1
 4806 009a C047     		blx	r8
 4807              	.LVL440:
 981:src/storage.c ****     if (fss != 1) return;
 4808              		.loc 1 981 5 is_stmt 1 view .LVU1338
 981:src/storage.c ****     if (fss != 1) return;
 4809              		.loc 1 981 11 is_stmt 0 view .LVU1339
 4810 009c 0123     		movs	r3, #1
 4811 009e 04AA     		add	r2, sp, #16
 4812 00a0 CDE90132 		strd	r3, r2, [sp, #4]
 4813 00a4 0093     		str	r3, [sp]
 4814 00a6 244A     		ldr	r2, .L384+8
 4815 00a8 244B     		ldr	r3, .L384+12
 4816 00aa 2549     		ldr	r1, .L384+16
 4817 00ac 2548     		ldr	r0, .L384+20
 4818 00ae B847     		blx	r7
 4819              	.LVL441:
 982:src/storage.c **** 
 4820              		.loc 1 982 5 is_stmt 1 view .LVU1340
 982:src/storage.c **** 
 4821              		.loc 1 982 8 is_stmt 0 view .LVU1341
 4822 00b0 0128     		cmp	r0, #1
 4823 00b2 C9D1     		bne	.L367
 986:src/storage.c ****     if (!buffer) {// calloc failure!
 4824              		.loc 1 986 5 is_stmt 1 view .LVU1342
 986:src/storage.c ****     if (!buffer) {// calloc failure!
 4825              		.loc 1 986 14 is_stmt 0 view .LVU1343
 4826 00b4 0146     		mov	r1, r0
 4827 00b6 4FF48050 		mov	r0, #4096
 4828              	.LVL442:
 986:src/storage.c ****     if (!buffer) {// calloc failure!
 4829              		.loc 1 986 14 view .LVU1344
 4830 00ba FFF7FEFF 		bl	calloc
 4831              	.LVL443:
 987:src/storage.c ****       f_close(FPT);
 4832              		.loc 1 987 5 is_stmt 1 view .LVU1345
 987:src/storage.c ****       f_close(FPT);
 4833              		.loc 1 987 8 is_stmt 0 view .LVU1346
 4834 00be 0746     		mov	r7, r0
 4835 00c0 58B3     		cbz	r0, .L383
 994:src/storage.c ****     fr->size = steps;
 4836              		.loc 1 994 5 is_stmt 1 view .LVU1347
 4837              	.LVL444:
 995:src/storage.c ****     fr->crc = prog_crc;
 4838              		.loc 1 995 5 view .LVU1348
 996:src/storage.c **** 
 4839              		.loc 1 996 13 is_stmt 0 view .LVU1349
 4840 00c2 8146     		mov	r9, r0
 995:src/storage.c ****     fr->crc = prog_crc;
 4841              		.loc 1 995 14 view .LVU1350
 4842 00c4 4580     		strh	r5, [r0, #2]	@ movhi
ARM GAS  /tmp/ccVDV1xv.s 			page 127


 996:src/storage.c **** 
 4843              		.loc 1 996 5 is_stmt 1 view .LVU1351
 996:src/storage.c **** 
 4844              		.loc 1 996 13 is_stmt 0 view .LVU1352
 4845 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
 998:src/storage.c ****    
 4846              		.loc 1 998 5 is_stmt 1 view .LVU1353
 998:src/storage.c ****    
 4847              		.loc 1 998 22 is_stmt 0 view .LVU1354
 4848 00ca FFF7FEFF 		bl	get_current_prog
 4849              	.LVL445:
1000:src/storage.c ****     free(buffer);
 4850              		.loc 1 1000 9 view .LVU1355
 4851 00ce 1E4D     		ldr	r5, .L384+24
 4852              	.LVL446:
1000:src/storage.c ****     free(buffer);
 4853              		.loc 1 1000 9 view .LVU1356
 4854 00d0 1E4C     		ldr	r4, .L384+28
 4855              	.LVL447:
 998:src/storage.c ****    
 4856              		.loc 1 998 22 view .LVU1357
 4857 00d2 0146     		mov	r1, r0
 998:src/storage.c ****    
 4858              		.loc 1 998 5 view .LVU1358
 4859 00d4 3246     		mov	r2, r6
 4860 00d6 4846     		mov	r0, r9
 4861 00d8 FFF7FEFF 		bl	xcopy
 4862              	.LVL448:
1000:src/storage.c ****     free(buffer);
 4863              		.loc 1 1000 5 is_stmt 1 view .LVU1359
1000:src/storage.c ****     free(buffer);
 4864              		.loc 1 1000 9 is_stmt 0 view .LVU1360
 4865 00dc 321D     		adds	r2, r6, #4
 4866 00de 05AB     		add	r3, sp, #20
 4867 00e0 3946     		mov	r1, r7
 4868 00e2 6868     		ldr	r0, [r5, #4]
 4869 00e4 A047     		blx	r4
 4870              	.LVL449:
 4871 00e6 0446     		mov	r4, r0
1001:src/storage.c ****     
 4872              		.loc 1 1001 5 view .LVU1361
 4873 00e8 3846     		mov	r0, r7
 4874              	.LVL450:
1001:src/storage.c ****     
 4875              		.loc 1 1001 5 is_stmt 1 view .LVU1362
 4876 00ea FFF7FEFF 		bl	free
 4877              	.LVL451:
1003:src/storage.c ****       DispMsg = "Write err";
 4878              		.loc 1 1003 5 view .LVU1363
1007:src/storage.c ****     }
 4879              		.loc 1 1007 15 is_stmt 0 view .LVU1364
 4880 00ee 184B     		ldr	r3, .L384+32
 4881 00f0 1848     		ldr	r0, .L384+36
 4882 00f2 1949     		ldr	r1, .L384+40
1010:src/storage.c ****     sys_disk_write_enable(0);
 4883              		.loc 1 1010 5 view .LVU1365
 4884 00f4 194A     		ldr	r2, .L384+44
ARM GAS  /tmp/ccVDV1xv.s 			page 128


1007:src/storage.c ****     }
 4885              		.loc 1 1007 15 view .LVU1366
 4886 00f6 002C     		cmp	r4, #0
 4887 00f8 18BF     		it	ne
 4888 00fa 1846     		movne	r0, r3
 4889 00fc 0860     		str	r0, [r1]
1010:src/storage.c ****     sys_disk_write_enable(0);
 4890              		.loc 1 1010 5 is_stmt 1 view .LVU1367
 4891 00fe 6868     		ldr	r0, [r5, #4]
 4892 0100 9047     		blx	r2
 4893              	.LVL452:
1011:src/storage.c ****     
 4894              		.loc 1 1011 5 view .LVU1368
 4895 0102 0020     		movs	r0, #0
 4896 0104 C047     		blx	r8
 4897              	.LVL453:
 4898 0106 9FE7     		b	.L367
 4899              	.LVL454:
 4900              	.L382:
 959:src/storage.c ****       return;
 4901              		.loc 1 959 7 view .LVU1369
 4902 0108 0720     		movs	r0, #7
 4903 010a FFF7FEFF 		bl	error_message
 4904              	.LVL455:
 960:src/storage.c ****     }
 4905              		.loc 1 960 7 view .LVU1370
1014:src/storage.c **** 
 4906              		.loc 1 1014 1 is_stmt 0 view .LVU1371
 4907 010e 07B0     		add	sp, sp, #28
 4908              		.cfi_remember_state
 4909              		.cfi_def_cfa_offset 28
 4910              		@ sp needed
 4911 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4912              	.LVL456:
 4913              	.L378:
 4914              		.cfi_restore_state
 4915              	.LBB118:
 4916              	.LBB117:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4917              		.loc 1 105 21 view .LVU1372
 4918 0114 45F6A524 		movw	r4, #23205
 4919 0118 BBE7     		b	.L373
 4920              	.LVL457:
 4921              	.L383:
 105:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4922              		.loc 1 105 21 view .LVU1373
 4923              	.LBE117:
 4924              	.LBE118:
 988:src/storage.c ****       sys_disk_write_enable(0);
 4925              		.loc 1 988 7 is_stmt 1 view .LVU1374
 4926 011a 0B4A     		ldr	r2, .L384+24
 4927 011c 0F4B     		ldr	r3, .L384+44
 4928 011e 5068     		ldr	r0, [r2, #4]
 4929              	.LVL458:
 988:src/storage.c ****       sys_disk_write_enable(0);
 4930              		.loc 1 988 7 is_stmt 0 view .LVU1375
 4931 0120 9847     		blx	r3
ARM GAS  /tmp/ccVDV1xv.s 			page 129


 4932              	.LVL459:
 989:src/storage.c ****       DispMsg = "Mem short";
 4933              		.loc 1 989 7 is_stmt 1 view .LVU1376
 4934 0122 3846     		mov	r0, r7
 4935 0124 C047     		blx	r8
 4936              	.LVL460:
 990:src/storage.c ****       return;
 4937              		.loc 1 990 7 view .LVU1377
 990:src/storage.c ****       return;
 4938              		.loc 1 990 15 is_stmt 0 view .LVU1378
 4939 0126 0C4B     		ldr	r3, .L384+40
 4940 0128 0D4A     		ldr	r2, .L384+48
 4941 012a 1A60     		str	r2, [r3]
 991:src/storage.c ****     }
 4942              		.loc 1 991 7 is_stmt 1 view .LVU1379
 4943 012c 8CE7     		b	.L367
 4944              	.L385:
 4945 012e 00BF     		.align	2
 4946              	.L384:
 4947 0130 00000000 		.word	main_ram
 4948 0134 51030008 		.word	134218577
 4949 0138 14000000 		.word	.LC17
 4950 013c 00000000 		.word	open_selected_file
 4951 0140 30000000 		.word	.LC2
 4952 0144 14000000 		.word	.LC23
 4953 0148 00200010 		.word	268443648
 4954 014c 41040008 		.word	134218817
 4955 0150 00000000 		.word	.LC21
 4956 0154 0C000000 		.word	.LC22
 4957 0158 00000000 		.word	DispMsg
 4958 015c 39040008 		.word	134218809
 4959 0160 2C000000 		.word	.LC24
 4960 0164 E1030008 		.word	134218721
 4961              		.cfi_endproc
 4962              	.LFE39:
 4964              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4965              		.align	2
 4966              	.LC25:
 4967 0000 4C6F6164 		.ascii	"Load PROG File\000"
 4967      2050524F 
 4967      47204669 
 4967      6C6500
 4968 000f 00       		.align	2
 4969              	.LC26:
 4970 0010 46696C65 		.ascii	"File too big\000"
 4970      20746F6F 
 4970      20626967 
 4970      00
 4971 001d 000000   		.align	2
 4972              	.LC27:
 4973 0020 43524320 		.ascii	"CRC err\000"
 4973      65727200 
 4974              		.section	.text.load_prog_file,"ax",%progbits
 4975              		.align	1
 4976              		.p2align 2,,3
 4977              		.global	load_prog_file
 4978              		.syntax unified
ARM GAS  /tmp/ccVDV1xv.s 			page 130


 4979              		.thumb
 4980              		.thumb_func
 4981              		.fpu fpv4-sp-d16
 4983              	load_prog_file:
 4984              	.LFB40:
1016:src/storage.c ****   int fss, fsize;
 4985              		.loc 1 1016 24 view -0
 4986              		.cfi_startproc
 4987              		@ args = 0, pretend = 0, frame = 8
 4988              		@ frame_needed = 0, uses_anonymous_args = 0
1017:src/storage.c ****   int data = READ;
 4989              		.loc 1 1017 3 view .LVU1381
1018:src/storage.c ****   uint x=0;
 4990              		.loc 1 1018 3 view .LVU1382
1016:src/storage.c ****   int fss, fsize;
 4991              		.loc 1 1016 24 is_stmt 0 view .LVU1383
 4992 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4993              		.cfi_def_cfa_offset 20
 4994              		.cfi_offset 4, -20
 4995              		.cfi_offset 5, -16
 4996              		.cfi_offset 6, -12
 4997              		.cfi_offset 7, -8
 4998              		.cfi_offset 14, -4
 4999 0002 87B0     		sub	sp, sp, #28
 5000              		.cfi_def_cfa_offset 48
1019:src/storage.c ****   FLASH_REGION* fr;
 5001              		.loc 1 1019 8 view .LVU1384
 5002 0004 0023     		movs	r3, #0
1018:src/storage.c ****   uint x=0;
 5003              		.loc 1 1018 7 view .LVU1385
 5004 0006 0221     		movs	r1, #2
1023:src/storage.c ****   if (fss != 1) return;
 5005              		.loc 1 1023 9 view .LVU1386
 5006 0008 04AA     		add	r2, sp, #16
1019:src/storage.c ****   FLASH_REGION* fr;
 5007              		.loc 1 1019 8 view .LVU1387
 5008 000a CDE90413 		strd	r1, r3, [sp, #16]
1020:src/storage.c ****   char* buffer;
 5009              		.loc 1 1020 3 is_stmt 1 view .LVU1388
1021:src/storage.c **** 
 5010              		.loc 1 1021 3 view .LVU1389
1023:src/storage.c ****   if (fss != 1) return;
 5011              		.loc 1 1023 3 view .LVU1390
1023:src/storage.c ****   if (fss != 1) return;
 5012              		.loc 1 1023 9 is_stmt 0 view .LVU1391
 5013 000e CDE90033 		strd	r3, r3, [sp]
 5014 0012 0292     		str	r2, [sp, #8]
 5015 0014 2F4C     		ldr	r4, .L403
 5016 0016 304B     		ldr	r3, .L403+4
 5017 0018 304A     		ldr	r2, .L403+8
 5018 001a 3149     		ldr	r1, .L403+12
 5019 001c 3148     		ldr	r0, .L403+16
 5020 001e A047     		blx	r4
 5021              	.LVL461:
1024:src/storage.c **** 
 5022              		.loc 1 1024 3 is_stmt 1 view .LVU1392
1024:src/storage.c **** 
ARM GAS  /tmp/ccVDV1xv.s 			page 131


 5023              		.loc 1 1024 6 is_stmt 0 view .LVU1393
 5024 0020 0128     		cmp	r0, #1
 5025 0022 0BD1     		bne	.L386
1028:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5026              		.loc 1 1028 3 is_stmt 1 view .LVU1394
1028:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5027              		.loc 1 1028 11 is_stmt 0 view .LVU1395
 5028 0024 304F     		ldr	r7, .L403+20
 5029 0026 7D68     		ldr	r5, [r7, #4]
 5030 0028 EE68     		ldr	r6, [r5, #12]
 5031              	.LVL462:
1029:src/storage.c ****     f_close(FPT);
 5032              		.loc 1 1029 3 is_stmt 1 view .LVU1396
1029:src/storage.c ****     f_close(FPT);
 5033              		.loc 1 1029 6 is_stmt 0 view .LVU1397
 5034 002a B6F5804F 		cmp	r6, #16384
 5035 002e 07DD     		ble	.L388
1030:src/storage.c ****     DispMsg = "File too big";
 5036              		.loc 1 1030 5 is_stmt 1 view .LVU1398
 5037 0030 2E4B     		ldr	r3, .L403+24
 5038 0032 2846     		mov	r0, r5
 5039              	.LVL463:
1030:src/storage.c ****     DispMsg = "File too big";
 5040              		.loc 1 1030 5 is_stmt 0 view .LVU1399
 5041 0034 9847     		blx	r3
 5042              	.LVL464:
1031:src/storage.c ****     return;
 5043              		.loc 1 1031 5 is_stmt 1 view .LVU1400
1031:src/storage.c ****     return;
 5044              		.loc 1 1031 13 is_stmt 0 view .LVU1401
 5045 0036 2E4B     		ldr	r3, .L403+28
 5046 0038 2E4A     		ldr	r2, .L403+32
 5047 003a 1A60     		str	r2, [r3]
1032:src/storage.c ****   }
 5048              		.loc 1 1032 5 is_stmt 1 view .LVU1402
 5049              	.LVL465:
 5050              	.L386:
1065:src/storage.c **** 
 5051              		.loc 1 1065 1 is_stmt 0 view .LVU1403
 5052 003c 07B0     		add	sp, sp, #28
 5053              		.cfi_remember_state
 5054              		.cfi_def_cfa_offset 20
 5055              		@ sp needed
 5056 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 5057              	.LVL466:
 5058              	.L388:
 5059              		.cfi_restore_state
1034:src/storage.c ****   if (!buffer) {// calloc failure!
 5060              		.loc 1 1034 3 is_stmt 1 view .LVU1404
1034:src/storage.c ****   if (!buffer) {// calloc failure!
 5061              		.loc 1 1034 31 is_stmt 0 view .LVU1405
 5062 0040 26F0FF03 		bic	r3, r6, #255
1034:src/storage.c ****   if (!buffer) {// calloc failure!
 5063              		.loc 1 1034 12 view .LVU1406
 5064 0044 0146     		mov	r1, r0
 5065 0046 03F58070 		add	r0, r3, #256
 5066              	.LVL467:
ARM GAS  /tmp/ccVDV1xv.s 			page 132


1034:src/storage.c ****   if (!buffer) {// calloc failure!
 5067              		.loc 1 1034 12 view .LVU1407
 5068 004a FFF7FEFF 		bl	calloc
 5069              	.LVL468:
1035:src/storage.c ****     f_close(FPT);
 5070              		.loc 1 1035 3 is_stmt 1 view .LVU1408
1035:src/storage.c ****     f_close(FPT);
 5071              		.loc 1 1035 6 is_stmt 0 view .LVU1409
 5072 004e 0446     		mov	r4, r0
 5073 0050 0028     		cmp	r0, #0
 5074 0052 38D0     		beq	.L400
1041:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5075              		.loc 1 1041 3 is_stmt 1 view .LVU1410
 5076 0054 3246     		mov	r2, r6
 5077 0056 2846     		mov	r0, r5
 5078              	.LVL469:
1041:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5079              		.loc 1 1041 3 is_stmt 0 view .LVU1411
 5080 0058 05AB     		add	r3, sp, #20
 5081 005a 274D     		ldr	r5, .L403+36
 5082 005c 2146     		mov	r1, r4
 5083 005e A847     		blx	r5
 5084              	.LVL470:
1042:src/storage.c ****     free(buffer);
 5085              		.loc 1 1042 3 is_stmt 1 view .LVU1412
1042:src/storage.c ****     free(buffer);
 5086              		.loc 1 1042 8 is_stmt 0 view .LVU1413
 5087 0060 7868     		ldr	r0, [r7, #4]
1042:src/storage.c ****     free(buffer);
 5088              		.loc 1 1042 6 view .LVU1414
 5089 0062 8269     		ldr	r2, [r0, #24]
 5090 0064 C368     		ldr	r3, [r0, #12]
 5091 0066 9A42     		cmp	r2, r3
 5092 0068 1FD1     		bne	.L401
1048:src/storage.c **** 
 5093              		.loc 1 1048 3 is_stmt 1 view .LVU1415
 5094 006a 204B     		ldr	r3, .L403+24
 5095 006c 9847     		blx	r3
 5096              	.LVL471:
1050:src/storage.c ****     
 5097              		.loc 1 1050 3 view .LVU1416
1052:src/storage.c ****     unsigned short correct_crc = fr->crc; // get crc from after program end
 5098              		.loc 1 1052 3 view .LVU1417
1052:src/storage.c ****     unsigned short correct_crc = fr->crc; // get crc from after program end
 5099              		.loc 1 1052 7 is_stmt 0 view .LVU1418
 5100 006e 2146     		mov	r1, r4
 5101 0070 2046     		mov	r0, r4
 5102 0072 FFF7FEFF 		bl	checksum_region
 5103              	.LVL472:
1052:src/storage.c ****     unsigned short correct_crc = fr->crc; // get crc from after program end
 5104              		.loc 1 1052 6 view .LVU1419
 5105 0076 60B1     		cbz	r0, .L391
 5106              	.LBB119:
1053:src/storage.c ****     unsigned short end_of_prog = 4 + (fr->size)*2;
 5107              		.loc 1 1053 5 is_stmt 1 view .LVU1420
 5108              	.LVL473:
1054:src/storage.c ****     unsigned short possible_crc = buffer[end_of_prog] + buffer[end_of_prog+1]*256;
ARM GAS  /tmp/ccVDV1xv.s 			page 133


 5109              		.loc 1 1054 5 view .LVU1421
1055:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
 5110              		.loc 1 1055 5 view .LVU1422
1054:src/storage.c ****     unsigned short possible_crc = buffer[end_of_prog] + buffer[end_of_prog+1]*256;
 5111              		.loc 1 1054 20 is_stmt 0 view .LVU1423
 5112 0078 6388     		ldrh	r3, [r4, #2]
1056:src/storage.c ****       DispMsg = "CRC err";
 5113              		.loc 1 1056 8 view .LVU1424
 5114 007a 2288     		ldrh	r2, [r4]
1054:src/storage.c ****     unsigned short possible_crc = buffer[end_of_prog] + buffer[end_of_prog+1]*256;
 5115              		.loc 1 1054 20 view .LVU1425
 5116 007c 0233     		adds	r3, r3, #2
 5117 007e 5B00     		lsls	r3, r3, #1
1055:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
 5118              		.loc 1 1055 41 view .LVU1426
 5119 0080 9BB2     		uxth	r3, r3
 5120              	.LVL474:
1056:src/storage.c ****       DispMsg = "CRC err";
 5121              		.loc 1 1056 5 is_stmt 1 view .LVU1427
1055:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
 5122              		.loc 1 1055 63 is_stmt 0 view .LVU1428
 5123 0082 E118     		adds	r1, r4, r3
 5124              	.LVL475:
1055:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
 5125              		.loc 1 1055 41 view .LVU1429
 5126 0084 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 5127              	.LVL476:
1055:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
 5128              		.loc 1 1055 55 view .LVU1430
 5129 0086 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 5130              	.LVL477:
1055:src/storage.c ****     if (possible_crc != correct_crc) { // if still no good, bail out
 5131              		.loc 1 1055 20 view .LVU1431
 5132 0088 03EB0123 		add	r3, r3, r1, lsl #8
1056:src/storage.c ****       DispMsg = "CRC err";
 5133              		.loc 1 1056 8 view .LVU1432
 5134 008c 9BB2     		uxth	r3, r3
 5135 008e 9A42     		cmp	r2, r3
 5136 0090 15D1     		bne	.L402
 5137              	.LVL478:
 5138              	.L391:
1056:src/storage.c ****       DispMsg = "CRC err";
 5139              		.loc 1 1056 8 view .LVU1433
 5140              	.LBE119:
1063:src/storage.c ****   free(buffer);
 5141              		.loc 1 1063 3 is_stmt 1 view .LVU1434
 5142              	.LBB120:
 5143              	.LBI120:
1067:src/storage.c **** { // buffer contains all of program file
 5144              		.loc 1 1067 6 view .LVU1435
 5145              	.LBB121:
1069:src/storage.c ****   int space_needed, count, free;
 5146              		.loc 1 1069 3 view .LVU1436
1070:src/storage.c **** 
 5147              		.loc 1 1070 3 view .LVU1437
1072:src/storage.c ****     /*
 5148              		.loc 1 1072 3 view .LVU1438
ARM GAS  /tmp/ccVDV1xv.s 			page 134


1072:src/storage.c ****     /*
 5149              		.loc 1 1072 8 is_stmt 0 view .LVU1439
 5150 0092 FFF7FEFF 		bl	not_running
 5151              	.LVL479:
1072:src/storage.c ****     /*
 5152              		.loc 1 1072 6 view .LVU1440
 5153 0096 10B1     		cbz	r0, .L392
 5154 0098 2046     		mov	r0, r4
 5155 009a FFF7FEFF 		bl	store_program_from_buffer.part.0
 5156              	.LVL480:
 5157              	.L392:
1072:src/storage.c ****     /*
 5158              		.loc 1 1072 6 view .LVU1441
 5159              	.LBE121:
 5160              	.LBE120:
1064:src/storage.c **** }
 5161              		.loc 1 1064 3 is_stmt 1 view .LVU1442
 5162 009e 2046     		mov	r0, r4
1065:src/storage.c **** 
 5163              		.loc 1 1065 1 is_stmt 0 view .LVU1443
 5164 00a0 07B0     		add	sp, sp, #28
 5165              		.cfi_remember_state
 5166              		.cfi_def_cfa_offset 20
 5167              		@ sp needed
 5168 00a2 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5169              		.cfi_restore 14
 5170              		.cfi_restore 7
 5171              		.cfi_restore 6
 5172              		.cfi_restore 5
 5173              		.cfi_restore 4
 5174              		.cfi_def_cfa_offset 0
 5175              	.LVL481:
1064:src/storage.c **** }
 5176              		.loc 1 1064 3 view .LVU1444
 5177 00a6 FFF7FEBF 		b	free
 5178              	.LVL482:
 5179              	.L401:
 5180              		.cfi_restore_state
1043:src/storage.c ****     f_close(FPT);
 5181              		.loc 1 1043 5 is_stmt 1 view .LVU1445
 5182 00aa 2046     		mov	r0, r4
 5183 00ac FFF7FEFF 		bl	free
 5184              	.LVL483:
1044:src/storage.c ****     DispMsg = "Not at eof";
 5185              		.loc 1 1044 5 view .LVU1446
 5186 00b0 0E4B     		ldr	r3, .L403+24
 5187 00b2 7868     		ldr	r0, [r7, #4]
 5188 00b4 9847     		blx	r3
 5189              	.LVL484:
1045:src/storage.c ****     return;
 5190              		.loc 1 1045 5 view .LVU1447
1045:src/storage.c ****     return;
 5191              		.loc 1 1045 13 is_stmt 0 view .LVU1448
 5192 00b6 0E4B     		ldr	r3, .L403+28
 5193 00b8 104A     		ldr	r2, .L403+40
 5194 00ba 1A60     		str	r2, [r3]
1046:src/storage.c ****   }
ARM GAS  /tmp/ccVDV1xv.s 			page 135


 5195              		.loc 1 1046 5 is_stmt 1 view .LVU1449
 5196 00bc BEE7     		b	.L386
 5197              	.LVL485:
 5198              	.L402:
 5199              	.LBB122:
1057:src/storage.c ****       free(buffer);
 5200              		.loc 1 1057 7 view .LVU1450
1057:src/storage.c ****       free(buffer);
 5201              		.loc 1 1057 15 is_stmt 0 view .LVU1451
 5202 00be 0C4B     		ldr	r3, .L403+28
 5203 00c0 0F4A     		ldr	r2, .L403+44
 5204 00c2 1A60     		str	r2, [r3]
1058:src/storage.c ****       return;
 5205              		.loc 1 1058 7 is_stmt 1 view .LVU1452
 5206 00c4 EBE7     		b	.L392
 5207              	.LVL486:
 5208              	.L400:
1058:src/storage.c ****       return;
 5209              		.loc 1 1058 7 is_stmt 0 view .LVU1453
 5210              	.LBE122:
1036:src/storage.c ****     DispMsg = "Mem short";
 5211              		.loc 1 1036 5 is_stmt 1 view .LVU1454
 5212 00c6 094B     		ldr	r3, .L403+24
 5213 00c8 2846     		mov	r0, r5
 5214              	.LVL487:
1036:src/storage.c ****     DispMsg = "Mem short";
 5215              		.loc 1 1036 5 is_stmt 0 view .LVU1455
 5216 00ca 9847     		blx	r3
 5217              	.LVL488:
1037:src/storage.c ****     return;
 5218              		.loc 1 1037 5 is_stmt 1 view .LVU1456
1037:src/storage.c ****     return;
 5219              		.loc 1 1037 13 is_stmt 0 view .LVU1457
 5220 00cc 084B     		ldr	r3, .L403+28
 5221 00ce 0D4A     		ldr	r2, .L403+48
 5222 00d0 1A60     		str	r2, [r3]
1038:src/storage.c ****   }
 5223              		.loc 1 1038 5 is_stmt 1 view .LVU1458
 5224 00d2 B3E7     		b	.L386
 5225              	.L404:
 5226              		.align	2
 5227              	.L403:
 5228 00d4 51030008 		.word	134218577
 5229 00d8 00000000 		.word	open_selected_file
 5230 00dc 14000000 		.word	.LC17
 5231 00e0 30000000 		.word	.LC2
 5232 00e4 00000000 		.word	.LC25
 5233 00e8 00200010 		.word	268443648
 5234 00ec 39040008 		.word	134218809
 5235 00f0 00000000 		.word	DispMsg
 5236 00f4 10000000 		.word	.LC26
 5237 00f8 3D040008 		.word	134218813
 5238 00fc 14000000 		.word	.LC15
 5239 0100 20000000 		.word	.LC27
 5240 0104 2C000000 		.word	.LC24
 5241              		.cfi_endproc
 5242              	.LFE40:
ARM GAS  /tmp/ccVDV1xv.s 			page 136


 5244              		.section	.text.store_program_from_buffer,"ax",%progbits
 5245              		.align	1
 5246              		.p2align 2,,3
 5247              		.global	store_program_from_buffer
 5248              		.syntax unified
 5249              		.thumb
 5250              		.thumb_func
 5251              		.fpu fpv4-sp-d16
 5253              	store_program_from_buffer:
 5254              	.LVL489:
 5255              	.LFB41:
1068:src/storage.c ****   unsigned int pc;
 5256              		.loc 1 1068 1 view -0
 5257              		.cfi_startproc
 5258              		@ args = 0, pretend = 0, frame = 0
 5259              		@ frame_needed = 0, uses_anonymous_args = 0
1069:src/storage.c ****   int space_needed, count, free;
 5260              		.loc 1 1069 3 view .LVU1460
1070:src/storage.c **** 
 5261              		.loc 1 1070 3 view .LVU1461
1072:src/storage.c ****     /*
 5262              		.loc 1 1072 3 view .LVU1462
1068:src/storage.c ****   unsigned int pc;
 5263              		.loc 1 1068 1 is_stmt 0 view .LVU1463
 5264 0000 10B5     		push	{r4, lr}
 5265              		.cfi_def_cfa_offset 8
 5266              		.cfi_offset 4, -8
 5267              		.cfi_offset 14, -4
1068:src/storage.c ****   unsigned int pc;
 5268              		.loc 1 1068 1 view .LVU1464
 5269 0002 0446     		mov	r4, r0
1072:src/storage.c ****     /*
 5270              		.loc 1 1072 8 view .LVU1465
 5271 0004 FFF7FEFF 		bl	not_running
 5272              	.LVL490:
1072:src/storage.c ****     /*
 5273              		.loc 1 1072 6 view .LVU1466
 5274 0008 20B1     		cbz	r0, .L405
 5275 000a 2046     		mov	r0, r4
 5276              		.loc 1 1114 1 view .LVU1467
 5277 000c BDE81040 		pop	{r4, lr}
 5278              		.cfi_remember_state
 5279              		.cfi_restore 14
 5280              		.cfi_restore 4
 5281              		.cfi_def_cfa_offset 0
 5282              	.LVL491:
 5283              		.loc 1 1114 1 view .LVU1468
 5284 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5285              	.LVL492:
 5286              	.L405:
 5287              		.cfi_restore_state
 5288              		.loc 1 1114 1 view .LVU1469
 5289 0014 10BD     		pop	{r4, pc}
 5290              		.loc 1 1114 1 view .LVU1470
 5291              		.cfi_endproc
 5292              	.LFE41:
 5294              		.comm	XromA2D,64,4
ARM GAS  /tmp/ccVDV1xv.s 			page 137


 5295              		.comm	XromLocal,464,4
 5296              		.comm	XromParams,16,4
 5297              		.comm	StateWhileOn,52,4
 5298              		.comm	library_ram,4,4
 5299              		.comm	backup_ram,4,4
 5300              		.comm	main_ram,4,4
 5301 0016 00BF     		.text
 5302              	.Letext0:
 5303              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5304              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5305              		.file 4 "/usr/include/newlib/sys/_types.h"
 5306              		.file 5 "/usr/include/newlib/sys/reent.h"
 5307              		.file 6 "/usr/include/newlib/sys/lock.h"
 5308              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5309              		.file 8 "/usr/include/newlib/sys/types.h"
 5310              		.file 9 "/usr/include/newlib/stdlib.h"
 5311              		.file 10 "dmcp/ff_ifc.h"
 5312              		.file 11 "dmcp/dmcp.h"
 5313              		.file 12 "src/decNumber/decContext.h"
 5314              		.file 13 "src/decNumber/decNumber.h"
 5315              		.file 14 "src/decNumber/decimal64.h"
 5316              		.file 15 "src/decNumber/decimal128.h"
 5317              		.file 16 "src/xeq.h"
 5318              		.file 17 "src/data.h"
 5319              		.file 18 "src/storage.h"
 5320              		.file 19 "src/display.h"
 5321              		.file 20 "src/stats.h"
 5322              		.file 21 "src/alpha.h"
 5323              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccVDV1xv.s 			page 138


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/ccVDV1xv.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/ccVDV1xv.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/ccVDV1xv.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/ccVDV1xv.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/ccVDV1xv.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/ccVDV1xv.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/ccVDV1xv.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/ccVDV1xv.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:305    .text.program_flash:0000000000000000 $t
     /tmp/ccVDV1xv.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/ccVDV1xv.s:568    .text.program_flash:00000000000000d4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/ccVDV1xv.s:584    .text.flash_append:0000000000000000 $t
     /tmp/ccVDV1xv.s:591    .text.flash_append:0000000000000000 flash_append
     /tmp/ccVDV1xv.s:762    .text.flash_append:000000000000009c $d
     /tmp/ccVDV1xv.s:768    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:775    .text.open_selected_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:783    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/ccVDV1xv.s:899    .text.open_selected_file:0000000000000050 $d
     /tmp/ccVDV1xv.s:910    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:914    .text.init_mem:0000000000000000 $t
     /tmp/ccVDV1xv.s:922    .text.init_mem:0000000000000000 init_mem
     /tmp/ccVDV1xv.s:986    .text.init_mem:0000000000000030 $d
     /tmp/ccVDV1xv.s:994    .text.crc16:0000000000000000 $t
     /tmp/ccVDV1xv.s:1002   .text.crc16:0000000000000000 crc16
     /tmp/ccVDV1xv.s:1081   .text.checksum_program:0000000000000000 $t
     /tmp/ccVDV1xv.s:1089   .text.checksum_program:0000000000000000 checksum_program
     /tmp/ccVDV1xv.s:1201   .text.checksum_program:0000000000000058 $d
     /tmp/ccVDV1xv.s:1206   .text.checksum_ram:0000000000000000 $t
     /tmp/ccVDV1xv.s:1214   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/ccVDV1xv.s:1233   .text.checksum_ram:0000000000000014 $d
     /tmp/ccVDV1xv.s:1238   .text.checksum_backup:0000000000000000 $t
     /tmp/ccVDV1xv.s:1246   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/ccVDV1xv.s:1378   .text.checksum_backup:0000000000000054 $d
     /tmp/ccVDV1xv.s:1383   .text.clpall:0000000000000000 $t
     /tmp/ccVDV1xv.s:1391   .text.clpall:0000000000000000 clpall
     /tmp/ccVDV1xv.s:1430   .text.clpall:0000000000000018 $d
     /tmp/ccVDV1xv.s:1435   .text.clrall:0000000000000000 $t
     /tmp/ccVDV1xv.s:1443   .text.clrall:0000000000000000 clrall
     /tmp/ccVDV1xv.s:1529   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/ccVDV1xv.s:1536   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:1540   .text.reset:0000000000000000 $t
     /tmp/ccVDV1xv.s:1548   .text.reset:0000000000000000 reset
     /tmp/ccVDV1xv.s:1588   .text.reset:0000000000000028 $d
     /tmp/ccVDV1xv.s:1596   .text.stoprog:0000000000000000 $t
     /tmp/ccVDV1xv.s:1604   .text.stoprog:0000000000000000 stoprog
     /tmp/ccVDV1xv.s:1812   .text.stoprog:00000000000000e4 $d
     /tmp/ccVDV1xv.s:1818   .text.delprog:0000000000000000 $t
     /tmp/ccVDV1xv.s:1826   .text.delprog:0000000000000000 delprog
     /tmp/ccVDV1xv.s:1941   .text.delprog:0000000000000068 $d
     /tmp/ccVDV1xv.s:1946   .text.append_program:0000000000000000 $t
     /tmp/ccVDV1xv.s:1954   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/ccVDV1xv.s 			page 139


     /tmp/ccVDV1xv.s:2175   .text.append_program:00000000000000c0 $d
     /tmp/ccVDV1xv.s:2183   .text.check_create_wp34sdir:0000000000000000 $t
     /tmp/ccVDV1xv.s:2191   .text.check_create_wp34sdir:0000000000000000 check_create_wp34sdir
     /tmp/ccVDV1xv.s:2232   .text.check_create_wp34sdir:0000000000000018 $d
     /tmp/ccVDV1xv.s:2239   .text.init_library:0000000000000000 $t
     /tmp/ccVDV1xv.s:2247   .text.init_library:0000000000000000 init_library
     /tmp/ccVDV1xv.s:2309   .text.init_library:0000000000000034 $d
     /tmp/ccVDV1xv.s:2314   .text.flash_remove:0000000000000000 $t
     /tmp/ccVDV1xv.s:2322   .text.flash_remove:0000000000000000 flash_remove
     /tmp/ccVDV1xv.s:2369   .text.flash_remove:0000000000000024 $d
     /tmp/ccVDV1xv.s:2374   .text.clrprog:0000000000000000 $t
     /tmp/ccVDV1xv.s:2382   .text.clrprog:0000000000000000 clrprog
     /tmp/ccVDV1xv.s:2513   .text.clrprog:0000000000000090 $d
     /tmp/ccVDV1xv.s:2518   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:2522   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/ccVDV1xv.s:2529   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/ccVDV1xv.s:2728   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/ccVDV1xv.s:2738   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:2745   .text.flash_backup:0000000000000000 $t
     /tmp/ccVDV1xv.s:2753   .text.flash_backup:0000000000000000 flash_backup
     /tmp/ccVDV1xv.s:2834   .text.flash_backup:0000000000000048 $d
     /tmp/ccVDV1xv.s:2843   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:2847   .text.flash_restore:0000000000000000 $t
     /tmp/ccVDV1xv.s:2855   .text.flash_restore:0000000000000000 flash_restore
     /tmp/ccVDV1xv.s:2914   .text.flash_restore:0000000000000034 $d
     /tmp/ccVDV1xv.s:2922   .text.load_program:0000000000000000 $t
     /tmp/ccVDV1xv.s:2930   .text.load_program:0000000000000000 load_program
     /tmp/ccVDV1xv.s:3042   .text.load_program:000000000000003c $d
     /tmp/ccVDV1xv.s:3048   .text.load_registers:0000000000000000 $t
     /tmp/ccVDV1xv.s:3056   .text.load_registers:0000000000000000 load_registers
     /tmp/ccVDV1xv.s:3150   .text.load_registers:000000000000004c $d
     /tmp/ccVDV1xv.s:3156   .text.load_sigma:0000000000000000 $t
     /tmp/ccVDV1xv.s:3164   .text.load_sigma:0000000000000000 load_sigma
     /tmp/ccVDV1xv.s:3236   .text.load_sigma:0000000000000040 $d
     /tmp/ccVDV1xv.s:3241   .text.load_state:0000000000000000 $t
     /tmp/ccVDV1xv.s:3249   .text.load_state:0000000000000000 load_state
     /tmp/ccVDV1xv.s:3319   .text.load_state:000000000000003c $d
     /tmp/ccVDV1xv.s:3325   .text.store_program:0000000000000000 $t
     /tmp/ccVDV1xv.s:3333   .text.store_program:0000000000000000 store_program
     /tmp/ccVDV1xv.s:3569   .text.store_program:00000000000000d4 $d
     /tmp/ccVDV1xv.s:3576   .text.recall_program:0000000000000000 $t
     /tmp/ccVDV1xv.s:3584   .text.recall_program:0000000000000000 recall_program
     /tmp/ccVDV1xv.s:3645   .text.recall_program:000000000000003c $d
     /tmp/ccVDV1xv.s:3650   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:3660   .text.save_lib_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:3668   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/ccVDV1xv.s:3822   .text.save_lib_file:0000000000000084 $d
     /tmp/ccVDV1xv.s:3841   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:3848   .text.load_lib_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:3856   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/ccVDV1xv.s:3996   .text.load_lib_file:0000000000000080 $d
     /tmp/ccVDV1xv.s:4015   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:4025   .text.save_ram_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:4033   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/ccVDV1xv.s:4210   .text.save_ram_file:000000000000009c $d
     /tmp/ccVDV1xv.s:4229   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:4233   .text.load_ram_file:0000000000000000 $t
ARM GAS  /tmp/ccVDV1xv.s 			page 140


     /tmp/ccVDV1xv.s:4241   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/ccVDV1xv.s:4422   .text.load_ram_file:000000000000009c $d
     /tmp/ccVDV1xv.s:4441   .rodata.load_backup_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:4445   .text.load_backup_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:4453   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/ccVDV1xv.s:4593   .text.load_backup_file:0000000000000080 $d
     /tmp/ccVDV1xv.s:4612   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:4625   .text.save_prog_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:4633   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/ccVDV1xv.s:4947   .text.save_prog_file:0000000000000130 $d
     /tmp/ccVDV1xv.s:4965   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/ccVDV1xv.s:4975   .text.load_prog_file:0000000000000000 $t
     /tmp/ccVDV1xv.s:4983   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/ccVDV1xv.s:5228   .text.load_prog_file:00000000000000d4 $d
     /tmp/ccVDV1xv.s:5245   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/ccVDV1xv.s:5253   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
error_message
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free
ARM GAS  /tmp/ccVDV1xv.s 			page 141



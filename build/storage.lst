ARM GAS  /tmp/ccsMEfLZ.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** 
  24:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  25:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  26:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  27:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  28:src/storage.c **** 
  29:src/storage.c **** #ifndef NULL
ARM GAS  /tmp/ccsMEfLZ.s 			page 2


  30:src/storage.c **** #define NULL 0
  31:src/storage.c **** #endif
  32:src/storage.c **** 
  33:src/storage.c **** #else // not realbuild
  34:src/storage.c **** 
  35:src/storage.c **** // Emulator definitions
  36:src/storage.c **** #include <stdio.h>
  37:src/storage.c **** #include <stdlib.h>
  38:src/storage.c **** #include <stddef.h>
  39:src/storage.c **** #include <string.h>
  40:src/storage.c **** #include <stdarg.h>
  41:src/storage.c **** 
  42:src/storage.c **** #ifdef DM42
  43:src/storage.c **** #include "features.h"
  44:src/storage.c **** #include "dmcp.h"
  45:src/storage.c **** #endif
  46:src/storage.c **** 
  47:src/storage.c **** #ifndef DM42
  48:src/storage.c **** 
  49:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  50:src/storage.c **** #include <errno.h>
  51:src/storage.c **** #include <stdlib.h>
  52:src/storage.c **** #include <unistd.h>
  53:src/storage.c **** #endif
  54:src/storage.c **** 
  55:src/storage.c **** #endif
  56:src/storage.c **** 
  57:src/storage.c **** #define PERSISTENT_RAM
  58:src/storage.c **** #define SLCDCMEM
  59:src/storage.c **** #define VOLATILE_RAM
  60:src/storage.c **** #define BACKUP_FLASH
  61:src/storage.c **** 
  62:src/storage.c **** #ifdef DM42
  63:src/storage.c **** #ifdef C_VERSION
  64:src/storage.c **** #define STATE_FILE "wp34s/wp34c.dat"
  65:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup.dat"
  66:src/storage.c **** #else
  67:src/storage.c **** #define STATE_FILE "wp34s/wp34s.dat"
  68:src/storage.c **** #define BACKUP_FILE "wp34s/wp34s-backup.dat"
  69:src/storage.c **** #endif
  70:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  71:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  72:src/storage.c **** 
  73:src/storage.c **** #else
  74:src/storage.c **** 
  75:src/storage.c **** #define STATE_FILE "wp34c.dat"
  76:src/storage.c **** #define BACKUP_FILE "wp34c-backup.dat"
  77:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
  78:src/storage.c **** 
  79:src/storage.c **** #endif
  80:src/storage.c **** #endif
  81:src/storage.c **** 
  82:src/storage.c **** #define DM42SAFE
  83:src/storage.c **** #include "xeq.h"
  84:src/storage.c **** #include "storage.h"
  85:src/storage.c **** #include "display.h"
  86:src/storage.c **** #include "stats.h"
ARM GAS  /tmp/ccsMEfLZ.s 			page 3


  87:src/storage.c **** #include "alpha.h"
  88:src/storage.c **** #undef DM42SAFE
  89:src/storage.c **** 
  90:src/storage.c **** #ifdef DM42
  91:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
  92:src/storage.c **** #else
  93:src/storage.c **** #define PAGE_SIZE	 256
  94:src/storage.c **** #endif
  95:src/storage.c **** 
  96:src/storage.c **** /*
  97:src/storage.c ****  *  Setup the persistent RAM
  98:src/storage.c ****  */
  99:src/storage.c **** #ifdef DM42
 100:src/storage.c **** 
 101:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
 102:src/storage.c **** FLASH_REGION *library_ram;
 103:src/storage.c **** 
 104:src/storage.c **** void init_mem () { // called at start of program_main in console.c
 105:src/storage.c ****   char *v;
 106:src/storage.c **** 
 107:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
 108:src/storage.c ****   if (v == NULL) {
 109:src/storage.c ****     perror("calloc failed");
 110:src/storage.c ****     return;
 111:src/storage.c ****   }
 112:src/storage.c ****   main_ram = (TPersistentRam *) v;
 113:src/storage.c ****   v += RAM_SIZE;
 114:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 115:src/storage.c ****   v += RAM_SIZE;
 116:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 117:src/storage.c **** }
 118:src/storage.c **** 
 119:src/storage.c **** #else
 120:src/storage.c **** 
 121:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
 122:src/storage.c **** 
 123:src/storage.c **** #endif
 124:src/storage.c **** 
 125:src/storage.c **** /*
 126:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 127:src/storage.c ****  */
 128:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 129:src/storage.c **** 
 130:src/storage.c **** /*
 131:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 132:src/storage.c ****  *  It replaces the local registers and flags if active.
 133:src/storage.c ****  */
 134:src/storage.c **** TXromParams XromParams;
 135:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 136:src/storage.c **** 
 137:src/storage.c **** /* Private space for four registers temporarily
 138:src/storage.c ****  */
 139:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 140:src/storage.c **** 
 141:src/storage.c **** /*
 142:src/storage.c ****  *  The backup flash area:
 143:src/storage.c ****  *  2 KB for storage of programs and registers
ARM GAS  /tmp/ccsMEfLZ.s 			page 4


 144:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 145:src/storage.c ****  */
 146:src/storage.c **** #if !defined(REALBUILD)
 147:src/storage.c **** /*
 148:src/storage.c ****  *  We need to define the Library space here.
 149:src/storage.c ****  *  On the device the linker takes care of this.
 150:src/storage.c ****  */
 151:src/storage.c **** #ifdef DM42 // has already been done by init_mem above
 152:src/storage.c **** #else
 153:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 154:src/storage.c **** FLASH_REGION UserFlash;
 155:src/storage.c **** #endif
 156:src/storage.c **** #endif
 157:src/storage.c **** 
 158:src/storage.c **** /*
 159:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 160:src/storage.c ****  */
 161:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 162:src/storage.c **** {
 163:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 164:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 165:src/storage.c **** 	unsigned int i;
 166:src/storage.c **** 
 167:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 168:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 169:src/storage.c **** 		crc ^= *d++;
 170:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 171:src/storage.c **** 		crc ^= crc << 12;
 172:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 173:src/storage.c **** 	}
 174:src/storage.c **** 	return crc;
 175:src/storage.c **** }
 176:src/storage.c **** 
 177:src/storage.c **** 
 178:src/storage.c **** /*
 179:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 180:src/storage.c ****  *  Returns non zero value if failure
 181:src/storage.c ****  */
 182:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 183:src/storage.c **** {
  30              		.loc 1 183 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 184:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 184 2 view .LVU1
 185:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 185 2 view .LVU2
  37              	.LBB38:
  38              	.LBI38:
 161:src/storage.c **** {
  39              		.loc 1 161 20 view .LVU3
  40              	.LBB39:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 163 2 view .LVU4
 164:src/storage.c **** 	unsigned int i;
ARM GAS  /tmp/ccsMEfLZ.s 			page 5


  42              		.loc 1 164 2 view .LVU5
 165:src/storage.c **** 
  43              		.loc 1 165 2 view .LVU6
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 167 2 view .LVU7
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 167 15 view .LVU8
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 167 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE39:
  49              	.LBE38:
 183:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 183 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB42:
  57              	.LBB40:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 163 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 168:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 168 3 is_stmt 1 view .LVU12
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 169 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 169 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 169 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 169 3 is_stmt 1 view .LVU16
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 169 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 170:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 170 3 is_stmt 1 view .LVU18
 170:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 170 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 171 3 is_stmt 1 view .LVU20
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 171 7 is_stmt 0 view .LVU21
ARM GAS  /tmp/ccsMEfLZ.s 			page 6


  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 172:src/storage.c **** 	}
  85              		.loc 1 172 3 is_stmt 1 view .LVU22
 172:src/storage.c **** 	}
  86              		.loc 1 172 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 172:src/storage.c **** 	}
  89              		.loc 1 172 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 167 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 172:src/storage.c **** 	}
  93              		.loc 1 172 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 167 27 is_stmt 1 view .LVU27
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 167 15 view .LVU28
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 167 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 174:src/storage.c **** }
 100              		.loc 1 174 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 174:src/storage.c **** }
 102              		.loc 1 174 2 is_stmt 0 view .LVU31
 103              	.LBE40:
 104              	.LBE42:
 186:src/storage.c **** 	
 187:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 187 2 is_stmt 1 view .LVU32
 188:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 188 3 view .LVU33
 189:src/storage.c **** 	}
 190:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 190 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 188:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 188 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 190 2 is_stmt 1 view .LVU36
 112              		.loc 1 190 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 190 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 191:src/storage.c **** }
 119              		.loc 1 191 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
ARM GAS  /tmp/ccsMEfLZ.s 			page 7


 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
 190:src/storage.c **** }
 128              		.loc 1 190 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 191 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB43:
 139              	.LBB41:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 163 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 174:src/storage.c **** }
 143              		.loc 1 174 2 is_stmt 1 view .LVU43
 174:src/storage.c **** }
 144              		.loc 1 174 2 is_stmt 0 view .LVU44
 145              	.LBE41:
 146              	.LBE43:
 187:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 187 2 is_stmt 1 view .LVU45
 188:src/storage.c **** 	}
 148              		.loc 1 188 3 view .LVU46
 190:src/storage.c **** }
 149              		.loc 1 190 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 188:src/storage.c **** 	}
 151              		.loc 1 188 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 190:src/storage.c **** }
 153              		.loc 1 190 2 is_stmt 1 view .LVU49
 190:src/storage.c **** }
 154              		.loc 1 190 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 190:src/storage.c **** }
 158              		.loc 1 190 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 190:src/storage.c **** }
 165              		.loc 1 190 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
ARM GAS  /tmp/ccsMEfLZ.s 			page 8


 168              		.loc 1 191 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 192:src/storage.c **** 
 193:src/storage.c **** 
 194:src/storage.c **** /*
 195:src/storage.c ****  *  Checksum the current program.
 196:src/storage.c ****  */
 197:src/storage.c **** short unsigned int checksum_program( void )
 198:src/storage.c **** {
 199:src/storage.c **** 	update_program_bounds( 1 );
 200:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 201:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 202:src/storage.c **** }
 203:src/storage.c **** 
 204:src/storage.c **** 
 205:src/storage.c **** /*
 206:src/storage.c ****  *  Checksum the persistent RAM area
 207:src/storage.c ****  *  Returns non zero value if failure
 208:src/storage.c ****  */
 209:src/storage.c **** int checksum_ram( void )
 210:src/storage.c **** {
 211:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 212:src/storage.c **** 			      Crc, &Crc );
 213:src/storage.c **** }
 214:src/storage.c **** 
 215:src/storage.c **** 
 216:src/storage.c **** /*
 217:src/storage.c ****  *  Checksum the backup flash region
 218:src/storage.c ****  *  Returns non zero value if failure
 219:src/storage.c ****  */
 220:src/storage.c **** int checksum_backup( void )
 221:src/storage.c **** {
 222:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 223:src/storage.c **** 		              BackupFlash._crc, NULL );
 224:src/storage.c **** }
 225:src/storage.c **** 
 226:src/storage.c **** 
 227:src/storage.c **** /*
 228:src/storage.c ****  *  Checksum a flash region
 229:src/storage.c ****  *  Returns non zero value if failure
 230:src/storage.c ****  */
 231:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 232:src/storage.c **** {
 184              		.loc 1 232 1 is_stmt 1 view -0
 185              		.cfi_startproc
ARM GAS  /tmp/ccsMEfLZ.s 			page 9


 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 233:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 233 2 view .LVU55
 189              		.loc 1 233 25 is_stmt 0 view .LVU56
 190 0000 4B88     		ldrh	r3, [r1, #2]
 234:src/storage.c **** 	
 235:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 235 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 235 2 is_stmt 1 view .LVU58
 195              		.loc 1 235 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 236:src/storage.c **** }
 200              		.loc 1 236 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 232:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 232 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 235:src/storage.c **** }
 210              		.loc 1 235 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 235:src/storage.c **** }
 213              		.loc 1 235 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 235:src/storage.c **** }
 216              		.loc 1 235 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 235:src/storage.c **** }
 219              		.loc 1 235 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 235:src/storage.c **** }
 222              		.loc 1 235 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 236 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
 232              		.align	1
 233              		.p2align 2,,3
ARM GAS  /tmp/ccsMEfLZ.s 			page 10


 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
 240              	.LVL23:
 241              	.LFB12:
 237:src/storage.c **** 
 238:src/storage.c **** 
 239:src/storage.c **** /*
 240:src/storage.c ****  *  Helper to store final END in empty program space
 241:src/storage.c ****  */
 242:src/storage.c **** static void stoend( void )
 243:src/storage.c **** {
 244:src/storage.c **** 	ProgSize = 1;
 245:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 246:src/storage.c **** }
 247:src/storage.c **** 
 248:src/storage.c **** 
 249:src/storage.c **** /*
 250:src/storage.c ****  *  Clear the program space
 251:src/storage.c ****  */
 252:src/storage.c **** void clpall( void )
 253:src/storage.c **** {
 254:src/storage.c **** 	clrretstk_pc();
 255:src/storage.c **** 	stoend();
 256:src/storage.c **** }
 257:src/storage.c **** 
 258:src/storage.c **** 
 259:src/storage.c **** /*
 260:src/storage.c ****  *  Sanity checks for program (step) deletion
 261:src/storage.c ****  */
 262:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 263:src/storage.c **** {
 242              		.loc 1 263 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 264:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 264 2 view .LVU69
 247              		.loc 1 264 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 263:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 263 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 264 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 264 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 264 20 discriminator 1 view .LVU74
 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
ARM GAS  /tmp/ccsMEfLZ.s 			page 11


 263              	.LVL24:
 264              	.L29:
 265:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 266:src/storage.c **** 	}
 267:src/storage.c **** 	else {
 268:src/storage.c **** 		return 0;
 265              		.loc 1 268 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 269:src/storage.c **** 	}
 270:src/storage.c **** 	return 1;
 271:src/storage.c **** }
 267              		.loc 1 271 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 264:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 264 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 264:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 264 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 265:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 265 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 270:src/storage.c **** }
 282              		.loc 1 270 2 view .LVU80
 270:src/storage.c **** }
 283              		.loc 1 270 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 271 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34s-backup.dat\000"
 297      732F7770 
 297      3334732D 
 297      6261636B 
 297      75702E64 
 298 0017 00       		.align	2
 299              	.LC1:
 300 0018 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
 300      6C69622E 
 300      64617400 
ARM GAS  /tmp/ccsMEfLZ.s 			page 12


 301              		.align	2
 302              	.LC2:
 303 002c 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 272:src/storage.c **** 
 273:src/storage.c **** 
 274:src/storage.c **** /*
 275:src/storage.c ****  *  Clear just the current program
 276:src/storage.c ****  */
 277:src/storage.c **** void clrprog( void )
 278:src/storage.c **** {
 279:src/storage.c **** 	update_program_bounds( 1 );
 280:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 281:src/storage.c **** 		/*
 282:src/storage.c **** 		 *  Porgram is in flash
 283:src/storage.c **** 		 */
 284:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 285:src/storage.c **** 	}
 286:src/storage.c **** 	else {
 287:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 288:src/storage.c **** 			return;
 289:src/storage.c **** 		}
 290:src/storage.c **** 		clrretstk();
 291:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 292:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 293:src/storage.c **** 		if ( ProgSize == 0 ) {
 294:src/storage.c **** 			stoend();
 295:src/storage.c **** 		}
 296:src/storage.c **** 	}
 297:src/storage.c **** 	set_pc( ProgBegin - 1 );
 298:src/storage.c **** 	update_program_bounds( 1 );
 299:src/storage.c **** }
 300:src/storage.c ****  
 301:src/storage.c **** 
 302:src/storage.c **** /*
 303:src/storage.c ****  *  Clear all - programs and registers
 304:src/storage.c ****  */
 305:src/storage.c **** void clrall(void) 
 306:src/storage.c **** {
 307:src/storage.c **** 	NumRegs = TOPREALREG;
 308:src/storage.c **** 	xeq_init_contexts();
 309:src/storage.c **** 	clrreg( OP_CLREG );
 310:src/storage.c **** 	clrstk( OP_CLSTK );
 311:src/storage.c **** 	clralpha( OP_CLRALPHA );
 312:src/storage.c **** 	clrflags( OP_CLFLAGS );
 313:src/storage.c **** 	clpall();
 314:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 13


 315:src/storage.c **** 	reset_shift();
 316:src/storage.c **** 	State2.test = TST_NONE;
 317:src/storage.c **** 
 318:src/storage.c **** 	DispMsg = NULL;
 319:src/storage.c **** }
 320:src/storage.c **** 
 321:src/storage.c **** 
 322:src/storage.c **** /*
 323:src/storage.c ****  *  Clear everything
 324:src/storage.c ****  */
 325:src/storage.c **** void reset( void ) 
 326:src/storage.c **** {
 327:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 328:src/storage.c **** 	clrall();
 329:src/storage.c **** 	init_state();
 330:src/storage.c **** #ifndef DM42
 331:src/storage.c **** 	UState.contrast = 6;
 332:src/storage.c **** #endif
 333:src/storage.c **** #ifdef INFRARED
 334:src/storage.c **** #ifdef DM42
 335:src/storage.c **** 	printer_set_delay(1800);
 336:src/storage.c **** #else
 337:src/storage.c ****         State.print_delay = 10;
 338:src/storage.c **** #endif
 339:src/storage.c **** #endif
 340:src/storage.c **** 	DispMsg = "Erased";
 341:src/storage.c **** }
 342:src/storage.c **** 
 343:src/storage.c **** 
 344:src/storage.c **** /*
 345:src/storage.c ****  *  Store into program space.
 346:src/storage.c ****  */
 347:src/storage.c **** void stoprog( opcode c ) {
 348:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 349:src/storage.c **** 	int i;
 350:src/storage.c **** 	unsigned int pc = state_pc();
 351:src/storage.c **** 
 352:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 353:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 354:src/storage.c **** 
 355:src/storage.c **** 	if ( !isRAM( pc ) ) {
 356:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 357:src/storage.c **** 		return;
 358:src/storage.c **** 	}
 359:src/storage.c **** 	clrretstk();
 360:src/storage.c **** 	xeq_init_contexts();
 361:src/storage.c **** 	if ( ProgFree < off ) {
 362:src/storage.c **** 		return;
 363:src/storage.c **** 	}
 364:src/storage.c **** 	ProgSize += off;
 365:src/storage.c **** 	ProgEnd += off;
 366:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 367:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 368:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 369:src/storage.c **** 	}
 370:src/storage.c **** 	if (isDBL(c))
 371:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
ARM GAS  /tmp/ccsMEfLZ.s 			page 14


 372:src/storage.c **** 	Prog_1[pc] = c;
 373:src/storage.c **** 	State.pc = pc;
 374:src/storage.c **** }
 375:src/storage.c **** 
 376:src/storage.c **** 
 377:src/storage.c **** /*
 378:src/storage.c ****  *  Delete the current step in the program
 379:src/storage.c ****  */
 380:src/storage.c **** void delprog( void )
 381:src/storage.c **** {
 382:src/storage.c **** 	int i;
 383:src/storage.c **** 	const unsigned int pc = state_pc();
 384:src/storage.c **** 	int off;
 385:src/storage.c **** 
 386:src/storage.c **** 	if ( check_delete_prog( pc ) )
 387:src/storage.c **** 		return;
 388:src/storage.c **** 	if ( pc == 0 )
 389:src/storage.c **** 		return;
 390:src/storage.c **** 
 391:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 392:src/storage.c **** 	ProgSize -= off;
 393:src/storage.c **** 	ProgEnd -= off;
 394:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 395:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 396:src/storage.c **** 	decpc();
 397:src/storage.c **** }
 398:src/storage.c **** 
 399:src/storage.c **** 
 400:src/storage.c **** /*
 401:src/storage.c ****  *  Helper to append a program in RAM.
 402:src/storage.c ****  *  Returns non zero in case of an error.
 403:src/storage.c ****  */
 404:src/storage.c **** int append_program( const s_opcode *source, int length )
 405:src/storage.c **** {
 406:src/storage.c **** 	unsigned short pc;
 407:src/storage.c **** 	int space_needed = length - ProgFree;
 408:src/storage.c **** 
 409:src/storage.c **** 	if ( ProgSize == 1 ) {
 410:src/storage.c **** 		/*
 411:src/storage.c **** 		 *  Only the default END statement is present
 412:src/storage.c **** 		 */
 413:src/storage.c **** 		--space_needed;
 414:src/storage.c **** 		--ProgSize;
 415:src/storage.c **** 	}
 416:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 417:src/storage.c **** 		return report_err( ERR_INVALID );
 418:src/storage.c **** 	}
 419:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 420:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 421:src/storage.c **** 	}
 422:src/storage.c **** 
 423:src/storage.c **** 	/*
 424:src/storage.c **** 	 *  Make room if needed
 425:src/storage.c **** 	 */
 426:src/storage.c **** 	clrretstk();
 427:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 428:src/storage.c **** 		space_needed -= SizeStatRegs;
ARM GAS  /tmp/ccsMEfLZ.s 			page 15


 429:src/storage.c **** 		sigmaDeallocate();
 430:src/storage.c **** 	}
 431:src/storage.c **** 	if ( space_needed > 0 ) {
 432:src/storage.c **** 		int regs;
 433:src/storage.c **** 		if (is_dblmode())
 434:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 435:src/storage.c **** 		else
 436:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 437:src/storage.c **** 
 438:src/storage.c **** 		if ( regs < 0 ) {
 439:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 440:src/storage.c **** 		}
 441:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 442:src/storage.c **** 	}
 443:src/storage.c **** 	/*
 444:src/storage.c **** 	 *  Append data
 445:src/storage.c **** 	 */
 446:src/storage.c **** 	pc = ProgSize + 1;
 447:src/storage.c **** 	ProgSize += length;
 448:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 449:src/storage.c **** 	set_pc( pc );
 450:src/storage.c **** 	return 0;
 451:src/storage.c **** }
 452:src/storage.c **** 
 453:src/storage.c **** 
 454:src/storage.c **** #ifdef REALBUILD
 455:src/storage.c **** /*
 456:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 457:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 458:src/storage.c ****  *  IAP feature in ROM instead
 459:src/storage.c ****  */
 460:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 461:src/storage.c **** 
 462:src/storage.c **** /*
 463:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 464:src/storage.c ****  *  Returns zero if OK or non zero on error.
 465:src/storage.c ****  */
 466:src/storage.c **** static int flash_command( unsigned int cmd )
 467:src/storage.c **** {
 468:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 469:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 470:src/storage.c **** }
 471:src/storage.c **** 
 472:src/storage.c **** /*
 473:src/storage.c ****  *  Program the flash starting at destination.
 474:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 475:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 476:src/storage.c ****  */
 477:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 478:src/storage.c **** {
 479:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 480:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 481:src/storage.c **** 
 482:src/storage.c **** 	lock();  // No interrupts, please!
 483:src/storage.c **** 
 484:src/storage.c **** 	while ( count-- > 0 ) {
 485:src/storage.c **** 		/*
ARM GAS  /tmp/ccsMEfLZ.s 			page 16


 486:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 487:src/storage.c **** 		 */
 488:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 489:src/storage.c **** 		int i;
 490:src/storage.c **** 
 491:src/storage.c **** 		/*
 492:src/storage.c **** 		 *  Copy the source to the flash write buffer
 493:src/storage.c **** 		 */
 494:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
 495:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 496:src/storage.c **** 		}
 497:src/storage.c **** 
 498:src/storage.c **** 		/*
 499:src/storage.c **** 		 *  Command the controller to erase and write the page.
 500:src/storage.c **** 		 */
 501:src/storage.c **** 		if ( flash_command( cmd ) ) {
 502:src/storage.c **** 			report_err( ERR_IO );
 503:src/storage.c **** 			break;
 504:src/storage.c **** 		}
 505:src/storage.c **** 	}
 506:src/storage.c **** 	unlock();
 507:src/storage.c **** 	return Error != 0;
 508:src/storage.c **** }
 509:src/storage.c **** 
 510:src/storage.c **** 
 511:src/storage.c **** /*
 512:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 513:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 514:src/storage.c ****  */
 515:src/storage.c **** void sam_ba_boot(void)
 516:src/storage.c **** {
 517:src/storage.c **** 	/*
 518:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 519:src/storage.c **** 	 */
 520:src/storage.c **** 	lock();
 521:src/storage.c **** 	flash_command( 0x5A00010C );
 522:src/storage.c **** 	SUPC_Shutdown();
 523:src/storage.c **** }
 524:src/storage.c **** 
 525:src/storage.c **** 
 526:src/storage.c **** #else // below here, it's not REALBUILD
 527:src/storage.c **** 
 528:src/storage.c **** /*
 529:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34c-backup.dat
 530:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 531:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 532:src/storage.c ****  */
 533:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 534:src/storage.c **** extern char* get_region_path(int region);
 535:src/storage.c **** #else
 536:src/storage.c **** static char* get_region_path(int region)
 537:src/storage.c **** {
 538:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 539:src/storage.c **** }
 540:src/storage.c **** #endif
 541:src/storage.c **** 
 542:src/storage.c **** #ifdef DM42
ARM GAS  /tmp/ccsMEfLZ.s 			page 17


 543:src/storage.c **** 
 544:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 545:src/storage.c **** {
 315              		.loc 1 545 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 546:src/storage.c ****   char *name;
 319              		.loc 1 546 3 view .LVU84
 547:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 547 3 view .LVU85
 545:src/storage.c ****   char *name;
 321              		.loc 1 545 1 is_stmt 0 view .LVU86
 322 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 548:src/storage.c ****   int offset;
 549:src/storage.c ****   uint x=0;
 550:src/storage.c **** 
 551:src/storage.c ****   /*
 552:src/storage.c ****    *  Copy the source to the destination memory
 553:src/storage.c ****    */
 554:src/storage.c **** 
 555:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 332              		.loc 1 555 3 view .LVU87
 333 0004 1702     		lsls	r7, r2, #8
 545:src/storage.c ****   char *name;
 334              		.loc 1 545 1 view .LVU88
 335 0006 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 40
 549:src/storage.c **** 
 337              		.loc 1 549 8 view .LVU89
 338 0008 0023     		movs	r3, #0
 339              		.loc 1 555 3 view .LVU90
 340 000a 3A46     		mov	r2, r7
 341              	.LVL29:
 545:src/storage.c ****   char *name;
 342              		.loc 1 545 1 view .LVU91
 343 000c 0546     		mov	r5, r0
 344              	.LVL30:
 548:src/storage.c ****   int offset;
 345              		.loc 1 548 3 is_stmt 1 view .LVU92
 549:src/storage.c **** 
 346              		.loc 1 549 3 view .LVU93
 549:src/storage.c **** 
 347              		.loc 1 549 8 is_stmt 0 view .LVU94
 348 000e 0193     		str	r3, [sp, #4]
 349              		.loc 1 555 3 is_stmt 1 view .LVU95
 350 0010 FFF7FEFF 		bl	xcopy
 351              	.LVL31:
ARM GAS  /tmp/ccsMEfLZ.s 			page 18


 556:src/storage.c **** 
 557:src/storage.c ****   /*
 558:src/storage.c ****    *  Update the correct region file
 559:src/storage.c ****    */
 560:src/storage.c **** 
 561:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 352              		.loc 1 561 3 view .LVU96
 353              		.loc 1 561 16 is_stmt 0 view .LVU97
 354 0014 2F4B     		ldr	r3, .L56
 355 0016 1E68     		ldr	r6, [r3]
 356              		.loc 1 561 6 view .LVU98
 357 0018 AE42     		cmp	r6, r5
 358 001a 03D8     		bhi	.L37
 359              		.loc 1 561 70 discriminator 1 view .LVU99
 360 001c 06F50063 		add	r3, r6, #2048
 361              		.loc 1 561 38 discriminator 1 view .LVU100
 362 0020 9D42     		cmp	r5, r3
 363 0022 2FD3     		bcc	.L54
 364              	.L37:
 562:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 563:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 564:src/storage.c ****   }
 565:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 365              		.loc 1 565 8 is_stmt 1 view .LVU101
 366              		.loc 1 565 21 is_stmt 0 view .LVU102
 367 0024 2C4B     		ldr	r3, .L56+4
 368 0026 1E68     		ldr	r6, [r3]
 369              		.loc 1 565 11 view .LVU103
 370 0028 AE42     		cmp	r6, r5
 371 002a 2FD8     		bhi	.L39
 372              		.loc 1 565 71 discriminator 1 view .LVU104
 373 002c 06F58043 		add	r3, r6, #16384
 374              		.loc 1 565 41 discriminator 1 view .LVU105
 375 0030 9D42     		cmp	r5, r3
 376 0032 2BD2     		bcs	.L39
 566:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 377              		.loc 1 566 5 is_stmt 1 view .LVU106
 378              	.LVL32:
 379              	.LBB44:
 380              	.LBI44:
 536:src/storage.c **** {
 381              		.loc 1 536 14 view .LVU107
 382              	.LBE44:
 538:src/storage.c **** }
 383              		.loc 1 538 2 view .LVU108
 567:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 567 5 view .LVU109
 566:src/storage.c ****     offset = dest - (char *) &UserFlash;
 385              		.loc 1 566 12 is_stmt 0 view .LVU110
 386 0034 DFF8C490 		ldr	r9, .L56+40
 387              		.loc 1 567 12 view .LVU111
 388 0038 AE1B     		subs	r6, r5, r6
 389              	.LVL33:
 390              	.L38:
 568:src/storage.c ****   }
 569:src/storage.c ****   else {
 570:src/storage.c ****     // Bad address
ARM GAS  /tmp/ccsMEfLZ.s 			page 19


 571:src/storage.c ****     report_err( ERR_ILLEGAL );
 572:src/storage.c ****     return 1;
 573:src/storage.c ****   }
 574:src/storage.c ****   FRESULT f;
 391              		.loc 1 574 3 is_stmt 1 view .LVU112
 575:src/storage.c **** 
 576:src/storage.c ****   f = check_create_wp34sdir ();
 392              		.loc 1 576 3 view .LVU113
 393              	.LBB45:
 394              	.LBI45:
 577:src/storage.c ****   if ( f != FR_OK ) {
 578:src/storage.c ****     return f;
 579:src/storage.c ****   }
 580:src/storage.c ****   sys_disk_write_enable(1);
 581:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 582:src/storage.c ****   if ( f != FR_OK ) {
 583:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 584:src/storage.c ****   }
 585:src/storage.c ****   if ( f != FR_OK ) {
 586:src/storage.c ****     sys_disk_write_enable(0);
 587:src/storage.c ****     return 1;
 588:src/storage.c ****   }
 589:src/storage.c ****   f_lseek( FPT, offset );
 590:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 591:src/storage.c ****   if (f != FR_OK) {
 592:src/storage.c ****     f_close( FPT );
 593:src/storage.c ****     sys_disk_write_enable(0);
 594:src/storage.c ****     return 1;
 595:src/storage.c ****   }
 596:src/storage.c ****   f = f_close( FPT );
 597:src/storage.c ****   if ( f != FR_OK ) {
 598:src/storage.c ****     sys_disk_write_enable(0);
 599:src/storage.c ****     return 1;
 600:src/storage.c ****   }
 601:src/storage.c ****   sys_disk_write_enable(0);
 602:src/storage.c ****   return 0;
 603:src/storage.c **** }
 604:src/storage.c **** 
 605:src/storage.c **** int check_create_wp34sdir(void) {
 395              		.loc 1 605 5 view .LVU114
 396              	.LBB46:
 606:src/storage.c ****   FRESULT f;
 397              		.loc 1 606 3 view .LVU115
 607:src/storage.c ****   sys_disk_write_enable(1);
 398              		.loc 1 607 3 view .LVU116
 399 003a DFF8AC80 		ldr	r8, .L56+20
 400 003e 0120     		movs	r0, #1
 401 0040 C047     		blx	r8
 402              	.LVL34:
 608:src/storage.c ****   f = check_create_dir ("/wp34s");
 403              		.loc 1 608 3 view .LVU117
 404              		.loc 1 608 7 is_stmt 0 view .LVU118
 405 0042 264B     		ldr	r3, .L56+8
 406 0044 2648     		ldr	r0, .L56+12
 407 0046 9847     		blx	r3
 408              	.LVL35:
 409 0048 0446     		mov	r4, r0
ARM GAS  /tmp/ccsMEfLZ.s 			page 20


 410              	.LVL36:
 609:src/storage.c ****   sys_disk_write_enable(0);
 411              		.loc 1 609 3 is_stmt 1 view .LVU119
 412 004a 0020     		movs	r0, #0
 413 004c C047     		blx	r8
 414              	.LVL37:
 610:src/storage.c ****   return f;
 415              		.loc 1 610 3 view .LVU120
 416              		.loc 1 610 3 is_stmt 0 view .LVU121
 417              	.LBE46:
 418              	.LBE45:
 577:src/storage.c ****     return f;
 419              		.loc 1 577 3 is_stmt 1 view .LVU122
 577:src/storage.c ****     return f;
 420              		.loc 1 577 6 is_stmt 0 view .LVU123
 421 004e 14F0FF04 		ands	r4, r4, #255
 422              	.LVL38:
 577:src/storage.c ****     return f;
 423              		.loc 1 577 6 view .LVU124
 424 0052 36D1     		bne	.L53
 580:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 425              		.loc 1 580 3 is_stmt 1 view .LVU125
 581:src/storage.c ****   if ( f != FR_OK ) {
 426              		.loc 1 581 7 is_stmt 0 view .LVU126
 427 0054 DFF894A0 		ldr	r10, .L56+24
 428 0058 224C     		ldr	r4, .L56+16
 580:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 429              		.loc 1 580 3 view .LVU127
 430 005a 0120     		movs	r0, #1
 431 005c C047     		blx	r8
 432              	.LVL39:
 581:src/storage.c ****   if ( f != FR_OK ) {
 433              		.loc 1 581 3 is_stmt 1 view .LVU128
 581:src/storage.c ****   if ( f != FR_OK ) {
 434              		.loc 1 581 7 is_stmt 0 view .LVU129
 435 005e DAF80400 		ldr	r0, [r10, #4]
 436 0062 0322     		movs	r2, #3
 437 0064 4946     		mov	r1, r9
 438 0066 A047     		blx	r4
 439              	.LVL40:
 582:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 440              		.loc 1 582 3 is_stmt 1 view .LVU130
 582:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 441              		.loc 1 582 6 is_stmt 0 view .LVU131
 442 0068 B8B1     		cbz	r0, .L42
 583:src/storage.c ****   }
 443              		.loc 1 583 5 is_stmt 1 view .LVU132
 583:src/storage.c ****   }
 444              		.loc 1 583 9 is_stmt 0 view .LVU133
 445 006a DAF80400 		ldr	r0, [r10, #4]
 446              	.LVL41:
 583:src/storage.c ****   }
 447              		.loc 1 583 9 view .LVU134
 448 006e 4946     		mov	r1, r9
 449 0070 0B22     		movs	r2, #11
 450 0072 A047     		blx	r4
 451              	.LVL42:
ARM GAS  /tmp/ccsMEfLZ.s 			page 21


 585:src/storage.c ****     sys_disk_write_enable(0);
 452              		.loc 1 585 3 is_stmt 1 view .LVU135
 585:src/storage.c ****     sys_disk_write_enable(0);
 453              		.loc 1 585 6 is_stmt 0 view .LVU136
 454 0074 88B1     		cbz	r0, .L42
 455              	.LVL43:
 456              	.L52:
 593:src/storage.c ****     return 1;
 457              		.loc 1 593 5 is_stmt 1 view .LVU137
 458 0076 1C4B     		ldr	r3, .L56+20
 459 0078 0020     		movs	r0, #0
 460 007a 9847     		blx	r3
 461              	.LVL44:
 594:src/storage.c ****   }
 462              		.loc 1 594 5 view .LVU138
 594:src/storage.c ****   }
 463              		.loc 1 594 12 is_stmt 0 view .LVU139
 464 007c 0120     		movs	r0, #1
 603:src/storage.c **** 
 465              		.loc 1 603 1 view .LVU140
 466 007e 02B0     		add	sp, sp, #8
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 32
 469              		@ sp needed
 470 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 471              	.LVL45:
 472              	.L54:
 473              		.cfi_restore_state
 562:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 474              		.loc 1 562 5 is_stmt 1 view .LVU141
 475              	.LBB47:
 476              	.LBI47:
 536:src/storage.c **** {
 477              		.loc 1 536 14 view .LVU142
 478              	.LBE47:
 538:src/storage.c **** }
 479              		.loc 1 538 2 view .LVU143
 563:src/storage.c ****   }
 480              		.loc 1 563 5 view .LVU144
 562:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 481              		.loc 1 562 12 is_stmt 0 view .LVU145
 482 0084 DFF87890 		ldr	r9, .L56+44
 563:src/storage.c ****   }
 483              		.loc 1 563 12 view .LVU146
 484 0088 AE1B     		subs	r6, r5, r6
 485              	.LVL46:
 563:src/storage.c ****   }
 486              		.loc 1 563 12 view .LVU147
 487 008a D6E7     		b	.L38
 488              	.LVL47:
 489              	.L39:
 571:src/storage.c ****     return 1;
 490              		.loc 1 571 5 is_stmt 1 view .LVU148
 491 008c 0720     		movs	r0, #7
 492 008e FFF7FEFF 		bl	report_err
 493              	.LVL48:
 572:src/storage.c ****   }
ARM GAS  /tmp/ccsMEfLZ.s 			page 22


 494              		.loc 1 572 5 view .LVU149
 572:src/storage.c ****   }
 495              		.loc 1 572 12 is_stmt 0 view .LVU150
 496 0092 0120     		movs	r0, #1
 603:src/storage.c **** 
 497              		.loc 1 603 1 view .LVU151
 498 0094 02B0     		add	sp, sp, #8
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
 501              		@ sp needed
 502 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 503              	.LVL49:
 504              	.L42:
 505              		.cfi_restore_state
 589:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 506              		.loc 1 589 3 is_stmt 1 view .LVU152
 507 009a 144C     		ldr	r4, .L56+24
 508 009c 144B     		ldr	r3, .L56+28
 509 009e 6068     		ldr	r0, [r4, #4]
 510 00a0 3146     		mov	r1, r6
 511 00a2 9847     		blx	r3
 512              	.LVL50:
 590:src/storage.c ****   if (f != FR_OK) {
 513              		.loc 1 590 3 view .LVU153
 590:src/storage.c ****   if (f != FR_OK) {
 514              		.loc 1 590 7 is_stmt 0 view .LVU154
 515 00a4 2946     		mov	r1, r5
 516 00a6 6068     		ldr	r0, [r4, #4]
 517 00a8 124D     		ldr	r5, .L56+32
 518              	.LVL51:
 590:src/storage.c ****   if (f != FR_OK) {
 519              		.loc 1 590 7 view .LVU155
 520 00aa 3A46     		mov	r2, r7
 521 00ac 01AB     		add	r3, sp, #4
 522 00ae A847     		blx	r5
 523              	.LVL52:
 591:src/storage.c ****     f_close( FPT );
 524              		.loc 1 591 3 is_stmt 1 view .LVU156
 591:src/storage.c ****     f_close( FPT );
 525              		.loc 1 591 6 is_stmt 0 view .LVU157
 526 00b0 58B9     		cbnz	r0, .L55
 596:src/storage.c ****   if ( f != FR_OK ) {
 527              		.loc 1 596 3 is_stmt 1 view .LVU158
 596:src/storage.c ****   if ( f != FR_OK ) {
 528              		.loc 1 596 7 is_stmt 0 view .LVU159
 529 00b2 6068     		ldr	r0, [r4, #4]
 530              	.LVL53:
 596:src/storage.c ****   if ( f != FR_OK ) {
 531              		.loc 1 596 7 view .LVU160
 532 00b4 104B     		ldr	r3, .L56+36
 533 00b6 9847     		blx	r3
 534              	.LVL54:
 597:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 597 3 is_stmt 1 view .LVU161
 597:src/storage.c ****     sys_disk_write_enable(0);
 536              		.loc 1 597 6 is_stmt 0 view .LVU162
 537 00b8 0446     		mov	r4, r0
ARM GAS  /tmp/ccsMEfLZ.s 			page 23


 538 00ba 0028     		cmp	r0, #0
 539 00bc DBD1     		bne	.L52
 601:src/storage.c ****   return 0;
 540              		.loc 1 601 3 is_stmt 1 view .LVU163
 541 00be 0A4B     		ldr	r3, .L56+20
 542 00c0 9847     		blx	r3
 543              	.LVL55:
 544              	.L53:
 602:src/storage.c **** }
 545              		.loc 1 602 3 view .LVU164
 602:src/storage.c **** }
 546              		.loc 1 602 10 is_stmt 0 view .LVU165
 547 00c2 2046     		mov	r0, r4
 603:src/storage.c **** 
 548              		.loc 1 603 1 view .LVU166
 549 00c4 02B0     		add	sp, sp, #8
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 32
 552              		@ sp needed
 553 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 554              	.LVL56:
 555              	.L55:
 556              		.cfi_restore_state
 592:src/storage.c ****     sys_disk_write_enable(0);
 557              		.loc 1 592 5 is_stmt 1 view .LVU167
 558 00ca 6068     		ldr	r0, [r4, #4]
 559              	.LVL57:
 592:src/storage.c ****     sys_disk_write_enable(0);
 560              		.loc 1 592 5 is_stmt 0 view .LVU168
 561 00cc 0A4B     		ldr	r3, .L56+36
 562 00ce 9847     		blx	r3
 563              	.LVL58:
 564 00d0 D1E7     		b	.L52
 565              	.L57:
 566 00d2 00BF     		.align	2
 567              	.L56:
 568 00d4 00000000 		.word	backup_ram
 569 00d8 00000000 		.word	library_ram
 570 00dc D1030008 		.word	134218705
 571 00e0 2C000000 		.word	.LC2
 572 00e4 35040008 		.word	134218805
 573 00e8 E1030008 		.word	134218721
 574 00ec 00200010 		.word	268443648
 575 00f0 45040008 		.word	134218821
 576 00f4 41040008 		.word	134218817
 577 00f8 39040008 		.word	134218809
 578 00fc 18000000 		.word	.LC1
 579 0100 00000000 		.word	.LC0
 580              		.cfi_endproc
 581              	.LFE20:
 583              		.section	.text.flash_append,"ax",%progbits
 584              		.align	1
 585              		.p2align 2,,3
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccsMEfLZ.s 			page 24


 591              	flash_append:
 592              	.LVL59:
 593              	.LFB23:
 611:src/storage.c **** }
 612:src/storage.c **** 
 613:src/storage.c **** #else //ifdef DM42 false
 614:src/storage.c **** 
 615:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 616:src/storage.c **** {
 617:src/storage.c ****   char *name;
 618:src/storage.c ****   char *dest = (char *) destination;
 619:src/storage.c ****   FILE *f = NULL;
 620:src/storage.c ****   int offset;
 621:src/storage.c **** 
 622:src/storage.c ****   /*
 623:src/storage.c ****    *  Copy the source to the destination memory
 624:src/storage.c ****    */
 625:src/storage.c **** 
 626:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 627:src/storage.c **** 
 628:src/storage.c ****   /*
 629:src/storage.c ****    *  Update the correct region file
 630:src/storage.c ****    */
 631:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 632:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 633:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 634:src/storage.c ****   }
 635:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 636:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 637:src/storage.c ****     offset = dest - (char *) &UserFlash;
 638:src/storage.c ****   }
 639:src/storage.c ****   else {
 640:src/storage.c ****     // Bad address
 641:src/storage.c ****     report_err( ERR_ILLEGAL );
 642:src/storage.c ****     return 1;
 643:src/storage.c ****   }
 644:src/storage.c **** 
 645:src/storage.c ****   f = fopen( name, "rb+" );
 646:src/storage.c ****   if ( f == NULL ) {
 647:src/storage.c ****     f = fopen( name, "wb+" );
 648:src/storage.c ****   }
 649:src/storage.c ****   if ( f == NULL ) {
 650:src/storage.c ****     report_err( ERR_IO );
 651:src/storage.c ****     return 1;
 652:src/storage.c ****   }
 653:src/storage.c ****   fseek( f, offset, SEEK_SET );
 654:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 655:src/storage.c ****     fclose( f );
 656:src/storage.c ****     report_err( ERR_IO );
 657:src/storage.c ****     return 1;
 658:src/storage.c ****   }
 659:src/storage.c ****   fclose( f );
 660:src/storage.c ****  return 0;
 661:src/storage.c **** }
 662:src/storage.c ****   
 663:src/storage.c **** #endif //ifdef DM42
 664:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 25


 665:src/storage.c **** 
 666:src/storage.c **** #endif //ifdef REALBUILD
 667:src/storage.c **** 
 668:src/storage.c **** 
 669:src/storage.c **** /*
 670:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 671:src/storage.c ****  */
 672:src/storage.c **** void init_library( void )
 673:src/storage.c **** {
 674:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 675:src/storage.c **** 	  struct {
 676:src/storage.c **** 			unsigned short crc;
 677:src/storage.c **** 			unsigned short size;
 678:src/storage.c **** 			s_opcode prog[ 126 ];
 679:src/storage.c **** 		} lib;
 680:src/storage.c **** 		lib.size = 0;
 681:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 682:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 683:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 684:src/storage.c **** 	}
 685:src/storage.c **** }
 686:src/storage.c **** 
 687:src/storage.c **** 
 688:src/storage.c **** /*
 689:src/storage.c ****  *  Add data at the end of user flash memory.
 690:src/storage.c ****  *  Update crc and counter when done.
 691:src/storage.c ****  *  All sizes are given in steps.
 692:src/storage.c ****  */
 693:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 694:src/storage.c **** {
 594              		.loc 1 694 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 256
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 695:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 598              		.loc 1 695 3 view .LVU170
 694:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 599              		.loc 1 694 1 is_stmt 0 view .LVU171
 600 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 601              		.cfi_def_cfa_offset 36
 602              		.cfi_offset 4, -36
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 6, -28
 605              		.cfi_offset 7, -24
 606              		.cfi_offset 8, -20
 607              		.cfi_offset 9, -16
 608              		.cfi_offset 10, -12
 609              		.cfi_offset 11, -8
 610              		.cfi_offset 14, -4
 611              		.loc 1 695 27 view .LVU172
 612 0004 254F     		ldr	r7, .L70
 613 0006 3C68     		ldr	r4, [r7]
 614 0008 251D     		adds	r5, r4, #4
 615              		.loc 1 695 9 view .LVU173
 616 000a 05EB4006 		add	r6, r5, r0, lsl #1
 617              	.LVL60:
 696:src/storage.c ****   char *src = (char *) source;
ARM GAS  /tmp/ccsMEfLZ.s 			page 26


 618              		.loc 1 696 3 is_stmt 1 view .LVU174
 697:src/storage.c **** #ifdef REALBUILD
 698:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 699:src/storage.c **** #else
 700:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 619              		.loc 1 700 31 is_stmt 0 view .LVU175
 620 000e 341B     		subs	r4, r6, r4
 701:src/storage.c **** #endif
 702:src/storage.c ****   char buffer[ PAGE_SIZE ];
 703:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 704:src/storage.c ****   count <<= 1;
 705:src/storage.c **** 
 706:src/storage.c ****   if ( offset_in_page != 0 ) {
 621              		.loc 1 706 6 view .LVU176
 622 0010 14F0FF04 		ands	r4, r4, #255
 694:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 623              		.loc 1 694 1 view .LVU177
 624 0014 C1B0     		sub	sp, sp, #260
 625              		.cfi_def_cfa_offset 296
 694:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 626              		.loc 1 694 1 view .LVU178
 627 0016 8846     		mov	r8, r1
 628              	.LVL61:
 700:src/storage.c **** #endif
 629              		.loc 1 700 3 is_stmt 1 view .LVU179
 702:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 630              		.loc 1 702 3 view .LVU180
 703:src/storage.c ****   count <<= 1;
 631              		.loc 1 703 3 view .LVU181
 704:src/storage.c **** 
 632              		.loc 1 704 3 view .LVU182
 704:src/storage.c **** 
 633              		.loc 1 704 9 is_stmt 0 view .LVU183
 634 0018 4FEA4205 		lsl	r5, r2, #1
 635              	.LVL62:
 636              		.loc 1 706 3 is_stmt 1 view .LVU184
 694:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 637              		.loc 1 694 1 is_stmt 0 view .LVU185
 638 001c 9946     		mov	r9, r3
 639              		.loc 1 706 6 view .LVU186
 640 001e 21D1     		bne	.L69
 641              	.LVL63:
 642              	.L59:
 707:src/storage.c ****     /*
 708:src/storage.c ****      *  We are not on a page boundary
 709:src/storage.c ****      *  Assemble a buffer from existing and new data
 710:src/storage.c ****      */
 711:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 712:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 715:src/storage.c ****       return 1;
 716:src/storage.c ****     }
 717:src/storage.c ****     src += bytes;
 718:src/storage.c ****     dest += bytes;
 719:src/storage.c ****     count -= bytes;
 720:src/storage.c ****   }
ARM GAS  /tmp/ccsMEfLZ.s 			page 27


 721:src/storage.c **** 
 722:src/storage.c ****   if ( count > 0 ) {
 643              		.loc 1 722 3 is_stmt 1 view .LVU187
 644              		.loc 1 722 6 is_stmt 0 view .LVU188
 645 0020 002D     		cmp	r5, #0
 646 0022 07DD     		ble	.L64
 723:src/storage.c ****     /*
 724:src/storage.c ****      *  Move multiples of complete pages
 725:src/storage.c ****      */
 726:src/storage.c **** #ifdef DM42
 727:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
 647              		.loc 1 727 5 is_stmt 1 view .LVU189
 648              		.loc 1 727 21 is_stmt 0 view .LVU190
 649 0024 05F1FF02 		add	r2, r5, #255
 650              	.LVL64:
 728:src/storage.c **** #else
 729:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 730:src/storage.c **** #endif
 731:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 651              		.loc 1 731 5 is_stmt 1 view .LVU191
 652              		.loc 1 731 10 is_stmt 0 view .LVU192
 653 0028 1212     		asrs	r2, r2, #8
 654              	.LVL65:
 655              		.loc 1 731 10 view .LVU193
 656 002a 4146     		mov	r1, r8
 657 002c 3046     		mov	r0, r6
 658 002e FFF7FEFF 		bl	program_flash
 659              	.LVL66:
 660              		.loc 1 731 8 view .LVU194
 661 0032 98B9     		cbnz	r0, .L63
 662              	.LVL67:
 663              	.L64:
 732:src/storage.c ****       return 1;
 733:src/storage.c ****     }
 734:src/storage.c ****   }
 735:src/storage.c **** 
 736:src/storage.c ****   /*
 737:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 738:src/storage.c ****    */
 739:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 664              		.loc 1 739 3 is_stmt 1 view .LVU195
 665 0034 3968     		ldr	r1, [r7]
 666 0036 4FF48072 		mov	r2, #256
 667 003a 6846     		mov	r0, sp
 668 003c FFF7FEFF 		bl	xcopy
 669              	.LVL68:
 740:src/storage.c ****   fr->size = size;
 670              		.loc 1 740 3 view .LVU196
 741:src/storage.c ****   checksum_region( &UserFlash, fr );
 671              		.loc 1 741 3 is_stmt 0 view .LVU197
 672 0040 6946     		mov	r1, sp
 673 0042 3868     		ldr	r0, [r7]
 740:src/storage.c ****   fr->size = size;
 674              		.loc 1 740 12 view .LVU198
 675 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 676              		.loc 1 741 3 is_stmt 1 view .LVU199
 677 0048 FFF7FEFF 		bl	checksum_region
ARM GAS  /tmp/ccsMEfLZ.s 			page 28


 678              	.LVL69:
 742:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
 679              		.loc 1 742 3 view .LVU200
 680              		.loc 1 742 10 is_stmt 0 view .LVU201
 681 004c 3868     		ldr	r0, [r7]
 682 004e 6946     		mov	r1, sp
 683 0050 0122     		movs	r2, #1
 684 0052 FFF7FEFF 		bl	program_flash
 685              	.LVL70:
 743:src/storage.c **** }
 686              		.loc 1 743 1 view .LVU202
 687 0056 41B0     		add	sp, sp, #260
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 36
 690              	.LVL71:
 691              		.loc 1 743 1 view .LVU203
 692              		@ sp needed
 693 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              	.LVL72:
 695              	.L63:
 696              		.cfi_restore_state
 697              	.LBB48:
 715:src/storage.c ****     }
 698              		.loc 1 715 14 view .LVU204
 699 005c 0120     		movs	r0, #1
 700              	.LBE48:
 701              		.loc 1 743 1 view .LVU205
 702 005e 41B0     		add	sp, sp, #260
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              	.LVL73:
 706              		.loc 1 743 1 view .LVU206
 707              		@ sp needed
 708 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 709              	.LVL74:
 710              	.L69:
 711              		.cfi_restore_state
 712              	.LBB49:
 711:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713              		.loc 1 711 5 is_stmt 1 view .LVU207
 712:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714              		.loc 1 712 25 is_stmt 0 view .LVU208
 715 0064 A6EB040B 		sub	fp, r6, r4
 712:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 716              		.loc 1 712 5 view .LVU209
 717 0068 5946     		mov	r1, fp
 718              	.LVL75:
 712:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 719              		.loc 1 712 5 view .LVU210
 720 006a 2246     		mov	r2, r4
 721 006c 6846     		mov	r0, sp
 722              	.LVL76:
 711:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 723              		.loc 1 711 15 view .LVU211
 724 006e C4F5807A 		rsb	r10, r4, #256
 725              	.LVL77:
 712:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
ARM GAS  /tmp/ccsMEfLZ.s 			page 29


 726              		.loc 1 712 5 is_stmt 1 view .LVU212
 727 0072 FFF7FEFF 		bl	xcopy
 728              	.LVL78:
 713:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 729              		.loc 1 713 5 view .LVU213
 730 0076 5246     		mov	r2, r10
 731 0078 4146     		mov	r1, r8
 732 007a 0DEB0400 		add	r0, sp, r4
 733 007e FFF7FEFF 		bl	xcopy
 734              	.LVL79:
 714:src/storage.c ****       return 1;
 735              		.loc 1 714 5 view .LVU214
 714:src/storage.c ****       return 1;
 736              		.loc 1 714 10 is_stmt 0 view .LVU215
 737 0082 6946     		mov	r1, sp
 738 0084 5846     		mov	r0, fp
 739 0086 0122     		movs	r2, #1
 740 0088 FFF7FEFF 		bl	program_flash
 741              	.LVL80:
 714:src/storage.c ****       return 1;
 742              		.loc 1 714 8 view .LVU216
 743 008c 0028     		cmp	r0, #0
 744 008e E5D1     		bne	.L63
 717:src/storage.c ****     dest += bytes;
 745              		.loc 1 717 5 is_stmt 1 view .LVU217
 717:src/storage.c ****     dest += bytes;
 746              		.loc 1 717 9 is_stmt 0 view .LVU218
 747 0090 D044     		add	r8, r8, r10
 748              	.LVL81:
 718:src/storage.c ****     count -= bytes;
 749              		.loc 1 718 5 is_stmt 1 view .LVU219
 718:src/storage.c ****     count -= bytes;
 750              		.loc 1 718 10 is_stmt 0 view .LVU220
 751 0092 5644     		add	r6, r6, r10
 752              	.LVL82:
 719:src/storage.c ****   }
 753              		.loc 1 719 5 is_stmt 1 view .LVU221
 719:src/storage.c ****   }
 754              		.loc 1 719 11 is_stmt 0 view .LVU222
 755 0094 A5EB0A05 		sub	r5, r5, r10
 756              	.LVL83:
 719:src/storage.c ****   }
 757              		.loc 1 719 11 view .LVU223
 758 0098 C2E7     		b	.L59
 759              	.L71:
 760 009a 00BF     		.align	2
 761              	.L70:
 762 009c 00000000 		.word	library_ram
 763              	.LBE49:
 764              		.cfi_endproc
 765              	.LFE23:
 767              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 768              		.align	2
 769              	.LC3:
 770 0000 64617461 		.ascii	"data=3?\000"
 770      3D333F00 
 771              		.align	2
ARM GAS  /tmp/ccsMEfLZ.s 			page 30


 772              	.LC4:
 773 0008 46696C65 		.ascii	"File err\000"
 773      20657272 
 773      00
 774              		.section	.text.open_selected_file,"ax",%progbits
 775              		.align	1
 776              		.p2align 2,,3
 777              		.global	open_selected_file
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	open_selected_file:
 784              	.LVL84:
 785              	.LFB38:
 744:src/storage.c **** 
 745:src/storage.c **** 
 746:src/storage.c **** /*
 747:src/storage.c ****  *  Remove steps from user flash memory.
 748:src/storage.c ****  */
 749:src/storage.c **** int flash_remove( int step_no, int count )
 750:src/storage.c **** {
 751:src/storage.c **** 	const int size = UserFlash.size - count;
 752:src/storage.c **** 	step_no = offsetLIB( step_no );
 753:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 754:src/storage.c **** 			     size - step_no, size );
 755:src/storage.c **** }
 756:src/storage.c **** 
 757:src/storage.c **** 
 758:src/storage.c **** /*
 759:src/storage.c ****  *  Simple backup / restore
 760:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 761:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 762:src/storage.c ****  */
 763:src/storage.c **** void flash_backup( enum nilop op )
 764:src/storage.c **** {
 765:src/storage.c **** 	if ( not_running() ) {
 766:src/storage.c **** 		process_cmdline_set_lift();
 767:src/storage.c **** 		init_state();
 768:src/storage.c **** 		checksum_all();
 769:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 770:src/storage.c **** 			error_message( ERR_IO );
 771:src/storage.c **** 			DispMsg = "Error";
 772:src/storage.c **** 		}
 773:src/storage.c **** 		else {
 774:src/storage.c **** 			DispMsg = "Saved";
 775:src/storage.c **** 		}
 776:src/storage.c **** 	}
 777:src/storage.c **** }
 778:src/storage.c **** 
 779:src/storage.c **** 
 780:src/storage.c **** void flash_restore( enum nilop op )
 781:src/storage.c **** {
 782:src/storage.c **** 	if ( not_running() ) {
 783:src/storage.c **** 		if ( checksum_backup() ) {
 784:src/storage.c **** 			error_message( ERR_INVALID );
 785:src/storage.c **** 		}
ARM GAS  /tmp/ccsMEfLZ.s 			page 31


 786:src/storage.c **** 		else {
 787:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
 788:src/storage.c **** 			init_state();
 789:src/storage.c **** 			DispMsg = "Restored";
 790:src/storage.c **** 		}
 791:src/storage.c **** 	}
 792:src/storage.c **** }
 793:src/storage.c **** 
 794:src/storage.c **** 
 795:src/storage.c **** /*
 796:src/storage.c ****  *  Load the user program area from the backup.
 797:src/storage.c ****  *  Called by PLOAD.
 798:src/storage.c ****  */
 799:src/storage.c **** void load_program( enum nilop op )
 800:src/storage.c **** {
 801:src/storage.c **** 	if ( not_running() ) {
 802:src/storage.c **** 		if ( checksum_backup() ) {
 803:src/storage.c **** 			/*
 804:src/storage.c **** 			 *  Not a valid backup
 805:src/storage.c **** 			 */
 806:src/storage.c **** 			report_err( ERR_INVALID );
 807:src/storage.c **** 			return;
 808:src/storage.c **** 		}
 809:src/storage.c **** 		clpall();
 810:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 811:src/storage.c **** 	}
 812:src/storage.c **** }
 813:src/storage.c **** 
 814:src/storage.c **** 
 815:src/storage.c **** /*
 816:src/storage.c ****  *  Load registers from backup
 817:src/storage.c ****  */
 818:src/storage.c **** void load_registers( enum nilop op )
 819:src/storage.c **** {
 820:src/storage.c **** 	int count;
 821:src/storage.c **** 	if ( checksum_backup() ) {
 822:src/storage.c **** 		/*
 823:src/storage.c **** 		 *  Not a valid backup region
 824:src/storage.c **** 		 */
 825:src/storage.c **** 		report_err( ERR_INVALID );
 826:src/storage.c **** 		return;
 827:src/storage.c **** 	}
 828:src/storage.c **** 	count = NumRegs;
 829:src/storage.c **** 	if ( is_dblmode() ) {
 830:src/storage.c **** 		// Don't clobber the stack in DP mode
 831:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 832:src/storage.c **** 	}
 833:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 834:src/storage.c **** 		count = BackupFlash._numregs;
 835:src/storage.c **** 	}
 836:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 837:src/storage.c **** }
 838:src/storage.c **** 
 839:src/storage.c **** 
 840:src/storage.c **** /*
 841:src/storage.c ****  *  Load the statistical summation registers from backup
 842:src/storage.c ****  */
ARM GAS  /tmp/ccsMEfLZ.s 			page 32


 843:src/storage.c **** void load_sigma( enum nilop op )
 844:src/storage.c **** {
 845:src/storage.c **** 	if ( checksum_backup() ) {
 846:src/storage.c **** 		/*
 847:src/storage.c **** 		 *  Not a valid backup region
 848:src/storage.c **** 		 */
 849:src/storage.c **** 		report_err( ERR_INVALID );
 850:src/storage.c **** 		return;
 851:src/storage.c **** 	}
 852:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 853:src/storage.c **** 		/*
 854:src/storage.c **** 		 *  Backup has no data
 855:src/storage.c **** 		 */
 856:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 857:src/storage.c **** 		return;
 858:src/storage.c **** 	}
 859:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 860:src/storage.c **** }
 861:src/storage.c **** 
 862:src/storage.c **** 
 863:src/storage.c **** /*
 864:src/storage.c ****  *  Load the configuration data from the backup
 865:src/storage.c ****  */
 866:src/storage.c **** void load_state( enum nilop op )
 867:src/storage.c **** {
 868:src/storage.c **** 	if ( not_running() ) {
 869:src/storage.c **** 		if ( checksum_backup() ) {
 870:src/storage.c **** 			/*
 871:src/storage.c **** 			 *  Not a valid backup region
 872:src/storage.c **** 			 */
 873:src/storage.c **** 			report_err( ERR_INVALID );
 874:src/storage.c **** 			return;
 875:src/storage.c **** 		}
 876:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 877:src/storage.c **** 		init_state();
 878:src/storage.c **** 		clrretstk_pc();
 879:src/storage.c **** 	}
 880:src/storage.c **** }
 881:src/storage.c **** 
 882:src/storage.c **** 
 883:src/storage.c **** /*
 884:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 885:src/storage.c ****  */
 886:src/storage.c **** void store_program( enum nilop op )
 887:src/storage.c **** {
 888:src/storage.c **** 	opcode lbl; 
 889:src/storage.c **** 	unsigned int pc;
 890:src/storage.c **** 	int space_needed, count, free;
 891:src/storage.c **** 
 892:src/storage.c **** 	if ( not_running() ) {
 893:src/storage.c **** 		/*
 894:src/storage.c **** 		 *  Don't copy from library or XROM
 895:src/storage.c **** 		 */
 896:src/storage.c **** 		pc = nLIB( state_pc() );
 897:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 898:src/storage.c **** 			report_err( ERR_ILLEGAL );
 899:src/storage.c **** 			return;
ARM GAS  /tmp/ccsMEfLZ.s 			page 33


 900:src/storage.c **** 		}
 901:src/storage.c **** 		/*
 902:src/storage.c **** 		 *  Check if program is labeled
 903:src/storage.c **** 		 */
 904:src/storage.c **** 		update_program_bounds( 1 );
 905:src/storage.c **** 		lbl = getprog( ProgBegin );
 906:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 907:src/storage.c **** 			report_err( ERR_NO_LBL );
 908:src/storage.c **** 			return;
 909:src/storage.c **** 		}
 910:src/storage.c **** 		/*
 911:src/storage.c **** 		 *  Compute space needed
 912:src/storage.c **** 		 */
 913:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 914:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 915:src/storage.c **** 
 916:src/storage.c **** 		/*
 917:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 918:src/storage.c **** 		 */
 919:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 920:src/storage.c **** 		if ( pc != 0 ) {
 921:src/storage.c **** 			/*
 922:src/storage.c **** 			 *  CLP in library
 923:src/storage.c **** 			 */
 924:src/storage.c **** 			unsigned int old_pc = state_pc();
 925:src/storage.c **** 			set_pc( pc );
 926:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 927:src/storage.c **** 			if ( space_needed <= free ) {
 928:src/storage.c **** 				clrprog();
 929:src/storage.c **** 			}
 930:src/storage.c **** 			set_pc( old_pc );
 931:src/storage.c **** 		}
 932:src/storage.c **** 		if ( space_needed > free ) {
 933:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 934:src/storage.c **** 			return;
 935:src/storage.c **** 		}
 936:src/storage.c **** 		// 3. Append program
 937:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 938:src/storage.c **** 	}
 939:src/storage.c **** }
 940:src/storage.c **** 
 941:src/storage.c **** 
 942:src/storage.c **** /*
 943:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 944:src/storage.c ****  */
 945:src/storage.c **** void recall_program( enum nilop op )
 946:src/storage.c **** {
 947:src/storage.c **** 	if ( not_running() ) {
 948:src/storage.c **** 		if ( state_pc() == 0 ) {
 949:src/storage.c **** 			State.pc = 1;
 950:src/storage.c **** 		}
 951:src/storage.c **** 		update_program_bounds( 1 );
 952:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 953:src/storage.c **** 	}
 954:src/storage.c **** }
 955:src/storage.c **** 
 956:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 34


 957:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 958:src/storage.c **** /*
 959:src/storage.c ****  *  Filesystem access for emulator
 960:src/storage.c ****  */
 961:src/storage.c **** 
 962:src/storage.c **** #ifndef DM42
 963:src/storage.c **** 
 964:src/storage.c **** #ifdef _WIN32
 965:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
 966:src/storage.c **** #else
 967:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
 968:src/storage.c **** #endif
 969:src/storage.c **** 
 970:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 971:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 972:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 973:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 974:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 975:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 976:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 977:src/storage.c **** 
 978:src/storage.c **** /*
 979:src/storage.c ****  *  Show (GUI) message
 980:src/storage.c ****  */
 981:src/storage.c **** #ifdef QTGUI
 982:src/storage.c **** extern void showMessage(const char* title, const char* message);
 983:src/storage.c **** #endif
 984:src/storage.c **** 
 985:src/storage.c **** 
 986:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 987:src/storage.c **** {
 988:src/storage.c **** 	va_list args;
 989:src/storage.c **** #ifndef QTGUI
 990:src/storage.c **** #ifdef WINGUI
 991:src/storage.c **** 	char msg[ 10000 ];
 992:src/storage.c **** 	va_start( args, format );
 993:src/storage.c **** 	vsprintf( msg, format, args );
 994:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 995:src/storage.c **** #else
 996:src/storage.c **** 	va_start( args, format );
 997:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 998:src/storage.c **** 	vfprintf( stderr, format, args );
 999:src/storage.c **** 	fputc( '\n', stderr );
1000:src/storage.c **** #endif
1001:src/storage.c **** #else
1002:src/storage.c **** 	char msg[ 10000 ];
1003:src/storage.c **** 	va_start( args, format );
1004:src/storage.c **** 	vsprintf( msg, format, args );
1005:src/storage.c **** 	showMessage(title, msg);
1006:src/storage.c **** #endif
1007:src/storage.c **** }
1008:src/storage.c **** 
1009:src/storage.c **** 
1010:src/storage.c **** 
1011:src/storage.c **** /*
1012:src/storage.c ****  *  Save/Load state to a file
1013:src/storage.c ****  */
ARM GAS  /tmp/ccsMEfLZ.s 			page 35


1014:src/storage.c **** void save_statefile( const char *filename )
1015:src/storage.c **** {
1016:src/storage.c **** 	FILE *f;
1017:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1018:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
1019:src/storage.c **** 	}
1020:src/storage.c **** 	f = fopen( StateFile, "wb" );
1021:src/storage.c **** 	if ( f == NULL ) {
1022:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
1023:src/storage.c **** 		return;
1024:src/storage.c **** 	}
1025:src/storage.c **** 	process_cmdline_set_lift();
1026:src/storage.c **** 	init_state();
1027:src/storage.c **** 	checksum_all();
1028:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1029:src/storage.c **** 	fclose( f );
1030:src/storage.c **** #ifdef DEBUG
1031:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1032:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1033:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1034:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1035:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1036:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1037:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1038:src/storage.c **** #endif
1039:src/storage.c **** }
1040:src/storage.c **** 
1041:src/storage.c **** /*
1042:src/storage.c ****  *  Helper to expand filenames with startup directory
1043:src/storage.c ****  */
1044:src/storage.c **** #ifdef _WIN32
1045:src/storage.c **** #include <direct.h>
1046:src/storage.c **** #define getcwd _getcwd
1047:src/storage.c **** #define SEPARATOR '\\'
1048:src/storage.c **** #else
1049:src/storage.c **** #define SEPARATOR '/'
1050:src/storage.c **** #endif
1051:src/storage.c **** 
1052:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1053:src/storage.c **** {
1054:src/storage.c **** 	char *p;
1055:src/storage.c **** 	size_t l;
1056:src/storage.c **** 
1057:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1058:src/storage.c **** 		// Determine current directory on first call
1059:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1060:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
1061:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1062:src/storage.c **** 			*p = SEPARATOR;
1063:src/storage.c **** 			p[ 1 ] = '\0';
1064:src/storage.c **** 		}
1065:src/storage.c **** 	}
1066:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1067:src/storage.c **** 		// Absolute path left unchanged
1068:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1069:src/storage.c **** 	}
1070:src/storage.c **** 	else {
ARM GAS  /tmp/ccsMEfLZ.s 			page 36


1071:src/storage.c **** 		// Prepend CurrentDir
1072:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
1073:src/storage.c **** 		l = strlen( buffer );
1074:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1075:src/storage.c **** 	}
1076:src/storage.c **** 	return buffer;
1077:src/storage.c **** }
1078:src/storage.c **** #endif //ifndef DM42
1079:src/storage.c **** 
1080:src/storage.c **** /*
1081:src/storage.c ****  *  Lots of file routines for DM42
1082:src/storage.c ****  */
1083:src/storage.c **** 
1084:src/storage.c **** #ifdef DM42
1085:src/storage.c **** 
1086:src/storage.c **** #define DISP_NEW 1
1087:src/storage.c **** #define OVERWRITE_CHECK 1
1088:src/storage.c **** #define NO_DISP_NEW 0
1089:src/storage.c **** #define NO_OVERWRITE_CHECK 0
1090:src/storage.c **** #define WRITE 1
1091:src/storage.c **** #define READ 2
1092:src/storage.c **** 
1093:src/storage.c **** void save_lib_file ( int i ) {
1094:src/storage.c ****   FRESULT f;
1095:src/storage.c ****   int fss;
1096:src/storage.c ****   int data = WRITE;
1097:src/storage.c ****   uint x=0;
1098:src/storage.c **** 
1099:src/storage.c ****   sys_disk_write_enable(1);
1100:src/storage.c ****   if (i == 0) {
1101:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1102:src/storage.c ****     if (f != FR_OK) {
1103:src/storage.c ****       f_close (FPT);
1104:src/storage.c ****       sys_disk_write_enable(0);
1105:src/storage.c ****       DispMsg = "Err slf1";
1106:src/storage.c ****       return;
1107:src/storage.c ****     }
1108:src/storage.c ****   }
1109:src/storage.c ****   else {
1110:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
1111:src/storage.c ****     if (fss != 1) return;
1112:src/storage.c ****   }
1113:src/storage.c ****   // File is now open with correct permissions
1114:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1115:src/storage.c ****   if ( f != FR_OK ) {
1116:src/storage.c ****     DispMsg = "Err slf2";
1117:src/storage.c ****   }
1118:src/storage.c ****   f_close( FPT );
1119:src/storage.c ****   sys_disk_write_enable(0);
1120:src/storage.c **** }
1121:src/storage.c **** 
1122:src/storage.c **** void load_lib_file ( int i ) {
1123:src/storage.c ****   FRESULT f;
1124:src/storage.c ****   int fss;
1125:src/storage.c ****   int data = READ;
1126:src/storage.c ****   uint x=0;
1127:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 37


1128:src/storage.c ****   if (i == 0) {
1129:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
1130:src/storage.c ****     if (f != FR_OK) {
1131:src/storage.c ****       f_close (FPT);
1132:src/storage.c ****       //      DispMsg = "No file?";
1133:src/storage.c ****       return;
1134:src/storage.c ****     }
1135:src/storage.c ****   }
1136:src/storage.c ****   else {
1137:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
1138:src/storage.c ****     if (fss != 1) return;
1139:src/storage.c ****   }
1140:src/storage.c ****   // File is now open with correct permissions
1141:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1142:src/storage.c ****   if ( f != FR_OK ) {
1143:src/storage.c ****     DispMsg = "Err slf2";
1144:src/storage.c ****   }
1145:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1146:src/storage.c ****     DispMsg = "File too big";
1147:src/storage.c ****   }
1148:src/storage.c ****   f_close( FPT );
1149:src/storage.c **** }
1150:src/storage.c **** 
1151:src/storage.c **** void save_ram_file ( int i ) {
1152:src/storage.c ****   FRESULT f;
1153:src/storage.c ****   int fss;
1154:src/storage.c ****   int data = WRITE;
1155:src/storage.c ****   uint x=0;
1156:src/storage.c **** 
1157:src/storage.c ****     process_cmdline_set_lift();
1158:src/storage.c ****     init_state();
1159:src/storage.c ****     checksum_all();
1160:src/storage.c **** 
1161:src/storage.c ****     sys_disk_write_enable(1);
1162:src/storage.c ****     if (i == 0) {
1163:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1164:src/storage.c ****       if (f != FR_OK) {
1165:src/storage.c **** 	f_close (FPT);
1166:src/storage.c **** 	sys_disk_write_enable(0);
1167:src/storage.c **** 	DispMsg = "Err srf1";
1168:src/storage.c **** 	return;
1169:src/storage.c ****       }
1170:src/storage.c ****     }
1171:src/storage.c ****     else {
1172:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
1173:src/storage.c ****       if (fss != 1) return;
1174:src/storage.c ****     }
1175:src/storage.c ****     // File is now open with correct permissions
1176:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1177:src/storage.c ****     if ( f != FR_OK ) {
1178:src/storage.c ****       DispMsg = "Err srf2";
1179:src/storage.c ****     }
1180:src/storage.c ****     f_close( FPT );
1181:src/storage.c ****     sys_disk_write_enable(0);
1182:src/storage.c **** }
1183:src/storage.c **** 
1184:src/storage.c **** int load_ram_file ( int i ) { // this will load backup files too!
ARM GAS  /tmp/ccsMEfLZ.s 			page 38


1185:src/storage.c ****   FRESULT f;
1186:src/storage.c ****   int fss;
1187:src/storage.c ****   int data = READ;
1188:src/storage.c ****   uint x=0;
1189:src/storage.c ****   
1190:src/storage.c ****   if (i == 0) {
1191:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
1192:src/storage.c ****     if (f != FR_OK) {
1193:src/storage.c ****       f_close (FPT);
1194:src/storage.c ****       //      DispMsg = "No file?";
1195:src/storage.c ****       return 1;
1196:src/storage.c ****     }
1197:src/storage.c ****   }
1198:src/storage.c ****   else {
1199:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
1200:src/storage.c ****     if (fss != 1) return 1;
1201:src/storage.c ****   }
1202:src/storage.c ****   // File is now open with correct permissions
1203:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1204:src/storage.c ****   if ( f != FR_OK ) {
1205:src/storage.c ****     DispMsg = "Err lrf2";
1206:src/storage.c ****       f_close( FPT );
1207:src/storage.c ****       return 1;
1208:src/storage.c ****   }
1209:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1210:src/storage.c ****     DispMsg = "File too big";
1211:src/storage.c ****       f_close( FPT );
1212:src/storage.c ****       return 1;
1213:src/storage.c ****   }
1214:src/storage.c ****   f_close( FPT );
1215:src/storage.c ****   return 0;
1216:src/storage.c **** }
1217:src/storage.c **** 
1218:src/storage.c **** void load_backup_file ( int i ) { // goes into backup!
1219:src/storage.c ****   FRESULT f;
1220:src/storage.c ****   int fss;
1221:src/storage.c ****   int data = READ;
1222:src/storage.c ****   uint x=0;
1223:src/storage.c **** 
1224:src/storage.c ****   if (i == 0) {
1225:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
1226:src/storage.c ****     if (f != FR_OK) {
1227:src/storage.c ****       f_close (FPT);
1228:src/storage.c ****       return;
1229:src/storage.c ****     }
1230:src/storage.c ****   }
1231:src/storage.c ****   else {
1232:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
1233:src/storage.c ****     if (fss != 1) return;
1234:src/storage.c ****   }
1235:src/storage.c ****   // File is now open with correct permissions
1236:src/storage.c ****   f = f_read (FPT, (char *) &BackupFlash, sizeof (BackupFlash), &x);
1237:src/storage.c ****   if ( f != FR_OK ) {
1238:src/storage.c ****     DispMsg = "Err lbf2";
1239:src/storage.c ****   }
1240:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1241:src/storage.c ****     DispMsg = "File too big";
ARM GAS  /tmp/ccsMEfLZ.s 			page 39


1242:src/storage.c ****   }
1243:src/storage.c ****   f_close( FPT );
1244:src/storage.c **** }
1245:src/storage.c **** 
1246:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
 786              		.loc 1 1246 78 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 1246 78 is_stmt 0 view .LVU225
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
1247:src/storage.c ****   FRESULT f;
1248:src/storage.c **** 
1249:src/storage.c ****   if (*(int*)data == WRITE) {
 795              		.loc 1 1249 7 view .LVU226
 796 0002 1368     		ldr	r3, [r2]
 797              		.loc 1 1249 6 view .LVU227
 798 0004 012B     		cmp	r3, #1
1246:src/storage.c ****   FRESULT f;
 799              		.loc 1 1246 78 view .LVU228
 800 0006 0146     		mov	r1, r0
 801              	.LVL85:
1247:src/storage.c ****   FRESULT f;
 802              		.loc 1 1247 3 is_stmt 1 view .LVU229
 803              		.loc 1 1249 3 view .LVU230
 804              		.loc 1 1249 6 is_stmt 0 view .LVU231
 805 0008 0ED0     		beq	.L79
1250:src/storage.c ****     // open file to write
1251:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1252:src/storage.c ****   }
1253:src/storage.c ****   else if (*(int*)data == READ) {
 806              		.loc 1 1253 8 is_stmt 1 view .LVU232
 807              		.loc 1 1253 11 is_stmt 0 view .LVU233
 808 000a 022B     		cmp	r3, #2
 809 000c 07D1     		bne	.L75
1254:src/storage.c ****     // open file to read
1255:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 810              		.loc 1 1255 5 is_stmt 1 view .LVU234
 811              		.loc 1 1255 9 is_stmt 0 view .LVU235
 812 000e 104A     		ldr	r2, .L81
 813              	.LVL86:
 814              		.loc 1 1255 9 view .LVU236
 815 0010 104B     		ldr	r3, .L81+4
 816 0012 5068     		ldr	r0, [r2, #4]
 817              	.LVL87:
 818              		.loc 1 1255 9 view .LVU237
 819 0014 0122     		movs	r2, #1
 820 0016 9847     		blx	r3
 821              	.LVL88:
1256:src/storage.c ****   }
1257:src/storage.c ****   else {
1258:src/storage.c ****     DispMsg = "data=3?";
1259:src/storage.c ****     return 3; // serious error!
1260:src/storage.c ****   }
ARM GAS  /tmp/ccsMEfLZ.s 			page 40


1261:src/storage.c ****   if (f != FR_OK) {
 822              		.loc 1 1261 3 is_stmt 1 view .LVU238
 823              		.loc 1 1261 6 is_stmt 0 view .LVU239
 824 0018 68B9     		cbnz	r0, .L80
 825              	.L77:
1262:src/storage.c ****     f_close (FPT);
1263:src/storage.c ****     sys_disk_write_enable(0);
1264:src/storage.c ****     DispMsg = "File err";
1265:src/storage.c ****     return 2; // file can't be opened
1266:src/storage.c ****   }
1267:src/storage.c ****   else {
1268:src/storage.c ****     return 1; // file opened successfully
 826              		.loc 1 1268 12 view .LVU240
 827 001a 0120     		movs	r0, #1
 828              	.LVL89:
1269:src/storage.c ****   }
1270:src/storage.c **** }
 829              		.loc 1 1270 1 view .LVU241
 830 001c 08BD     		pop	{r3, pc}
 831              	.LVL90:
 832              	.L75:
1258:src/storage.c ****     return 3; // serious error!
 833              		.loc 1 1258 5 is_stmt 1 view .LVU242
1258:src/storage.c ****     return 3; // serious error!
 834              		.loc 1 1258 13 is_stmt 0 view .LVU243
 835 001e 0E4B     		ldr	r3, .L81+8
 836 0020 0E4A     		ldr	r2, .L81+12
 837              	.LVL91:
1258:src/storage.c ****     return 3; // serious error!
 838              		.loc 1 1258 13 view .LVU244
 839 0022 1A60     		str	r2, [r3]
1259:src/storage.c ****   }
 840              		.loc 1 1259 5 is_stmt 1 view .LVU245
1259:src/storage.c ****   }
 841              		.loc 1 1259 12 is_stmt 0 view .LVU246
 842 0024 0320     		movs	r0, #3
 843              	.LVL92:
 844              		.loc 1 1270 1 view .LVU247
 845 0026 08BD     		pop	{r3, pc}
 846              	.LVL93:
 847              	.L79:
1251:src/storage.c ****   }
 848              		.loc 1 1251 5 is_stmt 1 view .LVU248
1251:src/storage.c ****   }
 849              		.loc 1 1251 9 is_stmt 0 view .LVU249
 850 0028 094A     		ldr	r2, .L81
 851              	.LVL94:
1251:src/storage.c ****   }
 852              		.loc 1 1251 9 view .LVU250
 853 002a 0A4B     		ldr	r3, .L81+4
 854 002c 5068     		ldr	r0, [r2, #4]
 855              	.LVL95:
1251:src/storage.c ****   }
 856              		.loc 1 1251 9 view .LVU251
 857 002e 0B22     		movs	r2, #11
 858 0030 9847     		blx	r3
 859              	.LVL96:
ARM GAS  /tmp/ccsMEfLZ.s 			page 41


1261:src/storage.c ****     f_close (FPT);
 860              		.loc 1 1261 3 is_stmt 1 view .LVU252
1261:src/storage.c ****     f_close (FPT);
 861              		.loc 1 1261 6 is_stmt 0 view .LVU253
 862 0032 0028     		cmp	r0, #0
 863 0034 F1D0     		beq	.L77
 864              	.L80:
 865              	.LBB52:
 866              	.LBI52:
1246:src/storage.c ****   FRESULT f;
 867              		.loc 1 1246 5 is_stmt 1 view .LVU254
 868              	.LVL97:
 869              	.LBB53:
1262:src/storage.c ****     sys_disk_write_enable(0);
 870              		.loc 1 1262 5 view .LVU255
 871 0036 064A     		ldr	r2, .L81
 872 0038 094B     		ldr	r3, .L81+16
 873 003a 5068     		ldr	r0, [r2, #4]
 874              	.LVL98:
1262:src/storage.c ****     sys_disk_write_enable(0);
 875              		.loc 1 1262 5 is_stmt 0 view .LVU256
 876 003c 9847     		blx	r3
 877              	.LVL99:
1263:src/storage.c ****     DispMsg = "File err";
 878              		.loc 1 1263 5 is_stmt 1 view .LVU257
 879 003e 094B     		ldr	r3, .L81+20
 880 0040 0020     		movs	r0, #0
 881 0042 9847     		blx	r3
 882              	.LVL100:
1264:src/storage.c ****     return 2; // file can't be opened
 883              		.loc 1 1264 5 view .LVU258
1264:src/storage.c ****     return 2; // file can't be opened
 884              		.loc 1 1264 13 is_stmt 0 view .LVU259
 885 0044 044B     		ldr	r3, .L81+8
 886 0046 084A     		ldr	r2, .L81+24
 887 0048 1A60     		str	r2, [r3]
1265:src/storage.c ****   }
 888              		.loc 1 1265 5 is_stmt 1 view .LVU260
 889              	.LVL101:
1264:src/storage.c ****     return 2; // file can't be opened
 890              		.loc 1 1264 13 is_stmt 0 view .LVU261
 891 004a 0220     		movs	r0, #2
 892              	.LBE53:
 893              	.LBE52:
 894              		.loc 1 1270 1 view .LVU262
 895 004c 08BD     		pop	{r3, pc}
 896              	.L82:
 897 004e 00BF     		.align	2
 898              	.L81:
 899 0050 00200010 		.word	268443648
 900 0054 35040008 		.word	134218805
 901 0058 00000000 		.word	DispMsg
 902 005c 00000000 		.word	.LC3
 903 0060 39040008 		.word	134218809
 904 0064 E1030008 		.word	134218721
 905 0068 08000000 		.word	.LC4
 906              		.cfi_endproc
ARM GAS  /tmp/ccsMEfLZ.s 			page 42


 907              	.LFE38:
 909              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
 910              		.align	2
 911              	.LC5:
 912 0000 63616C6C 		.ascii	"calloc failed\000"
 912      6F632066 
 912      61696C65 
 912      6400
 913              		.section	.text.init_mem,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	init_mem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	init_mem:
 923              	.LFB3:
 104:src/storage.c ****   char *v;
 924              		.loc 1 104 18 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 105:src/storage.c **** 
 928              		.loc 1 105 3 view .LVU264
 107:src/storage.c ****   if (v == NULL) {
 929              		.loc 1 107 3 view .LVU265
 104:src/storage.c ****   char *v;
 930              		.loc 1 104 18 is_stmt 0 view .LVU266
 931 0000 08B5     		push	{r3, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
 107:src/storage.c ****   if (v == NULL) {
 935              		.loc 1 107 16 view .LVU267
 936 0002 0121     		movs	r1, #1
 937 0004 4FF4A040 		mov	r0, #20480
 938 0008 FFF7FEFF 		bl	calloc
 939              	.LVL102:
 108:src/storage.c ****     perror("calloc failed");
 940              		.loc 1 108 3 is_stmt 1 view .LVU268
 108:src/storage.c ****     perror("calloc failed");
 941              		.loc 1 108 6 is_stmt 0 view .LVU269
 942 000c 50B1     		cbz	r0, .L86
 112:src/storage.c ****   v += RAM_SIZE;
 943              		.loc 1 112 3 is_stmt 1 view .LVU270
 112:src/storage.c ****   v += RAM_SIZE;
 944              		.loc 1 112 12 is_stmt 0 view .LVU271
 945 000e 0849     		ldr	r1, .L87
 114:src/storage.c ****   v += RAM_SIZE;
 946              		.loc 1 114 14 view .LVU272
 947 0010 084A     		ldr	r2, .L87+4
 116:src/storage.c **** }
 948              		.loc 1 116 15 view .LVU273
 949 0012 094B     		ldr	r3, .L87+8
 112:src/storage.c ****   v += RAM_SIZE;
 950              		.loc 1 112 12 view .LVU274
ARM GAS  /tmp/ccsMEfLZ.s 			page 43


 951 0014 0860     		str	r0, [r1]
 113:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 952              		.loc 1 113 3 is_stmt 1 view .LVU275
 953              	.LVL103:
 114:src/storage.c ****   v += RAM_SIZE;
 954              		.loc 1 114 3 view .LVU276
 113:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 955              		.loc 1 113 5 is_stmt 0 view .LVU277
 956 0016 00F50061 		add	r1, r0, #2048
 957              	.LVL104:
 115:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 958              		.loc 1 115 5 view .LVU278
 959 001a 00F58050 		add	r0, r0, #4096
 114:src/storage.c ****   v += RAM_SIZE;
 960              		.loc 1 114 14 view .LVU279
 961 001e 1160     		str	r1, [r2]
 115:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 962              		.loc 1 115 3 is_stmt 1 view .LVU280
 963              	.LVL105:
 116:src/storage.c **** }
 964              		.loc 1 116 3 view .LVU281
 116:src/storage.c **** }
 965              		.loc 1 116 15 is_stmt 0 view .LVU282
 966 0020 1860     		str	r0, [r3]
 117:src/storage.c **** 
 967              		.loc 1 117 1 view .LVU283
 968 0022 08BD     		pop	{r3, pc}
 969              	.LVL106:
 970              	.L86:
 109:src/storage.c ****     return;
 971              		.loc 1 109 5 is_stmt 1 view .LVU284
 117:src/storage.c **** 
 972              		.loc 1 117 1 is_stmt 0 view .LVU285
 973 0024 BDE80840 		pop	{r3, lr}
 974              		.cfi_restore 14
 975              		.cfi_restore 3
 976              		.cfi_def_cfa_offset 0
 109:src/storage.c ****     return;
 977              		.loc 1 109 5 view .LVU286
 978 0028 0448     		ldr	r0, .L87+12
 979              	.LVL107:
 109:src/storage.c ****     return;
 980              		.loc 1 109 5 view .LVU287
 981 002a FFF7FEBF 		b	perror
 982              	.LVL108:
 983              	.L88:
 984 002e 00BF     		.align	2
 985              	.L87:
 986 0030 00000000 		.word	main_ram
 987 0034 00000000 		.word	backup_ram
 988 0038 00000000 		.word	library_ram
 989 003c 00000000 		.word	.LC5
 990              		.cfi_endproc
 991              	.LFE3:
 993              		.section	.text.crc16,"ax",%progbits
 994              		.align	1
 995              		.p2align 2,,3
ARM GAS  /tmp/ccsMEfLZ.s 			page 44


 996              		.global	crc16
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	crc16:
 1003              	.LVL109:
 1004              	.LFB4:
 162:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 1005              		.loc 1 162 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1010              		.loc 1 163 2 view .LVU289
 164:src/storage.c **** 	unsigned int i;
 1011              		.loc 1 164 2 view .LVU290
 165:src/storage.c **** 
 1012              		.loc 1 165 2 view .LVU291
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1013              		.loc 1 167 2 view .LVU292
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1014              		.loc 1 167 15 view .LVU293
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1015              		.loc 1 167 2 is_stmt 0 view .LVU294
 1016 0000 B1B1     		cbz	r1, .L92
 1017 0002 0144     		add	r1, r1, r0
 1018              	.LVL110:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1019              		.loc 1 163 21 view .LVU295
 1020 0004 45F6A523 		movw	r3, #23205
 1021              	.LVL111:
 1022              	.L91:
 168:src/storage.c **** 		crc ^= *d++;
 1023              		.loc 1 168 3 is_stmt 1 discriminator 3 view .LVU296
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1024              		.loc 1 169 10 is_stmt 0 discriminator 3 view .LVU297
 1025 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1026              	.LVL112:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1027              		.loc 1 169 10 discriminator 3 view .LVU298
 1028 000c 5BBA     		rev16	r3, r3
 1029              	.LVL113:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1030              		.loc 1 169 10 discriminator 3 view .LVU299
 1031 000e 9BB2     		uxth	r3, r3
 1032              	.LVL114:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1033              		.loc 1 169 3 is_stmt 1 discriminator 3 view .LVU300
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1034              		.loc 1 169 7 is_stmt 0 discriminator 3 view .LVU301
 1035 0010 5340     		eors	r3, r3, r2
 1036              	.LVL115:
 170:src/storage.c **** 		crc ^= crc << 12;
 1037              		.loc 1 170 3 is_stmt 1 discriminator 3 view .LVU302
 170:src/storage.c **** 		crc ^= crc << 12;
ARM GAS  /tmp/ccsMEfLZ.s 			page 45


 1038              		.loc 1 170 7 is_stmt 0 discriminator 3 view .LVU303
 1039 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1040 0016 5340     		eors	r3, r3, r2
 1041              	.LVL116:
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1042              		.loc 1 171 3 is_stmt 1 discriminator 3 view .LVU304
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1043              		.loc 1 171 7 is_stmt 0 discriminator 3 view .LVU305
 1044 0018 83EA0332 		eor	r2, r3, r3, lsl #12
 1045              	.LVL117:
 172:src/storage.c **** 	}
 1046              		.loc 1 172 3 is_stmt 1 discriminator 3 view .LVU306
 172:src/storage.c **** 	}
 1047              		.loc 1 172 25 is_stmt 0 discriminator 3 view .LVU307
 1048 001c 5301     		lsls	r3, r2, #5
 1049 001e 03F4FF53 		and	r3, r3, #8160
 172:src/storage.c **** 	}
 1050              		.loc 1 172 7 discriminator 3 view .LVU308
 1051 0022 92B2     		uxth	r2, r2
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1052              		.loc 1 167 2 discriminator 3 view .LVU309
 1053 0024 8142     		cmp	r1, r0
 172:src/storage.c **** 	}
 1054              		.loc 1 172 7 discriminator 3 view .LVU310
 1055 0026 83EA0203 		eor	r3, r3, r2
 1056              	.LVL118:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1057              		.loc 1 167 27 is_stmt 1 discriminator 3 view .LVU311
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1058              		.loc 1 167 15 discriminator 3 view .LVU312
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1059              		.loc 1 167 2 is_stmt 0 discriminator 3 view .LVU313
 1060 002a EDD1     		bne	.L91
 174:src/storage.c **** }
 1061              		.loc 1 174 2 is_stmt 1 view .LVU314
 175:src/storage.c **** 
 1062              		.loc 1 175 1 is_stmt 0 view .LVU315
 1063 002c 1846     		mov	r0, r3
 1064              	.LVL119:
 175:src/storage.c **** 
 1065              		.loc 1 175 1 view .LVU316
 1066 002e 7047     		bx	lr
 1067              	.LVL120:
 1068              	.L92:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1069              		.loc 1 163 21 view .LVU317
 1070 0030 45F6A523 		movw	r3, #23205
 174:src/storage.c **** }
 1071              		.loc 1 174 2 is_stmt 1 view .LVU318
 175:src/storage.c **** 
 1072              		.loc 1 175 1 is_stmt 0 view .LVU319
 1073 0034 1846     		mov	r0, r3
 1074              	.LVL121:
 175:src/storage.c **** 
 1075              		.loc 1 175 1 view .LVU320
 1076 0036 7047     		bx	lr
 1077              		.cfi_endproc
ARM GAS  /tmp/ccsMEfLZ.s 			page 46


 1078              	.LFE4:
 1080              		.section	.text.checksum_program,"ax",%progbits
 1081              		.align	1
 1082              		.p2align 2,,3
 1083              		.global	checksum_program
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	checksum_program:
 1090              	.LFB6:
 198:src/storage.c **** 	update_program_bounds( 1 );
 1091              		.loc 1 198 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1095              		.loc 1 199 2 view .LVU322
 198:src/storage.c **** 	update_program_bounds( 1 );
 1096              		.loc 1 198 1 is_stmt 0 view .LVU323
 1097 0000 08B5     		push	{r3, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 199:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1101              		.loc 1 199 2 view .LVU324
 1102 0002 0120     		movs	r0, #1
 1103 0004 FFF7FEFF 		bl	update_program_bounds
 1104              	.LVL122:
 200:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1105              		.loc 1 200 2 is_stmt 1 view .LVU325
 200:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1106              		.loc 1 200 16 is_stmt 0 view .LVU326
 1107 0008 FFF7FEFF 		bl	get_current_prog
 1108              	.LVL123:
 200:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1109              		.loc 1 200 36 view .LVU327
 1110 000c 124B     		ldr	r3, .L100
 1111 000e 1B68     		ldr	r3, [r3]
 1112 0010 B3F8EE17 		ldrh	r1, [r3, #2030]
 200:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1113              		.loc 1 200 46 view .LVU328
 1114 0014 B3F8EC37 		ldrh	r3, [r3, #2028]
 200:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1115              		.loc 1 200 44 view .LVU329
 1116 0018 C91A     		subs	r1, r1, r3
 1117              	.LVL124:
 1118              	.LBB54:
 1119              	.LBI54:
 161:src/storage.c **** {
 1120              		.loc 1 161 20 is_stmt 1 view .LVU330
 1121              	.LBB55:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1122              		.loc 1 163 2 view .LVU331
 164:src/storage.c **** 	unsigned int i;
 1123              		.loc 1 164 2 view .LVU332
 165:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 47


 1124              		.loc 1 165 2 view .LVU333
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1125              		.loc 1 167 2 view .LVU334
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1126              		.loc 1 167 15 view .LVU335
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1127              		.loc 1 167 2 is_stmt 0 view .LVU336
 1128 001a 4B1C     		adds	r3, r1, #1
 1129              	.LVL125:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1130              		.loc 1 167 2 view .LVU337
 1131 001c 17D0     		beq	.L97
 1132 001e 0131     		adds	r1, r1, #1
 1133 0020 0144     		add	r1, r1, r0
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1134              		.loc 1 163 21 view .LVU338
 1135 0022 45F6A523 		movw	r3, #23205
 1136              	.LVL126:
 1137              	.L96:
 168:src/storage.c **** 		crc ^= *d++;
 1138              		.loc 1 168 3 is_stmt 1 view .LVU339
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 169 10 is_stmt 0 view .LVU340
 1140 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1141              	.LVL127:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1142              		.loc 1 169 10 view .LVU341
 1143 002a 5BBA     		rev16	r3, r3
 1144              	.LVL128:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1145              		.loc 1 169 10 view .LVU342
 1146 002c 9BB2     		uxth	r3, r3
 1147              	.LVL129:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1148              		.loc 1 169 3 is_stmt 1 view .LVU343
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1149              		.loc 1 169 7 is_stmt 0 view .LVU344
 1150 002e 5340     		eors	r3, r3, r2
 1151              	.LVL130:
 170:src/storage.c **** 		crc ^= crc << 12;
 1152              		.loc 1 170 3 is_stmt 1 view .LVU345
 170:src/storage.c **** 		crc ^= crc << 12;
 1153              		.loc 1 170 7 is_stmt 0 view .LVU346
 1154 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1155 0034 5340     		eors	r3, r3, r2
 1156              	.LVL131:
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1157              		.loc 1 171 3 is_stmt 1 view .LVU347
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1158              		.loc 1 171 7 is_stmt 0 view .LVU348
 1159 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1160              	.LVL132:
 172:src/storage.c **** 	}
 1161              		.loc 1 172 3 is_stmt 1 view .LVU349
 172:src/storage.c **** 	}
 1162              		.loc 1 172 25 is_stmt 0 view .LVU350
 1163 003a 5A01     		lsls	r2, r3, #5
ARM GAS  /tmp/ccsMEfLZ.s 			page 48


 1164 003c 02F4FF52 		and	r2, r2, #8160
 172:src/storage.c **** 	}
 1165              		.loc 1 172 7 view .LVU351
 1166 0040 9BB2     		uxth	r3, r3
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1167              		.loc 1 167 2 view .LVU352
 1168 0042 8142     		cmp	r1, r0
 172:src/storage.c **** 	}
 1169              		.loc 1 172 7 view .LVU353
 1170 0044 83EA0203 		eor	r3, r3, r2
 1171              	.LVL133:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1172              		.loc 1 167 27 is_stmt 1 view .LVU354
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1173              		.loc 1 167 15 view .LVU355
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1174              		.loc 1 167 2 is_stmt 0 view .LVU356
 1175 0048 EDD1     		bne	.L96
 174:src/storage.c **** }
 1176              		.loc 1 174 2 is_stmt 1 view .LVU357
 1177              	.LVL134:
 174:src/storage.c **** }
 1178              		.loc 1 174 2 is_stmt 0 view .LVU358
 1179              	.LBE55:
 1180              	.LBE54:
 202:src/storage.c **** 
 1181              		.loc 1 202 1 view .LVU359
 1182 004a 1846     		mov	r0, r3
 1183 004c 08BD     		pop	{r3, pc}
 1184              	.LVL135:
 1185              	.L97:
 1186              	.LBB57:
 1187              	.LBB56:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1188              		.loc 1 163 21 view .LVU360
 1189 004e 45F6A523 		movw	r3, #23205
 1190              	.LVL136:
 174:src/storage.c **** }
 1191              		.loc 1 174 2 is_stmt 1 view .LVU361
 174:src/storage.c **** }
 1192              		.loc 1 174 2 is_stmt 0 view .LVU362
 1193              	.LBE56:
 1194              	.LBE57:
 202:src/storage.c **** 
 1195              		.loc 1 202 1 view .LVU363
 1196 0052 1846     		mov	r0, r3
 1197 0054 08BD     		pop	{r3, pc}
 1198              	.L101:
 1199 0056 00BF     		.align	2
 1200              	.L100:
 1201 0058 00000000 		.word	main_ram
 1202              		.cfi_endproc
 1203              	.LFE6:
 1205              		.section	.text.checksum_ram,"ax",%progbits
 1206              		.align	1
 1207              		.p2align 2,,3
 1208              		.global	checksum_ram
ARM GAS  /tmp/ccsMEfLZ.s 			page 49


 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	checksum_ram:
 1215              	.LFB7:
 210:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1216              		.loc 1 210 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 211:src/storage.c **** 			      Crc, &Crc );
 1221              		.loc 1 211 2 view .LVU365
 211:src/storage.c **** 			      Crc, &Crc );
 1222              		.loc 1 211 9 is_stmt 0 view .LVU366
 1223 0000 044B     		ldr	r3, .L103
 1224 0002 1868     		ldr	r0, [r3]
 1225 0004 40F2FE71 		movw	r1, #2046
 1226 0008 B0F8FE27 		ldrh	r2, [r0, #2046]
 1227 000c 4318     		adds	r3, r0, r1
 1228 000e FFF7FEBF 		b	test_checksum
 1229              	.LVL137:
 1230              	.L104:
 1231 0012 00BF     		.align	2
 1232              	.L103:
 1233 0014 00000000 		.word	main_ram
 1234              		.cfi_endproc
 1235              	.LFE7:
 1237              		.section	.text.checksum_backup,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	checksum_backup
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	checksum_backup:
 1247              	.LFB8:
 221:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1248              		.loc 1 221 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 222:src/storage.c **** 		              BackupFlash._crc, NULL );
 1253              		.loc 1 222 2 view .LVU368
 222:src/storage.c **** 		              BackupFlash._crc, NULL );
 1254              		.loc 1 222 9 is_stmt 0 view .LVU369
 1255 0000 144B     		ldr	r3, .L111
 1256 0002 1968     		ldr	r1, [r3]
 1257 0004 B1F8FE07 		ldrh	r0, [r1, #2046]
 1258              	.LVL138:
 1259              	.LBB58:
 1260              	.LBI58:
 182:src/storage.c **** {
 1261              		.loc 1 182 12 is_stmt 1 view .LVU370
ARM GAS  /tmp/ccsMEfLZ.s 			page 50


 1262              	.LBB59:
 184:src/storage.c **** 	crc = crc16( data, length );
 1263              		.loc 1 184 2 view .LVU371
 185:src/storage.c **** 	
 1264              		.loc 1 185 2 view .LVU372
 1265              	.LBB60:
 1266              	.LBI60:
 161:src/storage.c **** {
 1267              		.loc 1 161 20 view .LVU373
 1268              	.LBB61:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1269              		.loc 1 163 2 view .LVU374
 164:src/storage.c **** 	unsigned int i;
 1270              		.loc 1 164 2 view .LVU375
 165:src/storage.c **** 
 1271              		.loc 1 165 2 view .LVU376
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1272              		.loc 1 167 2 view .LVU377
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1273              		.loc 1 167 15 view .LVU378
 1274              	.LBE61:
 1275              	.LBE60:
 1276              	.LBE59:
 1277              	.LBE58:
 221:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1278              		.loc 1 221 1 is_stmt 0 view .LVU379
 1279 0008 10B4     		push	{r4}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 4, -4
 1282              	.LBB66:
 1283              	.LBB64:
 1284              	.LBB63:
 1285              	.LBB62:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1286              		.loc 1 163 21 view .LVU380
 1287 000a 45F6A523 		movw	r3, #23205
 1288 000e 01F2FE74 		addw	r4, r1, #2046
 1289              	.LVL139:
 1290              	.L106:
 168:src/storage.c **** 		crc ^= *d++;
 1291              		.loc 1 168 3 is_stmt 1 view .LVU381
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1292              		.loc 1 169 10 is_stmt 0 view .LVU382
 1293 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1294              	.LVL140:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1295              		.loc 1 169 10 view .LVU383
 1296 0016 5BBA     		rev16	r3, r3
 1297              	.LVL141:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1298              		.loc 1 169 10 view .LVU384
 1299 0018 9BB2     		uxth	r3, r3
 1300              	.LVL142:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1301              		.loc 1 169 3 is_stmt 1 view .LVU385
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1302              		.loc 1 169 7 is_stmt 0 view .LVU386
ARM GAS  /tmp/ccsMEfLZ.s 			page 51


 1303 001a 5340     		eors	r3, r3, r2
 1304              	.LVL143:
 170:src/storage.c **** 		crc ^= crc << 12;
 1305              		.loc 1 170 3 is_stmt 1 view .LVU387
 170:src/storage.c **** 		crc ^= crc << 12;
 1306              		.loc 1 170 7 is_stmt 0 view .LVU388
 1307 001c C3F30312 		ubfx	r2, r3, #4, #4
 1308 0020 5340     		eors	r3, r3, r2
 1309              	.LVL144:
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1310              		.loc 1 171 3 is_stmt 1 view .LVU389
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1311              		.loc 1 171 7 is_stmt 0 view .LVU390
 1312 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1313              	.LVL145:
 172:src/storage.c **** 	}
 1314              		.loc 1 172 3 is_stmt 1 view .LVU391
 172:src/storage.c **** 	}
 1315              		.loc 1 172 25 is_stmt 0 view .LVU392
 1316 0026 5A01     		lsls	r2, r3, #5
 1317 0028 02F4FF52 		and	r2, r2, #8160
 172:src/storage.c **** 	}
 1318              		.loc 1 172 7 view .LVU393
 1319 002c 9BB2     		uxth	r3, r3
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1320              		.loc 1 167 2 view .LVU394
 1321 002e 8C42     		cmp	r4, r1
 172:src/storage.c **** 	}
 1322              		.loc 1 172 7 view .LVU395
 1323 0030 83EA0203 		eor	r3, r3, r2
 1324              	.LVL146:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1325              		.loc 1 167 27 is_stmt 1 view .LVU396
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1326              		.loc 1 167 15 view .LVU397
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1327              		.loc 1 167 2 is_stmt 0 view .LVU398
 1328 0034 EDD1     		bne	.L106
 174:src/storage.c **** }
 1329              		.loc 1 174 2 is_stmt 1 view .LVU399
 1330              	.LVL147:
 174:src/storage.c **** }
 1331              		.loc 1 174 2 is_stmt 0 view .LVU400
 1332              	.LBE62:
 1333              	.LBE63:
 187:src/storage.c **** 		*pcrc = crc;
 1334              		.loc 1 187 2 is_stmt 1 view .LVU401
 190:src/storage.c **** }
 1335              		.loc 1 190 2 view .LVU402
 190:src/storage.c **** }
 1336              		.loc 1 190 23 is_stmt 0 view .LVU403
 1337 0036 9842     		cmp	r0, r3
 1338 0038 07D0     		beq	.L108
 1339 003a 4AF23C53 		movw	r3, #42300
 1340              	.LVL148:
 190:src/storage.c **** }
 1341              		.loc 1 190 23 view .LVU404
ARM GAS  /tmp/ccsMEfLZ.s 			page 52


 1342 003e C01A     		subs	r0, r0, r3
 1343              	.LVL149:
 190:src/storage.c **** }
 1344              		.loc 1 190 23 view .LVU405
 1345 0040 18BF     		it	ne
 1346 0042 0120     		movne	r0, #1
 1347              	.LVL150:
 190:src/storage.c **** }
 1348              		.loc 1 190 23 view .LVU406
 1349              	.LBE64:
 1350              	.LBE66:
 224:src/storage.c **** 
 1351              		.loc 1 224 1 view .LVU407
 1352 0044 5DF8044B 		ldr	r4, [sp], #4
 1353              		.cfi_remember_state
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL151:
 224:src/storage.c **** 
 1357              		.loc 1 224 1 view .LVU408
 1358 0048 7047     		bx	lr
 1359              	.LVL152:
 1360              	.L108:
 1361              		.cfi_restore_state
 1362              	.LBB67:
 1363              	.LBB65:
 190:src/storage.c **** }
 1364              		.loc 1 190 23 view .LVU409
 1365 004a 0020     		movs	r0, #0
 1366              	.LVL153:
 190:src/storage.c **** }
 1367              		.loc 1 190 23 view .LVU410
 1368              	.LBE65:
 1369              	.LBE67:
 224:src/storage.c **** 
 1370              		.loc 1 224 1 view .LVU411
 1371 004c 5DF8044B 		ldr	r4, [sp], #4
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374 0050 7047     		bx	lr
 1375              	.L112:
 1376 0052 00BF     		.align	2
 1377              	.L111:
 1378 0054 00000000 		.word	backup_ram
 1379              		.cfi_endproc
 1380              	.LFE8:
 1382              		.section	.text.clpall,"ax",%progbits
 1383              		.align	1
 1384              		.p2align 2,,3
 1385              		.global	clpall
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	clpall:
 1392              	.LFB11:
 253:src/storage.c **** 	clrretstk_pc();
ARM GAS  /tmp/ccsMEfLZ.s 			page 53


 1393              		.loc 1 253 1 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 254:src/storage.c **** 	stoend();
 1397              		.loc 1 254 2 view .LVU413
 253:src/storage.c **** 	clrretstk_pc();
 1398              		.loc 1 253 1 is_stmt 0 view .LVU414
 1399 0000 08B5     		push	{r3, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 3, -8
 1402              		.cfi_offset 14, -4
 254:src/storage.c **** 	stoend();
 1403              		.loc 1 254 2 view .LVU415
 1404 0002 FFF7FEFF 		bl	clrretstk_pc
 1405              	.LVL154:
 255:src/storage.c **** }
 1406              		.loc 1 255 2 is_stmt 1 view .LVU416
 1407              	.LBB68:
 1408              	.LBI68:
 242:src/storage.c **** {
 1409              		.loc 1 242 13 view .LVU417
 1410              	.LBB69:
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1411              		.loc 1 244 2 view .LVU418
 1412 0006 044B     		ldr	r3, .L115
 1413 0008 1B68     		ldr	r3, [r3]
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1414              		.loc 1 244 11 is_stmt 0 view .LVU419
 1415 000a 0121     		movs	r1, #1
 245:src/storage.c **** }
 1416              		.loc 1 245 12 view .LVU420
 1417 000c 4FF49D72 		mov	r2, #314
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1418              		.loc 1 244 11 view .LVU421
 1419 0010 5980     		strh	r1, [r3, #2]	@ movhi
 245:src/storage.c **** }
 1420              		.loc 1 245 2 is_stmt 1 view .LVU422
 245:src/storage.c **** }
 1421              		.loc 1 245 12 is_stmt 0 view .LVU423
 1422 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1423              	.LBE69:
 1424              	.LBE68:
 256:src/storage.c **** 
 1425              		.loc 1 256 1 view .LVU424
 1426 0014 08BD     		pop	{r3, pc}
 1427              	.L116:
 1428 0016 00BF     		.align	2
 1429              	.L115:
 1430 0018 00000000 		.word	main_ram
 1431              		.cfi_endproc
 1432              	.LFE11:
 1434              		.section	.text.clrall,"ax",%progbits
 1435              		.align	1
 1436              		.p2align 2,,3
 1437              		.global	clrall
 1438              		.syntax unified
ARM GAS  /tmp/ccsMEfLZ.s 			page 54


 1439              		.thumb
 1440              		.thumb_func
 1441              		.fpu fpv4-sp-d16
 1443              	clrall:
 1444              	.LFB14:
 306:src/storage.c **** 	NumRegs = TOPREALREG;
 1445              		.loc 1 306 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 307:src/storage.c **** 	xeq_init_contexts();
 1449              		.loc 1 307 2 view .LVU426
 306:src/storage.c **** 	NumRegs = TOPREALREG;
 1450              		.loc 1 306 1 is_stmt 0 view .LVU427
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 307:src/storage.c **** 	xeq_init_contexts();
 1455              		.loc 1 307 10 view .LVU428
 1456 0002 124C     		ldr	r4, .L119
 1457 0004 2368     		ldr	r3, [r4]
 1458 0006 6422     		movs	r2, #100
 1459 0008 83F8CF27 		strb	r2, [r3, #1999]
 308:src/storage.c **** 	clrreg( OP_CLREG );
 1460              		.loc 1 308 2 is_stmt 1 view .LVU429
 1461 000c FFF7FEFF 		bl	xeq_init_contexts
 1462              	.LVL155:
 309:src/storage.c **** 	clrstk( OP_CLSTK );
 1463              		.loc 1 309 2 view .LVU430
 1464 0010 3E20     		movs	r0, #62
 1465 0012 FFF7FEFF 		bl	clrreg
 1466              	.LVL156:
 310:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1467              		.loc 1 310 2 view .LVU431
 1468 0016 4020     		movs	r0, #64
 1469 0018 FFF7FEFF 		bl	clrstk
 1470              	.LVL157:
 311:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1471              		.loc 1 311 2 view .LVU432
 1472 001c 7420     		movs	r0, #116
 1473 001e FFF7FEFF 		bl	clralpha
 1474              	.LVL158:
 312:src/storage.c **** 	clpall();
 1475              		.loc 1 312 2 view .LVU433
 1476 0022 4520     		movs	r0, #69
 1477 0024 FFF7FEFF 		bl	clrflags
 1478              	.LVL159:
 313:src/storage.c **** 
 1479              		.loc 1 313 2 view .LVU434
 1480              	.LBB70:
 1481              	.LBI70:
 252:src/storage.c **** {
 1482              		.loc 1 252 6 view .LVU435
 1483              	.LBB71:
 254:src/storage.c **** 	stoend();
 1484              		.loc 1 254 2 view .LVU436
ARM GAS  /tmp/ccsMEfLZ.s 			page 55


 1485 0028 FFF7FEFF 		bl	clrretstk_pc
 1486              	.LVL160:
 255:src/storage.c **** }
 1487              		.loc 1 255 2 view .LVU437
 1488              	.LBB72:
 1489              	.LBI72:
 242:src/storage.c **** {
 1490              		.loc 1 242 13 view .LVU438
 1491              	.LBB73:
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1492              		.loc 1 244 2 view .LVU439
 1493 002c 2368     		ldr	r3, [r4]
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1494              		.loc 1 244 11 is_stmt 0 view .LVU440
 1495 002e 0121     		movs	r1, #1
 245:src/storage.c **** }
 1496              		.loc 1 245 12 view .LVU441
 1497 0030 4FF49D72 		mov	r2, #314
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1498              		.loc 1 244 11 view .LVU442
 1499 0034 5980     		strh	r1, [r3, #2]	@ movhi
 245:src/storage.c **** }
 1500              		.loc 1 245 2 is_stmt 1 view .LVU443
 245:src/storage.c **** }
 1501              		.loc 1 245 12 is_stmt 0 view .LVU444
 1502 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.LBE73:
 1504              	.LBE72:
 1505              	.LBE71:
 1506              	.LBE70:
 315:src/storage.c **** 	State2.test = TST_NONE;
 1507              		.loc 1 315 2 is_stmt 1 view .LVU445
 1508 0038 FFF7FEFF 		bl	reset_shift
 1509              	.LVL161:
 316:src/storage.c **** 
 1510              		.loc 1 316 2 view .LVU446
 316:src/storage.c **** 
 1511              		.loc 1 316 14 is_stmt 0 view .LVU447
 1512 003c 0449     		ldr	r1, .L119+4
 318:src/storage.c **** }
 1513              		.loc 1 318 10 view .LVU448
 1514 003e 054B     		ldr	r3, .L119+8
 316:src/storage.c **** 
 1515              		.loc 1 316 14 view .LVU449
 1516 0040 0720     		movs	r0, #7
 318:src/storage.c **** }
 1517              		.loc 1 318 10 view .LVU450
 1518 0042 0022     		movs	r2, #0
 316:src/storage.c **** 
 1519              		.loc 1 316 14 view .LVU451
 1520 0044 C873     		strb	r0, [r1, #15]
 318:src/storage.c **** }
 1521              		.loc 1 318 2 is_stmt 1 view .LVU452
 318:src/storage.c **** }
 1522              		.loc 1 318 10 is_stmt 0 view .LVU453
 1523 0046 1A60     		str	r2, [r3]
 319:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 56


 1524              		.loc 1 319 1 view .LVU454
 1525 0048 10BD     		pop	{r4, pc}
 1526              	.L120:
 1527 004a 00BF     		.align	2
 1528              	.L119:
 1529 004c 00000000 		.word	main_ram
 1530 0050 00000000 		.word	StateWhileOn
 1531 0054 00000000 		.word	DispMsg
 1532              		.cfi_endproc
 1533              	.LFE14:
 1535              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1536              		.align	2
 1537              	.LC6:
 1538 0000 45726173 		.ascii	"Erased\000"
 1538      656400
 1539              		.section	.text.reset,"ax",%progbits
 1540              		.align	1
 1541              		.p2align 2,,3
 1542              		.global	reset
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	reset:
 1549              	.LFB15:
 326:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1550              		.loc 1 326 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 327:src/storage.c **** 	clrall();
 1554              		.loc 1 327 3 view .LVU456
 326:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1555              		.loc 1 326 1 is_stmt 0 view .LVU457
 1556 0000 08B5     		push	{r3, lr}
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 3, -8
 1559              		.cfi_offset 14, -4
 327:src/storage.c **** 	clrall();
 1560              		.loc 1 327 3 view .LVU458
 1561 0002 094B     		ldr	r3, .L123
 1562 0004 4FF40062 		mov	r2, #2048
 1563 0008 1868     		ldr	r0, [r3]
 1564 000a 0021     		movs	r1, #0
 1565 000c FFF7FEFF 		bl	xset
 1566              	.LVL162:
 328:src/storage.c **** 	init_state();
 1567              		.loc 1 328 2 is_stmt 1 view .LVU459
 1568 0010 FFF7FEFF 		bl	clrall
 1569              	.LVL163:
 329:src/storage.c **** #ifndef DM42
 1570              		.loc 1 329 2 view .LVU460
 1571 0014 FFF7FEFF 		bl	init_state
 1572              	.LVL164:
 335:src/storage.c **** #else
 1573              		.loc 1 335 2 view .LVU461
 1574 0018 044B     		ldr	r3, .L123+4
ARM GAS  /tmp/ccsMEfLZ.s 			page 57


 1575 001a 4FF4E160 		mov	r0, #1800
 1576 001e 9847     		blx	r3
 1577              	.LVL165:
 340:src/storage.c **** }
 1578              		.loc 1 340 2 view .LVU462
 340:src/storage.c **** }
 1579              		.loc 1 340 10 is_stmt 0 view .LVU463
 1580 0020 034B     		ldr	r3, .L123+8
 1581 0022 044A     		ldr	r2, .L123+12
 1582 0024 1A60     		str	r2, [r3]
 341:src/storage.c **** 
 1583              		.loc 1 341 1 view .LVU464
 1584 0026 08BD     		pop	{r3, pc}
 1585              	.L124:
 1586              		.align	2
 1587              	.L123:
 1588 0028 00000000 		.word	main_ram
 1589 002c 35030008 		.word	134218549
 1590 0030 00000000 		.word	DispMsg
 1591 0034 00000000 		.word	.LC6
 1592              		.cfi_endproc
 1593              	.LFE15:
 1595              		.section	.text.stoprog,"ax",%progbits
 1596              		.align	1
 1597              		.p2align 2,,3
 1598              		.global	stoprog
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv4-sp-d16
 1604              	stoprog:
 1605              	.LVL166:
 1606              	.LFB16:
 347:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1607              		.loc 1 347 26 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 348:src/storage.c **** 	int i;
 1611              		.loc 1 348 2 view .LVU466
 347:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1612              		.loc 1 347 26 is_stmt 0 view .LVU467
 1613 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1614              		.cfi_def_cfa_offset 32
 1615              		.cfi_offset 3, -32
 1616              		.cfi_offset 4, -28
 1617              		.cfi_offset 5, -24
 1618              		.cfi_offset 6, -20
 1619              		.cfi_offset 7, -16
 1620              		.cfi_offset 8, -12
 1621              		.cfi_offset 9, -8
 1622              		.cfi_offset 14, -4
 350:src/storage.c **** 
 1623              		.loc 1 350 20 view .LVU468
 1624 0004 374F     		ldr	r7, .L145
 348:src/storage.c **** 	int i;
 1625              		.loc 1 348 18 view .LVU469
ARM GAS  /tmp/ccsMEfLZ.s 			page 58


 1626 0006 00F47046 		and	r6, r0, #61440
 350:src/storage.c **** 
 1627              		.loc 1 350 20 view .LVU470
 1628 000a 3B68     		ldr	r3, [r7]
 348:src/storage.c **** 	int i;
 1629              		.loc 1 348 33 view .LVU471
 1630 000c B6F5704F 		cmp	r6, #61440
 350:src/storage.c **** 
 1631              		.loc 1 350 20 view .LVU472
 1632 0010 B3F8E057 		ldrh	r5, [r3, #2016]
 1633              	.LVL167:
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1634              		.loc 1 352 2 is_stmt 1 view .LVU473
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1635              		.loc 1 352 5 is_stmt 0 view .LVU474
 1636 0014 5B88     		ldrh	r3, [r3, #2]
 347:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1637              		.loc 1 347 26 view .LVU475
 1638 0016 0446     		mov	r4, r0
 348:src/storage.c **** 	int i;
 1639              		.loc 1 348 33 view .LVU476
 1640 0018 57D0     		beq	.L126
 1641              	.LVL168:
 349:src/storage.c **** 	unsigned int pc = state_pc();
 1642              		.loc 1 349 2 is_stmt 1 discriminator 4 view .LVU477
 350:src/storage.c **** 
 1643              		.loc 1 350 2 discriminator 4 view .LVU478
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1644              		.loc 1 352 5 is_stmt 0 discriminator 4 view .LVU479
 1645 001a AB42     		cmp	r3, r5
 348:src/storage.c **** 	int i;
 1646              		.loc 1 348 33 discriminator 4 view .LVU480
 1647 001c 4FF00108 		mov	r8, #1
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1648              		.loc 1 352 5 discriminator 4 view .LVU481
 1649 0020 44D0     		beq	.L141
 1650              	.LVL169:
 1651              	.L127:
 355:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1652              		.loc 1 355 2 is_stmt 1 view .LVU482
 355:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1653              		.loc 1 355 5 is_stmt 0 view .LVU483
 1654 0022 15F47049 		ands	r9, r5, #61440
 1655 0026 4BD1     		bne	.L142
 1656              	.LVL170:
 1657              	.L128:
 359:src/storage.c **** 	xeq_init_contexts();
 1658              		.loc 1 359 2 is_stmt 1 view .LVU484
 1659 0028 FFF7FEFF 		bl	clrretstk
 1660              	.LVL171:
 360:src/storage.c **** 	if ( ProgFree < off ) {
 1661              		.loc 1 360 2 view .LVU485
 1662 002c FFF7FEFF 		bl	xeq_init_contexts
 1663              	.LVL172:
 361:src/storage.c **** 		return;
 1664              		.loc 1 361 2 view .LVU486
 361:src/storage.c **** 		return;
ARM GAS  /tmp/ccsMEfLZ.s 			page 59


 1665              		.loc 1 361 16 is_stmt 0 view .LVU487
 1666 0030 2D4B     		ldr	r3, .L145+4
 361:src/storage.c **** 		return;
 1667              		.loc 1 361 5 view .LVU488
 1668 0032 1B68     		ldr	r3, [r3]
 1669 0034 4345     		cmp	r3, r8
 1670 0036 01DA     		bge	.L143
 374:src/storage.c **** 
 1671              		.loc 1 374 1 view .LVU489
 1672 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1673              	.LVL173:
 1674              	.L143:
 364:src/storage.c **** 	ProgEnd += off;
 1675              		.loc 1 364 2 is_stmt 1 view .LVU490
 364:src/storage.c **** 	ProgEnd += off;
 1676              		.loc 1 364 11 is_stmt 0 view .LVU491
 1677 003c 3B68     		ldr	r3, [r7]
 1678 003e B3F802C0 		ldrh	ip, [r3, #2]
 365:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1679              		.loc 1 365 10 view .LVU492
 1680 0042 B3F8EE27 		ldrh	r2, [r3, #2030]
 364:src/storage.c **** 	ProgEnd += off;
 1681              		.loc 1 364 11 view .LVU493
 1682 0046 C444     		add	ip, ip, r8
 365:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1683              		.loc 1 365 10 view .LVU494
 1684 0048 4244     		add	r2, r2, r8
 364:src/storage.c **** 	ProgEnd += off;
 1685              		.loc 1 364 11 view .LVU495
 1686 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 365:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1687              		.loc 1 365 2 is_stmt 1 view .LVU496
 365:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1688              		.loc 1 365 10 is_stmt 0 view .LVU497
 1689 004e A3F8EE27 		strh	r2, [r3, #2030]	@ movhi
 366:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1690              		.loc 1 366 2 is_stmt 1 view .LVU498
 366:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1691              		.loc 1 366 7 is_stmt 0 view .LVU499
 1692 0052 4946     		mov	r1, r9
 1693 0054 2846     		mov	r0, r5
 1694 0056 FFF7FEFF 		bl	do_inc
 1695              	.LVL174:
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1696              		.loc 1 367 12 view .LVU500
 1697 005a D7F800C0 		ldr	ip, [r7]
 1698 005e BCF80230 		ldrh	r3, [ip, #2]
 1699              	.LVL175:
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1700              		.loc 1 367 2 is_stmt 1 view .LVU501
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1701              		.loc 1 367 10 is_stmt 0 view .LVU502
 1702 0062 5A1C     		adds	r2, r3, #1
 1703              	.LVL176:
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1704              		.loc 1 367 26 is_stmt 1 view .LVU503
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
ARM GAS  /tmp/ccsMEfLZ.s 			page 60


 1705              		.loc 1 367 2 is_stmt 0 view .LVU504
 1706 0064 8242     		cmp	r2, r0
 1707 0066 39DD     		ble	.L130
 1708 0068 03F10043 		add	r3, r3, #-2147483648
 1709 006c 0CF10407 		add	r7, ip, #4
 1710 0070 0133     		adds	r3, r3, #1
 1711 0072 A2EB0802 		sub	r2, r2, r8
 1712              	.LVL177:
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1713              		.loc 1 367 2 view .LVU505
 1714 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1715              	.LVL178:
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1716              		.loc 1 367 2 view .LVU506
 1717 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1718 007e 07EB4005 		add	r5, r7, r0, lsl #1
 1719              	.LVL179:
 1720              	.L131:
 368:src/storage.c **** 	}
 1721              		.loc 1 368 3 is_stmt 1 discriminator 3 view .LVU507
 368:src/storage.c **** 	}
 1722              		.loc 1 368 23 is_stmt 0 discriminator 3 view .LVU508
 1723 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 368:src/storage.c **** 	}
 1724              		.loc 1 368 15 discriminator 3 view .LVU509
 1725 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1726              		.loc 1 367 40 is_stmt 1 discriminator 3 view .LVU510
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1727              		.loc 1 367 26 discriminator 3 view .LVU511
 367:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1728              		.loc 1 367 2 is_stmt 0 discriminator 3 view .LVU512
 1729 008a AB42     		cmp	r3, r5
 1730 008c F9D1     		bne	.L131
 1731              	.L132:
 370:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1732              		.loc 1 370 2 is_stmt 1 view .LVU513
 370:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1733              		.loc 1 370 5 is_stmt 0 view .LVU514
 1734 008e B6F5704F 		cmp	r6, #61440
 371:src/storage.c **** 	Prog_1[pc] = c;
 1735              		.loc 1 371 3 is_stmt 1 view .LVU515
 372:src/storage.c **** 	State.pc = pc;
 1736              		.loc 1 372 2 view .LVU516
 371:src/storage.c **** 	Prog_1[pc] = c;
 1737              		.loc 1 371 22 is_stmt 0 view .LVU517
 1738 0092 04BF     		itt	eq
 1739 0094 230C     		lsreq	r3, r4, #16
 371:src/storage.c **** 	Prog_1[pc] = c;
 1740              		.loc 1 371 18 view .LVU518
 1741 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 372:src/storage.c **** 	State.pc = pc;
 1742              		.loc 1 372 8 view .LVU519
 1743 009a 00F10043 		add	r3, r0, #-2147483648
 1744 009e 013B     		subs	r3, r3, #1
 372:src/storage.c **** 	State.pc = pc;
 1745              		.loc 1 372 13 view .LVU520
ARM GAS  /tmp/ccsMEfLZ.s 			page 61


 1746 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
 373:src/storage.c **** }
 1747              		.loc 1 373 2 is_stmt 1 view .LVU521
 373:src/storage.c **** }
 1748              		.loc 1 373 11 is_stmt 0 view .LVU522
 1749 00a4 ACF8E007 		strh	r0, [ip, #2016]	@ movhi
 374:src/storage.c **** 
 1750              		.loc 1 374 1 view .LVU523
 1751 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1752              	.LVL180:
 1753              	.L141:
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1754              		.loc 1 352 22 discriminator 1 view .LVU524
 1755 00ac B0F59D7F 		cmp	r0, #314
 1756 00b0 B7D0     		beq	.L127
 353:src/storage.c **** 
 1757              		.loc 1 353 3 is_stmt 1 view .LVU525
 1758 00b2 4FF49D70 		mov	r0, #314
 1759              	.LVL181:
 353:src/storage.c **** 
 1760              		.loc 1 353 3 is_stmt 0 view .LVU526
 1761 00b6 FFF7FEFF 		bl	stoprog
 1762              	.LVL182:
 1763              	.L144:
 355:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1764              		.loc 1 355 2 is_stmt 1 view .LVU527
 355:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1765              		.loc 1 355 5 is_stmt 0 view .LVU528
 1766 00ba 15F47049 		ands	r9, r5, #61440
 1767 00be B3D0     		beq	.L128
 1768              	.L142:
 356:src/storage.c **** 		return;
 1769              		.loc 1 356 3 is_stmt 1 view .LVU529
 374:src/storage.c **** 
 1770              		.loc 1 374 1 is_stmt 0 view .LVU530
 1771 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1772              		.cfi_remember_state
 1773              		.cfi_restore 14
 1774              		.cfi_restore 9
 1775              		.cfi_restore 8
 1776              		.cfi_restore 7
 1777              		.cfi_restore 6
 1778              		.cfi_restore 5
 1779              		.cfi_restore 4
 1780              		.cfi_restore 3
 1781              		.cfi_def_cfa_offset 0
 1782              	.LVL183:
 356:src/storage.c **** 		return;
 1783              		.loc 1 356 3 view .LVU531
 1784 00c4 1320     		movs	r0, #19
 1785 00c6 FFF7FEBF 		b	report_warn
 1786              	.LVL184:
 1787              	.L126:
 1788              		.cfi_restore_state
 349:src/storage.c **** 	unsigned int pc = state_pc();
 1789              		.loc 1 349 2 is_stmt 1 view .LVU532
 350:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 62


 1790              		.loc 1 350 2 view .LVU533
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1791              		.loc 1 352 5 is_stmt 0 view .LVU534
 1792 00ca AB42     		cmp	r3, r5
 348:src/storage.c **** 	int i;
 1793              		.loc 1 348 33 view .LVU535
 1794 00cc 4FF00208 		mov	r8, #2
 352:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1795              		.loc 1 352 5 view .LVU536
 1796 00d0 A7D1     		bne	.L127
 353:src/storage.c **** 
 1797              		.loc 1 353 3 is_stmt 1 view .LVU537
 1798 00d2 4FF49D70 		mov	r0, #314
 1799              	.LVL185:
 353:src/storage.c **** 
 1800              		.loc 1 353 3 is_stmt 0 view .LVU538
 1801 00d6 FFF7FEFF 		bl	stoprog
 1802              	.LVL186:
 1803 00da EEE7     		b	.L144
 1804              	.LVL187:
 1805              	.L130:
 353:src/storage.c **** 
 1806              		.loc 1 353 3 view .LVU539
 1807 00dc 0CF10407 		add	r7, ip, #4
 1808 00e0 D5E7     		b	.L132
 1809              	.L146:
 1810 00e2 00BF     		.align	2
 1811              	.L145:
 1812 00e4 00000000 		.word	main_ram
 1813 00e8 00000000 		.word	ProgFree
 1814              		.cfi_endproc
 1815              	.LFE16:
 1817              		.section	.text.delprog,"ax",%progbits
 1818              		.align	1
 1819              		.p2align 2,,3
 1820              		.global	delprog
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1824              		.fpu fpv4-sp-d16
 1826              	delprog:
 1827              	.LFB17:
 381:src/storage.c **** 	int i;
 1828              		.loc 1 381 1 is_stmt 1 view -0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/storage.c **** 	const unsigned int pc = state_pc();
 1832              		.loc 1 382 2 view .LVU541
 383:src/storage.c **** 	int off;
 1833              		.loc 1 383 2 view .LVU542
 381:src/storage.c **** 	int i;
 1834              		.loc 1 381 1 is_stmt 0 view .LVU543
 1835 0000 70B5     		push	{r4, r5, r6, lr}
 1836              		.cfi_def_cfa_offset 16
 1837              		.cfi_offset 4, -16
 1838              		.cfi_offset 5, -12
ARM GAS  /tmp/ccsMEfLZ.s 			page 63


 1839              		.cfi_offset 6, -8
 1840              		.cfi_offset 14, -4
 383:src/storage.c **** 	int off;
 1841              		.loc 1 383 26 view .LVU544
 1842 0002 194D     		ldr	r5, .L159
 1843 0004 2B68     		ldr	r3, [r5]
 1844 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 1845              	.LVL188:
 384:src/storage.c **** 
 1846              		.loc 1 384 2 is_stmt 1 view .LVU545
 386:src/storage.c **** 		return;
 1847              		.loc 1 386 2 view .LVU546
 386:src/storage.c **** 		return;
 1848              		.loc 1 386 7 is_stmt 0 view .LVU547
 1849 000a 2046     		mov	r0, r4
 1850 000c FFF7FEFF 		bl	check_delete_prog
 1851              	.LVL189:
 386:src/storage.c **** 		return;
 1852              		.loc 1 386 5 view .LVU548
 1853 0010 48BB     		cbnz	r0, .L147
 388:src/storage.c **** 		return;
 1854              		.loc 1 388 2 is_stmt 1 view .LVU549
 388:src/storage.c **** 		return;
 1855              		.loc 1 388 5 is_stmt 0 view .LVU550
 1856 0012 44B3     		cbz	r4, .L147
 391:src/storage.c **** 	ProgSize -= off;
 1857              		.loc 1 391 2 is_stmt 1 view .LVU551
 391:src/storage.c **** 	ProgSize -= off;
 1858              		.loc 1 391 8 is_stmt 0 view .LVU552
 1859 0014 2D68     		ldr	r5, [r5]
 1860 0016 05EB4403 		add	r3, r5, r4, lsl #1
 392:src/storage.c **** 	ProgEnd -= off;
 1861              		.loc 1 392 11 view .LVU553
 1862 001a 6A88     		ldrh	r2, [r5, #2]
 391:src/storage.c **** 	ProgSize -= off;
 1863              		.loc 1 391 33 view .LVU554
 1864 001c 5B88     		ldrh	r3, [r3, #2]
 393:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1865              		.loc 1 393 10 view .LVU555
 1866 001e B5F8EE17 		ldrh	r1, [r5, #2030]
 391:src/storage.c **** 	ProgSize -= off;
 1867              		.loc 1 391 33 view .LVU556
 1868 0022 03F47043 		and	r3, r3, #61440
 1869 0026 B3F5704F 		cmp	r3, #61440
 1870 002a 14BF     		ite	ne
 1871 002c 0126     		movne	r6, #1
 1872 002e 0226     		moveq	r6, #2
 392:src/storage.c **** 	ProgEnd -= off;
 1873              		.loc 1 392 11 view .LVU557
 1874 0030 921B     		subs	r2, r2, r6
 1875 0032 92B2     		uxth	r2, r2
 393:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1876              		.loc 1 393 10 view .LVU558
 1877 0034 891B     		subs	r1, r1, r6
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1878              		.loc 1 394 2 view .LVU559
 1879 0036 9442     		cmp	r4, r2
ARM GAS  /tmp/ccsMEfLZ.s 			page 64


 391:src/storage.c **** 	ProgSize -= off;
 1880              		.loc 1 391 33 view .LVU560
 1881 0038 3346     		mov	r3, r6
 1882              	.LVL190:
 392:src/storage.c **** 	ProgEnd -= off;
 1883              		.loc 1 392 2 is_stmt 1 view .LVU561
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1884              		.loc 1 394 10 is_stmt 0 view .LVU562
 1885 003a 2046     		mov	r0, r4
 392:src/storage.c **** 	ProgEnd -= off;
 1886              		.loc 1 392 11 view .LVU563
 1887 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 393:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1888              		.loc 1 393 2 is_stmt 1 view .LVU564
 393:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1889              		.loc 1 393 10 is_stmt 0 view .LVU565
 1890 003e A5F8EE17 		strh	r1, [r5, #2030]	@ movhi
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1891              		.loc 1 394 2 is_stmt 1 view .LVU566
 1892              	.LVL191:
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1893              		.loc 1 394 16 view .LVU567
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1894              		.loc 1 394 2 is_stmt 0 view .LVU568
 1895 0042 0CDC     		bgt	.L152
 1896 0044 2344     		add	r3, r3, r4
 1897              	.LVL192:
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1898              		.loc 1 394 2 view .LVU569
 1899 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1900 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1901              	.LVL193:
 1902              	.L151:
 395:src/storage.c **** 	decpc();
 1903              		.loc 1 395 3 is_stmt 1 discriminator 3 view .LVU570
 395:src/storage.c **** 	decpc();
 1904              		.loc 1 395 23 is_stmt 0 discriminator 3 view .LVU571
 1905 004e 33F8021F 		ldrh	r1, [r3, #2]!
 395:src/storage.c **** 	decpc();
 1906              		.loc 1 395 15 discriminator 3 view .LVU572
 1907 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1908              		.loc 1 394 37 is_stmt 1 discriminator 3 view .LVU573
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1909              		.loc 1 394 21 is_stmt 0 discriminator 3 view .LVU574
 1910 0056 6988     		ldrh	r1, [r5, #2]
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1911              		.loc 1 394 37 discriminator 3 view .LVU575
 1912 0058 0130     		adds	r0, r0, #1
 1913              	.LVL194:
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1914              		.loc 1 394 16 is_stmt 1 discriminator 3 view .LVU576
 394:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1915              		.loc 1 394 2 is_stmt 0 discriminator 3 view .LVU577
 1916 005a 8142     		cmp	r1, r0
 1917 005c F7DA     		bge	.L151
 1918              	.L152:
ARM GAS  /tmp/ccsMEfLZ.s 			page 65


 396:src/storage.c **** }
 1919              		.loc 1 396 2 is_stmt 1 view .LVU578
 397:src/storage.c **** 
 1920              		.loc 1 397 1 is_stmt 0 view .LVU579
 1921 005e BDE87040 		pop	{r4, r5, r6, lr}
 1922              		.cfi_remember_state
 1923              		.cfi_restore 14
 1924              		.cfi_restore 6
 1925              		.cfi_restore 5
 1926              		.cfi_restore 4
 1927              		.cfi_def_cfa_offset 0
 1928              	.LVL195:
 396:src/storage.c **** }
 1929              		.loc 1 396 2 view .LVU580
 1930 0062 FFF7FEBF 		b	decpc
 1931              	.LVL196:
 1932              	.L147:
 1933              		.cfi_restore_state
 397:src/storage.c **** 
 1934              		.loc 1 397 1 view .LVU581
 1935 0066 70BD     		pop	{r4, r5, r6, pc}
 1936              	.LVL197:
 1937              	.L160:
 397:src/storage.c **** 
 1938              		.loc 1 397 1 view .LVU582
 1939              		.align	2
 1940              	.L159:
 1941 0068 00000000 		.word	main_ram
 1942              		.cfi_endproc
 1943              	.LFE17:
 1945              		.section	.text.append_program,"ax",%progbits
 1946              		.align	1
 1947              		.p2align 2,,3
 1948              		.global	append_program
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu fpv4-sp-d16
 1954              	append_program:
 1955              	.LVL198:
 1956              	.LFB18:
 405:src/storage.c **** 	unsigned short pc;
 1957              		.loc 1 405 1 is_stmt 1 view -0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 406:src/storage.c **** 	int space_needed = length - ProgFree;
 1961              		.loc 1 406 2 view .LVU584
 407:src/storage.c **** 
 1962              		.loc 1 407 2 view .LVU585
 405:src/storage.c **** 	unsigned short pc;
 1963              		.loc 1 405 1 is_stmt 0 view .LVU586
 1964 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1965              		.cfi_def_cfa_offset 24
 1966              		.cfi_offset 4, -24
 1967              		.cfi_offset 5, -20
 1968              		.cfi_offset 6, -16
ARM GAS  /tmp/ccsMEfLZ.s 			page 66


 1969              		.cfi_offset 7, -12
 1970              		.cfi_offset 8, -8
 1971              		.cfi_offset 14, -4
 409:src/storage.c **** 		/*
 1972              		.loc 1 409 7 view .LVU587
 1973 0004 DFF8C080 		ldr	r8, .L180+8
 407:src/storage.c **** 
 1974              		.loc 1 407 28 view .LVU588
 1975 0008 2D4B     		ldr	r3, .L180
 409:src/storage.c **** 		/*
 1976              		.loc 1 409 7 view .LVU589
 1977 000a D8F80070 		ldr	r7, [r8]
 407:src/storage.c **** 
 1978              		.loc 1 407 6 view .LVU590
 1979 000e 1D68     		ldr	r5, [r3]
 409:src/storage.c **** 		/*
 1980              		.loc 1 409 7 view .LVU591
 1981 0010 7B88     		ldrh	r3, [r7, #2]
 409:src/storage.c **** 		/*
 1982              		.loc 1 409 5 view .LVU592
 1983 0012 012B     		cmp	r3, #1
 405:src/storage.c **** 	unsigned short pc;
 1984              		.loc 1 405 1 view .LVU593
 1985 0014 0C46     		mov	r4, r1
 1986 0016 0646     		mov	r6, r0
 407:src/storage.c **** 
 1987              		.loc 1 407 6 view .LVU594
 1988 0018 A1EB0505 		sub	r5, r1, r5
 1989              	.LVL199:
 409:src/storage.c **** 		/*
 1990              		.loc 1 409 2 is_stmt 1 view .LVU595
 409:src/storage.c **** 		/*
 1991              		.loc 1 409 5 is_stmt 0 view .LVU596
 1992 001c 0BD0     		beq	.L177
 416:src/storage.c **** 		return report_err( ERR_INVALID );
 1993              		.loc 1 416 2 is_stmt 1 view .LVU597
 416:src/storage.c **** 		return report_err( ERR_INVALID );
 1994              		.loc 1 416 5 is_stmt 0 view .LVU598
 1995 001e B1F5687F 		cmp	r1, #928
 1996 0022 39DC     		bgt	.L164
 419:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1997              		.loc 1 419 2 is_stmt 1 view .LVU599
 419:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1998              		.loc 1 419 30 is_stmt 0 view .LVU600
 1999 0024 C3F56873 		rsb	r3, r3, #928
 419:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2000              		.loc 1 419 5 view .LVU601
 2001 0028 8B42     		cmp	r3, r1
 2002 002a 0BDA     		bge	.L163
 2003              	.LVL200:
 2004              	.L176:
 2005              	.LBB74:
 439:src/storage.c **** 		}
 2006              		.loc 1 439 4 is_stmt 1 view .LVU602
 2007              	.LBE74:
 451:src/storage.c **** 
 2008              		.loc 1 451 1 is_stmt 0 view .LVU603
ARM GAS  /tmp/ccsMEfLZ.s 			page 67


 2009 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2010              		.cfi_remember_state
 2011              		.cfi_restore 14
 2012              		.cfi_restore 8
 2013              		.cfi_restore 7
 2014              		.cfi_restore 6
 2015              		.cfi_restore 5
 2016              		.cfi_restore 4
 2017              		.cfi_def_cfa_offset 0
 2018              	.LVL201:
 2019              	.LBB75:
 439:src/storage.c **** 		}
 2020              		.loc 1 439 11 view .LVU604
 2021 0030 0B20     		movs	r0, #11
 2022 0032 FFF7FEBF 		b	report_err
 2023              	.LVL202:
 2024              	.L177:
 2025              		.cfi_restore_state
 439:src/storage.c **** 		}
 2026              		.loc 1 439 11 view .LVU605
 2027              	.LBE75:
 413:src/storage.c **** 		--ProgSize;
 2028              		.loc 1 413 3 is_stmt 1 view .LVU606
 414:src/storage.c **** 	}
 2029              		.loc 1 414 3 is_stmt 0 view .LVU607
 2030 0036 0023     		movs	r3, #0
 416:src/storage.c **** 		return report_err( ERR_INVALID );
 2031              		.loc 1 416 5 view .LVU608
 2032 0038 B1F5687F 		cmp	r1, #928
 413:src/storage.c **** 		--ProgSize;
 2033              		.loc 1 413 3 view .LVU609
 2034 003c 05F1FF35 		add	r5, r5, #-1
 2035              	.LVL203:
 414:src/storage.c **** 	}
 2036              		.loc 1 414 3 is_stmt 1 view .LVU610
 2037 0040 7B80     		strh	r3, [r7, #2]	@ movhi
 416:src/storage.c **** 		return report_err( ERR_INVALID );
 2038              		.loc 1 416 2 view .LVU611
 416:src/storage.c **** 		return report_err( ERR_INVALID );
 2039              		.loc 1 416 5 is_stmt 0 view .LVU612
 2040 0042 29DC     		bgt	.L164
 2041              	.L163:
 426:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2042              		.loc 1 426 2 is_stmt 1 view .LVU613
 2043 0044 FFF7FEFF 		bl	clrretstk
 2044              	.LVL204:
 427:src/storage.c **** 		space_needed -= SizeStatRegs;
 2045              		.loc 1 427 2 view .LVU614
 427:src/storage.c **** 		space_needed -= SizeStatRegs;
 2046              		.loc 1 427 5 is_stmt 0 view .LVU615
 2047 0048 002D     		cmp	r5, #0
 2048 004a 11DD     		ble	.L166
 427:src/storage.c **** 		space_needed -= SizeStatRegs;
 2049              		.loc 1 427 40 discriminator 1 view .LVU616
 2050 004c 1D4B     		ldr	r3, .L180+4
 2051 004e 1B68     		ldr	r3, [r3]
 427:src/storage.c **** 		space_needed -= SizeStatRegs;
ARM GAS  /tmp/ccsMEfLZ.s 			page 68


 2052              		.loc 1 427 24 discriminator 1 view .LVU617
 2053 0050 3BBB     		cbnz	r3, .L178
 2054              	.LBB76:
 432:src/storage.c **** 		if (is_dblmode())
 2055              		.loc 1 432 3 is_stmt 1 view .LVU618
 433:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2056              		.loc 1 433 3 view .LVU619
 433:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2057              		.loc 1 433 7 is_stmt 0 view .LVU620
 2058 0052 FFF7FEFF 		bl	is_dblmode
 2059              	.LVL205:
 433:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2060              		.loc 1 433 6 view .LVU621
 2061 0056 68BB     		cbnz	r0, .L179
 2062              	.L169:
 436:src/storage.c **** 
 2063              		.loc 1 436 4 is_stmt 1 view .LVU622
 436:src/storage.c **** 
 2064              		.loc 1 436 11 is_stmt 0 view .LVU623
 2065 0058 D8F80030 		ldr	r3, [r8]
 2066 005c 93F8CF07 		ldrb	r0, [r3, #1999]	@ zero_extendqisi2
 436:src/storage.c **** 
 2067              		.loc 1 436 38 view .LVU624
 2068 0060 0335     		adds	r5, r5, #3
 2069              	.LVL206:
 436:src/storage.c **** 
 2070              		.loc 1 436 9 view .LVU625
 2071 0062 A0EBA500 		sub	r0, r0, r5, asr #2
 2072              	.LVL207:
 2073              	.L170:
 438:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2074              		.loc 1 438 3 is_stmt 1 view .LVU626
 438:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2075              		.loc 1 438 6 is_stmt 0 view .LVU627
 2076 0066 0028     		cmp	r0, #0
 2077 0068 E0DB     		blt	.L176
 441:src/storage.c **** 	}
 2078              		.loc 1 441 3 is_stmt 1 view .LVU628
 2079 006a 7D21     		movs	r1, #125
 2080 006c FFF7FEFF 		bl	cmdregs
 2081              	.LVL208:
 2082              	.L166:
 441:src/storage.c **** 	}
 2083              		.loc 1 441 3 is_stmt 0 view .LVU629
 2084              	.LBE76:
 446:src/storage.c **** 	ProgSize += length;
 2085              		.loc 1 446 2 is_stmt 1 view .LVU630
 446:src/storage.c **** 	ProgSize += length;
 2086              		.loc 1 446 7 is_stmt 0 view .LVU631
 2087 0070 D8F80020 		ldr	r2, [r8]
 2088 0074 5388     		ldrh	r3, [r2, #2]
 2089              	.LVL209:
 447:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2090              		.loc 1 447 2 is_stmt 1 view .LVU632
 446:src/storage.c **** 	ProgSize += length;
 2091              		.loc 1 446 5 is_stmt 0 view .LVU633
 2092 0076 5D1C     		adds	r5, r3, #1
ARM GAS  /tmp/ccsMEfLZ.s 			page 69


 448:src/storage.c **** 	set_pc( pc );
 2093              		.loc 1 448 16 view .LVU634
 2094 0078 ADB2     		uxth	r5, r5
 447:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2095              		.loc 1 447 11 view .LVU635
 2096 007a 2344     		add	r3, r3, r4
 2097              	.LVL210:
 448:src/storage.c **** 	set_pc( pc );
 2098              		.loc 1 448 16 view .LVU636
 2099 007c 02EB4500 		add	r0, r2, r5, lsl #1
 447:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2100              		.loc 1 447 11 view .LVU637
 2101 0080 5380     		strh	r3, [r2, #2]	@ movhi
 2102              	.LVL211:
 448:src/storage.c **** 	set_pc( pc );
 2103              		.loc 1 448 2 is_stmt 1 view .LVU638
 2104 0082 3146     		mov	r1, r6
 2105 0084 6200     		lsls	r2, r4, #1
 2106 0086 0230     		adds	r0, r0, #2
 2107 0088 FFF7FEFF 		bl	xcopy
 2108              	.LVL212:
 449:src/storage.c **** 	return 0;
 2109              		.loc 1 449 2 view .LVU639
 2110 008c 2846     		mov	r0, r5
 2111 008e FFF7FEFF 		bl	set_pc
 2112              	.LVL213:
 450:src/storage.c **** }
 2113              		.loc 1 450 2 view .LVU640
 451:src/storage.c **** 
 2114              		.loc 1 451 1 is_stmt 0 view .LVU641
 2115 0092 0020     		movs	r0, #0
 2116 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2117              	.LVL214:
 2118              	.L164:
 417:src/storage.c **** 	}
 2119              		.loc 1 417 3 is_stmt 1 view .LVU642
 451:src/storage.c **** 
 2120              		.loc 1 451 1 is_stmt 0 view .LVU643
 2121 0098 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2122              		.cfi_remember_state
 2123              		.cfi_restore 14
 2124              		.cfi_restore 8
 2125              		.cfi_restore 7
 2126              		.cfi_restore 6
 2127              		.cfi_restore 5
 2128              		.cfi_restore 4
 2129              		.cfi_def_cfa_offset 0
 2130              	.LVL215:
 417:src/storage.c **** 	}
 2131              		.loc 1 417 10 view .LVU644
 2132 009c 1220     		movs	r0, #18
 2133              	.LVL216:
 417:src/storage.c **** 	}
 2134              		.loc 1 417 10 view .LVU645
 2135 009e FFF7FEBF 		b	report_err
 2136              	.LVL217:
 2137              	.L178:
ARM GAS  /tmp/ccsMEfLZ.s 			page 70


 2138              		.cfi_restore_state
 428:src/storage.c **** 		sigmaDeallocate();
 2139              		.loc 1 428 3 is_stmt 1 view .LVU646
 428:src/storage.c **** 		sigmaDeallocate();
 2140              		.loc 1 428 16 is_stmt 0 view .LVU647
 2141 00a2 ED1A     		subs	r5, r5, r3
 2142              	.LVL218:
 429:src/storage.c **** 	}
 2143              		.loc 1 429 3 is_stmt 1 view .LVU648
 2144 00a4 FFF7FEFF 		bl	sigmaDeallocate
 2145              	.LVL219:
 431:src/storage.c **** 		int regs;
 2146              		.loc 1 431 2 view .LVU649
 431:src/storage.c **** 		int regs;
 2147              		.loc 1 431 5 is_stmt 0 view .LVU650
 2148 00a8 002D     		cmp	r5, #0
 2149 00aa E1DD     		ble	.L166
 2150              	.LBB77:
 432:src/storage.c **** 		if (is_dblmode())
 2151              		.loc 1 432 3 is_stmt 1 view .LVU651
 433:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2152              		.loc 1 433 3 view .LVU652
 433:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2153              		.loc 1 433 7 is_stmt 0 view .LVU653
 2154 00ac FFF7FEFF 		bl	is_dblmode
 2155              	.LVL220:
 433:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2156              		.loc 1 433 6 view .LVU654
 2157 00b0 0028     		cmp	r0, #0
 2158 00b2 D1D0     		beq	.L169
 2159              	.L179:
 434:src/storage.c **** 		else
 2160              		.loc 1 434 4 is_stmt 1 view .LVU655
 434:src/storage.c **** 		else
 2161              		.loc 1 434 11 is_stmt 0 view .LVU656
 2162 00b4 FFF7FEFF 		bl	global_regs
 2163              	.LVL221:
 434:src/storage.c **** 		else
 2164              		.loc 1 434 44 view .LVU657
 2165 00b8 0735     		adds	r5, r5, #7
 2166              	.LVL222:
 434:src/storage.c **** 		else
 2167              		.loc 1 434 25 view .LVU658
 2168 00ba A0EBE500 		sub	r0, r0, r5, asr #3
 2169              	.LVL223:
 434:src/storage.c **** 		else
 2170              		.loc 1 434 25 view .LVU659
 2171 00be D2E7     		b	.L170
 2172              	.L181:
 2173              		.align	2
 2174              	.L180:
 2175 00c0 00000000 		.word	ProgFree
 2176 00c4 00000000 		.word	SizeStatRegs
 2177 00c8 00000000 		.word	main_ram
 2178              	.LBE77:
 2179              		.cfi_endproc
 2180              	.LFE18:
ARM GAS  /tmp/ccsMEfLZ.s 			page 71


 2182              		.section	.text.check_create_wp34sdir,"ax",%progbits
 2183              		.align	1
 2184              		.p2align 2,,3
 2185              		.global	check_create_wp34sdir
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2189              		.fpu fpv4-sp-d16
 2191              	check_create_wp34sdir:
 2192              	.LFB21:
 605:src/storage.c ****   FRESULT f;
 2193              		.loc 1 605 33 is_stmt 1 view -0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 606:src/storage.c ****   sys_disk_write_enable(1);
 2197              		.loc 1 606 3 view .LVU661
 607:src/storage.c ****   f = check_create_dir ("/wp34s");
 2198              		.loc 1 607 3 view .LVU662
 605:src/storage.c ****   FRESULT f;
 2199              		.loc 1 605 33 is_stmt 0 view .LVU663
 2200 0000 38B5     		push	{r3, r4, r5, lr}
 2201              		.cfi_def_cfa_offset 16
 2202              		.cfi_offset 3, -16
 2203              		.cfi_offset 4, -12
 2204              		.cfi_offset 5, -8
 2205              		.cfi_offset 14, -4
 607:src/storage.c ****   f = check_create_dir ("/wp34s");
 2206              		.loc 1 607 3 view .LVU664
 2207 0002 0120     		movs	r0, #1
 2208 0004 044D     		ldr	r5, .L184
 2209 0006 A847     		blx	r5
 2210              	.LVL224:
 608:src/storage.c ****   sys_disk_write_enable(0);
 2211              		.loc 1 608 3 is_stmt 1 view .LVU665
 608:src/storage.c ****   sys_disk_write_enable(0);
 2212              		.loc 1 608 7 is_stmt 0 view .LVU666
 2213 0008 044B     		ldr	r3, .L184+4
 2214 000a 0548     		ldr	r0, .L184+8
 2215 000c 9847     		blx	r3
 2216              	.LVL225:
 2217 000e 0446     		mov	r4, r0
 2218              	.LVL226:
 609:src/storage.c ****   return f;
 2219              		.loc 1 609 3 is_stmt 1 view .LVU667
 2220 0010 0020     		movs	r0, #0
 2221 0012 A847     		blx	r5
 2222              	.LVL227:
 610:src/storage.c **** }
 2223              		.loc 1 610 3 view .LVU668
 611:src/storage.c **** 
 2224              		.loc 1 611 1 is_stmt 0 view .LVU669
 2225 0014 E0B2     		uxtb	r0, r4
 2226 0016 38BD     		pop	{r3, r4, r5, pc}
 2227              	.LVL228:
 2228              	.L185:
 611:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 72


 2229              		.loc 1 611 1 view .LVU670
 2230              		.align	2
 2231              	.L184:
 2232 0018 E1030008 		.word	134218721
 2233 001c D1030008 		.word	134218705
 2234 0020 2C000000 		.word	.LC2
 2235              		.cfi_endproc
 2236              	.LFE21:
 2238              		.section	.text.init_library,"ax",%progbits
 2239              		.align	1
 2240              		.p2align 2,,3
 2241              		.global	init_library
 2242              		.syntax unified
 2243              		.thumb
 2244              		.thumb_func
 2245              		.fpu fpv4-sp-d16
 2247              	init_library:
 2248              	.LFB22:
 673:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2249              		.loc 1 673 1 is_stmt 1 view -0
 2250              		.cfi_startproc
 2251              		@ args = 0, pretend = 0, frame = 256
 2252              		@ frame_needed = 0, uses_anonymous_args = 0
 674:src/storage.c **** 	  struct {
 2253              		.loc 1 674 2 view .LVU672
 673:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2254              		.loc 1 673 1 is_stmt 0 view .LVU673
 2255 0000 10B5     		push	{r4, lr}
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 4, -8
 2258              		.cfi_offset 14, -4
 674:src/storage.c **** 	  struct {
 2259              		.loc 1 674 7 view .LVU674
 2260 0002 0C4C     		ldr	r4, .L193
 2261 0004 2168     		ldr	r1, [r4]
 673:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2262              		.loc 1 673 1 view .LVU675
 2263 0006 C0B0     		sub	sp, sp, #256
 2264              		.cfi_def_cfa_offset 264
 674:src/storage.c **** 	  struct {
 2265              		.loc 1 674 7 view .LVU676
 2266 0008 0846     		mov	r0, r1
 2267 000a FFF7FEFF 		bl	checksum_region
 2268              	.LVL229:
 674:src/storage.c **** 	  struct {
 2269              		.loc 1 674 5 view .LVU677
 2270 000e 08B9     		cbnz	r0, .L192
 685:src/storage.c **** 
 2271              		.loc 1 685 1 view .LVU678
 2272 0010 40B0     		add	sp, sp, #256
 2273              		.cfi_remember_state
 2274              		.cfi_def_cfa_offset 8
 2275              		@ sp needed
 2276 0012 10BD     		pop	{r4, pc}
 2277              	.L192:
 2278              		.cfi_restore_state
 2279              	.LBB78:
ARM GAS  /tmp/ccsMEfLZ.s 			page 73


 675:src/storage.c **** 			unsigned short crc;
 2280              		.loc 1 675 4 is_stmt 1 view .LVU679
 680:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2281              		.loc 1 680 3 view .LVU680
 681:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2282              		.loc 1 681 3 view .LVU681
 681:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2283              		.loc 1 681 11 is_stmt 0 view .LVU682
 2284 0014 4AF23C53 		movw	r3, #42300
 682:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2285              		.loc 1 682 3 view .LVU683
 2286 0018 FC22     		movs	r2, #252
 2287 001a FF21     		movs	r1, #255
 2288 001c 01A8     		add	r0, sp, #4
 681:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2289              		.loc 1 681 11 view .LVU684
 2290 001e 0093     		str	r3, [sp]
 682:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2291              		.loc 1 682 3 is_stmt 1 view .LVU685
 2292 0020 FFF7FEFF 		bl	xset
 2293              	.LVL230:
 683:src/storage.c **** 	}
 2294              		.loc 1 683 3 view .LVU686
 2295 0024 2068     		ldr	r0, [r4]
 2296 0026 6946     		mov	r1, sp
 2297 0028 0122     		movs	r2, #1
 2298 002a FFF7FEFF 		bl	program_flash
 2299              	.LVL231:
 2300              	.LBE78:
 685:src/storage.c **** 
 2301              		.loc 1 685 1 is_stmt 0 view .LVU687
 2302 002e 40B0     		add	sp, sp, #256
 2303              		.cfi_def_cfa_offset 8
 2304              		@ sp needed
 2305 0030 10BD     		pop	{r4, pc}
 2306              	.L194:
 2307 0032 00BF     		.align	2
 2308              	.L193:
 2309 0034 00000000 		.word	library_ram
 2310              		.cfi_endproc
 2311              	.LFE22:
 2313              		.section	.text.flash_remove,"ax",%progbits
 2314              		.align	1
 2315              		.p2align 2,,3
 2316              		.global	flash_remove
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu fpv4-sp-d16
 2322              	flash_remove:
 2323              	.LVL232:
 2324              	.LFB24:
 750:src/storage.c **** 	const int size = UserFlash.size - count;
 2325              		.loc 1 750 1 is_stmt 1 view -0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsMEfLZ.s 			page 74


 2329              		@ link register save eliminated.
 751:src/storage.c **** 	step_no = offsetLIB( step_no );
 2330              		.loc 1 751 2 view .LVU689
 751:src/storage.c **** 	step_no = offsetLIB( step_no );
 2331              		.loc 1 751 19 is_stmt 0 view .LVU690
 2332 0000 084B     		ldr	r3, .L197
 2333 0002 1A68     		ldr	r2, [r3]
 752:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2334              		.loc 1 752 12 view .LVU691
 2335 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2336              	.LVL233:
 751:src/storage.c **** 	step_no = offsetLIB( step_no );
 2337              		.loc 1 751 28 view .LVU692
 2338 0008 5388     		ldrh	r3, [r2, #2]
 752:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2339              		.loc 1 752 10 view .LVU693
 2340 000a 0138     		subs	r0, r0, #1
 750:src/storage.c **** 	const int size = UserFlash.size - count;
 2341              		.loc 1 750 1 view .LVU694
 2342 000c 10B4     		push	{r4}
 2343              		.cfi_def_cfa_offset 4
 2344              		.cfi_offset 4, -4
 753:src/storage.c **** 			     size - step_no, size );
 2345              		.loc 1 753 32 view .LVU695
 2346 000e 0432     		adds	r2, r2, #4
 753:src/storage.c **** 			     size - step_no, size );
 2347              		.loc 1 753 57 view .LVU696
 2348 0010 4418     		adds	r4, r0, r1
 751:src/storage.c **** 	step_no = offsetLIB( step_no );
 2349              		.loc 1 751 12 view .LVU697
 2350 0012 5B1A     		subs	r3, r3, r1
 2351              	.LVL234:
 752:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2352              		.loc 1 752 2 is_stmt 1 view .LVU698
 753:src/storage.c **** 			     size - step_no, size );
 2353              		.loc 1 753 2 view .LVU699
 753:src/storage.c **** 			     size - step_no, size );
 2354              		.loc 1 753 9 is_stmt 0 view .LVU700
 2355 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2356              	.LVL235:
 755:src/storage.c **** 
 2357              		.loc 1 755 1 view .LVU701
 2358 0018 5DF8044B 		ldr	r4, [sp], #4
 2359              		.cfi_restore 4
 2360              		.cfi_def_cfa_offset 0
 753:src/storage.c **** 			     size - step_no, size );
 2361              		.loc 1 753 9 view .LVU702
 2362 001c 1A1A     		subs	r2, r3, r0
 2363 001e FFF7FEBF 		b	flash_append
 2364              	.LVL236:
 2365              	.L198:
 753:src/storage.c **** 			     size - step_no, size );
 2366              		.loc 1 753 9 view .LVU703
 2367 0022 00BF     		.align	2
 2368              	.L197:
 2369 0024 00000000 		.word	library_ram
 2370              		.cfi_endproc
ARM GAS  /tmp/ccsMEfLZ.s 			page 75


 2371              	.LFE24:
 2373              		.section	.text.clrprog,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.global	clrprog
 2377              		.syntax unified
 2378              		.thumb
 2379              		.thumb_func
 2380              		.fpu fpv4-sp-d16
 2382              	clrprog:
 2383              	.LFB13:
 278:src/storage.c **** 	update_program_bounds( 1 );
 2384              		.loc 1 278 1 is_stmt 1 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 0
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
 279:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2388              		.loc 1 279 2 view .LVU705
 278:src/storage.c **** 	update_program_bounds( 1 );
 2389              		.loc 1 278 1 is_stmt 0 view .LVU706
 2390 0000 10B5     		push	{r4, lr}
 2391              		.cfi_def_cfa_offset 8
 2392              		.cfi_offset 4, -8
 2393              		.cfi_offset 14, -4
 280:src/storage.c **** 		/*
 2394              		.loc 1 280 7 view .LVU707
 2395 0002 234C     		ldr	r4, .L208
 279:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2396              		.loc 1 279 2 view .LVU708
 2397 0004 0120     		movs	r0, #1
 2398 0006 FFF7FEFF 		bl	update_program_bounds
 2399              	.LVL237:
 280:src/storage.c **** 		/*
 2400              		.loc 1 280 2 is_stmt 1 view .LVU709
 280:src/storage.c **** 		/*
 2401              		.loc 1 280 7 is_stmt 0 view .LVU710
 2402 000a 2368     		ldr	r3, [r4]
 2403 000c B3F8EC07 		ldrh	r0, [r3, #2028]
 280:src/storage.c **** 		/*
 2404              		.loc 1 280 5 view .LVU711
 2405 0010 820B     		lsrs	r2, r0, #14
 2406 0012 012A     		cmp	r2, #1
 2407 0014 28D0     		beq	.L205
 287:src/storage.c **** 			return;
 2408              		.loc 1 287 3 is_stmt 1 view .LVU712
 287:src/storage.c **** 			return;
 2409              		.loc 1 287 8 is_stmt 0 view .LVU713
 2410 0016 FFF7FEFF 		bl	check_delete_prog
 2411              	.LVL238:
 287:src/storage.c **** 			return;
 2412              		.loc 1 287 6 view .LVU714
 2413 001a 00B1     		cbz	r0, .L206
 299:src/storage.c ****  
 2414              		.loc 1 299 1 view .LVU715
 2415 001c 10BD     		pop	{r4, pc}
 2416              	.L206:
 290:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
ARM GAS  /tmp/ccsMEfLZ.s 			page 76


 2417              		.loc 1 290 3 is_stmt 1 view .LVU716
 2418 001e FFF7FEFF 		bl	clrretstk
 2419              	.LVL239:
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2420              		.loc 1 291 3 view .LVU717
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2421              		.loc 1 291 10 is_stmt 0 view .LVU718
 2422 0022 2368     		ldr	r3, [r4]
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2423              		.loc 1 291 17 view .LVU719
 2424 0024 B3F8EC07 		ldrh	r0, [r3, #2028]
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2425              		.loc 1 291 37 view .LVU720
 2426 0028 B3F8EE17 		ldrh	r1, [r3, #2030]
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2427              		.loc 1 291 48 view .LVU721
 2428 002c 5A88     		ldrh	r2, [r3, #2]
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2429              		.loc 1 291 17 view .LVU722
 2430 002e 00F10040 		add	r0, r0, #-2147483648
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2431              		.loc 1 291 10 view .LVU723
 2432 0032 0433     		adds	r3, r3, #4
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2433              		.loc 1 291 57 view .LVU724
 2434 0034 521A     		subs	r2, r2, r1
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2435              		.loc 1 291 17 view .LVU725
 2436 0036 0138     		subs	r0, r0, #1
 291:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2437              		.loc 1 291 3 view .LVU726
 2438 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2439 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2440 0040 5200     		lsls	r2, r2, #1
 2441 0042 FFF7FEFF 		bl	xcopy
 2442              	.LVL240:
 292:src/storage.c **** 		if ( ProgSize == 0 ) {
 2443              		.loc 1 292 3 is_stmt 1 view .LVU727
 292:src/storage.c **** 		if ( ProgSize == 0 ) {
 2444              		.loc 1 292 12 is_stmt 0 view .LVU728
 2445 0046 2268     		ldr	r2, [r4]
 292:src/storage.c **** 		if ( ProgSize == 0 ) {
 2446              		.loc 1 292 31 view .LVU729
 2447 0048 B2F8EC07 		ldrh	r0, [r2, #2028]
 292:src/storage.c **** 		if ( ProgSize == 0 ) {
 2448              		.loc 1 292 12 view .LVU730
 2449 004c 5388     		ldrh	r3, [r2, #2]
 2450 004e B2F8EE17 		ldrh	r1, [r2, #2030]
 2451 0052 0344     		add	r3, r3, r0
 2452 0054 013B     		subs	r3, r3, #1
 2453 0056 5B1A     		subs	r3, r3, r1
 2454 0058 9BB2     		uxth	r3, r3
 293:src/storage.c **** 			stoend();
 2455              		.loc 1 293 3 is_stmt 1 view .LVU731
 293:src/storage.c **** 			stoend();
 2456              		.loc 1 293 6 is_stmt 0 view .LVU732
 2457 005a B3B9     		cbnz	r3, .L207
ARM GAS  /tmp/ccsMEfLZ.s 			page 77


 294:src/storage.c **** 		}
 2458              		.loc 1 294 4 is_stmt 1 view .LVU733
 2459              	.LBB79:
 2460              	.LBI79:
 242:src/storage.c **** {
 2461              		.loc 1 242 13 view .LVU734
 2462              	.LBB80:
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2463              		.loc 1 244 2 view .LVU735
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2464              		.loc 1 244 11 is_stmt 0 view .LVU736
 2465 005c 0121     		movs	r1, #1
 245:src/storage.c **** }
 2466              		.loc 1 245 12 view .LVU737
 2467 005e 4FF49D73 		mov	r3, #314
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2468              		.loc 1 244 11 view .LVU738
 2469 0062 5180     		strh	r1, [r2, #2]	@ movhi
 245:src/storage.c **** }
 2470              		.loc 1 245 2 is_stmt 1 view .LVU739
 245:src/storage.c **** }
 2471              		.loc 1 245 12 is_stmt 0 view .LVU740
 2472 0064 9380     		strh	r3, [r2, #4]	@ movhi
 246:src/storage.c **** 
 2473              		.loc 1 246 1 view .LVU741
 2474 0066 08E0     		b	.L201
 2475              	.L205:
 2476              	.LBE80:
 2477              	.LBE79:
 284:src/storage.c **** 	}
 2478              		.loc 1 284 3 is_stmt 1 view .LVU742
 284:src/storage.c **** 	}
 2479              		.loc 1 284 28 is_stmt 0 view .LVU743
 2480 0068 B3F8EE17 		ldrh	r1, [r3, #2030]
 284:src/storage.c **** 	}
 2481              		.loc 1 284 36 view .LVU744
 2482 006c 0131     		adds	r1, r1, #1
 284:src/storage.c **** 	}
 2483              		.loc 1 284 3 view .LVU745
 2484 006e 091A     		subs	r1, r1, r0
 2485 0070 FFF7FEFF 		bl	flash_remove
 2486              	.LVL241:
 2487 0074 2368     		ldr	r3, [r4]
 2488 0076 B3F8EC07 		ldrh	r0, [r3, #2028]
 2489              	.L201:
 297:src/storage.c **** 	update_program_bounds( 1 );
 2490              		.loc 1 297 2 is_stmt 1 view .LVU746
 2491 007a 0138     		subs	r0, r0, #1
 2492 007c FFF7FEFF 		bl	set_pc
 2493              	.LVL242:
 298:src/storage.c **** }
 2494              		.loc 1 298 2 view .LVU747
 299:src/storage.c ****  
 2495              		.loc 1 299 1 is_stmt 0 view .LVU748
 2496 0080 BDE81040 		pop	{r4, lr}
 2497              		.cfi_remember_state
 2498              		.cfi_restore 14
ARM GAS  /tmp/ccsMEfLZ.s 			page 78


 2499              		.cfi_restore 4
 2500              		.cfi_def_cfa_offset 0
 298:src/storage.c **** }
 2501              		.loc 1 298 2 view .LVU749
 2502 0084 0120     		movs	r0, #1
 2503 0086 FFF7FEBF 		b	update_program_bounds
 2504              	.LVL243:
 2505              	.L207:
 2506              		.cfi_restore_state
 292:src/storage.c **** 		if ( ProgSize == 0 ) {
 2507              		.loc 1 292 12 view .LVU750
 2508 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2509 008c F5E7     		b	.L201
 2510              	.L209:
 2511 008e 00BF     		.align	2
 2512              	.L208:
 2513 0090 00000000 		.word	main_ram
 2514              		.cfi_endproc
 2515              	.LFE13:
 2517              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2518              		.align	2
 2519              	.LC7:
 2520 0000 4E6F206C 		.ascii	"No label\000"
 2520      6162656C 
 2520      00
 2521              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2522              		.align	1
 2523              		.p2align 2,,3
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2527              		.fpu fpv4-sp-d16
 2529              	store_program_from_buffer.part.0:
 2530              	.LVL244:
 2531              	.LFB43:
1271:src/storage.c **** 
1272:src/storage.c **** void save_prog_file () {
1273:src/storage.c ****   opcode lbl; 
1274:src/storage.c ****   unsigned int pc;
1275:src/storage.c ****   unsigned short steps, prog_crc;
1276:src/storage.c ****   FRESULT f;
1277:src/storage.c ****   int data = WRITE;
1278:src/storage.c ****   int fss;
1279:src/storage.c ****   uint x=0;
1280:src/storage.c ****   char* buffer;
1281:src/storage.c ****   FLASH_REGION* fr;
1282:src/storage.c **** 
1283:src/storage.c ****   
1284:src/storage.c ****   if ( not_running() ) {
1285:src/storage.c ****     /*
1286:src/storage.c ****      *  Don't copy from library or XROM
1287:src/storage.c ****      */
1288:src/storage.c ****     pc = nLIB( state_pc() );
1289:src/storage.c ****     if ( pc == REGION_XROM ) {
1290:src/storage.c ****       error_message( ERR_ILLEGAL );
1291:src/storage.c ****       return;
1292:src/storage.c ****     }
ARM GAS  /tmp/ccsMEfLZ.s 			page 79


1293:src/storage.c ****     /*
1294:src/storage.c ****      *  Check if program is labeled
1295:src/storage.c ****      */
1296:src/storage.c ****     update_program_bounds( 1 );
1297:src/storage.c ****     lbl = getprog( ProgBegin );
1298:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1299:src/storage.c ****       error_message( ERR_NO_LBL );
1300:src/storage.c ****       return;
1301:src/storage.c ****     }
1302:src/storage.c ****     /*
1303:src/storage.c ****      *  Compute steps and crc for program
1304:src/storage.c ****      */
1305:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
1306:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
1307:src/storage.c ****     /*
1308:src/storage.c ****      * Get filename and open file
1309:src/storage.c ****      */
1310:src/storage.c ****     sys_disk_write_enable(1);
1311:src/storage.c **** 
1312:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
1313:src/storage.c ****     if (fss != 1) return;
1314:src/storage.c **** 
1315:src/storage.c ****     // File is now open with correct permissions
1316:src/storage.c **** 
1317:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
1318:src/storage.c ****     if (!buffer) {// calloc failure!
1319:src/storage.c ****       f_close(FPT);
1320:src/storage.c ****       sys_disk_write_enable(0);
1321:src/storage.c ****       DispMsg = "Mem short";
1322:src/storage.c ****       return;
1323:src/storage.c ****     }
1324:src/storage.c **** 
1325:src/storage.c ****     fr = (FLASH_REGION*) buffer;
1326:src/storage.c ****     fr->size = steps;
1327:src/storage.c ****     fr->crc = prog_crc;
1328:src/storage.c **** 
1329:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
1330:src/storage.c ****    
1331:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1332:src/storage.c ****     free(buffer);
1333:src/storage.c ****     
1334:src/storage.c ****     if (f != FR_OK) { //odd?
1335:src/storage.c ****       DispMsg = "Write err";
1336:src/storage.c ****     }
1337:src/storage.c ****     else {
1338:src/storage.c ****       DispMsg = "Written";
1339:src/storage.c ****     }
1340:src/storage.c ****       
1341:src/storage.c ****     f_close(FPT);
1342:src/storage.c ****     sys_disk_write_enable(0);
1343:src/storage.c ****     
1344:src/storage.c ****   }
1345:src/storage.c **** }
1346:src/storage.c **** 
1347:src/storage.c **** void load_prog_file () {
1348:src/storage.c ****   int fss, fsize;
1349:src/storage.c ****   int data = READ;
ARM GAS  /tmp/ccsMEfLZ.s 			page 80


1350:src/storage.c ****   uint x=0;
1351:src/storage.c ****   FLASH_REGION* fr;
1352:src/storage.c ****   char* buffer;
1353:src/storage.c **** 
1354:src/storage.c ****   fss = file_selection_screen ("Load PROG File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW,
1355:src/storage.c ****   if (fss != 1) return;
1356:src/storage.c **** 
1357:src/storage.c ****   // File is now open with correct permissions
1358:src/storage.c **** 
1359:src/storage.c ****   fsize = f_size(FPT);
1360:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
1361:src/storage.c ****     f_close(FPT);
1362:src/storage.c ****     DispMsg = "File too big";
1363:src/storage.c ****     return;
1364:src/storage.c ****   }
1365:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1366:src/storage.c ****   if (!buffer) {// calloc failure!
1367:src/storage.c ****     f_close(FPT);
1368:src/storage.c ****     DispMsg = "Mem short";
1369:src/storage.c ****     return;
1370:src/storage.c ****   }
1371:src/storage.c **** 
1372:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1373:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1374:src/storage.c ****     free(buffer);
1375:src/storage.c ****     f_close(FPT);
1376:src/storage.c ****     DispMsg = "File odd";
1377:src/storage.c ****     return;
1378:src/storage.c ****   }
1379:src/storage.c ****   f_close(FPT);
1380:src/storage.c **** 
1381:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1382:src/storage.c ****     
1383:src/storage.c ****   if (checksum_region(fr, fr)) {//crc failed - wrong filetype?
1384:src/storage.c ****     DispMsg = "File crc err";
1385:src/storage.c ****         free(buffer);
1386:src/storage.c ****     return;
1387:src/storage.c ****   }
1388:src/storage.c **** 
1389:src/storage.c ****   store_program_from_buffer (fr);
1390:src/storage.c ****   free(buffer);
1391:src/storage.c **** }
1392:src/storage.c **** 
1393:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
 2532              		.loc 1 1393 6 is_stmt 1 view -0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
 2536              	.LBB81:
1394:src/storage.c **** { // buffer contains all of program file
1395:src/storage.c ****   unsigned int pc;
1396:src/storage.c ****   int space_needed, count, free;
1397:src/storage.c **** 
1398:src/storage.c ****   if ( not_running() ) {
1399:src/storage.c ****     /*
1400:src/storage.c ****      *  Check if program is labeled
1401:src/storage.c ****      */
ARM GAS  /tmp/ccsMEfLZ.s 			page 81


1402:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2537              		.loc 1 1402 5 view .LVU752
1403:src/storage.c ****     if ( isDBL(lbl) ) {
 2538              		.loc 1 1403 5 view .LVU753
 2539              		.loc 1 1403 8 is_stmt 0 view .LVU754
 2540 0000 8388     		ldrh	r3, [r0, #4]
 2541 0002 03F47043 		and	r3, r3, #61440
 2542 0006 B3F5704F 		cmp	r3, #61440
 2543 000a 03D0     		beq	.L223
 2544              	.LVL245:
1404:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
1405:src/storage.c ****     }
1406:src/storage.c ****     
1407:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1408:src/storage.c ****       DispMsg = "No label";
 2545              		.loc 1 1408 7 is_stmt 1 view .LVU755
 2546              		.loc 1 1408 15 is_stmt 0 view .LVU756
 2547 000c 264B     		ldr	r3, .L227
 2548 000e 274A     		ldr	r2, .L227+4
 2549 0010 1A60     		str	r2, [r3]
1409:src/storage.c ****       return;
 2550              		.loc 1 1409 7 is_stmt 1 view .LVU757
 2551 0012 7047     		bx	lr
 2552              	.LVL246:
 2553              	.L223:
1404:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2554              		.loc 1 1404 11 is_stmt 0 view .LVU758
 2555 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1407:src/storage.c ****       DispMsg = "No label";
 2556              		.loc 1 1407 11 view .LVU759
 2557 0016 01F47043 		and	r3, r1, #61440
1407:src/storage.c ****       DispMsg = "No label";
 2558              		.loc 1 1407 8 view .LVU760
 2559 001a B3F5704F 		cmp	r3, #61440
 2560              	.LBE81:
1393:src/storage.c **** { // buffer contains all of program file
 2561              		.loc 1 1393 6 view .LVU761
 2562 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2563              		.cfi_def_cfa_offset 32
 2564              		.cfi_offset 4, -32
 2565              		.cfi_offset 5, -28
 2566              		.cfi_offset 6, -24
 2567              		.cfi_offset 7, -20
 2568              		.cfi_offset 8, -16
 2569              		.cfi_offset 9, -12
 2570              		.cfi_offset 10, -8
 2571              		.cfi_offset 14, -4
 2572 0022 0446     		mov	r4, r0
 2573              	.LBB84:
1404:src/storage.c ****     }
 2574              		.loc 1 1404 7 is_stmt 1 view .LVU762
 2575              	.LVL247:
1407:src/storage.c ****       DispMsg = "No label";
 2576              		.loc 1 1407 5 view .LVU763
1407:src/storage.c ****       DispMsg = "No label";
 2577              		.loc 1 1407 8 is_stmt 0 view .LVU764
 2578 0024 04D1     		bne	.L211
ARM GAS  /tmp/ccsMEfLZ.s 			page 82


1407:src/storage.c ****       DispMsg = "No label";
 2579              		.loc 1 1407 22 view .LVU765
 2580 0026 11F4706F 		tst	r1, #3840
1407:src/storage.c ****       DispMsg = "No label";
 2581              		.loc 1 1407 25 view .LVU766
 2582 002a C1F30322 		ubfx	r2, r1, #8, #4
1407:src/storage.c ****       DispMsg = "No label";
 2583              		.loc 1 1407 22 view .LVU767
 2584 002e 04D0     		beq	.L212
 2585              	.L211:
 2586              	.LVL248:
1408:src/storage.c ****       return;
 2587              		.loc 1 1408 7 is_stmt 1 view .LVU768
1408:src/storage.c ****       return;
 2588              		.loc 1 1408 15 is_stmt 0 view .LVU769
 2589 0030 1D4B     		ldr	r3, .L227
 2590 0032 1E4A     		ldr	r2, .L227+4
 2591 0034 1A60     		str	r2, [r3]
 2592              		.loc 1 1409 7 is_stmt 1 view .LVU770
 2593              	.LBE84:
1410:src/storage.c ****     }
1411:src/storage.c ****     /*
1412:src/storage.c ****      *  Compute space needed
1413:src/storage.c ****      */
1414:src/storage.c ****     count = space_needed = fr->size;
1415:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1416:src/storage.c ****     
1417:src/storage.c ****     /*
1418:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1419:src/storage.c ****      */
1420:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1421:src/storage.c ****     if ( pc != 0 ) {
1422:src/storage.c ****       /*
1423:src/storage.c ****        *  CLP in library
1424:src/storage.c ****        */
1425:src/storage.c ****       unsigned int old_pc = state_pc();
1426:src/storage.c ****       set_pc( pc );
1427:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1428:src/storage.c ****       if ( space_needed <= free ) {
1429:src/storage.c **** 	clrprog();
1430:src/storage.c ****       }
1431:src/storage.c ****       set_pc( old_pc );
1432:src/storage.c ****     }
1433:src/storage.c ****     if ( space_needed > free ) {
1434:src/storage.c ****       error_message( ERR_FLASH_FULL );
1435:src/storage.c ****       return;
1436:src/storage.c ****     }
1437:src/storage.c ****     // 3. Append program
1438:src/storage.c ****     flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1439:src/storage.c ****   }
1440:src/storage.c **** }
 2594              		.loc 1 1440 1 is_stmt 0 view .LVU771
 2595 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2596              	.LVL249:
 2597              	.L212:
 2598              	.LBB85:
1414:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
ARM GAS  /tmp/ccsMEfLZ.s 			page 83


 2599              		.loc 1 1414 5 is_stmt 1 view .LVU772
1415:src/storage.c ****     
 2600              		.loc 1 1415 41 is_stmt 0 view .LVU773
 2601 003a DFF87880 		ldr	r8, .L227+12
1414:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2602              		.loc 1 1414 26 view .LVU774
 2603 003e 4788     		ldrh	r7, [r0, #2]
 2604              	.LVL250:
1415:src/storage.c ****     
 2605              		.loc 1 1415 5 is_stmt 1 view .LVU775
1415:src/storage.c ****     
 2606              		.loc 1 1415 41 is_stmt 0 view .LVU776
 2607 0040 D8F80030 		ldr	r3, [r8]
1420:src/storage.c ****     if ( pc != 0 ) {
 2608              		.loc 1 1420 10 view .LVU777
 2609 0044 4FF48040 		mov	r0, #16384
 2610              	.LVL251:
1415:src/storage.c ****     
 2611              		.loc 1 1415 41 view .LVU778
 2612 0048 5D88     		ldrh	r5, [r3, #2]
1420:src/storage.c ****     if ( pc != 0 ) {
 2613              		.loc 1 1420 10 view .LVU779
 2614 004a FFF7FEFF 		bl	find_opcode_from
 2615              	.LVL252:
1415:src/storage.c ****     
 2616              		.loc 1 1415 10 view .LVU780
 2617 004e C5F5FF55 		rsb	r5, r5, #8160
 2618 0052 1E35     		adds	r5, r5, #30
 2619              	.LVL253:
1420:src/storage.c ****     if ( pc != 0 ) {
 2620              		.loc 1 1420 5 is_stmt 1 view .LVU781
1421:src/storage.c ****       /*
 2621              		.loc 1 1421 5 view .LVU782
1421:src/storage.c ****       /*
 2622              		.loc 1 1421 8 is_stmt 0 view .LVU783
 2623 0054 60B9     		cbnz	r0, .L224
1414:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2624              		.loc 1 1414 26 view .LVU784
 2625 0056 3E46     		mov	r6, r7
 2626              	.LVL254:
 2627              	.L214:
1433:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2628              		.loc 1 1433 5 is_stmt 1 view .LVU785
1433:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2629              		.loc 1 1433 8 is_stmt 0 view .LVU786
 2630 0058 B542     		cmp	r5, r6
 2631 005a 1DDB     		blt	.L225
1438:src/storage.c ****   }
 2632              		.loc 1 1438 5 is_stmt 1 view .LVU787
1438:src/storage.c ****   }
 2633              		.loc 1 1438 28 is_stmt 0 view .LVU788
 2634 005c D8F80030 		ldr	r3, [r8]
1438:src/storage.c ****   }
 2635              		.loc 1 1438 5 view .LVU789
 2636 0060 5888     		ldrh	r0, [r3, #2]
 2637 0062 211D     		adds	r1, r4, #4
 2638 0064 3B18     		adds	r3, r7, r0
ARM GAS  /tmp/ccsMEfLZ.s 			page 84


 2639 0066 3A46     		mov	r2, r7
 2640              	.LBE85:
 2641              		.loc 1 1440 1 view .LVU790
 2642 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2643              		.cfi_remember_state
 2644              		.cfi_restore 14
 2645              		.cfi_restore 10
 2646              		.cfi_restore 9
 2647              		.cfi_restore 8
 2648              		.cfi_restore 7
 2649              		.cfi_restore 6
 2650              		.cfi_restore 5
 2651              		.cfi_restore 4
 2652              		.cfi_def_cfa_offset 0
 2653              	.LVL255:
 2654              	.LBB86:
1438:src/storage.c ****   }
 2655              		.loc 1 1438 5 view .LVU791
 2656 006c FFF7FEBF 		b	flash_append
 2657              	.LVL256:
 2658              	.L224:
 2659              		.cfi_restore_state
 2660              	.LBB82:
1425:src/storage.c ****       set_pc( pc );
 2661              		.loc 1 1425 7 is_stmt 1 view .LVU792
1425:src/storage.c ****       set_pc( pc );
 2662              		.loc 1 1425 29 is_stmt 0 view .LVU793
 2663 0070 0F4E     		ldr	r6, .L227+8
 2664 0072 3368     		ldr	r3, [r6]
1425:src/storage.c ****       set_pc( pc );
 2665              		.loc 1 1425 20 view .LVU794
 2666 0074 B3F8E097 		ldrh	r9, [r3, #2016]
 2667              	.LVL257:
1426:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2668              		.loc 1 1426 7 is_stmt 1 view .LVU795
 2669 0078 FFF7FEFF 		bl	set_pc
 2670              	.LVL258:
1427:src/storage.c ****       if ( space_needed <= free ) {
 2671              		.loc 1 1427 7 view .LVU796
1427:src/storage.c ****       if ( space_needed <= free ) {
 2672              		.loc 1 1427 27 is_stmt 0 view .LVU797
 2673 007c 3368     		ldr	r3, [r6]
 2674 007e B3F8EE67 		ldrh	r6, [r3, #2030]
1427:src/storage.c ****       if ( space_needed <= free ) {
 2675              		.loc 1 1427 37 view .LVU798
 2676 0082 B3F8EC37 		ldrh	r3, [r3, #2028]
1427:src/storage.c ****       if ( space_needed <= free ) {
 2677              		.loc 1 1427 25 view .LVU799
 2678 0086 0136     		adds	r6, r6, #1
1427:src/storage.c ****       if ( space_needed <= free ) {
 2679              		.loc 1 1427 35 view .LVU800
 2680 0088 F61A     		subs	r6, r6, r3
1427:src/storage.c ****       if ( space_needed <= free ) {
 2681              		.loc 1 1427 20 view .LVU801
 2682 008a BE1B     		subs	r6, r7, r6
 2683              	.LVL259:
1428:src/storage.c **** 	clrprog();
ARM GAS  /tmp/ccsMEfLZ.s 			page 85


 2684              		.loc 1 1428 7 is_stmt 1 view .LVU802
1428:src/storage.c **** 	clrprog();
 2685              		.loc 1 1428 10 is_stmt 0 view .LVU803
 2686 008c B542     		cmp	r5, r6
 2687 008e 08DA     		bge	.L226
 2688              	.L215:
1431:src/storage.c ****     }
 2689              		.loc 1 1431 7 is_stmt 1 view .LVU804
 2690 0090 4846     		mov	r0, r9
 2691 0092 FFF7FEFF 		bl	set_pc
 2692              	.LVL260:
 2693 0096 DFE7     		b	.L214
 2694              	.LVL261:
 2695              	.L225:
1431:src/storage.c ****     }
 2696              		.loc 1 1431 7 is_stmt 0 view .LVU805
 2697              	.LBE82:
1434:src/storage.c ****       return;
 2698              		.loc 1 1434 7 is_stmt 1 view .LVU806
 2699              	.LBE86:
 2700              		.loc 1 1440 1 is_stmt 0 view .LVU807
 2701 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2702              		.cfi_remember_state
 2703              		.cfi_restore 14
 2704              		.cfi_restore 10
 2705              		.cfi_restore 9
 2706              		.cfi_restore 8
 2707              		.cfi_restore 7
 2708              		.cfi_restore 6
 2709              		.cfi_restore 5
 2710              		.cfi_restore 4
 2711              		.cfi_def_cfa_offset 0
 2712              	.LVL262:
 2713              	.LBB87:
1434:src/storage.c ****       return;
 2714              		.loc 1 1434 7 view .LVU808
 2715 009c 1720     		movs	r0, #23
 2716 009e FFF7FEBF 		b	error_message
 2717              	.LVL263:
 2718              	.L226:
 2719              		.cfi_restore_state
 2720              	.LBB83:
1429:src/storage.c ****       }
 2721              		.loc 1 1429 2 is_stmt 1 view .LVU809
 2722 00a2 FFF7FEFF 		bl	clrprog
 2723              	.LVL264:
 2724 00a6 F3E7     		b	.L215
 2725              	.L228:
 2726              		.align	2
 2727              	.L227:
 2728 00a8 00000000 		.word	DispMsg
 2729 00ac 00000000 		.word	.LC7
 2730 00b0 00000000 		.word	main_ram
 2731 00b4 00000000 		.word	library_ram
 2732              	.LBE83:
 2733              	.LBE87:
 2734              		.cfi_endproc
ARM GAS  /tmp/ccsMEfLZ.s 			page 86


 2735              	.LFE43:
 2737              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2738              		.align	2
 2739              	.LC8:
 2740 0000 4572726F 		.ascii	"Error\000"
 2740      7200
 2741 0006 0000     		.align	2
 2742              	.LC9:
 2743 0008 53617665 		.ascii	"Saved\000"
 2743      6400
 2744              		.section	.text.flash_backup,"ax",%progbits
 2745              		.align	1
 2746              		.p2align 2,,3
 2747              		.global	flash_backup
 2748              		.syntax unified
 2749              		.thumb
 2750              		.thumb_func
 2751              		.fpu fpv4-sp-d16
 2753              	flash_backup:
 2754              	.LVL265:
 2755              	.LFB25:
 764:src/storage.c **** 	if ( not_running() ) {
 2756              		.loc 1 764 1 view -0
 2757              		.cfi_startproc
 2758              		@ args = 0, pretend = 0, frame = 0
 2759              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/storage.c **** 		process_cmdline_set_lift();
 2760              		.loc 1 765 2 view .LVU811
 764:src/storage.c **** 	if ( not_running() ) {
 2761              		.loc 1 764 1 is_stmt 0 view .LVU812
 2762 0000 10B5     		push	{r4, lr}
 2763              		.cfi_def_cfa_offset 8
 2764              		.cfi_offset 4, -8
 2765              		.cfi_offset 14, -4
 765:src/storage.c **** 		process_cmdline_set_lift();
 2766              		.loc 1 765 7 view .LVU813
 2767 0002 FFF7FEFF 		bl	not_running
 2768              	.LVL266:
 765:src/storage.c **** 		process_cmdline_set_lift();
 2769              		.loc 1 765 5 view .LVU814
 2770 0006 00B9     		cbnz	r0, .L236
 777:src/storage.c **** 
 2771              		.loc 1 777 1 view .LVU815
 2772 0008 10BD     		pop	{r4, pc}
 2773              	.L236:
 766:src/storage.c **** 		init_state();
 2774              		.loc 1 766 3 is_stmt 1 view .LVU816
 2775              	.LBB88:
 2776              	.LBB89:
 211:src/storage.c **** 			      Crc, &Crc );
 2777              		.loc 1 211 9 is_stmt 0 view .LVU817
 2778 000a 0F4C     		ldr	r4, .L238
 2779              	.LBE89:
 2780              	.LBE88:
 766:src/storage.c **** 		init_state();
 2781              		.loc 1 766 3 view .LVU818
 2782 000c FFF7FEFF 		bl	process_cmdline_set_lift
ARM GAS  /tmp/ccsMEfLZ.s 			page 87


 2783              	.LVL267:
 767:src/storage.c **** 		checksum_all();
 2784              		.loc 1 767 3 is_stmt 1 view .LVU819
 2785 0010 FFF7FEFF 		bl	init_state
 2786              	.LVL268:
 768:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2787              		.loc 1 768 3 view .LVU820
 2788              	.LBB91:
 2789              	.LBI88:
 209:src/storage.c **** {
 2790              		.loc 1 209 5 view .LVU821
 2791              	.LBB90:
 211:src/storage.c **** 			      Crc, &Crc );
 2792              		.loc 1 211 2 view .LVU822
 211:src/storage.c **** 			      Crc, &Crc );
 2793              		.loc 1 211 9 is_stmt 0 view .LVU823
 2794 0014 2068     		ldr	r0, [r4]
 2795 0016 40F2FE71 		movw	r1, #2046
 2796 001a 4318     		adds	r3, r0, r1
 2797 001c B0F8FE27 		ldrh	r2, [r0, #2046]
 2798 0020 FFF7FEFF 		bl	test_checksum
 2799              	.LVL269:
 2800              	.LBE90:
 2801              	.LBE91:
 769:src/storage.c **** 			error_message( ERR_IO );
 2802              		.loc 1 769 3 is_stmt 1 view .LVU824
 769:src/storage.c **** 			error_message( ERR_IO );
 2803              		.loc 1 769 8 is_stmt 0 view .LVU825
 2804 0024 094B     		ldr	r3, .L238+4
 2805 0026 2168     		ldr	r1, [r4]
 2806 0028 1868     		ldr	r0, [r3]
 2807 002a 0822     		movs	r2, #8
 2808 002c FFF7FEFF 		bl	program_flash
 2809              	.LVL270:
 769:src/storage.c **** 			error_message( ERR_IO );
 2810              		.loc 1 769 6 view .LVU826
 2811 0030 18B9     		cbnz	r0, .L237
 774:src/storage.c **** 		}
 2812              		.loc 1 774 4 is_stmt 1 view .LVU827
 774:src/storage.c **** 		}
 2813              		.loc 1 774 12 is_stmt 0 view .LVU828
 2814 0032 074B     		ldr	r3, .L238+8
 2815 0034 074A     		ldr	r2, .L238+12
 2816 0036 1A60     		str	r2, [r3]
 777:src/storage.c **** 
 2817              		.loc 1 777 1 view .LVU829
 2818 0038 10BD     		pop	{r4, pc}
 2819              	.L237:
 770:src/storage.c **** 			DispMsg = "Error";
 2820              		.loc 1 770 4 is_stmt 1 view .LVU830
 2821 003a 1120     		movs	r0, #17
 2822 003c FFF7FEFF 		bl	error_message
 2823              	.LVL271:
 771:src/storage.c **** 		}
 2824              		.loc 1 771 4 view .LVU831
 771:src/storage.c **** 		}
 2825              		.loc 1 771 12 is_stmt 0 view .LVU832
ARM GAS  /tmp/ccsMEfLZ.s 			page 88


 2826 0040 034B     		ldr	r3, .L238+8
 2827 0042 054A     		ldr	r2, .L238+16
 2828 0044 1A60     		str	r2, [r3]
 777:src/storage.c **** 
 2829              		.loc 1 777 1 view .LVU833
 2830 0046 10BD     		pop	{r4, pc}
 2831              	.L239:
 2832              		.align	2
 2833              	.L238:
 2834 0048 00000000 		.word	main_ram
 2835 004c 00000000 		.word	backup_ram
 2836 0050 00000000 		.word	DispMsg
 2837 0054 08000000 		.word	.LC9
 2838 0058 00000000 		.word	.LC8
 2839              		.cfi_endproc
 2840              	.LFE25:
 2842              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2843              		.align	2
 2844              	.LC10:
 2845 0000 52657374 		.ascii	"Restored\000"
 2845      6F726564 
 2845      00
 2846              		.section	.text.flash_restore,"ax",%progbits
 2847              		.align	1
 2848              		.p2align 2,,3
 2849              		.global	flash_restore
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2853              		.fpu fpv4-sp-d16
 2855              	flash_restore:
 2856              	.LVL272:
 2857              	.LFB26:
 781:src/storage.c **** 	if ( not_running() ) {
 2858              		.loc 1 781 1 is_stmt 1 view -0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 782:src/storage.c **** 		if ( checksum_backup() ) {
 2862              		.loc 1 782 2 view .LVU835
 781:src/storage.c **** 	if ( not_running() ) {
 2863              		.loc 1 781 1 is_stmt 0 view .LVU836
 2864 0000 08B5     		push	{r3, lr}
 2865              		.cfi_def_cfa_offset 8
 2866              		.cfi_offset 3, -8
 2867              		.cfi_offset 14, -4
 782:src/storage.c **** 		if ( checksum_backup() ) {
 2868              		.loc 1 782 7 view .LVU837
 2869 0002 FFF7FEFF 		bl	not_running
 2870              	.LVL273:
 782:src/storage.c **** 		if ( checksum_backup() ) {
 2871              		.loc 1 782 5 view .LVU838
 2872 0006 A0B1     		cbz	r0, .L240
 783:src/storage.c **** 			error_message( ERR_INVALID );
 2873              		.loc 1 783 3 is_stmt 1 view .LVU839
 783:src/storage.c **** 			error_message( ERR_INVALID );
 2874              		.loc 1 783 8 is_stmt 0 view .LVU840
ARM GAS  /tmp/ccsMEfLZ.s 			page 89


 2875 0008 FFF7FEFF 		bl	checksum_backup
 2876              	.LVL274:
 783:src/storage.c **** 			error_message( ERR_INVALID );
 2877              		.loc 1 783 6 view .LVU841
 2878 000c 20B1     		cbz	r0, .L242
 784:src/storage.c **** 		}
 2879              		.loc 1 784 4 is_stmt 1 view .LVU842
 792:src/storage.c **** 
 2880              		.loc 1 792 1 is_stmt 0 view .LVU843
 2881 000e BDE80840 		pop	{r3, lr}
 2882              		.cfi_remember_state
 2883              		.cfi_restore 14
 2884              		.cfi_restore 3
 2885              		.cfi_def_cfa_offset 0
 784:src/storage.c **** 		}
 2886              		.loc 1 784 4 view .LVU844
 2887 0012 1220     		movs	r0, #18
 2888 0014 FFF7FEBF 		b	error_message
 2889              	.LVL275:
 2890              	.L242:
 2891              		.cfi_restore_state
 787:src/storage.c **** 			init_state();
 2892              		.loc 1 787 4 is_stmt 1 view .LVU845
 2893 0018 064B     		ldr	r3, .L247
 2894 001a 074A     		ldr	r2, .L247+4
 2895 001c 1868     		ldr	r0, [r3]
 2896 001e 1168     		ldr	r1, [r2]
 2897 0020 4FF40062 		mov	r2, #2048
 2898 0024 FFF7FEFF 		bl	xcopy
 2899              	.LVL276:
 788:src/storage.c **** 			DispMsg = "Restored";
 2900              		.loc 1 788 4 view .LVU846
 2901 0028 FFF7FEFF 		bl	init_state
 2902              	.LVL277:
 789:src/storage.c **** 		}
 2903              		.loc 1 789 4 view .LVU847
 789:src/storage.c **** 		}
 2904              		.loc 1 789 12 is_stmt 0 view .LVU848
 2905 002c 034B     		ldr	r3, .L247+8
 2906 002e 044A     		ldr	r2, .L247+12
 2907 0030 1A60     		str	r2, [r3]
 2908              	.L240:
 792:src/storage.c **** 
 2909              		.loc 1 792 1 view .LVU849
 2910 0032 08BD     		pop	{r3, pc}
 2911              	.L248:
 2912              		.align	2
 2913              	.L247:
 2914 0034 00000000 		.word	main_ram
 2915 0038 00000000 		.word	backup_ram
 2916 003c 00000000 		.word	DispMsg
 2917 0040 00000000 		.word	.LC10
 2918              		.cfi_endproc
 2919              	.LFE26:
 2921              		.section	.text.load_program,"ax",%progbits
 2922              		.align	1
 2923              		.p2align 2,,3
ARM GAS  /tmp/ccsMEfLZ.s 			page 90


 2924              		.global	load_program
 2925              		.syntax unified
 2926              		.thumb
 2927              		.thumb_func
 2928              		.fpu fpv4-sp-d16
 2930              	load_program:
 2931              	.LVL278:
 2932              	.LFB27:
 800:src/storage.c **** 	if ( not_running() ) {
 2933              		.loc 1 800 1 is_stmt 1 view -0
 2934              		.cfi_startproc
 2935              		@ args = 0, pretend = 0, frame = 0
 2936              		@ frame_needed = 0, uses_anonymous_args = 0
 801:src/storage.c **** 		if ( checksum_backup() ) {
 2937              		.loc 1 801 2 view .LVU851
 800:src/storage.c **** 	if ( not_running() ) {
 2938              		.loc 1 800 1 is_stmt 0 view .LVU852
 2939 0000 08B5     		push	{r3, lr}
 2940              		.cfi_def_cfa_offset 8
 2941              		.cfi_offset 3, -8
 2942              		.cfi_offset 14, -4
 801:src/storage.c **** 		if ( checksum_backup() ) {
 2943              		.loc 1 801 7 view .LVU853
 2944 0002 FFF7FEFF 		bl	not_running
 2945              	.LVL279:
 801:src/storage.c **** 		if ( checksum_backup() ) {
 2946              		.loc 1 801 5 view .LVU854
 2947 0006 98B1     		cbz	r0, .L249
 802:src/storage.c **** 			/*
 2948              		.loc 1 802 3 is_stmt 1 view .LVU855
 802:src/storage.c **** 			/*
 2949              		.loc 1 802 8 is_stmt 0 view .LVU856
 2950 0008 FFF7FEFF 		bl	checksum_backup
 2951              	.LVL280:
 802:src/storage.c **** 			/*
 2952              		.loc 1 802 6 view .LVU857
 2953 000c 88B9     		cbnz	r0, .L253
 809:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2954              		.loc 1 809 3 is_stmt 1 view .LVU858
 2955              	.LBB92:
 2956              	.LBI92:
 252:src/storage.c **** {
 2957              		.loc 1 252 6 view .LVU859
 2958              	.LBB93:
 254:src/storage.c **** 	stoend();
 2959              		.loc 1 254 2 view .LVU860
 2960 000e FFF7FEFF 		bl	clrretstk_pc
 2961              	.LVL281:
 255:src/storage.c **** }
 2962              		.loc 1 255 2 view .LVU861
 2963              	.LBB94:
 2964              	.LBI94:
 242:src/storage.c **** {
 2965              		.loc 1 242 13 view .LVU862
 2966              	.LBB95:
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2967              		.loc 1 244 2 view .LVU863
ARM GAS  /tmp/ccsMEfLZ.s 			page 91


 2968 0012 0A4B     		ldr	r3, .L254
 2969              	.LBE95:
 2970              	.LBE94:
 2971              	.LBE93:
 2972              	.LBE92:
 810:src/storage.c **** 	}
 2973              		.loc 1 810 19 is_stmt 0 view .LVU864
 2974 0014 0A4A     		ldr	r2, .L254+4
 2975              	.LBB105:
 2976              	.LBB102:
 2977              	.LBB99:
 2978              	.LBB96:
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2979              		.loc 1 244 2 view .LVU865
 2980 0016 1B68     		ldr	r3, [r3]
 2981              	.LBE96:
 2982              	.LBE99:
 2983              	.LBE102:
 2984              	.LBE105:
 810:src/storage.c **** 	}
 2985              		.loc 1 810 19 view .LVU866
 2986 0018 1068     		ldr	r0, [r2]
 2987              	.LBB106:
 2988              	.LBB103:
 2989              	.LBB100:
 2990              	.LBB97:
 244:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2991              		.loc 1 244 11 view .LVU867
 2992 001a 0122     		movs	r2, #1
 2993 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 245:src/storage.c **** }
 2994              		.loc 1 245 2 is_stmt 1 view .LVU868
 245:src/storage.c **** }
 2995              		.loc 1 245 12 is_stmt 0 view .LVU869
 2996 001e 4FF49D72 		mov	r2, #314
 2997              	.LBE97:
 2998              	.LBE100:
 2999              	.LBE103:
 3000              	.LBE106:
 810:src/storage.c **** 	}
 3001              		.loc 1 810 3 view .LVU870
 3002 0022 4188     		ldrh	r1, [r0, #2]
 3003              	.LBB107:
 3004              	.LBB104:
 3005              	.LBB101:
 3006              	.LBB98:
 245:src/storage.c **** }
 3007              		.loc 1 245 12 view .LVU871
 3008 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 3009              	.LBE98:
 3010              	.LBE101:
 3011              	.LBE104:
 3012              	.LBE107:
 810:src/storage.c **** 	}
 3013              		.loc 1 810 3 is_stmt 1 view .LVU872
 3014 0026 0430     		adds	r0, r0, #4
 812:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 92


 3015              		.loc 1 812 1 is_stmt 0 view .LVU873
 3016 0028 BDE80840 		pop	{r3, lr}
 3017              		.cfi_remember_state
 3018              		.cfi_restore 14
 3019              		.cfi_restore 3
 3020              		.cfi_def_cfa_offset 0
 810:src/storage.c **** 	}
 3021              		.loc 1 810 3 view .LVU874
 3022 002c FFF7FEBF 		b	append_program
 3023              	.LVL282:
 3024              	.L249:
 3025              		.cfi_restore_state
 812:src/storage.c **** 
 3026              		.loc 1 812 1 view .LVU875
 3027 0030 08BD     		pop	{r3, pc}
 3028              	.L253:
 806:src/storage.c **** 			return;
 3029              		.loc 1 806 4 is_stmt 1 view .LVU876
 812:src/storage.c **** 
 3030              		.loc 1 812 1 is_stmt 0 view .LVU877
 3031 0032 BDE80840 		pop	{r3, lr}
 3032              		.cfi_restore 14
 3033              		.cfi_restore 3
 3034              		.cfi_def_cfa_offset 0
 806:src/storage.c **** 			return;
 3035              		.loc 1 806 4 view .LVU878
 3036 0036 1220     		movs	r0, #18
 3037 0038 FFF7FEBF 		b	report_err
 3038              	.LVL283:
 3039              	.L255:
 3040              		.align	2
 3041              	.L254:
 3042 003c 00000000 		.word	main_ram
 3043 0040 00000000 		.word	backup_ram
 3044              		.cfi_endproc
 3045              	.LFE27:
 3047              		.section	.text.load_registers,"ax",%progbits
 3048              		.align	1
 3049              		.p2align 2,,3
 3050              		.global	load_registers
 3051              		.syntax unified
 3052              		.thumb
 3053              		.thumb_func
 3054              		.fpu fpv4-sp-d16
 3056              	load_registers:
 3057              	.LVL284:
 3058              	.LFB28:
 819:src/storage.c **** 	int count;
 3059              		.loc 1 819 1 is_stmt 1 view -0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 0
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 820:src/storage.c **** 	if ( checksum_backup() ) {
 3063              		.loc 1 820 2 view .LVU880
 821:src/storage.c **** 		/*
 3064              		.loc 1 821 2 view .LVU881
 819:src/storage.c **** 	int count;
ARM GAS  /tmp/ccsMEfLZ.s 			page 93


 3065              		.loc 1 819 1 is_stmt 0 view .LVU882
 3066 0000 38B5     		push	{r3, r4, r5, lr}
 3067              		.cfi_def_cfa_offset 16
 3068              		.cfi_offset 3, -16
 3069              		.cfi_offset 4, -12
 3070              		.cfi_offset 5, -8
 3071              		.cfi_offset 14, -4
 821:src/storage.c **** 		/*
 3072              		.loc 1 821 7 view .LVU883
 3073 0002 FFF7FEFF 		bl	checksum_backup
 3074              	.LVL285:
 821:src/storage.c **** 		/*
 3075              		.loc 1 821 5 view .LVU884
 3076 0006 E0B9     		cbnz	r0, .L263
 828:src/storage.c **** 	if ( is_dblmode() ) {
 3077              		.loc 1 828 2 is_stmt 1 view .LVU885
 828:src/storage.c **** 	if ( is_dblmode() ) {
 3078              		.loc 1 828 10 is_stmt 0 view .LVU886
 3079 0008 104B     		ldr	r3, .L264
 3080 000a 1B68     		ldr	r3, [r3]
 828:src/storage.c **** 	if ( is_dblmode() ) {
 3081              		.loc 1 828 8 view .LVU887
 3082 000c 93F8CF47 		ldrb	r4, [r3, #1999]	@ zero_extendqisi2
 3083              	.LVL286:
 829:src/storage.c **** 		// Don't clobber the stack in DP mode
 3084              		.loc 1 829 2 is_stmt 1 view .LVU888
 829:src/storage.c **** 		// Don't clobber the stack in DP mode
 3085              		.loc 1 829 7 is_stmt 0 view .LVU889
 3086 0010 FFF7FEFF 		bl	is_dblmode
 3087              	.LVL287:
 829:src/storage.c **** 		// Don't clobber the stack in DP mode
 3088              		.loc 1 829 5 view .LVU890
 3089 0014 00B1     		cbz	r0, .L258
 831:src/storage.c **** 	}
 3090              		.loc 1 831 3 is_stmt 1 view .LVU891
 831:src/storage.c **** 	}
 3091              		.loc 1 831 9 is_stmt 0 view .LVU892
 3092 0016 0C3C     		subs	r4, r4, #12
 3093              	.LVL288:
 3094              	.L258:
 833:src/storage.c **** 		count = BackupFlash._numregs;
 3095              		.loc 1 833 2 is_stmt 1 view .LVU893
 833:src/storage.c **** 		count = BackupFlash._numregs;
 3096              		.loc 1 833 26 is_stmt 0 view .LVU894
 3097 0018 0D4B     		ldr	r3, .L264+4
 3098 001a 1B68     		ldr	r3, [r3]
 3099 001c 93F8CF57 		ldrb	r5, [r3, #1999]	@ zero_extendqisi2
 836:src/storage.c **** }
 3100              		.loc 1 836 9 view .LVU895
 3101 0020 0020     		movs	r0, #0
 3102 0022 A542     		cmp	r5, r4
 3103 0024 A8BF     		it	ge
 3104 0026 2546     		movge	r5, r4
 3105              	.LVL289:
 836:src/storage.c **** }
 3106              		.loc 1 836 2 is_stmt 1 view .LVU896
 836:src/storage.c **** }
ARM GAS  /tmp/ccsMEfLZ.s 			page 94


 3107              		.loc 1 836 9 is_stmt 0 view .LVU897
 3108 0028 FFF7FEFF 		bl	get_reg_n
 3109              	.LVL290:
 3110 002c 0446     		mov	r4, r0
 836:src/storage.c **** }
 3111              		.loc 1 836 23 view .LVU898
 3112 002e 0020     		movs	r0, #0
 3113 0030 FFF7FEFF 		bl	get_flash_reg_n
 3114              	.LVL291:
 836:src/storage.c **** }
 3115              		.loc 1 836 2 view .LVU899
 3116 0034 EA00     		lsls	r2, r5, #3
 836:src/storage.c **** }
 3117              		.loc 1 836 23 view .LVU900
 3118 0036 0146     		mov	r1, r0
 836:src/storage.c **** }
 3119              		.loc 1 836 2 view .LVU901
 3120 0038 2046     		mov	r0, r4
 837:src/storage.c **** 
 3121              		.loc 1 837 1 view .LVU902
 3122 003a BDE83840 		pop	{r3, r4, r5, lr}
 3123              		.cfi_remember_state
 3124              		.cfi_restore 14
 3125              		.cfi_restore 5
 3126              		.cfi_restore 4
 3127              		.cfi_restore 3
 3128              		.cfi_def_cfa_offset 0
 3129              	.LVL292:
 836:src/storage.c **** }
 3130              		.loc 1 836 2 view .LVU903
 3131 003e FFF7FEBF 		b	xcopy
 3132              	.LVL293:
 3133              	.L263:
 3134              		.cfi_restore_state
 825:src/storage.c **** 		return;
 3135              		.loc 1 825 3 is_stmt 1 view .LVU904
 837:src/storage.c **** 
 3136              		.loc 1 837 1 is_stmt 0 view .LVU905
 3137 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3138              		.cfi_restore 14
 3139              		.cfi_restore 5
 3140              		.cfi_restore 4
 3141              		.cfi_restore 3
 3142              		.cfi_def_cfa_offset 0
 825:src/storage.c **** 		return;
 3143              		.loc 1 825 3 view .LVU906
 3144 0046 1220     		movs	r0, #18
 3145 0048 FFF7FEBF 		b	report_err
 3146              	.LVL294:
 3147              	.L265:
 3148              		.align	2
 3149              	.L264:
 3150 004c 00000000 		.word	main_ram
 3151 0050 00000000 		.word	backup_ram
 3152              		.cfi_endproc
 3153              	.LFE28:
 3155              		.section	.text.load_sigma,"ax",%progbits
ARM GAS  /tmp/ccsMEfLZ.s 			page 95


 3156              		.align	1
 3157              		.p2align 2,,3
 3158              		.global	load_sigma
 3159              		.syntax unified
 3160              		.thumb
 3161              		.thumb_func
 3162              		.fpu fpv4-sp-d16
 3164              	load_sigma:
 3165              	.LVL295:
 3166              	.LFB29:
 844:src/storage.c **** 	if ( checksum_backup() ) {
 3167              		.loc 1 844 1 is_stmt 1 view -0
 3168              		.cfi_startproc
 3169              		@ args = 0, pretend = 0, frame = 0
 3170              		@ frame_needed = 0, uses_anonymous_args = 0
 845:src/storage.c **** 		/*
 3171              		.loc 1 845 2 view .LVU908
 844:src/storage.c **** 	if ( checksum_backup() ) {
 3172              		.loc 1 844 1 is_stmt 0 view .LVU909
 3173 0000 08B5     		push	{r3, lr}
 3174              		.cfi_def_cfa_offset 8
 3175              		.cfi_offset 3, -8
 3176              		.cfi_offset 14, -4
 845:src/storage.c **** 		/*
 3177              		.loc 1 845 7 view .LVU910
 3178 0002 FFF7FEFF 		bl	checksum_backup
 3179              	.LVL296:
 845:src/storage.c **** 		/*
 3180              		.loc 1 845 5 view .LVU911
 3181 0006 B0B9     		cbnz	r0, .L270
 852:src/storage.c **** 		/*
 3182              		.loc 1 852 2 is_stmt 1 view .LVU912
 852:src/storage.c **** 		/*
 3183              		.loc 1 852 9 is_stmt 0 view .LVU913
 3184 0008 0D4B     		ldr	r3, .L272
 3185 000a 1868     		ldr	r0, [r3]
 852:src/storage.c **** 		/*
 3186              		.loc 1 852 7 view .LVU914
 3187 000c 90F8DD37 		ldrb	r3, [r0, #2013]	@ zero_extendqisi2
 852:src/storage.c **** 		/*
 3188              		.loc 1 852 5 view .LVU915
 3189 0010 9B06     		lsls	r3, r3, #26
 3190 0012 0BD5     		bpl	.L271
 859:src/storage.c **** }
 3191              		.loc 1 859 2 is_stmt 1 view .LVU916
 859:src/storage.c **** }
 3192              		.loc 1 859 56 is_stmt 0 view .LVU917
 3193 0014 90F8CF37 		ldrb	r3, [r0, #1999]	@ zero_extendqisi2
 3194 0018 C3F16403 		rsb	r3, r3, #100
 859:src/storage.c **** }
 3195              		.loc 1 859 81 view .LVU918
 3196 001c 00EBC300 		add	r0, r0, r3, lsl #3
 859:src/storage.c **** }
 3197              		.loc 1 859 2 view .LVU919
 3198 0020 00F56970 		add	r0, r0, #932
 860:src/storage.c **** 
 3199              		.loc 1 860 1 view .LVU920
ARM GAS  /tmp/ccsMEfLZ.s 			page 96


 3200 0024 BDE80840 		pop	{r3, lr}
 3201              		.cfi_remember_state
 3202              		.cfi_restore 14
 3203              		.cfi_restore 3
 3204              		.cfi_def_cfa_offset 0
 859:src/storage.c **** }
 3205              		.loc 1 859 2 view .LVU921
 3206 0028 FFF7FEBF 		b	sigmaCopy
 3207              	.LVL297:
 3208              	.L271:
 3209              		.cfi_restore_state
 856:src/storage.c **** 		return;
 3210              		.loc 1 856 3 is_stmt 1 view .LVU922
 860:src/storage.c **** 
 3211              		.loc 1 860 1 is_stmt 0 view .LVU923
 3212 002c BDE80840 		pop	{r3, lr}
 3213              		.cfi_remember_state
 3214              		.cfi_restore 14
 3215              		.cfi_restore 3
 3216              		.cfi_def_cfa_offset 0
 856:src/storage.c **** 		return;
 3217              		.loc 1 856 3 view .LVU924
 3218 0030 0F20     		movs	r0, #15
 3219 0032 FFF7FEBF 		b	report_err
 3220              	.LVL298:
 3221              	.L270:
 3222              		.cfi_restore_state
 849:src/storage.c **** 		return;
 3223              		.loc 1 849 3 is_stmt 1 view .LVU925
 860:src/storage.c **** 
 3224              		.loc 1 860 1 is_stmt 0 view .LVU926
 3225 0036 BDE80840 		pop	{r3, lr}
 3226              		.cfi_restore 14
 3227              		.cfi_restore 3
 3228              		.cfi_def_cfa_offset 0
 849:src/storage.c **** 		return;
 3229              		.loc 1 849 3 view .LVU927
 3230 003a 1220     		movs	r0, #18
 3231 003c FFF7FEBF 		b	report_err
 3232              	.LVL299:
 3233              	.L273:
 3234              		.align	2
 3235              	.L272:
 3236 0040 00000000 		.word	backup_ram
 3237              		.cfi_endproc
 3238              	.LFE29:
 3240              		.section	.text.load_state,"ax",%progbits
 3241              		.align	1
 3242              		.p2align 2,,3
 3243              		.global	load_state
 3244              		.syntax unified
 3245              		.thumb
 3246              		.thumb_func
 3247              		.fpu fpv4-sp-d16
 3249              	load_state:
 3250              	.LVL300:
 3251              	.LFB30:
ARM GAS  /tmp/ccsMEfLZ.s 			page 97


 867:src/storage.c **** 	if ( not_running() ) {
 3252              		.loc 1 867 1 is_stmt 1 view -0
 3253              		.cfi_startproc
 3254              		@ args = 0, pretend = 0, frame = 0
 3255              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/storage.c **** 		if ( checksum_backup() ) {
 3256              		.loc 1 868 2 view .LVU929
 867:src/storage.c **** 	if ( not_running() ) {
 3257              		.loc 1 867 1 is_stmt 0 view .LVU930
 3258 0000 08B5     		push	{r3, lr}
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 3, -8
 3261              		.cfi_offset 14, -4
 868:src/storage.c **** 		if ( checksum_backup() ) {
 3262              		.loc 1 868 7 view .LVU931
 3263 0002 FFF7FEFF 		bl	not_running
 3264              	.LVL301:
 868:src/storage.c **** 		if ( checksum_backup() ) {
 3265              		.loc 1 868 5 view .LVU932
 3266 0006 98B1     		cbz	r0, .L274
 869:src/storage.c **** 			/*
 3267              		.loc 1 869 3 is_stmt 1 view .LVU933
 869:src/storage.c **** 			/*
 3268              		.loc 1 869 8 is_stmt 0 view .LVU934
 3269 0008 FFF7FEFF 		bl	checksum_backup
 3270              	.LVL302:
 869:src/storage.c **** 			/*
 3271              		.loc 1 869 6 view .LVU935
 3272 000c 88B9     		cbnz	r0, .L278
 876:src/storage.c **** 		init_state();
 3273              		.loc 1 876 3 is_stmt 1 view .LVU936
 876:src/storage.c **** 		init_state();
 3274              		.loc 1 876 11 is_stmt 0 view .LVU937
 3275 000e 0B4B     		ldr	r3, .L279
 876:src/storage.c **** 		init_state();
 3276              		.loc 1 876 20 view .LVU938
 3277 0010 0B4A     		ldr	r2, .L279+4
 876:src/storage.c **** 		init_state();
 3278              		.loc 1 876 10 view .LVU939
 3279 0012 1868     		ldr	r0, [r3]
 876:src/storage.c **** 		init_state();
 3280              		.loc 1 876 19 view .LVU940
 3281 0014 1168     		ldr	r1, [r2]
 876:src/storage.c **** 		init_state();
 3282              		.loc 1 876 3 view .LVU941
 3283 0016 00F5FA60 		add	r0, r0, #2000
 3284 001a 01F5FA61 		add	r1, r1, #2000
 3285 001e 2E22     		movs	r2, #46
 3286 0020 FFF7FEFF 		bl	xcopy
 3287              	.LVL303:
 877:src/storage.c **** 		clrretstk_pc();
 3288              		.loc 1 877 3 is_stmt 1 view .LVU942
 3289 0024 FFF7FEFF 		bl	init_state
 3290              	.LVL304:
 878:src/storage.c **** 	}
 3291              		.loc 1 878 3 view .LVU943
 880:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 98


 3292              		.loc 1 880 1 is_stmt 0 view .LVU944
 3293 0028 BDE80840 		pop	{r3, lr}
 3294              		.cfi_remember_state
 3295              		.cfi_restore 14
 3296              		.cfi_restore 3
 3297              		.cfi_def_cfa_offset 0
 878:src/storage.c **** 	}
 3298              		.loc 1 878 3 view .LVU945
 3299 002c FFF7FEBF 		b	clrretstk_pc
 3300              	.LVL305:
 3301              	.L274:
 3302              		.cfi_restore_state
 880:src/storage.c **** 
 3303              		.loc 1 880 1 view .LVU946
 3304 0030 08BD     		pop	{r3, pc}
 3305              	.L278:
 873:src/storage.c **** 			return;
 3306              		.loc 1 873 4 is_stmt 1 view .LVU947
 880:src/storage.c **** 
 3307              		.loc 1 880 1 is_stmt 0 view .LVU948
 3308 0032 BDE80840 		pop	{r3, lr}
 3309              		.cfi_restore 14
 3310              		.cfi_restore 3
 3311              		.cfi_def_cfa_offset 0
 873:src/storage.c **** 			return;
 3312              		.loc 1 873 4 view .LVU949
 3313 0036 1220     		movs	r0, #18
 3314 0038 FFF7FEBF 		b	report_err
 3315              	.LVL306:
 3316              	.L280:
 3317              		.align	2
 3318              	.L279:
 3319 003c 00000000 		.word	main_ram
 3320 0040 00000000 		.word	backup_ram
 3321              		.cfi_endproc
 3322              	.LFE30:
 3324              		.section	.text.store_program,"ax",%progbits
 3325              		.align	1
 3326              		.p2align 2,,3
 3327              		.global	store_program
 3328              		.syntax unified
 3329              		.thumb
 3330              		.thumb_func
 3331              		.fpu fpv4-sp-d16
 3333              	store_program:
 3334              	.LVL307:
 3335              	.LFB31:
 887:src/storage.c **** 	opcode lbl; 
 3336              		.loc 1 887 1 is_stmt 1 view -0
 3337              		.cfi_startproc
 3338              		@ args = 0, pretend = 0, frame = 0
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 888:src/storage.c **** 	unsigned int pc;
 3340              		.loc 1 888 2 view .LVU951
 889:src/storage.c **** 	int space_needed, count, free;
 3341              		.loc 1 889 2 view .LVU952
 890:src/storage.c **** 
ARM GAS  /tmp/ccsMEfLZ.s 			page 99


 3342              		.loc 1 890 2 view .LVU953
 892:src/storage.c **** 		/*
 3343              		.loc 1 892 2 view .LVU954
 887:src/storage.c **** 	opcode lbl; 
 3344              		.loc 1 887 1 is_stmt 0 view .LVU955
 3345 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3346              		.cfi_def_cfa_offset 24
 3347              		.cfi_offset 4, -24
 3348              		.cfi_offset 5, -20
 3349              		.cfi_offset 6, -16
 3350              		.cfi_offset 7, -12
 3351              		.cfi_offset 8, -8
 3352              		.cfi_offset 14, -4
 892:src/storage.c **** 		/*
 3353              		.loc 1 892 7 view .LVU956
 3354 0004 FFF7FEFF 		bl	not_running
 3355              	.LVL308:
 892:src/storage.c **** 		/*
 3356              		.loc 1 892 5 view .LVU957
 3357 0008 0028     		cmp	r0, #0
 3358 000a 3BD0     		beq	.L281
 896:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3359              		.loc 1 896 3 is_stmt 1 view .LVU958
 3360              	.LVL309:
 897:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3361              		.loc 1 897 3 view .LVU959
 896:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3362              		.loc 1 896 8 is_stmt 0 view .LVU960
 3363 000c 314C     		ldr	r4, .L295
 3364              	.LVL310:
 896:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3365              		.loc 1 896 8 view .LVU961
 3366 000e 2368     		ldr	r3, [r4]
 3367 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 897:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3368              		.loc 1 897 6 view .LVU962
 3369 0014 5B04     		lsls	r3, r3, #17
 3370 0016 37D4     		bmi	.L291
 904:src/storage.c **** 		lbl = getprog( ProgBegin );
 3371              		.loc 1 904 3 is_stmt 1 view .LVU963
 3372 0018 0120     		movs	r0, #1
 3373 001a FFF7FEFF 		bl	update_program_bounds
 3374              	.LVL311:
 905:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3375              		.loc 1 905 3 view .LVU964
 905:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3376              		.loc 1 905 18 is_stmt 0 view .LVU965
 3377 001e 2368     		ldr	r3, [r4]
 905:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3378              		.loc 1 905 9 view .LVU966
 3379 0020 B3F8EC07 		ldrh	r0, [r3, #2028]
 3380 0024 FFF7FEFF 		bl	getprog
 3381              	.LVL312:
 906:src/storage.c **** 			report_err( ERR_NO_LBL );
 3382              		.loc 1 906 3 is_stmt 1 view .LVU967
 906:src/storage.c **** 			report_err( ERR_NO_LBL );
 3383              		.loc 1 906 9 is_stmt 0 view .LVU968
ARM GAS  /tmp/ccsMEfLZ.s 			page 100


 3384 0028 00F47043 		and	r3, r0, #61440
 906:src/storage.c **** 			report_err( ERR_NO_LBL );
 3385              		.loc 1 906 6 view .LVU969
 3386 002c B3F5704F 		cmp	r3, #61440
 3387 0030 2FD1     		bne	.L284
 906:src/storage.c **** 			report_err( ERR_NO_LBL );
 3388              		.loc 1 906 20 discriminator 1 view .LVU970
 3389 0032 10F4706F 		tst	r0, #3840
 906:src/storage.c **** 			report_err( ERR_NO_LBL );
 3390              		.loc 1 906 23 discriminator 1 view .LVU971
 3391 0036 C0F30322 		ubfx	r2, r0, #8, #4
 906:src/storage.c **** 			report_err( ERR_NO_LBL );
 3392              		.loc 1 906 20 discriminator 1 view .LVU972
 3393 003a 2AD1     		bne	.L284
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3394              		.loc 1 913 3 is_stmt 1 view .LVU973
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3395              		.loc 1 913 30 is_stmt 0 view .LVU974
 3396 003c 2368     		ldr	r3, [r4]
 914:src/storage.c **** 
 3397              		.loc 1 914 39 view .LVU975
 3398 003e 264E     		ldr	r6, .L295+4
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3399              		.loc 1 913 30 view .LVU976
 3400 0040 B3F8EE57 		ldrh	r5, [r3, #2030]
 914:src/storage.c **** 
 3401              		.loc 1 914 39 view .LVU977
 3402 0044 3168     		ldr	r1, [r6]
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3403              		.loc 1 913 40 view .LVU978
 3404 0046 B3F8EC37 		ldrh	r3, [r3, #2028]
 914:src/storage.c **** 
 3405              		.loc 1 914 39 view .LVU979
 3406 004a 4F88     		ldrh	r7, [r1, #2]
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3407              		.loc 1 913 28 view .LVU980
 3408 004c 0135     		adds	r5, r5, #1
 919:src/storage.c **** 		if ( pc != 0 ) {
 3409              		.loc 1 919 8 view .LVU981
 3410 004e 0146     		mov	r1, r0
 3411 0050 4FF48040 		mov	r0, #16384
 3412              	.LVL313:
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3413              		.loc 1 913 24 view .LVU982
 3414 0054 ED1A     		subs	r5, r5, r3
 3415              	.LVL314:
 914:src/storage.c **** 
 3416              		.loc 1 914 3 is_stmt 1 view .LVU983
 919:src/storage.c **** 		if ( pc != 0 ) {
 3417              		.loc 1 919 8 is_stmt 0 view .LVU984
 3418 0056 FFF7FEFF 		bl	find_opcode_from
 3419              	.LVL315:
 914:src/storage.c **** 
 3420              		.loc 1 914 8 view .LVU985
 3421 005a C7F5FF57 		rsb	r7, r7, #8160
 3422 005e 1E37     		adds	r7, r7, #30
 3423              	.LVL316:
ARM GAS  /tmp/ccsMEfLZ.s 			page 101


 919:src/storage.c **** 		if ( pc != 0 ) {
 3424              		.loc 1 919 3 is_stmt 1 view .LVU986
 920:src/storage.c **** 			/*
 3425              		.loc 1 920 3 view .LVU987
 920:src/storage.c **** 			/*
 3426              		.loc 1 920 6 is_stmt 0 view .LVU988
 3427 0060 08BB     		cbnz	r0, .L292
 913:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3428              		.loc 1 913 24 view .LVU989
 3429 0062 2C46     		mov	r4, r5
 3430              	.LVL317:
 3431              	.L286:
 932:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3432              		.loc 1 932 3 is_stmt 1 view .LVU990
 932:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3433              		.loc 1 932 6 is_stmt 0 view .LVU991
 3434 0064 BC42     		cmp	r4, r7
 3435 0066 19DC     		bgt	.L293
 937:src/storage.c **** 	}
 3436              		.loc 1 937 3 is_stmt 1 view .LVU992
 937:src/storage.c **** 	}
 3437              		.loc 1 937 26 is_stmt 0 view .LVU993
 3438 0068 3368     		ldr	r3, [r6]
 937:src/storage.c **** 	}
 3439              		.loc 1 937 3 view .LVU994
 3440 006a 5C88     		ldrh	r4, [r3, #2]
 3441              	.LVL318:
 937:src/storage.c **** 	}
 3442              		.loc 1 937 3 view .LVU995
 3443 006c FFF7FEFF 		bl	get_current_prog
 3444              	.LVL319:
 937:src/storage.c **** 	}
 3445              		.loc 1 937 69 view .LVU996
 3446 0070 3368     		ldr	r3, [r6]
 3447 0072 5B88     		ldrh	r3, [r3, #2]
 937:src/storage.c **** 	}
 3448              		.loc 1 937 3 view .LVU997
 3449 0074 0146     		mov	r1, r0
 3450 0076 2B44     		add	r3, r3, r5
 3451 0078 2046     		mov	r0, r4
 3452 007a 2A46     		mov	r2, r5
 939:src/storage.c **** 
 3453              		.loc 1 939 1 view .LVU998
 3454 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3455              		.cfi_remember_state
 3456              		.cfi_restore 14
 3457              		.cfi_restore 8
 3458              		.cfi_restore 7
 3459              		.cfi_restore 6
 3460              		.cfi_restore 5
 3461              		.cfi_restore 4
 3462              		.cfi_def_cfa_offset 0
 3463              	.LVL320:
 937:src/storage.c **** 	}
 3464              		.loc 1 937 3 view .LVU999
 3465 0080 FFF7FEBF 		b	flash_append
 3466              	.LVL321:
ARM GAS  /tmp/ccsMEfLZ.s 			page 102


 3467              	.L281:
 3468              		.cfi_restore_state
 939:src/storage.c **** 
 3469              		.loc 1 939 1 view .LVU1000
 3470 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3471              	.LVL322:
 3472              	.L291:
 898:src/storage.c **** 			return;
 3473              		.loc 1 898 4 is_stmt 1 view .LVU1001
 939:src/storage.c **** 
 3474              		.loc 1 939 1 is_stmt 0 view .LVU1002
 3475 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3476              		.cfi_remember_state
 3477              		.cfi_restore 14
 3478              		.cfi_restore 8
 3479              		.cfi_restore 7
 3480              		.cfi_restore 6
 3481              		.cfi_restore 5
 3482              		.cfi_restore 4
 3483              		.cfi_def_cfa_offset 0
 3484              	.LVL323:
 898:src/storage.c **** 			return;
 3485              		.loc 1 898 4 view .LVU1003
 3486 008c 0720     		movs	r0, #7
 3487 008e FFF7FEBF 		b	report_err
 3488              	.LVL324:
 3489              	.L284:
 3490              		.cfi_restore_state
 907:src/storage.c **** 			return;
 3491              		.loc 1 907 4 is_stmt 1 view .LVU1004
 939:src/storage.c **** 
 3492              		.loc 1 939 1 is_stmt 0 view .LVU1005
 3493 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3494              		.cfi_remember_state
 3495              		.cfi_restore 14
 3496              		.cfi_restore 8
 3497              		.cfi_restore 7
 3498              		.cfi_restore 6
 3499              		.cfi_restore 5
 3500              		.cfi_restore 4
 3501              		.cfi_def_cfa_offset 0
 907:src/storage.c **** 			return;
 3502              		.loc 1 907 4 view .LVU1006
 3503 0096 0620     		movs	r0, #6
 3504              	.LVL325:
 907:src/storage.c **** 			return;
 3505              		.loc 1 907 4 view .LVU1007
 3506 0098 FFF7FEBF 		b	report_err
 3507              	.LVL326:
 3508              	.L293:
 3509              		.cfi_restore_state
 933:src/storage.c **** 			return;
 3510              		.loc 1 933 4 is_stmt 1 view .LVU1008
 939:src/storage.c **** 
 3511              		.loc 1 939 1 is_stmt 0 view .LVU1009
 3512 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3513              		.cfi_remember_state
ARM GAS  /tmp/ccsMEfLZ.s 			page 103


 3514              		.cfi_restore 14
 3515              		.cfi_restore 8
 3516              		.cfi_restore 7
 3517              		.cfi_restore 6
 3518              		.cfi_restore 5
 3519              		.cfi_restore 4
 3520              		.cfi_def_cfa_offset 0
 3521              	.LVL327:
 933:src/storage.c **** 			return;
 3522              		.loc 1 933 4 view .LVU1010
 3523 00a0 1720     		movs	r0, #23
 3524 00a2 FFF7FEBF 		b	report_err
 3525              	.LVL328:
 3526              	.L292:
 3527              		.cfi_restore_state
 3528              	.LBB108:
 924:src/storage.c **** 			set_pc( pc );
 3529              		.loc 1 924 4 is_stmt 1 view .LVU1011
 924:src/storage.c **** 			set_pc( pc );
 3530              		.loc 1 924 26 is_stmt 0 view .LVU1012
 3531 00a6 2368     		ldr	r3, [r4]
 924:src/storage.c **** 			set_pc( pc );
 3532              		.loc 1 924 17 view .LVU1013
 3533 00a8 B3F8E087 		ldrh	r8, [r3, #2016]
 3534              	.LVL329:
 925:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3535              		.loc 1 925 4 is_stmt 1 view .LVU1014
 3536 00ac FFF7FEFF 		bl	set_pc
 3537              	.LVL330:
 926:src/storage.c **** 			if ( space_needed <= free ) {
 3538              		.loc 1 926 4 view .LVU1015
 926:src/storage.c **** 			if ( space_needed <= free ) {
 3539              		.loc 1 926 24 is_stmt 0 view .LVU1016
 3540 00b0 2368     		ldr	r3, [r4]
 3541 00b2 B3F8EE47 		ldrh	r4, [r3, #2030]
 926:src/storage.c **** 			if ( space_needed <= free ) {
 3542              		.loc 1 926 34 view .LVU1017
 3543 00b6 B3F8EC37 		ldrh	r3, [r3, #2028]
 926:src/storage.c **** 			if ( space_needed <= free ) {
 3544              		.loc 1 926 22 view .LVU1018
 3545 00ba 0134     		adds	r4, r4, #1
 926:src/storage.c **** 			if ( space_needed <= free ) {
 3546              		.loc 1 926 32 view .LVU1019
 3547 00bc E41A     		subs	r4, r4, r3
 926:src/storage.c **** 			if ( space_needed <= free ) {
 3548              		.loc 1 926 17 view .LVU1020
 3549 00be 2C1B     		subs	r4, r5, r4
 3550              	.LVL331:
 927:src/storage.c **** 				clrprog();
 3551              		.loc 1 927 4 is_stmt 1 view .LVU1021
 927:src/storage.c **** 				clrprog();
 3552              		.loc 1 927 7 is_stmt 0 view .LVU1022
 3553 00c0 A742     		cmp	r7, r4
 3554 00c2 03DA     		bge	.L294
 3555              	.L287:
 930:src/storage.c **** 		}
 3556              		.loc 1 930 4 is_stmt 1 view .LVU1023
ARM GAS  /tmp/ccsMEfLZ.s 			page 104


 3557 00c4 4046     		mov	r0, r8
 3558 00c6 FFF7FEFF 		bl	set_pc
 3559              	.LVL332:
 3560 00ca CBE7     		b	.L286
 3561              	.L294:
 928:src/storage.c **** 			}
 3562              		.loc 1 928 5 view .LVU1024
 3563 00cc FFF7FEFF 		bl	clrprog
 3564              	.LVL333:
 3565 00d0 F8E7     		b	.L287
 3566              	.L296:
 3567 00d2 00BF     		.align	2
 3568              	.L295:
 3569 00d4 00000000 		.word	main_ram
 3570 00d8 00000000 		.word	library_ram
 3571              	.LBE108:
 3572              		.cfi_endproc
 3573              	.LFE31:
 3575              		.section	.text.recall_program,"ax",%progbits
 3576              		.align	1
 3577              		.p2align 2,,3
 3578              		.global	recall_program
 3579              		.syntax unified
 3580              		.thumb
 3581              		.thumb_func
 3582              		.fpu fpv4-sp-d16
 3584              	recall_program:
 3585              	.LVL334:
 3586              	.LFB32:
 946:src/storage.c **** 	if ( not_running() ) {
 3587              		.loc 1 946 1 view -0
 3588              		.cfi_startproc
 3589              		@ args = 0, pretend = 0, frame = 0
 3590              		@ frame_needed = 0, uses_anonymous_args = 0
 947:src/storage.c **** 		if ( state_pc() == 0 ) {
 3591              		.loc 1 947 2 view .LVU1026
 946:src/storage.c **** 	if ( not_running() ) {
 3592              		.loc 1 946 1 is_stmt 0 view .LVU1027
 3593 0000 10B5     		push	{r4, lr}
 3594              		.cfi_def_cfa_offset 8
 3595              		.cfi_offset 4, -8
 3596              		.cfi_offset 14, -4
 947:src/storage.c **** 		if ( state_pc() == 0 ) {
 3597              		.loc 1 947 7 view .LVU1028
 3598 0002 FFF7FEFF 		bl	not_running
 3599              	.LVL335:
 947:src/storage.c **** 		if ( state_pc() == 0 ) {
 3600              		.loc 1 947 5 view .LVU1029
 3601 0006 B8B1     		cbz	r0, .L297
 948:src/storage.c **** 			State.pc = 1;
 3602              		.loc 1 948 3 is_stmt 1 view .LVU1030
 948:src/storage.c **** 			State.pc = 1;
 3603              		.loc 1 948 8 is_stmt 0 view .LVU1031
 3604 0008 0C4C     		ldr	r4, .L301
 3605 000a 2368     		ldr	r3, [r4]
 948:src/storage.c **** 			State.pc = 1;
 3606              		.loc 1 948 6 view .LVU1032
ARM GAS  /tmp/ccsMEfLZ.s 			page 105


 3607 000c B3F8E027 		ldrh	r2, [r3, #2016]
 3608 0010 12B9     		cbnz	r2, .L299
 949:src/storage.c **** 		}
 3609              		.loc 1 949 4 is_stmt 1 view .LVU1033
 949:src/storage.c **** 		}
 3610              		.loc 1 949 13 is_stmt 0 view .LVU1034
 3611 0012 0122     		movs	r2, #1
 3612 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 3613              	.L299:
 951:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3614              		.loc 1 951 3 is_stmt 1 view .LVU1035
 3615 0018 0120     		movs	r0, #1
 3616 001a FFF7FEFF 		bl	update_program_bounds
 3617              	.LVL336:
 952:src/storage.c **** 	}
 3618              		.loc 1 952 3 view .LVU1036
 3619 001e FFF7FEFF 		bl	get_current_prog
 3620              	.LVL337:
 952:src/storage.c **** 	}
 3621              		.loc 1 952 39 is_stmt 0 view .LVU1037
 3622 0022 2368     		ldr	r3, [r4]
 3623 0024 B3F8EE17 		ldrh	r1, [r3, #2030]
 952:src/storage.c **** 	}
 3624              		.loc 1 952 49 view .LVU1038
 3625 0028 B3F8EC37 		ldrh	r3, [r3, #2028]
 952:src/storage.c **** 	}
 3626              		.loc 1 952 47 view .LVU1039
 3627 002c C91A     		subs	r1, r1, r3
 954:src/storage.c **** 
 3628              		.loc 1 954 1 view .LVU1040
 3629 002e BDE81040 		pop	{r4, lr}
 3630              		.cfi_remember_state
 3631              		.cfi_restore 14
 3632              		.cfi_restore 4
 3633              		.cfi_def_cfa_offset 0
 952:src/storage.c **** 	}
 3634              		.loc 1 952 3 view .LVU1041
 3635 0032 0131     		adds	r1, r1, #1
 3636 0034 FFF7FEBF 		b	append_program
 3637              	.LVL338:
 3638              	.L297:
 3639              		.cfi_restore_state
 954:src/storage.c **** 
 3640              		.loc 1 954 1 view .LVU1042
 3641 0038 10BD     		pop	{r4, pc}
 3642              	.L302:
 3643 003a 00BF     		.align	2
 3644              	.L301:
 3645 003c 00000000 		.word	main_ram
 3646              		.cfi_endproc
 3647              	.LFE32:
 3649              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3650              		.align	2
 3651              	.LC11:
 3652 0000 45727220 		.ascii	"Err slf1\000"
 3652      736C6631 
 3652      00
ARM GAS  /tmp/ccsMEfLZ.s 			page 106


 3653 0009 000000   		.align	2
 3654              	.LC12:
 3655 000c 2E6C6962 		.ascii	".lib\000"
 3655      00
 3656 0011 000000   		.align	2
 3657              	.LC13:
 3658 0014 53617665 		.ascii	"Save Library File\000"
 3658      204C6962 
 3658      72617279 
 3658      2046696C 
 3658      6500
 3659 0026 0000     		.align	2
 3660              	.LC14:
 3661 0028 45727220 		.ascii	"Err slf2\000"
 3661      736C6632 
 3661      00
 3662              		.section	.text.save_lib_file,"ax",%progbits
 3663              		.align	1
 3664              		.p2align 2,,3
 3665              		.global	save_lib_file
 3666              		.syntax unified
 3667              		.thumb
 3668              		.thumb_func
 3669              		.fpu fpv4-sp-d16
 3671              	save_lib_file:
 3672              	.LVL339:
 3673              	.LFB33:
1093:src/storage.c ****   FRESULT f;
 3674              		.loc 1 1093 30 is_stmt 1 view -0
 3675              		.cfi_startproc
 3676              		@ args = 0, pretend = 0, frame = 8
 3677              		@ frame_needed = 0, uses_anonymous_args = 0
1094:src/storage.c ****   int fss;
 3678              		.loc 1 1094 3 view .LVU1044
1095:src/storage.c ****   int data = WRITE;
 3679              		.loc 1 1095 3 view .LVU1045
1096:src/storage.c ****   uint x=0;
 3680              		.loc 1 1096 3 view .LVU1046
1093:src/storage.c ****   FRESULT f;
 3681              		.loc 1 1093 30 is_stmt 0 view .LVU1047
 3682 0000 70B5     		push	{r4, r5, r6, lr}
 3683              		.cfi_def_cfa_offset 16
 3684              		.cfi_offset 4, -16
 3685              		.cfi_offset 5, -12
 3686              		.cfi_offset 6, -8
 3687              		.cfi_offset 14, -4
 3688 0002 86B0     		sub	sp, sp, #24
 3689              		.cfi_def_cfa_offset 40
1096:src/storage.c ****   uint x=0;
 3690              		.loc 1 1096 7 view .LVU1048
 3691 0004 0125     		movs	r5, #1
1097:src/storage.c **** 
 3692              		.loc 1 1097 8 view .LVU1049
 3693 0006 0023     		movs	r3, #0
1093:src/storage.c ****   FRESULT f;
 3694              		.loc 1 1093 30 view .LVU1050
 3695 0008 0446     		mov	r4, r0
ARM GAS  /tmp/ccsMEfLZ.s 			page 107


1099:src/storage.c ****   if (i == 0) {
 3696              		.loc 1 1099 3 view .LVU1051
 3697 000a 1E4E     		ldr	r6, .L313
1096:src/storage.c ****   uint x=0;
 3698              		.loc 1 1096 7 view .LVU1052
 3699 000c 0495     		str	r5, [sp, #16]
1097:src/storage.c **** 
 3700              		.loc 1 1097 3 is_stmt 1 view .LVU1053
1099:src/storage.c ****   if (i == 0) {
 3701              		.loc 1 1099 3 is_stmt 0 view .LVU1054
 3702 000e 2846     		mov	r0, r5
 3703              	.LVL340:
1097:src/storage.c **** 
 3704              		.loc 1 1097 8 view .LVU1055
 3705 0010 0593     		str	r3, [sp, #20]
1099:src/storage.c ****   if (i == 0) {
 3706              		.loc 1 1099 3 is_stmt 1 view .LVU1056
 3707 0012 B047     		blx	r6
 3708              	.LVL341:
1100:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3709              		.loc 1 1100 3 view .LVU1057
1100:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3710              		.loc 1 1100 6 is_stmt 0 view .LVU1058
 3711 0014 CCB9     		cbnz	r4, .L304
1101:src/storage.c ****     if (f != FR_OK) {
 3712              		.loc 1 1101 5 is_stmt 1 view .LVU1059
1101:src/storage.c ****     if (f != FR_OK) {
 3713              		.loc 1 1101 9 is_stmt 0 view .LVU1060
 3714 0016 1C4D     		ldr	r5, .L313+4
 3715 0018 1C4B     		ldr	r3, .L313+8
 3716 001a 6868     		ldr	r0, [r5, #4]
 3717 001c 1C49     		ldr	r1, .L313+12
 3718 001e 0B22     		movs	r2, #11
 3719 0020 9847     		blx	r3
 3720              	.LVL342:
1102:src/storage.c ****       f_close (FPT);
 3721              		.loc 1 1102 5 is_stmt 1 view .LVU1061
1102:src/storage.c ****       f_close (FPT);
 3722              		.loc 1 1102 8 is_stmt 0 view .LVU1062
 3723 0022 20BB     		cbnz	r0, .L305
 3724              	.LVL343:
 3725              	.L309:
1114:src/storage.c ****   if ( f != FR_OK ) {
 3726              		.loc 1 1114 3 is_stmt 1 view .LVU1063
1114:src/storage.c ****   if ( f != FR_OK ) {
 3727              		.loc 1 1114 7 is_stmt 0 view .LVU1064
 3728 0024 1B4A     		ldr	r2, .L313+16
 3729 0026 184B     		ldr	r3, .L313+4
 3730 0028 1168     		ldr	r1, [r2]
 3731 002a 5868     		ldr	r0, [r3, #4]
 3732 002c 1A4C     		ldr	r4, .L313+20
 3733 002e 05AB     		add	r3, sp, #20
 3734 0030 4FF48042 		mov	r2, #16384
 3735 0034 A047     		blx	r4
 3736              	.LVL344:
1115:src/storage.c ****     DispMsg = "Err slf2";
 3737              		.loc 1 1115 3 is_stmt 1 view .LVU1065
ARM GAS  /tmp/ccsMEfLZ.s 			page 108


1115:src/storage.c ****     DispMsg = "Err slf2";
 3738              		.loc 1 1115 6 is_stmt 0 view .LVU1066
 3739 0036 B0B9     		cbnz	r0, .L306
 3740              	.L307:
1118:src/storage.c ****   sys_disk_write_enable(0);
 3741              		.loc 1 1118 3 is_stmt 1 view .LVU1067
 3742 0038 134A     		ldr	r2, .L313+4
 3743 003a 184B     		ldr	r3, .L313+24
 3744 003c 5068     		ldr	r0, [r2, #4]
 3745              	.LVL345:
1118:src/storage.c ****   sys_disk_write_enable(0);
 3746              		.loc 1 1118 3 is_stmt 0 view .LVU1068
 3747 003e 9847     		blx	r3
 3748              	.LVL346:
1119:src/storage.c **** }
 3749              		.loc 1 1119 3 is_stmt 1 view .LVU1069
 3750 0040 104B     		ldr	r3, .L313
 3751 0042 0020     		movs	r0, #0
 3752 0044 9847     		blx	r3
 3753              	.LVL347:
1120:src/storage.c **** 
 3754              		.loc 1 1120 1 is_stmt 0 view .LVU1070
 3755 0046 06B0     		add	sp, sp, #24
 3756              		.cfi_remember_state
 3757              		.cfi_def_cfa_offset 16
 3758              		@ sp needed
 3759 0048 70BD     		pop	{r4, r5, r6, pc}
 3760              	.LVL348:
 3761              	.L304:
 3762              		.cfi_restore_state
1110:src/storage.c ****     if (fss != 1) return;
 3763              		.loc 1 1110 5 is_stmt 1 view .LVU1071
1110:src/storage.c ****     if (fss != 1) return;
 3764              		.loc 1 1110 11 is_stmt 0 view .LVU1072
 3765 004a 04AB     		add	r3, sp, #16
 3766 004c 0293     		str	r3, [sp, #8]
 3767 004e CDE90055 		strd	r5, r5, [sp]
 3768 0052 134C     		ldr	r4, .L313+28
 3769              	.LVL349:
1110:src/storage.c ****     if (fss != 1) return;
 3770              		.loc 1 1110 11 view .LVU1073
 3771 0054 134B     		ldr	r3, .L313+32
 3772 0056 144A     		ldr	r2, .L313+36
 3773 0058 1449     		ldr	r1, .L313+40
 3774 005a 1548     		ldr	r0, .L313+44
 3775 005c A047     		blx	r4
 3776              	.LVL350:
1111:src/storage.c ****   }
 3777              		.loc 1 1111 5 is_stmt 1 view .LVU1074
1111:src/storage.c ****   }
 3778              		.loc 1 1111 8 is_stmt 0 view .LVU1075
 3779 005e 0128     		cmp	r0, #1
 3780 0060 E0D0     		beq	.L309
1120:src/storage.c **** 
 3781              		.loc 1 1120 1 view .LVU1076
 3782 0062 06B0     		add	sp, sp, #24
 3783              		.cfi_remember_state
ARM GAS  /tmp/ccsMEfLZ.s 			page 109


 3784              		.cfi_def_cfa_offset 16
 3785              		@ sp needed
 3786 0064 70BD     		pop	{r4, r5, r6, pc}
 3787              	.LVL351:
 3788              	.L306:
 3789              		.cfi_restore_state
1116:src/storage.c ****   }
 3790              		.loc 1 1116 5 is_stmt 1 view .LVU1077
1116:src/storage.c ****   }
 3791              		.loc 1 1116 13 is_stmt 0 view .LVU1078
 3792 0066 134B     		ldr	r3, .L313+48
 3793 0068 134A     		ldr	r2, .L313+52
 3794 006a 1A60     		str	r2, [r3]
 3795 006c E4E7     		b	.L307
 3796              	.LVL352:
 3797              	.L305:
1103:src/storage.c ****       sys_disk_write_enable(0);
 3798              		.loc 1 1103 7 is_stmt 1 view .LVU1079
 3799 006e 0B4B     		ldr	r3, .L313+24
 3800 0070 6868     		ldr	r0, [r5, #4]
 3801              	.LVL353:
1103:src/storage.c ****       sys_disk_write_enable(0);
 3802              		.loc 1 1103 7 is_stmt 0 view .LVU1080
 3803 0072 9847     		blx	r3
 3804              	.LVL354:
1104:src/storage.c ****       DispMsg = "Err slf1";
 3805              		.loc 1 1104 7 is_stmt 1 view .LVU1081
 3806 0074 2046     		mov	r0, r4
 3807 0076 B047     		blx	r6
 3808              	.LVL355:
1105:src/storage.c ****       return;
 3809              		.loc 1 1105 7 view .LVU1082
1105:src/storage.c ****       return;
 3810              		.loc 1 1105 15 is_stmt 0 view .LVU1083
 3811 0078 0E4B     		ldr	r3, .L313+48
 3812 007a 104A     		ldr	r2, .L313+56
 3813 007c 1A60     		str	r2, [r3]
1106:src/storage.c ****     }
 3814              		.loc 1 1106 7 is_stmt 1 view .LVU1084
1120:src/storage.c **** 
 3815              		.loc 1 1120 1 is_stmt 0 view .LVU1085
 3816 007e 06B0     		add	sp, sp, #24
 3817              		.cfi_def_cfa_offset 16
 3818              		@ sp needed
 3819 0080 70BD     		pop	{r4, r5, r6, pc}
 3820              	.LVL356:
 3821              	.L314:
1120:src/storage.c **** 
 3822              		.loc 1 1120 1 view .LVU1086
 3823 0082 00BF     		.align	2
 3824              	.L313:
 3825 0084 E1030008 		.word	134218721
 3826 0088 00200010 		.word	268443648
 3827 008c 35040008 		.word	134218805
 3828 0090 18000000 		.word	.LC1
 3829 0094 00000000 		.word	library_ram
 3830 0098 41040008 		.word	134218817
ARM GAS  /tmp/ccsMEfLZ.s 			page 110


 3831 009c 39040008 		.word	134218809
 3832 00a0 51030008 		.word	134218577
 3833 00a4 00000000 		.word	open_selected_file
 3834 00a8 0C000000 		.word	.LC12
 3835 00ac 2C000000 		.word	.LC2
 3836 00b0 14000000 		.word	.LC13
 3837 00b4 00000000 		.word	DispMsg
 3838 00b8 28000000 		.word	.LC14
 3839 00bc 00000000 		.word	.LC11
 3840              		.cfi_endproc
 3841              	.LFE33:
 3843              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3844              		.align	2
 3845              	.LC15:
 3846 0000 4C6F6164 		.ascii	"Load Library File\000"
 3846      204C6962 
 3846      72617279 
 3846      2046696C 
 3846      6500
 3847 0012 0000     		.align	2
 3848              	.LC16:
 3849 0014 46696C65 		.ascii	"File too big\000"
 3849      20746F6F 
 3849      20626967 
 3849      00
 3850              		.section	.text.load_lib_file,"ax",%progbits
 3851              		.align	1
 3852              		.p2align 2,,3
 3853              		.global	load_lib_file
 3854              		.syntax unified
 3855              		.thumb
 3856              		.thumb_func
 3857              		.fpu fpv4-sp-d16
 3859              	load_lib_file:
 3860              	.LVL357:
 3861              	.LFB34:
1122:src/storage.c ****   FRESULT f;
 3862              		.loc 1 1122 30 is_stmt 1 view -0
 3863              		.cfi_startproc
 3864              		@ args = 0, pretend = 0, frame = 8
 3865              		@ frame_needed = 0, uses_anonymous_args = 0
1123:src/storage.c ****   int fss;
 3866              		.loc 1 1123 3 view .LVU1088
1124:src/storage.c ****   int data = READ;
 3867              		.loc 1 1124 3 view .LVU1089
1125:src/storage.c ****   uint x=0;
 3868              		.loc 1 1125 3 view .LVU1090
1122:src/storage.c ****   FRESULT f;
 3869              		.loc 1 1122 30 is_stmt 0 view .LVU1091
 3870 0000 10B5     		push	{r4, lr}
 3871              		.cfi_def_cfa_offset 8
 3872              		.cfi_offset 4, -8
 3873              		.cfi_offset 14, -4
1126:src/storage.c **** 
 3874              		.loc 1 1126 8 view .LVU1092
 3875 0002 0222     		movs	r2, #2
1122:src/storage.c ****   FRESULT f;
ARM GAS  /tmp/ccsMEfLZ.s 			page 111


 3876              		.loc 1 1122 30 view .LVU1093
 3877 0004 86B0     		sub	sp, sp, #24
 3878              		.cfi_def_cfa_offset 32
1126:src/storage.c **** 
 3879              		.loc 1 1126 8 view .LVU1094
 3880 0006 0023     		movs	r3, #0
 3881 0008 CDE90423 		strd	r2, r3, [sp, #16]
1128:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3882              		.loc 1 1128 3 is_stmt 1 view .LVU1095
1128:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3883              		.loc 1 1128 6 is_stmt 0 view .LVU1096
 3884 000c 08BB     		cbnz	r0, .L316
1129:src/storage.c ****     if (f != FR_OK) {
 3885              		.loc 1 1129 5 is_stmt 1 view .LVU1097
1129:src/storage.c ****     if (f != FR_OK) {
 3886              		.loc 1 1129 9 is_stmt 0 view .LVU1098
 3887 000e 1A4C     		ldr	r4, .L326
 3888 0010 1A4B     		ldr	r3, .L326+4
 3889 0012 6068     		ldr	r0, [r4, #4]
 3890              	.LVL358:
1129:src/storage.c ****     if (f != FR_OK) {
 3891              		.loc 1 1129 9 view .LVU1099
 3892 0014 1A49     		ldr	r1, .L326+8
 3893 0016 0122     		movs	r2, #1
 3894 0018 9847     		blx	r3
 3895              	.LVL359:
1130:src/storage.c ****       f_close (FPT);
 3896              		.loc 1 1130 5 is_stmt 1 view .LVU1100
1130:src/storage.c ****       f_close (FPT);
 3897              		.loc 1 1130 8 is_stmt 0 view .LVU1101
 3898 001a 0028     		cmp	r0, #0
 3899 001c 27D1     		bne	.L317
 3900              	.LVL360:
 3901              	.L321:
1141:src/storage.c ****   if ( f != FR_OK ) {
 3902              		.loc 1 1141 3 is_stmt 1 view .LVU1102
1141:src/storage.c ****   if ( f != FR_OK ) {
 3903              		.loc 1 1141 7 is_stmt 0 view .LVU1103
 3904 001e 194A     		ldr	r2, .L326+12
 3905 0020 154B     		ldr	r3, .L326
 3906 0022 1168     		ldr	r1, [r2]
 3907 0024 5868     		ldr	r0, [r3, #4]
 3908 0026 184C     		ldr	r4, .L326+16
 3909 0028 05AB     		add	r3, sp, #20
 3910 002a 4FF48042 		mov	r2, #16384
 3911 002e A047     		blx	r4
 3912              	.LVL361:
1142:src/storage.c ****     DispMsg = "Err slf2";
 3913              		.loc 1 1142 3 is_stmt 1 view .LVU1104
1142:src/storage.c ****     DispMsg = "Err slf2";
 3914              		.loc 1 1142 6 is_stmt 0 view .LVU1105
 3915 0030 10B1     		cbz	r0, .L319
1143:src/storage.c ****   }
 3916              		.loc 1 1143 5 is_stmt 1 view .LVU1106
1143:src/storage.c ****   }
 3917              		.loc 1 1143 13 is_stmt 0 view .LVU1107
 3918 0032 164B     		ldr	r3, .L326+20
ARM GAS  /tmp/ccsMEfLZ.s 			page 112


 3919 0034 164A     		ldr	r2, .L326+24
 3920 0036 1A60     		str	r2, [r3]
 3921              	.L319:
1145:src/storage.c ****     DispMsg = "File too big";
 3922              		.loc 1 1145 3 is_stmt 1 view .LVU1108
1145:src/storage.c ****     DispMsg = "File too big";
 3923              		.loc 1 1145 10 is_stmt 0 view .LVU1109
 3924 0038 0F4B     		ldr	r3, .L326
 3925 003a 5868     		ldr	r0, [r3, #4]
 3926              	.LVL362:
1145:src/storage.c ****     DispMsg = "File too big";
 3927              		.loc 1 1145 6 view .LVU1110
 3928 003c 8269     		ldr	r2, [r0, #24]
 3929 003e C368     		ldr	r3, [r0, #12]
 3930 0040 9A42     		cmp	r2, r3
 3931 0042 02D0     		beq	.L322
1146:src/storage.c ****   }
 3932              		.loc 1 1146 5 is_stmt 1 view .LVU1111
1146:src/storage.c ****   }
 3933              		.loc 1 1146 13 is_stmt 0 view .LVU1112
 3934 0044 114B     		ldr	r3, .L326+20
 3935 0046 134A     		ldr	r2, .L326+28
 3936 0048 1A60     		str	r2, [r3]
 3937              	.L322:
1148:src/storage.c **** }
 3938              		.loc 1 1148 3 is_stmt 1 view .LVU1113
 3939 004a 134B     		ldr	r3, .L326+32
 3940 004c 9847     		blx	r3
 3941              	.LVL363:
1149:src/storage.c **** 
 3942              		.loc 1 1149 1 is_stmt 0 view .LVU1114
 3943 004e 06B0     		add	sp, sp, #24
 3944              		.cfi_remember_state
 3945              		.cfi_def_cfa_offset 8
 3946              		@ sp needed
 3947 0050 10BD     		pop	{r4, pc}
 3948              	.LVL364:
 3949              	.L316:
 3950              		.cfi_restore_state
1137:src/storage.c ****     if (fss != 1) return;
 3951              		.loc 1 1137 5 is_stmt 1 view .LVU1115
1137:src/storage.c ****     if (fss != 1) return;
 3952              		.loc 1 1137 11 is_stmt 0 view .LVU1116
 3953 0052 04AA     		add	r2, sp, #16
 3954 0054 CDE90033 		strd	r3, r3, [sp]
 3955 0058 0292     		str	r2, [sp, #8]
 3956 005a 104C     		ldr	r4, .L326+36
 3957 005c 104B     		ldr	r3, .L326+40
 3958 005e 114A     		ldr	r2, .L326+44
 3959 0060 1149     		ldr	r1, .L326+48
 3960 0062 1248     		ldr	r0, .L326+52
 3961              	.LVL365:
1137:src/storage.c ****     if (fss != 1) return;
 3962              		.loc 1 1137 11 view .LVU1117
 3963 0064 A047     		blx	r4
 3964              	.LVL366:
1138:src/storage.c ****   }
ARM GAS  /tmp/ccsMEfLZ.s 			page 113


 3965              		.loc 1 1138 5 is_stmt 1 view .LVU1118
1138:src/storage.c ****   }
 3966              		.loc 1 1138 8 is_stmt 0 view .LVU1119
 3967 0066 0128     		cmp	r0, #1
 3968 0068 D9D0     		beq	.L321
1149:src/storage.c **** 
 3969              		.loc 1 1149 1 view .LVU1120
 3970 006a 06B0     		add	sp, sp, #24
 3971              		.cfi_remember_state
 3972              		.cfi_def_cfa_offset 8
 3973              		@ sp needed
 3974 006c 10BD     		pop	{r4, pc}
 3975              	.LVL367:
 3976              	.L317:
 3977              		.cfi_restore_state
1131:src/storage.c ****       //      DispMsg = "No file?";
 3978              		.loc 1 1131 7 is_stmt 1 view .LVU1121
 3979 006e 6068     		ldr	r0, [r4, #4]
 3980              	.LVL368:
1131:src/storage.c ****       //      DispMsg = "No file?";
 3981              		.loc 1 1131 7 is_stmt 0 view .LVU1122
 3982 0070 094B     		ldr	r3, .L326+32
 3983 0072 9847     		blx	r3
 3984              	.LVL369:
1133:src/storage.c ****     }
 3985              		.loc 1 1133 7 is_stmt 1 view .LVU1123
1149:src/storage.c **** 
 3986              		.loc 1 1149 1 is_stmt 0 view .LVU1124
 3987 0074 06B0     		add	sp, sp, #24
 3988              		.cfi_def_cfa_offset 8
 3989              		@ sp needed
 3990 0076 10BD     		pop	{r4, pc}
 3991              	.L327:
 3992              		.align	2
 3993              	.L326:
 3994 0078 00200010 		.word	268443648
 3995 007c 35040008 		.word	134218805
 3996 0080 18000000 		.word	.LC1
 3997 0084 00000000 		.word	library_ram
 3998 0088 3D040008 		.word	134218813
 3999 008c 00000000 		.word	DispMsg
 4000 0090 28000000 		.word	.LC14
 4001 0094 14000000 		.word	.LC16
 4002 0098 39040008 		.word	134218809
 4003 009c 51030008 		.word	134218577
 4004 00a0 00000000 		.word	open_selected_file
 4005 00a4 0C000000 		.word	.LC12
 4006 00a8 2C000000 		.word	.LC2
 4007 00ac 00000000 		.word	.LC15
 4008              		.cfi_endproc
 4009              	.LFE34:
 4011              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 4012              		.align	2
 4013              	.LC17:
 4014 0000 77703334 		.ascii	"wp34s/wp34s.dat\000"
 4014      732F7770 
 4014      3334732E 
ARM GAS  /tmp/ccsMEfLZ.s 			page 114


 4014      64617400 
 4015              		.align	2
 4016              	.LC18:
 4017 0010 45727220 		.ascii	"Err srf1\000"
 4017      73726631 
 4017      00
 4018 0019 000000   		.align	2
 4019              	.LC19:
 4020 001c 2E646174 		.ascii	".dat\000"
 4020      00
 4021 0021 000000   		.align	2
 4022              	.LC20:
 4023 0024 53617665 		.ascii	"Save RAM File\000"
 4023      2052414D 
 4023      2046696C 
 4023      6500
 4024 0032 0000     		.align	2
 4025              	.LC21:
 4026 0034 45727220 		.ascii	"Err srf2\000"
 4026      73726632 
 4026      00
 4027              		.section	.text.save_ram_file,"ax",%progbits
 4028              		.align	1
 4029              		.p2align 2,,3
 4030              		.global	save_ram_file
 4031              		.syntax unified
 4032              		.thumb
 4033              		.thumb_func
 4034              		.fpu fpv4-sp-d16
 4036              	save_ram_file:
 4037              	.LVL370:
 4038              	.LFB35:
1151:src/storage.c ****   FRESULT f;
 4039              		.loc 1 1151 30 is_stmt 1 view -0
 4040              		.cfi_startproc
 4041              		@ args = 0, pretend = 0, frame = 8
 4042              		@ frame_needed = 0, uses_anonymous_args = 0
1152:src/storage.c ****   int fss;
 4043              		.loc 1 1152 3 view .LVU1126
1153:src/storage.c ****   int data = WRITE;
 4044              		.loc 1 1153 3 view .LVU1127
1154:src/storage.c ****   uint x=0;
 4045              		.loc 1 1154 3 view .LVU1128
1151:src/storage.c ****   FRESULT f;
 4046              		.loc 1 1151 30 is_stmt 0 view .LVU1129
 4047 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4048              		.cfi_def_cfa_offset 20
 4049              		.cfi_offset 4, -20
 4050              		.cfi_offset 5, -16
 4051              		.cfi_offset 6, -12
 4052              		.cfi_offset 7, -8
 4053              		.cfi_offset 14, -4
 4054              	.LBB109:
 4055              	.LBB110:
 211:src/storage.c **** 			      Crc, &Crc );
 4056              		.loc 1 211 9 view .LVU1130
 4057 0002 264E     		ldr	r6, .L338
ARM GAS  /tmp/ccsMEfLZ.s 			page 115


 4058              	.LBE110:
 4059              	.LBE109:
1161:src/storage.c ****     if (i == 0) {
 4060              		.loc 1 1161 5 view .LVU1131
 4061 0004 264F     		ldr	r7, .L338+4
1151:src/storage.c ****   FRESULT f;
 4062              		.loc 1 1151 30 view .LVU1132
 4063 0006 87B0     		sub	sp, sp, #28
 4064              		.cfi_def_cfa_offset 48
1155:src/storage.c **** 
 4065              		.loc 1 1155 8 view .LVU1133
 4066 0008 0023     		movs	r3, #0
1154:src/storage.c ****   uint x=0;
 4067              		.loc 1 1154 7 view .LVU1134
 4068 000a 0125     		movs	r5, #1
1151:src/storage.c ****   FRESULT f;
 4069              		.loc 1 1151 30 view .LVU1135
 4070 000c 0446     		mov	r4, r0
1155:src/storage.c **** 
 4071              		.loc 1 1155 8 view .LVU1136
 4072 000e CDE90453 		strd	r5, r3, [sp, #16]
1157:src/storage.c ****     init_state();
 4073              		.loc 1 1157 5 is_stmt 1 view .LVU1137
 4074 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4075              	.LVL371:
1158:src/storage.c ****     checksum_all();
 4076              		.loc 1 1158 5 view .LVU1138
 4077 0016 FFF7FEFF 		bl	init_state
 4078              	.LVL372:
1159:src/storage.c **** 
 4079              		.loc 1 1159 5 view .LVU1139
 4080              	.LBB112:
 4081              	.LBI109:
 209:src/storage.c **** {
 4082              		.loc 1 209 5 view .LVU1140
 4083              	.LBB111:
 211:src/storage.c **** 			      Crc, &Crc );
 4084              		.loc 1 211 2 view .LVU1141
 211:src/storage.c **** 			      Crc, &Crc );
 4085              		.loc 1 211 9 is_stmt 0 view .LVU1142
 4086 001a 3068     		ldr	r0, [r6]
 4087 001c 40F2FE71 		movw	r1, #2046
 4088 0020 B0F8FE27 		ldrh	r2, [r0, #2046]
 4089 0024 4318     		adds	r3, r0, r1
 4090 0026 FFF7FEFF 		bl	test_checksum
 4091              	.LVL373:
 4092              	.LBE111:
 4093              	.LBE112:
1161:src/storage.c ****     if (i == 0) {
 4094              		.loc 1 1161 5 is_stmt 1 view .LVU1143
 4095 002a 2846     		mov	r0, r5
 4096 002c B847     		blx	r7
 4097              	.LVL374:
1162:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4098              		.loc 1 1162 5 view .LVU1144
1162:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4099              		.loc 1 1162 8 is_stmt 0 view .LVU1145
ARM GAS  /tmp/ccsMEfLZ.s 			page 116


 4100 002e C4B9     		cbnz	r4, .L329
1163:src/storage.c ****       if (f != FR_OK) {
 4101              		.loc 1 1163 7 is_stmt 1 view .LVU1146
1163:src/storage.c ****       if (f != FR_OK) {
 4102              		.loc 1 1163 11 is_stmt 0 view .LVU1147
 4103 0030 1C4D     		ldr	r5, .L338+8
 4104 0032 1D4B     		ldr	r3, .L338+12
 4105 0034 6868     		ldr	r0, [r5, #4]
 4106 0036 1D49     		ldr	r1, .L338+16
 4107 0038 0B22     		movs	r2, #11
 4108 003a 9847     		blx	r3
 4109              	.LVL375:
1164:src/storage.c **** 	f_close (FPT);
 4110              		.loc 1 1164 7 is_stmt 1 view .LVU1148
1164:src/storage.c **** 	f_close (FPT);
 4111              		.loc 1 1164 10 is_stmt 0 view .LVU1149
 4112 003c 18BB     		cbnz	r0, .L330
 4113              	.LVL376:
 4114              	.L334:
1176:src/storage.c ****     if ( f != FR_OK ) {
 4115              		.loc 1 1176 5 is_stmt 1 view .LVU1150
1176:src/storage.c ****     if ( f != FR_OK ) {
 4116              		.loc 1 1176 9 is_stmt 0 view .LVU1151
 4117 003e 194B     		ldr	r3, .L338+8
 4118 0040 3168     		ldr	r1, [r6]
 4119 0042 5868     		ldr	r0, [r3, #4]
 4120 0044 1A4C     		ldr	r4, .L338+20
 4121 0046 05AB     		add	r3, sp, #20
 4122 0048 4FF40062 		mov	r2, #2048
 4123 004c A047     		blx	r4
 4124              	.LVL377:
1177:src/storage.c ****       DispMsg = "Err srf2";
 4125              		.loc 1 1177 5 is_stmt 1 view .LVU1152
1177:src/storage.c ****       DispMsg = "Err srf2";
 4126              		.loc 1 1177 8 is_stmt 0 view .LVU1153
 4127 004e B0B9     		cbnz	r0, .L331
 4128              	.L332:
1180:src/storage.c ****     sys_disk_write_enable(0);
 4129              		.loc 1 1180 5 is_stmt 1 view .LVU1154
 4130 0050 144A     		ldr	r2, .L338+8
 4131 0052 184B     		ldr	r3, .L338+24
 4132 0054 5068     		ldr	r0, [r2, #4]
 4133              	.LVL378:
1180:src/storage.c ****     sys_disk_write_enable(0);
 4134              		.loc 1 1180 5 is_stmt 0 view .LVU1155
 4135 0056 9847     		blx	r3
 4136              	.LVL379:
1181:src/storage.c **** }
 4137              		.loc 1 1181 5 is_stmt 1 view .LVU1156
 4138 0058 114B     		ldr	r3, .L338+4
 4139 005a 0020     		movs	r0, #0
 4140 005c 9847     		blx	r3
 4141              	.LVL380:
1182:src/storage.c **** 
 4142              		.loc 1 1182 1 is_stmt 0 view .LVU1157
 4143 005e 07B0     		add	sp, sp, #28
 4144              		.cfi_remember_state
ARM GAS  /tmp/ccsMEfLZ.s 			page 117


 4145              		.cfi_def_cfa_offset 20
 4146              		@ sp needed
 4147 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4148              	.LVL381:
 4149              	.L329:
 4150              		.cfi_restore_state
1172:src/storage.c ****       if (fss != 1) return;
 4151              		.loc 1 1172 7 is_stmt 1 view .LVU1158
1172:src/storage.c ****       if (fss != 1) return;
 4152              		.loc 1 1172 13 is_stmt 0 view .LVU1159
 4153 0062 04AB     		add	r3, sp, #16
 4154 0064 0293     		str	r3, [sp, #8]
 4155 0066 CDE90055 		strd	r5, r5, [sp]
 4156 006a 134C     		ldr	r4, .L338+28
 4157              	.LVL382:
1172:src/storage.c ****       if (fss != 1) return;
 4158              		.loc 1 1172 13 view .LVU1160
 4159 006c 134B     		ldr	r3, .L338+32
 4160 006e 144A     		ldr	r2, .L338+36
 4161 0070 1449     		ldr	r1, .L338+40
 4162 0072 1548     		ldr	r0, .L338+44
 4163 0074 A047     		blx	r4
 4164              	.LVL383:
1173:src/storage.c ****     }
 4165              		.loc 1 1173 7 is_stmt 1 view .LVU1161
1173:src/storage.c ****     }
 4166              		.loc 1 1173 10 is_stmt 0 view .LVU1162
 4167 0076 0128     		cmp	r0, #1
 4168 0078 E1D0     		beq	.L334
1182:src/storage.c **** 
 4169              		.loc 1 1182 1 view .LVU1163
 4170 007a 07B0     		add	sp, sp, #28
 4171              		.cfi_remember_state
 4172              		.cfi_def_cfa_offset 20
 4173              		@ sp needed
 4174 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4175              	.LVL384:
 4176              	.L331:
 4177              		.cfi_restore_state
1178:src/storage.c ****     }
 4178              		.loc 1 1178 7 is_stmt 1 view .LVU1164
1178:src/storage.c ****     }
 4179              		.loc 1 1178 15 is_stmt 0 view .LVU1165
 4180 007e 134B     		ldr	r3, .L338+48
 4181 0080 134A     		ldr	r2, .L338+52
 4182 0082 1A60     		str	r2, [r3]
 4183 0084 E4E7     		b	.L332
 4184              	.LVL385:
 4185              	.L330:
1165:src/storage.c **** 	sys_disk_write_enable(0);
 4186              		.loc 1 1165 2 is_stmt 1 view .LVU1166
 4187 0086 0B4B     		ldr	r3, .L338+24
 4188 0088 6868     		ldr	r0, [r5, #4]
 4189              	.LVL386:
1165:src/storage.c **** 	sys_disk_write_enable(0);
 4190              		.loc 1 1165 2 is_stmt 0 view .LVU1167
 4191 008a 9847     		blx	r3
ARM GAS  /tmp/ccsMEfLZ.s 			page 118


 4192              	.LVL387:
1166:src/storage.c **** 	DispMsg = "Err srf1";
 4193              		.loc 1 1166 2 is_stmt 1 view .LVU1168
 4194 008c 2046     		mov	r0, r4
 4195 008e B847     		blx	r7
 4196              	.LVL388:
1167:src/storage.c **** 	return;
 4197              		.loc 1 1167 2 view .LVU1169
1167:src/storage.c **** 	return;
 4198              		.loc 1 1167 10 is_stmt 0 view .LVU1170
 4199 0090 0E4B     		ldr	r3, .L338+48
 4200 0092 104A     		ldr	r2, .L338+56
 4201 0094 1A60     		str	r2, [r3]
1168:src/storage.c ****       }
 4202              		.loc 1 1168 2 is_stmt 1 view .LVU1171
1182:src/storage.c **** 
 4203              		.loc 1 1182 1 is_stmt 0 view .LVU1172
 4204 0096 07B0     		add	sp, sp, #28
 4205              		.cfi_def_cfa_offset 20
 4206              		@ sp needed
 4207 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4208              	.LVL389:
 4209              	.L339:
1182:src/storage.c **** 
 4210              		.loc 1 1182 1 view .LVU1173
 4211 009a 00BF     		.align	2
 4212              	.L338:
 4213 009c 00000000 		.word	main_ram
 4214 00a0 E1030008 		.word	134218721
 4215 00a4 00200010 		.word	268443648
 4216 00a8 35040008 		.word	134218805
 4217 00ac 00000000 		.word	.LC17
 4218 00b0 41040008 		.word	134218817
 4219 00b4 39040008 		.word	134218809
 4220 00b8 51030008 		.word	134218577
 4221 00bc 00000000 		.word	open_selected_file
 4222 00c0 1C000000 		.word	.LC19
 4223 00c4 2C000000 		.word	.LC2
 4224 00c8 24000000 		.word	.LC20
 4225 00cc 00000000 		.word	DispMsg
 4226 00d0 34000000 		.word	.LC21
 4227 00d4 10000000 		.word	.LC18
 4228              		.cfi_endproc
 4229              	.LFE35:
 4231              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4232              		.align	2
 4233              	.LC22:
 4234 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4234      2052414D 
 4234      2046696C 
 4234      6500
 4235 000e 0000     		.align	2
 4236              	.LC23:
 4237 0010 45727220 		.ascii	"Err lrf2\000"
 4237      6C726632 
 4237      00
 4238              		.section	.text.load_ram_file,"ax",%progbits
ARM GAS  /tmp/ccsMEfLZ.s 			page 119


 4239              		.align	1
 4240              		.p2align 2,,3
 4241              		.global	load_ram_file
 4242              		.syntax unified
 4243              		.thumb
 4244              		.thumb_func
 4245              		.fpu fpv4-sp-d16
 4247              	load_ram_file:
 4248              	.LVL390:
 4249              	.LFB36:
1184:src/storage.c ****   FRESULT f;
 4250              		.loc 1 1184 29 is_stmt 1 view -0
 4251              		.cfi_startproc
 4252              		@ args = 0, pretend = 0, frame = 8
 4253              		@ frame_needed = 0, uses_anonymous_args = 0
1185:src/storage.c ****   int fss;
 4254              		.loc 1 1185 3 view .LVU1175
1186:src/storage.c ****   int data = READ;
 4255              		.loc 1 1186 3 view .LVU1176
1187:src/storage.c ****   uint x=0;
 4256              		.loc 1 1187 3 view .LVU1177
1184:src/storage.c ****   FRESULT f;
 4257              		.loc 1 1184 29 is_stmt 0 view .LVU1178
 4258 0000 30B5     		push	{r4, r5, lr}
 4259              		.cfi_def_cfa_offset 12
 4260              		.cfi_offset 4, -12
 4261              		.cfi_offset 5, -8
 4262              		.cfi_offset 14, -4
1188:src/storage.c ****   
 4263              		.loc 1 1188 8 view .LVU1179
 4264 0002 0222     		movs	r2, #2
1184:src/storage.c ****   FRESULT f;
 4265              		.loc 1 1184 29 view .LVU1180
 4266 0004 87B0     		sub	sp, sp, #28
 4267              		.cfi_def_cfa_offset 40
1188:src/storage.c ****   
 4268              		.loc 1 1188 8 view .LVU1181
 4269 0006 0023     		movs	r3, #0
 4270 0008 CDE90423 		strd	r2, r3, [sp, #16]
1190:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4271              		.loc 1 1190 3 is_stmt 1 view .LVU1182
1190:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4272              		.loc 1 1190 6 is_stmt 0 view .LVU1183
 4273 000c F8B9     		cbnz	r0, .L341
1191:src/storage.c ****     if (f != FR_OK) {
 4274              		.loc 1 1191 5 is_stmt 1 view .LVU1184
1191:src/storage.c ****     if (f != FR_OK) {
 4275              		.loc 1 1191 9 is_stmt 0 view .LVU1185
 4276 000e 214C     		ldr	r4, .L352
 4277 0010 214B     		ldr	r3, .L352+4
 4278 0012 6068     		ldr	r0, [r4, #4]
 4279              	.LVL391:
1191:src/storage.c ****     if (f != FR_OK) {
 4280              		.loc 1 1191 9 view .LVU1186
 4281 0014 2149     		ldr	r1, .L352+8
 4282 0016 0122     		movs	r2, #1
 4283 0018 9847     		blx	r3
ARM GAS  /tmp/ccsMEfLZ.s 			page 120


 4284              	.LVL392:
1192:src/storage.c ****       f_close (FPT);
 4285              		.loc 1 1192 5 is_stmt 1 view .LVU1187
1192:src/storage.c ****       f_close (FPT);
 4286              		.loc 1 1192 8 is_stmt 0 view .LVU1188
 4287 001a 0028     		cmp	r0, #0
 4288 001c 34D1     		bne	.L342
 4289              	.LVL393:
 4290              	.L346:
1203:src/storage.c ****   if ( f != FR_OK ) {
 4291              		.loc 1 1203 3 is_stmt 1 view .LVU1189
1203:src/storage.c ****   if ( f != FR_OK ) {
 4292              		.loc 1 1203 7 is_stmt 0 view .LVU1190
 4293 001e 204B     		ldr	r3, .L352+12
 4294 0020 1C4D     		ldr	r5, .L352
 4295 0022 1968     		ldr	r1, [r3]
 4296 0024 1F4C     		ldr	r4, .L352+16
 4297 0026 6868     		ldr	r0, [r5, #4]
 4298 0028 05AB     		add	r3, sp, #20
 4299 002a 4FF40062 		mov	r2, #2048
 4300 002e A047     		blx	r4
 4301              	.LVL394:
1204:src/storage.c ****     DispMsg = "Err lrf2";
 4302              		.loc 1 1204 3 is_stmt 1 view .LVU1191
1204:src/storage.c ****     DispMsg = "Err lrf2";
 4303              		.loc 1 1204 6 is_stmt 0 view .LVU1192
 4304 0030 0446     		mov	r4, r0
 4305 0032 D8B9     		cbnz	r0, .L351
1209:src/storage.c ****     DispMsg = "File too big";
 4306              		.loc 1 1209 3 is_stmt 1 view .LVU1193
1209:src/storage.c ****     DispMsg = "File too big";
 4307              		.loc 1 1209 10 is_stmt 0 view .LVU1194
 4308 0034 6868     		ldr	r0, [r5, #4]
 4309              	.LVL395:
1209:src/storage.c ****     DispMsg = "File too big";
 4310              		.loc 1 1209 6 view .LVU1195
 4311 0036 8269     		ldr	r2, [r0, #24]
 4312 0038 C368     		ldr	r3, [r0, #12]
 4313 003a 9A42     		cmp	r2, r3
 4314 003c 1FD0     		beq	.L347
1210:src/storage.c ****       f_close( FPT );
 4315              		.loc 1 1210 5 is_stmt 1 view .LVU1196
1210:src/storage.c ****       f_close( FPT );
 4316              		.loc 1 1210 13 is_stmt 0 view .LVU1197
 4317 003e 1A4B     		ldr	r3, .L352+20
 4318 0040 1A4A     		ldr	r2, .L352+24
 4319 0042 1A60     		str	r2, [r3]
1211:src/storage.c ****       return 1;
 4320              		.loc 1 1211 7 is_stmt 1 view .LVU1198
 4321 0044 1A4B     		ldr	r3, .L352+28
 4322 0046 9847     		blx	r3
 4323              	.LVL396:
1212:src/storage.c ****   }
 4324              		.loc 1 1212 7 view .LVU1199
1212:src/storage.c ****   }
 4325              		.loc 1 1212 14 is_stmt 0 view .LVU1200
 4326 0048 0120     		movs	r0, #1
ARM GAS  /tmp/ccsMEfLZ.s 			page 121


1216:src/storage.c **** 
 4327              		.loc 1 1216 1 view .LVU1201
 4328 004a 07B0     		add	sp, sp, #28
 4329              		.cfi_remember_state
 4330              		.cfi_def_cfa_offset 12
 4331              		@ sp needed
 4332 004c 30BD     		pop	{r4, r5, pc}
 4333              	.LVL397:
 4334              	.L341:
 4335              		.cfi_restore_state
1199:src/storage.c ****     if (fss != 1) return 1;
 4336              		.loc 1 1199 5 is_stmt 1 view .LVU1202
1199:src/storage.c ****     if (fss != 1) return 1;
 4337              		.loc 1 1199 11 is_stmt 0 view .LVU1203
 4338 004e 04AA     		add	r2, sp, #16
 4339 0050 CDE90033 		strd	r3, r3, [sp]
 4340 0054 0292     		str	r2, [sp, #8]
 4341 0056 174C     		ldr	r4, .L352+32
 4342 0058 174B     		ldr	r3, .L352+36
 4343 005a 184A     		ldr	r2, .L352+40
 4344 005c 1849     		ldr	r1, .L352+44
 4345 005e 1948     		ldr	r0, .L352+48
 4346              	.LVL398:
1199:src/storage.c ****     if (fss != 1) return 1;
 4347              		.loc 1 1199 11 view .LVU1204
 4348 0060 A047     		blx	r4
 4349              	.LVL399:
1200:src/storage.c ****   }
 4350              		.loc 1 1200 5 is_stmt 1 view .LVU1205
1200:src/storage.c ****   }
 4351              		.loc 1 1200 8 is_stmt 0 view .LVU1206
 4352 0062 0128     		cmp	r0, #1
 4353 0064 DBD0     		beq	.L346
1200:src/storage.c ****   }
 4354              		.loc 1 1200 26 view .LVU1207
 4355 0066 0120     		movs	r0, #1
 4356              	.LVL400:
1216:src/storage.c **** 
 4357              		.loc 1 1216 1 view .LVU1208
 4358 0068 07B0     		add	sp, sp, #28
 4359              		.cfi_remember_state
 4360              		.cfi_def_cfa_offset 12
 4361              		@ sp needed
 4362 006a 30BD     		pop	{r4, r5, pc}
 4363              	.LVL401:
 4364              	.L351:
 4365              		.cfi_restore_state
1205:src/storage.c ****       f_close( FPT );
 4366              		.loc 1 1205 5 is_stmt 1 view .LVU1209
1205:src/storage.c ****       f_close( FPT );
 4367              		.loc 1 1205 13 is_stmt 0 view .LVU1210
 4368 006c 0E4B     		ldr	r3, .L352+20
 4369 006e 164A     		ldr	r2, .L352+52
 4370 0070 1A60     		str	r2, [r3]
1206:src/storage.c ****       return 1;
 4371              		.loc 1 1206 7 is_stmt 1 view .LVU1211
 4372 0072 6868     		ldr	r0, [r5, #4]
ARM GAS  /tmp/ccsMEfLZ.s 			page 122


 4373              	.LVL402:
1206:src/storage.c ****       return 1;
 4374              		.loc 1 1206 7 is_stmt 0 view .LVU1212
 4375 0074 0E4B     		ldr	r3, .L352+28
 4376 0076 9847     		blx	r3
 4377              	.LVL403:
1207:src/storage.c ****   }
 4378              		.loc 1 1207 7 is_stmt 1 view .LVU1213
1207:src/storage.c ****   }
 4379              		.loc 1 1207 14 is_stmt 0 view .LVU1214
 4380 0078 0120     		movs	r0, #1
1216:src/storage.c **** 
 4381              		.loc 1 1216 1 view .LVU1215
 4382 007a 07B0     		add	sp, sp, #28
 4383              		.cfi_remember_state
 4384              		.cfi_def_cfa_offset 12
 4385              		@ sp needed
 4386 007c 30BD     		pop	{r4, r5, pc}
 4387              	.L347:
 4388              		.cfi_restore_state
1214:src/storage.c ****   return 0;
 4389              		.loc 1 1214 3 is_stmt 1 view .LVU1216
 4390 007e 0C4B     		ldr	r3, .L352+28
 4391 0080 9847     		blx	r3
 4392              	.LVL404:
1215:src/storage.c **** }
 4393              		.loc 1 1215 3 view .LVU1217
1215:src/storage.c **** }
 4394              		.loc 1 1215 10 is_stmt 0 view .LVU1218
 4395 0082 2046     		mov	r0, r4
1216:src/storage.c **** 
 4396              		.loc 1 1216 1 view .LVU1219
 4397 0084 07B0     		add	sp, sp, #28
 4398              		.cfi_remember_state
 4399              		.cfi_def_cfa_offset 12
 4400              		@ sp needed
 4401 0086 30BD     		pop	{r4, r5, pc}
 4402              	.LVL405:
 4403              	.L342:
 4404              		.cfi_restore_state
1193:src/storage.c ****       //      DispMsg = "No file?";
 4405              		.loc 1 1193 7 is_stmt 1 view .LVU1220
 4406 0088 6068     		ldr	r0, [r4, #4]
 4407              	.LVL406:
1193:src/storage.c ****       //      DispMsg = "No file?";
 4408              		.loc 1 1193 7 is_stmt 0 view .LVU1221
 4409 008a 094B     		ldr	r3, .L352+28
 4410 008c 9847     		blx	r3
 4411              	.LVL407:
1195:src/storage.c ****     }
 4412              		.loc 1 1195 7 is_stmt 1 view .LVU1222
1195:src/storage.c ****     }
 4413              		.loc 1 1195 14 is_stmt 0 view .LVU1223
 4414 008e 0120     		movs	r0, #1
1216:src/storage.c **** 
 4415              		.loc 1 1216 1 view .LVU1224
 4416 0090 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccsMEfLZ.s 			page 123


 4417              		.cfi_def_cfa_offset 12
 4418              		@ sp needed
 4419 0092 30BD     		pop	{r4, r5, pc}
 4420              	.L353:
 4421              		.align	2
 4422              	.L352:
 4423 0094 00200010 		.word	268443648
 4424 0098 35040008 		.word	134218805
 4425 009c 00000000 		.word	.LC17
 4426 00a0 00000000 		.word	main_ram
 4427 00a4 3D040008 		.word	134218813
 4428 00a8 00000000 		.word	DispMsg
 4429 00ac 14000000 		.word	.LC16
 4430 00b0 39040008 		.word	134218809
 4431 00b4 51030008 		.word	134218577
 4432 00b8 00000000 		.word	open_selected_file
 4433 00bc 1C000000 		.word	.LC19
 4434 00c0 2C000000 		.word	.LC2
 4435 00c4 00000000 		.word	.LC22
 4436 00c8 10000000 		.word	.LC23
 4437              		.cfi_endproc
 4438              	.LFE36:
 4440              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4441              		.align	2
 4442              	.LC24:
 4443 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4443      2052414D 
 4443      20426163 
 4443      6B757020 
 4443      46696C65 
 4444 0015 000000   		.align	2
 4445              	.LC25:
 4446 0018 45727220 		.ascii	"Err lbf2\000"
 4446      6C626632 
 4446      00
 4447              		.section	.text.load_backup_file,"ax",%progbits
 4448              		.align	1
 4449              		.p2align 2,,3
 4450              		.global	load_backup_file
 4451              		.syntax unified
 4452              		.thumb
 4453              		.thumb_func
 4454              		.fpu fpv4-sp-d16
 4456              	load_backup_file:
 4457              	.LVL408:
 4458              	.LFB37:
1218:src/storage.c ****   FRESULT f;
 4459              		.loc 1 1218 33 is_stmt 1 view -0
 4460              		.cfi_startproc
 4461              		@ args = 0, pretend = 0, frame = 8
 4462              		@ frame_needed = 0, uses_anonymous_args = 0
1219:src/storage.c ****   int fss;
 4463              		.loc 1 1219 3 view .LVU1226
1220:src/storage.c ****   int data = READ;
 4464              		.loc 1 1220 3 view .LVU1227
1221:src/storage.c ****   uint x=0;
 4465              		.loc 1 1221 3 view .LVU1228
ARM GAS  /tmp/ccsMEfLZ.s 			page 124


1218:src/storage.c ****   FRESULT f;
 4466              		.loc 1 1218 33 is_stmt 0 view .LVU1229
 4467 0000 10B5     		push	{r4, lr}
 4468              		.cfi_def_cfa_offset 8
 4469              		.cfi_offset 4, -8
 4470              		.cfi_offset 14, -4
1222:src/storage.c **** 
 4471              		.loc 1 1222 8 view .LVU1230
 4472 0002 0222     		movs	r2, #2
1218:src/storage.c ****   FRESULT f;
 4473              		.loc 1 1218 33 view .LVU1231
 4474 0004 86B0     		sub	sp, sp, #24
 4475              		.cfi_def_cfa_offset 32
1222:src/storage.c **** 
 4476              		.loc 1 1222 8 view .LVU1232
 4477 0006 0023     		movs	r3, #0
 4478 0008 CDE90423 		strd	r2, r3, [sp, #16]
1224:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4479              		.loc 1 1224 3 is_stmt 1 view .LVU1233
1224:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4480              		.loc 1 1224 6 is_stmt 0 view .LVU1234
 4481 000c 08BB     		cbnz	r0, .L355
1225:src/storage.c ****     if (f != FR_OK) {
 4482              		.loc 1 1225 5 is_stmt 1 view .LVU1235
1225:src/storage.c ****     if (f != FR_OK) {
 4483              		.loc 1 1225 9 is_stmt 0 view .LVU1236
 4484 000e 1A4C     		ldr	r4, .L365
 4485 0010 1A4B     		ldr	r3, .L365+4
 4486 0012 6068     		ldr	r0, [r4, #4]
 4487              	.LVL409:
1225:src/storage.c ****     if (f != FR_OK) {
 4488              		.loc 1 1225 9 view .LVU1237
 4489 0014 1A49     		ldr	r1, .L365+8
 4490 0016 0122     		movs	r2, #1
 4491 0018 9847     		blx	r3
 4492              	.LVL410:
1226:src/storage.c ****       f_close (FPT);
 4493              		.loc 1 1226 5 is_stmt 1 view .LVU1238
1226:src/storage.c ****       f_close (FPT);
 4494              		.loc 1 1226 8 is_stmt 0 view .LVU1239
 4495 001a 0028     		cmp	r0, #0
 4496 001c 27D1     		bne	.L356
 4497              	.LVL411:
 4498              	.L360:
1236:src/storage.c ****   if ( f != FR_OK ) {
 4499              		.loc 1 1236 3 is_stmt 1 view .LVU1240
1236:src/storage.c ****   if ( f != FR_OK ) {
 4500              		.loc 1 1236 7 is_stmt 0 view .LVU1241
 4501 001e 194A     		ldr	r2, .L365+12
 4502 0020 154B     		ldr	r3, .L365
 4503 0022 1168     		ldr	r1, [r2]
 4504 0024 5868     		ldr	r0, [r3, #4]
 4505 0026 184C     		ldr	r4, .L365+16
 4506 0028 05AB     		add	r3, sp, #20
 4507 002a 4FF40062 		mov	r2, #2048
 4508 002e A047     		blx	r4
 4509              	.LVL412:
ARM GAS  /tmp/ccsMEfLZ.s 			page 125


1237:src/storage.c ****     DispMsg = "Err lbf2";
 4510              		.loc 1 1237 3 is_stmt 1 view .LVU1242
1237:src/storage.c ****     DispMsg = "Err lbf2";
 4511              		.loc 1 1237 6 is_stmt 0 view .LVU1243
 4512 0030 10B1     		cbz	r0, .L358
1238:src/storage.c ****   }
 4513              		.loc 1 1238 5 is_stmt 1 view .LVU1244
1238:src/storage.c ****   }
 4514              		.loc 1 1238 13 is_stmt 0 view .LVU1245
 4515 0032 164B     		ldr	r3, .L365+20
 4516 0034 164A     		ldr	r2, .L365+24
 4517 0036 1A60     		str	r2, [r3]
 4518              	.L358:
1240:src/storage.c ****     DispMsg = "File too big";
 4519              		.loc 1 1240 3 is_stmt 1 view .LVU1246
1240:src/storage.c ****     DispMsg = "File too big";
 4520              		.loc 1 1240 10 is_stmt 0 view .LVU1247
 4521 0038 0F4B     		ldr	r3, .L365
 4522 003a 5868     		ldr	r0, [r3, #4]
 4523              	.LVL413:
1240:src/storage.c ****     DispMsg = "File too big";
 4524              		.loc 1 1240 6 view .LVU1248
 4525 003c 8269     		ldr	r2, [r0, #24]
 4526 003e C368     		ldr	r3, [r0, #12]
 4527 0040 9A42     		cmp	r2, r3
 4528 0042 02D0     		beq	.L361
1241:src/storage.c ****   }
 4529              		.loc 1 1241 5 is_stmt 1 view .LVU1249
1241:src/storage.c ****   }
 4530              		.loc 1 1241 13 is_stmt 0 view .LVU1250
 4531 0044 114B     		ldr	r3, .L365+20
 4532 0046 134A     		ldr	r2, .L365+28
 4533 0048 1A60     		str	r2, [r3]
 4534              	.L361:
1243:src/storage.c **** }
 4535              		.loc 1 1243 3 is_stmt 1 view .LVU1251
 4536 004a 134B     		ldr	r3, .L365+32
 4537 004c 9847     		blx	r3
 4538              	.LVL414:
1244:src/storage.c **** 
 4539              		.loc 1 1244 1 is_stmt 0 view .LVU1252
 4540 004e 06B0     		add	sp, sp, #24
 4541              		.cfi_remember_state
 4542              		.cfi_def_cfa_offset 8
 4543              		@ sp needed
 4544 0050 10BD     		pop	{r4, pc}
 4545              	.LVL415:
 4546              	.L355:
 4547              		.cfi_restore_state
1232:src/storage.c ****     if (fss != 1) return;
 4548              		.loc 1 1232 5 is_stmt 1 view .LVU1253
1232:src/storage.c ****     if (fss != 1) return;
 4549              		.loc 1 1232 11 is_stmt 0 view .LVU1254
 4550 0052 04AA     		add	r2, sp, #16
 4551 0054 CDE90033 		strd	r3, r3, [sp]
 4552 0058 0292     		str	r2, [sp, #8]
 4553 005a 104C     		ldr	r4, .L365+36
ARM GAS  /tmp/ccsMEfLZ.s 			page 126


 4554 005c 104B     		ldr	r3, .L365+40
 4555 005e 114A     		ldr	r2, .L365+44
 4556 0060 1149     		ldr	r1, .L365+48
 4557 0062 1248     		ldr	r0, .L365+52
 4558              	.LVL416:
1232:src/storage.c ****     if (fss != 1) return;
 4559              		.loc 1 1232 11 view .LVU1255
 4560 0064 A047     		blx	r4
 4561              	.LVL417:
1233:src/storage.c ****   }
 4562              		.loc 1 1233 5 is_stmt 1 view .LVU1256
1233:src/storage.c ****   }
 4563              		.loc 1 1233 8 is_stmt 0 view .LVU1257
 4564 0066 0128     		cmp	r0, #1
 4565 0068 D9D0     		beq	.L360
1244:src/storage.c **** 
 4566              		.loc 1 1244 1 view .LVU1258
 4567 006a 06B0     		add	sp, sp, #24
 4568              		.cfi_remember_state
 4569              		.cfi_def_cfa_offset 8
 4570              		@ sp needed
 4571 006c 10BD     		pop	{r4, pc}
 4572              	.LVL418:
 4573              	.L356:
 4574              		.cfi_restore_state
1227:src/storage.c ****       return;
 4575              		.loc 1 1227 7 is_stmt 1 view .LVU1259
 4576 006e 6068     		ldr	r0, [r4, #4]
 4577              	.LVL419:
1227:src/storage.c ****       return;
 4578              		.loc 1 1227 7 is_stmt 0 view .LVU1260
 4579 0070 094B     		ldr	r3, .L365+32
 4580 0072 9847     		blx	r3
 4581              	.LVL420:
1228:src/storage.c ****     }
 4582              		.loc 1 1228 7 is_stmt 1 view .LVU1261
1244:src/storage.c **** 
 4583              		.loc 1 1244 1 is_stmt 0 view .LVU1262
 4584 0074 06B0     		add	sp, sp, #24
 4585              		.cfi_def_cfa_offset 8
 4586              		@ sp needed
 4587 0076 10BD     		pop	{r4, pc}
 4588              	.L366:
 4589              		.align	2
 4590              	.L365:
 4591 0078 00200010 		.word	268443648
 4592 007c 35040008 		.word	134218805
 4593 0080 00000000 		.word	.LC0
 4594 0084 00000000 		.word	backup_ram
 4595 0088 3D040008 		.word	134218813
 4596 008c 00000000 		.word	DispMsg
 4597 0090 18000000 		.word	.LC25
 4598 0094 14000000 		.word	.LC16
 4599 0098 39040008 		.word	134218809
 4600 009c 51030008 		.word	134218577
 4601 00a0 00000000 		.word	open_selected_file
 4602 00a4 1C000000 		.word	.LC19
ARM GAS  /tmp/ccsMEfLZ.s 			page 127


 4603 00a8 2C000000 		.word	.LC2
 4604 00ac 00000000 		.word	.LC24
 4605              		.cfi_endproc
 4606              	.LFE37:
 4608              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4609              		.align	2
 4610              	.LC26:
 4611 0000 57726974 		.ascii	"Write err\000"
 4611      65206572 
 4611      7200
 4612 000a 0000     		.align	2
 4613              	.LC27:
 4614 000c 57726974 		.ascii	"Written\000"
 4614      74656E00 
 4615              		.align	2
 4616              	.LC28:
 4617 0014 53617665 		.ascii	"Save current program\000"
 4617      20637572 
 4617      72656E74 
 4617      2070726F 
 4617      6772616D 
 4618 0029 000000   		.align	2
 4619              	.LC29:
 4620 002c 4D656D20 		.ascii	"Mem short\000"
 4620      73686F72 
 4620      7400
 4621              		.section	.text.save_prog_file,"ax",%progbits
 4622              		.align	1
 4623              		.p2align 2,,3
 4624              		.global	save_prog_file
 4625              		.syntax unified
 4626              		.thumb
 4627              		.thumb_func
 4628              		.fpu fpv4-sp-d16
 4630              	save_prog_file:
 4631              	.LFB39:
1272:src/storage.c ****   opcode lbl; 
 4632              		.loc 1 1272 24 is_stmt 1 view -0
 4633              		.cfi_startproc
 4634              		@ args = 0, pretend = 0, frame = 8
 4635              		@ frame_needed = 0, uses_anonymous_args = 0
1273:src/storage.c ****   unsigned int pc;
 4636              		.loc 1 1273 3 view .LVU1264
1274:src/storage.c ****   unsigned short steps, prog_crc;
 4637              		.loc 1 1274 3 view .LVU1265
1275:src/storage.c ****   FRESULT f;
 4638              		.loc 1 1275 3 view .LVU1266
1276:src/storage.c ****   int data = WRITE;
 4639              		.loc 1 1276 3 view .LVU1267
1277:src/storage.c ****   int fss;
 4640              		.loc 1 1277 3 view .LVU1268
1272:src/storage.c ****   opcode lbl; 
 4641              		.loc 1 1272 24 is_stmt 0 view .LVU1269
 4642 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4643              		.cfi_def_cfa_offset 28
 4644              		.cfi_offset 4, -28
 4645              		.cfi_offset 5, -24
ARM GAS  /tmp/ccsMEfLZ.s 			page 128


 4646              		.cfi_offset 6, -20
 4647              		.cfi_offset 7, -16
 4648              		.cfi_offset 8, -12
 4649              		.cfi_offset 9, -8
 4650              		.cfi_offset 14, -4
1279:src/storage.c ****   char* buffer;
 4651              		.loc 1 1279 8 view .LVU1270
 4652 0004 0023     		movs	r3, #0
1272:src/storage.c ****   opcode lbl; 
 4653              		.loc 1 1272 24 view .LVU1271
 4654 0006 87B0     		sub	sp, sp, #28
 4655              		.cfi_def_cfa_offset 56
1279:src/storage.c ****   char* buffer;
 4656              		.loc 1 1279 8 view .LVU1272
 4657 0008 0124     		movs	r4, #1
 4658 000a CDE90443 		strd	r4, r3, [sp, #16]
1280:src/storage.c ****   FLASH_REGION* fr;
 4659              		.loc 1 1280 3 is_stmt 1 view .LVU1273
1281:src/storage.c **** 
 4660              		.loc 1 1281 3 view .LVU1274
1284:src/storage.c ****     /*
 4661              		.loc 1 1284 3 view .LVU1275
1284:src/storage.c ****     /*
 4662              		.loc 1 1284 8 is_stmt 0 view .LVU1276
 4663 000e FFF7FEFF 		bl	not_running
 4664              	.LVL421:
1284:src/storage.c ****     /*
 4665              		.loc 1 1284 6 view .LVU1277
 4666 0012 C8B1     		cbz	r0, .L367
1288:src/storage.c ****     if ( pc == REGION_XROM ) {
 4667              		.loc 1 1288 5 is_stmt 1 view .LVU1278
 4668              	.LVL422:
1289:src/storage.c ****       error_message( ERR_ILLEGAL );
 4669              		.loc 1 1289 5 view .LVU1279
1288:src/storage.c ****     if ( pc == REGION_XROM ) {
 4670              		.loc 1 1288 10 is_stmt 0 view .LVU1280
 4671 0014 464D     		ldr	r5, .L384
 4672              	.LVL423:
1288:src/storage.c ****     if ( pc == REGION_XROM ) {
 4673              		.loc 1 1288 10 view .LVU1281
 4674 0016 2B68     		ldr	r3, [r5]
 4675 0018 B3F8E037 		ldrh	r3, [r3, #2016]
1289:src/storage.c ****       error_message( ERR_ILLEGAL );
 4676              		.loc 1 1289 8 view .LVU1282
 4677 001c 9B0B     		lsrs	r3, r3, #14
 4678 001e 032B     		cmp	r3, #3
 4679 0020 72D0     		beq	.L382
1296:src/storage.c ****     lbl = getprog( ProgBegin );
 4680              		.loc 1 1296 5 is_stmt 1 view .LVU1283
 4681 0022 2046     		mov	r0, r4
 4682 0024 FFF7FEFF 		bl	update_program_bounds
 4683              	.LVL424:
1297:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4684              		.loc 1 1297 5 view .LVU1284
1297:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4685              		.loc 1 1297 20 is_stmt 0 view .LVU1285
 4686 0028 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccsMEfLZ.s 			page 129


1297:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4687              		.loc 1 1297 11 view .LVU1286
 4688 002a B3F8EC07 		ldrh	r0, [r3, #2028]
 4689 002e FFF7FEFF 		bl	getprog
 4690              	.LVL425:
1298:src/storage.c ****       error_message( ERR_NO_LBL );
 4691              		.loc 1 1298 5 is_stmt 1 view .LVU1287
1298:src/storage.c ****       error_message( ERR_NO_LBL );
 4692              		.loc 1 1298 11 is_stmt 0 view .LVU1288
 4693 0032 00F47043 		and	r3, r0, #61440
1298:src/storage.c ****       error_message( ERR_NO_LBL );
 4694              		.loc 1 1298 8 view .LVU1289
 4695 0036 B3F5704F 		cmp	r3, #61440
 4696 003a 02D1     		bne	.L371
1298:src/storage.c ****       error_message( ERR_NO_LBL );
 4697              		.loc 1 1298 22 discriminator 1 view .LVU1290
 4698 003c 10F4706F 		tst	r0, #3840
 4699 0040 05D0     		beq	.L372
 4700              	.L371:
1299:src/storage.c ****       return;
 4701              		.loc 1 1299 7 is_stmt 1 view .LVU1291
 4702 0042 0620     		movs	r0, #6
 4703              	.LVL426:
1299:src/storage.c ****       return;
 4704              		.loc 1 1299 7 is_stmt 0 view .LVU1292
 4705 0044 FFF7FEFF 		bl	error_message
 4706              	.LVL427:
1300:src/storage.c ****     }
 4707              		.loc 1 1300 7 is_stmt 1 view .LVU1293
 4708              	.L367:
1345:src/storage.c **** 
 4709              		.loc 1 1345 1 is_stmt 0 view .LVU1294
 4710 0048 07B0     		add	sp, sp, #28
 4711              		.cfi_remember_state
 4712              		.cfi_def_cfa_offset 28
 4713              		@ sp needed
 4714 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4715              	.LVL428:
 4716              	.L372:
 4717              		.cfi_restore_state
1305:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4718              		.loc 1 1305 5 is_stmt 1 view .LVU1295
1305:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4719              		.loc 1 1305 17 is_stmt 0 view .LVU1296
 4720 004e 2B68     		ldr	r3, [r5]
1305:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4721              		.loc 1 1305 11 view .LVU1297
 4722 0050 B3F8EE57 		ldrh	r5, [r3, #2030]
 4723 0054 B3F8EC37 		ldrh	r3, [r3, #2028]
 4724 0058 0135     		adds	r5, r5, #1
 4725 005a ED1A     		subs	r5, r5, r3
 4726 005c ADB2     		uxth	r5, r5
 4727              	.LVL429:
1306:src/storage.c ****     /*
 4728              		.loc 1 1306 5 is_stmt 1 view .LVU1298
1306:src/storage.c ****     /*
 4729              		.loc 1 1306 23 is_stmt 0 view .LVU1299
ARM GAS  /tmp/ccsMEfLZ.s 			page 130


 4730 005e FFF7FEFF 		bl	get_current_prog
 4731              	.LVL430:
 4732              	.LBB113:
 4733              	.LBB114:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4734              		.loc 1 167 2 view .LVU1300
 4735 0062 6E00     		lsls	r6, r5, #1
 4736              	.LVL431:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4737              		.loc 1 167 2 view .LVU1301
 4738              	.LBE114:
 4739              	.LBI113:
 161:src/storage.c **** {
 4740              		.loc 1 161 20 is_stmt 1 view .LVU1302
 4741              	.LBB115:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4742              		.loc 1 163 2 view .LVU1303
 164:src/storage.c **** 	unsigned int i;
 4743              		.loc 1 164 2 view .LVU1304
 165:src/storage.c **** 
 4744              		.loc 1 165 2 view .LVU1305
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4745              		.loc 1 167 2 view .LVU1306
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4746              		.loc 1 167 15 view .LVU1307
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4747              		.loc 1 167 2 is_stmt 0 view .LVU1308
 4748 0064 002D     		cmp	r5, #0
 4749 0066 55D0     		beq	.L378
 4750 0068 8119     		adds	r1, r0, r6
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4751              		.loc 1 163 21 view .LVU1309
 4752 006a 45F6A524 		movw	r4, #23205
 4753              	.LVL432:
 4754              	.L374:
 168:src/storage.c **** 		crc ^= *d++;
 4755              		.loc 1 168 3 is_stmt 1 view .LVU1310
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4756              		.loc 1 169 10 is_stmt 0 view .LVU1311
 4757 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4758              	.LVL433:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4759              		.loc 1 169 10 view .LVU1312
 4760 0072 63BA     		rev16	r3, r4
 4761 0074 9BB2     		uxth	r3, r3
 4762              	.LVL434:
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4763              		.loc 1 169 3 is_stmt 1 view .LVU1313
 169:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4764              		.loc 1 169 7 is_stmt 0 view .LVU1314
 4765 0076 5340     		eors	r3, r3, r2
 4766              	.LVL435:
 170:src/storage.c **** 		crc ^= crc << 12;
 4767              		.loc 1 170 3 is_stmt 1 view .LVU1315
 170:src/storage.c **** 		crc ^= crc << 12;
 4768              		.loc 1 170 7 is_stmt 0 view .LVU1316
 4769 0078 C3F30312 		ubfx	r2, r3, #4, #4
ARM GAS  /tmp/ccsMEfLZ.s 			page 131


 4770 007c 5340     		eors	r3, r3, r2
 4771              	.LVL436:
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4772              		.loc 1 171 3 is_stmt 1 view .LVU1317
 171:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4773              		.loc 1 171 7 is_stmt 0 view .LVU1318
 4774 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4775              	.LVL437:
 172:src/storage.c **** 	}
 4776              		.loc 1 172 3 is_stmt 1 view .LVU1319
 172:src/storage.c **** 	}
 4777              		.loc 1 172 25 is_stmt 0 view .LVU1320
 4778 0082 5C01     		lsls	r4, r3, #5
 4779 0084 04F4FF54 		and	r4, r4, #8160
 172:src/storage.c **** 	}
 4780              		.loc 1 172 7 view .LVU1321
 4781 0088 9BB2     		uxth	r3, r3
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4782              		.loc 1 167 2 view .LVU1322
 4783 008a 8142     		cmp	r1, r0
 172:src/storage.c **** 	}
 4784              		.loc 1 172 7 view .LVU1323
 4785 008c 84EA0304 		eor	r4, r4, r3
 4786              	.LVL438:
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4787              		.loc 1 167 27 is_stmt 1 view .LVU1324
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4788              		.loc 1 167 15 view .LVU1325
 167:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4789              		.loc 1 167 2 is_stmt 0 view .LVU1326
 4790 0090 EDD1     		bne	.L374
 4791              	.LVL439:
 4792              	.L373:
 174:src/storage.c **** }
 4793              		.loc 1 174 2 is_stmt 1 view .LVU1327
 174:src/storage.c **** }
 4794              		.loc 1 174 2 is_stmt 0 view .LVU1328
 4795              	.LBE115:
 4796              	.LBE113:
1310:src/storage.c **** 
 4797              		.loc 1 1310 5 is_stmt 1 view .LVU1329
 4798 0092 DFF8D080 		ldr	r8, .L384+52
1312:src/storage.c ****     if (fss != 1) return;
 4799              		.loc 1 1312 11 is_stmt 0 view .LVU1330
 4800 0096 274F     		ldr	r7, .L384+4
1310:src/storage.c **** 
 4801              		.loc 1 1310 5 view .LVU1331
 4802 0098 0120     		movs	r0, #1
 4803 009a C047     		blx	r8
 4804              	.LVL440:
1312:src/storage.c ****     if (fss != 1) return;
 4805              		.loc 1 1312 5 is_stmt 1 view .LVU1332
1312:src/storage.c ****     if (fss != 1) return;
 4806              		.loc 1 1312 11 is_stmt 0 view .LVU1333
 4807 009c 0123     		movs	r3, #1
 4808 009e 04AA     		add	r2, sp, #16
 4809 00a0 CDE90132 		strd	r3, r2, [sp, #4]
ARM GAS  /tmp/ccsMEfLZ.s 			page 132


 4810 00a4 0093     		str	r3, [sp]
 4811 00a6 244A     		ldr	r2, .L384+8
 4812 00a8 244B     		ldr	r3, .L384+12
 4813 00aa 2549     		ldr	r1, .L384+16
 4814 00ac 2548     		ldr	r0, .L384+20
 4815 00ae B847     		blx	r7
 4816              	.LVL441:
1313:src/storage.c **** 
 4817              		.loc 1 1313 5 is_stmt 1 view .LVU1334
1313:src/storage.c **** 
 4818              		.loc 1 1313 8 is_stmt 0 view .LVU1335
 4819 00b0 0128     		cmp	r0, #1
 4820 00b2 C9D1     		bne	.L367
1317:src/storage.c ****     if (!buffer) {// calloc failure!
 4821              		.loc 1 1317 5 is_stmt 1 view .LVU1336
1317:src/storage.c ****     if (!buffer) {// calloc failure!
 4822              		.loc 1 1317 14 is_stmt 0 view .LVU1337
 4823 00b4 0146     		mov	r1, r0
 4824 00b6 4FF40060 		mov	r0, #2048
 4825              	.LVL442:
1317:src/storage.c ****     if (!buffer) {// calloc failure!
 4826              		.loc 1 1317 14 view .LVU1338
 4827 00ba FFF7FEFF 		bl	calloc
 4828              	.LVL443:
1318:src/storage.c ****       f_close(FPT);
 4829              		.loc 1 1318 5 is_stmt 1 view .LVU1339
1318:src/storage.c ****       f_close(FPT);
 4830              		.loc 1 1318 8 is_stmt 0 view .LVU1340
 4831 00be 0746     		mov	r7, r0
 4832 00c0 58B3     		cbz	r0, .L383
1325:src/storage.c ****     fr->size = steps;
 4833              		.loc 1 1325 5 is_stmt 1 view .LVU1341
 4834              	.LVL444:
1326:src/storage.c ****     fr->crc = prog_crc;
 4835              		.loc 1 1326 5 view .LVU1342
1327:src/storage.c **** 
 4836              		.loc 1 1327 13 is_stmt 0 view .LVU1343
 4837 00c2 8146     		mov	r9, r0
1326:src/storage.c ****     fr->crc = prog_crc;
 4838              		.loc 1 1326 14 view .LVU1344
 4839 00c4 4580     		strh	r5, [r0, #2]	@ movhi
1327:src/storage.c **** 
 4840              		.loc 1 1327 5 is_stmt 1 view .LVU1345
1327:src/storage.c **** 
 4841              		.loc 1 1327 13 is_stmt 0 view .LVU1346
 4842 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
1329:src/storage.c ****    
 4843              		.loc 1 1329 5 is_stmt 1 view .LVU1347
1329:src/storage.c ****    
 4844              		.loc 1 1329 22 is_stmt 0 view .LVU1348
 4845 00ca FFF7FEFF 		bl	get_current_prog
 4846              	.LVL445:
1331:src/storage.c ****     free(buffer);
 4847              		.loc 1 1331 9 view .LVU1349
 4848 00ce 1E4D     		ldr	r5, .L384+24
 4849              	.LVL446:
1331:src/storage.c ****     free(buffer);
ARM GAS  /tmp/ccsMEfLZ.s 			page 133


 4850              		.loc 1 1331 9 view .LVU1350
 4851 00d0 1E4C     		ldr	r4, .L384+28
 4852              	.LVL447:
1329:src/storage.c ****    
 4853              		.loc 1 1329 22 view .LVU1351
 4854 00d2 0146     		mov	r1, r0
1329:src/storage.c ****    
 4855              		.loc 1 1329 5 view .LVU1352
 4856 00d4 3246     		mov	r2, r6
 4857 00d6 4846     		mov	r0, r9
 4858 00d8 FFF7FEFF 		bl	xcopy
 4859              	.LVL448:
1331:src/storage.c ****     free(buffer);
 4860              		.loc 1 1331 5 is_stmt 1 view .LVU1353
1331:src/storage.c ****     free(buffer);
 4861              		.loc 1 1331 9 is_stmt 0 view .LVU1354
 4862 00dc 321D     		adds	r2, r6, #4
 4863 00de 05AB     		add	r3, sp, #20
 4864 00e0 3946     		mov	r1, r7
 4865 00e2 6868     		ldr	r0, [r5, #4]
 4866 00e4 A047     		blx	r4
 4867              	.LVL449:
 4868 00e6 0446     		mov	r4, r0
1332:src/storage.c ****     
 4869              		.loc 1 1332 5 view .LVU1355
 4870 00e8 3846     		mov	r0, r7
 4871              	.LVL450:
1332:src/storage.c ****     
 4872              		.loc 1 1332 5 is_stmt 1 view .LVU1356
 4873 00ea FFF7FEFF 		bl	free
 4874              	.LVL451:
1334:src/storage.c ****       DispMsg = "Write err";
 4875              		.loc 1 1334 5 view .LVU1357
1338:src/storage.c ****     }
 4876              		.loc 1 1338 15 is_stmt 0 view .LVU1358
 4877 00ee 184B     		ldr	r3, .L384+32
 4878 00f0 1848     		ldr	r0, .L384+36
 4879 00f2 1949     		ldr	r1, .L384+40
1341:src/storage.c ****     sys_disk_write_enable(0);
 4880              		.loc 1 1341 5 view .LVU1359
 4881 00f4 194A     		ldr	r2, .L384+44
1338:src/storage.c ****     }
 4882              		.loc 1 1338 15 view .LVU1360
 4883 00f6 002C     		cmp	r4, #0
 4884 00f8 18BF     		it	ne
 4885 00fa 1846     		movne	r0, r3
 4886 00fc 0860     		str	r0, [r1]
1341:src/storage.c ****     sys_disk_write_enable(0);
 4887              		.loc 1 1341 5 is_stmt 1 view .LVU1361
 4888 00fe 6868     		ldr	r0, [r5, #4]
 4889 0100 9047     		blx	r2
 4890              	.LVL452:
1342:src/storage.c ****     
 4891              		.loc 1 1342 5 view .LVU1362
 4892 0102 0020     		movs	r0, #0
 4893 0104 C047     		blx	r8
 4894              	.LVL453:
ARM GAS  /tmp/ccsMEfLZ.s 			page 134


 4895 0106 9FE7     		b	.L367
 4896              	.LVL454:
 4897              	.L382:
1290:src/storage.c ****       return;
 4898              		.loc 1 1290 7 view .LVU1363
 4899 0108 0720     		movs	r0, #7
 4900 010a FFF7FEFF 		bl	error_message
 4901              	.LVL455:
1291:src/storage.c ****     }
 4902              		.loc 1 1291 7 view .LVU1364
1345:src/storage.c **** 
 4903              		.loc 1 1345 1 is_stmt 0 view .LVU1365
 4904 010e 07B0     		add	sp, sp, #28
 4905              		.cfi_remember_state
 4906              		.cfi_def_cfa_offset 28
 4907              		@ sp needed
 4908 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4909              	.LVL456:
 4910              	.L378:
 4911              		.cfi_restore_state
 4912              	.LBB117:
 4913              	.LBB116:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4914              		.loc 1 163 21 view .LVU1366
 4915 0114 45F6A524 		movw	r4, #23205
 4916 0118 BBE7     		b	.L373
 4917              	.LVL457:
 4918              	.L383:
 163:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4919              		.loc 1 163 21 view .LVU1367
 4920              	.LBE116:
 4921              	.LBE117:
1319:src/storage.c ****       sys_disk_write_enable(0);
 4922              		.loc 1 1319 7 is_stmt 1 view .LVU1368
 4923 011a 0B4A     		ldr	r2, .L384+24
 4924 011c 0F4B     		ldr	r3, .L384+44
 4925 011e 5068     		ldr	r0, [r2, #4]
 4926              	.LVL458:
1319:src/storage.c ****       sys_disk_write_enable(0);
 4927              		.loc 1 1319 7 is_stmt 0 view .LVU1369
 4928 0120 9847     		blx	r3
 4929              	.LVL459:
1320:src/storage.c ****       DispMsg = "Mem short";
 4930              		.loc 1 1320 7 is_stmt 1 view .LVU1370
 4931 0122 3846     		mov	r0, r7
 4932 0124 C047     		blx	r8
 4933              	.LVL460:
1321:src/storage.c ****       return;
 4934              		.loc 1 1321 7 view .LVU1371
1321:src/storage.c ****       return;
 4935              		.loc 1 1321 15 is_stmt 0 view .LVU1372
 4936 0126 0C4B     		ldr	r3, .L384+40
 4937 0128 0D4A     		ldr	r2, .L384+48
 4938 012a 1A60     		str	r2, [r3]
1322:src/storage.c ****     }
 4939              		.loc 1 1322 7 is_stmt 1 view .LVU1373
 4940 012c 8CE7     		b	.L367
ARM GAS  /tmp/ccsMEfLZ.s 			page 135


 4941              	.L385:
 4942 012e 00BF     		.align	2
 4943              	.L384:
 4944 0130 00000000 		.word	main_ram
 4945 0134 51030008 		.word	134218577
 4946 0138 1C000000 		.word	.LC19
 4947 013c 00000000 		.word	open_selected_file
 4948 0140 2C000000 		.word	.LC2
 4949 0144 14000000 		.word	.LC28
 4950 0148 00200010 		.word	268443648
 4951 014c 41040008 		.word	134218817
 4952 0150 00000000 		.word	.LC26
 4953 0154 0C000000 		.word	.LC27
 4954 0158 00000000 		.word	DispMsg
 4955 015c 39040008 		.word	134218809
 4956 0160 2C000000 		.word	.LC29
 4957 0164 E1030008 		.word	134218721
 4958              		.cfi_endproc
 4959              	.LFE39:
 4961              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4962              		.align	2
 4963              	.LC30:
 4964 0000 4C6F6164 		.ascii	"Load PROG File\000"
 4964      2050524F 
 4964      47204669 
 4964      6C6500
 4965 000f 00       		.align	2
 4966              	.LC31:
 4967 0010 46696C65 		.ascii	"File odd\000"
 4967      206F6464 
 4967      00
 4968 0019 000000   		.align	2
 4969              	.LC32:
 4970 001c 46696C65 		.ascii	"File crc err\000"
 4970      20637263 
 4970      20657272 
 4970      00
 4971              		.section	.text.load_prog_file,"ax",%progbits
 4972              		.align	1
 4973              		.p2align 2,,3
 4974              		.global	load_prog_file
 4975              		.syntax unified
 4976              		.thumb
 4977              		.thumb_func
 4978              		.fpu fpv4-sp-d16
 4980              	load_prog_file:
 4981              	.LFB40:
1347:src/storage.c ****   int fss, fsize;
 4982              		.loc 1 1347 24 view -0
 4983              		.cfi_startproc
 4984              		@ args = 0, pretend = 0, frame = 8
 4985              		@ frame_needed = 0, uses_anonymous_args = 0
1348:src/storage.c ****   int data = READ;
 4986              		.loc 1 1348 3 view .LVU1375
1349:src/storage.c ****   uint x=0;
 4987              		.loc 1 1349 3 view .LVU1376
1347:src/storage.c ****   int fss, fsize;
ARM GAS  /tmp/ccsMEfLZ.s 			page 136


 4988              		.loc 1 1347 24 is_stmt 0 view .LVU1377
 4989 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4990              		.cfi_def_cfa_offset 20
 4991              		.cfi_offset 4, -20
 4992              		.cfi_offset 5, -16
 4993              		.cfi_offset 6, -12
 4994              		.cfi_offset 7, -8
 4995              		.cfi_offset 14, -4
 4996 0002 87B0     		sub	sp, sp, #28
 4997              		.cfi_def_cfa_offset 48
1350:src/storage.c ****   FLASH_REGION* fr;
 4998              		.loc 1 1350 8 view .LVU1378
 4999 0004 0023     		movs	r3, #0
1349:src/storage.c ****   uint x=0;
 5000              		.loc 1 1349 7 view .LVU1379
 5001 0006 0221     		movs	r1, #2
1354:src/storage.c ****   if (fss != 1) return;
 5002              		.loc 1 1354 9 view .LVU1380
 5003 0008 04AA     		add	r2, sp, #16
1350:src/storage.c ****   FLASH_REGION* fr;
 5004              		.loc 1 1350 8 view .LVU1381
 5005 000a CDE90413 		strd	r1, r3, [sp, #16]
1351:src/storage.c ****   char* buffer;
 5006              		.loc 1 1351 3 is_stmt 1 view .LVU1382
1352:src/storage.c **** 
 5007              		.loc 1 1352 3 view .LVU1383
1354:src/storage.c ****   if (fss != 1) return;
 5008              		.loc 1 1354 3 view .LVU1384
1354:src/storage.c ****   if (fss != 1) return;
 5009              		.loc 1 1354 9 is_stmt 0 view .LVU1385
 5010 000e CDE90033 		strd	r3, r3, [sp]
 5011 0012 0292     		str	r2, [sp, #8]
 5012 0014 284C     		ldr	r4, .L400
 5013 0016 294B     		ldr	r3, .L400+4
 5014 0018 294A     		ldr	r2, .L400+8
 5015 001a 2A49     		ldr	r1, .L400+12
 5016 001c 2A48     		ldr	r0, .L400+16
 5017 001e A047     		blx	r4
 5018              	.LVL461:
1355:src/storage.c **** 
 5019              		.loc 1 1355 3 is_stmt 1 view .LVU1386
1355:src/storage.c **** 
 5020              		.loc 1 1355 6 is_stmt 0 view .LVU1387
 5021 0020 0128     		cmp	r0, #1
 5022 0022 0BD1     		bne	.L386
1359:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5023              		.loc 1 1359 3 is_stmt 1 view .LVU1388
1359:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5024              		.loc 1 1359 11 is_stmt 0 view .LVU1389
 5025 0024 294F     		ldr	r7, .L400+20
 5026 0026 7D68     		ldr	r5, [r7, #4]
 5027 0028 EE68     		ldr	r6, [r5, #12]
 5028              	.LVL462:
1360:src/storage.c ****     f_close(FPT);
 5029              		.loc 1 1360 3 is_stmt 1 view .LVU1390
1360:src/storage.c ****     f_close(FPT);
 5030              		.loc 1 1360 6 is_stmt 0 view .LVU1391
ARM GAS  /tmp/ccsMEfLZ.s 			page 137


 5031 002a B6F5804F 		cmp	r6, #16384
 5032 002e 07DD     		ble	.L388
1361:src/storage.c ****     DispMsg = "File too big";
 5033              		.loc 1 1361 5 is_stmt 1 view .LVU1392
 5034 0030 274B     		ldr	r3, .L400+24
 5035 0032 2846     		mov	r0, r5
 5036              	.LVL463:
1361:src/storage.c ****     DispMsg = "File too big";
 5037              		.loc 1 1361 5 is_stmt 0 view .LVU1393
 5038 0034 9847     		blx	r3
 5039              	.LVL464:
1362:src/storage.c ****     return;
 5040              		.loc 1 1362 5 is_stmt 1 view .LVU1394
1362:src/storage.c ****     return;
 5041              		.loc 1 1362 13 is_stmt 0 view .LVU1395
 5042 0036 274B     		ldr	r3, .L400+28
 5043 0038 274A     		ldr	r2, .L400+32
 5044 003a 1A60     		str	r2, [r3]
1363:src/storage.c ****   }
 5045              		.loc 1 1363 5 is_stmt 1 view .LVU1396
 5046              	.LVL465:
 5047              	.L386:
1391:src/storage.c **** 
 5048              		.loc 1 1391 1 is_stmt 0 view .LVU1397
 5049 003c 07B0     		add	sp, sp, #28
 5050              		.cfi_remember_state
 5051              		.cfi_def_cfa_offset 20
 5052              		@ sp needed
 5053 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 5054              	.LVL466:
 5055              	.L388:
 5056              		.cfi_restore_state
1365:src/storage.c ****   if (!buffer) {// calloc failure!
 5057              		.loc 1 1365 3 is_stmt 1 view .LVU1398
1365:src/storage.c ****   if (!buffer) {// calloc failure!
 5058              		.loc 1 1365 31 is_stmt 0 view .LVU1399
 5059 0040 26F0FF03 		bic	r3, r6, #255
1365:src/storage.c ****   if (!buffer) {// calloc failure!
 5060              		.loc 1 1365 12 view .LVU1400
 5061 0044 0146     		mov	r1, r0
 5062 0046 03F58070 		add	r0, r3, #256
 5063              	.LVL467:
1365:src/storage.c ****   if (!buffer) {// calloc failure!
 5064              		.loc 1 1365 12 view .LVU1401
 5065 004a FFF7FEFF 		bl	calloc
 5066              	.LVL468:
1366:src/storage.c ****     f_close(FPT);
 5067              		.loc 1 1366 3 is_stmt 1 view .LVU1402
1366:src/storage.c ****     f_close(FPT);
 5068              		.loc 1 1366 6 is_stmt 0 view .LVU1403
 5069 004e 0446     		mov	r4, r0
 5070 0050 58B3     		cbz	r0, .L397
1372:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5071              		.loc 1 1372 3 is_stmt 1 view .LVU1404
 5072 0052 3246     		mov	r2, r6
 5073 0054 2846     		mov	r0, r5
 5074              	.LVL469:
ARM GAS  /tmp/ccsMEfLZ.s 			page 138


1372:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5075              		.loc 1 1372 3 is_stmt 0 view .LVU1405
 5076 0056 05AB     		add	r3, sp, #20
 5077 0058 204D     		ldr	r5, .L400+36
 5078 005a 2146     		mov	r1, r4
 5079 005c A847     		blx	r5
 5080              	.LVL470:
1373:src/storage.c ****     free(buffer);
 5081              		.loc 1 1373 3 is_stmt 1 view .LVU1406
1373:src/storage.c ****     free(buffer);
 5082              		.loc 1 1373 8 is_stmt 0 view .LVU1407
 5083 005e 7868     		ldr	r0, [r7, #4]
1373:src/storage.c ****     free(buffer);
 5084              		.loc 1 1373 6 view .LVU1408
 5085 0060 8269     		ldr	r2, [r0, #24]
 5086 0062 C368     		ldr	r3, [r0, #12]
 5087 0064 9A42     		cmp	r2, r3
 5088 0066 12D1     		bne	.L398
1379:src/storage.c **** 
 5089              		.loc 1 1379 3 is_stmt 1 view .LVU1409
 5090 0068 194B     		ldr	r3, .L400+24
 5091 006a 9847     		blx	r3
 5092              	.LVL471:
1381:src/storage.c ****     
 5093              		.loc 1 1381 3 view .LVU1410
1383:src/storage.c ****     DispMsg = "File crc err";
 5094              		.loc 1 1383 3 view .LVU1411
1383:src/storage.c ****     DispMsg = "File crc err";
 5095              		.loc 1 1383 7 is_stmt 0 view .LVU1412
 5096 006c 2146     		mov	r1, r4
 5097 006e 2046     		mov	r0, r4
 5098 0070 FFF7FEFF 		bl	checksum_region
 5099              	.LVL472:
1383:src/storage.c ****     DispMsg = "File crc err";
 5100              		.loc 1 1383 6 view .LVU1413
 5101 0074 A8B9     		cbnz	r0, .L399
1389:src/storage.c ****   free(buffer);
 5102              		.loc 1 1389 3 is_stmt 1 view .LVU1414
 5103              	.LVL473:
 5104              	.LBB118:
 5105              	.LBI118:
1393:src/storage.c **** { // buffer contains all of program file
 5106              		.loc 1 1393 6 view .LVU1415
 5107              	.LBB119:
1395:src/storage.c ****   int space_needed, count, free;
 5108              		.loc 1 1395 3 view .LVU1416
1396:src/storage.c **** 
 5109              		.loc 1 1396 3 view .LVU1417
1398:src/storage.c ****     /*
 5110              		.loc 1 1398 3 view .LVU1418
1398:src/storage.c ****     /*
 5111              		.loc 1 1398 8 is_stmt 0 view .LVU1419
 5112 0076 FFF7FEFF 		bl	not_running
 5113              	.LVL474:
1398:src/storage.c ****     /*
 5114              		.loc 1 1398 6 view .LVU1420
 5115 007a 10B1     		cbz	r0, .L392
ARM GAS  /tmp/ccsMEfLZ.s 			page 139


 5116 007c 2046     		mov	r0, r4
 5117 007e FFF7FEFF 		bl	store_program_from_buffer.part.0
 5118              	.LVL475:
 5119              	.L392:
1398:src/storage.c ****     /*
 5120              		.loc 1 1398 6 view .LVU1421
 5121              	.LBE119:
 5122              	.LBE118:
1390:src/storage.c **** }
 5123              		.loc 1 1390 3 is_stmt 1 view .LVU1422
 5124 0082 2046     		mov	r0, r4
1391:src/storage.c **** 
 5125              		.loc 1 1391 1 is_stmt 0 view .LVU1423
 5126 0084 07B0     		add	sp, sp, #28
 5127              		.cfi_remember_state
 5128              		.cfi_def_cfa_offset 20
 5129              		@ sp needed
 5130 0086 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5131              		.cfi_restore 14
 5132              		.cfi_restore 7
 5133              		.cfi_restore 6
 5134              		.cfi_restore 5
 5135              		.cfi_restore 4
 5136              		.cfi_def_cfa_offset 0
 5137              	.LVL476:
1390:src/storage.c **** }
 5138              		.loc 1 1390 3 view .LVU1424
 5139 008a FFF7FEBF 		b	free
 5140              	.LVL477:
 5141              	.L398:
 5142              		.cfi_restore_state
1374:src/storage.c ****     f_close(FPT);
 5143              		.loc 1 1374 5 is_stmt 1 view .LVU1425
 5144 008e 2046     		mov	r0, r4
 5145 0090 FFF7FEFF 		bl	free
 5146              	.LVL478:
1375:src/storage.c ****     DispMsg = "File odd";
 5147              		.loc 1 1375 5 view .LVU1426
 5148 0094 0E4B     		ldr	r3, .L400+24
 5149 0096 7868     		ldr	r0, [r7, #4]
 5150 0098 9847     		blx	r3
 5151              	.LVL479:
1376:src/storage.c ****     return;
 5152              		.loc 1 1376 5 view .LVU1427
1376:src/storage.c ****     return;
 5153              		.loc 1 1376 13 is_stmt 0 view .LVU1428
 5154 009a 0E4B     		ldr	r3, .L400+28
 5155 009c 104A     		ldr	r2, .L400+40
 5156 009e 1A60     		str	r2, [r3]
1377:src/storage.c ****   }
 5157              		.loc 1 1377 5 is_stmt 1 view .LVU1429
 5158 00a0 CCE7     		b	.L386
 5159              	.LVL480:
 5160              	.L399:
1384:src/storage.c ****         free(buffer);
 5161              		.loc 1 1384 5 view .LVU1430
1384:src/storage.c ****         free(buffer);
ARM GAS  /tmp/ccsMEfLZ.s 			page 140


 5162              		.loc 1 1384 13 is_stmt 0 view .LVU1431
 5163 00a2 0C4B     		ldr	r3, .L400+28
 5164 00a4 0F4A     		ldr	r2, .L400+44
 5165 00a6 1A60     		str	r2, [r3]
1385:src/storage.c ****     return;
 5166              		.loc 1 1385 9 is_stmt 1 view .LVU1432
 5167 00a8 EBE7     		b	.L392
 5168              	.LVL481:
 5169              	.L397:
1367:src/storage.c ****     DispMsg = "Mem short";
 5170              		.loc 1 1367 5 view .LVU1433
 5171 00aa 094B     		ldr	r3, .L400+24
 5172 00ac 2846     		mov	r0, r5
 5173              	.LVL482:
1367:src/storage.c ****     DispMsg = "Mem short";
 5174              		.loc 1 1367 5 is_stmt 0 view .LVU1434
 5175 00ae 9847     		blx	r3
 5176              	.LVL483:
1368:src/storage.c ****     return;
 5177              		.loc 1 1368 5 is_stmt 1 view .LVU1435
1368:src/storage.c ****     return;
 5178              		.loc 1 1368 13 is_stmt 0 view .LVU1436
 5179 00b0 084B     		ldr	r3, .L400+28
 5180 00b2 0D4A     		ldr	r2, .L400+48
 5181 00b4 1A60     		str	r2, [r3]
1369:src/storage.c ****   }
 5182              		.loc 1 1369 5 is_stmt 1 view .LVU1437
 5183 00b6 C1E7     		b	.L386
 5184              	.L401:
 5185              		.align	2
 5186              	.L400:
 5187 00b8 51030008 		.word	134218577
 5188 00bc 00000000 		.word	open_selected_file
 5189 00c0 1C000000 		.word	.LC19
 5190 00c4 2C000000 		.word	.LC2
 5191 00c8 00000000 		.word	.LC30
 5192 00cc 00200010 		.word	268443648
 5193 00d0 39040008 		.word	134218809
 5194 00d4 00000000 		.word	DispMsg
 5195 00d8 14000000 		.word	.LC16
 5196 00dc 3D040008 		.word	134218813
 5197 00e0 10000000 		.word	.LC31
 5198 00e4 1C000000 		.word	.LC32
 5199 00e8 2C000000 		.word	.LC29
 5200              		.cfi_endproc
 5201              	.LFE40:
 5203              		.section	.text.store_program_from_buffer,"ax",%progbits
 5204              		.align	1
 5205              		.p2align 2,,3
 5206              		.global	store_program_from_buffer
 5207              		.syntax unified
 5208              		.thumb
 5209              		.thumb_func
 5210              		.fpu fpv4-sp-d16
 5212              	store_program_from_buffer:
 5213              	.LVL484:
 5214              	.LFB41:
ARM GAS  /tmp/ccsMEfLZ.s 			page 141


1394:src/storage.c ****   unsigned int pc;
 5215              		.loc 1 1394 1 view -0
 5216              		.cfi_startproc
 5217              		@ args = 0, pretend = 0, frame = 0
 5218              		@ frame_needed = 0, uses_anonymous_args = 0
1395:src/storage.c ****   int space_needed, count, free;
 5219              		.loc 1 1395 3 view .LVU1439
1396:src/storage.c **** 
 5220              		.loc 1 1396 3 view .LVU1440
1398:src/storage.c ****     /*
 5221              		.loc 1 1398 3 view .LVU1441
1394:src/storage.c ****   unsigned int pc;
 5222              		.loc 1 1394 1 is_stmt 0 view .LVU1442
 5223 0000 10B5     		push	{r4, lr}
 5224              		.cfi_def_cfa_offset 8
 5225              		.cfi_offset 4, -8
 5226              		.cfi_offset 14, -4
1394:src/storage.c ****   unsigned int pc;
 5227              		.loc 1 1394 1 view .LVU1443
 5228 0002 0446     		mov	r4, r0
1398:src/storage.c ****     /*
 5229              		.loc 1 1398 8 view .LVU1444
 5230 0004 FFF7FEFF 		bl	not_running
 5231              	.LVL485:
1398:src/storage.c ****     /*
 5232              		.loc 1 1398 6 view .LVU1445
 5233 0008 20B1     		cbz	r0, .L402
 5234 000a 2046     		mov	r0, r4
 5235              		.loc 1 1440 1 view .LVU1446
 5236 000c BDE81040 		pop	{r4, lr}
 5237              		.cfi_remember_state
 5238              		.cfi_restore 14
 5239              		.cfi_restore 4
 5240              		.cfi_def_cfa_offset 0
 5241              	.LVL486:
 5242              		.loc 1 1440 1 view .LVU1447
 5243 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5244              	.LVL487:
 5245              	.L402:
 5246              		.cfi_restore_state
 5247              		.loc 1 1440 1 view .LVU1448
 5248 0014 10BD     		pop	{r4, pc}
 5249              		.loc 1 1440 1 view .LVU1449
 5250              		.cfi_endproc
 5251              	.LFE41:
 5253              		.comm	XromA2D,64,4
 5254              		.comm	XromLocal,464,4
 5255              		.comm	XromParams,16,4
 5256              		.comm	StateWhileOn,52,4
 5257              		.comm	library_ram,4,4
 5258              		.comm	backup_ram,4,4
 5259              		.comm	main_ram,4,4
 5260 0016 00BF     		.text
 5261              	.Letext0:
 5262              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5263              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5264              		.file 4 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccsMEfLZ.s 			page 142


 5265              		.file 5 "/usr/include/newlib/sys/reent.h"
 5266              		.file 6 "/usr/include/newlib/sys/lock.h"
 5267              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5268              		.file 8 "/usr/include/newlib/sys/types.h"
 5269              		.file 9 "/usr/include/newlib/stdlib.h"
 5270              		.file 10 "dmcp/ff_ifc.h"
 5271              		.file 11 "dmcp/dmcp.h"
 5272              		.file 12 "src/decNumber/decContext.h"
 5273              		.file 13 "src/decNumber/decNumber.h"
 5274              		.file 14 "src/decNumber/decimal64.h"
 5275              		.file 15 "src/decNumber/decimal128.h"
 5276              		.file 16 "src/xeq.h"
 5277              		.file 17 "src/data.h"
 5278              		.file 18 "src/storage.h"
 5279              		.file 19 "src/display.h"
 5280              		.file 20 "src/stats.h"
 5281              		.file 21 "src/alpha.h"
 5282              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccsMEfLZ.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/ccsMEfLZ.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/ccsMEfLZ.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/ccsMEfLZ.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/ccsMEfLZ.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/ccsMEfLZ.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/ccsMEfLZ.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/ccsMEfLZ.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/ccsMEfLZ.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:305    .text.program_flash:0000000000000000 $t
     /tmp/ccsMEfLZ.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/ccsMEfLZ.s:568    .text.program_flash:00000000000000d4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/ccsMEfLZ.s:584    .text.flash_append:0000000000000000 $t
     /tmp/ccsMEfLZ.s:591    .text.flash_append:0000000000000000 flash_append
     /tmp/ccsMEfLZ.s:762    .text.flash_append:000000000000009c $d
     /tmp/ccsMEfLZ.s:768    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:775    .text.open_selected_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:783    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/ccsMEfLZ.s:899    .text.open_selected_file:0000000000000050 $d
     /tmp/ccsMEfLZ.s:910    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:914    .text.init_mem:0000000000000000 $t
     /tmp/ccsMEfLZ.s:922    .text.init_mem:0000000000000000 init_mem
     /tmp/ccsMEfLZ.s:986    .text.init_mem:0000000000000030 $d
     /tmp/ccsMEfLZ.s:994    .text.crc16:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1002   .text.crc16:0000000000000000 crc16
     /tmp/ccsMEfLZ.s:1081   .text.checksum_program:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1089   .text.checksum_program:0000000000000000 checksum_program
     /tmp/ccsMEfLZ.s:1201   .text.checksum_program:0000000000000058 $d
     /tmp/ccsMEfLZ.s:1206   .text.checksum_ram:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1214   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/ccsMEfLZ.s:1233   .text.checksum_ram:0000000000000014 $d
     /tmp/ccsMEfLZ.s:1238   .text.checksum_backup:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1246   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/ccsMEfLZ.s:1378   .text.checksum_backup:0000000000000054 $d
     /tmp/ccsMEfLZ.s:1383   .text.clpall:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1391   .text.clpall:0000000000000000 clpall
     /tmp/ccsMEfLZ.s:1430   .text.clpall:0000000000000018 $d
     /tmp/ccsMEfLZ.s:1435   .text.clrall:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1443   .text.clrall:0000000000000000 clrall
     /tmp/ccsMEfLZ.s:1529   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/ccsMEfLZ.s:1536   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:1540   .text.reset:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1548   .text.reset:0000000000000000 reset
     /tmp/ccsMEfLZ.s:1588   .text.reset:0000000000000028 $d
     /tmp/ccsMEfLZ.s:1596   .text.stoprog:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1604   .text.stoprog:0000000000000000 stoprog
     /tmp/ccsMEfLZ.s:1812   .text.stoprog:00000000000000e4 $d
     /tmp/ccsMEfLZ.s:1818   .text.delprog:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1826   .text.delprog:0000000000000000 delprog
     /tmp/ccsMEfLZ.s:1941   .text.delprog:0000000000000068 $d
     /tmp/ccsMEfLZ.s:1946   .text.append_program:0000000000000000 $t
     /tmp/ccsMEfLZ.s:1954   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/ccsMEfLZ.s 			page 144


     /tmp/ccsMEfLZ.s:2175   .text.append_program:00000000000000c0 $d
     /tmp/ccsMEfLZ.s:2183   .text.check_create_wp34sdir:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2191   .text.check_create_wp34sdir:0000000000000000 check_create_wp34sdir
     /tmp/ccsMEfLZ.s:2232   .text.check_create_wp34sdir:0000000000000018 $d
     /tmp/ccsMEfLZ.s:2239   .text.init_library:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2247   .text.init_library:0000000000000000 init_library
     /tmp/ccsMEfLZ.s:2309   .text.init_library:0000000000000034 $d
     /tmp/ccsMEfLZ.s:2314   .text.flash_remove:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2322   .text.flash_remove:0000000000000000 flash_remove
     /tmp/ccsMEfLZ.s:2369   .text.flash_remove:0000000000000024 $d
     /tmp/ccsMEfLZ.s:2374   .text.clrprog:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2382   .text.clrprog:0000000000000000 clrprog
     /tmp/ccsMEfLZ.s:2513   .text.clrprog:0000000000000090 $d
     /tmp/ccsMEfLZ.s:2518   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:2522   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2529   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/ccsMEfLZ.s:2728   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/ccsMEfLZ.s:2738   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:2745   .text.flash_backup:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2753   .text.flash_backup:0000000000000000 flash_backup
     /tmp/ccsMEfLZ.s:2834   .text.flash_backup:0000000000000048 $d
     /tmp/ccsMEfLZ.s:2843   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:2847   .text.flash_restore:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2855   .text.flash_restore:0000000000000000 flash_restore
     /tmp/ccsMEfLZ.s:2914   .text.flash_restore:0000000000000034 $d
     /tmp/ccsMEfLZ.s:2922   .text.load_program:0000000000000000 $t
     /tmp/ccsMEfLZ.s:2930   .text.load_program:0000000000000000 load_program
     /tmp/ccsMEfLZ.s:3042   .text.load_program:000000000000003c $d
     /tmp/ccsMEfLZ.s:3048   .text.load_registers:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3056   .text.load_registers:0000000000000000 load_registers
     /tmp/ccsMEfLZ.s:3150   .text.load_registers:000000000000004c $d
     /tmp/ccsMEfLZ.s:3156   .text.load_sigma:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3164   .text.load_sigma:0000000000000000 load_sigma
     /tmp/ccsMEfLZ.s:3236   .text.load_sigma:0000000000000040 $d
     /tmp/ccsMEfLZ.s:3241   .text.load_state:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3249   .text.load_state:0000000000000000 load_state
     /tmp/ccsMEfLZ.s:3319   .text.load_state:000000000000003c $d
     /tmp/ccsMEfLZ.s:3325   .text.store_program:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3333   .text.store_program:0000000000000000 store_program
     /tmp/ccsMEfLZ.s:3569   .text.store_program:00000000000000d4 $d
     /tmp/ccsMEfLZ.s:3576   .text.recall_program:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3584   .text.recall_program:0000000000000000 recall_program
     /tmp/ccsMEfLZ.s:3645   .text.recall_program:000000000000003c $d
     /tmp/ccsMEfLZ.s:3650   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:3663   .text.save_lib_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3671   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/ccsMEfLZ.s:3825   .text.save_lib_file:0000000000000084 $d
     /tmp/ccsMEfLZ.s:3844   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:3851   .text.load_lib_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:3859   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/ccsMEfLZ.s:3994   .text.load_lib_file:0000000000000078 $d
     /tmp/ccsMEfLZ.s:4012   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:4028   .text.save_ram_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:4036   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/ccsMEfLZ.s:4213   .text.save_ram_file:000000000000009c $d
     /tmp/ccsMEfLZ.s:4232   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:4239   .text.load_ram_file:0000000000000000 $t
ARM GAS  /tmp/ccsMEfLZ.s 			page 145


     /tmp/ccsMEfLZ.s:4247   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/ccsMEfLZ.s:4423   .text.load_ram_file:0000000000000094 $d
     /tmp/ccsMEfLZ.s:4441   .rodata.load_backup_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:4448   .text.load_backup_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:4456   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/ccsMEfLZ.s:4591   .text.load_backup_file:0000000000000078 $d
     /tmp/ccsMEfLZ.s:4609   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:4622   .text.save_prog_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:4630   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/ccsMEfLZ.s:4944   .text.save_prog_file:0000000000000130 $d
     /tmp/ccsMEfLZ.s:4962   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/ccsMEfLZ.s:4972   .text.load_prog_file:0000000000000000 $t
     /tmp/ccsMEfLZ.s:4980   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/ccsMEfLZ.s:5187   .text.load_prog_file:00000000000000b8 $d
     /tmp/ccsMEfLZ.s:5204   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/ccsMEfLZ.s:5212   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
error_message
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free
ARM GAS  /tmp/ccsMEfLZ.s 			page 146



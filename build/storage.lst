ARM GAS  /tmp/cc1iUxzj.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** 
  24:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  25:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  26:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  27:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  28:src/storage.c **** 
  29:src/storage.c **** #ifndef NULL
ARM GAS  /tmp/cc1iUxzj.s 			page 2


  30:src/storage.c **** #define NULL 0
  31:src/storage.c **** #endif
  32:src/storage.c **** 
  33:src/storage.c **** #else // not realbuild
  34:src/storage.c **** 
  35:src/storage.c **** // Emulator definitions
  36:src/storage.c **** #include <stdio.h>
  37:src/storage.c **** #include <stdlib.h>
  38:src/storage.c **** #include <stddef.h>
  39:src/storage.c **** #include <string.h>
  40:src/storage.c **** #include <stdarg.h>
  41:src/storage.c **** 
  42:src/storage.c **** #ifdef DM42
  43:src/storage.c **** #include "dmcp.h"
  44:src/storage.c **** #endif
  45:src/storage.c **** 
  46:src/storage.c **** #ifndef DM42
  47:src/storage.c **** 
  48:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  49:src/storage.c **** #include <errno.h>
  50:src/storage.c **** #include <stdlib.h>
  51:src/storage.c **** #include <unistd.h>
  52:src/storage.c **** #endif
  53:src/storage.c **** 
  54:src/storage.c **** #endif
  55:src/storage.c **** 
  56:src/storage.c **** #define PERSISTENT_RAM
  57:src/storage.c **** #define SLCDCMEM
  58:src/storage.c **** #define VOLATILE_RAM
  59:src/storage.c **** #define BACKUP_FLASH
  60:src/storage.c **** 
  61:src/storage.c **** #ifdef DM42
  62:src/storage.c **** 
  63:src/storage.c **** #define STATE_FILE "wp34s/wp34c.dat"
  64:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup.dat"
  65:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  66:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  67:src/storage.c **** 
  68:src/storage.c **** #else
  69:src/storage.c **** 
  70:src/storage.c **** #define STATE_FILE "wp34c.dat"
  71:src/storage.c **** #define BACKUP_FILE "wp34c-backup.dat"
  72:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
  73:src/storage.c **** 
  74:src/storage.c **** #endif
  75:src/storage.c **** #endif
  76:src/storage.c **** 
  77:src/storage.c **** #define DM42SAFE
  78:src/storage.c **** #include "xeq.h"
  79:src/storage.c **** #include "storage.h"
  80:src/storage.c **** #include "display.h"
  81:src/storage.c **** #include "stats.h"
  82:src/storage.c **** #include "alpha.h"
  83:src/storage.c **** #undef DM42SAFE
  84:src/storage.c **** 
  85:src/storage.c **** #ifdef DM42
  86:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
ARM GAS  /tmp/cc1iUxzj.s 			page 3


  87:src/storage.c **** #else
  88:src/storage.c **** #define PAGE_SIZE	 256
  89:src/storage.c **** #endif
  90:src/storage.c **** 
  91:src/storage.c **** /*
  92:src/storage.c ****  *  Setup the persistent RAM
  93:src/storage.c ****  */
  94:src/storage.c **** #ifdef DM42
  95:src/storage.c **** 
  96:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
  97:src/storage.c **** FLASH_REGION *library_ram;
  98:src/storage.c **** 
  99:src/storage.c **** void init_mem () { // called at start of program_main in console.c
 100:src/storage.c ****   char *v;
 101:src/storage.c **** 
 102:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
 103:src/storage.c ****   if (v == NULL) {
 104:src/storage.c ****     perror("calloc failed");
 105:src/storage.c ****     return;
 106:src/storage.c ****   }
 107:src/storage.c ****   main_ram = (TPersistentRam *) v;
 108:src/storage.c ****   v += RAM_SIZE;
 109:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 110:src/storage.c ****   v += RAM_SIZE;
 111:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 112:src/storage.c **** }
 113:src/storage.c **** 
 114:src/storage.c **** #else
 115:src/storage.c **** 
 116:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
 117:src/storage.c **** 
 118:src/storage.c **** #endif
 119:src/storage.c **** 
 120:src/storage.c **** /*
 121:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 122:src/storage.c ****  */
 123:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 124:src/storage.c **** 
 125:src/storage.c **** /*
 126:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 127:src/storage.c ****  *  It replaces the local registers and flags if active.
 128:src/storage.c ****  */
 129:src/storage.c **** TXromParams XromParams;
 130:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 131:src/storage.c **** 
 132:src/storage.c **** /* Private space for four registers temporarily
 133:src/storage.c ****  */
 134:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 135:src/storage.c **** 
 136:src/storage.c **** /*
 137:src/storage.c ****  *  The backup flash area:
 138:src/storage.c ****  *  2 KB for storage of programs and registers
 139:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 140:src/storage.c ****  */
 141:src/storage.c **** #if !defined(REALBUILD)
 142:src/storage.c **** /*
 143:src/storage.c ****  *  We need to define the Library space here.
ARM GAS  /tmp/cc1iUxzj.s 			page 4


 144:src/storage.c ****  *  On the device the linker takes care of this.
 145:src/storage.c ****  */
 146:src/storage.c **** #ifdef DM42 // has already been done by init_mem above
 147:src/storage.c **** #else
 148:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 149:src/storage.c **** FLASH_REGION UserFlash;
 150:src/storage.c **** #endif
 151:src/storage.c **** #endif
 152:src/storage.c **** 
 153:src/storage.c **** /*
 154:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 155:src/storage.c ****  */
 156:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 157:src/storage.c **** {
 158:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 159:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 160:src/storage.c **** 	unsigned int i;
 161:src/storage.c **** 
 162:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 163:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 164:src/storage.c **** 		crc ^= *d++;
 165:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 166:src/storage.c **** 		crc ^= crc << 12;
 167:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 168:src/storage.c **** 	}
 169:src/storage.c **** 	return crc;
 170:src/storage.c **** }
 171:src/storage.c **** 
 172:src/storage.c **** 
 173:src/storage.c **** /*
 174:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 175:src/storage.c ****  *  Returns non zero value if failure
 176:src/storage.c ****  */
 177:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 178:src/storage.c **** {
  30              		.loc 1 178 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 179:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 179 2 view .LVU1
 180:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 180 2 view .LVU2
  37              	.LBB38:
  38              	.LBI38:
 156:src/storage.c **** {
  39              		.loc 1 156 20 view .LVU3
  40              	.LBB39:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 158 2 view .LVU4
 159:src/storage.c **** 	unsigned int i;
  42              		.loc 1 159 2 view .LVU5
 160:src/storage.c **** 
  43              		.loc 1 160 2 view .LVU6
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 162 2 view .LVU7
ARM GAS  /tmp/cc1iUxzj.s 			page 5


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 162 15 view .LVU8
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 162 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE39:
  49              	.LBE38:
 178:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 178 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB42:
  57              	.LBB40:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 158 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 163:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 163 3 is_stmt 1 view .LVU12
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 164 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 164 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 164 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 164 3 is_stmt 1 view .LVU16
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 164 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 165:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 165 3 is_stmt 1 view .LVU18
 165:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 165 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 166 3 is_stmt 1 view .LVU20
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 166 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 167:src/storage.c **** 	}
  85              		.loc 1 167 3 is_stmt 1 view .LVU22
 167:src/storage.c **** 	}
ARM GAS  /tmp/cc1iUxzj.s 			page 6


  86              		.loc 1 167 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
  89              		.loc 1 167 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 162 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 167:src/storage.c **** 	}
  93              		.loc 1 167 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 162 27 is_stmt 1 view .LVU27
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 162 15 view .LVU28
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 162 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 169:src/storage.c **** }
 100              		.loc 1 169 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 169:src/storage.c **** }
 102              		.loc 1 169 2 is_stmt 0 view .LVU31
 103              	.LBE40:
 104              	.LBE42:
 181:src/storage.c **** 	
 182:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 182 2 is_stmt 1 view .LVU32
 183:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 183 3 view .LVU33
 184:src/storage.c **** 	}
 185:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 185 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 183:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 183 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 185 2 is_stmt 1 view .LVU36
 112              		.loc 1 185 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 185 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 186:src/storage.c **** }
 119              		.loc 1 186 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
ARM GAS  /tmp/cc1iUxzj.s 			page 7


 185:src/storage.c **** }
 128              		.loc 1 185 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 186 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB43:
 139              	.LBB41:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 158 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 169:src/storage.c **** }
 143              		.loc 1 169 2 is_stmt 1 view .LVU43
 169:src/storage.c **** }
 144              		.loc 1 169 2 is_stmt 0 view .LVU44
 145              	.LBE41:
 146              	.LBE43:
 182:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 182 2 is_stmt 1 view .LVU45
 183:src/storage.c **** 	}
 148              		.loc 1 183 3 view .LVU46
 185:src/storage.c **** }
 149              		.loc 1 185 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 183:src/storage.c **** 	}
 151              		.loc 1 183 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 185:src/storage.c **** }
 153              		.loc 1 185 2 is_stmt 1 view .LVU49
 185:src/storage.c **** }
 154              		.loc 1 185 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 185:src/storage.c **** }
 158              		.loc 1 185 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 185:src/storage.c **** }
 165              		.loc 1 185 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 186 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
ARM GAS  /tmp/cc1iUxzj.s 			page 8


 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 187:src/storage.c **** 
 188:src/storage.c **** 
 189:src/storage.c **** /*
 190:src/storage.c ****  *  Checksum the current program.
 191:src/storage.c ****  */
 192:src/storage.c **** short unsigned int checksum_program( void )
 193:src/storage.c **** {
 194:src/storage.c **** 	update_program_bounds( 1 );
 195:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 196:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 197:src/storage.c **** }
 198:src/storage.c **** 
 199:src/storage.c **** 
 200:src/storage.c **** /*
 201:src/storage.c ****  *  Checksum the persistent RAM area
 202:src/storage.c ****  *  Returns non zero value if failure
 203:src/storage.c ****  */
 204:src/storage.c **** int checksum_ram( void )
 205:src/storage.c **** {
 206:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 207:src/storage.c **** 			      Crc, &Crc );
 208:src/storage.c **** }
 209:src/storage.c **** 
 210:src/storage.c **** 
 211:src/storage.c **** /*
 212:src/storage.c ****  *  Checksum the backup flash region
 213:src/storage.c ****  *  Returns non zero value if failure
 214:src/storage.c ****  */
 215:src/storage.c **** int checksum_backup( void )
 216:src/storage.c **** {
 217:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 218:src/storage.c **** 		              BackupFlash._crc, NULL );
 219:src/storage.c **** }
 220:src/storage.c **** 
 221:src/storage.c **** 
 222:src/storage.c **** /*
 223:src/storage.c ****  *  Checksum a flash region
 224:src/storage.c ****  *  Returns non zero value if failure
 225:src/storage.c ****  */
 226:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 227:src/storage.c **** {
 184              		.loc 1 227 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 228:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 228 2 view .LVU55
 189              		.loc 1 228 25 is_stmt 0 view .LVU56
ARM GAS  /tmp/cc1iUxzj.s 			page 9


 190 0000 4B88     		ldrh	r3, [r1, #2]
 229:src/storage.c **** 	
 230:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 230 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 230 2 is_stmt 1 view .LVU58
 195              		.loc 1 230 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 231:src/storage.c **** }
 200              		.loc 1 231 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 227:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 227 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 230:src/storage.c **** }
 210              		.loc 1 230 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 230:src/storage.c **** }
 213              		.loc 1 230 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 230:src/storage.c **** }
 216              		.loc 1 230 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 230:src/storage.c **** }
 219              		.loc 1 230 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 230:src/storage.c **** }
 222              		.loc 1 230 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 231 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
 232              		.align	1
 233              		.p2align 2,,3
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
ARM GAS  /tmp/cc1iUxzj.s 			page 10


 240              	.LVL23:
 241              	.LFB12:
 232:src/storage.c **** 
 233:src/storage.c **** 
 234:src/storage.c **** /*
 235:src/storage.c ****  *  Helper to store final END in empty program space
 236:src/storage.c ****  */
 237:src/storage.c **** static void stoend( void )
 238:src/storage.c **** {
 239:src/storage.c **** 	ProgSize = 1;
 240:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 241:src/storage.c **** }
 242:src/storage.c **** 
 243:src/storage.c **** 
 244:src/storage.c **** /*
 245:src/storage.c ****  *  Clear the program space
 246:src/storage.c ****  */
 247:src/storage.c **** void clpall( void )
 248:src/storage.c **** {
 249:src/storage.c **** 	clrretstk_pc();
 250:src/storage.c **** 	stoend();
 251:src/storage.c **** }
 252:src/storage.c **** 
 253:src/storage.c **** 
 254:src/storage.c **** /*
 255:src/storage.c ****  *  Sanity checks for program (step) deletion
 256:src/storage.c ****  */
 257:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 258:src/storage.c **** {
 242              		.loc 1 258 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 259:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 259 2 view .LVU69
 247              		.loc 1 259 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 258:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 258 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 259 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 259 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 259 20 discriminator 1 view .LVU74
 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
 263              	.LVL24:
 264              	.L29:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 261:src/storage.c **** 	}
 262:src/storage.c **** 	else {
ARM GAS  /tmp/cc1iUxzj.s 			page 11


 263:src/storage.c **** 		return 0;
 265              		.loc 1 263 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 264:src/storage.c **** 	}
 265:src/storage.c **** 	return 1;
 266:src/storage.c **** }
 267              		.loc 1 266 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 259 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 259 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 260 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 265:src/storage.c **** }
 282              		.loc 1 265 2 view .LVU80
 265:src/storage.c **** }
 283              		.loc 1 265 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 266 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34c-backup.dat\000"
 297      732F7770 
 297      3334632D 
 297      6261636B 
 297      75702E64 
 298 0017 00       		.align	2
 299              	.LC1:
 300 0018 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
 300      6C69622E 
 300      64617400 
 301              		.align	2
 302              	.LC2:
 303 002c 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
ARM GAS  /tmp/cc1iUxzj.s 			page 12


 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 267:src/storage.c **** 
 268:src/storage.c **** 
 269:src/storage.c **** /*
 270:src/storage.c ****  *  Clear just the current program
 271:src/storage.c ****  */
 272:src/storage.c **** void clrprog( void )
 273:src/storage.c **** {
 274:src/storage.c **** 	update_program_bounds( 1 );
 275:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 276:src/storage.c **** 		/*
 277:src/storage.c **** 		 *  Porgram is in flash
 278:src/storage.c **** 		 */
 279:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 280:src/storage.c **** 	}
 281:src/storage.c **** 	else {
 282:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 283:src/storage.c **** 			return;
 284:src/storage.c **** 		}
 285:src/storage.c **** 		clrretstk();
 286:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 287:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 288:src/storage.c **** 		if ( ProgSize == 0 ) {
 289:src/storage.c **** 			stoend();
 290:src/storage.c **** 		}
 291:src/storage.c **** 	}
 292:src/storage.c **** 	set_pc( ProgBegin - 1 );
 293:src/storage.c **** 	update_program_bounds( 1 );
 294:src/storage.c **** }
 295:src/storage.c ****  
 296:src/storage.c **** 
 297:src/storage.c **** /*
 298:src/storage.c ****  *  Clear all - programs and registers
 299:src/storage.c ****  */
 300:src/storage.c **** void clrall(void) 
 301:src/storage.c **** {
 302:src/storage.c **** 	NumRegs = TOPREALREG;
 303:src/storage.c **** 	xeq_init_contexts();
 304:src/storage.c **** 	clrreg( OP_CLREG );
 305:src/storage.c **** 	clrstk( OP_CLSTK );
 306:src/storage.c **** 	clralpha( OP_CLRALPHA );
 307:src/storage.c **** 	clrflags( OP_CLFLAGS );
 308:src/storage.c **** 	clpall();
 309:src/storage.c **** 
 310:src/storage.c **** 	reset_shift();
 311:src/storage.c **** 	State2.test = TST_NONE;
 312:src/storage.c **** 
 313:src/storage.c **** 	DispMsg = NULL;
 314:src/storage.c **** }
ARM GAS  /tmp/cc1iUxzj.s 			page 13


 315:src/storage.c **** 
 316:src/storage.c **** 
 317:src/storage.c **** /*
 318:src/storage.c ****  *  Clear everything
 319:src/storage.c ****  */
 320:src/storage.c **** void reset( void ) 
 321:src/storage.c **** {
 322:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 323:src/storage.c **** 	clrall();
 324:src/storage.c **** 	init_state();
 325:src/storage.c **** #ifndef DM42
 326:src/storage.c **** 	UState.contrast = 6;
 327:src/storage.c **** #endif
 328:src/storage.c **** #ifdef INFRARED
 329:src/storage.c **** 	State.print_delay = 10;
 330:src/storage.c **** #endif
 331:src/storage.c **** 	DispMsg = "Erased";
 332:src/storage.c **** }
 333:src/storage.c **** 
 334:src/storage.c **** 
 335:src/storage.c **** /*
 336:src/storage.c ****  *  Store into program space.
 337:src/storage.c ****  */
 338:src/storage.c **** void stoprog( opcode c ) {
 339:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 340:src/storage.c **** 	int i;
 341:src/storage.c **** 	unsigned int pc = state_pc();
 342:src/storage.c **** 
 343:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 344:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 345:src/storage.c **** 
 346:src/storage.c **** 	if ( !isRAM( pc ) ) {
 347:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 348:src/storage.c **** 		return;
 349:src/storage.c **** 	}
 350:src/storage.c **** 	clrretstk();
 351:src/storage.c **** 	xeq_init_contexts();
 352:src/storage.c **** 	if ( ProgFree < off ) {
 353:src/storage.c **** 		return;
 354:src/storage.c **** 	}
 355:src/storage.c **** 	ProgSize += off;
 356:src/storage.c **** 	ProgEnd += off;
 357:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 358:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 359:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 360:src/storage.c **** 	}
 361:src/storage.c **** 	if (isDBL(c))
 362:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 363:src/storage.c **** 	Prog_1[pc] = c;
 364:src/storage.c **** 	State.pc = pc;
 365:src/storage.c **** }
 366:src/storage.c **** 
 367:src/storage.c **** 
 368:src/storage.c **** /*
 369:src/storage.c ****  *  Delete the current step in the program
 370:src/storage.c ****  */
 371:src/storage.c **** void delprog( void )
ARM GAS  /tmp/cc1iUxzj.s 			page 14


 372:src/storage.c **** {
 373:src/storage.c **** 	int i;
 374:src/storage.c **** 	const unsigned int pc = state_pc();
 375:src/storage.c **** 	int off;
 376:src/storage.c **** 
 377:src/storage.c **** 	if ( check_delete_prog( pc ) )
 378:src/storage.c **** 		return;
 379:src/storage.c **** 	if ( pc == 0 )
 380:src/storage.c **** 		return;
 381:src/storage.c **** 
 382:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 383:src/storage.c **** 	ProgSize -= off;
 384:src/storage.c **** 	ProgEnd -= off;
 385:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 386:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 387:src/storage.c **** 	decpc();
 388:src/storage.c **** }
 389:src/storage.c **** 
 390:src/storage.c **** 
 391:src/storage.c **** /*
 392:src/storage.c ****  *  Helper to append a program in RAM.
 393:src/storage.c ****  *  Returns non zero in case of an error.
 394:src/storage.c ****  */
 395:src/storage.c **** int append_program( const s_opcode *source, int length )
 396:src/storage.c **** {
 397:src/storage.c **** 	unsigned short pc;
 398:src/storage.c **** 	int space_needed = length - ProgFree;
 399:src/storage.c **** 
 400:src/storage.c **** 	if ( ProgSize == 1 ) {
 401:src/storage.c **** 		/*
 402:src/storage.c **** 		 *  Only the default END statement is present
 403:src/storage.c **** 		 */
 404:src/storage.c **** 		--space_needed;
 405:src/storage.c **** 		--ProgSize;
 406:src/storage.c **** 	}
 407:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 408:src/storage.c **** 		return report_err( ERR_INVALID );
 409:src/storage.c **** 	}
 410:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 411:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 412:src/storage.c **** 	}
 413:src/storage.c **** 
 414:src/storage.c **** 	/*
 415:src/storage.c **** 	 *  Make room if needed
 416:src/storage.c **** 	 */
 417:src/storage.c **** 	clrretstk();
 418:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 419:src/storage.c **** 		space_needed -= SizeStatRegs;
 420:src/storage.c **** 		sigmaDeallocate();
 421:src/storage.c **** 	}
 422:src/storage.c **** 	if ( space_needed > 0 ) {
 423:src/storage.c **** 		int regs;
 424:src/storage.c **** 		if (is_dblmode())
 425:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 426:src/storage.c **** 		else
 427:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 428:src/storage.c **** 
ARM GAS  /tmp/cc1iUxzj.s 			page 15


 429:src/storage.c **** 		if ( regs < 0 ) {
 430:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 431:src/storage.c **** 		}
 432:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 433:src/storage.c **** 	}
 434:src/storage.c **** 	/*
 435:src/storage.c **** 	 *  Append data
 436:src/storage.c **** 	 */
 437:src/storage.c **** 	pc = ProgSize + 1;
 438:src/storage.c **** 	ProgSize += length;
 439:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 440:src/storage.c **** 	set_pc( pc );
 441:src/storage.c **** 	return 0;
 442:src/storage.c **** }
 443:src/storage.c **** 
 444:src/storage.c **** 
 445:src/storage.c **** #ifdef REALBUILD
 446:src/storage.c **** /*
 447:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 448:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 449:src/storage.c ****  *  IAP feature in ROM instead
 450:src/storage.c ****  */
 451:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 452:src/storage.c **** 
 453:src/storage.c **** /*
 454:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 455:src/storage.c ****  *  Returns zero if OK or non zero on error.
 456:src/storage.c ****  */
 457:src/storage.c **** static int flash_command( unsigned int cmd )
 458:src/storage.c **** {
 459:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 460:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 461:src/storage.c **** }
 462:src/storage.c **** 
 463:src/storage.c **** /*
 464:src/storage.c ****  *  Program the flash starting at destination.
 465:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 466:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 467:src/storage.c ****  */
 468:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 469:src/storage.c **** {
 470:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 471:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 472:src/storage.c **** 
 473:src/storage.c **** 	lock();  // No interrupts, please!
 474:src/storage.c **** 
 475:src/storage.c **** 	while ( count-- > 0 ) {
 476:src/storage.c **** 		/*
 477:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 478:src/storage.c **** 		 */
 479:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 480:src/storage.c **** 		int i;
 481:src/storage.c **** 
 482:src/storage.c **** 		/*
 483:src/storage.c **** 		 *  Copy the source to the flash write buffer
 484:src/storage.c **** 		 */
 485:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
ARM GAS  /tmp/cc1iUxzj.s 			page 16


 486:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 487:src/storage.c **** 		}
 488:src/storage.c **** 
 489:src/storage.c **** 		/*
 490:src/storage.c **** 		 *  Command the controller to erase and write the page.
 491:src/storage.c **** 		 */
 492:src/storage.c **** 		if ( flash_command( cmd ) ) {
 493:src/storage.c **** 			report_err( ERR_IO );
 494:src/storage.c **** 			break;
 495:src/storage.c **** 		}
 496:src/storage.c **** 	}
 497:src/storage.c **** 	unlock();
 498:src/storage.c **** 	return Error != 0;
 499:src/storage.c **** }
 500:src/storage.c **** 
 501:src/storage.c **** 
 502:src/storage.c **** /*
 503:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 504:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 505:src/storage.c ****  */
 506:src/storage.c **** void sam_ba_boot(void)
 507:src/storage.c **** {
 508:src/storage.c **** 	/*
 509:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 510:src/storage.c **** 	 */
 511:src/storage.c **** 	lock();
 512:src/storage.c **** 	flash_command( 0x5A00010C );
 513:src/storage.c **** 	SUPC_Shutdown();
 514:src/storage.c **** }
 515:src/storage.c **** 
 516:src/storage.c **** 
 517:src/storage.c **** #else // below here, it's not REALBUILD
 518:src/storage.c **** 
 519:src/storage.c **** /*
 520:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34c-backup.dat
 521:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 522:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 523:src/storage.c ****  */
 524:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 525:src/storage.c **** extern char* get_region_path(int region);
 526:src/storage.c **** #else
 527:src/storage.c **** static char* get_region_path(int region)
 528:src/storage.c **** {
 529:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 530:src/storage.c **** }
 531:src/storage.c **** #endif
 532:src/storage.c **** 
 533:src/storage.c **** #ifdef DM42
 534:src/storage.c **** 
 535:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 536:src/storage.c **** {
 315              		.loc 1 536 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 537:src/storage.c ****   char *name;
 319              		.loc 1 537 3 view .LVU84
ARM GAS  /tmp/cc1iUxzj.s 			page 17


 538:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 538 3 view .LVU85
 536:src/storage.c ****   char *name;
 321              		.loc 1 536 1 is_stmt 0 view .LVU86
 322 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 539:src/storage.c ****   int offset;
 540:src/storage.c ****   uint x=0;
 541:src/storage.c **** 
 542:src/storage.c ****   /*
 543:src/storage.c ****    *  Copy the source to the destination memory
 544:src/storage.c ****    */
 545:src/storage.c **** 
 546:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 332              		.loc 1 546 3 view .LVU87
 333 0004 1702     		lsls	r7, r2, #8
 536:src/storage.c ****   char *name;
 334              		.loc 1 536 1 view .LVU88
 335 0006 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 40
 540:src/storage.c **** 
 337              		.loc 1 540 8 view .LVU89
 338 0008 0023     		movs	r3, #0
 339              		.loc 1 546 3 view .LVU90
 340 000a 3A46     		mov	r2, r7
 341              	.LVL29:
 536:src/storage.c ****   char *name;
 342              		.loc 1 536 1 view .LVU91
 343 000c 0546     		mov	r5, r0
 344              	.LVL30:
 539:src/storage.c ****   int offset;
 345              		.loc 1 539 3 is_stmt 1 view .LVU92
 540:src/storage.c **** 
 346              		.loc 1 540 3 view .LVU93
 540:src/storage.c **** 
 347              		.loc 1 540 8 is_stmt 0 view .LVU94
 348 000e 0193     		str	r3, [sp, #4]
 349              		.loc 1 546 3 is_stmt 1 view .LVU95
 350 0010 FFF7FEFF 		bl	xcopy
 351              	.LVL31:
 547:src/storage.c **** 
 548:src/storage.c ****   /*
 549:src/storage.c ****    *  Update the correct region file
 550:src/storage.c ****    */
 551:src/storage.c **** 
 552:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 352              		.loc 1 552 3 view .LVU96
 353              		.loc 1 552 16 is_stmt 0 view .LVU97
 354 0014 2F4B     		ldr	r3, .L56
ARM GAS  /tmp/cc1iUxzj.s 			page 18


 355 0016 1E68     		ldr	r6, [r3]
 356              		.loc 1 552 6 view .LVU98
 357 0018 AE42     		cmp	r6, r5
 358 001a 03D8     		bhi	.L37
 359              		.loc 1 552 70 discriminator 1 view .LVU99
 360 001c 06F50063 		add	r3, r6, #2048
 361              		.loc 1 552 38 discriminator 1 view .LVU100
 362 0020 9D42     		cmp	r5, r3
 363 0022 2FD3     		bcc	.L54
 364              	.L37:
 553:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 554:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 555:src/storage.c ****   }
 556:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 365              		.loc 1 556 8 is_stmt 1 view .LVU101
 366              		.loc 1 556 21 is_stmt 0 view .LVU102
 367 0024 2C4B     		ldr	r3, .L56+4
 368 0026 1E68     		ldr	r6, [r3]
 369              		.loc 1 556 11 view .LVU103
 370 0028 AE42     		cmp	r6, r5
 371 002a 2FD8     		bhi	.L39
 372              		.loc 1 556 71 discriminator 1 view .LVU104
 373 002c 06F58043 		add	r3, r6, #16384
 374              		.loc 1 556 41 discriminator 1 view .LVU105
 375 0030 9D42     		cmp	r5, r3
 376 0032 2BD2     		bcs	.L39
 557:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 377              		.loc 1 557 5 is_stmt 1 view .LVU106
 378              	.LVL32:
 379              	.LBB44:
 380              	.LBI44:
 527:src/storage.c **** {
 381              		.loc 1 527 14 view .LVU107
 382              	.LBE44:
 529:src/storage.c **** }
 383              		.loc 1 529 2 view .LVU108
 558:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 558 5 view .LVU109
 557:src/storage.c ****     offset = dest - (char *) &UserFlash;
 385              		.loc 1 557 12 is_stmt 0 view .LVU110
 386 0034 DFF8C490 		ldr	r9, .L56+40
 387              		.loc 1 558 12 view .LVU111
 388 0038 AE1B     		subs	r6, r5, r6
 389              	.LVL33:
 390              	.L38:
 559:src/storage.c ****   }
 560:src/storage.c ****   else {
 561:src/storage.c ****     // Bad address
 562:src/storage.c ****     report_err( ERR_ILLEGAL );
 563:src/storage.c ****     return 1;
 564:src/storage.c ****   }
 565:src/storage.c ****   FRESULT f;
 391              		.loc 1 565 3 is_stmt 1 view .LVU112
 566:src/storage.c **** 
 567:src/storage.c ****   f = check_create_wp34sdir ();
 392              		.loc 1 567 3 view .LVU113
 393              	.LBB45:
ARM GAS  /tmp/cc1iUxzj.s 			page 19


 394              	.LBI45:
 568:src/storage.c ****   if ( f != FR_OK ) {
 569:src/storage.c ****     return f;
 570:src/storage.c ****   }
 571:src/storage.c ****   sys_disk_write_enable(1);
 572:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 573:src/storage.c ****   if ( f != FR_OK ) {
 574:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 575:src/storage.c ****   }
 576:src/storage.c ****   if ( f != FR_OK ) {
 577:src/storage.c ****     sys_disk_write_enable(0);
 578:src/storage.c ****     return 1;
 579:src/storage.c ****   }
 580:src/storage.c ****   f_lseek( FPT, offset );
 581:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 582:src/storage.c ****   if (f != FR_OK) {
 583:src/storage.c ****     f_close( FPT );
 584:src/storage.c ****     sys_disk_write_enable(0);
 585:src/storage.c ****     return 1;
 586:src/storage.c ****   }
 587:src/storage.c ****   f = f_close( FPT );
 588:src/storage.c ****   if ( f != FR_OK ) {
 589:src/storage.c ****     sys_disk_write_enable(0);
 590:src/storage.c ****     return 1;
 591:src/storage.c ****   }
 592:src/storage.c ****   sys_disk_write_enable(0);
 593:src/storage.c ****   return 0;
 594:src/storage.c **** }
 595:src/storage.c **** 
 596:src/storage.c **** int check_create_wp34sdir(void) {
 395              		.loc 1 596 5 view .LVU114
 396              	.LBB46:
 597:src/storage.c ****   FRESULT f;
 397              		.loc 1 597 3 view .LVU115
 598:src/storage.c ****   sys_disk_write_enable(1);
 398              		.loc 1 598 3 view .LVU116
 399 003a DFF8AC80 		ldr	r8, .L56+20
 400 003e 0120     		movs	r0, #1
 401 0040 C047     		blx	r8
 402              	.LVL34:
 599:src/storage.c ****   f = check_create_dir ("/wp34s");
 403              		.loc 1 599 3 view .LVU117
 404              		.loc 1 599 7 is_stmt 0 view .LVU118
 405 0042 264B     		ldr	r3, .L56+8
 406 0044 2648     		ldr	r0, .L56+12
 407 0046 9847     		blx	r3
 408              	.LVL35:
 409 0048 0446     		mov	r4, r0
 410              	.LVL36:
 600:src/storage.c ****   sys_disk_write_enable(0);
 411              		.loc 1 600 3 is_stmt 1 view .LVU119
 412 004a 0020     		movs	r0, #0
 413 004c C047     		blx	r8
 414              	.LVL37:
 601:src/storage.c ****   return f;
 415              		.loc 1 601 3 view .LVU120
 416              		.loc 1 601 3 is_stmt 0 view .LVU121
ARM GAS  /tmp/cc1iUxzj.s 			page 20


 417              	.LBE46:
 418              	.LBE45:
 568:src/storage.c ****     return f;
 419              		.loc 1 568 3 is_stmt 1 view .LVU122
 568:src/storage.c ****     return f;
 420              		.loc 1 568 6 is_stmt 0 view .LVU123
 421 004e 14F0FF04 		ands	r4, r4, #255
 422              	.LVL38:
 568:src/storage.c ****     return f;
 423              		.loc 1 568 6 view .LVU124
 424 0052 36D1     		bne	.L53
 571:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 425              		.loc 1 571 3 is_stmt 1 view .LVU125
 572:src/storage.c ****   if ( f != FR_OK ) {
 426              		.loc 1 572 7 is_stmt 0 view .LVU126
 427 0054 DFF894A0 		ldr	r10, .L56+24
 428 0058 224C     		ldr	r4, .L56+16
 571:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 429              		.loc 1 571 3 view .LVU127
 430 005a 0120     		movs	r0, #1
 431 005c C047     		blx	r8
 432              	.LVL39:
 572:src/storage.c ****   if ( f != FR_OK ) {
 433              		.loc 1 572 3 is_stmt 1 view .LVU128
 572:src/storage.c ****   if ( f != FR_OK ) {
 434              		.loc 1 572 7 is_stmt 0 view .LVU129
 435 005e DAF80400 		ldr	r0, [r10, #4]
 436 0062 0322     		movs	r2, #3
 437 0064 4946     		mov	r1, r9
 438 0066 A047     		blx	r4
 439              	.LVL40:
 573:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 440              		.loc 1 573 3 is_stmt 1 view .LVU130
 573:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 441              		.loc 1 573 6 is_stmt 0 view .LVU131
 442 0068 B8B1     		cbz	r0, .L42
 574:src/storage.c ****   }
 443              		.loc 1 574 5 is_stmt 1 view .LVU132
 574:src/storage.c ****   }
 444              		.loc 1 574 9 is_stmt 0 view .LVU133
 445 006a DAF80400 		ldr	r0, [r10, #4]
 446              	.LVL41:
 574:src/storage.c ****   }
 447              		.loc 1 574 9 view .LVU134
 448 006e 4946     		mov	r1, r9
 449 0070 0B22     		movs	r2, #11
 450 0072 A047     		blx	r4
 451              	.LVL42:
 576:src/storage.c ****     sys_disk_write_enable(0);
 452              		.loc 1 576 3 is_stmt 1 view .LVU135
 576:src/storage.c ****     sys_disk_write_enable(0);
 453              		.loc 1 576 6 is_stmt 0 view .LVU136
 454 0074 88B1     		cbz	r0, .L42
 455              	.LVL43:
 456              	.L52:
 584:src/storage.c ****     return 1;
 457              		.loc 1 584 5 is_stmt 1 view .LVU137
ARM GAS  /tmp/cc1iUxzj.s 			page 21


 458 0076 1C4B     		ldr	r3, .L56+20
 459 0078 0020     		movs	r0, #0
 460 007a 9847     		blx	r3
 461              	.LVL44:
 585:src/storage.c ****   }
 462              		.loc 1 585 5 view .LVU138
 585:src/storage.c ****   }
 463              		.loc 1 585 12 is_stmt 0 view .LVU139
 464 007c 0120     		movs	r0, #1
 594:src/storage.c **** 
 465              		.loc 1 594 1 view .LVU140
 466 007e 02B0     		add	sp, sp, #8
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 32
 469              		@ sp needed
 470 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 471              	.LVL45:
 472              	.L54:
 473              		.cfi_restore_state
 553:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 474              		.loc 1 553 5 is_stmt 1 view .LVU141
 475              	.LBB47:
 476              	.LBI47:
 527:src/storage.c **** {
 477              		.loc 1 527 14 view .LVU142
 478              	.LBE47:
 529:src/storage.c **** }
 479              		.loc 1 529 2 view .LVU143
 554:src/storage.c ****   }
 480              		.loc 1 554 5 view .LVU144
 553:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 481              		.loc 1 553 12 is_stmt 0 view .LVU145
 482 0084 DFF87890 		ldr	r9, .L56+44
 554:src/storage.c ****   }
 483              		.loc 1 554 12 view .LVU146
 484 0088 AE1B     		subs	r6, r5, r6
 485              	.LVL46:
 554:src/storage.c ****   }
 486              		.loc 1 554 12 view .LVU147
 487 008a D6E7     		b	.L38
 488              	.LVL47:
 489              	.L39:
 562:src/storage.c ****     return 1;
 490              		.loc 1 562 5 is_stmt 1 view .LVU148
 491 008c 0720     		movs	r0, #7
 492 008e FFF7FEFF 		bl	report_err
 493              	.LVL48:
 563:src/storage.c ****   }
 494              		.loc 1 563 5 view .LVU149
 563:src/storage.c ****   }
 495              		.loc 1 563 12 is_stmt 0 view .LVU150
 496 0092 0120     		movs	r0, #1
 594:src/storage.c **** 
 497              		.loc 1 594 1 view .LVU151
 498 0094 02B0     		add	sp, sp, #8
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cc1iUxzj.s 			page 22


 501              		@ sp needed
 502 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 503              	.LVL49:
 504              	.L42:
 505              		.cfi_restore_state
 580:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 506              		.loc 1 580 3 is_stmt 1 view .LVU152
 507 009a 144C     		ldr	r4, .L56+24
 508 009c 144B     		ldr	r3, .L56+28
 509 009e 6068     		ldr	r0, [r4, #4]
 510 00a0 3146     		mov	r1, r6
 511 00a2 9847     		blx	r3
 512              	.LVL50:
 581:src/storage.c ****   if (f != FR_OK) {
 513              		.loc 1 581 3 view .LVU153
 581:src/storage.c ****   if (f != FR_OK) {
 514              		.loc 1 581 7 is_stmt 0 view .LVU154
 515 00a4 2946     		mov	r1, r5
 516 00a6 6068     		ldr	r0, [r4, #4]
 517 00a8 124D     		ldr	r5, .L56+32
 518              	.LVL51:
 581:src/storage.c ****   if (f != FR_OK) {
 519              		.loc 1 581 7 view .LVU155
 520 00aa 3A46     		mov	r2, r7
 521 00ac 01AB     		add	r3, sp, #4
 522 00ae A847     		blx	r5
 523              	.LVL52:
 582:src/storage.c ****     f_close( FPT );
 524              		.loc 1 582 3 is_stmt 1 view .LVU156
 582:src/storage.c ****     f_close( FPT );
 525              		.loc 1 582 6 is_stmt 0 view .LVU157
 526 00b0 58B9     		cbnz	r0, .L55
 587:src/storage.c ****   if ( f != FR_OK ) {
 527              		.loc 1 587 3 is_stmt 1 view .LVU158
 587:src/storage.c ****   if ( f != FR_OK ) {
 528              		.loc 1 587 7 is_stmt 0 view .LVU159
 529 00b2 6068     		ldr	r0, [r4, #4]
 530              	.LVL53:
 587:src/storage.c ****   if ( f != FR_OK ) {
 531              		.loc 1 587 7 view .LVU160
 532 00b4 104B     		ldr	r3, .L56+36
 533 00b6 9847     		blx	r3
 534              	.LVL54:
 588:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 588 3 is_stmt 1 view .LVU161
 588:src/storage.c ****     sys_disk_write_enable(0);
 536              		.loc 1 588 6 is_stmt 0 view .LVU162
 537 00b8 0446     		mov	r4, r0
 538 00ba 0028     		cmp	r0, #0
 539 00bc DBD1     		bne	.L52
 592:src/storage.c ****   return 0;
 540              		.loc 1 592 3 is_stmt 1 view .LVU163
 541 00be 0A4B     		ldr	r3, .L56+20
 542 00c0 9847     		blx	r3
 543              	.LVL55:
 544              	.L53:
 593:src/storage.c **** }
ARM GAS  /tmp/cc1iUxzj.s 			page 23


 545              		.loc 1 593 3 view .LVU164
 593:src/storage.c **** }
 546              		.loc 1 593 10 is_stmt 0 view .LVU165
 547 00c2 2046     		mov	r0, r4
 594:src/storage.c **** 
 548              		.loc 1 594 1 view .LVU166
 549 00c4 02B0     		add	sp, sp, #8
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 32
 552              		@ sp needed
 553 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 554              	.LVL56:
 555              	.L55:
 556              		.cfi_restore_state
 583:src/storage.c ****     sys_disk_write_enable(0);
 557              		.loc 1 583 5 is_stmt 1 view .LVU167
 558 00ca 6068     		ldr	r0, [r4, #4]
 559              	.LVL57:
 583:src/storage.c ****     sys_disk_write_enable(0);
 560              		.loc 1 583 5 is_stmt 0 view .LVU168
 561 00cc 0A4B     		ldr	r3, .L56+36
 562 00ce 9847     		blx	r3
 563              	.LVL58:
 564 00d0 D1E7     		b	.L52
 565              	.L57:
 566 00d2 00BF     		.align	2
 567              	.L56:
 568 00d4 00000000 		.word	backup_ram
 569 00d8 00000000 		.word	library_ram
 570 00dc D1030008 		.word	134218705
 571 00e0 2C000000 		.word	.LC2
 572 00e4 35040008 		.word	134218805
 573 00e8 E1030008 		.word	134218721
 574 00ec 00200010 		.word	268443648
 575 00f0 45040008 		.word	134218821
 576 00f4 41040008 		.word	134218817
 577 00f8 39040008 		.word	134218809
 578 00fc 18000000 		.word	.LC1
 579 0100 00000000 		.word	.LC0
 580              		.cfi_endproc
 581              	.LFE20:
 583              		.section	.text.flash_append,"ax",%progbits
 584              		.align	1
 585              		.p2align 2,,3
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
 591              	flash_append:
 592              	.LVL59:
 593              	.LFB23:
 602:src/storage.c **** }
 603:src/storage.c **** 
 604:src/storage.c **** #else //ifdef DM42 false
 605:src/storage.c **** 
 606:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 607:src/storage.c **** {
ARM GAS  /tmp/cc1iUxzj.s 			page 24


 608:src/storage.c ****   char *name;
 609:src/storage.c ****   char *dest = (char *) destination;
 610:src/storage.c ****   FILE *f = NULL;
 611:src/storage.c ****   int offset;
 612:src/storage.c **** 
 613:src/storage.c ****   /*
 614:src/storage.c ****    *  Copy the source to the destination memory
 615:src/storage.c ****    */
 616:src/storage.c **** 
 617:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 618:src/storage.c **** 
 619:src/storage.c ****   /*
 620:src/storage.c ****    *  Update the correct region file
 621:src/storage.c ****    */
 622:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 623:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 624:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 625:src/storage.c ****   }
 626:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 627:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 628:src/storage.c ****     offset = dest - (char *) &UserFlash;
 629:src/storage.c ****   }
 630:src/storage.c ****   else {
 631:src/storage.c ****     // Bad address
 632:src/storage.c ****     report_err( ERR_ILLEGAL );
 633:src/storage.c ****     return 1;
 634:src/storage.c ****   }
 635:src/storage.c **** 
 636:src/storage.c ****   f = fopen( name, "rb+" );
 637:src/storage.c ****   if ( f == NULL ) {
 638:src/storage.c ****     f = fopen( name, "wb+" );
 639:src/storage.c ****   }
 640:src/storage.c ****   if ( f == NULL ) {
 641:src/storage.c ****     report_err( ERR_IO );
 642:src/storage.c ****     return 1;
 643:src/storage.c ****   }
 644:src/storage.c ****   fseek( f, offset, SEEK_SET );
 645:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 646:src/storage.c ****     fclose( f );
 647:src/storage.c ****     report_err( ERR_IO );
 648:src/storage.c ****     return 1;
 649:src/storage.c ****   }
 650:src/storage.c ****   fclose( f );
 651:src/storage.c ****  return 0;
 652:src/storage.c **** }
 653:src/storage.c ****   
 654:src/storage.c **** #endif //ifdef DM42
 655:src/storage.c **** 
 656:src/storage.c **** 
 657:src/storage.c **** #endif //ifdef REALBUILD
 658:src/storage.c **** 
 659:src/storage.c **** 
 660:src/storage.c **** /*
 661:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 662:src/storage.c ****  */
 663:src/storage.c **** void init_library( void )
 664:src/storage.c **** {
ARM GAS  /tmp/cc1iUxzj.s 			page 25


 665:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 666:src/storage.c **** 	  struct {
 667:src/storage.c **** 			unsigned short crc;
 668:src/storage.c **** 			unsigned short size;
 669:src/storage.c **** 			s_opcode prog[ 126 ];
 670:src/storage.c **** 		} lib;
 671:src/storage.c **** 		lib.size = 0;
 672:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 673:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 674:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 675:src/storage.c **** 	}
 676:src/storage.c **** }
 677:src/storage.c **** 
 678:src/storage.c **** 
 679:src/storage.c **** /*
 680:src/storage.c ****  *  Add data at the end of user flash memory.
 681:src/storage.c ****  *  Update crc and counter when done.
 682:src/storage.c ****  *  All sizes are given in steps.
 683:src/storage.c ****  */
 684:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 685:src/storage.c **** {
 594              		.loc 1 685 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 256
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 686:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 598              		.loc 1 686 3 view .LVU170
 685:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 599              		.loc 1 685 1 is_stmt 0 view .LVU171
 600 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 601              		.cfi_def_cfa_offset 36
 602              		.cfi_offset 4, -36
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 6, -28
 605              		.cfi_offset 7, -24
 606              		.cfi_offset 8, -20
 607              		.cfi_offset 9, -16
 608              		.cfi_offset 10, -12
 609              		.cfi_offset 11, -8
 610              		.cfi_offset 14, -4
 611              		.loc 1 686 27 view .LVU172
 612 0004 254F     		ldr	r7, .L70
 613 0006 3C68     		ldr	r4, [r7]
 614 0008 251D     		adds	r5, r4, #4
 615              		.loc 1 686 9 view .LVU173
 616 000a 05EB4006 		add	r6, r5, r0, lsl #1
 617              	.LVL60:
 687:src/storage.c ****   char *src = (char *) source;
 618              		.loc 1 687 3 is_stmt 1 view .LVU174
 688:src/storage.c **** #ifdef REALBUILD
 689:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 690:src/storage.c **** #else
 691:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
 619              		.loc 1 691 31 is_stmt 0 view .LVU175
 620 000e 341B     		subs	r4, r6, r4
 692:src/storage.c **** #endif
 693:src/storage.c ****   char buffer[ PAGE_SIZE ];
ARM GAS  /tmp/cc1iUxzj.s 			page 26


 694:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 695:src/storage.c ****   count <<= 1;
 696:src/storage.c **** 
 697:src/storage.c ****   if ( offset_in_page != 0 ) {
 621              		.loc 1 697 6 view .LVU176
 622 0010 14F0FF04 		ands	r4, r4, #255
 685:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 623              		.loc 1 685 1 view .LVU177
 624 0014 C1B0     		sub	sp, sp, #260
 625              		.cfi_def_cfa_offset 296
 685:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 626              		.loc 1 685 1 view .LVU178
 627 0016 8846     		mov	r8, r1
 628              	.LVL61:
 691:src/storage.c **** #endif
 629              		.loc 1 691 3 is_stmt 1 view .LVU179
 693:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 630              		.loc 1 693 3 view .LVU180
 694:src/storage.c ****   count <<= 1;
 631              		.loc 1 694 3 view .LVU181
 695:src/storage.c **** 
 632              		.loc 1 695 3 view .LVU182
 695:src/storage.c **** 
 633              		.loc 1 695 9 is_stmt 0 view .LVU183
 634 0018 4FEA4205 		lsl	r5, r2, #1
 635              	.LVL62:
 636              		.loc 1 697 3 is_stmt 1 view .LVU184
 685:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 637              		.loc 1 685 1 is_stmt 0 view .LVU185
 638 001c 9946     		mov	r9, r3
 639              		.loc 1 697 6 view .LVU186
 640 001e 21D1     		bne	.L69
 641              	.LVL63:
 642              	.L59:
 698:src/storage.c ****     /*
 699:src/storage.c ****      *  We are not on a page boundary
 700:src/storage.c ****      *  Assemble a buffer from existing and new data
 701:src/storage.c ****      */
 702:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 703:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 704:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 705:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 706:src/storage.c ****       return 1;
 707:src/storage.c ****     }
 708:src/storage.c ****     src += bytes;
 709:src/storage.c ****     dest += bytes;
 710:src/storage.c ****     count -= bytes;
 711:src/storage.c ****   }
 712:src/storage.c **** 
 713:src/storage.c ****   if ( count > 0 ) {
 643              		.loc 1 713 3 is_stmt 1 view .LVU187
 644              		.loc 1 713 6 is_stmt 0 view .LVU188
 645 0020 002D     		cmp	r5, #0
 646 0022 07DD     		ble	.L64
 714:src/storage.c ****     /*
 715:src/storage.c ****      *  Move multiples of complete pages
 716:src/storage.c ****      */
ARM GAS  /tmp/cc1iUxzj.s 			page 27


 717:src/storage.c **** #ifdef DM42
 718:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
 647              		.loc 1 718 5 is_stmt 1 view .LVU189
 648              		.loc 1 718 21 is_stmt 0 view .LVU190
 649 0024 05F1FF02 		add	r2, r5, #255
 650              	.LVL64:
 719:src/storage.c **** #else
 720:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 721:src/storage.c **** #endif
 722:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 651              		.loc 1 722 5 is_stmt 1 view .LVU191
 652              		.loc 1 722 10 is_stmt 0 view .LVU192
 653 0028 1212     		asrs	r2, r2, #8
 654              	.LVL65:
 655              		.loc 1 722 10 view .LVU193
 656 002a 4146     		mov	r1, r8
 657 002c 3046     		mov	r0, r6
 658 002e FFF7FEFF 		bl	program_flash
 659              	.LVL66:
 660              		.loc 1 722 8 view .LVU194
 661 0032 98B9     		cbnz	r0, .L63
 662              	.LVL67:
 663              	.L64:
 723:src/storage.c ****       return 1;
 724:src/storage.c ****     }
 725:src/storage.c ****   }
 726:src/storage.c **** 
 727:src/storage.c ****   /*
 728:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 729:src/storage.c ****    */
 730:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 664              		.loc 1 730 3 is_stmt 1 view .LVU195
 665 0034 3968     		ldr	r1, [r7]
 666 0036 4FF48072 		mov	r2, #256
 667 003a 6846     		mov	r0, sp
 668 003c FFF7FEFF 		bl	xcopy
 669              	.LVL68:
 731:src/storage.c ****   fr->size = size;
 670              		.loc 1 731 3 view .LVU196
 732:src/storage.c ****   checksum_region( &UserFlash, fr );
 671              		.loc 1 732 3 is_stmt 0 view .LVU197
 672 0040 6946     		mov	r1, sp
 673 0042 3868     		ldr	r0, [r7]
 731:src/storage.c ****   fr->size = size;
 674              		.loc 1 731 12 view .LVU198
 675 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 676              		.loc 1 732 3 is_stmt 1 view .LVU199
 677 0048 FFF7FEFF 		bl	checksum_region
 678              	.LVL69:
 733:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
 679              		.loc 1 733 3 view .LVU200
 680              		.loc 1 733 10 is_stmt 0 view .LVU201
 681 004c 3868     		ldr	r0, [r7]
 682 004e 6946     		mov	r1, sp
 683 0050 0122     		movs	r2, #1
 684 0052 FFF7FEFF 		bl	program_flash
 685              	.LVL70:
ARM GAS  /tmp/cc1iUxzj.s 			page 28


 734:src/storage.c **** }
 686              		.loc 1 734 1 view .LVU202
 687 0056 41B0     		add	sp, sp, #260
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 36
 690              	.LVL71:
 691              		.loc 1 734 1 view .LVU203
 692              		@ sp needed
 693 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              	.LVL72:
 695              	.L63:
 696              		.cfi_restore_state
 697              	.LBB48:
 706:src/storage.c ****     }
 698              		.loc 1 706 14 view .LVU204
 699 005c 0120     		movs	r0, #1
 700              	.LBE48:
 701              		.loc 1 734 1 view .LVU205
 702 005e 41B0     		add	sp, sp, #260
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              	.LVL73:
 706              		.loc 1 734 1 view .LVU206
 707              		@ sp needed
 708 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 709              	.LVL74:
 710              	.L69:
 711              		.cfi_restore_state
 712              	.LBB49:
 702:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713              		.loc 1 702 5 is_stmt 1 view .LVU207
 703:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714              		.loc 1 703 25 is_stmt 0 view .LVU208
 715 0064 A6EB040B 		sub	fp, r6, r4
 703:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 716              		.loc 1 703 5 view .LVU209
 717 0068 5946     		mov	r1, fp
 718              	.LVL75:
 703:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 719              		.loc 1 703 5 view .LVU210
 720 006a 2246     		mov	r2, r4
 721 006c 6846     		mov	r0, sp
 722              	.LVL76:
 702:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 723              		.loc 1 702 15 view .LVU211
 724 006e C4F5807A 		rsb	r10, r4, #256
 725              	.LVL77:
 703:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 726              		.loc 1 703 5 is_stmt 1 view .LVU212
 727 0072 FFF7FEFF 		bl	xcopy
 728              	.LVL78:
 704:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 729              		.loc 1 704 5 view .LVU213
 730 0076 5246     		mov	r2, r10
 731 0078 4146     		mov	r1, r8
 732 007a 0DEB0400 		add	r0, sp, r4
 733 007e FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/cc1iUxzj.s 			page 29


 734              	.LVL79:
 705:src/storage.c ****       return 1;
 735              		.loc 1 705 5 view .LVU214
 705:src/storage.c ****       return 1;
 736              		.loc 1 705 10 is_stmt 0 view .LVU215
 737 0082 6946     		mov	r1, sp
 738 0084 5846     		mov	r0, fp
 739 0086 0122     		movs	r2, #1
 740 0088 FFF7FEFF 		bl	program_flash
 741              	.LVL80:
 705:src/storage.c ****       return 1;
 742              		.loc 1 705 8 view .LVU216
 743 008c 0028     		cmp	r0, #0
 744 008e E5D1     		bne	.L63
 708:src/storage.c ****     dest += bytes;
 745              		.loc 1 708 5 is_stmt 1 view .LVU217
 708:src/storage.c ****     dest += bytes;
 746              		.loc 1 708 9 is_stmt 0 view .LVU218
 747 0090 D044     		add	r8, r8, r10
 748              	.LVL81:
 709:src/storage.c ****     count -= bytes;
 749              		.loc 1 709 5 is_stmt 1 view .LVU219
 709:src/storage.c ****     count -= bytes;
 750              		.loc 1 709 10 is_stmt 0 view .LVU220
 751 0092 5644     		add	r6, r6, r10
 752              	.LVL82:
 710:src/storage.c ****   }
 753              		.loc 1 710 5 is_stmt 1 view .LVU221
 710:src/storage.c ****   }
 754              		.loc 1 710 11 is_stmt 0 view .LVU222
 755 0094 A5EB0A05 		sub	r5, r5, r10
 756              	.LVL83:
 710:src/storage.c ****   }
 757              		.loc 1 710 11 view .LVU223
 758 0098 C2E7     		b	.L59
 759              	.L71:
 760 009a 00BF     		.align	2
 761              	.L70:
 762 009c 00000000 		.word	library_ram
 763              	.LBE49:
 764              		.cfi_endproc
 765              	.LFE23:
 767              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 768              		.align	2
 769              	.LC3:
 770 0000 64617461 		.ascii	"data=3?\000"
 770      3D333F00 
 771              		.align	2
 772              	.LC4:
 773 0008 46696C65 		.ascii	"File err\000"
 773      20657272 
 773      00
 774              		.section	.text.open_selected_file,"ax",%progbits
 775              		.align	1
 776              		.p2align 2,,3
 777              		.global	open_selected_file
 778              		.syntax unified
ARM GAS  /tmp/cc1iUxzj.s 			page 30


 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	open_selected_file:
 784              	.LVL84:
 785              	.LFB38:
 735:src/storage.c **** 
 736:src/storage.c **** 
 737:src/storage.c **** /*
 738:src/storage.c ****  *  Remove steps from user flash memory.
 739:src/storage.c ****  */
 740:src/storage.c **** int flash_remove( int step_no, int count )
 741:src/storage.c **** {
 742:src/storage.c **** 	const int size = UserFlash.size - count;
 743:src/storage.c **** 	step_no = offsetLIB( step_no );
 744:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 745:src/storage.c **** 			     size - step_no, size );
 746:src/storage.c **** }
 747:src/storage.c **** 
 748:src/storage.c **** 
 749:src/storage.c **** /*
 750:src/storage.c ****  *  Simple backup / restore
 751:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 752:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 753:src/storage.c ****  */
 754:src/storage.c **** void flash_backup( enum nilop op )
 755:src/storage.c **** {
 756:src/storage.c **** 	if ( not_running() ) {
 757:src/storage.c **** 		process_cmdline_set_lift();
 758:src/storage.c **** 		init_state();
 759:src/storage.c **** 		checksum_all();
 760:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 761:src/storage.c **** 			error_message( ERR_IO );
 762:src/storage.c **** 			DispMsg = "Error";
 763:src/storage.c **** 		}
 764:src/storage.c **** 		else {
 765:src/storage.c **** 			DispMsg = "Saved";
 766:src/storage.c **** 		}
 767:src/storage.c **** 	}
 768:src/storage.c **** }
 769:src/storage.c **** 
 770:src/storage.c **** 
 771:src/storage.c **** void flash_restore( enum nilop op )
 772:src/storage.c **** {
 773:src/storage.c **** 	if ( not_running() ) {
 774:src/storage.c **** 		if ( checksum_backup() ) {
 775:src/storage.c **** 			error_message( ERR_INVALID );
 776:src/storage.c **** 		}
 777:src/storage.c **** 		else {
 778:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
 779:src/storage.c **** 			init_state();
 780:src/storage.c **** 			DispMsg = "Restored";
 781:src/storage.c **** 		}
 782:src/storage.c **** 	}
 783:src/storage.c **** }
 784:src/storage.c **** 
 785:src/storage.c **** 
ARM GAS  /tmp/cc1iUxzj.s 			page 31


 786:src/storage.c **** /*
 787:src/storage.c ****  *  Load the user program area from the backup.
 788:src/storage.c ****  *  Called by PLOAD.
 789:src/storage.c ****  */
 790:src/storage.c **** void load_program( enum nilop op )
 791:src/storage.c **** {
 792:src/storage.c **** 	if ( not_running() ) {
 793:src/storage.c **** 		if ( checksum_backup() ) {
 794:src/storage.c **** 			/*
 795:src/storage.c **** 			 *  Not a valid backup
 796:src/storage.c **** 			 */
 797:src/storage.c **** 			report_err( ERR_INVALID );
 798:src/storage.c **** 			return;
 799:src/storage.c **** 		}
 800:src/storage.c **** 		clpall();
 801:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 802:src/storage.c **** 	}
 803:src/storage.c **** }
 804:src/storage.c **** 
 805:src/storage.c **** 
 806:src/storage.c **** /*
 807:src/storage.c ****  *  Load registers from backup
 808:src/storage.c ****  */
 809:src/storage.c **** void load_registers( enum nilop op )
 810:src/storage.c **** {
 811:src/storage.c **** 	int count;
 812:src/storage.c **** 	if ( checksum_backup() ) {
 813:src/storage.c **** 		/*
 814:src/storage.c **** 		 *  Not a valid backup region
 815:src/storage.c **** 		 */
 816:src/storage.c **** 		report_err( ERR_INVALID );
 817:src/storage.c **** 		return;
 818:src/storage.c **** 	}
 819:src/storage.c **** 	count = NumRegs;
 820:src/storage.c **** 	if ( is_dblmode() ) {
 821:src/storage.c **** 		// Don't clobber the stack in DP mode
 822:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 823:src/storage.c **** 	}
 824:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 825:src/storage.c **** 		count = BackupFlash._numregs;
 826:src/storage.c **** 	}
 827:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 828:src/storage.c **** }
 829:src/storage.c **** 
 830:src/storage.c **** 
 831:src/storage.c **** /*
 832:src/storage.c ****  *  Load the statistical summation registers from backup
 833:src/storage.c ****  */
 834:src/storage.c **** void load_sigma( enum nilop op )
 835:src/storage.c **** {
 836:src/storage.c **** 	if ( checksum_backup() ) {
 837:src/storage.c **** 		/*
 838:src/storage.c **** 		 *  Not a valid backup region
 839:src/storage.c **** 		 */
 840:src/storage.c **** 		report_err( ERR_INVALID );
 841:src/storage.c **** 		return;
 842:src/storage.c **** 	}
ARM GAS  /tmp/cc1iUxzj.s 			page 32


 843:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 844:src/storage.c **** 		/*
 845:src/storage.c **** 		 *  Backup has no data
 846:src/storage.c **** 		 */
 847:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 848:src/storage.c **** 		return;
 849:src/storage.c **** 	}
 850:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 851:src/storage.c **** }
 852:src/storage.c **** 
 853:src/storage.c **** 
 854:src/storage.c **** /*
 855:src/storage.c ****  *  Load the configuration data from the backup
 856:src/storage.c ****  */
 857:src/storage.c **** void load_state( enum nilop op )
 858:src/storage.c **** {
 859:src/storage.c **** 	if ( not_running() ) {
 860:src/storage.c **** 		if ( checksum_backup() ) {
 861:src/storage.c **** 			/*
 862:src/storage.c **** 			 *  Not a valid backup region
 863:src/storage.c **** 			 */
 864:src/storage.c **** 			report_err( ERR_INVALID );
 865:src/storage.c **** 			return;
 866:src/storage.c **** 		}
 867:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 868:src/storage.c **** 		init_state();
 869:src/storage.c **** 		clrretstk_pc();
 870:src/storage.c **** 	}
 871:src/storage.c **** }
 872:src/storage.c **** 
 873:src/storage.c **** 
 874:src/storage.c **** /*
 875:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 876:src/storage.c ****  */
 877:src/storage.c **** void store_program( enum nilop op )
 878:src/storage.c **** {
 879:src/storage.c **** 	opcode lbl; 
 880:src/storage.c **** 	unsigned int pc;
 881:src/storage.c **** 	int space_needed, count, free;
 882:src/storage.c **** 
 883:src/storage.c **** 	if ( not_running() ) {
 884:src/storage.c **** 		/*
 885:src/storage.c **** 		 *  Don't copy from library or XROM
 886:src/storage.c **** 		 */
 887:src/storage.c **** 		pc = nLIB( state_pc() );
 888:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 889:src/storage.c **** 			report_err( ERR_ILLEGAL );
 890:src/storage.c **** 			return;
 891:src/storage.c **** 		}
 892:src/storage.c **** 		/*
 893:src/storage.c **** 		 *  Check if program is labeled
 894:src/storage.c **** 		 */
 895:src/storage.c **** 		update_program_bounds( 1 );
 896:src/storage.c **** 		lbl = getprog( ProgBegin );
 897:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 898:src/storage.c **** 			report_err( ERR_NO_LBL );
 899:src/storage.c **** 			return;
ARM GAS  /tmp/cc1iUxzj.s 			page 33


 900:src/storage.c **** 		}
 901:src/storage.c **** 		/*
 902:src/storage.c **** 		 *  Compute space needed
 903:src/storage.c **** 		 */
 904:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 905:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 906:src/storage.c **** 
 907:src/storage.c **** 		/*
 908:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 909:src/storage.c **** 		 */
 910:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 911:src/storage.c **** 		if ( pc != 0 ) {
 912:src/storage.c **** 			/*
 913:src/storage.c **** 			 *  CLP in library
 914:src/storage.c **** 			 */
 915:src/storage.c **** 			unsigned int old_pc = state_pc();
 916:src/storage.c **** 			set_pc( pc );
 917:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 918:src/storage.c **** 			if ( space_needed <= free ) {
 919:src/storage.c **** 				clrprog();
 920:src/storage.c **** 			}
 921:src/storage.c **** 			set_pc( old_pc );
 922:src/storage.c **** 		}
 923:src/storage.c **** 		if ( space_needed > free ) {
 924:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 925:src/storage.c **** 			return;
 926:src/storage.c **** 		}
 927:src/storage.c **** 		// 3. Append program
 928:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 929:src/storage.c **** 	}
 930:src/storage.c **** }
 931:src/storage.c **** 
 932:src/storage.c **** 
 933:src/storage.c **** /*
 934:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 935:src/storage.c ****  */
 936:src/storage.c **** void recall_program( enum nilop op )
 937:src/storage.c **** {
 938:src/storage.c **** 	if ( not_running() ) {
 939:src/storage.c **** 		if ( state_pc() == 0 ) {
 940:src/storage.c **** 			State.pc = 1;
 941:src/storage.c **** 		}
 942:src/storage.c **** 		update_program_bounds( 1 );
 943:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 944:src/storage.c **** 	}
 945:src/storage.c **** }
 946:src/storage.c **** 
 947:src/storage.c **** 
 948:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 949:src/storage.c **** /*
 950:src/storage.c ****  *  Filesystem access for emulator
 951:src/storage.c ****  */
 952:src/storage.c **** 
 953:src/storage.c **** #ifndef DM42
 954:src/storage.c **** 
 955:src/storage.c **** #ifdef _WIN32
 956:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
ARM GAS  /tmp/cc1iUxzj.s 			page 34


 957:src/storage.c **** #else
 958:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
 959:src/storage.c **** #endif
 960:src/storage.c **** 
 961:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 962:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 963:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 964:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 965:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 966:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 967:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 968:src/storage.c **** 
 969:src/storage.c **** /*
 970:src/storage.c ****  *  Show (GUI) message
 971:src/storage.c ****  */
 972:src/storage.c **** #ifdef QTGUI
 973:src/storage.c **** extern void showMessage(const char* title, const char* message);
 974:src/storage.c **** #endif
 975:src/storage.c **** 
 976:src/storage.c **** 
 977:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 978:src/storage.c **** {
 979:src/storage.c **** 	va_list args;
 980:src/storage.c **** #ifndef QTGUI
 981:src/storage.c **** #ifdef WINGUI
 982:src/storage.c **** 	char msg[ 10000 ];
 983:src/storage.c **** 	va_start( args, format );
 984:src/storage.c **** 	vsprintf( msg, format, args );
 985:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 986:src/storage.c **** #else
 987:src/storage.c **** 	va_start( args, format );
 988:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 989:src/storage.c **** 	vfprintf( stderr, format, args );
 990:src/storage.c **** 	fputc( '\n', stderr );
 991:src/storage.c **** #endif
 992:src/storage.c **** #else
 993:src/storage.c **** 	char msg[ 10000 ];
 994:src/storage.c **** 	va_start( args, format );
 995:src/storage.c **** 	vsprintf( msg, format, args );
 996:src/storage.c **** 	showMessage(title, msg);
 997:src/storage.c **** #endif
 998:src/storage.c **** }
 999:src/storage.c **** 
1000:src/storage.c **** 
1001:src/storage.c **** 
1002:src/storage.c **** /*
1003:src/storage.c ****  *  Save/Load state to a file
1004:src/storage.c ****  */
1005:src/storage.c **** void save_statefile( const char *filename )
1006:src/storage.c **** {
1007:src/storage.c **** 	FILE *f;
1008:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1009:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
1010:src/storage.c **** 	}
1011:src/storage.c **** 	f = fopen( StateFile, "wb" );
1012:src/storage.c **** 	if ( f == NULL ) {
1013:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
ARM GAS  /tmp/cc1iUxzj.s 			page 35


1014:src/storage.c **** 		return;
1015:src/storage.c **** 	}
1016:src/storage.c **** 	process_cmdline_set_lift();
1017:src/storage.c **** 	init_state();
1018:src/storage.c **** 	checksum_all();
1019:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1020:src/storage.c **** 	fclose( f );
1021:src/storage.c **** #ifdef DEBUG
1022:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1023:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1024:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1025:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1026:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1027:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1028:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1029:src/storage.c **** #endif
1030:src/storage.c **** }
1031:src/storage.c **** 
1032:src/storage.c **** /*
1033:src/storage.c ****  *  Helper to expand filenames with startup directory
1034:src/storage.c ****  */
1035:src/storage.c **** #ifdef _WIN32
1036:src/storage.c **** #include <direct.h>
1037:src/storage.c **** #define getcwd _getcwd
1038:src/storage.c **** #define SEPARATOR '\\'
1039:src/storage.c **** #else
1040:src/storage.c **** #define SEPARATOR '/'
1041:src/storage.c **** #endif
1042:src/storage.c **** 
1043:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1044:src/storage.c **** {
1045:src/storage.c **** 	char *p;
1046:src/storage.c **** 	size_t l;
1047:src/storage.c **** 
1048:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1049:src/storage.c **** 		// Determine current directory on first call
1050:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1051:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
1052:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1053:src/storage.c **** 			*p = SEPARATOR;
1054:src/storage.c **** 			p[ 1 ] = '\0';
1055:src/storage.c **** 		}
1056:src/storage.c **** 	}
1057:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1058:src/storage.c **** 		// Absolute path left unchanged
1059:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1060:src/storage.c **** 	}
1061:src/storage.c **** 	else {
1062:src/storage.c **** 		// Prepend CurrentDir
1063:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
1064:src/storage.c **** 		l = strlen( buffer );
1065:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1066:src/storage.c **** 	}
1067:src/storage.c **** 	return buffer;
1068:src/storage.c **** }
1069:src/storage.c **** #endif //ifndef DM42
1070:src/storage.c **** 
ARM GAS  /tmp/cc1iUxzj.s 			page 36


1071:src/storage.c **** /*
1072:src/storage.c ****  *  Lots of file routines for DM42
1073:src/storage.c ****  */
1074:src/storage.c **** 
1075:src/storage.c **** #ifdef DM42
1076:src/storage.c **** 
1077:src/storage.c **** #define DISP_NEW 1
1078:src/storage.c **** #define OVERWRITE_CHECK 1
1079:src/storage.c **** #define NO_DISP_NEW 0
1080:src/storage.c **** #define NO_OVERWRITE_CHECK 0
1081:src/storage.c **** #define WRITE 1
1082:src/storage.c **** #define READ 2
1083:src/storage.c **** 
1084:src/storage.c **** void save_lib_file ( int i ) {
1085:src/storage.c ****   FRESULT f;
1086:src/storage.c ****   int fss;
1087:src/storage.c ****   int data = WRITE;
1088:src/storage.c ****   uint x=0;
1089:src/storage.c **** 
1090:src/storage.c ****   sys_disk_write_enable(1);
1091:src/storage.c ****   if (i == 0) {
1092:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1093:src/storage.c ****     if (f != FR_OK) {
1094:src/storage.c ****       f_close (FPT);
1095:src/storage.c ****       sys_disk_write_enable(0);
1096:src/storage.c ****       DispMsg = "Err slf1";
1097:src/storage.c ****       return;
1098:src/storage.c ****     }
1099:src/storage.c ****   }
1100:src/storage.c ****   else {
1101:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
1102:src/storage.c ****     if (fss != 1) return;
1103:src/storage.c ****   }
1104:src/storage.c ****   // File is now open with correct permissions
1105:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1106:src/storage.c ****   if ( f != FR_OK ) {
1107:src/storage.c ****     DispMsg = "Err slf2";
1108:src/storage.c ****   }
1109:src/storage.c ****   f_close( FPT );
1110:src/storage.c ****   sys_disk_write_enable(0);
1111:src/storage.c **** }
1112:src/storage.c **** 
1113:src/storage.c **** void load_lib_file ( int i ) {
1114:src/storage.c ****   FRESULT f;
1115:src/storage.c ****   int fss;
1116:src/storage.c ****   int data = READ;
1117:src/storage.c ****   uint x=0;
1118:src/storage.c **** 
1119:src/storage.c ****   if (i == 0) {
1120:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
1121:src/storage.c ****     if (f != FR_OK) {
1122:src/storage.c ****       f_close (FPT);
1123:src/storage.c ****       //      DispMsg = "No file?";
1124:src/storage.c ****       return;
1125:src/storage.c ****     }
1126:src/storage.c ****   }
1127:src/storage.c ****   else {
ARM GAS  /tmp/cc1iUxzj.s 			page 37


1128:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
1129:src/storage.c ****     if (fss != 1) return;
1130:src/storage.c ****   }
1131:src/storage.c ****   // File is now open with correct permissions
1132:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1133:src/storage.c ****   if ( f != FR_OK ) {
1134:src/storage.c ****     DispMsg = "Err slf2";
1135:src/storage.c ****   }
1136:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1137:src/storage.c ****     DispMsg = "File too big";
1138:src/storage.c ****   }
1139:src/storage.c ****   f_close( FPT );
1140:src/storage.c **** }
1141:src/storage.c **** 
1142:src/storage.c **** void save_ram_file ( int i ) {
1143:src/storage.c ****   FRESULT f;
1144:src/storage.c ****   int fss;
1145:src/storage.c ****   int data = WRITE;
1146:src/storage.c ****   uint x=0;
1147:src/storage.c **** 
1148:src/storage.c ****     process_cmdline_set_lift();
1149:src/storage.c ****     init_state();
1150:src/storage.c ****     checksum_all();
1151:src/storage.c **** 
1152:src/storage.c ****     sys_disk_write_enable(1);
1153:src/storage.c ****     if (i == 0) {
1154:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1155:src/storage.c ****       if (f != FR_OK) {
1156:src/storage.c **** 	f_close (FPT);
1157:src/storage.c **** 	sys_disk_write_enable(0);
1158:src/storage.c **** 	DispMsg = "Err srf1";
1159:src/storage.c **** 	return;
1160:src/storage.c ****       }
1161:src/storage.c ****     }
1162:src/storage.c ****     else {
1163:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
1164:src/storage.c ****       if (fss != 1) return;
1165:src/storage.c ****     }
1166:src/storage.c ****     // File is now open with correct permissions
1167:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1168:src/storage.c ****     if ( f != FR_OK ) {
1169:src/storage.c ****       DispMsg = "Err srf2";
1170:src/storage.c ****     }
1171:src/storage.c ****     f_close( FPT );
1172:src/storage.c ****     sys_disk_write_enable(0);
1173:src/storage.c **** }
1174:src/storage.c **** 
1175:src/storage.c **** int load_ram_file ( int i ) { // this will load backup files too!
1176:src/storage.c ****   FRESULT f;
1177:src/storage.c ****   int fss;
1178:src/storage.c ****   int data = READ;
1179:src/storage.c ****   uint x=0;
1180:src/storage.c ****   
1181:src/storage.c ****   if (i == 0) {
1182:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
1183:src/storage.c ****     if (f != FR_OK) {
1184:src/storage.c ****       f_close (FPT);
ARM GAS  /tmp/cc1iUxzj.s 			page 38


1185:src/storage.c ****       //      DispMsg = "No file?";
1186:src/storage.c ****       return 1;
1187:src/storage.c ****     }
1188:src/storage.c ****   }
1189:src/storage.c ****   else {
1190:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
1191:src/storage.c ****     if (fss != 1) return 1;
1192:src/storage.c ****   }
1193:src/storage.c ****   // File is now open with correct permissions
1194:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1195:src/storage.c ****   if ( f != FR_OK ) {
1196:src/storage.c ****     DispMsg = "Err lrf2";
1197:src/storage.c ****       f_close( FPT );
1198:src/storage.c ****       return 1;
1199:src/storage.c ****   }
1200:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1201:src/storage.c ****     DispMsg = "File too big";
1202:src/storage.c ****       f_close( FPT );
1203:src/storage.c ****       return 1;
1204:src/storage.c ****   }
1205:src/storage.c ****   f_close( FPT );
1206:src/storage.c ****   return 0;
1207:src/storage.c **** }
1208:src/storage.c **** 
1209:src/storage.c **** void load_backup_file ( int i ) { // goes into backup!
1210:src/storage.c ****   FRESULT f;
1211:src/storage.c ****   int fss;
1212:src/storage.c ****   int data = READ;
1213:src/storage.c ****   uint x=0;
1214:src/storage.c **** 
1215:src/storage.c ****   if (i == 0) {
1216:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
1217:src/storage.c ****     if (f != FR_OK) {
1218:src/storage.c ****       f_close (FPT);
1219:src/storage.c ****       return;
1220:src/storage.c ****     }
1221:src/storage.c ****   }
1222:src/storage.c ****   else {
1223:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
1224:src/storage.c ****     if (fss != 1) return;
1225:src/storage.c ****   }
1226:src/storage.c ****   // File is now open with correct permissions
1227:src/storage.c ****   f = f_read (FPT, (char *) &BackupFlash, sizeof (BackupFlash), &x);
1228:src/storage.c ****   if ( f != FR_OK ) {
1229:src/storage.c ****     DispMsg = "Err lbf2";
1230:src/storage.c ****   }
1231:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1232:src/storage.c ****     DispMsg = "File too big";
1233:src/storage.c ****   }
1234:src/storage.c ****   f_close( FPT );
1235:src/storage.c **** }
1236:src/storage.c **** 
1237:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
 786              		.loc 1 1237 78 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1iUxzj.s 			page 39


 790              		.loc 1 1237 78 is_stmt 0 view .LVU225
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
1238:src/storage.c ****   FRESULT f;
1239:src/storage.c **** 
1240:src/storage.c ****   if (*(int*)data == WRITE) {
 795              		.loc 1 1240 7 view .LVU226
 796 0002 1368     		ldr	r3, [r2]
 797              		.loc 1 1240 6 view .LVU227
 798 0004 012B     		cmp	r3, #1
1237:src/storage.c ****   FRESULT f;
 799              		.loc 1 1237 78 view .LVU228
 800 0006 0146     		mov	r1, r0
 801              	.LVL85:
1238:src/storage.c ****   FRESULT f;
 802              		.loc 1 1238 3 is_stmt 1 view .LVU229
 803              		.loc 1 1240 3 view .LVU230
 804              		.loc 1 1240 6 is_stmt 0 view .LVU231
 805 0008 0ED0     		beq	.L79
1241:src/storage.c ****     // open file to write
1242:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1243:src/storage.c ****   }
1244:src/storage.c ****   else if (*(int*)data == READ) {
 806              		.loc 1 1244 8 is_stmt 1 view .LVU232
 807              		.loc 1 1244 11 is_stmt 0 view .LVU233
 808 000a 022B     		cmp	r3, #2
 809 000c 07D1     		bne	.L75
1245:src/storage.c ****     // open file to read
1246:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 810              		.loc 1 1246 5 is_stmt 1 view .LVU234
 811              		.loc 1 1246 9 is_stmt 0 view .LVU235
 812 000e 104A     		ldr	r2, .L81
 813              	.LVL86:
 814              		.loc 1 1246 9 view .LVU236
 815 0010 104B     		ldr	r3, .L81+4
 816 0012 5068     		ldr	r0, [r2, #4]
 817              	.LVL87:
 818              		.loc 1 1246 9 view .LVU237
 819 0014 0122     		movs	r2, #1
 820 0016 9847     		blx	r3
 821              	.LVL88:
1247:src/storage.c ****   }
1248:src/storage.c ****   else {
1249:src/storage.c ****     DispMsg = "data=3?";
1250:src/storage.c ****     return 3; // serious error!
1251:src/storage.c ****   }
1252:src/storage.c ****   if (f != FR_OK) {
 822              		.loc 1 1252 3 is_stmt 1 view .LVU238
 823              		.loc 1 1252 6 is_stmt 0 view .LVU239
 824 0018 68B9     		cbnz	r0, .L80
 825              	.L77:
1253:src/storage.c ****     f_close (FPT);
1254:src/storage.c ****     sys_disk_write_enable(0);
1255:src/storage.c ****     DispMsg = "File err";
1256:src/storage.c ****     return 2; // file can't be opened
ARM GAS  /tmp/cc1iUxzj.s 			page 40


1257:src/storage.c ****   }
1258:src/storage.c ****   else {
1259:src/storage.c ****     return 1; // file opened successfully
 826              		.loc 1 1259 12 view .LVU240
 827 001a 0120     		movs	r0, #1
 828              	.LVL89:
1260:src/storage.c ****   }
1261:src/storage.c **** }
 829              		.loc 1 1261 1 view .LVU241
 830 001c 08BD     		pop	{r3, pc}
 831              	.LVL90:
 832              	.L75:
1249:src/storage.c ****     return 3; // serious error!
 833              		.loc 1 1249 5 is_stmt 1 view .LVU242
1249:src/storage.c ****     return 3; // serious error!
 834              		.loc 1 1249 13 is_stmt 0 view .LVU243
 835 001e 0E4B     		ldr	r3, .L81+8
 836 0020 0E4A     		ldr	r2, .L81+12
 837              	.LVL91:
1249:src/storage.c ****     return 3; // serious error!
 838              		.loc 1 1249 13 view .LVU244
 839 0022 1A60     		str	r2, [r3]
1250:src/storage.c ****   }
 840              		.loc 1 1250 5 is_stmt 1 view .LVU245
1250:src/storage.c ****   }
 841              		.loc 1 1250 12 is_stmt 0 view .LVU246
 842 0024 0320     		movs	r0, #3
 843              	.LVL92:
 844              		.loc 1 1261 1 view .LVU247
 845 0026 08BD     		pop	{r3, pc}
 846              	.LVL93:
 847              	.L79:
1242:src/storage.c ****   }
 848              		.loc 1 1242 5 is_stmt 1 view .LVU248
1242:src/storage.c ****   }
 849              		.loc 1 1242 9 is_stmt 0 view .LVU249
 850 0028 094A     		ldr	r2, .L81
 851              	.LVL94:
1242:src/storage.c ****   }
 852              		.loc 1 1242 9 view .LVU250
 853 002a 0A4B     		ldr	r3, .L81+4
 854 002c 5068     		ldr	r0, [r2, #4]
 855              	.LVL95:
1242:src/storage.c ****   }
 856              		.loc 1 1242 9 view .LVU251
 857 002e 0B22     		movs	r2, #11
 858 0030 9847     		blx	r3
 859              	.LVL96:
1252:src/storage.c ****     f_close (FPT);
 860              		.loc 1 1252 3 is_stmt 1 view .LVU252
1252:src/storage.c ****     f_close (FPT);
 861              		.loc 1 1252 6 is_stmt 0 view .LVU253
 862 0032 0028     		cmp	r0, #0
 863 0034 F1D0     		beq	.L77
 864              	.L80:
 865              	.LBB52:
 866              	.LBI52:
ARM GAS  /tmp/cc1iUxzj.s 			page 41


1237:src/storage.c ****   FRESULT f;
 867              		.loc 1 1237 5 is_stmt 1 view .LVU254
 868              	.LVL97:
 869              	.LBB53:
1253:src/storage.c ****     sys_disk_write_enable(0);
 870              		.loc 1 1253 5 view .LVU255
 871 0036 064A     		ldr	r2, .L81
 872 0038 094B     		ldr	r3, .L81+16
 873 003a 5068     		ldr	r0, [r2, #4]
 874              	.LVL98:
1253:src/storage.c ****     sys_disk_write_enable(0);
 875              		.loc 1 1253 5 is_stmt 0 view .LVU256
 876 003c 9847     		blx	r3
 877              	.LVL99:
1254:src/storage.c ****     DispMsg = "File err";
 878              		.loc 1 1254 5 is_stmt 1 view .LVU257
 879 003e 094B     		ldr	r3, .L81+20
 880 0040 0020     		movs	r0, #0
 881 0042 9847     		blx	r3
 882              	.LVL100:
1255:src/storage.c ****     return 2; // file can't be opened
 883              		.loc 1 1255 5 view .LVU258
1255:src/storage.c ****     return 2; // file can't be opened
 884              		.loc 1 1255 13 is_stmt 0 view .LVU259
 885 0044 044B     		ldr	r3, .L81+8
 886 0046 084A     		ldr	r2, .L81+24
 887 0048 1A60     		str	r2, [r3]
1256:src/storage.c ****   }
 888              		.loc 1 1256 5 is_stmt 1 view .LVU260
 889              	.LVL101:
1255:src/storage.c ****     return 2; // file can't be opened
 890              		.loc 1 1255 13 is_stmt 0 view .LVU261
 891 004a 0220     		movs	r0, #2
 892              	.LBE53:
 893              	.LBE52:
 894              		.loc 1 1261 1 view .LVU262
 895 004c 08BD     		pop	{r3, pc}
 896              	.L82:
 897 004e 00BF     		.align	2
 898              	.L81:
 899 0050 00200010 		.word	268443648
 900 0054 35040008 		.word	134218805
 901 0058 00000000 		.word	DispMsg
 902 005c 00000000 		.word	.LC3
 903 0060 39040008 		.word	134218809
 904 0064 E1030008 		.word	134218721
 905 0068 08000000 		.word	.LC4
 906              		.cfi_endproc
 907              	.LFE38:
 909              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
 910              		.align	2
 911              	.LC5:
 912 0000 63616C6C 		.ascii	"calloc failed\000"
 912      6F632066 
 912      61696C65 
 912      6400
 913              		.section	.text.init_mem,"ax",%progbits
ARM GAS  /tmp/cc1iUxzj.s 			page 42


 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	init_mem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	init_mem:
 923              	.LFB3:
  99:src/storage.c ****   char *v;
 924              		.loc 1 99 18 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 100:src/storage.c **** 
 928              		.loc 1 100 3 view .LVU264
 102:src/storage.c ****   if (v == NULL) {
 929              		.loc 1 102 3 view .LVU265
  99:src/storage.c ****   char *v;
 930              		.loc 1 99 18 is_stmt 0 view .LVU266
 931 0000 08B5     		push	{r3, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
 102:src/storage.c ****   if (v == NULL) {
 935              		.loc 1 102 16 view .LVU267
 936 0002 0121     		movs	r1, #1
 937 0004 4FF4A040 		mov	r0, #20480
 938 0008 FFF7FEFF 		bl	calloc
 939              	.LVL102:
 103:src/storage.c ****     perror("calloc failed");
 940              		.loc 1 103 3 is_stmt 1 view .LVU268
 103:src/storage.c ****     perror("calloc failed");
 941              		.loc 1 103 6 is_stmt 0 view .LVU269
 942 000c 50B1     		cbz	r0, .L86
 107:src/storage.c ****   v += RAM_SIZE;
 943              		.loc 1 107 3 is_stmt 1 view .LVU270
 107:src/storage.c ****   v += RAM_SIZE;
 944              		.loc 1 107 12 is_stmt 0 view .LVU271
 945 000e 0849     		ldr	r1, .L87
 109:src/storage.c ****   v += RAM_SIZE;
 946              		.loc 1 109 14 view .LVU272
 947 0010 084A     		ldr	r2, .L87+4
 111:src/storage.c **** }
 948              		.loc 1 111 15 view .LVU273
 949 0012 094B     		ldr	r3, .L87+8
 107:src/storage.c ****   v += RAM_SIZE;
 950              		.loc 1 107 12 view .LVU274
 951 0014 0860     		str	r0, [r1]
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 952              		.loc 1 108 3 is_stmt 1 view .LVU275
 953              	.LVL103:
 109:src/storage.c ****   v += RAM_SIZE;
 954              		.loc 1 109 3 view .LVU276
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 955              		.loc 1 108 5 is_stmt 0 view .LVU277
 956 0016 00F50061 		add	r1, r0, #2048
ARM GAS  /tmp/cc1iUxzj.s 			page 43


 957              	.LVL104:
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 958              		.loc 1 110 5 view .LVU278
 959 001a 00F58050 		add	r0, r0, #4096
 109:src/storage.c ****   v += RAM_SIZE;
 960              		.loc 1 109 14 view .LVU279
 961 001e 1160     		str	r1, [r2]
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 962              		.loc 1 110 3 is_stmt 1 view .LVU280
 963              	.LVL105:
 111:src/storage.c **** }
 964              		.loc 1 111 3 view .LVU281
 111:src/storage.c **** }
 965              		.loc 1 111 15 is_stmt 0 view .LVU282
 966 0020 1860     		str	r0, [r3]
 112:src/storage.c **** 
 967              		.loc 1 112 1 view .LVU283
 968 0022 08BD     		pop	{r3, pc}
 969              	.LVL106:
 970              	.L86:
 104:src/storage.c ****     return;
 971              		.loc 1 104 5 is_stmt 1 view .LVU284
 112:src/storage.c **** 
 972              		.loc 1 112 1 is_stmt 0 view .LVU285
 973 0024 BDE80840 		pop	{r3, lr}
 974              		.cfi_restore 14
 975              		.cfi_restore 3
 976              		.cfi_def_cfa_offset 0
 104:src/storage.c ****     return;
 977              		.loc 1 104 5 view .LVU286
 978 0028 0448     		ldr	r0, .L87+12
 979              	.LVL107:
 104:src/storage.c ****     return;
 980              		.loc 1 104 5 view .LVU287
 981 002a FFF7FEBF 		b	perror
 982              	.LVL108:
 983              	.L88:
 984 002e 00BF     		.align	2
 985              	.L87:
 986 0030 00000000 		.word	main_ram
 987 0034 00000000 		.word	backup_ram
 988 0038 00000000 		.word	library_ram
 989 003c 00000000 		.word	.LC5
 990              		.cfi_endproc
 991              	.LFE3:
 993              		.section	.text.crc16,"ax",%progbits
 994              		.align	1
 995              		.p2align 2,,3
 996              		.global	crc16
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	crc16:
 1003              	.LVL109:
 1004              	.LFB4:
 157:src/storage.c **** 	unsigned short int crc = 0x5aa5;
ARM GAS  /tmp/cc1iUxzj.s 			page 44


 1005              		.loc 1 157 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1010              		.loc 1 158 2 view .LVU289
 159:src/storage.c **** 	unsigned int i;
 1011              		.loc 1 159 2 view .LVU290
 160:src/storage.c **** 
 1012              		.loc 1 160 2 view .LVU291
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1013              		.loc 1 162 2 view .LVU292
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1014              		.loc 1 162 15 view .LVU293
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1015              		.loc 1 162 2 is_stmt 0 view .LVU294
 1016 0000 B1B1     		cbz	r1, .L92
 1017 0002 0144     		add	r1, r1, r0
 1018              	.LVL110:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1019              		.loc 1 158 21 view .LVU295
 1020 0004 45F6A523 		movw	r3, #23205
 1021              	.LVL111:
 1022              	.L91:
 163:src/storage.c **** 		crc ^= *d++;
 1023              		.loc 1 163 3 is_stmt 1 discriminator 3 view .LVU296
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1024              		.loc 1 164 10 is_stmt 0 discriminator 3 view .LVU297
 1025 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1026              	.LVL112:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1027              		.loc 1 164 10 discriminator 3 view .LVU298
 1028 000c 5BBA     		rev16	r3, r3
 1029              	.LVL113:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1030              		.loc 1 164 10 discriminator 3 view .LVU299
 1031 000e 9BB2     		uxth	r3, r3
 1032              	.LVL114:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1033              		.loc 1 164 3 is_stmt 1 discriminator 3 view .LVU300
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1034              		.loc 1 164 7 is_stmt 0 discriminator 3 view .LVU301
 1035 0010 5340     		eors	r3, r3, r2
 1036              	.LVL115:
 165:src/storage.c **** 		crc ^= crc << 12;
 1037              		.loc 1 165 3 is_stmt 1 discriminator 3 view .LVU302
 165:src/storage.c **** 		crc ^= crc << 12;
 1038              		.loc 1 165 7 is_stmt 0 discriminator 3 view .LVU303
 1039 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1040 0016 5340     		eors	r3, r3, r2
 1041              	.LVL116:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1042              		.loc 1 166 3 is_stmt 1 discriminator 3 view .LVU304
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1043              		.loc 1 166 7 is_stmt 0 discriminator 3 view .LVU305
 1044 0018 83EA0332 		eor	r2, r3, r3, lsl #12
ARM GAS  /tmp/cc1iUxzj.s 			page 45


 1045              	.LVL117:
 167:src/storage.c **** 	}
 1046              		.loc 1 167 3 is_stmt 1 discriminator 3 view .LVU306
 167:src/storage.c **** 	}
 1047              		.loc 1 167 25 is_stmt 0 discriminator 3 view .LVU307
 1048 001c 5301     		lsls	r3, r2, #5
 1049 001e 03F4FF53 		and	r3, r3, #8160
 167:src/storage.c **** 	}
 1050              		.loc 1 167 7 discriminator 3 view .LVU308
 1051 0022 92B2     		uxth	r2, r2
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1052              		.loc 1 162 2 discriminator 3 view .LVU309
 1053 0024 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1054              		.loc 1 167 7 discriminator 3 view .LVU310
 1055 0026 83EA0203 		eor	r3, r3, r2
 1056              	.LVL118:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1057              		.loc 1 162 27 is_stmt 1 discriminator 3 view .LVU311
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1058              		.loc 1 162 15 discriminator 3 view .LVU312
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1059              		.loc 1 162 2 is_stmt 0 discriminator 3 view .LVU313
 1060 002a EDD1     		bne	.L91
 169:src/storage.c **** }
 1061              		.loc 1 169 2 is_stmt 1 view .LVU314
 170:src/storage.c **** 
 1062              		.loc 1 170 1 is_stmt 0 view .LVU315
 1063 002c 1846     		mov	r0, r3
 1064              	.LVL119:
 170:src/storage.c **** 
 1065              		.loc 1 170 1 view .LVU316
 1066 002e 7047     		bx	lr
 1067              	.LVL120:
 1068              	.L92:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1069              		.loc 1 158 21 view .LVU317
 1070 0030 45F6A523 		movw	r3, #23205
 169:src/storage.c **** }
 1071              		.loc 1 169 2 is_stmt 1 view .LVU318
 170:src/storage.c **** 
 1072              		.loc 1 170 1 is_stmt 0 view .LVU319
 1073 0034 1846     		mov	r0, r3
 1074              	.LVL121:
 170:src/storage.c **** 
 1075              		.loc 1 170 1 view .LVU320
 1076 0036 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE4:
 1080              		.section	.text.checksum_program,"ax",%progbits
 1081              		.align	1
 1082              		.p2align 2,,3
 1083              		.global	checksum_program
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc1iUxzj.s 			page 46


 1089              	checksum_program:
 1090              	.LFB6:
 193:src/storage.c **** 	update_program_bounds( 1 );
 1091              		.loc 1 193 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1095              		.loc 1 194 2 view .LVU322
 193:src/storage.c **** 	update_program_bounds( 1 );
 1096              		.loc 1 193 1 is_stmt 0 view .LVU323
 1097 0000 08B5     		push	{r3, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1101              		.loc 1 194 2 view .LVU324
 1102 0002 0120     		movs	r0, #1
 1103 0004 FFF7FEFF 		bl	update_program_bounds
 1104              	.LVL122:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1105              		.loc 1 195 2 is_stmt 1 view .LVU325
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1106              		.loc 1 195 16 is_stmt 0 view .LVU326
 1107 0008 FFF7FEFF 		bl	get_current_prog
 1108              	.LVL123:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1109              		.loc 1 195 36 view .LVU327
 1110 000c 124B     		ldr	r3, .L100
 1111 000e 1B68     		ldr	r3, [r3]
 1112 0010 B3F8EE17 		ldrh	r1, [r3, #2030]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1113              		.loc 1 195 46 view .LVU328
 1114 0014 B3F8EC37 		ldrh	r3, [r3, #2028]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1115              		.loc 1 195 44 view .LVU329
 1116 0018 C91A     		subs	r1, r1, r3
 1117              	.LVL124:
 1118              	.LBB54:
 1119              	.LBI54:
 156:src/storage.c **** {
 1120              		.loc 1 156 20 is_stmt 1 view .LVU330
 1121              	.LBB55:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1122              		.loc 1 158 2 view .LVU331
 159:src/storage.c **** 	unsigned int i;
 1123              		.loc 1 159 2 view .LVU332
 160:src/storage.c **** 
 1124              		.loc 1 160 2 view .LVU333
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1125              		.loc 1 162 2 view .LVU334
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1126              		.loc 1 162 15 view .LVU335
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1127              		.loc 1 162 2 is_stmt 0 view .LVU336
 1128 001a 4B1C     		adds	r3, r1, #1
 1129              	.LVL125:
ARM GAS  /tmp/cc1iUxzj.s 			page 47


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1130              		.loc 1 162 2 view .LVU337
 1131 001c 17D0     		beq	.L97
 1132 001e 0131     		adds	r1, r1, #1
 1133 0020 0144     		add	r1, r1, r0
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1134              		.loc 1 158 21 view .LVU338
 1135 0022 45F6A523 		movw	r3, #23205
 1136              	.LVL126:
 1137              	.L96:
 163:src/storage.c **** 		crc ^= *d++;
 1138              		.loc 1 163 3 is_stmt 1 view .LVU339
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 164 10 is_stmt 0 view .LVU340
 1140 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1141              	.LVL127:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1142              		.loc 1 164 10 view .LVU341
 1143 002a 5BBA     		rev16	r3, r3
 1144              	.LVL128:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1145              		.loc 1 164 10 view .LVU342
 1146 002c 9BB2     		uxth	r3, r3
 1147              	.LVL129:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1148              		.loc 1 164 3 is_stmt 1 view .LVU343
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1149              		.loc 1 164 7 is_stmt 0 view .LVU344
 1150 002e 5340     		eors	r3, r3, r2
 1151              	.LVL130:
 165:src/storage.c **** 		crc ^= crc << 12;
 1152              		.loc 1 165 3 is_stmt 1 view .LVU345
 165:src/storage.c **** 		crc ^= crc << 12;
 1153              		.loc 1 165 7 is_stmt 0 view .LVU346
 1154 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1155 0034 5340     		eors	r3, r3, r2
 1156              	.LVL131:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1157              		.loc 1 166 3 is_stmt 1 view .LVU347
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1158              		.loc 1 166 7 is_stmt 0 view .LVU348
 1159 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1160              	.LVL132:
 167:src/storage.c **** 	}
 1161              		.loc 1 167 3 is_stmt 1 view .LVU349
 167:src/storage.c **** 	}
 1162              		.loc 1 167 25 is_stmt 0 view .LVU350
 1163 003a 5A01     		lsls	r2, r3, #5
 1164 003c 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1165              		.loc 1 167 7 view .LVU351
 1166 0040 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1167              		.loc 1 162 2 view .LVU352
 1168 0042 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1169              		.loc 1 167 7 view .LVU353
ARM GAS  /tmp/cc1iUxzj.s 			page 48


 1170 0044 83EA0203 		eor	r3, r3, r2
 1171              	.LVL133:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1172              		.loc 1 162 27 is_stmt 1 view .LVU354
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1173              		.loc 1 162 15 view .LVU355
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1174              		.loc 1 162 2 is_stmt 0 view .LVU356
 1175 0048 EDD1     		bne	.L96
 169:src/storage.c **** }
 1176              		.loc 1 169 2 is_stmt 1 view .LVU357
 1177              	.LVL134:
 169:src/storage.c **** }
 1178              		.loc 1 169 2 is_stmt 0 view .LVU358
 1179              	.LBE55:
 1180              	.LBE54:
 197:src/storage.c **** 
 1181              		.loc 1 197 1 view .LVU359
 1182 004a 1846     		mov	r0, r3
 1183 004c 08BD     		pop	{r3, pc}
 1184              	.LVL135:
 1185              	.L97:
 1186              	.LBB57:
 1187              	.LBB56:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1188              		.loc 1 158 21 view .LVU360
 1189 004e 45F6A523 		movw	r3, #23205
 1190              	.LVL136:
 169:src/storage.c **** }
 1191              		.loc 1 169 2 is_stmt 1 view .LVU361
 169:src/storage.c **** }
 1192              		.loc 1 169 2 is_stmt 0 view .LVU362
 1193              	.LBE56:
 1194              	.LBE57:
 197:src/storage.c **** 
 1195              		.loc 1 197 1 view .LVU363
 1196 0052 1846     		mov	r0, r3
 1197 0054 08BD     		pop	{r3, pc}
 1198              	.L101:
 1199 0056 00BF     		.align	2
 1200              	.L100:
 1201 0058 00000000 		.word	main_ram
 1202              		.cfi_endproc
 1203              	.LFE6:
 1205              		.section	.text.checksum_ram,"ax",%progbits
 1206              		.align	1
 1207              		.p2align 2,,3
 1208              		.global	checksum_ram
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	checksum_ram:
 1215              	.LFB7:
 205:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1216              		.loc 1 205 1 is_stmt 1 view -0
 1217              		.cfi_startproc
ARM GAS  /tmp/cc1iUxzj.s 			page 49


 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 206:src/storage.c **** 			      Crc, &Crc );
 1221              		.loc 1 206 2 view .LVU365
 206:src/storage.c **** 			      Crc, &Crc );
 1222              		.loc 1 206 9 is_stmt 0 view .LVU366
 1223 0000 044B     		ldr	r3, .L103
 1224 0002 1868     		ldr	r0, [r3]
 1225 0004 40F2FE71 		movw	r1, #2046
 1226 0008 B0F8FE27 		ldrh	r2, [r0, #2046]
 1227 000c 4318     		adds	r3, r0, r1
 1228 000e FFF7FEBF 		b	test_checksum
 1229              	.LVL137:
 1230              	.L104:
 1231 0012 00BF     		.align	2
 1232              	.L103:
 1233 0014 00000000 		.word	main_ram
 1234              		.cfi_endproc
 1235              	.LFE7:
 1237              		.section	.text.checksum_backup,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	checksum_backup
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	checksum_backup:
 1247              	.LFB8:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1248              		.loc 1 216 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1253              		.loc 1 217 2 view .LVU368
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1254              		.loc 1 217 9 is_stmt 0 view .LVU369
 1255 0000 144B     		ldr	r3, .L111
 1256 0002 1968     		ldr	r1, [r3]
 1257 0004 B1F8FE07 		ldrh	r0, [r1, #2046]
 1258              	.LVL138:
 1259              	.LBB58:
 1260              	.LBI58:
 177:src/storage.c **** {
 1261              		.loc 1 177 12 is_stmt 1 view .LVU370
 1262              	.LBB59:
 179:src/storage.c **** 	crc = crc16( data, length );
 1263              		.loc 1 179 2 view .LVU371
 180:src/storage.c **** 	
 1264              		.loc 1 180 2 view .LVU372
 1265              	.LBB60:
 1266              	.LBI60:
 156:src/storage.c **** {
 1267              		.loc 1 156 20 view .LVU373
ARM GAS  /tmp/cc1iUxzj.s 			page 50


 1268              	.LBB61:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1269              		.loc 1 158 2 view .LVU374
 159:src/storage.c **** 	unsigned int i;
 1270              		.loc 1 159 2 view .LVU375
 160:src/storage.c **** 
 1271              		.loc 1 160 2 view .LVU376
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1272              		.loc 1 162 2 view .LVU377
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1273              		.loc 1 162 15 view .LVU378
 1274              	.LBE61:
 1275              	.LBE60:
 1276              	.LBE59:
 1277              	.LBE58:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1278              		.loc 1 216 1 is_stmt 0 view .LVU379
 1279 0008 10B4     		push	{r4}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 4, -4
 1282              	.LBB66:
 1283              	.LBB64:
 1284              	.LBB63:
 1285              	.LBB62:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1286              		.loc 1 158 21 view .LVU380
 1287 000a 45F6A523 		movw	r3, #23205
 1288 000e 01F2FE74 		addw	r4, r1, #2046
 1289              	.LVL139:
 1290              	.L106:
 163:src/storage.c **** 		crc ^= *d++;
 1291              		.loc 1 163 3 is_stmt 1 view .LVU381
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1292              		.loc 1 164 10 is_stmt 0 view .LVU382
 1293 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1294              	.LVL140:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1295              		.loc 1 164 10 view .LVU383
 1296 0016 5BBA     		rev16	r3, r3
 1297              	.LVL141:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1298              		.loc 1 164 10 view .LVU384
 1299 0018 9BB2     		uxth	r3, r3
 1300              	.LVL142:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1301              		.loc 1 164 3 is_stmt 1 view .LVU385
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1302              		.loc 1 164 7 is_stmt 0 view .LVU386
 1303 001a 5340     		eors	r3, r3, r2
 1304              	.LVL143:
 165:src/storage.c **** 		crc ^= crc << 12;
 1305              		.loc 1 165 3 is_stmt 1 view .LVU387
 165:src/storage.c **** 		crc ^= crc << 12;
 1306              		.loc 1 165 7 is_stmt 0 view .LVU388
 1307 001c C3F30312 		ubfx	r2, r3, #4, #4
 1308 0020 5340     		eors	r3, r3, r2
 1309              	.LVL144:
ARM GAS  /tmp/cc1iUxzj.s 			page 51


 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1310              		.loc 1 166 3 is_stmt 1 view .LVU389
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1311              		.loc 1 166 7 is_stmt 0 view .LVU390
 1312 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1313              	.LVL145:
 167:src/storage.c **** 	}
 1314              		.loc 1 167 3 is_stmt 1 view .LVU391
 167:src/storage.c **** 	}
 1315              		.loc 1 167 25 is_stmt 0 view .LVU392
 1316 0026 5A01     		lsls	r2, r3, #5
 1317 0028 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1318              		.loc 1 167 7 view .LVU393
 1319 002c 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1320              		.loc 1 162 2 view .LVU394
 1321 002e 8C42     		cmp	r4, r1
 167:src/storage.c **** 	}
 1322              		.loc 1 167 7 view .LVU395
 1323 0030 83EA0203 		eor	r3, r3, r2
 1324              	.LVL146:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1325              		.loc 1 162 27 is_stmt 1 view .LVU396
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1326              		.loc 1 162 15 view .LVU397
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1327              		.loc 1 162 2 is_stmt 0 view .LVU398
 1328 0034 EDD1     		bne	.L106
 169:src/storage.c **** }
 1329              		.loc 1 169 2 is_stmt 1 view .LVU399
 1330              	.LVL147:
 169:src/storage.c **** }
 1331              		.loc 1 169 2 is_stmt 0 view .LVU400
 1332              	.LBE62:
 1333              	.LBE63:
 182:src/storage.c **** 		*pcrc = crc;
 1334              		.loc 1 182 2 is_stmt 1 view .LVU401
 185:src/storage.c **** }
 1335              		.loc 1 185 2 view .LVU402
 185:src/storage.c **** }
 1336              		.loc 1 185 23 is_stmt 0 view .LVU403
 1337 0036 9842     		cmp	r0, r3
 1338 0038 07D0     		beq	.L108
 1339 003a 4AF23C53 		movw	r3, #42300
 1340              	.LVL148:
 185:src/storage.c **** }
 1341              		.loc 1 185 23 view .LVU404
 1342 003e C01A     		subs	r0, r0, r3
 1343              	.LVL149:
 185:src/storage.c **** }
 1344              		.loc 1 185 23 view .LVU405
 1345 0040 18BF     		it	ne
 1346 0042 0120     		movne	r0, #1
 1347              	.LVL150:
 185:src/storage.c **** }
 1348              		.loc 1 185 23 view .LVU406
ARM GAS  /tmp/cc1iUxzj.s 			page 52


 1349              	.LBE64:
 1350              	.LBE66:
 219:src/storage.c **** 
 1351              		.loc 1 219 1 view .LVU407
 1352 0044 5DF8044B 		ldr	r4, [sp], #4
 1353              		.cfi_remember_state
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL151:
 219:src/storage.c **** 
 1357              		.loc 1 219 1 view .LVU408
 1358 0048 7047     		bx	lr
 1359              	.LVL152:
 1360              	.L108:
 1361              		.cfi_restore_state
 1362              	.LBB67:
 1363              	.LBB65:
 185:src/storage.c **** }
 1364              		.loc 1 185 23 view .LVU409
 1365 004a 0020     		movs	r0, #0
 1366              	.LVL153:
 185:src/storage.c **** }
 1367              		.loc 1 185 23 view .LVU410
 1368              	.LBE65:
 1369              	.LBE67:
 219:src/storage.c **** 
 1370              		.loc 1 219 1 view .LVU411
 1371 004c 5DF8044B 		ldr	r4, [sp], #4
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374 0050 7047     		bx	lr
 1375              	.L112:
 1376 0052 00BF     		.align	2
 1377              	.L111:
 1378 0054 00000000 		.word	backup_ram
 1379              		.cfi_endproc
 1380              	.LFE8:
 1382              		.section	.text.clpall,"ax",%progbits
 1383              		.align	1
 1384              		.p2align 2,,3
 1385              		.global	clpall
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	clpall:
 1392              	.LFB11:
 248:src/storage.c **** 	clrretstk_pc();
 1393              		.loc 1 248 1 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 249:src/storage.c **** 	stoend();
 1397              		.loc 1 249 2 view .LVU413
 248:src/storage.c **** 	clrretstk_pc();
 1398              		.loc 1 248 1 is_stmt 0 view .LVU414
 1399 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc1iUxzj.s 			page 53


 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 3, -8
 1402              		.cfi_offset 14, -4
 249:src/storage.c **** 	stoend();
 1403              		.loc 1 249 2 view .LVU415
 1404 0002 FFF7FEFF 		bl	clrretstk_pc
 1405              	.LVL154:
 250:src/storage.c **** }
 1406              		.loc 1 250 2 is_stmt 1 view .LVU416
 1407              	.LBB68:
 1408              	.LBI68:
 237:src/storage.c **** {
 1409              		.loc 1 237 13 view .LVU417
 1410              	.LBB69:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1411              		.loc 1 239 2 view .LVU418
 1412 0006 044B     		ldr	r3, .L115
 1413 0008 1B68     		ldr	r3, [r3]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1414              		.loc 1 239 11 is_stmt 0 view .LVU419
 1415 000a 0121     		movs	r1, #1
 240:src/storage.c **** }
 1416              		.loc 1 240 12 view .LVU420
 1417 000c 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1418              		.loc 1 239 11 view .LVU421
 1419 0010 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1420              		.loc 1 240 2 is_stmt 1 view .LVU422
 240:src/storage.c **** }
 1421              		.loc 1 240 12 is_stmt 0 view .LVU423
 1422 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1423              	.LBE69:
 1424              	.LBE68:
 251:src/storage.c **** 
 1425              		.loc 1 251 1 view .LVU424
 1426 0014 08BD     		pop	{r3, pc}
 1427              	.L116:
 1428 0016 00BF     		.align	2
 1429              	.L115:
 1430 0018 00000000 		.word	main_ram
 1431              		.cfi_endproc
 1432              	.LFE11:
 1434              		.section	.text.clrall,"ax",%progbits
 1435              		.align	1
 1436              		.p2align 2,,3
 1437              		.global	clrall
 1438              		.syntax unified
 1439              		.thumb
 1440              		.thumb_func
 1441              		.fpu fpv4-sp-d16
 1443              	clrall:
 1444              	.LFB14:
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1445              		.loc 1 301 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1iUxzj.s 			page 54


 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 302:src/storage.c **** 	xeq_init_contexts();
 1449              		.loc 1 302 2 view .LVU426
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1450              		.loc 1 301 1 is_stmt 0 view .LVU427
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 302:src/storage.c **** 	xeq_init_contexts();
 1455              		.loc 1 302 10 view .LVU428
 1456 0002 124C     		ldr	r4, .L119
 1457 0004 2368     		ldr	r3, [r4]
 1458 0006 6422     		movs	r2, #100
 1459 0008 83F8CF27 		strb	r2, [r3, #1999]
 303:src/storage.c **** 	clrreg( OP_CLREG );
 1460              		.loc 1 303 2 is_stmt 1 view .LVU429
 1461 000c FFF7FEFF 		bl	xeq_init_contexts
 1462              	.LVL155:
 304:src/storage.c **** 	clrstk( OP_CLSTK );
 1463              		.loc 1 304 2 view .LVU430
 1464 0010 3E20     		movs	r0, #62
 1465 0012 FFF7FEFF 		bl	clrreg
 1466              	.LVL156:
 305:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1467              		.loc 1 305 2 view .LVU431
 1468 0016 4020     		movs	r0, #64
 1469 0018 FFF7FEFF 		bl	clrstk
 1470              	.LVL157:
 306:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1471              		.loc 1 306 2 view .LVU432
 1472 001c 7420     		movs	r0, #116
 1473 001e FFF7FEFF 		bl	clralpha
 1474              	.LVL158:
 307:src/storage.c **** 	clpall();
 1475              		.loc 1 307 2 view .LVU433
 1476 0022 4520     		movs	r0, #69
 1477 0024 FFF7FEFF 		bl	clrflags
 1478              	.LVL159:
 308:src/storage.c **** 
 1479              		.loc 1 308 2 view .LVU434
 1480              	.LBB70:
 1481              	.LBI70:
 247:src/storage.c **** {
 1482              		.loc 1 247 6 view .LVU435
 1483              	.LBB71:
 249:src/storage.c **** 	stoend();
 1484              		.loc 1 249 2 view .LVU436
 1485 0028 FFF7FEFF 		bl	clrretstk_pc
 1486              	.LVL160:
 250:src/storage.c **** }
 1487              		.loc 1 250 2 view .LVU437
 1488              	.LBB72:
 1489              	.LBI72:
 237:src/storage.c **** {
 1490              		.loc 1 237 13 view .LVU438
 1491              	.LBB73:
ARM GAS  /tmp/cc1iUxzj.s 			page 55


 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1492              		.loc 1 239 2 view .LVU439
 1493 002c 2368     		ldr	r3, [r4]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1494              		.loc 1 239 11 is_stmt 0 view .LVU440
 1495 002e 0121     		movs	r1, #1
 240:src/storage.c **** }
 1496              		.loc 1 240 12 view .LVU441
 1497 0030 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1498              		.loc 1 239 11 view .LVU442
 1499 0034 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1500              		.loc 1 240 2 is_stmt 1 view .LVU443
 240:src/storage.c **** }
 1501              		.loc 1 240 12 is_stmt 0 view .LVU444
 1502 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.LBE73:
 1504              	.LBE72:
 1505              	.LBE71:
 1506              	.LBE70:
 310:src/storage.c **** 	State2.test = TST_NONE;
 1507              		.loc 1 310 2 is_stmt 1 view .LVU445
 1508 0038 FFF7FEFF 		bl	reset_shift
 1509              	.LVL161:
 311:src/storage.c **** 
 1510              		.loc 1 311 2 view .LVU446
 311:src/storage.c **** 
 1511              		.loc 1 311 14 is_stmt 0 view .LVU447
 1512 003c 0449     		ldr	r1, .L119+4
 313:src/storage.c **** }
 1513              		.loc 1 313 10 view .LVU448
 1514 003e 054B     		ldr	r3, .L119+8
 311:src/storage.c **** 
 1515              		.loc 1 311 14 view .LVU449
 1516 0040 0720     		movs	r0, #7
 313:src/storage.c **** }
 1517              		.loc 1 313 10 view .LVU450
 1518 0042 0022     		movs	r2, #0
 311:src/storage.c **** 
 1519              		.loc 1 311 14 view .LVU451
 1520 0044 C873     		strb	r0, [r1, #15]
 313:src/storage.c **** }
 1521              		.loc 1 313 2 is_stmt 1 view .LVU452
 313:src/storage.c **** }
 1522              		.loc 1 313 10 is_stmt 0 view .LVU453
 1523 0046 1A60     		str	r2, [r3]
 314:src/storage.c **** 
 1524              		.loc 1 314 1 view .LVU454
 1525 0048 10BD     		pop	{r4, pc}
 1526              	.L120:
 1527 004a 00BF     		.align	2
 1528              	.L119:
 1529 004c 00000000 		.word	main_ram
 1530 0050 00000000 		.word	StateWhileOn
 1531 0054 00000000 		.word	DispMsg
 1532              		.cfi_endproc
ARM GAS  /tmp/cc1iUxzj.s 			page 56


 1533              	.LFE14:
 1535              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1536              		.align	2
 1537              	.LC6:
 1538 0000 45726173 		.ascii	"Erased\000"
 1538      656400
 1539              		.section	.text.reset,"ax",%progbits
 1540              		.align	1
 1541              		.p2align 2,,3
 1542              		.global	reset
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	reset:
 1549              	.LFB15:
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1550              		.loc 1 321 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 322:src/storage.c **** 	clrall();
 1554              		.loc 1 322 3 view .LVU456
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1555              		.loc 1 321 1 is_stmt 0 view .LVU457
 1556 0000 08B5     		push	{r3, lr}
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 3, -8
 1559              		.cfi_offset 14, -4
 322:src/storage.c **** 	clrall();
 1560              		.loc 1 322 3 view .LVU458
 1561 0002 074B     		ldr	r3, .L123
 1562 0004 4FF40062 		mov	r2, #2048
 1563 0008 1868     		ldr	r0, [r3]
 1564 000a 0021     		movs	r1, #0
 1565 000c FFF7FEFF 		bl	xset
 1566              	.LVL162:
 323:src/storage.c **** 	init_state();
 1567              		.loc 1 323 2 is_stmt 1 view .LVU459
 1568 0010 FFF7FEFF 		bl	clrall
 1569              	.LVL163:
 324:src/storage.c **** #ifndef DM42
 1570              		.loc 1 324 2 view .LVU460
 1571 0014 FFF7FEFF 		bl	init_state
 1572              	.LVL164:
 331:src/storage.c **** }
 1573              		.loc 1 331 2 view .LVU461
 331:src/storage.c **** }
 1574              		.loc 1 331 10 is_stmt 0 view .LVU462
 1575 0018 024B     		ldr	r3, .L123+4
 1576 001a 034A     		ldr	r2, .L123+8
 1577 001c 1A60     		str	r2, [r3]
 332:src/storage.c **** 
 1578              		.loc 1 332 1 view .LVU463
 1579 001e 08BD     		pop	{r3, pc}
 1580              	.L124:
 1581              		.align	2
ARM GAS  /tmp/cc1iUxzj.s 			page 57


 1582              	.L123:
 1583 0020 00000000 		.word	main_ram
 1584 0024 00000000 		.word	DispMsg
 1585 0028 00000000 		.word	.LC6
 1586              		.cfi_endproc
 1587              	.LFE15:
 1589              		.section	.text.stoprog,"ax",%progbits
 1590              		.align	1
 1591              		.p2align 2,,3
 1592              		.global	stoprog
 1593              		.syntax unified
 1594              		.thumb
 1595              		.thumb_func
 1596              		.fpu fpv4-sp-d16
 1598              	stoprog:
 1599              	.LVL165:
 1600              	.LFB16:
 338:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1601              		.loc 1 338 26 is_stmt 1 view -0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 0
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 339:src/storage.c **** 	int i;
 1605              		.loc 1 339 2 view .LVU465
 338:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1606              		.loc 1 338 26 is_stmt 0 view .LVU466
 1607 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1608              		.cfi_def_cfa_offset 32
 1609              		.cfi_offset 3, -32
 1610              		.cfi_offset 4, -28
 1611              		.cfi_offset 5, -24
 1612              		.cfi_offset 6, -20
 1613              		.cfi_offset 7, -16
 1614              		.cfi_offset 8, -12
 1615              		.cfi_offset 9, -8
 1616              		.cfi_offset 14, -4
 341:src/storage.c **** 
 1617              		.loc 1 341 20 view .LVU467
 1618 0004 374F     		ldr	r7, .L145
 339:src/storage.c **** 	int i;
 1619              		.loc 1 339 18 view .LVU468
 1620 0006 00F47046 		and	r6, r0, #61440
 341:src/storage.c **** 
 1621              		.loc 1 341 20 view .LVU469
 1622 000a 3B68     		ldr	r3, [r7]
 339:src/storage.c **** 	int i;
 1623              		.loc 1 339 33 view .LVU470
 1624 000c B6F5704F 		cmp	r6, #61440
 341:src/storage.c **** 
 1625              		.loc 1 341 20 view .LVU471
 1626 0010 B3F8E057 		ldrh	r5, [r3, #2016]
 1627              	.LVL166:
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1628              		.loc 1 343 2 is_stmt 1 view .LVU472
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1629              		.loc 1 343 5 is_stmt 0 view .LVU473
 1630 0014 5B88     		ldrh	r3, [r3, #2]
ARM GAS  /tmp/cc1iUxzj.s 			page 58


 338:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1631              		.loc 1 338 26 view .LVU474
 1632 0016 0446     		mov	r4, r0
 339:src/storage.c **** 	int i;
 1633              		.loc 1 339 33 view .LVU475
 1634 0018 57D0     		beq	.L126
 1635              	.LVL167:
 340:src/storage.c **** 	unsigned int pc = state_pc();
 1636              		.loc 1 340 2 is_stmt 1 discriminator 4 view .LVU476
 341:src/storage.c **** 
 1637              		.loc 1 341 2 discriminator 4 view .LVU477
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1638              		.loc 1 343 5 is_stmt 0 discriminator 4 view .LVU478
 1639 001a AB42     		cmp	r3, r5
 339:src/storage.c **** 	int i;
 1640              		.loc 1 339 33 discriminator 4 view .LVU479
 1641 001c 4FF00108 		mov	r8, #1
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1642              		.loc 1 343 5 discriminator 4 view .LVU480
 1643 0020 44D0     		beq	.L141
 1644              	.LVL168:
 1645              	.L127:
 346:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1646              		.loc 1 346 2 is_stmt 1 view .LVU481
 346:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1647              		.loc 1 346 5 is_stmt 0 view .LVU482
 1648 0022 15F47049 		ands	r9, r5, #61440
 1649 0026 4BD1     		bne	.L142
 1650              	.LVL169:
 1651              	.L128:
 350:src/storage.c **** 	xeq_init_contexts();
 1652              		.loc 1 350 2 is_stmt 1 view .LVU483
 1653 0028 FFF7FEFF 		bl	clrretstk
 1654              	.LVL170:
 351:src/storage.c **** 	if ( ProgFree < off ) {
 1655              		.loc 1 351 2 view .LVU484
 1656 002c FFF7FEFF 		bl	xeq_init_contexts
 1657              	.LVL171:
 352:src/storage.c **** 		return;
 1658              		.loc 1 352 2 view .LVU485
 352:src/storage.c **** 		return;
 1659              		.loc 1 352 16 is_stmt 0 view .LVU486
 1660 0030 2D4B     		ldr	r3, .L145+4
 352:src/storage.c **** 		return;
 1661              		.loc 1 352 5 view .LVU487
 1662 0032 1B68     		ldr	r3, [r3]
 1663 0034 4345     		cmp	r3, r8
 1664 0036 01DA     		bge	.L143
 365:src/storage.c **** 
 1665              		.loc 1 365 1 view .LVU488
 1666 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1667              	.LVL172:
 1668              	.L143:
 355:src/storage.c **** 	ProgEnd += off;
 1669              		.loc 1 355 2 is_stmt 1 view .LVU489
 355:src/storage.c **** 	ProgEnd += off;
 1670              		.loc 1 355 11 is_stmt 0 view .LVU490
ARM GAS  /tmp/cc1iUxzj.s 			page 59


 1671 003c 3B68     		ldr	r3, [r7]
 1672 003e B3F802C0 		ldrh	ip, [r3, #2]
 356:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1673              		.loc 1 356 10 view .LVU491
 1674 0042 B3F8EE27 		ldrh	r2, [r3, #2030]
 355:src/storage.c **** 	ProgEnd += off;
 1675              		.loc 1 355 11 view .LVU492
 1676 0046 C444     		add	ip, ip, r8
 356:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1677              		.loc 1 356 10 view .LVU493
 1678 0048 4244     		add	r2, r2, r8
 355:src/storage.c **** 	ProgEnd += off;
 1679              		.loc 1 355 11 view .LVU494
 1680 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 356:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1681              		.loc 1 356 2 is_stmt 1 view .LVU495
 356:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1682              		.loc 1 356 10 is_stmt 0 view .LVU496
 1683 004e A3F8EE27 		strh	r2, [r3, #2030]	@ movhi
 357:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1684              		.loc 1 357 2 is_stmt 1 view .LVU497
 357:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1685              		.loc 1 357 7 is_stmt 0 view .LVU498
 1686 0052 4946     		mov	r1, r9
 1687 0054 2846     		mov	r0, r5
 1688 0056 FFF7FEFF 		bl	do_inc
 1689              	.LVL173:
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1690              		.loc 1 358 12 view .LVU499
 1691 005a D7F800C0 		ldr	ip, [r7]
 1692 005e BCF80230 		ldrh	r3, [ip, #2]
 1693              	.LVL174:
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1694              		.loc 1 358 2 is_stmt 1 view .LVU500
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1695              		.loc 1 358 10 is_stmt 0 view .LVU501
 1696 0062 5A1C     		adds	r2, r3, #1
 1697              	.LVL175:
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1698              		.loc 1 358 26 is_stmt 1 view .LVU502
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1699              		.loc 1 358 2 is_stmt 0 view .LVU503
 1700 0064 8242     		cmp	r2, r0
 1701 0066 39DD     		ble	.L130
 1702 0068 03F10043 		add	r3, r3, #-2147483648
 1703 006c 0CF10407 		add	r7, ip, #4
 1704 0070 0133     		adds	r3, r3, #1
 1705 0072 A2EB0802 		sub	r2, r2, r8
 1706              	.LVL176:
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1707              		.loc 1 358 2 view .LVU504
 1708 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1709              	.LVL177:
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1710              		.loc 1 358 2 view .LVU505
 1711 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1712 007e 07EB4005 		add	r5, r7, r0, lsl #1
ARM GAS  /tmp/cc1iUxzj.s 			page 60


 1713              	.LVL178:
 1714              	.L131:
 359:src/storage.c **** 	}
 1715              		.loc 1 359 3 is_stmt 1 discriminator 3 view .LVU506
 359:src/storage.c **** 	}
 1716              		.loc 1 359 23 is_stmt 0 discriminator 3 view .LVU507
 1717 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 359:src/storage.c **** 	}
 1718              		.loc 1 359 15 discriminator 3 view .LVU508
 1719 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1720              		.loc 1 358 40 is_stmt 1 discriminator 3 view .LVU509
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1721              		.loc 1 358 26 discriminator 3 view .LVU510
 358:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1722              		.loc 1 358 2 is_stmt 0 discriminator 3 view .LVU511
 1723 008a AB42     		cmp	r3, r5
 1724 008c F9D1     		bne	.L131
 1725              	.L132:
 361:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1726              		.loc 1 361 2 is_stmt 1 view .LVU512
 361:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1727              		.loc 1 361 5 is_stmt 0 view .LVU513
 1728 008e B6F5704F 		cmp	r6, #61440
 362:src/storage.c **** 	Prog_1[pc] = c;
 1729              		.loc 1 362 3 is_stmt 1 view .LVU514
 363:src/storage.c **** 	State.pc = pc;
 1730              		.loc 1 363 2 view .LVU515
 362:src/storage.c **** 	Prog_1[pc] = c;
 1731              		.loc 1 362 22 is_stmt 0 view .LVU516
 1732 0092 04BF     		itt	eq
 1733 0094 230C     		lsreq	r3, r4, #16
 362:src/storage.c **** 	Prog_1[pc] = c;
 1734              		.loc 1 362 18 view .LVU517
 1735 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 363:src/storage.c **** 	State.pc = pc;
 1736              		.loc 1 363 8 view .LVU518
 1737 009a 00F10043 		add	r3, r0, #-2147483648
 1738 009e 013B     		subs	r3, r3, #1
 363:src/storage.c **** 	State.pc = pc;
 1739              		.loc 1 363 13 view .LVU519
 1740 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
 364:src/storage.c **** }
 1741              		.loc 1 364 2 is_stmt 1 view .LVU520
 364:src/storage.c **** }
 1742              		.loc 1 364 11 is_stmt 0 view .LVU521
 1743 00a4 ACF8E007 		strh	r0, [ip, #2016]	@ movhi
 365:src/storage.c **** 
 1744              		.loc 1 365 1 view .LVU522
 1745 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1746              	.LVL179:
 1747              	.L141:
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1748              		.loc 1 343 22 discriminator 1 view .LVU523
 1749 00ac B0F59D7F 		cmp	r0, #314
 1750 00b0 B7D0     		beq	.L127
 344:src/storage.c **** 
ARM GAS  /tmp/cc1iUxzj.s 			page 61


 1751              		.loc 1 344 3 is_stmt 1 view .LVU524
 1752 00b2 4FF49D70 		mov	r0, #314
 1753              	.LVL180:
 344:src/storage.c **** 
 1754              		.loc 1 344 3 is_stmt 0 view .LVU525
 1755 00b6 FFF7FEFF 		bl	stoprog
 1756              	.LVL181:
 1757              	.L144:
 346:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1758              		.loc 1 346 2 is_stmt 1 view .LVU526
 346:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1759              		.loc 1 346 5 is_stmt 0 view .LVU527
 1760 00ba 15F47049 		ands	r9, r5, #61440
 1761 00be B3D0     		beq	.L128
 1762              	.L142:
 347:src/storage.c **** 		return;
 1763              		.loc 1 347 3 is_stmt 1 view .LVU528
 365:src/storage.c **** 
 1764              		.loc 1 365 1 is_stmt 0 view .LVU529
 1765 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1766              		.cfi_remember_state
 1767              		.cfi_restore 14
 1768              		.cfi_restore 9
 1769              		.cfi_restore 8
 1770              		.cfi_restore 7
 1771              		.cfi_restore 6
 1772              		.cfi_restore 5
 1773              		.cfi_restore 4
 1774              		.cfi_restore 3
 1775              		.cfi_def_cfa_offset 0
 1776              	.LVL182:
 347:src/storage.c **** 		return;
 1777              		.loc 1 347 3 view .LVU530
 1778 00c4 1320     		movs	r0, #19
 1779 00c6 FFF7FEBF 		b	report_warn
 1780              	.LVL183:
 1781              	.L126:
 1782              		.cfi_restore_state
 340:src/storage.c **** 	unsigned int pc = state_pc();
 1783              		.loc 1 340 2 is_stmt 1 view .LVU531
 341:src/storage.c **** 
 1784              		.loc 1 341 2 view .LVU532
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1785              		.loc 1 343 5 is_stmt 0 view .LVU533
 1786 00ca AB42     		cmp	r3, r5
 339:src/storage.c **** 	int i;
 1787              		.loc 1 339 33 view .LVU534
 1788 00cc 4FF00208 		mov	r8, #2
 343:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1789              		.loc 1 343 5 view .LVU535
 1790 00d0 A7D1     		bne	.L127
 344:src/storage.c **** 
 1791              		.loc 1 344 3 is_stmt 1 view .LVU536
 1792 00d2 4FF49D70 		mov	r0, #314
 1793              	.LVL184:
 344:src/storage.c **** 
 1794              		.loc 1 344 3 is_stmt 0 view .LVU537
ARM GAS  /tmp/cc1iUxzj.s 			page 62


 1795 00d6 FFF7FEFF 		bl	stoprog
 1796              	.LVL185:
 1797 00da EEE7     		b	.L144
 1798              	.LVL186:
 1799              	.L130:
 344:src/storage.c **** 
 1800              		.loc 1 344 3 view .LVU538
 1801 00dc 0CF10407 		add	r7, ip, #4
 1802 00e0 D5E7     		b	.L132
 1803              	.L146:
 1804 00e2 00BF     		.align	2
 1805              	.L145:
 1806 00e4 00000000 		.word	main_ram
 1807 00e8 00000000 		.word	ProgFree
 1808              		.cfi_endproc
 1809              	.LFE16:
 1811              		.section	.text.delprog,"ax",%progbits
 1812              		.align	1
 1813              		.p2align 2,,3
 1814              		.global	delprog
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu fpv4-sp-d16
 1820              	delprog:
 1821              	.LFB17:
 372:src/storage.c **** 	int i;
 1822              		.loc 1 372 1 is_stmt 1 view -0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 373:src/storage.c **** 	const unsigned int pc = state_pc();
 1826              		.loc 1 373 2 view .LVU540
 374:src/storage.c **** 	int off;
 1827              		.loc 1 374 2 view .LVU541
 372:src/storage.c **** 	int i;
 1828              		.loc 1 372 1 is_stmt 0 view .LVU542
 1829 0000 70B5     		push	{r4, r5, r6, lr}
 1830              		.cfi_def_cfa_offset 16
 1831              		.cfi_offset 4, -16
 1832              		.cfi_offset 5, -12
 1833              		.cfi_offset 6, -8
 1834              		.cfi_offset 14, -4
 374:src/storage.c **** 	int off;
 1835              		.loc 1 374 26 view .LVU543
 1836 0002 194D     		ldr	r5, .L159
 1837 0004 2B68     		ldr	r3, [r5]
 1838 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 1839              	.LVL187:
 375:src/storage.c **** 
 1840              		.loc 1 375 2 is_stmt 1 view .LVU544
 377:src/storage.c **** 		return;
 1841              		.loc 1 377 2 view .LVU545
 377:src/storage.c **** 		return;
 1842              		.loc 1 377 7 is_stmt 0 view .LVU546
 1843 000a 2046     		mov	r0, r4
 1844 000c FFF7FEFF 		bl	check_delete_prog
ARM GAS  /tmp/cc1iUxzj.s 			page 63


 1845              	.LVL188:
 377:src/storage.c **** 		return;
 1846              		.loc 1 377 5 view .LVU547
 1847 0010 48BB     		cbnz	r0, .L147
 379:src/storage.c **** 		return;
 1848              		.loc 1 379 2 is_stmt 1 view .LVU548
 379:src/storage.c **** 		return;
 1849              		.loc 1 379 5 is_stmt 0 view .LVU549
 1850 0012 44B3     		cbz	r4, .L147
 382:src/storage.c **** 	ProgSize -= off;
 1851              		.loc 1 382 2 is_stmt 1 view .LVU550
 382:src/storage.c **** 	ProgSize -= off;
 1852              		.loc 1 382 8 is_stmt 0 view .LVU551
 1853 0014 2D68     		ldr	r5, [r5]
 1854 0016 05EB4403 		add	r3, r5, r4, lsl #1
 383:src/storage.c **** 	ProgEnd -= off;
 1855              		.loc 1 383 11 view .LVU552
 1856 001a 6A88     		ldrh	r2, [r5, #2]
 382:src/storage.c **** 	ProgSize -= off;
 1857              		.loc 1 382 33 view .LVU553
 1858 001c 5B88     		ldrh	r3, [r3, #2]
 384:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1859              		.loc 1 384 10 view .LVU554
 1860 001e B5F8EE17 		ldrh	r1, [r5, #2030]
 382:src/storage.c **** 	ProgSize -= off;
 1861              		.loc 1 382 33 view .LVU555
 1862 0022 03F47043 		and	r3, r3, #61440
 1863 0026 B3F5704F 		cmp	r3, #61440
 1864 002a 14BF     		ite	ne
 1865 002c 0126     		movne	r6, #1
 1866 002e 0226     		moveq	r6, #2
 383:src/storage.c **** 	ProgEnd -= off;
 1867              		.loc 1 383 11 view .LVU556
 1868 0030 921B     		subs	r2, r2, r6
 1869 0032 92B2     		uxth	r2, r2
 384:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1870              		.loc 1 384 10 view .LVU557
 1871 0034 891B     		subs	r1, r1, r6
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1872              		.loc 1 385 2 view .LVU558
 1873 0036 9442     		cmp	r4, r2
 382:src/storage.c **** 	ProgSize -= off;
 1874              		.loc 1 382 33 view .LVU559
 1875 0038 3346     		mov	r3, r6
 1876              	.LVL189:
 383:src/storage.c **** 	ProgEnd -= off;
 1877              		.loc 1 383 2 is_stmt 1 view .LVU560
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1878              		.loc 1 385 10 is_stmt 0 view .LVU561
 1879 003a 2046     		mov	r0, r4
 383:src/storage.c **** 	ProgEnd -= off;
 1880              		.loc 1 383 11 view .LVU562
 1881 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 384:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1882              		.loc 1 384 2 is_stmt 1 view .LVU563
 384:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1883              		.loc 1 384 10 is_stmt 0 view .LVU564
ARM GAS  /tmp/cc1iUxzj.s 			page 64


 1884 003e A5F8EE17 		strh	r1, [r5, #2030]	@ movhi
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1885              		.loc 1 385 2 is_stmt 1 view .LVU565
 1886              	.LVL190:
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1887              		.loc 1 385 16 view .LVU566
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1888              		.loc 1 385 2 is_stmt 0 view .LVU567
 1889 0042 0CDC     		bgt	.L152
 1890 0044 2344     		add	r3, r3, r4
 1891              	.LVL191:
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1892              		.loc 1 385 2 view .LVU568
 1893 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1894 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1895              	.LVL192:
 1896              	.L151:
 386:src/storage.c **** 	decpc();
 1897              		.loc 1 386 3 is_stmt 1 discriminator 3 view .LVU569
 386:src/storage.c **** 	decpc();
 1898              		.loc 1 386 23 is_stmt 0 discriminator 3 view .LVU570
 1899 004e 33F8021F 		ldrh	r1, [r3, #2]!
 386:src/storage.c **** 	decpc();
 1900              		.loc 1 386 15 discriminator 3 view .LVU571
 1901 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1902              		.loc 1 385 37 is_stmt 1 discriminator 3 view .LVU572
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1903              		.loc 1 385 21 is_stmt 0 discriminator 3 view .LVU573
 1904 0056 6988     		ldrh	r1, [r5, #2]
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1905              		.loc 1 385 37 discriminator 3 view .LVU574
 1906 0058 0130     		adds	r0, r0, #1
 1907              	.LVL193:
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1908              		.loc 1 385 16 is_stmt 1 discriminator 3 view .LVU575
 385:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1909              		.loc 1 385 2 is_stmt 0 discriminator 3 view .LVU576
 1910 005a 8142     		cmp	r1, r0
 1911 005c F7DA     		bge	.L151
 1912              	.L152:
 387:src/storage.c **** }
 1913              		.loc 1 387 2 is_stmt 1 view .LVU577
 388:src/storage.c **** 
 1914              		.loc 1 388 1 is_stmt 0 view .LVU578
 1915 005e BDE87040 		pop	{r4, r5, r6, lr}
 1916              		.cfi_remember_state
 1917              		.cfi_restore 14
 1918              		.cfi_restore 6
 1919              		.cfi_restore 5
 1920              		.cfi_restore 4
 1921              		.cfi_def_cfa_offset 0
 1922              	.LVL194:
 387:src/storage.c **** }
 1923              		.loc 1 387 2 view .LVU579
 1924 0062 FFF7FEBF 		b	decpc
 1925              	.LVL195:
ARM GAS  /tmp/cc1iUxzj.s 			page 65


 1926              	.L147:
 1927              		.cfi_restore_state
 388:src/storage.c **** 
 1928              		.loc 1 388 1 view .LVU580
 1929 0066 70BD     		pop	{r4, r5, r6, pc}
 1930              	.LVL196:
 1931              	.L160:
 388:src/storage.c **** 
 1932              		.loc 1 388 1 view .LVU581
 1933              		.align	2
 1934              	.L159:
 1935 0068 00000000 		.word	main_ram
 1936              		.cfi_endproc
 1937              	.LFE17:
 1939              		.section	.text.append_program,"ax",%progbits
 1940              		.align	1
 1941              		.p2align 2,,3
 1942              		.global	append_program
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
 1946              		.fpu fpv4-sp-d16
 1948              	append_program:
 1949              	.LVL197:
 1950              	.LFB18:
 396:src/storage.c **** 	unsigned short pc;
 1951              		.loc 1 396 1 is_stmt 1 view -0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 0
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 397:src/storage.c **** 	int space_needed = length - ProgFree;
 1955              		.loc 1 397 2 view .LVU583
 398:src/storage.c **** 
 1956              		.loc 1 398 2 view .LVU584
 396:src/storage.c **** 	unsigned short pc;
 1957              		.loc 1 396 1 is_stmt 0 view .LVU585
 1958 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1959              		.cfi_def_cfa_offset 24
 1960              		.cfi_offset 4, -24
 1961              		.cfi_offset 5, -20
 1962              		.cfi_offset 6, -16
 1963              		.cfi_offset 7, -12
 1964              		.cfi_offset 8, -8
 1965              		.cfi_offset 14, -4
 400:src/storage.c **** 		/*
 1966              		.loc 1 400 7 view .LVU586
 1967 0004 DFF8C480 		ldr	r8, .L180+8
 398:src/storage.c **** 
 1968              		.loc 1 398 28 view .LVU587
 1969 0008 2E4A     		ldr	r2, .L180
 400:src/storage.c **** 		/*
 1970              		.loc 1 400 7 view .LVU588
 1971 000a D8F80030 		ldr	r3, [r8]
 398:src/storage.c **** 
 1972              		.loc 1 398 6 view .LVU589
 1973 000e 1568     		ldr	r5, [r2]
 400:src/storage.c **** 		/*
ARM GAS  /tmp/cc1iUxzj.s 			page 66


 1974              		.loc 1 400 7 view .LVU590
 1975 0010 5F88     		ldrh	r7, [r3, #2]
 400:src/storage.c **** 		/*
 1976              		.loc 1 400 5 view .LVU591
 1977 0012 012F     		cmp	r7, #1
 396:src/storage.c **** 	unsigned short pc;
 1978              		.loc 1 396 1 view .LVU592
 1979 0014 0C46     		mov	r4, r1
 1980 0016 0646     		mov	r6, r0
 398:src/storage.c **** 
 1981              		.loc 1 398 6 view .LVU593
 1982 0018 A1EB0505 		sub	r5, r1, r5
 1983              	.LVL198:
 400:src/storage.c **** 		/*
 1984              		.loc 1 400 2 is_stmt 1 view .LVU594
 400:src/storage.c **** 		/*
 1985              		.loc 1 400 5 is_stmt 0 view .LVU595
 1986 001c 0BD0     		beq	.L177
 407:src/storage.c **** 		return report_err( ERR_INVALID );
 1987              		.loc 1 407 2 is_stmt 1 view .LVU596
 407:src/storage.c **** 		return report_err( ERR_INVALID );
 1988              		.loc 1 407 5 is_stmt 0 view .LVU597
 1989 001e 40F29E33 		movw	r3, #926
 1990 0022 9942     		cmp	r1, r3
 1991 0024 39DC     		bgt	.L164
 410:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1992              		.loc 1 410 2 is_stmt 1 view .LVU598
 410:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1993              		.loc 1 410 30 is_stmt 0 view .LVU599
 1994 0026 DB1B     		subs	r3, r3, r7
 410:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1995              		.loc 1 410 5 view .LVU600
 1996 0028 8B42     		cmp	r3, r1
 1997 002a 0CDA     		bge	.L163
 1998              	.LVL199:
 1999              	.L176:
 2000              	.LBB74:
 430:src/storage.c **** 		}
 2001              		.loc 1 430 4 is_stmt 1 view .LVU601
 2002              	.LBE74:
 442:src/storage.c **** 
 2003              		.loc 1 442 1 is_stmt 0 view .LVU602
 2004 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2005              		.cfi_remember_state
 2006              		.cfi_restore 14
 2007              		.cfi_restore 8
 2008              		.cfi_restore 7
 2009              		.cfi_restore 6
 2010              		.cfi_restore 5
 2011              		.cfi_restore 4
 2012              		.cfi_def_cfa_offset 0
 2013              	.LVL200:
 2014              	.LBB75:
 430:src/storage.c **** 		}
 2015              		.loc 1 430 11 view .LVU603
 2016 0030 0B20     		movs	r0, #11
 2017 0032 FFF7FEBF 		b	report_err
ARM GAS  /tmp/cc1iUxzj.s 			page 67


 2018              	.LVL201:
 2019              	.L177:
 2020              		.cfi_restore_state
 430:src/storage.c **** 		}
 2021              		.loc 1 430 11 view .LVU604
 2022              	.LBE75:
 404:src/storage.c **** 		--ProgSize;
 2023              		.loc 1 404 3 is_stmt 1 view .LVU605
 407:src/storage.c **** 		return report_err( ERR_INVALID );
 2024              		.loc 1 407 5 is_stmt 0 view .LVU606
 2025 0036 40F29E32 		movw	r2, #926
 405:src/storage.c **** 	}
 2026              		.loc 1 405 3 view .LVU607
 2027 003a 0021     		movs	r1, #0
 2028              	.LVL202:
 407:src/storage.c **** 		return report_err( ERR_INVALID );
 2029              		.loc 1 407 5 view .LVU608
 2030 003c 9442     		cmp	r4, r2
 404:src/storage.c **** 		--ProgSize;
 2031              		.loc 1 404 3 view .LVU609
 2032 003e 05F1FF35 		add	r5, r5, #-1
 2033              	.LVL203:
 405:src/storage.c **** 	}
 2034              		.loc 1 405 3 is_stmt 1 view .LVU610
 2035 0042 5980     		strh	r1, [r3, #2]	@ movhi
 407:src/storage.c **** 		return report_err( ERR_INVALID );
 2036              		.loc 1 407 2 view .LVU611
 407:src/storage.c **** 		return report_err( ERR_INVALID );
 2037              		.loc 1 407 5 is_stmt 0 view .LVU612
 2038 0044 29DC     		bgt	.L164
 2039              	.L163:
 417:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2040              		.loc 1 417 2 is_stmt 1 view .LVU613
 2041 0046 FFF7FEFF 		bl	clrretstk
 2042              	.LVL204:
 418:src/storage.c **** 		space_needed -= SizeStatRegs;
 2043              		.loc 1 418 2 view .LVU614
 418:src/storage.c **** 		space_needed -= SizeStatRegs;
 2044              		.loc 1 418 5 is_stmt 0 view .LVU615
 2045 004a 002D     		cmp	r5, #0
 2046 004c 11DD     		ble	.L166
 418:src/storage.c **** 		space_needed -= SizeStatRegs;
 2047              		.loc 1 418 40 discriminator 1 view .LVU616
 2048 004e 1E4B     		ldr	r3, .L180+4
 2049 0050 1B68     		ldr	r3, [r3]
 418:src/storage.c **** 		space_needed -= SizeStatRegs;
 2050              		.loc 1 418 24 discriminator 1 view .LVU617
 2051 0052 3BBB     		cbnz	r3, .L178
 2052              	.LBB76:
 423:src/storage.c **** 		if (is_dblmode())
 2053              		.loc 1 423 3 is_stmt 1 view .LVU618
 424:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2054              		.loc 1 424 3 view .LVU619
 424:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2055              		.loc 1 424 7 is_stmt 0 view .LVU620
 2056 0054 FFF7FEFF 		bl	is_dblmode
 2057              	.LVL205:
ARM GAS  /tmp/cc1iUxzj.s 			page 68


 424:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2058              		.loc 1 424 6 view .LVU621
 2059 0058 68BB     		cbnz	r0, .L179
 2060              	.L169:
 427:src/storage.c **** 
 2061              		.loc 1 427 4 is_stmt 1 view .LVU622
 427:src/storage.c **** 
 2062              		.loc 1 427 11 is_stmt 0 view .LVU623
 2063 005a D8F80030 		ldr	r3, [r8]
 2064 005e 93F8CF07 		ldrb	r0, [r3, #1999]	@ zero_extendqisi2
 427:src/storage.c **** 
 2065              		.loc 1 427 38 view .LVU624
 2066 0062 0335     		adds	r5, r5, #3
 2067              	.LVL206:
 427:src/storage.c **** 
 2068              		.loc 1 427 9 view .LVU625
 2069 0064 A0EBA500 		sub	r0, r0, r5, asr #2
 2070              	.LVL207:
 2071              	.L170:
 429:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2072              		.loc 1 429 3 is_stmt 1 view .LVU626
 429:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2073              		.loc 1 429 6 is_stmt 0 view .LVU627
 2074 0068 0028     		cmp	r0, #0
 2075 006a DFDB     		blt	.L176
 432:src/storage.c **** 	}
 2076              		.loc 1 432 3 is_stmt 1 view .LVU628
 2077 006c 7D21     		movs	r1, #125
 2078 006e FFF7FEFF 		bl	cmdregs
 2079              	.LVL208:
 2080              	.L166:
 432:src/storage.c **** 	}
 2081              		.loc 1 432 3 is_stmt 0 view .LVU629
 2082              	.LBE76:
 437:src/storage.c **** 	ProgSize += length;
 2083              		.loc 1 437 2 is_stmt 1 view .LVU630
 437:src/storage.c **** 	ProgSize += length;
 2084              		.loc 1 437 7 is_stmt 0 view .LVU631
 2085 0072 D8F80020 		ldr	r2, [r8]
 2086 0076 5388     		ldrh	r3, [r2, #2]
 2087              	.LVL209:
 438:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2088              		.loc 1 438 2 is_stmt 1 view .LVU632
 437:src/storage.c **** 	ProgSize += length;
 2089              		.loc 1 437 5 is_stmt 0 view .LVU633
 2090 0078 5D1C     		adds	r5, r3, #1
 439:src/storage.c **** 	set_pc( pc );
 2091              		.loc 1 439 16 view .LVU634
 2092 007a ADB2     		uxth	r5, r5
 438:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2093              		.loc 1 438 11 view .LVU635
 2094 007c 2344     		add	r3, r3, r4
 2095              	.LVL210:
 439:src/storage.c **** 	set_pc( pc );
 2096              		.loc 1 439 16 view .LVU636
 2097 007e 02EB4500 		add	r0, r2, r5, lsl #1
 438:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
ARM GAS  /tmp/cc1iUxzj.s 			page 69


 2098              		.loc 1 438 11 view .LVU637
 2099 0082 5380     		strh	r3, [r2, #2]	@ movhi
 2100              	.LVL211:
 439:src/storage.c **** 	set_pc( pc );
 2101              		.loc 1 439 2 is_stmt 1 view .LVU638
 2102 0084 3146     		mov	r1, r6
 2103 0086 6200     		lsls	r2, r4, #1
 2104 0088 0230     		adds	r0, r0, #2
 2105 008a FFF7FEFF 		bl	xcopy
 2106              	.LVL212:
 440:src/storage.c **** 	return 0;
 2107              		.loc 1 440 2 view .LVU639
 2108 008e 2846     		mov	r0, r5
 2109 0090 FFF7FEFF 		bl	set_pc
 2110              	.LVL213:
 441:src/storage.c **** }
 2111              		.loc 1 441 2 view .LVU640
 442:src/storage.c **** 
 2112              		.loc 1 442 1 is_stmt 0 view .LVU641
 2113 0094 0020     		movs	r0, #0
 2114 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2115              	.LVL214:
 2116              	.L164:
 408:src/storage.c **** 	}
 2117              		.loc 1 408 3 is_stmt 1 view .LVU642
 442:src/storage.c **** 
 2118              		.loc 1 442 1 is_stmt 0 view .LVU643
 2119 009a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2120              		.cfi_remember_state
 2121              		.cfi_restore 14
 2122              		.cfi_restore 8
 2123              		.cfi_restore 7
 2124              		.cfi_restore 6
 2125              		.cfi_restore 5
 2126              		.cfi_restore 4
 2127              		.cfi_def_cfa_offset 0
 2128              	.LVL215:
 408:src/storage.c **** 	}
 2129              		.loc 1 408 10 view .LVU644
 2130 009e 1220     		movs	r0, #18
 2131              	.LVL216:
 408:src/storage.c **** 	}
 2132              		.loc 1 408 10 view .LVU645
 2133 00a0 FFF7FEBF 		b	report_err
 2134              	.LVL217:
 2135              	.L178:
 2136              		.cfi_restore_state
 419:src/storage.c **** 		sigmaDeallocate();
 2137              		.loc 1 419 3 is_stmt 1 view .LVU646
 419:src/storage.c **** 		sigmaDeallocate();
 2138              		.loc 1 419 16 is_stmt 0 view .LVU647
 2139 00a4 ED1A     		subs	r5, r5, r3
 2140              	.LVL218:
 420:src/storage.c **** 	}
 2141              		.loc 1 420 3 is_stmt 1 view .LVU648
 2142 00a6 FFF7FEFF 		bl	sigmaDeallocate
 2143              	.LVL219:
ARM GAS  /tmp/cc1iUxzj.s 			page 70


 422:src/storage.c **** 		int regs;
 2144              		.loc 1 422 2 view .LVU649
 422:src/storage.c **** 		int regs;
 2145              		.loc 1 422 5 is_stmt 0 view .LVU650
 2146 00aa 002D     		cmp	r5, #0
 2147 00ac E1DD     		ble	.L166
 2148              	.LBB77:
 423:src/storage.c **** 		if (is_dblmode())
 2149              		.loc 1 423 3 is_stmt 1 view .LVU651
 424:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2150              		.loc 1 424 3 view .LVU652
 424:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2151              		.loc 1 424 7 is_stmt 0 view .LVU653
 2152 00ae FFF7FEFF 		bl	is_dblmode
 2153              	.LVL220:
 424:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2154              		.loc 1 424 6 view .LVU654
 2155 00b2 0028     		cmp	r0, #0
 2156 00b4 D1D0     		beq	.L169
 2157              	.L179:
 425:src/storage.c **** 		else
 2158              		.loc 1 425 4 is_stmt 1 view .LVU655
 425:src/storage.c **** 		else
 2159              		.loc 1 425 11 is_stmt 0 view .LVU656
 2160 00b6 FFF7FEFF 		bl	global_regs
 2161              	.LVL221:
 425:src/storage.c **** 		else
 2162              		.loc 1 425 44 view .LVU657
 2163 00ba 0735     		adds	r5, r5, #7
 2164              	.LVL222:
 425:src/storage.c **** 		else
 2165              		.loc 1 425 25 view .LVU658
 2166 00bc A0EBE500 		sub	r0, r0, r5, asr #3
 2167              	.LVL223:
 425:src/storage.c **** 		else
 2168              		.loc 1 425 25 view .LVU659
 2169 00c0 D2E7     		b	.L170
 2170              	.L181:
 2171 00c2 00BF     		.align	2
 2172              	.L180:
 2173 00c4 00000000 		.word	ProgFree
 2174 00c8 00000000 		.word	SizeStatRegs
 2175 00cc 00000000 		.word	main_ram
 2176              	.LBE77:
 2177              		.cfi_endproc
 2178              	.LFE18:
 2180              		.section	.text.check_create_wp34sdir,"ax",%progbits
 2181              		.align	1
 2182              		.p2align 2,,3
 2183              		.global	check_create_wp34sdir
 2184              		.syntax unified
 2185              		.thumb
 2186              		.thumb_func
 2187              		.fpu fpv4-sp-d16
 2189              	check_create_wp34sdir:
 2190              	.LFB21:
 596:src/storage.c ****   FRESULT f;
ARM GAS  /tmp/cc1iUxzj.s 			page 71


 2191              		.loc 1 596 33 is_stmt 1 view -0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 0
 2194              		@ frame_needed = 0, uses_anonymous_args = 0
 597:src/storage.c ****   sys_disk_write_enable(1);
 2195              		.loc 1 597 3 view .LVU661
 598:src/storage.c ****   f = check_create_dir ("/wp34s");
 2196              		.loc 1 598 3 view .LVU662
 596:src/storage.c ****   FRESULT f;
 2197              		.loc 1 596 33 is_stmt 0 view .LVU663
 2198 0000 38B5     		push	{r3, r4, r5, lr}
 2199              		.cfi_def_cfa_offset 16
 2200              		.cfi_offset 3, -16
 2201              		.cfi_offset 4, -12
 2202              		.cfi_offset 5, -8
 2203              		.cfi_offset 14, -4
 598:src/storage.c ****   f = check_create_dir ("/wp34s");
 2204              		.loc 1 598 3 view .LVU664
 2205 0002 0120     		movs	r0, #1
 2206 0004 044D     		ldr	r5, .L184
 2207 0006 A847     		blx	r5
 2208              	.LVL224:
 599:src/storage.c ****   sys_disk_write_enable(0);
 2209              		.loc 1 599 3 is_stmt 1 view .LVU665
 599:src/storage.c ****   sys_disk_write_enable(0);
 2210              		.loc 1 599 7 is_stmt 0 view .LVU666
 2211 0008 044B     		ldr	r3, .L184+4
 2212 000a 0548     		ldr	r0, .L184+8
 2213 000c 9847     		blx	r3
 2214              	.LVL225:
 2215 000e 0446     		mov	r4, r0
 2216              	.LVL226:
 600:src/storage.c ****   return f;
 2217              		.loc 1 600 3 is_stmt 1 view .LVU667
 2218 0010 0020     		movs	r0, #0
 2219 0012 A847     		blx	r5
 2220              	.LVL227:
 601:src/storage.c **** }
 2221              		.loc 1 601 3 view .LVU668
 602:src/storage.c **** 
 2222              		.loc 1 602 1 is_stmt 0 view .LVU669
 2223 0014 E0B2     		uxtb	r0, r4
 2224 0016 38BD     		pop	{r3, r4, r5, pc}
 2225              	.LVL228:
 2226              	.L185:
 602:src/storage.c **** 
 2227              		.loc 1 602 1 view .LVU670
 2228              		.align	2
 2229              	.L184:
 2230 0018 E1030008 		.word	134218721
 2231 001c D1030008 		.word	134218705
 2232 0020 2C000000 		.word	.LC2
 2233              		.cfi_endproc
 2234              	.LFE21:
 2236              		.section	.text.init_library,"ax",%progbits
 2237              		.align	1
 2238              		.p2align 2,,3
ARM GAS  /tmp/cc1iUxzj.s 			page 72


 2239              		.global	init_library
 2240              		.syntax unified
 2241              		.thumb
 2242              		.thumb_func
 2243              		.fpu fpv4-sp-d16
 2245              	init_library:
 2246              	.LFB22:
 664:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2247              		.loc 1 664 1 is_stmt 1 view -0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 256
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 665:src/storage.c **** 	  struct {
 2251              		.loc 1 665 2 view .LVU672
 664:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2252              		.loc 1 664 1 is_stmt 0 view .LVU673
 2253 0000 10B5     		push	{r4, lr}
 2254              		.cfi_def_cfa_offset 8
 2255              		.cfi_offset 4, -8
 2256              		.cfi_offset 14, -4
 665:src/storage.c **** 	  struct {
 2257              		.loc 1 665 7 view .LVU674
 2258 0002 0C4C     		ldr	r4, .L193
 2259 0004 2168     		ldr	r1, [r4]
 664:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2260              		.loc 1 664 1 view .LVU675
 2261 0006 C0B0     		sub	sp, sp, #256
 2262              		.cfi_def_cfa_offset 264
 665:src/storage.c **** 	  struct {
 2263              		.loc 1 665 7 view .LVU676
 2264 0008 0846     		mov	r0, r1
 2265 000a FFF7FEFF 		bl	checksum_region
 2266              	.LVL229:
 665:src/storage.c **** 	  struct {
 2267              		.loc 1 665 5 view .LVU677
 2268 000e 08B9     		cbnz	r0, .L192
 676:src/storage.c **** 
 2269              		.loc 1 676 1 view .LVU678
 2270 0010 40B0     		add	sp, sp, #256
 2271              		.cfi_remember_state
 2272              		.cfi_def_cfa_offset 8
 2273              		@ sp needed
 2274 0012 10BD     		pop	{r4, pc}
 2275              	.L192:
 2276              		.cfi_restore_state
 2277              	.LBB78:
 666:src/storage.c **** 			unsigned short crc;
 2278              		.loc 1 666 4 is_stmt 1 view .LVU679
 671:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2279              		.loc 1 671 3 view .LVU680
 672:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2280              		.loc 1 672 3 view .LVU681
 672:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2281              		.loc 1 672 11 is_stmt 0 view .LVU682
 2282 0014 4AF23C53 		movw	r3, #42300
 673:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2283              		.loc 1 673 3 view .LVU683
ARM GAS  /tmp/cc1iUxzj.s 			page 73


 2284 0018 FC22     		movs	r2, #252
 2285 001a FF21     		movs	r1, #255
 2286 001c 01A8     		add	r0, sp, #4
 672:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2287              		.loc 1 672 11 view .LVU684
 2288 001e 0093     		str	r3, [sp]
 673:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2289              		.loc 1 673 3 is_stmt 1 view .LVU685
 2290 0020 FFF7FEFF 		bl	xset
 2291              	.LVL230:
 674:src/storage.c **** 	}
 2292              		.loc 1 674 3 view .LVU686
 2293 0024 2068     		ldr	r0, [r4]
 2294 0026 6946     		mov	r1, sp
 2295 0028 0122     		movs	r2, #1
 2296 002a FFF7FEFF 		bl	program_flash
 2297              	.LVL231:
 2298              	.LBE78:
 676:src/storage.c **** 
 2299              		.loc 1 676 1 is_stmt 0 view .LVU687
 2300 002e 40B0     		add	sp, sp, #256
 2301              		.cfi_def_cfa_offset 8
 2302              		@ sp needed
 2303 0030 10BD     		pop	{r4, pc}
 2304              	.L194:
 2305 0032 00BF     		.align	2
 2306              	.L193:
 2307 0034 00000000 		.word	library_ram
 2308              		.cfi_endproc
 2309              	.LFE22:
 2311              		.section	.text.flash_remove,"ax",%progbits
 2312              		.align	1
 2313              		.p2align 2,,3
 2314              		.global	flash_remove
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2318              		.fpu fpv4-sp-d16
 2320              	flash_remove:
 2321              	.LVL232:
 2322              	.LFB24:
 741:src/storage.c **** 	const int size = UserFlash.size - count;
 2323              		.loc 1 741 1 is_stmt 1 view -0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 0
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
 2327              		@ link register save eliminated.
 742:src/storage.c **** 	step_no = offsetLIB( step_no );
 2328              		.loc 1 742 2 view .LVU689
 742:src/storage.c **** 	step_no = offsetLIB( step_no );
 2329              		.loc 1 742 19 is_stmt 0 view .LVU690
 2330 0000 084B     		ldr	r3, .L197
 2331 0002 1A68     		ldr	r2, [r3]
 743:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2332              		.loc 1 743 12 view .LVU691
 2333 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2334              	.LVL233:
ARM GAS  /tmp/cc1iUxzj.s 			page 74


 742:src/storage.c **** 	step_no = offsetLIB( step_no );
 2335              		.loc 1 742 28 view .LVU692
 2336 0008 5388     		ldrh	r3, [r2, #2]
 743:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2337              		.loc 1 743 10 view .LVU693
 2338 000a 0138     		subs	r0, r0, #1
 741:src/storage.c **** 	const int size = UserFlash.size - count;
 2339              		.loc 1 741 1 view .LVU694
 2340 000c 10B4     		push	{r4}
 2341              		.cfi_def_cfa_offset 4
 2342              		.cfi_offset 4, -4
 744:src/storage.c **** 			     size - step_no, size );
 2343              		.loc 1 744 32 view .LVU695
 2344 000e 0432     		adds	r2, r2, #4
 744:src/storage.c **** 			     size - step_no, size );
 2345              		.loc 1 744 57 view .LVU696
 2346 0010 4418     		adds	r4, r0, r1
 742:src/storage.c **** 	step_no = offsetLIB( step_no );
 2347              		.loc 1 742 12 view .LVU697
 2348 0012 5B1A     		subs	r3, r3, r1
 2349              	.LVL234:
 743:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2350              		.loc 1 743 2 is_stmt 1 view .LVU698
 744:src/storage.c **** 			     size - step_no, size );
 2351              		.loc 1 744 2 view .LVU699
 744:src/storage.c **** 			     size - step_no, size );
 2352              		.loc 1 744 9 is_stmt 0 view .LVU700
 2353 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2354              	.LVL235:
 746:src/storage.c **** 
 2355              		.loc 1 746 1 view .LVU701
 2356 0018 5DF8044B 		ldr	r4, [sp], #4
 2357              		.cfi_restore 4
 2358              		.cfi_def_cfa_offset 0
 744:src/storage.c **** 			     size - step_no, size );
 2359              		.loc 1 744 9 view .LVU702
 2360 001c 1A1A     		subs	r2, r3, r0
 2361 001e FFF7FEBF 		b	flash_append
 2362              	.LVL236:
 2363              	.L198:
 744:src/storage.c **** 			     size - step_no, size );
 2364              		.loc 1 744 9 view .LVU703
 2365 0022 00BF     		.align	2
 2366              	.L197:
 2367 0024 00000000 		.word	library_ram
 2368              		.cfi_endproc
 2369              	.LFE24:
 2371              		.section	.text.clrprog,"ax",%progbits
 2372              		.align	1
 2373              		.p2align 2,,3
 2374              		.global	clrprog
 2375              		.syntax unified
 2376              		.thumb
 2377              		.thumb_func
 2378              		.fpu fpv4-sp-d16
 2380              	clrprog:
 2381              	.LFB13:
ARM GAS  /tmp/cc1iUxzj.s 			page 75


 273:src/storage.c **** 	update_program_bounds( 1 );
 2382              		.loc 1 273 1 is_stmt 1 view -0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 0
 2385              		@ frame_needed = 0, uses_anonymous_args = 0
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2386              		.loc 1 274 2 view .LVU705
 273:src/storage.c **** 	update_program_bounds( 1 );
 2387              		.loc 1 273 1 is_stmt 0 view .LVU706
 2388 0000 10B5     		push	{r4, lr}
 2389              		.cfi_def_cfa_offset 8
 2390              		.cfi_offset 4, -8
 2391              		.cfi_offset 14, -4
 275:src/storage.c **** 		/*
 2392              		.loc 1 275 7 view .LVU707
 2393 0002 234C     		ldr	r4, .L208
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2394              		.loc 1 274 2 view .LVU708
 2395 0004 0120     		movs	r0, #1
 2396 0006 FFF7FEFF 		bl	update_program_bounds
 2397              	.LVL237:
 275:src/storage.c **** 		/*
 2398              		.loc 1 275 2 is_stmt 1 view .LVU709
 275:src/storage.c **** 		/*
 2399              		.loc 1 275 7 is_stmt 0 view .LVU710
 2400 000a 2368     		ldr	r3, [r4]
 2401 000c B3F8EC07 		ldrh	r0, [r3, #2028]
 275:src/storage.c **** 		/*
 2402              		.loc 1 275 5 view .LVU711
 2403 0010 820B     		lsrs	r2, r0, #14
 2404 0012 012A     		cmp	r2, #1
 2405 0014 28D0     		beq	.L205
 282:src/storage.c **** 			return;
 2406              		.loc 1 282 3 is_stmt 1 view .LVU712
 282:src/storage.c **** 			return;
 2407              		.loc 1 282 8 is_stmt 0 view .LVU713
 2408 0016 FFF7FEFF 		bl	check_delete_prog
 2409              	.LVL238:
 282:src/storage.c **** 			return;
 2410              		.loc 1 282 6 view .LVU714
 2411 001a 00B1     		cbz	r0, .L206
 294:src/storage.c ****  
 2412              		.loc 1 294 1 view .LVU715
 2413 001c 10BD     		pop	{r4, pc}
 2414              	.L206:
 285:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 2415              		.loc 1 285 3 is_stmt 1 view .LVU716
 2416 001e FFF7FEFF 		bl	clrretstk
 2417              	.LVL239:
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2418              		.loc 1 286 3 view .LVU717
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2419              		.loc 1 286 10 is_stmt 0 view .LVU718
 2420 0022 2368     		ldr	r3, [r4]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2421              		.loc 1 286 17 view .LVU719
 2422 0024 B3F8EC07 		ldrh	r0, [r3, #2028]
ARM GAS  /tmp/cc1iUxzj.s 			page 76


 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2423              		.loc 1 286 37 view .LVU720
 2424 0028 B3F8EE17 		ldrh	r1, [r3, #2030]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2425              		.loc 1 286 48 view .LVU721
 2426 002c 5A88     		ldrh	r2, [r3, #2]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2427              		.loc 1 286 17 view .LVU722
 2428 002e 00F10040 		add	r0, r0, #-2147483648
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2429              		.loc 1 286 10 view .LVU723
 2430 0032 0433     		adds	r3, r3, #4
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2431              		.loc 1 286 57 view .LVU724
 2432 0034 521A     		subs	r2, r2, r1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2433              		.loc 1 286 17 view .LVU725
 2434 0036 0138     		subs	r0, r0, #1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2435              		.loc 1 286 3 view .LVU726
 2436 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2437 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2438 0040 5200     		lsls	r2, r2, #1
 2439 0042 FFF7FEFF 		bl	xcopy
 2440              	.LVL240:
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2441              		.loc 1 287 3 is_stmt 1 view .LVU727
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2442              		.loc 1 287 12 is_stmt 0 view .LVU728
 2443 0046 2268     		ldr	r2, [r4]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2444              		.loc 1 287 31 view .LVU729
 2445 0048 B2F8EC07 		ldrh	r0, [r2, #2028]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2446              		.loc 1 287 12 view .LVU730
 2447 004c 5388     		ldrh	r3, [r2, #2]
 2448 004e B2F8EE17 		ldrh	r1, [r2, #2030]
 2449 0052 0344     		add	r3, r3, r0
 2450 0054 013B     		subs	r3, r3, #1
 2451 0056 5B1A     		subs	r3, r3, r1
 2452 0058 9BB2     		uxth	r3, r3
 288:src/storage.c **** 			stoend();
 2453              		.loc 1 288 3 is_stmt 1 view .LVU731
 288:src/storage.c **** 			stoend();
 2454              		.loc 1 288 6 is_stmt 0 view .LVU732
 2455 005a B3B9     		cbnz	r3, .L207
 289:src/storage.c **** 		}
 2456              		.loc 1 289 4 is_stmt 1 view .LVU733
 2457              	.LBB79:
 2458              	.LBI79:
 237:src/storage.c **** {
 2459              		.loc 1 237 13 view .LVU734
 2460              	.LBB80:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2461              		.loc 1 239 2 view .LVU735
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2462              		.loc 1 239 11 is_stmt 0 view .LVU736
ARM GAS  /tmp/cc1iUxzj.s 			page 77


 2463 005c 0121     		movs	r1, #1
 240:src/storage.c **** }
 2464              		.loc 1 240 12 view .LVU737
 2465 005e 4FF49D73 		mov	r3, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2466              		.loc 1 239 11 view .LVU738
 2467 0062 5180     		strh	r1, [r2, #2]	@ movhi
 240:src/storage.c **** }
 2468              		.loc 1 240 2 is_stmt 1 view .LVU739
 240:src/storage.c **** }
 2469              		.loc 1 240 12 is_stmt 0 view .LVU740
 2470 0064 9380     		strh	r3, [r2, #4]	@ movhi
 241:src/storage.c **** 
 2471              		.loc 1 241 1 view .LVU741
 2472 0066 08E0     		b	.L201
 2473              	.L205:
 2474              	.LBE80:
 2475              	.LBE79:
 279:src/storage.c **** 	}
 2476              		.loc 1 279 3 is_stmt 1 view .LVU742
 279:src/storage.c **** 	}
 2477              		.loc 1 279 28 is_stmt 0 view .LVU743
 2478 0068 B3F8EE17 		ldrh	r1, [r3, #2030]
 279:src/storage.c **** 	}
 2479              		.loc 1 279 36 view .LVU744
 2480 006c 0131     		adds	r1, r1, #1
 279:src/storage.c **** 	}
 2481              		.loc 1 279 3 view .LVU745
 2482 006e 091A     		subs	r1, r1, r0
 2483 0070 FFF7FEFF 		bl	flash_remove
 2484              	.LVL241:
 2485 0074 2368     		ldr	r3, [r4]
 2486 0076 B3F8EC07 		ldrh	r0, [r3, #2028]
 2487              	.L201:
 292:src/storage.c **** 	update_program_bounds( 1 );
 2488              		.loc 1 292 2 is_stmt 1 view .LVU746
 2489 007a 0138     		subs	r0, r0, #1
 2490 007c FFF7FEFF 		bl	set_pc
 2491              	.LVL242:
 293:src/storage.c **** }
 2492              		.loc 1 293 2 view .LVU747
 294:src/storage.c ****  
 2493              		.loc 1 294 1 is_stmt 0 view .LVU748
 2494 0080 BDE81040 		pop	{r4, lr}
 2495              		.cfi_remember_state
 2496              		.cfi_restore 14
 2497              		.cfi_restore 4
 2498              		.cfi_def_cfa_offset 0
 293:src/storage.c **** }
 2499              		.loc 1 293 2 view .LVU749
 2500 0084 0120     		movs	r0, #1
 2501 0086 FFF7FEBF 		b	update_program_bounds
 2502              	.LVL243:
 2503              	.L207:
 2504              		.cfi_restore_state
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2505              		.loc 1 287 12 view .LVU750
ARM GAS  /tmp/cc1iUxzj.s 			page 78


 2506 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2507 008c F5E7     		b	.L201
 2508              	.L209:
 2509 008e 00BF     		.align	2
 2510              	.L208:
 2511 0090 00000000 		.word	main_ram
 2512              		.cfi_endproc
 2513              	.LFE13:
 2515              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2516              		.align	2
 2517              	.LC7:
 2518 0000 4E6F206C 		.ascii	"No label\000"
 2518      6162656C 
 2518      00
 2519              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2520              		.align	1
 2521              		.p2align 2,,3
 2522              		.syntax unified
 2523              		.thumb
 2524              		.thumb_func
 2525              		.fpu fpv4-sp-d16
 2527              	store_program_from_buffer.part.0:
 2528              	.LVL244:
 2529              	.LFB43:
1262:src/storage.c **** 
1263:src/storage.c **** void save_prog_file () {
1264:src/storage.c ****   opcode lbl; 
1265:src/storage.c ****   unsigned int pc;
1266:src/storage.c ****   unsigned short steps, prog_crc;
1267:src/storage.c ****   FRESULT f;
1268:src/storage.c ****   int data = WRITE;
1269:src/storage.c ****   int fss;
1270:src/storage.c ****   uint x=0;
1271:src/storage.c ****   char* buffer;
1272:src/storage.c ****   FLASH_REGION* fr;
1273:src/storage.c **** 
1274:src/storage.c ****   
1275:src/storage.c ****   if ( not_running() ) {
1276:src/storage.c ****     /*
1277:src/storage.c ****      *  Don't copy from library or XROM
1278:src/storage.c ****      */
1279:src/storage.c ****     pc = nLIB( state_pc() );
1280:src/storage.c ****     if ( pc == REGION_XROM ) {
1281:src/storage.c ****       error_message( ERR_ILLEGAL );
1282:src/storage.c ****       return;
1283:src/storage.c ****     }
1284:src/storage.c ****     /*
1285:src/storage.c ****      *  Check if program is labeled
1286:src/storage.c ****      */
1287:src/storage.c ****     update_program_bounds( 1 );
1288:src/storage.c ****     lbl = getprog( ProgBegin );
1289:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1290:src/storage.c ****       error_message( ERR_NO_LBL );
1291:src/storage.c ****       return;
1292:src/storage.c ****     }
1293:src/storage.c ****     /*
1294:src/storage.c ****      *  Compute steps and crc for program
ARM GAS  /tmp/cc1iUxzj.s 			page 79


1295:src/storage.c ****      */
1296:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
1297:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
1298:src/storage.c ****     /*
1299:src/storage.c ****      * Get filename and open file
1300:src/storage.c ****      */
1301:src/storage.c ****     sys_disk_write_enable(1);
1302:src/storage.c **** 
1303:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
1304:src/storage.c ****     if (fss != 1) return;
1305:src/storage.c **** 
1306:src/storage.c ****     // File is now open with correct permissions
1307:src/storage.c **** 
1308:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
1309:src/storage.c ****     if (!buffer) {// calloc failure!
1310:src/storage.c ****       f_close(FPT);
1311:src/storage.c ****       sys_disk_write_enable(0);
1312:src/storage.c ****       DispMsg = "Mem short";
1313:src/storage.c ****       return;
1314:src/storage.c ****     }
1315:src/storage.c **** 
1316:src/storage.c ****     fr = (FLASH_REGION*) buffer;
1317:src/storage.c ****     fr->size = steps;
1318:src/storage.c ****     fr->crc = prog_crc;
1319:src/storage.c **** 
1320:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
1321:src/storage.c ****    
1322:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1323:src/storage.c ****     free(buffer);
1324:src/storage.c ****     
1325:src/storage.c ****     if (f != FR_OK) { //odd?
1326:src/storage.c ****       DispMsg = "Write err";
1327:src/storage.c ****     }
1328:src/storage.c ****     else {
1329:src/storage.c ****       DispMsg = "Written";
1330:src/storage.c ****     }
1331:src/storage.c ****       
1332:src/storage.c ****     f_close(FPT);
1333:src/storage.c ****     sys_disk_write_enable(0);
1334:src/storage.c ****     
1335:src/storage.c ****   }
1336:src/storage.c **** }
1337:src/storage.c **** 
1338:src/storage.c **** void load_prog_file () {
1339:src/storage.c ****   int fss, fsize;
1340:src/storage.c ****   int data = READ;
1341:src/storage.c ****   uint x=0;
1342:src/storage.c ****   FLASH_REGION* fr;
1343:src/storage.c ****   char* buffer;
1344:src/storage.c **** 
1345:src/storage.c ****   fss = file_selection_screen ("Load PROG File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW,
1346:src/storage.c ****   if (fss != 1) return;
1347:src/storage.c **** 
1348:src/storage.c ****   // File is now open with correct permissions
1349:src/storage.c **** 
1350:src/storage.c ****   fsize = f_size(FPT);
1351:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
ARM GAS  /tmp/cc1iUxzj.s 			page 80


1352:src/storage.c ****     f_close(FPT);
1353:src/storage.c ****     DispMsg = "File too big";
1354:src/storage.c ****     return;
1355:src/storage.c ****   }
1356:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1357:src/storage.c ****   if (!buffer) {// calloc failure!
1358:src/storage.c ****     f_close(FPT);
1359:src/storage.c ****     DispMsg = "Mem short";
1360:src/storage.c ****     return;
1361:src/storage.c ****   }
1362:src/storage.c **** 
1363:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1364:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1365:src/storage.c ****     free(buffer);
1366:src/storage.c ****     f_close(FPT);
1367:src/storage.c ****     DispMsg = "File odd";
1368:src/storage.c ****     return;
1369:src/storage.c ****   }
1370:src/storage.c ****   f_close(FPT);
1371:src/storage.c **** 
1372:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1373:src/storage.c ****     
1374:src/storage.c ****   if (checksum_region(fr, fr)) {//crc failed - wrong filetype?
1375:src/storage.c ****     DispMsg = "File crc err";
1376:src/storage.c ****         free(buffer);
1377:src/storage.c ****     return;
1378:src/storage.c ****   }
1379:src/storage.c **** 
1380:src/storage.c ****   store_program_from_buffer (fr);
1381:src/storage.c ****   free(buffer);
1382:src/storage.c **** }
1383:src/storage.c **** 
1384:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
 2530              		.loc 1 1384 6 is_stmt 1 view -0
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 0
 2533              		@ frame_needed = 0, uses_anonymous_args = 0
 2534              	.LBB81:
1385:src/storage.c **** { // buffer contains all of program file
1386:src/storage.c ****   unsigned int pc;
1387:src/storage.c ****   int space_needed, count, free;
1388:src/storage.c **** 
1389:src/storage.c ****   if ( not_running() ) {
1390:src/storage.c ****     /*
1391:src/storage.c ****      *  Check if program is labeled
1392:src/storage.c ****      */
1393:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2535              		.loc 1 1393 5 view .LVU752
1394:src/storage.c ****     if ( isDBL(lbl) ) {
 2536              		.loc 1 1394 5 view .LVU753
 2537              		.loc 1 1394 8 is_stmt 0 view .LVU754
 2538 0000 8388     		ldrh	r3, [r0, #4]
 2539 0002 03F47043 		and	r3, r3, #61440
 2540 0006 B3F5704F 		cmp	r3, #61440
 2541 000a 03D0     		beq	.L223
 2542              	.LVL245:
1395:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
ARM GAS  /tmp/cc1iUxzj.s 			page 81


1396:src/storage.c ****     }
1397:src/storage.c ****     
1398:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1399:src/storage.c ****       DispMsg = "No label";
 2543              		.loc 1 1399 7 is_stmt 1 view .LVU755
 2544              		.loc 1 1399 15 is_stmt 0 view .LVU756
 2545 000c 264B     		ldr	r3, .L227
 2546 000e 274A     		ldr	r2, .L227+4
 2547 0010 1A60     		str	r2, [r3]
1400:src/storage.c ****       return;
 2548              		.loc 1 1400 7 is_stmt 1 view .LVU757
 2549 0012 7047     		bx	lr
 2550              	.LVL246:
 2551              	.L223:
1395:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2552              		.loc 1 1395 11 is_stmt 0 view .LVU758
 2553 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1398:src/storage.c ****       DispMsg = "No label";
 2554              		.loc 1 1398 11 view .LVU759
 2555 0016 01F47043 		and	r3, r1, #61440
1398:src/storage.c ****       DispMsg = "No label";
 2556              		.loc 1 1398 8 view .LVU760
 2557 001a B3F5704F 		cmp	r3, #61440
 2558              	.LBE81:
1384:src/storage.c **** { // buffer contains all of program file
 2559              		.loc 1 1384 6 view .LVU761
 2560 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2561              		.cfi_def_cfa_offset 32
 2562              		.cfi_offset 4, -32
 2563              		.cfi_offset 5, -28
 2564              		.cfi_offset 6, -24
 2565              		.cfi_offset 7, -20
 2566              		.cfi_offset 8, -16
 2567              		.cfi_offset 9, -12
 2568              		.cfi_offset 10, -8
 2569              		.cfi_offset 14, -4
 2570 0022 0446     		mov	r4, r0
 2571              	.LBB84:
1395:src/storage.c ****     }
 2572              		.loc 1 1395 7 is_stmt 1 view .LVU762
 2573              	.LVL247:
1398:src/storage.c ****       DispMsg = "No label";
 2574              		.loc 1 1398 5 view .LVU763
1398:src/storage.c ****       DispMsg = "No label";
 2575              		.loc 1 1398 8 is_stmt 0 view .LVU764
 2576 0024 04D1     		bne	.L211
1398:src/storage.c ****       DispMsg = "No label";
 2577              		.loc 1 1398 22 view .LVU765
 2578 0026 11F4706F 		tst	r1, #3840
1398:src/storage.c ****       DispMsg = "No label";
 2579              		.loc 1 1398 25 view .LVU766
 2580 002a C1F30322 		ubfx	r2, r1, #8, #4
1398:src/storage.c ****       DispMsg = "No label";
 2581              		.loc 1 1398 22 view .LVU767
 2582 002e 04D0     		beq	.L212
 2583              	.L211:
 2584              	.LVL248:
ARM GAS  /tmp/cc1iUxzj.s 			page 82


1399:src/storage.c ****       return;
 2585              		.loc 1 1399 7 is_stmt 1 view .LVU768
1399:src/storage.c ****       return;
 2586              		.loc 1 1399 15 is_stmt 0 view .LVU769
 2587 0030 1D4B     		ldr	r3, .L227
 2588 0032 1E4A     		ldr	r2, .L227+4
 2589 0034 1A60     		str	r2, [r3]
 2590              		.loc 1 1400 7 is_stmt 1 view .LVU770
 2591              	.LBE84:
1401:src/storage.c ****     }
1402:src/storage.c ****     /*
1403:src/storage.c ****      *  Compute space needed
1404:src/storage.c ****      */
1405:src/storage.c ****     count = space_needed = fr->size;
1406:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1407:src/storage.c ****     
1408:src/storage.c ****     /*
1409:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1410:src/storage.c ****      */
1411:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1412:src/storage.c ****     if ( pc != 0 ) {
1413:src/storage.c ****       /*
1414:src/storage.c ****        *  CLP in library
1415:src/storage.c ****        */
1416:src/storage.c ****       unsigned int old_pc = state_pc();
1417:src/storage.c ****       set_pc( pc );
1418:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1419:src/storage.c ****       if ( space_needed <= free ) {
1420:src/storage.c **** 	clrprog();
1421:src/storage.c ****       }
1422:src/storage.c ****       set_pc( old_pc );
1423:src/storage.c ****     }
1424:src/storage.c ****     if ( space_needed > free ) {
1425:src/storage.c ****       error_message( ERR_FLASH_FULL );
1426:src/storage.c ****       return;
1427:src/storage.c ****     }
1428:src/storage.c ****     // 3. Append program
1429:src/storage.c ****     flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1430:src/storage.c ****   }
1431:src/storage.c **** }
 2592              		.loc 1 1431 1 is_stmt 0 view .LVU771
 2593 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2594              	.LVL249:
 2595              	.L212:
 2596              	.LBB85:
1405:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2597              		.loc 1 1405 5 is_stmt 1 view .LVU772
1406:src/storage.c ****     
 2598              		.loc 1 1406 41 is_stmt 0 view .LVU773
 2599 003a DFF87880 		ldr	r8, .L227+12
1405:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2600              		.loc 1 1405 26 view .LVU774
 2601 003e 4788     		ldrh	r7, [r0, #2]
 2602              	.LVL250:
1406:src/storage.c ****     
 2603              		.loc 1 1406 5 is_stmt 1 view .LVU775
1406:src/storage.c ****     
ARM GAS  /tmp/cc1iUxzj.s 			page 83


 2604              		.loc 1 1406 41 is_stmt 0 view .LVU776
 2605 0040 D8F80030 		ldr	r3, [r8]
1411:src/storage.c ****     if ( pc != 0 ) {
 2606              		.loc 1 1411 10 view .LVU777
 2607 0044 4FF48040 		mov	r0, #16384
 2608              	.LVL251:
1406:src/storage.c ****     
 2609              		.loc 1 1406 41 view .LVU778
 2610 0048 5D88     		ldrh	r5, [r3, #2]
1411:src/storage.c ****     if ( pc != 0 ) {
 2611              		.loc 1 1411 10 view .LVU779
 2612 004a FFF7FEFF 		bl	find_opcode_from
 2613              	.LVL252:
1406:src/storage.c ****     
 2614              		.loc 1 1406 10 view .LVU780
 2615 004e C5F5FF55 		rsb	r5, r5, #8160
 2616 0052 1E35     		adds	r5, r5, #30
 2617              	.LVL253:
1411:src/storage.c ****     if ( pc != 0 ) {
 2618              		.loc 1 1411 5 is_stmt 1 view .LVU781
1412:src/storage.c ****       /*
 2619              		.loc 1 1412 5 view .LVU782
1412:src/storage.c ****       /*
 2620              		.loc 1 1412 8 is_stmt 0 view .LVU783
 2621 0054 60B9     		cbnz	r0, .L224
1405:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2622              		.loc 1 1405 26 view .LVU784
 2623 0056 3E46     		mov	r6, r7
 2624              	.LVL254:
 2625              	.L214:
1424:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2626              		.loc 1 1424 5 is_stmt 1 view .LVU785
1424:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2627              		.loc 1 1424 8 is_stmt 0 view .LVU786
 2628 0058 B542     		cmp	r5, r6
 2629 005a 1DDB     		blt	.L225
1429:src/storage.c ****   }
 2630              		.loc 1 1429 5 is_stmt 1 view .LVU787
1429:src/storage.c ****   }
 2631              		.loc 1 1429 28 is_stmt 0 view .LVU788
 2632 005c D8F80030 		ldr	r3, [r8]
1429:src/storage.c ****   }
 2633              		.loc 1 1429 5 view .LVU789
 2634 0060 5888     		ldrh	r0, [r3, #2]
 2635 0062 211D     		adds	r1, r4, #4
 2636 0064 3B18     		adds	r3, r7, r0
 2637 0066 3A46     		mov	r2, r7
 2638              	.LBE85:
 2639              		.loc 1 1431 1 view .LVU790
 2640 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2641              		.cfi_remember_state
 2642              		.cfi_restore 14
 2643              		.cfi_restore 10
 2644              		.cfi_restore 9
 2645              		.cfi_restore 8
 2646              		.cfi_restore 7
 2647              		.cfi_restore 6
ARM GAS  /tmp/cc1iUxzj.s 			page 84


 2648              		.cfi_restore 5
 2649              		.cfi_restore 4
 2650              		.cfi_def_cfa_offset 0
 2651              	.LVL255:
 2652              	.LBB86:
1429:src/storage.c ****   }
 2653              		.loc 1 1429 5 view .LVU791
 2654 006c FFF7FEBF 		b	flash_append
 2655              	.LVL256:
 2656              	.L224:
 2657              		.cfi_restore_state
 2658              	.LBB82:
1416:src/storage.c ****       set_pc( pc );
 2659              		.loc 1 1416 7 is_stmt 1 view .LVU792
1416:src/storage.c ****       set_pc( pc );
 2660              		.loc 1 1416 29 is_stmt 0 view .LVU793
 2661 0070 0F4E     		ldr	r6, .L227+8
 2662 0072 3368     		ldr	r3, [r6]
1416:src/storage.c ****       set_pc( pc );
 2663              		.loc 1 1416 20 view .LVU794
 2664 0074 B3F8E097 		ldrh	r9, [r3, #2016]
 2665              	.LVL257:
1417:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2666              		.loc 1 1417 7 is_stmt 1 view .LVU795
 2667 0078 FFF7FEFF 		bl	set_pc
 2668              	.LVL258:
1418:src/storage.c ****       if ( space_needed <= free ) {
 2669              		.loc 1 1418 7 view .LVU796
1418:src/storage.c ****       if ( space_needed <= free ) {
 2670              		.loc 1 1418 27 is_stmt 0 view .LVU797
 2671 007c 3368     		ldr	r3, [r6]
 2672 007e B3F8EE67 		ldrh	r6, [r3, #2030]
1418:src/storage.c ****       if ( space_needed <= free ) {
 2673              		.loc 1 1418 37 view .LVU798
 2674 0082 B3F8EC37 		ldrh	r3, [r3, #2028]
1418:src/storage.c ****       if ( space_needed <= free ) {
 2675              		.loc 1 1418 25 view .LVU799
 2676 0086 0136     		adds	r6, r6, #1
1418:src/storage.c ****       if ( space_needed <= free ) {
 2677              		.loc 1 1418 35 view .LVU800
 2678 0088 F61A     		subs	r6, r6, r3
1418:src/storage.c ****       if ( space_needed <= free ) {
 2679              		.loc 1 1418 20 view .LVU801
 2680 008a BE1B     		subs	r6, r7, r6
 2681              	.LVL259:
1419:src/storage.c **** 	clrprog();
 2682              		.loc 1 1419 7 is_stmt 1 view .LVU802
1419:src/storage.c **** 	clrprog();
 2683              		.loc 1 1419 10 is_stmt 0 view .LVU803
 2684 008c B542     		cmp	r5, r6
 2685 008e 08DA     		bge	.L226
 2686              	.L215:
1422:src/storage.c ****     }
 2687              		.loc 1 1422 7 is_stmt 1 view .LVU804
 2688 0090 4846     		mov	r0, r9
 2689 0092 FFF7FEFF 		bl	set_pc
 2690              	.LVL260:
ARM GAS  /tmp/cc1iUxzj.s 			page 85


 2691 0096 DFE7     		b	.L214
 2692              	.LVL261:
 2693              	.L225:
1422:src/storage.c ****     }
 2694              		.loc 1 1422 7 is_stmt 0 view .LVU805
 2695              	.LBE82:
1425:src/storage.c ****       return;
 2696              		.loc 1 1425 7 is_stmt 1 view .LVU806
 2697              	.LBE86:
 2698              		.loc 1 1431 1 is_stmt 0 view .LVU807
 2699 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2700              		.cfi_remember_state
 2701              		.cfi_restore 14
 2702              		.cfi_restore 10
 2703              		.cfi_restore 9
 2704              		.cfi_restore 8
 2705              		.cfi_restore 7
 2706              		.cfi_restore 6
 2707              		.cfi_restore 5
 2708              		.cfi_restore 4
 2709              		.cfi_def_cfa_offset 0
 2710              	.LVL262:
 2711              	.LBB87:
1425:src/storage.c ****       return;
 2712              		.loc 1 1425 7 view .LVU808
 2713 009c 1720     		movs	r0, #23
 2714 009e FFF7FEBF 		b	error_message
 2715              	.LVL263:
 2716              	.L226:
 2717              		.cfi_restore_state
 2718              	.LBB83:
1420:src/storage.c ****       }
 2719              		.loc 1 1420 2 is_stmt 1 view .LVU809
 2720 00a2 FFF7FEFF 		bl	clrprog
 2721              	.LVL264:
 2722 00a6 F3E7     		b	.L215
 2723              	.L228:
 2724              		.align	2
 2725              	.L227:
 2726 00a8 00000000 		.word	DispMsg
 2727 00ac 00000000 		.word	.LC7
 2728 00b0 00000000 		.word	main_ram
 2729 00b4 00000000 		.word	library_ram
 2730              	.LBE83:
 2731              	.LBE87:
 2732              		.cfi_endproc
 2733              	.LFE43:
 2735              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2736              		.align	2
 2737              	.LC8:
 2738 0000 4572726F 		.ascii	"Error\000"
 2738      7200
 2739 0006 0000     		.align	2
 2740              	.LC9:
 2741 0008 53617665 		.ascii	"Saved\000"
 2741      6400
 2742              		.section	.text.flash_backup,"ax",%progbits
ARM GAS  /tmp/cc1iUxzj.s 			page 86


 2743              		.align	1
 2744              		.p2align 2,,3
 2745              		.global	flash_backup
 2746              		.syntax unified
 2747              		.thumb
 2748              		.thumb_func
 2749              		.fpu fpv4-sp-d16
 2751              	flash_backup:
 2752              	.LVL265:
 2753              	.LFB25:
 755:src/storage.c **** 	if ( not_running() ) {
 2754              		.loc 1 755 1 view -0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 0
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 756:src/storage.c **** 		process_cmdline_set_lift();
 2758              		.loc 1 756 2 view .LVU811
 755:src/storage.c **** 	if ( not_running() ) {
 2759              		.loc 1 755 1 is_stmt 0 view .LVU812
 2760 0000 10B5     		push	{r4, lr}
 2761              		.cfi_def_cfa_offset 8
 2762              		.cfi_offset 4, -8
 2763              		.cfi_offset 14, -4
 756:src/storage.c **** 		process_cmdline_set_lift();
 2764              		.loc 1 756 7 view .LVU813
 2765 0002 FFF7FEFF 		bl	not_running
 2766              	.LVL266:
 756:src/storage.c **** 		process_cmdline_set_lift();
 2767              		.loc 1 756 5 view .LVU814
 2768 0006 00B9     		cbnz	r0, .L236
 768:src/storage.c **** 
 2769              		.loc 1 768 1 view .LVU815
 2770 0008 10BD     		pop	{r4, pc}
 2771              	.L236:
 757:src/storage.c **** 		init_state();
 2772              		.loc 1 757 3 is_stmt 1 view .LVU816
 2773              	.LBB88:
 2774              	.LBB89:
 206:src/storage.c **** 			      Crc, &Crc );
 2775              		.loc 1 206 9 is_stmt 0 view .LVU817
 2776 000a 0F4C     		ldr	r4, .L238
 2777              	.LBE89:
 2778              	.LBE88:
 757:src/storage.c **** 		init_state();
 2779              		.loc 1 757 3 view .LVU818
 2780 000c FFF7FEFF 		bl	process_cmdline_set_lift
 2781              	.LVL267:
 758:src/storage.c **** 		checksum_all();
 2782              		.loc 1 758 3 is_stmt 1 view .LVU819
 2783 0010 FFF7FEFF 		bl	init_state
 2784              	.LVL268:
 759:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2785              		.loc 1 759 3 view .LVU820
 2786              	.LBB91:
 2787              	.LBI88:
 204:src/storage.c **** {
 2788              		.loc 1 204 5 view .LVU821
ARM GAS  /tmp/cc1iUxzj.s 			page 87


 2789              	.LBB90:
 206:src/storage.c **** 			      Crc, &Crc );
 2790              		.loc 1 206 2 view .LVU822
 206:src/storage.c **** 			      Crc, &Crc );
 2791              		.loc 1 206 9 is_stmt 0 view .LVU823
 2792 0014 2068     		ldr	r0, [r4]
 2793 0016 40F2FE71 		movw	r1, #2046
 2794 001a 4318     		adds	r3, r0, r1
 2795 001c B0F8FE27 		ldrh	r2, [r0, #2046]
 2796 0020 FFF7FEFF 		bl	test_checksum
 2797              	.LVL269:
 2798              	.LBE90:
 2799              	.LBE91:
 760:src/storage.c **** 			error_message( ERR_IO );
 2800              		.loc 1 760 3 is_stmt 1 view .LVU824
 760:src/storage.c **** 			error_message( ERR_IO );
 2801              		.loc 1 760 8 is_stmt 0 view .LVU825
 2802 0024 094B     		ldr	r3, .L238+4
 2803 0026 2168     		ldr	r1, [r4]
 2804 0028 1868     		ldr	r0, [r3]
 2805 002a 0822     		movs	r2, #8
 2806 002c FFF7FEFF 		bl	program_flash
 2807              	.LVL270:
 760:src/storage.c **** 			error_message( ERR_IO );
 2808              		.loc 1 760 6 view .LVU826
 2809 0030 18B9     		cbnz	r0, .L237
 765:src/storage.c **** 		}
 2810              		.loc 1 765 4 is_stmt 1 view .LVU827
 765:src/storage.c **** 		}
 2811              		.loc 1 765 12 is_stmt 0 view .LVU828
 2812 0032 074B     		ldr	r3, .L238+8
 2813 0034 074A     		ldr	r2, .L238+12
 2814 0036 1A60     		str	r2, [r3]
 768:src/storage.c **** 
 2815              		.loc 1 768 1 view .LVU829
 2816 0038 10BD     		pop	{r4, pc}
 2817              	.L237:
 761:src/storage.c **** 			DispMsg = "Error";
 2818              		.loc 1 761 4 is_stmt 1 view .LVU830
 2819 003a 1120     		movs	r0, #17
 2820 003c FFF7FEFF 		bl	error_message
 2821              	.LVL271:
 762:src/storage.c **** 		}
 2822              		.loc 1 762 4 view .LVU831
 762:src/storage.c **** 		}
 2823              		.loc 1 762 12 is_stmt 0 view .LVU832
 2824 0040 034B     		ldr	r3, .L238+8
 2825 0042 054A     		ldr	r2, .L238+16
 2826 0044 1A60     		str	r2, [r3]
 768:src/storage.c **** 
 2827              		.loc 1 768 1 view .LVU833
 2828 0046 10BD     		pop	{r4, pc}
 2829              	.L239:
 2830              		.align	2
 2831              	.L238:
 2832 0048 00000000 		.word	main_ram
 2833 004c 00000000 		.word	backup_ram
ARM GAS  /tmp/cc1iUxzj.s 			page 88


 2834 0050 00000000 		.word	DispMsg
 2835 0054 08000000 		.word	.LC9
 2836 0058 00000000 		.word	.LC8
 2837              		.cfi_endproc
 2838              	.LFE25:
 2840              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2841              		.align	2
 2842              	.LC10:
 2843 0000 52657374 		.ascii	"Restored\000"
 2843      6F726564 
 2843      00
 2844              		.section	.text.flash_restore,"ax",%progbits
 2845              		.align	1
 2846              		.p2align 2,,3
 2847              		.global	flash_restore
 2848              		.syntax unified
 2849              		.thumb
 2850              		.thumb_func
 2851              		.fpu fpv4-sp-d16
 2853              	flash_restore:
 2854              	.LVL272:
 2855              	.LFB26:
 772:src/storage.c **** 	if ( not_running() ) {
 2856              		.loc 1 772 1 is_stmt 1 view -0
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 773:src/storage.c **** 		if ( checksum_backup() ) {
 2860              		.loc 1 773 2 view .LVU835
 772:src/storage.c **** 	if ( not_running() ) {
 2861              		.loc 1 772 1 is_stmt 0 view .LVU836
 2862 0000 08B5     		push	{r3, lr}
 2863              		.cfi_def_cfa_offset 8
 2864              		.cfi_offset 3, -8
 2865              		.cfi_offset 14, -4
 773:src/storage.c **** 		if ( checksum_backup() ) {
 2866              		.loc 1 773 7 view .LVU837
 2867 0002 FFF7FEFF 		bl	not_running
 2868              	.LVL273:
 773:src/storage.c **** 		if ( checksum_backup() ) {
 2869              		.loc 1 773 5 view .LVU838
 2870 0006 A0B1     		cbz	r0, .L240
 774:src/storage.c **** 			error_message( ERR_INVALID );
 2871              		.loc 1 774 3 is_stmt 1 view .LVU839
 774:src/storage.c **** 			error_message( ERR_INVALID );
 2872              		.loc 1 774 8 is_stmt 0 view .LVU840
 2873 0008 FFF7FEFF 		bl	checksum_backup
 2874              	.LVL274:
 774:src/storage.c **** 			error_message( ERR_INVALID );
 2875              		.loc 1 774 6 view .LVU841
 2876 000c 20B1     		cbz	r0, .L242
 775:src/storage.c **** 		}
 2877              		.loc 1 775 4 is_stmt 1 view .LVU842
 783:src/storage.c **** 
 2878              		.loc 1 783 1 is_stmt 0 view .LVU843
 2879 000e BDE80840 		pop	{r3, lr}
 2880              		.cfi_remember_state
ARM GAS  /tmp/cc1iUxzj.s 			page 89


 2881              		.cfi_restore 14
 2882              		.cfi_restore 3
 2883              		.cfi_def_cfa_offset 0
 775:src/storage.c **** 		}
 2884              		.loc 1 775 4 view .LVU844
 2885 0012 1220     		movs	r0, #18
 2886 0014 FFF7FEBF 		b	error_message
 2887              	.LVL275:
 2888              	.L242:
 2889              		.cfi_restore_state
 778:src/storage.c **** 			init_state();
 2890              		.loc 1 778 4 is_stmt 1 view .LVU845
 2891 0018 064B     		ldr	r3, .L247
 2892 001a 074A     		ldr	r2, .L247+4
 2893 001c 1868     		ldr	r0, [r3]
 2894 001e 1168     		ldr	r1, [r2]
 2895 0020 4FF40062 		mov	r2, #2048
 2896 0024 FFF7FEFF 		bl	xcopy
 2897              	.LVL276:
 779:src/storage.c **** 			DispMsg = "Restored";
 2898              		.loc 1 779 4 view .LVU846
 2899 0028 FFF7FEFF 		bl	init_state
 2900              	.LVL277:
 780:src/storage.c **** 		}
 2901              		.loc 1 780 4 view .LVU847
 780:src/storage.c **** 		}
 2902              		.loc 1 780 12 is_stmt 0 view .LVU848
 2903 002c 034B     		ldr	r3, .L247+8
 2904 002e 044A     		ldr	r2, .L247+12
 2905 0030 1A60     		str	r2, [r3]
 2906              	.L240:
 783:src/storage.c **** 
 2907              		.loc 1 783 1 view .LVU849
 2908 0032 08BD     		pop	{r3, pc}
 2909              	.L248:
 2910              		.align	2
 2911              	.L247:
 2912 0034 00000000 		.word	main_ram
 2913 0038 00000000 		.word	backup_ram
 2914 003c 00000000 		.word	DispMsg
 2915 0040 00000000 		.word	.LC10
 2916              		.cfi_endproc
 2917              	.LFE26:
 2919              		.section	.text.load_program,"ax",%progbits
 2920              		.align	1
 2921              		.p2align 2,,3
 2922              		.global	load_program
 2923              		.syntax unified
 2924              		.thumb
 2925              		.thumb_func
 2926              		.fpu fpv4-sp-d16
 2928              	load_program:
 2929              	.LVL278:
 2930              	.LFB27:
 791:src/storage.c **** 	if ( not_running() ) {
 2931              		.loc 1 791 1 is_stmt 1 view -0
 2932              		.cfi_startproc
ARM GAS  /tmp/cc1iUxzj.s 			page 90


 2933              		@ args = 0, pretend = 0, frame = 0
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 792:src/storage.c **** 		if ( checksum_backup() ) {
 2935              		.loc 1 792 2 view .LVU851
 791:src/storage.c **** 	if ( not_running() ) {
 2936              		.loc 1 791 1 is_stmt 0 view .LVU852
 2937 0000 08B5     		push	{r3, lr}
 2938              		.cfi_def_cfa_offset 8
 2939              		.cfi_offset 3, -8
 2940              		.cfi_offset 14, -4
 792:src/storage.c **** 		if ( checksum_backup() ) {
 2941              		.loc 1 792 7 view .LVU853
 2942 0002 FFF7FEFF 		bl	not_running
 2943              	.LVL279:
 792:src/storage.c **** 		if ( checksum_backup() ) {
 2944              		.loc 1 792 5 view .LVU854
 2945 0006 98B1     		cbz	r0, .L249
 793:src/storage.c **** 			/*
 2946              		.loc 1 793 3 is_stmt 1 view .LVU855
 793:src/storage.c **** 			/*
 2947              		.loc 1 793 8 is_stmt 0 view .LVU856
 2948 0008 FFF7FEFF 		bl	checksum_backup
 2949              	.LVL280:
 793:src/storage.c **** 			/*
 2950              		.loc 1 793 6 view .LVU857
 2951 000c 88B9     		cbnz	r0, .L253
 800:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2952              		.loc 1 800 3 is_stmt 1 view .LVU858
 2953              	.LBB92:
 2954              	.LBI92:
 247:src/storage.c **** {
 2955              		.loc 1 247 6 view .LVU859
 2956              	.LBB93:
 249:src/storage.c **** 	stoend();
 2957              		.loc 1 249 2 view .LVU860
 2958 000e FFF7FEFF 		bl	clrretstk_pc
 2959              	.LVL281:
 250:src/storage.c **** }
 2960              		.loc 1 250 2 view .LVU861
 2961              	.LBB94:
 2962              	.LBI94:
 237:src/storage.c **** {
 2963              		.loc 1 237 13 view .LVU862
 2964              	.LBB95:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2965              		.loc 1 239 2 view .LVU863
 2966 0012 0A4B     		ldr	r3, .L254
 2967              	.LBE95:
 2968              	.LBE94:
 2969              	.LBE93:
 2970              	.LBE92:
 801:src/storage.c **** 	}
 2971              		.loc 1 801 19 is_stmt 0 view .LVU864
 2972 0014 0A4A     		ldr	r2, .L254+4
 2973              	.LBB105:
 2974              	.LBB102:
 2975              	.LBB99:
ARM GAS  /tmp/cc1iUxzj.s 			page 91


 2976              	.LBB96:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2977              		.loc 1 239 2 view .LVU865
 2978 0016 1B68     		ldr	r3, [r3]
 2979              	.LBE96:
 2980              	.LBE99:
 2981              	.LBE102:
 2982              	.LBE105:
 801:src/storage.c **** 	}
 2983              		.loc 1 801 19 view .LVU866
 2984 0018 1068     		ldr	r0, [r2]
 2985              	.LBB106:
 2986              	.LBB103:
 2987              	.LBB100:
 2988              	.LBB97:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2989              		.loc 1 239 11 view .LVU867
 2990 001a 0122     		movs	r2, #1
 2991 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 240:src/storage.c **** }
 2992              		.loc 1 240 2 is_stmt 1 view .LVU868
 240:src/storage.c **** }
 2993              		.loc 1 240 12 is_stmt 0 view .LVU869
 2994 001e 4FF49D72 		mov	r2, #314
 2995              	.LBE97:
 2996              	.LBE100:
 2997              	.LBE103:
 2998              	.LBE106:
 801:src/storage.c **** 	}
 2999              		.loc 1 801 3 view .LVU870
 3000 0022 4188     		ldrh	r1, [r0, #2]
 3001              	.LBB107:
 3002              	.LBB104:
 3003              	.LBB101:
 3004              	.LBB98:
 240:src/storage.c **** }
 3005              		.loc 1 240 12 view .LVU871
 3006 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 3007              	.LBE98:
 3008              	.LBE101:
 3009              	.LBE104:
 3010              	.LBE107:
 801:src/storage.c **** 	}
 3011              		.loc 1 801 3 is_stmt 1 view .LVU872
 3012 0026 0430     		adds	r0, r0, #4
 803:src/storage.c **** 
 3013              		.loc 1 803 1 is_stmt 0 view .LVU873
 3014 0028 BDE80840 		pop	{r3, lr}
 3015              		.cfi_remember_state
 3016              		.cfi_restore 14
 3017              		.cfi_restore 3
 3018              		.cfi_def_cfa_offset 0
 801:src/storage.c **** 	}
 3019              		.loc 1 801 3 view .LVU874
 3020 002c FFF7FEBF 		b	append_program
 3021              	.LVL282:
 3022              	.L249:
ARM GAS  /tmp/cc1iUxzj.s 			page 92


 3023              		.cfi_restore_state
 803:src/storage.c **** 
 3024              		.loc 1 803 1 view .LVU875
 3025 0030 08BD     		pop	{r3, pc}
 3026              	.L253:
 797:src/storage.c **** 			return;
 3027              		.loc 1 797 4 is_stmt 1 view .LVU876
 803:src/storage.c **** 
 3028              		.loc 1 803 1 is_stmt 0 view .LVU877
 3029 0032 BDE80840 		pop	{r3, lr}
 3030              		.cfi_restore 14
 3031              		.cfi_restore 3
 3032              		.cfi_def_cfa_offset 0
 797:src/storage.c **** 			return;
 3033              		.loc 1 797 4 view .LVU878
 3034 0036 1220     		movs	r0, #18
 3035 0038 FFF7FEBF 		b	report_err
 3036              	.LVL283:
 3037              	.L255:
 3038              		.align	2
 3039              	.L254:
 3040 003c 00000000 		.word	main_ram
 3041 0040 00000000 		.word	backup_ram
 3042              		.cfi_endproc
 3043              	.LFE27:
 3045              		.section	.text.load_registers,"ax",%progbits
 3046              		.align	1
 3047              		.p2align 2,,3
 3048              		.global	load_registers
 3049              		.syntax unified
 3050              		.thumb
 3051              		.thumb_func
 3052              		.fpu fpv4-sp-d16
 3054              	load_registers:
 3055              	.LVL284:
 3056              	.LFB28:
 810:src/storage.c **** 	int count;
 3057              		.loc 1 810 1 is_stmt 1 view -0
 3058              		.cfi_startproc
 3059              		@ args = 0, pretend = 0, frame = 0
 3060              		@ frame_needed = 0, uses_anonymous_args = 0
 811:src/storage.c **** 	if ( checksum_backup() ) {
 3061              		.loc 1 811 2 view .LVU880
 812:src/storage.c **** 		/*
 3062              		.loc 1 812 2 view .LVU881
 810:src/storage.c **** 	int count;
 3063              		.loc 1 810 1 is_stmt 0 view .LVU882
 3064 0000 38B5     		push	{r3, r4, r5, lr}
 3065              		.cfi_def_cfa_offset 16
 3066              		.cfi_offset 3, -16
 3067              		.cfi_offset 4, -12
 3068              		.cfi_offset 5, -8
 3069              		.cfi_offset 14, -4
 812:src/storage.c **** 		/*
 3070              		.loc 1 812 7 view .LVU883
 3071 0002 FFF7FEFF 		bl	checksum_backup
 3072              	.LVL285:
ARM GAS  /tmp/cc1iUxzj.s 			page 93


 812:src/storage.c **** 		/*
 3073              		.loc 1 812 5 view .LVU884
 3074 0006 E0B9     		cbnz	r0, .L263
 819:src/storage.c **** 	if ( is_dblmode() ) {
 3075              		.loc 1 819 2 is_stmt 1 view .LVU885
 819:src/storage.c **** 	if ( is_dblmode() ) {
 3076              		.loc 1 819 10 is_stmt 0 view .LVU886
 3077 0008 104B     		ldr	r3, .L264
 3078 000a 1B68     		ldr	r3, [r3]
 819:src/storage.c **** 	if ( is_dblmode() ) {
 3079              		.loc 1 819 8 view .LVU887
 3080 000c 93F8CF47 		ldrb	r4, [r3, #1999]	@ zero_extendqisi2
 3081              	.LVL286:
 820:src/storage.c **** 		// Don't clobber the stack in DP mode
 3082              		.loc 1 820 2 is_stmt 1 view .LVU888
 820:src/storage.c **** 		// Don't clobber the stack in DP mode
 3083              		.loc 1 820 7 is_stmt 0 view .LVU889
 3084 0010 FFF7FEFF 		bl	is_dblmode
 3085              	.LVL287:
 820:src/storage.c **** 		// Don't clobber the stack in DP mode
 3086              		.loc 1 820 5 view .LVU890
 3087 0014 00B1     		cbz	r0, .L258
 822:src/storage.c **** 	}
 3088              		.loc 1 822 3 is_stmt 1 view .LVU891
 822:src/storage.c **** 	}
 3089              		.loc 1 822 9 is_stmt 0 view .LVU892
 3090 0016 0C3C     		subs	r4, r4, #12
 3091              	.LVL288:
 3092              	.L258:
 824:src/storage.c **** 		count = BackupFlash._numregs;
 3093              		.loc 1 824 2 is_stmt 1 view .LVU893
 824:src/storage.c **** 		count = BackupFlash._numregs;
 3094              		.loc 1 824 26 is_stmt 0 view .LVU894
 3095 0018 0D4B     		ldr	r3, .L264+4
 3096 001a 1B68     		ldr	r3, [r3]
 3097 001c 93F8CF57 		ldrb	r5, [r3, #1999]	@ zero_extendqisi2
 827:src/storage.c **** }
 3098              		.loc 1 827 9 view .LVU895
 3099 0020 0020     		movs	r0, #0
 3100 0022 A542     		cmp	r5, r4
 3101 0024 A8BF     		it	ge
 3102 0026 2546     		movge	r5, r4
 3103              	.LVL289:
 827:src/storage.c **** }
 3104              		.loc 1 827 2 is_stmt 1 view .LVU896
 827:src/storage.c **** }
 3105              		.loc 1 827 9 is_stmt 0 view .LVU897
 3106 0028 FFF7FEFF 		bl	get_reg_n
 3107              	.LVL290:
 3108 002c 0446     		mov	r4, r0
 827:src/storage.c **** }
 3109              		.loc 1 827 23 view .LVU898
 3110 002e 0020     		movs	r0, #0
 3111 0030 FFF7FEFF 		bl	get_flash_reg_n
 3112              	.LVL291:
 827:src/storage.c **** }
 3113              		.loc 1 827 2 view .LVU899
ARM GAS  /tmp/cc1iUxzj.s 			page 94


 3114 0034 EA00     		lsls	r2, r5, #3
 827:src/storage.c **** }
 3115              		.loc 1 827 23 view .LVU900
 3116 0036 0146     		mov	r1, r0
 827:src/storage.c **** }
 3117              		.loc 1 827 2 view .LVU901
 3118 0038 2046     		mov	r0, r4
 828:src/storage.c **** 
 3119              		.loc 1 828 1 view .LVU902
 3120 003a BDE83840 		pop	{r3, r4, r5, lr}
 3121              		.cfi_remember_state
 3122              		.cfi_restore 14
 3123              		.cfi_restore 5
 3124              		.cfi_restore 4
 3125              		.cfi_restore 3
 3126              		.cfi_def_cfa_offset 0
 3127              	.LVL292:
 827:src/storage.c **** }
 3128              		.loc 1 827 2 view .LVU903
 3129 003e FFF7FEBF 		b	xcopy
 3130              	.LVL293:
 3131              	.L263:
 3132              		.cfi_restore_state
 816:src/storage.c **** 		return;
 3133              		.loc 1 816 3 is_stmt 1 view .LVU904
 828:src/storage.c **** 
 3134              		.loc 1 828 1 is_stmt 0 view .LVU905
 3135 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3136              		.cfi_restore 14
 3137              		.cfi_restore 5
 3138              		.cfi_restore 4
 3139              		.cfi_restore 3
 3140              		.cfi_def_cfa_offset 0
 816:src/storage.c **** 		return;
 3141              		.loc 1 816 3 view .LVU906
 3142 0046 1220     		movs	r0, #18
 3143 0048 FFF7FEBF 		b	report_err
 3144              	.LVL294:
 3145              	.L265:
 3146              		.align	2
 3147              	.L264:
 3148 004c 00000000 		.word	main_ram
 3149 0050 00000000 		.word	backup_ram
 3150              		.cfi_endproc
 3151              	.LFE28:
 3153              		.section	.text.load_sigma,"ax",%progbits
 3154              		.align	1
 3155              		.p2align 2,,3
 3156              		.global	load_sigma
 3157              		.syntax unified
 3158              		.thumb
 3159              		.thumb_func
 3160              		.fpu fpv4-sp-d16
 3162              	load_sigma:
 3163              	.LVL295:
 3164              	.LFB29:
 835:src/storage.c **** 	if ( checksum_backup() ) {
ARM GAS  /tmp/cc1iUxzj.s 			page 95


 3165              		.loc 1 835 1 is_stmt 1 view -0
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 0, uses_anonymous_args = 0
 836:src/storage.c **** 		/*
 3169              		.loc 1 836 2 view .LVU908
 835:src/storage.c **** 	if ( checksum_backup() ) {
 3170              		.loc 1 835 1 is_stmt 0 view .LVU909
 3171 0000 08B5     		push	{r3, lr}
 3172              		.cfi_def_cfa_offset 8
 3173              		.cfi_offset 3, -8
 3174              		.cfi_offset 14, -4
 836:src/storage.c **** 		/*
 3175              		.loc 1 836 7 view .LVU910
 3176 0002 FFF7FEFF 		bl	checksum_backup
 3177              	.LVL296:
 836:src/storage.c **** 		/*
 3178              		.loc 1 836 5 view .LVU911
 3179 0006 B0B9     		cbnz	r0, .L270
 843:src/storage.c **** 		/*
 3180              		.loc 1 843 2 is_stmt 1 view .LVU912
 843:src/storage.c **** 		/*
 3181              		.loc 1 843 9 is_stmt 0 view .LVU913
 3182 0008 0D4B     		ldr	r3, .L272
 3183 000a 1868     		ldr	r0, [r3]
 843:src/storage.c **** 		/*
 3184              		.loc 1 843 7 view .LVU914
 3185 000c 90F8DD37 		ldrb	r3, [r0, #2013]	@ zero_extendqisi2
 843:src/storage.c **** 		/*
 3186              		.loc 1 843 5 view .LVU915
 3187 0010 9B06     		lsls	r3, r3, #26
 3188 0012 0BD5     		bpl	.L271
 850:src/storage.c **** }
 3189              		.loc 1 850 2 is_stmt 1 view .LVU916
 850:src/storage.c **** }
 3190              		.loc 1 850 56 is_stmt 0 view .LVU917
 3191 0014 90F8CF37 		ldrb	r3, [r0, #1999]	@ zero_extendqisi2
 3192 0018 C3F16403 		rsb	r3, r3, #100
 850:src/storage.c **** }
 3193              		.loc 1 850 81 view .LVU918
 3194 001c 00EBC300 		add	r0, r0, r3, lsl #3
 850:src/storage.c **** }
 3195              		.loc 1 850 2 view .LVU919
 3196 0020 00F56870 		add	r0, r0, #928
 851:src/storage.c **** 
 3197              		.loc 1 851 1 view .LVU920
 3198 0024 BDE80840 		pop	{r3, lr}
 3199              		.cfi_remember_state
 3200              		.cfi_restore 14
 3201              		.cfi_restore 3
 3202              		.cfi_def_cfa_offset 0
 850:src/storage.c **** }
 3203              		.loc 1 850 2 view .LVU921
 3204 0028 FFF7FEBF 		b	sigmaCopy
 3205              	.LVL297:
 3206              	.L271:
 3207              		.cfi_restore_state
ARM GAS  /tmp/cc1iUxzj.s 			page 96


 847:src/storage.c **** 		return;
 3208              		.loc 1 847 3 is_stmt 1 view .LVU922
 851:src/storage.c **** 
 3209              		.loc 1 851 1 is_stmt 0 view .LVU923
 3210 002c BDE80840 		pop	{r3, lr}
 3211              		.cfi_remember_state
 3212              		.cfi_restore 14
 3213              		.cfi_restore 3
 3214              		.cfi_def_cfa_offset 0
 847:src/storage.c **** 		return;
 3215              		.loc 1 847 3 view .LVU924
 3216 0030 0F20     		movs	r0, #15
 3217 0032 FFF7FEBF 		b	report_err
 3218              	.LVL298:
 3219              	.L270:
 3220              		.cfi_restore_state
 840:src/storage.c **** 		return;
 3221              		.loc 1 840 3 is_stmt 1 view .LVU925
 851:src/storage.c **** 
 3222              		.loc 1 851 1 is_stmt 0 view .LVU926
 3223 0036 BDE80840 		pop	{r3, lr}
 3224              		.cfi_restore 14
 3225              		.cfi_restore 3
 3226              		.cfi_def_cfa_offset 0
 840:src/storage.c **** 		return;
 3227              		.loc 1 840 3 view .LVU927
 3228 003a 1220     		movs	r0, #18
 3229 003c FFF7FEBF 		b	report_err
 3230              	.LVL299:
 3231              	.L273:
 3232              		.align	2
 3233              	.L272:
 3234 0040 00000000 		.word	backup_ram
 3235              		.cfi_endproc
 3236              	.LFE29:
 3238              		.section	.text.load_state,"ax",%progbits
 3239              		.align	1
 3240              		.p2align 2,,3
 3241              		.global	load_state
 3242              		.syntax unified
 3243              		.thumb
 3244              		.thumb_func
 3245              		.fpu fpv4-sp-d16
 3247              	load_state:
 3248              	.LVL300:
 3249              	.LFB30:
 858:src/storage.c **** 	if ( not_running() ) {
 3250              		.loc 1 858 1 is_stmt 1 view -0
 3251              		.cfi_startproc
 3252              		@ args = 0, pretend = 0, frame = 0
 3253              		@ frame_needed = 0, uses_anonymous_args = 0
 859:src/storage.c **** 		if ( checksum_backup() ) {
 3254              		.loc 1 859 2 view .LVU929
 858:src/storage.c **** 	if ( not_running() ) {
 3255              		.loc 1 858 1 is_stmt 0 view .LVU930
 3256 0000 08B5     		push	{r3, lr}
 3257              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc1iUxzj.s 			page 97


 3258              		.cfi_offset 3, -8
 3259              		.cfi_offset 14, -4
 859:src/storage.c **** 		if ( checksum_backup() ) {
 3260              		.loc 1 859 7 view .LVU931
 3261 0002 FFF7FEFF 		bl	not_running
 3262              	.LVL301:
 859:src/storage.c **** 		if ( checksum_backup() ) {
 3263              		.loc 1 859 5 view .LVU932
 3264 0006 98B1     		cbz	r0, .L274
 860:src/storage.c **** 			/*
 3265              		.loc 1 860 3 is_stmt 1 view .LVU933
 860:src/storage.c **** 			/*
 3266              		.loc 1 860 8 is_stmt 0 view .LVU934
 3267 0008 FFF7FEFF 		bl	checksum_backup
 3268              	.LVL302:
 860:src/storage.c **** 			/*
 3269              		.loc 1 860 6 view .LVU935
 3270 000c 88B9     		cbnz	r0, .L278
 867:src/storage.c **** 		init_state();
 3271              		.loc 1 867 3 is_stmt 1 view .LVU936
 867:src/storage.c **** 		init_state();
 3272              		.loc 1 867 11 is_stmt 0 view .LVU937
 3273 000e 0B4B     		ldr	r3, .L279
 867:src/storage.c **** 		init_state();
 3274              		.loc 1 867 20 view .LVU938
 3275 0010 0B4A     		ldr	r2, .L279+4
 867:src/storage.c **** 		init_state();
 3276              		.loc 1 867 10 view .LVU939
 3277 0012 1868     		ldr	r0, [r3]
 867:src/storage.c **** 		init_state();
 3278              		.loc 1 867 19 view .LVU940
 3279 0014 1168     		ldr	r1, [r2]
 867:src/storage.c **** 		init_state();
 3280              		.loc 1 867 3 view .LVU941
 3281 0016 00F5FA60 		add	r0, r0, #2000
 3282 001a 01F5FA61 		add	r1, r1, #2000
 3283 001e 2E22     		movs	r2, #46
 3284 0020 FFF7FEFF 		bl	xcopy
 3285              	.LVL303:
 868:src/storage.c **** 		clrretstk_pc();
 3286              		.loc 1 868 3 is_stmt 1 view .LVU942
 3287 0024 FFF7FEFF 		bl	init_state
 3288              	.LVL304:
 869:src/storage.c **** 	}
 3289              		.loc 1 869 3 view .LVU943
 871:src/storage.c **** 
 3290              		.loc 1 871 1 is_stmt 0 view .LVU944
 3291 0028 BDE80840 		pop	{r3, lr}
 3292              		.cfi_remember_state
 3293              		.cfi_restore 14
 3294              		.cfi_restore 3
 3295              		.cfi_def_cfa_offset 0
 869:src/storage.c **** 	}
 3296              		.loc 1 869 3 view .LVU945
 3297 002c FFF7FEBF 		b	clrretstk_pc
 3298              	.LVL305:
 3299              	.L274:
ARM GAS  /tmp/cc1iUxzj.s 			page 98


 3300              		.cfi_restore_state
 871:src/storage.c **** 
 3301              		.loc 1 871 1 view .LVU946
 3302 0030 08BD     		pop	{r3, pc}
 3303              	.L278:
 864:src/storage.c **** 			return;
 3304              		.loc 1 864 4 is_stmt 1 view .LVU947
 871:src/storage.c **** 
 3305              		.loc 1 871 1 is_stmt 0 view .LVU948
 3306 0032 BDE80840 		pop	{r3, lr}
 3307              		.cfi_restore 14
 3308              		.cfi_restore 3
 3309              		.cfi_def_cfa_offset 0
 864:src/storage.c **** 			return;
 3310              		.loc 1 864 4 view .LVU949
 3311 0036 1220     		movs	r0, #18
 3312 0038 FFF7FEBF 		b	report_err
 3313              	.LVL306:
 3314              	.L280:
 3315              		.align	2
 3316              	.L279:
 3317 003c 00000000 		.word	main_ram
 3318 0040 00000000 		.word	backup_ram
 3319              		.cfi_endproc
 3320              	.LFE30:
 3322              		.section	.text.store_program,"ax",%progbits
 3323              		.align	1
 3324              		.p2align 2,,3
 3325              		.global	store_program
 3326              		.syntax unified
 3327              		.thumb
 3328              		.thumb_func
 3329              		.fpu fpv4-sp-d16
 3331              	store_program:
 3332              	.LVL307:
 3333              	.LFB31:
 878:src/storage.c **** 	opcode lbl; 
 3334              		.loc 1 878 1 is_stmt 1 view -0
 3335              		.cfi_startproc
 3336              		@ args = 0, pretend = 0, frame = 0
 3337              		@ frame_needed = 0, uses_anonymous_args = 0
 879:src/storage.c **** 	unsigned int pc;
 3338              		.loc 1 879 2 view .LVU951
 880:src/storage.c **** 	int space_needed, count, free;
 3339              		.loc 1 880 2 view .LVU952
 881:src/storage.c **** 
 3340              		.loc 1 881 2 view .LVU953
 883:src/storage.c **** 		/*
 3341              		.loc 1 883 2 view .LVU954
 878:src/storage.c **** 	opcode lbl; 
 3342              		.loc 1 878 1 is_stmt 0 view .LVU955
 3343 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3344              		.cfi_def_cfa_offset 24
 3345              		.cfi_offset 4, -24
 3346              		.cfi_offset 5, -20
 3347              		.cfi_offset 6, -16
 3348              		.cfi_offset 7, -12
ARM GAS  /tmp/cc1iUxzj.s 			page 99


 3349              		.cfi_offset 8, -8
 3350              		.cfi_offset 14, -4
 883:src/storage.c **** 		/*
 3351              		.loc 1 883 7 view .LVU956
 3352 0004 FFF7FEFF 		bl	not_running
 3353              	.LVL308:
 883:src/storage.c **** 		/*
 3354              		.loc 1 883 5 view .LVU957
 3355 0008 0028     		cmp	r0, #0
 3356 000a 3BD0     		beq	.L281
 887:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3357              		.loc 1 887 3 is_stmt 1 view .LVU958
 3358              	.LVL309:
 888:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3359              		.loc 1 888 3 view .LVU959
 887:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3360              		.loc 1 887 8 is_stmt 0 view .LVU960
 3361 000c 314C     		ldr	r4, .L295
 3362              	.LVL310:
 887:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3363              		.loc 1 887 8 view .LVU961
 3364 000e 2368     		ldr	r3, [r4]
 3365 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 888:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3366              		.loc 1 888 6 view .LVU962
 3367 0014 5B04     		lsls	r3, r3, #17
 3368 0016 37D4     		bmi	.L291
 895:src/storage.c **** 		lbl = getprog( ProgBegin );
 3369              		.loc 1 895 3 is_stmt 1 view .LVU963
 3370 0018 0120     		movs	r0, #1
 3371 001a FFF7FEFF 		bl	update_program_bounds
 3372              	.LVL311:
 896:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3373              		.loc 1 896 3 view .LVU964
 896:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3374              		.loc 1 896 18 is_stmt 0 view .LVU965
 3375 001e 2368     		ldr	r3, [r4]
 896:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3376              		.loc 1 896 9 view .LVU966
 3377 0020 B3F8EC07 		ldrh	r0, [r3, #2028]
 3378 0024 FFF7FEFF 		bl	getprog
 3379              	.LVL312:
 897:src/storage.c **** 			report_err( ERR_NO_LBL );
 3380              		.loc 1 897 3 is_stmt 1 view .LVU967
 897:src/storage.c **** 			report_err( ERR_NO_LBL );
 3381              		.loc 1 897 9 is_stmt 0 view .LVU968
 3382 0028 00F47043 		and	r3, r0, #61440
 897:src/storage.c **** 			report_err( ERR_NO_LBL );
 3383              		.loc 1 897 6 view .LVU969
 3384 002c B3F5704F 		cmp	r3, #61440
 3385 0030 2FD1     		bne	.L284
 897:src/storage.c **** 			report_err( ERR_NO_LBL );
 3386              		.loc 1 897 20 discriminator 1 view .LVU970
 3387 0032 10F4706F 		tst	r0, #3840
 897:src/storage.c **** 			report_err( ERR_NO_LBL );
 3388              		.loc 1 897 23 discriminator 1 view .LVU971
 3389 0036 C0F30322 		ubfx	r2, r0, #8, #4
ARM GAS  /tmp/cc1iUxzj.s 			page 100


 897:src/storage.c **** 			report_err( ERR_NO_LBL );
 3390              		.loc 1 897 20 discriminator 1 view .LVU972
 3391 003a 2AD1     		bne	.L284
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3392              		.loc 1 904 3 is_stmt 1 view .LVU973
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3393              		.loc 1 904 30 is_stmt 0 view .LVU974
 3394 003c 2368     		ldr	r3, [r4]
 905:src/storage.c **** 
 3395              		.loc 1 905 39 view .LVU975
 3396 003e 264E     		ldr	r6, .L295+4
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3397              		.loc 1 904 30 view .LVU976
 3398 0040 B3F8EE57 		ldrh	r5, [r3, #2030]
 905:src/storage.c **** 
 3399              		.loc 1 905 39 view .LVU977
 3400 0044 3168     		ldr	r1, [r6]
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3401              		.loc 1 904 40 view .LVU978
 3402 0046 B3F8EC37 		ldrh	r3, [r3, #2028]
 905:src/storage.c **** 
 3403              		.loc 1 905 39 view .LVU979
 3404 004a 4F88     		ldrh	r7, [r1, #2]
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3405              		.loc 1 904 28 view .LVU980
 3406 004c 0135     		adds	r5, r5, #1
 910:src/storage.c **** 		if ( pc != 0 ) {
 3407              		.loc 1 910 8 view .LVU981
 3408 004e 0146     		mov	r1, r0
 3409 0050 4FF48040 		mov	r0, #16384
 3410              	.LVL313:
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3411              		.loc 1 904 24 view .LVU982
 3412 0054 ED1A     		subs	r5, r5, r3
 3413              	.LVL314:
 905:src/storage.c **** 
 3414              		.loc 1 905 3 is_stmt 1 view .LVU983
 910:src/storage.c **** 		if ( pc != 0 ) {
 3415              		.loc 1 910 8 is_stmt 0 view .LVU984
 3416 0056 FFF7FEFF 		bl	find_opcode_from
 3417              	.LVL315:
 905:src/storage.c **** 
 3418              		.loc 1 905 8 view .LVU985
 3419 005a C7F5FF57 		rsb	r7, r7, #8160
 3420 005e 1E37     		adds	r7, r7, #30
 3421              	.LVL316:
 910:src/storage.c **** 		if ( pc != 0 ) {
 3422              		.loc 1 910 3 is_stmt 1 view .LVU986
 911:src/storage.c **** 			/*
 3423              		.loc 1 911 3 view .LVU987
 911:src/storage.c **** 			/*
 3424              		.loc 1 911 6 is_stmt 0 view .LVU988
 3425 0060 08BB     		cbnz	r0, .L292
 904:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3426              		.loc 1 904 24 view .LVU989
 3427 0062 2C46     		mov	r4, r5
 3428              	.LVL317:
ARM GAS  /tmp/cc1iUxzj.s 			page 101


 3429              	.L286:
 923:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3430              		.loc 1 923 3 is_stmt 1 view .LVU990
 923:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3431              		.loc 1 923 6 is_stmt 0 view .LVU991
 3432 0064 BC42     		cmp	r4, r7
 3433 0066 19DC     		bgt	.L293
 928:src/storage.c **** 	}
 3434              		.loc 1 928 3 is_stmt 1 view .LVU992
 928:src/storage.c **** 	}
 3435              		.loc 1 928 26 is_stmt 0 view .LVU993
 3436 0068 3368     		ldr	r3, [r6]
 928:src/storage.c **** 	}
 3437              		.loc 1 928 3 view .LVU994
 3438 006a 5C88     		ldrh	r4, [r3, #2]
 3439              	.LVL318:
 928:src/storage.c **** 	}
 3440              		.loc 1 928 3 view .LVU995
 3441 006c FFF7FEFF 		bl	get_current_prog
 3442              	.LVL319:
 928:src/storage.c **** 	}
 3443              		.loc 1 928 69 view .LVU996
 3444 0070 3368     		ldr	r3, [r6]
 3445 0072 5B88     		ldrh	r3, [r3, #2]
 928:src/storage.c **** 	}
 3446              		.loc 1 928 3 view .LVU997
 3447 0074 0146     		mov	r1, r0
 3448 0076 2B44     		add	r3, r3, r5
 3449 0078 2046     		mov	r0, r4
 3450 007a 2A46     		mov	r2, r5
 930:src/storage.c **** 
 3451              		.loc 1 930 1 view .LVU998
 3452 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3453              		.cfi_remember_state
 3454              		.cfi_restore 14
 3455              		.cfi_restore 8
 3456              		.cfi_restore 7
 3457              		.cfi_restore 6
 3458              		.cfi_restore 5
 3459              		.cfi_restore 4
 3460              		.cfi_def_cfa_offset 0
 3461              	.LVL320:
 928:src/storage.c **** 	}
 3462              		.loc 1 928 3 view .LVU999
 3463 0080 FFF7FEBF 		b	flash_append
 3464              	.LVL321:
 3465              	.L281:
 3466              		.cfi_restore_state
 930:src/storage.c **** 
 3467              		.loc 1 930 1 view .LVU1000
 3468 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3469              	.LVL322:
 3470              	.L291:
 889:src/storage.c **** 			return;
 3471              		.loc 1 889 4 is_stmt 1 view .LVU1001
 930:src/storage.c **** 
 3472              		.loc 1 930 1 is_stmt 0 view .LVU1002
ARM GAS  /tmp/cc1iUxzj.s 			page 102


 3473 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3474              		.cfi_remember_state
 3475              		.cfi_restore 14
 3476              		.cfi_restore 8
 3477              		.cfi_restore 7
 3478              		.cfi_restore 6
 3479              		.cfi_restore 5
 3480              		.cfi_restore 4
 3481              		.cfi_def_cfa_offset 0
 3482              	.LVL323:
 889:src/storage.c **** 			return;
 3483              		.loc 1 889 4 view .LVU1003
 3484 008c 0720     		movs	r0, #7
 3485 008e FFF7FEBF 		b	report_err
 3486              	.LVL324:
 3487              	.L284:
 3488              		.cfi_restore_state
 898:src/storage.c **** 			return;
 3489              		.loc 1 898 4 is_stmt 1 view .LVU1004
 930:src/storage.c **** 
 3490              		.loc 1 930 1 is_stmt 0 view .LVU1005
 3491 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3492              		.cfi_remember_state
 3493              		.cfi_restore 14
 3494              		.cfi_restore 8
 3495              		.cfi_restore 7
 3496              		.cfi_restore 6
 3497              		.cfi_restore 5
 3498              		.cfi_restore 4
 3499              		.cfi_def_cfa_offset 0
 898:src/storage.c **** 			return;
 3500              		.loc 1 898 4 view .LVU1006
 3501 0096 0620     		movs	r0, #6
 3502              	.LVL325:
 898:src/storage.c **** 			return;
 3503              		.loc 1 898 4 view .LVU1007
 3504 0098 FFF7FEBF 		b	report_err
 3505              	.LVL326:
 3506              	.L293:
 3507              		.cfi_restore_state
 924:src/storage.c **** 			return;
 3508              		.loc 1 924 4 is_stmt 1 view .LVU1008
 930:src/storage.c **** 
 3509              		.loc 1 930 1 is_stmt 0 view .LVU1009
 3510 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3511              		.cfi_remember_state
 3512              		.cfi_restore 14
 3513              		.cfi_restore 8
 3514              		.cfi_restore 7
 3515              		.cfi_restore 6
 3516              		.cfi_restore 5
 3517              		.cfi_restore 4
 3518              		.cfi_def_cfa_offset 0
 3519              	.LVL327:
 924:src/storage.c **** 			return;
 3520              		.loc 1 924 4 view .LVU1010
 3521 00a0 1720     		movs	r0, #23
ARM GAS  /tmp/cc1iUxzj.s 			page 103


 3522 00a2 FFF7FEBF 		b	report_err
 3523              	.LVL328:
 3524              	.L292:
 3525              		.cfi_restore_state
 3526              	.LBB108:
 915:src/storage.c **** 			set_pc( pc );
 3527              		.loc 1 915 4 is_stmt 1 view .LVU1011
 915:src/storage.c **** 			set_pc( pc );
 3528              		.loc 1 915 26 is_stmt 0 view .LVU1012
 3529 00a6 2368     		ldr	r3, [r4]
 915:src/storage.c **** 			set_pc( pc );
 3530              		.loc 1 915 17 view .LVU1013
 3531 00a8 B3F8E087 		ldrh	r8, [r3, #2016]
 3532              	.LVL329:
 916:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3533              		.loc 1 916 4 is_stmt 1 view .LVU1014
 3534 00ac FFF7FEFF 		bl	set_pc
 3535              	.LVL330:
 917:src/storage.c **** 			if ( space_needed <= free ) {
 3536              		.loc 1 917 4 view .LVU1015
 917:src/storage.c **** 			if ( space_needed <= free ) {
 3537              		.loc 1 917 24 is_stmt 0 view .LVU1016
 3538 00b0 2368     		ldr	r3, [r4]
 3539 00b2 B3F8EE47 		ldrh	r4, [r3, #2030]
 917:src/storage.c **** 			if ( space_needed <= free ) {
 3540              		.loc 1 917 34 view .LVU1017
 3541 00b6 B3F8EC37 		ldrh	r3, [r3, #2028]
 917:src/storage.c **** 			if ( space_needed <= free ) {
 3542              		.loc 1 917 22 view .LVU1018
 3543 00ba 0134     		adds	r4, r4, #1
 917:src/storage.c **** 			if ( space_needed <= free ) {
 3544              		.loc 1 917 32 view .LVU1019
 3545 00bc E41A     		subs	r4, r4, r3
 917:src/storage.c **** 			if ( space_needed <= free ) {
 3546              		.loc 1 917 17 view .LVU1020
 3547 00be 2C1B     		subs	r4, r5, r4
 3548              	.LVL331:
 918:src/storage.c **** 				clrprog();
 3549              		.loc 1 918 4 is_stmt 1 view .LVU1021
 918:src/storage.c **** 				clrprog();
 3550              		.loc 1 918 7 is_stmt 0 view .LVU1022
 3551 00c0 A742     		cmp	r7, r4
 3552 00c2 03DA     		bge	.L294
 3553              	.L287:
 921:src/storage.c **** 		}
 3554              		.loc 1 921 4 is_stmt 1 view .LVU1023
 3555 00c4 4046     		mov	r0, r8
 3556 00c6 FFF7FEFF 		bl	set_pc
 3557              	.LVL332:
 3558 00ca CBE7     		b	.L286
 3559              	.L294:
 919:src/storage.c **** 			}
 3560              		.loc 1 919 5 view .LVU1024
 3561 00cc FFF7FEFF 		bl	clrprog
 3562              	.LVL333:
 3563 00d0 F8E7     		b	.L287
 3564              	.L296:
ARM GAS  /tmp/cc1iUxzj.s 			page 104


 3565 00d2 00BF     		.align	2
 3566              	.L295:
 3567 00d4 00000000 		.word	main_ram
 3568 00d8 00000000 		.word	library_ram
 3569              	.LBE108:
 3570              		.cfi_endproc
 3571              	.LFE31:
 3573              		.section	.text.recall_program,"ax",%progbits
 3574              		.align	1
 3575              		.p2align 2,,3
 3576              		.global	recall_program
 3577              		.syntax unified
 3578              		.thumb
 3579              		.thumb_func
 3580              		.fpu fpv4-sp-d16
 3582              	recall_program:
 3583              	.LVL334:
 3584              	.LFB32:
 937:src/storage.c **** 	if ( not_running() ) {
 3585              		.loc 1 937 1 view -0
 3586              		.cfi_startproc
 3587              		@ args = 0, pretend = 0, frame = 0
 3588              		@ frame_needed = 0, uses_anonymous_args = 0
 938:src/storage.c **** 		if ( state_pc() == 0 ) {
 3589              		.loc 1 938 2 view .LVU1026
 937:src/storage.c **** 	if ( not_running() ) {
 3590              		.loc 1 937 1 is_stmt 0 view .LVU1027
 3591 0000 10B5     		push	{r4, lr}
 3592              		.cfi_def_cfa_offset 8
 3593              		.cfi_offset 4, -8
 3594              		.cfi_offset 14, -4
 938:src/storage.c **** 		if ( state_pc() == 0 ) {
 3595              		.loc 1 938 7 view .LVU1028
 3596 0002 FFF7FEFF 		bl	not_running
 3597              	.LVL335:
 938:src/storage.c **** 		if ( state_pc() == 0 ) {
 3598              		.loc 1 938 5 view .LVU1029
 3599 0006 B8B1     		cbz	r0, .L297
 939:src/storage.c **** 			State.pc = 1;
 3600              		.loc 1 939 3 is_stmt 1 view .LVU1030
 939:src/storage.c **** 			State.pc = 1;
 3601              		.loc 1 939 8 is_stmt 0 view .LVU1031
 3602 0008 0C4C     		ldr	r4, .L301
 3603 000a 2368     		ldr	r3, [r4]
 939:src/storage.c **** 			State.pc = 1;
 3604              		.loc 1 939 6 view .LVU1032
 3605 000c B3F8E027 		ldrh	r2, [r3, #2016]
 3606 0010 12B9     		cbnz	r2, .L299
 940:src/storage.c **** 		}
 3607              		.loc 1 940 4 is_stmt 1 view .LVU1033
 940:src/storage.c **** 		}
 3608              		.loc 1 940 13 is_stmt 0 view .LVU1034
 3609 0012 0122     		movs	r2, #1
 3610 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 3611              	.L299:
 942:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3612              		.loc 1 942 3 is_stmt 1 view .LVU1035
ARM GAS  /tmp/cc1iUxzj.s 			page 105


 3613 0018 0120     		movs	r0, #1
 3614 001a FFF7FEFF 		bl	update_program_bounds
 3615              	.LVL336:
 943:src/storage.c **** 	}
 3616              		.loc 1 943 3 view .LVU1036
 3617 001e FFF7FEFF 		bl	get_current_prog
 3618              	.LVL337:
 943:src/storage.c **** 	}
 3619              		.loc 1 943 39 is_stmt 0 view .LVU1037
 3620 0022 2368     		ldr	r3, [r4]
 3621 0024 B3F8EE17 		ldrh	r1, [r3, #2030]
 943:src/storage.c **** 	}
 3622              		.loc 1 943 49 view .LVU1038
 3623 0028 B3F8EC37 		ldrh	r3, [r3, #2028]
 943:src/storage.c **** 	}
 3624              		.loc 1 943 47 view .LVU1039
 3625 002c C91A     		subs	r1, r1, r3
 945:src/storage.c **** 
 3626              		.loc 1 945 1 view .LVU1040
 3627 002e BDE81040 		pop	{r4, lr}
 3628              		.cfi_remember_state
 3629              		.cfi_restore 14
 3630              		.cfi_restore 4
 3631              		.cfi_def_cfa_offset 0
 943:src/storage.c **** 	}
 3632              		.loc 1 943 3 view .LVU1041
 3633 0032 0131     		adds	r1, r1, #1
 3634 0034 FFF7FEBF 		b	append_program
 3635              	.LVL338:
 3636              	.L297:
 3637              		.cfi_restore_state
 945:src/storage.c **** 
 3638              		.loc 1 945 1 view .LVU1042
 3639 0038 10BD     		pop	{r4, pc}
 3640              	.L302:
 3641 003a 00BF     		.align	2
 3642              	.L301:
 3643 003c 00000000 		.word	main_ram
 3644              		.cfi_endproc
 3645              	.LFE32:
 3647              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3648              		.align	2
 3649              	.LC11:
 3650 0000 45727220 		.ascii	"Err slf1\000"
 3650      736C6631 
 3650      00
 3651 0009 000000   		.align	2
 3652              	.LC12:
 3653 000c 2E6C6962 		.ascii	".lib\000"
 3653      00
 3654 0011 000000   		.align	2
 3655              	.LC13:
 3656 0014 53617665 		.ascii	"Save Library File\000"
 3656      204C6962 
 3656      72617279 
 3656      2046696C 
 3656      6500
ARM GAS  /tmp/cc1iUxzj.s 			page 106


 3657 0026 0000     		.align	2
 3658              	.LC14:
 3659 0028 45727220 		.ascii	"Err slf2\000"
 3659      736C6632 
 3659      00
 3660              		.section	.text.save_lib_file,"ax",%progbits
 3661              		.align	1
 3662              		.p2align 2,,3
 3663              		.global	save_lib_file
 3664              		.syntax unified
 3665              		.thumb
 3666              		.thumb_func
 3667              		.fpu fpv4-sp-d16
 3669              	save_lib_file:
 3670              	.LVL339:
 3671              	.LFB33:
1084:src/storage.c ****   FRESULT f;
 3672              		.loc 1 1084 30 is_stmt 1 view -0
 3673              		.cfi_startproc
 3674              		@ args = 0, pretend = 0, frame = 8
 3675              		@ frame_needed = 0, uses_anonymous_args = 0
1085:src/storage.c ****   int fss;
 3676              		.loc 1 1085 3 view .LVU1044
1086:src/storage.c ****   int data = WRITE;
 3677              		.loc 1 1086 3 view .LVU1045
1087:src/storage.c ****   uint x=0;
 3678              		.loc 1 1087 3 view .LVU1046
1084:src/storage.c ****   FRESULT f;
 3679              		.loc 1 1084 30 is_stmt 0 view .LVU1047
 3680 0000 70B5     		push	{r4, r5, r6, lr}
 3681              		.cfi_def_cfa_offset 16
 3682              		.cfi_offset 4, -16
 3683              		.cfi_offset 5, -12
 3684              		.cfi_offset 6, -8
 3685              		.cfi_offset 14, -4
 3686 0002 86B0     		sub	sp, sp, #24
 3687              		.cfi_def_cfa_offset 40
1087:src/storage.c ****   uint x=0;
 3688              		.loc 1 1087 7 view .LVU1048
 3689 0004 0125     		movs	r5, #1
1088:src/storage.c **** 
 3690              		.loc 1 1088 8 view .LVU1049
 3691 0006 0023     		movs	r3, #0
1084:src/storage.c ****   FRESULT f;
 3692              		.loc 1 1084 30 view .LVU1050
 3693 0008 0446     		mov	r4, r0
1090:src/storage.c ****   if (i == 0) {
 3694              		.loc 1 1090 3 view .LVU1051
 3695 000a 1E4E     		ldr	r6, .L313
1087:src/storage.c ****   uint x=0;
 3696              		.loc 1 1087 7 view .LVU1052
 3697 000c 0495     		str	r5, [sp, #16]
1088:src/storage.c **** 
 3698              		.loc 1 1088 3 is_stmt 1 view .LVU1053
1090:src/storage.c ****   if (i == 0) {
 3699              		.loc 1 1090 3 is_stmt 0 view .LVU1054
 3700 000e 2846     		mov	r0, r5
ARM GAS  /tmp/cc1iUxzj.s 			page 107


 3701              	.LVL340:
1088:src/storage.c **** 
 3702              		.loc 1 1088 8 view .LVU1055
 3703 0010 0593     		str	r3, [sp, #20]
1090:src/storage.c ****   if (i == 0) {
 3704              		.loc 1 1090 3 is_stmt 1 view .LVU1056
 3705 0012 B047     		blx	r6
 3706              	.LVL341:
1091:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3707              		.loc 1 1091 3 view .LVU1057
1091:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3708              		.loc 1 1091 6 is_stmt 0 view .LVU1058
 3709 0014 CCB9     		cbnz	r4, .L304
1092:src/storage.c ****     if (f != FR_OK) {
 3710              		.loc 1 1092 5 is_stmt 1 view .LVU1059
1092:src/storage.c ****     if (f != FR_OK) {
 3711              		.loc 1 1092 9 is_stmt 0 view .LVU1060
 3712 0016 1C4D     		ldr	r5, .L313+4
 3713 0018 1C4B     		ldr	r3, .L313+8
 3714 001a 6868     		ldr	r0, [r5, #4]
 3715 001c 1C49     		ldr	r1, .L313+12
 3716 001e 0B22     		movs	r2, #11
 3717 0020 9847     		blx	r3
 3718              	.LVL342:
1093:src/storage.c ****       f_close (FPT);
 3719              		.loc 1 1093 5 is_stmt 1 view .LVU1061
1093:src/storage.c ****       f_close (FPT);
 3720              		.loc 1 1093 8 is_stmt 0 view .LVU1062
 3721 0022 20BB     		cbnz	r0, .L305
 3722              	.LVL343:
 3723              	.L309:
1105:src/storage.c ****   if ( f != FR_OK ) {
 3724              		.loc 1 1105 3 is_stmt 1 view .LVU1063
1105:src/storage.c ****   if ( f != FR_OK ) {
 3725              		.loc 1 1105 7 is_stmt 0 view .LVU1064
 3726 0024 1B4A     		ldr	r2, .L313+16
 3727 0026 184B     		ldr	r3, .L313+4
 3728 0028 1168     		ldr	r1, [r2]
 3729 002a 5868     		ldr	r0, [r3, #4]
 3730 002c 1A4C     		ldr	r4, .L313+20
 3731 002e 05AB     		add	r3, sp, #20
 3732 0030 4FF48042 		mov	r2, #16384
 3733 0034 A047     		blx	r4
 3734              	.LVL344:
1106:src/storage.c ****     DispMsg = "Err slf2";
 3735              		.loc 1 1106 3 is_stmt 1 view .LVU1065
1106:src/storage.c ****     DispMsg = "Err slf2";
 3736              		.loc 1 1106 6 is_stmt 0 view .LVU1066
 3737 0036 B0B9     		cbnz	r0, .L306
 3738              	.L307:
1109:src/storage.c ****   sys_disk_write_enable(0);
 3739              		.loc 1 1109 3 is_stmt 1 view .LVU1067
 3740 0038 134A     		ldr	r2, .L313+4
 3741 003a 184B     		ldr	r3, .L313+24
 3742 003c 5068     		ldr	r0, [r2, #4]
 3743              	.LVL345:
1109:src/storage.c ****   sys_disk_write_enable(0);
ARM GAS  /tmp/cc1iUxzj.s 			page 108


 3744              		.loc 1 1109 3 is_stmt 0 view .LVU1068
 3745 003e 9847     		blx	r3
 3746              	.LVL346:
1110:src/storage.c **** }
 3747              		.loc 1 1110 3 is_stmt 1 view .LVU1069
 3748 0040 104B     		ldr	r3, .L313
 3749 0042 0020     		movs	r0, #0
 3750 0044 9847     		blx	r3
 3751              	.LVL347:
1111:src/storage.c **** 
 3752              		.loc 1 1111 1 is_stmt 0 view .LVU1070
 3753 0046 06B0     		add	sp, sp, #24
 3754              		.cfi_remember_state
 3755              		.cfi_def_cfa_offset 16
 3756              		@ sp needed
 3757 0048 70BD     		pop	{r4, r5, r6, pc}
 3758              	.LVL348:
 3759              	.L304:
 3760              		.cfi_restore_state
1101:src/storage.c ****     if (fss != 1) return;
 3761              		.loc 1 1101 5 is_stmt 1 view .LVU1071
1101:src/storage.c ****     if (fss != 1) return;
 3762              		.loc 1 1101 11 is_stmt 0 view .LVU1072
 3763 004a 04AB     		add	r3, sp, #16
 3764 004c 0293     		str	r3, [sp, #8]
 3765 004e CDE90055 		strd	r5, r5, [sp]
 3766 0052 134C     		ldr	r4, .L313+28
 3767              	.LVL349:
1101:src/storage.c ****     if (fss != 1) return;
 3768              		.loc 1 1101 11 view .LVU1073
 3769 0054 134B     		ldr	r3, .L313+32
 3770 0056 144A     		ldr	r2, .L313+36
 3771 0058 1449     		ldr	r1, .L313+40
 3772 005a 1548     		ldr	r0, .L313+44
 3773 005c A047     		blx	r4
 3774              	.LVL350:
1102:src/storage.c ****   }
 3775              		.loc 1 1102 5 is_stmt 1 view .LVU1074
1102:src/storage.c ****   }
 3776              		.loc 1 1102 8 is_stmt 0 view .LVU1075
 3777 005e 0128     		cmp	r0, #1
 3778 0060 E0D0     		beq	.L309
1111:src/storage.c **** 
 3779              		.loc 1 1111 1 view .LVU1076
 3780 0062 06B0     		add	sp, sp, #24
 3781              		.cfi_remember_state
 3782              		.cfi_def_cfa_offset 16
 3783              		@ sp needed
 3784 0064 70BD     		pop	{r4, r5, r6, pc}
 3785              	.LVL351:
 3786              	.L306:
 3787              		.cfi_restore_state
1107:src/storage.c ****   }
 3788              		.loc 1 1107 5 is_stmt 1 view .LVU1077
1107:src/storage.c ****   }
 3789              		.loc 1 1107 13 is_stmt 0 view .LVU1078
 3790 0066 134B     		ldr	r3, .L313+48
ARM GAS  /tmp/cc1iUxzj.s 			page 109


 3791 0068 134A     		ldr	r2, .L313+52
 3792 006a 1A60     		str	r2, [r3]
 3793 006c E4E7     		b	.L307
 3794              	.LVL352:
 3795              	.L305:
1094:src/storage.c ****       sys_disk_write_enable(0);
 3796              		.loc 1 1094 7 is_stmt 1 view .LVU1079
 3797 006e 0B4B     		ldr	r3, .L313+24
 3798 0070 6868     		ldr	r0, [r5, #4]
 3799              	.LVL353:
1094:src/storage.c ****       sys_disk_write_enable(0);
 3800              		.loc 1 1094 7 is_stmt 0 view .LVU1080
 3801 0072 9847     		blx	r3
 3802              	.LVL354:
1095:src/storage.c ****       DispMsg = "Err slf1";
 3803              		.loc 1 1095 7 is_stmt 1 view .LVU1081
 3804 0074 2046     		mov	r0, r4
 3805 0076 B047     		blx	r6
 3806              	.LVL355:
1096:src/storage.c ****       return;
 3807              		.loc 1 1096 7 view .LVU1082
1096:src/storage.c ****       return;
 3808              		.loc 1 1096 15 is_stmt 0 view .LVU1083
 3809 0078 0E4B     		ldr	r3, .L313+48
 3810 007a 104A     		ldr	r2, .L313+56
 3811 007c 1A60     		str	r2, [r3]
1097:src/storage.c ****     }
 3812              		.loc 1 1097 7 is_stmt 1 view .LVU1084
1111:src/storage.c **** 
 3813              		.loc 1 1111 1 is_stmt 0 view .LVU1085
 3814 007e 06B0     		add	sp, sp, #24
 3815              		.cfi_def_cfa_offset 16
 3816              		@ sp needed
 3817 0080 70BD     		pop	{r4, r5, r6, pc}
 3818              	.LVL356:
 3819              	.L314:
1111:src/storage.c **** 
 3820              		.loc 1 1111 1 view .LVU1086
 3821 0082 00BF     		.align	2
 3822              	.L313:
 3823 0084 E1030008 		.word	134218721
 3824 0088 00200010 		.word	268443648
 3825 008c 35040008 		.word	134218805
 3826 0090 18000000 		.word	.LC1
 3827 0094 00000000 		.word	library_ram
 3828 0098 41040008 		.word	134218817
 3829 009c 39040008 		.word	134218809
 3830 00a0 51030008 		.word	134218577
 3831 00a4 00000000 		.word	open_selected_file
 3832 00a8 0C000000 		.word	.LC12
 3833 00ac 2C000000 		.word	.LC2
 3834 00b0 14000000 		.word	.LC13
 3835 00b4 00000000 		.word	DispMsg
 3836 00b8 28000000 		.word	.LC14
 3837 00bc 00000000 		.word	.LC11
 3838              		.cfi_endproc
 3839              	.LFE33:
ARM GAS  /tmp/cc1iUxzj.s 			page 110


 3841              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3842              		.align	2
 3843              	.LC15:
 3844 0000 4C6F6164 		.ascii	"Load Library File\000"
 3844      204C6962 
 3844      72617279 
 3844      2046696C 
 3844      6500
 3845 0012 0000     		.align	2
 3846              	.LC16:
 3847 0014 46696C65 		.ascii	"File too big\000"
 3847      20746F6F 
 3847      20626967 
 3847      00
 3848              		.section	.text.load_lib_file,"ax",%progbits
 3849              		.align	1
 3850              		.p2align 2,,3
 3851              		.global	load_lib_file
 3852              		.syntax unified
 3853              		.thumb
 3854              		.thumb_func
 3855              		.fpu fpv4-sp-d16
 3857              	load_lib_file:
 3858              	.LVL357:
 3859              	.LFB34:
1113:src/storage.c ****   FRESULT f;
 3860              		.loc 1 1113 30 is_stmt 1 view -0
 3861              		.cfi_startproc
 3862              		@ args = 0, pretend = 0, frame = 8
 3863              		@ frame_needed = 0, uses_anonymous_args = 0
1114:src/storage.c ****   int fss;
 3864              		.loc 1 1114 3 view .LVU1088
1115:src/storage.c ****   int data = READ;
 3865              		.loc 1 1115 3 view .LVU1089
1116:src/storage.c ****   uint x=0;
 3866              		.loc 1 1116 3 view .LVU1090
1113:src/storage.c ****   FRESULT f;
 3867              		.loc 1 1113 30 is_stmt 0 view .LVU1091
 3868 0000 10B5     		push	{r4, lr}
 3869              		.cfi_def_cfa_offset 8
 3870              		.cfi_offset 4, -8
 3871              		.cfi_offset 14, -4
1117:src/storage.c **** 
 3872              		.loc 1 1117 8 view .LVU1092
 3873 0002 0222     		movs	r2, #2
1113:src/storage.c ****   FRESULT f;
 3874              		.loc 1 1113 30 view .LVU1093
 3875 0004 86B0     		sub	sp, sp, #24
 3876              		.cfi_def_cfa_offset 32
1117:src/storage.c **** 
 3877              		.loc 1 1117 8 view .LVU1094
 3878 0006 0023     		movs	r3, #0
 3879 0008 CDE90423 		strd	r2, r3, [sp, #16]
1119:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3880              		.loc 1 1119 3 is_stmt 1 view .LVU1095
1119:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3881              		.loc 1 1119 6 is_stmt 0 view .LVU1096
ARM GAS  /tmp/cc1iUxzj.s 			page 111


 3882 000c 08BB     		cbnz	r0, .L316
1120:src/storage.c ****     if (f != FR_OK) {
 3883              		.loc 1 1120 5 is_stmt 1 view .LVU1097
1120:src/storage.c ****     if (f != FR_OK) {
 3884              		.loc 1 1120 9 is_stmt 0 view .LVU1098
 3885 000e 1A4C     		ldr	r4, .L326
 3886 0010 1A4B     		ldr	r3, .L326+4
 3887 0012 6068     		ldr	r0, [r4, #4]
 3888              	.LVL358:
1120:src/storage.c ****     if (f != FR_OK) {
 3889              		.loc 1 1120 9 view .LVU1099
 3890 0014 1A49     		ldr	r1, .L326+8
 3891 0016 0122     		movs	r2, #1
 3892 0018 9847     		blx	r3
 3893              	.LVL359:
1121:src/storage.c ****       f_close (FPT);
 3894              		.loc 1 1121 5 is_stmt 1 view .LVU1100
1121:src/storage.c ****       f_close (FPT);
 3895              		.loc 1 1121 8 is_stmt 0 view .LVU1101
 3896 001a 0028     		cmp	r0, #0
 3897 001c 27D1     		bne	.L317
 3898              	.LVL360:
 3899              	.L321:
1132:src/storage.c ****   if ( f != FR_OK ) {
 3900              		.loc 1 1132 3 is_stmt 1 view .LVU1102
1132:src/storage.c ****   if ( f != FR_OK ) {
 3901              		.loc 1 1132 7 is_stmt 0 view .LVU1103
 3902 001e 194A     		ldr	r2, .L326+12
 3903 0020 154B     		ldr	r3, .L326
 3904 0022 1168     		ldr	r1, [r2]
 3905 0024 5868     		ldr	r0, [r3, #4]
 3906 0026 184C     		ldr	r4, .L326+16
 3907 0028 05AB     		add	r3, sp, #20
 3908 002a 4FF48042 		mov	r2, #16384
 3909 002e A047     		blx	r4
 3910              	.LVL361:
1133:src/storage.c ****     DispMsg = "Err slf2";
 3911              		.loc 1 1133 3 is_stmt 1 view .LVU1104
1133:src/storage.c ****     DispMsg = "Err slf2";
 3912              		.loc 1 1133 6 is_stmt 0 view .LVU1105
 3913 0030 10B1     		cbz	r0, .L319
1134:src/storage.c ****   }
 3914              		.loc 1 1134 5 is_stmt 1 view .LVU1106
1134:src/storage.c ****   }
 3915              		.loc 1 1134 13 is_stmt 0 view .LVU1107
 3916 0032 164B     		ldr	r3, .L326+20
 3917 0034 164A     		ldr	r2, .L326+24
 3918 0036 1A60     		str	r2, [r3]
 3919              	.L319:
1136:src/storage.c ****     DispMsg = "File too big";
 3920              		.loc 1 1136 3 is_stmt 1 view .LVU1108
1136:src/storage.c ****     DispMsg = "File too big";
 3921              		.loc 1 1136 10 is_stmt 0 view .LVU1109
 3922 0038 0F4B     		ldr	r3, .L326
 3923 003a 5868     		ldr	r0, [r3, #4]
 3924              	.LVL362:
1136:src/storage.c ****     DispMsg = "File too big";
ARM GAS  /tmp/cc1iUxzj.s 			page 112


 3925              		.loc 1 1136 6 view .LVU1110
 3926 003c 8269     		ldr	r2, [r0, #24]
 3927 003e C368     		ldr	r3, [r0, #12]
 3928 0040 9A42     		cmp	r2, r3
 3929 0042 02D0     		beq	.L322
1137:src/storage.c ****   }
 3930              		.loc 1 1137 5 is_stmt 1 view .LVU1111
1137:src/storage.c ****   }
 3931              		.loc 1 1137 13 is_stmt 0 view .LVU1112
 3932 0044 114B     		ldr	r3, .L326+20
 3933 0046 134A     		ldr	r2, .L326+28
 3934 0048 1A60     		str	r2, [r3]
 3935              	.L322:
1139:src/storage.c **** }
 3936              		.loc 1 1139 3 is_stmt 1 view .LVU1113
 3937 004a 134B     		ldr	r3, .L326+32
 3938 004c 9847     		blx	r3
 3939              	.LVL363:
1140:src/storage.c **** 
 3940              		.loc 1 1140 1 is_stmt 0 view .LVU1114
 3941 004e 06B0     		add	sp, sp, #24
 3942              		.cfi_remember_state
 3943              		.cfi_def_cfa_offset 8
 3944              		@ sp needed
 3945 0050 10BD     		pop	{r4, pc}
 3946              	.LVL364:
 3947              	.L316:
 3948              		.cfi_restore_state
1128:src/storage.c ****     if (fss != 1) return;
 3949              		.loc 1 1128 5 is_stmt 1 view .LVU1115
1128:src/storage.c ****     if (fss != 1) return;
 3950              		.loc 1 1128 11 is_stmt 0 view .LVU1116
 3951 0052 04AA     		add	r2, sp, #16
 3952 0054 CDE90033 		strd	r3, r3, [sp]
 3953 0058 0292     		str	r2, [sp, #8]
 3954 005a 104C     		ldr	r4, .L326+36
 3955 005c 104B     		ldr	r3, .L326+40
 3956 005e 114A     		ldr	r2, .L326+44
 3957 0060 1149     		ldr	r1, .L326+48
 3958 0062 1248     		ldr	r0, .L326+52
 3959              	.LVL365:
1128:src/storage.c ****     if (fss != 1) return;
 3960              		.loc 1 1128 11 view .LVU1117
 3961 0064 A047     		blx	r4
 3962              	.LVL366:
1129:src/storage.c ****   }
 3963              		.loc 1 1129 5 is_stmt 1 view .LVU1118
1129:src/storage.c ****   }
 3964              		.loc 1 1129 8 is_stmt 0 view .LVU1119
 3965 0066 0128     		cmp	r0, #1
 3966 0068 D9D0     		beq	.L321
1140:src/storage.c **** 
 3967              		.loc 1 1140 1 view .LVU1120
 3968 006a 06B0     		add	sp, sp, #24
 3969              		.cfi_remember_state
 3970              		.cfi_def_cfa_offset 8
 3971              		@ sp needed
ARM GAS  /tmp/cc1iUxzj.s 			page 113


 3972 006c 10BD     		pop	{r4, pc}
 3973              	.LVL367:
 3974              	.L317:
 3975              		.cfi_restore_state
1122:src/storage.c ****       //      DispMsg = "No file?";
 3976              		.loc 1 1122 7 is_stmt 1 view .LVU1121
 3977 006e 6068     		ldr	r0, [r4, #4]
 3978              	.LVL368:
1122:src/storage.c ****       //      DispMsg = "No file?";
 3979              		.loc 1 1122 7 is_stmt 0 view .LVU1122
 3980 0070 094B     		ldr	r3, .L326+32
 3981 0072 9847     		blx	r3
 3982              	.LVL369:
1124:src/storage.c ****     }
 3983              		.loc 1 1124 7 is_stmt 1 view .LVU1123
1140:src/storage.c **** 
 3984              		.loc 1 1140 1 is_stmt 0 view .LVU1124
 3985 0074 06B0     		add	sp, sp, #24
 3986              		.cfi_def_cfa_offset 8
 3987              		@ sp needed
 3988 0076 10BD     		pop	{r4, pc}
 3989              	.L327:
 3990              		.align	2
 3991              	.L326:
 3992 0078 00200010 		.word	268443648
 3993 007c 35040008 		.word	134218805
 3994 0080 18000000 		.word	.LC1
 3995 0084 00000000 		.word	library_ram
 3996 0088 3D040008 		.word	134218813
 3997 008c 00000000 		.word	DispMsg
 3998 0090 28000000 		.word	.LC14
 3999 0094 14000000 		.word	.LC16
 4000 0098 39040008 		.word	134218809
 4001 009c 51030008 		.word	134218577
 4002 00a0 00000000 		.word	open_selected_file
 4003 00a4 0C000000 		.word	.LC12
 4004 00a8 2C000000 		.word	.LC2
 4005 00ac 00000000 		.word	.LC15
 4006              		.cfi_endproc
 4007              	.LFE34:
 4009              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 4010              		.align	2
 4011              	.LC17:
 4012 0000 77703334 		.ascii	"wp34s/wp34c.dat\000"
 4012      732F7770 
 4012      3334632E 
 4012      64617400 
 4013              		.align	2
 4014              	.LC18:
 4015 0010 45727220 		.ascii	"Err srf1\000"
 4015      73726631 
 4015      00
 4016 0019 000000   		.align	2
 4017              	.LC19:
 4018 001c 2E646174 		.ascii	".dat\000"
 4018      00
 4019 0021 000000   		.align	2
ARM GAS  /tmp/cc1iUxzj.s 			page 114


 4020              	.LC20:
 4021 0024 53617665 		.ascii	"Save RAM File\000"
 4021      2052414D 
 4021      2046696C 
 4021      6500
 4022 0032 0000     		.align	2
 4023              	.LC21:
 4024 0034 45727220 		.ascii	"Err srf2\000"
 4024      73726632 
 4024      00
 4025              		.section	.text.save_ram_file,"ax",%progbits
 4026              		.align	1
 4027              		.p2align 2,,3
 4028              		.global	save_ram_file
 4029              		.syntax unified
 4030              		.thumb
 4031              		.thumb_func
 4032              		.fpu fpv4-sp-d16
 4034              	save_ram_file:
 4035              	.LVL370:
 4036              	.LFB35:
1142:src/storage.c ****   FRESULT f;
 4037              		.loc 1 1142 30 is_stmt 1 view -0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 8
 4040              		@ frame_needed = 0, uses_anonymous_args = 0
1143:src/storage.c ****   int fss;
 4041              		.loc 1 1143 3 view .LVU1126
1144:src/storage.c ****   int data = WRITE;
 4042              		.loc 1 1144 3 view .LVU1127
1145:src/storage.c ****   uint x=0;
 4043              		.loc 1 1145 3 view .LVU1128
1142:src/storage.c ****   FRESULT f;
 4044              		.loc 1 1142 30 is_stmt 0 view .LVU1129
 4045 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4046              		.cfi_def_cfa_offset 20
 4047              		.cfi_offset 4, -20
 4048              		.cfi_offset 5, -16
 4049              		.cfi_offset 6, -12
 4050              		.cfi_offset 7, -8
 4051              		.cfi_offset 14, -4
 4052              	.LBB109:
 4053              	.LBB110:
 206:src/storage.c **** 			      Crc, &Crc );
 4054              		.loc 1 206 9 view .LVU1130
 4055 0002 264E     		ldr	r6, .L338
 4056              	.LBE110:
 4057              	.LBE109:
1152:src/storage.c ****     if (i == 0) {
 4058              		.loc 1 1152 5 view .LVU1131
 4059 0004 264F     		ldr	r7, .L338+4
1142:src/storage.c ****   FRESULT f;
 4060              		.loc 1 1142 30 view .LVU1132
 4061 0006 87B0     		sub	sp, sp, #28
 4062              		.cfi_def_cfa_offset 48
1146:src/storage.c **** 
 4063              		.loc 1 1146 8 view .LVU1133
ARM GAS  /tmp/cc1iUxzj.s 			page 115


 4064 0008 0023     		movs	r3, #0
1145:src/storage.c ****   uint x=0;
 4065              		.loc 1 1145 7 view .LVU1134
 4066 000a 0125     		movs	r5, #1
1142:src/storage.c ****   FRESULT f;
 4067              		.loc 1 1142 30 view .LVU1135
 4068 000c 0446     		mov	r4, r0
1146:src/storage.c **** 
 4069              		.loc 1 1146 8 view .LVU1136
 4070 000e CDE90453 		strd	r5, r3, [sp, #16]
1148:src/storage.c ****     init_state();
 4071              		.loc 1 1148 5 is_stmt 1 view .LVU1137
 4072 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4073              	.LVL371:
1149:src/storage.c ****     checksum_all();
 4074              		.loc 1 1149 5 view .LVU1138
 4075 0016 FFF7FEFF 		bl	init_state
 4076              	.LVL372:
1150:src/storage.c **** 
 4077              		.loc 1 1150 5 view .LVU1139
 4078              	.LBB112:
 4079              	.LBI109:
 204:src/storage.c **** {
 4080              		.loc 1 204 5 view .LVU1140
 4081              	.LBB111:
 206:src/storage.c **** 			      Crc, &Crc );
 4082              		.loc 1 206 2 view .LVU1141
 206:src/storage.c **** 			      Crc, &Crc );
 4083              		.loc 1 206 9 is_stmt 0 view .LVU1142
 4084 001a 3068     		ldr	r0, [r6]
 4085 001c 40F2FE71 		movw	r1, #2046
 4086 0020 B0F8FE27 		ldrh	r2, [r0, #2046]
 4087 0024 4318     		adds	r3, r0, r1
 4088 0026 FFF7FEFF 		bl	test_checksum
 4089              	.LVL373:
 4090              	.LBE111:
 4091              	.LBE112:
1152:src/storage.c ****     if (i == 0) {
 4092              		.loc 1 1152 5 is_stmt 1 view .LVU1143
 4093 002a 2846     		mov	r0, r5
 4094 002c B847     		blx	r7
 4095              	.LVL374:
1153:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4096              		.loc 1 1153 5 view .LVU1144
1153:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4097              		.loc 1 1153 8 is_stmt 0 view .LVU1145
 4098 002e C4B9     		cbnz	r4, .L329
1154:src/storage.c ****       if (f != FR_OK) {
 4099              		.loc 1 1154 7 is_stmt 1 view .LVU1146
1154:src/storage.c ****       if (f != FR_OK) {
 4100              		.loc 1 1154 11 is_stmt 0 view .LVU1147
 4101 0030 1C4D     		ldr	r5, .L338+8
 4102 0032 1D4B     		ldr	r3, .L338+12
 4103 0034 6868     		ldr	r0, [r5, #4]
 4104 0036 1D49     		ldr	r1, .L338+16
 4105 0038 0B22     		movs	r2, #11
 4106 003a 9847     		blx	r3
ARM GAS  /tmp/cc1iUxzj.s 			page 116


 4107              	.LVL375:
1155:src/storage.c **** 	f_close (FPT);
 4108              		.loc 1 1155 7 is_stmt 1 view .LVU1148
1155:src/storage.c **** 	f_close (FPT);
 4109              		.loc 1 1155 10 is_stmt 0 view .LVU1149
 4110 003c 18BB     		cbnz	r0, .L330
 4111              	.LVL376:
 4112              	.L334:
1167:src/storage.c ****     if ( f != FR_OK ) {
 4113              		.loc 1 1167 5 is_stmt 1 view .LVU1150
1167:src/storage.c ****     if ( f != FR_OK ) {
 4114              		.loc 1 1167 9 is_stmt 0 view .LVU1151
 4115 003e 194B     		ldr	r3, .L338+8
 4116 0040 3168     		ldr	r1, [r6]
 4117 0042 5868     		ldr	r0, [r3, #4]
 4118 0044 1A4C     		ldr	r4, .L338+20
 4119 0046 05AB     		add	r3, sp, #20
 4120 0048 4FF40062 		mov	r2, #2048
 4121 004c A047     		blx	r4
 4122              	.LVL377:
1168:src/storage.c ****       DispMsg = "Err srf2";
 4123              		.loc 1 1168 5 is_stmt 1 view .LVU1152
1168:src/storage.c ****       DispMsg = "Err srf2";
 4124              		.loc 1 1168 8 is_stmt 0 view .LVU1153
 4125 004e B0B9     		cbnz	r0, .L331
 4126              	.L332:
1171:src/storage.c ****     sys_disk_write_enable(0);
 4127              		.loc 1 1171 5 is_stmt 1 view .LVU1154
 4128 0050 144A     		ldr	r2, .L338+8
 4129 0052 184B     		ldr	r3, .L338+24
 4130 0054 5068     		ldr	r0, [r2, #4]
 4131              	.LVL378:
1171:src/storage.c ****     sys_disk_write_enable(0);
 4132              		.loc 1 1171 5 is_stmt 0 view .LVU1155
 4133 0056 9847     		blx	r3
 4134              	.LVL379:
1172:src/storage.c **** }
 4135              		.loc 1 1172 5 is_stmt 1 view .LVU1156
 4136 0058 114B     		ldr	r3, .L338+4
 4137 005a 0020     		movs	r0, #0
 4138 005c 9847     		blx	r3
 4139              	.LVL380:
1173:src/storage.c **** 
 4140              		.loc 1 1173 1 is_stmt 0 view .LVU1157
 4141 005e 07B0     		add	sp, sp, #28
 4142              		.cfi_remember_state
 4143              		.cfi_def_cfa_offset 20
 4144              		@ sp needed
 4145 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4146              	.LVL381:
 4147              	.L329:
 4148              		.cfi_restore_state
1163:src/storage.c ****       if (fss != 1) return;
 4149              		.loc 1 1163 7 is_stmt 1 view .LVU1158
1163:src/storage.c ****       if (fss != 1) return;
 4150              		.loc 1 1163 13 is_stmt 0 view .LVU1159
 4151 0062 04AB     		add	r3, sp, #16
ARM GAS  /tmp/cc1iUxzj.s 			page 117


 4152 0064 0293     		str	r3, [sp, #8]
 4153 0066 CDE90055 		strd	r5, r5, [sp]
 4154 006a 134C     		ldr	r4, .L338+28
 4155              	.LVL382:
1163:src/storage.c ****       if (fss != 1) return;
 4156              		.loc 1 1163 13 view .LVU1160
 4157 006c 134B     		ldr	r3, .L338+32
 4158 006e 144A     		ldr	r2, .L338+36
 4159 0070 1449     		ldr	r1, .L338+40
 4160 0072 1548     		ldr	r0, .L338+44
 4161 0074 A047     		blx	r4
 4162              	.LVL383:
1164:src/storage.c ****     }
 4163              		.loc 1 1164 7 is_stmt 1 view .LVU1161
1164:src/storage.c ****     }
 4164              		.loc 1 1164 10 is_stmt 0 view .LVU1162
 4165 0076 0128     		cmp	r0, #1
 4166 0078 E1D0     		beq	.L334
1173:src/storage.c **** 
 4167              		.loc 1 1173 1 view .LVU1163
 4168 007a 07B0     		add	sp, sp, #28
 4169              		.cfi_remember_state
 4170              		.cfi_def_cfa_offset 20
 4171              		@ sp needed
 4172 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4173              	.LVL384:
 4174              	.L331:
 4175              		.cfi_restore_state
1169:src/storage.c ****     }
 4176              		.loc 1 1169 7 is_stmt 1 view .LVU1164
1169:src/storage.c ****     }
 4177              		.loc 1 1169 15 is_stmt 0 view .LVU1165
 4178 007e 134B     		ldr	r3, .L338+48
 4179 0080 134A     		ldr	r2, .L338+52
 4180 0082 1A60     		str	r2, [r3]
 4181 0084 E4E7     		b	.L332
 4182              	.LVL385:
 4183              	.L330:
1156:src/storage.c **** 	sys_disk_write_enable(0);
 4184              		.loc 1 1156 2 is_stmt 1 view .LVU1166
 4185 0086 0B4B     		ldr	r3, .L338+24
 4186 0088 6868     		ldr	r0, [r5, #4]
 4187              	.LVL386:
1156:src/storage.c **** 	sys_disk_write_enable(0);
 4188              		.loc 1 1156 2 is_stmt 0 view .LVU1167
 4189 008a 9847     		blx	r3
 4190              	.LVL387:
1157:src/storage.c **** 	DispMsg = "Err srf1";
 4191              		.loc 1 1157 2 is_stmt 1 view .LVU1168
 4192 008c 2046     		mov	r0, r4
 4193 008e B847     		blx	r7
 4194              	.LVL388:
1158:src/storage.c **** 	return;
 4195              		.loc 1 1158 2 view .LVU1169
1158:src/storage.c **** 	return;
 4196              		.loc 1 1158 10 is_stmt 0 view .LVU1170
 4197 0090 0E4B     		ldr	r3, .L338+48
ARM GAS  /tmp/cc1iUxzj.s 			page 118


 4198 0092 104A     		ldr	r2, .L338+56
 4199 0094 1A60     		str	r2, [r3]
1159:src/storage.c ****       }
 4200              		.loc 1 1159 2 is_stmt 1 view .LVU1171
1173:src/storage.c **** 
 4201              		.loc 1 1173 1 is_stmt 0 view .LVU1172
 4202 0096 07B0     		add	sp, sp, #28
 4203              		.cfi_def_cfa_offset 20
 4204              		@ sp needed
 4205 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4206              	.LVL389:
 4207              	.L339:
1173:src/storage.c **** 
 4208              		.loc 1 1173 1 view .LVU1173
 4209 009a 00BF     		.align	2
 4210              	.L338:
 4211 009c 00000000 		.word	main_ram
 4212 00a0 E1030008 		.word	134218721
 4213 00a4 00200010 		.word	268443648
 4214 00a8 35040008 		.word	134218805
 4215 00ac 00000000 		.word	.LC17
 4216 00b0 41040008 		.word	134218817
 4217 00b4 39040008 		.word	134218809
 4218 00b8 51030008 		.word	134218577
 4219 00bc 00000000 		.word	open_selected_file
 4220 00c0 1C000000 		.word	.LC19
 4221 00c4 2C000000 		.word	.LC2
 4222 00c8 24000000 		.word	.LC20
 4223 00cc 00000000 		.word	DispMsg
 4224 00d0 34000000 		.word	.LC21
 4225 00d4 10000000 		.word	.LC18
 4226              		.cfi_endproc
 4227              	.LFE35:
 4229              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4230              		.align	2
 4231              	.LC22:
 4232 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4232      2052414D 
 4232      2046696C 
 4232      6500
 4233 000e 0000     		.align	2
 4234              	.LC23:
 4235 0010 45727220 		.ascii	"Err lrf2\000"
 4235      6C726632 
 4235      00
 4236              		.section	.text.load_ram_file,"ax",%progbits
 4237              		.align	1
 4238              		.p2align 2,,3
 4239              		.global	load_ram_file
 4240              		.syntax unified
 4241              		.thumb
 4242              		.thumb_func
 4243              		.fpu fpv4-sp-d16
 4245              	load_ram_file:
 4246              	.LVL390:
 4247              	.LFB36:
1175:src/storage.c ****   FRESULT f;
ARM GAS  /tmp/cc1iUxzj.s 			page 119


 4248              		.loc 1 1175 29 is_stmt 1 view -0
 4249              		.cfi_startproc
 4250              		@ args = 0, pretend = 0, frame = 8
 4251              		@ frame_needed = 0, uses_anonymous_args = 0
1176:src/storage.c ****   int fss;
 4252              		.loc 1 1176 3 view .LVU1175
1177:src/storage.c ****   int data = READ;
 4253              		.loc 1 1177 3 view .LVU1176
1178:src/storage.c ****   uint x=0;
 4254              		.loc 1 1178 3 view .LVU1177
1175:src/storage.c ****   FRESULT f;
 4255              		.loc 1 1175 29 is_stmt 0 view .LVU1178
 4256 0000 30B5     		push	{r4, r5, lr}
 4257              		.cfi_def_cfa_offset 12
 4258              		.cfi_offset 4, -12
 4259              		.cfi_offset 5, -8
 4260              		.cfi_offset 14, -4
1179:src/storage.c ****   
 4261              		.loc 1 1179 8 view .LVU1179
 4262 0002 0222     		movs	r2, #2
1175:src/storage.c ****   FRESULT f;
 4263              		.loc 1 1175 29 view .LVU1180
 4264 0004 87B0     		sub	sp, sp, #28
 4265              		.cfi_def_cfa_offset 40
1179:src/storage.c ****   
 4266              		.loc 1 1179 8 view .LVU1181
 4267 0006 0023     		movs	r3, #0
 4268 0008 CDE90423 		strd	r2, r3, [sp, #16]
1181:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4269              		.loc 1 1181 3 is_stmt 1 view .LVU1182
1181:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4270              		.loc 1 1181 6 is_stmt 0 view .LVU1183
 4271 000c F8B9     		cbnz	r0, .L341
1182:src/storage.c ****     if (f != FR_OK) {
 4272              		.loc 1 1182 5 is_stmt 1 view .LVU1184
1182:src/storage.c ****     if (f != FR_OK) {
 4273              		.loc 1 1182 9 is_stmt 0 view .LVU1185
 4274 000e 214C     		ldr	r4, .L352
 4275 0010 214B     		ldr	r3, .L352+4
 4276 0012 6068     		ldr	r0, [r4, #4]
 4277              	.LVL391:
1182:src/storage.c ****     if (f != FR_OK) {
 4278              		.loc 1 1182 9 view .LVU1186
 4279 0014 2149     		ldr	r1, .L352+8
 4280 0016 0122     		movs	r2, #1
 4281 0018 9847     		blx	r3
 4282              	.LVL392:
1183:src/storage.c ****       f_close (FPT);
 4283              		.loc 1 1183 5 is_stmt 1 view .LVU1187
1183:src/storage.c ****       f_close (FPT);
 4284              		.loc 1 1183 8 is_stmt 0 view .LVU1188
 4285 001a 0028     		cmp	r0, #0
 4286 001c 34D1     		bne	.L342
 4287              	.LVL393:
 4288              	.L346:
1194:src/storage.c ****   if ( f != FR_OK ) {
 4289              		.loc 1 1194 3 is_stmt 1 view .LVU1189
ARM GAS  /tmp/cc1iUxzj.s 			page 120


1194:src/storage.c ****   if ( f != FR_OK ) {
 4290              		.loc 1 1194 7 is_stmt 0 view .LVU1190
 4291 001e 204B     		ldr	r3, .L352+12
 4292 0020 1C4D     		ldr	r5, .L352
 4293 0022 1968     		ldr	r1, [r3]
 4294 0024 1F4C     		ldr	r4, .L352+16
 4295 0026 6868     		ldr	r0, [r5, #4]
 4296 0028 05AB     		add	r3, sp, #20
 4297 002a 4FF40062 		mov	r2, #2048
 4298 002e A047     		blx	r4
 4299              	.LVL394:
1195:src/storage.c ****     DispMsg = "Err lrf2";
 4300              		.loc 1 1195 3 is_stmt 1 view .LVU1191
1195:src/storage.c ****     DispMsg = "Err lrf2";
 4301              		.loc 1 1195 6 is_stmt 0 view .LVU1192
 4302 0030 0446     		mov	r4, r0
 4303 0032 D8B9     		cbnz	r0, .L351
1200:src/storage.c ****     DispMsg = "File too big";
 4304              		.loc 1 1200 3 is_stmt 1 view .LVU1193
1200:src/storage.c ****     DispMsg = "File too big";
 4305              		.loc 1 1200 10 is_stmt 0 view .LVU1194
 4306 0034 6868     		ldr	r0, [r5, #4]
 4307              	.LVL395:
1200:src/storage.c ****     DispMsg = "File too big";
 4308              		.loc 1 1200 6 view .LVU1195
 4309 0036 8269     		ldr	r2, [r0, #24]
 4310 0038 C368     		ldr	r3, [r0, #12]
 4311 003a 9A42     		cmp	r2, r3
 4312 003c 1FD0     		beq	.L347
1201:src/storage.c ****       f_close( FPT );
 4313              		.loc 1 1201 5 is_stmt 1 view .LVU1196
1201:src/storage.c ****       f_close( FPT );
 4314              		.loc 1 1201 13 is_stmt 0 view .LVU1197
 4315 003e 1A4B     		ldr	r3, .L352+20
 4316 0040 1A4A     		ldr	r2, .L352+24
 4317 0042 1A60     		str	r2, [r3]
1202:src/storage.c ****       return 1;
 4318              		.loc 1 1202 7 is_stmt 1 view .LVU1198
 4319 0044 1A4B     		ldr	r3, .L352+28
 4320 0046 9847     		blx	r3
 4321              	.LVL396:
1203:src/storage.c ****   }
 4322              		.loc 1 1203 7 view .LVU1199
1203:src/storage.c ****   }
 4323              		.loc 1 1203 14 is_stmt 0 view .LVU1200
 4324 0048 0120     		movs	r0, #1
1207:src/storage.c **** 
 4325              		.loc 1 1207 1 view .LVU1201
 4326 004a 07B0     		add	sp, sp, #28
 4327              		.cfi_remember_state
 4328              		.cfi_def_cfa_offset 12
 4329              		@ sp needed
 4330 004c 30BD     		pop	{r4, r5, pc}
 4331              	.LVL397:
 4332              	.L341:
 4333              		.cfi_restore_state
1190:src/storage.c ****     if (fss != 1) return 1;
ARM GAS  /tmp/cc1iUxzj.s 			page 121


 4334              		.loc 1 1190 5 is_stmt 1 view .LVU1202
1190:src/storage.c ****     if (fss != 1) return 1;
 4335              		.loc 1 1190 11 is_stmt 0 view .LVU1203
 4336 004e 04AA     		add	r2, sp, #16
 4337 0050 CDE90033 		strd	r3, r3, [sp]
 4338 0054 0292     		str	r2, [sp, #8]
 4339 0056 174C     		ldr	r4, .L352+32
 4340 0058 174B     		ldr	r3, .L352+36
 4341 005a 184A     		ldr	r2, .L352+40
 4342 005c 1849     		ldr	r1, .L352+44
 4343 005e 1948     		ldr	r0, .L352+48
 4344              	.LVL398:
1190:src/storage.c ****     if (fss != 1) return 1;
 4345              		.loc 1 1190 11 view .LVU1204
 4346 0060 A047     		blx	r4
 4347              	.LVL399:
1191:src/storage.c ****   }
 4348              		.loc 1 1191 5 is_stmt 1 view .LVU1205
1191:src/storage.c ****   }
 4349              		.loc 1 1191 8 is_stmt 0 view .LVU1206
 4350 0062 0128     		cmp	r0, #1
 4351 0064 DBD0     		beq	.L346
1191:src/storage.c ****   }
 4352              		.loc 1 1191 26 view .LVU1207
 4353 0066 0120     		movs	r0, #1
 4354              	.LVL400:
1207:src/storage.c **** 
 4355              		.loc 1 1207 1 view .LVU1208
 4356 0068 07B0     		add	sp, sp, #28
 4357              		.cfi_remember_state
 4358              		.cfi_def_cfa_offset 12
 4359              		@ sp needed
 4360 006a 30BD     		pop	{r4, r5, pc}
 4361              	.LVL401:
 4362              	.L351:
 4363              		.cfi_restore_state
1196:src/storage.c ****       f_close( FPT );
 4364              		.loc 1 1196 5 is_stmt 1 view .LVU1209
1196:src/storage.c ****       f_close( FPT );
 4365              		.loc 1 1196 13 is_stmt 0 view .LVU1210
 4366 006c 0E4B     		ldr	r3, .L352+20
 4367 006e 164A     		ldr	r2, .L352+52
 4368 0070 1A60     		str	r2, [r3]
1197:src/storage.c ****       return 1;
 4369              		.loc 1 1197 7 is_stmt 1 view .LVU1211
 4370 0072 6868     		ldr	r0, [r5, #4]
 4371              	.LVL402:
1197:src/storage.c ****       return 1;
 4372              		.loc 1 1197 7 is_stmt 0 view .LVU1212
 4373 0074 0E4B     		ldr	r3, .L352+28
 4374 0076 9847     		blx	r3
 4375              	.LVL403:
1198:src/storage.c ****   }
 4376              		.loc 1 1198 7 is_stmt 1 view .LVU1213
1198:src/storage.c ****   }
 4377              		.loc 1 1198 14 is_stmt 0 view .LVU1214
 4378 0078 0120     		movs	r0, #1
ARM GAS  /tmp/cc1iUxzj.s 			page 122


1207:src/storage.c **** 
 4379              		.loc 1 1207 1 view .LVU1215
 4380 007a 07B0     		add	sp, sp, #28
 4381              		.cfi_remember_state
 4382              		.cfi_def_cfa_offset 12
 4383              		@ sp needed
 4384 007c 30BD     		pop	{r4, r5, pc}
 4385              	.L347:
 4386              		.cfi_restore_state
1205:src/storage.c ****   return 0;
 4387              		.loc 1 1205 3 is_stmt 1 view .LVU1216
 4388 007e 0C4B     		ldr	r3, .L352+28
 4389 0080 9847     		blx	r3
 4390              	.LVL404:
1206:src/storage.c **** }
 4391              		.loc 1 1206 3 view .LVU1217
1206:src/storage.c **** }
 4392              		.loc 1 1206 10 is_stmt 0 view .LVU1218
 4393 0082 2046     		mov	r0, r4
1207:src/storage.c **** 
 4394              		.loc 1 1207 1 view .LVU1219
 4395 0084 07B0     		add	sp, sp, #28
 4396              		.cfi_remember_state
 4397              		.cfi_def_cfa_offset 12
 4398              		@ sp needed
 4399 0086 30BD     		pop	{r4, r5, pc}
 4400              	.LVL405:
 4401              	.L342:
 4402              		.cfi_restore_state
1184:src/storage.c ****       //      DispMsg = "No file?";
 4403              		.loc 1 1184 7 is_stmt 1 view .LVU1220
 4404 0088 6068     		ldr	r0, [r4, #4]
 4405              	.LVL406:
1184:src/storage.c ****       //      DispMsg = "No file?";
 4406              		.loc 1 1184 7 is_stmt 0 view .LVU1221
 4407 008a 094B     		ldr	r3, .L352+28
 4408 008c 9847     		blx	r3
 4409              	.LVL407:
1186:src/storage.c ****     }
 4410              		.loc 1 1186 7 is_stmt 1 view .LVU1222
1186:src/storage.c ****     }
 4411              		.loc 1 1186 14 is_stmt 0 view .LVU1223
 4412 008e 0120     		movs	r0, #1
1207:src/storage.c **** 
 4413              		.loc 1 1207 1 view .LVU1224
 4414 0090 07B0     		add	sp, sp, #28
 4415              		.cfi_def_cfa_offset 12
 4416              		@ sp needed
 4417 0092 30BD     		pop	{r4, r5, pc}
 4418              	.L353:
 4419              		.align	2
 4420              	.L352:
 4421 0094 00200010 		.word	268443648
 4422 0098 35040008 		.word	134218805
 4423 009c 00000000 		.word	.LC17
 4424 00a0 00000000 		.word	main_ram
 4425 00a4 3D040008 		.word	134218813
ARM GAS  /tmp/cc1iUxzj.s 			page 123


 4426 00a8 00000000 		.word	DispMsg
 4427 00ac 14000000 		.word	.LC16
 4428 00b0 39040008 		.word	134218809
 4429 00b4 51030008 		.word	134218577
 4430 00b8 00000000 		.word	open_selected_file
 4431 00bc 1C000000 		.word	.LC19
 4432 00c0 2C000000 		.word	.LC2
 4433 00c4 00000000 		.word	.LC22
 4434 00c8 10000000 		.word	.LC23
 4435              		.cfi_endproc
 4436              	.LFE36:
 4438              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4439              		.align	2
 4440              	.LC24:
 4441 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4441      2052414D 
 4441      20426163 
 4441      6B757020 
 4441      46696C65 
 4442 0015 000000   		.align	2
 4443              	.LC25:
 4444 0018 45727220 		.ascii	"Err lbf2\000"
 4444      6C626632 
 4444      00
 4445              		.section	.text.load_backup_file,"ax",%progbits
 4446              		.align	1
 4447              		.p2align 2,,3
 4448              		.global	load_backup_file
 4449              		.syntax unified
 4450              		.thumb
 4451              		.thumb_func
 4452              		.fpu fpv4-sp-d16
 4454              	load_backup_file:
 4455              	.LVL408:
 4456              	.LFB37:
1209:src/storage.c ****   FRESULT f;
 4457              		.loc 1 1209 33 is_stmt 1 view -0
 4458              		.cfi_startproc
 4459              		@ args = 0, pretend = 0, frame = 8
 4460              		@ frame_needed = 0, uses_anonymous_args = 0
1210:src/storage.c ****   int fss;
 4461              		.loc 1 1210 3 view .LVU1226
1211:src/storage.c ****   int data = READ;
 4462              		.loc 1 1211 3 view .LVU1227
1212:src/storage.c ****   uint x=0;
 4463              		.loc 1 1212 3 view .LVU1228
1209:src/storage.c ****   FRESULT f;
 4464              		.loc 1 1209 33 is_stmt 0 view .LVU1229
 4465 0000 10B5     		push	{r4, lr}
 4466              		.cfi_def_cfa_offset 8
 4467              		.cfi_offset 4, -8
 4468              		.cfi_offset 14, -4
1213:src/storage.c **** 
 4469              		.loc 1 1213 8 view .LVU1230
 4470 0002 0222     		movs	r2, #2
1209:src/storage.c ****   FRESULT f;
 4471              		.loc 1 1209 33 view .LVU1231
ARM GAS  /tmp/cc1iUxzj.s 			page 124


 4472 0004 86B0     		sub	sp, sp, #24
 4473              		.cfi_def_cfa_offset 32
1213:src/storage.c **** 
 4474              		.loc 1 1213 8 view .LVU1232
 4475 0006 0023     		movs	r3, #0
 4476 0008 CDE90423 		strd	r2, r3, [sp, #16]
1215:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4477              		.loc 1 1215 3 is_stmt 1 view .LVU1233
1215:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4478              		.loc 1 1215 6 is_stmt 0 view .LVU1234
 4479 000c 08BB     		cbnz	r0, .L355
1216:src/storage.c ****     if (f != FR_OK) {
 4480              		.loc 1 1216 5 is_stmt 1 view .LVU1235
1216:src/storage.c ****     if (f != FR_OK) {
 4481              		.loc 1 1216 9 is_stmt 0 view .LVU1236
 4482 000e 1A4C     		ldr	r4, .L365
 4483 0010 1A4B     		ldr	r3, .L365+4
 4484 0012 6068     		ldr	r0, [r4, #4]
 4485              	.LVL409:
1216:src/storage.c ****     if (f != FR_OK) {
 4486              		.loc 1 1216 9 view .LVU1237
 4487 0014 1A49     		ldr	r1, .L365+8
 4488 0016 0122     		movs	r2, #1
 4489 0018 9847     		blx	r3
 4490              	.LVL410:
1217:src/storage.c ****       f_close (FPT);
 4491              		.loc 1 1217 5 is_stmt 1 view .LVU1238
1217:src/storage.c ****       f_close (FPT);
 4492              		.loc 1 1217 8 is_stmt 0 view .LVU1239
 4493 001a 0028     		cmp	r0, #0
 4494 001c 27D1     		bne	.L356
 4495              	.LVL411:
 4496              	.L360:
1227:src/storage.c ****   if ( f != FR_OK ) {
 4497              		.loc 1 1227 3 is_stmt 1 view .LVU1240
1227:src/storage.c ****   if ( f != FR_OK ) {
 4498              		.loc 1 1227 7 is_stmt 0 view .LVU1241
 4499 001e 194A     		ldr	r2, .L365+12
 4500 0020 154B     		ldr	r3, .L365
 4501 0022 1168     		ldr	r1, [r2]
 4502 0024 5868     		ldr	r0, [r3, #4]
 4503 0026 184C     		ldr	r4, .L365+16
 4504 0028 05AB     		add	r3, sp, #20
 4505 002a 4FF40062 		mov	r2, #2048
 4506 002e A047     		blx	r4
 4507              	.LVL412:
1228:src/storage.c ****     DispMsg = "Err lbf2";
 4508              		.loc 1 1228 3 is_stmt 1 view .LVU1242
1228:src/storage.c ****     DispMsg = "Err lbf2";
 4509              		.loc 1 1228 6 is_stmt 0 view .LVU1243
 4510 0030 10B1     		cbz	r0, .L358
1229:src/storage.c ****   }
 4511              		.loc 1 1229 5 is_stmt 1 view .LVU1244
1229:src/storage.c ****   }
 4512              		.loc 1 1229 13 is_stmt 0 view .LVU1245
 4513 0032 164B     		ldr	r3, .L365+20
 4514 0034 164A     		ldr	r2, .L365+24
ARM GAS  /tmp/cc1iUxzj.s 			page 125


 4515 0036 1A60     		str	r2, [r3]
 4516              	.L358:
1231:src/storage.c ****     DispMsg = "File too big";
 4517              		.loc 1 1231 3 is_stmt 1 view .LVU1246
1231:src/storage.c ****     DispMsg = "File too big";
 4518              		.loc 1 1231 10 is_stmt 0 view .LVU1247
 4519 0038 0F4B     		ldr	r3, .L365
 4520 003a 5868     		ldr	r0, [r3, #4]
 4521              	.LVL413:
1231:src/storage.c ****     DispMsg = "File too big";
 4522              		.loc 1 1231 6 view .LVU1248
 4523 003c 8269     		ldr	r2, [r0, #24]
 4524 003e C368     		ldr	r3, [r0, #12]
 4525 0040 9A42     		cmp	r2, r3
 4526 0042 02D0     		beq	.L361
1232:src/storage.c ****   }
 4527              		.loc 1 1232 5 is_stmt 1 view .LVU1249
1232:src/storage.c ****   }
 4528              		.loc 1 1232 13 is_stmt 0 view .LVU1250
 4529 0044 114B     		ldr	r3, .L365+20
 4530 0046 134A     		ldr	r2, .L365+28
 4531 0048 1A60     		str	r2, [r3]
 4532              	.L361:
1234:src/storage.c **** }
 4533              		.loc 1 1234 3 is_stmt 1 view .LVU1251
 4534 004a 134B     		ldr	r3, .L365+32
 4535 004c 9847     		blx	r3
 4536              	.LVL414:
1235:src/storage.c **** 
 4537              		.loc 1 1235 1 is_stmt 0 view .LVU1252
 4538 004e 06B0     		add	sp, sp, #24
 4539              		.cfi_remember_state
 4540              		.cfi_def_cfa_offset 8
 4541              		@ sp needed
 4542 0050 10BD     		pop	{r4, pc}
 4543              	.LVL415:
 4544              	.L355:
 4545              		.cfi_restore_state
1223:src/storage.c ****     if (fss != 1) return;
 4546              		.loc 1 1223 5 is_stmt 1 view .LVU1253
1223:src/storage.c ****     if (fss != 1) return;
 4547              		.loc 1 1223 11 is_stmt 0 view .LVU1254
 4548 0052 04AA     		add	r2, sp, #16
 4549 0054 CDE90033 		strd	r3, r3, [sp]
 4550 0058 0292     		str	r2, [sp, #8]
 4551 005a 104C     		ldr	r4, .L365+36
 4552 005c 104B     		ldr	r3, .L365+40
 4553 005e 114A     		ldr	r2, .L365+44
 4554 0060 1149     		ldr	r1, .L365+48
 4555 0062 1248     		ldr	r0, .L365+52
 4556              	.LVL416:
1223:src/storage.c ****     if (fss != 1) return;
 4557              		.loc 1 1223 11 view .LVU1255
 4558 0064 A047     		blx	r4
 4559              	.LVL417:
1224:src/storage.c ****   }
 4560              		.loc 1 1224 5 is_stmt 1 view .LVU1256
ARM GAS  /tmp/cc1iUxzj.s 			page 126


1224:src/storage.c ****   }
 4561              		.loc 1 1224 8 is_stmt 0 view .LVU1257
 4562 0066 0128     		cmp	r0, #1
 4563 0068 D9D0     		beq	.L360
1235:src/storage.c **** 
 4564              		.loc 1 1235 1 view .LVU1258
 4565 006a 06B0     		add	sp, sp, #24
 4566              		.cfi_remember_state
 4567              		.cfi_def_cfa_offset 8
 4568              		@ sp needed
 4569 006c 10BD     		pop	{r4, pc}
 4570              	.LVL418:
 4571              	.L356:
 4572              		.cfi_restore_state
1218:src/storage.c ****       return;
 4573              		.loc 1 1218 7 is_stmt 1 view .LVU1259
 4574 006e 6068     		ldr	r0, [r4, #4]
 4575              	.LVL419:
1218:src/storage.c ****       return;
 4576              		.loc 1 1218 7 is_stmt 0 view .LVU1260
 4577 0070 094B     		ldr	r3, .L365+32
 4578 0072 9847     		blx	r3
 4579              	.LVL420:
1219:src/storage.c ****     }
 4580              		.loc 1 1219 7 is_stmt 1 view .LVU1261
1235:src/storage.c **** 
 4581              		.loc 1 1235 1 is_stmt 0 view .LVU1262
 4582 0074 06B0     		add	sp, sp, #24
 4583              		.cfi_def_cfa_offset 8
 4584              		@ sp needed
 4585 0076 10BD     		pop	{r4, pc}
 4586              	.L366:
 4587              		.align	2
 4588              	.L365:
 4589 0078 00200010 		.word	268443648
 4590 007c 35040008 		.word	134218805
 4591 0080 00000000 		.word	.LC0
 4592 0084 00000000 		.word	backup_ram
 4593 0088 3D040008 		.word	134218813
 4594 008c 00000000 		.word	DispMsg
 4595 0090 18000000 		.word	.LC25
 4596 0094 14000000 		.word	.LC16
 4597 0098 39040008 		.word	134218809
 4598 009c 51030008 		.word	134218577
 4599 00a0 00000000 		.word	open_selected_file
 4600 00a4 1C000000 		.word	.LC19
 4601 00a8 2C000000 		.word	.LC2
 4602 00ac 00000000 		.word	.LC24
 4603              		.cfi_endproc
 4604              	.LFE37:
 4606              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4607              		.align	2
 4608              	.LC26:
 4609 0000 57726974 		.ascii	"Write err\000"
 4609      65206572 
 4609      7200
 4610 000a 0000     		.align	2
ARM GAS  /tmp/cc1iUxzj.s 			page 127


 4611              	.LC27:
 4612 000c 57726974 		.ascii	"Written\000"
 4612      74656E00 
 4613              		.align	2
 4614              	.LC28:
 4615 0014 53617665 		.ascii	"Save current program\000"
 4615      20637572 
 4615      72656E74 
 4615      2070726F 
 4615      6772616D 
 4616 0029 000000   		.align	2
 4617              	.LC29:
 4618 002c 4D656D20 		.ascii	"Mem short\000"
 4618      73686F72 
 4618      7400
 4619              		.section	.text.save_prog_file,"ax",%progbits
 4620              		.align	1
 4621              		.p2align 2,,3
 4622              		.global	save_prog_file
 4623              		.syntax unified
 4624              		.thumb
 4625              		.thumb_func
 4626              		.fpu fpv4-sp-d16
 4628              	save_prog_file:
 4629              	.LFB39:
1263:src/storage.c ****   opcode lbl; 
 4630              		.loc 1 1263 24 is_stmt 1 view -0
 4631              		.cfi_startproc
 4632              		@ args = 0, pretend = 0, frame = 8
 4633              		@ frame_needed = 0, uses_anonymous_args = 0
1264:src/storage.c ****   unsigned int pc;
 4634              		.loc 1 1264 3 view .LVU1264
1265:src/storage.c ****   unsigned short steps, prog_crc;
 4635              		.loc 1 1265 3 view .LVU1265
1266:src/storage.c ****   FRESULT f;
 4636              		.loc 1 1266 3 view .LVU1266
1267:src/storage.c ****   int data = WRITE;
 4637              		.loc 1 1267 3 view .LVU1267
1268:src/storage.c ****   int fss;
 4638              		.loc 1 1268 3 view .LVU1268
1263:src/storage.c ****   opcode lbl; 
 4639              		.loc 1 1263 24 is_stmt 0 view .LVU1269
 4640 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4641              		.cfi_def_cfa_offset 28
 4642              		.cfi_offset 4, -28
 4643              		.cfi_offset 5, -24
 4644              		.cfi_offset 6, -20
 4645              		.cfi_offset 7, -16
 4646              		.cfi_offset 8, -12
 4647              		.cfi_offset 9, -8
 4648              		.cfi_offset 14, -4
1270:src/storage.c ****   char* buffer;
 4649              		.loc 1 1270 8 view .LVU1270
 4650 0004 0023     		movs	r3, #0
1263:src/storage.c ****   opcode lbl; 
 4651              		.loc 1 1263 24 view .LVU1271
 4652 0006 87B0     		sub	sp, sp, #28
ARM GAS  /tmp/cc1iUxzj.s 			page 128


 4653              		.cfi_def_cfa_offset 56
1270:src/storage.c ****   char* buffer;
 4654              		.loc 1 1270 8 view .LVU1272
 4655 0008 0124     		movs	r4, #1
 4656 000a CDE90443 		strd	r4, r3, [sp, #16]
1271:src/storage.c ****   FLASH_REGION* fr;
 4657              		.loc 1 1271 3 is_stmt 1 view .LVU1273
1272:src/storage.c **** 
 4658              		.loc 1 1272 3 view .LVU1274
1275:src/storage.c ****     /*
 4659              		.loc 1 1275 3 view .LVU1275
1275:src/storage.c ****     /*
 4660              		.loc 1 1275 8 is_stmt 0 view .LVU1276
 4661 000e FFF7FEFF 		bl	not_running
 4662              	.LVL421:
1275:src/storage.c ****     /*
 4663              		.loc 1 1275 6 view .LVU1277
 4664 0012 C8B1     		cbz	r0, .L367
1279:src/storage.c ****     if ( pc == REGION_XROM ) {
 4665              		.loc 1 1279 5 is_stmt 1 view .LVU1278
 4666              	.LVL422:
1280:src/storage.c ****       error_message( ERR_ILLEGAL );
 4667              		.loc 1 1280 5 view .LVU1279
1279:src/storage.c ****     if ( pc == REGION_XROM ) {
 4668              		.loc 1 1279 10 is_stmt 0 view .LVU1280
 4669 0014 464D     		ldr	r5, .L384
 4670              	.LVL423:
1279:src/storage.c ****     if ( pc == REGION_XROM ) {
 4671              		.loc 1 1279 10 view .LVU1281
 4672 0016 2B68     		ldr	r3, [r5]
 4673 0018 B3F8E037 		ldrh	r3, [r3, #2016]
1280:src/storage.c ****       error_message( ERR_ILLEGAL );
 4674              		.loc 1 1280 8 view .LVU1282
 4675 001c 9B0B     		lsrs	r3, r3, #14
 4676 001e 032B     		cmp	r3, #3
 4677 0020 72D0     		beq	.L382
1287:src/storage.c ****     lbl = getprog( ProgBegin );
 4678              		.loc 1 1287 5 is_stmt 1 view .LVU1283
 4679 0022 2046     		mov	r0, r4
 4680 0024 FFF7FEFF 		bl	update_program_bounds
 4681              	.LVL424:
1288:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4682              		.loc 1 1288 5 view .LVU1284
1288:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4683              		.loc 1 1288 20 is_stmt 0 view .LVU1285
 4684 0028 2B68     		ldr	r3, [r5]
1288:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4685              		.loc 1 1288 11 view .LVU1286
 4686 002a B3F8EC07 		ldrh	r0, [r3, #2028]
 4687 002e FFF7FEFF 		bl	getprog
 4688              	.LVL425:
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4689              		.loc 1 1289 5 is_stmt 1 view .LVU1287
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4690              		.loc 1 1289 11 is_stmt 0 view .LVU1288
 4691 0032 00F47043 		and	r3, r0, #61440
1289:src/storage.c ****       error_message( ERR_NO_LBL );
ARM GAS  /tmp/cc1iUxzj.s 			page 129


 4692              		.loc 1 1289 8 view .LVU1289
 4693 0036 B3F5704F 		cmp	r3, #61440
 4694 003a 02D1     		bne	.L371
1289:src/storage.c ****       error_message( ERR_NO_LBL );
 4695              		.loc 1 1289 22 discriminator 1 view .LVU1290
 4696 003c 10F4706F 		tst	r0, #3840
 4697 0040 05D0     		beq	.L372
 4698              	.L371:
1290:src/storage.c ****       return;
 4699              		.loc 1 1290 7 is_stmt 1 view .LVU1291
 4700 0042 0620     		movs	r0, #6
 4701              	.LVL426:
1290:src/storage.c ****       return;
 4702              		.loc 1 1290 7 is_stmt 0 view .LVU1292
 4703 0044 FFF7FEFF 		bl	error_message
 4704              	.LVL427:
1291:src/storage.c ****     }
 4705              		.loc 1 1291 7 is_stmt 1 view .LVU1293
 4706              	.L367:
1336:src/storage.c **** 
 4707              		.loc 1 1336 1 is_stmt 0 view .LVU1294
 4708 0048 07B0     		add	sp, sp, #28
 4709              		.cfi_remember_state
 4710              		.cfi_def_cfa_offset 28
 4711              		@ sp needed
 4712 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4713              	.LVL428:
 4714              	.L372:
 4715              		.cfi_restore_state
1296:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4716              		.loc 1 1296 5 is_stmt 1 view .LVU1295
1296:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4717              		.loc 1 1296 17 is_stmt 0 view .LVU1296
 4718 004e 2B68     		ldr	r3, [r5]
1296:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4719              		.loc 1 1296 11 view .LVU1297
 4720 0050 B3F8EE57 		ldrh	r5, [r3, #2030]
 4721 0054 B3F8EC37 		ldrh	r3, [r3, #2028]
 4722 0058 0135     		adds	r5, r5, #1
 4723 005a ED1A     		subs	r5, r5, r3
 4724 005c ADB2     		uxth	r5, r5
 4725              	.LVL429:
1297:src/storage.c ****     /*
 4726              		.loc 1 1297 5 is_stmt 1 view .LVU1298
1297:src/storage.c ****     /*
 4727              		.loc 1 1297 23 is_stmt 0 view .LVU1299
 4728 005e FFF7FEFF 		bl	get_current_prog
 4729              	.LVL430:
 4730              	.LBB113:
 4731              	.LBB114:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4732              		.loc 1 162 2 view .LVU1300
 4733 0062 6E00     		lsls	r6, r5, #1
 4734              	.LVL431:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4735              		.loc 1 162 2 view .LVU1301
 4736              	.LBE114:
ARM GAS  /tmp/cc1iUxzj.s 			page 130


 4737              	.LBI113:
 156:src/storage.c **** {
 4738              		.loc 1 156 20 is_stmt 1 view .LVU1302
 4739              	.LBB115:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4740              		.loc 1 158 2 view .LVU1303
 159:src/storage.c **** 	unsigned int i;
 4741              		.loc 1 159 2 view .LVU1304
 160:src/storage.c **** 
 4742              		.loc 1 160 2 view .LVU1305
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4743              		.loc 1 162 2 view .LVU1306
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4744              		.loc 1 162 15 view .LVU1307
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4745              		.loc 1 162 2 is_stmt 0 view .LVU1308
 4746 0064 002D     		cmp	r5, #0
 4747 0066 55D0     		beq	.L378
 4748 0068 8119     		adds	r1, r0, r6
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4749              		.loc 1 158 21 view .LVU1309
 4750 006a 45F6A524 		movw	r4, #23205
 4751              	.LVL432:
 4752              	.L374:
 163:src/storage.c **** 		crc ^= *d++;
 4753              		.loc 1 163 3 is_stmt 1 view .LVU1310
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4754              		.loc 1 164 10 is_stmt 0 view .LVU1311
 4755 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4756              	.LVL433:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4757              		.loc 1 164 10 view .LVU1312
 4758 0072 63BA     		rev16	r3, r4
 4759 0074 9BB2     		uxth	r3, r3
 4760              	.LVL434:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4761              		.loc 1 164 3 is_stmt 1 view .LVU1313
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4762              		.loc 1 164 7 is_stmt 0 view .LVU1314
 4763 0076 5340     		eors	r3, r3, r2
 4764              	.LVL435:
 165:src/storage.c **** 		crc ^= crc << 12;
 4765              		.loc 1 165 3 is_stmt 1 view .LVU1315
 165:src/storage.c **** 		crc ^= crc << 12;
 4766              		.loc 1 165 7 is_stmt 0 view .LVU1316
 4767 0078 C3F30312 		ubfx	r2, r3, #4, #4
 4768 007c 5340     		eors	r3, r3, r2
 4769              	.LVL436:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4770              		.loc 1 166 3 is_stmt 1 view .LVU1317
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4771              		.loc 1 166 7 is_stmt 0 view .LVU1318
 4772 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4773              	.LVL437:
 167:src/storage.c **** 	}
 4774              		.loc 1 167 3 is_stmt 1 view .LVU1319
 167:src/storage.c **** 	}
ARM GAS  /tmp/cc1iUxzj.s 			page 131


 4775              		.loc 1 167 25 is_stmt 0 view .LVU1320
 4776 0082 5C01     		lsls	r4, r3, #5
 4777 0084 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
 4778              		.loc 1 167 7 view .LVU1321
 4779 0088 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4780              		.loc 1 162 2 view .LVU1322
 4781 008a 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 4782              		.loc 1 167 7 view .LVU1323
 4783 008c 84EA0304 		eor	r4, r4, r3
 4784              	.LVL438:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4785              		.loc 1 162 27 is_stmt 1 view .LVU1324
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4786              		.loc 1 162 15 view .LVU1325
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4787              		.loc 1 162 2 is_stmt 0 view .LVU1326
 4788 0090 EDD1     		bne	.L374
 4789              	.LVL439:
 4790              	.L373:
 169:src/storage.c **** }
 4791              		.loc 1 169 2 is_stmt 1 view .LVU1327
 169:src/storage.c **** }
 4792              		.loc 1 169 2 is_stmt 0 view .LVU1328
 4793              	.LBE115:
 4794              	.LBE113:
1301:src/storage.c **** 
 4795              		.loc 1 1301 5 is_stmt 1 view .LVU1329
 4796 0092 DFF8D080 		ldr	r8, .L384+52
1303:src/storage.c ****     if (fss != 1) return;
 4797              		.loc 1 1303 11 is_stmt 0 view .LVU1330
 4798 0096 274F     		ldr	r7, .L384+4
1301:src/storage.c **** 
 4799              		.loc 1 1301 5 view .LVU1331
 4800 0098 0120     		movs	r0, #1
 4801 009a C047     		blx	r8
 4802              	.LVL440:
1303:src/storage.c ****     if (fss != 1) return;
 4803              		.loc 1 1303 5 is_stmt 1 view .LVU1332
1303:src/storage.c ****     if (fss != 1) return;
 4804              		.loc 1 1303 11 is_stmt 0 view .LVU1333
 4805 009c 0123     		movs	r3, #1
 4806 009e 04AA     		add	r2, sp, #16
 4807 00a0 CDE90132 		strd	r3, r2, [sp, #4]
 4808 00a4 0093     		str	r3, [sp]
 4809 00a6 244A     		ldr	r2, .L384+8
 4810 00a8 244B     		ldr	r3, .L384+12
 4811 00aa 2549     		ldr	r1, .L384+16
 4812 00ac 2548     		ldr	r0, .L384+20
 4813 00ae B847     		blx	r7
 4814              	.LVL441:
1304:src/storage.c **** 
 4815              		.loc 1 1304 5 is_stmt 1 view .LVU1334
1304:src/storage.c **** 
 4816              		.loc 1 1304 8 is_stmt 0 view .LVU1335
ARM GAS  /tmp/cc1iUxzj.s 			page 132


 4817 00b0 0128     		cmp	r0, #1
 4818 00b2 C9D1     		bne	.L367
1308:src/storage.c ****     if (!buffer) {// calloc failure!
 4819              		.loc 1 1308 5 is_stmt 1 view .LVU1336
1308:src/storage.c ****     if (!buffer) {// calloc failure!
 4820              		.loc 1 1308 14 is_stmt 0 view .LVU1337
 4821 00b4 0146     		mov	r1, r0
 4822 00b6 4FF40060 		mov	r0, #2048
 4823              	.LVL442:
1308:src/storage.c ****     if (!buffer) {// calloc failure!
 4824              		.loc 1 1308 14 view .LVU1338
 4825 00ba FFF7FEFF 		bl	calloc
 4826              	.LVL443:
1309:src/storage.c ****       f_close(FPT);
 4827              		.loc 1 1309 5 is_stmt 1 view .LVU1339
1309:src/storage.c ****       f_close(FPT);
 4828              		.loc 1 1309 8 is_stmt 0 view .LVU1340
 4829 00be 0746     		mov	r7, r0
 4830 00c0 58B3     		cbz	r0, .L383
1316:src/storage.c ****     fr->size = steps;
 4831              		.loc 1 1316 5 is_stmt 1 view .LVU1341
 4832              	.LVL444:
1317:src/storage.c ****     fr->crc = prog_crc;
 4833              		.loc 1 1317 5 view .LVU1342
1318:src/storage.c **** 
 4834              		.loc 1 1318 13 is_stmt 0 view .LVU1343
 4835 00c2 8146     		mov	r9, r0
1317:src/storage.c ****     fr->crc = prog_crc;
 4836              		.loc 1 1317 14 view .LVU1344
 4837 00c4 4580     		strh	r5, [r0, #2]	@ movhi
1318:src/storage.c **** 
 4838              		.loc 1 1318 5 is_stmt 1 view .LVU1345
1318:src/storage.c **** 
 4839              		.loc 1 1318 13 is_stmt 0 view .LVU1346
 4840 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
1320:src/storage.c ****    
 4841              		.loc 1 1320 5 is_stmt 1 view .LVU1347
1320:src/storage.c ****    
 4842              		.loc 1 1320 22 is_stmt 0 view .LVU1348
 4843 00ca FFF7FEFF 		bl	get_current_prog
 4844              	.LVL445:
1322:src/storage.c ****     free(buffer);
 4845              		.loc 1 1322 9 view .LVU1349
 4846 00ce 1E4D     		ldr	r5, .L384+24
 4847              	.LVL446:
1322:src/storage.c ****     free(buffer);
 4848              		.loc 1 1322 9 view .LVU1350
 4849 00d0 1E4C     		ldr	r4, .L384+28
 4850              	.LVL447:
1320:src/storage.c ****    
 4851              		.loc 1 1320 22 view .LVU1351
 4852 00d2 0146     		mov	r1, r0
1320:src/storage.c ****    
 4853              		.loc 1 1320 5 view .LVU1352
 4854 00d4 3246     		mov	r2, r6
 4855 00d6 4846     		mov	r0, r9
 4856 00d8 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/cc1iUxzj.s 			page 133


 4857              	.LVL448:
1322:src/storage.c ****     free(buffer);
 4858              		.loc 1 1322 5 is_stmt 1 view .LVU1353
1322:src/storage.c ****     free(buffer);
 4859              		.loc 1 1322 9 is_stmt 0 view .LVU1354
 4860 00dc 321D     		adds	r2, r6, #4
 4861 00de 05AB     		add	r3, sp, #20
 4862 00e0 3946     		mov	r1, r7
 4863 00e2 6868     		ldr	r0, [r5, #4]
 4864 00e4 A047     		blx	r4
 4865              	.LVL449:
 4866 00e6 0446     		mov	r4, r0
1323:src/storage.c ****     
 4867              		.loc 1 1323 5 view .LVU1355
 4868 00e8 3846     		mov	r0, r7
 4869              	.LVL450:
1323:src/storage.c ****     
 4870              		.loc 1 1323 5 is_stmt 1 view .LVU1356
 4871 00ea FFF7FEFF 		bl	free
 4872              	.LVL451:
1325:src/storage.c ****       DispMsg = "Write err";
 4873              		.loc 1 1325 5 view .LVU1357
1329:src/storage.c ****     }
 4874              		.loc 1 1329 15 is_stmt 0 view .LVU1358
 4875 00ee 184B     		ldr	r3, .L384+32
 4876 00f0 1848     		ldr	r0, .L384+36
 4877 00f2 1949     		ldr	r1, .L384+40
1332:src/storage.c ****     sys_disk_write_enable(0);
 4878              		.loc 1 1332 5 view .LVU1359
 4879 00f4 194A     		ldr	r2, .L384+44
1329:src/storage.c ****     }
 4880              		.loc 1 1329 15 view .LVU1360
 4881 00f6 002C     		cmp	r4, #0
 4882 00f8 18BF     		it	ne
 4883 00fa 1846     		movne	r0, r3
 4884 00fc 0860     		str	r0, [r1]
1332:src/storage.c ****     sys_disk_write_enable(0);
 4885              		.loc 1 1332 5 is_stmt 1 view .LVU1361
 4886 00fe 6868     		ldr	r0, [r5, #4]
 4887 0100 9047     		blx	r2
 4888              	.LVL452:
1333:src/storage.c ****     
 4889              		.loc 1 1333 5 view .LVU1362
 4890 0102 0020     		movs	r0, #0
 4891 0104 C047     		blx	r8
 4892              	.LVL453:
 4893 0106 9FE7     		b	.L367
 4894              	.LVL454:
 4895              	.L382:
1281:src/storage.c ****       return;
 4896              		.loc 1 1281 7 view .LVU1363
 4897 0108 0720     		movs	r0, #7
 4898 010a FFF7FEFF 		bl	error_message
 4899              	.LVL455:
1282:src/storage.c ****     }
 4900              		.loc 1 1282 7 view .LVU1364
1336:src/storage.c **** 
ARM GAS  /tmp/cc1iUxzj.s 			page 134


 4901              		.loc 1 1336 1 is_stmt 0 view .LVU1365
 4902 010e 07B0     		add	sp, sp, #28
 4903              		.cfi_remember_state
 4904              		.cfi_def_cfa_offset 28
 4905              		@ sp needed
 4906 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4907              	.LVL456:
 4908              	.L378:
 4909              		.cfi_restore_state
 4910              	.LBB117:
 4911              	.LBB116:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4912              		.loc 1 158 21 view .LVU1366
 4913 0114 45F6A524 		movw	r4, #23205
 4914 0118 BBE7     		b	.L373
 4915              	.LVL457:
 4916              	.L383:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4917              		.loc 1 158 21 view .LVU1367
 4918              	.LBE116:
 4919              	.LBE117:
1310:src/storage.c ****       sys_disk_write_enable(0);
 4920              		.loc 1 1310 7 is_stmt 1 view .LVU1368
 4921 011a 0B4A     		ldr	r2, .L384+24
 4922 011c 0F4B     		ldr	r3, .L384+44
 4923 011e 5068     		ldr	r0, [r2, #4]
 4924              	.LVL458:
1310:src/storage.c ****       sys_disk_write_enable(0);
 4925              		.loc 1 1310 7 is_stmt 0 view .LVU1369
 4926 0120 9847     		blx	r3
 4927              	.LVL459:
1311:src/storage.c ****       DispMsg = "Mem short";
 4928              		.loc 1 1311 7 is_stmt 1 view .LVU1370
 4929 0122 3846     		mov	r0, r7
 4930 0124 C047     		blx	r8
 4931              	.LVL460:
1312:src/storage.c ****       return;
 4932              		.loc 1 1312 7 view .LVU1371
1312:src/storage.c ****       return;
 4933              		.loc 1 1312 15 is_stmt 0 view .LVU1372
 4934 0126 0C4B     		ldr	r3, .L384+40
 4935 0128 0D4A     		ldr	r2, .L384+48
 4936 012a 1A60     		str	r2, [r3]
1313:src/storage.c ****     }
 4937              		.loc 1 1313 7 is_stmt 1 view .LVU1373
 4938 012c 8CE7     		b	.L367
 4939              	.L385:
 4940 012e 00BF     		.align	2
 4941              	.L384:
 4942 0130 00000000 		.word	main_ram
 4943 0134 51030008 		.word	134218577
 4944 0138 1C000000 		.word	.LC19
 4945 013c 00000000 		.word	open_selected_file
 4946 0140 2C000000 		.word	.LC2
 4947 0144 14000000 		.word	.LC28
 4948 0148 00200010 		.word	268443648
 4949 014c 41040008 		.word	134218817
ARM GAS  /tmp/cc1iUxzj.s 			page 135


 4950 0150 00000000 		.word	.LC26
 4951 0154 0C000000 		.word	.LC27
 4952 0158 00000000 		.word	DispMsg
 4953 015c 39040008 		.word	134218809
 4954 0160 2C000000 		.word	.LC29
 4955 0164 E1030008 		.word	134218721
 4956              		.cfi_endproc
 4957              	.LFE39:
 4959              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4960              		.align	2
 4961              	.LC30:
 4962 0000 4C6F6164 		.ascii	"Load PROG File\000"
 4962      2050524F 
 4962      47204669 
 4962      6C6500
 4963 000f 00       		.align	2
 4964              	.LC31:
 4965 0010 46696C65 		.ascii	"File odd\000"
 4965      206F6464 
 4965      00
 4966 0019 000000   		.align	2
 4967              	.LC32:
 4968 001c 46696C65 		.ascii	"File crc err\000"
 4968      20637263 
 4968      20657272 
 4968      00
 4969              		.section	.text.load_prog_file,"ax",%progbits
 4970              		.align	1
 4971              		.p2align 2,,3
 4972              		.global	load_prog_file
 4973              		.syntax unified
 4974              		.thumb
 4975              		.thumb_func
 4976              		.fpu fpv4-sp-d16
 4978              	load_prog_file:
 4979              	.LFB40:
1338:src/storage.c ****   int fss, fsize;
 4980              		.loc 1 1338 24 view -0
 4981              		.cfi_startproc
 4982              		@ args = 0, pretend = 0, frame = 8
 4983              		@ frame_needed = 0, uses_anonymous_args = 0
1339:src/storage.c ****   int data = READ;
 4984              		.loc 1 1339 3 view .LVU1375
1340:src/storage.c ****   uint x=0;
 4985              		.loc 1 1340 3 view .LVU1376
1338:src/storage.c ****   int fss, fsize;
 4986              		.loc 1 1338 24 is_stmt 0 view .LVU1377
 4987 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4988              		.cfi_def_cfa_offset 20
 4989              		.cfi_offset 4, -20
 4990              		.cfi_offset 5, -16
 4991              		.cfi_offset 6, -12
 4992              		.cfi_offset 7, -8
 4993              		.cfi_offset 14, -4
 4994 0002 87B0     		sub	sp, sp, #28
 4995              		.cfi_def_cfa_offset 48
1341:src/storage.c ****   FLASH_REGION* fr;
ARM GAS  /tmp/cc1iUxzj.s 			page 136


 4996              		.loc 1 1341 8 view .LVU1378
 4997 0004 0023     		movs	r3, #0
1340:src/storage.c ****   uint x=0;
 4998              		.loc 1 1340 7 view .LVU1379
 4999 0006 0221     		movs	r1, #2
1345:src/storage.c ****   if (fss != 1) return;
 5000              		.loc 1 1345 9 view .LVU1380
 5001 0008 04AA     		add	r2, sp, #16
1341:src/storage.c ****   FLASH_REGION* fr;
 5002              		.loc 1 1341 8 view .LVU1381
 5003 000a CDE90413 		strd	r1, r3, [sp, #16]
1342:src/storage.c ****   char* buffer;
 5004              		.loc 1 1342 3 is_stmt 1 view .LVU1382
1343:src/storage.c **** 
 5005              		.loc 1 1343 3 view .LVU1383
1345:src/storage.c ****   if (fss != 1) return;
 5006              		.loc 1 1345 3 view .LVU1384
1345:src/storage.c ****   if (fss != 1) return;
 5007              		.loc 1 1345 9 is_stmt 0 view .LVU1385
 5008 000e CDE90033 		strd	r3, r3, [sp]
 5009 0012 0292     		str	r2, [sp, #8]
 5010 0014 284C     		ldr	r4, .L400
 5011 0016 294B     		ldr	r3, .L400+4
 5012 0018 294A     		ldr	r2, .L400+8
 5013 001a 2A49     		ldr	r1, .L400+12
 5014 001c 2A48     		ldr	r0, .L400+16
 5015 001e A047     		blx	r4
 5016              	.LVL461:
1346:src/storage.c **** 
 5017              		.loc 1 1346 3 is_stmt 1 view .LVU1386
1346:src/storage.c **** 
 5018              		.loc 1 1346 6 is_stmt 0 view .LVU1387
 5019 0020 0128     		cmp	r0, #1
 5020 0022 0BD1     		bne	.L386
1350:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5021              		.loc 1 1350 3 is_stmt 1 view .LVU1388
1350:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5022              		.loc 1 1350 11 is_stmt 0 view .LVU1389
 5023 0024 294F     		ldr	r7, .L400+20
 5024 0026 7D68     		ldr	r5, [r7, #4]
 5025 0028 EE68     		ldr	r6, [r5, #12]
 5026              	.LVL462:
1351:src/storage.c ****     f_close(FPT);
 5027              		.loc 1 1351 3 is_stmt 1 view .LVU1390
1351:src/storage.c ****     f_close(FPT);
 5028              		.loc 1 1351 6 is_stmt 0 view .LVU1391
 5029 002a B6F5804F 		cmp	r6, #16384
 5030 002e 07DD     		ble	.L388
1352:src/storage.c ****     DispMsg = "File too big";
 5031              		.loc 1 1352 5 is_stmt 1 view .LVU1392
 5032 0030 274B     		ldr	r3, .L400+24
 5033 0032 2846     		mov	r0, r5
 5034              	.LVL463:
1352:src/storage.c ****     DispMsg = "File too big";
 5035              		.loc 1 1352 5 is_stmt 0 view .LVU1393
 5036 0034 9847     		blx	r3
 5037              	.LVL464:
ARM GAS  /tmp/cc1iUxzj.s 			page 137


1353:src/storage.c ****     return;
 5038              		.loc 1 1353 5 is_stmt 1 view .LVU1394
1353:src/storage.c ****     return;
 5039              		.loc 1 1353 13 is_stmt 0 view .LVU1395
 5040 0036 274B     		ldr	r3, .L400+28
 5041 0038 274A     		ldr	r2, .L400+32
 5042 003a 1A60     		str	r2, [r3]
1354:src/storage.c ****   }
 5043              		.loc 1 1354 5 is_stmt 1 view .LVU1396
 5044              	.LVL465:
 5045              	.L386:
1382:src/storage.c **** 
 5046              		.loc 1 1382 1 is_stmt 0 view .LVU1397
 5047 003c 07B0     		add	sp, sp, #28
 5048              		.cfi_remember_state
 5049              		.cfi_def_cfa_offset 20
 5050              		@ sp needed
 5051 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 5052              	.LVL466:
 5053              	.L388:
 5054              		.cfi_restore_state
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5055              		.loc 1 1356 3 is_stmt 1 view .LVU1398
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5056              		.loc 1 1356 31 is_stmt 0 view .LVU1399
 5057 0040 26F0FF03 		bic	r3, r6, #255
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5058              		.loc 1 1356 12 view .LVU1400
 5059 0044 0146     		mov	r1, r0
 5060 0046 03F58070 		add	r0, r3, #256
 5061              	.LVL467:
1356:src/storage.c ****   if (!buffer) {// calloc failure!
 5062              		.loc 1 1356 12 view .LVU1401
 5063 004a FFF7FEFF 		bl	calloc
 5064              	.LVL468:
1357:src/storage.c ****     f_close(FPT);
 5065              		.loc 1 1357 3 is_stmt 1 view .LVU1402
1357:src/storage.c ****     f_close(FPT);
 5066              		.loc 1 1357 6 is_stmt 0 view .LVU1403
 5067 004e 0446     		mov	r4, r0
 5068 0050 58B3     		cbz	r0, .L397
1363:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5069              		.loc 1 1363 3 is_stmt 1 view .LVU1404
 5070 0052 3246     		mov	r2, r6
 5071 0054 2846     		mov	r0, r5
 5072              	.LVL469:
1363:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5073              		.loc 1 1363 3 is_stmt 0 view .LVU1405
 5074 0056 05AB     		add	r3, sp, #20
 5075 0058 204D     		ldr	r5, .L400+36
 5076 005a 2146     		mov	r1, r4
 5077 005c A847     		blx	r5
 5078              	.LVL470:
1364:src/storage.c ****     free(buffer);
 5079              		.loc 1 1364 3 is_stmt 1 view .LVU1406
1364:src/storage.c ****     free(buffer);
 5080              		.loc 1 1364 8 is_stmt 0 view .LVU1407
ARM GAS  /tmp/cc1iUxzj.s 			page 138


 5081 005e 7868     		ldr	r0, [r7, #4]
1364:src/storage.c ****     free(buffer);
 5082              		.loc 1 1364 6 view .LVU1408
 5083 0060 8269     		ldr	r2, [r0, #24]
 5084 0062 C368     		ldr	r3, [r0, #12]
 5085 0064 9A42     		cmp	r2, r3
 5086 0066 12D1     		bne	.L398
1370:src/storage.c **** 
 5087              		.loc 1 1370 3 is_stmt 1 view .LVU1409
 5088 0068 194B     		ldr	r3, .L400+24
 5089 006a 9847     		blx	r3
 5090              	.LVL471:
1372:src/storage.c ****     
 5091              		.loc 1 1372 3 view .LVU1410
1374:src/storage.c ****     DispMsg = "File crc err";
 5092              		.loc 1 1374 3 view .LVU1411
1374:src/storage.c ****     DispMsg = "File crc err";
 5093              		.loc 1 1374 7 is_stmt 0 view .LVU1412
 5094 006c 2146     		mov	r1, r4
 5095 006e 2046     		mov	r0, r4
 5096 0070 FFF7FEFF 		bl	checksum_region
 5097              	.LVL472:
1374:src/storage.c ****     DispMsg = "File crc err";
 5098              		.loc 1 1374 6 view .LVU1413
 5099 0074 A8B9     		cbnz	r0, .L399
1380:src/storage.c ****   free(buffer);
 5100              		.loc 1 1380 3 is_stmt 1 view .LVU1414
 5101              	.LVL473:
 5102              	.LBB118:
 5103              	.LBI118:
1384:src/storage.c **** { // buffer contains all of program file
 5104              		.loc 1 1384 6 view .LVU1415
 5105              	.LBB119:
1386:src/storage.c ****   int space_needed, count, free;
 5106              		.loc 1 1386 3 view .LVU1416
1387:src/storage.c **** 
 5107              		.loc 1 1387 3 view .LVU1417
1389:src/storage.c ****     /*
 5108              		.loc 1 1389 3 view .LVU1418
1389:src/storage.c ****     /*
 5109              		.loc 1 1389 8 is_stmt 0 view .LVU1419
 5110 0076 FFF7FEFF 		bl	not_running
 5111              	.LVL474:
1389:src/storage.c ****     /*
 5112              		.loc 1 1389 6 view .LVU1420
 5113 007a 10B1     		cbz	r0, .L392
 5114 007c 2046     		mov	r0, r4
 5115 007e FFF7FEFF 		bl	store_program_from_buffer.part.0
 5116              	.LVL475:
 5117              	.L392:
1389:src/storage.c ****     /*
 5118              		.loc 1 1389 6 view .LVU1421
 5119              	.LBE119:
 5120              	.LBE118:
1381:src/storage.c **** }
 5121              		.loc 1 1381 3 is_stmt 1 view .LVU1422
 5122 0082 2046     		mov	r0, r4
ARM GAS  /tmp/cc1iUxzj.s 			page 139


1382:src/storage.c **** 
 5123              		.loc 1 1382 1 is_stmt 0 view .LVU1423
 5124 0084 07B0     		add	sp, sp, #28
 5125              		.cfi_remember_state
 5126              		.cfi_def_cfa_offset 20
 5127              		@ sp needed
 5128 0086 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5129              		.cfi_restore 14
 5130              		.cfi_restore 7
 5131              		.cfi_restore 6
 5132              		.cfi_restore 5
 5133              		.cfi_restore 4
 5134              		.cfi_def_cfa_offset 0
 5135              	.LVL476:
1381:src/storage.c **** }
 5136              		.loc 1 1381 3 view .LVU1424
 5137 008a FFF7FEBF 		b	free
 5138              	.LVL477:
 5139              	.L398:
 5140              		.cfi_restore_state
1365:src/storage.c ****     f_close(FPT);
 5141              		.loc 1 1365 5 is_stmt 1 view .LVU1425
 5142 008e 2046     		mov	r0, r4
 5143 0090 FFF7FEFF 		bl	free
 5144              	.LVL478:
1366:src/storage.c ****     DispMsg = "File odd";
 5145              		.loc 1 1366 5 view .LVU1426
 5146 0094 0E4B     		ldr	r3, .L400+24
 5147 0096 7868     		ldr	r0, [r7, #4]
 5148 0098 9847     		blx	r3
 5149              	.LVL479:
1367:src/storage.c ****     return;
 5150              		.loc 1 1367 5 view .LVU1427
1367:src/storage.c ****     return;
 5151              		.loc 1 1367 13 is_stmt 0 view .LVU1428
 5152 009a 0E4B     		ldr	r3, .L400+28
 5153 009c 104A     		ldr	r2, .L400+40
 5154 009e 1A60     		str	r2, [r3]
1368:src/storage.c ****   }
 5155              		.loc 1 1368 5 is_stmt 1 view .LVU1429
 5156 00a0 CCE7     		b	.L386
 5157              	.LVL480:
 5158              	.L399:
1375:src/storage.c ****         free(buffer);
 5159              		.loc 1 1375 5 view .LVU1430
1375:src/storage.c ****         free(buffer);
 5160              		.loc 1 1375 13 is_stmt 0 view .LVU1431
 5161 00a2 0C4B     		ldr	r3, .L400+28
 5162 00a4 0F4A     		ldr	r2, .L400+44
 5163 00a6 1A60     		str	r2, [r3]
1376:src/storage.c ****     return;
 5164              		.loc 1 1376 9 is_stmt 1 view .LVU1432
 5165 00a8 EBE7     		b	.L392
 5166              	.LVL481:
 5167              	.L397:
1358:src/storage.c ****     DispMsg = "Mem short";
 5168              		.loc 1 1358 5 view .LVU1433
ARM GAS  /tmp/cc1iUxzj.s 			page 140


 5169 00aa 094B     		ldr	r3, .L400+24
 5170 00ac 2846     		mov	r0, r5
 5171              	.LVL482:
1358:src/storage.c ****     DispMsg = "Mem short";
 5172              		.loc 1 1358 5 is_stmt 0 view .LVU1434
 5173 00ae 9847     		blx	r3
 5174              	.LVL483:
1359:src/storage.c ****     return;
 5175              		.loc 1 1359 5 is_stmt 1 view .LVU1435
1359:src/storage.c ****     return;
 5176              		.loc 1 1359 13 is_stmt 0 view .LVU1436
 5177 00b0 084B     		ldr	r3, .L400+28
 5178 00b2 0D4A     		ldr	r2, .L400+48
 5179 00b4 1A60     		str	r2, [r3]
1360:src/storage.c ****   }
 5180              		.loc 1 1360 5 is_stmt 1 view .LVU1437
 5181 00b6 C1E7     		b	.L386
 5182              	.L401:
 5183              		.align	2
 5184              	.L400:
 5185 00b8 51030008 		.word	134218577
 5186 00bc 00000000 		.word	open_selected_file
 5187 00c0 1C000000 		.word	.LC19
 5188 00c4 2C000000 		.word	.LC2
 5189 00c8 00000000 		.word	.LC30
 5190 00cc 00200010 		.word	268443648
 5191 00d0 39040008 		.word	134218809
 5192 00d4 00000000 		.word	DispMsg
 5193 00d8 14000000 		.word	.LC16
 5194 00dc 3D040008 		.word	134218813
 5195 00e0 10000000 		.word	.LC31
 5196 00e4 1C000000 		.word	.LC32
 5197 00e8 2C000000 		.word	.LC29
 5198              		.cfi_endproc
 5199              	.LFE40:
 5201              		.section	.text.store_program_from_buffer,"ax",%progbits
 5202              		.align	1
 5203              		.p2align 2,,3
 5204              		.global	store_program_from_buffer
 5205              		.syntax unified
 5206              		.thumb
 5207              		.thumb_func
 5208              		.fpu fpv4-sp-d16
 5210              	store_program_from_buffer:
 5211              	.LVL484:
 5212              	.LFB41:
1385:src/storage.c ****   unsigned int pc;
 5213              		.loc 1 1385 1 view -0
 5214              		.cfi_startproc
 5215              		@ args = 0, pretend = 0, frame = 0
 5216              		@ frame_needed = 0, uses_anonymous_args = 0
1386:src/storage.c ****   int space_needed, count, free;
 5217              		.loc 1 1386 3 view .LVU1439
1387:src/storage.c **** 
 5218              		.loc 1 1387 3 view .LVU1440
1389:src/storage.c ****     /*
 5219              		.loc 1 1389 3 view .LVU1441
ARM GAS  /tmp/cc1iUxzj.s 			page 141


1385:src/storage.c ****   unsigned int pc;
 5220              		.loc 1 1385 1 is_stmt 0 view .LVU1442
 5221 0000 10B5     		push	{r4, lr}
 5222              		.cfi_def_cfa_offset 8
 5223              		.cfi_offset 4, -8
 5224              		.cfi_offset 14, -4
1385:src/storage.c ****   unsigned int pc;
 5225              		.loc 1 1385 1 view .LVU1443
 5226 0002 0446     		mov	r4, r0
1389:src/storage.c ****     /*
 5227              		.loc 1 1389 8 view .LVU1444
 5228 0004 FFF7FEFF 		bl	not_running
 5229              	.LVL485:
1389:src/storage.c ****     /*
 5230              		.loc 1 1389 6 view .LVU1445
 5231 0008 20B1     		cbz	r0, .L402
 5232 000a 2046     		mov	r0, r4
 5233              		.loc 1 1431 1 view .LVU1446
 5234 000c BDE81040 		pop	{r4, lr}
 5235              		.cfi_remember_state
 5236              		.cfi_restore 14
 5237              		.cfi_restore 4
 5238              		.cfi_def_cfa_offset 0
 5239              	.LVL486:
 5240              		.loc 1 1431 1 view .LVU1447
 5241 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5242              	.LVL487:
 5243              	.L402:
 5244              		.cfi_restore_state
 5245              		.loc 1 1431 1 view .LVU1448
 5246 0014 10BD     		pop	{r4, pc}
 5247              		.loc 1 1431 1 view .LVU1449
 5248              		.cfi_endproc
 5249              	.LFE41:
 5251              		.comm	XromA2D,64,4
 5252              		.comm	XromLocal,464,4
 5253              		.comm	XromParams,16,4
 5254              		.comm	StateWhileOn,52,4
 5255              		.comm	library_ram,4,4
 5256              		.comm	backup_ram,4,4
 5257              		.comm	main_ram,4,4
 5258 0016 00BF     		.text
 5259              	.Letext0:
 5260              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5261              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5262              		.file 4 "/usr/include/newlib/sys/_types.h"
 5263              		.file 5 "/usr/include/newlib/sys/reent.h"
 5264              		.file 6 "/usr/include/newlib/sys/lock.h"
 5265              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5266              		.file 8 "/usr/include/newlib/sys/types.h"
 5267              		.file 9 "/usr/include/newlib/stdlib.h"
 5268              		.file 10 "dmcp/ff_ifc.h"
 5269              		.file 11 "dmcp/dmcp.h"
 5270              		.file 12 "src/decNumber/decContext.h"
 5271              		.file 13 "src/decNumber/decNumber.h"
 5272              		.file 14 "src/decNumber/decimal64.h"
 5273              		.file 15 "src/decNumber/decimal128.h"
ARM GAS  /tmp/cc1iUxzj.s 			page 142


 5274              		.file 16 "src/xeq.h"
 5275              		.file 17 "src/data.h"
 5276              		.file 18 "src/storage.h"
 5277              		.file 19 "src/display.h"
 5278              		.file 20 "src/stats.h"
 5279              		.file 21 "src/alpha.h"
 5280              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc1iUxzj.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/cc1iUxzj.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/cc1iUxzj.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/cc1iUxzj.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/cc1iUxzj.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/cc1iUxzj.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/cc1iUxzj.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/cc1iUxzj.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/cc1iUxzj.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:305    .text.program_flash:0000000000000000 $t
     /tmp/cc1iUxzj.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/cc1iUxzj.s:568    .text.program_flash:00000000000000d4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/cc1iUxzj.s:584    .text.flash_append:0000000000000000 $t
     /tmp/cc1iUxzj.s:591    .text.flash_append:0000000000000000 flash_append
     /tmp/cc1iUxzj.s:762    .text.flash_append:000000000000009c $d
     /tmp/cc1iUxzj.s:768    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:775    .text.open_selected_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:783    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/cc1iUxzj.s:899    .text.open_selected_file:0000000000000050 $d
     /tmp/cc1iUxzj.s:910    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:914    .text.init_mem:0000000000000000 $t
     /tmp/cc1iUxzj.s:922    .text.init_mem:0000000000000000 init_mem
     /tmp/cc1iUxzj.s:986    .text.init_mem:0000000000000030 $d
     /tmp/cc1iUxzj.s:994    .text.crc16:0000000000000000 $t
     /tmp/cc1iUxzj.s:1002   .text.crc16:0000000000000000 crc16
     /tmp/cc1iUxzj.s:1081   .text.checksum_program:0000000000000000 $t
     /tmp/cc1iUxzj.s:1089   .text.checksum_program:0000000000000000 checksum_program
     /tmp/cc1iUxzj.s:1201   .text.checksum_program:0000000000000058 $d
     /tmp/cc1iUxzj.s:1206   .text.checksum_ram:0000000000000000 $t
     /tmp/cc1iUxzj.s:1214   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/cc1iUxzj.s:1233   .text.checksum_ram:0000000000000014 $d
     /tmp/cc1iUxzj.s:1238   .text.checksum_backup:0000000000000000 $t
     /tmp/cc1iUxzj.s:1246   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/cc1iUxzj.s:1378   .text.checksum_backup:0000000000000054 $d
     /tmp/cc1iUxzj.s:1383   .text.clpall:0000000000000000 $t
     /tmp/cc1iUxzj.s:1391   .text.clpall:0000000000000000 clpall
     /tmp/cc1iUxzj.s:1430   .text.clpall:0000000000000018 $d
     /tmp/cc1iUxzj.s:1435   .text.clrall:0000000000000000 $t
     /tmp/cc1iUxzj.s:1443   .text.clrall:0000000000000000 clrall
     /tmp/cc1iUxzj.s:1529   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/cc1iUxzj.s:1536   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:1540   .text.reset:0000000000000000 $t
     /tmp/cc1iUxzj.s:1548   .text.reset:0000000000000000 reset
     /tmp/cc1iUxzj.s:1583   .text.reset:0000000000000020 $d
     /tmp/cc1iUxzj.s:1590   .text.stoprog:0000000000000000 $t
     /tmp/cc1iUxzj.s:1598   .text.stoprog:0000000000000000 stoprog
     /tmp/cc1iUxzj.s:1806   .text.stoprog:00000000000000e4 $d
     /tmp/cc1iUxzj.s:1812   .text.delprog:0000000000000000 $t
     /tmp/cc1iUxzj.s:1820   .text.delprog:0000000000000000 delprog
     /tmp/cc1iUxzj.s:1935   .text.delprog:0000000000000068 $d
     /tmp/cc1iUxzj.s:1940   .text.append_program:0000000000000000 $t
     /tmp/cc1iUxzj.s:1948   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/cc1iUxzj.s 			page 144


     /tmp/cc1iUxzj.s:2173   .text.append_program:00000000000000c4 $d
     /tmp/cc1iUxzj.s:2181   .text.check_create_wp34sdir:0000000000000000 $t
     /tmp/cc1iUxzj.s:2189   .text.check_create_wp34sdir:0000000000000000 check_create_wp34sdir
     /tmp/cc1iUxzj.s:2230   .text.check_create_wp34sdir:0000000000000018 $d
     /tmp/cc1iUxzj.s:2237   .text.init_library:0000000000000000 $t
     /tmp/cc1iUxzj.s:2245   .text.init_library:0000000000000000 init_library
     /tmp/cc1iUxzj.s:2307   .text.init_library:0000000000000034 $d
     /tmp/cc1iUxzj.s:2312   .text.flash_remove:0000000000000000 $t
     /tmp/cc1iUxzj.s:2320   .text.flash_remove:0000000000000000 flash_remove
     /tmp/cc1iUxzj.s:2367   .text.flash_remove:0000000000000024 $d
     /tmp/cc1iUxzj.s:2372   .text.clrprog:0000000000000000 $t
     /tmp/cc1iUxzj.s:2380   .text.clrprog:0000000000000000 clrprog
     /tmp/cc1iUxzj.s:2511   .text.clrprog:0000000000000090 $d
     /tmp/cc1iUxzj.s:2516   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:2520   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/cc1iUxzj.s:2527   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/cc1iUxzj.s:2726   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/cc1iUxzj.s:2736   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:2743   .text.flash_backup:0000000000000000 $t
     /tmp/cc1iUxzj.s:2751   .text.flash_backup:0000000000000000 flash_backup
     /tmp/cc1iUxzj.s:2832   .text.flash_backup:0000000000000048 $d
     /tmp/cc1iUxzj.s:2841   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:2845   .text.flash_restore:0000000000000000 $t
     /tmp/cc1iUxzj.s:2853   .text.flash_restore:0000000000000000 flash_restore
     /tmp/cc1iUxzj.s:2912   .text.flash_restore:0000000000000034 $d
     /tmp/cc1iUxzj.s:2920   .text.load_program:0000000000000000 $t
     /tmp/cc1iUxzj.s:2928   .text.load_program:0000000000000000 load_program
     /tmp/cc1iUxzj.s:3040   .text.load_program:000000000000003c $d
     /tmp/cc1iUxzj.s:3046   .text.load_registers:0000000000000000 $t
     /tmp/cc1iUxzj.s:3054   .text.load_registers:0000000000000000 load_registers
     /tmp/cc1iUxzj.s:3148   .text.load_registers:000000000000004c $d
     /tmp/cc1iUxzj.s:3154   .text.load_sigma:0000000000000000 $t
     /tmp/cc1iUxzj.s:3162   .text.load_sigma:0000000000000000 load_sigma
     /tmp/cc1iUxzj.s:3234   .text.load_sigma:0000000000000040 $d
     /tmp/cc1iUxzj.s:3239   .text.load_state:0000000000000000 $t
     /tmp/cc1iUxzj.s:3247   .text.load_state:0000000000000000 load_state
     /tmp/cc1iUxzj.s:3317   .text.load_state:000000000000003c $d
     /tmp/cc1iUxzj.s:3323   .text.store_program:0000000000000000 $t
     /tmp/cc1iUxzj.s:3331   .text.store_program:0000000000000000 store_program
     /tmp/cc1iUxzj.s:3567   .text.store_program:00000000000000d4 $d
     /tmp/cc1iUxzj.s:3574   .text.recall_program:0000000000000000 $t
     /tmp/cc1iUxzj.s:3582   .text.recall_program:0000000000000000 recall_program
     /tmp/cc1iUxzj.s:3643   .text.recall_program:000000000000003c $d
     /tmp/cc1iUxzj.s:3648   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:3661   .text.save_lib_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:3669   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/cc1iUxzj.s:3823   .text.save_lib_file:0000000000000084 $d
     /tmp/cc1iUxzj.s:3842   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:3849   .text.load_lib_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:3857   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/cc1iUxzj.s:3992   .text.load_lib_file:0000000000000078 $d
     /tmp/cc1iUxzj.s:4010   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:4026   .text.save_ram_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:4034   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/cc1iUxzj.s:4211   .text.save_ram_file:000000000000009c $d
     /tmp/cc1iUxzj.s:4230   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:4237   .text.load_ram_file:0000000000000000 $t
ARM GAS  /tmp/cc1iUxzj.s 			page 145


     /tmp/cc1iUxzj.s:4245   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/cc1iUxzj.s:4421   .text.load_ram_file:0000000000000094 $d
     /tmp/cc1iUxzj.s:4439   .rodata.load_backup_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:4446   .text.load_backup_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:4454   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/cc1iUxzj.s:4589   .text.load_backup_file:0000000000000078 $d
     /tmp/cc1iUxzj.s:4607   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:4620   .text.save_prog_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:4628   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/cc1iUxzj.s:4942   .text.save_prog_file:0000000000000130 $d
     /tmp/cc1iUxzj.s:4960   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/cc1iUxzj.s:4970   .text.load_prog_file:0000000000000000 $t
     /tmp/cc1iUxzj.s:4978   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/cc1iUxzj.s:5185   .text.load_prog_file:00000000000000b8 $d
     /tmp/cc1iUxzj.s:5202   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/cc1iUxzj.s:5210   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
error_message
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free
ARM GAS  /tmp/cc1iUxzj.s 			page 146



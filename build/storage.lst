ARM GAS  /tmp/ccwuxJEt.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"storage.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.test_checksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	test_checksum:
  27              	.LVL0:
  28              	.LFB5:
  29              		.file 1 "src/storage.c"
   1:src/storage.c **** /* This file is part of 34S.
   2:src/storage.c ****  * 
   3:src/storage.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/storage.c ****  * it under the terms of the GNU General Public License as published by
   5:src/storage.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/storage.c ****  * (at your option) any later version.
   7:src/storage.c ****  * 
   8:src/storage.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/storage.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/storage.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/storage.c ****  * GNU General Public License for more details.
  12:src/storage.c ****  * 
  13:src/storage.c ****  * You should have received a copy of the GNU General Public License
  14:src/storage.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/storage.c ****  */
  16:src/storage.c **** 
  17:src/storage.c **** /*
  18:src/storage.c ****  * This module handles all load/save operations in the real build or emulator
  19:src/storage.c ****  * Module written by MvC
  20:src/storage.c ****  */
  21:src/storage.c **** 
  22:src/storage.c **** #ifdef REALBUILD
  23:src/storage.c **** 
  24:src/storage.c **** #define PERSISTENT_RAM __attribute__((section(".persistentram")))
  25:src/storage.c **** #define SLCDCMEM       __attribute__((section(".slcdcmem")))
  26:src/storage.c **** #define VOLATILE_RAM   __attribute__((section(".volatileram")))
  27:src/storage.c **** #define BACKUP_FLASH   __attribute__((section(".backupflash")))
  28:src/storage.c **** 
  29:src/storage.c **** #ifndef NULL
ARM GAS  /tmp/ccwuxJEt.s 			page 2


  30:src/storage.c **** #define NULL 0
  31:src/storage.c **** #endif
  32:src/storage.c **** 
  33:src/storage.c **** #else // not realbuild
  34:src/storage.c **** 
  35:src/storage.c **** // Emulator definitions
  36:src/storage.c **** #include <stdio.h>
  37:src/storage.c **** #include <stdlib.h>
  38:src/storage.c **** #include <stddef.h>
  39:src/storage.c **** #include <string.h>
  40:src/storage.c **** #include <stdarg.h>
  41:src/storage.c **** 
  42:src/storage.c **** #ifdef DM42
  43:src/storage.c **** #include "dmcp.h"
  44:src/storage.c **** #endif
  45:src/storage.c **** 
  46:src/storage.c **** #ifndef DM42
  47:src/storage.c **** 
  48:src/storage.c **** #if defined(QTGUI) || ( defined(USECURSES) && !defined(WIN32) )
  49:src/storage.c **** #include <errno.h>
  50:src/storage.c **** #include <stdlib.h>
  51:src/storage.c **** #include <unistd.h>
  52:src/storage.c **** #endif
  53:src/storage.c **** 
  54:src/storage.c **** #endif
  55:src/storage.c **** 
  56:src/storage.c **** #define PERSISTENT_RAM
  57:src/storage.c **** #define SLCDCMEM
  58:src/storage.c **** #define VOLATILE_RAM
  59:src/storage.c **** #define BACKUP_FLASH
  60:src/storage.c **** 
  61:src/storage.c **** #ifdef DM42
  62:src/storage.c **** 
  63:src/storage.c **** #define STATE_FILE "wp34s/wp34c.dat"
  64:src/storage.c **** #define BACKUP_FILE "wp34s/wp34c-backup.dat"
  65:src/storage.c **** #define LIBRARY_FILE "wp34s/wp34s-lib.dat"
  66:src/storage.c **** #define FPT ppgm_fp //use this as the file pointer
  67:src/storage.c **** 
  68:src/storage.c **** #else
  69:src/storage.c **** 
  70:src/storage.c **** #define STATE_FILE "wp34c.dat"
  71:src/storage.c **** #define BACKUP_FILE "wp34c-backup.dat"
  72:src/storage.c **** #define LIBRARY_FILE "wp34s-lib.dat"
  73:src/storage.c **** 
  74:src/storage.c **** #endif
  75:src/storage.c **** #endif
  76:src/storage.c **** 
  77:src/storage.c **** #define DM42SAFE
  78:src/storage.c **** #include "xeq.h"
  79:src/storage.c **** #include "storage.h"
  80:src/storage.c **** #include "display.h"
  81:src/storage.c **** #include "stats.h"
  82:src/storage.c **** #include "alpha.h"
  83:src/storage.c **** #undef DM42SAFE
  84:src/storage.c **** 
  85:src/storage.c **** #ifdef DM42
  86:src/storage.c **** #define PAGE_SIZE	 256 // if saving to flash need page size of 2k on DM42
ARM GAS  /tmp/ccwuxJEt.s 			page 3


  87:src/storage.c **** #else
  88:src/storage.c **** #define PAGE_SIZE	 256
  89:src/storage.c **** #endif
  90:src/storage.c **** 
  91:src/storage.c **** /*
  92:src/storage.c ****  *  Setup the persistent RAM
  93:src/storage.c ****  */
  94:src/storage.c **** #ifdef DM42
  95:src/storage.c **** 
  96:src/storage.c **** TPersistentRam *main_ram, *backup_ram;
  97:src/storage.c **** FLASH_REGION *library_ram;
  98:src/storage.c **** 
  99:src/storage.c **** void init_mem () { // called at start of program_main in console.c
 100:src/storage.c ****   char *v;
 101:src/storage.c **** 
 102:src/storage.c ****   v = (char *) calloc(RAM_SIZE + RAM_SIZE + LIBRARY_SIZE,1);
 103:src/storage.c ****   if (v == NULL) {
 104:src/storage.c ****     perror("calloc failed");
 105:src/storage.c ****     return;
 106:src/storage.c ****   }
 107:src/storage.c ****   main_ram = (TPersistentRam *) v;
 108:src/storage.c ****   v += RAM_SIZE;
 109:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 110:src/storage.c ****   v += RAM_SIZE;
 111:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 112:src/storage.c **** }
 113:src/storage.c **** 
 114:src/storage.c **** #else
 115:src/storage.c **** 
 116:src/storage.c **** PERSISTENT_RAM TPersistentRam PersistentRam;
 117:src/storage.c **** 
 118:src/storage.c **** #endif
 119:src/storage.c **** 
 120:src/storage.c **** /*
 121:src/storage.c ****  *  Data that is saved in the SLCD controller during deep sleep
 122:src/storage.c ****  */
 123:src/storage.c **** SLCDCMEM TStateWhileOn StateWhileOn;
 124:src/storage.c **** 
 125:src/storage.c **** /*
 126:src/storage.c ****  *  A private register area for XROM code in volatile RAM
 127:src/storage.c ****  *  It replaces the local registers and flags if active.
 128:src/storage.c ****  */
 129:src/storage.c **** TXromParams XromParams;
 130:src/storage.c **** VOLATILE_RAM TXromLocal XromLocal;
 131:src/storage.c **** 
 132:src/storage.c **** /* Private space for four registers temporarily
 133:src/storage.c ****  */
 134:src/storage.c **** VOLATILE_RAM REGISTER XromA2D[4];
 135:src/storage.c **** 
 136:src/storage.c **** /*
 137:src/storage.c ****  *  The backup flash area:
 138:src/storage.c ****  *  2 KB for storage of programs and registers
 139:src/storage.c ****  *  Same data as in persistent RAM but in flash memory
 140:src/storage.c ****  */
 141:src/storage.c **** #if !defined(REALBUILD)
 142:src/storage.c **** /*
 143:src/storage.c ****  *  We need to define the Library space here.
ARM GAS  /tmp/ccwuxJEt.s 			page 4


 144:src/storage.c ****  *  On the device the linker takes care of this.
 145:src/storage.c ****  */
 146:src/storage.c **** #ifdef DM42 // has already been done by init_mem above
 147:src/storage.c **** #else
 148:src/storage.c **** BACKUP_FLASH TPersistentRam BackupFlash;
 149:src/storage.c **** FLASH_REGION UserFlash;
 150:src/storage.c **** #endif
 151:src/storage.c **** #endif
 152:src/storage.c **** 
 153:src/storage.c **** /*
 154:src/storage.c ****  *  The CCITT 16 bit CRC algorithm (X^16 + X^12 + X^5 + 1)
 155:src/storage.c ****  */
 156:src/storage.c **** unsigned short int crc16( const void *base, unsigned int length )
 157:src/storage.c **** {
 158:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 159:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 160:src/storage.c **** 	unsigned int i;
 161:src/storage.c **** 
 162:src/storage.c **** 	for ( i = 0; i < length; ++i ) {
 163:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 164:src/storage.c **** 		crc ^= *d++;
 165:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 166:src/storage.c **** 		crc ^= crc << 12;
 167:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 168:src/storage.c **** 	}
 169:src/storage.c **** 	return crc;
 170:src/storage.c **** }
 171:src/storage.c **** 
 172:src/storage.c **** 
 173:src/storage.c **** /*
 174:src/storage.c ****  *  Compute a checksum and compare it against the stored sum
 175:src/storage.c ****  *  Returns non zero value if failure
 176:src/storage.c ****  */
 177:src/storage.c **** static int test_checksum( const void *data, unsigned int length, unsigned short oldcrc, unsigned sh
 178:src/storage.c **** {
  30              		.loc 1 178 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 179:src/storage.c **** 	unsigned short crc;
  35              		.loc 1 179 2 view .LVU1
 180:src/storage.c **** 	crc = crc16( data, length );
  36              		.loc 1 180 2 view .LVU2
  37              	.LBB38:
  38              	.LBI38:
 156:src/storage.c **** {
  39              		.loc 1 156 20 view .LVU3
  40              	.LBB39:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  41              		.loc 1 158 2 view .LVU4
 159:src/storage.c **** 	unsigned int i;
  42              		.loc 1 159 2 view .LVU5
 160:src/storage.c **** 
  43              		.loc 1 160 2 view .LVU6
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  44              		.loc 1 162 2 view .LVU7
ARM GAS  /tmp/ccwuxJEt.s 			page 5


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  45              		.loc 1 162 15 view .LVU8
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  46              		.loc 1 162 2 is_stmt 0 view .LVU9
  47 0000 11B3     		cbz	r1, .L5
  48              	.LBE39:
  49              	.LBE38:
 178:src/storage.c **** 	unsigned short crc;
  50              		.loc 1 178 1 view .LVU10
  51 0002 30B4     		push	{r4, r5}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 5, -4
  55 0004 4518     		adds	r5, r0, r1
  56              	.LBB42:
  57              	.LBB40:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
  58              		.loc 1 158 21 view .LVU11
  59 0006 45F6A521 		movw	r1, #23205
  60              	.LVL1:
  61              	.L3:
 163:src/storage.c **** 		crc ^= *d++;
  62              		.loc 1 163 3 is_stmt 1 view .LVU12
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  63              		.loc 1 164 10 is_stmt 0 view .LVU13
  64 000a 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
  65              	.LVL2:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  66              		.loc 1 164 10 view .LVU14
  67 000e 49BA     		rev16	r1, r1
  68              	.LVL3:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  69              		.loc 1 164 10 view .LVU15
  70 0010 89B2     		uxth	r1, r1
  71              	.LVL4:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  72              		.loc 1 164 3 is_stmt 1 view .LVU16
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
  73              		.loc 1 164 7 is_stmt 0 view .LVU17
  74 0012 6140     		eors	r1, r1, r4
  75              	.LVL5:
 165:src/storage.c **** 		crc ^= crc << 12;
  76              		.loc 1 165 3 is_stmt 1 view .LVU18
 165:src/storage.c **** 		crc ^= crc << 12;
  77              		.loc 1 165 7 is_stmt 0 view .LVU19
  78 0014 C1F30314 		ubfx	r4, r1, #4, #4
  79 0018 6140     		eors	r1, r1, r4
  80              	.LVL6:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  81              		.loc 1 166 3 is_stmt 1 view .LVU20
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
  82              		.loc 1 166 7 is_stmt 0 view .LVU21
  83 001a 81EA0131 		eor	r1, r1, r1, lsl #12
  84              	.LVL7:
 167:src/storage.c **** 	}
  85              		.loc 1 167 3 is_stmt 1 view .LVU22
 167:src/storage.c **** 	}
ARM GAS  /tmp/ccwuxJEt.s 			page 6


  86              		.loc 1 167 25 is_stmt 0 view .LVU23
  87 001e 4C01     		lsls	r4, r1, #5
  88 0020 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
  89              		.loc 1 167 7 view .LVU24
  90 0024 89B2     		uxth	r1, r1
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  91              		.loc 1 162 2 view .LVU25
  92 0026 8542     		cmp	r5, r0
 167:src/storage.c **** 	}
  93              		.loc 1 167 7 view .LVU26
  94 0028 81EA0401 		eor	r1, r1, r4
  95              	.LVL8:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  96              		.loc 1 162 27 is_stmt 1 view .LVU27
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  97              		.loc 1 162 15 view .LVU28
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
  98              		.loc 1 162 2 is_stmt 0 view .LVU29
  99 002c EDD1     		bne	.L3
 169:src/storage.c **** }
 100              		.loc 1 169 2 is_stmt 1 view .LVU30
 101              	.LVL9:
 169:src/storage.c **** }
 102              		.loc 1 169 2 is_stmt 0 view .LVU31
 103              	.LBE40:
 104              	.LBE42:
 181:src/storage.c **** 	
 182:src/storage.c **** 	if ( pcrc != NULL ) {
 105              		.loc 1 182 2 is_stmt 1 view .LVU32
 183:src/storage.c **** 		*pcrc = crc;
 106              		.loc 1 183 3 view .LVU33
 184:src/storage.c **** 	}
 185:src/storage.c **** 	return crc != oldcrc && oldcrc != MAGIC_MARKER;
 107              		.loc 1 185 23 is_stmt 0 view .LVU34
 108 002e 8A42     		cmp	r2, r1
 183:src/storage.c **** 		*pcrc = crc;
 109              		.loc 1 183 9 view .LVU35
 110 0030 1980     		strh	r1, [r3]	@ movhi
 111              		.loc 1 185 2 is_stmt 1 view .LVU36
 112              		.loc 1 185 23 is_stmt 0 view .LVU37
 113 0032 06D0     		beq	.L6
 114              		.loc 1 185 23 discriminator 1 view .LVU38
 115 0034 4AF23C50 		movw	r0, #42300
 116 0038 101A     		subs	r0, r2, r0
 117 003a 18BF     		it	ne
 118 003c 0120     		movne	r0, #1
 186:src/storage.c **** }
 119              		.loc 1 186 1 discriminator 1 view .LVU39
 120 003e 30BC     		pop	{r4, r5}
 121              		.cfi_remember_state
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_def_cfa_offset 0
 125 0040 7047     		bx	lr
 126              	.L6:
 127              		.cfi_restore_state
ARM GAS  /tmp/ccwuxJEt.s 			page 7


 185:src/storage.c **** }
 128              		.loc 1 185 23 view .LVU40
 129 0042 0020     		movs	r0, #0
 130              		.loc 1 186 1 view .LVU41
 131 0044 30BC     		pop	{r4, r5}
 132              		.cfi_restore 5
 133              		.cfi_restore 4
 134              		.cfi_def_cfa_offset 0
 135 0046 7047     		bx	lr
 136              	.LVL10:
 137              	.L5:
 138              	.LBB43:
 139              	.LBB41:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 140              		.loc 1 158 21 view .LVU42
 141 0048 45F6A521 		movw	r1, #23205
 142              	.LVL11:
 169:src/storage.c **** }
 143              		.loc 1 169 2 is_stmt 1 view .LVU43
 169:src/storage.c **** }
 144              		.loc 1 169 2 is_stmt 0 view .LVU44
 145              	.LBE41:
 146              	.LBE43:
 182:src/storage.c **** 		*pcrc = crc;
 147              		.loc 1 182 2 is_stmt 1 view .LVU45
 183:src/storage.c **** 	}
 148              		.loc 1 183 3 view .LVU46
 185:src/storage.c **** }
 149              		.loc 1 185 23 is_stmt 0 view .LVU47
 150 004c 8A42     		cmp	r2, r1
 183:src/storage.c **** 	}
 151              		.loc 1 183 9 view .LVU48
 152 004e 1980     		strh	r1, [r3]	@ movhi
 185:src/storage.c **** }
 153              		.loc 1 185 2 is_stmt 1 view .LVU49
 185:src/storage.c **** }
 154              		.loc 1 185 23 is_stmt 0 view .LVU50
 155 0050 05D0     		beq	.L11
 156 0052 4AF23C50 		movw	r0, #42300
 157              	.LVL12:
 185:src/storage.c **** }
 158              		.loc 1 185 23 view .LVU51
 159 0056 101A     		subs	r0, r2, r0
 160 0058 18BF     		it	ne
 161 005a 0120     		movne	r0, #1
 162 005c 7047     		bx	lr
 163              	.LVL13:
 164              	.L11:
 185:src/storage.c **** }
 165              		.loc 1 185 23 view .LVU52
 166 005e 0020     		movs	r0, #0
 167              	.LVL14:
 168              		.loc 1 186 1 view .LVU53
 169 0060 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE5:
 173 0062 00BF     		.section	.text.checksum_region,"ax",%progbits
ARM GAS  /tmp/ccwuxJEt.s 			page 8


 174              		.align	1
 175              		.p2align 2,,3
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	checksum_region:
 182              	.LVL15:
 183              	.LFB9:
 187:src/storage.c **** 
 188:src/storage.c **** 
 189:src/storage.c **** /*
 190:src/storage.c ****  *  Checksum the current program.
 191:src/storage.c ****  */
 192:src/storage.c **** short unsigned int checksum_program( void )
 193:src/storage.c **** {
 194:src/storage.c **** 	update_program_bounds( 1 );
 195:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 196:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 197:src/storage.c **** }
 198:src/storage.c **** 
 199:src/storage.c **** 
 200:src/storage.c **** /*
 201:src/storage.c ****  *  Checksum the persistent RAM area
 202:src/storage.c ****  *  Returns non zero value if failure
 203:src/storage.c ****  */
 204:src/storage.c **** int checksum_ram( void )
 205:src/storage.c **** {
 206:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 207:src/storage.c **** 			      Crc, &Crc );
 208:src/storage.c **** }
 209:src/storage.c **** 
 210:src/storage.c **** 
 211:src/storage.c **** /*
 212:src/storage.c ****  *  Checksum the backup flash region
 213:src/storage.c ****  *  Returns non zero value if failure
 214:src/storage.c ****  */
 215:src/storage.c **** int checksum_backup( void )
 216:src/storage.c **** {
 217:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 218:src/storage.c **** 		              BackupFlash._crc, NULL );
 219:src/storage.c **** }
 220:src/storage.c **** 
 221:src/storage.c **** 
 222:src/storage.c **** /*
 223:src/storage.c ****  *  Checksum a flash region
 224:src/storage.c ****  *  Returns non zero value if failure
 225:src/storage.c ****  */
 226:src/storage.c **** static int checksum_region( FLASH_REGION *fr, FLASH_REGION *header )
 227:src/storage.c **** {
 184              		.loc 1 227 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 228:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 188              		.loc 1 228 2 view .LVU55
 189              		.loc 1 228 25 is_stmt 0 view .LVU56
ARM GAS  /tmp/ccwuxJEt.s 			page 9


 190 0000 4B88     		ldrh	r3, [r1, #2]
 229:src/storage.c **** 	
 230:src/storage.c **** 	return l > sizeof( fr->prog ) || test_checksum( fr->prog, l, fr->crc, &(header->crc ) );
 191              		.loc 1 230 32 view .LVU57
 192 0002 43F6FC72 		movw	r2, #16380
 193              	.LVL16:
 194              		.loc 1 230 2 is_stmt 1 view .LVU58
 195              		.loc 1 230 32 is_stmt 0 view .LVU59
 196 0006 B2EB430F 		cmp	r2, r3, lsl #1
 197 000a 01D2     		bcs	.L23
 198 000c 0120     		movs	r0, #1
 199              	.LVL17:
 231:src/storage.c **** }
 200              		.loc 1 231 1 view .LVU60
 201 000e 7047     		bx	lr
 202              	.LVL18:
 203              	.L23:
 227:src/storage.c **** 	unsigned int l = header->size * sizeof( s_opcode );
 204              		.loc 1 227 1 discriminator 2 view .LVU61
 205 0010 10B5     		push	{r4, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
 209 0012 5C00     		lsls	r4, r3, #1
 230:src/storage.c **** }
 210              		.loc 1 230 35 discriminator 2 view .LVU62
 211 0014 30F8042B 		ldrh	r2, [r0], #4
 212              	.LVL19:
 230:src/storage.c **** }
 213              		.loc 1 230 35 discriminator 2 view .LVU63
 214 0018 0B46     		mov	r3, r1
 215              	.LVL20:
 230:src/storage.c **** }
 216              		.loc 1 230 35 discriminator 2 view .LVU64
 217 001a 2146     		mov	r1, r4
 218              	.LVL21:
 230:src/storage.c **** }
 219              		.loc 1 230 35 discriminator 2 view .LVU65
 220 001c FFF7FEFF 		bl	test_checksum
 221              	.LVL22:
 230:src/storage.c **** }
 222              		.loc 1 230 32 discriminator 2 view .LVU66
 223 0020 0038     		subs	r0, r0, #0
 224 0022 18BF     		it	ne
 225 0024 0120     		movne	r0, #1
 226              		.loc 1 231 1 discriminator 2 view .LVU67
 227 0026 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE9:
 231              		.section	.text.check_delete_prog,"ax",%progbits
 232              		.align	1
 233              		.p2align 2,,3
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	check_delete_prog:
ARM GAS  /tmp/ccwuxJEt.s 			page 10


 240              	.LVL23:
 241              	.LFB12:
 232:src/storage.c **** 
 233:src/storage.c **** 
 234:src/storage.c **** /*
 235:src/storage.c ****  *  Helper to store final END in empty program space
 236:src/storage.c ****  */
 237:src/storage.c **** static void stoend( void )
 238:src/storage.c **** {
 239:src/storage.c **** 	ProgSize = 1;
 240:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 241:src/storage.c **** }
 242:src/storage.c **** 
 243:src/storage.c **** 
 244:src/storage.c **** /*
 245:src/storage.c ****  *  Clear the program space
 246:src/storage.c ****  */
 247:src/storage.c **** void clpall( void )
 248:src/storage.c **** {
 249:src/storage.c **** 	clrretstk_pc();
 250:src/storage.c **** 	stoend();
 251:src/storage.c **** }
 252:src/storage.c **** 
 253:src/storage.c **** 
 254:src/storage.c **** /*
 255:src/storage.c ****  *  Sanity checks for program (step) deletion
 256:src/storage.c ****  */
 257:src/storage.c **** static int check_delete_prog( unsigned int pc ) 
 258:src/storage.c **** {
 242              		.loc 1 258 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 259:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 246              		.loc 1 259 2 view .LVU69
 247              		.loc 1 259 5 is_stmt 0 view .LVU70
 248 0000 10F4704F 		tst	r0, #61440
 258:src/storage.c **** 	if ( !isRAM( pc ) || ( pc == ProgSize && getprog( pc ) == ( OP_NIL | OP_END ) ) ) {
 249              		.loc 1 258 1 view .LVU71
 250 0004 08B5     		push	{r3, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              		.loc 1 259 5 view .LVU72
 255 0006 0BD1     		bne	.L28
 256              		.loc 1 259 31 discriminator 1 view .LVU73
 257 0008 084A     		ldr	r2, .L34
 258 000a 1268     		ldr	r2, [r2]
 259 000c 5288     		ldrh	r2, [r2, #2]
 260              		.loc 1 259 20 discriminator 1 view .LVU74
 261 000e 8242     		cmp	r2, r0
 262 0010 01D0     		beq	.L27
 263              	.LVL24:
 264              	.L29:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 261:src/storage.c **** 	}
 262:src/storage.c **** 	else {
ARM GAS  /tmp/ccwuxJEt.s 			page 11


 263:src/storage.c **** 		return 0;
 265              		.loc 1 263 10 view .LVU75
 266 0012 0020     		movs	r0, #0
 264:src/storage.c **** 	}
 265:src/storage.c **** 	return 1;
 266:src/storage.c **** }
 267              		.loc 1 266 1 view .LVU76
 268 0014 08BD     		pop	{r3, pc}
 269              	.LVL25:
 270              	.L27:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 271              		.loc 1 259 43 discriminator 2 view .LVU77
 272 0016 FFF7FEFF 		bl	getprog
 273              	.LVL26:
 259:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 274              		.loc 1 259 40 discriminator 2 view .LVU78
 275 001a B0F59D7F 		cmp	r0, #314
 276 001e F8D1     		bne	.L29
 277              	.L28:
 260:src/storage.c **** 		report_warn(ERR_READ_ONLY);
 278              		.loc 1 260 3 is_stmt 1 view .LVU79
 279 0020 1320     		movs	r0, #19
 280 0022 FFF7FEFF 		bl	report_warn
 281              	.LVL27:
 265:src/storage.c **** }
 282              		.loc 1 265 2 view .LVU80
 265:src/storage.c **** }
 283              		.loc 1 265 9 is_stmt 0 view .LVU81
 284 0026 0120     		movs	r0, #1
 285              		.loc 1 266 1 view .LVU82
 286 0028 08BD     		pop	{r3, pc}
 287              	.L35:
 288 002a 00BF     		.align	2
 289              	.L34:
 290 002c 00000000 		.word	main_ram
 291              		.cfi_endproc
 292              	.LFE12:
 294              		.section	.rodata.program_flash.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 77703334 		.ascii	"wp34s/wp34c-backup.dat\000"
 297      732F7770 
 297      3334632D 
 297      6261636B 
 297      75702E64 
 298 0017 00       		.align	2
 299              	.LC1:
 300 0018 77703334 		.ascii	"wp34s/wp34s-lib.dat\000"
 300      732F7770 
 300      3334732D 
 300      6C69622E 
 300      64617400 
 301              		.align	2
 302              	.LC2:
 303 002c 2F777033 		.ascii	"/wp34s\000"
 303      347300
 304              		.section	.text.program_flash,"ax",%progbits
ARM GAS  /tmp/ccwuxJEt.s 			page 12


 305              		.align	1
 306              		.p2align 2,,3
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	program_flash:
 313              	.LVL28:
 314              	.LFB20:
 267:src/storage.c **** 
 268:src/storage.c **** 
 269:src/storage.c **** /*
 270:src/storage.c ****  *  Clear just the current program
 271:src/storage.c ****  */
 272:src/storage.c **** void clrprog( void )
 273:src/storage.c **** {
 274:src/storage.c **** 	update_program_bounds( 1 );
 275:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 276:src/storage.c **** 		/*
 277:src/storage.c **** 		 *  Porgram is in flash
 278:src/storage.c **** 		 */
 279:src/storage.c **** 		flash_remove( ProgBegin, ProgEnd + 1 - ProgBegin );
 280:src/storage.c **** 	}
 281:src/storage.c **** 	else {
 282:src/storage.c **** 		if ( check_delete_prog( ProgBegin ) ) {
 283:src/storage.c **** 			return;
 284:src/storage.c **** 		}
 285:src/storage.c **** 		clrretstk();
 286:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
 287:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 288:src/storage.c **** 		if ( ProgSize == 0 ) {
 289:src/storage.c **** 			stoend();
 290:src/storage.c **** 		}
 291:src/storage.c **** 	}
 292:src/storage.c **** 	set_pc( ProgBegin - 1 );
 293:src/storage.c **** 	update_program_bounds( 1 );
 294:src/storage.c **** }
 295:src/storage.c ****  
 296:src/storage.c **** 
 297:src/storage.c **** /*
 298:src/storage.c ****  *  Clear all - programs and registers
 299:src/storage.c ****  */
 300:src/storage.c **** void clrall(void) 
 301:src/storage.c **** {
 302:src/storage.c **** 	NumRegs = TOPREALREG;
 303:src/storage.c **** 	xeq_init_contexts();
 304:src/storage.c **** 	clrreg( OP_CLREG );
 305:src/storage.c **** 	clrstk( OP_CLSTK );
 306:src/storage.c **** 	clralpha( OP_CLRALPHA );
 307:src/storage.c **** 	clrflags( OP_CLFLAGS );
 308:src/storage.c **** 	clpall();
 309:src/storage.c **** 
 310:src/storage.c **** 	reset_shift();
 311:src/storage.c **** 	State2.test = TST_NONE;
 312:src/storage.c **** 
 313:src/storage.c **** 	DispMsg = NULL;
 314:src/storage.c **** }
ARM GAS  /tmp/ccwuxJEt.s 			page 13


 315:src/storage.c **** 
 316:src/storage.c **** 
 317:src/storage.c **** /*
 318:src/storage.c ****  *  Clear everything
 319:src/storage.c ****  */
 320:src/storage.c **** void reset( void ) 
 321:src/storage.c **** {
 322:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 323:src/storage.c **** 	clrall();
 324:src/storage.c **** 	init_state();
 325:src/storage.c **** #ifndef DM42
 326:src/storage.c **** 	UState.contrast = 6;
 327:src/storage.c **** #endif
 328:src/storage.c **** #ifdef INFRARED
 329:src/storage.c **** #ifdef DM42
 330:src/storage.c **** 	printer_set_delay(1800);
 331:src/storage.c **** #else
 332:src/storage.c ****         State.print_delay = 10;
 333:src/storage.c **** #endif
 334:src/storage.c **** #endif
 335:src/storage.c **** 	DispMsg = "Erased";
 336:src/storage.c **** }
 337:src/storage.c **** 
 338:src/storage.c **** 
 339:src/storage.c **** /*
 340:src/storage.c ****  *  Store into program space.
 341:src/storage.c ****  */
 342:src/storage.c **** void stoprog( opcode c ) {
 343:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 344:src/storage.c **** 	int i;
 345:src/storage.c **** 	unsigned int pc = state_pc();
 346:src/storage.c **** 
 347:src/storage.c **** 	if ( pc == ProgSize && c != ( OP_NIL | OP_END ) )
 348:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 349:src/storage.c **** 
 350:src/storage.c **** 	if ( !isRAM( pc ) ) {
 351:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 352:src/storage.c **** 		return;
 353:src/storage.c **** 	}
 354:src/storage.c **** 	clrretstk();
 355:src/storage.c **** 	xeq_init_contexts();
 356:src/storage.c **** 	if ( ProgFree < off ) {
 357:src/storage.c **** 		return;
 358:src/storage.c **** 	}
 359:src/storage.c **** 	ProgSize += off;
 360:src/storage.c **** 	ProgEnd += off;
 361:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 362:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 363:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 364:src/storage.c **** 	}
 365:src/storage.c **** 	if (isDBL(c))
 366:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 367:src/storage.c **** 	Prog_1[pc] = c;
 368:src/storage.c **** 	State.pc = pc;
 369:src/storage.c **** }
 370:src/storage.c **** 
 371:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 14


 372:src/storage.c **** /*
 373:src/storage.c ****  *  Delete the current step in the program
 374:src/storage.c ****  */
 375:src/storage.c **** void delprog( void )
 376:src/storage.c **** {
 377:src/storage.c **** 	int i;
 378:src/storage.c **** 	const unsigned int pc = state_pc();
 379:src/storage.c **** 	int off;
 380:src/storage.c **** 
 381:src/storage.c **** 	if ( check_delete_prog( pc ) )
 382:src/storage.c **** 		return;
 383:src/storage.c **** 	if ( pc == 0 )
 384:src/storage.c **** 		return;
 385:src/storage.c **** 
 386:src/storage.c **** 	off = isDBL( Prog_1[ pc ]) ? 2 : 1;
 387:src/storage.c **** 	ProgSize -= off;
 388:src/storage.c **** 	ProgEnd -= off;
 389:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 390:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 391:src/storage.c **** 	decpc();
 392:src/storage.c **** }
 393:src/storage.c **** 
 394:src/storage.c **** 
 395:src/storage.c **** /*
 396:src/storage.c ****  *  Helper to append a program in RAM.
 397:src/storage.c ****  *  Returns non zero in case of an error.
 398:src/storage.c ****  */
 399:src/storage.c **** int append_program( const s_opcode *source, int length )
 400:src/storage.c **** {
 401:src/storage.c **** 	unsigned short pc;
 402:src/storage.c **** 	int space_needed = length - ProgFree;
 403:src/storage.c **** 
 404:src/storage.c **** 	if ( ProgSize == 1 ) {
 405:src/storage.c **** 		/*
 406:src/storage.c **** 		 *  Only the default END statement is present
 407:src/storage.c **** 		 */
 408:src/storage.c **** 		--space_needed;
 409:src/storage.c **** 		--ProgSize;
 410:src/storage.c **** 	}
 411:src/storage.c **** 	if ( length > NUMPROG_LIMIT ) {
 412:src/storage.c **** 		return report_err( ERR_INVALID );
 413:src/storage.c **** 	}
 414:src/storage.c **** 	if ( length > NUMPROG_LIMIT - ProgSize ) {
 415:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 416:src/storage.c **** 	}
 417:src/storage.c **** 
 418:src/storage.c **** 	/*
 419:src/storage.c **** 	 *  Make room if needed
 420:src/storage.c **** 	 */
 421:src/storage.c **** 	clrretstk();
 422:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 423:src/storage.c **** 		space_needed -= SizeStatRegs;
 424:src/storage.c **** 		sigmaDeallocate();
 425:src/storage.c **** 	}
 426:src/storage.c **** 	if ( space_needed > 0 ) {
 427:src/storage.c **** 		int regs;
 428:src/storage.c **** 		if (is_dblmode())
ARM GAS  /tmp/ccwuxJEt.s 			page 15


 429:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 430:src/storage.c **** 		else
 431:src/storage.c **** 			regs = NumRegs - ( ( space_needed + 3 ) >> 2 );
 432:src/storage.c **** 
 433:src/storage.c **** 		if ( regs < 0 ) {
 434:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 435:src/storage.c **** 		}
 436:src/storage.c **** 		cmdregs( regs, RARG_REGS );
 437:src/storage.c **** 	}
 438:src/storage.c **** 	/*
 439:src/storage.c **** 	 *  Append data
 440:src/storage.c **** 	 */
 441:src/storage.c **** 	pc = ProgSize + 1;
 442:src/storage.c **** 	ProgSize += length;
 443:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 444:src/storage.c **** 	set_pc( pc );
 445:src/storage.c **** 	return 0;
 446:src/storage.c **** }
 447:src/storage.c **** 
 448:src/storage.c **** 
 449:src/storage.c **** #ifdef REALBUILD
 450:src/storage.c **** /*
 451:src/storage.c ****  *  We do not copy any static data from flash to RAM at startup and
 452:src/storage.c ****  *  thus can't use code in RAM. In order to program flash use the
 453:src/storage.c ****  *  IAP feature in ROM instead
 454:src/storage.c ****  */
 455:src/storage.c **** #define IAP_FUNC ((int (*)(unsigned int)) (*(int *)0x400008))
 456:src/storage.c **** 
 457:src/storage.c **** /*
 458:src/storage.c ****  *  Issue a command to the flash controller. Must be done from ROM.
 459:src/storage.c ****  *  Returns zero if OK or non zero on error.
 460:src/storage.c ****  */
 461:src/storage.c **** static int flash_command( unsigned int cmd )
 462:src/storage.c **** {
 463:src/storage.c **** 	SUPC_SetVoltageOutput( SUPC_VDD_180 );
 464:src/storage.c **** 	return IAP_FUNC( cmd ) >> 1;
 465:src/storage.c **** }
 466:src/storage.c **** 
 467:src/storage.c **** /*
 468:src/storage.c ****  *  Program the flash starting at destination.
 469:src/storage.c ****  *  Returns 0 if OK or non zero on error.
 470:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 471:src/storage.c ****  */
 472:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 473:src/storage.c **** {
 474:src/storage.c **** 	unsigned int *flash = (unsigned int *) destination;
 475:src/storage.c **** 	unsigned short int *sp = (unsigned short int *) source;
 476:src/storage.c **** 
 477:src/storage.c **** 	lock();  // No interrupts, please!
 478:src/storage.c **** 
 479:src/storage.c **** 	while ( count-- > 0 ) {
 480:src/storage.c **** 		/*
 481:src/storage.c **** 		 *  Setup the command for the controller by computing the page from the address
 482:src/storage.c **** 		 */
 483:src/storage.c **** 		const unsigned int cmd = 0x5A000003 | ( (unsigned int) flash & 0x1ff00 );
 484:src/storage.c **** 		int i;
 485:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 16


 486:src/storage.c **** 		/*
 487:src/storage.c **** 		 *  Copy the source to the flash write buffer
 488:src/storage.c **** 		 */
 489:src/storage.c **** 		for ( i = 0; i < PAGE_SIZE / 4; ++i, sp += 2 ) {
 490:src/storage.c **** 			*flash++ = *sp | ( (unsigned int) ( sp[ 1 ] ) << 16 );
 491:src/storage.c **** 		}
 492:src/storage.c **** 
 493:src/storage.c **** 		/*
 494:src/storage.c **** 		 *  Command the controller to erase and write the page.
 495:src/storage.c **** 		 */
 496:src/storage.c **** 		if ( flash_command( cmd ) ) {
 497:src/storage.c **** 			report_err( ERR_IO );
 498:src/storage.c **** 			break;
 499:src/storage.c **** 		}
 500:src/storage.c **** 	}
 501:src/storage.c **** 	unlock();
 502:src/storage.c **** 	return Error != 0;
 503:src/storage.c **** }
 504:src/storage.c **** 
 505:src/storage.c **** 
 506:src/storage.c **** /*
 507:src/storage.c ****  *  Set the boot bit to ROM and turn off the device.
 508:src/storage.c ****  *  Next power ON goes into SAM-BA mode.
 509:src/storage.c ****  */
 510:src/storage.c **** void sam_ba_boot(void)
 511:src/storage.c **** {
 512:src/storage.c **** 	/*
 513:src/storage.c **** 	 *  Command the controller to clear GPNVM1
 514:src/storage.c **** 	 */
 515:src/storage.c **** 	lock();
 516:src/storage.c **** 	flash_command( 0x5A00010C );
 517:src/storage.c **** 	SUPC_Shutdown();
 518:src/storage.c **** }
 519:src/storage.c **** 
 520:src/storage.c **** 
 521:src/storage.c **** #else // below here, it's not REALBUILD
 522:src/storage.c **** 
 523:src/storage.c **** /*
 524:src/storage.c ****  *  Emulate the flash in a file wp34s-lib.dat or wp34c-backup.dat
 525:src/storage.c ****  *  Page numbers are relative to the start of the user flash
 526:src/storage.c ****  *  count is in pages, destination % PAGE_SIZE needs to be 0.
 527:src/storage.c ****  */
 528:src/storage.c **** #if defined(QTGUI) || defined(IOS)
 529:src/storage.c **** extern char* get_region_path(int region);
 530:src/storage.c **** #else
 531:src/storage.c **** static char* get_region_path(int region)
 532:src/storage.c **** {
 533:src/storage.c **** 	return region == REGION_BACKUP ? BACKUP_FILE : LIBRARY_FILE;
 534:src/storage.c **** }
 535:src/storage.c **** #endif
 536:src/storage.c **** 
 537:src/storage.c **** #ifdef DM42
 538:src/storage.c **** 
 539:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 540:src/storage.c **** {
 315              		.loc 1 540 1 is_stmt 1 view -0
 316              		.cfi_startproc
ARM GAS  /tmp/ccwuxJEt.s 			page 17


 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 541:src/storage.c ****   char *name;
 319              		.loc 1 541 3 view .LVU84
 542:src/storage.c ****   char *dest = (char *) destination;
 320              		.loc 1 542 3 view .LVU85
 540:src/storage.c ****   char *name;
 321              		.loc 1 540 1 is_stmt 0 view .LVU86
 322 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 32
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 543:src/storage.c ****   int offset;
 544:src/storage.c ****   uint x=0;
 545:src/storage.c **** 
 546:src/storage.c ****   /*
 547:src/storage.c ****    *  Copy the source to the destination memory
 548:src/storage.c ****    */
 549:src/storage.c **** 
 550:src/storage.c ****   xcopy( dest, source, count * PAGE_SIZE ); 
 332              		.loc 1 550 3 view .LVU87
 333 0004 1702     		lsls	r7, r2, #8
 540:src/storage.c ****   char *name;
 334              		.loc 1 540 1 view .LVU88
 335 0006 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 40
 544:src/storage.c **** 
 337              		.loc 1 544 8 view .LVU89
 338 0008 0023     		movs	r3, #0
 339              		.loc 1 550 3 view .LVU90
 340 000a 3A46     		mov	r2, r7
 341              	.LVL29:
 540:src/storage.c ****   char *name;
 342              		.loc 1 540 1 view .LVU91
 343 000c 0546     		mov	r5, r0
 344              	.LVL30:
 543:src/storage.c ****   int offset;
 345              		.loc 1 543 3 is_stmt 1 view .LVU92
 544:src/storage.c **** 
 346              		.loc 1 544 3 view .LVU93
 544:src/storage.c **** 
 347              		.loc 1 544 8 is_stmt 0 view .LVU94
 348 000e 0193     		str	r3, [sp, #4]
 349              		.loc 1 550 3 is_stmt 1 view .LVU95
 350 0010 FFF7FEFF 		bl	xcopy
 351              	.LVL31:
 551:src/storage.c **** 
 552:src/storage.c ****   /*
 553:src/storage.c ****    *  Update the correct region file
 554:src/storage.c ****    */
 555:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 18


 556:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 352              		.loc 1 556 3 view .LVU96
 353              		.loc 1 556 16 is_stmt 0 view .LVU97
 354 0014 2F4B     		ldr	r3, .L56
 355 0016 1E68     		ldr	r6, [r3]
 356              		.loc 1 556 6 view .LVU98
 357 0018 AE42     		cmp	r6, r5
 358 001a 03D8     		bhi	.L37
 359              		.loc 1 556 70 discriminator 1 view .LVU99
 360 001c 06F50063 		add	r3, r6, #2048
 361              		.loc 1 556 38 discriminator 1 view .LVU100
 362 0020 9D42     		cmp	r5, r3
 363 0022 2FD3     		bcc	.L54
 364              	.L37:
 557:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 558:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 559:src/storage.c ****   }
 560:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 365              		.loc 1 560 8 is_stmt 1 view .LVU101
 366              		.loc 1 560 21 is_stmt 0 view .LVU102
 367 0024 2C4B     		ldr	r3, .L56+4
 368 0026 1E68     		ldr	r6, [r3]
 369              		.loc 1 560 11 view .LVU103
 370 0028 AE42     		cmp	r6, r5
 371 002a 2FD8     		bhi	.L39
 372              		.loc 1 560 71 discriminator 1 view .LVU104
 373 002c 06F58043 		add	r3, r6, #16384
 374              		.loc 1 560 41 discriminator 1 view .LVU105
 375 0030 9D42     		cmp	r5, r3
 376 0032 2BD2     		bcs	.L39
 561:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 377              		.loc 1 561 5 is_stmt 1 view .LVU106
 378              	.LVL32:
 379              	.LBB44:
 380              	.LBI44:
 531:src/storage.c **** {
 381              		.loc 1 531 14 view .LVU107
 382              	.LBE44:
 533:src/storage.c **** }
 383              		.loc 1 533 2 view .LVU108
 562:src/storage.c ****     offset = dest - (char *) &UserFlash;
 384              		.loc 1 562 5 view .LVU109
 561:src/storage.c ****     offset = dest - (char *) &UserFlash;
 385              		.loc 1 561 12 is_stmt 0 view .LVU110
 386 0034 DFF8C490 		ldr	r9, .L56+40
 387              		.loc 1 562 12 view .LVU111
 388 0038 AE1B     		subs	r6, r5, r6
 389              	.LVL33:
 390              	.L38:
 563:src/storage.c ****   }
 564:src/storage.c ****   else {
 565:src/storage.c ****     // Bad address
 566:src/storage.c ****     report_err( ERR_ILLEGAL );
 567:src/storage.c ****     return 1;
 568:src/storage.c ****   }
 569:src/storage.c ****   FRESULT f;
 391              		.loc 1 569 3 is_stmt 1 view .LVU112
ARM GAS  /tmp/ccwuxJEt.s 			page 19


 570:src/storage.c **** 
 571:src/storage.c ****   f = check_create_wp34sdir ();
 392              		.loc 1 571 3 view .LVU113
 393              	.LBB45:
 394              	.LBI45:
 572:src/storage.c ****   if ( f != FR_OK ) {
 573:src/storage.c ****     return f;
 574:src/storage.c ****   }
 575:src/storage.c ****   sys_disk_write_enable(1);
 576:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 577:src/storage.c ****   if ( f != FR_OK ) {
 578:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 579:src/storage.c ****   }
 580:src/storage.c ****   if ( f != FR_OK ) {
 581:src/storage.c ****     sys_disk_write_enable(0);
 582:src/storage.c ****     return 1;
 583:src/storage.c ****   }
 584:src/storage.c ****   f_lseek( FPT, offset );
 585:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 586:src/storage.c ****   if (f != FR_OK) {
 587:src/storage.c ****     f_close( FPT );
 588:src/storage.c ****     sys_disk_write_enable(0);
 589:src/storage.c ****     return 1;
 590:src/storage.c ****   }
 591:src/storage.c ****   f = f_close( FPT );
 592:src/storage.c ****   if ( f != FR_OK ) {
 593:src/storage.c ****     sys_disk_write_enable(0);
 594:src/storage.c ****     return 1;
 595:src/storage.c ****   }
 596:src/storage.c ****   sys_disk_write_enable(0);
 597:src/storage.c ****   return 0;
 598:src/storage.c **** }
 599:src/storage.c **** 
 600:src/storage.c **** int check_create_wp34sdir(void) {
 395              		.loc 1 600 5 view .LVU114
 396              	.LBB46:
 601:src/storage.c ****   FRESULT f;
 397              		.loc 1 601 3 view .LVU115
 602:src/storage.c ****   sys_disk_write_enable(1);
 398              		.loc 1 602 3 view .LVU116
 399 003a DFF8AC80 		ldr	r8, .L56+20
 400 003e 0120     		movs	r0, #1
 401 0040 C047     		blx	r8
 402              	.LVL34:
 603:src/storage.c ****   f = check_create_dir ("/wp34s");
 403              		.loc 1 603 3 view .LVU117
 404              		.loc 1 603 7 is_stmt 0 view .LVU118
 405 0042 264B     		ldr	r3, .L56+8
 406 0044 2648     		ldr	r0, .L56+12
 407 0046 9847     		blx	r3
 408              	.LVL35:
 409 0048 0446     		mov	r4, r0
 410              	.LVL36:
 604:src/storage.c ****   sys_disk_write_enable(0);
 411              		.loc 1 604 3 is_stmt 1 view .LVU119
 412 004a 0020     		movs	r0, #0
 413 004c C047     		blx	r8
ARM GAS  /tmp/ccwuxJEt.s 			page 20


 414              	.LVL37:
 605:src/storage.c ****   return f;
 415              		.loc 1 605 3 view .LVU120
 416              		.loc 1 605 3 is_stmt 0 view .LVU121
 417              	.LBE46:
 418              	.LBE45:
 572:src/storage.c ****     return f;
 419              		.loc 1 572 3 is_stmt 1 view .LVU122
 572:src/storage.c ****     return f;
 420              		.loc 1 572 6 is_stmt 0 view .LVU123
 421 004e 14F0FF04 		ands	r4, r4, #255
 422              	.LVL38:
 572:src/storage.c ****     return f;
 423              		.loc 1 572 6 view .LVU124
 424 0052 36D1     		bne	.L53
 575:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 425              		.loc 1 575 3 is_stmt 1 view .LVU125
 576:src/storage.c ****   if ( f != FR_OK ) {
 426              		.loc 1 576 7 is_stmt 0 view .LVU126
 427 0054 DFF894A0 		ldr	r10, .L56+24
 428 0058 224C     		ldr	r4, .L56+16
 575:src/storage.c ****   f = f_open( FPT, name, FA_READ | FA_WRITE );
 429              		.loc 1 575 3 view .LVU127
 430 005a 0120     		movs	r0, #1
 431 005c C047     		blx	r8
 432              	.LVL39:
 576:src/storage.c ****   if ( f != FR_OK ) {
 433              		.loc 1 576 3 is_stmt 1 view .LVU128
 576:src/storage.c ****   if ( f != FR_OK ) {
 434              		.loc 1 576 7 is_stmt 0 view .LVU129
 435 005e DAF80400 		ldr	r0, [r10, #4]
 436 0062 0322     		movs	r2, #3
 437 0064 4946     		mov	r1, r9
 438 0066 A047     		blx	r4
 439              	.LVL40:
 577:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 440              		.loc 1 577 3 is_stmt 1 view .LVU130
 577:src/storage.c ****     f = f_open( FPT, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE );
 441              		.loc 1 577 6 is_stmt 0 view .LVU131
 442 0068 B8B1     		cbz	r0, .L42
 578:src/storage.c ****   }
 443              		.loc 1 578 5 is_stmt 1 view .LVU132
 578:src/storage.c ****   }
 444              		.loc 1 578 9 is_stmt 0 view .LVU133
 445 006a DAF80400 		ldr	r0, [r10, #4]
 446              	.LVL41:
 578:src/storage.c ****   }
 447              		.loc 1 578 9 view .LVU134
 448 006e 4946     		mov	r1, r9
 449 0070 0B22     		movs	r2, #11
 450 0072 A047     		blx	r4
 451              	.LVL42:
 580:src/storage.c ****     sys_disk_write_enable(0);
 452              		.loc 1 580 3 is_stmt 1 view .LVU135
 580:src/storage.c ****     sys_disk_write_enable(0);
 453              		.loc 1 580 6 is_stmt 0 view .LVU136
 454 0074 88B1     		cbz	r0, .L42
ARM GAS  /tmp/ccwuxJEt.s 			page 21


 455              	.LVL43:
 456              	.L52:
 588:src/storage.c ****     return 1;
 457              		.loc 1 588 5 is_stmt 1 view .LVU137
 458 0076 1C4B     		ldr	r3, .L56+20
 459 0078 0020     		movs	r0, #0
 460 007a 9847     		blx	r3
 461              	.LVL44:
 589:src/storage.c ****   }
 462              		.loc 1 589 5 view .LVU138
 589:src/storage.c ****   }
 463              		.loc 1 589 12 is_stmt 0 view .LVU139
 464 007c 0120     		movs	r0, #1
 598:src/storage.c **** 
 465              		.loc 1 598 1 view .LVU140
 466 007e 02B0     		add	sp, sp, #8
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 32
 469              		@ sp needed
 470 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 471              	.LVL45:
 472              	.L54:
 473              		.cfi_restore_state
 557:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 474              		.loc 1 557 5 is_stmt 1 view .LVU141
 475              	.LBB47:
 476              	.LBI47:
 531:src/storage.c **** {
 477              		.loc 1 531 14 view .LVU142
 478              	.LBE47:
 533:src/storage.c **** }
 479              		.loc 1 533 2 view .LVU143
 558:src/storage.c ****   }
 480              		.loc 1 558 5 view .LVU144
 557:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 481              		.loc 1 557 12 is_stmt 0 view .LVU145
 482 0084 DFF87890 		ldr	r9, .L56+44
 558:src/storage.c ****   }
 483              		.loc 1 558 12 view .LVU146
 484 0088 AE1B     		subs	r6, r5, r6
 485              	.LVL46:
 558:src/storage.c ****   }
 486              		.loc 1 558 12 view .LVU147
 487 008a D6E7     		b	.L38
 488              	.LVL47:
 489              	.L39:
 566:src/storage.c ****     return 1;
 490              		.loc 1 566 5 is_stmt 1 view .LVU148
 491 008c 0720     		movs	r0, #7
 492 008e FFF7FEFF 		bl	report_err
 493              	.LVL48:
 567:src/storage.c ****   }
 494              		.loc 1 567 5 view .LVU149
 567:src/storage.c ****   }
 495              		.loc 1 567 12 is_stmt 0 view .LVU150
 496 0092 0120     		movs	r0, #1
 598:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 22


 497              		.loc 1 598 1 view .LVU151
 498 0094 02B0     		add	sp, sp, #8
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
 501              		@ sp needed
 502 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 503              	.LVL49:
 504              	.L42:
 505              		.cfi_restore_state
 584:src/storage.c ****   f = f_write( FPT, dest, PAGE_SIZE*count, &x);
 506              		.loc 1 584 3 is_stmt 1 view .LVU152
 507 009a 144C     		ldr	r4, .L56+24
 508 009c 144B     		ldr	r3, .L56+28
 509 009e 6068     		ldr	r0, [r4, #4]
 510 00a0 3146     		mov	r1, r6
 511 00a2 9847     		blx	r3
 512              	.LVL50:
 585:src/storage.c ****   if (f != FR_OK) {
 513              		.loc 1 585 3 view .LVU153
 585:src/storage.c ****   if (f != FR_OK) {
 514              		.loc 1 585 7 is_stmt 0 view .LVU154
 515 00a4 2946     		mov	r1, r5
 516 00a6 6068     		ldr	r0, [r4, #4]
 517 00a8 124D     		ldr	r5, .L56+32
 518              	.LVL51:
 585:src/storage.c ****   if (f != FR_OK) {
 519              		.loc 1 585 7 view .LVU155
 520 00aa 3A46     		mov	r2, r7
 521 00ac 01AB     		add	r3, sp, #4
 522 00ae A847     		blx	r5
 523              	.LVL52:
 586:src/storage.c ****     f_close( FPT );
 524              		.loc 1 586 3 is_stmt 1 view .LVU156
 586:src/storage.c ****     f_close( FPT );
 525              		.loc 1 586 6 is_stmt 0 view .LVU157
 526 00b0 58B9     		cbnz	r0, .L55
 591:src/storage.c ****   if ( f != FR_OK ) {
 527              		.loc 1 591 3 is_stmt 1 view .LVU158
 591:src/storage.c ****   if ( f != FR_OK ) {
 528              		.loc 1 591 7 is_stmt 0 view .LVU159
 529 00b2 6068     		ldr	r0, [r4, #4]
 530              	.LVL53:
 591:src/storage.c ****   if ( f != FR_OK ) {
 531              		.loc 1 591 7 view .LVU160
 532 00b4 104B     		ldr	r3, .L56+36
 533 00b6 9847     		blx	r3
 534              	.LVL54:
 592:src/storage.c ****     sys_disk_write_enable(0);
 535              		.loc 1 592 3 is_stmt 1 view .LVU161
 592:src/storage.c ****     sys_disk_write_enable(0);
 536              		.loc 1 592 6 is_stmt 0 view .LVU162
 537 00b8 0446     		mov	r4, r0
 538 00ba 0028     		cmp	r0, #0
 539 00bc DBD1     		bne	.L52
 596:src/storage.c ****   return 0;
 540              		.loc 1 596 3 is_stmt 1 view .LVU163
 541 00be 0A4B     		ldr	r3, .L56+20
ARM GAS  /tmp/ccwuxJEt.s 			page 23


 542 00c0 9847     		blx	r3
 543              	.LVL55:
 544              	.L53:
 597:src/storage.c **** }
 545              		.loc 1 597 3 view .LVU164
 597:src/storage.c **** }
 546              		.loc 1 597 10 is_stmt 0 view .LVU165
 547 00c2 2046     		mov	r0, r4
 598:src/storage.c **** 
 548              		.loc 1 598 1 view .LVU166
 549 00c4 02B0     		add	sp, sp, #8
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 32
 552              		@ sp needed
 553 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 554              	.LVL56:
 555              	.L55:
 556              		.cfi_restore_state
 587:src/storage.c ****     sys_disk_write_enable(0);
 557              		.loc 1 587 5 is_stmt 1 view .LVU167
 558 00ca 6068     		ldr	r0, [r4, #4]
 559              	.LVL57:
 587:src/storage.c ****     sys_disk_write_enable(0);
 560              		.loc 1 587 5 is_stmt 0 view .LVU168
 561 00cc 0A4B     		ldr	r3, .L56+36
 562 00ce 9847     		blx	r3
 563              	.LVL58:
 564 00d0 D1E7     		b	.L52
 565              	.L57:
 566 00d2 00BF     		.align	2
 567              	.L56:
 568 00d4 00000000 		.word	backup_ram
 569 00d8 00000000 		.word	library_ram
 570 00dc D1030008 		.word	134218705
 571 00e0 2C000000 		.word	.LC2
 572 00e4 35040008 		.word	134218805
 573 00e8 E1030008 		.word	134218721
 574 00ec 00200010 		.word	268443648
 575 00f0 45040008 		.word	134218821
 576 00f4 41040008 		.word	134218817
 577 00f8 39040008 		.word	134218809
 578 00fc 18000000 		.word	.LC1
 579 0100 00000000 		.word	.LC0
 580              		.cfi_endproc
 581              	.LFE20:
 583              		.section	.text.flash_append,"ax",%progbits
 584              		.align	1
 585              		.p2align 2,,3
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
 591              	flash_append:
 592              	.LVL59:
 593              	.LFB23:
 606:src/storage.c **** }
 607:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 24


 608:src/storage.c **** #else //ifdef DM42 false
 609:src/storage.c **** 
 610:src/storage.c **** static int program_flash( void *destination, void *source, int count )
 611:src/storage.c **** {
 612:src/storage.c ****   char *name;
 613:src/storage.c ****   char *dest = (char *) destination;
 614:src/storage.c ****   FILE *f = NULL;
 615:src/storage.c ****   int offset;
 616:src/storage.c **** 
 617:src/storage.c ****   /*
 618:src/storage.c ****    *  Copy the source to the destination memory
 619:src/storage.c ****    */
 620:src/storage.c **** 
 621:src/storage.c ****   memcpy( dest, source, count * PAGE_SIZE );
 622:src/storage.c **** 
 623:src/storage.c ****   /*
 624:src/storage.c ****    *  Update the correct region file
 625:src/storage.c ****    */
 626:src/storage.c ****   if ( dest >= (char *) &BackupFlash && dest < (char *) &BackupFlash + sizeof( BackupFlash ) ) {
 627:src/storage.c ****     name = get_region_path( REGION_BACKUP );
 628:src/storage.c ****     offset = dest - (char *) &BackupFlash;
 629:src/storage.c ****   }
 630:src/storage.c ****   else if ( dest >= (char *) &UserFlash && dest < (char *) &UserFlash + sizeof( UserFlash ) ) {
 631:src/storage.c ****     name = get_region_path( REGION_LIBRARY );
 632:src/storage.c ****     offset = dest - (char *) &UserFlash;
 633:src/storage.c ****   }
 634:src/storage.c ****   else {
 635:src/storage.c ****     // Bad address
 636:src/storage.c ****     report_err( ERR_ILLEGAL );
 637:src/storage.c ****     return 1;
 638:src/storage.c ****   }
 639:src/storage.c **** 
 640:src/storage.c ****   f = fopen( name, "rb+" );
 641:src/storage.c ****   if ( f == NULL ) {
 642:src/storage.c ****     f = fopen( name, "wb+" );
 643:src/storage.c ****   }
 644:src/storage.c ****   if ( f == NULL ) {
 645:src/storage.c ****     report_err( ERR_IO );
 646:src/storage.c ****     return 1;
 647:src/storage.c ****   }
 648:src/storage.c ****   fseek( f, offset, SEEK_SET );
 649:src/storage.c ****   if ( count != fwrite( dest, PAGE_SIZE, count, f ) ) {
 650:src/storage.c ****     fclose( f );
 651:src/storage.c ****     report_err( ERR_IO );
 652:src/storage.c ****     return 1;
 653:src/storage.c ****   }
 654:src/storage.c ****   fclose( f );
 655:src/storage.c ****  return 0;
 656:src/storage.c **** }
 657:src/storage.c ****   
 658:src/storage.c **** #endif //ifdef DM42
 659:src/storage.c **** 
 660:src/storage.c **** 
 661:src/storage.c **** #endif //ifdef REALBUILD
 662:src/storage.c **** 
 663:src/storage.c **** 
 664:src/storage.c **** /*
ARM GAS  /tmp/ccwuxJEt.s 			page 25


 665:src/storage.c ****  *  Initialize the library to an empty state if it's not valid
 666:src/storage.c ****  */
 667:src/storage.c **** void init_library( void )
 668:src/storage.c **** {
 669:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 670:src/storage.c **** 	  struct {
 671:src/storage.c **** 			unsigned short crc;
 672:src/storage.c **** 			unsigned short size;
 673:src/storage.c **** 			s_opcode prog[ 126 ];
 674:src/storage.c **** 		} lib;
 675:src/storage.c **** 		lib.size = 0;
 676:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 677:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 678:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 679:src/storage.c **** 	}
 680:src/storage.c **** }
 681:src/storage.c **** 
 682:src/storage.c **** 
 683:src/storage.c **** /*
 684:src/storage.c ****  *  Add data at the end of user flash memory.
 685:src/storage.c ****  *  Update crc and counter when done.
 686:src/storage.c ****  *  All sizes are given in steps.
 687:src/storage.c ****  */
 688:src/storage.c **** static int flash_append( int destination_step, const s_opcode *source, int count, int size )
 689:src/storage.c **** {
 594              		.loc 1 689 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 256
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 690:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 598              		.loc 1 690 3 view .LVU170
 689:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 599              		.loc 1 689 1 is_stmt 0 view .LVU171
 600 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 601              		.cfi_def_cfa_offset 36
 602              		.cfi_offset 4, -36
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 6, -28
 605              		.cfi_offset 7, -24
 606              		.cfi_offset 8, -20
 607              		.cfi_offset 9, -16
 608              		.cfi_offset 10, -12
 609              		.cfi_offset 11, -8
 610              		.cfi_offset 14, -4
 611              		.loc 1 690 27 view .LVU172
 612 0004 254F     		ldr	r7, .L70
 613 0006 3C68     		ldr	r4, [r7]
 614 0008 251D     		adds	r5, r4, #4
 615              		.loc 1 690 9 view .LVU173
 616 000a 05EB4006 		add	r6, r5, r0, lsl #1
 617              	.LVL60:
 691:src/storage.c ****   char *src = (char *) source;
 618              		.loc 1 691 3 is_stmt 1 view .LVU174
 692:src/storage.c **** #ifdef REALBUILD
 693:src/storage.c ****   int offset_in_page = (int) dest & 0xff;
 694:src/storage.c **** #else
 695:src/storage.c ****   int offset_in_page = ( dest - (char *) &UserFlash ) & 0xff;
ARM GAS  /tmp/ccwuxJEt.s 			page 26


 619              		.loc 1 695 31 is_stmt 0 view .LVU175
 620 000e 341B     		subs	r4, r6, r4
 696:src/storage.c **** #endif
 697:src/storage.c ****   char buffer[ PAGE_SIZE ];
 698:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 699:src/storage.c ****   count <<= 1;
 700:src/storage.c **** 
 701:src/storage.c ****   if ( offset_in_page != 0 ) {
 621              		.loc 1 701 6 view .LVU176
 622 0010 14F0FF04 		ands	r4, r4, #255
 689:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 623              		.loc 1 689 1 view .LVU177
 624 0014 C1B0     		sub	sp, sp, #260
 625              		.cfi_def_cfa_offset 296
 689:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 626              		.loc 1 689 1 view .LVU178
 627 0016 8846     		mov	r8, r1
 628              	.LVL61:
 695:src/storage.c **** #endif
 629              		.loc 1 695 3 is_stmt 1 view .LVU179
 697:src/storage.c ****   FLASH_REGION *fr = (FLASH_REGION *) buffer;
 630              		.loc 1 697 3 view .LVU180
 698:src/storage.c ****   count <<= 1;
 631              		.loc 1 698 3 view .LVU181
 699:src/storage.c **** 
 632              		.loc 1 699 3 view .LVU182
 699:src/storage.c **** 
 633              		.loc 1 699 9 is_stmt 0 view .LVU183
 634 0018 4FEA4205 		lsl	r5, r2, #1
 635              	.LVL62:
 636              		.loc 1 701 3 is_stmt 1 view .LVU184
 689:src/storage.c ****   char *dest = (char *) ( UserFlash.prog + destination_step );
 637              		.loc 1 689 1 is_stmt 0 view .LVU185
 638 001c 9946     		mov	r9, r3
 639              		.loc 1 701 6 view .LVU186
 640 001e 21D1     		bne	.L69
 641              	.LVL63:
 642              	.L59:
 702:src/storage.c ****     /*
 703:src/storage.c ****      *  We are not on a page boundary
 704:src/storage.c ****      *  Assemble a buffer from existing and new data
 705:src/storage.c ****      */
 706:src/storage.c ****     const int bytes = PAGE_SIZE - offset_in_page;
 707:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 708:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 709:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 710:src/storage.c ****       return 1;
 711:src/storage.c ****     }
 712:src/storage.c ****     src += bytes;
 713:src/storage.c ****     dest += bytes;
 714:src/storage.c ****     count -= bytes;
 715:src/storage.c ****   }
 716:src/storage.c **** 
 717:src/storage.c ****   if ( count > 0 ) {
 643              		.loc 1 717 3 is_stmt 1 view .LVU187
 644              		.loc 1 717 6 is_stmt 0 view .LVU188
 645 0020 002D     		cmp	r5, #0
ARM GAS  /tmp/ccwuxJEt.s 			page 27


 646 0022 07DD     		ble	.L64
 718:src/storage.c ****     /*
 719:src/storage.c ****      *  Move multiples of complete pages
 720:src/storage.c ****      */
 721:src/storage.c **** #ifdef DM42
 722:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) / PAGE_SIZE; // Should work for DM42 or not
 647              		.loc 1 722 5 is_stmt 1 view .LVU189
 648              		.loc 1 722 21 is_stmt 0 view .LVU190
 649 0024 05F1FF02 		add	r2, r5, #255
 650              	.LVL64:
 723:src/storage.c **** #else
 724:src/storage.c ****     count = ( count + ( PAGE_SIZE - 1 ) ) >> 8; // Original code seems to assume that page_size = 2
 725:src/storage.c **** #endif
 726:src/storage.c ****     if ( program_flash( dest, src, count ) ) {
 651              		.loc 1 726 5 is_stmt 1 view .LVU191
 652              		.loc 1 726 10 is_stmt 0 view .LVU192
 653 0028 1212     		asrs	r2, r2, #8
 654              	.LVL65:
 655              		.loc 1 726 10 view .LVU193
 656 002a 4146     		mov	r1, r8
 657 002c 3046     		mov	r0, r6
 658 002e FFF7FEFF 		bl	program_flash
 659              	.LVL66:
 660              		.loc 1 726 8 view .LVU194
 661 0032 98B9     		cbnz	r0, .L63
 662              	.LVL67:
 663              	.L64:
 727:src/storage.c ****       return 1;
 728:src/storage.c ****     }
 729:src/storage.c ****   }
 730:src/storage.c **** 
 731:src/storage.c ****   /*
 732:src/storage.c ****    *  Update the library header to fix the crc and size fields.
 733:src/storage.c ****    */
 734:src/storage.c ****   xcopy( fr, &UserFlash, PAGE_SIZE );
 664              		.loc 1 734 3 is_stmt 1 view .LVU195
 665 0034 3968     		ldr	r1, [r7]
 666 0036 4FF48072 		mov	r2, #256
 667 003a 6846     		mov	r0, sp
 668 003c FFF7FEFF 		bl	xcopy
 669              	.LVL68:
 735:src/storage.c ****   fr->size = size;
 670              		.loc 1 735 3 view .LVU196
 736:src/storage.c ****   checksum_region( &UserFlash, fr );
 671              		.loc 1 736 3 is_stmt 0 view .LVU197
 672 0040 6946     		mov	r1, sp
 673 0042 3868     		ldr	r0, [r7]
 735:src/storage.c ****   fr->size = size;
 674              		.loc 1 735 12 view .LVU198
 675 0044 ADF80290 		strh	r9, [sp, #2]	@ movhi
 676              		.loc 1 736 3 is_stmt 1 view .LVU199
 677 0048 FFF7FEFF 		bl	checksum_region
 678              	.LVL69:
 737:src/storage.c ****   return program_flash( &UserFlash, fr, 1 );
 679              		.loc 1 737 3 view .LVU200
 680              		.loc 1 737 10 is_stmt 0 view .LVU201
 681 004c 3868     		ldr	r0, [r7]
ARM GAS  /tmp/ccwuxJEt.s 			page 28


 682 004e 6946     		mov	r1, sp
 683 0050 0122     		movs	r2, #1
 684 0052 FFF7FEFF 		bl	program_flash
 685              	.LVL70:
 738:src/storage.c **** }
 686              		.loc 1 738 1 view .LVU202
 687 0056 41B0     		add	sp, sp, #260
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 36
 690              	.LVL71:
 691              		.loc 1 738 1 view .LVU203
 692              		@ sp needed
 693 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 694              	.LVL72:
 695              	.L63:
 696              		.cfi_restore_state
 697              	.LBB48:
 710:src/storage.c ****     }
 698              		.loc 1 710 14 view .LVU204
 699 005c 0120     		movs	r0, #1
 700              	.LBE48:
 701              		.loc 1 738 1 view .LVU205
 702 005e 41B0     		add	sp, sp, #260
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              	.LVL73:
 706              		.loc 1 738 1 view .LVU206
 707              		@ sp needed
 708 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 709              	.LVL74:
 710              	.L69:
 711              		.cfi_restore_state
 712              	.LBB49:
 706:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 713              		.loc 1 706 5 is_stmt 1 view .LVU207
 707:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 714              		.loc 1 707 25 is_stmt 0 view .LVU208
 715 0064 A6EB040B 		sub	fp, r6, r4
 707:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 716              		.loc 1 707 5 view .LVU209
 717 0068 5946     		mov	r1, fp
 718              	.LVL75:
 707:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 719              		.loc 1 707 5 view .LVU210
 720 006a 2246     		mov	r2, r4
 721 006c 6846     		mov	r0, sp
 722              	.LVL76:
 706:src/storage.c ****     xcopy( buffer, dest - offset_in_page, offset_in_page );
 723              		.loc 1 706 15 view .LVU211
 724 006e C4F5807A 		rsb	r10, r4, #256
 725              	.LVL77:
 707:src/storage.c ****     xcopy( buffer + offset_in_page, src, bytes );
 726              		.loc 1 707 5 is_stmt 1 view .LVU212
 727 0072 FFF7FEFF 		bl	xcopy
 728              	.LVL78:
 708:src/storage.c ****     if ( program_flash( dest - offset_in_page, buffer, 1 ) ) {
 729              		.loc 1 708 5 view .LVU213
ARM GAS  /tmp/ccwuxJEt.s 			page 29


 730 0076 5246     		mov	r2, r10
 731 0078 4146     		mov	r1, r8
 732 007a 0DEB0400 		add	r0, sp, r4
 733 007e FFF7FEFF 		bl	xcopy
 734              	.LVL79:
 709:src/storage.c ****       return 1;
 735              		.loc 1 709 5 view .LVU214
 709:src/storage.c ****       return 1;
 736              		.loc 1 709 10 is_stmt 0 view .LVU215
 737 0082 6946     		mov	r1, sp
 738 0084 5846     		mov	r0, fp
 739 0086 0122     		movs	r2, #1
 740 0088 FFF7FEFF 		bl	program_flash
 741              	.LVL80:
 709:src/storage.c ****       return 1;
 742              		.loc 1 709 8 view .LVU216
 743 008c 0028     		cmp	r0, #0
 744 008e E5D1     		bne	.L63
 712:src/storage.c ****     dest += bytes;
 745              		.loc 1 712 5 is_stmt 1 view .LVU217
 712:src/storage.c ****     dest += bytes;
 746              		.loc 1 712 9 is_stmt 0 view .LVU218
 747 0090 D044     		add	r8, r8, r10
 748              	.LVL81:
 713:src/storage.c ****     count -= bytes;
 749              		.loc 1 713 5 is_stmt 1 view .LVU219
 713:src/storage.c ****     count -= bytes;
 750              		.loc 1 713 10 is_stmt 0 view .LVU220
 751 0092 5644     		add	r6, r6, r10
 752              	.LVL82:
 714:src/storage.c ****   }
 753              		.loc 1 714 5 is_stmt 1 view .LVU221
 714:src/storage.c ****   }
 754              		.loc 1 714 11 is_stmt 0 view .LVU222
 755 0094 A5EB0A05 		sub	r5, r5, r10
 756              	.LVL83:
 714:src/storage.c ****   }
 757              		.loc 1 714 11 view .LVU223
 758 0098 C2E7     		b	.L59
 759              	.L71:
 760 009a 00BF     		.align	2
 761              	.L70:
 762 009c 00000000 		.word	library_ram
 763              	.LBE49:
 764              		.cfi_endproc
 765              	.LFE23:
 767              		.section	.rodata.open_selected_file.str1.4,"aMS",%progbits,1
 768              		.align	2
 769              	.LC3:
 770 0000 64617461 		.ascii	"data=3?\000"
 770      3D333F00 
 771              		.align	2
 772              	.LC4:
 773 0008 46696C65 		.ascii	"File err\000"
 773      20657272 
 773      00
 774              		.section	.text.open_selected_file,"ax",%progbits
ARM GAS  /tmp/ccwuxJEt.s 			page 30


 775              		.align	1
 776              		.p2align 2,,3
 777              		.global	open_selected_file
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	open_selected_file:
 784              	.LVL84:
 785              	.LFB38:
 739:src/storage.c **** 
 740:src/storage.c **** 
 741:src/storage.c **** /*
 742:src/storage.c ****  *  Remove steps from user flash memory.
 743:src/storage.c ****  */
 744:src/storage.c **** int flash_remove( int step_no, int count )
 745:src/storage.c **** {
 746:src/storage.c **** 	const int size = UserFlash.size - count;
 747:src/storage.c **** 	step_no = offsetLIB( step_no );
 748:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 749:src/storage.c **** 			     size - step_no, size );
 750:src/storage.c **** }
 751:src/storage.c **** 
 752:src/storage.c **** 
 753:src/storage.c **** /*
 754:src/storage.c ****  *  Simple backup / restore
 755:src/storage.c ****  *  Started with ON+STO or ON+RCL or the SAVE/LOAD commands
 756:src/storage.c ****  *  The backup area is the last 2KB of flash (pages 504 to 511) // only in REALBUILD
 757:src/storage.c ****  */
 758:src/storage.c **** void flash_backup( enum nilop op )
 759:src/storage.c **** {
 760:src/storage.c **** 	if ( not_running() ) {
 761:src/storage.c **** 		process_cmdline_set_lift();
 762:src/storage.c **** 		init_state();
 763:src/storage.c **** 		checksum_all();
 764:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 765:src/storage.c **** 			error_message( ERR_IO );
 766:src/storage.c **** 			DispMsg = "Error";
 767:src/storage.c **** 		}
 768:src/storage.c **** 		else {
 769:src/storage.c **** 			DispMsg = "Saved";
 770:src/storage.c **** 		}
 771:src/storage.c **** 	}
 772:src/storage.c **** }
 773:src/storage.c **** 
 774:src/storage.c **** 
 775:src/storage.c **** void flash_restore( enum nilop op )
 776:src/storage.c **** {
 777:src/storage.c **** 	if ( not_running() ) {
 778:src/storage.c **** 		if ( checksum_backup() ) {
 779:src/storage.c **** 			error_message( ERR_INVALID );
 780:src/storage.c **** 		}
 781:src/storage.c **** 		else {
 782:src/storage.c **** 			xcopy( &PersistentRam, &BackupFlash, sizeof( PersistentRam ) );
 783:src/storage.c **** 			init_state();
 784:src/storage.c **** 			DispMsg = "Restored";
 785:src/storage.c **** 		}
ARM GAS  /tmp/ccwuxJEt.s 			page 31


 786:src/storage.c **** 	}
 787:src/storage.c **** }
 788:src/storage.c **** 
 789:src/storage.c **** 
 790:src/storage.c **** /*
 791:src/storage.c ****  *  Load the user program area from the backup.
 792:src/storage.c ****  *  Called by PLOAD.
 793:src/storage.c ****  */
 794:src/storage.c **** void load_program( enum nilop op )
 795:src/storage.c **** {
 796:src/storage.c **** 	if ( not_running() ) {
 797:src/storage.c **** 		if ( checksum_backup() ) {
 798:src/storage.c **** 			/*
 799:src/storage.c **** 			 *  Not a valid backup
 800:src/storage.c **** 			 */
 801:src/storage.c **** 			report_err( ERR_INVALID );
 802:src/storage.c **** 			return;
 803:src/storage.c **** 		}
 804:src/storage.c **** 		clpall();
 805:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 806:src/storage.c **** 	}
 807:src/storage.c **** }
 808:src/storage.c **** 
 809:src/storage.c **** 
 810:src/storage.c **** /*
 811:src/storage.c ****  *  Load registers from backup
 812:src/storage.c ****  */
 813:src/storage.c **** void load_registers( enum nilop op )
 814:src/storage.c **** {
 815:src/storage.c **** 	int count;
 816:src/storage.c **** 	if ( checksum_backup() ) {
 817:src/storage.c **** 		/*
 818:src/storage.c **** 		 *  Not a valid backup region
 819:src/storage.c **** 		 */
 820:src/storage.c **** 		report_err( ERR_INVALID );
 821:src/storage.c **** 		return;
 822:src/storage.c **** 	}
 823:src/storage.c **** 	count = NumRegs;
 824:src/storage.c **** 	if ( is_dblmode() ) {
 825:src/storage.c **** 		// Don't clobber the stack in DP mode
 826:src/storage.c **** 		count -= EXTRA_REG + STACK_SIZE;
 827:src/storage.c **** 	}
 828:src/storage.c **** 	if ( count > BackupFlash._numregs ) {
 829:src/storage.c **** 		count = BackupFlash._numregs;
 830:src/storage.c **** 	}
 831:src/storage.c **** 	xcopy( get_reg_n(0), get_flash_reg_n(0), count << 3 );
 832:src/storage.c **** }
 833:src/storage.c **** 
 834:src/storage.c **** 
 835:src/storage.c **** /*
 836:src/storage.c ****  *  Load the statistical summation registers from backup
 837:src/storage.c ****  */
 838:src/storage.c **** void load_sigma( enum nilop op )
 839:src/storage.c **** {
 840:src/storage.c **** 	if ( checksum_backup() ) {
 841:src/storage.c **** 		/*
 842:src/storage.c **** 		 *  Not a valid backup region
ARM GAS  /tmp/ccwuxJEt.s 			page 32


 843:src/storage.c **** 		 */
 844:src/storage.c **** 		report_err( ERR_INVALID );
 845:src/storage.c **** 		return;
 846:src/storage.c **** 	}
 847:src/storage.c **** 	if ( ! BackupFlash._state.have_stats ) {
 848:src/storage.c **** 		/*
 849:src/storage.c **** 		 *  Backup has no data
 850:src/storage.c **** 		 */
 851:src/storage.c **** 		report_err( ERR_MORE_POINTS );
 852:src/storage.c **** 		return;
 853:src/storage.c **** 	}
 854:src/storage.c **** 	sigmaCopy( ( (char *)( BackupFlash._regs + TOPREALREG - BackupFlash._numregs ) - sizeof( STAT_DATA
 855:src/storage.c **** }
 856:src/storage.c **** 
 857:src/storage.c **** 
 858:src/storage.c **** /*
 859:src/storage.c ****  *  Load the configuration data from the backup
 860:src/storage.c ****  */
 861:src/storage.c **** void load_state( enum nilop op )
 862:src/storage.c **** {
 863:src/storage.c **** 	if ( not_running() ) {
 864:src/storage.c **** 		if ( checksum_backup() ) {
 865:src/storage.c **** 			/*
 866:src/storage.c **** 			 *  Not a valid backup region
 867:src/storage.c **** 			 */
 868:src/storage.c **** 			report_err( ERR_INVALID );
 869:src/storage.c **** 			return;
 870:src/storage.c **** 		}
 871:src/storage.c **** 		xcopy( &RandS1, &BackupFlash._rand_s1, (char *) &Crc - (char *) &RandS1 );
 872:src/storage.c **** 		init_state();
 873:src/storage.c **** 		clrretstk_pc();
 874:src/storage.c **** 	}
 875:src/storage.c **** }
 876:src/storage.c **** 
 877:src/storage.c **** 
 878:src/storage.c **** /*
 879:src/storage.c ****  *  Save a user program to the library region. Called by PSTO.
 880:src/storage.c ****  */
 881:src/storage.c **** void store_program( enum nilop op )
 882:src/storage.c **** {
 883:src/storage.c **** 	opcode lbl; 
 884:src/storage.c **** 	unsigned int pc;
 885:src/storage.c **** 	int space_needed, count, free;
 886:src/storage.c **** 
 887:src/storage.c **** 	if ( not_running() ) {
 888:src/storage.c **** 		/*
 889:src/storage.c **** 		 *  Don't copy from library or XROM
 890:src/storage.c **** 		 */
 891:src/storage.c **** 		pc = nLIB( state_pc() );
 892:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 893:src/storage.c **** 			report_err( ERR_ILLEGAL );
 894:src/storage.c **** 			return;
 895:src/storage.c **** 		}
 896:src/storage.c **** 		/*
 897:src/storage.c **** 		 *  Check if program is labeled
 898:src/storage.c **** 		 */
 899:src/storage.c **** 		update_program_bounds( 1 );
ARM GAS  /tmp/ccwuxJEt.s 			page 33


 900:src/storage.c **** 		lbl = getprog( ProgBegin );
 901:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 902:src/storage.c **** 			report_err( ERR_NO_LBL );
 903:src/storage.c **** 			return;
 904:src/storage.c **** 		}
 905:src/storage.c **** 		/*
 906:src/storage.c **** 		 *  Compute space needed
 907:src/storage.c **** 		 */
 908:src/storage.c **** 		count = space_needed = 1 + ProgEnd - ProgBegin;
 909:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 910:src/storage.c **** 
 911:src/storage.c **** 		/*
 912:src/storage.c **** 		 *  Find a duplicate label in the library and delete the program
 913:src/storage.c **** 		 */
 914:src/storage.c **** 		pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
 915:src/storage.c **** 		if ( pc != 0 ) {
 916:src/storage.c **** 			/*
 917:src/storage.c **** 			 *  CLP in library
 918:src/storage.c **** 			 */
 919:src/storage.c **** 			unsigned int old_pc = state_pc();
 920:src/storage.c **** 			set_pc( pc );
 921:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 922:src/storage.c **** 			if ( space_needed <= free ) {
 923:src/storage.c **** 				clrprog();
 924:src/storage.c **** 			}
 925:src/storage.c **** 			set_pc( old_pc );
 926:src/storage.c **** 		}
 927:src/storage.c **** 		if ( space_needed > free ) {
 928:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 929:src/storage.c **** 			return;
 930:src/storage.c **** 		}
 931:src/storage.c **** 		// 3. Append program
 932:src/storage.c **** 		flash_append( UserFlash.size, get_current_prog(), count, UserFlash.size + count );
 933:src/storage.c **** 	}
 934:src/storage.c **** }
 935:src/storage.c **** 
 936:src/storage.c **** 
 937:src/storage.c **** /*
 938:src/storage.c ****  *  Load a user program from any region. Called by PRCL.
 939:src/storage.c ****  */
 940:src/storage.c **** void recall_program( enum nilop op )
 941:src/storage.c **** {
 942:src/storage.c **** 	if ( not_running() ) {
 943:src/storage.c **** 		if ( state_pc() == 0 ) {
 944:src/storage.c **** 			State.pc = 1;
 945:src/storage.c **** 		}
 946:src/storage.c **** 		update_program_bounds( 1 );
 947:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 948:src/storage.c **** 	}
 949:src/storage.c **** }
 950:src/storage.c **** 
 951:src/storage.c **** 
 952:src/storage.c **** #if !defined(REALBUILD) && !defined(IOS)
 953:src/storage.c **** /*
 954:src/storage.c ****  *  Filesystem access for emulator
 955:src/storage.c ****  */
 956:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 34


 957:src/storage.c **** #ifndef DM42
 958:src/storage.c **** 
 959:src/storage.c **** #ifdef _WIN32
 960:src/storage.c **** #define ASSEMBLER "..\\tools\\wp34s_asm.exe"
 961:src/storage.c **** #else
 962:src/storage.c **** #define ASSEMBLER "../tools/wp34s_asm.pl"
 963:src/storage.c **** #endif
 964:src/storage.c **** 
 965:src/storage.c **** #define ASSEMBLER_OPTIONS ""
 966:src/storage.c **** char CurrentDir[ FILENAME_MAX + 1 ];
 967:src/storage.c **** char StateFile[ FILENAME_MAX + 1 ] = STATE_FILE;
 968:src/storage.c **** //char BackupFile[ FILENAME_MAX + 1 ] = BACKUP_FILE;
 969:src/storage.c **** //char LibraryFile[ FILENAME_MAX + 1 ] = LIBRARY_FILE;
 970:src/storage.c **** char ComPort[ FILENAME_MAX + 1 ] = "COM1";
 971:src/storage.c **** char Assembler[ FILENAME_MAX + 1 ] = ASSEMBLER;
 972:src/storage.c **** 
 973:src/storage.c **** /*
 974:src/storage.c ****  *  Show (GUI) message
 975:src/storage.c ****  */
 976:src/storage.c **** #ifdef QTGUI
 977:src/storage.c **** extern void showMessage(const char* title, const char* message);
 978:src/storage.c **** #endif
 979:src/storage.c **** 
 980:src/storage.c **** 
 981:src/storage.c **** static void ShowMessage( const char *title, const char *format, ... )
 982:src/storage.c **** {
 983:src/storage.c **** 	va_list args;
 984:src/storage.c **** #ifndef QTGUI
 985:src/storage.c **** #ifdef WINGUI
 986:src/storage.c **** 	char msg[ 10000 ];
 987:src/storage.c **** 	va_start( args, format );
 988:src/storage.c **** 	vsprintf( msg, format, args );
 989:src/storage.c **** 	MessageBox( NULL, msg, title, MB_OK );
 990:src/storage.c **** #else
 991:src/storage.c **** 	va_start( args, format );
 992:src/storage.c **** 	fprintf( stderr, "%s:\n", title );
 993:src/storage.c **** 	vfprintf( stderr, format, args );
 994:src/storage.c **** 	fputc( '\n', stderr );
 995:src/storage.c **** #endif
 996:src/storage.c **** #else
 997:src/storage.c **** 	char msg[ 10000 ];
 998:src/storage.c **** 	va_start( args, format );
 999:src/storage.c **** 	vsprintf( msg, format, args );
1000:src/storage.c **** 	showMessage(title, msg);
1001:src/storage.c **** #endif
1002:src/storage.c **** }
1003:src/storage.c **** 
1004:src/storage.c **** 
1005:src/storage.c **** 
1006:src/storage.c **** /*
1007:src/storage.c ****  *  Save/Load state to a file
1008:src/storage.c ****  */
1009:src/storage.c **** void save_statefile( const char *filename )
1010:src/storage.c **** {
1011:src/storage.c **** 	FILE *f;
1012:src/storage.c **** 	if ( filename != NULL && *filename != '\0' ) {
1013:src/storage.c **** 		strncpy( StateFile, filename, FILENAME_MAX );
ARM GAS  /tmp/ccwuxJEt.s 			page 35


1014:src/storage.c **** 	}
1015:src/storage.c **** 	f = fopen( StateFile, "wb" );
1016:src/storage.c **** 	if ( f == NULL ) {
1017:src/storage.c **** 		ShowMessage( "Save Error", strerror( errno ) );
1018:src/storage.c **** 		return;
1019:src/storage.c **** 	}
1020:src/storage.c **** 	process_cmdline_set_lift();
1021:src/storage.c **** 	init_state();
1022:src/storage.c **** 	checksum_all();
1023:src/storage.c **** 	fwrite( &PersistentRam, sizeof( PersistentRam ), 1, f );
1024:src/storage.c **** 	fclose( f );
1025:src/storage.c **** #ifdef DEBUG
1026:src/storage.c **** 	printf( "sizeof struct _state = %d\n", (int)sizeof( struct _state ) );
1027:src/storage.c **** 	printf( "sizeof struct _ustate = %d\n", (int)sizeof( struct _ustate ) );
1028:src/storage.c **** 	printf( "sizeof RAM = %d (%d free)\n", (int)sizeof(PersistentRam), 2048 - (int)sizeof(PersistentRa
1029:src/storage.c **** 	printf( "sizeof struct _state2 = %d\n", (int)sizeof( struct _state2 ) );
1030:src/storage.c **** 	printf( "sizeof while on = %d\n", (int)sizeof(TStateWhileOn));
1031:src/storage.c **** 	printf( "sizeof decNumber = %d\n", (int)sizeof(decNumber));
1032:src/storage.c **** 	printf( "sizeof decContext = %d\n", (int)sizeof(decContext));
1033:src/storage.c **** #endif
1034:src/storage.c **** }
1035:src/storage.c **** 
1036:src/storage.c **** /*
1037:src/storage.c ****  *  Helper to expand filenames with startup directory
1038:src/storage.c ****  */
1039:src/storage.c **** #ifdef _WIN32
1040:src/storage.c **** #include <direct.h>
1041:src/storage.c **** #define getcwd _getcwd
1042:src/storage.c **** #define SEPARATOR '\\'
1043:src/storage.c **** #else
1044:src/storage.c **** #define SEPARATOR '/'
1045:src/storage.c **** #endif
1046:src/storage.c **** 
1047:src/storage.c **** static char *expand_filename( char *buffer, const char *filename )
1048:src/storage.c **** {
1049:src/storage.c **** 	char *p;
1050:src/storage.c **** 	size_t l;
1051:src/storage.c **** 
1052:src/storage.c **** 	if ( *CurrentDir == '\0' ) {
1053:src/storage.c **** 		// Determine current directory on first call
1054:src/storage.c **** 		getcwd( CurrentDir, FILENAME_MAX );
1055:src/storage.c **** 		p = CurrentDir + strlen( CurrentDir );
1056:src/storage.c **** 		if ( p != CurrentDir && p[ -1 ] != SEPARATOR ) {
1057:src/storage.c **** 			*p = SEPARATOR;
1058:src/storage.c **** 			p[ 1 ] = '\0';
1059:src/storage.c **** 		}
1060:src/storage.c **** 	}
1061:src/storage.c **** 	if ( *filename == SEPARATOR || filename[ 1 ] == ':' ) {
1062:src/storage.c **** 		// Absolute path left unchanged
1063:src/storage.c **** 		strncpy( buffer, filename, FILENAME_MAX );
1064:src/storage.c **** 	}
1065:src/storage.c **** 	else {
1066:src/storage.c **** 		// Prepend CurrentDir
1067:src/storage.c **** 		strncpy( buffer, CurrentDir, FILENAME_MAX );
1068:src/storage.c **** 		l = strlen( buffer );
1069:src/storage.c **** 		strncpy( buffer + l, filename, FILENAME_MAX - l );
1070:src/storage.c **** 	}
ARM GAS  /tmp/ccwuxJEt.s 			page 36


1071:src/storage.c **** 	return buffer;
1072:src/storage.c **** }
1073:src/storage.c **** #endif //ifndef DM42
1074:src/storage.c **** 
1075:src/storage.c **** /*
1076:src/storage.c ****  *  Lots of file routines for DM42
1077:src/storage.c ****  */
1078:src/storage.c **** 
1079:src/storage.c **** #ifdef DM42
1080:src/storage.c **** 
1081:src/storage.c **** #define DISP_NEW 1
1082:src/storage.c **** #define OVERWRITE_CHECK 1
1083:src/storage.c **** #define NO_DISP_NEW 0
1084:src/storage.c **** #define NO_OVERWRITE_CHECK 0
1085:src/storage.c **** #define WRITE 1
1086:src/storage.c **** #define READ 2
1087:src/storage.c **** 
1088:src/storage.c **** void save_lib_file ( int i ) {
1089:src/storage.c ****   FRESULT f;
1090:src/storage.c ****   int fss;
1091:src/storage.c ****   int data = WRITE;
1092:src/storage.c ****   uint x=0;
1093:src/storage.c **** 
1094:src/storage.c ****   sys_disk_write_enable(1);
1095:src/storage.c ****   if (i == 0) {
1096:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1097:src/storage.c ****     if (f != FR_OK) {
1098:src/storage.c ****       f_close (FPT);
1099:src/storage.c ****       sys_disk_write_enable(0);
1100:src/storage.c ****       DispMsg = "Err slf1";
1101:src/storage.c ****       return;
1102:src/storage.c ****     }
1103:src/storage.c ****   }
1104:src/storage.c ****   else {
1105:src/storage.c ****     fss = file_selection_screen ("Save Library File", "/wp34s", ".lib", open_selected_file, DISP_NE
1106:src/storage.c ****     if (fss != 1) return;
1107:src/storage.c ****   }
1108:src/storage.c ****   // File is now open with correct permissions
1109:src/storage.c ****   f = f_write (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1110:src/storage.c ****   if ( f != FR_OK ) {
1111:src/storage.c ****     DispMsg = "Err slf2";
1112:src/storage.c ****   }
1113:src/storage.c ****   f_close( FPT );
1114:src/storage.c ****   sys_disk_write_enable(0);
1115:src/storage.c **** }
1116:src/storage.c **** 
1117:src/storage.c **** void load_lib_file ( int i ) {
1118:src/storage.c ****   FRESULT f;
1119:src/storage.c ****   int fss;
1120:src/storage.c ****   int data = READ;
1121:src/storage.c ****   uint x=0;
1122:src/storage.c **** 
1123:src/storage.c ****   if (i == 0) {
1124:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
1125:src/storage.c ****     if (f != FR_OK) {
1126:src/storage.c ****       f_close (FPT);
1127:src/storage.c ****       //      DispMsg = "No file?";
ARM GAS  /tmp/ccwuxJEt.s 			page 37


1128:src/storage.c ****       return;
1129:src/storage.c ****     }
1130:src/storage.c ****   }
1131:src/storage.c ****   else {
1132:src/storage.c ****     fss = file_selection_screen ("Load Library File", "/wp34s", ".lib", open_selected_file, NO_DISP
1133:src/storage.c ****     if (fss != 1) return;
1134:src/storage.c ****   }
1135:src/storage.c ****   // File is now open with correct permissions
1136:src/storage.c ****   f = f_read (FPT, (char *) &UserFlash, sizeof (UserFlash), &x);
1137:src/storage.c ****   if ( f != FR_OK ) {
1138:src/storage.c ****     DispMsg = "Err slf2";
1139:src/storage.c ****   }
1140:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1141:src/storage.c ****     DispMsg = "File too big";
1142:src/storage.c ****   }
1143:src/storage.c ****   f_close( FPT );
1144:src/storage.c **** }
1145:src/storage.c **** 
1146:src/storage.c **** void save_ram_file ( int i ) {
1147:src/storage.c ****   FRESULT f;
1148:src/storage.c ****   int fss;
1149:src/storage.c ****   int data = WRITE;
1150:src/storage.c ****   uint x=0;
1151:src/storage.c **** 
1152:src/storage.c ****     process_cmdline_set_lift();
1153:src/storage.c ****     init_state();
1154:src/storage.c ****     checksum_all();
1155:src/storage.c **** 
1156:src/storage.c ****     sys_disk_write_enable(1);
1157:src/storage.c ****     if (i == 0) {
1158:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1159:src/storage.c ****       if (f != FR_OK) {
1160:src/storage.c **** 	f_close (FPT);
1161:src/storage.c **** 	sys_disk_write_enable(0);
1162:src/storage.c **** 	DispMsg = "Err srf1";
1163:src/storage.c **** 	return;
1164:src/storage.c ****       }
1165:src/storage.c ****     }
1166:src/storage.c ****     else {
1167:src/storage.c ****       fss = file_selection_screen ("Save RAM File", "/wp34s", ".dat", open_selected_file, DISP_NEW,
1168:src/storage.c ****       if (fss != 1) return;
1169:src/storage.c ****     }
1170:src/storage.c ****     // File is now open with correct permissions
1171:src/storage.c ****     f = f_write (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1172:src/storage.c ****     if ( f != FR_OK ) {
1173:src/storage.c ****       DispMsg = "Err srf2";
1174:src/storage.c ****     }
1175:src/storage.c ****     f_close( FPT );
1176:src/storage.c ****     sys_disk_write_enable(0);
1177:src/storage.c **** }
1178:src/storage.c **** 
1179:src/storage.c **** int load_ram_file ( int i ) { // this will load backup files too!
1180:src/storage.c ****   FRESULT f;
1181:src/storage.c ****   int fss;
1182:src/storage.c ****   int data = READ;
1183:src/storage.c ****   uint x=0;
1184:src/storage.c ****   
ARM GAS  /tmp/ccwuxJEt.s 			page 38


1185:src/storage.c ****   if (i == 0) {
1186:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
1187:src/storage.c ****     if (f != FR_OK) {
1188:src/storage.c ****       f_close (FPT);
1189:src/storage.c ****       //      DispMsg = "No file?";
1190:src/storage.c ****       return 1;
1191:src/storage.c ****     }
1192:src/storage.c ****   }
1193:src/storage.c ****   else {
1194:src/storage.c ****     fss = file_selection_screen ("Load RAM File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW
1195:src/storage.c ****     if (fss != 1) return 1;
1196:src/storage.c ****   }
1197:src/storage.c ****   // File is now open with correct permissions
1198:src/storage.c ****   f = f_read (FPT, (char *) &PersistentRam, sizeof (PersistentRam), &x);
1199:src/storage.c ****   if ( f != FR_OK ) {
1200:src/storage.c ****     DispMsg = "Err lrf2";
1201:src/storage.c ****       f_close( FPT );
1202:src/storage.c ****       return 1;
1203:src/storage.c ****   }
1204:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1205:src/storage.c ****     DispMsg = "File too big";
1206:src/storage.c ****       f_close( FPT );
1207:src/storage.c ****       return 1;
1208:src/storage.c ****   }
1209:src/storage.c ****   f_close( FPT );
1210:src/storage.c ****   return 0;
1211:src/storage.c **** }
1212:src/storage.c **** 
1213:src/storage.c **** void load_backup_file ( int i ) { // goes into backup!
1214:src/storage.c ****   FRESULT f;
1215:src/storage.c ****   int fss;
1216:src/storage.c ****   int data = READ;
1217:src/storage.c ****   uint x=0;
1218:src/storage.c **** 
1219:src/storage.c ****   if (i == 0) {
1220:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
1221:src/storage.c ****     if (f != FR_OK) {
1222:src/storage.c ****       f_close (FPT);
1223:src/storage.c ****       return;
1224:src/storage.c ****     }
1225:src/storage.c ****   }
1226:src/storage.c ****   else {
1227:src/storage.c ****     fss = file_selection_screen ("Load RAM Backup File", "/wp34s", ".dat", open_selected_file, NO_D
1228:src/storage.c ****     if (fss != 1) return;
1229:src/storage.c ****   }
1230:src/storage.c ****   // File is now open with correct permissions
1231:src/storage.c ****   f = f_read (FPT, (char *) &BackupFlash, sizeof (BackupFlash), &x);
1232:src/storage.c ****   if ( f != FR_OK ) {
1233:src/storage.c ****     DispMsg = "Err lbf2";
1234:src/storage.c ****   }
1235:src/storage.c ****   if ( !(f_eof(FPT)) ) {
1236:src/storage.c ****     DispMsg = "File too big";
1237:src/storage.c ****   }
1238:src/storage.c ****   f_close( FPT );
1239:src/storage.c **** }
1240:src/storage.c **** 
1241:src/storage.c **** int open_selected_file (const char * fpath, const char * fname, void * data) {
ARM GAS  /tmp/ccwuxJEt.s 			page 39


 786              		.loc 1 1241 78 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 1241 78 is_stmt 0 view .LVU225
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
1242:src/storage.c ****   FRESULT f;
1243:src/storage.c **** 
1244:src/storage.c ****   if (*(int*)data == WRITE) {
 795              		.loc 1 1244 7 view .LVU226
 796 0002 1368     		ldr	r3, [r2]
 797              		.loc 1 1244 6 view .LVU227
 798 0004 012B     		cmp	r3, #1
1241:src/storage.c ****   FRESULT f;
 799              		.loc 1 1241 78 view .LVU228
 800 0006 0146     		mov	r1, r0
 801              	.LVL85:
1242:src/storage.c ****   FRESULT f;
 802              		.loc 1 1242 3 is_stmt 1 view .LVU229
 803              		.loc 1 1244 3 view .LVU230
 804              		.loc 1 1244 6 is_stmt 0 view .LVU231
 805 0008 0ED0     		beq	.L79
1245:src/storage.c ****     // open file to write
1246:src/storage.c ****     f = f_open (FPT, fpath, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
1247:src/storage.c ****   }
1248:src/storage.c ****   else if (*(int*)data == READ) {
 806              		.loc 1 1248 8 is_stmt 1 view .LVU232
 807              		.loc 1 1248 11 is_stmt 0 view .LVU233
 808 000a 022B     		cmp	r3, #2
 809 000c 07D1     		bne	.L75
1249:src/storage.c ****     // open file to read
1250:src/storage.c ****     f = f_open (FPT, fpath, FA_READ);
 810              		.loc 1 1250 5 is_stmt 1 view .LVU234
 811              		.loc 1 1250 9 is_stmt 0 view .LVU235
 812 000e 104A     		ldr	r2, .L81
 813              	.LVL86:
 814              		.loc 1 1250 9 view .LVU236
 815 0010 104B     		ldr	r3, .L81+4
 816 0012 5068     		ldr	r0, [r2, #4]
 817              	.LVL87:
 818              		.loc 1 1250 9 view .LVU237
 819 0014 0122     		movs	r2, #1
 820 0016 9847     		blx	r3
 821              	.LVL88:
1251:src/storage.c ****   }
1252:src/storage.c ****   else {
1253:src/storage.c ****     DispMsg = "data=3?";
1254:src/storage.c ****     return 3; // serious error!
1255:src/storage.c ****   }
1256:src/storage.c ****   if (f != FR_OK) {
 822              		.loc 1 1256 3 is_stmt 1 view .LVU238
 823              		.loc 1 1256 6 is_stmt 0 view .LVU239
 824 0018 68B9     		cbnz	r0, .L80
 825              	.L77:
ARM GAS  /tmp/ccwuxJEt.s 			page 40


1257:src/storage.c ****     f_close (FPT);
1258:src/storage.c ****     sys_disk_write_enable(0);
1259:src/storage.c ****     DispMsg = "File err";
1260:src/storage.c ****     return 2; // file can't be opened
1261:src/storage.c ****   }
1262:src/storage.c ****   else {
1263:src/storage.c ****     return 1; // file opened successfully
 826              		.loc 1 1263 12 view .LVU240
 827 001a 0120     		movs	r0, #1
 828              	.LVL89:
1264:src/storage.c ****   }
1265:src/storage.c **** }
 829              		.loc 1 1265 1 view .LVU241
 830 001c 08BD     		pop	{r3, pc}
 831              	.LVL90:
 832              	.L75:
1253:src/storage.c ****     return 3; // serious error!
 833              		.loc 1 1253 5 is_stmt 1 view .LVU242
1253:src/storage.c ****     return 3; // serious error!
 834              		.loc 1 1253 13 is_stmt 0 view .LVU243
 835 001e 0E4B     		ldr	r3, .L81+8
 836 0020 0E4A     		ldr	r2, .L81+12
 837              	.LVL91:
1253:src/storage.c ****     return 3; // serious error!
 838              		.loc 1 1253 13 view .LVU244
 839 0022 1A60     		str	r2, [r3]
1254:src/storage.c ****   }
 840              		.loc 1 1254 5 is_stmt 1 view .LVU245
1254:src/storage.c ****   }
 841              		.loc 1 1254 12 is_stmt 0 view .LVU246
 842 0024 0320     		movs	r0, #3
 843              	.LVL92:
 844              		.loc 1 1265 1 view .LVU247
 845 0026 08BD     		pop	{r3, pc}
 846              	.LVL93:
 847              	.L79:
1246:src/storage.c ****   }
 848              		.loc 1 1246 5 is_stmt 1 view .LVU248
1246:src/storage.c ****   }
 849              		.loc 1 1246 9 is_stmt 0 view .LVU249
 850 0028 094A     		ldr	r2, .L81
 851              	.LVL94:
1246:src/storage.c ****   }
 852              		.loc 1 1246 9 view .LVU250
 853 002a 0A4B     		ldr	r3, .L81+4
 854 002c 5068     		ldr	r0, [r2, #4]
 855              	.LVL95:
1246:src/storage.c ****   }
 856              		.loc 1 1246 9 view .LVU251
 857 002e 0B22     		movs	r2, #11
 858 0030 9847     		blx	r3
 859              	.LVL96:
1256:src/storage.c ****     f_close (FPT);
 860              		.loc 1 1256 3 is_stmt 1 view .LVU252
1256:src/storage.c ****     f_close (FPT);
 861              		.loc 1 1256 6 is_stmt 0 view .LVU253
 862 0032 0028     		cmp	r0, #0
ARM GAS  /tmp/ccwuxJEt.s 			page 41


 863 0034 F1D0     		beq	.L77
 864              	.L80:
 865              	.LBB52:
 866              	.LBI52:
1241:src/storage.c ****   FRESULT f;
 867              		.loc 1 1241 5 is_stmt 1 view .LVU254
 868              	.LVL97:
 869              	.LBB53:
1257:src/storage.c ****     sys_disk_write_enable(0);
 870              		.loc 1 1257 5 view .LVU255
 871 0036 064A     		ldr	r2, .L81
 872 0038 094B     		ldr	r3, .L81+16
 873 003a 5068     		ldr	r0, [r2, #4]
 874              	.LVL98:
1257:src/storage.c ****     sys_disk_write_enable(0);
 875              		.loc 1 1257 5 is_stmt 0 view .LVU256
 876 003c 9847     		blx	r3
 877              	.LVL99:
1258:src/storage.c ****     DispMsg = "File err";
 878              		.loc 1 1258 5 is_stmt 1 view .LVU257
 879 003e 094B     		ldr	r3, .L81+20
 880 0040 0020     		movs	r0, #0
 881 0042 9847     		blx	r3
 882              	.LVL100:
1259:src/storage.c ****     return 2; // file can't be opened
 883              		.loc 1 1259 5 view .LVU258
1259:src/storage.c ****     return 2; // file can't be opened
 884              		.loc 1 1259 13 is_stmt 0 view .LVU259
 885 0044 044B     		ldr	r3, .L81+8
 886 0046 084A     		ldr	r2, .L81+24
 887 0048 1A60     		str	r2, [r3]
1260:src/storage.c ****   }
 888              		.loc 1 1260 5 is_stmt 1 view .LVU260
 889              	.LVL101:
1259:src/storage.c ****     return 2; // file can't be opened
 890              		.loc 1 1259 13 is_stmt 0 view .LVU261
 891 004a 0220     		movs	r0, #2
 892              	.LBE53:
 893              	.LBE52:
 894              		.loc 1 1265 1 view .LVU262
 895 004c 08BD     		pop	{r3, pc}
 896              	.L82:
 897 004e 00BF     		.align	2
 898              	.L81:
 899 0050 00200010 		.word	268443648
 900 0054 35040008 		.word	134218805
 901 0058 00000000 		.word	DispMsg
 902 005c 00000000 		.word	.LC3
 903 0060 39040008 		.word	134218809
 904 0064 E1030008 		.word	134218721
 905 0068 08000000 		.word	.LC4
 906              		.cfi_endproc
 907              	.LFE38:
 909              		.section	.rodata.init_mem.str1.4,"aMS",%progbits,1
 910              		.align	2
 911              	.LC5:
 912 0000 63616C6C 		.ascii	"calloc failed\000"
ARM GAS  /tmp/ccwuxJEt.s 			page 42


 912      6F632066 
 912      61696C65 
 912      6400
 913              		.section	.text.init_mem,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	init_mem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	init_mem:
 923              	.LFB3:
  99:src/storage.c ****   char *v;
 924              		.loc 1 99 18 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 100:src/storage.c **** 
 928              		.loc 1 100 3 view .LVU264
 102:src/storage.c ****   if (v == NULL) {
 929              		.loc 1 102 3 view .LVU265
  99:src/storage.c ****   char *v;
 930              		.loc 1 99 18 is_stmt 0 view .LVU266
 931 0000 08B5     		push	{r3, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
 102:src/storage.c ****   if (v == NULL) {
 935              		.loc 1 102 16 view .LVU267
 936 0002 0121     		movs	r1, #1
 937 0004 4FF4A040 		mov	r0, #20480
 938 0008 FFF7FEFF 		bl	calloc
 939              	.LVL102:
 103:src/storage.c ****     perror("calloc failed");
 940              		.loc 1 103 3 is_stmt 1 view .LVU268
 103:src/storage.c ****     perror("calloc failed");
 941              		.loc 1 103 6 is_stmt 0 view .LVU269
 942 000c 50B1     		cbz	r0, .L86
 107:src/storage.c ****   v += RAM_SIZE;
 943              		.loc 1 107 3 is_stmt 1 view .LVU270
 107:src/storage.c ****   v += RAM_SIZE;
 944              		.loc 1 107 12 is_stmt 0 view .LVU271
 945 000e 0849     		ldr	r1, .L87
 109:src/storage.c ****   v += RAM_SIZE;
 946              		.loc 1 109 14 view .LVU272
 947 0010 084A     		ldr	r2, .L87+4
 111:src/storage.c **** }
 948              		.loc 1 111 15 view .LVU273
 949 0012 094B     		ldr	r3, .L87+8
 107:src/storage.c ****   v += RAM_SIZE;
 950              		.loc 1 107 12 view .LVU274
 951 0014 0860     		str	r0, [r1]
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 952              		.loc 1 108 3 is_stmt 1 view .LVU275
 953              	.LVL103:
 109:src/storage.c ****   v += RAM_SIZE;
ARM GAS  /tmp/ccwuxJEt.s 			page 43


 954              		.loc 1 109 3 view .LVU276
 108:src/storage.c ****   backup_ram = (TPersistentRam *) v;
 955              		.loc 1 108 5 is_stmt 0 view .LVU277
 956 0016 00F50061 		add	r1, r0, #2048
 957              	.LVL104:
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 958              		.loc 1 110 5 view .LVU278
 959 001a 00F58050 		add	r0, r0, #4096
 109:src/storage.c ****   v += RAM_SIZE;
 960              		.loc 1 109 14 view .LVU279
 961 001e 1160     		str	r1, [r2]
 110:src/storage.c ****   library_ram = (FLASH_REGION *) v;
 962              		.loc 1 110 3 is_stmt 1 view .LVU280
 963              	.LVL105:
 111:src/storage.c **** }
 964              		.loc 1 111 3 view .LVU281
 111:src/storage.c **** }
 965              		.loc 1 111 15 is_stmt 0 view .LVU282
 966 0020 1860     		str	r0, [r3]
 112:src/storage.c **** 
 967              		.loc 1 112 1 view .LVU283
 968 0022 08BD     		pop	{r3, pc}
 969              	.LVL106:
 970              	.L86:
 104:src/storage.c ****     return;
 971              		.loc 1 104 5 is_stmt 1 view .LVU284
 112:src/storage.c **** 
 972              		.loc 1 112 1 is_stmt 0 view .LVU285
 973 0024 BDE80840 		pop	{r3, lr}
 974              		.cfi_restore 14
 975              		.cfi_restore 3
 976              		.cfi_def_cfa_offset 0
 104:src/storage.c ****     return;
 977              		.loc 1 104 5 view .LVU286
 978 0028 0448     		ldr	r0, .L87+12
 979              	.LVL107:
 104:src/storage.c ****     return;
 980              		.loc 1 104 5 view .LVU287
 981 002a FFF7FEBF 		b	perror
 982              	.LVL108:
 983              	.L88:
 984 002e 00BF     		.align	2
 985              	.L87:
 986 0030 00000000 		.word	main_ram
 987 0034 00000000 		.word	backup_ram
 988 0038 00000000 		.word	library_ram
 989 003c 00000000 		.word	.LC5
 990              		.cfi_endproc
 991              	.LFE3:
 993              		.section	.text.crc16,"ax",%progbits
 994              		.align	1
 995              		.p2align 2,,3
 996              		.global	crc16
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccwuxJEt.s 			page 44


 1002              	crc16:
 1003              	.LVL109:
 1004              	.LFB4:
 157:src/storage.c **** 	unsigned short int crc = 0x5aa5;
 1005              		.loc 1 157 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1010              		.loc 1 158 2 view .LVU289
 159:src/storage.c **** 	unsigned int i;
 1011              		.loc 1 159 2 view .LVU290
 160:src/storage.c **** 
 1012              		.loc 1 160 2 view .LVU291
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1013              		.loc 1 162 2 view .LVU292
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1014              		.loc 1 162 15 view .LVU293
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1015              		.loc 1 162 2 is_stmt 0 view .LVU294
 1016 0000 B1B1     		cbz	r1, .L92
 1017 0002 0144     		add	r1, r1, r0
 1018              	.LVL110:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1019              		.loc 1 158 21 view .LVU295
 1020 0004 45F6A523 		movw	r3, #23205
 1021              	.LVL111:
 1022              	.L91:
 163:src/storage.c **** 		crc ^= *d++;
 1023              		.loc 1 163 3 is_stmt 1 discriminator 3 view .LVU296
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1024              		.loc 1 164 10 is_stmt 0 discriminator 3 view .LVU297
 1025 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1026              	.LVL112:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1027              		.loc 1 164 10 discriminator 3 view .LVU298
 1028 000c 5BBA     		rev16	r3, r3
 1029              	.LVL113:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1030              		.loc 1 164 10 discriminator 3 view .LVU299
 1031 000e 9BB2     		uxth	r3, r3
 1032              	.LVL114:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1033              		.loc 1 164 3 is_stmt 1 discriminator 3 view .LVU300
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1034              		.loc 1 164 7 is_stmt 0 discriminator 3 view .LVU301
 1035 0010 5340     		eors	r3, r3, r2
 1036              	.LVL115:
 165:src/storage.c **** 		crc ^= crc << 12;
 1037              		.loc 1 165 3 is_stmt 1 discriminator 3 view .LVU302
 165:src/storage.c **** 		crc ^= crc << 12;
 1038              		.loc 1 165 7 is_stmt 0 discriminator 3 view .LVU303
 1039 0012 C3F30312 		ubfx	r2, r3, #4, #4
 1040 0016 5340     		eors	r3, r3, r2
 1041              	.LVL116:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
ARM GAS  /tmp/ccwuxJEt.s 			page 45


 1042              		.loc 1 166 3 is_stmt 1 discriminator 3 view .LVU304
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1043              		.loc 1 166 7 is_stmt 0 discriminator 3 view .LVU305
 1044 0018 83EA0332 		eor	r2, r3, r3, lsl #12
 1045              	.LVL117:
 167:src/storage.c **** 	}
 1046              		.loc 1 167 3 is_stmt 1 discriminator 3 view .LVU306
 167:src/storage.c **** 	}
 1047              		.loc 1 167 25 is_stmt 0 discriminator 3 view .LVU307
 1048 001c 5301     		lsls	r3, r2, #5
 1049 001e 03F4FF53 		and	r3, r3, #8160
 167:src/storage.c **** 	}
 1050              		.loc 1 167 7 discriminator 3 view .LVU308
 1051 0022 92B2     		uxth	r2, r2
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1052              		.loc 1 162 2 discriminator 3 view .LVU309
 1053 0024 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1054              		.loc 1 167 7 discriminator 3 view .LVU310
 1055 0026 83EA0203 		eor	r3, r3, r2
 1056              	.LVL118:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1057              		.loc 1 162 27 is_stmt 1 discriminator 3 view .LVU311
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1058              		.loc 1 162 15 discriminator 3 view .LVU312
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1059              		.loc 1 162 2 is_stmt 0 discriminator 3 view .LVU313
 1060 002a EDD1     		bne	.L91
 169:src/storage.c **** }
 1061              		.loc 1 169 2 is_stmt 1 view .LVU314
 170:src/storage.c **** 
 1062              		.loc 1 170 1 is_stmt 0 view .LVU315
 1063 002c 1846     		mov	r0, r3
 1064              	.LVL119:
 170:src/storage.c **** 
 1065              		.loc 1 170 1 view .LVU316
 1066 002e 7047     		bx	lr
 1067              	.LVL120:
 1068              	.L92:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1069              		.loc 1 158 21 view .LVU317
 1070 0030 45F6A523 		movw	r3, #23205
 169:src/storage.c **** }
 1071              		.loc 1 169 2 is_stmt 1 view .LVU318
 170:src/storage.c **** 
 1072              		.loc 1 170 1 is_stmt 0 view .LVU319
 1073 0034 1846     		mov	r0, r3
 1074              	.LVL121:
 170:src/storage.c **** 
 1075              		.loc 1 170 1 view .LVU320
 1076 0036 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE4:
 1080              		.section	.text.checksum_program,"ax",%progbits
 1081              		.align	1
 1082              		.p2align 2,,3
 1083              		.global	checksum_program
ARM GAS  /tmp/ccwuxJEt.s 			page 46


 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	checksum_program:
 1090              	.LFB6:
 193:src/storage.c **** 	update_program_bounds( 1 );
 1091              		.loc 1 193 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1095              		.loc 1 194 2 view .LVU322
 193:src/storage.c **** 	update_program_bounds( 1 );
 1096              		.loc 1 193 1 is_stmt 0 view .LVU323
 1097 0000 08B5     		push	{r3, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 194:src/storage.c **** 	return crc16( get_current_prog(), ProgEnd - ProgBegin + 1 );
 1101              		.loc 1 194 2 view .LVU324
 1102 0002 0120     		movs	r0, #1
 1103 0004 FFF7FEFF 		bl	update_program_bounds
 1104              	.LVL122:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1105              		.loc 1 195 2 is_stmt 1 view .LVU325
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1106              		.loc 1 195 16 is_stmt 0 view .LVU326
 1107 0008 FFF7FEFF 		bl	get_current_prog
 1108              	.LVL123:
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1109              		.loc 1 195 36 view .LVU327
 1110 000c 124B     		ldr	r3, .L100
 1111 000e 1B68     		ldr	r3, [r3]
 1112 0010 B3F8EE17 		ldrh	r1, [r3, #2030]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1113              		.loc 1 195 46 view .LVU328
 1114 0014 B3F8EC37 		ldrh	r3, [r3, #2028]
 195:src/storage.c **** 	// Size surely needs doubling - bytes, not steps. ND.
 1115              		.loc 1 195 44 view .LVU329
 1116 0018 C91A     		subs	r1, r1, r3
 1117              	.LVL124:
 1118              	.LBB54:
 1119              	.LBI54:
 156:src/storage.c **** {
 1120              		.loc 1 156 20 is_stmt 1 view .LVU330
 1121              	.LBB55:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1122              		.loc 1 158 2 view .LVU331
 159:src/storage.c **** 	unsigned int i;
 1123              		.loc 1 159 2 view .LVU332
 160:src/storage.c **** 
 1124              		.loc 1 160 2 view .LVU333
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1125              		.loc 1 162 2 view .LVU334
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1126              		.loc 1 162 15 view .LVU335
ARM GAS  /tmp/ccwuxJEt.s 			page 47


 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1127              		.loc 1 162 2 is_stmt 0 view .LVU336
 1128 001a 4B1C     		adds	r3, r1, #1
 1129              	.LVL125:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1130              		.loc 1 162 2 view .LVU337
 1131 001c 17D0     		beq	.L97
 1132 001e 0131     		adds	r1, r1, #1
 1133 0020 0144     		add	r1, r1, r0
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1134              		.loc 1 158 21 view .LVU338
 1135 0022 45F6A523 		movw	r3, #23205
 1136              	.LVL126:
 1137              	.L96:
 163:src/storage.c **** 		crc ^= *d++;
 1138              		.loc 1 163 3 is_stmt 1 view .LVU339
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1139              		.loc 1 164 10 is_stmt 0 view .LVU340
 1140 0026 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 1141              	.LVL127:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1142              		.loc 1 164 10 view .LVU341
 1143 002a 5BBA     		rev16	r3, r3
 1144              	.LVL128:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1145              		.loc 1 164 10 view .LVU342
 1146 002c 9BB2     		uxth	r3, r3
 1147              	.LVL129:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1148              		.loc 1 164 3 is_stmt 1 view .LVU343
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1149              		.loc 1 164 7 is_stmt 0 view .LVU344
 1150 002e 5340     		eors	r3, r3, r2
 1151              	.LVL130:
 165:src/storage.c **** 		crc ^= crc << 12;
 1152              		.loc 1 165 3 is_stmt 1 view .LVU345
 165:src/storage.c **** 		crc ^= crc << 12;
 1153              		.loc 1 165 7 is_stmt 0 view .LVU346
 1154 0030 C3F30312 		ubfx	r2, r3, #4, #4
 1155 0034 5340     		eors	r3, r3, r2
 1156              	.LVL131:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1157              		.loc 1 166 3 is_stmt 1 view .LVU347
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1158              		.loc 1 166 7 is_stmt 0 view .LVU348
 1159 0036 83EA0333 		eor	r3, r3, r3, lsl #12
 1160              	.LVL132:
 167:src/storage.c **** 	}
 1161              		.loc 1 167 3 is_stmt 1 view .LVU349
 167:src/storage.c **** 	}
 1162              		.loc 1 167 25 is_stmt 0 view .LVU350
 1163 003a 5A01     		lsls	r2, r3, #5
 1164 003c 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1165              		.loc 1 167 7 view .LVU351
 1166 0040 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
ARM GAS  /tmp/ccwuxJEt.s 			page 48


 1167              		.loc 1 162 2 view .LVU352
 1168 0042 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 1169              		.loc 1 167 7 view .LVU353
 1170 0044 83EA0203 		eor	r3, r3, r2
 1171              	.LVL133:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1172              		.loc 1 162 27 is_stmt 1 view .LVU354
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1173              		.loc 1 162 15 view .LVU355
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1174              		.loc 1 162 2 is_stmt 0 view .LVU356
 1175 0048 EDD1     		bne	.L96
 169:src/storage.c **** }
 1176              		.loc 1 169 2 is_stmt 1 view .LVU357
 1177              	.LVL134:
 169:src/storage.c **** }
 1178              		.loc 1 169 2 is_stmt 0 view .LVU358
 1179              	.LBE55:
 1180              	.LBE54:
 197:src/storage.c **** 
 1181              		.loc 1 197 1 view .LVU359
 1182 004a 1846     		mov	r0, r3
 1183 004c 08BD     		pop	{r3, pc}
 1184              	.LVL135:
 1185              	.L97:
 1186              	.LBB57:
 1187              	.LBB56:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1188              		.loc 1 158 21 view .LVU360
 1189 004e 45F6A523 		movw	r3, #23205
 1190              	.LVL136:
 169:src/storage.c **** }
 1191              		.loc 1 169 2 is_stmt 1 view .LVU361
 169:src/storage.c **** }
 1192              		.loc 1 169 2 is_stmt 0 view .LVU362
 1193              	.LBE56:
 1194              	.LBE57:
 197:src/storage.c **** 
 1195              		.loc 1 197 1 view .LVU363
 1196 0052 1846     		mov	r0, r3
 1197 0054 08BD     		pop	{r3, pc}
 1198              	.L101:
 1199 0056 00BF     		.align	2
 1200              	.L100:
 1201 0058 00000000 		.word	main_ram
 1202              		.cfi_endproc
 1203              	.LFE6:
 1205              		.section	.text.checksum_ram,"ax",%progbits
 1206              		.align	1
 1207              		.p2align 2,,3
 1208              		.global	checksum_ram
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1212              		.fpu fpv4-sp-d16
 1214              	checksum_ram:
ARM GAS  /tmp/ccwuxJEt.s 			page 49


 1215              	.LFB7:
 205:src/storage.c **** 	return test_checksum( &PersistentRam, sizeof( PersistentRam ) - sizeof( short ),
 1216              		.loc 1 205 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 206:src/storage.c **** 			      Crc, &Crc );
 1221              		.loc 1 206 2 view .LVU365
 206:src/storage.c **** 			      Crc, &Crc );
 1222              		.loc 1 206 9 is_stmt 0 view .LVU366
 1223 0000 044B     		ldr	r3, .L103
 1224 0002 1868     		ldr	r0, [r3]
 1225 0004 40F2FE71 		movw	r1, #2046
 1226 0008 B0F8FE27 		ldrh	r2, [r0, #2046]
 1227 000c 4318     		adds	r3, r0, r1
 1228 000e FFF7FEBF 		b	test_checksum
 1229              	.LVL137:
 1230              	.L104:
 1231 0012 00BF     		.align	2
 1232              	.L103:
 1233 0014 00000000 		.word	main_ram
 1234              		.cfi_endproc
 1235              	.LFE7:
 1237              		.section	.text.checksum_backup,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	checksum_backup
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	checksum_backup:
 1247              	.LFB8:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1248              		.loc 1 216 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1253              		.loc 1 217 2 view .LVU368
 217:src/storage.c **** 		              BackupFlash._crc, NULL );
 1254              		.loc 1 217 9 is_stmt 0 view .LVU369
 1255 0000 144B     		ldr	r3, .L111
 1256 0002 1968     		ldr	r1, [r3]
 1257 0004 B1F8FE07 		ldrh	r0, [r1, #2046]
 1258              	.LVL138:
 1259              	.LBB58:
 1260              	.LBI58:
 177:src/storage.c **** {
 1261              		.loc 1 177 12 is_stmt 1 view .LVU370
 1262              	.LBB59:
 179:src/storage.c **** 	crc = crc16( data, length );
 1263              		.loc 1 179 2 view .LVU371
 180:src/storage.c **** 	
 1264              		.loc 1 180 2 view .LVU372
ARM GAS  /tmp/ccwuxJEt.s 			page 50


 1265              	.LBB60:
 1266              	.LBI60:
 156:src/storage.c **** {
 1267              		.loc 1 156 20 view .LVU373
 1268              	.LBB61:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1269              		.loc 1 158 2 view .LVU374
 159:src/storage.c **** 	unsigned int i;
 1270              		.loc 1 159 2 view .LVU375
 160:src/storage.c **** 
 1271              		.loc 1 160 2 view .LVU376
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1272              		.loc 1 162 2 view .LVU377
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1273              		.loc 1 162 15 view .LVU378
 1274              	.LBE61:
 1275              	.LBE60:
 1276              	.LBE59:
 1277              	.LBE58:
 216:src/storage.c **** 	return test_checksum( &BackupFlash, sizeof( BackupFlash ) - sizeof( short ),
 1278              		.loc 1 216 1 is_stmt 0 view .LVU379
 1279 0008 10B4     		push	{r4}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 4, -4
 1282              	.LBB66:
 1283              	.LBB64:
 1284              	.LBB63:
 1285              	.LBB62:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 1286              		.loc 1 158 21 view .LVU380
 1287 000a 45F6A523 		movw	r3, #23205
 1288 000e 01F2FE74 		addw	r4, r1, #2046
 1289              	.LVL139:
 1290              	.L106:
 163:src/storage.c **** 		crc ^= *d++;
 1291              		.loc 1 163 3 is_stmt 1 view .LVU381
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1292              		.loc 1 164 10 is_stmt 0 view .LVU382
 1293 0012 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 1294              	.LVL140:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1295              		.loc 1 164 10 view .LVU383
 1296 0016 5BBA     		rev16	r3, r3
 1297              	.LVL141:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1298              		.loc 1 164 10 view .LVU384
 1299 0018 9BB2     		uxth	r3, r3
 1300              	.LVL142:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1301              		.loc 1 164 3 is_stmt 1 view .LVU385
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 1302              		.loc 1 164 7 is_stmt 0 view .LVU386
 1303 001a 5340     		eors	r3, r3, r2
 1304              	.LVL143:
 165:src/storage.c **** 		crc ^= crc << 12;
 1305              		.loc 1 165 3 is_stmt 1 view .LVU387
 165:src/storage.c **** 		crc ^= crc << 12;
ARM GAS  /tmp/ccwuxJEt.s 			page 51


 1306              		.loc 1 165 7 is_stmt 0 view .LVU388
 1307 001c C3F30312 		ubfx	r2, r3, #4, #4
 1308 0020 5340     		eors	r3, r3, r2
 1309              	.LVL144:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1310              		.loc 1 166 3 is_stmt 1 view .LVU389
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 1311              		.loc 1 166 7 is_stmt 0 view .LVU390
 1312 0022 83EA0333 		eor	r3, r3, r3, lsl #12
 1313              	.LVL145:
 167:src/storage.c **** 	}
 1314              		.loc 1 167 3 is_stmt 1 view .LVU391
 167:src/storage.c **** 	}
 1315              		.loc 1 167 25 is_stmt 0 view .LVU392
 1316 0026 5A01     		lsls	r2, r3, #5
 1317 0028 02F4FF52 		and	r2, r2, #8160
 167:src/storage.c **** 	}
 1318              		.loc 1 167 7 view .LVU393
 1319 002c 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1320              		.loc 1 162 2 view .LVU394
 1321 002e 8C42     		cmp	r4, r1
 167:src/storage.c **** 	}
 1322              		.loc 1 167 7 view .LVU395
 1323 0030 83EA0203 		eor	r3, r3, r2
 1324              	.LVL146:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1325              		.loc 1 162 27 is_stmt 1 view .LVU396
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1326              		.loc 1 162 15 view .LVU397
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 1327              		.loc 1 162 2 is_stmt 0 view .LVU398
 1328 0034 EDD1     		bne	.L106
 169:src/storage.c **** }
 1329              		.loc 1 169 2 is_stmt 1 view .LVU399
 1330              	.LVL147:
 169:src/storage.c **** }
 1331              		.loc 1 169 2 is_stmt 0 view .LVU400
 1332              	.LBE62:
 1333              	.LBE63:
 182:src/storage.c **** 		*pcrc = crc;
 1334              		.loc 1 182 2 is_stmt 1 view .LVU401
 185:src/storage.c **** }
 1335              		.loc 1 185 2 view .LVU402
 185:src/storage.c **** }
 1336              		.loc 1 185 23 is_stmt 0 view .LVU403
 1337 0036 9842     		cmp	r0, r3
 1338 0038 07D0     		beq	.L108
 1339 003a 4AF23C53 		movw	r3, #42300
 1340              	.LVL148:
 185:src/storage.c **** }
 1341              		.loc 1 185 23 view .LVU404
 1342 003e C01A     		subs	r0, r0, r3
 1343              	.LVL149:
 185:src/storage.c **** }
 1344              		.loc 1 185 23 view .LVU405
 1345 0040 18BF     		it	ne
ARM GAS  /tmp/ccwuxJEt.s 			page 52


 1346 0042 0120     		movne	r0, #1
 1347              	.LVL150:
 185:src/storage.c **** }
 1348              		.loc 1 185 23 view .LVU406
 1349              	.LBE64:
 1350              	.LBE66:
 219:src/storage.c **** 
 1351              		.loc 1 219 1 view .LVU407
 1352 0044 5DF8044B 		ldr	r4, [sp], #4
 1353              		.cfi_remember_state
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL151:
 219:src/storage.c **** 
 1357              		.loc 1 219 1 view .LVU408
 1358 0048 7047     		bx	lr
 1359              	.LVL152:
 1360              	.L108:
 1361              		.cfi_restore_state
 1362              	.LBB67:
 1363              	.LBB65:
 185:src/storage.c **** }
 1364              		.loc 1 185 23 view .LVU409
 1365 004a 0020     		movs	r0, #0
 1366              	.LVL153:
 185:src/storage.c **** }
 1367              		.loc 1 185 23 view .LVU410
 1368              	.LBE65:
 1369              	.LBE67:
 219:src/storage.c **** 
 1370              		.loc 1 219 1 view .LVU411
 1371 004c 5DF8044B 		ldr	r4, [sp], #4
 1372              		.cfi_restore 4
 1373              		.cfi_def_cfa_offset 0
 1374 0050 7047     		bx	lr
 1375              	.L112:
 1376 0052 00BF     		.align	2
 1377              	.L111:
 1378 0054 00000000 		.word	backup_ram
 1379              		.cfi_endproc
 1380              	.LFE8:
 1382              		.section	.text.clpall,"ax",%progbits
 1383              		.align	1
 1384              		.p2align 2,,3
 1385              		.global	clpall
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	clpall:
 1392              	.LFB11:
 248:src/storage.c **** 	clrretstk_pc();
 1393              		.loc 1 248 1 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 249:src/storage.c **** 	stoend();
ARM GAS  /tmp/ccwuxJEt.s 			page 53


 1397              		.loc 1 249 2 view .LVU413
 248:src/storage.c **** 	clrretstk_pc();
 1398              		.loc 1 248 1 is_stmt 0 view .LVU414
 1399 0000 08B5     		push	{r3, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 3, -8
 1402              		.cfi_offset 14, -4
 249:src/storage.c **** 	stoend();
 1403              		.loc 1 249 2 view .LVU415
 1404 0002 FFF7FEFF 		bl	clrretstk_pc
 1405              	.LVL154:
 250:src/storage.c **** }
 1406              		.loc 1 250 2 is_stmt 1 view .LVU416
 1407              	.LBB68:
 1408              	.LBI68:
 237:src/storage.c **** {
 1409              		.loc 1 237 13 view .LVU417
 1410              	.LBB69:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1411              		.loc 1 239 2 view .LVU418
 1412 0006 044B     		ldr	r3, .L115
 1413 0008 1B68     		ldr	r3, [r3]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1414              		.loc 1 239 11 is_stmt 0 view .LVU419
 1415 000a 0121     		movs	r1, #1
 240:src/storage.c **** }
 1416              		.loc 1 240 12 view .LVU420
 1417 000c 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1418              		.loc 1 239 11 view .LVU421
 1419 0010 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1420              		.loc 1 240 2 is_stmt 1 view .LVU422
 240:src/storage.c **** }
 1421              		.loc 1 240 12 is_stmt 0 view .LVU423
 1422 0012 9A80     		strh	r2, [r3, #4]	@ movhi
 1423              	.LBE69:
 1424              	.LBE68:
 251:src/storage.c **** 
 1425              		.loc 1 251 1 view .LVU424
 1426 0014 08BD     		pop	{r3, pc}
 1427              	.L116:
 1428 0016 00BF     		.align	2
 1429              	.L115:
 1430 0018 00000000 		.word	main_ram
 1431              		.cfi_endproc
 1432              	.LFE11:
 1434              		.section	.text.clrall,"ax",%progbits
 1435              		.align	1
 1436              		.p2align 2,,3
 1437              		.global	clrall
 1438              		.syntax unified
 1439              		.thumb
 1440              		.thumb_func
 1441              		.fpu fpv4-sp-d16
 1443              	clrall:
 1444              	.LFB14:
ARM GAS  /tmp/ccwuxJEt.s 			page 54


 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1445              		.loc 1 301 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 302:src/storage.c **** 	xeq_init_contexts();
 1449              		.loc 1 302 2 view .LVU426
 301:src/storage.c **** 	NumRegs = TOPREALREG;
 1450              		.loc 1 301 1 is_stmt 0 view .LVU427
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 302:src/storage.c **** 	xeq_init_contexts();
 1455              		.loc 1 302 10 view .LVU428
 1456 0002 124C     		ldr	r4, .L119
 1457 0004 2368     		ldr	r3, [r4]
 1458 0006 6422     		movs	r2, #100
 1459 0008 83F8CF27 		strb	r2, [r3, #1999]
 303:src/storage.c **** 	clrreg( OP_CLREG );
 1460              		.loc 1 303 2 is_stmt 1 view .LVU429
 1461 000c FFF7FEFF 		bl	xeq_init_contexts
 1462              	.LVL155:
 304:src/storage.c **** 	clrstk( OP_CLSTK );
 1463              		.loc 1 304 2 view .LVU430
 1464 0010 3E20     		movs	r0, #62
 1465 0012 FFF7FEFF 		bl	clrreg
 1466              	.LVL156:
 305:src/storage.c **** 	clralpha( OP_CLRALPHA );
 1467              		.loc 1 305 2 view .LVU431
 1468 0016 4020     		movs	r0, #64
 1469 0018 FFF7FEFF 		bl	clrstk
 1470              	.LVL157:
 306:src/storage.c **** 	clrflags( OP_CLFLAGS );
 1471              		.loc 1 306 2 view .LVU432
 1472 001c 7420     		movs	r0, #116
 1473 001e FFF7FEFF 		bl	clralpha
 1474              	.LVL158:
 307:src/storage.c **** 	clpall();
 1475              		.loc 1 307 2 view .LVU433
 1476 0022 4520     		movs	r0, #69
 1477 0024 FFF7FEFF 		bl	clrflags
 1478              	.LVL159:
 308:src/storage.c **** 
 1479              		.loc 1 308 2 view .LVU434
 1480              	.LBB70:
 1481              	.LBI70:
 247:src/storage.c **** {
 1482              		.loc 1 247 6 view .LVU435
 1483              	.LBB71:
 249:src/storage.c **** 	stoend();
 1484              		.loc 1 249 2 view .LVU436
 1485 0028 FFF7FEFF 		bl	clrretstk_pc
 1486              	.LVL160:
 250:src/storage.c **** }
 1487              		.loc 1 250 2 view .LVU437
 1488              	.LBB72:
ARM GAS  /tmp/ccwuxJEt.s 			page 55


 1489              	.LBI72:
 237:src/storage.c **** {
 1490              		.loc 1 237 13 view .LVU438
 1491              	.LBB73:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1492              		.loc 1 239 2 view .LVU439
 1493 002c 2368     		ldr	r3, [r4]
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1494              		.loc 1 239 11 is_stmt 0 view .LVU440
 1495 002e 0121     		movs	r1, #1
 240:src/storage.c **** }
 1496              		.loc 1 240 12 view .LVU441
 1497 0030 4FF49D72 		mov	r2, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 1498              		.loc 1 239 11 view .LVU442
 1499 0034 5980     		strh	r1, [r3, #2]	@ movhi
 240:src/storage.c **** }
 1500              		.loc 1 240 2 is_stmt 1 view .LVU443
 240:src/storage.c **** }
 1501              		.loc 1 240 12 is_stmt 0 view .LVU444
 1502 0036 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.LBE73:
 1504              	.LBE72:
 1505              	.LBE71:
 1506              	.LBE70:
 310:src/storage.c **** 	State2.test = TST_NONE;
 1507              		.loc 1 310 2 is_stmt 1 view .LVU445
 1508 0038 FFF7FEFF 		bl	reset_shift
 1509              	.LVL161:
 311:src/storage.c **** 
 1510              		.loc 1 311 2 view .LVU446
 311:src/storage.c **** 
 1511              		.loc 1 311 14 is_stmt 0 view .LVU447
 1512 003c 0449     		ldr	r1, .L119+4
 313:src/storage.c **** }
 1513              		.loc 1 313 10 view .LVU448
 1514 003e 054B     		ldr	r3, .L119+8
 311:src/storage.c **** 
 1515              		.loc 1 311 14 view .LVU449
 1516 0040 0720     		movs	r0, #7
 313:src/storage.c **** }
 1517              		.loc 1 313 10 view .LVU450
 1518 0042 0022     		movs	r2, #0
 311:src/storage.c **** 
 1519              		.loc 1 311 14 view .LVU451
 1520 0044 C873     		strb	r0, [r1, #15]
 313:src/storage.c **** }
 1521              		.loc 1 313 2 is_stmt 1 view .LVU452
 313:src/storage.c **** }
 1522              		.loc 1 313 10 is_stmt 0 view .LVU453
 1523 0046 1A60     		str	r2, [r3]
 314:src/storage.c **** 
 1524              		.loc 1 314 1 view .LVU454
 1525 0048 10BD     		pop	{r4, pc}
 1526              	.L120:
 1527 004a 00BF     		.align	2
 1528              	.L119:
ARM GAS  /tmp/ccwuxJEt.s 			page 56


 1529 004c 00000000 		.word	main_ram
 1530 0050 00000000 		.word	StateWhileOn
 1531 0054 00000000 		.word	DispMsg
 1532              		.cfi_endproc
 1533              	.LFE14:
 1535              		.section	.rodata.reset.str1.4,"aMS",%progbits,1
 1536              		.align	2
 1537              	.LC6:
 1538 0000 45726173 		.ascii	"Erased\000"
 1538      656400
 1539              		.section	.text.reset,"ax",%progbits
 1540              		.align	1
 1541              		.p2align 2,,3
 1542              		.global	reset
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	reset:
 1549              	.LFB15:
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1550              		.loc 1 321 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 322:src/storage.c **** 	clrall();
 1554              		.loc 1 322 3 view .LVU456
 321:src/storage.c ****   xset( &PersistentRam, 0, sizeof( PersistentRam ) );
 1555              		.loc 1 321 1 is_stmt 0 view .LVU457
 1556 0000 08B5     		push	{r3, lr}
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 3, -8
 1559              		.cfi_offset 14, -4
 322:src/storage.c **** 	clrall();
 1560              		.loc 1 322 3 view .LVU458
 1561 0002 094B     		ldr	r3, .L123
 1562 0004 4FF40062 		mov	r2, #2048
 1563 0008 1868     		ldr	r0, [r3]
 1564 000a 0021     		movs	r1, #0
 1565 000c FFF7FEFF 		bl	xset
 1566              	.LVL162:
 323:src/storage.c **** 	init_state();
 1567              		.loc 1 323 2 is_stmt 1 view .LVU459
 1568 0010 FFF7FEFF 		bl	clrall
 1569              	.LVL163:
 324:src/storage.c **** #ifndef DM42
 1570              		.loc 1 324 2 view .LVU460
 1571 0014 FFF7FEFF 		bl	init_state
 1572              	.LVL164:
 330:src/storage.c **** #else
 1573              		.loc 1 330 2 view .LVU461
 1574 0018 044B     		ldr	r3, .L123+4
 1575 001a 4FF4E160 		mov	r0, #1800
 1576 001e 9847     		blx	r3
 1577              	.LVL165:
 335:src/storage.c **** }
 1578              		.loc 1 335 2 view .LVU462
ARM GAS  /tmp/ccwuxJEt.s 			page 57


 335:src/storage.c **** }
 1579              		.loc 1 335 10 is_stmt 0 view .LVU463
 1580 0020 034B     		ldr	r3, .L123+8
 1581 0022 044A     		ldr	r2, .L123+12
 1582 0024 1A60     		str	r2, [r3]
 336:src/storage.c **** 
 1583              		.loc 1 336 1 view .LVU464
 1584 0026 08BD     		pop	{r3, pc}
 1585              	.L124:
 1586              		.align	2
 1587              	.L123:
 1588 0028 00000000 		.word	main_ram
 1589 002c 35030008 		.word	134218549
 1590 0030 00000000 		.word	DispMsg
 1591 0034 00000000 		.word	.LC6
 1592              		.cfi_endproc
 1593              	.LFE15:
 1595              		.section	.text.stoprog,"ax",%progbits
 1596              		.align	1
 1597              		.p2align 2,,3
 1598              		.global	stoprog
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv4-sp-d16
 1604              	stoprog:
 1605              	.LVL166:
 1606              	.LFB16:
 342:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1607              		.loc 1 342 26 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 343:src/storage.c **** 	int i;
 1611              		.loc 1 343 2 view .LVU466
 342:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1612              		.loc 1 342 26 is_stmt 0 view .LVU467
 1613 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1614              		.cfi_def_cfa_offset 32
 1615              		.cfi_offset 3, -32
 1616              		.cfi_offset 4, -28
 1617              		.cfi_offset 5, -24
 1618              		.cfi_offset 6, -20
 1619              		.cfi_offset 7, -16
 1620              		.cfi_offset 8, -12
 1621              		.cfi_offset 9, -8
 1622              		.cfi_offset 14, -4
 345:src/storage.c **** 
 1623              		.loc 1 345 20 view .LVU468
 1624 0004 374F     		ldr	r7, .L145
 343:src/storage.c **** 	int i;
 1625              		.loc 1 343 18 view .LVU469
 1626 0006 00F47046 		and	r6, r0, #61440
 345:src/storage.c **** 
 1627              		.loc 1 345 20 view .LVU470
 1628 000a 3B68     		ldr	r3, [r7]
 343:src/storage.c **** 	int i;
ARM GAS  /tmp/ccwuxJEt.s 			page 58


 1629              		.loc 1 343 33 view .LVU471
 1630 000c B6F5704F 		cmp	r6, #61440
 345:src/storage.c **** 
 1631              		.loc 1 345 20 view .LVU472
 1632 0010 B3F8E057 		ldrh	r5, [r3, #2016]
 1633              	.LVL167:
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1634              		.loc 1 347 2 is_stmt 1 view .LVU473
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1635              		.loc 1 347 5 is_stmt 0 view .LVU474
 1636 0014 5B88     		ldrh	r3, [r3, #2]
 342:src/storage.c **** 	const int off = isDBL( c ) ? 2 : 1;
 1637              		.loc 1 342 26 view .LVU475
 1638 0016 0446     		mov	r4, r0
 343:src/storage.c **** 	int i;
 1639              		.loc 1 343 33 view .LVU476
 1640 0018 57D0     		beq	.L126
 1641              	.LVL168:
 344:src/storage.c **** 	unsigned int pc = state_pc();
 1642              		.loc 1 344 2 is_stmt 1 discriminator 4 view .LVU477
 345:src/storage.c **** 
 1643              		.loc 1 345 2 discriminator 4 view .LVU478
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1644              		.loc 1 347 5 is_stmt 0 discriminator 4 view .LVU479
 1645 001a AB42     		cmp	r3, r5
 343:src/storage.c **** 	int i;
 1646              		.loc 1 343 33 discriminator 4 view .LVU480
 1647 001c 4FF00108 		mov	r8, #1
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1648              		.loc 1 347 5 discriminator 4 view .LVU481
 1649 0020 44D0     		beq	.L141
 1650              	.LVL169:
 1651              	.L127:
 350:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1652              		.loc 1 350 2 is_stmt 1 view .LVU482
 350:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1653              		.loc 1 350 5 is_stmt 0 view .LVU483
 1654 0022 15F47049 		ands	r9, r5, #61440
 1655 0026 4BD1     		bne	.L142
 1656              	.LVL170:
 1657              	.L128:
 354:src/storage.c **** 	xeq_init_contexts();
 1658              		.loc 1 354 2 is_stmt 1 view .LVU484
 1659 0028 FFF7FEFF 		bl	clrretstk
 1660              	.LVL171:
 355:src/storage.c **** 	if ( ProgFree < off ) {
 1661              		.loc 1 355 2 view .LVU485
 1662 002c FFF7FEFF 		bl	xeq_init_contexts
 1663              	.LVL172:
 356:src/storage.c **** 		return;
 1664              		.loc 1 356 2 view .LVU486
 356:src/storage.c **** 		return;
 1665              		.loc 1 356 16 is_stmt 0 view .LVU487
 1666 0030 2D4B     		ldr	r3, .L145+4
 356:src/storage.c **** 		return;
 1667              		.loc 1 356 5 view .LVU488
 1668 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccwuxJEt.s 			page 59


 1669 0034 4345     		cmp	r3, r8
 1670 0036 01DA     		bge	.L143
 369:src/storage.c **** 
 1671              		.loc 1 369 1 view .LVU489
 1672 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1673              	.LVL173:
 1674              	.L143:
 359:src/storage.c **** 	ProgEnd += off;
 1675              		.loc 1 359 2 is_stmt 1 view .LVU490
 359:src/storage.c **** 	ProgEnd += off;
 1676              		.loc 1 359 11 is_stmt 0 view .LVU491
 1677 003c 3B68     		ldr	r3, [r7]
 1678 003e B3F802C0 		ldrh	ip, [r3, #2]
 360:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1679              		.loc 1 360 10 view .LVU492
 1680 0042 B3F8EE27 		ldrh	r2, [r3, #2030]
 359:src/storage.c **** 	ProgEnd += off;
 1681              		.loc 1 359 11 view .LVU493
 1682 0046 C444     		add	ip, ip, r8
 360:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1683              		.loc 1 360 10 view .LVU494
 1684 0048 4244     		add	r2, r2, r8
 359:src/storage.c **** 	ProgEnd += off;
 1685              		.loc 1 359 11 view .LVU495
 1686 004a A3F802C0 		strh	ip, [r3, #2]	@ movhi
 360:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1687              		.loc 1 360 2 is_stmt 1 view .LVU496
 360:src/storage.c **** 	pc = do_inc( pc, 0 );	// Don't wrap on END
 1688              		.loc 1 360 10 is_stmt 0 view .LVU497
 1689 004e A3F8EE27 		strh	r2, [r3, #2030]	@ movhi
 361:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1690              		.loc 1 361 2 is_stmt 1 view .LVU498
 361:src/storage.c **** 	for ( i = ProgSize + 1; i > (int) pc; --i ) {
 1691              		.loc 1 361 7 is_stmt 0 view .LVU499
 1692 0052 4946     		mov	r1, r9
 1693 0054 2846     		mov	r0, r5
 1694 0056 FFF7FEFF 		bl	do_inc
 1695              	.LVL174:
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1696              		.loc 1 362 12 view .LVU500
 1697 005a D7F800C0 		ldr	ip, [r7]
 1698 005e BCF80230 		ldrh	r3, [ip, #2]
 1699              	.LVL175:
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1700              		.loc 1 362 2 is_stmt 1 view .LVU501
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1701              		.loc 1 362 10 is_stmt 0 view .LVU502
 1702 0062 5A1C     		adds	r2, r3, #1
 1703              	.LVL176:
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1704              		.loc 1 362 26 is_stmt 1 view .LVU503
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1705              		.loc 1 362 2 is_stmt 0 view .LVU504
 1706 0064 8242     		cmp	r2, r0
 1707 0066 39DD     		ble	.L130
 1708 0068 03F10043 		add	r3, r3, #-2147483648
 1709 006c 0CF10407 		add	r7, ip, #4
ARM GAS  /tmp/ccwuxJEt.s 			page 60


 1710 0070 0133     		adds	r3, r3, #1
 1711 0072 A2EB0802 		sub	r2, r2, r8
 1712              	.LVL177:
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1713              		.loc 1 362 2 view .LVU505
 1714 0076 07EB4303 		add	r3, r7, r3, lsl #1
 1715              	.LVL178:
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1716              		.loc 1 362 2 view .LVU506
 1717 007a 07EB4202 		add	r2, r7, r2, lsl #1
 1718 007e 07EB4005 		add	r5, r7, r0, lsl #1
 1719              	.LVL179:
 1720              	.L131:
 363:src/storage.c **** 	}
 1721              		.loc 1 363 3 is_stmt 1 discriminator 3 view .LVU507
 363:src/storage.c **** 	}
 1722              		.loc 1 363 23 is_stmt 0 discriminator 3 view .LVU508
 1723 0082 32F8021D 		ldrh	r1, [r2, #-2]!
 363:src/storage.c **** 	}
 1724              		.loc 1 363 15 discriminator 3 view .LVU509
 1725 0086 23F8021D 		strh	r1, [r3, #-2]!	@ movhi
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1726              		.loc 1 362 40 is_stmt 1 discriminator 3 view .LVU510
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1727              		.loc 1 362 26 discriminator 3 view .LVU511
 362:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i - off ];
 1728              		.loc 1 362 2 is_stmt 0 discriminator 3 view .LVU512
 1729 008a AB42     		cmp	r3, r5
 1730 008c F9D1     		bne	.L131
 1731              	.L132:
 365:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1732              		.loc 1 365 2 is_stmt 1 view .LVU513
 365:src/storage.c **** 		Prog_1[pc + 1] = c >> 16;
 1733              		.loc 1 365 5 is_stmt 0 view .LVU514
 1734 008e B6F5704F 		cmp	r6, #61440
 366:src/storage.c **** 	Prog_1[pc] = c;
 1735              		.loc 1 366 3 is_stmt 1 view .LVU515
 367:src/storage.c **** 	State.pc = pc;
 1736              		.loc 1 367 2 view .LVU516
 366:src/storage.c **** 	Prog_1[pc] = c;
 1737              		.loc 1 366 22 is_stmt 0 view .LVU517
 1738 0092 04BF     		itt	eq
 1739 0094 230C     		lsreq	r3, r4, #16
 366:src/storage.c **** 	Prog_1[pc] = c;
 1740              		.loc 1 366 18 view .LVU518
 1741 0096 27F81030 		strheq	r3, [r7, r0, lsl #1]	@ movhi
 367:src/storage.c **** 	State.pc = pc;
 1742              		.loc 1 367 8 view .LVU519
 1743 009a 00F10043 		add	r3, r0, #-2147483648
 1744 009e 013B     		subs	r3, r3, #1
 367:src/storage.c **** 	State.pc = pc;
 1745              		.loc 1 367 13 view .LVU520
 1746 00a0 27F81340 		strh	r4, [r7, r3, lsl #1]	@ movhi
 368:src/storage.c **** }
 1747              		.loc 1 368 2 is_stmt 1 view .LVU521
 368:src/storage.c **** }
 1748              		.loc 1 368 11 is_stmt 0 view .LVU522
ARM GAS  /tmp/ccwuxJEt.s 			page 61


 1749 00a4 ACF8E007 		strh	r0, [ip, #2016]	@ movhi
 369:src/storage.c **** 
 1750              		.loc 1 369 1 view .LVU523
 1751 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1752              	.LVL180:
 1753              	.L141:
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1754              		.loc 1 347 22 discriminator 1 view .LVU524
 1755 00ac B0F59D7F 		cmp	r0, #314
 1756 00b0 B7D0     		beq	.L127
 348:src/storage.c **** 
 1757              		.loc 1 348 3 is_stmt 1 view .LVU525
 1758 00b2 4FF49D70 		mov	r0, #314
 1759              	.LVL181:
 348:src/storage.c **** 
 1760              		.loc 1 348 3 is_stmt 0 view .LVU526
 1761 00b6 FFF7FEFF 		bl	stoprog
 1762              	.LVL182:
 1763              	.L144:
 350:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1764              		.loc 1 350 2 is_stmt 1 view .LVU527
 350:src/storage.c **** 		report_warn( ERR_READ_ONLY );
 1765              		.loc 1 350 5 is_stmt 0 view .LVU528
 1766 00ba 15F47049 		ands	r9, r5, #61440
 1767 00be B3D0     		beq	.L128
 1768              	.L142:
 351:src/storage.c **** 		return;
 1769              		.loc 1 351 3 is_stmt 1 view .LVU529
 369:src/storage.c **** 
 1770              		.loc 1 369 1 is_stmt 0 view .LVU530
 1771 00c0 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 1772              		.cfi_remember_state
 1773              		.cfi_restore 14
 1774              		.cfi_restore 9
 1775              		.cfi_restore 8
 1776              		.cfi_restore 7
 1777              		.cfi_restore 6
 1778              		.cfi_restore 5
 1779              		.cfi_restore 4
 1780              		.cfi_restore 3
 1781              		.cfi_def_cfa_offset 0
 1782              	.LVL183:
 351:src/storage.c **** 		return;
 1783              		.loc 1 351 3 view .LVU531
 1784 00c4 1320     		movs	r0, #19
 1785 00c6 FFF7FEBF 		b	report_warn
 1786              	.LVL184:
 1787              	.L126:
 1788              		.cfi_restore_state
 344:src/storage.c **** 	unsigned int pc = state_pc();
 1789              		.loc 1 344 2 is_stmt 1 view .LVU532
 345:src/storage.c **** 
 1790              		.loc 1 345 2 view .LVU533
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1791              		.loc 1 347 5 is_stmt 0 view .LVU534
 1792 00ca AB42     		cmp	r3, r5
 343:src/storage.c **** 	int i;
ARM GAS  /tmp/ccwuxJEt.s 			page 62


 1793              		.loc 1 343 33 view .LVU535
 1794 00cc 4FF00208 		mov	r8, #2
 347:src/storage.c **** 		stoprog( OP_NIL | OP_END );
 1795              		.loc 1 347 5 view .LVU536
 1796 00d0 A7D1     		bne	.L127
 348:src/storage.c **** 
 1797              		.loc 1 348 3 is_stmt 1 view .LVU537
 1798 00d2 4FF49D70 		mov	r0, #314
 1799              	.LVL185:
 348:src/storage.c **** 
 1800              		.loc 1 348 3 is_stmt 0 view .LVU538
 1801 00d6 FFF7FEFF 		bl	stoprog
 1802              	.LVL186:
 1803 00da EEE7     		b	.L144
 1804              	.LVL187:
 1805              	.L130:
 348:src/storage.c **** 
 1806              		.loc 1 348 3 view .LVU539
 1807 00dc 0CF10407 		add	r7, ip, #4
 1808 00e0 D5E7     		b	.L132
 1809              	.L146:
 1810 00e2 00BF     		.align	2
 1811              	.L145:
 1812 00e4 00000000 		.word	main_ram
 1813 00e8 00000000 		.word	ProgFree
 1814              		.cfi_endproc
 1815              	.LFE16:
 1817              		.section	.text.delprog,"ax",%progbits
 1818              		.align	1
 1819              		.p2align 2,,3
 1820              		.global	delprog
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1824              		.fpu fpv4-sp-d16
 1826              	delprog:
 1827              	.LFB17:
 376:src/storage.c **** 	int i;
 1828              		.loc 1 376 1 is_stmt 1 view -0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
 377:src/storage.c **** 	const unsigned int pc = state_pc();
 1832              		.loc 1 377 2 view .LVU541
 378:src/storage.c **** 	int off;
 1833              		.loc 1 378 2 view .LVU542
 376:src/storage.c **** 	int i;
 1834              		.loc 1 376 1 is_stmt 0 view .LVU543
 1835 0000 70B5     		push	{r4, r5, r6, lr}
 1836              		.cfi_def_cfa_offset 16
 1837              		.cfi_offset 4, -16
 1838              		.cfi_offset 5, -12
 1839              		.cfi_offset 6, -8
 1840              		.cfi_offset 14, -4
 378:src/storage.c **** 	int off;
 1841              		.loc 1 378 26 view .LVU544
 1842 0002 194D     		ldr	r5, .L159
ARM GAS  /tmp/ccwuxJEt.s 			page 63


 1843 0004 2B68     		ldr	r3, [r5]
 1844 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 1845              	.LVL188:
 379:src/storage.c **** 
 1846              		.loc 1 379 2 is_stmt 1 view .LVU545
 381:src/storage.c **** 		return;
 1847              		.loc 1 381 2 view .LVU546
 381:src/storage.c **** 		return;
 1848              		.loc 1 381 7 is_stmt 0 view .LVU547
 1849 000a 2046     		mov	r0, r4
 1850 000c FFF7FEFF 		bl	check_delete_prog
 1851              	.LVL189:
 381:src/storage.c **** 		return;
 1852              		.loc 1 381 5 view .LVU548
 1853 0010 48BB     		cbnz	r0, .L147
 383:src/storage.c **** 		return;
 1854              		.loc 1 383 2 is_stmt 1 view .LVU549
 383:src/storage.c **** 		return;
 1855              		.loc 1 383 5 is_stmt 0 view .LVU550
 1856 0012 44B3     		cbz	r4, .L147
 386:src/storage.c **** 	ProgSize -= off;
 1857              		.loc 1 386 2 is_stmt 1 view .LVU551
 386:src/storage.c **** 	ProgSize -= off;
 1858              		.loc 1 386 8 is_stmt 0 view .LVU552
 1859 0014 2D68     		ldr	r5, [r5]
 1860 0016 05EB4403 		add	r3, r5, r4, lsl #1
 387:src/storage.c **** 	ProgEnd -= off;
 1861              		.loc 1 387 11 view .LVU553
 1862 001a 6A88     		ldrh	r2, [r5, #2]
 386:src/storage.c **** 	ProgSize -= off;
 1863              		.loc 1 386 33 view .LVU554
 1864 001c 5B88     		ldrh	r3, [r3, #2]
 388:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1865              		.loc 1 388 10 view .LVU555
 1866 001e B5F8EE17 		ldrh	r1, [r5, #2030]
 386:src/storage.c **** 	ProgSize -= off;
 1867              		.loc 1 386 33 view .LVU556
 1868 0022 03F47043 		and	r3, r3, #61440
 1869 0026 B3F5704F 		cmp	r3, #61440
 1870 002a 14BF     		ite	ne
 1871 002c 0126     		movne	r6, #1
 1872 002e 0226     		moveq	r6, #2
 387:src/storage.c **** 	ProgEnd -= off;
 1873              		.loc 1 387 11 view .LVU557
 1874 0030 921B     		subs	r2, r2, r6
 1875 0032 92B2     		uxth	r2, r2
 388:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1876              		.loc 1 388 10 view .LVU558
 1877 0034 891B     		subs	r1, r1, r6
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1878              		.loc 1 389 2 view .LVU559
 1879 0036 9442     		cmp	r4, r2
 386:src/storage.c **** 	ProgSize -= off;
 1880              		.loc 1 386 33 view .LVU560
 1881 0038 3346     		mov	r3, r6
 1882              	.LVL190:
 387:src/storage.c **** 	ProgEnd -= off;
ARM GAS  /tmp/ccwuxJEt.s 			page 64


 1883              		.loc 1 387 2 is_stmt 1 view .LVU561
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1884              		.loc 1 389 10 is_stmt 0 view .LVU562
 1885 003a 2046     		mov	r0, r4
 387:src/storage.c **** 	ProgEnd -= off;
 1886              		.loc 1 387 11 view .LVU563
 1887 003c 6A80     		strh	r2, [r5, #2]	@ movhi
 388:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1888              		.loc 1 388 2 is_stmt 1 view .LVU564
 388:src/storage.c **** 	for ( i = pc; i <= (int) ProgSize; ++i )
 1889              		.loc 1 388 10 is_stmt 0 view .LVU565
 1890 003e A5F8EE17 		strh	r1, [r5, #2030]	@ movhi
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1891              		.loc 1 389 2 is_stmt 1 view .LVU566
 1892              	.LVL191:
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1893              		.loc 1 389 16 view .LVU567
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1894              		.loc 1 389 2 is_stmt 0 view .LVU568
 1895 0042 0CDC     		bgt	.L152
 1896 0044 2344     		add	r3, r3, r4
 1897              	.LVL192:
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1898              		.loc 1 389 2 view .LVU569
 1899 0046 05EB4303 		add	r3, r5, r3, lsl #1
 1900 004a 05EB4402 		add	r2, r5, r4, lsl #1
 1901              	.LVL193:
 1902              	.L151:
 390:src/storage.c **** 	decpc();
 1903              		.loc 1 390 3 is_stmt 1 discriminator 3 view .LVU570
 390:src/storage.c **** 	decpc();
 1904              		.loc 1 390 23 is_stmt 0 discriminator 3 view .LVU571
 1905 004e 33F8021F 		ldrh	r1, [r3, #2]!
 390:src/storage.c **** 	decpc();
 1906              		.loc 1 390 15 discriminator 3 view .LVU572
 1907 0052 22F8021F 		strh	r1, [r2, #2]!	@ movhi
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1908              		.loc 1 389 37 is_stmt 1 discriminator 3 view .LVU573
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1909              		.loc 1 389 21 is_stmt 0 discriminator 3 view .LVU574
 1910 0056 6988     		ldrh	r1, [r5, #2]
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1911              		.loc 1 389 37 discriminator 3 view .LVU575
 1912 0058 0130     		adds	r0, r0, #1
 1913              	.LVL194:
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1914              		.loc 1 389 16 is_stmt 1 discriminator 3 view .LVU576
 389:src/storage.c **** 		Prog_1[ i ] = Prog_1[ i + off ];
 1915              		.loc 1 389 2 is_stmt 0 discriminator 3 view .LVU577
 1916 005a 8142     		cmp	r1, r0
 1917 005c F7DA     		bge	.L151
 1918              	.L152:
 391:src/storage.c **** }
 1919              		.loc 1 391 2 is_stmt 1 view .LVU578
 392:src/storage.c **** 
 1920              		.loc 1 392 1 is_stmt 0 view .LVU579
 1921 005e BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/ccwuxJEt.s 			page 65


 1922              		.cfi_remember_state
 1923              		.cfi_restore 14
 1924              		.cfi_restore 6
 1925              		.cfi_restore 5
 1926              		.cfi_restore 4
 1927              		.cfi_def_cfa_offset 0
 1928              	.LVL195:
 391:src/storage.c **** }
 1929              		.loc 1 391 2 view .LVU580
 1930 0062 FFF7FEBF 		b	decpc
 1931              	.LVL196:
 1932              	.L147:
 1933              		.cfi_restore_state
 392:src/storage.c **** 
 1934              		.loc 1 392 1 view .LVU581
 1935 0066 70BD     		pop	{r4, r5, r6, pc}
 1936              	.LVL197:
 1937              	.L160:
 392:src/storage.c **** 
 1938              		.loc 1 392 1 view .LVU582
 1939              		.align	2
 1940              	.L159:
 1941 0068 00000000 		.word	main_ram
 1942              		.cfi_endproc
 1943              	.LFE17:
 1945              		.section	.text.append_program,"ax",%progbits
 1946              		.align	1
 1947              		.p2align 2,,3
 1948              		.global	append_program
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu fpv4-sp-d16
 1954              	append_program:
 1955              	.LVL198:
 1956              	.LFB18:
 400:src/storage.c **** 	unsigned short pc;
 1957              		.loc 1 400 1 is_stmt 1 view -0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 401:src/storage.c **** 	int space_needed = length - ProgFree;
 1961              		.loc 1 401 2 view .LVU584
 402:src/storage.c **** 
 1962              		.loc 1 402 2 view .LVU585
 400:src/storage.c **** 	unsigned short pc;
 1963              		.loc 1 400 1 is_stmt 0 view .LVU586
 1964 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1965              		.cfi_def_cfa_offset 24
 1966              		.cfi_offset 4, -24
 1967              		.cfi_offset 5, -20
 1968              		.cfi_offset 6, -16
 1969              		.cfi_offset 7, -12
 1970              		.cfi_offset 8, -8
 1971              		.cfi_offset 14, -4
 404:src/storage.c **** 		/*
 1972              		.loc 1 404 7 view .LVU587
ARM GAS  /tmp/ccwuxJEt.s 			page 66


 1973 0004 DFF8C480 		ldr	r8, .L180+8
 402:src/storage.c **** 
 1974              		.loc 1 402 28 view .LVU588
 1975 0008 2E4A     		ldr	r2, .L180
 404:src/storage.c **** 		/*
 1976              		.loc 1 404 7 view .LVU589
 1977 000a D8F80030 		ldr	r3, [r8]
 402:src/storage.c **** 
 1978              		.loc 1 402 6 view .LVU590
 1979 000e 1568     		ldr	r5, [r2]
 404:src/storage.c **** 		/*
 1980              		.loc 1 404 7 view .LVU591
 1981 0010 5F88     		ldrh	r7, [r3, #2]
 404:src/storage.c **** 		/*
 1982              		.loc 1 404 5 view .LVU592
 1983 0012 012F     		cmp	r7, #1
 400:src/storage.c **** 	unsigned short pc;
 1984              		.loc 1 400 1 view .LVU593
 1985 0014 0C46     		mov	r4, r1
 1986 0016 0646     		mov	r6, r0
 402:src/storage.c **** 
 1987              		.loc 1 402 6 view .LVU594
 1988 0018 A1EB0505 		sub	r5, r1, r5
 1989              	.LVL199:
 404:src/storage.c **** 		/*
 1990              		.loc 1 404 2 is_stmt 1 view .LVU595
 404:src/storage.c **** 		/*
 1991              		.loc 1 404 5 is_stmt 0 view .LVU596
 1992 001c 0BD0     		beq	.L177
 411:src/storage.c **** 		return report_err( ERR_INVALID );
 1993              		.loc 1 411 2 is_stmt 1 view .LVU597
 411:src/storage.c **** 		return report_err( ERR_INVALID );
 1994              		.loc 1 411 5 is_stmt 0 view .LVU598
 1995 001e 40F29E33 		movw	r3, #926
 1996 0022 9942     		cmp	r1, r3
 1997 0024 39DC     		bgt	.L164
 414:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1998              		.loc 1 414 2 is_stmt 1 view .LVU599
 414:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 1999              		.loc 1 414 30 is_stmt 0 view .LVU600
 2000 0026 DB1B     		subs	r3, r3, r7
 414:src/storage.c **** 		return report_err( ERR_RAM_FULL );
 2001              		.loc 1 414 5 view .LVU601
 2002 0028 8B42     		cmp	r3, r1
 2003 002a 0CDA     		bge	.L163
 2004              	.LVL200:
 2005              	.L176:
 2006              	.LBB74:
 434:src/storage.c **** 		}
 2007              		.loc 1 434 4 is_stmt 1 view .LVU602
 2008              	.LBE74:
 446:src/storage.c **** 
 2009              		.loc 1 446 1 is_stmt 0 view .LVU603
 2010 002c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2011              		.cfi_remember_state
 2012              		.cfi_restore 14
 2013              		.cfi_restore 8
ARM GAS  /tmp/ccwuxJEt.s 			page 67


 2014              		.cfi_restore 7
 2015              		.cfi_restore 6
 2016              		.cfi_restore 5
 2017              		.cfi_restore 4
 2018              		.cfi_def_cfa_offset 0
 2019              	.LVL201:
 2020              	.LBB75:
 434:src/storage.c **** 		}
 2021              		.loc 1 434 11 view .LVU604
 2022 0030 0B20     		movs	r0, #11
 2023 0032 FFF7FEBF 		b	report_err
 2024              	.LVL202:
 2025              	.L177:
 2026              		.cfi_restore_state
 434:src/storage.c **** 		}
 2027              		.loc 1 434 11 view .LVU605
 2028              	.LBE75:
 408:src/storage.c **** 		--ProgSize;
 2029              		.loc 1 408 3 is_stmt 1 view .LVU606
 411:src/storage.c **** 		return report_err( ERR_INVALID );
 2030              		.loc 1 411 5 is_stmt 0 view .LVU607
 2031 0036 40F29E32 		movw	r2, #926
 409:src/storage.c **** 	}
 2032              		.loc 1 409 3 view .LVU608
 2033 003a 0021     		movs	r1, #0
 2034              	.LVL203:
 411:src/storage.c **** 		return report_err( ERR_INVALID );
 2035              		.loc 1 411 5 view .LVU609
 2036 003c 9442     		cmp	r4, r2
 408:src/storage.c **** 		--ProgSize;
 2037              		.loc 1 408 3 view .LVU610
 2038 003e 05F1FF35 		add	r5, r5, #-1
 2039              	.LVL204:
 409:src/storage.c **** 	}
 2040              		.loc 1 409 3 is_stmt 1 view .LVU611
 2041 0042 5980     		strh	r1, [r3, #2]	@ movhi
 411:src/storage.c **** 		return report_err( ERR_INVALID );
 2042              		.loc 1 411 2 view .LVU612
 411:src/storage.c **** 		return report_err( ERR_INVALID );
 2043              		.loc 1 411 5 is_stmt 0 view .LVU613
 2044 0044 29DC     		bgt	.L164
 2045              	.L163:
 421:src/storage.c **** 	if ( space_needed > 0 && SizeStatRegs != 0 ) {
 2046              		.loc 1 421 2 is_stmt 1 view .LVU614
 2047 0046 FFF7FEFF 		bl	clrretstk
 2048              	.LVL205:
 422:src/storage.c **** 		space_needed -= SizeStatRegs;
 2049              		.loc 1 422 2 view .LVU615
 422:src/storage.c **** 		space_needed -= SizeStatRegs;
 2050              		.loc 1 422 5 is_stmt 0 view .LVU616
 2051 004a 002D     		cmp	r5, #0
 2052 004c 11DD     		ble	.L166
 422:src/storage.c **** 		space_needed -= SizeStatRegs;
 2053              		.loc 1 422 40 discriminator 1 view .LVU617
 2054 004e 1E4B     		ldr	r3, .L180+4
 2055 0050 1B68     		ldr	r3, [r3]
 422:src/storage.c **** 		space_needed -= SizeStatRegs;
ARM GAS  /tmp/ccwuxJEt.s 			page 68


 2056              		.loc 1 422 24 discriminator 1 view .LVU618
 2057 0052 3BBB     		cbnz	r3, .L178
 2058              	.LBB76:
 427:src/storage.c **** 		if (is_dblmode())
 2059              		.loc 1 427 3 is_stmt 1 view .LVU619
 428:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2060              		.loc 1 428 3 view .LVU620
 428:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2061              		.loc 1 428 7 is_stmt 0 view .LVU621
 2062 0054 FFF7FEFF 		bl	is_dblmode
 2063              	.LVL206:
 428:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2064              		.loc 1 428 6 view .LVU622
 2065 0058 68BB     		cbnz	r0, .L179
 2066              	.L169:
 431:src/storage.c **** 
 2067              		.loc 1 431 4 is_stmt 1 view .LVU623
 431:src/storage.c **** 
 2068              		.loc 1 431 11 is_stmt 0 view .LVU624
 2069 005a D8F80030 		ldr	r3, [r8]
 2070 005e 93F8CF07 		ldrb	r0, [r3, #1999]	@ zero_extendqisi2
 431:src/storage.c **** 
 2071              		.loc 1 431 38 view .LVU625
 2072 0062 0335     		adds	r5, r5, #3
 2073              	.LVL207:
 431:src/storage.c **** 
 2074              		.loc 1 431 9 view .LVU626
 2075 0064 A0EBA500 		sub	r0, r0, r5, asr #2
 2076              	.LVL208:
 2077              	.L170:
 433:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2078              		.loc 1 433 3 is_stmt 1 view .LVU627
 433:src/storage.c **** 			return report_err( ERR_RAM_FULL );
 2079              		.loc 1 433 6 is_stmt 0 view .LVU628
 2080 0068 0028     		cmp	r0, #0
 2081 006a DFDB     		blt	.L176
 436:src/storage.c **** 	}
 2082              		.loc 1 436 3 is_stmt 1 view .LVU629
 2083 006c 7D21     		movs	r1, #125
 2084 006e FFF7FEFF 		bl	cmdregs
 2085              	.LVL209:
 2086              	.L166:
 436:src/storage.c **** 	}
 2087              		.loc 1 436 3 is_stmt 0 view .LVU630
 2088              	.LBE76:
 441:src/storage.c **** 	ProgSize += length;
 2089              		.loc 1 441 2 is_stmt 1 view .LVU631
 441:src/storage.c **** 	ProgSize += length;
 2090              		.loc 1 441 7 is_stmt 0 view .LVU632
 2091 0072 D8F80020 		ldr	r2, [r8]
 2092 0076 5388     		ldrh	r3, [r2, #2]
 2093              	.LVL210:
 442:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2094              		.loc 1 442 2 is_stmt 1 view .LVU633
 441:src/storage.c **** 	ProgSize += length;
 2095              		.loc 1 441 5 is_stmt 0 view .LVU634
 2096 0078 5D1C     		adds	r5, r3, #1
ARM GAS  /tmp/ccwuxJEt.s 			page 69


 443:src/storage.c **** 	set_pc( pc );
 2097              		.loc 1 443 16 view .LVU635
 2098 007a ADB2     		uxth	r5, r5
 442:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2099              		.loc 1 442 11 view .LVU636
 2100 007c 2344     		add	r3, r3, r4
 2101              	.LVL211:
 443:src/storage.c **** 	set_pc( pc );
 2102              		.loc 1 443 16 view .LVU637
 2103 007e 02EB4500 		add	r0, r2, r5, lsl #1
 442:src/storage.c **** 	xcopy( Prog_1 + pc, source, length << 1 );
 2104              		.loc 1 442 11 view .LVU638
 2105 0082 5380     		strh	r3, [r2, #2]	@ movhi
 2106              	.LVL212:
 443:src/storage.c **** 	set_pc( pc );
 2107              		.loc 1 443 2 is_stmt 1 view .LVU639
 2108 0084 3146     		mov	r1, r6
 2109 0086 6200     		lsls	r2, r4, #1
 2110 0088 0230     		adds	r0, r0, #2
 2111 008a FFF7FEFF 		bl	xcopy
 2112              	.LVL213:
 444:src/storage.c **** 	return 0;
 2113              		.loc 1 444 2 view .LVU640
 2114 008e 2846     		mov	r0, r5
 2115 0090 FFF7FEFF 		bl	set_pc
 2116              	.LVL214:
 445:src/storage.c **** }
 2117              		.loc 1 445 2 view .LVU641
 446:src/storage.c **** 
 2118              		.loc 1 446 1 is_stmt 0 view .LVU642
 2119 0094 0020     		movs	r0, #0
 2120 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2121              	.LVL215:
 2122              	.L164:
 412:src/storage.c **** 	}
 2123              		.loc 1 412 3 is_stmt 1 view .LVU643
 446:src/storage.c **** 
 2124              		.loc 1 446 1 is_stmt 0 view .LVU644
 2125 009a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2126              		.cfi_remember_state
 2127              		.cfi_restore 14
 2128              		.cfi_restore 8
 2129              		.cfi_restore 7
 2130              		.cfi_restore 6
 2131              		.cfi_restore 5
 2132              		.cfi_restore 4
 2133              		.cfi_def_cfa_offset 0
 2134              	.LVL216:
 412:src/storage.c **** 	}
 2135              		.loc 1 412 10 view .LVU645
 2136 009e 1220     		movs	r0, #18
 2137              	.LVL217:
 412:src/storage.c **** 	}
 2138              		.loc 1 412 10 view .LVU646
 2139 00a0 FFF7FEBF 		b	report_err
 2140              	.LVL218:
 2141              	.L178:
ARM GAS  /tmp/ccwuxJEt.s 			page 70


 2142              		.cfi_restore_state
 423:src/storage.c **** 		sigmaDeallocate();
 2143              		.loc 1 423 3 is_stmt 1 view .LVU647
 423:src/storage.c **** 		sigmaDeallocate();
 2144              		.loc 1 423 16 is_stmt 0 view .LVU648
 2145 00a4 ED1A     		subs	r5, r5, r3
 2146              	.LVL219:
 424:src/storage.c **** 	}
 2147              		.loc 1 424 3 is_stmt 1 view .LVU649
 2148 00a6 FFF7FEFF 		bl	sigmaDeallocate
 2149              	.LVL220:
 426:src/storage.c **** 		int regs;
 2150              		.loc 1 426 2 view .LVU650
 426:src/storage.c **** 		int regs;
 2151              		.loc 1 426 5 is_stmt 0 view .LVU651
 2152 00aa 002D     		cmp	r5, #0
 2153 00ac E1DD     		ble	.L166
 2154              	.LBB77:
 427:src/storage.c **** 		if (is_dblmode())
 2155              		.loc 1 427 3 is_stmt 1 view .LVU652
 428:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2156              		.loc 1 428 3 view .LVU653
 428:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2157              		.loc 1 428 7 is_stmt 0 view .LVU654
 2158 00ae FFF7FEFF 		bl	is_dblmode
 2159              	.LVL221:
 428:src/storage.c **** 			regs = global_regs() - ( ( space_needed + 7 ) >> 3 );
 2160              		.loc 1 428 6 view .LVU655
 2161 00b2 0028     		cmp	r0, #0
 2162 00b4 D1D0     		beq	.L169
 2163              	.L179:
 429:src/storage.c **** 		else
 2164              		.loc 1 429 4 is_stmt 1 view .LVU656
 429:src/storage.c **** 		else
 2165              		.loc 1 429 11 is_stmt 0 view .LVU657
 2166 00b6 FFF7FEFF 		bl	global_regs
 2167              	.LVL222:
 429:src/storage.c **** 		else
 2168              		.loc 1 429 44 view .LVU658
 2169 00ba 0735     		adds	r5, r5, #7
 2170              	.LVL223:
 429:src/storage.c **** 		else
 2171              		.loc 1 429 25 view .LVU659
 2172 00bc A0EBE500 		sub	r0, r0, r5, asr #3
 2173              	.LVL224:
 429:src/storage.c **** 		else
 2174              		.loc 1 429 25 view .LVU660
 2175 00c0 D2E7     		b	.L170
 2176              	.L181:
 2177 00c2 00BF     		.align	2
 2178              	.L180:
 2179 00c4 00000000 		.word	ProgFree
 2180 00c8 00000000 		.word	SizeStatRegs
 2181 00cc 00000000 		.word	main_ram
 2182              	.LBE77:
 2183              		.cfi_endproc
 2184              	.LFE18:
ARM GAS  /tmp/ccwuxJEt.s 			page 71


 2186              		.section	.text.check_create_wp34sdir,"ax",%progbits
 2187              		.align	1
 2188              		.p2align 2,,3
 2189              		.global	check_create_wp34sdir
 2190              		.syntax unified
 2191              		.thumb
 2192              		.thumb_func
 2193              		.fpu fpv4-sp-d16
 2195              	check_create_wp34sdir:
 2196              	.LFB21:
 600:src/storage.c ****   FRESULT f;
 2197              		.loc 1 600 33 is_stmt 1 view -0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 601:src/storage.c ****   sys_disk_write_enable(1);
 2201              		.loc 1 601 3 view .LVU662
 602:src/storage.c ****   f = check_create_dir ("/wp34s");
 2202              		.loc 1 602 3 view .LVU663
 600:src/storage.c ****   FRESULT f;
 2203              		.loc 1 600 33 is_stmt 0 view .LVU664
 2204 0000 38B5     		push	{r3, r4, r5, lr}
 2205              		.cfi_def_cfa_offset 16
 2206              		.cfi_offset 3, -16
 2207              		.cfi_offset 4, -12
 2208              		.cfi_offset 5, -8
 2209              		.cfi_offset 14, -4
 602:src/storage.c ****   f = check_create_dir ("/wp34s");
 2210              		.loc 1 602 3 view .LVU665
 2211 0002 0120     		movs	r0, #1
 2212 0004 044D     		ldr	r5, .L184
 2213 0006 A847     		blx	r5
 2214              	.LVL225:
 603:src/storage.c ****   sys_disk_write_enable(0);
 2215              		.loc 1 603 3 is_stmt 1 view .LVU666
 603:src/storage.c ****   sys_disk_write_enable(0);
 2216              		.loc 1 603 7 is_stmt 0 view .LVU667
 2217 0008 044B     		ldr	r3, .L184+4
 2218 000a 0548     		ldr	r0, .L184+8
 2219 000c 9847     		blx	r3
 2220              	.LVL226:
 2221 000e 0446     		mov	r4, r0
 2222              	.LVL227:
 604:src/storage.c ****   return f;
 2223              		.loc 1 604 3 is_stmt 1 view .LVU668
 2224 0010 0020     		movs	r0, #0
 2225 0012 A847     		blx	r5
 2226              	.LVL228:
 605:src/storage.c **** }
 2227              		.loc 1 605 3 view .LVU669
 606:src/storage.c **** 
 2228              		.loc 1 606 1 is_stmt 0 view .LVU670
 2229 0014 E0B2     		uxtb	r0, r4
 2230 0016 38BD     		pop	{r3, r4, r5, pc}
 2231              	.LVL229:
 2232              	.L185:
 606:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 72


 2233              		.loc 1 606 1 view .LVU671
 2234              		.align	2
 2235              	.L184:
 2236 0018 E1030008 		.word	134218721
 2237 001c D1030008 		.word	134218705
 2238 0020 2C000000 		.word	.LC2
 2239              		.cfi_endproc
 2240              	.LFE21:
 2242              		.section	.text.init_library,"ax",%progbits
 2243              		.align	1
 2244              		.p2align 2,,3
 2245              		.global	init_library
 2246              		.syntax unified
 2247              		.thumb
 2248              		.thumb_func
 2249              		.fpu fpv4-sp-d16
 2251              	init_library:
 2252              	.LFB22:
 668:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2253              		.loc 1 668 1 is_stmt 1 view -0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 256
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 669:src/storage.c **** 	  struct {
 2257              		.loc 1 669 2 view .LVU673
 668:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2258              		.loc 1 668 1 is_stmt 0 view .LVU674
 2259 0000 10B5     		push	{r4, lr}
 2260              		.cfi_def_cfa_offset 8
 2261              		.cfi_offset 4, -8
 2262              		.cfi_offset 14, -4
 669:src/storage.c **** 	  struct {
 2263              		.loc 1 669 7 view .LVU675
 2264 0002 0C4C     		ldr	r4, .L193
 2265 0004 2168     		ldr	r1, [r4]
 668:src/storage.c **** 	if ( checksum_region( &UserFlash, &UserFlash ) ) {
 2266              		.loc 1 668 1 view .LVU676
 2267 0006 C0B0     		sub	sp, sp, #256
 2268              		.cfi_def_cfa_offset 264
 669:src/storage.c **** 	  struct {
 2269              		.loc 1 669 7 view .LVU677
 2270 0008 0846     		mov	r0, r1
 2271 000a FFF7FEFF 		bl	checksum_region
 2272              	.LVL230:
 669:src/storage.c **** 	  struct {
 2273              		.loc 1 669 5 view .LVU678
 2274 000e 08B9     		cbnz	r0, .L192
 680:src/storage.c **** 
 2275              		.loc 1 680 1 view .LVU679
 2276 0010 40B0     		add	sp, sp, #256
 2277              		.cfi_remember_state
 2278              		.cfi_def_cfa_offset 8
 2279              		@ sp needed
 2280 0012 10BD     		pop	{r4, pc}
 2281              	.L192:
 2282              		.cfi_restore_state
 2283              	.LBB78:
ARM GAS  /tmp/ccwuxJEt.s 			page 73


 670:src/storage.c **** 			unsigned short crc;
 2284              		.loc 1 670 4 is_stmt 1 view .LVU680
 675:src/storage.c **** 		lib.crc = MAGIC_MARKER;
 2285              		.loc 1 675 3 view .LVU681
 676:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2286              		.loc 1 676 3 view .LVU682
 676:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2287              		.loc 1 676 11 is_stmt 0 view .LVU683
 2288 0014 4AF23C53 		movw	r3, #42300
 677:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2289              		.loc 1 677 3 view .LVU684
 2290 0018 FC22     		movs	r2, #252
 2291 001a FF21     		movs	r1, #255
 2292 001c 01A8     		add	r0, sp, #4
 676:src/storage.c **** 		xset( lib.prog, 0xff, sizeof( lib.prog ) );
 2293              		.loc 1 676 11 view .LVU685
 2294 001e 0093     		str	r3, [sp]
 677:src/storage.c **** 		program_flash( &UserFlash, &lib, 1 );
 2295              		.loc 1 677 3 is_stmt 1 view .LVU686
 2296 0020 FFF7FEFF 		bl	xset
 2297              	.LVL231:
 678:src/storage.c **** 	}
 2298              		.loc 1 678 3 view .LVU687
 2299 0024 2068     		ldr	r0, [r4]
 2300 0026 6946     		mov	r1, sp
 2301 0028 0122     		movs	r2, #1
 2302 002a FFF7FEFF 		bl	program_flash
 2303              	.LVL232:
 2304              	.LBE78:
 680:src/storage.c **** 
 2305              		.loc 1 680 1 is_stmt 0 view .LVU688
 2306 002e 40B0     		add	sp, sp, #256
 2307              		.cfi_def_cfa_offset 8
 2308              		@ sp needed
 2309 0030 10BD     		pop	{r4, pc}
 2310              	.L194:
 2311 0032 00BF     		.align	2
 2312              	.L193:
 2313 0034 00000000 		.word	library_ram
 2314              		.cfi_endproc
 2315              	.LFE22:
 2317              		.section	.text.flash_remove,"ax",%progbits
 2318              		.align	1
 2319              		.p2align 2,,3
 2320              		.global	flash_remove
 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.fpu fpv4-sp-d16
 2326              	flash_remove:
 2327              	.LVL233:
 2328              	.LFB24:
 745:src/storage.c **** 	const int size = UserFlash.size - count;
 2329              		.loc 1 745 1 is_stmt 1 view -0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwuxJEt.s 			page 74


 2333              		@ link register save eliminated.
 746:src/storage.c **** 	step_no = offsetLIB( step_no );
 2334              		.loc 1 746 2 view .LVU690
 746:src/storage.c **** 	step_no = offsetLIB( step_no );
 2335              		.loc 1 746 19 is_stmt 0 view .LVU691
 2336 0000 084B     		ldr	r3, .L197
 2337 0002 1A68     		ldr	r2, [r3]
 747:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2338              		.loc 1 747 12 view .LVU692
 2339 0004 C0F30D00 		ubfx	r0, r0, #0, #14
 2340              	.LVL234:
 746:src/storage.c **** 	step_no = offsetLIB( step_no );
 2341              		.loc 1 746 28 view .LVU693
 2342 0008 5388     		ldrh	r3, [r2, #2]
 747:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2343              		.loc 1 747 10 view .LVU694
 2344 000a 0138     		subs	r0, r0, #1
 745:src/storage.c **** 	const int size = UserFlash.size - count;
 2345              		.loc 1 745 1 view .LVU695
 2346 000c 10B4     		push	{r4}
 2347              		.cfi_def_cfa_offset 4
 2348              		.cfi_offset 4, -4
 748:src/storage.c **** 			     size - step_no, size );
 2349              		.loc 1 748 32 view .LVU696
 2350 000e 0432     		adds	r2, r2, #4
 748:src/storage.c **** 			     size - step_no, size );
 2351              		.loc 1 748 57 view .LVU697
 2352 0010 4418     		adds	r4, r0, r1
 746:src/storage.c **** 	step_no = offsetLIB( step_no );
 2353              		.loc 1 746 12 view .LVU698
 2354 0012 5B1A     		subs	r3, r3, r1
 2355              	.LVL235:
 747:src/storage.c **** 	return flash_append( step_no, UserFlash.prog + step_no + count,
 2356              		.loc 1 747 2 is_stmt 1 view .LVU699
 748:src/storage.c **** 			     size - step_no, size );
 2357              		.loc 1 748 2 view .LVU700
 748:src/storage.c **** 			     size - step_no, size );
 2358              		.loc 1 748 9 is_stmt 0 view .LVU701
 2359 0014 02EB4401 		add	r1, r2, r4, lsl #1
 2360              	.LVL236:
 750:src/storage.c **** 
 2361              		.loc 1 750 1 view .LVU702
 2362 0018 5DF8044B 		ldr	r4, [sp], #4
 2363              		.cfi_restore 4
 2364              		.cfi_def_cfa_offset 0
 748:src/storage.c **** 			     size - step_no, size );
 2365              		.loc 1 748 9 view .LVU703
 2366 001c 1A1A     		subs	r2, r3, r0
 2367 001e FFF7FEBF 		b	flash_append
 2368              	.LVL237:
 2369              	.L198:
 748:src/storage.c **** 			     size - step_no, size );
 2370              		.loc 1 748 9 view .LVU704
 2371 0022 00BF     		.align	2
 2372              	.L197:
 2373 0024 00000000 		.word	library_ram
 2374              		.cfi_endproc
ARM GAS  /tmp/ccwuxJEt.s 			page 75


 2375              	.LFE24:
 2377              		.section	.text.clrprog,"ax",%progbits
 2378              		.align	1
 2379              		.p2align 2,,3
 2380              		.global	clrprog
 2381              		.syntax unified
 2382              		.thumb
 2383              		.thumb_func
 2384              		.fpu fpv4-sp-d16
 2386              	clrprog:
 2387              	.LFB13:
 273:src/storage.c **** 	update_program_bounds( 1 );
 2388              		.loc 1 273 1 is_stmt 1 view -0
 2389              		.cfi_startproc
 2390              		@ args = 0, pretend = 0, frame = 0
 2391              		@ frame_needed = 0, uses_anonymous_args = 0
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2392              		.loc 1 274 2 view .LVU706
 273:src/storage.c **** 	update_program_bounds( 1 );
 2393              		.loc 1 273 1 is_stmt 0 view .LVU707
 2394 0000 10B5     		push	{r4, lr}
 2395              		.cfi_def_cfa_offset 8
 2396              		.cfi_offset 4, -8
 2397              		.cfi_offset 14, -4
 275:src/storage.c **** 		/*
 2398              		.loc 1 275 7 view .LVU708
 2399 0002 234C     		ldr	r4, .L208
 274:src/storage.c **** 	if ( nLIB( ProgBegin ) == REGION_LIBRARY ) {
 2400              		.loc 1 274 2 view .LVU709
 2401 0004 0120     		movs	r0, #1
 2402 0006 FFF7FEFF 		bl	update_program_bounds
 2403              	.LVL238:
 275:src/storage.c **** 		/*
 2404              		.loc 1 275 2 is_stmt 1 view .LVU710
 275:src/storage.c **** 		/*
 2405              		.loc 1 275 7 is_stmt 0 view .LVU711
 2406 000a 2368     		ldr	r3, [r4]
 2407 000c B3F8EC07 		ldrh	r0, [r3, #2028]
 275:src/storage.c **** 		/*
 2408              		.loc 1 275 5 view .LVU712
 2409 0010 820B     		lsrs	r2, r0, #14
 2410 0012 012A     		cmp	r2, #1
 2411 0014 28D0     		beq	.L205
 282:src/storage.c **** 			return;
 2412              		.loc 1 282 3 is_stmt 1 view .LVU713
 282:src/storage.c **** 			return;
 2413              		.loc 1 282 8 is_stmt 0 view .LVU714
 2414 0016 FFF7FEFF 		bl	check_delete_prog
 2415              	.LVL239:
 282:src/storage.c **** 			return;
 2416              		.loc 1 282 6 view .LVU715
 2417 001a 00B1     		cbz	r0, .L206
 294:src/storage.c ****  
 2418              		.loc 1 294 1 view .LVU716
 2419 001c 10BD     		pop	{r4, pc}
 2420              	.L206:
 285:src/storage.c **** 		xcopy( Prog_1 + ProgBegin, Prog + ProgEnd, ( ProgSize - ProgEnd ) << 1 );
ARM GAS  /tmp/ccwuxJEt.s 			page 76


 2421              		.loc 1 285 3 is_stmt 1 view .LVU717
 2422 001e FFF7FEFF 		bl	clrretstk
 2423              	.LVL240:
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2424              		.loc 1 286 3 view .LVU718
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2425              		.loc 1 286 10 is_stmt 0 view .LVU719
 2426 0022 2368     		ldr	r3, [r4]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2427              		.loc 1 286 17 view .LVU720
 2428 0024 B3F8EC07 		ldrh	r0, [r3, #2028]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2429              		.loc 1 286 37 view .LVU721
 2430 0028 B3F8EE17 		ldrh	r1, [r3, #2030]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2431              		.loc 1 286 48 view .LVU722
 2432 002c 5A88     		ldrh	r2, [r3, #2]
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2433              		.loc 1 286 17 view .LVU723
 2434 002e 00F10040 		add	r0, r0, #-2147483648
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2435              		.loc 1 286 10 view .LVU724
 2436 0032 0433     		adds	r3, r3, #4
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2437              		.loc 1 286 57 view .LVU725
 2438 0034 521A     		subs	r2, r2, r1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2439              		.loc 1 286 17 view .LVU726
 2440 0036 0138     		subs	r0, r0, #1
 286:src/storage.c **** 		ProgSize -= ( ProgEnd + 1 - ProgBegin );
 2441              		.loc 1 286 3 view .LVU727
 2442 0038 03EB4101 		add	r1, r3, r1, lsl #1
 2443 003c 03EB4000 		add	r0, r3, r0, lsl #1
 2444 0040 5200     		lsls	r2, r2, #1
 2445 0042 FFF7FEFF 		bl	xcopy
 2446              	.LVL241:
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2447              		.loc 1 287 3 is_stmt 1 view .LVU728
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2448              		.loc 1 287 12 is_stmt 0 view .LVU729
 2449 0046 2268     		ldr	r2, [r4]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2450              		.loc 1 287 31 view .LVU730
 2451 0048 B2F8EC07 		ldrh	r0, [r2, #2028]
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2452              		.loc 1 287 12 view .LVU731
 2453 004c 5388     		ldrh	r3, [r2, #2]
 2454 004e B2F8EE17 		ldrh	r1, [r2, #2030]
 2455 0052 0344     		add	r3, r3, r0
 2456 0054 013B     		subs	r3, r3, #1
 2457 0056 5B1A     		subs	r3, r3, r1
 2458 0058 9BB2     		uxth	r3, r3
 288:src/storage.c **** 			stoend();
 2459              		.loc 1 288 3 is_stmt 1 view .LVU732
 288:src/storage.c **** 			stoend();
 2460              		.loc 1 288 6 is_stmt 0 view .LVU733
 2461 005a B3B9     		cbnz	r3, .L207
ARM GAS  /tmp/ccwuxJEt.s 			page 77


 289:src/storage.c **** 		}
 2462              		.loc 1 289 4 is_stmt 1 view .LVU734
 2463              	.LBB79:
 2464              	.LBI79:
 237:src/storage.c **** {
 2465              		.loc 1 237 13 view .LVU735
 2466              	.LBB80:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2467              		.loc 1 239 2 view .LVU736
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2468              		.loc 1 239 11 is_stmt 0 view .LVU737
 2469 005c 0121     		movs	r1, #1
 240:src/storage.c **** }
 2470              		.loc 1 240 12 view .LVU738
 2471 005e 4FF49D73 		mov	r3, #314
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2472              		.loc 1 239 11 view .LVU739
 2473 0062 5180     		strh	r1, [r2, #2]	@ movhi
 240:src/storage.c **** }
 2474              		.loc 1 240 2 is_stmt 1 view .LVU740
 240:src/storage.c **** }
 2475              		.loc 1 240 12 is_stmt 0 view .LVU741
 2476 0064 9380     		strh	r3, [r2, #4]	@ movhi
 241:src/storage.c **** 
 2477              		.loc 1 241 1 view .LVU742
 2478 0066 08E0     		b	.L201
 2479              	.L205:
 2480              	.LBE80:
 2481              	.LBE79:
 279:src/storage.c **** 	}
 2482              		.loc 1 279 3 is_stmt 1 view .LVU743
 279:src/storage.c **** 	}
 2483              		.loc 1 279 28 is_stmt 0 view .LVU744
 2484 0068 B3F8EE17 		ldrh	r1, [r3, #2030]
 279:src/storage.c **** 	}
 2485              		.loc 1 279 36 view .LVU745
 2486 006c 0131     		adds	r1, r1, #1
 279:src/storage.c **** 	}
 2487              		.loc 1 279 3 view .LVU746
 2488 006e 091A     		subs	r1, r1, r0
 2489 0070 FFF7FEFF 		bl	flash_remove
 2490              	.LVL242:
 2491 0074 2368     		ldr	r3, [r4]
 2492 0076 B3F8EC07 		ldrh	r0, [r3, #2028]
 2493              	.L201:
 292:src/storage.c **** 	update_program_bounds( 1 );
 2494              		.loc 1 292 2 is_stmt 1 view .LVU747
 2495 007a 0138     		subs	r0, r0, #1
 2496 007c FFF7FEFF 		bl	set_pc
 2497              	.LVL243:
 293:src/storage.c **** }
 2498              		.loc 1 293 2 view .LVU748
 294:src/storage.c ****  
 2499              		.loc 1 294 1 is_stmt 0 view .LVU749
 2500 0080 BDE81040 		pop	{r4, lr}
 2501              		.cfi_remember_state
 2502              		.cfi_restore 14
ARM GAS  /tmp/ccwuxJEt.s 			page 78


 2503              		.cfi_restore 4
 2504              		.cfi_def_cfa_offset 0
 293:src/storage.c **** }
 2505              		.loc 1 293 2 view .LVU750
 2506 0084 0120     		movs	r0, #1
 2507 0086 FFF7FEBF 		b	update_program_bounds
 2508              	.LVL244:
 2509              	.L207:
 2510              		.cfi_restore_state
 287:src/storage.c **** 		if ( ProgSize == 0 ) {
 2511              		.loc 1 287 12 view .LVU751
 2512 008a 5380     		strh	r3, [r2, #2]	@ movhi
 2513 008c F5E7     		b	.L201
 2514              	.L209:
 2515 008e 00BF     		.align	2
 2516              	.L208:
 2517 0090 00000000 		.word	main_ram
 2518              		.cfi_endproc
 2519              	.LFE13:
 2521              		.section	.rodata.store_program_from_buffer.part.0.str1.4,"aMS",%progbits,1
 2522              		.align	2
 2523              	.LC7:
 2524 0000 4E6F206C 		.ascii	"No label\000"
 2524      6162656C 
 2524      00
 2525              		.section	.text.store_program_from_buffer.part.0,"ax",%progbits
 2526              		.align	1
 2527              		.p2align 2,,3
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	store_program_from_buffer.part.0:
 2534              	.LVL245:
 2535              	.LFB43:
1266:src/storage.c **** 
1267:src/storage.c **** void save_prog_file () {
1268:src/storage.c ****   opcode lbl; 
1269:src/storage.c ****   unsigned int pc;
1270:src/storage.c ****   unsigned short steps, prog_crc;
1271:src/storage.c ****   FRESULT f;
1272:src/storage.c ****   int data = WRITE;
1273:src/storage.c ****   int fss;
1274:src/storage.c ****   uint x=0;
1275:src/storage.c ****   char* buffer;
1276:src/storage.c ****   FLASH_REGION* fr;
1277:src/storage.c **** 
1278:src/storage.c ****   
1279:src/storage.c ****   if ( not_running() ) {
1280:src/storage.c ****     /*
1281:src/storage.c ****      *  Don't copy from library or XROM
1282:src/storage.c ****      */
1283:src/storage.c ****     pc = nLIB( state_pc() );
1284:src/storage.c ****     if ( pc == REGION_XROM ) {
1285:src/storage.c ****       error_message( ERR_ILLEGAL );
1286:src/storage.c ****       return;
1287:src/storage.c ****     }
ARM GAS  /tmp/ccwuxJEt.s 			page 79


1288:src/storage.c ****     /*
1289:src/storage.c ****      *  Check if program is labeled
1290:src/storage.c ****      */
1291:src/storage.c ****     update_program_bounds( 1 );
1292:src/storage.c ****     lbl = getprog( ProgBegin );
1293:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1294:src/storage.c ****       error_message( ERR_NO_LBL );
1295:src/storage.c ****       return;
1296:src/storage.c ****     }
1297:src/storage.c ****     /*
1298:src/storage.c ****      *  Compute steps and crc for program
1299:src/storage.c ****      */
1300:src/storage.c ****     steps = 1 + ProgEnd - ProgBegin;
1301:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
1302:src/storage.c ****     /*
1303:src/storage.c ****      * Get filename and open file
1304:src/storage.c ****      */
1305:src/storage.c ****     sys_disk_write_enable(1);
1306:src/storage.c **** 
1307:src/storage.c ****     fss = file_selection_screen ("Save current program", "/wp34s", ".dat", open_selected_file, DISP
1308:src/storage.c ****     if (fss != 1) return;
1309:src/storage.c **** 
1310:src/storage.c ****     // File is now open with correct permissions
1311:src/storage.c **** 
1312:src/storage.c ****     buffer = calloc (RAM_SIZE, 1);
1313:src/storage.c ****     if (!buffer) {// calloc failure!
1314:src/storage.c ****       f_close(FPT);
1315:src/storage.c ****       sys_disk_write_enable(0);
1316:src/storage.c ****       DispMsg = "Mem short";
1317:src/storage.c ****       return;
1318:src/storage.c ****     }
1319:src/storage.c **** 
1320:src/storage.c ****     fr = (FLASH_REGION*) buffer;
1321:src/storage.c ****     fr->size = steps;
1322:src/storage.c ****     fr->crc = prog_crc;
1323:src/storage.c **** 
1324:src/storage.c ****     xcopy (fr->prog, get_current_prog(), steps << 1);
1325:src/storage.c ****    
1326:src/storage.c ****     f = f_write (FPT, buffer, 2*sizeof(short)+(steps << 1), &x);
1327:src/storage.c ****     free(buffer);
1328:src/storage.c ****     
1329:src/storage.c ****     if (f != FR_OK) { //odd?
1330:src/storage.c ****       DispMsg = "Write err";
1331:src/storage.c ****     }
1332:src/storage.c ****     else {
1333:src/storage.c ****       DispMsg = "Written";
1334:src/storage.c ****     }
1335:src/storage.c ****       
1336:src/storage.c ****     f_close(FPT);
1337:src/storage.c ****     sys_disk_write_enable(0);
1338:src/storage.c ****     
1339:src/storage.c ****   }
1340:src/storage.c **** }
1341:src/storage.c **** 
1342:src/storage.c **** void load_prog_file () {
1343:src/storage.c ****   int fss, fsize;
1344:src/storage.c ****   int data = READ;
ARM GAS  /tmp/ccwuxJEt.s 			page 80


1345:src/storage.c ****   uint x=0;
1346:src/storage.c ****   FLASH_REGION* fr;
1347:src/storage.c ****   char* buffer;
1348:src/storage.c **** 
1349:src/storage.c ****   fss = file_selection_screen ("Load PROG File", "/wp34s", ".dat", open_selected_file, NO_DISP_NEW,
1350:src/storage.c ****   if (fss != 1) return;
1351:src/storage.c **** 
1352:src/storage.c ****   // File is now open with correct permissions
1353:src/storage.c **** 
1354:src/storage.c ****   fsize = f_size(FPT);
1355:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
1356:src/storage.c ****     f_close(FPT);
1357:src/storage.c ****     DispMsg = "File too big";
1358:src/storage.c ****     return;
1359:src/storage.c ****   }
1360:src/storage.c ****   buffer = calloc (((fsize>>8)+1)<<8, 1);
1361:src/storage.c ****   if (!buffer) {// calloc failure!
1362:src/storage.c ****     f_close(FPT);
1363:src/storage.c ****     DispMsg = "Mem short";
1364:src/storage.c ****     return;
1365:src/storage.c ****   }
1366:src/storage.c **** 
1367:src/storage.c ****   f_read (FPT, buffer, fsize, &x);
1368:src/storage.c ****   if (!f_eof(FPT)) { //odd?
1369:src/storage.c ****     free(buffer);
1370:src/storage.c ****     f_close(FPT);
1371:src/storage.c ****     DispMsg = "File odd";
1372:src/storage.c ****     return;
1373:src/storage.c ****   }
1374:src/storage.c ****   f_close(FPT);
1375:src/storage.c **** 
1376:src/storage.c ****   fr = (FLASH_REGION*) buffer;
1377:src/storage.c ****     
1378:src/storage.c ****   if (checksum_region(fr, fr)) {//crc failed - wrong filetype?
1379:src/storage.c ****     DispMsg = "File crc err";
1380:src/storage.c ****         free(buffer);
1381:src/storage.c ****     return;
1382:src/storage.c ****   }
1383:src/storage.c **** 
1384:src/storage.c ****   store_program_from_buffer (fr);
1385:src/storage.c ****   free(buffer);
1386:src/storage.c **** }
1387:src/storage.c **** 
1388:src/storage.c **** void store_program_from_buffer( FLASH_REGION* fr )
 2536              		.loc 1 1388 6 is_stmt 1 view -0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 0
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              	.LBB81:
1389:src/storage.c **** { // buffer contains all of program file
1390:src/storage.c ****   unsigned int pc;
1391:src/storage.c ****   int space_needed, count, free;
1392:src/storage.c **** 
1393:src/storage.c ****   if ( not_running() ) {
1394:src/storage.c ****     /*
1395:src/storage.c ****      *  Check if program is labeled
1396:src/storage.c ****      */
ARM GAS  /tmp/ccwuxJEt.s 			page 81


1397:src/storage.c ****     opcode lbl = (fr->prog)[0];
 2541              		.loc 1 1397 5 view .LVU753
1398:src/storage.c ****     if ( isDBL(lbl) ) {
 2542              		.loc 1 1398 5 view .LVU754
 2543              		.loc 1 1398 8 is_stmt 0 view .LVU755
 2544 0000 8388     		ldrh	r3, [r0, #4]
 2545 0002 03F47043 		and	r3, r3, #61440
 2546 0006 B3F5704F 		cmp	r3, #61440
 2547 000a 03D0     		beq	.L223
 2548              	.LVL246:
1399:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
1400:src/storage.c ****     }
1401:src/storage.c ****     
1402:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
1403:src/storage.c ****       DispMsg = "No label";
 2549              		.loc 1 1403 7 is_stmt 1 view .LVU756
 2550              		.loc 1 1403 15 is_stmt 0 view .LVU757
 2551 000c 264B     		ldr	r3, .L227
 2552 000e 274A     		ldr	r2, .L227+4
 2553 0010 1A60     		str	r2, [r3]
1404:src/storage.c ****       return;
 2554              		.loc 1 1404 7 is_stmt 1 view .LVU758
 2555 0012 7047     		bx	lr
 2556              	.LVL247:
 2557              	.L223:
1399:src/storage.c ****       lbl |= (fr->prog)[1] << 16;
 2558              		.loc 1 1399 11 is_stmt 0 view .LVU759
 2559 0014 4168     		ldr	r1, [r0, #4]	@ unaligned
1402:src/storage.c ****       DispMsg = "No label";
 2560              		.loc 1 1402 11 view .LVU760
 2561 0016 01F47043 		and	r3, r1, #61440
1402:src/storage.c ****       DispMsg = "No label";
 2562              		.loc 1 1402 8 view .LVU761
 2563 001a B3F5704F 		cmp	r3, #61440
 2564              	.LBE81:
1388:src/storage.c **** { // buffer contains all of program file
 2565              		.loc 1 1388 6 view .LVU762
 2566 001e 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2567              		.cfi_def_cfa_offset 32
 2568              		.cfi_offset 4, -32
 2569              		.cfi_offset 5, -28
 2570              		.cfi_offset 6, -24
 2571              		.cfi_offset 7, -20
 2572              		.cfi_offset 8, -16
 2573              		.cfi_offset 9, -12
 2574              		.cfi_offset 10, -8
 2575              		.cfi_offset 14, -4
 2576 0022 0446     		mov	r4, r0
 2577              	.LBB84:
1399:src/storage.c ****     }
 2578              		.loc 1 1399 7 is_stmt 1 view .LVU763
 2579              	.LVL248:
1402:src/storage.c ****       DispMsg = "No label";
 2580              		.loc 1 1402 5 view .LVU764
1402:src/storage.c ****       DispMsg = "No label";
 2581              		.loc 1 1402 8 is_stmt 0 view .LVU765
 2582 0024 04D1     		bne	.L211
ARM GAS  /tmp/ccwuxJEt.s 			page 82


1402:src/storage.c ****       DispMsg = "No label";
 2583              		.loc 1 1402 22 view .LVU766
 2584 0026 11F4706F 		tst	r1, #3840
1402:src/storage.c ****       DispMsg = "No label";
 2585              		.loc 1 1402 25 view .LVU767
 2586 002a C1F30322 		ubfx	r2, r1, #8, #4
1402:src/storage.c ****       DispMsg = "No label";
 2587              		.loc 1 1402 22 view .LVU768
 2588 002e 04D0     		beq	.L212
 2589              	.L211:
 2590              	.LVL249:
1403:src/storage.c ****       return;
 2591              		.loc 1 1403 7 is_stmt 1 view .LVU769
1403:src/storage.c ****       return;
 2592              		.loc 1 1403 15 is_stmt 0 view .LVU770
 2593 0030 1D4B     		ldr	r3, .L227
 2594 0032 1E4A     		ldr	r2, .L227+4
 2595 0034 1A60     		str	r2, [r3]
 2596              		.loc 1 1404 7 is_stmt 1 view .LVU771
 2597              	.LBE84:
1405:src/storage.c ****     }
1406:src/storage.c ****     /*
1407:src/storage.c ****      *  Compute space needed
1408:src/storage.c ****      */
1409:src/storage.c ****     count = space_needed = fr->size;
1410:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
1411:src/storage.c ****     
1412:src/storage.c ****     /*
1413:src/storage.c ****      *  Find a duplicate label in the library and delete the program
1414:src/storage.c ****      */
1415:src/storage.c ****     pc = find_opcode_from( addrLIB( 0, REGION_LIBRARY ), lbl, 0 );
1416:src/storage.c ****     if ( pc != 0 ) {
1417:src/storage.c ****       /*
1418:src/storage.c ****        *  CLP in library
1419:src/storage.c ****        */
1420:src/storage.c ****       unsigned int old_pc = state_pc();
1421:src/storage.c ****       set_pc( pc );
1422:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
1423:src/storage.c ****       if ( space_needed <= free ) {
1424:src/storage.c **** 	clrprog();
1425:src/storage.c ****       }
1426:src/storage.c ****       set_pc( old_pc );
1427:src/storage.c ****     }
1428:src/storage.c ****     if ( space_needed > free ) {
1429:src/storage.c ****       error_message( ERR_FLASH_FULL );
1430:src/storage.c ****       return;
1431:src/storage.c ****     }
1432:src/storage.c ****     // 3. Append program
1433:src/storage.c ****     flash_append( UserFlash.size, fr->prog, count, UserFlash.size + count );
1434:src/storage.c ****   }
1435:src/storage.c **** }
 2598              		.loc 1 1435 1 is_stmt 0 view .LVU772
 2599 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2600              	.LVL250:
 2601              	.L212:
 2602              	.LBB85:
1409:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
ARM GAS  /tmp/ccwuxJEt.s 			page 83


 2603              		.loc 1 1409 5 is_stmt 1 view .LVU773
1410:src/storage.c ****     
 2604              		.loc 1 1410 41 is_stmt 0 view .LVU774
 2605 003a DFF87880 		ldr	r8, .L227+12
1409:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2606              		.loc 1 1409 26 view .LVU775
 2607 003e 4788     		ldrh	r7, [r0, #2]
 2608              	.LVL251:
1410:src/storage.c ****     
 2609              		.loc 1 1410 5 is_stmt 1 view .LVU776
1410:src/storage.c ****     
 2610              		.loc 1 1410 41 is_stmt 0 view .LVU777
 2611 0040 D8F80030 		ldr	r3, [r8]
1415:src/storage.c ****     if ( pc != 0 ) {
 2612              		.loc 1 1415 10 view .LVU778
 2613 0044 4FF48040 		mov	r0, #16384
 2614              	.LVL252:
1410:src/storage.c ****     
 2615              		.loc 1 1410 41 view .LVU779
 2616 0048 5D88     		ldrh	r5, [r3, #2]
1415:src/storage.c ****     if ( pc != 0 ) {
 2617              		.loc 1 1415 10 view .LVU780
 2618 004a FFF7FEFF 		bl	find_opcode_from
 2619              	.LVL253:
1410:src/storage.c ****     
 2620              		.loc 1 1410 10 view .LVU781
 2621 004e C5F5FF55 		rsb	r5, r5, #8160
 2622 0052 1E35     		adds	r5, r5, #30
 2623              	.LVL254:
1415:src/storage.c ****     if ( pc != 0 ) {
 2624              		.loc 1 1415 5 is_stmt 1 view .LVU782
1416:src/storage.c ****       /*
 2625              		.loc 1 1416 5 view .LVU783
1416:src/storage.c ****       /*
 2626              		.loc 1 1416 8 is_stmt 0 view .LVU784
 2627 0054 60B9     		cbnz	r0, .L224
1409:src/storage.c ****     free = NUMPROG_FLASH_MAX - UserFlash.size;
 2628              		.loc 1 1409 26 view .LVU785
 2629 0056 3E46     		mov	r6, r7
 2630              	.LVL255:
 2631              	.L214:
1428:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2632              		.loc 1 1428 5 is_stmt 1 view .LVU786
1428:src/storage.c ****       error_message( ERR_FLASH_FULL );
 2633              		.loc 1 1428 8 is_stmt 0 view .LVU787
 2634 0058 B542     		cmp	r5, r6
 2635 005a 1DDB     		blt	.L225
1433:src/storage.c ****   }
 2636              		.loc 1 1433 5 is_stmt 1 view .LVU788
1433:src/storage.c ****   }
 2637              		.loc 1 1433 28 is_stmt 0 view .LVU789
 2638 005c D8F80030 		ldr	r3, [r8]
1433:src/storage.c ****   }
 2639              		.loc 1 1433 5 view .LVU790
 2640 0060 5888     		ldrh	r0, [r3, #2]
 2641 0062 211D     		adds	r1, r4, #4
 2642 0064 3B18     		adds	r3, r7, r0
ARM GAS  /tmp/ccwuxJEt.s 			page 84


 2643 0066 3A46     		mov	r2, r7
 2644              	.LBE85:
 2645              		.loc 1 1435 1 view .LVU791
 2646 0068 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2647              		.cfi_remember_state
 2648              		.cfi_restore 14
 2649              		.cfi_restore 10
 2650              		.cfi_restore 9
 2651              		.cfi_restore 8
 2652              		.cfi_restore 7
 2653              		.cfi_restore 6
 2654              		.cfi_restore 5
 2655              		.cfi_restore 4
 2656              		.cfi_def_cfa_offset 0
 2657              	.LVL256:
 2658              	.LBB86:
1433:src/storage.c ****   }
 2659              		.loc 1 1433 5 view .LVU792
 2660 006c FFF7FEBF 		b	flash_append
 2661              	.LVL257:
 2662              	.L224:
 2663              		.cfi_restore_state
 2664              	.LBB82:
1420:src/storage.c ****       set_pc( pc );
 2665              		.loc 1 1420 7 is_stmt 1 view .LVU793
1420:src/storage.c ****       set_pc( pc );
 2666              		.loc 1 1420 29 is_stmt 0 view .LVU794
 2667 0070 0F4E     		ldr	r6, .L227+8
 2668 0072 3368     		ldr	r3, [r6]
1420:src/storage.c ****       set_pc( pc );
 2669              		.loc 1 1420 20 view .LVU795
 2670 0074 B3F8E097 		ldrh	r9, [r3, #2016]
 2671              	.LVL258:
1421:src/storage.c ****       space_needed -= 1 + ProgEnd - ProgBegin;
 2672              		.loc 1 1421 7 is_stmt 1 view .LVU796
 2673 0078 FFF7FEFF 		bl	set_pc
 2674              	.LVL259:
1422:src/storage.c ****       if ( space_needed <= free ) {
 2675              		.loc 1 1422 7 view .LVU797
1422:src/storage.c ****       if ( space_needed <= free ) {
 2676              		.loc 1 1422 27 is_stmt 0 view .LVU798
 2677 007c 3368     		ldr	r3, [r6]
 2678 007e B3F8EE67 		ldrh	r6, [r3, #2030]
1422:src/storage.c ****       if ( space_needed <= free ) {
 2679              		.loc 1 1422 37 view .LVU799
 2680 0082 B3F8EC37 		ldrh	r3, [r3, #2028]
1422:src/storage.c ****       if ( space_needed <= free ) {
 2681              		.loc 1 1422 25 view .LVU800
 2682 0086 0136     		adds	r6, r6, #1
1422:src/storage.c ****       if ( space_needed <= free ) {
 2683              		.loc 1 1422 35 view .LVU801
 2684 0088 F61A     		subs	r6, r6, r3
1422:src/storage.c ****       if ( space_needed <= free ) {
 2685              		.loc 1 1422 20 view .LVU802
 2686 008a BE1B     		subs	r6, r7, r6
 2687              	.LVL260:
1423:src/storage.c **** 	clrprog();
ARM GAS  /tmp/ccwuxJEt.s 			page 85


 2688              		.loc 1 1423 7 is_stmt 1 view .LVU803
1423:src/storage.c **** 	clrprog();
 2689              		.loc 1 1423 10 is_stmt 0 view .LVU804
 2690 008c B542     		cmp	r5, r6
 2691 008e 08DA     		bge	.L226
 2692              	.L215:
1426:src/storage.c ****     }
 2693              		.loc 1 1426 7 is_stmt 1 view .LVU805
 2694 0090 4846     		mov	r0, r9
 2695 0092 FFF7FEFF 		bl	set_pc
 2696              	.LVL261:
 2697 0096 DFE7     		b	.L214
 2698              	.LVL262:
 2699              	.L225:
1426:src/storage.c ****     }
 2700              		.loc 1 1426 7 is_stmt 0 view .LVU806
 2701              	.LBE82:
1429:src/storage.c ****       return;
 2702              		.loc 1 1429 7 is_stmt 1 view .LVU807
 2703              	.LBE86:
 2704              		.loc 1 1435 1 is_stmt 0 view .LVU808
 2705 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2706              		.cfi_remember_state
 2707              		.cfi_restore 14
 2708              		.cfi_restore 10
 2709              		.cfi_restore 9
 2710              		.cfi_restore 8
 2711              		.cfi_restore 7
 2712              		.cfi_restore 6
 2713              		.cfi_restore 5
 2714              		.cfi_restore 4
 2715              		.cfi_def_cfa_offset 0
 2716              	.LVL263:
 2717              	.LBB87:
1429:src/storage.c ****       return;
 2718              		.loc 1 1429 7 view .LVU809
 2719 009c 1720     		movs	r0, #23
 2720 009e FFF7FEBF 		b	error_message
 2721              	.LVL264:
 2722              	.L226:
 2723              		.cfi_restore_state
 2724              	.LBB83:
1424:src/storage.c ****       }
 2725              		.loc 1 1424 2 is_stmt 1 view .LVU810
 2726 00a2 FFF7FEFF 		bl	clrprog
 2727              	.LVL265:
 2728 00a6 F3E7     		b	.L215
 2729              	.L228:
 2730              		.align	2
 2731              	.L227:
 2732 00a8 00000000 		.word	DispMsg
 2733 00ac 00000000 		.word	.LC7
 2734 00b0 00000000 		.word	main_ram
 2735 00b4 00000000 		.word	library_ram
 2736              	.LBE83:
 2737              	.LBE87:
 2738              		.cfi_endproc
ARM GAS  /tmp/ccwuxJEt.s 			page 86


 2739              	.LFE43:
 2741              		.section	.rodata.flash_backup.str1.4,"aMS",%progbits,1
 2742              		.align	2
 2743              	.LC8:
 2744 0000 4572726F 		.ascii	"Error\000"
 2744      7200
 2745 0006 0000     		.align	2
 2746              	.LC9:
 2747 0008 53617665 		.ascii	"Saved\000"
 2747      6400
 2748              		.section	.text.flash_backup,"ax",%progbits
 2749              		.align	1
 2750              		.p2align 2,,3
 2751              		.global	flash_backup
 2752              		.syntax unified
 2753              		.thumb
 2754              		.thumb_func
 2755              		.fpu fpv4-sp-d16
 2757              	flash_backup:
 2758              	.LVL266:
 2759              	.LFB25:
 759:src/storage.c **** 	if ( not_running() ) {
 2760              		.loc 1 759 1 view -0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 0
 2763              		@ frame_needed = 0, uses_anonymous_args = 0
 760:src/storage.c **** 		process_cmdline_set_lift();
 2764              		.loc 1 760 2 view .LVU812
 759:src/storage.c **** 	if ( not_running() ) {
 2765              		.loc 1 759 1 is_stmt 0 view .LVU813
 2766 0000 10B5     		push	{r4, lr}
 2767              		.cfi_def_cfa_offset 8
 2768              		.cfi_offset 4, -8
 2769              		.cfi_offset 14, -4
 760:src/storage.c **** 		process_cmdline_set_lift();
 2770              		.loc 1 760 7 view .LVU814
 2771 0002 FFF7FEFF 		bl	not_running
 2772              	.LVL267:
 760:src/storage.c **** 		process_cmdline_set_lift();
 2773              		.loc 1 760 5 view .LVU815
 2774 0006 00B9     		cbnz	r0, .L236
 772:src/storage.c **** 
 2775              		.loc 1 772 1 view .LVU816
 2776 0008 10BD     		pop	{r4, pc}
 2777              	.L236:
 761:src/storage.c **** 		init_state();
 2778              		.loc 1 761 3 is_stmt 1 view .LVU817
 2779              	.LBB88:
 2780              	.LBB89:
 206:src/storage.c **** 			      Crc, &Crc );
 2781              		.loc 1 206 9 is_stmt 0 view .LVU818
 2782 000a 0F4C     		ldr	r4, .L238
 2783              	.LBE89:
 2784              	.LBE88:
 761:src/storage.c **** 		init_state();
 2785              		.loc 1 761 3 view .LVU819
 2786 000c FFF7FEFF 		bl	process_cmdline_set_lift
ARM GAS  /tmp/ccwuxJEt.s 			page 87


 2787              	.LVL268:
 762:src/storage.c **** 		checksum_all();
 2788              		.loc 1 762 3 is_stmt 1 view .LVU820
 2789 0010 FFF7FEFF 		bl	init_state
 2790              	.LVL269:
 763:src/storage.c **** 		if ( program_flash( &BackupFlash, &PersistentRam, sizeof( BackupFlash ) / PAGE_SIZE ) ) {
 2791              		.loc 1 763 3 view .LVU821
 2792              	.LBB91:
 2793              	.LBI88:
 204:src/storage.c **** {
 2794              		.loc 1 204 5 view .LVU822
 2795              	.LBB90:
 206:src/storage.c **** 			      Crc, &Crc );
 2796              		.loc 1 206 2 view .LVU823
 206:src/storage.c **** 			      Crc, &Crc );
 2797              		.loc 1 206 9 is_stmt 0 view .LVU824
 2798 0014 2068     		ldr	r0, [r4]
 2799 0016 40F2FE71 		movw	r1, #2046
 2800 001a 4318     		adds	r3, r0, r1
 2801 001c B0F8FE27 		ldrh	r2, [r0, #2046]
 2802 0020 FFF7FEFF 		bl	test_checksum
 2803              	.LVL270:
 2804              	.LBE90:
 2805              	.LBE91:
 764:src/storage.c **** 			error_message( ERR_IO );
 2806              		.loc 1 764 3 is_stmt 1 view .LVU825
 764:src/storage.c **** 			error_message( ERR_IO );
 2807              		.loc 1 764 8 is_stmt 0 view .LVU826
 2808 0024 094B     		ldr	r3, .L238+4
 2809 0026 2168     		ldr	r1, [r4]
 2810 0028 1868     		ldr	r0, [r3]
 2811 002a 0822     		movs	r2, #8
 2812 002c FFF7FEFF 		bl	program_flash
 2813              	.LVL271:
 764:src/storage.c **** 			error_message( ERR_IO );
 2814              		.loc 1 764 6 view .LVU827
 2815 0030 18B9     		cbnz	r0, .L237
 769:src/storage.c **** 		}
 2816              		.loc 1 769 4 is_stmt 1 view .LVU828
 769:src/storage.c **** 		}
 2817              		.loc 1 769 12 is_stmt 0 view .LVU829
 2818 0032 074B     		ldr	r3, .L238+8
 2819 0034 074A     		ldr	r2, .L238+12
 2820 0036 1A60     		str	r2, [r3]
 772:src/storage.c **** 
 2821              		.loc 1 772 1 view .LVU830
 2822 0038 10BD     		pop	{r4, pc}
 2823              	.L237:
 765:src/storage.c **** 			DispMsg = "Error";
 2824              		.loc 1 765 4 is_stmt 1 view .LVU831
 2825 003a 1120     		movs	r0, #17
 2826 003c FFF7FEFF 		bl	error_message
 2827              	.LVL272:
 766:src/storage.c **** 		}
 2828              		.loc 1 766 4 view .LVU832
 766:src/storage.c **** 		}
 2829              		.loc 1 766 12 is_stmt 0 view .LVU833
ARM GAS  /tmp/ccwuxJEt.s 			page 88


 2830 0040 034B     		ldr	r3, .L238+8
 2831 0042 054A     		ldr	r2, .L238+16
 2832 0044 1A60     		str	r2, [r3]
 772:src/storage.c **** 
 2833              		.loc 1 772 1 view .LVU834
 2834 0046 10BD     		pop	{r4, pc}
 2835              	.L239:
 2836              		.align	2
 2837              	.L238:
 2838 0048 00000000 		.word	main_ram
 2839 004c 00000000 		.word	backup_ram
 2840 0050 00000000 		.word	DispMsg
 2841 0054 08000000 		.word	.LC9
 2842 0058 00000000 		.word	.LC8
 2843              		.cfi_endproc
 2844              	.LFE25:
 2846              		.section	.rodata.flash_restore.str1.4,"aMS",%progbits,1
 2847              		.align	2
 2848              	.LC10:
 2849 0000 52657374 		.ascii	"Restored\000"
 2849      6F726564 
 2849      00
 2850              		.section	.text.flash_restore,"ax",%progbits
 2851              		.align	1
 2852              		.p2align 2,,3
 2853              		.global	flash_restore
 2854              		.syntax unified
 2855              		.thumb
 2856              		.thumb_func
 2857              		.fpu fpv4-sp-d16
 2859              	flash_restore:
 2860              	.LVL273:
 2861              	.LFB26:
 776:src/storage.c **** 	if ( not_running() ) {
 2862              		.loc 1 776 1 is_stmt 1 view -0
 2863              		.cfi_startproc
 2864              		@ args = 0, pretend = 0, frame = 0
 2865              		@ frame_needed = 0, uses_anonymous_args = 0
 777:src/storage.c **** 		if ( checksum_backup() ) {
 2866              		.loc 1 777 2 view .LVU836
 776:src/storage.c **** 	if ( not_running() ) {
 2867              		.loc 1 776 1 is_stmt 0 view .LVU837
 2868 0000 08B5     		push	{r3, lr}
 2869              		.cfi_def_cfa_offset 8
 2870              		.cfi_offset 3, -8
 2871              		.cfi_offset 14, -4
 777:src/storage.c **** 		if ( checksum_backup() ) {
 2872              		.loc 1 777 7 view .LVU838
 2873 0002 FFF7FEFF 		bl	not_running
 2874              	.LVL274:
 777:src/storage.c **** 		if ( checksum_backup() ) {
 2875              		.loc 1 777 5 view .LVU839
 2876 0006 A0B1     		cbz	r0, .L240
 778:src/storage.c **** 			error_message( ERR_INVALID );
 2877              		.loc 1 778 3 is_stmt 1 view .LVU840
 778:src/storage.c **** 			error_message( ERR_INVALID );
 2878              		.loc 1 778 8 is_stmt 0 view .LVU841
ARM GAS  /tmp/ccwuxJEt.s 			page 89


 2879 0008 FFF7FEFF 		bl	checksum_backup
 2880              	.LVL275:
 778:src/storage.c **** 			error_message( ERR_INVALID );
 2881              		.loc 1 778 6 view .LVU842
 2882 000c 20B1     		cbz	r0, .L242
 779:src/storage.c **** 		}
 2883              		.loc 1 779 4 is_stmt 1 view .LVU843
 787:src/storage.c **** 
 2884              		.loc 1 787 1 is_stmt 0 view .LVU844
 2885 000e BDE80840 		pop	{r3, lr}
 2886              		.cfi_remember_state
 2887              		.cfi_restore 14
 2888              		.cfi_restore 3
 2889              		.cfi_def_cfa_offset 0
 779:src/storage.c **** 		}
 2890              		.loc 1 779 4 view .LVU845
 2891 0012 1220     		movs	r0, #18
 2892 0014 FFF7FEBF 		b	error_message
 2893              	.LVL276:
 2894              	.L242:
 2895              		.cfi_restore_state
 782:src/storage.c **** 			init_state();
 2896              		.loc 1 782 4 is_stmt 1 view .LVU846
 2897 0018 064B     		ldr	r3, .L247
 2898 001a 074A     		ldr	r2, .L247+4
 2899 001c 1868     		ldr	r0, [r3]
 2900 001e 1168     		ldr	r1, [r2]
 2901 0020 4FF40062 		mov	r2, #2048
 2902 0024 FFF7FEFF 		bl	xcopy
 2903              	.LVL277:
 783:src/storage.c **** 			DispMsg = "Restored";
 2904              		.loc 1 783 4 view .LVU847
 2905 0028 FFF7FEFF 		bl	init_state
 2906              	.LVL278:
 784:src/storage.c **** 		}
 2907              		.loc 1 784 4 view .LVU848
 784:src/storage.c **** 		}
 2908              		.loc 1 784 12 is_stmt 0 view .LVU849
 2909 002c 034B     		ldr	r3, .L247+8
 2910 002e 044A     		ldr	r2, .L247+12
 2911 0030 1A60     		str	r2, [r3]
 2912              	.L240:
 787:src/storage.c **** 
 2913              		.loc 1 787 1 view .LVU850
 2914 0032 08BD     		pop	{r3, pc}
 2915              	.L248:
 2916              		.align	2
 2917              	.L247:
 2918 0034 00000000 		.word	main_ram
 2919 0038 00000000 		.word	backup_ram
 2920 003c 00000000 		.word	DispMsg
 2921 0040 00000000 		.word	.LC10
 2922              		.cfi_endproc
 2923              	.LFE26:
 2925              		.section	.text.load_program,"ax",%progbits
 2926              		.align	1
 2927              		.p2align 2,,3
ARM GAS  /tmp/ccwuxJEt.s 			page 90


 2928              		.global	load_program
 2929              		.syntax unified
 2930              		.thumb
 2931              		.thumb_func
 2932              		.fpu fpv4-sp-d16
 2934              	load_program:
 2935              	.LVL279:
 2936              	.LFB27:
 795:src/storage.c **** 	if ( not_running() ) {
 2937              		.loc 1 795 1 is_stmt 1 view -0
 2938              		.cfi_startproc
 2939              		@ args = 0, pretend = 0, frame = 0
 2940              		@ frame_needed = 0, uses_anonymous_args = 0
 796:src/storage.c **** 		if ( checksum_backup() ) {
 2941              		.loc 1 796 2 view .LVU852
 795:src/storage.c **** 	if ( not_running() ) {
 2942              		.loc 1 795 1 is_stmt 0 view .LVU853
 2943 0000 08B5     		push	{r3, lr}
 2944              		.cfi_def_cfa_offset 8
 2945              		.cfi_offset 3, -8
 2946              		.cfi_offset 14, -4
 796:src/storage.c **** 		if ( checksum_backup() ) {
 2947              		.loc 1 796 7 view .LVU854
 2948 0002 FFF7FEFF 		bl	not_running
 2949              	.LVL280:
 796:src/storage.c **** 		if ( checksum_backup() ) {
 2950              		.loc 1 796 5 view .LVU855
 2951 0006 98B1     		cbz	r0, .L249
 797:src/storage.c **** 			/*
 2952              		.loc 1 797 3 is_stmt 1 view .LVU856
 797:src/storage.c **** 			/*
 2953              		.loc 1 797 8 is_stmt 0 view .LVU857
 2954 0008 FFF7FEFF 		bl	checksum_backup
 2955              	.LVL281:
 797:src/storage.c **** 			/*
 2956              		.loc 1 797 6 view .LVU858
 2957 000c 88B9     		cbnz	r0, .L253
 804:src/storage.c **** 		append_program( BackupFlash._prog, BackupFlash._prog_size );
 2958              		.loc 1 804 3 is_stmt 1 view .LVU859
 2959              	.LBB92:
 2960              	.LBI92:
 247:src/storage.c **** {
 2961              		.loc 1 247 6 view .LVU860
 2962              	.LBB93:
 249:src/storage.c **** 	stoend();
 2963              		.loc 1 249 2 view .LVU861
 2964 000e FFF7FEFF 		bl	clrretstk_pc
 2965              	.LVL282:
 250:src/storage.c **** }
 2966              		.loc 1 250 2 view .LVU862
 2967              	.LBB94:
 2968              	.LBI94:
 237:src/storage.c **** {
 2969              		.loc 1 237 13 view .LVU863
 2970              	.LBB95:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2971              		.loc 1 239 2 view .LVU864
ARM GAS  /tmp/ccwuxJEt.s 			page 91


 2972 0012 0A4B     		ldr	r3, .L254
 2973              	.LBE95:
 2974              	.LBE94:
 2975              	.LBE93:
 2976              	.LBE92:
 805:src/storage.c **** 	}
 2977              		.loc 1 805 19 is_stmt 0 view .LVU865
 2978 0014 0A4A     		ldr	r2, .L254+4
 2979              	.LBB105:
 2980              	.LBB102:
 2981              	.LBB99:
 2982              	.LBB96:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2983              		.loc 1 239 2 view .LVU866
 2984 0016 1B68     		ldr	r3, [r3]
 2985              	.LBE96:
 2986              	.LBE99:
 2987              	.LBE102:
 2988              	.LBE105:
 805:src/storage.c **** 	}
 2989              		.loc 1 805 19 view .LVU867
 2990 0018 1068     		ldr	r0, [r2]
 2991              	.LBB106:
 2992              	.LBB103:
 2993              	.LBB100:
 2994              	.LBB97:
 239:src/storage.c **** 	Prog[ 0 ] = ( OP_NIL | OP_END );
 2995              		.loc 1 239 11 view .LVU868
 2996 001a 0122     		movs	r2, #1
 2997 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 240:src/storage.c **** }
 2998              		.loc 1 240 2 is_stmt 1 view .LVU869
 240:src/storage.c **** }
 2999              		.loc 1 240 12 is_stmt 0 view .LVU870
 3000 001e 4FF49D72 		mov	r2, #314
 3001              	.LBE97:
 3002              	.LBE100:
 3003              	.LBE103:
 3004              	.LBE106:
 805:src/storage.c **** 	}
 3005              		.loc 1 805 3 view .LVU871
 3006 0022 4188     		ldrh	r1, [r0, #2]
 3007              	.LBB107:
 3008              	.LBB104:
 3009              	.LBB101:
 3010              	.LBB98:
 240:src/storage.c **** }
 3011              		.loc 1 240 12 view .LVU872
 3012 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 3013              	.LBE98:
 3014              	.LBE101:
 3015              	.LBE104:
 3016              	.LBE107:
 805:src/storage.c **** 	}
 3017              		.loc 1 805 3 is_stmt 1 view .LVU873
 3018 0026 0430     		adds	r0, r0, #4
 807:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 92


 3019              		.loc 1 807 1 is_stmt 0 view .LVU874
 3020 0028 BDE80840 		pop	{r3, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 3
 3024              		.cfi_def_cfa_offset 0
 805:src/storage.c **** 	}
 3025              		.loc 1 805 3 view .LVU875
 3026 002c FFF7FEBF 		b	append_program
 3027              	.LVL283:
 3028              	.L249:
 3029              		.cfi_restore_state
 807:src/storage.c **** 
 3030              		.loc 1 807 1 view .LVU876
 3031 0030 08BD     		pop	{r3, pc}
 3032              	.L253:
 801:src/storage.c **** 			return;
 3033              		.loc 1 801 4 is_stmt 1 view .LVU877
 807:src/storage.c **** 
 3034              		.loc 1 807 1 is_stmt 0 view .LVU878
 3035 0032 BDE80840 		pop	{r3, lr}
 3036              		.cfi_restore 14
 3037              		.cfi_restore 3
 3038              		.cfi_def_cfa_offset 0
 801:src/storage.c **** 			return;
 3039              		.loc 1 801 4 view .LVU879
 3040 0036 1220     		movs	r0, #18
 3041 0038 FFF7FEBF 		b	report_err
 3042              	.LVL284:
 3043              	.L255:
 3044              		.align	2
 3045              	.L254:
 3046 003c 00000000 		.word	main_ram
 3047 0040 00000000 		.word	backup_ram
 3048              		.cfi_endproc
 3049              	.LFE27:
 3051              		.section	.text.load_registers,"ax",%progbits
 3052              		.align	1
 3053              		.p2align 2,,3
 3054              		.global	load_registers
 3055              		.syntax unified
 3056              		.thumb
 3057              		.thumb_func
 3058              		.fpu fpv4-sp-d16
 3060              	load_registers:
 3061              	.LVL285:
 3062              	.LFB28:
 814:src/storage.c **** 	int count;
 3063              		.loc 1 814 1 is_stmt 1 view -0
 3064              		.cfi_startproc
 3065              		@ args = 0, pretend = 0, frame = 0
 3066              		@ frame_needed = 0, uses_anonymous_args = 0
 815:src/storage.c **** 	if ( checksum_backup() ) {
 3067              		.loc 1 815 2 view .LVU881
 816:src/storage.c **** 		/*
 3068              		.loc 1 816 2 view .LVU882
 814:src/storage.c **** 	int count;
ARM GAS  /tmp/ccwuxJEt.s 			page 93


 3069              		.loc 1 814 1 is_stmt 0 view .LVU883
 3070 0000 38B5     		push	{r3, r4, r5, lr}
 3071              		.cfi_def_cfa_offset 16
 3072              		.cfi_offset 3, -16
 3073              		.cfi_offset 4, -12
 3074              		.cfi_offset 5, -8
 3075              		.cfi_offset 14, -4
 816:src/storage.c **** 		/*
 3076              		.loc 1 816 7 view .LVU884
 3077 0002 FFF7FEFF 		bl	checksum_backup
 3078              	.LVL286:
 816:src/storage.c **** 		/*
 3079              		.loc 1 816 5 view .LVU885
 3080 0006 E0B9     		cbnz	r0, .L263
 823:src/storage.c **** 	if ( is_dblmode() ) {
 3081              		.loc 1 823 2 is_stmt 1 view .LVU886
 823:src/storage.c **** 	if ( is_dblmode() ) {
 3082              		.loc 1 823 10 is_stmt 0 view .LVU887
 3083 0008 104B     		ldr	r3, .L264
 3084 000a 1B68     		ldr	r3, [r3]
 823:src/storage.c **** 	if ( is_dblmode() ) {
 3085              		.loc 1 823 8 view .LVU888
 3086 000c 93F8CF47 		ldrb	r4, [r3, #1999]	@ zero_extendqisi2
 3087              	.LVL287:
 824:src/storage.c **** 		// Don't clobber the stack in DP mode
 3088              		.loc 1 824 2 is_stmt 1 view .LVU889
 824:src/storage.c **** 		// Don't clobber the stack in DP mode
 3089              		.loc 1 824 7 is_stmt 0 view .LVU890
 3090 0010 FFF7FEFF 		bl	is_dblmode
 3091              	.LVL288:
 824:src/storage.c **** 		// Don't clobber the stack in DP mode
 3092              		.loc 1 824 5 view .LVU891
 3093 0014 00B1     		cbz	r0, .L258
 826:src/storage.c **** 	}
 3094              		.loc 1 826 3 is_stmt 1 view .LVU892
 826:src/storage.c **** 	}
 3095              		.loc 1 826 9 is_stmt 0 view .LVU893
 3096 0016 0C3C     		subs	r4, r4, #12
 3097              	.LVL289:
 3098              	.L258:
 828:src/storage.c **** 		count = BackupFlash._numregs;
 3099              		.loc 1 828 2 is_stmt 1 view .LVU894
 828:src/storage.c **** 		count = BackupFlash._numregs;
 3100              		.loc 1 828 26 is_stmt 0 view .LVU895
 3101 0018 0D4B     		ldr	r3, .L264+4
 3102 001a 1B68     		ldr	r3, [r3]
 3103 001c 93F8CF57 		ldrb	r5, [r3, #1999]	@ zero_extendqisi2
 831:src/storage.c **** }
 3104              		.loc 1 831 9 view .LVU896
 3105 0020 0020     		movs	r0, #0
 3106 0022 A542     		cmp	r5, r4
 3107 0024 A8BF     		it	ge
 3108 0026 2546     		movge	r5, r4
 3109              	.LVL290:
 831:src/storage.c **** }
 3110              		.loc 1 831 2 is_stmt 1 view .LVU897
 831:src/storage.c **** }
ARM GAS  /tmp/ccwuxJEt.s 			page 94


 3111              		.loc 1 831 9 is_stmt 0 view .LVU898
 3112 0028 FFF7FEFF 		bl	get_reg_n
 3113              	.LVL291:
 3114 002c 0446     		mov	r4, r0
 831:src/storage.c **** }
 3115              		.loc 1 831 23 view .LVU899
 3116 002e 0020     		movs	r0, #0
 3117 0030 FFF7FEFF 		bl	get_flash_reg_n
 3118              	.LVL292:
 831:src/storage.c **** }
 3119              		.loc 1 831 2 view .LVU900
 3120 0034 EA00     		lsls	r2, r5, #3
 831:src/storage.c **** }
 3121              		.loc 1 831 23 view .LVU901
 3122 0036 0146     		mov	r1, r0
 831:src/storage.c **** }
 3123              		.loc 1 831 2 view .LVU902
 3124 0038 2046     		mov	r0, r4
 832:src/storage.c **** 
 3125              		.loc 1 832 1 view .LVU903
 3126 003a BDE83840 		pop	{r3, r4, r5, lr}
 3127              		.cfi_remember_state
 3128              		.cfi_restore 14
 3129              		.cfi_restore 5
 3130              		.cfi_restore 4
 3131              		.cfi_restore 3
 3132              		.cfi_def_cfa_offset 0
 3133              	.LVL293:
 831:src/storage.c **** }
 3134              		.loc 1 831 2 view .LVU904
 3135 003e FFF7FEBF 		b	xcopy
 3136              	.LVL294:
 3137              	.L263:
 3138              		.cfi_restore_state
 820:src/storage.c **** 		return;
 3139              		.loc 1 820 3 is_stmt 1 view .LVU905
 832:src/storage.c **** 
 3140              		.loc 1 832 1 is_stmt 0 view .LVU906
 3141 0042 BDE83840 		pop	{r3, r4, r5, lr}
 3142              		.cfi_restore 14
 3143              		.cfi_restore 5
 3144              		.cfi_restore 4
 3145              		.cfi_restore 3
 3146              		.cfi_def_cfa_offset 0
 820:src/storage.c **** 		return;
 3147              		.loc 1 820 3 view .LVU907
 3148 0046 1220     		movs	r0, #18
 3149 0048 FFF7FEBF 		b	report_err
 3150              	.LVL295:
 3151              	.L265:
 3152              		.align	2
 3153              	.L264:
 3154 004c 00000000 		.word	main_ram
 3155 0050 00000000 		.word	backup_ram
 3156              		.cfi_endproc
 3157              	.LFE28:
 3159              		.section	.text.load_sigma,"ax",%progbits
ARM GAS  /tmp/ccwuxJEt.s 			page 95


 3160              		.align	1
 3161              		.p2align 2,,3
 3162              		.global	load_sigma
 3163              		.syntax unified
 3164              		.thumb
 3165              		.thumb_func
 3166              		.fpu fpv4-sp-d16
 3168              	load_sigma:
 3169              	.LVL296:
 3170              	.LFB29:
 839:src/storage.c **** 	if ( checksum_backup() ) {
 3171              		.loc 1 839 1 is_stmt 1 view -0
 3172              		.cfi_startproc
 3173              		@ args = 0, pretend = 0, frame = 0
 3174              		@ frame_needed = 0, uses_anonymous_args = 0
 840:src/storage.c **** 		/*
 3175              		.loc 1 840 2 view .LVU909
 839:src/storage.c **** 	if ( checksum_backup() ) {
 3176              		.loc 1 839 1 is_stmt 0 view .LVU910
 3177 0000 08B5     		push	{r3, lr}
 3178              		.cfi_def_cfa_offset 8
 3179              		.cfi_offset 3, -8
 3180              		.cfi_offset 14, -4
 840:src/storage.c **** 		/*
 3181              		.loc 1 840 7 view .LVU911
 3182 0002 FFF7FEFF 		bl	checksum_backup
 3183              	.LVL297:
 840:src/storage.c **** 		/*
 3184              		.loc 1 840 5 view .LVU912
 3185 0006 B0B9     		cbnz	r0, .L270
 847:src/storage.c **** 		/*
 3186              		.loc 1 847 2 is_stmt 1 view .LVU913
 847:src/storage.c **** 		/*
 3187              		.loc 1 847 9 is_stmt 0 view .LVU914
 3188 0008 0D4B     		ldr	r3, .L272
 3189 000a 1868     		ldr	r0, [r3]
 847:src/storage.c **** 		/*
 3190              		.loc 1 847 7 view .LVU915
 3191 000c 90F8DD37 		ldrb	r3, [r0, #2013]	@ zero_extendqisi2
 847:src/storage.c **** 		/*
 3192              		.loc 1 847 5 view .LVU916
 3193 0010 9B06     		lsls	r3, r3, #26
 3194 0012 0BD5     		bpl	.L271
 854:src/storage.c **** }
 3195              		.loc 1 854 2 is_stmt 1 view .LVU917
 854:src/storage.c **** }
 3196              		.loc 1 854 56 is_stmt 0 view .LVU918
 3197 0014 90F8CF37 		ldrb	r3, [r0, #1999]	@ zero_extendqisi2
 3198 0018 C3F16403 		rsb	r3, r3, #100
 854:src/storage.c **** }
 3199              		.loc 1 854 81 view .LVU919
 3200 001c 00EBC300 		add	r0, r0, r3, lsl #3
 854:src/storage.c **** }
 3201              		.loc 1 854 2 view .LVU920
 3202 0020 00F56870 		add	r0, r0, #928
 855:src/storage.c **** 
 3203              		.loc 1 855 1 view .LVU921
ARM GAS  /tmp/ccwuxJEt.s 			page 96


 3204 0024 BDE80840 		pop	{r3, lr}
 3205              		.cfi_remember_state
 3206              		.cfi_restore 14
 3207              		.cfi_restore 3
 3208              		.cfi_def_cfa_offset 0
 854:src/storage.c **** }
 3209              		.loc 1 854 2 view .LVU922
 3210 0028 FFF7FEBF 		b	sigmaCopy
 3211              	.LVL298:
 3212              	.L271:
 3213              		.cfi_restore_state
 851:src/storage.c **** 		return;
 3214              		.loc 1 851 3 is_stmt 1 view .LVU923
 855:src/storage.c **** 
 3215              		.loc 1 855 1 is_stmt 0 view .LVU924
 3216 002c BDE80840 		pop	{r3, lr}
 3217              		.cfi_remember_state
 3218              		.cfi_restore 14
 3219              		.cfi_restore 3
 3220              		.cfi_def_cfa_offset 0
 851:src/storage.c **** 		return;
 3221              		.loc 1 851 3 view .LVU925
 3222 0030 0F20     		movs	r0, #15
 3223 0032 FFF7FEBF 		b	report_err
 3224              	.LVL299:
 3225              	.L270:
 3226              		.cfi_restore_state
 844:src/storage.c **** 		return;
 3227              		.loc 1 844 3 is_stmt 1 view .LVU926
 855:src/storage.c **** 
 3228              		.loc 1 855 1 is_stmt 0 view .LVU927
 3229 0036 BDE80840 		pop	{r3, lr}
 3230              		.cfi_restore 14
 3231              		.cfi_restore 3
 3232              		.cfi_def_cfa_offset 0
 844:src/storage.c **** 		return;
 3233              		.loc 1 844 3 view .LVU928
 3234 003a 1220     		movs	r0, #18
 3235 003c FFF7FEBF 		b	report_err
 3236              	.LVL300:
 3237              	.L273:
 3238              		.align	2
 3239              	.L272:
 3240 0040 00000000 		.word	backup_ram
 3241              		.cfi_endproc
 3242              	.LFE29:
 3244              		.section	.text.load_state,"ax",%progbits
 3245              		.align	1
 3246              		.p2align 2,,3
 3247              		.global	load_state
 3248              		.syntax unified
 3249              		.thumb
 3250              		.thumb_func
 3251              		.fpu fpv4-sp-d16
 3253              	load_state:
 3254              	.LVL301:
 3255              	.LFB30:
ARM GAS  /tmp/ccwuxJEt.s 			page 97


 862:src/storage.c **** 	if ( not_running() ) {
 3256              		.loc 1 862 1 is_stmt 1 view -0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 0
 3259              		@ frame_needed = 0, uses_anonymous_args = 0
 863:src/storage.c **** 		if ( checksum_backup() ) {
 3260              		.loc 1 863 2 view .LVU930
 862:src/storage.c **** 	if ( not_running() ) {
 3261              		.loc 1 862 1 is_stmt 0 view .LVU931
 3262 0000 08B5     		push	{r3, lr}
 3263              		.cfi_def_cfa_offset 8
 3264              		.cfi_offset 3, -8
 3265              		.cfi_offset 14, -4
 863:src/storage.c **** 		if ( checksum_backup() ) {
 3266              		.loc 1 863 7 view .LVU932
 3267 0002 FFF7FEFF 		bl	not_running
 3268              	.LVL302:
 863:src/storage.c **** 		if ( checksum_backup() ) {
 3269              		.loc 1 863 5 view .LVU933
 3270 0006 98B1     		cbz	r0, .L274
 864:src/storage.c **** 			/*
 3271              		.loc 1 864 3 is_stmt 1 view .LVU934
 864:src/storage.c **** 			/*
 3272              		.loc 1 864 8 is_stmt 0 view .LVU935
 3273 0008 FFF7FEFF 		bl	checksum_backup
 3274              	.LVL303:
 864:src/storage.c **** 			/*
 3275              		.loc 1 864 6 view .LVU936
 3276 000c 88B9     		cbnz	r0, .L278
 871:src/storage.c **** 		init_state();
 3277              		.loc 1 871 3 is_stmt 1 view .LVU937
 871:src/storage.c **** 		init_state();
 3278              		.loc 1 871 11 is_stmt 0 view .LVU938
 3279 000e 0B4B     		ldr	r3, .L279
 871:src/storage.c **** 		init_state();
 3280              		.loc 1 871 20 view .LVU939
 3281 0010 0B4A     		ldr	r2, .L279+4
 871:src/storage.c **** 		init_state();
 3282              		.loc 1 871 10 view .LVU940
 3283 0012 1868     		ldr	r0, [r3]
 871:src/storage.c **** 		init_state();
 3284              		.loc 1 871 19 view .LVU941
 3285 0014 1168     		ldr	r1, [r2]
 871:src/storage.c **** 		init_state();
 3286              		.loc 1 871 3 view .LVU942
 3287 0016 00F5FA60 		add	r0, r0, #2000
 3288 001a 01F5FA61 		add	r1, r1, #2000
 3289 001e 2E22     		movs	r2, #46
 3290 0020 FFF7FEFF 		bl	xcopy
 3291              	.LVL304:
 872:src/storage.c **** 		clrretstk_pc();
 3292              		.loc 1 872 3 is_stmt 1 view .LVU943
 3293 0024 FFF7FEFF 		bl	init_state
 3294              	.LVL305:
 873:src/storage.c **** 	}
 3295              		.loc 1 873 3 view .LVU944
 875:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 98


 3296              		.loc 1 875 1 is_stmt 0 view .LVU945
 3297 0028 BDE80840 		pop	{r3, lr}
 3298              		.cfi_remember_state
 3299              		.cfi_restore 14
 3300              		.cfi_restore 3
 3301              		.cfi_def_cfa_offset 0
 873:src/storage.c **** 	}
 3302              		.loc 1 873 3 view .LVU946
 3303 002c FFF7FEBF 		b	clrretstk_pc
 3304              	.LVL306:
 3305              	.L274:
 3306              		.cfi_restore_state
 875:src/storage.c **** 
 3307              		.loc 1 875 1 view .LVU947
 3308 0030 08BD     		pop	{r3, pc}
 3309              	.L278:
 868:src/storage.c **** 			return;
 3310              		.loc 1 868 4 is_stmt 1 view .LVU948
 875:src/storage.c **** 
 3311              		.loc 1 875 1 is_stmt 0 view .LVU949
 3312 0032 BDE80840 		pop	{r3, lr}
 3313              		.cfi_restore 14
 3314              		.cfi_restore 3
 3315              		.cfi_def_cfa_offset 0
 868:src/storage.c **** 			return;
 3316              		.loc 1 868 4 view .LVU950
 3317 0036 1220     		movs	r0, #18
 3318 0038 FFF7FEBF 		b	report_err
 3319              	.LVL307:
 3320              	.L280:
 3321              		.align	2
 3322              	.L279:
 3323 003c 00000000 		.word	main_ram
 3324 0040 00000000 		.word	backup_ram
 3325              		.cfi_endproc
 3326              	.LFE30:
 3328              		.section	.text.store_program,"ax",%progbits
 3329              		.align	1
 3330              		.p2align 2,,3
 3331              		.global	store_program
 3332              		.syntax unified
 3333              		.thumb
 3334              		.thumb_func
 3335              		.fpu fpv4-sp-d16
 3337              	store_program:
 3338              	.LVL308:
 3339              	.LFB31:
 882:src/storage.c **** 	opcode lbl; 
 3340              		.loc 1 882 1 is_stmt 1 view -0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 0
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 883:src/storage.c **** 	unsigned int pc;
 3344              		.loc 1 883 2 view .LVU952
 884:src/storage.c **** 	int space_needed, count, free;
 3345              		.loc 1 884 2 view .LVU953
 885:src/storage.c **** 
ARM GAS  /tmp/ccwuxJEt.s 			page 99


 3346              		.loc 1 885 2 view .LVU954
 887:src/storage.c **** 		/*
 3347              		.loc 1 887 2 view .LVU955
 882:src/storage.c **** 	opcode lbl; 
 3348              		.loc 1 882 1 is_stmt 0 view .LVU956
 3349 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3350              		.cfi_def_cfa_offset 24
 3351              		.cfi_offset 4, -24
 3352              		.cfi_offset 5, -20
 3353              		.cfi_offset 6, -16
 3354              		.cfi_offset 7, -12
 3355              		.cfi_offset 8, -8
 3356              		.cfi_offset 14, -4
 887:src/storage.c **** 		/*
 3357              		.loc 1 887 7 view .LVU957
 3358 0004 FFF7FEFF 		bl	not_running
 3359              	.LVL309:
 887:src/storage.c **** 		/*
 3360              		.loc 1 887 5 view .LVU958
 3361 0008 0028     		cmp	r0, #0
 3362 000a 3BD0     		beq	.L281
 891:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3363              		.loc 1 891 3 is_stmt 1 view .LVU959
 3364              	.LVL310:
 892:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3365              		.loc 1 892 3 view .LVU960
 891:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3366              		.loc 1 891 8 is_stmt 0 view .LVU961
 3367 000c 314C     		ldr	r4, .L295
 3368              	.LVL311:
 891:src/storage.c **** 		if ( pc == REGION_LIBRARY || pc == REGION_XROM ) {
 3369              		.loc 1 891 8 view .LVU962
 3370 000e 2368     		ldr	r3, [r4]
 3371 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 892:src/storage.c **** 			report_err( ERR_ILLEGAL );
 3372              		.loc 1 892 6 view .LVU963
 3373 0014 5B04     		lsls	r3, r3, #17
 3374 0016 37D4     		bmi	.L291
 899:src/storage.c **** 		lbl = getprog( ProgBegin );
 3375              		.loc 1 899 3 is_stmt 1 view .LVU964
 3376 0018 0120     		movs	r0, #1
 3377 001a FFF7FEFF 		bl	update_program_bounds
 3378              	.LVL312:
 900:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3379              		.loc 1 900 3 view .LVU965
 900:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3380              		.loc 1 900 18 is_stmt 0 view .LVU966
 3381 001e 2368     		ldr	r3, [r4]
 900:src/storage.c **** 		if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 3382              		.loc 1 900 9 view .LVU967
 3383 0020 B3F8EC07 		ldrh	r0, [r3, #2028]
 3384 0024 FFF7FEFF 		bl	getprog
 3385              	.LVL313:
 901:src/storage.c **** 			report_err( ERR_NO_LBL );
 3386              		.loc 1 901 3 is_stmt 1 view .LVU968
 901:src/storage.c **** 			report_err( ERR_NO_LBL );
 3387              		.loc 1 901 9 is_stmt 0 view .LVU969
ARM GAS  /tmp/ccwuxJEt.s 			page 100


 3388 0028 00F47043 		and	r3, r0, #61440
 901:src/storage.c **** 			report_err( ERR_NO_LBL );
 3389              		.loc 1 901 6 view .LVU970
 3390 002c B3F5704F 		cmp	r3, #61440
 3391 0030 2FD1     		bne	.L284
 901:src/storage.c **** 			report_err( ERR_NO_LBL );
 3392              		.loc 1 901 20 discriminator 1 view .LVU971
 3393 0032 10F4706F 		tst	r0, #3840
 901:src/storage.c **** 			report_err( ERR_NO_LBL );
 3394              		.loc 1 901 23 discriminator 1 view .LVU972
 3395 0036 C0F30322 		ubfx	r2, r0, #8, #4
 901:src/storage.c **** 			report_err( ERR_NO_LBL );
 3396              		.loc 1 901 20 discriminator 1 view .LVU973
 3397 003a 2AD1     		bne	.L284
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3398              		.loc 1 908 3 is_stmt 1 view .LVU974
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3399              		.loc 1 908 30 is_stmt 0 view .LVU975
 3400 003c 2368     		ldr	r3, [r4]
 909:src/storage.c **** 
 3401              		.loc 1 909 39 view .LVU976
 3402 003e 264E     		ldr	r6, .L295+4
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3403              		.loc 1 908 30 view .LVU977
 3404 0040 B3F8EE57 		ldrh	r5, [r3, #2030]
 909:src/storage.c **** 
 3405              		.loc 1 909 39 view .LVU978
 3406 0044 3168     		ldr	r1, [r6]
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3407              		.loc 1 908 40 view .LVU979
 3408 0046 B3F8EC37 		ldrh	r3, [r3, #2028]
 909:src/storage.c **** 
 3409              		.loc 1 909 39 view .LVU980
 3410 004a 4F88     		ldrh	r7, [r1, #2]
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3411              		.loc 1 908 28 view .LVU981
 3412 004c 0135     		adds	r5, r5, #1
 914:src/storage.c **** 		if ( pc != 0 ) {
 3413              		.loc 1 914 8 view .LVU982
 3414 004e 0146     		mov	r1, r0
 3415 0050 4FF48040 		mov	r0, #16384
 3416              	.LVL314:
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3417              		.loc 1 908 24 view .LVU983
 3418 0054 ED1A     		subs	r5, r5, r3
 3419              	.LVL315:
 909:src/storage.c **** 
 3420              		.loc 1 909 3 is_stmt 1 view .LVU984
 914:src/storage.c **** 		if ( pc != 0 ) {
 3421              		.loc 1 914 8 is_stmt 0 view .LVU985
 3422 0056 FFF7FEFF 		bl	find_opcode_from
 3423              	.LVL316:
 909:src/storage.c **** 
 3424              		.loc 1 909 8 view .LVU986
 3425 005a C7F5FF57 		rsb	r7, r7, #8160
 3426 005e 1E37     		adds	r7, r7, #30
 3427              	.LVL317:
ARM GAS  /tmp/ccwuxJEt.s 			page 101


 914:src/storage.c **** 		if ( pc != 0 ) {
 3428              		.loc 1 914 3 is_stmt 1 view .LVU987
 915:src/storage.c **** 			/*
 3429              		.loc 1 915 3 view .LVU988
 915:src/storage.c **** 			/*
 3430              		.loc 1 915 6 is_stmt 0 view .LVU989
 3431 0060 08BB     		cbnz	r0, .L292
 908:src/storage.c **** 		free = NUMPROG_FLASH_MAX - UserFlash.size;
 3432              		.loc 1 908 24 view .LVU990
 3433 0062 2C46     		mov	r4, r5
 3434              	.LVL318:
 3435              	.L286:
 927:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3436              		.loc 1 927 3 is_stmt 1 view .LVU991
 927:src/storage.c **** 			report_err( ERR_FLASH_FULL );
 3437              		.loc 1 927 6 is_stmt 0 view .LVU992
 3438 0064 BC42     		cmp	r4, r7
 3439 0066 19DC     		bgt	.L293
 932:src/storage.c **** 	}
 3440              		.loc 1 932 3 is_stmt 1 view .LVU993
 932:src/storage.c **** 	}
 3441              		.loc 1 932 26 is_stmt 0 view .LVU994
 3442 0068 3368     		ldr	r3, [r6]
 932:src/storage.c **** 	}
 3443              		.loc 1 932 3 view .LVU995
 3444 006a 5C88     		ldrh	r4, [r3, #2]
 3445              	.LVL319:
 932:src/storage.c **** 	}
 3446              		.loc 1 932 3 view .LVU996
 3447 006c FFF7FEFF 		bl	get_current_prog
 3448              	.LVL320:
 932:src/storage.c **** 	}
 3449              		.loc 1 932 69 view .LVU997
 3450 0070 3368     		ldr	r3, [r6]
 3451 0072 5B88     		ldrh	r3, [r3, #2]
 932:src/storage.c **** 	}
 3452              		.loc 1 932 3 view .LVU998
 3453 0074 0146     		mov	r1, r0
 3454 0076 2B44     		add	r3, r3, r5
 3455 0078 2046     		mov	r0, r4
 3456 007a 2A46     		mov	r2, r5
 934:src/storage.c **** 
 3457              		.loc 1 934 1 view .LVU999
 3458 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3459              		.cfi_remember_state
 3460              		.cfi_restore 14
 3461              		.cfi_restore 8
 3462              		.cfi_restore 7
 3463              		.cfi_restore 6
 3464              		.cfi_restore 5
 3465              		.cfi_restore 4
 3466              		.cfi_def_cfa_offset 0
 3467              	.LVL321:
 932:src/storage.c **** 	}
 3468              		.loc 1 932 3 view .LVU1000
 3469 0080 FFF7FEBF 		b	flash_append
 3470              	.LVL322:
ARM GAS  /tmp/ccwuxJEt.s 			page 102


 3471              	.L281:
 3472              		.cfi_restore_state
 934:src/storage.c **** 
 3473              		.loc 1 934 1 view .LVU1001
 3474 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3475              	.LVL323:
 3476              	.L291:
 893:src/storage.c **** 			return;
 3477              		.loc 1 893 4 is_stmt 1 view .LVU1002
 934:src/storage.c **** 
 3478              		.loc 1 934 1 is_stmt 0 view .LVU1003
 3479 0088 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3480              		.cfi_remember_state
 3481              		.cfi_restore 14
 3482              		.cfi_restore 8
 3483              		.cfi_restore 7
 3484              		.cfi_restore 6
 3485              		.cfi_restore 5
 3486              		.cfi_restore 4
 3487              		.cfi_def_cfa_offset 0
 3488              	.LVL324:
 893:src/storage.c **** 			return;
 3489              		.loc 1 893 4 view .LVU1004
 3490 008c 0720     		movs	r0, #7
 3491 008e FFF7FEBF 		b	report_err
 3492              	.LVL325:
 3493              	.L284:
 3494              		.cfi_restore_state
 902:src/storage.c **** 			return;
 3495              		.loc 1 902 4 is_stmt 1 view .LVU1005
 934:src/storage.c **** 
 3496              		.loc 1 934 1 is_stmt 0 view .LVU1006
 3497 0092 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3498              		.cfi_remember_state
 3499              		.cfi_restore 14
 3500              		.cfi_restore 8
 3501              		.cfi_restore 7
 3502              		.cfi_restore 6
 3503              		.cfi_restore 5
 3504              		.cfi_restore 4
 3505              		.cfi_def_cfa_offset 0
 902:src/storage.c **** 			return;
 3506              		.loc 1 902 4 view .LVU1007
 3507 0096 0620     		movs	r0, #6
 3508              	.LVL326:
 902:src/storage.c **** 			return;
 3509              		.loc 1 902 4 view .LVU1008
 3510 0098 FFF7FEBF 		b	report_err
 3511              	.LVL327:
 3512              	.L293:
 3513              		.cfi_restore_state
 928:src/storage.c **** 			return;
 3514              		.loc 1 928 4 is_stmt 1 view .LVU1009
 934:src/storage.c **** 
 3515              		.loc 1 934 1 is_stmt 0 view .LVU1010
 3516 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3517              		.cfi_remember_state
ARM GAS  /tmp/ccwuxJEt.s 			page 103


 3518              		.cfi_restore 14
 3519              		.cfi_restore 8
 3520              		.cfi_restore 7
 3521              		.cfi_restore 6
 3522              		.cfi_restore 5
 3523              		.cfi_restore 4
 3524              		.cfi_def_cfa_offset 0
 3525              	.LVL328:
 928:src/storage.c **** 			return;
 3526              		.loc 1 928 4 view .LVU1011
 3527 00a0 1720     		movs	r0, #23
 3528 00a2 FFF7FEBF 		b	report_err
 3529              	.LVL329:
 3530              	.L292:
 3531              		.cfi_restore_state
 3532              	.LBB108:
 919:src/storage.c **** 			set_pc( pc );
 3533              		.loc 1 919 4 is_stmt 1 view .LVU1012
 919:src/storage.c **** 			set_pc( pc );
 3534              		.loc 1 919 26 is_stmt 0 view .LVU1013
 3535 00a6 2368     		ldr	r3, [r4]
 919:src/storage.c **** 			set_pc( pc );
 3536              		.loc 1 919 17 view .LVU1014
 3537 00a8 B3F8E087 		ldrh	r8, [r3, #2016]
 3538              	.LVL330:
 920:src/storage.c **** 			space_needed -= 1 + ProgEnd - ProgBegin;
 3539              		.loc 1 920 4 is_stmt 1 view .LVU1015
 3540 00ac FFF7FEFF 		bl	set_pc
 3541              	.LVL331:
 921:src/storage.c **** 			if ( space_needed <= free ) {
 3542              		.loc 1 921 4 view .LVU1016
 921:src/storage.c **** 			if ( space_needed <= free ) {
 3543              		.loc 1 921 24 is_stmt 0 view .LVU1017
 3544 00b0 2368     		ldr	r3, [r4]
 3545 00b2 B3F8EE47 		ldrh	r4, [r3, #2030]
 921:src/storage.c **** 			if ( space_needed <= free ) {
 3546              		.loc 1 921 34 view .LVU1018
 3547 00b6 B3F8EC37 		ldrh	r3, [r3, #2028]
 921:src/storage.c **** 			if ( space_needed <= free ) {
 3548              		.loc 1 921 22 view .LVU1019
 3549 00ba 0134     		adds	r4, r4, #1
 921:src/storage.c **** 			if ( space_needed <= free ) {
 3550              		.loc 1 921 32 view .LVU1020
 3551 00bc E41A     		subs	r4, r4, r3
 921:src/storage.c **** 			if ( space_needed <= free ) {
 3552              		.loc 1 921 17 view .LVU1021
 3553 00be 2C1B     		subs	r4, r5, r4
 3554              	.LVL332:
 922:src/storage.c **** 				clrprog();
 3555              		.loc 1 922 4 is_stmt 1 view .LVU1022
 922:src/storage.c **** 				clrprog();
 3556              		.loc 1 922 7 is_stmt 0 view .LVU1023
 3557 00c0 A742     		cmp	r7, r4
 3558 00c2 03DA     		bge	.L294
 3559              	.L287:
 925:src/storage.c **** 		}
 3560              		.loc 1 925 4 is_stmt 1 view .LVU1024
ARM GAS  /tmp/ccwuxJEt.s 			page 104


 3561 00c4 4046     		mov	r0, r8
 3562 00c6 FFF7FEFF 		bl	set_pc
 3563              	.LVL333:
 3564 00ca CBE7     		b	.L286
 3565              	.L294:
 923:src/storage.c **** 			}
 3566              		.loc 1 923 5 view .LVU1025
 3567 00cc FFF7FEFF 		bl	clrprog
 3568              	.LVL334:
 3569 00d0 F8E7     		b	.L287
 3570              	.L296:
 3571 00d2 00BF     		.align	2
 3572              	.L295:
 3573 00d4 00000000 		.word	main_ram
 3574 00d8 00000000 		.word	library_ram
 3575              	.LBE108:
 3576              		.cfi_endproc
 3577              	.LFE31:
 3579              		.section	.text.recall_program,"ax",%progbits
 3580              		.align	1
 3581              		.p2align 2,,3
 3582              		.global	recall_program
 3583              		.syntax unified
 3584              		.thumb
 3585              		.thumb_func
 3586              		.fpu fpv4-sp-d16
 3588              	recall_program:
 3589              	.LVL335:
 3590              	.LFB32:
 941:src/storage.c **** 	if ( not_running() ) {
 3591              		.loc 1 941 1 view -0
 3592              		.cfi_startproc
 3593              		@ args = 0, pretend = 0, frame = 0
 3594              		@ frame_needed = 0, uses_anonymous_args = 0
 942:src/storage.c **** 		if ( state_pc() == 0 ) {
 3595              		.loc 1 942 2 view .LVU1027
 941:src/storage.c **** 	if ( not_running() ) {
 3596              		.loc 1 941 1 is_stmt 0 view .LVU1028
 3597 0000 10B5     		push	{r4, lr}
 3598              		.cfi_def_cfa_offset 8
 3599              		.cfi_offset 4, -8
 3600              		.cfi_offset 14, -4
 942:src/storage.c **** 		if ( state_pc() == 0 ) {
 3601              		.loc 1 942 7 view .LVU1029
 3602 0002 FFF7FEFF 		bl	not_running
 3603              	.LVL336:
 942:src/storage.c **** 		if ( state_pc() == 0 ) {
 3604              		.loc 1 942 5 view .LVU1030
 3605 0006 B8B1     		cbz	r0, .L297
 943:src/storage.c **** 			State.pc = 1;
 3606              		.loc 1 943 3 is_stmt 1 view .LVU1031
 943:src/storage.c **** 			State.pc = 1;
 3607              		.loc 1 943 8 is_stmt 0 view .LVU1032
 3608 0008 0C4C     		ldr	r4, .L301
 3609 000a 2368     		ldr	r3, [r4]
 943:src/storage.c **** 			State.pc = 1;
 3610              		.loc 1 943 6 view .LVU1033
ARM GAS  /tmp/ccwuxJEt.s 			page 105


 3611 000c B3F8E027 		ldrh	r2, [r3, #2016]
 3612 0010 12B9     		cbnz	r2, .L299
 944:src/storage.c **** 		}
 3613              		.loc 1 944 4 is_stmt 1 view .LVU1034
 944:src/storage.c **** 		}
 3614              		.loc 1 944 13 is_stmt 0 view .LVU1035
 3615 0012 0122     		movs	r2, #1
 3616 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 3617              	.L299:
 946:src/storage.c **** 		append_program( get_current_prog(), ProgEnd - ProgBegin + 1 );
 3618              		.loc 1 946 3 is_stmt 1 view .LVU1036
 3619 0018 0120     		movs	r0, #1
 3620 001a FFF7FEFF 		bl	update_program_bounds
 3621              	.LVL337:
 947:src/storage.c **** 	}
 3622              		.loc 1 947 3 view .LVU1037
 3623 001e FFF7FEFF 		bl	get_current_prog
 3624              	.LVL338:
 947:src/storage.c **** 	}
 3625              		.loc 1 947 39 is_stmt 0 view .LVU1038
 3626 0022 2368     		ldr	r3, [r4]
 3627 0024 B3F8EE17 		ldrh	r1, [r3, #2030]
 947:src/storage.c **** 	}
 3628              		.loc 1 947 49 view .LVU1039
 3629 0028 B3F8EC37 		ldrh	r3, [r3, #2028]
 947:src/storage.c **** 	}
 3630              		.loc 1 947 47 view .LVU1040
 3631 002c C91A     		subs	r1, r1, r3
 949:src/storage.c **** 
 3632              		.loc 1 949 1 view .LVU1041
 3633 002e BDE81040 		pop	{r4, lr}
 3634              		.cfi_remember_state
 3635              		.cfi_restore 14
 3636              		.cfi_restore 4
 3637              		.cfi_def_cfa_offset 0
 947:src/storage.c **** 	}
 3638              		.loc 1 947 3 view .LVU1042
 3639 0032 0131     		adds	r1, r1, #1
 3640 0034 FFF7FEBF 		b	append_program
 3641              	.LVL339:
 3642              	.L297:
 3643              		.cfi_restore_state
 949:src/storage.c **** 
 3644              		.loc 1 949 1 view .LVU1043
 3645 0038 10BD     		pop	{r4, pc}
 3646              	.L302:
 3647 003a 00BF     		.align	2
 3648              	.L301:
 3649 003c 00000000 		.word	main_ram
 3650              		.cfi_endproc
 3651              	.LFE32:
 3653              		.section	.rodata.save_lib_file.str1.4,"aMS",%progbits,1
 3654              		.align	2
 3655              	.LC11:
 3656 0000 45727220 		.ascii	"Err slf1\000"
 3656      736C6631 
 3656      00
ARM GAS  /tmp/ccwuxJEt.s 			page 106


 3657 0009 000000   		.align	2
 3658              	.LC12:
 3659 000c 2E6C6962 		.ascii	".lib\000"
 3659      00
 3660 0011 000000   		.align	2
 3661              	.LC13:
 3662 0014 53617665 		.ascii	"Save Library File\000"
 3662      204C6962 
 3662      72617279 
 3662      2046696C 
 3662      6500
 3663 0026 0000     		.align	2
 3664              	.LC14:
 3665 0028 45727220 		.ascii	"Err slf2\000"
 3665      736C6632 
 3665      00
 3666              		.section	.text.save_lib_file,"ax",%progbits
 3667              		.align	1
 3668              		.p2align 2,,3
 3669              		.global	save_lib_file
 3670              		.syntax unified
 3671              		.thumb
 3672              		.thumb_func
 3673              		.fpu fpv4-sp-d16
 3675              	save_lib_file:
 3676              	.LVL340:
 3677              	.LFB33:
1088:src/storage.c ****   FRESULT f;
 3678              		.loc 1 1088 30 is_stmt 1 view -0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 8
 3681              		@ frame_needed = 0, uses_anonymous_args = 0
1089:src/storage.c ****   int fss;
 3682              		.loc 1 1089 3 view .LVU1045
1090:src/storage.c ****   int data = WRITE;
 3683              		.loc 1 1090 3 view .LVU1046
1091:src/storage.c ****   uint x=0;
 3684              		.loc 1 1091 3 view .LVU1047
1088:src/storage.c ****   FRESULT f;
 3685              		.loc 1 1088 30 is_stmt 0 view .LVU1048
 3686 0000 70B5     		push	{r4, r5, r6, lr}
 3687              		.cfi_def_cfa_offset 16
 3688              		.cfi_offset 4, -16
 3689              		.cfi_offset 5, -12
 3690              		.cfi_offset 6, -8
 3691              		.cfi_offset 14, -4
 3692 0002 86B0     		sub	sp, sp, #24
 3693              		.cfi_def_cfa_offset 40
1091:src/storage.c ****   uint x=0;
 3694              		.loc 1 1091 7 view .LVU1049
 3695 0004 0125     		movs	r5, #1
1092:src/storage.c **** 
 3696              		.loc 1 1092 8 view .LVU1050
 3697 0006 0023     		movs	r3, #0
1088:src/storage.c ****   FRESULT f;
 3698              		.loc 1 1088 30 view .LVU1051
 3699 0008 0446     		mov	r4, r0
ARM GAS  /tmp/ccwuxJEt.s 			page 107


1094:src/storage.c ****   if (i == 0) {
 3700              		.loc 1 1094 3 view .LVU1052
 3701 000a 1E4E     		ldr	r6, .L313
1091:src/storage.c ****   uint x=0;
 3702              		.loc 1 1091 7 view .LVU1053
 3703 000c 0495     		str	r5, [sp, #16]
1092:src/storage.c **** 
 3704              		.loc 1 1092 3 is_stmt 1 view .LVU1054
1094:src/storage.c ****   if (i == 0) {
 3705              		.loc 1 1094 3 is_stmt 0 view .LVU1055
 3706 000e 2846     		mov	r0, r5
 3707              	.LVL341:
1092:src/storage.c **** 
 3708              		.loc 1 1092 8 view .LVU1056
 3709 0010 0593     		str	r3, [sp, #20]
1094:src/storage.c ****   if (i == 0) {
 3710              		.loc 1 1094 3 is_stmt 1 view .LVU1057
 3711 0012 B047     		blx	r6
 3712              	.LVL342:
1095:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3713              		.loc 1 1095 3 view .LVU1058
1095:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 3714              		.loc 1 1095 6 is_stmt 0 view .LVU1059
 3715 0014 CCB9     		cbnz	r4, .L304
1096:src/storage.c ****     if (f != FR_OK) {
 3716              		.loc 1 1096 5 is_stmt 1 view .LVU1060
1096:src/storage.c ****     if (f != FR_OK) {
 3717              		.loc 1 1096 9 is_stmt 0 view .LVU1061
 3718 0016 1C4D     		ldr	r5, .L313+4
 3719 0018 1C4B     		ldr	r3, .L313+8
 3720 001a 6868     		ldr	r0, [r5, #4]
 3721 001c 1C49     		ldr	r1, .L313+12
 3722 001e 0B22     		movs	r2, #11
 3723 0020 9847     		blx	r3
 3724              	.LVL343:
1097:src/storage.c ****       f_close (FPT);
 3725              		.loc 1 1097 5 is_stmt 1 view .LVU1062
1097:src/storage.c ****       f_close (FPT);
 3726              		.loc 1 1097 8 is_stmt 0 view .LVU1063
 3727 0022 20BB     		cbnz	r0, .L305
 3728              	.LVL344:
 3729              	.L309:
1109:src/storage.c ****   if ( f != FR_OK ) {
 3730              		.loc 1 1109 3 is_stmt 1 view .LVU1064
1109:src/storage.c ****   if ( f != FR_OK ) {
 3731              		.loc 1 1109 7 is_stmt 0 view .LVU1065
 3732 0024 1B4A     		ldr	r2, .L313+16
 3733 0026 184B     		ldr	r3, .L313+4
 3734 0028 1168     		ldr	r1, [r2]
 3735 002a 5868     		ldr	r0, [r3, #4]
 3736 002c 1A4C     		ldr	r4, .L313+20
 3737 002e 05AB     		add	r3, sp, #20
 3738 0030 4FF48042 		mov	r2, #16384
 3739 0034 A047     		blx	r4
 3740              	.LVL345:
1110:src/storage.c ****     DispMsg = "Err slf2";
 3741              		.loc 1 1110 3 is_stmt 1 view .LVU1066
ARM GAS  /tmp/ccwuxJEt.s 			page 108


1110:src/storage.c ****     DispMsg = "Err slf2";
 3742              		.loc 1 1110 6 is_stmt 0 view .LVU1067
 3743 0036 B0B9     		cbnz	r0, .L306
 3744              	.L307:
1113:src/storage.c ****   sys_disk_write_enable(0);
 3745              		.loc 1 1113 3 is_stmt 1 view .LVU1068
 3746 0038 134A     		ldr	r2, .L313+4
 3747 003a 184B     		ldr	r3, .L313+24
 3748 003c 5068     		ldr	r0, [r2, #4]
 3749              	.LVL346:
1113:src/storage.c ****   sys_disk_write_enable(0);
 3750              		.loc 1 1113 3 is_stmt 0 view .LVU1069
 3751 003e 9847     		blx	r3
 3752              	.LVL347:
1114:src/storage.c **** }
 3753              		.loc 1 1114 3 is_stmt 1 view .LVU1070
 3754 0040 104B     		ldr	r3, .L313
 3755 0042 0020     		movs	r0, #0
 3756 0044 9847     		blx	r3
 3757              	.LVL348:
1115:src/storage.c **** 
 3758              		.loc 1 1115 1 is_stmt 0 view .LVU1071
 3759 0046 06B0     		add	sp, sp, #24
 3760              		.cfi_remember_state
 3761              		.cfi_def_cfa_offset 16
 3762              		@ sp needed
 3763 0048 70BD     		pop	{r4, r5, r6, pc}
 3764              	.LVL349:
 3765              	.L304:
 3766              		.cfi_restore_state
1105:src/storage.c ****     if (fss != 1) return;
 3767              		.loc 1 1105 5 is_stmt 1 view .LVU1072
1105:src/storage.c ****     if (fss != 1) return;
 3768              		.loc 1 1105 11 is_stmt 0 view .LVU1073
 3769 004a 04AB     		add	r3, sp, #16
 3770 004c 0293     		str	r3, [sp, #8]
 3771 004e CDE90055 		strd	r5, r5, [sp]
 3772 0052 134C     		ldr	r4, .L313+28
 3773              	.LVL350:
1105:src/storage.c ****     if (fss != 1) return;
 3774              		.loc 1 1105 11 view .LVU1074
 3775 0054 134B     		ldr	r3, .L313+32
 3776 0056 144A     		ldr	r2, .L313+36
 3777 0058 1449     		ldr	r1, .L313+40
 3778 005a 1548     		ldr	r0, .L313+44
 3779 005c A047     		blx	r4
 3780              	.LVL351:
1106:src/storage.c ****   }
 3781              		.loc 1 1106 5 is_stmt 1 view .LVU1075
1106:src/storage.c ****   }
 3782              		.loc 1 1106 8 is_stmt 0 view .LVU1076
 3783 005e 0128     		cmp	r0, #1
 3784 0060 E0D0     		beq	.L309
1115:src/storage.c **** 
 3785              		.loc 1 1115 1 view .LVU1077
 3786 0062 06B0     		add	sp, sp, #24
 3787              		.cfi_remember_state
ARM GAS  /tmp/ccwuxJEt.s 			page 109


 3788              		.cfi_def_cfa_offset 16
 3789              		@ sp needed
 3790 0064 70BD     		pop	{r4, r5, r6, pc}
 3791              	.LVL352:
 3792              	.L306:
 3793              		.cfi_restore_state
1111:src/storage.c ****   }
 3794              		.loc 1 1111 5 is_stmt 1 view .LVU1078
1111:src/storage.c ****   }
 3795              		.loc 1 1111 13 is_stmt 0 view .LVU1079
 3796 0066 134B     		ldr	r3, .L313+48
 3797 0068 134A     		ldr	r2, .L313+52
 3798 006a 1A60     		str	r2, [r3]
 3799 006c E4E7     		b	.L307
 3800              	.LVL353:
 3801              	.L305:
1098:src/storage.c ****       sys_disk_write_enable(0);
 3802              		.loc 1 1098 7 is_stmt 1 view .LVU1080
 3803 006e 0B4B     		ldr	r3, .L313+24
 3804 0070 6868     		ldr	r0, [r5, #4]
 3805              	.LVL354:
1098:src/storage.c ****       sys_disk_write_enable(0);
 3806              		.loc 1 1098 7 is_stmt 0 view .LVU1081
 3807 0072 9847     		blx	r3
 3808              	.LVL355:
1099:src/storage.c ****       DispMsg = "Err slf1";
 3809              		.loc 1 1099 7 is_stmt 1 view .LVU1082
 3810 0074 2046     		mov	r0, r4
 3811 0076 B047     		blx	r6
 3812              	.LVL356:
1100:src/storage.c ****       return;
 3813              		.loc 1 1100 7 view .LVU1083
1100:src/storage.c ****       return;
 3814              		.loc 1 1100 15 is_stmt 0 view .LVU1084
 3815 0078 0E4B     		ldr	r3, .L313+48
 3816 007a 104A     		ldr	r2, .L313+56
 3817 007c 1A60     		str	r2, [r3]
1101:src/storage.c ****     }
 3818              		.loc 1 1101 7 is_stmt 1 view .LVU1085
1115:src/storage.c **** 
 3819              		.loc 1 1115 1 is_stmt 0 view .LVU1086
 3820 007e 06B0     		add	sp, sp, #24
 3821              		.cfi_def_cfa_offset 16
 3822              		@ sp needed
 3823 0080 70BD     		pop	{r4, r5, r6, pc}
 3824              	.LVL357:
 3825              	.L314:
1115:src/storage.c **** 
 3826              		.loc 1 1115 1 view .LVU1087
 3827 0082 00BF     		.align	2
 3828              	.L313:
 3829 0084 E1030008 		.word	134218721
 3830 0088 00200010 		.word	268443648
 3831 008c 35040008 		.word	134218805
 3832 0090 18000000 		.word	.LC1
 3833 0094 00000000 		.word	library_ram
 3834 0098 41040008 		.word	134218817
ARM GAS  /tmp/ccwuxJEt.s 			page 110


 3835 009c 39040008 		.word	134218809
 3836 00a0 51030008 		.word	134218577
 3837 00a4 00000000 		.word	open_selected_file
 3838 00a8 0C000000 		.word	.LC12
 3839 00ac 2C000000 		.word	.LC2
 3840 00b0 14000000 		.word	.LC13
 3841 00b4 00000000 		.word	DispMsg
 3842 00b8 28000000 		.word	.LC14
 3843 00bc 00000000 		.word	.LC11
 3844              		.cfi_endproc
 3845              	.LFE33:
 3847              		.section	.rodata.load_lib_file.str1.4,"aMS",%progbits,1
 3848              		.align	2
 3849              	.LC15:
 3850 0000 4C6F6164 		.ascii	"Load Library File\000"
 3850      204C6962 
 3850      72617279 
 3850      2046696C 
 3850      6500
 3851 0012 0000     		.align	2
 3852              	.LC16:
 3853 0014 46696C65 		.ascii	"File too big\000"
 3853      20746F6F 
 3853      20626967 
 3853      00
 3854              		.section	.text.load_lib_file,"ax",%progbits
 3855              		.align	1
 3856              		.p2align 2,,3
 3857              		.global	load_lib_file
 3858              		.syntax unified
 3859              		.thumb
 3860              		.thumb_func
 3861              		.fpu fpv4-sp-d16
 3863              	load_lib_file:
 3864              	.LVL358:
 3865              	.LFB34:
1117:src/storage.c ****   FRESULT f;
 3866              		.loc 1 1117 30 is_stmt 1 view -0
 3867              		.cfi_startproc
 3868              		@ args = 0, pretend = 0, frame = 8
 3869              		@ frame_needed = 0, uses_anonymous_args = 0
1118:src/storage.c ****   int fss;
 3870              		.loc 1 1118 3 view .LVU1089
1119:src/storage.c ****   int data = READ;
 3871              		.loc 1 1119 3 view .LVU1090
1120:src/storage.c ****   uint x=0;
 3872              		.loc 1 1120 3 view .LVU1091
1117:src/storage.c ****   FRESULT f;
 3873              		.loc 1 1117 30 is_stmt 0 view .LVU1092
 3874 0000 10B5     		push	{r4, lr}
 3875              		.cfi_def_cfa_offset 8
 3876              		.cfi_offset 4, -8
 3877              		.cfi_offset 14, -4
1121:src/storage.c **** 
 3878              		.loc 1 1121 8 view .LVU1093
 3879 0002 0222     		movs	r2, #2
1117:src/storage.c ****   FRESULT f;
ARM GAS  /tmp/ccwuxJEt.s 			page 111


 3880              		.loc 1 1117 30 view .LVU1094
 3881 0004 86B0     		sub	sp, sp, #24
 3882              		.cfi_def_cfa_offset 32
1121:src/storage.c **** 
 3883              		.loc 1 1121 8 view .LVU1095
 3884 0006 0023     		movs	r3, #0
 3885 0008 CDE90423 		strd	r2, r3, [sp, #16]
1123:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3886              		.loc 1 1123 3 is_stmt 1 view .LVU1096
1123:src/storage.c ****     f = f_open (FPT, LIBRARY_FILE, FA_READ);
 3887              		.loc 1 1123 6 is_stmt 0 view .LVU1097
 3888 000c 08BB     		cbnz	r0, .L316
1124:src/storage.c ****     if (f != FR_OK) {
 3889              		.loc 1 1124 5 is_stmt 1 view .LVU1098
1124:src/storage.c ****     if (f != FR_OK) {
 3890              		.loc 1 1124 9 is_stmt 0 view .LVU1099
 3891 000e 1A4C     		ldr	r4, .L326
 3892 0010 1A4B     		ldr	r3, .L326+4
 3893 0012 6068     		ldr	r0, [r4, #4]
 3894              	.LVL359:
1124:src/storage.c ****     if (f != FR_OK) {
 3895              		.loc 1 1124 9 view .LVU1100
 3896 0014 1A49     		ldr	r1, .L326+8
 3897 0016 0122     		movs	r2, #1
 3898 0018 9847     		blx	r3
 3899              	.LVL360:
1125:src/storage.c ****       f_close (FPT);
 3900              		.loc 1 1125 5 is_stmt 1 view .LVU1101
1125:src/storage.c ****       f_close (FPT);
 3901              		.loc 1 1125 8 is_stmt 0 view .LVU1102
 3902 001a 0028     		cmp	r0, #0
 3903 001c 27D1     		bne	.L317
 3904              	.LVL361:
 3905              	.L321:
1136:src/storage.c ****   if ( f != FR_OK ) {
 3906              		.loc 1 1136 3 is_stmt 1 view .LVU1103
1136:src/storage.c ****   if ( f != FR_OK ) {
 3907              		.loc 1 1136 7 is_stmt 0 view .LVU1104
 3908 001e 194A     		ldr	r2, .L326+12
 3909 0020 154B     		ldr	r3, .L326
 3910 0022 1168     		ldr	r1, [r2]
 3911 0024 5868     		ldr	r0, [r3, #4]
 3912 0026 184C     		ldr	r4, .L326+16
 3913 0028 05AB     		add	r3, sp, #20
 3914 002a 4FF48042 		mov	r2, #16384
 3915 002e A047     		blx	r4
 3916              	.LVL362:
1137:src/storage.c ****     DispMsg = "Err slf2";
 3917              		.loc 1 1137 3 is_stmt 1 view .LVU1105
1137:src/storage.c ****     DispMsg = "Err slf2";
 3918              		.loc 1 1137 6 is_stmt 0 view .LVU1106
 3919 0030 10B1     		cbz	r0, .L319
1138:src/storage.c ****   }
 3920              		.loc 1 1138 5 is_stmt 1 view .LVU1107
1138:src/storage.c ****   }
 3921              		.loc 1 1138 13 is_stmt 0 view .LVU1108
 3922 0032 164B     		ldr	r3, .L326+20
ARM GAS  /tmp/ccwuxJEt.s 			page 112


 3923 0034 164A     		ldr	r2, .L326+24
 3924 0036 1A60     		str	r2, [r3]
 3925              	.L319:
1140:src/storage.c ****     DispMsg = "File too big";
 3926              		.loc 1 1140 3 is_stmt 1 view .LVU1109
1140:src/storage.c ****     DispMsg = "File too big";
 3927              		.loc 1 1140 10 is_stmt 0 view .LVU1110
 3928 0038 0F4B     		ldr	r3, .L326
 3929 003a 5868     		ldr	r0, [r3, #4]
 3930              	.LVL363:
1140:src/storage.c ****     DispMsg = "File too big";
 3931              		.loc 1 1140 6 view .LVU1111
 3932 003c 8269     		ldr	r2, [r0, #24]
 3933 003e C368     		ldr	r3, [r0, #12]
 3934 0040 9A42     		cmp	r2, r3
 3935 0042 02D0     		beq	.L322
1141:src/storage.c ****   }
 3936              		.loc 1 1141 5 is_stmt 1 view .LVU1112
1141:src/storage.c ****   }
 3937              		.loc 1 1141 13 is_stmt 0 view .LVU1113
 3938 0044 114B     		ldr	r3, .L326+20
 3939 0046 134A     		ldr	r2, .L326+28
 3940 0048 1A60     		str	r2, [r3]
 3941              	.L322:
1143:src/storage.c **** }
 3942              		.loc 1 1143 3 is_stmt 1 view .LVU1114
 3943 004a 134B     		ldr	r3, .L326+32
 3944 004c 9847     		blx	r3
 3945              	.LVL364:
1144:src/storage.c **** 
 3946              		.loc 1 1144 1 is_stmt 0 view .LVU1115
 3947 004e 06B0     		add	sp, sp, #24
 3948              		.cfi_remember_state
 3949              		.cfi_def_cfa_offset 8
 3950              		@ sp needed
 3951 0050 10BD     		pop	{r4, pc}
 3952              	.LVL365:
 3953              	.L316:
 3954              		.cfi_restore_state
1132:src/storage.c ****     if (fss != 1) return;
 3955              		.loc 1 1132 5 is_stmt 1 view .LVU1116
1132:src/storage.c ****     if (fss != 1) return;
 3956              		.loc 1 1132 11 is_stmt 0 view .LVU1117
 3957 0052 04AA     		add	r2, sp, #16
 3958 0054 CDE90033 		strd	r3, r3, [sp]
 3959 0058 0292     		str	r2, [sp, #8]
 3960 005a 104C     		ldr	r4, .L326+36
 3961 005c 104B     		ldr	r3, .L326+40
 3962 005e 114A     		ldr	r2, .L326+44
 3963 0060 1149     		ldr	r1, .L326+48
 3964 0062 1248     		ldr	r0, .L326+52
 3965              	.LVL366:
1132:src/storage.c ****     if (fss != 1) return;
 3966              		.loc 1 1132 11 view .LVU1118
 3967 0064 A047     		blx	r4
 3968              	.LVL367:
1133:src/storage.c ****   }
ARM GAS  /tmp/ccwuxJEt.s 			page 113


 3969              		.loc 1 1133 5 is_stmt 1 view .LVU1119
1133:src/storage.c ****   }
 3970              		.loc 1 1133 8 is_stmt 0 view .LVU1120
 3971 0066 0128     		cmp	r0, #1
 3972 0068 D9D0     		beq	.L321
1144:src/storage.c **** 
 3973              		.loc 1 1144 1 view .LVU1121
 3974 006a 06B0     		add	sp, sp, #24
 3975              		.cfi_remember_state
 3976              		.cfi_def_cfa_offset 8
 3977              		@ sp needed
 3978 006c 10BD     		pop	{r4, pc}
 3979              	.LVL368:
 3980              	.L317:
 3981              		.cfi_restore_state
1126:src/storage.c ****       //      DispMsg = "No file?";
 3982              		.loc 1 1126 7 is_stmt 1 view .LVU1122
 3983 006e 6068     		ldr	r0, [r4, #4]
 3984              	.LVL369:
1126:src/storage.c ****       //      DispMsg = "No file?";
 3985              		.loc 1 1126 7 is_stmt 0 view .LVU1123
 3986 0070 094B     		ldr	r3, .L326+32
 3987 0072 9847     		blx	r3
 3988              	.LVL370:
1128:src/storage.c ****     }
 3989              		.loc 1 1128 7 is_stmt 1 view .LVU1124
1144:src/storage.c **** 
 3990              		.loc 1 1144 1 is_stmt 0 view .LVU1125
 3991 0074 06B0     		add	sp, sp, #24
 3992              		.cfi_def_cfa_offset 8
 3993              		@ sp needed
 3994 0076 10BD     		pop	{r4, pc}
 3995              	.L327:
 3996              		.align	2
 3997              	.L326:
 3998 0078 00200010 		.word	268443648
 3999 007c 35040008 		.word	134218805
 4000 0080 18000000 		.word	.LC1
 4001 0084 00000000 		.word	library_ram
 4002 0088 3D040008 		.word	134218813
 4003 008c 00000000 		.word	DispMsg
 4004 0090 28000000 		.word	.LC14
 4005 0094 14000000 		.word	.LC16
 4006 0098 39040008 		.word	134218809
 4007 009c 51030008 		.word	134218577
 4008 00a0 00000000 		.word	open_selected_file
 4009 00a4 0C000000 		.word	.LC12
 4010 00a8 2C000000 		.word	.LC2
 4011 00ac 00000000 		.word	.LC15
 4012              		.cfi_endproc
 4013              	.LFE34:
 4015              		.section	.rodata.save_ram_file.str1.4,"aMS",%progbits,1
 4016              		.align	2
 4017              	.LC17:
 4018 0000 77703334 		.ascii	"wp34s/wp34c.dat\000"
 4018      732F7770 
 4018      3334632E 
ARM GAS  /tmp/ccwuxJEt.s 			page 114


 4018      64617400 
 4019              		.align	2
 4020              	.LC18:
 4021 0010 45727220 		.ascii	"Err srf1\000"
 4021      73726631 
 4021      00
 4022 0019 000000   		.align	2
 4023              	.LC19:
 4024 001c 2E646174 		.ascii	".dat\000"
 4024      00
 4025 0021 000000   		.align	2
 4026              	.LC20:
 4027 0024 53617665 		.ascii	"Save RAM File\000"
 4027      2052414D 
 4027      2046696C 
 4027      6500
 4028 0032 0000     		.align	2
 4029              	.LC21:
 4030 0034 45727220 		.ascii	"Err srf2\000"
 4030      73726632 
 4030      00
 4031              		.section	.text.save_ram_file,"ax",%progbits
 4032              		.align	1
 4033              		.p2align 2,,3
 4034              		.global	save_ram_file
 4035              		.syntax unified
 4036              		.thumb
 4037              		.thumb_func
 4038              		.fpu fpv4-sp-d16
 4040              	save_ram_file:
 4041              	.LVL371:
 4042              	.LFB35:
1146:src/storage.c ****   FRESULT f;
 4043              		.loc 1 1146 30 is_stmt 1 view -0
 4044              		.cfi_startproc
 4045              		@ args = 0, pretend = 0, frame = 8
 4046              		@ frame_needed = 0, uses_anonymous_args = 0
1147:src/storage.c ****   int fss;
 4047              		.loc 1 1147 3 view .LVU1127
1148:src/storage.c ****   int data = WRITE;
 4048              		.loc 1 1148 3 view .LVU1128
1149:src/storage.c ****   uint x=0;
 4049              		.loc 1 1149 3 view .LVU1129
1146:src/storage.c ****   FRESULT f;
 4050              		.loc 1 1146 30 is_stmt 0 view .LVU1130
 4051 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4052              		.cfi_def_cfa_offset 20
 4053              		.cfi_offset 4, -20
 4054              		.cfi_offset 5, -16
 4055              		.cfi_offset 6, -12
 4056              		.cfi_offset 7, -8
 4057              		.cfi_offset 14, -4
 4058              	.LBB109:
 4059              	.LBB110:
 206:src/storage.c **** 			      Crc, &Crc );
 4060              		.loc 1 206 9 view .LVU1131
 4061 0002 264E     		ldr	r6, .L338
ARM GAS  /tmp/ccwuxJEt.s 			page 115


 4062              	.LBE110:
 4063              	.LBE109:
1156:src/storage.c ****     if (i == 0) {
 4064              		.loc 1 1156 5 view .LVU1132
 4065 0004 264F     		ldr	r7, .L338+4
1146:src/storage.c ****   FRESULT f;
 4066              		.loc 1 1146 30 view .LVU1133
 4067 0006 87B0     		sub	sp, sp, #28
 4068              		.cfi_def_cfa_offset 48
1150:src/storage.c **** 
 4069              		.loc 1 1150 8 view .LVU1134
 4070 0008 0023     		movs	r3, #0
1149:src/storage.c ****   uint x=0;
 4071              		.loc 1 1149 7 view .LVU1135
 4072 000a 0125     		movs	r5, #1
1146:src/storage.c ****   FRESULT f;
 4073              		.loc 1 1146 30 view .LVU1136
 4074 000c 0446     		mov	r4, r0
1150:src/storage.c **** 
 4075              		.loc 1 1150 8 view .LVU1137
 4076 000e CDE90453 		strd	r5, r3, [sp, #16]
1152:src/storage.c ****     init_state();
 4077              		.loc 1 1152 5 is_stmt 1 view .LVU1138
 4078 0012 FFF7FEFF 		bl	process_cmdline_set_lift
 4079              	.LVL372:
1153:src/storage.c ****     checksum_all();
 4080              		.loc 1 1153 5 view .LVU1139
 4081 0016 FFF7FEFF 		bl	init_state
 4082              	.LVL373:
1154:src/storage.c **** 
 4083              		.loc 1 1154 5 view .LVU1140
 4084              	.LBB112:
 4085              	.LBI109:
 204:src/storage.c **** {
 4086              		.loc 1 204 5 view .LVU1141
 4087              	.LBB111:
 206:src/storage.c **** 			      Crc, &Crc );
 4088              		.loc 1 206 2 view .LVU1142
 206:src/storage.c **** 			      Crc, &Crc );
 4089              		.loc 1 206 9 is_stmt 0 view .LVU1143
 4090 001a 3068     		ldr	r0, [r6]
 4091 001c 40F2FE71 		movw	r1, #2046
 4092 0020 B0F8FE27 		ldrh	r2, [r0, #2046]
 4093 0024 4318     		adds	r3, r0, r1
 4094 0026 FFF7FEFF 		bl	test_checksum
 4095              	.LVL374:
 4096              	.LBE111:
 4097              	.LBE112:
1156:src/storage.c ****     if (i == 0) {
 4098              		.loc 1 1156 5 is_stmt 1 view .LVU1144
 4099 002a 2846     		mov	r0, r5
 4100 002c B847     		blx	r7
 4101              	.LVL375:
1157:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4102              		.loc 1 1157 5 view .LVU1145
1157:src/storage.c ****       f = f_open (FPT, STATE_FILE, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 4103              		.loc 1 1157 8 is_stmt 0 view .LVU1146
ARM GAS  /tmp/ccwuxJEt.s 			page 116


 4104 002e C4B9     		cbnz	r4, .L329
1158:src/storage.c ****       if (f != FR_OK) {
 4105              		.loc 1 1158 7 is_stmt 1 view .LVU1147
1158:src/storage.c ****       if (f != FR_OK) {
 4106              		.loc 1 1158 11 is_stmt 0 view .LVU1148
 4107 0030 1C4D     		ldr	r5, .L338+8
 4108 0032 1D4B     		ldr	r3, .L338+12
 4109 0034 6868     		ldr	r0, [r5, #4]
 4110 0036 1D49     		ldr	r1, .L338+16
 4111 0038 0B22     		movs	r2, #11
 4112 003a 9847     		blx	r3
 4113              	.LVL376:
1159:src/storage.c **** 	f_close (FPT);
 4114              		.loc 1 1159 7 is_stmt 1 view .LVU1149
1159:src/storage.c **** 	f_close (FPT);
 4115              		.loc 1 1159 10 is_stmt 0 view .LVU1150
 4116 003c 18BB     		cbnz	r0, .L330
 4117              	.LVL377:
 4118              	.L334:
1171:src/storage.c ****     if ( f != FR_OK ) {
 4119              		.loc 1 1171 5 is_stmt 1 view .LVU1151
1171:src/storage.c ****     if ( f != FR_OK ) {
 4120              		.loc 1 1171 9 is_stmt 0 view .LVU1152
 4121 003e 194B     		ldr	r3, .L338+8
 4122 0040 3168     		ldr	r1, [r6]
 4123 0042 5868     		ldr	r0, [r3, #4]
 4124 0044 1A4C     		ldr	r4, .L338+20
 4125 0046 05AB     		add	r3, sp, #20
 4126 0048 4FF40062 		mov	r2, #2048
 4127 004c A047     		blx	r4
 4128              	.LVL378:
1172:src/storage.c ****       DispMsg = "Err srf2";
 4129              		.loc 1 1172 5 is_stmt 1 view .LVU1153
1172:src/storage.c ****       DispMsg = "Err srf2";
 4130              		.loc 1 1172 8 is_stmt 0 view .LVU1154
 4131 004e B0B9     		cbnz	r0, .L331
 4132              	.L332:
1175:src/storage.c ****     sys_disk_write_enable(0);
 4133              		.loc 1 1175 5 is_stmt 1 view .LVU1155
 4134 0050 144A     		ldr	r2, .L338+8
 4135 0052 184B     		ldr	r3, .L338+24
 4136 0054 5068     		ldr	r0, [r2, #4]
 4137              	.LVL379:
1175:src/storage.c ****     sys_disk_write_enable(0);
 4138              		.loc 1 1175 5 is_stmt 0 view .LVU1156
 4139 0056 9847     		blx	r3
 4140              	.LVL380:
1176:src/storage.c **** }
 4141              		.loc 1 1176 5 is_stmt 1 view .LVU1157
 4142 0058 114B     		ldr	r3, .L338+4
 4143 005a 0020     		movs	r0, #0
 4144 005c 9847     		blx	r3
 4145              	.LVL381:
1177:src/storage.c **** 
 4146              		.loc 1 1177 1 is_stmt 0 view .LVU1158
 4147 005e 07B0     		add	sp, sp, #28
 4148              		.cfi_remember_state
ARM GAS  /tmp/ccwuxJEt.s 			page 117


 4149              		.cfi_def_cfa_offset 20
 4150              		@ sp needed
 4151 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 4152              	.LVL382:
 4153              	.L329:
 4154              		.cfi_restore_state
1167:src/storage.c ****       if (fss != 1) return;
 4155              		.loc 1 1167 7 is_stmt 1 view .LVU1159
1167:src/storage.c ****       if (fss != 1) return;
 4156              		.loc 1 1167 13 is_stmt 0 view .LVU1160
 4157 0062 04AB     		add	r3, sp, #16
 4158 0064 0293     		str	r3, [sp, #8]
 4159 0066 CDE90055 		strd	r5, r5, [sp]
 4160 006a 134C     		ldr	r4, .L338+28
 4161              	.LVL383:
1167:src/storage.c ****       if (fss != 1) return;
 4162              		.loc 1 1167 13 view .LVU1161
 4163 006c 134B     		ldr	r3, .L338+32
 4164 006e 144A     		ldr	r2, .L338+36
 4165 0070 1449     		ldr	r1, .L338+40
 4166 0072 1548     		ldr	r0, .L338+44
 4167 0074 A047     		blx	r4
 4168              	.LVL384:
1168:src/storage.c ****     }
 4169              		.loc 1 1168 7 is_stmt 1 view .LVU1162
1168:src/storage.c ****     }
 4170              		.loc 1 1168 10 is_stmt 0 view .LVU1163
 4171 0076 0128     		cmp	r0, #1
 4172 0078 E1D0     		beq	.L334
1177:src/storage.c **** 
 4173              		.loc 1 1177 1 view .LVU1164
 4174 007a 07B0     		add	sp, sp, #28
 4175              		.cfi_remember_state
 4176              		.cfi_def_cfa_offset 20
 4177              		@ sp needed
 4178 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 4179              	.LVL385:
 4180              	.L331:
 4181              		.cfi_restore_state
1173:src/storage.c ****     }
 4182              		.loc 1 1173 7 is_stmt 1 view .LVU1165
1173:src/storage.c ****     }
 4183              		.loc 1 1173 15 is_stmt 0 view .LVU1166
 4184 007e 134B     		ldr	r3, .L338+48
 4185 0080 134A     		ldr	r2, .L338+52
 4186 0082 1A60     		str	r2, [r3]
 4187 0084 E4E7     		b	.L332
 4188              	.LVL386:
 4189              	.L330:
1160:src/storage.c **** 	sys_disk_write_enable(0);
 4190              		.loc 1 1160 2 is_stmt 1 view .LVU1167
 4191 0086 0B4B     		ldr	r3, .L338+24
 4192 0088 6868     		ldr	r0, [r5, #4]
 4193              	.LVL387:
1160:src/storage.c **** 	sys_disk_write_enable(0);
 4194              		.loc 1 1160 2 is_stmt 0 view .LVU1168
 4195 008a 9847     		blx	r3
ARM GAS  /tmp/ccwuxJEt.s 			page 118


 4196              	.LVL388:
1161:src/storage.c **** 	DispMsg = "Err srf1";
 4197              		.loc 1 1161 2 is_stmt 1 view .LVU1169
 4198 008c 2046     		mov	r0, r4
 4199 008e B847     		blx	r7
 4200              	.LVL389:
1162:src/storage.c **** 	return;
 4201              		.loc 1 1162 2 view .LVU1170
1162:src/storage.c **** 	return;
 4202              		.loc 1 1162 10 is_stmt 0 view .LVU1171
 4203 0090 0E4B     		ldr	r3, .L338+48
 4204 0092 104A     		ldr	r2, .L338+56
 4205 0094 1A60     		str	r2, [r3]
1163:src/storage.c ****       }
 4206              		.loc 1 1163 2 is_stmt 1 view .LVU1172
1177:src/storage.c **** 
 4207              		.loc 1 1177 1 is_stmt 0 view .LVU1173
 4208 0096 07B0     		add	sp, sp, #28
 4209              		.cfi_def_cfa_offset 20
 4210              		@ sp needed
 4211 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 4212              	.LVL390:
 4213              	.L339:
1177:src/storage.c **** 
 4214              		.loc 1 1177 1 view .LVU1174
 4215 009a 00BF     		.align	2
 4216              	.L338:
 4217 009c 00000000 		.word	main_ram
 4218 00a0 E1030008 		.word	134218721
 4219 00a4 00200010 		.word	268443648
 4220 00a8 35040008 		.word	134218805
 4221 00ac 00000000 		.word	.LC17
 4222 00b0 41040008 		.word	134218817
 4223 00b4 39040008 		.word	134218809
 4224 00b8 51030008 		.word	134218577
 4225 00bc 00000000 		.word	open_selected_file
 4226 00c0 1C000000 		.word	.LC19
 4227 00c4 2C000000 		.word	.LC2
 4228 00c8 24000000 		.word	.LC20
 4229 00cc 00000000 		.word	DispMsg
 4230 00d0 34000000 		.word	.LC21
 4231 00d4 10000000 		.word	.LC18
 4232              		.cfi_endproc
 4233              	.LFE35:
 4235              		.section	.rodata.load_ram_file.str1.4,"aMS",%progbits,1
 4236              		.align	2
 4237              	.LC22:
 4238 0000 4C6F6164 		.ascii	"Load RAM File\000"
 4238      2052414D 
 4238      2046696C 
 4238      6500
 4239 000e 0000     		.align	2
 4240              	.LC23:
 4241 0010 45727220 		.ascii	"Err lrf2\000"
 4241      6C726632 
 4241      00
 4242              		.section	.text.load_ram_file,"ax",%progbits
ARM GAS  /tmp/ccwuxJEt.s 			page 119


 4243              		.align	1
 4244              		.p2align 2,,3
 4245              		.global	load_ram_file
 4246              		.syntax unified
 4247              		.thumb
 4248              		.thumb_func
 4249              		.fpu fpv4-sp-d16
 4251              	load_ram_file:
 4252              	.LVL391:
 4253              	.LFB36:
1179:src/storage.c ****   FRESULT f;
 4254              		.loc 1 1179 29 is_stmt 1 view -0
 4255              		.cfi_startproc
 4256              		@ args = 0, pretend = 0, frame = 8
 4257              		@ frame_needed = 0, uses_anonymous_args = 0
1180:src/storage.c ****   int fss;
 4258              		.loc 1 1180 3 view .LVU1176
1181:src/storage.c ****   int data = READ;
 4259              		.loc 1 1181 3 view .LVU1177
1182:src/storage.c ****   uint x=0;
 4260              		.loc 1 1182 3 view .LVU1178
1179:src/storage.c ****   FRESULT f;
 4261              		.loc 1 1179 29 is_stmt 0 view .LVU1179
 4262 0000 30B5     		push	{r4, r5, lr}
 4263              		.cfi_def_cfa_offset 12
 4264              		.cfi_offset 4, -12
 4265              		.cfi_offset 5, -8
 4266              		.cfi_offset 14, -4
1183:src/storage.c ****   
 4267              		.loc 1 1183 8 view .LVU1180
 4268 0002 0222     		movs	r2, #2
1179:src/storage.c ****   FRESULT f;
 4269              		.loc 1 1179 29 view .LVU1181
 4270 0004 87B0     		sub	sp, sp, #28
 4271              		.cfi_def_cfa_offset 40
1183:src/storage.c ****   
 4272              		.loc 1 1183 8 view .LVU1182
 4273 0006 0023     		movs	r3, #0
 4274 0008 CDE90423 		strd	r2, r3, [sp, #16]
1185:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4275              		.loc 1 1185 3 is_stmt 1 view .LVU1183
1185:src/storage.c ****     f = f_open (FPT, STATE_FILE, FA_READ);
 4276              		.loc 1 1185 6 is_stmt 0 view .LVU1184
 4277 000c F8B9     		cbnz	r0, .L341
1186:src/storage.c ****     if (f != FR_OK) {
 4278              		.loc 1 1186 5 is_stmt 1 view .LVU1185
1186:src/storage.c ****     if (f != FR_OK) {
 4279              		.loc 1 1186 9 is_stmt 0 view .LVU1186
 4280 000e 214C     		ldr	r4, .L352
 4281 0010 214B     		ldr	r3, .L352+4
 4282 0012 6068     		ldr	r0, [r4, #4]
 4283              	.LVL392:
1186:src/storage.c ****     if (f != FR_OK) {
 4284              		.loc 1 1186 9 view .LVU1187
 4285 0014 2149     		ldr	r1, .L352+8
 4286 0016 0122     		movs	r2, #1
 4287 0018 9847     		blx	r3
ARM GAS  /tmp/ccwuxJEt.s 			page 120


 4288              	.LVL393:
1187:src/storage.c ****       f_close (FPT);
 4289              		.loc 1 1187 5 is_stmt 1 view .LVU1188
1187:src/storage.c ****       f_close (FPT);
 4290              		.loc 1 1187 8 is_stmt 0 view .LVU1189
 4291 001a 0028     		cmp	r0, #0
 4292 001c 34D1     		bne	.L342
 4293              	.LVL394:
 4294              	.L346:
1198:src/storage.c ****   if ( f != FR_OK ) {
 4295              		.loc 1 1198 3 is_stmt 1 view .LVU1190
1198:src/storage.c ****   if ( f != FR_OK ) {
 4296              		.loc 1 1198 7 is_stmt 0 view .LVU1191
 4297 001e 204B     		ldr	r3, .L352+12
 4298 0020 1C4D     		ldr	r5, .L352
 4299 0022 1968     		ldr	r1, [r3]
 4300 0024 1F4C     		ldr	r4, .L352+16
 4301 0026 6868     		ldr	r0, [r5, #4]
 4302 0028 05AB     		add	r3, sp, #20
 4303 002a 4FF40062 		mov	r2, #2048
 4304 002e A047     		blx	r4
 4305              	.LVL395:
1199:src/storage.c ****     DispMsg = "Err lrf2";
 4306              		.loc 1 1199 3 is_stmt 1 view .LVU1192
1199:src/storage.c ****     DispMsg = "Err lrf2";
 4307              		.loc 1 1199 6 is_stmt 0 view .LVU1193
 4308 0030 0446     		mov	r4, r0
 4309 0032 D8B9     		cbnz	r0, .L351
1204:src/storage.c ****     DispMsg = "File too big";
 4310              		.loc 1 1204 3 is_stmt 1 view .LVU1194
1204:src/storage.c ****     DispMsg = "File too big";
 4311              		.loc 1 1204 10 is_stmt 0 view .LVU1195
 4312 0034 6868     		ldr	r0, [r5, #4]
 4313              	.LVL396:
1204:src/storage.c ****     DispMsg = "File too big";
 4314              		.loc 1 1204 6 view .LVU1196
 4315 0036 8269     		ldr	r2, [r0, #24]
 4316 0038 C368     		ldr	r3, [r0, #12]
 4317 003a 9A42     		cmp	r2, r3
 4318 003c 1FD0     		beq	.L347
1205:src/storage.c ****       f_close( FPT );
 4319              		.loc 1 1205 5 is_stmt 1 view .LVU1197
1205:src/storage.c ****       f_close( FPT );
 4320              		.loc 1 1205 13 is_stmt 0 view .LVU1198
 4321 003e 1A4B     		ldr	r3, .L352+20
 4322 0040 1A4A     		ldr	r2, .L352+24
 4323 0042 1A60     		str	r2, [r3]
1206:src/storage.c ****       return 1;
 4324              		.loc 1 1206 7 is_stmt 1 view .LVU1199
 4325 0044 1A4B     		ldr	r3, .L352+28
 4326 0046 9847     		blx	r3
 4327              	.LVL397:
1207:src/storage.c ****   }
 4328              		.loc 1 1207 7 view .LVU1200
1207:src/storage.c ****   }
 4329              		.loc 1 1207 14 is_stmt 0 view .LVU1201
 4330 0048 0120     		movs	r0, #1
ARM GAS  /tmp/ccwuxJEt.s 			page 121


1211:src/storage.c **** 
 4331              		.loc 1 1211 1 view .LVU1202
 4332 004a 07B0     		add	sp, sp, #28
 4333              		.cfi_remember_state
 4334              		.cfi_def_cfa_offset 12
 4335              		@ sp needed
 4336 004c 30BD     		pop	{r4, r5, pc}
 4337              	.LVL398:
 4338              	.L341:
 4339              		.cfi_restore_state
1194:src/storage.c ****     if (fss != 1) return 1;
 4340              		.loc 1 1194 5 is_stmt 1 view .LVU1203
1194:src/storage.c ****     if (fss != 1) return 1;
 4341              		.loc 1 1194 11 is_stmt 0 view .LVU1204
 4342 004e 04AA     		add	r2, sp, #16
 4343 0050 CDE90033 		strd	r3, r3, [sp]
 4344 0054 0292     		str	r2, [sp, #8]
 4345 0056 174C     		ldr	r4, .L352+32
 4346 0058 174B     		ldr	r3, .L352+36
 4347 005a 184A     		ldr	r2, .L352+40
 4348 005c 1849     		ldr	r1, .L352+44
 4349 005e 1948     		ldr	r0, .L352+48
 4350              	.LVL399:
1194:src/storage.c ****     if (fss != 1) return 1;
 4351              		.loc 1 1194 11 view .LVU1205
 4352 0060 A047     		blx	r4
 4353              	.LVL400:
1195:src/storage.c ****   }
 4354              		.loc 1 1195 5 is_stmt 1 view .LVU1206
1195:src/storage.c ****   }
 4355              		.loc 1 1195 8 is_stmt 0 view .LVU1207
 4356 0062 0128     		cmp	r0, #1
 4357 0064 DBD0     		beq	.L346
1195:src/storage.c ****   }
 4358              		.loc 1 1195 26 view .LVU1208
 4359 0066 0120     		movs	r0, #1
 4360              	.LVL401:
1211:src/storage.c **** 
 4361              		.loc 1 1211 1 view .LVU1209
 4362 0068 07B0     		add	sp, sp, #28
 4363              		.cfi_remember_state
 4364              		.cfi_def_cfa_offset 12
 4365              		@ sp needed
 4366 006a 30BD     		pop	{r4, r5, pc}
 4367              	.LVL402:
 4368              	.L351:
 4369              		.cfi_restore_state
1200:src/storage.c ****       f_close( FPT );
 4370              		.loc 1 1200 5 is_stmt 1 view .LVU1210
1200:src/storage.c ****       f_close( FPT );
 4371              		.loc 1 1200 13 is_stmt 0 view .LVU1211
 4372 006c 0E4B     		ldr	r3, .L352+20
 4373 006e 164A     		ldr	r2, .L352+52
 4374 0070 1A60     		str	r2, [r3]
1201:src/storage.c ****       return 1;
 4375              		.loc 1 1201 7 is_stmt 1 view .LVU1212
 4376 0072 6868     		ldr	r0, [r5, #4]
ARM GAS  /tmp/ccwuxJEt.s 			page 122


 4377              	.LVL403:
1201:src/storage.c ****       return 1;
 4378              		.loc 1 1201 7 is_stmt 0 view .LVU1213
 4379 0074 0E4B     		ldr	r3, .L352+28
 4380 0076 9847     		blx	r3
 4381              	.LVL404:
1202:src/storage.c ****   }
 4382              		.loc 1 1202 7 is_stmt 1 view .LVU1214
1202:src/storage.c ****   }
 4383              		.loc 1 1202 14 is_stmt 0 view .LVU1215
 4384 0078 0120     		movs	r0, #1
1211:src/storage.c **** 
 4385              		.loc 1 1211 1 view .LVU1216
 4386 007a 07B0     		add	sp, sp, #28
 4387              		.cfi_remember_state
 4388              		.cfi_def_cfa_offset 12
 4389              		@ sp needed
 4390 007c 30BD     		pop	{r4, r5, pc}
 4391              	.L347:
 4392              		.cfi_restore_state
1209:src/storage.c ****   return 0;
 4393              		.loc 1 1209 3 is_stmt 1 view .LVU1217
 4394 007e 0C4B     		ldr	r3, .L352+28
 4395 0080 9847     		blx	r3
 4396              	.LVL405:
1210:src/storage.c **** }
 4397              		.loc 1 1210 3 view .LVU1218
1210:src/storage.c **** }
 4398              		.loc 1 1210 10 is_stmt 0 view .LVU1219
 4399 0082 2046     		mov	r0, r4
1211:src/storage.c **** 
 4400              		.loc 1 1211 1 view .LVU1220
 4401 0084 07B0     		add	sp, sp, #28
 4402              		.cfi_remember_state
 4403              		.cfi_def_cfa_offset 12
 4404              		@ sp needed
 4405 0086 30BD     		pop	{r4, r5, pc}
 4406              	.LVL406:
 4407              	.L342:
 4408              		.cfi_restore_state
1188:src/storage.c ****       //      DispMsg = "No file?";
 4409              		.loc 1 1188 7 is_stmt 1 view .LVU1221
 4410 0088 6068     		ldr	r0, [r4, #4]
 4411              	.LVL407:
1188:src/storage.c ****       //      DispMsg = "No file?";
 4412              		.loc 1 1188 7 is_stmt 0 view .LVU1222
 4413 008a 094B     		ldr	r3, .L352+28
 4414 008c 9847     		blx	r3
 4415              	.LVL408:
1190:src/storage.c ****     }
 4416              		.loc 1 1190 7 is_stmt 1 view .LVU1223
1190:src/storage.c ****     }
 4417              		.loc 1 1190 14 is_stmt 0 view .LVU1224
 4418 008e 0120     		movs	r0, #1
1211:src/storage.c **** 
 4419              		.loc 1 1211 1 view .LVU1225
 4420 0090 07B0     		add	sp, sp, #28
ARM GAS  /tmp/ccwuxJEt.s 			page 123


 4421              		.cfi_def_cfa_offset 12
 4422              		@ sp needed
 4423 0092 30BD     		pop	{r4, r5, pc}
 4424              	.L353:
 4425              		.align	2
 4426              	.L352:
 4427 0094 00200010 		.word	268443648
 4428 0098 35040008 		.word	134218805
 4429 009c 00000000 		.word	.LC17
 4430 00a0 00000000 		.word	main_ram
 4431 00a4 3D040008 		.word	134218813
 4432 00a8 00000000 		.word	DispMsg
 4433 00ac 14000000 		.word	.LC16
 4434 00b0 39040008 		.word	134218809
 4435 00b4 51030008 		.word	134218577
 4436 00b8 00000000 		.word	open_selected_file
 4437 00bc 1C000000 		.word	.LC19
 4438 00c0 2C000000 		.word	.LC2
 4439 00c4 00000000 		.word	.LC22
 4440 00c8 10000000 		.word	.LC23
 4441              		.cfi_endproc
 4442              	.LFE36:
 4444              		.section	.rodata.load_backup_file.str1.4,"aMS",%progbits,1
 4445              		.align	2
 4446              	.LC24:
 4447 0000 4C6F6164 		.ascii	"Load RAM Backup File\000"
 4447      2052414D 
 4447      20426163 
 4447      6B757020 
 4447      46696C65 
 4448 0015 000000   		.align	2
 4449              	.LC25:
 4450 0018 45727220 		.ascii	"Err lbf2\000"
 4450      6C626632 
 4450      00
 4451              		.section	.text.load_backup_file,"ax",%progbits
 4452              		.align	1
 4453              		.p2align 2,,3
 4454              		.global	load_backup_file
 4455              		.syntax unified
 4456              		.thumb
 4457              		.thumb_func
 4458              		.fpu fpv4-sp-d16
 4460              	load_backup_file:
 4461              	.LVL409:
 4462              	.LFB37:
1213:src/storage.c ****   FRESULT f;
 4463              		.loc 1 1213 33 is_stmt 1 view -0
 4464              		.cfi_startproc
 4465              		@ args = 0, pretend = 0, frame = 8
 4466              		@ frame_needed = 0, uses_anonymous_args = 0
1214:src/storage.c ****   int fss;
 4467              		.loc 1 1214 3 view .LVU1227
1215:src/storage.c ****   int data = READ;
 4468              		.loc 1 1215 3 view .LVU1228
1216:src/storage.c ****   uint x=0;
 4469              		.loc 1 1216 3 view .LVU1229
ARM GAS  /tmp/ccwuxJEt.s 			page 124


1213:src/storage.c ****   FRESULT f;
 4470              		.loc 1 1213 33 is_stmt 0 view .LVU1230
 4471 0000 10B5     		push	{r4, lr}
 4472              		.cfi_def_cfa_offset 8
 4473              		.cfi_offset 4, -8
 4474              		.cfi_offset 14, -4
1217:src/storage.c **** 
 4475              		.loc 1 1217 8 view .LVU1231
 4476 0002 0222     		movs	r2, #2
1213:src/storage.c ****   FRESULT f;
 4477              		.loc 1 1213 33 view .LVU1232
 4478 0004 86B0     		sub	sp, sp, #24
 4479              		.cfi_def_cfa_offset 32
1217:src/storage.c **** 
 4480              		.loc 1 1217 8 view .LVU1233
 4481 0006 0023     		movs	r3, #0
 4482 0008 CDE90423 		strd	r2, r3, [sp, #16]
1219:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4483              		.loc 1 1219 3 is_stmt 1 view .LVU1234
1219:src/storage.c ****     f = f_open (FPT, BACKUP_FILE, FA_READ);
 4484              		.loc 1 1219 6 is_stmt 0 view .LVU1235
 4485 000c 08BB     		cbnz	r0, .L355
1220:src/storage.c ****     if (f != FR_OK) {
 4486              		.loc 1 1220 5 is_stmt 1 view .LVU1236
1220:src/storage.c ****     if (f != FR_OK) {
 4487              		.loc 1 1220 9 is_stmt 0 view .LVU1237
 4488 000e 1A4C     		ldr	r4, .L365
 4489 0010 1A4B     		ldr	r3, .L365+4
 4490 0012 6068     		ldr	r0, [r4, #4]
 4491              	.LVL410:
1220:src/storage.c ****     if (f != FR_OK) {
 4492              		.loc 1 1220 9 view .LVU1238
 4493 0014 1A49     		ldr	r1, .L365+8
 4494 0016 0122     		movs	r2, #1
 4495 0018 9847     		blx	r3
 4496              	.LVL411:
1221:src/storage.c ****       f_close (FPT);
 4497              		.loc 1 1221 5 is_stmt 1 view .LVU1239
1221:src/storage.c ****       f_close (FPT);
 4498              		.loc 1 1221 8 is_stmt 0 view .LVU1240
 4499 001a 0028     		cmp	r0, #0
 4500 001c 27D1     		bne	.L356
 4501              	.LVL412:
 4502              	.L360:
1231:src/storage.c ****   if ( f != FR_OK ) {
 4503              		.loc 1 1231 3 is_stmt 1 view .LVU1241
1231:src/storage.c ****   if ( f != FR_OK ) {
 4504              		.loc 1 1231 7 is_stmt 0 view .LVU1242
 4505 001e 194A     		ldr	r2, .L365+12
 4506 0020 154B     		ldr	r3, .L365
 4507 0022 1168     		ldr	r1, [r2]
 4508 0024 5868     		ldr	r0, [r3, #4]
 4509 0026 184C     		ldr	r4, .L365+16
 4510 0028 05AB     		add	r3, sp, #20
 4511 002a 4FF40062 		mov	r2, #2048
 4512 002e A047     		blx	r4
 4513              	.LVL413:
ARM GAS  /tmp/ccwuxJEt.s 			page 125


1232:src/storage.c ****     DispMsg = "Err lbf2";
 4514              		.loc 1 1232 3 is_stmt 1 view .LVU1243
1232:src/storage.c ****     DispMsg = "Err lbf2";
 4515              		.loc 1 1232 6 is_stmt 0 view .LVU1244
 4516 0030 10B1     		cbz	r0, .L358
1233:src/storage.c ****   }
 4517              		.loc 1 1233 5 is_stmt 1 view .LVU1245
1233:src/storage.c ****   }
 4518              		.loc 1 1233 13 is_stmt 0 view .LVU1246
 4519 0032 164B     		ldr	r3, .L365+20
 4520 0034 164A     		ldr	r2, .L365+24
 4521 0036 1A60     		str	r2, [r3]
 4522              	.L358:
1235:src/storage.c ****     DispMsg = "File too big";
 4523              		.loc 1 1235 3 is_stmt 1 view .LVU1247
1235:src/storage.c ****     DispMsg = "File too big";
 4524              		.loc 1 1235 10 is_stmt 0 view .LVU1248
 4525 0038 0F4B     		ldr	r3, .L365
 4526 003a 5868     		ldr	r0, [r3, #4]
 4527              	.LVL414:
1235:src/storage.c ****     DispMsg = "File too big";
 4528              		.loc 1 1235 6 view .LVU1249
 4529 003c 8269     		ldr	r2, [r0, #24]
 4530 003e C368     		ldr	r3, [r0, #12]
 4531 0040 9A42     		cmp	r2, r3
 4532 0042 02D0     		beq	.L361
1236:src/storage.c ****   }
 4533              		.loc 1 1236 5 is_stmt 1 view .LVU1250
1236:src/storage.c ****   }
 4534              		.loc 1 1236 13 is_stmt 0 view .LVU1251
 4535 0044 114B     		ldr	r3, .L365+20
 4536 0046 134A     		ldr	r2, .L365+28
 4537 0048 1A60     		str	r2, [r3]
 4538              	.L361:
1238:src/storage.c **** }
 4539              		.loc 1 1238 3 is_stmt 1 view .LVU1252
 4540 004a 134B     		ldr	r3, .L365+32
 4541 004c 9847     		blx	r3
 4542              	.LVL415:
1239:src/storage.c **** 
 4543              		.loc 1 1239 1 is_stmt 0 view .LVU1253
 4544 004e 06B0     		add	sp, sp, #24
 4545              		.cfi_remember_state
 4546              		.cfi_def_cfa_offset 8
 4547              		@ sp needed
 4548 0050 10BD     		pop	{r4, pc}
 4549              	.LVL416:
 4550              	.L355:
 4551              		.cfi_restore_state
1227:src/storage.c ****     if (fss != 1) return;
 4552              		.loc 1 1227 5 is_stmt 1 view .LVU1254
1227:src/storage.c ****     if (fss != 1) return;
 4553              		.loc 1 1227 11 is_stmt 0 view .LVU1255
 4554 0052 04AA     		add	r2, sp, #16
 4555 0054 CDE90033 		strd	r3, r3, [sp]
 4556 0058 0292     		str	r2, [sp, #8]
 4557 005a 104C     		ldr	r4, .L365+36
ARM GAS  /tmp/ccwuxJEt.s 			page 126


 4558 005c 104B     		ldr	r3, .L365+40
 4559 005e 114A     		ldr	r2, .L365+44
 4560 0060 1149     		ldr	r1, .L365+48
 4561 0062 1248     		ldr	r0, .L365+52
 4562              	.LVL417:
1227:src/storage.c ****     if (fss != 1) return;
 4563              		.loc 1 1227 11 view .LVU1256
 4564 0064 A047     		blx	r4
 4565              	.LVL418:
1228:src/storage.c ****   }
 4566              		.loc 1 1228 5 is_stmt 1 view .LVU1257
1228:src/storage.c ****   }
 4567              		.loc 1 1228 8 is_stmt 0 view .LVU1258
 4568 0066 0128     		cmp	r0, #1
 4569 0068 D9D0     		beq	.L360
1239:src/storage.c **** 
 4570              		.loc 1 1239 1 view .LVU1259
 4571 006a 06B0     		add	sp, sp, #24
 4572              		.cfi_remember_state
 4573              		.cfi_def_cfa_offset 8
 4574              		@ sp needed
 4575 006c 10BD     		pop	{r4, pc}
 4576              	.LVL419:
 4577              	.L356:
 4578              		.cfi_restore_state
1222:src/storage.c ****       return;
 4579              		.loc 1 1222 7 is_stmt 1 view .LVU1260
 4580 006e 6068     		ldr	r0, [r4, #4]
 4581              	.LVL420:
1222:src/storage.c ****       return;
 4582              		.loc 1 1222 7 is_stmt 0 view .LVU1261
 4583 0070 094B     		ldr	r3, .L365+32
 4584 0072 9847     		blx	r3
 4585              	.LVL421:
1223:src/storage.c ****     }
 4586              		.loc 1 1223 7 is_stmt 1 view .LVU1262
1239:src/storage.c **** 
 4587              		.loc 1 1239 1 is_stmt 0 view .LVU1263
 4588 0074 06B0     		add	sp, sp, #24
 4589              		.cfi_def_cfa_offset 8
 4590              		@ sp needed
 4591 0076 10BD     		pop	{r4, pc}
 4592              	.L366:
 4593              		.align	2
 4594              	.L365:
 4595 0078 00200010 		.word	268443648
 4596 007c 35040008 		.word	134218805
 4597 0080 00000000 		.word	.LC0
 4598 0084 00000000 		.word	backup_ram
 4599 0088 3D040008 		.word	134218813
 4600 008c 00000000 		.word	DispMsg
 4601 0090 18000000 		.word	.LC25
 4602 0094 14000000 		.word	.LC16
 4603 0098 39040008 		.word	134218809
 4604 009c 51030008 		.word	134218577
 4605 00a0 00000000 		.word	open_selected_file
 4606 00a4 1C000000 		.word	.LC19
ARM GAS  /tmp/ccwuxJEt.s 			page 127


 4607 00a8 2C000000 		.word	.LC2
 4608 00ac 00000000 		.word	.LC24
 4609              		.cfi_endproc
 4610              	.LFE37:
 4612              		.section	.rodata.save_prog_file.str1.4,"aMS",%progbits,1
 4613              		.align	2
 4614              	.LC26:
 4615 0000 57726974 		.ascii	"Write err\000"
 4615      65206572 
 4615      7200
 4616 000a 0000     		.align	2
 4617              	.LC27:
 4618 000c 57726974 		.ascii	"Written\000"
 4618      74656E00 
 4619              		.align	2
 4620              	.LC28:
 4621 0014 53617665 		.ascii	"Save current program\000"
 4621      20637572 
 4621      72656E74 
 4621      2070726F 
 4621      6772616D 
 4622 0029 000000   		.align	2
 4623              	.LC29:
 4624 002c 4D656D20 		.ascii	"Mem short\000"
 4624      73686F72 
 4624      7400
 4625              		.section	.text.save_prog_file,"ax",%progbits
 4626              		.align	1
 4627              		.p2align 2,,3
 4628              		.global	save_prog_file
 4629              		.syntax unified
 4630              		.thumb
 4631              		.thumb_func
 4632              		.fpu fpv4-sp-d16
 4634              	save_prog_file:
 4635              	.LFB39:
1267:src/storage.c ****   opcode lbl; 
 4636              		.loc 1 1267 24 is_stmt 1 view -0
 4637              		.cfi_startproc
 4638              		@ args = 0, pretend = 0, frame = 8
 4639              		@ frame_needed = 0, uses_anonymous_args = 0
1268:src/storage.c ****   unsigned int pc;
 4640              		.loc 1 1268 3 view .LVU1265
1269:src/storage.c ****   unsigned short steps, prog_crc;
 4641              		.loc 1 1269 3 view .LVU1266
1270:src/storage.c ****   FRESULT f;
 4642              		.loc 1 1270 3 view .LVU1267
1271:src/storage.c ****   int data = WRITE;
 4643              		.loc 1 1271 3 view .LVU1268
1272:src/storage.c ****   int fss;
 4644              		.loc 1 1272 3 view .LVU1269
1267:src/storage.c ****   opcode lbl; 
 4645              		.loc 1 1267 24 is_stmt 0 view .LVU1270
 4646 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4647              		.cfi_def_cfa_offset 28
 4648              		.cfi_offset 4, -28
 4649              		.cfi_offset 5, -24
ARM GAS  /tmp/ccwuxJEt.s 			page 128


 4650              		.cfi_offset 6, -20
 4651              		.cfi_offset 7, -16
 4652              		.cfi_offset 8, -12
 4653              		.cfi_offset 9, -8
 4654              		.cfi_offset 14, -4
1274:src/storage.c ****   char* buffer;
 4655              		.loc 1 1274 8 view .LVU1271
 4656 0004 0023     		movs	r3, #0
1267:src/storage.c ****   opcode lbl; 
 4657              		.loc 1 1267 24 view .LVU1272
 4658 0006 87B0     		sub	sp, sp, #28
 4659              		.cfi_def_cfa_offset 56
1274:src/storage.c ****   char* buffer;
 4660              		.loc 1 1274 8 view .LVU1273
 4661 0008 0124     		movs	r4, #1
 4662 000a CDE90443 		strd	r4, r3, [sp, #16]
1275:src/storage.c ****   FLASH_REGION* fr;
 4663              		.loc 1 1275 3 is_stmt 1 view .LVU1274
1276:src/storage.c **** 
 4664              		.loc 1 1276 3 view .LVU1275
1279:src/storage.c ****     /*
 4665              		.loc 1 1279 3 view .LVU1276
1279:src/storage.c ****     /*
 4666              		.loc 1 1279 8 is_stmt 0 view .LVU1277
 4667 000e FFF7FEFF 		bl	not_running
 4668              	.LVL422:
1279:src/storage.c ****     /*
 4669              		.loc 1 1279 6 view .LVU1278
 4670 0012 C8B1     		cbz	r0, .L367
1283:src/storage.c ****     if ( pc == REGION_XROM ) {
 4671              		.loc 1 1283 5 is_stmt 1 view .LVU1279
 4672              	.LVL423:
1284:src/storage.c ****       error_message( ERR_ILLEGAL );
 4673              		.loc 1 1284 5 view .LVU1280
1283:src/storage.c ****     if ( pc == REGION_XROM ) {
 4674              		.loc 1 1283 10 is_stmt 0 view .LVU1281
 4675 0014 464D     		ldr	r5, .L384
 4676              	.LVL424:
1283:src/storage.c ****     if ( pc == REGION_XROM ) {
 4677              		.loc 1 1283 10 view .LVU1282
 4678 0016 2B68     		ldr	r3, [r5]
 4679 0018 B3F8E037 		ldrh	r3, [r3, #2016]
1284:src/storage.c ****       error_message( ERR_ILLEGAL );
 4680              		.loc 1 1284 8 view .LVU1283
 4681 001c 9B0B     		lsrs	r3, r3, #14
 4682 001e 032B     		cmp	r3, #3
 4683 0020 72D0     		beq	.L382
1291:src/storage.c ****     lbl = getprog( ProgBegin );
 4684              		.loc 1 1291 5 is_stmt 1 view .LVU1284
 4685 0022 2046     		mov	r0, r4
 4686 0024 FFF7FEFF 		bl	update_program_bounds
 4687              	.LVL425:
1292:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4688              		.loc 1 1292 5 view .LVU1285
1292:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4689              		.loc 1 1292 20 is_stmt 0 view .LVU1286
 4690 0028 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccwuxJEt.s 			page 129


1292:src/storage.c ****     if ( !isDBL(lbl) || opDBL(lbl) != DBL_LBL ) {
 4691              		.loc 1 1292 11 view .LVU1287
 4692 002a B3F8EC07 		ldrh	r0, [r3, #2028]
 4693 002e FFF7FEFF 		bl	getprog
 4694              	.LVL426:
1293:src/storage.c ****       error_message( ERR_NO_LBL );
 4695              		.loc 1 1293 5 is_stmt 1 view .LVU1288
1293:src/storage.c ****       error_message( ERR_NO_LBL );
 4696              		.loc 1 1293 11 is_stmt 0 view .LVU1289
 4697 0032 00F47043 		and	r3, r0, #61440
1293:src/storage.c ****       error_message( ERR_NO_LBL );
 4698              		.loc 1 1293 8 view .LVU1290
 4699 0036 B3F5704F 		cmp	r3, #61440
 4700 003a 02D1     		bne	.L371
1293:src/storage.c ****       error_message( ERR_NO_LBL );
 4701              		.loc 1 1293 22 discriminator 1 view .LVU1291
 4702 003c 10F4706F 		tst	r0, #3840
 4703 0040 05D0     		beq	.L372
 4704              	.L371:
1294:src/storage.c ****       return;
 4705              		.loc 1 1294 7 is_stmt 1 view .LVU1292
 4706 0042 0620     		movs	r0, #6
 4707              	.LVL427:
1294:src/storage.c ****       return;
 4708              		.loc 1 1294 7 is_stmt 0 view .LVU1293
 4709 0044 FFF7FEFF 		bl	error_message
 4710              	.LVL428:
1295:src/storage.c ****     }
 4711              		.loc 1 1295 7 is_stmt 1 view .LVU1294
 4712              	.L367:
1340:src/storage.c **** 
 4713              		.loc 1 1340 1 is_stmt 0 view .LVU1295
 4714 0048 07B0     		add	sp, sp, #28
 4715              		.cfi_remember_state
 4716              		.cfi_def_cfa_offset 28
 4717              		@ sp needed
 4718 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4719              	.LVL429:
 4720              	.L372:
 4721              		.cfi_restore_state
1300:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4722              		.loc 1 1300 5 is_stmt 1 view .LVU1296
1300:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4723              		.loc 1 1300 17 is_stmt 0 view .LVU1297
 4724 004e 2B68     		ldr	r3, [r5]
1300:src/storage.c ****     prog_crc = crc16( get_current_prog(), steps << 1 );
 4725              		.loc 1 1300 11 view .LVU1298
 4726 0050 B3F8EE57 		ldrh	r5, [r3, #2030]
 4727 0054 B3F8EC37 		ldrh	r3, [r3, #2028]
 4728 0058 0135     		adds	r5, r5, #1
 4729 005a ED1A     		subs	r5, r5, r3
 4730 005c ADB2     		uxth	r5, r5
 4731              	.LVL430:
1301:src/storage.c ****     /*
 4732              		.loc 1 1301 5 is_stmt 1 view .LVU1299
1301:src/storage.c ****     /*
 4733              		.loc 1 1301 23 is_stmt 0 view .LVU1300
ARM GAS  /tmp/ccwuxJEt.s 			page 130


 4734 005e FFF7FEFF 		bl	get_current_prog
 4735              	.LVL431:
 4736              	.LBB113:
 4737              	.LBB114:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4738              		.loc 1 162 2 view .LVU1301
 4739 0062 6E00     		lsls	r6, r5, #1
 4740              	.LVL432:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4741              		.loc 1 162 2 view .LVU1302
 4742              	.LBE114:
 4743              	.LBI113:
 156:src/storage.c **** {
 4744              		.loc 1 156 20 is_stmt 1 view .LVU1303
 4745              	.LBB115:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4746              		.loc 1 158 2 view .LVU1304
 159:src/storage.c **** 	unsigned int i;
 4747              		.loc 1 159 2 view .LVU1305
 160:src/storage.c **** 
 4748              		.loc 1 160 2 view .LVU1306
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4749              		.loc 1 162 2 view .LVU1307
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4750              		.loc 1 162 15 view .LVU1308
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4751              		.loc 1 162 2 is_stmt 0 view .LVU1309
 4752 0064 002D     		cmp	r5, #0
 4753 0066 55D0     		beq	.L378
 4754 0068 8119     		adds	r1, r0, r6
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4755              		.loc 1 158 21 view .LVU1310
 4756 006a 45F6A524 		movw	r4, #23205
 4757              	.LVL433:
 4758              	.L374:
 163:src/storage.c **** 		crc ^= *d++;
 4759              		.loc 1 163 3 is_stmt 1 view .LVU1311
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4760              		.loc 1 164 10 is_stmt 0 view .LVU1312
 4761 006e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 4762              	.LVL434:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4763              		.loc 1 164 10 view .LVU1313
 4764 0072 63BA     		rev16	r3, r4
 4765 0074 9BB2     		uxth	r3, r3
 4766              	.LVL435:
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4767              		.loc 1 164 3 is_stmt 1 view .LVU1314
 164:src/storage.c **** 		crc ^= ( (unsigned char)( crc & 0xff ) ) >> 4;
 4768              		.loc 1 164 7 is_stmt 0 view .LVU1315
 4769 0076 5340     		eors	r3, r3, r2
 4770              	.LVL436:
 165:src/storage.c **** 		crc ^= crc << 12;
 4771              		.loc 1 165 3 is_stmt 1 view .LVU1316
 165:src/storage.c **** 		crc ^= crc << 12;
 4772              		.loc 1 165 7 is_stmt 0 view .LVU1317
 4773 0078 C3F30312 		ubfx	r2, r3, #4, #4
ARM GAS  /tmp/ccwuxJEt.s 			page 131


 4774 007c 5340     		eors	r3, r3, r2
 4775              	.LVL437:
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4776              		.loc 1 166 3 is_stmt 1 view .LVU1318
 166:src/storage.c **** 		crc ^= ( crc & 0xff ) << 5;
 4777              		.loc 1 166 7 is_stmt 0 view .LVU1319
 4778 007e 83EA0333 		eor	r3, r3, r3, lsl #12
 4779              	.LVL438:
 167:src/storage.c **** 	}
 4780              		.loc 1 167 3 is_stmt 1 view .LVU1320
 167:src/storage.c **** 	}
 4781              		.loc 1 167 25 is_stmt 0 view .LVU1321
 4782 0082 5C01     		lsls	r4, r3, #5
 4783 0084 04F4FF54 		and	r4, r4, #8160
 167:src/storage.c **** 	}
 4784              		.loc 1 167 7 view .LVU1322
 4785 0088 9BB2     		uxth	r3, r3
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4786              		.loc 1 162 2 view .LVU1323
 4787 008a 8142     		cmp	r1, r0
 167:src/storage.c **** 	}
 4788              		.loc 1 167 7 view .LVU1324
 4789 008c 84EA0304 		eor	r4, r4, r3
 4790              	.LVL439:
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4791              		.loc 1 162 27 is_stmt 1 view .LVU1325
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4792              		.loc 1 162 15 view .LVU1326
 162:src/storage.c **** 		crc  = ( (unsigned char)( crc >> 8 ) ) | ( crc << 8 );
 4793              		.loc 1 162 2 is_stmt 0 view .LVU1327
 4794 0090 EDD1     		bne	.L374
 4795              	.LVL440:
 4796              	.L373:
 169:src/storage.c **** }
 4797              		.loc 1 169 2 is_stmt 1 view .LVU1328
 169:src/storage.c **** }
 4798              		.loc 1 169 2 is_stmt 0 view .LVU1329
 4799              	.LBE115:
 4800              	.LBE113:
1305:src/storage.c **** 
 4801              		.loc 1 1305 5 is_stmt 1 view .LVU1330
 4802 0092 DFF8D080 		ldr	r8, .L384+52
1307:src/storage.c ****     if (fss != 1) return;
 4803              		.loc 1 1307 11 is_stmt 0 view .LVU1331
 4804 0096 274F     		ldr	r7, .L384+4
1305:src/storage.c **** 
 4805              		.loc 1 1305 5 view .LVU1332
 4806 0098 0120     		movs	r0, #1
 4807 009a C047     		blx	r8
 4808              	.LVL441:
1307:src/storage.c ****     if (fss != 1) return;
 4809              		.loc 1 1307 5 is_stmt 1 view .LVU1333
1307:src/storage.c ****     if (fss != 1) return;
 4810              		.loc 1 1307 11 is_stmt 0 view .LVU1334
 4811 009c 0123     		movs	r3, #1
 4812 009e 04AA     		add	r2, sp, #16
 4813 00a0 CDE90132 		strd	r3, r2, [sp, #4]
ARM GAS  /tmp/ccwuxJEt.s 			page 132


 4814 00a4 0093     		str	r3, [sp]
 4815 00a6 244A     		ldr	r2, .L384+8
 4816 00a8 244B     		ldr	r3, .L384+12
 4817 00aa 2549     		ldr	r1, .L384+16
 4818 00ac 2548     		ldr	r0, .L384+20
 4819 00ae B847     		blx	r7
 4820              	.LVL442:
1308:src/storage.c **** 
 4821              		.loc 1 1308 5 is_stmt 1 view .LVU1335
1308:src/storage.c **** 
 4822              		.loc 1 1308 8 is_stmt 0 view .LVU1336
 4823 00b0 0128     		cmp	r0, #1
 4824 00b2 C9D1     		bne	.L367
1312:src/storage.c ****     if (!buffer) {// calloc failure!
 4825              		.loc 1 1312 5 is_stmt 1 view .LVU1337
1312:src/storage.c ****     if (!buffer) {// calloc failure!
 4826              		.loc 1 1312 14 is_stmt 0 view .LVU1338
 4827 00b4 0146     		mov	r1, r0
 4828 00b6 4FF40060 		mov	r0, #2048
 4829              	.LVL443:
1312:src/storage.c ****     if (!buffer) {// calloc failure!
 4830              		.loc 1 1312 14 view .LVU1339
 4831 00ba FFF7FEFF 		bl	calloc
 4832              	.LVL444:
1313:src/storage.c ****       f_close(FPT);
 4833              		.loc 1 1313 5 is_stmt 1 view .LVU1340
1313:src/storage.c ****       f_close(FPT);
 4834              		.loc 1 1313 8 is_stmt 0 view .LVU1341
 4835 00be 0746     		mov	r7, r0
 4836 00c0 58B3     		cbz	r0, .L383
1320:src/storage.c ****     fr->size = steps;
 4837              		.loc 1 1320 5 is_stmt 1 view .LVU1342
 4838              	.LVL445:
1321:src/storage.c ****     fr->crc = prog_crc;
 4839              		.loc 1 1321 5 view .LVU1343
1322:src/storage.c **** 
 4840              		.loc 1 1322 13 is_stmt 0 view .LVU1344
 4841 00c2 8146     		mov	r9, r0
1321:src/storage.c ****     fr->crc = prog_crc;
 4842              		.loc 1 1321 14 view .LVU1345
 4843 00c4 4580     		strh	r5, [r0, #2]	@ movhi
1322:src/storage.c **** 
 4844              		.loc 1 1322 5 is_stmt 1 view .LVU1346
1322:src/storage.c **** 
 4845              		.loc 1 1322 13 is_stmt 0 view .LVU1347
 4846 00c6 29F8044B 		strh	r4, [r9], #4	@ movhi
1324:src/storage.c ****    
 4847              		.loc 1 1324 5 is_stmt 1 view .LVU1348
1324:src/storage.c ****    
 4848              		.loc 1 1324 22 is_stmt 0 view .LVU1349
 4849 00ca FFF7FEFF 		bl	get_current_prog
 4850              	.LVL446:
1326:src/storage.c ****     free(buffer);
 4851              		.loc 1 1326 9 view .LVU1350
 4852 00ce 1E4D     		ldr	r5, .L384+24
 4853              	.LVL447:
1326:src/storage.c ****     free(buffer);
ARM GAS  /tmp/ccwuxJEt.s 			page 133


 4854              		.loc 1 1326 9 view .LVU1351
 4855 00d0 1E4C     		ldr	r4, .L384+28
 4856              	.LVL448:
1324:src/storage.c ****    
 4857              		.loc 1 1324 22 view .LVU1352
 4858 00d2 0146     		mov	r1, r0
1324:src/storage.c ****    
 4859              		.loc 1 1324 5 view .LVU1353
 4860 00d4 3246     		mov	r2, r6
 4861 00d6 4846     		mov	r0, r9
 4862 00d8 FFF7FEFF 		bl	xcopy
 4863              	.LVL449:
1326:src/storage.c ****     free(buffer);
 4864              		.loc 1 1326 5 is_stmt 1 view .LVU1354
1326:src/storage.c ****     free(buffer);
 4865              		.loc 1 1326 9 is_stmt 0 view .LVU1355
 4866 00dc 321D     		adds	r2, r6, #4
 4867 00de 05AB     		add	r3, sp, #20
 4868 00e0 3946     		mov	r1, r7
 4869 00e2 6868     		ldr	r0, [r5, #4]
 4870 00e4 A047     		blx	r4
 4871              	.LVL450:
 4872 00e6 0446     		mov	r4, r0
1327:src/storage.c ****     
 4873              		.loc 1 1327 5 view .LVU1356
 4874 00e8 3846     		mov	r0, r7
 4875              	.LVL451:
1327:src/storage.c ****     
 4876              		.loc 1 1327 5 is_stmt 1 view .LVU1357
 4877 00ea FFF7FEFF 		bl	free
 4878              	.LVL452:
1329:src/storage.c ****       DispMsg = "Write err";
 4879              		.loc 1 1329 5 view .LVU1358
1333:src/storage.c ****     }
 4880              		.loc 1 1333 15 is_stmt 0 view .LVU1359
 4881 00ee 184B     		ldr	r3, .L384+32
 4882 00f0 1848     		ldr	r0, .L384+36
 4883 00f2 1949     		ldr	r1, .L384+40
1336:src/storage.c ****     sys_disk_write_enable(0);
 4884              		.loc 1 1336 5 view .LVU1360
 4885 00f4 194A     		ldr	r2, .L384+44
1333:src/storage.c ****     }
 4886              		.loc 1 1333 15 view .LVU1361
 4887 00f6 002C     		cmp	r4, #0
 4888 00f8 18BF     		it	ne
 4889 00fa 1846     		movne	r0, r3
 4890 00fc 0860     		str	r0, [r1]
1336:src/storage.c ****     sys_disk_write_enable(0);
 4891              		.loc 1 1336 5 is_stmt 1 view .LVU1362
 4892 00fe 6868     		ldr	r0, [r5, #4]
 4893 0100 9047     		blx	r2
 4894              	.LVL453:
1337:src/storage.c ****     
 4895              		.loc 1 1337 5 view .LVU1363
 4896 0102 0020     		movs	r0, #0
 4897 0104 C047     		blx	r8
 4898              	.LVL454:
ARM GAS  /tmp/ccwuxJEt.s 			page 134


 4899 0106 9FE7     		b	.L367
 4900              	.LVL455:
 4901              	.L382:
1285:src/storage.c ****       return;
 4902              		.loc 1 1285 7 view .LVU1364
 4903 0108 0720     		movs	r0, #7
 4904 010a FFF7FEFF 		bl	error_message
 4905              	.LVL456:
1286:src/storage.c ****     }
 4906              		.loc 1 1286 7 view .LVU1365
1340:src/storage.c **** 
 4907              		.loc 1 1340 1 is_stmt 0 view .LVU1366
 4908 010e 07B0     		add	sp, sp, #28
 4909              		.cfi_remember_state
 4910              		.cfi_def_cfa_offset 28
 4911              		@ sp needed
 4912 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4913              	.LVL457:
 4914              	.L378:
 4915              		.cfi_restore_state
 4916              	.LBB117:
 4917              	.LBB116:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4918              		.loc 1 158 21 view .LVU1367
 4919 0114 45F6A524 		movw	r4, #23205
 4920 0118 BBE7     		b	.L373
 4921              	.LVL458:
 4922              	.L383:
 158:src/storage.c **** 	unsigned char *d = (unsigned char *) base;
 4923              		.loc 1 158 21 view .LVU1368
 4924              	.LBE116:
 4925              	.LBE117:
1314:src/storage.c ****       sys_disk_write_enable(0);
 4926              		.loc 1 1314 7 is_stmt 1 view .LVU1369
 4927 011a 0B4A     		ldr	r2, .L384+24
 4928 011c 0F4B     		ldr	r3, .L384+44
 4929 011e 5068     		ldr	r0, [r2, #4]
 4930              	.LVL459:
1314:src/storage.c ****       sys_disk_write_enable(0);
 4931              		.loc 1 1314 7 is_stmt 0 view .LVU1370
 4932 0120 9847     		blx	r3
 4933              	.LVL460:
1315:src/storage.c ****       DispMsg = "Mem short";
 4934              		.loc 1 1315 7 is_stmt 1 view .LVU1371
 4935 0122 3846     		mov	r0, r7
 4936 0124 C047     		blx	r8
 4937              	.LVL461:
1316:src/storage.c ****       return;
 4938              		.loc 1 1316 7 view .LVU1372
1316:src/storage.c ****       return;
 4939              		.loc 1 1316 15 is_stmt 0 view .LVU1373
 4940 0126 0C4B     		ldr	r3, .L384+40
 4941 0128 0D4A     		ldr	r2, .L384+48
 4942 012a 1A60     		str	r2, [r3]
1317:src/storage.c ****     }
 4943              		.loc 1 1317 7 is_stmt 1 view .LVU1374
 4944 012c 8CE7     		b	.L367
ARM GAS  /tmp/ccwuxJEt.s 			page 135


 4945              	.L385:
 4946 012e 00BF     		.align	2
 4947              	.L384:
 4948 0130 00000000 		.word	main_ram
 4949 0134 51030008 		.word	134218577
 4950 0138 1C000000 		.word	.LC19
 4951 013c 00000000 		.word	open_selected_file
 4952 0140 2C000000 		.word	.LC2
 4953 0144 14000000 		.word	.LC28
 4954 0148 00200010 		.word	268443648
 4955 014c 41040008 		.word	134218817
 4956 0150 00000000 		.word	.LC26
 4957 0154 0C000000 		.word	.LC27
 4958 0158 00000000 		.word	DispMsg
 4959 015c 39040008 		.word	134218809
 4960 0160 2C000000 		.word	.LC29
 4961 0164 E1030008 		.word	134218721
 4962              		.cfi_endproc
 4963              	.LFE39:
 4965              		.section	.rodata.load_prog_file.str1.4,"aMS",%progbits,1
 4966              		.align	2
 4967              	.LC30:
 4968 0000 4C6F6164 		.ascii	"Load PROG File\000"
 4968      2050524F 
 4968      47204669 
 4968      6C6500
 4969 000f 00       		.align	2
 4970              	.LC31:
 4971 0010 46696C65 		.ascii	"File odd\000"
 4971      206F6464 
 4971      00
 4972 0019 000000   		.align	2
 4973              	.LC32:
 4974 001c 46696C65 		.ascii	"File crc err\000"
 4974      20637263 
 4974      20657272 
 4974      00
 4975              		.section	.text.load_prog_file,"ax",%progbits
 4976              		.align	1
 4977              		.p2align 2,,3
 4978              		.global	load_prog_file
 4979              		.syntax unified
 4980              		.thumb
 4981              		.thumb_func
 4982              		.fpu fpv4-sp-d16
 4984              	load_prog_file:
 4985              	.LFB40:
1342:src/storage.c ****   int fss, fsize;
 4986              		.loc 1 1342 24 view -0
 4987              		.cfi_startproc
 4988              		@ args = 0, pretend = 0, frame = 8
 4989              		@ frame_needed = 0, uses_anonymous_args = 0
1343:src/storage.c ****   int data = READ;
 4990              		.loc 1 1343 3 view .LVU1376
1344:src/storage.c ****   uint x=0;
 4991              		.loc 1 1344 3 view .LVU1377
1342:src/storage.c ****   int fss, fsize;
ARM GAS  /tmp/ccwuxJEt.s 			page 136


 4992              		.loc 1 1342 24 is_stmt 0 view .LVU1378
 4993 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4994              		.cfi_def_cfa_offset 20
 4995              		.cfi_offset 4, -20
 4996              		.cfi_offset 5, -16
 4997              		.cfi_offset 6, -12
 4998              		.cfi_offset 7, -8
 4999              		.cfi_offset 14, -4
 5000 0002 87B0     		sub	sp, sp, #28
 5001              		.cfi_def_cfa_offset 48
1345:src/storage.c ****   FLASH_REGION* fr;
 5002              		.loc 1 1345 8 view .LVU1379
 5003 0004 0023     		movs	r3, #0
1344:src/storage.c ****   uint x=0;
 5004              		.loc 1 1344 7 view .LVU1380
 5005 0006 0221     		movs	r1, #2
1349:src/storage.c ****   if (fss != 1) return;
 5006              		.loc 1 1349 9 view .LVU1381
 5007 0008 04AA     		add	r2, sp, #16
1345:src/storage.c ****   FLASH_REGION* fr;
 5008              		.loc 1 1345 8 view .LVU1382
 5009 000a CDE90413 		strd	r1, r3, [sp, #16]
1346:src/storage.c ****   char* buffer;
 5010              		.loc 1 1346 3 is_stmt 1 view .LVU1383
1347:src/storage.c **** 
 5011              		.loc 1 1347 3 view .LVU1384
1349:src/storage.c ****   if (fss != 1) return;
 5012              		.loc 1 1349 3 view .LVU1385
1349:src/storage.c ****   if (fss != 1) return;
 5013              		.loc 1 1349 9 is_stmt 0 view .LVU1386
 5014 000e CDE90033 		strd	r3, r3, [sp]
 5015 0012 0292     		str	r2, [sp, #8]
 5016 0014 284C     		ldr	r4, .L400
 5017 0016 294B     		ldr	r3, .L400+4
 5018 0018 294A     		ldr	r2, .L400+8
 5019 001a 2A49     		ldr	r1, .L400+12
 5020 001c 2A48     		ldr	r0, .L400+16
 5021 001e A047     		blx	r4
 5022              	.LVL462:
1350:src/storage.c **** 
 5023              		.loc 1 1350 3 is_stmt 1 view .LVU1387
1350:src/storage.c **** 
 5024              		.loc 1 1350 6 is_stmt 0 view .LVU1388
 5025 0020 0128     		cmp	r0, #1
 5026 0022 0BD1     		bne	.L386
1354:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5027              		.loc 1 1354 3 is_stmt 1 view .LVU1389
1354:src/storage.c ****   if (fsize > LIBRARY_SIZE) {// too big! Wrong file?
 5028              		.loc 1 1354 11 is_stmt 0 view .LVU1390
 5029 0024 294F     		ldr	r7, .L400+20
 5030 0026 7D68     		ldr	r5, [r7, #4]
 5031 0028 EE68     		ldr	r6, [r5, #12]
 5032              	.LVL463:
1355:src/storage.c ****     f_close(FPT);
 5033              		.loc 1 1355 3 is_stmt 1 view .LVU1391
1355:src/storage.c ****     f_close(FPT);
 5034              		.loc 1 1355 6 is_stmt 0 view .LVU1392
ARM GAS  /tmp/ccwuxJEt.s 			page 137


 5035 002a B6F5804F 		cmp	r6, #16384
 5036 002e 07DD     		ble	.L388
1356:src/storage.c ****     DispMsg = "File too big";
 5037              		.loc 1 1356 5 is_stmt 1 view .LVU1393
 5038 0030 274B     		ldr	r3, .L400+24
 5039 0032 2846     		mov	r0, r5
 5040              	.LVL464:
1356:src/storage.c ****     DispMsg = "File too big";
 5041              		.loc 1 1356 5 is_stmt 0 view .LVU1394
 5042 0034 9847     		blx	r3
 5043              	.LVL465:
1357:src/storage.c ****     return;
 5044              		.loc 1 1357 5 is_stmt 1 view .LVU1395
1357:src/storage.c ****     return;
 5045              		.loc 1 1357 13 is_stmt 0 view .LVU1396
 5046 0036 274B     		ldr	r3, .L400+28
 5047 0038 274A     		ldr	r2, .L400+32
 5048 003a 1A60     		str	r2, [r3]
1358:src/storage.c ****   }
 5049              		.loc 1 1358 5 is_stmt 1 view .LVU1397
 5050              	.LVL466:
 5051              	.L386:
1386:src/storage.c **** 
 5052              		.loc 1 1386 1 is_stmt 0 view .LVU1398
 5053 003c 07B0     		add	sp, sp, #28
 5054              		.cfi_remember_state
 5055              		.cfi_def_cfa_offset 20
 5056              		@ sp needed
 5057 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 5058              	.LVL467:
 5059              	.L388:
 5060              		.cfi_restore_state
1360:src/storage.c ****   if (!buffer) {// calloc failure!
 5061              		.loc 1 1360 3 is_stmt 1 view .LVU1399
1360:src/storage.c ****   if (!buffer) {// calloc failure!
 5062              		.loc 1 1360 31 is_stmt 0 view .LVU1400
 5063 0040 26F0FF03 		bic	r3, r6, #255
1360:src/storage.c ****   if (!buffer) {// calloc failure!
 5064              		.loc 1 1360 12 view .LVU1401
 5065 0044 0146     		mov	r1, r0
 5066 0046 03F58070 		add	r0, r3, #256
 5067              	.LVL468:
1360:src/storage.c ****   if (!buffer) {// calloc failure!
 5068              		.loc 1 1360 12 view .LVU1402
 5069 004a FFF7FEFF 		bl	calloc
 5070              	.LVL469:
1361:src/storage.c ****     f_close(FPT);
 5071              		.loc 1 1361 3 is_stmt 1 view .LVU1403
1361:src/storage.c ****     f_close(FPT);
 5072              		.loc 1 1361 6 is_stmt 0 view .LVU1404
 5073 004e 0446     		mov	r4, r0
 5074 0050 58B3     		cbz	r0, .L397
1367:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5075              		.loc 1 1367 3 is_stmt 1 view .LVU1405
 5076 0052 3246     		mov	r2, r6
 5077 0054 2846     		mov	r0, r5
 5078              	.LVL470:
ARM GAS  /tmp/ccwuxJEt.s 			page 138


1367:src/storage.c ****   if (!f_eof(FPT)) { //odd?
 5079              		.loc 1 1367 3 is_stmt 0 view .LVU1406
 5080 0056 05AB     		add	r3, sp, #20
 5081 0058 204D     		ldr	r5, .L400+36
 5082 005a 2146     		mov	r1, r4
 5083 005c A847     		blx	r5
 5084              	.LVL471:
1368:src/storage.c ****     free(buffer);
 5085              		.loc 1 1368 3 is_stmt 1 view .LVU1407
1368:src/storage.c ****     free(buffer);
 5086              		.loc 1 1368 8 is_stmt 0 view .LVU1408
 5087 005e 7868     		ldr	r0, [r7, #4]
1368:src/storage.c ****     free(buffer);
 5088              		.loc 1 1368 6 view .LVU1409
 5089 0060 8269     		ldr	r2, [r0, #24]
 5090 0062 C368     		ldr	r3, [r0, #12]
 5091 0064 9A42     		cmp	r2, r3
 5092 0066 12D1     		bne	.L398
1374:src/storage.c **** 
 5093              		.loc 1 1374 3 is_stmt 1 view .LVU1410
 5094 0068 194B     		ldr	r3, .L400+24
 5095 006a 9847     		blx	r3
 5096              	.LVL472:
1376:src/storage.c ****     
 5097              		.loc 1 1376 3 view .LVU1411
1378:src/storage.c ****     DispMsg = "File crc err";
 5098              		.loc 1 1378 3 view .LVU1412
1378:src/storage.c ****     DispMsg = "File crc err";
 5099              		.loc 1 1378 7 is_stmt 0 view .LVU1413
 5100 006c 2146     		mov	r1, r4
 5101 006e 2046     		mov	r0, r4
 5102 0070 FFF7FEFF 		bl	checksum_region
 5103              	.LVL473:
1378:src/storage.c ****     DispMsg = "File crc err";
 5104              		.loc 1 1378 6 view .LVU1414
 5105 0074 A8B9     		cbnz	r0, .L399
1384:src/storage.c ****   free(buffer);
 5106              		.loc 1 1384 3 is_stmt 1 view .LVU1415
 5107              	.LVL474:
 5108              	.LBB118:
 5109              	.LBI118:
1388:src/storage.c **** { // buffer contains all of program file
 5110              		.loc 1 1388 6 view .LVU1416
 5111              	.LBB119:
1390:src/storage.c ****   int space_needed, count, free;
 5112              		.loc 1 1390 3 view .LVU1417
1391:src/storage.c **** 
 5113              		.loc 1 1391 3 view .LVU1418
1393:src/storage.c ****     /*
 5114              		.loc 1 1393 3 view .LVU1419
1393:src/storage.c ****     /*
 5115              		.loc 1 1393 8 is_stmt 0 view .LVU1420
 5116 0076 FFF7FEFF 		bl	not_running
 5117              	.LVL475:
1393:src/storage.c ****     /*
 5118              		.loc 1 1393 6 view .LVU1421
 5119 007a 10B1     		cbz	r0, .L392
ARM GAS  /tmp/ccwuxJEt.s 			page 139


 5120 007c 2046     		mov	r0, r4
 5121 007e FFF7FEFF 		bl	store_program_from_buffer.part.0
 5122              	.LVL476:
 5123              	.L392:
1393:src/storage.c ****     /*
 5124              		.loc 1 1393 6 view .LVU1422
 5125              	.LBE119:
 5126              	.LBE118:
1385:src/storage.c **** }
 5127              		.loc 1 1385 3 is_stmt 1 view .LVU1423
 5128 0082 2046     		mov	r0, r4
1386:src/storage.c **** 
 5129              		.loc 1 1386 1 is_stmt 0 view .LVU1424
 5130 0084 07B0     		add	sp, sp, #28
 5131              		.cfi_remember_state
 5132              		.cfi_def_cfa_offset 20
 5133              		@ sp needed
 5134 0086 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 5135              		.cfi_restore 14
 5136              		.cfi_restore 7
 5137              		.cfi_restore 6
 5138              		.cfi_restore 5
 5139              		.cfi_restore 4
 5140              		.cfi_def_cfa_offset 0
 5141              	.LVL477:
1385:src/storage.c **** }
 5142              		.loc 1 1385 3 view .LVU1425
 5143 008a FFF7FEBF 		b	free
 5144              	.LVL478:
 5145              	.L398:
 5146              		.cfi_restore_state
1369:src/storage.c ****     f_close(FPT);
 5147              		.loc 1 1369 5 is_stmt 1 view .LVU1426
 5148 008e 2046     		mov	r0, r4
 5149 0090 FFF7FEFF 		bl	free
 5150              	.LVL479:
1370:src/storage.c ****     DispMsg = "File odd";
 5151              		.loc 1 1370 5 view .LVU1427
 5152 0094 0E4B     		ldr	r3, .L400+24
 5153 0096 7868     		ldr	r0, [r7, #4]
 5154 0098 9847     		blx	r3
 5155              	.LVL480:
1371:src/storage.c ****     return;
 5156              		.loc 1 1371 5 view .LVU1428
1371:src/storage.c ****     return;
 5157              		.loc 1 1371 13 is_stmt 0 view .LVU1429
 5158 009a 0E4B     		ldr	r3, .L400+28
 5159 009c 104A     		ldr	r2, .L400+40
 5160 009e 1A60     		str	r2, [r3]
1372:src/storage.c ****   }
 5161              		.loc 1 1372 5 is_stmt 1 view .LVU1430
 5162 00a0 CCE7     		b	.L386
 5163              	.LVL481:
 5164              	.L399:
1379:src/storage.c ****         free(buffer);
 5165              		.loc 1 1379 5 view .LVU1431
1379:src/storage.c ****         free(buffer);
ARM GAS  /tmp/ccwuxJEt.s 			page 140


 5166              		.loc 1 1379 13 is_stmt 0 view .LVU1432
 5167 00a2 0C4B     		ldr	r3, .L400+28
 5168 00a4 0F4A     		ldr	r2, .L400+44
 5169 00a6 1A60     		str	r2, [r3]
1380:src/storage.c ****     return;
 5170              		.loc 1 1380 9 is_stmt 1 view .LVU1433
 5171 00a8 EBE7     		b	.L392
 5172              	.LVL482:
 5173              	.L397:
1362:src/storage.c ****     DispMsg = "Mem short";
 5174              		.loc 1 1362 5 view .LVU1434
 5175 00aa 094B     		ldr	r3, .L400+24
 5176 00ac 2846     		mov	r0, r5
 5177              	.LVL483:
1362:src/storage.c ****     DispMsg = "Mem short";
 5178              		.loc 1 1362 5 is_stmt 0 view .LVU1435
 5179 00ae 9847     		blx	r3
 5180              	.LVL484:
1363:src/storage.c ****     return;
 5181              		.loc 1 1363 5 is_stmt 1 view .LVU1436
1363:src/storage.c ****     return;
 5182              		.loc 1 1363 13 is_stmt 0 view .LVU1437
 5183 00b0 084B     		ldr	r3, .L400+28
 5184 00b2 0D4A     		ldr	r2, .L400+48
 5185 00b4 1A60     		str	r2, [r3]
1364:src/storage.c ****   }
 5186              		.loc 1 1364 5 is_stmt 1 view .LVU1438
 5187 00b6 C1E7     		b	.L386
 5188              	.L401:
 5189              		.align	2
 5190              	.L400:
 5191 00b8 51030008 		.word	134218577
 5192 00bc 00000000 		.word	open_selected_file
 5193 00c0 1C000000 		.word	.LC19
 5194 00c4 2C000000 		.word	.LC2
 5195 00c8 00000000 		.word	.LC30
 5196 00cc 00200010 		.word	268443648
 5197 00d0 39040008 		.word	134218809
 5198 00d4 00000000 		.word	DispMsg
 5199 00d8 14000000 		.word	.LC16
 5200 00dc 3D040008 		.word	134218813
 5201 00e0 10000000 		.word	.LC31
 5202 00e4 1C000000 		.word	.LC32
 5203 00e8 2C000000 		.word	.LC29
 5204              		.cfi_endproc
 5205              	.LFE40:
 5207              		.section	.text.store_program_from_buffer,"ax",%progbits
 5208              		.align	1
 5209              		.p2align 2,,3
 5210              		.global	store_program_from_buffer
 5211              		.syntax unified
 5212              		.thumb
 5213              		.thumb_func
 5214              		.fpu fpv4-sp-d16
 5216              	store_program_from_buffer:
 5217              	.LVL485:
 5218              	.LFB41:
ARM GAS  /tmp/ccwuxJEt.s 			page 141


1389:src/storage.c ****   unsigned int pc;
 5219              		.loc 1 1389 1 view -0
 5220              		.cfi_startproc
 5221              		@ args = 0, pretend = 0, frame = 0
 5222              		@ frame_needed = 0, uses_anonymous_args = 0
1390:src/storage.c ****   int space_needed, count, free;
 5223              		.loc 1 1390 3 view .LVU1440
1391:src/storage.c **** 
 5224              		.loc 1 1391 3 view .LVU1441
1393:src/storage.c ****     /*
 5225              		.loc 1 1393 3 view .LVU1442
1389:src/storage.c ****   unsigned int pc;
 5226              		.loc 1 1389 1 is_stmt 0 view .LVU1443
 5227 0000 10B5     		push	{r4, lr}
 5228              		.cfi_def_cfa_offset 8
 5229              		.cfi_offset 4, -8
 5230              		.cfi_offset 14, -4
1389:src/storage.c ****   unsigned int pc;
 5231              		.loc 1 1389 1 view .LVU1444
 5232 0002 0446     		mov	r4, r0
1393:src/storage.c ****     /*
 5233              		.loc 1 1393 8 view .LVU1445
 5234 0004 FFF7FEFF 		bl	not_running
 5235              	.LVL486:
1393:src/storage.c ****     /*
 5236              		.loc 1 1393 6 view .LVU1446
 5237 0008 20B1     		cbz	r0, .L402
 5238 000a 2046     		mov	r0, r4
 5239              		.loc 1 1435 1 view .LVU1447
 5240 000c BDE81040 		pop	{r4, lr}
 5241              		.cfi_remember_state
 5242              		.cfi_restore 14
 5243              		.cfi_restore 4
 5244              		.cfi_def_cfa_offset 0
 5245              	.LVL487:
 5246              		.loc 1 1435 1 view .LVU1448
 5247 0010 FFF7FEBF 		b	store_program_from_buffer.part.0
 5248              	.LVL488:
 5249              	.L402:
 5250              		.cfi_restore_state
 5251              		.loc 1 1435 1 view .LVU1449
 5252 0014 10BD     		pop	{r4, pc}
 5253              		.loc 1 1435 1 view .LVU1450
 5254              		.cfi_endproc
 5255              	.LFE41:
 5257              		.comm	XromA2D,64,4
 5258              		.comm	XromLocal,464,4
 5259              		.comm	XromParams,16,4
 5260              		.comm	StateWhileOn,52,4
 5261              		.comm	library_ram,4,4
 5262              		.comm	backup_ram,4,4
 5263              		.comm	main_ram,4,4
 5264 0016 00BF     		.text
 5265              	.Letext0:
 5266              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5267              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5268              		.file 4 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccwuxJEt.s 			page 142


 5269              		.file 5 "/usr/include/newlib/sys/reent.h"
 5270              		.file 6 "/usr/include/newlib/sys/lock.h"
 5271              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 5272              		.file 8 "/usr/include/newlib/sys/types.h"
 5273              		.file 9 "/usr/include/newlib/stdlib.h"
 5274              		.file 10 "dmcp/ff_ifc.h"
 5275              		.file 11 "dmcp/dmcp.h"
 5276              		.file 12 "src/decNumber/decContext.h"
 5277              		.file 13 "src/decNumber/decNumber.h"
 5278              		.file 14 "src/decNumber/decimal64.h"
 5279              		.file 15 "src/decNumber/decimal128.h"
 5280              		.file 16 "src/xeq.h"
 5281              		.file 17 "src/data.h"
 5282              		.file 18 "src/storage.h"
 5283              		.file 19 "src/display.h"
 5284              		.file 20 "src/stats.h"
 5285              		.file 21 "src/alpha.h"
 5286              		.file 22 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccwuxJEt.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 storage.c
     /tmp/ccwuxJEt.s:18     .text.test_checksum:0000000000000000 $t
     /tmp/ccwuxJEt.s:26     .text.test_checksum:0000000000000000 test_checksum
     /tmp/ccwuxJEt.s:174    .text.checksum_region:0000000000000000 $t
     /tmp/ccwuxJEt.s:181    .text.checksum_region:0000000000000000 checksum_region
     /tmp/ccwuxJEt.s:232    .text.check_delete_prog:0000000000000000 $t
     /tmp/ccwuxJEt.s:239    .text.check_delete_prog:0000000000000000 check_delete_prog
     /tmp/ccwuxJEt.s:290    .text.check_delete_prog:000000000000002c $d
                            *COM*:0000000000000004 main_ram
     /tmp/ccwuxJEt.s:295    .rodata.program_flash.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:305    .text.program_flash:0000000000000000 $t
     /tmp/ccwuxJEt.s:312    .text.program_flash:0000000000000000 program_flash
     /tmp/ccwuxJEt.s:568    .text.program_flash:00000000000000d4 $d
                            *COM*:0000000000000004 backup_ram
                            *COM*:0000000000000004 library_ram
     /tmp/ccwuxJEt.s:584    .text.flash_append:0000000000000000 $t
     /tmp/ccwuxJEt.s:591    .text.flash_append:0000000000000000 flash_append
     /tmp/ccwuxJEt.s:762    .text.flash_append:000000000000009c $d
     /tmp/ccwuxJEt.s:768    .rodata.open_selected_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:775    .text.open_selected_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:783    .text.open_selected_file:0000000000000000 open_selected_file
     /tmp/ccwuxJEt.s:899    .text.open_selected_file:0000000000000050 $d
     /tmp/ccwuxJEt.s:910    .rodata.init_mem.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:914    .text.init_mem:0000000000000000 $t
     /tmp/ccwuxJEt.s:922    .text.init_mem:0000000000000000 init_mem
     /tmp/ccwuxJEt.s:986    .text.init_mem:0000000000000030 $d
     /tmp/ccwuxJEt.s:994    .text.crc16:0000000000000000 $t
     /tmp/ccwuxJEt.s:1002   .text.crc16:0000000000000000 crc16
     /tmp/ccwuxJEt.s:1081   .text.checksum_program:0000000000000000 $t
     /tmp/ccwuxJEt.s:1089   .text.checksum_program:0000000000000000 checksum_program
     /tmp/ccwuxJEt.s:1201   .text.checksum_program:0000000000000058 $d
     /tmp/ccwuxJEt.s:1206   .text.checksum_ram:0000000000000000 $t
     /tmp/ccwuxJEt.s:1214   .text.checksum_ram:0000000000000000 checksum_ram
     /tmp/ccwuxJEt.s:1233   .text.checksum_ram:0000000000000014 $d
     /tmp/ccwuxJEt.s:1238   .text.checksum_backup:0000000000000000 $t
     /tmp/ccwuxJEt.s:1246   .text.checksum_backup:0000000000000000 checksum_backup
     /tmp/ccwuxJEt.s:1378   .text.checksum_backup:0000000000000054 $d
     /tmp/ccwuxJEt.s:1383   .text.clpall:0000000000000000 $t
     /tmp/ccwuxJEt.s:1391   .text.clpall:0000000000000000 clpall
     /tmp/ccwuxJEt.s:1430   .text.clpall:0000000000000018 $d
     /tmp/ccwuxJEt.s:1435   .text.clrall:0000000000000000 $t
     /tmp/ccwuxJEt.s:1443   .text.clrall:0000000000000000 clrall
     /tmp/ccwuxJEt.s:1529   .text.clrall:000000000000004c $d
                            *COM*:0000000000000034 StateWhileOn
     /tmp/ccwuxJEt.s:1536   .rodata.reset.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:1540   .text.reset:0000000000000000 $t
     /tmp/ccwuxJEt.s:1548   .text.reset:0000000000000000 reset
     /tmp/ccwuxJEt.s:1588   .text.reset:0000000000000028 $d
     /tmp/ccwuxJEt.s:1596   .text.stoprog:0000000000000000 $t
     /tmp/ccwuxJEt.s:1604   .text.stoprog:0000000000000000 stoprog
     /tmp/ccwuxJEt.s:1812   .text.stoprog:00000000000000e4 $d
     /tmp/ccwuxJEt.s:1818   .text.delprog:0000000000000000 $t
     /tmp/ccwuxJEt.s:1826   .text.delprog:0000000000000000 delprog
     /tmp/ccwuxJEt.s:1941   .text.delprog:0000000000000068 $d
     /tmp/ccwuxJEt.s:1946   .text.append_program:0000000000000000 $t
     /tmp/ccwuxJEt.s:1954   .text.append_program:0000000000000000 append_program
ARM GAS  /tmp/ccwuxJEt.s 			page 144


     /tmp/ccwuxJEt.s:2179   .text.append_program:00000000000000c4 $d
     /tmp/ccwuxJEt.s:2187   .text.check_create_wp34sdir:0000000000000000 $t
     /tmp/ccwuxJEt.s:2195   .text.check_create_wp34sdir:0000000000000000 check_create_wp34sdir
     /tmp/ccwuxJEt.s:2236   .text.check_create_wp34sdir:0000000000000018 $d
     /tmp/ccwuxJEt.s:2243   .text.init_library:0000000000000000 $t
     /tmp/ccwuxJEt.s:2251   .text.init_library:0000000000000000 init_library
     /tmp/ccwuxJEt.s:2313   .text.init_library:0000000000000034 $d
     /tmp/ccwuxJEt.s:2318   .text.flash_remove:0000000000000000 $t
     /tmp/ccwuxJEt.s:2326   .text.flash_remove:0000000000000000 flash_remove
     /tmp/ccwuxJEt.s:2373   .text.flash_remove:0000000000000024 $d
     /tmp/ccwuxJEt.s:2378   .text.clrprog:0000000000000000 $t
     /tmp/ccwuxJEt.s:2386   .text.clrprog:0000000000000000 clrprog
     /tmp/ccwuxJEt.s:2517   .text.clrprog:0000000000000090 $d
     /tmp/ccwuxJEt.s:2522   .rodata.store_program_from_buffer.part.0.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:2526   .text.store_program_from_buffer.part.0:0000000000000000 $t
     /tmp/ccwuxJEt.s:2533   .text.store_program_from_buffer.part.0:0000000000000000 store_program_from_buffer.part.0
     /tmp/ccwuxJEt.s:2732   .text.store_program_from_buffer.part.0:00000000000000a8 $d
     /tmp/ccwuxJEt.s:2742   .rodata.flash_backup.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:2749   .text.flash_backup:0000000000000000 $t
     /tmp/ccwuxJEt.s:2757   .text.flash_backup:0000000000000000 flash_backup
     /tmp/ccwuxJEt.s:2838   .text.flash_backup:0000000000000048 $d
     /tmp/ccwuxJEt.s:2847   .rodata.flash_restore.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:2851   .text.flash_restore:0000000000000000 $t
     /tmp/ccwuxJEt.s:2859   .text.flash_restore:0000000000000000 flash_restore
     /tmp/ccwuxJEt.s:2918   .text.flash_restore:0000000000000034 $d
     /tmp/ccwuxJEt.s:2926   .text.load_program:0000000000000000 $t
     /tmp/ccwuxJEt.s:2934   .text.load_program:0000000000000000 load_program
     /tmp/ccwuxJEt.s:3046   .text.load_program:000000000000003c $d
     /tmp/ccwuxJEt.s:3052   .text.load_registers:0000000000000000 $t
     /tmp/ccwuxJEt.s:3060   .text.load_registers:0000000000000000 load_registers
     /tmp/ccwuxJEt.s:3154   .text.load_registers:000000000000004c $d
     /tmp/ccwuxJEt.s:3160   .text.load_sigma:0000000000000000 $t
     /tmp/ccwuxJEt.s:3168   .text.load_sigma:0000000000000000 load_sigma
     /tmp/ccwuxJEt.s:3240   .text.load_sigma:0000000000000040 $d
     /tmp/ccwuxJEt.s:3245   .text.load_state:0000000000000000 $t
     /tmp/ccwuxJEt.s:3253   .text.load_state:0000000000000000 load_state
     /tmp/ccwuxJEt.s:3323   .text.load_state:000000000000003c $d
     /tmp/ccwuxJEt.s:3329   .text.store_program:0000000000000000 $t
     /tmp/ccwuxJEt.s:3337   .text.store_program:0000000000000000 store_program
     /tmp/ccwuxJEt.s:3573   .text.store_program:00000000000000d4 $d
     /tmp/ccwuxJEt.s:3580   .text.recall_program:0000000000000000 $t
     /tmp/ccwuxJEt.s:3588   .text.recall_program:0000000000000000 recall_program
     /tmp/ccwuxJEt.s:3649   .text.recall_program:000000000000003c $d
     /tmp/ccwuxJEt.s:3654   .rodata.save_lib_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:3667   .text.save_lib_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:3675   .text.save_lib_file:0000000000000000 save_lib_file
     /tmp/ccwuxJEt.s:3829   .text.save_lib_file:0000000000000084 $d
     /tmp/ccwuxJEt.s:3848   .rodata.load_lib_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:3855   .text.load_lib_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:3863   .text.load_lib_file:0000000000000000 load_lib_file
     /tmp/ccwuxJEt.s:3998   .text.load_lib_file:0000000000000078 $d
     /tmp/ccwuxJEt.s:4016   .rodata.save_ram_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:4032   .text.save_ram_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:4040   .text.save_ram_file:0000000000000000 save_ram_file
     /tmp/ccwuxJEt.s:4217   .text.save_ram_file:000000000000009c $d
     /tmp/ccwuxJEt.s:4236   .rodata.load_ram_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:4243   .text.load_ram_file:0000000000000000 $t
ARM GAS  /tmp/ccwuxJEt.s 			page 145


     /tmp/ccwuxJEt.s:4251   .text.load_ram_file:0000000000000000 load_ram_file
     /tmp/ccwuxJEt.s:4427   .text.load_ram_file:0000000000000094 $d
     /tmp/ccwuxJEt.s:4445   .rodata.load_backup_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:4452   .text.load_backup_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:4460   .text.load_backup_file:0000000000000000 load_backup_file
     /tmp/ccwuxJEt.s:4595   .text.load_backup_file:0000000000000078 $d
     /tmp/ccwuxJEt.s:4613   .rodata.save_prog_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:4626   .text.save_prog_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:4634   .text.save_prog_file:0000000000000000 save_prog_file
     /tmp/ccwuxJEt.s:4948   .text.save_prog_file:0000000000000130 $d
     /tmp/ccwuxJEt.s:4966   .rodata.load_prog_file.str1.4:0000000000000000 $d
     /tmp/ccwuxJEt.s:4976   .text.load_prog_file:0000000000000000 $t
     /tmp/ccwuxJEt.s:4984   .text.load_prog_file:0000000000000000 load_prog_file
     /tmp/ccwuxJEt.s:5191   .text.load_prog_file:00000000000000b8 $d
     /tmp/ccwuxJEt.s:5208   .text.store_program_from_buffer:0000000000000000 $t
     /tmp/ccwuxJEt.s:5216   .text.store_program_from_buffer:0000000000000000 store_program_from_buffer
                            *COM*:0000000000000040 XromA2D
                            *COM*:00000000000001d0 XromLocal
                            *COM*:0000000000000010 XromParams

UNDEFINED SYMBOLS
getprog
report_warn
xcopy
report_err
DispMsg
calloc
perror
update_program_bounds
get_current_prog
clrretstk_pc
xeq_init_contexts
clrreg
clrstk
clralpha
clrflags
reset_shift
xset
init_state
clrretstk
do_inc
ProgFree
decpc
is_dblmode
cmdregs
set_pc
sigmaDeallocate
global_regs
SizeStatRegs
find_opcode_from
error_message
not_running
process_cmdline_set_lift
get_reg_n
get_flash_reg_n
sigmaCopy
free
ARM GAS  /tmp/ccwuxJEt.s 			page 146



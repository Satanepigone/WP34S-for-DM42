ARM GAS  /tmp/cc7no4fx.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/cc7no4fx.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/cc7no4fx.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB34:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/cc7no4fx.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/cc7no4fx.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/cc7no4fx.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/cc7no4fx.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/cc7no4fx.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
 362:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/cc7no4fx.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", ".\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    **** 
 434:src/menu.c    **** };  
 435:src/menu.c    **** 
 436:src/menu.c    **** /* This code is the set_status_sized code with small changes
 437:src/menu.c    ****  * and non-DM42 code removed.
 438:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 439:src/menu.c    ****  */
 440:src/menu.c    **** #define MENU_WIDTH 32
 441:src/menu.c    **** 
 442:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 442 13 is_stmt 1 view -0
  72              		.cfi_startproc
ARM GAS  /tmp/cc7no4fx.s 			page 10


  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/menu.c    ****   // dotcol is the number of the starting dot column
 444:src/menu.c    ****   // shifted is 1 if shifted
 445:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 445 3 view .LVU8
 446:src/menu.c    **** 
 447:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 448:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 448 3 view .LVU9
 449:src/menu.c    **** 
 450:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 450 3 view .LVU10
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 442 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 442 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 451:src/menu.c    ****   int i, j, xmax;
 452:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 452 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 453:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 454:src/menu.c    **** 
 455:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 455 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 442 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 451:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 451 3 is_stmt 1 view .LVU16
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 452 3 view .LVU17
 456:src/menu.c    **** 
 457:src/menu.c    **** #ifdef RP_PREFIX
 458:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 458 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
ARM GAS  /tmp/cc7no4fx.s 			page 11


 109              	.LVL5:
 455:src/menu.c    **** 
 110              		.loc 1 455 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 455:src/menu.c    **** 
 113              		.loc 1 455 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 458 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 459:src/menu.c    **** #endif
 460:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 460 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 452 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 452 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 453:src/menu.c    **** 
 125              		.loc 1 453 3 is_stmt 1 view .LVU25
 455:src/menu.c    **** 
 126              		.loc 1 455 3 view .LVU26
 458:src/menu.c    **** #endif
 127              		.loc 1 458 3 view .LVU27
 128              		.loc 1 460 3 view .LVU28
 129              		.loc 1 460 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 460 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB41:
 461:src/menu.c    ****     int c;
 462:src/menu.c    ****     int width;
 463:src/menu.c    ****     unsigned char cmap[6];
 464:src/menu.c    **** 
 465:src/menu.c    ****     int real_width;
 466:src/menu.c    ****     int current_smallp;
 467:src/menu.c    **** 
 468:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 469:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 470:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 471:src/menu.c    ****     //           01 -> (not used)
 472:src/menu.c    ****     //           10 -> use big font
 473:src/menu.c    ****     //           11 -> use small font
 474:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 475:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 475 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE41:
 448:src/menu.c    **** 
 139              		.loc 1 448 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
ARM GAS  /tmp/cc7no4fx.s 			page 12


 141              	.LVL8:
 142              	.LBB58:
 461:src/menu.c    ****     int c;
 143              		.loc 1 461 5 is_stmt 1 view .LVU33
 462:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 462 5 view .LVU34
 463:src/menu.c    **** 
 145              		.loc 1 463 5 view .LVU35
 465:src/menu.c    ****     int current_smallp;
 146              		.loc 1 465 5 view .LVU36
 466:src/menu.c    **** 
 147              		.loc 1 466 5 view .LVU37
 148              		.loc 1 475 5 view .LVU38
 476:src/menu.c    ****       width = str[1] & 0x1F;
 477:src/menu.c    ****       switch (str[1] & 0x60) {
 478:src/menu.c    ****       default:
 479:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 480:src/menu.c    **** 	break;
 481:src/menu.c    ****       case 0x40:	current_smallp = 0;
 482:src/menu.c    **** 	break;
 483:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 483 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 475:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 475 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 476:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 476 7 is_stmt 1 view .LVU41
 476:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 476 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 477:src/menu.c    ****       default:
 160              		.loc 1 477 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 476:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 476 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 477:src/menu.c    ****       default:
 165              		.loc 1 477 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 483 18 view .LVU46
 170              	.LVL11:
 484:src/menu.c    **** 	break;
 171              		.loc 1 484 2 view .LVU47
 485:src/menu.c    ****       }
 486:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 486 7 view .LVU48
 173              		.loc 1 486 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/cc7no4fx.s 			page 13


 483:src/menu.c    **** 	break;
 176              		.loc 1 483 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 487:src/menu.c    ****       str += 3;
 182              		.loc 1 487 7 is_stmt 1 view .LVU51
 488:src/menu.c    **** 
 489:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 489 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 487:src/menu.c    ****       str += 3;
 187              		.loc 1 487 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 489 7 is_stmt 1 view .LVU54
 490:src/menu.c    ****     } else {
 491:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 492:src/menu.c    ****       real_width = width = charlengths(c);
 493:src/menu.c    ****       current_smallp = smallp;
 494:src/menu.c    ****     }
 495:src/menu.c    **** 
 496:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 496 5 view .LVU55
 194              		.loc 1 496 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 496 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 497:src/menu.c    ****       break;
 498:src/menu.c    **** 
 499:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 499 5 is_stmt 1 view .LVU58
 202              		.loc 1 499 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 500:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 500 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 499:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 499 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 500 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 500 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
ARM GAS  /tmp/cc7no4fx.s 			page 14


 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 501:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 501 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 502:src/menu.c    ****     }
 503:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 503 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 504:src/menu.c    **** 
 505:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 505 5 view .LVU66
 228              		.loc 1 505 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 503:src/menu.c    **** 
 234              		.loc 1 503 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 506:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 506 17 is_stmt 1 view .LVU69
 240              		.loc 1 506 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 507:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 507 2 is_stmt 1 view .LVU71
 244              		.loc 1 507 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB42:
 248              	.LBB43:
 249              	.LBB44:
 250              	.LBB45:
 508:src/menu.c    **** 	  break;
 509:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 510:src/menu.c    ****       }
 511:src/menu.c    ****     }
 512:src/menu.c    ****     x += width;
 513:src/menu.c    ****   }
 514:src/menu.c    **** }
 515:src/menu.c    **** 
 516:src/menu.c    **** 
 517:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 518:src/menu.c    **** 
 519:src/menu.c    **** int pixel_length(const char *s, int smallp)
 520:src/menu.c    **** {
 521:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/cc7no4fx.s 			page 15


 522:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 523:src/menu.c    ****   while (*s != '\0') {
 524:src/menu.c    ****     if (s[0] == '\007') {
 525:src/menu.c    ****       len += s[1] & 0x1F;
 526:src/menu.c    ****       s += 3;
 527:src/menu.c    ****       continue;
 528:src/menu.c    ****     }
 529:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 530:src/menu.c    ****   }
 531:src/menu.c    ****   return len;
 532:src/menu.c    **** }
 533:src/menu.c    **** */
 534:src/menu.c    **** 
 535:src/menu.c    **** 
 536:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 537:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 538:src/menu.c    ****   if (on) {
 539:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 540:src/menu.c    ****   }
 541:src/menu.c    ****   else {
 542:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 542 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 542 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE45:
 256              	.LBE44:
 257              	.LBE43:
 258              	.LBE42:
 509:src/menu.c    ****       }
 259              		.loc 1 509 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB55:
 262              	.LBB52:
 263              	.LBB49:
 264              	.LBB46:
 265              		.loc 1 542 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE46:
 268              	.LBE49:
 269              	.LBE52:
 270              	.LBE55:
 506:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 506 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 507:src/menu.c    **** 	  break;
 276              		.loc 1 507 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 509:src/menu.c    ****       }
 281              		.loc 1 509 2 is_stmt 1 view .LVU79
 282              	.LBB56:
ARM GAS  /tmp/cc7no4fx.s 			page 16


 283              	.LBI42:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 536 6 view .LVU80
 285              	.LBB53:
 537:src/menu.c    ****   if (on) {
 286              		.loc 1 537 3 view .LVU81
 287              	.LBB50:
 288              	.LBI44:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 536 6 view .LVU82
 290              	.LBB47:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 538 3 view .LVU83
 292              	.LBE47:
 293              	.LBE50:
 537:src/menu.c    ****   if (on) {
 294              		.loc 1 537 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 537:src/menu.c    ****   if (on) {
 297              		.loc 1 537 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE53:
 300              	.LBE56:
 509:src/menu.c    ****       }
 301              		.loc 1 509 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB57:
 304              	.LBB54:
 537:src/menu.c    ****   if (on) {
 305              		.loc 1 537 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB51:
 308              	.LBB48:
 539:src/menu.c    ****   }
 309              		.loc 1 539 5 is_stmt 1 view .LVU88
 310              		.loc 1 542 5 view .LVU89
 539:src/menu.c    ****   }
 311              		.loc 1 539 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 538 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 539:src/menu.c    ****   }
 316              		.loc 1 539 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 542 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE48:
 324              	.LBE51:
 325              	.LBE54:
 326              	.LBE57:
 507:src/menu.c    **** 	  break;
ARM GAS  /tmp/cc7no4fx.s 			page 17


 327              		.loc 1 507 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 506:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 506 26 view .LVU95
 506:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 506 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 506:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 506 17 is_stmt 1 view .LVU97
 506:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 506 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 505 20 is_stmt 1 view .LVU99
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 505 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 505 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 505 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 512:src/menu.c    ****   }
 348              		.loc 1 512 5 is_stmt 1 view .LVU103
 349              	.LBE58:
 460:src/menu.c    ****     int c;
 350              		.loc 1 460 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB59:
 512:src/menu.c    ****   }
 354              		.loc 1 512 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 512:src/menu.c    ****   }
 357              		.loc 1 512 7 view .LVU106
 358              	.LBE59:
 460:src/menu.c    ****     int c;
 359              		.loc 1 460 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 460:src/menu.c    ****     int c;
 361              		.loc 1 460 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB60:
 475:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 475 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE60:
 368 0108 009C     		ldr	r4, [sp]
ARM GAS  /tmp/cc7no4fx.s 			page 18


 369              	.LBB61:
 461:src/menu.c    ****     int width;
 370              		.loc 1 461 5 is_stmt 1 view .LVU110
 462:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 462 5 view .LVU111
 463:src/menu.c    **** 
 372              		.loc 1 463 5 view .LVU112
 465:src/menu.c    ****     int current_smallp;
 373              		.loc 1 465 5 view .LVU113
 466:src/menu.c    **** 
 374              		.loc 1 466 5 view .LVU114
 475:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 475 5 view .LVU115
 475:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 475 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 491 7 is_stmt 1 view .LVU117
 492:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 492 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 491 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 492:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 492 7 is_stmt 1 view .LVU120
 493:src/menu.c    ****     }
 391              		.loc 1 493 7 view .LVU121
 493:src/menu.c    ****     }
 392              		.loc 1 493 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 493:src/menu.c    ****     }
 395              		.loc 1 493 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 496:src/menu.c    ****       break;
 398              		.loc 1 496 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 496:src/menu.c    ****       break;
 401              		.loc 1 496 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 492:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 492 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 496:src/menu.c    ****       break;
 405              		.loc 1 496 5 is_stmt 1 view .LVU127
 496:src/menu.c    ****       break;
 406              		.loc 1 496 8 is_stmt 0 view .LVU128
ARM GAS  /tmp/cc7no4fx.s 			page 19


 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 496:src/menu.c    ****       break;
 410              		.loc 1 496 8 view .LVU129
 411              	.LBE61:
 514:src/menu.c    **** 
 412              		.loc 1 514 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB62:
 486:src/menu.c    ****       str += 3;
 422              		.loc 1 486 7 is_stmt 1 view .LVU131
 486:src/menu.c    ****       str += 3;
 423              		.loc 1 486 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 479:src/menu.c    **** 	break;
 426              		.loc 1 479 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE62:
 437              		.cfi_endproc
 438              	.LFE34:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC4:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
ARM GAS  /tmp/cc7no4fx.s 			page 20


 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC5:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC6:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC7:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
ARM GAS  /tmp/cc7no4fx.s 			page 21


 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
ARM GAS  /tmp/cc7no4fx.s 			page 22


 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
ARM GAS  /tmp/cc7no4fx.s 			page 23


 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cc7no4fx.s 			page 24


 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC2
 627 0098 1C000000 		.word	.LC3
 628 009c 30000000 		.word	.LC4
 629 00a0 50000000 		.word	.LC5
 630 00a4 74000000 		.word	.LC6
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC7
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
ARM GAS  /tmp/cc7no4fx.s 			page 25


 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
ARM GAS  /tmp/cc7no4fx.s 			page 26


 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
ARM GAS  /tmp/cc7no4fx.s 			page 27


 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB63:
 775              	.LBB64:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE64:
 779              	.LBE63:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
 782              	.LVL56:
 783              	.LBB67:
 784              	.LBI63:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB65:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
ARM GAS  /tmp/cc7no4fx.s 			page 28


 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE65:
 825              	.LBE67:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB68:
 831              	.LBB66:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cc7no4fx.s 			page 29


 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE66:
 843              	.LBE68:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB69:
 878              	.LBI69:
 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB70:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB71:
 885              	.LBI71:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
ARM GAS  /tmp/cc7no4fx.s 			page 30


 887              	.LBB72:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE72:
 923              	.LBE71:
 924              	.LBE70:
 925              	.LBE69:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
ARM GAS  /tmp/cc7no4fx.s 			page 31


 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB76:
 948              	.LBB75:
 949              	.LBB74:
 950              	.LBB73:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE73:
 962              	.LBE74:
 963              	.LBE75:
 964              	.LBE76:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7no4fx.s 			page 32


 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
ARM GAS  /tmp/cc7no4fx.s 			page 33


 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB77:
 1045              	.LBI77:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB78:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE78:
 1071              	.LBE77:
 154:src/menu.c    **** 
ARM GAS  /tmp/cc7no4fx.s 			page 34


 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB81:
 1076              	.LBB79:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE79:
 1087              	.LBE81:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB82:
 1093              	.LBB80:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE80:
 1114              	.LBE82:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
ARM GAS  /tmp/cc7no4fx.s 			page 35


 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 536 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 537:src/menu.c    ****   if (on) {
 1135              		.loc 1 537 3 view .LVU323
 537:src/menu.c    ****   if (on) {
 1136              		.loc 1 537 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB85:
 1141              	.LBI85:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 536 6 is_stmt 1 view .LVU325
 1143              	.LBB86:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 538 3 view .LVU326
 1145              	.LBE86:
 1146              	.LBE85:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 536 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB89:
 1152              	.LBB87:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 538 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 542 5 is_stmt 1 view .LVU329
 1156              		.loc 1 542 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
 1159              		.loc 1 542 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 542 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 542 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 542 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 542 17 view .LVU335
ARM GAS  /tmp/cc7no4fx.s 			page 36


 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 542 17 view .LVU336
 1174              	.LBE87:
 1175              	.LBE89:
 543:src/menu.c    ****   }
 544:src/menu.c    **** }
 1176              		.loc 1 544 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB90:
 1186              	.LBB88:
 539:src/menu.c    ****   }
 1187              		.loc 1 539 5 is_stmt 1 view .LVU338
 539:src/menu.c    ****   }
 1188              		.loc 1 539 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 539:src/menu.c    ****   }
 1191              		.loc 1 539 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 539:src/menu.c    ****   }
 1194              		.loc 1 539 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 539:src/menu.c    ****   }
 1196              		.loc 1 539 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 539:src/menu.c    ****   }
 1198              		.loc 1 539 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 539:src/menu.c    ****   }
 1201              		.loc 1 539 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE88:
 1205              	.LBE90:
 1206              		.loc 1 544 1 view .LVU345
 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 544 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
ARM GAS  /tmp/cc7no4fx.s 			page 37


 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 545:src/menu.c    **** 
 546:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 546 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 547 3 view .LVU348
 546:src/menu.c    ****   int i = current_menu;
 1239              		.loc 1 546 37 is_stmt 0 view .LVU349
 1240 0000 08B5     		push	{r3, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 548:src/menu.c    ****   if (C_LOCKED)
 1244              		.loc 1 548 7 view .LVU350
 1245 0002 294B     		ldr	r3, .L147
 547:src/menu.c    ****   int i = current_menu;
 1246              		.loc 1 547 7 view .LVU351
 1247 0004 294A     		ldr	r2, .L147+4
 1248              		.loc 1 548 7 view .LVU352
 1249 0006 1B68     		ldr	r3, [r3]
 547:src/menu.c    ****   int i = current_menu;
 1250              		.loc 1 547 7 view .LVU353
 1251 0008 92F90010 		ldrsb	r1, [r2]
 1252              	.LVL84:
 1253              		.loc 1 548 3 is_stmt 1 view .LVU354
 1254              		.loc 1 548 7 is_stmt 0 view .LVU355
 1255 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1256              		.loc 1 548 6 view .LVU356
 1257 0010 03F04102 		and	r2, r3, #65
 1258 0014 412A     		cmp	r2, #65
 546:src/menu.c    ****   int i = current_menu;
 1259              		.loc 1 546 37 view .LVU357
 1260 0016 0346     		mov	r3, r0
 1261              		.loc 1 548 6 view .LVU358
 1262 0018 0BD0     		beq	.L145
 1263              	.LVL85:
 1264              	.L132:
 549:src/menu.c    ****     switch (current_menu) {
 550:src/menu.c    ****     case (M_Clear):
 551:src/menu.c    ****       i = M_Clear_C;
 552:src/menu.c    ****       break;
ARM GAS  /tmp/cc7no4fx.s 			page 38


 553:src/menu.c    ****     case (M_Swap):
 554:src/menu.c    ****       i = M_Swap_C;
 555:src/menu.c    ****       break;
 556:src/menu.c    ****     case (M_Arrow):
 557:src/menu.c    ****       i = M_Arrow_C;
 558:src/menu.c    ****       break;
 559:src/menu.c    ****     case (M_Prob):
 560:src/menu.c    ****       i = M_Prob_C;
 561:src/menu.c    ****       break;
 562:src/menu.c    ****     case (M_Blank2):
 563:src/menu.c    ****       i = M_Blank2_C;
 564:src/menu.c    ****       break;
 565:src/menu.c    ****     case (M_Misc):
 566:src/menu.c    ****       i = M_Misc_C;
 567:src/menu.c    ****       break;
 568:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 569:src/menu.c    ****     case (M_Flags):// so don't display them.
 570:src/menu.c    ****     case (M_Stats):
 571:src/menu.c    ****     case (M_Setup2):
 572:src/menu.c    ****     case (M_Solve):
 573:src/menu.c    ****     case (M_Program):
 574:src/menu.c    ****       i = M_C_Lock;
 575:src/menu.c    ****     default:;
 1265              		.loc 1 575 13 is_stmt 1 view .LVU359
 576:src/menu.c    ****     }
 577:src/menu.c    ****   if (current_menu == M_User) {
 1266              		.loc 1 577 3 view .LVU360
 1267              		.loc 1 577 6 is_stmt 0 view .LVU361
 1268 001a 6329     		cmp	r1, #99
 1269 001c 32D0     		beq	.L146
 1270              	.LVL86:
 1271              	.L137:
 578:src/menu.c    ****     return UserMenu;
 579:src/menu.c    ****   }
 580:src/menu.c    ****   else {
 581:src/menu.c    ****     return Menus[i];
 1272              		.loc 1 581 5 is_stmt 1 view .LVU362
 1273              		.loc 1 581 17 is_stmt 0 view .LVU363
 1274 001e 2448     		ldr	r0, .L147+8
 1275 0020 D022     		movs	r2, #208
 1276 0022 02FB0101 		mla	r1, r2, r1, r0
 1277              	.LVL87:
 1278              		.loc 1 581 17 view .LVU364
 1279 0026 1846     		mov	r0, r3
 1280 0028 FFF7FEFF 		bl	memcpy
 1281              	.LVL88:
 1282              		.loc 1 581 17 view .LVU365
 1283 002c 0346     		mov	r3, r0
 582:src/menu.c    ****   }
 583:src/menu.c    **** }
 1284              		.loc 1 583 1 view .LVU366
 1285 002e 1846     		mov	r0, r3
 1286 0030 08BD     		pop	{r3, pc}
 1287              	.LVL89:
 1288              	.L145:
 549:src/menu.c    ****     case (M_Clear):
 1289              		.loc 1 549 5 is_stmt 1 view .LVU367
ARM GAS  /tmp/cc7no4fx.s 			page 39


 1290 0032 4A1E     		subs	r2, r1, #1
 1291 0034 0E2A     		cmp	r2, #14
 1292 0036 F0D8     		bhi	.L132
 1293 0038 01A0     		adr	r0, .L134
 1294 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1295              	.LVL90:
 1296 003e 00BF     		.p2align 2
 1297              	.L134:
 1298 0040 A5000000 		.word	.L140+1
 1299 0044 1B000000 		.word	.L132+1
 1300 0048 A1000000 		.word	.L135+1
 1301 004c 1B000000 		.word	.L132+1
 1302 0050 9D000000 		.word	.L139+1
 1303 0054 81000000 		.word	.L138+1
 1304 0058 A1000000 		.word	.L135+1
 1305 005c 1B000000 		.word	.L132+1
 1306 0060 7D000000 		.word	.L143+1
 1307 0064 A1000000 		.word	.L135+1
 1308 0068 99000000 		.word	.L136+1
 1309 006c A1000000 		.word	.L135+1
 1310 0070 A1000000 		.word	.L135+1
 1311 0074 A1000000 		.word	.L135+1
 1312 0078 95000000 		.word	.L133+1
 1313              		.p2align 1
 1314              	.L143:
 557:src/menu.c    ****       break;
 1315              		.loc 1 557 9 is_stmt 0 view .LVU368
 1316 007c 1421     		movs	r1, #20
 1317              	.LVL91:
 557:src/menu.c    ****       break;
 1318              		.loc 1 557 9 view .LVU369
 1319 007e CEE7     		b	.L137
 1320              	.LVL92:
 1321              	.L138:
 548:src/menu.c    ****     switch (current_menu) {
 1322              		.loc 1 548 6 view .LVU370
 1323 0080 1321     		movs	r1, #19
 1324              	.LVL93:
 548:src/menu.c    ****     switch (current_menu) {
 1325              		.loc 1 548 6 view .LVU371
 1326 0082 CCE7     		b	.L137
 1327              	.LVL94:
 1328              	.L146:
 578:src/menu.c    ****   }
 1329              		.loc 1 578 5 is_stmt 1 view .LVU372
 578:src/menu.c    ****   }
 1330              		.loc 1 578 12 is_stmt 0 view .LVU373
 1331 0084 0B49     		ldr	r1, .L147+12
 1332              	.LVL95:
 578:src/menu.c    ****   }
 1333              		.loc 1 578 12 view .LVU374
 1334 0086 D022     		movs	r2, #208
 1335 0088 1846     		mov	r0, r3
 1336 008a FFF7FEFF 		bl	memcpy
 1337              	.LVL96:
 578:src/menu.c    ****   }
 1338              		.loc 1 578 12 view .LVU375
ARM GAS  /tmp/cc7no4fx.s 			page 40


 1339 008e 0346     		mov	r3, r0
 1340              		.loc 1 583 1 view .LVU376
 1341 0090 1846     		mov	r0, r3
 1342 0092 08BD     		pop	{r3, pc}
 1343              	.LVL97:
 1344              	.L133:
 563:src/menu.c    ****       break;
 1345              		.loc 1 563 7 is_stmt 1 view .LVU377
 564:src/menu.c    ****     case (M_Misc):
 1346              		.loc 1 564 7 view .LVU378
 563:src/menu.c    ****       break;
 1347              		.loc 1 563 9 is_stmt 0 view .LVU379
 1348 0094 1621     		movs	r1, #22
 564:src/menu.c    ****     case (M_Misc):
 1349              		.loc 1 564 7 view .LVU380
 1350 0096 C2E7     		b	.L137
 1351              	.LVL98:
 1352              	.L136:
 560:src/menu.c    ****       break;
 1353              		.loc 1 560 7 is_stmt 1 view .LVU381
 561:src/menu.c    ****     case (M_Blank2):
 1354              		.loc 1 561 7 view .LVU382
 560:src/menu.c    ****       break;
 1355              		.loc 1 560 9 is_stmt 0 view .LVU383
 1356 0098 1521     		movs	r1, #21
 561:src/menu.c    ****     case (M_Blank2):
 1357              		.loc 1 561 7 view .LVU384
 1358 009a C0E7     		b	.L137
 1359              	.LVL99:
 1360              	.L139:
 566:src/menu.c    ****       break;
 1361              		.loc 1 566 7 is_stmt 1 view .LVU385
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1362              		.loc 1 567 7 view .LVU386
 566:src/menu.c    ****       break;
 1363              		.loc 1 566 9 is_stmt 0 view .LVU387
 1364 009c 1721     		movs	r1, #23
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1365              		.loc 1 567 7 view .LVU388
 1366 009e BEE7     		b	.L137
 1367              	.LVL100:
 1368              	.L135:
 574:src/menu.c    ****     default:;
 1369              		.loc 1 574 7 is_stmt 1 view .LVU389
 574:src/menu.c    ****     default:;
 1370              		.loc 1 574 9 is_stmt 0 view .LVU390
 1371 00a0 1121     		movs	r1, #17
 1372 00a2 BCE7     		b	.L137
 1373              	.LVL101:
 1374              	.L140:
 551:src/menu.c    ****       break;
 1375              		.loc 1 551 9 view .LVU391
 1376 00a4 1221     		movs	r1, #18
 1377              	.LVL102:
 551:src/menu.c    ****       break;
 1378              		.loc 1 551 9 view .LVU392
 1379 00a6 BAE7     		b	.L137
ARM GAS  /tmp/cc7no4fx.s 			page 41


 1380              	.L148:
 1381              		.align	2
 1382              	.L147:
 1383 00a8 00000000 		.word	main_ram
 1384 00ac 00000000 		.word	.LANCHOR1
 1385 00b0 00000000 		.word	Menus
 1386 00b4 00000000 		.word	.LANCHOR4
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.text.display_menu,"ax",%progbits
 1391              		.align	1
 1392              		.p2align 2,,3
 1393              		.global	display_menu
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv4-sp-d16
 1399              	display_menu:
 1400              	.LFB16:
 584:src/menu.c    **** 
 585:src/menu.c    **** void display_menu (struct _menu Ref) {
 1401              		.loc 1 585 38 is_stmt 1 view -0
 1402              		.cfi_startproc
 1403              		@ args = 208, pretend = 16, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 586:src/menu.c    ****   int len = 0;
 1405              		.loc 1 586 3 view .LVU394
 1406              	.LVL103:
 587:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1407              		.loc 1 587 3 view .LVU395
 585:src/menu.c    ****   int len = 0;
 1408              		.loc 1 585 38 is_stmt 0 view .LVU396
 1409 0000 84B0     		sub	sp, sp, #16
 1410              		.cfi_def_cfa_offset 16
 1411 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1412              		.cfi_def_cfa_offset 52
 1413              		.cfi_offset 4, -52
 1414              		.cfi_offset 5, -48
 1415              		.cfi_offset 6, -44
 1416              		.cfi_offset 7, -40
 1417              		.cfi_offset 8, -36
 1418              		.cfi_offset 9, -32
 1419              		.cfi_offset 10, -28
 1420              		.cfi_offset 11, -24
 1421              		.cfi_offset 14, -20
 1422 0006 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 64
 1424              		.loc 1 587 3 view .LVU397
 1425 0008 0024     		movs	r4, #0
 585:src/menu.c    ****   int len = 0;
 1426              		.loc 1 585 38 view .LVU398
 1427 000a 0CAD     		add	r5, sp, #48
 1428 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1429              		.loc 1 587 3 view .LVU399
 1430 0010 3E4E     		ldr	r6, .L167
 1431 0012 0094     		str	r4, [sp]
 1432 0014 2046     		mov	r0, r4
ARM GAS  /tmp/cc7no4fx.s 			page 42


 1433 0016 3423     		movs	r3, #52
 1434 0018 4FF4C872 		mov	r2, #400
 1435 001c BC21     		movs	r1, #188
 1436 001e B047     		blx	r6
 1437              	.LVL104:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1438              		.loc 1 588 3 is_stmt 1 view .LVU400
 1439 0020 3B4D     		ldr	r5, .L167+4
 1440 0022 FF23     		movs	r3, #255
 1441 0024 0093     		str	r3, [sp]
 1442 0026 4FF4C872 		mov	r2, #400
 1443 002a 0123     		movs	r3, #1
 1444 002c BC21     		movs	r1, #188
 1445 002e 2046     		mov	r0, r4
 1446 0030 B047     		blx	r6
 1447              	.LVL105:
 589:src/menu.c    ****   //Clear previous menu
 590:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1448              		.loc 1 590 3 view .LVU401
 1449              	.LBB91:
 1450              		.loc 1 590 8 view .LVU402
 1451              		.loc 1 590 21 view .LVU403
 591:src/menu.c    ****     mdots[col][0] = 0;
 1452              		.loc 1 591 19 is_stmt 0 view .LVU404
 1453 0032 2246     		mov	r2, r4
 1454 0034 05F5C871 		add	r1, r5, #400
 1455              	.LBE91:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1456              		.loc 1 588 3 view .LVU405
 1457 0038 2B46     		mov	r3, r5
 1458              	.LVL106:
 1459              	.L150:
 1460              	.LBB92:
 1461              		.loc 1 591 5 is_stmt 1 discriminator 3 view .LVU406
 1462              		.loc 1 591 19 is_stmt 0 discriminator 3 view .LVU407
 1463 003a 1A70     		strb	r2, [r3]
 592:src/menu.c    ****     mdots[col][1] = 0;
 1464              		.loc 1 592 5 is_stmt 1 discriminator 3 view .LVU408
 1465              		.loc 1 592 19 is_stmt 0 discriminator 3 view .LVU409
 1466 003c 5A70     		strb	r2, [r3, #1]
 590:src/menu.c    ****     mdots[col][0] = 0;
 1467              		.loc 1 590 32 is_stmt 1 discriminator 3 view .LVU410
 590:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 590 21 discriminator 3 view .LVU411
 1469 003e 0233     		adds	r3, r3, #2
 590:src/menu.c    ****     mdots[col][0] = 0;
 1470              		.loc 1 590 3 is_stmt 0 discriminator 3 view .LVU412
 1471 0040 9942     		cmp	r1, r3
 1472 0042 FAD1     		bne	.L150
 1473 0044 14AE     		add	r6, sp, #80
 590:src/menu.c    ****     mdots[col][0] = 0;
 1474              		.loc 1 590 3 view .LVU413
 1475 0046 0024     		movs	r4, #0
 1476              	.LVL107:
 1477              	.L151:
 590:src/menu.c    ****     mdots[col][0] = 0;
 1478              		.loc 1 590 3 view .LVU414
ARM GAS  /tmp/cc7no4fx.s 			page 43


 1479              	.LBE92:
 1480              	.LBB93:
 593:src/menu.c    ****   }
 594:src/menu.c    **** 
 595:src/menu.c    ****   // Draw menu items
 596:src/menu.c    ****   // 
 597:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 598:src/menu.c    ****     /*
 599:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 600:src/menu.c    ****     */
 601:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 602:src/menu.c    ****     // Unshifted first
 603:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1481              		.loc 1 603 7 is_stmt 1 view .LVU415
 1482              		.loc 1 603 13 is_stmt 0 view .LVU416
 1483 0048 0021     		movs	r1, #0
 1484 004a 3046     		mov	r0, r6
 1485 004c FFF7FEFF 		bl	pixel_length
 1486              	.LVL108:
 604:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1487              		.loc 1 604 7 is_stmt 1 view .LVU417
 1488              		.loc 1 604 73 is_stmt 0 view .LVU418
 1489 0050 C0F12000 		rsb	r0, r0, #32
 1490              	.LVL109:
 1491              		.loc 1 604 79 view .LVU419
 1492 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1493              		.loc 1 604 7 view .LVU420
 1494 0058 04EB6001 		add	r1, r4, r0, asr #1
 1495 005c 0022     		movs	r2, #0
 1496 005e 3046     		mov	r0, r6
 1497 0060 06F10807 		add	r7, r6, #8
 1498 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1499              	.LVL110:
 605:src/menu.c    ****       // Now shifted ...	
 606:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1500              		.loc 1 606 7 is_stmt 1 view .LVU421
 1501              		.loc 1 606 13 is_stmt 0 view .LVU422
 1502 0068 0021     		movs	r1, #0
 1503 006a 3846     		mov	r0, r7
 1504 006c FFF7FEFF 		bl	pixel_length
 1505              	.LVL111:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1506              		.loc 1 607 7 is_stmt 1 view .LVU423
 1507              		.loc 1 607 26 is_stmt 0 view .LVU424
 1508 0070 C0F12000 		rsb	r0, r0, #32
 1509              	.LVL112:
 1510              		.loc 1 607 31 view .LVU425
 1511 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1512              	.LVL113:
 608:src/menu.c    ****       if (len<0) len = 0;
 1513              		.loc 1 608 7 is_stmt 1 view .LVU426
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1514              		.loc 1 607 11 is_stmt 0 view .LVU427
 1515 0078 04EB6001 		add	r1, r4, r0, asr #1
 1516              	.LVL114:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1517              		.loc 1 607 11 view .LVU428
ARM GAS  /tmp/cc7no4fx.s 			page 44


 1518 007c C729     		cmp	r1, #199
 1519 007e A8BF     		it	ge
 1520 0080 C721     		movge	r1, #199
 1521              	.LVL115:
 609:src/menu.c    ****       if (len>199) len = 199;
 610:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1522              		.loc 1 610 7 is_stmt 1 view .LVU429
 1523 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1524              	.LVL116:
 1525              		.loc 1 610 7 is_stmt 0 view .LVU430
 1526 0086 3846     		mov	r0, r7
 1527 0088 2034     		adds	r4, r4, #32
 1528 008a 0122     		movs	r2, #1
 1529 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1530              	.LVL117:
 597:src/menu.c    ****     /*
 1531              		.loc 1 597 32 is_stmt 1 view .LVU431
 597:src/menu.c    ****     /*
 1532              		.loc 1 597 22 view .LVU432
 597:src/menu.c    ****     /*
 1533              		.loc 1 597 3 is_stmt 0 view .LVU433
 1534 0090 C02C     		cmp	r4, #192
 1535 0092 06F12006 		add	r6, r6, #32
 1536 0096 D7D1     		bne	.L151
 1537 0098 1E4E     		ldr	r6, .L167+8
 1538              	.LBE93:
 1539              	.LBB94:
 1540              	.LBB95:
 611:src/menu.c    ****   }
 612:src/menu.c    **** 
 613:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 614:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 615:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 616:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 617:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1541              		.loc 1 617 2 view .LVU434
 1542 009a DFF87090 		ldr	r9, .L167
 1543 009e C5F1040A 		rsb	r10, r5, #4
 1544 00a2 06F5C47B 		add	fp, r6, #392
 1545              	.LBE95:
 1546              	.LBE94:
 1547              	.LBB97:
 597:src/menu.c    ****     /*
 1548              		.loc 1 597 3 view .LVU435
 1549 00a6 771E     		subs	r7, r6, #1
 1550              	.LBE97:
 1551              	.LBB98:
 1552              	.LBB96:
 1553              		.loc 1 617 2 view .LVU436
 1554 00a8 4FF0FF08 		mov	r8, #255
 1555              	.L152:
 1556              	.LVL118:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1557              		.loc 1 614 23 is_stmt 1 view .LVU437
 1558 00ac 0AEB0705 		add	r5, r10, r7
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1559              		.loc 1 614 14 is_stmt 0 view .LVU438
ARM GAS  /tmp/cc7no4fx.s 			page 45


 1560 00b0 0024     		movs	r4, #0
 1561              	.LVL119:
 1562              	.L155:
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1563              		.loc 1 615 7 is_stmt 1 view .LVU439
 1564              		.loc 1 617 2 view .LVU440
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1565              		.loc 1 615 22 is_stmt 0 view .LVU441
 1566 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1567              		.loc 1 615 40 view .LVU442
 1568 00b6 2241     		asrs	r2, r2, r4
 1569              		.loc 1 617 2 view .LVU443
 1570 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1571 00bc 0323     		movs	r3, #3
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 615 10 view .LVU444
 1573 00be 12F0010F 		tst	r2, #1
 1574              		.loc 1 617 2 view .LVU445
 1575 00c2 01F1E901 		add	r1, r1, #233
 1576 00c6 1A46     		mov	r2, r3
 1577 00c8 2846     		mov	r0, r5
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1578              		.loc 1 615 10 view .LVU446
 1579 00ca 02D0     		beq	.L153
 1580              		.loc 1 617 2 view .LVU447
 1581 00cc CDF80080 		str	r8, [sp]
 1582 00d0 C847     		blx	r9
 1583              	.LVL120:
 1584              	.L153:
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1585              		.loc 1 618 7 is_stmt 1 view .LVU448
 619:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 620:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1586              		.loc 1 620 2 view .LVU449
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1587              		.loc 1 618 22 is_stmt 0 view .LVU450
 1588 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1589              		.loc 1 618 40 view .LVU451
 1590 00d4 2241     		asrs	r2, r2, r4
 1591              		.loc 1 620 2 view .LVU452
 1592 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1593 00da 0323     		movs	r3, #3
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1594              		.loc 1 618 10 view .LVU453
 1595 00dc 12F0010F 		tst	r2, #1
 1596              		.loc 1 620 2 view .LVU454
 1597 00e0 01F1D001 		add	r1, r1, #208
 1598 00e4 1A46     		mov	r2, r3
 1599 00e6 04F10104 		add	r4, r4, #1
 1600              	.LVL121:
 1601              		.loc 1 620 2 view .LVU455
 1602 00ea 2846     		mov	r0, r5
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1603              		.loc 1 618 10 view .LVU456
 1604 00ec 02D0     		beq	.L154
ARM GAS  /tmp/cc7no4fx.s 			page 46


 1605              		.loc 1 620 2 view .LVU457
 1606 00ee CDF80080 		str	r8, [sp]
 1607 00f2 C847     		blx	r9
 1608              	.LVL122:
 1609              	.L154:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1610              		.loc 1 614 32 is_stmt 1 discriminator 2 view .LVU458
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1611              		.loc 1 614 23 discriminator 2 view .LVU459
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1612              		.loc 1 614 5 is_stmt 0 discriminator 2 view .LVU460
 1613 00f4 062C     		cmp	r4, #6
 1614 00f6 DCD1     		bne	.L155
 1615              	.LBE96:
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1616              		.loc 1 613 32 is_stmt 1 discriminator 2 view .LVU461
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1617              		.loc 1 613 21 discriminator 2 view .LVU462
 1618 00f8 0236     		adds	r6, r6, #2
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1619              		.loc 1 613 3 is_stmt 0 discriminator 2 view .LVU463
 1620 00fa B345     		cmp	fp, r6
 1621 00fc 07F10207 		add	r7, r7, #2
 1622 0100 D4D1     		bne	.L152
 1623              	.LBE98:
 621:src/menu.c    ****     }
 622:src/menu.c    ****   }
 623:src/menu.c    **** }
 1624              		.loc 1 623 1 view .LVU464
 1625 0102 03B0     		add	sp, sp, #12
 1626              		.cfi_def_cfa_offset 52
 1627              		@ sp needed
 1628 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1629              		.cfi_restore 14
 1630              		.cfi_restore 11
 1631              		.cfi_restore 10
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 16
 1639              	.LVL123:
 1640              		.loc 1 623 1 view .LVU465
 1641 0108 04B0     		add	sp, sp, #16
 1642              		.cfi_def_cfa_offset 0
 1643 010a 7047     		bx	lr
 1644              	.L168:
 1645              		.align	2
 1646              	.L167:
 1647 010c 3D020008 		.word	134218301
 1648 0110 00000000 		.word	.LANCHOR0
 1649 0114 01000000 		.word	.LANCHOR0+1
 1650              		.cfi_endproc
 1651              	.LFE16:
 1653              		.section	.text.display_current_menu,"ax",%progbits
ARM GAS  /tmp/cc7no4fx.s 			page 47


 1654              		.align	1
 1655              		.p2align 2,,3
 1656              		.global	display_current_menu
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	display_current_menu:
 1663              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1664              		.loc 1 148 30 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 208
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1668              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1669              		.loc 1 148 30 is_stmt 0 view .LVU468
 1670 0000 10B5     		push	{r4, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 4, -8
 1673              		.cfi_offset 14, -4
 1674 0002 E4B0     		sub	sp, sp, #400
 1675              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1676              		.loc 1 149 3 view .LVU469
 1677 0004 30AC     		add	r4, sp, #192
 1678 0006 2046     		mov	r0, r4
 1679 0008 FFF7FEFF 		bl	get_current_menu_ref
 1680              	.LVL124:
 1681 000c 34A9     		add	r1, sp, #208
 1682 000e C022     		movs	r2, #192
 1683 0010 6846     		mov	r0, sp
 1684 0012 FFF7FEFF 		bl	memcpy
 1685              	.LVL125:
 1686 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1687 001a FFF7FEFF 		bl	display_menu
 1688              	.LVL126:
 150:src/menu.c    **** 
 1689              		.loc 1 150 1 view .LVU470
 1690 001e 64B0     		add	sp, sp, #400
 1691              		.cfi_def_cfa_offset 8
 1692              		@ sp needed
 1693 0020 10BD     		pop	{r4, pc}
 1694              		.cfi_endproc
 1695              	.LFE11:
 1697 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	all_menu_dots
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	all_menu_dots:
 1707              	.LFB17:
 624:src/menu.c    **** 
ARM GAS  /tmp/cc7no4fx.s 			page 48


 625:src/menu.c    **** void all_menu_dots () {
 1708              		.loc 1 625 23 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 626 3 view .LVU472
 1713              	.LBB99:
 1714              		.loc 1 626 8 view .LVU473
 1715              	.LVL127:
 1716              		.loc 1 626 21 view .LVU474
 1717              	.LBE99:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1718              		.loc 1 625 23 is_stmt 0 view .LVU475
 1719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1720              		.cfi_def_cfa_offset 20
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              	.LBB103:
 1727              	.LBB100:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 628:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1728              		.loc 1 628 2 view .LVU476
 1729 0002 0D4E     		ldr	r6, .L177
 1730              	.LBE100:
 1731              	.LBE103:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1732              		.loc 1 625 23 view .LVU477
 1733 0004 83B0     		sub	sp, sp, #12
 1734              		.cfi_def_cfa_offset 32
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1735              		.loc 1 625 23 view .LVU478
 1736 0006 0025     		movs	r5, #0
 1737              	.LBB104:
 1738              	.LBB101:
 1739              		.loc 1 628 2 view .LVU479
 1740 0008 FF27     		movs	r7, #255
 1741              	.LVL128:
 1742              	.L172:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1743              		.loc 1 627 23 is_stmt 1 view .LVU480
 1744              	.LBE101:
 1745              	.LBE104:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1746              		.loc 1 625 23 is_stmt 0 view .LVU481
 1747 000a E924     		movs	r4, #233
 1748              	.LVL129:
 1749              	.L173:
 1750              	.LBB105:
 1751              	.LBB102:
 1752              		.loc 1 628 2 is_stmt 1 discriminator 3 view .LVU482
 1753 000c 0323     		movs	r3, #3
 1754 000e 1A46     		mov	r2, r3
 1755 0010 2146     		mov	r1, r4
ARM GAS  /tmp/cc7no4fx.s 			page 49


 1756 0012 2846     		mov	r0, r5
 1757 0014 0097     		str	r7, [sp]
 1758 0016 B047     		blx	r6
 1759              	.LVL130:
 629:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1760              		.loc 1 629 2 discriminator 3 view .LVU483
 1761 0018 0323     		movs	r3, #3
 1762 001a A4F11901 		sub	r1, r4, #25
 1763 001e 0097     		str	r7, [sp]
 1764 0020 1A46     		mov	r2, r3
 1765 0022 2846     		mov	r0, r5
 1766 0024 033C     		subs	r4, r4, #3
 1767 0026 B047     		blx	r6
 1768              	.LVL131:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 627 32 discriminator 3 view .LVU484
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 627 23 discriminator 3 view .LVU485
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1771              		.loc 1 627 5 is_stmt 0 discriminator 3 view .LVU486
 1772 0028 D72C     		cmp	r4, #215
 1773 002a EFD1     		bne	.L173
 1774              	.LBE102:
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1775              		.loc 1 626 32 is_stmt 1 discriminator 2 view .LVU487
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1776              		.loc 1 626 21 discriminator 2 view .LVU488
 1777 002c 0235     		adds	r5, r5, #2
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1778              		.loc 1 626 3 is_stmt 0 discriminator 2 view .LVU489
 1779 002e B5F5C87F 		cmp	r5, #400
 1780 0032 EAD1     		bne	.L172
 1781              	.LBE105:
 630:src/menu.c    ****     }
 631:src/menu.c    ****   }
 632:src/menu.c    **** }  
 1782              		.loc 1 632 1 view .LVU490
 1783 0034 03B0     		add	sp, sp, #12
 1784              		.cfi_def_cfa_offset 20
 1785              		@ sp needed
 1786 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1787              	.L178:
 1788              		.align	2
 1789              	.L177:
 1790 0038 3D020008 		.word	134218301
 1791              		.cfi_endproc
 1792              	.LFE17:
 1794              		.section	.text.build_user_menu,"ax",%progbits
 1795              		.align	1
 1796              		.p2align 2,,3
 1797              		.global	build_user_menu
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	build_user_menu:
 1804              	.LFB18:
ARM GAS  /tmp/cc7no4fx.s 			page 50


 633:src/menu.c    **** 
 634:src/menu.c    **** void build_user_menu(void)
 635:src/menu.c    **** {
 1805              		.loc 1 635 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 16
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 636:src/menu.c    ****   // find the label 'MNU'
 637:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 1809              		.loc 1 637 3 view .LVU492
 1810              	.LVL132:
 638:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1811              		.loc 1 638 3 view .LVU493
 635:src/menu.c    ****   // find the label 'MNU'
 1812              		.loc 1 635 1 is_stmt 0 view .LVU494
 1813 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1814              		.cfi_def_cfa_offset 36
 1815              		.cfi_offset 4, -36
 1816              		.cfi_offset 5, -32
 1817              		.cfi_offset 6, -28
 1818              		.cfi_offset 7, -24
 1819              		.cfi_offset 8, -20
 1820              		.cfi_offset 9, -16
 1821              		.cfi_offset 10, -12
 1822              		.cfi_offset 11, -8
 1823              		.cfi_offset 14, -4
 1824              		.loc 1 638 21 view .LVU495
 1825 0004 0021     		movs	r1, #0
 1826 0006 4748     		ldr	r0, .L218
 1827 0008 DFF82881 		ldr	r8, .L218+16
 635:src/menu.c    ****   // find the label 'MNU'
 1828              		.loc 1 635 1 view .LVU496
 1829 000c 85B0     		sub	sp, sp, #20
 1830              		.cfi_def_cfa_offset 56
 1831              		.loc 1 638 21 view .LVU497
 1832 000e FFF7FEFF 		bl	findmultilbl
 1833              	.LVL133:
 1834 0012 4346     		mov	r3, r8
 1835 0014 0446     		mov	r4, r0
 1836              	.LVL134:
 639:src/menu.c    ****   int i=0;
 1837              		.loc 1 639 3 is_stmt 1 view .LVU498
 640:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 1838              		.loc 1 640 3 view .LVU499
 1839              	.LBB106:
 1840              		.loc 1 640 8 view .LVU500
 1841              		.loc 1 640 19 view .LVU501
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1842              		.loc 1 641 43 is_stmt 0 view .LVU502
 1843 0016 0022     		movs	r2, #0
 1844 0018 08F1C000 		add	r0, r8, #192
 1845              	.LVL135:
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 643:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1846              		.loc 1 643 42 view .LVU503
 1847 001c 2E21     		movs	r1, #46
 1848              	.LVL136:
ARM GAS  /tmp/cc7no4fx.s 			page 51


 1849              	.L180:
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1850              		.loc 1 641 7 is_stmt 1 discriminator 3 view .LVU504
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1851              		.loc 1 641 43 is_stmt 0 discriminator 3 view .LVU505
 1852 001e 83F82020 		strb	r2, [r3, #32]
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1853              		.loc 1 642 7 is_stmt 1 discriminator 3 view .LVU506
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1854              		.loc 1 642 40 is_stmt 0 discriminator 3 view .LVU507
 1855 0022 5A61     		str	r2, [r3, #20]
 1856              		.loc 1 643 7 is_stmt 1 discriminator 3 view .LVU508
 1857              		.loc 1 643 42 is_stmt 0 discriminator 3 view .LVU509
 1858 0024 1974     		strb	r1, [r3, #16]
 644:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1859              		.loc 1 644 7 is_stmt 1 discriminator 3 view .LVU510
 1860              		.loc 1 644 41 is_stmt 0 discriminator 3 view .LVU511
 1861 0026 83F82820 		strb	r2, [r3, #40]
 645:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1862              		.loc 1 645 7 is_stmt 1 discriminator 3 view .LVU512
 1863              		.loc 1 645 38 is_stmt 0 discriminator 3 view .LVU513
 1864 002a DA61     		str	r2, [r3, #28]
 646:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1865              		.loc 1 646 7 is_stmt 1 discriminator 3 view .LVU514
 1866              		.loc 1 646 40 is_stmt 0 discriminator 3 view .LVU515
 1867 002c 1976     		strb	r1, [r3, #24]
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1868              		.loc 1 640 24 is_stmt 1 discriminator 3 view .LVU516
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1869              		.loc 1 640 19 discriminator 3 view .LVU517
 1870 002e 2033     		adds	r3, r3, #32
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1871              		.loc 1 640 3 is_stmt 0 discriminator 3 view .LVU518
 1872 0030 8342     		cmp	r3, r0
 1873 0032 F4D1     		bne	.L180
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1874              		.loc 1 640 3 discriminator 3 view .LVU519
 1875              	.LBE106:
 647:src/menu.c    ****   }
 648:src/menu.c    ****   while (pc && i < 12) {
 1876              		.loc 1 648 9 is_stmt 1 view .LVU520
 1877 0034 002C     		cmp	r4, #0
 1878 0036 3FD0     		beq	.L179
 1879 0038 3B4D     		ldr	r5, .L218+4
 1880              	.LBB107:
 649:src/menu.c    ****     s_opcode op;
 650:src/menu.c    ****     char buf1[16];
 651:src/menu.c    **** 
 652:src/menu.c    ****     pc = do_inc(pc, 0);
 653:src/menu.c    ****     op = (s_opcode) getprog(pc);
 654:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 655:src/menu.c    ****       break;
 656:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 657:src/menu.c    ****       if (i==4) {
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 659:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 660:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
ARM GAS  /tmp/cc7no4fx.s 			page 52


 1881              		.loc 1 660 2 is_stmt 0 view .LVU521
 1882 003a DFF8FC90 		ldr	r9, .L218+20
 661:src/menu.c    ****       }
 662:src/menu.c    ****       else if (i==5) {
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 664:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 665:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1883              		.loc 1 665 2 view .LVU522
 1884 003e 05F1A00A 		add	r10, r5, #160
 1885              	.LBE107:
 648:src/menu.c    ****     s_opcode op;
 1886              		.loc 1 648 9 view .LVU523
 1887 0042 0026     		movs	r6, #0
 1888              	.LVL137:
 1889              	.L193:
 1890              	.LBB110:
 649:src/menu.c    ****     s_opcode op;
 1891              		.loc 1 649 5 is_stmt 1 view .LVU524
 650:src/menu.c    **** 
 1892              		.loc 1 650 5 view .LVU525
 652:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1893              		.loc 1 652 5 view .LVU526
 652:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1894              		.loc 1 652 10 is_stmt 0 view .LVU527
 1895 0044 2046     		mov	r0, r4
 1896 0046 0021     		movs	r1, #0
 1897 0048 FFF7FEFF 		bl	do_inc
 1898              	.LVL138:
 1899 004c 0446     		mov	r4, r0
 1900              	.LVL139:
 653:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1901              		.loc 1 653 5 is_stmt 1 view .LVU528
 653:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1902              		.loc 1 653 21 is_stmt 0 view .LVU529
 1903 004e FFF7FEFF 		bl	getprog
 1904              	.LVL140:
 653:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1905              		.loc 1 653 8 view .LVU530
 1906 0052 1FFA80FB 		uxth	fp, r0
 1907              	.LVL141:
 654:src/menu.c    ****       break;
 1908              		.loc 1 654 5 is_stmt 1 view .LVU531
 654:src/menu.c    ****       break;
 1909              		.loc 1 654 8 is_stmt 0 view .LVU532
 1910 0056 BBF59D7F 		cmp	fp, #314
 1911 005a 2DD0     		beq	.L179
 656:src/menu.c    ****       if (i==4) {
 1912              		.loc 1 656 5 is_stmt 1 view .LVU533
 656:src/menu.c    ****       if (i==4) {
 1913              		.loc 1 656 8 is_stmt 0 view .LVU534
 1914 005c BBF5807F 		cmp	fp, #256
 1915 0060 3AD0     		beq	.L215
 666:src/menu.c    ****       }
 667:src/menu.c    ****       i += 1;
 668:src/menu.c    ****       continue;
 669:src/menu.c    ****     }
 670:src/menu.c    ****     if (isDBL(op)) {
ARM GAS  /tmp/cc7no4fx.s 			page 53


 1916              		.loc 1 670 5 is_stmt 1 view .LVU535
 1917 0062 81B2     		uxth	r1, r0
 1918              		.loc 1 670 9 is_stmt 0 view .LVU536
 1919 0064 00F47040 		and	r0, r0, #61440
 1920              		.loc 1 670 8 view .LVU537
 1921 0068 B0F5704F 		cmp	r0, #61440
 1922              		.loc 1 670 9 view .LVU538
 1923 006c 0F46     		mov	r7, r1
 1924              		.loc 1 670 8 view .LVU539
 1925 006e 1DD0     		beq	.L191
 671:src/menu.c    ****       i += 1;
 672:src/menu.c    ****       continue;
 673:src/menu.c    ****     }
 674:src/menu.c    ****     if (isRARG(op)) {
 1926              		.loc 1 674 5 is_stmt 1 view .LVU540
 1927              		.loc 1 674 8 is_stmt 0 view .LVU541
 1928 0070 48B1     		cbz	r0, .L188
 1929              	.LBB108:
 675:src/menu.c    ****       const s_opcode rarg = RARG_CMD(op);
 1930              		.loc 1 675 7 is_stmt 1 view .LVU542
 1931              		.loc 1 675 29 is_stmt 0 view .LVU543
 1932 0072 4FEA1B22 		lsr	r2, fp, #8
 1933 0076 203A     		subs	r2, r2, #32
 1934 0078 D2B2     		uxtb	r2, r2
 1935              	.LVL142:
 676:src/menu.c    ****       if (rarg != RARG_ALPHA && rarg != RARG_CONV
 1936              		.loc 1 676 7 is_stmt 1 view .LVU544
 1937              		.loc 1 676 10 is_stmt 0 view .LVU545
 1938 007a 242A     		cmp	r2, #36
 1939 007c 03D0     		beq	.L188
 1940              		.loc 1 676 30 discriminator 1 view .LVU546
 1941 007e 6C2A     		cmp	r2, #108
 1942 0080 01D0     		beq	.L188
 677:src/menu.c    **** 	  && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX)
 1943              		.loc 1 677 4 view .LVU547
 1944 0082 012A     		cmp	r2, #1
 1945 0084 3AD8     		bhi	.L216
 1946              	.LVL143:
 1947              	.L188:
 1948              		.loc 1 677 4 view .LVU548
 1949              	.LBE108:
 678:src/menu.c    **** 	op = op & 0xff00;	// remove argument
 679:src/menu.c    ****     }
 680:src/menu.c    ****     catcmd(op, buf1);
 1950              		.loc 1 680 5 is_stmt 1 view .LVU549
 1951 0086 0846     		mov	r0, r1
 1952 0088 6946     		mov	r1, sp
 1953 008a FFF7FEFF 		bl	catcmd
 1954              	.LVL144:
 681:src/menu.c    **** #pragma GCC diagnostic push
 682:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 683:src/menu.c    ****     if (i<6) {
 1955              		.loc 1 683 5 view .LVU550
 1956              		.loc 1 683 8 is_stmt 0 view .LVU551
 1957 008e 052E     		cmp	r6, #5
 684:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1958              		.loc 1 684 7 view .LVU552
ARM GAS  /tmp/cc7no4fx.s 			page 54


 1959 0090 6946     		mov	r1, sp
 1960 0092 4FF00702 		mov	r2, #7
 683:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1961              		.loc 1 683 8 view .LVU553
 1962 0096 12D8     		bhi	.L189
 1963              		.loc 1 684 7 is_stmt 1 view .LVU554
 1964 0098 2846     		mov	r0, r5
 1965 009a FFF7FEFF 		bl	strncpy
 1966              	.LVL145:
 685:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1967              		.loc 1 685 7 view .LVU555
 1968              		.loc 1 685 42 is_stmt 0 view .LVU556
 1969 009e 0021     		movs	r1, #0
 686:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 687:src/menu.c    ****       UserMenu.keys[i].unshifted.key_34s = K_OP;
 1970              		.loc 1 687 42 view .LVU557
 1971 00a0 3422     		movs	r2, #52
 686:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1972              		.loc 1 686 40 view .LVU558
 1973 00a2 45F80CBC 		str	fp, [r5, #-12]
 685:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1974              		.loc 1 685 42 view .LVU559
 1975 00a6 E971     		strb	r1, [r5, #7]
 686:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1976              		.loc 1 686 7 is_stmt 1 view .LVU560
 1977              		.loc 1 687 7 view .LVU561
 1978              		.loc 1 687 42 is_stmt 0 view .LVU562
 1979 00a8 05F8102C 		strb	r2, [r5, #-16]
 1980              	.LVL146:
 1981              	.L191:
 1982              		.loc 1 687 42 view .LVU563
 1983              	.LBE110:
 648:src/menu.c    ****     s_opcode op;
 1984              		.loc 1 648 9 is_stmt 1 view .LVU564
 1985 00ac 24B1     		cbz	r4, .L179
 1986 00ae 0136     		adds	r6, r6, #1
 648:src/menu.c    ****     s_opcode op;
 1987              		.loc 1 648 13 is_stmt 0 discriminator 1 view .LVU565
 1988 00b0 0C2E     		cmp	r6, #12
 1989 00b2 05F12005 		add	r5, r5, #32
 1990 00b6 C5D1     		bne	.L193
 1991              	.LVL147:
 1992              	.L179:
 688:src/menu.c    ****     }
 689:src/menu.c    ****     else {
 690:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 692:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 693:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 694:src/menu.c    ****     }
 695:src/menu.c    **** #pragma GCC diagnostic pop
 696:src/menu.c    ****     i++;
 697:src/menu.c    ****   }
 698:src/menu.c    **** }
 1993              		.loc 1 698 1 view .LVU566
 1994 00b8 05B0     		add	sp, sp, #20
 1995              		.cfi_remember_state
ARM GAS  /tmp/cc7no4fx.s 			page 55


 1996              		.cfi_def_cfa_offset 36
 1997              		@ sp needed
 1998 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1999              	.LVL148:
 2000              	.L189:
 2001              		.cfi_restore_state
 2002              	.LBB111:
 690:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 2003              		.loc 1 690 7 is_stmt 1 view .LVU567
 2004 00be A5F1B800 		sub	r0, r5, #184
 2005 00c2 FFF7FEFF 		bl	strncpy
 2006              	.LVL149:
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 2007              		.loc 1 691 7 view .LVU568
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 2008              		.loc 1 691 42 is_stmt 0 view .LVU569
 2009 00c6 0022     		movs	r2, #0
 693:src/menu.c    ****     }
 2010              		.loc 1 693 42 view .LVU570
 2011 00c8 3423     		movs	r3, #52
 692:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 2012              		.loc 1 692 40 view .LVU571
 2013 00ca 45F8C47C 		str	r7, [r5, #-196]
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 2014              		.loc 1 691 42 view .LVU572
 2015 00ce 05F8B12C 		strb	r2, [r5, #-177]
 692:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 2016              		.loc 1 692 7 is_stmt 1 view .LVU573
 693:src/menu.c    ****     }
 2017              		.loc 1 693 7 view .LVU574
 693:src/menu.c    ****     }
 2018              		.loc 1 693 42 is_stmt 0 view .LVU575
 2019 00d2 05F8C83C 		strb	r3, [r5, #-200]
 696:src/menu.c    ****   }
 2020              		.loc 1 696 5 is_stmt 1 view .LVU576
 2021              	.LVL150:
 696:src/menu.c    ****   }
 2022              		.loc 1 696 5 is_stmt 0 view .LVU577
 2023 00d6 E9E7     		b	.L191
 2024              	.LVL151:
 2025              	.L215:
 657:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2026              		.loc 1 657 7 is_stmt 1 view .LVU578
 657:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2027              		.loc 1 657 10 is_stmt 0 view .LVU579
 2028 00d8 042E     		cmp	r6, #4
 2029 00da 14D0     		beq	.L217
 662:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2030              		.loc 1 662 12 is_stmt 1 view .LVU580
 662:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2031              		.loc 1 662 15 is_stmt 0 view .LVU581
 2032 00dc 052E     		cmp	r6, #5
 2033 00de E5D1     		bne	.L191
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2034              		.loc 1 663 2 is_stmt 1 view .LVU582
 665:src/menu.c    ****       }
 2035              		.loc 1 665 2 is_stmt 0 view .LVU583
ARM GAS  /tmp/cc7no4fx.s 			page 56


 2036 00e0 1249     		ldr	r1, .L218+8
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2037              		.loc 1 663 35 view .LVU584
 2038 00e2 4FF0FF30 		mov	r0, #-1
 664:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2039              		.loc 1 664 37 view .LVU585
 2040 00e6 2D23     		movs	r3, #45
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2041              		.loc 1 663 35 view .LVU586
 2042 00e8 C8F8B400 		str	r0, [r8, #180]
 664:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2043              		.loc 1 664 2 is_stmt 1 view .LVU587
 665:src/menu.c    ****       }
 2044              		.loc 1 665 2 is_stmt 0 view .LVU588
 2045 00ec 0968     		ldr	r1, [r1]
 664:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2046              		.loc 1 664 37 view .LVU589
 2047 00ee 88F8B030 		strb	r3, [r8, #176]
 665:src/menu.c    ****       }
 2048              		.loc 1 665 2 is_stmt 1 view .LVU590
 2049 00f2 3246     		mov	r2, r6
 2050 00f4 5046     		mov	r0, r10
 2051 00f6 FFF7FEFF 		bl	strncpy
 2052              	.LVL152:
 667:src/menu.c    ****       continue;
 2053              		.loc 1 667 7 view .LVU591
 668:src/menu.c    ****     }
 2054              		.loc 1 668 7 view .LVU592
 2055 00fa D7E7     		b	.L191
 2056              	.LVL153:
 2057              	.L216:
 2058              	.LBB109:
 678:src/menu.c    ****     }
 2059              		.loc 1 678 2 view .LVU593
 678:src/menu.c    ****     }
 2060              		.loc 1 678 5 is_stmt 0 view .LVU594
 2061 00fc 0BF47F4B 		and	fp, fp, #65280
 2062              	.LVL154:
 678:src/menu.c    ****     }
 2063              		.loc 1 678 5 view .LVU595
 2064 0100 5946     		mov	r1, fp
 2065 0102 5F46     		mov	r7, fp
 2066 0104 BFE7     		b	.L188
 2067              	.LVL155:
 2068              	.L217:
 678:src/menu.c    ****     }
 2069              		.loc 1 678 5 view .LVU596
 2070              	.LBE109:
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2071              		.loc 1 658 2 is_stmt 1 view .LVU597
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2072              		.loc 1 658 35 is_stmt 0 view .LVU598
 2073 0106 4FF0FF30 		mov	r0, #-1
 659:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2074              		.loc 1 659 37 view .LVU599
 2075 010a 2C23     		movs	r3, #44
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
ARM GAS  /tmp/cc7no4fx.s 			page 57


 2076              		.loc 1 658 35 view .LVU600
 2077 010c C8F89400 		str	r0, [r8, #148]
 659:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2078              		.loc 1 659 2 is_stmt 1 view .LVU601
 660:src/menu.c    ****       }
 2079              		.loc 1 660 2 is_stmt 0 view .LVU602
 2080 0110 D9F80010 		ldr	r1, [r9]
 2081 0114 0648     		ldr	r0, .L218+12
 659:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2082              		.loc 1 659 37 view .LVU603
 2083 0116 88F89030 		strb	r3, [r8, #144]
 660:src/menu.c    ****       }
 2084              		.loc 1 660 2 is_stmt 1 view .LVU604
 2085 011a 0522     		movs	r2, #5
 2086 011c FFF7FEFF 		bl	strncpy
 2087              	.LVL156:
 2088 0120 C4E7     		b	.L191
 2089              	.L219:
 2090 0122 00BF     		.align	2
 2091              	.L218:
 2092 0124 4DF04E55 		.word	1431236685
 2093 0128 20000000 		.word	.LANCHOR4+32
 2094 012c 00000000 		.word	.LANCHOR6
 2095 0130 A0000000 		.word	.LANCHOR4+160
 2096 0134 00000000 		.word	.LANCHOR4
 2097 0138 00000000 		.word	.LANCHOR5
 2098              	.LBE111:
 2099              		.cfi_endproc
 2100              	.LFE18:
 2102              		.section	.text.shutdown,"ax",%progbits
 2103              		.align	1
 2104              		.p2align 2,,3
 2105              		.global	shutdown
 2106              		.syntax unified
 2107              		.thumb
 2108              		.thumb_func
 2109              		.fpu fpv4-sp-d16
 2111              	shutdown:
 2112              	.LFB20:
 2113              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
ARM GAS  /tmp/cc7no4fx.s 			page 58


  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if (Running | Pause) {
  69:src/console.c ****     return mapping_running[c];
  70:src/console.c ****   }
  71:src/console.c **** 
  72:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  73:src/console.c ****   
  74:src/console.c ****   switch (c) {
ARM GAS  /tmp/cc7no4fx.s 			page 59


  75:src/console.c ****   case KEY_F1:
  76:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  77:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  78:src/console.c ****   case KEY_F2:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  81:src/console.c ****   case KEY_F3:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  84:src/console.c ****   case KEY_F4:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  87:src/console.c ****   case KEY_F5:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  90:src/console.c ****   case KEY_F6:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  93:src/console.c ****   }
  94:src/console.c **** 
  95:src/console.c ****   if ( get_alpha_state() ) {
  96:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  97:src/console.c ****       switch (cur_shift()) { 
  98:src/console.c ****       case SHIFT_N:
  99:src/console.c **** 	return mapping_none[c]; // N -> F
 100:src/console.c **** 	break;
 101:src/console.c ****       case SHIFT_F:
 102:src/console.c **** 	return mapping_fshift[c]; // F -> G
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_G:
 105:src/console.c **** 	return h_shift; // G -> H
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_H:
 108:src/console.c **** 	return h_shift; // H -> N
 109:src/console.c ****       default:
 110:src/console.c **** 	return no_change;
 111:src/console.c ****       }
 112:src/console.c ****     }
 113:src/console.c ****     return mapping_alpha [c];
 114:src/console.c ****   }
 115:src/console.c **** 
 116:src/console.c ****   switch (cur_shift()) {
 117:src/console.c ****   case SHIFT_N:    
 118:src/console.c ****     return mapping_none[c];
 119:src/console.c ****     break;
 120:src/console.c ****   case SHIFT_F:
 121:src/console.c ****     return mapping_fshift[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_G:
 124:src/console.c ****     return mapping_gshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   default:
 127:src/console.c ****     return no_change;
 128:src/console.c ****   }
 129:src/console.c **** }
 130:src/console.c **** 
 131:src/console.c **** #endif
ARM GAS  /tmp/cc7no4fx.s 			page 60


 132:src/console.c **** 
 133:src/console.c **** void shutdown( void )
 134:src/console.c **** {
 2114              		.loc 2 134 1 view -0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 135:src/console.c **** #ifndef DM42
 136:src/console.c ****   checksum_all();
 137:src/console.c ****   setuptty( 1 );
 138:src/console.c ****   save_statefile( NULL );
 139:src/console.c ****   exit( 0 );
 140:src/console.c **** #else
 141:src/console.c ****   //  save_ram_file(0);
 142:src/console.c ****   SET_ST(STAT_PGM_END);
 2119              		.loc 2 142 3 view .LVU606
 2120 0000 024A     		ldr	r2, .L221
 2121 0002 1368     		ldr	r3, [r2]
 2122 0004 43F40073 		orr	r3, r3, #512
 2123 0008 1360     		str	r3, [r2]
 143:src/console.c **** #endif
 144:src/console.c **** }
 2124              		.loc 2 144 1 is_stmt 0 view .LVU607
 2125 000a 7047     		bx	lr
 2126              	.L222:
 2127              		.align	2
 2128              	.L221:
 2129 000c 00200010 		.word	268443648
 2130              		.cfi_endproc
 2131              	.LFE20:
 2133              		.section	.text.is_key_pressed,"ax",%progbits
 2134              		.align	1
 2135              		.p2align 2,,3
 2136              		.global	is_key_pressed
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu fpv4-sp-d16
 2142              	is_key_pressed:
 2143              	.LFB21:
 145:src/console.c **** 
 146:src/console.c **** 
 147:src/console.c **** /*
 148:src/console.c ****  *  Dummies
 149:src/console.c ****  */
 150:src/console.c **** int is_key_pressed(void) 
 151:src/console.c **** {
 2144              		.loc 2 151 1 is_stmt 1 view -0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 152:src/console.c **** #ifdef DM42
 153:src/console.c ****   return !key_empty();
 2148              		.loc 2 153 3 view .LVU609
 151:src/console.c **** #ifdef DM42
 2149              		.loc 2 151 1 is_stmt 0 view .LVU610
ARM GAS  /tmp/cc7no4fx.s 			page 61


 2150 0000 08B5     		push	{r3, lr}
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 3, -8
 2153              		.cfi_offset 14, -4
 2154              		.loc 2 153 11 view .LVU611
 2155 0002 034B     		ldr	r3, .L225
 2156 0004 9847     		blx	r3
 2157              	.LVL157:
 154:src/console.c **** #else
 155:src/console.c ****   return 0;
 156:src/console.c **** #endif
 157:src/console.c **** }
 2158              		.loc 2 157 1 view .LVU612
 2159 0006 B0FA80F0 		clz	r0, r0
 2160 000a 4009     		lsrs	r0, r0, #5
 2161 000c 08BD     		pop	{r3, pc}
 2162              	.L226:
 2163 000e 00BF     		.align	2
 2164              	.L225:
 2165 0010 7D030008 		.word	134218621
 2166              		.cfi_endproc
 2167              	.LFE21:
 2169              		.section	.text.get_key,"ax",%progbits
 2170              		.align	1
 2171              		.p2align 2,,3
 2172              		.global	get_key
 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2176              		.fpu fpv4-sp-d16
 2178              	get_key:
 2179              	.LFB22:
 158:src/console.c **** 
 159:src/console.c **** int get_key(void)
 160:src/console.c **** {
 2180              		.loc 2 160 1 is_stmt 1 view -0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              		@ link register save eliminated.
 161:src/console.c ****   #ifdef DM42
 162:src/console.c ****   return key_pop();
 2185              		.loc 2 162 3 view .LVU614
 2186              		.loc 2 162 10 is_stmt 0 view .LVU615
 2187 0000 004B     		ldr	r3, .L228
 2188 0002 1847     		bx	r3
 2189              	.LVL158:
 2190              	.L229:
 2191              		.align	2
 2192              	.L228:
 2193 0004 89030008 		.word	134218633
 2194              		.cfi_endproc
 2195              	.LFE22:
 2197              		.section	.text.put_key,"ax",%progbits
 2198              		.align	1
 2199              		.p2align 2,,3
 2200              		.global	put_key
ARM GAS  /tmp/cc7no4fx.s 			page 62


 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu fpv4-sp-d16
 2206              	put_key:
 2207              	.LVL159:
 2208              	.LFB23:
 163:src/console.c ****   #else
 164:src/console.c ****   return 0;
 165:src/console.c ****   #endif
 166:src/console.c **** }
 167:src/console.c **** 
 168:src/console.c **** /*
 169:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 170:src/console.c ****  * 
 171:src/console.c ****  */
 172:src/console.c **** int put_key( int k )
 173:src/console.c **** {
 2209              		.loc 2 173 1 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 48
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
 174:src/console.c ****   #ifdef DM42
 175:src/console.c ****   const char wp34s_to_DM42[] = {
 2214              		.loc 2 175 3 view .LVU617
 173:src/console.c ****   #ifdef DM42
 2215              		.loc 2 173 1 is_stmt 0 view .LVU618
 2216 0000 70B4     		push	{r4, r5, r6}
 2217              		.cfi_def_cfa_offset 12
 2218              		.cfi_offset 4, -12
 2219              		.cfi_offset 5, -8
 2220              		.cfi_offset 6, -4
 2221              		.loc 2 175 14 view .LVU619
 2222 0002 0E4D     		ldr	r5, .L233
 173:src/console.c ****   #ifdef DM42
 2223              		.loc 2 173 1 view .LVU620
 2224 0004 0646     		mov	r6, r0
 2225              		.loc 2 175 14 view .LVU621
 2226 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2227              	.LVL160:
 173:src/console.c ****   #ifdef DM42
 2228              		.loc 2 173 1 view .LVU622
 2229 0008 8DB0     		sub	sp, sp, #52
 2230              		.cfi_def_cfa_offset 64
 2231              		.loc 2 175 14 view .LVU623
 2232 000a 01AC     		add	r4, sp, #4
 2233 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2234 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2235 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2236 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2237 0016 03C4     		stmia	r4!, {r0, r1}
 176:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 177:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 178:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 179:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 180:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
ARM GAS  /tmp/cc7no4fx.s 			page 63


 181:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 182:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 183:src/console.c ****   
 184:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2238              		.loc 2 184 6 view .LVU624
 2239 0018 282E     		cmp	r6, #40
 175:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2240              		.loc 2 175 14 view .LVU625
 2241 001a 2270     		strb	r2, [r4]
 2242              		.loc 2 184 3 is_stmt 1 view .LVU626
 2243              		.loc 2 184 6 is_stmt 0 view .LVU627
 2244 001c 08D8     		bhi	.L231
 185:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2245              		.loc 2 185 5 is_stmt 1 view .LVU628
 2246              		.loc 2 185 36 is_stmt 0 view .LVU629
 2247 001e 0CAB     		add	r3, sp, #48
 2248 0020 3046     		mov	r0, r6
 2249 0022 1844     		add	r0, r0, r3
 2250              		.loc 2 185 12 view .LVU630
 2251 0024 064B     		ldr	r3, .L233+4
 2252 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 186:src/console.c ****   }
 187:src/console.c ****   else {
 188:src/console.c ****     return -1;
 189:src/console.c ****   }
 190:src/console.c ****   #else
 191:src/console.c ****   return k;
 192:src/console.c ****   #endif
 193:src/console.c **** }
 2253              		.loc 2 193 1 view .LVU631
 2254 002a 0DB0     		add	sp, sp, #52
 2255              		.cfi_remember_state
 2256              		.cfi_def_cfa_offset 12
 2257              		@ sp needed
 2258 002c 70BC     		pop	{r4, r5, r6}
 2259              		.cfi_restore 6
 2260              		.cfi_restore 5
 2261              		.cfi_restore 4
 2262              		.cfi_def_cfa_offset 0
 2263              	.LVL161:
 185:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2264              		.loc 2 185 12 view .LVU632
 2265 002e 1847     		bx	r3
 2266              	.LVL162:
 2267              	.L231:
 2268              		.cfi_restore_state
 2269              		.loc 2 193 1 view .LVU633
 2270 0030 4FF0FF30 		mov	r0, #-1
 2271 0034 0DB0     		add	sp, sp, #52
 2272              		.cfi_def_cfa_offset 12
 2273              		@ sp needed
 2274 0036 70BC     		pop	{r4, r5, r6}
 2275              		.cfi_restore 6
 2276              		.cfi_restore 5
 2277              		.cfi_restore 4
 2278              		.cfi_def_cfa_offset 0
 2279              	.LVL163:
ARM GAS  /tmp/cc7no4fx.s 			page 64


 2280              		.loc 2 193 1 view .LVU634
 2281 0038 7047     		bx	lr
 2282              	.L234:
 2283 003a 00BF     		.align	2
 2284              	.L233:
 2285 003c 00000000 		.word	.LANCHOR7
 2286 0040 81030008 		.word	134218625
 2287              		.cfi_endproc
 2288              	.LFE23:
 2290              		.section	.text.shift_down,"ax",%progbits
 2291              		.align	1
 2292              		.p2align 2,,3
 2293              		.global	shift_down
 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2297              		.fpu fpv4-sp-d16
 2299              	shift_down:
 2300              	.LFB24:
 194:src/console.c **** 
 195:src/console.c **** enum shifts shift_down(void)
 196:src/console.c **** {
 2301              		.loc 2 196 1 is_stmt 1 view -0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
 197:src/console.c **** 	return SHIFT_N;
 2306              		.loc 2 197 2 view .LVU636
 198:src/console.c **** }
 2307              		.loc 2 198 1 is_stmt 0 view .LVU637
 2308 0000 0020     		movs	r0, #0
 2309 0002 7047     		bx	lr
 2310              		.cfi_endproc
 2311              	.LFE24:
 2313              		.section	.text.start_key_timer,"ax",%progbits
 2314              		.align	1
 2315              		.p2align 2,,3
 2316              		.global	start_key_timer
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu fpv4-sp-d16
 2322              	start_key_timer:
 2323              	.LFB25:
 199:src/console.c **** 
 200:src/console.c **** #ifndef DM42   // No serial operations for DM42
 201:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 202:src/console.c **** /*
 203:src/console.c ****  *  Open a COM port for transmission
 204:src/console.c ****  */
 205:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 206:src/console.c **** {
 207:src/console.c **** 	return 0;
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
ARM GAS  /tmp/cc7no4fx.s 			page 65


 211:src/console.c **** /*
 212:src/console.c ****  *  Close the COM port after transmission is complete
 213:src/console.c ****  */
 214:src/console.c **** extern void close_port( void )
 215:src/console.c **** {
 216:src/console.c **** }
 217:src/console.c **** 
 218:src/console.c **** 
 219:src/console.c **** /*
 220:src/console.c ****  *  Output a single byte to the serial
 221:src/console.c ****  */
 222:src/console.c **** void put_byte( unsigned char byte )
 223:src/console.c **** {
 224:src/console.c **** 	report_err(ERR_PROG_BAD);
 225:src/console.c **** }
 226:src/console.c **** 
 227:src/console.c **** 
 228:src/console.c **** /*
 229:src/console.c ****  *  Force buffer flush
 230:src/console.c ****  */
 231:src/console.c **** void flush_comm( void )
 232:src/console.c **** {
 233:src/console.c **** }
 234:src/console.c **** 
 235:src/console.c **** #endif
 236:src/console.c **** #endif
 237:src/console.c **** 
 238:src/console.c **** 
 239:src/console.c **** /*
 240:src/console.c ****  *  Main loop
 241:src/console.c ****  */
 242:src/console.c **** #ifdef DM42
 243:src/console.c **** void start_key_timer (void);
 244:src/console.c **** long int keyticks (void);
 245:src/console.c **** void moveto (int line, int x);
 246:src/console.c **** 
 247:src/console.c **** static long int start_ticks;
 248:src/console.c **** 
 249:src/console.c **** void start_key_timer() {
 2324              		.loc 2 249 24 is_stmt 1 view -0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 0
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 250:src/console.c ****     start_ticks = get_rtc_ticks();
 2328              		.loc 2 250 5 view .LVU639
 249:src/console.c ****     start_ticks = get_rtc_ticks();
 2329              		.loc 2 249 24 is_stmt 0 view .LVU640
 2330 0000 08B5     		push	{r3, lr}
 2331              		.cfi_def_cfa_offset 8
 2332              		.cfi_offset 3, -8
 2333              		.cfi_offset 14, -4
 2334              		.loc 2 250 19 view .LVU641
 2335 0002 024B     		ldr	r3, .L238
 2336 0004 9847     		blx	r3
 2337              	.LVL164:
 2338              		.loc 2 250 17 view .LVU642
 2339 0006 024B     		ldr	r3, .L238+4
ARM GAS  /tmp/cc7no4fx.s 			page 66


 2340 0008 1860     		str	r0, [r3]
 251:src/console.c **** }
 2341              		.loc 2 251 1 view .LVU643
 2342 000a 08BD     		pop	{r3, pc}
 2343              	.L239:
 2344              		.align	2
 2345              	.L238:
 2346 000c B9040008 		.word	134218937
 2347 0010 00000000 		.word	.LANCHOR8
 2348              		.cfi_endproc
 2349              	.LFE25:
 2351              		.section	.text.keyticks,"ax",%progbits
 2352              		.align	1
 2353              		.p2align 2,,3
 2354              		.global	keyticks
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu fpv4-sp-d16
 2360              	keyticks:
 2361              	.LFB26:
 252:src/console.c **** 
 253:src/console.c **** long int keyticks () {
 2362              		.loc 2 253 22 is_stmt 1 view -0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 254:src/console.c ****   long int i;
 2366              		.loc 2 254 3 view .LVU645
 255:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2367              		.loc 2 255 3 view .LVU646
 253:src/console.c ****   long int i;
 2368              		.loc 2 253 22 is_stmt 0 view .LVU647
 2369 0000 08B5     		push	{r3, lr}
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 3, -8
 2372              		.cfi_offset 14, -4
 2373              		.loc 2 255 8 view .LVU648
 2374 0002 054B     		ldr	r3, .L242
 2375 0004 9847     		blx	r3
 2376              	.LVL165:
 256:src/console.c ****   return i >> 8;
 2377              		.loc 2 256 3 is_stmt 1 view .LVU649
 255:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2378              		.loc 2 255 24 is_stmt 0 view .LVU650
 2379 0006 054B     		ldr	r3, .L242+4
 2380 0008 1B68     		ldr	r3, [r3]
 2381 000a C01A     		subs	r0, r0, r3
 2382              	.LVL166:
 255:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2383              		.loc 2 255 38 view .LVU651
 2384 000c 00EB8000 		add	r0, r0, r0, lsl #2
 257:src/console.c **** }
 2385              		.loc 2 257 1 view .LVU652
 2386 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2387 0014 08BD     		pop	{r3, pc}
 2388              	.L243:
ARM GAS  /tmp/cc7no4fx.s 			page 67


 2389 0016 00BF     		.align	2
 2390              	.L242:
 2391 0018 B9040008 		.word	134218937
 2392 001c 00000000 		.word	.LANCHOR8
 2393              		.cfi_endproc
 2394              	.LFE26:
 2396              		.section	.text.moveto,"ax",%progbits
 2397              		.align	1
 2398              		.p2align 2,,3
 2399              		.global	moveto
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2403              		.fpu fpv4-sp-d16
 2405              	moveto:
 2406              	.LVL167:
 2407              	.LFB27:
 258:src/console.c **** 
 259:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 260:src/console.c **** char print_string[22];
 261:src/console.c **** int n_p = 0;
 262:src/console.c **** 
 263:src/console.c **** 
 264:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2408              		.loc 2 264 30 is_stmt 1 view -0
 2409              		.cfi_startproc
 2410              		@ args = 0, pretend = 0, frame = 0
 2411              		@ frame_needed = 0, uses_anonymous_args = 0
 265:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2412              		.loc 2 265 3 view .LVU654
 264:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2413              		.loc 2 264 30 is_stmt 0 view .LVU655
 2414 0000 70B5     		push	{r4, r5, r6, lr}
 2415              		.cfi_def_cfa_offset 16
 2416              		.cfi_offset 4, -16
 2417              		.cfi_offset 5, -12
 2418              		.cfi_offset 6, -8
 2419              		.cfi_offset 14, -4
 2420              		.loc 2 265 3 view .LVU656
 2421 0002 0A4D     		ldr	r5, .L246
 2422 0004 0A4B     		ldr	r3, .L246+4
 264:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2423              		.loc 2 264 30 view .LVU657
 2424 0006 0246     		mov	r2, r0
 2425 0008 0C46     		mov	r4, r1
 2426              		.loc 2 265 3 view .LVU658
 2427 000a A86B     		ldr	r0, [r5, #56]
 2428              	.LVL168:
 2429              		.loc 2 265 3 view .LVU659
 2430 000c 511E     		subs	r1, r2, #1
 2431              	.LVL169:
 2432              		.loc 2 265 3 view .LVU660
 2433 000e 9847     		blx	r3
 2434              	.LVL170:
 266:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2435              		.loc 2 266 3 is_stmt 1 view .LVU661
 2436 0010 A86B     		ldr	r0, [r5, #56]
ARM GAS  /tmp/cc7no4fx.s 			page 68


 2437 0012 084B     		ldr	r3, .L246+8
 2438              		.loc 2 266 33 is_stmt 0 view .LVU662
 2439 0014 0168     		ldr	r1, [r0]
 2440              		.loc 2 266 3 view .LVU663
 2441 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2442              		.loc 2 266 33 view .LVU664
 2443 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2444              		.loc 2 266 43 view .LVU665
 2445 001c 013C     		subs	r4, r4, #1
 2446              	.LVL171:
 2447              		.loc 2 266 40 view .LVU666
 2448 001e 04FB01F1 		mul	r1, r4, r1
 2449              		.loc 2 266 3 view .LVU667
 2450 0022 1431     		adds	r1, r1, #20
 267:src/console.c **** }
 2451              		.loc 2 267 1 view .LVU668
 2452 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2453              		.cfi_restore 14
 2454              		.cfi_restore 6
 2455              		.cfi_restore 5
 2456              		.cfi_restore 4
 2457              		.cfi_def_cfa_offset 0
 2458              	.LVL172:
 266:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2459              		.loc 2 266 3 view .LVU669
 2460 0028 1847     		bx	r3	@ indirect register sibling call
 2461              	.LVL173:
 2462              	.L247:
 2463 002a 00BF     		.align	2
 2464              	.L246:
 2465 002c 00200010 		.word	268443648
 2466 0030 69020008 		.word	134218345
 2467 0034 6D020008 		.word	134218349
 2468              		.cfi_endproc
 2469              	.LFE27:
 2471              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2472              		.align	2
 2473              	.LC9:
 2474 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2474      673A2025 
 2474      34692C25 
 2474      346900
 2475              		.section	.text.print_debug,"ax",%progbits
 2476              		.align	1
 2477              		.p2align 2,,3
 2478              		.global	print_debug
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu fpv4-sp-d16
 2484              	print_debug:
 2485              	.LVL174:
 2486              	.LFB28:
 268:src/console.c **** 
 269:src/console.c **** void print_debug (int i, int j) {
 2487              		.loc 2 269 33 is_stmt 1 view -0
 2488              		.cfi_startproc
ARM GAS  /tmp/cc7no4fx.s 			page 69


 2489              		@ args = 0, pretend = 0, frame = 8
 2490              		@ frame_needed = 0, uses_anonymous_args = 0
 270:src/console.c ****   strcpy( print_string, spaces );
 2491              		.loc 2 270 3 view .LVU671
 269:src/console.c ****   strcpy( print_string, spaces );
 2492              		.loc 2 269 33 is_stmt 0 view .LVU672
 2493 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2494              		.cfi_def_cfa_offset 24
 2495              		.cfi_offset 4, -24
 2496              		.cfi_offset 5, -20
 2497              		.cfi_offset 6, -16
 2498              		.cfi_offset 7, -12
 2499              		.cfi_offset 8, -8
 2500              		.cfi_offset 14, -4
 2501              		.loc 2 270 3 view .LVU673
 2502 0004 174C     		ldr	r4, .L250
 2503 0006 184F     		ldr	r7, .L250+4
 271:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 272:src/console.c ****   moveto (3, 1);
 273:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2504              		.loc 2 273 3 view .LVU674
 2505 0008 184E     		ldr	r6, .L250+8
 2506 000a 194D     		ldr	r5, .L250+12
 274:src/console.c ****   lcd_refresh();
 2507              		.loc 2 274 3 view .LVU675
 2508 000c DFF86C80 		ldr	r8, .L250+24
 269:src/console.c ****   strcpy( print_string, spaces );
 2509              		.loc 2 269 33 view .LVU676
 2510 0010 82B0     		sub	sp, sp, #8
 2511              		.cfi_def_cfa_offset 32
 269:src/console.c ****   strcpy( print_string, spaces );
 2512              		.loc 2 269 33 view .LVU677
 2513 0012 0190     		str	r0, [sp, #4]
 2514 0014 0091     		str	r1, [sp]
 270:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2515              		.loc 2 270 3 view .LVU678
 2516 0016 2046     		mov	r0, r4
 2517              	.LVL175:
 270:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2518              		.loc 2 270 3 view .LVU679
 2519 0018 3946     		mov	r1, r7
 2520              	.LVL176:
 270:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2521              		.loc 2 270 3 view .LVU680
 2522 001a FFF7FEFF 		bl	strcpy
 2523              	.LVL177:
 271:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2524              		.loc 2 271 3 is_stmt 1 view .LVU681
 2525 001e DDE90032 		ldrd	r3, r2, [sp]
 2526 0022 1449     		ldr	r1, .L250+16
 2527 0024 2046     		mov	r0, r4
 2528 0026 FFF7FEFF 		bl	sprintf
 2529              	.LVL178:
 272:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2530              		.loc 2 272 3 view .LVU682
 2531 002a 0121     		movs	r1, #1
 2532 002c 0320     		movs	r0, #3
ARM GAS  /tmp/cc7no4fx.s 			page 70


 2533 002e FFF7FEFF 		bl	moveto
 2534              	.LVL179:
 273:src/console.c ****   lcd_refresh();
 2535              		.loc 2 273 3 view .LVU683
 2536 0032 2146     		mov	r1, r4
 2537 0034 B06B     		ldr	r0, [r6, #56]
 2538 0036 A847     		blx	r5
 2539              	.LVL180:
 2540              		.loc 2 274 3 view .LVU684
 2541 0038 C047     		blx	r8
 2542              	.LVL181:
 275:src/console.c ****   sys_delay (1000);
 2543              		.loc 2 275 3 view .LVU685
 2544 003a 0F4B     		ldr	r3, .L250+20
 2545 003c 4FF47A70 		mov	r0, #1000
 2546 0040 9847     		blx	r3
 2547              	.LVL182:
 276:src/console.c ****   /* wait_for_key_press(); */
 277:src/console.c ****   //  key_pop_all();
 278:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 279:src/console.c ****   // key_pop_all();
 280:src/console.c ****   strcpy( print_string, spaces );
 2548              		.loc 2 280 3 view .LVU686
 2549 0042 3946     		mov	r1, r7
 2550 0044 2046     		mov	r0, r4
 2551 0046 FFF7FEFF 		bl	strcpy
 2552              	.LVL183:
 281:src/console.c ****   moveto (3, 1);
 2553              		.loc 2 281 3 view .LVU687
 2554 004a 0121     		movs	r1, #1
 2555 004c 0320     		movs	r0, #3
 2556 004e FFF7FEFF 		bl	moveto
 2557              	.LVL184:
 282:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2558              		.loc 2 282 3 view .LVU688
 2559 0052 B06B     		ldr	r0, [r6, #56]
 2560 0054 2146     		mov	r1, r4
 2561 0056 A847     		blx	r5
 2562              	.LVL185:
 283:src/console.c ****   lcd_refresh();
 2563              		.loc 2 283 3 view .LVU689
 2564 0058 4346     		mov	r3, r8
 284:src/console.c ****   // while (key_empty()<=0);; // wait for release
 285:src/console.c ****   // key_pop_all();
 286:src/console.c **** }
 2565              		.loc 2 286 1 is_stmt 0 view .LVU690
 2566 005a 02B0     		add	sp, sp, #8
 2567              		.cfi_def_cfa_offset 24
 2568              	.LVL186:
 2569              		.loc 2 286 1 view .LVU691
 2570              		@ sp needed
 2571 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2572              		.cfi_restore 14
 2573              		.cfi_restore 8
 2574              		.cfi_restore 7
 2575              		.cfi_restore 6
 2576              		.cfi_restore 5
ARM GAS  /tmp/cc7no4fx.s 			page 71


 2577              		.cfi_restore 4
 2578              		.cfi_def_cfa_offset 0
 2579              	.LVL187:
 283:src/console.c ****   lcd_refresh();
 2580              		.loc 2 283 3 view .LVU692
 2581 0060 1847     		bx	r3	@ indirect register sibling call
 2582              	.LVL188:
 2583              	.L251:
 2584 0062 00BF     		.align	2
 2585              	.L250:
 2586 0064 00000000 		.word	print_string
 2587 0068 00000000 		.word	.LANCHOR9
 2588 006c 00200010 		.word	268443648
 2589 0070 B1020008 		.word	134218417
 2590 0074 00000000 		.word	.LC9
 2591 0078 05040008 		.word	134218757
 2592 007c 31020008 		.word	134218289
 2593              		.cfi_endproc
 2594              	.LFE28:
 2596              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2597              		.align	2
 2598              	.LC10:
 2599 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2599      692C2531 
 2599      337300
 2600              		.section	.text.print_debug2,"ax",%progbits
 2601              		.align	1
 2602              		.p2align 2,,3
 2603              		.global	print_debug2
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2607              		.fpu fpv4-sp-d16
 2609              	print_debug2:
 2610              	.LVL189:
 2611              	.LFB29:
 287:src/console.c **** 
 288:src/console.c **** void print_debug2 (int i, char* j) {
 2612              		.loc 2 288 36 is_stmt 1 view -0
 2613              		.cfi_startproc
 2614              		@ args = 0, pretend = 0, frame = 8
 2615              		@ frame_needed = 0, uses_anonymous_args = 0
 289:src/console.c ****   strcpy( print_string, spaces );
 2616              		.loc 2 289 3 view .LVU694
 288:src/console.c ****   strcpy( print_string, spaces );
 2617              		.loc 2 288 36 is_stmt 0 view .LVU695
 2618 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2619              		.cfi_def_cfa_offset 24
 2620              		.cfi_offset 4, -24
 2621              		.cfi_offset 5, -20
 2622              		.cfi_offset 6, -16
 2623              		.cfi_offset 7, -12
 2624              		.cfi_offset 8, -8
 2625              		.cfi_offset 14, -4
 2626              		.loc 2 289 3 view .LVU696
 2627 0004 174C     		ldr	r4, .L254
 2628 0006 184F     		ldr	r7, .L254+4
ARM GAS  /tmp/cc7no4fx.s 			page 72


 290:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 291:src/console.c ****   moveto (3, 1);
 292:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2629              		.loc 2 292 3 view .LVU697
 2630 0008 184E     		ldr	r6, .L254+8
 2631 000a 194D     		ldr	r5, .L254+12
 293:src/console.c ****   lcd_refresh();
 2632              		.loc 2 293 3 view .LVU698
 2633 000c DFF86C80 		ldr	r8, .L254+24
 288:src/console.c ****   strcpy( print_string, spaces );
 2634              		.loc 2 288 36 view .LVU699
 2635 0010 82B0     		sub	sp, sp, #8
 2636              		.cfi_def_cfa_offset 32
 288:src/console.c ****   strcpy( print_string, spaces );
 2637              		.loc 2 288 36 view .LVU700
 2638 0012 0190     		str	r0, [sp, #4]
 2639 0014 0091     		str	r1, [sp]
 289:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2640              		.loc 2 289 3 view .LVU701
 2641 0016 2046     		mov	r0, r4
 2642              	.LVL190:
 289:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2643              		.loc 2 289 3 view .LVU702
 2644 0018 3946     		mov	r1, r7
 2645              	.LVL191:
 289:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2646              		.loc 2 289 3 view .LVU703
 2647 001a FFF7FEFF 		bl	strcpy
 2648              	.LVL192:
 290:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2649              		.loc 2 290 3 is_stmt 1 view .LVU704
 2650 001e DDE90032 		ldrd	r3, r2, [sp]
 2651 0022 1449     		ldr	r1, .L254+16
 2652 0024 2046     		mov	r0, r4
 2653 0026 FFF7FEFF 		bl	sprintf
 2654              	.LVL193:
 291:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2655              		.loc 2 291 3 view .LVU705
 2656 002a 0121     		movs	r1, #1
 2657 002c 0320     		movs	r0, #3
 2658 002e FFF7FEFF 		bl	moveto
 2659              	.LVL194:
 292:src/console.c ****   lcd_refresh();
 2660              		.loc 2 292 3 view .LVU706
 2661 0032 2146     		mov	r1, r4
 2662 0034 B06B     		ldr	r0, [r6, #56]
 2663 0036 A847     		blx	r5
 2664              	.LVL195:
 2665              		.loc 2 293 3 view .LVU707
 2666 0038 C047     		blx	r8
 2667              	.LVL196:
 294:src/console.c ****   sys_delay (2500);
 2668              		.loc 2 294 3 view .LVU708
 2669 003a 0F4B     		ldr	r3, .L254+20
 2670 003c 40F6C410 		movw	r0, #2500
 2671 0040 9847     		blx	r3
 2672              	.LVL197:
ARM GAS  /tmp/cc7no4fx.s 			page 73


 295:src/console.c ****   /* wait_for_key_press(); */
 296:src/console.c ****   //  key_pop_all();
 297:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 298:src/console.c ****   // key_pop_all();
 299:src/console.c ****   strcpy( print_string, spaces );
 2673              		.loc 2 299 3 view .LVU709
 2674 0042 3946     		mov	r1, r7
 2675 0044 2046     		mov	r0, r4
 2676 0046 FFF7FEFF 		bl	strcpy
 2677              	.LVL198:
 300:src/console.c ****   moveto (3, 1);
 2678              		.loc 2 300 3 view .LVU710
 2679 004a 0121     		movs	r1, #1
 2680 004c 0320     		movs	r0, #3
 2681 004e FFF7FEFF 		bl	moveto
 2682              	.LVL199:
 301:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2683              		.loc 2 301 3 view .LVU711
 2684 0052 B06B     		ldr	r0, [r6, #56]
 2685 0054 2146     		mov	r1, r4
 2686 0056 A847     		blx	r5
 2687              	.LVL200:
 302:src/console.c ****   lcd_refresh();
 2688              		.loc 2 302 3 view .LVU712
 2689 0058 4346     		mov	r3, r8
 303:src/console.c ****   // while (key_empty()<=0);; // wait for release
 304:src/console.c ****   // key_pop_all();
 305:src/console.c **** }
 2690              		.loc 2 305 1 is_stmt 0 view .LVU713
 2691 005a 02B0     		add	sp, sp, #8
 2692              		.cfi_def_cfa_offset 24
 2693              	.LVL201:
 2694              		.loc 2 305 1 view .LVU714
 2695              		@ sp needed
 2696 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2697              		.cfi_restore 14
 2698              		.cfi_restore 8
 2699              		.cfi_restore 7
 2700              		.cfi_restore 6
 2701              		.cfi_restore 5
 2702              		.cfi_restore 4
 2703              		.cfi_def_cfa_offset 0
 2704              	.LVL202:
 302:src/console.c ****   lcd_refresh();
 2705              		.loc 2 302 3 view .LVU715
 2706 0060 1847     		bx	r3	@ indirect register sibling call
 2707              	.LVL203:
 2708              	.L255:
 2709 0062 00BF     		.align	2
 2710              	.L254:
 2711 0064 00000000 		.word	print_string
 2712 0068 00000000 		.word	.LANCHOR9
 2713 006c 00200010 		.word	268443648
 2714 0070 B1020008 		.word	134218417
 2715 0074 00000000 		.word	.LC10
 2716 0078 05040008 		.word	134218757
 2717 007c 31020008 		.word	134218289
ARM GAS  /tmp/cc7no4fx.s 			page 74


 2718              		.cfi_endproc
 2719              	.LFE29:
 2721              		.section	.text.do_now,"ax",%progbits
 2722              		.align	1
 2723              		.p2align 2,,3
 2724              		.global	do_now
 2725              		.syntax unified
 2726              		.thumb
 2727              		.thumb_func
 2728              		.fpu fpv4-sp-d16
 2730              	do_now:
 2731              	.LVL204:
 2732              	.LFB30:
 306:src/console.c **** 
 307:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 2733              		.loc 2 307 34 is_stmt 1 view -0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              		@ link register save eliminated.
 308:src/console.c ****   struct _ndmap temp;
 2738              		.loc 2 308 3 view .LVU717
 309:src/console.c ****   temp.key_34s = key;
 2739              		.loc 2 309 3 view .LVU718
 307:src/console.c ****   struct _ndmap temp;
 2740              		.loc 2 307 34 is_stmt 0 view .LVU719
 2741 0000 82B0     		sub	sp, sp, #8
 2742              		.cfi_def_cfa_offset 8
 310:src/console.c ****   temp.shift = shift;
 311:src/console.c ****   process_keycode_with_shift (temp);
 2743              		.loc 2 311 3 view .LVU720
 2744 0002 02AB     		add	r3, sp, #8
 309:src/console.c ****   temp.shift = shift;
 2745              		.loc 2 309 16 view .LVU721
 2746 0004 8DF80000 		strb	r0, [sp]
 310:src/console.c ****   temp.shift = shift;
 2747              		.loc 2 310 3 is_stmt 1 view .LVU722
 310:src/console.c ****   temp.shift = shift;
 2748              		.loc 2 310 14 is_stmt 0 view .LVU723
 2749 0008 0191     		str	r1, [sp, #4]
 2750              		.loc 2 311 3 is_stmt 1 view .LVU724
 2751 000a 13E90300 		ldmdb	r3, {r0, r1}
 2752              	.LVL205:
 312:src/console.c **** }
 2753              		.loc 2 312 1 is_stmt 0 view .LVU725
 2754 000e 02B0     		add	sp, sp, #8
 2755              		.cfi_def_cfa_offset 0
 2756              		@ sp needed
 311:src/console.c **** }
 2757              		.loc 2 311 3 view .LVU726
 2758 0010 FFF7FEBF 		b	process_keycode_with_shift
 2759              	.LVL206:
 311:src/console.c **** }
 2760              		.loc 2 311 3 view .LVU727
 2761              		.cfi_endproc
 2762              	.LFE30:
 2764              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cc7no4fx.s 			page 75


 2765              		.align	2
 2766              	.LC11:
 2767 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2767      502F7770 
 2767      3334735F 
 2767      68656C70 
 2767      2E68746D 
 2768              		.section	.text.do_multi,"ax",%progbits
 2769              		.align	1
 2770              		.p2align 2,,3
 2771              		.global	do_multi
 2772              		.syntax unified
 2773              		.thumb
 2774              		.thumb_func
 2775              		.fpu fpv4-sp-d16
 2777              	do_multi:
 2778              	.LVL207:
 2779              	.LFB31:
 313:src/console.c **** 
 314:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2780              		.loc 2 314 42 is_stmt 1 view -0
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 16
 2783              		@ frame_needed = 0, uses_anonymous_args = 0
 2784              		.loc 2 314 42 is_stmt 0 view .LVU729
 2785 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2786              		.cfi_def_cfa_offset 24
 2787              		.cfi_offset 4, -24
 2788              		.cfi_offset 5, -20
 2789              		.cfi_offset 6, -16
 2790              		.cfi_offset 7, -12
 2791              		.cfi_offset 8, -8
 2792              		.cfi_offset 14, -4
 2793 0004 84B0     		sub	sp, sp, #16
 2794              		.cfi_def_cfa_offset 40
 2795              	.LVL208:
 315:src/console.c ****   switch(r.shift) {
 2796              		.loc 2 315 3 is_stmt 1 view .LVU730
 314:src/console.c ****   switch(r.shift) {
 2797              		.loc 2 314 42 is_stmt 0 view .LVU731
 2798 0006 6C46     		mov	r4, sp
 2799 0008 531E     		subs	r3, r2, #1
 2800 000a 84E80600 		stm	r4, {r1, r2}
 2801              	.LVL209:
 314:src/console.c ****   switch(r.shift) {
 2802              		.loc 2 314 42 view .LVU732
 2803 000e 0546     		mov	r5, r0
 2804 0010 0E2B     		cmp	r3, #14
 2805 0012 00F28A80 		bhi	.L259
 2806 0016 DFE803F0 		tbb	[pc, r3]
 2807              	.L261:
 2808 001a 21       		.byte	(.L275-.L261)/2
 2809 001b 49       		.byte	(.L274-.L261)/2
 2810 001c 55       		.byte	(.L273-.L261)/2
 2811 001d 59       		.byte	(.L272-.L261)/2
 2812 001e 5D       		.byte	(.L271-.L261)/2
 2813 001f 61       		.byte	(.L270-.L261)/2
ARM GAS  /tmp/cc7no4fx.s 			page 76


 2814 0020 65       		.byte	(.L269-.L261)/2
 2815 0021 69       		.byte	(.L268-.L261)/2
 2816 0022 6C       		.byte	(.L267-.L261)/2
 2817 0023 70       		.byte	(.L266-.L261)/2
 2818 0024 73       		.byte	(.L265-.L261)/2
 2819 0025 76       		.byte	(.L264-.L261)/2
 2820 0026 8F       		.byte	(.L263-.L261)/2
 2821 0027 92       		.byte	(.L262-.L261)/2
 2822 0028 08       		.byte	(.L260-.L261)/2
 2823 0029 00       		.p2align 1
 2824              	.L260:
 316:src/console.c ****   case LASTX: // Last x via RCL L
 317:src/console.c ****     do_now (K11, 0); // RCL
 318:src/console.c ****     do_now (K_RELEASE,0); // release
 319:src/console.c ****     do_now (K15,0); // TAN key
 320:src/console.c ****     r.key_34s = K_RELEASE;
 321:src/console.c ****     r.shift = 0; // set up for release;
 322:src/console.c ****     break;
 323:src/console.c ****   case ONSTO: // flash_backup()
 324:src/console.c ****     flash_backup(OP_SAVE);
 325:src/console.c ****     reset_shift();
 326:src/console.c ****     r = no_key;
 327:src/console.c ****     break;
 328:src/console.c ****   case ONRCL: // flash_restore()
 329:src/console.c ****     flash_restore(OP_LOAD);
 330:src/console.c ****     reset_shift();
 331:src/console.c ****     r = no_key;
 332:src/console.c ****     break;
 333:src/console.c ****   case WRLIB: // save library file
 334:src/console.c ****     save_lib_file(1);
 335:src/console.c ****     reset_shift();
 336:src/console.c ****     r = no_key;
 337:src/console.c ****     break;
 338:src/console.c ****   case LLIB: // load library file
 339:src/console.c ****     load_lib_file(1);
 340:src/console.c ****     reset_shift();
 341:src/console.c ****     r = no_key;
 342:src/console.c ****     break;
 343:src/console.c ****   case WRTST: // save state file
 344:src/console.c ****     save_ram_file(1);
 345:src/console.c ****     reset_shift();
 346:src/console.c ****     r = no_key;
 347:src/console.c ****     break;
 348:src/console.c ****   case LDST:
 349:src/console.c ****     load_ram_file(1);
 350:src/console.c ****     reset_shift();
 351:src/console.c ****     r = no_key;
 352:src/console.c ****     break;
 353:src/console.c ****   case LDPRG:
 354:src/console.c ****     load_prog_file();
 355:src/console.c ****     reset_shift();
 356:src/console.c ****     r = no_key;
 357:src/console.c ****     break;
 358:src/console.c ****   case SVPRG:
 359:src/console.c ****     save_prog_file();
 360:src/console.c ****     reset_shift();
 361:src/console.c ****     r = no_key;
ARM GAS  /tmp/cc7no4fx.s 			page 77


 362:src/console.c ****     break;
 363:src/console.c ****   case HELP:
 364:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 365:src/console.c ****     reset_shift();
 366:src/console.c ****     r = no_key;
 367:src/console.c ****     break;
 368:src/console.c ****   case DOTS:
 369:src/console.c ****     do_all_dots();
 370:src/console.c ****     reset_shift();
 371:src/console.c ****     r = no_key;
 372:src/console.c ****     break;
 373:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 374:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 375:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 376:src/console.c ****     r = no_key;
 377:src/console.c ****     break;
 378:src/console.c ****   case DEFMEN:
 379:src/console.c ****     toggle_default_menu();
 380:src/console.c ****     reset_shift();
 381:src/console.c ****     r = no_key;
 382:src/console.c ****     break;
 383:src/console.c ****   case SETUMEN:
 384:src/console.c ****     build_user_menu();
 385:src/console.c ****     reset_shift();
 386:src/console.c ****     r = no_key;;
 387:src/console.c ****     break;
 388:src/console.c ****   case KCPX:
 389:src/console.c ****     if (C_LOCKED) {
 2825              		.loc 2 389 5 is_stmt 1 view .LVU733
 2826              		.loc 2 389 9 is_stmt 0 view .LVU734
 2827 002a 4F4B     		ldr	r3, .L291
 2828 002c 1B68     		ldr	r3, [r3]
 2829 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 2830              		.loc 2 389 8 view .LVU735
 2831 0032 03F04103 		and	r3, r3, #65
 2832 0036 412B     		cmp	r3, #65
 2833 0038 40F08480 		bne	.L277
 390:src/console.c ****       set_menu(M_C_Lock);
 2834              		.loc 2 390 7 is_stmt 1 view .LVU736
 2835              	.LVL210:
 2836              	.LBB112:
 2837              	.LBI112:
 108:src/menu.c    ****   menu_name m = current_menu;
 2838              		.loc 1 108 6 view .LVU737
 2839              	.LBB113:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2840              		.loc 1 109 3 view .LVU738
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2841              		.loc 1 109 13 is_stmt 0 view .LVU739
 2842 003c 4B4A     		ldr	r2, .L291+4
 2843 003e 92F90030 		ldrsb	r3, [r2]
 2844              	.LVL211:
 110:src/menu.c    ****     current_menu = default_menu;
 2845              		.loc 1 110 3 is_stmt 1 view .LVU740
 110:src/menu.c    ****     current_menu = default_menu;
 2846              		.loc 1 110 6 is_stmt 0 view .LVU741
 2847 0042 112B     		cmp	r3, #17
ARM GAS  /tmp/cc7no4fx.s 			page 78


 2848 0044 00F08A80 		beq	.L290
 113:src/menu.c    ****     current_menu = last_menu;
 2849              		.loc 1 113 8 is_stmt 1 view .LVU742
 117:src/menu.c    ****   }
 2850              		.loc 1 117 5 view .LVU743
 117:src/menu.c    ****   }
 2851              		.loc 1 117 18 is_stmt 0 view .LVU744
 2852 0048 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2853              		.loc 1 119 6 view .LVU745
 2854 004a 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 2855              		.loc 1 117 18 view .LVU746
 2856 004c 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2857              		.loc 1 119 3 is_stmt 1 view .LVU747
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2858              		.loc 1 119 6 is_stmt 0 view .LVU748
 2859 004e 02D0     		beq	.L280
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2860              		.loc 1 119 23 view .LVU749
 2861 0050 102B     		cmp	r3, #16
 2862 0052 40F08680 		bne	.L279
 2863              	.L280:
 2864              	.LVL212:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2865              		.loc 1 119 23 view .LVU750
 2866              	.LBE113:
 2867              	.LBE112:
 391:src/console.c ****       reset_shift();
 2868              		.loc 2 391 7 is_stmt 1 view .LVU751
 2869 0056 FFF7FEFF 		bl	reset_shift
 2870              	.LVL213:
 2871              		.loc 2 391 7 is_stmt 0 view .LVU752
 2872 005a 66E0     		b	.L259
 2873              	.LVL214:
 2874              	.L275:
 317:src/console.c ****     do_now (K_RELEASE,0); // release
 2875              		.loc 2 317 5 is_stmt 1 view .LVU753
 2876              	.LBB115:
 2877              	.LBI115:
 307:src/console.c ****   struct _ndmap temp;
 2878              		.loc 2 307 6 view .LVU754
 2879              	.LBB116:
 308:src/console.c ****   temp.key_34s = key;
 2880              		.loc 2 308 3 view .LVU755
 309:src/console.c ****   temp.shift = shift;
 2881              		.loc 2 309 3 view .LVU756
 309:src/console.c ****   temp.shift = shift;
 2882              		.loc 2 309 16 is_stmt 0 view .LVU757
 2883 005c 0723     		movs	r3, #7
 310:src/console.c ****   process_keycode_with_shift (temp);
 2884              		.loc 2 310 14 view .LVU758
 2885 005e 0026     		movs	r6, #0
 309:src/console.c ****   temp.shift = shift;
 2886              		.loc 2 309 16 view .LVU759
 2887 0060 8DF80830 		strb	r3, [sp, #8]
ARM GAS  /tmp/cc7no4fx.s 			page 79


 310:src/console.c ****   process_keycode_with_shift (temp);
 2888              		.loc 2 310 3 is_stmt 1 view .LVU760
 311:src/console.c **** }
 2889              		.loc 2 311 3 is_stmt 0 view .LVU761
 2890 0064 0DF10808 		add	r8, sp, #8
 310:src/console.c ****   process_keycode_with_shift (temp);
 2891              		.loc 2 310 14 view .LVU762
 2892 0068 0396     		str	r6, [sp, #12]
 311:src/console.c **** }
 2893              		.loc 2 311 3 is_stmt 1 view .LVU763
 2894 006a 98E80300 		ldm	r8, {r0, r1}
 2895              	.LVL215:
 311:src/console.c **** }
 2896              		.loc 2 311 3 is_stmt 0 view .LVU764
 2897              	.LBE116:
 2898              	.LBE115:
 2899              	.LBB118:
 2900              	.LBB119:
 309:src/console.c ****   temp.shift = shift;
 2901              		.loc 2 309 16 view .LVU765
 2902 006e 6327     		movs	r7, #99
 2903              	.LBE119:
 2904              	.LBE118:
 2905              	.LBB121:
 2906              	.LBB117:
 311:src/console.c **** }
 2907              		.loc 2 311 3 view .LVU766
 2908 0070 FFF7FEFF 		bl	process_keycode_with_shift
 2909              	.LVL216:
 311:src/console.c **** }
 2910              		.loc 2 311 3 view .LVU767
 2911              	.LBE117:
 2912              	.LBE121:
 318:src/console.c ****     do_now (K15,0); // TAN key
 2913              		.loc 2 318 5 is_stmt 1 view .LVU768
 2914              	.LBB122:
 2915              	.LBI118:
 307:src/console.c ****   struct _ndmap temp;
 2916              		.loc 2 307 6 view .LVU769
 2917              	.LBB120:
 308:src/console.c ****   temp.key_34s = key;
 2918              		.loc 2 308 3 view .LVU770
 309:src/console.c ****   temp.shift = shift;
 2919              		.loc 2 309 3 view .LVU771
 310:src/console.c ****   process_keycode_with_shift (temp);
 2920              		.loc 2 310 14 is_stmt 0 view .LVU772
 2921 0074 0396     		str	r6, [sp, #12]
 309:src/console.c ****   temp.shift = shift;
 2922              		.loc 2 309 16 view .LVU773
 2923 0076 8DF80870 		strb	r7, [sp, #8]
 310:src/console.c ****   process_keycode_with_shift (temp);
 2924              		.loc 2 310 3 is_stmt 1 view .LVU774
 311:src/console.c **** }
 2925              		.loc 2 311 3 view .LVU775
 2926 007a 98E80300 		ldm	r8, {r0, r1}
 2927 007e FFF7FEFF 		bl	process_keycode_with_shift
 2928              	.LVL217:
ARM GAS  /tmp/cc7no4fx.s 			page 80


 311:src/console.c **** }
 2929              		.loc 2 311 3 is_stmt 0 view .LVU776
 2930              	.LBE120:
 2931              	.LBE122:
 319:src/console.c ****     r.key_34s = K_RELEASE;
 2932              		.loc 2 319 5 is_stmt 1 view .LVU777
 2933              	.LBB123:
 2934              	.LBI123:
 307:src/console.c ****   struct _ndmap temp;
 2935              		.loc 2 307 6 view .LVU778
 2936              	.LBB124:
 308:src/console.c ****   temp.key_34s = key;
 2937              		.loc 2 308 3 view .LVU779
 309:src/console.c ****   temp.shift = shift;
 2938              		.loc 2 309 3 view .LVU780
 309:src/console.c ****   temp.shift = shift;
 2939              		.loc 2 309 16 is_stmt 0 view .LVU781
 2940 0082 0B23     		movs	r3, #11
 2941 0084 8DF80830 		strb	r3, [sp, #8]
 310:src/console.c ****   process_keycode_with_shift (temp);
 2942              		.loc 2 310 3 is_stmt 1 view .LVU782
 311:src/console.c **** }
 2943              		.loc 2 311 3 view .LVU783
 310:src/console.c ****   process_keycode_with_shift (temp);
 2944              		.loc 2 310 14 is_stmt 0 view .LVU784
 2945 0088 0396     		str	r6, [sp, #12]
 311:src/console.c **** }
 2946              		.loc 2 311 3 view .LVU785
 2947 008a 98E80300 		ldm	r8, {r0, r1}
 2948 008e FFF7FEFF 		bl	process_keycode_with_shift
 2949              	.LVL218:
 311:src/console.c **** }
 2950              		.loc 2 311 3 view .LVU786
 2951              	.LBE124:
 2952              	.LBE123:
 320:src/console.c ****     r.shift = 0; // set up for release;
 2953              		.loc 2 320 5 is_stmt 1 view .LVU787
 321:src/console.c ****     break;
 2954              		.loc 2 321 5 view .LVU788
 322:src/console.c ****   case ONSTO: // flash_backup()
 2955              		.loc 2 322 5 view .LVU789
 321:src/console.c ****     break;
 2956              		.loc 2 321 13 is_stmt 0 view .LVU790
 2957 0092 3146     		mov	r1, r6
 320:src/console.c ****     r.shift = 0; // set up for release;
 2958              		.loc 2 320 15 view .LVU791
 2959 0094 3B46     		mov	r3, r7
 2960              	.LVL219:
 2961              	.L276:
 392:src/console.c ****     }
 393:src/console.c ****     else {
 394:src/console.c ****       do_now (K_CMPLX, 0);
 395:src/console.c ****       do_now (K_RELEASE, 0);
 396:src/console.c ****       r = no_key;
 397:src/console.c ****     }
 398:src/console.c ****   default:
 399:src/console.c ****     r = no_key;
ARM GAS  /tmp/cc7no4fx.s 			page 81


 400:src/console.c ****   }
 401:src/console.c ****   return r;
 2962              		.loc 2 401 3 is_stmt 1 view .LVU792
 2963              		.loc 2 401 10 is_stmt 0 view .LVU793
 2964 0096 8DF80030 		strb	r3, [sp]
 2965 009a 0191     		str	r1, [sp, #4]
 2966 009c 94E80300 		ldm	r4, {r0, r1}
 2967              	.LVL220:
 2968              		.loc 2 401 10 view .LVU794
 2969 00a0 85E80300 		stm	r5, {r0, r1}
 402:src/console.c **** }
 2970              		.loc 2 402 1 view .LVU795
 2971 00a4 2846     		mov	r0, r5
 2972 00a6 04B0     		add	sp, sp, #16
 2973              		.cfi_remember_state
 2974              		.cfi_def_cfa_offset 24
 2975              		@ sp needed
 2976 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2977              	.LVL221:
 2978              	.L274:
 2979              		.cfi_restore_state
 324:src/console.c ****     reset_shift();
 2980              		.loc 2 324 5 is_stmt 1 view .LVU796
 2981 00ac AD20     		movs	r0, #173
 2982              	.LVL222:
 324:src/console.c ****     reset_shift();
 2983              		.loc 2 324 5 is_stmt 0 view .LVU797
 2984 00ae FFF7FEFF 		bl	flash_backup
 2985              	.LVL223:
 325:src/console.c ****     r = no_key;
 2986              		.loc 2 325 5 is_stmt 1 view .LVU798
 2987              	.L288:
 330:src/console.c ****     r = no_key;
 2988              		.loc 2 330 5 view .LVU799
 2989 00b2 FFF7FEFF 		bl	reset_shift
 2990              	.LVL224:
 331:src/console.c ****     break;
 2991              		.loc 2 331 5 view .LVU800
 331:src/console.c ****     break;
 2992              		.loc 2 331 7 is_stmt 0 view .LVU801
 2993 00b6 2E4B     		ldr	r3, .L291+8
 2994 00b8 93E80300 		ldm	r3, {r0, r1}
 2995 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2996              	.LVL225:
 332:src/console.c ****   case WRLIB: // save library file
 2997              		.loc 2 332 5 is_stmt 1 view .LVU802
 331:src/console.c ****     break;
 2998              		.loc 2 331 7 is_stmt 0 view .LVU803
 2999 00be 84E80300 		stm	r4, {r0, r1}
 332:src/console.c ****   case WRLIB: // save library file
 3000              		.loc 2 332 5 view .LVU804
 3001 00c2 E8E7     		b	.L276
 3002              	.LVL226:
 3003              	.L273:
 329:src/console.c ****     reset_shift();
 3004              		.loc 2 329 5 is_stmt 1 view .LVU805
 3005 00c4 AE20     		movs	r0, #174
ARM GAS  /tmp/cc7no4fx.s 			page 82


 3006              	.LVL227:
 329:src/console.c ****     reset_shift();
 3007              		.loc 2 329 5 is_stmt 0 view .LVU806
 3008 00c6 FFF7FEFF 		bl	flash_restore
 3009              	.LVL228:
 3010 00ca F2E7     		b	.L288
 3011              	.LVL229:
 3012              	.L272:
 334:src/console.c ****     reset_shift();
 3013              		.loc 2 334 5 is_stmt 1 view .LVU807
 3014 00cc 0120     		movs	r0, #1
 3015              	.LVL230:
 334:src/console.c ****     reset_shift();
 3016              		.loc 2 334 5 is_stmt 0 view .LVU808
 3017 00ce FFF7FEFF 		bl	save_lib_file
 3018              	.LVL231:
 335:src/console.c ****     r = no_key;
 3019              		.loc 2 335 5 is_stmt 1 view .LVU809
 3020 00d2 EEE7     		b	.L288
 3021              	.LVL232:
 3022              	.L271:
 339:src/console.c ****     reset_shift();
 3023              		.loc 2 339 5 view .LVU810
 3024 00d4 0120     		movs	r0, #1
 3025              	.LVL233:
 339:src/console.c ****     reset_shift();
 3026              		.loc 2 339 5 is_stmt 0 view .LVU811
 3027 00d6 FFF7FEFF 		bl	load_lib_file
 3028              	.LVL234:
 340:src/console.c ****     r = no_key;
 3029              		.loc 2 340 5 is_stmt 1 view .LVU812
 3030 00da EAE7     		b	.L288
 3031              	.LVL235:
 3032              	.L270:
 344:src/console.c ****     reset_shift();
 3033              		.loc 2 344 5 view .LVU813
 3034 00dc 0120     		movs	r0, #1
 3035              	.LVL236:
 344:src/console.c ****     reset_shift();
 3036              		.loc 2 344 5 is_stmt 0 view .LVU814
 3037 00de FFF7FEFF 		bl	save_ram_file
 3038              	.LVL237:
 345:src/console.c ****     r = no_key;
 3039              		.loc 2 345 5 is_stmt 1 view .LVU815
 3040 00e2 E6E7     		b	.L288
 3041              	.LVL238:
 3042              	.L269:
 349:src/console.c ****     reset_shift();
 3043              		.loc 2 349 5 view .LVU816
 3044 00e4 0120     		movs	r0, #1
 3045              	.LVL239:
 349:src/console.c ****     reset_shift();
 3046              		.loc 2 349 5 is_stmt 0 view .LVU817
 3047 00e6 FFF7FEFF 		bl	load_ram_file
 3048              	.LVL240:
 350:src/console.c ****     r = no_key;
 3049              		.loc 2 350 5 is_stmt 1 view .LVU818
ARM GAS  /tmp/cc7no4fx.s 			page 83


 3050 00ea E2E7     		b	.L288
 3051              	.LVL241:
 3052              	.L268:
 354:src/console.c ****     reset_shift();
 3053              		.loc 2 354 5 view .LVU819
 3054 00ec FFF7FEFF 		bl	load_prog_file
 3055              	.LVL242:
 355:src/console.c ****     r = no_key;
 3056              		.loc 2 355 5 view .LVU820
 3057 00f0 DFE7     		b	.L288
 3058              	.LVL243:
 3059              	.L267:
 364:src/console.c ****     reset_shift();
 3060              		.loc 2 364 5 view .LVU821
 3061 00f2 204B     		ldr	r3, .L291+12
 3062 00f4 2048     		ldr	r0, .L291+16
 3063              	.LVL244:
 364:src/console.c ****     reset_shift();
 3064              		.loc 2 364 5 is_stmt 0 view .LVU822
 3065 00f6 9847     		blx	r3
 3066              	.LVL245:
 365:src/console.c ****     r = no_key;
 3067              		.loc 2 365 5 is_stmt 1 view .LVU823
 3068 00f8 DBE7     		b	.L288
 3069              	.LVL246:
 3070              	.L266:
 359:src/console.c ****     reset_shift();
 3071              		.loc 2 359 5 view .LVU824
 3072 00fa FFF7FEFF 		bl	save_prog_file
 3073              	.LVL247:
 360:src/console.c ****     r = no_key;
 3074              		.loc 2 360 5 view .LVU825
 3075 00fe D8E7     		b	.L288
 3076              	.LVL248:
 3077              	.L265:
 369:src/console.c ****     reset_shift();
 3078              		.loc 2 369 5 view .LVU826
 3079 0100 FFF7FEFF 		bl	do_all_dots
 3080              	.LVL249:
 370:src/console.c ****     r = no_key;
 3081              		.loc 2 370 5 view .LVU827
 3082 0104 D5E7     		b	.L288
 3083              	.LVL250:
 3084              	.L264:
 374:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3085              		.loc 2 374 5 view .LVU828
 3086              	.LBB125:
 3087              	.LBI125:
 307:src/console.c ****   struct _ndmap temp;
 3088              		.loc 2 307 6 view .LVU829
 3089              	.LBB126:
 308:src/console.c ****   temp.key_34s = key;
 3090              		.loc 2 308 3 view .LVU830
 309:src/console.c ****   temp.shift = shift;
 3091              		.loc 2 309 3 view .LVU831
 309:src/console.c ****   temp.shift = shift;
 3092              		.loc 2 309 16 is_stmt 0 view .LVU832
ARM GAS  /tmp/cc7no4fx.s 			page 84


 3093 0106 6323     		movs	r3, #99
 310:src/console.c ****   process_keycode_with_shift (temp);
 3094              		.loc 2 310 14 view .LVU833
 3095 0108 0027     		movs	r7, #0
 309:src/console.c ****   temp.shift = shift;
 3096              		.loc 2 309 16 view .LVU834
 3097 010a 8DF80830 		strb	r3, [sp, #8]
 310:src/console.c ****   process_keycode_with_shift (temp);
 3098              		.loc 2 310 3 is_stmt 1 view .LVU835
 310:src/console.c ****   process_keycode_with_shift (temp);
 3099              		.loc 2 310 14 is_stmt 0 view .LVU836
 3100 010e 0397     		str	r7, [sp, #12]
 311:src/console.c **** }
 3101              		.loc 2 311 3 is_stmt 1 view .LVU837
 3102 0110 02AE     		add	r6, sp, #8
 3103 0112 96E80300 		ldm	r6, {r0, r1}
 3104              	.LVL251:
 311:src/console.c **** }
 3105              		.loc 2 311 3 is_stmt 0 view .LVU838
 3106 0116 FFF7FEFF 		bl	process_keycode_with_shift
 3107              	.LVL252:
 311:src/console.c **** }
 3108              		.loc 2 311 3 view .LVU839
 3109              	.LBE126:
 3110              	.LBE125:
 375:src/console.c ****     r = no_key;
 3111              		.loc 2 375 5 is_stmt 1 view .LVU840
 3112              	.LBB127:
 3113              	.LBI127:
 307:src/console.c ****   struct _ndmap temp;
 3114              		.loc 2 307 6 view .LVU841
 3115              	.LBB128:
 308:src/console.c ****   temp.key_34s = key;
 3116              		.loc 2 308 3 view .LVU842
 309:src/console.c ****   temp.shift = shift;
 3117              		.loc 2 309 3 view .LVU843
 309:src/console.c ****   temp.shift = shift;
 3118              		.loc 2 309 16 is_stmt 0 view .LVU844
 3119 011a 3323     		movs	r3, #51
 3120              	.LVL253:
 3121              	.L289:
 309:src/console.c ****   temp.shift = shift;
 3122              		.loc 2 309 16 view .LVU845
 3123              	.LBE128:
 3124              	.LBE127:
 3125              	.LBB129:
 3126              	.LBB130:
 310:src/console.c ****   process_keycode_with_shift (temp);
 3127              		.loc 2 310 14 view .LVU846
 3128 011c 0397     		str	r7, [sp, #12]
 309:src/console.c ****   temp.shift = shift;
 3129              		.loc 2 309 16 view .LVU847
 3130 011e 8DF80830 		strb	r3, [sp, #8]
 310:src/console.c ****   process_keycode_with_shift (temp);
 3131              		.loc 2 310 3 is_stmt 1 view .LVU848
 311:src/console.c **** }
 3132              		.loc 2 311 3 view .LVU849
ARM GAS  /tmp/cc7no4fx.s 			page 85


 3133 0122 96E80300 		ldm	r6, {r0, r1}
 3134 0126 FFF7FEFF 		bl	process_keycode_with_shift
 3135              	.LVL254:
 3136              	.LBE130:
 3137              	.LBE129:
 396:src/console.c ****     }
 3138              		.loc 2 396 7 view .LVU850
 3139              	.L259:
 399:src/console.c ****   }
 3140              		.loc 2 399 5 view .LVU851
 399:src/console.c ****   }
 3141              		.loc 2 399 7 is_stmt 0 view .LVU852
 3142 012a 114B     		ldr	r3, .L291+8
 3143 012c 93E80300 		ldm	r3, {r0, r1}
 3144 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3145              	.LVL255:
 399:src/console.c ****   }
 3146              		.loc 2 399 7 view .LVU853
 3147 0132 84E80300 		stm	r4, {r0, r1}
 3148 0136 AEE7     		b	.L276
 3149              	.LVL256:
 3150              	.L263:
 379:src/console.c ****     reset_shift();
 3151              		.loc 2 379 5 is_stmt 1 view .LVU854
 3152 0138 FFF7FEFF 		bl	toggle_default_menu
 3153              	.LVL257:
 380:src/console.c ****     r = no_key;
 3154              		.loc 2 380 5 view .LVU855
 3155 013c B9E7     		b	.L288
 3156              	.LVL258:
 3157              	.L262:
 384:src/console.c ****     reset_shift();
 3158              		.loc 2 384 5 view .LVU856
 3159 013e FFF7FEFF 		bl	build_user_menu
 3160              	.LVL259:
 385:src/console.c ****     r = no_key;;
 3161              		.loc 2 385 5 view .LVU857
 3162 0142 B6E7     		b	.L288
 3163              	.LVL260:
 3164              	.L277:
 394:src/console.c ****       do_now (K_RELEASE, 0);
 3165              		.loc 2 394 7 view .LVU858
 3166              	.LBB132:
 3167              	.LBI132:
 307:src/console.c ****   struct _ndmap temp;
 3168              		.loc 2 307 6 view .LVU859
 3169              	.LBB133:
 308:src/console.c ****   temp.key_34s = key;
 3170              		.loc 2 308 3 view .LVU860
 309:src/console.c ****   temp.shift = shift;
 3171              		.loc 2 309 3 view .LVU861
 309:src/console.c ****   temp.shift = shift;
 3172              		.loc 2 309 16 is_stmt 0 view .LVU862
 3173 0144 2D23     		movs	r3, #45
 310:src/console.c ****   process_keycode_with_shift (temp);
 3174              		.loc 2 310 14 view .LVU863
 3175 0146 0027     		movs	r7, #0
ARM GAS  /tmp/cc7no4fx.s 			page 86


 309:src/console.c ****   temp.shift = shift;
 3176              		.loc 2 309 16 view .LVU864
 3177 0148 8DF80830 		strb	r3, [sp, #8]
 310:src/console.c ****   process_keycode_with_shift (temp);
 3178              		.loc 2 310 3 is_stmt 1 view .LVU865
 310:src/console.c ****   process_keycode_with_shift (temp);
 3179              		.loc 2 310 14 is_stmt 0 view .LVU866
 3180 014c 0397     		str	r7, [sp, #12]
 311:src/console.c **** }
 3181              		.loc 2 311 3 is_stmt 1 view .LVU867
 3182 014e 02AE     		add	r6, sp, #8
 3183 0150 96E80300 		ldm	r6, {r0, r1}
 3184              	.LVL261:
 311:src/console.c **** }
 3185              		.loc 2 311 3 is_stmt 0 view .LVU868
 3186 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3187              	.LVL262:
 311:src/console.c **** }
 3188              		.loc 2 311 3 view .LVU869
 3189              	.LBE133:
 3190              	.LBE132:
 395:src/console.c ****       r = no_key;
 3191              		.loc 2 395 7 is_stmt 1 view .LVU870
 3192              	.LBB134:
 3193              	.LBI129:
 307:src/console.c ****   struct _ndmap temp;
 3194              		.loc 2 307 6 view .LVU871
 3195              	.LBB131:
 308:src/console.c ****   temp.key_34s = key;
 3196              		.loc 2 308 3 view .LVU872
 309:src/console.c ****   temp.shift = shift;
 3197              		.loc 2 309 3 view .LVU873
 309:src/console.c ****   temp.shift = shift;
 3198              		.loc 2 309 16 is_stmt 0 view .LVU874
 3199 0158 6323     		movs	r3, #99
 3200 015a DFE7     		b	.L289
 3201              	.LVL263:
 3202              	.L290:
 309:src/console.c ****   temp.shift = shift;
 3203              		.loc 2 309 16 view .LVU875
 3204              	.LBE131:
 3205              	.LBE134:
 3206              	.LBB135:
 3207              	.LBB114:
 111:src/menu.c    ****   }
 3208              		.loc 1 111 5 is_stmt 1 view .LVU876
 111:src/menu.c    ****   }
 3209              		.loc 1 111 18 is_stmt 0 view .LVU877
 3210 015c 0749     		ldr	r1, .L291+20
 3211 015e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3212 0160 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3213              		.loc 1 119 3 is_stmt 1 view .LVU878
 3214              	.L279:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3215              		.loc 1 119 43 view .LVU879
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/cc7no4fx.s 			page 87


 3216              		.loc 1 119 53 is_stmt 0 view .LVU880
 3217 0162 074A     		ldr	r2, .L291+24
 3218 0164 1370     		strb	r3, [r2]
 3219 0166 76E7     		b	.L280
 3220              	.L292:
 3221              		.align	2
 3222              	.L291:
 3223 0168 00000000 		.word	main_ram
 3224 016c 00000000 		.word	.LANCHOR1
 3225 0170 00000000 		.word	.LANCHOR10
 3226 0174 49040008 		.word	134218825
 3227 0178 00000000 		.word	.LC11
 3228 017c 00000000 		.word	.LANCHOR2
 3229 0180 00000000 		.word	.LANCHOR3
 3230              	.LBE114:
 3231              	.LBE135:
 3232              		.cfi_endproc
 3233              	.LFE31:
 3235              		.section	.text.program_main,"ax",%progbits
 3236              		.align	1
 3237              		.p2align 2,,3
 3238              		.global	program_main
 3239              		.syntax unified
 3240              		.thumb
 3241              		.thumb_func
 3242              		.fpu fpv4-sp-d16
 3244              	program_main:
 3245              	.LFB32:
 403:src/console.c **** 
 404:src/console.c **** void program_main(){
 3246              		.loc 2 404 20 is_stmt 1 view -0
 3247              		.cfi_startproc
 3248              		@ args = 0, pretend = 0, frame = 224
 3249              		@ frame_needed = 0, uses_anonymous_args = 0
 405:src/console.c ****   int c;
 3250              		.loc 2 405 3 view .LVU882
 406:src/console.c ****   struct _ndmap remapped;
 3251              		.loc 2 406 3 view .LVU883
 407:src/console.c **** 
 408:src/console.c ****   init_mem();
 3252              		.loc 2 408 3 view .LVU884
 404:src/console.c ****   int c;
 3253              		.loc 2 404 20 is_stmt 0 view .LVU885
 3254 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3255              		.cfi_def_cfa_offset 28
 3256              		.cfi_offset 4, -28
 3257              		.cfi_offset 5, -24
 3258              		.cfi_offset 6, -20
 3259              		.cfi_offset 7, -16
 3260              		.cfi_offset 8, -12
 3261              		.cfi_offset 9, -8
 3262              		.cfi_offset 14, -4
 3263 0004 B9B0     		sub	sp, sp, #228
 3264              		.cfi_def_cfa_offset 256
 3265              		.loc 2 408 3 view .LVU886
 3266 0006 FFF7FEFF 		bl	init_mem
 3267              	.LVL264:
ARM GAS  /tmp/cc7no4fx.s 			page 88


 409:src/console.c ****   init_RegionTab();
 3268              		.loc 2 409 3 is_stmt 1 view .LVU887
 3269 000a FFF7FEFF 		bl	init_RegionTab
 3270              	.LVL265:
 410:src/console.c ****   init_34s();
 3271              		.loc 2 410 3 view .LVU888
 3272 000e FFF7FEFF 		bl	init_34s
 3273              	.LVL266:
 411:src/console.c ****   State2.flags = 1;  
 3274              		.loc 2 411 3 view .LVU889
 3275              		.loc 2 411 16 is_stmt 0 view .LVU890
 3276 0012 AE4A     		ldr	r2, .L389
 3277 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3278 0016 43F00103 		orr	r3, r3, #1
 3279 001a 1376     		strb	r3, [r2, #24]
 412:src/console.c ****   check_create_wp34sdir();
 3280              		.loc 2 412 3 is_stmt 1 view .LVU891
 3281 001c FFF7FEFF 		bl	check_create_wp34sdir
 3282              	.LVL267:
 413:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3283              		.loc 2 413 3 view .LVU892
 3284              		.loc 2 413 8 is_stmt 0 view .LVU893
 3285 0020 0020     		movs	r0, #0
 3286 0022 FFF7FEFF 		bl	load_ram_file
 3287              	.LVL268:
 3288              		.loc 2 413 6 view .LVU894
 3289 0026 08B9     		cbnz	r0, .L294
 3290              		.loc 2 413 26 is_stmt 1 discriminator 1 view .LVU895
 3291              		.loc 2 413 34 is_stmt 0 discriminator 1 view .LVU896
 3292 0028 A94B     		ldr	r3, .L389+4
 3293 002a 1860     		str	r0, [r3]
 3294              	.L294:
 414:src/console.c ****   load_backup_file(0);
 3295              		.loc 2 414 3 is_stmt 1 view .LVU897
 415:src/console.c ****   load_lib_file(0);
 416:src/console.c ****   t20->newln = 0;
 3296              		.loc 2 416 3 is_stmt 0 view .LVU898
 3297 002c A94C     		ldr	r4, .L389+8
 417:src/console.c ****   t20->lnfill = 0;
 418:src/console.c ****   t20->fixed = 1;
 419:src/console.c ****   t20->xspc = -2;
 420:src/console.c ****   t20->bgfill = 0;
 421:src/console.c ****   run_menu_item_app = run_menu_item;
 422:src/console.c ****   menu_line_str_app = menu_line_str;
 423:src/console.c **** 
 424:src/console.c ****   display();
 425:src/console.c ****   display_current_menu();
 426:src/console.c ****   lcd_refresh();
 427:src/console.c ****   JustDisplayed = 0;
 428:src/console.c ****   /*
 429:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 430:src/console.c ****     Sleeps peacefully while waiting for a key.
 431:src/console.c ****     Handles (in principle!) turning off and on.
 432:src/console.c ****     =================
 433:src/console.c ****     Main event loop
 434:src/console.c ****     =================
 435:src/console.c **** 
ARM GAS  /tmp/cc7no4fx.s 			page 89


 436:src/console.c ****     Status flags:
 437:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 438:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 439:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 440:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 441:src/console.c ****   */
 442:src/console.c ****   for(;;) {
 443:src/console.c **** 
 444:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 445:src/console.c ****       {
 446:src/console.c **** 	CLR_ST(STAT_RUNNING);
 447:src/console.c **** 	sys_sleep();
 448:src/console.c ****       }
 449:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3298              		.loc 2 449 35 view .LVU899
 3299 002e AA4E     		ldr	r6, .L389+12
 450:src/console.c ****     {
 451:src/console.c ****       CLR_ST(STAT_RUNNING);
 452:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3300              		.loc 2 452 7 view .LVU900
 3301 0030 AA4F     		ldr	r7, .L389+16
 414:src/console.c ****   load_lib_file(0);
 3302              		.loc 2 414 3 view .LVU901
 3303 0032 0020     		movs	r0, #0
 3304 0034 FFF7FEFF 		bl	load_backup_file
 3305              	.LVL269:
 415:src/console.c ****   t20->newln = 0;
 3306              		.loc 2 415 3 is_stmt 1 view .LVU902
 3307 0038 0020     		movs	r0, #0
 3308 003a FFF7FEFF 		bl	load_lib_file
 3309              	.LVL270:
 416:src/console.c ****   t20->lnfill = 0;
 3310              		.loc 2 416 3 view .LVU903
 3311 003e 236B     		ldr	r3, [r4, #48]
 417:src/console.c ****   t20->fixed = 1;
 3312              		.loc 2 417 3 view .LVU904
 418:src/console.c ****   t20->xspc = -2;
 3313              		.loc 2 418 3 view .LVU905
 421:src/console.c ****   menu_line_str_app = menu_line_str;
 3314              		.loc 2 421 21 is_stmt 0 view .LVU906
 3315 0040 A749     		ldr	r1, .L389+20
 422:src/console.c **** 
 3316              		.loc 2 422 21 view .LVU907
 3317 0042 A84A     		ldr	r2, .L389+24
 418:src/console.c ****   t20->xspc = -2;
 3318              		.loc 2 418 14 view .LVU908
 3319 0044 0120     		movs	r0, #1
 3320 0046 1874     		strb	r0, [r3, #16]
 419:src/console.c ****   t20->bgfill = 0;
 3321              		.loc 2 419 3 is_stmt 1 view .LVU909
 420:src/console.c ****   run_menu_item_app = run_menu_item;
 3322              		.loc 2 420 15 is_stmt 0 view .LVU910
 3323 0048 0025     		movs	r5, #0
 419:src/console.c ****   t20->bgfill = 0;
 3324              		.loc 2 419 13 view .LVU911
 3325 004a FE20     		movs	r0, #254
 3326 004c 9873     		strb	r0, [r3, #14]
ARM GAS  /tmp/cc7no4fx.s 			page 90


 420:src/console.c ****   run_menu_item_app = run_menu_item;
 3327              		.loc 2 420 3 is_stmt 1 view .LVU912
 420:src/console.c ****   run_menu_item_app = run_menu_item;
 3328              		.loc 2 420 15 is_stmt 0 view .LVU913
 3329 004e 5D82     		strh	r5, [r3, #18]	@ movhi
 416:src/console.c ****   t20->lnfill = 0;
 3330              		.loc 2 416 14 view .LVU914
 3331 0050 1D75     		strb	r5, [r3, #20]
 421:src/console.c ****   menu_line_str_app = menu_line_str;
 3332              		.loc 2 421 3 is_stmt 1 view .LVU915
 422:src/console.c **** 
 3333              		.loc 2 422 21 is_stmt 0 view .LVU916
 3334 0052 C4E90312 		strd	r1, r2, [r4, #12]
 424:src/console.c ****   display_current_menu();
 3335              		.loc 2 424 3 is_stmt 1 view .LVU917
 3336 0056 FFF7FEFF 		bl	display
 3337              	.LVL271:
 425:src/console.c ****   lcd_refresh();
 3338              		.loc 2 425 3 view .LVU918
 3339 005a FFF7FEFF 		bl	display_current_menu
 3340              	.LVL272:
 426:src/console.c ****   JustDisplayed = 0;
 3341              		.loc 2 426 3 view .LVU919
 3342 005e A24B     		ldr	r3, .L389+28
 3343 0060 9847     		blx	r3
 3344              	.LVL273:
 427:src/console.c ****   /*
 3345              		.loc 2 427 3 view .LVU920
 427:src/console.c ****   /*
 3346              		.loc 2 427 17 is_stmt 0 view .LVU921
 3347 0062 A24B     		ldr	r3, .L389+32
 3348 0064 1D60     		str	r5, [r3]
 3349              	.L295:
 442:src/console.c **** 
 3350              		.loc 2 442 3 is_stmt 1 view .LVU922
 444:src/console.c ****       {
 3351              		.loc 2 444 5 view .LVU923
 444:src/console.c ****       {
 3352              		.loc 2 444 10 is_stmt 0 view .LVU924
 3353 0066 2368     		ldr	r3, [r4]
 444:src/console.c ****       {
 3354              		.loc 2 444 8 view .LVU925
 3355 0068 9805     		lsls	r0, r3, #22
 3356 006a 40F1B880 		bpl	.L296
 444:src/console.c ****       {
 3357              		.loc 2 444 30 discriminator 1 view .LVU926
 3358 006e 2368     		ldr	r3, [r4]
 444:src/console.c ****       {
 3359              		.loc 2 444 27 discriminator 1 view .LVU927
 3360 0070 5907     		lsls	r1, r3, #29
 3361 0072 40F1B480 		bpl	.L296
 446:src/console.c **** 	sys_sleep();
 3362              		.loc 2 446 2 is_stmt 1 view .LVU928
 3363 0076 2368     		ldr	r3, [r4]
 447:src/console.c ****       }
 3364              		.loc 2 447 2 is_stmt 0 view .LVU929
 3365 0078 9D4A     		ldr	r2, .L389+36
ARM GAS  /tmp/cc7no4fx.s 			page 91


 446:src/console.c **** 	sys_sleep();
 3366              		.loc 2 446 2 view .LVU930
 3367 007a 23F00203 		bic	r3, r3, #2
 3368 007e 2360     		str	r3, [r4]
 447:src/console.c ****       }
 3369              		.loc 2 447 2 is_stmt 1 view .LVU931
 3370 0080 9047     		blx	r2
 3371              	.LVL274:
 3372              	.L297:
 453:src/console.c ****       sys_sleep();
 454:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 455:src/console.c **** 	key_push (K_HEARTBEAT);
 456:src/console.c **** 	if (Pause > 0) Pause--;
 457:src/console.c ****       }
 458:src/console.c ****       sys_timer_disable(0); // stop timer
 459:src/console.c ****     }
 460:src/console.c ****     
 461:src/console.c ****     // Wakeup in off state or going to sleep
 462:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3373              		.loc 2 462 5 view .LVU932
 3374              		.loc 2 462 9 is_stmt 0 view .LVU933
 3375 0082 2368     		ldr	r3, [r4]
 3376              		.loc 2 462 8 view .LVU934
 3377 0084 9A05     		lsls	r2, r3, #22
 3378 0086 00F1D180 		bmi	.L303
 3379              	.L384:
 3380              		.loc 2 462 29 discriminator 1 view .LVU935
 3381 008a 2368     		ldr	r3, [r4]
 3382              		.loc 2 462 26 discriminator 1 view .LVU936
 3383 008c 5B07     		lsls	r3, r3, #29
 3384 008e 00F1CD80 		bmi	.L303
 463:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 464:src/console.c ****         // Going to off mode
 465:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 466:src/console.c ****         draw_power_off_image(1);
 467:src/console.c **** 
 468:src/console.c ****         LCD_power_off(0);
 469:src/console.c ****         SET_ST(STAT_SUSPENDED);
 470:src/console.c ****         SET_ST(STAT_OFF);
 471:src/console.c ****       }
 472:src/console.c ****       // Already in OFF -> just continue to sleep above
 473:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 474:src/console.c ****       // thus reaching the sleep()
 475:src/console.c ****     }
 476:src/console.c **** 
 477:src/console.c ****     // Well, we are woken-up
 478:src/console.c ****     SET_ST(STAT_RUNNING);
 3385              		.loc 2 478 5 is_stmt 1 view .LVU937
 3386 0092 2368     		ldr	r3, [r4]
 3387 0094 43F00203 		orr	r3, r3, #2
 3388 0098 2360     		str	r3, [r4]
 479:src/console.c **** 
 480:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 481:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3389              		.loc 2 481 5 view .LVU938
 3390 009a 2368     		ldr	r3, [r4]
 3391 009c 23F00403 		bic	r3, r3, #4
ARM GAS  /tmp/cc7no4fx.s 			page 92


 3392 00a0 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Get up from OFF state
 484:src/console.c ****     if ( ST(STAT_OFF) ) {
 3393              		.loc 2 484 5 view .LVU939
 3394              		.loc 2 484 10 is_stmt 0 view .LVU940
 3395 00a2 2368     		ldr	r3, [r4]
 3396              		.loc 2 484 8 view .LVU941
 3397 00a4 DD06     		lsls	r5, r3, #27
 3398 00a6 0ED5     		bpl	.L308
 485:src/console.c ****       LCD_power_on();
 3399              		.loc 2 485 7 is_stmt 1 view .LVU942
 3400 00a8 924B     		ldr	r3, .L389+40
 3401 00aa 9847     		blx	r3
 3402              	.LVL275:
 486:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3403              		.loc 2 486 7 view .LVU943
 3404 00ac 924B     		ldr	r3, .L389+44
 3405 00ae 9847     		blx	r3
 3406              	.LVL276:
 487:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3407              		.loc 2 487 7 view .LVU944
 3408 00b0 924B     		ldr	r3, .L389+48
 3409 00b2 9847     		blx	r3
 3410              	.LVL277:
 488:src/console.c **** 
 489:src/console.c ****       CLR_ST(STAT_OFF);
 3411              		.loc 2 489 7 view .LVU945
 3412 00b4 2368     		ldr	r3, [r4]
 490:src/console.c **** 
 491:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3413              		.loc 2 491 13 is_stmt 0 view .LVU946
 3414 00b6 924A     		ldr	r2, .L389+52
 489:src/console.c **** 
 3415              		.loc 2 489 7 view .LVU947
 3416 00b8 23F01003 		bic	r3, r3, #16
 3417 00bc 2360     		str	r3, [r4]
 3418              		.loc 2 491 7 is_stmt 1 view .LVU948
 3419              		.loc 2 491 13 is_stmt 0 view .LVU949
 3420 00be 9047     		blx	r2
 3421              	.LVL278:
 3422              		.loc 2 491 10 view .LVU950
 3423 00c0 08B9     		cbnz	r0, .L308
 492:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3424              		.loc 2 492 9 is_stmt 1 view .LVU951
 3425 00c2 904B     		ldr	r3, .L389+56
 3426 00c4 9847     		blx	r3
 3427              	.LVL279:
 3428              	.L308:
 493:src/console.c ****     }
 494:src/console.c **** 
 495:src/console.c ****     // Key is ready -> clear auto off timer
 496:src/console.c ****     //    if ( !key_empty() )
 497:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 498:src/console.c ****     // Fetch the key
 499:src/console.c ****     //  < 0 -> No key event
 500:src/console.c ****     //  > 0 -> Key pressed
ARM GAS  /tmp/cc7no4fx.s 			page 93


 501:src/console.c ****     // == 0 -> Key released
 502:src/console.c ****     c = key_pop();
 3429              		.loc 2 502 5 view .LVU952
 3430              		.loc 2 502 9 is_stmt 0 view .LVU953
 3431 00c6 904B     		ldr	r3, .L389+60
 3432 00c8 9847     		blx	r3
 3433              	.LVL280:
 503:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3434              		.loc 2 503 8 view .LVU954
 3435 00ca 6228     		cmp	r0, #98
 502:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3436              		.loc 2 502 9 view .LVU955
 3437 00cc 0546     		mov	r5, r0
 3438              	.LVL281:
 3439              		.loc 2 503 5 is_stmt 1 view .LVU956
 3440              		.loc 2 503 8 is_stmt 0 view .LVU957
 3441 00ce 00F0C780 		beq	.L310
 3442              		.loc 2 503 29 discriminator 1 view .LVU958
 3443 00d2 0028     		cmp	r0, #0
 3444 00d4 40F3C180 		ble	.L311
 504:src/console.c ****       reset_auto_off();
 3445              		.loc 2 504 7 is_stmt 1 view .LVU959
 3446 00d8 8C4B     		ldr	r3, .L389+64
 3447 00da 9847     		blx	r3
 3448              	.LVL282:
 505:src/console.c ****       start_key_timer();
 3449              		.loc 2 505 7 view .LVU960
 3450              	.LBB143:
 3451              	.LBI143:
 249:src/console.c ****     start_ticks = get_rtc_ticks();
 3452              		.loc 2 249 6 view .LVU961
 3453              	.LBB144:
 250:src/console.c **** }
 3454              		.loc 2 250 5 view .LVU962
 250:src/console.c **** }
 3455              		.loc 2 250 19 is_stmt 0 view .LVU963
 3456 00dc 8C4B     		ldr	r3, .L389+68
 3457 00de 9847     		blx	r3
 3458              	.LVL283:
 250:src/console.c **** }
 3459              		.loc 2 250 17 view .LVU964
 3460 00e0 8C4B     		ldr	r3, .L389+72
 3461              	.LBE144:
 3462              	.LBE143:
 3463              	.LBB146:
 3464              	.LBB147:
  61:src/console.c **** 
 3465              		.loc 2 61 6 view .LVU965
 3466 00e2 632D     		cmp	r5, #99
 3467              	.LBE147:
 3468              	.LBE146:
 3469              	.LBB157:
 3470              	.LBB145:
 250:src/console.c **** }
 3471              		.loc 2 250 17 view .LVU966
 3472 00e4 1860     		str	r0, [r3]
 3473              	.LBE145:
ARM GAS  /tmp/cc7no4fx.s 			page 94


 3474              	.LBE157:
 506:src/console.c ****     }
 507:src/console.c ****     if (c >= 0) {
 3475              		.loc 2 507 5 is_stmt 1 view .LVU967
 508:src/console.c ****       remapped = remap(c);
 3476              		.loc 2 508 7 view .LVU968
 3477              	.LVL284:
 3478              	.LBB158:
 3479              	.LBI146:
  53:src/console.c **** 
 3480              		.loc 2 53 22 view .LVU969
 3481              	.LBB149:
  55:src/console.c **** 
 3482              		.loc 2 55 3 view .LVU970
 3483              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3484              		.loc 3 1 1 view .LVU971
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
ARM GAS  /tmp/cc7no4fx.s 			page 95


  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3485              		.loc 3 59 3 view .LVU972
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
ARM GAS  /tmp/cc7no4fx.s 			page 96


  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 114:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3486              		.loc 3 117 3 view .LVU973
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
ARM GAS  /tmp/cc7no4fx.s 			page 97


 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3487              		.loc 3 175 1 view .LVU974
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
ARM GAS  /tmp/cc7no4fx.s 			page 98


 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3488              		.loc 3 233 1 view .LVU975
  59:src/console.c **** 
 3489              		.loc 2 59 3 view .LVU976
  61:src/console.c **** 
 3490              		.loc 2 61 3 view .LVU977
  61:src/console.c **** 
 3491              		.loc 2 61 6 is_stmt 0 view .LVU978
 3492 00e6 00F06181 		beq	.L372
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3493              		.loc 2 63 3 is_stmt 1 view .LVU979
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3494              		.loc 2 63 6 is_stmt 0 view .LVU980
 3495 00ea 2C2D     		cmp	r5, #44
 3496 00ec 00F03081 		beq	.L314
 3497              	.LVL285:
 3498              	.L348:
  68:src/console.c ****     return mapping_running[c];
 3499              		.loc 2 68 3 is_stmt 1 view .LVU981
  68:src/console.c ****     return mapping_running[c];
 3500              		.loc 2 68 15 is_stmt 0 view .LVU982
 3501 00f0 894A     		ldr	r2, .L389+76
 3502 00f2 8A4B     		ldr	r3, .L389+80
 3503 00f4 92F80080 		ldrb	r8, [r2]	@ zero_extendqisi2
 3504 00f8 1968     		ldr	r1, [r3]
  68:src/console.c ****     return mapping_running[c];
 3505              		.loc 2 68 6 view .LVU983
 3506 00fa 58EA0108 		orrs	r8, r8, r1
 3507 00fe 40F04881 		bne	.L373
  72:src/console.c ****   
 3508              		.loc 2 72 3 is_stmt 1 view .LVU984
  72:src/console.c ****   
 3509              		.loc 2 72 22 is_stmt 0 view .LVU985
 3510 0102 04A8     		add	r0, sp, #16
ARM GAS  /tmp/cc7no4fx.s 			page 99


 3511 0104 FFF7FEFF 		bl	get_current_menu_ref
 3512              	.LVL286:
  74:src/console.c ****   case KEY_F1:
 3513              		.loc 2 74 3 is_stmt 1 view .LVU986
 3514 0108 A5F12603 		sub	r3, r5, #38
 3515 010c 052B     		cmp	r3, #5
 3516 010e 00F25781 		bhi	.L316
 3517 0112 DFE813F0 		tbh	[pc, r3, lsl #1]
 3518              	.L318:
 3519 0116 5D01     		.2byte	(.L323-.L318)/2
 3520 0118 0B00     		.2byte	(.L322-.L318)/2
 3521 011a 1500     		.2byte	(.L321-.L318)/2
 3522 011c 1F00     		.2byte	(.L320-.L318)/2
 3523 011e 2900     		.2byte	(.L319-.L318)/2
 3524 0120 3300     		.2byte	(.L317-.L318)/2
 3525              		.p2align 1
 3526              	.L324:
  77:src/console.c ****   case KEY_F2:
 3527              		.loc 2 77 5 view .LVU987
  77:src/console.c ****   case KEY_F2:
 3528              		.loc 2 77 9 is_stmt 0 view .LVU988
 3529 0122 FFF7FEFF 		bl	cur_shift
 3530              	.LVL287:
  77:src/console.c ****   case KEY_F2:
 3531              		.loc 2 77 8 view .LVU989
 3532 0126 0128     		cmp	r0, #1
 3533 0128 00F0E881 		beq	.L374
 3534              	.L322:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3535              		.loc 2 79 5 is_stmt 1 view .LVU990
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3536              		.loc 2 79 9 is_stmt 0 view .LVU991
 3537 012c FFF7FEFF 		bl	cur_shift
 3538              	.LVL288:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3539              		.loc 2 79 8 view .LVU992
 3540 0130 0028     		cmp	r0, #0
 3541 0132 00F07A81 		beq	.L375
  80:src/console.c ****   case KEY_F3:
 3542              		.loc 2 80 5 is_stmt 1 view .LVU993
  80:src/console.c ****   case KEY_F3:
 3543              		.loc 2 80 9 is_stmt 0 view .LVU994
 3544 0136 FFF7FEFF 		bl	cur_shift
 3545              	.LVL289:
  80:src/console.c ****   case KEY_F3:
 3546              		.loc 2 80 8 view .LVU995
 3547 013a 0128     		cmp	r0, #1
 3548 013c 00F0BF81 		beq	.L376
 3549              	.L321:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3550              		.loc 2 82 5 is_stmt 1 view .LVU996
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3551              		.loc 2 82 9 is_stmt 0 view .LVU997
 3552 0140 FFF7FEFF 		bl	cur_shift
 3553              	.LVL290:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3554              		.loc 2 82 8 view .LVU998
ARM GAS  /tmp/cc7no4fx.s 			page 100


 3555 0144 0028     		cmp	r0, #0
 3556 0146 00F06681 		beq	.L377
  83:src/console.c ****   case KEY_F4:
 3557              		.loc 2 83 5 is_stmt 1 view .LVU999
  83:src/console.c ****   case KEY_F4:
 3558              		.loc 2 83 9 is_stmt 0 view .LVU1000
 3559 014a FFF7FEFF 		bl	cur_shift
 3560              	.LVL291:
  83:src/console.c ****   case KEY_F4:
 3561              		.loc 2 83 8 view .LVU1001
 3562 014e 0128     		cmp	r0, #1
 3563 0150 00F0AB81 		beq	.L378
 3564              	.L320:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3565              		.loc 2 85 5 is_stmt 1 view .LVU1002
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3566              		.loc 2 85 9 is_stmt 0 view .LVU1003
 3567 0154 FFF7FEFF 		bl	cur_shift
 3568              	.LVL292:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3569              		.loc 2 85 8 view .LVU1004
 3570 0158 0028     		cmp	r0, #0
 3571 015a 00F05281 		beq	.L379
  86:src/console.c ****   case KEY_F5:
 3572              		.loc 2 86 5 is_stmt 1 view .LVU1005
  86:src/console.c ****   case KEY_F5:
 3573              		.loc 2 86 9 is_stmt 0 view .LVU1006
 3574 015e FFF7FEFF 		bl	cur_shift
 3575              	.LVL293:
  86:src/console.c ****   case KEY_F5:
 3576              		.loc 2 86 8 view .LVU1007
 3577 0162 0128     		cmp	r0, #1
 3578 0164 00F08D81 		beq	.L380
 3579              	.L319:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3580              		.loc 2 88 5 is_stmt 1 view .LVU1008
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3581              		.loc 2 88 9 is_stmt 0 view .LVU1009
 3582 0168 FFF7FEFF 		bl	cur_shift
 3583              	.LVL294:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3584              		.loc 2 88 8 view .LVU1010
 3585 016c 0028     		cmp	r0, #0
 3586 016e 00F03E81 		beq	.L381
  89:src/console.c ****   case KEY_F6:
 3587              		.loc 2 89 5 is_stmt 1 view .LVU1011
  89:src/console.c ****   case KEY_F6:
 3588              		.loc 2 89 9 is_stmt 0 view .LVU1012
 3589 0172 FFF7FEFF 		bl	cur_shift
 3590              	.LVL295:
  89:src/console.c ****   case KEY_F6:
 3591              		.loc 2 89 8 view .LVU1013
 3592 0176 0128     		cmp	r0, #1
 3593 0178 00F08D81 		beq	.L382
 3594              	.L317:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3595              		.loc 2 91 5 is_stmt 1 view .LVU1014
ARM GAS  /tmp/cc7no4fx.s 			page 101


  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3596              		.loc 2 91 9 is_stmt 0 view .LVU1015
 3597 017c FFF7FEFF 		bl	cur_shift
 3598              	.LVL296:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3599              		.loc 2 91 8 view .LVU1016
 3600 0180 0028     		cmp	r0, #0
 3601 0182 40F01981 		bne	.L329
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3602              		.loc 2 91 33 is_stmt 1 view .LVU1017
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3603              		.loc 2 91 51 is_stmt 0 view .LVU1018
 3604 0186 DDE93001 		ldrd	r0, r1, [sp, #192]
 3605 018a 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3606              	.LVL297:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3607              		.loc 2 91 51 view .LVU1019
 3608 018e 0DF10809 		add	r9, sp, #8
 3609              	.LBE149:
 3610              	.LBE158:
 509:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3611              		.loc 2 509 10 view .LVU1020
 3612 0192 2F2D     		cmp	r5, #47
 3613              	.LBB159:
 3614              	.LBB150:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3615              		.loc 2 91 51 view .LVU1021
 3616 0194 89E80300 		stm	r9, {r0, r1}
 3617 0198 8846     		mov	r8, r1
 3618              	.LVL298:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3619              		.loc 2 91 51 view .LVU1022
 3620              	.LBE150:
 3621              	.LBE159:
 3622              		.loc 2 509 7 is_stmt 1 view .LVU1023
 3623              		.loc 2 509 10 is_stmt 0 view .LVU1024
 3624 019a 6CD1     		bne	.L340
 3625              	.LVL299:
 3626              	.L385:
 510:src/console.c **** 	set_menu ( remapped.shift );
 3627              		.loc 2 510 2 is_stmt 1 view .LVU1025
 3628              	.LBB160:
 3629              	.LBB161:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3630              		.loc 1 109 13 is_stmt 0 view .LVU1026
 3631 019c 604A     		ldr	r2, .L389+84
 3632 019e 92F90030 		ldrsb	r3, [r2]
 3633              	.LBE161:
 3634              	.LBE160:
 3635              		.loc 2 510 2 view .LVU1027
 3636 01a2 4FFA88F1 		sxtb	r1, r8
 3637              	.LVL300:
 3638              	.LBB164:
 3639              	.LBI160:
 108:src/menu.c    ****   menu_name m = current_menu;
 3640              		.loc 1 108 6 is_stmt 1 view .LVU1028
 3641              	.LBB162:
ARM GAS  /tmp/cc7no4fx.s 			page 102


 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3642              		.loc 1 109 3 view .LVU1029
 110:src/menu.c    ****     current_menu = default_menu;
 3643              		.loc 1 110 3 view .LVU1030
 110:src/menu.c    ****     current_menu = default_menu;
 3644              		.loc 1 110 6 is_stmt 0 view .LVU1031
 3645 01a6 9942     		cmp	r1, r3
 3646 01a8 00F00281 		beq	.L383
 113:src/menu.c    ****     current_menu = last_menu;
 3647              		.loc 1 113 8 is_stmt 1 view .LVU1032
 113:src/menu.c    ****     current_menu = last_menu;
 3648              		.loc 1 113 11 is_stmt 0 view .LVU1033
 3649 01ac 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3650              		.loc 1 114 5 is_stmt 1 view .LVU1034
 114:src/menu.c    ****   }
 3651              		.loc 1 114 18 is_stmt 0 view .LVU1035
 3652 01ae 04BF     		itt	eq
 3653 01b0 5C49     		ldreq	r1, .L389+88
 3654              	.LVL301:
 114:src/menu.c    ****   }
 3655              		.loc 1 114 18 view .LVU1036
 3656 01b2 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3657              		.loc 1 117 5 is_stmt 1 view .LVU1037
 117:src/menu.c    ****   }
 3658              		.loc 1 117 18 is_stmt 0 view .LVU1038
 3659 01b4 1170     		strb	r1, [r2]
 3660              	.LVL302:
 3661              	.L342:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3662              		.loc 1 119 3 is_stmt 1 view .LVU1039
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3663              		.loc 1 119 6 is_stmt 0 view .LVU1040
 3664 01b6 092B     		cmp	r3, #9
 3665 01b8 03D0     		beq	.L344
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3666              		.loc 1 119 23 view .LVU1041
 3667 01ba 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3668              		.loc 1 119 43 is_stmt 1 view .LVU1042
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3669              		.loc 1 119 53 is_stmt 0 view .LVU1043
 3670 01bc 1CBF     		itt	ne
 3671 01be 594A     		ldrne	r2, .L389+88
 3672 01c0 1370     		strbne	r3, [r2]
 3673              	.L344:
 3674              	.LVL303:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3675              		.loc 1 119 53 view .LVU1044
 3676              	.LBE162:
 3677              	.LBE164:
 511:src/console.c **** 	display_current_menu ();
 3678              		.loc 2 511 2 is_stmt 1 view .LVU1045
 3679 01c2 FFF7FEFF 		bl	display_current_menu
 3680              	.LVL304:
 512:src/console.c **** 	reset_shift();
ARM GAS  /tmp/cc7no4fx.s 			page 103


 3681              		.loc 2 512 2 view .LVU1046
 3682 01c6 FFF7FEFF 		bl	reset_shift
 3683              	.LVL305:
 513:src/console.c **** 	remapped = no_key;
 3684              		.loc 2 513 2 view .LVU1047
 3685              		.loc 2 513 11 is_stmt 0 view .LVU1048
 3686 01ca 574B     		ldr	r3, .L389+92
 3687 01cc 93E80300 		ldm	r3, {r0, r1}
 3688 01d0 0DF10809 		add	r9, sp, #8
 3689 01d4 89E80300 		stm	r9, {r0, r1}
 3690 01d8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3691              	.LVL306:
 3692              		.loc 2 513 11 view .LVU1049
 3693 01da 8846     		mov	r8, r1
 3694              	.LVL307:
 3695              		.loc 2 513 11 view .LVU1050
 3696 01dc 4BE0     		b	.L340
 3697              	.LVL308:
 3698              	.L296:
 449:src/console.c ****     {
 3699              		.loc 2 449 10 is_stmt 1 view .LVU1051
 449:src/console.c ****     {
 3700              		.loc 2 449 15 is_stmt 0 view .LVU1052
 3701 01de 2568     		ldr	r5, [r4]
 449:src/console.c ****     {
 3702              		.loc 2 449 13 view .LVU1053
 3703 01e0 15F40075 		ands	r5, r5, #512
 3704 01e4 7FF44DAF 		bne	.L297
 449:src/console.c ****     {
 3705              		.loc 2 449 35 discriminator 1 view .LVU1054
 3706 01e8 B047     		blx	r6
 3707              	.LVL309:
 449:src/console.c ****     {
 3708              		.loc 2 449 32 discriminator 1 view .LVU1055
 3709 01ea 0028     		cmp	r0, #0
 3710 01ec 3FF449AF 		beq	.L297
 451:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3711              		.loc 2 451 7 is_stmt 1 view .LVU1056
 3712 01f0 2368     		ldr	r3, [r4]
 3713 01f2 23F00203 		bic	r3, r3, #2
 452:src/console.c ****       sys_sleep();
 3714              		.loc 2 452 7 is_stmt 0 view .LVU1057
 3715 01f6 2846     		mov	r0, r5
 3716 01f8 6421     		movs	r1, #100
 451:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3717              		.loc 2 451 7 view .LVU1058
 3718 01fa 2360     		str	r3, [r4]
 452:src/console.c ****       sys_sleep();
 3719              		.loc 2 452 7 is_stmt 1 view .LVU1059
 3720 01fc B847     		blx	r7
 3721              	.LVL310:
 453:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3722              		.loc 2 453 7 view .LVU1060
 3723 01fe 3C4B     		ldr	r3, .L389+36
 3724 0200 9847     		blx	r3
 3725              	.LVL311:
 454:src/console.c **** 	key_push (K_HEARTBEAT);
ARM GAS  /tmp/cc7no4fx.s 			page 104


 3726              		.loc 2 454 7 view .LVU1061
 454:src/console.c **** 	key_push (K_HEARTBEAT);
 3727              		.loc 2 454 11 is_stmt 0 view .LVU1062
 3728 0202 4A4B     		ldr	r3, .L389+96
 3729 0204 2846     		mov	r0, r5
 3730 0206 9847     		blx	r3
 3731              	.LVL312:
 454:src/console.c **** 	key_push (K_HEARTBEAT);
 3732              		.loc 2 454 10 view .LVU1063
 3733 0208 48B1     		cbz	r0, .L301
 455:src/console.c **** 	if (Pause > 0) Pause--;
 3734              		.loc 2 455 2 is_stmt 1 view .LVU1064
 3735 020a 494B     		ldr	r3, .L389+100
 3736 020c 6220     		movs	r0, #98
 3737 020e 9847     		blx	r3
 3738              	.LVL313:
 456:src/console.c ****       }
 3739              		.loc 2 456 2 view .LVU1065
 456:src/console.c ****       }
 3740              		.loc 2 456 12 is_stmt 0 view .LVU1066
 3741 0210 414B     		ldr	r3, .L389+76
 3742 0212 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 456:src/console.c ****       }
 3743              		.loc 2 456 5 view .LVU1067
 3744 0214 1AB1     		cbz	r2, .L301
 456:src/console.c ****       }
 3745              		.loc 2 456 17 is_stmt 1 discriminator 1 view .LVU1068
 456:src/console.c ****       }
 3746              		.loc 2 456 22 is_stmt 0 discriminator 1 view .LVU1069
 3747 0216 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3748 0218 013A     		subs	r2, r2, #1
 3749 021a D2B2     		uxtb	r2, r2
 3750 021c 1A70     		strb	r2, [r3]
 3751              	.L301:
 458:src/console.c ****     }
 3752              		.loc 2 458 7 is_stmt 1 view .LVU1070
 3753 021e 454B     		ldr	r3, .L389+104
 3754 0220 0020     		movs	r0, #0
 3755 0222 9847     		blx	r3
 3756              	.LVL314:
 462:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3757              		.loc 2 462 5 view .LVU1071
 462:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3758              		.loc 2 462 9 is_stmt 0 view .LVU1072
 3759 0224 2368     		ldr	r3, [r4]
 462:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3760              		.loc 2 462 8 view .LVU1073
 3761 0226 9A05     		lsls	r2, r3, #22
 3762 0228 7FF52FAF 		bpl	.L384
 3763              	.L303:
 463:src/console.c ****         // Going to off mode
 3764              		.loc 2 463 7 is_stmt 1 view .LVU1074
 463:src/console.c ****         // Going to off mode
 3765              		.loc 2 463 12 is_stmt 0 view .LVU1075
 3766 022c 2568     		ldr	r5, [r4]
 463:src/console.c ****         // Going to off mode
 3767              		.loc 2 463 10 view .LVU1076
ARM GAS  /tmp/cc7no4fx.s 			page 105


 3768 022e 15F00405 		ands	r5, r5, #4
 3769 0232 7FF418AF 		bne	.L295
 465:src/console.c ****         draw_power_off_image(1);
 3770              		.loc 2 465 9 is_stmt 1 view .LVU1077
 3771 0236 404B     		ldr	r3, .L389+108
 3772 0238 2846     		mov	r0, r5
 3773 023a 9847     		blx	r3
 3774              	.LVL315:
 466:src/console.c **** 
 3775              		.loc 2 466 9 view .LVU1078
 3776 023c 3F4B     		ldr	r3, .L389+112
 3777 023e 0120     		movs	r0, #1
 3778 0240 9847     		blx	r3
 3779              	.LVL316:
 468:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3780              		.loc 2 468 9 view .LVU1079
 3781 0242 3F4B     		ldr	r3, .L389+116
 3782 0244 2846     		mov	r0, r5
 3783 0246 9847     		blx	r3
 3784              	.LVL317:
 469:src/console.c ****         SET_ST(STAT_OFF);
 3785              		.loc 2 469 9 view .LVU1080
 3786 0248 2368     		ldr	r3, [r4]
 3787 024a 43F00403 		orr	r3, r3, #4
 3788 024e 2360     		str	r3, [r4]
 470:src/console.c ****       }
 3789              		.loc 2 470 9 view .LVU1081
 3790 0250 2368     		ldr	r3, [r4]
 3791 0252 43F01003 		orr	r3, r3, #16
 3792 0256 2360     		str	r3, [r4]
 3793 0258 05E7     		b	.L295
 3794              	.LVL318:
 3795              	.L311:
 507:src/console.c ****       remapped = remap(c);
 3796              		.loc 2 507 5 view .LVU1082
 507:src/console.c ****       remapped = remap(c);
 3797              		.loc 2 507 8 is_stmt 0 view .LVU1083
 3798 025a 7FF404AF 		bne	.L295
 3799 025e 47E7     		b	.L348
 3800              	.L310:
 507:src/console.c ****       remapped = remap(c);
 3801              		.loc 2 507 5 is_stmt 1 view .LVU1084
 508:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3802              		.loc 2 508 7 view .LVU1085
 3803              	.LVL319:
 3804              	.LBB165:
  53:src/console.c **** 
 3805              		.loc 2 53 22 view .LVU1086
 3806              	.LBB151:
  55:src/console.c **** 
 3807              		.loc 2 55 3 view .LVU1087
   1:src/keytran.c ****     {K00, 0}, // A/sig+
 3808              		.loc 3 1 1 view .LVU1088
  59:src/keytran.c ****     {K_RELEASE, -1},
 3809              		.loc 3 59 3 view .LVU1089
 117:src/keytran.c ****     {K_RELEASE, -1},
 3810              		.loc 3 117 3 view .LVU1090
ARM GAS  /tmp/cc7no4fx.s 			page 106


 175:src/keytran.c ****     {K_RELEASE, -1},
 3811              		.loc 3 175 1 view .LVU1091
 3812              		.loc 3 233 1 view .LVU1092
  59:src/console.c **** 
 3813              		.loc 2 59 3 view .LVU1093
  59:src/console.c **** 
 3814              		.loc 2 59 23 view .LVU1094
  59:src/console.c **** 
 3815              		.loc 2 59 30 is_stmt 0 view .LVU1095
 3816 0260 384B     		ldr	r3, .L389+120
 3817              	.LVL320:
 3818              	.L370:
  59:src/console.c **** 
 3819              		.loc 2 59 30 view .LVU1096
 3820 0262 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3821              	.LVL321:
  59:src/console.c **** 
 3822              		.loc 2 59 30 view .LVU1097
 3823 0264 93E80300 		ldm	r3, {r0, r1}
 3824 0268 0DF10809 		add	r9, sp, #8
 3825 026c 89E80300 		stm	r9, {r0, r1}
 3826 0270 8846     		mov	r8, r1
 3827              	.LVL322:
 3828              	.L313:
  59:src/console.c **** 
 3829              		.loc 2 59 30 view .LVU1098
 3830              	.LBE151:
 3831              	.LBE165:
 509:src/console.c **** 	set_menu ( remapped.shift );
 3832              		.loc 2 509 7 is_stmt 1 view .LVU1099
 509:src/console.c **** 	set_menu ( remapped.shift );
 3833              		.loc 2 509 10 is_stmt 0 view .LVU1100
 3834 0272 2F2D     		cmp	r5, #47
 3835 0274 92D0     		beq	.L385
 3836              	.L340:
 514:src/console.c ****       }
 515:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3837              		.loc 2 515 7 is_stmt 1 view .LVU1101
 3838              		.loc 2 515 10 is_stmt 0 view .LVU1102
 3839 0276 302D     		cmp	r5, #48
 3840 0278 19D1     		bne	.L345
 516:src/console.c **** 	SET_ST(STAT_MENU);
 3841              		.loc 2 516 2 is_stmt 1 view .LVU1103
 3842 027a 2368     		ldr	r3, [r4]
 517:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3843              		.loc 2 517 2 is_stmt 0 view .LVU1104
 3844 027c 324D     		ldr	r5, .L389+124
 3845              	.LVL323:
 3846              		.loc 2 517 2 view .LVU1105
 3847 027e 3348     		ldr	r0, .L389+128
 3848 0280 0022     		movs	r2, #0
 516:src/console.c **** 	SET_ST(STAT_MENU);
 3849              		.loc 2 516 2 view .LVU1106
 3850 0282 43F04003 		orr	r3, r3, #64
 3851              		.loc 2 517 2 view .LVU1107
 3852 0286 1146     		mov	r1, r2
 516:src/console.c **** 	SET_ST(STAT_MENU);
ARM GAS  /tmp/cc7no4fx.s 			page 107


 3853              		.loc 2 516 2 view .LVU1108
 3854 0288 2360     		str	r3, [r4]
 3855              		.loc 2 517 2 is_stmt 1 view .LVU1109
 3856 028a A847     		blx	r5
 3857              	.LVL324:
 518:src/console.c **** 	CLR_ST(STAT_MENU);
 3858              		.loc 2 518 2 view .LVU1110
 3859 028c 2368     		ldr	r3, [r4]
 3860 028e 23F04003 		bic	r3, r3, #64
 3861 0292 2360     		str	r3, [r4]
 519:src/console.c **** 	reset_shift();
 3862              		.loc 2 519 2 view .LVU1111
 3863 0294 FFF7FEFF 		bl	reset_shift
 3864              	.LVL325:
 520:src/console.c **** 	remapped =  no_key;
 3865              		.loc 2 520 2 view .LVU1112
 3866              		.loc 2 520 11 is_stmt 0 view .LVU1113
 3867 0298 234B     		ldr	r3, .L389+92
 3868 029a 93E80300 		ldm	r3, {r0, r1}
 3869 029e 0DF10809 		add	r9, sp, #8
 3870 02a2 89E80300 		stm	r9, {r0, r1}
 3871 02a6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3872              	.LVL326:
 3873              		.loc 2 520 11 view .LVU1114
 3874 02a8 8846     		mov	r8, r1
 3875              	.LVL327:
 521:src/console.c **** 	display_current_menu();
 3876              		.loc 2 521 2 is_stmt 1 view .LVU1115
 3877 02aa FFF7FEFF 		bl	display_current_menu
 3878              	.LVL328:
 3879              	.L345:
 522:src/console.c ****       }
 523:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3880              		.loc 2 523 7 view .LVU1116
 3881              		.loc 2 523 10 is_stmt 0 view .LVU1117
 3882 02ae 312D     		cmp	r5, #49
 3883 02b0 50D0     		beq	.L349
 524:src/console.c **** 	remapped = do_multi (remapped);
 525:src/console.c **** 	display_current_menu();
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 3884              		.loc 2 527 7 is_stmt 1 view .LVU1118
 3885              		.loc 2 527 10 is_stmt 0 view .LVU1119
 3886 02b2 322D     		cmp	r5, #50
 3887 02b4 67D0     		beq	.L347
 3888              	.LVL329:
 3889              	.L371:
 3890              		.loc 2 527 10 view .LVU1120
 3891 02b6 0DF10809 		add	r9, sp, #8
 3892              	.L336:
 3893              	.LVL330:
 528:src/console.c ****       process_keycode_with_shift(remapped);
 3894              		.loc 2 528 7 is_stmt 1 view .LVU1121
 3895              		.loc 2 528 7 is_stmt 0 view .LVU1122
 3896 02ba 8DF80850 		strb	r5, [sp, #8]
 3897 02be CDF80C80 		str	r8, [sp, #12]
 3898 02c2 99E80300 		ldm	r9, {r0, r1}
ARM GAS  /tmp/cc7no4fx.s 			page 108


 3899 02c6 FFF7FEFF 		bl	process_keycode_with_shift
 3900              	.LVL331:
 3901 02ca CCE6     		b	.L295
 3902              	.L390:
 3903              		.align	2
 3904              	.L389:
 3905 02cc 00000000 		.word	StateWhileOn
 3906 02d0 00000000 		.word	DispMsg
 3907 02d4 00200010 		.word	268443648
 3908 02d8 7D030008 		.word	134218621
 3909 02dc F9030008 		.word	134218745
 3910 02e0 00000000 		.word	run_menu_item
 3911 02e4 00000000 		.word	menu_line_str
 3912 02e8 31020008 		.word	134218289
 3913 02ec 00000000 		.word	JustDisplayed
 3914 02f0 19040008 		.word	134218777
 3915 02f4 19020008 		.word	134218265
 3916 02f8 91030008 		.word	134218641
 3917 02fc E5020008 		.word	134218469
 3918 0300 59020008 		.word	134218329
 3919 0304 35020008 		.word	134218293
 3920 0308 89030008 		.word	134218633
 3921 030c B9030008 		.word	134218681
 3922 0310 B9040008 		.word	134218937
 3923 0314 00000000 		.word	.LANCHOR8
 3924 0318 00000000 		.word	Pause
 3925 031c 00000000 		.word	Running
 3926 0320 00000000 		.word	.LANCHOR1
 3927 0324 00000000 		.word	.LANCHOR3
 3928 0328 00000000 		.word	.LANCHOR10
 3929 032c 01040008 		.word	134218753
 3930 0330 81030008 		.word	134218625
 3931 0334 F5030008 		.word	134218741
 3932 0338 55020008 		.word	134218325
 3933 033c 2D040008 		.word	134218797
 3934 0340 1D020008 		.word	134218269
 3935 0344 00000000 		.word	.LANCHOR19
 3936 0348 59030008 		.word	134218585
 3937 034c 00000000 		.word	.LANCHOR18
 3938              	.LVL332:
 3939              	.L314:
 509:src/console.c **** 	set_menu ( remapped.shift );
 3940              		.loc 2 509 7 is_stmt 1 view .LVU1123
 515:src/console.c **** 	SET_ST(STAT_MENU);
 3941              		.loc 2 515 7 view .LVU1124
 523:src/console.c **** 	remapped = do_multi (remapped);
 3942              		.loc 2 523 7 view .LVU1125
 3943              	.LBB166:
 3944              	.LBB152:
 3945              	.LBB148:
  65:src/console.c ****   }
 3946              		.loc 2 65 12 is_stmt 0 view .LVU1126
 3947 0350 4FF00C08 		mov	r8, #12
 3948              	.LVL333:
 3949              	.L349:
  65:src/console.c ****   }
 3950              		.loc 2 65 12 view .LVU1127
ARM GAS  /tmp/cc7no4fx.s 			page 109


 3951              	.LBE148:
 3952              	.LBE152:
 3953              	.LBE166:
 524:src/console.c **** 	display_current_menu();
 3954              		.loc 2 524 2 is_stmt 1 view .LVU1128
 524:src/console.c **** 	display_current_menu();
 3955              		.loc 2 524 13 is_stmt 0 view .LVU1129
 3956 0354 3123     		movs	r3, #49
 3957 0356 CDF80C80 		str	r8, [sp, #12]
 3958 035a 8DF80830 		strb	r3, [sp, #8]
 3959 035e 6D46     		mov	r5, sp
 3960 0360 0DF10809 		add	r9, sp, #8
 3961 0364 99E80600 		ldm	r9, {r1, r2}
 3962 0368 2846     		mov	r0, r5
 3963 036a FFF7FEFF 		bl	do_multi
 3964              	.LVL334:
 3965 036e 95E80300 		ldm	r5, {r0, r1}
 3966 0372 89E80300 		stm	r9, {r0, r1}
 3967 0376 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3968              	.LVL335:
 524:src/console.c **** 	display_current_menu();
 3969              		.loc 2 524 13 view .LVU1130
 3970 037a DDF80C80 		ldr	r8, [sp, #12]
 3971              	.LVL336:
 525:src/console.c ****       }
 3972              		.loc 2 525 2 is_stmt 1 view .LVU1131
 3973 037e FFF7FEFF 		bl	display_current_menu
 3974              	.LVL337:
 527:src/console.c ****       process_keycode_with_shift(remapped);
 3975              		.loc 2 527 7 view .LVU1132
 527:src/console.c ****       process_keycode_with_shift(remapped);
 3976              		.loc 2 527 10 is_stmt 0 view .LVU1133
 3977 0382 322D     		cmp	r5, #50
 3978 0384 97D1     		bne	.L371
 3979              	.L347:
 529:src/console.c ****     }
 530:src/console.c ****   }
 531:src/console.c ****   save_ram_file(0);
 3980              		.loc 2 531 3 is_stmt 1 view .LVU1134
 3981 0386 0020     		movs	r0, #0
 532:src/console.c ****   //  free_storage();
 533:src/console.c ****   return;
 534:src/console.c **** }
 3982              		.loc 2 534 1 is_stmt 0 view .LVU1135
 3983 0388 39B0     		add	sp, sp, #228
 3984              		.cfi_remember_state
 3985              		.cfi_def_cfa_offset 28
 3986              		@ sp needed
 3987 038a BDE8F043 		pop	{r4, r5, r6, r7, r8, r9, lr}
 3988              		.cfi_restore 14
 3989              		.cfi_restore 9
 3990              		.cfi_restore 8
 3991              		.cfi_restore 7
 3992              		.cfi_restore 6
 3993              		.cfi_restore 5
 3994              		.cfi_restore 4
 3995              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc7no4fx.s 			page 110


 3996              	.LVL338:
 531:src/console.c ****   //  free_storage();
 3997              		.loc 2 531 3 view .LVU1136
 3998 038e FFF7FEBF 		b	save_ram_file
 3999              	.LVL339:
 4000              	.L373:
 4001              		.cfi_restore_state
 4002              	.LBB167:
 4003              	.LBB153:
  69:src/console.c ****   }
 4004              		.loc 2 69 5 is_stmt 1 view .LVU1137
  69:src/console.c ****   }
 4005              		.loc 2 69 27 is_stmt 0 view .LVU1138
 4006 0392 644B     		ldr	r3, .L391
 4007              	.L369:
 121:src/console.c ****     break;
 4008              		.loc 2 121 26 view .LVU1139
 4009 0394 03EBC502 		add	r2, r3, r5, lsl #3
 4010 0398 92E80300 		ldm	r2, {r0, r1}
 4011 039c 0DF10809 		add	r9, sp, #8
 4012 03a0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4013              	.LVL340:
 121:src/console.c ****     break;
 4014              		.loc 2 121 26 view .LVU1140
 4015 03a4 8846     		mov	r8, r1
 4016              	.LVL341:
 121:src/console.c ****     break;
 4017              		.loc 2 121 26 view .LVU1141
 4018 03a6 89E80300 		stm	r9, {r0, r1}
 4019 03aa 62E7     		b	.L313
 4020              	.LVL342:
 4021              	.L372:
  61:src/console.c **** 
 4022              		.loc 2 61 16 is_stmt 1 view .LVU1142
  61:src/console.c **** 
 4023              		.loc 2 61 23 is_stmt 0 view .LVU1143
 4024 03ac 5E4B     		ldr	r3, .L391+4
 4025 03ae 58E7     		b	.L370
 4026              	.LVL343:
 4027              	.L383:
  61:src/console.c **** 
 4028              		.loc 2 61 23 view .LVU1144
 4029              	.LBE153:
 4030              	.LBE167:
 4031              	.LBB168:
 4032              	.LBB163:
 111:src/menu.c    ****   }
 4033              		.loc 1 111 5 is_stmt 1 view .LVU1145
 111:src/menu.c    ****   }
 4034              		.loc 1 111 18 is_stmt 0 view .LVU1146
 4035 03b0 5E49     		ldr	r1, .L391+8
 4036              	.LVL344:
 111:src/menu.c    ****   }
 4037              		.loc 1 111 18 view .LVU1147
 4038 03b2 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4039 03b4 1170     		strb	r1, [r2]
 4040 03b6 FEE6     		b	.L342
ARM GAS  /tmp/cc7no4fx.s 			page 111


 4041              	.LVL345:
 4042              	.L329:
 111:src/menu.c    ****   }
 4043              		.loc 1 111 18 view .LVU1148
 4044              	.LBE163:
 4045              	.LBE168:
 4046              	.LBB169:
 4047              	.LBB154:
  92:src/console.c ****   }
 4048              		.loc 2 92 5 is_stmt 1 view .LVU1149
  92:src/console.c ****   }
 4049              		.loc 2 92 9 is_stmt 0 view .LVU1150
 4050 03b8 FFF7FEFF 		bl	cur_shift
 4051              	.LVL346:
  92:src/console.c ****   }
 4052              		.loc 2 92 8 view .LVU1151
 4053 03bc 0128     		cmp	r0, #1
 4054 03be 56D0     		beq	.L386
 4055              	.L316:
  95:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4056              		.loc 2 95 3 is_stmt 1 view .LVU1152
  95:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4057              		.loc 2 95 8 is_stmt 0 view .LVU1153
 4058 03c0 FFF7FEFF 		bl	get_alpha_state
 4059              	.LVL347:
  95:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4060              		.loc 2 95 6 view .LVU1154
 4061 03c4 D8B3     		cbz	r0, .L330
  96:src/console.c ****       switch (cur_shift()) { 
 4062              		.loc 2 96 5 is_stmt 1 view .LVU1155
  96:src/console.c ****       switch (cur_shift()) { 
 4063              		.loc 2 96 8 is_stmt 0 view .LVU1156
 4064 03c6 1C2D     		cmp	r5, #28
 4065 03c8 00F08580 		beq	.L387
 113:src/console.c ****   }
 4066              		.loc 2 113 5 is_stmt 1 view .LVU1157
 113:src/console.c ****   }
 4067              		.loc 2 113 26 is_stmt 0 view .LVU1158
 4068 03cc 584B     		ldr	r3, .L391+12
 4069 03ce E1E7     		b	.L369
 4070              	.L323:
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4071              		.loc 2 76 5 is_stmt 1 view .LVU1159
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4072              		.loc 2 76 9 is_stmt 0 view .LVU1160
 4073 03d0 FFF7FEFF 		bl	cur_shift
 4074              	.LVL348:
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4075              		.loc 2 76 8 view .LVU1161
 4076 03d4 0028     		cmp	r0, #0
 4077 03d6 7FF4A4AE 		bne	.L324
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4078              		.loc 2 76 33 is_stmt 1 view .LVU1162
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4079              		.loc 2 76 51 is_stmt 0 view .LVU1163
 4080 03da DDE90801 		ldrd	r0, r1, [sp, #32]
 4081 03de 0DF10809 		add	r9, sp, #8
ARM GAS  /tmp/cc7no4fx.s 			page 112


 4082 03e2 89E80300 		stm	r9, {r0, r1}
 4083 03e6 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4084              	.LVL349:
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4085              		.loc 2 76 51 view .LVU1164
 4086 03ea 8846     		mov	r8, r1
 4087              	.LVL350:
  76:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4088              		.loc 2 76 51 view .LVU1165
 4089 03ec 41E7     		b	.L313
 4090              	.LVL351:
 4091              	.L381:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4092              		.loc 2 88 33 is_stmt 1 view .LVU1166
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4093              		.loc 2 88 51 is_stmt 0 view .LVU1167
 4094 03ee DDE92801 		ldrd	r0, r1, [sp, #160]
 4095 03f2 0DF10809 		add	r9, sp, #8
 4096 03f6 89E80300 		stm	r9, {r0, r1}
 4097 03fa 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4098              	.LVL352:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4099              		.loc 2 88 51 view .LVU1168
 4100 03fe 8846     		mov	r8, r1
 4101              	.LVL353:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4102              		.loc 2 88 51 view .LVU1169
 4103 0400 37E7     		b	.L313
 4104              	.LVL354:
 4105              	.L379:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4106              		.loc 2 85 33 is_stmt 1 view .LVU1170
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4107              		.loc 2 85 51 is_stmt 0 view .LVU1171
 4108 0402 DDE92001 		ldrd	r0, r1, [sp, #128]
 4109 0406 0DF10809 		add	r9, sp, #8
 4110 040a 89E80300 		stm	r9, {r0, r1}
 4111 040e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4112              	.LVL355:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4113              		.loc 2 85 51 view .LVU1172
 4114 0412 8846     		mov	r8, r1
 4115              	.LVL356:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4116              		.loc 2 85 51 view .LVU1173
 4117 0414 2DE7     		b	.L313
 4118              	.LVL357:
 4119              	.L377:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4120              		.loc 2 82 33 is_stmt 1 view .LVU1174
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4121              		.loc 2 82 51 is_stmt 0 view .LVU1175
 4122 0416 DDE91801 		ldrd	r0, r1, [sp, #96]
 4123 041a 0DF10809 		add	r9, sp, #8
 4124 041e 89E80300 		stm	r9, {r0, r1}
 4125 0422 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4126              	.LVL358:
ARM GAS  /tmp/cc7no4fx.s 			page 113


  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4127              		.loc 2 82 51 view .LVU1176
 4128 0426 8846     		mov	r8, r1
 4129              	.LVL359:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4130              		.loc 2 82 51 view .LVU1177
 4131 0428 23E7     		b	.L313
 4132              	.LVL360:
 4133              	.L375:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4134              		.loc 2 79 33 is_stmt 1 view .LVU1178
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4135              		.loc 2 79 51 is_stmt 0 view .LVU1179
 4136 042a DDE91001 		ldrd	r0, r1, [sp, #64]
 4137 042e 0DF10809 		add	r9, sp, #8
 4138 0432 89E80300 		stm	r9, {r0, r1}
 4139 0436 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4140              	.LVL361:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4141              		.loc 2 79 51 view .LVU1180
 4142 043a 8846     		mov	r8, r1
 4143              	.LVL362:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4144              		.loc 2 79 51 view .LVU1181
 4145 043c 19E7     		b	.L313
 4146              	.LVL363:
 4147              	.L330:
 116:src/console.c ****   case SHIFT_N:    
 4148              		.loc 2 116 3 is_stmt 1 view .LVU1182
 116:src/console.c ****   case SHIFT_N:    
 4149              		.loc 2 116 11 is_stmt 0 view .LVU1183
 4150 043e FFF7FEFF 		bl	cur_shift
 4151              	.LVL364:
 116:src/console.c ****   case SHIFT_N:    
 4152              		.loc 2 116 3 view .LVU1184
 4153 0442 0128     		cmp	r0, #1
 4154 0444 45D0     		beq	.L337
 4155 0446 0228     		cmp	r0, #2
 4156 0448 02D0     		beq	.L338
 4157 044a 70B1     		cbz	r0, .L339
  55:src/console.c **** 
 4158              		.loc 2 55 41 view .LVU1185
 4159 044c EDB2     		uxtb	r5, r5
 4160              	.LVL365:
  55:src/console.c **** 
 4161              		.loc 2 55 41 view .LVU1186
 4162 044e 10E7     		b	.L313
 4163              	.LVL366:
 4164              	.L338:
 122:src/console.c ****   case SHIFT_G:
 4165              		.loc 2 122 5 is_stmt 1 view .LVU1187
 124:src/console.c ****     break;
 4166              		.loc 2 124 5 view .LVU1188
 124:src/console.c ****     break;
 4167              		.loc 2 124 26 is_stmt 0 view .LVU1189
 4168 0450 384B     		ldr	r3, .L391+16
 4169 0452 03EBC502 		add	r2, r3, r5, lsl #3
ARM GAS  /tmp/cc7no4fx.s 			page 114


 4170 0456 92E80300 		ldm	r2, {r0, r1}
 4171 045a 0DF10809 		add	r9, sp, #8
 4172 045e 89E80300 		stm	r9, {r0, r1}
 4173 0462 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4174              	.LVL367:
 124:src/console.c ****     break;
 4175              		.loc 2 124 26 view .LVU1190
 4176 0466 8846     		mov	r8, r1
 4177              	.LVL368:
 124:src/console.c ****     break;
 4178              		.loc 2 124 26 view .LVU1191
 4179 0468 03E7     		b	.L313
 4180              	.LVL369:
 4181              	.L339:
 118:src/console.c ****     break;
 4182              		.loc 2 118 5 is_stmt 1 view .LVU1192
 118:src/console.c ****     break;
 4183              		.loc 2 118 24 is_stmt 0 view .LVU1193
 4184 046a 334B     		ldr	r3, .L391+20
 4185 046c 92E7     		b	.L369
 4186              	.L386:
  92:src/console.c ****   }
 4187              		.loc 2 92 33 is_stmt 1 view .LVU1194
  92:src/console.c ****   }
 4188              		.loc 2 92 51 is_stmt 0 view .LVU1195
 4189 046e DDE93201 		ldrd	r0, r1, [sp, #200]
 4190 0472 0DF10809 		add	r9, sp, #8
 4191 0476 89E80300 		stm	r9, {r0, r1}
 4192 047a 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4193              	.LVL370:
  92:src/console.c ****   }
 4194              		.loc 2 92 51 view .LVU1196
 4195 047e 8846     		mov	r8, r1
 4196              	.LVL371:
  92:src/console.c ****   }
 4197              		.loc 2 92 51 view .LVU1197
 4198 0480 F7E6     		b	.L313
 4199              	.LVL372:
 4200              	.L380:
  86:src/console.c ****   case KEY_F5:
 4201              		.loc 2 86 33 is_stmt 1 view .LVU1198
  86:src/console.c ****   case KEY_F5:
 4202              		.loc 2 86 51 is_stmt 0 view .LVU1199
 4203 0482 DDE92201 		ldrd	r0, r1, [sp, #136]
 4204 0486 0DF10809 		add	r9, sp, #8
 4205 048a 89E80300 		stm	r9, {r0, r1}
 4206 048e 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4207              	.LVL373:
  86:src/console.c ****   case KEY_F5:
 4208              		.loc 2 86 51 view .LVU1200
 4209 0492 8846     		mov	r8, r1
 4210              	.LVL374:
  86:src/console.c ****   case KEY_F5:
 4211              		.loc 2 86 51 view .LVU1201
 4212 0494 EDE6     		b	.L313
 4213              	.LVL375:
 4214              	.L382:
ARM GAS  /tmp/cc7no4fx.s 			page 115


  89:src/console.c ****   case KEY_F6:
 4215              		.loc 2 89 33 is_stmt 1 view .LVU1202
  89:src/console.c ****   case KEY_F6:
 4216              		.loc 2 89 51 is_stmt 0 view .LVU1203
 4217 0496 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4218 049a 0DF10809 		add	r9, sp, #8
 4219 049e 89E80300 		stm	r9, {r0, r1}
 4220 04a2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4221              	.LVL376:
  89:src/console.c ****   case KEY_F6:
 4222              		.loc 2 89 51 view .LVU1204
 4223 04a6 8846     		mov	r8, r1
 4224              	.LVL377:
  89:src/console.c ****   case KEY_F6:
 4225              		.loc 2 89 51 view .LVU1205
 4226 04a8 E3E6     		b	.L313
 4227              	.LVL378:
 4228              	.L378:
  83:src/console.c ****   case KEY_F4:
 4229              		.loc 2 83 33 is_stmt 1 view .LVU1206
  83:src/console.c ****   case KEY_F4:
 4230              		.loc 2 83 51 is_stmt 0 view .LVU1207
 4231 04aa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4232 04ae 0DF10809 		add	r9, sp, #8
 4233 04b2 89E80300 		stm	r9, {r0, r1}
 4234 04b6 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4235              	.LVL379:
  83:src/console.c ****   case KEY_F4:
 4236              		.loc 2 83 51 view .LVU1208
 4237 04ba 8846     		mov	r8, r1
 4238              	.LVL380:
  83:src/console.c ****   case KEY_F4:
 4239              		.loc 2 83 51 view .LVU1209
 4240 04bc D9E6     		b	.L313
 4241              	.LVL381:
 4242              	.L376:
  80:src/console.c ****   case KEY_F3:
 4243              		.loc 2 80 33 is_stmt 1 view .LVU1210
  80:src/console.c ****   case KEY_F3:
 4244              		.loc 2 80 51 is_stmt 0 view .LVU1211
 4245 04be DDE91201 		ldrd	r0, r1, [sp, #72]
 4246 04c2 0DF10809 		add	r9, sp, #8
 4247 04c6 89E80300 		stm	r9, {r0, r1}
 4248 04ca 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4249              	.LVL382:
  80:src/console.c ****   case KEY_F3:
 4250              		.loc 2 80 51 view .LVU1212
 4251 04ce 8846     		mov	r8, r1
 4252              	.LVL383:
  80:src/console.c ****   case KEY_F3:
 4253              		.loc 2 80 51 view .LVU1213
 4254 04d0 CFE6     		b	.L313
 4255              	.LVL384:
 4256              	.L337:
 119:src/console.c ****   case SHIFT_F:
 4257              		.loc 2 119 5 is_stmt 1 view .LVU1214
 121:src/console.c ****     break;
ARM GAS  /tmp/cc7no4fx.s 			page 116


 4258              		.loc 2 121 5 view .LVU1215
 121:src/console.c ****     break;
 4259              		.loc 2 121 26 is_stmt 0 view .LVU1216
 4260 04d2 1A4B     		ldr	r3, .L391+24
 4261 04d4 5EE7     		b	.L369
 4262              	.L387:
  97:src/console.c ****       case SHIFT_N:
 4263              		.loc 2 97 7 is_stmt 1 view .LVU1217
  97:src/console.c ****       case SHIFT_N:
 4264              		.loc 2 97 15 is_stmt 0 view .LVU1218
 4265 04d6 FFF7FEFF 		bl	cur_shift
 4266              	.LVL385:
  97:src/console.c ****       case SHIFT_N:
 4267              		.loc 2 97 7 view .LVU1219
 4268 04da 0328     		cmp	r0, #3
 4269 04dc 3FF6EBAE 		bhi	.L371
 4270 04e0 0128     		cmp	r0, #1
 4271 04e2 09D8     		bhi	.L333
 4272 04e4 A0B1     		cbz	r0, .L388
 100:src/console.c ****       case SHIFT_F:
 4273              		.loc 2 100 2 is_stmt 1 view .LVU1220
 102:src/console.c **** 	break;
 4274              		.loc 2 102 2 view .LVU1221
 102:src/console.c **** 	break;
 4275              		.loc 2 102 23 is_stmt 0 view .LVU1222
 4276 04e6 164B     		ldr	r3, .L391+28
 4277 04e8 93E80300 		ldm	r3, {r0, r1}
 4278 04ec 0DF10809 		add	r9, sp, #8
 4279 04f0 89E80300 		stm	r9, {r0, r1}
 4280              	.LVL386:
 102:src/console.c **** 	break;
 4281              		.loc 2 102 23 view .LVU1223
 4282              	.LBE154:
 4283              	.LBE169:
 509:src/console.c **** 	set_menu ( remapped.shift );
 4284              		.loc 2 509 7 is_stmt 1 view .LVU1224
 515:src/console.c **** 	SET_ST(STAT_MENU);
 4285              		.loc 2 515 7 view .LVU1225
 523:src/console.c **** 	remapped = do_multi (remapped);
 4286              		.loc 2 523 7 view .LVU1226
 527:src/console.c ****       process_keycode_with_shift(remapped);
 4287              		.loc 2 527 7 view .LVU1227
 4288              	.LBB170:
 4289              	.LBB155:
 102:src/console.c **** 	break;
 4290              		.loc 2 102 23 is_stmt 0 view .LVU1228
 4291 04f4 2A25     		movs	r5, #42
 4292              	.LVL387:
 102:src/console.c **** 	break;
 4293              		.loc 2 102 23 view .LVU1229
 4294 04f6 E0E6     		b	.L336
 4295              	.LVL388:
 4296              	.L333:
 103:src/console.c ****       case SHIFT_G:
 4297              		.loc 2 103 2 is_stmt 1 view .LVU1230
 105:src/console.c **** 	break;
 4298              		.loc 2 105 2 view .LVU1231
ARM GAS  /tmp/cc7no4fx.s 			page 117


 105:src/console.c **** 	break;
 4299              		.loc 2 105 9 is_stmt 0 view .LVU1232
 4300 04f8 124B     		ldr	r3, .L391+32
 4301 04fa B2E6     		b	.L370
 4302              	.L374:
  77:src/console.c ****   case KEY_F2:
 4303              		.loc 2 77 33 is_stmt 1 view .LVU1233
  77:src/console.c ****   case KEY_F2:
 4304              		.loc 2 77 51 is_stmt 0 view .LVU1234
 4305 04fc DDE90A01 		ldrd	r0, r1, [sp, #40]
 4306 0500 0DF10809 		add	r9, sp, #8
 4307 0504 89E80300 		stm	r9, {r0, r1}
 4308 0508 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4309              	.LVL389:
  77:src/console.c ****   case KEY_F2:
 4310              		.loc 2 77 51 view .LVU1235
 4311 050c 8846     		mov	r8, r1
 4312              	.LVL390:
  77:src/console.c ****   case KEY_F2:
 4313              		.loc 2 77 51 view .LVU1236
 4314 050e B0E6     		b	.L313
 4315              	.LVL391:
 4316              	.L388:
  99:src/console.c **** 	break;
 4317              		.loc 2 99 2 is_stmt 1 view .LVU1237
  99:src/console.c **** 	break;
 4318              		.loc 2 99 21 is_stmt 0 view .LVU1238
 4319 0510 0D4B     		ldr	r3, .L391+36
 4320 0512 93E80300 		ldm	r3, {r0, r1}
 4321 0516 0DF10809 		add	r9, sp, #8
 4322 051a 89E80300 		stm	r9, {r0, r1}
 4323              	.LVL392:
  99:src/console.c **** 	break;
 4324              		.loc 2 99 21 view .LVU1239
 4325              	.LBE155:
 4326              	.LBE170:
 509:src/console.c **** 	set_menu ( remapped.shift );
 4327              		.loc 2 509 7 is_stmt 1 view .LVU1240
 515:src/console.c **** 	SET_ST(STAT_MENU);
 4328              		.loc 2 515 7 view .LVU1241
 523:src/console.c **** 	remapped = do_multi (remapped);
 4329              		.loc 2 523 7 view .LVU1242
 527:src/console.c ****       process_keycode_with_shift(remapped);
 4330              		.loc 2 527 7 view .LVU1243
 4331              	.LBB171:
 4332              	.LBB156:
  99:src/console.c **** 	break;
 4333              		.loc 2 99 21 is_stmt 0 view .LVU1244
 4334 051e 2925     		movs	r5, #41
 4335              	.LVL393:
  99:src/console.c **** 	break;
 4336              		.loc 2 99 21 view .LVU1245
 4337 0520 CBE6     		b	.L336
 4338              	.L392:
 4339 0522 00BF     		.align	2
 4340              	.L391:
 4341 0524 00000000 		.word	.LANCHOR12
ARM GAS  /tmp/cc7no4fx.s 			page 118


 4342 0528 00000000 		.word	.LANCHOR11
 4343 052c 00000000 		.word	.LANCHOR2
 4344 0530 00000000 		.word	.LANCHOR16
 4345 0534 00000000 		.word	.LANCHOR17
 4346 0538 00000000 		.word	.LANCHOR13
 4347 053c 00000000 		.word	.LANCHOR14
 4348 0540 E0000000 		.word	.LANCHOR14+224
 4349 0544 00000000 		.word	.LANCHOR15
 4350 0548 E0000000 		.word	.LANCHOR13+224
 4351              	.LBE156:
 4352              	.LBE171:
 4353              		.cfi_endproc
 4354              	.LFE32:
 4356              		.global	n_p
 4357              		.comm	print_string,22,4
 4358              		.global	spaces
 4359              		.global	release
 4360              		.global	h_shift
 4361              		.global	g_shift
 4362              		.global	f_shift
 4363              		.global	heartbeat
 4364              		.global	no_key
 4365              		.global	MID_MENU
 4366              		.section	.rodata.str1.4,"aMS",%progbits,1
 4367              		.align	2
 4368              	.LC12:
 4369 0000 53797374 		.ascii	"System!\000"
 4369      656D2100 
 4370              		.global	mid_menu
 4371              		.global	default_menu
 4372              		.global	last_menu
 4373              		.global	current_menu
 4374              		.global	cmplx_key_string
 4375              		.align	2
 4376              	.LC13:
 4377 0008 43505800 		.ascii	"CPX\000"
 4378              		.global	arrow_key_string
 4379              		.align	2
 4380              	.LC14:
 4381 000c 2D2D0D00 		.ascii	"--\015\000"
 4382              		.global	UserMenu
 4383              		.section	.rodata
 4384              		.align	2
 4385              		.set	.LANCHOR7,. + 0
 4386              	.LC8:
 4387 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4387      2A2B0708 
 4387      091C0B0C 
 4387      0D0E0F
 4388 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4388      13141516 
 4388      00121819 
 4388      1A
 4389 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4389      1E1F2000 
 4389      21222324 
 4389      25
ARM GAS  /tmp/cc7no4fx.s 			page 119


 4390              		.section	.bss.current_menu,"aw",%nobits
 4391              		.set	.LANCHOR1,. + 0
 4394              	current_menu:
 4395 0000 00       		.space	1
 4396              		.section	.bss.default_menu,"aw",%nobits
 4397              		.set	.LANCHOR2,. + 0
 4400              	default_menu:
 4401 0000 00       		.space	1
 4402              		.section	.bss.last_menu,"aw",%nobits
 4403              		.set	.LANCHOR3,. + 0
 4406              	last_menu:
 4407 0000 00       		.space	1
 4408              		.section	.bss.mdots,"aw",%nobits
 4409              		.align	2
 4410              		.set	.LANCHOR0,. + 0
 4413              	mdots:
 4414 0000 00000000 		.space	400
 4414      00000000 
 4414      00000000 
 4414      00000000 
 4414      00000000 
 4415              		.section	.bss.n_p,"aw",%nobits
 4416              		.align	2
 4419              	n_p:
 4420 0000 00000000 		.space	4
 4421              		.section	.bss.start_ticks,"aw",%nobits
 4422              		.align	2
 4423              		.set	.LANCHOR8,. + 0
 4426              	start_ticks:
 4427 0000 00000000 		.space	4
 4428              		.section	.data.UserMenu,"aw"
 4429              		.align	2
 4430              		.set	.LANCHOR4,. + 0
 4433              	UserMenu:
 4434 0000 55736572 		.ascii	"User Menu\000"
 4434      204D656E 
 4434      7500
 4435 000a 00000000 		.space	5
 4435      00
 4436 000f 00       		.space	1
 4437 0010 2E       		.byte	46
 4438 0011 000000   		.space	3
 4439 0014 FFFFFFFF 		.word	-1
 4440 0018 2E       		.byte	46
 4441 0019 000000   		.space	3
 4442 001c FFFFFFFF 		.word	-1
 4443 0020 00       		.ascii	"\000"
 4444 0021 00000000 		.space	7
 4444      000000
 4445 0028 00       		.ascii	"\000"
 4446 0029 00000000 		.space	7
 4446      000000
 4447 0030 2E       		.byte	46
 4448 0031 000000   		.space	3
 4449 0034 FFFFFFFF 		.word	-1
 4450 0038 2E       		.byte	46
 4451 0039 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 120


 4452 003c FFFFFFFF 		.word	-1
 4453 0040 00       		.ascii	"\000"
 4454 0041 00000000 		.space	7
 4454      000000
 4455 0048 00       		.ascii	"\000"
 4456 0049 00000000 		.space	7
 4456      000000
 4457 0050 2E       		.byte	46
 4458 0051 000000   		.space	3
 4459 0054 FFFFFFFF 		.word	-1
 4460 0058 2E       		.byte	46
 4461 0059 000000   		.space	3
 4462 005c FFFFFFFF 		.word	-1
 4463 0060 00       		.ascii	"\000"
 4464 0061 00000000 		.space	7
 4464      000000
 4465 0068 00       		.ascii	"\000"
 4466 0069 00000000 		.space	7
 4466      000000
 4467 0070 2E       		.byte	46
 4468 0071 000000   		.space	3
 4469 0074 FFFFFFFF 		.word	-1
 4470 0078 2E       		.byte	46
 4471 0079 000000   		.space	3
 4472 007c FFFFFFFF 		.word	-1
 4473 0080 00       		.ascii	"\000"
 4474 0081 00000000 		.space	7
 4474      000000
 4475 0088 00       		.ascii	"\000"
 4476 0089 00000000 		.space	7
 4476      000000
 4477 0090 2C       		.byte	44
 4478 0091 000000   		.space	3
 4479 0094 FFFFFFFF 		.word	-1
 4480 0098 2E       		.byte	46
 4481 0099 000000   		.space	3
 4482 009c FFFFFFFF 		.word	-1
 4483 00a0 2D2D0D00 		.ascii	"--\015\000"
 4484 00a4 00000000 		.space	4
 4485 00a8 00       		.ascii	"\000"
 4486 00a9 00000000 		.space	7
 4486      000000
 4487 00b0 2D       		.byte	45
 4488 00b1 000000   		.space	3
 4489 00b4 FFFFFFFF 		.word	-1
 4490 00b8 31       		.byte	49
 4491 00b9 000000   		.space	3
 4492 00bc 0B000000 		.word	11
 4493 00c0 43505800 		.ascii	"CPX\000"
 4494 00c4 00000000 		.space	4
 4495 00c8 00       		.ascii	"\000"
 4496 00c9 00000000 		.space	7
 4496      000000
 4497              		.section	.data.arrow_key_string,"aw"
 4498              		.align	2
 4499              		.set	.LANCHOR5,. + 0
 4502              	arrow_key_string:
ARM GAS  /tmp/cc7no4fx.s 			page 121


 4503 0000 0C000000 		.word	.LC14
 4504              		.section	.data.cmplx_key_string,"aw"
 4505              		.align	2
 4506              		.set	.LANCHOR6,. + 0
 4509              	cmplx_key_string:
 4510 0000 08000000 		.word	.LC13
 4511              		.section	.data.f_shift,"aw"
 4512              		.align	2
 4515              	f_shift:
 4516 0000 29       		.byte	41
 4517 0001 000000   		.space	3
 4518 0004 FFFFFFFF 		.word	-1
 4519              		.section	.data.g_shift,"aw"
 4520              		.align	2
 4523              	g_shift:
 4524 0000 2A       		.byte	42
 4525 0001 000000   		.space	3
 4526 0004 FFFFFFFF 		.word	-1
 4527              		.section	.data.h_shift,"aw"
 4528              		.align	2
 4529              		.set	.LANCHOR15,. + 0
 4532              	h_shift:
 4533 0000 2B       		.byte	43
 4534 0001 000000   		.space	3
 4535 0004 FFFFFFFF 		.word	-1
 4536              		.section	.data.heartbeat,"aw"
 4537              		.align	2
 4538              		.set	.LANCHOR19,. + 0
 4541              	heartbeat:
 4542 0000 62       		.byte	98
 4543 0001 000000   		.space	3
 4544 0004 FFFFFFFF 		.word	-1
 4545              		.section	.data.no_key,"aw"
 4546              		.align	2
 4547              		.set	.LANCHOR10,. + 0
 4550              	no_key:
 4551 0000 2E       		.byte	46
 4552 0001 000000   		.space	3
 4553 0004 00000000 		.word	0
 4554              		.section	.data.release,"aw"
 4555              		.align	2
 4556              		.set	.LANCHOR11,. + 0
 4559              	release:
 4560 0000 63       		.byte	99
 4561 0001 000000   		.space	3
 4562 0004 FFFFFFFF 		.word	-1
 4563              		.section	.data.spaces,"aw"
 4564              		.align	2
 4565              		.set	.LANCHOR9,. + 0
 4568              	spaces:
 4569 0000 20202020 		.ascii	"                     \000"
 4569      20202020 
 4569      20202020 
 4569      20202020 
 4569      20202020 
 4570              		.section	.rodata.MID_MENU,"a"
 4571              		.align	2
ARM GAS  /tmp/cc7no4fx.s 			page 122


 4572              		.set	.LANCHOR18,. + 0
 4575              	MID_MENU:
 4576 0000 00000000 		.word	.LC12
 4577 0004 00000000 		.word	mid_menu
 4578 0008 00000000 		.word	0
 4579 000c 00000000 		.word	0
 4580              		.section	.rodata.Menus,"a"
 4581              		.align	2
 4584              	Menus:
 4585 0000 4D5F426C 		.ascii	"M_Blank\000"
 4585      616E6B00 
 4586 0008 00000000 		.space	7
 4586      000000
 4587 000f 00       		.space	1
 4588 0010 2E       		.byte	46
 4589 0011 000000   		.space	3
 4590 0014 FFFFFFFF 		.word	-1
 4591 0018 2E       		.byte	46
 4592 0019 000000   		.space	3
 4593 001c FFFFFFFF 		.word	-1
 4594 0020 00       		.ascii	"\000"
 4595 0021 00000000 		.space	7
 4595      000000
 4596 0028 00       		.ascii	"\000"
 4597 0029 00000000 		.space	7
 4597      000000
 4598 0030 2E       		.byte	46
 4599 0031 000000   		.space	3
 4600 0034 FFFFFFFF 		.word	-1
 4601 0038 2E       		.byte	46
 4602 0039 000000   		.space	3
 4603 003c FFFFFFFF 		.word	-1
 4604 0040 00       		.ascii	"\000"
 4605 0041 00000000 		.space	7
 4605      000000
 4606 0048 00       		.ascii	"\000"
 4607 0049 00000000 		.space	7
 4607      000000
 4608 0050 2E       		.byte	46
 4609 0051 000000   		.space	3
 4610 0054 FFFFFFFF 		.word	-1
 4611 0058 2E       		.byte	46
 4612 0059 000000   		.space	3
 4613 005c FFFFFFFF 		.word	-1
 4614 0060 00       		.ascii	"\000"
 4615 0061 00000000 		.space	7
 4615      000000
 4616 0068 00       		.ascii	"\000"
 4617 0069 00000000 		.space	7
 4617      000000
 4618 0070 2E       		.byte	46
 4619 0071 000000   		.space	3
 4620 0074 FFFFFFFF 		.word	-1
 4621 0078 2E       		.byte	46
 4622 0079 000000   		.space	3
 4623 007c FFFFFFFF 		.word	-1
 4624 0080 00       		.ascii	"\000"
ARM GAS  /tmp/cc7no4fx.s 			page 123


 4625 0081 00000000 		.space	7
 4625      000000
 4626 0088 00       		.ascii	"\000"
 4627 0089 00000000 		.space	7
 4627      000000
 4628 0090 2C       		.byte	44
 4629 0091 000000   		.space	3
 4630 0094 FFFFFFFF 		.word	-1
 4631 0098 2E       		.byte	46
 4632 0099 000000   		.space	3
 4633 009c FFFFFFFF 		.word	-1
 4634 00a0 2D2D0D00 		.ascii	"--\015\000"
 4635 00a4 00000000 		.space	4
 4636 00a8 00       		.ascii	"\000"
 4637 00a9 00000000 		.space	7
 4637      000000
 4638 00b0 2D       		.byte	45
 4639 00b1 000000   		.space	3
 4640 00b4 FFFFFFFF 		.word	-1
 4641 00b8 31       		.byte	49
 4642 00b9 000000   		.space	3
 4643 00bc 0B000000 		.word	11
 4644 00c0 43505800 		.ascii	"CPX\000"
 4645 00c4 00000000 		.space	4
 4646 00c8 00       		.ascii	"\000"
 4647 00c9 00000000 		.space	7
 4647      000000
 4648 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4648      65617200 
 4649 00d8 00000000 		.space	7
 4649      000000
 4650 00df 00       		.space	1
 4651 00e0 10       		.byte	16
 4652 00e1 000000   		.space	3
 4653 00e4 01000000 		.word	1
 4654 00e8 34       		.byte	52
 4655 00e9 000000   		.space	3
 4656 00ec 44010000 		.word	324
 4657 00f0 434C5072 		.ascii	"CLProg\000"
 4657      6F6700
 4658 00f7 00       		.space	1
 4659 00f8 434C5041 		.ascii	"CLPAll\000"
 4659      6C6C00
 4660 00ff 00       		.space	1
 4661 0100 10       		.byte	16
 4662 0101 000000   		.space	3
 4663 0104 02000000 		.word	2
 4664 0108 34       		.byte	52
 4665 0109 000000   		.space	3
 4666 010c 3E010000 		.word	318
 4667 0110 434C9100 		.ascii	"CL\221\000"
 4668 0114 00000000 		.space	4
 4669 0118 434C5265 		.ascii	"CLReg\000"
 4669      6700
 4670 011e 0000     		.space	2
 4671 0120 10       		.byte	16
 4672 0121 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 124


 4673 0124 03000000 		.word	3
 4674 0128 34       		.byte	52
 4675 0129 000000   		.space	3
 4676 012c 74010000 		.word	372
 4677 0130 434C7800 		.ascii	"CLx\000"
 4678 0134 00000000 		.space	4
 4679 0138 434C06A0 		.ascii	"CL\006\240\000"
 4679      00
 4680 013d 000000   		.space	3
 4681 0140 34       		.byte	52
 4682 0141 000000   		.space	3
 4683 0144 40010000 		.word	320
 4684 0148 34       		.byte	52
 4685 0149 000000   		.space	3
 4686 014c 41010000 		.word	321
 4687 0150 434C5374 		.ascii	"CLStk\000"
 4687      6B00
 4688 0156 0000     		.space	2
 4689 0158 434C416C 		.ascii	"CLAll\000"
 4689      6C00
 4690 015e 0000     		.space	2
 4691 0160 2C       		.byte	44
 4692 0161 000000   		.space	3
 4693 0164 FFFFFFFF 		.word	-1
 4694 0168 2E       		.byte	46
 4695 0169 000000   		.space	3
 4696 016c FFFFFFFF 		.word	-1
 4697 0170 2D2D0D00 		.ascii	"--\015\000"
 4698 0174 00000000 		.space	4
 4699 0178 00       		.ascii	"\000"
 4700 0179 00000000 		.space	7
 4700      000000
 4701 0180 2D       		.byte	45
 4702 0181 000000   		.space	3
 4703 0184 FFFFFFFF 		.word	-1
 4704 0188 2E       		.byte	46
 4705 0189 000000   		.space	3
 4706 018c FFFFFFFF 		.word	-1
 4707 0190 43505800 		.ascii	"CPX\000"
 4708 0194 00000000 		.space	4
 4709 0198 00       		.ascii	"\000"
 4710 0199 00000000 		.space	7
 4710      000000
 4711 01a0 4D5F4469 		.ascii	"M_Disp\000"
 4711      737000
 4712 01a7 00000000 		.space	8
 4712      00000000 
 4713 01af 00       		.space	1
 4714 01b0 00       		.byte	0
 4715 01b1 000000   		.space	3
 4716 01b4 03000000 		.word	3
 4717 01b8 05       		.byte	5
 4718 01b9 000000   		.space	3
 4719 01bc 01000000 		.word	1
 4720 01c0 414C4C00 		.ascii	"ALL\000"
 4721 01c4 00000000 		.space	4
 4722 01c8 6120622F 		.ascii	"a b/c\000"
ARM GAS  /tmp/cc7no4fx.s 			page 125


 4722      6300
 4723 01ce 0000     		.space	2
 4724 01d0 01       		.byte	1
 4725 01d1 000000   		.space	3
 4726 01d4 03000000 		.word	3
 4727 01d8 05       		.byte	5
 4728 01d9 000000   		.space	3
 4729 01dc 02000000 		.word	2
 4730 01e0 46495800 		.ascii	"FIX\000"
 4731 01e4 00000000 		.space	4
 4732 01e8 642F6300 		.ascii	"d/c\000"
 4733 01ec 00000000 		.space	4
 4734 01f0 02       		.byte	2
 4735 01f1 000000   		.space	3
 4736 01f4 03000000 		.word	3
 4737 01f8 06       		.byte	6
 4738 01f9 000000   		.space	3
 4739 01fc 01000000 		.word	1
 4740 0200 53434900 		.ascii	"SCI\000"
 4741 0204 00000000 		.space	4
 4742 0208 482E4D53 		.ascii	"H.MS\000"
 4742      00
 4743 020d 000000   		.space	3
 4744 0210 03       		.byte	3
 4745 0211 000000   		.space	3
 4746 0214 03000000 		.word	3
 4747 0218 07       		.byte	7
 4748 0219 000000   		.space	3
 4749 021c 01000000 		.word	1
 4750 0220 454E4700 		.ascii	"ENG\000"
 4751 0224 00000000 		.space	4
 4752 0228 482E6400 		.ascii	"H.d\000"
 4753 022c 00000000 		.space	4
 4754 0230 2C       		.byte	44
 4755 0231 000000   		.space	3
 4756 0234 FFFFFFFF 		.word	-1
 4757 0238 26       		.byte	38
 4758 0239 000000   		.space	3
 4759 023c 03000000 		.word	3
 4760 0240 2D2D0D00 		.ascii	"--\015\000"
 4761 0244 00000000 		.space	4
 4762 0248 2E2F2C00 		.ascii	"./,\000"
 4763 024c 00000000 		.space	4
 4764 0250 2D       		.byte	45
 4765 0251 000000   		.space	3
 4766 0254 FFFFFFFF 		.word	-1
 4767 0258 2E       		.byte	46
 4768 0259 000000   		.space	3
 4769 025c FFFFFFFF 		.word	-1
 4770 0260 43505800 		.ascii	"CPX\000"
 4771 0264 00000000 		.space	4
 4772 0268 00       		.ascii	"\000"
 4773 0269 00000000 		.space	7
 4773      000000
 4774 0270 4D5F4261 		.ascii	"M_Base\000"
 4774      736500
 4775 0277 00000000 		.space	8
ARM GAS  /tmp/cc7no4fx.s 			page 126


 4775      00000000 
 4776 027f 00       		.space	1
 4777 0280 0E       		.byte	14
 4778 0281 000000   		.space	3
 4779 0284 01000000 		.word	1
 4780 0288 0E       		.byte	14
 4781 0289 000000   		.space	3
 4782 028c 03000000 		.word	3
 4783 0290 42494E00 		.ascii	"BIN\000"
 4784 0294 00000000 		.space	4
 4785 0298 6E6F7400 		.ascii	"not\000"
 4786 029c 00000000 		.space	4
 4787 02a0 0E       		.byte	14
 4788 02a1 000000   		.space	3
 4789 02a4 02000000 		.word	2
 4790 02a8 13       		.byte	19
 4791 02a9 000000   		.space	3
 4792 02ac 03000000 		.word	3
 4793 02b0 4F435400 		.ascii	"OCT\000"
 4794 02b4 00000000 		.space	4
 4795 02b8 616E6400 		.ascii	"and\000"
 4796 02bc 00000000 		.space	4
 4797 02c0 0F       		.byte	15
 4798 02c1 000000   		.space	3
 4799 02c4 01000000 		.word	1
 4800 02c8 14       		.byte	20
 4801 02c9 000000   		.space	3
 4802 02cc 03000000 		.word	3
 4803 02d0 44454300 		.ascii	"DEC\000"
 4804 02d4 00000000 		.space	4
 4805 02d8 6F7200   		.ascii	"or\000"
 4806 02db 00000000 		.space	5
 4806      00
 4807 02e0 0F       		.byte	15
 4808 02e1 000000   		.space	3
 4809 02e4 02000000 		.word	2
 4810 02e8 15       		.byte	21
 4811 02e9 000000   		.space	3
 4812 02ec 03000000 		.word	3
 4813 02f0 48455800 		.ascii	"HEX\000"
 4814 02f4 00000000 		.space	4
 4815 02f8 786F7200 		.ascii	"xor\000"
 4816 02fc 00000000 		.space	4
 4817 0300 2C       		.byte	44
 4818 0301 000000   		.space	3
 4819 0304 FFFFFFFF 		.word	-1
 4820 0308 16       		.byte	22
 4821 0309 000000   		.space	3
 4822 030c 03000000 		.word	3
 4823 0310 2D2D0D00 		.ascii	"--\015\000"
 4824 0314 00000000 		.space	4
 4825 0318 524D4452 		.ascii	"RMDR\000"
 4825      00
 4826 031d 000000   		.space	3
 4827 0320 2D       		.byte	45
 4828 0321 000000   		.space	3
 4829 0324 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc7no4fx.s 			page 127


 4830 0328 07       		.byte	7
 4831 0329 000000   		.space	3
 4832 032c 01000000 		.word	1
 4833 0330 43505800 		.ascii	"CPX\000"
 4834 0334 00000000 		.space	4
 4835 0338 482E6400 		.ascii	"H.d\000"
 4836 033c 00000000 		.space	4
 4837 0340 4D5F416E 		.ascii	"M_Angles\000"
 4837      676C6573 
 4837      00
 4838 0349 00000000 		.space	6
 4838      0000
 4839 034f 00       		.space	1
 4840 0350 06       		.byte	6
 4841 0351 000000   		.space	3
 4842 0354 02000000 		.word	2
 4843 0358 04       		.byte	4
 4844 0359 000000   		.space	3
 4845 035c 01000000 		.word	1
 4846 0360 44454700 		.ascii	"DEG\000"
 4847 0364 00000000 		.space	4
 4848 0368 500D5200 		.ascii	"P\015R\000"
 4849 036c 00000000 		.space	4
 4850 0370 07       		.byte	7
 4851 0371 000000   		.space	3
 4852 0374 02000000 		.word	2
 4853 0378 04       		.byte	4
 4854 0379 000000   		.space	3
 4855 037c 02000000 		.word	2
 4856 0380 52414400 		.ascii	"RAD\000"
 4857 0384 00000000 		.space	4
 4858 0388 520D5000 		.ascii	"R\015P\000"
 4859 038c 00000000 		.space	4
 4860 0390 08       		.byte	8
 4861 0391 000000   		.space	3
 4862 0394 02000000 		.word	2
 4863 0398 00       		.byte	0
 4864 0399 000000   		.space	3
 4865 039c 01000000 		.word	1
 4866 03a0 47524144 		.ascii	"GRAD\000"
 4866      00
 4867 03a5 000000   		.space	3
 4868 03a8 48595000 		.ascii	"HYP\000"
 4869 03ac 00000000 		.space	4
 4870 03b0 06       		.byte	6
 4871 03b1 000000   		.space	3
 4872 03b4 01000000 		.word	1
 4873 03b8 07       		.byte	7
 4874 03b9 000000   		.space	3
 4875 03bc 01000000 		.word	1
 4876 03c0 482E4D53 		.ascii	"H.MS\000"
 4876      00
 4877 03c5 000000   		.space	3
 4878 03c8 482E6400 		.ascii	"H.d\000"
 4879 03cc 00000000 		.space	4
 4880 03d0 2C       		.byte	44
 4881 03d1 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 128


 4882 03d4 FFFFFFFF 		.word	-1
 4883 03d8 00       		.byte	0
 4884 03d9 000000   		.space	3
 4885 03dc 02000000 		.word	2
 4886 03e0 2D2D0D00 		.ascii	"--\015\000"
 4887 03e4 00000000 		.space	4
 4888 03e8 4859509D 		.ascii	"HYP\235\000"
 4888      00
 4889 03ed 000000   		.space	3
 4890 03f0 2D       		.byte	45
 4891 03f1 000000   		.space	3
 4892 03f4 FFFFFFFF 		.word	-1
 4893 03f8 2E       		.byte	46
 4894 03f9 000000   		.space	3
 4895 03fc FFFFFFFF 		.word	-1
 4896 0400 43505800 		.ascii	"CPX\000"
 4897 0404 00000000 		.space	4
 4898 0408 00       		.ascii	"\000"
 4899 0409 00000000 		.space	7
 4899      000000
 4900 0410 4D5F4D69 		.ascii	"M_Misc\000"
 4900      736300
 4901 0417 00000000 		.space	8
 4901      00000000 
 4902 041f 00       		.space	1
 4903 0420 25       		.byte	37
 4904 0421 000000   		.space	3
 4905 0424 01000000 		.word	1
 4906 0428 14       		.byte	20
 4907 0429 000000   		.space	3
 4908 042c 01000000 		.word	1
 4909 0430 7C587C00 		.ascii	"|X|\000"
 4910 0434 00000000 		.space	4
 4911 0438 329C00   		.ascii	"2\234\000"
 4912 043b 00000000 		.space	5
 4912      00
 4913 0440 25       		.byte	37
 4914 0441 000000   		.space	3
 4915 0444 02000000 		.word	2
 4916 0448 14       		.byte	20
 4917 0449 000000   		.space	3
 4918 044c 02000000 		.word	2
 4919 0450 524E4400 		.ascii	"RND\000"
 4920 0454 00000000 		.space	4
 4921 0458 4C6F67BA 		.ascii	"Log\272\000"
 4921      00
 4922 045d 000000   		.space	3
 4923 0460 26       		.byte	38
 4924 0461 000000   		.space	3
 4925 0464 01000000 		.word	1
 4926 0468 15       		.byte	21
 4927 0469 000000   		.space	3
 4928 046c 02000000 		.word	2
 4929 0470 49506172 		.ascii	"IPart\000"
 4929      7400
 4930 0476 0000     		.space	2
 4931 0478 4C6F678B 		.ascii	"Log\213\000"
ARM GAS  /tmp/cc7no4fx.s 			page 129


 4931      00
 4932 047d 000000   		.space	3
 4933 0480 26       		.byte	38
 4934 0481 000000   		.space	3
 4935 0484 02000000 		.word	2
 4936 0488 16       		.byte	22
 4937 0489 000000   		.space	3
 4938 048c 02000000 		.word	2
 4939 0490 46506172 		.ascii	"FPart\000"
 4939      7400
 4940 0496 0000     		.space	2
 4941 0498 7C7C656C 		.ascii	"||el\000"
 4941      00
 4942 049d 000000   		.space	3
 4943 04a0 2C       		.byte	44
 4944 04a1 000000   		.space	3
 4945 04a4 FFFFFFFF 		.word	-1
 4946 04a8 22       		.byte	34
 4947 04a9 000000   		.space	3
 4948 04ac 02000000 		.word	2
 4949 04b0 2D2D0D00 		.ascii	"--\015\000"
 4950 04b4 00000000 		.space	4
 4951 04b8 832500   		.ascii	"\203%\000"
 4952 04bb 00000000 		.space	5
 4952      00
 4953 04c0 2D       		.byte	45
 4954 04c1 000000   		.space	3
 4955 04c4 FFFFFFFF 		.word	-1
 4956 04c8 2E       		.byte	46
 4957 04c9 000000   		.space	3
 4958 04cc FFFFFFFF 		.word	-1
 4959 04d0 43505800 		.ascii	"CPX\000"
 4960 04d4 00000000 		.space	4
 4961 04d8 00       		.ascii	"\000"
 4962 04d9 00000000 		.space	7
 4962      000000
 4963 04e0 4D5F5377 		.ascii	"M_Swap\000"
 4963      617000
 4964 04e7 00000000 		.space	8
 4964      00000000 
 4965 04ef 00       		.space	1
 4966 04f0 0D       		.byte	13
 4967 04f1 000000   		.space	3
 4968 04f4 01000000 		.word	1
 4969 04f8 34       		.byte	52
 4970 04f9 000000   		.space	3
 4971 04fc 00A60000 		.word	42496
 4972 0500 53686F77 		.ascii	"Show\016\000"
 4972      0E00
 4973 0506 0000     		.space	2
 4974 0508 5B175D00 		.ascii	"[\027]\000"
 4975 050c 00000000 		.space	4
 4976 0510 0D       		.byte	13
 4977 0511 000000   		.space	3
 4978 0514 02000000 		.word	2
 4979 0518 2E       		.byte	46
 4980 0519 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 130


 4981 051c FFFFFFFF 		.word	-1
 4982 0520 53686F77 		.ascii	"Show\015\000"
 4982      0D00
 4983 0526 0000     		.space	2
 4984 0528 00       		.ascii	"\000"
 4985 0529 00000000 		.space	7
 4985      000000
 4986 0530 0D       		.byte	13
 4987 0531 000000   		.space	3
 4988 0534 03000000 		.word	3
 4989 0538 34       		.byte	52
 4990 0539 000000   		.space	3
 4991 053c 00330000 		.word	13056
 4992 0540 78173F00 		.ascii	"x\027?\000"
 4993 0544 00000000 		.space	4
 4994 0548 7A173F00 		.ascii	"z\027?\000"
 4995 054c 00000000 		.space	4
 4996 0550 34       		.byte	52
 4997 0551 000000   		.space	3
 4998 0554 00320000 		.word	12800
 4999 0558 34       		.byte	52
 5000 0559 000000   		.space	3
 5001 055c 00340000 		.word	13312
 5002 0560 79173F00 		.ascii	"y\027?\000"
 5003 0564 00000000 		.space	4
 5004 0568 74173F00 		.ascii	"t\027?\000"
 5005 056c 00000000 		.space	4
 5006 0570 2C       		.byte	44
 5007 0571 000000   		.space	3
 5008 0574 FFFFFFFF 		.word	-1
 5009 0578 2E       		.byte	46
 5010 0579 000000   		.space	3
 5011 057c FFFFFFFF 		.word	-1
 5012 0580 2D2D0D00 		.ascii	"--\015\000"
 5013 0584 00000000 		.space	4
 5014 0588 00       		.ascii	"\000"
 5015 0589 00000000 		.space	7
 5015      000000
 5016 0590 2D       		.byte	45
 5017 0591 000000   		.space	3
 5018 0594 FFFFFFFF 		.word	-1
 5019 0598 2E       		.byte	46
 5020 0599 000000   		.space	3
 5021 059c FFFFFFFF 		.word	-1
 5022 05a0 43505800 		.ascii	"CPX\000"
 5023 05a4 00000000 		.space	4
 5024 05a8 00       		.ascii	"\000"
 5025 05a9 00000000 		.space	7
 5025      000000
 5026 05b0 4D5F5072 		.ascii	"M_Program\000"
 5026      6F677261 
 5026      6D00
 5027 05ba 00000000 		.space	5
 5027      00
 5028 05bf 00       		.space	1
 5029 05c0 27       		.byte	39
 5030 05c1 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 131


 5031 05c4 01000000 		.word	1
 5032 05c8 28       		.byte	40
 5033 05c9 000000   		.space	3
 5034 05cc 01000000 		.word	1
 5035 05d0 4C424C00 		.ascii	"LBL\000"
 5036 05d4 00000000 		.space	4
 5037 05d8 44534500 		.ascii	"DSE\000"
 5038 05dc 00000000 		.space	4
 5039 05e0 27       		.byte	39
 5040 05e1 000000   		.space	3
 5041 05e4 02000000 		.word	2
 5042 05e8 28       		.byte	40
 5043 05e9 000000   		.space	3
 5044 05ec 02000000 		.word	2
 5045 05f0 52544E00 		.ascii	"RTN\000"
 5046 05f4 00000000 		.space	4
 5047 05f8 49534700 		.ascii	"ISG\000"
 5048 05fc 00000000 		.space	4
 5049 0600 25       		.byte	37
 5050 0601 000000   		.space	3
 5051 0604 03000000 		.word	3
 5052 0608 34       		.byte	52
 5053 0609 000000   		.space	3
 5054 060c 00600000 		.word	24576
 5055 0610 50617573 		.ascii	"Pause\000"
 5055      6500
 5056 0616 0000     		.space	2
 5057 0618 44454300 		.ascii	"DEC\000"
 5058 061c 00000000 		.space	4
 5059 0620 12       		.byte	18
 5060 0621 000000   		.space	3
 5061 0624 03000000 		.word	3
 5062 0628 34       		.byte	52
 5063 0629 000000   		.space	3
 5064 062c 00610000 		.word	24832
 5065 0630 47544F00 		.ascii	"GTO\000"
 5066 0634 00000000 		.space	4
 5067 0638 494E4300 		.ascii	"INC\000"
 5068 063c 00000000 		.space	4
 5069 0640 2C       		.byte	44
 5070 0641 000000   		.space	3
 5071 0644 FFFFFFFF 		.word	-1
 5072 0648 34       		.byte	52
 5073 0649 000000   		.space	3
 5074 064c 00570000 		.word	22272
 5075 0650 2D2D0D00 		.ascii	"--\015\000"
 5076 0654 00000000 		.space	4
 5077 0658 4241434B 		.ascii	"BACK\000"
 5077      00
 5078 065d 000000   		.space	3
 5079 0660 2D       		.byte	45
 5080 0661 000000   		.space	3
 5081 0664 FFFFFFFF 		.word	-1
 5082 0668 34       		.byte	52
 5083 0669 000000   		.space	3
 5084 066c 00560000 		.word	22016
 5085 0670 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/cc7no4fx.s 			page 132


 5086 0674 00000000 		.space	4
 5087 0678 534B4950 		.ascii	"SKIP\000"
 5087      00
 5088 067d 000000   		.space	3
 5089 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5089      74757031 
 5089      00
 5090 0689 00000000 		.space	6
 5090      0000
 5091 068f 00       		.space	1
 5092 0690 32       		.byte	50
 5093 0691 000000   		.space	3
 5094 0694 00000000 		.word	0
 5095 0698 30       		.byte	48
 5096 0699 000000   		.space	3
 5097 069c 00000000 		.word	0
 5098 06a0 45584954 		.ascii	"EXIT\000"
 5098      00
 5099 06a5 000000   		.space	3
 5100 06a8 53797374 		.ascii	"System\000"
 5100      656D00
 5101 06af 00       		.space	1
 5102 06b0 31       		.byte	49
 5103 06b1 000000   		.space	3
 5104 06b4 09000000 		.word	9
 5105 06b8 2E       		.byte	46
 5106 06b9 000000   		.space	3
 5107 06bc FFFFFFFF 		.word	-1
 5108 06c0 48454C50 		.ascii	"HELP\000"
 5108      00
 5109 06c5 000000   		.space	3
 5110 06c8 00       		.ascii	"\000"
 5111 06c9 00000000 		.space	7
 5111      000000
 5112 06d0 31       		.byte	49
 5113 06d1 000000   		.space	3
 5114 06d4 02000000 		.word	2
 5115 06d8 31       		.byte	49
 5116 06d9 000000   		.space	3
 5117 06dc 06000000 		.word	6
 5118 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5118      4F00
 5119 06e6 0000     		.space	2
 5120 06e8 53765241 		.ascii	"SvRAM\000"
 5120      4D00
 5121 06ee 0000     		.space	2
 5122 06f0 31       		.byte	49
 5123 06f1 000000   		.space	3
 5124 06f4 03000000 		.word	3
 5125 06f8 31       		.byte	49
 5126 06f9 000000   		.space	3
 5127 06fc 07000000 		.word	7
 5128 0700 4F6E5243 		.ascii	"OnRCL\000"
 5128      4C00
 5129 0706 0000     		.space	2
 5130 0708 4C645241 		.ascii	"LdRAM\000"
 5130      4D00
ARM GAS  /tmp/cc7no4fx.s 			page 133


 5131 070e 0000     		.space	2
 5132 0710 2C       		.byte	44
 5133 0711 000000   		.space	3
 5134 0714 FFFFFFFF 		.word	-1
 5135 0718 2E       		.byte	46
 5136 0719 000000   		.space	3
 5137 071c FFFFFFFF 		.word	-1
 5138 0720 2D2D0D00 		.ascii	"--\015\000"
 5139 0724 00000000 		.space	4
 5140 0728 00       		.ascii	"\000"
 5141 0729 00000000 		.space	7
 5141      000000
 5142 0730 2D       		.byte	45
 5143 0731 000000   		.space	3
 5144 0734 FFFFFFFF 		.word	-1
 5145 0738 2E       		.byte	46
 5146 0739 000000   		.space	3
 5147 073c FFFFFFFF 		.word	-1
 5148 0740 43505800 		.ascii	"CPX\000"
 5149 0744 00000000 		.space	4
 5150 0748 00       		.ascii	"\000"
 5151 0749 00000000 		.space	7
 5151      000000
 5152 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5152      726F7700 
 5153 0758 00000000 		.space	7
 5153      000000
 5154 075f 00       		.space	1
 5155 0760 0E       		.byte	14
 5156 0761 000000   		.space	3
 5157 0764 01000000 		.word	1
 5158 0768 06       		.byte	6
 5159 0769 000000   		.space	3
 5160 076c 02000000 		.word	2
 5161 0770 42696E00 		.ascii	"Bin\000"
 5162 0774 00000000 		.space	4
 5163 0778 44454700 		.ascii	"DEG\000"
 5164 077c 00000000 		.space	4
 5165 0780 0E       		.byte	14
 5166 0781 000000   		.space	3
 5167 0784 02000000 		.word	2
 5168 0788 07       		.byte	7
 5169 0789 000000   		.space	3
 5170 078c 02000000 		.word	2
 5171 0790 4F637400 		.ascii	"Oct\000"
 5172 0794 00000000 		.space	4
 5173 0798 52414400 		.ascii	"RAD\000"
 5174 079c 00000000 		.space	4
 5175 07a0 0F       		.byte	15
 5176 07a1 000000   		.space	3
 5177 07a4 01000000 		.word	1
 5178 07a8 08       		.byte	8
 5179 07a9 000000   		.space	3
 5180 07ac 02000000 		.word	2
 5181 07b0 44656300 		.ascii	"Dec\000"
 5182 07b4 00000000 		.space	4
 5183 07b8 47726164 		.ascii	"Grad\000"
ARM GAS  /tmp/cc7no4fx.s 			page 134


 5183      00
 5184 07bd 000000   		.space	3
 5185 07c0 0F       		.byte	15
 5186 07c1 000000   		.space	3
 5187 07c4 02000000 		.word	2
 5188 07c8 06       		.byte	6
 5189 07c9 000000   		.space	3
 5190 07cc 01000000 		.word	1
 5191 07d0 48657800 		.ascii	"Hex\000"
 5192 07d4 00000000 		.space	4
 5193 07d8 0D484D53 		.ascii	"\015HMS\000"
 5193      00
 5194 07dd 000000   		.space	3
 5195 07e0 2C       		.byte	44
 5196 07e1 000000   		.space	3
 5197 07e4 FFFFFFFF 		.word	-1
 5198 07e8 07       		.byte	7
 5199 07e9 000000   		.space	3
 5200 07ec 01000000 		.word	1
 5201 07f0 2D2D0D00 		.ascii	"--\015\000"
 5202 07f4 00000000 		.space	4
 5203 07f8 484D530D 		.ascii	"HMS\015\000"
 5203      00
 5204 07fd 000000   		.space	3
 5205 0800 2D       		.byte	45
 5206 0801 000000   		.space	3
 5207 0804 FFFFFFFF 		.word	-1
 5208 0808 2E       		.byte	46
 5209 0809 000000   		.space	3
 5210 080c FFFFFFFF 		.word	-1
 5211 0810 43505800 		.ascii	"CPX\000"
 5212 0814 00000000 		.space	4
 5213 0818 00       		.ascii	"\000"
 5214 0819 00000000 		.space	7
 5214      000000
 5215 0820 4D5F466C 		.ascii	"M_Flags\000"
 5215      61677300 
 5216 0828 00000000 		.space	7
 5216      000000
 5217 082f 00       		.space	1
 5218 0830 1E       		.byte	30
 5219 0831 000000   		.space	3
 5220 0834 01000000 		.word	1
 5221 0838 34       		.byte	52
 5222 0839 000000   		.space	3
 5223 083c 00740000 		.word	29696
 5224 0840 53465F00 		.ascii	"SF_\000"
 5225 0844 00000000 		.space	4
 5226 0848 46533F00 		.ascii	"FS?\000"
 5227 084c 00000000 		.space	4
 5228 0850 1E       		.byte	30
 5229 0851 000000   		.space	3
 5230 0854 02000000 		.word	2
 5231 0858 34       		.byte	52
 5232 0859 000000   		.space	3
 5233 085c 00750000 		.word	29952
 5234 0860 43465F00 		.ascii	"CF_\000"
ARM GAS  /tmp/cc7no4fx.s 			page 135


 5235 0864 00000000 		.space	4
 5236 0868 46433F00 		.ascii	"FC?\000"
 5237 086c 00000000 		.space	4
 5238 0870 1F       		.byte	31
 5239 0871 000000   		.space	3
 5240 0874 01000000 		.word	1
 5241 0878 34       		.byte	52
 5242 0879 000000   		.space	3
 5243 087c 00500000 		.word	20480
 5244 0880 783D3F00 		.ascii	"x=?\000"
 5245 0884 00000000 		.space	4
 5246 0888 783C3F00 		.ascii	"x<?\000"
 5247 088c 00000000 		.space	4
 5248 0890 1F       		.byte	31
 5249 0891 000000   		.space	3
 5250 0894 02000000 		.word	2
 5251 0898 34       		.byte	52
 5252 0899 000000   		.space	3
 5253 089c 00510000 		.word	20736
 5254 08a0 780B3F00 		.ascii	"x\013?\000"
 5255 08a4 00000000 		.space	4
 5256 08a8 783C3D3F 		.ascii	"x<=?\000"
 5256      00
 5257 08ad 000000   		.space	3
 5258 08b0 2C       		.byte	44
 5259 08b1 000000   		.space	3
 5260 08b4 FFFFFFFF 		.word	-1
 5261 08b8 34       		.byte	52
 5262 08b9 000000   		.space	3
 5263 08bc 00530000 		.word	21248
 5264 08c0 2D2D0D00 		.ascii	"--\015\000"
 5265 08c4 00000000 		.space	4
 5266 08c8 783E3D3F 		.ascii	"x>=?\000"
 5266      00
 5267 08cd 000000   		.space	3
 5268 08d0 2D       		.byte	45
 5269 08d1 000000   		.space	3
 5270 08d4 FFFFFFFF 		.word	-1
 5271 08d8 34       		.byte	52
 5272 08d9 000000   		.space	3
 5273 08dc 00520000 		.word	20992
 5274 08e0 43505800 		.ascii	"CPX\000"
 5275 08e4 00000000 		.space	4
 5276 08e8 783E3F00 		.ascii	"x>?\000"
 5277 08ec 00000000 		.space	4
 5278 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5278      6F6200
 5279 08f7 00000000 		.space	8
 5279      00000000 
 5280 08ff 00       		.space	1
 5281 0900 18       		.byte	24
 5282 0901 000000   		.space	3
 5283 0904 03000000 		.word	3
 5284 0908 34       		.byte	52
 5285 0909 000000   		.space	3
 5286 090c 31020000 		.word	561
 5287 0910 46616374 		.ascii	"Fact!\000"
ARM GAS  /tmp/cc7no4fx.s 			page 136


 5287      2100
 5288 0916 0000     		.space	2
 5289 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5289      00
 5290 091d 000000   		.space	3
 5291 0920 18       		.byte	24
 5292 0921 000000   		.space	3
 5293 0924 01000000 		.word	1
 5294 0928 19       		.byte	25
 5295 0929 000000   		.space	3
 5296 092c 01000000 		.word	1
 5297 0930 43792C78 		.ascii	"Cy,x\000"
 5297      00
 5298 0935 000000   		.space	3
 5299 0938 9400     		.ascii	"\224\000"
 5300 093a 00000000 		.space	6
 5300      0000
 5301 0940 18       		.byte	24
 5302 0941 000000   		.space	3
 5303 0944 02000000 		.word	2
 5304 0948 19       		.byte	25
 5305 0949 000000   		.space	3
 5306 094c 02000000 		.word	2
 5307 0950 50792C78 		.ascii	"Py,x\000"
 5307      00
 5308 0955 000000   		.space	3
 5309 0958 949D00   		.ascii	"\224\235\000"
 5310 095b 00000000 		.space	5
 5310      00
 5311 0960 08       		.byte	8
 5312 0961 000000   		.space	3
 5313 0964 01000000 		.word	1
 5314 0968 34       		.byte	52
 5315 0969 000000   		.space	3
 5316 096c 34010000 		.word	308
 5317 0970 52414E23 		.ascii	"RAN#\000"
 5317      00
 5318 0975 000000   		.space	3
 5319 0978 53454544 		.ascii	"SEED\000"
 5319      00
 5320 097d 000000   		.space	3
 5321 0980 2C       		.byte	44
 5322 0981 000000   		.space	3
 5323 0984 FFFFFFFF 		.word	-1
 5324 0988 2E       		.byte	46
 5325 0989 000000   		.space	3
 5326 098c FFFFFFFF 		.word	-1
 5327 0990 2D2D0D00 		.ascii	"--\015\000"
 5328 0994 00000000 		.space	4
 5329 0998 00       		.ascii	"\000"
 5330 0999 00000000 		.space	7
 5330      000000
 5331 09a0 2D       		.byte	45
 5332 09a1 000000   		.space	3
 5333 09a4 FFFFFFFF 		.word	-1
 5334 09a8 2E       		.byte	46
 5335 09a9 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 137


 5336 09ac FFFFFFFF 		.word	-1
 5337 09b0 43505800 		.ascii	"CPX\000"
 5338 09b4 00000000 		.space	4
 5339 09b8 00       		.ascii	"\000"
 5340 09b9 00000000 		.space	7
 5340      000000
 5341 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5341      61747300 
 5342 09c8 00000000 		.space	7
 5342      000000
 5343 09cf 00       		.space	1
 5344 09d0 1A       		.byte	26
 5345 09d1 000000   		.space	3
 5346 09d4 01000000 		.word	1
 5347 09d8 1A       		.byte	26
 5348 09d9 000000   		.space	3
 5349 09dc 02000000 		.word	2
 5350 09e0 0100     		.ascii	"\001\000"
 5351 09e2 00000000 		.space	6
 5351      0000
 5352 09e8 532E442E 		.ascii	"S.D.\000"
 5352      00
 5353 09ed 000000   		.space	3
 5354 09f0 1B       		.byte	27
 5355 09f1 000000   		.space	3
 5356 09f4 01000000 		.word	1
 5357 09f8 34       		.byte	52
 5358 09f9 000000   		.space	3
 5359 09fc 74020000 		.word	628
 5360 0a00 792D6861 		.ascii	"y-hat\000"
 5360      7400
 5361 0a06 0000     		.space	2
 5362 0a08 782D6861 		.ascii	"x-hat\000"
 5362      7400
 5363 0a0e 0000     		.space	2
 5364 0a10 34       		.byte	52
 5365 0a11 000000   		.space	3
 5366 0a14 27010000 		.word	295
 5367 0a18 34       		.byte	52
 5368 0a19 000000   		.space	3
 5369 0a1c 28010000 		.word	296
 5370 0a20 434F5252 		.ascii	"CORR\000"
 5370      00
 5371 0a25 000000   		.space	3
 5372 0a28 4C2E522E 		.ascii	"L.R.\000"
 5372      00
 5373 0a2d 000000   		.space	3
 5374 0a30 34       		.byte	52
 5375 0a31 000000   		.space	3
 5376 0a34 32010000 		.word	306
 5377 0a38 34       		.byte	52
 5378 0a39 000000   		.space	3
 5379 0a3c 31010000 		.word	305
 5380 0a40 42657374 		.ascii	"BestF\000"
 5380      4600
 5381 0a46 0000     		.space	2
 5382 0a48 4C6F6746 		.ascii	"LogFit\000"
ARM GAS  /tmp/cc7no4fx.s 			page 138


 5382      697400
 5383 0a4f 00       		.space	1
 5384 0a50 34       		.byte	52
 5385 0a51 000000   		.space	3
 5386 0a54 2E010000 		.word	302
 5387 0a58 34       		.byte	52
 5388 0a59 000000   		.space	3
 5389 0a5c 2F010000 		.word	303
 5390 0a60 4C696E65 		.ascii	"Linear\000"
 5390      617200
 5391 0a67 00       		.space	1
 5392 0a68 45787046 		.ascii	"ExpFit\000"
 5392      697400
 5393 0a6f 00       		.space	1
 5394 0a70 2D       		.byte	45
 5395 0a71 000000   		.space	3
 5396 0a74 FFFFFFFF 		.word	-1
 5397 0a78 34       		.byte	52
 5398 0a79 000000   		.space	3
 5399 0a7c 30010000 		.word	304
 5400 0a80 43505800 		.ascii	"CPX\000"
 5401 0a84 00000000 		.space	4
 5402 0a88 50777246 		.ascii	"PwrFit\000"
 5402      697400
 5403 0a8f 00       		.space	1
 5404 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5404      74757032 
 5404      00
 5405 0a99 00000000 		.space	6
 5405      0000
 5406 0a9f 00       		.space	1
 5407 0aa0 31       		.byte	49
 5408 0aa1 000000   		.space	3
 5409 0aa4 04000000 		.word	4
 5410 0aa8 2E       		.byte	46
 5411 0aa9 000000   		.space	3
 5412 0aac FFFFFFFF 		.word	-1
 5413 0ab0 53764C49 		.ascii	"SvLIB\000"
 5413      4200
 5414 0ab6 0000     		.space	2
 5415 0ab8 00       		.ascii	"\000"
 5416 0ab9 00000000 		.space	7
 5416      000000
 5417 0ac0 31       		.byte	49
 5418 0ac1 000000   		.space	3
 5419 0ac4 05000000 		.word	5
 5420 0ac8 2E       		.byte	46
 5421 0ac9 000000   		.space	3
 5422 0acc FFFFFFFF 		.word	-1
 5423 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5423      4200
 5424 0ad6 0000     		.space	2
 5425 0ad8 00       		.ascii	"\000"
 5426 0ad9 00000000 		.space	7
 5426      000000
 5427 0ae0 31       		.byte	49
 5428 0ae1 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 139


 5429 0ae4 0A000000 		.word	10
 5430 0ae8 2E       		.byte	46
 5431 0ae9 000000   		.space	3
 5432 0aec FFFFFFFF 		.word	-1
 5433 0af0 53764350 		.ascii	"SvCPRG\000"
 5433      524700
 5434 0af7 00       		.space	1
 5435 0af8 00       		.ascii	"\000"
 5436 0af9 00000000 		.space	7
 5436      000000
 5437 0b00 31       		.byte	49
 5438 0b01 000000   		.space	3
 5439 0b04 08000000 		.word	8
 5440 0b08 2E       		.byte	46
 5441 0b09 000000   		.space	3
 5442 0b0c FFFFFFFF 		.word	-1
 5443 0b10 4C645052 		.ascii	"LdPRG\000"
 5443      4700
 5444 0b16 0000     		.space	2
 5445 0b18 00       		.ascii	"\000"
 5446 0b19 00000000 		.space	7
 5446      000000
 5447 0b20 2C       		.byte	44
 5448 0b21 000000   		.space	3
 5449 0b24 FFFFFFFF 		.word	-1
 5450 0b28 2E       		.byte	46
 5451 0b29 000000   		.space	3
 5452 0b2c FFFFFFFF 		.word	-1
 5453 0b30 2D2D0D00 		.ascii	"--\015\000"
 5454 0b34 00000000 		.space	4
 5455 0b38 00       		.ascii	"\000"
 5456 0b39 00000000 		.space	7
 5456      000000
 5457 0b40 2D       		.byte	45
 5458 0b41 000000   		.space	3
 5459 0b44 FFFFFFFF 		.word	-1
 5460 0b48 2E       		.byte	46
 5461 0b49 000000   		.space	3
 5462 0b4c FFFFFFFF 		.word	-1
 5463 0b50 43505800 		.ascii	"CPX\000"
 5464 0b54 00000000 		.space	4
 5465 0b58 00       		.ascii	"\000"
 5466 0b59 00000000 		.space	7
 5466      000000
 5467 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5467      6C766500 
 5468 0b68 00000000 		.space	7
 5468      000000
 5469 0b6f 00       		.space	1
 5470 0b70 20       		.byte	32
 5471 0b71 000000   		.space	3
 5472 0b74 01000000 		.word	1
 5473 0b78 2E       		.byte	46
 5474 0b79 000000   		.space	3
 5475 0b7c FFFFFFFF 		.word	-1
 5476 0b80 534C5600 		.ascii	"SLV\000"
 5477 0b84 00000000 		.space	4
ARM GAS  /tmp/cc7no4fx.s 			page 140


 5478 0b88 00       		.ascii	"\000"
 5479 0b89 00000000 		.space	7
 5479      000000
 5480 0b90 20       		.byte	32
 5481 0b91 000000   		.space	3
 5482 0b94 02000000 		.word	2
 5483 0b98 2E       		.byte	46
 5484 0b99 000000   		.space	3
 5485 0b9c FFFFFFFF 		.word	-1
 5486 0ba0 04206478 		.ascii	"\004 dx\000"
 5486      00
 5487 0ba5 000000   		.space	3
 5488 0ba8 00       		.ascii	"\000"
 5489 0ba9 00000000 		.space	7
 5489      000000
 5490 0bb0 21       		.byte	33
 5491 0bb1 000000   		.space	3
 5492 0bb4 02000000 		.word	2
 5493 0bb8 2E       		.byte	46
 5494 0bb9 000000   		.space	3
 5495 0bbc FFFFFFFF 		.word	-1
 5496 0bc0 53554D00 		.ascii	"SUM\000"
 5497 0bc4 00000000 		.space	4
 5498 0bc8 00       		.ascii	"\000"
 5499 0bc9 00000000 		.space	7
 5499      000000
 5500 0bd0 21       		.byte	33
 5501 0bd1 000000   		.space	3
 5502 0bd4 01000000 		.word	1
 5503 0bd8 2E       		.byte	46
 5504 0bd9 000000   		.space	3
 5505 0bdc FFFFFFFF 		.word	-1
 5506 0be0 50524F44 		.ascii	"PROD\000"
 5506      00
 5507 0be5 000000   		.space	3
 5508 0be8 00       		.ascii	"\000"
 5509 0be9 00000000 		.space	7
 5509      000000
 5510 0bf0 2C       		.byte	44
 5511 0bf1 000000   		.space	3
 5512 0bf4 FFFFFFFF 		.word	-1
 5513 0bf8 2E       		.byte	46
 5514 0bf9 000000   		.space	3
 5515 0bfc FFFFFFFF 		.word	-1
 5516 0c00 2D2D0D00 		.ascii	"--\015\000"
 5517 0c04 00000000 		.space	4
 5518 0c08 00       		.ascii	"\000"
 5519 0c09 00000000 		.space	7
 5519      000000
 5520 0c10 2D       		.byte	45
 5521 0c11 000000   		.space	3
 5522 0c14 FFFFFFFF 		.word	-1
 5523 0c18 2E       		.byte	46
 5524 0c19 000000   		.space	3
 5525 0c1c FFFFFFFF 		.word	-1
 5526 0c20 43505800 		.ascii	"CPX\000"
 5527 0c24 00000000 		.space	4
ARM GAS  /tmp/cc7no4fx.s 			page 141


 5528 0c28 00       		.ascii	"\000"
 5529 0c29 00000000 		.space	7
 5529      000000
 5530 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5530      616E6B32 
 5530      00
 5531 0c39 00000000 		.space	6
 5531      0000
 5532 0c3f 00       		.space	1
 5533 0c40 28       		.byte	40
 5534 0c41 000000   		.space	3
 5535 0c44 03000000 		.word	3
 5536 0c48 2E       		.byte	46
 5537 0c49 000000   		.space	3
 5538 0c4c FFFFFFFF 		.word	-1
 5539 0c50 912B00   		.ascii	"\221+\000"
 5540 0c53 00000000 		.space	5
 5540      00
 5541 0c58 00       		.ascii	"\000"
 5542 0c59 00000000 		.space	7
 5542      000000
 5543 0c60 16       		.byte	22
 5544 0c61 000000   		.space	3
 5545 0c64 01000000 		.word	1
 5546 0c68 2E       		.byte	46
 5547 0c69 000000   		.space	3
 5548 0c6c FFFFFFFF 		.word	-1
 5549 0c70 312F5800 		.ascii	"1/X\000"
 5550 0c74 00000000 		.space	4
 5551 0c78 00       		.ascii	"\000"
 5552 0c79 00000000 		.space	7
 5552      000000
 5553 0c80 1C       		.byte	28
 5554 0c81 000000   		.space	3
 5555 0c84 01000000 		.word	1
 5556 0c88 2E       		.byte	46
 5557 0c89 000000   		.space	3
 5558 0c8c FFFFFFFF 		.word	-1
 5559 0c90 035800   		.ascii	"\003X\000"
 5560 0c93 00000000 		.space	5
 5560      00
 5561 0c98 00       		.ascii	"\000"
 5562 0c99 00000000 		.space	7
 5562      000000
 5563 0ca0 13       		.byte	19
 5564 0ca1 000000   		.space	3
 5565 0ca4 02000000 		.word	2
 5566 0ca8 2E       		.byte	46
 5567 0ca9 000000   		.space	3
 5568 0cac FFFFFFFF 		.word	-1
 5569 0cb0 4C4F4700 		.ascii	"LOG\000"
 5570 0cb4 00000000 		.space	4
 5571 0cb8 00       		.ascii	"\000"
 5572 0cb9 00000000 		.space	7
 5572      000000
 5573 0cc0 2C       		.byte	44
 5574 0cc1 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 142


 5575 0cc4 FFFFFFFF 		.word	-1
 5576 0cc8 2E       		.byte	46
 5577 0cc9 000000   		.space	3
 5578 0ccc FFFFFFFF 		.word	-1
 5579 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5580 0cd4 00000000 		.space	4
 5581 0cd8 00       		.ascii	"\000"
 5582 0cd9 00000000 		.space	7
 5582      000000
 5583 0ce0 2D       		.byte	45
 5584 0ce1 000000   		.space	3
 5585 0ce4 FFFFFFFF 		.word	-1
 5586 0ce8 2E       		.byte	46
 5587 0ce9 000000   		.space	3
 5588 0cec FFFFFFFF 		.word	-1
 5589 0cf0 43505800 		.ascii	"CPX\000"
 5590 0cf4 00000000 		.space	4
 5591 0cf8 00       		.ascii	"\000"
 5592 0cf9 00000000 		.space	7
 5592      000000
 5593 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5593      70686100 
 5594 0d08 00000000 		.space	7
 5594      000000
 5595 0d0f 00       		.space	1
 5596 0d10 34       		.byte	52
 5597 0d11 000000   		.space	3
 5598 0d14 78010000 		.word	376
 5599 0d18 34       		.byte	52
 5600 0d19 000000   		.space	3
 5601 0d1c 6D010000 		.word	365
 5602 0d20 582D3EA0 		.ascii	"X->\240\000"
 5602      00
 5603 0d25 000000   		.space	3
 5604 0d28 A054494D 		.ascii	"\240TIME\000"
 5604      4500
 5605 0d2e 0000     		.space	2
 5606 0d30 34       		.byte	52
 5607 0d31 000000   		.space	3
 5608 0d34 77010000 		.word	375
 5609 0d38 34       		.byte	52
 5610 0d39 000000   		.space	3
 5611 0d3c 6C010000 		.word	364
 5612 0d40 A02D3E58 		.ascii	"\240->X\000"
 5612      00
 5613 0d45 000000   		.space	3
 5614 0d48 A0444154 		.ascii	"\240DATE\000"
 5614      4500
 5615 0d4e 0000     		.space	2
 5616 0d50 34       		.byte	52
 5617 0d51 000000   		.space	3
 5618 0d54 00480000 		.word	18432
 5619 0d58 34       		.byte	52
 5620 0d59 000000   		.space	3
 5621 0d5c 6A010000 		.word	362
 5622 0d60 A0495000 		.ascii	"\240IP\000"
 5623 0d64 00000000 		.space	4
ARM GAS  /tmp/cc7no4fx.s 			page 143


 5624 0d68 A0444159 		.ascii	"\240DAY\000"
 5624      00
 5625 0d6d 000000   		.space	3
 5626 0d70 34       		.byte	52
 5627 0d71 000000   		.space	3
 5628 0d74 76010000 		.word	374
 5629 0d78 34       		.byte	52
 5630 0d79 000000   		.space	3
 5631 0d7c 6B010000 		.word	363
 5632 0d80 A04C454E 		.ascii	"\240LENG\000"
 5632      4700
 5633 0d86 0000     		.space	2
 5634 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5634      4800
 5635 0d8e 0000     		.space	2
 5636 0d90 2C       		.byte	44
 5637 0d91 000000   		.space	3
 5638 0d94 FFFFFFFF 		.word	-1
 5639 0d98 2C       		.byte	44
 5640 0d99 000000   		.space	3
 5641 0d9c 01000000 		.word	1
 5642 0da0 2D2D0D00 		.ascii	"--\015\000"
 5643 0da4 00000000 		.space	4
 5644 0da8 00       		.ascii	"\000"
 5645 0da9 00000000 		.space	7
 5645      000000
 5646 0db0 2D       		.byte	45
 5647 0db1 000000   		.space	3
 5648 0db4 FFFFFFFF 		.word	-1
 5649 0db8 2D       		.byte	45
 5650 0db9 000000   		.space	3
 5651 0dbc 01000000 		.word	1
 5652 0dc0 43505800 		.ascii	"CPX\000"
 5653 0dc4 00000000 		.space	4
 5654 0dc8 00       		.ascii	"\000"
 5655 0dc9 00000000 		.space	7
 5655      000000
 5656 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 5656      4C6F636B 
 5656      00
 5657 0dd9 00000000 		.space	6
 5657      0000
 5658 0ddf 00       		.space	1
 5659 0de0 18       		.byte	24
 5660 0de1 000000   		.space	3
 5661 0de4 02000000 		.word	2
 5662 0de8 04       		.byte	4
 5663 0de9 000000   		.space	3
 5664 0dec 02000000 		.word	2
 5665 0df0 504F4C41 		.ascii	"POLAR\000"
 5665      5200
 5666 0df6 0000     		.space	2
 5667 0df8 0D205000 		.ascii	"\015 P\000"
 5668 0dfc 00000000 		.space	4
 5669 0e00 18       		.byte	24
 5670 0e01 000000   		.space	3
 5671 0e04 01000000 		.word	1
ARM GAS  /tmp/cc7no4fx.s 			page 144


 5672 0e08 04       		.byte	4
 5673 0e09 000000   		.space	3
 5674 0e0c 01000000 		.word	1
 5675 0e10 52454354 		.ascii	"RECT\000"
 5675      00
 5676 0e15 000000   		.space	3
 5677 0e18 0D205200 		.ascii	"\015 R\000"
 5678 0e1c 00000000 		.space	4
 5679 0e20 0E       		.byte	14
 5680 0e21 000000   		.space	3
 5681 0e24 01000000 		.word	1
 5682 0e28 0E       		.byte	14
 5683 0e29 000000   		.space	3
 5684 0e2c 03000000 		.word	3
 5685 0e30 43485306 		.ascii	"CHS\006y\000"
 5685      7900
 5686 0e36 0000     		.space	2
 5687 0e38 43485306 		.ascii	"CHS\006x\000"
 5687      7800
 5688 0e3e 0000     		.space	2
 5689 0e40 0D       		.byte	13
 5690 0e41 000000   		.space	3
 5691 0e44 01000000 		.word	1
 5692 0e48 00       		.byte	0
 5693 0e49 000000   		.space	3
 5694 0e4c 01000000 		.word	1
 5695 0e50 78177900 		.ascii	"x\027y\000"
 5696 0e54 00000000 		.space	4
 5697 0e58 48595000 		.ascii	"HYP\000"
 5698 0e5c 00000000 		.space	4
 5699 0e60 2C       		.byte	44
 5700 0e61 000000   		.space	3
 5701 0e64 FFFFFFFF 		.word	-1
 5702 0e68 0F       		.byte	15
 5703 0e69 000000   		.space	3
 5704 0e6c 01000000 		.word	1
 5705 0e70 2D2D0D00 		.ascii	"--\015\000"
 5706 0e74 00000000 		.space	4
 5707 0e78 1106AF00 		.ascii	"\021\006\257\000"
 5708 0e7c 00000000 		.space	4
 5709 0e80 2D       		.byte	45
 5710 0e81 000000   		.space	3
 5711 0e84 FFFFFFFF 		.word	-1
 5712 0e88 0C       		.byte	12
 5713 0e89 000000   		.space	3
 5714 0e8c 01000000 		.word	1
 5715 0e90 43505800 		.ascii	"CPX\000"
 5716 0e94 00000000 		.space	4
 5717 0e98 1106434E 		.ascii	"\021\006CNST\000"
 5717      535400
 5718 0e9f 00       		.space	1
 5719 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 5719      6561725F 
 5719      4300
 5720 0eaa 00000000 		.space	5
 5720      00
 5721 0eaf 00       		.space	1
ARM GAS  /tmp/cc7no4fx.s 			page 145


 5722 0eb0 2E       		.byte	46
 5723 0eb1 000000   		.space	3
 5724 0eb4 FFFFFFFF 		.word	-1
 5725 0eb8 2E       		.byte	46
 5726 0eb9 000000   		.space	3
 5727 0ebc FFFFFFFF 		.word	-1
 5728 0ec0 00       		.ascii	"\000"
 5729 0ec1 00000000 		.space	7
 5729      000000
 5730 0ec8 00       		.ascii	"\000"
 5731 0ec9 00000000 		.space	7
 5731      000000
 5732 0ed0 2E       		.byte	46
 5733 0ed1 000000   		.space	3
 5734 0ed4 FFFFFFFF 		.word	-1
 5735 0ed8 2E       		.byte	46
 5736 0ed9 000000   		.space	3
 5737 0edc FFFFFFFF 		.word	-1
 5738 0ee0 00       		.ascii	"\000"
 5739 0ee1 00000000 		.space	7
 5739      000000
 5740 0ee8 00       		.ascii	"\000"
 5741 0ee9 00000000 		.space	7
 5741      000000
 5742 0ef0 10       		.byte	16
 5743 0ef1 000000   		.space	3
 5744 0ef4 03000000 		.word	3
 5745 0ef8 34       		.byte	52
 5746 0ef9 000000   		.space	3
 5747 0efc 74010000 		.word	372
 5748 0f00 434C7800 		.ascii	"CLx\000"
 5749 0f04 00000000 		.space	4
 5750 0f08 434C06A0 		.ascii	"CL\006\240\000"
 5750      00
 5751 0f0d 000000   		.space	3
 5752 0f10 34       		.byte	52
 5753 0f11 000000   		.space	3
 5754 0f14 40010000 		.word	320
 5755 0f18 2E       		.byte	46
 5756 0f19 000000   		.space	3
 5757 0f1c FFFFFFFF 		.word	-1
 5758 0f20 434C5374 		.ascii	"CLStk\000"
 5758      6B00
 5759 0f26 0000     		.space	2
 5760 0f28 00       		.ascii	"\000"
 5761 0f29 00000000 		.space	7
 5761      000000
 5762 0f30 2C       		.byte	44
 5763 0f31 000000   		.space	3
 5764 0f34 FFFFFFFF 		.word	-1
 5765 0f38 2E       		.byte	46
 5766 0f39 000000   		.space	3
 5767 0f3c FFFFFFFF 		.word	-1
 5768 0f40 2D2D0D00 		.ascii	"--\015\000"
 5769 0f44 00000000 		.space	4
 5770 0f48 00       		.ascii	"\000"
 5771 0f49 00000000 		.space	7
ARM GAS  /tmp/cc7no4fx.s 			page 146


 5771      000000
 5772 0f50 2D       		.byte	45
 5773 0f51 000000   		.space	3
 5774 0f54 FFFFFFFF 		.word	-1
 5775 0f58 2E       		.byte	46
 5776 0f59 000000   		.space	3
 5777 0f5c FFFFFFFF 		.word	-1
 5778 0f60 43505800 		.ascii	"CPX\000"
 5779 0f64 00000000 		.space	4
 5780 0f68 00       		.ascii	"\000"
 5781 0f69 00000000 		.space	7
 5781      000000
 5782 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 5782      61705F43 
 5782      00
 5783 0f79 00000000 		.space	6
 5783      0000
 5784 0f7f 00       		.space	1
 5785 0f80 0D       		.byte	13
 5786 0f81 000000   		.space	3
 5787 0f84 01000000 		.word	1
 5788 0f88 2E       		.byte	46
 5789 0f89 000000   		.space	3
 5790 0f8c FFFFFFFF 		.word	-1
 5791 0f90 53686F77 		.ascii	"Show\016\000"
 5791      0E00
 5792 0f96 0000     		.space	2
 5793 0f98 00       		.ascii	"\000"
 5794 0f99 00000000 		.space	7
 5794      000000
 5795 0fa0 0D       		.byte	13
 5796 0fa1 000000   		.space	3
 5797 0fa4 02000000 		.word	2
 5798 0fa8 2E       		.byte	46
 5799 0fa9 000000   		.space	3
 5800 0fac FFFFFFFF 		.word	-1
 5801 0fb0 53686F77 		.ascii	"Show\015\000"
 5801      0D00
 5802 0fb6 0000     		.space	2
 5803 0fb8 00       		.ascii	"\000"
 5804 0fb9 00000000 		.space	7
 5804      000000
 5805 0fc0 0D       		.byte	13
 5806 0fc1 000000   		.space	3
 5807 0fc4 03000000 		.word	3
 5808 0fc8 2E       		.byte	46
 5809 0fc9 000000   		.space	3
 5810 0fcc FFFFFFFF 		.word	-1
 5811 0fd0 78173F00 		.ascii	"x\027?\000"
 5812 0fd4 00000000 		.space	4
 5813 0fd8 00       		.ascii	"\000"
 5814 0fd9 00000000 		.space	7
 5814      000000
 5815 0fe0 2E       		.byte	46
 5816 0fe1 000000   		.space	3
 5817 0fe4 FFFFFFFF 		.word	-1
 5818 0fe8 2E       		.byte	46
ARM GAS  /tmp/cc7no4fx.s 			page 147


 5819 0fe9 000000   		.space	3
 5820 0fec FFFFFFFF 		.word	-1
 5821 0ff0 00       		.ascii	"\000"
 5822 0ff1 00000000 		.space	7
 5822      000000
 5823 0ff8 00       		.ascii	"\000"
 5824 0ff9 00000000 		.space	7
 5824      000000
 5825 1000 2C       		.byte	44
 5826 1001 000000   		.space	3
 5827 1004 FFFFFFFF 		.word	-1
 5828 1008 2E       		.byte	46
 5829 1009 000000   		.space	3
 5830 100c FFFFFFFF 		.word	-1
 5831 1010 2D2D0D00 		.ascii	"--\015\000"
 5832 1014 00000000 		.space	4
 5833 1018 00       		.ascii	"\000"
 5834 1019 00000000 		.space	7
 5834      000000
 5835 1020 2D       		.byte	45
 5836 1021 000000   		.space	3
 5837 1024 FFFFFFFF 		.word	-1
 5838 1028 2E       		.byte	46
 5839 1029 000000   		.space	3
 5840 102c FFFFFFFF 		.word	-1
 5841 1030 43505800 		.ascii	"CPX\000"
 5842 1034 00000000 		.space	4
 5843 1038 00       		.ascii	"\000"
 5844 1039 00000000 		.space	7
 5844      000000
 5845 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 5845      726F775F 
 5845      4300
 5846 104a 00000000 		.space	5
 5846      00
 5847 104f 00       		.space	1
 5848 1050 2E       		.byte	46
 5849 1051 000000   		.space	3
 5850 1054 FFFFFFFF 		.word	-1
 5851 1058 06       		.byte	6
 5852 1059 000000   		.space	3
 5853 105c 02000000 		.word	2
 5854 1060 00       		.ascii	"\000"
 5855 1061 00000000 		.space	7
 5855      000000
 5856 1068 44454700 		.ascii	"DEG\000"
 5857 106c 00000000 		.space	4
 5858 1070 2E       		.byte	46
 5859 1071 000000   		.space	3
 5860 1074 FFFFFFFF 		.word	-1
 5861 1078 07       		.byte	7
 5862 1079 000000   		.space	3
 5863 107c 02000000 		.word	2
 5864 1080 00       		.ascii	"\000"
 5865 1081 00000000 		.space	7
 5865      000000
 5866 1088 52414400 		.ascii	"RAD\000"
ARM GAS  /tmp/cc7no4fx.s 			page 148


 5867 108c 00000000 		.space	4
 5868 1090 2E       		.byte	46
 5869 1091 000000   		.space	3
 5870 1094 FFFFFFFF 		.word	-1
 5871 1098 08       		.byte	8
 5872 1099 000000   		.space	3
 5873 109c 02000000 		.word	2
 5874 10a0 00       		.ascii	"\000"
 5875 10a1 00000000 		.space	7
 5875      000000
 5876 10a8 47726164 		.ascii	"Grad\000"
 5876      00
 5877 10ad 000000   		.space	3
 5878 10b0 2E       		.byte	46
 5879 10b1 000000   		.space	3
 5880 10b4 FFFFFFFF 		.word	-1
 5881 10b8 06       		.byte	6
 5882 10b9 000000   		.space	3
 5883 10bc 01000000 		.word	1
 5884 10c0 00       		.ascii	"\000"
 5885 10c1 00000000 		.space	7
 5885      000000
 5886 10c8 0D484D53 		.ascii	"\015HMS\000"
 5886      00
 5887 10cd 000000   		.space	3
 5888 10d0 2C       		.byte	44
 5889 10d1 000000   		.space	3
 5890 10d4 FFFFFFFF 		.word	-1
 5891 10d8 07       		.byte	7
 5892 10d9 000000   		.space	3
 5893 10dc 01000000 		.word	1
 5894 10e0 2D2D0D00 		.ascii	"--\015\000"
 5895 10e4 00000000 		.space	4
 5896 10e8 484D530D 		.ascii	"HMS\015\000"
 5896      00
 5897 10ed 000000   		.space	3
 5898 10f0 2D       		.byte	45
 5899 10f1 000000   		.space	3
 5900 10f4 FFFFFFFF 		.word	-1
 5901 10f8 2E       		.byte	46
 5902 10f9 000000   		.space	3
 5903 10fc FFFFFFFF 		.word	-1
 5904 1100 43505800 		.ascii	"CPX\000"
 5905 1104 00000000 		.space	4
 5906 1108 00       		.ascii	"\000"
 5907 1109 00000000 		.space	7
 5907      000000
 5908 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 5908      6F625F43 
 5908      00
 5909 1119 00000000 		.space	6
 5909      0000
 5910 111f 00       		.space	1
 5911 1120 18       		.byte	24
 5912 1121 000000   		.space	3
 5913 1124 03000000 		.word	3
 5914 1128 34       		.byte	52
ARM GAS  /tmp/cc7no4fx.s 			page 149


 5915 1129 000000   		.space	3
 5916 112c 31050000 		.word	1329
 5917 1130 14062100 		.ascii	"\024\006!\000"
 5918 1134 00000000 		.space	4
 5919 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 5919      068200
 5920 113f 00       		.space	1
 5921 1140 34       		.byte	52
 5922 1141 000000   		.space	3
 5923 1144 12060000 		.word	1554
 5924 1148 2E       		.byte	46
 5925 1149 000000   		.space	3
 5926 114c FFFFFFFF 		.word	-1
 5927 1150 14064379 		.ascii	"\024\006Cy,x\000"
 5927      2C7800
 5928 1157 00       		.space	1
 5929 1158 00       		.ascii	"\000"
 5930 1159 00000000 		.space	7
 5930      000000
 5931 1160 34       		.byte	52
 5932 1161 000000   		.space	3
 5933 1164 13060000 		.word	1555
 5934 1168 2E       		.byte	46
 5935 1169 000000   		.space	3
 5936 116c FFFFFFFF 		.word	-1
 5937 1170 14065079 		.ascii	"\024\006Py,x\000"
 5937      2C7800
 5938 1177 00       		.space	1
 5939 1178 00       		.ascii	"\000"
 5940 1179 00000000 		.space	7
 5940      000000
 5941 1180 2E       		.byte	46
 5942 1181 000000   		.space	3
 5943 1184 FFFFFFFF 		.word	-1
 5944 1188 2E       		.byte	46
 5945 1189 000000   		.space	3
 5946 118c FFFFFFFF 		.word	-1
 5947 1190 00       		.ascii	"\000"
 5948 1191 00000000 		.space	7
 5948      000000
 5949 1198 00       		.ascii	"\000"
 5950 1199 00000000 		.space	7
 5950      000000
 5951 11a0 2C       		.byte	44
 5952 11a1 000000   		.space	3
 5953 11a4 FFFFFFFF 		.word	-1
 5954 11a8 2E       		.byte	46
 5955 11a9 000000   		.space	3
 5956 11ac FFFFFFFF 		.word	-1
 5957 11b0 2D2D0D00 		.ascii	"--\015\000"
 5958 11b4 00000000 		.space	4
 5959 11b8 00       		.ascii	"\000"
 5960 11b9 00000000 		.space	7
 5960      000000
 5961 11c0 2D       		.byte	45
 5962 11c1 000000   		.space	3
 5963 11c4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc7no4fx.s 			page 150


 5964 11c8 2E       		.byte	46
 5965 11c9 000000   		.space	3
 5966 11cc FFFFFFFF 		.word	-1
 5967 11d0 43505800 		.ascii	"CPX\000"
 5968 11d4 00000000 		.space	4
 5969 11d8 00       		.ascii	"\000"
 5970 11d9 00000000 		.space	7
 5970      000000
 5971 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 5971      616E6B32 
 5971      5F4300
 5972 11eb 00000000 		.space	4
 5973 11ef 00       		.space	1
 5974 11f0 00       		.byte	0
 5975 11f1 000000   		.space	3
 5976 11f4 01000000 		.word	1
 5977 11f8 2E       		.byte	46
 5978 11f9 000000   		.space	3
 5979 11fc FFFFFFFF 		.word	-1
 5980 1200 48595000 		.ascii	"HYP\000"
 5981 1204 00000000 		.space	4
 5982 1208 00       		.ascii	"\000"
 5983 1209 00000000 		.space	7
 5983      000000
 5984 1210 16       		.byte	22
 5985 1211 000000   		.space	3
 5986 1214 01000000 		.word	1
 5987 1218 2E       		.byte	46
 5988 1219 000000   		.space	3
 5989 121c FFFFFFFF 		.word	-1
 5990 1220 312F5800 		.ascii	"1/X\000"
 5991 1224 00000000 		.space	4
 5992 1228 00       		.ascii	"\000"
 5993 1229 00000000 		.space	7
 5993      000000
 5994 1230 1C       		.byte	28
 5995 1231 000000   		.space	3
 5996 1234 01000000 		.word	1
 5997 1238 2E       		.byte	46
 5998 1239 000000   		.space	3
 5999 123c FFFFFFFF 		.word	-1
 6000 1240 035800   		.ascii	"\003X\000"
 6001 1243 00000000 		.space	5
 6001      00
 6002 1248 00       		.ascii	"\000"
 6003 1249 00000000 		.space	7
 6003      000000
 6004 1250 13       		.byte	19
 6005 1251 000000   		.space	3
 6006 1254 02000000 		.word	2
 6007 1258 2E       		.byte	46
 6008 1259 000000   		.space	3
 6009 125c FFFFFFFF 		.word	-1
 6010 1260 4C4F4700 		.ascii	"LOG\000"
 6011 1264 00000000 		.space	4
 6012 1268 00       		.ascii	"\000"
 6013 1269 00000000 		.space	7
ARM GAS  /tmp/cc7no4fx.s 			page 151


 6013      000000
 6014 1270 2C       		.byte	44
 6015 1271 000000   		.space	3
 6016 1274 FFFFFFFF 		.word	-1
 6017 1278 2E       		.byte	46
 6018 1279 000000   		.space	3
 6019 127c FFFFFFFF 		.word	-1
 6020 1280 2D2D0D00 		.ascii	"--\015\000"
 6021 1284 00000000 		.space	4
 6022 1288 00       		.ascii	"\000"
 6023 1289 00000000 		.space	7
 6023      000000
 6024 1290 2D       		.byte	45
 6025 1291 000000   		.space	3
 6026 1294 FFFFFFFF 		.word	-1
 6027 1298 2E       		.byte	46
 6028 1299 000000   		.space	3
 6029 129c FFFFFFFF 		.word	-1
 6030 12a0 43505800 		.ascii	"CPX\000"
 6031 12a4 00000000 		.space	4
 6032 12a8 00       		.ascii	"\000"
 6033 12a9 00000000 		.space	7
 6033      000000
 6034 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6034      73635F43 
 6034      00
 6035 12b9 00000000 		.space	6
 6035      0000
 6036 12bf 00       		.space	1
 6037 12c0 25       		.byte	37
 6038 12c1 000000   		.space	3
 6039 12c4 01000000 		.word	1
 6040 12c8 14       		.byte	20
 6041 12c9 000000   		.space	3
 6042 12cc 01000000 		.word	1
 6043 12d0 7C587C00 		.ascii	"|X|\000"
 6044 12d4 00000000 		.space	4
 6045 12d8 329C00   		.ascii	"2\234\000"
 6046 12db 00000000 		.space	5
 6046      00
 6047 12e0 25       		.byte	37
 6048 12e1 000000   		.space	3
 6049 12e4 02000000 		.word	2
 6050 12e8 14       		.byte	20
 6051 12e9 000000   		.space	3
 6052 12ec 02000000 		.word	2
 6053 12f0 524E4400 		.ascii	"RND\000"
 6054 12f4 00000000 		.space	4
 6055 12f8 4C6F67BA 		.ascii	"Log\272\000"
 6055      00
 6056 12fd 000000   		.space	3
 6057 1300 26       		.byte	38
 6058 1301 000000   		.space	3
 6059 1304 01000000 		.word	1
 6060 1308 15       		.byte	21
 6061 1309 000000   		.space	3
 6062 130c 02000000 		.word	2
ARM GAS  /tmp/cc7no4fx.s 			page 152


 6063 1310 300D5265 		.ascii	"0\015Re\000"
 6063      00
 6064 1315 000000   		.space	3
 6065 1318 4C6F678B 		.ascii	"Log\213\000"
 6065      00
 6066 131d 000000   		.space	3
 6067 1320 26       		.byte	38
 6068 1321 000000   		.space	3
 6069 1324 02000000 		.word	2
 6070 1328 16       		.byte	22
 6071 1329 000000   		.space	3
 6072 132c 02000000 		.word	2
 6073 1330 300D496D 		.ascii	"0\015Im\000"
 6073      00
 6074 1335 000000   		.space	3
 6075 1338 7C7C656C 		.ascii	"||el\000"
 6075      00
 6076 133d 000000   		.space	3
 6077 1340 2C       		.byte	44
 6078 1341 000000   		.space	3
 6079 1344 FFFFFFFF 		.word	-1
 6080 1348 1C       		.byte	28
 6081 1349 000000   		.space	3
 6082 134c 03000000 		.word	3
 6083 1350 2D2D0D00 		.ascii	"--\015\000"
 6084 1354 00000000 		.space	4
 6085 1358 2E1C00   		.ascii	".\034\000"
 6086 135b 00000000 		.space	5
 6086      00
 6087 1360 2D       		.byte	45
 6088 1361 000000   		.space	3
 6089 1364 FFFFFFFF 		.word	-1
 6090 1368 16       		.byte	22
 6091 1369 000000   		.space	3
 6092 136c 03000000 		.word	3
 6093 1370 43505800 		.ascii	"CPX\000"
 6094 1374 00000000 		.space	4
 6095 1378 2E2F00   		.ascii	"./\000"
 6096 137b 00000000 		.space	5
 6096      00
 6097              		.section	.rodata.mapping_alpha.11070,"a"
 6098              		.align	2
 6099              		.set	.LANCHOR16,. + 0
 6102              	mapping_alpha.11070:
 6103 0000 63       		.byte	99
 6104 0001 000000   		.space	3
 6105 0004 FFFFFFFF 		.word	-1
 6106 0008 00       		.byte	0
 6107 0009 000000   		.space	3
 6108 000c FFFFFFFF 		.word	-1
 6109 0010 01       		.byte	1
 6110 0011 000000   		.space	3
 6111 0014 FFFFFFFF 		.word	-1
 6112 0018 02       		.byte	2
 6113 0019 000000   		.space	3
 6114 001c FFFFFFFF 		.word	-1
 6115 0020 03       		.byte	3
ARM GAS  /tmp/cc7no4fx.s 			page 153


 6116 0021 000000   		.space	3
 6117 0024 FFFFFFFF 		.word	-1
 6118 0028 04       		.byte	4
 6119 0029 000000   		.space	3
 6120 002c FFFFFFFF 		.word	-1
 6121 0030 05       		.byte	5
 6122 0031 000000   		.space	3
 6123 0034 FFFFFFFF 		.word	-1
 6124 0038 06       		.byte	6
 6125 0039 000000   		.space	3
 6126 003c FFFFFFFF 		.word	-1
 6127 0040 07       		.byte	7
 6128 0041 000000   		.space	3
 6129 0044 FFFFFFFF 		.word	-1
 6130 0048 08       		.byte	8
 6131 0049 000000   		.space	3
 6132 004c FFFFFFFF 		.word	-1
 6133 0050 09       		.byte	9
 6134 0051 000000   		.space	3
 6135 0054 FFFFFFFF 		.word	-1
 6136 0058 0A       		.byte	10
 6137 0059 000000   		.space	3
 6138 005c FFFFFFFF 		.word	-1
 6139 0060 0B       		.byte	11
 6140 0061 000000   		.space	3
 6141 0064 FFFFFFFF 		.word	-1
 6142 0068 0C       		.byte	12
 6143 0069 000000   		.space	3
 6144 006c FFFFFFFF 		.word	-1
 6145 0070 0D       		.byte	13
 6146 0071 000000   		.space	3
 6147 0074 FFFFFFFF 		.word	-1
 6148 0078 0E       		.byte	14
 6149 0079 000000   		.space	3
 6150 007c FFFFFFFF 		.word	-1
 6151 0080 0F       		.byte	15
 6152 0081 000000   		.space	3
 6153 0084 FFFFFFFF 		.word	-1
 6154 0088 10       		.byte	16
 6155 0089 000000   		.space	3
 6156 008c FFFFFFFF 		.word	-1
 6157 0090 12       		.byte	18
 6158 0091 000000   		.space	3
 6159 0094 FFFFFFFF 		.word	-1
 6160 0098 13       		.byte	19
 6161 0099 000000   		.space	3
 6162 009c FFFFFFFF 		.word	-1
 6163 00a0 14       		.byte	20
 6164 00a1 000000   		.space	3
 6165 00a4 FFFFFFFF 		.word	-1
 6166 00a8 15       		.byte	21
 6167 00a9 000000   		.space	3
 6168 00ac FFFFFFFF 		.word	-1
 6169 00b0 16       		.byte	22
 6170 00b1 000000   		.space	3
 6171 00b4 FFFFFFFF 		.word	-1
 6172 00b8 18       		.byte	24
ARM GAS  /tmp/cc7no4fx.s 			page 154


 6173 00b9 000000   		.space	3
 6174 00bc FFFFFFFF 		.word	-1
 6175 00c0 19       		.byte	25
 6176 00c1 000000   		.space	3
 6177 00c4 FFFFFFFF 		.word	-1
 6178 00c8 1A       		.byte	26
 6179 00c9 000000   		.space	3
 6180 00cc FFFFFFFF 		.word	-1
 6181 00d0 1B       		.byte	27
 6182 00d1 000000   		.space	3
 6183 00d4 FFFFFFFF 		.word	-1
 6184 00d8 1C       		.byte	28
 6185 00d9 000000   		.space	3
 6186 00dc FFFFFFFF 		.word	-1
 6187 00e0 1E       		.byte	30
 6188 00e1 000000   		.space	3
 6189 00e4 FFFFFFFF 		.word	-1
 6190 00e8 1F       		.byte	31
 6191 00e9 000000   		.space	3
 6192 00ec FFFFFFFF 		.word	-1
 6193 00f0 20       		.byte	32
 6194 00f1 000000   		.space	3
 6195 00f4 FFFFFFFF 		.word	-1
 6196 00f8 21       		.byte	33
 6197 00f9 000000   		.space	3
 6198 00fc FFFFFFFF 		.word	-1
 6199 0100 22       		.byte	34
 6200 0101 000000   		.space	3
 6201 0104 FFFFFFFF 		.word	-1
 6202 0108 24       		.byte	36
 6203 0109 000000   		.space	3
 6204 010c FFFFFFFF 		.word	-1
 6205 0110 25       		.byte	37
 6206 0111 000000   		.space	3
 6207 0114 FFFFFFFF 		.word	-1
 6208 0118 26       		.byte	38
 6209 0119 000000   		.space	3
 6210 011c FFFFFFFF 		.word	-1
 6211 0120 27       		.byte	39
 6212 0121 000000   		.space	3
 6213 0124 FFFFFFFF 		.word	-1
 6214 0128 28       		.byte	40
 6215 0129 000000   		.space	3
 6216 012c FFFFFFFF 		.word	-1
 6217 0130 2E       		.byte	46
 6218 0131 000000   		.space	3
 6219 0134 FFFFFFFF 		.word	-1
 6220 0138 2E       		.byte	46
 6221 0139 000000   		.space	3
 6222 013c FFFFFFFF 		.word	-1
 6223 0140 2E       		.byte	46
 6224 0141 000000   		.space	3
 6225 0144 FFFFFFFF 		.word	-1
 6226 0148 2E       		.byte	46
 6227 0149 000000   		.space	3
 6228 014c FFFFFFFF 		.word	-1
 6229 0150 2C       		.byte	44
ARM GAS  /tmp/cc7no4fx.s 			page 155


 6230 0151 000000   		.space	3
 6231 0154 FFFFFFFF 		.word	-1
 6232 0158 2D       		.byte	45
 6233 0159 000000   		.space	3
 6234 015c FFFFFFFF 		.word	-1
 6235 0160 2E       		.byte	46
 6236 0161 000000   		.space	3
 6237 0164 FFFFFFFF 		.word	-1
 6238 0168 2E       		.byte	46
 6239 0169 000000   		.space	3
 6240 016c FFFFFFFF 		.word	-1
 6241 0170 2E       		.byte	46
 6242 0171 000000   		.space	3
 6243 0174 FFFFFFFF 		.word	-1
 6244              		.section	.rodata.mapping_fshift.11068,"a"
 6245              		.align	2
 6246              		.set	.LANCHOR14,. + 0
 6249              	mapping_fshift.11068:
 6250 0000 63       		.byte	99
 6251 0001 000000   		.space	3
 6252 0004 FFFFFFFF 		.word	-1
 6253 0008 22       		.byte	34
 6254 0009 000000   		.space	3
 6255 000c 03000000 		.word	3
 6256 0010 15       		.byte	21
 6257 0011 000000   		.space	3
 6258 0014 01000000 		.word	1
 6259 0018 1C       		.byte	28
 6260 0019 000000   		.space	3
 6261 001c 02000000 		.word	2
 6262 0020 13       		.byte	19
 6263 0021 000000   		.space	3
 6264 0024 01000000 		.word	1
 6265 0028 12       		.byte	18
 6266 0029 000000   		.space	3
 6267 002c 01000000 		.word	1
 6268 0030 12       		.byte	18
 6269 0031 000000   		.space	3
 6270 0034 03000000 		.word	3
 6271 0038 31       		.byte	49
 6272 0039 000000   		.space	3
 6273 003c 0F000000 		.word	15
 6274 0040 22       		.byte	34
 6275 0041 000000   		.space	3
 6276 0044 01000000 		.word	1
 6277 0048 0F       		.byte	15
 6278 0049 000000   		.space	3
 6279 004c 03000000 		.word	3
 6280 0050 01       		.byte	1
 6281 0051 000000   		.space	3
 6282 0054 02000000 		.word	2
 6283 0058 02       		.byte	2
 6284 0059 000000   		.space	3
 6285 005c 02000000 		.word	2
 6286 0060 03       		.byte	3
 6287 0061 000000   		.space	3
 6288 0064 02000000 		.word	2
ARM GAS  /tmp/cc7no4fx.s 			page 156


 6289 0068 0C       		.byte	12
 6290 0069 000000   		.space	3
 6291 006c 01000000 		.word	1
 6292 0070 31       		.byte	49
 6293 0071 000000   		.space	3
 6294 0074 01000000 		.word	1
 6295 0078 2F       		.byte	47
 6296 0079 000000   		.space	3
 6297 007c 04000000 		.word	4
 6298 0080 2F       		.byte	47
 6299 0081 000000   		.space	3
 6300 0084 02000000 		.word	2
 6301 0088 2F       		.byte	47
 6302 0089 000000   		.space	3
 6303 008c 01000000 		.word	1
 6304 0090 18       		.byte	24
 6305 0091 000000   		.space	3
 6306 0094 00000000 		.word	0
 6307 0098 20       		.byte	32
 6308 0099 000000   		.space	3
 6309 009c 01000000 		.word	1
 6310 00a0 2F       		.byte	47
 6311 00a1 000000   		.space	3
 6312 00a4 0E000000 		.word	14
 6313 00a8 1C       		.byte	28
 6314 00a9 000000   		.space	3
 6315 00ac 03000000 		.word	3
 6316 00b0 2F       		.byte	47
 6317 00b1 000000   		.space	3
 6318 00b4 0C000000 		.word	12
 6319 00b8 1E       		.byte	30
 6320 00b9 000000   		.space	3
 6321 00bc 00000000 		.word	0
 6322 00c0 2F       		.byte	47
 6323 00c1 000000   		.space	3
 6324 00c4 03000000 		.word	3
 6325 00c8 04       		.byte	4
 6326 00c9 000000   		.space	3
 6327 00cc 03000000 		.word	3
 6328 00d0 2F       		.byte	47
 6329 00d1 000000   		.space	3
 6330 00d4 0A000000 		.word	10
 6331 00d8 2F       		.byte	47
 6332 00d9 000000   		.space	3
 6333 00dc 0B000000 		.word	11
 6334 00e0 2A       		.byte	42
 6335 00e1 000000   		.space	3
 6336 00e4 00000000 		.word	0
 6337 00e8 31       		.byte	49
 6338 00e9 000000   		.space	3
 6339 00ec 0D000000 		.word	13
 6340 00f0 2F       		.byte	47
 6341 00f1 000000   		.space	3
 6342 00f4 63000000 		.word	99
 6343 00f8 20       		.byte	32
 6344 00f9 000000   		.space	3
 6345 00fc 03000000 		.word	3
ARM GAS  /tmp/cc7no4fx.s 			page 157


 6346 0100 2E       		.byte	46
 6347 0101 000000   		.space	3
 6348 0104 00000000 		.word	0
 6349 0108 24       		.byte	36
 6350 0109 000000   		.space	3
 6351 010c 03000000 		.word	3
 6352 0110 2F       		.byte	47
 6353 0111 000000   		.space	3
 6354 0114 08000000 		.word	8
 6355 0118 0D       		.byte	13
 6356 0119 000000   		.space	3
 6357 011c 01000000 		.word	1
 6358 0120 27       		.byte	39
 6359 0121 000000   		.space	3
 6360 0124 03000000 		.word	3
 6361 0128 06       		.byte	6
 6362 0129 000000   		.space	3
 6363 012c 03000000 		.word	3
 6364 0130 2E       		.byte	46
 6365 0131 000000   		.space	3
 6366 0134 00000000 		.word	0
 6367 0138 2E       		.byte	46
 6368 0139 000000   		.space	3
 6369 013c 00000000 		.word	0
 6370 0140 2E       		.byte	46
 6371 0141 000000   		.space	3
 6372 0144 00000000 		.word	0
 6373 0148 2E       		.byte	46
 6374 0149 000000   		.space	3
 6375 014c 00000000 		.word	0
 6376 0150 2E       		.byte	46
 6377 0151 000000   		.space	3
 6378 0154 00000000 		.word	0
 6379 0158 2E       		.byte	46
 6380 0159 000000   		.space	3
 6381 015c 00000000 		.word	0
 6382 0160 2E       		.byte	46
 6383 0161 000000   		.space	3
 6384 0164 00000000 		.word	0
 6385 0168 2F       		.byte	47
 6386 0169 000000   		.space	3
 6387 016c FFFFFFFF 		.word	-1
 6388 0170 2F       		.byte	47
 6389 0171 000000   		.space	3
 6390 0174 05000000 		.word	5
 6391              		.section	.rodata.mapping_gshift.11069,"a"
 6392              		.align	2
 6393              		.set	.LANCHOR17,. + 0
 6396              	mapping_gshift.11069:
 6397 0000 63       		.byte	99
 6398 0001 000000   		.space	3
 6399 0004 FFFFFFFF 		.word	-1
 6400 0008 28       		.byte	40
 6401 0009 000000   		.space	3
 6402 000c 03000000 		.word	3
 6403 0010 16       		.byte	22
 6404 0011 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 158


 6405 0014 01000000 		.word	1
 6406 0018 1C       		.byte	28
 6407 0019 000000   		.space	3
 6408 001c 01000000 		.word	1
 6409 0020 13       		.byte	19
 6410 0021 000000   		.space	3
 6411 0024 02000000 		.word	2
 6412 0028 2E       		.byte	46
 6413 0029 000000   		.space	3
 6414 002c 00000000 		.word	0
 6415 0030 2E       		.byte	46
 6416 0031 000000   		.space	3
 6417 0034 00000000 		.word	0
 6418 0038 2E       		.byte	46
 6419 0039 000000   		.space	3
 6420 003c 00000000 		.word	0
 6421 0040 07       		.byte	7
 6422 0041 000000   		.space	3
 6423 0044 03000000 		.word	3
 6424 0048 08       		.byte	8
 6425 0049 000000   		.space	3
 6426 004c 03000000 		.word	3
 6427 0050 2F       		.byte	47
 6428 0051 000000   		.space	3
 6429 0054 04000000 		.word	4
 6430 0058 2F       		.byte	47
 6431 0059 000000   		.space	3
 6432 005c 04000000 		.word	4
 6433 0060 2F       		.byte	47
 6434 0061 000000   		.space	3
 6435 0064 04000000 		.word	4
 6436 0068 0C       		.byte	12
 6437 0069 000000   		.space	3
 6438 006c 02000000 		.word	2
 6439 0070 2F       		.byte	47
 6440 0071 000000   		.space	3
 6441 0074 06000000 		.word	6
 6442 0078 05       		.byte	5
 6443 0079 000000   		.space	3
 6444 007c 03000000 		.word	3
 6445 0080 2E       		.byte	46
 6446 0081 000000   		.space	3
 6447 0084 00000000 		.word	0
 6448 0088 2E       		.byte	46
 6449 0089 000000   		.space	3
 6450 008c 00000000 		.word	0
 6451 0090 2E       		.byte	46
 6452 0091 000000   		.space	3
 6453 0094 00000000 		.word	0
 6454 0098 2E       		.byte	46
 6455 0099 000000   		.space	3
 6456 009c 00000000 		.word	0
 6457 00a0 2E       		.byte	46
 6458 00a1 000000   		.space	3
 6459 00a4 00000000 		.word	0
 6460 00a8 1B       		.byte	27
 6461 00a9 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 159


 6462 00ac 03000000 		.word	3
 6463 00b0 1A       		.byte	26
 6464 00b1 000000   		.space	3
 6465 00b4 03000000 		.word	3
 6466 00b8 2E       		.byte	46
 6467 00b9 000000   		.space	3
 6468 00bc 00000000 		.word	0
 6469 00c0 2E       		.byte	46
 6470 00c1 000000   		.space	3
 6471 00c4 00000000 		.word	0
 6472 00c8 0C       		.byte	12
 6473 00c9 000000   		.space	3
 6474 00cc 03000000 		.word	3
 6475 00d0 1F       		.byte	31
 6476 00d1 000000   		.space	3
 6477 00d4 03000000 		.word	3
 6478 00d8 19       		.byte	25
 6479 00d9 000000   		.space	3
 6480 00dc 03000000 		.word	3
 6481 00e0 2A       		.byte	42
 6482 00e1 000000   		.space	3
 6483 00e4 FFFFFFFF 		.word	-1
 6484 00e8 2E       		.byte	46
 6485 00e9 000000   		.space	3
 6486 00ec 00000000 		.word	0
 6487 00f0 31       		.byte	49
 6488 00f1 000000   		.space	3
 6489 00f4 0E000000 		.word	14
 6490 00f8 21       		.byte	33
 6491 00f9 000000   		.space	3
 6492 00fc 03000000 		.word	3
 6493 0100 2E       		.byte	46
 6494 0101 000000   		.space	3
 6495 0104 00000000 		.word	0
 6496 0108 24       		.byte	36
 6497 0109 000000   		.space	3
 6498 010c 02000000 		.word	2
 6499 0110 2F       		.byte	47
 6500 0111 000000   		.space	3
 6501 0114 0D000000 		.word	13
 6502 0118 2E       		.byte	46
 6503 0119 000000   		.space	3
 6504 011c 00000000 		.word	0
 6505 0120 2F       		.byte	47
 6506 0121 000000   		.space	3
 6507 0124 07000000 		.word	7
 6508 0128 1E       		.byte	30
 6509 0129 000000   		.space	3
 6510 012c 03000000 		.word	3
 6511 0130 2E       		.byte	46
 6512 0131 000000   		.space	3
 6513 0134 00000000 		.word	0
 6514 0138 2E       		.byte	46
 6515 0139 000000   		.space	3
 6516 013c 00000000 		.word	0
 6517 0140 2E       		.byte	46
 6518 0141 000000   		.space	3
ARM GAS  /tmp/cc7no4fx.s 			page 160


 6519 0144 00000000 		.word	0
 6520 0148 2E       		.byte	46
 6521 0149 000000   		.space	3
 6522 014c 00000000 		.word	0
 6523 0150 2E       		.byte	46
 6524 0151 000000   		.space	3
 6525 0154 00000000 		.word	0
 6526 0158 2E       		.byte	46
 6527 0159 000000   		.space	3
 6528 015c 00000000 		.word	0
 6529 0160 2E       		.byte	46
 6530 0161 000000   		.space	3
 6531 0164 00000000 		.word	0
 6532 0168 2E       		.byte	46
 6533 0169 000000   		.space	3
 6534 016c 00000000 		.word	0
 6535 0170 2E       		.byte	46
 6536 0171 000000   		.space	3
 6537 0174 00000000 		.word	0
 6538              		.section	.rodata.mapping_none.11067,"a"
 6539              		.align	2
 6540              		.set	.LANCHOR13,. + 0
 6543              	mapping_none.11067:
 6544 0000 63       		.byte	99
 6545 0001 000000   		.space	3
 6546 0004 FFFFFFFF 		.word	-1
 6547 0008 00       		.byte	0
 6548 0009 000000   		.space	3
 6549 000c 00000000 		.word	0
 6550 0010 01       		.byte	1
 6551 0011 000000   		.space	3
 6552 0014 00000000 		.word	0
 6553 0018 03       		.byte	3
 6554 0019 000000   		.space	3
 6555 001c 00000000 		.word	0
 6556 0020 13       		.byte	19
 6557 0021 000000   		.space	3
 6558 0024 02000000 		.word	2
 6559 0028 12       		.byte	18
 6560 0029 000000   		.space	3
 6561 002c 02000000 		.word	2
 6562 0030 12       		.byte	18
 6563 0031 000000   		.space	3
 6564 0034 00000000 		.word	0
 6565 0038 06       		.byte	6
 6566 0039 000000   		.space	3
 6567 003c 00000000 		.word	0
 6568 0040 07       		.byte	7
 6569 0041 000000   		.space	3
 6570 0044 00000000 		.word	0
 6571 0048 08       		.byte	8
 6572 0049 000000   		.space	3
 6573 004c 00000000 		.word	0
 6574 0050 01       		.byte	1
 6575 0051 000000   		.space	3
 6576 0054 01000000 		.word	1
 6577 0058 02       		.byte	2
ARM GAS  /tmp/cc7no4fx.s 			page 161


 6578 0059 000000   		.space	3
 6579 005c 01000000 		.word	1
 6580 0060 03       		.byte	3
 6581 0061 000000   		.space	3
 6582 0064 01000000 		.word	1
 6583 0068 0C       		.byte	12
 6584 0069 000000   		.space	3
 6585 006c 00000000 		.word	0
 6586 0070 0D       		.byte	13
 6587 0071 000000   		.space	3
 6588 0074 00000000 		.word	0
 6589 0078 0E       		.byte	14
 6590 0079 000000   		.space	3
 6591 007c 00000000 		.word	0
 6592 0080 0F       		.byte	15
 6593 0081 000000   		.space	3
 6594 0084 00000000 		.word	0
 6595 0088 10       		.byte	16
 6596 0089 000000   		.space	3
 6597 008c 00000000 		.word	0
 6598 0090 18       		.byte	24
 6599 0091 000000   		.space	3
 6600 0094 00000000 		.word	0
 6601 0098 13       		.byte	19
 6602 0099 000000   		.space	3
 6603 009c 00000000 		.word	0
 6604 00a0 14       		.byte	20
 6605 00a1 000000   		.space	3
 6606 00a4 00000000 		.word	0
 6607 00a8 15       		.byte	21
 6608 00a9 000000   		.space	3
 6609 00ac 00000000 		.word	0
 6610 00b0 16       		.byte	22
 6611 00b1 000000   		.space	3
 6612 00b4 00000000 		.word	0
 6613 00b8 1E       		.byte	30
 6614 00b9 000000   		.space	3
 6615 00bc 00000000 		.word	0
 6616 00c0 19       		.byte	25
 6617 00c1 000000   		.space	3
 6618 00c4 00000000 		.word	0
 6619 00c8 1A       		.byte	26
 6620 00c9 000000   		.space	3
 6621 00cc 00000000 		.word	0
 6622 00d0 1B       		.byte	27
 6623 00d1 000000   		.space	3
 6624 00d4 00000000 		.word	0
 6625 00d8 1C       		.byte	28
 6626 00d9 000000   		.space	3
 6627 00dc 00000000 		.word	0
 6628 00e0 29       		.byte	41
 6629 00e1 000000   		.space	3
 6630 00e4 00000000 		.word	0
 6631 00e8 1F       		.byte	31
 6632 00e9 000000   		.space	3
 6633 00ec 00000000 		.word	0
 6634 00f0 20       		.byte	32
ARM GAS  /tmp/cc7no4fx.s 			page 162


 6635 00f1 000000   		.space	3
 6636 00f4 00000000 		.word	0
 6637 00f8 21       		.byte	33
 6638 00f9 000000   		.space	3
 6639 00fc 00000000 		.word	0
 6640 0100 22       		.byte	34
 6641 0101 000000   		.space	3
 6642 0104 00000000 		.word	0
 6643 0108 24       		.byte	36
 6644 0109 000000   		.space	3
 6645 010c 00000000 		.word	0
 6646 0110 25       		.byte	37
 6647 0111 000000   		.space	3
 6648 0114 00000000 		.word	0
 6649 0118 26       		.byte	38
 6650 0119 000000   		.space	3
 6651 011c 00000000 		.word	0
 6652 0120 27       		.byte	39
 6653 0121 000000   		.space	3
 6654 0124 00000000 		.word	0
 6655 0128 28       		.byte	40
 6656 0129 000000   		.space	3
 6657 012c 00000000 		.word	0
 6658 0130 2E       		.byte	46
 6659 0131 000000   		.space	3
 6660 0134 00000000 		.word	0
 6661 0138 2E       		.byte	46
 6662 0139 000000   		.space	3
 6663 013c 00000000 		.word	0
 6664 0140 2E       		.byte	46
 6665 0141 000000   		.space	3
 6666 0144 00000000 		.word	0
 6667 0148 2E       		.byte	46
 6668 0149 000000   		.space	3
 6669 014c 00000000 		.word	0
 6670 0150 2E       		.byte	46
 6671 0151 000000   		.space	3
 6672 0154 00000000 		.word	0
 6673 0158 2E       		.byte	46
 6674 0159 000000   		.space	3
 6675 015c 00000000 		.word	0
 6676 0160 2E       		.byte	46
 6677 0161 000000   		.space	3
 6678 0164 00000000 		.word	0
 6679 0168 2E       		.byte	46
 6680 0169 000000   		.space	3
 6681 016c 00000000 		.word	0
 6682 0170 2E       		.byte	46
 6683 0171 000000   		.space	3
 6684 0174 00000000 		.word	0
 6685              		.section	.rodata.mapping_running.11071,"a"
 6686              		.align	2
 6687              		.set	.LANCHOR12,. + 0
 6690              	mapping_running.11071:
 6691 0000 63       		.byte	99
 6692 0001 000000   		.space	3
 6693 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc7no4fx.s 			page 163


 6694 0008 00       		.byte	0
 6695 0009 000000   		.space	3
 6696 000c 00000000 		.word	0
 6697 0010 01       		.byte	1
 6698 0011 000000   		.space	3
 6699 0014 00000000 		.word	0
 6700 0018 02       		.byte	2
 6701 0019 000000   		.space	3
 6702 001c 00000000 		.word	0
 6703 0020 03       		.byte	3
 6704 0021 000000   		.space	3
 6705 0024 00000000 		.word	0
 6706 0028 04       		.byte	4
 6707 0029 000000   		.space	3
 6708 002c 00000000 		.word	0
 6709 0030 12       		.byte	18
 6710 0031 000000   		.space	3
 6711 0034 00000000 		.word	0
 6712 0038 06       		.byte	6
 6713 0039 000000   		.space	3
 6714 003c 00000000 		.word	0
 6715 0040 07       		.byte	7
 6716 0041 000000   		.space	3
 6717 0044 00000000 		.word	0
 6718 0048 08       		.byte	8
 6719 0049 000000   		.space	3
 6720 004c 00000000 		.word	0
 6721 0050 09       		.byte	9
 6722 0051 000000   		.space	3
 6723 0054 00000000 		.word	0
 6724 0058 0A       		.byte	10
 6725 0059 000000   		.space	3
 6726 005c 00000000 		.word	0
 6727 0060 0B       		.byte	11
 6728 0061 000000   		.space	3
 6729 0064 00000000 		.word	0
 6730 0068 0C       		.byte	12
 6731 0069 000000   		.space	3
 6732 006c 00000000 		.word	0
 6733 0070 0D       		.byte	13
 6734 0071 000000   		.space	3
 6735 0074 00000000 		.word	0
 6736 0078 0E       		.byte	14
 6737 0079 000000   		.space	3
 6738 007c 00000000 		.word	0
 6739 0080 0F       		.byte	15
 6740 0081 000000   		.space	3
 6741 0084 00000000 		.word	0
 6742 0088 10       		.byte	16
 6743 0089 000000   		.space	3
 6744 008c 00000000 		.word	0
 6745 0090 18       		.byte	24
 6746 0091 000000   		.space	3
 6747 0094 00000000 		.word	0
 6748 0098 13       		.byte	19
 6749 0099 000000   		.space	3
 6750 009c 00000000 		.word	0
ARM GAS  /tmp/cc7no4fx.s 			page 164


 6751 00a0 14       		.byte	20
 6752 00a1 000000   		.space	3
 6753 00a4 00000000 		.word	0
 6754 00a8 15       		.byte	21
 6755 00a9 000000   		.space	3
 6756 00ac 00000000 		.word	0
 6757 00b0 16       		.byte	22
 6758 00b1 000000   		.space	3
 6759 00b4 00000000 		.word	0
 6760 00b8 1E       		.byte	30
 6761 00b9 000000   		.space	3
 6762 00bc 00000000 		.word	0
 6763 00c0 19       		.byte	25
 6764 00c1 000000   		.space	3
 6765 00c4 00000000 		.word	0
 6766 00c8 1A       		.byte	26
 6767 00c9 000000   		.space	3
 6768 00cc 00000000 		.word	0
 6769 00d0 1B       		.byte	27
 6770 00d1 000000   		.space	3
 6771 00d4 00000000 		.word	0
 6772 00d8 1C       		.byte	28
 6773 00d9 000000   		.space	3
 6774 00dc 00000000 		.word	0
 6775 00e0 09       		.byte	9
 6776 00e1 000000   		.space	3
 6777 00e4 00000000 		.word	0
 6778 00e8 1F       		.byte	31
 6779 00e9 000000   		.space	3
 6780 00ec 00000000 		.word	0
 6781 00f0 20       		.byte	32
 6782 00f1 000000   		.space	3
 6783 00f4 00000000 		.word	0
 6784 00f8 21       		.byte	33
 6785 00f9 000000   		.space	3
 6786 00fc 00000000 		.word	0
 6787 0100 22       		.byte	34
 6788 0101 000000   		.space	3
 6789 0104 00000000 		.word	0
 6790 0108 24       		.byte	36
 6791 0109 000000   		.space	3
 6792 010c 00000000 		.word	0
 6793 0110 25       		.byte	37
 6794 0111 000000   		.space	3
 6795 0114 00000000 		.word	0
 6796 0118 26       		.byte	38
 6797 0119 000000   		.space	3
 6798 011c 00000000 		.word	0
 6799 0120 27       		.byte	39
 6800 0121 000000   		.space	3
 6801 0124 00000000 		.word	0
 6802 0128 28       		.byte	40
 6803 0129 000000   		.space	3
 6804 012c 00000000 		.word	0
 6805 0130 2E       		.byte	46
 6806 0131 000000   		.space	3
 6807 0134 00000000 		.word	0
ARM GAS  /tmp/cc7no4fx.s 			page 165


 6808 0138 2E       		.byte	46
 6809 0139 000000   		.space	3
 6810 013c 00000000 		.word	0
 6811 0140 2E       		.byte	46
 6812 0141 000000   		.space	3
 6813 0144 00000000 		.word	0
 6814 0148 2E       		.byte	46
 6815 0149 000000   		.space	3
 6816 014c 00000000 		.word	0
 6817 0150 04       		.byte	4
 6818 0151 000000   		.space	3
 6819 0154 00000000 		.word	0
 6820 0158 05       		.byte	5
 6821 0159 000000   		.space	3
 6822 015c 00000000 		.word	0
 6823 0160 2E       		.byte	46
 6824 0161 000000   		.space	3
 6825 0164 00000000 		.word	0
 6826 0168 2E       		.byte	46
 6827 0169 000000   		.space	3
 6828 016c 00000000 		.word	0
 6829 0170 2E       		.byte	46
 6830 0171 000000   		.space	3
 6831 0174 00000000 		.word	0
 6832              		.section	.rodata.mid_menu,"a"
 6833              		.align	2
 6836              	mid_menu:
 6837 0000 C8C40B00 		.ascii	"\310\304\013\000"
 6838              		.text
 6839              	.Letext0:
 6840              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6841              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 6842              		.file 6 "/usr/include/newlib/sys/_types.h"
 6843              		.file 7 "/usr/include/newlib/sys/reent.h"
 6844              		.file 8 "/usr/include/newlib/sys/lock.h"
 6845              		.file 9 "/usr/include/newlib/stdlib.h"
 6846              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 6847              		.file 11 "/usr/include/newlib/ctype.h"
 6848              		.file 12 "dmcp/ff_ifc.h"
 6849              		.file 13 "dmcp/dmcp.h"
 6850              		.file 14 "src/keys.h"
 6851              		.file 15 "src/menu.h"
 6852              		.file 16 "src/decNumber/decContext.h"
 6853              		.file 17 "src/decNumber/decNumber.h"
 6854              		.file 18 "src/decNumber/decimal64.h"
 6855              		.file 19 "src/decNumber/decimal128.h"
 6856              		.file 20 "src/xeq.h"
 6857              		.file 21 "src/data.h"
 6858              		.file 22 "src/display.h"
 6859              		.file 23 "src/consts.h"
 6860              		.file 24 "src/storage.h"
 6861              		.file 25 "src/catalogues.h"
 6862              		.file 26 "src/lcd.h"
 6863              		.file 27 "/usr/include/newlib/string.h"
 6864              		.file 28 "/usr/include/newlib/stdio.h"
 6865              		.file 29 "<built-in>"
ARM GAS  /tmp/cc7no4fx.s 			page 166


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc7no4fx.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cc7no4fx.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cc7no4fx.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cc7no4fx.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cc7no4fx.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc7no4fx.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc7no4fx.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc7no4fx.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cc7no4fx.s:460    .text.disp_about:0000000000000000 $t
     /tmp/cc7no4fx.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/cc7no4fx.s:621    .text.disp_about:0000000000000080 $d
     /tmp/cc7no4fx.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/cc7no4fx.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cc7no4fx.s:687    .text.set_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/cc7no4fx.s:750    .text.set_menu:000000000000002c $d
     /tmp/cc7no4fx.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cc7no4fx.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/cc7no4fx.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cc7no4fx.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/cc7no4fx.s:969    .text.get_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/cc7no4fx.s:993    .text.get_menu:0000000000000008 $d
     /tmp/cc7no4fx.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cc7no4fx.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/cc7no4fx.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc7no4fx.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/cc7no4fx.s:1119   .text.mdot:0000000000000000 $t
     /tmp/cc7no4fx.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/cc7no4fx.s:1218   .text.mdot:000000000000003c $d
     /tmp/cc7no4fx.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/cc7no4fx.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/cc7no4fx.s:1298   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/cc7no4fx.s:1313   .text.get_current_menu_ref:000000000000007c $t
     /tmp/cc7no4fx.s:1383   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/cc7no4fx.s:4584   .rodata.Menus:0000000000000000 Menus
     /tmp/cc7no4fx.s:1391   .text.display_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:1399   .text.display_menu:0000000000000000 display_menu
     /tmp/cc7no4fx.s:1647   .text.display_menu:000000000000010c $d
     /tmp/cc7no4fx.s:1654   .text.display_current_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:1662   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc7no4fx.s:1698   .text.all_menu_dots:0000000000000000 $t
     /tmp/cc7no4fx.s:1706   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cc7no4fx.s:1790   .text.all_menu_dots:0000000000000038 $d
     /tmp/cc7no4fx.s:1795   .text.build_user_menu:0000000000000000 $t
     /tmp/cc7no4fx.s:1803   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/cc7no4fx.s:2092   .text.build_user_menu:0000000000000124 $d
     /tmp/cc7no4fx.s:2103   .text.shutdown:0000000000000000 $t
     /tmp/cc7no4fx.s:2111   .text.shutdown:0000000000000000 shutdown
     /tmp/cc7no4fx.s:2129   .text.shutdown:000000000000000c $d
     /tmp/cc7no4fx.s:2134   .text.is_key_pressed:0000000000000000 $t
ARM GAS  /tmp/cc7no4fx.s 			page 167


     /tmp/cc7no4fx.s:2142   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc7no4fx.s:2165   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc7no4fx.s:2170   .text.get_key:0000000000000000 $t
     /tmp/cc7no4fx.s:2178   .text.get_key:0000000000000000 get_key
     /tmp/cc7no4fx.s:2193   .text.get_key:0000000000000004 $d
     /tmp/cc7no4fx.s:2198   .text.put_key:0000000000000000 $t
     /tmp/cc7no4fx.s:2206   .text.put_key:0000000000000000 put_key
     /tmp/cc7no4fx.s:2285   .text.put_key:000000000000003c $d
     /tmp/cc7no4fx.s:2291   .text.shift_down:0000000000000000 $t
     /tmp/cc7no4fx.s:2299   .text.shift_down:0000000000000000 shift_down
     /tmp/cc7no4fx.s:2314   .text.start_key_timer:0000000000000000 $t
     /tmp/cc7no4fx.s:2322   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc7no4fx.s:2346   .text.start_key_timer:000000000000000c $d
     /tmp/cc7no4fx.s:2352   .text.keyticks:0000000000000000 $t
     /tmp/cc7no4fx.s:2360   .text.keyticks:0000000000000000 keyticks
     /tmp/cc7no4fx.s:2391   .text.keyticks:0000000000000018 $d
     /tmp/cc7no4fx.s:2397   .text.moveto:0000000000000000 $t
     /tmp/cc7no4fx.s:2405   .text.moveto:0000000000000000 moveto
     /tmp/cc7no4fx.s:2465   .text.moveto:000000000000002c $d
     /tmp/cc7no4fx.s:2472   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc7no4fx.s:2476   .text.print_debug:0000000000000000 $t
     /tmp/cc7no4fx.s:2484   .text.print_debug:0000000000000000 print_debug
     /tmp/cc7no4fx.s:2586   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc7no4fx.s:2597   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc7no4fx.s:2601   .text.print_debug2:0000000000000000 $t
     /tmp/cc7no4fx.s:2609   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc7no4fx.s:2711   .text.print_debug2:0000000000000064 $d
     /tmp/cc7no4fx.s:2722   .text.do_now:0000000000000000 $t
     /tmp/cc7no4fx.s:2730   .text.do_now:0000000000000000 do_now
     /tmp/cc7no4fx.s:2765   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc7no4fx.s:2769   .text.do_multi:0000000000000000 $t
     /tmp/cc7no4fx.s:2777   .text.do_multi:0000000000000000 do_multi
     /tmp/cc7no4fx.s:2808   .text.do_multi:000000000000001a $d
     /tmp/cc7no4fx.s:3223   .text.do_multi:0000000000000168 $d
     /tmp/cc7no4fx.s:3236   .text.program_main:0000000000000000 $t
     /tmp/cc7no4fx.s:3244   .text.program_main:0000000000000000 program_main
     /tmp/cc7no4fx.s:3519   .text.program_main:0000000000000116 $d
     /tmp/cc7no4fx.s:3525   .text.program_main:0000000000000122 $t
     /tmp/cc7no4fx.s:3905   .text.program_main:00000000000002cc $d
     /tmp/cc7no4fx.s:3947   .text.program_main:0000000000000350 $t
     /tmp/cc7no4fx.s:4341   .text.program_main:0000000000000524 $d
     /tmp/cc7no4fx.s:4419   .bss.n_p:0000000000000000 n_p
     /tmp/cc7no4fx.s:4568   .data.spaces:0000000000000000 spaces
     /tmp/cc7no4fx.s:4559   .data.release:0000000000000000 release
     /tmp/cc7no4fx.s:4532   .data.h_shift:0000000000000000 h_shift
     /tmp/cc7no4fx.s:4523   .data.g_shift:0000000000000000 g_shift
     /tmp/cc7no4fx.s:4515   .data.f_shift:0000000000000000 f_shift
     /tmp/cc7no4fx.s:4541   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc7no4fx.s:4550   .data.no_key:0000000000000000 no_key
     /tmp/cc7no4fx.s:4575   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc7no4fx.s:4367   .rodata.str1.4:0000000000000000 $d
     /tmp/cc7no4fx.s:6836   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc7no4fx.s:4400   .bss.default_menu:0000000000000000 default_menu
     /tmp/cc7no4fx.s:4406   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc7no4fx.s:4394   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc7no4fx.s:4509   .data.cmplx_key_string:0000000000000000 cmplx_key_string
ARM GAS  /tmp/cc7no4fx.s 			page 168


     /tmp/cc7no4fx.s:4502   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cc7no4fx.s:4433   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cc7no4fx.s:4384   .rodata:0000000000000000 $d
     /tmp/cc7no4fx.s:4395   .bss.current_menu:0000000000000000 $d
     /tmp/cc7no4fx.s:4401   .bss.default_menu:0000000000000000 $d
     /tmp/cc7no4fx.s:4407   .bss.last_menu:0000000000000000 $d
     /tmp/cc7no4fx.s:4409   .bss.mdots:0000000000000000 $d
     /tmp/cc7no4fx.s:4413   .bss.mdots:0000000000000000 mdots
     /tmp/cc7no4fx.s:4416   .bss.n_p:0000000000000000 $d
     /tmp/cc7no4fx.s:4422   .bss.start_ticks:0000000000000000 $d
     /tmp/cc7no4fx.s:4426   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc7no4fx.s:4429   .data.UserMenu:0000000000000000 $d
     /tmp/cc7no4fx.s:4498   .data.arrow_key_string:0000000000000000 $d
     /tmp/cc7no4fx.s:4505   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cc7no4fx.s:4512   .data.f_shift:0000000000000000 $d
     /tmp/cc7no4fx.s:4520   .data.g_shift:0000000000000000 $d
     /tmp/cc7no4fx.s:4528   .data.h_shift:0000000000000000 $d
     /tmp/cc7no4fx.s:4537   .data.heartbeat:0000000000000000 $d
     /tmp/cc7no4fx.s:4546   .data.no_key:0000000000000000 $d
     /tmp/cc7no4fx.s:4555   .data.release:0000000000000000 $d
     /tmp/cc7no4fx.s:4564   .data.spaces:0000000000000000 $d
     /tmp/cc7no4fx.s:4571   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc7no4fx.s:4581   .rodata.Menus:0000000000000000 $d
     /tmp/cc7no4fx.s:6098   .rodata.mapping_alpha.11070:0000000000000000 $d
     /tmp/cc7no4fx.s:6102   .rodata.mapping_alpha.11070:0000000000000000 mapping_alpha.11070
     /tmp/cc7no4fx.s:6245   .rodata.mapping_fshift.11068:0000000000000000 $d
     /tmp/cc7no4fx.s:6249   .rodata.mapping_fshift.11068:0000000000000000 mapping_fshift.11068
     /tmp/cc7no4fx.s:6392   .rodata.mapping_gshift.11069:0000000000000000 $d
     /tmp/cc7no4fx.s:6396   .rodata.mapping_gshift.11069:0000000000000000 mapping_gshift.11069
     /tmp/cc7no4fx.s:6539   .rodata.mapping_none.11067:0000000000000000 $d
     /tmp/cc7no4fx.s:6543   .rodata.mapping_none.11067:0000000000000000 mapping_none.11067
     /tmp/cc7no4fx.s:6686   .rodata.mapping_running.11071:0000000000000000 $d
     /tmp/cc7no4fx.s:6690   .rodata.mapping_running.11071:0000000000000000 mapping_running.11071
     /tmp/cc7no4fx.s:6833   .rodata.mid_menu:0000000000000000 $d
     /tmp/cc7no4fx.s:2823   .text.do_multi:0000000000000029 $d
     /tmp/cc7no4fx.s:2823   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
findmultilbl
do_inc
getprog
catcmd
strncpy
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
ARM GAS  /tmp/cc7no4fx.s 			page 169


save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause
Running
get_alpha_state

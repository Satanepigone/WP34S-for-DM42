ARM GAS  /tmp/ccwJS9HW.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB26:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/ccwJS9HW.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/ccwJS9HW.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/ccwJS9HW.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "Integ/Sum/Prod", // 14
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 191:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 192:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 193:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }
 197:src/menu.c    ****   },
 198:src/menu.c    **** };  
 199:src/menu.c    **** 
 200:src/menu.c    **** /* This code is the set_status_sized code with small changes
ARM GAS  /tmp/ccwJS9HW.s 			page 5


 201:src/menu.c    ****  * and non-DM42 code removed.
 202:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 203:src/menu.c    ****  */
 204:src/menu.c    **** #define MENU_WIDTH 32
 205:src/menu.c    **** 
 206:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 206 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 207:src/menu.c    ****   // dotcol is the number of the starting dot column
 208:src/menu.c    ****   // shifted is 1 if shifted
 209:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 209 3 view .LVU1
 210:src/menu.c    **** 
 211:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 212:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 212 3 view .LVU2
 213:src/menu.c    **** 
 214:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 214 3 view .LVU3
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 206 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 206 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 215:src/menu.c    ****   int i, j, xmax;
 216:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 216 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 217:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 218:src/menu.c    **** 
 219:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 219 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 206 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 215:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/ccwJS9HW.s 			page 6


  64              		.loc 1 215 3 is_stmt 1 view .LVU9
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 216 3 view .LVU10
 220:src/menu.c    **** 
 221:src/menu.c    **** #ifdef RP_PREFIX
 222:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 222 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 219:src/menu.c    **** 
  69              		.loc 1 219 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 219:src/menu.c    **** 
  72              		.loc 1 219 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 222 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 223:src/menu.c    **** #endif
 224:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 224 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 216 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 216 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 217:src/menu.c    **** 
  84              		.loc 1 217 3 is_stmt 1 view .LVU18
 219:src/menu.c    **** 
  85              		.loc 1 219 3 view .LVU19
 222:src/menu.c    **** #endif
  86              		.loc 1 222 3 view .LVU20
  87              		.loc 1 224 3 view .LVU21
  88              		.loc 1 224 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 224 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB37:
 225:src/menu.c    ****     int c;
 226:src/menu.c    ****     int width;
 227:src/menu.c    ****     unsigned char cmap[6];
 228:src/menu.c    **** 
 229:src/menu.c    ****     int real_width;
 230:src/menu.c    ****     int current_smallp;
 231:src/menu.c    **** 
 232:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 233:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 234:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 235:src/menu.c    ****     //           01 -> (not used)
 236:src/menu.c    ****     //           10 -> use big font
 237:src/menu.c    ****     //           11 -> use small font
ARM GAS  /tmp/ccwJS9HW.s 			page 7


 238:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 239:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 239 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE37:
 212:src/menu.c    **** 
  98              		.loc 1 212 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB54:
 225:src/menu.c    ****     int c;
 102              		.loc 1 225 5 is_stmt 1 view .LVU26
 226:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 226 5 view .LVU27
 227:src/menu.c    **** 
 104              		.loc 1 227 5 view .LVU28
 229:src/menu.c    ****     int current_smallp;
 105              		.loc 1 229 5 view .LVU29
 230:src/menu.c    **** 
 106              		.loc 1 230 5 view .LVU30
 107              		.loc 1 239 5 view .LVU31
 240:src/menu.c    ****       width = str[1] & 0x1F;
 241:src/menu.c    ****       switch (str[1] & 0x60) {
 242:src/menu.c    ****       default:
 243:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 244:src/menu.c    **** 	break;
 245:src/menu.c    ****       case 0x40:	current_smallp = 0;
 246:src/menu.c    **** 	break;
 247:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 247 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 239:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 239 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 240:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 240 7 is_stmt 1 view .LVU34
 240:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 240 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 241:src/menu.c    ****       default:
 119              		.loc 1 241 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 240:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 240 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 241:src/menu.c    ****       default:
 124              		.loc 1 241 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 247 18 view .LVU39
 129              	.LVL9:
ARM GAS  /tmp/ccwJS9HW.s 			page 8


 248:src/menu.c    **** 	break;
 130              		.loc 1 248 2 view .LVU40
 249:src/menu.c    ****       }
 250:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 250 7 view .LVU41
 132              		.loc 1 250 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 247:src/menu.c    **** 	break;
 135              		.loc 1 247 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 251:src/menu.c    ****       str += 3;
 141              		.loc 1 251 7 is_stmt 1 view .LVU44
 252:src/menu.c    **** 
 253:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 253 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 251:src/menu.c    ****       str += 3;
 146              		.loc 1 251 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 253 7 is_stmt 1 view .LVU47
 254:src/menu.c    ****     } else {
 255:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 256:src/menu.c    ****       real_width = width = charlengths(c);
 257:src/menu.c    ****       current_smallp = smallp;
 258:src/menu.c    ****     }
 259:src/menu.c    **** 
 260:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 260 5 view .LVU48
 153              		.loc 1 260 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 260 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 261:src/menu.c    ****       break;
 262:src/menu.c    **** 
 263:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 263 5 is_stmt 1 view .LVU51
 161              		.loc 1 263 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 264:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 264 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 263:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 263 8 view .LVU54
ARM GAS  /tmp/ccwJS9HW.s 			page 9


 167 007a 05D0     		beq	.L12
 168              		.loc 1 264 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 264 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 265:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 265 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 266:src/menu.c    ****     }
 267:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 267 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 268:src/menu.c    **** 
 269:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 269 5 view .LVU59
 187              		.loc 1 269 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 267:src/menu.c    **** 
 193              		.loc 1 267 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 270:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 270 17 is_stmt 1 view .LVU62
 199              		.loc 1 270 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 271:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 271 2 is_stmt 1 view .LVU64
 203              		.loc 1 271 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB38:
 207              	.LBB39:
 208              	.LBB40:
 209              	.LBB41:
 272:src/menu.c    **** 	  break;
 273:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 274:src/menu.c    ****       }
 275:src/menu.c    ****     }
 276:src/menu.c    ****     x += width;
 277:src/menu.c    ****   }
ARM GAS  /tmp/ccwJS9HW.s 			page 10


 278:src/menu.c    **** }
 279:src/menu.c    **** 
 280:src/menu.c    **** 
 281:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 282:src/menu.c    **** 
 283:src/menu.c    **** int pixel_length(const char *s, int smallp)
 284:src/menu.c    **** {
 285:src/menu.c    ****   int len = 0;
 286:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 287:src/menu.c    ****   while (*s != '\0') {
 288:src/menu.c    ****     if (s[0] == '\007') {
 289:src/menu.c    ****       len += s[1] & 0x1F;
 290:src/menu.c    ****       s += 3;
 291:src/menu.c    ****       continue;
 292:src/menu.c    ****     }
 293:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 294:src/menu.c    ****   }
 295:src/menu.c    ****   return len;
 296:src/menu.c    **** }
 297:src/menu.c    **** */
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 301:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 302:src/menu.c    ****   if (on) {
 303:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 304:src/menu.c    ****   }
 305:src/menu.c    ****   else {
 306:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 306 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 306 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE41:
 215              	.LBE40:
 216              	.LBE39:
 217              	.LBE38:
 273:src/menu.c    ****       }
 218              		.loc 1 273 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB51:
 221              	.LBB48:
 222              	.LBB45:
 223              	.LBB42:
 224              		.loc 1 306 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE42:
 227              	.LBE45:
 228              	.LBE48:
 229              	.LBE51:
 270:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 270 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 271:src/menu.c    **** 	  break;
ARM GAS  /tmp/ccwJS9HW.s 			page 11


 235              		.loc 1 271 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 273:src/menu.c    ****       }
 240              		.loc 1 273 2 is_stmt 1 view .LVU72
 241              	.LBB52:
 242              	.LBI38:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 300 6 view .LVU73
 244              	.LBB49:
 301:src/menu.c    ****   if (on) {
 245              		.loc 1 301 3 view .LVU74
 246              	.LBB46:
 247              	.LBI40:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 300 6 view .LVU75
 249              	.LBB43:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 302 3 view .LVU76
 251              	.LBE43:
 252              	.LBE46:
 301:src/menu.c    ****   if (on) {
 253              		.loc 1 301 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 301:src/menu.c    ****   if (on) {
 256              		.loc 1 301 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE49:
 259              	.LBE52:
 273:src/menu.c    ****       }
 260              		.loc 1 273 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB53:
 263              	.LBB50:
 301:src/menu.c    ****   if (on) {
 264              		.loc 1 301 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB47:
 267              	.LBB44:
 303:src/menu.c    ****   }
 268              		.loc 1 303 5 is_stmt 1 view .LVU81
 269              		.loc 1 306 5 view .LVU82
 303:src/menu.c    ****   }
 270              		.loc 1 303 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 302 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 303:src/menu.c    ****   }
 275              		.loc 1 303 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 306 17 view .LVU86
ARM GAS  /tmp/ccwJS9HW.s 			page 12


 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE44:
 283              	.LBE47:
 284              	.LBE50:
 285              	.LBE53:
 271:src/menu.c    **** 	  break;
 286              		.loc 1 271 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 270:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 270 26 view .LVU88
 270:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 270 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 270:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 270 17 is_stmt 1 view .LVU90
 270:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 270 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 269 20 is_stmt 1 view .LVU92
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 269 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 269 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 269 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 276:src/menu.c    ****   }
 307              		.loc 1 276 5 is_stmt 1 view .LVU96
 308              	.LBE54:
 224:src/menu.c    ****     int c;
 309              		.loc 1 224 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB55:
 276:src/menu.c    ****   }
 313              		.loc 1 276 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 276:src/menu.c    ****   }
 316              		.loc 1 276 7 view .LVU99
 317              	.LBE55:
 224:src/menu.c    ****     int c;
 318              		.loc 1 224 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 224:src/menu.c    ****     int c;
 320              		.loc 1 224 23 is_stmt 0 view .LVU101
ARM GAS  /tmp/ccwJS9HW.s 			page 13


 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB56:
 239:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 239 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE56:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB57:
 225:src/menu.c    ****     int width;
 329              		.loc 1 225 5 is_stmt 1 view .LVU103
 226:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 226 5 view .LVU104
 227:src/menu.c    **** 
 331              		.loc 1 227 5 view .LVU105
 229:src/menu.c    ****     int current_smallp;
 332              		.loc 1 229 5 view .LVU106
 230:src/menu.c    **** 
 333              		.loc 1 230 5 view .LVU107
 239:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 239 5 view .LVU108
 239:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 239 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 255 7 is_stmt 1 view .LVU110
 256:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 256 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 255 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 256:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 256 7 is_stmt 1 view .LVU113
 257:src/menu.c    ****     }
 350              		.loc 1 257 7 view .LVU114
 257:src/menu.c    ****     }
 351              		.loc 1 257 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 257:src/menu.c    ****     }
 354              		.loc 1 257 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 260:src/menu.c    ****       break;
 357              		.loc 1 260 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 260:src/menu.c    ****       break;
 360              		.loc 1 260 8 view .LVU118
ARM GAS  /tmp/ccwJS9HW.s 			page 14


 361 011e 9945     		cmp	r9, r3
 256:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 256 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 260:src/menu.c    ****       break;
 364              		.loc 1 260 5 is_stmt 1 view .LVU120
 260:src/menu.c    ****       break;
 365              		.loc 1 260 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 260:src/menu.c    ****       break;
 369              		.loc 1 260 8 view .LVU122
 370              	.LBE57:
 278:src/menu.c    **** 
 371              		.loc 1 278 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB58:
 250:src/menu.c    ****       str += 3;
 381              		.loc 1 250 7 is_stmt 1 view .LVU124
 250:src/menu.c    ****       str += 3;
 382              		.loc 1 250 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 243:src/menu.c    **** 	break;
 385              		.loc 1 243 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE58:
 396              		.cfi_endproc
 397              	.LFE26:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   if (new_menu == current_menu) {
ARM GAS  /tmp/ccwJS9HW.s 			page 15


 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
ARM GAS  /tmp/ccwJS9HW.s 			page 16


  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
ARM GAS  /tmp/ccwJS9HW.s 			page 17


 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB59:
 511              	.LBB60:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
 514              	.LBE60:
 515              	.LBE59:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB62:
 520              	.LBI59:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB61:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE61:
 544              	.LBE62:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
ARM GAS  /tmp/ccwJS9HW.s 			page 18


 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 300 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 301:src/menu.c    ****   if (on) {
 572              		.loc 1 301 3 view .LVU169
 301:src/menu.c    ****   if (on) {
 573              		.loc 1 301 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB65:
 578              	.LBI65:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 300 6 is_stmt 1 view .LVU171
 580              	.LBB66:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 302 3 view .LVU172
 582              	.LBE66:
 583              	.LBE65:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 300 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB69:
 589              	.LBB67:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 302 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 306 5 is_stmt 1 view .LVU175
 593              		.loc 1 306 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 306 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
ARM GAS  /tmp/ccwJS9HW.s 			page 19


 598              	.LVL47:
 599              		.loc 1 306 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 306 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 306 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 306 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
 609              	.LVL49:
 610              		.loc 1 306 17 view .LVU182
 611              	.LBE67:
 612              	.LBE69:
 307:src/menu.c    ****   }
 308:src/menu.c    **** }
 613              		.loc 1 308 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB70:
 623              	.LBB68:
 303:src/menu.c    ****   }
 624              		.loc 1 303 5 is_stmt 1 view .LVU184
 303:src/menu.c    ****   }
 625              		.loc 1 303 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 303:src/menu.c    ****   }
 628              		.loc 1 303 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 303:src/menu.c    ****   }
 631              		.loc 1 303 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 303:src/menu.c    ****   }
 633              		.loc 1 303 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 303:src/menu.c    ****   }
 635              		.loc 1 303 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 303:src/menu.c    ****   }
 638              		.loc 1 303 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE68:
 642              	.LBE70:
 643              		.loc 1 308 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
ARM GAS  /tmp/ccwJS9HW.s 			page 20


 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 308 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 309:src/menu.c    **** 
 310:src/menu.c    **** 
 311:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 311 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 312:src/menu.c    ****   int len = 0;
 675              		.loc 1 312 3 view .LVU194
 313:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 313 3 view .LVU195
 311:src/menu.c    ****   int len = 0;
 677              		.loc 1 311 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 313 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 311:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccwJS9HW.s 			page 21


 698              		.loc 1 311 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 313 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 313 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 314:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 706              		.loc 1 314 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 315:src/menu.c    ****   //Clear previous menu
 316:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 316 3 view .LVU202
 717              	.LBB71:
 718              		.loc 1 316 8 view .LVU203
 719              		.loc 1 316 21 view .LVU204
 317:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 317 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE71:
 314:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 724              		.loc 1 314 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB72:
 729              		.loc 1 317 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 317 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 318:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 318 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 318 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 316:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 316 32 is_stmt 1 discriminator 3 view .LVU211
 316:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 316 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 316:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 316 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
 744              	.LVL60:
 316:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccwJS9HW.s 			page 22


 745              		.loc 1 316 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 316:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 316 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 316:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 316 3 view .LVU216
 752              	.LBE72:
 753              	.LBB73:
 319:src/menu.c    ****   }
 320:src/menu.c    **** 
 321:src/menu.c    ****   // Draw menu items
 322:src/menu.c    ****   // 
 323:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 324:src/menu.c    ****     /*
 325:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 326:src/menu.c    ****     */
 327:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 328:src/menu.c    ****     // Unshifted first
 329:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 329 5 is_stmt 1 view .LVU217
 755              		.loc 1 329 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 330:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 330 5 is_stmt 1 view .LVU219
 761              		.loc 1 330 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 330 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 330 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 331:src/menu.c    ****     // Now shifted ...	
 332:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 332 5 is_stmt 1 view .LVU223
 774              		.loc 1 332 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 333:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 333 5 is_stmt 1 view .LVU225
 780              		.loc 1 333 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
 783              		.loc 1 333 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
ARM GAS  /tmp/ccwJS9HW.s 			page 23


 785              	.LVL67:
 334:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 334 5 is_stmt 1 view .LVU228
 333:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 333 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 333:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 333 9 view .LVU230
 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 335:src/menu.c    ****     if (len>199) len = 199;
 336:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 336 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 336 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 323:src/menu.c    ****     /*
 804              		.loc 1 323 32 is_stmt 1 view .LVU233
 323:src/menu.c    ****     /*
 805              		.loc 1 323 22 view .LVU234
 323:src/menu.c    ****     /*
 806              		.loc 1 323 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE73:
 812              	.LBB74:
 813              	.LBB75:
 337:src/menu.c    ****   }
 338:src/menu.c    **** 
 339:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 340:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 341:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 342:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 343:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 343 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 C5F1040A 		rsb	r10, r5, #4
 817 00a4 06F5C47B 		add	fp, r6, #392
 818              	.LBE75:
 819              	.LBE74:
 820              	.LBB77:
 323:src/menu.c    ****     /*
 821              		.loc 1 323 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE77:
 824              	.LBB78:
 825              	.LBB76:
ARM GAS  /tmp/ccwJS9HW.s 			page 24


 826              		.loc 1 343 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 340 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0705 		add	r5, r10, r7
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 340 14 is_stmt 0 view .LVU240
 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 341 7 is_stmt 1 view .LVU241
 837              		.loc 1 343 2 view .LVU242
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 341 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 341 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 343 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 341 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 343 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 341 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 343 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 344 7 is_stmt 1 view .LVU250
 345:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 346:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 346 2 view .LVU251
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 344 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 344 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 346 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 344 10 view .LVU255
 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 346 2 view .LVU256
ARM GAS  /tmp/ccwJS9HW.s 			page 25


 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 346 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 344 10 view .LVU258
 877 00ee 02D0     		beq	.L69
 878              		.loc 1 346 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 340 32 is_stmt 1 discriminator 2 view .LVU260
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 340 23 discriminator 2 view .LVU261
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 340 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE76:
 339:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 339 32 is_stmt 1 discriminator 2 view .LVU263
 339:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 339 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 339:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 339 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE78:
 347:src/menu.c    ****     }
 348:src/menu.c    ****   }
 349:src/menu.c    **** }
 897              		.loc 1 349 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 349 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
 916              		.p2align 2,,3
 917              		.global	display_current_menu
ARM GAS  /tmp/ccwJS9HW.s 			page 26


 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.all_menu_dots,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	all_menu_dots
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	all_menu_dots:
 952              	.LFB10:
 350:src/menu.c    **** 
 351:src/menu.c    **** void all_menu_dots () {
 953              		.loc 1 351 23 view -0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 352:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 957              		.loc 1 352 3 view .LVU271
 958              	.LBB79:
 959              		.loc 1 352 8 view .LVU272
 960              	.LVL79:
 961              		.loc 1 352 21 view .LVU273
 962              	.LBE79:
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 963              		.loc 1 351 23 is_stmt 0 view .LVU274
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971              	.LBB83:
ARM GAS  /tmp/ccwJS9HW.s 			page 27


 972              	.LBB80:
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 354:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 973              		.loc 1 354 2 view .LVU275
 974 0002 0D4E     		ldr	r6, .L93
 975              	.LBE80:
 976              	.LBE83:
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 977              		.loc 1 351 23 view .LVU276
 978 0004 83B0     		sub	sp, sp, #12
 979              		.cfi_def_cfa_offset 32
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 980              		.loc 1 351 23 view .LVU277
 981 0006 0025     		movs	r5, #0
 982              	.LBB84:
 983              	.LBB81:
 984              		.loc 1 354 2 view .LVU278
 985 0008 FF27     		movs	r7, #255
 986              	.LVL80:
 987              	.L88:
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 988              		.loc 1 353 23 is_stmt 1 view .LVU279
 989              	.LBE81:
 990              	.LBE84:
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 991              		.loc 1 351 23 is_stmt 0 view .LVU280
 992 000a E924     		movs	r4, #233
 993              	.LVL81:
 994              	.L89:
 995              	.LBB85:
 996              	.LBB82:
 997              		.loc 1 354 2 is_stmt 1 discriminator 3 view .LVU281
 998 000c 0323     		movs	r3, #3
 999 000e 1A46     		mov	r2, r3
 1000 0010 2146     		mov	r1, r4
 1001 0012 2846     		mov	r0, r5
 1002 0014 0097     		str	r7, [sp]
 1003 0016 B047     		blx	r6
 1004              	.LVL82:
 355:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1005              		.loc 1 355 2 discriminator 3 view .LVU282
 1006 0018 0323     		movs	r3, #3
 1007 001a A4F11901 		sub	r1, r4, #25
 1008 001e 0097     		str	r7, [sp]
 1009 0020 1A46     		mov	r2, r3
 1010 0022 2846     		mov	r0, r5
 1011 0024 033C     		subs	r4, r4, #3
 1012 0026 B047     		blx	r6
 1013              	.LVL83:
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1014              		.loc 1 353 32 discriminator 3 view .LVU283
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1015              		.loc 1 353 23 discriminator 3 view .LVU284
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1016              		.loc 1 353 5 is_stmt 0 discriminator 3 view .LVU285
 1017 0028 D72C     		cmp	r4, #215
 1018 002a EFD1     		bne	.L89
ARM GAS  /tmp/ccwJS9HW.s 			page 28


 1019              	.LBE82:
 352:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1020              		.loc 1 352 32 is_stmt 1 discriminator 2 view .LVU286
 352:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1021              		.loc 1 352 21 discriminator 2 view .LVU287
 1022 002c 0235     		adds	r5, r5, #2
 352:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1023              		.loc 1 352 3 is_stmt 0 discriminator 2 view .LVU288
 1024 002e B5F5C87F 		cmp	r5, #400
 1025 0032 EAD1     		bne	.L88
 1026              	.LBE85:
 356:src/menu.c    ****     }
 357:src/menu.c    ****   }
 358:src/menu.c    **** }  
 1027              		.loc 1 358 1 view .LVU289
 1028 0034 03B0     		add	sp, sp, #12
 1029              		.cfi_def_cfa_offset 20
 1030              		@ sp needed
 1031 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1032              	.L94:
 1033              		.align	2
 1034              	.L93:
 1035 0038 3D020008 		.word	134218301
 1036              		.cfi_endproc
 1037              	.LFE10:
 1039              		.section	.text.shutdown,"ax",%progbits
 1040              		.align	1
 1041              		.p2align 2,,3
 1042              		.global	shutdown
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu fpv4-sp-d16
 1048              	shutdown:
 1049              	.LFB12:
 1050              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
ARM GAS  /tmp/ccwJS9HW.s 			page 29


  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     MI_MSC,
  48:src/console.c ****     0 }; // Terminator
  49:src/console.c **** 
  50:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  51:src/console.c **** 
  52:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  53:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  54:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  55:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  56:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  57:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  72:src/console.c ****     return sshot;
  73:src/console.c ****   }
  74:src/console.c ****   
  75:src/console.c ****   if ( get_alpha_state() ) {
  76:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  77:src/console.c ****       switch (cur_shift()) { 
  78:src/console.c ****       case SHIFT_N:
ARM GAS  /tmp/ccwJS9HW.s 			page 30


  79:src/console.c **** 	return mapping_none[c]; // N -> F
  80:src/console.c **** 	break;
  81:src/console.c ****       case SHIFT_F:
  82:src/console.c **** 	return mapping_fshift[c]; // F -> G
  83:src/console.c **** 	break;
  84:src/console.c ****       case SHIFT_G:
  85:src/console.c **** 	return h_shift; // G -> H
  86:src/console.c **** 	break;
  87:src/console.c ****       case SHIFT_H:
  88:src/console.c **** 	return h_shift; // H -> N
  89:src/console.c ****       default:
  90:src/console.c **** 	return no_change;
  91:src/console.c ****       }
  92:src/console.c ****     }
  93:src/console.c ****     return mapping_alpha [c];
  94:src/console.c ****   }
  95:src/console.c ****     
  96:src/console.c ****   switch (c) {
  97:src/console.c ****   case KEY_F1:
  98:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  99:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 100:src/console.c ****   case KEY_F2:
 101:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 102:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 103:src/console.c ****   case KEY_F3:
 104:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 105:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 106:src/console.c ****   case KEY_F4:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 109:src/console.c ****   case KEY_F5:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 112:src/console.c ****   case KEY_F6:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 115:src/console.c ****   }
 116:src/console.c ****   
 117:src/console.c ****   switch (cur_shift()) {
 118:src/console.c ****   case SHIFT_N:    
 119:src/console.c ****     return mapping_none[c];
 120:src/console.c ****     break;
 121:src/console.c ****   case SHIFT_F:
 122:src/console.c ****     return mapping_fshift[c];
 123:src/console.c ****     break;
 124:src/console.c ****   case SHIFT_G:
 125:src/console.c ****     return mapping_gshift[c];
 126:src/console.c ****     break;
 127:src/console.c ****   default:
 128:src/console.c ****     return no_change;
 129:src/console.c ****   }
 130:src/console.c **** }
 131:src/console.c **** 
 132:src/console.c **** #endif
 133:src/console.c **** 
 134:src/console.c **** void shutdown( void )
 135:src/console.c **** {
ARM GAS  /tmp/ccwJS9HW.s 			page 31


 1051              		.loc 2 135 1 is_stmt 1 view -0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 136:src/console.c **** #ifndef DM42
 137:src/console.c ****   checksum_all();
 138:src/console.c ****   setuptty( 1 );
 139:src/console.c ****   save_statefile( NULL );
 140:src/console.c ****   exit( 0 );
 141:src/console.c **** #else
 142:src/console.c ****   //  save_ram_file(0);
 143:src/console.c ****   SET_ST(STAT_PGM_END);
 1056              		.loc 2 143 3 view .LVU291
 1057 0000 024A     		ldr	r2, .L96
 1058 0002 1368     		ldr	r3, [r2]
 1059 0004 43F40073 		orr	r3, r3, #512
 1060 0008 1360     		str	r3, [r2]
 144:src/console.c **** #endif
 145:src/console.c **** }
 1061              		.loc 2 145 1 is_stmt 0 view .LVU292
 1062 000a 7047     		bx	lr
 1063              	.L97:
 1064              		.align	2
 1065              	.L96:
 1066 000c 00200010 		.word	268443648
 1067              		.cfi_endproc
 1068              	.LFE12:
 1070              		.section	.text.is_key_pressed,"ax",%progbits
 1071              		.align	1
 1072              		.p2align 2,,3
 1073              		.global	is_key_pressed
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv4-sp-d16
 1079              	is_key_pressed:
 1080              	.LFB13:
 146:src/console.c **** 
 147:src/console.c **** 
 148:src/console.c **** /*
 149:src/console.c ****  *  Dummies
 150:src/console.c ****  */
 151:src/console.c **** int is_key_pressed(void) 
 152:src/console.c **** {
 1081              		.loc 2 152 1 is_stmt 1 view -0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 153:src/console.c **** #ifdef DM42
 154:src/console.c ****   return !key_empty();
 1085              		.loc 2 154 3 view .LVU294
 152:src/console.c **** #ifdef DM42
 1086              		.loc 2 152 1 is_stmt 0 view .LVU295
 1087 0000 08B5     		push	{r3, lr}
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 3, -8
ARM GAS  /tmp/ccwJS9HW.s 			page 32


 1090              		.cfi_offset 14, -4
 1091              		.loc 2 154 11 view .LVU296
 1092 0002 034B     		ldr	r3, .L100
 1093 0004 9847     		blx	r3
 1094              	.LVL84:
 155:src/console.c **** #else
 156:src/console.c ****   return 0;
 157:src/console.c **** #endif
 158:src/console.c **** }
 1095              		.loc 2 158 1 view .LVU297
 1096 0006 B0FA80F0 		clz	r0, r0
 1097 000a 4009     		lsrs	r0, r0, #5
 1098 000c 08BD     		pop	{r3, pc}
 1099              	.L101:
 1100 000e 00BF     		.align	2
 1101              	.L100:
 1102 0010 7D030008 		.word	134218621
 1103              		.cfi_endproc
 1104              	.LFE13:
 1106              		.section	.text.get_key,"ax",%progbits
 1107              		.align	1
 1108              		.p2align 2,,3
 1109              		.global	get_key
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	get_key:
 1116              	.LFB14:
 159:src/console.c **** 
 160:src/console.c **** int get_key(void)
 161:src/console.c **** {
 1117              		.loc 2 161 1 is_stmt 1 view -0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 0
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121              		@ link register save eliminated.
 162:src/console.c ****   #ifdef DM42
 163:src/console.c ****   return key_pop();
 1122              		.loc 2 163 3 view .LVU299
 1123              		.loc 2 163 10 is_stmt 0 view .LVU300
 1124 0000 004B     		ldr	r3, .L103
 1125 0002 1847     		bx	r3
 1126              	.LVL85:
 1127              	.L104:
 1128              		.align	2
 1129              	.L103:
 1130 0004 89030008 		.word	134218633
 1131              		.cfi_endproc
 1132              	.LFE14:
 1134              		.section	.text.put_key,"ax",%progbits
 1135              		.align	1
 1136              		.p2align 2,,3
 1137              		.global	put_key
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
ARM GAS  /tmp/ccwJS9HW.s 			page 33


 1141              		.fpu fpv4-sp-d16
 1143              	put_key:
 1144              	.LVL86:
 1145              	.LFB15:
 164:src/console.c ****   #else
 165:src/console.c ****   return 0;
 166:src/console.c ****   #endif
 167:src/console.c **** }
 168:src/console.c **** 
 169:src/console.c **** int put_key( int k )
 170:src/console.c **** {
 1146              		.loc 2 170 1 is_stmt 1 view -0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_push(k);
 1151              		.loc 2 172 3 view .LVU302
 1152              		.loc 2 172 10 is_stmt 0 view .LVU303
 1153 0000 004B     		ldr	r3, .L106
 1154 0002 1847     		bx	r3
 1155              	.LVL87:
 1156              	.L107:
 1157              		.loc 2 172 10 view .LVU304
 1158              		.align	2
 1159              	.L106:
 1160 0004 81030008 		.word	134218625
 1161              		.cfi_endproc
 1162              	.LFE15:
 1164              		.section	.text.shift_down,"ax",%progbits
 1165              		.align	1
 1166              		.p2align 2,,3
 1167              		.global	shift_down
 1168              		.syntax unified
 1169              		.thumb
 1170              		.thumb_func
 1171              		.fpu fpv4-sp-d16
 1173              	shift_down:
 1174              	.LFB16:
 173:src/console.c ****   #else
 174:src/console.c ****   return k;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** enum shifts shift_down(void)
 179:src/console.c **** {
 1175              		.loc 2 179 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 180:src/console.c **** 	return SHIFT_N;
 1180              		.loc 2 180 2 view .LVU306
 181:src/console.c **** }
 1181              		.loc 2 181 1 is_stmt 0 view .LVU307
 1182 0000 0020     		movs	r0, #0
ARM GAS  /tmp/ccwJS9HW.s 			page 34


 1183 0002 7047     		bx	lr
 1184              		.cfi_endproc
 1185              	.LFE16:
 1187              		.section	.text.start_key_timer,"ax",%progbits
 1188              		.align	1
 1189              		.p2align 2,,3
 1190              		.global	start_key_timer
 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1194              		.fpu fpv4-sp-d16
 1196              	start_key_timer:
 1197              	.LFB17:
 182:src/console.c **** 
 183:src/console.c **** #ifndef DM42   // No serial operations for DM42
 184:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 185:src/console.c **** /*
 186:src/console.c ****  *  Open a COM port for transmission
 187:src/console.c ****  */
 188:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 189:src/console.c **** {
 190:src/console.c **** 	return 0;
 191:src/console.c **** }
 192:src/console.c **** 
 193:src/console.c **** 
 194:src/console.c **** /*
 195:src/console.c ****  *  Close the COM port after transmission is complete
 196:src/console.c ****  */
 197:src/console.c **** extern void close_port( void )
 198:src/console.c **** {
 199:src/console.c **** }
 200:src/console.c **** 
 201:src/console.c **** 
 202:src/console.c **** /*
 203:src/console.c ****  *  Output a single byte to the serial
 204:src/console.c ****  */
 205:src/console.c **** void put_byte( unsigned char byte )
 206:src/console.c **** {
 207:src/console.c **** 	report_err(ERR_PROG_BAD);
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Force buffer flush
 213:src/console.c ****  */
 214:src/console.c **** void flush_comm( void )
 215:src/console.c **** {
 216:src/console.c **** }
 217:src/console.c **** 
 218:src/console.c **** #endif
 219:src/console.c **** #endif
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Main loop
 224:src/console.c ****  */
 225:src/console.c **** #ifdef DM42
ARM GAS  /tmp/ccwJS9HW.s 			page 35


 226:src/console.c **** void start_key_timer (void);
 227:src/console.c **** int keyticks (void);
 228:src/console.c **** void moveto (int line, int x);
 229:src/console.c **** 
 230:src/console.c **** static int start_ticks;
 231:src/console.c **** 
 232:src/console.c **** void start_key_timer() {
 1198              		.loc 2 232 24 is_stmt 1 view -0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 233:src/console.c ****     start_ticks = get_rtc_ticks();
 1202              		.loc 2 233 5 view .LVU309
 232:src/console.c ****     start_ticks = get_rtc_ticks();
 1203              		.loc 2 232 24 is_stmt 0 view .LVU310
 1204 0000 08B5     		push	{r3, lr}
 1205              		.cfi_def_cfa_offset 8
 1206              		.cfi_offset 3, -8
 1207              		.cfi_offset 14, -4
 1208              		.loc 2 233 19 view .LVU311
 1209 0002 024B     		ldr	r3, .L111
 1210 0004 9847     		blx	r3
 1211              	.LVL88:
 1212              		.loc 2 233 17 view .LVU312
 1213 0006 024B     		ldr	r3, .L111+4
 1214 0008 1860     		str	r0, [r3]
 234:src/console.c **** }
 1215              		.loc 2 234 1 view .LVU313
 1216 000a 08BD     		pop	{r3, pc}
 1217              	.L112:
 1218              		.align	2
 1219              	.L111:
 1220 000c B9040008 		.word	134218937
 1221 0010 00000000 		.word	.LANCHOR4
 1222              		.cfi_endproc
 1223              	.LFE17:
 1225              		.section	.text.keyticks,"ax",%progbits
 1226              		.align	1
 1227              		.p2align 2,,3
 1228              		.global	keyticks
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu fpv4-sp-d16
 1234              	keyticks:
 1235              	.LFB18:
 235:src/console.c **** 
 236:src/console.c **** int keyticks () {
 1236              		.loc 2 236 17 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 237:src/console.c ****   int i;
 1240              		.loc 2 237 3 view .LVU315
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1241              		.loc 2 238 3 view .LVU316
 236:src/console.c ****   int i;
ARM GAS  /tmp/ccwJS9HW.s 			page 36


 1242              		.loc 2 236 17 is_stmt 0 view .LVU317
 1243 0000 08B5     		push	{r3, lr}
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 3, -8
 1246              		.cfi_offset 14, -4
 1247              		.loc 2 238 8 view .LVU318
 1248 0002 054B     		ldr	r3, .L115
 1249 0004 9847     		blx	r3
 1250              	.LVL89:
 239:src/console.c ****   return i >> 8;
 1251              		.loc 2 239 3 is_stmt 1 view .LVU319
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1252              		.loc 2 238 24 is_stmt 0 view .LVU320
 1253 0006 054B     		ldr	r3, .L115+4
 1254 0008 1B68     		ldr	r3, [r3]
 1255 000a C01A     		subs	r0, r0, r3
 1256              	.LVL90:
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1257              		.loc 2 238 38 view .LVU321
 1258 000c 00EB8000 		add	r0, r0, r0, lsl #2
 240:src/console.c **** }
 1259              		.loc 2 240 1 view .LVU322
 1260 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1261 0014 08BD     		pop	{r3, pc}
 1262              	.L116:
 1263 0016 00BF     		.align	2
 1264              	.L115:
 1265 0018 B9040008 		.word	134218937
 1266 001c 00000000 		.word	.LANCHOR4
 1267              		.cfi_endproc
 1268              	.LFE18:
 1270              		.section	.text.moveto,"ax",%progbits
 1271              		.align	1
 1272              		.p2align 2,,3
 1273              		.global	moveto
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv4-sp-d16
 1279              	moveto:
 1280              	.LVL91:
 1281              	.LFB19:
 241:src/console.c **** 
 242:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 243:src/console.c **** char print_string[22];
 244:src/console.c **** int n_p = 0;
 245:src/console.c **** 
 246:src/console.c **** 
 247:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1282              		.loc 2 247 30 is_stmt 1 view -0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 248:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1286              		.loc 2 248 3 view .LVU324
 247:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1287              		.loc 2 247 30 is_stmt 0 view .LVU325
ARM GAS  /tmp/ccwJS9HW.s 			page 37


 1288 0000 70B5     		push	{r4, r5, r6, lr}
 1289              		.cfi_def_cfa_offset 16
 1290              		.cfi_offset 4, -16
 1291              		.cfi_offset 5, -12
 1292              		.cfi_offset 6, -8
 1293              		.cfi_offset 14, -4
 1294              		.loc 2 248 3 view .LVU326
 1295 0002 0A4D     		ldr	r5, .L119
 1296 0004 0A4B     		ldr	r3, .L119+4
 247:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1297              		.loc 2 247 30 view .LVU327
 1298 0006 0246     		mov	r2, r0
 1299 0008 0C46     		mov	r4, r1
 1300              		.loc 2 248 3 view .LVU328
 1301 000a A86B     		ldr	r0, [r5, #56]
 1302              	.LVL92:
 1303              		.loc 2 248 3 view .LVU329
 1304 000c 511E     		subs	r1, r2, #1
 1305              	.LVL93:
 1306              		.loc 2 248 3 view .LVU330
 1307 000e 9847     		blx	r3
 1308              	.LVL94:
 249:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1309              		.loc 2 249 3 is_stmt 1 view .LVU331
 1310 0010 A86B     		ldr	r0, [r5, #56]
 1311 0012 084B     		ldr	r3, .L119+8
 1312              		.loc 2 249 33 is_stmt 0 view .LVU332
 1313 0014 0168     		ldr	r1, [r0]
 1314              		.loc 2 249 3 view .LVU333
 1315 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1316              		.loc 2 249 33 view .LVU334
 1317 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1318              		.loc 2 249 43 view .LVU335
 1319 001c 013C     		subs	r4, r4, #1
 1320              	.LVL95:
 1321              		.loc 2 249 40 view .LVU336
 1322 001e 04FB01F1 		mul	r1, r4, r1
 1323              		.loc 2 249 3 view .LVU337
 1324 0022 1431     		adds	r1, r1, #20
 250:src/console.c **** }
 1325              		.loc 2 250 1 view .LVU338
 1326 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1327              		.cfi_restore 14
 1328              		.cfi_restore 6
 1329              		.cfi_restore 5
 1330              		.cfi_restore 4
 1331              		.cfi_def_cfa_offset 0
 1332              	.LVL96:
 249:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1333              		.loc 2 249 3 view .LVU339
 1334 0028 1847     		bx	r3	@ indirect register sibling call
 1335              	.LVL97:
 1336              	.L120:
 1337 002a 00BF     		.align	2
 1338              	.L119:
 1339 002c 00200010 		.word	268443648
 1340 0030 69020008 		.word	134218345
ARM GAS  /tmp/ccwJS9HW.s 			page 38


 1341 0034 6D020008 		.word	134218349
 1342              		.cfi_endproc
 1343              	.LFE19:
 1345              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1346              		.align	2
 1347              	.LC1:
 1348 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1348      673A2025 
 1348      34692C25 
 1348      346900
 1349              		.section	.text.print_debug,"ax",%progbits
 1350              		.align	1
 1351              		.p2align 2,,3
 1352              		.global	print_debug
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	print_debug:
 1359              	.LVL98:
 1360              	.LFB20:
 251:src/console.c **** 
 252:src/console.c **** void print_debug (int i, int j) {
 1361              		.loc 2 252 33 is_stmt 1 view -0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 8
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****   strcpy( print_string, spaces );
 1365              		.loc 2 253 3 view .LVU341
 252:src/console.c ****   strcpy( print_string, spaces );
 1366              		.loc 2 252 33 is_stmt 0 view .LVU342
 1367 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1368              		.cfi_def_cfa_offset 24
 1369              		.cfi_offset 4, -24
 1370              		.cfi_offset 5, -20
 1371              		.cfi_offset 6, -16
 1372              		.cfi_offset 7, -12
 1373              		.cfi_offset 8, -8
 1374              		.cfi_offset 14, -4
 1375              		.loc 2 253 3 view .LVU343
 1376 0004 174C     		ldr	r4, .L123
 1377 0006 184F     		ldr	r7, .L123+4
 254:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 255:src/console.c ****   moveto (3, 1);
 256:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1378              		.loc 2 256 3 view .LVU344
 1379 0008 184E     		ldr	r6, .L123+8
 1380 000a 194D     		ldr	r5, .L123+12
 257:src/console.c ****   lcd_refresh();
 1381              		.loc 2 257 3 view .LVU345
 1382 000c DFF86C80 		ldr	r8, .L123+24
 252:src/console.c ****   strcpy( print_string, spaces );
 1383              		.loc 2 252 33 view .LVU346
 1384 0010 82B0     		sub	sp, sp, #8
 1385              		.cfi_def_cfa_offset 32
 252:src/console.c ****   strcpy( print_string, spaces );
 1386              		.loc 2 252 33 view .LVU347
ARM GAS  /tmp/ccwJS9HW.s 			page 39


 1387 0012 0190     		str	r0, [sp, #4]
 1388 0014 0091     		str	r1, [sp]
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1389              		.loc 2 253 3 view .LVU348
 1390 0016 2046     		mov	r0, r4
 1391              	.LVL99:
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1392              		.loc 2 253 3 view .LVU349
 1393 0018 3946     		mov	r1, r7
 1394              	.LVL100:
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1395              		.loc 2 253 3 view .LVU350
 1396 001a FFF7FEFF 		bl	strcpy
 1397              	.LVL101:
 254:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1398              		.loc 2 254 3 is_stmt 1 view .LVU351
 1399 001e DDE90032 		ldrd	r3, r2, [sp]
 1400 0022 1449     		ldr	r1, .L123+16
 1401 0024 2046     		mov	r0, r4
 1402 0026 FFF7FEFF 		bl	sprintf
 1403              	.LVL102:
 255:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1404              		.loc 2 255 3 view .LVU352
 1405 002a 0121     		movs	r1, #1
 1406 002c 0320     		movs	r0, #3
 1407 002e FFF7FEFF 		bl	moveto
 1408              	.LVL103:
 256:src/console.c ****   lcd_refresh();
 1409              		.loc 2 256 3 view .LVU353
 1410 0032 2146     		mov	r1, r4
 1411 0034 B06B     		ldr	r0, [r6, #56]
 1412 0036 A847     		blx	r5
 1413              	.LVL104:
 1414              		.loc 2 257 3 view .LVU354
 1415 0038 C047     		blx	r8
 1416              	.LVL105:
 258:src/console.c ****   sys_delay (2500);
 1417              		.loc 2 258 3 view .LVU355
 1418 003a 0F4B     		ldr	r3, .L123+20
 1419 003c 40F6C410 		movw	r0, #2500
 1420 0040 9847     		blx	r3
 1421              	.LVL106:
 259:src/console.c ****   /* wait_for_key_press(); */
 260:src/console.c ****   //  key_pop_all();
 261:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 262:src/console.c ****   // key_pop_all();
 263:src/console.c ****   strcpy( print_string, spaces );
 1422              		.loc 2 263 3 view .LVU356
 1423 0042 3946     		mov	r1, r7
 1424 0044 2046     		mov	r0, r4
 1425 0046 FFF7FEFF 		bl	strcpy
 1426              	.LVL107:
 264:src/console.c ****   moveto (3, 1);
 1427              		.loc 2 264 3 view .LVU357
 1428 004a 0121     		movs	r1, #1
 1429 004c 0320     		movs	r0, #3
 1430 004e FFF7FEFF 		bl	moveto
ARM GAS  /tmp/ccwJS9HW.s 			page 40


 1431              	.LVL108:
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1432              		.loc 2 265 3 view .LVU358
 1433 0052 B06B     		ldr	r0, [r6, #56]
 1434 0054 2146     		mov	r1, r4
 1435 0056 A847     		blx	r5
 1436              	.LVL109:
 266:src/console.c ****   lcd_refresh();
 1437              		.loc 2 266 3 view .LVU359
 1438 0058 4346     		mov	r3, r8
 267:src/console.c ****   // while (key_empty()<=0);; // wait for release
 268:src/console.c ****   // key_pop_all();
 269:src/console.c **** }
 1439              		.loc 2 269 1 is_stmt 0 view .LVU360
 1440 005a 02B0     		add	sp, sp, #8
 1441              		.cfi_def_cfa_offset 24
 1442              	.LVL110:
 1443              		.loc 2 269 1 view .LVU361
 1444              		@ sp needed
 1445 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1446              		.cfi_restore 14
 1447              		.cfi_restore 8
 1448              		.cfi_restore 7
 1449              		.cfi_restore 6
 1450              		.cfi_restore 5
 1451              		.cfi_restore 4
 1452              		.cfi_def_cfa_offset 0
 1453              	.LVL111:
 266:src/console.c ****   lcd_refresh();
 1454              		.loc 2 266 3 view .LVU362
 1455 0060 1847     		bx	r3	@ indirect register sibling call
 1456              	.LVL112:
 1457              	.L124:
 1458 0062 00BF     		.align	2
 1459              	.L123:
 1460 0064 00000000 		.word	print_string
 1461 0068 00000000 		.word	.LANCHOR5
 1462 006c 00200010 		.word	268443648
 1463 0070 B1020008 		.word	134218417
 1464 0074 00000000 		.word	.LC1
 1465 0078 05040008 		.word	134218757
 1466 007c 31020008 		.word	134218289
 1467              		.cfi_endproc
 1468              	.LFE20:
 1470              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1471              		.align	2
 1472              	.LC2:
 1473 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1473      692C2531 
 1473      337300
 1474              		.section	.text.print_debug2,"ax",%progbits
 1475              		.align	1
 1476              		.p2align 2,,3
 1477              		.global	print_debug2
 1478              		.syntax unified
 1479              		.thumb
 1480              		.thumb_func
ARM GAS  /tmp/ccwJS9HW.s 			page 41


 1481              		.fpu fpv4-sp-d16
 1483              	print_debug2:
 1484              	.LVL113:
 1485              	.LFB21:
 270:src/console.c **** 
 271:src/console.c **** void print_debug2 (int i, char* j) {
 1486              		.loc 2 271 36 is_stmt 1 view -0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 8
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
 272:src/console.c ****   strcpy( print_string, spaces );
 1490              		.loc 2 272 3 view .LVU364
 271:src/console.c ****   strcpy( print_string, spaces );
 1491              		.loc 2 271 36 is_stmt 0 view .LVU365
 1492 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1493              		.cfi_def_cfa_offset 24
 1494              		.cfi_offset 4, -24
 1495              		.cfi_offset 5, -20
 1496              		.cfi_offset 6, -16
 1497              		.cfi_offset 7, -12
 1498              		.cfi_offset 8, -8
 1499              		.cfi_offset 14, -4
 1500              		.loc 2 272 3 view .LVU366
 1501 0004 174C     		ldr	r4, .L127
 1502 0006 184F     		ldr	r7, .L127+4
 273:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 274:src/console.c ****   moveto (3, 1);
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1503              		.loc 2 275 3 view .LVU367
 1504 0008 184E     		ldr	r6, .L127+8
 1505 000a 194D     		ldr	r5, .L127+12
 276:src/console.c ****   lcd_refresh();
 1506              		.loc 2 276 3 view .LVU368
 1507 000c DFF86C80 		ldr	r8, .L127+24
 271:src/console.c ****   strcpy( print_string, spaces );
 1508              		.loc 2 271 36 view .LVU369
 1509 0010 82B0     		sub	sp, sp, #8
 1510              		.cfi_def_cfa_offset 32
 271:src/console.c ****   strcpy( print_string, spaces );
 1511              		.loc 2 271 36 view .LVU370
 1512 0012 0190     		str	r0, [sp, #4]
 1513 0014 0091     		str	r1, [sp]
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1514              		.loc 2 272 3 view .LVU371
 1515 0016 2046     		mov	r0, r4
 1516              	.LVL114:
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1517              		.loc 2 272 3 view .LVU372
 1518 0018 3946     		mov	r1, r7
 1519              	.LVL115:
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1520              		.loc 2 272 3 view .LVU373
 1521 001a FFF7FEFF 		bl	strcpy
 1522              	.LVL116:
 273:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1523              		.loc 2 273 3 is_stmt 1 view .LVU374
 1524 001e DDE90032 		ldrd	r3, r2, [sp]
ARM GAS  /tmp/ccwJS9HW.s 			page 42


 1525 0022 1449     		ldr	r1, .L127+16
 1526 0024 2046     		mov	r0, r4
 1527 0026 FFF7FEFF 		bl	sprintf
 1528              	.LVL117:
 274:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1529              		.loc 2 274 3 view .LVU375
 1530 002a 0121     		movs	r1, #1
 1531 002c 0320     		movs	r0, #3
 1532 002e FFF7FEFF 		bl	moveto
 1533              	.LVL118:
 275:src/console.c ****   lcd_refresh();
 1534              		.loc 2 275 3 view .LVU376
 1535 0032 2146     		mov	r1, r4
 1536 0034 B06B     		ldr	r0, [r6, #56]
 1537 0036 A847     		blx	r5
 1538              	.LVL119:
 1539              		.loc 2 276 3 view .LVU377
 1540 0038 C047     		blx	r8
 1541              	.LVL120:
 277:src/console.c ****   sys_delay (2500);
 1542              		.loc 2 277 3 view .LVU378
 1543 003a 0F4B     		ldr	r3, .L127+20
 1544 003c 40F6C410 		movw	r0, #2500
 1545 0040 9847     		blx	r3
 1546              	.LVL121:
 278:src/console.c ****   /* wait_for_key_press(); */
 279:src/console.c ****   //  key_pop_all();
 280:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 281:src/console.c ****   // key_pop_all();
 282:src/console.c ****   strcpy( print_string, spaces );
 1547              		.loc 2 282 3 view .LVU379
 1548 0042 3946     		mov	r1, r7
 1549 0044 2046     		mov	r0, r4
 1550 0046 FFF7FEFF 		bl	strcpy
 1551              	.LVL122:
 283:src/console.c ****   moveto (3, 1);
 1552              		.loc 2 283 3 view .LVU380
 1553 004a 0121     		movs	r1, #1
 1554 004c 0320     		movs	r0, #3
 1555 004e FFF7FEFF 		bl	moveto
 1556              	.LVL123:
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1557              		.loc 2 284 3 view .LVU381
 1558 0052 B06B     		ldr	r0, [r6, #56]
 1559 0054 2146     		mov	r1, r4
 1560 0056 A847     		blx	r5
 1561              	.LVL124:
 285:src/console.c ****   lcd_refresh();
 1562              		.loc 2 285 3 view .LVU382
 1563 0058 4346     		mov	r3, r8
 286:src/console.c ****   // while (key_empty()<=0);; // wait for release
 287:src/console.c ****   // key_pop_all();
 288:src/console.c **** }
 1564              		.loc 2 288 1 is_stmt 0 view .LVU383
 1565 005a 02B0     		add	sp, sp, #8
 1566              		.cfi_def_cfa_offset 24
 1567              	.LVL125:
ARM GAS  /tmp/ccwJS9HW.s 			page 43


 1568              		.loc 2 288 1 view .LVU384
 1569              		@ sp needed
 1570 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1571              		.cfi_restore 14
 1572              		.cfi_restore 8
 1573              		.cfi_restore 7
 1574              		.cfi_restore 6
 1575              		.cfi_restore 5
 1576              		.cfi_restore 4
 1577              		.cfi_def_cfa_offset 0
 1578              	.LVL126:
 285:src/console.c ****   lcd_refresh();
 1579              		.loc 2 285 3 view .LVU385
 1580 0060 1847     		bx	r3	@ indirect register sibling call
 1581              	.LVL127:
 1582              	.L128:
 1583 0062 00BF     		.align	2
 1584              	.L127:
 1585 0064 00000000 		.word	print_string
 1586 0068 00000000 		.word	.LANCHOR5
 1587 006c 00200010 		.word	268443648
 1588 0070 B1020008 		.word	134218417
 1589 0074 00000000 		.word	.LC2
 1590 0078 05040008 		.word	134218757
 1591 007c 31020008 		.word	134218289
 1592              		.cfi_endproc
 1593              	.LFE21:
 1595              		.section	.text.do_now,"ax",%progbits
 1596              		.align	1
 1597              		.p2align 2,,3
 1598              		.global	do_now
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv4-sp-d16
 1604              	do_now:
 1605              	.LVL128:
 1606              	.LFB22:
 289:src/console.c **** 
 290:src/console.c **** void do_now (int key, int shift) {
 1607              		.loc 2 290 34 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 8
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 291:src/console.c ****   struct _ndmap temp;
 1612              		.loc 2 291 3 view .LVU387
 292:src/console.c ****   temp.key_34s = key;
 1613              		.loc 2 292 3 view .LVU388
 290:src/console.c ****   struct _ndmap temp;
 1614              		.loc 2 290 34 is_stmt 0 view .LVU389
 1615 0000 82B0     		sub	sp, sp, #8
 1616              		.cfi_def_cfa_offset 8
 293:src/console.c ****   temp.shift = shift;
 294:src/console.c ****   process_keycode_with_shift (temp);
 1617              		.loc 2 294 3 view .LVU390
 1618 0002 02AB     		add	r3, sp, #8
ARM GAS  /tmp/ccwJS9HW.s 			page 44


 292:src/console.c ****   temp.shift = shift;
 1619              		.loc 2 292 16 view .LVU391
 1620 0004 8DF80000 		strb	r0, [sp]
 293:src/console.c ****   temp.shift = shift;
 1621              		.loc 2 293 3 is_stmt 1 view .LVU392
 293:src/console.c ****   temp.shift = shift;
 1622              		.loc 2 293 14 is_stmt 0 view .LVU393
 1623 0008 0191     		str	r1, [sp, #4]
 1624              		.loc 2 294 3 is_stmt 1 view .LVU394
 1625 000a 13E90300 		ldmdb	r3, {r0, r1}
 1626              	.LVL129:
 295:src/console.c **** }
 1627              		.loc 2 295 1 is_stmt 0 view .LVU395
 1628 000e 02B0     		add	sp, sp, #8
 1629              		.cfi_def_cfa_offset 0
 1630              		@ sp needed
 294:src/console.c **** }
 1631              		.loc 2 294 3 view .LVU396
 1632 0010 FFF7FEBF 		b	process_keycode_with_shift
 1633              	.LVL130:
 294:src/console.c **** }
 1634              		.loc 2 294 3 view .LVU397
 1635              		.cfi_endproc
 1636              	.LFE22:
 1638              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1639              		.align	2
 1640              	.LC3:
 1641 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1641      502F7770 
 1641      3334735F 
 1641      68656C70 
 1641      2E68746D 
 1642              		.section	.text.do_multi,"ax",%progbits
 1643              		.align	1
 1644              		.p2align 2,,3
 1645              		.global	do_multi
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu fpv4-sp-d16
 1651              	do_multi:
 1652              	.LVL131:
 1653              	.LFB23:
 296:src/console.c **** 
 297:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1654              		.loc 2 297 42 is_stmt 1 view -0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 16
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		.loc 2 297 42 is_stmt 0 view .LVU399
 1659 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1660              		.cfi_def_cfa_offset 24
 1661              		.cfi_offset 4, -24
 1662              		.cfi_offset 5, -20
 1663              		.cfi_offset 6, -16
 1664              		.cfi_offset 7, -12
 1665              		.cfi_offset 8, -8
ARM GAS  /tmp/ccwJS9HW.s 			page 45


 1666              		.cfi_offset 14, -4
 1667 0004 84B0     		sub	sp, sp, #16
 1668              		.cfi_def_cfa_offset 40
 1669              	.LVL132:
 298:src/console.c ****   switch(r.shift) {
 1670              		.loc 2 298 3 is_stmt 1 view .LVU400
 297:src/console.c ****   switch(r.shift) {
 1671              		.loc 2 297 42 is_stmt 0 view .LVU401
 1672 0006 6C46     		mov	r4, sp
 1673 0008 531E     		subs	r3, r2, #1
 1674 000a 84E80600 		stm	r4, {r1, r2}
 1675              	.LVL133:
 297:src/console.c ****   switch(r.shift) {
 1676              		.loc 2 297 42 view .LVU402
 1677 000e 0546     		mov	r5, r0
 1678 0010 0B2B     		cmp	r3, #11
 1679 0012 00F2AA80 		bhi	.L132
 1680 0016 DFE803F0 		tbb	[pc, r3]
 1681              	.L134:
 1682 001a 29       		.byte	(.L145-.L134)/2
 1683 001b 47       		.byte	(.L144-.L134)/2
 1684 001c 51       		.byte	(.L143-.L134)/2
 1685 001d 5B       		.byte	(.L142-.L134)/2
 1686 001e 65       		.byte	(.L141-.L134)/2
 1687 001f 6F       		.byte	(.L140-.L134)/2
 1688 0020 79       		.byte	(.L139-.L134)/2
 1689 0021 83       		.byte	(.L138-.L134)/2
 1690 0022 8C       		.byte	(.L137-.L134)/2
 1691 0023 96       		.byte	(.L136-.L134)/2
 1692 0024 9F       		.byte	(.L135-.L134)/2
 1693 0025 06       		.byte	(.L133-.L134)/2
 1694              		.p2align 1
 1695              	.L133:
 299:src/console.c ****   case LASTX: // Last x via RCL L
 300:src/console.c ****     do_now (K11, 0); // RCL
 301:src/console.c ****     do_now (K_RELEASE,0); // release
 302:src/console.c ****     do_now (K15,0); // TAN key
 303:src/console.c ****     r.key_34s = K_RELEASE;
 304:src/console.c ****     r.shift = 0; // set up for release;
 305:src/console.c ****     break;
 306:src/console.c ****   case ONSTO: // flash_backup()
 307:src/console.c ****     flash_backup(OP_SAVE);
 308:src/console.c ****     r = no_key;
 309:src/console.c ****     break;
 310:src/console.c ****   case ONRCL: // flash_restore()
 311:src/console.c ****     flash_restore(OP_LOAD);
 312:src/console.c ****     r = no_key;
 313:src/console.c ****     break;
 314:src/console.c ****   case WRLIB: // save library file
 315:src/console.c ****     save_lib_file(1);
 316:src/console.c ****     r = no_key;
 317:src/console.c ****     break;
 318:src/console.c ****   case LLIB: // load library file
 319:src/console.c ****     load_lib_file(1);
 320:src/console.c ****     r = no_key;
 321:src/console.c ****     break;
 322:src/console.c ****   case WRTST: // save state file
ARM GAS  /tmp/ccwJS9HW.s 			page 46


 323:src/console.c ****     save_ram_file(1);
 324:src/console.c ****     r = no_key;
 325:src/console.c ****     break;
 326:src/console.c ****   case LDST:
 327:src/console.c ****     load_ram_file(1);
 328:src/console.c ****     r = no_key;
 329:src/console.c ****     break;
 330:src/console.c ****   case LDPRG:
 331:src/console.c ****     load_prog_file();
 332:src/console.c ****     r = no_key;
 333:src/console.c ****     break;
 334:src/console.c ****   case SVPRG:
 335:src/console.c ****     save_prog_file();
 336:src/console.c ****     r = no_key;
 337:src/console.c ****     break;
 338:src/console.c ****   case HELP:
 339:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 340:src/console.c ****     r = no_key;
 341:src/console.c ****     break;
 342:src/console.c ****   case DOTS:
 343:src/console.c ****     do_all_dots();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 347:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 1696              		.loc 2 347 5 is_stmt 1 view .LVU403
 1697              	.LVL134:
 1698              	.LBB86:
 1699              	.LBI86:
 290:src/console.c ****   struct _ndmap temp;
 1700              		.loc 2 290 6 view .LVU404
 1701              	.LBB87:
 291:src/console.c ****   temp.key_34s = key;
 1702              		.loc 2 291 3 view .LVU405
 292:src/console.c ****   temp.shift = shift;
 1703              		.loc 2 292 3 view .LVU406
 292:src/console.c ****   temp.shift = shift;
 1704              		.loc 2 292 16 is_stmt 0 view .LVU407
 1705 0026 6323     		movs	r3, #99
 293:src/console.c ****   process_keycode_with_shift (temp);
 1706              		.loc 2 293 14 view .LVU408
 1707 0028 0027     		movs	r7, #0
 292:src/console.c ****   temp.shift = shift;
 1708              		.loc 2 292 16 view .LVU409
 1709 002a 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1710              		.loc 2 293 3 is_stmt 1 view .LVU410
 293:src/console.c ****   process_keycode_with_shift (temp);
 1711              		.loc 2 293 14 is_stmt 0 view .LVU411
 1712 002e 0397     		str	r7, [sp, #12]
 294:src/console.c **** }
 1713              		.loc 2 294 3 is_stmt 1 view .LVU412
 1714 0030 02AE     		add	r6, sp, #8
 1715 0032 96E80300 		ldm	r6, {r0, r1}
 1716              	.LVL135:
 294:src/console.c **** }
 1717              		.loc 2 294 3 is_stmt 0 view .LVU413
ARM GAS  /tmp/ccwJS9HW.s 			page 47


 1718 0036 FFF7FEFF 		bl	process_keycode_with_shift
 1719              	.LVL136:
 294:src/console.c **** }
 1720              		.loc 2 294 3 view .LVU414
 1721              	.LBE87:
 1722              	.LBE86:
 348:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 1723              		.loc 2 348 5 is_stmt 1 view .LVU415
 1724              	.LBB88:
 1725              	.LBI88:
 290:src/console.c ****   struct _ndmap temp;
 1726              		.loc 2 290 6 view .LVU416
 1727              	.LBB89:
 291:src/console.c ****   temp.key_34s = key;
 1728              		.loc 2 291 3 view .LVU417
 292:src/console.c ****   temp.shift = shift;
 1729              		.loc 2 292 3 view .LVU418
 292:src/console.c ****   temp.shift = shift;
 1730              		.loc 2 292 16 is_stmt 0 view .LVU419
 1731 003a 3323     		movs	r3, #51
 1732 003c 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1733              		.loc 2 293 3 is_stmt 1 view .LVU420
 294:src/console.c **** }
 1734              		.loc 2 294 3 view .LVU421
 293:src/console.c ****   process_keycode_with_shift (temp);
 1735              		.loc 2 293 14 is_stmt 0 view .LVU422
 1736 0040 0397     		str	r7, [sp, #12]
 294:src/console.c **** }
 1737              		.loc 2 294 3 view .LVU423
 1738 0042 96E80300 		ldm	r6, {r0, r1}
 1739 0046 FFF7FEFF 		bl	process_keycode_with_shift
 1740              	.LVL137:
 294:src/console.c **** }
 1741              		.loc 2 294 3 view .LVU424
 1742              	.LBE89:
 1743              	.LBE88:
 349:src/console.c ****     r = no_key;
 1744              		.loc 2 349 5 is_stmt 1 view .LVU425
 1745              		.loc 2 349 7 is_stmt 0 view .LVU426
 1746 004a 4B4B     		ldr	r3, .L148
 1747 004c 93E80300 		ldm	r3, {r0, r1}
 1748 0050 84E80300 		stm	r4, {r0, r1}
 1749 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1750              	.LVL138:
 350:src/console.c ****     break;
 1751              		.loc 2 350 5 is_stmt 1 view .LVU427
 1752              	.L146:
 351:src/console.c ****   default:
 352:src/console.c ****     r = no_key;
 353:src/console.c ****   }
 354:src/console.c ****   return r;
 1753              		.loc 2 354 3 view .LVU428
 1754              		.loc 2 354 10 is_stmt 0 view .LVU429
 1755 0056 8DF80030 		strb	r3, [sp]
 1756 005a 0191     		str	r1, [sp, #4]
 1757 005c 94E80300 		ldm	r4, {r0, r1}
ARM GAS  /tmp/ccwJS9HW.s 			page 48


 1758              	.LVL139:
 1759              		.loc 2 354 10 view .LVU430
 1760 0060 85E80300 		stm	r5, {r0, r1}
 355:src/console.c **** }
 1761              		.loc 2 355 1 view .LVU431
 1762 0064 2846     		mov	r0, r5
 1763 0066 04B0     		add	sp, sp, #16
 1764              		.cfi_remember_state
 1765              		.cfi_def_cfa_offset 24
 1766              		@ sp needed
 1767 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1768              	.LVL140:
 1769              	.L145:
 1770              		.cfi_restore_state
 300:src/console.c ****     do_now (K_RELEASE,0); // release
 1771              		.loc 2 300 5 is_stmt 1 view .LVU432
 1772              	.LBB90:
 1773              	.LBI90:
 290:src/console.c ****   struct _ndmap temp;
 1774              		.loc 2 290 6 view .LVU433
 1775              	.LBB91:
 291:src/console.c ****   temp.key_34s = key;
 1776              		.loc 2 291 3 view .LVU434
 292:src/console.c ****   temp.shift = shift;
 1777              		.loc 2 292 3 view .LVU435
 292:src/console.c ****   temp.shift = shift;
 1778              		.loc 2 292 16 is_stmt 0 view .LVU436
 1779 006c 0723     		movs	r3, #7
 293:src/console.c ****   process_keycode_with_shift (temp);
 1780              		.loc 2 293 14 view .LVU437
 1781 006e 0026     		movs	r6, #0
 292:src/console.c ****   temp.shift = shift;
 1782              		.loc 2 292 16 view .LVU438
 1783 0070 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1784              		.loc 2 293 3 is_stmt 1 view .LVU439
 294:src/console.c **** }
 1785              		.loc 2 294 3 is_stmt 0 view .LVU440
 1786 0074 0DF10808 		add	r8, sp, #8
 293:src/console.c ****   process_keycode_with_shift (temp);
 1787              		.loc 2 293 14 view .LVU441
 1788 0078 0396     		str	r6, [sp, #12]
 294:src/console.c **** }
 1789              		.loc 2 294 3 is_stmt 1 view .LVU442
 1790 007a 98E80300 		ldm	r8, {r0, r1}
 1791              	.LVL141:
 294:src/console.c **** }
 1792              		.loc 2 294 3 is_stmt 0 view .LVU443
 1793              	.LBE91:
 1794              	.LBE90:
 1795              	.LBB93:
 1796              	.LBB94:
 292:src/console.c ****   temp.shift = shift;
 1797              		.loc 2 292 16 view .LVU444
 1798 007e 6327     		movs	r7, #99
 1799              	.LBE94:
 1800              	.LBE93:
ARM GAS  /tmp/ccwJS9HW.s 			page 49


 1801              	.LBB96:
 1802              	.LBB92:
 294:src/console.c **** }
 1803              		.loc 2 294 3 view .LVU445
 1804 0080 FFF7FEFF 		bl	process_keycode_with_shift
 1805              	.LVL142:
 294:src/console.c **** }
 1806              		.loc 2 294 3 view .LVU446
 1807              	.LBE92:
 1808              	.LBE96:
 301:src/console.c ****     do_now (K15,0); // TAN key
 1809              		.loc 2 301 5 is_stmt 1 view .LVU447
 1810              	.LBB97:
 1811              	.LBI93:
 290:src/console.c ****   struct _ndmap temp;
 1812              		.loc 2 290 6 view .LVU448
 1813              	.LBB95:
 291:src/console.c ****   temp.key_34s = key;
 1814              		.loc 2 291 3 view .LVU449
 292:src/console.c ****   temp.shift = shift;
 1815              		.loc 2 292 3 view .LVU450
 293:src/console.c ****   process_keycode_with_shift (temp);
 1816              		.loc 2 293 14 is_stmt 0 view .LVU451
 1817 0084 0396     		str	r6, [sp, #12]
 292:src/console.c ****   temp.shift = shift;
 1818              		.loc 2 292 16 view .LVU452
 1819 0086 8DF80870 		strb	r7, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1820              		.loc 2 293 3 is_stmt 1 view .LVU453
 294:src/console.c **** }
 1821              		.loc 2 294 3 view .LVU454
 1822 008a 98E80300 		ldm	r8, {r0, r1}
 1823 008e FFF7FEFF 		bl	process_keycode_with_shift
 1824              	.LVL143:
 294:src/console.c **** }
 1825              		.loc 2 294 3 is_stmt 0 view .LVU455
 1826              	.LBE95:
 1827              	.LBE97:
 302:src/console.c ****     r.key_34s = K_RELEASE;
 1828              		.loc 2 302 5 is_stmt 1 view .LVU456
 1829              	.LBB98:
 1830              	.LBI98:
 290:src/console.c ****   struct _ndmap temp;
 1831              		.loc 2 290 6 view .LVU457
 1832              	.LBB99:
 291:src/console.c ****   temp.key_34s = key;
 1833              		.loc 2 291 3 view .LVU458
 292:src/console.c ****   temp.shift = shift;
 1834              		.loc 2 292 3 view .LVU459
 292:src/console.c ****   temp.shift = shift;
 1835              		.loc 2 292 16 is_stmt 0 view .LVU460
 1836 0092 0B23     		movs	r3, #11
 1837 0094 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1838              		.loc 2 293 3 is_stmt 1 view .LVU461
 294:src/console.c **** }
 1839              		.loc 2 294 3 view .LVU462
ARM GAS  /tmp/ccwJS9HW.s 			page 50


 293:src/console.c ****   process_keycode_with_shift (temp);
 1840              		.loc 2 293 14 is_stmt 0 view .LVU463
 1841 0098 0396     		str	r6, [sp, #12]
 294:src/console.c **** }
 1842              		.loc 2 294 3 view .LVU464
 1843 009a 98E80300 		ldm	r8, {r0, r1}
 1844 009e FFF7FEFF 		bl	process_keycode_with_shift
 1845              	.LVL144:
 294:src/console.c **** }
 1846              		.loc 2 294 3 view .LVU465
 1847              	.LBE99:
 1848              	.LBE98:
 303:src/console.c ****     r.shift = 0; // set up for release;
 1849              		.loc 2 303 5 is_stmt 1 view .LVU466
 304:src/console.c ****     break;
 1850              		.loc 2 304 5 view .LVU467
 305:src/console.c ****   case ONSTO: // flash_backup()
 1851              		.loc 2 305 5 view .LVU468
 304:src/console.c ****     break;
 1852              		.loc 2 304 13 is_stmt 0 view .LVU469
 1853 00a2 3146     		mov	r1, r6
 303:src/console.c ****     r.shift = 0; // set up for release;
 1854              		.loc 2 303 15 view .LVU470
 1855 00a4 3B46     		mov	r3, r7
 305:src/console.c ****   case ONSTO: // flash_backup()
 1856              		.loc 2 305 5 view .LVU471
 1857 00a6 D6E7     		b	.L146
 1858              	.LVL145:
 1859              	.L144:
 307:src/console.c ****     r = no_key;
 1860              		.loc 2 307 5 is_stmt 1 view .LVU472
 1861 00a8 AD20     		movs	r0, #173
 1862              	.LVL146:
 307:src/console.c ****     r = no_key;
 1863              		.loc 2 307 5 is_stmt 0 view .LVU473
 1864 00aa FFF7FEFF 		bl	flash_backup
 1865              	.LVL147:
 308:src/console.c ****     break;
 1866              		.loc 2 308 5 is_stmt 1 view .LVU474
 308:src/console.c ****     break;
 1867              		.loc 2 308 7 is_stmt 0 view .LVU475
 1868 00ae 324B     		ldr	r3, .L148
 1869 00b0 93E80300 		ldm	r3, {r0, r1}
 1870 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1871              	.LVL148:
 309:src/console.c ****   case ONRCL: // flash_restore()
 1872              		.loc 2 309 5 is_stmt 1 view .LVU476
 308:src/console.c ****     break;
 1873              		.loc 2 308 7 is_stmt 0 view .LVU477
 1874 00b6 84E80300 		stm	r4, {r0, r1}
 309:src/console.c ****   case ONRCL: // flash_restore()
 1875              		.loc 2 309 5 view .LVU478
 1876 00ba CCE7     		b	.L146
 1877              	.LVL149:
 1878              	.L143:
 311:src/console.c ****     r = no_key;
 1879              		.loc 2 311 5 is_stmt 1 view .LVU479
ARM GAS  /tmp/ccwJS9HW.s 			page 51


 1880 00bc AE20     		movs	r0, #174
 1881              	.LVL150:
 311:src/console.c ****     r = no_key;
 1882              		.loc 2 311 5 is_stmt 0 view .LVU480
 1883 00be FFF7FEFF 		bl	flash_restore
 1884              	.LVL151:
 312:src/console.c ****     break;
 1885              		.loc 2 312 5 is_stmt 1 view .LVU481
 312:src/console.c ****     break;
 1886              		.loc 2 312 7 is_stmt 0 view .LVU482
 1887 00c2 2D4B     		ldr	r3, .L148
 1888 00c4 93E80300 		ldm	r3, {r0, r1}
 1889 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1890              	.LVL152:
 313:src/console.c ****   case WRLIB: // save library file
 1891              		.loc 2 313 5 is_stmt 1 view .LVU483
 312:src/console.c ****     break;
 1892              		.loc 2 312 7 is_stmt 0 view .LVU484
 1893 00ca 84E80300 		stm	r4, {r0, r1}
 313:src/console.c ****   case WRLIB: // save library file
 1894              		.loc 2 313 5 view .LVU485
 1895 00ce C2E7     		b	.L146
 1896              	.LVL153:
 1897              	.L142:
 315:src/console.c ****     r = no_key;
 1898              		.loc 2 315 5 is_stmt 1 view .LVU486
 1899 00d0 0120     		movs	r0, #1
 1900              	.LVL154:
 315:src/console.c ****     r = no_key;
 1901              		.loc 2 315 5 is_stmt 0 view .LVU487
 1902 00d2 FFF7FEFF 		bl	save_lib_file
 1903              	.LVL155:
 316:src/console.c ****     break;
 1904              		.loc 2 316 5 is_stmt 1 view .LVU488
 316:src/console.c ****     break;
 1905              		.loc 2 316 7 is_stmt 0 view .LVU489
 1906 00d6 284B     		ldr	r3, .L148
 1907 00d8 93E80300 		ldm	r3, {r0, r1}
 1908 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1909              	.LVL156:
 317:src/console.c ****   case LLIB: // load library file
 1910              		.loc 2 317 5 is_stmt 1 view .LVU490
 316:src/console.c ****     break;
 1911              		.loc 2 316 7 is_stmt 0 view .LVU491
 1912 00de 84E80300 		stm	r4, {r0, r1}
 317:src/console.c ****   case LLIB: // load library file
 1913              		.loc 2 317 5 view .LVU492
 1914 00e2 B8E7     		b	.L146
 1915              	.LVL157:
 1916              	.L141:
 319:src/console.c ****     r = no_key;
 1917              		.loc 2 319 5 is_stmt 1 view .LVU493
 1918 00e4 0120     		movs	r0, #1
 1919              	.LVL158:
 319:src/console.c ****     r = no_key;
 1920              		.loc 2 319 5 is_stmt 0 view .LVU494
 1921 00e6 FFF7FEFF 		bl	load_lib_file
ARM GAS  /tmp/ccwJS9HW.s 			page 52


 1922              	.LVL159:
 320:src/console.c ****     break;
 1923              		.loc 2 320 5 is_stmt 1 view .LVU495
 320:src/console.c ****     break;
 1924              		.loc 2 320 7 is_stmt 0 view .LVU496
 1925 00ea 234B     		ldr	r3, .L148
 1926 00ec 93E80300 		ldm	r3, {r0, r1}
 1927 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1928              	.LVL160:
 321:src/console.c ****   case WRTST: // save state file
 1929              		.loc 2 321 5 is_stmt 1 view .LVU497
 320:src/console.c ****     break;
 1930              		.loc 2 320 7 is_stmt 0 view .LVU498
 1931 00f2 84E80300 		stm	r4, {r0, r1}
 321:src/console.c ****   case WRTST: // save state file
 1932              		.loc 2 321 5 view .LVU499
 1933 00f6 AEE7     		b	.L146
 1934              	.LVL161:
 1935              	.L140:
 323:src/console.c ****     r = no_key;
 1936              		.loc 2 323 5 is_stmt 1 view .LVU500
 1937 00f8 0120     		movs	r0, #1
 1938              	.LVL162:
 323:src/console.c ****     r = no_key;
 1939              		.loc 2 323 5 is_stmt 0 view .LVU501
 1940 00fa FFF7FEFF 		bl	save_ram_file
 1941              	.LVL163:
 324:src/console.c ****     break;
 1942              		.loc 2 324 5 is_stmt 1 view .LVU502
 324:src/console.c ****     break;
 1943              		.loc 2 324 7 is_stmt 0 view .LVU503
 1944 00fe 1E4B     		ldr	r3, .L148
 1945 0100 93E80300 		ldm	r3, {r0, r1}
 1946 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1947              	.LVL164:
 325:src/console.c ****   case LDST:
 1948              		.loc 2 325 5 is_stmt 1 view .LVU504
 324:src/console.c ****     break;
 1949              		.loc 2 324 7 is_stmt 0 view .LVU505
 1950 0106 84E80300 		stm	r4, {r0, r1}
 325:src/console.c ****   case LDST:
 1951              		.loc 2 325 5 view .LVU506
 1952 010a A4E7     		b	.L146
 1953              	.LVL165:
 1954              	.L139:
 327:src/console.c ****     r = no_key;
 1955              		.loc 2 327 5 is_stmt 1 view .LVU507
 1956 010c 0120     		movs	r0, #1
 1957              	.LVL166:
 327:src/console.c ****     r = no_key;
 1958              		.loc 2 327 5 is_stmt 0 view .LVU508
 1959 010e FFF7FEFF 		bl	load_ram_file
 1960              	.LVL167:
 328:src/console.c ****     break;
 1961              		.loc 2 328 5 is_stmt 1 view .LVU509
 328:src/console.c ****     break;
 1962              		.loc 2 328 7 is_stmt 0 view .LVU510
ARM GAS  /tmp/ccwJS9HW.s 			page 53


 1963 0112 194B     		ldr	r3, .L148
 1964 0114 93E80300 		ldm	r3, {r0, r1}
 1965 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1966              	.LVL168:
 329:src/console.c ****   case LDPRG:
 1967              		.loc 2 329 5 is_stmt 1 view .LVU511
 328:src/console.c ****     break;
 1968              		.loc 2 328 7 is_stmt 0 view .LVU512
 1969 011a 84E80300 		stm	r4, {r0, r1}
 329:src/console.c ****   case LDPRG:
 1970              		.loc 2 329 5 view .LVU513
 1971 011e 9AE7     		b	.L146
 1972              	.LVL169:
 1973              	.L138:
 331:src/console.c ****     r = no_key;
 1974              		.loc 2 331 5 is_stmt 1 view .LVU514
 1975 0120 FFF7FEFF 		bl	load_prog_file
 1976              	.LVL170:
 332:src/console.c ****     break;
 1977              		.loc 2 332 5 view .LVU515
 332:src/console.c ****     break;
 1978              		.loc 2 332 7 is_stmt 0 view .LVU516
 1979 0124 144B     		ldr	r3, .L148
 1980 0126 93E80300 		ldm	r3, {r0, r1}
 1981 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1982              	.LVL171:
 333:src/console.c ****   case SVPRG:
 1983              		.loc 2 333 5 is_stmt 1 view .LVU517
 332:src/console.c ****     break;
 1984              		.loc 2 332 7 is_stmt 0 view .LVU518
 1985 012c 84E80300 		stm	r4, {r0, r1}
 333:src/console.c ****   case SVPRG:
 1986              		.loc 2 333 5 view .LVU519
 1987 0130 91E7     		b	.L146
 1988              	.LVL172:
 1989              	.L137:
 339:src/console.c ****     r = no_key;
 1990              		.loc 2 339 5 is_stmt 1 view .LVU520
 1991 0132 124B     		ldr	r3, .L148+4
 1992 0134 1248     		ldr	r0, .L148+8
 1993              	.LVL173:
 339:src/console.c ****     r = no_key;
 1994              		.loc 2 339 5 is_stmt 0 view .LVU521
 1995 0136 9847     		blx	r3
 1996              	.LVL174:
 340:src/console.c ****     break;
 1997              		.loc 2 340 5 is_stmt 1 view .LVU522
 340:src/console.c ****     break;
 1998              		.loc 2 340 7 is_stmt 0 view .LVU523
 1999 0138 0F4B     		ldr	r3, .L148
 2000 013a 93E80300 		ldm	r3, {r0, r1}
 2001 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2002              	.LVL175:
 341:src/console.c ****   case DOTS:
 2003              		.loc 2 341 5 is_stmt 1 view .LVU524
 340:src/console.c ****     break;
 2004              		.loc 2 340 7 is_stmt 0 view .LVU525
ARM GAS  /tmp/ccwJS9HW.s 			page 54


 2005 0140 84E80300 		stm	r4, {r0, r1}
 341:src/console.c ****   case DOTS:
 2006              		.loc 2 341 5 view .LVU526
 2007 0144 87E7     		b	.L146
 2008              	.LVL176:
 2009              	.L136:
 335:src/console.c ****     r = no_key;
 2010              		.loc 2 335 5 is_stmt 1 view .LVU527
 2011 0146 FFF7FEFF 		bl	save_prog_file
 2012              	.LVL177:
 336:src/console.c ****     break;
 2013              		.loc 2 336 5 view .LVU528
 336:src/console.c ****     break;
 2014              		.loc 2 336 7 is_stmt 0 view .LVU529
 2015 014a 0B4B     		ldr	r3, .L148
 2016 014c 93E80300 		ldm	r3, {r0, r1}
 2017 0150 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2018              	.LVL178:
 337:src/console.c ****   case HELP:
 2019              		.loc 2 337 5 is_stmt 1 view .LVU530
 336:src/console.c ****     break;
 2020              		.loc 2 336 7 is_stmt 0 view .LVU531
 2021 0152 84E80300 		stm	r4, {r0, r1}
 337:src/console.c ****   case HELP:
 2022              		.loc 2 337 5 view .LVU532
 2023 0156 7EE7     		b	.L146
 2024              	.LVL179:
 2025              	.L135:
 343:src/console.c ****     r = no_key;
 2026              		.loc 2 343 5 is_stmt 1 view .LVU533
 2027 0158 FFF7FEFF 		bl	do_all_dots
 2028              	.LVL180:
 344:src/console.c ****     break;
 2029              		.loc 2 344 5 view .LVU534
 344:src/console.c ****     break;
 2030              		.loc 2 344 7 is_stmt 0 view .LVU535
 2031 015c 064B     		ldr	r3, .L148
 2032 015e 93E80300 		ldm	r3, {r0, r1}
 2033 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2034              	.LVL181:
 345:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2035              		.loc 2 345 5 is_stmt 1 view .LVU536
 344:src/console.c ****     break;
 2036              		.loc 2 344 7 is_stmt 0 view .LVU537
 2037 0164 84E80300 		stm	r4, {r0, r1}
 345:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2038              		.loc 2 345 5 view .LVU538
 2039 0168 75E7     		b	.L146
 2040              	.LVL182:
 2041              	.L132:
 352:src/console.c ****   }
 2042              		.loc 2 352 5 is_stmt 1 view .LVU539
 352:src/console.c ****   }
 2043              		.loc 2 352 7 is_stmt 0 view .LVU540
 2044 016a 034B     		ldr	r3, .L148
 2045 016c 93E80300 		ldm	r3, {r0, r1}
 2046              	.LVL183:
ARM GAS  /tmp/ccwJS9HW.s 			page 55


 352:src/console.c ****   }
 2047              		.loc 2 352 7 view .LVU541
 2048 0170 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2049              	.LVL184:
 352:src/console.c ****   }
 2050              		.loc 2 352 7 view .LVU542
 2051 0172 84E80300 		stm	r4, {r0, r1}
 2052 0176 6EE7     		b	.L146
 2053              	.L149:
 2054              		.align	2
 2055              	.L148:
 2056 0178 00000000 		.word	.LANCHOR6
 2057 017c 49040008 		.word	134218825
 2058 0180 00000000 		.word	.LC3
 2059              		.cfi_endproc
 2060              	.LFE23:
 2062              		.section	.text.program_main,"ax",%progbits
 2063              		.align	1
 2064              		.p2align 2,,3
 2065              		.global	program_main
 2066              		.syntax unified
 2067              		.thumb
 2068              		.thumb_func
 2069              		.fpu fpv4-sp-d16
 2071              	program_main:
 2072              	.LFB24:
 356:src/console.c **** 
 357:src/console.c **** void program_main(){
 2073              		.loc 2 357 20 is_stmt 1 view -0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 16
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/console.c ****   int c;
 2077              		.loc 2 358 3 view .LVU544
 359:src/console.c ****   struct _ndmap remapped;
 2078              		.loc 2 359 3 view .LVU545
 360:src/console.c **** 
 361:src/console.c ****   init_mem();
 2079              		.loc 2 361 3 view .LVU546
 357:src/console.c ****   int c;
 2080              		.loc 2 357 20 is_stmt 0 view .LVU547
 2081 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2082              		.cfi_def_cfa_offset 32
 2083              		.cfi_offset 4, -32
 2084              		.cfi_offset 5, -28
 2085              		.cfi_offset 6, -24
 2086              		.cfi_offset 7, -20
 2087              		.cfi_offset 8, -16
 2088              		.cfi_offset 9, -12
 2089              		.cfi_offset 10, -8
 2090              		.cfi_offset 14, -4
 2091 0004 84B0     		sub	sp, sp, #16
 2092              		.cfi_def_cfa_offset 48
 2093              		.loc 2 361 3 view .LVU548
 2094 0006 FFF7FEFF 		bl	init_mem
 2095              	.LVL185:
 362:src/console.c ****   init_RegionTab();
ARM GAS  /tmp/ccwJS9HW.s 			page 56


 2096              		.loc 2 362 3 is_stmt 1 view .LVU549
 2097 000a FFF7FEFF 		bl	init_RegionTab
 2098              	.LVL186:
 363:src/console.c ****   init_34s();
 2099              		.loc 2 363 3 view .LVU550
 2100 000e FFF7FEFF 		bl	init_34s
 2101              	.LVL187:
 364:src/console.c ****   State2.flags = 1;  
 2102              		.loc 2 364 3 view .LVU551
 2103              		.loc 2 364 16 is_stmt 0 view .LVU552
 2104 0012 AF4A     		ldr	r2, .L242
 2105 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2106 0016 43F00103 		orr	r3, r3, #1
 2107 001a 1376     		strb	r3, [r2, #24]
 365:src/console.c ****   check_create_wp34sdir();
 2108              		.loc 2 365 3 is_stmt 1 view .LVU553
 2109 001c FFF7FEFF 		bl	check_create_wp34sdir
 2110              	.LVL188:
 366:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2111              		.loc 2 366 3 view .LVU554
 2112              		.loc 2 366 8 is_stmt 0 view .LVU555
 2113 0020 0020     		movs	r0, #0
 2114 0022 FFF7FEFF 		bl	load_ram_file
 2115              	.LVL189:
 2116              		.loc 2 366 6 view .LVU556
 2117 0026 08B9     		cbnz	r0, .L151
 2118              		.loc 2 366 26 is_stmt 1 discriminator 1 view .LVU557
 2119              		.loc 2 366 34 is_stmt 0 discriminator 1 view .LVU558
 2120 0028 AA4B     		ldr	r3, .L242+4
 2121 002a 1860     		str	r0, [r3]
 2122              	.L151:
 367:src/console.c ****   load_backup_file(0);
 2123              		.loc 2 367 3 is_stmt 1 view .LVU559
 2124 002c 0020     		movs	r0, #0
 368:src/console.c ****   load_lib_file(0);
 369:src/console.c ****   t20->newln = 0;
 2125              		.loc 2 369 3 is_stmt 0 view .LVU560
 2126 002e AA4C     		ldr	r4, .L242+8
 2127              	.LBB115:
 2128              	.LBB116:
  22:src/menu.c    **** }
 2129              		.loc 1 22 3 view .LVU561
 2130 0030 AA4E     		ldr	r6, .L242+12
 2131              	.LBE116:
 2132              	.LBE115:
 370:src/console.c ****   t20->lnfill = 0;
 371:src/console.c ****   t20->fixed = 1;
 372:src/console.c ****   t20->xspc = -2;
 373:src/console.c ****   t20->bgfill = 0;
 374:src/console.c ****   
 375:src/console.c ****   display();
 376:src/console.c ****   display_current_menu();
 377:src/console.c ****   lcd_refresh();
 378:src/console.c ****   JustDisplayed = 0;
 379:src/console.c ****   /*
 380:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 381:src/console.c ****     Sleeps peacefully while waiting for a key.
ARM GAS  /tmp/ccwJS9HW.s 			page 57


 382:src/console.c ****     Handles (in principle!) turning off and on.
 383:src/console.c ****     =================
 384:src/console.c ****     Main event loop
 385:src/console.c ****     =================
 386:src/console.c **** 
 387:src/console.c ****     Status flags:
 388:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 389:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 390:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 391:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 392:src/console.c ****   */
 393:src/console.c ****   for(;;) {
 394:src/console.c **** 
 395:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 396:src/console.c ****       {
 397:src/console.c **** 	CLR_ST(STAT_RUNNING);
 398:src/console.c **** 	sys_sleep();
 399:src/console.c ****       }
 400:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2133              		.loc 2 400 35 view .LVU562
 2134 0032 AB4F     		ldr	r7, .L242+16
 401:src/console.c ****     {
 402:src/console.c ****       CLR_ST(STAT_RUNNING);
 403:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2135              		.loc 2 403 7 view .LVU563
 2136 0034 DFF81C83 		ldr	r8, .L242+132
 367:src/console.c ****   load_lib_file(0);
 2137              		.loc 2 367 3 view .LVU564
 2138 0038 FFF7FEFF 		bl	load_backup_file
 2139              	.LVL190:
 368:src/console.c ****   t20->newln = 0;
 2140              		.loc 2 368 3 is_stmt 1 view .LVU565
 2141 003c 0020     		movs	r0, #0
 2142 003e FFF7FEFF 		bl	load_lib_file
 2143              	.LVL191:
 369:src/console.c ****   t20->lnfill = 0;
 2144              		.loc 2 369 3 view .LVU566
 2145 0042 236B     		ldr	r3, [r4, #48]
 370:src/console.c ****   t20->fixed = 1;
 2146              		.loc 2 370 3 view .LVU567
 371:src/console.c ****   t20->xspc = -2;
 2147              		.loc 2 371 3 view .LVU568
 371:src/console.c ****   t20->xspc = -2;
 2148              		.loc 2 371 14 is_stmt 0 view .LVU569
 2149 0044 0122     		movs	r2, #1
 2150 0046 1A74     		strb	r2, [r3, #16]
 372:src/console.c ****   t20->bgfill = 0;
 2151              		.loc 2 372 3 is_stmt 1 view .LVU570
 373:src/console.c ****   
 2152              		.loc 2 373 15 is_stmt 0 view .LVU571
 2153 0048 0025     		movs	r5, #0
 372:src/console.c ****   t20->bgfill = 0;
 2154              		.loc 2 372 13 view .LVU572
 2155 004a FE22     		movs	r2, #254
 2156 004c 9A73     		strb	r2, [r3, #14]
 373:src/console.c ****   
 2157              		.loc 2 373 3 is_stmt 1 view .LVU573
ARM GAS  /tmp/ccwJS9HW.s 			page 58


 373:src/console.c ****   
 2158              		.loc 2 373 15 is_stmt 0 view .LVU574
 2159 004e 5D82     		strh	r5, [r3, #18]	@ movhi
 369:src/console.c ****   t20->lnfill = 0;
 2160              		.loc 2 369 14 view .LVU575
 2161 0050 1D75     		strb	r5, [r3, #20]
 375:src/console.c ****   display_current_menu();
 2162              		.loc 2 375 3 is_stmt 1 view .LVU576
 2163 0052 FFF7FEFF 		bl	display
 2164              	.LVL192:
 376:src/console.c ****   lcd_refresh();
 2165              		.loc 2 376 3 view .LVU577
 2166              	.LBB118:
 2167              	.LBI115:
  21:src/menu.c    ****   display_menu (current_menu);
 2168              		.loc 1 21 6 view .LVU578
 2169              	.LBB117:
  22:src/menu.c    **** }
 2170              		.loc 1 22 3 view .LVU579
 2171 0056 3068     		ldr	r0, [r6]
 2172 0058 FFF7FEFF 		bl	display_menu
 2173              	.LVL193:
 2174              	.LBE117:
 2175              	.LBE118:
 377:src/console.c ****   JustDisplayed = 0;
 2176              		.loc 2 377 3 view .LVU580
 2177 005c A14B     		ldr	r3, .L242+20
 2178 005e 9847     		blx	r3
 2179              	.LVL194:
 378:src/console.c ****   /*
 2180              		.loc 2 378 3 view .LVU581
 378:src/console.c ****   /*
 2181              		.loc 2 378 17 is_stmt 0 view .LVU582
 2182 0060 A14B     		ldr	r3, .L242+24
 2183 0062 1D60     		str	r5, [r3]
 2184              	.L152:
 393:src/console.c **** 
 2185              		.loc 2 393 3 is_stmt 1 view .LVU583
 395:src/console.c ****       {
 2186              		.loc 2 395 5 view .LVU584
 395:src/console.c ****       {
 2187              		.loc 2 395 10 is_stmt 0 view .LVU585
 2188 0064 2368     		ldr	r3, [r4]
 395:src/console.c ****       {
 2189              		.loc 2 395 8 view .LVU586
 2190 0066 9A05     		lsls	r2, r3, #22
 2191 0068 40F18D80 		bpl	.L153
 2192              	.L229:
 395:src/console.c ****       {
 2193              		.loc 2 395 30 discriminator 1 view .LVU587
 2194 006c 2368     		ldr	r3, [r4]
 395:src/console.c ****       {
 2195              		.loc 2 395 27 discriminator 1 view .LVU588
 2196 006e 5B07     		lsls	r3, r3, #29
 2197 0070 40F18980 		bpl	.L153
 397:src/console.c **** 	sys_sleep();
 2198              		.loc 2 397 2 is_stmt 1 view .LVU589
ARM GAS  /tmp/ccwJS9HW.s 			page 59


 2199 0074 2368     		ldr	r3, [r4]
 398:src/console.c ****       }
 2200              		.loc 2 398 2 is_stmt 0 view .LVU590
 2201 0076 9D4A     		ldr	r2, .L242+28
 397:src/console.c **** 	sys_sleep();
 2202              		.loc 2 397 2 view .LVU591
 2203 0078 23F00203 		bic	r3, r3, #2
 2204 007c 2360     		str	r3, [r4]
 398:src/console.c ****       }
 2205              		.loc 2 398 2 is_stmt 1 view .LVU592
 2206 007e 9047     		blx	r2
 2207              	.LVL195:
 2208              	.L154:
 404:src/console.c ****       sys_sleep();
 405:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 407:src/console.c **** 	if (Pause > 0) Pause--;
 408:src/console.c ****       }
 409:src/console.c ****       sys_timer_disable(0); // stop timer
 410:src/console.c ****     }
 411:src/console.c ****     
 412:src/console.c ****     // Wakeup in off state or going to sleep
 413:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2209              		.loc 2 413 5 view .LVU593
 2210              		.loc 2 413 9 is_stmt 0 view .LVU594
 2211 0080 2368     		ldr	r3, [r4]
 2212              		.loc 2 413 8 view .LVU595
 2213 0082 9D05     		lsls	r5, r3, #22
 2214 0084 00F1A680 		bmi	.L160
 2215              	.L230:
 2216              		.loc 2 413 29 discriminator 1 view .LVU596
 2217 0088 2368     		ldr	r3, [r4]
 2218              		.loc 2 413 26 discriminator 1 view .LVU597
 2219 008a 5807     		lsls	r0, r3, #29
 2220 008c 00F1A280 		bmi	.L160
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 415:src/console.c ****         // Going to off mode
 416:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 417:src/console.c ****         draw_power_off_image(1);
 418:src/console.c **** 
 419:src/console.c ****         LCD_power_off(0);
 420:src/console.c ****         SET_ST(STAT_SUSPENDED);
 421:src/console.c ****         SET_ST(STAT_OFF);
 422:src/console.c ****       }
 423:src/console.c ****       // Already in OFF -> just continue to sleep above
 424:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 425:src/console.c ****       // thus reaching the sleep()
 426:src/console.c ****     }
 427:src/console.c **** 
 428:src/console.c ****     // Well, we are woken-up
 429:src/console.c ****     SET_ST(STAT_RUNNING);
 2221              		.loc 2 429 5 is_stmt 1 view .LVU598
 2222 0090 2368     		ldr	r3, [r4]
 2223 0092 43F00203 		orr	r3, r3, #2
 2224 0096 2360     		str	r3, [r4]
 430:src/console.c **** 
 431:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
ARM GAS  /tmp/ccwJS9HW.s 			page 60


 432:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2225              		.loc 2 432 5 view .LVU599
 2226 0098 2368     		ldr	r3, [r4]
 2227 009a 23F00403 		bic	r3, r3, #4
 2228 009e 2360     		str	r3, [r4]
 433:src/console.c **** 
 434:src/console.c ****     // Get up from OFF state
 435:src/console.c ****     if ( ST(STAT_OFF) ) {
 2229              		.loc 2 435 5 view .LVU600
 2230              		.loc 2 435 10 is_stmt 0 view .LVU601
 2231 00a0 2368     		ldr	r3, [r4]
 2232              		.loc 2 435 8 view .LVU602
 2233 00a2 D906     		lsls	r1, r3, #27
 2234 00a4 0ED5     		bpl	.L165
 436:src/console.c ****       LCD_power_on();
 2235              		.loc 2 436 7 is_stmt 1 view .LVU603
 2236 00a6 924B     		ldr	r3, .L242+32
 2237 00a8 9847     		blx	r3
 2238              	.LVL196:
 437:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2239              		.loc 2 437 7 view .LVU604
 2240 00aa 924B     		ldr	r3, .L242+36
 2241 00ac 9847     		blx	r3
 2242              	.LVL197:
 438:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2243              		.loc 2 438 7 view .LVU605
 2244 00ae 924B     		ldr	r3, .L242+40
 2245 00b0 9847     		blx	r3
 2246              	.LVL198:
 439:src/console.c **** 
 440:src/console.c ****       CLR_ST(STAT_OFF);
 2247              		.loc 2 440 7 view .LVU606
 2248 00b2 2368     		ldr	r3, [r4]
 441:src/console.c **** 
 442:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2249              		.loc 2 442 13 is_stmt 0 view .LVU607
 2250 00b4 914A     		ldr	r2, .L242+44
 440:src/console.c **** 
 2251              		.loc 2 440 7 view .LVU608
 2252 00b6 23F01003 		bic	r3, r3, #16
 2253 00ba 2360     		str	r3, [r4]
 2254              		.loc 2 442 7 is_stmt 1 view .LVU609
 2255              		.loc 2 442 13 is_stmt 0 view .LVU610
 2256 00bc 9047     		blx	r2
 2257              	.LVL199:
 2258              		.loc 2 442 10 view .LVU611
 2259 00be 08B9     		cbnz	r0, .L165
 443:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2260              		.loc 2 443 9 is_stmt 1 view .LVU612
 2261 00c0 8F4B     		ldr	r3, .L242+48
 2262 00c2 9847     		blx	r3
 2263              	.LVL200:
 2264              	.L165:
 444:src/console.c ****     }
 445:src/console.c **** 
 446:src/console.c ****     // Key is ready -> clear auto off timer
 447:src/console.c ****     //    if ( !key_empty() )
ARM GAS  /tmp/ccwJS9HW.s 			page 61


 448:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 449:src/console.c ****     // Fetch the key
 450:src/console.c ****     //  < 0 -> No key event
 451:src/console.c ****     //  > 0 -> Key pressed
 452:src/console.c ****     // == 0 -> Key released
 453:src/console.c ****     c = key_pop();
 2265              		.loc 2 453 5 view .LVU613
 2266              		.loc 2 453 9 is_stmt 0 view .LVU614
 2267 00c4 8F4B     		ldr	r3, .L242+52
 2268 00c6 9847     		blx	r3
 2269              	.LVL201:
 454:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2270              		.loc 2 454 8 view .LVU615
 2271 00c8 6228     		cmp	r0, #98
 453:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2272              		.loc 2 453 9 view .LVU616
 2273 00ca 8246     		mov	r10, r0
 2274              	.LVL202:
 2275              		.loc 2 454 5 is_stmt 1 view .LVU617
 2276              		.loc 2 454 8 is_stmt 0 view .LVU618
 2277 00cc 00F0A980 		beq	.L167
 2278              		.loc 2 454 29 discriminator 1 view .LVU619
 2279 00d0 0028     		cmp	r0, #0
 2280 00d2 40F3A380 		ble	.L168
 455:src/console.c ****       reset_auto_off();
 2281              		.loc 2 455 7 is_stmt 1 view .LVU620
 2282 00d6 8C4B     		ldr	r3, .L242+56
 2283 00d8 9847     		blx	r3
 2284              	.LVL203:
 456:src/console.c ****       start_key_timer();
 2285              		.loc 2 456 7 view .LVU621
 2286              	.LBB119:
 2287              	.LBI119:
 232:src/console.c ****     start_ticks = get_rtc_ticks();
 2288              		.loc 2 232 6 view .LVU622
 2289              	.LBB120:
 233:src/console.c **** }
 2290              		.loc 2 233 5 view .LVU623
 233:src/console.c **** }
 2291              		.loc 2 233 19 is_stmt 0 view .LVU624
 2292 00da 8C4B     		ldr	r3, .L242+60
 2293 00dc 9847     		blx	r3
 2294              	.LVL204:
 233:src/console.c **** }
 2295              		.loc 2 233 17 view .LVU625
 2296 00de 8C4B     		ldr	r3, .L242+64
 2297              	.LBE120:
 2298              	.LBE119:
 2299              	.LBB122:
 2300              	.LBB123:
  68:src/console.c **** 
 2301              		.loc 2 68 6 view .LVU626
 2302 00e0 BAF1630F 		cmp	r10, #99
 2303              	.LBE123:
 2304              	.LBE122:
 2305              	.LBB136:
 2306              	.LBB121:
ARM GAS  /tmp/ccwJS9HW.s 			page 62


 233:src/console.c **** }
 2307              		.loc 2 233 17 view .LVU627
 2308 00e4 1860     		str	r0, [r3]
 2309              	.LBE121:
 2310              	.LBE136:
 457:src/console.c ****     }
 458:src/console.c ****     if (c >= 0) {
 2311              		.loc 2 458 5 is_stmt 1 view .LVU628
 459:src/console.c ****       remapped = remap(c);
 2312              		.loc 2 459 7 view .LVU629
 2313              	.LVL205:
 2314              	.LBB137:
 2315              	.LBI122:
  60:src/console.c **** 
 2316              		.loc 2 60 22 view .LVU630
 2317              	.LBB125:
  62:src/console.c **** 
 2318              		.loc 2 62 3 view .LVU631
 2319              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2320              		.loc 3 1 1 view .LVU632
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
ARM GAS  /tmp/ccwJS9HW.s 			page 63


  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2321              		.loc 3 59 3 view .LVU633
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
ARM GAS  /tmp/ccwJS9HW.s 			page 64


  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2322              		.loc 3 117 3 view .LVU634
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
ARM GAS  /tmp/ccwJS9HW.s 			page 65


 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2323              		.loc 3 175 1 view .LVU635
  66:src/console.c **** 
 2324              		.loc 2 66 3 view .LVU636
  68:src/console.c **** 
 2325              		.loc 2 68 3 view .LVU637
  68:src/console.c **** 
 2326              		.loc 2 68 6 is_stmt 0 view .LVU638
 2327 00e6 00F0E480 		beq	.L226
  70:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2328              		.loc 2 70 3 is_stmt 1 view .LVU639
  70:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2329              		.loc 2 70 6 is_stmt 0 view .LVU640
 2330 00ea BAF12C0F 		cmp	r10, #44
 2331 00ee 00F0BF80 		beq	.L205
 2332              	.LVL206:
 2333              	.L204:
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2334              		.loc 2 75 3 is_stmt 1 view .LVU641
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2335              		.loc 2 75 8 is_stmt 0 view .LVU642
 2336 00f2 FFF7FEFF 		bl	get_alpha_state
 2337              	.LVL207:
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2338              		.loc 2 75 6 view .LVU643
 2339 00f6 0028     		cmp	r0, #0
 2340 00f8 00F08380 		beq	.L172
  76:src/console.c ****       switch (cur_shift()) { 
 2341              		.loc 2 76 5 is_stmt 1 view .LVU644
  76:src/console.c ****       switch (cur_shift()) { 
 2342              		.loc 2 76 8 is_stmt 0 view .LVU645
 2343 00fc BAF11C0F 		cmp	r10, #28
ARM GAS  /tmp/ccwJS9HW.s 			page 66


 2344 0100 00F02A81 		beq	.L227
  93:src/console.c ****   }
 2345              		.loc 2 93 5 is_stmt 1 view .LVU646
  93:src/console.c ****   }
 2346              		.loc 2 93 26 is_stmt 0 view .LVU647
 2347 0104 834B     		ldr	r3, .L242+68
 2348              	.L223:
 122:src/console.c ****     break;
 2349              		.loc 2 122 26 view .LVU648
 2350 0106 03EBCA02 		add	r2, r3, r10, lsl #3
 2351 010a 92E80300 		ldm	r2, {r0, r1}
 2352 010e 0DF10809 		add	r9, sp, #8
 2353 0112 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 2354              	.LVL208:
 122:src/console.c ****     break;
 2355              		.loc 2 122 26 view .LVU649
 2356 0116 89E80300 		stm	r9, {r0, r1}
 2357 011a 0D46     		mov	r5, r1
 2358              	.LVL209:
 2359              	.L170:
 122:src/console.c ****     break;
 2360              		.loc 2 122 26 view .LVU650
 2361              	.LBE125:
 2362              	.LBE137:
 460:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2363              		.loc 2 460 7 is_stmt 1 view .LVU651
 2364              		.loc 2 460 10 is_stmt 0 view .LVU652
 2365 011c BAF12F0F 		cmp	r10, #47
 2366 0120 00F08D80 		beq	.L228
 2367              	.LVL210:
 2368              	.L195:
 461:src/console.c **** 	set_menu ( remapped.shift );
 462:src/console.c **** 	display_current_menu ();
 463:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 464:src/console.c **** 	case SHIFT_F:
 465:src/console.c **** 	  remapped = f_shift; // F -> N
 466:src/console.c **** 	  break;
 467:src/console.c **** 	case SHIFT_G:
 468:src/console.c **** 	  remapped = g_shift; // G -> N
 469:src/console.c **** 	  break;
 470:src/console.c **** 	case SHIFT_H:
 471:src/console.c **** 	  remapped = h_shift; // H -> N
 472:src/console.c **** 	default:
 473:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 474:src/console.c **** 	}
 475:src/console.c ****       }
 476:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2369              		.loc 2 476 7 is_stmt 1 view .LVU653
 2370              		.loc 2 476 10 is_stmt 0 view .LVU654
 2371 0124 BAF1300F 		cmp	r10, #48
 2372 0128 18D1     		bne	.L201
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2373              		.loc 2 477 2 is_stmt 1 view .LVU655
 2374 012a 2368     		ldr	r3, [r4]
 478:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2375              		.loc 2 478 2 is_stmt 0 view .LVU656
 2376 012c 7A4D     		ldr	r5, .L242+72
ARM GAS  /tmp/ccwJS9HW.s 			page 67


 2377              	.LVL211:
 2378              		.loc 2 478 2 view .LVU657
 2379 012e 7B48     		ldr	r0, .L242+76
 2380 0130 0022     		movs	r2, #0
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2381              		.loc 2 477 2 view .LVU658
 2382 0132 43F04003 		orr	r3, r3, #64
 2383              		.loc 2 478 2 view .LVU659
 2384 0136 1146     		mov	r1, r2
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2385              		.loc 2 477 2 view .LVU660
 2386 0138 2360     		str	r3, [r4]
 2387              		.loc 2 478 2 is_stmt 1 view .LVU661
 2388 013a A847     		blx	r5
 2389              	.LVL212:
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2390              		.loc 2 479 2 view .LVU662
 480:src/console.c **** 	remapped =  no_key;
 2391              		.loc 2 480 11 is_stmt 0 view .LVU663
 2392 013c 784B     		ldr	r3, .L242+80
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2393              		.loc 2 479 2 view .LVU664
 2394 013e 2268     		ldr	r2, [r4]
 2395              		.loc 2 480 11 view .LVU665
 2396 0140 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2397              	.LVL213:
 2398              		.loc 2 480 11 view .LVU666
 2399 0144 93E80300 		ldm	r3, {r0, r1}
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2400              		.loc 2 479 2 view .LVU667
 2401 0148 22F04002 		bic	r2, r2, #64
 2402 014c 2260     		str	r2, [r4]
 2403              		.loc 2 480 2 is_stmt 1 view .LVU668
 2404              	.LVL214:
 2405              		.loc 2 480 11 is_stmt 0 view .LVU669
 2406 014e 04AA     		add	r2, sp, #16
 2407 0150 02E90300 		stmdb	r2, {r0, r1}
 2408              	.LBB138:
 2409              	.LBB139:
  22:src/menu.c    **** }
 2410              		.loc 1 22 3 view .LVU670
 2411 0154 3068     		ldr	r0, [r6]
 2412              	.LBE139:
 2413              	.LBE138:
 2414              		.loc 2 480 11 view .LVU671
 2415 0156 0D46     		mov	r5, r1
 2416              	.LVL215:
 481:src/console.c **** 	display_current_menu();
 2417              		.loc 2 481 2 is_stmt 1 view .LVU672
 2418              	.LBB141:
 2419              	.LBI138:
  21:src/menu.c    ****   display_menu (current_menu);
 2420              		.loc 1 21 6 view .LVU673
 2421              	.LBB140:
  22:src/menu.c    **** }
 2422              		.loc 1 22 3 view .LVU674
 2423 0158 FFF7FEFF 		bl	display_menu
ARM GAS  /tmp/ccwJS9HW.s 			page 68


 2424              	.LVL216:
 2425              	.L201:
  22:src/menu.c    **** }
 2426              		.loc 1 22 3 is_stmt 0 view .LVU675
 2427              	.LBE140:
 2428              	.LBE141:
 482:src/console.c ****       }
 483:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2429              		.loc 2 483 7 is_stmt 1 view .LVU676
 2430              		.loc 2 483 10 is_stmt 0 view .LVU677
 2431 015c BAF1310F 		cmp	r10, #49
 2432 0160 00F08780 		beq	.L171
 484:src/console.c **** 	remapped = do_multi (remapped);
 485:src/console.c **** 	display_current_menu();
 486:src/console.c ****       }
 487:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2433              		.loc 2 487 7 is_stmt 1 view .LVU678
 2434              		.loc 2 487 10 is_stmt 0 view .LVU679
 2435 0164 BAF1320F 		cmp	r10, #50
 2436 0168 00F09D80 		beq	.L203
 2437              	.LVL217:
 2438              	.L225:
 2439              		.loc 2 487 10 view .LVU680
 2440 016c 0DF10809 		add	r9, sp, #8
 2441              	.L174:
 2442              	.LVL218:
 488:src/console.c ****       process_keycode_with_shift(remapped);
 2443              		.loc 2 488 7 is_stmt 1 view .LVU681
 2444              		.loc 2 488 7 is_stmt 0 view .LVU682
 2445 0170 8DF808A0 		strb	r10, [sp, #8]
 2446 0174 0395     		str	r5, [sp, #12]
 2447 0176 99E80300 		ldm	r9, {r0, r1}
 2448 017a FFF7FEFF 		bl	process_keycode_with_shift
 2449              	.LVL219:
 393:src/console.c **** 
 2450              		.loc 2 393 3 is_stmt 1 view .LVU683
 395:src/console.c ****       {
 2451              		.loc 2 395 5 view .LVU684
 395:src/console.c ****       {
 2452              		.loc 2 395 10 is_stmt 0 view .LVU685
 2453 017e 2368     		ldr	r3, [r4]
 395:src/console.c ****       {
 2454              		.loc 2 395 8 view .LVU686
 2455 0180 9A05     		lsls	r2, r3, #22
 2456 0182 3FF573AF 		bmi	.L229
 2457              	.LVL220:
 2458              	.L153:
 400:src/console.c ****     {
 2459              		.loc 2 400 10 is_stmt 1 view .LVU687
 400:src/console.c ****     {
 2460              		.loc 2 400 15 is_stmt 0 view .LVU688
 2461 0186 2568     		ldr	r5, [r4]
 400:src/console.c ****     {
 2462              		.loc 2 400 13 view .LVU689
 2463 0188 15F40075 		ands	r5, r5, #512
 2464 018c 7FF478AF 		bne	.L154
 400:src/console.c ****     {
ARM GAS  /tmp/ccwJS9HW.s 			page 69


 2465              		.loc 2 400 35 discriminator 1 view .LVU690
 2466 0190 B847     		blx	r7
 2467              	.LVL221:
 400:src/console.c ****     {
 2468              		.loc 2 400 32 discriminator 1 view .LVU691
 2469 0192 0028     		cmp	r0, #0
 2470 0194 3FF474AF 		beq	.L154
 402:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2471              		.loc 2 402 7 is_stmt 1 view .LVU692
 2472 0198 2368     		ldr	r3, [r4]
 2473 019a 23F00203 		bic	r3, r3, #2
 403:src/console.c ****       sys_sleep();
 2474              		.loc 2 403 7 is_stmt 0 view .LVU693
 2475 019e 2846     		mov	r0, r5
 2476 01a0 6421     		movs	r1, #100
 402:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2477              		.loc 2 402 7 view .LVU694
 2478 01a2 2360     		str	r3, [r4]
 403:src/console.c ****       sys_sleep();
 2479              		.loc 2 403 7 is_stmt 1 view .LVU695
 2480 01a4 C047     		blx	r8
 2481              	.LVL222:
 404:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2482              		.loc 2 404 7 view .LVU696
 2483 01a6 514B     		ldr	r3, .L242+28
 2484 01a8 9847     		blx	r3
 2485              	.LVL223:
 405:src/console.c **** 	key_push (K_HEARTBEAT);
 2486              		.loc 2 405 7 view .LVU697
 405:src/console.c **** 	key_push (K_HEARTBEAT);
 2487              		.loc 2 405 11 is_stmt 0 view .LVU698
 2488 01aa 5E4B     		ldr	r3, .L242+84
 2489 01ac 2846     		mov	r0, r5
 2490 01ae 9847     		blx	r3
 2491              	.LVL224:
 405:src/console.c **** 	key_push (K_HEARTBEAT);
 2492              		.loc 2 405 10 view .LVU699
 2493 01b0 48B1     		cbz	r0, .L158
 406:src/console.c **** 	if (Pause > 0) Pause--;
 2494              		.loc 2 406 2 is_stmt 1 view .LVU700
 2495 01b2 5D4B     		ldr	r3, .L242+88
 2496 01b4 6220     		movs	r0, #98
 2497 01b6 9847     		blx	r3
 2498              	.LVL225:
 407:src/console.c ****       }
 2499              		.loc 2 407 2 view .LVU701
 407:src/console.c ****       }
 2500              		.loc 2 407 12 is_stmt 0 view .LVU702
 2501 01b8 5C4B     		ldr	r3, .L242+92
 2502 01ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 407:src/console.c ****       }
 2503              		.loc 2 407 5 view .LVU703
 2504 01bc 1AB1     		cbz	r2, .L158
 407:src/console.c ****       }
 2505              		.loc 2 407 17 is_stmt 1 discriminator 1 view .LVU704
 407:src/console.c ****       }
 2506              		.loc 2 407 22 is_stmt 0 discriminator 1 view .LVU705
ARM GAS  /tmp/ccwJS9HW.s 			page 70


 2507 01be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2508 01c0 013A     		subs	r2, r2, #1
 2509 01c2 D2B2     		uxtb	r2, r2
 2510 01c4 1A70     		strb	r2, [r3]
 2511              	.L158:
 409:src/console.c ****     }
 2512              		.loc 2 409 7 is_stmt 1 view .LVU706
 2513 01c6 5A4B     		ldr	r3, .L242+96
 2514 01c8 0020     		movs	r0, #0
 2515 01ca 9847     		blx	r3
 2516              	.LVL226:
 413:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2517              		.loc 2 413 5 view .LVU707
 413:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2518              		.loc 2 413 9 is_stmt 0 view .LVU708
 2519 01cc 2368     		ldr	r3, [r4]
 413:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2520              		.loc 2 413 8 view .LVU709
 2521 01ce 9D05     		lsls	r5, r3, #22
 2522 01d0 7FF55AAF 		bpl	.L230
 2523              	.L160:
 414:src/console.c ****         // Going to off mode
 2524              		.loc 2 414 7 is_stmt 1 view .LVU710
 414:src/console.c ****         // Going to off mode
 2525              		.loc 2 414 12 is_stmt 0 view .LVU711
 2526 01d4 2568     		ldr	r5, [r4]
 414:src/console.c ****         // Going to off mode
 2527              		.loc 2 414 10 view .LVU712
 2528 01d6 15F00405 		ands	r5, r5, #4
 2529 01da 7FF443AF 		bne	.L152
 416:src/console.c ****         draw_power_off_image(1);
 2530              		.loc 2 416 9 is_stmt 1 view .LVU713
 2531 01de 554B     		ldr	r3, .L242+100
 2532 01e0 2846     		mov	r0, r5
 2533 01e2 9847     		blx	r3
 2534              	.LVL227:
 417:src/console.c **** 
 2535              		.loc 2 417 9 view .LVU714
 2536 01e4 544B     		ldr	r3, .L242+104
 2537 01e6 0120     		movs	r0, #1
 2538 01e8 9847     		blx	r3
 2539              	.LVL228:
 419:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2540              		.loc 2 419 9 view .LVU715
 2541 01ea 544B     		ldr	r3, .L242+108
 2542 01ec 2846     		mov	r0, r5
 2543 01ee 9847     		blx	r3
 2544              	.LVL229:
 420:src/console.c ****         SET_ST(STAT_OFF);
 2545              		.loc 2 420 9 view .LVU716
 2546 01f0 2368     		ldr	r3, [r4]
 2547 01f2 43F00403 		orr	r3, r3, #4
 2548 01f6 2360     		str	r3, [r4]
 421:src/console.c ****       }
 2549              		.loc 2 421 9 view .LVU717
 2550 01f8 2368     		ldr	r3, [r4]
 2551 01fa 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/ccwJS9HW.s 			page 71


 2552 01fe 2360     		str	r3, [r4]
 2553 0200 30E7     		b	.L152
 2554              	.LVL230:
 2555              	.L172:
 2556              	.LBB142:
 2557              	.LBB126:
  96:src/console.c ****   case KEY_F1:
 2558              		.loc 2 96 3 view .LVU718
 2559 0202 AAF12603 		sub	r3, r10, #38
 2560 0206 052B     		cmp	r3, #5
 2561 0208 00F22181 		bhi	.L178
 2562 020c DFE813F0 		tbh	[pc, r3, lsl #1]
 2563              	.L180:
 2564 0210 FA00     		.2byte	(.L185-.L180)/2
 2565 0212 0301     		.2byte	(.L184-.L180)/2
 2566 0214 0B01     		.2byte	(.L183-.L180)/2
 2567 0216 EC00     		.2byte	(.L182-.L180)/2
 2568 0218 D900     		.2byte	(.L181-.L180)/2
 2569 021a BE00     		.2byte	(.L179-.L180)/2
 2570              	.LVL231:
 2571              		.p2align 1
 2572              	.L168:
  96:src/console.c ****   case KEY_F1:
 2573              		.loc 2 96 3 is_stmt 0 view .LVU719
 2574              	.LBE126:
 2575              	.LBE142:
 458:src/console.c ****       remapped = remap(c);
 2576              		.loc 2 458 5 is_stmt 1 view .LVU720
 458:src/console.c ****       remapped = remap(c);
 2577              		.loc 2 458 8 is_stmt 0 view .LVU721
 2578 021c 7FF422AF 		bne	.L152
 2579 0220 67E7     		b	.L204
 2580              	.L167:
 458:src/console.c ****       remapped = remap(c);
 2581              		.loc 2 458 5 is_stmt 1 view .LVU722
 459:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2582              		.loc 2 459 7 view .LVU723
 2583              	.LVL232:
 2584              	.LBB143:
  60:src/console.c **** 
 2585              		.loc 2 60 22 view .LVU724
 2586              	.LBB127:
  62:src/console.c **** 
 2587              		.loc 2 62 3 view .LVU725
   1:src/keytran.c ****     {K_RELEASE, -1},
 2588              		.loc 3 1 1 view .LVU726
  59:src/keytran.c ****     {K_RELEASE, -1},
 2589              		.loc 3 59 3 view .LVU727
 117:src/keytran.c ****     {K_RELEASE, -1},
 2590              		.loc 3 117 3 view .LVU728
 2591              		.loc 3 175 1 view .LVU729
  66:src/console.c **** 
 2592              		.loc 2 66 3 view .LVU730
  66:src/console.c **** 
 2593              		.loc 2 66 23 view .LVU731
  66:src/console.c **** 
 2594              		.loc 2 66 30 is_stmt 0 view .LVU732
ARM GAS  /tmp/ccwJS9HW.s 			page 72


 2595 0222 474B     		ldr	r3, .L242+112
 2596              	.LVL233:
 2597              	.L224:
  66:src/console.c **** 
 2598              		.loc 2 66 30 view .LVU733
 2599 0224 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2600              	.LVL234:
  66:src/console.c **** 
 2601              		.loc 2 66 30 view .LVU734
 2602 0228 93E80300 		ldm	r3, {r0, r1}
 2603 022c 0DF10809 		add	r9, sp, #8
 2604              	.LBE127:
 2605              	.LBE143:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2606              		.loc 2 460 10 view .LVU735
 2607 0230 BAF12F0F 		cmp	r10, #47
 2608              	.LBB144:
 2609              	.LBB128:
  66:src/console.c **** 
 2610              		.loc 2 66 30 view .LVU736
 2611 0234 89E80300 		stm	r9, {r0, r1}
 2612 0238 0D46     		mov	r5, r1
 2613              	.LVL235:
  66:src/console.c **** 
 2614              		.loc 2 66 30 view .LVU737
 2615              	.LBE128:
 2616              	.LBE144:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2617              		.loc 2 460 7 is_stmt 1 view .LVU738
 460:src/console.c **** 	set_menu ( remapped.shift );
 2618              		.loc 2 460 10 is_stmt 0 view .LVU739
 2619 023a 7FF473AF 		bne	.L195
 2620              	.LVL236:
 2621              	.L228:
 461:src/console.c **** 	display_current_menu ();
 2622              		.loc 2 461 2 is_stmt 1 view .LVU740
 2623              	.LBB145:
 2624              	.LBI145:
   3:src/menu.c    ****   int m = current_menu;
 2625              		.loc 1 3 6 view .LVU741
 2626              	.LBB146:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2627              		.loc 1 4 3 view .LVU742
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2628              		.loc 1 4 7 is_stmt 0 view .LVU743
 2629 023e 3368     		ldr	r3, [r6]
 2630              	.LVL237:
   5:src/menu.c    ****     current_menu = 0;
 2631              		.loc 1 5 3 is_stmt 1 view .LVU744
   5:src/menu.c    ****     current_menu = 0;
 2632              		.loc 1 5 6 is_stmt 0 view .LVU745
 2633 0240 AB42     		cmp	r3, r5
 2634 0242 3BD0     		beq	.L196
   8:src/menu.c    ****     current_menu = last_menu;
 2635              		.loc 1 8 8 is_stmt 1 view .LVU746
   8:src/menu.c    ****     current_menu = last_menu;
 2636              		.loc 1 8 11 is_stmt 0 view .LVU747
ARM GAS  /tmp/ccwJS9HW.s 			page 73


 2637 0244 6A1C     		adds	r2, r5, #1
 2638 0246 3FD0     		beq	.L231
 2639              	.LVL238:
 2640              	.L197:
  12:src/menu.c    ****   }
 2641              		.loc 1 12 5 is_stmt 1 view .LVU748
 2642 0248 3E4A     		ldr	r2, .L242+116
  12:src/menu.c    ****   }
 2643              		.loc 1 12 18 is_stmt 0 view .LVU749
 2644 024a 3560     		str	r5, [r6]
 2645              	.LVL239:
 2646              	.L199:
  14:src/menu.c    **** }
 2647              		.loc 1 14 3 is_stmt 1 view .LVU750
 2648              	.LBE146:
 2649              	.LBE145:
 2650              	.LBB150:
 2651              	.LBB151:
  22:src/menu.c    **** }
 2652              		.loc 1 22 3 is_stmt 0 view .LVU751
 2653 024c 2846     		mov	r0, r5
 2654              	.LBE151:
 2655              	.LBE150:
 2656              	.LBB153:
 2657              	.LBB147:
  14:src/menu.c    **** }
 2658              		.loc 1 14 13 view .LVU752
 2659 024e 1360     		str	r3, [r2]
 2660              	.LBE147:
 2661              	.LBE153:
 462:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2662              		.loc 2 462 2 is_stmt 1 view .LVU753
 2663              	.LBB154:
 2664              	.LBI150:
  21:src/menu.c    ****   display_menu (current_menu);
 2665              		.loc 1 21 6 view .LVU754
 2666              	.LBB152:
  22:src/menu.c    **** }
 2667              		.loc 1 22 3 view .LVU755
 2668 0250 FFF7FEFF 		bl	display_menu
 2669              	.LVL240:
 2670              	.LBE152:
 2671              	.LBE154:
 463:src/console.c **** 	case SHIFT_F:
 2672              		.loc 2 463 2 view .LVU756
 463:src/console.c **** 	case SHIFT_F:
 2673              		.loc 2 463 10 is_stmt 0 view .LVU757
 2674 0254 FFF7FEFF 		bl	cur_shift
 2675              	.LVL241:
 463:src/console.c **** 	case SHIFT_F:
 2676              		.loc 2 463 2 view .LVU758
 2677 0258 0228     		cmp	r0, #2
 465:src/console.c **** 	  break;
 2678              		.loc 2 465 4 is_stmt 1 view .LVU759
 465:src/console.c **** 	  break;
 2679              		.loc 2 465 13 is_stmt 0 view .LVU760
 2680 025a 14BF     		ite	ne
ARM GAS  /tmp/ccwJS9HW.s 			page 74


 2681 025c 3A4B     		ldrne	r3, .L242+120
 468:src/console.c **** 	  break;
 2682              		.loc 2 468 4 is_stmt 1 view .LVU761
 468:src/console.c **** 	  break;
 2683              		.loc 2 468 13 is_stmt 0 view .LVU762
 2684 025e 3B4B     		ldreq	r3, .L242+124
 2685 0260 93E80300 		ldm	r3, {r0, r1}
 2686 0264 89E80300 		stm	r9, {r0, r1}
 2687 0268 0D46     		mov	r5, r1
 2688 026a 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2689              	.LVL242:
 469:src/console.c **** 	case SHIFT_H:
 2690              		.loc 2 469 4 is_stmt 1 view .LVU763
 2691 026e 59E7     		b	.L195
 2692              	.LVL243:
 2693              	.L205:
 2694              	.LBB155:
 2695              	.LBB129:
 2696              	.LBB124:
  72:src/console.c ****   }
 2697              		.loc 2 72 12 is_stmt 0 view .LVU764
 2698 0270 0C25     		movs	r5, #12
 2699              	.LVL244:
 2700              	.L171:
  72:src/console.c ****   }
 2701              		.loc 2 72 12 view .LVU765
 2702              	.LBE124:
 2703              	.LBE129:
 2704              	.LBE155:
 484:src/console.c **** 	display_current_menu();
 2705              		.loc 2 484 2 is_stmt 1 view .LVU766
 484:src/console.c **** 	display_current_menu();
 2706              		.loc 2 484 13 is_stmt 0 view .LVU767
 2707 0272 3123     		movs	r3, #49
 2708 0274 0395     		str	r5, [sp, #12]
 2709 0276 8DF80830 		strb	r3, [sp, #8]
 2710 027a 6D46     		mov	r5, sp
 2711              	.LVL245:
 484:src/console.c **** 	display_current_menu();
 2712              		.loc 2 484 13 view .LVU768
 2713 027c 0DF10809 		add	r9, sp, #8
 2714 0280 99E80600 		ldm	r9, {r1, r2}
 2715 0284 2846     		mov	r0, r5
 2716 0286 FFF7FEFF 		bl	do_multi
 2717              	.LVL246:
 2718 028a 95E80300 		ldm	r5, {r0, r1}
 2719 028e 89E80300 		stm	r9, {r0, r1}
 2720              	.LVL247:
 484:src/console.c **** 	display_current_menu();
 2721              		.loc 2 484 13 view .LVU769
 2722 0292 9DF808A0 		ldrb	r10, [sp, #8]	@ zero_extendqisi2
 2723              	.LVL248:
 2724              	.LBB156:
 2725              	.LBB157:
  22:src/menu.c    **** }
 2726              		.loc 1 22 3 view .LVU770
 2727 0296 3068     		ldr	r0, [r6]
ARM GAS  /tmp/ccwJS9HW.s 			page 75


 2728              	.LBE157:
 2729              	.LBE156:
 484:src/console.c **** 	display_current_menu();
 2730              		.loc 2 484 13 view .LVU771
 2731 0298 039D     		ldr	r5, [sp, #12]
 2732              	.LVL249:
 485:src/console.c ****       }
 2733              		.loc 2 485 2 is_stmt 1 view .LVU772
 2734              	.LBB159:
 2735              	.LBI156:
  21:src/menu.c    ****   display_menu (current_menu);
 2736              		.loc 1 21 6 view .LVU773
 2737              	.LBB158:
  22:src/menu.c    **** }
 2738              		.loc 1 22 3 view .LVU774
 2739 029a FFF7FEFF 		bl	display_menu
 2740              	.LVL250:
  22:src/menu.c    **** }
 2741              		.loc 1 22 3 is_stmt 0 view .LVU775
 2742              	.LBE158:
 2743              	.LBE159:
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2744              		.loc 2 487 7 is_stmt 1 view .LVU776
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2745              		.loc 2 487 10 is_stmt 0 view .LVU777
 2746 029e BAF1320F 		cmp	r10, #50
 2747 02a2 7FF463AF 		bne	.L225
 2748              	.LVL251:
 2749              	.L203:
 489:src/console.c ****     }
 490:src/console.c ****   }
 491:src/console.c ****   save_ram_file(0);
 2750              		.loc 2 491 3 is_stmt 1 view .LVU778
 2751 02a6 0020     		movs	r0, #0
 492:src/console.c ****   return;
 493:src/console.c **** }
 2752              		.loc 2 493 1 is_stmt 0 view .LVU779
 2753 02a8 04B0     		add	sp, sp, #16
 2754              		.cfi_remember_state
 2755              		.cfi_def_cfa_offset 32
 2756              		@ sp needed
 2757 02aa BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2758              		.cfi_restore 14
 2759              		.cfi_restore 10
 2760              		.cfi_restore 9
 2761              		.cfi_restore 8
 2762              		.cfi_restore 7
 2763              		.cfi_restore 6
 2764              		.cfi_restore 5
 2765              		.cfi_restore 4
 2766              		.cfi_def_cfa_offset 0
 2767              	.LVL252:
 491:src/console.c ****   return;
 2768              		.loc 2 491 3 view .LVU780
 2769 02ae FFF7FEBF 		b	save_ram_file
 2770              	.LVL253:
 2771              	.L226:
ARM GAS  /tmp/ccwJS9HW.s 			page 76


 2772              		.cfi_restore_state
 2773              	.LBB160:
 2774              	.LBB130:
  68:src/console.c **** 
 2775              		.loc 2 68 16 is_stmt 1 view .LVU781
  68:src/console.c **** 
 2776              		.loc 2 68 23 is_stmt 0 view .LVU782
 2777 02b2 274B     		ldr	r3, .L242+128
 2778 02b4 B6E7     		b	.L224
 2779              	.LVL254:
 2780              	.L208:
  68:src/console.c **** 
 2781              		.loc 2 68 23 view .LVU783
 2782              	.LBE130:
 2783              	.LBE160:
 2784              	.LBB161:
 2785              	.LBB148:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2786              		.loc 1 4 7 view .LVU784
 2787 02b6 1D46     		mov	r5, r3
 2788 02b8 0DF10809 		add	r9, sp, #8
 2789              	.LVL255:
 2790              	.L196:
   6:src/menu.c    ****   }
 2791              		.loc 1 6 5 is_stmt 1 view .LVU785
   6:src/menu.c    ****   }
 2792              		.loc 1 6 18 is_stmt 0 view .LVU786
 2793 02bc 0022     		movs	r2, #0
 2794 02be 2B46     		mov	r3, r5
 2795              	.LVL256:
   6:src/menu.c    ****   }
 2796              		.loc 1 6 18 view .LVU787
 2797 02c0 3260     		str	r2, [r6]
 2798              	.LVL257:
   6:src/menu.c    ****   }
 2799              		.loc 1 6 18 view .LVU788
 2800 02c2 1546     		mov	r5, r2
 2801 02c4 1F4A     		ldr	r2, .L242+116
 2802 02c6 C1E7     		b	.L199
 2803              	.LVL258:
 2804              	.L231:
   9:src/menu.c    ****   }
 2805              		.loc 1 9 5 is_stmt 1 view .LVU789
   9:src/menu.c    ****   }
 2806              		.loc 1 9 18 is_stmt 0 view .LVU790
 2807 02c8 1E4A     		ldr	r2, .L242+116
 2808 02ca 1568     		ldr	r5, [r2]
 2809              	.LVL259:
   9:src/menu.c    ****   }
 2810              		.loc 1 9 18 view .LVU791
 2811 02cc 3560     		str	r5, [r6]
 2812 02ce BDE7     		b	.L199
 2813              	.L243:
 2814              		.align	2
 2815              	.L242:
 2816 02d0 00000000 		.word	StateWhileOn
 2817 02d4 00000000 		.word	DispMsg
ARM GAS  /tmp/ccwJS9HW.s 			page 77


 2818 02d8 00200010 		.word	268443648
 2819 02dc 00000000 		.word	.LANCHOR1
 2820 02e0 7D030008 		.word	134218621
 2821 02e4 31020008 		.word	134218289
 2822 02e8 00000000 		.word	JustDisplayed
 2823 02ec 19040008 		.word	134218777
 2824 02f0 19020008 		.word	134218265
 2825 02f4 91030008 		.word	134218641
 2826 02f8 E5020008 		.word	134218469
 2827 02fc 59020008 		.word	134218329
 2828 0300 35020008 		.word	134218293
 2829 0304 89030008 		.word	134218633
 2830 0308 B9030008 		.word	134218681
 2831 030c B9040008 		.word	134218937
 2832 0310 00000000 		.word	.LANCHOR4
 2833 0314 00000000 		.word	.LANCHOR11
 2834 0318 59030008 		.word	134218585
 2835 031c 00000000 		.word	.LANCHOR15
 2836 0320 00000000 		.word	.LANCHOR6
 2837 0324 01040008 		.word	134218753
 2838 0328 81030008 		.word	134218625
 2839 032c 00000000 		.word	Pause
 2840 0330 F5030008 		.word	134218741
 2841 0334 55020008 		.word	134218325
 2842 0338 2D040008 		.word	134218797
 2843 033c 1D020008 		.word	134218269
 2844 0340 00000000 		.word	.LANCHOR16
 2845 0344 00000000 		.word	.LANCHOR2
 2846 0348 00000000 		.word	.LANCHOR13
 2847 034c 00000000 		.word	.LANCHOR14
 2848 0350 00000000 		.word	.LANCHOR7
 2849 0354 F9030008 		.word	134218745
 2850              	.LVL260:
 2851              	.L227:
   9:src/menu.c    ****   }
 2852              		.loc 1 9 18 view .LVU792
 2853              	.LBE148:
 2854              	.LBE161:
 2855              	.LBB162:
 2856              	.LBB131:
  77:src/console.c ****       case SHIFT_N:
 2857              		.loc 2 77 7 is_stmt 1 view .LVU793
  77:src/console.c ****       case SHIFT_N:
 2858              		.loc 2 77 15 is_stmt 0 view .LVU794
 2859 0358 FFF7FEFF 		bl	cur_shift
 2860              	.LVL261:
  77:src/console.c ****       case SHIFT_N:
 2861              		.loc 2 77 7 view .LVU795
 2862 035c 0328     		cmp	r0, #3
  77:src/console.c ****       case SHIFT_N:
 2863              		.loc 2 77 15 view .LVU796
 2864 035e 0546     		mov	r5, r0
  77:src/console.c ****       case SHIFT_N:
 2865              		.loc 2 77 7 view .LVU797
 2866 0360 00F2B280 		bhi	.L206
 2867 0364 0128     		cmp	r0, #1
 2868 0366 6CD8     		bhi	.L175
ARM GAS  /tmp/ccwJS9HW.s 			page 78


 2869 0368 0028     		cmp	r0, #0
 2870 036a 7ED0     		beq	.L232
  80:src/console.c ****       case SHIFT_F:
 2871              		.loc 2 80 2 is_stmt 1 view .LVU798
  82:src/console.c **** 	break;
 2872              		.loc 2 82 2 view .LVU799
  82:src/console.c **** 	break;
 2873              		.loc 2 82 23 is_stmt 0 view .LVU800
 2874 036c 794B     		ldr	r3, .L244
 2875 036e 93E80300 		ldm	r3, {r0, r1}
 2876 0372 0DF10809 		add	r9, sp, #8
 2877 0376 89E80300 		stm	r9, {r0, r1}
 2878              	.LVL262:
  82:src/console.c **** 	break;
 2879              		.loc 2 82 23 view .LVU801
 2880              	.LBE131:
 2881              	.LBE162:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2882              		.loc 2 460 7 is_stmt 1 view .LVU802
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2883              		.loc 2 476 7 view .LVU803
 483:src/console.c **** 	remapped = do_multi (remapped);
 2884              		.loc 2 483 7 view .LVU804
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2885              		.loc 2 487 7 view .LVU805
 2886              	.LBB163:
 2887              	.LBB132:
  82:src/console.c **** 	break;
 2888              		.loc 2 82 23 is_stmt 0 view .LVU806
 2889 037a 0025     		movs	r5, #0
 2890 037c 4FF02A0A 		mov	r10, #42
 2891              	.LVL263:
  82:src/console.c **** 	break;
 2892              		.loc 2 82 23 view .LVU807
 2893 0380 F6E6     		b	.L174
 2894              	.LVL264:
 2895              	.L190:
 111:src/console.c ****   case KEY_F6:
 2896              		.loc 2 111 5 is_stmt 1 view .LVU808
 111:src/console.c ****   case KEY_F6:
 2897              		.loc 2 111 9 is_stmt 0 view .LVU809
 2898 0382 FFF7FEFF 		bl	cur_shift
 2899              	.LVL265:
 111:src/console.c ****   case KEY_F6:
 2900              		.loc 2 111 8 view .LVU810
 2901 0386 0128     		cmp	r0, #1
 2902 0388 00F0B280 		beq	.L233
 2903              	.L179:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2904              		.loc 2 113 5 is_stmt 1 view .LVU811
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2905              		.loc 2 113 9 is_stmt 0 view .LVU812
 2906 038c FFF7FEFF 		bl	cur_shift
 2907              	.LVL266:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2908              		.loc 2 113 8 view .LVU813
 2909 0390 0028     		cmp	r0, #0
ARM GAS  /tmp/ccwJS9HW.s 			page 79


 2910 0392 58D1     		bne	.L191
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2911              		.loc 2 113 33 is_stmt 1 view .LVU814
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2912              		.loc 2 113 67 is_stmt 0 view .LVU815
 2913 0394 3168     		ldr	r1, [r6]
 2914 0396 704A     		ldr	r2, .L244+4
 2915 0398 D023     		movs	r3, #208
 2916 039a 03FB01F3 		mul	r3, r3, r1
 2917 039e D018     		adds	r0, r2, r3
 2918 03a0 D0E92C01 		ldrd	r0, r1, [r0, #176]
 2919 03a4 B033     		adds	r3, r3, #176
 2920              	.L222:
 2921 03a6 0DF10809 		add	r9, sp, #8
 2922 03aa 12F803A0 		ldrb	r10, [r2, r3]	@ zero_extendqisi2
 2923              	.LVL267:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2924              		.loc 2 113 67 view .LVU816
 2925 03ae 89E80300 		stm	r9, {r0, r1}
 2926 03b2 1344     		add	r3, r3, r2
 2927 03b4 5D68     		ldr	r5, [r3, #4]
 2928              	.LVL268:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2929              		.loc 2 113 67 view .LVU817
 2930 03b6 B1E6     		b	.L170
 2931              	.LVL269:
 2932              	.L189:
 108:src/console.c ****   case KEY_F5:
 2933              		.loc 2 108 5 is_stmt 1 view .LVU818
 108:src/console.c ****   case KEY_F5:
 2934              		.loc 2 108 9 is_stmt 0 view .LVU819
 2935 03b8 FFF7FEFF 		bl	cur_shift
 2936              	.LVL270:
 108:src/console.c ****   case KEY_F5:
 2937              		.loc 2 108 8 view .LVU820
 2938 03bc 0128     		cmp	r0, #1
 2939 03be 00F0A180 		beq	.L234
 2940              	.L181:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2941              		.loc 2 110 5 is_stmt 1 view .LVU821
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2942              		.loc 2 110 9 is_stmt 0 view .LVU822
 2943 03c2 FFF7FEFF 		bl	cur_shift
 2944              	.LVL271:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2945              		.loc 2 110 8 view .LVU823
 2946 03c6 0028     		cmp	r0, #0
 2947 03c8 DBD1     		bne	.L190
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2948              		.loc 2 110 33 is_stmt 1 view .LVU824
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2949              		.loc 2 110 67 is_stmt 0 view .LVU825
 2950 03ca 3168     		ldr	r1, [r6]
 2951 03cc 624A     		ldr	r2, .L244+4
 2952 03ce D023     		movs	r3, #208
 2953 03d0 03FB01F3 		mul	r3, r3, r1
 2954 03d4 D018     		adds	r0, r2, r3
ARM GAS  /tmp/ccwJS9HW.s 			page 80


 2955 03d6 D0E92401 		ldrd	r0, r1, [r0, #144]
 2956 03da 9033     		adds	r3, r3, #144
 2957 03dc E3E7     		b	.L222
 2958              	.L188:
 105:src/console.c ****   case KEY_F4:
 2959              		.loc 2 105 5 is_stmt 1 view .LVU826
 105:src/console.c ****   case KEY_F4:
 2960              		.loc 2 105 9 is_stmt 0 view .LVU827
 2961 03de FFF7FEFF 		bl	cur_shift
 2962              	.LVL272:
 105:src/console.c ****   case KEY_F4:
 2963              		.loc 2 105 8 view .LVU828
 2964 03e2 0128     		cmp	r0, #1
 2965 03e4 00F09880 		beq	.L235
 2966              	.L182:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2967              		.loc 2 107 5 is_stmt 1 view .LVU829
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2968              		.loc 2 107 9 is_stmt 0 view .LVU830
 2969 03e8 FFF7FEFF 		bl	cur_shift
 2970              	.LVL273:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2971              		.loc 2 107 8 view .LVU831
 2972 03ec 0028     		cmp	r0, #0
 2973 03ee E3D1     		bne	.L189
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2974              		.loc 2 107 33 is_stmt 1 view .LVU832
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2975              		.loc 2 107 67 is_stmt 0 view .LVU833
 2976 03f0 3168     		ldr	r1, [r6]
 2977 03f2 594A     		ldr	r2, .L244+4
 2978 03f4 D023     		movs	r3, #208
 2979 03f6 03FB01F3 		mul	r3, r3, r1
 2980 03fa D018     		adds	r0, r2, r3
 2981 03fc D0E91C01 		ldrd	r0, r1, [r0, #112]
 2982 0400 7033     		adds	r3, r3, #112
 2983 0402 D0E7     		b	.L222
 2984              	.L185:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2985              		.loc 2 98 5 is_stmt 1 view .LVU834
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2986              		.loc 2 98 9 is_stmt 0 view .LVU835
 2987 0404 FFF7FEFF 		bl	cur_shift
 2988              	.LVL274:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2989              		.loc 2 98 8 view .LVU836
 2990 0408 0028     		cmp	r0, #0
 2991 040a 42D0     		beq	.L236
  99:src/console.c ****   case KEY_F2:
 2992              		.loc 2 99 5 is_stmt 1 view .LVU837
  99:src/console.c ****   case KEY_F2:
 2993              		.loc 2 99 9 is_stmt 0 view .LVU838
 2994 040c FFF7FEFF 		bl	cur_shift
 2995              	.LVL275:
  99:src/console.c ****   case KEY_F2:
 2996              		.loc 2 99 8 view .LVU839
 2997 0410 0128     		cmp	r0, #1
ARM GAS  /tmp/ccwJS9HW.s 			page 81


 2998 0412 00F09580 		beq	.L237
 2999              	.L184:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3000              		.loc 2 101 5 is_stmt 1 view .LVU840
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3001              		.loc 2 101 9 is_stmt 0 view .LVU841
 3002 0416 FFF7FEFF 		bl	cur_shift
 3003              	.LVL276:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3004              		.loc 2 101 8 view .LVU842
 3005 041a 80B3     		cbz	r0, .L238
 102:src/console.c ****   case KEY_F3:
 3006              		.loc 2 102 5 is_stmt 1 view .LVU843
 102:src/console.c ****   case KEY_F3:
 3007              		.loc 2 102 9 is_stmt 0 view .LVU844
 3008 041c FFF7FEFF 		bl	cur_shift
 3009              	.LVL277:
 102:src/console.c ****   case KEY_F3:
 3010              		.loc 2 102 8 view .LVU845
 3011 0420 0128     		cmp	r0, #1
 3012 0422 00F08380 		beq	.L239
 3013              	.L183:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3014              		.loc 2 104 5 is_stmt 1 view .LVU846
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3015              		.loc 2 104 9 is_stmt 0 view .LVU847
 3016 0426 FFF7FEFF 		bl	cur_shift
 3017              	.LVL278:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3018              		.loc 2 104 8 view .LVU848
 3019 042a 0028     		cmp	r0, #0
 3020 042c D7D1     		bne	.L188
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3021              		.loc 2 104 33 is_stmt 1 view .LVU849
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3022              		.loc 2 104 67 is_stmt 0 view .LVU850
 3023 042e 3168     		ldr	r1, [r6]
 3024 0430 494A     		ldr	r2, .L244+4
 3025 0432 D023     		movs	r3, #208
 3026 0434 03FB01F3 		mul	r3, r3, r1
 3027 0438 D018     		adds	r0, r2, r3
 3028 043a D0E91401 		ldrd	r0, r1, [r0, #80]
 3029 043e 5033     		adds	r3, r3, #80
 3030 0440 B1E7     		b	.L222
 3031              	.L175:
  83:src/console.c ****       case SHIFT_G:
 3032              		.loc 2 83 2 is_stmt 1 view .LVU851
  85:src/console.c **** 	break;
 3033              		.loc 2 85 2 view .LVU852
  85:src/console.c **** 	break;
 3034              		.loc 2 85 9 is_stmt 0 view .LVU853
 3035 0442 464B     		ldr	r3, .L244+8
 3036 0444 EEE6     		b	.L224
 3037              	.L191:
 114:src/console.c ****   }
 3038              		.loc 2 114 5 is_stmt 1 view .LVU854
 114:src/console.c ****   }
ARM GAS  /tmp/ccwJS9HW.s 			page 82


 3039              		.loc 2 114 9 is_stmt 0 view .LVU855
 3040 0446 FFF7FEFF 		bl	cur_shift
 3041              	.LVL279:
 114:src/console.c ****   }
 3042              		.loc 2 114 8 view .LVU856
 3043 044a 0128     		cmp	r0, #1
 3044 044c 46D0     		beq	.L240
 3045              	.L178:
 117:src/console.c ****   case SHIFT_N:    
 3046              		.loc 2 117 3 is_stmt 1 view .LVU857
 117:src/console.c ****   case SHIFT_N:    
 3047              		.loc 2 117 11 is_stmt 0 view .LVU858
 3048 044e FFF7FEFF 		bl	cur_shift
 3049              	.LVL280:
 117:src/console.c ****   case SHIFT_N:    
 3050              		.loc 2 117 3 view .LVU859
 3051 0452 0128     		cmp	r0, #1
 3052 0454 27D0     		beq	.L192
 3053 0456 0228     		cmp	r0, #2
 3054 0458 29D0     		beq	.L193
 3055 045a 30B3     		cbz	r0, .L194
  62:src/console.c **** 
 3056              		.loc 2 62 41 view .LVU860
 3057 045c 5FFA8AFA 		uxtb	r10, r10
 3058              	.LVL281:
  62:src/console.c **** 
 3059              		.loc 2 62 41 view .LVU861
 3060              	.LBE132:
 3061              	.LBE163:
 460:src/console.c **** 	set_menu ( remapped.shift );
 3062              		.loc 2 460 7 is_stmt 1 view .LVU862
 460:src/console.c **** 	set_menu ( remapped.shift );
 3063              		.loc 2 460 10 is_stmt 0 view .LVU863
 3064 0460 BAF12F0F 		cmp	r10, #47
 3065 0464 32D0     		beq	.L241
 3066              	.LBB164:
 3067              	.LBB133:
 128:src/console.c ****   }
 3068              		.loc 2 128 12 view .LVU864
 3069 0466 0025     		movs	r5, #0
 3070 0468 5CE6     		b	.L195
 3071              	.LVL282:
 3072              	.L232:
  79:src/console.c **** 	break;
 3073              		.loc 2 79 2 is_stmt 1 view .LVU865
  79:src/console.c **** 	break;
 3074              		.loc 2 79 21 is_stmt 0 view .LVU866
 3075 046a 3D4A     		ldr	r2, .L244+12
 3076 046c 92E80300 		ldm	r2, {r0, r1}
 3077 0470 0DF10809 		add	r9, sp, #8
 3078 0474 89E80300 		stm	r9, {r0, r1}
 3079              	.LVL283:
  79:src/console.c **** 	break;
 3080              		.loc 2 79 21 view .LVU867
 3081              	.LBE133:
 3082              	.LBE164:
 460:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/ccwJS9HW.s 			page 83


 3083              		.loc 2 460 7 is_stmt 1 view .LVU868
 476:src/console.c **** 	SET_ST(STAT_MENU);
 3084              		.loc 2 476 7 view .LVU869
 483:src/console.c **** 	remapped = do_multi (remapped);
 3085              		.loc 2 483 7 view .LVU870
 487:src/console.c ****       process_keycode_with_shift(remapped);
 3086              		.loc 2 487 7 view .LVU871
 3087              	.LBB165:
 3088              	.LBB134:
  79:src/console.c **** 	break;
 3089              		.loc 2 79 21 is_stmt 0 view .LVU872
 3090 0478 4FF0290A 		mov	r10, #41
 3091              	.LVL284:
  79:src/console.c **** 	break;
 3092              		.loc 2 79 21 view .LVU873
 3093 047c 78E6     		b	.L174
 3094              	.LVL285:
 3095              	.L238:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3096              		.loc 2 101 33 is_stmt 1 view .LVU874
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3097              		.loc 2 101 67 is_stmt 0 view .LVU875
 3098 047e 3168     		ldr	r1, [r6]
 3099 0480 354A     		ldr	r2, .L244+4
 3100 0482 D023     		movs	r3, #208
 3101 0484 03FB01F3 		mul	r3, r3, r1
 3102 0488 D018     		adds	r0, r2, r3
 3103 048a D0E90C01 		ldrd	r0, r1, [r0, #48]
 3104 048e 3033     		adds	r3, r3, #48
 3105 0490 89E7     		b	.L222
 3106              	.L236:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3107              		.loc 2 98 33 is_stmt 1 view .LVU876
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3108              		.loc 2 98 67 is_stmt 0 view .LVU877
 3109 0492 3168     		ldr	r1, [r6]
 3110 0494 304A     		ldr	r2, .L244+4
 3111 0496 D023     		movs	r3, #208
 3112 0498 03FB01F3 		mul	r3, r3, r1
 3113 049c D018     		adds	r0, r2, r3
 3114 049e D0E90401 		ldrd	r0, r1, [r0, #16]
 3115 04a2 1033     		adds	r3, r3, #16
 3116 04a4 7FE7     		b	.L222
 3117              	.L192:
 120:src/console.c ****   case SHIFT_F:
 3118              		.loc 2 120 5 is_stmt 1 view .LVU878
 122:src/console.c ****     break;
 3119              		.loc 2 122 5 view .LVU879
 122:src/console.c ****     break;
 3120              		.loc 2 122 26 is_stmt 0 view .LVU880
 3121 04a6 2F4B     		ldr	r3, .L244+16
 3122 04a8 2DE6     		b	.L223
 3123              	.L194:
 119:src/console.c ****     break;
 3124              		.loc 2 119 5 is_stmt 1 view .LVU881
 119:src/console.c ****     break;
 3125              		.loc 2 119 24 is_stmt 0 view .LVU882
ARM GAS  /tmp/ccwJS9HW.s 			page 84


 3126 04aa 2F4B     		ldr	r3, .L244+20
 3127 04ac 2BE6     		b	.L223
 3128              	.L193:
 123:src/console.c ****   case SHIFT_G:
 3129              		.loc 2 123 5 is_stmt 1 view .LVU883
 125:src/console.c ****     break;
 3130              		.loc 2 125 5 view .LVU884
 125:src/console.c ****     break;
 3131              		.loc 2 125 26 is_stmt 0 view .LVU885
 3132 04ae 2F4B     		ldr	r3, .L244+24
 3133 04b0 03EBCA02 		add	r2, r3, r10, lsl #3
 3134 04b4 92E80300 		ldm	r2, {r0, r1}
 3135 04b8 0DF10809 		add	r9, sp, #8
 3136 04bc 89E80300 		stm	r9, {r0, r1}
 3137 04c0 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 3138              	.LVL286:
 125:src/console.c ****     break;
 3139              		.loc 2 125 26 view .LVU886
 3140 04c4 0D46     		mov	r5, r1
 3141              	.LVL287:
 125:src/console.c ****     break;
 3142              		.loc 2 125 26 view .LVU887
 3143 04c6 29E6     		b	.L170
 3144              	.LVL288:
 3145              	.L206:
  77:src/console.c ****       case SHIFT_N:
 3146              		.loc 2 77 7 view .LVU888
 3147 04c8 0025     		movs	r5, #0
 3148 04ca 4FE6     		b	.L225
 3149              	.LVL289:
 3150              	.L241:
  77:src/console.c ****       case SHIFT_N:
 3151              		.loc 2 77 7 view .LVU889
 3152              	.LBE134:
 3153              	.LBE165:
 461:src/console.c **** 	display_current_menu ();
 3154              		.loc 2 461 2 is_stmt 1 view .LVU890
 3155              	.LBB166:
   3:src/menu.c    ****   int m = current_menu;
 3156              		.loc 1 3 6 view .LVU891
 3157              	.LBB149:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3158              		.loc 1 4 3 view .LVU892
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3159              		.loc 1 4 7 is_stmt 0 view .LVU893
 3160 04cc 3368     		ldr	r3, [r6]
 3161              	.LVL290:
   5:src/menu.c    ****     current_menu = 0;
 3162              		.loc 1 5 3 is_stmt 1 view .LVU894
   5:src/menu.c    ****     current_menu = 0;
 3163              		.loc 1 5 6 is_stmt 0 view .LVU895
 3164 04ce 002B     		cmp	r3, #0
 3165 04d0 3FF4F1AE 		beq	.L208
 3166              	.LBE149:
 3167              	.LBE166:
 3168              	.LBB167:
 3169              	.LBB135:
ARM GAS  /tmp/ccwJS9HW.s 			page 85


 128:src/console.c ****   }
 3170              		.loc 2 128 12 view .LVU896
 3171 04d4 0025     		movs	r5, #0
 3172 04d6 0DF10809 		add	r9, sp, #8
 3173 04da B5E6     		b	.L197
 3174              	.LVL291:
 3175              	.L240:
 114:src/console.c ****   }
 3176              		.loc 2 114 33 is_stmt 1 view .LVU897
 114:src/console.c ****   }
 3177              		.loc 2 114 67 is_stmt 0 view .LVU898
 3178 04dc 3168     		ldr	r1, [r6]
 3179 04de 1E4A     		ldr	r2, .L244+4
 3180 04e0 D023     		movs	r3, #208
 3181 04e2 03FB01F3 		mul	r3, r3, r1
 3182 04e6 D018     		adds	r0, r2, r3
 3183 04e8 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3184 04ec B833     		adds	r3, r3, #184
 3185 04ee 5AE7     		b	.L222
 3186              	.L233:
 111:src/console.c ****   case KEY_F6:
 3187              		.loc 2 111 33 is_stmt 1 view .LVU899
 111:src/console.c ****   case KEY_F6:
 3188              		.loc 2 111 67 is_stmt 0 view .LVU900
 3189 04f0 3168     		ldr	r1, [r6]
 3190 04f2 194A     		ldr	r2, .L244+4
 3191 04f4 D023     		movs	r3, #208
 3192 04f6 03FB01F3 		mul	r3, r3, r1
 3193 04fa D018     		adds	r0, r2, r3
 3194 04fc D0E92601 		ldrd	r0, r1, [r0, #152]
 3195 0500 9833     		adds	r3, r3, #152
 3196 0502 50E7     		b	.L222
 3197              	.L234:
 108:src/console.c ****   case KEY_F5:
 3198              		.loc 2 108 33 is_stmt 1 view .LVU901
 108:src/console.c ****   case KEY_F5:
 3199              		.loc 2 108 67 is_stmt 0 view .LVU902
 3200 0504 3168     		ldr	r1, [r6]
 3201 0506 144A     		ldr	r2, .L244+4
 3202 0508 D023     		movs	r3, #208
 3203 050a 03FB01F3 		mul	r3, r3, r1
 3204 050e D018     		adds	r0, r2, r3
 3205 0510 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3206 0514 7833     		adds	r3, r3, #120
 3207 0516 46E7     		b	.L222
 3208              	.L235:
 105:src/console.c ****   case KEY_F4:
 3209              		.loc 2 105 33 is_stmt 1 view .LVU903
 105:src/console.c ****   case KEY_F4:
 3210              		.loc 2 105 67 is_stmt 0 view .LVU904
 3211 0518 3168     		ldr	r1, [r6]
 3212 051a 0F4A     		ldr	r2, .L244+4
 3213 051c D023     		movs	r3, #208
 3214 051e 03FB01F3 		mul	r3, r3, r1
 3215 0522 D018     		adds	r0, r2, r3
 3216 0524 D0E91601 		ldrd	r0, r1, [r0, #88]
 3217 0528 5833     		adds	r3, r3, #88
ARM GAS  /tmp/ccwJS9HW.s 			page 86


 3218 052a 3CE7     		b	.L222
 3219              	.L239:
 102:src/console.c ****   case KEY_F3:
 3220              		.loc 2 102 33 is_stmt 1 view .LVU905
 102:src/console.c ****   case KEY_F3:
 3221              		.loc 2 102 67 is_stmt 0 view .LVU906
 3222 052c 3168     		ldr	r1, [r6]
 3223 052e 0A4A     		ldr	r2, .L244+4
 3224 0530 D023     		movs	r3, #208
 3225 0532 03FB01F3 		mul	r3, r3, r1
 3226 0536 D018     		adds	r0, r2, r3
 3227 0538 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3228 053c 3833     		adds	r3, r3, #56
 3229 053e 32E7     		b	.L222
 3230              	.L237:
  99:src/console.c ****   case KEY_F2:
 3231              		.loc 2 99 33 is_stmt 1 view .LVU907
  99:src/console.c ****   case KEY_F2:
 3232              		.loc 2 99 67 is_stmt 0 view .LVU908
 3233 0540 3168     		ldr	r1, [r6]
 3234 0542 054A     		ldr	r2, .L244+4
 3235 0544 D023     		movs	r3, #208
 3236 0546 03FB01F3 		mul	r3, r3, r1
 3237 054a D018     		adds	r0, r2, r3
 3238 054c D0E90601 		ldrd	r0, r1, [r0, #24]
 3239 0550 1833     		adds	r3, r3, #24
 3240 0552 28E7     		b	.L222
 3241              	.L245:
 3242              		.align	2
 3243              	.L244:
 3244 0554 E0000000 		.word	.LANCHOR9+224
 3245 0558 00000000 		.word	.LANCHOR3
 3246 055c 00000000 		.word	.LANCHOR10
 3247 0560 E0000000 		.word	.LANCHOR8+224
 3248 0564 00000000 		.word	.LANCHOR9
 3249 0568 00000000 		.word	.LANCHOR8
 3250 056c 00000000 		.word	.LANCHOR12
 3251              	.LBE135:
 3252              	.LBE167:
 3253              		.cfi_endproc
 3254              	.LFE24:
 3256              		.global	n_p
 3257              		.comm	print_string,22,4
 3258              		.global	spaces
 3259              		.global	release
 3260              		.global	h_shift
 3261              		.global	g_shift
 3262              		.global	f_shift
 3263              		.global	heartbeat
 3264              		.global	no_key
 3265              		.global	MID_MENU
 3266              		.section	.rodata.str1.4,"aMS",%progbits,1
 3267              		.align	2
 3268              	.LC4:
 3269 0000 53797374 		.ascii	"System!\000"
 3269      656D2100 
 3270              		.global	mid_menu
ARM GAS  /tmp/ccwJS9HW.s 			page 87


 3271              		.section	.bss.current_menu,"aw",%nobits
 3272              		.align	2
 3273              		.set	.LANCHOR1,. + 0
 3276              	current_menu:
 3277 0000 00000000 		.space	4
 3278              		.section	.bss.last_menu,"aw",%nobits
 3279              		.align	2
 3280              		.set	.LANCHOR2,. + 0
 3283              	last_menu:
 3284 0000 00000000 		.space	4
 3285              		.section	.bss.mdots,"aw",%nobits
 3286              		.align	2
 3287              		.set	.LANCHOR0,. + 0
 3290              	mdots:
 3291 0000 00000000 		.space	400
 3291      00000000 
 3291      00000000 
 3291      00000000 
 3291      00000000 
 3292              		.section	.bss.n_p,"aw",%nobits
 3293              		.align	2
 3296              	n_p:
 3297 0000 00000000 		.space	4
 3298              		.section	.bss.start_ticks,"aw",%nobits
 3299              		.align	2
 3300              		.set	.LANCHOR4,. + 0
 3303              	start_ticks:
 3304 0000 00000000 		.space	4
 3305              		.section	.data.f_shift,"aw"
 3306              		.align	2
 3307              		.set	.LANCHOR13,. + 0
 3310              	f_shift:
 3311 0000 29       		.byte	41
 3312 0001 000000   		.space	3
 3313 0004 FFFFFFFF 		.word	-1
 3314              		.section	.data.g_shift,"aw"
 3315              		.align	2
 3316              		.set	.LANCHOR14,. + 0
 3319              	g_shift:
 3320 0000 2A       		.byte	42
 3321 0001 000000   		.space	3
 3322 0004 FFFFFFFF 		.word	-1
 3323              		.section	.data.h_shift,"aw"
 3324              		.align	2
 3325              		.set	.LANCHOR10,. + 0
 3328              	h_shift:
 3329 0000 2B       		.byte	43
 3330 0001 000000   		.space	3
 3331 0004 FFFFFFFF 		.word	-1
 3332              		.section	.data.heartbeat,"aw"
 3333              		.align	2
 3334              		.set	.LANCHOR16,. + 0
 3337              	heartbeat:
 3338 0000 62       		.byte	98
 3339 0001 000000   		.space	3
 3340 0004 FFFFFFFF 		.word	-1
 3341              		.section	.data.no_key,"aw"
ARM GAS  /tmp/ccwJS9HW.s 			page 88


 3342              		.align	2
 3343              		.set	.LANCHOR6,. + 0
 3346              	no_key:
 3347 0000 2E       		.byte	46
 3348 0001 000000   		.space	3
 3349 0004 00000000 		.word	0
 3350              		.section	.data.release,"aw"
 3351              		.align	2
 3352              		.set	.LANCHOR7,. + 0
 3355              	release:
 3356 0000 63       		.byte	99
 3357 0001 000000   		.space	3
 3358 0004 FFFFFFFF 		.word	-1
 3359              		.section	.data.spaces,"aw"
 3360              		.align	2
 3361              		.set	.LANCHOR5,. + 0
 3364              	spaces:
 3365 0000 20202020 		.ascii	"                     \000"
 3365      20202020 
 3365      20202020 
 3365      20202020 
 3365      20202020 
 3366              		.section	.rodata.MID_MENU,"a"
 3367              		.align	2
 3368              		.set	.LANCHOR15,. + 0
 3371              	MID_MENU:
 3372 0000 00000000 		.word	.LC4
 3373 0004 00000000 		.word	mid_menu
 3374 0008 00000000 		.word	0
 3375 000c 00000000 		.word	0
 3376              		.section	.rodata.Menus,"a"
 3377              		.align	2
 3378              		.set	.LANCHOR3,. + 0
 3381              	Menus:
 3382 0000 426C616E 		.ascii	"Blank\000"
 3382      6B00
 3383 0006 00000000 		.space	9
 3383      00000000 
 3383      00
 3384 000f 00       		.space	1
 3385 0010 2E       		.byte	46
 3386 0011 000000   		.space	3
 3387 0014 FFFFFFFF 		.word	-1
 3388 0018 2E       		.byte	46
 3389 0019 000000   		.space	3
 3390 001c FFFFFFFF 		.word	-1
 3391 0020 00       		.ascii	"\000"
 3392 0021 00000000 		.space	7
 3392      000000
 3393 0028 00       		.ascii	"\000"
 3394 0029 00000000 		.space	7
 3394      000000
 3395 0030 2E       		.byte	46
 3396 0031 000000   		.space	3
 3397 0034 FFFFFFFF 		.word	-1
 3398 0038 2E       		.byte	46
 3399 0039 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 89


 3400 003c FFFFFFFF 		.word	-1
 3401 0040 00       		.ascii	"\000"
 3402 0041 00000000 		.space	7
 3402      000000
 3403 0048 00       		.ascii	"\000"
 3404 0049 00000000 		.space	7
 3404      000000
 3405 0050 2E       		.byte	46
 3406 0051 000000   		.space	3
 3407 0054 FFFFFFFF 		.word	-1
 3408 0058 2E       		.byte	46
 3409 0059 000000   		.space	3
 3410 005c FFFFFFFF 		.word	-1
 3411 0060 00       		.ascii	"\000"
 3412 0061 00000000 		.space	7
 3412      000000
 3413 0068 00       		.ascii	"\000"
 3414 0069 00000000 		.space	7
 3414      000000
 3415 0070 2E       		.byte	46
 3416 0071 000000   		.space	3
 3417 0074 FFFFFFFF 		.word	-1
 3418 0078 2E       		.byte	46
 3419 0079 000000   		.space	3
 3420 007c FFFFFFFF 		.word	-1
 3421 0080 00       		.ascii	"\000"
 3422 0081 00000000 		.space	7
 3422      000000
 3423 0088 00       		.ascii	"\000"
 3424 0089 00000000 		.space	7
 3424      000000
 3425 0090 2C       		.byte	44
 3426 0091 000000   		.space	3
 3427 0094 FFFFFFFF 		.word	-1
 3428 0098 2E       		.byte	46
 3429 0099 000000   		.space	3
 3430 009c FFFFFFFF 		.word	-1
 3431 00a0 2D2D0D00 		.ascii	"--\015\000"
 3432 00a4 00000000 		.space	4
 3433 00a8 00       		.ascii	"\000"
 3434 00a9 00000000 		.space	7
 3434      000000
 3435 00b0 2D       		.byte	45
 3436 00b1 000000   		.space	3
 3437 00b4 FFFFFFFF 		.word	-1
 3438 00b8 2E       		.byte	46
 3439 00b9 000000   		.space	3
 3440 00bc FFFFFFFF 		.word	-1
 3441 00c0 43505800 		.ascii	"CPX\000"
 3442 00c4 00000000 		.space	4
 3443 00c8 00       		.ascii	"\000"
 3444 00c9 00000000 		.space	7
 3444      000000
 3445 00d0 436C6561 		.ascii	"Clear\000"
 3445      7200
 3446 00d6 00000000 		.space	9
 3446      00000000 
ARM GAS  /tmp/ccwJS9HW.s 			page 90


 3446      00
 3447 00df 00       		.space	1
 3448 00e0 10       		.byte	16
 3449 00e1 000000   		.space	3
 3450 00e4 01000000 		.word	1
 3451 00e8 2E       		.byte	46
 3452 00e9 000000   		.space	3
 3453 00ec FFFFFFFF 		.word	-1
 3454 00f0 434C5072 		.ascii	"CLProg\000"
 3454      6F6700
 3455 00f7 00       		.space	1
 3456 00f8 00       		.ascii	"\000"
 3457 00f9 00000000 		.space	7
 3457      000000
 3458 0100 10       		.byte	16
 3459 0101 000000   		.space	3
 3460 0104 02000000 		.word	2
 3461 0108 2E       		.byte	46
 3462 0109 000000   		.space	3
 3463 010c FFFFFFFF 		.word	-1
 3464 0110 434C9100 		.ascii	"CL\221\000"
 3465 0114 00000000 		.space	4
 3466 0118 00       		.ascii	"\000"
 3467 0119 00000000 		.space	7
 3467      000000
 3468 0120 10       		.byte	16
 3469 0121 000000   		.space	3
 3470 0124 03000000 		.word	3
 3471 0128 2E       		.byte	46
 3472 0129 000000   		.space	3
 3473 012c FFFFFFFF 		.word	-1
 3474 0130 434C2058 		.ascii	"CL X\000"
 3474      00
 3475 0135 000000   		.space	3
 3476 0138 00       		.ascii	"\000"
 3477 0139 00000000 		.space	7
 3477      000000
 3478 0140 2E       		.byte	46
 3479 0141 000000   		.space	3
 3480 0144 FFFFFFFF 		.word	-1
 3481 0148 2E       		.byte	46
 3482 0149 000000   		.space	3
 3483 014c FFFFFFFF 		.word	-1
 3484 0150 00       		.ascii	"\000"
 3485 0151 00000000 		.space	7
 3485      000000
 3486 0158 00       		.ascii	"\000"
 3487 0159 00000000 		.space	7
 3487      000000
 3488 0160 2C       		.byte	44
 3489 0161 000000   		.space	3
 3490 0164 FFFFFFFF 		.word	-1
 3491 0168 2E       		.byte	46
 3492 0169 000000   		.space	3
 3493 016c FFFFFFFF 		.word	-1
 3494 0170 2D2D0D00 		.ascii	"--\015\000"
 3495 0174 00000000 		.space	4
ARM GAS  /tmp/ccwJS9HW.s 			page 91


 3496 0178 00       		.ascii	"\000"
 3497 0179 00000000 		.space	7
 3497      000000
 3498 0180 2D       		.byte	45
 3499 0181 000000   		.space	3
 3500 0184 FFFFFFFF 		.word	-1
 3501 0188 2E       		.byte	46
 3502 0189 000000   		.space	3
 3503 018c FFFFFFFF 		.word	-1
 3504 0190 43505800 		.ascii	"CPX\000"
 3505 0194 00000000 		.space	4
 3506 0198 00       		.ascii	"\000"
 3507 0199 00000000 		.space	7
 3507      000000
 3508 01a0 44495350 		.ascii	"DISP\000"
 3508      00
 3509 01a5 00000000 		.space	10
 3509      00000000 
 3509      0000
 3510 01af 00       		.space	1
 3511 01b0 00       		.byte	0
 3512 01b1 000000   		.space	3
 3513 01b4 03000000 		.word	3
 3514 01b8 05       		.byte	5
 3515 01b9 000000   		.space	3
 3516 01bc 01000000 		.word	1
 3517 01c0 414C4C00 		.ascii	"ALL\000"
 3518 01c4 00000000 		.space	4
 3519 01c8 6120622F 		.ascii	"a b/c\000"
 3519      6300
 3520 01ce 0000     		.space	2
 3521 01d0 01       		.byte	1
 3522 01d1 000000   		.space	3
 3523 01d4 03000000 		.word	3
 3524 01d8 05       		.byte	5
 3525 01d9 000000   		.space	3
 3526 01dc 02000000 		.word	2
 3527 01e0 46495800 		.ascii	"FIX\000"
 3528 01e4 00000000 		.space	4
 3529 01e8 642F6300 		.ascii	"d/c\000"
 3530 01ec 00000000 		.space	4
 3531 01f0 02       		.byte	2
 3532 01f1 000000   		.space	3
 3533 01f4 03000000 		.word	3
 3534 01f8 06       		.byte	6
 3535 01f9 000000   		.space	3
 3536 01fc 01000000 		.word	1
 3537 0200 53434900 		.ascii	"SCI\000"
 3538 0204 00000000 		.space	4
 3539 0208 482E4D53 		.ascii	"H.MS\000"
 3539      00
 3540 020d 000000   		.space	3
 3541 0210 03       		.byte	3
 3542 0211 000000   		.space	3
 3543 0214 03000000 		.word	3
 3544 0218 07       		.byte	7
 3545 0219 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 92


 3546 021c 01000000 		.word	1
 3547 0220 454E4700 		.ascii	"ENG\000"
 3548 0224 00000000 		.space	4
 3549 0228 482E6400 		.ascii	"H.d\000"
 3550 022c 00000000 		.space	4
 3551 0230 2C       		.byte	44
 3552 0231 000000   		.space	3
 3553 0234 FFFFFFFF 		.word	-1
 3554 0238 26       		.byte	38
 3555 0239 000000   		.space	3
 3556 023c 03000000 		.word	3
 3557 0240 2D2D0D00 		.ascii	"--\015\000"
 3558 0244 00000000 		.space	4
 3559 0248 2E2F2C00 		.ascii	"./,\000"
 3560 024c 00000000 		.space	4
 3561 0250 2D       		.byte	45
 3562 0251 000000   		.space	3
 3563 0254 FFFFFFFF 		.word	-1
 3564 0258 2E       		.byte	46
 3565 0259 000000   		.space	3
 3566 025c FFFFFFFF 		.word	-1
 3567 0260 43505800 		.ascii	"CPX\000"
 3568 0264 00000000 		.space	4
 3569 0268 00       		.ascii	"\000"
 3570 0269 00000000 		.space	7
 3570      000000
 3571 0270 42415345 		.ascii	"BASE\000"
 3571      00
 3572 0275 00000000 		.space	10
 3572      00000000 
 3572      0000
 3573 027f 00       		.space	1
 3574 0280 0E       		.byte	14
 3575 0281 000000   		.space	3
 3576 0284 01000000 		.word	1
 3577 0288 0E       		.byte	14
 3578 0289 000000   		.space	3
 3579 028c 03000000 		.word	3
 3580 0290 42494E00 		.ascii	"BIN\000"
 3581 0294 00000000 		.space	4
 3582 0298 6E6F7400 		.ascii	"not\000"
 3583 029c 00000000 		.space	4
 3584 02a0 0E       		.byte	14
 3585 02a1 000000   		.space	3
 3586 02a4 02000000 		.word	2
 3587 02a8 13       		.byte	19
 3588 02a9 000000   		.space	3
 3589 02ac 03000000 		.word	3
 3590 02b0 4F435400 		.ascii	"OCT\000"
 3591 02b4 00000000 		.space	4
 3592 02b8 616E6400 		.ascii	"and\000"
 3593 02bc 00000000 		.space	4
 3594 02c0 0F       		.byte	15
 3595 02c1 000000   		.space	3
 3596 02c4 01000000 		.word	1
 3597 02c8 14       		.byte	20
 3598 02c9 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 93


 3599 02cc 03000000 		.word	3
 3600 02d0 44454300 		.ascii	"DEC\000"
 3601 02d4 00000000 		.space	4
 3602 02d8 6F7200   		.ascii	"or\000"
 3603 02db 00000000 		.space	5
 3603      00
 3604 02e0 0F       		.byte	15
 3605 02e1 000000   		.space	3
 3606 02e4 02000000 		.word	2
 3607 02e8 15       		.byte	21
 3608 02e9 000000   		.space	3
 3609 02ec 03000000 		.word	3
 3610 02f0 48455800 		.ascii	"HEX\000"
 3611 02f4 00000000 		.space	4
 3612 02f8 786F7200 		.ascii	"xor\000"
 3613 02fc 00000000 		.space	4
 3614 0300 2C       		.byte	44
 3615 0301 000000   		.space	3
 3616 0304 FFFFFFFF 		.word	-1
 3617 0308 16       		.byte	22
 3618 0309 000000   		.space	3
 3619 030c 03000000 		.word	3
 3620 0310 2D2D0D00 		.ascii	"--\015\000"
 3621 0314 00000000 		.space	4
 3622 0318 524D4452 		.ascii	"RMDR\000"
 3622      00
 3623 031d 000000   		.space	3
 3624 0320 2D       		.byte	45
 3625 0321 000000   		.space	3
 3626 0324 FFFFFFFF 		.word	-1
 3627 0328 07       		.byte	7
 3628 0329 000000   		.space	3
 3629 032c 01000000 		.word	1
 3630 0330 43505800 		.ascii	"CPX\000"
 3631 0334 00000000 		.space	4
 3632 0338 482E6400 		.ascii	"H.d\000"
 3633 033c 00000000 		.space	4
 3634 0340 414E474C 		.ascii	"ANGLES\000"
 3634      455300
 3635 0347 00000000 		.space	8
 3635      00000000 
 3636 034f 00       		.space	1
 3637 0350 06       		.byte	6
 3638 0351 000000   		.space	3
 3639 0354 02000000 		.word	2
 3640 0358 04       		.byte	4
 3641 0359 000000   		.space	3
 3642 035c 01000000 		.word	1
 3643 0360 44454700 		.ascii	"DEG\000"
 3644 0364 00000000 		.space	4
 3645 0368 500D5200 		.ascii	"P\015R\000"
 3646 036c 00000000 		.space	4
 3647 0370 07       		.byte	7
 3648 0371 000000   		.space	3
 3649 0374 02000000 		.word	2
 3650 0378 04       		.byte	4
 3651 0379 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 94


 3652 037c 02000000 		.word	2
 3653 0380 52414400 		.ascii	"RAD\000"
 3654 0384 00000000 		.space	4
 3655 0388 520D5000 		.ascii	"R\015P\000"
 3656 038c 00000000 		.space	4
 3657 0390 08       		.byte	8
 3658 0391 000000   		.space	3
 3659 0394 02000000 		.word	2
 3660 0398 00       		.byte	0
 3661 0399 000000   		.space	3
 3662 039c 01000000 		.word	1
 3663 03a0 47524144 		.ascii	"GRAD\000"
 3663      00
 3664 03a5 000000   		.space	3
 3665 03a8 48595000 		.ascii	"HYP\000"
 3666 03ac 00000000 		.space	4
 3667 03b0 06       		.byte	6
 3668 03b1 000000   		.space	3
 3669 03b4 01000000 		.word	1
 3670 03b8 07       		.byte	7
 3671 03b9 000000   		.space	3
 3672 03bc 01000000 		.word	1
 3673 03c0 482E4D53 		.ascii	"H.MS\000"
 3673      00
 3674 03c5 000000   		.space	3
 3675 03c8 482E6400 		.ascii	"H.d\000"
 3676 03cc 00000000 		.space	4
 3677 03d0 2C       		.byte	44
 3678 03d1 000000   		.space	3
 3679 03d4 FFFFFFFF 		.word	-1
 3680 03d8 00       		.byte	0
 3681 03d9 000000   		.space	3
 3682 03dc 02000000 		.word	2
 3683 03e0 2D2D0D00 		.ascii	"--\015\000"
 3684 03e4 00000000 		.space	4
 3685 03e8 4859509D 		.ascii	"HYP\235\000"
 3685      00
 3686 03ed 000000   		.space	3
 3687 03f0 2D       		.byte	45
 3688 03f1 000000   		.space	3
 3689 03f4 FFFFFFFF 		.word	-1
 3690 03f8 2E       		.byte	46
 3691 03f9 000000   		.space	3
 3692 03fc FFFFFFFF 		.word	-1
 3693 0400 43505800 		.ascii	"CPX\000"
 3694 0404 00000000 		.space	4
 3695 0408 00       		.ascii	"\000"
 3696 0409 00000000 		.space	7
 3696      000000
 3697 0410 4D495343 		.ascii	"MISC\000"
 3697      00
 3698 0415 00000000 		.space	10
 3698      00000000 
 3698      0000
 3699 041f 00       		.space	1
 3700 0420 25       		.byte	37
 3701 0421 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 95


 3702 0424 01000000 		.word	1
 3703 0428 14       		.byte	20
 3704 0429 000000   		.space	3
 3705 042c 01000000 		.word	1
 3706 0430 7C587C00 		.ascii	"|X|\000"
 3707 0434 00000000 		.space	4
 3708 0438 329C00   		.ascii	"2\234\000"
 3709 043b 00000000 		.space	5
 3709      00
 3710 0440 25       		.byte	37
 3711 0441 000000   		.space	3
 3712 0444 02000000 		.word	2
 3713 0448 14       		.byte	20
 3714 0449 000000   		.space	3
 3715 044c 02000000 		.word	2
 3716 0450 524E4400 		.ascii	"RND\000"
 3717 0454 00000000 		.space	4
 3718 0458 4C6F67BA 		.ascii	"Log\272\000"
 3718      00
 3719 045d 000000   		.space	3
 3720 0460 26       		.byte	38
 3721 0461 000000   		.space	3
 3722 0464 01000000 		.word	1
 3723 0468 15       		.byte	21
 3724 0469 000000   		.space	3
 3725 046c 02000000 		.word	2
 3726 0470 49506172 		.ascii	"IPart\000"
 3726      7400
 3727 0476 0000     		.space	2
 3728 0478 4C6F678B 		.ascii	"Log\213\000"
 3728      00
 3729 047d 000000   		.space	3
 3730 0480 26       		.byte	38
 3731 0481 000000   		.space	3
 3732 0484 02000000 		.word	2
 3733 0488 16       		.byte	22
 3734 0489 000000   		.space	3
 3735 048c 02000000 		.word	2
 3736 0490 46506172 		.ascii	"FPart\000"
 3736      7400
 3737 0496 0000     		.space	2
 3738 0498 7C7C656C 		.ascii	"||el\000"
 3738      00
 3739 049d 000000   		.space	3
 3740 04a0 2C       		.byte	44
 3741 04a1 000000   		.space	3
 3742 04a4 FFFFFFFF 		.word	-1
 3743 04a8 22       		.byte	34
 3744 04a9 000000   		.space	3
 3745 04ac 02000000 		.word	2
 3746 04b0 2D2D0D00 		.ascii	"--\015\000"
 3747 04b4 00000000 		.space	4
 3748 04b8 832500   		.ascii	"\203%\000"
 3749 04bb 00000000 		.space	5
 3749      00
 3750 04c0 2D       		.byte	45
 3751 04c1 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 96


 3752 04c4 FFFFFFFF 		.word	-1
 3753 04c8 2E       		.byte	46
 3754 04c9 000000   		.space	3
 3755 04cc FFFFFFFF 		.word	-1
 3756 04d0 43505800 		.ascii	"CPX\000"
 3757 04d4 00000000 		.space	4
 3758 04d8 00       		.ascii	"\000"
 3759 04d9 00000000 		.space	7
 3759      000000
 3760 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3760      204B6579 
 3760      00
 3761 04e9 00000000 		.space	6
 3761      0000
 3762 04ef 00       		.space	1
 3763 04f0 0D       		.byte	13
 3764 04f1 000000   		.space	3
 3765 04f4 01000000 		.word	1
 3766 04f8 2E       		.byte	46
 3767 04f9 000000   		.space	3
 3768 04fc FFFFFFFF 		.word	-1
 3769 0500 53686F77 		.ascii	"Show\016\000"
 3769      0E00
 3770 0506 0000     		.space	2
 3771 0508 00       		.ascii	"\000"
 3772 0509 00000000 		.space	7
 3772      000000
 3773 0510 0D       		.byte	13
 3774 0511 000000   		.space	3
 3775 0514 02000000 		.word	2
 3776 0518 2E       		.byte	46
 3777 0519 000000   		.space	3
 3778 051c FFFFFFFF 		.word	-1
 3779 0520 53686F77 		.ascii	"Show\015\000"
 3779      0D00
 3780 0526 0000     		.space	2
 3781 0528 00       		.ascii	"\000"
 3782 0529 00000000 		.space	7
 3782      000000
 3783 0530 0D       		.byte	13
 3784 0531 000000   		.space	3
 3785 0534 03000000 		.word	3
 3786 0538 2E       		.byte	46
 3787 0539 000000   		.space	3
 3788 053c FFFFFFFF 		.word	-1
 3789 0540 78173F00 		.ascii	"x\027?\000"
 3790 0544 00000000 		.space	4
 3791 0548 00       		.ascii	"\000"
 3792 0549 00000000 		.space	7
 3792      000000
 3793 0550 2E       		.byte	46
 3794 0551 000000   		.space	3
 3795 0554 FFFFFFFF 		.word	-1
 3796 0558 2E       		.byte	46
 3797 0559 000000   		.space	3
 3798 055c FFFFFFFF 		.word	-1
 3799 0560 00       		.ascii	"\000"
ARM GAS  /tmp/ccwJS9HW.s 			page 97


 3800 0561 00000000 		.space	7
 3800      000000
 3801 0568 00       		.ascii	"\000"
 3802 0569 00000000 		.space	7
 3802      000000
 3803 0570 2C       		.byte	44
 3804 0571 000000   		.space	3
 3805 0574 FFFFFFFF 		.word	-1
 3806 0578 2E       		.byte	46
 3807 0579 000000   		.space	3
 3808 057c FFFFFFFF 		.word	-1
 3809 0580 2D2D0D00 		.ascii	"--\015\000"
 3810 0584 00000000 		.space	4
 3811 0588 00       		.ascii	"\000"
 3812 0589 00000000 		.space	7
 3812      000000
 3813 0590 2D       		.byte	45
 3814 0591 000000   		.space	3
 3815 0594 FFFFFFFF 		.word	-1
 3816 0598 2E       		.byte	46
 3817 0599 000000   		.space	3
 3818 059c FFFFFFFF 		.word	-1
 3819 05a0 43505800 		.ascii	"CPX\000"
 3820 05a4 00000000 		.space	4
 3821 05a8 00       		.ascii	"\000"
 3822 05a9 00000000 		.space	7
 3822      000000
 3823 05b0 50726F67 		.ascii	"Program\000"
 3823      72616D00 
 3824 05b8 00000000 		.space	7
 3824      000000
 3825 05bf 00       		.space	1
 3826 05c0 27       		.byte	39
 3827 05c1 000000   		.space	3
 3828 05c4 01000000 		.word	1
 3829 05c8 28       		.byte	40
 3830 05c9 000000   		.space	3
 3831 05cc 01000000 		.word	1
 3832 05d0 4C424C00 		.ascii	"LBL\000"
 3833 05d4 00000000 		.space	4
 3834 05d8 44534500 		.ascii	"DSE\000"
 3835 05dc 00000000 		.space	4
 3836 05e0 27       		.byte	39
 3837 05e1 000000   		.space	3
 3838 05e4 02000000 		.word	2
 3839 05e8 28       		.byte	40
 3840 05e9 000000   		.space	3
 3841 05ec 02000000 		.word	2
 3842 05f0 52544E00 		.ascii	"RTN\000"
 3843 05f4 00000000 		.space	4
 3844 05f8 49534700 		.ascii	"ISG\000"
 3845 05fc 00000000 		.space	4
 3846 0600 25       		.byte	37
 3847 0601 000000   		.space	3
 3848 0604 03000000 		.word	3
 3849 0608 2E       		.byte	46
 3850 0609 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 98


 3851 060c FFFFFFFF 		.word	-1
 3852 0610 50617573 		.ascii	"Pause\000"
 3852      6500
 3853 0616 0000     		.space	2
 3854 0618 00       		.ascii	"\000"
 3855 0619 00000000 		.space	7
 3855      000000
 3856 0620 12       		.byte	18
 3857 0621 000000   		.space	3
 3858 0624 03000000 		.word	3
 3859 0628 2E       		.byte	46
 3860 0629 000000   		.space	3
 3861 062c FFFFFFFF 		.word	-1
 3862 0630 47544F00 		.ascii	"GTO\000"
 3863 0634 00000000 		.space	4
 3864 0638 00       		.ascii	"\000"
 3865 0639 00000000 		.space	7
 3865      000000
 3866 0640 2C       		.byte	44
 3867 0641 000000   		.space	3
 3868 0644 FFFFFFFF 		.word	-1
 3869 0648 2E       		.byte	46
 3870 0649 000000   		.space	3
 3871 064c FFFFFFFF 		.word	-1
 3872 0650 2D2D0D00 		.ascii	"--\015\000"
 3873 0654 00000000 		.space	4
 3874 0658 00       		.ascii	"\000"
 3875 0659 00000000 		.space	7
 3875      000000
 3876 0660 2D       		.byte	45
 3877 0661 000000   		.space	3
 3878 0664 FFFFFFFF 		.word	-1
 3879 0668 2E       		.byte	46
 3880 0669 000000   		.space	3
 3881 066c FFFFFFFF 		.word	-1
 3882 0670 43505800 		.ascii	"CPX\000"
 3883 0674 00000000 		.space	4
 3884 0678 00       		.ascii	"\000"
 3885 0679 00000000 		.space	7
 3885      000000
 3886 0680 53657475 		.ascii	"Setup 1\000"
 3886      70203100 
 3887 0688 00000000 		.space	7
 3887      000000
 3888 068f 00       		.space	1
 3889 0690 32       		.byte	50
 3890 0691 000000   		.space	3
 3891 0694 00000000 		.word	0
 3892 0698 30       		.byte	48
 3893 0699 000000   		.space	3
 3894 069c 00000000 		.word	0
 3895 06a0 45584954 		.ascii	"EXIT\000"
 3895      00
 3896 06a5 000000   		.space	3
 3897 06a8 53797374 		.ascii	"System\000"
 3897      656D00
 3898 06af 00       		.space	1
ARM GAS  /tmp/ccwJS9HW.s 			page 99


 3899 06b0 31       		.byte	49
 3900 06b1 000000   		.space	3
 3901 06b4 09000000 		.word	9
 3902 06b8 2E       		.byte	46
 3903 06b9 000000   		.space	3
 3904 06bc FFFFFFFF 		.word	-1
 3905 06c0 48454C50 		.ascii	"HELP\000"
 3905      00
 3906 06c5 000000   		.space	3
 3907 06c8 00       		.ascii	"\000"
 3908 06c9 00000000 		.space	7
 3908      000000
 3909 06d0 31       		.byte	49
 3910 06d1 000000   		.space	3
 3911 06d4 02000000 		.word	2
 3912 06d8 31       		.byte	49
 3913 06d9 000000   		.space	3
 3914 06dc 06000000 		.word	6
 3915 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3915      4F00
 3916 06e6 0000     		.space	2
 3917 06e8 53765241 		.ascii	"SvRAM\000"
 3917      4D00
 3918 06ee 0000     		.space	2
 3919 06f0 31       		.byte	49
 3920 06f1 000000   		.space	3
 3921 06f4 03000000 		.word	3
 3922 06f8 31       		.byte	49
 3923 06f9 000000   		.space	3
 3924 06fc 07000000 		.word	7
 3925 0700 4F6E5243 		.ascii	"OnRCL\000"
 3925      4C00
 3926 0706 0000     		.space	2
 3927 0708 4C645241 		.ascii	"LdRAM\000"
 3927      4D00
 3928 070e 0000     		.space	2
 3929 0710 2C       		.byte	44
 3930 0711 000000   		.space	3
 3931 0714 FFFFFFFF 		.word	-1
 3932 0718 2E       		.byte	46
 3933 0719 000000   		.space	3
 3934 071c FFFFFFFF 		.word	-1
 3935 0720 2D2D0D00 		.ascii	"--\015\000"
 3936 0724 00000000 		.space	4
 3937 0728 00       		.ascii	"\000"
 3938 0729 00000000 		.space	7
 3938      000000
 3939 0730 2D       		.byte	45
 3940 0731 000000   		.space	3
 3941 0734 FFFFFFFF 		.word	-1
 3942 0738 2E       		.byte	46
 3943 0739 000000   		.space	3
 3944 073c FFFFFFFF 		.word	-1
 3945 0740 43505800 		.ascii	"CPX\000"
 3946 0744 00000000 		.space	4
 3947 0748 00       		.ascii	"\000"
 3948 0749 00000000 		.space	7
ARM GAS  /tmp/ccwJS9HW.s 			page 100


 3948      000000
 3949 0750 4172726F 		.ascii	"Arrow\000"
 3949      7700
 3950 0756 00000000 		.space	9
 3950      00000000 
 3950      00
 3951 075f 00       		.space	1
 3952 0760 0E       		.byte	14
 3953 0761 000000   		.space	3
 3954 0764 01000000 		.word	1
 3955 0768 06       		.byte	6
 3956 0769 000000   		.space	3
 3957 076c 02000000 		.word	2
 3958 0770 42696E00 		.ascii	"Bin\000"
 3959 0774 00000000 		.space	4
 3960 0778 44454700 		.ascii	"DEG\000"
 3961 077c 00000000 		.space	4
 3962 0780 0E       		.byte	14
 3963 0781 000000   		.space	3
 3964 0784 02000000 		.word	2
 3965 0788 07       		.byte	7
 3966 0789 000000   		.space	3
 3967 078c 02000000 		.word	2
 3968 0790 4F637400 		.ascii	"Oct\000"
 3969 0794 00000000 		.space	4
 3970 0798 52414400 		.ascii	"RAD\000"
 3971 079c 00000000 		.space	4
 3972 07a0 0F       		.byte	15
 3973 07a1 000000   		.space	3
 3974 07a4 01000000 		.word	1
 3975 07a8 08       		.byte	8
 3976 07a9 000000   		.space	3
 3977 07ac 02000000 		.word	2
 3978 07b0 44656300 		.ascii	"Dec\000"
 3979 07b4 00000000 		.space	4
 3980 07b8 47726164 		.ascii	"Grad\000"
 3980      00
 3981 07bd 000000   		.space	3
 3982 07c0 0F       		.byte	15
 3983 07c1 000000   		.space	3
 3984 07c4 02000000 		.word	2
 3985 07c8 06       		.byte	6
 3986 07c9 000000   		.space	3
 3987 07cc 01000000 		.word	1
 3988 07d0 48657800 		.ascii	"Hex\000"
 3989 07d4 00000000 		.space	4
 3990 07d8 32484D53 		.ascii	"2HMS\000"
 3990      00
 3991 07dd 000000   		.space	3
 3992 07e0 2C       		.byte	44
 3993 07e1 000000   		.space	3
 3994 07e4 FFFFFFFF 		.word	-1
 3995 07e8 07       		.byte	7
 3996 07e9 000000   		.space	3
 3997 07ec 01000000 		.word	1
 3998 07f0 2D2D0D00 		.ascii	"--\015\000"
 3999 07f4 00000000 		.space	4
ARM GAS  /tmp/ccwJS9HW.s 			page 101


 4000 07f8 484D5332 		.ascii	"HMS2\000"
 4000      00
 4001 07fd 000000   		.space	3
 4002 0800 2D       		.byte	45
 4003 0801 000000   		.space	3
 4004 0804 FFFFFFFF 		.word	-1
 4005 0808 2E       		.byte	46
 4006 0809 000000   		.space	3
 4007 080c FFFFFFFF 		.word	-1
 4008 0810 43505800 		.ascii	"CPX\000"
 4009 0814 00000000 		.space	4
 4010 0818 00       		.ascii	"\000"
 4011 0819 00000000 		.space	7
 4011      000000
 4012 0820 466C6167 		.ascii	"Flags\000"
 4012      7300
 4013 0826 00000000 		.space	9
 4013      00000000 
 4013      00
 4014 082f 00       		.space	1
 4015 0830 1E       		.byte	30
 4016 0831 000000   		.space	3
 4017 0834 01000000 		.word	1
 4018 0838 2E       		.byte	46
 4019 0839 000000   		.space	3
 4020 083c FFFFFFFF 		.word	-1
 4021 0840 53465F00 		.ascii	"SF_\000"
 4022 0844 00000000 		.space	4
 4023 0848 00       		.ascii	"\000"
 4024 0849 00000000 		.space	7
 4024      000000
 4025 0850 1E       		.byte	30
 4026 0851 000000   		.space	3
 4027 0854 02000000 		.word	2
 4028 0858 2E       		.byte	46
 4029 0859 000000   		.space	3
 4030 085c FFFFFFFF 		.word	-1
 4031 0860 43465F00 		.ascii	"CF_\000"
 4032 0864 00000000 		.space	4
 4033 0868 00       		.ascii	"\000"
 4034 0869 00000000 		.space	7
 4034      000000
 4035 0870 1F       		.byte	31
 4036 0871 000000   		.space	3
 4037 0874 01000000 		.word	1
 4038 0878 2E       		.byte	46
 4039 0879 000000   		.space	3
 4040 087c FFFFFFFF 		.word	-1
 4041 0880 783D3F00 		.ascii	"x=?\000"
 4042 0884 00000000 		.space	4
 4043 0888 00       		.ascii	"\000"
 4044 0889 00000000 		.space	7
 4044      000000
 4045 0890 1F       		.byte	31
 4046 0891 000000   		.space	3
 4047 0894 02000000 		.word	2
 4048 0898 2E       		.byte	46
ARM GAS  /tmp/ccwJS9HW.s 			page 102


 4049 0899 000000   		.space	3
 4050 089c FFFFFFFF 		.word	-1
 4051 08a0 780B3F00 		.ascii	"x\013?\000"
 4052 08a4 00000000 		.space	4
 4053 08a8 00       		.ascii	"\000"
 4054 08a9 00000000 		.space	7
 4054      000000
 4055 08b0 2C       		.byte	44
 4056 08b1 000000   		.space	3
 4057 08b4 FFFFFFFF 		.word	-1
 4058 08b8 2E       		.byte	46
 4059 08b9 000000   		.space	3
 4060 08bc FFFFFFFF 		.word	-1
 4061 08c0 2D2D0D00 		.ascii	"--\015\000"
 4062 08c4 00000000 		.space	4
 4063 08c8 00       		.ascii	"\000"
 4064 08c9 00000000 		.space	7
 4064      000000
 4065 08d0 2D       		.byte	45
 4066 08d1 000000   		.space	3
 4067 08d4 FFFFFFFF 		.word	-1
 4068 08d8 2E       		.byte	46
 4069 08d9 000000   		.space	3
 4070 08dc FFFFFFFF 		.word	-1
 4071 08e0 43505800 		.ascii	"CPX\000"
 4072 08e4 00000000 		.space	4
 4073 08e8 00       		.ascii	"\000"
 4074 08e9 00000000 		.space	7
 4074      000000
 4075 08f0 50726F62 		.ascii	"Probability\000"
 4075      6162696C 
 4075      69747900 
 4076 08fc 000000   		.space	3
 4077 08ff 00       		.space	1
 4078 0900 18       		.byte	24
 4079 0901 000000   		.space	3
 4080 0904 03000000 		.word	3
 4081 0908 19       		.byte	25
 4082 0909 000000   		.space	3
 4083 090c 01000000 		.word	1
 4084 0910 46616374 		.ascii	"Fact!\000"
 4084      2100
 4085 0916 0000     		.space	2
 4086 0918 9400     		.ascii	"\224\000"
 4087 091a 00000000 		.space	6
 4087      0000
 4088 0920 18       		.byte	24
 4089 0921 000000   		.space	3
 4090 0924 01000000 		.word	1
 4091 0928 19       		.byte	25
 4092 0929 000000   		.space	3
 4093 092c 02000000 		.word	2
 4094 0930 43792C78 		.ascii	"Cy,x\000"
 4094      00
 4095 0935 000000   		.space	3
 4096 0938 949D00   		.ascii	"\224\235\000"
 4097 093b 00000000 		.space	5
ARM GAS  /tmp/ccwJS9HW.s 			page 103


 4097      00
 4098 0940 18       		.byte	24
 4099 0941 000000   		.space	3
 4100 0944 02000000 		.word	2
 4101 0948 2E       		.byte	46
 4102 0949 000000   		.space	3
 4103 094c FFFFFFFF 		.word	-1
 4104 0950 50792C78 		.ascii	"Py,x\000"
 4104      00
 4105 0955 000000   		.space	3
 4106 0958 00       		.ascii	"\000"
 4107 0959 00000000 		.space	7
 4107      000000
 4108 0960 08       		.byte	8
 4109 0961 000000   		.space	3
 4110 0964 01000000 		.word	1
 4111 0968 2E       		.byte	46
 4112 0969 000000   		.space	3
 4113 096c FFFFFFFF 		.word	-1
 4114 0970 52414E23 		.ascii	"RAN#\000"
 4114      00
 4115 0975 000000   		.space	3
 4116 0978 00       		.ascii	"\000"
 4117 0979 00000000 		.space	7
 4117      000000
 4118 0980 2C       		.byte	44
 4119 0981 000000   		.space	3
 4120 0984 FFFFFFFF 		.word	-1
 4121 0988 2E       		.byte	46
 4122 0989 000000   		.space	3
 4123 098c FFFFFFFF 		.word	-1
 4124 0990 2D2D0D00 		.ascii	"--\015\000"
 4125 0994 00000000 		.space	4
 4126 0998 00       		.ascii	"\000"
 4127 0999 00000000 		.space	7
 4127      000000
 4128 09a0 2D       		.byte	45
 4129 09a1 000000   		.space	3
 4130 09a4 FFFFFFFF 		.word	-1
 4131 09a8 2E       		.byte	46
 4132 09a9 000000   		.space	3
 4133 09ac FFFFFFFF 		.word	-1
 4134 09b0 43505800 		.ascii	"CPX\000"
 4135 09b4 00000000 		.space	4
 4136 09b8 00       		.ascii	"\000"
 4137 09b9 00000000 		.space	7
 4137      000000
 4138 09c0 53746174 		.ascii	"Statistics\000"
 4138      69737469 
 4138      637300
 4139 09cb 00000000 		.space	4
 4140 09cf 00       		.space	1
 4141 09d0 1A       		.byte	26
 4142 09d1 000000   		.space	3
 4143 09d4 01000000 		.word	1
 4144 09d8 1B       		.byte	27
 4145 09d9 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 104


 4146 09dc 03000000 		.word	3
 4147 09e0 58626172 		.ascii	"Xbar\000"
 4147      00
 4148 09e5 000000   		.space	3
 4149 09e8 53554D53 		.ascii	"SUMS\000"
 4149      00
 4150 09ed 000000   		.space	3
 4151 09f0 1B       		.byte	27
 4152 09f1 000000   		.space	3
 4153 09f4 01000000 		.word	1
 4154 09f8 2E       		.byte	46
 4155 09f9 000000   		.space	3
 4156 09fc FFFFFFFF 		.word	-1
 4157 0a00 59686174 		.ascii	"Yhat\000"
 4157      00
 4158 0a05 000000   		.space	3
 4159 0a08 00       		.ascii	"\000"
 4160 0a09 00000000 		.space	7
 4160      000000
 4161 0a10 1A       		.byte	26
 4162 0a11 000000   		.space	3
 4163 0a14 02000000 		.word	2
 4164 0a18 2E       		.byte	46
 4165 0a19 000000   		.space	3
 4166 0a1c FFFFFFFF 		.word	-1
 4167 0a20 7300     		.ascii	"s\000"
 4168 0a22 00000000 		.space	6
 4168      0000
 4169 0a28 00       		.ascii	"\000"
 4170 0a29 00000000 		.space	7
 4170      000000
 4171 0a30 1B       		.byte	27
 4172 0a31 000000   		.space	3
 4173 0a34 02000000 		.word	2
 4174 0a38 2E       		.byte	46
 4175 0a39 000000   		.space	3
 4176 0a3c FFFFFFFF 		.word	-1
 4177 0a40 7200     		.ascii	"r\000"
 4178 0a42 00000000 		.space	6
 4178      0000
 4179 0a48 00       		.ascii	"\000"
 4180 0a49 00000000 		.space	7
 4180      000000
 4181 0a50 2C       		.byte	44
 4182 0a51 000000   		.space	3
 4183 0a54 FFFFFFFF 		.word	-1
 4184 0a58 2E       		.byte	46
 4185 0a59 000000   		.space	3
 4186 0a5c FFFFFFFF 		.word	-1
 4187 0a60 2D2D0D00 		.ascii	"--\015\000"
 4188 0a64 00000000 		.space	4
 4189 0a68 00       		.ascii	"\000"
 4190 0a69 00000000 		.space	7
 4190      000000
 4191 0a70 2D       		.byte	45
 4192 0a71 000000   		.space	3
 4193 0a74 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccwJS9HW.s 			page 105


 4194 0a78 31       		.byte	49
 4195 0a79 000000   		.space	3
 4196 0a7c 0B000000 		.word	11
 4197 0a80 43505800 		.ascii	"CPX\000"
 4198 0a84 00000000 		.space	4
 4199 0a88 00       		.ascii	"\000"
 4200 0a89 00000000 		.space	7
 4200      000000
 4201 0a90 53657475 		.ascii	"Setup 2\000"
 4201      70203200 
 4202 0a98 00000000 		.space	7
 4202      000000
 4203 0a9f 00       		.space	1
 4204 0aa0 31       		.byte	49
 4205 0aa1 000000   		.space	3
 4206 0aa4 04000000 		.word	4
 4207 0aa8 2E       		.byte	46
 4208 0aa9 000000   		.space	3
 4209 0aac FFFFFFFF 		.word	-1
 4210 0ab0 53764C49 		.ascii	"SvLIB\000"
 4210      4200
 4211 0ab6 0000     		.space	2
 4212 0ab8 00       		.ascii	"\000"
 4213 0ab9 00000000 		.space	7
 4213      000000
 4214 0ac0 31       		.byte	49
 4215 0ac1 000000   		.space	3
 4216 0ac4 05000000 		.word	5
 4217 0ac8 2E       		.byte	46
 4218 0ac9 000000   		.space	3
 4219 0acc FFFFFFFF 		.word	-1
 4220 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4220      4200
 4221 0ad6 0000     		.space	2
 4222 0ad8 00       		.ascii	"\000"
 4223 0ad9 00000000 		.space	7
 4223      000000
 4224 0ae0 31       		.byte	49
 4225 0ae1 000000   		.space	3
 4226 0ae4 0A000000 		.word	10
 4227 0ae8 2E       		.byte	46
 4228 0ae9 000000   		.space	3
 4229 0aec FFFFFFFF 		.word	-1
 4230 0af0 53764350 		.ascii	"SvCPRG\000"
 4230      524700
 4231 0af7 00       		.space	1
 4232 0af8 00       		.ascii	"\000"
 4233 0af9 00000000 		.space	7
 4233      000000
 4234 0b00 31       		.byte	49
 4235 0b01 000000   		.space	3
 4236 0b04 08000000 		.word	8
 4237 0b08 2E       		.byte	46
 4238 0b09 000000   		.space	3
 4239 0b0c FFFFFFFF 		.word	-1
 4240 0b10 4C645052 		.ascii	"LdPRG\000"
 4240      4700
ARM GAS  /tmp/ccwJS9HW.s 			page 106


 4241 0b16 0000     		.space	2
 4242 0b18 00       		.ascii	"\000"
 4243 0b19 00000000 		.space	7
 4243      000000
 4244 0b20 2C       		.byte	44
 4245 0b21 000000   		.space	3
 4246 0b24 FFFFFFFF 		.word	-1
 4247 0b28 2E       		.byte	46
 4248 0b29 000000   		.space	3
 4249 0b2c FFFFFFFF 		.word	-1
 4250 0b30 2D2D0D00 		.ascii	"--\015\000"
 4251 0b34 00000000 		.space	4
 4252 0b38 00       		.ascii	"\000"
 4253 0b39 00000000 		.space	7
 4253      000000
 4254 0b40 2D       		.byte	45
 4255 0b41 000000   		.space	3
 4256 0b44 FFFFFFFF 		.word	-1
 4257 0b48 2E       		.byte	46
 4258 0b49 000000   		.space	3
 4259 0b4c FFFFFFFF 		.word	-1
 4260 0b50 43505800 		.ascii	"CPX\000"
 4261 0b54 00000000 		.space	4
 4262 0b58 00       		.ascii	"\000"
 4263 0b59 00000000 		.space	7
 4263      000000
 4264 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4264      672F5375 
 4264      6D2F5072 
 4264      6F6400
 4265 0b6f 00       		.space	1
 4266 0b70 20       		.byte	32
 4267 0b71 000000   		.space	3
 4268 0b74 01000000 		.word	1
 4269 0b78 2E       		.byte	46
 4270 0b79 000000   		.space	3
 4271 0b7c FFFFFFFF 		.word	-1
 4272 0b80 534C5600 		.ascii	"SLV\000"
 4273 0b84 00000000 		.space	4
 4274 0b88 00       		.ascii	"\000"
 4275 0b89 00000000 		.space	7
 4275      000000
 4276 0b90 20       		.byte	32
 4277 0b91 000000   		.space	3
 4278 0b94 02000000 		.word	2
 4279 0b98 2E       		.byte	46
 4280 0b99 000000   		.space	3
 4281 0b9c FFFFFFFF 		.word	-1
 4282 0ba0 04206478 		.ascii	"\004 dx\000"
 4282      00
 4283 0ba5 000000   		.space	3
 4284 0ba8 00       		.ascii	"\000"
 4285 0ba9 00000000 		.space	7
 4285      000000
 4286 0bb0 21       		.byte	33
 4287 0bb1 000000   		.space	3
 4288 0bb4 01000000 		.word	1
ARM GAS  /tmp/ccwJS9HW.s 			page 107


 4289 0bb8 2E       		.byte	46
 4290 0bb9 000000   		.space	3
 4291 0bbc FFFFFFFF 		.word	-1
 4292 0bc0 53554D00 		.ascii	"SUM\000"
 4293 0bc4 00000000 		.space	4
 4294 0bc8 00       		.ascii	"\000"
 4295 0bc9 00000000 		.space	7
 4295      000000
 4296 0bd0 21       		.byte	33
 4297 0bd1 000000   		.space	3
 4298 0bd4 02000000 		.word	2
 4299 0bd8 2E       		.byte	46
 4300 0bd9 000000   		.space	3
 4301 0bdc FFFFFFFF 		.word	-1
 4302 0be0 50524F44 		.ascii	"PROD\000"
 4302      00
 4303 0be5 000000   		.space	3
 4304 0be8 00       		.ascii	"\000"
 4305 0be9 00000000 		.space	7
 4305      000000
 4306 0bf0 2C       		.byte	44
 4307 0bf1 000000   		.space	3
 4308 0bf4 FFFFFFFF 		.word	-1
 4309 0bf8 2E       		.byte	46
 4310 0bf9 000000   		.space	3
 4311 0bfc FFFFFFFF 		.word	-1
 4312 0c00 2D2D0D00 		.ascii	"--\015\000"
 4313 0c04 00000000 		.space	4
 4314 0c08 00       		.ascii	"\000"
 4315 0c09 00000000 		.space	7
 4315      000000
 4316 0c10 2D       		.byte	45
 4317 0c11 000000   		.space	3
 4318 0c14 FFFFFFFF 		.word	-1
 4319 0c18 2E       		.byte	46
 4320 0c19 000000   		.space	3
 4321 0c1c FFFFFFFF 		.word	-1
 4322 0c20 43505800 		.ascii	"CPX\000"
 4323 0c24 00000000 		.space	4
 4324 0c28 00       		.ascii	"\000"
 4325 0c29 00000000 		.space	7
 4325      000000
 4326              		.section	.rodata.mapping_alpha.10885,"a"
 4327              		.align	2
 4328              		.set	.LANCHOR11,. + 0
 4331              	mapping_alpha.10885:
 4332 0000 63       		.byte	99
 4333 0001 000000   		.space	3
 4334 0004 FFFFFFFF 		.word	-1
 4335 0008 00       		.byte	0
 4336 0009 000000   		.space	3
 4337 000c FFFFFFFF 		.word	-1
 4338 0010 01       		.byte	1
 4339 0011 000000   		.space	3
 4340 0014 FFFFFFFF 		.word	-1
 4341 0018 02       		.byte	2
 4342 0019 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 108


 4343 001c FFFFFFFF 		.word	-1
 4344 0020 03       		.byte	3
 4345 0021 000000   		.space	3
 4346 0024 FFFFFFFF 		.word	-1
 4347 0028 04       		.byte	4
 4348 0029 000000   		.space	3
 4349 002c FFFFFFFF 		.word	-1
 4350 0030 05       		.byte	5
 4351 0031 000000   		.space	3
 4352 0034 FFFFFFFF 		.word	-1
 4353 0038 06       		.byte	6
 4354 0039 000000   		.space	3
 4355 003c FFFFFFFF 		.word	-1
 4356 0040 07       		.byte	7
 4357 0041 000000   		.space	3
 4358 0044 FFFFFFFF 		.word	-1
 4359 0048 08       		.byte	8
 4360 0049 000000   		.space	3
 4361 004c FFFFFFFF 		.word	-1
 4362 0050 09       		.byte	9
 4363 0051 000000   		.space	3
 4364 0054 FFFFFFFF 		.word	-1
 4365 0058 0A       		.byte	10
 4366 0059 000000   		.space	3
 4367 005c FFFFFFFF 		.word	-1
 4368 0060 0B       		.byte	11
 4369 0061 000000   		.space	3
 4370 0064 FFFFFFFF 		.word	-1
 4371 0068 0C       		.byte	12
 4372 0069 000000   		.space	3
 4373 006c FFFFFFFF 		.word	-1
 4374 0070 0D       		.byte	13
 4375 0071 000000   		.space	3
 4376 0074 FFFFFFFF 		.word	-1
 4377 0078 0E       		.byte	14
 4378 0079 000000   		.space	3
 4379 007c FFFFFFFF 		.word	-1
 4380 0080 0F       		.byte	15
 4381 0081 000000   		.space	3
 4382 0084 FFFFFFFF 		.word	-1
 4383 0088 10       		.byte	16
 4384 0089 000000   		.space	3
 4385 008c FFFFFFFF 		.word	-1
 4386 0090 12       		.byte	18
 4387 0091 000000   		.space	3
 4388 0094 FFFFFFFF 		.word	-1
 4389 0098 13       		.byte	19
 4390 0099 000000   		.space	3
 4391 009c FFFFFFFF 		.word	-1
 4392 00a0 14       		.byte	20
 4393 00a1 000000   		.space	3
 4394 00a4 FFFFFFFF 		.word	-1
 4395 00a8 15       		.byte	21
 4396 00a9 000000   		.space	3
 4397 00ac FFFFFFFF 		.word	-1
 4398 00b0 16       		.byte	22
 4399 00b1 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 109


 4400 00b4 FFFFFFFF 		.word	-1
 4401 00b8 18       		.byte	24
 4402 00b9 000000   		.space	3
 4403 00bc FFFFFFFF 		.word	-1
 4404 00c0 19       		.byte	25
 4405 00c1 000000   		.space	3
 4406 00c4 FFFFFFFF 		.word	-1
 4407 00c8 1A       		.byte	26
 4408 00c9 000000   		.space	3
 4409 00cc FFFFFFFF 		.word	-1
 4410 00d0 1B       		.byte	27
 4411 00d1 000000   		.space	3
 4412 00d4 FFFFFFFF 		.word	-1
 4413 00d8 1C       		.byte	28
 4414 00d9 000000   		.space	3
 4415 00dc FFFFFFFF 		.word	-1
 4416 00e0 1E       		.byte	30
 4417 00e1 000000   		.space	3
 4418 00e4 FFFFFFFF 		.word	-1
 4419 00e8 1F       		.byte	31
 4420 00e9 000000   		.space	3
 4421 00ec FFFFFFFF 		.word	-1
 4422 00f0 20       		.byte	32
 4423 00f1 000000   		.space	3
 4424 00f4 FFFFFFFF 		.word	-1
 4425 00f8 21       		.byte	33
 4426 00f9 000000   		.space	3
 4427 00fc FFFFFFFF 		.word	-1
 4428 0100 22       		.byte	34
 4429 0101 000000   		.space	3
 4430 0104 FFFFFFFF 		.word	-1
 4431 0108 24       		.byte	36
 4432 0109 000000   		.space	3
 4433 010c FFFFFFFF 		.word	-1
 4434 0110 25       		.byte	37
 4435 0111 000000   		.space	3
 4436 0114 FFFFFFFF 		.word	-1
 4437 0118 26       		.byte	38
 4438 0119 000000   		.space	3
 4439 011c FFFFFFFF 		.word	-1
 4440 0120 27       		.byte	39
 4441 0121 000000   		.space	3
 4442 0124 FFFFFFFF 		.word	-1
 4443 0128 28       		.byte	40
 4444 0129 000000   		.space	3
 4445 012c FFFFFFFF 		.word	-1
 4446 0130 2E       		.byte	46
 4447 0131 000000   		.space	3
 4448 0134 FFFFFFFF 		.word	-1
 4449 0138 2E       		.byte	46
 4450 0139 000000   		.space	3
 4451 013c FFFFFFFF 		.word	-1
 4452 0140 2E       		.byte	46
 4453 0141 000000   		.space	3
 4454 0144 FFFFFFFF 		.word	-1
 4455 0148 2E       		.byte	46
 4456 0149 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 110


 4457 014c FFFFFFFF 		.word	-1
 4458 0150 2C       		.byte	44
 4459 0151 000000   		.space	3
 4460 0154 FFFFFFFF 		.word	-1
 4461 0158 2E       		.byte	46
 4462 0159 000000   		.space	3
 4463 015c FFFFFFFF 		.word	-1
 4464 0160 2E       		.byte	46
 4465 0161 000000   		.space	3
 4466 0164 FFFFFFFF 		.word	-1
 4467 0168 2E       		.byte	46
 4468 0169 000000   		.space	3
 4469 016c FFFFFFFF 		.word	-1
 4470 0170 2E       		.byte	46
 4471 0171 000000   		.space	3
 4472 0174 FFFFFFFF 		.word	-1
 4473              		.section	.rodata.mapping_fshift.10883,"a"
 4474              		.align	2
 4475              		.set	.LANCHOR9,. + 0
 4478              	mapping_fshift.10883:
 4479 0000 63       		.byte	99
 4480 0001 000000   		.space	3
 4481 0004 FFFFFFFF 		.word	-1
 4482 0008 22       		.byte	34
 4483 0009 000000   		.space	3
 4484 000c 03000000 		.word	3
 4485 0010 15       		.byte	21
 4486 0011 000000   		.space	3
 4487 0014 01000000 		.word	1
 4488 0018 1C       		.byte	28
 4489 0019 000000   		.space	3
 4490 001c 02000000 		.word	2
 4491 0020 13       		.byte	19
 4492 0021 000000   		.space	3
 4493 0024 01000000 		.word	1
 4494 0028 12       		.byte	18
 4495 0029 000000   		.space	3
 4496 002c 01000000 		.word	1
 4497 0030 12       		.byte	18
 4498 0031 000000   		.space	3
 4499 0034 03000000 		.word	3
 4500 0038 2D       		.byte	45
 4501 0039 000000   		.space	3
 4502 003c 00000000 		.word	0
 4503 0040 22       		.byte	34
 4504 0041 000000   		.space	3
 4505 0044 01000000 		.word	1
 4506 0048 0F       		.byte	15
 4507 0049 000000   		.space	3
 4508 004c 03000000 		.word	3
 4509 0050 01       		.byte	1
 4510 0051 000000   		.space	3
 4511 0054 02000000 		.word	2
 4512 0058 02       		.byte	2
 4513 0059 000000   		.space	3
 4514 005c 02000000 		.word	2
 4515 0060 03       		.byte	3
ARM GAS  /tmp/ccwJS9HW.s 			page 111


 4516 0061 000000   		.space	3
 4517 0064 02000000 		.word	2
 4518 0068 0C       		.byte	12
 4519 0069 000000   		.space	3
 4520 006c 01000000 		.word	1
 4521 0070 31       		.byte	49
 4522 0071 000000   		.space	3
 4523 0074 01000000 		.word	1
 4524 0078 2F       		.byte	47
 4525 0079 000000   		.space	3
 4526 007c 04000000 		.word	4
 4527 0080 2F       		.byte	47
 4528 0081 000000   		.space	3
 4529 0084 02000000 		.word	2
 4530 0088 2F       		.byte	47
 4531 0089 000000   		.space	3
 4532 008c 01000000 		.word	1
 4533 0090 18       		.byte	24
 4534 0091 000000   		.space	3
 4535 0094 00000000 		.word	0
 4536 0098 20       		.byte	32
 4537 0099 000000   		.space	3
 4538 009c 01000000 		.word	1
 4539 00a0 2F       		.byte	47
 4540 00a1 000000   		.space	3
 4541 00a4 0E000000 		.word	14
 4542 00a8 1C       		.byte	28
 4543 00a9 000000   		.space	3
 4544 00ac 03000000 		.word	3
 4545 00b0 2F       		.byte	47
 4546 00b1 000000   		.space	3
 4547 00b4 0C000000 		.word	12
 4548 00b8 1E       		.byte	30
 4549 00b9 000000   		.space	3
 4550 00bc 00000000 		.word	0
 4551 00c0 2F       		.byte	47
 4552 00c1 000000   		.space	3
 4553 00c4 03000000 		.word	3
 4554 00c8 04       		.byte	4
 4555 00c9 000000   		.space	3
 4556 00cc 03000000 		.word	3
 4557 00d0 2F       		.byte	47
 4558 00d1 000000   		.space	3
 4559 00d4 0A000000 		.word	10
 4560 00d8 2F       		.byte	47
 4561 00d9 000000   		.space	3
 4562 00dc 0B000000 		.word	11
 4563 00e0 2A       		.byte	42
 4564 00e1 000000   		.space	3
 4565 00e4 00000000 		.word	0
 4566 00e8 2E       		.byte	46
 4567 00e9 000000   		.space	3
 4568 00ec 00000000 		.word	0
 4569 00f0 2E       		.byte	46
 4570 00f1 000000   		.space	3
 4571 00f4 00000000 		.word	0
 4572 00f8 20       		.byte	32
ARM GAS  /tmp/ccwJS9HW.s 			page 112


 4573 00f9 000000   		.space	3
 4574 00fc 03000000 		.word	3
 4575 0100 2E       		.byte	46
 4576 0101 000000   		.space	3
 4577 0104 00000000 		.word	0
 4578 0108 24       		.byte	36
 4579 0109 000000   		.space	3
 4580 010c 03000000 		.word	3
 4581 0110 2F       		.byte	47
 4582 0111 000000   		.space	3
 4583 0114 08000000 		.word	8
 4584 0118 0D       		.byte	13
 4585 0119 000000   		.space	3
 4586 011c 01000000 		.word	1
 4587 0120 27       		.byte	39
 4588 0121 000000   		.space	3
 4589 0124 03000000 		.word	3
 4590 0128 06       		.byte	6
 4591 0129 000000   		.space	3
 4592 012c 03000000 		.word	3
 4593 0130 2E       		.byte	46
 4594 0131 000000   		.space	3
 4595 0134 00000000 		.word	0
 4596 0138 2E       		.byte	46
 4597 0139 000000   		.space	3
 4598 013c 00000000 		.word	0
 4599 0140 2E       		.byte	46
 4600 0141 000000   		.space	3
 4601 0144 00000000 		.word	0
 4602 0148 2E       		.byte	46
 4603 0149 000000   		.space	3
 4604 014c 00000000 		.word	0
 4605 0150 2E       		.byte	46
 4606 0151 000000   		.space	3
 4607 0154 00000000 		.word	0
 4608 0158 2E       		.byte	46
 4609 0159 000000   		.space	3
 4610 015c 00000000 		.word	0
 4611 0160 2E       		.byte	46
 4612 0161 000000   		.space	3
 4613 0164 00000000 		.word	0
 4614 0168 2F       		.byte	47
 4615 0169 000000   		.space	3
 4616 016c FFFFFFFF 		.word	-1
 4617 0170 2F       		.byte	47
 4618 0171 000000   		.space	3
 4619 0174 05000000 		.word	5
 4620              		.section	.rodata.mapping_gshift.10884,"a"
 4621              		.align	2
 4622              		.set	.LANCHOR12,. + 0
 4625              	mapping_gshift.10884:
 4626 0000 63       		.byte	99
 4627 0001 000000   		.space	3
 4628 0004 FFFFFFFF 		.word	-1
 4629 0008 28       		.byte	40
 4630 0009 000000   		.space	3
 4631 000c 03000000 		.word	3
ARM GAS  /tmp/ccwJS9HW.s 			page 113


 4632 0010 16       		.byte	22
 4633 0011 000000   		.space	3
 4634 0014 01000000 		.word	1
 4635 0018 1C       		.byte	28
 4636 0019 000000   		.space	3
 4637 001c 01000000 		.word	1
 4638 0020 13       		.byte	19
 4639 0021 000000   		.space	3
 4640 0024 02000000 		.word	2
 4641 0028 2E       		.byte	46
 4642 0029 000000   		.space	3
 4643 002c 00000000 		.word	0
 4644 0030 2E       		.byte	46
 4645 0031 000000   		.space	3
 4646 0034 00000000 		.word	0
 4647 0038 2E       		.byte	46
 4648 0039 000000   		.space	3
 4649 003c 00000000 		.word	0
 4650 0040 07       		.byte	7
 4651 0041 000000   		.space	3
 4652 0044 03000000 		.word	3
 4653 0048 08       		.byte	8
 4654 0049 000000   		.space	3
 4655 004c 03000000 		.word	3
 4656 0050 2F       		.byte	47
 4657 0051 000000   		.space	3
 4658 0054 04000000 		.word	4
 4659 0058 2F       		.byte	47
 4660 0059 000000   		.space	3
 4661 005c 04000000 		.word	4
 4662 0060 2F       		.byte	47
 4663 0061 000000   		.space	3
 4664 0064 04000000 		.word	4
 4665 0068 0C       		.byte	12
 4666 0069 000000   		.space	3
 4667 006c 02000000 		.word	2
 4668 0070 2F       		.byte	47
 4669 0071 000000   		.space	3
 4670 0074 06000000 		.word	6
 4671 0078 05       		.byte	5
 4672 0079 000000   		.space	3
 4673 007c 03000000 		.word	3
 4674 0080 2E       		.byte	46
 4675 0081 000000   		.space	3
 4676 0084 00000000 		.word	0
 4677 0088 2E       		.byte	46
 4678 0089 000000   		.space	3
 4679 008c 00000000 		.word	0
 4680 0090 2E       		.byte	46
 4681 0091 000000   		.space	3
 4682 0094 00000000 		.word	0
 4683 0098 2E       		.byte	46
 4684 0099 000000   		.space	3
 4685 009c 00000000 		.word	0
 4686 00a0 2E       		.byte	46
 4687 00a1 000000   		.space	3
 4688 00a4 00000000 		.word	0
ARM GAS  /tmp/ccwJS9HW.s 			page 114


 4689 00a8 1B       		.byte	27
 4690 00a9 000000   		.space	3
 4691 00ac 03000000 		.word	3
 4692 00b0 1A       		.byte	26
 4693 00b1 000000   		.space	3
 4694 00b4 03000000 		.word	3
 4695 00b8 2E       		.byte	46
 4696 00b9 000000   		.space	3
 4697 00bc 00000000 		.word	0
 4698 00c0 2E       		.byte	46
 4699 00c1 000000   		.space	3
 4700 00c4 00000000 		.word	0
 4701 00c8 0C       		.byte	12
 4702 00c9 000000   		.space	3
 4703 00cc 03000000 		.word	3
 4704 00d0 1F       		.byte	31
 4705 00d1 000000   		.space	3
 4706 00d4 03000000 		.word	3
 4707 00d8 19       		.byte	25
 4708 00d9 000000   		.space	3
 4709 00dc 03000000 		.word	3
 4710 00e0 2A       		.byte	42
 4711 00e1 000000   		.space	3
 4712 00e4 FFFFFFFF 		.word	-1
 4713 00e8 2E       		.byte	46
 4714 00e9 000000   		.space	3
 4715 00ec 00000000 		.word	0
 4716 00f0 2E       		.byte	46
 4717 00f1 000000   		.space	3
 4718 00f4 00000000 		.word	0
 4719 00f8 21       		.byte	33
 4720 00f9 000000   		.space	3
 4721 00fc 03000000 		.word	3
 4722 0100 2E       		.byte	46
 4723 0101 000000   		.space	3
 4724 0104 00000000 		.word	0
 4725 0108 24       		.byte	36
 4726 0109 000000   		.space	3
 4727 010c 00000000 		.word	0
 4728 0110 2F       		.byte	47
 4729 0111 000000   		.space	3
 4730 0114 0D000000 		.word	13
 4731 0118 2E       		.byte	46
 4732 0119 000000   		.space	3
 4733 011c 00000000 		.word	0
 4734 0120 2F       		.byte	47
 4735 0121 000000   		.space	3
 4736 0124 07000000 		.word	7
 4737 0128 1E       		.byte	30
 4738 0129 000000   		.space	3
 4739 012c 03000000 		.word	3
 4740 0130 2E       		.byte	46
 4741 0131 000000   		.space	3
 4742 0134 00000000 		.word	0
 4743 0138 2E       		.byte	46
 4744 0139 000000   		.space	3
 4745 013c 00000000 		.word	0
ARM GAS  /tmp/ccwJS9HW.s 			page 115


 4746 0140 2E       		.byte	46
 4747 0141 000000   		.space	3
 4748 0144 00000000 		.word	0
 4749 0148 2E       		.byte	46
 4750 0149 000000   		.space	3
 4751 014c 00000000 		.word	0
 4752 0150 2E       		.byte	46
 4753 0151 000000   		.space	3
 4754 0154 00000000 		.word	0
 4755 0158 2E       		.byte	46
 4756 0159 000000   		.space	3
 4757 015c 00000000 		.word	0
 4758 0160 2E       		.byte	46
 4759 0161 000000   		.space	3
 4760 0164 00000000 		.word	0
 4761 0168 2E       		.byte	46
 4762 0169 000000   		.space	3
 4763 016c 00000000 		.word	0
 4764 0170 2E       		.byte	46
 4765 0171 000000   		.space	3
 4766 0174 00000000 		.word	0
 4767              		.section	.rodata.mapping_none.10882,"a"
 4768              		.align	2
 4769              		.set	.LANCHOR8,. + 0
 4772              	mapping_none.10882:
 4773 0000 63       		.byte	99
 4774 0001 000000   		.space	3
 4775 0004 FFFFFFFF 		.word	-1
 4776 0008 00       		.byte	0
 4777 0009 000000   		.space	3
 4778 000c 00000000 		.word	0
 4779 0010 01       		.byte	1
 4780 0011 000000   		.space	3
 4781 0014 00000000 		.word	0
 4782 0018 03       		.byte	3
 4783 0019 000000   		.space	3
 4784 001c 00000000 		.word	0
 4785 0020 13       		.byte	19
 4786 0021 000000   		.space	3
 4787 0024 02000000 		.word	2
 4788 0028 12       		.byte	18
 4789 0029 000000   		.space	3
 4790 002c 02000000 		.word	2
 4791 0030 12       		.byte	18
 4792 0031 000000   		.space	3
 4793 0034 00000000 		.word	0
 4794 0038 06       		.byte	6
 4795 0039 000000   		.space	3
 4796 003c 00000000 		.word	0
 4797 0040 07       		.byte	7
 4798 0041 000000   		.space	3
 4799 0044 00000000 		.word	0
 4800 0048 08       		.byte	8
 4801 0049 000000   		.space	3
 4802 004c 00000000 		.word	0
 4803 0050 01       		.byte	1
 4804 0051 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 116


 4805 0054 01000000 		.word	1
 4806 0058 02       		.byte	2
 4807 0059 000000   		.space	3
 4808 005c 01000000 		.word	1
 4809 0060 03       		.byte	3
 4810 0061 000000   		.space	3
 4811 0064 01000000 		.word	1
 4812 0068 0C       		.byte	12
 4813 0069 000000   		.space	3
 4814 006c 00000000 		.word	0
 4815 0070 0D       		.byte	13
 4816 0071 000000   		.space	3
 4817 0074 00000000 		.word	0
 4818 0078 0E       		.byte	14
 4819 0079 000000   		.space	3
 4820 007c 00000000 		.word	0
 4821 0080 0F       		.byte	15
 4822 0081 000000   		.space	3
 4823 0084 00000000 		.word	0
 4824 0088 10       		.byte	16
 4825 0089 000000   		.space	3
 4826 008c 00000000 		.word	0
 4827 0090 18       		.byte	24
 4828 0091 000000   		.space	3
 4829 0094 00000000 		.word	0
 4830 0098 13       		.byte	19
 4831 0099 000000   		.space	3
 4832 009c 00000000 		.word	0
 4833 00a0 14       		.byte	20
 4834 00a1 000000   		.space	3
 4835 00a4 00000000 		.word	0
 4836 00a8 15       		.byte	21
 4837 00a9 000000   		.space	3
 4838 00ac 00000000 		.word	0
 4839 00b0 16       		.byte	22
 4840 00b1 000000   		.space	3
 4841 00b4 00000000 		.word	0
 4842 00b8 1E       		.byte	30
 4843 00b9 000000   		.space	3
 4844 00bc 00000000 		.word	0
 4845 00c0 19       		.byte	25
 4846 00c1 000000   		.space	3
 4847 00c4 00000000 		.word	0
 4848 00c8 1A       		.byte	26
 4849 00c9 000000   		.space	3
 4850 00cc 00000000 		.word	0
 4851 00d0 1B       		.byte	27
 4852 00d1 000000   		.space	3
 4853 00d4 00000000 		.word	0
 4854 00d8 1C       		.byte	28
 4855 00d9 000000   		.space	3
 4856 00dc 00000000 		.word	0
 4857 00e0 29       		.byte	41
 4858 00e1 000000   		.space	3
 4859 00e4 00000000 		.word	0
 4860 00e8 1F       		.byte	31
 4861 00e9 000000   		.space	3
ARM GAS  /tmp/ccwJS9HW.s 			page 117


 4862 00ec 00000000 		.word	0
 4863 00f0 20       		.byte	32
 4864 00f1 000000   		.space	3
 4865 00f4 00000000 		.word	0
 4866 00f8 21       		.byte	33
 4867 00f9 000000   		.space	3
 4868 00fc 00000000 		.word	0
 4869 0100 22       		.byte	34
 4870 0101 000000   		.space	3
 4871 0104 00000000 		.word	0
 4872 0108 24       		.byte	36
 4873 0109 000000   		.space	3
 4874 010c 00000000 		.word	0
 4875 0110 25       		.byte	37
 4876 0111 000000   		.space	3
 4877 0114 00000000 		.word	0
 4878 0118 26       		.byte	38
 4879 0119 000000   		.space	3
 4880 011c 00000000 		.word	0
 4881 0120 27       		.byte	39
 4882 0121 000000   		.space	3
 4883 0124 00000000 		.word	0
 4884 0128 28       		.byte	40
 4885 0129 000000   		.space	3
 4886 012c 00000000 		.word	0
 4887 0130 2E       		.byte	46
 4888 0131 000000   		.space	3
 4889 0134 00000000 		.word	0
 4890 0138 2E       		.byte	46
 4891 0139 000000   		.space	3
 4892 013c 00000000 		.word	0
 4893 0140 2E       		.byte	46
 4894 0141 000000   		.space	3
 4895 0144 00000000 		.word	0
 4896 0148 2E       		.byte	46
 4897 0149 000000   		.space	3
 4898 014c 00000000 		.word	0
 4899 0150 2E       		.byte	46
 4900 0151 000000   		.space	3
 4901 0154 00000000 		.word	0
 4902 0158 2E       		.byte	46
 4903 0159 000000   		.space	3
 4904 015c 00000000 		.word	0
 4905 0160 2E       		.byte	46
 4906 0161 000000   		.space	3
 4907 0164 00000000 		.word	0
 4908 0168 2E       		.byte	46
 4909 0169 000000   		.space	3
 4910 016c 00000000 		.word	0
 4911 0170 2E       		.byte	46
 4912 0171 000000   		.space	3
 4913 0174 00000000 		.word	0
 4914              		.section	.rodata.mid_menu,"a"
 4915              		.align	2
 4918              	mid_menu:
 4919 0000 C8C400   		.ascii	"\310\304\000"
 4920              		.text
ARM GAS  /tmp/ccwJS9HW.s 			page 118


 4921              	.Letext0:
 4922              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4923              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4924              		.file 6 "/usr/include/newlib/sys/_types.h"
 4925              		.file 7 "/usr/include/newlib/sys/reent.h"
 4926              		.file 8 "/usr/include/newlib/sys/lock.h"
 4927              		.file 9 "/usr/include/newlib/stdlib.h"
 4928              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4929              		.file 11 "/usr/include/newlib/ctype.h"
 4930              		.file 12 "dmcp/ff_ifc.h"
 4931              		.file 13 "dmcp/dmcp.h"
 4932              		.file 14 "src/keys.h"
 4933              		.file 15 "src/decNumber/decContext.h"
 4934              		.file 16 "src/decNumber/decNumber.h"
 4935              		.file 17 "src/decNumber/decimal64.h"
 4936              		.file 18 "src/decNumber/decimal128.h"
 4937              		.file 19 "src/xeq.h"
 4938              		.file 20 "src/data.h"
 4939              		.file 21 "src/display.h"
 4940              		.file 22 "src/consts.h"
 4941              		.file 23 "src/storage.h"
 4942              		.file 24 "src/catalogues.h"
 4943              		.file 25 "src/menu.h"
 4944              		.file 26 "src/lcd.h"
 4945              		.file 27 "/usr/include/newlib/string.h"
 4946              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccwJS9HW.s 			page 119


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccwJS9HW.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccwJS9HW.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccwJS9HW.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccwJS9HW.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccwJS9HW.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccwJS9HW.s:458    .text.set_menu:0000000000000024 $d
     /tmp/ccwJS9HW.s:464    .text.get_menu:0000000000000000 $t
     /tmp/ccwJS9HW.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/ccwJS9HW.s:488    .text.get_menu:0000000000000008 $d
     /tmp/ccwJS9HW.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/ccwJS9HW.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccwJS9HW.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/ccwJS9HW.s:556    .text.mdot:0000000000000000 $t
     /tmp/ccwJS9HW.s:564    .text.mdot:0000000000000000 mdot
     /tmp/ccwJS9HW.s:655    .text.mdot:000000000000003c $d
     /tmp/ccwJS9HW.s:660    .text.display_menu:0000000000000000 $t
     /tmp/ccwJS9HW.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/ccwJS9HW.s:907    .text.display_menu:000000000000010c $d
     /tmp/ccwJS9HW.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/ccwJS9HW.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccwJS9HW.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/ccwJS9HW.s:943    .text.all_menu_dots:0000000000000000 $t
     /tmp/ccwJS9HW.s:951    .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccwJS9HW.s:1035   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccwJS9HW.s:1040   .text.shutdown:0000000000000000 $t
     /tmp/ccwJS9HW.s:1048   .text.shutdown:0000000000000000 shutdown
     /tmp/ccwJS9HW.s:1066   .text.shutdown:000000000000000c $d
     /tmp/ccwJS9HW.s:1071   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccwJS9HW.s:1079   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccwJS9HW.s:1102   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccwJS9HW.s:1107   .text.get_key:0000000000000000 $t
     /tmp/ccwJS9HW.s:1115   .text.get_key:0000000000000000 get_key
     /tmp/ccwJS9HW.s:1130   .text.get_key:0000000000000004 $d
     /tmp/ccwJS9HW.s:1135   .text.put_key:0000000000000000 $t
     /tmp/ccwJS9HW.s:1143   .text.put_key:0000000000000000 put_key
     /tmp/ccwJS9HW.s:1160   .text.put_key:0000000000000004 $d
     /tmp/ccwJS9HW.s:1165   .text.shift_down:0000000000000000 $t
     /tmp/ccwJS9HW.s:1173   .text.shift_down:0000000000000000 shift_down
     /tmp/ccwJS9HW.s:1188   .text.start_key_timer:0000000000000000 $t
     /tmp/ccwJS9HW.s:1196   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccwJS9HW.s:1220   .text.start_key_timer:000000000000000c $d
     /tmp/ccwJS9HW.s:1226   .text.keyticks:0000000000000000 $t
     /tmp/ccwJS9HW.s:1234   .text.keyticks:0000000000000000 keyticks
     /tmp/ccwJS9HW.s:1265   .text.keyticks:0000000000000018 $d
     /tmp/ccwJS9HW.s:1271   .text.moveto:0000000000000000 $t
     /tmp/ccwJS9HW.s:1279   .text.moveto:0000000000000000 moveto
     /tmp/ccwJS9HW.s:1339   .text.moveto:000000000000002c $d
     /tmp/ccwJS9HW.s:1346   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccwJS9HW.s:1350   .text.print_debug:0000000000000000 $t
     /tmp/ccwJS9HW.s:1358   .text.print_debug:0000000000000000 print_debug
     /tmp/ccwJS9HW.s:1460   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccwJS9HW.s:1471   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccwJS9HW.s:1475   .text.print_debug2:0000000000000000 $t
     /tmp/ccwJS9HW.s:1483   .text.print_debug2:0000000000000000 print_debug2
ARM GAS  /tmp/ccwJS9HW.s 			page 120


     /tmp/ccwJS9HW.s:1585   .text.print_debug2:0000000000000064 $d
     /tmp/ccwJS9HW.s:1596   .text.do_now:0000000000000000 $t
     /tmp/ccwJS9HW.s:1604   .text.do_now:0000000000000000 do_now
     /tmp/ccwJS9HW.s:1639   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccwJS9HW.s:1643   .text.do_multi:0000000000000000 $t
     /tmp/ccwJS9HW.s:1651   .text.do_multi:0000000000000000 do_multi
     /tmp/ccwJS9HW.s:1682   .text.do_multi:000000000000001a $d
     /tmp/ccwJS9HW.s:1694   .text.do_multi:0000000000000026 $t
     /tmp/ccwJS9HW.s:2056   .text.do_multi:0000000000000178 $d
     /tmp/ccwJS9HW.s:2063   .text.program_main:0000000000000000 $t
     /tmp/ccwJS9HW.s:2071   .text.program_main:0000000000000000 program_main
     /tmp/ccwJS9HW.s:2564   .text.program_main:0000000000000210 $d
     /tmp/ccwJS9HW.s:2571   .text.program_main:000000000000021c $t
     /tmp/ccwJS9HW.s:2816   .text.program_main:00000000000002d0 $d
     /tmp/ccwJS9HW.s:2859   .text.program_main:0000000000000358 $t
     /tmp/ccwJS9HW.s:3244   .text.program_main:0000000000000554 $d
     /tmp/ccwJS9HW.s:3296   .bss.n_p:0000000000000000 n_p
     /tmp/ccwJS9HW.s:3364   .data.spaces:0000000000000000 spaces
     /tmp/ccwJS9HW.s:3355   .data.release:0000000000000000 release
     /tmp/ccwJS9HW.s:3328   .data.h_shift:0000000000000000 h_shift
     /tmp/ccwJS9HW.s:3319   .data.g_shift:0000000000000000 g_shift
     /tmp/ccwJS9HW.s:3310   .data.f_shift:0000000000000000 f_shift
     /tmp/ccwJS9HW.s:3337   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccwJS9HW.s:3346   .data.no_key:0000000000000000 no_key
     /tmp/ccwJS9HW.s:3371   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccwJS9HW.s:3267   .rodata.str1.4:0000000000000000 $d
     /tmp/ccwJS9HW.s:4918   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccwJS9HW.s:3272   .bss.current_menu:0000000000000000 $d
     /tmp/ccwJS9HW.s:3276   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccwJS9HW.s:3279   .bss.last_menu:0000000000000000 $d
     /tmp/ccwJS9HW.s:3283   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccwJS9HW.s:3286   .bss.mdots:0000000000000000 $d
     /tmp/ccwJS9HW.s:3290   .bss.mdots:0000000000000000 mdots
     /tmp/ccwJS9HW.s:3293   .bss.n_p:0000000000000000 $d
     /tmp/ccwJS9HW.s:3299   .bss.start_ticks:0000000000000000 $d
     /tmp/ccwJS9HW.s:3303   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccwJS9HW.s:3306   .data.f_shift:0000000000000000 $d
     /tmp/ccwJS9HW.s:3315   .data.g_shift:0000000000000000 $d
     /tmp/ccwJS9HW.s:3324   .data.h_shift:0000000000000000 $d
     /tmp/ccwJS9HW.s:3333   .data.heartbeat:0000000000000000 $d
     /tmp/ccwJS9HW.s:3342   .data.no_key:0000000000000000 $d
     /tmp/ccwJS9HW.s:3351   .data.release:0000000000000000 $d
     /tmp/ccwJS9HW.s:3360   .data.spaces:0000000000000000 $d
     /tmp/ccwJS9HW.s:3367   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccwJS9HW.s:3377   .rodata.Menus:0000000000000000 $d
     /tmp/ccwJS9HW.s:3381   .rodata.Menus:0000000000000000 Menus
     /tmp/ccwJS9HW.s:4327   .rodata.mapping_alpha.10885:0000000000000000 $d
     /tmp/ccwJS9HW.s:4331   .rodata.mapping_alpha.10885:0000000000000000 mapping_alpha.10885
     /tmp/ccwJS9HW.s:4474   .rodata.mapping_fshift.10883:0000000000000000 $d
     /tmp/ccwJS9HW.s:4478   .rodata.mapping_fshift.10883:0000000000000000 mapping_fshift.10883
     /tmp/ccwJS9HW.s:4621   .rodata.mapping_gshift.10884:0000000000000000 $d
     /tmp/ccwJS9HW.s:4625   .rodata.mapping_gshift.10884:0000000000000000 mapping_gshift.10884
     /tmp/ccwJS9HW.s:4768   .rodata.mapping_none.10882:0000000000000000 $d
     /tmp/ccwJS9HW.s:4772   .rodata.mapping_none.10882:0000000000000000 mapping_none.10882
     /tmp/ccwJS9HW.s:4915   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccwJS9HW.s 			page 121


charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

ARM GAS  /tmp/ccmw9yhH.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** extern const char SvnRevision[4];
   3:src/menu.c    **** 
   4:src/menu.c    **** struct _menu UserMenu =
   5:src/menu.c    ****   {
   6:src/menu.c    ****     "User Menu", 
   7:src/menu.c    ****     {
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  11:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  12:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  13:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  14:src/menu.c    ****     }
  15:src/menu.c    ****   };
  16:src/menu.c    **** 
  17:src/menu.c    **** const char* arrow_key_string = "--\015";
  18:src/menu.c    **** const char* cmplx_key_string = "CPX";
  19:src/menu.c    **** 
  20:src/menu.c    **** menu_name current_menu = 0;
  21:src/menu.c    **** menu_name last_menu = 0;
  22:src/menu.c    **** menu_name default_menu = 0;
  23:src/menu.c    **** 
ARM GAS  /tmp/ccmw9yhH.s 			page 2


  24:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  25:src/menu.c    **** 
  26:src/menu.c    **** 
  27:src/menu.c    **** 
  28:src/menu.c    **** /* 
  29:src/menu.c    ****  * System menu stuff
  30:src/menu.c    ****  */
  31:src/menu.c    **** 
  32:src/menu.c    **** #define MI_ABOUT_PGM 11
  33:src/menu.c    **** 
  34:src/menu.c    **** const uint8_t mid_menu[] = {
  35:src/menu.c    ****     MI_SYSTEM_ENTER,
  36:src/menu.c    ****     MI_MSC,
  37:src/menu.c    ****     MI_ABOUT_PGM,
  38:src/menu.c    ****     0 }; // Terminator
  39:src/menu.c    **** 
  40:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  41:src/menu.c    **** 
  42:src/menu.c    **** void disp_about(void);
  43:src/menu.c    **** 
  44:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  45:src/menu.c    ****   int ret = 0;
  46:src/menu.c    **** 
  47:src/menu.c    ****   switch(line_id) {
  48:src/menu.c    ****     case MI_ABOUT_PGM:
  49:src/menu.c    ****       disp_about();
  50:src/menu.c    ****       break;
  51:src/menu.c    **** 
  52:src/menu.c    ****      default:
  53:src/menu.c    ****       ret = MRET_UNIMPL;
  54:src/menu.c    ****       break;
  55:src/menu.c    ****   }
  56:src/menu.c    **** 
  57:src/menu.c    ****   return ret;
  58:src/menu.c    **** }
  59:src/menu.c    **** 
  60:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 60 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  61:src/menu.c    ****   const char * ln;
  40              		.loc 1 61 3 view .LVU1
  62:src/menu.c    **** 
  63:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 63 3 view .LVU2
  64:src/menu.c    **** 
  65:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  66:src/menu.c    **** 
  67:src/menu.c    ****   default:
  68:src/menu.c    ****     ln = NULL;
  42              		.loc 1 68 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  63:src/menu.c    **** 
  44              		.loc 1 63 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
ARM GAS  /tmp/ccmw9yhH.s 			page 3


  69:src/menu.c    ****     break;
  70:src/menu.c    ****   }
  71:src/menu.c    **** 
  72:src/menu.c    ****   return ln;
  73:src/menu.c    **** }
  46              		.loc 1 73 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 73 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB36:
  74:src/menu.c    **** 
  75:src/menu.c    **** void disp_about() {
  76:src/menu.c    **** #ifdef C_VERSION
  77:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
  78:src/menu.c    **** #else
  79:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
  80:src/menu.c    **** #endif
  81:src/menu.c    ****   xcopy ((title + 29), SvnRevision, 4);
  82:src/menu.c    **** 
  83:src/menu.c    ****   clear_disp(); // clears buffer and zeros dots[]
  84:src/menu.c    ****   lcd_writeClr(t24);
  85:src/menu.c    **** 
  86:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  87:src/menu.c    ****   lcd_putsR(t24, title);
  88:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
  89:src/menu.c    ****   t20->newln = 1;
  90:src/menu.c    ****   t20->inv = 0;
  91:src/menu.c    **** #ifdef TOP_ROW
  92:src/menu.c    ****   lcd_puts(t20, "With longer alpha display and top row,");
  93:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  94:src/menu.c    ****   lcd_puts(t20, "With a longer alpha display,");
  95:src/menu.c    **** #else
  96:src/menu.c    ****   lcd_puts(t20, "Same display layout as the original WP34S,");
  97:src/menu.c    **** #endif
  98:src/menu.c    ****   lcd_puts(t20, "and some annunciators renamed.");
  99:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 100:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 101:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 102:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
ARM GAS  /tmp/ccmw9yhH.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    ****   t20->y += 5;
 105:src/menu.c    **** 
 106:src/menu.c    ****   t20->bgfill = 1;
 107:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 108:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 109:src/menu.c    ****   t20->bgfill = 0;
 110:src/menu.c    ****   t20->newln = 0;
 111:src/menu.c    ****   
 112:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
 113:src/menu.c    ****   t24->x = 20;
 114:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 115:src/menu.c    **** 
 116:src/menu.c    ****   lcd_refresh();
 117:src/menu.c    **** 
 118:src/menu.c    ****   wait_for_key_press();
 119:src/menu.c    **** }
 120:src/menu.c    **** 
 121:src/menu.c    **** /*
 122:src/menu.c    ****  * WP34s menu code
 123:src/menu.c    ****  */
 124:src/menu.c    **** 
 125:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 126:src/menu.c    ****   menu_name m = current_menu;
 127:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 128:src/menu.c    ****     current_menu = default_menu;
 129:src/menu.c    ****   }
 130:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 131:src/menu.c    ****     current_menu = last_menu;
 132:src/menu.c    ****   }
 133:src/menu.c    ****   else {
 134:src/menu.c    ****     current_menu = new_menu; // change to new menu
 135:src/menu.c    ****   }
 136:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 137:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** void set_default_menu () {
 141:src/menu.c    ****   set_menu (default_menu);
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** void toggle_default_menu () {
 145:src/menu.c    ****   if (current_menu == M_Blank) {
 146:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 147:src/menu.c    ****     return;
 148:src/menu.c    ****   }
 149:src/menu.c    ****   else if (current_menu == M_Blank2) {
 150:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 151:src/menu.c    ****   }
 152:src/menu.c    ****   else {
 153:src/menu.c    ****     set_default_menu();
 154:src/menu.c    ****   }
 155:src/menu.c    **** }
 156:src/menu.c    **** 
 157:src/menu.c    **** menu_name get_menu () {
 158:src/menu.c    ****   return current_menu;
 159:src/menu.c    **** }
ARM GAS  /tmp/ccmw9yhH.s 			page 5


 160:src/menu.c    **** 
 161:src/menu.c    **** menu_name get_last_menu () {
 162:src/menu.c    ****   return last_menu;
 163:src/menu.c    **** }
 164:src/menu.c    **** 
 165:src/menu.c    **** void display_current_menu () {
 166:src/menu.c    ****   display_menu (get_current_menu_ref());
 167:src/menu.c    **** }
 168:src/menu.c    **** 
 169:src/menu.c    **** void set_last_menu () {
 170:src/menu.c    ****   set_menu (M_Last);
 171:src/menu.c    **** }
 172:src/menu.c    **** 
 173:src/menu.c    **** static unsigned char mdots[200][2];
 174:src/menu.c    **** 
 175:src/menu.c    **** static const struct _menu Menus[] = {
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "M_Blank", // 0
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 180:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 181:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 182:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 185:src/menu.c    ****     }    
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "M_Clear", // 1
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 191:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 192:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 193:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }    
 197:src/menu.c    ****   },
 198:src/menu.c    ****   {
 199:src/menu.c    ****     "M_Disp", // 2
 200:src/menu.c    ****     { 
 201:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 202:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 203:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 204:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 205:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 206:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 207:src/menu.c    ****     }
 208:src/menu.c    ****   },
 209:src/menu.c    ****   {
 210:src/menu.c    ****     "M_Base", // 3
 211:src/menu.c    ****     { 
 212:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 213:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 214:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 215:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 216:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
ARM GAS  /tmp/ccmw9yhH.s 			page 6


 217:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 218:src/menu.c    ****     }
 219:src/menu.c    ****   },
 220:src/menu.c    ****   {
 221:src/menu.c    ****     "M_Angles", // 4
 222:src/menu.c    ****     { 
 223:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 224:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 225:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 226:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 227:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 228:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 229:src/menu.c    ****     }
 230:src/menu.c    ****       
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "M_Misc", // 5
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 236:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 237:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 238:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 239:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 240:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "M_Swap", // 6
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 247:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 248:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 249:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }    
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "M_Program", // 7
 256:src/menu.c    ****     { 
 257:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 258:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 259:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 260:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 261:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 262:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 263:src/menu.c    ****     }
 264:src/menu.c    ****   },
 265:src/menu.c    ****   {
 266:src/menu.c    ****     "M_Setup1", // 8
 267:src/menu.c    ****     { 
 268:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 269:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 270:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 271:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 272:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 273:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
ARM GAS  /tmp/ccmw9yhH.s 			page 7


 274:src/menu.c    ****     }
 275:src/menu.c    ****   },
 276:src/menu.c    ****   {
 277:src/menu.c    ****     "M_Arrow", // 9
 278:src/menu.c    ****     { 
 279:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 280:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 281:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 282:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 283:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 284:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 285:src/menu.c    ****     }
 286:src/menu.c    ****   },
 287:src/menu.c    ****   {
 288:src/menu.c    ****     "M_Flags", // 10
 289:src/menu.c    ****     { 
 290:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 291:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 292:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 293:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 294:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 295:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 296:src/menu.c    ****     }
 297:src/menu.c    ****   },
 298:src/menu.c    ****   {
 299:src/menu.c    ****     "M_Prob", // 11
 300:src/menu.c    ****     { 
 301:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 302:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 303:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 304:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 305:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 306:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 307:src/menu.c    ****     }
 308:src/menu.c    ****   },
 309:src/menu.c    ****   {
 310:src/menu.c    ****     "M_Stats", // 12
 311:src/menu.c    ****     /*
 312:src/menu.c    ****      *xbar, sd;
 313:src/menu.c    ****      *yhat, xhat;
 314:src/menu.c    ****      *corr, L.R.;
 315:src/menu.c    ****      *best, linear;
 316:src/menu.c    ****      *ln, exp;
 317:src/menu.c    ****      *cmplx, power;
 318:src/menu.c    ****      *No, sums is already on g9.
 319:src/menu.c    ****      */
 320:src/menu.c    ****     { 
 321:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 322:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 323:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 324:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 325:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 326:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 327:src/menu.c    ****     }
 328:src/menu.c    ****   },
 329:src/menu.c    ****   {
 330:src/menu.c    ****     "M_Setup2", // 13
ARM GAS  /tmp/ccmw9yhH.s 			page 8


 331:src/menu.c    ****     { 
 332:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 333:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 334:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 335:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 336:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 337:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 338:src/menu.c    ****     }
 339:src/menu.c    ****   },
 340:src/menu.c    ****   {
 341:src/menu.c    ****     "M_Solve", // 14
 342:src/menu.c    ****     { 
 343:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 344:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 345:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 346:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 347:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 348:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 349:src/menu.c    ****     }
 350:src/menu.c    ****   },
 351:src/menu.c    ****   {
 352:src/menu.c    ****     "M_Blank2", // 15
 353:src/menu.c    ****     { 
 354:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 355:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 356:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 357:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 358:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 359:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 360:src/menu.c    ****     }    
 361:src/menu.c    ****   },
 362:src/menu.c    ****   {
 363:src/menu.c    ****     "M_Alpha", // 16
 364:src/menu.c    ****     { 
 365:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 366:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 367:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 368:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 369:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 370:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 371:src/menu.c    ****     }    
 372:src/menu.c    ****   },
 373:src/menu.c    ****   {
 374:src/menu.c    ****     "M_C_Lock", // 17
 375:src/menu.c    ****     { 
 376:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 377:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 378:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 379:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 380:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 381:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 382:src/menu.c    ****     }    
 383:src/menu.c    ****   },
 384:src/menu.c    ****   {
 385:src/menu.c    ****     "M_Clear_C", // 18
 386:src/menu.c    ****     { 
 387:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
ARM GAS  /tmp/ccmw9yhH.s 			page 9


 388:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 389:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 390:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 391:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 392:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 393:src/menu.c    ****     }    
 394:src/menu.c    ****   },
 395:src/menu.c    ****   {
 396:src/menu.c    ****     "M_Swap_C", // 19
 397:src/menu.c    ****     { 
 398:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 399:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 400:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 401:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 402:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 403:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 404:src/menu.c    ****     }    
 405:src/menu.c    ****   },
 406:src/menu.c    ****   {
 407:src/menu.c    ****     "M_Arrow_C", // 20
 408:src/menu.c    ****     { 
 409:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 410:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 411:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 412:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 413:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 414:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 415:src/menu.c    ****     }
 416:src/menu.c    ****   },
 417:src/menu.c    ****   {
 418:src/menu.c    ****     "M_Prob_C", // 21
 419:src/menu.c    ****     { 
 420:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 421:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 422:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 423:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 424:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 425:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 426:src/menu.c    ****     }
 427:src/menu.c    ****   },
 428:src/menu.c    ****   {
 429:src/menu.c    ****     "M_Blank2_C", // 22
 430:src/menu.c    ****     { 
 431:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 432:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 433:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 434:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 435:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 436:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 437:src/menu.c    ****     }    
 438:src/menu.c    ****   },
 439:src/menu.c    ****   {
 440:src/menu.c    ****     "M_Misc_C", // 23
 441:src/menu.c    ****     { 
 442:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 443:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 444:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
ARM GAS  /tmp/ccmw9yhH.s 			page 10


 445:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 446:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 447:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
 448:src/menu.c    ****     }
 449:src/menu.c    ****   },
 450:src/menu.c    ****   {
 451:src/menu.c    ****     "M_Usermenu", // 24
 452:src/menu.c    ****     { 
 453:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 454:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 455:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 456:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 457:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 458:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 459:src/menu.c    ****     }
 460:src/menu.c    ****   },
 461:src/menu.c    ****   {
 462:src/menu.c    ****     "M_Print", // 25
 463:src/menu.c    ****     { 
 464:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 465:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 466:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 467:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 468:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 469:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 470:src/menu.c    ****     }
 471:src/menu.c    ****   },
 472:src/menu.c    **** 
 473:src/menu.c    **** };  
 474:src/menu.c    **** 
 475:src/menu.c    **** /* This code is the set_status_sized code with small changes
 476:src/menu.c    ****  * and non-DM42 code removed.
 477:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 478:src/menu.c    ****  */
 479:src/menu.c    **** #define MENU_WIDTH 32
 480:src/menu.c    **** 
 481:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 481 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 482:src/menu.c    ****   // dotcol is the number of the starting dot column
 483:src/menu.c    ****   // shifted is 1 if shifted
 484:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 484 3 view .LVU8
 485:src/menu.c    **** 
 486:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 487:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 487 3 view .LVU9
 488:src/menu.c    **** 
 489:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 489 3 view .LVU10
 481:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 481 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
ARM GAS  /tmp/ccmw9yhH.s 			page 11


  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 481:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 481 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 490:src/menu.c    ****   int i, j, xmax;
 491:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 491 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
 492:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 493:src/menu.c    **** 
 494:src/menu.c    **** #ifdef RP_PREFIX
 495:src/menu.c    ****   RectPolConv = 0;
  96              		.loc 1 495 15 view .LVU14
  97 000e 494A     		ldr	r2, .L41
  98              	.LVL3:
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  99              		.loc 1 491 18 view .LVU15
 100 0010 B4BF     		ite	lt
 101 0012 01F11F03 		addlt	r3, r1, #31
 102 0016 0B46     		movge	r3, r1
 481:src/menu.c    ****   // dotcol is the number of the starting dot column
 103              		.loc 1 481 13 view .LVU16
 104 0018 0F46     		mov	r7, r1
 105              	.LVL4:
 490:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
 106              		.loc 1 490 3 is_stmt 1 view .LVU17
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 107              		.loc 1 491 3 view .LVU18
 108              		.loc 1 495 15 is_stmt 0 view .LVU19
 109 001a 0021     		movs	r1, #0
 110              	.LVL5:
 111              		.loc 1 495 15 view .LVU20
 112 001c 1160     		str	r1, [r2]
 496:src/menu.c    **** #endif
 497:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 113              		.loc 1 497 10 view .LVU21
 114 001e 019A     		ldr	r2, [sp, #4]
 115 0020 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 116              		.loc 1 491 30 view .LVU22
 117 0022 23F01F03 		bic	r3, r3, #31
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 118              		.loc 1 491 8 view .LVU23
 119 0026 03F12009 		add	r9, r3, #32
 120              	.LVL6:
 492:src/menu.c    **** 
 121              		.loc 1 492 3 is_stmt 1 view .LVU24
 495:src/menu.c    **** #endif
ARM GAS  /tmp/ccmw9yhH.s 			page 12


 122              		.loc 1 495 3 view .LVU25
 123              		.loc 1 497 3 view .LVU26
 124              		.loc 1 497 9 view .LVU27
 125 002a 002D     		cmp	r5, #0
 126 002c 78D0     		beq	.L7
 127              		.loc 1 497 23 is_stmt 0 view .LVU28
 128 002e 4F45     		cmp	r7, r9
 129 0030 76DC     		bgt	.L7
 130              	.LBB39:
 498:src/menu.c    ****     int c;
 499:src/menu.c    ****     int width;
 500:src/menu.c    ****     unsigned char cmap[6];
 501:src/menu.c    **** 
 502:src/menu.c    ****     int real_width;
 503:src/menu.c    ****     int current_smallp;
 504:src/menu.c    **** 
 505:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 506:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 507:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 508:src/menu.c    ****     //           01 -> (not used)
 509:src/menu.c    ****     //           10 -> use big font
 510:src/menu.c    ****     //           11 -> use small font
 511:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 512:src/menu.c    ****     if (str[0] == '\007') {
 131              		.loc 1 512 8 view .LVU29
 132 0032 072D     		cmp	r5, #7
 133              	.LBE39:
 487:src/menu.c    **** 
 134              		.loc 1 487 7 view .LVU30
 135 0034 4FF0FF04 		mov	r4, #255
 136              	.LVL7:
 137              	.LBB56:
 498:src/menu.c    ****     int c;
 138              		.loc 1 498 5 is_stmt 1 view .LVU31
 499:src/menu.c    ****     unsigned char cmap[6];
 139              		.loc 1 499 5 view .LVU32
 500:src/menu.c    **** 
 140              		.loc 1 500 5 view .LVU33
 502:src/menu.c    ****     int current_smallp;
 141              		.loc 1 502 5 view .LVU34
 503:src/menu.c    **** 
 142              		.loc 1 503 5 view .LVU35
 143              		.loc 1 512 5 view .LVU36
 513:src/menu.c    ****       width = str[1] & 0x1F;
 514:src/menu.c    ****       switch (str[1] & 0x60) {
 515:src/menu.c    ****       default:
 516:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 517:src/menu.c    **** 	break;
 518:src/menu.c    ****       case 0x40:	current_smallp = 0;
 519:src/menu.c    **** 	break;
 520:src/menu.c    ****       case 0x60:	current_smallp = 1;
 144              		.loc 1 520 33 is_stmt 0 view .LVU37
 145 0038 4FF0010A 		mov	r10, #1
 512:src/menu.c    ****       width = str[1] & 0x1F;
 146              		.loc 1 512 8 view .LVU38
 147 003c 64D1     		bne	.L11
 148              	.LVL8:
ARM GAS  /tmp/ccmw9yhH.s 			page 13


 149              	.L39:
 513:src/menu.c    ****       width = str[1] & 0x1F;
 150              		.loc 1 513 7 is_stmt 1 view .LVU39
 513:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 513 18 is_stmt 0 view .LVU40
 152 003e 019B     		ldr	r3, [sp, #4]
 153 0040 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 154 0042 06F06003 		and	r3, r6, #96
 514:src/menu.c    ****       default:
 155              		.loc 1 514 7 view .LVU41
 156 0046 402B     		cmp	r3, #64
 513:src/menu.c    ****       width = str[1] & 0x1F;
 157              		.loc 1 513 13 view .LVU42
 158 0048 06F01F06 		and	r6, r6, #31
 159              	.LVL9:
 514:src/menu.c    ****       default:
 160              		.loc 1 514 7 is_stmt 1 view .LVU43
 161 004c 6CD0     		beq	.L34
 162 004e 602B     		cmp	r3, #96
 163 0050 6AD1     		bne	.L34
 164              		.loc 1 520 18 view .LVU44
 165              	.LVL10:
 521:src/menu.c    **** 	break;
 166              		.loc 1 521 2 view .LVU45
 522:src/menu.c    ****       }
 523:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 167              		.loc 1 523 7 view .LVU46
 168              		.loc 1 523 11 is_stmt 0 view .LVU47
 169 0052 019B     		ldr	r3, [sp, #4]
 170 0054 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 520:src/menu.c    **** 	break;
 171              		.loc 1 520 33 view .LVU48
 172 0056 0123     		movs	r3, #1
 173 0058 0093     		str	r3, [sp]
 174 005a 00F58075 		add	r5, r0, #256
 175              	.LVL11:
 176              	.L15:
 524:src/menu.c    ****       str += 3;
 177              		.loc 1 524 7 is_stmt 1 view .LVU49
 525:src/menu.c    **** 
 526:src/menu.c    ****       real_width = charlengths(c);
 178              		.loc 1 526 20 is_stmt 0 view .LVU50
 179 005e 2846     		mov	r0, r5
 180 0060 FFF7FEFF 		bl	charlengths
 181              	.LVL12:
 524:src/menu.c    ****       str += 3;
 182              		.loc 1 524 11 view .LVU51
 183 0064 019B     		ldr	r3, [sp, #4]
 184 0066 0333     		adds	r3, r3, #3
 185 0068 0193     		str	r3, [sp, #4]
 186              	.LVL13:
 187              		.loc 1 526 7 is_stmt 1 view .LVU52
 527:src/menu.c    ****     } else {
 528:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 529:src/menu.c    ****       real_width = width = charlengths(c);
 530:src/menu.c    ****       current_smallp = smallp;
 531:src/menu.c    ****     }
ARM GAS  /tmp/ccmw9yhH.s 			page 14


 532:src/menu.c    **** 
 533:src/menu.c    ****     if (x + real_width > xmax)
 188              		.loc 1 533 5 view .LVU53
 189              		.loc 1 533 11 is_stmt 0 view .LVU54
 190 006a C319     		adds	r3, r0, r7
 191              	.LVL14:
 192              		.loc 1 533 8 view .LVU55
 193 006c 9945     		cmp	r9, r3
 194 006e 57DB     		blt	.L7
 195              	.L40:
 534:src/menu.c    ****       break;
 535:src/menu.c    **** 
 536:src/menu.c    ****     if (posns_state != current_smallp) {
 196              		.loc 1 536 5 is_stmt 1 view .LVU56
 197              		.loc 1 536 8 is_stmt 0 view .LVU57
 198 0070 009B     		ldr	r3, [sp]
 199 0072 A342     		cmp	r3, r4
 537:src/menu.c    ****       findlengths(posns, current_smallp);
 200              		.loc 1 537 7 view .LVU58
 201 0074 07AB     		add	r3, sp, #28
 536:src/menu.c    ****       findlengths(posns, current_smallp);
 202              		.loc 1 536 8 view .LVU59
 203 0076 05D0     		beq	.L18
 204              		.loc 1 537 7 is_stmt 1 view .LVU60
 205 0078 1846     		mov	r0, r3
 206              	.LVL15:
 207              		.loc 1 537 7 is_stmt 0 view .LVU61
 208 007a 0099     		ldr	r1, [sp]
 209 007c 0393     		str	r3, [sp, #12]
 210 007e FFF7FEFF 		bl	findlengths
 211              	.LVL16:
 212 0082 039B     		ldr	r3, [sp, #12]
 538:src/menu.c    ****       posns_state = current_smallp;
 213              		.loc 1 538 7 is_stmt 1 view .LVU62
 214              	.LVL17:
 215              	.L18:
 539:src/menu.c    ****     }
 540:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 216              		.loc 1 540 5 view .LVU63
 217 0084 009A     		ldr	r2, [sp]
 218 0086 2846     		mov	r0, r5
 219 0088 05A9     		add	r1, sp, #20
 220 008a FFF7FEFF 		bl	unpackchar
 221              	.LVL18:
 541:src/menu.c    **** 
 542:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 222              		.loc 1 542 5 view .LVU64
 223              		.loc 1 542 15 view .LVU65
 224 008e 029B     		ldr	r3, [sp, #8]
 225 0090 03EB4704 		add	r4, r3, r7, lsl #1
 226 0094 284B     		ldr	r3, .L41+4
 227 0096 0DF1140B 		add	fp, sp, #20
 228 009a 1C44     		add	r4, r4, r3
 540:src/menu.c    **** 
 229              		.loc 1 540 5 is_stmt 0 view .LVU66
 230 009c 4FF0050E 		mov	lr, #5
 231 00a0 A9EB0705 		sub	r5, r9, r7
ARM GAS  /tmp/ccmw9yhH.s 			page 15


 232              	.LVL19:
 233              	.L19:
 543:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 234              		.loc 1 543 17 is_stmt 1 view .LVU67
 235              		.loc 1 543 7 is_stmt 0 view .LVU68
 236 00a4 002E     		cmp	r6, #0
 237 00a6 1FDD     		ble	.L25
 544:src/menu.c    **** 	if (x+j >= xmax)
 238              		.loc 1 544 2 is_stmt 1 view .LVU69
 239              		.loc 1 544 5 is_stmt 0 view .LVU70
 240 00a8 B945     		cmp	r9, r7
 241 00aa 1DDD     		ble	.L25
 242              	.LBB40:
 243              	.LBB41:
 244              	.LBB42:
 245              	.LBB43:
 545:src/menu.c    **** 	  break;
 546:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 547:src/menu.c    ****       }
 548:src/menu.c    ****     }
 549:src/menu.c    ****     x += width;
 550:src/menu.c    ****   }
 551:src/menu.c    **** }
 552:src/menu.c    **** 
 553:src/menu.c    **** 
 554:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 555:src/menu.c    **** 
 556:src/menu.c    **** int pixel_length(const char *s, int smallp)
 557:src/menu.c    **** {
 558:src/menu.c    ****   int len = 0;
 559:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 560:src/menu.c    ****   while (*s != '\0') {
 561:src/menu.c    ****     if (s[0] == '\007') {
 562:src/menu.c    ****       len += s[1] & 0x1F;
 563:src/menu.c    ****       s += 3;
 564:src/menu.c    ****       continue;
 565:src/menu.c    ****     }
 566:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 567:src/menu.c    ****   }
 568:src/menu.c    ****   return len;
 569:src/menu.c    **** }
 570:src/menu.c    **** */
 571:src/menu.c    **** 
 572:src/menu.c    **** 
 573:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 574:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 575:src/menu.c    ****   if (on) {
 576:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 577:src/menu.c    ****   }
 578:src/menu.c    ****   else {
 579:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 246              		.loc 1 579 25 view .LVU71
 247 00ac 0AFA0EFC 		lsl	ip, r10, lr
 248              		.loc 1 579 17 view .LVU72
 249 00b0 4FFA8CFC 		sxtb	ip, ip
 250              	.LBE43:
 251              	.LBE42:
ARM GAS  /tmp/ccmw9yhH.s 			page 16


 252              	.LBE41:
 253              	.LBE40:
 546:src/menu.c    ****       }
 254              		.loc 1 546 31 view .LVU73
 255 00b4 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 256              	.LBB53:
 257              	.LBB50:
 258              	.LBB47:
 259              	.LBB44:
 260              		.loc 1 579 17 view .LVU74
 261 00b8 6FEA0C08 		mvn	r8, ip
 262              	.LBE44:
 263              	.LBE47:
 264              	.LBE50:
 265              	.LBE53:
 543:src/menu.c    **** 	if (x+j >= xmax)
 266              		.loc 1 543 13 view .LVU75
 267 00bc 0023     		movs	r3, #0
 268 00be 01E0     		b	.L20
 269              	.LVL20:
 270              	.L24:
 544:src/menu.c    **** 	  break;
 271              		.loc 1 544 5 view .LVU76
 272 00c0 9D42     		cmp	r5, r3
 273 00c2 11D0     		beq	.L25
 274              	.LVL21:
 275              	.L20:
 546:src/menu.c    ****       }
 276              		.loc 1 546 2 is_stmt 1 view .LVU77
 277              	.LBB54:
 278              	.LBI40:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 279              		.loc 1 573 6 view .LVU78
 280              	.LBB51:
 574:src/menu.c    ****   if (on) {
 281              		.loc 1 574 3 view .LVU79
 282              	.LBB48:
 283              	.LBI42:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 573 6 view .LVU80
 285              	.LBB45:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 286              		.loc 1 575 3 view .LVU81
 287              	.LBE45:
 288              	.LBE48:
 574:src/menu.c    ****   if (on) {
 289              		.loc 1 574 6 is_stmt 0 view .LVU82
 290 00c4 DA19     		adds	r2, r3, r7
 291              	.LVL22:
 574:src/menu.c    ****   if (on) {
 292              		.loc 1 574 6 view .LVU83
 293 00c6 C72A     		cmp	r2, #199
 294              	.LBE51:
 295              	.LBE54:
 546:src/menu.c    ****       }
 296              		.loc 1 546 46 view .LVU84
 297 00c8 40FA03F1 		asr	r1, r0, r3
ARM GAS  /tmp/ccmw9yhH.s 			page 17


 298              	.LBB55:
 299              	.LBB52:
 574:src/menu.c    ****   if (on) {
 300              		.loc 1 574 6 view .LVU85
 301 00cc 09D8     		bhi	.L22
 302              	.LBB49:
 303              	.LBB46:
 576:src/menu.c    ****   }
 304              		.loc 1 576 5 is_stmt 1 view .LVU86
 305              		.loc 1 579 5 view .LVU87
 576:src/menu.c    ****   }
 306              		.loc 1 576 17 is_stmt 0 view .LVU88
 307 00ce 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 308              	.LVL23:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 309              		.loc 1 575 6 view .LVU89
 310 00d2 C907     		lsls	r1, r1, #31
 576:src/menu.c    ****   }
 311              		.loc 1 576 17 view .LVU90
 312 00d4 4CBF     		ite	mi
 313 00d6 4CEA0202 		orrmi	r2, ip, r2
 314              		.loc 1 579 17 view .LVU91
 315 00da 08EA0202 		andpl	r2, r8, r2
 316 00de 04F81320 		strb	r2, [r4, r3, lsl #1]
 317              	.L22:
 318              	.LBE46:
 319              	.LBE49:
 320              	.LBE52:
 321              	.LBE55:
 544:src/menu.c    **** 	  break;
 322              		.loc 1 544 2 is_stmt 1 view .LVU92
 323              	.LVL24:
 543:src/menu.c    **** 	if (x+j >= xmax)
 324              		.loc 1 543 26 view .LVU93
 543:src/menu.c    **** 	if (x+j >= xmax)
 325              		.loc 1 543 27 is_stmt 0 view .LVU94
 326 00e2 0133     		adds	r3, r3, #1
 327              	.LVL25:
 543:src/menu.c    **** 	if (x+j >= xmax)
 328              		.loc 1 543 17 is_stmt 1 view .LVU95
 543:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 543 7 is_stmt 0 view .LVU96
 330 00e4 B342     		cmp	r3, r6
 331 00e6 EBD1     		bne	.L24
 332              	.LVL26:
 333              	.L25:
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 334              		.loc 1 542 20 is_stmt 1 view .LVU97
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 335              		.loc 1 542 15 view .LVU98
 336 00e8 0EF1FF3E 		add	lr, lr, #-1
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 337              		.loc 1 542 5 is_stmt 0 view .LVU99
 338 00ec BEF1FF3F 		cmp	lr, #-1
 339 00f0 0BF1010B 		add	fp, fp, #1
 340              	.LVL27:
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/ccmw9yhH.s 			page 18


 341              		.loc 1 542 5 view .LVU100
 342 00f4 D6D1     		bne	.L19
 549:src/menu.c    ****   }
 343              		.loc 1 549 5 is_stmt 1 view .LVU101
 344              	.LBE56:
 497:src/menu.c    ****     int c;
 345              		.loc 1 497 10 is_stmt 0 view .LVU102
 346 00f6 019B     		ldr	r3, [sp, #4]
 347 00f8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 348              	.LBB57:
 549:src/menu.c    ****   }
 349              		.loc 1 549 7 view .LVU103
 350 00fa 3744     		add	r7, r7, r6
 351              	.LVL28:
 549:src/menu.c    ****   }
 352              		.loc 1 549 7 view .LVU104
 353              	.LBE57:
 497:src/menu.c    ****     int c;
 354              		.loc 1 497 9 is_stmt 1 view .LVU105
 355 00fc 85B1     		cbz	r5, .L7
 497:src/menu.c    ****     int c;
 356              		.loc 1 497 23 is_stmt 0 view .LVU106
 357 00fe B945     		cmp	r9, r7
 358 0100 0EDB     		blt	.L7
 359              	.LBB58:
 512:src/menu.c    ****       width = str[1] & 0x1F;
 360              		.loc 1 512 8 view .LVU107
 361 0102 072D     		cmp	r5, #7
 362              	.LBE58:
 363 0104 009C     		ldr	r4, [sp]
 364              	.LBB59:
 498:src/menu.c    ****     int width;
 365              		.loc 1 498 5 is_stmt 1 view .LVU108
 499:src/menu.c    ****     unsigned char cmap[6];
 366              		.loc 1 499 5 view .LVU109
 500:src/menu.c    **** 
 367              		.loc 1 500 5 view .LVU110
 502:src/menu.c    ****     int current_smallp;
 368              		.loc 1 502 5 view .LVU111
 503:src/menu.c    **** 
 369              		.loc 1 503 5 view .LVU112
 512:src/menu.c    ****       width = str[1] & 0x1F;
 370              		.loc 1 512 5 view .LVU113
 512:src/menu.c    ****       width = str[1] & 0x1F;
 371              		.loc 1 512 8 is_stmt 0 view .LVU114
 372 0106 9AD0     		beq	.L39
 373              	.LVL29:
 374              	.L11:
 528:src/menu.c    ****       real_width = width = charlengths(c);
 375              		.loc 1 528 7 is_stmt 1 view .LVU115
 529:src/menu.c    ****       current_smallp = smallp;
 376              		.loc 1 529 28 is_stmt 0 view .LVU116
 377 0108 2846     		mov	r0, r5
 378 010a FFF7FEFF 		bl	charlengths
 379              	.LVL30:
 528:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 528 31 view .LVU117
ARM GAS  /tmp/ccmw9yhH.s 			page 19


 381 010e 019B     		ldr	r3, [sp, #4]
 382 0110 0133     		adds	r3, r3, #1
 383 0112 0193     		str	r3, [sp, #4]
 384              	.LVL31:
 529:src/menu.c    ****       current_smallp = smallp;
 385              		.loc 1 529 7 is_stmt 1 view .LVU118
 530:src/menu.c    ****     }
 386              		.loc 1 530 7 view .LVU119
 530:src/menu.c    ****     }
 387              		.loc 1 530 22 is_stmt 0 view .LVU120
 388 0114 0023     		movs	r3, #0
 389              	.LVL32:
 530:src/menu.c    ****     }
 390              		.loc 1 530 22 view .LVU121
 391 0116 0093     		str	r3, [sp]
 392              	.LVL33:
 533:src/menu.c    ****       break;
 393              		.loc 1 533 11 view .LVU122
 394 0118 C319     		adds	r3, r0, r7
 395              	.LVL34:
 533:src/menu.c    ****       break;
 396              		.loc 1 533 8 view .LVU123
 397 011a 9945     		cmp	r9, r3
 529:src/menu.c    ****       current_smallp = smallp;
 398              		.loc 1 529 28 view .LVU124
 399 011c 0646     		mov	r6, r0
 533:src/menu.c    ****       break;
 400              		.loc 1 533 5 is_stmt 1 view .LVU125
 533:src/menu.c    ****       break;
 401              		.loc 1 533 8 is_stmt 0 view .LVU126
 402 011e A7DA     		bge	.L40
 403              	.LVL35:
 404              	.L7:
 533:src/menu.c    ****       break;
 405              		.loc 1 533 8 view .LVU127
 406              	.LBE59:
 551:src/menu.c    **** 
 407              		.loc 1 551 1 view .LVU128
 408 0120 0DF5097D 		add	sp, sp, #548
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 36
 411              		@ sp needed
 412 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 413              	.LVL36:
 414              	.L34:
 415              		.cfi_restore_state
 416              	.LBB60:
 523:src/menu.c    ****       str += 3;
 417              		.loc 1 523 7 is_stmt 1 view .LVU129
 523:src/menu.c    ****       str += 3;
 418              		.loc 1 523 11 is_stmt 0 view .LVU130
 419 0128 019B     		ldr	r3, [sp, #4]
 420 012a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 516:src/menu.c    **** 	break;
 421              		.loc 1 516 33 view .LVU131
 422 012c 0023     		movs	r3, #0
 423 012e 0093     		str	r3, [sp]
ARM GAS  /tmp/ccmw9yhH.s 			page 20


 424 0130 95E7     		b	.L15
 425              	.L42:
 426 0132 00BF     		.align	2
 427              	.L41:
 428 0134 00000000 		.word	RectPolConv
 429 0138 00000000 		.word	.LANCHOR0
 430              	.LBE60:
 431              		.cfi_endproc
 432              	.LFE36:
 434              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC5:
 437 0000 57697468 		.ascii	"With longer alpha display and top row,\000"
 437      206C6F6E 
 437      67657220 
 437      616C7068 
 437      61206469 
 438 0027 00       		.align	2
 439              	.LC6:
 440 0028 616E6420 		.ascii	"and some annunciators renamed.\000"
 440      736F6D65 
 440      20616E6E 
 440      756E6369 
 440      61746F72 
 441 0047 00       		.align	2
 442              	.LC7:
 443 0048 496E636C 		.ascii	"Includes printing, stopwatch,\000"
 443      75646573 
 443      20707269 
 443      6E74696E 
 443      672C2073 
 444 0066 0000     		.align	2
 445              	.LC8:
 446 0068 656E7472 		.ascii	"entry RPN, extended file handling,\000"
 446      79205250 
 446      4E2C2065 
 446      7874656E 
 446      64656420 
 447 008b 00       		.align	2
 448              	.LC9:
 449 008c 75736572 		.ascii	"user-defined menus, and\000"
 449      2D646566 
 449      696E6564 
 449      206D656E 
 449      75732C20 
 450              		.align	2
 451              	.LC10:
 452 00a4 636F6D70 		.ascii	"complex lock mode.\000"
 452      6C657820 
 452      6C6F636B 
 452      206D6F64 
 452      652E00
 453 00b7 00       		.align	2
 454              	.LC11:
 455 00b8 4E656974 		.ascii	"Neither provided by          \000"
 455      68657220 
 455      70726F76 
ARM GAS  /tmp/ccmw9yhH.s 			page 21


 455      69646564 
 455      20627920 
 456 00d6 0000     		.align	2
 457              	.LC12:
 458 00d8 6E6F7220 		.ascii	"nor supported by SwissMicros.\000"
 458      73757070 
 458      6F727465 
 458      64206279 
 458      20537769 
 459 00f6 0000     		.align	2
 460              	.LC13:
 461 00f8 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462 011a 0000     		.align	2
 463              	.LC4:
 464 011c 57502033 		.ascii	"WP 34S calculator for DM42: v     \000"
 464      34532063 
 464      616C6375 
 464      6C61746F 
 464      7220666F 
 465              		.section	.text.disp_about,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	disp_about
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	disp_about:
 475              	.LFB5:
  75:src/menu.c    **** #ifdef C_VERSION
 476              		.loc 1 75 19 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 40
 479              		@ frame_needed = 0, uses_anonymous_args = 0
  79:src/menu.c    **** #endif
 480              		.loc 1 79 3 view .LVU133
  75:src/menu.c    **** #ifdef C_VERSION
 481              		.loc 1 75 19 is_stmt 0 view .LVU134
 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 4, -24
 485              		.cfi_offset 5, -20
 486              		.cfi_offset 6, -16
 487              		.cfi_offset 7, -12
 488              		.cfi_offset 8, -8
 489              		.cfi_offset 14, -4
  79:src/menu.c    **** #endif
 490              		.loc 1 79 8 view .LVU135
 491 0004 334E     		ldr	r6, .L45
  84:src/menu.c    **** 
 492              		.loc 1 84 3 view .LVU136
 493 0006 344C     		ldr	r4, .L45+4
  86:src/menu.c    ****   lcd_putsR(t24, title);
ARM GAS  /tmp/ccmw9yhH.s 			page 22


 494              		.loc 1 86 3 view .LVU137
 495 0008 DFF81081 		ldr	r8, .L45+72
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 496              		.loc 1 87 3 view .LVU138
 497 000c 334F     		ldr	r7, .L45+8
  79:src/menu.c    **** #endif
 498              		.loc 1 79 8 view .LVU139
 499 000e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
  75:src/menu.c    **** #ifdef C_VERSION
 500              		.loc 1 75 19 view .LVU140
 501 0010 8AB0     		sub	sp, sp, #40
 502              		.cfi_def_cfa_offset 64
  79:src/menu.c    **** #endif
 503              		.loc 1 79 8 view .LVU141
 504 0012 01AD     		add	r5, sp, #4
 505 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 506 0016 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 507 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 508 001a 3368     		ldr	r3, [r6]
 509 001c 25F8023B 		strh	r3, [r5], #2	@ movhi
  81:src/menu.c    **** 
 510              		.loc 1 81 3 view .LVU142
 511 0020 2F49     		ldr	r1, .L45+12
  79:src/menu.c    **** #endif
 512              		.loc 1 79 8 view .LVU143
 513 0022 1B0C     		lsrs	r3, r3, #16
  81:src/menu.c    **** 
 514              		.loc 1 81 3 view .LVU144
 515 0024 0422     		movs	r2, #4
 516 0026 0DF12100 		add	r0, sp, #33
  79:src/menu.c    **** #endif
 517              		.loc 1 79 8 view .LVU145
 518 002a 2B70     		strb	r3, [r5]
  81:src/menu.c    **** 
 519              		.loc 1 81 3 is_stmt 1 view .LVU146
 520 002c FFF7FEFF 		bl	xcopy
 521              	.LVL37:
  83:src/menu.c    ****   lcd_writeClr(t24);
 522              		.loc 1 83 3 view .LVU147
 523 0030 FFF7FEFF 		bl	clear_disp
 524              	.LVL38:
  84:src/menu.c    **** 
 525              		.loc 1 84 3 view .LVU148
 526 0034 2B4B     		ldr	r3, .L45+16
 527 0036 606B     		ldr	r0, [r4, #52]
 528 0038 9847     		blx	r3
 529              	.LVL39:
  86:src/menu.c    ****   lcd_putsR(t24, title);
 530              		.loc 1 86 3 view .LVU149
 531 003a 606B     		ldr	r0, [r4, #52]
 532 003c 0522     		movs	r2, #5
 533 003e 0021     		movs	r1, #0
 534 0040 C047     		blx	r8
 535              	.LVL40:
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 536              		.loc 1 87 3 view .LVU150
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
ARM GAS  /tmp/ccmw9yhH.s 			page 23


 537              		.loc 1 87 3 view .LVU151
 538 0042 606B     		ldr	r0, [r4, #52]
 539 0044 0126     		movs	r6, #1
 540 0046 4674     		strb	r6, [r0, #17]
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 541              		.loc 1 87 3 view .LVU152
 542 0048 01A9     		add	r1, sp, #4
 543 004a B847     		blx	r7
 544              	.LVL41:
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 545              		.loc 1 87 3 view .LVU153
 546 004c 636B     		ldr	r3, [r4, #52]
 547 004e 0025     		movs	r5, #0
 548 0050 5D74     		strb	r5, [r3, #17]
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 549              		.loc 1 87 3 view .LVU154
  88:src/menu.c    ****   t20->newln = 1;
 550              		.loc 1 88 3 view .LVU155
 551 0052 B3F90620 		ldrsh	r2, [r3, #6]
 552 0056 B3F90410 		ldrsh	r1, [r3, #4]
 553 005a 206B     		ldr	r0, [r4, #48]
 554 005c C047     		blx	r8
 555              	.LVL42:
  89:src/menu.c    ****   t20->inv = 0;
 556              		.loc 1 89 3 view .LVU156
 557 005e 206B     		ldr	r0, [r4, #48]
  92:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 558              		.loc 1 92 3 is_stmt 0 view .LVU157
 559 0060 2149     		ldr	r1, .L45+20
  89:src/menu.c    ****   t20->inv = 0;
 560              		.loc 1 89 14 view .LVU158
 561 0062 0675     		strb	r6, [r0, #20]
  90:src/menu.c    **** #ifdef TOP_ROW
 562              		.loc 1 90 3 is_stmt 1 view .LVU159
  90:src/menu.c    **** #ifdef TOP_ROW
 563              		.loc 1 90 12 is_stmt 0 view .LVU160
 564 0064 4574     		strb	r5, [r0, #17]
  92:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 565              		.loc 1 92 3 is_stmt 1 view .LVU161
 566 0066 B847     		blx	r7
 567              	.LVL43:
  98:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 568              		.loc 1 98 3 view .LVU162
 569 0068 206B     		ldr	r0, [r4, #48]
 570 006a 2049     		ldr	r1, .L45+24
 571 006c B847     		blx	r7
 572              	.LVL44:
  99:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 573              		.loc 1 99 3 view .LVU163
 574 006e 206B     		ldr	r0, [r4, #48]
 575 0070 1F49     		ldr	r1, .L45+28
 576 0072 B847     		blx	r7
 577              	.LVL45:
 100:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 578              		.loc 1 100 3 view .LVU164
 579 0074 206B     		ldr	r0, [r4, #48]
 580 0076 1F49     		ldr	r1, .L45+32
ARM GAS  /tmp/ccmw9yhH.s 			page 24


 581 0078 B847     		blx	r7
 582              	.LVL46:
 101:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 583              		.loc 1 101 3 view .LVU165
 584 007a 206B     		ldr	r0, [r4, #48]
 585 007c 1E49     		ldr	r1, .L45+36
 586 007e B847     		blx	r7
 587              	.LVL47:
 102:src/menu.c    **** 
 588              		.loc 1 102 3 view .LVU166
 589 0080 206B     		ldr	r0, [r4, #48]
 590 0082 1E49     		ldr	r1, .L45+40
 591 0084 B847     		blx	r7
 592              	.LVL48:
 104:src/menu.c    **** 
 593              		.loc 1 104 3 view .LVU167
 594 0086 206B     		ldr	r0, [r4, #48]
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 595              		.loc 1 107 3 is_stmt 0 view .LVU168
 596 0088 1D49     		ldr	r1, .L45+44
 104:src/menu.c    **** 
 597              		.loc 1 104 10 view .LVU169
 598 008a C388     		ldrh	r3, [r0, #6]
 106:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 599              		.loc 1 106 15 view .LVU170
 600 008c 8674     		strb	r6, [r0, #18]
 104:src/menu.c    **** 
 601              		.loc 1 104 10 view .LVU171
 602 008e 0533     		adds	r3, r3, #5
 603 0090 C380     		strh	r3, [r0, #6]	@ movhi
 106:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 604              		.loc 1 106 3 is_stmt 1 view .LVU172
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 605              		.loc 1 107 3 view .LVU173
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 606              		.loc 1 107 3 view .LVU174
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 607              		.loc 1 107 3 view .LVU175
 608 0092 4674     		strb	r6, [r0, #17]
 609 0094 B847     		blx	r7
 610              	.LVL49:
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 611              		.loc 1 107 3 view .LVU176
 612 0096 206B     		ldr	r0, [r4, #48]
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 613              		.loc 1 107 3 view .LVU177
 108:src/menu.c    ****   t20->bgfill = 0;
 614              		.loc 1 108 3 view .LVU178
 108:src/menu.c    ****   t20->bgfill = 0;
 615              		.loc 1 108 3 view .LVU179
 616 0098 1A49     		ldr	r1, .L45+48
 617 009a 4674     		strb	r6, [r0, #17]
 108:src/menu.c    ****   t20->bgfill = 0;
 618              		.loc 1 108 3 view .LVU180
 619 009c B847     		blx	r7
 620              	.LVL50:
 108:src/menu.c    ****   t20->bgfill = 0;
ARM GAS  /tmp/ccmw9yhH.s 			page 25


 621              		.loc 1 108 3 view .LVU181
 622 009e 236B     		ldr	r3, [r4, #48]
 112:src/menu.c    ****   t24->x = 20;
 623              		.loc 1 112 20 is_stmt 0 view .LVU182
 624 00a0 194A     		ldr	r2, .L45+52
 108:src/menu.c    ****   t20->bgfill = 0;
 625              		.loc 1 108 3 view .LVU183
 626 00a2 5D74     		strb	r5, [r3, #17]
 108:src/menu.c    ****   t20->bgfill = 0;
 627              		.loc 1 108 3 is_stmt 1 view .LVU184
 109:src/menu.c    ****   t20->newln = 0;
 628              		.loc 1 109 3 view .LVU185
 109:src/menu.c    ****   t20->newln = 0;
 629              		.loc 1 109 15 is_stmt 0 view .LVU186
 630 00a4 9D74     		strb	r5, [r3, #18]
 110:src/menu.c    ****   
 631              		.loc 1 110 3 is_stmt 1 view .LVU187
 110:src/menu.c    ****   
 632              		.loc 1 110 14 is_stmt 0 view .LVU188
 633 00a6 1D75     		strb	r5, [r3, #20]
 112:src/menu.c    ****   t24->x = 20;
 634              		.loc 1 112 3 is_stmt 1 view .LVU189
 112:src/menu.c    ****   t24->x = 20;
 635              		.loc 1 112 20 is_stmt 0 view .LVU190
 636 00a8 606B     		ldr	r0, [r4, #52]
 637 00aa 9047     		blx	r2
 638              	.LVL51:
 112:src/menu.c    ****   t24->x = 20;
 639              		.loc 1 112 3 view .LVU191
 640 00ac 636B     		ldr	r3, [r4, #52]
 114:src/menu.c    **** 
 641              		.loc 1 114 3 view .LVU192
 642 00ae 174A     		ldr	r2, .L45+56
 643 00b0 5E74     		strb	r6, [r3, #17]
 112:src/menu.c    ****   t24->x = 20;
 644              		.loc 1 112 39 view .LVU193
 645 00b2 C0F1EB00 		rsb	r0, r0, #235
 113:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 646              		.loc 1 113 10 view .LVU194
 647 00b6 1421     		movs	r1, #20
 112:src/menu.c    ****   t24->x = 20;
 648              		.loc 1 112 10 view .LVU195
 649 00b8 D880     		strh	r0, [r3, #6]	@ movhi
 113:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 650              		.loc 1 113 3 is_stmt 1 view .LVU196
 113:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 651              		.loc 1 113 10 is_stmt 0 view .LVU197
 652 00ba 9980     		strh	r1, [r3, #4]	@ movhi
 114:src/menu.c    **** 
 653              		.loc 1 114 3 is_stmt 1 view .LVU198
 114:src/menu.c    **** 
 654              		.loc 1 114 3 view .LVU199
 114:src/menu.c    **** 
 655              		.loc 1 114 3 view .LVU200
 656 00bc 1846     		mov	r0, r3
 657 00be 1449     		ldr	r1, .L45+60
 658 00c0 9047     		blx	r2
ARM GAS  /tmp/ccmw9yhH.s 			page 26


 659              	.LVL52:
 114:src/menu.c    **** 
 660              		.loc 1 114 3 view .LVU201
 661 00c2 626B     		ldr	r2, [r4, #52]
 116:src/menu.c    **** 
 662              		.loc 1 116 3 is_stmt 0 view .LVU202
 663 00c4 134B     		ldr	r3, .L45+64
 114:src/menu.c    **** 
 664              		.loc 1 114 3 view .LVU203
 665 00c6 5574     		strb	r5, [r2, #17]
 114:src/menu.c    **** 
 666              		.loc 1 114 3 is_stmt 1 view .LVU204
 116:src/menu.c    **** 
 667              		.loc 1 116 3 view .LVU205
 668 00c8 9847     		blx	r3
 669              	.LVL53:
 118:src/menu.c    **** }
 670              		.loc 1 118 3 view .LVU206
 671 00ca 134B     		ldr	r3, .L45+68
 672 00cc 9847     		blx	r3
 673              	.LVL54:
 119:src/menu.c    **** 
 674              		.loc 1 119 1 is_stmt 0 view .LVU207
 675 00ce 0AB0     		add	sp, sp, #40
 676              		.cfi_def_cfa_offset 24
 677              		@ sp needed
 678 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 679              	.L46:
 680              		.align	2
 681              	.L45:
 682 00d4 1C010000 		.word	.LC4
 683 00d8 00200010 		.word	268443648
 684 00dc 7D020008 		.word	134218365
 685 00e0 00000000 		.word	SvnRevision
 686 00e4 65020008 		.word	134218341
 687 00e8 00000000 		.word	.LC5
 688 00ec 28000000 		.word	.LC6
 689 00f0 48000000 		.word	.LC7
 690 00f4 68000000 		.word	.LC8
 691 00f8 8C000000 		.word	.LC9
 692 00fc A4000000 		.word	.LC10
 693 0100 B8000000 		.word	.LC11
 694 0104 D8000000 		.word	.LC12
 695 0108 71020008 		.word	134218353
 696 010c B1020008 		.word	134218417
 697 0110 F8000000 		.word	.LC13
 698 0114 31020008 		.word	134218289
 699 0118 99030008 		.word	134218649
 700 011c 6D020008 		.word	134218349
 701              		.cfi_endproc
 702              	.LFE5:
 704              		.section	.text.run_menu_item,"ax",%progbits
 705              		.align	1
 706              		.p2align 2,,3
 707              		.global	run_menu_item
 708              		.syntax unified
 709              		.thumb
ARM GAS  /tmp/ccmw9yhH.s 			page 27


 710              		.thumb_func
 711              		.fpu fpv4-sp-d16
 713              	run_menu_item:
 714              	.LVL55:
 715              	.LFB3:
  44:src/menu.c    ****   int ret = 0;
 716              		.loc 1 44 36 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
  45:src/menu.c    **** 
 720              		.loc 1 45 3 view .LVU209
  47:src/menu.c    ****     case MI_ABOUT_PGM:
 721              		.loc 1 47 3 view .LVU210
 722 0000 0B28     		cmp	r0, #11
 723 0002 04D1     		bne	.L49
  49:src/menu.c    ****       break;
 724              		.loc 1 49 7 view .LVU211
  44:src/menu.c    ****   int ret = 0;
 725              		.loc 1 44 36 is_stmt 0 view .LVU212
 726 0004 08B5     		push	{r3, lr}
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
  49:src/menu.c    ****       break;
 730              		.loc 1 49 7 view .LVU213
 731 0006 FFF7FEFF 		bl	disp_about
 732              	.LVL56:
  50:src/menu.c    **** 
 733              		.loc 1 50 7 is_stmt 1 view .LVU214
  45:src/menu.c    **** 
 734              		.loc 1 45 7 is_stmt 0 view .LVU215
 735 000a 0020     		movs	r0, #0
  58:src/menu.c    **** 
 736              		.loc 1 58 1 view .LVU216
 737 000c 08BD     		pop	{r3, pc}
 738              	.LVL57:
 739              	.L49:
 740              		.cfi_def_cfa_offset 0
 741              		.cfi_restore 3
 742              		.cfi_restore 14
  53:src/menu.c    ****       break;
 743              		.loc 1 53 11 view .LVU217
 744 000e 4FF0FF30 		mov	r0, #-1
 745              	.LVL58:
  57:src/menu.c    **** }
 746              		.loc 1 57 3 is_stmt 1 view .LVU218
  58:src/menu.c    **** 
 747              		.loc 1 58 1 is_stmt 0 view .LVU219
 748 0012 7047     		bx	lr
 749              		.cfi_endproc
 750              	.LFE3:
 752              		.section	.text.set_menu,"ax",%progbits
 753              		.align	1
 754              		.p2align 2,,3
 755              		.global	set_menu
 756              		.syntax unified
ARM GAS  /tmp/ccmw9yhH.s 			page 28


 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	set_menu:
 762              	.LVL59:
 763              	.LFB6:
 125:src/menu.c    ****   menu_name m = current_menu;
 764              		.loc 1 125 38 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              		@ link register save eliminated.
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 769              		.loc 1 126 3 view .LVU221
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 770              		.loc 1 126 13 is_stmt 0 view .LVU222
 771 0000 0A4A     		ldr	r2, .L66
 772 0002 92F90030 		ldrsb	r3, [r2]
 773              	.LVL60:
 127:src/menu.c    ****     current_menu = default_menu;
 774              		.loc 1 127 3 is_stmt 1 view .LVU223
 127:src/menu.c    ****     current_menu = default_menu;
 775              		.loc 1 127 6 is_stmt 0 view .LVU224
 776 0006 8342     		cmp	r3, r0
 777 0008 0CD0     		beq	.L65
 130:src/menu.c    ****     current_menu = last_menu;
 778              		.loc 1 130 8 is_stmt 1 view .LVU225
 130:src/menu.c    ****     current_menu = last_menu;
 779              		.loc 1 130 11 is_stmt 0 view .LVU226
 780 000a 411C     		adds	r1, r0, #1
 131:src/menu.c    ****   }
 781              		.loc 1 131 5 is_stmt 1 view .LVU227
 131:src/menu.c    ****   }
 782              		.loc 1 131 18 is_stmt 0 view .LVU228
 783 000c 09BF     		itett	eq
 784 000e 0849     		ldreq	r1, .L66+4
 134:src/menu.c    ****   }
 785              		.loc 1 134 18 view .LVU229
 786 0010 1070     		strbne	r0, [r2]
 131:src/menu.c    ****   }
 787              		.loc 1 131 18 view .LVU230
 788 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 789 0014 1170     		strbeq	r1, [r2]
 134:src/menu.c    ****   }
 790              		.loc 1 134 5 is_stmt 1 view .LVU231
 791              	.L56:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 792              		.loc 1 136 3 view .LVU232
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 793              		.loc 1 136 6 is_stmt 0 view .LVU233
 794 0016 092B     		cmp	r3, #9
 795 0018 03D0     		beq	.L54
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 796              		.loc 1 136 23 discriminator 1 view .LVU234
 797 001a 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 798              		.loc 1 136 43 is_stmt 1 discriminator 1 view .LVU235
ARM GAS  /tmp/ccmw9yhH.s 			page 29


 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 799              		.loc 1 136 53 is_stmt 0 discriminator 1 view .LVU236
 800 001c 1CBF     		itt	ne
 801 001e 044A     		ldrne	r2, .L66+4
 802 0020 1370     		strbne	r3, [r2]
 803              	.L54:
 138:src/menu.c    **** 
 804              		.loc 1 138 1 view .LVU237
 805 0022 7047     		bx	lr
 806              	.L65:
 128:src/menu.c    ****   }
 807              		.loc 1 128 5 is_stmt 1 view .LVU238
 128:src/menu.c    ****   }
 808              		.loc 1 128 18 is_stmt 0 view .LVU239
 809 0024 0349     		ldr	r1, .L66+8
 810 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 811 0028 1170     		strb	r1, [r2]
 812 002a F4E7     		b	.L56
 813              	.L67:
 814              		.align	2
 815              	.L66:
 816 002c 00000000 		.word	.LANCHOR1
 817 0030 00000000 		.word	.LANCHOR3
 818 0034 00000000 		.word	.LANCHOR2
 819              		.cfi_endproc
 820              	.LFE6:
 822              		.section	.text.set_default_menu,"ax",%progbits
 823              		.align	1
 824              		.p2align 2,,3
 825              		.global	set_default_menu
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu fpv4-sp-d16
 831              	set_default_menu:
 832              	.LFB7:
 140:src/menu.c    ****   set_menu (default_menu);
 833              		.loc 1 140 26 is_stmt 1 view -0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 141:src/menu.c    **** }
 838              		.loc 1 141 3 view .LVU241
 839 0000 0A4B     		ldr	r3, .L80
 840              	.LBB61:
 841              	.LBB62:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 842              		.loc 1 126 13 is_stmt 0 view .LVU242
 843 0002 0B49     		ldr	r1, .L80+4
 844              	.LBE62:
 845              	.LBE61:
 141:src/menu.c    **** }
 846              		.loc 1 141 3 view .LVU243
 847 0004 93F90020 		ldrsb	r2, [r3]
 848              	.LVL61:
 849              	.LBB65:
ARM GAS  /tmp/ccmw9yhH.s 			page 30


 850              	.LBI61:
 125:src/menu.c    ****   menu_name m = current_menu;
 851              		.loc 1 125 6 is_stmt 1 view .LVU244
 852              	.LBB63:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 126 3 view .LVU245
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 854              		.loc 1 126 13 is_stmt 0 view .LVU246
 855 0008 91F90030 		ldrsb	r3, [r1]
 856              	.LVL62:
 127:src/menu.c    ****     current_menu = default_menu;
 857              		.loc 1 127 3 is_stmt 1 view .LVU247
 127:src/menu.c    ****     current_menu = default_menu;
 858              		.loc 1 127 6 is_stmt 0 view .LVU248
 859 000c 9A42     		cmp	r2, r3
 860 000e 0BD0     		beq	.L79
 130:src/menu.c    ****     current_menu = last_menu;
 861              		.loc 1 130 8 is_stmt 1 view .LVU249
 130:src/menu.c    ****     current_menu = last_menu;
 862              		.loc 1 130 11 is_stmt 0 view .LVU250
 863 0010 501C     		adds	r0, r2, #1
 131:src/menu.c    ****   }
 864              		.loc 1 131 5 is_stmt 1 view .LVU251
 131:src/menu.c    ****   }
 865              		.loc 1 131 18 is_stmt 0 view .LVU252
 866 0012 04BF     		itt	eq
 867 0014 074A     		ldreq	r2, .L80+8
 868              	.LVL63:
 131:src/menu.c    ****   }
 869              		.loc 1 131 18 view .LVU253
 870 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 134:src/menu.c    ****   }
 871              		.loc 1 134 5 is_stmt 1 view .LVU254
 134:src/menu.c    ****   }
 872              		.loc 1 134 18 is_stmt 0 view .LVU255
 873 0018 0A70     		strb	r2, [r1]
 874              	.LVL64:
 875              	.L70:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 876              		.loc 1 136 3 is_stmt 1 view .LVU256
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 877              		.loc 1 136 6 is_stmt 0 view .LVU257
 878 001a 092B     		cmp	r3, #9
 879 001c 03D0     		beq	.L68
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 880              		.loc 1 136 23 view .LVU258
 881 001e 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 882              		.loc 1 136 43 is_stmt 1 view .LVU259
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 883              		.loc 1 136 53 is_stmt 0 view .LVU260
 884 0020 1CBF     		itt	ne
 885 0022 044A     		ldrne	r2, .L80+8
 886 0024 1370     		strbne	r3, [r2]
 887              	.LVL65:
 888              	.L68:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccmw9yhH.s 			page 31


 889              		.loc 1 136 53 view .LVU261
 890              	.LBE63:
 891              	.LBE65:
 142:src/menu.c    **** 
 892              		.loc 1 142 1 view .LVU262
 893 0026 7047     		bx	lr
 894              	.LVL66:
 895              	.L79:
 896              	.LBB66:
 897              	.LBB64:
 128:src/menu.c    ****   }
 898              		.loc 1 128 5 is_stmt 1 view .LVU263
 128:src/menu.c    ****   }
 899              		.loc 1 128 18 is_stmt 0 view .LVU264
 900 0028 0B70     		strb	r3, [r1]
 901 002a F6E7     		b	.L70
 902              	.L81:
 903              		.align	2
 904              	.L80:
 905 002c 00000000 		.word	.LANCHOR2
 906 0030 00000000 		.word	.LANCHOR1
 907 0034 00000000 		.word	.LANCHOR3
 908              	.LBE64:
 909              	.LBE66:
 910              		.cfi_endproc
 911              	.LFE7:
 913              		.section	.text.toggle_default_menu,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	toggle_default_menu
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	toggle_default_menu:
 923              	.LFB8:
 144:src/menu.c    ****   if (current_menu == M_Blank) {
 924              		.loc 1 144 29 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 929              		.loc 1 145 3 view .LVU266
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 930              		.loc 1 145 20 is_stmt 0 view .LVU267
 931 0000 104A     		ldr	r2, .L98
 146:src/menu.c    ****     return;
 932              		.loc 1 146 33 view .LVU268
 933 0002 1149     		ldr	r1, .L98+4
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 934              		.loc 1 145 20 view .LVU269
 935 0004 92F90030 		ldrsb	r3, [r2]
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 936              		.loc 1 145 6 view .LVU270
 937 0008 ABB1     		cbz	r3, .L95
 149:src/menu.c    ****     current_menu = default_menu = M_Blank; 
ARM GAS  /tmp/ccmw9yhH.s 			page 32


 938              		.loc 1 149 8 is_stmt 1 view .LVU271
 149:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 939              		.loc 1 149 11 is_stmt 0 view .LVU272
 940 000a 0F2B     		cmp	r3, #15
 941 000c 0FD0     		beq	.L96
 153:src/menu.c    ****   }
 942              		.loc 1 153 5 is_stmt 1 view .LVU273
 943              	.LBB67:
 944              	.LBI67:
 140:src/menu.c    ****   set_menu (default_menu);
 945              		.loc 1 140 6 view .LVU274
 946              	.LBB68:
 141:src/menu.c    **** }
 947              		.loc 1 141 3 view .LVU275
 948 000e 91F90010 		ldrsb	r1, [r1]
 949              	.LVL67:
 950              	.LBB69:
 951              	.LBI69:
 125:src/menu.c    ****   menu_name m = current_menu;
 952              		.loc 1 125 6 view .LVU276
 953              	.LBB70:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 954              		.loc 1 126 3 view .LVU277
 127:src/menu.c    ****     current_menu = default_menu;
 955              		.loc 1 127 3 view .LVU278
 127:src/menu.c    ****     current_menu = default_menu;
 956              		.loc 1 127 6 is_stmt 0 view .LVU279
 957 0012 8B42     		cmp	r3, r1
 958 0014 13D0     		beq	.L97
 130:src/menu.c    ****     current_menu = last_menu;
 959              		.loc 1 130 8 is_stmt 1 view .LVU280
 130:src/menu.c    ****     current_menu = last_menu;
 960              		.loc 1 130 11 is_stmt 0 view .LVU281
 961 0016 481C     		adds	r0, r1, #1
 131:src/menu.c    ****   }
 962              		.loc 1 131 5 is_stmt 1 view .LVU282
 131:src/menu.c    ****   }
 963              		.loc 1 131 18 is_stmt 0 view .LVU283
 964 0018 04BF     		itt	eq
 965 001a 0C49     		ldreq	r1, .L98+8
 966              	.LVL68:
 131:src/menu.c    ****   }
 967              		.loc 1 131 18 view .LVU284
 968 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 134:src/menu.c    ****   }
 969              		.loc 1 134 5 is_stmt 1 view .LVU285
 134:src/menu.c    ****   }
 970              		.loc 1 134 18 is_stmt 0 view .LVU286
 971 001e 1170     		strb	r1, [r2]
 972              	.LVL69:
 973              	.L87:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 974              		.loc 1 136 3 is_stmt 1 view .LVU287
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 975              		.loc 1 136 6 is_stmt 0 view .LVU288
 976 0020 092B     		cmp	r3, #9
 977 0022 03D0     		beq	.L82
ARM GAS  /tmp/ccmw9yhH.s 			page 33


 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 978              		.loc 1 136 23 view .LVU289
 979 0024 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 980              		.loc 1 136 43 is_stmt 1 view .LVU290
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 981              		.loc 1 136 53 is_stmt 0 view .LVU291
 982 0026 1CBF     		itt	ne
 983 0028 084A     		ldrne	r2, .L98+8
 984 002a 1370     		strbne	r3, [r2]
 985              	.LVL70:
 986              	.L82:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 987              		.loc 1 136 53 view .LVU292
 988              	.LBE70:
 989              	.LBE69:
 990              	.LBE68:
 991              	.LBE67:
 155:src/menu.c    **** 
 992              		.loc 1 155 1 view .LVU293
 993 002c 7047     		bx	lr
 994              	.L96:
 150:src/menu.c    ****   }
 995              		.loc 1 150 5 is_stmt 1 view .LVU294
 150:src/menu.c    ****   }
 996              		.loc 1 150 33 is_stmt 0 view .LVU295
 997 002e 0023     		movs	r3, #0
 998 0030 0B70     		strb	r3, [r1]
 150:src/menu.c    ****   }
 999              		.loc 1 150 18 view .LVU296
 1000 0032 1370     		strb	r3, [r2]
 1001 0034 7047     		bx	lr
 1002              	.L95:
 146:src/menu.c    ****     return;
 1003              		.loc 1 146 5 is_stmt 1 view .LVU297
 146:src/menu.c    ****     return;
 1004              		.loc 1 146 33 is_stmt 0 view .LVU298
 1005 0036 0F23     		movs	r3, #15
 1006 0038 0B70     		strb	r3, [r1]
 146:src/menu.c    ****     return;
 1007              		.loc 1 146 18 view .LVU299
 1008 003a 1370     		strb	r3, [r2]
 147:src/menu.c    ****   }
 1009              		.loc 1 147 5 is_stmt 1 view .LVU300
 1010 003c 7047     		bx	lr
 1011              	.LVL71:
 1012              	.L97:
 1013              	.LBB74:
 1014              	.LBB73:
 1015              	.LBB72:
 1016              	.LBB71:
 128:src/menu.c    ****   }
 1017              		.loc 1 128 5 view .LVU301
 128:src/menu.c    ****   }
 1018              		.loc 1 128 18 is_stmt 0 view .LVU302
 1019 003e 1370     		strb	r3, [r2]
 1020 0040 EEE7     		b	.L87
ARM GAS  /tmp/ccmw9yhH.s 			page 34


 1021              	.L99:
 1022 0042 00BF     		.align	2
 1023              	.L98:
 1024 0044 00000000 		.word	.LANCHOR1
 1025 0048 00000000 		.word	.LANCHOR2
 1026 004c 00000000 		.word	.LANCHOR3
 1027              	.LBE71:
 1028              	.LBE72:
 1029              	.LBE73:
 1030              	.LBE74:
 1031              		.cfi_endproc
 1032              	.LFE8:
 1034              		.section	.text.get_menu,"ax",%progbits
 1035              		.align	1
 1036              		.p2align 2,,3
 1037              		.global	get_menu
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv4-sp-d16
 1043              	get_menu:
 1044              	.LFB9:
 157:src/menu.c    ****   return current_menu;
 1045              		.loc 1 157 23 is_stmt 1 view -0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              		@ link register save eliminated.
 158:src/menu.c    **** }
 1050              		.loc 1 158 3 view .LVU304
 158:src/menu.c    **** }
 1051              		.loc 1 158 10 is_stmt 0 view .LVU305
 1052 0000 014B     		ldr	r3, .L101
 159:src/menu.c    **** 
 1053              		.loc 1 159 1 view .LVU306
 1054 0002 93F90000 		ldrsb	r0, [r3]
 1055 0006 7047     		bx	lr
 1056              	.L102:
 1057              		.align	2
 1058              	.L101:
 1059 0008 00000000 		.word	.LANCHOR1
 1060              		.cfi_endproc
 1061              	.LFE9:
 1063              		.section	.text.get_last_menu,"ax",%progbits
 1064              		.align	1
 1065              		.p2align 2,,3
 1066              		.global	get_last_menu
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1070              		.fpu fpv4-sp-d16
 1072              	get_last_menu:
 1073              	.LFB10:
 161:src/menu.c    ****   return last_menu;
 1074              		.loc 1 161 28 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccmw9yhH.s 			page 35


 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 162:src/menu.c    **** }
 1079              		.loc 1 162 3 view .LVU308
 162:src/menu.c    **** }
 1080              		.loc 1 162 10 is_stmt 0 view .LVU309
 1081 0000 014B     		ldr	r3, .L104
 163:src/menu.c    **** 
 1082              		.loc 1 163 1 view .LVU310
 1083 0002 93F90000 		ldrsb	r0, [r3]
 1084 0006 7047     		bx	lr
 1085              	.L105:
 1086              		.align	2
 1087              	.L104:
 1088 0008 00000000 		.word	.LANCHOR3
 1089              		.cfi_endproc
 1090              	.LFE10:
 1092              		.section	.text.set_last_menu,"ax",%progbits
 1093              		.align	1
 1094              		.p2align 2,,3
 1095              		.global	set_last_menu
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu fpv4-sp-d16
 1101              	set_last_menu:
 1102              	.LFB12:
 169:src/menu.c    ****   set_menu (M_Last);
 1103              		.loc 1 169 23 is_stmt 1 view -0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              		@ link register save eliminated.
 170:src/menu.c    **** }
 1108              		.loc 1 170 3 view .LVU312
 1109              	.LVL72:
 1110              	.LBB75:
 1111              	.LBI75:
 125:src/menu.c    ****   menu_name m = current_menu;
 1112              		.loc 1 125 6 view .LVU313
 1113              	.LBB76:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1114              		.loc 1 126 3 view .LVU314
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1115              		.loc 1 126 13 is_stmt 0 view .LVU315
 1116 0000 0A4A     		ldr	r2, .L119
 1117 0002 92F90030 		ldrsb	r3, [r2]
 1118              	.LVL73:
 127:src/menu.c    ****     current_menu = default_menu;
 1119              		.loc 1 127 3 is_stmt 1 view .LVU316
 127:src/menu.c    ****     current_menu = default_menu;
 1120              		.loc 1 127 6 is_stmt 0 view .LVU317
 1121 0006 591C     		adds	r1, r3, #1
 1122 0008 09D0     		beq	.L116
 130:src/menu.c    ****     current_menu = last_menu;
 1123              		.loc 1 130 8 is_stmt 1 view .LVU318
 131:src/menu.c    ****   }
ARM GAS  /tmp/ccmw9yhH.s 			page 36


 1124              		.loc 1 131 5 view .LVU319
 131:src/menu.c    ****   }
 1125              		.loc 1 131 18 is_stmt 0 view .LVU320
 1126 000a 0949     		ldr	r1, .L119+4
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1127              		.loc 1 136 6 view .LVU321
 1128 000c 092B     		cmp	r3, #9
 131:src/menu.c    ****   }
 1129              		.loc 1 131 18 view .LVU322
 1130 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1131 0010 1070     		strb	r0, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1132              		.loc 1 136 3 is_stmt 1 view .LVU323
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1133              		.loc 1 136 6 is_stmt 0 view .LVU324
 1134 0012 00D1     		bne	.L117
 1135              	.L106:
 1136              	.LBE76:
 1137              	.LBE75:
 171:src/menu.c    **** 
 1138              		.loc 1 171 1 view .LVU325
 1139 0014 7047     		bx	lr
 1140              	.L117:
 1141              	.LBB79:
 1142              	.LBB77:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1143              		.loc 1 136 23 view .LVU326
 1144 0016 102B     		cmp	r3, #16
 1145 0018 FCD0     		beq	.L106
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1146              		.loc 1 136 43 is_stmt 1 view .LVU327
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1147              		.loc 1 136 53 is_stmt 0 view .LVU328
 1148 001a 0B70     		strb	r3, [r1]
 1149              	.LVL74:
 1150              	.L118:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1151              		.loc 1 136 53 view .LVU329
 1152              	.LBE77:
 1153              	.LBE79:
 171:src/menu.c    **** 
 1154              		.loc 1 171 1 view .LVU330
 1155 001c 7047     		bx	lr
 1156              	.LVL75:
 1157              	.L116:
 1158              	.LBB80:
 1159              	.LBB78:
 128:src/menu.c    ****   }
 1160              		.loc 1 128 5 is_stmt 1 view .LVU331
 128:src/menu.c    ****   }
 1161              		.loc 1 128 18 is_stmt 0 view .LVU332
 1162 001e 0548     		ldr	r0, .L119+8
 1163 0020 0349     		ldr	r1, .L119+4
 1164 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1165 0024 1070     		strb	r0, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1166              		.loc 1 136 3 is_stmt 1 view .LVU333
ARM GAS  /tmp/ccmw9yhH.s 			page 37


 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1167              		.loc 1 136 43 view .LVU334
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1168              		.loc 1 136 53 is_stmt 0 view .LVU335
 1169 0026 0B70     		strb	r3, [r1]
 1170              	.LVL76:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1171              		.loc 1 136 53 view .LVU336
 1172 0028 F8E7     		b	.L118
 1173              	.L120:
 1174 002a 00BF     		.align	2
 1175              	.L119:
 1176 002c 00000000 		.word	.LANCHOR1
 1177 0030 00000000 		.word	.LANCHOR3
 1178 0034 00000000 		.word	.LANCHOR2
 1179              	.LBE78:
 1180              	.LBE80:
 1181              		.cfi_endproc
 1182              	.LFE12:
 1184              		.section	.text.mdot,"ax",%progbits
 1185              		.align	1
 1186              		.p2align 2,,3
 1187              		.global	mdot
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	mdot:
 1194              	.LVL77:
 1195              	.LFB14:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1196              		.loc 1 573 40 is_stmt 1 view -0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 574:src/menu.c    ****   if (on) {
 1201              		.loc 1 574 3 view .LVU338
 574:src/menu.c    ****   if (on) {
 1202              		.loc 1 574 6 is_stmt 0 view .LVU339
 1203 0000 C728     		cmp	r0, #199
 1204 0002 1AD8     		bhi	.L125
 1205              	.LVL78:
 1206              	.LBB83:
 1207              	.LBI83:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1208              		.loc 1 573 6 is_stmt 1 view .LVU340
 1209              	.LBB84:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1210              		.loc 1 575 3 view .LVU341
 1211              	.LBE84:
 1212              	.LBE83:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1213              		.loc 1 573 40 is_stmt 0 view .LVU342
 1214 0004 10B4     		push	{r4}
 1215              		.cfi_def_cfa_offset 4
 1216              		.cfi_offset 4, -4
ARM GAS  /tmp/ccmw9yhH.s 			page 38


 1217              	.LBB87:
 1218              	.LBB85:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1219              		.loc 1 575 6 view .LVU343
 1220 0006 63B9     		cbnz	r3, .L128
 1221              		.loc 1 579 5 is_stmt 1 view .LVU344
 1222              		.loc 1 579 17 is_stmt 0 view .LVU345
 1223 0008 0C4B     		ldr	r3, .L129
 1224              	.LVL79:
 1225              		.loc 1 579 17 view .LVU346
 1226 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1227              	.LVL80:
 1228              		.loc 1 579 25 view .LVU347
 1229 000e 0124     		movs	r4, #1
 1230              		.loc 1 579 17 view .LVU348
 1231 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1232              		.loc 1 579 25 view .LVU349
 1233 0012 04FA01F1 		lsl	r1, r4, r1
 1234              	.LVL81:
 1235              		.loc 1 579 17 view .LVU350
 1236 0016 23EA0101 		bic	r1, r3, r1
 1237 001a 8154     		strb	r1, [r0, r2]
 1238              	.LVL82:
 1239              		.loc 1 579 17 view .LVU351
 1240              	.LBE85:
 1241              	.LBE87:
 580:src/menu.c    ****   }
 581:src/menu.c    **** }
 1242              		.loc 1 581 1 view .LVU352
 1243 001c 5DF8044B 		ldr	r4, [sp], #4
 1244              		.cfi_remember_state
 1245              		.cfi_restore 4
 1246              		.cfi_def_cfa_offset 0
 1247 0020 7047     		bx	lr
 1248              	.LVL83:
 1249              	.L128:
 1250              		.cfi_restore_state
 1251              	.LBB88:
 1252              	.LBB86:
 576:src/menu.c    ****   }
 1253              		.loc 1 576 5 is_stmt 1 view .LVU353
 576:src/menu.c    ****   }
 1254              		.loc 1 576 17 is_stmt 0 view .LVU354
 1255 0022 064B     		ldr	r3, .L129
 1256              	.LVL84:
 576:src/menu.c    ****   }
 1257              		.loc 1 576 17 view .LVU355
 1258 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1259              	.LVL85:
 576:src/menu.c    ****   }
 1260              		.loc 1 576 24 view .LVU356
 1261 0028 0124     		movs	r4, #1
 576:src/menu.c    ****   }
 1262              		.loc 1 576 17 view .LVU357
 1263 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 576:src/menu.c    ****   }
 1264              		.loc 1 576 24 view .LVU358
ARM GAS  /tmp/ccmw9yhH.s 			page 39


 1265 002c 04FA01F1 		lsl	r1, r4, r1
 1266              	.LVL86:
 576:src/menu.c    ****   }
 1267              		.loc 1 576 17 view .LVU359
 1268 0030 1943     		orrs	r1, r1, r3
 1269 0032 8154     		strb	r1, [r0, r2]
 1270              	.LBE86:
 1271              	.LBE88:
 1272              		.loc 1 581 1 view .LVU360
 1273 0034 5DF8044B 		ldr	r4, [sp], #4
 1274              		.cfi_restore 4
 1275              		.cfi_def_cfa_offset 0
 1276 0038 7047     		bx	lr
 1277              	.LVL87:
 1278              	.L125:
 1279              		.loc 1 581 1 view .LVU361
 1280 003a 7047     		bx	lr
 1281              	.L130:
 1282              		.align	2
 1283              	.L129:
 1284 003c 00000000 		.word	.LANCHOR0
 1285              		.cfi_endproc
 1286              	.LFE14:
 1288              		.section	.text.get_current_menu_ref,"ax",%progbits
 1289              		.align	1
 1290              		.p2align 2,,3
 1291              		.global	get_current_menu_ref
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu fpv4-sp-d16
 1297              	get_current_menu_ref:
 1298              	.LVL88:
 1299              	.LFB15:
 582:src/menu.c    **** 
 583:src/menu.c    **** struct _menu get_current_menu_ref() {
 1300              		.loc 1 583 37 is_stmt 1 view -0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 584:src/menu.c    ****   int i = current_menu;
 1304              		.loc 1 584 3 view .LVU363
 585:src/menu.c    ****   if (C_LOCKED)
 1305              		.loc 1 585 7 is_stmt 0 view .LVU364
 1306 0000 1E4A     		ldr	r2, .L151
 584:src/menu.c    ****   int i = current_menu;
 1307              		.loc 1 584 7 view .LVU365
 1308 0002 1F4B     		ldr	r3, .L151+4
 1309              		.loc 1 585 7 view .LVU366
 1310 0004 1268     		ldr	r2, [r2]
 583:src/menu.c    ****   int i = current_menu;
 1311              		.loc 1 583 37 view .LVU367
 1312 0006 10B5     		push	{r4, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 4, -8
 1315              		.cfi_offset 14, -4
 1316              		.loc 1 585 7 view .LVU368
ARM GAS  /tmp/ccmw9yhH.s 			page 40


 1317 0008 92F8E44F 		ldrb	r4, [r2, #4068]	@ zero_extendqisi2
 584:src/menu.c    ****   int i = current_menu;
 1318              		.loc 1 584 7 view .LVU369
 1319 000c 93F90010 		ldrsb	r1, [r3]
 1320              	.LVL89:
 1321              		.loc 1 585 3 is_stmt 1 view .LVU370
 583:src/menu.c    ****   int i = current_menu;
 1322              		.loc 1 583 37 is_stmt 0 view .LVU371
 1323 0010 0346     		mov	r3, r0
 1324              		.loc 1 585 6 view .LVU372
 1325 0012 6007     		lsls	r0, r4, #29
 1326              	.LVL90:
 1327              		.loc 1 585 6 view .LVU373
 1328 0014 1DD5     		bpl	.L132
 1329              		.loc 1 585 7 discriminator 1 view .LVU374
 1330 0016 92F8DE2F 		ldrb	r2, [r2, #4062]	@ zero_extendqisi2
 1331 001a 5207     		lsls	r2, r2, #29
 1332 001c 19D5     		bpl	.L132
 586:src/menu.c    ****     switch (current_menu) {
 1333              		.loc 1 586 5 is_stmt 1 view .LVU375
 1334 001e 4A1E     		subs	r2, r1, #1
 1335 0020 0E2A     		cmp	r2, #14
 1336 0022 16D8     		bhi	.L132
 1337 0024 DFE802F0 		tbb	[pc, r2]
 1338              	.L134:
 1339 0028 27       		.byte	(.L140-.L134)/2
 1340 0029 15       		.byte	(.L132-.L134)/2
 1341 002a 25       		.byte	(.L135-.L134)/2
 1342 002b 15       		.byte	(.L132-.L134)/2
 1343 002c 23       		.byte	(.L139-.L134)/2
 1344 002d 13       		.byte	(.L138-.L134)/2
 1345 002e 25       		.byte	(.L135-.L134)/2
 1346 002f 15       		.byte	(.L132-.L134)/2
 1347 0030 08       		.byte	(.L143-.L134)/2
 1348 0031 25       		.byte	(.L135-.L134)/2
 1349 0032 21       		.byte	(.L136-.L134)/2
 1350 0033 25       		.byte	(.L135-.L134)/2
 1351 0034 25       		.byte	(.L135-.L134)/2
 1352 0035 25       		.byte	(.L135-.L134)/2
 1353 0036 1F       		.byte	(.L133-.L134)/2
 1354 0037 00       		.p2align 1
 1355              	.L143:
 587:src/menu.c    ****     case (M_Clear):
 588:src/menu.c    ****       i = M_Clear_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Swap):
 591:src/menu.c    ****       i = M_Swap_C;
 592:src/menu.c    ****       break;
 593:src/menu.c    ****     case (M_Arrow):
 594:src/menu.c    ****       i = M_Arrow_C;
 1356              		.loc 1 594 9 is_stmt 0 view .LVU376
 1357 0038 1421     		movs	r1, #20
 1358              	.LVL91:
 1359              	.L137:
 595:src/menu.c    ****       break;
 596:src/menu.c    ****     case (M_Prob):
 597:src/menu.c    ****       i = M_Prob_C;
ARM GAS  /tmp/ccmw9yhH.s 			page 41


 598:src/menu.c    ****       break;
 599:src/menu.c    ****     case (M_Blank2):
 600:src/menu.c    ****       i = M_Blank2_C;
 601:src/menu.c    ****       break;
 602:src/menu.c    ****     case (M_Misc):
 603:src/menu.c    ****       i = M_Misc_C;
 604:src/menu.c    ****       break;
 605:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 606:src/menu.c    ****     case (M_Flags):// so don't display them.
 607:src/menu.c    ****     case (M_Stats):
 608:src/menu.c    ****     case (M_Setup2):
 609:src/menu.c    ****     case (M_Solve):
 610:src/menu.c    ****     case (M_Program):
 611:src/menu.c    ****       i = M_C_Lock;
 612:src/menu.c    ****     default:;
 613:src/menu.c    ****     }
 614:src/menu.c    ****   if (current_menu == M_User) {
 615:src/menu.c    ****     return UserMenu;
 616:src/menu.c    ****   }
 617:src/menu.c    ****   else {
 618:src/menu.c    ****     return Menus[i];
 1360              		.loc 1 618 5 is_stmt 1 view .LVU377
 1361              		.loc 1 618 17 is_stmt 0 view .LVU378
 1362 003a 1248     		ldr	r0, .L151+8
 1363 003c D022     		movs	r2, #208
 1364 003e 02FB0101 		mla	r1, r2, r1, r0
 1365              	.LVL92:
 1366              		.loc 1 618 17 view .LVU379
 1367 0042 1846     		mov	r0, r3
 1368 0044 FFF7FEFF 		bl	memcpy
 1369              	.LVL93:
 1370              		.loc 1 618 17 view .LVU380
 1371 0048 0346     		mov	r3, r0
 619:src/menu.c    ****   }
 620:src/menu.c    **** }
 1372              		.loc 1 620 1 view .LVU381
 1373 004a 1846     		mov	r0, r3
 1374 004c 10BD     		pop	{r4, pc}
 1375              	.LVL94:
 1376              	.L138:
 585:src/menu.c    ****     switch (current_menu) {
 1377              		.loc 1 585 7 view .LVU382
 1378 004e 1321     		movs	r1, #19
 1379              	.LVL95:
 585:src/menu.c    ****     switch (current_menu) {
 1380              		.loc 1 585 7 view .LVU383
 1381 0050 F3E7     		b	.L137
 1382              	.LVL96:
 1383              	.L132:
 612:src/menu.c    ****     }
 1384              		.loc 1 612 13 is_stmt 1 view .LVU384
 614:src/menu.c    ****     return UserMenu;
 1385              		.loc 1 614 3 view .LVU385
 614:src/menu.c    ****     return UserMenu;
 1386              		.loc 1 614 6 is_stmt 0 view .LVU386
 1387 0052 6329     		cmp	r1, #99
 1388 0054 F1D1     		bne	.L137
ARM GAS  /tmp/ccmw9yhH.s 			page 42


 615:src/menu.c    ****   }
 1389              		.loc 1 615 5 is_stmt 1 view .LVU387
 615:src/menu.c    ****   }
 1390              		.loc 1 615 12 is_stmt 0 view .LVU388
 1391 0056 0C49     		ldr	r1, .L151+12
 1392              	.LVL97:
 615:src/menu.c    ****   }
 1393              		.loc 1 615 12 view .LVU389
 1394 0058 D022     		movs	r2, #208
 1395 005a 1846     		mov	r0, r3
 1396 005c FFF7FEFF 		bl	memcpy
 1397              	.LVL98:
 615:src/menu.c    ****   }
 1398              		.loc 1 615 12 view .LVU390
 1399 0060 0346     		mov	r3, r0
 1400              		.loc 1 620 1 view .LVU391
 1401 0062 1846     		mov	r0, r3
 1402 0064 10BD     		pop	{r4, pc}
 1403              	.LVL99:
 1404              	.L133:
 600:src/menu.c    ****       break;
 1405              		.loc 1 600 7 is_stmt 1 view .LVU392
 601:src/menu.c    ****     case (M_Misc):
 1406              		.loc 1 601 7 view .LVU393
 600:src/menu.c    ****       break;
 1407              		.loc 1 600 9 is_stmt 0 view .LVU394
 1408 0066 1621     		movs	r1, #22
 601:src/menu.c    ****     case (M_Misc):
 1409              		.loc 1 601 7 view .LVU395
 1410 0068 E7E7     		b	.L137
 1411              	.LVL100:
 1412              	.L136:
 597:src/menu.c    ****       break;
 1413              		.loc 1 597 7 is_stmt 1 view .LVU396
 598:src/menu.c    ****     case (M_Blank2):
 1414              		.loc 1 598 7 view .LVU397
 597:src/menu.c    ****       break;
 1415              		.loc 1 597 9 is_stmt 0 view .LVU398
 1416 006a 1521     		movs	r1, #21
 598:src/menu.c    ****     case (M_Blank2):
 1417              		.loc 1 598 7 view .LVU399
 1418 006c E5E7     		b	.L137
 1419              	.LVL101:
 1420              	.L139:
 603:src/menu.c    ****       break;
 1421              		.loc 1 603 7 is_stmt 1 view .LVU400
 604:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1422              		.loc 1 604 7 view .LVU401
 603:src/menu.c    ****       break;
 1423              		.loc 1 603 9 is_stmt 0 view .LVU402
 1424 006e 1721     		movs	r1, #23
 604:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1425              		.loc 1 604 7 view .LVU403
 1426 0070 E3E7     		b	.L137
 1427              	.LVL102:
 1428              	.L135:
 611:src/menu.c    ****     default:;
ARM GAS  /tmp/ccmw9yhH.s 			page 43


 1429              		.loc 1 611 7 is_stmt 1 view .LVU404
 611:src/menu.c    ****     default:;
 1430              		.loc 1 611 9 is_stmt 0 view .LVU405
 1431 0072 1121     		movs	r1, #17
 1432 0074 E1E7     		b	.L137
 1433              	.LVL103:
 1434              	.L140:
 588:src/menu.c    ****       break;
 1435              		.loc 1 588 9 view .LVU406
 1436 0076 1221     		movs	r1, #18
 1437              	.LVL104:
 588:src/menu.c    ****       break;
 1438              		.loc 1 588 9 view .LVU407
 1439 0078 DFE7     		b	.L137
 1440              	.L152:
 1441 007a 00BF     		.align	2
 1442              	.L151:
 1443 007c 00000000 		.word	main_ram
 1444 0080 00000000 		.word	.LANCHOR1
 1445 0084 00000000 		.word	Menus
 1446 0088 00000000 		.word	.LANCHOR4
 1447              		.cfi_endproc
 1448              	.LFE15:
 1450              		.section	.text.display_menu,"ax",%progbits
 1451              		.align	1
 1452              		.p2align 2,,3
 1453              		.global	display_menu
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	display_menu:
 1460              	.LFB16:
 621:src/menu.c    **** 
 622:src/menu.c    **** void display_menu (struct _menu Ref) {
 1461              		.loc 1 622 38 is_stmt 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 208, pretend = 16, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 623:src/menu.c    ****   int len = 0;
 1465              		.loc 1 623 3 view .LVU409
 1466              	.LVL105:
 624:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1467              		.loc 1 624 3 view .LVU410
 622:src/menu.c    ****   int len = 0;
 1468              		.loc 1 622 38 is_stmt 0 view .LVU411
 1469 0000 84B0     		sub	sp, sp, #16
 1470              		.cfi_def_cfa_offset 16
 1471 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1472              		.cfi_def_cfa_offset 52
 1473              		.cfi_offset 4, -52
 1474              		.cfi_offset 5, -48
 1475              		.cfi_offset 6, -44
 1476              		.cfi_offset 7, -40
 1477              		.cfi_offset 8, -36
 1478              		.cfi_offset 9, -32
 1479              		.cfi_offset 10, -28
ARM GAS  /tmp/ccmw9yhH.s 			page 44


 1480              		.cfi_offset 11, -24
 1481              		.cfi_offset 14, -20
 1482 0006 83B0     		sub	sp, sp, #12
 1483              		.cfi_def_cfa_offset 64
 1484              		.loc 1 624 3 view .LVU412
 1485 0008 0024     		movs	r4, #0
 622:src/menu.c    ****   int len = 0;
 1486              		.loc 1 622 38 view .LVU413
 1487 000a 0CAD     		add	r5, sp, #48
 1488 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1489              		.loc 1 624 3 view .LVU414
 1490 0010 3E4E     		ldr	r6, .L171
 1491 0012 0094     		str	r4, [sp]
 1492 0014 2046     		mov	r0, r4
 1493 0016 3423     		movs	r3, #52
 1494 0018 4FF4C872 		mov	r2, #400
 1495 001c BC21     		movs	r1, #188
 1496 001e B047     		blx	r6
 1497              	.LVL106:
 625:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1498              		.loc 1 625 3 is_stmt 1 view .LVU415
 1499 0020 3B4D     		ldr	r5, .L171+4
 1500 0022 FF23     		movs	r3, #255
 1501 0024 0093     		str	r3, [sp]
 1502 0026 4FF4C872 		mov	r2, #400
 1503 002a 0123     		movs	r3, #1
 1504 002c BC21     		movs	r1, #188
 1505 002e 2046     		mov	r0, r4
 1506 0030 B047     		blx	r6
 1507              	.LVL107:
 626:src/menu.c    ****   //Clear previous menu
 627:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1508              		.loc 1 627 3 view .LVU416
 1509              	.LBB89:
 1510              		.loc 1 627 8 view .LVU417
 1511              		.loc 1 627 21 view .LVU418
 628:src/menu.c    ****     mdots[col][0] = 0;
 1512              		.loc 1 628 19 is_stmt 0 view .LVU419
 1513 0032 2246     		mov	r2, r4
 1514 0034 05F5C871 		add	r1, r5, #400
 1515              	.LBE89:
 625:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1516              		.loc 1 625 3 view .LVU420
 1517 0038 2B46     		mov	r3, r5
 1518              	.LVL108:
 1519              	.L154:
 1520              	.LBB90:
 1521              		.loc 1 628 5 is_stmt 1 discriminator 3 view .LVU421
 1522              		.loc 1 628 19 is_stmt 0 discriminator 3 view .LVU422
 1523 003a 1A70     		strb	r2, [r3]
 629:src/menu.c    ****     mdots[col][1] = 0;
 1524              		.loc 1 629 5 is_stmt 1 discriminator 3 view .LVU423
 1525              		.loc 1 629 19 is_stmt 0 discriminator 3 view .LVU424
 1526 003c 5A70     		strb	r2, [r3, #1]
 627:src/menu.c    ****     mdots[col][0] = 0;
 1527              		.loc 1 627 32 is_stmt 1 discriminator 3 view .LVU425
 627:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccmw9yhH.s 			page 45


 1528              		.loc 1 627 21 discriminator 3 view .LVU426
 1529 003e 0233     		adds	r3, r3, #2
 627:src/menu.c    ****     mdots[col][0] = 0;
 1530              		.loc 1 627 3 is_stmt 0 discriminator 3 view .LVU427
 1531 0040 9942     		cmp	r1, r3
 1532 0042 FAD1     		bne	.L154
 1533 0044 14AE     		add	r6, sp, #80
 627:src/menu.c    ****     mdots[col][0] = 0;
 1534              		.loc 1 627 3 view .LVU428
 1535 0046 0024     		movs	r4, #0
 1536              	.LVL109:
 1537              	.L155:
 627:src/menu.c    ****     mdots[col][0] = 0;
 1538              		.loc 1 627 3 view .LVU429
 1539              	.LBE90:
 1540              	.LBB91:
 630:src/menu.c    ****   }
 631:src/menu.c    **** 
 632:src/menu.c    ****   // Draw menu items
 633:src/menu.c    ****   // 
 634:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 635:src/menu.c    ****     /*
 636:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 637:src/menu.c    ****     */
 638:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 639:src/menu.c    ****     // Unshifted first
 640:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1541              		.loc 1 640 7 is_stmt 1 view .LVU430
 1542              		.loc 1 640 13 is_stmt 0 view .LVU431
 1543 0048 0021     		movs	r1, #0
 1544 004a 3046     		mov	r0, r6
 1545 004c FFF7FEFF 		bl	pixel_length
 1546              	.LVL110:
 641:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1547              		.loc 1 641 7 is_stmt 1 view .LVU432
 1548              		.loc 1 641 73 is_stmt 0 view .LVU433
 1549 0050 C0F12000 		rsb	r0, r0, #32
 1550              	.LVL111:
 1551              		.loc 1 641 79 view .LVU434
 1552 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1553              		.loc 1 641 7 view .LVU435
 1554 0058 04EB6001 		add	r1, r4, r0, asr #1
 1555 005c 0022     		movs	r2, #0
 1556 005e 3046     		mov	r0, r6
 1557 0060 06F10807 		add	r7, r6, #8
 1558 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1559              	.LVL112:
 642:src/menu.c    ****       // Now shifted ...	
 643:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1560              		.loc 1 643 7 is_stmt 1 view .LVU436
 1561              		.loc 1 643 13 is_stmt 0 view .LVU437
 1562 0068 0021     		movs	r1, #0
 1563 006a 3846     		mov	r0, r7
 1564 006c FFF7FEFF 		bl	pixel_length
 1565              	.LVL113:
 644:src/menu.c    ****       len = item*32 + (32-len)/2;
 1566              		.loc 1 644 7 is_stmt 1 view .LVU438
ARM GAS  /tmp/ccmw9yhH.s 			page 46


 1567              		.loc 1 644 26 is_stmt 0 view .LVU439
 1568 0070 C0F12000 		rsb	r0, r0, #32
 1569              	.LVL114:
 1570              		.loc 1 644 31 view .LVU440
 1571 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1572              	.LVL115:
 645:src/menu.c    ****       if (len<0) len = 0;
 1573              		.loc 1 645 7 is_stmt 1 view .LVU441
 644:src/menu.c    ****       len = item*32 + (32-len)/2;
 1574              		.loc 1 644 11 is_stmt 0 view .LVU442
 1575 0078 04EB6001 		add	r1, r4, r0, asr #1
 1576              	.LVL116:
 644:src/menu.c    ****       len = item*32 + (32-len)/2;
 1577              		.loc 1 644 11 view .LVU443
 1578 007c C729     		cmp	r1, #199
 1579 007e A8BF     		it	ge
 1580 0080 C721     		movge	r1, #199
 1581              	.LVL117:
 646:src/menu.c    ****       if (len>199) len = 199;
 647:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1582              		.loc 1 647 7 is_stmt 1 view .LVU444
 1583 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1584              	.LVL118:
 1585              		.loc 1 647 7 is_stmt 0 view .LVU445
 1586 0086 3846     		mov	r0, r7
 1587 0088 2034     		adds	r4, r4, #32
 1588 008a 0122     		movs	r2, #1
 1589 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1590              	.LVL119:
 634:src/menu.c    ****     /*
 1591              		.loc 1 634 32 is_stmt 1 view .LVU446
 634:src/menu.c    ****     /*
 1592              		.loc 1 634 22 view .LVU447
 634:src/menu.c    ****     /*
 1593              		.loc 1 634 3 is_stmt 0 view .LVU448
 1594 0090 C02C     		cmp	r4, #192
 1595 0092 06F12006 		add	r6, r6, #32
 1596 0096 D7D1     		bne	.L155
 1597 0098 1E4E     		ldr	r6, .L171+8
 1598              	.LBE91:
 1599              	.LBB92:
 1600              	.LBB93:
 648:src/menu.c    ****   }
 649:src/menu.c    **** 
 650:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 651:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 652:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 653:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 654:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1601              		.loc 1 654 2 view .LVU449
 1602 009a DFF87090 		ldr	r9, .L171
 1603 009e C5F1040A 		rsb	r10, r5, #4
 1604 00a2 06F5C47B 		add	fp, r6, #392
 1605              	.LBE93:
 1606              	.LBE92:
 1607              	.LBB95:
 634:src/menu.c    ****     /*
ARM GAS  /tmp/ccmw9yhH.s 			page 47


 1608              		.loc 1 634 3 view .LVU450
 1609 00a6 771E     		subs	r7, r6, #1
 1610              	.LBE95:
 1611              	.LBB96:
 1612              	.LBB94:
 1613              		.loc 1 654 2 view .LVU451
 1614 00a8 4FF0FF08 		mov	r8, #255
 1615              	.L156:
 1616              	.LVL120:
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1617              		.loc 1 651 23 is_stmt 1 view .LVU452
 1618 00ac 0AEB0705 		add	r5, r10, r7
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1619              		.loc 1 651 14 is_stmt 0 view .LVU453
 1620 00b0 0024     		movs	r4, #0
 1621              	.LVL121:
 1622              	.L159:
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1623              		.loc 1 652 7 is_stmt 1 view .LVU454
 1624              		.loc 1 654 2 view .LVU455
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1625              		.loc 1 652 22 is_stmt 0 view .LVU456
 1626 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1627              		.loc 1 652 40 view .LVU457
 1628 00b6 2241     		asrs	r2, r2, r4
 1629              		.loc 1 654 2 view .LVU458
 1630 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1631 00bc 0323     		movs	r3, #3
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1632              		.loc 1 652 10 view .LVU459
 1633 00be 12F0010F 		tst	r2, #1
 1634              		.loc 1 654 2 view .LVU460
 1635 00c2 01F1E901 		add	r1, r1, #233
 1636 00c6 1A46     		mov	r2, r3
 1637 00c8 2846     		mov	r0, r5
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1638              		.loc 1 652 10 view .LVU461
 1639 00ca 02D0     		beq	.L157
 1640              		.loc 1 654 2 view .LVU462
 1641 00cc CDF80080 		str	r8, [sp]
 1642 00d0 C847     		blx	r9
 1643              	.LVL122:
 1644              	.L157:
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1645              		.loc 1 655 7 is_stmt 1 view .LVU463
 656:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 657:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1646              		.loc 1 657 2 view .LVU464
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1647              		.loc 1 655 22 is_stmt 0 view .LVU465
 1648 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1649              		.loc 1 655 40 view .LVU466
 1650 00d4 2241     		asrs	r2, r2, r4
 1651              		.loc 1 657 2 view .LVU467
 1652 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
ARM GAS  /tmp/ccmw9yhH.s 			page 48


 1653 00da 0323     		movs	r3, #3
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1654              		.loc 1 655 10 view .LVU468
 1655 00dc 12F0010F 		tst	r2, #1
 1656              		.loc 1 657 2 view .LVU469
 1657 00e0 01F1D001 		add	r1, r1, #208
 1658 00e4 1A46     		mov	r2, r3
 1659 00e6 04F10104 		add	r4, r4, #1
 1660              	.LVL123:
 1661              		.loc 1 657 2 view .LVU470
 1662 00ea 2846     		mov	r0, r5
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1663              		.loc 1 655 10 view .LVU471
 1664 00ec 02D0     		beq	.L158
 1665              		.loc 1 657 2 view .LVU472
 1666 00ee CDF80080 		str	r8, [sp]
 1667 00f2 C847     		blx	r9
 1668              	.LVL124:
 1669              	.L158:
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1670              		.loc 1 651 32 is_stmt 1 discriminator 2 view .LVU473
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1671              		.loc 1 651 23 discriminator 2 view .LVU474
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1672              		.loc 1 651 5 is_stmt 0 discriminator 2 view .LVU475
 1673 00f4 062C     		cmp	r4, #6
 1674 00f6 DCD1     		bne	.L159
 1675              	.LBE94:
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1676              		.loc 1 650 32 is_stmt 1 discriminator 2 view .LVU476
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1677              		.loc 1 650 21 discriminator 2 view .LVU477
 1678 00f8 0236     		adds	r6, r6, #2
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1679              		.loc 1 650 3 is_stmt 0 discriminator 2 view .LVU478
 1680 00fa B345     		cmp	fp, r6
 1681 00fc 07F10207 		add	r7, r7, #2
 1682 0100 D4D1     		bne	.L156
 1683              	.LBE96:
 658:src/menu.c    ****     }
 659:src/menu.c    ****   }
 660:src/menu.c    **** }
 1684              		.loc 1 660 1 view .LVU479
 1685 0102 03B0     		add	sp, sp, #12
 1686              		.cfi_def_cfa_offset 52
 1687              		@ sp needed
 1688 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1689              		.cfi_restore 14
 1690              		.cfi_restore 11
 1691              		.cfi_restore 10
 1692              		.cfi_restore 9
 1693              		.cfi_restore 8
 1694              		.cfi_restore 7
 1695              		.cfi_restore 6
 1696              		.cfi_restore 5
 1697              		.cfi_restore 4
 1698              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccmw9yhH.s 			page 49


 1699              	.LVL125:
 1700              		.loc 1 660 1 view .LVU480
 1701 0108 04B0     		add	sp, sp, #16
 1702              		.cfi_def_cfa_offset 0
 1703 010a 7047     		bx	lr
 1704              	.L172:
 1705              		.align	2
 1706              	.L171:
 1707 010c 3D020008 		.word	134218301
 1708 0110 00000000 		.word	.LANCHOR0
 1709 0114 01000000 		.word	.LANCHOR0+1
 1710              		.cfi_endproc
 1711              	.LFE16:
 1713              		.section	.text.display_current_menu,"ax",%progbits
 1714              		.align	1
 1715              		.p2align 2,,3
 1716              		.global	display_current_menu
 1717              		.syntax unified
 1718              		.thumb
 1719              		.thumb_func
 1720              		.fpu fpv4-sp-d16
 1722              	display_current_menu:
 1723              	.LFB11:
 165:src/menu.c    ****   display_menu (get_current_menu_ref());
 1724              		.loc 1 165 30 is_stmt 1 view -0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 208
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 166:src/menu.c    **** }
 1728              		.loc 1 166 3 view .LVU482
 165:src/menu.c    ****   display_menu (get_current_menu_ref());
 1729              		.loc 1 165 30 is_stmt 0 view .LVU483
 1730 0000 10B5     		push	{r4, lr}
 1731              		.cfi_def_cfa_offset 8
 1732              		.cfi_offset 4, -8
 1733              		.cfi_offset 14, -4
 1734 0002 E4B0     		sub	sp, sp, #400
 1735              		.cfi_def_cfa_offset 408
 166:src/menu.c    **** }
 1736              		.loc 1 166 3 view .LVU484
 1737 0004 30AC     		add	r4, sp, #192
 1738 0006 2046     		mov	r0, r4
 1739 0008 FFF7FEFF 		bl	get_current_menu_ref
 1740              	.LVL126:
 1741 000c 34A9     		add	r1, sp, #208
 1742 000e C022     		movs	r2, #192
 1743 0010 6846     		mov	r0, sp
 1744 0012 FFF7FEFF 		bl	memcpy
 1745              	.LVL127:
 1746 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1747 001a FFF7FEFF 		bl	display_menu
 1748              	.LVL128:
 167:src/menu.c    **** 
 1749              		.loc 1 167 1 view .LVU485
 1750 001e 64B0     		add	sp, sp, #400
 1751              		.cfi_def_cfa_offset 8
 1752              		@ sp needed
ARM GAS  /tmp/ccmw9yhH.s 			page 50


 1753 0020 10BD     		pop	{r4, pc}
 1754              		.cfi_endproc
 1755              	.LFE11:
 1757 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1758              		.align	1
 1759              		.p2align 2,,3
 1760              		.global	all_menu_dots
 1761              		.syntax unified
 1762              		.thumb
 1763              		.thumb_func
 1764              		.fpu fpv4-sp-d16
 1766              	all_menu_dots:
 1767              	.LFB17:
 661:src/menu.c    **** 
 662:src/menu.c    **** void all_menu_dots () {
 1768              		.loc 1 662 23 is_stmt 1 view -0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1772              		.loc 1 663 3 view .LVU487
 1773              	.LBB97:
 1774              		.loc 1 663 8 view .LVU488
 1775              	.LVL129:
 1776              		.loc 1 663 21 view .LVU489
 1777              	.LBE97:
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1778              		.loc 1 662 23 is_stmt 0 view .LVU490
 1779 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1780              		.cfi_def_cfa_offset 20
 1781              		.cfi_offset 4, -20
 1782              		.cfi_offset 5, -16
 1783              		.cfi_offset 6, -12
 1784              		.cfi_offset 7, -8
 1785              		.cfi_offset 14, -4
 1786              	.LBB101:
 1787              	.LBB98:
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 665:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1788              		.loc 1 665 2 view .LVU491
 1789 0002 0D4E     		ldr	r6, .L181
 1790              	.LBE98:
 1791              	.LBE101:
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1792              		.loc 1 662 23 view .LVU492
 1793 0004 83B0     		sub	sp, sp, #12
 1794              		.cfi_def_cfa_offset 32
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1795              		.loc 1 662 23 view .LVU493
 1796 0006 0025     		movs	r5, #0
 1797              	.LBB102:
 1798              	.LBB99:
 1799              		.loc 1 665 2 view .LVU494
 1800 0008 FF27     		movs	r7, #255
 1801              	.LVL130:
 1802              	.L176:
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
ARM GAS  /tmp/ccmw9yhH.s 			page 51


 1803              		.loc 1 664 23 is_stmt 1 view .LVU495
 1804              	.LBE99:
 1805              	.LBE102:
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1806              		.loc 1 662 23 is_stmt 0 view .LVU496
 1807 000a E924     		movs	r4, #233
 1808              	.LVL131:
 1809              	.L177:
 1810              	.LBB103:
 1811              	.LBB100:
 1812              		.loc 1 665 2 is_stmt 1 discriminator 3 view .LVU497
 1813 000c 0323     		movs	r3, #3
 1814 000e 1A46     		mov	r2, r3
 1815 0010 2146     		mov	r1, r4
 1816 0012 2846     		mov	r0, r5
 1817 0014 0097     		str	r7, [sp]
 1818 0016 B047     		blx	r6
 1819              	.LVL132:
 666:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1820              		.loc 1 666 2 discriminator 3 view .LVU498
 1821 0018 0323     		movs	r3, #3
 1822 001a A4F11901 		sub	r1, r4, #25
 1823 001e 0097     		str	r7, [sp]
 1824 0020 1A46     		mov	r2, r3
 1825 0022 2846     		mov	r0, r5
 1826 0024 033C     		subs	r4, r4, #3
 1827 0026 B047     		blx	r6
 1828              	.LVL133:
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1829              		.loc 1 664 32 discriminator 3 view .LVU499
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1830              		.loc 1 664 23 discriminator 3 view .LVU500
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1831              		.loc 1 664 5 is_stmt 0 discriminator 3 view .LVU501
 1832 0028 D72C     		cmp	r4, #215
 1833 002a EFD1     		bne	.L177
 1834              	.LBE100:
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1835              		.loc 1 663 32 is_stmt 1 discriminator 2 view .LVU502
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1836              		.loc 1 663 21 discriminator 2 view .LVU503
 1837 002c 0235     		adds	r5, r5, #2
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1838              		.loc 1 663 3 is_stmt 0 discriminator 2 view .LVU504
 1839 002e B5F5C87F 		cmp	r5, #400
 1840 0032 EAD1     		bne	.L176
 1841              	.LBE103:
 667:src/menu.c    ****     }
 668:src/menu.c    ****   }
 669:src/menu.c    **** }  
 1842              		.loc 1 669 1 view .LVU505
 1843 0034 03B0     		add	sp, sp, #12
 1844              		.cfi_def_cfa_offset 20
 1845              		@ sp needed
 1846 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1847              	.L182:
 1848              		.align	2
ARM GAS  /tmp/ccmw9yhH.s 			page 52


 1849              	.L181:
 1850 0038 3D020008 		.word	134218301
 1851              		.cfi_endproc
 1852              	.LFE17:
 1854              		.section	.text.umen_store,"ax",%progbits
 1855              		.align	1
 1856              		.p2align 2,,3
 1857              		.global	umen_store
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	umen_store:
 1864              	.LVL134:
 1865              	.LFB20:
 670:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 671:src/menu.c    **** 
 672:src/menu.c    **** void build_user_menu(void){
 673:src/menu.c    ****   // find the label 'MNU'
 674:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 675:src/menu.c    ****    build_user_menu_from_program (lbl);
 676:src/menu.c    **** }
 677:src/menu.c    **** 
 678:src/menu.c    **** void build_user_menu_from_program(int lbl)
 679:src/menu.c    **** {
 680:src/menu.c    ****   // find the label 'MNU'
 681:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 682:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 683:src/menu.c    ****   int i=0;
 684:src/menu.c    ****   s_opcode op;
 685:src/menu.c    ****   opcode opc;
 686:src/menu.c    ****   char buf1[16];
 687:src/menu.c    ****   char *p = buf1;
 688:src/menu.c    ****   char c;
 689:src/menu.c    ****   int finished = 0;
 690:src/menu.c    **** 
 691:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 692:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 694:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 695:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 696:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 697:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 698:src/menu.c    ****   }
 699:src/menu.c    ****   while (pc && i < 12) {
 700:src/menu.c    **** 
 701:src/menu.c    ****     pc = do_inc(pc, 0);
 702:src/menu.c    ****     opc = getprog(pc);
 703:src/menu.c    ****     op = (s_opcode) opc;
 704:src/menu.c    **** 
 705:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 706:src/menu.c    ****       break;
 707:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 708:src/menu.c    ****       if (i==4) {
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 711:src/menu.c    ****       }
ARM GAS  /tmp/ccmw9yhH.s 			page 53


 712:src/menu.c    ****       else if (i==5) {
 713:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 714:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 715:src/menu.c    ****       }
 716:src/menu.c    ****       i += 1;
 717:src/menu.c    ****       continue;
 718:src/menu.c    ****     }
 719:src/menu.c    **** 
 720:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 721:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 722:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 723:src/menu.c    **** 	i++;
 724:src/menu.c    ****     	p = buf1;
 725:src/menu.c    **** 	finished = 0;
 726:src/menu.c    ****       } // ..and start reading the new alpha
 727:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 728:src/menu.c    ****       c = (opc >> 16) & 0xff;
 729:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 730:src/menu.c    **** 	*p++ = c;
 731:src/menu.c    **** 	c = opc>>24;
 732:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 733:src/menu.c    **** 	  *p++ = c;
 734:src/menu.c    ****       }
 735:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 736:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 737:src/menu.c    **** 	finished = 1;
 738:src/menu.c    ****       }
 739:src/menu.c    ****     }
 740:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 741:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 742:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 743:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 744:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 745:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 746:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 747:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 748:src/menu.c    **** 	  }
 749:src/menu.c    **** 	  else {
 750:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 751:src/menu.c    **** 	  }
 752:src/menu.c    **** 	}
 753:src/menu.c    **** 	else {
 754:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 755:src/menu.c    **** 	}
 756:src/menu.c    ****       }
 757:src/menu.c    ****       else { // there is an alpha label to use, so reset
 758:src/menu.c    **** 	p = buf1;
 759:src/menu.c    **** 	finished = 0;
 760:src/menu.c    ****       }
 761:src/menu.c    ****       umen_store (i, opc, buf1);
 762:src/menu.c    ****       i++;
 763:src/menu.c    ****     }
 764:src/menu.c    ****   }
 765:src/menu.c    **** }
 766:src/menu.c    **** 
 767:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1866              		.loc 1 767 49 is_stmt 1 view -0
ARM GAS  /tmp/ccmw9yhH.s 			page 54


 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 0
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
 768:src/menu.c    **** #pragma GCC diagnostic push
 769:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 770:src/menu.c    ****     if (i<6) {
 1870              		.loc 1 770 5 view .LVU507
 1871              		.loc 1 770 8 is_stmt 0 view .LVU508
 1872 0000 0528     		cmp	r0, #5
 767:src/menu.c    **** #pragma GCC diagnostic push
 1873              		.loc 1 767 49 view .LVU509
 1874 0002 70B5     		push	{r4, r5, r6, lr}
 1875              		.cfi_def_cfa_offset 16
 1876              		.cfi_offset 4, -16
 1877              		.cfi_offset 5, -12
 1878              		.cfi_offset 6, -8
 1879              		.cfi_offset 14, -4
 767:src/menu.c    **** #pragma GCC diagnostic push
 1880              		.loc 1 767 49 view .LVU510
 1881 0004 0D46     		mov	r5, r1
 1882 0006 0446     		mov	r4, r0
 1883 0008 1146     		mov	r1, r2
 1884              	.LVL135:
 1885              		.loc 1 770 8 view .LVU511
 1886 000a 0FDC     		bgt	.L184
 1887              	.LBB109:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1888              		.loc 1 771 7 is_stmt 1 view .LVU512
 1889              		.loc 1 771 31 is_stmt 0 view .LVU513
 1890 000c 104E     		ldr	r6, .L187
 1891 000e 0130     		adds	r0, r0, #1
 1892              	.LVL136:
 772:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1893              		.loc 1 772 42 view .LVU514
 1894 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1895              	.LVL137:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1896              		.loc 1 771 7 view .LVU515
 1897 0014 0722     		movs	r2, #7
 1898              	.LVL138:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1899              		.loc 1 771 7 view .LVU516
 1900 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1901              	.LVL139:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1902              		.loc 1 771 7 view .LVU517
 1903 001a FFF7FEFF 		bl	strncpy
 1904              	.LVL140:
 1905              		.loc 1 772 7 is_stmt 1 view .LVU518
 1906              		.loc 1 772 42 is_stmt 0 view .LVU519
 1907 001e 0022     		movs	r2, #0
 773:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1908              		.loc 1 773 34 view .LVU520
 1909 0020 3423     		movs	r3, #52
 772:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1910              		.loc 1 772 42 view .LVU521
 1911 0022 84F82720 		strb	r2, [r4, #39]
ARM GAS  /tmp/ccmw9yhH.s 			page 55


 1912              		.loc 1 773 7 is_stmt 1 view .LVU522
 1913              		.loc 1 773 34 is_stmt 0 view .LVU523
 1914 0026 2374     		strb	r3, [r4, #16]
 1915 0028 6561     		str	r5, [r4, #20]
 1916              	.LBE109:
 774:src/menu.c    ****     }
 775:src/menu.c    ****     else {
 776:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 778:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 779:src/menu.c    ****     }
 780:src/menu.c    **** #pragma GCC diagnostic pop
 781:src/menu.c    **** }  
 1917              		.loc 1 781 1 view .LVU524
 1918 002a 70BD     		pop	{r4, r5, r6, pc}
 1919              	.LVL141:
 1920              	.L184:
 1921              	.LBB110:
 1922              	.LBI110:
 767:src/menu.c    **** #pragma GCC diagnostic push
 1923              		.loc 1 767 6 is_stmt 1 view .LVU525
 1924              	.LBB111:
 1925              	.LBB112:
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1926              		.loc 1 776 7 view .LVU526
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1927              		.loc 1 776 30 is_stmt 0 view .LVU527
 1928 002c 841F     		subs	r4, r0, #6
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1929              		.loc 1 776 33 view .LVU528
 1930 002e 084E     		ldr	r6, .L187
 1931 0030 6401     		lsls	r4, r4, #5
 1932 0032 04F12800 		add	r0, r4, #40
 1933              	.LVL142:
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1934              		.loc 1 776 7 view .LVU529
 1935 0036 0722     		movs	r2, #7
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1936              		.loc 1 777 42 view .LVU530
 1937 0038 3444     		add	r4, r4, r6
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1938              		.loc 1 776 7 view .LVU531
 1939 003a 3044     		add	r0, r0, r6
 1940 003c FFF7FEFF 		bl	strncpy
 1941              	.LVL143:
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1942              		.loc 1 777 7 is_stmt 1 view .LVU532
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1943              		.loc 1 777 42 is_stmt 0 view .LVU533
 1944 0040 0022     		movs	r2, #0
 778:src/menu.c    ****     }
 1945              		.loc 1 778 34 view .LVU534
 1946 0042 3423     		movs	r3, #52
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1947              		.loc 1 777 42 view .LVU535
 1948 0044 84F82F20 		strb	r2, [r4, #47]
 778:src/menu.c    ****     }
ARM GAS  /tmp/ccmw9yhH.s 			page 56


 1949              		.loc 1 778 7 is_stmt 1 view .LVU536
 1950              	.LVL144:
 778:src/menu.c    ****     }
 1951              		.loc 1 778 34 is_stmt 0 view .LVU537
 1952 0048 2376     		strb	r3, [r4, #24]
 1953 004a E561     		str	r5, [r4, #28]
 1954              	.LBE112:
 1955              	.LBE111:
 1956              	.LBE110:
 1957              		.loc 1 781 1 view .LVU538
 1958 004c 70BD     		pop	{r4, r5, r6, pc}
 1959              	.LVL145:
 1960              	.L188:
 1961              		.loc 1 781 1 view .LVU539
 1962 004e 00BF     		.align	2
 1963              	.L187:
 1964 0050 00000000 		.word	.LANCHOR4
 1965              		.cfi_endproc
 1966              	.LFE20:
 1968              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1969              		.align	1
 1970              		.p2align 2,,3
 1971              		.global	build_user_menu_from_program
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1975              		.fpu fpv4-sp-d16
 1977              	build_user_menu_from_program:
 1978              	.LVL146:
 1979              	.LFB19:
 679:src/menu.c    ****   // find the label 'MNU'
 1980              		.loc 1 679 1 is_stmt 1 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 16
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 682:src/menu.c    ****   int i=0;
 1984              		.loc 1 682 3 view .LVU541
 679:src/menu.c    ****   // find the label 'MNU'
 1985              		.loc 1 679 1 is_stmt 0 view .LVU542
 1986 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1987              		.cfi_def_cfa_offset 36
 1988              		.cfi_offset 4, -36
 1989              		.cfi_offset 5, -32
 1990              		.cfi_offset 6, -28
 1991              		.cfi_offset 7, -24
 1992              		.cfi_offset 8, -20
 1993              		.cfi_offset 9, -16
 1994              		.cfi_offset 10, -12
 1995              		.cfi_offset 11, -8
 1996              		.cfi_offset 14, -4
 682:src/menu.c    ****   int i=0;
 1997              		.loc 1 682 21 view .LVU543
 1998 0004 0021     		movs	r1, #0
 679:src/menu.c    ****   // find the label 'MNU'
 1999              		.loc 1 679 1 view .LVU544
 2000 0006 85B0     		sub	sp, sp, #20
 2001              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccmw9yhH.s 			page 57


 682:src/menu.c    ****   int i=0;
 2002              		.loc 1 682 21 view .LVU545
 2003 0008 FFF7FEFF 		bl	findmultilbl
 2004              	.LVL147:
 682:src/menu.c    ****   int i=0;
 2005              		.loc 1 682 21 view .LVU546
 2006 000c 5C4B     		ldr	r3, .L240
 2007 000e 0546     		mov	r5, r0
 2008              	.LVL148:
 683:src/menu.c    ****   s_opcode op;
 2009              		.loc 1 683 3 is_stmt 1 view .LVU547
 684:src/menu.c    ****   opcode opc;
 2010              		.loc 1 684 3 view .LVU548
 685:src/menu.c    ****   char buf1[16];
 2011              		.loc 1 685 3 view .LVU549
 686:src/menu.c    ****   char *p = buf1;
 2012              		.loc 1 686 3 view .LVU550
 687:src/menu.c    ****   char c;
 2013              		.loc 1 687 3 view .LVU551
 688:src/menu.c    ****   int finished = 0;
 2014              		.loc 1 688 3 view .LVU552
 689:src/menu.c    **** 
 2015              		.loc 1 689 3 view .LVU553
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2016              		.loc 1 691 3 view .LVU554
 2017              	.LBB113:
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2018              		.loc 1 691 8 view .LVU555
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2019              		.loc 1 691 19 view .LVU556
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2020              		.loc 1 692 43 is_stmt 0 view .LVU557
 2021 0010 0022     		movs	r2, #0
 2022 0012 03F1C000 		add	r0, r3, #192
 2023              	.LVL149:
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2024              		.loc 1 694 42 view .LVU558
 2025 0016 2E21     		movs	r1, #46
 2026              	.LVL150:
 2027              	.L190:
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2028              		.loc 1 692 7 is_stmt 1 discriminator 3 view .LVU559
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2029              		.loc 1 692 43 is_stmt 0 discriminator 3 view .LVU560
 2030 0018 83F82020 		strb	r2, [r3, #32]
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2031              		.loc 1 693 7 is_stmt 1 discriminator 3 view .LVU561
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2032              		.loc 1 693 40 is_stmt 0 discriminator 3 view .LVU562
 2033 001c 5A61     		str	r2, [r3, #20]
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2034              		.loc 1 694 7 is_stmt 1 discriminator 3 view .LVU563
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2035              		.loc 1 694 42 is_stmt 0 discriminator 3 view .LVU564
 2036 001e 1974     		strb	r1, [r3, #16]
 695:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2037              		.loc 1 695 7 is_stmt 1 discriminator 3 view .LVU565
ARM GAS  /tmp/ccmw9yhH.s 			page 58


 695:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2038              		.loc 1 695 41 is_stmt 0 discriminator 3 view .LVU566
 2039 0020 83F82820 		strb	r2, [r3, #40]
 696:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2040              		.loc 1 696 7 is_stmt 1 discriminator 3 view .LVU567
 696:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2041              		.loc 1 696 38 is_stmt 0 discriminator 3 view .LVU568
 2042 0024 DA61     		str	r2, [r3, #28]
 697:src/menu.c    ****   }
 2043              		.loc 1 697 7 is_stmt 1 discriminator 3 view .LVU569
 697:src/menu.c    ****   }
 2044              		.loc 1 697 40 is_stmt 0 discriminator 3 view .LVU570
 2045 0026 1976     		strb	r1, [r3, #24]
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2046              		.loc 1 691 24 is_stmt 1 discriminator 3 view .LVU571
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2047              		.loc 1 691 19 discriminator 3 view .LVU572
 2048 0028 2033     		adds	r3, r3, #32
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2049              		.loc 1 691 3 is_stmt 0 discriminator 3 view .LVU573
 2050 002a 8342     		cmp	r3, r0
 2051 002c F4D1     		bne	.L190
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2052              		.loc 1 691 3 discriminator 3 view .LVU574
 2053              	.LBE113:
 699:src/menu.c    **** 
 2054              		.loc 1 699 9 is_stmt 1 view .LVU575
 2055 002e 65B3     		cbz	r5, .L189
 2056              	.LBB114:
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2057              		.loc 1 713 29 is_stmt 0 view .LVU576
 2058 0030 DFF86891 		ldr	r9, .L240+28
 2059              	.LBE114:
 689:src/menu.c    **** 
 2060              		.loc 1 689 7 view .LVU577
 2061 0034 4FF00008 		mov	r8, #0
 687:src/menu.c    ****   char c;
 2062              		.loc 1 687 9 view .LVU578
 2063 0038 6E46     		mov	r6, sp
 2064              	.LBB115:
 710:src/menu.c    ****       }
 2065              		.loc 1 710 2 view .LVU579
 2066 003a A9F1100A 		sub	r10, r9, #16
 2067              	.LBE115:
 683:src/menu.c    ****   s_opcode op;
 2068              		.loc 1 683 7 view .LVU580
 2069 003e C346     		mov	fp, r8
 687:src/menu.c    ****   char c;
 2070              		.loc 1 687 9 view .LVU581
 2071 0040 3746     		mov	r7, r6
 2072              	.LVL151:
 2073              	.L191:
 701:src/menu.c    ****     opc = getprog(pc);
 2074              		.loc 1 701 5 is_stmt 1 view .LVU582
 701:src/menu.c    ****     opc = getprog(pc);
 2075              		.loc 1 701 10 is_stmt 0 view .LVU583
 2076 0042 2846     		mov	r0, r5
ARM GAS  /tmp/ccmw9yhH.s 			page 59


 2077 0044 0021     		movs	r1, #0
 2078 0046 FFF7FEFF 		bl	do_inc
 2079              	.LVL152:
 2080 004a 0546     		mov	r5, r0
 2081              	.LVL153:
 702:src/menu.c    ****     op = (s_opcode) opc;
 2082              		.loc 1 702 5 is_stmt 1 view .LVU584
 702:src/menu.c    ****     op = (s_opcode) opc;
 2083              		.loc 1 702 11 is_stmt 0 view .LVU585
 2084 004c FFF7FEFF 		bl	getprog
 2085              	.LVL154:
 703:src/menu.c    **** 
 2086              		.loc 1 703 8 view .LVU586
 2087 0050 83B2     		uxth	r3, r0
 705:src/menu.c    ****       break;
 2088              		.loc 1 705 8 view .LVU587
 2089 0052 B3F59D7F 		cmp	r3, #314
 702:src/menu.c    ****     op = (s_opcode) opc;
 2090              		.loc 1 702 11 view .LVU588
 2091 0056 0446     		mov	r4, r0
 2092              	.LVL155:
 703:src/menu.c    **** 
 2093              		.loc 1 703 5 is_stmt 1 view .LVU589
 705:src/menu.c    ****       break;
 2094              		.loc 1 705 5 view .LVU590
 705:src/menu.c    ****       break;
 2095              		.loc 1 705 8 is_stmt 0 view .LVU591
 2096 0058 17D0     		beq	.L189
 707:src/menu.c    ****       if (i==4) {
 2097              		.loc 1 707 5 is_stmt 1 view .LVU592
 707:src/menu.c    ****       if (i==4) {
 2098              		.loc 1 707 8 is_stmt 0 view .LVU593
 2099 005a B3F5807F 		cmp	r3, #256
 2100 005e 43D0     		beq	.L232
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2101              		.loc 1 720 5 is_stmt 1 view .LVU594
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2102              		.loc 1 720 9 is_stmt 0 view .LVU595
 2103 0060 00F47042 		and	r2, r0, #61440
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2104              		.loc 1 720 8 view .LVU596
 2105 0064 B2F5704F 		cmp	r2, #61440
 2106 0068 12D0     		beq	.L233
 2107              	.L197:
 741:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2108              		.loc 1 741 7 is_stmt 1 view .LVU597
 741:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2109              		.loc 1 741 10 is_stmt 0 view .LVU598
 2110 006a B742     		cmp	r7, r6
 2111 006c 26D0     		beq	.L234
 759:src/menu.c    ****       }
 2112              		.loc 1 759 11 view .LVU599
 2113 006e 4FF00008 		mov	r8, #0
 2114              	.LVL156:
 2115              	.L203:
 761:src/menu.c    ****       i++;
 2116              		.loc 1 761 7 is_stmt 1 view .LVU600
ARM GAS  /tmp/ccmw9yhH.s 			page 60


 2117 0072 5846     		mov	r0, fp
 2118 0074 2146     		mov	r1, r4
 2119 0076 3246     		mov	r2, r6
 2120 0078 FFF7FEFF 		bl	umen_store
 2121              	.LVL157:
 762:src/menu.c    ****     }
 2122              		.loc 1 762 7 view .LVU601
 762:src/menu.c    ****     }
 2123              		.loc 1 762 8 is_stmt 0 view .LVU602
 2124 007c 0BF1010B 		add	fp, fp, #1
 2125              	.LVL158:
 762:src/menu.c    ****     }
 2126              		.loc 1 762 8 view .LVU603
 2127 0080 3746     		mov	r7, r6
 2128              	.LVL159:
 2129              	.L196:
 699:src/menu.c    **** 
 2130              		.loc 1 699 9 is_stmt 1 view .LVU604
 2131 0082 15B1     		cbz	r5, .L189
 699:src/menu.c    **** 
 2132              		.loc 1 699 13 is_stmt 0 discriminator 1 view .LVU605
 2133 0084 BBF10C0F 		cmp	fp, #12
 2134 0088 DBD1     		bne	.L191
 2135              	.LVL160:
 2136              	.L189:
 765:src/menu.c    **** 
 2137              		.loc 1 765 1 view .LVU606
 2138 008a 05B0     		add	sp, sp, #20
 2139              		.cfi_remember_state
 2140              		.cfi_def_cfa_offset 36
 2141              		@ sp needed
 2142 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2143              	.LVL161:
 2144              	.L233:
 2145              		.cfi_restore_state
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2146              		.loc 1 720 24 discriminator 1 view .LVU607
 2147 0090 C0F30321 		ubfx	r1, r0, #8, #4
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2148              		.loc 1 720 20 discriminator 1 view .LVU608
 2149 0094 0A29     		cmp	r1, #10
 2150 0096 E8D1     		bne	.L197
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2151              		.loc 1 721 7 is_stmt 1 view .LVU609
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2152              		.loc 1 721 10 is_stmt 0 view .LVU610
 2153 0098 B8F1000F 		cmp	r8, #0
 2154 009c 40D1     		bne	.L198
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2155              		.loc 1 721 29 discriminator 1 view .LVU611
 2156 009e BB1B     		subs	r3, r7, r6
 2157              	.LVL162:
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2158              		.loc 1 721 24 discriminator 1 view .LVU612
 2159 00a0 062B     		cmp	r3, #6
 2160 00a2 3DD0     		beq	.L198
 2161              	.LVL163:
ARM GAS  /tmp/ccmw9yhH.s 			page 61


 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2162              		.loc 1 727 7 is_stmt 1 view .LVU613
 729:src/menu.c    **** 	*p++ = c;
 2163              		.loc 1 729 10 is_stmt 0 view .LVU614
 2164 00a4 14F47F0F 		tst	r4, #16711680
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2165              		.loc 1 727 12 view .LVU615
 2166 00a8 3C70     		strb	r4, [r7]
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2167              		.loc 1 728 7 is_stmt 1 view .LVU616
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2168              		.loc 1 728 9 is_stmt 0 view .LVU617
 2169 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2170              	.LVL164:
 729:src/menu.c    **** 	*p++ = c;
 2171              		.loc 1 729 7 is_stmt 1 view .LVU618
 729:src/menu.c    **** 	*p++ = c;
 2172              		.loc 1 729 10 is_stmt 0 view .LVU619
 2173 00ae 24D1     		bne	.L235
 2174              	.LVL165:
 2175              	.L200:
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2176              		.loc 1 727 9 view .LVU620
 2177 00b0 0137     		adds	r7, r7, #1
 2178              	.LVL166:
 2179              	.L202:
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2180              		.loc 1 735 7 is_stmt 1 view .LVU621
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2181              		.loc 1 735 10 is_stmt 0 view .LVU622
 2182 00b2 0023     		movs	r3, #0
 2183 00b4 3B70     		strb	r3, [r7]
 736:src/menu.c    **** 	finished = 1;
 2184              		.loc 1 736 7 is_stmt 1 view .LVU623
 737:src/menu.c    ****       }
 2185              		.loc 1 737 11 is_stmt 0 view .LVU624
 2186 00b6 4FF00108 		mov	r8, #1
 2187 00ba E2E7     		b	.L196
 2188              	.LVL167:
 2189              	.L234:
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2190              		.loc 1 742 2 is_stmt 1 view .LVU625
 2191 00bc A0B2     		uxth	r0, r4
 2192              	.LVL168:
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2193              		.loc 1 742 5 is_stmt 0 view .LVU626
 2194 00be 72B1     		cbz	r2, .L204
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2195              		.loc 1 742 6 discriminator 1 view .LVU627
 2196 00c0 B2F5704F 		cmp	r2, #61440
 2197 00c4 0BD0     		beq	.L204
 2198              	.LBB116:
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2199              		.loc 1 743 4 is_stmt 1 view .LVU628
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2200              		.loc 1 743 26 is_stmt 0 view .LVU629
 2201 00c6 1B0A     		lsrs	r3, r3, #8
ARM GAS  /tmp/ccmw9yhH.s 			page 62


 2202              	.LVL169:
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2203              		.loc 1 743 26 view .LVU630
 2204 00c8 203B     		subs	r3, r3, #32
 2205 00ca DBB2     		uxtb	r3, r3
 2206              	.LVL170:
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2207              		.loc 1 744 4 is_stmt 1 view .LVU631
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2208              		.loc 1 744 7 is_stmt 0 view .LVU632
 2209 00cc 242B     		cmp	r3, #36
 2210 00ce 06D0     		beq	.L204
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2211              		.loc 1 744 28 discriminator 1 view .LVU633
 2212 00d0 6C2B     		cmp	r3, #108
 2213 00d2 04D0     		beq	.L204
 745:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2214              		.loc 1 745 9 view .LVU634
 2215 00d4 012B     		cmp	r3, #1
 2216 00d6 02D9     		bls	.L204
 746:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2217              		.loc 1 746 9 view .LVU635
 2218 00d8 10F0FF0F 		tst	r0, #255
 2219 00dc 4BD0     		beq	.L236
 2220              	.LVL171:
 2221              	.L204:
 746:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2222              		.loc 1 746 9 view .LVU636
 2223              	.LBE116:
 754:src/menu.c    **** 	}
 2224              		.loc 1 754 4 is_stmt 1 view .LVU637
 2225 00de 3146     		mov	r1, r6
 2226 00e0 2046     		mov	r0, r4
 2227 00e2 FFF7FEFF 		bl	prt_umen
 2228              	.LVL172:
 2229 00e6 C4E7     		b	.L203
 2230              	.LVL173:
 2231              	.L232:
 708:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2232              		.loc 1 708 7 view .LVU638
 708:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2233              		.loc 1 708 10 is_stmt 0 view .LVU639
 2234 00e8 BBF1040F 		cmp	fp, #4
 2235 00ec 28D0     		beq	.L237
 712:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2236              		.loc 1 712 12 is_stmt 1 view .LVU640
 712:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2237              		.loc 1 712 15 is_stmt 0 view .LVU641
 2238 00ee BBF1050F 		cmp	fp, #5
 2239 00f2 32D0     		beq	.L238
 2240              	.LVL174:
 2241              	.L195:
 716:src/menu.c    ****       continue;
 2242              		.loc 1 716 7 is_stmt 1 view .LVU642
 716:src/menu.c    ****       continue;
 2243              		.loc 1 716 9 is_stmt 0 view .LVU643
 2244 00f4 0BF1010B 		add	fp, fp, #1
ARM GAS  /tmp/ccmw9yhH.s 			page 63


 2245              	.LVL175:
 717:src/menu.c    ****     }
 2246              		.loc 1 717 7 is_stmt 1 view .LVU644
 2247 00f8 C3E7     		b	.L196
 2248              	.LVL176:
 2249              	.L235:
 730:src/menu.c    **** 	c = opc>>24;
 2250              		.loc 1 730 2 view .LVU645
 730:src/menu.c    **** 	c = opc>>24;
 2251              		.loc 1 730 7 is_stmt 0 view .LVU646
 2252 00fa 7B70     		strb	r3, [r7, #1]
 731:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2253              		.loc 1 731 2 is_stmt 1 view .LVU647
 732:src/menu.c    **** 	  *p++ = c;
 2254              		.loc 1 732 5 is_stmt 0 view .LVU648
 2255 00fc 230E     		lsrs	r3, r4, #24
 2256              	.LVL177:
 731:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2257              		.loc 1 731 4 view .LVU649
 2258 00fe 4FEA1461 		lsr	r1, r4, #24
 2259              	.LVL178:
 732:src/menu.c    **** 	  *p++ = c;
 2260              		.loc 1 732 2 is_stmt 1 view .LVU650
 732:src/menu.c    **** 	  *p++ = c;
 2261              		.loc 1 732 5 is_stmt 0 view .LVU651
 2262 0102 36D0     		beq	.L239
 733:src/menu.c    ****       }
 2263              		.loc 1 733 4 is_stmt 1 view .LVU652
 733:src/menu.c    ****       }
 2264              		.loc 1 733 6 is_stmt 0 view .LVU653
 2265 0104 FB1C     		adds	r3, r7, #3
 2266              	.LVL179:
 736:src/menu.c    **** 	finished = 1;
 2267              		.loc 1 736 26 view .LVU654
 2268 0106 A3EB0608 		sub	r8, r3, r6
 736:src/menu.c    **** 	finished = 1;
 2269              		.loc 1 736 21 view .LVU655
 2270 010a A8F10608 		sub	r8, r8, #6
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2271              		.loc 1 735 10 view .LVU656
 2272 010e 0022     		movs	r2, #0
 736:src/menu.c    **** 	finished = 1;
 2273              		.loc 1 736 21 view .LVU657
 2274 0110 B8FA88F8 		clz	r8, r8
 733:src/menu.c    ****       }
 2275              		.loc 1 733 9 view .LVU658
 2276 0114 B970     		strb	r1, [r7, #2]
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2277              		.loc 1 735 7 is_stmt 1 view .LVU659
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2278              		.loc 1 735 10 is_stmt 0 view .LVU660
 2279 0116 FA70     		strb	r2, [r7, #3]
 736:src/menu.c    **** 	finished = 1;
 2280              		.loc 1 736 7 is_stmt 1 view .LVU661
 736:src/menu.c    **** 	finished = 1;
 2281              		.loc 1 736 21 is_stmt 0 view .LVU662
 2282 0118 4FEA5818 		lsr	r8, r8, #5
ARM GAS  /tmp/ccmw9yhH.s 			page 64


 733:src/menu.c    ****       }
 2283              		.loc 1 733 6 view .LVU663
 2284 011c 1F46     		mov	r7, r3
 2285 011e B0E7     		b	.L196
 2286              	.LVL180:
 2287              	.L198:
 722:src/menu.c    **** 	i++;
 2288              		.loc 1 722 2 is_stmt 1 view .LVU664
 2289 0120 5846     		mov	r0, fp
 2290              	.LVL181:
 722:src/menu.c    **** 	i++;
 2291              		.loc 1 722 2 is_stmt 0 view .LVU665
 2292 0122 3246     		mov	r2, r6
 2293 0124 4FF48071 		mov	r1, #256
 724:src/menu.c    **** 	finished = 0;
 2294              		.loc 1 724 8 view .LVU666
 2295 0128 3746     		mov	r7, r6
 2296              	.LVL182:
 722:src/menu.c    **** 	i++;
 2297              		.loc 1 722 2 view .LVU667
 2298 012a FFF7FEFF 		bl	umen_store
 2299              	.LVL183:
 723:src/menu.c    ****     	p = buf1;
 2300              		.loc 1 723 2 is_stmt 1 view .LVU668
 729:src/menu.c    **** 	*p++ = c;
 2301              		.loc 1 729 10 is_stmt 0 view .LVU669
 2302 012e 14F47F0F 		tst	r4, #16711680
 723:src/menu.c    ****     	p = buf1;
 2303              		.loc 1 723 3 view .LVU670
 2304 0132 0BF1010B 		add	fp, fp, #1
 2305              	.LVL184:
 724:src/menu.c    **** 	finished = 0;
 2306              		.loc 1 724 6 is_stmt 1 view .LVU671
 725:src/menu.c    ****       } // ..and start reading the new alpha
 2307              		.loc 1 725 2 view .LVU672
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2308              		.loc 1 727 7 view .LVU673
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2309              		.loc 1 727 12 is_stmt 0 view .LVU674
 2310 0136 3C70     		strb	r4, [r7]
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2311              		.loc 1 728 7 is_stmt 1 view .LVU675
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2312              		.loc 1 728 9 is_stmt 0 view .LVU676
 2313 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2314              	.LVL185:
 729:src/menu.c    **** 	*p++ = c;
 2315              		.loc 1 729 7 is_stmt 1 view .LVU677
 729:src/menu.c    **** 	*p++ = c;
 2316              		.loc 1 729 10 is_stmt 0 view .LVU678
 2317 013c B8D0     		beq	.L200
 2318              	.LVL186:
 729:src/menu.c    **** 	*p++ = c;
 2319              		.loc 1 729 10 view .LVU679
 2320 013e DCE7     		b	.L235
 2321              	.LVL187:
 2322              	.L237:
ARM GAS  /tmp/ccmw9yhH.s 			page 65


 2323              	.LBB117:
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2324              		.loc 1 709 2 is_stmt 1 view .LVU680
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2325              		.loc 1 709 29 is_stmt 0 view .LVU681
 2326 0140 104B     		ldr	r3, .L240+4
 2327              	.LVL188:
 710:src/menu.c    ****       }
 2328              		.loc 1 710 2 view .LVU682
 2329 0142 114C     		ldr	r4, .L240+8
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2330              		.loc 1 709 29 view .LVU683
 2331 0144 93E80300 		ldm	r3, {r0, r1}
 2332              	.LVL189:
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2333              		.loc 1 709 29 view .LVU684
 2334 0148 104B     		ldr	r3, .L240+12
 710:src/menu.c    ****       }
 2335              		.loc 1 710 2 view .LVU685
 2336 014a 0522     		movs	r2, #5
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2337              		.loc 1 709 29 view .LVU686
 2338 014c 83E80300 		stm	r3, {r0, r1}
 710:src/menu.c    ****       }
 2339              		.loc 1 710 2 is_stmt 1 view .LVU687
 2340 0150 2168     		ldr	r1, [r4]
 2341 0152 5046     		mov	r0, r10
 2342 0154 FFF7FEFF 		bl	strncpy
 2343              	.LVL190:
 2344              	.LBE117:
 2345 0158 CCE7     		b	.L195
 2346              	.LVL191:
 2347              	.L238:
 2348              	.LBB118:
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2349              		.loc 1 713 2 view .LVU688
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2350              		.loc 1 713 29 is_stmt 0 view .LVU689
 2351 015a 0D4B     		ldr	r3, .L240+16
 2352              	.LVL192:
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2353              		.loc 1 713 29 view .LVU690
 2354 015c 93E80300 		ldm	r3, {r0, r1}
 2355              	.LVL193:
 714:src/menu.c    ****       }
 2356              		.loc 1 714 2 view .LVU691
 2357 0160 0C4B     		ldr	r3, .L240+20
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2358              		.loc 1 713 29 view .LVU692
 2359 0162 89E80300 		stm	r9, {r0, r1}
 714:src/menu.c    ****       }
 2360              		.loc 1 714 2 is_stmt 1 view .LVU693
 2361 0166 5A46     		mov	r2, fp
 2362 0168 1968     		ldr	r1, [r3]
 2363 016a 0B48     		ldr	r0, .L240+24
 2364 016c FFF7FEFF 		bl	strncpy
 2365              	.LVL194:
ARM GAS  /tmp/ccmw9yhH.s 			page 66


 2366 0170 C0E7     		b	.L195
 2367              	.LVL195:
 2368              	.L239:
 714:src/menu.c    ****       }
 2369              		.loc 1 714 2 is_stmt 0 view .LVU694
 2370              	.LBE118:
 730:src/menu.c    **** 	c = opc>>24;
 2371              		.loc 1 730 4 view .LVU695
 2372 0172 0237     		adds	r7, r7, #2
 2373              	.LVL196:
 730:src/menu.c    **** 	c = opc>>24;
 2374              		.loc 1 730 4 view .LVU696
 2375 0174 9DE7     		b	.L202
 2376              	.LVL197:
 2377              	.L236:
 2378              	.LBB119:
 747:src/menu.c    **** 	  }
 2379              		.loc 1 747 6 is_stmt 1 view .LVU697
 2380 0176 3146     		mov	r1, r6
 2381 0178 FFF7FEFF 		bl	catcmd
 2382              	.LVL198:
 747:src/menu.c    **** 	  }
 2383              		.loc 1 747 6 is_stmt 0 view .LVU698
 2384 017c 79E7     		b	.L203
 2385              	.L241:
 2386 017e 00BF     		.align	2
 2387              	.L240:
 2388 0180 00000000 		.word	.LANCHOR4
 2389 0184 00000000 		.word	.LANCHOR5
 2390 0188 00000000 		.word	.LANCHOR6
 2391 018c 90000000 		.word	.LANCHOR4+144
 2392 0190 08000000 		.word	.LANCHOR5+8
 2393 0194 00000000 		.word	.LANCHOR7
 2394 0198 C0000000 		.word	.LANCHOR4+192
 2395 019c B0000000 		.word	.LANCHOR4+176
 2396              	.LBE119:
 2397              		.cfi_endproc
 2398              	.LFE19:
 2400              		.section	.text.build_user_menu,"ax",%progbits
 2401              		.align	1
 2402              		.p2align 2,,3
 2403              		.global	build_user_menu
 2404              		.syntax unified
 2405              		.thumb
 2406              		.thumb_func
 2407              		.fpu fpv4-sp-d16
 2409              	build_user_menu:
 2410              	.LFB18:
 672:src/menu.c    ****   // find the label 'MNU'
 2411              		.loc 1 672 27 is_stmt 1 view -0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 2415              		@ link register save eliminated.
 674:src/menu.c    ****    build_user_menu_from_program (lbl);
 2416              		.loc 1 674 4 view .LVU700
 2417              	.LVL199:
ARM GAS  /tmp/ccmw9yhH.s 			page 67


 675:src/menu.c    **** }
 2418              		.loc 1 675 4 view .LVU701
 2419 0000 0148     		ldr	r0, .L243
 2420 0002 FFF7FEBF 		b	build_user_menu_from_program
 2421              	.LVL200:
 2422              	.L244:
 2423 0006 00BF     		.align	2
 2424              	.L243:
 2425 0008 4DF04E55 		.word	1431236685
 2426              		.cfi_endproc
 2427              	.LFE18:
 2429              		.section	.text.shutdown,"ax",%progbits
 2430              		.align	1
 2431              		.p2align 2,,3
 2432              		.global	shutdown
 2433              		.syntax unified
 2434              		.thumb
 2435              		.thumb_func
 2436              		.fpu fpv4-sp-d16
 2438              	shutdown:
 2439              	.LFB22:
 2440              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
ARM GAS  /tmp/ccmw9yhH.s 			page 68


  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
ARM GAS  /tmp/ccmw9yhH.s 			page 69


  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2441              		.loc 2 137 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 138:src/console.c ****   //  save_ram_file(0);
 139:src/console.c ****   SET_ST(STAT_PGM_END);
 2446              		.loc 2 139 3 view .LVU703
 2447 0000 024A     		ldr	r2, .L246
 2448 0002 1368     		ldr	r3, [r2]
 2449 0004 43F40073 		orr	r3, r3, #512
 2450 0008 1360     		str	r3, [r2]
ARM GAS  /tmp/ccmw9yhH.s 			page 70


 140:src/console.c **** }
 2451              		.loc 2 140 1 is_stmt 0 view .LVU704
 2452 000a 7047     		bx	lr
 2453              	.L247:
 2454              		.align	2
 2455              	.L246:
 2456 000c 00200010 		.word	268443648
 2457              		.cfi_endproc
 2458              	.LFE22:
 2460              		.section	.text.is_key_pressed,"ax",%progbits
 2461              		.align	1
 2462              		.p2align 2,,3
 2463              		.global	is_key_pressed
 2464              		.syntax unified
 2465              		.thumb
 2466              		.thumb_func
 2467              		.fpu fpv4-sp-d16
 2469              	is_key_pressed:
 2470              	.LFB23:
 141:src/console.c **** 
 142:src/console.c **** 
 143:src/console.c **** /*
 144:src/console.c ****  *  Dummies
 145:src/console.c ****  */
 146:src/console.c **** int is_key_pressed(void) 
 147:src/console.c **** {
 2471              		.loc 2 147 1 is_stmt 1 view -0
 2472              		.cfi_startproc
 2473              		@ args = 0, pretend = 0, frame = 0
 2474              		@ frame_needed = 0, uses_anonymous_args = 0
 148:src/console.c ****   return !key_empty();
 2475              		.loc 2 148 3 view .LVU706
 147:src/console.c ****   return !key_empty();
 2476              		.loc 2 147 1 is_stmt 0 view .LVU707
 2477 0000 08B5     		push	{r3, lr}
 2478              		.cfi_def_cfa_offset 8
 2479              		.cfi_offset 3, -8
 2480              		.cfi_offset 14, -4
 2481              		.loc 2 148 11 view .LVU708
 2482 0002 034B     		ldr	r3, .L250
 2483 0004 9847     		blx	r3
 2484              	.LVL201:
 149:src/console.c **** }
 2485              		.loc 2 149 1 view .LVU709
 2486 0006 B0FA80F0 		clz	r0, r0
 2487 000a 4009     		lsrs	r0, r0, #5
 2488 000c 08BD     		pop	{r3, pc}
 2489              	.L251:
 2490 000e 00BF     		.align	2
 2491              	.L250:
 2492 0010 7D030008 		.word	134218621
 2493              		.cfi_endproc
 2494              	.LFE23:
 2496              		.section	.text.get_key,"ax",%progbits
 2497              		.align	1
 2498              		.p2align 2,,3
 2499              		.global	get_key
ARM GAS  /tmp/ccmw9yhH.s 			page 71


 2500              		.syntax unified
 2501              		.thumb
 2502              		.thumb_func
 2503              		.fpu fpv4-sp-d16
 2505              	get_key:
 2506              	.LFB24:
 150:src/console.c **** 
 151:src/console.c **** int get_key(void)
 152:src/console.c **** {
 2507              		.loc 2 152 1 is_stmt 1 view -0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              		@ link register save eliminated.
 153:src/console.c ****   return key_pop();
 2512              		.loc 2 153 3 view .LVU711
 2513              		.loc 2 153 10 is_stmt 0 view .LVU712
 2514 0000 004B     		ldr	r3, .L253
 2515 0002 1847     		bx	r3
 2516              	.LVL202:
 2517              	.L254:
 2518              		.align	2
 2519              	.L253:
 2520 0004 89030008 		.word	134218633
 2521              		.cfi_endproc
 2522              	.LFE24:
 2524              		.section	.text.put_key,"ax",%progbits
 2525              		.align	1
 2526              		.p2align 2,,3
 2527              		.global	put_key
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	put_key:
 2534              	.LVL203:
 2535              	.LFB25:
 154:src/console.c **** }
 155:src/console.c **** 
 156:src/console.c **** /*
 157:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 158:src/console.c ****  * 
 159:src/console.c ****  */
 160:src/console.c **** int put_key( int k )
 161:src/console.c **** {
 2536              		.loc 2 161 1 is_stmt 1 view -0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 48
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              		@ link register save eliminated.
 162:src/console.c ****   const char wp34s_to_DM42[] = {
 2541              		.loc 2 162 3 view .LVU714
 161:src/console.c ****   const char wp34s_to_DM42[] = {
 2542              		.loc 2 161 1 is_stmt 0 view .LVU715
 2543 0000 70B4     		push	{r4, r5, r6}
 2544              		.cfi_def_cfa_offset 12
 2545              		.cfi_offset 4, -12
ARM GAS  /tmp/ccmw9yhH.s 			page 72


 2546              		.cfi_offset 5, -8
 2547              		.cfi_offset 6, -4
 2548              		.loc 2 162 14 view .LVU716
 2549 0002 0E4D     		ldr	r5, .L258
 161:src/console.c ****   const char wp34s_to_DM42[] = {
 2550              		.loc 2 161 1 view .LVU717
 2551 0004 0646     		mov	r6, r0
 2552              		.loc 2 162 14 view .LVU718
 2553 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2554              	.LVL204:
 161:src/console.c ****   const char wp34s_to_DM42[] = {
 2555              		.loc 2 161 1 view .LVU719
 2556 0008 8DB0     		sub	sp, sp, #52
 2557              		.cfi_def_cfa_offset 64
 2558              		.loc 2 162 14 view .LVU720
 2559 000a 01AC     		add	r4, sp, #4
 2560 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2561 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2562 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2563 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2564 0016 03C4     		stmia	r4!, {r0, r1}
 163:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 164:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 165:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 166:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 167:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 168:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 169:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 170:src/console.c ****   
 171:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2565              		.loc 2 171 6 view .LVU721
 2566 0018 282E     		cmp	r6, #40
 162:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2567              		.loc 2 162 14 view .LVU722
 2568 001a 2270     		strb	r2, [r4]
 2569              		.loc 2 171 3 is_stmt 1 view .LVU723
 2570              		.loc 2 171 6 is_stmt 0 view .LVU724
 2571 001c 08D8     		bhi	.L256
 172:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2572              		.loc 2 172 5 is_stmt 1 view .LVU725
 2573              		.loc 2 172 36 is_stmt 0 view .LVU726
 2574 001e 0CAB     		add	r3, sp, #48
 2575 0020 3046     		mov	r0, r6
 2576 0022 1844     		add	r0, r0, r3
 2577              		.loc 2 172 12 view .LVU727
 2578 0024 064B     		ldr	r3, .L258+4
 2579 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 173:src/console.c ****   }
 174:src/console.c ****   else {
 175:src/console.c ****     return -1;
 176:src/console.c ****   }
 177:src/console.c **** }
 2580              		.loc 2 177 1 view .LVU728
 2581 002a 0DB0     		add	sp, sp, #52
 2582              		.cfi_remember_state
 2583              		.cfi_def_cfa_offset 12
 2584              		@ sp needed
ARM GAS  /tmp/ccmw9yhH.s 			page 73


 2585 002c 70BC     		pop	{r4, r5, r6}
 2586              		.cfi_restore 6
 2587              		.cfi_restore 5
 2588              		.cfi_restore 4
 2589              		.cfi_def_cfa_offset 0
 2590              	.LVL205:
 172:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2591              		.loc 2 172 12 view .LVU729
 2592 002e 1847     		bx	r3
 2593              	.LVL206:
 2594              	.L256:
 2595              		.cfi_restore_state
 2596              		.loc 2 177 1 view .LVU730
 2597 0030 4FF0FF30 		mov	r0, #-1
 2598 0034 0DB0     		add	sp, sp, #52
 2599              		.cfi_def_cfa_offset 12
 2600              		@ sp needed
 2601 0036 70BC     		pop	{r4, r5, r6}
 2602              		.cfi_restore 6
 2603              		.cfi_restore 5
 2604              		.cfi_restore 4
 2605              		.cfi_def_cfa_offset 0
 2606              	.LVL207:
 2607              		.loc 2 177 1 view .LVU731
 2608 0038 7047     		bx	lr
 2609              	.L259:
 2610 003a 00BF     		.align	2
 2611              	.L258:
 2612 003c 10000000 		.word	.LANCHOR5+16
 2613 0040 81030008 		.word	134218625
 2614              		.cfi_endproc
 2615              	.LFE25:
 2617              		.section	.text.shift_down,"ax",%progbits
 2618              		.align	1
 2619              		.p2align 2,,3
 2620              		.global	shift_down
 2621              		.syntax unified
 2622              		.thumb
 2623              		.thumb_func
 2624              		.fpu fpv4-sp-d16
 2626              	shift_down:
 2627              	.LFB26:
 178:src/console.c **** 
 179:src/console.c **** enum shifts shift_down(void)
 180:src/console.c **** {
 2628              		.loc 2 180 1 is_stmt 1 view -0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 0
 2631              		@ frame_needed = 0, uses_anonymous_args = 0
 2632              		@ link register save eliminated.
 181:src/console.c **** 	return SHIFT_N;
 2633              		.loc 2 181 2 view .LVU733
 182:src/console.c **** }
 2634              		.loc 2 182 1 is_stmt 0 view .LVU734
 2635 0000 0020     		movs	r0, #0
 2636 0002 7047     		bx	lr
 2637              		.cfi_endproc
ARM GAS  /tmp/ccmw9yhH.s 			page 74


 2638              	.LFE26:
 2640              		.section	.text.start_key_timer,"ax",%progbits
 2641              		.align	1
 2642              		.p2align 2,,3
 2643              		.global	start_key_timer
 2644              		.syntax unified
 2645              		.thumb
 2646              		.thumb_func
 2647              		.fpu fpv4-sp-d16
 2649              	start_key_timer:
 2650              	.LFB27:
 183:src/console.c **** 
 184:src/console.c **** void start_key_timer (void);
 185:src/console.c **** long int keyticks (void);
 186:src/console.c **** void moveto (int line, int x);
 187:src/console.c **** 
 188:src/console.c **** static long int start_ticks;
 189:src/console.c **** 
 190:src/console.c **** void start_key_timer() {
 2651              		.loc 2 190 24 is_stmt 1 view -0
 2652              		.cfi_startproc
 2653              		@ args = 0, pretend = 0, frame = 0
 2654              		@ frame_needed = 0, uses_anonymous_args = 0
 191:src/console.c ****     start_ticks = get_rtc_ticks();
 2655              		.loc 2 191 5 view .LVU736
 190:src/console.c ****     start_ticks = get_rtc_ticks();
 2656              		.loc 2 190 24 is_stmt 0 view .LVU737
 2657 0000 08B5     		push	{r3, lr}
 2658              		.cfi_def_cfa_offset 8
 2659              		.cfi_offset 3, -8
 2660              		.cfi_offset 14, -4
 2661              		.loc 2 191 19 view .LVU738
 2662 0002 024B     		ldr	r3, .L263
 2663 0004 9847     		blx	r3
 2664              	.LVL208:
 2665              		.loc 2 191 17 view .LVU739
 2666 0006 024B     		ldr	r3, .L263+4
 2667 0008 1860     		str	r0, [r3]
 192:src/console.c **** }
 2668              		.loc 2 192 1 view .LVU740
 2669 000a 08BD     		pop	{r3, pc}
 2670              	.L264:
 2671              		.align	2
 2672              	.L263:
 2673 000c B9040008 		.word	134218937
 2674 0010 00000000 		.word	.LANCHOR8
 2675              		.cfi_endproc
 2676              	.LFE27:
 2678              		.section	.text.keyticks,"ax",%progbits
 2679              		.align	1
 2680              		.p2align 2,,3
 2681              		.global	keyticks
 2682              		.syntax unified
 2683              		.thumb
 2684              		.thumb_func
 2685              		.fpu fpv4-sp-d16
 2687              	keyticks:
ARM GAS  /tmp/ccmw9yhH.s 			page 75


 2688              	.LFB28:
 193:src/console.c **** 
 194:src/console.c **** long int keyticks () {
 2689              		.loc 2 194 22 is_stmt 1 view -0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 0
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
 195:src/console.c ****   long int i;
 2693              		.loc 2 195 3 view .LVU742
 196:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2694              		.loc 2 196 3 view .LVU743
 194:src/console.c ****   long int i;
 2695              		.loc 2 194 22 is_stmt 0 view .LVU744
 2696 0000 08B5     		push	{r3, lr}
 2697              		.cfi_def_cfa_offset 8
 2698              		.cfi_offset 3, -8
 2699              		.cfi_offset 14, -4
 2700              		.loc 2 196 8 view .LVU745
 2701 0002 054B     		ldr	r3, .L267
 2702 0004 9847     		blx	r3
 2703              	.LVL209:
 197:src/console.c ****   return i >> 8;
 2704              		.loc 2 197 3 is_stmt 1 view .LVU746
 196:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2705              		.loc 2 196 24 is_stmt 0 view .LVU747
 2706 0006 054B     		ldr	r3, .L267+4
 2707 0008 1B68     		ldr	r3, [r3]
 2708 000a C01A     		subs	r0, r0, r3
 2709              	.LVL210:
 196:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2710              		.loc 2 196 38 view .LVU748
 2711 000c 00EB8000 		add	r0, r0, r0, lsl #2
 198:src/console.c **** }
 2712              		.loc 2 198 1 view .LVU749
 2713 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2714 0014 08BD     		pop	{r3, pc}
 2715              	.L268:
 2716 0016 00BF     		.align	2
 2717              	.L267:
 2718 0018 B9040008 		.word	134218937
 2719 001c 00000000 		.word	.LANCHOR8
 2720              		.cfi_endproc
 2721              	.LFE28:
 2723              		.section	.text.moveto,"ax",%progbits
 2724              		.align	1
 2725              		.p2align 2,,3
 2726              		.global	moveto
 2727              		.syntax unified
 2728              		.thumb
 2729              		.thumb_func
 2730              		.fpu fpv4-sp-d16
 2732              	moveto:
 2733              	.LVL211:
 2734              	.LFB29:
 199:src/console.c **** 
 200:src/console.c **** /*
 201:src/console.c ****  * Debug function - print_debug displays two integers
ARM GAS  /tmp/ccmw9yhH.s 			page 76


 202:src/console.c ****  */
 203:src/console.c **** 
 204:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 205:src/console.c **** char print_string[22];
 206:src/console.c **** int n_p = 0;
 207:src/console.c **** 
 208:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2735              		.loc 2 208 30 is_stmt 1 view -0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 209:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2739              		.loc 2 209 3 view .LVU751
 208:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2740              		.loc 2 208 30 is_stmt 0 view .LVU752
 2741 0000 70B5     		push	{r4, r5, r6, lr}
 2742              		.cfi_def_cfa_offset 16
 2743              		.cfi_offset 4, -16
 2744              		.cfi_offset 5, -12
 2745              		.cfi_offset 6, -8
 2746              		.cfi_offset 14, -4
 2747              		.loc 2 209 3 view .LVU753
 2748 0002 0A4D     		ldr	r5, .L271
 2749 0004 0A4B     		ldr	r3, .L271+4
 208:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2750              		.loc 2 208 30 view .LVU754
 2751 0006 0246     		mov	r2, r0
 2752 0008 0C46     		mov	r4, r1
 2753              		.loc 2 209 3 view .LVU755
 2754 000a A86B     		ldr	r0, [r5, #56]
 2755              	.LVL212:
 2756              		.loc 2 209 3 view .LVU756
 2757 000c 511E     		subs	r1, r2, #1
 2758              	.LVL213:
 2759              		.loc 2 209 3 view .LVU757
 2760 000e 9847     		blx	r3
 2761              	.LVL214:
 210:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2762              		.loc 2 210 3 is_stmt 1 view .LVU758
 2763 0010 A86B     		ldr	r0, [r5, #56]
 2764 0012 084B     		ldr	r3, .L271+8
 2765              		.loc 2 210 33 is_stmt 0 view .LVU759
 2766 0014 0168     		ldr	r1, [r0]
 2767              		.loc 2 210 3 view .LVU760
 2768 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2769              		.loc 2 210 33 view .LVU761
 2770 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2771              		.loc 2 210 43 view .LVU762
 2772 001c 013C     		subs	r4, r4, #1
 2773              	.LVL215:
 2774              		.loc 2 210 40 view .LVU763
 2775 001e 04FB01F1 		mul	r1, r4, r1
 2776              		.loc 2 210 3 view .LVU764
 2777 0022 1431     		adds	r1, r1, #20
 211:src/console.c **** }
 2778              		.loc 2 211 1 view .LVU765
 2779 0024 BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/ccmw9yhH.s 			page 77


 2780              		.cfi_restore 14
 2781              		.cfi_restore 6
 2782              		.cfi_restore 5
 2783              		.cfi_restore 4
 2784              		.cfi_def_cfa_offset 0
 2785              	.LVL216:
 210:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2786              		.loc 2 210 3 view .LVU766
 2787 0028 1847     		bx	r3	@ indirect register sibling call
 2788              	.LVL217:
 2789              	.L272:
 2790 002a 00BF     		.align	2
 2791              	.L271:
 2792 002c 00200010 		.word	268443648
 2793 0030 69020008 		.word	134218345
 2794 0034 6D020008 		.word	134218349
 2795              		.cfi_endproc
 2796              	.LFE29:
 2798              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2799              		.align	2
 2800              	.LC15:
 2801 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2801      673A2025 
 2801      34692C25 
 2801      346900
 2802              		.section	.text.print_debug,"ax",%progbits
 2803              		.align	1
 2804              		.p2align 2,,3
 2805              		.global	print_debug
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2809              		.fpu fpv4-sp-d16
 2811              	print_debug:
 2812              	.LVL218:
 2813              	.LFB30:
 212:src/console.c **** 
 213:src/console.c **** void print_debug (int i, int j) {
 2814              		.loc 2 213 33 is_stmt 1 view -0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 8
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 214:src/console.c ****   strcpy( print_string, spaces );
 2818              		.loc 2 214 3 view .LVU768
 213:src/console.c ****   strcpy( print_string, spaces );
 2819              		.loc 2 213 33 is_stmt 0 view .LVU769
 2820 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2821              		.cfi_def_cfa_offset 24
 2822              		.cfi_offset 4, -24
 2823              		.cfi_offset 5, -20
 2824              		.cfi_offset 6, -16
 2825              		.cfi_offset 7, -12
 2826              		.cfi_offset 8, -8
 2827              		.cfi_offset 14, -4
 2828              		.loc 2 214 3 view .LVU770
 2829 0004 174C     		ldr	r4, .L275
 2830 0006 184F     		ldr	r7, .L275+4
ARM GAS  /tmp/ccmw9yhH.s 			page 78


 215:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 216:src/console.c ****   moveto (3, 1);
 217:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2831              		.loc 2 217 3 view .LVU771
 2832 0008 184E     		ldr	r6, .L275+8
 2833 000a 194D     		ldr	r5, .L275+12
 218:src/console.c ****   lcd_refresh();
 2834              		.loc 2 218 3 view .LVU772
 2835 000c DFF86C80 		ldr	r8, .L275+24
 213:src/console.c ****   strcpy( print_string, spaces );
 2836              		.loc 2 213 33 view .LVU773
 2837 0010 82B0     		sub	sp, sp, #8
 2838              		.cfi_def_cfa_offset 32
 213:src/console.c ****   strcpy( print_string, spaces );
 2839              		.loc 2 213 33 view .LVU774
 2840 0012 0190     		str	r0, [sp, #4]
 2841 0014 0091     		str	r1, [sp]
 214:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2842              		.loc 2 214 3 view .LVU775
 2843 0016 2046     		mov	r0, r4
 2844              	.LVL219:
 214:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2845              		.loc 2 214 3 view .LVU776
 2846 0018 3946     		mov	r1, r7
 2847              	.LVL220:
 214:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2848              		.loc 2 214 3 view .LVU777
 2849 001a FFF7FEFF 		bl	strcpy
 2850              	.LVL221:
 215:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2851              		.loc 2 215 3 is_stmt 1 view .LVU778
 2852 001e DDE90032 		ldrd	r3, r2, [sp]
 2853 0022 1449     		ldr	r1, .L275+16
 2854 0024 2046     		mov	r0, r4
 2855 0026 FFF7FEFF 		bl	sprintf
 2856              	.LVL222:
 216:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2857              		.loc 2 216 3 view .LVU779
 2858 002a 0121     		movs	r1, #1
 2859 002c 0320     		movs	r0, #3
 2860 002e FFF7FEFF 		bl	moveto
 2861              	.LVL223:
 217:src/console.c ****   lcd_refresh();
 2862              		.loc 2 217 3 view .LVU780
 2863 0032 2146     		mov	r1, r4
 2864 0034 B06B     		ldr	r0, [r6, #56]
 2865 0036 A847     		blx	r5
 2866              	.LVL224:
 2867              		.loc 2 218 3 view .LVU781
 2868 0038 C047     		blx	r8
 2869              	.LVL225:
 219:src/console.c ****   sys_delay (1000);
 2870              		.loc 2 219 3 view .LVU782
 2871 003a 0F4B     		ldr	r3, .L275+20
 2872 003c 4FF47A70 		mov	r0, #1000
 2873 0040 9847     		blx	r3
 2874              	.LVL226:
ARM GAS  /tmp/ccmw9yhH.s 			page 79


 220:src/console.c ****   strcpy( print_string, spaces );
 2875              		.loc 2 220 3 view .LVU783
 2876 0042 3946     		mov	r1, r7
 2877 0044 2046     		mov	r0, r4
 2878 0046 FFF7FEFF 		bl	strcpy
 2879              	.LVL227:
 221:src/console.c ****   moveto (3, 1);
 2880              		.loc 2 221 3 view .LVU784
 2881 004a 0121     		movs	r1, #1
 2882 004c 0320     		movs	r0, #3
 2883 004e FFF7FEFF 		bl	moveto
 2884              	.LVL228:
 222:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2885              		.loc 2 222 3 view .LVU785
 2886 0052 B06B     		ldr	r0, [r6, #56]
 2887 0054 2146     		mov	r1, r4
 2888 0056 A847     		blx	r5
 2889              	.LVL229:
 223:src/console.c ****   lcd_refresh();
 2890              		.loc 2 223 3 view .LVU786
 2891 0058 4346     		mov	r3, r8
 224:src/console.c **** }
 2892              		.loc 2 224 1 is_stmt 0 view .LVU787
 2893 005a 02B0     		add	sp, sp, #8
 2894              		.cfi_def_cfa_offset 24
 2895              	.LVL230:
 2896              		.loc 2 224 1 view .LVU788
 2897              		@ sp needed
 2898 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2899              		.cfi_restore 14
 2900              		.cfi_restore 8
 2901              		.cfi_restore 7
 2902              		.cfi_restore 6
 2903              		.cfi_restore 5
 2904              		.cfi_restore 4
 2905              		.cfi_def_cfa_offset 0
 2906              	.LVL231:
 223:src/console.c ****   lcd_refresh();
 2907              		.loc 2 223 3 view .LVU789
 2908 0060 1847     		bx	r3	@ indirect register sibling call
 2909              	.LVL232:
 2910              	.L276:
 2911 0062 00BF     		.align	2
 2912              	.L275:
 2913 0064 00000000 		.word	print_string
 2914 0068 00000000 		.word	.LANCHOR9
 2915 006c 00200010 		.word	268443648
 2916 0070 B1020008 		.word	134218417
 2917 0074 00000000 		.word	.LC15
 2918 0078 05040008 		.word	134218757
 2919 007c 31020008 		.word	134218289
 2920              		.cfi_endproc
 2921              	.LFE30:
 2923              		.section	.text.do_now,"ax",%progbits
 2924              		.align	1
 2925              		.p2align 2,,3
 2926              		.global	do_now
ARM GAS  /tmp/ccmw9yhH.s 			page 80


 2927              		.syntax unified
 2928              		.thumb
 2929              		.thumb_func
 2930              		.fpu fpv4-sp-d16
 2932              	do_now:
 2933              	.LVL233:
 2934              	.LFB31:
 225:src/console.c **** /*
 226:src/console.c ****  * End of debug code
 227:src/console.c ****  */
 228:src/console.c **** 
 229:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 2935              		.loc 2 229 34 is_stmt 1 view -0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 8
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939              		@ link register save eliminated.
 230:src/console.c ****   struct _ndmap temp;
 2940              		.loc 2 230 3 view .LVU791
 231:src/console.c ****   temp.key_34s = key;
 2941              		.loc 2 231 3 view .LVU792
 229:src/console.c ****   struct _ndmap temp;
 2942              		.loc 2 229 34 is_stmt 0 view .LVU793
 2943 0000 82B0     		sub	sp, sp, #8
 2944              		.cfi_def_cfa_offset 8
 232:src/console.c ****   temp.shift = shift;
 233:src/console.c ****   process_keycode_with_shift (temp);
 2945              		.loc 2 233 3 view .LVU794
 2946 0002 02AB     		add	r3, sp, #8
 231:src/console.c ****   temp.shift = shift;
 2947              		.loc 2 231 16 view .LVU795
 2948 0004 8DF80000 		strb	r0, [sp]
 232:src/console.c ****   temp.shift = shift;
 2949              		.loc 2 232 3 is_stmt 1 view .LVU796
 232:src/console.c ****   temp.shift = shift;
 2950              		.loc 2 232 14 is_stmt 0 view .LVU797
 2951 0008 0191     		str	r1, [sp, #4]
 2952              		.loc 2 233 3 is_stmt 1 view .LVU798
 2953 000a 13E90300 		ldmdb	r3, {r0, r1}
 2954              	.LVL234:
 234:src/console.c **** }
 2955              		.loc 2 234 1 is_stmt 0 view .LVU799
 2956 000e 02B0     		add	sp, sp, #8
 2957              		.cfi_def_cfa_offset 0
 2958              		@ sp needed
 233:src/console.c **** }
 2959              		.loc 2 233 3 view .LVU800
 2960 0010 FFF7FEBF 		b	process_keycode_with_shift
 2961              	.LVL235:
 233:src/console.c **** }
 2962              		.loc 2 233 3 view .LVU801
 2963              		.cfi_endproc
 2964              	.LFE31:
 2966              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2967              		.align	2
 2968              	.LC16:
 2969 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
ARM GAS  /tmp/ccmw9yhH.s 			page 81


 2969      502F7770 
 2969      3334735F 
 2969      68656C70 
 2969      2E68746D 
 2970              		.section	.text.do_multi,"ax",%progbits
 2971              		.align	1
 2972              		.p2align 2,,3
 2973              		.global	do_multi
 2974              		.syntax unified
 2975              		.thumb
 2976              		.thumb_func
 2977              		.fpu fpv4-sp-d16
 2979              	do_multi:
 2980              	.LVL236:
 2981              	.LFB32:
 235:src/console.c **** 
 236:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2982              		.loc 2 236 42 is_stmt 1 view -0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 16
 2985              		@ frame_needed = 0, uses_anonymous_args = 0
 2986              		.loc 2 236 42 is_stmt 0 view .LVU803
 2987 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2988              		.cfi_def_cfa_offset 20
 2989              		.cfi_offset 4, -20
 2990              		.cfi_offset 5, -16
 2991              		.cfi_offset 6, -12
 2992              		.cfi_offset 7, -8
 2993              		.cfi_offset 14, -4
 2994 0002 85B0     		sub	sp, sp, #20
 2995              		.cfi_def_cfa_offset 40
 2996              	.LVL237:
 237:src/console.c ****   switch(r.shift) {
 2997              		.loc 2 237 3 is_stmt 1 view .LVU804
 236:src/console.c ****   switch(r.shift) {
 2998              		.loc 2 236 42 is_stmt 0 view .LVU805
 2999 0004 6C46     		mov	r4, sp
 3000 0006 931E     		subs	r3, r2, #2
 3001 0008 84E80600 		stm	r4, {r1, r2}
 3002              	.LVL238:
 236:src/console.c ****   switch(r.shift) {
 3003              		.loc 2 236 42 view .LVU806
 3004 000c 0546     		mov	r5, r0
 3005 000e 0D2B     		cmp	r3, #13
 3006 0010 23D8     		bhi	.L280
 3007 0012 DFE803F0 		tbb	[pc, r3]
 3008              	.L282:
 3009 0016 2F       		.byte	(.L295-.L282)/2
 3010 0017 3A       		.byte	(.L294-.L282)/2
 3011 0018 45       		.byte	(.L293-.L282)/2
 3012 0019 50       		.byte	(.L292-.L282)/2
 3013 001a 5B       		.byte	(.L291-.L282)/2
 3014 001b 66       		.byte	(.L290-.L282)/2
 3015 001c 71       		.byte	(.L289-.L282)/2
 3016 001d 7B       		.byte	(.L288-.L282)/2
 3017 001e 86       		.byte	(.L287-.L282)/2
 3018 001f 90       		.byte	(.L286-.L282)/2
ARM GAS  /tmp/ccmw9yhH.s 			page 82


 3019 0020 9A       		.byte	(.L285-.L282)/2
 3020 0021 AD       		.byte	(.L284-.L282)/2
 3021 0022 B7       		.byte	(.L283-.L282)/2
 3022 0023 07       		.byte	(.L281-.L282)/2
 3023              		.p2align 1
 3024              	.L281:
 238:src/console.c ****   case ONSTO: // flash_backup()
 239:src/console.c ****     flash_backup(OP_SAVE);
 240:src/console.c ****     reset_shift();
 241:src/console.c ****     r = no_key;
 242:src/console.c ****     break;
 243:src/console.c ****   case ONRCL: // flash_restore()
 244:src/console.c ****     flash_restore(OP_LOAD);
 245:src/console.c ****     reset_shift();
 246:src/console.c ****     r = no_key;
 247:src/console.c ****     break;
 248:src/console.c ****   case WRLIB: // save library file
 249:src/console.c ****     save_lib_file(1);
 250:src/console.c ****     reset_shift();
 251:src/console.c ****     r = no_key;
 252:src/console.c ****     break;
 253:src/console.c ****   case LLIB: // load library file
 254:src/console.c ****     load_lib_file(1);
 255:src/console.c ****     reset_shift();
 256:src/console.c ****     r = no_key;
 257:src/console.c ****     break;
 258:src/console.c ****   case WRTST: // save state file
 259:src/console.c ****     save_ram_file(1);
 260:src/console.c ****     reset_shift();
 261:src/console.c ****     r = no_key;
 262:src/console.c ****     break;
 263:src/console.c ****   case LDST:
 264:src/console.c ****     load_ram_file(1);
 265:src/console.c ****     reset_shift();
 266:src/console.c ****     r = no_key;
 267:src/console.c ****     break;
 268:src/console.c ****   case LDPRG:
 269:src/console.c ****     load_prog_file();
 270:src/console.c ****     reset_shift();
 271:src/console.c ****     r = no_key;
 272:src/console.c ****     break;
 273:src/console.c ****   case SVPRG:
 274:src/console.c ****     save_prog_file();
 275:src/console.c ****     reset_shift();
 276:src/console.c ****     r = no_key;
 277:src/console.c ****     break;
 278:src/console.c ****   case HELP:
 279:src/console.c **** #ifdef C_VERSION
 280:src/console.c ****     run_help_file("/HELP/wp34c_help.html");
 281:src/console.c **** #else
 282:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 283:src/console.c **** #endif
 284:src/console.c ****     reset_shift();
 285:src/console.c ****     r = no_key;
 286:src/console.c ****     break;
 287:src/console.c ****   case DOTS:
 288:src/console.c ****     do_all_dots();
ARM GAS  /tmp/ccmw9yhH.s 			page 83


 289:src/console.c ****     reset_shift();
 290:src/console.c ****     r = no_key;
 291:src/console.c ****     break;
 292:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 293:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 294:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 295:src/console.c ****     r = no_key;
 296:src/console.c ****     break;
 297:src/console.c ****   case DEFMEN:
 298:src/console.c ****     toggle_default_menu();
 299:src/console.c ****     reset_shift();
 300:src/console.c ****     r = no_key;
 301:src/console.c ****     break;
 302:src/console.c ****   case SETUMEN:
 303:src/console.c ****     build_user_menu();
 304:src/console.c ****     reset_shift();
 305:src/console.c ****     r = no_key;;
 306:src/console.c ****     break;
 307:src/console.c ****   case KCPX:
 308:src/console.c ****     if (C_LOCKED) {
 3025              		.loc 2 308 5 is_stmt 1 view .LVU807
 3026              		.loc 2 308 9 is_stmt 0 view .LVU808
 3027 0024 664B     		ldr	r3, .L316
 3028 0026 1B68     		ldr	r3, [r3]
 3029 0028 93F8E42F 		ldrb	r2, [r3, #4068]	@ zero_extendqisi2
 3030              		.loc 2 308 8 view .LVU809
 3031 002c 5207     		lsls	r2, r2, #29
 3032 002e 40F1B480 		bpl	.L297
 3033              		.loc 2 308 9 discriminator 1 view .LVU810
 3034 0032 93F8DE3F 		ldrb	r3, [r3, #4062]	@ zero_extendqisi2
 3035 0036 5B07     		lsls	r3, r3, #29
 3036 0038 40F1AF80 		bpl	.L297
 309:src/console.c ****       set_menu(M_C_Lock);
 3037              		.loc 2 309 7 is_stmt 1 view .LVU811
 3038              	.LVL239:
 3039              	.LBB120:
 3040              	.LBI120:
 125:src/menu.c    ****   menu_name m = current_menu;
 3041              		.loc 1 125 6 view .LVU812
 3042              	.LBB121:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3043              		.loc 1 126 3 view .LVU813
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3044              		.loc 1 126 13 is_stmt 0 view .LVU814
 3045 003c 614A     		ldr	r2, .L316+4
 3046 003e 92F90030 		ldrsb	r3, [r2]
 3047              	.LVL240:
 127:src/menu.c    ****     current_menu = default_menu;
 3048              		.loc 1 127 3 is_stmt 1 view .LVU815
 127:src/menu.c    ****     current_menu = default_menu;
 3049              		.loc 1 127 6 is_stmt 0 view .LVU816
 3050 0042 112B     		cmp	r3, #17
 3051 0044 00F0B580 		beq	.L315
 130:src/menu.c    ****     current_menu = last_menu;
 3052              		.loc 1 130 8 is_stmt 1 view .LVU817
 134:src/menu.c    ****   }
 3053              		.loc 1 134 5 view .LVU818
ARM GAS  /tmp/ccmw9yhH.s 			page 84


 134:src/menu.c    ****   }
 3054              		.loc 1 134 18 is_stmt 0 view .LVU819
 3055 0048 1121     		movs	r1, #17
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3056              		.loc 1 136 6 view .LVU820
 3057 004a 092B     		cmp	r3, #9
 134:src/menu.c    ****   }
 3058              		.loc 1 134 18 view .LVU821
 3059 004c 1170     		strb	r1, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3060              		.loc 1 136 3 is_stmt 1 view .LVU822
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3061              		.loc 1 136 6 is_stmt 0 view .LVU823
 3062 004e 02D0     		beq	.L300
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3063              		.loc 1 136 23 view .LVU824
 3064 0050 102B     		cmp	r3, #16
 3065 0052 40F0B180 		bne	.L299
 3066              	.L300:
 3067              	.LVL241:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3068              		.loc 1 136 23 view .LVU825
 3069              	.LBE121:
 3070              	.LBE120:
 310:src/console.c ****       reset_shift();
 3071              		.loc 2 310 7 is_stmt 1 view .LVU826
 3072 0056 FFF7FEFF 		bl	reset_shift
 3073              	.LVL242:
 3074              	.L280:
 311:src/console.c ****     }
 312:src/console.c ****     else {
 313:src/console.c ****       do_now (K_CMPLX, 0);
 314:src/console.c ****       do_now (K_RELEASE, 0);
 315:src/console.c ****       r = no_key;
 316:src/console.c ****     }
 317:src/console.c ****   default:
 318:src/console.c ****     r = no_key;
 3075              		.loc 2 318 5 view .LVU827
 3076              		.loc 2 318 7 is_stmt 0 view .LVU828
 3077 005a 5B4B     		ldr	r3, .L316+8
 3078 005c 93E80300 		ldm	r3, {r0, r1}
 3079 0060 84E80300 		stm	r4, {r0, r1}
 3080              	.LVL243:
 3081              	.L296:
 319:src/console.c ****   }
 320:src/console.c ****   return r;
 3082              		.loc 2 320 3 is_stmt 1 view .LVU829
 3083              		.loc 2 320 10 is_stmt 0 view .LVU830
 3084 0064 0191     		str	r1, [sp, #4]
 3085 0066 94E80300 		ldm	r4, {r0, r1}
 3086              	.LVL244:
 3087              		.loc 2 320 10 view .LVU831
 3088 006a 85E80300 		stm	r5, {r0, r1}
 321:src/console.c **** }
 3089              		.loc 2 321 1 view .LVU832
 3090 006e 2846     		mov	r0, r5
 3091 0070 05B0     		add	sp, sp, #20
ARM GAS  /tmp/ccmw9yhH.s 			page 85


 3092              		.cfi_remember_state
 3093              		.cfi_def_cfa_offset 20
 3094              		@ sp needed
 3095 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 3096              	.LVL245:
 3097              	.L295:
 3098              		.cfi_restore_state
 239:src/console.c ****     reset_shift();
 3099              		.loc 2 239 5 is_stmt 1 view .LVU833
 3100 0074 AD20     		movs	r0, #173
 3101              	.LVL246:
 239:src/console.c ****     reset_shift();
 3102              		.loc 2 239 5 is_stmt 0 view .LVU834
 3103 0076 FFF7FEFF 		bl	flash_backup
 3104              	.LVL247:
 240:src/console.c ****     r = no_key;
 3105              		.loc 2 240 5 is_stmt 1 view .LVU835
 3106 007a FFF7FEFF 		bl	reset_shift
 3107              	.LVL248:
 241:src/console.c ****     break;
 3108              		.loc 2 241 5 view .LVU836
 241:src/console.c ****     break;
 3109              		.loc 2 241 7 is_stmt 0 view .LVU837
 3110 007e 524B     		ldr	r3, .L316+8
 3111 0080 93E80300 		ldm	r3, {r0, r1}
 3112 0084 84E80300 		stm	r4, {r0, r1}
 3113              	.LVL249:
 242:src/console.c ****   case ONRCL: // flash_restore()
 3114              		.loc 2 242 5 is_stmt 1 view .LVU838
 3115 0088 ECE7     		b	.L296
 3116              	.LVL250:
 3117              	.L294:
 244:src/console.c ****     reset_shift();
 3118              		.loc 2 244 5 view .LVU839
 3119 008a AE20     		movs	r0, #174
 3120              	.LVL251:
 244:src/console.c ****     reset_shift();
 3121              		.loc 2 244 5 is_stmt 0 view .LVU840
 3122 008c FFF7FEFF 		bl	flash_restore
 3123              	.LVL252:
 245:src/console.c ****     r = no_key;
 3124              		.loc 2 245 5 is_stmt 1 view .LVU841
 3125 0090 FFF7FEFF 		bl	reset_shift
 3126              	.LVL253:
 246:src/console.c ****     break;
 3127              		.loc 2 246 5 view .LVU842
 246:src/console.c ****     break;
 3128              		.loc 2 246 7 is_stmt 0 view .LVU843
 3129 0094 4C4B     		ldr	r3, .L316+8
 3130 0096 93E80300 		ldm	r3, {r0, r1}
 3131 009a 84E80300 		stm	r4, {r0, r1}
 3132              	.LVL254:
 247:src/console.c ****   case WRLIB: // save library file
 3133              		.loc 2 247 5 is_stmt 1 view .LVU844
 3134 009e E1E7     		b	.L296
 3135              	.LVL255:
 3136              	.L293:
ARM GAS  /tmp/ccmw9yhH.s 			page 86


 249:src/console.c ****     reset_shift();
 3137              		.loc 2 249 5 view .LVU845
 3138 00a0 0120     		movs	r0, #1
 3139              	.LVL256:
 249:src/console.c ****     reset_shift();
 3140              		.loc 2 249 5 is_stmt 0 view .LVU846
 3141 00a2 FFF7FEFF 		bl	save_lib_file
 3142              	.LVL257:
 250:src/console.c ****     r = no_key;
 3143              		.loc 2 250 5 is_stmt 1 view .LVU847
 3144 00a6 FFF7FEFF 		bl	reset_shift
 3145              	.LVL258:
 251:src/console.c ****     break;
 3146              		.loc 2 251 5 view .LVU848
 251:src/console.c ****     break;
 3147              		.loc 2 251 7 is_stmt 0 view .LVU849
 3148 00aa 474B     		ldr	r3, .L316+8
 3149 00ac 93E80300 		ldm	r3, {r0, r1}
 3150 00b0 84E80300 		stm	r4, {r0, r1}
 3151              	.LVL259:
 252:src/console.c ****   case LLIB: // load library file
 3152              		.loc 2 252 5 is_stmt 1 view .LVU850
 3153 00b4 D6E7     		b	.L296
 3154              	.LVL260:
 3155              	.L292:
 254:src/console.c ****     reset_shift();
 3156              		.loc 2 254 5 view .LVU851
 3157 00b6 0120     		movs	r0, #1
 3158              	.LVL261:
 254:src/console.c ****     reset_shift();
 3159              		.loc 2 254 5 is_stmt 0 view .LVU852
 3160 00b8 FFF7FEFF 		bl	load_lib_file
 3161              	.LVL262:
 255:src/console.c ****     r = no_key;
 3162              		.loc 2 255 5 is_stmt 1 view .LVU853
 3163 00bc FFF7FEFF 		bl	reset_shift
 3164              	.LVL263:
 256:src/console.c ****     break;
 3165              		.loc 2 256 5 view .LVU854
 256:src/console.c ****     break;
 3166              		.loc 2 256 7 is_stmt 0 view .LVU855
 3167 00c0 414B     		ldr	r3, .L316+8
 3168 00c2 93E80300 		ldm	r3, {r0, r1}
 3169 00c6 84E80300 		stm	r4, {r0, r1}
 3170              	.LVL264:
 257:src/console.c ****   case WRTST: // save state file
 3171              		.loc 2 257 5 is_stmt 1 view .LVU856
 3172 00ca CBE7     		b	.L296
 3173              	.LVL265:
 3174              	.L291:
 259:src/console.c ****     reset_shift();
 3175              		.loc 2 259 5 view .LVU857
 3176 00cc 0120     		movs	r0, #1
 3177              	.LVL266:
 259:src/console.c ****     reset_shift();
 3178              		.loc 2 259 5 is_stmt 0 view .LVU858
 3179 00ce FFF7FEFF 		bl	save_ram_file
ARM GAS  /tmp/ccmw9yhH.s 			page 87


 3180              	.LVL267:
 260:src/console.c ****     r = no_key;
 3181              		.loc 2 260 5 is_stmt 1 view .LVU859
 3182 00d2 FFF7FEFF 		bl	reset_shift
 3183              	.LVL268:
 261:src/console.c ****     break;
 3184              		.loc 2 261 5 view .LVU860
 261:src/console.c ****     break;
 3185              		.loc 2 261 7 is_stmt 0 view .LVU861
 3186 00d6 3C4B     		ldr	r3, .L316+8
 3187 00d8 93E80300 		ldm	r3, {r0, r1}
 3188 00dc 84E80300 		stm	r4, {r0, r1}
 3189              	.LVL269:
 262:src/console.c ****   case LDST:
 3190              		.loc 2 262 5 is_stmt 1 view .LVU862
 3191 00e0 C0E7     		b	.L296
 3192              	.LVL270:
 3193              	.L290:
 264:src/console.c ****     reset_shift();
 3194              		.loc 2 264 5 view .LVU863
 3195 00e2 0120     		movs	r0, #1
 3196              	.LVL271:
 264:src/console.c ****     reset_shift();
 3197              		.loc 2 264 5 is_stmt 0 view .LVU864
 3198 00e4 FFF7FEFF 		bl	load_ram_file
 3199              	.LVL272:
 265:src/console.c ****     r = no_key;
 3200              		.loc 2 265 5 is_stmt 1 view .LVU865
 3201 00e8 FFF7FEFF 		bl	reset_shift
 3202              	.LVL273:
 266:src/console.c ****     break;
 3203              		.loc 2 266 5 view .LVU866
 266:src/console.c ****     break;
 3204              		.loc 2 266 7 is_stmt 0 view .LVU867
 3205 00ec 364B     		ldr	r3, .L316+8
 3206 00ee 93E80300 		ldm	r3, {r0, r1}
 3207 00f2 84E80300 		stm	r4, {r0, r1}
 3208              	.LVL274:
 267:src/console.c ****   case LDPRG:
 3209              		.loc 2 267 5 is_stmt 1 view .LVU868
 3210 00f6 B5E7     		b	.L296
 3211              	.LVL275:
 3212              	.L289:
 269:src/console.c ****     reset_shift();
 3213              		.loc 2 269 5 view .LVU869
 3214 00f8 FFF7FEFF 		bl	load_prog_file
 3215              	.LVL276:
 270:src/console.c ****     r = no_key;
 3216              		.loc 2 270 5 view .LVU870
 3217 00fc FFF7FEFF 		bl	reset_shift
 3218              	.LVL277:
 271:src/console.c ****     break;
 3219              		.loc 2 271 5 view .LVU871
 271:src/console.c ****     break;
 3220              		.loc 2 271 7 is_stmt 0 view .LVU872
 3221 0100 314B     		ldr	r3, .L316+8
 3222 0102 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/ccmw9yhH.s 			page 88


 3223 0106 84E80300 		stm	r4, {r0, r1}
 3224              	.LVL278:
 272:src/console.c ****   case SVPRG:
 3225              		.loc 2 272 5 is_stmt 1 view .LVU873
 3226 010a ABE7     		b	.L296
 3227              	.LVL279:
 3228              	.L288:
 282:src/console.c **** #endif
 3229              		.loc 2 282 5 view .LVU874
 3230 010c 2F4B     		ldr	r3, .L316+12
 3231 010e 3048     		ldr	r0, .L316+16
 3232              	.LVL280:
 282:src/console.c **** #endif
 3233              		.loc 2 282 5 is_stmt 0 view .LVU875
 3234 0110 9847     		blx	r3
 3235              	.LVL281:
 284:src/console.c ****     r = no_key;
 3236              		.loc 2 284 5 is_stmt 1 view .LVU876
 3237 0112 FFF7FEFF 		bl	reset_shift
 3238              	.LVL282:
 285:src/console.c ****     break;
 3239              		.loc 2 285 5 view .LVU877
 285:src/console.c ****     break;
 3240              		.loc 2 285 7 is_stmt 0 view .LVU878
 3241 0116 2C4B     		ldr	r3, .L316+8
 3242 0118 93E80300 		ldm	r3, {r0, r1}
 3243 011c 84E80300 		stm	r4, {r0, r1}
 3244              	.LVL283:
 286:src/console.c ****   case DOTS:
 3245              		.loc 2 286 5 is_stmt 1 view .LVU879
 3246 0120 A0E7     		b	.L296
 3247              	.LVL284:
 3248              	.L287:
 274:src/console.c ****     reset_shift();
 3249              		.loc 2 274 5 view .LVU880
 3250 0122 FFF7FEFF 		bl	save_prog_file
 3251              	.LVL285:
 275:src/console.c ****     r = no_key;
 3252              		.loc 2 275 5 view .LVU881
 3253 0126 FFF7FEFF 		bl	reset_shift
 3254              	.LVL286:
 276:src/console.c ****     break;
 3255              		.loc 2 276 5 view .LVU882
 276:src/console.c ****     break;
 3256              		.loc 2 276 7 is_stmt 0 view .LVU883
 3257 012a 274B     		ldr	r3, .L316+8
 3258 012c 93E80300 		ldm	r3, {r0, r1}
 3259 0130 84E80300 		stm	r4, {r0, r1}
 3260              	.LVL287:
 277:src/console.c ****   case HELP:
 3261              		.loc 2 277 5 is_stmt 1 view .LVU884
 3262 0134 96E7     		b	.L296
 3263              	.LVL288:
 3264              	.L286:
 288:src/console.c ****     reset_shift();
 3265              		.loc 2 288 5 view .LVU885
 3266 0136 FFF7FEFF 		bl	do_all_dots
ARM GAS  /tmp/ccmw9yhH.s 			page 89


 3267              	.LVL289:
 289:src/console.c ****     r = no_key;
 3268              		.loc 2 289 5 view .LVU886
 3269 013a FFF7FEFF 		bl	reset_shift
 3270              	.LVL290:
 290:src/console.c ****     break;
 3271              		.loc 2 290 5 view .LVU887
 290:src/console.c ****     break;
 3272              		.loc 2 290 7 is_stmt 0 view .LVU888
 3273 013e 224B     		ldr	r3, .L316+8
 3274 0140 93E80300 		ldm	r3, {r0, r1}
 3275 0144 84E80300 		stm	r4, {r0, r1}
 3276              	.LVL291:
 291:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3277              		.loc 2 291 5 is_stmt 1 view .LVU889
 3278 0148 8CE7     		b	.L296
 3279              	.LVL292:
 3280              	.L285:
 293:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3281              		.loc 2 293 5 view .LVU890
 3282              	.LBB123:
 3283              	.LBI123:
 229:src/console.c ****   struct _ndmap temp;
 3284              		.loc 2 229 6 view .LVU891
 3285              	.LBB124:
 230:src/console.c ****   temp.key_34s = key;
 3286              		.loc 2 230 3 view .LVU892
 231:src/console.c ****   temp.shift = shift;
 3287              		.loc 2 231 3 view .LVU893
 231:src/console.c ****   temp.shift = shift;
 3288              		.loc 2 231 16 is_stmt 0 view .LVU894
 3289 014a 6323     		movs	r3, #99
 232:src/console.c ****   process_keycode_with_shift (temp);
 3290              		.loc 2 232 14 view .LVU895
 3291 014c 0027     		movs	r7, #0
 231:src/console.c ****   temp.shift = shift;
 3292              		.loc 2 231 16 view .LVU896
 3293 014e 8DF80830 		strb	r3, [sp, #8]
 232:src/console.c ****   process_keycode_with_shift (temp);
 3294              		.loc 2 232 3 is_stmt 1 view .LVU897
 232:src/console.c ****   process_keycode_with_shift (temp);
 3295              		.loc 2 232 14 is_stmt 0 view .LVU898
 3296 0152 0397     		str	r7, [sp, #12]
 233:src/console.c **** }
 3297              		.loc 2 233 3 is_stmt 1 view .LVU899
 3298 0154 02AE     		add	r6, sp, #8
 3299 0156 96E80300 		ldm	r6, {r0, r1}
 3300              	.LVL293:
 233:src/console.c **** }
 3301              		.loc 2 233 3 is_stmt 0 view .LVU900
 3302 015a FFF7FEFF 		bl	process_keycode_with_shift
 3303              	.LVL294:
 233:src/console.c **** }
 3304              		.loc 2 233 3 view .LVU901
 3305              	.LBE124:
 3306              	.LBE123:
 294:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccmw9yhH.s 			page 90


 3307              		.loc 2 294 5 is_stmt 1 view .LVU902
 3308              	.LBB125:
 3309              	.LBI125:
 229:src/console.c ****   struct _ndmap temp;
 3310              		.loc 2 229 6 view .LVU903
 3311              	.LBB126:
 230:src/console.c ****   temp.key_34s = key;
 3312              		.loc 2 230 3 view .LVU904
 231:src/console.c ****   temp.shift = shift;
 3313              		.loc 2 231 3 view .LVU905
 231:src/console.c ****   temp.shift = shift;
 3314              		.loc 2 231 16 is_stmt 0 view .LVU906
 3315 015e 3323     		movs	r3, #51
 3316              	.LVL295:
 3317              	.L314:
 231:src/console.c ****   temp.shift = shift;
 3318              		.loc 2 231 16 view .LVU907
 3319              	.LBE126:
 3320              	.LBE125:
 3321              	.LBB127:
 3322              	.LBB128:
 232:src/console.c ****   process_keycode_with_shift (temp);
 3323              		.loc 2 232 14 view .LVU908
 3324 0160 0397     		str	r7, [sp, #12]
 231:src/console.c ****   temp.shift = shift;
 3325              		.loc 2 231 16 view .LVU909
 3326 0162 8DF80830 		strb	r3, [sp, #8]
 232:src/console.c ****   process_keycode_with_shift (temp);
 3327              		.loc 2 232 3 is_stmt 1 view .LVU910
 233:src/console.c **** }
 3328              		.loc 2 233 3 view .LVU911
 3329 0166 96E80300 		ldm	r6, {r0, r1}
 3330 016a FFF7FEFF 		bl	process_keycode_with_shift
 3331              	.LVL296:
 3332              	.LBE128:
 3333              	.LBE127:
 315:src/console.c ****     }
 3334              		.loc 2 315 7 view .LVU912
 315:src/console.c ****     }
 3335              		.loc 2 315 7 is_stmt 0 view .LVU913
 3336 016e 74E7     		b	.L280
 3337              	.LVL297:
 3338              	.L284:
 298:src/console.c ****     reset_shift();
 3339              		.loc 2 298 5 is_stmt 1 view .LVU914
 3340 0170 FFF7FEFF 		bl	toggle_default_menu
 3341              	.LVL298:
 299:src/console.c ****     r = no_key;
 3342              		.loc 2 299 5 view .LVU915
 3343 0174 FFF7FEFF 		bl	reset_shift
 3344              	.LVL299:
 300:src/console.c ****     break;
 3345              		.loc 2 300 5 view .LVU916
 300:src/console.c ****     break;
 3346              		.loc 2 300 7 is_stmt 0 view .LVU917
 3347 0178 134B     		ldr	r3, .L316+8
 3348 017a 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/ccmw9yhH.s 			page 91


 3349 017e 84E80300 		stm	r4, {r0, r1}
 3350              	.LVL300:
 301:src/console.c ****   case SETUMEN:
 3351              		.loc 2 301 5 is_stmt 1 view .LVU918
 3352 0182 6FE7     		b	.L296
 3353              	.LVL301:
 3354              	.L283:
 303:src/console.c ****     reset_shift();
 3355              		.loc 2 303 5 view .LVU919
 3356              	.LBB130:
 3357              	.LBI130:
 672:src/menu.c    ****   // find the label 'MNU'
 3358              		.loc 1 672 6 view .LVU920
 3359              	.LBB131:
 674:src/menu.c    ****    build_user_menu_from_program (lbl);
 3360              		.loc 1 674 4 view .LVU921
 675:src/menu.c    **** }
 3361              		.loc 1 675 4 view .LVU922
 3362 0184 1348     		ldr	r0, .L316+20
 3363              	.LVL302:
 675:src/menu.c    **** }
 3364              		.loc 1 675 4 is_stmt 0 view .LVU923
 3365 0186 FFF7FEFF 		bl	build_user_menu_from_program
 3366              	.LVL303:
 3367              	.LBE131:
 3368              	.LBE130:
 304:src/console.c ****     r = no_key;;
 3369              		.loc 2 304 5 is_stmt 1 view .LVU924
 3370 018a FFF7FEFF 		bl	reset_shift
 3371              	.LVL304:
 305:src/console.c ****     break;
 3372              		.loc 2 305 5 view .LVU925
 305:src/console.c ****     break;
 3373              		.loc 2 305 7 is_stmt 0 view .LVU926
 3374 018e 0E4B     		ldr	r3, .L316+8
 3375 0190 93E80300 		ldm	r3, {r0, r1}
 3376 0194 84E80300 		stm	r4, {r0, r1}
 3377              	.LVL305:
 305:src/console.c ****     break;
 3378              		.loc 2 305 16 is_stmt 1 view .LVU927
 306:src/console.c ****   case KCPX:
 3379              		.loc 2 306 5 view .LVU928
 3380 0198 64E7     		b	.L296
 3381              	.LVL306:
 3382              	.L297:
 313:src/console.c ****       do_now (K_RELEASE, 0);
 3383              		.loc 2 313 7 view .LVU929
 3384              	.LBB132:
 3385              	.LBI132:
 229:src/console.c ****   struct _ndmap temp;
 3386              		.loc 2 229 6 view .LVU930
 3387              	.LBB133:
 230:src/console.c ****   temp.key_34s = key;
 3388              		.loc 2 230 3 view .LVU931
 231:src/console.c ****   temp.shift = shift;
 3389              		.loc 2 231 3 view .LVU932
 231:src/console.c ****   temp.shift = shift;
ARM GAS  /tmp/ccmw9yhH.s 			page 92


 3390              		.loc 2 231 16 is_stmt 0 view .LVU933
 3391 019a 2D23     		movs	r3, #45
 232:src/console.c ****   process_keycode_with_shift (temp);
 3392              		.loc 2 232 14 view .LVU934
 3393 019c 0027     		movs	r7, #0
 231:src/console.c ****   temp.shift = shift;
 3394              		.loc 2 231 16 view .LVU935
 3395 019e 8DF80830 		strb	r3, [sp, #8]
 232:src/console.c ****   process_keycode_with_shift (temp);
 3396              		.loc 2 232 3 is_stmt 1 view .LVU936
 232:src/console.c ****   process_keycode_with_shift (temp);
 3397              		.loc 2 232 14 is_stmt 0 view .LVU937
 3398 01a2 0397     		str	r7, [sp, #12]
 233:src/console.c **** }
 3399              		.loc 2 233 3 is_stmt 1 view .LVU938
 3400 01a4 02AE     		add	r6, sp, #8
 3401 01a6 96E80300 		ldm	r6, {r0, r1}
 3402              	.LVL307:
 233:src/console.c **** }
 3403              		.loc 2 233 3 is_stmt 0 view .LVU939
 3404 01aa FFF7FEFF 		bl	process_keycode_with_shift
 3405              	.LVL308:
 233:src/console.c **** }
 3406              		.loc 2 233 3 view .LVU940
 3407              	.LBE133:
 3408              	.LBE132:
 314:src/console.c ****       r = no_key;
 3409              		.loc 2 314 7 is_stmt 1 view .LVU941
 3410              	.LBB134:
 3411              	.LBI127:
 229:src/console.c ****   struct _ndmap temp;
 3412              		.loc 2 229 6 view .LVU942
 3413              	.LBB129:
 230:src/console.c ****   temp.key_34s = key;
 3414              		.loc 2 230 3 view .LVU943
 231:src/console.c ****   temp.shift = shift;
 3415              		.loc 2 231 3 view .LVU944
 231:src/console.c ****   temp.shift = shift;
 3416              		.loc 2 231 16 is_stmt 0 view .LVU945
 3417 01ae 6323     		movs	r3, #99
 3418 01b0 D6E7     		b	.L314
 3419              	.LVL309:
 3420              	.L315:
 231:src/console.c ****   temp.shift = shift;
 3421              		.loc 2 231 16 view .LVU946
 3422              	.LBE129:
 3423              	.LBE134:
 3424              	.LBB135:
 3425              	.LBB122:
 128:src/menu.c    ****   }
 3426              		.loc 1 128 5 is_stmt 1 view .LVU947
 128:src/menu.c    ****   }
 3427              		.loc 1 128 18 is_stmt 0 view .LVU948
 3428 01b2 0949     		ldr	r1, .L316+24
 3429 01b4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3430 01b6 1170     		strb	r1, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccmw9yhH.s 			page 93


 3431              		.loc 1 136 3 is_stmt 1 view .LVU949
 3432              	.L299:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3433              		.loc 1 136 43 view .LVU950
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3434              		.loc 1 136 53 is_stmt 0 view .LVU951
 3435 01b8 084A     		ldr	r2, .L316+28
 3436 01ba 1370     		strb	r3, [r2]
 3437 01bc 4BE7     		b	.L300
 3438              	.L317:
 3439 01be 00BF     		.align	2
 3440              	.L316:
 3441 01c0 00000000 		.word	main_ram
 3442 01c4 00000000 		.word	.LANCHOR1
 3443 01c8 00000000 		.word	.LANCHOR10
 3444 01cc 49040008 		.word	134218825
 3445 01d0 00000000 		.word	.LC16
 3446 01d4 4DF04E55 		.word	1431236685
 3447 01d8 00000000 		.word	.LANCHOR2
 3448 01dc 00000000 		.word	.LANCHOR3
 3449              	.LBE122:
 3450              	.LBE135:
 3451              		.cfi_endproc
 3452              	.LFE32:
 3454              		.section	.text.program_main,"ax",%progbits
 3455              		.align	1
 3456              		.p2align 2,,3
 3457              		.global	program_main
 3458              		.syntax unified
 3459              		.thumb
 3460              		.thumb_func
 3461              		.fpu fpv4-sp-d16
 3463              	program_main:
 3464              	.LFB33:
 322:src/console.c **** 
 323:src/console.c **** /*
 324:src/console.c ****  *  Main loop
 325:src/console.c ****  */
 326:src/console.c **** void program_main(){
 3465              		.loc 2 326 20 is_stmt 1 view -0
 3466              		.cfi_startproc
 3467              		@ args = 0, pretend = 0, frame = 224
 3468              		@ frame_needed = 0, uses_anonymous_args = 0
 327:src/console.c ****   int c;
 3469              		.loc 2 327 3 view .LVU953
 328:src/console.c ****   struct _ndmap remapped;
 3470              		.loc 2 328 3 view .LVU954
 329:src/console.c **** 
 330:src/console.c ****   init_mem();
 3471              		.loc 2 330 3 view .LVU955
 326:src/console.c ****   int c;
 3472              		.loc 2 326 20 is_stmt 0 view .LVU956
 3473 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3474              		.cfi_def_cfa_offset 32
 3475              		.cfi_offset 4, -32
 3476              		.cfi_offset 5, -28
 3477              		.cfi_offset 6, -24
ARM GAS  /tmp/ccmw9yhH.s 			page 94


 3478              		.cfi_offset 7, -20
 3479              		.cfi_offset 8, -16
 3480              		.cfi_offset 9, -12
 3481              		.cfi_offset 10, -8
 3482              		.cfi_offset 14, -4
 3483 0004 B8B0     		sub	sp, sp, #224
 3484              		.cfi_def_cfa_offset 256
 3485              		.loc 2 330 3 view .LVU957
 3486 0006 FFF7FEFF 		bl	init_mem
 3487              	.LVL310:
 331:src/console.c ****   init_RegionTab();
 3488              		.loc 2 331 3 is_stmt 1 view .LVU958
 3489 000a FFF7FEFF 		bl	init_RegionTab
 3490              	.LVL311:
 332:src/console.c ****   init_34s();
 3491              		.loc 2 332 3 view .LVU959
 3492 000e FFF7FEFF 		bl	init_34s
 3493              	.LVL312:
 333:src/console.c ****   State2.flags = 1;  
 3494              		.loc 2 333 3 view .LVU960
 3495              		.loc 2 333 16 is_stmt 0 view .LVU961
 3496 0012 954A     		ldr	r2, .L421
 3497 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3498 0016 43F00103 		orr	r3, r3, #1
 3499 001a 1376     		strb	r3, [r2, #24]
 334:src/console.c ****   check_create_wp34sdir();
 3500              		.loc 2 334 3 is_stmt 1 view .LVU962
 3501 001c FFF7FEFF 		bl	check_create_wp34sdir
 3502              	.LVL313:
 335:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3503              		.loc 2 335 3 view .LVU963
 3504              		.loc 2 335 8 is_stmt 0 view .LVU964
 3505 0020 0020     		movs	r0, #0
 3506 0022 FFF7FEFF 		bl	load_ram_file
 3507              	.LVL314:
 3508              		.loc 2 335 6 view .LVU965
 3509 0026 08B9     		cbnz	r0, .L319
 3510              		.loc 2 335 26 is_stmt 1 discriminator 1 view .LVU966
 3511              		.loc 2 335 34 is_stmt 0 discriminator 1 view .LVU967
 3512 0028 904B     		ldr	r3, .L421+4
 3513 002a 1860     		str	r0, [r3]
 3514              	.L319:
 336:src/console.c ****   load_backup_file(0);
 3515              		.loc 2 336 3 is_stmt 1 view .LVU968
 3516 002c 0020     		movs	r0, #0
 3517 002e FFF7FEFF 		bl	load_backup_file
 3518              	.LVL315:
 337:src/console.c ****   load_lib_file(0);
 3519              		.loc 2 337 3 view .LVU969
 338:src/console.c ****   lcd_clear_buf();
 339:src/console.c ****   t20->newln = 0;
 3520              		.loc 2 339 3 is_stmt 0 view .LVU970
 3521 0032 8F4C     		ldr	r4, .L421+8
 3522 0034 8F4E     		ldr	r6, .L421+12
 340:src/console.c ****   t20->lnfill = 0;
 341:src/console.c ****   t20->fixed = 1;
 342:src/console.c ****   t20->xspc = -2;
ARM GAS  /tmp/ccmw9yhH.s 			page 95


 343:src/console.c ****   t20->bgfill = 0;
 344:src/console.c ****   run_menu_item_app = run_menu_item;
 345:src/console.c ****   menu_line_str_app = menu_line_str;
 346:src/console.c **** 
 347:src/console.c ****   display();
 348:src/console.c ****   display_current_menu();
 349:src/console.c ****   lcd_refresh();
 350:src/console.c ****   JustDisplayed = 0;
 351:src/console.c ****   /*
 352:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 353:src/console.c ****     Sleeps peacefully while waiting for a key.
 354:src/console.c ****     Handles (in principle!) turning off and on.
 355:src/console.c ****     =================
 356:src/console.c ****     Main event loop
 357:src/console.c ****     =================
 358:src/console.c **** 
 359:src/console.c ****     Status flags:
 360:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 361:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 362:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 363:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 364:src/console.c ****   */
 365:src/console.c ****   for(;;) {
 366:src/console.c **** 
 367:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 368:src/console.c ****       {
 369:src/console.c **** 	CLR_ST(STAT_RUNNING);
 370:src/console.c **** 	sys_sleep();
 371:src/console.c ****       }
 372:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3523              		.loc 2 372 35 view .LVU971
 3524 0036 904F     		ldr	r7, .L421+16
 373:src/console.c ****     {
 374:src/console.c ****       CLR_ST(STAT_RUNNING);
 375:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3525              		.loc 2 375 7 view .LVU972
 3526 0038 DFF8A082 		ldr	r8, .L421+116
 337:src/console.c ****   lcd_clear_buf();
 3527              		.loc 2 337 3 view .LVU973
 3528 003c 0020     		movs	r0, #0
 3529 003e FFF7FEFF 		bl	load_lib_file
 3530              	.LVL316:
 338:src/console.c ****   t20->newln = 0;
 3531              		.loc 2 338 3 is_stmt 1 view .LVU974
 3532 0042 8E4B     		ldr	r3, .L421+20
 3533 0044 9847     		blx	r3
 3534              	.LVL317:
 339:src/console.c ****   t20->lnfill = 0;
 3535              		.loc 2 339 3 view .LVU975
 3536 0046 236B     		ldr	r3, [r4, #48]
 340:src/console.c ****   t20->fixed = 1;
 3537              		.loc 2 340 3 view .LVU976
 341:src/console.c ****   t20->xspc = -2;
 3538              		.loc 2 341 3 view .LVU977
 344:src/console.c ****   menu_line_str_app = menu_line_str;
 3539              		.loc 2 344 21 is_stmt 0 view .LVU978
 3540 0048 8D4A     		ldr	r2, .L421+24
ARM GAS  /tmp/ccmw9yhH.s 			page 96


 341:src/console.c ****   t20->xspc = -2;
 3541              		.loc 2 341 14 view .LVU979
 3542 004a 0121     		movs	r1, #1
 3543 004c 1974     		strb	r1, [r3, #16]
 342:src/console.c ****   t20->bgfill = 0;
 3544              		.loc 2 342 3 is_stmt 1 view .LVU980
 343:src/console.c ****   run_menu_item_app = run_menu_item;
 3545              		.loc 2 343 15 is_stmt 0 view .LVU981
 3546 004e 0025     		movs	r5, #0
 342:src/console.c ****   t20->bgfill = 0;
 3547              		.loc 2 342 13 view .LVU982
 3548 0050 FE21     		movs	r1, #254
 3549 0052 9973     		strb	r1, [r3, #14]
 343:src/console.c ****   run_menu_item_app = run_menu_item;
 3550              		.loc 2 343 3 is_stmt 1 view .LVU983
 343:src/console.c ****   run_menu_item_app = run_menu_item;
 3551              		.loc 2 343 15 is_stmt 0 view .LVU984
 3552 0054 5D82     		strh	r5, [r3, #18]	@ movhi
 339:src/console.c ****   t20->lnfill = 0;
 3553              		.loc 2 339 14 view .LVU985
 3554 0056 1D75     		strb	r5, [r3, #20]
 344:src/console.c ****   menu_line_str_app = menu_line_str;
 3555              		.loc 2 344 3 is_stmt 1 view .LVU986
 345:src/console.c **** 
 3556              		.loc 2 345 21 is_stmt 0 view .LVU987
 3557 0058 8A4B     		ldr	r3, .L421+28
 344:src/console.c ****   menu_line_str_app = menu_line_str;
 3558              		.loc 2 344 21 view .LVU988
 3559 005a E260     		str	r2, [r4, #12]
 345:src/console.c **** 
 3560              		.loc 2 345 3 is_stmt 1 view .LVU989
 345:src/console.c **** 
 3561              		.loc 2 345 21 is_stmt 0 view .LVU990
 3562 005c 2361     		str	r3, [r4, #16]
 347:src/console.c ****   display_current_menu();
 3563              		.loc 2 347 3 is_stmt 1 view .LVU991
 3564 005e FFF7FEFF 		bl	display
 3565              	.LVL318:
 348:src/console.c ****   lcd_refresh();
 3566              		.loc 2 348 3 view .LVU992
 3567 0062 FFF7FEFF 		bl	display_current_menu
 3568              	.LVL319:
 349:src/console.c ****   JustDisplayed = 0;
 3569              		.loc 2 349 3 view .LVU993
 3570 0066 884B     		ldr	r3, .L421+32
 3571 0068 9847     		blx	r3
 3572              	.LVL320:
 350:src/console.c ****   /*
 3573              		.loc 2 350 3 view .LVU994
 350:src/console.c ****   /*
 3574              		.loc 2 350 17 is_stmt 0 view .LVU995
 3575 006a 884B     		ldr	r3, .L421+36
 3576 006c 1D60     		str	r5, [r3]
 3577              	.L320:
 365:src/console.c **** 
 3578              		.loc 2 365 3 is_stmt 1 view .LVU996
 367:src/console.c ****       {
ARM GAS  /tmp/ccmw9yhH.s 			page 97


 3579              		.loc 2 367 5 view .LVU997
 367:src/console.c ****       {
 3580              		.loc 2 367 10 is_stmt 0 view .LVU998
 3581 006e 2368     		ldr	r3, [r4]
 367:src/console.c ****       {
 3582              		.loc 2 367 8 view .LVU999
 3583 0070 9B05     		lsls	r3, r3, #22
 3584 0072 40F1BA80 		bpl	.L321
 367:src/console.c ****       {
 3585              		.loc 2 367 30 discriminator 1 view .LVU1000
 3586 0076 2368     		ldr	r3, [r4]
 367:src/console.c ****       {
 3587              		.loc 2 367 27 discriminator 1 view .LVU1001
 3588 0078 5D07     		lsls	r5, r3, #29
 3589 007a 40F1B680 		bpl	.L321
 369:src/console.c **** 	sys_sleep();
 3590              		.loc 2 369 2 is_stmt 1 view .LVU1002
 3591 007e 2368     		ldr	r3, [r4]
 370:src/console.c ****       }
 3592              		.loc 2 370 2 is_stmt 0 view .LVU1003
 3593 0080 834A     		ldr	r2, .L421+40
 369:src/console.c **** 	sys_sleep();
 3594              		.loc 2 369 2 view .LVU1004
 3595 0082 23F00203 		bic	r3, r3, #2
 3596 0086 2360     		str	r3, [r4]
 370:src/console.c ****       }
 3597              		.loc 2 370 2 is_stmt 1 view .LVU1005
 3598 0088 9047     		blx	r2
 3599              	.LVL321:
 3600              	.L322:
 376:src/console.c ****       sys_sleep();
 377:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 378:src/console.c **** 	key_push (K_HEARTBEAT);
 379:src/console.c **** 	if (Pause > 0) Pause--;
 380:src/console.c ****       }
 381:src/console.c ****       sys_timer_disable(0); // stop timer
 382:src/console.c ****     }
 383:src/console.c ****     
 384:src/console.c ****     // Wakeup in off state or going to sleep
 385:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3601              		.loc 2 385 5 view .LVU1006
 3602              		.loc 2 385 9 is_stmt 0 view .LVU1007
 3603 008a 2368     		ldr	r3, [r4]
 3604              		.loc 2 385 8 view .LVU1008
 3605 008c 9805     		lsls	r0, r3, #22
 3606 008e 00F1D380 		bmi	.L328
 3607              	.L414:
 3608              		.loc 2 385 29 discriminator 1 view .LVU1009
 3609 0092 2368     		ldr	r3, [r4]
 3610              		.loc 2 385 26 discriminator 1 view .LVU1010
 3611 0094 5907     		lsls	r1, r3, #29
 3612 0096 00F1CF80 		bmi	.L328
 386:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 387:src/console.c ****         // Going to off mode
 388:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 389:src/console.c ****         draw_power_off_image(1);
 390:src/console.c **** 
ARM GAS  /tmp/ccmw9yhH.s 			page 98


 391:src/console.c ****         LCD_power_off(0);
 392:src/console.c ****         SET_ST(STAT_SUSPENDED);
 393:src/console.c ****         SET_ST(STAT_OFF);
 394:src/console.c ****       }
 395:src/console.c ****       // Already in OFF -> just continue to sleep above
 396:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 397:src/console.c ****       // thus reaching the sleep()
 398:src/console.c ****     }
 399:src/console.c **** 
 400:src/console.c ****     // Well, we are woken-up
 401:src/console.c ****     SET_ST(STAT_RUNNING);
 3613              		.loc 2 401 5 is_stmt 1 view .LVU1011
 3614 009a 2368     		ldr	r3, [r4]
 3615 009c 43F00203 		orr	r3, r3, #2
 3616 00a0 2360     		str	r3, [r4]
 402:src/console.c **** 
 403:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 404:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3617              		.loc 2 404 5 view .LVU1012
 3618 00a2 2368     		ldr	r3, [r4]
 3619 00a4 23F00403 		bic	r3, r3, #4
 3620 00a8 2360     		str	r3, [r4]
 405:src/console.c **** 
 406:src/console.c ****     // Get up from OFF state
 407:src/console.c ****     if ( ST(STAT_OFF) ) {
 3621              		.loc 2 407 5 view .LVU1013
 3622              		.loc 2 407 10 is_stmt 0 view .LVU1014
 3623 00aa 2368     		ldr	r3, [r4]
 3624              		.loc 2 407 8 view .LVU1015
 3625 00ac DA06     		lsls	r2, r3, #27
 3626 00ae 0ED5     		bpl	.L333
 408:src/console.c ****       LCD_power_on();
 3627              		.loc 2 408 7 is_stmt 1 view .LVU1016
 3628 00b0 784B     		ldr	r3, .L421+44
 3629 00b2 9847     		blx	r3
 3630              	.LVL322:
 409:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3631              		.loc 2 409 7 view .LVU1017
 3632 00b4 784B     		ldr	r3, .L421+48
 3633 00b6 9847     		blx	r3
 3634              	.LVL323:
 410:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3635              		.loc 2 410 7 view .LVU1018
 3636 00b8 784B     		ldr	r3, .L421+52
 3637 00ba 9847     		blx	r3
 3638              	.LVL324:
 411:src/console.c **** 
 412:src/console.c ****       CLR_ST(STAT_OFF);
 3639              		.loc 2 412 7 view .LVU1019
 3640 00bc 2368     		ldr	r3, [r4]
 413:src/console.c **** 
 414:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3641              		.loc 2 414 13 is_stmt 0 view .LVU1020
 3642 00be 784A     		ldr	r2, .L421+56
 412:src/console.c **** 
 3643              		.loc 2 412 7 view .LVU1021
 3644 00c0 23F01003 		bic	r3, r3, #16
ARM GAS  /tmp/ccmw9yhH.s 			page 99


 3645 00c4 2360     		str	r3, [r4]
 3646              		.loc 2 414 7 is_stmt 1 view .LVU1022
 3647              		.loc 2 414 13 is_stmt 0 view .LVU1023
 3648 00c6 9047     		blx	r2
 3649              	.LVL325:
 3650              		.loc 2 414 10 view .LVU1024
 3651 00c8 08B9     		cbnz	r0, .L333
 415:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3652              		.loc 2 415 9 is_stmt 1 view .LVU1025
 3653 00ca 764B     		ldr	r3, .L421+60
 3654 00cc 9847     		blx	r3
 3655              	.LVL326:
 3656              	.L333:
 416:src/console.c ****     }
 417:src/console.c **** 
 418:src/console.c ****     // Key is ready -> clear auto off timer
 419:src/console.c ****     //    if ( !key_empty() )
 420:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 421:src/console.c ****     // Fetch the key
 422:src/console.c ****     //  < 0 -> No key event
 423:src/console.c ****     //  > 0 -> Key pressed
 424:src/console.c ****     // == 0 -> Key released
 425:src/console.c ****     c = key_pop();
 3657              		.loc 2 425 5 view .LVU1026
 3658              		.loc 2 425 9 is_stmt 0 view .LVU1027
 3659 00ce 764B     		ldr	r3, .L421+64
 3660 00d0 9847     		blx	r3
 3661              	.LVL327:
 426:src/console.c **** #ifdef INCLUDE_STOPWATCH
 427:src/console.c ****     if ( KeyCallback != NULL ) {
 3662              		.loc 2 427 22 view .LVU1028
 3663 00d2 3368     		ldr	r3, [r6]
 425:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3664              		.loc 2 425 9 view .LVU1029
 3665 00d4 0546     		mov	r5, r0
 3666              	.LVL328:
 3667              		.loc 2 427 5 is_stmt 1 view .LVU1030
 3668              		.loc 2 427 8 is_stmt 0 view .LVU1031
 3669 00d6 002B     		cmp	r3, #0
 3670 00d8 00F04181 		beq	.L335
 428:src/console.c ****       c = (*KeyCallback)( c );
 3671              		.loc 2 428 7 is_stmt 1 view .LVU1032
 3672              		.loc 2 428 12 is_stmt 0 view .LVU1033
 3673 00dc 9847     		blx	r3
 3674              	.LVL329:
 3675              		.loc 2 428 12 view .LVU1034
 3676 00de 0546     		mov	r5, r0
 3677              	.LVL330:
 3678              	.L336:
 429:src/console.c ****     }
 430:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 431:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 432:src/console.c ****       lcd_refresh();
 433:src/console.c ****     }
 434:src/console.c **** #endif
 435:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3679              		.loc 2 435 5 is_stmt 1 view .LVU1035
ARM GAS  /tmp/ccmw9yhH.s 			page 100


 3680              		.loc 2 435 8 is_stmt 0 view .LVU1036
 3681 00e0 622D     		cmp	r5, #98
 3682 00e2 00F0FD80 		beq	.L337
 3683              		.loc 2 435 29 discriminator 1 view .LVU1037
 3684 00e6 002D     		cmp	r5, #0
 3685 00e8 C1DB     		blt	.L320
 436:src/console.c ****       reset_auto_off();
 3686              		.loc 2 436 7 is_stmt 1 view .LVU1038
 3687 00ea 704B     		ldr	r3, .L421+68
 3688 00ec 9847     		blx	r3
 3689              	.LVL331:
 437:src/console.c ****       //      start_key_timer();
 438:src/console.c ****     }
 439:src/console.c ****     if (c >= 0) {
 3690              		.loc 2 439 5 view .LVU1039
 440:src/console.c ****       remapped = remap(c);
 3691              		.loc 2 440 7 view .LVU1040
 3692              	.LBB143:
 3693              	.LBI143:
  56:src/console.c **** 
 3694              		.loc 2 56 22 view .LVU1041
 3695              	.LBB144:
  58:src/console.c **** 
 3696              		.loc 2 58 3 view .LVU1042
 3697              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3698              		.loc 3 1 1 view .LVU1043
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
ARM GAS  /tmp/ccmw9yhH.s 			page 101


  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3699              		.loc 3 59 3 view .LVU1044
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
ARM GAS  /tmp/ccmw9yhH.s 			page 102


  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3700              		.loc 3 118 3 view .LVU1045
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
ARM GAS  /tmp/ccmw9yhH.s 			page 103


 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3701              		.loc 3 177 1 view .LVU1046
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
ARM GAS  /tmp/ccmw9yhH.s 			page 104


 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3702              		.loc 3 235 1 view .LVU1047
  62:src/console.c **** 
 3703              		.loc 2 62 3 view .LVU1048
  64:src/console.c **** 
 3704              		.loc 2 64 3 view .LVU1049
  64:src/console.c **** 
 3705              		.loc 2 64 6 is_stmt 0 view .LVU1050
 3706 00ee 632D     		cmp	r5, #99
 3707 00f0 00F08681 		beq	.L402
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3708              		.loc 2 66 3 is_stmt 1 view .LVU1051
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3709              		.loc 2 66 6 is_stmt 0 view .LVU1052
 3710 00f4 2C2D     		cmp	r5, #44
 3711 00f6 00F05381 		beq	.L340
  71:src/console.c ****     return mapping_running[c];
 3712              		.loc 2 71 3 is_stmt 1 view .LVU1053
  71:src/console.c ****     return mapping_running[c];
 3713              		.loc 2 71 15 is_stmt 0 view .LVU1054
 3714 00fa 6D4A     		ldr	r2, .L421+72
 3715 00fc 6D4B     		ldr	r3, .L421+76
ARM GAS  /tmp/ccmw9yhH.s 			page 105


 3716 00fe 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3717 0102 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3718              		.loc 2 71 6 view .LVU1055
 3719 0104 59EA0109 		orrs	r9, r9, r1
 3720 0108 40F06D81 		bne	.L403
  75:src/console.c ****   
 3721              		.loc 2 75 3 is_stmt 1 view .LVU1056
  75:src/console.c ****   
 3722              		.loc 2 75 22 is_stmt 0 view .LVU1057
 3723 010c 04A8     		add	r0, sp, #16
 3724 010e FFF7FEFF 		bl	get_current_menu_ref
 3725              	.LVL332:
  77:src/console.c ****   case KEY_F1:
 3726              		.loc 2 77 3 is_stmt 1 view .LVU1058
 3727 0112 A5F12603 		sub	r3, r5, #38
 3728 0116 052B     		cmp	r3, #5
 3729 0118 00F27C81 		bhi	.L342
 3730 011c DFE813F0 		tbh	[pc, r3, lsl #1]
 3731              	.L344:
 3732 0120 8201     		.2byte	(.L349-.L344)/2
 3733 0122 0B00     		.2byte	(.L348-.L344)/2
 3734 0124 1500     		.2byte	(.L347-.L344)/2
 3735 0126 1F00     		.2byte	(.L346-.L344)/2
 3736 0128 2900     		.2byte	(.L345-.L344)/2
 3737 012a 3300     		.2byte	(.L343-.L344)/2
 3738              		.p2align 1
 3739              	.L350:
  80:src/console.c ****   case KEY_F2:
 3740              		.loc 2 80 5 view .LVU1059
  80:src/console.c ****   case KEY_F2:
 3741              		.loc 2 80 9 is_stmt 0 view .LVU1060
 3742 012c FFF7FEFF 		bl	cur_shift
 3743              	.LVL333:
  80:src/console.c ****   case KEY_F2:
 3744              		.loc 2 80 8 view .LVU1061
 3745 0130 0128     		cmp	r0, #1
 3746 0132 00F01482 		beq	.L404
 3747              	.L348:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3748              		.loc 2 82 5 is_stmt 1 view .LVU1062
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3749              		.loc 2 82 9 is_stmt 0 view .LVU1063
 3750 0136 FFF7FEFF 		bl	cur_shift
 3751              	.LVL334:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3752              		.loc 2 82 8 view .LVU1064
 3753 013a 0028     		cmp	r0, #0
 3754 013c 00F09F81 		beq	.L405
  83:src/console.c ****   case KEY_F3:
 3755              		.loc 2 83 5 is_stmt 1 view .LVU1065
  83:src/console.c ****   case KEY_F3:
 3756              		.loc 2 83 9 is_stmt 0 view .LVU1066
 3757 0140 FFF7FEFF 		bl	cur_shift
 3758              	.LVL335:
  83:src/console.c ****   case KEY_F3:
 3759              		.loc 2 83 8 view .LVU1067
ARM GAS  /tmp/ccmw9yhH.s 			page 106


 3760 0144 0128     		cmp	r0, #1
 3761 0146 00F0E481 		beq	.L406
 3762              	.L347:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3763              		.loc 2 85 5 is_stmt 1 view .LVU1068
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3764              		.loc 2 85 9 is_stmt 0 view .LVU1069
 3765 014a FFF7FEFF 		bl	cur_shift
 3766              	.LVL336:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3767              		.loc 2 85 8 view .LVU1070
 3768 014e 0028     		cmp	r0, #0
 3769 0150 00F08B81 		beq	.L407
  86:src/console.c ****   case KEY_F4:
 3770              		.loc 2 86 5 is_stmt 1 view .LVU1071
  86:src/console.c ****   case KEY_F4:
 3771              		.loc 2 86 9 is_stmt 0 view .LVU1072
 3772 0154 FFF7FEFF 		bl	cur_shift
 3773              	.LVL337:
  86:src/console.c ****   case KEY_F4:
 3774              		.loc 2 86 8 view .LVU1073
 3775 0158 0128     		cmp	r0, #1
 3776 015a 00F0D081 		beq	.L408
 3777              	.L346:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3778              		.loc 2 88 5 is_stmt 1 view .LVU1074
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3779              		.loc 2 88 9 is_stmt 0 view .LVU1075
 3780 015e FFF7FEFF 		bl	cur_shift
 3781              	.LVL338:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3782              		.loc 2 88 8 view .LVU1076
 3783 0162 0028     		cmp	r0, #0
 3784 0164 00F07781 		beq	.L409
  89:src/console.c ****   case KEY_F5:
 3785              		.loc 2 89 5 is_stmt 1 view .LVU1077
  89:src/console.c ****   case KEY_F5:
 3786              		.loc 2 89 9 is_stmt 0 view .LVU1078
 3787 0168 FFF7FEFF 		bl	cur_shift
 3788              	.LVL339:
  89:src/console.c ****   case KEY_F5:
 3789              		.loc 2 89 8 view .LVU1079
 3790 016c 0128     		cmp	r0, #1
 3791 016e 00F0B281 		beq	.L410
 3792              	.L345:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3793              		.loc 2 91 5 is_stmt 1 view .LVU1080
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3794              		.loc 2 91 9 is_stmt 0 view .LVU1081
 3795 0172 FFF7FEFF 		bl	cur_shift
 3796              	.LVL340:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3797              		.loc 2 91 8 view .LVU1082
 3798 0176 0028     		cmp	r0, #0
 3799 0178 00F06381 		beq	.L411
  92:src/console.c ****   case KEY_F6:
 3800              		.loc 2 92 5 is_stmt 1 view .LVU1083
ARM GAS  /tmp/ccmw9yhH.s 			page 107


  92:src/console.c ****   case KEY_F6:
 3801              		.loc 2 92 9 is_stmt 0 view .LVU1084
 3802 017c FFF7FEFF 		bl	cur_shift
 3803              	.LVL341:
  92:src/console.c ****   case KEY_F6:
 3804              		.loc 2 92 8 view .LVU1085
 3805 0180 0128     		cmp	r0, #1
 3806 0182 00F0B281 		beq	.L412
 3807              	.L343:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3808              		.loc 2 94 5 is_stmt 1 view .LVU1086
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3809              		.loc 2 94 9 is_stmt 0 view .LVU1087
 3810 0186 FFF7FEFF 		bl	cur_shift
 3811              	.LVL342:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3812              		.loc 2 94 8 view .LVU1088
 3813 018a 0028     		cmp	r0, #0
 3814 018c 40F03E81 		bne	.L355
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3815              		.loc 2 94 33 is_stmt 1 view .LVU1089
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3816              		.loc 2 94 51 is_stmt 0 view .LVU1090
 3817 0190 DDE93001 		ldrd	r0, r1, [sp, #192]
 3818 0194 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3819              	.LVL343:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3820              		.loc 2 94 51 view .LVU1091
 3821 0198 0DF1080A 		add	r10, sp, #8
 3822              	.LBE144:
 3823              	.LBE143:
 441:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3824              		.loc 2 441 10 view .LVU1092
 3825 019c 2F2D     		cmp	r5, #47
 3826              	.LBB153:
 3827              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3828              		.loc 2 94 51 view .LVU1093
 3829 019e 8AE80300 		stm	r10, {r0, r1}
 3830 01a2 8946     		mov	r9, r1
 3831              	.LVL344:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3832              		.loc 2 94 51 view .LVU1094
 3833              	.LBE146:
 3834              	.LBE153:
 3835              		.loc 2 441 7 is_stmt 1 view .LVU1095
 3836              		.loc 2 441 10 is_stmt 0 view .LVU1096
 3837 01a4 40F0A880 		bne	.L366
 3838              	.LVL345:
 3839              	.L415:
 442:src/console.c **** 	set_menu ( remapped.shift );
 3840              		.loc 2 442 2 is_stmt 1 view .LVU1097
 3841              	.LBB154:
 3842              	.LBB155:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3843              		.loc 1 126 13 is_stmt 0 view .LVU1098
 3844 01a8 434A     		ldr	r2, .L421+80
ARM GAS  /tmp/ccmw9yhH.s 			page 108


 3845 01aa 92F90030 		ldrsb	r3, [r2]
 3846              	.LBE155:
 3847              	.LBE154:
 3848              		.loc 2 442 2 view .LVU1099
 3849 01ae 4FFA89F1 		sxtb	r1, r9
 3850              	.LVL346:
 3851              	.LBB158:
 3852              	.LBI154:
 125:src/menu.c    ****   menu_name m = current_menu;
 3853              		.loc 1 125 6 is_stmt 1 view .LVU1100
 3854              	.LBB156:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3855              		.loc 1 126 3 view .LVU1101
 127:src/menu.c    ****     current_menu = default_menu;
 3856              		.loc 1 127 3 view .LVU1102
 127:src/menu.c    ****     current_menu = default_menu;
 3857              		.loc 1 127 6 is_stmt 0 view .LVU1103
 3858 01b2 9942     		cmp	r1, r3
 3859 01b4 00F02681 		beq	.L413
 130:src/menu.c    ****     current_menu = last_menu;
 3860              		.loc 1 130 8 is_stmt 1 view .LVU1104
 130:src/menu.c    ****     current_menu = last_menu;
 3861              		.loc 1 130 11 is_stmt 0 view .LVU1105
 3862 01b8 481C     		adds	r0, r1, #1
 131:src/menu.c    ****   }
 3863              		.loc 1 131 5 is_stmt 1 view .LVU1106
 131:src/menu.c    ****   }
 3864              		.loc 1 131 18 is_stmt 0 view .LVU1107
 3865 01ba 04BF     		itt	eq
 3866 01bc 3F49     		ldreq	r1, .L421+84
 3867              	.LVL347:
 131:src/menu.c    ****   }
 3868              		.loc 1 131 18 view .LVU1108
 3869 01be 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 134:src/menu.c    ****   }
 3870              		.loc 1 134 5 is_stmt 1 view .LVU1109
 134:src/menu.c    ****   }
 3871              		.loc 1 134 18 is_stmt 0 view .LVU1110
 3872 01c0 1170     		strb	r1, [r2]
 3873              	.LVL348:
 3874              	.L368:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3875              		.loc 1 136 3 is_stmt 1 view .LVU1111
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3876              		.loc 1 136 6 is_stmt 0 view .LVU1112
 3877 01c2 092B     		cmp	r3, #9
 3878 01c4 03D0     		beq	.L370
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3879              		.loc 1 136 23 view .LVU1113
 3880 01c6 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3881              		.loc 1 136 43 is_stmt 1 view .LVU1114
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3882              		.loc 1 136 53 is_stmt 0 view .LVU1115
 3883 01c8 1CBF     		itt	ne
 3884 01ca 3C4A     		ldrne	r2, .L421+84
 3885 01cc 1370     		strbne	r3, [r2]
ARM GAS  /tmp/ccmw9yhH.s 			page 109


 3886              	.L370:
 3887              	.LVL349:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3888              		.loc 1 136 53 view .LVU1116
 3889              	.LBE156:
 3890              	.LBE158:
 443:src/console.c **** 	display_current_menu ();
 3891              		.loc 2 443 2 is_stmt 1 view .LVU1117
 3892 01ce FFF7FEFF 		bl	display_current_menu
 3893              	.LVL350:
 444:src/console.c **** 	reset_shift();
 3894              		.loc 2 444 2 view .LVU1118
 3895 01d2 FFF7FEFF 		bl	reset_shift
 3896              	.LVL351:
 445:src/console.c **** 	remapped = no_key;
 3897              		.loc 2 445 2 view .LVU1119
 3898              		.loc 2 445 11 is_stmt 0 view .LVU1120
 3899 01d6 3A4B     		ldr	r3, .L421+88
 3900 01d8 93E80300 		ldm	r3, {r0, r1}
 3901 01dc 0DF1080A 		add	r10, sp, #8
 3902 01e0 8AE80300 		stm	r10, {r0, r1}
 3903 01e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3904              	.LVL352:
 3905              		.loc 2 445 11 view .LVU1121
 3906 01e6 8946     		mov	r9, r1
 3907              	.LVL353:
 3908              		.loc 2 445 11 view .LVU1122
 3909 01e8 86E0     		b	.L366
 3910              	.LVL354:
 3911              	.L321:
 372:src/console.c ****     {
 3912              		.loc 2 372 10 is_stmt 1 view .LVU1123
 372:src/console.c ****     {
 3913              		.loc 2 372 15 is_stmt 0 view .LVU1124
 3914 01ea 2568     		ldr	r5, [r4]
 372:src/console.c ****     {
 3915              		.loc 2 372 13 view .LVU1125
 3916 01ec 15F40075 		ands	r5, r5, #512
 3917 01f0 7FF44BAF 		bne	.L322
 372:src/console.c ****     {
 3918              		.loc 2 372 35 discriminator 1 view .LVU1126
 3919 01f4 B847     		blx	r7
 3920              	.LVL355:
 372:src/console.c ****     {
 3921              		.loc 2 372 32 discriminator 1 view .LVU1127
 3922 01f6 0028     		cmp	r0, #0
 3923 01f8 3FF447AF 		beq	.L322
 374:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3924              		.loc 2 374 7 is_stmt 1 view .LVU1128
 3925 01fc 2368     		ldr	r3, [r4]
 3926 01fe 23F00203 		bic	r3, r3, #2
 375:src/console.c ****       sys_sleep();
 3927              		.loc 2 375 7 is_stmt 0 view .LVU1129
 3928 0202 2846     		mov	r0, r5
 3929 0204 6421     		movs	r1, #100
 374:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3930              		.loc 2 374 7 view .LVU1130
ARM GAS  /tmp/ccmw9yhH.s 			page 110


 3931 0206 2360     		str	r3, [r4]
 375:src/console.c ****       sys_sleep();
 3932              		.loc 2 375 7 is_stmt 1 view .LVU1131
 3933 0208 C047     		blx	r8
 3934              	.LVL356:
 376:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3935              		.loc 2 376 7 view .LVU1132
 3936 020a 214B     		ldr	r3, .L421+40
 3937 020c 9847     		blx	r3
 3938              	.LVL357:
 377:src/console.c **** 	key_push (K_HEARTBEAT);
 3939              		.loc 2 377 7 view .LVU1133
 377:src/console.c **** 	key_push (K_HEARTBEAT);
 3940              		.loc 2 377 11 is_stmt 0 view .LVU1134
 3941 020e 2D4B     		ldr	r3, .L421+92
 3942 0210 2846     		mov	r0, r5
 3943 0212 9847     		blx	r3
 3944              	.LVL358:
 377:src/console.c **** 	key_push (K_HEARTBEAT);
 3945              		.loc 2 377 10 view .LVU1135
 3946 0214 48B1     		cbz	r0, .L326
 378:src/console.c **** 	if (Pause > 0) Pause--;
 3947              		.loc 2 378 2 is_stmt 1 view .LVU1136
 3948 0216 2C4B     		ldr	r3, .L421+96
 3949 0218 6220     		movs	r0, #98
 3950 021a 9847     		blx	r3
 3951              	.LVL359:
 379:src/console.c ****       }
 3952              		.loc 2 379 2 view .LVU1137
 379:src/console.c ****       }
 3953              		.loc 2 379 12 is_stmt 0 view .LVU1138
 3954 021c 244B     		ldr	r3, .L421+72
 3955 021e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 379:src/console.c ****       }
 3956              		.loc 2 379 5 view .LVU1139
 3957 0220 1AB1     		cbz	r2, .L326
 379:src/console.c ****       }
 3958              		.loc 2 379 17 is_stmt 1 discriminator 1 view .LVU1140
 379:src/console.c ****       }
 3959              		.loc 2 379 22 is_stmt 0 discriminator 1 view .LVU1141
 3960 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3961 0224 013A     		subs	r2, r2, #1
 3962 0226 D2B2     		uxtb	r2, r2
 3963 0228 1A70     		strb	r2, [r3]
 3964              	.L326:
 381:src/console.c ****     }
 3965              		.loc 2 381 7 is_stmt 1 view .LVU1142
 3966 022a 284B     		ldr	r3, .L421+100
 3967 022c 0020     		movs	r0, #0
 3968 022e 9847     		blx	r3
 3969              	.LVL360:
 385:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3970              		.loc 2 385 5 view .LVU1143
 385:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3971              		.loc 2 385 9 is_stmt 0 view .LVU1144
 3972 0230 2368     		ldr	r3, [r4]
 385:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
ARM GAS  /tmp/ccmw9yhH.s 			page 111


 3973              		.loc 2 385 8 view .LVU1145
 3974 0232 9805     		lsls	r0, r3, #22
 3975 0234 7FF52DAF 		bpl	.L414
 3976              	.L328:
 386:src/console.c ****         // Going to off mode
 3977              		.loc 2 386 7 is_stmt 1 view .LVU1146
 386:src/console.c ****         // Going to off mode
 3978              		.loc 2 386 12 is_stmt 0 view .LVU1147
 3979 0238 2568     		ldr	r5, [r4]
 386:src/console.c ****         // Going to off mode
 3980              		.loc 2 386 10 view .LVU1148
 3981 023a 15F00405 		ands	r5, r5, #4
 3982 023e 7FF416AF 		bne	.L320
 388:src/console.c ****         draw_power_off_image(1);
 3983              		.loc 2 388 9 is_stmt 1 view .LVU1149
 3984 0242 234B     		ldr	r3, .L421+104
 3985 0244 2846     		mov	r0, r5
 3986 0246 9847     		blx	r3
 3987              	.LVL361:
 389:src/console.c **** 
 3988              		.loc 2 389 9 view .LVU1150
 3989 0248 224B     		ldr	r3, .L421+108
 3990 024a 0120     		movs	r0, #1
 3991 024c 9847     		blx	r3
 3992              	.LVL362:
 391:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3993              		.loc 2 391 9 view .LVU1151
 3994 024e 224B     		ldr	r3, .L421+112
 3995 0250 2846     		mov	r0, r5
 3996 0252 9847     		blx	r3
 3997              	.LVL363:
 392:src/console.c ****         SET_ST(STAT_OFF);
 3998              		.loc 2 392 9 view .LVU1152
 3999 0254 2368     		ldr	r3, [r4]
 4000 0256 43F00403 		orr	r3, r3, #4
 4001 025a 2360     		str	r3, [r4]
 393:src/console.c ****       }
 4002              		.loc 2 393 9 view .LVU1153
 4003 025c 2368     		ldr	r3, [r4]
 4004 025e 43F01003 		orr	r3, r3, #16
 4005 0262 2360     		str	r3, [r4]
 4006 0264 03E7     		b	.L320
 4007              	.L422:
 4008 0266 00BF     		.align	2
 4009              	.L421:
 4010 0268 00000000 		.word	StateWhileOn
 4011 026c 00000000 		.word	DispMsg
 4012 0270 00200010 		.word	268443648
 4013 0274 00000000 		.word	KeyCallback
 4014 0278 7D030008 		.word	134218621
 4015 027c 2D020008 		.word	134218285
 4016 0280 00000000 		.word	run_menu_item
 4017 0284 00000000 		.word	menu_line_str
 4018 0288 31020008 		.word	134218289
 4019 028c 00000000 		.word	JustDisplayed
 4020 0290 19040008 		.word	134218777
 4021 0294 19020008 		.word	134218265
ARM GAS  /tmp/ccmw9yhH.s 			page 112


 4022 0298 91030008 		.word	134218641
 4023 029c E5020008 		.word	134218469
 4024 02a0 59020008 		.word	134218329
 4025 02a4 35020008 		.word	134218293
 4026 02a8 89030008 		.word	134218633
 4027 02ac B9030008 		.word	134218681
 4028 02b0 00000000 		.word	Pause
 4029 02b4 00000000 		.word	Running
 4030 02b8 00000000 		.word	.LANCHOR1
 4031 02bc 00000000 		.word	.LANCHOR3
 4032 02c0 00000000 		.word	.LANCHOR10
 4033 02c4 01040008 		.word	134218753
 4034 02c8 81030008 		.word	134218625
 4035 02cc F5030008 		.word	134218741
 4036 02d0 55020008 		.word	134218325
 4037 02d4 2D040008 		.word	134218797
 4038 02d8 1D020008 		.word	134218269
 4039 02dc F9030008 		.word	134218745
 4040              	.LVL364:
 4041              	.L337:
 439:src/console.c ****       remapped = remap(c);
 4042              		.loc 2 439 5 view .LVU1154
 440:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4043              		.loc 2 440 7 view .LVU1155
 4044              	.LBB159:
  56:src/console.c **** 
 4045              		.loc 2 56 22 view .LVU1156
 4046              	.LBB147:
  58:src/console.c **** 
 4047              		.loc 2 58 3 view .LVU1157
   1:src/keytran.c ****     {K_RELEASE, -1},
 4048              		.loc 3 1 1 view .LVU1158
  59:src/keytran.c ****     {K_RELEASE, -1},
 4049              		.loc 3 59 3 view .LVU1159
 118:src/keytran.c ****     {K_RELEASE, -1},
 4050              		.loc 3 118 3 view .LVU1160
 177:src/keytran.c ****     {K_RELEASE, -1},
 4051              		.loc 3 177 1 view .LVU1161
 4052              		.loc 3 235 1 view .LVU1162
  62:src/console.c **** 
 4053              		.loc 2 62 3 view .LVU1163
  62:src/console.c **** 
 4054              		.loc 2 62 23 view .LVU1164
  62:src/console.c **** 
 4055              		.loc 2 62 30 is_stmt 0 view .LVU1165
 4056 02e0 AD4B     		ldr	r3, .L423
 4057              	.LVL365:
 4058              	.L401:
  62:src/console.c **** 
 4059              		.loc 2 62 30 view .LVU1166
 4060 02e2 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4061              	.LVL366:
  62:src/console.c **** 
 4062              		.loc 2 62 30 view .LVU1167
 4063 02e4 93E80300 		ldm	r3, {r0, r1}
 4064 02e8 0DF1080A 		add	r10, sp, #8
 4065 02ec 8AE80300 		stm	r10, {r0, r1}
ARM GAS  /tmp/ccmw9yhH.s 			page 113


 4066 02f0 8946     		mov	r9, r1
 4067              	.LVL367:
 4068              	.L339:
  62:src/console.c **** 
 4069              		.loc 2 62 30 view .LVU1168
 4070              	.LBE147:
 4071              	.LBE159:
 441:src/console.c **** 	set_menu ( remapped.shift );
 4072              		.loc 2 441 7 is_stmt 1 view .LVU1169
 441:src/console.c **** 	set_menu ( remapped.shift );
 4073              		.loc 2 441 10 is_stmt 0 view .LVU1170
 4074 02f2 2F2D     		cmp	r5, #47
 4075 02f4 3FF458AF 		beq	.L415
 4076              	.L366:
 446:src/console.c ****       }
 447:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4077              		.loc 2 447 7 is_stmt 1 view .LVU1171
 4078              		.loc 2 447 10 is_stmt 0 view .LVU1172
 4079 02f8 302D     		cmp	r5, #48
 4080 02fa 1BD1     		bne	.L371
 448:src/console.c **** 	SET_ST(STAT_MENU);
 4081              		.loc 2 448 2 is_stmt 1 view .LVU1173
 4082 02fc 2368     		ldr	r3, [r4]
 449:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4083              		.loc 2 449 2 is_stmt 0 view .LVU1174
 4084 02fe A74D     		ldr	r5, .L423+4
 4085              	.LVL368:
 4086              		.loc 2 449 2 view .LVU1175
 4087 0300 A748     		ldr	r0, .L423+8
 4088 0302 0022     		movs	r2, #0
 448:src/console.c **** 	SET_ST(STAT_MENU);
 4089              		.loc 2 448 2 view .LVU1176
 4090 0304 43F04003 		orr	r3, r3, #64
 4091              		.loc 2 449 2 view .LVU1177
 4092 0308 1146     		mov	r1, r2
 448:src/console.c **** 	SET_ST(STAT_MENU);
 4093              		.loc 2 448 2 view .LVU1178
 4094 030a 2360     		str	r3, [r4]
 4095              		.loc 2 449 2 is_stmt 1 view .LVU1179
 4096 030c A847     		blx	r5
 4097              	.LVL369:
 450:src/console.c **** 	CLR_ST(STAT_MENU);
 4098              		.loc 2 450 2 view .LVU1180
 4099 030e 2368     		ldr	r3, [r4]
 4100 0310 23F04003 		bic	r3, r3, #64
 4101 0314 2360     		str	r3, [r4]
 451:src/console.c **** 	reset_shift();
 4102              		.loc 2 451 2 view .LVU1181
 4103 0316 FFF7FEFF 		bl	reset_shift
 4104              	.LVL370:
 452:src/console.c **** 	remapped =  no_key;
 4105              		.loc 2 452 2 view .LVU1182
 4106              		.loc 2 452 11 is_stmt 0 view .LVU1183
 4107 031a A24B     		ldr	r3, .L423+12
 4108 031c 93E80300 		ldm	r3, {r0, r1}
 4109 0320 0DF1080A 		add	r10, sp, #8
 4110 0324 8AE80300 		stm	r10, {r0, r1}
ARM GAS  /tmp/ccmw9yhH.s 			page 114


 4111 0328 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4112              	.LVL371:
 4113              		.loc 2 452 11 view .LVU1184
 4114 032a 8946     		mov	r9, r1
 4115              	.LVL372:
 453:src/console.c **** 	clear_disp();
 4116              		.loc 2 453 2 is_stmt 1 view .LVU1185
 4117 032c FFF7FEFF 		bl	clear_disp
 4118              	.LVL373:
 454:src/console.c **** 	display_current_menu();
 4119              		.loc 2 454 2 view .LVU1186
 4120 0330 FFF7FEFF 		bl	display_current_menu
 4121              	.LVL374:
 4122              	.L371:
 455:src/console.c ****       }
 456:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4123              		.loc 2 456 7 view .LVU1187
 4124              		.loc 2 456 10 is_stmt 0 view .LVU1188
 4125 0334 312D     		cmp	r5, #49
 4126 0336 35D0     		beq	.L374
 457:src/console.c **** 	remapped = do_multi (remapped);
 458:src/console.c **** 	clear_disp();
 459:src/console.c **** 	display_current_menu();
 460:src/console.c ****       }
 461:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4127              		.loc 2 461 7 is_stmt 1 view .LVU1189
 4128              		.loc 2 461 10 is_stmt 0 view .LVU1190
 4129 0338 322D     		cmp	r5, #50
 4130 033a 4ED0     		beq	.L373
 4131              	.L417:
 4132              		.loc 2 461 10 view .LVU1191
 4133 033c 0DF1080A 		add	r10, sp, #8
 4134              	.LVL375:
 4135              	.L361:
 462:src/console.c ****       process_keycode_with_shift(remapped);
 4136              		.loc 2 462 7 is_stmt 1 view .LVU1192
 4137              		.loc 2 462 7 is_stmt 0 view .LVU1193
 4138 0340 8DF80850 		strb	r5, [sp, #8]
 4139 0344 CDF80C90 		str	r9, [sp, #12]
 4140 0348 9AE80300 		ldm	r10, {r0, r1}
 4141 034c FFF7FEFF 		bl	process_keycode_with_shift
 4142              	.LVL376:
 463:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4143              		.loc 2 463 7 is_stmt 1 view .LVU1194
 4144              		.loc 2 463 10 is_stmt 0 view .LVU1195
 4145 0350 622D     		cmp	r5, #98
 4146 0352 1FD0     		beq	.L416
 4147              	.LVL377:
 4148              	.L362:
 4149              		.loc 2 463 59 is_stmt 1 view .LVU1196
 4150              	.LBB160:
 4151              	.LBI160:
 190:src/console.c ****     start_ticks = get_rtc_ticks();
 4152              		.loc 2 190 6 view .LVU1197
 4153              	.LBB161:
 191:src/console.c **** }
 4154              		.loc 2 191 5 view .LVU1198
ARM GAS  /tmp/ccmw9yhH.s 			page 115


 191:src/console.c **** }
 4155              		.loc 2 191 19 is_stmt 0 view .LVU1199
 4156 0354 944B     		ldr	r3, .L423+16
 4157 0356 9847     		blx	r3
 4158              	.LVL378:
 191:src/console.c **** }
 4159              		.loc 2 191 17 view .LVU1200
 4160 0358 944B     		ldr	r3, .L423+20
 4161 035a 1860     		str	r0, [r3]
 192:src/console.c **** 
 4162              		.loc 2 192 1 view .LVU1201
 4163 035c 87E6     		b	.L320
 4164              	.LVL379:
 4165              	.L335:
 192:src/console.c **** 
 4166              		.loc 2 192 1 view .LVU1202
 4167              	.LBE161:
 4168              	.LBE160:
 430:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4169              		.loc 2 430 10 is_stmt 1 view .LVU1203
 430:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4170              		.loc 2 430 15 is_stmt 0 view .LVU1204
 4171 035e 944B     		ldr	r3, .L423+24
 4172 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 430:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4173              		.loc 2 430 13 view .LVU1205
 4174 0362 DB07     		lsls	r3, r3, #31
 4175 0364 7FF5BCAE 		bpl	.L336
 430:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4176              		.loc 2 430 37 discriminator 1 view .LVU1206
 4177 0368 FFF7FEFF 		bl	DM42_Ticker
 4178              	.LVL380:
 430:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4179              		.loc 2 430 37 discriminator 1 view .LVU1207
 4180 036c 914A     		ldr	r2, .L423+28
 4181 036e 924B     		ldr	r3, .L423+32
 4182 0370 02FB0030 		mla	r0, r2, r0, r3
 430:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4183              		.loc 2 430 32 discriminator 1 view .LVU1208
 4184 0374 B0F1333F 		cmp	r0, #858993459
 4185 0378 BFF4B2AE 		bcs	.L336
 431:src/console.c ****       lcd_refresh();
 4186              		.loc 2 431 7 is_stmt 1 view .LVU1209
 431:src/console.c ****       lcd_refresh();
 4187              		.loc 2 431 21 is_stmt 0 view .LVU1210
 4188 037c 8420     		movs	r0, #132
 4189 037e FFF7FEFF 		bl	is_dot
 4190              	.LVL381:
 431:src/console.c ****       lcd_refresh();
 4191              		.loc 2 431 7 view .LVU1211
 4192 0382 B0FA80F1 		clz	r1, r0
 4193 0386 4909     		lsrs	r1, r1, #5
 4194 0388 8420     		movs	r0, #132
 4195 038a FFF7FEFF 		bl	dot
 4196              	.LVL382:
 432:src/console.c ****     }
 4197              		.loc 2 432 7 is_stmt 1 view .LVU1212
ARM GAS  /tmp/ccmw9yhH.s 			page 116


 4198 038e 8B4B     		ldr	r3, .L423+36
 4199 0390 9847     		blx	r3
 4200              	.LVL383:
 4201 0392 A5E6     		b	.L336
 4202              	.LVL384:
 4203              	.L416:
 4204              		.loc 2 463 43 is_stmt 0 discriminator 2 view .LVU1213
 4205 0394 8A4B     		ldr	r3, .L423+40
 4206 0396 1B68     		ldr	r3, [r3]
 4207 0398 002B     		cmp	r3, #0
 4208 039a 3FF468AE 		beq	.L320
 4209 039e D9E7     		b	.L362
 4210              	.LVL385:
 4211              	.L340:
 441:src/console.c **** 	set_menu ( remapped.shift );
 4212              		.loc 2 441 7 is_stmt 1 view .LVU1214
 447:src/console.c **** 	SET_ST(STAT_MENU);
 4213              		.loc 2 447 7 view .LVU1215
 456:src/console.c **** 	remapped = do_multi (remapped);
 4214              		.loc 2 456 7 view .LVU1216
 4215              	.LBB162:
 4216              	.LBB148:
 4217              	.LBB145:
  68:src/console.c ****   }
 4218              		.loc 2 68 12 is_stmt 0 view .LVU1217
 4219 03a0 4FF00C09 		mov	r9, #12
 4220              	.LVL386:
 4221              	.L374:
  68:src/console.c ****   }
 4222              		.loc 2 68 12 view .LVU1218
 4223              	.LBE145:
 4224              	.LBE148:
 4225              	.LBE162:
 457:src/console.c **** 	clear_disp();
 4226              		.loc 2 457 2 is_stmt 1 view .LVU1219
 457:src/console.c **** 	clear_disp();
 4227              		.loc 2 457 13 is_stmt 0 view .LVU1220
 4228 03a4 3123     		movs	r3, #49
 4229 03a6 8DF80830 		strb	r3, [sp, #8]
 4230 03aa CDF80C90 		str	r9, [sp, #12]
 4231 03ae 6D46     		mov	r5, sp
 4232 03b0 0DF1080A 		add	r10, sp, #8
 4233 03b4 9AE80600 		ldm	r10, {r1, r2}
 4234 03b8 2846     		mov	r0, r5
 4235 03ba FFF7FEFF 		bl	do_multi
 4236              	.LVL387:
 4237 03be 95E80300 		ldm	r5, {r0, r1}
 4238 03c2 8AE80300 		stm	r10, {r0, r1}
 4239 03c6 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4240              	.LVL388:
 457:src/console.c **** 	clear_disp();
 4241              		.loc 2 457 13 view .LVU1221
 4242 03ca DDF80C90 		ldr	r9, [sp, #12]
 4243              	.LVL389:
 458:src/console.c **** 	display_current_menu();
 4244              		.loc 2 458 2 is_stmt 1 view .LVU1222
 4245 03ce FFF7FEFF 		bl	clear_disp
ARM GAS  /tmp/ccmw9yhH.s 			page 117


 4246              	.LVL390:
 459:src/console.c ****       }
 4247              		.loc 2 459 2 view .LVU1223
 4248 03d2 FFF7FEFF 		bl	display_current_menu
 4249              	.LVL391:
 461:src/console.c ****       process_keycode_with_shift(remapped);
 4250              		.loc 2 461 7 view .LVU1224
 461:src/console.c ****       process_keycode_with_shift(remapped);
 4251              		.loc 2 461 10 is_stmt 0 view .LVU1225
 4252 03d6 322D     		cmp	r5, #50
 4253 03d8 B0D1     		bne	.L417
 4254              	.L373:
 464:src/console.c ****     }
 465:src/console.c ****   }
 466:src/console.c ****   save_ram_file(0);
 4255              		.loc 2 466 3 is_stmt 1 view .LVU1226
 4256 03da 0020     		movs	r0, #0
 467:src/console.c ****   //  free_storage();
 468:src/console.c ****   return;
 469:src/console.c **** }
 4257              		.loc 2 469 1 is_stmt 0 view .LVU1227
 4258 03dc 38B0     		add	sp, sp, #224
 4259              		.cfi_remember_state
 4260              		.cfi_def_cfa_offset 32
 4261              		@ sp needed
 4262 03de BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4263              		.cfi_restore 14
 4264              		.cfi_restore 10
 4265              		.cfi_restore 9
 4266              		.cfi_restore 8
 4267              		.cfi_restore 7
 4268              		.cfi_restore 6
 4269              		.cfi_restore 5
 4270              		.cfi_restore 4
 4271              		.cfi_def_cfa_offset 0
 4272              	.LVL392:
 466:src/console.c ****   //  free_storage();
 4273              		.loc 2 466 3 view .LVU1228
 4274 03e2 FFF7FEBF 		b	save_ram_file
 4275              	.LVL393:
 4276              	.L403:
 4277              		.cfi_restore_state
 4278              	.LBB163:
 4279              	.LBB149:
  72:src/console.c ****   }
 4280              		.loc 2 72 5 is_stmt 1 view .LVU1229
  72:src/console.c ****   }
 4281              		.loc 2 72 27 is_stmt 0 view .LVU1230
 4282 03e6 774B     		ldr	r3, .L423+44
 4283              	.L400:
 124:src/console.c ****     break;
 4284              		.loc 2 124 26 view .LVU1231
 4285 03e8 03EBC502 		add	r2, r3, r5, lsl #3
 4286 03ec 92E80300 		ldm	r2, {r0, r1}
 4287 03f0 0DF1080A 		add	r10, sp, #8
 4288 03f4 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4289              	.LVL394:
ARM GAS  /tmp/ccmw9yhH.s 			page 118


 124:src/console.c ****     break;
 4290              		.loc 2 124 26 view .LVU1232
 4291 03f8 8946     		mov	r9, r1
 4292              	.LVL395:
 124:src/console.c ****     break;
 4293              		.loc 2 124 26 view .LVU1233
 4294 03fa 8AE80300 		stm	r10, {r0, r1}
 4295 03fe 78E7     		b	.L339
 4296              	.LVL396:
 4297              	.L402:
  64:src/console.c **** 
 4298              		.loc 2 64 16 is_stmt 1 view .LVU1234
  64:src/console.c **** 
 4299              		.loc 2 64 23 is_stmt 0 view .LVU1235
 4300 0400 714B     		ldr	r3, .L423+48
 4301 0402 6EE7     		b	.L401
 4302              	.LVL397:
 4303              	.L413:
  64:src/console.c **** 
 4304              		.loc 2 64 23 view .LVU1236
 4305              	.LBE149:
 4306              	.LBE163:
 4307              	.LBB164:
 4308              	.LBB157:
 128:src/menu.c    ****   }
 4309              		.loc 1 128 5 is_stmt 1 view .LVU1237
 128:src/menu.c    ****   }
 4310              		.loc 1 128 18 is_stmt 0 view .LVU1238
 4311 0404 7149     		ldr	r1, .L423+52
 4312              	.LVL398:
 128:src/menu.c    ****   }
 4313              		.loc 1 128 18 view .LVU1239
 4314 0406 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4315 0408 1170     		strb	r1, [r2]
 4316 040a DAE6     		b	.L368
 4317              	.LVL399:
 4318              	.L355:
 128:src/menu.c    ****   }
 4319              		.loc 1 128 18 view .LVU1240
 4320              	.LBE157:
 4321              	.LBE164:
 4322              	.LBB165:
 4323              	.LBB150:
  95:src/console.c ****   }
 4324              		.loc 2 95 5 is_stmt 1 view .LVU1241
  95:src/console.c ****   }
 4325              		.loc 2 95 9 is_stmt 0 view .LVU1242
 4326 040c FFF7FEFF 		bl	cur_shift
 4327              	.LVL400:
  95:src/console.c ****   }
 4328              		.loc 2 95 8 view .LVU1243
 4329 0410 0128     		cmp	r0, #1
 4330 0412 56D0     		beq	.L418
 4331              	.L342:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4332              		.loc 2 98 3 is_stmt 1 view .LVU1244
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
ARM GAS  /tmp/ccmw9yhH.s 			page 119


 4333              		.loc 2 98 8 is_stmt 0 view .LVU1245
 4334 0414 FFF7FEFF 		bl	get_alpha_state
 4335              	.LVL401:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4336              		.loc 2 98 6 view .LVU1246
 4337 0418 D8B3     		cbz	r0, .L356
  99:src/console.c ****       switch (cur_shift()) { 
 4338              		.loc 2 99 5 is_stmt 1 view .LVU1247
  99:src/console.c ****       switch (cur_shift()) { 
 4339              		.loc 2 99 8 is_stmt 0 view .LVU1248
 4340 041a 1C2D     		cmp	r5, #28
 4341 041c 00F08580 		beq	.L419
 116:src/console.c ****   }
 4342              		.loc 2 116 5 is_stmt 1 view .LVU1249
 116:src/console.c ****   }
 4343              		.loc 2 116 26 is_stmt 0 view .LVU1250
 4344 0420 6B4B     		ldr	r3, .L423+56
 4345 0422 E1E7     		b	.L400
 4346              	.L349:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4347              		.loc 2 79 5 is_stmt 1 view .LVU1251
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4348              		.loc 2 79 9 is_stmt 0 view .LVU1252
 4349 0424 FFF7FEFF 		bl	cur_shift
 4350              	.LVL402:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4351              		.loc 2 79 8 view .LVU1253
 4352 0428 0028     		cmp	r0, #0
 4353 042a 7FF47FAE 		bne	.L350
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4354              		.loc 2 79 33 is_stmt 1 view .LVU1254
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4355              		.loc 2 79 51 is_stmt 0 view .LVU1255
 4356 042e DDE90801 		ldrd	r0, r1, [sp, #32]
 4357 0432 0DF1080A 		add	r10, sp, #8
 4358 0436 8AE80300 		stm	r10, {r0, r1}
 4359 043a 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4360              	.LVL403:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4361              		.loc 2 79 51 view .LVU1256
 4362 043e 8946     		mov	r9, r1
 4363              	.LVL404:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4364              		.loc 2 79 51 view .LVU1257
 4365 0440 57E7     		b	.L339
 4366              	.LVL405:
 4367              	.L411:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4368              		.loc 2 91 33 is_stmt 1 view .LVU1258
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4369              		.loc 2 91 51 is_stmt 0 view .LVU1259
 4370 0442 DDE92801 		ldrd	r0, r1, [sp, #160]
 4371 0446 0DF1080A 		add	r10, sp, #8
 4372 044a 8AE80300 		stm	r10, {r0, r1}
 4373 044e 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4374              	.LVL406:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
ARM GAS  /tmp/ccmw9yhH.s 			page 120


 4375              		.loc 2 91 51 view .LVU1260
 4376 0452 8946     		mov	r9, r1
 4377              	.LVL407:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4378              		.loc 2 91 51 view .LVU1261
 4379 0454 4DE7     		b	.L339
 4380              	.LVL408:
 4381              	.L409:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4382              		.loc 2 88 33 is_stmt 1 view .LVU1262
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4383              		.loc 2 88 51 is_stmt 0 view .LVU1263
 4384 0456 DDE92001 		ldrd	r0, r1, [sp, #128]
 4385 045a 0DF1080A 		add	r10, sp, #8
 4386 045e 8AE80300 		stm	r10, {r0, r1}
 4387 0462 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4388              	.LVL409:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4389              		.loc 2 88 51 view .LVU1264
 4390 0466 8946     		mov	r9, r1
 4391              	.LVL410:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4392              		.loc 2 88 51 view .LVU1265
 4393 0468 43E7     		b	.L339
 4394              	.LVL411:
 4395              	.L407:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4396              		.loc 2 85 33 is_stmt 1 view .LVU1266
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4397              		.loc 2 85 51 is_stmt 0 view .LVU1267
 4398 046a DDE91801 		ldrd	r0, r1, [sp, #96]
 4399 046e 0DF1080A 		add	r10, sp, #8
 4400 0472 8AE80300 		stm	r10, {r0, r1}
 4401 0476 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4402              	.LVL412:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4403              		.loc 2 85 51 view .LVU1268
 4404 047a 8946     		mov	r9, r1
 4405              	.LVL413:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4406              		.loc 2 85 51 view .LVU1269
 4407 047c 39E7     		b	.L339
 4408              	.LVL414:
 4409              	.L405:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4410              		.loc 2 82 33 is_stmt 1 view .LVU1270
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4411              		.loc 2 82 51 is_stmt 0 view .LVU1271
 4412 047e DDE91001 		ldrd	r0, r1, [sp, #64]
 4413 0482 0DF1080A 		add	r10, sp, #8
 4414 0486 8AE80300 		stm	r10, {r0, r1}
 4415 048a 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4416              	.LVL415:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4417              		.loc 2 82 51 view .LVU1272
 4418 048e 8946     		mov	r9, r1
 4419              	.LVL416:
ARM GAS  /tmp/ccmw9yhH.s 			page 121


  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4420              		.loc 2 82 51 view .LVU1273
 4421 0490 2FE7     		b	.L339
 4422              	.LVL417:
 4423              	.L356:
 119:src/console.c ****   case SHIFT_N:    
 4424              		.loc 2 119 3 is_stmt 1 view .LVU1274
 119:src/console.c ****   case SHIFT_N:    
 4425              		.loc 2 119 11 is_stmt 0 view .LVU1275
 4426 0492 FFF7FEFF 		bl	cur_shift
 4427              	.LVL418:
 119:src/console.c ****   case SHIFT_N:    
 4428              		.loc 2 119 3 view .LVU1276
 4429 0496 0128     		cmp	r0, #1
 4430 0498 45D0     		beq	.L363
 4431 049a 0228     		cmp	r0, #2
 4432 049c 02D0     		beq	.L364
 4433 049e 70B1     		cbz	r0, .L365
  58:src/console.c **** 
 4434              		.loc 2 58 41 view .LVU1277
 4435 04a0 EDB2     		uxtb	r5, r5
 4436              	.LVL419:
  58:src/console.c **** 
 4437              		.loc 2 58 41 view .LVU1278
 4438 04a2 26E7     		b	.L339
 4439              	.LVL420:
 4440              	.L364:
 125:src/console.c ****   case SHIFT_G:
 4441              		.loc 2 125 5 is_stmt 1 view .LVU1279
 127:src/console.c ****     break;
 4442              		.loc 2 127 5 view .LVU1280
 127:src/console.c ****     break;
 4443              		.loc 2 127 26 is_stmt 0 view .LVU1281
 4444 04a4 4B4B     		ldr	r3, .L423+60
 4445 04a6 03EBC502 		add	r2, r3, r5, lsl #3
 4446 04aa 92E80300 		ldm	r2, {r0, r1}
 4447 04ae 0DF1080A 		add	r10, sp, #8
 4448 04b2 8AE80300 		stm	r10, {r0, r1}
 4449 04b6 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4450              	.LVL421:
 127:src/console.c ****     break;
 4451              		.loc 2 127 26 view .LVU1282
 4452 04ba 8946     		mov	r9, r1
 4453              	.LVL422:
 127:src/console.c ****     break;
 4454              		.loc 2 127 26 view .LVU1283
 4455 04bc 19E7     		b	.L339
 4456              	.LVL423:
 4457              	.L365:
 121:src/console.c ****     break;
 4458              		.loc 2 121 5 is_stmt 1 view .LVU1284
 121:src/console.c ****     break;
 4459              		.loc 2 121 24 is_stmt 0 view .LVU1285
 4460 04be 464B     		ldr	r3, .L423+64
 4461 04c0 92E7     		b	.L400
 4462              	.L418:
  95:src/console.c ****   }
ARM GAS  /tmp/ccmw9yhH.s 			page 122


 4463              		.loc 2 95 33 is_stmt 1 view .LVU1286
  95:src/console.c ****   }
 4464              		.loc 2 95 51 is_stmt 0 view .LVU1287
 4465 04c2 DDE93201 		ldrd	r0, r1, [sp, #200]
 4466 04c6 0DF1080A 		add	r10, sp, #8
 4467 04ca 8AE80300 		stm	r10, {r0, r1}
 4468 04ce 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4469              	.LVL424:
  95:src/console.c ****   }
 4470              		.loc 2 95 51 view .LVU1288
 4471 04d2 8946     		mov	r9, r1
 4472              	.LVL425:
  95:src/console.c ****   }
 4473              		.loc 2 95 51 view .LVU1289
 4474 04d4 0DE7     		b	.L339
 4475              	.LVL426:
 4476              	.L410:
  89:src/console.c ****   case KEY_F5:
 4477              		.loc 2 89 33 is_stmt 1 view .LVU1290
  89:src/console.c ****   case KEY_F5:
 4478              		.loc 2 89 51 is_stmt 0 view .LVU1291
 4479 04d6 DDE92201 		ldrd	r0, r1, [sp, #136]
 4480 04da 0DF1080A 		add	r10, sp, #8
 4481 04de 8AE80300 		stm	r10, {r0, r1}
 4482 04e2 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4483              	.LVL427:
  89:src/console.c ****   case KEY_F5:
 4484              		.loc 2 89 51 view .LVU1292
 4485 04e6 8946     		mov	r9, r1
 4486              	.LVL428:
  89:src/console.c ****   case KEY_F5:
 4487              		.loc 2 89 51 view .LVU1293
 4488 04e8 03E7     		b	.L339
 4489              	.LVL429:
 4490              	.L412:
  92:src/console.c ****   case KEY_F6:
 4491              		.loc 2 92 33 is_stmt 1 view .LVU1294
  92:src/console.c ****   case KEY_F6:
 4492              		.loc 2 92 51 is_stmt 0 view .LVU1295
 4493 04ea DDE92A01 		ldrd	r0, r1, [sp, #168]
 4494 04ee 0DF1080A 		add	r10, sp, #8
 4495 04f2 8AE80300 		stm	r10, {r0, r1}
 4496 04f6 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4497              	.LVL430:
  92:src/console.c ****   case KEY_F6:
 4498              		.loc 2 92 51 view .LVU1296
 4499 04fa 8946     		mov	r9, r1
 4500              	.LVL431:
  92:src/console.c ****   case KEY_F6:
 4501              		.loc 2 92 51 view .LVU1297
 4502 04fc F9E6     		b	.L339
 4503              	.LVL432:
 4504              	.L408:
  86:src/console.c ****   case KEY_F4:
 4505              		.loc 2 86 33 is_stmt 1 view .LVU1298
  86:src/console.c ****   case KEY_F4:
 4506              		.loc 2 86 51 is_stmt 0 view .LVU1299
ARM GAS  /tmp/ccmw9yhH.s 			page 123


 4507 04fe DDE91A01 		ldrd	r0, r1, [sp, #104]
 4508 0502 0DF1080A 		add	r10, sp, #8
 4509 0506 8AE80300 		stm	r10, {r0, r1}
 4510 050a 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4511              	.LVL433:
  86:src/console.c ****   case KEY_F4:
 4512              		.loc 2 86 51 view .LVU1300
 4513 050e 8946     		mov	r9, r1
 4514              	.LVL434:
  86:src/console.c ****   case KEY_F4:
 4515              		.loc 2 86 51 view .LVU1301
 4516 0510 EFE6     		b	.L339
 4517              	.LVL435:
 4518              	.L406:
  83:src/console.c ****   case KEY_F3:
 4519              		.loc 2 83 33 is_stmt 1 view .LVU1302
  83:src/console.c ****   case KEY_F3:
 4520              		.loc 2 83 51 is_stmt 0 view .LVU1303
 4521 0512 DDE91201 		ldrd	r0, r1, [sp, #72]
 4522 0516 0DF1080A 		add	r10, sp, #8
 4523 051a 8AE80300 		stm	r10, {r0, r1}
 4524 051e 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4525              	.LVL436:
  83:src/console.c ****   case KEY_F3:
 4526              		.loc 2 83 51 view .LVU1304
 4527 0522 8946     		mov	r9, r1
 4528              	.LVL437:
  83:src/console.c ****   case KEY_F3:
 4529              		.loc 2 83 51 view .LVU1305
 4530 0524 E5E6     		b	.L339
 4531              	.LVL438:
 4532              	.L363:
 122:src/console.c ****   case SHIFT_F:
 4533              		.loc 2 122 5 is_stmt 1 view .LVU1306
 124:src/console.c ****     break;
 4534              		.loc 2 124 5 view .LVU1307
 124:src/console.c ****     break;
 4535              		.loc 2 124 26 is_stmt 0 view .LVU1308
 4536 0526 2D4B     		ldr	r3, .L423+68
 4537 0528 5EE7     		b	.L400
 4538              	.L419:
 100:src/console.c ****       case SHIFT_N:
 4539              		.loc 2 100 7 is_stmt 1 view .LVU1309
 100:src/console.c ****       case SHIFT_N:
 4540              		.loc 2 100 15 is_stmt 0 view .LVU1310
 4541 052a FFF7FEFF 		bl	cur_shift
 4542              	.LVL439:
 100:src/console.c ****       case SHIFT_N:
 4543              		.loc 2 100 7 view .LVU1311
 4544 052e 0328     		cmp	r0, #3
 4545 0530 28D8     		bhi	.L358
 4546 0532 0128     		cmp	r0, #1
 4547 0534 11D8     		bhi	.L359
 4548 0536 E0B1     		cbz	r0, .L420
 103:src/console.c ****       case SHIFT_F:
 4549              		.loc 2 103 2 is_stmt 1 view .LVU1312
 105:src/console.c **** 	break;
ARM GAS  /tmp/ccmw9yhH.s 			page 124


 4550              		.loc 2 105 2 view .LVU1313
 105:src/console.c **** 	break;
 4551              		.loc 2 105 23 is_stmt 0 view .LVU1314
 4552 0538 294B     		ldr	r3, .L423+72
 4553 053a 93E80300 		ldm	r3, {r0, r1}
 4554 053e 0DF1080A 		add	r10, sp, #8
 4555 0542 8AE80300 		stm	r10, {r0, r1}
 4556              	.LVL440:
 105:src/console.c **** 	break;
 4557              		.loc 2 105 23 view .LVU1315
 4558              	.LBE150:
 4559              	.LBE165:
 441:src/console.c **** 	set_menu ( remapped.shift );
 4560              		.loc 2 441 7 is_stmt 1 view .LVU1316
 447:src/console.c **** 	SET_ST(STAT_MENU);
 4561              		.loc 2 447 7 view .LVU1317
 456:src/console.c **** 	remapped = do_multi (remapped);
 4562              		.loc 2 456 7 view .LVU1318
 461:src/console.c ****       process_keycode_with_shift(remapped);
 4563              		.loc 2 461 7 view .LVU1319
 462:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4564              		.loc 2 462 7 view .LVU1320
 462:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4565              		.loc 2 462 7 is_stmt 0 view .LVU1321
 4566 0546 2A22     		movs	r2, #42
 4567 0548 0023     		movs	r3, #0
 4568 054a 8DF80820 		strb	r2, [sp, #8]
 4569 054e 0393     		str	r3, [sp, #12]
 4570 0550 9AE80300 		ldm	r10, {r0, r1}
 4571 0554 FFF7FEFF 		bl	process_keycode_with_shift
 4572              	.LVL441:
 463:src/console.c ****     }
 4573              		.loc 2 463 7 is_stmt 1 view .LVU1322
 4574 0558 FCE6     		b	.L362
 4575              	.LVL442:
 4576              	.L359:
 4577              	.LBB166:
 4578              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4579              		.loc 2 106 2 view .LVU1323
 108:src/console.c **** 	break;
 4580              		.loc 2 108 2 view .LVU1324
 108:src/console.c **** 	break;
 4581              		.loc 2 108 9 is_stmt 0 view .LVU1325
 4582 055a 224B     		ldr	r3, .L423+76
 4583 055c C1E6     		b	.L401
 4584              	.L404:
  80:src/console.c ****   case KEY_F2:
 4585              		.loc 2 80 33 is_stmt 1 view .LVU1326
  80:src/console.c ****   case KEY_F2:
 4586              		.loc 2 80 51 is_stmt 0 view .LVU1327
 4587 055e DDE90A01 		ldrd	r0, r1, [sp, #40]
 4588 0562 0DF1080A 		add	r10, sp, #8
 4589 0566 8AE80300 		stm	r10, {r0, r1}
 4590 056a 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4591              	.LVL443:
  80:src/console.c ****   case KEY_F2:
ARM GAS  /tmp/ccmw9yhH.s 			page 125


 4592              		.loc 2 80 51 view .LVU1328
 4593 056e 8946     		mov	r9, r1
 4594              	.LVL444:
  80:src/console.c ****   case KEY_F2:
 4595              		.loc 2 80 51 view .LVU1329
 4596 0570 BFE6     		b	.L339
 4597              	.LVL445:
 4598              	.L420:
 102:src/console.c **** 	break;
 4599              		.loc 2 102 2 is_stmt 1 view .LVU1330
 102:src/console.c **** 	break;
 4600              		.loc 2 102 21 is_stmt 0 view .LVU1331
 4601 0572 1D4B     		ldr	r3, .L423+80
 4602 0574 93E80300 		ldm	r3, {r0, r1}
 4603 0578 0DF1080A 		add	r10, sp, #8
 4604 057c 8AE80300 		stm	r10, {r0, r1}
 4605              	.LVL446:
 102:src/console.c **** 	break;
 4606              		.loc 2 102 21 view .LVU1332
 4607              	.LBE151:
 4608              	.LBE166:
 441:src/console.c **** 	set_menu ( remapped.shift );
 4609              		.loc 2 441 7 is_stmt 1 view .LVU1333
 447:src/console.c **** 	SET_ST(STAT_MENU);
 4610              		.loc 2 447 7 view .LVU1334
 456:src/console.c **** 	remapped = do_multi (remapped);
 4611              		.loc 2 456 7 view .LVU1335
 461:src/console.c ****       process_keycode_with_shift(remapped);
 4612              		.loc 2 461 7 view .LVU1336
 4613              	.LBB167:
 4614              	.LBB152:
 102:src/console.c **** 	break;
 4615              		.loc 2 102 21 is_stmt 0 view .LVU1337
 4616 0580 2925     		movs	r5, #41
 4617              	.LVL447:
 102:src/console.c **** 	break;
 4618              		.loc 2 102 21 view .LVU1338
 4619 0582 DDE6     		b	.L361
 4620              	.LVL448:
 4621              	.L358:
 102:src/console.c **** 	break;
 4622              		.loc 2 102 21 view .LVU1339
 4623              	.LBE152:
 4624              	.LBE167:
 441:src/console.c **** 	set_menu ( remapped.shift );
 4625              		.loc 2 441 7 is_stmt 1 view .LVU1340
 447:src/console.c **** 	SET_ST(STAT_MENU);
 4626              		.loc 2 447 7 view .LVU1341
 456:src/console.c **** 	remapped = do_multi (remapped);
 4627              		.loc 2 456 7 view .LVU1342
 461:src/console.c ****       process_keycode_with_shift(remapped);
 4628              		.loc 2 461 7 view .LVU1343
 462:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4629              		.loc 2 462 7 view .LVU1344
 462:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4630              		.loc 2 462 7 is_stmt 0 view .LVU1345
 4631 0584 0023     		movs	r3, #0
ARM GAS  /tmp/ccmw9yhH.s 			page 126


 4632 0586 8DF80850 		strb	r5, [sp, #8]
 4633 058a 0298     		ldr	r0, [sp, #8]
 4634 058c 0393     		str	r3, [sp, #12]
 4635 058e 1946     		mov	r1, r3
 4636 0590 FFF7FEFF 		bl	process_keycode_with_shift
 4637              	.LVL449:
 463:src/console.c ****     }
 4638              		.loc 2 463 7 is_stmt 1 view .LVU1346
 4639 0594 DEE6     		b	.L362
 4640              	.L424:
 4641 0596 00BF     		.align	2
 4642              	.L423:
 4643 0598 00000000 		.word	.LANCHOR19
 4644 059c 59030008 		.word	134218585
 4645 05a0 00000000 		.word	.LANCHOR18
 4646 05a4 00000000 		.word	.LANCHOR10
 4647 05a8 B9040008 		.word	134218937
 4648 05ac 00000000 		.word	.LANCHOR8
 4649 05b0 00000000 		.word	StopWatchStatus
 4650 05b4 CDCCCCCC 		.word	-858993459
 4651 05b8 99999919 		.word	429496729
 4652 05bc 31020008 		.word	134218289
 4653 05c0 00000000 		.word	JustStopped
 4654 05c4 00000000 		.word	.LANCHOR12
 4655 05c8 00000000 		.word	.LANCHOR11
 4656 05cc 00000000 		.word	.LANCHOR2
 4657 05d0 00000000 		.word	.LANCHOR16
 4658 05d4 00000000 		.word	.LANCHOR17
 4659 05d8 00000000 		.word	.LANCHOR13
 4660 05dc 00000000 		.word	.LANCHOR14
 4661 05e0 E0000000 		.word	.LANCHOR14+224
 4662 05e4 00000000 		.word	.LANCHOR15
 4663 05e8 E0000000 		.word	.LANCHOR13+224
 4664              		.cfi_endproc
 4665              	.LFE33:
 4667              		.global	n_p
 4668              		.comm	print_string,22,4
 4669              		.global	spaces
 4670              		.global	release
 4671              		.global	h_shift
 4672              		.global	g_shift
 4673              		.global	f_shift
 4674              		.global	heartbeat
 4675              		.global	no_key
 4676              		.global	MID_MENU
 4677              		.section	.rodata.str1.4,"aMS",%progbits,1
 4678              		.align	2
 4679              	.LC17:
 4680 0000 53797374 		.ascii	"System!\000"
 4680      656D2100 
 4681              		.global	mid_menu
 4682              		.global	default_menu
 4683              		.global	last_menu
 4684              		.global	current_menu
 4685              		.global	cmplx_key_string
 4686              		.align	2
 4687              	.LC18:
ARM GAS  /tmp/ccmw9yhH.s 			page 127


 4688 0008 43505800 		.ascii	"CPX\000"
 4689              		.global	arrow_key_string
 4690              		.align	2
 4691              	.LC19:
 4692 000c 2D2D0D00 		.ascii	"--\015\000"
 4693              		.global	UserMenu
 4694              		.section	.rodata
 4695              		.align	2
 4696              		.set	.LANCHOR5,. + 0
 4697              	.LC0:
 4698 0000 2C       		.byte	44
 4699 0001 000000   		.space	3
 4700 0004 FFFFFFFF 		.word	-1
 4701              	.LC1:
 4702 0008 2D       		.byte	45
 4703 0009 000000   		.space	3
 4704 000c FFFFFFFF 		.word	-1
 4705              	.LC14:
 4706 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4706      2A2B0708 
 4706      091C0B0C 
 4706      0D0E0F
 4707 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4707      13141516 
 4707      00121819 
 4707      1A
 4708 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4708      1E1F2000 
 4708      21222324 
 4708      25
 4709              		.section	.bss.current_menu,"aw",%nobits
 4710              		.set	.LANCHOR1,. + 0
 4713              	current_menu:
 4714 0000 00       		.space	1
 4715              		.section	.bss.default_menu,"aw",%nobits
 4716              		.set	.LANCHOR2,. + 0
 4719              	default_menu:
 4720 0000 00       		.space	1
 4721              		.section	.bss.last_menu,"aw",%nobits
 4722              		.set	.LANCHOR3,. + 0
 4725              	last_menu:
 4726 0000 00       		.space	1
 4727              		.section	.bss.mdots,"aw",%nobits
 4728              		.align	2
 4729              		.set	.LANCHOR0,. + 0
 4732              	mdots:
 4733 0000 00000000 		.space	400
 4733      00000000 
 4733      00000000 
 4733      00000000 
 4733      00000000 
 4734              		.section	.bss.n_p,"aw",%nobits
 4735              		.align	2
 4738              	n_p:
 4739 0000 00000000 		.space	4
 4740              		.section	.bss.start_ticks,"aw",%nobits
 4741              		.align	2
ARM GAS  /tmp/ccmw9yhH.s 			page 128


 4742              		.set	.LANCHOR8,. + 0
 4745              	start_ticks:
 4746 0000 00000000 		.space	4
 4747              		.section	.data.UserMenu,"aw"
 4748              		.align	2
 4749              		.set	.LANCHOR4,. + 0
 4752              	UserMenu:
 4753 0000 55736572 		.ascii	"User Menu\000"
 4753      204D656E 
 4753      7500
 4754 000a 00000000 		.space	5
 4754      00
 4755 000f 00       		.space	1
 4756 0010 2E       		.byte	46
 4757 0011 000000   		.space	3
 4758 0014 FFFFFFFF 		.word	-1
 4759 0018 2E       		.byte	46
 4760 0019 000000   		.space	3
 4761 001c FFFFFFFF 		.word	-1
 4762 0020 00       		.ascii	"\000"
 4763 0021 00000000 		.space	7
 4763      000000
 4764 0028 00       		.ascii	"\000"
 4765 0029 00000000 		.space	7
 4765      000000
 4766 0030 2E       		.byte	46
 4767 0031 000000   		.space	3
 4768 0034 FFFFFFFF 		.word	-1
 4769 0038 2E       		.byte	46
 4770 0039 000000   		.space	3
 4771 003c FFFFFFFF 		.word	-1
 4772 0040 00       		.ascii	"\000"
 4773 0041 00000000 		.space	7
 4773      000000
 4774 0048 00       		.ascii	"\000"
 4775 0049 00000000 		.space	7
 4775      000000
 4776 0050 2E       		.byte	46
 4777 0051 000000   		.space	3
 4778 0054 FFFFFFFF 		.word	-1
 4779 0058 2E       		.byte	46
 4780 0059 000000   		.space	3
 4781 005c FFFFFFFF 		.word	-1
 4782 0060 00       		.ascii	"\000"
 4783 0061 00000000 		.space	7
 4783      000000
 4784 0068 00       		.ascii	"\000"
 4785 0069 00000000 		.space	7
 4785      000000
 4786 0070 2E       		.byte	46
 4787 0071 000000   		.space	3
 4788 0074 FFFFFFFF 		.word	-1
 4789 0078 2E       		.byte	46
 4790 0079 000000   		.space	3
 4791 007c FFFFFFFF 		.word	-1
 4792 0080 00       		.ascii	"\000"
 4793 0081 00000000 		.space	7
ARM GAS  /tmp/ccmw9yhH.s 			page 129


 4793      000000
 4794 0088 00       		.ascii	"\000"
 4795 0089 00000000 		.space	7
 4795      000000
 4796 0090 2C       		.byte	44
 4797 0091 000000   		.space	3
 4798 0094 FFFFFFFF 		.word	-1
 4799 0098 2E       		.byte	46
 4800 0099 000000   		.space	3
 4801 009c FFFFFFFF 		.word	-1
 4802 00a0 2D2D0D00 		.ascii	"--\015\000"
 4803 00a4 00000000 		.space	4
 4804 00a8 00       		.ascii	"\000"
 4805 00a9 00000000 		.space	7
 4805      000000
 4806 00b0 2D       		.byte	45
 4807 00b1 000000   		.space	3
 4808 00b4 FFFFFFFF 		.word	-1
 4809 00b8 31       		.byte	49
 4810 00b9 000000   		.space	3
 4811 00bc 0B000000 		.word	11
 4812 00c0 43505800 		.ascii	"CPX\000"
 4813 00c4 00000000 		.space	4
 4814 00c8 00       		.ascii	"\000"
 4815 00c9 00000000 		.space	7
 4815      000000
 4816              		.section	.data.arrow_key_string,"aw"
 4817              		.align	2
 4818              		.set	.LANCHOR6,. + 0
 4821              	arrow_key_string:
 4822 0000 0C000000 		.word	.LC19
 4823              		.section	.data.cmplx_key_string,"aw"
 4824              		.align	2
 4825              		.set	.LANCHOR7,. + 0
 4828              	cmplx_key_string:
 4829 0000 08000000 		.word	.LC18
 4830              		.section	.data.f_shift,"aw"
 4831              		.align	2
 4834              	f_shift:
 4835 0000 29       		.byte	41
 4836 0001 000000   		.space	3
 4837 0004 FFFFFFFF 		.word	-1
 4838              		.section	.data.g_shift,"aw"
 4839              		.align	2
 4842              	g_shift:
 4843 0000 2A       		.byte	42
 4844 0001 000000   		.space	3
 4845 0004 FFFFFFFF 		.word	-1
 4846              		.section	.data.h_shift,"aw"
 4847              		.align	2
 4848              		.set	.LANCHOR15,. + 0
 4851              	h_shift:
 4852 0000 2B       		.byte	43
 4853 0001 000000   		.space	3
 4854 0004 FFFFFFFF 		.word	-1
 4855              		.section	.data.heartbeat,"aw"
 4856              		.align	2
ARM GAS  /tmp/ccmw9yhH.s 			page 130


 4857              		.set	.LANCHOR19,. + 0
 4860              	heartbeat:
 4861 0000 62       		.byte	98
 4862 0001 000000   		.space	3
 4863 0004 FFFFFFFF 		.word	-1
 4864              		.section	.data.no_key,"aw"
 4865              		.align	2
 4866              		.set	.LANCHOR10,. + 0
 4869              	no_key:
 4870 0000 2E       		.byte	46
 4871 0001 000000   		.space	3
 4872 0004 00000000 		.word	0
 4873              		.section	.data.release,"aw"
 4874              		.align	2
 4875              		.set	.LANCHOR11,. + 0
 4878              	release:
 4879 0000 63       		.byte	99
 4880 0001 000000   		.space	3
 4881 0004 FFFFFFFF 		.word	-1
 4882              		.section	.data.spaces,"aw"
 4883              		.align	2
 4884              		.set	.LANCHOR9,. + 0
 4887              	spaces:
 4888 0000 20202020 		.ascii	"                     \000"
 4888      20202020 
 4888      20202020 
 4888      20202020 
 4888      20202020 
 4889              		.section	.rodata.MID_MENU,"a"
 4890              		.align	2
 4891              		.set	.LANCHOR18,. + 0
 4894              	MID_MENU:
 4895 0000 00000000 		.word	.LC17
 4896 0004 00000000 		.word	mid_menu
 4897 0008 00000000 		.word	0
 4898 000c 00000000 		.word	0
 4899              		.section	.rodata.Menus,"a"
 4900              		.align	2
 4903              	Menus:
 4904 0000 4D5F426C 		.ascii	"M_Blank\000"
 4904      616E6B00 
 4905 0008 00000000 		.space	7
 4905      000000
 4906 000f 00       		.space	1
 4907 0010 2E       		.byte	46
 4908 0011 000000   		.space	3
 4909 0014 FFFFFFFF 		.word	-1
 4910 0018 2E       		.byte	46
 4911 0019 000000   		.space	3
 4912 001c FFFFFFFF 		.word	-1
 4913 0020 00       		.ascii	"\000"
 4914 0021 00000000 		.space	7
 4914      000000
 4915 0028 00       		.ascii	"\000"
 4916 0029 00000000 		.space	7
 4916      000000
 4917 0030 2E       		.byte	46
ARM GAS  /tmp/ccmw9yhH.s 			page 131


 4918 0031 000000   		.space	3
 4919 0034 FFFFFFFF 		.word	-1
 4920 0038 2E       		.byte	46
 4921 0039 000000   		.space	3
 4922 003c FFFFFFFF 		.word	-1
 4923 0040 00       		.ascii	"\000"
 4924 0041 00000000 		.space	7
 4924      000000
 4925 0048 00       		.ascii	"\000"
 4926 0049 00000000 		.space	7
 4926      000000
 4927 0050 2E       		.byte	46
 4928 0051 000000   		.space	3
 4929 0054 FFFFFFFF 		.word	-1
 4930 0058 2E       		.byte	46
 4931 0059 000000   		.space	3
 4932 005c FFFFFFFF 		.word	-1
 4933 0060 00       		.ascii	"\000"
 4934 0061 00000000 		.space	7
 4934      000000
 4935 0068 00       		.ascii	"\000"
 4936 0069 00000000 		.space	7
 4936      000000
 4937 0070 2E       		.byte	46
 4938 0071 000000   		.space	3
 4939 0074 FFFFFFFF 		.word	-1
 4940 0078 2E       		.byte	46
 4941 0079 000000   		.space	3
 4942 007c FFFFFFFF 		.word	-1
 4943 0080 00       		.ascii	"\000"
 4944 0081 00000000 		.space	7
 4944      000000
 4945 0088 00       		.ascii	"\000"
 4946 0089 00000000 		.space	7
 4946      000000
 4947 0090 2C       		.byte	44
 4948 0091 000000   		.space	3
 4949 0094 FFFFFFFF 		.word	-1
 4950 0098 2E       		.byte	46
 4951 0099 000000   		.space	3
 4952 009c FFFFFFFF 		.word	-1
 4953 00a0 2D2D0D00 		.ascii	"--\015\000"
 4954 00a4 00000000 		.space	4
 4955 00a8 00       		.ascii	"\000"
 4956 00a9 00000000 		.space	7
 4956      000000
 4957 00b0 2D       		.byte	45
 4958 00b1 000000   		.space	3
 4959 00b4 FFFFFFFF 		.word	-1
 4960 00b8 31       		.byte	49
 4961 00b9 000000   		.space	3
 4962 00bc 0B000000 		.word	11
 4963 00c0 43505800 		.ascii	"CPX\000"
 4964 00c4 00000000 		.space	4
 4965 00c8 00       		.ascii	"\000"
 4966 00c9 00000000 		.space	7
 4966      000000
ARM GAS  /tmp/ccmw9yhH.s 			page 132


 4967 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4967      65617200 
 4968 00d8 00000000 		.space	7
 4968      000000
 4969 00df 00       		.space	1
 4970 00e0 10       		.byte	16
 4971 00e1 000000   		.space	3
 4972 00e4 01000000 		.word	1
 4973 00e8 34       		.byte	52
 4974 00e9 000000   		.space	3
 4975 00ec 44010000 		.word	324
 4976 00f0 434C5072 		.ascii	"CLProg\000"
 4976      6F6700
 4977 00f7 00       		.space	1
 4978 00f8 434C5041 		.ascii	"CLPAll\000"
 4978      6C6C00
 4979 00ff 00       		.space	1
 4980 0100 10       		.byte	16
 4981 0101 000000   		.space	3
 4982 0104 02000000 		.word	2
 4983 0108 34       		.byte	52
 4984 0109 000000   		.space	3
 4985 010c 3E010000 		.word	318
 4986 0110 434C9100 		.ascii	"CL\221\000"
 4987 0114 00000000 		.space	4
 4988 0118 434C5265 		.ascii	"CLReg\000"
 4988      6700
 4989 011e 0000     		.space	2
 4990 0120 10       		.byte	16
 4991 0121 000000   		.space	3
 4992 0124 03000000 		.word	3
 4993 0128 34       		.byte	52
 4994 0129 000000   		.space	3
 4995 012c 74010000 		.word	372
 4996 0130 434C7800 		.ascii	"CLx\000"
 4997 0134 00000000 		.space	4
 4998 0138 434C06A0 		.ascii	"CL\006\240\000"
 4998      00
 4999 013d 000000   		.space	3
 5000 0140 34       		.byte	52
 5001 0141 000000   		.space	3
 5002 0144 40010000 		.word	320
 5003 0148 34       		.byte	52
 5004 0149 000000   		.space	3
 5005 014c 41010000 		.word	321
 5006 0150 434C5374 		.ascii	"CLStk\000"
 5006      6B00
 5007 0156 0000     		.space	2
 5008 0158 434C416C 		.ascii	"CLAll\000"
 5008      6C00
 5009 015e 0000     		.space	2
 5010 0160 2C       		.byte	44
 5011 0161 000000   		.space	3
 5012 0164 FFFFFFFF 		.word	-1
 5013 0168 2E       		.byte	46
 5014 0169 000000   		.space	3
 5015 016c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccmw9yhH.s 			page 133


 5016 0170 2D2D0D00 		.ascii	"--\015\000"
 5017 0174 00000000 		.space	4
 5018 0178 00       		.ascii	"\000"
 5019 0179 00000000 		.space	7
 5019      000000
 5020 0180 2D       		.byte	45
 5021 0181 000000   		.space	3
 5022 0184 FFFFFFFF 		.word	-1
 5023 0188 2E       		.byte	46
 5024 0189 000000   		.space	3
 5025 018c FFFFFFFF 		.word	-1
 5026 0190 43505800 		.ascii	"CPX\000"
 5027 0194 00000000 		.space	4
 5028 0198 00       		.ascii	"\000"
 5029 0199 00000000 		.space	7
 5029      000000
 5030 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5030      737000
 5031 01a7 00000000 		.space	8
 5031      00000000 
 5032 01af 00       		.space	1
 5033 01b0 00       		.byte	0
 5034 01b1 000000   		.space	3
 5035 01b4 03000000 		.word	3
 5036 01b8 05       		.byte	5
 5037 01b9 000000   		.space	3
 5038 01bc 01000000 		.word	1
 5039 01c0 414C4C00 		.ascii	"ALL\000"
 5040 01c4 00000000 		.space	4
 5041 01c8 6120622F 		.ascii	"a b/c\000"
 5041      6300
 5042 01ce 0000     		.space	2
 5043 01d0 01       		.byte	1
 5044 01d1 000000   		.space	3
 5045 01d4 03000000 		.word	3
 5046 01d8 05       		.byte	5
 5047 01d9 000000   		.space	3
 5048 01dc 02000000 		.word	2
 5049 01e0 46495800 		.ascii	"FIX\000"
 5050 01e4 00000000 		.space	4
 5051 01e8 642F6300 		.ascii	"d/c\000"
 5052 01ec 00000000 		.space	4
 5053 01f0 02       		.byte	2
 5054 01f1 000000   		.space	3
 5055 01f4 03000000 		.word	3
 5056 01f8 06       		.byte	6
 5057 01f9 000000   		.space	3
 5058 01fc 01000000 		.word	1
 5059 0200 53434900 		.ascii	"SCI\000"
 5060 0204 00000000 		.space	4
 5061 0208 482E4D53 		.ascii	"H.MS\000"
 5061      00
 5062 020d 000000   		.space	3
 5063 0210 03       		.byte	3
 5064 0211 000000   		.space	3
 5065 0214 03000000 		.word	3
 5066 0218 07       		.byte	7
ARM GAS  /tmp/ccmw9yhH.s 			page 134


 5067 0219 000000   		.space	3
 5068 021c 01000000 		.word	1
 5069 0220 454E4700 		.ascii	"ENG\000"
 5070 0224 00000000 		.space	4
 5071 0228 482E6400 		.ascii	"H.d\000"
 5072 022c 00000000 		.space	4
 5073 0230 2C       		.byte	44
 5074 0231 000000   		.space	3
 5075 0234 FFFFFFFF 		.word	-1
 5076 0238 26       		.byte	38
 5077 0239 000000   		.space	3
 5078 023c 03000000 		.word	3
 5079 0240 2D2D0D00 		.ascii	"--\015\000"
 5080 0244 00000000 		.space	4
 5081 0248 2E2F2C00 		.ascii	"./,\000"
 5082 024c 00000000 		.space	4
 5083 0250 2D       		.byte	45
 5084 0251 000000   		.space	3
 5085 0254 FFFFFFFF 		.word	-1
 5086 0258 2E       		.byte	46
 5087 0259 000000   		.space	3
 5088 025c FFFFFFFF 		.word	-1
 5089 0260 43505800 		.ascii	"CPX\000"
 5090 0264 00000000 		.space	4
 5091 0268 00       		.ascii	"\000"
 5092 0269 00000000 		.space	7
 5092      000000
 5093 0270 4D5F4261 		.ascii	"M_Base\000"
 5093      736500
 5094 0277 00000000 		.space	8
 5094      00000000 
 5095 027f 00       		.space	1
 5096 0280 0E       		.byte	14
 5097 0281 000000   		.space	3
 5098 0284 01000000 		.word	1
 5099 0288 0E       		.byte	14
 5100 0289 000000   		.space	3
 5101 028c 03000000 		.word	3
 5102 0290 42494E00 		.ascii	"BIN\000"
 5103 0294 00000000 		.space	4
 5104 0298 6E6F7400 		.ascii	"not\000"
 5105 029c 00000000 		.space	4
 5106 02a0 0E       		.byte	14
 5107 02a1 000000   		.space	3
 5108 02a4 02000000 		.word	2
 5109 02a8 13       		.byte	19
 5110 02a9 000000   		.space	3
 5111 02ac 03000000 		.word	3
 5112 02b0 4F435400 		.ascii	"OCT\000"
 5113 02b4 00000000 		.space	4
 5114 02b8 616E6400 		.ascii	"and\000"
 5115 02bc 00000000 		.space	4
 5116 02c0 0F       		.byte	15
 5117 02c1 000000   		.space	3
 5118 02c4 01000000 		.word	1
 5119 02c8 14       		.byte	20
 5120 02c9 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 135


 5121 02cc 03000000 		.word	3
 5122 02d0 44454300 		.ascii	"DEC\000"
 5123 02d4 00000000 		.space	4
 5124 02d8 6F7200   		.ascii	"or\000"
 5125 02db 00000000 		.space	5
 5125      00
 5126 02e0 0F       		.byte	15
 5127 02e1 000000   		.space	3
 5128 02e4 02000000 		.word	2
 5129 02e8 15       		.byte	21
 5130 02e9 000000   		.space	3
 5131 02ec 03000000 		.word	3
 5132 02f0 48455800 		.ascii	"HEX\000"
 5133 02f4 00000000 		.space	4
 5134 02f8 786F7200 		.ascii	"xor\000"
 5135 02fc 00000000 		.space	4
 5136 0300 2C       		.byte	44
 5137 0301 000000   		.space	3
 5138 0304 FFFFFFFF 		.word	-1
 5139 0308 16       		.byte	22
 5140 0309 000000   		.space	3
 5141 030c 03000000 		.word	3
 5142 0310 2D2D0D00 		.ascii	"--\015\000"
 5143 0314 00000000 		.space	4
 5144 0318 524D4452 		.ascii	"RMDR\000"
 5144      00
 5145 031d 000000   		.space	3
 5146 0320 2D       		.byte	45
 5147 0321 000000   		.space	3
 5148 0324 FFFFFFFF 		.word	-1
 5149 0328 07       		.byte	7
 5150 0329 000000   		.space	3
 5151 032c 01000000 		.word	1
 5152 0330 43505800 		.ascii	"CPX\000"
 5153 0334 00000000 		.space	4
 5154 0338 482E6400 		.ascii	"H.d\000"
 5155 033c 00000000 		.space	4
 5156 0340 4D5F416E 		.ascii	"M_Angles\000"
 5156      676C6573 
 5156      00
 5157 0349 00000000 		.space	6
 5157      0000
 5158 034f 00       		.space	1
 5159 0350 06       		.byte	6
 5160 0351 000000   		.space	3
 5161 0354 02000000 		.word	2
 5162 0358 04       		.byte	4
 5163 0359 000000   		.space	3
 5164 035c 01000000 		.word	1
 5165 0360 44454700 		.ascii	"DEG\000"
 5166 0364 00000000 		.space	4
 5167 0368 500D5200 		.ascii	"P\015R\000"
 5168 036c 00000000 		.space	4
 5169 0370 07       		.byte	7
 5170 0371 000000   		.space	3
 5171 0374 02000000 		.word	2
 5172 0378 04       		.byte	4
ARM GAS  /tmp/ccmw9yhH.s 			page 136


 5173 0379 000000   		.space	3
 5174 037c 02000000 		.word	2
 5175 0380 52414400 		.ascii	"RAD\000"
 5176 0384 00000000 		.space	4
 5177 0388 520D5000 		.ascii	"R\015P\000"
 5178 038c 00000000 		.space	4
 5179 0390 08       		.byte	8
 5180 0391 000000   		.space	3
 5181 0394 02000000 		.word	2
 5182 0398 00       		.byte	0
 5183 0399 000000   		.space	3
 5184 039c 01000000 		.word	1
 5185 03a0 47524144 		.ascii	"GRAD\000"
 5185      00
 5186 03a5 000000   		.space	3
 5187 03a8 48595000 		.ascii	"HYP\000"
 5188 03ac 00000000 		.space	4
 5189 03b0 06       		.byte	6
 5190 03b1 000000   		.space	3
 5191 03b4 01000000 		.word	1
 5192 03b8 07       		.byte	7
 5193 03b9 000000   		.space	3
 5194 03bc 01000000 		.word	1
 5195 03c0 482E4D53 		.ascii	"H.MS\000"
 5195      00
 5196 03c5 000000   		.space	3
 5197 03c8 482E6400 		.ascii	"H.d\000"
 5198 03cc 00000000 		.space	4
 5199 03d0 2C       		.byte	44
 5200 03d1 000000   		.space	3
 5201 03d4 FFFFFFFF 		.word	-1
 5202 03d8 00       		.byte	0
 5203 03d9 000000   		.space	3
 5204 03dc 02000000 		.word	2
 5205 03e0 2D2D0D00 		.ascii	"--\015\000"
 5206 03e4 00000000 		.space	4
 5207 03e8 4859509D 		.ascii	"HYP\235\000"
 5207      00
 5208 03ed 000000   		.space	3
 5209 03f0 2D       		.byte	45
 5210 03f1 000000   		.space	3
 5211 03f4 FFFFFFFF 		.word	-1
 5212 03f8 2E       		.byte	46
 5213 03f9 000000   		.space	3
 5214 03fc FFFFFFFF 		.word	-1
 5215 0400 43505800 		.ascii	"CPX\000"
 5216 0404 00000000 		.space	4
 5217 0408 00       		.ascii	"\000"
 5218 0409 00000000 		.space	7
 5218      000000
 5219 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5219      736300
 5220 0417 00000000 		.space	8
 5220      00000000 
 5221 041f 00       		.space	1
 5222 0420 25       		.byte	37
 5223 0421 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 137


 5224 0424 01000000 		.word	1
 5225 0428 14       		.byte	20
 5226 0429 000000   		.space	3
 5227 042c 01000000 		.word	1
 5228 0430 7C587C00 		.ascii	"|X|\000"
 5229 0434 00000000 		.space	4
 5230 0438 329C00   		.ascii	"2\234\000"
 5231 043b 00000000 		.space	5
 5231      00
 5232 0440 25       		.byte	37
 5233 0441 000000   		.space	3
 5234 0444 02000000 		.word	2
 5235 0448 14       		.byte	20
 5236 0449 000000   		.space	3
 5237 044c 02000000 		.word	2
 5238 0450 524E4400 		.ascii	"RND\000"
 5239 0454 00000000 		.space	4
 5240 0458 4C6F67BA 		.ascii	"Log\272\000"
 5240      00
 5241 045d 000000   		.space	3
 5242 0460 26       		.byte	38
 5243 0461 000000   		.space	3
 5244 0464 01000000 		.word	1
 5245 0468 15       		.byte	21
 5246 0469 000000   		.space	3
 5247 046c 02000000 		.word	2
 5248 0470 49506172 		.ascii	"IPart\000"
 5248      7400
 5249 0476 0000     		.space	2
 5250 0478 4C6F678B 		.ascii	"Log\213\000"
 5250      00
 5251 047d 000000   		.space	3
 5252 0480 26       		.byte	38
 5253 0481 000000   		.space	3
 5254 0484 02000000 		.word	2
 5255 0488 16       		.byte	22
 5256 0489 000000   		.space	3
 5257 048c 02000000 		.word	2
 5258 0490 46506172 		.ascii	"FPart\000"
 5258      7400
 5259 0496 0000     		.space	2
 5260 0498 7C7C656C 		.ascii	"||el\000"
 5260      00
 5261 049d 000000   		.space	3
 5262 04a0 2C       		.byte	44
 5263 04a1 000000   		.space	3
 5264 04a4 FFFFFFFF 		.word	-1
 5265 04a8 22       		.byte	34
 5266 04a9 000000   		.space	3
 5267 04ac 02000000 		.word	2
 5268 04b0 2D2D0D00 		.ascii	"--\015\000"
 5269 04b4 00000000 		.space	4
 5270 04b8 832500   		.ascii	"\203%\000"
 5271 04bb 00000000 		.space	5
 5271      00
 5272 04c0 2D       		.byte	45
 5273 04c1 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 138


 5274 04c4 FFFFFFFF 		.word	-1
 5275 04c8 2E       		.byte	46
 5276 04c9 000000   		.space	3
 5277 04cc FFFFFFFF 		.word	-1
 5278 04d0 43505800 		.ascii	"CPX\000"
 5279 04d4 00000000 		.space	4
 5280 04d8 00       		.ascii	"\000"
 5281 04d9 00000000 		.space	7
 5281      000000
 5282 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5282      617000
 5283 04e7 00000000 		.space	8
 5283      00000000 
 5284 04ef 00       		.space	1
 5285 04f0 0D       		.byte	13
 5286 04f1 000000   		.space	3
 5287 04f4 01000000 		.word	1
 5288 04f8 34       		.byte	52
 5289 04f9 000000   		.space	3
 5290 04fc 00A60000 		.word	42496
 5291 0500 53686F77 		.ascii	"Show\016\000"
 5291      0E00
 5292 0506 0000     		.space	2
 5293 0508 5B175D00 		.ascii	"[\027]\000"
 5294 050c 00000000 		.space	4
 5295 0510 0D       		.byte	13
 5296 0511 000000   		.space	3
 5297 0514 02000000 		.word	2
 5298 0518 2E       		.byte	46
 5299 0519 000000   		.space	3
 5300 051c FFFFFFFF 		.word	-1
 5301 0520 53686F77 		.ascii	"Show\015\000"
 5301      0D00
 5302 0526 0000     		.space	2
 5303 0528 00       		.ascii	"\000"
 5304 0529 00000000 		.space	7
 5304      000000
 5305 0530 0D       		.byte	13
 5306 0531 000000   		.space	3
 5307 0534 03000000 		.word	3
 5308 0538 34       		.byte	52
 5309 0539 000000   		.space	3
 5310 053c 00330000 		.word	13056
 5311 0540 78173F00 		.ascii	"x\027?\000"
 5312 0544 00000000 		.space	4
 5313 0548 7A173F00 		.ascii	"z\027?\000"
 5314 054c 00000000 		.space	4
 5315 0550 34       		.byte	52
 5316 0551 000000   		.space	3
 5317 0554 00320000 		.word	12800
 5318 0558 34       		.byte	52
 5319 0559 000000   		.space	3
 5320 055c 00340000 		.word	13312
 5321 0560 79173F00 		.ascii	"y\027?\000"
 5322 0564 00000000 		.space	4
 5323 0568 74173F00 		.ascii	"t\027?\000"
 5324 056c 00000000 		.space	4
ARM GAS  /tmp/ccmw9yhH.s 			page 139


 5325 0570 2C       		.byte	44
 5326 0571 000000   		.space	3
 5327 0574 FFFFFFFF 		.word	-1
 5328 0578 2E       		.byte	46
 5329 0579 000000   		.space	3
 5330 057c FFFFFFFF 		.word	-1
 5331 0580 2D2D0D00 		.ascii	"--\015\000"
 5332 0584 00000000 		.space	4
 5333 0588 00       		.ascii	"\000"
 5334 0589 00000000 		.space	7
 5334      000000
 5335 0590 2D       		.byte	45
 5336 0591 000000   		.space	3
 5337 0594 FFFFFFFF 		.word	-1
 5338 0598 2E       		.byte	46
 5339 0599 000000   		.space	3
 5340 059c FFFFFFFF 		.word	-1
 5341 05a0 43505800 		.ascii	"CPX\000"
 5342 05a4 00000000 		.space	4
 5343 05a8 00       		.ascii	"\000"
 5344 05a9 00000000 		.space	7
 5344      000000
 5345 05b0 4D5F5072 		.ascii	"M_Program\000"
 5345      6F677261 
 5345      6D00
 5346 05ba 00000000 		.space	5
 5346      00
 5347 05bf 00       		.space	1
 5348 05c0 27       		.byte	39
 5349 05c1 000000   		.space	3
 5350 05c4 01000000 		.word	1
 5351 05c8 28       		.byte	40
 5352 05c9 000000   		.space	3
 5353 05cc 01000000 		.word	1
 5354 05d0 4C424C00 		.ascii	"LBL\000"
 5355 05d4 00000000 		.space	4
 5356 05d8 44534500 		.ascii	"DSE\000"
 5357 05dc 00000000 		.space	4
 5358 05e0 27       		.byte	39
 5359 05e1 000000   		.space	3
 5360 05e4 02000000 		.word	2
 5361 05e8 28       		.byte	40
 5362 05e9 000000   		.space	3
 5363 05ec 02000000 		.word	2
 5364 05f0 52544E00 		.ascii	"RTN\000"
 5365 05f4 00000000 		.space	4
 5366 05f8 49534700 		.ascii	"ISG\000"
 5367 05fc 00000000 		.space	4
 5368 0600 25       		.byte	37
 5369 0601 000000   		.space	3
 5370 0604 03000000 		.word	3
 5371 0608 34       		.byte	52
 5372 0609 000000   		.space	3
 5373 060c 00600000 		.word	24576
 5374 0610 50617573 		.ascii	"Pause\000"
 5374      6500
 5375 0616 0000     		.space	2
ARM GAS  /tmp/ccmw9yhH.s 			page 140


 5376 0618 44454300 		.ascii	"DEC\000"
 5377 061c 00000000 		.space	4
 5378 0620 12       		.byte	18
 5379 0621 000000   		.space	3
 5380 0624 03000000 		.word	3
 5381 0628 34       		.byte	52
 5382 0629 000000   		.space	3
 5383 062c 00610000 		.word	24832
 5384 0630 47544F00 		.ascii	"GTO\000"
 5385 0634 00000000 		.space	4
 5386 0638 494E4300 		.ascii	"INC\000"
 5387 063c 00000000 		.space	4
 5388 0640 2C       		.byte	44
 5389 0641 000000   		.space	3
 5390 0644 FFFFFFFF 		.word	-1
 5391 0648 34       		.byte	52
 5392 0649 000000   		.space	3
 5393 064c 00570000 		.word	22272
 5394 0650 2D2D0D00 		.ascii	"--\015\000"
 5395 0654 00000000 		.space	4
 5396 0658 4241434B 		.ascii	"BACK\000"
 5396      00
 5397 065d 000000   		.space	3
 5398 0660 2D       		.byte	45
 5399 0661 000000   		.space	3
 5400 0664 FFFFFFFF 		.word	-1
 5401 0668 34       		.byte	52
 5402 0669 000000   		.space	3
 5403 066c 00560000 		.word	22016
 5404 0670 43505800 		.ascii	"CPX\000"
 5405 0674 00000000 		.space	4
 5406 0678 534B4950 		.ascii	"SKIP\000"
 5406      00
 5407 067d 000000   		.space	3
 5408 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5408      74757031 
 5408      00
 5409 0689 00000000 		.space	6
 5409      0000
 5410 068f 00       		.space	1
 5411 0690 32       		.byte	50
 5412 0691 000000   		.space	3
 5413 0694 00000000 		.word	0
 5414 0698 30       		.byte	48
 5415 0699 000000   		.space	3
 5416 069c 00000000 		.word	0
 5417 06a0 45584954 		.ascii	"EXIT\000"
 5417      00
 5418 06a5 000000   		.space	3
 5419 06a8 53797374 		.ascii	"System\000"
 5419      656D00
 5420 06af 00       		.space	1
 5421 06b0 31       		.byte	49
 5422 06b1 000000   		.space	3
 5423 06b4 09000000 		.word	9
 5424 06b8 2E       		.byte	46
 5425 06b9 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 141


 5426 06bc FFFFFFFF 		.word	-1
 5427 06c0 48454C50 		.ascii	"HELP\000"
 5427      00
 5428 06c5 000000   		.space	3
 5429 06c8 00       		.ascii	"\000"
 5430 06c9 00000000 		.space	7
 5430      000000
 5431 06d0 31       		.byte	49
 5432 06d1 000000   		.space	3
 5433 06d4 02000000 		.word	2
 5434 06d8 31       		.byte	49
 5435 06d9 000000   		.space	3
 5436 06dc 06000000 		.word	6
 5437 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5437      4F00
 5438 06e6 0000     		.space	2
 5439 06e8 53765241 		.ascii	"SvRAM\000"
 5439      4D00
 5440 06ee 0000     		.space	2
 5441 06f0 31       		.byte	49
 5442 06f1 000000   		.space	3
 5443 06f4 03000000 		.word	3
 5444 06f8 31       		.byte	49
 5445 06f9 000000   		.space	3
 5446 06fc 07000000 		.word	7
 5447 0700 4F6E5243 		.ascii	"OnRCL\000"
 5447      4C00
 5448 0706 0000     		.space	2
 5449 0708 4C645241 		.ascii	"LdRAM\000"
 5449      4D00
 5450 070e 0000     		.space	2
 5451 0710 2C       		.byte	44
 5452 0711 000000   		.space	3
 5453 0714 FFFFFFFF 		.word	-1
 5454 0718 2E       		.byte	46
 5455 0719 000000   		.space	3
 5456 071c FFFFFFFF 		.word	-1
 5457 0720 2D2D0D00 		.ascii	"--\015\000"
 5458 0724 00000000 		.space	4
 5459 0728 00       		.ascii	"\000"
 5460 0729 00000000 		.space	7
 5460      000000
 5461 0730 2D       		.byte	45
 5462 0731 000000   		.space	3
 5463 0734 FFFFFFFF 		.word	-1
 5464 0738 2E       		.byte	46
 5465 0739 000000   		.space	3
 5466 073c FFFFFFFF 		.word	-1
 5467 0740 43505800 		.ascii	"CPX\000"
 5468 0744 00000000 		.space	4
 5469 0748 00       		.ascii	"\000"
 5470 0749 00000000 		.space	7
 5470      000000
 5471 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5471      726F7700 
 5472 0758 00000000 		.space	7
 5472      000000
ARM GAS  /tmp/ccmw9yhH.s 			page 142


 5473 075f 00       		.space	1
 5474 0760 0E       		.byte	14
 5475 0761 000000   		.space	3
 5476 0764 01000000 		.word	1
 5477 0768 06       		.byte	6
 5478 0769 000000   		.space	3
 5479 076c 02000000 		.word	2
 5480 0770 0D42696E 		.ascii	"\015Bin\000"
 5480      00
 5481 0775 000000   		.space	3
 5482 0778 0D444547 		.ascii	"\015DEG\000"
 5482      00
 5483 077d 000000   		.space	3
 5484 0780 0E       		.byte	14
 5485 0781 000000   		.space	3
 5486 0784 02000000 		.word	2
 5487 0788 07       		.byte	7
 5488 0789 000000   		.space	3
 5489 078c 02000000 		.word	2
 5490 0790 0D4F6374 		.ascii	"\015Oct\000"
 5490      00
 5491 0795 000000   		.space	3
 5492 0798 0D524144 		.ascii	"\015RAD\000"
 5492      00
 5493 079d 000000   		.space	3
 5494 07a0 0F       		.byte	15
 5495 07a1 000000   		.space	3
 5496 07a4 01000000 		.word	1
 5497 07a8 08       		.byte	8
 5498 07a9 000000   		.space	3
 5499 07ac 02000000 		.word	2
 5500 07b0 0D446563 		.ascii	"\015Dec\000"
 5500      00
 5501 07b5 000000   		.space	3
 5502 07b8 0D477261 		.ascii	"\015Grad\000"
 5502      6400
 5503 07be 0000     		.space	2
 5504 07c0 0F       		.byte	15
 5505 07c1 000000   		.space	3
 5506 07c4 02000000 		.word	2
 5507 07c8 06       		.byte	6
 5508 07c9 000000   		.space	3
 5509 07cc 01000000 		.word	1
 5510 07d0 0D486578 		.ascii	"\015Hex\000"
 5510      00
 5511 07d5 000000   		.space	3
 5512 07d8 0D484D53 		.ascii	"\015HMS\000"
 5512      00
 5513 07dd 000000   		.space	3
 5514 07e0 2C       		.byte	44
 5515 07e1 000000   		.space	3
 5516 07e4 FFFFFFFF 		.word	-1
 5517 07e8 07       		.byte	7
 5518 07e9 000000   		.space	3
 5519 07ec 01000000 		.word	1
 5520 07f0 2D2D0D00 		.ascii	"--\015\000"
 5521 07f4 00000000 		.space	4
ARM GAS  /tmp/ccmw9yhH.s 			page 143


 5522 07f8 484D530D 		.ascii	"HMS\015\000"
 5522      00
 5523 07fd 000000   		.space	3
 5524 0800 2D       		.byte	45
 5525 0801 000000   		.space	3
 5526 0804 FFFFFFFF 		.word	-1
 5527 0808 2E       		.byte	46
 5528 0809 000000   		.space	3
 5529 080c FFFFFFFF 		.word	-1
 5530 0810 43505800 		.ascii	"CPX\000"
 5531 0814 00000000 		.space	4
 5532 0818 00       		.ascii	"\000"
 5533 0819 00000000 		.space	7
 5533      000000
 5534 0820 4D5F466C 		.ascii	"M_Flags\000"
 5534      61677300 
 5535 0828 00000000 		.space	7
 5535      000000
 5536 082f 00       		.space	1
 5537 0830 1E       		.byte	30
 5538 0831 000000   		.space	3
 5539 0834 01000000 		.word	1
 5540 0838 34       		.byte	52
 5541 0839 000000   		.space	3
 5542 083c 00740000 		.word	29696
 5543 0840 53465F00 		.ascii	"SF_\000"
 5544 0844 00000000 		.space	4
 5545 0848 46533F00 		.ascii	"FS?\000"
 5546 084c 00000000 		.space	4
 5547 0850 1E       		.byte	30
 5548 0851 000000   		.space	3
 5549 0854 02000000 		.word	2
 5550 0858 34       		.byte	52
 5551 0859 000000   		.space	3
 5552 085c 00750000 		.word	29952
 5553 0860 43465F00 		.ascii	"CF_\000"
 5554 0864 00000000 		.space	4
 5555 0868 46433F00 		.ascii	"FC?\000"
 5556 086c 00000000 		.space	4
 5557 0870 1F       		.byte	31
 5558 0871 000000   		.space	3
 5559 0874 01000000 		.word	1
 5560 0878 34       		.byte	52
 5561 0879 000000   		.space	3
 5562 087c 00500000 		.word	20480
 5563 0880 783D3F00 		.ascii	"x=?\000"
 5564 0884 00000000 		.space	4
 5565 0888 783C3F00 		.ascii	"x<?\000"
 5566 088c 00000000 		.space	4
 5567 0890 1F       		.byte	31
 5568 0891 000000   		.space	3
 5569 0894 02000000 		.word	2
 5570 0898 34       		.byte	52
 5571 0899 000000   		.space	3
 5572 089c 00510000 		.word	20736
 5573 08a0 780B3F00 		.ascii	"x\013?\000"
 5574 08a4 00000000 		.space	4
ARM GAS  /tmp/ccmw9yhH.s 			page 144


 5575 08a8 783C3D3F 		.ascii	"x<=?\000"
 5575      00
 5576 08ad 000000   		.space	3
 5577 08b0 2C       		.byte	44
 5578 08b1 000000   		.space	3
 5579 08b4 FFFFFFFF 		.word	-1
 5580 08b8 34       		.byte	52
 5581 08b9 000000   		.space	3
 5582 08bc 00530000 		.word	21248
 5583 08c0 2D2D0D00 		.ascii	"--\015\000"
 5584 08c4 00000000 		.space	4
 5585 08c8 783E3D3F 		.ascii	"x>=?\000"
 5585      00
 5586 08cd 000000   		.space	3
 5587 08d0 2D       		.byte	45
 5588 08d1 000000   		.space	3
 5589 08d4 FFFFFFFF 		.word	-1
 5590 08d8 34       		.byte	52
 5591 08d9 000000   		.space	3
 5592 08dc 00520000 		.word	20992
 5593 08e0 43505800 		.ascii	"CPX\000"
 5594 08e4 00000000 		.space	4
 5595 08e8 783E3F00 		.ascii	"x>?\000"
 5596 08ec 00000000 		.space	4
 5597 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5597      6F6200
 5598 08f7 00000000 		.space	8
 5598      00000000 
 5599 08ff 00       		.space	1
 5600 0900 18       		.byte	24
 5601 0901 000000   		.space	3
 5602 0904 03000000 		.word	3
 5603 0908 34       		.byte	52
 5604 0909 000000   		.space	3
 5605 090c 31020000 		.word	561
 5606 0910 46616374 		.ascii	"Fact!\000"
 5606      2100
 5607 0916 0000     		.space	2
 5608 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5608      00
 5609 091d 000000   		.space	3
 5610 0920 18       		.byte	24
 5611 0921 000000   		.space	3
 5612 0924 01000000 		.word	1
 5613 0928 19       		.byte	25
 5614 0929 000000   		.space	3
 5615 092c 01000000 		.word	1
 5616 0930 43792C78 		.ascii	"Cy,x\000"
 5616      00
 5617 0935 000000   		.space	3
 5618 0938 9400     		.ascii	"\224\000"
 5619 093a 00000000 		.space	6
 5619      0000
 5620 0940 18       		.byte	24
 5621 0941 000000   		.space	3
 5622 0944 02000000 		.word	2
 5623 0948 19       		.byte	25
ARM GAS  /tmp/ccmw9yhH.s 			page 145


 5624 0949 000000   		.space	3
 5625 094c 02000000 		.word	2
 5626 0950 50792C78 		.ascii	"Py,x\000"
 5626      00
 5627 0955 000000   		.space	3
 5628 0958 949D00   		.ascii	"\224\235\000"
 5629 095b 00000000 		.space	5
 5629      00
 5630 0960 08       		.byte	8
 5631 0961 000000   		.space	3
 5632 0964 01000000 		.word	1
 5633 0968 34       		.byte	52
 5634 0969 000000   		.space	3
 5635 096c 34010000 		.word	308
 5636 0970 52414E23 		.ascii	"RAN#\000"
 5636      00
 5637 0975 000000   		.space	3
 5638 0978 53454544 		.ascii	"SEED\000"
 5638      00
 5639 097d 000000   		.space	3
 5640 0980 2C       		.byte	44
 5641 0981 000000   		.space	3
 5642 0984 FFFFFFFF 		.word	-1
 5643 0988 2E       		.byte	46
 5644 0989 000000   		.space	3
 5645 098c FFFFFFFF 		.word	-1
 5646 0990 2D2D0D00 		.ascii	"--\015\000"
 5647 0994 00000000 		.space	4
 5648 0998 00       		.ascii	"\000"
 5649 0999 00000000 		.space	7
 5649      000000
 5650 09a0 2D       		.byte	45
 5651 09a1 000000   		.space	3
 5652 09a4 FFFFFFFF 		.word	-1
 5653 09a8 2E       		.byte	46
 5654 09a9 000000   		.space	3
 5655 09ac FFFFFFFF 		.word	-1
 5656 09b0 43505800 		.ascii	"CPX\000"
 5657 09b4 00000000 		.space	4
 5658 09b8 00       		.ascii	"\000"
 5659 09b9 00000000 		.space	7
 5659      000000
 5660 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5660      61747300 
 5661 09c8 00000000 		.space	7
 5661      000000
 5662 09cf 00       		.space	1
 5663 09d0 1A       		.byte	26
 5664 09d1 000000   		.space	3
 5665 09d4 01000000 		.word	1
 5666 09d8 1A       		.byte	26
 5667 09d9 000000   		.space	3
 5668 09dc 02000000 		.word	2
 5669 09e0 0100     		.ascii	"\001\000"
 5670 09e2 00000000 		.space	6
 5670      0000
 5671 09e8 532E442E 		.ascii	"S.D.\000"
ARM GAS  /tmp/ccmw9yhH.s 			page 146


 5671      00
 5672 09ed 000000   		.space	3
 5673 09f0 1B       		.byte	27
 5674 09f1 000000   		.space	3
 5675 09f4 01000000 		.word	1
 5676 09f8 34       		.byte	52
 5677 09f9 000000   		.space	3
 5678 09fc 74020000 		.word	628
 5679 0a00 792D6861 		.ascii	"y-hat\000"
 5679      7400
 5680 0a06 0000     		.space	2
 5681 0a08 782D6861 		.ascii	"x-hat\000"
 5681      7400
 5682 0a0e 0000     		.space	2
 5683 0a10 34       		.byte	52
 5684 0a11 000000   		.space	3
 5685 0a14 27010000 		.word	295
 5686 0a18 34       		.byte	52
 5687 0a19 000000   		.space	3
 5688 0a1c 28010000 		.word	296
 5689 0a20 434F5252 		.ascii	"CORR\000"
 5689      00
 5690 0a25 000000   		.space	3
 5691 0a28 4C2E522E 		.ascii	"L.R.\000"
 5691      00
 5692 0a2d 000000   		.space	3
 5693 0a30 34       		.byte	52
 5694 0a31 000000   		.space	3
 5695 0a34 32010000 		.word	306
 5696 0a38 34       		.byte	52
 5697 0a39 000000   		.space	3
 5698 0a3c 31010000 		.word	305
 5699 0a40 42657374 		.ascii	"BestF\000"
 5699      4600
 5700 0a46 0000     		.space	2
 5701 0a48 4C6F6746 		.ascii	"LogFit\000"
 5701      697400
 5702 0a4f 00       		.space	1
 5703 0a50 34       		.byte	52
 5704 0a51 000000   		.space	3
 5705 0a54 2E010000 		.word	302
 5706 0a58 34       		.byte	52
 5707 0a59 000000   		.space	3
 5708 0a5c 2F010000 		.word	303
 5709 0a60 4C696E65 		.ascii	"Linear\000"
 5709      617200
 5710 0a67 00       		.space	1
 5711 0a68 45787046 		.ascii	"ExpFit\000"
 5711      697400
 5712 0a6f 00       		.space	1
 5713 0a70 2D       		.byte	45
 5714 0a71 000000   		.space	3
 5715 0a74 FFFFFFFF 		.word	-1
 5716 0a78 34       		.byte	52
 5717 0a79 000000   		.space	3
 5718 0a7c 30010000 		.word	304
 5719 0a80 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccmw9yhH.s 			page 147


 5720 0a84 00000000 		.space	4
 5721 0a88 50777246 		.ascii	"PwrFit\000"
 5721      697400
 5722 0a8f 00       		.space	1
 5723 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5723      74757032 
 5723      00
 5724 0a99 00000000 		.space	6
 5724      0000
 5725 0a9f 00       		.space	1
 5726 0aa0 31       		.byte	49
 5727 0aa1 000000   		.space	3
 5728 0aa4 04000000 		.word	4
 5729 0aa8 2E       		.byte	46
 5730 0aa9 000000   		.space	3
 5731 0aac FFFFFFFF 		.word	-1
 5732 0ab0 53764C49 		.ascii	"SvLIB\000"
 5732      4200
 5733 0ab6 0000     		.space	2
 5734 0ab8 00       		.ascii	"\000"
 5735 0ab9 00000000 		.space	7
 5735      000000
 5736 0ac0 31       		.byte	49
 5737 0ac1 000000   		.space	3
 5738 0ac4 05000000 		.word	5
 5739 0ac8 2E       		.byte	46
 5740 0ac9 000000   		.space	3
 5741 0acc FFFFFFFF 		.word	-1
 5742 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5742      4200
 5743 0ad6 0000     		.space	2
 5744 0ad8 00       		.ascii	"\000"
 5745 0ad9 00000000 		.space	7
 5745      000000
 5746 0ae0 31       		.byte	49
 5747 0ae1 000000   		.space	3
 5748 0ae4 0A000000 		.word	10
 5749 0ae8 34       		.byte	52
 5750 0ae9 000000   		.space	3
 5751 0aec B2010000 		.word	434
 5752 0af0 53764350 		.ascii	"SvCPRG\000"
 5752      524700
 5753 0af7 00       		.space	1
 5754 0af8 5053544F 		.ascii	"PSTO\000"
 5754      00
 5755 0afd 000000   		.space	3
 5756 0b00 31       		.byte	49
 5757 0b01 000000   		.space	3
 5758 0b04 08000000 		.word	8
 5759 0b08 34       		.byte	52
 5760 0b09 000000   		.space	3
 5761 0b0c B1010000 		.word	433
 5762 0b10 4C645052 		.ascii	"LdPRG\000"
 5762      4700
 5763 0b16 0000     		.space	2
 5764 0b18 5052434C 		.ascii	"PRCL\000"
 5764      00
ARM GAS  /tmp/ccmw9yhH.s 			page 148


 5765 0b1d 000000   		.space	3
 5766 0b20 2C       		.byte	44
 5767 0b21 000000   		.space	3
 5768 0b24 FFFFFFFF 		.word	-1
 5769 0b28 2E       		.byte	46
 5770 0b29 000000   		.space	3
 5771 0b2c FFFFFFFF 		.word	-1
 5772 0b30 2D2D0D00 		.ascii	"--\015\000"
 5773 0b34 00000000 		.space	4
 5774 0b38 00       		.ascii	"\000"
 5775 0b39 00000000 		.space	7
 5775      000000
 5776 0b40 2D       		.byte	45
 5777 0b41 000000   		.space	3
 5778 0b44 FFFFFFFF 		.word	-1
 5779 0b48 2E       		.byte	46
 5780 0b49 000000   		.space	3
 5781 0b4c FFFFFFFF 		.word	-1
 5782 0b50 43505800 		.ascii	"CPX\000"
 5783 0b54 00000000 		.space	4
 5784 0b58 00       		.ascii	"\000"
 5785 0b59 00000000 		.space	7
 5785      000000
 5786 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5786      6C766500 
 5787 0b68 00000000 		.space	7
 5787      000000
 5788 0b6f 00       		.space	1
 5789 0b70 20       		.byte	32
 5790 0b71 000000   		.space	3
 5791 0b74 01000000 		.word	1
 5792 0b78 34       		.byte	52
 5793 0b79 000000   		.space	3
 5794 0b7c 00690000 		.word	26880
 5795 0b80 534C5600 		.ascii	"SLV\000"
 5796 0b84 00000000 		.space	4
 5797 0b88 66272878 		.ascii	"f'(x)\000"
 5797      2900
 5798 0b8e 0000     		.space	2
 5799 0b90 20       		.byte	32
 5800 0b91 000000   		.space	3
 5801 0b94 02000000 		.word	2
 5802 0b98 34       		.byte	52
 5803 0b99 000000   		.space	3
 5804 0b9c 006A0000 		.word	27136
 5805 0ba0 04206478 		.ascii	"\004 dx\000"
 5805      00
 5806 0ba5 000000   		.space	3
 5807 0ba8 66272728 		.ascii	"f''(x)\000"
 5807      782900
 5808 0baf 00       		.space	1
 5809 0bb0 21       		.byte	33
 5810 0bb1 000000   		.space	3
 5811 0bb4 02000000 		.word	2
 5812 0bb8 2E       		.byte	46
 5813 0bb9 000000   		.space	3
 5814 0bbc FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccmw9yhH.s 			page 149


 5815 0bc0 53554D00 		.ascii	"SUM\000"
 5816 0bc4 00000000 		.space	4
 5817 0bc8 00       		.ascii	"\000"
 5818 0bc9 00000000 		.space	7
 5818      000000
 5819 0bd0 21       		.byte	33
 5820 0bd1 000000   		.space	3
 5821 0bd4 01000000 		.word	1
 5822 0bd8 2E       		.byte	46
 5823 0bd9 000000   		.space	3
 5824 0bdc FFFFFFFF 		.word	-1
 5825 0be0 50524F44 		.ascii	"PROD\000"
 5825      00
 5826 0be5 000000   		.space	3
 5827 0be8 00       		.ascii	"\000"
 5828 0be9 00000000 		.space	7
 5828      000000
 5829 0bf0 2C       		.byte	44
 5830 0bf1 000000   		.space	3
 5831 0bf4 FFFFFFFF 		.word	-1
 5832 0bf8 2E       		.byte	46
 5833 0bf9 000000   		.space	3
 5834 0bfc FFFFFFFF 		.word	-1
 5835 0c00 2D2D0D00 		.ascii	"--\015\000"
 5836 0c04 00000000 		.space	4
 5837 0c08 00       		.ascii	"\000"
 5838 0c09 00000000 		.space	7
 5838      000000
 5839 0c10 2D       		.byte	45
 5840 0c11 000000   		.space	3
 5841 0c14 FFFFFFFF 		.word	-1
 5842 0c18 2E       		.byte	46
 5843 0c19 000000   		.space	3
 5844 0c1c FFFFFFFF 		.word	-1
 5845 0c20 43505800 		.ascii	"CPX\000"
 5846 0c24 00000000 		.space	4
 5847 0c28 00       		.ascii	"\000"
 5848 0c29 00000000 		.space	7
 5848      000000
 5849 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5849      616E6B32 
 5849      00
 5850 0c39 00000000 		.space	6
 5850      0000
 5851 0c3f 00       		.space	1
 5852 0c40 28       		.byte	40
 5853 0c41 000000   		.space	3
 5854 0c44 03000000 		.word	3
 5855 0c48 2E       		.byte	46
 5856 0c49 000000   		.space	3
 5857 0c4c FFFFFFFF 		.word	-1
 5858 0c50 912B00   		.ascii	"\221+\000"
 5859 0c53 00000000 		.space	5
 5859      00
 5860 0c58 00       		.ascii	"\000"
 5861 0c59 00000000 		.space	7
 5861      000000
ARM GAS  /tmp/ccmw9yhH.s 			page 150


 5862 0c60 16       		.byte	22
 5863 0c61 000000   		.space	3
 5864 0c64 01000000 		.word	1
 5865 0c68 2E       		.byte	46
 5866 0c69 000000   		.space	3
 5867 0c6c FFFFFFFF 		.word	-1
 5868 0c70 312F5800 		.ascii	"1/X\000"
 5869 0c74 00000000 		.space	4
 5870 0c78 00       		.ascii	"\000"
 5871 0c79 00000000 		.space	7
 5871      000000
 5872 0c80 1C       		.byte	28
 5873 0c81 000000   		.space	3
 5874 0c84 01000000 		.word	1
 5875 0c88 2E       		.byte	46
 5876 0c89 000000   		.space	3
 5877 0c8c FFFFFFFF 		.word	-1
 5878 0c90 035800   		.ascii	"\003X\000"
 5879 0c93 00000000 		.space	5
 5879      00
 5880 0c98 00       		.ascii	"\000"
 5881 0c99 00000000 		.space	7
 5881      000000
 5882 0ca0 13       		.byte	19
 5883 0ca1 000000   		.space	3
 5884 0ca4 02000000 		.word	2
 5885 0ca8 2E       		.byte	46
 5886 0ca9 000000   		.space	3
 5887 0cac FFFFFFFF 		.word	-1
 5888 0cb0 4C4F4700 		.ascii	"LOG\000"
 5889 0cb4 00000000 		.space	4
 5890 0cb8 00       		.ascii	"\000"
 5891 0cb9 00000000 		.space	7
 5891      000000
 5892 0cc0 2C       		.byte	44
 5893 0cc1 000000   		.space	3
 5894 0cc4 FFFFFFFF 		.word	-1
 5895 0cc8 2E       		.byte	46
 5896 0cc9 000000   		.space	3
 5897 0ccc FFFFFFFF 		.word	-1
 5898 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5899 0cd4 00000000 		.space	4
 5900 0cd8 00       		.ascii	"\000"
 5901 0cd9 00000000 		.space	7
 5901      000000
 5902 0ce0 2D       		.byte	45
 5903 0ce1 000000   		.space	3
 5904 0ce4 FFFFFFFF 		.word	-1
 5905 0ce8 2E       		.byte	46
 5906 0ce9 000000   		.space	3
 5907 0cec FFFFFFFF 		.word	-1
 5908 0cf0 43505800 		.ascii	"CPX\000"
 5909 0cf4 00000000 		.space	4
 5910 0cf8 00       		.ascii	"\000"
 5911 0cf9 00000000 		.space	7
 5911      000000
 5912 0d00 4D5F416C 		.ascii	"M_Alpha\000"
ARM GAS  /tmp/ccmw9yhH.s 			page 151


 5912      70686100 
 5913 0d08 00000000 		.space	7
 5913      000000
 5914 0d0f 00       		.space	1
 5915 0d10 34       		.byte	52
 5916 0d11 000000   		.space	3
 5917 0d14 78010000 		.word	376
 5918 0d18 34       		.byte	52
 5919 0d19 000000   		.space	3
 5920 0d1c 6D010000 		.word	365
 5921 0d20 582D3EA0 		.ascii	"X->\240\000"
 5921      00
 5922 0d25 000000   		.space	3
 5923 0d28 A054494D 		.ascii	"\240TIME\000"
 5923      4500
 5924 0d2e 0000     		.space	2
 5925 0d30 34       		.byte	52
 5926 0d31 000000   		.space	3
 5927 0d34 77010000 		.word	375
 5928 0d38 34       		.byte	52
 5929 0d39 000000   		.space	3
 5930 0d3c 6C010000 		.word	364
 5931 0d40 A02D3E58 		.ascii	"\240->X\000"
 5931      00
 5932 0d45 000000   		.space	3
 5933 0d48 A0444154 		.ascii	"\240DATE\000"
 5933      4500
 5934 0d4e 0000     		.space	2
 5935 0d50 34       		.byte	52
 5936 0d51 000000   		.space	3
 5937 0d54 00480000 		.word	18432
 5938 0d58 34       		.byte	52
 5939 0d59 000000   		.space	3
 5940 0d5c 6A010000 		.word	362
 5941 0d60 A0495000 		.ascii	"\240IP\000"
 5942 0d64 00000000 		.space	4
 5943 0d68 A0444159 		.ascii	"\240DAY\000"
 5943      00
 5944 0d6d 000000   		.space	3
 5945 0d70 34       		.byte	52
 5946 0d71 000000   		.space	3
 5947 0d74 76010000 		.word	374
 5948 0d78 34       		.byte	52
 5949 0d79 000000   		.space	3
 5950 0d7c 6B010000 		.word	363
 5951 0d80 A04C454E 		.ascii	"\240LENG\000"
 5951      4700
 5952 0d86 0000     		.space	2
 5953 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5953      4800
 5954 0d8e 0000     		.space	2
 5955 0d90 2C       		.byte	44
 5956 0d91 000000   		.space	3
 5957 0d94 FFFFFFFF 		.word	-1
 5958 0d98 2C       		.byte	44
 5959 0d99 000000   		.space	3
 5960 0d9c 01000000 		.word	1
ARM GAS  /tmp/ccmw9yhH.s 			page 152


 5961 0da0 2D2D0D00 		.ascii	"--\015\000"
 5962 0da4 00000000 		.space	4
 5963 0da8 00       		.ascii	"\000"
 5964 0da9 00000000 		.space	7
 5964      000000
 5965 0db0 2D       		.byte	45
 5966 0db1 000000   		.space	3
 5967 0db4 FFFFFFFF 		.word	-1
 5968 0db8 2D       		.byte	45
 5969 0db9 000000   		.space	3
 5970 0dbc 01000000 		.word	1
 5971 0dc0 43505800 		.ascii	"CPX\000"
 5972 0dc4 00000000 		.space	4
 5973 0dc8 00       		.ascii	"\000"
 5974 0dc9 00000000 		.space	7
 5974      000000
 5975 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 5975      4C6F636B 
 5975      00
 5976 0dd9 00000000 		.space	6
 5976      0000
 5977 0ddf 00       		.space	1
 5978 0de0 18       		.byte	24
 5979 0de1 000000   		.space	3
 5980 0de4 02000000 		.word	2
 5981 0de8 04       		.byte	4
 5982 0de9 000000   		.space	3
 5983 0dec 02000000 		.word	2
 5984 0df0 504F4C41 		.ascii	"POLAR\000"
 5984      5200
 5985 0df6 0000     		.space	2
 5986 0df8 0D205000 		.ascii	"\015 P\000"
 5987 0dfc 00000000 		.space	4
 5988 0e00 18       		.byte	24
 5989 0e01 000000   		.space	3
 5990 0e04 01000000 		.word	1
 5991 0e08 04       		.byte	4
 5992 0e09 000000   		.space	3
 5993 0e0c 01000000 		.word	1
 5994 0e10 52454354 		.ascii	"RECT\000"
 5994      00
 5995 0e15 000000   		.space	3
 5996 0e18 0D205200 		.ascii	"\015 R\000"
 5997 0e1c 00000000 		.space	4
 5998 0e20 0E       		.byte	14
 5999 0e21 000000   		.space	3
 6000 0e24 01000000 		.word	1
 6001 0e28 0E       		.byte	14
 6002 0e29 000000   		.space	3
 6003 0e2c 03000000 		.word	3
 6004 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6004      496D00
 6005 0e37 00       		.space	1
 6006 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6006      526500
 6007 0e3f 00       		.space	1
 6008 0e40 0D       		.byte	13
ARM GAS  /tmp/ccmw9yhH.s 			page 153


 6009 0e41 000000   		.space	3
 6010 0e44 02000000 		.word	2
 6011 0e48 00       		.byte	0
 6012 0e49 000000   		.space	3
 6013 0e4c 01000000 		.word	1
 6014 0e50 52651749 		.ascii	"Re\027Im\000"
 6014      6D00
 6015 0e56 0000     		.space	2
 6016 0e58 48595000 		.ascii	"HYP\000"
 6017 0e5c 00000000 		.space	4
 6018 0e60 2C       		.byte	44
 6019 0e61 000000   		.space	3
 6020 0e64 FFFFFFFF 		.word	-1
 6021 0e68 0F       		.byte	15
 6022 0e69 000000   		.space	3
 6023 0e6c 01000000 		.word	1
 6024 0e70 2D2D0D00 		.ascii	"--\015\000"
 6025 0e74 00000000 		.space	4
 6026 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6027 0e7c 00000000 		.space	4
 6028 0e80 2D       		.byte	45
 6029 0e81 000000   		.space	3
 6030 0e84 FFFFFFFF 		.word	-1
 6031 0e88 0C       		.byte	12
 6032 0e89 000000   		.space	3
 6033 0e8c 01000000 		.word	1
 6034 0e90 43505800 		.ascii	"CPX\000"
 6035 0e94 00000000 		.space	4
 6036 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6036      535400
 6037 0e9f 00       		.space	1
 6038 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6038      6561725F 
 6038      4300
 6039 0eaa 00000000 		.space	5
 6039      00
 6040 0eaf 00       		.space	1
 6041 0eb0 2E       		.byte	46
 6042 0eb1 000000   		.space	3
 6043 0eb4 FFFFFFFF 		.word	-1
 6044 0eb8 2E       		.byte	46
 6045 0eb9 000000   		.space	3
 6046 0ebc FFFFFFFF 		.word	-1
 6047 0ec0 00       		.ascii	"\000"
 6048 0ec1 00000000 		.space	7
 6048      000000
 6049 0ec8 00       		.ascii	"\000"
 6050 0ec9 00000000 		.space	7
 6050      000000
 6051 0ed0 2E       		.byte	46
 6052 0ed1 000000   		.space	3
 6053 0ed4 FFFFFFFF 		.word	-1
 6054 0ed8 2E       		.byte	46
 6055 0ed9 000000   		.space	3
 6056 0edc FFFFFFFF 		.word	-1
 6057 0ee0 00       		.ascii	"\000"
 6058 0ee1 00000000 		.space	7
ARM GAS  /tmp/ccmw9yhH.s 			page 154


 6058      000000
 6059 0ee8 00       		.ascii	"\000"
 6060 0ee9 00000000 		.space	7
 6060      000000
 6061 0ef0 10       		.byte	16
 6062 0ef1 000000   		.space	3
 6063 0ef4 03000000 		.word	3
 6064 0ef8 34       		.byte	52
 6065 0ef9 000000   		.space	3
 6066 0efc 74010000 		.word	372
 6067 0f00 434C7800 		.ascii	"CLx\000"
 6068 0f04 00000000 		.space	4
 6069 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6069      00
 6070 0f0d 000000   		.space	3
 6071 0f10 34       		.byte	52
 6072 0f11 000000   		.space	3
 6073 0f14 40010000 		.word	320
 6074 0f18 2E       		.byte	46
 6075 0f19 000000   		.space	3
 6076 0f1c FFFFFFFF 		.word	-1
 6077 0f20 434C5374 		.ascii	"CLStk\000"
 6077      6B00
 6078 0f26 0000     		.space	2
 6079 0f28 00       		.ascii	"\000"
 6080 0f29 00000000 		.space	7
 6080      000000
 6081 0f30 2C       		.byte	44
 6082 0f31 000000   		.space	3
 6083 0f34 FFFFFFFF 		.word	-1
 6084 0f38 2E       		.byte	46
 6085 0f39 000000   		.space	3
 6086 0f3c FFFFFFFF 		.word	-1
 6087 0f40 2D2D0D00 		.ascii	"--\015\000"
 6088 0f44 00000000 		.space	4
 6089 0f48 00       		.ascii	"\000"
 6090 0f49 00000000 		.space	7
 6090      000000
 6091 0f50 2D       		.byte	45
 6092 0f51 000000   		.space	3
 6093 0f54 FFFFFFFF 		.word	-1
 6094 0f58 2E       		.byte	46
 6095 0f59 000000   		.space	3
 6096 0f5c FFFFFFFF 		.word	-1
 6097 0f60 43505800 		.ascii	"CPX\000"
 6098 0f64 00000000 		.space	4
 6099 0f68 00       		.ascii	"\000"
 6100 0f69 00000000 		.space	7
 6100      000000
 6101 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6101      61705F43 
 6101      00
 6102 0f79 00000000 		.space	6
 6102      0000
 6103 0f7f 00       		.space	1
 6104 0f80 0D       		.byte	13
 6105 0f81 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 155


 6106 0f84 01000000 		.word	1
 6107 0f88 2E       		.byte	46
 6108 0f89 000000   		.space	3
 6109 0f8c FFFFFFFF 		.word	-1
 6110 0f90 53686F77 		.ascii	"Show\016\000"
 6110      0E00
 6111 0f96 0000     		.space	2
 6112 0f98 00       		.ascii	"\000"
 6113 0f99 00000000 		.space	7
 6113      000000
 6114 0fa0 0D       		.byte	13
 6115 0fa1 000000   		.space	3
 6116 0fa4 02000000 		.word	2
 6117 0fa8 2E       		.byte	46
 6118 0fa9 000000   		.space	3
 6119 0fac FFFFFFFF 		.word	-1
 6120 0fb0 53686F77 		.ascii	"Show\015\000"
 6120      0D00
 6121 0fb6 0000     		.space	2
 6122 0fb8 00       		.ascii	"\000"
 6123 0fb9 00000000 		.space	7
 6123      000000
 6124 0fc0 0D       		.byte	13
 6125 0fc1 000000   		.space	3
 6126 0fc4 03000000 		.word	3
 6127 0fc8 2E       		.byte	46
 6128 0fc9 000000   		.space	3
 6129 0fcc FFFFFFFF 		.word	-1
 6130 0fd0 78173F00 		.ascii	"x\027?\000"
 6131 0fd4 00000000 		.space	4
 6132 0fd8 00       		.ascii	"\000"
 6133 0fd9 00000000 		.space	7
 6133      000000
 6134 0fe0 2E       		.byte	46
 6135 0fe1 000000   		.space	3
 6136 0fe4 FFFFFFFF 		.word	-1
 6137 0fe8 2E       		.byte	46
 6138 0fe9 000000   		.space	3
 6139 0fec FFFFFFFF 		.word	-1
 6140 0ff0 00       		.ascii	"\000"
 6141 0ff1 00000000 		.space	7
 6141      000000
 6142 0ff8 00       		.ascii	"\000"
 6143 0ff9 00000000 		.space	7
 6143      000000
 6144 1000 2C       		.byte	44
 6145 1001 000000   		.space	3
 6146 1004 FFFFFFFF 		.word	-1
 6147 1008 2E       		.byte	46
 6148 1009 000000   		.space	3
 6149 100c FFFFFFFF 		.word	-1
 6150 1010 2D2D0D00 		.ascii	"--\015\000"
 6151 1014 00000000 		.space	4
 6152 1018 00       		.ascii	"\000"
 6153 1019 00000000 		.space	7
 6153      000000
 6154 1020 2D       		.byte	45
ARM GAS  /tmp/ccmw9yhH.s 			page 156


 6155 1021 000000   		.space	3
 6156 1024 FFFFFFFF 		.word	-1
 6157 1028 2E       		.byte	46
 6158 1029 000000   		.space	3
 6159 102c FFFFFFFF 		.word	-1
 6160 1030 43505800 		.ascii	"CPX\000"
 6161 1034 00000000 		.space	4
 6162 1038 00       		.ascii	"\000"
 6163 1039 00000000 		.space	7
 6163      000000
 6164 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6164      726F775F 
 6164      4300
 6165 104a 00000000 		.space	5
 6165      00
 6166 104f 00       		.space	1
 6167 1050 2E       		.byte	46
 6168 1051 000000   		.space	3
 6169 1054 FFFFFFFF 		.word	-1
 6170 1058 06       		.byte	6
 6171 1059 000000   		.space	3
 6172 105c 02000000 		.word	2
 6173 1060 00       		.ascii	"\000"
 6174 1061 00000000 		.space	7
 6174      000000
 6175 1068 44454700 		.ascii	"DEG\000"
 6176 106c 00000000 		.space	4
 6177 1070 2E       		.byte	46
 6178 1071 000000   		.space	3
 6179 1074 FFFFFFFF 		.word	-1
 6180 1078 07       		.byte	7
 6181 1079 000000   		.space	3
 6182 107c 02000000 		.word	2
 6183 1080 00       		.ascii	"\000"
 6184 1081 00000000 		.space	7
 6184      000000
 6185 1088 52414400 		.ascii	"RAD\000"
 6186 108c 00000000 		.space	4
 6187 1090 2E       		.byte	46
 6188 1091 000000   		.space	3
 6189 1094 FFFFFFFF 		.word	-1
 6190 1098 08       		.byte	8
 6191 1099 000000   		.space	3
 6192 109c 02000000 		.word	2
 6193 10a0 00       		.ascii	"\000"
 6194 10a1 00000000 		.space	7
 6194      000000
 6195 10a8 47726164 		.ascii	"Grad\000"
 6195      00
 6196 10ad 000000   		.space	3
 6197 10b0 2E       		.byte	46
 6198 10b1 000000   		.space	3
 6199 10b4 FFFFFFFF 		.word	-1
 6200 10b8 06       		.byte	6
 6201 10b9 000000   		.space	3
 6202 10bc 01000000 		.word	1
 6203 10c0 00       		.ascii	"\000"
ARM GAS  /tmp/ccmw9yhH.s 			page 157


 6204 10c1 00000000 		.space	7
 6204      000000
 6205 10c8 0D484D53 		.ascii	"\015HMS\000"
 6205      00
 6206 10cd 000000   		.space	3
 6207 10d0 2C       		.byte	44
 6208 10d1 000000   		.space	3
 6209 10d4 FFFFFFFF 		.word	-1
 6210 10d8 07       		.byte	7
 6211 10d9 000000   		.space	3
 6212 10dc 01000000 		.word	1
 6213 10e0 2D2D0D00 		.ascii	"--\015\000"
 6214 10e4 00000000 		.space	4
 6215 10e8 484D530D 		.ascii	"HMS\015\000"
 6215      00
 6216 10ed 000000   		.space	3
 6217 10f0 2D       		.byte	45
 6218 10f1 000000   		.space	3
 6219 10f4 FFFFFFFF 		.word	-1
 6220 10f8 2E       		.byte	46
 6221 10f9 000000   		.space	3
 6222 10fc FFFFFFFF 		.word	-1
 6223 1100 43505800 		.ascii	"CPX\000"
 6224 1104 00000000 		.space	4
 6225 1108 00       		.ascii	"\000"
 6226 1109 00000000 		.space	7
 6226      000000
 6227 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6227      6F625F43 
 6227      00
 6228 1119 00000000 		.space	6
 6228      0000
 6229 111f 00       		.space	1
 6230 1120 18       		.byte	24
 6231 1121 000000   		.space	3
 6232 1124 03000000 		.word	3
 6233 1128 34       		.byte	52
 6234 1129 000000   		.space	3
 6235 112c 31050000 		.word	1329
 6236 1130 14062100 		.ascii	"\024\006!\000"
 6237 1134 00000000 		.space	4
 6238 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6238      068200
 6239 113f 00       		.space	1
 6240 1140 34       		.byte	52
 6241 1141 000000   		.space	3
 6242 1144 12060000 		.word	1554
 6243 1148 2E       		.byte	46
 6244 1149 000000   		.space	3
 6245 114c FFFFFFFF 		.word	-1
 6246 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6246      2C7800
 6247 1157 00       		.space	1
 6248 1158 00       		.ascii	"\000"
 6249 1159 00000000 		.space	7
 6249      000000
 6250 1160 34       		.byte	52
ARM GAS  /tmp/ccmw9yhH.s 			page 158


 6251 1161 000000   		.space	3
 6252 1164 13060000 		.word	1555
 6253 1168 2E       		.byte	46
 6254 1169 000000   		.space	3
 6255 116c FFFFFFFF 		.word	-1
 6256 1170 14065079 		.ascii	"\024\006Py,x\000"
 6256      2C7800
 6257 1177 00       		.space	1
 6258 1178 00       		.ascii	"\000"
 6259 1179 00000000 		.space	7
 6259      000000
 6260 1180 2E       		.byte	46
 6261 1181 000000   		.space	3
 6262 1184 FFFFFFFF 		.word	-1
 6263 1188 2E       		.byte	46
 6264 1189 000000   		.space	3
 6265 118c FFFFFFFF 		.word	-1
 6266 1190 00       		.ascii	"\000"
 6267 1191 00000000 		.space	7
 6267      000000
 6268 1198 00       		.ascii	"\000"
 6269 1199 00000000 		.space	7
 6269      000000
 6270 11a0 2C       		.byte	44
 6271 11a1 000000   		.space	3
 6272 11a4 FFFFFFFF 		.word	-1
 6273 11a8 2E       		.byte	46
 6274 11a9 000000   		.space	3
 6275 11ac FFFFFFFF 		.word	-1
 6276 11b0 2D2D0D00 		.ascii	"--\015\000"
 6277 11b4 00000000 		.space	4
 6278 11b8 00       		.ascii	"\000"
 6279 11b9 00000000 		.space	7
 6279      000000
 6280 11c0 2D       		.byte	45
 6281 11c1 000000   		.space	3
 6282 11c4 FFFFFFFF 		.word	-1
 6283 11c8 2E       		.byte	46
 6284 11c9 000000   		.space	3
 6285 11cc FFFFFFFF 		.word	-1
 6286 11d0 43505800 		.ascii	"CPX\000"
 6287 11d4 00000000 		.space	4
 6288 11d8 00       		.ascii	"\000"
 6289 11d9 00000000 		.space	7
 6289      000000
 6290 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6290      616E6B32 
 6290      5F4300
 6291 11eb 00000000 		.space	4
 6292 11ef 00       		.space	1
 6293 11f0 00       		.byte	0
 6294 11f1 000000   		.space	3
 6295 11f4 01000000 		.word	1
 6296 11f8 2E       		.byte	46
 6297 11f9 000000   		.space	3
 6298 11fc FFFFFFFF 		.word	-1
 6299 1200 48595000 		.ascii	"HYP\000"
ARM GAS  /tmp/ccmw9yhH.s 			page 159


 6300 1204 00000000 		.space	4
 6301 1208 00       		.ascii	"\000"
 6302 1209 00000000 		.space	7
 6302      000000
 6303 1210 16       		.byte	22
 6304 1211 000000   		.space	3
 6305 1214 01000000 		.word	1
 6306 1218 2E       		.byte	46
 6307 1219 000000   		.space	3
 6308 121c FFFFFFFF 		.word	-1
 6309 1220 312F5800 		.ascii	"1/X\000"
 6310 1224 00000000 		.space	4
 6311 1228 00       		.ascii	"\000"
 6312 1229 00000000 		.space	7
 6312      000000
 6313 1230 1C       		.byte	28
 6314 1231 000000   		.space	3
 6315 1234 01000000 		.word	1
 6316 1238 2E       		.byte	46
 6317 1239 000000   		.space	3
 6318 123c FFFFFFFF 		.word	-1
 6319 1240 035800   		.ascii	"\003X\000"
 6320 1243 00000000 		.space	5
 6320      00
 6321 1248 00       		.ascii	"\000"
 6322 1249 00000000 		.space	7
 6322      000000
 6323 1250 13       		.byte	19
 6324 1251 000000   		.space	3
 6325 1254 02000000 		.word	2
 6326 1258 2E       		.byte	46
 6327 1259 000000   		.space	3
 6328 125c FFFFFFFF 		.word	-1
 6329 1260 4C4F4700 		.ascii	"LOG\000"
 6330 1264 00000000 		.space	4
 6331 1268 00       		.ascii	"\000"
 6332 1269 00000000 		.space	7
 6332      000000
 6333 1270 2C       		.byte	44
 6334 1271 000000   		.space	3
 6335 1274 FFFFFFFF 		.word	-1
 6336 1278 2E       		.byte	46
 6337 1279 000000   		.space	3
 6338 127c FFFFFFFF 		.word	-1
 6339 1280 2D2D0D00 		.ascii	"--\015\000"
 6340 1284 00000000 		.space	4
 6341 1288 00       		.ascii	"\000"
 6342 1289 00000000 		.space	7
 6342      000000
 6343 1290 2D       		.byte	45
 6344 1291 000000   		.space	3
 6345 1294 FFFFFFFF 		.word	-1
 6346 1298 2E       		.byte	46
 6347 1299 000000   		.space	3
 6348 129c FFFFFFFF 		.word	-1
 6349 12a0 43505800 		.ascii	"CPX\000"
 6350 12a4 00000000 		.space	4
ARM GAS  /tmp/ccmw9yhH.s 			page 160


 6351 12a8 00       		.ascii	"\000"
 6352 12a9 00000000 		.space	7
 6352      000000
 6353 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6353      73635F43 
 6353      00
 6354 12b9 00000000 		.space	6
 6354      0000
 6355 12bf 00       		.space	1
 6356 12c0 25       		.byte	37
 6357 12c1 000000   		.space	3
 6358 12c4 01000000 		.word	1
 6359 12c8 14       		.byte	20
 6360 12c9 000000   		.space	3
 6361 12cc 01000000 		.word	1
 6362 12d0 7C7A7C00 		.ascii	"|z|\000"
 6363 12d4 00000000 		.space	4
 6364 12d8 14329C00 		.ascii	"\0242\234\000"
 6365 12dc 00000000 		.space	4
 6366 12e0 25       		.byte	37
 6367 12e1 000000   		.space	3
 6368 12e4 02000000 		.word	2
 6369 12e8 14       		.byte	20
 6370 12e9 000000   		.space	3
 6371 12ec 02000000 		.word	2
 6372 12f0 524E4400 		.ascii	"RND\000"
 6373 12f4 00000000 		.space	4
 6374 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6374      BA00
 6375 12fe 0000     		.space	2
 6376 1300 26       		.byte	38
 6377 1301 000000   		.space	3
 6378 1304 01000000 		.word	1
 6379 1308 15       		.byte	21
 6380 1309 000000   		.space	3
 6381 130c 02000000 		.word	2
 6382 1310 300D5265 		.ascii	"0\015Re\000"
 6382      00
 6383 1315 000000   		.space	3
 6384 1318 144C6F67 		.ascii	"\024Log\213\000"
 6384      8B00
 6385 131e 0000     		.space	2
 6386 1320 26       		.byte	38
 6387 1321 000000   		.space	3
 6388 1324 02000000 		.word	2
 6389 1328 16       		.byte	22
 6390 1329 000000   		.space	3
 6391 132c 02000000 		.word	2
 6392 1330 300D496D 		.ascii	"0\015Im\000"
 6392      00
 6393 1335 000000   		.space	3
 6394 1338 147C7C65 		.ascii	"\024||el\000"
 6394      6C00
 6395 133e 0000     		.space	2
 6396 1340 2C       		.byte	44
 6397 1341 000000   		.space	3
 6398 1344 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccmw9yhH.s 			page 161


 6399 1348 1C       		.byte	28
 6400 1349 000000   		.space	3
 6401 134c 03000000 		.word	3
 6402 1350 2D2D0D00 		.ascii	"--\015\000"
 6403 1354 00000000 		.space	4
 6404 1358 142E1C00 		.ascii	"\024.\034\000"
 6405 135c 00000000 		.space	4
 6406 1360 2D       		.byte	45
 6407 1361 000000   		.space	3
 6408 1364 FFFFFFFF 		.word	-1
 6409 1368 16       		.byte	22
 6410 1369 000000   		.space	3
 6411 136c 03000000 		.word	3
 6412 1370 43505800 		.ascii	"CPX\000"
 6413 1374 00000000 		.space	4
 6414 1378 142E2F00 		.ascii	"\024./\000"
 6415 137c 00000000 		.space	4
 6416 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6416      65726D65 
 6416      6E7500
 6417 138b 00000000 		.space	4
 6418 138f 00       		.space	1
 6419 1390 34       		.byte	52
 6420 1391 000000   		.space	3
 6421 1394 00FB0000 		.word	64256
 6422 1398 2E       		.byte	46
 6423 1399 000000   		.space	3
 6424 139c FFFFFFFF 		.word	-1
 6425 13a0 554D454E 		.ascii	"UMEN\000"
 6425      00
 6426 13a5 000000   		.space	3
 6427 13a8 00       		.ascii	"\000"
 6428 13a9 00000000 		.space	7
 6428      000000
 6429 13b0 34       		.byte	52
 6430 13b1 000000   		.space	3
 6431 13b4 55FB4D31 		.word	827194197
 6432 13b8 34       		.byte	52
 6433 13b9 000000   		.space	3
 6434 13bc 55FB4D34 		.word	877525845
 6435 13c0 554D3100 		.ascii	"UM1\000"
 6436 13c4 00000000 		.space	4
 6437 13c8 554D3400 		.ascii	"UM4\000"
 6438 13cc 00000000 		.space	4
 6439 13d0 34       		.byte	52
 6440 13d1 000000   		.space	3
 6441 13d4 55FB4D32 		.word	843971413
 6442 13d8 34       		.byte	52
 6443 13d9 000000   		.space	3
 6444 13dc 55FB4D35 		.word	894303061
 6445 13e0 554D3200 		.ascii	"UM2\000"
 6446 13e4 00000000 		.space	4
 6447 13e8 554D3500 		.ascii	"UM5\000"
 6448 13ec 00000000 		.space	4
 6449 13f0 34       		.byte	52
 6450 13f1 000000   		.space	3
 6451 13f4 55FB4D33 		.word	860748629
ARM GAS  /tmp/ccmw9yhH.s 			page 162


 6452 13f8 34       		.byte	52
 6453 13f9 000000   		.space	3
 6454 13fc 55FB4D36 		.word	911080277
 6455 1400 554D3300 		.ascii	"UM3\000"
 6456 1404 00000000 		.space	4
 6457 1408 554D3600 		.ascii	"UM6\000"
 6458 140c 00000000 		.space	4
 6459 1410 2C       		.byte	44
 6460 1411 000000   		.space	3
 6461 1414 FFFFFFFF 		.word	-1
 6462 1418 1C       		.byte	28
 6463 1419 000000   		.space	3
 6464 141c 03000000 		.word	3
 6465 1420 2D2D0D00 		.ascii	"--\015\000"
 6466 1424 00000000 		.space	4
 6467 1428 00       		.ascii	"\000"
 6468 1429 00000000 		.space	7
 6468      000000
 6469 1430 2D       		.byte	45
 6470 1431 000000   		.space	3
 6471 1434 FFFFFFFF 		.word	-1
 6472 1438 16       		.byte	22
 6473 1439 000000   		.space	3
 6474 143c 03000000 		.word	3
 6475 1440 43505800 		.ascii	"CPX\000"
 6476 1444 00000000 		.space	4
 6477 1448 00       		.ascii	"\000"
 6478 1449 00000000 		.space	7
 6478      000000
 6479 1450 4D5F5072 		.ascii	"M_Print\000"
 6479      696E7400 
 6480 1458 00000000 		.space	7
 6480      000000
 6481 145f 00       		.space	1
 6482 1460 34       		.byte	52
 6483 1461 000000   		.space	3
 6484 1464 D9010000 		.word	473
 6485 1468 34       		.byte	52
 6486 1469 000000   		.space	3
 6487 146c DA010000 		.word	474
 6488 1470 92064F6E 		.ascii	"\222\006On\000"
 6488      00
 6489 1475 000000   		.space	3
 6490 1478 92064F66 		.ascii	"\222\006Off\000"
 6490      6600
 6491 147e 0000     		.space	2
 6492 1480 34       		.byte	52
 6493 1481 000000   		.space	3
 6494 1484 00AF0000 		.word	44800
 6495 1488 34       		.byte	52
 6496 1489 000000   		.space	3
 6497 148c 00BE0000 		.word	48640
 6498 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6498      646500
 6499 1497 00       		.space	1
 6500 1498 92064462 		.ascii	"\222\006DbSp\000"
 6500      537000
ARM GAS  /tmp/ccmw9yhH.s 			page 163


 6501 149f 00       		.space	1
 6502 14a0 34       		.byte	52
 6503 14a1 000000   		.space	3
 6504 14a4 BC010000 		.word	444
 6505 14a8 34       		.byte	52
 6506 14a9 000000   		.space	3
 6507 14ac BD010000 		.word	445
 6508 14b0 92065072 		.ascii	"\222\006Prog\000"
 6508      6F6700
 6509 14b7 00       		.space	1
 6510 14b8 92065265 		.ascii	"\222\006Regs\000"
 6510      677300
 6511 14bf 00       		.space	1
 6512 14c0 34       		.byte	52
 6513 14c1 000000   		.space	3
 6514 14c4 BE010000 		.word	446
 6515 14c8 34       		.byte	52
 6516 14c9 000000   		.space	3
 6517 14cc BF010000 		.word	447
 6518 14d0 92065374 		.ascii	"\222\006Stk\000"
 6518      6B00
 6519 14d6 0000     		.space	2
 6520 14d8 92069100 		.ascii	"\222\006\221\000"
 6521 14dc 00000000 		.space	4
 6522 14e0 2C       		.byte	44
 6523 14e1 000000   		.space	3
 6524 14e4 FFFFFFFF 		.word	-1
 6525 14e8 34       		.byte	52
 6526 14e9 000000   		.space	3
 6527 14ec C0010000 		.word	448
 6528 14f0 2D2D0D00 		.ascii	"--\015\000"
 6529 14f4 00000000 		.space	4
 6530 14f8 9206A000 		.ascii	"\222\006\240\000"
 6531 14fc 00000000 		.space	4
 6532 1500 2D       		.byte	45
 6533 1501 000000   		.space	3
 6534 1504 FFFFFFFF 		.word	-1
 6535 1508 34       		.byte	52
 6536 1509 000000   		.space	3
 6537 150c C3010000 		.word	451
 6538 1510 43505800 		.ascii	"CPX\000"
 6539 1514 00000000 		.space	4
 6540 1518 92064144 		.ascii	"\222\006ADV\000"
 6540      5600
 6541 151e 0000     		.space	2
 6542              		.section	.rodata.mapping_alpha.11153,"a"
 6543              		.align	2
 6544              		.set	.LANCHOR16,. + 0
 6547              	mapping_alpha.11153:
 6548 0000 63       		.byte	99
 6549 0001 000000   		.space	3
 6550 0004 FFFFFFFF 		.word	-1
 6551 0008 00       		.byte	0
 6552 0009 000000   		.space	3
 6553 000c FFFFFFFF 		.word	-1
 6554 0010 01       		.byte	1
 6555 0011 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 164


 6556 0014 FFFFFFFF 		.word	-1
 6557 0018 02       		.byte	2
 6558 0019 000000   		.space	3
 6559 001c FFFFFFFF 		.word	-1
 6560 0020 03       		.byte	3
 6561 0021 000000   		.space	3
 6562 0024 FFFFFFFF 		.word	-1
 6563 0028 04       		.byte	4
 6564 0029 000000   		.space	3
 6565 002c FFFFFFFF 		.word	-1
 6566 0030 05       		.byte	5
 6567 0031 000000   		.space	3
 6568 0034 FFFFFFFF 		.word	-1
 6569 0038 06       		.byte	6
 6570 0039 000000   		.space	3
 6571 003c FFFFFFFF 		.word	-1
 6572 0040 07       		.byte	7
 6573 0041 000000   		.space	3
 6574 0044 FFFFFFFF 		.word	-1
 6575 0048 08       		.byte	8
 6576 0049 000000   		.space	3
 6577 004c FFFFFFFF 		.word	-1
 6578 0050 09       		.byte	9
 6579 0051 000000   		.space	3
 6580 0054 FFFFFFFF 		.word	-1
 6581 0058 0A       		.byte	10
 6582 0059 000000   		.space	3
 6583 005c FFFFFFFF 		.word	-1
 6584 0060 0B       		.byte	11
 6585 0061 000000   		.space	3
 6586 0064 FFFFFFFF 		.word	-1
 6587 0068 0C       		.byte	12
 6588 0069 000000   		.space	3
 6589 006c FFFFFFFF 		.word	-1
 6590 0070 0D       		.byte	13
 6591 0071 000000   		.space	3
 6592 0074 FFFFFFFF 		.word	-1
 6593 0078 0E       		.byte	14
 6594 0079 000000   		.space	3
 6595 007c FFFFFFFF 		.word	-1
 6596 0080 0F       		.byte	15
 6597 0081 000000   		.space	3
 6598 0084 FFFFFFFF 		.word	-1
 6599 0088 10       		.byte	16
 6600 0089 000000   		.space	3
 6601 008c FFFFFFFF 		.word	-1
 6602 0090 12       		.byte	18
 6603 0091 000000   		.space	3
 6604 0094 FFFFFFFF 		.word	-1
 6605 0098 13       		.byte	19
 6606 0099 000000   		.space	3
 6607 009c FFFFFFFF 		.word	-1
 6608 00a0 14       		.byte	20
 6609 00a1 000000   		.space	3
 6610 00a4 FFFFFFFF 		.word	-1
 6611 00a8 15       		.byte	21
 6612 00a9 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 165


 6613 00ac FFFFFFFF 		.word	-1
 6614 00b0 16       		.byte	22
 6615 00b1 000000   		.space	3
 6616 00b4 FFFFFFFF 		.word	-1
 6617 00b8 18       		.byte	24
 6618 00b9 000000   		.space	3
 6619 00bc FFFFFFFF 		.word	-1
 6620 00c0 19       		.byte	25
 6621 00c1 000000   		.space	3
 6622 00c4 FFFFFFFF 		.word	-1
 6623 00c8 1A       		.byte	26
 6624 00c9 000000   		.space	3
 6625 00cc FFFFFFFF 		.word	-1
 6626 00d0 1B       		.byte	27
 6627 00d1 000000   		.space	3
 6628 00d4 FFFFFFFF 		.word	-1
 6629 00d8 1C       		.byte	28
 6630 00d9 000000   		.space	3
 6631 00dc FFFFFFFF 		.word	-1
 6632 00e0 1E       		.byte	30
 6633 00e1 000000   		.space	3
 6634 00e4 FFFFFFFF 		.word	-1
 6635 00e8 1F       		.byte	31
 6636 00e9 000000   		.space	3
 6637 00ec FFFFFFFF 		.word	-1
 6638 00f0 20       		.byte	32
 6639 00f1 000000   		.space	3
 6640 00f4 FFFFFFFF 		.word	-1
 6641 00f8 21       		.byte	33
 6642 00f9 000000   		.space	3
 6643 00fc FFFFFFFF 		.word	-1
 6644 0100 22       		.byte	34
 6645 0101 000000   		.space	3
 6646 0104 FFFFFFFF 		.word	-1
 6647 0108 24       		.byte	36
 6648 0109 000000   		.space	3
 6649 010c FFFFFFFF 		.word	-1
 6650 0110 25       		.byte	37
 6651 0111 000000   		.space	3
 6652 0114 FFFFFFFF 		.word	-1
 6653 0118 26       		.byte	38
 6654 0119 000000   		.space	3
 6655 011c FFFFFFFF 		.word	-1
 6656 0120 27       		.byte	39
 6657 0121 000000   		.space	3
 6658 0124 FFFFFFFF 		.word	-1
 6659 0128 28       		.byte	40
 6660 0129 000000   		.space	3
 6661 012c FFFFFFFF 		.word	-1
 6662 0130 2E       		.byte	46
 6663 0131 000000   		.space	3
 6664 0134 FFFFFFFF 		.word	-1
 6665 0138 2E       		.byte	46
 6666 0139 000000   		.space	3
 6667 013c FFFFFFFF 		.word	-1
 6668 0140 2E       		.byte	46
 6669 0141 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 166


 6670 0144 FFFFFFFF 		.word	-1
 6671 0148 2E       		.byte	46
 6672 0149 000000   		.space	3
 6673 014c FFFFFFFF 		.word	-1
 6674 0150 2C       		.byte	44
 6675 0151 000000   		.space	3
 6676 0154 FFFFFFFF 		.word	-1
 6677 0158 2D       		.byte	45
 6678 0159 000000   		.space	3
 6679 015c FFFFFFFF 		.word	-1
 6680 0160 2E       		.byte	46
 6681 0161 000000   		.space	3
 6682 0164 FFFFFFFF 		.word	-1
 6683 0168 2E       		.byte	46
 6684 0169 000000   		.space	3
 6685 016c FFFFFFFF 		.word	-1
 6686 0170 2E       		.byte	46
 6687 0171 000000   		.space	3
 6688 0174 FFFFFFFF 		.word	-1
 6689              		.section	.rodata.mapping_fshift.11151,"a"
 6690              		.align	2
 6691              		.set	.LANCHOR14,. + 0
 6694              	mapping_fshift.11151:
 6695 0000 63       		.byte	99
 6696 0001 000000   		.space	3
 6697 0004 FFFFFFFF 		.word	-1
 6698 0008 22       		.byte	34
 6699 0009 000000   		.space	3
 6700 000c 03000000 		.word	3
 6701 0010 15       		.byte	21
 6702 0011 000000   		.space	3
 6703 0014 01000000 		.word	1
 6704 0018 1C       		.byte	28
 6705 0019 000000   		.space	3
 6706 001c 02000000 		.word	2
 6707 0020 13       		.byte	19
 6708 0021 000000   		.space	3
 6709 0024 01000000 		.word	1
 6710 0028 12       		.byte	18
 6711 0029 000000   		.space	3
 6712 002c 01000000 		.word	1
 6713 0030 12       		.byte	18
 6714 0031 000000   		.space	3
 6715 0034 03000000 		.word	3
 6716 0038 31       		.byte	49
 6717 0039 000000   		.space	3
 6718 003c 0F000000 		.word	15
 6719 0040 22       		.byte	34
 6720 0041 000000   		.space	3
 6721 0044 01000000 		.word	1
 6722 0048 0F       		.byte	15
 6723 0049 000000   		.space	3
 6724 004c 03000000 		.word	3
 6725 0050 01       		.byte	1
 6726 0051 000000   		.space	3
 6727 0054 02000000 		.word	2
 6728 0058 02       		.byte	2
ARM GAS  /tmp/ccmw9yhH.s 			page 167


 6729 0059 000000   		.space	3
 6730 005c 02000000 		.word	2
 6731 0060 03       		.byte	3
 6732 0061 000000   		.space	3
 6733 0064 02000000 		.word	2
 6734 0068 0C       		.byte	12
 6735 0069 000000   		.space	3
 6736 006c 01000000 		.word	1
 6737 0070 34       		.byte	52
 6738 0071 000000   		.space	3
 6739 0074 6C2A0000 		.word	10860
 6740 0078 2F       		.byte	47
 6741 0079 000000   		.space	3
 6742 007c 04000000 		.word	4
 6743 0080 2F       		.byte	47
 6744 0081 000000   		.space	3
 6745 0084 02000000 		.word	2
 6746 0088 2F       		.byte	47
 6747 0089 000000   		.space	3
 6748 008c 01000000 		.word	1
 6749 0090 18       		.byte	24
 6750 0091 000000   		.space	3
 6751 0094 00000000 		.word	0
 6752 0098 20       		.byte	32
 6753 0099 000000   		.space	3
 6754 009c 01000000 		.word	1
 6755 00a0 2F       		.byte	47
 6756 00a1 000000   		.space	3
 6757 00a4 0E000000 		.word	14
 6758 00a8 1C       		.byte	28
 6759 00a9 000000   		.space	3
 6760 00ac 03000000 		.word	3
 6761 00b0 2F       		.byte	47
 6762 00b1 000000   		.space	3
 6763 00b4 0C000000 		.word	12
 6764 00b8 1E       		.byte	30
 6765 00b9 000000   		.space	3
 6766 00bc 00000000 		.word	0
 6767 00c0 2F       		.byte	47
 6768 00c1 000000   		.space	3
 6769 00c4 03000000 		.word	3
 6770 00c8 04       		.byte	4
 6771 00c9 000000   		.space	3
 6772 00cc 03000000 		.word	3
 6773 00d0 2F       		.byte	47
 6774 00d1 000000   		.space	3
 6775 00d4 0A000000 		.word	10
 6776 00d8 2F       		.byte	47
 6777 00d9 000000   		.space	3
 6778 00dc 0B000000 		.word	11
 6779 00e0 2A       		.byte	42
 6780 00e1 000000   		.space	3
 6781 00e4 00000000 		.word	0
 6782 00e8 31       		.byte	49
 6783 00e9 000000   		.space	3
 6784 00ec 0D000000 		.word	13
 6785 00f0 2F       		.byte	47
ARM GAS  /tmp/ccmw9yhH.s 			page 168


 6786 00f1 000000   		.space	3
 6787 00f4 63000000 		.word	99
 6788 00f8 20       		.byte	32
 6789 00f9 000000   		.space	3
 6790 00fc 03000000 		.word	3
 6791 0100 2F       		.byte	47
 6792 0101 000000   		.space	3
 6793 0104 19000000 		.word	25
 6794 0108 24       		.byte	36
 6795 0109 000000   		.space	3
 6796 010c 03000000 		.word	3
 6797 0110 2F       		.byte	47
 6798 0111 000000   		.space	3
 6799 0114 08000000 		.word	8
 6800 0118 0D       		.byte	13
 6801 0119 000000   		.space	3
 6802 011c 01000000 		.word	1
 6803 0120 27       		.byte	39
 6804 0121 000000   		.space	3
 6805 0124 03000000 		.word	3
 6806 0128 06       		.byte	6
 6807 0129 000000   		.space	3
 6808 012c 03000000 		.word	3
 6809 0130 2E       		.byte	46
 6810 0131 000000   		.space	3
 6811 0134 00000000 		.word	0
 6812 0138 2E       		.byte	46
 6813 0139 000000   		.space	3
 6814 013c 00000000 		.word	0
 6815 0140 2E       		.byte	46
 6816 0141 000000   		.space	3
 6817 0144 00000000 		.word	0
 6818 0148 2E       		.byte	46
 6819 0149 000000   		.space	3
 6820 014c 00000000 		.word	0
 6821 0150 2E       		.byte	46
 6822 0151 000000   		.space	3
 6823 0154 00000000 		.word	0
 6824 0158 2E       		.byte	46
 6825 0159 000000   		.space	3
 6826 015c 00000000 		.word	0
 6827 0160 2E       		.byte	46
 6828 0161 000000   		.space	3
 6829 0164 00000000 		.word	0
 6830 0168 2F       		.byte	47
 6831 0169 000000   		.space	3
 6832 016c FFFFFFFF 		.word	-1
 6833 0170 2F       		.byte	47
 6834 0171 000000   		.space	3
 6835 0174 05000000 		.word	5
 6836              		.section	.rodata.mapping_gshift.11152,"a"
 6837              		.align	2
 6838              		.set	.LANCHOR17,. + 0
 6841              	mapping_gshift.11152:
 6842 0000 63       		.byte	99
 6843 0001 000000   		.space	3
 6844 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccmw9yhH.s 			page 169


 6845 0008 28       		.byte	40
 6846 0009 000000   		.space	3
 6847 000c 03000000 		.word	3
 6848 0010 16       		.byte	22
 6849 0011 000000   		.space	3
 6850 0014 01000000 		.word	1
 6851 0018 1C       		.byte	28
 6852 0019 000000   		.space	3
 6853 001c 01000000 		.word	1
 6854 0020 13       		.byte	19
 6855 0021 000000   		.space	3
 6856 0024 02000000 		.word	2
 6857 0028 2E       		.byte	46
 6858 0029 000000   		.space	3
 6859 002c 00000000 		.word	0
 6860 0030 2E       		.byte	46
 6861 0031 000000   		.space	3
 6862 0034 00000000 		.word	0
 6863 0038 2E       		.byte	46
 6864 0039 000000   		.space	3
 6865 003c 00000000 		.word	0
 6866 0040 07       		.byte	7
 6867 0041 000000   		.space	3
 6868 0044 03000000 		.word	3
 6869 0048 08       		.byte	8
 6870 0049 000000   		.space	3
 6871 004c 03000000 		.word	3
 6872 0050 2F       		.byte	47
 6873 0051 000000   		.space	3
 6874 0054 04000000 		.word	4
 6875 0058 2F       		.byte	47
 6876 0059 000000   		.space	3
 6877 005c 04000000 		.word	4
 6878 0060 2F       		.byte	47
 6879 0061 000000   		.space	3
 6880 0064 04000000 		.word	4
 6881 0068 0C       		.byte	12
 6882 0069 000000   		.space	3
 6883 006c 02000000 		.word	2
 6884 0070 2F       		.byte	47
 6885 0071 000000   		.space	3
 6886 0074 06000000 		.word	6
 6887 0078 05       		.byte	5
 6888 0079 000000   		.space	3
 6889 007c 03000000 		.word	3
 6890 0080 2E       		.byte	46
 6891 0081 000000   		.space	3
 6892 0084 00000000 		.word	0
 6893 0088 2E       		.byte	46
 6894 0089 000000   		.space	3
 6895 008c 00000000 		.word	0
 6896 0090 2E       		.byte	46
 6897 0091 000000   		.space	3
 6898 0094 00000000 		.word	0
 6899 0098 2E       		.byte	46
 6900 0099 000000   		.space	3
 6901 009c 00000000 		.word	0
ARM GAS  /tmp/ccmw9yhH.s 			page 170


 6902 00a0 2E       		.byte	46
 6903 00a1 000000   		.space	3
 6904 00a4 00000000 		.word	0
 6905 00a8 1B       		.byte	27
 6906 00a9 000000   		.space	3
 6907 00ac 03000000 		.word	3
 6908 00b0 1A       		.byte	26
 6909 00b1 000000   		.space	3
 6910 00b4 03000000 		.word	3
 6911 00b8 2E       		.byte	46
 6912 00b9 000000   		.space	3
 6913 00bc 00000000 		.word	0
 6914 00c0 2E       		.byte	46
 6915 00c1 000000   		.space	3
 6916 00c4 00000000 		.word	0
 6917 00c8 0C       		.byte	12
 6918 00c9 000000   		.space	3
 6919 00cc 03000000 		.word	3
 6920 00d0 1F       		.byte	31
 6921 00d1 000000   		.space	3
 6922 00d4 03000000 		.word	3
 6923 00d8 19       		.byte	25
 6924 00d9 000000   		.space	3
 6925 00dc 03000000 		.word	3
 6926 00e0 2A       		.byte	42
 6927 00e1 000000   		.space	3
 6928 00e4 FFFFFFFF 		.word	-1
 6929 00e8 2E       		.byte	46
 6930 00e9 000000   		.space	3
 6931 00ec 00000000 		.word	0
 6932 00f0 2F       		.byte	47
 6933 00f1 000000   		.space	3
 6934 00f4 18000000 		.word	24
 6935 00f8 21       		.byte	33
 6936 00f9 000000   		.space	3
 6937 00fc 03000000 		.word	3
 6938 0100 2E       		.byte	46
 6939 0101 000000   		.space	3
 6940 0104 00000000 		.word	0
 6941 0108 24       		.byte	36
 6942 0109 000000   		.space	3
 6943 010c 02000000 		.word	2
 6944 0110 2F       		.byte	47
 6945 0111 000000   		.space	3
 6946 0114 0D000000 		.word	13
 6947 0118 2E       		.byte	46
 6948 0119 000000   		.space	3
 6949 011c 00000000 		.word	0
 6950 0120 2F       		.byte	47
 6951 0121 000000   		.space	3
 6952 0124 07000000 		.word	7
 6953 0128 1E       		.byte	30
 6954 0129 000000   		.space	3
 6955 012c 03000000 		.word	3
 6956 0130 2E       		.byte	46
 6957 0131 000000   		.space	3
 6958 0134 00000000 		.word	0
ARM GAS  /tmp/ccmw9yhH.s 			page 171


 6959 0138 2E       		.byte	46
 6960 0139 000000   		.space	3
 6961 013c 00000000 		.word	0
 6962 0140 2E       		.byte	46
 6963 0141 000000   		.space	3
 6964 0144 00000000 		.word	0
 6965 0148 2E       		.byte	46
 6966 0149 000000   		.space	3
 6967 014c 00000000 		.word	0
 6968 0150 2E       		.byte	46
 6969 0151 000000   		.space	3
 6970 0154 00000000 		.word	0
 6971 0158 2E       		.byte	46
 6972 0159 000000   		.space	3
 6973 015c 00000000 		.word	0
 6974 0160 2E       		.byte	46
 6975 0161 000000   		.space	3
 6976 0164 00000000 		.word	0
 6977 0168 2E       		.byte	46
 6978 0169 000000   		.space	3
 6979 016c 00000000 		.word	0
 6980 0170 2E       		.byte	46
 6981 0171 000000   		.space	3
 6982 0174 00000000 		.word	0
 6983              		.section	.rodata.mapping_none.11150,"a"
 6984              		.align	2
 6985              		.set	.LANCHOR13,. + 0
 6988              	mapping_none.11150:
 6989 0000 63       		.byte	99
 6990 0001 000000   		.space	3
 6991 0004 FFFFFFFF 		.word	-1
 6992 0008 00       		.byte	0
 6993 0009 000000   		.space	3
 6994 000c 00000000 		.word	0
 6995 0010 01       		.byte	1
 6996 0011 000000   		.space	3
 6997 0014 00000000 		.word	0
 6998 0018 03       		.byte	3
 6999 0019 000000   		.space	3
 7000 001c 00000000 		.word	0
 7001 0020 13       		.byte	19
 7002 0021 000000   		.space	3
 7003 0024 02000000 		.word	2
 7004 0028 12       		.byte	18
 7005 0029 000000   		.space	3
 7006 002c 02000000 		.word	2
 7007 0030 12       		.byte	18
 7008 0031 000000   		.space	3
 7009 0034 00000000 		.word	0
 7010 0038 06       		.byte	6
 7011 0039 000000   		.space	3
 7012 003c 00000000 		.word	0
 7013 0040 07       		.byte	7
 7014 0041 000000   		.space	3
 7015 0044 00000000 		.word	0
 7016 0048 08       		.byte	8
 7017 0049 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 172


 7018 004c 00000000 		.word	0
 7019 0050 01       		.byte	1
 7020 0051 000000   		.space	3
 7021 0054 01000000 		.word	1
 7022 0058 02       		.byte	2
 7023 0059 000000   		.space	3
 7024 005c 01000000 		.word	1
 7025 0060 03       		.byte	3
 7026 0061 000000   		.space	3
 7027 0064 01000000 		.word	1
 7028 0068 0C       		.byte	12
 7029 0069 000000   		.space	3
 7030 006c 00000000 		.word	0
 7031 0070 0D       		.byte	13
 7032 0071 000000   		.space	3
 7033 0074 00000000 		.word	0
 7034 0078 0E       		.byte	14
 7035 0079 000000   		.space	3
 7036 007c 00000000 		.word	0
 7037 0080 0F       		.byte	15
 7038 0081 000000   		.space	3
 7039 0084 00000000 		.word	0
 7040 0088 10       		.byte	16
 7041 0089 000000   		.space	3
 7042 008c 00000000 		.word	0
 7043 0090 18       		.byte	24
 7044 0091 000000   		.space	3
 7045 0094 00000000 		.word	0
 7046 0098 13       		.byte	19
 7047 0099 000000   		.space	3
 7048 009c 00000000 		.word	0
 7049 00a0 14       		.byte	20
 7050 00a1 000000   		.space	3
 7051 00a4 00000000 		.word	0
 7052 00a8 15       		.byte	21
 7053 00a9 000000   		.space	3
 7054 00ac 00000000 		.word	0
 7055 00b0 16       		.byte	22
 7056 00b1 000000   		.space	3
 7057 00b4 00000000 		.word	0
 7058 00b8 1E       		.byte	30
 7059 00b9 000000   		.space	3
 7060 00bc 00000000 		.word	0
 7061 00c0 19       		.byte	25
 7062 00c1 000000   		.space	3
 7063 00c4 00000000 		.word	0
 7064 00c8 1A       		.byte	26
 7065 00c9 000000   		.space	3
 7066 00cc 00000000 		.word	0
 7067 00d0 1B       		.byte	27
 7068 00d1 000000   		.space	3
 7069 00d4 00000000 		.word	0
 7070 00d8 1C       		.byte	28
 7071 00d9 000000   		.space	3
 7072 00dc 00000000 		.word	0
 7073 00e0 29       		.byte	41
 7074 00e1 000000   		.space	3
ARM GAS  /tmp/ccmw9yhH.s 			page 173


 7075 00e4 00000000 		.word	0
 7076 00e8 1F       		.byte	31
 7077 00e9 000000   		.space	3
 7078 00ec 00000000 		.word	0
 7079 00f0 20       		.byte	32
 7080 00f1 000000   		.space	3
 7081 00f4 00000000 		.word	0
 7082 00f8 21       		.byte	33
 7083 00f9 000000   		.space	3
 7084 00fc 00000000 		.word	0
 7085 0100 22       		.byte	34
 7086 0101 000000   		.space	3
 7087 0104 00000000 		.word	0
 7088 0108 24       		.byte	36
 7089 0109 000000   		.space	3
 7090 010c 00000000 		.word	0
 7091 0110 25       		.byte	37
 7092 0111 000000   		.space	3
 7093 0114 00000000 		.word	0
 7094 0118 26       		.byte	38
 7095 0119 000000   		.space	3
 7096 011c 00000000 		.word	0
 7097 0120 27       		.byte	39
 7098 0121 000000   		.space	3
 7099 0124 00000000 		.word	0
 7100 0128 28       		.byte	40
 7101 0129 000000   		.space	3
 7102 012c 00000000 		.word	0
 7103 0130 2E       		.byte	46
 7104 0131 000000   		.space	3
 7105 0134 00000000 		.word	0
 7106 0138 2E       		.byte	46
 7107 0139 000000   		.space	3
 7108 013c 00000000 		.word	0
 7109 0140 2E       		.byte	46
 7110 0141 000000   		.space	3
 7111 0144 00000000 		.word	0
 7112 0148 2E       		.byte	46
 7113 0149 000000   		.space	3
 7114 014c 00000000 		.word	0
 7115 0150 2E       		.byte	46
 7116 0151 000000   		.space	3
 7117 0154 00000000 		.word	0
 7118 0158 2E       		.byte	46
 7119 0159 000000   		.space	3
 7120 015c 00000000 		.word	0
 7121 0160 2E       		.byte	46
 7122 0161 000000   		.space	3
 7123 0164 00000000 		.word	0
 7124 0168 2E       		.byte	46
 7125 0169 000000   		.space	3
 7126 016c 00000000 		.word	0
 7127 0170 2E       		.byte	46
 7128 0171 000000   		.space	3
 7129 0174 00000000 		.word	0
 7130              		.section	.rodata.mapping_running.11154,"a"
 7131              		.align	2
ARM GAS  /tmp/ccmw9yhH.s 			page 174


 7132              		.set	.LANCHOR12,. + 0
 7135              	mapping_running.11154:
 7136 0000 63       		.byte	99
 7137 0001 000000   		.space	3
 7138 0004 FFFFFFFF 		.word	-1
 7139 0008 00       		.byte	0
 7140 0009 000000   		.space	3
 7141 000c 00000000 		.word	0
 7142 0010 01       		.byte	1
 7143 0011 000000   		.space	3
 7144 0014 00000000 		.word	0
 7145 0018 02       		.byte	2
 7146 0019 000000   		.space	3
 7147 001c 00000000 		.word	0
 7148 0020 03       		.byte	3
 7149 0021 000000   		.space	3
 7150 0024 00000000 		.word	0
 7151 0028 04       		.byte	4
 7152 0029 000000   		.space	3
 7153 002c 00000000 		.word	0
 7154 0030 12       		.byte	18
 7155 0031 000000   		.space	3
 7156 0034 00000000 		.word	0
 7157 0038 06       		.byte	6
 7158 0039 000000   		.space	3
 7159 003c 00000000 		.word	0
 7160 0040 07       		.byte	7
 7161 0041 000000   		.space	3
 7162 0044 00000000 		.word	0
 7163 0048 08       		.byte	8
 7164 0049 000000   		.space	3
 7165 004c 00000000 		.word	0
 7166 0050 09       		.byte	9
 7167 0051 000000   		.space	3
 7168 0054 00000000 		.word	0
 7169 0058 0A       		.byte	10
 7170 0059 000000   		.space	3
 7171 005c 00000000 		.word	0
 7172 0060 0B       		.byte	11
 7173 0061 000000   		.space	3
 7174 0064 00000000 		.word	0
 7175 0068 0C       		.byte	12
 7176 0069 000000   		.space	3
 7177 006c 00000000 		.word	0
 7178 0070 0D       		.byte	13
 7179 0071 000000   		.space	3
 7180 0074 00000000 		.word	0
 7181 0078 0E       		.byte	14
 7182 0079 000000   		.space	3
 7183 007c 00000000 		.word	0
 7184 0080 0F       		.byte	15
 7185 0081 000000   		.space	3
 7186 0084 00000000 		.word	0
 7187 0088 10       		.byte	16
 7188 0089 000000   		.space	3
 7189 008c 00000000 		.word	0
 7190 0090 18       		.byte	24
ARM GAS  /tmp/ccmw9yhH.s 			page 175


 7191 0091 000000   		.space	3
 7192 0094 00000000 		.word	0
 7193 0098 13       		.byte	19
 7194 0099 000000   		.space	3
 7195 009c 00000000 		.word	0
 7196 00a0 14       		.byte	20
 7197 00a1 000000   		.space	3
 7198 00a4 00000000 		.word	0
 7199 00a8 15       		.byte	21
 7200 00a9 000000   		.space	3
 7201 00ac 00000000 		.word	0
 7202 00b0 16       		.byte	22
 7203 00b1 000000   		.space	3
 7204 00b4 00000000 		.word	0
 7205 00b8 1E       		.byte	30
 7206 00b9 000000   		.space	3
 7207 00bc 00000000 		.word	0
 7208 00c0 19       		.byte	25
 7209 00c1 000000   		.space	3
 7210 00c4 00000000 		.word	0
 7211 00c8 1A       		.byte	26
 7212 00c9 000000   		.space	3
 7213 00cc 00000000 		.word	0
 7214 00d0 1B       		.byte	27
 7215 00d1 000000   		.space	3
 7216 00d4 00000000 		.word	0
 7217 00d8 1C       		.byte	28
 7218 00d9 000000   		.space	3
 7219 00dc 00000000 		.word	0
 7220 00e0 09       		.byte	9
 7221 00e1 000000   		.space	3
 7222 00e4 00000000 		.word	0
 7223 00e8 1F       		.byte	31
 7224 00e9 000000   		.space	3
 7225 00ec 00000000 		.word	0
 7226 00f0 20       		.byte	32
 7227 00f1 000000   		.space	3
 7228 00f4 00000000 		.word	0
 7229 00f8 21       		.byte	33
 7230 00f9 000000   		.space	3
 7231 00fc 00000000 		.word	0
 7232 0100 22       		.byte	34
 7233 0101 000000   		.space	3
 7234 0104 00000000 		.word	0
 7235 0108 24       		.byte	36
 7236 0109 000000   		.space	3
 7237 010c 00000000 		.word	0
 7238 0110 25       		.byte	37
 7239 0111 000000   		.space	3
 7240 0114 00000000 		.word	0
 7241 0118 26       		.byte	38
 7242 0119 000000   		.space	3
 7243 011c 00000000 		.word	0
 7244 0120 27       		.byte	39
 7245 0121 000000   		.space	3
 7246 0124 00000000 		.word	0
 7247 0128 28       		.byte	40
ARM GAS  /tmp/ccmw9yhH.s 			page 176


 7248 0129 000000   		.space	3
 7249 012c 00000000 		.word	0
 7250 0130 2E       		.byte	46
 7251 0131 000000   		.space	3
 7252 0134 00000000 		.word	0
 7253 0138 2E       		.byte	46
 7254 0139 000000   		.space	3
 7255 013c 00000000 		.word	0
 7256 0140 2E       		.byte	46
 7257 0141 000000   		.space	3
 7258 0144 00000000 		.word	0
 7259 0148 2E       		.byte	46
 7260 0149 000000   		.space	3
 7261 014c 00000000 		.word	0
 7262 0150 04       		.byte	4
 7263 0151 000000   		.space	3
 7264 0154 00000000 		.word	0
 7265 0158 05       		.byte	5
 7266 0159 000000   		.space	3
 7267 015c 00000000 		.word	0
 7268 0160 2E       		.byte	46
 7269 0161 000000   		.space	3
 7270 0164 00000000 		.word	0
 7271 0168 2E       		.byte	46
 7272 0169 000000   		.space	3
 7273 016c 00000000 		.word	0
 7274 0170 2E       		.byte	46
 7275 0171 000000   		.space	3
 7276 0174 00000000 		.word	0
 7277              		.section	.rodata.mid_menu,"a"
 7278              		.align	2
 7281              	mid_menu:
 7282 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7283              		.text
 7284              	.Letext0:
 7285              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7286              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7287              		.file 6 "/usr/include/newlib/sys/_types.h"
 7288              		.file 7 "/usr/include/newlib/sys/reent.h"
 7289              		.file 8 "/usr/include/newlib/sys/lock.h"
 7290              		.file 9 "/usr/include/newlib/stdlib.h"
 7291              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7292              		.file 11 "/usr/include/newlib/ctype.h"
 7293              		.file 12 "dmcp/ff_ifc.h"
 7294              		.file 13 "dmcp/dmcp.h"
 7295              		.file 14 "src/keys.h"
 7296              		.file 15 "src/menu.h"
 7297              		.file 16 "src/decNumber/decContext.h"
 7298              		.file 17 "src/decNumber/decNumber.h"
 7299              		.file 18 "src/decNumber/decimal64.h"
 7300              		.file 19 "src/decNumber/decimal128.h"
 7301              		.file 20 "src/xeq.h"
 7302              		.file 21 "src/data.h"
 7303              		.file 22 "src/display.h"
 7304              		.file 23 "src/consts.h"
 7305              		.file 24 "src/storage.h"
 7306              		.file 25 "src/catalogues.h"
ARM GAS  /tmp/ccmw9yhH.s 			page 177


 7307              		.file 26 "src/stopwatch.h"
 7308              		.file 27 "src/lcd.h"
 7309              		.file 28 "/usr/include/newlib/string.h"
 7310              		.file 29 "/usr/include/newlib/stdio.h"
 7311              		.file 30 "<built-in>"
ARM GAS  /tmp/ccmw9yhH.s 			page 178


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccmw9yhH.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccmw9yhH.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccmw9yhH.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccmw9yhH.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccmw9yhH.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccmw9yhH.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccmw9yhH.s:428    .text.set_menu_label.constprop.0:0000000000000134 $d
     /tmp/ccmw9yhH.s:435    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccmw9yhH.s:466    .text.disp_about:0000000000000000 $t
     /tmp/ccmw9yhH.s:474    .text.disp_about:0000000000000000 disp_about
     /tmp/ccmw9yhH.s:682    .text.disp_about:00000000000000d4 $d
     /tmp/ccmw9yhH.s:705    .text.run_menu_item:0000000000000000 $t
     /tmp/ccmw9yhH.s:713    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccmw9yhH.s:753    .text.set_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:761    .text.set_menu:0000000000000000 set_menu
     /tmp/ccmw9yhH.s:816    .text.set_menu:000000000000002c $d
     /tmp/ccmw9yhH.s:823    .text.set_default_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:831    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccmw9yhH.s:905    .text.set_default_menu:000000000000002c $d
     /tmp/ccmw9yhH.s:914    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:922    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccmw9yhH.s:1024   .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccmw9yhH.s:1035   .text.get_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:1043   .text.get_menu:0000000000000000 get_menu
     /tmp/ccmw9yhH.s:1059   .text.get_menu:0000000000000008 $d
     /tmp/ccmw9yhH.s:1064   .text.get_last_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:1072   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccmw9yhH.s:1088   .text.get_last_menu:0000000000000008 $d
     /tmp/ccmw9yhH.s:1093   .text.set_last_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:1101   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccmw9yhH.s:1176   .text.set_last_menu:000000000000002c $d
     /tmp/ccmw9yhH.s:1185   .text.mdot:0000000000000000 $t
     /tmp/ccmw9yhH.s:1193   .text.mdot:0000000000000000 mdot
     /tmp/ccmw9yhH.s:1284   .text.mdot:000000000000003c $d
     /tmp/ccmw9yhH.s:1289   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccmw9yhH.s:1297   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccmw9yhH.s:1339   .text.get_current_menu_ref:0000000000000028 $d
     /tmp/ccmw9yhH.s:1443   .text.get_current_menu_ref:000000000000007c $d
     /tmp/ccmw9yhH.s:4903   .rodata.Menus:0000000000000000 Menus
     /tmp/ccmw9yhH.s:1451   .text.display_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:1459   .text.display_menu:0000000000000000 display_menu
     /tmp/ccmw9yhH.s:1707   .text.display_menu:000000000000010c $d
     /tmp/ccmw9yhH.s:1714   .text.display_current_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:1722   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccmw9yhH.s:1758   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccmw9yhH.s:1766   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccmw9yhH.s:1850   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccmw9yhH.s:1855   .text.umen_store:0000000000000000 $t
     /tmp/ccmw9yhH.s:1863   .text.umen_store:0000000000000000 umen_store
     /tmp/ccmw9yhH.s:1964   .text.umen_store:0000000000000050 $d
     /tmp/ccmw9yhH.s:1969   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/ccmw9yhH.s:1977   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/ccmw9yhH.s:2388   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/ccmw9yhH.s:2401   .text.build_user_menu:0000000000000000 $t
     /tmp/ccmw9yhH.s:2409   .text.build_user_menu:0000000000000000 build_user_menu
ARM GAS  /tmp/ccmw9yhH.s 			page 179


     /tmp/ccmw9yhH.s:2425   .text.build_user_menu:0000000000000008 $d
     /tmp/ccmw9yhH.s:2430   .text.shutdown:0000000000000000 $t
     /tmp/ccmw9yhH.s:2438   .text.shutdown:0000000000000000 shutdown
     /tmp/ccmw9yhH.s:2456   .text.shutdown:000000000000000c $d
     /tmp/ccmw9yhH.s:2461   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccmw9yhH.s:2469   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccmw9yhH.s:2492   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccmw9yhH.s:2497   .text.get_key:0000000000000000 $t
     /tmp/ccmw9yhH.s:2505   .text.get_key:0000000000000000 get_key
     /tmp/ccmw9yhH.s:2520   .text.get_key:0000000000000004 $d
     /tmp/ccmw9yhH.s:2525   .text.put_key:0000000000000000 $t
     /tmp/ccmw9yhH.s:2533   .text.put_key:0000000000000000 put_key
     /tmp/ccmw9yhH.s:2612   .text.put_key:000000000000003c $d
     /tmp/ccmw9yhH.s:2618   .text.shift_down:0000000000000000 $t
     /tmp/ccmw9yhH.s:2626   .text.shift_down:0000000000000000 shift_down
     /tmp/ccmw9yhH.s:2641   .text.start_key_timer:0000000000000000 $t
     /tmp/ccmw9yhH.s:2649   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccmw9yhH.s:2673   .text.start_key_timer:000000000000000c $d
     /tmp/ccmw9yhH.s:2679   .text.keyticks:0000000000000000 $t
     /tmp/ccmw9yhH.s:2687   .text.keyticks:0000000000000000 keyticks
     /tmp/ccmw9yhH.s:2718   .text.keyticks:0000000000000018 $d
     /tmp/ccmw9yhH.s:2724   .text.moveto:0000000000000000 $t
     /tmp/ccmw9yhH.s:2732   .text.moveto:0000000000000000 moveto
     /tmp/ccmw9yhH.s:2792   .text.moveto:000000000000002c $d
     /tmp/ccmw9yhH.s:2799   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccmw9yhH.s:2803   .text.print_debug:0000000000000000 $t
     /tmp/ccmw9yhH.s:2811   .text.print_debug:0000000000000000 print_debug
     /tmp/ccmw9yhH.s:2913   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccmw9yhH.s:2924   .text.do_now:0000000000000000 $t
     /tmp/ccmw9yhH.s:2932   .text.do_now:0000000000000000 do_now
     /tmp/ccmw9yhH.s:2967   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccmw9yhH.s:2971   .text.do_multi:0000000000000000 $t
     /tmp/ccmw9yhH.s:2979   .text.do_multi:0000000000000000 do_multi
     /tmp/ccmw9yhH.s:3009   .text.do_multi:0000000000000016 $d
     /tmp/ccmw9yhH.s:3023   .text.do_multi:0000000000000024 $t
     /tmp/ccmw9yhH.s:3441   .text.do_multi:00000000000001c0 $d
     /tmp/ccmw9yhH.s:3455   .text.program_main:0000000000000000 $t
     /tmp/ccmw9yhH.s:3463   .text.program_main:0000000000000000 program_main
     /tmp/ccmw9yhH.s:3732   .text.program_main:0000000000000120 $d
     /tmp/ccmw9yhH.s:3738   .text.program_main:000000000000012c $t
     /tmp/ccmw9yhH.s:4010   .text.program_main:0000000000000268 $d
     /tmp/ccmw9yhH.s:4056   .text.program_main:00000000000002e0 $t
     /tmp/ccmw9yhH.s:4643   .text.program_main:0000000000000598 $d
     /tmp/ccmw9yhH.s:4738   .bss.n_p:0000000000000000 n_p
     /tmp/ccmw9yhH.s:4887   .data.spaces:0000000000000000 spaces
     /tmp/ccmw9yhH.s:4878   .data.release:0000000000000000 release
     /tmp/ccmw9yhH.s:4851   .data.h_shift:0000000000000000 h_shift
     /tmp/ccmw9yhH.s:4842   .data.g_shift:0000000000000000 g_shift
     /tmp/ccmw9yhH.s:4834   .data.f_shift:0000000000000000 f_shift
     /tmp/ccmw9yhH.s:4860   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccmw9yhH.s:4869   .data.no_key:0000000000000000 no_key
     /tmp/ccmw9yhH.s:4894   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccmw9yhH.s:4678   .rodata.str1.4:0000000000000000 $d
     /tmp/ccmw9yhH.s:7281   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccmw9yhH.s:4719   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccmw9yhH.s:4725   .bss.last_menu:0000000000000000 last_menu
ARM GAS  /tmp/ccmw9yhH.s 			page 180


     /tmp/ccmw9yhH.s:4713   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccmw9yhH.s:4828   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccmw9yhH.s:4821   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccmw9yhH.s:4752   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccmw9yhH.s:4695   .rodata:0000000000000000 $d
     /tmp/ccmw9yhH.s:4714   .bss.current_menu:0000000000000000 $d
     /tmp/ccmw9yhH.s:4720   .bss.default_menu:0000000000000000 $d
     /tmp/ccmw9yhH.s:4726   .bss.last_menu:0000000000000000 $d
     /tmp/ccmw9yhH.s:4728   .bss.mdots:0000000000000000 $d
     /tmp/ccmw9yhH.s:4732   .bss.mdots:0000000000000000 mdots
     /tmp/ccmw9yhH.s:4735   .bss.n_p:0000000000000000 $d
     /tmp/ccmw9yhH.s:4741   .bss.start_ticks:0000000000000000 $d
     /tmp/ccmw9yhH.s:4745   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccmw9yhH.s:4748   .data.UserMenu:0000000000000000 $d
     /tmp/ccmw9yhH.s:4817   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccmw9yhH.s:4824   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccmw9yhH.s:4831   .data.f_shift:0000000000000000 $d
     /tmp/ccmw9yhH.s:4839   .data.g_shift:0000000000000000 $d
     /tmp/ccmw9yhH.s:4847   .data.h_shift:0000000000000000 $d
     /tmp/ccmw9yhH.s:4856   .data.heartbeat:0000000000000000 $d
     /tmp/ccmw9yhH.s:4865   .data.no_key:0000000000000000 $d
     /tmp/ccmw9yhH.s:4874   .data.release:0000000000000000 $d
     /tmp/ccmw9yhH.s:4883   .data.spaces:0000000000000000 $d
     /tmp/ccmw9yhH.s:4890   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccmw9yhH.s:4900   .rodata.Menus:0000000000000000 $d
     /tmp/ccmw9yhH.s:6543   .rodata.mapping_alpha.11153:0000000000000000 $d
     /tmp/ccmw9yhH.s:6547   .rodata.mapping_alpha.11153:0000000000000000 mapping_alpha.11153
     /tmp/ccmw9yhH.s:6690   .rodata.mapping_fshift.11151:0000000000000000 $d
     /tmp/ccmw9yhH.s:6694   .rodata.mapping_fshift.11151:0000000000000000 mapping_fshift.11151
     /tmp/ccmw9yhH.s:6837   .rodata.mapping_gshift.11152:0000000000000000 $d
     /tmp/ccmw9yhH.s:6841   .rodata.mapping_gshift.11152:0000000000000000 mapping_gshift.11152
     /tmp/ccmw9yhH.s:6984   .rodata.mapping_none.11150:0000000000000000 $d
     /tmp/ccmw9yhH.s:6988   .rodata.mapping_none.11150:0000000000000000 mapping_none.11150
     /tmp/ccmw9yhH.s:7131   .rodata.mapping_running.11154:0000000000000000 $d
     /tmp/ccmw9yhH.s:7135   .rodata.mapping_running.11154:0000000000000000 mapping_running.11154
     /tmp/ccmw9yhH.s:7278   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccmw9yhH.s:1354   .text.get_current_menu_ref:0000000000000037 $d
     /tmp/ccmw9yhH.s:1354   .text.get_current_menu_ref:0000000000000038 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
RectPolConv
xcopy
clear_disp
SvnRevision
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
catcmd
strcpy
ARM GAS  /tmp/ccmw9yhH.s 			page 181


sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
get_alpha_state
StopWatchStatus
JustStopped

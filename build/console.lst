ARM GAS  /tmp/cc1aojQ3.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** extern const char SvnRevision[4];
   3:src/menu.c    **** 
   4:src/menu.c    **** struct _menu UserMenu =
   5:src/menu.c    ****   {
   6:src/menu.c    ****     "User Menu", 
   7:src/menu.c    ****     {
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  11:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  12:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  13:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  14:src/menu.c    ****     }
  15:src/menu.c    ****   };
  16:src/menu.c    **** 
  17:src/menu.c    **** const char* arrow_key_string = "--\015";
  18:src/menu.c    **** const char* cmplx_key_string = "CPX";
  19:src/menu.c    **** 
  20:src/menu.c    **** menu_name current_menu = 0;
  21:src/menu.c    **** menu_name last_menu = 0;
  22:src/menu.c    **** menu_name default_menu = 0;
  23:src/menu.c    **** 
ARM GAS  /tmp/cc1aojQ3.s 			page 2


  24:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  25:src/menu.c    **** 
  26:src/menu.c    **** 
  27:src/menu.c    **** 
  28:src/menu.c    **** /* 
  29:src/menu.c    ****  * System menu stuff
  30:src/menu.c    ****  */
  31:src/menu.c    **** 
  32:src/menu.c    **** #define MI_ABOUT_PGM 11
  33:src/menu.c    **** 
  34:src/menu.c    **** const uint8_t mid_menu[] = {
  35:src/menu.c    ****     MI_SYSTEM_ENTER,
  36:src/menu.c    ****     MI_MSC,
  37:src/menu.c    ****     MI_ABOUT_PGM,
  38:src/menu.c    ****     0 }; // Terminator
  39:src/menu.c    **** 
  40:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  41:src/menu.c    **** 
  42:src/menu.c    **** void disp_about(void);
  43:src/menu.c    **** 
  44:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  45:src/menu.c    ****   int ret = 0;
  46:src/menu.c    **** 
  47:src/menu.c    ****   switch(line_id) {
  48:src/menu.c    ****     case MI_ABOUT_PGM:
  49:src/menu.c    ****       disp_about();
  50:src/menu.c    ****       break;
  51:src/menu.c    **** 
  52:src/menu.c    ****      default:
  53:src/menu.c    ****       ret = MRET_UNIMPL;
  54:src/menu.c    ****       break;
  55:src/menu.c    ****   }
  56:src/menu.c    **** 
  57:src/menu.c    ****   return ret;
  58:src/menu.c    **** }
  59:src/menu.c    **** 
  60:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 60 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  61:src/menu.c    ****   const char * ln;
  40              		.loc 1 61 3 view .LVU1
  62:src/menu.c    **** 
  63:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 63 3 view .LVU2
  64:src/menu.c    **** 
  65:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  66:src/menu.c    **** 
  67:src/menu.c    ****   default:
  68:src/menu.c    ****     ln = NULL;
  42              		.loc 1 68 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  63:src/menu.c    **** 
  44              		.loc 1 63 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
ARM GAS  /tmp/cc1aojQ3.s 			page 3


  69:src/menu.c    ****     break;
  70:src/menu.c    ****   }
  71:src/menu.c    **** 
  72:src/menu.c    ****   return ln;
  73:src/menu.c    **** }
  46              		.loc 1 73 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 73 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  74:src/menu.c    **** 
  75:src/menu.c    **** void disp_about() {
  76:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
  77:src/menu.c    **** 
  78:src/menu.c    ****   xcopy ((title + 29), SvnRevision, 4);
  79:src/menu.c    **** 
  80:src/menu.c    ****   lcd_clear_buf();
  81:src/menu.c    ****   lcd_writeClr(t24);
  82:src/menu.c    **** 
  83:src/menu.c    **** 
  84:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  85:src/menu.c    ****   lcd_putsR(t24, title);
  86:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
  87:src/menu.c    ****   t20->newln = 1;
  88:src/menu.c    **** #ifdef TOP_ROW
  89:src/menu.c    ****   lcd_puts(t20, "With longer alpha display and top row,");
  90:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  91:src/menu.c    ****   lcd_puts(t20, "With a longer alpha display,");
  92:src/menu.c    **** #else
  93:src/menu.c    ****   lcd_puts(t20, "Same display layout as the original WP34S,");
  94:src/menu.c    **** #endif
  95:src/menu.c    ****   lcd_puts(t20, "and some annunciators renamed.");
  96:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
  97:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
  98:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
  99:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 100:src/menu.c    **** 
 101:src/menu.c    ****   t20->y += 5;
 102:src/menu.c    **** 
ARM GAS  /tmp/cc1aojQ3.s 			page 4


 103:src/menu.c    ****   t20->bgfill = 1;
 104:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 105:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 106:src/menu.c    ****   t20->bgfill = 0;
 107:src/menu.c    ****   t20->newln = 0;
 108:src/menu.c    ****   
 109:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
 110:src/menu.c    ****   t24->x = 20;
 111:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 112:src/menu.c    **** 
 113:src/menu.c    ****   lcd_refresh();
 114:src/menu.c    **** 
 115:src/menu.c    ****   wait_for_key_press();
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** /*
 119:src/menu.c    ****  * WP34s menu code
 120:src/menu.c    ****  */
 121:src/menu.c    **** 
 122:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 123:src/menu.c    ****   menu_name m = current_menu;
 124:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 125:src/menu.c    ****     current_menu = default_menu;
 126:src/menu.c    ****   }
 127:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 128:src/menu.c    ****     current_menu = last_menu;
 129:src/menu.c    ****   }
 130:src/menu.c    ****   else {
 131:src/menu.c    ****     current_menu = new_menu; // change to new menu
 132:src/menu.c    ****   }
 133:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 134:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 135:src/menu.c    **** }
 136:src/menu.c    **** 
 137:src/menu.c    **** void set_default_menu () {
 138:src/menu.c    ****   set_menu (default_menu);
 139:src/menu.c    **** }
 140:src/menu.c    **** 
 141:src/menu.c    **** void toggle_default_menu () {
 142:src/menu.c    ****   if (current_menu == M_Blank) {
 143:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 144:src/menu.c    ****     return;
 145:src/menu.c    ****   }
 146:src/menu.c    ****   else if (current_menu == M_Blank2) {
 147:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 148:src/menu.c    ****   }
 149:src/menu.c    ****   else {
 150:src/menu.c    ****     set_default_menu();
 151:src/menu.c    ****   }
 152:src/menu.c    **** }
 153:src/menu.c    **** 
 154:src/menu.c    **** menu_name get_menu () {
 155:src/menu.c    ****   return current_menu;
 156:src/menu.c    **** }
 157:src/menu.c    **** 
 158:src/menu.c    **** menu_name get_last_menu () {
 159:src/menu.c    ****   return last_menu;
ARM GAS  /tmp/cc1aojQ3.s 			page 5


 160:src/menu.c    **** }
 161:src/menu.c    **** 
 162:src/menu.c    **** void display_current_menu () {
 163:src/menu.c    ****   display_menu (get_current_menu_ref());
 164:src/menu.c    **** }
 165:src/menu.c    **** 
 166:src/menu.c    **** void set_last_menu () {
 167:src/menu.c    ****   set_menu (M_Last);
 168:src/menu.c    **** }
 169:src/menu.c    **** 
 170:src/menu.c    **** static unsigned char mdots[200][2];
 171:src/menu.c    **** 
 172:src/menu.c    **** static const struct _menu Menus[] = {
 173:src/menu.c    ****   {
 174:src/menu.c    ****     "M_Blank", // 0
 175:src/menu.c    ****     { 
 176:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 177:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 178:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 179:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 180:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 181:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 182:src/menu.c    ****     }    
 183:src/menu.c    ****   },
 184:src/menu.c    ****   {
 185:src/menu.c    ****     "M_Clear", // 1
 186:src/menu.c    ****     { 
 187:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 188:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 189:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 190:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 191:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 192:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 193:src/menu.c    ****     }    
 194:src/menu.c    ****   },
 195:src/menu.c    ****   {
 196:src/menu.c    ****     "M_Disp", // 2
 197:src/menu.c    ****     { 
 198:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 199:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 200:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 201:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 202:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 203:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 204:src/menu.c    ****     }
 205:src/menu.c    ****   },
 206:src/menu.c    ****   {
 207:src/menu.c    ****     "M_Base", // 3
 208:src/menu.c    ****     { 
 209:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 210:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 211:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 212:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 213:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 214:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 215:src/menu.c    ****     }
 216:src/menu.c    ****   },
ARM GAS  /tmp/cc1aojQ3.s 			page 6


 217:src/menu.c    ****   {
 218:src/menu.c    ****     "M_Angles", // 4
 219:src/menu.c    ****     { 
 220:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 221:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 222:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 223:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 224:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 225:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 226:src/menu.c    ****     }
 227:src/menu.c    ****       
 228:src/menu.c    ****   },
 229:src/menu.c    ****   {
 230:src/menu.c    ****     "M_Misc", // 5
 231:src/menu.c    ****     { 
 232:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 233:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 234:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 235:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 236:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 237:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 238:src/menu.c    ****     }
 239:src/menu.c    ****   },
 240:src/menu.c    ****   {
 241:src/menu.c    ****     "M_Swap", // 6
 242:src/menu.c    ****     { 
 243:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 244:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 245:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 246:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 247:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 248:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 249:src/menu.c    ****     }    
 250:src/menu.c    ****   },
 251:src/menu.c    ****   {
 252:src/menu.c    ****     "M_Program", // 7
 253:src/menu.c    ****     { 
 254:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 255:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 256:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 257:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 258:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 259:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 260:src/menu.c    ****     }
 261:src/menu.c    ****   },
 262:src/menu.c    ****   {
 263:src/menu.c    ****     "M_Setup1", // 8
 264:src/menu.c    ****     { 
 265:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 266:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 267:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 268:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 269:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 270:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 271:src/menu.c    ****     }
 272:src/menu.c    ****   },
 273:src/menu.c    ****   {
ARM GAS  /tmp/cc1aojQ3.s 			page 7


 274:src/menu.c    ****     "M_Arrow", // 9
 275:src/menu.c    ****     { 
 276:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 277:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 278:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 279:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 280:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 281:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 282:src/menu.c    ****     }
 283:src/menu.c    ****   },
 284:src/menu.c    ****   {
 285:src/menu.c    ****     "M_Flags", // 10
 286:src/menu.c    ****     { 
 287:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 288:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 289:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 290:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 291:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 292:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 293:src/menu.c    ****     }
 294:src/menu.c    ****   },
 295:src/menu.c    ****   {
 296:src/menu.c    ****     "M_Prob", // 11
 297:src/menu.c    ****     { 
 298:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 299:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 300:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 301:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 302:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 303:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 304:src/menu.c    ****     }
 305:src/menu.c    ****   },
 306:src/menu.c    ****   {
 307:src/menu.c    ****     "M_Stats", // 12
 308:src/menu.c    ****     /*
 309:src/menu.c    ****      *xbar, sd;
 310:src/menu.c    ****      *yhat, xhat;
 311:src/menu.c    ****      *corr, L.R.;
 312:src/menu.c    ****      *best, linear;
 313:src/menu.c    ****      *ln, exp;
 314:src/menu.c    ****      *cmplx, power;
 315:src/menu.c    ****      *No, sums is already on g9.
 316:src/menu.c    ****      */
 317:src/menu.c    ****     { 
 318:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 319:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 320:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 321:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 322:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 323:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 324:src/menu.c    ****     }
 325:src/menu.c    ****   },
 326:src/menu.c    ****   {
 327:src/menu.c    ****     "M_Setup2", // 13
 328:src/menu.c    ****     { 
 329:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 330:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
ARM GAS  /tmp/cc1aojQ3.s 			page 8


 331:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 332:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 333:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 334:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 335:src/menu.c    ****     }
 336:src/menu.c    ****   },
 337:src/menu.c    ****   {
 338:src/menu.c    ****     "M_Solve", // 14
 339:src/menu.c    ****     { 
 340:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 341:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 342:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 343:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 344:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 345:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 346:src/menu.c    ****     }
 347:src/menu.c    ****   },
 348:src/menu.c    ****   {
 349:src/menu.c    ****     "M_Blank2", // 15
 350:src/menu.c    ****     { 
 351:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 352:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 353:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 354:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 355:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 356:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 357:src/menu.c    ****     }    
 358:src/menu.c    ****   },
 359:src/menu.c    ****   {
 360:src/menu.c    ****     "M_Alpha", // 16
 361:src/menu.c    ****     { 
 362:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 363:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 364:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 365:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 366:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 367:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 368:src/menu.c    ****     }    
 369:src/menu.c    ****   },
 370:src/menu.c    ****   {
 371:src/menu.c    ****     "M_C_Lock", // 17
 372:src/menu.c    ****     { 
 373:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 374:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 375:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 376:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 377:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 378:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 379:src/menu.c    ****     }    
 380:src/menu.c    ****   },
 381:src/menu.c    ****   {
 382:src/menu.c    ****     "M_Clear_C", // 18
 383:src/menu.c    ****     { 
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 386:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 387:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
ARM GAS  /tmp/cc1aojQ3.s 			page 9


 388:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 389:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 390:src/menu.c    ****     }    
 391:src/menu.c    ****   },
 392:src/menu.c    ****   {
 393:src/menu.c    ****     "M_Swap_C", // 19
 394:src/menu.c    ****     { 
 395:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 396:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 397:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 398:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 399:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 400:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 401:src/menu.c    ****     }    
 402:src/menu.c    ****   },
 403:src/menu.c    ****   {
 404:src/menu.c    ****     "M_Arrow_C", // 20
 405:src/menu.c    ****     { 
 406:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 407:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 408:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 409:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 410:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 411:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 412:src/menu.c    ****     }
 413:src/menu.c    ****   },
 414:src/menu.c    ****   {
 415:src/menu.c    ****     "M_Prob_C", // 21
 416:src/menu.c    ****     { 
 417:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 418:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 419:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 420:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 421:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 422:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 423:src/menu.c    ****     }
 424:src/menu.c    ****   },
 425:src/menu.c    ****   {
 426:src/menu.c    ****     "M_Blank2_C", // 22
 427:src/menu.c    ****     { 
 428:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 429:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 430:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 431:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 432:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 433:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 434:src/menu.c    ****     }    
 435:src/menu.c    ****   },
 436:src/menu.c    ****   {
 437:src/menu.c    ****     "M_Misc_C", // 23
 438:src/menu.c    ****     { 
 439:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 440:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 441:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
 442:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 443:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 444:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
ARM GAS  /tmp/cc1aojQ3.s 			page 10


 445:src/menu.c    ****     }
 446:src/menu.c    ****   },
 447:src/menu.c    ****   {
 448:src/menu.c    ****     "M_Usermenu", // 24
 449:src/menu.c    ****     { 
 450:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 451:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 452:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 453:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 454:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 455:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 456:src/menu.c    ****     }
 457:src/menu.c    ****   },
 458:src/menu.c    ****   {
 459:src/menu.c    ****     "M_Print", // 25
 460:src/menu.c    ****     { 
 461:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 462:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 463:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 464:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 465:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 466:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 467:src/menu.c    ****     }
 468:src/menu.c    ****   },
 469:src/menu.c    **** 
 470:src/menu.c    **** };  
 471:src/menu.c    **** 
 472:src/menu.c    **** /* This code is the set_status_sized code with small changes
 473:src/menu.c    ****  * and non-DM42 code removed.
 474:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 475:src/menu.c    ****  */
 476:src/menu.c    **** #define MENU_WIDTH 32
 477:src/menu.c    **** 
 478:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 478 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 479:src/menu.c    ****   // dotcol is the number of the starting dot column
 480:src/menu.c    ****   // shifted is 1 if shifted
 481:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 481 3 view .LVU8
 482:src/menu.c    **** 
 483:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 484:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 484 3 view .LVU9
 485:src/menu.c    **** 
 486:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 486 3 view .LVU10
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 478 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
ARM GAS  /tmp/cc1aojQ3.s 			page 11


  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 478 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 487:src/menu.c    ****   int i, j, xmax;
 488:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 488 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 489:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 490:src/menu.c    **** 
 491:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 491 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 478 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 487:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 487 3 is_stmt 1 view .LVU16
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 488 3 view .LVU17
 492:src/menu.c    **** 
 493:src/menu.c    **** #ifdef RP_PREFIX
 494:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 494 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 491:src/menu.c    **** 
 110              		.loc 1 491 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 491:src/menu.c    **** 
 113              		.loc 1 491 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 494 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 495:src/menu.c    **** #endif
 496:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 496 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 488 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 488 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
ARM GAS  /tmp/cc1aojQ3.s 			page 12


 124              	.LVL7:
 489:src/menu.c    **** 
 125              		.loc 1 489 3 is_stmt 1 view .LVU25
 491:src/menu.c    **** 
 126              		.loc 1 491 3 view .LVU26
 494:src/menu.c    **** #endif
 127              		.loc 1 494 3 view .LVU27
 128              		.loc 1 496 3 view .LVU28
 129              		.loc 1 496 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 496 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB39:
 497:src/menu.c    ****     int c;
 498:src/menu.c    ****     int width;
 499:src/menu.c    ****     unsigned char cmap[6];
 500:src/menu.c    **** 
 501:src/menu.c    ****     int real_width;
 502:src/menu.c    ****     int current_smallp;
 503:src/menu.c    **** 
 504:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 505:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 506:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 507:src/menu.c    ****     //           01 -> (not used)
 508:src/menu.c    ****     //           10 -> use big font
 509:src/menu.c    ****     //           11 -> use small font
 510:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 511:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 511 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 484:src/menu.c    **** 
 139              		.loc 1 484 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
 497:src/menu.c    ****     int c;
 143              		.loc 1 497 5 is_stmt 1 view .LVU33
 498:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 498 5 view .LVU34
 499:src/menu.c    **** 
 145              		.loc 1 499 5 view .LVU35
 501:src/menu.c    ****     int current_smallp;
 146              		.loc 1 501 5 view .LVU36
 502:src/menu.c    **** 
 147              		.loc 1 502 5 view .LVU37
 148              		.loc 1 511 5 view .LVU38
 512:src/menu.c    ****       width = str[1] & 0x1F;
 513:src/menu.c    ****       switch (str[1] & 0x60) {
 514:src/menu.c    ****       default:
 515:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 516:src/menu.c    **** 	break;
 517:src/menu.c    ****       case 0x40:	current_smallp = 0;
 518:src/menu.c    **** 	break;
 519:src/menu.c    ****       case 0x60:	current_smallp = 1;
ARM GAS  /tmp/cc1aojQ3.s 			page 13


 149              		.loc 1 519 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 511:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 511 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 512:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 512 7 is_stmt 1 view .LVU41
 512:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 512 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 513:src/menu.c    ****       default:
 160              		.loc 1 513 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 512:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 512 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 513:src/menu.c    ****       default:
 165              		.loc 1 513 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 519 18 view .LVU46
 170              	.LVL11:
 520:src/menu.c    **** 	break;
 171              		.loc 1 520 2 view .LVU47
 521:src/menu.c    ****       }
 522:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 522 7 view .LVU48
 173              		.loc 1 522 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 519:src/menu.c    **** 	break;
 176              		.loc 1 519 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 523:src/menu.c    ****       str += 3;
 182              		.loc 1 523 7 is_stmt 1 view .LVU51
 524:src/menu.c    **** 
 525:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 525 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 523:src/menu.c    ****       str += 3;
 187              		.loc 1 523 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
ARM GAS  /tmp/cc1aojQ3.s 			page 14


 192              		.loc 1 525 7 is_stmt 1 view .LVU54
 526:src/menu.c    ****     } else {
 527:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 528:src/menu.c    ****       real_width = width = charlengths(c);
 529:src/menu.c    ****       current_smallp = smallp;
 530:src/menu.c    ****     }
 531:src/menu.c    **** 
 532:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 532 5 view .LVU55
 194              		.loc 1 532 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 532 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 533:src/menu.c    ****       break;
 534:src/menu.c    **** 
 535:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 535 5 is_stmt 1 view .LVU58
 202              		.loc 1 535 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 536:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 536 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 535:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 535 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 536 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 536 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 537:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 537 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 538:src/menu.c    ****     }
 539:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 539 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 540:src/menu.c    **** 
 541:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 541 5 view .LVU66
 228              		.loc 1 541 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
ARM GAS  /tmp/cc1aojQ3.s 			page 15


 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 539:src/menu.c    **** 
 234              		.loc 1 539 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 542 17 is_stmt 1 view .LVU69
 240              		.loc 1 542 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 543:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 543 2 is_stmt 1 view .LVU71
 244              		.loc 1 543 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 544:src/menu.c    **** 	  break;
 545:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 546:src/menu.c    ****       }
 547:src/menu.c    ****     }
 548:src/menu.c    ****     x += width;
 549:src/menu.c    ****   }
 550:src/menu.c    **** }
 551:src/menu.c    **** 
 552:src/menu.c    **** 
 553:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 554:src/menu.c    **** 
 555:src/menu.c    **** int pixel_length(const char *s, int smallp)
 556:src/menu.c    **** {
 557:src/menu.c    ****   int len = 0;
 558:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 559:src/menu.c    ****   while (*s != '\0') {
 560:src/menu.c    ****     if (s[0] == '\007') {
 561:src/menu.c    ****       len += s[1] & 0x1F;
 562:src/menu.c    ****       s += 3;
 563:src/menu.c    ****       continue;
 564:src/menu.c    ****     }
 565:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 566:src/menu.c    ****   }
 567:src/menu.c    ****   return len;
 568:src/menu.c    **** }
 569:src/menu.c    **** */
 570:src/menu.c    **** 
 571:src/menu.c    **** 
 572:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 574:src/menu.c    ****   if (on) {
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 576:src/menu.c    ****   }
 577:src/menu.c    ****   else {
 578:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
ARM GAS  /tmp/cc1aojQ3.s 			page 16


 251              		.loc 1 578 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 578 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 545:src/menu.c    ****       }
 259              		.loc 1 545 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
 264              	.LBB44:
 265              		.loc 1 578 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 542:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 542 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 543:src/menu.c    **** 	  break;
 276              		.loc 1 543 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 545:src/menu.c    ****       }
 281              		.loc 1 545 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 572:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 572 6 view .LVU80
 285              	.LBB51:
 573:src/menu.c    ****   if (on) {
 286              		.loc 1 573 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 572:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 572 6 view .LVU82
 290              	.LBB45:
 574:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 574 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 573:src/menu.c    ****   if (on) {
 294              		.loc 1 573 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 573:src/menu.c    ****   if (on) {
 297              		.loc 1 573 6 view .LVU85
ARM GAS  /tmp/cc1aojQ3.s 			page 17


 298 00ca C72A     		cmp	r2, #199
 299              	.LBE51:
 300              	.LBE54:
 545:src/menu.c    ****       }
 301              		.loc 1 545 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 573:src/menu.c    ****   if (on) {
 305              		.loc 1 573 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 575:src/menu.c    ****   }
 309              		.loc 1 575 5 is_stmt 1 view .LVU88
 310              		.loc 1 578 5 view .LVU89
 575:src/menu.c    ****   }
 311              		.loc 1 575 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 574:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 574 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 575:src/menu.c    ****   }
 316              		.loc 1 575 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 578 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 543:src/menu.c    **** 	  break;
 327              		.loc 1 543 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 542:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 542 26 view .LVU95
 542:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 542 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 542:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 542 17 is_stmt 1 view .LVU97
 542:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 542 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 541:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 541 20 is_stmt 1 view .LVU99
 541:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 541 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
ARM GAS  /tmp/cc1aojQ3.s 			page 18


 541:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 541 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 541:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 541 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 548:src/menu.c    ****   }
 348              		.loc 1 548 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 496:src/menu.c    ****     int c;
 350              		.loc 1 496 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 548:src/menu.c    ****   }
 354              		.loc 1 548 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 548:src/menu.c    ****   }
 357              		.loc 1 548 7 view .LVU106
 358              	.LBE57:
 496:src/menu.c    ****     int c;
 359              		.loc 1 496 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 496:src/menu.c    ****     int c;
 361              		.loc 1 496 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 511:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 511 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 497:src/menu.c    ****     int width;
 370              		.loc 1 497 5 is_stmt 1 view .LVU110
 498:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 498 5 view .LVU111
 499:src/menu.c    **** 
 372              		.loc 1 499 5 view .LVU112
 501:src/menu.c    ****     int current_smallp;
 373              		.loc 1 501 5 view .LVU113
 502:src/menu.c    **** 
 374              		.loc 1 502 5 view .LVU114
 511:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 511 5 view .LVU115
 511:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 511 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 527:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 527 7 is_stmt 1 view .LVU117
 528:src/menu.c    ****       current_smallp = smallp;
ARM GAS  /tmp/cc1aojQ3.s 			page 19


 381              		.loc 1 528 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 527:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 527 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 528:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 528 7 is_stmt 1 view .LVU120
 529:src/menu.c    ****     }
 391              		.loc 1 529 7 view .LVU121
 529:src/menu.c    ****     }
 392              		.loc 1 529 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 529:src/menu.c    ****     }
 395              		.loc 1 529 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 532:src/menu.c    ****       break;
 398              		.loc 1 532 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 532:src/menu.c    ****       break;
 401              		.loc 1 532 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 528:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 528 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 532:src/menu.c    ****       break;
 405              		.loc 1 532 5 is_stmt 1 view .LVU127
 532:src/menu.c    ****       break;
 406              		.loc 1 532 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 532:src/menu.c    ****       break;
 410              		.loc 1 532 8 view .LVU129
 411              	.LBE59:
 550:src/menu.c    **** 
 412              		.loc 1 550 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 522:src/menu.c    ****       str += 3;
 422              		.loc 1 522 7 is_stmt 1 view .LVU131
 522:src/menu.c    ****       str += 3;
 423              		.loc 1 522 11 is_stmt 0 view .LVU132
ARM GAS  /tmp/cc1aojQ3.s 			page 20


 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 515:src/menu.c    **** 	break;
 426              		.loc 1 515 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE37:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC5:
 443 0000 57697468 		.ascii	"With longer alpha display and top row,\000"
 443      206C6F6E 
 443      67657220 
 443      616C7068 
 443      61206469 
 444 0027 00       		.align	2
 445              	.LC6:
 446 0028 616E6420 		.ascii	"and some annunciators renamed.\000"
 446      736F6D65 
 446      20616E6E 
 446      756E6369 
 446      61746F72 
 447 0047 00       		.align	2
 448              	.LC7:
 449 0048 496E636C 		.ascii	"Includes printing, stopwatch,\000"
 449      75646573 
 449      20707269 
 449      6E74696E 
 449      672C2073 
 450 0066 0000     		.align	2
 451              	.LC8:
 452 0068 656E7472 		.ascii	"entry RPN, extended file handling,\000"
 452      79205250 
 452      4E2C2065 
 452      7874656E 
 452      64656420 
 453 008b 00       		.align	2
 454              	.LC9:
 455 008c 75736572 		.ascii	"user-defined menus, and\000"
 455      2D646566 
 455      696E6564 
 455      206D656E 
 455      75732C20 
 456              		.align	2
 457              	.LC10:
 458 00a4 636F6D70 		.ascii	"complex lock mode.\000"
 458      6C657820 
 458      6C6F636B 
ARM GAS  /tmp/cc1aojQ3.s 			page 21


 458      206D6F64 
 458      652E00
 459 00b7 00       		.align	2
 460              	.LC11:
 461 00b8 4E656974 		.ascii	"Neither provided by          \000"
 461      68657220 
 461      70726F76 
 461      69646564 
 461      20627920 
 462 00d6 0000     		.align	2
 463              	.LC12:
 464 00d8 6E6F7220 		.ascii	"nor supported by SwissMicros.\000"
 464      73757070 
 464      6F727465 
 464      64206279 
 464      20537769 
 465 00f6 0000     		.align	2
 466              	.LC13:
 467 00f8 20202020 		.ascii	"    Press EXIT key to continue...\000"
 467      50726573 
 467      73204558 
 467      4954206B 
 467      65792074 
 468 011a 0000     		.align	2
 469              	.LC4:
 470 011c 57502033 		.ascii	"WP 34S calculator for DM42: v     \000"
 470      34532063 
 470      616C6375 
 470      6C61746F 
 470      7220666F 
 471              		.section	.text.disp_about,"ax",%progbits
 472              		.align	1
 473              		.p2align 2,,3
 474              		.global	disp_about
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu fpv4-sp-d16
 480              	disp_about:
 481              	.LFB5:
  75:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
 482              		.loc 1 75 19 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 40
 485              		@ frame_needed = 0, uses_anonymous_args = 0
  76:src/menu.c    **** 
 486              		.loc 1 76 3 view .LVU135
  75:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
 487              		.loc 1 75 19 is_stmt 0 view .LVU136
 488 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 489              		.cfi_def_cfa_offset 24
 490              		.cfi_offset 4, -24
 491              		.cfi_offset 5, -20
 492              		.cfi_offset 6, -16
 493              		.cfi_offset 7, -12
 494              		.cfi_offset 8, -8
 495              		.cfi_offset 14, -4
ARM GAS  /tmp/cc1aojQ3.s 			page 22


  76:src/menu.c    **** 
 496              		.loc 1 76 8 view .LVU137
 497 0004 334E     		ldr	r6, .L45
  81:src/menu.c    **** 
 498              		.loc 1 81 3 view .LVU138
 499 0006 344C     		ldr	r4, .L45+4
  84:src/menu.c    ****   lcd_putsR(t24, title);
 500              		.loc 1 84 3 view .LVU139
 501 0008 DFF81481 		ldr	r8, .L45+76
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 502              		.loc 1 85 3 view .LVU140
 503 000c 334F     		ldr	r7, .L45+8
  76:src/menu.c    **** 
 504              		.loc 1 76 8 view .LVU141
 505 000e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
  75:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
 506              		.loc 1 75 19 view .LVU142
 507 0010 8AB0     		sub	sp, sp, #40
 508              		.cfi_def_cfa_offset 64
  76:src/menu.c    **** 
 509              		.loc 1 76 8 view .LVU143
 510 0012 01AD     		add	r5, sp, #4
 511 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 512 0016 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 513 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 514 001a 3368     		ldr	r3, [r6]
 515 001c 25F8023B 		strh	r3, [r5], #2	@ movhi
  78:src/menu.c    **** 
 516              		.loc 1 78 3 view .LVU144
 517 0020 2F49     		ldr	r1, .L45+12
 518 0022 0422     		movs	r2, #4
  76:src/menu.c    **** 
 519              		.loc 1 76 8 view .LVU145
 520 0024 1B0C     		lsrs	r3, r3, #16
  78:src/menu.c    **** 
 521              		.loc 1 78 3 view .LVU146
 522 0026 0DF12100 		add	r0, sp, #33
  76:src/menu.c    **** 
 523              		.loc 1 76 8 view .LVU147
 524 002a 2B70     		strb	r3, [r5]
  78:src/menu.c    **** 
 525              		.loc 1 78 3 is_stmt 1 view .LVU148
 526 002c FFF7FEFF 		bl	xcopy
 527              	.LVL38:
  80:src/menu.c    ****   lcd_writeClr(t24);
 528              		.loc 1 80 3 view .LVU149
 529 0030 2C4B     		ldr	r3, .L45+16
 530 0032 9847     		blx	r3
 531              	.LVL39:
  81:src/menu.c    **** 
 532              		.loc 1 81 3 view .LVU150
 533 0034 2C4B     		ldr	r3, .L45+20
 534 0036 606B     		ldr	r0, [r4, #52]
 535 0038 9847     		blx	r3
 536              	.LVL40:
  84:src/menu.c    ****   lcd_putsR(t24, title);
 537              		.loc 1 84 3 view .LVU151
ARM GAS  /tmp/cc1aojQ3.s 			page 23


 538 003a 606B     		ldr	r0, [r4, #52]
 539 003c 0522     		movs	r2, #5
 540 003e 0021     		movs	r1, #0
 541 0040 C047     		blx	r8
 542              	.LVL41:
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 543              		.loc 1 85 3 view .LVU152
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 544              		.loc 1 85 3 view .LVU153
 545 0042 606B     		ldr	r0, [r4, #52]
 546 0044 0125     		movs	r5, #1
 547 0046 4574     		strb	r5, [r0, #17]
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 548              		.loc 1 85 3 view .LVU154
 549 0048 01A9     		add	r1, sp, #4
 550 004a B847     		blx	r7
 551              	.LVL42:
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 552              		.loc 1 85 3 view .LVU155
 553 004c 636B     		ldr	r3, [r4, #52]
 554 004e 0026     		movs	r6, #0
 555 0050 5E74     		strb	r6, [r3, #17]
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 556              		.loc 1 85 3 view .LVU156
  86:src/menu.c    ****   t20->newln = 1;
 557              		.loc 1 86 3 view .LVU157
 558 0052 B3F90620 		ldrsh	r2, [r3, #6]
 559 0056 B3F90410 		ldrsh	r1, [r3, #4]
 560 005a 206B     		ldr	r0, [r4, #48]
 561 005c C047     		blx	r8
 562              	.LVL43:
  87:src/menu.c    **** #ifdef TOP_ROW
 563              		.loc 1 87 3 view .LVU158
 564 005e 206B     		ldr	r0, [r4, #48]
  89:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 565              		.loc 1 89 3 is_stmt 0 view .LVU159
 566 0060 2249     		ldr	r1, .L45+24
  87:src/menu.c    **** #ifdef TOP_ROW
 567              		.loc 1 87 14 view .LVU160
 568 0062 0575     		strb	r5, [r0, #20]
  89:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 569              		.loc 1 89 3 is_stmt 1 view .LVU161
 570 0064 B847     		blx	r7
 571              	.LVL44:
  95:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 572              		.loc 1 95 3 view .LVU162
 573 0066 206B     		ldr	r0, [r4, #48]
 574 0068 2149     		ldr	r1, .L45+28
 575 006a B847     		blx	r7
 576              	.LVL45:
  96:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 577              		.loc 1 96 3 view .LVU163
 578 006c 206B     		ldr	r0, [r4, #48]
 579 006e 2149     		ldr	r1, .L45+32
 580 0070 B847     		blx	r7
 581              	.LVL46:
  97:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
ARM GAS  /tmp/cc1aojQ3.s 			page 24


 582              		.loc 1 97 3 view .LVU164
 583 0072 206B     		ldr	r0, [r4, #48]
 584 0074 2049     		ldr	r1, .L45+36
 585 0076 B847     		blx	r7
 586              	.LVL47:
  98:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 587              		.loc 1 98 3 view .LVU165
 588 0078 206B     		ldr	r0, [r4, #48]
 589 007a 2049     		ldr	r1, .L45+40
 590 007c B847     		blx	r7
 591              	.LVL48:
  99:src/menu.c    **** 
 592              		.loc 1 99 3 view .LVU166
 593 007e 206B     		ldr	r0, [r4, #48]
 594 0080 1F49     		ldr	r1, .L45+44
 595 0082 B847     		blx	r7
 596              	.LVL49:
 101:src/menu.c    **** 
 597              		.loc 1 101 3 view .LVU167
 598 0084 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 599              		.loc 1 104 3 is_stmt 0 view .LVU168
 600 0086 1F49     		ldr	r1, .L45+48
 101:src/menu.c    **** 
 601              		.loc 1 101 10 view .LVU169
 602 0088 C388     		ldrh	r3, [r0, #6]
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 603              		.loc 1 103 15 view .LVU170
 604 008a 8574     		strb	r5, [r0, #18]
 101:src/menu.c    **** 
 605              		.loc 1 101 10 view .LVU171
 606 008c 0533     		adds	r3, r3, #5
 607 008e C380     		strh	r3, [r0, #6]	@ movhi
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 608              		.loc 1 103 3 is_stmt 1 view .LVU172
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 609              		.loc 1 104 3 view .LVU173
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 610              		.loc 1 104 3 view .LVU174
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 611              		.loc 1 104 3 view .LVU175
 612 0090 4574     		strb	r5, [r0, #17]
 613 0092 B847     		blx	r7
 614              	.LVL50:
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 615              		.loc 1 104 3 view .LVU176
 616 0094 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 617              		.loc 1 104 3 view .LVU177
 105:src/menu.c    ****   t20->bgfill = 0;
 618              		.loc 1 105 3 view .LVU178
 105:src/menu.c    ****   t20->bgfill = 0;
 619              		.loc 1 105 3 view .LVU179
 620 0096 1C49     		ldr	r1, .L45+52
 621 0098 4574     		strb	r5, [r0, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 622              		.loc 1 105 3 view .LVU180
ARM GAS  /tmp/cc1aojQ3.s 			page 25


 623 009a B847     		blx	r7
 624              	.LVL51:
 105:src/menu.c    ****   t20->bgfill = 0;
 625              		.loc 1 105 3 view .LVU181
 626 009c 236B     		ldr	r3, [r4, #48]
 109:src/menu.c    ****   t24->x = 20;
 627              		.loc 1 109 20 is_stmt 0 view .LVU182
 628 009e 1B4A     		ldr	r2, .L45+56
 105:src/menu.c    ****   t20->bgfill = 0;
 629              		.loc 1 105 3 view .LVU183
 630 00a0 5E74     		strb	r6, [r3, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 631              		.loc 1 105 3 is_stmt 1 view .LVU184
 106:src/menu.c    ****   t20->newln = 0;
 632              		.loc 1 106 3 view .LVU185
 106:src/menu.c    ****   t20->newln = 0;
 633              		.loc 1 106 15 is_stmt 0 view .LVU186
 634 00a2 9E74     		strb	r6, [r3, #18]
 107:src/menu.c    ****   
 635              		.loc 1 107 3 is_stmt 1 view .LVU187
 107:src/menu.c    ****   
 636              		.loc 1 107 14 is_stmt 0 view .LVU188
 637 00a4 1E75     		strb	r6, [r3, #20]
 109:src/menu.c    ****   t24->x = 20;
 638              		.loc 1 109 3 is_stmt 1 view .LVU189
 109:src/menu.c    ****   t24->x = 20;
 639              		.loc 1 109 20 is_stmt 0 view .LVU190
 640 00a6 606B     		ldr	r0, [r4, #52]
 641 00a8 9047     		blx	r2
 642              	.LVL52:
 109:src/menu.c    ****   t24->x = 20;
 643              		.loc 1 109 3 view .LVU191
 644 00aa 636B     		ldr	r3, [r4, #52]
 111:src/menu.c    **** 
 645              		.loc 1 111 3 view .LVU192
 646 00ac 184A     		ldr	r2, .L45+60
 647 00ae 5D74     		strb	r5, [r3, #17]
 109:src/menu.c    ****   t24->x = 20;
 648              		.loc 1 109 39 view .LVU193
 649 00b0 C0F1EB00 		rsb	r0, r0, #235
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 650              		.loc 1 110 10 view .LVU194
 651 00b4 1421     		movs	r1, #20
 109:src/menu.c    ****   t24->x = 20;
 652              		.loc 1 109 10 view .LVU195
 653 00b6 D880     		strh	r0, [r3, #6]	@ movhi
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 654              		.loc 1 110 3 is_stmt 1 view .LVU196
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 655              		.loc 1 110 10 is_stmt 0 view .LVU197
 656 00b8 9980     		strh	r1, [r3, #4]	@ movhi
 111:src/menu.c    **** 
 657              		.loc 1 111 3 is_stmt 1 view .LVU198
 111:src/menu.c    **** 
 658              		.loc 1 111 3 view .LVU199
 111:src/menu.c    **** 
 659              		.loc 1 111 3 view .LVU200
ARM GAS  /tmp/cc1aojQ3.s 			page 26


 660 00ba 1846     		mov	r0, r3
 661 00bc 1549     		ldr	r1, .L45+64
 662 00be 9047     		blx	r2
 663              	.LVL53:
 111:src/menu.c    **** 
 664              		.loc 1 111 3 view .LVU201
 665 00c0 626B     		ldr	r2, [r4, #52]
 113:src/menu.c    **** 
 666              		.loc 1 113 3 is_stmt 0 view .LVU202
 667 00c2 154B     		ldr	r3, .L45+68
 111:src/menu.c    **** 
 668              		.loc 1 111 3 view .LVU203
 669 00c4 5674     		strb	r6, [r2, #17]
 111:src/menu.c    **** 
 670              		.loc 1 111 3 is_stmt 1 view .LVU204
 113:src/menu.c    **** 
 671              		.loc 1 113 3 view .LVU205
 672 00c6 9847     		blx	r3
 673              	.LVL54:
 115:src/menu.c    **** }
 674              		.loc 1 115 3 view .LVU206
 675 00c8 144B     		ldr	r3, .L45+72
 676 00ca 9847     		blx	r3
 677              	.LVL55:
 116:src/menu.c    **** 
 678              		.loc 1 116 1 is_stmt 0 view .LVU207
 679 00cc 0AB0     		add	sp, sp, #40
 680              		.cfi_def_cfa_offset 24
 681              		@ sp needed
 682 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 683              	.L46:
 684 00d2 00BF     		.align	2
 685              	.L45:
 686 00d4 1C010000 		.word	.LC4
 687 00d8 00200010 		.word	268443648
 688 00dc 7D020008 		.word	134218365
 689 00e0 00000000 		.word	SvnRevision
 690 00e4 2D020008 		.word	134218285
 691 00e8 65020008 		.word	134218341
 692 00ec 00000000 		.word	.LC5
 693 00f0 28000000 		.word	.LC6
 694 00f4 48000000 		.word	.LC7
 695 00f8 68000000 		.word	.LC8
 696 00fc 8C000000 		.word	.LC9
 697 0100 A4000000 		.word	.LC10
 698 0104 B8000000 		.word	.LC11
 699 0108 D8000000 		.word	.LC12
 700 010c 71020008 		.word	134218353
 701 0110 B1020008 		.word	134218417
 702 0114 F8000000 		.word	.LC13
 703 0118 31020008 		.word	134218289
 704 011c 99030008 		.word	134218649
 705 0120 6D020008 		.word	134218349
 706              		.cfi_endproc
 707              	.LFE5:
 709              		.section	.text.run_menu_item,"ax",%progbits
 710              		.align	1
ARM GAS  /tmp/cc1aojQ3.s 			page 27


 711              		.p2align 2,,3
 712              		.global	run_menu_item
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu fpv4-sp-d16
 718              	run_menu_item:
 719              	.LVL56:
 720              	.LFB3:
  44:src/menu.c    ****   int ret = 0;
 721              		.loc 1 44 36 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
  45:src/menu.c    **** 
 725              		.loc 1 45 3 view .LVU209
  47:src/menu.c    ****     case MI_ABOUT_PGM:
 726              		.loc 1 47 3 view .LVU210
 727 0000 0B28     		cmp	r0, #11
 728 0002 04D1     		bne	.L49
  49:src/menu.c    ****       break;
 729              		.loc 1 49 7 view .LVU211
  44:src/menu.c    ****   int ret = 0;
 730              		.loc 1 44 36 is_stmt 0 view .LVU212
 731 0004 08B5     		push	{r3, lr}
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 3, -8
 734              		.cfi_offset 14, -4
  49:src/menu.c    ****       break;
 735              		.loc 1 49 7 view .LVU213
 736 0006 FFF7FEFF 		bl	disp_about
 737              	.LVL57:
  50:src/menu.c    **** 
 738              		.loc 1 50 7 is_stmt 1 view .LVU214
  45:src/menu.c    **** 
 739              		.loc 1 45 7 is_stmt 0 view .LVU215
 740 000a 0020     		movs	r0, #0
  58:src/menu.c    **** 
 741              		.loc 1 58 1 view .LVU216
 742 000c 08BD     		pop	{r3, pc}
 743              	.LVL58:
 744              	.L49:
 745              		.cfi_def_cfa_offset 0
 746              		.cfi_restore 3
 747              		.cfi_restore 14
  53:src/menu.c    ****       break;
 748              		.loc 1 53 11 view .LVU217
 749 000e 4FF0FF30 		mov	r0, #-1
 750              	.LVL59:
  57:src/menu.c    **** }
 751              		.loc 1 57 3 is_stmt 1 view .LVU218
  58:src/menu.c    **** 
 752              		.loc 1 58 1 is_stmt 0 view .LVU219
 753 0012 7047     		bx	lr
 754              		.cfi_endproc
 755              	.LFE3:
 757              		.section	.text.set_menu,"ax",%progbits
ARM GAS  /tmp/cc1aojQ3.s 			page 28


 758              		.align	1
 759              		.p2align 2,,3
 760              		.global	set_menu
 761              		.syntax unified
 762              		.thumb
 763              		.thumb_func
 764              		.fpu fpv4-sp-d16
 766              	set_menu:
 767              	.LVL60:
 768              	.LFB6:
 122:src/menu.c    ****   menu_name m = current_menu;
 769              		.loc 1 122 38 is_stmt 1 view -0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 0
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		@ link register save eliminated.
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 774              		.loc 1 123 3 view .LVU221
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 775              		.loc 1 123 13 is_stmt 0 view .LVU222
 776 0000 0A4A     		ldr	r2, .L66
 777 0002 92F90030 		ldrsb	r3, [r2]
 778              	.LVL61:
 124:src/menu.c    ****     current_menu = default_menu;
 779              		.loc 1 124 3 is_stmt 1 view .LVU223
 124:src/menu.c    ****     current_menu = default_menu;
 780              		.loc 1 124 6 is_stmt 0 view .LVU224
 781 0006 8342     		cmp	r3, r0
 782 0008 0CD0     		beq	.L65
 127:src/menu.c    ****     current_menu = last_menu;
 783              		.loc 1 127 8 is_stmt 1 view .LVU225
 127:src/menu.c    ****     current_menu = last_menu;
 784              		.loc 1 127 11 is_stmt 0 view .LVU226
 785 000a 411C     		adds	r1, r0, #1
 128:src/menu.c    ****   }
 786              		.loc 1 128 5 is_stmt 1 view .LVU227
 128:src/menu.c    ****   }
 787              		.loc 1 128 18 is_stmt 0 view .LVU228
 788 000c 09BF     		itett	eq
 789 000e 0849     		ldreq	r1, .L66+4
 131:src/menu.c    ****   }
 790              		.loc 1 131 18 view .LVU229
 791 0010 1070     		strbne	r0, [r2]
 128:src/menu.c    ****   }
 792              		.loc 1 128 18 view .LVU230
 793 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 794 0014 1170     		strbeq	r1, [r2]
 131:src/menu.c    ****   }
 795              		.loc 1 131 5 is_stmt 1 view .LVU231
 796              	.L56:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 797              		.loc 1 133 3 view .LVU232
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 798              		.loc 1 133 6 is_stmt 0 view .LVU233
 799 0016 092B     		cmp	r3, #9
 800 0018 03D0     		beq	.L54
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/cc1aojQ3.s 			page 29


 801              		.loc 1 133 23 discriminator 1 view .LVU234
 802 001a 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 803              		.loc 1 133 43 is_stmt 1 discriminator 1 view .LVU235
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 804              		.loc 1 133 53 is_stmt 0 discriminator 1 view .LVU236
 805 001c 1CBF     		itt	ne
 806 001e 044A     		ldrne	r2, .L66+4
 807 0020 1370     		strbne	r3, [r2]
 808              	.L54:
 135:src/menu.c    **** 
 809              		.loc 1 135 1 view .LVU237
 810 0022 7047     		bx	lr
 811              	.L65:
 125:src/menu.c    ****   }
 812              		.loc 1 125 5 is_stmt 1 view .LVU238
 125:src/menu.c    ****   }
 813              		.loc 1 125 18 is_stmt 0 view .LVU239
 814 0024 0349     		ldr	r1, .L66+8
 815 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 816 0028 1170     		strb	r1, [r2]
 817 002a F4E7     		b	.L56
 818              	.L67:
 819              		.align	2
 820              	.L66:
 821 002c 00000000 		.word	.LANCHOR1
 822 0030 00000000 		.word	.LANCHOR3
 823 0034 00000000 		.word	.LANCHOR2
 824              		.cfi_endproc
 825              	.LFE6:
 827              		.section	.text.set_default_menu,"ax",%progbits
 828              		.align	1
 829              		.p2align 2,,3
 830              		.global	set_default_menu
 831              		.syntax unified
 832              		.thumb
 833              		.thumb_func
 834              		.fpu fpv4-sp-d16
 836              	set_default_menu:
 837              	.LFB7:
 137:src/menu.c    ****   set_menu (default_menu);
 838              		.loc 1 137 26 is_stmt 1 view -0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 138:src/menu.c    **** }
 843              		.loc 1 138 3 view .LVU241
 844 0000 0A4B     		ldr	r3, .L80
 845              	.LBB61:
 846              	.LBB62:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 847              		.loc 1 123 13 is_stmt 0 view .LVU242
 848 0002 0B49     		ldr	r1, .L80+4
 849              	.LBE62:
 850              	.LBE61:
 138:src/menu.c    **** }
ARM GAS  /tmp/cc1aojQ3.s 			page 30


 851              		.loc 1 138 3 view .LVU243
 852 0004 93F90020 		ldrsb	r2, [r3]
 853              	.LVL62:
 854              	.LBB65:
 855              	.LBI61:
 122:src/menu.c    ****   menu_name m = current_menu;
 856              		.loc 1 122 6 is_stmt 1 view .LVU244
 857              	.LBB63:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 858              		.loc 1 123 3 view .LVU245
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 859              		.loc 1 123 13 is_stmt 0 view .LVU246
 860 0008 91F90030 		ldrsb	r3, [r1]
 861              	.LVL63:
 124:src/menu.c    ****     current_menu = default_menu;
 862              		.loc 1 124 3 is_stmt 1 view .LVU247
 124:src/menu.c    ****     current_menu = default_menu;
 863              		.loc 1 124 6 is_stmt 0 view .LVU248
 864 000c 9A42     		cmp	r2, r3
 865 000e 0BD0     		beq	.L79
 127:src/menu.c    ****     current_menu = last_menu;
 866              		.loc 1 127 8 is_stmt 1 view .LVU249
 127:src/menu.c    ****     current_menu = last_menu;
 867              		.loc 1 127 11 is_stmt 0 view .LVU250
 868 0010 501C     		adds	r0, r2, #1
 128:src/menu.c    ****   }
 869              		.loc 1 128 5 is_stmt 1 view .LVU251
 128:src/menu.c    ****   }
 870              		.loc 1 128 18 is_stmt 0 view .LVU252
 871 0012 04BF     		itt	eq
 872 0014 074A     		ldreq	r2, .L80+8
 873              	.LVL64:
 128:src/menu.c    ****   }
 874              		.loc 1 128 18 view .LVU253
 875 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 876              		.loc 1 131 5 is_stmt 1 view .LVU254
 131:src/menu.c    ****   }
 877              		.loc 1 131 18 is_stmt 0 view .LVU255
 878 0018 0A70     		strb	r2, [r1]
 879              	.LVL65:
 880              	.L70:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 881              		.loc 1 133 3 is_stmt 1 view .LVU256
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 882              		.loc 1 133 6 is_stmt 0 view .LVU257
 883 001a 092B     		cmp	r3, #9
 884 001c 03D0     		beq	.L68
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 885              		.loc 1 133 23 view .LVU258
 886 001e 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 887              		.loc 1 133 43 is_stmt 1 view .LVU259
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 888              		.loc 1 133 53 is_stmt 0 view .LVU260
 889 0020 1CBF     		itt	ne
 890 0022 044A     		ldrne	r2, .L80+8
ARM GAS  /tmp/cc1aojQ3.s 			page 31


 891 0024 1370     		strbne	r3, [r2]
 892              	.LVL66:
 893              	.L68:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 894              		.loc 1 133 53 view .LVU261
 895              	.LBE63:
 896              	.LBE65:
 139:src/menu.c    **** 
 897              		.loc 1 139 1 view .LVU262
 898 0026 7047     		bx	lr
 899              	.LVL67:
 900              	.L79:
 901              	.LBB66:
 902              	.LBB64:
 125:src/menu.c    ****   }
 903              		.loc 1 125 5 is_stmt 1 view .LVU263
 125:src/menu.c    ****   }
 904              		.loc 1 125 18 is_stmt 0 view .LVU264
 905 0028 0B70     		strb	r3, [r1]
 906 002a F6E7     		b	.L70
 907              	.L81:
 908              		.align	2
 909              	.L80:
 910 002c 00000000 		.word	.LANCHOR2
 911 0030 00000000 		.word	.LANCHOR1
 912 0034 00000000 		.word	.LANCHOR3
 913              	.LBE64:
 914              	.LBE66:
 915              		.cfi_endproc
 916              	.LFE7:
 918              		.section	.text.toggle_default_menu,"ax",%progbits
 919              		.align	1
 920              		.p2align 2,,3
 921              		.global	toggle_default_menu
 922              		.syntax unified
 923              		.thumb
 924              		.thumb_func
 925              		.fpu fpv4-sp-d16
 927              	toggle_default_menu:
 928              	.LFB8:
 141:src/menu.c    ****   if (current_menu == M_Blank) {
 929              		.loc 1 141 29 is_stmt 1 view -0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 0
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933              		@ link register save eliminated.
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 934              		.loc 1 142 3 view .LVU266
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 935              		.loc 1 142 20 is_stmt 0 view .LVU267
 936 0000 104A     		ldr	r2, .L98
 143:src/menu.c    ****     return;
 937              		.loc 1 143 33 view .LVU268
 938 0002 1149     		ldr	r1, .L98+4
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 939              		.loc 1 142 20 view .LVU269
 940 0004 92F90030 		ldrsb	r3, [r2]
ARM GAS  /tmp/cc1aojQ3.s 			page 32


 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 941              		.loc 1 142 6 view .LVU270
 942 0008 ABB1     		cbz	r3, .L95
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 943              		.loc 1 146 8 is_stmt 1 view .LVU271
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 944              		.loc 1 146 11 is_stmt 0 view .LVU272
 945 000a 0F2B     		cmp	r3, #15
 946 000c 0FD0     		beq	.L96
 150:src/menu.c    ****   }
 947              		.loc 1 150 5 is_stmt 1 view .LVU273
 948              	.LBB67:
 949              	.LBI67:
 137:src/menu.c    ****   set_menu (default_menu);
 950              		.loc 1 137 6 view .LVU274
 951              	.LBB68:
 138:src/menu.c    **** }
 952              		.loc 1 138 3 view .LVU275
 953 000e 91F90010 		ldrsb	r1, [r1]
 954              	.LVL68:
 955              	.LBB69:
 956              	.LBI69:
 122:src/menu.c    ****   menu_name m = current_menu;
 957              		.loc 1 122 6 view .LVU276
 958              	.LBB70:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 959              		.loc 1 123 3 view .LVU277
 124:src/menu.c    ****     current_menu = default_menu;
 960              		.loc 1 124 3 view .LVU278
 124:src/menu.c    ****     current_menu = default_menu;
 961              		.loc 1 124 6 is_stmt 0 view .LVU279
 962 0012 8B42     		cmp	r3, r1
 963 0014 13D0     		beq	.L97
 127:src/menu.c    ****     current_menu = last_menu;
 964              		.loc 1 127 8 is_stmt 1 view .LVU280
 127:src/menu.c    ****     current_menu = last_menu;
 965              		.loc 1 127 11 is_stmt 0 view .LVU281
 966 0016 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 967              		.loc 1 128 5 is_stmt 1 view .LVU282
 128:src/menu.c    ****   }
 968              		.loc 1 128 18 is_stmt 0 view .LVU283
 969 0018 04BF     		itt	eq
 970 001a 0C49     		ldreq	r1, .L98+8
 971              	.LVL69:
 128:src/menu.c    ****   }
 972              		.loc 1 128 18 view .LVU284
 973 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 974              		.loc 1 131 5 is_stmt 1 view .LVU285
 131:src/menu.c    ****   }
 975              		.loc 1 131 18 is_stmt 0 view .LVU286
 976 001e 1170     		strb	r1, [r2]
 977              	.LVL70:
 978              	.L87:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 979              		.loc 1 133 3 is_stmt 1 view .LVU287
ARM GAS  /tmp/cc1aojQ3.s 			page 33


 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 980              		.loc 1 133 6 is_stmt 0 view .LVU288
 981 0020 092B     		cmp	r3, #9
 982 0022 03D0     		beq	.L82
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 983              		.loc 1 133 23 view .LVU289
 984 0024 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 985              		.loc 1 133 43 is_stmt 1 view .LVU290
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 986              		.loc 1 133 53 is_stmt 0 view .LVU291
 987 0026 1CBF     		itt	ne
 988 0028 084A     		ldrne	r2, .L98+8
 989 002a 1370     		strbne	r3, [r2]
 990              	.LVL71:
 991              	.L82:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 992              		.loc 1 133 53 view .LVU292
 993              	.LBE70:
 994              	.LBE69:
 995              	.LBE68:
 996              	.LBE67:
 152:src/menu.c    **** 
 997              		.loc 1 152 1 view .LVU293
 998 002c 7047     		bx	lr
 999              	.L96:
 147:src/menu.c    ****   }
 1000              		.loc 1 147 5 is_stmt 1 view .LVU294
 147:src/menu.c    ****   }
 1001              		.loc 1 147 33 is_stmt 0 view .LVU295
 1002 002e 0023     		movs	r3, #0
 1003 0030 0B70     		strb	r3, [r1]
 147:src/menu.c    ****   }
 1004              		.loc 1 147 18 view .LVU296
 1005 0032 1370     		strb	r3, [r2]
 1006 0034 7047     		bx	lr
 1007              	.L95:
 143:src/menu.c    ****     return;
 1008              		.loc 1 143 5 is_stmt 1 view .LVU297
 143:src/menu.c    ****     return;
 1009              		.loc 1 143 33 is_stmt 0 view .LVU298
 1010 0036 0F23     		movs	r3, #15
 1011 0038 0B70     		strb	r3, [r1]
 143:src/menu.c    ****     return;
 1012              		.loc 1 143 18 view .LVU299
 1013 003a 1370     		strb	r3, [r2]
 144:src/menu.c    ****   }
 1014              		.loc 1 144 5 is_stmt 1 view .LVU300
 1015 003c 7047     		bx	lr
 1016              	.LVL72:
 1017              	.L97:
 1018              	.LBB74:
 1019              	.LBB73:
 1020              	.LBB72:
 1021              	.LBB71:
 125:src/menu.c    ****   }
 1022              		.loc 1 125 5 view .LVU301
ARM GAS  /tmp/cc1aojQ3.s 			page 34


 125:src/menu.c    ****   }
 1023              		.loc 1 125 18 is_stmt 0 view .LVU302
 1024 003e 1370     		strb	r3, [r2]
 1025 0040 EEE7     		b	.L87
 1026              	.L99:
 1027 0042 00BF     		.align	2
 1028              	.L98:
 1029 0044 00000000 		.word	.LANCHOR1
 1030 0048 00000000 		.word	.LANCHOR2
 1031 004c 00000000 		.word	.LANCHOR3
 1032              	.LBE71:
 1033              	.LBE72:
 1034              	.LBE73:
 1035              	.LBE74:
 1036              		.cfi_endproc
 1037              	.LFE8:
 1039              		.section	.text.get_menu,"ax",%progbits
 1040              		.align	1
 1041              		.p2align 2,,3
 1042              		.global	get_menu
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu fpv4-sp-d16
 1048              	get_menu:
 1049              	.LFB9:
 154:src/menu.c    ****   return current_menu;
 1050              		.loc 1 154 23 is_stmt 1 view -0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              		@ link register save eliminated.
 155:src/menu.c    **** }
 1055              		.loc 1 155 3 view .LVU304
 155:src/menu.c    **** }
 1056              		.loc 1 155 10 is_stmt 0 view .LVU305
 1057 0000 014B     		ldr	r3, .L101
 156:src/menu.c    **** 
 1058              		.loc 1 156 1 view .LVU306
 1059 0002 93F90000 		ldrsb	r0, [r3]
 1060 0006 7047     		bx	lr
 1061              	.L102:
 1062              		.align	2
 1063              	.L101:
 1064 0008 00000000 		.word	.LANCHOR1
 1065              		.cfi_endproc
 1066              	.LFE9:
 1068              		.section	.text.get_last_menu,"ax",%progbits
 1069              		.align	1
 1070              		.p2align 2,,3
 1071              		.global	get_last_menu
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu fpv4-sp-d16
 1077              	get_last_menu:
 1078              	.LFB10:
ARM GAS  /tmp/cc1aojQ3.s 			page 35


 158:src/menu.c    ****   return last_menu;
 1079              		.loc 1 158 28 is_stmt 1 view -0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              		@ link register save eliminated.
 159:src/menu.c    **** }
 1084              		.loc 1 159 3 view .LVU308
 159:src/menu.c    **** }
 1085              		.loc 1 159 10 is_stmt 0 view .LVU309
 1086 0000 014B     		ldr	r3, .L104
 160:src/menu.c    **** 
 1087              		.loc 1 160 1 view .LVU310
 1088 0002 93F90000 		ldrsb	r0, [r3]
 1089 0006 7047     		bx	lr
 1090              	.L105:
 1091              		.align	2
 1092              	.L104:
 1093 0008 00000000 		.word	.LANCHOR3
 1094              		.cfi_endproc
 1095              	.LFE10:
 1097              		.section	.text.set_last_menu,"ax",%progbits
 1098              		.align	1
 1099              		.p2align 2,,3
 1100              		.global	set_last_menu
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1104              		.fpu fpv4-sp-d16
 1106              	set_last_menu:
 1107              	.LFB12:
 166:src/menu.c    ****   set_menu (M_Last);
 1108              		.loc 1 166 23 is_stmt 1 view -0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 1112              		@ link register save eliminated.
 167:src/menu.c    **** }
 1113              		.loc 1 167 3 view .LVU312
 1114              	.LVL73:
 1115              	.LBB75:
 1116              	.LBI75:
 122:src/menu.c    ****   menu_name m = current_menu;
 1117              		.loc 1 122 6 view .LVU313
 1118              	.LBB76:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1119              		.loc 1 123 3 view .LVU314
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1120              		.loc 1 123 13 is_stmt 0 view .LVU315
 1121 0000 0A4A     		ldr	r2, .L119
 1122 0002 92F90030 		ldrsb	r3, [r2]
 1123              	.LVL74:
 124:src/menu.c    ****     current_menu = default_menu;
 1124              		.loc 1 124 3 is_stmt 1 view .LVU316
 124:src/menu.c    ****     current_menu = default_menu;
 1125              		.loc 1 124 6 is_stmt 0 view .LVU317
 1126 0006 591C     		adds	r1, r3, #1
ARM GAS  /tmp/cc1aojQ3.s 			page 36


 1127 0008 09D0     		beq	.L116
 127:src/menu.c    ****     current_menu = last_menu;
 1128              		.loc 1 127 8 is_stmt 1 view .LVU318
 128:src/menu.c    ****   }
 1129              		.loc 1 128 5 view .LVU319
 128:src/menu.c    ****   }
 1130              		.loc 1 128 18 is_stmt 0 view .LVU320
 1131 000a 0949     		ldr	r1, .L119+4
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1132              		.loc 1 133 6 view .LVU321
 1133 000c 092B     		cmp	r3, #9
 128:src/menu.c    ****   }
 1134              		.loc 1 128 18 view .LVU322
 1135 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1136 0010 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1137              		.loc 1 133 3 is_stmt 1 view .LVU323
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1138              		.loc 1 133 6 is_stmt 0 view .LVU324
 1139 0012 00D1     		bne	.L117
 1140              	.L106:
 1141              	.LBE76:
 1142              	.LBE75:
 168:src/menu.c    **** 
 1143              		.loc 1 168 1 view .LVU325
 1144 0014 7047     		bx	lr
 1145              	.L117:
 1146              	.LBB79:
 1147              	.LBB77:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1148              		.loc 1 133 23 view .LVU326
 1149 0016 102B     		cmp	r3, #16
 1150 0018 FCD0     		beq	.L106
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1151              		.loc 1 133 43 is_stmt 1 view .LVU327
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1152              		.loc 1 133 53 is_stmt 0 view .LVU328
 1153 001a 0B70     		strb	r3, [r1]
 1154              	.LVL75:
 1155              	.L118:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1156              		.loc 1 133 53 view .LVU329
 1157              	.LBE77:
 1158              	.LBE79:
 168:src/menu.c    **** 
 1159              		.loc 1 168 1 view .LVU330
 1160 001c 7047     		bx	lr
 1161              	.LVL76:
 1162              	.L116:
 1163              	.LBB80:
 1164              	.LBB78:
 125:src/menu.c    ****   }
 1165              		.loc 1 125 5 is_stmt 1 view .LVU331
 125:src/menu.c    ****   }
 1166              		.loc 1 125 18 is_stmt 0 view .LVU332
 1167 001e 0548     		ldr	r0, .L119+8
 1168 0020 0349     		ldr	r1, .L119+4
ARM GAS  /tmp/cc1aojQ3.s 			page 37


 1169 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1170 0024 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1171              		.loc 1 133 3 is_stmt 1 view .LVU333
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1172              		.loc 1 133 43 view .LVU334
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1173              		.loc 1 133 53 is_stmt 0 view .LVU335
 1174 0026 0B70     		strb	r3, [r1]
 1175              	.LVL77:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1176              		.loc 1 133 53 view .LVU336
 1177 0028 F8E7     		b	.L118
 1178              	.L120:
 1179 002a 00BF     		.align	2
 1180              	.L119:
 1181 002c 00000000 		.word	.LANCHOR1
 1182 0030 00000000 		.word	.LANCHOR3
 1183 0034 00000000 		.word	.LANCHOR2
 1184              	.LBE78:
 1185              	.LBE80:
 1186              		.cfi_endproc
 1187              	.LFE12:
 1189              		.section	.text.mdot,"ax",%progbits
 1190              		.align	1
 1191              		.p2align 2,,3
 1192              		.global	mdot
 1193              		.syntax unified
 1194              		.thumb
 1195              		.thumb_func
 1196              		.fpu fpv4-sp-d16
 1198              	mdot:
 1199              	.LVL78:
 1200              	.LFB14:
 572:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1201              		.loc 1 572 40 is_stmt 1 view -0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
 1205              		@ link register save eliminated.
 573:src/menu.c    ****   if (on) {
 1206              		.loc 1 573 3 view .LVU338
 573:src/menu.c    ****   if (on) {
 1207              		.loc 1 573 6 is_stmt 0 view .LVU339
 1208 0000 C728     		cmp	r0, #199
 1209 0002 1AD8     		bhi	.L125
 1210              	.LVL79:
 1211              	.LBB83:
 1212              	.LBI83:
 572:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1213              		.loc 1 572 6 is_stmt 1 view .LVU340
 1214              	.LBB84:
 574:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1215              		.loc 1 574 3 view .LVU341
 1216              	.LBE84:
 1217              	.LBE83:
 572:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
ARM GAS  /tmp/cc1aojQ3.s 			page 38


 1218              		.loc 1 572 40 is_stmt 0 view .LVU342
 1219 0004 10B4     		push	{r4}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 4, -4
 1222              	.LBB87:
 1223              	.LBB85:
 574:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1224              		.loc 1 574 6 view .LVU343
 1225 0006 63B9     		cbnz	r3, .L128
 1226              		.loc 1 578 5 is_stmt 1 view .LVU344
 1227              		.loc 1 578 17 is_stmt 0 view .LVU345
 1228 0008 0C4B     		ldr	r3, .L129
 1229              	.LVL80:
 1230              		.loc 1 578 17 view .LVU346
 1231 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1232              	.LVL81:
 1233              		.loc 1 578 25 view .LVU347
 1234 000e 0124     		movs	r4, #1
 1235              		.loc 1 578 17 view .LVU348
 1236 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1237              		.loc 1 578 25 view .LVU349
 1238 0012 04FA01F1 		lsl	r1, r4, r1
 1239              	.LVL82:
 1240              		.loc 1 578 17 view .LVU350
 1241 0016 23EA0101 		bic	r1, r3, r1
 1242 001a 8154     		strb	r1, [r0, r2]
 1243              	.LVL83:
 1244              		.loc 1 578 17 view .LVU351
 1245              	.LBE85:
 1246              	.LBE87:
 579:src/menu.c    ****   }
 580:src/menu.c    **** }
 1247              		.loc 1 580 1 view .LVU352
 1248 001c 5DF8044B 		ldr	r4, [sp], #4
 1249              		.cfi_remember_state
 1250              		.cfi_restore 4
 1251              		.cfi_def_cfa_offset 0
 1252 0020 7047     		bx	lr
 1253              	.LVL84:
 1254              	.L128:
 1255              		.cfi_restore_state
 1256              	.LBB88:
 1257              	.LBB86:
 575:src/menu.c    ****   }
 1258              		.loc 1 575 5 is_stmt 1 view .LVU353
 575:src/menu.c    ****   }
 1259              		.loc 1 575 17 is_stmt 0 view .LVU354
 1260 0022 064B     		ldr	r3, .L129
 1261              	.LVL85:
 575:src/menu.c    ****   }
 1262              		.loc 1 575 17 view .LVU355
 1263 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1264              	.LVL86:
 575:src/menu.c    ****   }
 1265              		.loc 1 575 24 view .LVU356
 1266 0028 0124     		movs	r4, #1
 575:src/menu.c    ****   }
ARM GAS  /tmp/cc1aojQ3.s 			page 39


 1267              		.loc 1 575 17 view .LVU357
 1268 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 575:src/menu.c    ****   }
 1269              		.loc 1 575 24 view .LVU358
 1270 002c 04FA01F1 		lsl	r1, r4, r1
 1271              	.LVL87:
 575:src/menu.c    ****   }
 1272              		.loc 1 575 17 view .LVU359
 1273 0030 1943     		orrs	r1, r1, r3
 1274 0032 8154     		strb	r1, [r0, r2]
 1275              	.LBE86:
 1276              	.LBE88:
 1277              		.loc 1 580 1 view .LVU360
 1278 0034 5DF8044B 		ldr	r4, [sp], #4
 1279              		.cfi_restore 4
 1280              		.cfi_def_cfa_offset 0
 1281 0038 7047     		bx	lr
 1282              	.LVL88:
 1283              	.L125:
 1284              		.loc 1 580 1 view .LVU361
 1285 003a 7047     		bx	lr
 1286              	.L130:
 1287              		.align	2
 1288              	.L129:
 1289 003c 00000000 		.word	.LANCHOR0
 1290              		.cfi_endproc
 1291              	.LFE14:
 1293              		.section	.text.get_current_menu_ref,"ax",%progbits
 1294              		.align	1
 1295              		.p2align 2,,3
 1296              		.global	get_current_menu_ref
 1297              		.syntax unified
 1298              		.thumb
 1299              		.thumb_func
 1300              		.fpu fpv4-sp-d16
 1302              	get_current_menu_ref:
 1303              	.LVL89:
 1304              	.LFB15:
 581:src/menu.c    **** 
 582:src/menu.c    **** struct _menu get_current_menu_ref() {
 1305              		.loc 1 582 37 is_stmt 1 view -0
 1306              		.cfi_startproc
 1307              		@ args = 0, pretend = 0, frame = 0
 1308              		@ frame_needed = 0, uses_anonymous_args = 0
 583:src/menu.c    ****   int i = current_menu;
 1309              		.loc 1 583 3 view .LVU363
 584:src/menu.c    ****   if (C_LOCKED)
 1310              		.loc 1 584 7 is_stmt 0 view .LVU364
 1311 0000 1E4A     		ldr	r2, .L151
 583:src/menu.c    ****   int i = current_menu;
 1312              		.loc 1 583 7 view .LVU365
 1313 0002 1F4B     		ldr	r3, .L151+4
 1314              		.loc 1 584 7 view .LVU366
 1315 0004 1268     		ldr	r2, [r2]
 582:src/menu.c    ****   int i = current_menu;
 1316              		.loc 1 582 37 view .LVU367
 1317 0006 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc1aojQ3.s 			page 40


 1318              		.cfi_def_cfa_offset 8
 1319              		.cfi_offset 4, -8
 1320              		.cfi_offset 14, -4
 1321              		.loc 1 584 7 view .LVU368
 1322 0008 92F8E447 		ldrb	r4, [r2, #2020]	@ zero_extendqisi2
 583:src/menu.c    ****   int i = current_menu;
 1323              		.loc 1 583 7 view .LVU369
 1324 000c 93F90010 		ldrsb	r1, [r3]
 1325              	.LVL90:
 1326              		.loc 1 584 3 is_stmt 1 view .LVU370
 582:src/menu.c    ****   int i = current_menu;
 1327              		.loc 1 582 37 is_stmt 0 view .LVU371
 1328 0010 0346     		mov	r3, r0
 1329              		.loc 1 584 6 view .LVU372
 1330 0012 6007     		lsls	r0, r4, #29
 1331              	.LVL91:
 1332              		.loc 1 584 6 view .LVU373
 1333 0014 1DD5     		bpl	.L132
 1334              		.loc 1 584 7 discriminator 1 view .LVU374
 1335 0016 92F8DE27 		ldrb	r2, [r2, #2014]	@ zero_extendqisi2
 1336 001a 5207     		lsls	r2, r2, #29
 1337 001c 19D5     		bpl	.L132
 585:src/menu.c    ****     switch (current_menu) {
 1338              		.loc 1 585 5 is_stmt 1 view .LVU375
 1339 001e 4A1E     		subs	r2, r1, #1
 1340 0020 0E2A     		cmp	r2, #14
 1341 0022 16D8     		bhi	.L132
 1342 0024 DFE802F0 		tbb	[pc, r2]
 1343              	.L134:
 1344 0028 27       		.byte	(.L140-.L134)/2
 1345 0029 15       		.byte	(.L132-.L134)/2
 1346 002a 25       		.byte	(.L135-.L134)/2
 1347 002b 15       		.byte	(.L132-.L134)/2
 1348 002c 23       		.byte	(.L139-.L134)/2
 1349 002d 13       		.byte	(.L138-.L134)/2
 1350 002e 25       		.byte	(.L135-.L134)/2
 1351 002f 15       		.byte	(.L132-.L134)/2
 1352 0030 08       		.byte	(.L143-.L134)/2
 1353 0031 25       		.byte	(.L135-.L134)/2
 1354 0032 21       		.byte	(.L136-.L134)/2
 1355 0033 25       		.byte	(.L135-.L134)/2
 1356 0034 25       		.byte	(.L135-.L134)/2
 1357 0035 25       		.byte	(.L135-.L134)/2
 1358 0036 1F       		.byte	(.L133-.L134)/2
 1359 0037 00       		.p2align 1
 1360              	.L143:
 586:src/menu.c    ****     case (M_Clear):
 587:src/menu.c    ****       i = M_Clear_C;
 588:src/menu.c    ****       break;
 589:src/menu.c    ****     case (M_Swap):
 590:src/menu.c    ****       i = M_Swap_C;
 591:src/menu.c    ****       break;
 592:src/menu.c    ****     case (M_Arrow):
 593:src/menu.c    ****       i = M_Arrow_C;
 1361              		.loc 1 593 9 is_stmt 0 view .LVU376
 1362 0038 1421     		movs	r1, #20
 1363              	.LVL92:
ARM GAS  /tmp/cc1aojQ3.s 			page 41


 1364              	.L137:
 594:src/menu.c    ****       break;
 595:src/menu.c    ****     case (M_Prob):
 596:src/menu.c    ****       i = M_Prob_C;
 597:src/menu.c    ****       break;
 598:src/menu.c    ****     case (M_Blank2):
 599:src/menu.c    ****       i = M_Blank2_C;
 600:src/menu.c    ****       break;
 601:src/menu.c    ****     case (M_Misc):
 602:src/menu.c    ****       i = M_Misc_C;
 603:src/menu.c    ****       break;
 604:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 605:src/menu.c    ****     case (M_Flags):// so don't display them.
 606:src/menu.c    ****     case (M_Stats):
 607:src/menu.c    ****     case (M_Setup2):
 608:src/menu.c    ****     case (M_Solve):
 609:src/menu.c    ****     case (M_Program):
 610:src/menu.c    ****       i = M_C_Lock;
 611:src/menu.c    ****     default:;
 612:src/menu.c    ****     }
 613:src/menu.c    ****   if (current_menu == M_User) {
 614:src/menu.c    ****     return UserMenu;
 615:src/menu.c    ****   }
 616:src/menu.c    ****   else {
 617:src/menu.c    ****     return Menus[i];
 1365              		.loc 1 617 5 is_stmt 1 view .LVU377
 1366              		.loc 1 617 17 is_stmt 0 view .LVU378
 1367 003a 1248     		ldr	r0, .L151+8
 1368 003c D022     		movs	r2, #208
 1369 003e 02FB0101 		mla	r1, r2, r1, r0
 1370              	.LVL93:
 1371              		.loc 1 617 17 view .LVU379
 1372 0042 1846     		mov	r0, r3
 1373 0044 FFF7FEFF 		bl	memcpy
 1374              	.LVL94:
 1375              		.loc 1 617 17 view .LVU380
 1376 0048 0346     		mov	r3, r0
 618:src/menu.c    ****   }
 619:src/menu.c    **** }
 1377              		.loc 1 619 1 view .LVU381
 1378 004a 1846     		mov	r0, r3
 1379 004c 10BD     		pop	{r4, pc}
 1380              	.LVL95:
 1381              	.L138:
 584:src/menu.c    ****     switch (current_menu) {
 1382              		.loc 1 584 7 view .LVU382
 1383 004e 1321     		movs	r1, #19
 1384              	.LVL96:
 584:src/menu.c    ****     switch (current_menu) {
 1385              		.loc 1 584 7 view .LVU383
 1386 0050 F3E7     		b	.L137
 1387              	.LVL97:
 1388              	.L132:
 611:src/menu.c    ****     }
 1389              		.loc 1 611 13 is_stmt 1 view .LVU384
 613:src/menu.c    ****     return UserMenu;
 1390              		.loc 1 613 3 view .LVU385
ARM GAS  /tmp/cc1aojQ3.s 			page 42


 613:src/menu.c    ****     return UserMenu;
 1391              		.loc 1 613 6 is_stmt 0 view .LVU386
 1392 0052 6329     		cmp	r1, #99
 1393 0054 F1D1     		bne	.L137
 614:src/menu.c    ****   }
 1394              		.loc 1 614 5 is_stmt 1 view .LVU387
 614:src/menu.c    ****   }
 1395              		.loc 1 614 12 is_stmt 0 view .LVU388
 1396 0056 0C49     		ldr	r1, .L151+12
 1397              	.LVL98:
 614:src/menu.c    ****   }
 1398              		.loc 1 614 12 view .LVU389
 1399 0058 D022     		movs	r2, #208
 1400 005a 1846     		mov	r0, r3
 1401 005c FFF7FEFF 		bl	memcpy
 1402              	.LVL99:
 614:src/menu.c    ****   }
 1403              		.loc 1 614 12 view .LVU390
 1404 0060 0346     		mov	r3, r0
 1405              		.loc 1 619 1 view .LVU391
 1406 0062 1846     		mov	r0, r3
 1407 0064 10BD     		pop	{r4, pc}
 1408              	.LVL100:
 1409              	.L133:
 599:src/menu.c    ****       break;
 1410              		.loc 1 599 7 is_stmt 1 view .LVU392
 600:src/menu.c    ****     case (M_Misc):
 1411              		.loc 1 600 7 view .LVU393
 599:src/menu.c    ****       break;
 1412              		.loc 1 599 9 is_stmt 0 view .LVU394
 1413 0066 1621     		movs	r1, #22
 600:src/menu.c    ****     case (M_Misc):
 1414              		.loc 1 600 7 view .LVU395
 1415 0068 E7E7     		b	.L137
 1416              	.LVL101:
 1417              	.L136:
 596:src/menu.c    ****       break;
 1418              		.loc 1 596 7 is_stmt 1 view .LVU396
 597:src/menu.c    ****     case (M_Blank2):
 1419              		.loc 1 597 7 view .LVU397
 596:src/menu.c    ****       break;
 1420              		.loc 1 596 9 is_stmt 0 view .LVU398
 1421 006a 1521     		movs	r1, #21
 597:src/menu.c    ****     case (M_Blank2):
 1422              		.loc 1 597 7 view .LVU399
 1423 006c E5E7     		b	.L137
 1424              	.LVL102:
 1425              	.L139:
 602:src/menu.c    ****       break;
 1426              		.loc 1 602 7 is_stmt 1 view .LVU400
 603:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1427              		.loc 1 603 7 view .LVU401
 602:src/menu.c    ****       break;
 1428              		.loc 1 602 9 is_stmt 0 view .LVU402
 1429 006e 1721     		movs	r1, #23
 603:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1430              		.loc 1 603 7 view .LVU403
ARM GAS  /tmp/cc1aojQ3.s 			page 43


 1431 0070 E3E7     		b	.L137
 1432              	.LVL103:
 1433              	.L135:
 610:src/menu.c    ****     default:;
 1434              		.loc 1 610 7 is_stmt 1 view .LVU404
 610:src/menu.c    ****     default:;
 1435              		.loc 1 610 9 is_stmt 0 view .LVU405
 1436 0072 1121     		movs	r1, #17
 1437 0074 E1E7     		b	.L137
 1438              	.LVL104:
 1439              	.L140:
 587:src/menu.c    ****       break;
 1440              		.loc 1 587 9 view .LVU406
 1441 0076 1221     		movs	r1, #18
 1442              	.LVL105:
 587:src/menu.c    ****       break;
 1443              		.loc 1 587 9 view .LVU407
 1444 0078 DFE7     		b	.L137
 1445              	.L152:
 1446 007a 00BF     		.align	2
 1447              	.L151:
 1448 007c 00000000 		.word	main_ram
 1449 0080 00000000 		.word	.LANCHOR1
 1450 0084 00000000 		.word	Menus
 1451 0088 00000000 		.word	.LANCHOR4
 1452              		.cfi_endproc
 1453              	.LFE15:
 1455              		.section	.text.display_menu,"ax",%progbits
 1456              		.align	1
 1457              		.p2align 2,,3
 1458              		.global	display_menu
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu fpv4-sp-d16
 1464              	display_menu:
 1465              	.LFB16:
 620:src/menu.c    **** 
 621:src/menu.c    **** void display_menu (struct _menu Ref) {
 1466              		.loc 1 621 38 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 208, pretend = 16, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 622:src/menu.c    ****   int len = 0;
 1470              		.loc 1 622 3 view .LVU409
 1471              	.LVL106:
 623:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1472              		.loc 1 623 3 view .LVU410
 621:src/menu.c    ****   int len = 0;
 1473              		.loc 1 621 38 is_stmt 0 view .LVU411
 1474 0000 84B0     		sub	sp, sp, #16
 1475              		.cfi_def_cfa_offset 16
 1476 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1477              		.cfi_def_cfa_offset 52
 1478              		.cfi_offset 4, -52
 1479              		.cfi_offset 5, -48
 1480              		.cfi_offset 6, -44
ARM GAS  /tmp/cc1aojQ3.s 			page 44


 1481              		.cfi_offset 7, -40
 1482              		.cfi_offset 8, -36
 1483              		.cfi_offset 9, -32
 1484              		.cfi_offset 10, -28
 1485              		.cfi_offset 11, -24
 1486              		.cfi_offset 14, -20
 1487 0006 83B0     		sub	sp, sp, #12
 1488              		.cfi_def_cfa_offset 64
 1489              		.loc 1 623 3 view .LVU412
 1490 0008 0024     		movs	r4, #0
 621:src/menu.c    ****   int len = 0;
 1491              		.loc 1 621 38 view .LVU413
 1492 000a 0CAD     		add	r5, sp, #48
 1493 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1494              		.loc 1 623 3 view .LVU414
 1495 0010 3E4E     		ldr	r6, .L171
 1496 0012 0094     		str	r4, [sp]
 1497 0014 2046     		mov	r0, r4
 1498 0016 3423     		movs	r3, #52
 1499 0018 4FF4C872 		mov	r2, #400
 1500 001c BC21     		movs	r1, #188
 1501 001e B047     		blx	r6
 1502              	.LVL107:
 624:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1503              		.loc 1 624 3 is_stmt 1 view .LVU415
 1504 0020 3B4D     		ldr	r5, .L171+4
 1505 0022 FF23     		movs	r3, #255
 1506 0024 0093     		str	r3, [sp]
 1507 0026 4FF4C872 		mov	r2, #400
 1508 002a 0123     		movs	r3, #1
 1509 002c BC21     		movs	r1, #188
 1510 002e 2046     		mov	r0, r4
 1511 0030 B047     		blx	r6
 1512              	.LVL108:
 625:src/menu.c    ****   //Clear previous menu
 626:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1513              		.loc 1 626 3 view .LVU416
 1514              	.LBB89:
 1515              		.loc 1 626 8 view .LVU417
 1516              		.loc 1 626 21 view .LVU418
 627:src/menu.c    ****     mdots[col][0] = 0;
 1517              		.loc 1 627 19 is_stmt 0 view .LVU419
 1518 0032 2246     		mov	r2, r4
 1519 0034 05F5C871 		add	r1, r5, #400
 1520              	.LBE89:
 624:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1521              		.loc 1 624 3 view .LVU420
 1522 0038 2B46     		mov	r3, r5
 1523              	.LVL109:
 1524              	.L154:
 1525              	.LBB90:
 1526              		.loc 1 627 5 is_stmt 1 discriminator 3 view .LVU421
 1527              		.loc 1 627 19 is_stmt 0 discriminator 3 view .LVU422
 1528 003a 1A70     		strb	r2, [r3]
 628:src/menu.c    ****     mdots[col][1] = 0;
 1529              		.loc 1 628 5 is_stmt 1 discriminator 3 view .LVU423
 1530              		.loc 1 628 19 is_stmt 0 discriminator 3 view .LVU424
ARM GAS  /tmp/cc1aojQ3.s 			page 45


 1531 003c 5A70     		strb	r2, [r3, #1]
 626:src/menu.c    ****     mdots[col][0] = 0;
 1532              		.loc 1 626 32 is_stmt 1 discriminator 3 view .LVU425
 626:src/menu.c    ****     mdots[col][0] = 0;
 1533              		.loc 1 626 21 discriminator 3 view .LVU426
 1534 003e 0233     		adds	r3, r3, #2
 626:src/menu.c    ****     mdots[col][0] = 0;
 1535              		.loc 1 626 3 is_stmt 0 discriminator 3 view .LVU427
 1536 0040 9942     		cmp	r1, r3
 1537 0042 FAD1     		bne	.L154
 1538 0044 14AE     		add	r6, sp, #80
 626:src/menu.c    ****     mdots[col][0] = 0;
 1539              		.loc 1 626 3 view .LVU428
 1540 0046 0024     		movs	r4, #0
 1541              	.LVL110:
 1542              	.L155:
 626:src/menu.c    ****     mdots[col][0] = 0;
 1543              		.loc 1 626 3 view .LVU429
 1544              	.LBE90:
 1545              	.LBB91:
 629:src/menu.c    ****   }
 630:src/menu.c    **** 
 631:src/menu.c    ****   // Draw menu items
 632:src/menu.c    ****   // 
 633:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 634:src/menu.c    ****     /*
 635:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 636:src/menu.c    ****     */
 637:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 638:src/menu.c    ****     // Unshifted first
 639:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1546              		.loc 1 639 7 is_stmt 1 view .LVU430
 1547              		.loc 1 639 13 is_stmt 0 view .LVU431
 1548 0048 0021     		movs	r1, #0
 1549 004a 3046     		mov	r0, r6
 1550 004c FFF7FEFF 		bl	pixel_length
 1551              	.LVL111:
 640:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1552              		.loc 1 640 7 is_stmt 1 view .LVU432
 1553              		.loc 1 640 73 is_stmt 0 view .LVU433
 1554 0050 C0F12000 		rsb	r0, r0, #32
 1555              	.LVL112:
 1556              		.loc 1 640 79 view .LVU434
 1557 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1558              		.loc 1 640 7 view .LVU435
 1559 0058 04EB6001 		add	r1, r4, r0, asr #1
 1560 005c 0022     		movs	r2, #0
 1561 005e 3046     		mov	r0, r6
 1562 0060 06F10807 		add	r7, r6, #8
 1563 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1564              	.LVL113:
 641:src/menu.c    ****       // Now shifted ...	
 642:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1565              		.loc 1 642 7 is_stmt 1 view .LVU436
 1566              		.loc 1 642 13 is_stmt 0 view .LVU437
 1567 0068 0021     		movs	r1, #0
 1568 006a 3846     		mov	r0, r7
ARM GAS  /tmp/cc1aojQ3.s 			page 46


 1569 006c FFF7FEFF 		bl	pixel_length
 1570              	.LVL114:
 643:src/menu.c    ****       len = item*32 + (32-len)/2;
 1571              		.loc 1 643 7 is_stmt 1 view .LVU438
 1572              		.loc 1 643 26 is_stmt 0 view .LVU439
 1573 0070 C0F12000 		rsb	r0, r0, #32
 1574              	.LVL115:
 1575              		.loc 1 643 31 view .LVU440
 1576 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1577              	.LVL116:
 644:src/menu.c    ****       if (len<0) len = 0;
 1578              		.loc 1 644 7 is_stmt 1 view .LVU441
 643:src/menu.c    ****       len = item*32 + (32-len)/2;
 1579              		.loc 1 643 11 is_stmt 0 view .LVU442
 1580 0078 04EB6001 		add	r1, r4, r0, asr #1
 1581              	.LVL117:
 643:src/menu.c    ****       len = item*32 + (32-len)/2;
 1582              		.loc 1 643 11 view .LVU443
 1583 007c C729     		cmp	r1, #199
 1584 007e A8BF     		it	ge
 1585 0080 C721     		movge	r1, #199
 1586              	.LVL118:
 645:src/menu.c    ****       if (len>199) len = 199;
 646:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1587              		.loc 1 646 7 is_stmt 1 view .LVU444
 1588 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1589              	.LVL119:
 1590              		.loc 1 646 7 is_stmt 0 view .LVU445
 1591 0086 3846     		mov	r0, r7
 1592 0088 2034     		adds	r4, r4, #32
 1593 008a 0122     		movs	r2, #1
 1594 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1595              	.LVL120:
 633:src/menu.c    ****     /*
 1596              		.loc 1 633 32 is_stmt 1 view .LVU446
 633:src/menu.c    ****     /*
 1597              		.loc 1 633 22 view .LVU447
 633:src/menu.c    ****     /*
 1598              		.loc 1 633 3 is_stmt 0 view .LVU448
 1599 0090 C02C     		cmp	r4, #192
 1600 0092 06F12006 		add	r6, r6, #32
 1601 0096 D7D1     		bne	.L155
 1602 0098 1E4E     		ldr	r6, .L171+8
 1603              	.LBE91:
 1604              	.LBB92:
 1605              	.LBB93:
 647:src/menu.c    ****   }
 648:src/menu.c    **** 
 649:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 653:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1606              		.loc 1 653 2 view .LVU449
 1607 009a DFF87090 		ldr	r9, .L171
 1608 009e C5F1040A 		rsb	r10, r5, #4
 1609 00a2 06F5C47B 		add	fp, r6, #392
ARM GAS  /tmp/cc1aojQ3.s 			page 47


 1610              	.LBE93:
 1611              	.LBE92:
 1612              	.LBB95:
 633:src/menu.c    ****     /*
 1613              		.loc 1 633 3 view .LVU450
 1614 00a6 771E     		subs	r7, r6, #1
 1615              	.LBE95:
 1616              	.LBB96:
 1617              	.LBB94:
 1618              		.loc 1 653 2 view .LVU451
 1619 00a8 4FF0FF08 		mov	r8, #255
 1620              	.L156:
 1621              	.LVL121:
 650:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1622              		.loc 1 650 23 is_stmt 1 view .LVU452
 1623 00ac 0AEB0705 		add	r5, r10, r7
 650:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1624              		.loc 1 650 14 is_stmt 0 view .LVU453
 1625 00b0 0024     		movs	r4, #0
 1626              	.LVL122:
 1627              	.L159:
 651:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1628              		.loc 1 651 7 is_stmt 1 view .LVU454
 1629              		.loc 1 653 2 view .LVU455
 651:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1630              		.loc 1 651 22 is_stmt 0 view .LVU456
 1631 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 651:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1632              		.loc 1 651 40 view .LVU457
 1633 00b6 2241     		asrs	r2, r2, r4
 1634              		.loc 1 653 2 view .LVU458
 1635 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1636 00bc 0323     		movs	r3, #3
 651:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1637              		.loc 1 651 10 view .LVU459
 1638 00be 12F0010F 		tst	r2, #1
 1639              		.loc 1 653 2 view .LVU460
 1640 00c2 01F1E901 		add	r1, r1, #233
 1641 00c6 1A46     		mov	r2, r3
 1642 00c8 2846     		mov	r0, r5
 651:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1643              		.loc 1 651 10 view .LVU461
 1644 00ca 02D0     		beq	.L157
 1645              		.loc 1 653 2 view .LVU462
 1646 00cc CDF80080 		str	r8, [sp]
 1647 00d0 C847     		blx	r9
 1648              	.LVL123:
 1649              	.L157:
 654:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1650              		.loc 1 654 7 is_stmt 1 view .LVU463
 655:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 656:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1651              		.loc 1 656 2 view .LVU464
 654:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1652              		.loc 1 654 22 is_stmt 0 view .LVU465
 1653 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 654:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
ARM GAS  /tmp/cc1aojQ3.s 			page 48


 1654              		.loc 1 654 40 view .LVU466
 1655 00d4 2241     		asrs	r2, r2, r4
 1656              		.loc 1 656 2 view .LVU467
 1657 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1658 00da 0323     		movs	r3, #3
 654:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1659              		.loc 1 654 10 view .LVU468
 1660 00dc 12F0010F 		tst	r2, #1
 1661              		.loc 1 656 2 view .LVU469
 1662 00e0 01F1D001 		add	r1, r1, #208
 1663 00e4 1A46     		mov	r2, r3
 1664 00e6 04F10104 		add	r4, r4, #1
 1665              	.LVL124:
 1666              		.loc 1 656 2 view .LVU470
 1667 00ea 2846     		mov	r0, r5
 654:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1668              		.loc 1 654 10 view .LVU471
 1669 00ec 02D0     		beq	.L158
 1670              		.loc 1 656 2 view .LVU472
 1671 00ee CDF80080 		str	r8, [sp]
 1672 00f2 C847     		blx	r9
 1673              	.LVL125:
 1674              	.L158:
 650:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1675              		.loc 1 650 32 is_stmt 1 discriminator 2 view .LVU473
 650:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1676              		.loc 1 650 23 discriminator 2 view .LVU474
 650:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1677              		.loc 1 650 5 is_stmt 0 discriminator 2 view .LVU475
 1678 00f4 062C     		cmp	r4, #6
 1679 00f6 DCD1     		bne	.L159
 1680              	.LBE94:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1681              		.loc 1 649 32 is_stmt 1 discriminator 2 view .LVU476
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1682              		.loc 1 649 21 discriminator 2 view .LVU477
 1683 00f8 0236     		adds	r6, r6, #2
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1684              		.loc 1 649 3 is_stmt 0 discriminator 2 view .LVU478
 1685 00fa B345     		cmp	fp, r6
 1686 00fc 07F10207 		add	r7, r7, #2
 1687 0100 D4D1     		bne	.L156
 1688              	.LBE96:
 657:src/menu.c    ****     }
 658:src/menu.c    ****   }
 659:src/menu.c    **** }
 1689              		.loc 1 659 1 view .LVU479
 1690 0102 03B0     		add	sp, sp, #12
 1691              		.cfi_def_cfa_offset 52
 1692              		@ sp needed
 1693 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1694              		.cfi_restore 14
 1695              		.cfi_restore 11
 1696              		.cfi_restore 10
 1697              		.cfi_restore 9
 1698              		.cfi_restore 8
 1699              		.cfi_restore 7
ARM GAS  /tmp/cc1aojQ3.s 			page 49


 1700              		.cfi_restore 6
 1701              		.cfi_restore 5
 1702              		.cfi_restore 4
 1703              		.cfi_def_cfa_offset 16
 1704              	.LVL126:
 1705              		.loc 1 659 1 view .LVU480
 1706 0108 04B0     		add	sp, sp, #16
 1707              		.cfi_def_cfa_offset 0
 1708 010a 7047     		bx	lr
 1709              	.L172:
 1710              		.align	2
 1711              	.L171:
 1712 010c 3D020008 		.word	134218301
 1713 0110 00000000 		.word	.LANCHOR0
 1714 0114 01000000 		.word	.LANCHOR0+1
 1715              		.cfi_endproc
 1716              	.LFE16:
 1718              		.section	.text.display_current_menu,"ax",%progbits
 1719              		.align	1
 1720              		.p2align 2,,3
 1721              		.global	display_current_menu
 1722              		.syntax unified
 1723              		.thumb
 1724              		.thumb_func
 1725              		.fpu fpv4-sp-d16
 1727              	display_current_menu:
 1728              	.LFB11:
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1729              		.loc 1 162 30 is_stmt 1 view -0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 208
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/menu.c    **** }
 1733              		.loc 1 163 3 view .LVU482
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1734              		.loc 1 162 30 is_stmt 0 view .LVU483
 1735 0000 10B5     		push	{r4, lr}
 1736              		.cfi_def_cfa_offset 8
 1737              		.cfi_offset 4, -8
 1738              		.cfi_offset 14, -4
 1739 0002 E4B0     		sub	sp, sp, #400
 1740              		.cfi_def_cfa_offset 408
 163:src/menu.c    **** }
 1741              		.loc 1 163 3 view .LVU484
 1742 0004 30AC     		add	r4, sp, #192
 1743 0006 2046     		mov	r0, r4
 1744 0008 FFF7FEFF 		bl	get_current_menu_ref
 1745              	.LVL127:
 1746 000c 34A9     		add	r1, sp, #208
 1747 000e C022     		movs	r2, #192
 1748 0010 6846     		mov	r0, sp
 1749 0012 FFF7FEFF 		bl	memcpy
 1750              	.LVL128:
 1751 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1752 001a FFF7FEFF 		bl	display_menu
 1753              	.LVL129:
 164:src/menu.c    **** 
ARM GAS  /tmp/cc1aojQ3.s 			page 50


 1754              		.loc 1 164 1 view .LVU485
 1755 001e 64B0     		add	sp, sp, #400
 1756              		.cfi_def_cfa_offset 8
 1757              		@ sp needed
 1758 0020 10BD     		pop	{r4, pc}
 1759              		.cfi_endproc
 1760              	.LFE11:
 1762 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1763              		.align	1
 1764              		.p2align 2,,3
 1765              		.global	all_menu_dots
 1766              		.syntax unified
 1767              		.thumb
 1768              		.thumb_func
 1769              		.fpu fpv4-sp-d16
 1771              	all_menu_dots:
 1772              	.LFB17:
 660:src/menu.c    **** 
 661:src/menu.c    **** void all_menu_dots () {
 1773              		.loc 1 661 23 is_stmt 1 view -0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1777              		.loc 1 662 3 view .LVU487
 1778              	.LBB97:
 1779              		.loc 1 662 8 view .LVU488
 1780              	.LVL130:
 1781              		.loc 1 662 21 view .LVU489
 1782              	.LBE97:
 661:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1783              		.loc 1 661 23 is_stmt 0 view .LVU490
 1784 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1785              		.cfi_def_cfa_offset 20
 1786              		.cfi_offset 4, -20
 1787              		.cfi_offset 5, -16
 1788              		.cfi_offset 6, -12
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791              	.LBB101:
 1792              	.LBB98:
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 664:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1793              		.loc 1 664 2 view .LVU491
 1794 0002 0D4E     		ldr	r6, .L181
 1795              	.LBE98:
 1796              	.LBE101:
 661:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1797              		.loc 1 661 23 view .LVU492
 1798 0004 83B0     		sub	sp, sp, #12
 1799              		.cfi_def_cfa_offset 32
 661:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1800              		.loc 1 661 23 view .LVU493
 1801 0006 0025     		movs	r5, #0
 1802              	.LBB102:
 1803              	.LBB99:
 1804              		.loc 1 664 2 view .LVU494
ARM GAS  /tmp/cc1aojQ3.s 			page 51


 1805 0008 FF27     		movs	r7, #255
 1806              	.LVL131:
 1807              	.L176:
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1808              		.loc 1 663 23 is_stmt 1 view .LVU495
 1809              	.LBE99:
 1810              	.LBE102:
 661:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1811              		.loc 1 661 23 is_stmt 0 view .LVU496
 1812 000a E924     		movs	r4, #233
 1813              	.LVL132:
 1814              	.L177:
 1815              	.LBB103:
 1816              	.LBB100:
 1817              		.loc 1 664 2 is_stmt 1 discriminator 3 view .LVU497
 1818 000c 0323     		movs	r3, #3
 1819 000e 1A46     		mov	r2, r3
 1820 0010 2146     		mov	r1, r4
 1821 0012 2846     		mov	r0, r5
 1822 0014 0097     		str	r7, [sp]
 1823 0016 B047     		blx	r6
 1824              	.LVL133:
 665:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1825              		.loc 1 665 2 discriminator 3 view .LVU498
 1826 0018 0323     		movs	r3, #3
 1827 001a A4F11901 		sub	r1, r4, #25
 1828 001e 0097     		str	r7, [sp]
 1829 0020 1A46     		mov	r2, r3
 1830 0022 2846     		mov	r0, r5
 1831 0024 033C     		subs	r4, r4, #3
 1832 0026 B047     		blx	r6
 1833              	.LVL134:
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1834              		.loc 1 663 32 discriminator 3 view .LVU499
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1835              		.loc 1 663 23 discriminator 3 view .LVU500
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1836              		.loc 1 663 5 is_stmt 0 discriminator 3 view .LVU501
 1837 0028 D72C     		cmp	r4, #215
 1838 002a EFD1     		bne	.L177
 1839              	.LBE100:
 662:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1840              		.loc 1 662 32 is_stmt 1 discriminator 2 view .LVU502
 662:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1841              		.loc 1 662 21 discriminator 2 view .LVU503
 1842 002c 0235     		adds	r5, r5, #2
 662:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1843              		.loc 1 662 3 is_stmt 0 discriminator 2 view .LVU504
 1844 002e B5F5C87F 		cmp	r5, #400
 1845 0032 EAD1     		bne	.L176
 1846              	.LBE103:
 666:src/menu.c    ****     }
 667:src/menu.c    ****   }
 668:src/menu.c    **** }  
 1847              		.loc 1 668 1 view .LVU505
 1848 0034 03B0     		add	sp, sp, #12
 1849              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc1aojQ3.s 			page 52


 1850              		@ sp needed
 1851 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1852              	.L182:
 1853              		.align	2
 1854              	.L181:
 1855 0038 3D020008 		.word	134218301
 1856              		.cfi_endproc
 1857              	.LFE17:
 1859              		.section	.text.umen_store,"ax",%progbits
 1860              		.align	1
 1861              		.p2align 2,,3
 1862              		.global	umen_store
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
 1866              		.fpu fpv4-sp-d16
 1868              	umen_store:
 1869              	.LVL135:
 1870              	.LFB20:
 669:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 670:src/menu.c    **** 
 671:src/menu.c    **** void build_user_menu(void){
 672:src/menu.c    ****   // find the label 'MNU'
 673:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 674:src/menu.c    ****    build_user_menu_from_program (lbl);
 675:src/menu.c    **** }
 676:src/menu.c    **** 
 677:src/menu.c    **** void build_user_menu_from_program(int lbl)
 678:src/menu.c    **** {
 679:src/menu.c    ****   // find the label 'MNU'
 680:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 681:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 682:src/menu.c    ****   int i=0;
 683:src/menu.c    ****   s_opcode op;
 684:src/menu.c    ****   opcode opc;
 685:src/menu.c    ****   char buf1[16];
 686:src/menu.c    ****   char *p = buf1;
 687:src/menu.c    ****   char c;
 688:src/menu.c    ****   int finished = 0;
 689:src/menu.c    **** 
 690:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 695:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 696:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 697:src/menu.c    ****   }
 698:src/menu.c    ****   while (pc && i < 12) {
 699:src/menu.c    **** 
 700:src/menu.c    ****     pc = do_inc(pc, 0);
 701:src/menu.c    ****     opc = getprog(pc);
 702:src/menu.c    ****     op = (s_opcode) opc;
 703:src/menu.c    **** 
 704:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 705:src/menu.c    ****       break;
 706:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
ARM GAS  /tmp/cc1aojQ3.s 			page 53


 707:src/menu.c    ****       if (i==4) {
 708:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 710:src/menu.c    ****       }
 711:src/menu.c    ****       else if (i==5) {
 712:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 714:src/menu.c    ****       }
 715:src/menu.c    ****       i += 1;
 716:src/menu.c    ****       continue;
 717:src/menu.c    ****     }
 718:src/menu.c    **** 
 719:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 722:src/menu.c    **** 	i++;
 723:src/menu.c    ****     	p = buf1;
 724:src/menu.c    **** 	finished = 0;
 725:src/menu.c    ****       } // ..and start reading the new alpha
 726:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 729:src/menu.c    **** 	*p++ = c;
 730:src/menu.c    **** 	c = opc>>24;
 731:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 732:src/menu.c    **** 	  *p++ = c;
 733:src/menu.c    ****       }
 734:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 736:src/menu.c    **** 	finished = 1;
 737:src/menu.c    ****       }
 738:src/menu.c    ****     }
 739:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 740:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 741:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 745:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 746:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 747:src/menu.c    **** 	  }
 748:src/menu.c    **** 	  else {
 749:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 750:src/menu.c    **** 	  }
 751:src/menu.c    **** 	}
 752:src/menu.c    **** 	else {
 753:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 754:src/menu.c    **** 	}
 755:src/menu.c    ****       }
 756:src/menu.c    ****       else { // there is an alpha label to use, so reset
 757:src/menu.c    **** 	p = buf1;
 758:src/menu.c    **** 	finished = 0;
 759:src/menu.c    ****       }
 760:src/menu.c    ****       umen_store (i, opc, buf1);
 761:src/menu.c    ****       i++;
 762:src/menu.c    ****     }
 763:src/menu.c    ****   }
ARM GAS  /tmp/cc1aojQ3.s 			page 54


 764:src/menu.c    **** }
 765:src/menu.c    **** 
 766:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1871              		.loc 1 766 49 is_stmt 1 view -0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 767:src/menu.c    **** #pragma GCC diagnostic push
 768:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 769:src/menu.c    ****     if (i<6) {
 1875              		.loc 1 769 5 view .LVU507
 1876              		.loc 1 769 8 is_stmt 0 view .LVU508
 1877 0000 0528     		cmp	r0, #5
 766:src/menu.c    **** #pragma GCC diagnostic push
 1878              		.loc 1 766 49 view .LVU509
 1879 0002 70B5     		push	{r4, r5, r6, lr}
 1880              		.cfi_def_cfa_offset 16
 1881              		.cfi_offset 4, -16
 1882              		.cfi_offset 5, -12
 1883              		.cfi_offset 6, -8
 1884              		.cfi_offset 14, -4
 766:src/menu.c    **** #pragma GCC diagnostic push
 1885              		.loc 1 766 49 view .LVU510
 1886 0004 0D46     		mov	r5, r1
 1887 0006 0446     		mov	r4, r0
 1888 0008 1146     		mov	r1, r2
 1889              	.LVL136:
 1890              		.loc 1 769 8 view .LVU511
 1891 000a 0FDC     		bgt	.L184
 1892              	.LBB109:
 770:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1893              		.loc 1 770 7 is_stmt 1 view .LVU512
 1894              		.loc 1 770 31 is_stmt 0 view .LVU513
 1895 000c 104E     		ldr	r6, .L187
 1896 000e 0130     		adds	r0, r0, #1
 1897              	.LVL137:
 771:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1898              		.loc 1 771 42 view .LVU514
 1899 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1900              	.LVL138:
 770:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1901              		.loc 1 770 7 view .LVU515
 1902 0014 0722     		movs	r2, #7
 1903              	.LVL139:
 770:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1904              		.loc 1 770 7 view .LVU516
 1905 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1906              	.LVL140:
 770:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1907              		.loc 1 770 7 view .LVU517
 1908 001a FFF7FEFF 		bl	strncpy
 1909              	.LVL141:
 1910              		.loc 1 771 7 is_stmt 1 view .LVU518
 1911              		.loc 1 771 42 is_stmt 0 view .LVU519
 1912 001e 0022     		movs	r2, #0
 772:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1913              		.loc 1 772 34 view .LVU520
ARM GAS  /tmp/cc1aojQ3.s 			page 55


 1914 0020 3423     		movs	r3, #52
 771:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1915              		.loc 1 771 42 view .LVU521
 1916 0022 84F82720 		strb	r2, [r4, #39]
 1917              		.loc 1 772 7 is_stmt 1 view .LVU522
 1918              		.loc 1 772 34 is_stmt 0 view .LVU523
 1919 0026 2374     		strb	r3, [r4, #16]
 1920 0028 6561     		str	r5, [r4, #20]
 1921              	.LBE109:
 773:src/menu.c    ****     }
 774:src/menu.c    ****     else {
 775:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 778:src/menu.c    ****     }
 779:src/menu.c    **** #pragma GCC diagnostic pop
 780:src/menu.c    **** }  
 1922              		.loc 1 780 1 view .LVU524
 1923 002a 70BD     		pop	{r4, r5, r6, pc}
 1924              	.LVL142:
 1925              	.L184:
 1926              	.LBB110:
 1927              	.LBI110:
 766:src/menu.c    **** #pragma GCC diagnostic push
 1928              		.loc 1 766 6 is_stmt 1 view .LVU525
 1929              	.LBB111:
 1930              	.LBB112:
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1931              		.loc 1 775 7 view .LVU526
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1932              		.loc 1 775 30 is_stmt 0 view .LVU527
 1933 002c 841F     		subs	r4, r0, #6
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1934              		.loc 1 775 33 view .LVU528
 1935 002e 084E     		ldr	r6, .L187
 1936 0030 6401     		lsls	r4, r4, #5
 1937 0032 04F12800 		add	r0, r4, #40
 1938              	.LVL143:
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1939              		.loc 1 775 7 view .LVU529
 1940 0036 0722     		movs	r2, #7
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1941              		.loc 1 776 42 view .LVU530
 1942 0038 3444     		add	r4, r4, r6
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1943              		.loc 1 775 7 view .LVU531
 1944 003a 3044     		add	r0, r0, r6
 1945 003c FFF7FEFF 		bl	strncpy
 1946              	.LVL144:
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1947              		.loc 1 776 7 is_stmt 1 view .LVU532
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1948              		.loc 1 776 42 is_stmt 0 view .LVU533
 1949 0040 0022     		movs	r2, #0
 777:src/menu.c    ****     }
 1950              		.loc 1 777 34 view .LVU534
 1951 0042 3423     		movs	r3, #52
ARM GAS  /tmp/cc1aojQ3.s 			page 56


 776:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1952              		.loc 1 776 42 view .LVU535
 1953 0044 84F82F20 		strb	r2, [r4, #47]
 777:src/menu.c    ****     }
 1954              		.loc 1 777 7 is_stmt 1 view .LVU536
 1955              	.LVL145:
 777:src/menu.c    ****     }
 1956              		.loc 1 777 34 is_stmt 0 view .LVU537
 1957 0048 2376     		strb	r3, [r4, #24]
 1958 004a E561     		str	r5, [r4, #28]
 1959              	.LBE112:
 1960              	.LBE111:
 1961              	.LBE110:
 1962              		.loc 1 780 1 view .LVU538
 1963 004c 70BD     		pop	{r4, r5, r6, pc}
 1964              	.LVL146:
 1965              	.L188:
 1966              		.loc 1 780 1 view .LVU539
 1967 004e 00BF     		.align	2
 1968              	.L187:
 1969 0050 00000000 		.word	.LANCHOR4
 1970              		.cfi_endproc
 1971              	.LFE20:
 1973              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1974              		.align	1
 1975              		.p2align 2,,3
 1976              		.global	build_user_menu_from_program
 1977              		.syntax unified
 1978              		.thumb
 1979              		.thumb_func
 1980              		.fpu fpv4-sp-d16
 1982              	build_user_menu_from_program:
 1983              	.LVL147:
 1984              	.LFB19:
 678:src/menu.c    ****   // find the label 'MNU'
 1985              		.loc 1 678 1 is_stmt 1 view -0
 1986              		.cfi_startproc
 1987              		@ args = 0, pretend = 0, frame = 16
 1988              		@ frame_needed = 0, uses_anonymous_args = 0
 681:src/menu.c    ****   int i=0;
 1989              		.loc 1 681 3 view .LVU541
 678:src/menu.c    ****   // find the label 'MNU'
 1990              		.loc 1 678 1 is_stmt 0 view .LVU542
 1991 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1992              		.cfi_def_cfa_offset 36
 1993              		.cfi_offset 4, -36
 1994              		.cfi_offset 5, -32
 1995              		.cfi_offset 6, -28
 1996              		.cfi_offset 7, -24
 1997              		.cfi_offset 8, -20
 1998              		.cfi_offset 9, -16
 1999              		.cfi_offset 10, -12
 2000              		.cfi_offset 11, -8
 2001              		.cfi_offset 14, -4
 681:src/menu.c    ****   int i=0;
 2002              		.loc 1 681 21 view .LVU543
 2003 0004 0021     		movs	r1, #0
ARM GAS  /tmp/cc1aojQ3.s 			page 57


 678:src/menu.c    ****   // find the label 'MNU'
 2004              		.loc 1 678 1 view .LVU544
 2005 0006 85B0     		sub	sp, sp, #20
 2006              		.cfi_def_cfa_offset 56
 681:src/menu.c    ****   int i=0;
 2007              		.loc 1 681 21 view .LVU545
 2008 0008 FFF7FEFF 		bl	findmultilbl
 2009              	.LVL148:
 681:src/menu.c    ****   int i=0;
 2010              		.loc 1 681 21 view .LVU546
 2011 000c 5C4B     		ldr	r3, .L240
 2012 000e 0546     		mov	r5, r0
 2013              	.LVL149:
 682:src/menu.c    ****   s_opcode op;
 2014              		.loc 1 682 3 is_stmt 1 view .LVU547
 683:src/menu.c    ****   opcode opc;
 2015              		.loc 1 683 3 view .LVU548
 684:src/menu.c    ****   char buf1[16];
 2016              		.loc 1 684 3 view .LVU549
 685:src/menu.c    ****   char *p = buf1;
 2017              		.loc 1 685 3 view .LVU550
 686:src/menu.c    ****   char c;
 2018              		.loc 1 686 3 view .LVU551
 687:src/menu.c    ****   int finished = 0;
 2019              		.loc 1 687 3 view .LVU552
 688:src/menu.c    **** 
 2020              		.loc 1 688 3 view .LVU553
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2021              		.loc 1 690 3 view .LVU554
 2022              	.LBB113:
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2023              		.loc 1 690 8 view .LVU555
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2024              		.loc 1 690 19 view .LVU556
 691:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2025              		.loc 1 691 43 is_stmt 0 view .LVU557
 2026 0010 0022     		movs	r2, #0
 2027 0012 03F1C000 		add	r0, r3, #192
 2028              	.LVL150:
 693:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2029              		.loc 1 693 42 view .LVU558
 2030 0016 2E21     		movs	r1, #46
 2031              	.LVL151:
 2032              	.L190:
 691:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2033              		.loc 1 691 7 is_stmt 1 discriminator 3 view .LVU559
 691:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2034              		.loc 1 691 43 is_stmt 0 discriminator 3 view .LVU560
 2035 0018 83F82020 		strb	r2, [r3, #32]
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2036              		.loc 1 692 7 is_stmt 1 discriminator 3 view .LVU561
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2037              		.loc 1 692 40 is_stmt 0 discriminator 3 view .LVU562
 2038 001c 5A61     		str	r2, [r3, #20]
 693:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2039              		.loc 1 693 7 is_stmt 1 discriminator 3 view .LVU563
 693:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
ARM GAS  /tmp/cc1aojQ3.s 			page 58


 2040              		.loc 1 693 42 is_stmt 0 discriminator 3 view .LVU564
 2041 001e 1974     		strb	r1, [r3, #16]
 694:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2042              		.loc 1 694 7 is_stmt 1 discriminator 3 view .LVU565
 694:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2043              		.loc 1 694 41 is_stmt 0 discriminator 3 view .LVU566
 2044 0020 83F82820 		strb	r2, [r3, #40]
 695:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2045              		.loc 1 695 7 is_stmt 1 discriminator 3 view .LVU567
 695:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2046              		.loc 1 695 38 is_stmt 0 discriminator 3 view .LVU568
 2047 0024 DA61     		str	r2, [r3, #28]
 696:src/menu.c    ****   }
 2048              		.loc 1 696 7 is_stmt 1 discriminator 3 view .LVU569
 696:src/menu.c    ****   }
 2049              		.loc 1 696 40 is_stmt 0 discriminator 3 view .LVU570
 2050 0026 1976     		strb	r1, [r3, #24]
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2051              		.loc 1 690 24 is_stmt 1 discriminator 3 view .LVU571
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2052              		.loc 1 690 19 discriminator 3 view .LVU572
 2053 0028 2033     		adds	r3, r3, #32
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2054              		.loc 1 690 3 is_stmt 0 discriminator 3 view .LVU573
 2055 002a 8342     		cmp	r3, r0
 2056 002c F4D1     		bne	.L190
 690:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2057              		.loc 1 690 3 discriminator 3 view .LVU574
 2058              	.LBE113:
 698:src/menu.c    **** 
 2059              		.loc 1 698 9 is_stmt 1 view .LVU575
 2060 002e 65B3     		cbz	r5, .L189
 2061              	.LBB114:
 712:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2062              		.loc 1 712 29 is_stmt 0 view .LVU576
 2063 0030 DFF86891 		ldr	r9, .L240+28
 2064              	.LBE114:
 688:src/menu.c    **** 
 2065              		.loc 1 688 7 view .LVU577
 2066 0034 4FF00008 		mov	r8, #0
 686:src/menu.c    ****   char c;
 2067              		.loc 1 686 9 view .LVU578
 2068 0038 6E46     		mov	r6, sp
 2069              	.LBB115:
 709:src/menu.c    ****       }
 2070              		.loc 1 709 2 view .LVU579
 2071 003a A9F1100A 		sub	r10, r9, #16
 2072              	.LBE115:
 682:src/menu.c    ****   s_opcode op;
 2073              		.loc 1 682 7 view .LVU580
 2074 003e C346     		mov	fp, r8
 686:src/menu.c    ****   char c;
 2075              		.loc 1 686 9 view .LVU581
 2076 0040 3746     		mov	r7, r6
 2077              	.LVL152:
 2078              	.L191:
 700:src/menu.c    ****     opc = getprog(pc);
ARM GAS  /tmp/cc1aojQ3.s 			page 59


 2079              		.loc 1 700 5 is_stmt 1 view .LVU582
 700:src/menu.c    ****     opc = getprog(pc);
 2080              		.loc 1 700 10 is_stmt 0 view .LVU583
 2081 0042 2846     		mov	r0, r5
 2082 0044 0021     		movs	r1, #0
 2083 0046 FFF7FEFF 		bl	do_inc
 2084              	.LVL153:
 2085 004a 0546     		mov	r5, r0
 2086              	.LVL154:
 701:src/menu.c    ****     op = (s_opcode) opc;
 2087              		.loc 1 701 5 is_stmt 1 view .LVU584
 701:src/menu.c    ****     op = (s_opcode) opc;
 2088              		.loc 1 701 11 is_stmt 0 view .LVU585
 2089 004c FFF7FEFF 		bl	getprog
 2090              	.LVL155:
 702:src/menu.c    **** 
 2091              		.loc 1 702 8 view .LVU586
 2092 0050 83B2     		uxth	r3, r0
 704:src/menu.c    ****       break;
 2093              		.loc 1 704 8 view .LVU587
 2094 0052 B3F59D7F 		cmp	r3, #314
 701:src/menu.c    ****     op = (s_opcode) opc;
 2095              		.loc 1 701 11 view .LVU588
 2096 0056 0446     		mov	r4, r0
 2097              	.LVL156:
 702:src/menu.c    **** 
 2098              		.loc 1 702 5 is_stmt 1 view .LVU589
 704:src/menu.c    ****       break;
 2099              		.loc 1 704 5 view .LVU590
 704:src/menu.c    ****       break;
 2100              		.loc 1 704 8 is_stmt 0 view .LVU591
 2101 0058 17D0     		beq	.L189
 706:src/menu.c    ****       if (i==4) {
 2102              		.loc 1 706 5 is_stmt 1 view .LVU592
 706:src/menu.c    ****       if (i==4) {
 2103              		.loc 1 706 8 is_stmt 0 view .LVU593
 2104 005a B3F5807F 		cmp	r3, #256
 2105 005e 43D0     		beq	.L232
 719:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2106              		.loc 1 719 5 is_stmt 1 view .LVU594
 719:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2107              		.loc 1 719 9 is_stmt 0 view .LVU595
 2108 0060 00F47042 		and	r2, r0, #61440
 719:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2109              		.loc 1 719 8 view .LVU596
 2110 0064 B2F5704F 		cmp	r2, #61440
 2111 0068 12D0     		beq	.L233
 2112              	.L197:
 740:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2113              		.loc 1 740 7 is_stmt 1 view .LVU597
 740:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2114              		.loc 1 740 10 is_stmt 0 view .LVU598
 2115 006a B742     		cmp	r7, r6
 2116 006c 26D0     		beq	.L234
 758:src/menu.c    ****       }
 2117              		.loc 1 758 11 view .LVU599
 2118 006e 4FF00008 		mov	r8, #0
ARM GAS  /tmp/cc1aojQ3.s 			page 60


 2119              	.LVL157:
 2120              	.L203:
 760:src/menu.c    ****       i++;
 2121              		.loc 1 760 7 is_stmt 1 view .LVU600
 2122 0072 5846     		mov	r0, fp
 2123 0074 2146     		mov	r1, r4
 2124 0076 3246     		mov	r2, r6
 2125 0078 FFF7FEFF 		bl	umen_store
 2126              	.LVL158:
 761:src/menu.c    ****     }
 2127              		.loc 1 761 7 view .LVU601
 761:src/menu.c    ****     }
 2128              		.loc 1 761 8 is_stmt 0 view .LVU602
 2129 007c 0BF1010B 		add	fp, fp, #1
 2130              	.LVL159:
 761:src/menu.c    ****     }
 2131              		.loc 1 761 8 view .LVU603
 2132 0080 3746     		mov	r7, r6
 2133              	.LVL160:
 2134              	.L196:
 698:src/menu.c    **** 
 2135              		.loc 1 698 9 is_stmt 1 view .LVU604
 2136 0082 15B1     		cbz	r5, .L189
 698:src/menu.c    **** 
 2137              		.loc 1 698 13 is_stmt 0 discriminator 1 view .LVU605
 2138 0084 BBF10C0F 		cmp	fp, #12
 2139 0088 DBD1     		bne	.L191
 2140              	.LVL161:
 2141              	.L189:
 764:src/menu.c    **** 
 2142              		.loc 1 764 1 view .LVU606
 2143 008a 05B0     		add	sp, sp, #20
 2144              		.cfi_remember_state
 2145              		.cfi_def_cfa_offset 36
 2146              		@ sp needed
 2147 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2148              	.LVL162:
 2149              	.L233:
 2150              		.cfi_restore_state
 719:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2151              		.loc 1 719 24 discriminator 1 view .LVU607
 2152 0090 C0F30321 		ubfx	r1, r0, #8, #4
 719:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2153              		.loc 1 719 20 discriminator 1 view .LVU608
 2154 0094 0A29     		cmp	r1, #10
 2155 0096 E8D1     		bne	.L197
 720:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2156              		.loc 1 720 7 is_stmt 1 view .LVU609
 720:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2157              		.loc 1 720 10 is_stmt 0 view .LVU610
 2158 0098 B8F1000F 		cmp	r8, #0
 2159 009c 40D1     		bne	.L198
 720:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2160              		.loc 1 720 29 discriminator 1 view .LVU611
 2161 009e BB1B     		subs	r3, r7, r6
 2162              	.LVL163:
 720:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
ARM GAS  /tmp/cc1aojQ3.s 			page 61


 2163              		.loc 1 720 24 discriminator 1 view .LVU612
 2164 00a0 062B     		cmp	r3, #6
 2165 00a2 3DD0     		beq	.L198
 2166              	.LVL164:
 726:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2167              		.loc 1 726 7 is_stmt 1 view .LVU613
 728:src/menu.c    **** 	*p++ = c;
 2168              		.loc 1 728 10 is_stmt 0 view .LVU614
 2169 00a4 14F47F0F 		tst	r4, #16711680
 726:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2170              		.loc 1 726 12 view .LVU615
 2171 00a8 3C70     		strb	r4, [r7]
 727:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2172              		.loc 1 727 7 is_stmt 1 view .LVU616
 727:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2173              		.loc 1 727 9 is_stmt 0 view .LVU617
 2174 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2175              	.LVL165:
 728:src/menu.c    **** 	*p++ = c;
 2176              		.loc 1 728 7 is_stmt 1 view .LVU618
 728:src/menu.c    **** 	*p++ = c;
 2177              		.loc 1 728 10 is_stmt 0 view .LVU619
 2178 00ae 24D1     		bne	.L235
 2179              	.LVL166:
 2180              	.L200:
 726:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2181              		.loc 1 726 9 view .LVU620
 2182 00b0 0137     		adds	r7, r7, #1
 2183              	.LVL167:
 2184              	.L202:
 734:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2185              		.loc 1 734 7 is_stmt 1 view .LVU621
 734:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2186              		.loc 1 734 10 is_stmt 0 view .LVU622
 2187 00b2 0023     		movs	r3, #0
 2188 00b4 3B70     		strb	r3, [r7]
 735:src/menu.c    **** 	finished = 1;
 2189              		.loc 1 735 7 is_stmt 1 view .LVU623
 736:src/menu.c    ****       }
 2190              		.loc 1 736 11 is_stmt 0 view .LVU624
 2191 00b6 4FF00108 		mov	r8, #1
 2192 00ba E2E7     		b	.L196
 2193              	.LVL168:
 2194              	.L234:
 741:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2195              		.loc 1 741 2 is_stmt 1 view .LVU625
 2196 00bc A0B2     		uxth	r0, r4
 2197              	.LVL169:
 741:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2198              		.loc 1 741 5 is_stmt 0 view .LVU626
 2199 00be 72B1     		cbz	r2, .L204
 741:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2200              		.loc 1 741 6 discriminator 1 view .LVU627
 2201 00c0 B2F5704F 		cmp	r2, #61440
 2202 00c4 0BD0     		beq	.L204
 2203              	.LBB116:
 742:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
ARM GAS  /tmp/cc1aojQ3.s 			page 62


 2204              		.loc 1 742 4 is_stmt 1 view .LVU628
 742:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2205              		.loc 1 742 26 is_stmt 0 view .LVU629
 2206 00c6 1B0A     		lsrs	r3, r3, #8
 2207              	.LVL170:
 742:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2208              		.loc 1 742 26 view .LVU630
 2209 00c8 203B     		subs	r3, r3, #32
 2210 00ca DBB2     		uxtb	r3, r3
 2211              	.LVL171:
 743:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2212              		.loc 1 743 4 is_stmt 1 view .LVU631
 743:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2213              		.loc 1 743 7 is_stmt 0 view .LVU632
 2214 00cc 242B     		cmp	r3, #36
 2215 00ce 06D0     		beq	.L204
 743:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2216              		.loc 1 743 28 discriminator 1 view .LVU633
 2217 00d0 6C2B     		cmp	r3, #108
 2218 00d2 04D0     		beq	.L204
 744:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2219              		.loc 1 744 9 view .LVU634
 2220 00d4 012B     		cmp	r3, #1
 2221 00d6 02D9     		bls	.L204
 745:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2222              		.loc 1 745 9 view .LVU635
 2223 00d8 10F0FF0F 		tst	r0, #255
 2224 00dc 4BD0     		beq	.L236
 2225              	.LVL172:
 2226              	.L204:
 745:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2227              		.loc 1 745 9 view .LVU636
 2228              	.LBE116:
 753:src/menu.c    **** 	}
 2229              		.loc 1 753 4 is_stmt 1 view .LVU637
 2230 00de 3146     		mov	r1, r6
 2231 00e0 2046     		mov	r0, r4
 2232 00e2 FFF7FEFF 		bl	prt_umen
 2233              	.LVL173:
 2234 00e6 C4E7     		b	.L203
 2235              	.LVL174:
 2236              	.L232:
 707:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2237              		.loc 1 707 7 view .LVU638
 707:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2238              		.loc 1 707 10 is_stmt 0 view .LVU639
 2239 00e8 BBF1040F 		cmp	fp, #4
 2240 00ec 28D0     		beq	.L237
 711:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2241              		.loc 1 711 12 is_stmt 1 view .LVU640
 711:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2242              		.loc 1 711 15 is_stmt 0 view .LVU641
 2243 00ee BBF1050F 		cmp	fp, #5
 2244 00f2 32D0     		beq	.L238
 2245              	.LVL175:
 2246              	.L195:
 715:src/menu.c    ****       continue;
ARM GAS  /tmp/cc1aojQ3.s 			page 63


 2247              		.loc 1 715 7 is_stmt 1 view .LVU642
 715:src/menu.c    ****       continue;
 2248              		.loc 1 715 9 is_stmt 0 view .LVU643
 2249 00f4 0BF1010B 		add	fp, fp, #1
 2250              	.LVL176:
 716:src/menu.c    ****     }
 2251              		.loc 1 716 7 is_stmt 1 view .LVU644
 2252 00f8 C3E7     		b	.L196
 2253              	.LVL177:
 2254              	.L235:
 729:src/menu.c    **** 	c = opc>>24;
 2255              		.loc 1 729 2 view .LVU645
 729:src/menu.c    **** 	c = opc>>24;
 2256              		.loc 1 729 7 is_stmt 0 view .LVU646
 2257 00fa 7B70     		strb	r3, [r7, #1]
 730:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2258              		.loc 1 730 2 is_stmt 1 view .LVU647
 731:src/menu.c    **** 	  *p++ = c;
 2259              		.loc 1 731 5 is_stmt 0 view .LVU648
 2260 00fc 230E     		lsrs	r3, r4, #24
 2261              	.LVL178:
 730:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2262              		.loc 1 730 4 view .LVU649
 2263 00fe 4FEA1461 		lsr	r1, r4, #24
 2264              	.LVL179:
 731:src/menu.c    **** 	  *p++ = c;
 2265              		.loc 1 731 2 is_stmt 1 view .LVU650
 731:src/menu.c    **** 	  *p++ = c;
 2266              		.loc 1 731 5 is_stmt 0 view .LVU651
 2267 0102 36D0     		beq	.L239
 732:src/menu.c    ****       }
 2268              		.loc 1 732 4 is_stmt 1 view .LVU652
 732:src/menu.c    ****       }
 2269              		.loc 1 732 6 is_stmt 0 view .LVU653
 2270 0104 FB1C     		adds	r3, r7, #3
 2271              	.LVL180:
 735:src/menu.c    **** 	finished = 1;
 2272              		.loc 1 735 26 view .LVU654
 2273 0106 A3EB0608 		sub	r8, r3, r6
 735:src/menu.c    **** 	finished = 1;
 2274              		.loc 1 735 21 view .LVU655
 2275 010a A8F10608 		sub	r8, r8, #6
 734:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2276              		.loc 1 734 10 view .LVU656
 2277 010e 0022     		movs	r2, #0
 735:src/menu.c    **** 	finished = 1;
 2278              		.loc 1 735 21 view .LVU657
 2279 0110 B8FA88F8 		clz	r8, r8
 732:src/menu.c    ****       }
 2280              		.loc 1 732 9 view .LVU658
 2281 0114 B970     		strb	r1, [r7, #2]
 734:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2282              		.loc 1 734 7 is_stmt 1 view .LVU659
 734:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2283              		.loc 1 734 10 is_stmt 0 view .LVU660
 2284 0116 FA70     		strb	r2, [r7, #3]
 735:src/menu.c    **** 	finished = 1;
ARM GAS  /tmp/cc1aojQ3.s 			page 64


 2285              		.loc 1 735 7 is_stmt 1 view .LVU661
 735:src/menu.c    **** 	finished = 1;
 2286              		.loc 1 735 21 is_stmt 0 view .LVU662
 2287 0118 4FEA5818 		lsr	r8, r8, #5
 732:src/menu.c    ****       }
 2288              		.loc 1 732 6 view .LVU663
 2289 011c 1F46     		mov	r7, r3
 2290 011e B0E7     		b	.L196
 2291              	.LVL181:
 2292              	.L198:
 721:src/menu.c    **** 	i++;
 2293              		.loc 1 721 2 is_stmt 1 view .LVU664
 2294 0120 5846     		mov	r0, fp
 2295              	.LVL182:
 721:src/menu.c    **** 	i++;
 2296              		.loc 1 721 2 is_stmt 0 view .LVU665
 2297 0122 3246     		mov	r2, r6
 2298 0124 4FF48071 		mov	r1, #256
 723:src/menu.c    **** 	finished = 0;
 2299              		.loc 1 723 8 view .LVU666
 2300 0128 3746     		mov	r7, r6
 2301              	.LVL183:
 721:src/menu.c    **** 	i++;
 2302              		.loc 1 721 2 view .LVU667
 2303 012a FFF7FEFF 		bl	umen_store
 2304              	.LVL184:
 722:src/menu.c    ****     	p = buf1;
 2305              		.loc 1 722 2 is_stmt 1 view .LVU668
 728:src/menu.c    **** 	*p++ = c;
 2306              		.loc 1 728 10 is_stmt 0 view .LVU669
 2307 012e 14F47F0F 		tst	r4, #16711680
 722:src/menu.c    ****     	p = buf1;
 2308              		.loc 1 722 3 view .LVU670
 2309 0132 0BF1010B 		add	fp, fp, #1
 2310              	.LVL185:
 723:src/menu.c    **** 	finished = 0;
 2311              		.loc 1 723 6 is_stmt 1 view .LVU671
 724:src/menu.c    ****       } // ..and start reading the new alpha
 2312              		.loc 1 724 2 view .LVU672
 726:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2313              		.loc 1 726 7 view .LVU673
 726:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2314              		.loc 1 726 12 is_stmt 0 view .LVU674
 2315 0136 3C70     		strb	r4, [r7]
 727:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2316              		.loc 1 727 7 is_stmt 1 view .LVU675
 727:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2317              		.loc 1 727 9 is_stmt 0 view .LVU676
 2318 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2319              	.LVL186:
 728:src/menu.c    **** 	*p++ = c;
 2320              		.loc 1 728 7 is_stmt 1 view .LVU677
 728:src/menu.c    **** 	*p++ = c;
 2321              		.loc 1 728 10 is_stmt 0 view .LVU678
 2322 013c B8D0     		beq	.L200
 2323              	.LVL187:
 728:src/menu.c    **** 	*p++ = c;
ARM GAS  /tmp/cc1aojQ3.s 			page 65


 2324              		.loc 1 728 10 view .LVU679
 2325 013e DCE7     		b	.L235
 2326              	.LVL188:
 2327              	.L237:
 2328              	.LBB117:
 708:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2329              		.loc 1 708 2 is_stmt 1 view .LVU680
 708:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2330              		.loc 1 708 29 is_stmt 0 view .LVU681
 2331 0140 104B     		ldr	r3, .L240+4
 2332              	.LVL189:
 709:src/menu.c    ****       }
 2333              		.loc 1 709 2 view .LVU682
 2334 0142 114C     		ldr	r4, .L240+8
 708:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2335              		.loc 1 708 29 view .LVU683
 2336 0144 93E80300 		ldm	r3, {r0, r1}
 2337              	.LVL190:
 708:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2338              		.loc 1 708 29 view .LVU684
 2339 0148 104B     		ldr	r3, .L240+12
 709:src/menu.c    ****       }
 2340              		.loc 1 709 2 view .LVU685
 2341 014a 0522     		movs	r2, #5
 708:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2342              		.loc 1 708 29 view .LVU686
 2343 014c 83E80300 		stm	r3, {r0, r1}
 709:src/menu.c    ****       }
 2344              		.loc 1 709 2 is_stmt 1 view .LVU687
 2345 0150 2168     		ldr	r1, [r4]
 2346 0152 5046     		mov	r0, r10
 2347 0154 FFF7FEFF 		bl	strncpy
 2348              	.LVL191:
 2349              	.LBE117:
 2350 0158 CCE7     		b	.L195
 2351              	.LVL192:
 2352              	.L238:
 2353              	.LBB118:
 712:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2354              		.loc 1 712 2 view .LVU688
 712:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2355              		.loc 1 712 29 is_stmt 0 view .LVU689
 2356 015a 0D4B     		ldr	r3, .L240+16
 2357              	.LVL193:
 712:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2358              		.loc 1 712 29 view .LVU690
 2359 015c 93E80300 		ldm	r3, {r0, r1}
 2360              	.LVL194:
 713:src/menu.c    ****       }
 2361              		.loc 1 713 2 view .LVU691
 2362 0160 0C4B     		ldr	r3, .L240+20
 712:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2363              		.loc 1 712 29 view .LVU692
 2364 0162 89E80300 		stm	r9, {r0, r1}
 713:src/menu.c    ****       }
 2365              		.loc 1 713 2 is_stmt 1 view .LVU693
 2366 0166 5A46     		mov	r2, fp
ARM GAS  /tmp/cc1aojQ3.s 			page 66


 2367 0168 1968     		ldr	r1, [r3]
 2368 016a 0B48     		ldr	r0, .L240+24
 2369 016c FFF7FEFF 		bl	strncpy
 2370              	.LVL195:
 2371 0170 C0E7     		b	.L195
 2372              	.LVL196:
 2373              	.L239:
 713:src/menu.c    ****       }
 2374              		.loc 1 713 2 is_stmt 0 view .LVU694
 2375              	.LBE118:
 729:src/menu.c    **** 	c = opc>>24;
 2376              		.loc 1 729 4 view .LVU695
 2377 0172 0237     		adds	r7, r7, #2
 2378              	.LVL197:
 729:src/menu.c    **** 	c = opc>>24;
 2379              		.loc 1 729 4 view .LVU696
 2380 0174 9DE7     		b	.L202
 2381              	.LVL198:
 2382              	.L236:
 2383              	.LBB119:
 746:src/menu.c    **** 	  }
 2384              		.loc 1 746 6 is_stmt 1 view .LVU697
 2385 0176 3146     		mov	r1, r6
 2386 0178 FFF7FEFF 		bl	catcmd
 2387              	.LVL199:
 746:src/menu.c    **** 	  }
 2388              		.loc 1 746 6 is_stmt 0 view .LVU698
 2389 017c 79E7     		b	.L203
 2390              	.L241:
 2391 017e 00BF     		.align	2
 2392              	.L240:
 2393 0180 00000000 		.word	.LANCHOR4
 2394 0184 00000000 		.word	.LANCHOR5
 2395 0188 00000000 		.word	.LANCHOR6
 2396 018c 90000000 		.word	.LANCHOR4+144
 2397 0190 08000000 		.word	.LANCHOR5+8
 2398 0194 00000000 		.word	.LANCHOR7
 2399 0198 C0000000 		.word	.LANCHOR4+192
 2400 019c B0000000 		.word	.LANCHOR4+176
 2401              	.LBE119:
 2402              		.cfi_endproc
 2403              	.LFE19:
 2405              		.section	.text.build_user_menu,"ax",%progbits
 2406              		.align	1
 2407              		.p2align 2,,3
 2408              		.global	build_user_menu
 2409              		.syntax unified
 2410              		.thumb
 2411              		.thumb_func
 2412              		.fpu fpv4-sp-d16
 2414              	build_user_menu:
 2415              	.LFB18:
 671:src/menu.c    ****   // find the label 'MNU'
 2416              		.loc 1 671 27 is_stmt 1 view -0
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 0
 2419              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1aojQ3.s 			page 67


 2420              		@ link register save eliminated.
 673:src/menu.c    ****    build_user_menu_from_program (lbl);
 2421              		.loc 1 673 4 view .LVU700
 2422              	.LVL200:
 674:src/menu.c    **** }
 2423              		.loc 1 674 4 view .LVU701
 2424 0000 0148     		ldr	r0, .L243
 2425 0002 FFF7FEBF 		b	build_user_menu_from_program
 2426              	.LVL201:
 2427              	.L244:
 2428 0006 00BF     		.align	2
 2429              	.L243:
 2430 0008 4DF04E55 		.word	1431236685
 2431              		.cfi_endproc
 2432              	.LFE18:
 2434              		.section	.text.shutdown,"ax",%progbits
 2435              		.align	1
 2436              		.p2align 2,,3
 2437              		.global	shutdown
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	shutdown:
 2444              	.LFB22:
 2445              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
ARM GAS  /tmp/cc1aojQ3.s 			page 68


  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
ARM GAS  /tmp/cc1aojQ3.s 			page 69


  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2446              		.loc 2 137 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
ARM GAS  /tmp/cc1aojQ3.s 			page 70


 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2451              		.loc 2 145 3 view .LVU703
 2452 0000 024A     		ldr	r2, .L246
 2453 0002 1368     		ldr	r3, [r2]
 2454 0004 43F40073 		orr	r3, r3, #512
 2455 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2456              		.loc 2 147 1 is_stmt 0 view .LVU704
 2457 000a 7047     		bx	lr
 2458              	.L247:
 2459              		.align	2
 2460              	.L246:
 2461 000c 00200010 		.word	268443648
 2462              		.cfi_endproc
 2463              	.LFE22:
 2465              		.section	.text.is_key_pressed,"ax",%progbits
 2466              		.align	1
 2467              		.p2align 2,,3
 2468              		.global	is_key_pressed
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2472              		.fpu fpv4-sp-d16
 2474              	is_key_pressed:
 2475              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2476              		.loc 2 154 1 is_stmt 1 view -0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 0
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2480              		.loc 2 156 3 view .LVU706
 154:src/console.c **** #ifdef DM42
 2481              		.loc 2 154 1 is_stmt 0 view .LVU707
 2482 0000 08B5     		push	{r3, lr}
 2483              		.cfi_def_cfa_offset 8
 2484              		.cfi_offset 3, -8
 2485              		.cfi_offset 14, -4
 2486              		.loc 2 156 11 view .LVU708
 2487 0002 034B     		ldr	r3, .L250
 2488 0004 9847     		blx	r3
 2489              	.LVL202:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
ARM GAS  /tmp/cc1aojQ3.s 			page 71


 160:src/console.c **** }
 2490              		.loc 2 160 1 view .LVU709
 2491 0006 B0FA80F0 		clz	r0, r0
 2492 000a 4009     		lsrs	r0, r0, #5
 2493 000c 08BD     		pop	{r3, pc}
 2494              	.L251:
 2495 000e 00BF     		.align	2
 2496              	.L250:
 2497 0010 7D030008 		.word	134218621
 2498              		.cfi_endproc
 2499              	.LFE23:
 2501              		.section	.text.get_key,"ax",%progbits
 2502              		.align	1
 2503              		.p2align 2,,3
 2504              		.global	get_key
 2505              		.syntax unified
 2506              		.thumb
 2507              		.thumb_func
 2508              		.fpu fpv4-sp-d16
 2510              	get_key:
 2511              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2512              		.loc 2 163 1 is_stmt 1 view -0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2517              		.loc 2 165 3 view .LVU711
 2518              		.loc 2 165 10 is_stmt 0 view .LVU712
 2519 0000 004B     		ldr	r3, .L253
 2520 0002 1847     		bx	r3
 2521              	.LVL203:
 2522              	.L254:
 2523              		.align	2
 2524              	.L253:
 2525 0004 89030008 		.word	134218633
 2526              		.cfi_endproc
 2527              	.LFE24:
 2529              		.section	.text.put_key,"ax",%progbits
 2530              		.align	1
 2531              		.p2align 2,,3
 2532              		.global	put_key
 2533              		.syntax unified
 2534              		.thumb
 2535              		.thumb_func
 2536              		.fpu fpv4-sp-d16
 2538              	put_key:
 2539              	.LVL204:
 2540              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
ARM GAS  /tmp/cc1aojQ3.s 			page 72


 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2541              		.loc 2 176 1 is_stmt 1 view -0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 48
 2544              		@ frame_needed = 0, uses_anonymous_args = 0
 2545              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2546              		.loc 2 178 3 view .LVU714
 176:src/console.c ****   #ifdef DM42
 2547              		.loc 2 176 1 is_stmt 0 view .LVU715
 2548 0000 70B4     		push	{r4, r5, r6}
 2549              		.cfi_def_cfa_offset 12
 2550              		.cfi_offset 4, -12
 2551              		.cfi_offset 5, -8
 2552              		.cfi_offset 6, -4
 2553              		.loc 2 178 14 view .LVU716
 2554 0002 0E4D     		ldr	r5, .L258
 176:src/console.c ****   #ifdef DM42
 2555              		.loc 2 176 1 view .LVU717
 2556 0004 0646     		mov	r6, r0
 2557              		.loc 2 178 14 view .LVU718
 2558 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2559              	.LVL205:
 176:src/console.c ****   #ifdef DM42
 2560              		.loc 2 176 1 view .LVU719
 2561 0008 8DB0     		sub	sp, sp, #52
 2562              		.cfi_def_cfa_offset 64
 2563              		.loc 2 178 14 view .LVU720
 2564 000a 01AC     		add	r4, sp, #4
 2565 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2566 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2567 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2568 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2569 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2570              		.loc 2 187 6 view .LVU721
 2571 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2572              		.loc 2 178 14 view .LVU722
 2573 001a 2270     		strb	r2, [r4]
 2574              		.loc 2 187 3 is_stmt 1 view .LVU723
 2575              		.loc 2 187 6 is_stmt 0 view .LVU724
ARM GAS  /tmp/cc1aojQ3.s 			page 73


 2576 001c 08D8     		bhi	.L256
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2577              		.loc 2 188 5 is_stmt 1 view .LVU725
 2578              		.loc 2 188 36 is_stmt 0 view .LVU726
 2579 001e 0CAB     		add	r3, sp, #48
 2580 0020 3046     		mov	r0, r6
 2581 0022 1844     		add	r0, r0, r3
 2582              		.loc 2 188 12 view .LVU727
 2583 0024 064B     		ldr	r3, .L258+4
 2584 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2585              		.loc 2 196 1 view .LVU728
 2586 002a 0DB0     		add	sp, sp, #52
 2587              		.cfi_remember_state
 2588              		.cfi_def_cfa_offset 12
 2589              		@ sp needed
 2590 002c 70BC     		pop	{r4, r5, r6}
 2591              		.cfi_restore 6
 2592              		.cfi_restore 5
 2593              		.cfi_restore 4
 2594              		.cfi_def_cfa_offset 0
 2595              	.LVL206:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2596              		.loc 2 188 12 view .LVU729
 2597 002e 1847     		bx	r3
 2598              	.LVL207:
 2599              	.L256:
 2600              		.cfi_restore_state
 2601              		.loc 2 196 1 view .LVU730
 2602 0030 4FF0FF30 		mov	r0, #-1
 2603 0034 0DB0     		add	sp, sp, #52
 2604              		.cfi_def_cfa_offset 12
 2605              		@ sp needed
 2606 0036 70BC     		pop	{r4, r5, r6}
 2607              		.cfi_restore 6
 2608              		.cfi_restore 5
 2609              		.cfi_restore 4
 2610              		.cfi_def_cfa_offset 0
 2611              	.LVL208:
 2612              		.loc 2 196 1 view .LVU731
 2613 0038 7047     		bx	lr
 2614              	.L259:
 2615 003a 00BF     		.align	2
 2616              	.L258:
 2617 003c 10000000 		.word	.LANCHOR5+16
 2618 0040 81030008 		.word	134218625
 2619              		.cfi_endproc
 2620              	.LFE25:
 2622              		.section	.text.shift_down,"ax",%progbits
 2623              		.align	1
ARM GAS  /tmp/cc1aojQ3.s 			page 74


 2624              		.p2align 2,,3
 2625              		.global	shift_down
 2626              		.syntax unified
 2627              		.thumb
 2628              		.thumb_func
 2629              		.fpu fpv4-sp-d16
 2631              	shift_down:
 2632              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2633              		.loc 2 199 1 is_stmt 1 view -0
 2634              		.cfi_startproc
 2635              		@ args = 0, pretend = 0, frame = 0
 2636              		@ frame_needed = 0, uses_anonymous_args = 0
 2637              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2638              		.loc 2 200 2 view .LVU733
 201:src/console.c **** }
 2639              		.loc 2 201 1 is_stmt 0 view .LVU734
 2640 0000 0020     		movs	r0, #0
 2641 0002 7047     		bx	lr
 2642              		.cfi_endproc
 2643              	.LFE26:
 2645              		.section	.text.start_key_timer,"ax",%progbits
 2646              		.align	1
 2647              		.p2align 2,,3
 2648              		.global	start_key_timer
 2649              		.syntax unified
 2650              		.thumb
 2651              		.thumb_func
 2652              		.fpu fpv4-sp-d16
 2654              	start_key_timer:
 2655              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
ARM GAS  /tmp/cc1aojQ3.s 			page 75


 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2656              		.loc 2 252 24 is_stmt 1 view -0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2660              		.loc 2 253 5 view .LVU736
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2661              		.loc 2 252 24 is_stmt 0 view .LVU737
 2662 0000 08B5     		push	{r3, lr}
 2663              		.cfi_def_cfa_offset 8
 2664              		.cfi_offset 3, -8
 2665              		.cfi_offset 14, -4
 2666              		.loc 2 253 19 view .LVU738
 2667 0002 024B     		ldr	r3, .L263
 2668 0004 9847     		blx	r3
 2669              	.LVL209:
 2670              		.loc 2 253 17 view .LVU739
 2671 0006 024B     		ldr	r3, .L263+4
 2672 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2673              		.loc 2 254 1 view .LVU740
 2674 000a 08BD     		pop	{r3, pc}
 2675              	.L264:
 2676              		.align	2
 2677              	.L263:
 2678 000c B9040008 		.word	134218937
 2679 0010 00000000 		.word	.LANCHOR8
 2680              		.cfi_endproc
 2681              	.LFE27:
ARM GAS  /tmp/cc1aojQ3.s 			page 76


 2683              		.section	.text.keyticks,"ax",%progbits
 2684              		.align	1
 2685              		.p2align 2,,3
 2686              		.global	keyticks
 2687              		.syntax unified
 2688              		.thumb
 2689              		.thumb_func
 2690              		.fpu fpv4-sp-d16
 2692              	keyticks:
 2693              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2694              		.loc 2 256 22 is_stmt 1 view -0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 0
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2698              		.loc 2 257 3 view .LVU742
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2699              		.loc 2 258 3 view .LVU743
 256:src/console.c ****   long int i;
 2700              		.loc 2 256 22 is_stmt 0 view .LVU744
 2701 0000 08B5     		push	{r3, lr}
 2702              		.cfi_def_cfa_offset 8
 2703              		.cfi_offset 3, -8
 2704              		.cfi_offset 14, -4
 2705              		.loc 2 258 8 view .LVU745
 2706 0002 054B     		ldr	r3, .L267
 2707 0004 9847     		blx	r3
 2708              	.LVL210:
 259:src/console.c ****   return i >> 8;
 2709              		.loc 2 259 3 is_stmt 1 view .LVU746
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2710              		.loc 2 258 24 is_stmt 0 view .LVU747
 2711 0006 054B     		ldr	r3, .L267+4
 2712 0008 1B68     		ldr	r3, [r3]
 2713 000a C01A     		subs	r0, r0, r3
 2714              	.LVL211:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2715              		.loc 2 258 38 view .LVU748
 2716 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2717              		.loc 2 260 1 view .LVU749
 2718 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2719 0014 08BD     		pop	{r3, pc}
 2720              	.L268:
 2721 0016 00BF     		.align	2
 2722              	.L267:
 2723 0018 B9040008 		.word	134218937
 2724 001c 00000000 		.word	.LANCHOR8
 2725              		.cfi_endproc
 2726              	.LFE28:
 2728              		.section	.text.moveto,"ax",%progbits
 2729              		.align	1
 2730              		.p2align 2,,3
 2731              		.global	moveto
 2732              		.syntax unified
ARM GAS  /tmp/cc1aojQ3.s 			page 77


 2733              		.thumb
 2734              		.thumb_func
 2735              		.fpu fpv4-sp-d16
 2737              	moveto:
 2738              	.LVL212:
 2739              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2740              		.loc 2 267 30 is_stmt 1 view -0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2744              		.loc 2 268 3 view .LVU751
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2745              		.loc 2 267 30 is_stmt 0 view .LVU752
 2746 0000 70B5     		push	{r4, r5, r6, lr}
 2747              		.cfi_def_cfa_offset 16
 2748              		.cfi_offset 4, -16
 2749              		.cfi_offset 5, -12
 2750              		.cfi_offset 6, -8
 2751              		.cfi_offset 14, -4
 2752              		.loc 2 268 3 view .LVU753
 2753 0002 0A4D     		ldr	r5, .L271
 2754 0004 0A4B     		ldr	r3, .L271+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2755              		.loc 2 267 30 view .LVU754
 2756 0006 0246     		mov	r2, r0
 2757 0008 0C46     		mov	r4, r1
 2758              		.loc 2 268 3 view .LVU755
 2759 000a A86B     		ldr	r0, [r5, #56]
 2760              	.LVL213:
 2761              		.loc 2 268 3 view .LVU756
 2762 000c 511E     		subs	r1, r2, #1
 2763              	.LVL214:
 2764              		.loc 2 268 3 view .LVU757
 2765 000e 9847     		blx	r3
 2766              	.LVL215:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2767              		.loc 2 269 3 is_stmt 1 view .LVU758
 2768 0010 A86B     		ldr	r0, [r5, #56]
 2769 0012 084B     		ldr	r3, .L271+8
 2770              		.loc 2 269 33 is_stmt 0 view .LVU759
 2771 0014 0168     		ldr	r1, [r0]
 2772              		.loc 2 269 3 view .LVU760
 2773 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2774              		.loc 2 269 33 view .LVU761
 2775 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2776              		.loc 2 269 43 view .LVU762
 2777 001c 013C     		subs	r4, r4, #1
 2778              	.LVL216:
 2779              		.loc 2 269 40 view .LVU763
ARM GAS  /tmp/cc1aojQ3.s 			page 78


 2780 001e 04FB01F1 		mul	r1, r4, r1
 2781              		.loc 2 269 3 view .LVU764
 2782 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2783              		.loc 2 270 1 view .LVU765
 2784 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2785              		.cfi_restore 14
 2786              		.cfi_restore 6
 2787              		.cfi_restore 5
 2788              		.cfi_restore 4
 2789              		.cfi_def_cfa_offset 0
 2790              	.LVL217:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2791              		.loc 2 269 3 view .LVU766
 2792 0028 1847     		bx	r3	@ indirect register sibling call
 2793              	.LVL218:
 2794              	.L272:
 2795 002a 00BF     		.align	2
 2796              	.L271:
 2797 002c 00200010 		.word	268443648
 2798 0030 69020008 		.word	134218345
 2799 0034 6D020008 		.word	134218349
 2800              		.cfi_endproc
 2801              	.LFE29:
 2803              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2804              		.align	2
 2805              	.LC15:
 2806 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2806      673A2025 
 2806      34692C25 
 2806      346900
 2807              		.section	.text.print_debug,"ax",%progbits
 2808              		.align	1
 2809              		.p2align 2,,3
 2810              		.global	print_debug
 2811              		.syntax unified
 2812              		.thumb
 2813              		.thumb_func
 2814              		.fpu fpv4-sp-d16
 2816              	print_debug:
 2817              	.LVL219:
 2818              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2819              		.loc 2 272 33 is_stmt 1 view -0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 8
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2823              		.loc 2 273 3 view .LVU768
 272:src/console.c ****   strcpy( print_string, spaces );
 2824              		.loc 2 272 33 is_stmt 0 view .LVU769
 2825 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2826              		.cfi_def_cfa_offset 24
 2827              		.cfi_offset 4, -24
 2828              		.cfi_offset 5, -20
 2829              		.cfi_offset 6, -16
ARM GAS  /tmp/cc1aojQ3.s 			page 79


 2830              		.cfi_offset 7, -12
 2831              		.cfi_offset 8, -8
 2832              		.cfi_offset 14, -4
 2833              		.loc 2 273 3 view .LVU770
 2834 0004 174C     		ldr	r4, .L275
 2835 0006 184F     		ldr	r7, .L275+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2836              		.loc 2 276 3 view .LVU771
 2837 0008 184E     		ldr	r6, .L275+8
 2838 000a 194D     		ldr	r5, .L275+12
 277:src/console.c ****   lcd_refresh();
 2839              		.loc 2 277 3 view .LVU772
 2840 000c DFF86C80 		ldr	r8, .L275+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2841              		.loc 2 272 33 view .LVU773
 2842 0010 82B0     		sub	sp, sp, #8
 2843              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2844              		.loc 2 272 33 view .LVU774
 2845 0012 0190     		str	r0, [sp, #4]
 2846 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2847              		.loc 2 273 3 view .LVU775
 2848 0016 2046     		mov	r0, r4
 2849              	.LVL220:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2850              		.loc 2 273 3 view .LVU776
 2851 0018 3946     		mov	r1, r7
 2852              	.LVL221:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2853              		.loc 2 273 3 view .LVU777
 2854 001a FFF7FEFF 		bl	strcpy
 2855              	.LVL222:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2856              		.loc 2 274 3 is_stmt 1 view .LVU778
 2857 001e DDE90032 		ldrd	r3, r2, [sp]
 2858 0022 1449     		ldr	r1, .L275+16
 2859 0024 2046     		mov	r0, r4
 2860 0026 FFF7FEFF 		bl	sprintf
 2861              	.LVL223:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2862              		.loc 2 275 3 view .LVU779
 2863 002a 0121     		movs	r1, #1
 2864 002c 0320     		movs	r0, #3
 2865 002e FFF7FEFF 		bl	moveto
 2866              	.LVL224:
 276:src/console.c ****   lcd_refresh();
 2867              		.loc 2 276 3 view .LVU780
 2868 0032 2146     		mov	r1, r4
 2869 0034 B06B     		ldr	r0, [r6, #56]
 2870 0036 A847     		blx	r5
 2871              	.LVL225:
 2872              		.loc 2 277 3 view .LVU781
 2873 0038 C047     		blx	r8
 2874              	.LVL226:
ARM GAS  /tmp/cc1aojQ3.s 			page 80


 278:src/console.c ****   sys_delay (1000);
 2875              		.loc 2 278 3 view .LVU782
 2876 003a 0F4B     		ldr	r3, .L275+20
 2877 003c 4FF47A70 		mov	r0, #1000
 2878 0040 9847     		blx	r3
 2879              	.LVL227:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2880              		.loc 2 283 3 view .LVU783
 2881 0042 3946     		mov	r1, r7
 2882 0044 2046     		mov	r0, r4
 2883 0046 FFF7FEFF 		bl	strcpy
 2884              	.LVL228:
 284:src/console.c ****   moveto (3, 1);
 2885              		.loc 2 284 3 view .LVU784
 2886 004a 0121     		movs	r1, #1
 2887 004c 0320     		movs	r0, #3
 2888 004e FFF7FEFF 		bl	moveto
 2889              	.LVL229:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2890              		.loc 2 285 3 view .LVU785
 2891 0052 B06B     		ldr	r0, [r6, #56]
 2892 0054 2146     		mov	r1, r4
 2893 0056 A847     		blx	r5
 2894              	.LVL230:
 286:src/console.c ****   lcd_refresh();
 2895              		.loc 2 286 3 view .LVU786
 2896 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2897              		.loc 2 289 1 is_stmt 0 view .LVU787
 2898 005a 02B0     		add	sp, sp, #8
 2899              		.cfi_def_cfa_offset 24
 2900              	.LVL231:
 2901              		.loc 2 289 1 view .LVU788
 2902              		@ sp needed
 2903 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2904              		.cfi_restore 14
 2905              		.cfi_restore 8
 2906              		.cfi_restore 7
 2907              		.cfi_restore 6
 2908              		.cfi_restore 5
 2909              		.cfi_restore 4
 2910              		.cfi_def_cfa_offset 0
 2911              	.LVL232:
 286:src/console.c ****   lcd_refresh();
 2912              		.loc 2 286 3 view .LVU789
 2913 0060 1847     		bx	r3	@ indirect register sibling call
 2914              	.LVL233:
 2915              	.L276:
 2916 0062 00BF     		.align	2
 2917              	.L275:
 2918 0064 00000000 		.word	print_string
ARM GAS  /tmp/cc1aojQ3.s 			page 81


 2919 0068 00000000 		.word	.LANCHOR9
 2920 006c 00200010 		.word	268443648
 2921 0070 B1020008 		.word	134218417
 2922 0074 00000000 		.word	.LC15
 2923 0078 05040008 		.word	134218757
 2924 007c 31020008 		.word	134218289
 2925              		.cfi_endproc
 2926              	.LFE30:
 2928              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2929              		.align	2
 2930              	.LC16:
 2931 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2931      692C2531 
 2931      337300
 2932              		.section	.text.print_debug2,"ax",%progbits
 2933              		.align	1
 2934              		.p2align 2,,3
 2935              		.global	print_debug2
 2936              		.syntax unified
 2937              		.thumb
 2938              		.thumb_func
 2939              		.fpu fpv4-sp-d16
 2941              	print_debug2:
 2942              	.LVL234:
 2943              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2944              		.loc 2 291 36 is_stmt 1 view -0
 2945              		.cfi_startproc
 2946              		@ args = 0, pretend = 0, frame = 8
 2947              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2948              		.loc 2 292 3 view .LVU791
 291:src/console.c ****   strcpy( print_string, spaces );
 2949              		.loc 2 291 36 is_stmt 0 view .LVU792
 2950 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2951              		.cfi_def_cfa_offset 24
 2952              		.cfi_offset 4, -24
 2953              		.cfi_offset 5, -20
 2954              		.cfi_offset 6, -16
 2955              		.cfi_offset 7, -12
 2956              		.cfi_offset 8, -8
 2957              		.cfi_offset 14, -4
 2958              		.loc 2 292 3 view .LVU793
 2959 0004 174C     		ldr	r4, .L279
 2960 0006 184F     		ldr	r7, .L279+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2961              		.loc 2 295 3 view .LVU794
 2962 0008 184E     		ldr	r6, .L279+8
 2963 000a 194D     		ldr	r5, .L279+12
 296:src/console.c ****   lcd_refresh();
 2964              		.loc 2 296 3 view .LVU795
 2965 000c DFF86C80 		ldr	r8, .L279+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2966              		.loc 2 291 36 view .LVU796
ARM GAS  /tmp/cc1aojQ3.s 			page 82


 2967 0010 82B0     		sub	sp, sp, #8
 2968              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2969              		.loc 2 291 36 view .LVU797
 2970 0012 0190     		str	r0, [sp, #4]
 2971 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2972              		.loc 2 292 3 view .LVU798
 2973 0016 2046     		mov	r0, r4
 2974              	.LVL235:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2975              		.loc 2 292 3 view .LVU799
 2976 0018 3946     		mov	r1, r7
 2977              	.LVL236:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2978              		.loc 2 292 3 view .LVU800
 2979 001a FFF7FEFF 		bl	strcpy
 2980              	.LVL237:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2981              		.loc 2 293 3 is_stmt 1 view .LVU801
 2982 001e DDE90032 		ldrd	r3, r2, [sp]
 2983 0022 1449     		ldr	r1, .L279+16
 2984 0024 2046     		mov	r0, r4
 2985 0026 FFF7FEFF 		bl	sprintf
 2986              	.LVL238:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2987              		.loc 2 294 3 view .LVU802
 2988 002a 0121     		movs	r1, #1
 2989 002c 0320     		movs	r0, #3
 2990 002e FFF7FEFF 		bl	moveto
 2991              	.LVL239:
 295:src/console.c ****   lcd_refresh();
 2992              		.loc 2 295 3 view .LVU803
 2993 0032 2146     		mov	r1, r4
 2994 0034 B06B     		ldr	r0, [r6, #56]
 2995 0036 A847     		blx	r5
 2996              	.LVL240:
 2997              		.loc 2 296 3 view .LVU804
 2998 0038 C047     		blx	r8
 2999              	.LVL241:
 297:src/console.c ****   sys_delay (2500);
 3000              		.loc 2 297 3 view .LVU805
 3001 003a 0F4B     		ldr	r3, .L279+20
 3002 003c 40F6C410 		movw	r0, #2500
 3003 0040 9847     		blx	r3
 3004              	.LVL242:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 3005              		.loc 2 302 3 view .LVU806
 3006 0042 3946     		mov	r1, r7
 3007 0044 2046     		mov	r0, r4
 3008 0046 FFF7FEFF 		bl	strcpy
 3009              	.LVL243:
 303:src/console.c ****   moveto (3, 1);
ARM GAS  /tmp/cc1aojQ3.s 			page 83


 3010              		.loc 2 303 3 view .LVU807
 3011 004a 0121     		movs	r1, #1
 3012 004c 0320     		movs	r0, #3
 3013 004e FFF7FEFF 		bl	moveto
 3014              	.LVL244:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 3015              		.loc 2 304 3 view .LVU808
 3016 0052 B06B     		ldr	r0, [r6, #56]
 3017 0054 2146     		mov	r1, r4
 3018 0056 A847     		blx	r5
 3019              	.LVL245:
 305:src/console.c ****   lcd_refresh();
 3020              		.loc 2 305 3 view .LVU809
 3021 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 3022              		.loc 2 308 1 is_stmt 0 view .LVU810
 3023 005a 02B0     		add	sp, sp, #8
 3024              		.cfi_def_cfa_offset 24
 3025              	.LVL246:
 3026              		.loc 2 308 1 view .LVU811
 3027              		@ sp needed
 3028 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3029              		.cfi_restore 14
 3030              		.cfi_restore 8
 3031              		.cfi_restore 7
 3032              		.cfi_restore 6
 3033              		.cfi_restore 5
 3034              		.cfi_restore 4
 3035              		.cfi_def_cfa_offset 0
 3036              	.LVL247:
 305:src/console.c ****   lcd_refresh();
 3037              		.loc 2 305 3 view .LVU812
 3038 0060 1847     		bx	r3	@ indirect register sibling call
 3039              	.LVL248:
 3040              	.L280:
 3041 0062 00BF     		.align	2
 3042              	.L279:
 3043 0064 00000000 		.word	print_string
 3044 0068 00000000 		.word	.LANCHOR9
 3045 006c 00200010 		.word	268443648
 3046 0070 B1020008 		.word	134218417
 3047 0074 00000000 		.word	.LC16
 3048 0078 05040008 		.word	134218757
 3049 007c 31020008 		.word	134218289
 3050              		.cfi_endproc
 3051              	.LFE31:
 3053              		.section	.text.do_now,"ax",%progbits
 3054              		.align	1
 3055              		.p2align 2,,3
 3056              		.global	do_now
 3057              		.syntax unified
 3058              		.thumb
 3059              		.thumb_func
 3060              		.fpu fpv4-sp-d16
 3062              	do_now:
ARM GAS  /tmp/cc1aojQ3.s 			page 84


 3063              	.LVL249:
 3064              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 3065              		.loc 2 310 34 is_stmt 1 view -0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 8
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 3069              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 3070              		.loc 2 311 3 view .LVU814
 312:src/console.c ****   temp.key_34s = key;
 3071              		.loc 2 312 3 view .LVU815
 310:src/console.c ****   struct _ndmap temp;
 3072              		.loc 2 310 34 is_stmt 0 view .LVU816
 3073 0000 82B0     		sub	sp, sp, #8
 3074              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3075              		.loc 2 314 3 view .LVU817
 3076 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3077              		.loc 2 312 16 view .LVU818
 3078 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3079              		.loc 2 313 3 is_stmt 1 view .LVU819
 313:src/console.c ****   temp.shift = shift;
 3080              		.loc 2 313 14 is_stmt 0 view .LVU820
 3081 0008 0191     		str	r1, [sp, #4]
 3082              		.loc 2 314 3 is_stmt 1 view .LVU821
 3083 000a 13E90300 		ldmdb	r3, {r0, r1}
 3084              	.LVL250:
 315:src/console.c **** }
 3085              		.loc 2 315 1 is_stmt 0 view .LVU822
 3086 000e 02B0     		add	sp, sp, #8
 3087              		.cfi_def_cfa_offset 0
 3088              		@ sp needed
 314:src/console.c **** }
 3089              		.loc 2 314 3 view .LVU823
 3090 0010 FFF7FEBF 		b	process_keycode_with_shift
 3091              	.LVL251:
 314:src/console.c **** }
 3092              		.loc 2 314 3 view .LVU824
 3093              		.cfi_endproc
 3094              	.LFE32:
 3096              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3097              		.align	2
 3098              	.LC17:
 3099 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3099      502F7770 
 3099      3334735F 
 3099      68656C70 
 3099      2E68746D 
 3100              		.section	.text.do_multi,"ax",%progbits
 3101              		.align	1
 3102              		.p2align 2,,3
 3103              		.global	do_multi
ARM GAS  /tmp/cc1aojQ3.s 			page 85


 3104              		.syntax unified
 3105              		.thumb
 3106              		.thumb_func
 3107              		.fpu fpv4-sp-d16
 3109              	do_multi:
 3110              	.LVL252:
 3111              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3112              		.loc 2 317 42 is_stmt 1 view -0
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 16
 3115              		@ frame_needed = 0, uses_anonymous_args = 0
 3116              		.loc 2 317 42 is_stmt 0 view .LVU826
 3117 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3118              		.cfi_def_cfa_offset 20
 3119              		.cfi_offset 4, -20
 3120              		.cfi_offset 5, -16
 3121              		.cfi_offset 6, -12
 3122              		.cfi_offset 7, -8
 3123              		.cfi_offset 14, -4
 3124 0002 85B0     		sub	sp, sp, #20
 3125              		.cfi_def_cfa_offset 40
 3126              	.LVL253:
 318:src/console.c ****   switch(r.shift) {
 3127              		.loc 2 318 3 is_stmt 1 view .LVU827
 317:src/console.c ****   switch(r.shift) {
 3128              		.loc 2 317 42 is_stmt 0 view .LVU828
 3129 0004 6C46     		mov	r4, sp
 3130 0006 931E     		subs	r3, r2, #2
 3131 0008 84E80600 		stm	r4, {r1, r2}
 3132              	.LVL254:
 317:src/console.c ****   switch(r.shift) {
 3133              		.loc 2 317 42 view .LVU829
 3134 000c 0546     		mov	r5, r0
 3135 000e 0D2B     		cmp	r3, #13
 3136 0010 23D8     		bhi	.L284
 3137 0012 DFE803F0 		tbb	[pc, r3]
 3138              	.L286:
 3139 0016 2F       		.byte	(.L299-.L286)/2
 3140 0017 3A       		.byte	(.L298-.L286)/2
 3141 0018 45       		.byte	(.L297-.L286)/2
 3142 0019 50       		.byte	(.L296-.L286)/2
 3143 001a 5B       		.byte	(.L295-.L286)/2
 3144 001b 66       		.byte	(.L294-.L286)/2
 3145 001c 71       		.byte	(.L293-.L286)/2
 3146 001d 7B       		.byte	(.L292-.L286)/2
 3147 001e 86       		.byte	(.L291-.L286)/2
 3148 001f 90       		.byte	(.L290-.L286)/2
 3149 0020 9A       		.byte	(.L289-.L286)/2
 3150 0021 AD       		.byte	(.L288-.L286)/2
 3151 0022 B7       		.byte	(.L287-.L286)/2
 3152 0023 07       		.byte	(.L285-.L286)/2
 3153              		.p2align 1
 3154              	.L285:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
ARM GAS  /tmp/cc1aojQ3.s 			page 86


 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
ARM GAS  /tmp/cc1aojQ3.s 			page 87


 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3155              		.loc 2 392 5 is_stmt 1 view .LVU830
 3156              		.loc 2 392 9 is_stmt 0 view .LVU831
 3157 0024 664B     		ldr	r3, .L320
 3158 0026 1B68     		ldr	r3, [r3]
 3159 0028 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 3160              		.loc 2 392 8 view .LVU832
 3161 002c 5207     		lsls	r2, r2, #29
 3162 002e 40F1B480 		bpl	.L301
 3163              		.loc 2 392 9 discriminator 1 view .LVU833
 3164 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 3165 0036 5B07     		lsls	r3, r3, #29
 3166 0038 40F1AF80 		bpl	.L301
 393:src/console.c ****       set_menu(M_C_Lock);
 3167              		.loc 2 393 7 is_stmt 1 view .LVU834
 3168              	.LVL255:
 3169              	.LBB120:
 3170              	.LBI120:
 122:src/menu.c    ****   menu_name m = current_menu;
 3171              		.loc 1 122 6 view .LVU835
 3172              	.LBB121:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3173              		.loc 1 123 3 view .LVU836
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3174              		.loc 1 123 13 is_stmt 0 view .LVU837
 3175 003c 614A     		ldr	r2, .L320+4
 3176 003e 92F90030 		ldrsb	r3, [r2]
 3177              	.LVL256:
 124:src/menu.c    ****     current_menu = default_menu;
 3178              		.loc 1 124 3 is_stmt 1 view .LVU838
 124:src/menu.c    ****     current_menu = default_menu;
 3179              		.loc 1 124 6 is_stmt 0 view .LVU839
 3180 0042 112B     		cmp	r3, #17
 3181 0044 00F0B580 		beq	.L319
 127:src/menu.c    ****     current_menu = last_menu;
 3182              		.loc 1 127 8 is_stmt 1 view .LVU840
 131:src/menu.c    ****   }
 3183              		.loc 1 131 5 view .LVU841
 131:src/menu.c    ****   }
 3184              		.loc 1 131 18 is_stmt 0 view .LVU842
 3185 0048 1121     		movs	r1, #17
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3186              		.loc 1 133 6 view .LVU843
ARM GAS  /tmp/cc1aojQ3.s 			page 88


 3187 004a 092B     		cmp	r3, #9
 131:src/menu.c    ****   }
 3188              		.loc 1 131 18 view .LVU844
 3189 004c 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3190              		.loc 1 133 3 is_stmt 1 view .LVU845
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3191              		.loc 1 133 6 is_stmt 0 view .LVU846
 3192 004e 02D0     		beq	.L304
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3193              		.loc 1 133 23 view .LVU847
 3194 0050 102B     		cmp	r3, #16
 3195 0052 40F0B180 		bne	.L303
 3196              	.L304:
 3197              	.LVL257:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3198              		.loc 1 133 23 view .LVU848
 3199              	.LBE121:
 3200              	.LBE120:
 394:src/console.c ****       reset_shift();
 3201              		.loc 2 394 7 is_stmt 1 view .LVU849
 3202 0056 FFF7FEFF 		bl	reset_shift
 3203              	.LVL258:
 3204              	.L284:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3205              		.loc 2 402 5 view .LVU850
 3206              		.loc 2 402 7 is_stmt 0 view .LVU851
 3207 005a 5B4B     		ldr	r3, .L320+8
 3208 005c 93E80300 		ldm	r3, {r0, r1}
 3209 0060 84E80300 		stm	r4, {r0, r1}
 3210              	.LVL259:
 3211              	.L300:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3212              		.loc 2 404 3 is_stmt 1 view .LVU852
 3213              		.loc 2 404 10 is_stmt 0 view .LVU853
 3214 0064 0191     		str	r1, [sp, #4]
 3215 0066 94E80300 		ldm	r4, {r0, r1}
 3216              	.LVL260:
 3217              		.loc 2 404 10 view .LVU854
 3218 006a 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3219              		.loc 2 405 1 view .LVU855
 3220 006e 2846     		mov	r0, r5
 3221 0070 05B0     		add	sp, sp, #20
 3222              		.cfi_remember_state
 3223              		.cfi_def_cfa_offset 20
 3224              		@ sp needed
 3225 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 3226              	.LVL261:
ARM GAS  /tmp/cc1aojQ3.s 			page 89


 3227              	.L299:
 3228              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3229              		.loc 2 327 5 is_stmt 1 view .LVU856
 3230 0074 AD20     		movs	r0, #173
 3231              	.LVL262:
 327:src/console.c ****     reset_shift();
 3232              		.loc 2 327 5 is_stmt 0 view .LVU857
 3233 0076 FFF7FEFF 		bl	flash_backup
 3234              	.LVL263:
 328:src/console.c ****     r = no_key;
 3235              		.loc 2 328 5 is_stmt 1 view .LVU858
 3236 007a FFF7FEFF 		bl	reset_shift
 3237              	.LVL264:
 329:src/console.c ****     break;
 3238              		.loc 2 329 5 view .LVU859
 329:src/console.c ****     break;
 3239              		.loc 2 329 7 is_stmt 0 view .LVU860
 3240 007e 524B     		ldr	r3, .L320+8
 3241 0080 93E80300 		ldm	r3, {r0, r1}
 3242 0084 84E80300 		stm	r4, {r0, r1}
 3243              	.LVL265:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3244              		.loc 2 330 5 is_stmt 1 view .LVU861
 3245 0088 ECE7     		b	.L300
 3246              	.LVL266:
 3247              	.L298:
 332:src/console.c ****     reset_shift();
 3248              		.loc 2 332 5 view .LVU862
 3249 008a AE20     		movs	r0, #174
 3250              	.LVL267:
 332:src/console.c ****     reset_shift();
 3251              		.loc 2 332 5 is_stmt 0 view .LVU863
 3252 008c FFF7FEFF 		bl	flash_restore
 3253              	.LVL268:
 333:src/console.c ****     r = no_key;
 3254              		.loc 2 333 5 is_stmt 1 view .LVU864
 3255 0090 FFF7FEFF 		bl	reset_shift
 3256              	.LVL269:
 334:src/console.c ****     break;
 3257              		.loc 2 334 5 view .LVU865
 334:src/console.c ****     break;
 3258              		.loc 2 334 7 is_stmt 0 view .LVU866
 3259 0094 4C4B     		ldr	r3, .L320+8
 3260 0096 93E80300 		ldm	r3, {r0, r1}
 3261 009a 84E80300 		stm	r4, {r0, r1}
 3262              	.LVL270:
 335:src/console.c ****   case WRLIB: // save library file
 3263              		.loc 2 335 5 is_stmt 1 view .LVU867
 3264 009e E1E7     		b	.L300
 3265              	.LVL271:
 3266              	.L297:
 337:src/console.c ****     reset_shift();
 3267              		.loc 2 337 5 view .LVU868
 3268 00a0 0120     		movs	r0, #1
 3269              	.LVL272:
 337:src/console.c ****     reset_shift();
ARM GAS  /tmp/cc1aojQ3.s 			page 90


 3270              		.loc 2 337 5 is_stmt 0 view .LVU869
 3271 00a2 FFF7FEFF 		bl	save_lib_file
 3272              	.LVL273:
 338:src/console.c ****     r = no_key;
 3273              		.loc 2 338 5 is_stmt 1 view .LVU870
 3274 00a6 FFF7FEFF 		bl	reset_shift
 3275              	.LVL274:
 339:src/console.c ****     break;
 3276              		.loc 2 339 5 view .LVU871
 339:src/console.c ****     break;
 3277              		.loc 2 339 7 is_stmt 0 view .LVU872
 3278 00aa 474B     		ldr	r3, .L320+8
 3279 00ac 93E80300 		ldm	r3, {r0, r1}
 3280 00b0 84E80300 		stm	r4, {r0, r1}
 3281              	.LVL275:
 340:src/console.c ****   case LLIB: // load library file
 3282              		.loc 2 340 5 is_stmt 1 view .LVU873
 3283 00b4 D6E7     		b	.L300
 3284              	.LVL276:
 3285              	.L296:
 342:src/console.c ****     reset_shift();
 3286              		.loc 2 342 5 view .LVU874
 3287 00b6 0120     		movs	r0, #1
 3288              	.LVL277:
 342:src/console.c ****     reset_shift();
 3289              		.loc 2 342 5 is_stmt 0 view .LVU875
 3290 00b8 FFF7FEFF 		bl	load_lib_file
 3291              	.LVL278:
 343:src/console.c ****     r = no_key;
 3292              		.loc 2 343 5 is_stmt 1 view .LVU876
 3293 00bc FFF7FEFF 		bl	reset_shift
 3294              	.LVL279:
 344:src/console.c ****     break;
 3295              		.loc 2 344 5 view .LVU877
 344:src/console.c ****     break;
 3296              		.loc 2 344 7 is_stmt 0 view .LVU878
 3297 00c0 414B     		ldr	r3, .L320+8
 3298 00c2 93E80300 		ldm	r3, {r0, r1}
 3299 00c6 84E80300 		stm	r4, {r0, r1}
 3300              	.LVL280:
 345:src/console.c ****   case WRTST: // save state file
 3301              		.loc 2 345 5 is_stmt 1 view .LVU879
 3302 00ca CBE7     		b	.L300
 3303              	.LVL281:
 3304              	.L295:
 347:src/console.c ****     reset_shift();
 3305              		.loc 2 347 5 view .LVU880
 3306 00cc 0120     		movs	r0, #1
 3307              	.LVL282:
 347:src/console.c ****     reset_shift();
 3308              		.loc 2 347 5 is_stmt 0 view .LVU881
 3309 00ce FFF7FEFF 		bl	save_ram_file
 3310              	.LVL283:
 348:src/console.c ****     r = no_key;
 3311              		.loc 2 348 5 is_stmt 1 view .LVU882
 3312 00d2 FFF7FEFF 		bl	reset_shift
 3313              	.LVL284:
ARM GAS  /tmp/cc1aojQ3.s 			page 91


 349:src/console.c ****     break;
 3314              		.loc 2 349 5 view .LVU883
 349:src/console.c ****     break;
 3315              		.loc 2 349 7 is_stmt 0 view .LVU884
 3316 00d6 3C4B     		ldr	r3, .L320+8
 3317 00d8 93E80300 		ldm	r3, {r0, r1}
 3318 00dc 84E80300 		stm	r4, {r0, r1}
 3319              	.LVL285:
 350:src/console.c ****   case LDST:
 3320              		.loc 2 350 5 is_stmt 1 view .LVU885
 3321 00e0 C0E7     		b	.L300
 3322              	.LVL286:
 3323              	.L294:
 352:src/console.c ****     reset_shift();
 3324              		.loc 2 352 5 view .LVU886
 3325 00e2 0120     		movs	r0, #1
 3326              	.LVL287:
 352:src/console.c ****     reset_shift();
 3327              		.loc 2 352 5 is_stmt 0 view .LVU887
 3328 00e4 FFF7FEFF 		bl	load_ram_file
 3329              	.LVL288:
 353:src/console.c ****     r = no_key;
 3330              		.loc 2 353 5 is_stmt 1 view .LVU888
 3331 00e8 FFF7FEFF 		bl	reset_shift
 3332              	.LVL289:
 354:src/console.c ****     break;
 3333              		.loc 2 354 5 view .LVU889
 354:src/console.c ****     break;
 3334              		.loc 2 354 7 is_stmt 0 view .LVU890
 3335 00ec 364B     		ldr	r3, .L320+8
 3336 00ee 93E80300 		ldm	r3, {r0, r1}
 3337 00f2 84E80300 		stm	r4, {r0, r1}
 3338              	.LVL290:
 355:src/console.c ****   case LDPRG:
 3339              		.loc 2 355 5 is_stmt 1 view .LVU891
 3340 00f6 B5E7     		b	.L300
 3341              	.LVL291:
 3342              	.L293:
 357:src/console.c ****     reset_shift();
 3343              		.loc 2 357 5 view .LVU892
 3344 00f8 FFF7FEFF 		bl	load_prog_file
 3345              	.LVL292:
 358:src/console.c ****     r = no_key;
 3346              		.loc 2 358 5 view .LVU893
 3347 00fc FFF7FEFF 		bl	reset_shift
 3348              	.LVL293:
 359:src/console.c ****     break;
 3349              		.loc 2 359 5 view .LVU894
 359:src/console.c ****     break;
 3350              		.loc 2 359 7 is_stmt 0 view .LVU895
 3351 0100 314B     		ldr	r3, .L320+8
 3352 0102 93E80300 		ldm	r3, {r0, r1}
 3353 0106 84E80300 		stm	r4, {r0, r1}
 3354              	.LVL294:
 360:src/console.c ****   case SVPRG:
 3355              		.loc 2 360 5 is_stmt 1 view .LVU896
 3356 010a ABE7     		b	.L300
ARM GAS  /tmp/cc1aojQ3.s 			page 92


 3357              	.LVL295:
 3358              	.L292:
 367:src/console.c ****     reset_shift();
 3359              		.loc 2 367 5 view .LVU897
 3360 010c 2F4B     		ldr	r3, .L320+12
 3361 010e 3048     		ldr	r0, .L320+16
 3362              	.LVL296:
 367:src/console.c ****     reset_shift();
 3363              		.loc 2 367 5 is_stmt 0 view .LVU898
 3364 0110 9847     		blx	r3
 3365              	.LVL297:
 368:src/console.c ****     r = no_key;
 3366              		.loc 2 368 5 is_stmt 1 view .LVU899
 3367 0112 FFF7FEFF 		bl	reset_shift
 3368              	.LVL298:
 369:src/console.c ****     break;
 3369              		.loc 2 369 5 view .LVU900
 369:src/console.c ****     break;
 3370              		.loc 2 369 7 is_stmt 0 view .LVU901
 3371 0116 2C4B     		ldr	r3, .L320+8
 3372 0118 93E80300 		ldm	r3, {r0, r1}
 3373 011c 84E80300 		stm	r4, {r0, r1}
 3374              	.LVL299:
 370:src/console.c ****   case DOTS:
 3375              		.loc 2 370 5 is_stmt 1 view .LVU902
 3376 0120 A0E7     		b	.L300
 3377              	.LVL300:
 3378              	.L291:
 362:src/console.c ****     reset_shift();
 3379              		.loc 2 362 5 view .LVU903
 3380 0122 FFF7FEFF 		bl	save_prog_file
 3381              	.LVL301:
 363:src/console.c ****     r = no_key;
 3382              		.loc 2 363 5 view .LVU904
 3383 0126 FFF7FEFF 		bl	reset_shift
 3384              	.LVL302:
 364:src/console.c ****     break;
 3385              		.loc 2 364 5 view .LVU905
 364:src/console.c ****     break;
 3386              		.loc 2 364 7 is_stmt 0 view .LVU906
 3387 012a 274B     		ldr	r3, .L320+8
 3388 012c 93E80300 		ldm	r3, {r0, r1}
 3389 0130 84E80300 		stm	r4, {r0, r1}
 3390              	.LVL303:
 365:src/console.c ****   case HELP:
 3391              		.loc 2 365 5 is_stmt 1 view .LVU907
 3392 0134 96E7     		b	.L300
 3393              	.LVL304:
 3394              	.L290:
 372:src/console.c ****     reset_shift();
 3395              		.loc 2 372 5 view .LVU908
 3396 0136 FFF7FEFF 		bl	do_all_dots
 3397              	.LVL305:
 373:src/console.c ****     r = no_key;
 3398              		.loc 2 373 5 view .LVU909
 3399 013a FFF7FEFF 		bl	reset_shift
 3400              	.LVL306:
ARM GAS  /tmp/cc1aojQ3.s 			page 93


 374:src/console.c ****     break;
 3401              		.loc 2 374 5 view .LVU910
 374:src/console.c ****     break;
 3402              		.loc 2 374 7 is_stmt 0 view .LVU911
 3403 013e 224B     		ldr	r3, .L320+8
 3404 0140 93E80300 		ldm	r3, {r0, r1}
 3405 0144 84E80300 		stm	r4, {r0, r1}
 3406              	.LVL307:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3407              		.loc 2 375 5 is_stmt 1 view .LVU912
 3408 0148 8CE7     		b	.L300
 3409              	.LVL308:
 3410              	.L289:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3411              		.loc 2 377 5 view .LVU913
 3412              	.LBB123:
 3413              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3414              		.loc 2 310 6 view .LVU914
 3415              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3416              		.loc 2 311 3 view .LVU915
 312:src/console.c ****   temp.shift = shift;
 3417              		.loc 2 312 3 view .LVU916
 312:src/console.c ****   temp.shift = shift;
 3418              		.loc 2 312 16 is_stmt 0 view .LVU917
 3419 014a 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3420              		.loc 2 313 14 view .LVU918
 3421 014c 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3422              		.loc 2 312 16 view .LVU919
 3423 014e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3424              		.loc 2 313 3 is_stmt 1 view .LVU920
 313:src/console.c ****   process_keycode_with_shift (temp);
 3425              		.loc 2 313 14 is_stmt 0 view .LVU921
 3426 0152 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3427              		.loc 2 314 3 is_stmt 1 view .LVU922
 3428 0154 02AE     		add	r6, sp, #8
 3429 0156 96E80300 		ldm	r6, {r0, r1}
 3430              	.LVL309:
 314:src/console.c **** }
 3431              		.loc 2 314 3 is_stmt 0 view .LVU923
 3432 015a FFF7FEFF 		bl	process_keycode_with_shift
 3433              	.LVL310:
 314:src/console.c **** }
 3434              		.loc 2 314 3 view .LVU924
 3435              	.LBE124:
 3436              	.LBE123:
 378:src/console.c ****     r = no_key;
 3437              		.loc 2 378 5 is_stmt 1 view .LVU925
 3438              	.LBB125:
 3439              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3440              		.loc 2 310 6 view .LVU926
ARM GAS  /tmp/cc1aojQ3.s 			page 94


 3441              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3442              		.loc 2 311 3 view .LVU927
 312:src/console.c ****   temp.shift = shift;
 3443              		.loc 2 312 3 view .LVU928
 312:src/console.c ****   temp.shift = shift;
 3444              		.loc 2 312 16 is_stmt 0 view .LVU929
 3445 015e 3323     		movs	r3, #51
 3446              	.LVL311:
 3447              	.L318:
 312:src/console.c ****   temp.shift = shift;
 3448              		.loc 2 312 16 view .LVU930
 3449              	.LBE126:
 3450              	.LBE125:
 3451              	.LBB127:
 3452              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3453              		.loc 2 313 14 view .LVU931
 3454 0160 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3455              		.loc 2 312 16 view .LVU932
 3456 0162 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3457              		.loc 2 313 3 is_stmt 1 view .LVU933
 314:src/console.c **** }
 3458              		.loc 2 314 3 view .LVU934
 3459 0166 96E80300 		ldm	r6, {r0, r1}
 3460 016a FFF7FEFF 		bl	process_keycode_with_shift
 3461              	.LVL312:
 3462              	.LBE128:
 3463              	.LBE127:
 399:src/console.c ****     }
 3464              		.loc 2 399 7 view .LVU935
 399:src/console.c ****     }
 3465              		.loc 2 399 7 is_stmt 0 view .LVU936
 3466 016e 74E7     		b	.L284
 3467              	.LVL313:
 3468              	.L288:
 382:src/console.c ****     reset_shift();
 3469              		.loc 2 382 5 is_stmt 1 view .LVU937
 3470 0170 FFF7FEFF 		bl	toggle_default_menu
 3471              	.LVL314:
 383:src/console.c ****     r = no_key;
 3472              		.loc 2 383 5 view .LVU938
 3473 0174 FFF7FEFF 		bl	reset_shift
 3474              	.LVL315:
 384:src/console.c ****     break;
 3475              		.loc 2 384 5 view .LVU939
 384:src/console.c ****     break;
 3476              		.loc 2 384 7 is_stmt 0 view .LVU940
 3477 0178 134B     		ldr	r3, .L320+8
 3478 017a 93E80300 		ldm	r3, {r0, r1}
 3479 017e 84E80300 		stm	r4, {r0, r1}
 3480              	.LVL316:
 385:src/console.c ****   case SETUMEN:
 3481              		.loc 2 385 5 is_stmt 1 view .LVU941
 3482 0182 6FE7     		b	.L300
ARM GAS  /tmp/cc1aojQ3.s 			page 95


 3483              	.LVL317:
 3484              	.L287:
 387:src/console.c ****     reset_shift();
 3485              		.loc 2 387 5 view .LVU942
 3486              	.LBB130:
 3487              	.LBI130:
 671:src/menu.c    ****   // find the label 'MNU'
 3488              		.loc 1 671 6 view .LVU943
 3489              	.LBB131:
 673:src/menu.c    ****    build_user_menu_from_program (lbl);
 3490              		.loc 1 673 4 view .LVU944
 674:src/menu.c    **** }
 3491              		.loc 1 674 4 view .LVU945
 3492 0184 1348     		ldr	r0, .L320+20
 3493              	.LVL318:
 674:src/menu.c    **** }
 3494              		.loc 1 674 4 is_stmt 0 view .LVU946
 3495 0186 FFF7FEFF 		bl	build_user_menu_from_program
 3496              	.LVL319:
 3497              	.LBE131:
 3498              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3499              		.loc 2 388 5 is_stmt 1 view .LVU947
 3500 018a FFF7FEFF 		bl	reset_shift
 3501              	.LVL320:
 389:src/console.c ****     break;
 3502              		.loc 2 389 5 view .LVU948
 389:src/console.c ****     break;
 3503              		.loc 2 389 7 is_stmt 0 view .LVU949
 3504 018e 0E4B     		ldr	r3, .L320+8
 3505 0190 93E80300 		ldm	r3, {r0, r1}
 3506 0194 84E80300 		stm	r4, {r0, r1}
 3507              	.LVL321:
 389:src/console.c ****     break;
 3508              		.loc 2 389 16 is_stmt 1 view .LVU950
 390:src/console.c ****   case KCPX:
 3509              		.loc 2 390 5 view .LVU951
 3510 0198 64E7     		b	.L300
 3511              	.LVL322:
 3512              	.L301:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3513              		.loc 2 397 7 view .LVU952
 3514              	.LBB132:
 3515              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3516              		.loc 2 310 6 view .LVU953
 3517              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3518              		.loc 2 311 3 view .LVU954
 312:src/console.c ****   temp.shift = shift;
 3519              		.loc 2 312 3 view .LVU955
 312:src/console.c ****   temp.shift = shift;
 3520              		.loc 2 312 16 is_stmt 0 view .LVU956
 3521 019a 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3522              		.loc 2 313 14 view .LVU957
 3523 019c 0027     		movs	r7, #0
ARM GAS  /tmp/cc1aojQ3.s 			page 96


 312:src/console.c ****   temp.shift = shift;
 3524              		.loc 2 312 16 view .LVU958
 3525 019e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3526              		.loc 2 313 3 is_stmt 1 view .LVU959
 313:src/console.c ****   process_keycode_with_shift (temp);
 3527              		.loc 2 313 14 is_stmt 0 view .LVU960
 3528 01a2 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3529              		.loc 2 314 3 is_stmt 1 view .LVU961
 3530 01a4 02AE     		add	r6, sp, #8
 3531 01a6 96E80300 		ldm	r6, {r0, r1}
 3532              	.LVL323:
 314:src/console.c **** }
 3533              		.loc 2 314 3 is_stmt 0 view .LVU962
 3534 01aa FFF7FEFF 		bl	process_keycode_with_shift
 3535              	.LVL324:
 314:src/console.c **** }
 3536              		.loc 2 314 3 view .LVU963
 3537              	.LBE133:
 3538              	.LBE132:
 398:src/console.c ****       r = no_key;
 3539              		.loc 2 398 7 is_stmt 1 view .LVU964
 3540              	.LBB134:
 3541              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3542              		.loc 2 310 6 view .LVU965
 3543              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3544              		.loc 2 311 3 view .LVU966
 312:src/console.c ****   temp.shift = shift;
 3545              		.loc 2 312 3 view .LVU967
 312:src/console.c ****   temp.shift = shift;
 3546              		.loc 2 312 16 is_stmt 0 view .LVU968
 3547 01ae 6323     		movs	r3, #99
 3548 01b0 D6E7     		b	.L318
 3549              	.LVL325:
 3550              	.L319:
 312:src/console.c ****   temp.shift = shift;
 3551              		.loc 2 312 16 view .LVU969
 3552              	.LBE129:
 3553              	.LBE134:
 3554              	.LBB135:
 3555              	.LBB122:
 125:src/menu.c    ****   }
 3556              		.loc 1 125 5 is_stmt 1 view .LVU970
 125:src/menu.c    ****   }
 3557              		.loc 1 125 18 is_stmt 0 view .LVU971
 3558 01b2 0949     		ldr	r1, .L320+24
 3559 01b4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3560 01b6 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3561              		.loc 1 133 3 is_stmt 1 view .LVU972
 3562              	.L303:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3563              		.loc 1 133 43 view .LVU973
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/cc1aojQ3.s 			page 97


 3564              		.loc 1 133 53 is_stmt 0 view .LVU974
 3565 01b8 084A     		ldr	r2, .L320+28
 3566 01ba 1370     		strb	r3, [r2]
 3567 01bc 4BE7     		b	.L304
 3568              	.L321:
 3569 01be 00BF     		.align	2
 3570              	.L320:
 3571 01c0 00000000 		.word	main_ram
 3572 01c4 00000000 		.word	.LANCHOR1
 3573 01c8 00000000 		.word	.LANCHOR10
 3574 01cc 49040008 		.word	134218825
 3575 01d0 00000000 		.word	.LC17
 3576 01d4 4DF04E55 		.word	1431236685
 3577 01d8 00000000 		.word	.LANCHOR2
 3578 01dc 00000000 		.word	.LANCHOR3
 3579              	.LBE122:
 3580              	.LBE135:
 3581              		.cfi_endproc
 3582              	.LFE33:
 3584              		.section	.text.program_main,"ax",%progbits
 3585              		.align	1
 3586              		.p2align 2,,3
 3587              		.global	program_main
 3588              		.syntax unified
 3589              		.thumb
 3590              		.thumb_func
 3591              		.fpu fpv4-sp-d16
 3593              	program_main:
 3594              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3595              		.loc 2 407 20 is_stmt 1 view -0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 224
 3598              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3599              		.loc 2 408 3 view .LVU976
 409:src/console.c ****   struct _ndmap remapped;
 3600              		.loc 2 409 3 view .LVU977
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3601              		.loc 2 411 3 view .LVU978
 407:src/console.c ****   int c;
 3602              		.loc 2 407 20 is_stmt 0 view .LVU979
 3603 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3604              		.cfi_def_cfa_offset 32
 3605              		.cfi_offset 4, -32
 3606              		.cfi_offset 5, -28
 3607              		.cfi_offset 6, -24
 3608              		.cfi_offset 7, -20
 3609              		.cfi_offset 8, -16
 3610              		.cfi_offset 9, -12
 3611              		.cfi_offset 10, -8
 3612              		.cfi_offset 14, -4
 3613 0004 B8B0     		sub	sp, sp, #224
 3614              		.cfi_def_cfa_offset 256
 3615              		.loc 2 411 3 view .LVU980
ARM GAS  /tmp/cc1aojQ3.s 			page 98


 3616 0006 FFF7FEFF 		bl	init_mem
 3617              	.LVL326:
 412:src/console.c ****   init_RegionTab();
 3618              		.loc 2 412 3 is_stmt 1 view .LVU981
 3619 000a FFF7FEFF 		bl	init_RegionTab
 3620              	.LVL327:
 413:src/console.c ****   init_34s();
 3621              		.loc 2 413 3 view .LVU982
 3622 000e FFF7FEFF 		bl	init_34s
 3623              	.LVL328:
 414:src/console.c ****   State2.flags = 1;  
 3624              		.loc 2 414 3 view .LVU983
 3625              		.loc 2 414 16 is_stmt 0 view .LVU984
 3626 0012 B24A     		ldr	r2, .L425
 3627 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3628 0016 43F00103 		orr	r3, r3, #1
 3629 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3630              		.loc 2 415 3 is_stmt 1 view .LVU985
 3631 001c FFF7FEFF 		bl	check_create_wp34sdir
 3632              	.LVL329:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3633              		.loc 2 416 3 view .LVU986
 3634              		.loc 2 416 8 is_stmt 0 view .LVU987
 3635 0020 0020     		movs	r0, #0
 3636 0022 FFF7FEFF 		bl	load_ram_file
 3637              	.LVL330:
 3638              		.loc 2 416 6 view .LVU988
 3639 0026 08B9     		cbnz	r0, .L323
 3640              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU989
 3641              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU990
 3642 0028 AD4B     		ldr	r3, .L425+4
 3643 002a 1860     		str	r0, [r3]
 3644              	.L323:
 417:src/console.c ****   load_backup_file(0);
 3645              		.loc 2 417 3 is_stmt 1 view .LVU991
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3646              		.loc 2 419 3 is_stmt 0 view .LVU992
 3647 002c AD4C     		ldr	r4, .L425+8
 3648 002e AE4E     		ldr	r6, .L425+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
ARM GAS  /tmp/cc1aojQ3.s 			page 99


 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3649              		.loc 2 452 35 view .LVU993
 3650 0030 AE4F     		ldr	r7, .L425+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3651              		.loc 2 455 7 view .LVU994
 3652 0032 DFF82C83 		ldr	r8, .L425+132
 417:src/console.c ****   load_lib_file(0);
 3653              		.loc 2 417 3 view .LVU995
 3654 0036 0020     		movs	r0, #0
 3655 0038 FFF7FEFF 		bl	load_backup_file
 3656              	.LVL331:
 418:src/console.c ****   t20->newln = 0;
 3657              		.loc 2 418 3 is_stmt 1 view .LVU996
 3658 003c 0020     		movs	r0, #0
 3659 003e FFF7FEFF 		bl	load_lib_file
 3660              	.LVL332:
 419:src/console.c ****   t20->lnfill = 0;
 3661              		.loc 2 419 3 view .LVU997
 3662 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3663              		.loc 2 420 3 view .LVU998
 421:src/console.c ****   t20->xspc = -2;
 3664              		.loc 2 421 3 view .LVU999
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3665              		.loc 2 424 21 is_stmt 0 view .LVU1000
 3666 0044 AA4A     		ldr	r2, .L425+20
 421:src/console.c ****   t20->xspc = -2;
 3667              		.loc 2 421 14 view .LVU1001
 3668 0046 0121     		movs	r1, #1
 3669 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3670              		.loc 2 422 3 is_stmt 1 view .LVU1002
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3671              		.loc 2 423 15 is_stmt 0 view .LVU1003
 3672 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3673              		.loc 2 422 13 view .LVU1004
 3674 004c FE21     		movs	r1, #254
 3675 004e 9973     		strb	r1, [r3, #14]
ARM GAS  /tmp/cc1aojQ3.s 			page 100


 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3676              		.loc 2 423 3 is_stmt 1 view .LVU1005
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3677              		.loc 2 423 15 is_stmt 0 view .LVU1006
 3678 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3679              		.loc 2 419 14 view .LVU1007
 3680 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3681              		.loc 2 424 3 is_stmt 1 view .LVU1008
 425:src/console.c **** 
 3682              		.loc 2 425 21 is_stmt 0 view .LVU1009
 3683 0054 A74B     		ldr	r3, .L425+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3684              		.loc 2 424 21 view .LVU1010
 3685 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3686              		.loc 2 425 3 is_stmt 1 view .LVU1011
 425:src/console.c **** 
 3687              		.loc 2 425 21 is_stmt 0 view .LVU1012
 3688 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3689              		.loc 2 427 3 is_stmt 1 view .LVU1013
 3690 005a FFF7FEFF 		bl	display
 3691              	.LVL333:
 428:src/console.c ****   lcd_refresh();
 3692              		.loc 2 428 3 view .LVU1014
 3693 005e FFF7FEFF 		bl	display_current_menu
 3694              	.LVL334:
 429:src/console.c ****   JustDisplayed = 0;
 3695              		.loc 2 429 3 view .LVU1015
 3696 0062 A54B     		ldr	r3, .L425+28
 3697 0064 9847     		blx	r3
 3698              	.LVL335:
 430:src/console.c ****   /*
 3699              		.loc 2 430 3 view .LVU1016
 430:src/console.c ****   /*
 3700              		.loc 2 430 17 is_stmt 0 view .LVU1017
 3701 0066 A54B     		ldr	r3, .L425+32
 3702 0068 1D60     		str	r5, [r3]
 3703              	.L324:
 445:src/console.c **** 
 3704              		.loc 2 445 3 is_stmt 1 view .LVU1018
 447:src/console.c ****       {
 3705              		.loc 2 447 5 view .LVU1019
 447:src/console.c ****       {
 3706              		.loc 2 447 10 is_stmt 0 view .LVU1020
 3707 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3708              		.loc 2 447 8 view .LVU1021
 3709 006c 9B05     		lsls	r3, r3, #22
 3710 006e 40F1B980 		bpl	.L325
 447:src/console.c ****       {
 3711              		.loc 2 447 30 discriminator 1 view .LVU1022
 3712 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3713              		.loc 2 447 27 discriminator 1 view .LVU1023
ARM GAS  /tmp/cc1aojQ3.s 			page 101


 3714 0074 5D07     		lsls	r5, r3, #29
 3715 0076 40F1B580 		bpl	.L325
 449:src/console.c **** 	sys_sleep();
 3716              		.loc 2 449 2 is_stmt 1 view .LVU1024
 3717 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3718              		.loc 2 450 2 is_stmt 0 view .LVU1025
 3719 007c A04A     		ldr	r2, .L425+36
 449:src/console.c **** 	sys_sleep();
 3720              		.loc 2 449 2 view .LVU1026
 3721 007e 23F00203 		bic	r3, r3, #2
 3722 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3723              		.loc 2 450 2 is_stmt 1 view .LVU1027
 3724 0084 9047     		blx	r2
 3725              	.LVL336:
 3726              	.L326:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3727              		.loc 2 465 5 view .LVU1028
 3728              		.loc 2 465 9 is_stmt 0 view .LVU1029
 3729 0086 2368     		ldr	r3, [r4]
 3730              		.loc 2 465 8 view .LVU1030
 3731 0088 9805     		lsls	r0, r3, #22
 3732 008a 00F1D280 		bmi	.L332
 3733              	.L418:
 3734              		.loc 2 465 29 discriminator 1 view .LVU1031
 3735 008e 2368     		ldr	r3, [r4]
 3736              		.loc 2 465 26 discriminator 1 view .LVU1032
 3737 0090 5907     		lsls	r1, r3, #29
 3738 0092 00F1CE80 		bmi	.L332
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3739              		.loc 2 481 5 is_stmt 1 view .LVU1033
 3740 0096 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc1aojQ3.s 			page 102


 3741 0098 43F00203 		orr	r3, r3, #2
 3742 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3743              		.loc 2 484 5 view .LVU1034
 3744 009e 2368     		ldr	r3, [r4]
 3745 00a0 23F00403 		bic	r3, r3, #4
 3746 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3747              		.loc 2 487 5 view .LVU1035
 3748              		.loc 2 487 10 is_stmt 0 view .LVU1036
 3749 00a6 2368     		ldr	r3, [r4]
 3750              		.loc 2 487 8 view .LVU1037
 3751 00a8 DA06     		lsls	r2, r3, #27
 3752 00aa 0ED5     		bpl	.L337
 488:src/console.c ****       LCD_power_on();
 3753              		.loc 2 488 7 is_stmt 1 view .LVU1038
 3754 00ac 954B     		ldr	r3, .L425+40
 3755 00ae 9847     		blx	r3
 3756              	.LVL337:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3757              		.loc 2 489 7 view .LVU1039
 3758 00b0 954B     		ldr	r3, .L425+44
 3759 00b2 9847     		blx	r3
 3760              	.LVL338:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3761              		.loc 2 490 7 view .LVU1040
 3762 00b4 954B     		ldr	r3, .L425+48
 3763 00b6 9847     		blx	r3
 3764              	.LVL339:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3765              		.loc 2 492 7 view .LVU1041
 3766 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3767              		.loc 2 494 13 is_stmt 0 view .LVU1042
 3768 00ba 954A     		ldr	r2, .L425+52
 492:src/console.c **** 
 3769              		.loc 2 492 7 view .LVU1043
 3770 00bc 23F01003 		bic	r3, r3, #16
 3771 00c0 2360     		str	r3, [r4]
 3772              		.loc 2 494 7 is_stmt 1 view .LVU1044
 3773              		.loc 2 494 13 is_stmt 0 view .LVU1045
 3774 00c2 9047     		blx	r2
 3775              	.LVL340:
 3776              		.loc 2 494 10 view .LVU1046
 3777 00c4 08B9     		cbnz	r0, .L337
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3778              		.loc 2 495 9 is_stmt 1 view .LVU1047
 3779 00c6 934B     		ldr	r3, .L425+56
 3780 00c8 9847     		blx	r3
 3781              	.LVL341:
 3782              	.L337:
ARM GAS  /tmp/cc1aojQ3.s 			page 103


 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3783              		.loc 2 505 5 view .LVU1048
 3784              		.loc 2 505 9 is_stmt 0 view .LVU1049
 3785 00ca 934B     		ldr	r3, .L425+60
 3786 00cc 9847     		blx	r3
 3787              	.LVL342:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3788              		.loc 2 507 22 view .LVU1050
 3789 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3790              		.loc 2 505 9 view .LVU1051
 3791 00d0 0546     		mov	r5, r0
 3792              	.LVL343:
 3793              		.loc 2 507 5 is_stmt 1 view .LVU1052
 3794              		.loc 2 507 8 is_stmt 0 view .LVU1053
 3795 00d2 002B     		cmp	r3, #0
 3796 00d4 00F04681 		beq	.L339
 508:src/console.c ****       c = (*KeyCallback)( c );
 3797              		.loc 2 508 7 is_stmt 1 view .LVU1054
 3798              		.loc 2 508 12 is_stmt 0 view .LVU1055
 3799 00d8 9847     		blx	r3
 3800              	.LVL344:
 3801              		.loc 2 508 12 view .LVU1056
 3802 00da 0546     		mov	r5, r0
 3803              	.LVL345:
 3804              	.L340:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3805              		.loc 2 515 5 is_stmt 1 view .LVU1057
 3806              		.loc 2 515 8 is_stmt 0 view .LVU1058
 3807 00dc 622D     		cmp	r5, #98
 3808 00de 00F0BF80 		beq	.L341
 3809              		.loc 2 515 29 discriminator 1 view .LVU1059
 3810 00e2 002D     		cmp	r5, #0
 3811 00e4 C1DB     		blt	.L324
 516:src/console.c ****       reset_auto_off();
 3812              		.loc 2 516 7 is_stmt 1 view .LVU1060
 3813 00e6 8D4B     		ldr	r3, .L425+64
 3814 00e8 9847     		blx	r3
 3815              	.LVL346:
 517:src/console.c ****       //      start_key_timer();
 518:src/console.c ****     }
ARM GAS  /tmp/cc1aojQ3.s 			page 104


 519:src/console.c ****     if (c >= 0) {
 3816              		.loc 2 519 5 view .LVU1061
 520:src/console.c ****       remapped = remap(c);
 3817              		.loc 2 520 7 view .LVU1062
 3818              	.LBB143:
 3819              	.LBI143:
  56:src/console.c **** 
 3820              		.loc 2 56 22 view .LVU1063
 3821              	.LBB144:
  58:src/console.c **** 
 3822              		.loc 2 58 3 view .LVU1064
 3823              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3824              		.loc 3 1 1 view .LVU1065
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
ARM GAS  /tmp/cc1aojQ3.s 			page 105


  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3825              		.loc 3 59 3 view .LVU1066
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
ARM GAS  /tmp/cc1aojQ3.s 			page 106


 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3826              		.loc 3 118 3 view .LVU1067
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
ARM GAS  /tmp/cc1aojQ3.s 			page 107


 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3827              		.loc 3 177 1 view .LVU1068
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
ARM GAS  /tmp/cc1aojQ3.s 			page 108


 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3828              		.loc 3 235 1 view .LVU1069
  62:src/console.c **** 
 3829              		.loc 2 62 3 view .LVU1070
  64:src/console.c **** 
 3830              		.loc 2 64 3 view .LVU1071
  64:src/console.c **** 
 3831              		.loc 2 64 6 is_stmt 0 view .LVU1072
 3832 00ea 632D     		cmp	r5, #99
 3833 00ec 00F08A81 		beq	.L406
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3834              		.loc 2 66 3 is_stmt 1 view .LVU1073
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3835              		.loc 2 66 6 is_stmt 0 view .LVU1074
 3836 00f0 2C2D     		cmp	r5, #44
 3837 00f2 00F05881 		beq	.L344
  71:src/console.c ****     return mapping_running[c];
 3838              		.loc 2 71 3 is_stmt 1 view .LVU1075
  71:src/console.c ****     return mapping_running[c];
 3839              		.loc 2 71 15 is_stmt 0 view .LVU1076
 3840 00f6 8A4A     		ldr	r2, .L425+68
 3841 00f8 8A4B     		ldr	r3, .L425+72
 3842 00fa 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3843 00fe 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3844              		.loc 2 71 6 view .LVU1077
 3845 0100 59EA0109 		orrs	r9, r9, r1
 3846 0104 40F07181 		bne	.L407
  75:src/console.c ****   
 3847              		.loc 2 75 3 is_stmt 1 view .LVU1078
  75:src/console.c ****   
 3848              		.loc 2 75 22 is_stmt 0 view .LVU1079
 3849 0108 04A8     		add	r0, sp, #16
 3850 010a FFF7FEFF 		bl	get_current_menu_ref
 3851              	.LVL347:
ARM GAS  /tmp/cc1aojQ3.s 			page 109


  77:src/console.c ****   case KEY_F1:
 3852              		.loc 2 77 3 is_stmt 1 view .LVU1080
 3853 010e A5F12603 		sub	r3, r5, #38
 3854 0112 052B     		cmp	r3, #5
 3855 0114 00F28081 		bhi	.L346
 3856 0118 DFE813F0 		tbh	[pc, r3, lsl #1]
 3857              	.L348:
 3858 011c 8601     		.2byte	(.L353-.L348)/2
 3859 011e 0B00     		.2byte	(.L352-.L348)/2
 3860 0120 1500     		.2byte	(.L351-.L348)/2
 3861 0122 1F00     		.2byte	(.L350-.L348)/2
 3862 0124 2900     		.2byte	(.L349-.L348)/2
 3863 0126 3300     		.2byte	(.L347-.L348)/2
 3864              		.p2align 1
 3865              	.L354:
  80:src/console.c ****   case KEY_F2:
 3866              		.loc 2 80 5 view .LVU1081
  80:src/console.c ****   case KEY_F2:
 3867              		.loc 2 80 9 is_stmt 0 view .LVU1082
 3868 0128 FFF7FEFF 		bl	cur_shift
 3869              	.LVL348:
  80:src/console.c ****   case KEY_F2:
 3870              		.loc 2 80 8 view .LVU1083
 3871 012c 0128     		cmp	r0, #1
 3872 012e 00F01882 		beq	.L408
 3873              	.L352:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3874              		.loc 2 82 5 is_stmt 1 view .LVU1084
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3875              		.loc 2 82 9 is_stmt 0 view .LVU1085
 3876 0132 FFF7FEFF 		bl	cur_shift
 3877              	.LVL349:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3878              		.loc 2 82 8 view .LVU1086
 3879 0136 0028     		cmp	r0, #0
 3880 0138 00F0A381 		beq	.L409
  83:src/console.c ****   case KEY_F3:
 3881              		.loc 2 83 5 is_stmt 1 view .LVU1087
  83:src/console.c ****   case KEY_F3:
 3882              		.loc 2 83 9 is_stmt 0 view .LVU1088
 3883 013c FFF7FEFF 		bl	cur_shift
 3884              	.LVL350:
  83:src/console.c ****   case KEY_F3:
 3885              		.loc 2 83 8 view .LVU1089
 3886 0140 0128     		cmp	r0, #1
 3887 0142 00F0E881 		beq	.L410
 3888              	.L351:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3889              		.loc 2 85 5 is_stmt 1 view .LVU1090
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3890              		.loc 2 85 9 is_stmt 0 view .LVU1091
 3891 0146 FFF7FEFF 		bl	cur_shift
 3892              	.LVL351:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3893              		.loc 2 85 8 view .LVU1092
 3894 014a 0028     		cmp	r0, #0
 3895 014c 00F08F81 		beq	.L411
ARM GAS  /tmp/cc1aojQ3.s 			page 110


  86:src/console.c ****   case KEY_F4:
 3896              		.loc 2 86 5 is_stmt 1 view .LVU1093
  86:src/console.c ****   case KEY_F4:
 3897              		.loc 2 86 9 is_stmt 0 view .LVU1094
 3898 0150 FFF7FEFF 		bl	cur_shift
 3899              	.LVL352:
  86:src/console.c ****   case KEY_F4:
 3900              		.loc 2 86 8 view .LVU1095
 3901 0154 0128     		cmp	r0, #1
 3902 0156 00F0D481 		beq	.L412
 3903              	.L350:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3904              		.loc 2 88 5 is_stmt 1 view .LVU1096
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3905              		.loc 2 88 9 is_stmt 0 view .LVU1097
 3906 015a FFF7FEFF 		bl	cur_shift
 3907              	.LVL353:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3908              		.loc 2 88 8 view .LVU1098
 3909 015e 0028     		cmp	r0, #0
 3910 0160 00F07B81 		beq	.L413
  89:src/console.c ****   case KEY_F5:
 3911              		.loc 2 89 5 is_stmt 1 view .LVU1099
  89:src/console.c ****   case KEY_F5:
 3912              		.loc 2 89 9 is_stmt 0 view .LVU1100
 3913 0164 FFF7FEFF 		bl	cur_shift
 3914              	.LVL354:
  89:src/console.c ****   case KEY_F5:
 3915              		.loc 2 89 8 view .LVU1101
 3916 0168 0128     		cmp	r0, #1
 3917 016a 00F0B681 		beq	.L414
 3918              	.L349:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3919              		.loc 2 91 5 is_stmt 1 view .LVU1102
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3920              		.loc 2 91 9 is_stmt 0 view .LVU1103
 3921 016e FFF7FEFF 		bl	cur_shift
 3922              	.LVL355:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3923              		.loc 2 91 8 view .LVU1104
 3924 0172 0028     		cmp	r0, #0
 3925 0174 00F06781 		beq	.L415
  92:src/console.c ****   case KEY_F6:
 3926              		.loc 2 92 5 is_stmt 1 view .LVU1105
  92:src/console.c ****   case KEY_F6:
 3927              		.loc 2 92 9 is_stmt 0 view .LVU1106
 3928 0178 FFF7FEFF 		bl	cur_shift
 3929              	.LVL356:
  92:src/console.c ****   case KEY_F6:
 3930              		.loc 2 92 8 view .LVU1107
 3931 017c 0128     		cmp	r0, #1
 3932 017e 00F0B681 		beq	.L416
 3933              	.L347:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3934              		.loc 2 94 5 is_stmt 1 view .LVU1108
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3935              		.loc 2 94 9 is_stmt 0 view .LVU1109
ARM GAS  /tmp/cc1aojQ3.s 			page 111


 3936 0182 FFF7FEFF 		bl	cur_shift
 3937              	.LVL357:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3938              		.loc 2 94 8 view .LVU1110
 3939 0186 0028     		cmp	r0, #0
 3940 0188 40F04281 		bne	.L359
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3941              		.loc 2 94 33 is_stmt 1 view .LVU1111
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3942              		.loc 2 94 51 is_stmt 0 view .LVU1112
 3943 018c DDE93001 		ldrd	r0, r1, [sp, #192]
 3944 0190 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3945              	.LVL358:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3946              		.loc 2 94 51 view .LVU1113
 3947 0194 0DF1080A 		add	r10, sp, #8
 3948              	.LBE144:
 3949              	.LBE143:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3950              		.loc 2 521 10 view .LVU1114
 3951 0198 2F2D     		cmp	r5, #47
 3952              	.LBB153:
 3953              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3954              		.loc 2 94 51 view .LVU1115
 3955 019a 8AE80300 		stm	r10, {r0, r1}
 3956 019e 8946     		mov	r9, r1
 3957              	.LVL359:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3958              		.loc 2 94 51 view .LVU1116
 3959              	.LBE146:
 3960              	.LBE153:
 3961              		.loc 2 521 7 is_stmt 1 view .LVU1117
 3962              		.loc 2 521 10 is_stmt 0 view .LVU1118
 3963 01a0 69D1     		bne	.L370
 3964              	.LVL360:
 3965              	.L419:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3966              		.loc 2 522 2 is_stmt 1 view .LVU1119
 3967              	.LBB154:
 3968              	.LBB155:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3969              		.loc 1 123 13 is_stmt 0 view .LVU1120
 3970 01a2 614A     		ldr	r2, .L425+76
 3971 01a4 92F90030 		ldrsb	r3, [r2]
 3972              	.LBE155:
 3973              	.LBE154:
 3974              		.loc 2 522 2 view .LVU1121
 3975 01a8 4FFA89F1 		sxtb	r1, r9
 3976              	.LVL361:
 3977              	.LBB158:
 3978              	.LBI154:
 122:src/menu.c    ****   menu_name m = current_menu;
 3979              		.loc 1 122 6 is_stmt 1 view .LVU1122
 3980              	.LBB156:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3981              		.loc 1 123 3 view .LVU1123
ARM GAS  /tmp/cc1aojQ3.s 			page 112


 124:src/menu.c    ****     current_menu = default_menu;
 3982              		.loc 1 124 3 view .LVU1124
 124:src/menu.c    ****     current_menu = default_menu;
 3983              		.loc 1 124 6 is_stmt 0 view .LVU1125
 3984 01ac 9942     		cmp	r1, r3
 3985 01ae 00F02B81 		beq	.L417
 127:src/menu.c    ****     current_menu = last_menu;
 3986              		.loc 1 127 8 is_stmt 1 view .LVU1126
 127:src/menu.c    ****     current_menu = last_menu;
 3987              		.loc 1 127 11 is_stmt 0 view .LVU1127
 3988 01b2 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 3989              		.loc 1 128 5 is_stmt 1 view .LVU1128
 128:src/menu.c    ****   }
 3990              		.loc 1 128 18 is_stmt 0 view .LVU1129
 3991 01b4 04BF     		itt	eq
 3992 01b6 5D49     		ldreq	r1, .L425+80
 3993              	.LVL362:
 128:src/menu.c    ****   }
 3994              		.loc 1 128 18 view .LVU1130
 3995 01b8 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 3996              		.loc 1 131 5 is_stmt 1 view .LVU1131
 131:src/menu.c    ****   }
 3997              		.loc 1 131 18 is_stmt 0 view .LVU1132
 3998 01ba 1170     		strb	r1, [r2]
 3999              	.LVL363:
 4000              	.L372:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4001              		.loc 1 133 3 is_stmt 1 view .LVU1133
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4002              		.loc 1 133 6 is_stmt 0 view .LVU1134
 4003 01bc 092B     		cmp	r3, #9
 4004 01be 03D0     		beq	.L374
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4005              		.loc 1 133 23 view .LVU1135
 4006 01c0 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4007              		.loc 1 133 43 is_stmt 1 view .LVU1136
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4008              		.loc 1 133 53 is_stmt 0 view .LVU1137
 4009 01c2 1CBF     		itt	ne
 4010 01c4 594A     		ldrne	r2, .L425+80
 4011 01c6 1370     		strbne	r3, [r2]
 4012              	.L374:
 4013              	.LVL364:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4014              		.loc 1 133 53 view .LVU1138
 4015              	.LBE156:
 4016              	.LBE158:
 523:src/console.c **** 	display_current_menu ();
 4017              		.loc 2 523 2 is_stmt 1 view .LVU1139
 4018 01c8 FFF7FEFF 		bl	display_current_menu
 4019              	.LVL365:
 524:src/console.c **** 	reset_shift();
 4020              		.loc 2 524 2 view .LVU1140
 4021 01cc FFF7FEFF 		bl	reset_shift
ARM GAS  /tmp/cc1aojQ3.s 			page 113


 4022              	.LVL366:
 525:src/console.c **** 	remapped = no_key;
 4023              		.loc 2 525 2 view .LVU1141
 4024              		.loc 2 525 11 is_stmt 0 view .LVU1142
 4025 01d0 574B     		ldr	r3, .L425+84
 4026 01d2 93E80300 		ldm	r3, {r0, r1}
 4027 01d6 0DF1080A 		add	r10, sp, #8
 4028 01da 8AE80300 		stm	r10, {r0, r1}
 4029 01de 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4030              	.LVL367:
 4031              		.loc 2 525 11 view .LVU1143
 4032 01e0 8946     		mov	r9, r1
 4033              	.LVL368:
 4034              		.loc 2 525 11 view .LVU1144
 4035 01e2 48E0     		b	.L370
 4036              	.LVL369:
 4037              	.L325:
 452:src/console.c ****     {
 4038              		.loc 2 452 10 is_stmt 1 view .LVU1145
 452:src/console.c ****     {
 4039              		.loc 2 452 15 is_stmt 0 view .LVU1146
 4040 01e4 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 4041              		.loc 2 452 13 view .LVU1147
 4042 01e6 15F40075 		ands	r5, r5, #512
 4043 01ea 7FF44CAF 		bne	.L326
 452:src/console.c ****     {
 4044              		.loc 2 452 35 discriminator 1 view .LVU1148
 4045 01ee B847     		blx	r7
 4046              	.LVL370:
 452:src/console.c ****     {
 4047              		.loc 2 452 32 discriminator 1 view .LVU1149
 4048 01f0 0028     		cmp	r0, #0
 4049 01f2 3FF448AF 		beq	.L326
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4050              		.loc 2 454 7 is_stmt 1 view .LVU1150
 4051 01f6 2368     		ldr	r3, [r4]
 4052 01f8 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 4053              		.loc 2 455 7 is_stmt 0 view .LVU1151
 4054 01fc 2846     		mov	r0, r5
 4055 01fe 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4056              		.loc 2 454 7 view .LVU1152
 4057 0200 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 4058              		.loc 2 455 7 is_stmt 1 view .LVU1153
 4059 0202 C047     		blx	r8
 4060              	.LVL371:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4061              		.loc 2 456 7 view .LVU1154
 4062 0204 3E4B     		ldr	r3, .L425+36
 4063 0206 9847     		blx	r3
 4064              	.LVL372:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4065              		.loc 2 457 7 view .LVU1155
 457:src/console.c **** 	key_push (K_HEARTBEAT);
ARM GAS  /tmp/cc1aojQ3.s 			page 114


 4066              		.loc 2 457 11 is_stmt 0 view .LVU1156
 4067 0208 4A4B     		ldr	r3, .L425+88
 4068 020a 2846     		mov	r0, r5
 4069 020c 9847     		blx	r3
 4070              	.LVL373:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4071              		.loc 2 457 10 view .LVU1157
 4072 020e 48B1     		cbz	r0, .L330
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4073              		.loc 2 458 2 is_stmt 1 view .LVU1158
 4074 0210 494B     		ldr	r3, .L425+92
 4075 0212 6220     		movs	r0, #98
 4076 0214 9847     		blx	r3
 4077              	.LVL374:
 459:src/console.c ****       }
 4078              		.loc 2 459 2 view .LVU1159
 459:src/console.c ****       }
 4079              		.loc 2 459 12 is_stmt 0 view .LVU1160
 4080 0216 424B     		ldr	r3, .L425+68
 4081 0218 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4082              		.loc 2 459 5 view .LVU1161
 4083 021a 1AB1     		cbz	r2, .L330
 459:src/console.c ****       }
 4084              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1162
 459:src/console.c ****       }
 4085              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1163
 4086 021c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4087 021e 013A     		subs	r2, r2, #1
 4088 0220 D2B2     		uxtb	r2, r2
 4089 0222 1A70     		strb	r2, [r3]
 4090              	.L330:
 461:src/console.c ****     }
 4091              		.loc 2 461 7 is_stmt 1 view .LVU1164
 4092 0224 454B     		ldr	r3, .L425+96
 4093 0226 0020     		movs	r0, #0
 4094 0228 9847     		blx	r3
 4095              	.LVL375:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4096              		.loc 2 465 5 view .LVU1165
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4097              		.loc 2 465 9 is_stmt 0 view .LVU1166
 4098 022a 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4099              		.loc 2 465 8 view .LVU1167
 4100 022c 9805     		lsls	r0, r3, #22
 4101 022e 7FF52EAF 		bpl	.L418
 4102              	.L332:
 466:src/console.c ****         // Going to off mode
 4103              		.loc 2 466 7 is_stmt 1 view .LVU1168
 466:src/console.c ****         // Going to off mode
 4104              		.loc 2 466 12 is_stmt 0 view .LVU1169
 4105 0232 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4106              		.loc 2 466 10 view .LVU1170
 4107 0234 15F00405 		ands	r5, r5, #4
 4108 0238 7FF417AF 		bne	.L324
ARM GAS  /tmp/cc1aojQ3.s 			page 115


 468:src/console.c ****         draw_power_off_image(1);
 4109              		.loc 2 468 9 is_stmt 1 view .LVU1171
 4110 023c 404B     		ldr	r3, .L425+100
 4111 023e 2846     		mov	r0, r5
 4112 0240 9847     		blx	r3
 4113              	.LVL376:
 469:src/console.c **** 
 4114              		.loc 2 469 9 view .LVU1172
 4115 0242 404B     		ldr	r3, .L425+104
 4116 0244 0120     		movs	r0, #1
 4117 0246 9847     		blx	r3
 4118              	.LVL377:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4119              		.loc 2 471 9 view .LVU1173
 4120 0248 3F4B     		ldr	r3, .L425+108
 4121 024a 2846     		mov	r0, r5
 4122 024c 9847     		blx	r3
 4123              	.LVL378:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4124              		.loc 2 472 9 view .LVU1174
 4125 024e 2368     		ldr	r3, [r4]
 4126 0250 43F00403 		orr	r3, r3, #4
 4127 0254 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4128              		.loc 2 473 9 view .LVU1175
 4129 0256 2368     		ldr	r3, [r4]
 4130 0258 43F01003 		orr	r3, r3, #16
 4131 025c 2360     		str	r3, [r4]
 4132 025e 04E7     		b	.L324
 4133              	.LVL379:
 4134              	.L341:
 519:src/console.c ****       remapped = remap(c);
 4135              		.loc 2 519 5 view .LVU1176
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4136              		.loc 2 520 7 view .LVU1177
 4137              	.LBB159:
  56:src/console.c **** 
 4138              		.loc 2 56 22 view .LVU1178
 4139              	.LBB147:
  58:src/console.c **** 
 4140              		.loc 2 58 3 view .LVU1179
   1:src/keytran.c ****     {K_RELEASE, -1},
 4141              		.loc 3 1 1 view .LVU1180
  59:src/keytran.c ****     {K_RELEASE, -1},
 4142              		.loc 3 59 3 view .LVU1181
 118:src/keytran.c ****     {K_RELEASE, -1},
 4143              		.loc 3 118 3 view .LVU1182
 177:src/keytran.c ****     {K_RELEASE, -1},
 4144              		.loc 3 177 1 view .LVU1183
 4145              		.loc 3 235 1 view .LVU1184
  62:src/console.c **** 
 4146              		.loc 2 62 3 view .LVU1185
  62:src/console.c **** 
 4147              		.loc 2 62 23 view .LVU1186
  62:src/console.c **** 
 4148              		.loc 2 62 30 is_stmt 0 view .LVU1187
 4149 0260 3A4B     		ldr	r3, .L425+112
ARM GAS  /tmp/cc1aojQ3.s 			page 116


 4150              	.LVL380:
 4151              	.L405:
  62:src/console.c **** 
 4152              		.loc 2 62 30 view .LVU1188
 4153 0262 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4154              	.LVL381:
  62:src/console.c **** 
 4155              		.loc 2 62 30 view .LVU1189
 4156 0264 93E80300 		ldm	r3, {r0, r1}
 4157 0268 0DF1080A 		add	r10, sp, #8
 4158 026c 8AE80300 		stm	r10, {r0, r1}
 4159 0270 8946     		mov	r9, r1
 4160              	.LVL382:
 4161              	.L343:
  62:src/console.c **** 
 4162              		.loc 2 62 30 view .LVU1190
 4163              	.LBE147:
 4164              	.LBE159:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4165              		.loc 2 521 7 is_stmt 1 view .LVU1191
 521:src/console.c **** 	set_menu ( remapped.shift );
 4166              		.loc 2 521 10 is_stmt 0 view .LVU1192
 4167 0272 2F2D     		cmp	r5, #47
 4168 0274 95D0     		beq	.L419
 4169              	.L370:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4170              		.loc 2 527 7 is_stmt 1 view .LVU1193
 4171              		.loc 2 527 10 is_stmt 0 view .LVU1194
 4172 0276 302D     		cmp	r5, #48
 4173 0278 19D1     		bne	.L375
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4174              		.loc 2 528 2 is_stmt 1 view .LVU1195
 4175 027a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4176              		.loc 2 529 2 is_stmt 0 view .LVU1196
 4177 027c 344D     		ldr	r5, .L425+116
 4178              	.LVL383:
 4179              		.loc 2 529 2 view .LVU1197
 4180 027e 3548     		ldr	r0, .L425+120
 4181 0280 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4182              		.loc 2 528 2 view .LVU1198
 4183 0282 43F04003 		orr	r3, r3, #64
 4184              		.loc 2 529 2 view .LVU1199
 4185 0286 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4186              		.loc 2 528 2 view .LVU1200
 4187 0288 2360     		str	r3, [r4]
 4188              		.loc 2 529 2 is_stmt 1 view .LVU1201
 4189 028a A847     		blx	r5
 4190              	.LVL384:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4191              		.loc 2 530 2 view .LVU1202
 4192 028c 2368     		ldr	r3, [r4]
 4193 028e 23F04003 		bic	r3, r3, #64
 4194 0292 2360     		str	r3, [r4]
ARM GAS  /tmp/cc1aojQ3.s 			page 117


 531:src/console.c **** 	reset_shift();
 4195              		.loc 2 531 2 view .LVU1203
 4196 0294 FFF7FEFF 		bl	reset_shift
 4197              	.LVL385:
 532:src/console.c **** 	remapped =  no_key;
 4198              		.loc 2 532 2 view .LVU1204
 4199              		.loc 2 532 11 is_stmt 0 view .LVU1205
 4200 0298 254B     		ldr	r3, .L425+84
 4201 029a 93E80300 		ldm	r3, {r0, r1}
 4202 029e 0DF1080A 		add	r10, sp, #8
 4203 02a2 8AE80300 		stm	r10, {r0, r1}
 4204 02a6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4205              	.LVL386:
 4206              		.loc 2 532 11 view .LVU1206
 4207 02a8 8946     		mov	r9, r1
 4208              	.LVL387:
 533:src/console.c **** 	display_current_menu();
 4209              		.loc 2 533 2 is_stmt 1 view .LVU1207
 4210 02aa FFF7FEFF 		bl	display_current_menu
 4211              	.LVL388:
 4212              	.L375:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4213              		.loc 2 535 7 view .LVU1208
 4214              		.loc 2 535 10 is_stmt 0 view .LVU1209
 4215 02ae 312D     		cmp	r5, #49
 4216 02b0 7BD0     		beq	.L378
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4217              		.loc 2 539 7 is_stmt 1 view .LVU1210
 4218              		.loc 2 539 10 is_stmt 0 view .LVU1211
 4219 02b2 322D     		cmp	r5, #50
 4220 02b4 00F09380 		beq	.L377
 4221              	.L421:
 4222              		.loc 2 539 10 view .LVU1212
 4223 02b8 0DF1080A 		add	r10, sp, #8
 4224              	.LVL389:
 4225              	.L365:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4226              		.loc 2 540 7 is_stmt 1 view .LVU1213
 4227              		.loc 2 540 7 is_stmt 0 view .LVU1214
 4228 02bc 8DF80850 		strb	r5, [sp, #8]
 4229 02c0 CDF80C90 		str	r9, [sp, #12]
 4230 02c4 9AE80300 		ldm	r10, {r0, r1}
 4231 02c8 FFF7FEFF 		bl	process_keycode_with_shift
 4232              	.LVL390:
 541:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4233              		.loc 2 541 7 is_stmt 1 view .LVU1215
 4234              		.loc 2 541 10 is_stmt 0 view .LVU1216
 4235 02cc 622D     		cmp	r5, #98
 4236 02ce 64D0     		beq	.L420
 4237              	.LVL391:
 4238              	.L366:
 4239              		.loc 2 541 59 is_stmt 1 view .LVU1217
 4240              	.LBB160:
ARM GAS  /tmp/cc1aojQ3.s 			page 118


 4241              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 4242              		.loc 2 252 6 view .LVU1218
 4243              	.LBB161:
 253:src/console.c **** }
 4244              		.loc 2 253 5 view .LVU1219
 253:src/console.c **** }
 4245              		.loc 2 253 19 is_stmt 0 view .LVU1220
 4246 02d0 214B     		ldr	r3, .L425+124
 4247 02d2 9847     		blx	r3
 4248              	.LVL392:
 253:src/console.c **** }
 4249              		.loc 2 253 17 view .LVU1221
 4250 02d4 214B     		ldr	r3, .L425+128
 4251 02d6 1860     		str	r0, [r3]
 254:src/console.c **** 
 4252              		.loc 2 254 1 view .LVU1222
 4253 02d8 C7E6     		b	.L324
 4254              	.L426:
 4255 02da 00BF     		.align	2
 4256              	.L425:
 4257 02dc 00000000 		.word	StateWhileOn
 4258 02e0 00000000 		.word	DispMsg
 4259 02e4 00200010 		.word	268443648
 4260 02e8 00000000 		.word	KeyCallback
 4261 02ec 7D030008 		.word	134218621
 4262 02f0 00000000 		.word	run_menu_item
 4263 02f4 00000000 		.word	menu_line_str
 4264 02f8 31020008 		.word	134218289
 4265 02fc 00000000 		.word	JustDisplayed
 4266 0300 19040008 		.word	134218777
 4267 0304 19020008 		.word	134218265
 4268 0308 91030008 		.word	134218641
 4269 030c E5020008 		.word	134218469
 4270 0310 59020008 		.word	134218329
 4271 0314 35020008 		.word	134218293
 4272 0318 89030008 		.word	134218633
 4273 031c B9030008 		.word	134218681
 4274 0320 00000000 		.word	Pause
 4275 0324 00000000 		.word	Running
 4276 0328 00000000 		.word	.LANCHOR1
 4277 032c 00000000 		.word	.LANCHOR3
 4278 0330 00000000 		.word	.LANCHOR10
 4279 0334 01040008 		.word	134218753
 4280 0338 81030008 		.word	134218625
 4281 033c F5030008 		.word	134218741
 4282 0340 55020008 		.word	134218325
 4283 0344 2D040008 		.word	134218797
 4284 0348 1D020008 		.word	134218269
 4285 034c 00000000 		.word	.LANCHOR19
 4286 0350 59030008 		.word	134218585
 4287 0354 00000000 		.word	.LANCHOR18
 4288 0358 B9040008 		.word	134218937
 4289 035c 00000000 		.word	.LANCHOR8
 4290 0360 F9030008 		.word	134218745
 4291              	.LVL393:
 4292              	.L339:
ARM GAS  /tmp/cc1aojQ3.s 			page 119


 254:src/console.c **** 
 4293              		.loc 2 254 1 view .LVU1223
 4294              	.LBE161:
 4295              	.LBE160:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4296              		.loc 2 510 10 is_stmt 1 view .LVU1224
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4297              		.loc 2 510 15 is_stmt 0 view .LVU1225
 4298 0364 8D4B     		ldr	r3, .L427
 4299 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4300              		.loc 2 510 13 view .LVU1226
 4301 0368 DB07     		lsls	r3, r3, #31
 4302 036a 7FF5B7AE 		bpl	.L340
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4303              		.loc 2 510 37 discriminator 1 view .LVU1227
 4304 036e FFF7FEFF 		bl	DM42_Ticker
 4305              	.LVL394:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4306              		.loc 2 510 37 discriminator 1 view .LVU1228
 4307 0372 8B4A     		ldr	r2, .L427+4
 4308 0374 8B4B     		ldr	r3, .L427+8
 4309 0376 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4310              		.loc 2 510 32 discriminator 1 view .LVU1229
 4311 037a B0F1333F 		cmp	r0, #858993459
 4312 037e BFF4ADAE 		bcs	.L340
 511:src/console.c ****       finish_LEQ();
 4313              		.loc 2 511 7 is_stmt 1 view .LVU1230
 511:src/console.c ****       finish_LEQ();
 4314              		.loc 2 511 21 is_stmt 0 view .LVU1231
 4315 0382 8420     		movs	r0, #132
 4316 0384 FFF7FEFF 		bl	is_dot
 4317              	.LVL395:
 511:src/console.c ****       finish_LEQ();
 4318              		.loc 2 511 7 view .LVU1232
 4319 0388 B0FA80F1 		clz	r1, r0
 4320 038c 4909     		lsrs	r1, r1, #5
 4321 038e 8420     		movs	r0, #132
 4322 0390 FFF7FEFF 		bl	dot
 4323              	.LVL396:
 512:src/console.c ****     }
 4324              		.loc 2 512 7 is_stmt 1 view .LVU1233
 4325 0394 FFF7FEFF 		bl	finish_LEQ
 4326              	.LVL397:
 4327 0398 A0E6     		b	.L340
 4328              	.LVL398:
 4329              	.L420:
 4330              		.loc 2 541 43 is_stmt 0 discriminator 2 view .LVU1234
 4331 039a 834B     		ldr	r3, .L427+12
 4332 039c 1B68     		ldr	r3, [r3]
 4333 039e 002B     		cmp	r3, #0
 4334 03a0 3FF463AE 		beq	.L324
 4335 03a4 94E7     		b	.L366
 4336              	.LVL399:
 4337              	.L344:
 521:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/cc1aojQ3.s 			page 120


 4338              		.loc 2 521 7 is_stmt 1 view .LVU1235
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4339              		.loc 2 527 7 view .LVU1236
 535:src/console.c **** 	remapped = do_multi (remapped);
 4340              		.loc 2 535 7 view .LVU1237
 4341              	.LBB162:
 4342              	.LBB148:
 4343              	.LBB145:
  68:src/console.c ****   }
 4344              		.loc 2 68 12 is_stmt 0 view .LVU1238
 4345 03a6 4FF00C09 		mov	r9, #12
 4346              	.LVL400:
 4347              	.L378:
  68:src/console.c ****   }
 4348              		.loc 2 68 12 view .LVU1239
 4349              	.LBE145:
 4350              	.LBE148:
 4351              	.LBE162:
 536:src/console.c **** 	display_current_menu();
 4352              		.loc 2 536 2 is_stmt 1 view .LVU1240
 536:src/console.c **** 	display_current_menu();
 4353              		.loc 2 536 13 is_stmt 0 view .LVU1241
 4354 03aa 3123     		movs	r3, #49
 4355 03ac CDF80C90 		str	r9, [sp, #12]
 4356 03b0 8DF80830 		strb	r3, [sp, #8]
 4357 03b4 6D46     		mov	r5, sp
 4358 03b6 0DF1080A 		add	r10, sp, #8
 4359 03ba 9AE80600 		ldm	r10, {r1, r2}
 4360 03be 2846     		mov	r0, r5
 4361 03c0 FFF7FEFF 		bl	do_multi
 4362              	.LVL401:
 4363 03c4 95E80300 		ldm	r5, {r0, r1}
 4364 03c8 8AE80300 		stm	r10, {r0, r1}
 4365 03cc 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4366              	.LVL402:
 536:src/console.c **** 	display_current_menu();
 4367              		.loc 2 536 13 view .LVU1242
 4368 03d0 DDF80C90 		ldr	r9, [sp, #12]
 4369              	.LVL403:
 537:src/console.c ****       }
 4370              		.loc 2 537 2 is_stmt 1 view .LVU1243
 4371 03d4 FFF7FEFF 		bl	display_current_menu
 4372              	.LVL404:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4373              		.loc 2 539 7 view .LVU1244
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4374              		.loc 2 539 10 is_stmt 0 view .LVU1245
 4375 03d8 322D     		cmp	r5, #50
 4376 03da 7FF46DAF 		bne	.L421
 4377              	.L377:
 542:src/console.c ****     }
 543:src/console.c ****   }
 544:src/console.c ****   save_ram_file(0);
 4378              		.loc 2 544 3 is_stmt 1 view .LVU1246
 4379 03de 0020     		movs	r0, #0
 545:src/console.c ****   //  free_storage();
 546:src/console.c ****   return;
ARM GAS  /tmp/cc1aojQ3.s 			page 121


 547:src/console.c **** }
 4380              		.loc 2 547 1 is_stmt 0 view .LVU1247
 4381 03e0 38B0     		add	sp, sp, #224
 4382              		.cfi_remember_state
 4383              		.cfi_def_cfa_offset 32
 4384              		@ sp needed
 4385 03e2 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4386              		.cfi_restore 14
 4387              		.cfi_restore 10
 4388              		.cfi_restore 9
 4389              		.cfi_restore 8
 4390              		.cfi_restore 7
 4391              		.cfi_restore 6
 4392              		.cfi_restore 5
 4393              		.cfi_restore 4
 4394              		.cfi_def_cfa_offset 0
 4395              	.LVL405:
 544:src/console.c ****   //  free_storage();
 4396              		.loc 2 544 3 view .LVU1248
 4397 03e6 FFF7FEBF 		b	save_ram_file
 4398              	.LVL406:
 4399              	.L407:
 4400              		.cfi_restore_state
 4401              	.LBB163:
 4402              	.LBB149:
  72:src/console.c ****   }
 4403              		.loc 2 72 5 is_stmt 1 view .LVU1249
  72:src/console.c ****   }
 4404              		.loc 2 72 27 is_stmt 0 view .LVU1250
 4405 03ea 704B     		ldr	r3, .L427+16
 4406              	.L404:
 124:src/console.c ****     break;
 4407              		.loc 2 124 26 view .LVU1251
 4408 03ec 03EBC502 		add	r2, r3, r5, lsl #3
 4409 03f0 92E80300 		ldm	r2, {r0, r1}
 4410 03f4 0DF1080A 		add	r10, sp, #8
 4411 03f8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4412              	.LVL407:
 124:src/console.c ****     break;
 4413              		.loc 2 124 26 view .LVU1252
 4414 03fc 8946     		mov	r9, r1
 4415              	.LVL408:
 124:src/console.c ****     break;
 4416              		.loc 2 124 26 view .LVU1253
 4417 03fe 8AE80300 		stm	r10, {r0, r1}
 4418 0402 36E7     		b	.L343
 4419              	.LVL409:
 4420              	.L406:
  64:src/console.c **** 
 4421              		.loc 2 64 16 is_stmt 1 view .LVU1254
  64:src/console.c **** 
 4422              		.loc 2 64 23 is_stmt 0 view .LVU1255
 4423 0404 6A4B     		ldr	r3, .L427+20
 4424 0406 2CE7     		b	.L405
 4425              	.LVL410:
 4426              	.L417:
  64:src/console.c **** 
ARM GAS  /tmp/cc1aojQ3.s 			page 122


 4427              		.loc 2 64 23 view .LVU1256
 4428              	.LBE149:
 4429              	.LBE163:
 4430              	.LBB164:
 4431              	.LBB157:
 125:src/menu.c    ****   }
 4432              		.loc 1 125 5 is_stmt 1 view .LVU1257
 125:src/menu.c    ****   }
 4433              		.loc 1 125 18 is_stmt 0 view .LVU1258
 4434 0408 6A49     		ldr	r1, .L427+24
 4435              	.LVL411:
 125:src/menu.c    ****   }
 4436              		.loc 1 125 18 view .LVU1259
 4437 040a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4438 040c 1170     		strb	r1, [r2]
 4439 040e D5E6     		b	.L372
 4440              	.LVL412:
 4441              	.L359:
 125:src/menu.c    ****   }
 4442              		.loc 1 125 18 view .LVU1260
 4443              	.LBE157:
 4444              	.LBE164:
 4445              	.LBB165:
 4446              	.LBB150:
  95:src/console.c ****   }
 4447              		.loc 2 95 5 is_stmt 1 view .LVU1261
  95:src/console.c ****   }
 4448              		.loc 2 95 9 is_stmt 0 view .LVU1262
 4449 0410 FFF7FEFF 		bl	cur_shift
 4450              	.LVL413:
  95:src/console.c ****   }
 4451              		.loc 2 95 8 view .LVU1263
 4452 0414 0128     		cmp	r0, #1
 4453 0416 56D0     		beq	.L422
 4454              	.L346:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4455              		.loc 2 98 3 is_stmt 1 view .LVU1264
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4456              		.loc 2 98 8 is_stmt 0 view .LVU1265
 4457 0418 FFF7FEFF 		bl	get_alpha_state
 4458              	.LVL414:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4459              		.loc 2 98 6 view .LVU1266
 4460 041c D8B3     		cbz	r0, .L360
  99:src/console.c ****       switch (cur_shift()) { 
 4461              		.loc 2 99 5 is_stmt 1 view .LVU1267
  99:src/console.c ****       switch (cur_shift()) { 
 4462              		.loc 2 99 8 is_stmt 0 view .LVU1268
 4463 041e 1C2D     		cmp	r5, #28
 4464 0420 00F08580 		beq	.L423
 116:src/console.c ****   }
 4465              		.loc 2 116 5 is_stmt 1 view .LVU1269
 116:src/console.c ****   }
 4466              		.loc 2 116 26 is_stmt 0 view .LVU1270
 4467 0424 644B     		ldr	r3, .L427+28
 4468 0426 E1E7     		b	.L404
 4469              	.L353:
ARM GAS  /tmp/cc1aojQ3.s 			page 123


  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4470              		.loc 2 79 5 is_stmt 1 view .LVU1271
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4471              		.loc 2 79 9 is_stmt 0 view .LVU1272
 4472 0428 FFF7FEFF 		bl	cur_shift
 4473              	.LVL415:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4474              		.loc 2 79 8 view .LVU1273
 4475 042c 0028     		cmp	r0, #0
 4476 042e 7FF47BAE 		bne	.L354
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4477              		.loc 2 79 33 is_stmt 1 view .LVU1274
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4478              		.loc 2 79 51 is_stmt 0 view .LVU1275
 4479 0432 DDE90801 		ldrd	r0, r1, [sp, #32]
 4480 0436 0DF1080A 		add	r10, sp, #8
 4481 043a 8AE80300 		stm	r10, {r0, r1}
 4482 043e 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4483              	.LVL416:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4484              		.loc 2 79 51 view .LVU1276
 4485 0442 8946     		mov	r9, r1
 4486              	.LVL417:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4487              		.loc 2 79 51 view .LVU1277
 4488 0444 15E7     		b	.L343
 4489              	.LVL418:
 4490              	.L415:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4491              		.loc 2 91 33 is_stmt 1 view .LVU1278
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4492              		.loc 2 91 51 is_stmt 0 view .LVU1279
 4493 0446 DDE92801 		ldrd	r0, r1, [sp, #160]
 4494 044a 0DF1080A 		add	r10, sp, #8
 4495 044e 8AE80300 		stm	r10, {r0, r1}
 4496 0452 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4497              	.LVL419:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4498              		.loc 2 91 51 view .LVU1280
 4499 0456 8946     		mov	r9, r1
 4500              	.LVL420:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4501              		.loc 2 91 51 view .LVU1281
 4502 0458 0BE7     		b	.L343
 4503              	.LVL421:
 4504              	.L413:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4505              		.loc 2 88 33 is_stmt 1 view .LVU1282
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4506              		.loc 2 88 51 is_stmt 0 view .LVU1283
 4507 045a DDE92001 		ldrd	r0, r1, [sp, #128]
 4508 045e 0DF1080A 		add	r10, sp, #8
 4509 0462 8AE80300 		stm	r10, {r0, r1}
 4510 0466 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4511              	.LVL422:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4512              		.loc 2 88 51 view .LVU1284
ARM GAS  /tmp/cc1aojQ3.s 			page 124


 4513 046a 8946     		mov	r9, r1
 4514              	.LVL423:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4515              		.loc 2 88 51 view .LVU1285
 4516 046c 01E7     		b	.L343
 4517              	.LVL424:
 4518              	.L411:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4519              		.loc 2 85 33 is_stmt 1 view .LVU1286
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4520              		.loc 2 85 51 is_stmt 0 view .LVU1287
 4521 046e DDE91801 		ldrd	r0, r1, [sp, #96]
 4522 0472 0DF1080A 		add	r10, sp, #8
 4523 0476 8AE80300 		stm	r10, {r0, r1}
 4524 047a 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4525              	.LVL425:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4526              		.loc 2 85 51 view .LVU1288
 4527 047e 8946     		mov	r9, r1
 4528              	.LVL426:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4529              		.loc 2 85 51 view .LVU1289
 4530 0480 F7E6     		b	.L343
 4531              	.LVL427:
 4532              	.L409:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4533              		.loc 2 82 33 is_stmt 1 view .LVU1290
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4534              		.loc 2 82 51 is_stmt 0 view .LVU1291
 4535 0482 DDE91001 		ldrd	r0, r1, [sp, #64]
 4536 0486 0DF1080A 		add	r10, sp, #8
 4537 048a 8AE80300 		stm	r10, {r0, r1}
 4538 048e 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4539              	.LVL428:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4540              		.loc 2 82 51 view .LVU1292
 4541 0492 8946     		mov	r9, r1
 4542              	.LVL429:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4543              		.loc 2 82 51 view .LVU1293
 4544 0494 EDE6     		b	.L343
 4545              	.LVL430:
 4546              	.L360:
 119:src/console.c ****   case SHIFT_N:    
 4547              		.loc 2 119 3 is_stmt 1 view .LVU1294
 119:src/console.c ****   case SHIFT_N:    
 4548              		.loc 2 119 11 is_stmt 0 view .LVU1295
 4549 0496 FFF7FEFF 		bl	cur_shift
 4550              	.LVL431:
 119:src/console.c ****   case SHIFT_N:    
 4551              		.loc 2 119 3 view .LVU1296
 4552 049a 0128     		cmp	r0, #1
 4553 049c 45D0     		beq	.L367
 4554 049e 0228     		cmp	r0, #2
 4555 04a0 02D0     		beq	.L368
 4556 04a2 70B1     		cbz	r0, .L369
  58:src/console.c **** 
ARM GAS  /tmp/cc1aojQ3.s 			page 125


 4557              		.loc 2 58 41 view .LVU1297
 4558 04a4 EDB2     		uxtb	r5, r5
 4559              	.LVL432:
  58:src/console.c **** 
 4560              		.loc 2 58 41 view .LVU1298
 4561 04a6 E4E6     		b	.L343
 4562              	.LVL433:
 4563              	.L368:
 125:src/console.c ****   case SHIFT_G:
 4564              		.loc 2 125 5 is_stmt 1 view .LVU1299
 127:src/console.c ****     break;
 4565              		.loc 2 127 5 view .LVU1300
 127:src/console.c ****     break;
 4566              		.loc 2 127 26 is_stmt 0 view .LVU1301
 4567 04a8 444B     		ldr	r3, .L427+32
 4568 04aa 03EBC502 		add	r2, r3, r5, lsl #3
 4569 04ae 92E80300 		ldm	r2, {r0, r1}
 4570 04b2 0DF1080A 		add	r10, sp, #8
 4571 04b6 8AE80300 		stm	r10, {r0, r1}
 4572 04ba 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4573              	.LVL434:
 127:src/console.c ****     break;
 4574              		.loc 2 127 26 view .LVU1302
 4575 04be 8946     		mov	r9, r1
 4576              	.LVL435:
 127:src/console.c ****     break;
 4577              		.loc 2 127 26 view .LVU1303
 4578 04c0 D7E6     		b	.L343
 4579              	.LVL436:
 4580              	.L369:
 121:src/console.c ****     break;
 4581              		.loc 2 121 5 is_stmt 1 view .LVU1304
 121:src/console.c ****     break;
 4582              		.loc 2 121 24 is_stmt 0 view .LVU1305
 4583 04c2 3F4B     		ldr	r3, .L427+36
 4584 04c4 92E7     		b	.L404
 4585              	.L422:
  95:src/console.c ****   }
 4586              		.loc 2 95 33 is_stmt 1 view .LVU1306
  95:src/console.c ****   }
 4587              		.loc 2 95 51 is_stmt 0 view .LVU1307
 4588 04c6 DDE93201 		ldrd	r0, r1, [sp, #200]
 4589 04ca 0DF1080A 		add	r10, sp, #8
 4590 04ce 8AE80300 		stm	r10, {r0, r1}
 4591 04d2 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4592              	.LVL437:
  95:src/console.c ****   }
 4593              		.loc 2 95 51 view .LVU1308
 4594 04d6 8946     		mov	r9, r1
 4595              	.LVL438:
  95:src/console.c ****   }
 4596              		.loc 2 95 51 view .LVU1309
 4597 04d8 CBE6     		b	.L343
 4598              	.LVL439:
 4599              	.L414:
  89:src/console.c ****   case KEY_F5:
 4600              		.loc 2 89 33 is_stmt 1 view .LVU1310
ARM GAS  /tmp/cc1aojQ3.s 			page 126


  89:src/console.c ****   case KEY_F5:
 4601              		.loc 2 89 51 is_stmt 0 view .LVU1311
 4602 04da DDE92201 		ldrd	r0, r1, [sp, #136]
 4603 04de 0DF1080A 		add	r10, sp, #8
 4604 04e2 8AE80300 		stm	r10, {r0, r1}
 4605 04e6 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4606              	.LVL440:
  89:src/console.c ****   case KEY_F5:
 4607              		.loc 2 89 51 view .LVU1312
 4608 04ea 8946     		mov	r9, r1
 4609              	.LVL441:
  89:src/console.c ****   case KEY_F5:
 4610              		.loc 2 89 51 view .LVU1313
 4611 04ec C1E6     		b	.L343
 4612              	.LVL442:
 4613              	.L416:
  92:src/console.c ****   case KEY_F6:
 4614              		.loc 2 92 33 is_stmt 1 view .LVU1314
  92:src/console.c ****   case KEY_F6:
 4615              		.loc 2 92 51 is_stmt 0 view .LVU1315
 4616 04ee DDE92A01 		ldrd	r0, r1, [sp, #168]
 4617 04f2 0DF1080A 		add	r10, sp, #8
 4618 04f6 8AE80300 		stm	r10, {r0, r1}
 4619 04fa 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4620              	.LVL443:
  92:src/console.c ****   case KEY_F6:
 4621              		.loc 2 92 51 view .LVU1316
 4622 04fe 8946     		mov	r9, r1
 4623              	.LVL444:
  92:src/console.c ****   case KEY_F6:
 4624              		.loc 2 92 51 view .LVU1317
 4625 0500 B7E6     		b	.L343
 4626              	.LVL445:
 4627              	.L412:
  86:src/console.c ****   case KEY_F4:
 4628              		.loc 2 86 33 is_stmt 1 view .LVU1318
  86:src/console.c ****   case KEY_F4:
 4629              		.loc 2 86 51 is_stmt 0 view .LVU1319
 4630 0502 DDE91A01 		ldrd	r0, r1, [sp, #104]
 4631 0506 0DF1080A 		add	r10, sp, #8
 4632 050a 8AE80300 		stm	r10, {r0, r1}
 4633 050e 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4634              	.LVL446:
  86:src/console.c ****   case KEY_F4:
 4635              		.loc 2 86 51 view .LVU1320
 4636 0512 8946     		mov	r9, r1
 4637              	.LVL447:
  86:src/console.c ****   case KEY_F4:
 4638              		.loc 2 86 51 view .LVU1321
 4639 0514 ADE6     		b	.L343
 4640              	.LVL448:
 4641              	.L410:
  83:src/console.c ****   case KEY_F3:
 4642              		.loc 2 83 33 is_stmt 1 view .LVU1322
  83:src/console.c ****   case KEY_F3:
 4643              		.loc 2 83 51 is_stmt 0 view .LVU1323
 4644 0516 DDE91201 		ldrd	r0, r1, [sp, #72]
ARM GAS  /tmp/cc1aojQ3.s 			page 127


 4645 051a 0DF1080A 		add	r10, sp, #8
 4646 051e 8AE80300 		stm	r10, {r0, r1}
 4647 0522 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4648              	.LVL449:
  83:src/console.c ****   case KEY_F3:
 4649              		.loc 2 83 51 view .LVU1324
 4650 0526 8946     		mov	r9, r1
 4651              	.LVL450:
  83:src/console.c ****   case KEY_F3:
 4652              		.loc 2 83 51 view .LVU1325
 4653 0528 A3E6     		b	.L343
 4654              	.LVL451:
 4655              	.L367:
 122:src/console.c ****   case SHIFT_F:
 4656              		.loc 2 122 5 is_stmt 1 view .LVU1326
 124:src/console.c ****     break;
 4657              		.loc 2 124 5 view .LVU1327
 124:src/console.c ****     break;
 4658              		.loc 2 124 26 is_stmt 0 view .LVU1328
 4659 052a 264B     		ldr	r3, .L427+40
 4660 052c 5EE7     		b	.L404
 4661              	.L423:
 100:src/console.c ****       case SHIFT_N:
 4662              		.loc 2 100 7 is_stmt 1 view .LVU1329
 100:src/console.c ****       case SHIFT_N:
 4663              		.loc 2 100 15 is_stmt 0 view .LVU1330
 4664 052e FFF7FEFF 		bl	cur_shift
 4665              	.LVL452:
 100:src/console.c ****       case SHIFT_N:
 4666              		.loc 2 100 7 view .LVU1331
 4667 0532 0328     		cmp	r0, #3
 4668 0534 28D8     		bhi	.L362
 4669 0536 0128     		cmp	r0, #1
 4670 0538 11D8     		bhi	.L363
 4671 053a E0B1     		cbz	r0, .L424
 103:src/console.c ****       case SHIFT_F:
 4672              		.loc 2 103 2 is_stmt 1 view .LVU1332
 105:src/console.c **** 	break;
 4673              		.loc 2 105 2 view .LVU1333
 105:src/console.c **** 	break;
 4674              		.loc 2 105 23 is_stmt 0 view .LVU1334
 4675 053c 224B     		ldr	r3, .L427+44
 4676 053e 93E80300 		ldm	r3, {r0, r1}
 4677 0542 0DF1080A 		add	r10, sp, #8
 4678 0546 8AE80300 		stm	r10, {r0, r1}
 4679              	.LVL453:
 105:src/console.c **** 	break;
 4680              		.loc 2 105 23 view .LVU1335
 4681              	.LBE150:
 4682              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4683              		.loc 2 521 7 is_stmt 1 view .LVU1336
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4684              		.loc 2 527 7 view .LVU1337
 535:src/console.c **** 	remapped = do_multi (remapped);
 4685              		.loc 2 535 7 view .LVU1338
 539:src/console.c ****       process_keycode_with_shift(remapped);
ARM GAS  /tmp/cc1aojQ3.s 			page 128


 4686              		.loc 2 539 7 view .LVU1339
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4687              		.loc 2 540 7 view .LVU1340
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4688              		.loc 2 540 7 is_stmt 0 view .LVU1341
 4689 054a 2A22     		movs	r2, #42
 4690 054c 0023     		movs	r3, #0
 4691 054e 8DF80820 		strb	r2, [sp, #8]
 4692 0552 0393     		str	r3, [sp, #12]
 4693 0554 9AE80300 		ldm	r10, {r0, r1}
 4694 0558 FFF7FEFF 		bl	process_keycode_with_shift
 4695              	.LVL454:
 541:src/console.c ****     }
 4696              		.loc 2 541 7 is_stmt 1 view .LVU1342
 4697 055c B8E6     		b	.L366
 4698              	.LVL455:
 4699              	.L363:
 4700              	.LBB166:
 4701              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4702              		.loc 2 106 2 view .LVU1343
 108:src/console.c **** 	break;
 4703              		.loc 2 108 2 view .LVU1344
 108:src/console.c **** 	break;
 4704              		.loc 2 108 9 is_stmt 0 view .LVU1345
 4705 055e 1B4B     		ldr	r3, .L427+48
 4706 0560 7FE6     		b	.L405
 4707              	.L408:
  80:src/console.c ****   case KEY_F2:
 4708              		.loc 2 80 33 is_stmt 1 view .LVU1346
  80:src/console.c ****   case KEY_F2:
 4709              		.loc 2 80 51 is_stmt 0 view .LVU1347
 4710 0562 DDE90A01 		ldrd	r0, r1, [sp, #40]
 4711 0566 0DF1080A 		add	r10, sp, #8
 4712 056a 8AE80300 		stm	r10, {r0, r1}
 4713 056e 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4714              	.LVL456:
  80:src/console.c ****   case KEY_F2:
 4715              		.loc 2 80 51 view .LVU1348
 4716 0572 8946     		mov	r9, r1
 4717              	.LVL457:
  80:src/console.c ****   case KEY_F2:
 4718              		.loc 2 80 51 view .LVU1349
 4719 0574 7DE6     		b	.L343
 4720              	.LVL458:
 4721              	.L424:
 102:src/console.c **** 	break;
 4722              		.loc 2 102 2 is_stmt 1 view .LVU1350
 102:src/console.c **** 	break;
 4723              		.loc 2 102 21 is_stmt 0 view .LVU1351
 4724 0576 164B     		ldr	r3, .L427+52
 4725 0578 93E80300 		ldm	r3, {r0, r1}
 4726 057c 0DF1080A 		add	r10, sp, #8
 4727 0580 8AE80300 		stm	r10, {r0, r1}
 4728              	.LVL459:
 102:src/console.c **** 	break;
 4729              		.loc 2 102 21 view .LVU1352
ARM GAS  /tmp/cc1aojQ3.s 			page 129


 4730              	.LBE151:
 4731              	.LBE166:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4732              		.loc 2 521 7 is_stmt 1 view .LVU1353
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4733              		.loc 2 527 7 view .LVU1354
 535:src/console.c **** 	remapped = do_multi (remapped);
 4734              		.loc 2 535 7 view .LVU1355
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4735              		.loc 2 539 7 view .LVU1356
 4736              	.LBB167:
 4737              	.LBB152:
 102:src/console.c **** 	break;
 4738              		.loc 2 102 21 is_stmt 0 view .LVU1357
 4739 0584 2925     		movs	r5, #41
 4740              	.LVL460:
 102:src/console.c **** 	break;
 4741              		.loc 2 102 21 view .LVU1358
 4742 0586 99E6     		b	.L365
 4743              	.LVL461:
 4744              	.L362:
 102:src/console.c **** 	break;
 4745              		.loc 2 102 21 view .LVU1359
 4746              	.LBE152:
 4747              	.LBE167:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4748              		.loc 2 521 7 is_stmt 1 view .LVU1360
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4749              		.loc 2 527 7 view .LVU1361
 535:src/console.c **** 	remapped = do_multi (remapped);
 4750              		.loc 2 535 7 view .LVU1362
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4751              		.loc 2 539 7 view .LVU1363
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4752              		.loc 2 540 7 view .LVU1364
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4753              		.loc 2 540 7 is_stmt 0 view .LVU1365
 4754 0588 0023     		movs	r3, #0
 4755 058a 8DF80850 		strb	r5, [sp, #8]
 4756 058e 0298     		ldr	r0, [sp, #8]
 4757 0590 0393     		str	r3, [sp, #12]
 4758 0592 1946     		mov	r1, r3
 4759 0594 FFF7FEFF 		bl	process_keycode_with_shift
 4760              	.LVL462:
 541:src/console.c ****     }
 4761              		.loc 2 541 7 is_stmt 1 view .LVU1366
 4762 0598 9AE6     		b	.L366
 4763              	.L428:
 4764 059a 00BF     		.align	2
 4765              	.L427:
 4766 059c 00000000 		.word	StopWatchStatus
 4767 05a0 CDCCCCCC 		.word	-858993459
 4768 05a4 99999919 		.word	429496729
 4769 05a8 00000000 		.word	JustStopped
 4770 05ac 00000000 		.word	.LANCHOR12
 4771 05b0 00000000 		.word	.LANCHOR11
 4772 05b4 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cc1aojQ3.s 			page 130


 4773 05b8 00000000 		.word	.LANCHOR16
 4774 05bc 00000000 		.word	.LANCHOR17
 4775 05c0 00000000 		.word	.LANCHOR13
 4776 05c4 00000000 		.word	.LANCHOR14
 4777 05c8 E0000000 		.word	.LANCHOR14+224
 4778 05cc 00000000 		.word	.LANCHOR15
 4779 05d0 E0000000 		.word	.LANCHOR13+224
 4780              		.cfi_endproc
 4781              	.LFE34:
 4783              		.global	n_p
 4784              		.comm	print_string,22,4
 4785              		.global	spaces
 4786              		.global	release
 4787              		.global	h_shift
 4788              		.global	g_shift
 4789              		.global	f_shift
 4790              		.global	heartbeat
 4791              		.global	no_key
 4792              		.global	MID_MENU
 4793              		.section	.rodata.str1.4,"aMS",%progbits,1
 4794              		.align	2
 4795              	.LC18:
 4796 0000 53797374 		.ascii	"System!\000"
 4796      656D2100 
 4797              		.global	mid_menu
 4798              		.global	default_menu
 4799              		.global	last_menu
 4800              		.global	current_menu
 4801              		.global	cmplx_key_string
 4802              		.align	2
 4803              	.LC19:
 4804 0008 43505800 		.ascii	"CPX\000"
 4805              		.global	arrow_key_string
 4806              		.align	2
 4807              	.LC20:
 4808 000c 2D2D0D00 		.ascii	"--\015\000"
 4809              		.global	UserMenu
 4810              		.section	.rodata
 4811              		.align	2
 4812              		.set	.LANCHOR5,. + 0
 4813              	.LC0:
 4814 0000 2C       		.byte	44
 4815 0001 000000   		.space	3
 4816 0004 FFFFFFFF 		.word	-1
 4817              	.LC1:
 4818 0008 2D       		.byte	45
 4819 0009 000000   		.space	3
 4820 000c FFFFFFFF 		.word	-1
 4821              	.LC14:
 4822 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4822      2A2B0708 
 4822      091C0B0C 
 4822      0D0E0F
 4823 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4823      13141516 
 4823      00121819 
 4823      1A
ARM GAS  /tmp/cc1aojQ3.s 			page 131


 4824 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4824      1E1F2000 
 4824      21222324 
 4824      25
 4825              		.section	.bss.current_menu,"aw",%nobits
 4826              		.set	.LANCHOR1,. + 0
 4829              	current_menu:
 4830 0000 00       		.space	1
 4831              		.section	.bss.default_menu,"aw",%nobits
 4832              		.set	.LANCHOR2,. + 0
 4835              	default_menu:
 4836 0000 00       		.space	1
 4837              		.section	.bss.last_menu,"aw",%nobits
 4838              		.set	.LANCHOR3,. + 0
 4841              	last_menu:
 4842 0000 00       		.space	1
 4843              		.section	.bss.mdots,"aw",%nobits
 4844              		.align	2
 4845              		.set	.LANCHOR0,. + 0
 4848              	mdots:
 4849 0000 00000000 		.space	400
 4849      00000000 
 4849      00000000 
 4849      00000000 
 4849      00000000 
 4850              		.section	.bss.n_p,"aw",%nobits
 4851              		.align	2
 4854              	n_p:
 4855 0000 00000000 		.space	4
 4856              		.section	.bss.start_ticks,"aw",%nobits
 4857              		.align	2
 4858              		.set	.LANCHOR8,. + 0
 4861              	start_ticks:
 4862 0000 00000000 		.space	4
 4863              		.section	.data.UserMenu,"aw"
 4864              		.align	2
 4865              		.set	.LANCHOR4,. + 0
 4868              	UserMenu:
 4869 0000 55736572 		.ascii	"User Menu\000"
 4869      204D656E 
 4869      7500
 4870 000a 00000000 		.space	5
 4870      00
 4871 000f 00       		.space	1
 4872 0010 2E       		.byte	46
 4873 0011 000000   		.space	3
 4874 0014 FFFFFFFF 		.word	-1
 4875 0018 2E       		.byte	46
 4876 0019 000000   		.space	3
 4877 001c FFFFFFFF 		.word	-1
 4878 0020 00       		.ascii	"\000"
 4879 0021 00000000 		.space	7
 4879      000000
 4880 0028 00       		.ascii	"\000"
 4881 0029 00000000 		.space	7
 4881      000000
 4882 0030 2E       		.byte	46
ARM GAS  /tmp/cc1aojQ3.s 			page 132


 4883 0031 000000   		.space	3
 4884 0034 FFFFFFFF 		.word	-1
 4885 0038 2E       		.byte	46
 4886 0039 000000   		.space	3
 4887 003c FFFFFFFF 		.word	-1
 4888 0040 00       		.ascii	"\000"
 4889 0041 00000000 		.space	7
 4889      000000
 4890 0048 00       		.ascii	"\000"
 4891 0049 00000000 		.space	7
 4891      000000
 4892 0050 2E       		.byte	46
 4893 0051 000000   		.space	3
 4894 0054 FFFFFFFF 		.word	-1
 4895 0058 2E       		.byte	46
 4896 0059 000000   		.space	3
 4897 005c FFFFFFFF 		.word	-1
 4898 0060 00       		.ascii	"\000"
 4899 0061 00000000 		.space	7
 4899      000000
 4900 0068 00       		.ascii	"\000"
 4901 0069 00000000 		.space	7
 4901      000000
 4902 0070 2E       		.byte	46
 4903 0071 000000   		.space	3
 4904 0074 FFFFFFFF 		.word	-1
 4905 0078 2E       		.byte	46
 4906 0079 000000   		.space	3
 4907 007c FFFFFFFF 		.word	-1
 4908 0080 00       		.ascii	"\000"
 4909 0081 00000000 		.space	7
 4909      000000
 4910 0088 00       		.ascii	"\000"
 4911 0089 00000000 		.space	7
 4911      000000
 4912 0090 2C       		.byte	44
 4913 0091 000000   		.space	3
 4914 0094 FFFFFFFF 		.word	-1
 4915 0098 2E       		.byte	46
 4916 0099 000000   		.space	3
 4917 009c FFFFFFFF 		.word	-1
 4918 00a0 2D2D0D00 		.ascii	"--\015\000"
 4919 00a4 00000000 		.space	4
 4920 00a8 00       		.ascii	"\000"
 4921 00a9 00000000 		.space	7
 4921      000000
 4922 00b0 2D       		.byte	45
 4923 00b1 000000   		.space	3
 4924 00b4 FFFFFFFF 		.word	-1
 4925 00b8 31       		.byte	49
 4926 00b9 000000   		.space	3
 4927 00bc 0B000000 		.word	11
 4928 00c0 43505800 		.ascii	"CPX\000"
 4929 00c4 00000000 		.space	4
 4930 00c8 00       		.ascii	"\000"
 4931 00c9 00000000 		.space	7
 4931      000000
ARM GAS  /tmp/cc1aojQ3.s 			page 133


 4932              		.section	.data.arrow_key_string,"aw"
 4933              		.align	2
 4934              		.set	.LANCHOR6,. + 0
 4937              	arrow_key_string:
 4938 0000 0C000000 		.word	.LC20
 4939              		.section	.data.cmplx_key_string,"aw"
 4940              		.align	2
 4941              		.set	.LANCHOR7,. + 0
 4944              	cmplx_key_string:
 4945 0000 08000000 		.word	.LC19
 4946              		.section	.data.f_shift,"aw"
 4947              		.align	2
 4950              	f_shift:
 4951 0000 29       		.byte	41
 4952 0001 000000   		.space	3
 4953 0004 FFFFFFFF 		.word	-1
 4954              		.section	.data.g_shift,"aw"
 4955              		.align	2
 4958              	g_shift:
 4959 0000 2A       		.byte	42
 4960 0001 000000   		.space	3
 4961 0004 FFFFFFFF 		.word	-1
 4962              		.section	.data.h_shift,"aw"
 4963              		.align	2
 4964              		.set	.LANCHOR15,. + 0
 4967              	h_shift:
 4968 0000 2B       		.byte	43
 4969 0001 000000   		.space	3
 4970 0004 FFFFFFFF 		.word	-1
 4971              		.section	.data.heartbeat,"aw"
 4972              		.align	2
 4973              		.set	.LANCHOR19,. + 0
 4976              	heartbeat:
 4977 0000 62       		.byte	98
 4978 0001 000000   		.space	3
 4979 0004 FFFFFFFF 		.word	-1
 4980              		.section	.data.no_key,"aw"
 4981              		.align	2
 4982              		.set	.LANCHOR10,. + 0
 4985              	no_key:
 4986 0000 2E       		.byte	46
 4987 0001 000000   		.space	3
 4988 0004 00000000 		.word	0
 4989              		.section	.data.release,"aw"
 4990              		.align	2
 4991              		.set	.LANCHOR11,. + 0
 4994              	release:
 4995 0000 63       		.byte	99
 4996 0001 000000   		.space	3
 4997 0004 FFFFFFFF 		.word	-1
 4998              		.section	.data.spaces,"aw"
 4999              		.align	2
 5000              		.set	.LANCHOR9,. + 0
 5003              	spaces:
 5004 0000 20202020 		.ascii	"                     \000"
 5004      20202020 
 5004      20202020 
ARM GAS  /tmp/cc1aojQ3.s 			page 134


 5004      20202020 
 5004      20202020 
 5005              		.section	.rodata.MID_MENU,"a"
 5006              		.align	2
 5007              		.set	.LANCHOR18,. + 0
 5010              	MID_MENU:
 5011 0000 00000000 		.word	.LC18
 5012 0004 00000000 		.word	mid_menu
 5013 0008 00000000 		.word	0
 5014 000c 00000000 		.word	0
 5015              		.section	.rodata.Menus,"a"
 5016              		.align	2
 5019              	Menus:
 5020 0000 4D5F426C 		.ascii	"M_Blank\000"
 5020      616E6B00 
 5021 0008 00000000 		.space	7
 5021      000000
 5022 000f 00       		.space	1
 5023 0010 2E       		.byte	46
 5024 0011 000000   		.space	3
 5025 0014 FFFFFFFF 		.word	-1
 5026 0018 2E       		.byte	46
 5027 0019 000000   		.space	3
 5028 001c FFFFFFFF 		.word	-1
 5029 0020 00       		.ascii	"\000"
 5030 0021 00000000 		.space	7
 5030      000000
 5031 0028 00       		.ascii	"\000"
 5032 0029 00000000 		.space	7
 5032      000000
 5033 0030 2E       		.byte	46
 5034 0031 000000   		.space	3
 5035 0034 FFFFFFFF 		.word	-1
 5036 0038 2E       		.byte	46
 5037 0039 000000   		.space	3
 5038 003c FFFFFFFF 		.word	-1
 5039 0040 00       		.ascii	"\000"
 5040 0041 00000000 		.space	7
 5040      000000
 5041 0048 00       		.ascii	"\000"
 5042 0049 00000000 		.space	7
 5042      000000
 5043 0050 2E       		.byte	46
 5044 0051 000000   		.space	3
 5045 0054 FFFFFFFF 		.word	-1
 5046 0058 2E       		.byte	46
 5047 0059 000000   		.space	3
 5048 005c FFFFFFFF 		.word	-1
 5049 0060 00       		.ascii	"\000"
 5050 0061 00000000 		.space	7
 5050      000000
 5051 0068 00       		.ascii	"\000"
 5052 0069 00000000 		.space	7
 5052      000000
 5053 0070 2E       		.byte	46
 5054 0071 000000   		.space	3
 5055 0074 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc1aojQ3.s 			page 135


 5056 0078 2E       		.byte	46
 5057 0079 000000   		.space	3
 5058 007c FFFFFFFF 		.word	-1
 5059 0080 00       		.ascii	"\000"
 5060 0081 00000000 		.space	7
 5060      000000
 5061 0088 00       		.ascii	"\000"
 5062 0089 00000000 		.space	7
 5062      000000
 5063 0090 2C       		.byte	44
 5064 0091 000000   		.space	3
 5065 0094 FFFFFFFF 		.word	-1
 5066 0098 2E       		.byte	46
 5067 0099 000000   		.space	3
 5068 009c FFFFFFFF 		.word	-1
 5069 00a0 2D2D0D00 		.ascii	"--\015\000"
 5070 00a4 00000000 		.space	4
 5071 00a8 00       		.ascii	"\000"
 5072 00a9 00000000 		.space	7
 5072      000000
 5073 00b0 2D       		.byte	45
 5074 00b1 000000   		.space	3
 5075 00b4 FFFFFFFF 		.word	-1
 5076 00b8 31       		.byte	49
 5077 00b9 000000   		.space	3
 5078 00bc 0B000000 		.word	11
 5079 00c0 43505800 		.ascii	"CPX\000"
 5080 00c4 00000000 		.space	4
 5081 00c8 00       		.ascii	"\000"
 5082 00c9 00000000 		.space	7
 5082      000000
 5083 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5083      65617200 
 5084 00d8 00000000 		.space	7
 5084      000000
 5085 00df 00       		.space	1
 5086 00e0 10       		.byte	16
 5087 00e1 000000   		.space	3
 5088 00e4 01000000 		.word	1
 5089 00e8 34       		.byte	52
 5090 00e9 000000   		.space	3
 5091 00ec 44010000 		.word	324
 5092 00f0 434C5072 		.ascii	"CLProg\000"
 5092      6F6700
 5093 00f7 00       		.space	1
 5094 00f8 434C5041 		.ascii	"CLPAll\000"
 5094      6C6C00
 5095 00ff 00       		.space	1
 5096 0100 10       		.byte	16
 5097 0101 000000   		.space	3
 5098 0104 02000000 		.word	2
 5099 0108 34       		.byte	52
 5100 0109 000000   		.space	3
 5101 010c 3E010000 		.word	318
 5102 0110 434C9100 		.ascii	"CL\221\000"
 5103 0114 00000000 		.space	4
 5104 0118 434C5265 		.ascii	"CLReg\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 136


 5104      6700
 5105 011e 0000     		.space	2
 5106 0120 10       		.byte	16
 5107 0121 000000   		.space	3
 5108 0124 03000000 		.word	3
 5109 0128 34       		.byte	52
 5110 0129 000000   		.space	3
 5111 012c 74010000 		.word	372
 5112 0130 434C7800 		.ascii	"CLx\000"
 5113 0134 00000000 		.space	4
 5114 0138 434C06A0 		.ascii	"CL\006\240\000"
 5114      00
 5115 013d 000000   		.space	3
 5116 0140 34       		.byte	52
 5117 0141 000000   		.space	3
 5118 0144 40010000 		.word	320
 5119 0148 34       		.byte	52
 5120 0149 000000   		.space	3
 5121 014c 41010000 		.word	321
 5122 0150 434C5374 		.ascii	"CLStk\000"
 5122      6B00
 5123 0156 0000     		.space	2
 5124 0158 434C416C 		.ascii	"CLAll\000"
 5124      6C00
 5125 015e 0000     		.space	2
 5126 0160 2C       		.byte	44
 5127 0161 000000   		.space	3
 5128 0164 FFFFFFFF 		.word	-1
 5129 0168 2E       		.byte	46
 5130 0169 000000   		.space	3
 5131 016c FFFFFFFF 		.word	-1
 5132 0170 2D2D0D00 		.ascii	"--\015\000"
 5133 0174 00000000 		.space	4
 5134 0178 00       		.ascii	"\000"
 5135 0179 00000000 		.space	7
 5135      000000
 5136 0180 2D       		.byte	45
 5137 0181 000000   		.space	3
 5138 0184 FFFFFFFF 		.word	-1
 5139 0188 2E       		.byte	46
 5140 0189 000000   		.space	3
 5141 018c FFFFFFFF 		.word	-1
 5142 0190 43505800 		.ascii	"CPX\000"
 5143 0194 00000000 		.space	4
 5144 0198 00       		.ascii	"\000"
 5145 0199 00000000 		.space	7
 5145      000000
 5146 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5146      737000
 5147 01a7 00000000 		.space	8
 5147      00000000 
 5148 01af 00       		.space	1
 5149 01b0 00       		.byte	0
 5150 01b1 000000   		.space	3
 5151 01b4 03000000 		.word	3
 5152 01b8 05       		.byte	5
 5153 01b9 000000   		.space	3
ARM GAS  /tmp/cc1aojQ3.s 			page 137


 5154 01bc 01000000 		.word	1
 5155 01c0 414C4C00 		.ascii	"ALL\000"
 5156 01c4 00000000 		.space	4
 5157 01c8 6120622F 		.ascii	"a b/c\000"
 5157      6300
 5158 01ce 0000     		.space	2
 5159 01d0 01       		.byte	1
 5160 01d1 000000   		.space	3
 5161 01d4 03000000 		.word	3
 5162 01d8 05       		.byte	5
 5163 01d9 000000   		.space	3
 5164 01dc 02000000 		.word	2
 5165 01e0 46495800 		.ascii	"FIX\000"
 5166 01e4 00000000 		.space	4
 5167 01e8 642F6300 		.ascii	"d/c\000"
 5168 01ec 00000000 		.space	4
 5169 01f0 02       		.byte	2
 5170 01f1 000000   		.space	3
 5171 01f4 03000000 		.word	3
 5172 01f8 06       		.byte	6
 5173 01f9 000000   		.space	3
 5174 01fc 01000000 		.word	1
 5175 0200 53434900 		.ascii	"SCI\000"
 5176 0204 00000000 		.space	4
 5177 0208 482E4D53 		.ascii	"H.MS\000"
 5177      00
 5178 020d 000000   		.space	3
 5179 0210 03       		.byte	3
 5180 0211 000000   		.space	3
 5181 0214 03000000 		.word	3
 5182 0218 07       		.byte	7
 5183 0219 000000   		.space	3
 5184 021c 01000000 		.word	1
 5185 0220 454E4700 		.ascii	"ENG\000"
 5186 0224 00000000 		.space	4
 5187 0228 482E6400 		.ascii	"H.d\000"
 5188 022c 00000000 		.space	4
 5189 0230 2C       		.byte	44
 5190 0231 000000   		.space	3
 5191 0234 FFFFFFFF 		.word	-1
 5192 0238 26       		.byte	38
 5193 0239 000000   		.space	3
 5194 023c 03000000 		.word	3
 5195 0240 2D2D0D00 		.ascii	"--\015\000"
 5196 0244 00000000 		.space	4
 5197 0248 2E2F2C00 		.ascii	"./,\000"
 5198 024c 00000000 		.space	4
 5199 0250 2D       		.byte	45
 5200 0251 000000   		.space	3
 5201 0254 FFFFFFFF 		.word	-1
 5202 0258 2E       		.byte	46
 5203 0259 000000   		.space	3
 5204 025c FFFFFFFF 		.word	-1
 5205 0260 43505800 		.ascii	"CPX\000"
 5206 0264 00000000 		.space	4
 5207 0268 00       		.ascii	"\000"
 5208 0269 00000000 		.space	7
ARM GAS  /tmp/cc1aojQ3.s 			page 138


 5208      000000
 5209 0270 4D5F4261 		.ascii	"M_Base\000"
 5209      736500
 5210 0277 00000000 		.space	8
 5210      00000000 
 5211 027f 00       		.space	1
 5212 0280 0E       		.byte	14
 5213 0281 000000   		.space	3
 5214 0284 01000000 		.word	1
 5215 0288 0E       		.byte	14
 5216 0289 000000   		.space	3
 5217 028c 03000000 		.word	3
 5218 0290 42494E00 		.ascii	"BIN\000"
 5219 0294 00000000 		.space	4
 5220 0298 6E6F7400 		.ascii	"not\000"
 5221 029c 00000000 		.space	4
 5222 02a0 0E       		.byte	14
 5223 02a1 000000   		.space	3
 5224 02a4 02000000 		.word	2
 5225 02a8 13       		.byte	19
 5226 02a9 000000   		.space	3
 5227 02ac 03000000 		.word	3
 5228 02b0 4F435400 		.ascii	"OCT\000"
 5229 02b4 00000000 		.space	4
 5230 02b8 616E6400 		.ascii	"and\000"
 5231 02bc 00000000 		.space	4
 5232 02c0 0F       		.byte	15
 5233 02c1 000000   		.space	3
 5234 02c4 01000000 		.word	1
 5235 02c8 14       		.byte	20
 5236 02c9 000000   		.space	3
 5237 02cc 03000000 		.word	3
 5238 02d0 44454300 		.ascii	"DEC\000"
 5239 02d4 00000000 		.space	4
 5240 02d8 6F7200   		.ascii	"or\000"
 5241 02db 00000000 		.space	5
 5241      00
 5242 02e0 0F       		.byte	15
 5243 02e1 000000   		.space	3
 5244 02e4 02000000 		.word	2
 5245 02e8 15       		.byte	21
 5246 02e9 000000   		.space	3
 5247 02ec 03000000 		.word	3
 5248 02f0 48455800 		.ascii	"HEX\000"
 5249 02f4 00000000 		.space	4
 5250 02f8 786F7200 		.ascii	"xor\000"
 5251 02fc 00000000 		.space	4
 5252 0300 2C       		.byte	44
 5253 0301 000000   		.space	3
 5254 0304 FFFFFFFF 		.word	-1
 5255 0308 16       		.byte	22
 5256 0309 000000   		.space	3
 5257 030c 03000000 		.word	3
 5258 0310 2D2D0D00 		.ascii	"--\015\000"
 5259 0314 00000000 		.space	4
 5260 0318 524D4452 		.ascii	"RMDR\000"
 5260      00
ARM GAS  /tmp/cc1aojQ3.s 			page 139


 5261 031d 000000   		.space	3
 5262 0320 2D       		.byte	45
 5263 0321 000000   		.space	3
 5264 0324 FFFFFFFF 		.word	-1
 5265 0328 07       		.byte	7
 5266 0329 000000   		.space	3
 5267 032c 01000000 		.word	1
 5268 0330 43505800 		.ascii	"CPX\000"
 5269 0334 00000000 		.space	4
 5270 0338 482E6400 		.ascii	"H.d\000"
 5271 033c 00000000 		.space	4
 5272 0340 4D5F416E 		.ascii	"M_Angles\000"
 5272      676C6573 
 5272      00
 5273 0349 00000000 		.space	6
 5273      0000
 5274 034f 00       		.space	1
 5275 0350 06       		.byte	6
 5276 0351 000000   		.space	3
 5277 0354 02000000 		.word	2
 5278 0358 04       		.byte	4
 5279 0359 000000   		.space	3
 5280 035c 01000000 		.word	1
 5281 0360 44454700 		.ascii	"DEG\000"
 5282 0364 00000000 		.space	4
 5283 0368 500D5200 		.ascii	"P\015R\000"
 5284 036c 00000000 		.space	4
 5285 0370 07       		.byte	7
 5286 0371 000000   		.space	3
 5287 0374 02000000 		.word	2
 5288 0378 04       		.byte	4
 5289 0379 000000   		.space	3
 5290 037c 02000000 		.word	2
 5291 0380 52414400 		.ascii	"RAD\000"
 5292 0384 00000000 		.space	4
 5293 0388 520D5000 		.ascii	"R\015P\000"
 5294 038c 00000000 		.space	4
 5295 0390 08       		.byte	8
 5296 0391 000000   		.space	3
 5297 0394 02000000 		.word	2
 5298 0398 00       		.byte	0
 5299 0399 000000   		.space	3
 5300 039c 01000000 		.word	1
 5301 03a0 47524144 		.ascii	"GRAD\000"
 5301      00
 5302 03a5 000000   		.space	3
 5303 03a8 48595000 		.ascii	"HYP\000"
 5304 03ac 00000000 		.space	4
 5305 03b0 06       		.byte	6
 5306 03b1 000000   		.space	3
 5307 03b4 01000000 		.word	1
 5308 03b8 07       		.byte	7
 5309 03b9 000000   		.space	3
 5310 03bc 01000000 		.word	1
 5311 03c0 482E4D53 		.ascii	"H.MS\000"
 5311      00
 5312 03c5 000000   		.space	3
ARM GAS  /tmp/cc1aojQ3.s 			page 140


 5313 03c8 482E6400 		.ascii	"H.d\000"
 5314 03cc 00000000 		.space	4
 5315 03d0 2C       		.byte	44
 5316 03d1 000000   		.space	3
 5317 03d4 FFFFFFFF 		.word	-1
 5318 03d8 00       		.byte	0
 5319 03d9 000000   		.space	3
 5320 03dc 02000000 		.word	2
 5321 03e0 2D2D0D00 		.ascii	"--\015\000"
 5322 03e4 00000000 		.space	4
 5323 03e8 4859509D 		.ascii	"HYP\235\000"
 5323      00
 5324 03ed 000000   		.space	3
 5325 03f0 2D       		.byte	45
 5326 03f1 000000   		.space	3
 5327 03f4 FFFFFFFF 		.word	-1
 5328 03f8 2E       		.byte	46
 5329 03f9 000000   		.space	3
 5330 03fc FFFFFFFF 		.word	-1
 5331 0400 43505800 		.ascii	"CPX\000"
 5332 0404 00000000 		.space	4
 5333 0408 00       		.ascii	"\000"
 5334 0409 00000000 		.space	7
 5334      000000
 5335 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5335      736300
 5336 0417 00000000 		.space	8
 5336      00000000 
 5337 041f 00       		.space	1
 5338 0420 25       		.byte	37
 5339 0421 000000   		.space	3
 5340 0424 01000000 		.word	1
 5341 0428 14       		.byte	20
 5342 0429 000000   		.space	3
 5343 042c 01000000 		.word	1
 5344 0430 7C587C00 		.ascii	"|X|\000"
 5345 0434 00000000 		.space	4
 5346 0438 329C00   		.ascii	"2\234\000"
 5347 043b 00000000 		.space	5
 5347      00
 5348 0440 25       		.byte	37
 5349 0441 000000   		.space	3
 5350 0444 02000000 		.word	2
 5351 0448 14       		.byte	20
 5352 0449 000000   		.space	3
 5353 044c 02000000 		.word	2
 5354 0450 524E4400 		.ascii	"RND\000"
 5355 0454 00000000 		.space	4
 5356 0458 4C6F67BA 		.ascii	"Log\272\000"
 5356      00
 5357 045d 000000   		.space	3
 5358 0460 26       		.byte	38
 5359 0461 000000   		.space	3
 5360 0464 01000000 		.word	1
 5361 0468 15       		.byte	21
 5362 0469 000000   		.space	3
 5363 046c 02000000 		.word	2
ARM GAS  /tmp/cc1aojQ3.s 			page 141


 5364 0470 49506172 		.ascii	"IPart\000"
 5364      7400
 5365 0476 0000     		.space	2
 5366 0478 4C6F678B 		.ascii	"Log\213\000"
 5366      00
 5367 047d 000000   		.space	3
 5368 0480 26       		.byte	38
 5369 0481 000000   		.space	3
 5370 0484 02000000 		.word	2
 5371 0488 16       		.byte	22
 5372 0489 000000   		.space	3
 5373 048c 02000000 		.word	2
 5374 0490 46506172 		.ascii	"FPart\000"
 5374      7400
 5375 0496 0000     		.space	2
 5376 0498 7C7C656C 		.ascii	"||el\000"
 5376      00
 5377 049d 000000   		.space	3
 5378 04a0 2C       		.byte	44
 5379 04a1 000000   		.space	3
 5380 04a4 FFFFFFFF 		.word	-1
 5381 04a8 22       		.byte	34
 5382 04a9 000000   		.space	3
 5383 04ac 02000000 		.word	2
 5384 04b0 2D2D0D00 		.ascii	"--\015\000"
 5385 04b4 00000000 		.space	4
 5386 04b8 832500   		.ascii	"\203%\000"
 5387 04bb 00000000 		.space	5
 5387      00
 5388 04c0 2D       		.byte	45
 5389 04c1 000000   		.space	3
 5390 04c4 FFFFFFFF 		.word	-1
 5391 04c8 2E       		.byte	46
 5392 04c9 000000   		.space	3
 5393 04cc FFFFFFFF 		.word	-1
 5394 04d0 43505800 		.ascii	"CPX\000"
 5395 04d4 00000000 		.space	4
 5396 04d8 00       		.ascii	"\000"
 5397 04d9 00000000 		.space	7
 5397      000000
 5398 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5398      617000
 5399 04e7 00000000 		.space	8
 5399      00000000 
 5400 04ef 00       		.space	1
 5401 04f0 0D       		.byte	13
 5402 04f1 000000   		.space	3
 5403 04f4 01000000 		.word	1
 5404 04f8 34       		.byte	52
 5405 04f9 000000   		.space	3
 5406 04fc 00A60000 		.word	42496
 5407 0500 53686F77 		.ascii	"Show\016\000"
 5407      0E00
 5408 0506 0000     		.space	2
 5409 0508 5B175D00 		.ascii	"[\027]\000"
 5410 050c 00000000 		.space	4
 5411 0510 0D       		.byte	13
ARM GAS  /tmp/cc1aojQ3.s 			page 142


 5412 0511 000000   		.space	3
 5413 0514 02000000 		.word	2
 5414 0518 2E       		.byte	46
 5415 0519 000000   		.space	3
 5416 051c FFFFFFFF 		.word	-1
 5417 0520 53686F77 		.ascii	"Show\015\000"
 5417      0D00
 5418 0526 0000     		.space	2
 5419 0528 00       		.ascii	"\000"
 5420 0529 00000000 		.space	7
 5420      000000
 5421 0530 0D       		.byte	13
 5422 0531 000000   		.space	3
 5423 0534 03000000 		.word	3
 5424 0538 34       		.byte	52
 5425 0539 000000   		.space	3
 5426 053c 00330000 		.word	13056
 5427 0540 78173F00 		.ascii	"x\027?\000"
 5428 0544 00000000 		.space	4
 5429 0548 7A173F00 		.ascii	"z\027?\000"
 5430 054c 00000000 		.space	4
 5431 0550 34       		.byte	52
 5432 0551 000000   		.space	3
 5433 0554 00320000 		.word	12800
 5434 0558 34       		.byte	52
 5435 0559 000000   		.space	3
 5436 055c 00340000 		.word	13312
 5437 0560 79173F00 		.ascii	"y\027?\000"
 5438 0564 00000000 		.space	4
 5439 0568 74173F00 		.ascii	"t\027?\000"
 5440 056c 00000000 		.space	4
 5441 0570 2C       		.byte	44
 5442 0571 000000   		.space	3
 5443 0574 FFFFFFFF 		.word	-1
 5444 0578 2E       		.byte	46
 5445 0579 000000   		.space	3
 5446 057c FFFFFFFF 		.word	-1
 5447 0580 2D2D0D00 		.ascii	"--\015\000"
 5448 0584 00000000 		.space	4
 5449 0588 00       		.ascii	"\000"
 5450 0589 00000000 		.space	7
 5450      000000
 5451 0590 2D       		.byte	45
 5452 0591 000000   		.space	3
 5453 0594 FFFFFFFF 		.word	-1
 5454 0598 2E       		.byte	46
 5455 0599 000000   		.space	3
 5456 059c FFFFFFFF 		.word	-1
 5457 05a0 43505800 		.ascii	"CPX\000"
 5458 05a4 00000000 		.space	4
 5459 05a8 00       		.ascii	"\000"
 5460 05a9 00000000 		.space	7
 5460      000000
 5461 05b0 4D5F5072 		.ascii	"M_Program\000"
 5461      6F677261 
 5461      6D00
 5462 05ba 00000000 		.space	5
ARM GAS  /tmp/cc1aojQ3.s 			page 143


 5462      00
 5463 05bf 00       		.space	1
 5464 05c0 27       		.byte	39
 5465 05c1 000000   		.space	3
 5466 05c4 01000000 		.word	1
 5467 05c8 28       		.byte	40
 5468 05c9 000000   		.space	3
 5469 05cc 01000000 		.word	1
 5470 05d0 4C424C00 		.ascii	"LBL\000"
 5471 05d4 00000000 		.space	4
 5472 05d8 44534500 		.ascii	"DSE\000"
 5473 05dc 00000000 		.space	4
 5474 05e0 27       		.byte	39
 5475 05e1 000000   		.space	3
 5476 05e4 02000000 		.word	2
 5477 05e8 28       		.byte	40
 5478 05e9 000000   		.space	3
 5479 05ec 02000000 		.word	2
 5480 05f0 52544E00 		.ascii	"RTN\000"
 5481 05f4 00000000 		.space	4
 5482 05f8 49534700 		.ascii	"ISG\000"
 5483 05fc 00000000 		.space	4
 5484 0600 25       		.byte	37
 5485 0601 000000   		.space	3
 5486 0604 03000000 		.word	3
 5487 0608 34       		.byte	52
 5488 0609 000000   		.space	3
 5489 060c 00600000 		.word	24576
 5490 0610 50617573 		.ascii	"Pause\000"
 5490      6500
 5491 0616 0000     		.space	2
 5492 0618 44454300 		.ascii	"DEC\000"
 5493 061c 00000000 		.space	4
 5494 0620 12       		.byte	18
 5495 0621 000000   		.space	3
 5496 0624 03000000 		.word	3
 5497 0628 34       		.byte	52
 5498 0629 000000   		.space	3
 5499 062c 00610000 		.word	24832
 5500 0630 47544F00 		.ascii	"GTO\000"
 5501 0634 00000000 		.space	4
 5502 0638 494E4300 		.ascii	"INC\000"
 5503 063c 00000000 		.space	4
 5504 0640 2C       		.byte	44
 5505 0641 000000   		.space	3
 5506 0644 FFFFFFFF 		.word	-1
 5507 0648 34       		.byte	52
 5508 0649 000000   		.space	3
 5509 064c 00570000 		.word	22272
 5510 0650 2D2D0D00 		.ascii	"--\015\000"
 5511 0654 00000000 		.space	4
 5512 0658 4241434B 		.ascii	"BACK\000"
 5512      00
 5513 065d 000000   		.space	3
 5514 0660 2D       		.byte	45
 5515 0661 000000   		.space	3
 5516 0664 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc1aojQ3.s 			page 144


 5517 0668 34       		.byte	52
 5518 0669 000000   		.space	3
 5519 066c 00560000 		.word	22016
 5520 0670 43505800 		.ascii	"CPX\000"
 5521 0674 00000000 		.space	4
 5522 0678 534B4950 		.ascii	"SKIP\000"
 5522      00
 5523 067d 000000   		.space	3
 5524 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5524      74757031 
 5524      00
 5525 0689 00000000 		.space	6
 5525      0000
 5526 068f 00       		.space	1
 5527 0690 32       		.byte	50
 5528 0691 000000   		.space	3
 5529 0694 00000000 		.word	0
 5530 0698 30       		.byte	48
 5531 0699 000000   		.space	3
 5532 069c 00000000 		.word	0
 5533 06a0 45584954 		.ascii	"EXIT\000"
 5533      00
 5534 06a5 000000   		.space	3
 5535 06a8 53797374 		.ascii	"System\000"
 5535      656D00
 5536 06af 00       		.space	1
 5537 06b0 31       		.byte	49
 5538 06b1 000000   		.space	3
 5539 06b4 09000000 		.word	9
 5540 06b8 2E       		.byte	46
 5541 06b9 000000   		.space	3
 5542 06bc FFFFFFFF 		.word	-1
 5543 06c0 48454C50 		.ascii	"HELP\000"
 5543      00
 5544 06c5 000000   		.space	3
 5545 06c8 00       		.ascii	"\000"
 5546 06c9 00000000 		.space	7
 5546      000000
 5547 06d0 31       		.byte	49
 5548 06d1 000000   		.space	3
 5549 06d4 02000000 		.word	2
 5550 06d8 31       		.byte	49
 5551 06d9 000000   		.space	3
 5552 06dc 06000000 		.word	6
 5553 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5553      4F00
 5554 06e6 0000     		.space	2
 5555 06e8 53765241 		.ascii	"SvRAM\000"
 5555      4D00
 5556 06ee 0000     		.space	2
 5557 06f0 31       		.byte	49
 5558 06f1 000000   		.space	3
 5559 06f4 03000000 		.word	3
 5560 06f8 31       		.byte	49
 5561 06f9 000000   		.space	3
 5562 06fc 07000000 		.word	7
 5563 0700 4F6E5243 		.ascii	"OnRCL\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 145


 5563      4C00
 5564 0706 0000     		.space	2
 5565 0708 4C645241 		.ascii	"LdRAM\000"
 5565      4D00
 5566 070e 0000     		.space	2
 5567 0710 2C       		.byte	44
 5568 0711 000000   		.space	3
 5569 0714 FFFFFFFF 		.word	-1
 5570 0718 2E       		.byte	46
 5571 0719 000000   		.space	3
 5572 071c FFFFFFFF 		.word	-1
 5573 0720 2D2D0D00 		.ascii	"--\015\000"
 5574 0724 00000000 		.space	4
 5575 0728 00       		.ascii	"\000"
 5576 0729 00000000 		.space	7
 5576      000000
 5577 0730 2D       		.byte	45
 5578 0731 000000   		.space	3
 5579 0734 FFFFFFFF 		.word	-1
 5580 0738 2E       		.byte	46
 5581 0739 000000   		.space	3
 5582 073c FFFFFFFF 		.word	-1
 5583 0740 43505800 		.ascii	"CPX\000"
 5584 0744 00000000 		.space	4
 5585 0748 00       		.ascii	"\000"
 5586 0749 00000000 		.space	7
 5586      000000
 5587 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5587      726F7700 
 5588 0758 00000000 		.space	7
 5588      000000
 5589 075f 00       		.space	1
 5590 0760 0E       		.byte	14
 5591 0761 000000   		.space	3
 5592 0764 01000000 		.word	1
 5593 0768 06       		.byte	6
 5594 0769 000000   		.space	3
 5595 076c 02000000 		.word	2
 5596 0770 0D42696E 		.ascii	"\015Bin\000"
 5596      00
 5597 0775 000000   		.space	3
 5598 0778 0D444547 		.ascii	"\015DEG\000"
 5598      00
 5599 077d 000000   		.space	3
 5600 0780 0E       		.byte	14
 5601 0781 000000   		.space	3
 5602 0784 02000000 		.word	2
 5603 0788 07       		.byte	7
 5604 0789 000000   		.space	3
 5605 078c 02000000 		.word	2
 5606 0790 0D4F6374 		.ascii	"\015Oct\000"
 5606      00
 5607 0795 000000   		.space	3
 5608 0798 0D524144 		.ascii	"\015RAD\000"
 5608      00
 5609 079d 000000   		.space	3
 5610 07a0 0F       		.byte	15
ARM GAS  /tmp/cc1aojQ3.s 			page 146


 5611 07a1 000000   		.space	3
 5612 07a4 01000000 		.word	1
 5613 07a8 08       		.byte	8
 5614 07a9 000000   		.space	3
 5615 07ac 02000000 		.word	2
 5616 07b0 0D446563 		.ascii	"\015Dec\000"
 5616      00
 5617 07b5 000000   		.space	3
 5618 07b8 0D477261 		.ascii	"\015Grad\000"
 5618      6400
 5619 07be 0000     		.space	2
 5620 07c0 0F       		.byte	15
 5621 07c1 000000   		.space	3
 5622 07c4 02000000 		.word	2
 5623 07c8 06       		.byte	6
 5624 07c9 000000   		.space	3
 5625 07cc 01000000 		.word	1
 5626 07d0 0D486578 		.ascii	"\015Hex\000"
 5626      00
 5627 07d5 000000   		.space	3
 5628 07d8 0D484D53 		.ascii	"\015HMS\000"
 5628      00
 5629 07dd 000000   		.space	3
 5630 07e0 2C       		.byte	44
 5631 07e1 000000   		.space	3
 5632 07e4 FFFFFFFF 		.word	-1
 5633 07e8 07       		.byte	7
 5634 07e9 000000   		.space	3
 5635 07ec 01000000 		.word	1
 5636 07f0 2D2D0D00 		.ascii	"--\015\000"
 5637 07f4 00000000 		.space	4
 5638 07f8 484D530D 		.ascii	"HMS\015\000"
 5638      00
 5639 07fd 000000   		.space	3
 5640 0800 2D       		.byte	45
 5641 0801 000000   		.space	3
 5642 0804 FFFFFFFF 		.word	-1
 5643 0808 2E       		.byte	46
 5644 0809 000000   		.space	3
 5645 080c FFFFFFFF 		.word	-1
 5646 0810 43505800 		.ascii	"CPX\000"
 5647 0814 00000000 		.space	4
 5648 0818 00       		.ascii	"\000"
 5649 0819 00000000 		.space	7
 5649      000000
 5650 0820 4D5F466C 		.ascii	"M_Flags\000"
 5650      61677300 
 5651 0828 00000000 		.space	7
 5651      000000
 5652 082f 00       		.space	1
 5653 0830 1E       		.byte	30
 5654 0831 000000   		.space	3
 5655 0834 01000000 		.word	1
 5656 0838 34       		.byte	52
 5657 0839 000000   		.space	3
 5658 083c 00740000 		.word	29696
 5659 0840 53465F00 		.ascii	"SF_\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 147


 5660 0844 00000000 		.space	4
 5661 0848 46533F00 		.ascii	"FS?\000"
 5662 084c 00000000 		.space	4
 5663 0850 1E       		.byte	30
 5664 0851 000000   		.space	3
 5665 0854 02000000 		.word	2
 5666 0858 34       		.byte	52
 5667 0859 000000   		.space	3
 5668 085c 00750000 		.word	29952
 5669 0860 43465F00 		.ascii	"CF_\000"
 5670 0864 00000000 		.space	4
 5671 0868 46433F00 		.ascii	"FC?\000"
 5672 086c 00000000 		.space	4
 5673 0870 1F       		.byte	31
 5674 0871 000000   		.space	3
 5675 0874 01000000 		.word	1
 5676 0878 34       		.byte	52
 5677 0879 000000   		.space	3
 5678 087c 00500000 		.word	20480
 5679 0880 783D3F00 		.ascii	"x=?\000"
 5680 0884 00000000 		.space	4
 5681 0888 783C3F00 		.ascii	"x<?\000"
 5682 088c 00000000 		.space	4
 5683 0890 1F       		.byte	31
 5684 0891 000000   		.space	3
 5685 0894 02000000 		.word	2
 5686 0898 34       		.byte	52
 5687 0899 000000   		.space	3
 5688 089c 00510000 		.word	20736
 5689 08a0 780B3F00 		.ascii	"x\013?\000"
 5690 08a4 00000000 		.space	4
 5691 08a8 783C3D3F 		.ascii	"x<=?\000"
 5691      00
 5692 08ad 000000   		.space	3
 5693 08b0 2C       		.byte	44
 5694 08b1 000000   		.space	3
 5695 08b4 FFFFFFFF 		.word	-1
 5696 08b8 34       		.byte	52
 5697 08b9 000000   		.space	3
 5698 08bc 00530000 		.word	21248
 5699 08c0 2D2D0D00 		.ascii	"--\015\000"
 5700 08c4 00000000 		.space	4
 5701 08c8 783E3D3F 		.ascii	"x>=?\000"
 5701      00
 5702 08cd 000000   		.space	3
 5703 08d0 2D       		.byte	45
 5704 08d1 000000   		.space	3
 5705 08d4 FFFFFFFF 		.word	-1
 5706 08d8 34       		.byte	52
 5707 08d9 000000   		.space	3
 5708 08dc 00520000 		.word	20992
 5709 08e0 43505800 		.ascii	"CPX\000"
 5710 08e4 00000000 		.space	4
 5711 08e8 783E3F00 		.ascii	"x>?\000"
 5712 08ec 00000000 		.space	4
 5713 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5713      6F6200
ARM GAS  /tmp/cc1aojQ3.s 			page 148


 5714 08f7 00000000 		.space	8
 5714      00000000 
 5715 08ff 00       		.space	1
 5716 0900 18       		.byte	24
 5717 0901 000000   		.space	3
 5718 0904 03000000 		.word	3
 5719 0908 34       		.byte	52
 5720 0909 000000   		.space	3
 5721 090c 31020000 		.word	561
 5722 0910 46616374 		.ascii	"Fact!\000"
 5722      2100
 5723 0916 0000     		.space	2
 5724 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5724      00
 5725 091d 000000   		.space	3
 5726 0920 18       		.byte	24
 5727 0921 000000   		.space	3
 5728 0924 01000000 		.word	1
 5729 0928 19       		.byte	25
 5730 0929 000000   		.space	3
 5731 092c 01000000 		.word	1
 5732 0930 43792C78 		.ascii	"Cy,x\000"
 5732      00
 5733 0935 000000   		.space	3
 5734 0938 9400     		.ascii	"\224\000"
 5735 093a 00000000 		.space	6
 5735      0000
 5736 0940 18       		.byte	24
 5737 0941 000000   		.space	3
 5738 0944 02000000 		.word	2
 5739 0948 19       		.byte	25
 5740 0949 000000   		.space	3
 5741 094c 02000000 		.word	2
 5742 0950 50792C78 		.ascii	"Py,x\000"
 5742      00
 5743 0955 000000   		.space	3
 5744 0958 949D00   		.ascii	"\224\235\000"
 5745 095b 00000000 		.space	5
 5745      00
 5746 0960 08       		.byte	8
 5747 0961 000000   		.space	3
 5748 0964 01000000 		.word	1
 5749 0968 34       		.byte	52
 5750 0969 000000   		.space	3
 5751 096c 34010000 		.word	308
 5752 0970 52414E23 		.ascii	"RAN#\000"
 5752      00
 5753 0975 000000   		.space	3
 5754 0978 53454544 		.ascii	"SEED\000"
 5754      00
 5755 097d 000000   		.space	3
 5756 0980 2C       		.byte	44
 5757 0981 000000   		.space	3
 5758 0984 FFFFFFFF 		.word	-1
 5759 0988 2E       		.byte	46
 5760 0989 000000   		.space	3
 5761 098c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc1aojQ3.s 			page 149


 5762 0990 2D2D0D00 		.ascii	"--\015\000"
 5763 0994 00000000 		.space	4
 5764 0998 00       		.ascii	"\000"
 5765 0999 00000000 		.space	7
 5765      000000
 5766 09a0 2D       		.byte	45
 5767 09a1 000000   		.space	3
 5768 09a4 FFFFFFFF 		.word	-1
 5769 09a8 2E       		.byte	46
 5770 09a9 000000   		.space	3
 5771 09ac FFFFFFFF 		.word	-1
 5772 09b0 43505800 		.ascii	"CPX\000"
 5773 09b4 00000000 		.space	4
 5774 09b8 00       		.ascii	"\000"
 5775 09b9 00000000 		.space	7
 5775      000000
 5776 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5776      61747300 
 5777 09c8 00000000 		.space	7
 5777      000000
 5778 09cf 00       		.space	1
 5779 09d0 1A       		.byte	26
 5780 09d1 000000   		.space	3
 5781 09d4 01000000 		.word	1
 5782 09d8 1A       		.byte	26
 5783 09d9 000000   		.space	3
 5784 09dc 02000000 		.word	2
 5785 09e0 0100     		.ascii	"\001\000"
 5786 09e2 00000000 		.space	6
 5786      0000
 5787 09e8 532E442E 		.ascii	"S.D.\000"
 5787      00
 5788 09ed 000000   		.space	3
 5789 09f0 1B       		.byte	27
 5790 09f1 000000   		.space	3
 5791 09f4 01000000 		.word	1
 5792 09f8 34       		.byte	52
 5793 09f9 000000   		.space	3
 5794 09fc 74020000 		.word	628
 5795 0a00 792D6861 		.ascii	"y-hat\000"
 5795      7400
 5796 0a06 0000     		.space	2
 5797 0a08 782D6861 		.ascii	"x-hat\000"
 5797      7400
 5798 0a0e 0000     		.space	2
 5799 0a10 34       		.byte	52
 5800 0a11 000000   		.space	3
 5801 0a14 27010000 		.word	295
 5802 0a18 34       		.byte	52
 5803 0a19 000000   		.space	3
 5804 0a1c 28010000 		.word	296
 5805 0a20 434F5252 		.ascii	"CORR\000"
 5805      00
 5806 0a25 000000   		.space	3
 5807 0a28 4C2E522E 		.ascii	"L.R.\000"
 5807      00
 5808 0a2d 000000   		.space	3
ARM GAS  /tmp/cc1aojQ3.s 			page 150


 5809 0a30 34       		.byte	52
 5810 0a31 000000   		.space	3
 5811 0a34 32010000 		.word	306
 5812 0a38 34       		.byte	52
 5813 0a39 000000   		.space	3
 5814 0a3c 31010000 		.word	305
 5815 0a40 42657374 		.ascii	"BestF\000"
 5815      4600
 5816 0a46 0000     		.space	2
 5817 0a48 4C6F6746 		.ascii	"LogFit\000"
 5817      697400
 5818 0a4f 00       		.space	1
 5819 0a50 34       		.byte	52
 5820 0a51 000000   		.space	3
 5821 0a54 2E010000 		.word	302
 5822 0a58 34       		.byte	52
 5823 0a59 000000   		.space	3
 5824 0a5c 2F010000 		.word	303
 5825 0a60 4C696E65 		.ascii	"Linear\000"
 5825      617200
 5826 0a67 00       		.space	1
 5827 0a68 45787046 		.ascii	"ExpFit\000"
 5827      697400
 5828 0a6f 00       		.space	1
 5829 0a70 2D       		.byte	45
 5830 0a71 000000   		.space	3
 5831 0a74 FFFFFFFF 		.word	-1
 5832 0a78 34       		.byte	52
 5833 0a79 000000   		.space	3
 5834 0a7c 30010000 		.word	304
 5835 0a80 43505800 		.ascii	"CPX\000"
 5836 0a84 00000000 		.space	4
 5837 0a88 50777246 		.ascii	"PwrFit\000"
 5837      697400
 5838 0a8f 00       		.space	1
 5839 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5839      74757032 
 5839      00
 5840 0a99 00000000 		.space	6
 5840      0000
 5841 0a9f 00       		.space	1
 5842 0aa0 31       		.byte	49
 5843 0aa1 000000   		.space	3
 5844 0aa4 04000000 		.word	4
 5845 0aa8 2E       		.byte	46
 5846 0aa9 000000   		.space	3
 5847 0aac FFFFFFFF 		.word	-1
 5848 0ab0 53764C49 		.ascii	"SvLIB\000"
 5848      4200
 5849 0ab6 0000     		.space	2
 5850 0ab8 00       		.ascii	"\000"
 5851 0ab9 00000000 		.space	7
 5851      000000
 5852 0ac0 31       		.byte	49
 5853 0ac1 000000   		.space	3
 5854 0ac4 05000000 		.word	5
 5855 0ac8 2E       		.byte	46
ARM GAS  /tmp/cc1aojQ3.s 			page 151


 5856 0ac9 000000   		.space	3
 5857 0acc FFFFFFFF 		.word	-1
 5858 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5858      4200
 5859 0ad6 0000     		.space	2
 5860 0ad8 00       		.ascii	"\000"
 5861 0ad9 00000000 		.space	7
 5861      000000
 5862 0ae0 31       		.byte	49
 5863 0ae1 000000   		.space	3
 5864 0ae4 0A000000 		.word	10
 5865 0ae8 34       		.byte	52
 5866 0ae9 000000   		.space	3
 5867 0aec B2010000 		.word	434
 5868 0af0 53764350 		.ascii	"SvCPRG\000"
 5868      524700
 5869 0af7 00       		.space	1
 5870 0af8 5053544F 		.ascii	"PSTO\000"
 5870      00
 5871 0afd 000000   		.space	3
 5872 0b00 31       		.byte	49
 5873 0b01 000000   		.space	3
 5874 0b04 08000000 		.word	8
 5875 0b08 34       		.byte	52
 5876 0b09 000000   		.space	3
 5877 0b0c B1010000 		.word	433
 5878 0b10 4C645052 		.ascii	"LdPRG\000"
 5878      4700
 5879 0b16 0000     		.space	2
 5880 0b18 5052434C 		.ascii	"PRCL\000"
 5880      00
 5881 0b1d 000000   		.space	3
 5882 0b20 2C       		.byte	44
 5883 0b21 000000   		.space	3
 5884 0b24 FFFFFFFF 		.word	-1
 5885 0b28 2E       		.byte	46
 5886 0b29 000000   		.space	3
 5887 0b2c FFFFFFFF 		.word	-1
 5888 0b30 2D2D0D00 		.ascii	"--\015\000"
 5889 0b34 00000000 		.space	4
 5890 0b38 00       		.ascii	"\000"
 5891 0b39 00000000 		.space	7
 5891      000000
 5892 0b40 2D       		.byte	45
 5893 0b41 000000   		.space	3
 5894 0b44 FFFFFFFF 		.word	-1
 5895 0b48 2E       		.byte	46
 5896 0b49 000000   		.space	3
 5897 0b4c FFFFFFFF 		.word	-1
 5898 0b50 43505800 		.ascii	"CPX\000"
 5899 0b54 00000000 		.space	4
 5900 0b58 00       		.ascii	"\000"
 5901 0b59 00000000 		.space	7
 5901      000000
 5902 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5902      6C766500 
 5903 0b68 00000000 		.space	7
ARM GAS  /tmp/cc1aojQ3.s 			page 152


 5903      000000
 5904 0b6f 00       		.space	1
 5905 0b70 20       		.byte	32
 5906 0b71 000000   		.space	3
 5907 0b74 01000000 		.word	1
 5908 0b78 34       		.byte	52
 5909 0b79 000000   		.space	3
 5910 0b7c 00690000 		.word	26880
 5911 0b80 534C5600 		.ascii	"SLV\000"
 5912 0b84 00000000 		.space	4
 5913 0b88 66272878 		.ascii	"f'(x)\000"
 5913      2900
 5914 0b8e 0000     		.space	2
 5915 0b90 20       		.byte	32
 5916 0b91 000000   		.space	3
 5917 0b94 02000000 		.word	2
 5918 0b98 34       		.byte	52
 5919 0b99 000000   		.space	3
 5920 0b9c 006A0000 		.word	27136
 5921 0ba0 04206478 		.ascii	"\004 dx\000"
 5921      00
 5922 0ba5 000000   		.space	3
 5923 0ba8 66272728 		.ascii	"f''(x)\000"
 5923      782900
 5924 0baf 00       		.space	1
 5925 0bb0 21       		.byte	33
 5926 0bb1 000000   		.space	3
 5927 0bb4 02000000 		.word	2
 5928 0bb8 2E       		.byte	46
 5929 0bb9 000000   		.space	3
 5930 0bbc FFFFFFFF 		.word	-1
 5931 0bc0 53554D00 		.ascii	"SUM\000"
 5932 0bc4 00000000 		.space	4
 5933 0bc8 00       		.ascii	"\000"
 5934 0bc9 00000000 		.space	7
 5934      000000
 5935 0bd0 21       		.byte	33
 5936 0bd1 000000   		.space	3
 5937 0bd4 01000000 		.word	1
 5938 0bd8 2E       		.byte	46
 5939 0bd9 000000   		.space	3
 5940 0bdc FFFFFFFF 		.word	-1
 5941 0be0 50524F44 		.ascii	"PROD\000"
 5941      00
 5942 0be5 000000   		.space	3
 5943 0be8 00       		.ascii	"\000"
 5944 0be9 00000000 		.space	7
 5944      000000
 5945 0bf0 2C       		.byte	44
 5946 0bf1 000000   		.space	3
 5947 0bf4 FFFFFFFF 		.word	-1
 5948 0bf8 2E       		.byte	46
 5949 0bf9 000000   		.space	3
 5950 0bfc FFFFFFFF 		.word	-1
 5951 0c00 2D2D0D00 		.ascii	"--\015\000"
 5952 0c04 00000000 		.space	4
 5953 0c08 00       		.ascii	"\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 153


 5954 0c09 00000000 		.space	7
 5954      000000
 5955 0c10 2D       		.byte	45
 5956 0c11 000000   		.space	3
 5957 0c14 FFFFFFFF 		.word	-1
 5958 0c18 2E       		.byte	46
 5959 0c19 000000   		.space	3
 5960 0c1c FFFFFFFF 		.word	-1
 5961 0c20 43505800 		.ascii	"CPX\000"
 5962 0c24 00000000 		.space	4
 5963 0c28 00       		.ascii	"\000"
 5964 0c29 00000000 		.space	7
 5964      000000
 5965 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5965      616E6B32 
 5965      00
 5966 0c39 00000000 		.space	6
 5966      0000
 5967 0c3f 00       		.space	1
 5968 0c40 28       		.byte	40
 5969 0c41 000000   		.space	3
 5970 0c44 03000000 		.word	3
 5971 0c48 2E       		.byte	46
 5972 0c49 000000   		.space	3
 5973 0c4c FFFFFFFF 		.word	-1
 5974 0c50 912B00   		.ascii	"\221+\000"
 5975 0c53 00000000 		.space	5
 5975      00
 5976 0c58 00       		.ascii	"\000"
 5977 0c59 00000000 		.space	7
 5977      000000
 5978 0c60 16       		.byte	22
 5979 0c61 000000   		.space	3
 5980 0c64 01000000 		.word	1
 5981 0c68 2E       		.byte	46
 5982 0c69 000000   		.space	3
 5983 0c6c FFFFFFFF 		.word	-1
 5984 0c70 312F5800 		.ascii	"1/X\000"
 5985 0c74 00000000 		.space	4
 5986 0c78 00       		.ascii	"\000"
 5987 0c79 00000000 		.space	7
 5987      000000
 5988 0c80 1C       		.byte	28
 5989 0c81 000000   		.space	3
 5990 0c84 01000000 		.word	1
 5991 0c88 2E       		.byte	46
 5992 0c89 000000   		.space	3
 5993 0c8c FFFFFFFF 		.word	-1
 5994 0c90 035800   		.ascii	"\003X\000"
 5995 0c93 00000000 		.space	5
 5995      00
 5996 0c98 00       		.ascii	"\000"
 5997 0c99 00000000 		.space	7
 5997      000000
 5998 0ca0 13       		.byte	19
 5999 0ca1 000000   		.space	3
 6000 0ca4 02000000 		.word	2
ARM GAS  /tmp/cc1aojQ3.s 			page 154


 6001 0ca8 2E       		.byte	46
 6002 0ca9 000000   		.space	3
 6003 0cac FFFFFFFF 		.word	-1
 6004 0cb0 4C4F4700 		.ascii	"LOG\000"
 6005 0cb4 00000000 		.space	4
 6006 0cb8 00       		.ascii	"\000"
 6007 0cb9 00000000 		.space	7
 6007      000000
 6008 0cc0 2C       		.byte	44
 6009 0cc1 000000   		.space	3
 6010 0cc4 FFFFFFFF 		.word	-1
 6011 0cc8 2E       		.byte	46
 6012 0cc9 000000   		.space	3
 6013 0ccc FFFFFFFF 		.word	-1
 6014 0cd0 2D2D0D00 		.ascii	"--\015\000"
 6015 0cd4 00000000 		.space	4
 6016 0cd8 00       		.ascii	"\000"
 6017 0cd9 00000000 		.space	7
 6017      000000
 6018 0ce0 2D       		.byte	45
 6019 0ce1 000000   		.space	3
 6020 0ce4 FFFFFFFF 		.word	-1
 6021 0ce8 2E       		.byte	46
 6022 0ce9 000000   		.space	3
 6023 0cec FFFFFFFF 		.word	-1
 6024 0cf0 43505800 		.ascii	"CPX\000"
 6025 0cf4 00000000 		.space	4
 6026 0cf8 00       		.ascii	"\000"
 6027 0cf9 00000000 		.space	7
 6027      000000
 6028 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 6028      70686100 
 6029 0d08 00000000 		.space	7
 6029      000000
 6030 0d0f 00       		.space	1
 6031 0d10 34       		.byte	52
 6032 0d11 000000   		.space	3
 6033 0d14 78010000 		.word	376
 6034 0d18 34       		.byte	52
 6035 0d19 000000   		.space	3
 6036 0d1c 6D010000 		.word	365
 6037 0d20 582D3EA0 		.ascii	"X->\240\000"
 6037      00
 6038 0d25 000000   		.space	3
 6039 0d28 A054494D 		.ascii	"\240TIME\000"
 6039      4500
 6040 0d2e 0000     		.space	2
 6041 0d30 34       		.byte	52
 6042 0d31 000000   		.space	3
 6043 0d34 77010000 		.word	375
 6044 0d38 34       		.byte	52
 6045 0d39 000000   		.space	3
 6046 0d3c 6C010000 		.word	364
 6047 0d40 A02D3E58 		.ascii	"\240->X\000"
 6047      00
 6048 0d45 000000   		.space	3
 6049 0d48 A0444154 		.ascii	"\240DATE\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 155


 6049      4500
 6050 0d4e 0000     		.space	2
 6051 0d50 34       		.byte	52
 6052 0d51 000000   		.space	3
 6053 0d54 00480000 		.word	18432
 6054 0d58 34       		.byte	52
 6055 0d59 000000   		.space	3
 6056 0d5c 6A010000 		.word	362
 6057 0d60 A0495000 		.ascii	"\240IP\000"
 6058 0d64 00000000 		.space	4
 6059 0d68 A0444159 		.ascii	"\240DAY\000"
 6059      00
 6060 0d6d 000000   		.space	3
 6061 0d70 34       		.byte	52
 6062 0d71 000000   		.space	3
 6063 0d74 76010000 		.word	374
 6064 0d78 34       		.byte	52
 6065 0d79 000000   		.space	3
 6066 0d7c 6B010000 		.word	363
 6067 0d80 A04C454E 		.ascii	"\240LENG\000"
 6067      4700
 6068 0d86 0000     		.space	2
 6069 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 6069      4800
 6070 0d8e 0000     		.space	2
 6071 0d90 2C       		.byte	44
 6072 0d91 000000   		.space	3
 6073 0d94 FFFFFFFF 		.word	-1
 6074 0d98 2C       		.byte	44
 6075 0d99 000000   		.space	3
 6076 0d9c 01000000 		.word	1
 6077 0da0 2D2D0D00 		.ascii	"--\015\000"
 6078 0da4 00000000 		.space	4
 6079 0da8 00       		.ascii	"\000"
 6080 0da9 00000000 		.space	7
 6080      000000
 6081 0db0 2D       		.byte	45
 6082 0db1 000000   		.space	3
 6083 0db4 FFFFFFFF 		.word	-1
 6084 0db8 2D       		.byte	45
 6085 0db9 000000   		.space	3
 6086 0dbc 01000000 		.word	1
 6087 0dc0 43505800 		.ascii	"CPX\000"
 6088 0dc4 00000000 		.space	4
 6089 0dc8 00       		.ascii	"\000"
 6090 0dc9 00000000 		.space	7
 6090      000000
 6091 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6091      4C6F636B 
 6091      00
 6092 0dd9 00000000 		.space	6
 6092      0000
 6093 0ddf 00       		.space	1
 6094 0de0 18       		.byte	24
 6095 0de1 000000   		.space	3
 6096 0de4 02000000 		.word	2
 6097 0de8 04       		.byte	4
ARM GAS  /tmp/cc1aojQ3.s 			page 156


 6098 0de9 000000   		.space	3
 6099 0dec 02000000 		.word	2
 6100 0df0 504F4C41 		.ascii	"POLAR\000"
 6100      5200
 6101 0df6 0000     		.space	2
 6102 0df8 0D205000 		.ascii	"\015 P\000"
 6103 0dfc 00000000 		.space	4
 6104 0e00 18       		.byte	24
 6105 0e01 000000   		.space	3
 6106 0e04 01000000 		.word	1
 6107 0e08 04       		.byte	4
 6108 0e09 000000   		.space	3
 6109 0e0c 01000000 		.word	1
 6110 0e10 52454354 		.ascii	"RECT\000"
 6110      00
 6111 0e15 000000   		.space	3
 6112 0e18 0D205200 		.ascii	"\015 R\000"
 6113 0e1c 00000000 		.space	4
 6114 0e20 0E       		.byte	14
 6115 0e21 000000   		.space	3
 6116 0e24 01000000 		.word	1
 6117 0e28 0E       		.byte	14
 6118 0e29 000000   		.space	3
 6119 0e2c 03000000 		.word	3
 6120 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6120      496D00
 6121 0e37 00       		.space	1
 6122 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6122      526500
 6123 0e3f 00       		.space	1
 6124 0e40 0D       		.byte	13
 6125 0e41 000000   		.space	3
 6126 0e44 02000000 		.word	2
 6127 0e48 00       		.byte	0
 6128 0e49 000000   		.space	3
 6129 0e4c 01000000 		.word	1
 6130 0e50 52651749 		.ascii	"Re\027Im\000"
 6130      6D00
 6131 0e56 0000     		.space	2
 6132 0e58 48595000 		.ascii	"HYP\000"
 6133 0e5c 00000000 		.space	4
 6134 0e60 2C       		.byte	44
 6135 0e61 000000   		.space	3
 6136 0e64 FFFFFFFF 		.word	-1
 6137 0e68 0F       		.byte	15
 6138 0e69 000000   		.space	3
 6139 0e6c 01000000 		.word	1
 6140 0e70 2D2D0D00 		.ascii	"--\015\000"
 6141 0e74 00000000 		.space	4
 6142 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6143 0e7c 00000000 		.space	4
 6144 0e80 2D       		.byte	45
 6145 0e81 000000   		.space	3
 6146 0e84 FFFFFFFF 		.word	-1
 6147 0e88 0C       		.byte	12
 6148 0e89 000000   		.space	3
 6149 0e8c 01000000 		.word	1
ARM GAS  /tmp/cc1aojQ3.s 			page 157


 6150 0e90 43505800 		.ascii	"CPX\000"
 6151 0e94 00000000 		.space	4
 6152 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6152      535400
 6153 0e9f 00       		.space	1
 6154 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6154      6561725F 
 6154      4300
 6155 0eaa 00000000 		.space	5
 6155      00
 6156 0eaf 00       		.space	1
 6157 0eb0 2E       		.byte	46
 6158 0eb1 000000   		.space	3
 6159 0eb4 FFFFFFFF 		.word	-1
 6160 0eb8 2E       		.byte	46
 6161 0eb9 000000   		.space	3
 6162 0ebc FFFFFFFF 		.word	-1
 6163 0ec0 00       		.ascii	"\000"
 6164 0ec1 00000000 		.space	7
 6164      000000
 6165 0ec8 00       		.ascii	"\000"
 6166 0ec9 00000000 		.space	7
 6166      000000
 6167 0ed0 2E       		.byte	46
 6168 0ed1 000000   		.space	3
 6169 0ed4 FFFFFFFF 		.word	-1
 6170 0ed8 2E       		.byte	46
 6171 0ed9 000000   		.space	3
 6172 0edc FFFFFFFF 		.word	-1
 6173 0ee0 00       		.ascii	"\000"
 6174 0ee1 00000000 		.space	7
 6174      000000
 6175 0ee8 00       		.ascii	"\000"
 6176 0ee9 00000000 		.space	7
 6176      000000
 6177 0ef0 10       		.byte	16
 6178 0ef1 000000   		.space	3
 6179 0ef4 03000000 		.word	3
 6180 0ef8 34       		.byte	52
 6181 0ef9 000000   		.space	3
 6182 0efc 74010000 		.word	372
 6183 0f00 434C7800 		.ascii	"CLx\000"
 6184 0f04 00000000 		.space	4
 6185 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6185      00
 6186 0f0d 000000   		.space	3
 6187 0f10 34       		.byte	52
 6188 0f11 000000   		.space	3
 6189 0f14 40010000 		.word	320
 6190 0f18 2E       		.byte	46
 6191 0f19 000000   		.space	3
 6192 0f1c FFFFFFFF 		.word	-1
 6193 0f20 434C5374 		.ascii	"CLStk\000"
 6193      6B00
 6194 0f26 0000     		.space	2
 6195 0f28 00       		.ascii	"\000"
 6196 0f29 00000000 		.space	7
ARM GAS  /tmp/cc1aojQ3.s 			page 158


 6196      000000
 6197 0f30 2C       		.byte	44
 6198 0f31 000000   		.space	3
 6199 0f34 FFFFFFFF 		.word	-1
 6200 0f38 2E       		.byte	46
 6201 0f39 000000   		.space	3
 6202 0f3c FFFFFFFF 		.word	-1
 6203 0f40 2D2D0D00 		.ascii	"--\015\000"
 6204 0f44 00000000 		.space	4
 6205 0f48 00       		.ascii	"\000"
 6206 0f49 00000000 		.space	7
 6206      000000
 6207 0f50 2D       		.byte	45
 6208 0f51 000000   		.space	3
 6209 0f54 FFFFFFFF 		.word	-1
 6210 0f58 2E       		.byte	46
 6211 0f59 000000   		.space	3
 6212 0f5c FFFFFFFF 		.word	-1
 6213 0f60 43505800 		.ascii	"CPX\000"
 6214 0f64 00000000 		.space	4
 6215 0f68 00       		.ascii	"\000"
 6216 0f69 00000000 		.space	7
 6216      000000
 6217 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6217      61705F43 
 6217      00
 6218 0f79 00000000 		.space	6
 6218      0000
 6219 0f7f 00       		.space	1
 6220 0f80 0D       		.byte	13
 6221 0f81 000000   		.space	3
 6222 0f84 01000000 		.word	1
 6223 0f88 2E       		.byte	46
 6224 0f89 000000   		.space	3
 6225 0f8c FFFFFFFF 		.word	-1
 6226 0f90 53686F77 		.ascii	"Show\016\000"
 6226      0E00
 6227 0f96 0000     		.space	2
 6228 0f98 00       		.ascii	"\000"
 6229 0f99 00000000 		.space	7
 6229      000000
 6230 0fa0 0D       		.byte	13
 6231 0fa1 000000   		.space	3
 6232 0fa4 02000000 		.word	2
 6233 0fa8 2E       		.byte	46
 6234 0fa9 000000   		.space	3
 6235 0fac FFFFFFFF 		.word	-1
 6236 0fb0 53686F77 		.ascii	"Show\015\000"
 6236      0D00
 6237 0fb6 0000     		.space	2
 6238 0fb8 00       		.ascii	"\000"
 6239 0fb9 00000000 		.space	7
 6239      000000
 6240 0fc0 0D       		.byte	13
 6241 0fc1 000000   		.space	3
 6242 0fc4 03000000 		.word	3
 6243 0fc8 2E       		.byte	46
ARM GAS  /tmp/cc1aojQ3.s 			page 159


 6244 0fc9 000000   		.space	3
 6245 0fcc FFFFFFFF 		.word	-1
 6246 0fd0 78173F00 		.ascii	"x\027?\000"
 6247 0fd4 00000000 		.space	4
 6248 0fd8 00       		.ascii	"\000"
 6249 0fd9 00000000 		.space	7
 6249      000000
 6250 0fe0 2E       		.byte	46
 6251 0fe1 000000   		.space	3
 6252 0fe4 FFFFFFFF 		.word	-1
 6253 0fe8 2E       		.byte	46
 6254 0fe9 000000   		.space	3
 6255 0fec FFFFFFFF 		.word	-1
 6256 0ff0 00       		.ascii	"\000"
 6257 0ff1 00000000 		.space	7
 6257      000000
 6258 0ff8 00       		.ascii	"\000"
 6259 0ff9 00000000 		.space	7
 6259      000000
 6260 1000 2C       		.byte	44
 6261 1001 000000   		.space	3
 6262 1004 FFFFFFFF 		.word	-1
 6263 1008 2E       		.byte	46
 6264 1009 000000   		.space	3
 6265 100c FFFFFFFF 		.word	-1
 6266 1010 2D2D0D00 		.ascii	"--\015\000"
 6267 1014 00000000 		.space	4
 6268 1018 00       		.ascii	"\000"
 6269 1019 00000000 		.space	7
 6269      000000
 6270 1020 2D       		.byte	45
 6271 1021 000000   		.space	3
 6272 1024 FFFFFFFF 		.word	-1
 6273 1028 2E       		.byte	46
 6274 1029 000000   		.space	3
 6275 102c FFFFFFFF 		.word	-1
 6276 1030 43505800 		.ascii	"CPX\000"
 6277 1034 00000000 		.space	4
 6278 1038 00       		.ascii	"\000"
 6279 1039 00000000 		.space	7
 6279      000000
 6280 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6280      726F775F 
 6280      4300
 6281 104a 00000000 		.space	5
 6281      00
 6282 104f 00       		.space	1
 6283 1050 2E       		.byte	46
 6284 1051 000000   		.space	3
 6285 1054 FFFFFFFF 		.word	-1
 6286 1058 06       		.byte	6
 6287 1059 000000   		.space	3
 6288 105c 02000000 		.word	2
 6289 1060 00       		.ascii	"\000"
 6290 1061 00000000 		.space	7
 6290      000000
 6291 1068 44454700 		.ascii	"DEG\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 160


 6292 106c 00000000 		.space	4
 6293 1070 2E       		.byte	46
 6294 1071 000000   		.space	3
 6295 1074 FFFFFFFF 		.word	-1
 6296 1078 07       		.byte	7
 6297 1079 000000   		.space	3
 6298 107c 02000000 		.word	2
 6299 1080 00       		.ascii	"\000"
 6300 1081 00000000 		.space	7
 6300      000000
 6301 1088 52414400 		.ascii	"RAD\000"
 6302 108c 00000000 		.space	4
 6303 1090 2E       		.byte	46
 6304 1091 000000   		.space	3
 6305 1094 FFFFFFFF 		.word	-1
 6306 1098 08       		.byte	8
 6307 1099 000000   		.space	3
 6308 109c 02000000 		.word	2
 6309 10a0 00       		.ascii	"\000"
 6310 10a1 00000000 		.space	7
 6310      000000
 6311 10a8 47726164 		.ascii	"Grad\000"
 6311      00
 6312 10ad 000000   		.space	3
 6313 10b0 2E       		.byte	46
 6314 10b1 000000   		.space	3
 6315 10b4 FFFFFFFF 		.word	-1
 6316 10b8 06       		.byte	6
 6317 10b9 000000   		.space	3
 6318 10bc 01000000 		.word	1
 6319 10c0 00       		.ascii	"\000"
 6320 10c1 00000000 		.space	7
 6320      000000
 6321 10c8 0D484D53 		.ascii	"\015HMS\000"
 6321      00
 6322 10cd 000000   		.space	3
 6323 10d0 2C       		.byte	44
 6324 10d1 000000   		.space	3
 6325 10d4 FFFFFFFF 		.word	-1
 6326 10d8 07       		.byte	7
 6327 10d9 000000   		.space	3
 6328 10dc 01000000 		.word	1
 6329 10e0 2D2D0D00 		.ascii	"--\015\000"
 6330 10e4 00000000 		.space	4
 6331 10e8 484D530D 		.ascii	"HMS\015\000"
 6331      00
 6332 10ed 000000   		.space	3
 6333 10f0 2D       		.byte	45
 6334 10f1 000000   		.space	3
 6335 10f4 FFFFFFFF 		.word	-1
 6336 10f8 2E       		.byte	46
 6337 10f9 000000   		.space	3
 6338 10fc FFFFFFFF 		.word	-1
 6339 1100 43505800 		.ascii	"CPX\000"
 6340 1104 00000000 		.space	4
 6341 1108 00       		.ascii	"\000"
 6342 1109 00000000 		.space	7
ARM GAS  /tmp/cc1aojQ3.s 			page 161


 6342      000000
 6343 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6343      6F625F43 
 6343      00
 6344 1119 00000000 		.space	6
 6344      0000
 6345 111f 00       		.space	1
 6346 1120 18       		.byte	24
 6347 1121 000000   		.space	3
 6348 1124 03000000 		.word	3
 6349 1128 34       		.byte	52
 6350 1129 000000   		.space	3
 6351 112c 31050000 		.word	1329
 6352 1130 14062100 		.ascii	"\024\006!\000"
 6353 1134 00000000 		.space	4
 6354 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6354      068200
 6355 113f 00       		.space	1
 6356 1140 34       		.byte	52
 6357 1141 000000   		.space	3
 6358 1144 12060000 		.word	1554
 6359 1148 2E       		.byte	46
 6360 1149 000000   		.space	3
 6361 114c FFFFFFFF 		.word	-1
 6362 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6362      2C7800
 6363 1157 00       		.space	1
 6364 1158 00       		.ascii	"\000"
 6365 1159 00000000 		.space	7
 6365      000000
 6366 1160 34       		.byte	52
 6367 1161 000000   		.space	3
 6368 1164 13060000 		.word	1555
 6369 1168 2E       		.byte	46
 6370 1169 000000   		.space	3
 6371 116c FFFFFFFF 		.word	-1
 6372 1170 14065079 		.ascii	"\024\006Py,x\000"
 6372      2C7800
 6373 1177 00       		.space	1
 6374 1178 00       		.ascii	"\000"
 6375 1179 00000000 		.space	7
 6375      000000
 6376 1180 2E       		.byte	46
 6377 1181 000000   		.space	3
 6378 1184 FFFFFFFF 		.word	-1
 6379 1188 2E       		.byte	46
 6380 1189 000000   		.space	3
 6381 118c FFFFFFFF 		.word	-1
 6382 1190 00       		.ascii	"\000"
 6383 1191 00000000 		.space	7
 6383      000000
 6384 1198 00       		.ascii	"\000"
 6385 1199 00000000 		.space	7
 6385      000000
 6386 11a0 2C       		.byte	44
 6387 11a1 000000   		.space	3
 6388 11a4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc1aojQ3.s 			page 162


 6389 11a8 2E       		.byte	46
 6390 11a9 000000   		.space	3
 6391 11ac FFFFFFFF 		.word	-1
 6392 11b0 2D2D0D00 		.ascii	"--\015\000"
 6393 11b4 00000000 		.space	4
 6394 11b8 00       		.ascii	"\000"
 6395 11b9 00000000 		.space	7
 6395      000000
 6396 11c0 2D       		.byte	45
 6397 11c1 000000   		.space	3
 6398 11c4 FFFFFFFF 		.word	-1
 6399 11c8 2E       		.byte	46
 6400 11c9 000000   		.space	3
 6401 11cc FFFFFFFF 		.word	-1
 6402 11d0 43505800 		.ascii	"CPX\000"
 6403 11d4 00000000 		.space	4
 6404 11d8 00       		.ascii	"\000"
 6405 11d9 00000000 		.space	7
 6405      000000
 6406 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6406      616E6B32 
 6406      5F4300
 6407 11eb 00000000 		.space	4
 6408 11ef 00       		.space	1
 6409 11f0 00       		.byte	0
 6410 11f1 000000   		.space	3
 6411 11f4 01000000 		.word	1
 6412 11f8 2E       		.byte	46
 6413 11f9 000000   		.space	3
 6414 11fc FFFFFFFF 		.word	-1
 6415 1200 48595000 		.ascii	"HYP\000"
 6416 1204 00000000 		.space	4
 6417 1208 00       		.ascii	"\000"
 6418 1209 00000000 		.space	7
 6418      000000
 6419 1210 16       		.byte	22
 6420 1211 000000   		.space	3
 6421 1214 01000000 		.word	1
 6422 1218 2E       		.byte	46
 6423 1219 000000   		.space	3
 6424 121c FFFFFFFF 		.word	-1
 6425 1220 312F5800 		.ascii	"1/X\000"
 6426 1224 00000000 		.space	4
 6427 1228 00       		.ascii	"\000"
 6428 1229 00000000 		.space	7
 6428      000000
 6429 1230 1C       		.byte	28
 6430 1231 000000   		.space	3
 6431 1234 01000000 		.word	1
 6432 1238 2E       		.byte	46
 6433 1239 000000   		.space	3
 6434 123c FFFFFFFF 		.word	-1
 6435 1240 035800   		.ascii	"\003X\000"
 6436 1243 00000000 		.space	5
 6436      00
 6437 1248 00       		.ascii	"\000"
 6438 1249 00000000 		.space	7
ARM GAS  /tmp/cc1aojQ3.s 			page 163


 6438      000000
 6439 1250 13       		.byte	19
 6440 1251 000000   		.space	3
 6441 1254 02000000 		.word	2
 6442 1258 2E       		.byte	46
 6443 1259 000000   		.space	3
 6444 125c FFFFFFFF 		.word	-1
 6445 1260 4C4F4700 		.ascii	"LOG\000"
 6446 1264 00000000 		.space	4
 6447 1268 00       		.ascii	"\000"
 6448 1269 00000000 		.space	7
 6448      000000
 6449 1270 2C       		.byte	44
 6450 1271 000000   		.space	3
 6451 1274 FFFFFFFF 		.word	-1
 6452 1278 2E       		.byte	46
 6453 1279 000000   		.space	3
 6454 127c FFFFFFFF 		.word	-1
 6455 1280 2D2D0D00 		.ascii	"--\015\000"
 6456 1284 00000000 		.space	4
 6457 1288 00       		.ascii	"\000"
 6458 1289 00000000 		.space	7
 6458      000000
 6459 1290 2D       		.byte	45
 6460 1291 000000   		.space	3
 6461 1294 FFFFFFFF 		.word	-1
 6462 1298 2E       		.byte	46
 6463 1299 000000   		.space	3
 6464 129c FFFFFFFF 		.word	-1
 6465 12a0 43505800 		.ascii	"CPX\000"
 6466 12a4 00000000 		.space	4
 6467 12a8 00       		.ascii	"\000"
 6468 12a9 00000000 		.space	7
 6468      000000
 6469 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6469      73635F43 
 6469      00
 6470 12b9 00000000 		.space	6
 6470      0000
 6471 12bf 00       		.space	1
 6472 12c0 25       		.byte	37
 6473 12c1 000000   		.space	3
 6474 12c4 01000000 		.word	1
 6475 12c8 14       		.byte	20
 6476 12c9 000000   		.space	3
 6477 12cc 01000000 		.word	1
 6478 12d0 7C7A7C00 		.ascii	"|z|\000"
 6479 12d4 00000000 		.space	4
 6480 12d8 14329C00 		.ascii	"\0242\234\000"
 6481 12dc 00000000 		.space	4
 6482 12e0 25       		.byte	37
 6483 12e1 000000   		.space	3
 6484 12e4 02000000 		.word	2
 6485 12e8 14       		.byte	20
 6486 12e9 000000   		.space	3
 6487 12ec 02000000 		.word	2
 6488 12f0 524E4400 		.ascii	"RND\000"
ARM GAS  /tmp/cc1aojQ3.s 			page 164


 6489 12f4 00000000 		.space	4
 6490 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6490      BA00
 6491 12fe 0000     		.space	2
 6492 1300 26       		.byte	38
 6493 1301 000000   		.space	3
 6494 1304 01000000 		.word	1
 6495 1308 15       		.byte	21
 6496 1309 000000   		.space	3
 6497 130c 02000000 		.word	2
 6498 1310 300D5265 		.ascii	"0\015Re\000"
 6498      00
 6499 1315 000000   		.space	3
 6500 1318 144C6F67 		.ascii	"\024Log\213\000"
 6500      8B00
 6501 131e 0000     		.space	2
 6502 1320 26       		.byte	38
 6503 1321 000000   		.space	3
 6504 1324 02000000 		.word	2
 6505 1328 16       		.byte	22
 6506 1329 000000   		.space	3
 6507 132c 02000000 		.word	2
 6508 1330 300D496D 		.ascii	"0\015Im\000"
 6508      00
 6509 1335 000000   		.space	3
 6510 1338 147C7C65 		.ascii	"\024||el\000"
 6510      6C00
 6511 133e 0000     		.space	2
 6512 1340 2C       		.byte	44
 6513 1341 000000   		.space	3
 6514 1344 FFFFFFFF 		.word	-1
 6515 1348 1C       		.byte	28
 6516 1349 000000   		.space	3
 6517 134c 03000000 		.word	3
 6518 1350 2D2D0D00 		.ascii	"--\015\000"
 6519 1354 00000000 		.space	4
 6520 1358 142E1C00 		.ascii	"\024.\034\000"
 6521 135c 00000000 		.space	4
 6522 1360 2D       		.byte	45
 6523 1361 000000   		.space	3
 6524 1364 FFFFFFFF 		.word	-1
 6525 1368 16       		.byte	22
 6526 1369 000000   		.space	3
 6527 136c 03000000 		.word	3
 6528 1370 43505800 		.ascii	"CPX\000"
 6529 1374 00000000 		.space	4
 6530 1378 142E2F00 		.ascii	"\024./\000"
 6531 137c 00000000 		.space	4
 6532 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6532      65726D65 
 6532      6E7500
 6533 138b 00000000 		.space	4
 6534 138f 00       		.space	1
 6535 1390 34       		.byte	52
 6536 1391 000000   		.space	3
 6537 1394 00FB0000 		.word	64256
 6538 1398 2E       		.byte	46
ARM GAS  /tmp/cc1aojQ3.s 			page 165


 6539 1399 000000   		.space	3
 6540 139c FFFFFFFF 		.word	-1
 6541 13a0 554D454E 		.ascii	"UMEN\000"
 6541      00
 6542 13a5 000000   		.space	3
 6543 13a8 00       		.ascii	"\000"
 6544 13a9 00000000 		.space	7
 6544      000000
 6545 13b0 34       		.byte	52
 6546 13b1 000000   		.space	3
 6547 13b4 55FB4D31 		.word	827194197
 6548 13b8 34       		.byte	52
 6549 13b9 000000   		.space	3
 6550 13bc 55FB4D34 		.word	877525845
 6551 13c0 554D3100 		.ascii	"UM1\000"
 6552 13c4 00000000 		.space	4
 6553 13c8 554D3400 		.ascii	"UM4\000"
 6554 13cc 00000000 		.space	4
 6555 13d0 34       		.byte	52
 6556 13d1 000000   		.space	3
 6557 13d4 55FB4D32 		.word	843971413
 6558 13d8 34       		.byte	52
 6559 13d9 000000   		.space	3
 6560 13dc 55FB4D35 		.word	894303061
 6561 13e0 554D3200 		.ascii	"UM2\000"
 6562 13e4 00000000 		.space	4
 6563 13e8 554D3500 		.ascii	"UM5\000"
 6564 13ec 00000000 		.space	4
 6565 13f0 34       		.byte	52
 6566 13f1 000000   		.space	3
 6567 13f4 55FB4D33 		.word	860748629
 6568 13f8 34       		.byte	52
 6569 13f9 000000   		.space	3
 6570 13fc 55FB4D36 		.word	911080277
 6571 1400 554D3300 		.ascii	"UM3\000"
 6572 1404 00000000 		.space	4
 6573 1408 554D3600 		.ascii	"UM6\000"
 6574 140c 00000000 		.space	4
 6575 1410 2C       		.byte	44
 6576 1411 000000   		.space	3
 6577 1414 FFFFFFFF 		.word	-1
 6578 1418 1C       		.byte	28
 6579 1419 000000   		.space	3
 6580 141c 03000000 		.word	3
 6581 1420 2D2D0D00 		.ascii	"--\015\000"
 6582 1424 00000000 		.space	4
 6583 1428 00       		.ascii	"\000"
 6584 1429 00000000 		.space	7
 6584      000000
 6585 1430 2D       		.byte	45
 6586 1431 000000   		.space	3
 6587 1434 FFFFFFFF 		.word	-1
 6588 1438 16       		.byte	22
 6589 1439 000000   		.space	3
 6590 143c 03000000 		.word	3
 6591 1440 43505800 		.ascii	"CPX\000"
 6592 1444 00000000 		.space	4
ARM GAS  /tmp/cc1aojQ3.s 			page 166


 6593 1448 00       		.ascii	"\000"
 6594 1449 00000000 		.space	7
 6594      000000
 6595 1450 4D5F5072 		.ascii	"M_Print\000"
 6595      696E7400 
 6596 1458 00000000 		.space	7
 6596      000000
 6597 145f 00       		.space	1
 6598 1460 34       		.byte	52
 6599 1461 000000   		.space	3
 6600 1464 D9010000 		.word	473
 6601 1468 34       		.byte	52
 6602 1469 000000   		.space	3
 6603 146c DA010000 		.word	474
 6604 1470 92064F6E 		.ascii	"\222\006On\000"
 6604      00
 6605 1475 000000   		.space	3
 6606 1478 92064F66 		.ascii	"\222\006Off\000"
 6606      6600
 6607 147e 0000     		.space	2
 6608 1480 34       		.byte	52
 6609 1481 000000   		.space	3
 6610 1484 00AF0000 		.word	44800
 6611 1488 34       		.byte	52
 6612 1489 000000   		.space	3
 6613 148c 00B60000 		.word	46592
 6614 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6614      646500
 6615 1497 00       		.space	1
 6616 1498 92064462 		.ascii	"\222\006DbSp\000"
 6616      537000
 6617 149f 00       		.space	1
 6618 14a0 34       		.byte	52
 6619 14a1 000000   		.space	3
 6620 14a4 BC010000 		.word	444
 6621 14a8 34       		.byte	52
 6622 14a9 000000   		.space	3
 6623 14ac BD010000 		.word	445
 6624 14b0 92065072 		.ascii	"\222\006Prog\000"
 6624      6F6700
 6625 14b7 00       		.space	1
 6626 14b8 92065265 		.ascii	"\222\006Regs\000"
 6626      677300
 6627 14bf 00       		.space	1
 6628 14c0 34       		.byte	52
 6629 14c1 000000   		.space	3
 6630 14c4 BE010000 		.word	446
 6631 14c8 34       		.byte	52
 6632 14c9 000000   		.space	3
 6633 14cc BF010000 		.word	447
 6634 14d0 92065374 		.ascii	"\222\006Stk\000"
 6634      6B00
 6635 14d6 0000     		.space	2
 6636 14d8 92069100 		.ascii	"\222\006\221\000"
 6637 14dc 00000000 		.space	4
 6638 14e0 2C       		.byte	44
 6639 14e1 000000   		.space	3
ARM GAS  /tmp/cc1aojQ3.s 			page 167


 6640 14e4 FFFFFFFF 		.word	-1
 6641 14e8 34       		.byte	52
 6642 14e9 000000   		.space	3
 6643 14ec C0010000 		.word	448
 6644 14f0 2D2D0D00 		.ascii	"--\015\000"
 6645 14f4 00000000 		.space	4
 6646 14f8 9206A000 		.ascii	"\222\006\240\000"
 6647 14fc 00000000 		.space	4
 6648 1500 2D       		.byte	45
 6649 1501 000000   		.space	3
 6650 1504 FFFFFFFF 		.word	-1
 6651 1508 34       		.byte	52
 6652 1509 000000   		.space	3
 6653 150c C3010000 		.word	451
 6654 1510 43505800 		.ascii	"CPX\000"
 6655 1514 00000000 		.space	4
 6656 1518 92064144 		.ascii	"\222\006ADV\000"
 6656      5600
 6657 151e 0000     		.space	2
 6658              		.section	.rodata.mapping_alpha.11145,"a"
 6659              		.align	2
 6660              		.set	.LANCHOR16,. + 0
 6663              	mapping_alpha.11145:
 6664 0000 63       		.byte	99
 6665 0001 000000   		.space	3
 6666 0004 FFFFFFFF 		.word	-1
 6667 0008 00       		.byte	0
 6668 0009 000000   		.space	3
 6669 000c FFFFFFFF 		.word	-1
 6670 0010 01       		.byte	1
 6671 0011 000000   		.space	3
 6672 0014 FFFFFFFF 		.word	-1
 6673 0018 02       		.byte	2
 6674 0019 000000   		.space	3
 6675 001c FFFFFFFF 		.word	-1
 6676 0020 03       		.byte	3
 6677 0021 000000   		.space	3
 6678 0024 FFFFFFFF 		.word	-1
 6679 0028 04       		.byte	4
 6680 0029 000000   		.space	3
 6681 002c FFFFFFFF 		.word	-1
 6682 0030 05       		.byte	5
 6683 0031 000000   		.space	3
 6684 0034 FFFFFFFF 		.word	-1
 6685 0038 06       		.byte	6
 6686 0039 000000   		.space	3
 6687 003c FFFFFFFF 		.word	-1
 6688 0040 07       		.byte	7
 6689 0041 000000   		.space	3
 6690 0044 FFFFFFFF 		.word	-1
 6691 0048 08       		.byte	8
 6692 0049 000000   		.space	3
 6693 004c FFFFFFFF 		.word	-1
 6694 0050 09       		.byte	9
 6695 0051 000000   		.space	3
 6696 0054 FFFFFFFF 		.word	-1
 6697 0058 0A       		.byte	10
ARM GAS  /tmp/cc1aojQ3.s 			page 168


 6698 0059 000000   		.space	3
 6699 005c FFFFFFFF 		.word	-1
 6700 0060 0B       		.byte	11
 6701 0061 000000   		.space	3
 6702 0064 FFFFFFFF 		.word	-1
 6703 0068 0C       		.byte	12
 6704 0069 000000   		.space	3
 6705 006c FFFFFFFF 		.word	-1
 6706 0070 0D       		.byte	13
 6707 0071 000000   		.space	3
 6708 0074 FFFFFFFF 		.word	-1
 6709 0078 0E       		.byte	14
 6710 0079 000000   		.space	3
 6711 007c FFFFFFFF 		.word	-1
 6712 0080 0F       		.byte	15
 6713 0081 000000   		.space	3
 6714 0084 FFFFFFFF 		.word	-1
 6715 0088 10       		.byte	16
 6716 0089 000000   		.space	3
 6717 008c FFFFFFFF 		.word	-1
 6718 0090 12       		.byte	18
 6719 0091 000000   		.space	3
 6720 0094 FFFFFFFF 		.word	-1
 6721 0098 13       		.byte	19
 6722 0099 000000   		.space	3
 6723 009c FFFFFFFF 		.word	-1
 6724 00a0 14       		.byte	20
 6725 00a1 000000   		.space	3
 6726 00a4 FFFFFFFF 		.word	-1
 6727 00a8 15       		.byte	21
 6728 00a9 000000   		.space	3
 6729 00ac FFFFFFFF 		.word	-1
 6730 00b0 16       		.byte	22
 6731 00b1 000000   		.space	3
 6732 00b4 FFFFFFFF 		.word	-1
 6733 00b8 18       		.byte	24
 6734 00b9 000000   		.space	3
 6735 00bc FFFFFFFF 		.word	-1
 6736 00c0 19       		.byte	25
 6737 00c1 000000   		.space	3
 6738 00c4 FFFFFFFF 		.word	-1
 6739 00c8 1A       		.byte	26
 6740 00c9 000000   		.space	3
 6741 00cc FFFFFFFF 		.word	-1
 6742 00d0 1B       		.byte	27
 6743 00d1 000000   		.space	3
 6744 00d4 FFFFFFFF 		.word	-1
 6745 00d8 1C       		.byte	28
 6746 00d9 000000   		.space	3
 6747 00dc FFFFFFFF 		.word	-1
 6748 00e0 1E       		.byte	30
 6749 00e1 000000   		.space	3
 6750 00e4 FFFFFFFF 		.word	-1
 6751 00e8 1F       		.byte	31
 6752 00e9 000000   		.space	3
 6753 00ec FFFFFFFF 		.word	-1
 6754 00f0 20       		.byte	32
ARM GAS  /tmp/cc1aojQ3.s 			page 169


 6755 00f1 000000   		.space	3
 6756 00f4 FFFFFFFF 		.word	-1
 6757 00f8 21       		.byte	33
 6758 00f9 000000   		.space	3
 6759 00fc FFFFFFFF 		.word	-1
 6760 0100 22       		.byte	34
 6761 0101 000000   		.space	3
 6762 0104 FFFFFFFF 		.word	-1
 6763 0108 24       		.byte	36
 6764 0109 000000   		.space	3
 6765 010c FFFFFFFF 		.word	-1
 6766 0110 25       		.byte	37
 6767 0111 000000   		.space	3
 6768 0114 FFFFFFFF 		.word	-1
 6769 0118 26       		.byte	38
 6770 0119 000000   		.space	3
 6771 011c FFFFFFFF 		.word	-1
 6772 0120 27       		.byte	39
 6773 0121 000000   		.space	3
 6774 0124 FFFFFFFF 		.word	-1
 6775 0128 28       		.byte	40
 6776 0129 000000   		.space	3
 6777 012c FFFFFFFF 		.word	-1
 6778 0130 2E       		.byte	46
 6779 0131 000000   		.space	3
 6780 0134 FFFFFFFF 		.word	-1
 6781 0138 2E       		.byte	46
 6782 0139 000000   		.space	3
 6783 013c FFFFFFFF 		.word	-1
 6784 0140 2E       		.byte	46
 6785 0141 000000   		.space	3
 6786 0144 FFFFFFFF 		.word	-1
 6787 0148 2E       		.byte	46
 6788 0149 000000   		.space	3
 6789 014c FFFFFFFF 		.word	-1
 6790 0150 2C       		.byte	44
 6791 0151 000000   		.space	3
 6792 0154 FFFFFFFF 		.word	-1
 6793 0158 2D       		.byte	45
 6794 0159 000000   		.space	3
 6795 015c FFFFFFFF 		.word	-1
 6796 0160 2E       		.byte	46
 6797 0161 000000   		.space	3
 6798 0164 FFFFFFFF 		.word	-1
 6799 0168 2E       		.byte	46
 6800 0169 000000   		.space	3
 6801 016c FFFFFFFF 		.word	-1
 6802 0170 2E       		.byte	46
 6803 0171 000000   		.space	3
 6804 0174 FFFFFFFF 		.word	-1
 6805              		.section	.rodata.mapping_fshift.11143,"a"
 6806              		.align	2
 6807              		.set	.LANCHOR14,. + 0
 6810              	mapping_fshift.11143:
 6811 0000 63       		.byte	99
 6812 0001 000000   		.space	3
 6813 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc1aojQ3.s 			page 170


 6814 0008 22       		.byte	34
 6815 0009 000000   		.space	3
 6816 000c 03000000 		.word	3
 6817 0010 15       		.byte	21
 6818 0011 000000   		.space	3
 6819 0014 01000000 		.word	1
 6820 0018 1C       		.byte	28
 6821 0019 000000   		.space	3
 6822 001c 02000000 		.word	2
 6823 0020 13       		.byte	19
 6824 0021 000000   		.space	3
 6825 0024 01000000 		.word	1
 6826 0028 12       		.byte	18
 6827 0029 000000   		.space	3
 6828 002c 01000000 		.word	1
 6829 0030 12       		.byte	18
 6830 0031 000000   		.space	3
 6831 0034 03000000 		.word	3
 6832 0038 31       		.byte	49
 6833 0039 000000   		.space	3
 6834 003c 0F000000 		.word	15
 6835 0040 22       		.byte	34
 6836 0041 000000   		.space	3
 6837 0044 01000000 		.word	1
 6838 0048 0F       		.byte	15
 6839 0049 000000   		.space	3
 6840 004c 03000000 		.word	3
 6841 0050 01       		.byte	1
 6842 0051 000000   		.space	3
 6843 0054 02000000 		.word	2
 6844 0058 02       		.byte	2
 6845 0059 000000   		.space	3
 6846 005c 02000000 		.word	2
 6847 0060 03       		.byte	3
 6848 0061 000000   		.space	3
 6849 0064 02000000 		.word	2
 6850 0068 0C       		.byte	12
 6851 0069 000000   		.space	3
 6852 006c 01000000 		.word	1
 6853 0070 34       		.byte	52
 6854 0071 000000   		.space	3
 6855 0074 6C2A0000 		.word	10860
 6856 0078 2F       		.byte	47
 6857 0079 000000   		.space	3
 6858 007c 04000000 		.word	4
 6859 0080 2F       		.byte	47
 6860 0081 000000   		.space	3
 6861 0084 02000000 		.word	2
 6862 0088 2F       		.byte	47
 6863 0089 000000   		.space	3
 6864 008c 01000000 		.word	1
 6865 0090 18       		.byte	24
 6866 0091 000000   		.space	3
 6867 0094 00000000 		.word	0
 6868 0098 20       		.byte	32
 6869 0099 000000   		.space	3
 6870 009c 01000000 		.word	1
ARM GAS  /tmp/cc1aojQ3.s 			page 171


 6871 00a0 2F       		.byte	47
 6872 00a1 000000   		.space	3
 6873 00a4 0E000000 		.word	14
 6874 00a8 1C       		.byte	28
 6875 00a9 000000   		.space	3
 6876 00ac 03000000 		.word	3
 6877 00b0 2F       		.byte	47
 6878 00b1 000000   		.space	3
 6879 00b4 0C000000 		.word	12
 6880 00b8 1E       		.byte	30
 6881 00b9 000000   		.space	3
 6882 00bc 00000000 		.word	0
 6883 00c0 2F       		.byte	47
 6884 00c1 000000   		.space	3
 6885 00c4 03000000 		.word	3
 6886 00c8 04       		.byte	4
 6887 00c9 000000   		.space	3
 6888 00cc 03000000 		.word	3
 6889 00d0 2F       		.byte	47
 6890 00d1 000000   		.space	3
 6891 00d4 0A000000 		.word	10
 6892 00d8 2F       		.byte	47
 6893 00d9 000000   		.space	3
 6894 00dc 0B000000 		.word	11
 6895 00e0 2A       		.byte	42
 6896 00e1 000000   		.space	3
 6897 00e4 00000000 		.word	0
 6898 00e8 31       		.byte	49
 6899 00e9 000000   		.space	3
 6900 00ec 0D000000 		.word	13
 6901 00f0 2F       		.byte	47
 6902 00f1 000000   		.space	3
 6903 00f4 63000000 		.word	99
 6904 00f8 20       		.byte	32
 6905 00f9 000000   		.space	3
 6906 00fc 03000000 		.word	3
 6907 0100 2F       		.byte	47
 6908 0101 000000   		.space	3
 6909 0104 19000000 		.word	25
 6910 0108 24       		.byte	36
 6911 0109 000000   		.space	3
 6912 010c 03000000 		.word	3
 6913 0110 2F       		.byte	47
 6914 0111 000000   		.space	3
 6915 0114 08000000 		.word	8
 6916 0118 0D       		.byte	13
 6917 0119 000000   		.space	3
 6918 011c 01000000 		.word	1
 6919 0120 27       		.byte	39
 6920 0121 000000   		.space	3
 6921 0124 03000000 		.word	3
 6922 0128 06       		.byte	6
 6923 0129 000000   		.space	3
 6924 012c 03000000 		.word	3
 6925 0130 2E       		.byte	46
 6926 0131 000000   		.space	3
 6927 0134 00000000 		.word	0
ARM GAS  /tmp/cc1aojQ3.s 			page 172


 6928 0138 2E       		.byte	46
 6929 0139 000000   		.space	3
 6930 013c 00000000 		.word	0
 6931 0140 2E       		.byte	46
 6932 0141 000000   		.space	3
 6933 0144 00000000 		.word	0
 6934 0148 2E       		.byte	46
 6935 0149 000000   		.space	3
 6936 014c 00000000 		.word	0
 6937 0150 2E       		.byte	46
 6938 0151 000000   		.space	3
 6939 0154 00000000 		.word	0
 6940 0158 2E       		.byte	46
 6941 0159 000000   		.space	3
 6942 015c 00000000 		.word	0
 6943 0160 2E       		.byte	46
 6944 0161 000000   		.space	3
 6945 0164 00000000 		.word	0
 6946 0168 2F       		.byte	47
 6947 0169 000000   		.space	3
 6948 016c FFFFFFFF 		.word	-1
 6949 0170 2F       		.byte	47
 6950 0171 000000   		.space	3
 6951 0174 05000000 		.word	5
 6952              		.section	.rodata.mapping_gshift.11144,"a"
 6953              		.align	2
 6954              		.set	.LANCHOR17,. + 0
 6957              	mapping_gshift.11144:
 6958 0000 63       		.byte	99
 6959 0001 000000   		.space	3
 6960 0004 FFFFFFFF 		.word	-1
 6961 0008 28       		.byte	40
 6962 0009 000000   		.space	3
 6963 000c 03000000 		.word	3
 6964 0010 16       		.byte	22
 6965 0011 000000   		.space	3
 6966 0014 01000000 		.word	1
 6967 0018 1C       		.byte	28
 6968 0019 000000   		.space	3
 6969 001c 01000000 		.word	1
 6970 0020 13       		.byte	19
 6971 0021 000000   		.space	3
 6972 0024 02000000 		.word	2
 6973 0028 2E       		.byte	46
 6974 0029 000000   		.space	3
 6975 002c 00000000 		.word	0
 6976 0030 2E       		.byte	46
 6977 0031 000000   		.space	3
 6978 0034 00000000 		.word	0
 6979 0038 2E       		.byte	46
 6980 0039 000000   		.space	3
 6981 003c 00000000 		.word	0
 6982 0040 07       		.byte	7
 6983 0041 000000   		.space	3
 6984 0044 03000000 		.word	3
 6985 0048 08       		.byte	8
 6986 0049 000000   		.space	3
ARM GAS  /tmp/cc1aojQ3.s 			page 173


 6987 004c 03000000 		.word	3
 6988 0050 2F       		.byte	47
 6989 0051 000000   		.space	3
 6990 0054 04000000 		.word	4
 6991 0058 2F       		.byte	47
 6992 0059 000000   		.space	3
 6993 005c 04000000 		.word	4
 6994 0060 2F       		.byte	47
 6995 0061 000000   		.space	3
 6996 0064 04000000 		.word	4
 6997 0068 0C       		.byte	12
 6998 0069 000000   		.space	3
 6999 006c 02000000 		.word	2
 7000 0070 2F       		.byte	47
 7001 0071 000000   		.space	3
 7002 0074 06000000 		.word	6
 7003 0078 05       		.byte	5
 7004 0079 000000   		.space	3
 7005 007c 03000000 		.word	3
 7006 0080 2E       		.byte	46
 7007 0081 000000   		.space	3
 7008 0084 00000000 		.word	0
 7009 0088 2E       		.byte	46
 7010 0089 000000   		.space	3
 7011 008c 00000000 		.word	0
 7012 0090 2E       		.byte	46
 7013 0091 000000   		.space	3
 7014 0094 00000000 		.word	0
 7015 0098 2E       		.byte	46
 7016 0099 000000   		.space	3
 7017 009c 00000000 		.word	0
 7018 00a0 2E       		.byte	46
 7019 00a1 000000   		.space	3
 7020 00a4 00000000 		.word	0
 7021 00a8 1B       		.byte	27
 7022 00a9 000000   		.space	3
 7023 00ac 03000000 		.word	3
 7024 00b0 1A       		.byte	26
 7025 00b1 000000   		.space	3
 7026 00b4 03000000 		.word	3
 7027 00b8 2E       		.byte	46
 7028 00b9 000000   		.space	3
 7029 00bc 00000000 		.word	0
 7030 00c0 2E       		.byte	46
 7031 00c1 000000   		.space	3
 7032 00c4 00000000 		.word	0
 7033 00c8 0C       		.byte	12
 7034 00c9 000000   		.space	3
 7035 00cc 03000000 		.word	3
 7036 00d0 1F       		.byte	31
 7037 00d1 000000   		.space	3
 7038 00d4 03000000 		.word	3
 7039 00d8 19       		.byte	25
 7040 00d9 000000   		.space	3
 7041 00dc 03000000 		.word	3
 7042 00e0 2A       		.byte	42
 7043 00e1 000000   		.space	3
ARM GAS  /tmp/cc1aojQ3.s 			page 174


 7044 00e4 FFFFFFFF 		.word	-1
 7045 00e8 2E       		.byte	46
 7046 00e9 000000   		.space	3
 7047 00ec 00000000 		.word	0
 7048 00f0 2F       		.byte	47
 7049 00f1 000000   		.space	3
 7050 00f4 18000000 		.word	24
 7051 00f8 21       		.byte	33
 7052 00f9 000000   		.space	3
 7053 00fc 03000000 		.word	3
 7054 0100 2E       		.byte	46
 7055 0101 000000   		.space	3
 7056 0104 00000000 		.word	0
 7057 0108 24       		.byte	36
 7058 0109 000000   		.space	3
 7059 010c 02000000 		.word	2
 7060 0110 2F       		.byte	47
 7061 0111 000000   		.space	3
 7062 0114 0D000000 		.word	13
 7063 0118 2E       		.byte	46
 7064 0119 000000   		.space	3
 7065 011c 00000000 		.word	0
 7066 0120 2F       		.byte	47
 7067 0121 000000   		.space	3
 7068 0124 07000000 		.word	7
 7069 0128 1E       		.byte	30
 7070 0129 000000   		.space	3
 7071 012c 03000000 		.word	3
 7072 0130 2E       		.byte	46
 7073 0131 000000   		.space	3
 7074 0134 00000000 		.word	0
 7075 0138 2E       		.byte	46
 7076 0139 000000   		.space	3
 7077 013c 00000000 		.word	0
 7078 0140 2E       		.byte	46
 7079 0141 000000   		.space	3
 7080 0144 00000000 		.word	0
 7081 0148 2E       		.byte	46
 7082 0149 000000   		.space	3
 7083 014c 00000000 		.word	0
 7084 0150 2E       		.byte	46
 7085 0151 000000   		.space	3
 7086 0154 00000000 		.word	0
 7087 0158 2E       		.byte	46
 7088 0159 000000   		.space	3
 7089 015c 00000000 		.word	0
 7090 0160 2E       		.byte	46
 7091 0161 000000   		.space	3
 7092 0164 00000000 		.word	0
 7093 0168 2E       		.byte	46
 7094 0169 000000   		.space	3
 7095 016c 00000000 		.word	0
 7096 0170 2E       		.byte	46
 7097 0171 000000   		.space	3
 7098 0174 00000000 		.word	0
 7099              		.section	.rodata.mapping_none.11142,"a"
 7100              		.align	2
ARM GAS  /tmp/cc1aojQ3.s 			page 175


 7101              		.set	.LANCHOR13,. + 0
 7104              	mapping_none.11142:
 7105 0000 63       		.byte	99
 7106 0001 000000   		.space	3
 7107 0004 FFFFFFFF 		.word	-1
 7108 0008 00       		.byte	0
 7109 0009 000000   		.space	3
 7110 000c 00000000 		.word	0
 7111 0010 01       		.byte	1
 7112 0011 000000   		.space	3
 7113 0014 00000000 		.word	0
 7114 0018 03       		.byte	3
 7115 0019 000000   		.space	3
 7116 001c 00000000 		.word	0
 7117 0020 13       		.byte	19
 7118 0021 000000   		.space	3
 7119 0024 02000000 		.word	2
 7120 0028 12       		.byte	18
 7121 0029 000000   		.space	3
 7122 002c 02000000 		.word	2
 7123 0030 12       		.byte	18
 7124 0031 000000   		.space	3
 7125 0034 00000000 		.word	0
 7126 0038 06       		.byte	6
 7127 0039 000000   		.space	3
 7128 003c 00000000 		.word	0
 7129 0040 07       		.byte	7
 7130 0041 000000   		.space	3
 7131 0044 00000000 		.word	0
 7132 0048 08       		.byte	8
 7133 0049 000000   		.space	3
 7134 004c 00000000 		.word	0
 7135 0050 01       		.byte	1
 7136 0051 000000   		.space	3
 7137 0054 01000000 		.word	1
 7138 0058 02       		.byte	2
 7139 0059 000000   		.space	3
 7140 005c 01000000 		.word	1
 7141 0060 03       		.byte	3
 7142 0061 000000   		.space	3
 7143 0064 01000000 		.word	1
 7144 0068 0C       		.byte	12
 7145 0069 000000   		.space	3
 7146 006c 00000000 		.word	0
 7147 0070 0D       		.byte	13
 7148 0071 000000   		.space	3
 7149 0074 00000000 		.word	0
 7150 0078 0E       		.byte	14
 7151 0079 000000   		.space	3
 7152 007c 00000000 		.word	0
 7153 0080 0F       		.byte	15
 7154 0081 000000   		.space	3
 7155 0084 00000000 		.word	0
 7156 0088 10       		.byte	16
 7157 0089 000000   		.space	3
 7158 008c 00000000 		.word	0
 7159 0090 18       		.byte	24
ARM GAS  /tmp/cc1aojQ3.s 			page 176


 7160 0091 000000   		.space	3
 7161 0094 00000000 		.word	0
 7162 0098 13       		.byte	19
 7163 0099 000000   		.space	3
 7164 009c 00000000 		.word	0
 7165 00a0 14       		.byte	20
 7166 00a1 000000   		.space	3
 7167 00a4 00000000 		.word	0
 7168 00a8 15       		.byte	21
 7169 00a9 000000   		.space	3
 7170 00ac 00000000 		.word	0
 7171 00b0 16       		.byte	22
 7172 00b1 000000   		.space	3
 7173 00b4 00000000 		.word	0
 7174 00b8 1E       		.byte	30
 7175 00b9 000000   		.space	3
 7176 00bc 00000000 		.word	0
 7177 00c0 19       		.byte	25
 7178 00c1 000000   		.space	3
 7179 00c4 00000000 		.word	0
 7180 00c8 1A       		.byte	26
 7181 00c9 000000   		.space	3
 7182 00cc 00000000 		.word	0
 7183 00d0 1B       		.byte	27
 7184 00d1 000000   		.space	3
 7185 00d4 00000000 		.word	0
 7186 00d8 1C       		.byte	28
 7187 00d9 000000   		.space	3
 7188 00dc 00000000 		.word	0
 7189 00e0 29       		.byte	41
 7190 00e1 000000   		.space	3
 7191 00e4 00000000 		.word	0
 7192 00e8 1F       		.byte	31
 7193 00e9 000000   		.space	3
 7194 00ec 00000000 		.word	0
 7195 00f0 20       		.byte	32
 7196 00f1 000000   		.space	3
 7197 00f4 00000000 		.word	0
 7198 00f8 21       		.byte	33
 7199 00f9 000000   		.space	3
 7200 00fc 00000000 		.word	0
 7201 0100 22       		.byte	34
 7202 0101 000000   		.space	3
 7203 0104 00000000 		.word	0
 7204 0108 24       		.byte	36
 7205 0109 000000   		.space	3
 7206 010c 00000000 		.word	0
 7207 0110 25       		.byte	37
 7208 0111 000000   		.space	3
 7209 0114 00000000 		.word	0
 7210 0118 26       		.byte	38
 7211 0119 000000   		.space	3
 7212 011c 00000000 		.word	0
 7213 0120 27       		.byte	39
 7214 0121 000000   		.space	3
 7215 0124 00000000 		.word	0
 7216 0128 28       		.byte	40
ARM GAS  /tmp/cc1aojQ3.s 			page 177


 7217 0129 000000   		.space	3
 7218 012c 00000000 		.word	0
 7219 0130 2E       		.byte	46
 7220 0131 000000   		.space	3
 7221 0134 00000000 		.word	0
 7222 0138 2E       		.byte	46
 7223 0139 000000   		.space	3
 7224 013c 00000000 		.word	0
 7225 0140 2E       		.byte	46
 7226 0141 000000   		.space	3
 7227 0144 00000000 		.word	0
 7228 0148 2E       		.byte	46
 7229 0149 000000   		.space	3
 7230 014c 00000000 		.word	0
 7231 0150 2E       		.byte	46
 7232 0151 000000   		.space	3
 7233 0154 00000000 		.word	0
 7234 0158 2E       		.byte	46
 7235 0159 000000   		.space	3
 7236 015c 00000000 		.word	0
 7237 0160 2E       		.byte	46
 7238 0161 000000   		.space	3
 7239 0164 00000000 		.word	0
 7240 0168 2E       		.byte	46
 7241 0169 000000   		.space	3
 7242 016c 00000000 		.word	0
 7243 0170 2E       		.byte	46
 7244 0171 000000   		.space	3
 7245 0174 00000000 		.word	0
 7246              		.section	.rodata.mapping_running.11146,"a"
 7247              		.align	2
 7248              		.set	.LANCHOR12,. + 0
 7251              	mapping_running.11146:
 7252 0000 63       		.byte	99
 7253 0001 000000   		.space	3
 7254 0004 FFFFFFFF 		.word	-1
 7255 0008 00       		.byte	0
 7256 0009 000000   		.space	3
 7257 000c 00000000 		.word	0
 7258 0010 01       		.byte	1
 7259 0011 000000   		.space	3
 7260 0014 00000000 		.word	0
 7261 0018 02       		.byte	2
 7262 0019 000000   		.space	3
 7263 001c 00000000 		.word	0
 7264 0020 03       		.byte	3
 7265 0021 000000   		.space	3
 7266 0024 00000000 		.word	0
 7267 0028 04       		.byte	4
 7268 0029 000000   		.space	3
 7269 002c 00000000 		.word	0
 7270 0030 12       		.byte	18
 7271 0031 000000   		.space	3
 7272 0034 00000000 		.word	0
 7273 0038 06       		.byte	6
 7274 0039 000000   		.space	3
 7275 003c 00000000 		.word	0
ARM GAS  /tmp/cc1aojQ3.s 			page 178


 7276 0040 07       		.byte	7
 7277 0041 000000   		.space	3
 7278 0044 00000000 		.word	0
 7279 0048 08       		.byte	8
 7280 0049 000000   		.space	3
 7281 004c 00000000 		.word	0
 7282 0050 09       		.byte	9
 7283 0051 000000   		.space	3
 7284 0054 00000000 		.word	0
 7285 0058 0A       		.byte	10
 7286 0059 000000   		.space	3
 7287 005c 00000000 		.word	0
 7288 0060 0B       		.byte	11
 7289 0061 000000   		.space	3
 7290 0064 00000000 		.word	0
 7291 0068 0C       		.byte	12
 7292 0069 000000   		.space	3
 7293 006c 00000000 		.word	0
 7294 0070 0D       		.byte	13
 7295 0071 000000   		.space	3
 7296 0074 00000000 		.word	0
 7297 0078 0E       		.byte	14
 7298 0079 000000   		.space	3
 7299 007c 00000000 		.word	0
 7300 0080 0F       		.byte	15
 7301 0081 000000   		.space	3
 7302 0084 00000000 		.word	0
 7303 0088 10       		.byte	16
 7304 0089 000000   		.space	3
 7305 008c 00000000 		.word	0
 7306 0090 18       		.byte	24
 7307 0091 000000   		.space	3
 7308 0094 00000000 		.word	0
 7309 0098 13       		.byte	19
 7310 0099 000000   		.space	3
 7311 009c 00000000 		.word	0
 7312 00a0 14       		.byte	20
 7313 00a1 000000   		.space	3
 7314 00a4 00000000 		.word	0
 7315 00a8 15       		.byte	21
 7316 00a9 000000   		.space	3
 7317 00ac 00000000 		.word	0
 7318 00b0 16       		.byte	22
 7319 00b1 000000   		.space	3
 7320 00b4 00000000 		.word	0
 7321 00b8 1E       		.byte	30
 7322 00b9 000000   		.space	3
 7323 00bc 00000000 		.word	0
 7324 00c0 19       		.byte	25
 7325 00c1 000000   		.space	3
 7326 00c4 00000000 		.word	0
 7327 00c8 1A       		.byte	26
 7328 00c9 000000   		.space	3
 7329 00cc 00000000 		.word	0
 7330 00d0 1B       		.byte	27
 7331 00d1 000000   		.space	3
 7332 00d4 00000000 		.word	0
ARM GAS  /tmp/cc1aojQ3.s 			page 179


 7333 00d8 1C       		.byte	28
 7334 00d9 000000   		.space	3
 7335 00dc 00000000 		.word	0
 7336 00e0 09       		.byte	9
 7337 00e1 000000   		.space	3
 7338 00e4 00000000 		.word	0
 7339 00e8 1F       		.byte	31
 7340 00e9 000000   		.space	3
 7341 00ec 00000000 		.word	0
 7342 00f0 20       		.byte	32
 7343 00f1 000000   		.space	3
 7344 00f4 00000000 		.word	0
 7345 00f8 21       		.byte	33
 7346 00f9 000000   		.space	3
 7347 00fc 00000000 		.word	0
 7348 0100 22       		.byte	34
 7349 0101 000000   		.space	3
 7350 0104 00000000 		.word	0
 7351 0108 24       		.byte	36
 7352 0109 000000   		.space	3
 7353 010c 00000000 		.word	0
 7354 0110 25       		.byte	37
 7355 0111 000000   		.space	3
 7356 0114 00000000 		.word	0
 7357 0118 26       		.byte	38
 7358 0119 000000   		.space	3
 7359 011c 00000000 		.word	0
 7360 0120 27       		.byte	39
 7361 0121 000000   		.space	3
 7362 0124 00000000 		.word	0
 7363 0128 28       		.byte	40
 7364 0129 000000   		.space	3
 7365 012c 00000000 		.word	0
 7366 0130 2E       		.byte	46
 7367 0131 000000   		.space	3
 7368 0134 00000000 		.word	0
 7369 0138 2E       		.byte	46
 7370 0139 000000   		.space	3
 7371 013c 00000000 		.word	0
 7372 0140 2E       		.byte	46
 7373 0141 000000   		.space	3
 7374 0144 00000000 		.word	0
 7375 0148 2E       		.byte	46
 7376 0149 000000   		.space	3
 7377 014c 00000000 		.word	0
 7378 0150 04       		.byte	4
 7379 0151 000000   		.space	3
 7380 0154 00000000 		.word	0
 7381 0158 05       		.byte	5
 7382 0159 000000   		.space	3
 7383 015c 00000000 		.word	0
 7384 0160 2E       		.byte	46
 7385 0161 000000   		.space	3
 7386 0164 00000000 		.word	0
 7387 0168 2E       		.byte	46
 7388 0169 000000   		.space	3
 7389 016c 00000000 		.word	0
ARM GAS  /tmp/cc1aojQ3.s 			page 180


 7390 0170 2E       		.byte	46
 7391 0171 000000   		.space	3
 7392 0174 00000000 		.word	0
 7393              		.section	.rodata.mid_menu,"a"
 7394              		.align	2
 7397              	mid_menu:
 7398 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7399              		.text
 7400              	.Letext0:
 7401              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7402              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7403              		.file 6 "/usr/include/newlib/sys/_types.h"
 7404              		.file 7 "/usr/include/newlib/sys/reent.h"
 7405              		.file 8 "/usr/include/newlib/sys/lock.h"
 7406              		.file 9 "/usr/include/newlib/stdlib.h"
 7407              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7408              		.file 11 "/usr/include/newlib/ctype.h"
 7409              		.file 12 "dmcp/ff_ifc.h"
 7410              		.file 13 "dmcp/dmcp.h"
 7411              		.file 14 "src/keys.h"
 7412              		.file 15 "src/menu.h"
 7413              		.file 16 "src/decNumber/decContext.h"
 7414              		.file 17 "src/decNumber/decNumber.h"
 7415              		.file 18 "src/decNumber/decimal64.h"
 7416              		.file 19 "src/decNumber/decimal128.h"
 7417              		.file 20 "src/xeq.h"
 7418              		.file 21 "src/data.h"
 7419              		.file 22 "src/display.h"
 7420              		.file 23 "src/consts.h"
 7421              		.file 24 "src/storage.h"
 7422              		.file 25 "src/catalogues.h"
 7423              		.file 26 "src/stopwatch.h"
 7424              		.file 27 "src/lcd.h"
 7425              		.file 28 "/usr/include/newlib/string.h"
 7426              		.file 29 "/usr/include/newlib/stdio.h"
 7427              		.file 30 "<built-in>"
ARM GAS  /tmp/cc1aojQ3.s 			page 181


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc1aojQ3.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cc1aojQ3.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cc1aojQ3.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cc1aojQ3.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cc1aojQ3.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc1aojQ3.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc1aojQ3.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc1aojQ3.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cc1aojQ3.s:472    .text.disp_about:0000000000000000 $t
     /tmp/cc1aojQ3.s:480    .text.disp_about:0000000000000000 disp_about
     /tmp/cc1aojQ3.s:686    .text.disp_about:00000000000000d4 $d
     /tmp/cc1aojQ3.s:710    .text.run_menu_item:0000000000000000 $t
     /tmp/cc1aojQ3.s:718    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cc1aojQ3.s:758    .text.set_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:766    .text.set_menu:0000000000000000 set_menu
     /tmp/cc1aojQ3.s:821    .text.set_menu:000000000000002c $d
     /tmp/cc1aojQ3.s:828    .text.set_default_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:836    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cc1aojQ3.s:910    .text.set_default_menu:000000000000002c $d
     /tmp/cc1aojQ3.s:919    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:927    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cc1aojQ3.s:1029   .text.toggle_default_menu:0000000000000044 $d
     /tmp/cc1aojQ3.s:1040   .text.get_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:1048   .text.get_menu:0000000000000000 get_menu
     /tmp/cc1aojQ3.s:1064   .text.get_menu:0000000000000008 $d
     /tmp/cc1aojQ3.s:1069   .text.get_last_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:1077   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cc1aojQ3.s:1093   .text.get_last_menu:0000000000000008 $d
     /tmp/cc1aojQ3.s:1098   .text.set_last_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:1106   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc1aojQ3.s:1181   .text.set_last_menu:000000000000002c $d
     /tmp/cc1aojQ3.s:1190   .text.mdot:0000000000000000 $t
     /tmp/cc1aojQ3.s:1198   .text.mdot:0000000000000000 mdot
     /tmp/cc1aojQ3.s:1289   .text.mdot:000000000000003c $d
     /tmp/cc1aojQ3.s:1294   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/cc1aojQ3.s:1302   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/cc1aojQ3.s:1344   .text.get_current_menu_ref:0000000000000028 $d
     /tmp/cc1aojQ3.s:1448   .text.get_current_menu_ref:000000000000007c $d
     /tmp/cc1aojQ3.s:5019   .rodata.Menus:0000000000000000 Menus
     /tmp/cc1aojQ3.s:1456   .text.display_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:1464   .text.display_menu:0000000000000000 display_menu
     /tmp/cc1aojQ3.s:1712   .text.display_menu:000000000000010c $d
     /tmp/cc1aojQ3.s:1719   .text.display_current_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:1727   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc1aojQ3.s:1763   .text.all_menu_dots:0000000000000000 $t
     /tmp/cc1aojQ3.s:1771   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cc1aojQ3.s:1855   .text.all_menu_dots:0000000000000038 $d
     /tmp/cc1aojQ3.s:1860   .text.umen_store:0000000000000000 $t
     /tmp/cc1aojQ3.s:1868   .text.umen_store:0000000000000000 umen_store
     /tmp/cc1aojQ3.s:1969   .text.umen_store:0000000000000050 $d
     /tmp/cc1aojQ3.s:1974   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/cc1aojQ3.s:1982   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/cc1aojQ3.s:2393   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/cc1aojQ3.s:2406   .text.build_user_menu:0000000000000000 $t
     /tmp/cc1aojQ3.s:2414   .text.build_user_menu:0000000000000000 build_user_menu
ARM GAS  /tmp/cc1aojQ3.s 			page 182


     /tmp/cc1aojQ3.s:2430   .text.build_user_menu:0000000000000008 $d
     /tmp/cc1aojQ3.s:2435   .text.shutdown:0000000000000000 $t
     /tmp/cc1aojQ3.s:2443   .text.shutdown:0000000000000000 shutdown
     /tmp/cc1aojQ3.s:2461   .text.shutdown:000000000000000c $d
     /tmp/cc1aojQ3.s:2466   .text.is_key_pressed:0000000000000000 $t
     /tmp/cc1aojQ3.s:2474   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc1aojQ3.s:2497   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc1aojQ3.s:2502   .text.get_key:0000000000000000 $t
     /tmp/cc1aojQ3.s:2510   .text.get_key:0000000000000000 get_key
     /tmp/cc1aojQ3.s:2525   .text.get_key:0000000000000004 $d
     /tmp/cc1aojQ3.s:2530   .text.put_key:0000000000000000 $t
     /tmp/cc1aojQ3.s:2538   .text.put_key:0000000000000000 put_key
     /tmp/cc1aojQ3.s:2617   .text.put_key:000000000000003c $d
     /tmp/cc1aojQ3.s:2623   .text.shift_down:0000000000000000 $t
     /tmp/cc1aojQ3.s:2631   .text.shift_down:0000000000000000 shift_down
     /tmp/cc1aojQ3.s:2646   .text.start_key_timer:0000000000000000 $t
     /tmp/cc1aojQ3.s:2654   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc1aojQ3.s:2678   .text.start_key_timer:000000000000000c $d
     /tmp/cc1aojQ3.s:2684   .text.keyticks:0000000000000000 $t
     /tmp/cc1aojQ3.s:2692   .text.keyticks:0000000000000000 keyticks
     /tmp/cc1aojQ3.s:2723   .text.keyticks:0000000000000018 $d
     /tmp/cc1aojQ3.s:2729   .text.moveto:0000000000000000 $t
     /tmp/cc1aojQ3.s:2737   .text.moveto:0000000000000000 moveto
     /tmp/cc1aojQ3.s:2797   .text.moveto:000000000000002c $d
     /tmp/cc1aojQ3.s:2804   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc1aojQ3.s:2808   .text.print_debug:0000000000000000 $t
     /tmp/cc1aojQ3.s:2816   .text.print_debug:0000000000000000 print_debug
     /tmp/cc1aojQ3.s:2918   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc1aojQ3.s:2929   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc1aojQ3.s:2933   .text.print_debug2:0000000000000000 $t
     /tmp/cc1aojQ3.s:2941   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc1aojQ3.s:3043   .text.print_debug2:0000000000000064 $d
     /tmp/cc1aojQ3.s:3054   .text.do_now:0000000000000000 $t
     /tmp/cc1aojQ3.s:3062   .text.do_now:0000000000000000 do_now
     /tmp/cc1aojQ3.s:3097   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc1aojQ3.s:3101   .text.do_multi:0000000000000000 $t
     /tmp/cc1aojQ3.s:3109   .text.do_multi:0000000000000000 do_multi
     /tmp/cc1aojQ3.s:3139   .text.do_multi:0000000000000016 $d
     /tmp/cc1aojQ3.s:3153   .text.do_multi:0000000000000024 $t
     /tmp/cc1aojQ3.s:3571   .text.do_multi:00000000000001c0 $d
     /tmp/cc1aojQ3.s:3585   .text.program_main:0000000000000000 $t
     /tmp/cc1aojQ3.s:3593   .text.program_main:0000000000000000 program_main
     /tmp/cc1aojQ3.s:3858   .text.program_main:000000000000011c $d
     /tmp/cc1aojQ3.s:3864   .text.program_main:0000000000000128 $t
     /tmp/cc1aojQ3.s:4257   .text.program_main:00000000000002dc $d
     /tmp/cc1aojQ3.s:4298   .text.program_main:0000000000000364 $t
     /tmp/cc1aojQ3.s:4766   .text.program_main:000000000000059c $d
     /tmp/cc1aojQ3.s:4854   .bss.n_p:0000000000000000 n_p
     /tmp/cc1aojQ3.s:5003   .data.spaces:0000000000000000 spaces
     /tmp/cc1aojQ3.s:4994   .data.release:0000000000000000 release
     /tmp/cc1aojQ3.s:4967   .data.h_shift:0000000000000000 h_shift
     /tmp/cc1aojQ3.s:4958   .data.g_shift:0000000000000000 g_shift
     /tmp/cc1aojQ3.s:4950   .data.f_shift:0000000000000000 f_shift
     /tmp/cc1aojQ3.s:4976   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc1aojQ3.s:4985   .data.no_key:0000000000000000 no_key
     /tmp/cc1aojQ3.s:5010   .rodata.MID_MENU:0000000000000000 MID_MENU
ARM GAS  /tmp/cc1aojQ3.s 			page 183


     /tmp/cc1aojQ3.s:4794   .rodata.str1.4:0000000000000000 $d
     /tmp/cc1aojQ3.s:7397   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc1aojQ3.s:4835   .bss.default_menu:0000000000000000 default_menu
     /tmp/cc1aojQ3.s:4841   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc1aojQ3.s:4829   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc1aojQ3.s:4944   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/cc1aojQ3.s:4937   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cc1aojQ3.s:4868   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cc1aojQ3.s:4811   .rodata:0000000000000000 $d
     /tmp/cc1aojQ3.s:4830   .bss.current_menu:0000000000000000 $d
     /tmp/cc1aojQ3.s:4836   .bss.default_menu:0000000000000000 $d
     /tmp/cc1aojQ3.s:4842   .bss.last_menu:0000000000000000 $d
     /tmp/cc1aojQ3.s:4844   .bss.mdots:0000000000000000 $d
     /tmp/cc1aojQ3.s:4848   .bss.mdots:0000000000000000 mdots
     /tmp/cc1aojQ3.s:4851   .bss.n_p:0000000000000000 $d
     /tmp/cc1aojQ3.s:4857   .bss.start_ticks:0000000000000000 $d
     /tmp/cc1aojQ3.s:4861   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc1aojQ3.s:4864   .data.UserMenu:0000000000000000 $d
     /tmp/cc1aojQ3.s:4933   .data.arrow_key_string:0000000000000000 $d
     /tmp/cc1aojQ3.s:4940   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cc1aojQ3.s:4947   .data.f_shift:0000000000000000 $d
     /tmp/cc1aojQ3.s:4955   .data.g_shift:0000000000000000 $d
     /tmp/cc1aojQ3.s:4963   .data.h_shift:0000000000000000 $d
     /tmp/cc1aojQ3.s:4972   .data.heartbeat:0000000000000000 $d
     /tmp/cc1aojQ3.s:4981   .data.no_key:0000000000000000 $d
     /tmp/cc1aojQ3.s:4990   .data.release:0000000000000000 $d
     /tmp/cc1aojQ3.s:4999   .data.spaces:0000000000000000 $d
     /tmp/cc1aojQ3.s:5006   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc1aojQ3.s:5016   .rodata.Menus:0000000000000000 $d
     /tmp/cc1aojQ3.s:6659   .rodata.mapping_alpha.11145:0000000000000000 $d
     /tmp/cc1aojQ3.s:6663   .rodata.mapping_alpha.11145:0000000000000000 mapping_alpha.11145
     /tmp/cc1aojQ3.s:6806   .rodata.mapping_fshift.11143:0000000000000000 $d
     /tmp/cc1aojQ3.s:6810   .rodata.mapping_fshift.11143:0000000000000000 mapping_fshift.11143
     /tmp/cc1aojQ3.s:6953   .rodata.mapping_gshift.11144:0000000000000000 $d
     /tmp/cc1aojQ3.s:6957   .rodata.mapping_gshift.11144:0000000000000000 mapping_gshift.11144
     /tmp/cc1aojQ3.s:7100   .rodata.mapping_none.11142:0000000000000000 $d
     /tmp/cc1aojQ3.s:7104   .rodata.mapping_none.11142:0000000000000000 mapping_none.11142
     /tmp/cc1aojQ3.s:7247   .rodata.mapping_running.11146:0000000000000000 $d
     /tmp/cc1aojQ3.s:7251   .rodata.mapping_running.11146:0000000000000000 mapping_running.11146
     /tmp/cc1aojQ3.s:7394   .rodata.mid_menu:0000000000000000 $d
     /tmp/cc1aojQ3.s:1359   .text.get_current_menu_ref:0000000000000037 $d
     /tmp/cc1aojQ3.s:1359   .text.get_current_menu_ref:0000000000000038 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
xcopy
SvnRevision
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
ARM GAS  /tmp/cc1aojQ3.s 			page 184


getprog
prt_umen
catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus
JustStopped
